
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Режим = Параметры.Режим;
	Элементы.ФормаИсторияСогласования.Видимость = Ложь;
	Если Режим = "УправлениеСогласованием" Тогда
		Объект.ШаблонПроцесса = Параметры.ШаблонПроцесса;
		Если Не ЗначениеЗаполнено(Параметры.ШаблонПроцесса) Тогда	
			ТекстПустойТаблицы = НСтр("ru = 'Шаблон процесса согласования не задан'");
			СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаПроцесс, ТекстПустойТаблицы);	
			Элементы.ПараметрыПроцесса.Видимость = Ложь;
			Элементы.ШаблонПроцесса.Доступность = Ложь;
			Элементы.ДекорацияСвернутьРазвернуть.Видимость = Ложь;
			Элементы.ГруппаУправлениеПроцессом.Видимость = Ложь;
			ЭтаФорма.Доступность = Ложь;
			Возврат;
		КонецЕсли;
		СогласуемыйОбъект = Параметры.СогласуемыйОбъект;
		Объект.ЭкземплярПроцесса = Неопределено;
		Объект.ПараметрыПроцесса.Загрузить(Объект.ШаблонПроцесса.ПараметрыПроцесса.Выгрузить());	
		Элементы.ПараметрыПроцесса.Видимость = Ложь;
		ЗаполнитьДеревоПараметров(Параметры);
        Элементы.ШаблонПроцесса.Доступность = Ложь;
		Элементы.ДекорацияСвернутьРазвернуть.Видимость = Ложь;
		Элементы.ГруппаУправлениеПроцессом.Видимость = Ложь;
		Элементы.ФормаИсторияСогласования.Видимость = ЗначениеЗаполнено(СогласуемыйОбъект);
	ИначеЕсли Режим = "УправлениеПроизвольнымПроцессом" Тогда
		Объект.ШаблонПроцесса = Параметры.ШаблонПроцесса;
		Объект.ЭкземплярПроцесса = Неопределено;
		Объект.ПараметрыПроцесса.Загрузить(Объект.ШаблонПроцесса.ПараметрыПроцесса.Выгрузить());	
		ЗаполнитьДеревоПараметров(Параметры);
        Элементы.ШаблонПроцесса.Доступность = Ложь;
	КонецЕсли;
	СформироватьДиаграммуПроцессаСервер();	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура Запуск(Команда)
		
	Если  ПроцессЗапущен Тогда
		 Возврат;
	КонецЕсли;	
	
	ЗапускСервер();	
	Элементы.Запуск.Доступность = НЕ ПроцессЗапущен;
	Элементы.Отмена.Доступность = ПроцессЗапущен;
    СформироватьДиаграммуПроцессаСервер();
    
	
КонецПроцедуры

&НаКлиенте
Процедура Остановка(Команда)
	
	Если НЕ ПроцессЗапущен Тогда
		 Возврат;
	КонецЕсли;	
	
	ОстановкаСервер();
	
	Элементы.Запуск.Доступность = НЕ ПроцессЗапущен;
	Элементы.Отмена.Доступность = ПроцессЗапущен;
    СформироватьДиаграммуПроцессаСервер();

КонецПроцедуры

&НаКлиенте
Процедура ШаблонПроцессаПриИзменении(Элемент)
	
	
	Объект.ЭкземплярПроцесса = Неопределено;
	ЗаполнитьПараметрыПроцесса();
	
	ПроцессЗапущен = Ложь;
	Элементы.Запуск.Доступность = НЕ ПроцессЗапущен;
	Элементы.Отмена.Доступность = ПроцессЗапущен; 
	
	ЭлементыДерева = ДеревоПараметровПроцесса.ПолучитьЭлементы();
    Для каждого ЭлементДерева Из ЭлементыДерева Цикл
        Элементы.ПараметрыПроцесса.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
    КонецЦикла;
	
	УстановитьЗаголовокФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПроцессаПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные.Ключевой Тогда
		ОпределитьТекущийПроцессПоКлючам(Элемент.ТекущиеДанные.ИмяПараметра,Элемент.ТекущиеДанные.ЗначениеПараметра);	
		Если ПроцессЗапущен Тогда
			ОбовитьЗначенияПараметровПроцесса();	
			
			ЭлементыДерева = ДеревоПараметровПроцесса.ПолучитьЭлементы();
			Для каждого ЭлементДерева Из ЭлементыДерева Цикл
				Элементы.ПараметрыПроцесса.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПроцессаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные.ТипСтроки = 1 Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Поле.Заголовок <>"Значение"  Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;	
	КонецЕсли;
	
	Если ПроцессЗапущен  Тогда
		Если НЕ Элемент.ТекущиеДанные.Ключевой   Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатус_Завершен(Команда)
	
	ТекущийЭтап = ВернутьВыбранныйЭтап();
	
	Если ТекущийЭтап = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправленияПроцессамиУХ.УстановитьСостояниеТекущегоЭтапаЗавершен(ТекущийЭтап,Объект.ЭкземплярПроцесса);
	СформироватьДиаграммуПроцессаСервер(); 

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатус_ВОбработке(Команда)
	
	ТекущийЭтап = ВернутьВыбранныйЭтап();
	
	Если ТекущийЭтап = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправленияПроцессамиУХ.УстановитьСостояниеТекущегоЭтапаВОбработке(ТекущийЭтап,Объект.ЭкземплярПроцесса);
    СформироватьДиаграммуПроцессаСервер(); 

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатус_НеАктивен(Команда)
	
	ТекущийЭтап = ВернутьВыбранныйЭтап();
	
	Если ТекущийЭтап = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МодульУправленияПроцессамиУХ.УстановитьСостояниеТекущегоЭтапаНеАктивен(ТекущийЭтап,Объект.ЭкземплярПроцесса);
    СформироватьДиаграммуПроцессаСервер(); 

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТекущийЭтап(Команда)
	
	ТекстПроцедурыЭтапа = "";
	ТекущийЭтап = ВернутьВыбранныйЭтап();
	
	Если ТекущийЭтап = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПроцедурыЭтапа = ПолучитьТекстПроцедурыЭтапа(ТекущийЭтап);
	ТипЭтапа = ПолучитьТипЭтапа(ТекущийЭтап);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТекущийЭтап",ТекущийЭтап);
	СтруктураПараметров.Вставить("ТипЭтапа",ТипЭтапа);

	СтруктураПараметров.Вставить("ЭкземплярПроцесса",Объект.ЭкземплярПроцесса);
	СтруктураПараметров.Вставить("СогласуемыйОбъект",СогласуемыйОбъект);
	СтруктураПараметров.Вставить("ДокументУправленияПериодом",Объект.ПараметрыПроцесса[0].ЗначениеПоУмолчанию); 	
	
	МодульОбработкиЭтаповПроцессовКлиентУХ.ОбработатьЭтап(СтруктураПараметров,ТекстПроцедурыЭтапа);
	
	СформироватьДиаграммуПроцессаСервер(); 

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПроцессаЗначениеПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элемент.ОграничениеТипа = Элементы.ПараметрыПроцесса.ТекущиеДанные.ТипПараметра;
	
		
КонецПроцедуры

&НаКлиенте
Процедура ТабДокПроцессаПриАктивизацииОбласти(Элемент)
	
	ТекущийЭтап = ВернутьВыбранныйЭтап();
	ТаблицаДопСогласования.Очистить();
	РезультатДопСогласование = МассивДанныхДопСогласующих(Объект.ЭкземплярПроцесса, ТекущийЭтап);
	Если РезультатДопСогласование.Количество() > 0 Тогда
		Для Каждого ТекРезультатДопСогласование Из РезультатДопСогласование Цикл
			НоваяСтрока = ТаблицаДопСогласования.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекРезультатДопСогласование);
		КонецЦикла;	
		Элементы.ТаблицаДопСогласования.Видимость = Истина;
	Иначе
		Элементы.ТаблицаДопСогласования.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСвернутьРазвернутьНажатие(Элемент)
	
	Если Элемент.Картинка = БиблиотекаКартинок.СтрелкаВлевоКрасная Тогда
		Элементы.ПараметрыПроцесса.Видимость = Истина;
		Элемент.Картинка = БиблиотекаКартинок.СтрелкаВправоКрасная;	
	Иначе	
		Элементы.ПараметрыПроцесса.Видимость = Ложь;
		Элемент.Картинка = БиблиотекаКартинок.СтрелкаВлевоКрасная;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСхему(Команда)
	СформироватьДиаграммуПроцессаСервер();
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗапускСервер()
		
	АктуализироватьПараметрыПроцесса();
	
	ДеревоПараметровПроцесса_ = РеквизитФормыВЗначение("ДеревоПараметровПроцесса");
	Для Каждого Пар Из ДеревоПараметровПроцесса_.строки[1].строки Цикл
		Если ЗначениеЗаполнено(Пар.ЗначениеПараметра) Тогда
			 сПараметр = Объект.ПараметрыПроцесса.НайтиСтроки(Новый Структура("ИмяПараметра",Пар.ИмяПараметра))[0];
			 сПараметр.ЗначениеПоУмолчанию = Пар.ЗначениеПараметра;
		КонецЕсли;	
		
	КонецЦикла;
	
	Если  Объект.ШаблонПроцесса.НазначениеПроцесса = Перечисления.НазначенияУниверсальныхПроцессов.ПроцессПодготовкиОтчетности Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.УправлениеОтчетнымПериодом) Тогда
			 ПроцессЗапущен = Ложь;
			 ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Ошибка инициализации процесса: не выбран процесс!'"));
             Возврат;
		КонецЕсли;
		
	
		Если МодульУправленияПроцессамиУХ.ИнициализироватьПроцесс(Объект.ПараметрыПроцесса,Объект.ШаблонПроцесса,,Объект.УправлениеОтчетнымПериодом,,,Объект.ЭкземплярПроцесса) Тогда
			Сообщить(НСтр("ru = 'Процесс успешно запущен'")); 
			ПроцессЗапущен = Истина;
		Иначе	
			ПроцессЗапущен = Ложь;
			ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Ошибка инициализации процесса'"));
		КонецЕсли;
		
	ИначеЕсли Объект.ШаблонПроцесса.НазначениеПроцесса = Перечисления.НазначенияУниверсальныхПроцессов.МаршрутСогласования Тогда	
		
		Если СогласуемыйОбъект = Неопределено Тогда
			 ПроцессЗапущен = Ложь;
			 ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Ошибка инициализации процесса: не выбран согласуемый объект.'"));
             Возврат;
		КонецЕсли;
		
		Если МодульУправленияПроцессамиУХ.ИнициализироватьПроцесс(Объект.ПараметрыПроцесса,Объект.ШаблонПроцесса,,СогласуемыйОбъект,,,Объект.ЭкземплярПроцесса) Тогда
			Сообщить(НСтр("ru = 'Процесс успешно запущен'")); 
			ПроцессЗапущен = Истина;	
		Иначе	
			 ПроцессЗапущен = Ложь;
			 ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Ошибка инициализации процесса'"));
		 КонецЕсли;
		
		
	ИначеЕсли Объект.ШаблонПроцесса.НазначениеПроцесса = Перечисления.НазначенияУниверсальныхПроцессов.ПроизвольныйПроцесс Тогда	
		
		КлючевыеПараметры = РеквизитФормыВЗначение("ДеревоПараметровПроцесса").Строки[0].Строки.НайтиСтроки(Новый Структура("Ключевой",Истина));
		Если КлючевыеПараметры.Количество() = 0 Тогда
			  ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Не найдены ключевые параметры процесса. Запуск отменен.'"));
			  ПроцессЗапущен = Ложь;
              Возврат;
		КонецЕсли;	
			
		Если МодульУправленияПроцессамиУХ.ИнициализироватьПроцесс(Объект.ПараметрыПроцесса,Объект.ШаблонПроцесса,,КлючевыеПараметры,,,Объект.ЭкземплярПроцесса) Тогда
			Сообщить(НСтр("ru = 'Процесс успешно запущен'")); 
			ПроцессЗапущен = Истина;
			
		Иначе	
			 ПроцессЗапущен = Ложь;
			 ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Ошибка инициализации процесса'"));
		 КонецЕсли;
	  
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьПараметрыПроцесса()
	ДеревоПараметров = РеквизитФормыВЗначение("ДеревоПараметровПроцесса");
	Для Каждого СтрПараметр Из ДеревоПараметров.Строки[0].Строки Цикл
		СтрокаПараметр = Объект.ПараметрыПроцесса.НайтиСтроки(Новый Структура("КодПараметра",СтрПараметр.КодПараметра))[0];
		СтрокаПараметр.ЗначениеПоУмолчанию = СтрПараметр.ЗначениеПараметра;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОстановкаСервер()
	
	Если МодульУправленияПроцессамиУХ.ОстановитьПроцесс(Объект.ЭкземплярПроцесса) Тогда
		Сообщить(НСтр("ru = 'Процесс остановлен'")); 
		ПроцессЗапущен = Ложь;
		Объект.ЭкземплярПроцесса = Документы.ЭкземплярПроцесса.ПустаяСсылка();
	Иначе	
		 ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Ошибка остановки процесса'"));
	КонецЕсли;		
	 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыПроцесса()
	
	 Объект.ПараметрыПроцесса.Загрузить(Объект.ШаблонПроцесса.ПараметрыПроцесса.Выгрузить());	
	 ПолеТабличногоДокументаПроцесс.Очистить();
	 ЗаполнитьДеревоПараметров();
	 СформироватьДиаграммуПроцессаСервер();
	 
 КонецПроцедуры

&НаСервере
Процедура СформироватьДиаграммуПроцессаСервер()
	
	ОтчетОбъект = РеквизитФормыВЗначение("Объект");
	ПолеТабличногоДокументаПроцесс.Очистить();
	
	Макет = ОтчетОбъект.ПолучитьМакет("Макет");
	// Получим макет заголовка в зависимости от ключевого объекта.
	ЗагрузитьПолныйЗаголовок = Ложь;
	ЭкземплярПроцессаОтчета = Объект.ЭкземплярПроцесса;
	Если ЗначениеЗаполнено(ЭкземплярПроцессаОтчета) Тогда
		ЭтоНастраиваемыйОтчет = (ТипЗнч(ЭкземплярПроцессаОтчета.КлючевойОбъектПроцесса) = Тип("ДокументСсылка.НастраиваемыйОтчет"));
		ЗагрузитьПолныйЗаголовок = ЭтоНастраиваемыйОтчет;
	Иначе
		ЗагрузитьПолныйЗаголовок = Ложь;
	КонецЕсли;
	Если ЗагрузитьПолныйЗаголовок Тогда
		МакетЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		МакетЗаголовок.Параметры.Заполнить(ЭкземплярПроцессаОтчета);
		МакетЗаголовок.Параметры.Заполнить(ЭкземплярПроцессаОтчета.КлючевойОбъектПроцесса);
	Иначе
		МакетЗаголовок = Макет.ПолучитьОбласть("ЗаголовокКраткий");
		МакетЗаголовок.Параметры.Заполнить(Объект.ЭкземплярПроцесса);
	КонецЕсли;

	МакетЗаголовок.Параметры.МаршрутСогласования = Объект.ШаблонПроцесса;

	ПолеТабличногоДокументаПроцесс.Вывести(МакетЗаголовок);
	ПолеТабличногоДокументаПроцесс.Вывести(ОтчетОбъект.СформироватьОтчет());
	УстановитьЗаголовокФормы();
КонецПроцедуры

&НаСервере
Функция ОпределитьТекущийПроцессПоКлючам(ИмяКлюча,ЗначениеКлюча)
	
	Если Объект.ШаблонПроцесса.НазначениеПроцесса = Перечисления.НазначенияУниверсальныхПроцессов.ПроцессПодготовкиОтчетности Тогда
		Если ИмяКлюча = "Управление отчетным периодом" Тогда
			Объект.ЭкземплярПроцесса = Неопределено;
			ПроцессЗапущен = МодульУправленияПроцессамиУХ.ПроверитьПроцессИнициализирован(ЗначениеКлюча,Объект.ЭкземплярПроцесса,,Объект.ШаблонПроцесса);	
			Элементы.Запуск.Доступность = НЕ ПроцессЗапущен;
			Элементы.Отмена.Доступность = ПроцессЗапущен; 
			СформироватьДиаграммуПроцессаСервер(); 
			Объект.УправлениеОтчетнымПериодом = ЗначениеКлюча;
		КонецЕсли;
		
	ИначеЕсли Объект.ШаблонПроцесса.НазначениеПроцесса = Перечисления.НазначенияУниверсальныхПроцессов.МаршрутСогласования Тогда
		
		Если ИмяКлюча = "Согласуемый объект" Тогда
			Объект.ЭкземплярПроцесса = Неопределено;
			СогласуемыйОбъект = ЗначениеКлюча;
			ПроцессЗапущен = МодульУправленияПроцессамиУХ.ПроверитьПроцессИнициализирован(ЗначениеКлюча,Объект.ЭкземплярПроцесса,,Объект.ШаблонПроцесса);	
			Элементы.Запуск.Доступность = НЕ ПроцессЗапущен;
			Элементы.Отмена.Доступность = ПроцессЗапущен; 
			СформироватьДиаграммуПроцессаСервер(); 
			
		КонецЕсли;
	ИначеЕсли Объект.ШаблонПроцесса = Справочники.ШаблоныУниверсальныхПроцессов.Автоутверждение Тогда
		
		Если ИмяКлюча = "Согласуемый объект" Тогда
			Объект.ЭкземплярПроцесса = Неопределено;
			СогласуемыйОбъект = ЗначениеКлюча;
			ПроцессЗапущен = МодульУправленияПроцессамиУХ.ПроверитьПроцессИнициализирован(ЗначениеКлюча,Объект.ЭкземплярПроцесса,,Объект.ШаблонПроцесса);	
			Элементы.Запуск.Доступность = НЕ ПроцессЗапущен;
			Элементы.Отмена.Доступность = ПроцессЗапущен; 
			СформироватьДиаграммуПроцессаСервер(); 
			
		КонецЕсли;
	
		
		
	ИначеЕсли Объект.ШаблонПроцесса.НазначениеПроцесса = Перечисления.НазначенияУниверсальныхПроцессов.ПроизвольныйПроцесс Тогда
		
		    Объект.ЭкземплярПроцесса = Неопределено;
			КлючевыеПараметры = РеквизитФормыВЗначение("ДеревоПараметровПроцесса").Строки[0].Строки.НайтиСтроки(Новый Структура("Ключевой",Истина));
			Если КлючевыеПараметры.Количество() = 0 Тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Не найдены ключевые параметры процесса'"));
				ПроцессЗапущен = Ложь;
				Возврат Неопределено;
			КонецЕсли;	

			ПроцессЗапущен = МодульУправленияПроцессамиУХ.ПроверитьПроцессИнициализирован(КлючевыеПараметры,Объект.ЭкземплярПроцесса,Истина,Объект.ШаблонПроцесса);	
			Элементы.Запуск.Доступность = НЕ ПроцессЗапущен;
			Элементы.Отмена.Доступность = ПроцессЗапущен; 
			СформироватьДиаграммуПроцессаСервер(); 
	
	КонецЕсли;	
	
		
КонецФункции	

// Устанавливает зоголовок формы в зависимости от значения реквизитов.
&НаСервере
Процедура УстановитьЗаголовокФормы()
	НовыйЗаголовок = НСтр("ru = 'Консоль управления процессом'");
	ТекПроцесс = Объект.ЭкземплярПроцесса;
	Если ЗначениеЗаполнено(Объект.ЭкземплярПроцесса) Тогда
		// Есть экземпляр процесса. Выведем его ключевой объект.
		Если ТекПроцесс.НазначениеПроцесса = Перечисления.НазначенияУниверсальныхПроцессов.МаршрутСогласования Тогда
			НовыйЗаголовок = НСтр("ru = 'Согласование: %Объект%'");
		ИначеЕсли ТекПроцесс.НазначениеПроцесса = Перечисления.НазначенияУниверсальныхПроцессов.ПроизвольныйПроцесс Тогда	
			НовыйЗаголовок = НСтр("ru = 'Универсальный процесс: %Объект%'");	
		ИначеЕсли ТекПроцесс.НазначениеПроцесса = Перечисления.НазначенияУниверсальныхПроцессов.ПроцессПодготовкиОтчетности Тогда	
			НовыйЗаголовок = НСтр("ru = 'Подготовка отчетности: %Объект%'");	
		Иначе
			НовыйЗаголовок = НСтр("ru = 'Консоль управления процессом'");
		КонецЕсли;
		КлючевойОбъект = Объект.ЭкземплярПроцесса.КлючевойОбъектПроцесса;
		НовыйЗаголовок = СтрЗаменить(НовыйЗаголовок, "%Объект%", Строка(КлючевойОбъект));
	Иначе
		// Экземпляра нет. Попытаемся определить по шаблону.
		ТекШаблон = Объект.ШаблонПроцесса;
		Если ЗначениеЗаполнено(ТекШаблон) Тогда
			Если ТекШаблон.НазначениеПроцесса = Перечисления.НазначенияУниверсальныхПроцессов.МаршрутСогласования Тогда
				НовыйЗаголовок = НСтр("ru = 'Согласование'");
			ИначеЕсли ТекШаблон.НазначениеПроцесса = Перечисления.НазначенияУниверсальныхПроцессов.ПроизвольныйПроцесс Тогда	
				НовыйЗаголовок = НСтр("ru = 'Универсальный процесс'");	
			ИначеЕсли ТекШаблон.НазначениеПроцесса = Перечисления.НазначенияУниверсальныхПроцессов.ПроцессПодготовкиОтчетности Тогда	
				НовыйЗаголовок = НСтр("ru = 'Подготовка отчетности'");	
			Иначе
				НовыйЗаголовок = НСтр("ru = 'Консоль управления процессом'");
			КонецЕсли;
		Иначе	
			Если Режим = "УправлениеСогласованием" Тогда
				НовыйЗаголовок = НСтр("ru = 'Согласование'");
			ИначеЕсли Режим = "УправлениеПроизвольнымПроцессом" Тогда	
				НовыйЗаголовок = НСтр("ru = 'Универсальный процесс'");	
			Иначе
				НовыйЗаголовок = НСтр("ru = 'Консоль управления процессом'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЭтаФорма.Заголовок = НовыйЗаголовок;	
КонецПроцедуры		// УстановитьЗаголовокФормы()

// Отображает таблицу дополнительных согласующих по этапу ЭтапВход
&НаСервереБезКонтекста
Функция МассивДанныхДопСогласующих(ЭкземплярПроцессаВход, ЭтапВход)
	РезультатФункции = Новый Массив;
	РезультатДопСогласование = МодульСогласованияДокументовУХ.ПолучитьТаблицуДопСогласующихПоЭтапу(ЭкземплярПроцессаВход, ЭтапВход);
	Для Каждого ТекРезультатДопСогласование Из РезультатДопСогласование Цикл
		ТекВиза					 = ТекРезультатДопСогласование.Виза;
		ТекАрхивнаяЗапись		 = ТекРезультатДопСогласование.АрхивнаяЗапись;
		ПредставлениеСтатуса	 = МодульСогласованияДокументовУХ.ПредставлениеСтатусаДопСогласования(ТекАрхивнаяЗапись, ТекВиза);
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("АрхивнаяЗапись",			 ТекАрхивнаяЗапись);
		СтруктураДанных.Вставить("Виза",					 ТекВиза);
		СтруктураДанных.Вставить("ПредставлениеСтатуса",	 ПредставлениеСтатуса);
		СтруктураДанных.Вставить("Согласующий",				 ТекРезультатДопСогласование.Согласующий);
		СтруктураДанных.Вставить("Комментарий",				 ТекРезультатДопСогласование.Комментарий);
		СтруктураДанных.Вставить("ДобавившийПользователь",	 ТекРезультатДопСогласование.ДобавившийПользователь);
		СтруктураДанных.Вставить("Задача",					 ТекРезультатДопСогласование.Задача);
		РезультатФункции.Добавить(СтруктураДанных);
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		// МассивДанныхДопСогласующих()

&НаКлиенте
Функция ВернутьВыбранныйЭтап()
	РезультатФункции = Неопределено;
	ВыделенныеОбласти = Элементы.ТабДокПроцесса.ПолучитьВыделенныеОбласти();
	Если ВыделенныеОбласти.Количество() <> 1 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нужно выбрать один этап процесса для обработки.'"));
		РезультатФункции = Неопределено;
	Иначе
		ПерваяОбласть = ВыделенныеОбласти[0];
		Если ТипЗнч(ПерваяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
			РезультатФункции = ПерваяОбласть.Расшифровка;
		ИначеЕсли ТипЗнч(ПерваяОбласть) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда	
			Если ПерваяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				РезультатФункции = ПерваяОбласть.Расшифровка;
			Иначе	
				РезультатФункции = Неопределено;
			КонецЕсли;
		Иначе
			РезультатФункции = ПерваяОбласть.Расшифровка;
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

&НаСервере
Функция ЭтоЭтапВложенногоПроцесса(ТекущийЭтап)
	
	Если Не ТипЗнч(ТекущийЭтап) = Тип("СправочникСсылка.ЭтапыУниверсальныхПроцессов") Тогда
		 Возврат Ложь;
	КонецЕсли;	
	
	Если ТекущийЭтап.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ДочернийМаршрут  Тогда
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыВложенногоПроцесса(ТекущийЭтап)
	
	Возврат Новый Структура("СогласуемыйОбъект, ШаблонПроцесса,Режим", СогласуемыйОбъект,ТекущийЭтап.ДочернийМаршрут,"УправлениеСогласованием");
	
КонецФункции

&НаСервере
Функция ПолучитьТекстПроцедурыЭтапа(ТекущийЭтап)
	
	Если ТекущийЭтап.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности  Тогда
		Возврат "ОбработатьДокументыЭтапа(СтруктураПараметров)";
	Иначе	
		Возврат ТекущийЭтап.ПроцедураПроцесса;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьТипЭтапа(ТекущийЭтап)
	
	Возврат ТекущийЭтап.ТипЭтапа;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоПараметров(СтруктураЗначенийПараметров=Неопределено)
	
	ДеревоП = РеквизитФормыВЗначение("ДеревоПараметровПроцесса");
	ДеревоП.Строки.Очистить();
	Нстр = ДеревоП.Строки.Добавить();
	Нстр.ИмяПараметра = "Ключевые параметры ";
	Нстр.ИндексКартинки = 0;
	Нстр.ТипСтроки = 1;
	
	Нстр1 = ДеревоП.Строки.Добавить();
	Нстр1.ИмяПараметра = "Параметры";
	Нстр1.ИндексКартинки = 0;
	Нстр1.ТипСтроки = 1;
	
	Если Объект.ШаблонПроцесса = Справочники.ШаблоныУниверсальныхПроцессов.Автоутверждение Тогда
		СтрокаПараметра =   Объект.ПараметрыПроцесса.Добавить();
		СтрокаПараметра.ИмяПараметра = "Согласуемый объект";
		СтрокаПараметра.КодПараметра = "СогласуемыйОбъект";
		СтрокаПараметра.Ключевой = Истина;
		
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СогласуемыйОбъект)) Тогда
			ТипЗначенияПараметраСсылка = Справочники.СправочникиБД.НайтиПоНаименованию(СогласуемыйОбъект.Метаданные().имя,,,Справочники.ТипыБазДанных.ТекущаяИБ);		
		Иначе	
			ТипЗначенияПараметраСсылка = Справочники.ДокументыБД.НайтиПоНаименованию(СогласуемыйОбъект.Метаданные().имя,,,Справочники.ТипыБазДанных.ТекущаяИБ);
		КонецЕсли;
		
		СтрокаПараметра.ТипЗначенияПараметраСсылка 	= ТипЗначенияПараметраСсылка;
	КонецЕсли;	 
	
	
	КлючевыеПараметры = Объект.ПараметрыПроцесса.НайтиСтроки(Новый Структура("Ключевой",Истина));
	Для Каждого СтрПараметер ИЗ  КлючевыеПараметры Цикл
		
		НстрПарамер =  Нстр.Строки.Добавить();
		НстрПарамер.ИмяПараметра = СтрПараметер.ИмяПараметра;
		НстрПарамер.КодПараметра = СтрПараметер.КодПараметра;
		НстрПарамер.ЗначениеПараметра = СтрПараметер.ЗначениеПоУмолчанию;
		НстрПарамер.ИндексКартинки = 3;
		НстрПарамер.Ключевой = СтрПараметер.Ключевой;
		НстрПарамер.ТипСтроки = 2;
		НстрПарамер.ТипЗначенияПараметраСтрока =  СтрПараметер.ТипЗначенияПараметраСтрока;
		Если СтрПараметер.ЭтоПростойТип Тогда
			НстрПарамер.ТипПараметра = Новый ОписаниеТипов(СтрПараметер.ТипЗначенияПараметраСтрока);
		Иначе		
			НстрПарамер.ТипПараметра = Новый ОписаниеТипов(ОпределитьТипМетаданных(Строка(СтрПараметер.ТипЗначенияПараметраСсылка)));
		КонецЕсли; 
		
	КонецЦикла;
	
	неКлючевыеПараметры = Объект.ПараметрыПроцесса.НайтиСтроки(Новый Структура("Ключевой",Ложь));
	Для Каждого СтрПараметер ИЗ  неКлючевыеПараметры Цикл
		НстрПарамер =  Нстр1.Строки.Добавить();
		НстрПарамер.ИмяПараметра = СтрПараметер.ИмяПараметра;
		НстрПарамер.КодПараметра = СтрПараметер.КодПараметра;
		НстрПарамер.ЗначениеПараметра = СтрПараметер.ЗначениеПоУмолчанию;
		НстрПарамер.ИндексКартинки = 3;
		НстрПарамер.Ключевой = СтрПараметер.Ключевой;
		НстрПарамер.ТипСтроки = 2;
		НстрПарамер.ТипЗначенияПараметраСтрока =  СтрПараметер.ТипЗначенияПараметраСтрока;
		Если СтрПараметер.ЭтоПростойТип Тогда
			НстрПарамер.ТипПараметра = Новый ОписаниеТипов(СтрПараметер.ТипЗначенияПараметраСтрока);
		Иначе		
			НстрПарамер.ТипПараметра = Новый ОписаниеТипов(ОпределитьТипМетаданных(Строка(СтрПараметер.ТипЗначенияПараметраСсылка)));
		КонецЕсли; 
		
	КонецЦикла;
	
	Если НЕ СтруктураЗначенийПараметров = Неопределено Тогда
		Для Каждого  Строка  из ДеревоП.Строки[0].Строки Цикл
			Если  СтруктураЗначенийПараметров.Свойство(Строка.КодПараметра) Тогда
				Строка.ЗначениеПараметра = СтруктураЗначенийПараметров[Строка.КодПараметра]; 
				Если Строка.Ключевой Тогда
					ОпределитьТекущийПроцессПоКлючам(Строка.ИмяПараметра, Строка.ЗначениеПараметра);							   
				КонецЕсли; 	   
			КонецЕсли;	 
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоП,"ДеревоПараметровПроцесса");
	
КонецПроцедуры	

&НаСервере
Процедура ОбовитьЗначенияПараметровПроцесса()
	
	ДеревоП = РеквизитФормыВЗначение("ДеревоПараметровПроцесса");
	
	ТекущиеЗначенияПараметров = Объект.ЭкземплярПроцесса.ПараметрыПроцесса.Выгрузить();
	Для Каждого ТекПараметр Из ДеревоП.Строки[1].Строки Цикл
		СохраненныйПараметр = ТекущиеЗначенияПараметров.НайтиСтроки(Новый Структура("КодПараметра",ТекПараметр.КодПараметра))[0];
		ТекПараметр.ЗначениеПараметра = СохраненныйПараметр.ЗначениеПоУмолчанию;
	КонецЦикла;	 
	
	ЗначениеВРеквизитФормы(ДеревоП,"ДеревоПараметровПроцесса");
	
КонецПроцедуры	

&НаКлиенте
Процедура Приостановка(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьТипМетаданных(ИмяОбъекта)
	
	Если НЕ Метаданные.НайтиПоПолномуИмени("Справочник."+ИмяОбъекта) = Неопределено Тогда
		Возврат "СправочникСсылка."+ИмяОбъекта;
	ИначеЕсли НЕ Метаданные.НайтиПоПолномуИмени("Документ."+ИмяОбъекта) = Неопределено Тогда
		Возврат "ДокументСсылка."+ИмяОбъекта;
	ИначеЕсли ИмяОбъекта = "Управление отчетным периодом" Тогда	
	     Возврат "ДокументСсылка.УправлениеПериодомСценария";
	КонецЕсли;
	  
КонецФункции

&НаСервере
Функция ОбновитьПараметрыЭтапа(ТекущийЭтап)
	
	ДеревоП = РеквизитФормыВЗначение("ДеревоПараметровПроцесса");
	ЗначениеВРеквизитФормы(ДеревоП,"ДеревоПараметровПроцесса");	
	
КонецФункции

&НаКлиенте
Процедура ПараметрыПроцессаНаименованиеПарамтераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элемент.ОграничениеТипа = Элементы.ПараметрыПроцесса.ТекущиеДанные.ТипПараметра;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроцессДоТекущегоЭтапа(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПроцессаПриАктивизацииСтроки(Элемент)
	
	Если НЕ Элементы.ПараметрыПроцесса.ТекущиеДанные = Неопределено Тогда
		Элементы.ПараметрыПроцессаЗначениеПараметра.ОграничениеТипа = Элементы.ПараметрыПроцесса.ТекущиеДанные.ТипПараметра;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьВложенныйПроцесс(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТабДокПроцессаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если ЭтоЭтапВложенногоПроцесса(ВернутьВыбранныйЭтап()) Тогда
		
	     СтандартнаяОбработка = Ложь;
		 СтруктураПараметров = ПолучитьПараметрыВложенногоПроцесса(ВернутьВыбранныйЭтап());
		 ОткрытьФорму("Обработка.КонсольУправленияПроцессом.форма.Форма",СтруктураПараметров,ЭтаФорма,Истина,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		 
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования(Команда)
	Если ЗначениеЗаполнено(СогласуемыйОбъект) Тогда
		ДействияСогласованиеУХКлиент.ИсторияСогласования(ЭтаФорма, СогласуемыйОбъект);
	Иначе
		// Не определён согласуемый объект.
	КонецЕсли;
КонецПроцедуры
