
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВерсиюИРежимСовместимостиПлатформы();
	
	РежимРаботыНаКлиенте=Истина;
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	ОбъектНаСервере.Инициализация();
	ЗначениеВРеквизитФормы(ОбъектНаСервере.ДеревоМетаданных, "Объект.ДеревоМетаданных");
	
	Файл = Новый Файл(ИмяФайлаВыгрузки);
	Объект.ИспользоватьФорматFastInfoSet = (Файл.Расширение = ".fi");
	
	РежимВыгрузки = (Элементы.ГруппаРежим.ТекущаяСтраница = Элементы.ГруппаРежим.ПодчиненныеЭлементы.ГруппаВыгрузкаМодели);	
		
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
			
	Файл = Новый Файл(ИмяФайлаВыгрузки);
	Объект.ИспользоватьФорматFastInfoSet = (Файл.Расширение = ".fi");
	
	РежимВыгрузки = (Элементы.ГруппаРежим.ТекущаяСтраница = Элементы.ГруппаРежим.ПодчиненныеЭлементы.ГруппаВыгрузкаМодели);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытаФормаНастройкиКонсолиЗапросов" Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметр);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИмяФайлаВыгрузкиПриИзменении(Элемент)
	
	Файл = Новый Файл(ИмяФайлаВыгрузки);
	Объект.ИспользоватьФорматFastInfoSet = (Файл.Расширение = ".fi");
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьВПриложении(Элемент, "ИмяФайлаВыгрузки", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьНачалоВыбораФайла(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьФорматFastInfoSetПриИзменении(Элемент)
	
	Если Объект.ИспользоватьФорматFastInfoSet Тогда
		ИмяФайлаВыгрузки = СтрЗаменить(ИмяФайлаВыгрузки, ".xml", ".fi");
	Иначе
		ИмяФайлаВыгрузки = СтрЗаменить(ИмяФайлаВыгрузки, ".fi", ".xml");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаРежимПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	РежимВыгрузки = (Элементы.ГруппаРежим.ТекущаяСтраница = Элементы.ГруппаРежим.ПодчиненныеЭлементы.ГруппаВыгрузкаМодели);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОбъектыДляВыгрузкиПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Объект) Тогда
		
		Элемент.ТекущиеДанные.ИмяОбъектаДляЗапроса = ИмяОбъектаПоТипуДляЗапроса(Элемент.ТекущиеДанные.Объект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьВПриложении(Элемент, "ИмяФайлаЗагрузки", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьНачалоВыбораФайла(СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоМетаданных

&НаКлиенте
Процедура ДеревоМетаданныхВыгружатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоМетаданных.ТекущиеДанные;
	
	Если ТекущиеДанные.Выгружать = 2 Тогда
		ТекущиеДанные.Выгружать = 0;
	КонецЕсли;
	
	УстановитьПометкиПодчиненных(ТекущиеДанные, "Выгружать");
	УстановитьПометкиРодителей(ТекущиеДанные, "Выгружать");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМетаданныхВыгружатьПриНеобходимостиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоМетаданных.ТекущиеДанные;
	
	Если ТекущиеДанные.ВыгружатьПриНеобходимости = 2 Тогда
		ТекущиеДанные.ВыгружатьПриНеобходимости = 0;
	КонецЕсли;
	
	УстановитьПометкиПодчиненных(ТекущиеДанные, "ВыгружатьПриНеобходимости");
	УстановитьПометкиРодителей(ТекущиеДанные, "ВыгружатьПриНеобходимости");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДополнительныеОбъектыДляВыгрузки

&НаКлиенте
Процедура ДополнительныеОбъектыДляВыгрузкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Элемент.ТекущийЭлемент.ОграничениеТипа = ТипОбъектовДляВыгрузки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОчиститьДополнительныеОбъектыВыгрузки(Команда)
	
	Объект.ДополнительныеОбъектыДляВыгрузки.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанные(Команда)
		
	ОчиститьСообщения();
	
	Если Не РежимРаботыНаКлиенте Тогда
		
		Если ПустаяСтрока(ИмяФайлаВыгрузки) Тогда
			
			ТекстСообщения = Нстр("ru = 'Поле ""Имя файла"" не заполнено'");
			СообщитьПользователю(ТекстСообщения, "ИмяФайлаВыгрузки");
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Состояние(Нстр("ru = 'Выполняется выгрузка данных. Пожалуйста, подождите...'"));
	
	ОтобратьДанныеДляВыгрузки();
	
	АдресФайлаВоВременномХранилище = "";
	ВыгрузитьДанныеНаСервере(АдресФайлаВоВременномХранилище);
	
	Если Не ПустаяСтрока(АдресФайлаВоВременномХранилище) Тогда
		
		ПолучитьФайл(АдресФайлаВоВременномХранилище,ИмяФайлаВыгрузки,Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	ОчиститьСообщения();
	АдресФайлаВоВременномХранилище = "";
	
	Если РежимРаботыНаКлиенте Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьДанныеЗавершение", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещения, АдресФайлаВоВременномХранилище,ИмяФайлаЗагрузки,Ложь, УникальныйИдентификатор);
		
	Иначе
		
		Если ПустаяСтрока(ИмяФайлаЗагрузки) Тогда
			
			ТекстСообщения = Нстр("ru = 'Поле ""Имя файла"" не заполнено'");
			СообщитьПользователю(ТекстСообщения, "ИмяФайлаЗагрузки");
			Возврат;
			
		КонецЕсли;
		
		Файл = Новый Файл(ИмяФайлаЗагрузки);
		Если Не Файл.Существует() Тогда
			
			ТекстСообщения = Нстр("ru = 'Файл не существует'");
			СообщитьПользователю(ТекстСообщения, "ИмяФайлаЗагрузки");
			Возврат;
			
		КонецЕсли;
		
		ЗагрузитьДанныеЗавершение(Истина, АдресФайлаВоВременномХранилище, ИмяФайлаЗагрузки, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьВыгружаемыеПоСсылке(Команда)
	
	Состояние(Нстр("ru = 'Выполняется поиск объектов метаданных, которые могут быть выгружены по ссылкам...'"));
	СохранитьОтображениеДерева(Объект.ДеревоМетаданных.ПолучитьЭлементы());
	ПересчитатьВыгружаемыеПоСсылкеНаСервере();
	ВосстановитьОтображениеДерева(Объект.ДеревоМетаданных.ПолучитьЭлементы());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьВПриложении(Элемент, ПутьКДанным, СтандартнаяОбработка)

	Файл = Новый Файл(Элемент.ТекстРедактирования);
	
	Если Файл.Существует() Тогда
		
		ОбщегоНазначенияКлиент.ОткрытьФайлВПрограммеПросмотра(Элемент.ТекстРедактирования);
		
	Иначе
		
		СообщитьПользователю(Нстр("ru = 'Файл не найден'"), ПутьКДанным);
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Текст, ПутьКДанным = "")
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.ПутьКДанным = ПутьКДанным;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНачалоВыбораФайла(СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РежимДиалога = ?(РежимВыгрузки, РежимДиалогаВыбораФайла.Сохранение, РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалога);
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Не РежимВыгрузки;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = Нстр("ru = 'Задайте имя файла выгрузки'");
	ДиалогВыбораФайла.ПолноеИмяФайла = "Model";
	
	ДиалогВыбораФайла.Фильтр = Нстр("ru = 'Формат выгрузки'") + "(*.xml)|*.xml";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Если РежимВыгрузки Тогда
			ИмяФайлаВыгрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
		Иначе
			ИмяФайлаЗагрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиПодчиненных(ТекСтрока, ИмяФлажка)
	
	Подчиненные = ТекСтрока.ПолучитьЭлементы();
	
	Если Подчиненные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка из Подчиненные Цикл
		
		Строка[ИмяФлажка] = ТекСтрока[ИмяФлажка];
		
		УстановитьПометкиПодчиненных(Строка, ИмяФлажка);
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиРодителей(ТекСтрока, ИмяФлажка)
	
	Родитель = ТекСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекСостояние = Родитель[ИмяФлажка];
	
	НайденыВключенные  = Ложь;
	НайденыВыключенные = Ложь;
	
	Для Каждого Строка из Родитель.ПолучитьЭлементы() Цикл
		Если Строка[ИмяФлажка] = 0 Тогда
			НайденыВыключенные = Истина;
		ИначеЕсли Строка[ИмяФлажка] = 1
			ИЛИ Строка[ИмяФлажка] = 2 Тогда
			НайденыВключенные  = Истина;
		КонецЕсли; 
		Если НайденыВключенные И НайденыВыключенные Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если НайденыВключенные И НайденыВыключенные Тогда
		Включить = 2;
	ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
		Включить = 1;
	ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
		Включить = 0;
	ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
		Включить = 2;
	КонецЕсли;
	
	Если Включить = ТекСостояние Тогда
		Возврат;
	Иначе
		Родитель[ИмяФлажка] = Включить;
		УстановитьПометкиРодителей(Родитель, ИмяФлажка);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьДанныеНаСервере(АдресФайлаВоВременномХранилище)
		
	Расширение = ?(Объект.ИспользоватьФорматFastInfoSet, ".fi", ".xml");
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	ЗаполнитьДеревоМетаданныхНаСервере(ОбъектНаСервере);
	
	ОбъектНаСервере.ВыполнитьВыгрузку(ИмяВременногоФайла);
	
	Файл = Новый Файл(ИмяВременногоФайла);
	
	Если Файл.Существует() Тогда
		
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтаФорма.УникальныйИдентификатор);
		УдалитьФайлы(ИмяВременногоФайла);
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ПроставитьПометкиВыгружаемыхДанных(СтрокиИсходногоДерева, СтрокиЗаменяемогоДерева)
	
	КолонкаВыгружать = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("Выгружать");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаВыгружать, "Выгружать");
	
	КолонкаВыгружатьПриНеобходимости = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("ВыгружатьПриНеобходимости");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаВыгружатьПриНеобходимости, "ВыгружатьПриНеобходимости");
	
	КолонкаРазвернут = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("Развернут");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаРазвернут, "Развернут");
	
	КолонкаОтбор = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("Отбор");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаОтбор, "Отбор");
	
	Для Каждого СтрокаИсходногоДерева Из СтрокиИсходногоДерева Цикл
		
		ИндексСтроки = СтрокиИсходногоДерева.Индекс(СтрокаИсходногоДерева);
		СтрокаИзменяемогоДерева = СтрокиЗаменяемогоДерева.Получить(ИндексСтроки);
		
		ПроставитьПометкиВыгружаемыхДанных(СтрокаИсходногоДерева.Строки, СтрокаИзменяемогоДерева.Строки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Состояние(Нстр("ru = 'Выполняется загрузка данных. Пожалуйста, подождите...'"));
		
		Файл = Новый Файл(ВыбранноеИмяФайла);
		Если Не Файл.Существует() Тогда
			
			ТекстСообщения = Нстр("ru = 'Указанный файл не существует'");
			ПутьКДанным = "";
			СообщитьПользователю(ТекстСообщения, ПутьКДанным);
			Возврат;
			
		КонецЕсли;
		
		ЗагрузитьДанныеНаСервере(Адрес, Файл.Расширение);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеНаСервере(АдресФайлаВоВременномХранилище, Расширение)
	
	Если РежимРаботыНаКлиенте Тогда
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
	Иначе
		
		ИмяВременногоФайла = ИмяФайлаЗагрузки;
		
	КонецЕсли;
	
	РеквизитФормыВЗначение("Объект").ВыполнитьЗагрузку(ИмяВременногоФайла);
	
	Если РежимРаботыНаКлиенте Тогда
		
		Файл = Новый Файл(ИмяВременногоФайла);
		
		Если Файл.Существует() Тогда
			
			УдалитьФайлы(ИмяВременногоФайла);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьВыгружаемыеПоСсылкеНаСервере()
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	ЗаполнитьДеревоМетаданныхНаСервере(ОбъектНаСервере);
	ОбъектНаСервере.СоставВыгрузки(Истина);
	ЗначениеВРеквизитФормы(ОбъектНаСервере.ДеревоМетаданных, "Объект.ДеревоМетаданных");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоМетаданныхНаСервере(ОбъектНаСервере)
	
	ДеревоМетаданных = РеквизитФормыВЗначение("Объект.ДеревоМетаданных");
	
	ОбъектНаСервере.Инициализация();
	
	ПроставитьПометкиВыгружаемыхДанных(ОбъектНаСервере.ДеревоМетаданных.Строки, ДеревоМетаданных.Строки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтображениеДерева(СтрокиДерева)
	
	Для Каждого Строка Из СтрокиДерева Цикл
		
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		Строка.Развернут = Элементы.ДеревоМетаданных.Развернут(ИдентификаторСтроки);
		
		СохранитьОтображениеДерева(Строка.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьОтображениеДерева(СтрокиДерева)
	
	Для Каждого Строка Из СтрокиДерева Цикл
		
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		Если Строка.Развернут Тогда
			Элементы.ДеревоМетаданных.Развернуть(ИдентификаторСтроки);
		КонецЕсли;
		
		ВосстановитьОтображениеДерева(Строка.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяОбъектаПоТипуДляЗапроса(Ссылка)
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	ИмяМетаданных = МетаданныеОбъекта.Имя;
	
	ИмяДляЗапроса = "";
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "Справочник";
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "Документ";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланВидовХарактеристик";
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланСчетов";
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланВидовРасчета";
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланОбмена";
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "БизнесПроцесс";
	ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "Задача";
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяДляЗапроса) Тогда
		Возврат "";
	Иначе
		Возврат ИмяДляЗапроса + "." + ИмяМетаданных;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверитьВерсиюИРежимСовместимостиПлатформы()
	
	Информация = Новый СистемнаяИнформация;
	Если Не (Лев(Информация.ВерсияПриложения, 3) = "8.3"
		И (Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать
		Или (Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_1
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_2_13
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_2_16"]
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_3_1"]
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_3_2"]))) Тогда
		
		ВызватьИсключение Нстр("ru = 'Обработка предназначена для запуска на версии платформы
			|1С:Предприятие 8.3 с отключенным режимом совместимости или выше'");
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДеревоМетаданныхПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоМетаданных.ТекущиеДанные;
		
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Элементы.ДеревоМетаданныхОтбор.ТолькоПросмотр         = Не ТекущаяСтрока.ДоступенОтбор;
	Элементы.ДеревоМетаданныхСкопироватьОтбор.Доступность = ТекущаяСтрока.ДоступенОтбор;
	Элементы.ДеревоМетаданныхУдалитьОтбор.Доступность     = ТекущаяСтрока.ДоступенОтбор;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМетаданныхОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ДеревоМетаданных.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КомпоновщикНастроек = ИнициализироватьКомпоновщикНастроек(Элементы.ДеревоМетаданных.ТекущаяСтрока);
	ТекущаяСтрока.Отбор = КомпоновщикНастроек.Настройки.Отбор;
	
КонецПроцедуры

&НаСервере
Функция ИнициализироватьКомпоновщикНастроек(Знач ИндексСтроки = Неопределено, Знач СтрокаДереваМетаданных = Неопределено)
	
	Если СтрокаДереваМетаданных = Неопределено Тогда
		СтрокаДереваМетаданных = Объект.ДеревоМетаданных.НайтиПоИдентификатору(ИндексСтроки);
	КонецЕсли;
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	ТекстЗапроса = ОбъектОбработка.ПолучитьТекстЗапросаПоСтроке(СтрокаДереваМетаданных, Ложь);
	СхемаКомпоновкиДанных = СхемаКомпоновкиДанных(ТекстЗапроса);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор)));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ЕстьДополнительныеОтборы  = СтрокаДереваМетаданных.Отбор.Элементы.Количество() <> 0; 
	
	Если ЕстьДополнительныеОтборы Тогда
		СкопироватьЭлементы(КомпоновщикНастроек.Настройки.Отбор, СтрокаДереваМетаданных.Отбор);
	КонецЕсли;
	
	Возврат КомпоновщикНастроек;
		
КонецФункции

&НаСервере
Процедура СкопироватьЭлементы(ПриемникЗначения, ИсточникЗначения, ОчищатьПриемник = Истина) Экспорт
	
	Если ТипЗнч(ИсточникЗначения) = Тип("УсловноеОформлениеКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ВариантыПользовательскогоПоляВыборКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ОформляемыеПоляКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ЗначенияПараметровДанныхКомпоновкиДанных") Тогда
		СоздаватьПоТипу = Ложь;
	Иначе
		СоздаватьПоТипу = Истина;
	КонецЕсли;
	ПриемникЭлементов = ПриемникЗначения.Элементы;
	ИсточникЭлементов = ИсточникЗначения.Элементы;
	Если ОчищатьПриемник Тогда
		ПриемникЭлементов.Очистить();
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
		
		Если ТипЗнч(ЭлементИсточник) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
			// Элементы порядка добавляем в начало
			Индекс = ИсточникЭлементов.Индекс(ЭлементИсточник);
			ЭлементПриемник = ПриемникЭлементов.Вставить(Индекс, ТипЗнч(ЭлементИсточник));
		Иначе
			Если СоздаватьПоТипу Тогда
				ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник));
			Иначе
				ЭлементПриемник = ПриемникЭлементов.Добавить();
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		// В некоторых коллекциях необходимо заполнить другие коллекции
		Если ТипЗнч(ИсточникЭлементов) = Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Поля, ЭлементИсточник.Поля);
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
			ЗаполнитьЭлементы(ЭлементПриемник.Оформление, ЭлементИсточник.Оформление); 
		ИначеЕсли ТипЗнч(ИсточникЭлементов)	= Тип("КоллекцияВариантовПользовательскогоПоляВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
		КонецЕсли;
		
		// В некоторых элементах коллекции необходимо заполнить другие коллекции
		Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Варианты, ЭлементИсточник.Варианты);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
			ЭлементПриемник.УстановитьВыражениеДетальныхЗаписей (ЭлементИсточник.ПолучитьВыражениеДетальныхЗаписей());
			ЭлементПриемник.УстановитьВыражениеИтоговыхЗаписей(ЭлементИсточник.ПолучитьВыражениеИтоговыхЗаписей());
			ЭлементПриемник.УстановитьПредставлениеВыраженияДетальныхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияДетальныхЗаписей ());
			ЭлементПриемник.УстановитьПредставлениеВыраженияИтоговыхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияИтоговыхЗаписей ());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНедоступныеЭлементыОтбора(ДоступныеПоляОтбора, ИсточникЗначения) Экспорт
	
	ИсточникЭлементов = ИсточникЗначения.Элементы;
	
	МассивЭлементовДляУдаления = Новый Массив;
	
	Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
				
		Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			УдалитьНедоступныеЭлементыОтбора(ДоступныеПоляОтбора, ЭлементИсточник);
		Иначе
			Если ДоступныеПоляОтбора.НайтиПоле(ЭлементИсточник.ЛевоеЗначение) = Неопределено Тогда
				МассивЭлементовДляУдаления.Добавить(ЭлементИсточник);
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаляемоеПоле Из МассивЭлементовДляУдаления Цикл
		 ИсточникЭлементов.Удалить(УдаляемоеПоле);
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементы(ПриемникЗначения, ИсточникЗначения, ПервыйУровень = Неопределено) Экспорт
	
	Если ТипЗнч(ПриемникЗначения) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		КоллекцияЗначений = ИсточникЗначения;
	Иначе
		КоллекцияЗначений = ИсточникЗначения.Элементы;
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из КоллекцияЗначений Цикл
		Если ПервыйУровень = Неопределено Тогда
			ЭлементПриемник = ПриемникЗначения.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		Иначе
			ЭлементПриемник = ПервыйУровень.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		КонецЕсли;
		Если ЭлементПриемник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		Если ТипЗнч(ЭлементИсточник) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
			Если ЭлементИсточник.ЗначенияВложенныхПараметров.Количество() <> 0 Тогда
				ЗаполнитьЭлементы(ЭлементПриемник.ЗначенияВложенныхПараметров, ЭлементИсточник.ЗначенияВложенныхПараметров, ПриемникЗначения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СхемаКомпоновкиДанных(ТекстЗапроса)
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.Имя = "НаборДанных1";
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции

&НаКлиенте
Процедура СкопироватьОтбор(Команда)
	
	ТекущаяСтрока = Элементы.ДеревоМетаданных.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, Нстр("ru = 'Не выбрана строка отбора данных для копирования'"));
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("СкопироватьОтборЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(Обработчик, Нстр("ru = 'Очистить текущие значения отбора в строках?'"), РежимДиалогаВопрос.ДаНет); 
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьОтборЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОчищатьПриемник = РезультатВопроса = КодВозвратаДиалога.Да;
	СкопироватьОтборСервер(Элементы.ДеревоМетаданных.ТекущаяСтрока, ОчищатьПриемник);
		
КонецПроцедуры

&НаСервере
Процедура СкопироватьОтборСервер(ИндексСтроки, ОчищатьПриемник)
	
	СтрокаДереваМетаданных = Объект.ДеревоМетаданных.НайтиПоИдентификатору(ИндексСтроки);	
		
	СкопироватьОтборДляДерева(Объект.ДеревоМетаданных.ПолучитьЭлементы(), СтрокаДереваМетаданных, ОчищатьПриемник);
		
КонецПроцедуры

&НаСервере
Процедура СкопироватьОтборДляДерева(СтрокиДерева, СтрокаДереваМетаданных, ОчищатьПриемник)
	
	Для Каждого СтрокаДереваВыгрузки Из СтрокиДерева Цикл
		
		Если СтрокаДереваВыгрузки.ДоступенОтбор 
			И СтрокаДереваВыгрузки.Выгружать = 1 
			И Не СтрокаДереваМетаданных = СтрокаДереваВыгрузки Тогда
			
			СтарыйОтбор = СтрокаДереваВыгрузки.Отбор;
						
			КомпоновщикНастроек = ИнициализироватьКомпоновщикНастроек(,СтрокаДереваВыгрузки);
						
			СкопироватьЭлементы(КомпоновщикНастроек.Настройки.Отбор, 
				СтрокаДереваМетаданных.Отбор, 
				ОчищатьПриемник);
				
			УдалитьНедоступныеЭлементыОтбора(
			    КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора,
				КомпоновщикНастроек.Настройки.Отбор
				);	
				
			СтрокаДереваВыгрузки.Отбор = КомпоновщикНастроек.Настройки.Отбор;
			
		КонецЕсли;	
		
		Если СтрокаДереваВыгрузки.ПолучитьЭлементы().Количество() > 0 Тогда
			 СкопироватьОтборДляДерева(СтрокаДереваВыгрузки.ПолучитьЭлементы(), СтрокаДереваМетаданных, ОчищатьПриемник);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОтбор(Команда)
	
	ОчиститьОтборы(Объект.ДеревоМетаданных.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборы(СтрокиДерева)
	
	Для Каждого СтрокаДереваВыгрузки Из СтрокиДерева Цикл
		
		Если СтрокаДереваВыгрузки.ДоступенОтбор 
			И СтрокаДереваВыгрузки.Выгружать = 1 Тогда
						
			СтрокаДереваВыгрузки.Отбор.Элементы.Очистить();
			
		КонецЕсли;	
		
		Если СтрокаДереваВыгрузки.ПолучитьЭлементы().Количество() > 0 Тогда
			 ОчиститьОтборы(СтрокаДереваВыгрузки.ПолучитьЭлементы());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыгружаемыеДанные(Команда)
	
	ТекущаяСтрока = Элементы.ДеревоМетаданных.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТабДокумент = ПоказатьВыгружаемыеДанныеСервер(Элементы.ДеревоМетаданных.ТекущаяСтрока);
	ТабДокумент.Показать();
	
КонецПроцедуры

&НаСервере
Функция ПоказатьВыгружаемыеДанныеСервер(ИндексСтроки)
	
	СтрокаДереваМетаданных = Объект.ДеревоМетаданных.НайтиПоИдентификатору(ИндексСтроки);
		
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
		
	ТекстЗапроса = ОбъектОбработка.ПолучитьТекстЗапросаПоСтроке(СтрокаДереваМетаданных, Ложь);
	СхемаКомпоновкиДанных = СхемаКомпоновкиДанных(ТекстЗапроса);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор)));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ЕстьДополнительныеОтборы  = СтрокаДереваМетаданных.Отбор.Элементы.Количество() <> 0; 
	
	Если ЕстьДополнительныеОтборы Тогда
		СкопироватьЭлементы(КомпоновщикНастроек.Настройки.Отбор, СтрокаДереваМетаданных.Отбор);
	КонецЕсли;
	
	УстановитьНастройкуСтруктурыВыводаРезультата(КомпоновщикНастроек.Настройки);
		
	УстановитьЗначениеПараметраСКД(КомпоновщикНастроек, "ДатаНачала",        ОбъектОбработка.ДатаНачала);
	УстановитьЗначениеПараметраСКД(КомпоновщикНастроек, "ДатаОкончания",     ОбъектОбработка.ДатаОкончания);
	
	// Компоновка макета компоновки данных.
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных, 
		КомпоновщикНастроек.Настройки, 
		ДанныеРасшифровки, 
		,
		Тип("ГенераторМакетаКомпоновкиДанных")
		);
		
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	
	ТабДокумент = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	Возврат ТабДокумент;
	
КонецФункции

&НаСервере
Функция УстановитьЗначениеПараметраСКД(КомпоновщикНастроек, ИмяПараметра, ЗначениеПараметра, ИспользоватьНеЗаполненный = Истина)
	
	ПараметрУстановлен = Ложь;
	
	ПараметрКомпоновкиДанных = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	ЗначениеПараметраКомпоновкиДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКомпоновкиДанных);
	Если ЗначениеПараметраКомпоновкиДанных <> Неопределено Тогда
		
		ЗначениеПараметраКомпоновкиДанных.Значение = ЗначениеПараметра;
		ЗначениеПараметраКомпоновкиДанных.Использование = ?(ИспользоватьНеЗаполненный, Истина, ЗначениеЗаполнено(ЗначениеПараметраКомпоновкиДанных.Значение));
		
		ПараметрУстановлен = Истина;
		
	КонецЕсли;
	
	Возврат ПараметрУстановлен;
	
КонецФункции
	
&НаСервере
Процедура УстановитьНастройкуСтруктурыВыводаРезультата(Настройки)
	
	ГруппировкаКомпоновкиДанных = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		
	ПолеГруппировки = ГруппировкаКомпоновкиДанных.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование = Истина;
			
	Если Настройки.Выбор.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Ссылка")) <> Неопределено Тогда
		ПолеВыбора = ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
		ПолеВыбора.Использование = Истина;
	Иначе
		Для Каждого ДоступноеПолеВыбора Из Настройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
			Если ДоступноеПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("СистемныеПоля")
				Или ДоступноеПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("ПараметрыДанных") Тогда
				Продолжить;
			КонецЕсли;
			ПолеВыбора = ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ПолеВыбора.Поле = ДоступноеПолеВыбора.Поле;
			ПолеВыбора.Использование = Истина;
		КонецЦикла;	
	КонецЕсли;
			
КонецПроцедуры
	

#КонецОбласти

&НаСервере
Процедура ПодготовитьВыгрузкуМоделей()
		
	ОтобратьДанныеДляВыгрузки();

КонецПроцедуры

Процедура ОтобратьДанныеДляВыгрузки()
	
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
    ДеревоМетаданных = РеквизитФормыВЗначение("Объект.ДеревоМетаданных");
	ПостроительОтчета = Новый ПостроительОтчета;
	Группа = Объект.ГруппаОтчетов;
	
	Для Каждого Строка ИЗ ДеревоМетаданных.Строки Цикл 
		
		ОчиститьОтборыСервер(Строка);
		
	КонецЦикла;
	
	Если Объект.ВидыОтчетовДляВыгрузки.Количество()=0 Тогда
		
		ЗначениеВРеквизитФормы(ДеревоМетаданных,"Объект.ДеревоМетаданных");
		Возврат;
		
	КонецЕсли;
	
	//Виды отчетов
	
	СписокВидовОтчетов=Новый СписокЗначений;
	СписокВидовОтчетов.ЗагрузитьЗначения(Объект.ВидыОтчетовДляВыгрузки.Выгрузить().ВыгрузитьКолонку("ВидОтчета"));
	
	Для Каждого ВидОтчета ИЗ СписокВидовОтчетов Цикл
		
		ПолучитьРекурсивныйСписокВидовОтчетов(ВидОтчета.Значение,СписокВидовОтчетов);
		
	КонецЦикла;
	
	СписокСИерархией=СписокВидовОтчетов.Скопировать();
	
	ПолучитьПолнуюИерархию(СписокСИерархией,СписокВидовОтчетов);
	
	СтрВидОтчета=ДеревоМетаданных.Строки.Найти(Метаданные.Справочники.ВидыОтчетов.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не СтрВидОтчета=Неопределено Тогда
		
		СтрВидОтчета.Выгружать=1;
		
		НЭлементОтбора = СтрВидОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("Ссылка");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокСИерархией;
			
		ВыделитьПодчиненные(ДеревоМетаданных,СтрВидОтчета);
		
	КонецЕсли;	
		
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст="ВЫБРАТЬ
	|	ПравилаОбработки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПравилаОбработки
	|ИЗ
	|	Справочник.ПравилаОбработки КАК ПравилаОбработки
	|ГДЕ
	|	ПравилаОбработки.Владелец В(&СписокСИерархией)
	|	И НЕ ПравилаОбработки.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.Ссылка КАК ИсточникДанных
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПравилаОбработки КАК ПравилаОбработки
	|		ПО ИсточникиДанныхДляРасчетов.НазначениеРасчетов = ПравилаОбработки.Ссылка
	|ГДЕ
	|	НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаОбработки.Ссылка КАК ПравилоОбработки
	|ИЗ
	|	ПравилаОбработки КАК ПравилаОбработки";
	
	Запрос.УстановитьПараметр("СписокСИерархией",СписокСИерархией);
	
	РезЗапроса=Запрос.ВыполнитьПакет();
	
	/////////////////////////////////////////////////////////////////////////////////////////
	// Источники данных для расчетов
	
	СписокИсточников=Новый СписокЗначений;
	СписокИсточников.ЗагрузитьЗначения(РезЗапроса[1].Выгрузить().ВыгрузитьКолонку("ИсточникДанных"));
	
	СтрИсточники=ДеревоМетаданных.Строки.Найти(Метаданные.Справочники.ИсточникиДанныхДляРасчетов.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не СтрИсточники=Неопределено Тогда
		
		СтрИсточники.Выгружать=1;
		НЭлементОтбора = СтрИсточники.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("Ссылка");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокИсточников;
			
	КонецЕсли;
		
	/////////////////////////////////////////////////////////////////////////////////////////
	// Процедуры расчетов
	
	СписокПравил=Новый СписокЗначений;
	СписокПравил.ЗагрузитьЗначения(РезЗапроса[2].Выгрузить().ВыгрузитьКолонку("ПравилоОбработки"));
		
	СтрПроцедурыРасчетов=ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.ПроцедурыРасчетов.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не СтрПроцедурыРасчетов=Неопределено Тогда
		
		СтрПроцедурыРасчетов.Выгружать=1;
		НЭлементОтбора = СтрПроцедурыРасчетов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("НазначениеРасчетов");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокПравил;
		
	КонецЕсли;

	//////////////////////////////////////////////////////////////////
	// РеквизитыИсточниковДанныхДляФормул
	
	СтрРеквизитыИсточников=ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.РеквизитыИсточниковДанныхДляФормул.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не СтрРеквизитыИсточников=Неопределено Тогда
		
		СтрРеквизитыИсточников.Выгружать=1;
		НЭлементОтбора = СтрРеквизитыИсточников.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("НазначениеРасчетов");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокПравил;
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////
	// ТаблицаЗависимостейПоказателей
	
	СтрЗависимости=ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.ТаблицаЗависимостейПоказателей.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не СтрЗависимости=Неопределено Тогда
		
		СтрЗависимости.Выгружать=1;
		НЭлементОтбора = СтрЗависимости.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("НазначениеРасчетов");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокПравил;
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////
	// НастройкаОбработкиОтчетов
	
	СтрНастройки=ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.НастройкаОбработкиОтчетов.Имя,"ПолноеИмяМетаданных",Истина);
	
	СтрНастройки.Выгружать=1;
	НЭлементОтбора = СтрНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора = Новый ПолеКомпоновкиДанных("ШаблонДокументаБД");
	НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
	НЭлементОтбора.Использование  = Истина;
	НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	НЭлементОтбора.ПравоеЗначение = СписокВидовОтчетов;
	
	НЭлементОтбора = СтрНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора = Новый ПолеКомпоновкиДанных("Организация");
	НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
	НЭлементОтбора.Использование  = Истина;
	НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	НЭлементОтбора.ПравоеЗначение = Справочники.Организации.ПустаяСсылка();
	
	НЭлементОтбора = СтрНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора = Новый ПолеКомпоновкиДанных("Сценарий");
	НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
	НЭлементОтбора.Использование  = Истина;
	НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	НЭлементОтбора.ПравоеЗначение = Справочники.Сценарии.ПустаяСсылка();
	
	НЭлементОтбора = СтрНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора = Новый ПолеКомпоновкиДанных("ПериодОтчета");
	НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
	НЭлементОтбора.Использование  = Истина;
	НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	НЭлементОтбора.ПравоеЗначение = Справочники.Периоды.ПустаяСсылка();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Настройки бланков сводных таблиц
	Запрос.Текст="ВЫБРАТЬ
	             |	БланкиОтчетов.Ссылка
	             |ИЗ
	             |	Справочник.БланкиОтчетов КАК БланкиОтчетов
	             |ГДЕ
	             |	БланкиОтчетов.РежимБланка = 1
	             |	И БланкиОтчетов.Владелец В(&СписокСИерархией)
	             |	И БланкиОтчетов.ПометкаУдаления = ЛОЖЬ";
				 
	Запрос.УстановитьПараметр("СписокСИерархией",СписокСИерархией);
	
	РезЗапроса=Запрос.ВыполнитьПакет();

	СписокБланковСт=Новый СписокЗначений;
	СписокБланковСт.ЗагрузитьЗначения(РезЗапроса[0].Выгрузить().ВыгрузитьКолонку("Ссылка"));

	
	нСтр=ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.НастройкиСтруктурыБланка.Имя,"ПолноеИмяМетаданных",Истина);
	
	СтрокиОтбора=ДеревоМетаданных.Строки.НайтиСтроки(Новый Структура("ПолноеИмяМетаданных", Метаданные.РегистрыСведений.НастройкиСтруктурыБланка.Имя),Истина);
	Для Каждого нСтр Из СтрокиОтбора Цикл	
		   Если нСтр.Родитель.ПолноеИмяМетаданных = "РегистрыСведений" Тогда
			
			нСтр.Выгружать=1;
			НЭлементОтбора = нСтр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ПолеОтбора = Новый ПолеКомпоновкиДанных("Бланк");
			НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			НЭлементОтбора.Использование  = Истина;
			НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
			НЭлементОтбора.ПравоеЗначение = СписокБланковСт;
			
		КонецЕсли;	
	КонецЦикла;
	
	нСтр=ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.НастройкиПараметровАналитик.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не нСтр=Неопределено Тогда
		
		нСтр.Выгружать=1;
		НЭлементОтбора = нСтр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("Бланк");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокБланковСт;
		
	КонецЕсли;

	нСтр=ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.НастройкиСоставаАналитикиБланков.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не нСтр=Неопределено Тогда
		
		нСтр.Выгружать=1;
		НЭлементОтбора = нСтр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("БланкОтчета");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокБланковСт;
		
	КонецЕсли;
	
	нСтр=ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.НастройкиМасштабаВремени.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не нСтр=Неопределено Тогда
		
		нСтр.Выгружать=1;
		НЭлементОтбора = нСтр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("Бланк");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокБланковСт;
		
	КонецЕсли;

	нСтр=ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.СохраненныеМакетыБланков.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не нСтр=Неопределено Тогда
		
		нСтр.Выгружать=1;
		НЭлементОтбора = нСтр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("Бланк");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокБланковСт;
		
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Настройки многопериодных бланков
	Запрос.Текст="ВЫБРАТЬ
	             |	БланкиОтчетов.Ссылка
	             |ИЗ
	             |	Справочник.БланкиОтчетов КАК БланкиОтчетов
	             |ГДЕ
	             |	БланкиОтчетов.РежимБланка = 2
	             |	И БланкиОтчетов.Владелец В(&СписокСИерархией)
	             |	И БланкиОтчетов.ПометкаУдаления = ЛОЖЬ";
				 
	Запрос.УстановитьПараметр("СписокСИерархией", СписокСИерархией);
	
	РезЗапроса=Запрос.ВыполнитьПакет();

	СписокБланковМП = Новый СписокЗначений;
	СписокБланковМП.ЗагрузитьЗначения(РезЗапроса[0].Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	нСтр = ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.КэшГруппОтборовПоказателей.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не нСтр = Неопределено Тогда
		
		нСтр.Выгружать = 1;
		НЭлементОтбора = нСтр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("Бланк");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокБланковМП;
		
	КонецЕсли;
	
	нСтр = ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.РасшифровкаГруппОтборов.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не нСтр = Неопределено Тогда
		
		нСтр.Выгружать = 1;
		НЭлементОтбора = нСтр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("Бланк");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокБланковМП;
		
	КонецЕсли;
	
	нСтр = ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.КэшИменОбластейПоказателей.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не нСтр = Неопределено Тогда
		
		нСтр.Выгружать = 1;
		НЭлементОтбора = нСтр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("Бланк");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокБланковМП;
		
	КонецЕсли;
	
	нСтр = ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.КэшРаскрываемыхОбластей.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не нСтр = Неопределено Тогда
		
		нСтр.Выгружать = 1;
		НЭлементОтбора = нСтр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("Бланк");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокБланковМП;
		
	КонецЕсли;
	
	нСтр = ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.НастройкиРаскрываемыхОбластей.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не нСтр = Неопределено Тогда
		
		нСтр.Выгружать = 1;
		НЭлементОтбора = нСтр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("Бланк");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокБланковМП;
		
	КонецЕсли;
	
	нСтр = ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.КэшИменФормул.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не нСтр = Неопределено Тогда
		
		нСтр.Выгружать = 1;
		НЭлементОтбора = нСтр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("Бланк");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокБланковМП;
		
	КонецЕсли;
	
	нСтр = ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.РасшифровкаФормулОбластейПоказателей.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не нСтр = Неопределено Тогда
		
		нСтр.Выгружать = 1;
		НЭлементОтбора = нСтр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("Бланк");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокБланковМП;
		
	КонецЕсли;
	
	нСтр = ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.НастройкиАналитическихБланков.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не нСтр = Неопределено Тогда
		
		нСтр.Выгружать = 1;
		НЭлементОтбора = нСтр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("Бланк");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокБланковМП;
		
	КонецЕсли;
	
	//Ракурсы
	Запрос.Текст="ВЫБРАТЬ
	             |	ВидыОтчетов.Ссылка
	             |ПОМЕСТИТЬ ОтчетыРакурсы
	             |ИЗ
	             |	Справочник.ВидыОтчетов КАК ВидыОтчетов
	             |ГДЕ
	             |	ВидыОтчетов.Ссылка В(&СписокСИерархией)
	             |	И ВидыОтчетов.ОбъектДляСогласованияЗначений = ЗНАЧЕНИЕ(Перечисление.ОбъектыСогласованияЗначенийПоказателейОтчетов.Ракурс)
	             |	И ВидыОтчетов.ПометкаУдаления = ЛОЖЬ
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ОбластиДанныхВидовОтчетов.Ссылка
	             |ИЗ
	             |	ОтчетыРакурсы КАК ОтчетыРакурсы
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбластиДанныхВидовОтчетов КАК ОбластиДанныхВидовОтчетов
	             |		ПО ОтчетыРакурсы.Ссылка = ОбластиДанныхВидовОтчетов.Владелец
	             |ГДЕ
	             |	ОбластиДанныхВидовОтчетов.ПометкаУдаления = Ложь";
				 
	Запрос.УстановитьПараметр("СписокСИерархией",СписокСИерархией);
	
	РезЗапроса=Запрос.ВыполнитьПакет();

	СписокНастроекРакурсов=Новый СписокЗначений;
	СписокНастроекРакурсов.ЗагрузитьЗначения(РезЗапроса[1].Выгрузить().ВыгрузитьКолонку("Ссылка"));

	нСтр=ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.НастройкиСоставаОбластейВидовОтчетов.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не нСтр=Неопределено Тогда
		
		нСтр.Выгружать=1;
		НЭлементОтбора = нСтр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("КлючОбласти");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокНастроекРакурсов;
		
	КонецЕсли;

	
	
	ЗначениеВРеквизитФормы(ДеревоМетаданных,"Объект.ДеревоМетаданных");
	
	
	
КонецПроцедуры

Процедура ОчиститьОтборыСервер(Строка)
	
	Строка.Отбор.Элементы.Очистить();
	
	Строка.Выгружать=0;
	
	Если Строка.Строки.Количество()>0 Тогда
		
		Для Каждого ТекСтрока ИЗ Строка.Строки Цикл
			
			ОчиститьОтборыСервер(ТекСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОчиститьОтборы()

Процедура ПолучитьПолнуюИерархию(СписокСИерархией,СписокИсходный);
	
	Для Каждого Элемент ИЗ СписокИсходный Цикл
		
		ДобавитьРодителейВСписок(СписокСИерархией,Элемент.Значение);
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьПолнуюИерархию()

Процедура ЗаполнитьМассивПодчиненных(ОбъектМД,СтрокаДерева,МассивПодчиненных,ДеревоСправочнки,ТекстОтборПоВладельцу)
	
	Метаданные_ = Метаданные.НайтиПоПолномуИмени("Справочник."+СтрокаДерева.ПолноеИмяМетаданных); 
	
	Если НЕ (Метаданные_=Неопределено) Тогда
		
		Для Каждого Владелец ИЗ Метаданные_.Владельцы Цикл
			
			Если Владелец.Имя=ОбъектМД Тогда
				
				МассивПодчиненных.Добавить(СтрокаДерева);
				СтрокаДерева.ОтборПоВладельцу=?(ПустаяСтрока(ТекстОтборПоВладельцу),"Владелец",ТекстОтборПоВладельцу+".Владелец");
				ПолучитьМассивПодчиненных(ДеревоСправочнки,СтрокаДерева,МассивПодчиненных,СтрокаДерева.ОтборПоВладельцу);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтрокаДерева.Строки.Количество()>0 Тогда
		
		Для Каждого Строка ИЗ СтрокаДерева.Строки Цикл
			
			ЗаполнитьМассивПодчиненных(ОбъектМД,Строка,МассивПодчиненных,ДеревоСправочнки,СтрокаДерева.ОтборПоВладельцу);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьМассивЗависимых

Процедура ПолучитьМассивПодчиненных(ДеревоСправочнки,ТекущаяСтрока,МассивПодчиненных,ТекстОтборПоВладельцу)
	
	Для Каждого Строка ИЗ ДеревоСправочнки.Строки Цикл
		
		ЗаполнитьМассивПодчиненных(ТекущаяСтрока.ПолноеИмяМетаданных,Строка,МассивПодчиненных,ДеревоСправочнки,ТекстОтборПоВладельцу);
		
	КонецЦикла;

КонецПроцедуры // ПолучитьМассивПодчиненных()

Процедура ВыделитьПодчиненные(ДеревоМетаданных,ТекущаяСтрока)
		
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	
	СтрокаСправочник=ДеревоМетаданных.Строки.Найти("Справочники","ПолноеИмяМетаданных",Истина);

	МассивПодчиненных=Новый Массив;
	
	ПолучитьМассивПодчиненных(СтрокаСправочник,ТекущаяСтрока,МассивПодчиненных,"");
	
	Если МассивПодчиненных.Количество()>0 Тогда
		
		//
		Для Каждого СтрПодчиненный ИЗ МассивПодчиненных Цикл
			//		
			СтрПодчиненный.Выгружать=1;
			НЭлементОтбора = СтрПодчиненный.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ПолеОтбора = Новый ПолеКомпоновкиДанных(СтрПодчиненный.ОтборПоВладельцу);
			Для каждого стро Из ТекущаяСтрока.Отбор.Элементы Цикл
				
				НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
				НЭлементОтбора.Использование  = Истина;
				НЭлементОтбора.ВидСравнения   = стро.ВидСравнения;
				НЭлементОтбора.ПравоеЗначение = стро.ПравоеЗначение;
				
			КонецЦикла;
			
			НЭлементОтбора = СтрПодчиненный.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ПолеОтбора = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
			НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			НЭлементОтбора.Использование  = Истина;
			НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			НЭлементОтбора.ПравоеЗначение = Ложь;
				
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРодителейВСписок(СписокСИерархией,Ссылка)
	
	Если (НЕ Ссылка=Неопределено) И ЗначениеЗаполнено(Ссылка.Родитель) Тогда
		
		Если СписокСИерархией.НайтиПоЗначению(Ссылка.Родитель)=Неопределено Тогда
			
			СписокСИерархией.Добавить(Ссылка.Родитель);
			
		КонецЕсли;
		
		ДобавитьРодителейВСписок(СписокСИерархией,Ссылка.Родитель);
		 
	КонецЕсли;
		
КонецПроцедуры // ДобавитьРодителейВСписок()

Процедура ПолучитьРекурсивныйСписокВидовОтчетов(ВидОтчета,СписокВидовОтчета)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеквизитыИсточниковДанныхДляФормул.ВидОтчетаОтбор КАК ВидОтчета,
	|	РеквизитыИсточниковДанныхДляФормул.ВидОтчета КАК ВидОтчетаИсходный
	|ИЗ
	|	РегистрСведений.РеквизитыИсточниковДанныхДляФормул КАК РеквизитыИсточниковДанныхДляФормул
	|ГДЕ
	|	РеквизитыИсточниковДанныхДляФормул.ВидОтчета = &ВидОтчета
	|	И НЕ РеквизитыИсточниковДанныхДляФормул.ВидОтчетаОтбор В (&СписокВидовОГтчета)
	|	И НЕ РеквизитыИсточниковДанныхДляФормул.ВидОтчетаОтбор = ЗНАЧЕНИЕ(Справочник.ВидыОтчетов.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	Запрос.УстановитьПараметр("СписокВидовОГтчета",СписокВидовОтчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Если СписокВидовОтчета.НайтиПоЗначению(Результат.ВидОтчета)=Неопределено тогда
			
			СписокВидовОтчета.Добавить(Результат.ВидОтчета);
			ПолучитьРекурсивныйСписокВидовОтчетов(Результат.ВидОтчета,СписокВидовОтчета);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьРекурсивныйСписокВидовОтчетов 

#Область ЗаполнениеОтчетовДляВыгрузки

&НаКлиенте
Процедура КоманднаяПанельОтчетовПоЭтапуПроцесса(Кнопка)
	
	ЭтапПроцесса = Неопределено;
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработатьВыборЭтапаПроцесса", ЭтотОбъект);
	ОткрытьФорму("Справочник.ЭтапыУниверсальныхПроцессов.ФормаВыбора",
					Новый Структура("НазначениеПроцесса",ПредопределенноеЗначение("Перечисление.НазначенияУниверсальныхПроцессов.ПроцессПодготовкиОтчетности")), ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьВыборЭтапаПроцесса(Результат, ДополнительныеПараметры) Экспорт
    
    ЭтапПроцесса = Результат;
	
	Если ЭтапПроцесса <> Неопределено Тогда
               
        ЗаполнитьТаблицуОтборов(ЭтапПроцесса);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельОтчетовПоШаблонуПроцесса(Кнопка)
		
	ШаблонПроцесса = Неопределено;

	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработатьВыборШаблонаПроцесса", ЭтотОбъект);
	ОткрытьФорму("Справочник.ШаблоныУниверсальныхПроцессов.ФормаВыбора",
					Новый Структура("Отбор",Новый Структура("НазначениеПроцесса",ПредопределенноеЗначение("Перечисление.НазначенияУниверсальныхПроцессов.ПроцессПодготовкиОтчетности"))),,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьВыборШаблонаПроцесса(Результат, ДополнительныеПараметры) Экспорт
    
    ШаблонПроцесса = Результат;
    
    Если ШаблонПроцесса <> Неопределено Тогда
               
        ЗаполнитьТаблицуОтборов(ШаблонПроцесса);	
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельОтчетовПоГруппеОтчетов(Кнопка)
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ЭтоГруппа", Истина));
	ГруппаОтчетов = Неопределено;

	Оповещение = Новый ОписаниеОповещения("Подключаемый_ВыборГруппыОтчетов", ЭтотОбъект);
	ОткрытьФорму("Справочник.ВидыОтчетов.ФормаВыбора", 
					ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборГруппыОтчетов(Результат, ДополнительныеПараметры) Экспорт
    
    ГруппаОтчетов = Результат;
    
    Если ГруппаОтчетов <> Неопределено Тогда
                
        ЗаполнитьТаблицуОтборов(ГруппаОтчетов);
        
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОтборов(Параметр)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Параметр);	
	Запрос.УстановитьПараметр("ОтборОтчетов", РеквизитФормыВЗначение("Объект.ВидыОтчетовДляВыгрузки").Выгрузить().ВыгрузитьКолонку("ВидОтчета"));
	
	Если ТипЗнч(Параметр) = Тип("СправочникСсылка.ЭтапыУниверсальныхПроцессов") Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭтапыПроцессовФормируемыеДокументы.ШаблонДокумента КАК Отчет
		|ИЗ
		|	Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыПроцессовФормируемыеДокументы
		|ГДЕ
		|	ЭтапыПроцессовФормируемыеДокументы.Ссылка = &Ссылка
		|	И НЕ ЭтапыПроцессовФормируемыеДокументы.ШаблонДокумента В (&ОтборОтчетов)";
		
	ИначеЕсли ТипЗнч(Параметр) = Тип("СправочникСсылка.ШаблоныУниверсальныхПроцессов") Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭтапыПроцессовФормируемыеДокументы.ШаблонДокумента КАК Отчет
		|ИЗ
		|	Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыПроцессовФормируемыеДокументы
		|ГДЕ
		|	ЭтапыПроцессовФормируемыеДокументы.Ссылка.Владелец = &Ссылка
		|	И НЕ ЭтапыПроцессовФормируемыеДокументы.ШаблонДокумента В (&ОтборОтчетов)";
		
	ИначеЕсли ТипЗнч(Параметр) = Тип("СправочникСсылка.ВидыОтчетов") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВидыОтчетов.Ссылка КАК Отчет
		|ИЗ
		|	Справочник.ВидыОтчетов КАК ВидыОтчетов
		|ГДЕ
		|	ВидыОтчетов.Ссылка В ИЕРАРХИИ(&Ссылка)
		|	И НЕ ВидыОтчетов.Ссылка В (&ОтборОтчетов)
		|	И ВидыОтчетов.ЭтоГруппа = ЛОЖЬ";
					   
	КонецЕсли;
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока=Объект.ВидыОтчетовДляВыгрузки.Добавить();
		НоваяСтрока.ВидОтчета=Результат.Отчет;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОолеОтчетов(Команда)
	
	Объект.ВидыОтчетовДляВыгрузки.Очистить();
	
КонецПроцедуры


#КонецОбласти



