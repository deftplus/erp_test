
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем ЦветПоложительный;
Перем ЦветОтрицательный;
Перем ТекущийИндексСтроки;

Процедура ПолучитьРезультирующийМакет(СтруктураПараметров) Экспорт
			
	ПолеТабличногоДокументаМакет = СтруктураПараметров.ПолеТабличногоДокументаМакет;
	ОбновитьДанные               = СтруктураПараметров.ОбновитьДанные;
	Точность					 = ?(СтруктураПараметров.Свойство("ТекущаяТочность"),СтруктураПараметров.ТекущаяТочность,Неопределено);
	Делитель					 = ?(СтруктураПараметров.Свойство("ТекущийДелитель"),СтруктураПараметров.ТекущийДелитель,Неопределено);
	ДополнительныеНастройки      = СтруктураПараметров.ДополнительныеНастройки;
	НомерОсновногоЯзыка			 = ?(СтруктураПараметров.Свойство("НомерОсновногоЯзыка"),СтруктураПараметров.НомерОсновногоЯзыка,0);
	СписокВерсий                 = ?(СтруктураПараметров.Свойство("СписокВерсий"),СтруктураПараметров.СписокВерсий,Неопределено);
	ПараметрыБазовойВерсии       = ?(СтруктураПараметров.Свойство("ПараметрыБазовойВерсии"),СтруктураПараметров.ПараметрыБазовойВерсии,Неопределено);
	СтруктураНастроекВарианта	 = ?(СтруктураПараметров.Свойство("СтруктураНастроекВарианта"),СтруктураПараметров.СтруктураНастроекВарианта,Неопределено);
    тДополнительныхОтборов       = ?(СтруктураПараметров.Свойство("тДополнительныхОтборов"),СтруктураПараметров.тДополнительныхОтборов,Неопределено);
	СтруктураОформления       	 = ?(СтруктураПараметров.Свойство("СтруктураОформления"),СтруктураПараметров.СтруктураОформления,Неопределено);

	ИспользоватьЛогИзмененныхПоказателей = СписокВерсий = Неопределено;
	
	Если Делитель = 1 Тогда
		 ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
	ИначеЕсли Делитель = 1000 Тогда
		 ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
	ИначеЕсли Делитель = 1000000 Тогда	
		 ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000;
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(ПараметрыБазовойВерсии) Тогда
		РежимОтклонений = Истина;
	Иначе	
		РежимОтклонений = Ложь;
	КонецЕсли;	
	
	Периодичность = ПериодОтчета.Периодичность;
	
	ТзКэшПериодовАдрес = "";
	
	ПолеТабличногоДокументаМакет.Очистить();
			
	Если Не ЗначениеЗАполнено(Бланк) И ЗначениеЗАполнено(СтруктураНастроекВарианта) Тогда
		 ИнициализироватьАналитическийБланк(СтруктураНастроекВарианта);
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(тКэшОбластейРаскрытияАдрес) Тогда                              
		тКэшИменФормул = КэшИменФормул.НайтиСтроки(Новый Структура("ТипОбластиВывода","Синтетика"));	
		Для Каждого иОбл Из тКэшИменФормул Цикл			
			ТекОбласть = ПолеТабличногоДокументаМакет.Область(иОбл.ИмяОбласти);
			
			Если  НЕ ТекОбласть.Расшифровка = Неопределено И ТекОбласть.Расшифровка.Свойство("ТекстФормулы")  Тогда	
				СтрДляРасчета =  ТекОбласть.Расшифровка.ТекстФормулы;			
				Попытка
					ОбластьВыводаМакет = ПолеТабличногоДокументаМакет.Область(иОбл.ИмяОбласти);
					СодержитЗначение = Истина;
					АналитическийБланкУХСервер.ВставитьЗначениеВОбластьТабличногоДокумента(ОбластьВыводаМакет, Вычислить(СтрДляРасчета), НастройкаФормата, ТекущаяТочность);
				Исключение
					ОбластьВыводаМакет = ПолеТабличногоДокументаМакет.Область(иОбл.ИмяОбласти);
					ОбластьВыводаМакет.СодержитЗначение = Истина;
					ВставитьЗначениеВОбластьТабличногоДокумента(ОбластьВыводаМакет, "#Ошибка");
				КонецПопытки;			
			КонецЕсли;	
		КонецЦикла;		
		ИнициализироватьАналитическийБланк(СтруктураНастроекВарианта);
	КонецЕсли;	
	
	ОбновитьФорматМакетов = Ложь;

	Если (ТипЗнч(Точность) = Тип("Число") И НЕ ТекущаяТочность = Точность) ИЛИ (ЗначениеЗаполнено(Делитель) И НЕ ТекущийДелитель = Делитель) Тогда
		ТекущаяТочность = Точность;
		ТекущийДелитель = Делитель;			
		ОбновитьФорматМакетов = Истина;
	КонецЕсли;	
	
	Если  ТекущийДелитель = 1 Тогда
		КоличествоГрупп = "";
	ИначеЕсли ТекущийДелитель = 1000 Тогда
		КоличествоГрупп = "3";
	ИначеЕсли ТекущийДелитель = 1000000 Тогда
		КоличествоГрупп = "6";                 
	КонецЕсли;	
	
	НастройкаФормата  				 = Ложь;
	НастройкаФорматаНеМасштабируется = Истина;
	
	Если ЗначениеЗаполнено(НемасшатбируемыеАдрес) Тогда
		мНемасштабируемые = ПолучитьИзВременногоХранилища(НемасшатбируемыеАдрес);		
	КонецЕсли;
			
	ТзКэшОбластейРаскрытия = КэшРаскрываемыхОбластей.Выгрузить().СкопироватьКолонки();	
	ПолеТабличногоДокументаМакет.Вывести(ЭталонныйМакет);
			
	ВывестиПараметрыБланка(ПолеТабличногоДокументаМакет);
	
	Если НЕ ЗначениеЗаполнено(АдресТЗСтруктурыВывода) ИЛИ КэшГруппОтборовПоказателей.Количество() = 0 Тогда 								//это пустой макет без показателей; выведем макет как есть...
		Обработки.АналитическийБланк.УдалитьСлужебныеОбласти(ПолеТабличногоДокументаМакет); //удалим служебные области...
		Если  Бланк.Мультиязычный Тогда
			ДополнительныеЯзыкиУХ.ПеревестиТекстыОбластей(ПолеТабличногоДокументаМакет,0,НомерОсновногоЯзыка,Бланк.Владелец);//переведем заголовки, если надо...
		КонецЕсли;
		Возврат;  																			//и остановимся.
	КонецЕсли;	
	
	тОписаниеВыводаМакета = ПолучитьИзВременногоХранилища(АдресТЗСтруктурыВывода);
	
	тОписаниеЗапросаПолученияДанных = ПодготовитьЗапросПолученияДанных(тДополнительныхОтборов);
	
	тДанные 						= тОписаниеЗапросаПолученияДанных.НайтиСтроки(Новый Структура("ТипОбласти", "Данные")); 
	тКомментарии   				 	= тОписаниеЗапросаПолученияДанных.НайтиСтроки(Новый Структура("ТипОбласти", "КомментарииДанных"));
		
	тСинтетика      = тОписаниеВыводаМакета.НайтиСтроки(Новый Структура("ТипОбласти", "Синтетика"));
    тСтроки      	= тОписаниеВыводаМакета.Скопировать(Новый Структура("ТипОбласти", "Строки"));
	тКолонки      	= тОписаниеВыводаМакета.Скопировать(Новый Структура("ТипОбласти", "Колонки"));
    тТаблицы      	= тОписаниеВыводаМакета.Скопировать(Новый Структура("ТипОбласти", "Таблицы"));
	
	Если ЗначениеЗаполнено(ТекущееПравило) Тогда
		ЗаполнитьЗаблокированныеПоказатели();
	КонецЕсли;
	
	тВыводимыхОбластей   = ПолучитьИзВременногоХранилища(тКэшОбластейРаскрытияАдрес);
			
	ЭтоПерваяОбласть 	= Истина;
	тдНоваяСтрока    	= Новый ТабличныйДокумент;
	ЕстьСинтетика 		= тВыводимыхОбластей.НайтиСтроки(Новый Структура("ТипОбласти","Синтетика")).Количество()>0;
	
	Если СтруктураПараметров.Свойство("МакетКолонок") Тогда
		МакетКолонок	= СтруктураПараметров.МакетКолонок;
		МакетКолонок.Очистить();
	Иначе	
		МакетКолонок	= Новый	 ТабличныйДокумент;
	КонецЕсли;	
	
	Если СтруктураПараметров.Свойство("МакетСтрок") Тогда
		МакетСтрок	= СтруктураПараметров.МакетСтрок;
		МакетСтрок.Очистить();
	Иначе	
		МакетСтрок	= Новый	 ТабличныйДокумент;
	КонецЕсли;	
	
	Если СтруктураПараметров.Свойство("МакетТаблиц") Тогда
		МакетТаблиц	= СтруктураПараметров.МакетТаблиц;
		МакетТаблиц.Очистить();
	Иначе	
		МакетТаблиц	= Новый	 ТабличныйДокумент;
	КонецЕсли;	
		
	мПоказателиРаскрытия = Новый ТаблицаЗначений;
		
	МенеджерВТ  = Новый  МенеджерВременныхТаблиц;
		
	тРезутьтатПакетаЗапросов = "";
	
	Если ЗначениеЗаполнено(мДанныеАдрес) Тогда  											
		ПолучитьТаблицуДанныхИзПараметра(мПоказателиРаскрытия,МенеджерВТ); //Пришла готовая таблица с данными
	Иначе		
		ПолучитьТаблицуДанных(мПоказателиРаскрытия,МенеджерВТ,тДанные[0],СписокВерсий);	
		ПолучитьКомментарииДанных(МенеджерВТ,тКомментарии[0]);
	КонецЕсли;			
	
	Если ЗначениеЗаполнено(ПараметрыБазовойВерсии) Тогда 					//Выводим данные в режиме дельты от базовой версии. Получаем базовый срез данных.	
		ПолучитьТаблицуДанныхБазовойВерсии(мПоказателиРаскрытия,МенеджерВТ,тДанные[0],ПараметрыБазовойВерсии);
	КонецЕсли;	
		
	текПоказатели = ПолучитьИзВременногоХранилища(ТзСвойстваПоказателейАдрес);
	
	Если ТипЗнч(текПоказатели) = Тип("Массив") Тогда	
		ТзСвойстваПоказателей 			=  АналитическийБланкГенерацияМакетаУХСервер.ПолучитьСвойстваВыбранныхПоказателей(текПоказатели);
		ТзСвойстваПоказателейАдрес      =  ПоместитьВоВременноеХранилище(ТзСвойстваПоказателей,Новый УникальныйИдентификатор); 	
	КонецЕсли;	

	СтруктураМакетаКолонок 	= Новый Структура;
	СтруктураМакетаСтрок 	= Новый Структура;	
	
	// Обновляем закэшированный список периодов по заданному интервалу периодов
	Если ОбновитьДанные И ЗначениеЗАполнено(ПериодОтчета)  Тогда
		ВложенныеПериоды.Очистить();
		МассивПериодов = ПериодыУХ.ПолучитьПодчиненныеПериоды(ПериодОтчета.ДатаНачала,ПериодОтчетаОкончание.ДатаОкончания,ПериодОтчета.Периодичность);
		Для Каждого текПериод Из  МассивПериодов Цикл	
			СтрокаПериод = ВложенныеПериоды.Добавить();
			СтрокаПериод.ПериодОтчета = текПериод;	
		КонецЦикла;		
	КонецЕсли;


	Если тСинтетика.Количество()>0 Тогда
		ВывестиТаблицуСинтетики(ПолеТабличногоДокументаМакет, тСинтетика[0], МенеджерВТ, ДополнительныеНастройки, мНемасштабируемые);		
	КонецЕсли;
	
	Если РежимСводнойТаблицы Тогда
		Если тКолонки.Количество()>0 Тогда
			ВывестиВертикальныеОбластиСКД(тКолонки,МакетКолонок, МенеджерВТ, ДополнительныеНастройки, СтруктураМакетаКолонок, мНемасштабируемые,СтруктураОформления);
		КонецЕсли;
		Если тСтроки.Количество()>0 Тогда
			ВывестиГоризонтальныеОбластиСКД(тСтроки,мПоказателиРаскрытия,МакетСтрок, МенеджерВТ, ДополнительныеНастройки, СтруктураМакетаСтрок, мНемасштабируемые,СтруктураОформления);
		КонецЕсли;
	Иначе	
		Если тКолонки.Количество()>0 Тогда
			ВывестиВертикальныеОбласти(тКолонки,МакетКолонок, МенеджерВТ, ДополнительныеНастройки, СтруктураМакетаКолонок, мНемасштабируемые);
		КонецЕсли;
		Если тСтроки.Количество()>0 Тогда
			ВывестиГоризонтальныеОбласти(тСтроки,мПоказателиРаскрытия,МакетСтрок,МенеджерВТ,ДополнительныеНастройки,СтруктураМакетаСтрок,мНемасштабируемые,СтруктураОформления);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗАполнено(ПериодОтчета) Тогда
		Возврат;
	КонецЕсли;	
			
		
	СдвигОбластейX = Новый Массив; 
	СдвигОбластейY = 0;
	тСдвигX        = 0;
	тСдвигОбластейY = 0;
	
	ВывестиШапкуТаблицы(ПолеТабличногоДокументаМакет,тВыводимыхОбластей,МакетСтрок,СтруктураМакетаКолонок,МакетТаблиц,ТзКэшОбластейРаскрытия,СдвигОбластейX);
	
	ВсегоОбластейКолонок   = СдвигОбластейX.Количество();
	ИндексВыводимойКолонки = 0;
    ВыводимаяОбластьИсточникДокументВысотаТаблицы = 1;
	
	ИтоговыйДокумент = Новый ТабличныйДокумент;     
	
	тВыводимыхОбластейСтрок = тВыводимыхОбластей.НайтиСтроки(Новый Структура("ТипОбласти","Строки"));
	
	ВыведеныеСтрокиРаскрытий = Новый Массив;
	
	Если тВыводимыхОбластейСтрок.Количество() =0  Тогда
		ИтоговыйДокумент.Вывести(ПолеТабличногоДокументаМакет);			
	Иначе	
		ВыведеныеСтрокиРаскрытий.Добавить(1);			
	КонецЕсли;	
	
	Для Каждого вОбласть Из тВыводимыхОбластей Цикл	
		
		Если ИндексВыводимойКолонки>ВсегоОбластейКолонок-1 Тогда
			 ИндексВыводимойКолонки = 0;	 
			 тСдвигОбластейY = СдвигОбластейY;	
		КонецЕсли;	
			
		Если вОбласть.ТипОбласти = "Синтетика" Тогда	
			 вОбласть.СдвигY = вОбласть.Верх+ тСдвигОбластейY;
			 вОбласть.СдвигX = вОбласть.Лево+ СдвигОбластейX[ИндексВыводимойКолонки];			 	
		КонецЕсли;	
							
		Если вОбласть.ТипОбласти = "Колонки" Тогда
			вОбласть.СдвигY = вОбласть.Верх+ тСдвигОбластейY;
			вОбласть.СдвигX = вОбласть.Лево+ СдвигОбластейX[ИндексВыводимойКолонки];	
		КонецЕсли;	
			
		Если вОбласть.ТипОбласти = "Строки" Тогда		
			
			вОбласть.СдвигY = вОбласть.Верх+ тСдвигОбластейY;
			вОбласть.СдвигX = вОбласть.Лево+ СдвигОбластейX[ИндексВыводимойКолонки];
			
			Если НЕ вОбласть.Лево =1 Тогда
				ИндексВыводимойКолонки =  ИндексВыводимойКолонки + 1;
				Продолжить;
			КонецЕсли;		
			
			ВыводимаяОбластьИсточникДокумент 	= ПолучитьМакетВыводимойОбласти(ЭталонныйМакет,вОбласть,СтруктураМакетаСтрок,МакетКолонок,МакетТаблиц);
			Если ВыводимаяОбластьИсточникДокумент = Неопределено Тогда		
				    //Вывод области до строки
					ВыведеннаяОбласть = ВыведеныеСтрокиРаскрытий[ВыведеныеСтрокиРаскрытий.Количество()-1];
					ИтоговыйДокумент.Вывести(ПолеТабличногоДокументаМакет.ПолучитьОбласть(ВыведеннаяОбласть,0,ПолеТабличногоДокументаМакет.Область(вОбласть.ИмяОбластиСтрок).Верх-1,0));
                    ВыведеныеСтрокиРаскрытий.Добавить(ПолеТабличногоДокументаМакет.Область(вОбласть.ИмяОбластиСтрок).Низ+1);	
					ИндексВыводимойКолонки =  ИндексВыводимойКолонки + 1;
					СдвигОбластейY = тСдвигОбластейY-(вОбласть.Низ-вОбласть.Верх)-1;
				Продолжить;
			КонецЕсли;	
			
			//Вывод области до строки
			ВыведеннаяОбласть = ВыведеныеСтрокиРаскрытий[ВыведеныеСтрокиРаскрытий.Количество()-1];
			ИтоговыйДокумент.Вывести(ПолеТабличногоДокументаМакет.ПолучитьОбласть(ВыведеннаяОбласть,0,ПолеТабличногоДокументаМакет.Область(вОбласть.ИмяОбластиСтрок).Верх-1,0));

			//Вывод раскрытия по строке
			ВысотаДоВывода = ИтоговыйДокумент.ВысотаТаблицы;
			
			ИтоговыйДокумент.Вывести(ВыводимаяОбластьИсточникДокумент);
											
			нКэш = ТзКэшОбластейРаскрытия.Добавить();
			нКэш.ИмяОбласти = вОбласть.ИмяОбластиСтрок;
			
			ВыведеныеСтрокиРаскрытий.Добавить(ПолеТабличногоДокументаМакет.Область(вОбласть.ИмяОбластиСтрок).Низ+1);
			
			СдвигОбластейY = тСдвигОбластейY+(ВыводимаяОбластьИсточникДокумент.ВысотаТаблицы-(вОбласть.Низ-вОбласть.Верх)-1);
						
		КонецЕсли;	
		
		Если вОбласть.ТипОбласти = "Таблица" Тогда			
			
			вОбласть.СдвигY = вОбласть.Верх+ тСдвигОбластейY;
			вОбласть.СдвигX = вОбласть.Лево+ СдвигОбластейX[ИндексВыводимойКолонки];	
				
		КонецЕсли;	

		ИндексВыводимойКолонки =  ИндексВыводимойКолонки +1;
		
	КонецЦикла;	                                                              
	
	Если тВыводимыхОбластейСтрок.Количество() >0  Тогда	
		ВыведеннаяОбласть = ВыведеныеСтрокиРаскрытий[ВыведеныеСтрокиРаскрытий.Количество()-1];
		Если  ВыведеннаяОбласть<=ПолеТабличногоДокументаМакет.ВысотаТаблицы Тогда
			ИтоговыйДокумент.Вывести(ПолеТабличногоДокументаМакет.ПолучитьОбласть(ВыведеннаяОбласть,0,ПолеТабличногоДокументаМакет.ВысотаТаблицы,0));
		КонецЕсли;	
	КонецЕсли;	
		
	Если РежимСводнойТаблицы Тогда
		Если тТаблицы.Количество()>0 Тогда
			ВывестиТабличныеОбластиСКД(тТаблицы,СтруктураМакетаСтрок,МенеджерВТ,ДополнительныеНастройки,мНемасштабируемые,ИтоговыйДокумент,МакетТаблиц);
		КонецЕсли;
	Иначе
		Если тТаблицы.Количество()>0 Тогда
			ВывестиТабличныеОбласти(тТаблицы,СтруктураМакетаСтрок,МенеджерВТ,ДополнительныеНастройки,мНемасштабируемые,ИтоговыйДокумент);
		КонецЕсли;
	КонецЕсли;
	
	ПолеТабличногоДокументаМакет.Очистить();
	ПолеТабличногоДокументаМакет.Вывести(ИтоговыйДокумент);
	ПолеТабличногоДокументаМакет.Область("C1").Имя = "ОбластьНастроекРаскрытийСтрок";
		
	ВосстановитьГруппировкиСтрокИсходногоМакета(ПолеТабличногоДокументаМакет);
	
	Обработки.АналитическийБланк.УдалитьСлужебныеОбласти(ПолеТабличногоДокументаМакет);
	
	ПолеТабличногоДокументаМакет.ФиксацияСлева 	= ?(ФиксацияСлева=0,0,ФиксацияСлева-1);
	ПолеТабличногоДокументаМакет.ФиксацияСверху = ?(ФиксацияСверху=0,0,ФиксацияСверху-1);
	
	//Рисует группировки строк по структурам.
	Если Не РежимСводнойТаблицы Тогда
		УстановитьГруппировкиОбластей(ПолеТабличногоДокументаМакет,СтруктураМакетаКолонок,СтруктураМакетаСтрок,тВыводимыхОбластей);	
	Иначе	
		УстановитьДополнительоеОформлениеСводнойТаблицы(ПолеТабличногоДокументаМакет,СтруктураПараметров);
	КонецЕсли;
	
	Если  Бланк.Мультиязычный Тогда
		ДополнительныеЯзыкиУХ.ПеревестиТекстыОбластей(ПолеТабличногоДокументаМакет,0,НомерОсновногоЯзыка,Бланк.Владелец);
	КонецЕсли;	
			
	тВыводимыхОбластейАдрес = ПоместитьВовременноеХранилище(ТзКэшОбластейРаскрытия,Новый УникальныйИдентификатор());
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("МакетСтрок",МакетСтрок);
	СтруктураТаблиц.Вставить("МакетКолонок",МакетКолонок);
	СтруктураТаблиц.Вставить("МакетТаблиц",МакетТаблиц);
	
	Попытка 
		ВывестиКомментарии(ПолеТабличногоДокументаМакет);
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Произошла ошибка при выводе комментариев к ячейкам'"));
	КонецПопытки;
	
	МенеджерВТ.Закрыть();
	
	мТаблицАдрес = ПоместитьВовременноеХранилище(СтруктураТаблиц,Новый УникальныйИдентификатор());
	
	ПолеТабличногоДокументаМакет.ПоказатьУровеньГруппировокСтрок(0);
	ПолеТабличногоДокументаМакет.ПоказатьУровеньГруппировокСтрок(ПолеТабличногоДокументаМакет.КоличествоУровнейГруппировокСтрок());
	
	СтруктураМакетаСтрокКопия 	= Новый Структура;
	СтруктураМакетаКолонокКопия = Новый Структура;
	
	Для Каждого СтрокаСтруктуры Из СтруктураМакетаСтрок Цикл
		 СтруктураМакетаСтрокКопия.Вставить(СтрокаСтруктуры.Ключ,СтрокаСтруктуры.Значение.ВысотаТаблицы);
	КонецЦикла;
	Для Каждого СтрокаСтруктуры Из СтруктураМакетаКолонок Цикл
		 СтруктураМакетаКолонокКопия.Вставить(СтрокаСтруктуры.Ключ,СтрокаСтруктуры.Значение.ШиринаТаблицы);
	КонецЦикла;
	
	СтруктураМакетаСтрокАдрес 	= ПоместитьВоВременноеХранилище(СтруктураМакетаСтрокКопия,Новый УникальныйИдентификатор);
    СтруктураМакетаКолонокАдрес = ПоместитьВоВременноеХранилище(СтруктураМакетаКолонокКопия,Новый УникальныйИдентификатор);
				
КонецПроцедуры	

Функция ПодготовитьЗапросПолученияДанных(тДополнительныхОтборов)
	
	Если тДополнительныхОтборов 	= Неопределено Тогда //Для совместимости с предыдущими версиями заполняем таблицу отборов по реквизитам
		
		ТаблицаТекущихОтборов = Обработки.АналитическийБланк.ПолучитьОписаниеТаблицыТекущихОтборов();
		
		нСтр  						= ТаблицаТекущихОтборов.Добавить();
		нСтр.ПолеПредставление      = "ПериодОтчета";
		нСтр.ПолеКод      			= "ПериодОтчета";
		нСтр.ОсновноеПолеКод 	    = "ПериодОтчета";
		нСтр.ВидСравнения      		= ВидСравненияКомпоновкиДанных.Равно;
        нСтр.ВидСравненияСтрока     = "В списке";
        нСтр.Использовать     		= Истина;
        нСтр.РежимОтбора 	    	= Перечисления.РежимыОтборовАналитическихТаблиц.Данные;
        нСтр.ТипЗначения 	    	= Новый ОписаниеТипов("Справочникссылка.Периоды");
        нСтр.ОтборВерсии 	    	= Истина;

		нСтр  						= ТаблицаТекущихОтборов.Добавить();
		нСтр.ПолеПредставление      = "Сценарий";
		нСтр.ПолеКод      			= "Сценарий";
		нСтр.ОсновноеПолеКод 	    = "Сценарий";
		нСтр.ВидСравнения      		= ВидСравненияКомпоновкиДанных.Равно;
        нСтр.ВидСравненияСтрока     = "Равно";
        нСтр.Использовать     		= Истина;
        нСтр.ЗначениеОтбора     	= Сценарий;
        нСтр.РежимОтбора 	    	= Перечисления.РежимыОтборовАналитическихТаблиц.Данные;
        нСтр.ТипЗначения 	    	= Новый ОписаниеТипов("Справочникссылка.Сценарии");
        нСтр.ОтборВерсии 	    	= Истина;

		нСтр  						= ТаблицаТекущихОтборов.Добавить();
		нСтр.ПолеПредставление      = "Организация";
		нСтр.ПолеКод      			= "Организация";
		нСтр.ОсновноеПолеКод 	    = "Организация";
		нСтр.ВидСравнения      		= ВидСравненияКомпоновкиДанных.Равно;
        нСтр.ВидСравненияСтрока     = "Равно";
        нСтр.Использовать     		= Истина;
        нСтр.ЗначениеОтбора     	= Организация;
        нСтр.РежимОтбора 	    	= Перечисления.РежимыОтборовАналитическихТаблиц.Данные;
        нСтр.ТипЗначения 	    	= Новый ОписаниеТипов("Справочникссылка.Организации");
        нСтр.ОтборВерсии 	    	= Истина;

		Если ЗначениеЗаполнено(Проект) Тогда
			нСтр  						= ТаблицаТекущихОтборов.Добавить();
			нСтр.ПолеПредставление      = "Проект";
			нСтр.ПолеКод      			= "Проект";
			нСтр.ОсновноеПолеКод 	    = "Проект";
			нСтр.ВидСравнения      		= ВидСравненияКомпоновкиДанных.Равно;
			нСтр.ВидСравненияСтрока     = "Равно";
			нСтр.Использовать     		= Истина;
			нСтр.ЗначениеОтбора     	= Проект;
			нСтр.РежимОтбора 	    	= Перечисления.РежимыОтборовАналитическихТаблиц.Данные;
			нСтр.ТипЗначения 	    	= Новый ОписаниеТипов("Справочникссылка.Проекты");
			нСтр.ОтборВерсии 	    	= Истина;
		КонецЕсли;
		
	Иначе // дополним таблицу отборов
		
		ТаблицаТекущихОтборов = Обработки.АналитическийБланк.ПолучитьОписаниеТаблицыТекущихОтборов();
					
		нСтр  						= ТаблицаТекущихОтборов.Добавить();
		нСтр.ПолеПредставление      = "ПериодОтчета";
		нСтр.ПолеКод      			= "ПериодОтчета";
		нСтр.ОсновноеПолеКод 	    = "ПериодОтчета";
		нСтр.ВидСравнения      		= ВидСравненияКомпоновкиДанных.Равно;
		нСтр.ВидСравненияСтрока     = "В списке";
		нСтр.Использовать     		= Истина;
		нСтр.РежимОтбора 	    	= Перечисления.РежимыОтборовАналитическихТаблиц.Данные;
		нСтр.ТипЗначения 	    	= Новый ОписаниеТипов("Справочникссылка.Периоды");
		нСтр.ОтборВерсии 	    	= Истина;
		
		Для Каждого СтрОтбор Из тДополнительныхОтборов Цикл
			
			нСтр  						= ТаблицаТекущихОтборов.Добавить();
			ЗаполнитьЗначенияСвойств(нСтр,СтрОтбор);
			
			АналитическийБланкУХСервер.ПреобразоватьОтборСКДВСтроку(нСтр,СтрОтбор); 
						
			нСтр.ОсновноеПолеКод     = ?(СтрНайти(СтрОтбор.ПолеКод,".")>0,Лев(СтрОтбор.ПолеКод,СтрНайти(СтрОтбор.ПолеКод,".")-1),СтрОтбор.ПолеКод);
			
			Если 	нСтр.ОсновноеПолеКод 	    = "Сценарий" 
				ИЛИ нСтр.ОсновноеПолеКод 	    = "Организация"
				ИЛИ нСтр.ОсновноеПолеКод 	    = "Проект"      
				ИЛИ нСтр.ОсновноеПолеКод 	    = "ПериодОтчета"      Тогда
				нСтр.ОтборВерсии 	    	= Истина;
			КонецЕсли;		
			
		КонецЦикла;		
	КонецЕсли;	
	
	СтруктураПараметровФормированияЗапроса = Новый Структура;
	
	ТзСтруктураВыводаГруппировок = Обработки.АналитическийБланк.ПолучитьОписаниеТаблицыВыводаГруппировок();
	
	ФинальныйЗапрос = Новый Запрос;	
	
	ТзПараметровЗапроса = Новый ТаблицаЗначений;
	ТзПараметровЗапроса.Колонки.Добавить("ИмяОтбора");
	ТзПараметровЗапроса.Колонки.Добавить("ТипОтбора");
	ТзПараметровЗапроса.Колонки.Добавить("ЗначениеОтбора");
	ТзПараметровЗапроса.Колонки.Добавить("УидГруппыОтбора");
	
	СтруктураПараметровФормированияЗапроса.Вставить("ОбъектАБ",ЭтотОбъект);
	СтруктураПараметровФормированияЗапроса.Вставить("ФинальныйЗапрос",ФинальныйЗапрос);
	СтруктураПараметровФормированияЗапроса.Вставить("ТзПараметровЗапроса",ТзПараметровЗапроса);
	СтруктураПараметровФормированияЗапроса.Вставить("ТзСтруктураВыводаГруппировок",ТзСтруктураВыводаГруппировок);
	СтруктураПараметровФормированияЗапроса.Вставить("ТаблицаТекущихОтборов",ТаблицаТекущихОтборов);
	СтруктураПараметровФормированияЗапроса.Вставить("АдресЛогаИзмененныхПоказателей",АдресЛогаИзмененныхПоказателей);

	АналитическийБланкУХСервер.СформироватьЗапросПолученияТаблицыДанных(СтруктураПараметровФормированияЗапроса); //Формируем текст запроса к даным динамически, с учеом отборов
	
	Возврат СтруктураПараметровФормированияЗапроса.ТзСтруктураВыводаГруппировок;
	
КонецФункции	

Процедура УстановитьГруппировкиОбластей(ПолеТабличногоДокументаМакет,СтруктураМакетаКолонок,СтруктураМакетаСтрок,тВыводимыхОбластей)
	
	Если ЗначениеЗаполнено(СтруктураРасшифровкаОбластейYАдрес) Тогда
		СтруктураРасшифровкаОбластейY 	= ПолучитьИзВременногоХранилища(СтруктураРасшифровкаОбластейYАдрес);
		ГруппировкиСтрок 				= тВыводимыхОбластей.НайтиСтроки(Новый Структура("ТипОбласти,Лево","Строки",1));
		
		Для Каждого Стр Из ГруппировкиСтрок Цикл	
			Если НЕ СтруктураРасшифровкаОбластейY.Свойство(Стр.ИмяОбластиСтрок) Тогда
				Продолжить;
			КонецЕсли;	
			тСтруктураГруппровкиY =  СтруктураРасшифровкаОбластейY[Стр.ИмяОбластиСтрок];
			ПолеТабличногоДокументаМакет.Область(Стр.СдвигY,0,Стр.СдвигY+СтруктураМакетаСтрок[Стр.ИмяОбластиСтрок].ВысотаТаблицы-1,0).Сгруппировать();
			
			СтруктураПоиска = Новый Структура();
			
			Для Каждого СтрокаРаскрытия Из тСтруктураГруппровкиY Цикл
				
				СтруктураПоиска.Очистить();
				
				Для Каждого Реквизит Из тСтруктураГруппровкиY.Колонки Цикл
					Если Реквизит.Имя = "ИмяМакета" ИЛИ Реквизит.Имя = "СмещениеY" тогда
						Продолжить;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаРаскрытия[Реквизит.Имя]) тогда
						СтруктураПоиска.Вставить(Реквизит.Имя, СтрокаРаскрытия[Реквизит.Имя]);
					КонецЕсли;
				КонецЦикла;
				
				МассивГруппировок = тСтруктураГруппровкиY.НайтиСтроки(СтруктураПоиска);
				
				МинимальноеСмещениеY = 0;
				МаксимальноеСмещениеY = 0;
				
				Для Каждого ГруппировкаИерархии Из МассивГруппировок Цикл
					Если МинимальноеСмещениеY = 0 тогда
						МинимальноеСмещениеY = ГруппировкаИерархии.СмещениеY;
					Иначе
						МинимальноеСмещениеY = Мин(МинимальноеСмещениеY, ГруппировкаИерархии.СмещениеY);
					КонецЕсли;
					
					Если МаксимальноеСмещениеY = 0 тогда
						МаксимальноеСмещениеY = ГруппировкаИерархии.СмещениеY;
					Иначе
						МаксимальноеСмещениеY = Макс(МаксимальноеСмещениеY, ГруппировкаИерархии.СмещениеY);
					КонецЕсли;
				КонецЦикла;
				
				Если МинимальноеСмещениеY > 0 И МаксимальноеСмещениеY > 0 И МинимальноеСмещениеY < МаксимальноеСмещениеY тогда
					ПолеТабличногоДокументаМакет.Область(Стр.СдвигY + МинимальноеСмещениеY, 0, Стр.СдвигY + МаксимальноеСмещениеY - 1, 0).Сгруппировать();
				КонецЕсли;
			
			КонецЦикла;
			
			Если СтруктураМакетаСтрок.Свойство("МассивГруппировок") тогда
				
				МассивГруппировок = СтруктураМакетаСтрок.МассивГруппировок;
				
				Для Каждого СруктураГруппировки Из МассивГруппировок Цикл
					Если Стр.ИмяОбластиСтрок <> СруктураГруппировки.ИмяОбластиСтрок ИЛИ СруктураГруппировки.ВысотаY < 2 тогда
						Продолжить;
					КонецЕсли;
					
					ПолеТабличногоДокументаМакет.Область(Стр.СдвигY + СруктураГруппировки.СмещениеY - 1, 0, Стр.СдвигY + СруктураГруппировки.СмещениеY - 1 + СруктураГруппировки.ВысотаY - 2, 0).Сгруппировать();
				КонецЦикла;
				
			КонецЕсли;
									
		КонецЦикла;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРасшифровкаОбластейХАдрес) Тогда	
		СтруктураРасшифровкаОбластейХ 	= ПолучитьИзВременногоХранилища(СтруктураРасшифровкаОбластейХАдрес);
		ГруппировкиКолонок 				= тВыводимыхОбластей.НайтиСтроки(Новый Структура("ТипОбласти,Верх","Колонки",1));
		
		Для Каждого Стр Из ГруппировкиКолонок Цикл	
			Если НЕ СтруктураРасшифровкаОбластейХ.Свойство(Стр.ИмяОбластиКолонок) Тогда
				Продолжить;
			КонецЕсли;
			тСтруктураГруппровкиX =  СтруктураРасшифровкаОбластейХ[Стр.ИмяОбластиКолонок];
			ПолеТабличногоДокументаМакет.Область(0,Стр.СдвигX,0,Стр.СдвигX+СтруктураМакетаКолонок[Стр.ИмяОбластиКолонок].ШиринаТаблицы-1).Сгруппировать();
		КонецЦикла;	
	КонецЕсли;
		
КонецПроцедуры	

Процедура ВывестиШапкуТаблицы(ПолеТабличногоДокументаМакет,тВыводимыхОбластей,МакетСтрок,СтруктураМакетаКолонок,МакетТаблиц,ТзКэшОбластейРаскрытия,СдвигОбластейX)

	тСдвигX = 0;
	
	Для Каждого вОбласть Из тВыводимыхОбластей Цикл	
				
		Если вОбласть.Верх>1 Тогда
			Продолжить; 
		КонецЕсли;	
		
		
		Если вОбласть.ТипОбласти = "Синтетика" ИЛИ вОбласть.ТипОбласти = "Строки" Тогда			 
			СдвигОбластейX.Добавить(тСдвигX);	
		КонецЕсли;	
					
		Если вОбласть.ТипОбласти = "Колонки" Тогда		
							
			ВыводимаяОбластьИсточникДокумент 	= ПолучитьМакетВыводимойОбласти(ЭталонныйМакет,вОбласть,МакетСтрок,СтруктураМакетаКолонок,МакетТаблиц);
			ВыводимаяОбластьИсточник			= ВыводимаяОбластьИсточникДокумент.Область(0,1,ВыводимаяОбластьИсточникДокумент.ВысотаТаблицы,ВыводимаяОбластьИсточникДокумент.ШиринаТаблицы);

			ЭталоннаяОбласть  =  ПолеТабличногоДокументаМакет.Область(вОбласть.ИмяОбластиКолонок);
			СмещениеХ = ЭталоннаяОбласть.Лево;
			ЭталоннаяОбласть.Имя = "";
			ПолеТабличногоДокументаМакет.УдалитьОбласть(ЭталоннаяОбласть,типСмещенияТабличногоДокумента.ПоГоризонтали);

			ВыводимаяОбластьПриемник = ПолеТабличногоДокументаМакет.Область(0,СмещениеХ,0,СмещениеХ+ВыводимаяОбластьИсточник.Право-1);
			ПолеТабличногоДокументаМакет.ВставитьОбласть(ВыводимаяОбластьИсточник,ВыводимаяОбластьПриемник,типСмещенияТабличногоДокумента.ПоГоризонтали);
				
			ОбластьДляГруппировки = ПолеТабличногоДокументаМакет.Область(0,СмещениеХ,0,СмещениеХ+ВыводимаяОбластьИсточник.Право-1);
			ОбластьДляГруппировки.Имя = вОбласть.ИмяОбластиКолонок;
			//ОбластьДляГруппировки.Сгруппировать();
			нКэш = ТзКэшОбластейРаскрытия.Добавить();
			нКэш.ИмяОбласти = ОбластьДляГруппировки.Имя;			
			
			ОбластьМакет = ЭталонныйМакет.ПолучитьОбласть(вОбласть.ИмяОбластиКолонок);
			
			тШиринаКолонокМакета = Новый Массив;
			Для  УрХ = 1 По ОбластьМакет.ШиринаТаблицы Цикл
				тШиринаКолонокМакета.Добавить(ОбластьМакет.Область(0,УрХ,0,УрХ).ШиринаКолонки);
			КонецЦикла;	
			
			ВсегоКолонокВМакете = тШиринаКолонокМакета.Количество();
			тВыведенныхКолонок  = 0;
			
			Для ТекХ  = СмещениеХ По СмещениеХ+ВыводимаяОбластьИсточник.Право-1 Цикл 		
				
				ПолеТабличногоДокументаМакет.Область(0,ТекХ,0,ТекХ).ШиринаКолонки    =    тШиринаКолонокМакета.Получить(тВыведенныхКолонок);			
				
				Если тВыведенныхКолонок = ВсегоКолонокВМакете - 1 Тогда	
					тВыведенныхКолонок = 0;	
				Иначе
					тВыведенныхКолонок = тВыведенныхКолонок+1;
				КонецЕсли;
				
			КонецЦикла;	
			
			СдвигОбластейX.Добавить(тСдвигX);
				
			тСдвигX = тСдвигX+(ВыводимаяОбластьИсточникДокумент.ШиринаТаблицы-(вОбласть.Право-вОбласть.Лево)-1);
		 		
		КонецЕсли;	
		
	КонецЦикла;	                           
	
	
КонецПроцедуры	
	
Процедура ИнициализироватьАналитическийБланк(СтруктураНастроекВарианта)
		
	Если Не ЗначениеЗаполнено(СтруктураНастроекВарианта) Тогда 
		текНаборЗаписей = РегистрыСведений.НастройкиАналитическихБланков.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
		текНаборЗаписей.Прочитать();
		Если текНаборЗаписей.Количество() = 0 Тогда
			 Возврат;
		КонецЕсли;	
		ЗначениеСохраняемойНастройки = текНаборЗаписей[0].ХранилищеДополнительныхНастроек.Получить();
	Иначе	
		ЗначениеСохраняемойНастройки = СтруктураНастроекВарианта.НастройкиАналитическихБланков;
	КонецЕсли;
	
	Если  ЗначениеСохраняемойНастройки.Свойство("МакетДляВыводаПоказателей") Тогда		
		ЭталонныйМакет.Очистить();
		ЭталонныйМакет.Вывести(ЗначениеСохраняемойНастройки.МакетДляВыводаПоказателей);
	Иначе	
		ЭталонныйМакет.Очистить();
		ЭталонныйМакет.Вывести(ЗначениеСохраняемойНастройки.ТабДокМакет);
	КонецЕсли;
	Если  ЗначениеСохраняемойНастройки.Свойство("ФиксацияСверху") Тогда		
		ФиксацияСверху = ЗначениеСохраняемойНастройки.ФиксацияСверху;
	КонецЕсли;
	Если  ЗначениеСохраняемойНастройки.Свойство("ФиксацияСлева") Тогда		
		ФиксацияСлева = ЗначениеСохраняемойНастройки.ФиксацияСлева;
	КонецЕсли;	
	
	Если  ЗначениеСохраняемойНастройки.Свойство("ТзПоказателейОбластейКолонки") Тогда		
		ТзПоказателейОбластейКолонкиАдрес = ПоместитьВоВременноеХранилище(ЗначениеСохраняемойНастройки.ТзПоказателейОбластейКолонки,Новый УникальныйИдентификатор);
	КонецЕсли;
	Если  ЗначениеСохраняемойНастройки.Свойство("ТзПоказателейОбластейСтроки") Тогда		
		ТзПоказателейОбластейСтрокиАдрес = ПоместитьВоВременноеХранилище(ЗначениеСохраняемойНастройки.ТзПоказателейОбластейСтроки,Новый УникальныйИдентификатор);
	КонецЕсли;	
	
	Если  ЗначениеСохраняемойНастройки.Свойство("КэшПоказателейКроссОбластей") Тогда		
		КэшПоказателейКроссОбластейАдрес = ПоместитьВоВременноеХранилище(ЗначениеСохраняемойНастройки.КэшПоказателейКроссОбластей,Новый УникальныйИдентификатор);
	КонецЕсли;	
	
	Если  ЗначениеСохраняемойНастройки.Свойство("ТзПоказателиМакетовРаскрытий") Тогда		
		ПоказателиМакетовРаскрытийАдрес = ПоместитьВоВременноеХранилище(ЗначениеСохраняемойНастройки.ТзПоказателиМакетовРаскрытий,Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Если  ЗначениеСохраняемойНастройки.Свойство("СтруктураНемасштабируемых") Тогда		
		НемасшатбируемыеАдрес   	= ПоместитьВоВременноеХранилище(ЗначениеСохраняемойНастройки.СтруктураНемасштабируемых,Новый УникальныйИдентификатор);
	Иначе	
		СтруктураНемасштабируемых 	= Новый Структура;
		НемасшатбируемыеАдрес   	= ПоместитьВоВременноеХранилище(СтруктураНемасштабируемых,Новый УникальныйИдентификатор);
	КонецЕсли;
	
	
	Если ЗначениеСохраняемойНастройки.Свойство("тКэшОбластейРаскрытия") Тогда
		
		тКэшОбластейРаскрытияАдрес  			=  ПоместитьВоВременноеХранилище(ЗначениеСохраняемойНастройки.тКэшОбластейРаскрытия,Новый УникальныйИдентификатор);
		
		АдресТЗСтруктурыВывода  				=  ПоместитьВоВременноеХранилище(ЗначениеСохраняемойНастройки.ТзСтруктураВыводаГруппировок,Новый УникальныйИдентификатор);
		АдресПараметровВыводаСтрок				=  ПоместитьВоВременноеХранилище(ЗначениеСохраняемойНастройки.ПараметрыОбластейСтроки,Новый УникальныйИдентификатор);
		АдресПараметровВыводаКолонок			=  ПоместитьВоВременноеХранилище(ЗначениеСохраняемойНастройки.ПараметрыОбластейКолонки,Новый УникальныйИдентификатор);
		
		тзПоказателиАдрес  							=  ПоместитьВоВременноеХранилище(ЗначениеСохраняемойНастройки.тзПоказатели,Новый УникальныйИдентификатор);			
		
		КэшАналитикПоказателей 				= АналитическийБланкУХСервер.ПолучитьКэшАналитикПоказателей(ЗначениеСохраняемойНастройки.ТзПоказатели.ВыгрузитьКолонку("Показатель")); 
		КэшАналитикПоказателей.Индексы.Добавить("Показатель");
		КэшАналитикПоказателейАдрес  		= ПоместитьВоВременноеХранилище(КэшАналитикПоказателей,Новый УникальныйИдентификатор);
		КоличествоОдинаковыхИменАдрес  		= ПоместитьВоВременноеХранилище(ЗначениеСохраняемойНастройки.КоличествоОдинаковыхИмен,Новый УникальныйИдентификатор);
		КэшОперандовАдрес  					= ПоместитьВоВременноеХранилище(ЗначениеСохраняемойНастройки.КэшОперандов,Новый УникальныйИдентификатор);
		
		ТзСвойстваПоказателейАдрес          = ПоместитьВоВременноеХранилище(ЗначениеСохраняемойНастройки.тИспользованныеПоказатели,Новый УникальныйИдентификатор);
		
	КонецЕсли;
	

	Если Не ЗначениеЗаполнено(СтруктураНастроекВарианта) Тогда 
		текНаборЗаписей = РегистрыСведений.РасшифровкаГруппОтборов.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
		текНаборЗаписей.Прочитать();
		РасшифровкаГруппОтборов.Загрузить(текНаборЗаписей.Выгрузить());	
	Иначе
		РасшифровкаГруппОтборов.Загрузить(СтруктураНастроекВарианта.РасшифровкаГруппОтборов);
	КонецЕсли;	
	
	тзРасшифровкиГруппОтборов  = РасшифровкаГруппОтборов.Выгрузить();
	тзРасшифровкиГруппОтборов.Индексы.Добавить("УидГруппыОтборов,ПолеКод");
	АдресРасшифровкиГруппОтборов = ПоместитьВоВременноеХранилище(тзРасшифровкиГруппОтборов,Новый УникальныйИдентификатор);

	
	Если Не ЗначениеЗаполнено(СтруктураНастроекВарианта) Тогда 
		текНаборЗаписей = РегистрыСведений.НастройкиРаскрываемыхОбластей.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
		текНаборЗаписей.Прочитать();	
		НастройкиРаскрываемыхОбластей.Загрузить(текНаборЗаписей.Выгрузить());
		
		текНаборЗаписей = РегистрыСведений.НастройкиТаблицРаскрываемыхОбластей.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
		текНаборЗаписей.Прочитать();
		НастройкиТаблицРаскрываемыхОбластей.Загрузить(текНаборЗаписей.Выгрузить());
		
		текНаборЗаписей = РегистрыСведений.КэшГруппОтборовПоказателей.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
		текНаборЗаписей.Прочитать();
		КэшГруппОтборовПоказателей.Загрузить(текНаборЗаписей.Выгрузить());
		
		текНаборЗаписей = РегистрыСведений.КэшФормулОбластейПоказателей.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
		текНаборЗаписей.Прочитать();
		КэшФормулОбластейПоказателей.Загрузить(текНаборЗаписей.Выгрузить());
		
		текНаборЗаписей = РегистрыСведений.КэшИменОбластейПоказателей.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
		текНаборЗаписей.Прочитать();
		КэшИменОбластейПоказателей.Загрузить(текНаборЗаписей.Выгрузить());
		
		текНаборЗаписей = РегистрыСведений.КэшИменФормул.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
		текНаборЗаписей.Прочитать();
		КэшИменФормул.Загрузить(текНаборЗаписей.Выгрузить());
	
	Иначе
		
		НастройкиРаскрываемыхОбластей.Загрузить(СтруктураНастроекВарианта.НастройкиРаскрываемыхОбластей);
		НастройкиТаблицРаскрываемыхОбластей.Загрузить(СтруктураНастроекВарианта.НастройкиТаблицРаскрываемыхОбластей);
        КэшГруппОтборовПоказателей.Загрузить(СтруктураНастроекВарианта.КэшГруппОтборовПоказателей);
        КэшФормулОбластейПоказателей.Загрузить(СтруктураНастроекВарианта.КэшФормулОбластейПоказателей);
        КэшИменОбластейПоказателей.Загрузить(СтруктураНастроекВарианта.КэшИменОбластейПоказателей);
		КэшИменФормул.Загрузить(СтруктураНастроекВарианта.КэшИменФормул);
		
	КонецЕсли;	
		
	оЛогИзмененныхДанных 			= Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
	ЛогИзмененныхДанных  			= оЛогИзмененныхДанных.ТаблицаИзмененныхПоказателей.Выгрузить();	
	ЛогИзмененныхДанных.Индексы.Добавить("Сценарий,ПериодОтчета,Организация,Проект,ПоказательОтчета,АналитикаВалюта,Аналитика1,Аналитика2,Аналитика3,Аналитика4,Аналитика5");

	логИзмененныхКомментариев  		= оЛогИзмененныхДанных.ТаблицаИзмененныхПоказателей.Выгрузить();

	ЛогИзмененныхДанныхАдрес       	= ПоместитьВоВременноеХранилище(ЛогИзмененныхДанных,Новый УникальныйИдентификатор);
	ЛогИзмененныхКомментариевАдрес  = ПоместитьВоВременноеХранилище(логИзмененныхКомментариев,Новый УникальныйИдентификатор);
  	
КонецПроцедуры

Процедура ПолучитьТаблицуДанных(мПоказателиРаскрытия,МенеджерВТ,тДанные,СписокВерсий)
		
	ЗапросДанные 							= Новый Запрос;
	ЗапросДанные.МенеджерВременныхТаблиц    = МенеджерВТ;
	ЗапросДанные.Текст 						= тДанные.ТекстЗапросаВыводаОбластей;
	
	Если ЗначениеЗаполнено(ИдентификаторСеанса) Тогда  // Получем черновые данные текущего сеанса
		 ЗапросДанные.Текст = СтрЗаменить(ЗапросДанные.Текст,"	И НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия"," И ((НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия) ИЛИ ВерсииЗначенийПоказателей.ИдентификаторСеанса=&ИдентификаторСеанса)");
		 ЗапросДанные.Текст = СтрЗаменить(ЗапросДанные.Текст,"	И НЕ ЗначенияПоказателейОтчетов.Версия.ЧерноваяВерсия"," И ((НЕ ЗначенияПоказателейОтчетов.Версия.ЧерноваяВерсия) ИЛИ ЗначенияПоказателейОтчетов.Версия.ИдентификаторСеанса=&ИдентификаторСеанса)");
		 ЗапросДанные.УстановитьПараметр("ИдентификаторСеанса",ИдентификаторСеанса);
		 ЗапросДанные.УстановитьПараметр("УникальныйИдентификаторСеанса",Новый УникальныйИдентификатор(ИдентификаторСеанса));
	КонецЕсли;	
	                            	
	Если НЕ СписокВерсий = Неопределено Тогда //Если задан список версий, то другие отборы нам не нужны
		Пока СтрНайти(ЗапросДанные.Текст,"//[ОтборПоВерсиямЧисловые")>0 Цикл
			НачалоБлокаУсловий = СтрНайти(ЗапросДанные.Текст,"//[ОтборПоВерсиямЧисловые");	
			КонецБлокаУсловий  = СтрНайти(ЗапросДанные.Текст,"//ОтборПоВерсиямЧисловые]");
			ЗапросДанные.Текст = СтрЗаменить(ЗапросДанные.Текст,Сред(ЗапросДанные.Текст,НачалоБлокаУсловий,(КонецБлокаУсловий+25)-НачалоБлокаУсловий),ПолучитьОтборПоСпискуВерсий(ЗапросДанные,СписокВерсий));	
		КонецЦикла;
		
		Пока СтрНайти(ЗапросДанные.Текст,"//[ОтборПоВерсиямНечисловые")>0 Цикл
			НачалоБлокаУсловий = СтрНайти(ЗапросДанные.Текст,"//[ОтборПоВерсиямНечисловые");	
			КонецБлокаУсловий  = СтрНайти(ЗапросДанные.Текст,"//ОтборПоВерсиямНечисловые]");
			ЗапросДанные.Текст = СтрЗаменить(ЗапросДанные.Текст,Сред(ЗапросДанные.Текст,НачалоБлокаУсловий,(КонецБлокаУсловий+25)-НачалоБлокаУсловий),ПолучитьОтборПоСпискуВерсийНечисловые(ЗапросДанные,СписокВерсий));	
		КонецЦикла;
	Иначе	
		Если ИспользоватьБыстрыйОтборПоАналитикамВерсии Тогда
			ЗапросДанные.Текст = СтрЗаменить(ЗапросДанные.Текст,"//ОтборПоВерсиямЧисловые]",ПолучитьОтборПоВидамАналитикиВерсии(ЗапросДанные));	
			ЗапросДанные.Текст = СтрЗаменить(ЗапросДанные.Текст,"//ОтборПоВерсиямНечисловые]",ПолучитьОтборПоВидамАналитикиВерсииНечисловые(ЗапросДанные));	
		КонецЕсли;
	КонецЕсли;
	
	тзПоказатели               = ПолучитьИзВременногоХранилища(тзПоказателиАдрес).Скопировать();
	тзПоказатели.Свернуть("Показатель,ПоказательКод,ВидОтчета,ИмяОбластиДляВывода");	
	ТзПараметров               = тДанные.ПараметрыЗапроса;
	   	
	//Устанавливаем параметры запроса
	ЗапросДанные.УстановитьПараметр("тзПоказатели",тзПоказатели);
	ЗапросДанные.УстановитьПараметр("БАЗА_тзПоказатели",тзПоказатели);
	
	Для Каждого ПараметрОтчета Из ТзПараметров Цикл
		
		Если ПараметрОтчета.ТипОтбора = "Сценарий отчета" 
			Или ПараметрОтчета.ТипОтбора = "Организация отчета"
			Или ПараметрОтчета.ТипОтбора = "Проект отчета"
			Или ПараметрОтчета.ТипОтбора = "Параметр отчета" Тогда
			ЗапросДанные.УстановитьПараметр(ПараметрОтчета.ИмяОтбора,ЭтотОбъект[СтрЗаменить(ПараметрОтчета.ЗначениеОтбора,"&","")]);
		ИначеЕсли Лев(ПараметрОтчета.ИмяОтбора,12) = "ПериодОтчета" Тогда		
			СформироватьОтборПоПериодам(ЗапросДанные,ПараметрОтчета.УидГруппыОтбора,ПараметрОтчета.ИмяОтбора);		 
		Иначе
			ЗапросДанные.УстановитьПараметр(ПараметрОтчета.ИмяОтбора,ПараметрОтчета.ЗначениеОтбора);
		КонецЕсли;		
		
	КонецЦикла;	
	
	мПакетДанных           =   ЗапросДанные.ВыполнитьПакет();
	мПоказателиРаскрытия   =   мПакетДанных[мПакетДанных.Количество()-1].Выгрузить();
	
	мПоказателиРаскрытия.Индексы.Добавить("УидГруппыОтборов,Показатель");
	
	СтрокаИндексов = "УидГруппыОтборов,Показатель,ПериодОтчета,Сценарий,Организация,Проект";
	                                                                                                                    
	Для  Инд=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если НЕ мПоказателиРаскрытия.Колонки.Найти("Аналитика"+Инд) = Неопределено Тогда
			 СтрокаИндексов = СтрокаИндексов+",Аналитика"+Инд;
			 Если мПоказателиРаскрытия.Колонки["Аналитика"+Инд].ТипЗначения.Типы()[0] = Тип("NULL") Тогда
				 мПоказателиРаскрытия.Колонки.Удалить(мПоказателиРаскрытия.Колонки["Аналитика"+Инд]);
				 мПоказателиРаскрытия.Колонки.Добавить("Аналитика"+Инд,Новый ОписаниеТипов("ПланВидовХарактеристикССылка.ВидыСубконтоКорпоративные,NULL"));
			 КонецЕсли;	  
		КонецЕсли;	
		
	КонецЦикла;		
	
	мПоказателиРаскрытия.Индексы.Добавить(СтрокаИндексов);	
	мПоказателиРаскрытияАдрес 	= ПоместитьВовременноеХранилище(мПоказателиРаскрытия,Новый УникальныйИдентификатор);
	
				
КонецПроцедуры

Процедура ПолучитьТаблицуДанныхИзПараметра(мПоказателиРаскрытия,МенеджерВТ)
		
	ЗапросДанные 							= Новый Запрос;
	ЗапросДанные.МенеджерВременныхТаблиц    = МенеджерВТ;
	ЗапросДанные.Текст 						= ТекстЗапросаДанныеПараметр();
		                            		   	
	//Устанавливаем параметры запроса
	мПоказателиРаскрытия 	= ПолучитьИзВременногоХранилища(мДанныеАдрес);
	ЗапросДанные.УстановитьПараметр("тзДанные",мПоказателиРаскрытия);
	тзПоказатели      		= ПолучитьИзВременногоХранилища(тзПоказателиАдрес).Скопировать();
	ЗапросДанные.УстановитьПараметр("тзПоказатели",тзПоказатели);
	
	мПакетДанных           		=   ЗапросДанные.ВыполнитьПакет(); 
	мПоказателиРаскрытияАдрес 	= ПоместитьВовременноеХранилище(мПоказателиРаскрытия,Новый УникальныйИдентификатор);

	
КонецПроцедуры

Процедура ПолучитьТаблицуДанныхБазовойВерсии(мПоказателиРаскрытия,МенеджерВТ,тДанные,ПараметрыБазовойВерсии)
		
	ЗапросДанные 							= Новый Запрос;
	ЗапросДанные.МенеджерВременныхТаблиц    = МенеджерВТ;
	ЗапросДанные.Текст 						= ПолучитьТекстЗапросаБазаИзОсновногоТекста(тДанные,ПараметрыБазовойВерсии);
		                            	
	Пока СтрНайти(ЗапросДанные.Текст,"//[ОтборПоВерсиямЧисловые")>0 Цикл
		НачалоБлокаУсловий = СтрНайти(ЗапросДанные.Текст,"//[ОтборПоВерсиямЧисловые");	
		КонецБлокаУсловий  = СтрНайти(ЗапросДанные.Текст,"//ОтборПоВерсиямЧисловые]");
		ЗапросДанные.Текст = СтрЗаменить(ЗапросДанные.Текст,Сред(ЗапросДанные.Текст,НачалоБлокаУсловий,(КонецБлокаУсловий+25)-НачалоБлокаУсловий),ПолучитьОтборПоСпискуВерсий(ЗапросДанные,ПараметрыБазовойВерсии.СписокВерсий));	
	КонецЦикла;
		
	тзПоказатели               = ПолучитьИзВременногоХранилища(тзПоказателиАдрес).Скопировать();
	тзПоказатели.Свернуть("Показатель,ПоказательКод,ВидОтчета,ИмяОбластиДляВывода");
	
	ТзПараметров               = тДанные.ПараметрыЗапроса;
   	
	//Устанавливаем параметры запроса
	ЗапросДанные.УстановитьПараметр("БАЗА_тзПоказатели",тзПоказатели);
	ЗапросДанные.УстановитьПараметр("Периодичность",Периодичность);
	ЗапросДанные.УстановитьПараметр("УникальныйИдентификаторСеанса",Новый УникальныйИдентификатор(ИдентификаторСеанса));
	
	
	Для Каждого ПараметрОтчета Из ТзПараметров Цикл	
		Если ПараметрОтчета.ТипОтбора = "Сценарий отчета" 
			Или ПараметрОтчета.ТипОтбора = "Организация отчета"
			Или ПараметрОтчета.ТипОтбора = "Проект отчета"
			Или ПараметрОтчета.ТипОтбора = "Параметр отчета" Тогда
			ЗапросДанные.УстановитьПараметр(ПараметрОтчета.ИмяОтбора,ЭтотОбъект[СтрЗаменить(ПараметрОтчета.ЗначениеОтбора,"&","")]);
		ИначеЕсли Лев(ПараметрОтчета.ИмяОтбора,12) = "ПериодОтчета" Тогда		
			СформироватьОтборПоПериодам(ЗапросДанные,ПараметрОтчета.УидГруппыОтбора,ПараметрОтчета.ИмяОтбора);		 
		Иначе
			ЗапросДанные.УстановитьПараметр(ПараметрОтчета.ИмяОтбора,ПараметрОтчета.ЗначениеОтбора);
		КонецЕсли;			
	КонецЦикла;	
	
	мПакетДанных           =   ЗапросДанные.ВыполнитьПакет();
	мПоказателиРаскрытия_  =   мПакетДанных[мПакетДанных.Количество()-1].Выгрузить();
	
						
КонецПроцедуры

Процедура ПолучитьКомментарииДанных(МенеджерВТ,тКомментарии)
		
	ЗапросДанные 							= Новый Запрос;
	ЗапросДанные.МенеджерВременныхТаблиц    = МенеджерВТ;
	ЗапросДанные.Текст 						= тКомментарии.ТекстЗапросаВыводаОбластей;
		
	ТзПараметров               = тКомментарии.ПараметрыЗапроса;
   	
	Для Каждого ПараметрОтчета Из ТзПараметров Цикл
		Если ПараметрОтчета.ТипОтбора = "Равно" Или ПараметрОтчета.ТипОтбора = "Не равно" ИЛИ ПараметрОтчета.ТипОтбора = "В списке" ИЛИ ПараметрОтчета.ТипОтбора = "Не в списке" ИЛИ ПараметрОтчета.ТипОтбора = "В группе" ИЛИ ПараметрОтчета.ТипОтбора  = "В группе из списка" Тогда
			ЗапросДанные.УстановитьПараметр(ПараметрОтчета.ИмяОтбора,ПараметрОтчета.ЗначениеОтбора);
		КонецЕсли;		
		Если ПараметрОтчета.ТипОтбора = "Сценарий отчета" 
			Или ПараметрОтчета.ТипОтбора = "Организация отчета"
			Или ПараметрОтчета.ТипОтбора = "Проект отчета"
			Или ПараметрОтчета.ТипОтбора = "Параметр отчета" Тогда
			ЗапросДанные.УстановитьПараметр(ПараметрОтчета.ИмяОтбора,ЭтотОбъект[СтрЗаменить(ПараметрОтчета.ЗначениеОтбора,"&","")]);
		КонецЕсли;		
		Если Лев(ПараметрОтчета.ИмяОтбора,12) = "ПериодОтчета" Тогда	
			СформироватьОтборПоПериодам(ЗапросДанные,ПараметрОтчета.УидГруппыОтбора,ПараметрОтчета.ИмяОтбора);	
		КонецЕсли;		
	КонецЦикла;	
		
	мКомментарии                = ЗапросДанные.Выполнить().Выгрузить();
	мКомментарииАдрес           = ПоместитьВовременноеХранилище(мКомментарии,Новый УникальныйИдентификатор);
				
КонецПроцедуры

Функция ТекстЗапросаДанныеПараметр()
	
	Текст = 
	"ВЫБРАТЬ
	|	тзПоказатели.Показатель КАК Показатель,
	|	тзПоказатели.ПоказательКод КАК ПоказательКод,
	|	тзПоказатели.ИмяОбластиДляВывода КАК ИмяОбластиДляВывода,
	|	тзПоказатели.ВидОтчета КАК ВидОтчета
	|ПОМЕСТИТЬ тзПоказатели
	|ИЗ
	|	&тзПоказатели КАК тзПоказатели
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ %ТекстАналитик%
	|	мПоказателиРаскрытияВрем.Показатель КАК Показатель,
	|	мПоказателиРаскрытияВрем.ИмяОбластиДляВывода КАК ИмяОбластиДляВывода,
	|	мПоказателиРаскрытияВрем.УидГруппыОтборов КАК УидГруппыОтборов,
	|	мПоказателиРаскрытияВрем.ПериодОтчета КАК ПериодОтчета,
	|	мПоказателиРаскрытияВрем.Сценарий КАК Сценарий,
	|	мПоказателиРаскрытияВрем.Организация КАК Организация,
	|	мПоказателиРаскрытияВрем.Проект КАК Проект,
	|	мПоказателиРаскрытияВрем.АналитикаВалюта КАК АналитикаВалюта,
	|	мПоказателиРаскрытияВрем.Значение КАК Значение,
	|	мПоказателиРаскрытияВрем.ЗначениеВалюта КАК ЗначениеВалюта,
	|	мПоказателиРаскрытияВрем.ЗначениеНеЧисло КАК ЗначениеНеЧисло,
	|	мПоказателиРаскрытияВрем.ПоказательКод КАК ПоказательКод
	|ПОМЕСТИТЬ тмПоказателиРаскрытия
	|ИЗ
	|	&тзДанные КАК мПоказателиРаскрытияВрем";
	
	ТекстАналитик = "";
	Для Сч = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		ТекстАналитик = ТекстАналитик + "
		|	мПоказателиРаскрытияВрем.Аналитика" + Сч + " КАК Аналитика" + Сч + ",";
	КонецЦикла;
	
	Возврат СтрЗаменить(Текст,"%ТекстАналитик%", ТекстАналитик);
	
КонецФункции	

Функция ПолучитьТаблицуСинтетики(тГруппаСинтетика,МенеджерВТ)
		
	ЗапросДанные 							= Новый Запрос;
	ЗапросДанные.МенеджерВременныхТаблиц    = МенеджерВТ;
	ЗапросДанные.Текст 						= тГруппаСинтетика.ТекстЗапросаВыводаОбластей;
		
	ТзПараметров               = тГруппаСинтетика.ПараметрыЗапроса;
   	
	Для Каждого ПараметрОтчета Из ТзПараметров Цикл
		Если ПараметрОтчета.ТипОтбора = "Равно" Или ПараметрОтчета.ТипОтбора = "Не равно" ИЛИ ПараметрОтчета.ТипОтбора = "В списке" ИЛИ ПараметрОтчета.ТипОтбора = "Не в списке" ИЛИ ПараметрОтчета.ТипОтбора = "В группе" ИЛИ ПараметрОтчета.ТипОтбора  = "В группе из списка" Тогда
			ЗапросДанные.УстановитьПараметр(ПараметрОтчета.ИмяОтбора,ПараметрОтчета.ЗначениеОтбора);
		КонецЕсли;		
		Если ПараметрОтчета.ТипОтбора = "Сценарий отчета" 
			Или ПараметрОтчета.ТипОтбора = "Организация отчета"
			Или ПараметрОтчета.ТипОтбора = "Проект отчета"
			Или ПараметрОтчета.ТипОтбора = "Параметр отчета" Тогда
			ЗапросДанные.УстановитьПараметр(ПараметрОтчета.ИмяОтбора,ЭтотОбъект[СтрЗаменить(ПараметрОтчета.ЗначениеОтбора,"&","")]);
		КонецЕсли;		
		Если Лев(ПараметрОтчета.ИмяОтбора,12) = "ПериодОтчета" Тогда	
			СформироватьОтборПоПериодам(ЗапросДанные,ПараметрОтчета.УидГруппыОтбора,ПараметрОтчета.ИмяОтбора);	
		КонецЕсли;		
	КонецЦикла;	

		
	мСинтетика                	= ЗапросДанные.Выполнить().Выгрузить();
	Возврат мСинтетика;
		
КонецФункции

Процедура ВывестиТаблицуСинтетики(ПолеТабличногоДокументаМакет,тГруппаСинтетика,МенеджерВТ,ДополнительныеНастройки,мНемасштабируемые)
	
	Если Не ЗначениеЗаполнено(тГруппаСинтетика.ТекстЗапросаВыводаОбластей) Тогда
		 Возврат;
	КонецЕсли;	
	
	тСинтетика 					= ПолучитьТаблицуСинтетики(тГруппаСинтетика,МенеджерВТ);
	
	Если  тСинтетика.Количество() = 0 Тогда
		 Возврат;
	КонецЕсли;	
	
	КоличествоОдинаковыхИмен 	= ПолучитьИзВременногоХранилища(КоличествоОдинаковыхИменАдрес);	
	КэшОперандов 				= Новый Структура(Новый ФиксированнаяСтруктура(ПолучитьИзВременногоХранилища(КэшОперандовАдрес)));	
		
	Инд = 1;
		
	Для Каждого СтрЗнач Из тСинтетика Цикл	
		
		Если НЕ КоличествоОдинаковыхИмен.Свойство(СтрЗнач.ИмяОбластиДляВывода) Тогда	
			КэшОперандов.Вставить(СтрЗнач.ИмяОбластиДляВывода,СтрЗнач.Значение);	
			Продолжить;
		КонецЕсли;	
		
		ИндексИмени = КоличествоОдинаковыхИмен[СтрЗнач.ИмяОбластиДляВывода]; 
		
		Для Инд = 1 По ИндексИмени Цикл
			ОбластьДляВывода = "Ст_"+СтрЗнач.ИмяОбластиДляВывода+"_"+Формат(Инд,"ЧГ=0");
			Если  НЕ мНемасштабируемые.Свойство(СтрЗнач.ИмяОбластиДляВывода)  Тогда								
				ОбластьВыводаМакет = ПолеТабличногоДокументаМакет.Область(ОбластьДляВывода);
				ОбластьВыводаМакет.СодержитЗначение = Истина;     
				ВставитьЗначениеВОбластьТабличногоДокумента(ОбластьВыводаМакет, СтрЗнач.Значение, НастройкаФормата, ТекущаяТочность);
			Иначе				
				ОбластьВыводаМакет = ПолеТабличногоДокументаМакет.Область(ОбластьДляВывода);
				ОбластьВыводаМакет.СодержитЗначение = Истина;     
				ВставитьЗначениеВОбластьТабличногоДокумента(ОбластьВыводаМакет, СтрЗнач.Значение, НастройкаФорматаНеМасштабируется, ТекущаяТочность);				
			КонецЕсли;
			Если РежимОтклонений Тогда
				Если ТипЗнч(СтрЗнач.Значение) = Тип("Число") Тогда
					Если СтрЗнач.Значение>0 Тогда
						ПолеТабличногоДокументаМакет.Область(ОбластьДляВывода).ЦветТекста = ЦветПоложительный;
					ИначеЕсли СтрЗнач.Значение<0 Тогда
						ПолеТабличногоДокументаМакет.Область(ОбластьДляВывода).ЦветТекста = ЦветОтрицательный;
					КонецЕсли;		
				КонецЕсли;
			КонецЕсли;	
			ПолеТабличногоДокументаМакет.Область(ОбластьДляВывода).Имя = "";
		КонецЦикла;
			
		КэшОперандов.Вставить(СтрЗнач.ИмяОбластиДляВывода,СтрЗнач.Значение);		
	КонецЦикла;	
	
	тКэшИменФормул = КэшИменФормул.НайтиСтроки(Новый Структура("ТипОбластиВывода","Синтетика"));
	
	Для Каждого иОбл Из тКэшИменФормул Цикл			
		ТекОбласть = ПолеТабличногоДокументаМакет.Область(иОбл.ИмяОбласти);
		
		Если  НЕ ТекОбласть.Расшифровка = Неопределено И ТекОбласть.Расшифровка.Свойство("ТекстФормулы")  Тогда	
			СтрДляРасчета =  ТекОбласть.Расшифровка.ТекстФормулы;			
			Попытка				
				ОбластьВыводаМакет = ПолеТабличногоДокументаМакет.Область(иОбл.ИмяОбласти);
				ОбластьВыводаМакет.СодержитЗначение = Истина;     
				ВставитьЗначениеВОбластьТабличногоДокумента(ОбластьВыводаМакет, Вычислить(СтрДляРасчета), НастройкаФормата, ТекущаяТочность);
			Исключение
				ОбластьВыводаМакет = ПолеТабличногоДокументаМакет.Область(иОбл.ИмяОбласти);
				ОбластьВыводаМакет.СодержитЗначение = Истина;
				ВставитьЗначениеВОбластьТабличногоДокумента(ОбластьВыводаМакет, "#Ошибка");
			КонецПопытки;			
		КонецЕсли;	
	КонецЦикла;	

	
КонецПроцедуры	

Процедура ВывестиПараметрыБланка(ПолеТабличногоДокументаМакет)
	
	//Заполнить параметры макета синтетика
	тДоступныхПараметров = ПодготовитьТаблицуПараметров();
	ТекстСПараметром = ПолеТабличногоДокументаМакет.НайтиТекст("Параметры.");	
	Пока ТекстСПараметром<>Неопределено Цикл
		
		ТекстСПараметромТекст = ТекстСПараметром.Текст;
		ТзВыраженияПараметра =   ОбработатьСтрокуШаблонаЗаголовкаПараметра(ТекстСПараметромТекст,тДоступныхПараметров);
		Для Каждого пСтр Из ТзВыраженияПараметра Цикл
			Если пСтр.ТипОбласти = "Параметр" Тогда	
				ТекстСПараметром.Текст = СтрЗаменить(ТекстСПараметром.Текст,"[Параметры."+пСтр.ТекстОбласти+"]",пСтр.ЗначениеПараметра);	
			КонецЕсли;	
		КонецЦикла;	
		
		ТекстСПараметром.Текст = СтрЗаменить(ТекстСПараметром.Текст,"Параметры.","Пaрaметры.");
	    ТекстСПараметром = ПолеТабличногоДокументаМакет.НайтиТекст("Параметры.");	
	КонецЦикла;
		
		
КонецПроцедуры	
	
Процедура ВывестиТабличныеОбласти(ТзСтруктураВыводаГрупировокТаблиц,СтруктураМакетаСтрок,МенеджерВТ,ДополнительныеНастройки,мНемасштабируемые,ПолеТабличногоДокументаМакет)
	
	Если Не ЗначениеЗАполнено(ПериодОтчета) Тогда
		Возврат;
	КонецЕсли;	
	
	ТзСтруктураВыводаГрупировокТаблиц		= ПолучитьИзВременногоХранилища(АдресТЗСтруктурыВывода);
	
	СтруктураРасшифровкаОбластейY = ПолучитьИзВременногоХранилища(СтруктураРасшифровкаОбластейYАдрес);
	СтруктураРасшифровкаОбластейХ = ПолучитьИзВременногоХранилища(СтруктураРасшифровкаОбластейХАдрес);         
	тВыводимыхОбластей 			  = ПолучитьИзВременногоХранилища(тКэшОбластейРаскрытияАдрес);
	мНемасштабируемые             = ПолучитьИзВременногоХранилища(НемасшатбируемыеАдрес);
	
	Для Каждого ВыведеннаяСтрока Из СтруктураРасшифровкаОбластейY Цикл
		
		тТаблицы =  ТзСтруктураВыводаГрупировокТаблиц.НайтиСтроки(Новый Структура("ИмяОбластиСтроки",ВыведеннаяСтрока.Ключ));
		Для Каждого тТаблица Из тТаблицы Цикл
			
			тЗапрос  = Новый Запрос;
			тЗапрос.МенеджерВременныхТаблиц = МенеджерВТ;
			тЗапрос.Текст = тТаблица.ТекстЗапросаВыводаОбластей;
			Если СтрНайти(тЗапрос.Текст,"СЕКУНДА") Тогда
				тЗапрос.Текст = СтрЗаменить(тЗапрос.Текст,"СЕКУНДА",ПолучитьПредставлениеПериодичностиДляЗапроса());
				тЗапрос.Параметры.Вставить("Периодичность",Периодичность)
			КонецЕсли;
			
			Для Каждого ПараметрОтчета Из тТаблица.ПараметрыЗапроса Цикл		
				Если ПараметрОтчета.ТипОтбора = "Равно" Или ПараметрОтчета.ТипОтбора = "Не равно" ИЛИ ПараметрОтчета.ТипОтбора = "В списке" ИЛИ ПараметрОтчета.ТипОтбора = "Не в списке" ИЛИ ПараметрОтчета.ТипОтбора = "В группе" ИЛИ ПараметрОтчета.ТипОтбора  = "В группе из списка" Тогда
					тЗапрос.УстановитьПараметр(ПараметрОтчета.ИмяОтбора,ПараметрОтчета.ЗначениеОтбора);
				КонецЕсли;
				Если ПараметрОтчета.ТипОтбора = "Сценарий отчета" 
					Или ПараметрОтчета.ТипОтбора = "Организация отчета"
					Или ПараметрОтчета.ТипОтбора = "Проект отчета"
					Или ПараметрОтчета.ТипОтбора = "Параметр отчета" Тогда
					тЗапрос.УстановитьПараметр(ПараметрОтчета.ИмяОтбора,ЭтотОбъект[СтрЗаменить(ПараметрОтчета.ЗначениеОтбора,"&","")]);
				КонецЕсли;
				Если Лев(ПараметрОтчета.ИмяОтбора,12) = "ПериодОтчета" Тогда	
					СформироватьОтборПоПериодам(тЗапрос,Прав(ПараметрОтчета.ИмяОтбора,32),ПараметрОтчета.ИмяОтбора);
				КонецЕсли;		
			КонецЦикла;	
			
			тЗапросИтогиТабличныеОбласти 		= тЗапрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Уид_Области");
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("тТаблица",тТаблица);
			СтруктураПараметров.Вставить("ПолеТабличногоДокументаМакет",ПолеТабличногоДокументаМакет);
			СтруктураПараметров.Вставить("мНемасштабируемые",мНемасштабируемые);
			СтруктураПараметров.Вставить("ВсегоГруппировокСтрок",тТаблица.АналитикиСтрок.Количество());
			СтруктураПараметров.Вставить("ВсегоГруппировокКолонок",тТаблица.АналитикиКолонок.Количество());
			СтруктураПараметров.Вставить("СтруктураРасшифровкаОбластейY",СтруктураРасшифровкаОбластейY);
			СтруктураПараметров.Вставить("СтруктураРасшифровкаОбластейХ",СтруктураРасшифровкаОбластейХ);
			СтруктураПараметров.Вставить("НачалоОбластиY",тВыводимыхОбластей.Найти(тТаблица.ИмяОбластиСтроки,"ИмяОбластиСтрок").СдвигY);
			СтруктураПараметров.Вставить("НачалоОбластиХ",тВыводимыхОбластей.Найти(тТаблица.ИмяОбластиКолонки,"ИмяОбластиКолонок").СдвигX+1);

			Пока тЗапросИтогиТабличныеОбласти.Следующий() Цикл 
				ВывестиСтрокиТабличныхОбластей(тЗапросИтогиТабличныеОбласти,СтруктураПараметров);
			КонецЦикла;
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	
КонецПроцедуры	

Процедура ВывестиСтрокиТабличныхОбластей(Выборка,СтруктураПараметров)
				
	Если Выборка.Уровень()>СтруктураПараметров.ВсегоГруппировокСтрок-1 Тогда
		Возврат;
	КонецЕсли;	
	
	тГруппировкаСтрок = СтруктураПараметров.тТаблица.АналитикиСтрок[Выборка.Уровень()];
	РезультатИтогСтроки = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, тГруппировкаСтрок.АналитикаКод);
	
	Пока РезультатИтогСтроки.Следующий() Цикл
		
		СтруктураПоискаY = Новый Структура;
		Для Каждого тАналитика Из СтруктураПараметров.тТаблица.АналитикиСтрок Цикл 
			СтруктураПоискаY.Вставить(тАналитика.АналитикаКод,?(РезультатИтогСтроки[тАналитика.АналитикаКод]=NULL,Неопределено,РезультатИтогСтроки[тАналитика.АналитикаКод]))
		КонецЦикла;
				
		ПараметрыY 				=  СтруктураПараметров.СтруктураРасшифровкаОбластейY[СтруктураПараметров.тТаблица.ИмяОбластиСтроки].НайтиСтроки(СтруктураПоискаY);
		
		Если ПараметрыY.Количество() = 1 Тогда
			КоординатаСмещенияY_	=  ПараметрыY[0].СмещениеY;
			ИмяМакетаY_				=  Параметрыy[0].ИмяМакета;
			//Выводим колонки рекурсивно
			СтруктураПараметров.Вставить("УровеньСтроки",Выборка.Уровень()+1);
			ВывестиКолонкиТабличныхОбластей(РезультатИтогСтроки,1,КоординатаСмещенияY_,ИмяМакетаY_,СтруктураПараметров);
		КонецЕсли;
			
		ВывестиСтрокиТабличныхОбластей(РезультатИтогСтроки,СтруктураПараметров);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиКолонкиТабличныхОбластей(Выборка,ИндексГруппипровкиКолонки,КоординатаСмещенияY_,ИмяМакетаY_,СтруктураПараметров)
	
	Если  (Выборка.Уровень()-СтруктураПараметров.УровеньСтроки)>=СтруктураПараметров.тТаблица.АналитикиКолонок.Количество() Тогда
		Возврат;
	КонецЕсли;	
	
	тГруппировкаКолонок = СтруктураПараметров.тТаблица.АналитикиКолонок[Выборка.Уровень()-СтруктураПараметров.УровеньСтроки];
	РезультатИтогКолонки = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, тГруппировкаКолонок.АналитикаКод);
    мНемасштабируемые    = СтруктураПараметров.мНемасштабируемые;
	
	
	
	Пока РезультатИтогКолонки.Следующий() Цикл
		ИндексГруппипровкиКолонки = ИндексГруппипровкиКолонки+1;	
		РезультатИтог_ = РезультатИтогКолонки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, тГруппировкаКолонок.АналитикаКод);	
		СтруктураПоискаХ = Новый Структура;
		Для Каждого тАналитика Из СтруктураПараметров.тТаблица.АналитикиКолонок Цикл 
			СтруктураПоискаХ.Вставить(тАналитика.АналитикаКод,?(РезультатИтогКолонки[тАналитика.АналитикаКод]=NULL,Неопределено,РезультатИтогКолонки[тАналитика.АналитикаКод]))
		КонецЦикла;
		
		мПараметрыX 				=  СтруктураПараметров.СтруктураРасшифровкаОбластейХ[СтруктураПараметров.тТаблица.ИмяОбластиКолонки].НайтиСтроки(СтруктураПоискаХ);
		Если мПараметрыX.Количество() = 0 Тогда
			Продолжить;
		Иначе	
			ПараметрыX = мПараметрыX[0];
		КонецЕсли;	
		
		КоординатаСмещенияX_	=  ПараметрыX.СмещениеХ;
		ИмяМакетаX_				=  ПараметрыX.ИмяМакета;
		
		КоординатаСмещенияX_ = СтруктураПараметров.СтруктураРасшифровкаОбластейХ[СтруктураПараметров.тТаблица.ИмяОбластиКолонки].НайтиСтроки(СтруктураПоискаХ)[0].СмещениеХ;		
		тСмещениеПоказателей = СтруктураПараметров.тТаблица.ОписаниеСмещенияПоказателй.НайтиСтроки(Новый Структура("ОбластьСтрок,ОбластьКолонок",ИмяМакетаY_,ИмяМакетаX_))[0];
		
		КэшОперандов 		 =  Новый Структура(Новый ФиксированнаяСтруктура(ПолучитьИзВременногоХранилища(КэшОперандовАдрес)));
		
		//Вывод показателй
		Для Каждого СтрПок Из тСмещениеПоказателей.СмещениеПоказателейX Цикл
			
			КоординатаСмещенияПоказателяX =  СтрПок.Значение;
			
			Если тСмещениеПоказателей.СмещениеПоказателейY.Свойство(СтрПок.Ключ)  Тогда 
				
				КоординатаСмещенияПоказателяY = тСмещениеПоказателей.СмещениеПоказателейY[СтрПок.Ключ];
				
				Если ЗначениеЗаполнено(РезультатИтогКолонки[СтрПок.Ключ]) Тогда
					
					Если КоординатаСмещенияX_ = Неопределено ИЛИ КоординатаСмещенияY_ = Неопределено Тогда
						 Продолжить;
					КонецЕсли;	
					
					КоординатаX = СтруктураПараметров.НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX;
					КоординатаY = СтруктураПараметров.НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY;
					
					Если  НЕ мНемасштабируемые.Свойство(СтрПок.Ключ)  Тогда						
						ЯчейкаРедактирования = СтруктураПараметров.ПолеТабличногоДокументаМакет.Область(КоординатаY,КоординатаX,КоординатаY,КоординатаX);
						ВставитьЗначениеВОбластьТабличногоДокумента(ЯчейкаРедактирования, РезультатИтогКолонки[СтрПок.Ключ], НастройкаФормата, ТекущаяТочность);						
					Иначе						
						ЯчейкаРедактирования = СтруктураПараметров.ПолеТабличногоДокументаМакет.Область(КоординатаY,КоординатаX,КоординатаY,КоординатаX);
						ВставитьЗначениеВОбластьТабличногоДокумента(ЯчейкаРедактирования, РезультатИтогКолонки[СтрПок.Ключ], НастройкаФорматаНеМасштабируется, ТекущаяТочность);						
					КонецЕсли;
					
					Если РежимОтклонений Тогда
						Если НЕ РезультатИтогКолонки[СтрПок.Ключ] = "X" Тогда	
							Если РезультатИтогКолонки[СтрПок.Ключ]>0 Тогда
								СтруктураПараметров.ПолеТабличногоДокументаМакет.Область(КоординатаY,КоординатаX,КоординатаY,КоординатаX).ЦветТекста = ЦветПоложительный;
							ИначеЕсли РезультатИтогКолонки[СтрПок.Ключ]<0 Тогда
								СтруктураПараметров.ПолеТабличногоДокументаМакет.Область(КоординатаY,КоординатаX,КоординатаY,КоординатаX).ЦветТекста = ЦветОтрицательный;
							КонецЕсли;		
						КонецЕсли;
					КонецЕсли;	
					
					КэшОперандов.Вставить(СтрПок.Ключ,?(РезультатИтогКолонки[СтрПок.Ключ]=Null,0,РезультатИтогКолонки[СтрПок.Ключ]));
					
				КонецЕсли;
				
			Иначе		
				 Если ЗначениеЗаполнено(РезультатИтогКолонки[СтрПок.Ключ]) Тогда
					 КэшОперандов.Вставить(СтрПок.Ключ,?(РезультатИтогКолонки[СтрПок.Ключ]=Null,0,РезультатИтогКолонки[СтрПок.Ключ]));
				 КонецЕсли;		
			КонецЕсли;
			
		КонецЦикла;
		
		//Вывод формул
		Если тСмещениеПоказателей.ЕстьФормулы Тогда
			
			Для Каждого СтрФормула Из тСмещениеПоказателей.РасшифровкаФормул Цикл
				
				КоординатаСмещенияФормулыX =  тСмещениеПоказателей.СмещениеФормулX[СтрФормула.Ключ];
				КоординатаСмещенияФормулыY =  тСмещениеПоказателей.СмещениеФормулY[СтрФормула.Ключ];
				
				Если КоординатаСмещенияX_ = Неопределено ИЛИ КоординатаСмещенияY_ = Неопределено Тогда
					Продолжить;
				КонецЕсли;	
				
				КоординатаX = СтруктураПараметров.НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияФормулыX;
				КоординатаY = СтруктураПараметров.НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияФормулыY;
				
				Попытка					
					ЯчейкаРедактирования = СтруктураПараметров.ПолеТабличногоДокументаМакет.Область(КоординатаY,КоординатаX,КоординатаY,КоординатаX);
					ВставитьЗначениеВОбластьТабличногоДокумента(ЯчейкаРедактирования, Вычислить(СтрФормула.Значение), НастройкаФормата, ТекущаяТочность);					
				Исключение
					ЯчейкаРедактирования = СтруктураПараметров.ПолеТабличногоДокументаМакет.Область(КоординатаY,КоординатаX,КоординатаY,КоординатаX);
					ВставитьЗначениеВОбластьТабличногоДокумента(ЯчейкаРедактирования, "#Ошибка");					
				КонецПопытки;	
				
			КонецЦикла;		
		  	
		КонецЕсли;	
		
		ВывестиКолонкиТабличныхОбластей(РезультатИтогКолонки,ИндексГруппипровкиКолонки,КоординатаСмещенияY_,ИмяМакетаY_,СтруктураПараметров);	
		
	КонецЦикла;

	
КонецПроцедуры

Процедура ВывестиВертикальныеОбласти(ТзСтруктураВыводаГрупировокКолонок,МакетКолонок,МенеджерВТ,ДополнительныеНастройки,СтруктураМакетаКолонок,мНемасштабируемые);

	Если Не ЗначениеЗАполнено(ПериодОтчета) Тогда
		 Возврат;
	КонецЕсли;	
		
	тПараметрыВыводаКолонок            		= ПолучитьИзВременногоХранилища(АдресПараметровВыводаКолонок);
	
	СтруктураРасшифровкаОбластейХ   = Новый Структура;
	
	ДеревоВертикальныеОбласти = неопределено;
	УидОбласти = "";
	СтруктураПоискаСтрок = Новый Структура;
	ИмяОбластиПредыдущее = "";
	УидОбластиПредыдущий = "";
		
	Для Каждого Стр Из ТзСтруктураВыводаГрупировокКолонок Цикл
		
		Если Стр.ИндексЗапросаПакета = Неопределено Тогда
			 Продолжить;
		КонецЕсли;	                                                      
		
		тЗапрос  = Новый Запрос;
		тЗапрос.МенеджерВременныхТаблиц = МенеджерВТ;
		
		тЗапрос.Текст = Стр.ТекстЗапросаВыводаОбластей;
		тЗапрос.Текст = СтрЗаменить(тЗапрос.Текст,"СЕКУНДА",ПолучитьПредставлениеПериодичностиДляЗапроса());

		ПозицияСлова = 1;
		ДлинаЗапроса = СтрДлина(тЗапрос.Текст);
		
		Пока ПозицияСлова > 0 И ПозицияСлова < ДлинаЗапроса Цикл
			
			ПозицияСлова = Мин(СтрНайти(тЗапрос.Текст, "тМакетРаскрытия_Раскрытие_", НаправлениеПоиска.СНачала, ПозицияСлова), ДлинаЗапроса);
			
			Если ПозицияСлова > 0 И ПозицияСлова < ДлинаЗапроса тогда
				ПозицияПробелаПосле = СтрНайти(тЗапрос.Текст, " ", НаправлениеПоиска.СНачала, ПозицияСлова);
				ПозицияПереводаСтрокиПосле = СтрНайти(тЗапрос.Текст, Символы.ПС, НаправлениеПоиска.СНачала, ПозицияСлова);
				ПозицияТабуляцииПосле = СтрНайти(тЗапрос.Текст, Символы.Таб, НаправлениеПоиска.СНачала, ПозицияСлова);
				ПозицияВозвратаКареткиПосле = СтрНайти(тЗапрос.Текст, Символы.ВК, НаправлениеПоиска.СНачала, ПозицияСлова);
				ПозицияВертикальнойТабуляцииПосле = СтрНайти(тЗапрос.Текст, Символы.ВТаб, НаправлениеПоиска.СНачала, ПозицияСлова);
				ПозицияНеразрывногоПробелаПосле = СтрНайти(тЗапрос.Текст, Символы.НПП, НаправлениеПоиска.СНачала, ПозицияСлова);
				ПозицияПереводаФормыПосле = СтрНайти(тЗапрос.Текст, Символы.ПФ, НаправлениеПоиска.СНачала, ПозицияСлова);
				
				ПозицияСлужебногоСимвола = Мин(
					?(ПозицияПробелаПосле = 0, ДлинаЗапроса, ПозицияПробелаПосле), 
					?(ПозицияПереводаСтрокиПосле = 0, ДлинаЗапроса, ПозицияПереводаСтрокиПосле), 
					?(ПозицияТабуляцииПосле = 0, ДлинаЗапроса, ПозицияТабуляцииПосле), 
					?(ПозицияВозвратаКареткиПосле = 0, ДлинаЗапроса, ПозицияВозвратаКареткиПосле), 
					?(ПозицияВертикальнойТабуляцииПосле = 0, ДлинаЗапроса, ПозицияВертикальнойТабуляцииПосле), 
					?(ПозицияНеразрывногоПробелаПосле = 0, ДлинаЗапроса, ПозицияНеразрывногоПробелаПосле), 
					?(ПозицияПереводаФормыПосле = 0, ДлинаЗапроса, ПозицияПереводаФормыПосле));
				
				ИмяВТ = Сред(тЗапрос.Текст, ПозицияСлова, ПозицияСлужебногоСимвола - ПозицияСлова);
				ПозицияСлова = Мин(ПозицияСлужебногоСимвола + 1, ДлинаЗапроса);
				
				Если СтрНайти(тЗапрос.Текст, ИмяВТ) > 0 
					И СтрНайти(тЗапрос.Текст, "УНИЧТОЖИТЬ " + ИмяВТ) = 0 тогда
					
					тЗапрос.Текст = тЗапрос.Текст + "
		|;
		|/////////////////////////////////////////////////////////////
		|
		|УНИЧТОЖИТЬ " + ИмяВТ;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
				
		Для Каждого ПараметрОтчета Из Стр.ПараметрыЗапроса Цикл		
			Если ПараметрОтчета.ТипОтбора = "Равно" Или ПараметрОтчета.ТипОтбора = "Не равно" ИЛИ ПараметрОтчета.ТипОтбора = "В списке" ИЛИ ПараметрОтчета.ТипОтбора = "Не в списке" ИЛИ ПараметрОтчета.ТипОтбора = "В группе" ИЛИ ПараметрОтчета.ТипОтбора  = "В группе из списка" Тогда
				тЗапрос.УстановитьПараметр(ПараметрОтчета.ИмяОтбора,ПараметрОтчета.ЗначениеОтбора);
			КонецЕсли;
			Если ПараметрОтчета.ТипОтбора = "Сценарий отчета" 
				Или ПараметрОтчета.ТипОтбора = "Организация отчета"
				Или ПараметрОтчета.ТипОтбора = "Проект отчета"
				Или ПараметрОтчета.ТипОтбора = "Параметр отчета" Тогда
				тЗапрос.УстановитьПараметр(ПараметрОтчета.ИмяОтбора,ЭтотОбъект[СтрЗаменить(ПараметрОтчета.ЗначениеОтбора,"&","")]);
			КонецЕсли;
			Если Лев(ПараметрОтчета.ИмяОтбора,12) = "ПериодОтчета" Тогда	
				СформироватьОтборПоПериодам(тЗапрос,Прав(ПараметрОтчета.УидГруппыОтбора,32),ПараметрОтчета.ИмяОтбора);
			КонецЕсли;							
			
		КонецЦикла;	
		
		тВертикальныеОбласти = тЗапрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
				
		Если УидОбласти <> Стр.УидОбласти тогда
			
			УидОбласти = Стр.УидОбласти;
			
			Если ДеревоВертикальныеОбласти <> неопределено тогда
				
				мУровеньДетальныхЗаписей = Неопределено;
				ПолучитьУровеньДетальныхЗаписейДерева(ДеревоВертикальныеОбласти, мУровеньДетальныхЗаписей);
				СтруктураУровнейМакетов = ПолучитьСтруктуруУровнейМакетов(Стр, ТзСтруктураВыводаГрупировокКолонок);
				
				тПараметрыОбласти                       = тПараметрыВыводаКолонок.НайтиСтроки(Новый Структура("ИмяМакета", ИмяОбластиПредыдущее));
				
				ТзРасшифровокОбластей                   = Новый ТаблицаЗначений;		
				ТекГруппировки = ТзСтруктураВыводаГрупировокКолонок.НайтиСтроки(Новый Структура("УидОбласти", УидОбластиПредыдущий));
				Для Каждого сУровень Из ТекГруппировки Цикл
					Для Каждого сГруппировка Из сУровень.Группировки Цикл
						Если ТзРасшифровокОбластей.Колонки.Найти(сГруппировка.Ключ) = Неопределено Тогда
							ТзРасшифровокОбластей.Колонки.Добавить(сГруппировка.Ключ);
						КонецЕсли;	
					КонецЦикла;
				КонецЦикла;
				
				ТзРасшифровокОбластей.Колонки.Добавить("СмещениеХ");
				ТзРасшифровокОбластей.Колонки.Добавить("ИмяМакета");
				ТзРасшифровокОбластей.Колонки.Добавить("ЭтоГруппа",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
				
				ИспользованныеГруппировки = Новый Структура;
				
				ИндексОбласти = 1;
				
				тМакетКолонок = Новый ТабличныйДокумент;
				
				ВывестиВертикальныеОбластиРекурсивно(СтруктураУровнейМакетов, мУровеньДетальныхЗаписей, -1, ДеревоВертикальныеОбласти,
				ТзСтруктураВыводаГрупировокКолонок, тПараметрыВыводаКолонок, тМакетКолонок, МакетКолонок,, ТзРасшифровокОбластей,
				ИспользованныеГруппировки, ИндексОбласти, мНемасштабируемые);
				
				СтруктураМакетаКолонок.Вставить(ИмяОбластиПредыдущее, тМакетКолонок);
				СтруктураРасшифровкаОбластейХ.Вставить(ИмяОбластиПредыдущее, ТзРасшифровокОбластей);
								
			КонецЕсли;
			
			ДеревоВертикальныеОбласти = тВертикальныеОбласти.Скопировать();
						
		Иначе
			
			СтруктураПоискаСтрок.Очистить();
			
			Для Каждого КолонкаВертикальнойОбласти Из тВертикальныеОбласти.Колонки Цикл
									
				Если Не КолонкаВертикальнойОбласти.ТипЗначения.СодержитТип(Тип("Число")) тогда
					СтруктураПоискаСтрок.Вставить(КолонкаВертикальнойОбласти.Имя);
					
					Продолжить;
				КонецЕсли;
				
				Если ДеревоВертикальныеОбласти.Колонки.Найти(КолонкаВертикальнойОбласти.Имя) = неопределено тогда
					
					НоваяКолонкаВертикальнойОбласти = ДеревоВертикальныеОбласти.Колонки.Добавить(КолонкаВертикальнойОбласти.Имя, КолонкаВертикальнойОбласти.ТипЗначения, 
						КолонкаВертикальнойОбласти.Заголовок, КолонкаВертикальнойОбласти.Ширина);
						
				КонецЕсли;
				
			КонецЦикла;
			
			СкопироватьСтрокиРекурсивно(ДеревоВертикальныеОбласти, тВертикальныеОбласти, СтруктураПоискаСтрок);
							
		КонецЕсли;
		
		ИмяОбластиПредыдущее = Стр.ИмяОбласти;
		УидОбластиПредыдущий = Стр.УидОбласти;
		
	КонецЦикла;
		
	Если ДеревоВертикальныеОбласти <> неопределено тогда
		
		мУровеньДетальныхЗаписей = Неопределено;
		ПолучитьУровеньДетальныхЗаписейДерева(ДеревоВертикальныеОбласти, мУровеньДетальныхЗаписей);
		СтруктураУровнейМакетов = ПолучитьСтруктуруУровнейМакетов(Стр, ТзСтруктураВыводаГрупировокКолонок);
		
		тПараметрыОбласти                       = тПараметрыВыводаКолонок.НайтиСтроки(Новый Структура("ИмяМакета", ИмяОбластиПредыдущее));
		
		ТзРасшифровокОбластей                   = Новый ТаблицаЗначений;		
		ТекГруппировки = ТзСтруктураВыводаГрупировокКолонок.НайтиСтроки(Новый Структура("УидОбласти", УидОбластиПредыдущий));
		Для Каждого сУровень Из ТекГруппировки Цикл
			Для Каждого сГруппировка Из сУровень.Группировки Цикл
				Если ТзРасшифровокОбластей.Колонки.Найти(сГруппировка.Ключ) = Неопределено Тогда
					ТзРасшифровокОбластей.Колонки.Добавить(сГруппировка.Ключ);
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
		
		ТзРасшифровокОбластей.Колонки.Добавить("СмещениеХ");
		ТзРасшифровокОбластей.Колонки.Добавить("ИмяМакета");
		ТзРасшифровокОбластей.Колонки.Добавить("ЭтоГруппа",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());

		ИспользованныеГруппировки = Новый Структура;
		
		ИндексОбласти = 1;
		
		тМакетКолонок = Новый ТабличныйДокумент;
		
		ВывестиВертикальныеОбластиРекурсивно(СтруктураУровнейМакетов, мУровеньДетальныхЗаписей, -1, ДеревоВертикальныеОбласти,
		ТзСтруктураВыводаГрупировокКолонок, тПараметрыВыводаКолонок, тМакетКолонок, МакетКолонок,, ТзРасшифровокОбластей,
		ИспользованныеГруппировки, ИндексОбласти, мНемасштабируемые);
		
		СтруктураМакетаКолонок.Вставить(ИмяОбластиПредыдущее,тМакетКолонок);
		СтруктураРасшифровкаОбластейХ.Вставить(ИмяОбластиПредыдущее,ТзРасшифровокОбластей);
		
	КонецЕсли;
	
	СтруктураРасшифровкаОбластейХАдрес = ПоместитьВоВременноеХранилище(СтруктураРасшифровкаОбластейХ, Новый УникальныйИдентификатор);
	
КонецПроцедуры

Процедура СкопироватьСтрокиРекурсивно(Приемник, Источник, СтруктураПоиска)
	
	Для Каждого СтрокаГруппировка0Источник Из Источник.Строки Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаГруппировка0Источник);
		НайденныеСтроки = Приемник.Строки.НайтиСтроки(СтруктураПоиска, Ложь);
		
		Если НайденныеСтроки.Количество() = 0 тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаГруппировка0Приемник = НайденныеСтроки[0];
		ЗаполнитьЗначенияСвойств(СтрокаГруппировка0Приемник, СтрокаГруппировка0Источник);
		
		СкопироватьСтрокиРекурсивно(СтрокаГруппировка0Приемник, СтрокаГруппировка0Источник, СтруктураПоиска);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиВертикальныеОбластиРекурсивно(СтруктураУровнейМакетов,УровеньДетальныхЗаписей,ИндексГруппировки,тГруппировки,ТзСтруктураВыводаГрупировокКолонок,тПараметрыВыводаКолонок,тМакетКолонок,ТекМакет = Неопределено,тПараметрыОбласти=Неопределено,ТзРасшифровокОбластей,ИспользованныеГруппировки,ИндексОбласти,мНемасштабируемые)
	
	Для Каждого СтрГруппировка Из тГруппировки.Строки Цикл
		
		//Заголовочная область
		Если СтрГруппировка.Уровень() = 0 Тогда
				
		ИначеЕсли СтрГруппировка.Уровень() < УровеньДетальныхЗаписей Тогда
			
			Если ТекМакет = Неопределено  Тогда  //Переход на новый уровень макета	
						
				ТекСтрока = ТзСтруктураВыводаГрупировокКолонок.НайтиСтроки(Новый Структура("УидОбласти,Уровень",СтрГруппировка.Уид_Области,СтруктураУровнейМакетов[СтрГруппировка.Уровень()-1]))[0];		
				
				ТекМакет  = Новый ТабличныйДокумент;
				ТекМакет.Вывести(ТекСтрока.Макет);
				
				КоличествоОдинаковыхИмен  	=  ТекСтрока.КоличествоОдинаковыхИмен;
				КэшОперандов 				=  Новый Структура(Новый ФиксированнаяСтруктура(ПолучитьИзВременногоХранилища(КэшОперандовАдрес)));
				
				
				тПараметрыОбласти           = тПараметрыВыводаКолонок.НайтиСтроки(Новый Структура("ИмяМакета",ТекСтрока.ИмяОбласти));
				
				Для Каждого тПолеГруппировки Из ТекСтрока.Группировки Цикл
					ИспользованныеГруппировки.Вставить(тПолеГруппировки.Ключ);
				КонецЦикла;
				
			Иначе			
				ТекМакет 		= ТекСтрока.Макет.ПолучитьОбласть();
				КэшОперандов 	=  Новый Структура(Новый ФиксированнаяСтруктура(ПолучитьИзВременногоХранилища(КэшОперандовАдрес)));
			КонецЕсли;
			
			ЕстьЗаполненнаяАналитика = ИСТИНА;
						
			Для Каждого СтрПараметр Из тПараметрыОбласти Цикл
				Для Каждого СтрПараметрМассив Из СтрПараметр.ИмяОбластиВмакете Цикл
					тОбластьПараметр  			= ТекМакет.Область(СтрПараметрМассив);			
					тОбластьПараметрТекст       = тОбластьПараметр.Текст;
					тОбластьПараметр.СодержитЗначение = Истина;					
					Попытка
						Если СтрПараметр.ВыражениеПоля = "" Тогда						
							тОбластьПараметр.Значение      =  СтрЗаменить(тОбластьПараметрТекст,"["+СтрПараметр.ИмяВмакете+"]",СтрГруппировка[СтрПараметр.ИмяПоляВзапросе]);
						Иначе	
							тОбластьПараметр.Значение      =  СтрЗаменить(тОбластьПараметрТекст,"["+СтрПараметр.ИмяВмакете+"]",СтрГруппировка[СтрПараметр.ИмяПоляВзапросе]);
						КонецЕсли;		
					Исключение
					КонецПопытки;
				КонецЦикла;	                         	
			КонецЦикла;	
	                                              
			СтруктураРасшифровки = Новый Структура;
					
			Для Каждого тПолеГруппировки Из ИспользованныеГруппировки Цикл
				СтруктураРасшифровки.Вставить(тПолеГруппировки.Ключ,?(СтрГруппировка[тПолеГруппировки.Ключ]=NULL,НЕОПРЕДЕЛЕНО,СтрГруппировка[тПолеГруппировки.Ключ]));					
			КонецЦикла;
			
			Если  ТзРасшифровокОбластей.НайтиСтроки(СтруктураРасшифровки).Количество()>0 Тогда
				Продолжить;
			КонецЕсли;	

			нСтрРасшифровки  			= ТзРасшифровокОбластей.Добавить();
			нСтрРасшифровки.ИмяМакета   = ТекСтрока.ИмяОбласти;			
			
			Для Каждого тПолеГруппировки Из ИспользованныеГруппировки Цикл
				нСтрРасшифровки[тПолеГруппировки.Ключ] = ?(СтрГруппировка[тПолеГруппировки.Ключ]=NULL,НЕОПРЕДЕЛЕНО,СтрГруппировка[тПолеГруппировки.Ключ]); 										
			КонецЦикла;

			
			Для Каждого тПолеГруппировки Из ТекСтрока.Группировки Цикл
				Если СтрГруппировка[тПолеГруппировки.Ключ] = Null Тогда	
					ЕстьЗаполненнаяАналитика = Ложь;
					Прервать;				
				КонецЕсли;
			КонецЦикла;
			
			ВывестиДетальныеПоказателиВертикальнойОбласти(СтрГруппировка,ТекМакет,КоличествоОдинаковыхИмен,КэшОперандов,мНемасштабируемые);
			
			Для Х = 1 По ТекМакет.ШиринаТаблицы Цикл
				ТекМакет.Область(2,Х,2,Х).Расшифровка = СтруктураРасшифровки;
			КонецЦикла;	
			
			Если ЕстьЗаполненнаяАналитика И НЕ СтрГруппировка.Строки.Количество() = 0 Тогда
				тМакетКолонок.Присоединить(ТекМакет);
				нСтрРасшифровки.СмещениеХ  = тМакетКолонок.ШиринаТаблицы - ТекМакет.ШиринаТаблицы;
				ИндексОбласти = ИндексОбласти+ТекМакет.ШиринаТаблицы;
			КонецЕсли;  
					
		КонецЕсли;	
		 
		ВывестиВертикальныеОбластиРекурсивно(СтруктураУровнейМакетов,УровеньДетальныхЗаписей,ИндексГруппировки,СтрГруппировка,ТзСтруктураВыводаГрупировокКолонок,тПараметрыВыводаКолонок,тМакетКолонок,,,ТзРасшифровокОбластей,ИспользованныеГруппировки,ИндексОбласти,мНемасштабируемые);
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ВывестиДетальныеПоказателиВертикальнойОбласти(СтрГруппировка,ТекМакет,КоличествоОдинаковыхИмен,КэшОперандов,мНемасштабируемые)
	
	Для Каждого СтрРесурс Из КоличествоОдинаковыхИмен Цикл
		
		ИндексИмени = СтрРесурс.Значение; 
		
		Для Инд = 1 По ИндексИмени Цикл
			ОбластьДляВывода = СтрРесурс.Ключ+"_"+Формат(Инд,"ЧГ=0");
						
			Если ТекМакет.Область(ОбластьДляВывода).СодержитЗначение тогда
				Если  НЕ мНемасштабируемые.Свойство(ОбластьДляВывода) Тогда
					ОбластьРедактирования = ТекМакет.Область(ОбластьДляВывода);
					ВставитьЗначениеВОбластьТабличногоДокумента(ОбластьРедактирования, ?(СтрГруппировка[СтрРесурс.Ключ]=Null, ТекМакет.Область(ОбластьДляВывода).Значение, СтрГруппировка[СтрРесурс.Ключ]), НастройкаФормата, ТекущаяТочность);
				Иначе
					ОбластьРедактирования = ТекМакет.Область(ОбластьДляВывода);
					ВставитьЗначениеВОбластьТабличногоДокумента(ОбластьРедактирования, ?(СтрГруппировка[СтрРесурс.Ключ]=Null, ТекМакет.Область(ОбластьДляВывода).Значение, СтрГруппировка[СтрРесурс.Ключ]), НастройкаФорматаНеМасштабируется, ТекущаяТочность);
				КонецЕсли;
			Иначе
				Если  НЕ мНемасштабируемые.Свойство(ОбластьДляВывода) Тогда
					ОбластьРедактирования = ТекМакет.Область(ОбластьДляВывода);
					ВставитьЗначениеВОбластьТабличногоДокумента(ОбластьРедактирования, ?(СтрГруппировка[СтрРесурс.Ключ]=Null, ТекМакет.Область(ОбластьДляВывода).Текст, СтрГруппировка[СтрРесурс.Ключ]), НастройкаФормата, ТекущаяТочность);
				Иначе
					ОбластьРедактирования = ТекМакет.Область(ОбластьДляВывода);
					ВставитьЗначениеВОбластьТабличногоДокумента(ОбластьРедактирования, ?(СтрГруппировка[СтрРесурс.Ключ]=Null, ТекМакет.Область(ОбластьДляВывода).Текст, СтрГруппировка[СтрРесурс.Ключ]), НастройкаФорматаНеМасштабируется, ТекущаяТочность);
				КонецЕсли;
			КонецЕсли;
						
			Если РежимОтклонений Тогда	
				ТекЗначение = ?(СтрГруппировка[СтрРесурс.Ключ]=Null,0,СтрГруппировка[СтрРесурс.Ключ]);
				Если НЕ ТекЗначение = "X" Тогда
					Если ТекЗначение>0 Тогда
						ТекМакет.Область(ОбластьДляВывода).ЦветТекста = ЦветПоложительный;
					ИначеЕсли ТекЗначение<0 Тогда
						ТекМакет.Область(ОбластьДляВывода).ЦветТекста = ЦветОтрицательный;
					КонецЕсли;		
				КонецЕсли;		
			КонецЕсли;
			ТекМакет.Область(ОбластьДляВывода).Имя = "";	
		КонецЦикла;		
		КэшОперандов.Вставить(СтрРесурс.Ключ,?(СтрГруппировка[СтрРесурс.Ключ]=Null,0,СтрГруппировка[СтрРесурс.Ключ]));
		
	КонецЦикла;	
		
	//Формулы
	Если   КэшИменФормул.Количество() > 0 Тогда
		тКэшИменФормул = КэшИменФормул.НайтиСтроки(Новый Структура("ТипОбластиВывода,ИмяОбластиВывода","Колонки",СтрГруппировка.Уид_Области));
		Для Каждого иОбл Из тКэшИменФормул Цикл			
			ТекОбласть = ТекМакет.Области.Найти(иОбл.ИмяОбласти);	
			Если ТекОбласть = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			Если  НЕ ТекОбласть.Расшифровка = Неопределено И ТекОбласть.Расшифровка.Свойство("ТекстФормулы")  Тогда	
				СтрДляРасчета =  ТекОбласть.Расшифровка.ТекстФормулы;			
				Попытка
					ВставитьЗначениеВОбластьТабличногоДокумента(ТекОбласть, Вычислить(СтрДляРасчета), НастройкаФормата, ТекущаяТочность);
				Исключение
					ВставитьЗначениеВОбластьТабличногоДокумента(ТекОбласть, "#Ошибка");
				КонецПопытки;			
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	
КонецПроцедуры	

Функция ПолучитьСтруктуруУровнейМакетов(Стр,ТзСтруктураВыводаГрупировокКолонок)
	
	СтруктураУровнейМакетов = Новый Массив;
	
	тГруппировки =  ТзСтруктураВыводаГрупировокКолонок.НайтиСтроки(Новый Структура("УидОбласти",Стр.УидОбласти));
	
	УровеньВИерархии = 1;
	
	Для Каждого СтрУровень Из тГруппировки Цикл	
		
		Для Каждого Группировка Из СтрУровень.Группировки Цикл		
			СтруктураУровнейМакетов.Добавить(УровеньВИерархии);				
		КонецЦикла;			
		
		УровеньВИерархии = УровеньВИерархии+1;
		
	КонецЦикла;	
	
	Возврат СтруктураУровнейМакетов;
	
КонецФункции	

Функция ПолучитьТзУровнейМакетов(Стр,ТзСтруктураВыводаГрупировокКолонок)
	
	ТаблицаУровнейМакетов = Новый ТаблицаЗначений;
	ТаблицаУровнейМакетов.Колонки.Добавить("ПолеГруппировки");
	ТаблицаУровнейМакетов.Колонки.Добавить("ИндексМакета");
	ТаблицаУровнейМакетов.Колонки.Добавить("Выводить",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	тГруппировки =  ТзСтруктураВыводаГрупировокКолонок.НайтиСтроки(Новый Структура("УидОбласти",Стр.УидОбласти));
	
	УровеньВИерархии = 1;
	
	Для Каждого СтрУровень Из тГруппировки Цикл	
		
		Для Каждого Группировка Из СтрУровень.Группировки Цикл		
			нСтр = ТаблицаУровнейМакетов.Добавить();
			нСтр.ПолеГруппировки = Группировка.Ключ;				
			нСтр.ИндексМакета	 = УровеньВИерархии;
		КонецЦикла;			
		
		нСтр.Выводить = Истина;
		
		УровеньВИерархии = УровеньВИерархии+1;
		
	КонецЦикла;	
	
	Возврат ТаблицаУровнейМакетов;
	
КонецФункции	

Процедура ПолучитьУровеньДетальныхЗаписейДерева(тСтрока,МаксУровень)
	
	Для Каждого Строка Из тСтрока.Строки Цикл
		
		Если ЗначениеЗаполнено(МаксУровень) Тогда
			 Возврат;
		КонецЕсли;	
		
		Если Строка.Строки.Количество() = 0 Тогда
			 МаксУровень = Строка.Уровень();
			 Возврат;	 
		Иначе	 		
			ПолучитьУровеньДетальныхЗаписейДерева(Строка,МаксУровень)		
		КонецЕсли;	
		
	КонецЦикла;	
	
		
КонецПроцедуры	

///ОБЛАСТЬ ВЫВОДА КОЛОНОК ЧЕРЕЗ СКД

Процедура ВывестиВертикальныеОбластиСКД(ТзСтруктураВыводаГрупировокКолонок,МакетКолонок,МенеджерВТ,ДополнительныеНастройки,СтруктураМакетаКолонок,мНемасштабируемые,СтруктураОформления);

	Если Не ЗначениеЗАполнено(ПериодОтчета) Тогда
		 Возврат;
	КонецЕсли;	
		
	тПараметрыВыводаКолонок            		= ПолучитьИзВременногоХранилища(АдресПараметровВыводаКолонок);
	
	СтруктураРасшифровкаОбластейХ   = Новый Структура;
	
	ДеревоВертикальныеОбласти = неопределено;
	УидОбласти = "";
	СтруктураПоискаСтрок = Новый Структура;
	ИмяОбластиПредыдущее = "";
	УидОбластиПредыдущий = "";
	
	тСвойстваИменРесурсовКолонок  		= ПолучитьИзВременногоХранилища(ТзПоказателейОбластейКолонкиАдрес);
	тСвойстваПоказателей 				= ПолучитьИзВременногоХранилища(ТзСвойстваПоказателейАдрес);

	Для Каждого Стр Из ТзСтруктураВыводаГрупировокКолонок Цикл
				
		Если Стр.ИндексЗапросаПакета = Неопределено Тогда
			 Продолжить;
		КонецЕсли;	                                                      
		
		СтрокаИндексов = "";
		ТаблицаУровнейМакетов 					= ПолучитьТзУровнейМакетов(Стр,ТзСтруктураВыводаГрупировокКолонок);
		тПараметрыОбласти                       = тПараметрыВыводаКолонок.НайтиСтроки(Новый Структура("ИмяМакета",Стр.ИмяОбласти));	
		ТзРасшифровокОбластей                   = Новый ТаблицаЗначений;	
		ТекГруппировки 							= ТзСтруктураВыводаГрупировокКолонок.НайтиСтроки(Новый Структура("УидОбласти",Стр.УидОбласти));
        тМакетКолонок 							= Новый ТабличныйДокумент;
		тЗапрос 								= Новый Запрос;
		//Прочитаем настройки вывода иерархии периодов, если есть
		ТекущиеПериодыДляОтбора = Неопределено;
		Если ЗначениеЗаполнено(Стр.КэшНастроекПериодов) Тогда
			 ТекущиеПериодыДляОтбора = ПолучитьПериоды(Стр.КэшНастроекПериодов[0]);
		КонецЕсли;	
		
		//Определим нужные индексы
		Для Каждого сУровень Из ТекГруппировки Цикл
			Для Каждого сГруппировка Из сУровень.Группировки Цикл
				Если ТзРасшифровокОбластей.Колонки.Найти(сГруппировка.Ключ) = Неопределено Тогда
					ТзРасшифровокОбластей.Колонки.Добавить(сГруппировка.Ключ);
					СтрокаИндексов = СтрокаИндексов+сГруппировка.Ключ+",";
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
		
		ТзРасшифровокОбластей.Колонки.Добавить("СмещениеХ");
		ТзРасшифровокОбластей.Колонки.Добавить("ИмяМакета");
		ТзРасшифровокОбластей.Колонки.Добавить("ЭтоГруппа",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		
		СтрокаИндексов = ЛЕВ(СтрокаИндексов,СтрДлина(СтрокаИндексов)-1);
		
		Стр.СКДДляВыводаОбласти.НаборыДанных.ОсновнойНабор.Запрос  = СтрЗаменить(Стр.СКДДляВыводаОбласти.НаборыДанных.ОсновнойНабор.Запрос ,"СЕКУНДА",ПолучитьПредставлениеПериодичностиДляЗапроса());

		ПозицияСлова = 1;
		ДлинаЗапроса = СтрДлина(тЗапрос.Текст);
						
		Для Каждого ПараметрОтчета Из Стр.ПараметрыЗапроса Цикл		
			Если ПараметрОтчета.ТипОтбора = "Равно" Или ПараметрОтчета.ТипОтбора = "Не равно" ИЛИ ПараметрОтчета.ТипОтбора = "В списке" ИЛИ ПараметрОтчета.ТипОтбора = "Не в списке" ИЛИ ПараметрОтчета.ТипОтбора = "В группе" ИЛИ ПараметрОтчета.ТипОтбора  = "В группе из списка" Тогда
				тЗапрос.УстановитьПараметр(ПараметрОтчета.ИмяОтбора,ПараметрОтчета.ЗначениеОтбора);
			КонецЕсли;
			Если ПараметрОтчета.ТипОтбора = "Сценарий отчета" 
				Или ПараметрОтчета.ТипОтбора = "Организация отчета"
				Или ПараметрОтчета.ТипОтбора = "Проект отчета"
				Или ПараметрОтчета.ТипОтбора = "Параметр отчета" Тогда
				тЗапрос.УстановитьПараметр(ПараметрОтчета.ИмяОтбора,ЭтотОбъект[СтрЗаменить(ПараметрОтчета.ЗначениеОтбора,"&","")]);
			КонецЕсли;
			Если Лев(ПараметрОтчета.ИмяОтбора,12) = "ПериодОтчета" Тогда	
				СформироватьОтборПоПериодам(тЗапрос,Прав(ПараметрОтчета.УидГруппыОтбора,32),ПараметрОтчета.ИмяОтбора);
			КонецЕсли;							
			
		КонецЦикла;	
						
		ДанныеРасшифровки = Стр.ДанныеРасшифровки;
		МакетКомпоновки	  =	Стр.МакетКомпоновки;
		
		МакетКомпоновки.НаборыДанных.ОсновнойНабор.Запрос  = СтрЗаменить(МакетКомпоновки.НаборыДанных.ОсновнойНабор.Запрос ,"СЕКУНДА",ПолучитьПредставлениеПериодичностиДляЗапроса());

		//Установим параметры
		Стр.СКДДляВыводаОбласти.Параметры.Очистить();
		Для Каждого стрПар Из тЗапрос.Параметры Цикл
			нПараметр = Стр.СКДДляВыводаОбласти.Параметры.Добавить(); 
			нПараметр.Имя 						= стрПар.Ключ;
			нПараметр.Заголовок 				= стрПар.Ключ;
			нПараметр.ОграничениеИспользования 	= Ложь;
			нПараметр.Значение 					= стрПар.Значение;
			нПараметр.Использование				= ИспользованиеПараметраКомпоновкиданных.Всегда;
			нПараметр 							= МакетКомпоновки.ЗначенияПараметров.Добавить();
			нПараметр.Имя 						= стрПар.Ключ;
            нПараметр.Значение 					= стрПар.Значение;
		КонецЦикла;	

		ПроцессорКомпоновкиДанных				= Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки,,,МенеджерВТ);

		МакетКолонок.Очистить();
		ПроцессорВывода=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(МакетКолонок);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		 				
		//Вывод данных и аналитик в макет.
		СтруктураПараметров = Новый Структура;
		//СтруктураПараметров.Вставить("ТаблицаУровнейМакетов",ТаблицаУровнейМакетов);
		СтруктураПараметров.Вставить("ИндексГруппировки",-1);
		СтруктураПараметров.Вставить("ТзСтруктураВыводаГрупировокКолонок",ТзСтруктураВыводаГрупировокКолонок);
		СтруктураПараметров.Вставить("тПараметрыВыводаКолонок",тПараметрыВыводаКолонок);
		СтруктураПараметров.Вставить("ТзРасшифровокОбластей",ТзРасшифровокОбластей);
		СтруктураПараметров.Вставить("мНемасштабируемые",мНемасштабируемые);
		СтруктураПараметров.Вставить("ТекущийУровеньАналитики",-1);
		СтруктураПараметров.Вставить("тМакет",МакетКолонок);
		СтруктураПараметров.Вставить("ДанныеРасшифровки",ДанныеРасшифровки);
        СтруктураПараметров.Вставить("УидОбласти",Стр.УидОбласти);
		СтруктураПараметров.Вставить("тПараметрыОбласти",Стр.УидОбласти);
        СтруктураПараметров.Вставить("тМакетКолонок",тМакетКолонок);               
        СтруктураПараметров.Вставить("ТекущиеПериодыДляОтбора",ТекущиеПериодыДляОтбора); 
		СтруктураПараметров.Вставить("СтруктураОформления",СтруктураОформления); 		
		СтруктураПараметров.Вставить("СтруктураИменПолейСКД",ПолучитьКоординатыКолонокТехническогоМакета(Стр,МакетКолонок));
		СтруктураПараметров.Вставить("СтруктураТиповЗначенийОбластей", ПолучитьТипыЗначенияОбластейВывода(СтруктураПараметров.СтруктураИменПолейСКД,тСвойстваИменРесурсовКолонок,тСвойстваПоказателей));

		ТекущийИндексСтроки = 1;
		
		ВывестиВертикальныеОбластиМакет(СтруктураПараметров);	
		
		ТзРасшифровокОбластей.Индексы.Добавить(СтрокаИндексов);
		СтруктураРасшифровкаОбластейХ.Вставить(Стр.ИмяОбласти,ТзРасшифровокОбластей);	
		СтруктураМакетаКолонок.Вставить(Стр.ИмяОбласти,тМакетКолонок);		
		
	КонецЦикла;
	
	СтруктураРасшифровкаОбластейХАдрес = ПоместитьВоВременноеХранилище(СтруктураРасшифровкаОбластейХ, Новый УникальныйИдентификатор);
	
КонецПроцедуры

Процедура ВывестиВертикальныеОбластиМакет(СтруктураПараметров)
	
	тМакет				 				= СтруктураПараметров.тМакет;
	ДанныеРасшифровки    				= СтруктураПараметров.ДанныеРасшифровки;
	ТзСтруктураВыводаГрупировокКолонок  = СтруктураПараметров.ТзСтруктураВыводаГрупировокКолонок;
	Уид_Области                         = СтруктураПараметров.УидОбласти;
	тПараметрыВыводаКолонок           	= СтруктураПараметров.тПараметрыВыводаКолонок;
    КэшОперандовЭталон		            = Новый ФиксированнаяСтруктура(ПолучитьИзВременногоХранилища(КэшОперандовАдрес));
	мНемасштабируемые                   = СтруктураПараметров.мНемасштабируемые;
	ТзРасшифровокОбластей               = СтруктураПараметров.ТзРасшифровокОбластей;
	тМакетКолонок                       = СтруктураПараметров.тМакетКолонок;
	ИндексОбласти 						= 1;
	ТекущиеПериодыДляОтбора             = СтруктураПараметров.ТекущиеПериодыДляОтбора;
	СтруктураОформления                 = СтруктураПараметров.СтруктураОформления;
	СтруктураИменПолейСКД               = СтруктураПараметров.СтруктураИменПолейСКД;
	СтруктураТиповЗначенийОбластей      = СтруктураПараметров.СтруктураТиповЗначенийОбластей;

	
	ТзСтруктураВыводаГрупировокКолонокТекМакета 	= ТзСтруктураВыводаГрупировокКолонок.НайтиСтроки(Новый Структура("УидОбласти",Уид_Области));		
	
	СтруктураСоответствияМакетов = Новый Структура;
	ИдексУровняМакета            = 1;
	
	//Создадим кэш - описание каждого уровня группировки макета 
	ИспользованныеГруппировки = Новый Структура;

	Для Каждого СтрУровень Из  ТзСтруктураВыводаГрупировокКолонокТекМакета Цикл 
		
		СтруктураОписанияОбласти = Новый Структура;
		СтруктураОписанияОбласти.Вставить("ТекщееОписаниеМакетов",СтрУровень);
				
		тПараметрыОбласти           = тПараметрыВыводаКолонок.НайтиСтроки(Новый Структура("ИмяМакета",СтрУровень.ИмяОбласти));
		Для Каждого тПолеГруппировки Из СтрУровень.Группировки Цикл
			ИспользованныеГруппировки.Вставить(тПолеГруппировки.Ключ);
		КонецЦикла;
		СтруктураОписанияОбласти.Вставить("тПараметрыОбласти",тПараметрыОбласти);
        СтруктураОписанияОбласти.Вставить("ИспользованныеГруппировки",ИспользованныеГруппировки);
		
		СтруктураСоответствияМакетов.Вставить("УР"+СтрУровень.Уровень,СтруктураОписанияОбласти);
	КонецЦикла;	
	
	ИндексКолонкиУровняМакета = СтруктураИменПолейСКД["ИмяМакета"];
	
	СтруктураВыводаОтступов = Новый Структура;
    СтруктураВыводаОтступов.Вставить("ПредыдущийОтступСКД",-1);
	СтруктураВыводаОтступов.Вставить("ПредыдущийОтступМакета",0);

	Для ИндСтроки = 1 По тМакет.ВысотаТаблицы Цикл
		
		//Нет расшифровки - пропускаем.
		тЯчейка = тМакет.Область(ИндСтроки,1,ИндСтроки,1);
		 Если  тЯчейка.Расшифровка = Неопределено Тогда
			 Продолжить;
		 КонецЕсли;	 
		 
		 //Получим описание макета текущего уровня группировки 
		 тЯчейка   					=  тМакет.Область(ИндСтроки,ИндексКолонкиУровняМакета,ИндСтроки,ИндексКолонкиУровняМакета);
		 ТекСтрока 					= СтруктураСоответствияМакетов[тЯчейка.Текст]["ТекщееОписаниеМакетов"];
		 тПараметрыОбласти 			= СтруктураСоответствияМакетов[тЯчейка.Текст]["тПараметрыОбласти"];
		 ИспользованныеГруппировки 	= СтруктураСоответствияМакетов[тЯчейка.Текст]["ИспользованныеГруппировки"];
		 ТекМакет 					= ТекСтрока.Макет.ПолучитьОбласть();
		 КоличествоОдинаковыхИмен	= ТекСтрока.КоличествоОдинаковыхИмен;	 
		 КэшОперандов		        = Новый Структура(КэшОперандовЭталон);
		 
		 ЭтоГруппа = Ложь;
		 СтруктураГруппы    = "";
		 тРасшифровка =  ДанныеРасшифровки.Элементы[тЯчейка.Расшифровка].ПолучитьПоля()[0].Значение;
         //Проверим необходимость вывода иерархического итога по периоду, если необходимо
		 Если Не ТекущиеПериодыДляОтбора = Неопределено Тогда
			 КоординатаКолонкиВывода  	=  СтруктураИменПолейСКД["ПериодОтчета"];
			 ЗначениеОбласти          	=  тМакет.Область(ИндСтроки,КоординатаКолонкиВывода,ИндСтроки,КоординатаКолонкиВывода);
			 Если НЕ ЗначениеОбласти.Расшифровка = Неопределено Тогда 
				 ЗначениеПериода 	=  ДанныеРасшифровки.Элементы[ЗначениеОбласти.Расшифровка].ПолучитьПоля()[0].Значение;
				 ПериодИзКэша = ТекущиеПериодыДляОтбора.Найти(ЗначениеПериода,"ПериодОтчета");
				 Если ПериодИзКэша = Неопределено Тогда  //Это лишний итог по периоду
					 Продолжить;
				 ИначеЕсли НЕ ПериодИзКэша.Периодичность = Периодичность Тогда
					 ЭтоГруппа = Истина;
					 СтруктураГруппы = СтруктураГруппы+"|ПериодОтчета";
				 КонецЕсли;	   
			 КонецЕсли;
		 КонецЕсли;	 
		  		  
		 ЕстьЗаполненнаяАналитика = Истина;
		 Для Каждого тПолеГруппировки Из ТекСтрока.Группировки Цикл
			 КоординатаКолонкиВывода  	=  СтруктураИменПолейСКД[тПолеГруппировки.Ключ];
			 ЗначениеОбласти          	=  тМакет.Область(ИндСтроки,КоординатаКолонкиВывода,ИндСтроки,КоординатаКолонкиВывода);
			 Если ЗначениеОбласти.Расшифровка = Неопределено Тогда
				 ЕстьЗаполненнаяАналитика = Ложь;
			     Прервать;
			 КонецЕсли;	 
			 тЗначение = ДанныеРасшифровки.Элементы[ЗначениеОбласти.Расшифровка].ПолучитьПоля()[0].Значение;
			 Если тЗначение = Null Тогда	
			     ЕстьЗаполненнаяАналитика = Ложь;
			     Прервать;
			 КонецЕсли;
		 КонецЦикла;
		 Если НЕ ЕстьЗаполненнаяАналитика Тогда
			  Продолжить;
		 КонецЕсли;	 
		  
		 //Выводим поля - ресурсы
		 ВставитьЗначенияРесурсов(СтруктураИменПолейСКД,СтруктураТиповЗначенийОбластей,ИндСтроки,тМакет,ТекМакет,КоличествоОдинаковыхИмен,мНемасштабируемые,КэшОперандов,СтруктураОформления,ЭтоГруппа);
		 
		 //Расчитываем формулы бланка
		 ВычислитьФормулыБланка(ТекСтрока,ТекМакет,КэшОперандов,"Колонки");
		 		  
		 //Выводим параметры области		
		 УстановитьЗначенияПараметров(СтруктураИменПолейСКД,ИндСтроки,тМакет,ТекМакет,тПараметрыОбласти,ДанныеРасшифровки,СтруктураВыводаОтступов);
		
		 //Выводим аналитики текущей области и их расшифровку по колонкам в макете 
		 СтруктураРасшифровки 		= Новый Структура;
		 ЕстьЗаполненнаяАналитика   = Истина;
		 		 		 
		 нСтрРасшифровки  				= ТзРасшифровокОбластей.Добавить();
		 нСтрРасшифровки.ИмяМакета   	= ТекСтрока.ИмяОбласти;			
		 
		 Для Каждого тПолеГруппировки Из ИспользованныеГруппировки Цикл
			 КоординатаКолонкиВывода  						=  СтруктураИменПолейСКД[тПолеГруппировки.Ключ];
			 ЗначениеОбласти          						=  тМакет.Область(ИндСтроки,КоординатаКолонкиВывода,ИндСтроки,КоординатаКолонкиВывода);
			 Если НЕ ЗначениеОбласти.Расшифровка = Неопределено Тогда
				 ЗначениеПоля 									=  ДанныеРасшифровки.Элементы[ЗначениеОбласти.Расшифровка].ПолучитьПоля()[0].Значение;
				 нСтрРасшифровки[тПолеГруппировки.Ключ] 		= ?(ЗначениеПоля=NULL,НЕОПРЕДЕЛЕНО,ЗначениеПоля); 										
				 СтруктураРасшифровки.Вставить(тПолеГруппировки.Ключ,нСтрРасшифровки[тПолеГруппировки.Ключ]);
				 Если ЭтоГруппа Тогда
					 СтруктураРасшифровки.Вставить("ЭтоГруппа",Истина);
					 нСтрРасшифровки.ЭтоГруппа  = Истина;
					 СтруктураРасшифровки.Вставить("СтруктураГруппыКолонки",СтруктураГруппы);
				 КонецЕсли;	 
			 КонецЕсли;
		 КонецЦикла;
				  
		 Для Х = 1 По ТекМакет.ШиринаТаблицы Цикл
			 ТекМакет.Область(2,Х,2,Х).Расшифровка = СтруктураРасшифровки;
		 КонецЦикла;	
		 
		 
		 тМакетКолонок.Присоединить(ТекМакет);
		 нСтрРасшифровки.СмещениеХ  = тМакетКолонок.ШиринаТаблицы - ТекМакет.ШиринаТаблицы;
		 ИндексОбласти = ИндексОбласти+ТекМакет.ШиринаТаблицы;
		 		 	 
	 КонецЦикла;	
	
КонецПроцедуры	

Процедура ВставитьЗначенияРесурсов(СтруктураИменПолейСКД,СтруктураТиповЗначенийОбластей,ИндСтроки,тМакет,ТекМакет,КоличествоОдинаковыхИмен,мНемасштабируемые,КэшОперандов,СтруктураОформления,ЭтоГруппа)
	
	Для Каждого СтрРесурс Из КоличествоОдинаковыхИмен Цикл
		
		Если НЕ СтруктураИменПолейСКД.Свойство(СтрРесурс.Ключ) Тогда
			ЗначениеОбластиТекст  = "";   
		Иначе
			КоординатаКолонкиВывода  =  СтруктураИменПолейСКД[СтрРесурс.Ключ];
			ЗначениеОбластиТекст     =  тМакет.Область(ИндСтроки,КоординатаКолонкиВывода,ИндСтроки,КоординатаКолонкиВывода).Текст;		
		КонецЕсли;	

		ИндексИмени 			 = СтрРесурс.Значение; 
		ЗначениеОбластиЗначение  = 0;
		
		//в макете нет области с нужным показателем, тем не менее, его возможно нужно учесть при расчете дин. формулы
		Если ИндексИмени = -1 Тогда	
			Если ЗначениеОбластиТекст = ""  Тогда
				Продолжить;
			КонецЕсли;			
			КэшОперандов.Вставить(СтрРесурс.Ключ,ЗначениеОбластиЗначение);			
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ЗначениеОбластиТекст) Тогда
			Если  СтруктураТиповЗначенийОбластей[СтрРесурс.Ключ] =1 Тогда
				ЗначениеОбластиЗначение = Число(ЗначениеОбластиТекст);
			ИначеЕсли СтруктураТиповЗначенийОбластей[СтрРесурс.Ключ] =2 Тогда
				ЗначениеОбластиЗначение = ЗначениеОбластиТекст;
			ИначеЕсли СтруктураТиповЗначенийОбластей[СтрРесурс.Ключ] =3 Тогда	
				ЗначениеОбластиЗначение = Дата(ЗначениеОбластиТекст);
			ИначеЕсли СтруктураТиповЗначенийОбластей[СтрРесурс.Ключ] =4 Тогда	
				ЗначениеОбластиЗначение = Булево(ЗначениеОбластиТекст);				
			КонецЕсли;	
		Иначе	 	
			ЗначениеОбластиЗначение = 0;							
		КонецЕсли;
		
		Для Инд = 1 По ИндексИмени Цикл
			
			ОбластьДляВывода = СтрРесурс.Ключ+"_"+Формат(Инд,"ЧГ=0");	
			ОбластьРедактирования = ТекМакет.Область(ОбластьДляВывода);

			Если ЭтоГруппа И Не СтруктураОформления = Неопределено  Тогда
				 ОбластьРедактирования.ЦветФона = СтруктураОформления.ОбластьЯчейкаАгрегат.ЦветФона; 
			КонецЕсли;	

			Если ЗначениеОбластиТекст = "" Тогда
				Прервать;
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(ЗначениеОбластиТекст) Тогда
				Если  СтруктураТиповЗначенийОбластей[СтрРесурс.Ключ] =1 Тогда
					ЗначениеОбластиЗначение = Число(ЗначениеОбластиТекст);
				ИначеЕсли СтруктураТиповЗначенийОбластей[СтрРесурс.Ключ] =2 Тогда
					ЗначениеОбластиЗначение = ЗначениеОбластиТекст;
				ИначеЕсли СтруктураТиповЗначенийОбластей[СтрРесурс.Ключ] =3 Тогда	
					ЗначениеОбластиЗначение = Дата(ЗначениеОбластиТекст);
				ИначеЕсли СтруктураТиповЗначенийОбластей[СтрРесурс.Ключ] =4 Тогда	
					ЗначениеОбластиЗначение = Булево(ЗначениеОбластиТекст);				
				КонецЕсли;	
			Иначе	 	
				Возврат;
			КонецЕсли;
			
			Если  НЕ мНемасштабируемые.Свойство(ОбластьДляВывода) Тогда
				ВставитьЗначениеВОбластьТабличногоДокумента(ОбластьРедактирования, ЗначениеОбластиЗначение, НастройкаФормата, ТекущаяТочность);
			Иначе
				ВставитьЗначениеВОбластьТабличногоДокумента(ОбластьРедактирования,ЗначениеОбластиЗначение, НастройкаФорматаНеМасштабируется, ТекущаяТочность);
			КонецЕсли;
			
			Если РежимОтклонений Тогда	
				Если СтруктураТиповЗначенийОбластей[СтрРесурс.Ключ]=1 И ЗначениеОбластиЗначение>0 Тогда
					ОбластьРедактирования.ЦветТекста = ЦветПоложительный;
				ИначеЕсли СтруктураТиповЗначенийОбластей[СтрРесурс.Ключ] = 1 И ЗначениеОбластиЗначение<0 Тогда
					ОбластьРедактирования.ЦветТекста = ЦветОтрицательный;
				КонецЕсли;		
			КонецЕсли;	
			
						
			ТекМакет.Область(ОбластьДляВывода).Имя = "";	
		КонецЦикла;		
		
		КэшОперандов.Вставить(СтрРесурс.Ключ,ЗначениеОбластиЗначение);		
		
	КонецЦикла;	
	
	
КонецПроцедуры	

Процедура УстановитьЗначенияПараметров(СтруктураИменПолейСКД,ИндСтроки,тМакет,ТекМакет,тПараметрыОбласти,ДанныеРасшифровки,СтруктураВыводаОтступов)
	
	КэшОбработанныхОбластейАвтоотсупов = Новый Структура();
	
	Для Каждого СтрПараметр Из тПараметрыОбласти Цикл
		Для Каждого СтрПараметрМассив Из СтрПараметр.ИмяОбластиВмакете Цикл
			тОбластьПараметр  						= ТекМакет.Область(СтрПараметрМассив);			
			тОбластьПараметрТекст       			= тОбластьПараметр.Текст;
			тОбластьПараметр.СодержитЗначение 		= Истина;					
			КоординатаКолонкиВывода  				=  СтруктураИменПолейСКД[СтрПараметр.ИмяПоляВзапросе];
			ЗначениеОбласти    						= тМакет.Область(ИндСтроки,КоординатаКолонкиВывода,ИндСтроки,КоординатаКолонкиВывода);
			
			Если тОбластьПараметр.Автоотступ>0 И НЕ КэшОбработанныхОбластейАвтоотсупов.Свойство(тОбластьПараметр.Имя) Тогда
				//Установим новое значение отступа
				ОтступПоМакетуСКД = тМакет.Область(ИндСтроки,1,ИндСтроки,1).Отступ;
				Если СтруктураВыводаОтступов.ПредыдущийОтступСКД = -1 Тогда
					 СтруктураВыводаОтступов.Вставить("ПредыдущийОтступСКД",ОтступПоМакетуСКД);
				ИначеЕсли ОтступПоМакетуСКД>СтруктураВыводаОтступов.ПредыдущийОтступСКД Тогда  //Уровень группировки увеличился
					ТекущийОтступ = СтруктураВыводаОтступов.ПредыдущийОтступМакета+тОбластьПараметр.Автоотступ;
					тОбластьПараметр.Отступ 	= тОбластьПараметр.Отступ+ТекущийОтступ;
					СтруктураВыводаОтступов.Вставить("ПредыдущийОтступСКД",ОтступПоМакетуСКД);
					СтруктураВыводаОтступов.Вставить("ПредыдущийОтступМакета",ТекущийОтступ);
				ИначеЕсли ОтступПоМакетуСКД<СтруктураВыводаОтступов.ПредыдущийОтступСКД Тогда  //Уровень группировки уменьшился
					РазницаВУровняхОтступовСКД 		= (СтруктураВыводаОтступов.ПредыдущийОтступСКД - ОтступПоМакетуСКД)/2; 
					РазницаВУровняхОтступовМакет    =  СтруктураВыводаОтступов.ПредыдущийОтступМакета-(РазницаВУровняхОтступовСКД*тОбластьПараметр.Автоотступ);
					Если РазницаВУровняхОтступовМакет>=0 Тогда
						ТекущийОтступ = РазницаВУровняхОтступовМакет;
						
						тОбластьПараметр.Отступ 	=  тОбластьПараметр.Отступ+ТекущийОтступ;
						СтруктураВыводаОтступов.Вставить("ПредыдущийОтступСКД",ОтступПоМакетуСКД);
						СтруктураВыводаОтступов.Вставить("ПредыдущийОтступМакета",ТекущийОтступ);	
					Иначе	 
						СтруктураВыводаОтступов.Вставить("ПредыдущийОтступСКД",ОтступПоМакетуСКД);
						СтруктураВыводаОтступов.Вставить("ПредыдущийОтступМакета",0);	
					КонецЕсли;	  	
				ИначеЕсли ОтступПоМакетуСКД=СтруктураВыводаОтступов.ПредыдущийОтступСКД Тогда	
					 тОбластьПараметр.Отступ 	= тОбластьПараметр.Отступ+СтруктураВыводаОтступов.ПредыдущийОтступМакета;
				КонецЕсли;
			КонецЕсли;
			КэшОбработанныхОбластейАвтоотсупов.Вставить(тОбластьПараметр.Имя);
			
			
			Попытка								
				Если НЕ ЗначениеОбласти.Расшифровка = Неопределено Тогда
					ЗначениеПоля 					=  ДанныеРасшифровки.Элементы[ЗначениеОбласти.Расшифровка].ПолучитьПоля()[0].Значение;
					тОбластьПараметр.Значение      	=  СтрЗаменить(тОбластьПараметрТекст,"["+СтрПараметр.ИмяВмакете+"]",ЗначениеПоля);
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;	                         	
	КонецЦикла;	
		
КонецПроцедуры	

Функция  ПолучитьПериоды(тКэшНастроекПериодов)
	
	СписокПериодичностей = Новый СписокЗначений;
	
	Если тКэшНастроекПериодов.ВыводитьИтогГод Тогда
		СписокПериодичностей.Добавить(Перечисления.Периодичность.Год);
	КонецЕсли;	  
	Если тКэшНастроекПериодов.ВыводитьИтогПолугодие Тогда
		СписокПериодичностей.Добавить(Перечисления.Периодичность.Полугодие);
	КонецЕсли;	
	Если тКэшНастроекПериодов.ВыводитьИтогКвартал Тогда
		СписокПериодичностей.Добавить(Перечисления.Периодичность.Квартал);
	КонецЕсли;	
	Если тКэшНастроекПериодов.ВыводитьИтогМесяц Тогда
		СписокПериодичностей.Добавить(Перечисления.Периодичность.Месяц);
	КонецЕсли;	
	Если тКэшНастроекПериодов.ВыводитьИтогДекада Тогда
		СписокПериодичностей.Добавить(Перечисления.Периодичность.Декада);
	КонецЕсли;	
	Если тКэшНастроекПериодов.ВыводитьИтогНеделя Тогда
		СписокПериодичностей.Добавить(Перечисления.Периодичность.Неделя);
	КонецЕсли;	
	Если тКэшНастроекПериодов.ВыводитьИтогДень Тогда
		СписокПериодичностей.Добавить(Перечисления.Периодичность.День);
	КонецЕсли;	
	
	Если СписокПериодичностей.Количество() = 0 ИЛИ ВложенныеПериоды.Количество() = 0 Тогда  //Нет итогов, незачем проверять иерархию
		Возврат Неопределено 
	КонецЕсли;	
		
	ТекущиеПериоды = Новый Массив;
	Если НЕ тКэшНастроекПериодов.ИспользоватьГруппировкуПериодов Тогда
		ТекущиеПериоды =  ВложенныеПериоды.ВыгрузитьКолонку("ПериодОтчета");
	Иначе	
		Для ИндПериода = 2 По тКэшНастроекПериодов.НомерПериодаДляГруппировки Цикл
			
			Если ИндПериода>=(ВложенныеПериоды.Количество()-1) Тогда
				 Продолжить;
			КонецЕсли;
			ИндексПериодаВКэше = ВложенныеПериоды[ИндПериода-2];
			ТекущиеПериоды.Добавить(ИндексПериодаВКэше.ПериодОтчета);
		КонецЦикла;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Периоды.Ссылка КАК ПериодОтчета,
	               |	Периоды.Периодичность КАК Периодичность
	               |ИЗ
	               |	Справочник.Периоды КАК Периоды
	               |ГДЕ
	               |	Периоды.ПометкаУдаления = ЛОЖЬ
	               |	И Периоды.ДатаНачала >= &ДатаНачала
	               |	И Периоды.ДатаОкончания <= &ДатаОкончания
	               |	И Периоды.Периодичность В(&Периодичность)
	               |	И Периоды.Произвольный = ЛОЖЬ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Периоды.Ссылка,
	               |	Периоды.Периодичность
	               |ИЗ
	               |	Справочник.Периоды КАК Периоды
	               |ГДЕ
	               |	Периоды.Ссылка В(&ТекущиеПериоды)";
	
	
	Запрос.УстановитьПараметр("Периодичность",СписокПериодичностей);
	Запрос.УстановитьПараметр("ДатаНачала",ПериодОтчета.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",ПериодОтчетаОкончание.ДатаОкончания);
	Запрос.УстановитьПараметр("ТекущиеПериоды",ТекущиеПериоды);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("ПериодОтчета");	
	
	Возврат Результат;
	
КонецФункции	

Процедура ВычислитьФормулыБланка(ТекСтрока,ТекМакет,КэшОперандов,ТипОбласти)
	
	Если   КэшИменФормул.Количество() > 0 Тогда
		тКэшИменФормул = КэшИменФормул.НайтиСтроки(Новый Структура("ТипОбластиВывода,ИмяОбластиВывода",ТипОбласти,ТекСтрока.УидОбласти));
		Для Каждого иОбл Из тКэшИменФормул Цикл			
			ТекОбласть = ТекМакет.Области.Найти(иОбл.ИмяОбласти);	
			Если ТекОбласть = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			Если  НЕ ТекОбласть.Расшифровка = Неопределено И ТекОбласть.Расшифровка.Свойство("ТекстФормулы")  Тогда	
				СтрДляРасчета =  ТекОбласть.Расшифровка.ТекстФормулы;			
				Попытка
					ВставитьЗначениеВОбластьТабличногоДокумента(ТекОбласть, Вычислить(СтрДляРасчета), НастройкаФормата, ТекущаяТочность);
				Исключение
					ВставитьЗначениеВОбластьТабличногоДокумента(ТекОбласть, "#Ошибка");
				КонецПопытки;			
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры	

Функция ПолучитьКоординатыКолонокТехническогоМакета(СтрокаГруппировки,МакетКолонок)
	
	СтруктураИменПолейСКДПредварительная = Новый Структура;
	ОбластьПоискаПолейЗаголовков = МакетКолонок.Область(1,1,МакетКолонок.ФиксацияСверху,МакетКолонок.ШиринаТаблицы);
	Для Каждого СтрПоле Из СтрокаГруппировки.СтруктураИменПолейСКД Цикл
		РезультатПоискаЗаголовка = МакетКолонок.НайтиТекст(СтрПоле.Ключ,,ОбластьПоискаПолейЗаголовков,,Истина);
		Если Не РезультатПоискаЗаголовка = Неопределено Тогда
			СтруктураИменПолейСКДПредварительная.Вставить(СтрПоле.Ключ,РезультатПоискаЗаголовка.Лево);
		Иначе	 
			РезультатПоискаЗаголовкаВалюта = МакетКолонок.НайтиТекст(СтрЗаменить(СтрПоле.Ключ,"_Вал",""),,ОбластьПоискаПолейЗаголовков,,Истина);
			Если Не РезультатПоискаЗаголовкаВалюта = Неопределено Тогда
				СтруктураИменПолейСКДПредварительная.Вставить(СтрЗаменить(СтрПоле.Ключ,"_Вал",""),РезультатПоискаЗаголовкаВалюта.Лево);
			КонецЕсли;		
		КонецЕсли;		
	КонецЦикла;	
	
	СтруктураСмещенияРесурсов 			= Новый Структура;
	РезультатПоискаЗаголовкаЧисло 		= МакетКолонок.НайтиТекст("Значение",,ОбластьПоискаПолейЗаголовков,,Истина);
	РезультатПоискаЗаголовкаВалюта 		= МакетКолонок.НайтиТекст("Значение валюта",,ОбластьПоискаПолейЗаголовков,,Истина);
	РезультатПоискаЗаголовкаНеЧисло 	= МакетКолонок.НайтиТекст("Значение не число",,ОбластьПоискаПолейЗаголовков,,Истина);
	
	ТзСмещенийРесурсов                  = Новый ТаблицаЗначений;
	ТзСмещенийРесурсов.Колонки.Добавить("ИмяРесурса");
	ТзСмещенийРесурсов.Колонки.Добавить("Лево",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));
	
	Если Не РезультатПоискаЗаголовкаЧисло = Неопределено Тогда
		тСмещенияРесурсов = ТзСмещенийРесурсов.Добавить();
		тСмещенияРесурсов.ИмяРесурса = "Число";
		тСмещенияРесурсов.Лево = РезультатПоискаЗаголовкаЧисло.Лево;
	КонецЕсли;	
	
	Если Не РезультатПоискаЗаголовкаВалюта = Неопределено Тогда
		тСмещенияРесурсов = ТзСмещенийРесурсов.Добавить();
		тСмещенияРесурсов.ИмяРесурса = "Валюта";
		тСмещенияРесурсов.Лево = РезультатПоискаЗаголовкаВалюта.Лево;
	КонецЕсли;	
	
	Если Не РезультатПоискаЗаголовкаНеЧисло = Неопределено Тогда
		тСмещенияРесурсов = ТзСмещенийРесурсов.Добавить();
		тСмещенияРесурсов.ИмяРесурса = "НеЧисло";
		тСмещенияРесурсов.Лево = РезультатПоискаЗаголовкаНеЧисло.Лево;
	КонецЕсли;	
	
	ТзСмещенийРесурсов.Сортировать("Лево");
	ИндСмещения = 0;
	Для Каждого СтрРесурс Из ТзСмещенийРесурсов Цикл
		СтруктураСмещенияРесурсов.Вставить(СтрРесурс.ИмяРесурса,ИндСмещения);
		ИндСмещения = ИндСмещения+1;
	КонецЦикла;	
	
	СтруктураИменПолейСКД = Новый Структура;
	
	тСвойстваИменРесурсовКолонок  		= ПолучитьИзВременногоХранилища(ТзПоказателейОбластейКолонкиАдрес);
	тСвойстваПоказателей 				= ПолучитьИзВременногоХранилища(ТзСвойстваПоказателейАдрес);
	
	Для Каждого СтрИмяПоля Из СтруктураИменПолейСКДПредварительная Цикл
		тИмяРесурса 		= тСвойстваИменРесурсовКолонок.Найти(СтрИмяПоля.Ключ,"КодПоляПоказателя"); 
		тИмяРесурсаВал      = тСвойстваИменРесурсовКолонок.Найти(СтрИмяПоля.Ключ+"_Вал","КодПоляПоказателя"); 
		Если тИмяРесурса = Неопределено И
			тИмяРесурсаВал = Неопределено Тогда
			//Это не ресурс - добавляем как есть
			СтруктураИменПолейСКД.Вставить(СтрИмяПоля.Ключ,СтрИмяПоля.Значение);
		ИначеЕсли тИмяРесурса = Неопределено Тогда	
			//Это только валютная сумма
			СтруктураИменПолейСКД.Вставить(СтрИмяПоля.Ключ+"_Вал",СтрИмяПоля.Значение+СтруктураСмещенияРесурсов.Валюта);
		ИначеЕсли тИмяРесурсаВал = Неопределено	Тогда
			//Нет валютной суммы			
			тСвойствоПоказателя =  тСвойстваПоказателей.Найти(тИмяРесурса.Показатель,"Ссылка");
			Если тСвойствоПоказателя.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
				 СтруктураИменПолейСКД.Вставить(СтрИмяПоля.Ключ,СтрИмяПоля.Значение+СтруктураСмещенияРесурсов.Число);
			Иначе	
				 СтруктураИменПолейСКД.Вставить(СтрИмяПоля.Ключ,СтрИмяПоля.Значение+СтруктураСмещенияРесурсов.НеЧисло);
			КонецЕсли;				
		Иначе		
			тСвойствоПоказателя =  тСвойстваПоказателей.Найти(тИмяРесурса.Показатель,"Ссылка");
			Если тСвойствоПоказателя.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
				 СтруктураИменПолейСКД.Вставить(СтрИмяПоля.Ключ,СтрИмяПоля.Значение+СтруктураСмещенияРесурсов.Число);
			Иначе	
				 СтруктураИменПолейСКД.Вставить(СтрИмяПоля.Ключ,СтрИмяПоля.Значение+СтруктураСмещенияРесурсов.НеЧисло);
			КонецЕсли;	
			СтруктураИменПолейСКД.Вставить(СтрИмяПоля.Ключ+"_Вал",СтрИмяПоля.Значение+СтруктураСмещенияРесурсов.Валюта);
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат СтруктураИменПолейСКД;
	
КонецФункции	

Функция ПолучитьТипыЗначенияОбластейВывода(СтруктураИменПолейСКД,тСвойстваИменРесурсовКолонок,тСвойстваПоказателей)
	
	СтруктураТиповЗначенийОбластей      = Новый Структура;
	
	Для Каждого СтрИмяПоля Из СтруктураИменПолейСКД Цикл
		
		тИмяРесурса 		   = тСвойстваИменРесурсовКолонок.Найти(СтрИмяПоля.Ключ,"КодПоляПоказателя"); 
		тИмяРесурсаВал        = тСвойстваИменРесурсовКолонок.Найти(СтрИмяПоля.Ключ+"_Вал","КодПоляПоказателя");
		тПоказательРесурс   = Неопределено;
		
		Если НЕ тИмяРесурса = Неопределено Тогда
			тПоказательРесурс =  тСвойстваПоказателей.Найти(тИмяРесурса.Показатель,"Ссылка");
		ИначеЕсли НЕ тИмяРесурсаВал = Неопределено Тогда 	   
			тПоказательРесурс =  тСвойстваПоказателей.Найти(тИмяРесурсаВал.Показатель,"Ссылка");
		Иначе	
			Продолжить;
		КонецЕсли;	   
		
		Если тПоказательРесурс.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			СтруктураТиповЗначенийОбластей.Вставить(СтрИмяПоля.Ключ,1);
		ИначеЕсли тПоказательРесурс.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка Тогда
			СтруктураТиповЗначенийОбластей.Вставить(СтрИмяПоля.Ключ,2);
		ИначеЕсли тПоказательРесурс.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда
			СтруктураТиповЗначенийОбластей.Вставить(СтрИмяПоля.Ключ,3);
		ИначеЕсли тПоказательРесурс.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда
			СтруктураТиповЗначенийОбластей.Вставить(СтрИмяПоля.Ключ,4);
		КонецЕсли;	   
		
	КонецЦикла;	
	
	Возврат СтруктураТиповЗначенийОбластей;
	
КонецФункции	
//////


///ОБЛАСТЬ ВЫВОДА СТРОК ЧЕРЕЗ СКД

Процедура ВывестиГоризонтальныеОбластиСКД(ТзСтруктураВыводаГрупировокСтрок,мПоказателиРаскрытия,МакетСтрок,МенеджерВТ,ДополнительныеНастройки,СтруктураМакетаСтрок,мНемасштабируемые,СтруктураОформления);
	

	Если Не ЗначениеЗАполнено(ПериодОтчета) Тогда
		 Возврат;
	КонецЕсли;	
	
	тСвойстваИменРесурсовКолонок  		= ПолучитьИзВременногоХранилища(ТзПоказателейОбластейКолонкиАдрес);
	тСвойстваПоказателей 				= ПолучитьИзВременногоХранилища(ТзСвойстваПоказателейАдрес);

	тПараметрыВыводаСтрок            		= ПолучитьИзВременногоХранилища(АдресПараметровВыводаСтрок);
	
	МакетЗаголовкаНачалаСтрок		= Обработки.АналитическийБланк.ПолучитьМакет("МакетКолонокСлужебнаяОбласть").ПолучитьОбласть("ОбластьСтрокНачало");
	МакетЗаголовкаОкончанияСтрок 	= Обработки.АналитическийБланк.ПолучитьМакет("МакетКолонокСлужебнаяОбласть").ПолучитьОбласть("ОбластьСтрокОкончание");
	
	Если ЗначениеЗаполнено(СтруктураРасшифровкаОбластейХАдрес) Тогда
		СтруктураРасшифровкаОбластейХ = ПолучитьИзВременногоХранилища(СтруктураРасшифровкаОбластейХАдрес);
	Иначе	
		СтруктураРасшифровкаОбластейХ = Новый Структура;
	КонецЕсли;
		
	СтруктураРасшифровкаОбластейY   = Новый Структура;

	ДеревоВертикальныеОбласти = неопределено;
	УидОбласти = "";
	СтруктураПоискаСтрок = Новый Структура;
	ИмяОбластиПредыдущее = "";
	УидОбластиПредыдущий = "";
		
	Для Каждого Стр Из ТзСтруктураВыводаГрупировокСтрок Цикл
				
		Если Стр.ИндексЗапросаПакета = Неопределено Тогда
			 Продолжить;
		КонецЕсли;	                                                      
		
		//Если область не содержит показатели - не выводим
		Если  Стр.СКДДляВыводаОбласти = Неопределено Тогда
			 Продолжить;
		КонецЕсли;	
		
		//Если область не содержит пустографку и нет данных для ее вывода, то дальнейшие действия не нужны.
		Если НЕ  ПроверитьНеобходимостьВыводаГоризонтальнойОбласти(мПоказателиРаскрытия,Стр.ПоказателиОбласти,Стр.ОбластьСодержитМакет) Тогда
			 Продолжить;
		КонецЕсли;	
		
		
		СтрокаИндексов = "";
		ТаблицаУровнейМакетов 					= ПолучитьТзУровнейМакетов(Стр,ТзСтруктураВыводаГрупировокСтрок);
		тПараметрыОбласти                       = тПараметрыВыводаСтрок.НайтиСтроки(Новый Структура("ИмяМакета",Стр.ИмяОбласти));	
		ТзРасшифровокОбластей                   = Новый ТаблицаЗначений;	
		ТекГруппировки 							= ТзСтруктураВыводаГрупировокСтрок.НайтиСтроки(Новый Структура("УидОбласти",Стр.УидОбласти));
        тМакетСтрок 							= Новый ТабличныйДокумент;
		тЗапрос 								= Новый Запрос;
		
		//Прочитаем настройки вывода иерархии периодов, если есть
		ТекущиеПериодыДляОтбора = Неопределено;
		Если ЗначениеЗаполнено(Стр.КэшНастроекПериодов) Тогда
			 ТекущиеПериодыДляОтбора = ПолучитьПериоды(Стр.КэшНастроекПериодов[0]);
		КонецЕсли;	
		
		//Прочитаем настройки для выода иерархий
		СтруктураПолейРеквизитовИерархии = Новый Структура;
		Для Каждого СтрИеарархия Из Стр.КэшНастроекИерархий Цикл
			Для Каждого ПолеСКД ИЗ Стр.СтруктураИменПолейСКД Цикл
				Если СтрНайти(ПолеСКД.Ключ,СтрИеарархия.КодАналитики)>0 И Не ПолеСКД.Ключ = СтрИеарархия.КодАналитики Тогда
					 СтруктураПолейРеквизитовИерархии.Вставить(СтрИеарархия.КодАналитики,ПолеСКД.Ключ);
					 Прервать;
				 КонецЕсли;	
			КонецЦикла;			
		КонецЦикла;	
		
		//Определим нужные индексы
		Для Каждого сУровень Из ТекГруппировки Цикл
			Для Каждого сГруппировка Из сУровень.Группировки Цикл
				Если ТзРасшифровокОбластей.Колонки.Найти(сГруппировка.Ключ) = Неопределено Тогда
					ТзРасшифровокОбластей.Колонки.Добавить(сГруппировка.Ключ);
					СтрокаИндексов = СтрокаИндексов+сГруппировка.Ключ+",";
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
		СтрокаИндексов = ЛЕВ(СтрокаИндексов,СтрДлина(СтрокаИндексов)-1);
		
		ТзРасшифровокОбластей.Колонки.Добавить("СмещениеY");
		ТзРасшифровокОбластей.Колонки.Добавить("ИмяМакета");
		ТзРасшифровокОбластей.Колонки.Добавить("ЭтоГруппа",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());

		ИспользованныеГруппировки = Новый Структура;
		
		Стр.СКДДляВыводаОбласти.НаборыДанных.ОсновнойНабор.Запрос  = СтрЗаменить(Стр.СКДДляВыводаОбласти.НаборыДанных.ОсновнойНабор.Запрос ,"СЕКУНДА",ПолучитьПредставлениеПериодичностиДляЗапроса());

		ПозицияСлова = 1;
		ДлинаЗапроса = СтрДлина(тЗапрос.Текст);
						
		Для Каждого ПараметрОтчета Из Стр.ПараметрыЗапроса Цикл		
			Если ПараметрОтчета.ТипОтбора = "Равно" Или ПараметрОтчета.ТипОтбора = "Не равно" ИЛИ ПараметрОтчета.ТипОтбора = "В списке" ИЛИ ПараметрОтчета.ТипОтбора = "Не в списке" ИЛИ ПараметрОтчета.ТипОтбора = "В группе" ИЛИ ПараметрОтчета.ТипОтбора  = "В группе из списка" Тогда
				тЗапрос.УстановитьПараметр(ПараметрОтчета.ИмяОтбора,ПараметрОтчета.ЗначениеОтбора);
			КонецЕсли;
			Если ПараметрОтчета.ТипОтбора = "Сценарий отчета" 
				Или ПараметрОтчета.ТипОтбора = "Организация отчета"
				Или ПараметрОтчета.ТипОтбора = "Проект отчета"
				Или ПараметрОтчета.ТипОтбора = "Параметр отчета" Тогда
				тЗапрос.УстановитьПараметр(ПараметрОтчета.ИмяОтбора,ЭтотОбъект[СтрЗаменить(ПараметрОтчета.ЗначениеОтбора,"&","")]);
			КонецЕсли;
			Если Лев(ПараметрОтчета.ИмяОтбора,12) = "ПериодОтчета" Тогда	
				СформироватьОтборПоПериодам(тЗапрос,Прав(ПараметрОтчета.УидГруппыОтбора,32),ПараметрОтчета.ИмяОтбора);
			КонецЕсли;							
			
		КонецЦикла;	
		ДанныеРасшифровки = Стр.ДанныеРасшифровки;
		МакетКомпоновки	  =	Стр.МакетКомпоновки;
		
		//МакетКомпоновки=КомпоновщикМакета.Выполнить(Стр.СКДДляВыводаОбласти,Стр.СКДДляВыводаОбласти.НастройкиПоУмолчанию,ДанныеРасшифровки);
		//Установим параметры
		Стр.СКДДляВыводаОбласти.Параметры.Очистить();
		Для Каждого стрПар Из тЗапрос.Параметры Цикл
			нПараметр = Стр.СКДДляВыводаОбласти.Параметры.Добавить(); 
			нПараметр.Имя 						= стрПар.Ключ;
			нПараметр.Заголовок 				= стрПар.Ключ;
			нПараметр.ОграничениеИспользования 	= Ложь;
			нПараметр.Значение 					= стрПар.Значение;
			нПараметр.Использование				= ИспользованиеПараметраКомпоновкиданных.Всегда;
			нПараметр 							= МакетКомпоновки.ЗначенияПараметров.Добавить();
			нПараметр.Имя 						= стрПар.Ключ;
            нПараметр.Значение 					= стрПар.Значение;
		КонецЦикла;	

		МакетКомпоновки.НаборыДанных.ОсновнойНабор.Запрос  = СтрЗаменить(МакетКомпоновки.НаборыДанных.ОсновнойНабор.Запрос ,"СЕКУНДА",ПолучитьПредставлениеПериодичностиДляЗапроса());

		ТекОбластиМакета =  ТзСтруктураВыводаГрупировокСтрок.НайтиСтроки(Новый Структура("УидОбласти",Стр.УидОбласти));	
		
		ДополнитьМакетыВыводаКолонкамиРаскрытия(ТекОбластиМакета,Стр.УидОбласти,СтруктураРасшифровкаОбластейХ,СтруктураОформления);

		ПроцессорКомпоновкиДанных=Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки,,,МенеджерВТ);

		МакетСтрок.Очистить();
		ПроцессорВывода=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(МакетСтрок);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		 				
		//Вывод данных и аналитик в макет.
		СтруктураПараметров = Новый Структура;
		//СтруктураПараметров.Вставить("ТаблицаУровнейМакетов",ТаблицаУровнейМакетов);
		СтруктураПараметров.Вставить("ИндексГруппировки",-1);
		СтруктураПараметров.Вставить("ТзСтруктураВыводаГрупировокКолонок",ТзСтруктураВыводаГрупировокСтрок);
		СтруктураПараметров.Вставить("тПараметрыВыводаКолонок",тПараметрыВыводаСтрок);
		СтруктураПараметров.Вставить("ТзРасшифровокОбластей",ТзРасшифровокОбластей);
		СтруктураПараметров.Вставить("мНемасштабируемые",мНемасштабируемые);
		СтруктураПараметров.Вставить("ТекущийУровеньАналитики",-1);
		СтруктураПараметров.Вставить("тМакет",МакетСтрок);
		СтруктураПараметров.Вставить("ДанныеРасшифровки",ДанныеРасшифровки);
        СтруктураПараметров.Вставить("УидОбласти",Стр.УидОбласти);
		СтруктураПараметров.Вставить("тПараметрыОбласти",Стр.УидОбласти);
        СтруктураПараметров.Вставить("тМакетКолонок",тМакетСтрок);               
        СтруктураПараметров.Вставить("ТекущиеПериодыДляОтбора",ТекущиеПериодыДляОтбора); 
		СтруктураПараметров.Вставить("СтруктураОформления",СтруктураОформления); 
        СтруктураПараметров.Вставить("СтруктураИменПолейСКД",Стр.СтруктураИменПолейСКД);
		СтруктураПараметров.Вставить("КэшНастроекИерархий",Стр.КэшНастроекИерархий);
        СтруктураПараметров.Вставить("СтруктураПолейРеквизитовИерархии",СтруктураПолейРеквизитовИерархии);
		СтруктураПараметров.Вставить("СтруктураТиповЗначенийОбластей", ПолучитьТипыЗначенияОбластейВывода(СтруктураПараметров.СтруктураИменПолейСКД,тСвойстваИменРесурсовКолонок,тСвойстваПоказателей));

		ТекущийИндексСтроки = 1;
		
		ВывестиГоризонтальныеОбластиМакет(СтруктураПараметров);	
		
		ТзРасшифровокОбластей.Индексы.Добавить(СтрокаИндексов);
		СтруктураРасшифровкаОбластейY.Вставить(Стр.ИмяОбласти,ТзРасшифровокОбластей);
		
		СтруктураМакетаСтрок.Вставить(Стр.ИмяОбласти,тМакетСтрок);		
		
	КонецЦикла;
	
	СтруктураРасшифровкаОбластейYАдрес = ПоместитьВоВременноеХранилище(СтруктураРасшифровкаОбластейY,Новый УникальныйИдентификатор);
	
КонецПроцедуры

Процедура ВывестиГоризонтальныеОбластиМакет(СтруктураПараметров)
	
	тМакет				 				= СтруктураПараметров.тМакет;
	ДанныеРасшифровки    				= СтруктураПараметров.ДанныеРасшифровки;
	ТзСтруктураВыводаГрупировокКолонок  = СтруктураПараметров.ТзСтруктураВыводаГрупировокКолонок;
	Уид_Области                         = СтруктураПараметров.УидОбласти;
	тПараметрыВыводаКолонок           	= СтруктураПараметров.тПараметрыВыводаКолонок;
    КэшОперандовЭталон		            = Новый ФиксированнаяСтруктура(ПолучитьИзВременногоХранилища(КэшОперандовАдрес));
	мНемасштабируемые                   = СтруктураПараметров.мНемасштабируемые;
	ТзРасшифровокОбластей               = СтруктураПараметров.ТзРасшифровокОбластей;
	тМакетСтрок                       	= СтруктураПараметров.тМакетКолонок;
	ИндексОбласти 						= 1;
	ТекущиеПериодыДляОтбора             = СтруктураПараметров.ТекущиеПериодыДляОтбора;
	СтруктураОформления                 = СтруктураПараметров.СтруктураОформления;
	СтруктураИменПолейСКД               = СтруктураПараметров.СтруктураИменПолейСКД;
	тКэшНастроекИерархий                = СтруктураПараметров.КэшНастроекИерархий;
	СтруктураПолейРеквизитовИерархии    = СтруктураПараметров.СтруктураПолейРеквизитовИерархии;
	СтруктураТиповЗначенийОбластей      = СтруктураПараметров.СтруктураТиповЗначенийОбластей;

	
	ТзСтруктураВыводаГрупировокКолонокТекМакета 	= ТзСтруктураВыводаГрупировокКолонок.НайтиСтроки(Новый Структура("УидОбласти",Уид_Области));		
	
	СтруктураСоответствияМакетов = Новый Структура;
	ИдексУровняМакета            = 1;
	
	//Создадим кэш - описание каждого уровня группировки макета 
	ИспользованныеГруппировки = Новый Структура;

	Для Каждого СтрУровень Из  ТзСтруктураВыводаГрупировокКолонокТекМакета Цикл 
		
		СтруктураОписанияОбласти = Новый Структура;
		СтруктураОписанияОбласти.Вставить("ТекщееОписаниеМакетов",СтрУровень);
				
		тПараметрыОбласти           = тПараметрыВыводаКолонок.НайтиСтроки(Новый Структура("ИмяМакета",СтрУровень.ИмяОбласти));
		Для Каждого тПолеГруппировки Из СтрУровень.Группировки Цикл
			ИспользованныеГруппировки.Вставить(тПолеГруппировки.Ключ);
		КонецЦикла;
		СтруктураОписанияОбласти.Вставить("тПараметрыОбласти",тПараметрыОбласти);
        СтруктураОписанияОбласти.Вставить("ИспользованныеГруппировки",ИспользованныеГруппировки);
		
		СтруктураСоответствияМакетов.Вставить("УР"+СтрУровень.Уровень,СтруктураОписанияОбласти);
		
		Если НЕ СтруктураОформления = Неопределено Тогда
			 тМакетИерархия = СтрУровень.МакетЭталон.ПолучитьОбласть();
			 Для ИнСтроки = 1 По тМакетИерархия.ВысотаТаблицы Цикл
				 Для ИндКолонки = 1 По тМакетИерархия.ШиринаТаблицы Цикл
					 тОбласть = тМакетИерархия.Область(ИнСтроки,ИндКолонки,ИнСтроки,ИндКолонки);
					 Если НЕ тОбласть.Расшифровка = Неопределено И тОбласть.Расшифровка.Свойство("Ссылка") Тогда 
						 тОбласть.ЦветФона = СтруктураОформления.ОбластьЯчейкаАгрегат.ЦветФона;
					 КонецЕсли;
				 КонецЦикла;	 
			 КонецЦикла;	 
		КонецЕсли;
		СтруктураСоответствияМакетов.Вставить("УР"+СтрУровень.Уровень+"_Иерархия",тМакетИерархия);
	
	КонецЦикла;	
	
	
	ИндексКолонкиУровняМакета = СтруктураИменПолейСКД["ИмяМакета"];
	
	СтруктураВыводаОтступов = Новый Структура;
    СтруктураВыводаОтступов.Вставить("ПредыдущийОтступСКД",-1);
	СтруктураВыводаОтступов.Вставить("ПредыдущийОтступМакета",0);

	Для ИндСтроки = 1 По тМакет.ВысотаТаблицы Цикл
		
		//Нет расшифровки - пропускаем.
		тЯчейка = тМакет.Область(ИндСтроки,1,ИндСтроки,1);
		 Если  тЯчейка.Расшифровка = Неопределено Тогда
			 Продолжить;
		 КонецЕсли;	 
		 
		 //Получим описание макета текущего уровня группировки 
		 тЯчейка   					=  тМакет.Область(ИндСтроки,ИндексКолонкиУровняМакета,ИндСтроки,ИндексКолонкиУровняМакета);
		 ТекСтрока 					= СтруктураСоответствияМакетов[тЯчейка.Текст]["ТекщееОписаниеМакетов"];
		 тПараметрыОбласти 			= СтруктураСоответствияМакетов[тЯчейка.Текст]["тПараметрыОбласти"];
		 ИспользованныеГруппировки 	= СтруктураСоответствияМакетов[тЯчейка.Текст]["ИспользованныеГруппировки"];
		 ТекМакет 					= ТекСтрока.МакетЭталон.ПолучитьОбласть();
		 КоличествоОдинаковыхИмен	= ТекСтрока.КоличествоОдинаковыхИмен;	 
		 КэшОперандов		        = Новый Структура(КэшОперандовЭталон);

		 
		 ЭтоГруппа 			= Ложь;
		 СтруктураГруппы    = "";
		 тРасшифровка =  ДанныеРасшифровки.Элементы[тЯчейка.Расшифровка].ПолучитьПоля()[0].Значение;
		 //Проверим необходимость вывода иерархического итога по периоду, если необходимо
		 Если Не ТекущиеПериодыДляОтбора = Неопределено Тогда
			 КоординатаКолонкиВывода  	=  СтруктураИменПолейСКД["ПериодОтчета"];
			 ЗначениеОбласти          	=  тМакет.Область(ИндСтроки,КоординатаКолонкиВывода,ИндСтроки,КоординатаКолонкиВывода);
			 Если НЕ ЗначениеОбласти.Расшифровка = Неопределено Тогда 
				 ЗначениеПериода 	=  ДанныеРасшифровки.Элементы[ЗначениеОбласти.Расшифровка].ПолучитьПоля()[0].Значение;
				 ПериодИзКэша = ТекущиеПериодыДляОтбора.Найти(ЗначениеПериода,"ПериодОтчета");
				 Если ПериодИзКэша = Неопределено Тогда  //Это лишний итог по периоду
					 Продолжить;
				 ИначеЕсли НЕ ПериодИзКэша.Периодичность = Периодичность Тогда
					 ЭтоГруппа = Истина;
					 СтруктураГруппы = СтруктураГруппы+"|ПериодОтчета";
				 КонецЕсли;	   
			 КонецЕсли;
		 КонецЕсли;	 
		 
		 //Вывод и оформление иерархических группировок
		 
		 Для Каждого ПолеИерархии Из тКэшНастроекИерархий Цикл 
			 КоординатаКолонкиВыводаРеквизитаГруппировки  		=  СтруктураИменПолейСКД[СтруктураПолейРеквизитовИерархии[ПолеИерархии.КодАналитики]];
			 КоординатаКолонкиВыводаГруппировки  				=  СтруктураИменПолейСКД[ПолеИерархии.КодАналитики];
			 ЗначениеОбластиГруппировки          				=  тМакет.Область(ИндСтроки,КоординатаКолонкиВыводаГруппировки,ИндСтроки,КоординатаКолонкиВыводаГруппировки).Текст;
			 ЗначениеОбластиРеквизита          					=  тМакет.Область(ИндСтроки,КоординатаКолонкиВыводаРеквизитаГруппировки,ИндСтроки,КоординатаКолонкиВыводаРеквизитаГруппировки).Текст;	 
			 Если ЗначениеЗаполнено(ЗначениеОбластиГруппировки) И НЕ ЗначениеЗаполнено(ЗначениеОбластиРеквизита) Тогда
				 ЭтоГруппа = Истина;
				 СтруктураГруппы = СтруктураГруппы+"|"+ПолеИерархии.КодАналитики;
			 КонецЕсли;	   
		 КонецЦикла;
		 
		 Если ЭтоГруппа Тогда
			 ТекМакет 	= СтруктураСоответствияМакетов[тЯчейка.Текст+"_Иерархия"].ПолучитьОбласть();
		 КонецЕсли;	 
		 
		 ЕстьЗаполненнаяАналитика = Истина;
		 Для Каждого тПолеГруппировки Из ТекСтрока.Группировки Цикл
			 КоординатаКолонкиВывода  	=  СтруктураИменПолейСКД[тПолеГруппировки.Ключ];
			 ЗначениеОбласти          	=  тМакет.Область(ИндСтроки,КоординатаКолонкиВывода,ИндСтроки,КоординатаКолонкиВывода);
			 Если ЗначениеОбласти.Расшифровка = Неопределено Тогда
				 ЕстьЗаполненнаяАналитика = Ложь;
				 Прервать;
			 КонецЕсли;	 
			 тЗначение = ДанныеРасшифровки.Элементы[ЗначениеОбласти.Расшифровка].ПолучитьПоля()[0].Значение;
			 Если тЗначение = Null Тогда	
				 ЕстьЗаполненнаяАналитика = Ложь;
				 Прервать;
			 КонецЕсли;
		 КонецЦикла;
		 Если НЕ ЕстьЗаполненнаяАналитика Тогда
			 Продолжить;
		 КонецЕсли;	 
		 
		 
		 //Выводим поля - ресурсы
		 ВставитьЗначенияРесурсов(СтруктураИменПолейСКД,СтруктураТиповЗначенийОбластей,ИндСтроки,тМакет,ТекМакет,КоличествоОдинаковыхИмен,мНемасштабируемые,КэшОперандов,СтруктураОформления,ЭтоГруппа);
		 
		 //Расчитываем формулы бланка
		 ВычислитьФормулыБланка(ТекСтрока,ТекМакет,КэшОперандов,"Строки");
		 		  
		 //Выводим параметры области		
		 УстановитьЗначенияПараметров(СтруктураИменПолейСКД,ИндСтроки,тМакет,ТекМакет,тПараметрыОбласти,ДанныеРасшифровки,СтруктураВыводаОтступов);
		
		 //Выводим аналитики текущей области и их расшифровку по колонкам в макете 
		 СтруктураРасшифровки 		= Новый Структура;
		 ЕстьЗаполненнаяАналитика   = Истина;
		 		 		 
		 нСтрРасшифровки  				= ТзРасшифровокОбластей.Добавить();
		 нСтрРасшифровки.ИмяМакета   	= ТекСтрока.ИмяОбласти;			
		 
		 Для Каждого тПолеГруппировки Из ИспользованныеГруппировки Цикл
			 КоординатаКолонкиВывода  						=  СтруктураИменПолейСКД[тПолеГруппировки.Ключ];
			 ЗначениеОбласти          						=  тМакет.Область(ИндСтроки,КоординатаКолонкиВывода,ИндСтроки,КоординатаКолонкиВывода);
			 Если НЕ ЗначениеОбласти.Расшифровка = Неопределено Тогда
				 ЗначениеПоля 									=  ДанныеРасшифровки.Элементы[ЗначениеОбласти.Расшифровка].ПолучитьПоля()[0].Значение;
				 нСтрРасшифровки[тПолеГруппировки.Ключ] 		= ?(ЗначениеПоля=NULL,НЕОПРЕДЕЛЕНО,ЗначениеПоля); 										
				 СтруктураРасшифровки.Вставить(тПолеГруппировки.Ключ,нСтрРасшифровки[тПолеГруппировки.Ключ]);
				 Если ЭтоГруппа Тогда
					 СтруктураРасшифровки.Вставить("ЭтоГруппа",Истина);
					 нСтрРасшифровки.ЭтоГруппа  = Истина;
					 СтруктураРасшифровки.Вставить("СтруктураГруппыСтроки",СтруктураГруппы);
				 КонецЕсли;	 
			 КонецЕсли;
		 КонецЦикла;
				  
		 Для Y = 1 По ТекМакет.ВысотаТаблицы Цикл			
			 ТекМакет.Область(Y,2,Y,2).Расшифровка = СтруктураРасшифровки;							
		 КонецЦикла;	
		 
		 тМакетСтрок.Вывести(ТекМакет);
		 нСтрРасшифровки.СмещениеY  	= ТекущийИндексСтроки;
		 ТекущийИндексСтроки 			= ТекущийИндексСтроки+ТекМакет.ВысотаТаблицы;
		 	 
	 КонецЦикла;	
	
КонецПроцедуры	

//////

// ОБЛАСТЬ ВЫВОДА ТАБЛИЦ ЧЕРЕЗ СКД
Процедура ВывестиТабличныеОбластиСКД(ТзСтруктураВыводаГрупировокТаблиц,СтруктураМакетаСтрок,МенеджерВТ,ДополнительныеНастройки,мНемасштабируемые,ПолеТабличногоДокументаМакет,МакетТаблиц)
	
	Если Не ЗначениеЗАполнено(ПериодОтчета) Тогда
		Возврат;
	КонецЕсли;	
	
	ТзСтруктураВыводаГрупировокТаблиц		= ПолучитьИзВременногоХранилища(АдресТЗСтруктурыВывода);
	
	СтруктураРасшифровкаОбластейY = ПолучитьИзВременногоХранилища(СтруктураРасшифровкаОбластейYАдрес);
	СтруктураРасшифровкаОбластейХ = ПолучитьИзВременногоХранилища(СтруктураРасшифровкаОбластейХАдрес);         
	тВыводимыхОбластей 			  = ПолучитьИзВременногоХранилища(тКэшОбластейРаскрытияАдрес);
	мНемасштабируемые             = ПолучитьИзВременногоХранилища(НемасшатбируемыеАдрес);
	
	Для Каждого ВыведеннаяСтрока Из СтруктураРасшифровкаОбластейY Цикл
		
		тТаблицы =  ТзСтруктураВыводаГрупировокТаблиц.НайтиСтроки(Новый Структура("ИмяОбластиСтроки",ВыведеннаяСтрока.Ключ));
		Для Каждого тТаблица Из тТаблицы Цикл
			
			тЗапрос  = Новый Запрос;
						
			Для Каждого ПараметрОтчета Из тТаблица.ПараметрыЗапроса Цикл		
				Если ПараметрОтчета.ТипОтбора = "Равно" Или ПараметрОтчета.ТипОтбора = "Не равно" ИЛИ ПараметрОтчета.ТипОтбора = "В списке" ИЛИ ПараметрОтчета.ТипОтбора = "Не в списке" ИЛИ ПараметрОтчета.ТипОтбора = "В группе" ИЛИ ПараметрОтчета.ТипОтбора  = "В группе из списка" Тогда
					тЗапрос.УстановитьПараметр(ПараметрОтчета.ИмяОтбора,ПараметрОтчета.ЗначениеОтбора);
				КонецЕсли;
				Если ПараметрОтчета.ТипОтбора = "Сценарий отчета" 
					Или ПараметрОтчета.ТипОтбора = "Организация отчета"
					Или ПараметрОтчета.ТипОтбора = "Проект отчета"
					Или ПараметрОтчета.ТипОтбора = "Параметр отчета" Тогда
					тЗапрос.УстановитьПараметр(ПараметрОтчета.ИмяОтбора,ЭтотОбъект[СтрЗаменить(ПараметрОтчета.ЗначениеОтбора,"&","")]);
				КонецЕсли;
				Если Лев(ПараметрОтчета.ИмяОтбора,12) = "ПериодОтчета" Тогда	
					СформироватьОтборПоПериодам(тЗапрос,Прав(ПараметрОтчета.ИмяОтбора,32),ПараметрОтчета.ИмяОтбора);
				КонецЕсли;		
			КонецЦикла;	
			
			//тЗапросИтогиТабличныеОбласти 		= тЗапрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Уид_Области");
			
			ДанныеРасшифровки = тТаблица.ДанныеРасшифровки;
			МакетКомпоновки	  =	тТаблица.МакетКомпоновки;
			
			тТаблица.СКДДляВыводаОбласти.НаборыДанных.ОсновнойНабор.Запрос  = СтрЗаменить(тТаблица.СКДДляВыводаОбласти.НаборыДанных.ОсновнойНабор.Запрос ,"СЕКУНДА",ПолучитьПредставлениеПериодичностиДляЗапроса());
            тЗапрос.Параметры.Вставить("Периодичность",Периодичность);

			//Установим параметры
			тТаблица.СКДДляВыводаОбласти.Параметры.Очистить();
			Для Каждого стрПар Из тЗапрос.Параметры Цикл
				нПараметр = тТаблица.СКДДляВыводаОбласти.Параметры.Добавить(); 
				нПараметр.Имя 						= стрПар.Ключ;
				нПараметр.Заголовок 				= стрПар.Ключ;
				нПараметр.ОграничениеИспользования 	= Ложь;
				нПараметр.Значение 					= стрПар.Значение;
				нПараметр.Использование				= ИспользованиеПараметраКомпоновкиданных.Всегда;
				нПараметр 							= МакетКомпоновки.ЗначенияПараметров.Добавить();
				нПараметр.Имя 						= стрПар.Ключ;
				нПараметр.Значение 					= стрПар.Значение;
			КонецЦикла;	
			
			МакетКомпоновки.НаборыДанных.ОсновнойНабор.Запрос  = СтрЗаменить(МакетКомпоновки.НаборыДанных.ОсновнойНабор.Запрос ,"СЕКУНДА",ПолучитьПредставлениеПериодичностиДляЗапроса());
									
			ПроцессорКомпоновкиДанных=Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки,,,МенеджерВТ);
			
			МакетТаблиц.Очистить();
			ПроцессорВывода=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			ПроцессорВывода.УстановитьДокумент(МакетТаблиц);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

			//Создадим области расшифовок строк и колонок
			Для ИндСтроки = МакетТаблиц.ФиксацияСверху+1 По МакетТаблиц.ВысотаТаблицы Цикл
				СмещениеПраво = 1;
				СтруктураРасшифоовкиОбласти = Новый Структура;
				Для Каждого Поле Из тТаблица.СтруктураИменПолейСКД.СтруктураИменПолейСКДСтроки Цикл
					ЗначениеОбласти          			=  МакетТаблиц.Область(ИндСтроки,СмещениеПраво,ИндСтроки,СмещениеПраво);
					Если НЕ ЗначениеОбласти.Расшифровка = Неопределено Тогда 
						ЗначениеОбласти 	=  ДанныеРасшифровки.Элементы[ЗначениеОбласти.Расшифровка].ПолучитьПоля()[0].Значение;
						СтруктураРасшифоовкиОбласти.Вставить(Поле.Ключ,ЗначениеОбласти);
						СмещениеПраво 		= СмещениеПраво+1;
					Иначе	
						СтруктураРасшифоовкиОбласти.Вставить(Поле.Ключ,Неопределено);
					КонецЕсли;	
				КонецЦикла;		
				МакетТаблиц.Область(ИндСтроки,1,ИндСтроки,1).Расшифровка = СтруктураРасшифоовкиОбласти;
			КонецЦикла;	
			
			НачальныйСчетчикРесурса  	= 1;
			//Создадим области расшифовок колонок

			Для ИндКолонки = МакетТаблиц.ФиксацияСлева+1 По МакетТаблиц.ШиринаТаблицы Цикл
				СмещениеВниз = 1;
				СтруктураРасшифоовкиОбласти = Новый Структура;
				Для Каждого Поле Из тТаблица.СтруктураИменПолейСКД.СтруктураИменПолейСКДКолонки Цикл
					
					ЗначениеОбласти          			=  МакетТаблиц.Область(СмещениеВниз,ИндКолонки,СмещениеВниз,ИндКолонки);
					Если НЕ ЗначениеОбласти.Расшифровка = Неопределено Тогда 
						ЗначениеРасшифровкиКД = ДанныеРасшифровки.Элементы[ЗначениеОбласти.Расшифровка].ПолучитьПоля()[0];
						Если ЗначениеРасшифровкиКД.Иерархия Тогда
							ЗначениеОбласти 	= ПолучитьЗначениеПоПредставлению(ЗначениеОбласти.Текст,Поле.Ключ,СтруктураРасшифровкаОбластейХ[тТаблица.ИмяОбластиКолонки]);
							тСтрока = тТаблица.АналитикиКолонок.Найти(Поле.Ключ,"АналитикаКод");
						Иначе	
							ЗначениеОбласти 	=  ЗначениеРасшифровкиКД.Значение;
						КонецЕсли;	
						
						СтруктураРасшифоовкиОбласти.Вставить(Поле.Ключ,ЗначениеОбласти);
						СмещениеВниз 		= СмещениеВниз+1;
					Иначе	
						СтруктураРасшифоовкиОбласти.Вставить(Поле.Ключ,Неопределено);
					КонецЕсли;	
					
				КонецЦикла;		
				
				МакетТаблиц.Область(1,ИндКолонки,1,ИндКолонки).Расшифровка = СтруктураРасшифоовкиОбласти;
			
			КонецЦикла;	

			
			тРасшифровкаОбластейХ = СтруктураРасшифровкаОбластейХ[тТаблица.ИмяОбластиКолонки];
			тРасшифровкаОбластейY = СтруктураРасшифровкаОбластейY[тТаблица.ИмяОбластиСтроки];
			НачалоОбластиY 		  = тВыводимыхОбластей.Найти(тТаблица.ИмяОбластиСтроки,"ИмяОбластиСтрок").СдвигY;
			НачалоОбластиХ 		  = тВыводимыхОбластей.Найти(тТаблица.ИмяОбластиКолонки,"ИмяОбластиКолонок").СдвигX+1;
		
			НачальныйСчетчикРесурса = 1;
			КоличествоРесурсов = тТаблица.СтруктураИменПолейСКД.СтруктураИменРесурсовСКД.Количество();
    		КэшОперандовЭталон		            = Новый ФиксированнаяСтруктура(ПолучитьИзВременногоХранилища(КэшОперандовАдрес));
            КэшОперандов 						= Новый Структура(КэшОперандовЭталон);

			//Вывод значений в таблицу
			Для ИндСтроки = МакетТаблиц.ФиксацияСверху+1 По МакетТаблиц.ВысотаТаблицы Цикл 
				Для ИндКолонки = МакетТаблиц.ФиксацияСлева+1 По МакетТаблиц.ШиринаТаблицы Цикл
					
					ЗначениеОбласти      =  МакетТаблиц.Область(ИндСтроки,ИндКолонки,ИндСтроки,ИндКолонки);
					
					Если НачальныйСчетчикРесурса > КоличествоРесурсов Тогда
						КэшОперандов = Новый Структура(КэшОперандовЭталон);
						НачальныйСчетчикРесурса = 1;
					КонецЕсли;	
					
					КодРесурса =  тТаблица.СтруктураИменПолейСКД.СтруктураИменРесурсовСКД[НачальныйСчетчикРесурса-1];
						
					Если Не  МакетТаблиц.Область(1,ИндКолонки,1,ИндКолонки).Расшифровка = Неопределено Тогда
						тРасшифровкаКолонок    =  МакетТаблиц.Область(1,ИндКолонки,1,ИндКолонки).Расшифровка;
					КонецЕсли;
					
					Если НЕ ЗначениеОбласти.Текст = "" Тогда	
						тРасшифровкаСтрок 		=  МакетТаблиц.Область(ИндСтроки,1,ИндСтроки,1).Расшифровка;
					Иначе	
						НачальныйСчетчикРесурса = НачальныйСчетчикРесурса+1;						
						Продолжить;
					КонецЕсли;		
										
					КоординатыY = тРасшифровкаОбластейY.НайтиСтроки(тРасшифровкаСтрок);
					Если КоординатыY.Количество() = 1 Тогда
						 КоординатаY  = КоординатыY[0];
					Иначе	 
						НачальныйСчетчикРесурса = НачальныйСчетчикРесурса+1;
						Продолжить;
					КонецЕсли;	
					
					КоординатыX = тРасшифровкаОбластейХ.НайтиСтроки(тРасшифровкаКолонок);
					Если КоординатыX.Количество() = 1 Тогда
						 КоординатаX  = КоординатыX[0];
					Иначе	 
						НачальныйСчетчикРесурса = НачальныйСчетчикРесурса+1;
						Продолжить;
					КонецЕсли;	

					ИмяМакетаX_				=  КоординатаX.ИмяМакета;
					ИмяМакетаY_				=  КоординатаY.ИмяМакета;

					тСмещениеПоказателей = тТаблица.ОписаниеСмещенияПоказателй.НайтиСтроки(Новый Структура("ОбластьСтрок,ОбластьКолонок",ИмяМакетаY_,ИмяМакетаX_))[0];
					
					Если тСмещениеПоказателей.СмещениеПоказателейX.Свойство(КодРесурса) И
						тСмещениеПоказателей.СмещениеПоказателейY.Свойство(КодРесурса) Тогда
						
						КоординатаСмещенияПоказателяX =  тСмещениеПоказателей.СмещениеПоказателейX[КодРесурса];
						КоординатаСмещенияПоказателяY =  тСмещениеПоказателей.СмещениеПоказателейY[КодРесурса];
						
						
						КоординатаX_ = НачалоОбластиХ+КоординатаX.СмещениеХ+КоординатаСмещенияПоказателяX;
						КоординатаY_ = НачалоОбластиY+КоординатаY.СмещениеY+КоординатаСмещенияПоказателяY;
						
						ЯчейкаРедактирования = ПолеТабличногоДокументаМакет.Область(КоординатаY_,КоординатаX_,КоординатаY_,КоординатаX_);
						
						Если Строка(ЯчейкаРедактирования.ТипЗначения) = "Число" Тогда
							 ЗначениеОбластиЗначение = Число(ЗначениеОбласти.Текст);
						ИначеЕсли Строка(ЯчейкаРедактирования.ТипЗначения) = "Строка" Тогда 	
							  ЗначениеОбластиЗначение = ЗначениеОбласти.Текст;
						ИначеЕсли Строка(ЯчейкаРедактирования.ТипЗначения) = "Дата" Тогда 	
							  ЗначениеОбластиЗначение = Дата(ЗначениеОбласти.Текст);
	                    Иначе 	
							  ЗначениеОбластиЗначение = Булево(ЗначениеОбласти.Текст);
						КонецЕсли;	
									
						КэшОперандов.Вставить(КодРесурса,ЗначениеОбластиЗначение);
						
						Если  НЕ мНемасштабируемые.Свойство(КодРесурса)  Тогда						
							ВставитьЗначениеВОбластьТабличногоДокумента(ЯчейкаРедактирования, ЗначениеОбластиЗначение, НастройкаФормата, ТекущаяТочность);						
						Иначе						
							ВставитьЗначениеВОбластьТабличногоДокумента(ЯчейкаРедактирования, ЗначениеОбластиЗначение, НастройкаФорматаНеМасштабируется, ТекущаяТочность);						
						КонецЕсли;
						
						Если РежимОтклонений И ТипЗнч(ЯчейкаРедактирования.ТипЗначения) = Тип("Число")  Тогда
							Если ЗначениеОбластиЗначение>0 Тогда
								ЯчейкаРедактирования.ЦветТекста = ЦветПоложительный;
							ИначеЕсли ЗначениеОбластиЗначение<0 Тогда
								ЯчейкаРедактирования.ЦветТекста = ЦветОтрицательный;
							КонецЕсли;		
						КонецЕсли;						Иначе	
						 КэшОперандов.Вставить(КодРесурса,0);
					КонецЕсли;
										
					//Вывод формул
					Если тСмещениеПоказателей.ЕстьФормулы Тогда
						
						Для Каждого СтрФормула Из тСмещениеПоказателей.РасшифровкаФормул Цикл
							
							КоординатаСмещенияФормулыX =  тСмещениеПоказателей.СмещениеФормулX[СтрФормула.Ключ];
							КоординатаСмещенияФормулыY =  тСмещениеПоказателей.СмещениеФормулY[СтрФормула.Ключ];
									
							КоординатаФормулыX = НачалоОбластиХ+КоординатаX.СмещениеХ+КоординатаСмещенияФормулыX;
							КоординатаФормулыY = НачалоОбластиY+КоординатаY.СмещениеY+КоординатаСмещенияФормулыY;
							
							Попытка					
								ЯчейкаРедактирования = ПолеТабличногоДокументаМакет.Область(КоординатаФормулыY,КоординатаФормулыX,КоординатаФормулыY,КоординатаФормулыX);
								ВставитьЗначениеВОбластьТабличногоДокумента(ЯчейкаРедактирования, Вычислить(СтрФормула.Значение), НастройкаФормата, ТекущаяТочность);					
							Исключение
								ЯчейкаРедактирования = ПолеТабличногоДокументаМакет.Область(КоординатаФормулыY,КоординатаФормулыX,КоординатаФормулыY,КоординатаФормулыX);
								ВставитьЗначениеВОбластьТабличногоДокумента(ЯчейкаРедактирования, "#Ошибка");					
							КонецПопытки;	
							
						КонецЦикла;		
						
					КонецЕсли;	
			        НачальныйСчетчикРесурса = НачальныйСчетчикРесурса+1;	
				КонецЦикла;	
				
			КонецЦикла;		
		КонецЦикла;	
		
	КонецЦикла;	
	
	
КонецПроцедуры	

Функция ПолучитьЗначениеПоПредставлению(ЗначениеОбласти,Поле,тРасшифровкаОбластейХ)

	тРасшифровкаИерархии = тРасшифровкаОбластейХ.Найтистроки(Новый Структура("ЭтоГруппа",Истина)); 
	Для Каждого Стр Из тРасшифровкаИерархии Цикл
		Если Строка(Стр[Поле]) = ЗначениеОбласти Тогда
			Возврат Стр[Поле];
		КонецЕсли;
	КонецЦикла;	
	
   Возврат ЗначениеОбласти;
	
КонецФункции	

///

Процедура ВывестиГоризонтальныеОбласти(ТзСтруктураВыводаГрупировокСтрок,мПоказателиРаскрытия,МакетСтрок,МенеджерВТ,ДополнительныеНастройки,СтруктураМакетаСтрок,мНемасштабируемые,СтруктураОформления);
		
	Если Не ЗначениеЗАполнено(ПериодОтчета) Тогда
		 Возврат;
	КонецЕсли;	
		
	тПараметрыВыводаСтрок            		= ПолучитьИзВременногоХранилища(АдресПараметровВыводаСтрок);
	
	МакетЗаголовкаНачалаСтрок		= Обработки.АналитическийБланк.ПолучитьМакет("МакетКолонокСлужебнаяОбласть").ПолучитьОбласть("ОбластьСтрокНачало");
	МакетЗаголовкаОкончанияСтрок 	= Обработки.АналитическийБланк.ПолучитьМакет("МакетКолонокСлужебнаяОбласть").ПолучитьОбласть("ОбластьСтрокОкончание");
	
	Если ЗначениеЗаполнено(СтруктураРасшифровкаОбластейХАдрес) Тогда
		СтруктураРасшифровкаОбластейХ = ПолучитьИзВременногоХранилища(СтруктураРасшифровкаОбластейХАдрес);
	Иначе	
		СтруктураРасшифровкаОбластейХ = Новый Структура;
	КонецЕсли;
	
	СтруктураРасшифровкаОбластейY   = Новый Структура;
	
	СоответствиеТиповГруппировки = Новый Соответствие;	
	//Обработки.АналитическийБланк.ПрочитатьНастройкиАналитическогоБланка(Новый ТабличныйДокумент, Бланк, ЭтотОбъект);
	
	Для Каждого СтрокаКэшРаскрываемыхОбластей Из КэшРаскрываемыхОбластей Цикл
		ТаблицаАналитикРаскрытия = ЗначениеИзСтрокиВнутр(СтрокаКэшРаскрываемыхОбластей.НастройкиАналитикРаскрытия);
		Если ТаблицаАналитикРаскрытия.Количество() > 0 И ТаблицаАналитикРаскрытия.Колонки.Найти("ИерархииАналитики") <> неопределено тогда
			СоответствиеТиповГруппировки.Вставить(СтрокаКэшРаскрываемыхОбластей.ИмяОбласти, ТаблицаАналитикРаскрытия[0].ИерархииАналитики);
		КонецЕсли;
	КонецЦикла;
				
	Для Каждого Стр Из ТзСтруктураВыводаГрупировокСтрок Цикл
		
		Если Стр.ИндексЗапросаПакета = Неопределено Тогда
			 Продолжить;
		КонецЕсли;	
						
		тЗапрос  = Новый Запрос;
		тЗапрос.МенеджерВременныхТаблиц = МенеджерВТ;
		тЗапрос.Текст = Стр.ТекстЗапросаВыводаОбластей;
		
		//Установим параметры запроса из текущего контекста
		Для Каждого ПараметрОтчета Из Стр.ПараметрыЗапроса Цикл		
			Если ПараметрОтчета.ТипОтбора = "Равно" Или ПараметрОтчета.ТипОтбора = "Не равно" ИЛИ ПараметрОтчета.ТипОтбора = "В списке" ИЛИ ПараметрОтчета.ТипОтбора = "Не в списке" ИЛИ ПараметрОтчета.ТипОтбора = "В группе" ИЛИ ПараметрОтчета.ТипОтбора  = "В группе из списка" Тогда
				тЗапрос.УстановитьПараметр(ПараметрОтчета.ИмяОтбора,ПараметрОтчета.ЗначениеОтбора);
			КонецЕсли;
			Если ПараметрОтчета.ТипОтбора = "Сценарий отчета" 
				Или ПараметрОтчета.ТипОтбора = "Организация отчета"
				Или ПараметрОтчета.ТипОтбора = "Проект отчета"
				Или ПараметрОтчета.ТипОтбора = "Параметр отчета" Тогда	
				тЗапрос.УстановитьПараметр(ПараметрОтчета.ИмяОтбора,ЭтотОбъект[СтрЗаменить(ПараметрОтчета.ЗначениеОтбора,"&","")]);
			КонецЕсли;
			Если Лев(ПараметрОтчета.ИмяОтбора,12) = "ПериодОтчета" Тогда	
				СформироватьОтборПоПериодам(тЗапрос,Прав(ПараметрОтчета.УидГруппыОтбора,32),ПараметрОтчета.ИмяОтбора);
			КонецЕсли;			
		КонецЦикла;	

		//Если область не содержит пустографку и нет данных для ее вывода, то дальнейшие действия не нужны.
		Если НЕ  ПроверитьНеобходимостьВыводаГоризонтальнойОбласти(мПоказателиРаскрытия,Стр.ПоказателиОбласти,Стр.ОбластьСодержитМакет) Тогда
			 Продолжить;
		КонецЕсли;	
		
		тМакетСтрок = Новый ТабличныйДокумент;
		
		тВертикальныеОбласти					= тЗапрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Уид_Области");
				
		ТаблицаУровнейМакетов 					= ПолучитьТзУровнейМакетов(Стр,ТзСтруктураВыводаГрупировокСтрок);
		
		тПараметрыОбласти                       = тПараметрыВыводаСтрок.НайтиСтроки(Новый Структура("ИмяМакета",Стр.ИмяОбласти));
		
		ТзРасшифровокОбластей                   = Новый ТаблицаЗначений;
		
		ТекГруппировки = ТзСтруктураВыводаГрупировокСтрок.НайтиСтроки(Новый Структура("УидОбласти",Стр.УидОбласти));
		
		СтрокаИндексов = "";
		
		//Определим нужные индексы
		Для Каждого сУровень Из ТекГруппировки Цикл
			Для Каждого сГруппировка Из сУровень.Группировки Цикл
				Если ТзРасшифровокОбластей.Колонки.Найти(сГруппировка.Ключ) = Неопределено Тогда
					ТзРасшифровокОбластей.Колонки.Добавить(сГруппировка.Ключ);
					СтрокаИндексов = СтрокаИндексов+сГруппировка.Ключ+",";
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
		СтрокаИндексов = ЛЕВ(СтрокаИндексов,СтрДлина(СтрокаИндексов)-1);
		
		ТзРасшифровокОбластей.Колонки.Добавить("СмещениеY");
		ТзРасшифровокОбластей.Колонки.Добавить("ИмяМакета");
		ТзРасшифровокОбластей.Колонки.Добавить("ЭтоГруппа",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());

		ИспользованныеГруппировки = Новый Структура;
		
		ИндексОбласти = 1;
		
		ТекОбластиМакета =  ТзСтруктураВыводаГрупировокСтрок.НайтиСтроки(Новый Структура("УидОбласти",Стр.УидОбласти));
		
		ДополнитьМакетыВыводаКолонкамиРаскрытия(ТекОбластиМакета,Стр.УидОбласти,СтруктураРасшифровкаОбластейХ,СтруктураОформления);
		
		//Вывод данных и аналитик в макет.
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ТаблицаУровнейМакетов",ТаблицаУровнейМакетов);
		СтруктураПараметров.Вставить("ИндексГруппировки",-1);
        СтруктураПараметров.Вставить("тВертикальныеОбласти",тВертикальныеОбласти);
		СтруктураПараметров.Вставить("ТзСтруктураВыводаГрупировокСтрок",ТзСтруктураВыводаГрупировокСтрок);
		СтруктураПараметров.Вставить("тПараметрыВыводаСтрок",тПараметрыВыводаСтрок);
		СтруктураПараметров.Вставить("макетСтрок"		,тМакетСтрок);
        СтруктураПараметров.Вставить("ТекМакет"			,Неопределено);
		СтруктураПараметров.Вставить("тПараметрыОбласти",Неопределено);
		СтруктураПараметров.Вставить("ТзРасшифровокОбластей",ТзРасшифровокОбластей);
		СтруктураПараметров.Вставить("ИспользованныеГруппировки",ИспользованныеГруппировки);
		СтруктураПараметров.Вставить("мНемасштабируемые",мНемасштабируемые);
		СтруктураПараметров.Вставить("ТекущийУровеньАналитики",-1);
		СтруктураПараметров.Вставить("СоответствиеТиповГруппировки",СоответствиеТиповГруппировки);
						
		ТекущийИндексСтроки = 1;
		
		Пока тВертикальныеОбласти.Следующий() Цикл
			СтруктураПараметров.Вставить("тВыборка",тВертикальныеОбласти);
			ВывестиГоризонтальныеОбластиРекурсивно(СтруктураПараметров);	
		КонецЦикла;
		
		ТзРасшифровокОбластей.Индексы.Добавить(СтрокаИндексов);
		СтруктураРасшифровкаОбластейY.Вставить(Стр.ИмяОбласти,ТзРасшифровокОбластей);
		СтруктураМакетаСтрок.Вставить(Стр.ИмяОбласти,тМакетСтрок);
		
		Если СтруктураПараметров.ИерархияНачата тогда
			
			МассивГруппировок = СтруктураПараметров.МассивГруппировок;
			ТекущаяГруппировка = СтруктураПараметров.ТекущаяГруппировка;
			СоответствиеОтступов = СтруктураПараметров.СоответствиеОтступов;
			ВысотаY = СтруктураПараметров.ВысотаY;
			
			Если ТекущаяГруппировка <> неопределено тогда
				
				Если МассивГруппировок.Найти(ТекущаяГруппировка) = неопределено тогда
					МассивГруппировок.Добавить(ТекущаяГруппировка);
				КонецЕсли;
				
				ОтступТекущегоУровня = СоответствиеОтступов.Получить(ТекущаяГруппировка.Элемент);
				ОтступВерхнегоУровня = "";
				
				ТекИнд = МассивГруппировок.Количество() - 2;
				
				Пока ТекИнд >= 0 Цикл
					
					ГруппировкаВерхнегоУровня = МассивГруппировок[ТекИнд];
					ОтступВерхнегоУровня = СоответствиеОтступов.Получить(ГруппировкаВерхнегоУровня.Элемент);
					
					Если СтрДлина(ОтступВерхнегоУровня) < СтрДлина(ОтступТекущегоУровня) тогда
						Прервать;									
					КонецЕсли;
					
					ТекИнд = ТекИнд - 1;
					
				КонецЦикла;
				
				Пока ТекИнд >= 0 Цикл
					
					ГруппировкаВерхнегоУровня = МассивГруппировок[ТекИнд];
					ОтступВерхнегоУровня = СоответствиеОтступов.Получить(ГруппировкаВерхнегоУровня.Элемент);
					
					Если СтрДлина(ОтступВерхнегоУровня) < СтрДлина(ОтступТекущегоУровня) тогда
						ГруппировкаВерхнегоУровня.ВысотаY = ГруппировкаВерхнегоУровня.ВысотаY + ВысотаY + 1;
					Иначе
						ТекИнд = ТекИнд - 1;
						Продолжить;
					КонецЕсли;
					
					ОтступТекущегоУровня = ОтступВерхнегоУровня;
					ТекИнд = ТекИнд - 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если СтруктураМакетаСтрок.Свойство("МассивГруппировок") тогда
				МассивГруппировокМакета = СтруктураМакетаСтрок.МассивГруппировок;
			Иначе
				МассивГруппировокМакета = Новый Массив();
			КонецЕсли;
			
			Для Каждого ЭлементГруппировка Из МассивГруппировок Цикл
				МассивГруппировокМакета.Добавить(ЭлементГруппировка);
			КонецЦикла;
			
			СтруктураМакетаСтрок.Вставить("МассивГруппировок", МассивГруппировокМакета);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	СтруктураРасшифровкаОбластейYАдрес = ПоместитьВоВременноеХранилище(СтруктураРасшифровкаОбластейY,Новый УникальныйИдентификатор);
	
КонецПроцедуры

Процедура ВывестиГоризонтальныеОбластиРекурсивно(СтруктураПараметров)
	
	ТаблицаУровнейМакетов 				= СтруктураПараметров.ТаблицаУровнейМакетов;
	ИндексГруппировки      				= СтруктураПараметров.ИндексГруппировки;
	тВыборка	                        = СтруктураПараметров.тВыборка;
	ТзСтруктураВыводаГрупировокСтрок  	= СтруктураПараметров.ТзСтруктураВыводаГрупировокСтрок;
	тПараметрыВыводаСтрок               = СтруктураПараметров.тПараметрыВыводаСтрок;
	макетСтрок                          = СтруктураПараметров.макетСтрок;
	ТекМакет                            = СтруктураПараметров.ТекМакет;
	тПараметрыОбласти                   = СтруктураПараметров.тПараметрыОбласти;
	ТзРасшифровокОбластей               = СтруктураПараметров.ТзРасшифровокОбластей;
	ИспользованныеГруппировки           = СтруктураПараметров.ИспользованныеГруппировки;
	мНемасштабируемые                   = СтруктураПараметров.мНемасштабируемые;
	ТекущийУровеньАналитики             = СтруктураПараметров.ТекущийУровеньАналитики;
	
	ТекущийУровеньАналитики 			= ТекущийУровеньАналитики+1;
		
	Если ТаблицаУровнейМакетов.Количество() = ТекущийУровеньАналитики Тогда
		Возврат;
	КонецЕсли;
	
	СтрГруппировка = тВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,ТаблицаУровнейМакетов[ТекущийУровеньАналитики].ПолеГруппировки);
					
	Если СтруктураПараметров.Свойство("СоответствиеОтступов") тогда
		СоответствиеОтступов = СтруктураПараметров.СоответствиеОтступов;
	Иначе
		СоответствиеОтступов = Новый Соответствие;
		СтруктураПараметров.Вставить("СоответствиеОтступов", СоответствиеОтступов);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ТекущийОтступ") тогда
		ТекущийОтступ = СтруктураПараметров.ТекущийОтступ;
	Иначе
		ТекущийОтступ = "";
		СтруктураПараметров.Вставить("ТекущийОтступ", ТекущийОтступ);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ТекущаяГруппировка") тогда
		ТекущаяГруппировка = СтруктураПараметров.ТекущаяГруппировка;
	Иначе
		ТекущаяГруппировка = неопределено;
		СтруктураПараметров.Вставить("ТекущаяГруппировка", ТекущаяГруппировка);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ГруппировкаРодителя") тогда
		ГруппировкаРодителя = СтруктураПараметров.ГруппировкаРодителя;
	Иначе
		ГруппировкаРодителя = неопределено;
		СтруктураПараметров.Вставить("ГруппировкаРодителя", ГруппировкаРодителя);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("СмещениеY") тогда
		СмещениеY = СтруктураПараметров.СмещениеY;
	Иначе
		СмещениеY = 1;
		СтруктураПараметров.Вставить("СмещениеY", СмещениеY);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ВысотаY") тогда
		ВысотаY = СтруктураПараметров.ВысотаY;
	Иначе
		ВысотаY = 0;
		СтруктураПараметров.Вставить("ВысотаY", ВысотаY);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("МассивГруппировок") тогда
		МассивГруппировок = СтруктураПараметров.МассивГруппировок;
	Иначе
		МассивГруппировок = Новый Массив();
		СтруктураПараметров.Вставить("МассивГруппировок", МассивГруппировок);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ИерархияНачата") тогда
		ИерархияНачата = СтруктураПараметров.ИерархияНачата;
	Иначе
		ИерархияНачата = Ложь;
		СтруктураПараметров.Вставить("ИерархияНачата", ИерархияНачата);
	КонецЕсли;
	
	Табуляция = "      ";
	
	Пока СтрГруппировка.Следующий() Цикл
		
		ТекГруппировка = ТзСтруктураВыводаГрупировокСтрок.НайтиСтроки(Новый Структура("УидОбласти,Уровень",СтрГруппировка.Уид_Области,ТаблицаУровнейМакетов[ТекущийУровеньАналитики].ИндексМакета))[0];
		ВыводитьИерархиюАналитик = СтруктураПараметров.СоответствиеТиповГруппировки.Получить(ТекГруппировка.ИмяОбласти) = ТипГруппировкиКомпоновкиДанных.Иерархия;
		ИерархияНачата = Макс(ИерархияНачата, ВыводитьИерархиюАналитик);
		СтруктураПараметров.Вставить("ИерархияНачата", ИерархияНачата);
		
		СмещениеY = СмещениеY + 1;
		СтруктураПараметров.Вставить("СмещениеY", СмещениеY);
		
		ВысотаY = ВысотаY + 1;
		
		Если ТекМакет = Неопределено Тогда  //Переход на новый уровень макета
			
			МакетСтрок.НачатьГруппуСтрок();
			
			ТекСтрока = ТзСтруктураВыводаГрупировокСтрок.НайтиСтроки(Новый Структура("УидОбласти,Уровень",СтрГруппировка.Уид_Области,ТаблицаУровнейМакетов[ТекущийУровеньАналитики].ИндексМакета))[0];		
			ТекМакет = ТекСтрока.МакетЭталон.ПолучитьОбласть();
			
			КоличествоОдинаковыхИмен  	=  ТекСтрока.КоличествоОдинаковыхИмен;
			КэшОперандов 				=  Новый Структура(Новый ФиксированнаяСтруктура(ПолучитьИзВременногоХранилища(КэшОперандовАдрес)));
			
			тПараметрыОбласти           = тПараметрыВыводаСтрок.НайтиСтроки(Новый Структура("УровеньВгруппировке,ИмяМакета",ТаблицаУровнейМакетов[ТекущийУровеньАналитики].ИндексМакета,ТекСтрока.ИмяОбласти));
			
			Для Каждого тПолеГруппировки Из ТекСтрока.Группировки Цикл
				ИспользованныеГруппировки.Вставить(тПолеГруппировки.Ключ);
			КонецЦикла;
			
		Иначе			
			ТекМакет = ТекСтрока.МакетЭталон.ПолучитьОбласть();
		КонецЕсли;
		
		Для Каждого СтрРесурс Из КоличествоОдинаковыхИмен Цикл
			
			ИндексИмени = СтрРесурс.Значение; 
			
			Для Инд = 1 По ИндексИмени Цикл
				ОбластьДляВывода = СтрРесурс.Ключ+"_"+Формат(Инд,"ЧГ=0");			
				
				Если   НЕ СтрГруппировка[СтрРесурс.Ключ] = null Тогда
					Если  НЕ мНемасштабируемые.Свойство(ОбластьДляВывода) Тогда
						ОбластьРедактирования = ТекМакет.Область(ОбластьДляВывода);
					    ВставитьЗначениеВОбластьТабличногоДокумента(ОбластьРедактирования, СтрГруппировка[СтрРесурс.Ключ], НастройкаФормата, ТекущаяТочность);
					Иначе
						ОбластьРедактирования = ТекМакет.Область(ОбластьДляВывода);
						ВставитьЗначениеВОбластьТабличногоДокумента(ОбластьРедактирования, СтрГруппировка[СтрРесурс.Ключ], НастройкаФорматаНеМасштабируется, ТекущаяТочность);
					КонецЕсли;
				КонецЕсли;
				
				Если РежимОтклонений Тогда	
					Если  НЕ СтрГруппировка[СтрРесурс.Ключ] = null И НЕ СтрГруппировка[СтрРесурс.Ключ]= "X" Тогда
						Если  СтрГруппировка[СтрРесурс.Ключ]>0 Тогда
							ТекМакет.Область(ОбластьДляВывода).ЦветТекста = ЦветПоложительный;
						ИначеЕсли СтрГруппировка[СтрРесурс.Ключ]<0 Тогда
							ТекМакет.Область(ОбластьДляВывода).ЦветТекста = ЦветОтрицательный;
						КонецЕсли;		
					КонецЕсли;
				КонецЕсли;	
				
				ТекМакет.Область(ОбластьДляВывода).Имя = "";	
			КонецЦикла;		
			КэшОперандов.Вставить(СтрРесурс.Ключ,?(СтрГруппировка[СтрРесурс.Ключ]=Null,0,СтрГруппировка[СтрРесурс.Ключ]));		
		КонецЦикла;	
		
		ЕстьЗаполненнаяАналитика = ИСТИНА;
		
		Если ИерархияНачата тогда
			
			СтарыйОтступ = ТекущийОтступ;
			ЭтоСправочник = Ложь;
			ЭтоГруппаСправочника = Ложь;
			ПолужирныйШрифт = Ложь;
			ЗначениеАналитики = СтрГруппировка[ТаблицаУровнейМакетов[ТекущийУровеньАналитики].ПолеГруппировки];
			
			Если ЗначениеЗаполнено(ЗначениеАналитики) тогда
				
				МетаданныеАналитики = ЗначениеАналитики.Метаданные();
				ЭтоСправочник = ОбщегоНазначения.ЭтоСправочник(МетаданныеАналитики);
				
				Если ЭтоСправочник тогда
					
					ТекущийОтступ = "";
					Для Инд = 1 По СтрГруппировка.Уровень() - ТекущийУровеньАналитики - 1 Цикл
						ТекущийОтступ = ТекущийОтступ + Табуляция;
					КонецЦикла;
					
					СтруктураПараметров.Вставить("ТекущийОтступ", ТекущийОтступ);
										
					Если СтрГруппировка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
						ЭтоГруппаСправочника = Истина;
						ПолужирныйШрифт = Истина;
					КонецЕсли;	
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
				
		Для Каждого СтрПараметр Из тПараметрыОбласти Цикл
			Для Каждого СтрПараметрМассив Из СтрПараметр.ИмяОбластиВмакете Цикл
				тОбластьПараметр  			= ТекМакет.Область(СтрПараметрМассив);			
				тОбластьПараметрТекст       = тОбластьПараметр.Текст;
				тОбластьПараметр.СодержитЗначение = Истина;				
				Попытка
					Если СтрПараметр.ВыражениеПоля = "" Тогда
						ЗначениеПоля = СтрГруппировка[СтрПараметр.ИмяПоляВзапросе+"Представление"];
						тОбластьПараметр.Значение = ТекущийОтступ + СтрЗаменить(тОбластьПараметрТекст,"["+СтрПараметр.ИмяВмакете+"]", ЗначениеПоля);
						
						Если Не ЗначениеЗаполнено(ЗначениеПоля) И СмещениеY <=2 тогда
							СмещениеY = СмещениеY - 1;
							СтруктураПараметров.Вставить("СмещениеY", СмещениеY);
						КонецЕсли;
					Иначе
						ЗначениеПоля = СтрГруппировка[СтрПараметр.ИмяПоляВзапросе];
						тОбластьПараметр.Значение = ТекущийОтступ + СтрЗаменить(тОбластьПараметрТекст,"["+СтрПараметр.ИмяВмакете+"]", ЗначениеПоля);
						
						Если Не ЗначениеЗаполнено(ЗначениеПоля) И СмещениеY <=2 тогда
							СмещениеY = СмещениеY - 1;
							СтруктураПараметров.Вставить("СмещениеY", СмещениеY);
						КонецЕсли;
					КонецЕсли;
										
				Исключение
				КонецПопытки;
			КонецЦикла;	                         	
		КонецЦикла;	
		
		//Формулы
		тКэшИменФормул = КэшИменФормул.НайтиСтроки(Новый Структура("ТипОбластиВывода,ИмяОбластиВывода","Строки",СтрГруппировка.Уид_Области));
		Если КэшИменФормул.Количество() >0 Тогда
			Для Каждого иОбл Из тКэшИменФормул Цикл			
				ТекОбласть = ТекМакет.Области.Найти(иОбл.ИмяОбласти);	
				Если ТекОбласть = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если  НЕ ТекОбласть.Расшифровка = Неопределено И ТекОбласть.Расшифровка.Свойство("ТекстФормулы")  Тогда	
					СтрДляРасчета =  ТекОбласть.Расшифровка.ТекстФормулы;			
					Попытка
						ВставитьЗначениеВОбластьТабличногоДокумента(ТекОбласть, Вычислить(СтрДляРасчета), НастройкаФормата, ТекущаяТочность);
					Исключение
						ВставитьЗначениеВОбластьТабличногоДокумента(ТекОбласть, "#Ошибка");							
					КонецПопытки;			
				КонецЕсли;	
			КонецЦикла;		
		КонецЕсли;                                                                  
		
		Для Каждого тПолеГруппировки Из ТекСтрока.Группировки Цикл
			Если СтрГруппировка[тПолеГруппировки.Ключ] = Null Тогда	
				ЕстьЗаполненнаяАналитика = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ИерархияНачата тогда
			Если ЗначениеЗаполнено(ЗначениеАналитики) тогда 
				
				Если ЭтоСправочник тогда
					
					ЗакрытьГруппировку = Ложь;
					
					Если ЭтоГруппаСправочника тогда
						
						ЗакрытьГруппировку = Истина;
						
						ТекущийОтступ = ТекущийОтступ + Табуляция;
						СтруктураПараметров.Вставить("ТекущийОтступ", ТекущийОтступ);
						СоответствиеОтступов.Вставить(ЗначениеАналитики, ТекущийОтступ); 
						СтруктураПараметров.Вставить("СоответствиеОтступов", СоответствиеОтступов);
						
						Если ПолужирныйШрифт тогда
							тОбластьПараметр.Шрифт = Новый Шрифт(тОбластьПараметр.Шрифт,,, Истина);
						КонецЕсли;
						
						ГруппировкаРодителя = Новый Структура("СмещениеY, ВысотаY, Элемент, ИмяОбластиСтрок", СмещениеY, 0, ЗначениеАналитики, СтрГруппировка.Уид_Области);
						СтруктураПараметров.Вставить("ГруппировкаРодителя", ГруппировкаРодителя);
						
					ИначеЕсли СтарыйОтступ <> ТекущийОтступ тогда
						
						ЗакрытьГруппировку = Истина;
						ГруппировкаРодителя = неопределено;
						
						ТекИнд = МассивГруппировок.Количество() - 2;
						
						Пока ТекИнд >= 0 Цикл
							
							ГруппировкаВерхнегоУровня = МассивГруппировок[ТекИнд];
							ОтступВерхнегоУровня = СоответствиеОтступов.Получить(ГруппировкаВерхнегоУровня.Элемент);
							
							Если СтрДлина(ОтступВерхнегоУровня) <= СтрДлина(ТекущийОтступ) тогда
								ГруппировкаРодителя = ГруппировкаВерхнегоУровня;
								Прервать;									
							КонецЕсли;
							
							ТекИнд = ТекИнд - 1;
							
						КонецЦикла;
						
						СтруктураПараметров.Вставить("ГруппировкаРодителя", ГруппировкаРодителя);
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ГруппировкаРодителя) И ЗакрытьГруппировку тогда					
						ГруппировкаРодителя.ВысотаY = ГруппировкаРодителя.ВысотаY + 1;										
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ТекущаяГруппировка) И НЕ ЗакрытьГруппировку тогда					
						ТекущаяГруппировка.ВысотаY = ТекущаяГруппировка.ВысотаY + 1;				
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ТекущаяГруппировка) И ЗакрытьГруппировку тогда 
						
						МассивГруппировок.Добавить(ТекущаяГруппировка);
						СтруктураПараметров.Вставить("МассивГруппировок", МассивГруппировок);
						
						ОтступТекущегоУровня = СоответствиеОтступов.Получить(ТекущаяГруппировка.Элемент);
						ОтступВерхнегоУровня = "";
						
						ТекИнд = МассивГруппировок.Количество() - 2;
						
						Пока ТекИнд >= 0 Цикл
							
							ГруппировкаВерхнегоУровня = МассивГруппировок[ТекИнд];
							ОтступВерхнегоУровня = СоответствиеОтступов.Получить(ГруппировкаВерхнегоУровня.Элемент);
							
							Если СтрДлина(ОтступВерхнегоУровня) < СтрДлина(ОтступТекущегоУровня) тогда
								ГруппировкаВерхнегоУровня.ВысотаY = ГруппировкаВерхнегоУровня.ВысотаY + ВысотаY;
							Иначе
								ТекИнд = ТекИнд - 1;
								Продолжить;
							КонецЕсли;
							
							ОтступТекущегоУровня = ОтступВерхнегоУровня;
							ТекИнд = ТекИнд - 1;
							
						КонецЦикла;
						
					КонецЕсли;
					
					Если ЗакрытьГруппировку тогда
						ВысотаY = 0;
						ТекущаяГруппировка = ГруппировкаРодителя;
						СтруктураПараметров.Вставить("ТекущаяГруппировка", ТекущаяГруппировка);
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(ГруппировкаРодителя) тогда
				
				ГруппировкаРодителя.ВысотаY = ГруппировкаРодителя.ВысотаY + 1;
				
			КонецЕсли;
		КонецЕсли;
				
		СтруктураПараметров.Вставить("ВысотаY", ВысотаY);
				
		Если ЕстьЗаполненнаяАналитика Тогда
			
			СтруктураРасшифровки = Новый Структура;
			нСтрРасшифровки  			= ТзРасшифровокОбластей.Добавить();
			нСтрРасшифровки.ИмяМакета   = ТекСтрока.ИмяОбласти;
			
			Для Каждого тПолеГруппировки Из ИспользованныеГруппировки Цикл
				СтруктураРасшифровки.Вставить(тПолеГруппировки.Ключ,?(СтрГруппировка[тПолеГруппировки.Ключ]=NULL,НЕОПРЕДЕЛЕНО,СтрГруппировка[тПолеГруппировки.Ключ]));
				нСтрРасшифровки[тПолеГруппировки.Ключ] = ?(СтрГруппировка[тПолеГруппировки.Ключ]=NULL,НЕОПРЕДЕЛЕНО,СтрГруппировка[тПолеГруппировки.Ключ]); 							
			КонецЦикла;
			
			Для Х = 1 По ТекМакет.ВысотаТаблицы Цикл			
				ТекМакет.Область(Х,2,Х,2).Расшифровка = СтруктураРасшифровки;							
			КонецЦикла;	
			
			МакетСтрок.Вывести(ТекМакет);
			нСтрРасшифровки.СмещениеY  	= ТекущийИндексСтроки;
			ТекущийИндексСтроки 		= ТекущийИндексСтроки+ТекМакет.ВысотаТаблицы;
		КонецЕсли;  
		
		СтруктураПараметров.Вставить("тВыборка",СтрГруппировка);
		СтруктураПараметров.Вставить("тПараметрыОбласти",тПараметрыОбласти);
		СтруктураПараметров.Вставить("ТекущийУровеньАналитики",ТекущийУровеньАналитики);
				
		ВывестиГоризонтальныеОбластиРекурсивно(СтруктураПараметров);
		
		СмещениеY = СтруктураПараметров.СмещениеY;
		ВысотаY = СтруктураПараметров.ВысотаY;
		ТекущийОтступ = СтруктураПараметров.ТекущийОтступ;
		ТекущаяГруппировка = СтруктураПараметров.ТекущаяГруппировка;
		ГруппировкаРодителя = СтруктураПараметров.ГруппировкаРодителя;
		МассивГруппировок = СтруктураПараметров.МассивГруппировок;
		СоответствиеОтступов = СтруктураПараметров.СоответствиеОтступов;
		ИерархияНачата = СтруктураПараметров.ИерархияНачата;
		
	КонецЦикла;	
	
КонецПроцедуры	

Функция ПроверитьНеобходимостьВыводаГоризонтальнойОбласти(мПоказателиРаскрытия,ПоказателиОбласти,ОбластьСодержитМакет) 
	
	Если ОбластьСодержитМакет Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Для Каждого текПоказательОбласти Из ПоказателиОбласти Цикл
		
		ДанныеПоказателя = мПоказателиРаскрытия.НайтиСтроки(Новый Структура("УидГруппыОтборов,Показатель",текПоказательОбласти.КлючВерсииОтборов,текПоказательОбласти.Показатель));
		Если ДанныеПоказателя.Количество()>0 Тогда
			Возврат Истина;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции	

Процедура ДополнитьМакетыВыводаКолонкамиРаскрытия(ТекОбластиМакета,УидОбласти,СтруктураРасшифровкаОбластейХ,СтруктураОформления);
	
	Для Каждого СтрОбласть Из ТекОбластиМакета Цикл
		
		тМакет = Новый ТабличныйДокумент;				
		НачальнаяКоординатаХ = 1;
		
		Для Каждого РаскрываемаяОбластьХ Из СтруктураРасшифровкаОбластейХ Цикл 
						
			СтруктураМакетовОбластей = Новый Структура;
			
			Если СтрОбласть.Макет.Области.Найти(РаскрываемаяОбластьХ.Ключ) = Неопределено Тогда
				 Продолжить;
			КонецЕсли;	
			
			тОбластьДляВывода =  СтрОбласть.Макет.ПолучитьОбласть(0,НачальнаяКоординатаХ,0,СтрОбласть.Макет.Область(РаскрываемаяОбластьХ.Ключ).Лево-1);
			Если НачальнаяКоординатаХ = 1 Тогда
				тМакет.Вывести(тОбластьДляВывода);	
			Иначе
				Если СтрОбласть.Макет.Область(РаскрываемаяОбластьХ.Ключ).Лево-1>=НачальнаяКоординатаХ Тогда
					тМакет.Присоединить(тОбластьДляВывода);	
				КонецЕсли;
			КонецЕсли;	
			
			НачальнаяКоординатаХ = СтрОбласть.Макет.Область(РаскрываемаяОбластьХ.Ключ).Право+1; 
			
			Для Каждого СтрЗначение Из РаскрываемаяОбластьХ.Значение Цикл
				
				Если СтрЗначение.СмещениеХ = Неопределено Тогда
					 Продолжить;
				КонецЕсли;	
				
				Если СтруктураМакетовОбластей.Свойство(СтрЗначение.ИмяМакета) Тогда
					ТекущийМакетДляВыводаОбластиШирина = СтруктураМакетовОбластей[СтрЗначение.ИмяМакета];
				Иначе
					ТекущийМакетДляВыводаОбластиШирина = ПолучитьШиринуМакетКолонокДляВыводаОбласти(СтрОбласть.Макет,СтрЗначение.ИмяМакета,РаскрываемаяОбластьХ.Ключ);
					СтруктураМакетовОбластей.Вставить(СтрЗначение.ИмяМакета,ТекущийМакетДляВыводаОбластиШирина);	
				КонецЕсли;	
					
				тОбласть_ = СтрОбласть.Макет.область(СтрЗначение.ИмяМакета);
				тОбластьКВставке = СтрОбласть.Макет.ПолучитьОбласть(0,тОбласть_.Лево,0,тОбласть_.Лево+ТекущийМакетДляВыводаОбластиШирина-1);
				
				//Если задано условное оформление на группы иерархии:
				Если СтрЗначение.ЭтоГруппа И Не СтруктураОформления = Неопределено  Тогда
					Для ИндСтроки =1 По тОбластьКВставке.ВысотаТаблицы Цикл
						Для ИндКолонки = 1 По тОбластьКВставке.ШиринаТаблицы Цикл
							ОбластьРедактирования =  тОбластьКВставке.Область(ИндСтроки,ИндКолонки,ИндСтроки,ИндКолонки);
							ОбластьРедактирования.ЦветФона = СтруктураОформления.ОбластьЯчейкаАгрегат.ЦветФона; 
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;	
				
				тМакет.Присоединить(тОбластьКВставке);
				
			КонецЦикла;	
				
		КонецЦикла;
		
		Если НачальнаяКоординатаХ<=СтрОбласть.Макет.ШиринаТаблицы Тогда
			тОбластьДляВывода =  СтрОбласть.Макет.ПолучитьОбласть(0,НачальнаяКоординатаХ,0,СтрОбласть.Макет.ШиринаТаблицы);
			тМакет.Присоединить(тОбластьДляВывода);
		КонецЕсли;
		
		СтрОбласть.МакетЭталон = тМакет;
		
	Конеццикла;	
		
КонецПроцедуры	

Функция ПолучитьШиринуМакетКолонокДляВыводаОбласти(тМакет,ИмяМакета,ИмяМакетаГруппы)
	
	ШиринаМакета = 0;
	
	тМакетКопия = тМакет.ПолучитьОбласть(ИмяМакетаГруппы);
	
	ТзМакетов = Новый ТаблицаЗначений;
	ТзМакетов.Колонки.Добавить("ИмяМакета");
	ТзМакетов.Колонки.Добавить("Лево");
	
	Для Каждого СтрОбласть Из тМакетКопия.Области Цикл
		
		Если  СтрОбласть.Верх = 0 Тогда
			нТзМакетов 			= ТзМакетов.Добавить();
			нТзМакетов.Лево 		= СтрОбласть.Лево;
			нТзМакетов.ИмяМакета 	= СтрОбласть.Имя;
		КонецЕсли;	
		
	КонецЦикла;	
	
	ТзМакетов.Сортировать("Лево");
	
	Для Инд = 0 По ТзМакетов.Количество()-1 Цикл
		
		Если ТзМакетов[Инд].ИмяМакета = ИмяМакета Тогда
			
			Если Инд = ТзМакетов.Количество()-1 Тогда
				ШиринаМакета = тМакетКопия.ШиринаТаблицы -  ТзМакетов[Инд].Лево+1; 
			Иначе	
				СледжующийМакетЛево = ТзМакетов[Инд+1].Лево;
				ШиринаМакета =   СледжующийМакетЛево - ТзМакетов[Инд].Лево; 
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат ШиринаМакета;
	
КонецФункции	

Функция ПолучитьМакетВыводимойОбласти(ЭталонныйМакет,вОбласть,СтруктураМакетаСтрок,СтруктураМакетаКолонок,МакетТаблиц)

	Если вОбласть.ТипОбласти = "Синтетика" Тогда			
		МакетОбласти = ЭталонныйМакет.ПолучитьОбласть(вОбласть.ИмяОбласти);		
	Иначе	
		МакетОбласти =ПолучитьОбластьРаскрытия(вОбласть,СтруктураМакетаСтрок,СтруктураМакетаКолонок,МакетТаблиц);
	КонецЕсли;	
		
	Возврат МакетОбласти;
	
КонецФункции

Функция ПолучитьОбластьРаскрытия(тРаскрываемаяОбласть,СтруктураМакетаСтрок,СтруктураМакетаКолонок,МакетТаблиц)
	
	//Строки
	Если  тРаскрываемаяОбласть.ТипОбласти = "Строки" Тогда	
		
		Если НЕ СтруктураМакетаСтрок.Свойство(тРаскрываемаяОбласть.ИмяОбластиСтрок) Тогда
			 Возврат Неопределено;
		КонецЕсли;			
		тМакетСтрок = СтруктураМакетаСтрок[тРаскрываемаяОбласть.ИмяОбластиСтрок];
		НачалоY 	= 1;
		ОкончаниеY  = тМакетСтрок.ВысотаТаблицы;;
		ОкончаниеХ  = тМакетСтрок.ШиринаТаблицы;	 	
		ИтоговаяОбласть  = тМакетСтрок.ПолучитьОбласть(НачалоY,1,ОкончаниеY,ОкончаниеХ);	
		
	КонецЕсли;	
	//Колонки
	Если  тРаскрываемаяОбласть.ТипОбласти = "Колонки" Тогда	
		
		тМакетКолонок = СтруктураМакетаКолонок[тРаскрываемаяОбласть.ИмяОбластиКолонок];		
		НачалоY 	= 1;
		ОкончаниеY  = тМакетКолонок.ВысотаТаблицы;;
		ОкончаниеХ  = тМакетКолонок.ШиринаТаблицы;	 	
		ИтоговаяОбласть  = тМакетКолонок.ПолучитьОбласть(НачалоY,1,ОкончаниеY,ОкончаниеХ);	
		
	КонецЕсли;	
	
	Возврат ИтоговаяОбласть;
	
КонецФункции	

Функция ПодготовитьТаблицуПараметров()
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("ИмяПараметра"		,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	ТаблицаПараметров.Колонки.Добавить("ЗначениеПараметра"	,);
	
	Нстр 					= ТаблицаПараметров.Добавить();
	Нстр.ИмяПараметра 		= "Сценарий";
	Нстр.ЗначениеПараметра 	= ЭтотОбъект[Нстр.ИмяПараметра];
	
	Нстр 					= ТаблицаПараметров.Добавить();
	Нстр.ИмяПараметра 		= "ПериодОтчетаНачало";
	Нстр.ЗначениеПараметра 	= ЭтотОбъект["ПериодОтчета"];
	
	Нстр 					= ТаблицаПараметров.Добавить();
	Нстр.ИмяПараметра 		= "ПериодОтчетаОкончание";
	Нстр.ЗначениеПараметра 	= ЭтотОбъект[Нстр.ИмяПараметра];
	
	Нстр 					= ТаблицаПараметров.Добавить();
	Нстр.ИмяПараметра 		= "Организация";
	Нстр.ЗначениеПараметра 	= ЭтотОбъект[Нстр.ИмяПараметра];
	
	Нстр 					= ТаблицаПараметров.Добавить();
	Нстр.ИмяПараметра 		= "Проект";
	Нстр.ЗначениеПараметра 	= ЭтотОбъект[Нстр.ИмяПараметра];
	
	Нстр 					= ТаблицаПараметров.Добавить();
	Нстр.ИмяПараметра 		= "Валюта";
	Нстр.ЗначениеПараметра 	= ЭтотОбъект[Нстр.ИмяПараметра];
	
	Нстр 					= ТаблицаПараметров.Добавить();
	Нстр.ИмяПараметра 		= "ЕдиницаИзмерения";
	Нстр.ЗначениеПараметра 	= ВернутьПредставлениеЕдиницыИзмерения();
	
	Возврат ТаблицаПараметров;
	
КонецФункции	

Функция ВернутьПредставлениеЕдиницыИзмерения()

   Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
	    Возврат "единицы";
   ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
	  	Возврат "тысячи"; 
   ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 тогда	   
	    Возврат "миллионы";
   КонецЕсли;

КонецФункции	

Функция ОбработатьСтрокуШаблонаЗаголовкаПараметра(ИсходнаяСтрока,ДоступныеПоля)
	
	ТзВозврата = Новый ТаблицаЗначений;
	ТзВозврата.Колонки.Добавить("ТекстОбласти");
	ТзВозврата.Колонки.Добавить("ТипОбласти");
	ТзВозврата.Колонки.Добавить("ЗначениеПараметра");
	
	Пока СтрНайти(ИсходнаяСтрока,"Параметры.")>0 Цикл		
		ПозицияНачалаПараметра 			= СтрНайти(ИсходнаяСтрока,"[Параметры."); 
		ПозицияОкончанияПараметра       = ?(СтрНайти(ИсходнаяСтрока,"]")=0,СтрДлина(ИсходнаяСтрока),СтрНайти(ИсходнаяСтрока,"]")); 
		ТекстДоПараметра                = Лев(ИсходнаяСтрока,ПозицияНачалаПараметра-1);
		Параметр 						= СтрЗаменить(Сред(ИсходнаяСтрока,ПозицияНачалаПараметра+1,ПозицияОкончанияПараметра-ПозицияНачалаПараметра-1),"Параметры.","");		
		
		ПозицияНачалаФункции 			= СтрНайти(ИсходнаяСтрока,"СдвигПоПериоду([");           
		ПозицияОкончанияФункции 		= СтрНайти(ИсходнаяСтрока,"])");
		
		нСтрока = ТзВозврата.Добавить();
		нСтрока.ТекстОбласти = ТекстДоПараметра;
		нСтрока.ТипОбласти = "Строка";
		
		ПараметрТочка 	= СтрНайти(Параметр,".");	
		ПараметрДоТочки 			= ?(ПараметрТочка=0,Параметр,Лев(Параметр,ПараметрТочка-1));
		ПарамтерПослеТочки          = ?(ПараметрТочка=0,"Ссылка",Сред(Параметр,ПараметрТочка+1,СтрДлина(Параметр)-ПараметрТочка+1));
		
		кПараметр = ДоступныеПоля.НайтиСтроки(Новый Структура("ИмяПараметра",СокрЛП(ПараметрДоТочки))).Количество();
		
		Если кПараметр = 0 Тогда
			нСтрока = ТзВозврата.Добавить();
			нСтрока.ТекстОбласти    = Параметр;
			нСтрока.ТипОбласти   	= "Строка";
		Иначе	
			нСтрока = ТзВозврата.Добавить();
			нСтрока.ТекстОбласти	= Параметр;
			нСтрока.ТипОбласти 		= "Параметр";
			Попытка
				Если ПарамтерПослеТочки = "Ссылка" Тогда
					нСтрока.ЗначениеПараметра	 	= ДоступныеПоля.НайтиСтроки(Новый Структура("ИмяПараметра",СокрЛП(ПараметрДоТочки)))[0].ЗначениеПараметра;
				Иначе
					нСтрока.ЗначениеПараметра	 	= ДоступныеПоля.НайтиСтроки(Новый Структура("ИмяПараметра",СокрЛП(ПараметрДоТочки)))[0].ЗначениеПараметра[СокрЛП(ПарамтерПослеТочки)];
				КонецЕсли;	
				
				Если ПозицияНачалаФункции>0 И ПозицияОкончанияФункции>0 И (ПараметрДоТочки = "ПериодОтчетаНачало" ИЛИ ПараметрДоТочки = "ПериодОтчетаОкончание") Тогда 
					нСтрока.ЗначениеПараметра = ОбщегоНазначенияУХ.глОтносительныйПериод(нСтрока.ЗначениеПараметра,-1);
				КонецЕсли;	
			Исключение
				нСтрока.ЗначениеПараметра	    = "#ОшибкаВычисленияВыражения";
			КонецПопытки	
		КонецЕсли;		
		ИсходнаяСтрока =  Прав(ИсходнаяСтрока,СтрДлина(ИсходнаяСтрока)-ПозицияОкончанияПараметра);	
	КонецЦикла;	
	
	нСтрока = ТзВозврата.Добавить();
	нСтрока.ТекстОбласти = ИсходнаяСтрока;
	нСтрока.ТипОбласти = "Строка";
		
	Возврат ТзВозврата;
	
КонецФункции	

Процедура СформироватьОтборПоПериодам(ЗапросСинтетика,УидГруппыОтборов,ИмяПараметра,ЭтоОтборТаблицы = Ложь)
	 
	ОтборС  		=  РасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УидГруппыОтборов,ПолеКод",(УидГруппыОтборов),"ПериодС"));
	ОтборПо  		=  РасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УидГруппыОтборов,ПолеКод",(УидГруппыОтборов),"ПериодПо"));	
	
	Если ОтборС.Количество() = 0 Тогда
		ОтборС  		=  НастройкиТаблицРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов,ПолеКод",УидГруппыОтборов,"ПериодС"));
		ОтборПо  		=  НастройкиТаблицРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов,ПолеКод",УидГруппыОтборов,"ПериодПо"));
	КонецЕсли;
	
	Если ОтборС.Количество() = 0 Тогда	
		ОтборС  		=  НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов,ПолеКод",УидГруппыОтборов,"ПериодС"));          
		ОтборПо  		=  НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов,ПолеКод",УидГруппыОтборов,"ПериодПо"));
	КонецЕсли;
		
	
	Если ОтборС.Количество() = 0 Тогда
	Иначе	
		ОтборС = ОтборС[0];
	КонецЕсли;		
	Если ОтборПо.Количество() = 0 Тогда
		
	Иначе	
		ОтборПо = ОтборПо[0];
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(ТзКэшПериодовАдрес) Тогда
		ТзКэшПериодов = Обработки.АналитическийБланк.ПолучитьОписаниеТаблицыКэшаПериодов();
	Иначе	  
		ТзКэшПериодов = ПолучитьИзВременногоХранилища(ТзКэшПериодовАдрес);
	КонецЕсли;	  
	
	СуществующийОтборПоПериоду = ТзКэшПериодов.НайтиСтроки(Новый Структура("ПериодС,ПериодПо",ОтборС.Отбор+Строка(ОтборС.ЗначениеОтбора),ОтборПо.Отбор+Строка(ОтборПо.ЗначениеОтбора)));
	 	
	Если СуществующийОтборПоПериоду.Количество() = 0 Тогда		
		Если ОтборС.Отбор = "Период начала отчета" Тогда
			тПериодС  = ПериодОтчета;
		ИначеЕсли ОтборС.Отбор = "Период окончания отчета" Тогда
			тПериодС  = ПериодОтчетаОкончание;
		ИначеЕсли ОтборС.Отбор = "Период начала со сдвигом" Тогда
			тПериодС  = АналитическийБланкУХСервер.ПолучитьПериодПоСдвигу(ПериодОтчета.ДатаНачала,ОтборС,Периодичность);
		ИначеЕсли ОтборС.Отбор = "Период окончания со сдвигом" Тогда
			тПериодС  = АналитическийБланкУХСервер.ПолучитьПериодПоСдвигу(ПериодОтчетаОкончание.ДатаНачала,ОтборС,Периодичность);
		Иначе	
			тПериодС  = ЗначениеИзСтрокиВнутр(ОтборС.ЗначениеОтбораСтрока);;
		КонецЕсли;		
		Если ОтборПо.Отбор = "Период начала отчета" Тогда
			тПериодПо  = ПериодОтчета;
		ИначеЕсли ОтборПо.Отбор = "Период окончания отчета" Тогда
			тПериодПо  = ПериодОтчетаОкончание;
		ИначеЕсли ОтборПо.Отбор = "Период начала со сдвигом" Тогда
			тПериодПо  = АналитическийБланкУХСервер.ПолучитьПериодПоСдвигу(ПериодОтчета.ДатаНачала,ОтборПо,Периодичность);
		ИначеЕсли ОтборПо.Отбор = "Период окончания со сдвигом" Тогда
			тПериодПо  = АналитическийБланкУХСервер.ПолучитьПериодПоСдвигу(ПериодОтчетаОкончание.ДатаНачала,ОтборПо,Периодичность);
		Иначе	                                                                                                                
			тПериодПо  = ЗначениеИзСтрокиВнутр(ОтборПо.ЗначениеОтбораСтрока);
		КонецЕсли;
		
		тПериоды 				=  ПериодыУХ.ПолучитьПодчиненныеПериоды(тПериодС,тПериодПо,Периодичность);
		нСтрокаКэш      		=  ТзКэшПериодов.Добавить();
		нСтрокаКэш.ПериодС      =  ОтборС.Отбор+Строка(ОтборС.ЗначениеОтбора);
		нСтрокаКэш.ПериодПо     =  ОтборПо.Отбор+Строка(ОтборПо.ЗначениеОтбора);
		нСтрокаКэш.Периоды      =  тПериоды;	
	Иначе		
		тПериоды = СуществующийОтборПоПериоду[0].Периоды;	
	КонецЕсли;	
		
	ЗапросСинтетика.УстановитьПараметр(ИмяПараметра,тПериоды);	
	ТзКэшПериодовАдрес = ПоместитьВоВременноеХранилище(ТзКэшПериодов,Новый УникальныйИдентификатор);
	
КонецПроцедуры

Процедура ВосстановитьГруппировкиСтрокИсходногоМакета(ПолеТабличногоДокументаМакет)
	
	ВысотаТаблицы 		= ПолеТабличногоДокументаМакет.ВысотаТаблицы;
	НачалоГруппировки 	= 1;
	
	Пока Истина Цикл
		
		ОбластьПоиска 				= ПолеТабличногоДокументаМакет.Область(НачалоГруппировки,1,ВысотаТаблицы,1);
		ОбластьНачалаГруппировки 	= ПолеТабличногоДокументаМакет.НайтиТекст("[",,ОбластьПоиска);		
		Если ОбластьНачалаГруппировки = Неопределено Тогда
			Прервать;
		КонецЕсли;
		НачалоГруппировки = ОбластьНачалаГруппировки.Верх+1;
		
		ОбластиОкончанияГруппировкиТекст = СтрРазделить(ОбластьНачалаГруппировки.Текст,"&&",Ложь);	
		Для Каждого ОблТекст Из ОбластиОкончанияГруппировкиТекст Цикл	
				
			Если Лев(ОблТекст,1) = "]" Тогда //Это тэг окончания группиовки
				Продолжить;
			КонецЕсли;
				
			ОбластьОкончанияГруппировки = ПолеТабличногоДокументаМакет.НайтиТекст("]"+СтрЗаменить(ОблТекст,"[",""),,ОбластьПоиска);
			Если ОбластьОкончанияГруппировки = Неопределено Тогда
				ПолеТабличногоДокументаМакет.Область(НачалоГруппировки,0,ВысотаТаблицы,0).Сгруппировать();
			Иначе
				ПолеТабличногоДокументаМакет.Область(НачалоГруппировки,0,ОбластьОкончанияГруппировки.Верх-1,0).Сгруппировать();
			КонецЕсли;	
			
		КонецЦикла;	 	
		
	КонецЦикла;	
	
КонецПроцедуры

//Функция ПолучитьТекстЗапросаБазаИзОсновногоТекста()
//Получает модифицированный текст запроса для данных базовой версии из основного текста запроса
Функция ПолучитьТекстЗапросаБазаИзОсновногоТекста(тДанные,ПараметрыБазовойВерсии)
	
	Если ПараметрыБазовойВерсии.Свойство("СдвигПоПериоду") Тогда
		СдвигПоПериоду = ПараметрыБазовойВерсии.СдвигПоПериоду;
	Иначе	
		СдвигПоПериоду = 0;
	КонецЕсли;	
	
	ТекстЗапросаДанныеПоказателей_База  = тДанные.ТекстЗапросаВыводаОбластей;
	
	//Заменям все псеводонимы временных таблиц версий 
	ТекстЗапросаДанныеПоказателей_База = СтрЗаменить(ТекстЗапросаДанныеПоказателей_База,"втВерсииБаза_","БАЗА_втВерсииБаза_");
	ТекстЗапросаДанныеПоказателей_База = СтрЗаменить(ТекстЗапросаДанныеПоказателей_База,"тмПоказателиРаскрытия","БАЗА_тмПоказателиРаскрытия");
	ТекстЗапросаДанныеПоказателей_База = СтрЗаменить(ТекстЗапросаДанныеПоказателей_База,"мПоказателиРаскрытияВрем","БАЗА_мПоказателиРаскрытияВрем");
	ТекстЗапросаДанныеПоказателей_База = СтрЗаменить(ТекстЗапросаДанныеПоказателей_База,"тзПоказатели","БАЗА_тзПоказатели");
	
	ТекстЗапросаДанныеПоказателей_База = ТекстЗапросаДанныеПоказателей_База+"
	|;
	|// ЗАПРОС С ДЕЛТЬТОЙ ДВУХ СРЕЗОВ
	|ВЫБРАТЬ
	|	мПоказателиРаскрытия.Показатель КАК Показатель,
	|	мПоказателиРаскрытия.ИмяОбластиДляВывода КАК ИмяОбластиДляВывода,
	|	мПоказателиРаскрытия.УидГруппыОтборов КАК УидГруппыОтборов,
	|	Периоды.Ссылка КАК ПериодОтчета,
	|	мПоказателиРаскрытия.Сценарий КАК Сценарий,
	|	мПоказателиРаскрытия.Организация КАК Организация,
	|	мПоказателиРаскрытия.Проект КАК Проект,
	|	мПоказателиРаскрытия.Аналитика1 КАК Аналитика1,
	|	мПоказателиРаскрытия.Аналитика2 КАК Аналитика2,
	|	мПоказателиРаскрытия.Аналитика3 КАК Аналитика3,
	|	мПоказателиРаскрытия.Аналитика4 КАК Аналитика4,
	|	мПоказателиРаскрытия.Аналитика5 КАК Аналитика5,
	|	мПоказателиРаскрытия.Аналитика6 КАК Аналитика6,
	|	мПоказателиРаскрытия.АналитикаВалюта КАК АналитикаВалюта,
	|	-1*мПоказателиРаскрытия.Значение КАК Значение,
	|	-1*мПоказателиРаскрытия.ЗначениеВалюта КАК ЗначениеВалюта,
	|	мПоказателиРаскрытия.ПоказательКод КАК ПоказательКод
	|ПОМЕСТИТЬ вт_Дельта
	|ИЗ
	|	БАЗА_тмПоказателиРаскрытия КАК мПоказателиРаскрытия
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Периоды КАК Периоды
	|	ПО мПоказателиРаскрытия.ПериодОтчета.ДатаНачала 			= ДобавитьКДате(Периоды.ДатаНачала,"+ПолучитьПредставлениеПериодичностиДляЗапроса()+","+СдвигПоПериоду+")
	|		И Периоды.Периодичность 		= &Периодичность
	|		И Периоды.Произвольный 			= Ложь
	|		И Периоды.ПометкаУдаления 		= Ложь
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	мПоказателиРаскрытия.Показатель КАК Показатель,
	|	мПоказателиРаскрытия.ИмяОбластиДляВывода КАК ИмяОбластиДляВывода,
	|	мПоказателиРаскрытия.УидГруппыОтборов КАК УидГруппыОтборов,
	|	мПоказателиРаскрытия.ПериодОтчета КАК ПериодОтчета,
	|	мПоказателиРаскрытия.Сценарий КАК Сценарий,
	|	мПоказателиРаскрытия.Организация КАК Организация,
	|	мПоказателиРаскрытия.Проект КАК Проект,
	|	мПоказателиРаскрытия.Аналитика1 КАК Аналитика1,
	|	мПоказателиРаскрытия.Аналитика2 КАК Аналитика2,
	|	мПоказателиРаскрытия.Аналитика3 КАК Аналитика3,
	|	мПоказателиРаскрытия.Аналитика4 КАК Аналитика4,
	|	мПоказателиРаскрытия.Аналитика5 КАК Аналитика5,
	|	мПоказателиРаскрытия.Аналитика6 КАК Аналитика6,
	|	мПоказателиРаскрытия.АналитикаВалюта КАК АналитикаВалюта,
	|	мПоказателиРаскрытия.Значение КАК Значение,
	|	мПоказателиРаскрытия.ЗначениеВалюта КАК ЗначениеВалюта,
	|	мПоказателиРаскрытия.ПоказательКод КАК ПоказательКод
	|ИЗ
	|	тмПоказателиРаскрытия КАК мПоказателиРаскрытия
	|;
	|// УДАЛЯЕМ ИСХОДНУЮ тмПоказателиРаскрытия	
	|
	|УНИЧТОЖИТЬ тмПоказателиРаскрытия 
	|
	|;
	|// СГРУППИРОВАННЫЙ ЗАПРОС С БАЗОЙ ПОМЕЩАЕМ В НОВУЮ тмПоказателиРаскрытия
	|ВЫБРАТЬ
	|	мПоказателиРаскрытия.Показатель КАК Показатель,
	|	мПоказателиРаскрытия.ИмяОбластиДляВывода КАК ИмяОбластиДляВывода,
	|	мПоказателиРаскрытия.УидГруппыОтборов КАК УидГруппыОтборов,
	|	мПоказателиРаскрытия.ПериодОтчета КАК ПериодОтчета,
	|	мПоказателиРаскрытия.Сценарий КАК Сценарий,
	|	мПоказателиРаскрытия.Организация КАК Организация,
	|	мПоказателиРаскрытия.Проект КАК Проект,
	|	мПоказателиРаскрытия.Аналитика1 КАК Аналитика1,
	|	мПоказателиРаскрытия.Аналитика2 КАК Аналитика2,
	|	мПоказателиРаскрытия.Аналитика3 КАК Аналитика3,
	|	мПоказателиРаскрытия.Аналитика4 КАК Аналитика4,
	|	мПоказателиРаскрытия.Аналитика5 КАК Аналитика5,
	|	мПоказателиРаскрытия.Аналитика6 КАК Аналитика6,
	|	мПоказателиРаскрытия.АналитикаВалюта КАК АналитикаВалюта,
	|	""X"" КАК ЗначениеНеЧисло,
	|	СУММА(мПоказателиРаскрытия.Значение) КАК Значение,
	|	СУММА(мПоказателиРаскрытия.ЗначениеВалюта) КАК ЗначениеВалюта,
	|	мПоказателиРаскрытия.ПоказательКод КАК ПоказательКод
	|ПОМЕСТИТЬ тмПоказателиРаскрытия
	|ИЗ
	|	вт_Дельта КАК мПоказателиРаскрытия
	|СГРУППИРОВАТЬ ПО
	|	Показатель,
	|	ИмяОбластиДляВывода,
	|	УидГруппыОтборов,
	|	ПериодОтчета,
	|	Сценарий,
	|	Организация,
	|	Проект,
	|	Аналитика1,
	|	Аналитика2,
	|	Аналитика3,
	|	Аналитика4,
	|	Аналитика5,
	|	Аналитика6,
	|	АналитикаВалюта,
	|	ПоказательКод";
	
	Возврат ТекстЗапросаДанныеПоказателей_База;
	
КонецФункции	

Процедура УстановитьДополнительоеОформлениеСводнойТаблицы(ПолеТабличногоДокументаМакет,СтруктураПараметров)
	
	//Фиксация заголовка строк и колонок
	ПолеТабличногоДокументаМакет.ФиксацияСлева = 1;
	Для ИндСтроки = 2 По ПолеТабличногоДокументаМакет.ВысотаТаблицы Цикл	
		Если ТипЗнч(ПолеТабличногоДокументаМакет.Область(ИндСтроки,1,ИндСтроки,1).Расшифровка) = Тип("Структура") Тогда
			ПолеТабличногоДокументаМакет.ФиксацияСверху = ИндСтроки-1;
			Прервать;
		КонецЕсли;		
	КонецЦикла;	
	
	//Заголовок шапки
	Если СтруктураПараметров.Свойство("ЗаголовокСводнойТаблицы") Тогда
	Для ИндСтроки = 2 По ПолеТабличногоДокументаМакет.ФиксацияСверху Цикл
		ПолеТабличногоДокументаМакет.Область(ИндСтроки,1,ИндСтроки,1).Текст = СтруктураПараметров.ЗаголовокСводнойТаблицы;
	КонецЦикла;	
    КонецЕсли;
	
	//Подсветка отклонений
	Для ИндСтроки = 2 По ПолеТабличногоДокументаМакет.ВысотаТаблицы Цикл
		Для ИндКолонки = 2 По ПолеТабличногоДокументаМакет.ШиринаТаблицы Цикл 
			тОбласть = ПолеТабличногоДокументаМакет.Область(ИндСтроки,ИндКолонки,ИндСтроки,ИндКолонки);
			Если Не тОбласть.Расшифровка =  Неопределено 
				И тОбласть.Расшифровка.Свойство("УидФормулы") Тогда
				Если тОбласть.Значение>0 Тогда
					 тОбласть.ЦветТекста = ЦветПоложительный;
				ИначеЕсли тОбласть.Значение<0 Тогда	
					 тОбласть.ЦветТекста = ЦветОтрицательный;
				КонецЕсли;	
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла;	
	
	
КонецПроцедуры	


#Область РаботаСРедактированиемПоказателей 

Процедура ВставитьЗначениеВОбласть(ПолеТабличногоДокументаМакет,ИмяОбласти,Значение,ТекущаяОбластьТекст=Неопределено,Режим=Неопределено,Объект,КодРесурса="",ФлИзменений="",ОтображатьСуммуВДопВалюте=Ложь) Экспорт;
		
	логИзмененныхПоказателей = Неопределено;                
	
	Если ЗначениеЗаполнено(логИзмененныхДанныхАдрес) Тогда
		логИзмененныхПоказателей = ПолучитьИзВременногоХранилища(логИзмененныхДанныхАдрес);		
	Иначе	
		логИзмененныхПоказателей = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать().ТаблицаИзмененныхПоказателей.ВыгрузитьКолонки();		
		логИзмененныхПоказателей.Индексы.Добавить("Сценарий,ПериодОтчета,Организация,Проект,ПоказательОтчета,Аналитика1,Аналитика2,Аналитика3,Аналитика4,Аналитика5");
	КонецЕсли;
	
	Если ТзСвойстваПоказателейАдрес = "" Тогда
		Возврат;   //в бланке нет показателей.
	КонецЕсли;	
	
	мПоказателиРаскрытия         = ПолучитьИзВременногоХранилища(мПоказателиРаскрытияАдрес);
	ТзСвойстваПоказателей		 = ПолучитьИзВременногоХранилища(ТзСвойстваПоказателейАдрес);
	
	СтруктураНезаполненыхАналитик 	= Новый Структура;
	СтруктураОтбираемыхАналитик 	= Новый Структура;
	
	ОблДляВставки=ПолеТабличногоДокументаМакет.Область(ИмяОбласти);
	ОС=ПолеТабличногоДокументаМакет.ПолучитьОбласть(ИмяОбласти);

    КэшАналитикПоказателей = ПолучитьИзВременногоХранилища(КэшАналитикПоказателейАдрес);
			
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		МассивДляВставки = Значение; 
	Иначе
		МассивДляВставки = Новый Массив;
		МассивДляВставкиЗначения = Новый Массив();
		МассивДляВставкиЗначения.Добавить(Значение);
		МассивДляВставки.Добавить(МассивДляВставкиЗначения);
	КонецЕсли;
		
	//Нечего вставлять - возвращаемся
	Если МассивДляВставки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;	
	
	ОднаЯчейка = Ложь;
		
	//Выделяли одну ячейку и вставлем одно значение в нее
	Если  МассивДляВставки[0] = Неопределено Тогда
		  Возврат;
	КонецЕсли;	
		
	Если МассивДляВставки.Количество()=1 И МассивДляВставки[0].Количество()=1 И ОблДляВставки.Лево=ОблДляВставки.Право И ОблДляВставки.Верх=ОблДляВставки.Низ тогда
	    ОднаЯчейка=Истина;
	    ЗначениеДляВставки=МассивДляВставки[0][0];
	КонецЕсли;
	
	//Определим размер вставляемой области
	МаксКоличествоХ = 0;
	МаксКоличествоУ = МассивДляВставки.Количество();

	Для Каждого Элстроки Из МассивДляВставки Цикл
		Если Элстроки.Количество()>МаксКоличествоХ Тогда
			 МаксКоличествоХ =Элстроки.Количество(); 
		КонецЕсли;		
	КонецЦикла;
	
	//Видимо вставляем только пустые значения по Х или 0, если число
	Если МаксКоличествоХ = 0 Тогда		
		ЗначениеДляВставки = неопределено;
	КонецЕсли;
	
	ОднаКолонка = Ложь;
	ОднаСтрока=Ложь;

	Если МаксКоличествоУ=1 И МаксКоличествоХ>1 тогда
	     ОднаСтрока=Истина;
	КонецЕсли;
	Если МаксКоличествоУ>1 И МаксКоличествоХ=1 тогда
	     ОднаКолонка=Истина;
	КонецЕсли;

	Если ОднаЯчейка Тогда
		
		СтруктураРасшифровки 			= АналитическийБланкУХСервер.ПолучитьСтруктуруРасшифровки(ПолеТабличногоДокументаМакет,Объект,ЭтотОбъект,ИмяОбласти,ОблДляВставки.Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик,ТзСвойстваПоказателей);	
		Если ТипЗнч(СтруктураРасшифровки) <> Тип("Структура") Тогда
			Возврат;		// Получено неизвестное значение.
		Иначе
			// Проверка пройдена успешно. Продолжаем выполнение.
		КонецЕсли;	
		Если Не СтруктураРасшифровки.Свойство("ПоказательСсылка") Тогда
			Возврат;
		КонецЕсли;	
		Если НЕ ПроверитьВозможностьРедактированияТекущегоСреза(СтруктураРасшифровки,Объект) Тогда
			ФлИзменений = Нстр("ru = 'Выделенные ячейки недоступны для редактирования'");
			Возврат;
		КонецЕсли;
				
		Если ОблДляВставки.Расшифровка = Неопределено Тогда
			Возврат;
		КонецЕсли;		
		Если  СтруктураНезаполненыхАналитик.Количество()>0 И Не РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.ОбратноеРаспределение Тогда
			Возврат;
		КонецЕсли;		
		
		ФлОшибки = Ложь;
		ВставитьЗначения(ЗначениеДляВставки,СтруктураРасшифровки,ОблДляВставки,логИзмененныхПоказателей,мПоказателиРаскрытия,ТекущаяОбластьТекст,КэшАналитикПоказателей,ФлОшибки);	
		логИзмененныхДанныхАдрес = ПоместитьВоВременноеХранилище(логИзмененныхПоказателей,Новый УникальныйИдентификатор);	
		
		Если Не ФлОшибки  Тогда
			
			ВставитьЗначениеВОбластьТабличногоДокумента(ОблДляВставки, ЗначениеДляВставки, НастройкаФормата, ТекущаяТочность);
			
			Если СтруктураРасшифровки.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
				ОблДляВставки.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
			КонецЕсли;
		КонецЕсли;	
		
		Возврат;
	КонецЕсли;
	
	//Если выделено много ячеек, а вставляется одно значение - то копируем его  во все
	ФлНезаблокированныхЯчеек = Ложь;
	Если МаксКоличествоУ=1 И  МаксКоличествоХ=1 Тогда
		Для ИндексСтрока = ОблДляВставки.Верх По ОблДляВставки.Низ Цикл
			Для ИндексКолонка = ОблДляВставки.Лево По ОблДляВставки.Право Цикл
				НужноеЗначение = МассивДляВставки[0][0];
				ТекОбласть = ПолеТабличногоДокументаМакет.Область(ИндексСтрока,ИндексКолонка,ИндексСтрока,ИндексКолонка);
				
				Если ТекОбласть.Расшифровка = Неопределено Тогда
					Продолжить;
				КонецЕсли;	
				СтруктураНезаполненыхАналитик 	= Новый Структура;
				СтруктураОтбираемыхАналитик 	= Новый Структура;
				СтруктураРасшифровки 			= АналитическийБланкУХСервер.ПолучитьСтруктуруРасшифровки(ПолеТабличногоДокументаМакет,Объект,ЭтотОбъект,ТекОбласть.Имя,ТекОбласть.Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик,ТзСвойстваПоказателей);
				Если ТипЗнч(СтруктураРасшифровки) <> Тип("Структура") Тогда
					Продолжить;		// Получено неизвестное значение.
				Иначе
					// Проверка пройдена успешно. Продолжаем выполнение.
				КонецЕсли;	
				Если Не СтруктураРасшифровки.Свойство("ПоказательСсылка") Тогда
					Продолжить;
				КонецЕсли;	
				
				Если НЕ ПроверитьВозможностьРедактированияТекущегоСреза(СтруктураРасшифровки,Объект) Тогда
					Продолжить;
				Иначе	
					ФлНезаблокированныхЯчеек = Истина;
				КонецЕсли;	
								
				Если ТекОбласть.Расшифровка = Неопределено Тогда
					Продолжить;
				КонецЕсли;	
				
				Если  СтруктураНезаполненыхАналитик.Количество()>0 И Не РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.ОбратноеРаспределение Тогда
					Продолжить;
				КонецЕсли;
				Если   СтруктураРасшифровки.Свойство("ПоказательКод") Тогда
					ИмяТекущегоРесурса = СтруктураРасшифровки.ПоказательКод;
				Иначе	
					Продолжить;
				КонецЕсли;
				Если ТекОбласть.СодержитЗначение И ТекОбласть.Значение = НужноеЗначение Тогда
					Продолжить;	
				КонецЕсли;	

				
				ФлОшибки = Ложь;
				ВставитьЗначения(НужноеЗначение,СтруктураРасшифровки,ОблДляВставки,логИзмененныхПоказателей,мПоказателиРаскрытия,ТекущаяОбластьТекст,КэшАналитикПоказателей,ФлОшибки);	
				Если Не ФлОшибки  Тогда
					
					ТекОбласть.СодержитЗначение = Истина;
					ВставитьЗначениеВОбластьТабличногоДокумента(ТекОбласть, НужноеЗначение, НастройкаФормата, ТекущаяТочность);
					
					Если СтруктураРасшифровки.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
						ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла;
		КонецЦикла;
		логИзмененныхДанныхАдрес = ПоместитьВоВременноеХранилище(логИзмененныхПоказателей,Новый УникальныйИдентификатор);
		Если Не ФлНезаблокированныхЯчеек Тогда
			ФлИзменений = Нстр("ru = 'Выделенные ячейки недоступны для редактирования'");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ИндХ = 1;
	ИндУ = 1;

	// Границы области = границы вставки.
	// Во всех остальных случаях размер области вставки корректируется автоматически по размеру буфера.
	ФлНезаблокированныхЯчеек = Ложь;
	ВерхОбластиВставки = ОблДляВставки.Верх;
	НизОбластиВставки = ВерхОбластиВставки + МаксКоличествоУ - 1;
	ИндУ = 1;
	Для ИндексСтрока = ВерхОбластиВставки По НизОбластиВставки Цикл
		
		Если ИндУ > МаксКоличествоУ Тогда
			ИндУ = 1;		
		КонецЕсли;
		
		СтрокаДляВставки = МассивДляВставки[ИндУ-1];
		
		ЛевоОбластиВставки = ОблДляВставки.Лево;
		ПравоОбластиВставки = ЛевоОбластиВставки + МаксКоличествоХ - 1;
		
		ИндХ = 1;
		Для ИндексКолонка = ЛевоОбластиВставки По ПравоОбластиВставки Цикл		
		
			Если ИндХ > МаксКоличествоХ Тогда
				ИндХ = 1;
			КонецЕсли;
			
			НужноеЗначение = Неопределено;
			Если СтрокаДляВставки.Количество() < ИндХ Тогда
				НужноеЗначение = Неопределено;
			Иначе	
				НужноеЗначение = СтрокаДляВставки[ИндХ-1];
			КонецЕсли;
			
			// Получение расшифровки вставляемой области приемника.
			ТекОбласть = ПолеТабличногоДокументаМакет.Область(ИндексСтрока, ИндексКолонка, ИндексСтрока, ИндексКолонка);
			
			Если ТекОбласть.Расшифровка = Неопределено Тогда
				ИндХ = ИндХ + 1;	
				Продолжить;
			КонецЕсли;
			
			ТекОтображатьСуммуВДопВалюте = Ложь;
			Если ТекОбласть.Расшифровка.Свойство("ОтображатьСуммуВДопВалюте") Тогда
				ТекОтображатьСуммуВДопВалюте = ТекОбласть.Расшифровка.ОтображатьСуммуВДопВалюте;
			КонецЕсли;
						
			СтруктураНезаполненыхАналитик 	= Новый Структура;
			СтруктураОтбираемыхАналитик 	= Новый Структура;
			
			Если ТипЗнч(ТекОбласть.Расшифровка) = Тип("Структура") Тогда
				Если НЕ ТекОбласть.Расшифровка.Свойство("Ссылка") Тогда
					ИндХ = ИндХ+1;	
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(КодРесурса) Тогда
					текПоказатель 		= ТзСвойстваПоказателей.Найти(ТекОбласть.Расшифровка.Ссылка,"Ссылка");
					КодКолонкиРесурса  	= СокрП(текПоказатель.КолонкаКод);
					Если НЕ КодРесурса 	= КодКолонкиРесурса Тогда
						Продолжить;
					КонецЕсли;
					Если НЕ ОтображатьСуммуВДопВалюте = ТекОтображатьСуммуВДопВалюте Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;			
				
			КонецЕсли;
						
			СтруктураНезаполненыхАналитик 	= Новый Структура;
			СтруктураОтбираемыхАналитик 	= Новый Структура;
			
			СтруктураРасшифровки 			= АналитическийБланкУХСервер.ПолучитьСтруктуруРасшифровки(ПолеТабличногоДокументаМакет,Объект,ЭтотОбъект,ТекОбласть.Имя,ТекОбласть.Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик,ТзСвойстваПоказателей);
			
			Если ТипЗнч(СтруктураРасшифровки) <> Тип("Структура") Тогда
				ИндХ = ИндХ + 1;	
				Продолжить;		// Получено неизвестное значение.
			КонецЕсли;	
			
			ПоказательСсылка 	= СтруктураРасшифровки.ПоказательСсылка;
			ИмяТекущегоРесурса  = СтруктураРасшифровки.ПоказательКод;
			
			Если ЗначениеЗаполнено(КодРесурса) Тогда
				текПоказатель 		= ТзСвойстваПоказателей.Найти(СтруктураРасшифровки.ПоказательСсылка,"Ссылка");
				КодКолонкиРесурса  = СокрП(текПоказатель.КолонкаКод);
				Если НЕ КодРесурса 	= КодКолонкиРесурса Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;		
						
			// Проверка возможности вставить в область.
			Если НЕ ПроверитьВозможностьРедактированияТекущегоСреза(СтруктураРасшифровки, Объект) Тогда
				ИндХ = ИндХ+1;	
				Продолжить;
			Иначе	
				ФлНезаблокированныхЯчеек = Истина;
			КонецЕсли;	
						
			Если  СтруктураНезаполненыхАналитик.Количество()>0 И Не РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.ОбратноеРаспределение  Тогда
				ИндХ = ИндХ+1;	
				Продолжить;
			КонецЕсли;
			
			ФлОшибки = Ложь;
			
			Если ТекОбласть.СодержитЗначение И ТекОбласть.Значение = НужноеЗначение Тогда
				ИндХ = ИндХ+1;	
				Продолжить;	
			КонецЕсли;	
			
			ВставитьЗначения(НужноеЗначение,СтруктураРасшифровки,ОблДляВставки,логИзмененныхПоказателей,мПоказателиРаскрытия,ТекущаяОбластьТекст,КэшАналитикПоказателей,ФлОшибки);	
			Если Не ФлОшибки Тогда
				
				ТекОбласть.СодержитЗначение = Истина;
				ВставитьЗначениеВОбластьТабличногоДокумента(ТекОбласть, НужноеЗначение, НастройкаФормата, ТекущаяТочность);
				
				Если СтруктураРасшифровки.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
					ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				КонецЕсли;		
			КонецЕсли;	
			
			ИндХ = ИндХ+1;
		КонецЦикла;
		
		ИндУ = ИндУ+1;		
	КонецЦикла;
		
    логИзмененныхДанныхАдрес = ПоместитьВоВременноеХранилище(логИзмененныхПоказателей,Новый УникальныйИдентификатор);
	Если Не ФлНезаблокированныхЯчеек Тогда
		ФлИзменений = Нстр("ru = 'Выделенные ячейки недоступны для редактирования'");
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ВставитьЗначения(ЗначениеДляВставки,СтруктураРасшифровки,ОблДляВставки,логИзмененныхПоказателей,мПоказателиРаскрытия,ТекущаяОбластьТекст,КэшАналитикПоказателей,ФлОшибки = Ложь);
				
	Если Не СтруктураРасшифровки.Свойство("ПоказательСсылка")  Тогда
		 Возврат;
	КонецЕсли;	
	
	Если  Не СтруктураРасшифровки.Свойство("ПериодОтчета") И Не РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.ОбратноеРаспределение Тогда 
		 Возврат;
	КонецЕсли;	
		
	ПоказательСсылка = СтруктураРасшифровки.ПоказательСсылка; 		 	
	//Ищем возможные значения области		
	АналитическийБланкУХСервер.ЗаписатьЗначениеВПоказатель(логИзмененныхПоказателей,,ЗначениеДляВставки,СтруктураРасшифровки,КэшАналитикПоказателей,ФлОшибки,ЕдиницаИзмерения);	
			
КонецПроцедуры	

Процедура ВставитьКомментарий(ЗначениеДляВставки,СтруктураРасшифровки,ОблДляВставки,логИзмененныхПоказателей,КэшАналитикПоказателей,ФлОшибки = Ложь);
				
	Если Не СтруктураРасшифровки.Свойство("ПоказательСсылка") ИЛИ Не СтруктураРасшифровки.Свойство("ПериодОтчета") Тогда
		ФлОшибки = Истина;
		Возврат;
	КонецЕсли;	
	
	ПоказательСсылка = СтруктураРасшифровки.ПоказательСсылка; 		 	
	//Ищем возможные значения области		
	АналитическийБланкУХСервер.ЗаписатьКомментарийВПоказатель(логИзмененныхПоказателей,,ЗначениеДляВставки,СтруктураРасшифровки,КэшАналитикПоказателей,ФлОшибки);	
			
КонецПроцедуры

Процедура ИзменитьЗначенияВОбласти(ПолеТабличногоДокументаМакет,ИмяОбласти,СтруктураПараметров,Объект,ОписаниеИзменений) Экспорт;
				
	ОблДляВставки=ПолеТабличногоДокументаМакет.Область(ИмяОбласти);
		
	Если ОблДляВставки.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Таблица Тогда
		оВерх 	=  ПолеТабличногоДокументаМакет.ФиксацияСверху+1;
		оНиз  	=  ПолеТабличногоДокументаМакет.ВысотаТаблицы;
		оЛево 	=  ПолеТабличногоДокументаМакет.ФиксацияСлева+1;
		оПраво 	=  ПолеТабличногоДокументаМакет.ШиринаТаблицы;	
	Иначе			
		оВерх 	=  ОблДляВставки.Верх;
		оНиз  	=  ОблДляВставки.Низ;
		оЛево 	=  ОблДляВставки.Лево;
		оПраво 	=  ОблДляВставки.Право;		
	КонецЕсли;
		
	ОС=ПолеТабличногоДокументаМакет.ПолучитьОбласть(ИмяОбласти);
					
	Для ИндексСтрока = ОВерх По ОНиз Цикл	
		Для ИндексКолонка = ОЛево По ОПраво Цикл
			
			ТекОбласть = ПолеТабличногоДокументаМакет.Область(ИндексСтрока,ИндексКолонка,ИндексСтрока,ИндексКолонка);
						
			Если ТекОбласть.СодержитЗначение И  ТекОбласть.ТипЗначения.Типы()[0] = Тип("Число") Тогда
				
				ЗначениеЧисло = ТекОбласть.Значение;
				
				Если СтруктураПараметров.ВидКорректировки = "Процент" Тогда
					ЗначениеЧислоИтог = ЗначениеЧисло*(1+СтруктураПараметров.ЗначениеКорректировки/100);
				ИначеЕсли СтруктураПараметров.ВидКорректировки = "Значение" Тогда	
					ЗначениеЧислоИтог = ЗначениеЧисло+СтруктураПараметров.ЗначениеКорректировки;
				КонецЕсли;
				
				ВставитьЗначениеВОбласть(ПолеТабличногоДокументаМакет, ТекОбласть.Имя, ЗначениеЧислоИтог, "",, Объект,, ОписаниеИзменений);
				
			КонецЕсли;
			
		КонецЦикла;			
	КонецЦикла;
	
КонецПроцедуры
	
Процедура ЗаписатьИзмененныеПоказатели() Экспорт
	
	ТаблицаИсходныхПоказателей = Новый ТаблицаЗначений;
	ТаблицаТрассировкиРасчета  = Новый ТаблицаЗначений;

	Если Не ЗначениеЗаполнено(логИзмененныхДанныхАдрес) Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыЗадания = Новый Структура;		
	ПараметрыЗадания.Вставить("Валюта",Валюта);
	ПараметрыЗадания.Вставить("Бланк",Бланк);
	ПараметрыЗадания.Вставить("логИзмененныхДанныхАдрес"	,логИзмененныхДанныхАдрес);
	ПараметрыЗадания.Вставить("РежимТрассировки"			,РежимТрассировки);
	ПараметрыЗадания.Вставить("ТаблицаИсходныхПоказателей"	,ТаблицаИсходныхПоказателей);
	ПараметрыЗадания.Вставить("ТаблицаТрассировкиРасчета"	,ТаблицаТрассировкиРасчета);
	
	АдресХранилища               = "";
	АдресХранилищаДополнительный = "";	
	СводнаяТаблицаУХ.ПрименитьИзменения(ПараметрыЗадания,АдресХранилища,АдресХранилищаДополнительный);
	
КонецПроцедуры	

Процедура ОчиститьТекущиеДанные() Экспорт
			
	мПоказателиРаскрытия 	= ПолучитьИзВременногоХранилища(мПоказателиРаскрытияАдрес);

	оЗаписьЗависисмых = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
	оЛогИзмененныхДанных = оЗаписьЗависисмых.ТаблицаИзмененныхПоказателей;
	
	СтрокаВыбираемыхПолей   = "";
	СтрокаЗаменяемыхПолей   = "";
		
	Для Каждого Кол Из мПоказателиРаскрытия.Колонки Цикл	
		СтрокаВыбираемыхПолей = СтрокаВыбираемыхПолей+"мПоказателиРаскрытия."+Кол.Имя+",";	
		Если Кол.Имя = "Значение" Тогда 
			СтрокаЗаменяемыхПолей = СтрокаЗаменяемыхПолей+"ВЫБОР КОГДА вмПоказателиРаскрытия.Сценарий = &ТекСценарий
			| И вмПоказателиРаскрытия.Организация = &ТекОрганизация 
			| И вмПоказателиРаскрытия.ПериодОтчета В (&ТекПериод)
			| И вмПоказателиРаскрытия.Проект = &ТекПроект ТОГДА 0 ИНАЧЕ вмПоказателиРаскрытия.Значение КОНЕЦ КАК Значение,"; 
		Иначе	
			СтрокаЗаменяемыхПолей = СтрокаЗаменяемыхПолей+"вмПоказателиРаскрытия."+Кол.Имя+",";
		КонецЕсли;
	КонецЦикла;	
	
	СтрокаВыбираемыхПолей = Лев(СтрокаВыбираемыхПолей,СтрДлина(СтрокаВыбираемыхПолей)-1);
	СтрокаЗаменяемыхПолей = Лев(СтрокаЗаменяемыхПолей,СтрДлина(СтрокаЗаменяемыхПолей)-1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
    | &СтрокаВыбираемыхПолей	
	| ПОМЕСТИТЬ вмПоказателиРаскрытия 
	|ИЗ
	|	&мПоказателиРаскрытия КАК мПоказателиРаскрытия
	|; 
	|//////////////////////////////////////////////////
    |
	| ВЫБРАТЬ
	| &СтрокаЗаменяемыхПолей	
	|  ПОМЕСТИТЬ мПоказателиРаскрытия
	|ИЗ
	|	вмПоказателиРаскрытия КАК вмПоказателиРаскрытия
	|; 
	|//////////////////////////////////////////////////
    | ВЫБРАТЬ
	|  вмПоказателиРаскрытия.Показатель КАК ПоказательОтчета,
	| &СтрокаЗаменяемыхПолей	
	|  ПОМЕСТИТЬ логИзмененныхДанных
	|ИЗ
	|	вмПоказателиРаскрытия КАК вмПоказателиРаскрытия
	| ГДЕ вмПоказателиРаскрытия.Сценарий = &ТекСценарий
	| И вмПоказателиРаскрытия.Организация = &ТекОрганизация
	| И вмПоказателиРаскрытия.ПериодОтчета В (&ТекПериод)
    | И вмПоказателиРаскрытия.Проект = &ТекПроект
	|; 
	|//////////////////////////////////////////////////	
	|";
	
	Запрос.УстановитьПараметр("мПоказателиРаскрытия",мПоказателиРаскрытия);
	Запрос.УстановитьПараметр("ТекСценарий",Сценарий);
	Запрос.УстановитьПараметр("ТекОрганизация",Организация);
    Запрос.УстановитьПараметр("ТекПроект",Проект);	
	Запрос.УстановитьПараметр("ТекПериод",ПериодыУХ.ПолучитьПодчиненныеПериоды(ПериодОтчета,ПериодОтчетаОкончание,Периодичность));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&СтрокаВыбираемыхПолей",СтрокаВыбираемыхПолей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&СтрокаЗаменяемыхПолей",СтрокаЗаменяемыхПолей);
	
	Результат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	мПоказателиРаскрытия = Результат[1].Выгрузить();
	оЛогИзмененныхДанных.Загрузить(Результат[2].Выгрузить());
    логИзмененныхДанных  = оЛогИзмененныхДанных.Выгрузить();
	
	логИзмененныхДанных.Индексы.Добавить("Сценарий,ПериодОтчета,Организация,Проект,ПоказательОтчета,Аналитика1,Аналитика2,Аналитика3,Аналитика4,Аналитика5");

	СтрокаИндексов = "УидГруппыОтборов,Показатель,ПериодОтчета,Сценарий,Организация,Проект";
	
	Для  Инд=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если НЕ мПоказателиРаскрытия.Колонки.Найти("Аналитика"+Инд) = Неопределено Тогда
			 СтрокаИндексов = СтрокаИндексов+",Аналитика"+Инд;
		КонецЕсли;	
	КонецЦикла;		
	мПоказателиРаскрытия.Индексы.Добавить(СтрокаИндексов);	

	
	мПоказателиРаскрытияАдрес = ПоместитьВоВременноеХранилище(мПоказателиРаскрытия,Новый УникальныйИдентификатор);	
	логИзмененныхДанныхАдрес  = ПоместитьВоВременноеХранилище(логИзмененныхДанных,Новый УникальныйИдентификатор);
	
	
КонецПроцедуры	

Процедура ЗаполнитьОтчетПоРежиму(Режим,РабочийОбъект,ТаблицаИсходныхПоказателей = Неопределено,ТаблицаТрассировкиРасчета=Неопределено) Экспорт

	РасчетПоказателейОбъект 						= Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
	РасчетПоказателейОбъект.ВидОтчета 				= РабочийОбъект.ВидОтчета;
	РасчетПоказателейОбъект.ВалютаОтображения 		= Валюта;
	РасчетПоказателейОбъект.РассчитыватьЗависимые 	= Константы.АвтоматическийПересчетЗависимыхПоказателей.Получить();	
	РасчетПоказателейОбъект.ТрассировкаРасчета 		= РежимТрассировки;

	ТЗПериодов= ПериодыУХ.ПолучитьПодчиненныеПериоды(ПериодОтчета,ПериодОтчетаОкончание,Периодичность);
	
	тВерсияРегламента  = УправлениеОТчетамиУХ.ПолучитьВерсиюРегламентаПоПериодуИСценарию(Сценарий,ПериодОтчета);
	
	ПравилоПересчетаЗависимых = Неопределено;
	СоответствиеНастроек = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(РабочийОбъект.ВидОтчета,Сценарий,Организация,ПериодОтчета,тВерсияРегламента);	
	СоответствиеНастроек.Свойство("ПравилоОбработки", ПравилоПересчетаЗависимых);
	
	Для Каждого стрПериод Из ТЗПериодов Цикл	
		Нстрока= РасчетПоказателейОбъект.ДанныеДляПересчетаПоказателей.Добавить();
		Нстрока.ПериодОтчета = стрПериод;
		Нстрока.Организация  = Организация;
		Нстрока.Проект		 = Проект;
		Нстрока.Сценарий 	 = Сценарий;
		Нстрока.ПравилоОбработки = ПравилоПересчетаЗависимых;
		Нстрока.ОсновнаяВалюта = Валюта;			
	КонецЦикла;
	
	РасчетПоказателейОбъект.РассчитатьЗначенияПоказателей();
	
	Если  РежимТрассировки Тогда
		ТаблицаИсходныхПоказателей = РасчетПоказателейОбъект.ТаблицаИсходныхПоказателей.Выгрузить();
		ТаблицаТрассировкиРасчета  = РасчетПоказателейОбъект.ТаблицаТрассировкиРасчета.Выгрузить();
	КонецЕсли;
 	
КонецПроцедуры	
	
Процедура ВставитьКомментарийВОбласть(Объект,ПолеТабличногоДокументаМакет,ИмяОбласти,Значение,ГлЛогИзмененныхКомментариевАдрес,ИдентификаторСеанса = Неопределено) Экспорт;
		
	логИзмененныхКомментариев = Неопределено;                
	
	Если ЗначениеЗаполнено(ГлЛогИзмененныхКомментариевАдрес) Тогда
		логИзмененныхКомментариев = ПолучитьИзВременногоХранилища(ГлЛогИзмененныхКомментариевАдрес);		
	Иначе	
		логИзмененныхКомментариев = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать().ТаблицаИзмененныхПоказателей.ВыгрузитьКолонки();		
		логИзмененныхКомментариев.Индексы.Добавить("Сценарий,ПериодОтчета,Организация,Проект,ПоказательОтчета,Аналитика1,Аналитика2,Аналитика3,Аналитика4,Аналитика5");
	КонецЕсли;
	
	мПоказателиРаскрытия         = ПолучитьИзВременногоХранилища(мПоказателиРаскрытияАдрес);
	
	ТзСвойстваПоказателей        = ПолучитьИзВременногоХранилища(ТзСвойстваПоказателейАдрес);
	
	СтруктураНезаполненыхАналитик 	= Новый Структура;
	СтруктураОтбираемыхАналитик 	= Новый Структура;
	
	ОблДляВставки=ПолеТабличногоДокументаМакет.Область(ИмяОбласти);
	ОС=ПолеТабличногоДокументаМакет.ПолучитьОбласть(ИмяОбласти);

    КэшАналитикПоказателей = ПолучитьИзВременногоХранилища(КэшАналитикПоказателейАдрес);
			
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		МассивДляВставки = Значение; 
	Иначе
		МассивДляВставки = Новый Массив;
		МассивДляВставкиЗначения = Новый Массив();
		МассивДляВставкиЗначения.Добавить(Значение);
		МассивДляВставки.Добавить(МассивДляВставкиЗначения);
	КонецЕсли;
		
	//Нечего вставлять - возвращаемся
	Если МассивДляВставки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;	
	
	ОднаЯчейка = Ложь;
		
	//Выделяли одну ячейку и вставлем одно значение в нее
	Если МассивДляВставки.Количество()=1 И МассивДляВставки[0].Количество()=1 И ОблДляВставки.Лево=ОблДляВставки.Право И ОблДляВставки.Верх=ОблДляВставки.Низ тогда
	    ОднаЯчейка=Истина;
	    ЗначениеДляВставки=МассивДляВставки[0][0];
	КонецЕсли;
	
	//Определим размер вставляемой области
	МаксКоличествоХ = 0;
	МаксКоличествоУ = МассивДляВставки.Количество();

	Для Каждого Элстроки Из МассивДляВставки Цикл
		Если Элстроки.Количество()>МаксКоличествоХ Тогда
			 МаксКоличествоХ =Элстроки.Количество(); 
		КонецЕсли;		
	КонецЦикла;
	
	//Видимо вставляем только пустые значения по Х или 0, если число
	Если МаксКоличествоХ = 0 Тогда
		ЗначениеДляВставки = "";
	КонецЕсли;
	
	ОднаКолонка = Ложь;
	ОднаСтрока=Ложь;
	
	Если МаксКоличествоУ=1 И МаксКоличествоХ>1 тогда
		ОднаСтрока=Истина;
	КонецЕсли;
	Если МаксКоличествоУ>1 И МаксКоличествоХ=1 тогда
		ОднаКолонка=Истина;
	КонецЕсли;
	
	СтруктураРасшифровки 			= АналитическийБланкУХСервер.ПолучитьСтруктуруРасшифровки(ПолеТабличногоДокументаМакет,Объект,ЭтотОбъект,ИмяОбласти,ОблДляВставки.Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик,ТзСвойстваПоказателей);	
	Если ОблДляВставки.Расшифровка = Неопределено Тогда
		Возврат;
	КонецЕсли;		
	Если  СтруктураНезаполненыхАналитик.Количество()>0 И Не РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.ОбратноеРаспределение  Тогда
		Возврат;
	КонецЕсли;		
	
	ФлОшибки = Ложь;
	ВставитьКомментарий(ЗначениеДляВставки,СтруктураРасшифровки,ОблДляВставки,логИзмененныхКомментариев,КэшАналитикПоказателей,ФлОшибки);	
	
	РасчетПоказателейОбъект = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
	РасчетПоказателейОбъект.ВидОтчета = Объект.ВидОтчета;
	РасчетПоказателейОбъект.ВалютаОтображения = Объект.ОсновнаяВалюта;
	
	РасчетПоказателейОбъект.ЗаписьКомментариев = Истина;
	РасчетПоказателейОбъект.РассчитыватьЗависимые = Ложь;	
	Если НЕ ИдентификаторСеанса = Неопределено Тогда
		РасчетПоказателейОбъект.ИдентификаторСеанса = ИдентификаторСеанса;	
	КонецЕсли;
	
	Если Объект.Свойство("Ссылка") Тогда
		РасчетПоказателейОбъект.Регистратор = Объект.Ссылка;
	КонецЕсли;
	
	РасчетПоказателейОбъект.ТаблицаИзмененныхПоказателей.Загрузить(логИзмененныхКомментариев);			
	РасчетПоказателейОбъект.ЗаписатьЗначенияТаблицыПоказателей();
	
	Если Не ФлОшибки  Тогда
		ОблДляВставки.Примечание.Текст = ЗначениеДляВставки;
	КонецЕсли;	
	
	
КонецПроцедуры

Функция ПроверитьВозможностьРедактированияТекущегоСреза(СтруктураРасшифровки,Объект,ТихийРежим = Истина) Экспорт
		
	Если Объект.Свойство("ПериодОтчета") И Объект.Свойство("Сценарий") И Объект.Свойство("Организация") И  Объект.Свойство("Проект") Тогда
		Если СтруктураРасшифровки.Свойство("ПериодОтчета") Тогда			
			Если  ВложенныеПериоды.Найти(СтруктураРасшифровки.ПериодОтчета) = Неопределено Тогда				
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;	
		Если СтруктураРасшифровки.Свойство("Сценарий") И СтруктураРасшифровки.Сценарий<>Объект.Сценарий Тогда
			Возврат Ложь;
		КонецЕсли;	
		Если СтруктураРасшифровки.Свойство("Организация")  Тогда
			
			Если ТипЗнч(Объект.Организация) = Тип("СправочникСсылка.Организации") И СтруктураРасшифровки.Организация<>Объект.Организация Тогда
				Возврат Ложь;
			ИначеЕсли ТипЗнч(Объект.Организация) = Тип("СписокЗначений") И Объект.Организация.НайтиПоЗначению(СтруктураРасшифровки.Организация) = Неопределено Тогда
	            Возврат Ложь;
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если СтруктураРасшифровки.Свойство("Проект")  Тогда
			Если ТипЗнч(Объект.Проект) = Тип("СправочникСсылка.Проекты") И СтруктураРасшифровки.Проект<>Объект.Проект Тогда
				Возврат Ложь;
			ИначеЕсли ТипЗнч(Объект.Проект) = Тип("СписокЗначений") И Объект.Проект.НайтиПоЗначению(СтруктураРасшифровки.Проект) = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;		
		КонецЕсли;	
		
		Если  Объект.Свойство("ВидОтчета") И ТипЗнч(Объект.ВидОтчета) = Тип("СправочникСсылка.ВидыОтчетов") Тогда
			Если СтруктураРасшифровки.Свойство("ВидОтчетаКод") И СтруктураРасшифровки.ВидОтчетаКод<>Объект.ВидОтчета Тогда
				Возврат Ложь;
			КонецЕсли;
			Если СтруктураРасшифровки.Свойство("ВидОтчета") И СтруктураРасшифровки.ВидОтчета<>Объект.ВидОтчета Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;	

		
	КонецЕсли;	
	
	Если СтруктураРасшифровки.Свойство("ПоказательСсылка") Тогда		
		 Если  НЕ ЗаблокированныеПоказатели.Найти(СтруктураРасшифровки.ПоказательСсылка) = Неопределено Тогда
			  Возврат Ложь;
		 КонецЕсли;	 		 
	КонецЕсли;		
	
	Если СтруктураРасшифровки.Свойство("ПериодОтчета") Тогда		
		 Если  НЕ ЗаблокированныеПериоды.Найти(СтруктураРасшифровки.ПериодОтчета) = Неопределено Тогда
			  Возврат Ложь;
		 КонецЕсли;	 		 
	КонецЕсли;		
		
	Возврат Истина;
	
КонецФункции	

Процедура ВставитьЗначениеВОбластьТабличногоДокумента(ОбластьТабличногоДокумента, ЗначениеЯчейки = Неопределено, НеМасштабируется = Ложь, ТочностьЧисла = 0, СоставДаты = неопределено) Экспорт
				
	Если СтрНайти(ОбластьТабличногоДокумента.Формат,"ЧДЦ")>0 Тогда  
		//Если точность явно задана форматом в бланке, то не меняем ее
	Иначе	
		ОбластьТабличногоДокумента.Формат = ОбластьТабличногоДокумента.Формат+"; ЧДЦ="+ТекущаяТочность;
	КонецЕсли;
	
	Если СтрНайти(ОбластьТабличногоДокумента.Формат,"ЧС")>0 Тогда  
		//Если масштаб явно задан форматом в бланке, то не меняем его
	Иначе	
		Если Не  НеМасштабируется Тогда
			ОбластьТабличногоДокумента.Формат = ОбластьТабличногоДокумента.Формат+"; ЧС="+КоличествоГрупп+"";
		КонецЕсли;
	КонецЕсли;
	
	ОбластьТабличногоДокумента.Значение = ЗначениеЯчейки;
		
КонецПроцедуры


#КонецОбласти

#Область РаботаСРедактированиемПоказателейЛогИзмененных 

Процедура ИзменитьСодержимоеОбласти(СтруктураПараметров) Экспорт;
		
	ПолеТабличногоДокументаМакет 		= СтруктураПараметров.ПолеТабличногоДокументаМакет;
	ИмяОбласти                   		= СтруктураПараметров.ИмяВыделеннойОбласти;
	Значение                     		= СтруктураПараметров.Значение;
	Объект                       		= СтруктураПараметров.Объект;
	АдресТаблицыИзмененныхПоказателей   = СтруктураПараметров.АдресТаблицыИзмененныхПоказателей;
	НомерТранзакции                     = СтруктураПараметров.НомерТранзакции;
	ПредставлениеТранзакции             = СтруктураПараметров.ПредставлениеТранзакции;
	УИДФормы                            = СтруктураПараметров.УИДФормы;
	
	КодРесурса                   		= ?(СтруктураПараметров.Свойство("КодРесурса"),СтруктураПараметров.КодРесурса,"");
	ФлИзменений                  		= ?(СтруктураПараметров.Свойство("ФлИзменений"),СтруктураПараметров.ФлИзменений,"");
    ТекущаяОбластьТекст          		= ?(СтруктураПараметров.Свойство("ТекущаяОбластьТекст"),СтруктураПараметров.ТекущаяОбластьТекст,Неопределено);
    Режим          						= ?(СтруктураПараметров.Свойство("Режим"),СтруктураПараметров.Режим,Неопределено);
	ЗначениеДоИзменения          		= ?(СтруктураПараметров.Свойство("ЗначениеДоИзменения"),СтруктураПараметров.ЗначениеДоИзменения,Неопределено);
	
	ИзменятьЗначениеВячейке             = ?(СтруктураПараметров.Свойство("ИзменятьЗначениеВячейке"),СтруктураПараметров.ИзменятьЗначениеВячейке,Ложь);
	
	ТаблицаИзмененныхПоказателей        = ПолучитьИзВременногоХранилища(АдресТаблицыИзмененныхПоказателей);
	
	Если ТзСвойстваПоказателейАдрес = "" Тогда
		Возврат;   //в бланке нет показателей.
	КонецЕсли;	
	
	мПоказателиРаскрытия         = ПолучитьИзВременногоХранилища(мПоказателиРаскрытияАдрес);
	ТзСвойстваПоказателей		 = ПолучитьИзВременногоХранилища(ТзСвойстваПоказателейАдрес);
	
	СтруктураНезаполненыхАналитик 	= Новый Структура;
	СтруктураОтбираемыхАналитик 	= Новый Структура;
	
	ОблДляВставки=ПолеТабличногоДокументаМакет.Область(ИмяОбласти);
	ОС=ПолеТабличногоДокументаМакет.ПолучитьОбласть(ИмяОбласти);

    КэшАналитикПоказателей = ПолучитьИзВременногоХранилища(КэшАналитикПоказателейАдрес);
			
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		МассивДляВставки = Значение; 
	Иначе
		МассивДляВставки = Новый Массив;
		МассивДляВставкиЗначения = Новый Массив();
		МассивДляВставкиЗначения.Добавить(Значение);
		МассивДляВставки.Добавить(МассивДляВставкиЗначения);
	КонецЕсли;
		
	//Нечего вставлять - возвращаемся
	Если МассивДляВставки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;	
	
	ОднаЯчейка = Ложь;
		
	//Выделяли одну ячейку и вставлем одно значение в нее
	Если  МассивДляВставки[0] = Неопределено Тогда
		  Возврат;
	КонецЕсли;	
		
	Если МассивДляВставки.Количество()=1 И МассивДляВставки[0].Количество()=1 И ОблДляВставки.Лево=ОблДляВставки.Право И ОблДляВставки.Верх=ОблДляВставки.Низ тогда
	    ОднаЯчейка=Истина;
	    ЗначениеДляВставки=МассивДляВставки[0][0];
	КонецЕсли;
	
	//Определим размер вставляемой области
	МаксКоличествоХ = 0;
	МаксКоличествоУ = МассивДляВставки.Количество();

	Для Каждого Элстроки Из МассивДляВставки Цикл
		Если Элстроки.Количество()>МаксКоличествоХ Тогда
			 МаксКоличествоХ =Элстроки.Количество(); 
		КонецЕсли;		
	КонецЦикла;
	
	//Видимо вставляем только пустые значения по Х или 0, если число
	Если МаксКоличествоХ = 0 Тогда		
		ЗначениеДляВставки = неопределено;
	КонецЕсли;
	
	ОднаКолонка = Ложь;
	ОднаСтрока=Ложь;

	Если МаксКоличествоУ=1 И МаксКоличествоХ>1 тогда
	     ОднаСтрока=Истина;
	КонецЕсли;
	Если МаксКоличествоУ>1 И МаксКоличествоХ=1 тогда
	     ОднаКолонка=Истина;
	КонецЕсли;

	Если НЕ ТипЗнч(Значение)=Тип("Массив") Тогда
		
		СтруктураРасшифровки 			= АналитическийБланкУХСервер.ПолучитьСтруктуруРасшифровки(ПолеТабличногоДокументаМакет,Объект,ЭтотОбъект,ИмяОбласти,ОблДляВставки.Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик,ТзСвойстваПоказателей);	
		Если ТипЗнч(СтруктураРасшифровки) <> Тип("Структура") 
			ИЛИ НЕ СтруктураРасшифровки.Свойство("ПоказательСсылка")
			ИЛИ  ОблДляВставки.Расшифровка = Неопределено
			ИЛИ  (СтруктураНезаполненыхАналитик.Количество()>0 И Не РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.ОбратноеРаспределение) Тогда
			Возврат;		
		КонецЕсли;	
		
		Если НЕ ПроверитьВозможностьРедактированияТекущегоСреза(СтруктураРасшифровки,Объект) Тогда
			ФлИзменений = Нстр("ru = 'Выделенные ячейки недоступны для редактирования'");
			Возврат;
		КонецЕсли;
						
		ФлОшибки = Ложь;
			
		СтруктураПараметровЛог = Новый Структура;
		СтруктураПараметровЛог.Вставить("ЗначениеНовое",ЗначениеДляВставки);
		СтруктураПараметровЛог.Вставить("ЗначениеСтарое",СтруктураПараметров.ЗначениеДоИзменения);
		СтруктураПараметровЛог.Вставить("СтруктураРасшифровки",СтруктураРасшифровки);
		СтруктураПараметровЛог.Вставить("ОблДляВставки",ОблДляВставки);
		СтруктураПараметровЛог.Вставить("КэшАналитикПоказателей",КэшАналитикПоказателей);
		СтруктураПараметровЛог.Вставить("ТаблицаИзмененныхПоказателей",ТаблицаИзмененныхПоказателей);
        СтруктураПараметровЛог.Вставить("НомерТранзакции",НомерТранзакции);
        СтруктураПараметровЛог.Вставить("ПредставлениеТранзакции",ПредставлениеТранзакции);
		СтруктураПараметровЛог.Вставить("ФлОшибки",ФлОшибки);
	
		ВставитьЗначениеПоказателяВЛог(СтруктураПараметровЛог);
			
		
		Если Не ФлОшибки  Тогда		
			ВставитьЗначениеВОбластьТабличногоДокумента(ОблДляВставки, ЗначениеДляВставки, НастройкаФормата, ТекущаяТочность);			
		КонецЕсли;	
		
		Возврат;
	КонецЕсли;
	
	//Если выделено много ячеек, а вставляется одно значение - то копируем его  во все
	ФлНезаблокированныхЯчеек = Ложь;
	Если МаксКоличествоУ=1 И  МаксКоличествоХ=1 Тогда
		Для ИндексСтрока = ОблДляВставки.Верх По ОблДляВставки.Низ Цикл
			Для ИндексКолонка = ОблДляВставки.Лево По ОблДляВставки.Право Цикл
				НужноеЗначение = МассивДляВставки[0][0];
				ТекОбласть = ПолеТабличногоДокументаМакет.Область(ИндексСтрока,ИндексКолонка,ИндексСтрока,ИндексКолонка);
				
				Если ТекОбласть.Расшифровка = Неопределено Тогда
					Продолжить;
				КонецЕсли;	
				СтруктураНезаполненыхАналитик 	= Новый Структура;
				СтруктураОтбираемыхАналитик 	= Новый Структура;
				СтруктураРасшифровки 			= АналитическийБланкУХСервер.ПолучитьСтруктуруРасшифровки(ПолеТабличногоДокументаМакет,Объект,ЭтотОбъект,ТекОбласть.Имя,ТекОбласть.Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик,ТзСвойстваПоказателей);
				Если ТипЗнч(СтруктураРасшифровки) <> Тип("Структура") Тогда
					Продолжить;		// Получено неизвестное значение.
				Иначе
					// Проверка пройдена успешно. Продолжаем выполнение.
				КонецЕсли;	
				Если Не СтруктураРасшифровки.Свойство("ПоказательСсылка") Тогда
					Продолжить;
				КонецЕсли;	
				
				Если НЕ ПроверитьВозможностьРедактированияТекущегоСреза(СтруктураРасшифровки,Объект) Тогда
					Продолжить;
				Иначе	
					ФлНезаблокированныхЯчеек = Истина;
				КонецЕсли;	
								
				Если ТекОбласть.Расшифровка = Неопределено Тогда
					Продолжить;
				КонецЕсли;	
				
				Если  СтруктураНезаполненыхАналитик.Количество()>0 И Не РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.ОбратноеРаспределение Тогда
					Продолжить;
				КонецЕсли;
				Если   СтруктураРасшифровки.Свойство("ПоказательКод") Тогда
					ИмяТекущегоРесурса = СтруктураРасшифровки.ПоказательКод;
				Иначе	
					Продолжить;
				КонецЕсли;
				Если ТекОбласть.СодержитЗначение И ТекОбласть.Значение = НужноеЗначение Тогда
					Продолжить;	
				КонецЕсли;	
	
				ФлОшибки = Ложь;
				
				СтруктураПараметровЛог = Новый Структура;
				СтруктураПараметровЛог.Вставить("ЗначениеНовое",НужноеЗначение);
				СтруктураПараметровЛог.Вставить("ЗначениеСтарое",ТекОбласть.Значение);
				СтруктураПараметровЛог.Вставить("СтруктураРасшифровки",СтруктураРасшифровки);
				СтруктураПараметровЛог.Вставить("ОблДляВставки",ОблДляВставки);
				СтруктураПараметровЛог.Вставить("КэшАналитикПоказателей",КэшАналитикПоказателей);
				СтруктураПараметровЛог.Вставить("ТаблицаИзмененныхПоказателей",ТаблицаИзмененныхПоказателей);
				СтруктураПараметровЛог.Вставить("НомерТранзакции",НомерТранзакции);
				СтруктураПараметровЛог.Вставить("ПредставлениеТранзакции",ПредставлениеТранзакции);
				СтруктураПараметровЛог.Вставить("ФлОшибки",ФлОшибки);
				
				ВставитьЗначениеПоказателяВЛог(СтруктураПараметровЛог);

				Если Не ФлОшибки И ИзменятьЗначениеВячейке  Тогда	
					ВставитьЗначениеВОбластьТабличногоДокумента(ТекОбласть, НужноеЗначение, НастройкаФормата, ТекущаяТочность);					
				КонецЕсли;	
				
			КонецЦикла;
		КонецЦикла;

		Если Не ФлНезаблокированныхЯчеек Тогда
			ФлИзменений = Нстр("ru = 'Выделенные ячейки недоступны для редактирования'");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ИндХ = 1;
	ИндУ = 1;

	// Границы области = границы вставки.
	// Во всех остальных случаях размер области вставки корректируется автоматически по размеру буфера.
	ФлНезаблокированныхЯчеек = Ложь;
	ВерхОбластиВставки = ОблДляВставки.Верх;
	НизОбластиВставки = ВерхОбластиВставки + МаксКоличествоУ - 1;
	ИндУ = 1;
	Для ИндексСтрока = ВерхОбластиВставки По НизОбластиВставки Цикл
		
		Если ИндУ > МаксКоличествоУ Тогда
			ИндУ = 1;		
		КонецЕсли;
		
		СтрокаДляВставки = МассивДляВставки[ИндУ-1];
		
		ЛевоОбластиВставки = ОблДляВставки.Лево;
		ПравоОбластиВставки = ЛевоОбластиВставки + МаксКоличествоХ - 1;
		
		ИндХ = 1;
		Для ИндексКолонка = ЛевоОбластиВставки По ПравоОбластиВставки Цикл		
		
			Если ИндХ > МаксКоличествоХ Тогда
				ИндХ = 1;
			КонецЕсли;
			
			НужноеЗначение = Неопределено;
			Если СтрокаДляВставки.Количество() < ИндХ Тогда
				НужноеЗначение = Неопределено;
			Иначе	
				НужноеЗначение = СтрокаДляВставки[ИндХ-1];
			КонецЕсли;
			
			// Получение расшифровки вставляемой области приемника.
			ТекОбласть = ПолеТабличногоДокументаМакет.Область(ИндексСтрока, ИндексКолонка, ИндексСтрока, ИндексКолонка);
			
			Если ТекОбласть.Расшифровка = Неопределено Тогда
				ИндХ = ИндХ + 1;	
				Продолжить;
			КонецЕсли;	
						
			СтруктураНезаполненыхАналитик 	= Новый Структура;
			СтруктураОтбираемыхАналитик 	= Новый Структура;
			
			Если  ТипЗнч(ТекОбласть.Расшифровка) = Тип("Структура") Тогда
				Если НЕ ТекОбласть.Расшифровка.Свойство("Ссылка") Тогда
					ИндХ = ИндХ+1;	
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(КодРесурса) Тогда
					текПоказатель 		= ТзСвойстваПоказателей.Найти(ТекОбласть.Расшифровка.Ссылка,"Ссылка");
					КодКолонкиРесурса  = СокрП(текПоказатель.КолонкаКод);
					Если НЕ КодРесурса 	= КодКолонкиРесурса Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;			
				
			КонецЕсли;
						
			СтруктураНезаполненыхАналитик 	= Новый Структура;
			СтруктураОтбираемыхАналитик 	= Новый Структура;
			
			СтруктураРасшифровки 			= АналитическийБланкУХСервер.ПолучитьСтруктуруРасшифровки(ПолеТабличногоДокументаМакет,Объект,ЭтотОбъект,ТекОбласть.Имя,ТекОбласть.Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик,ТзСвойстваПоказателей);
			
			Если ТипЗнч(СтруктураРасшифровки) <> Тип("Структура") Тогда
				ИндХ = ИндХ + 1;	
				Продолжить;		// Получено неизвестное значение.
			КонецЕсли;	
			
			ПоказательСсылка 	= СтруктураРасшифровки.ПоказательСсылка;
			ИмяТекущегоРесурса  = СтруктураРасшифровки.ПоказательКод;
			
			Если ЗначениеЗаполнено(КодРесурса) Тогда
				текПоказатель 		= ТзСвойстваПоказателей.Найти(СтруктураРасшифровки.ПоказательСсылка,"Ссылка");
				КодКолонкиРесурса  = СокрП(текПоказатель.КолонкаКод);
				Если НЕ КодРесурса 	= КодКолонкиРесурса Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;		
						
			// Проверка возможности вставить в область.
			Если НЕ ПроверитьВозможностьРедактированияТекущегоСреза(СтруктураРасшифровки, Объект) Тогда
				ИндХ = ИндХ+1;	
				Продолжить;
			Иначе	
				ФлНезаблокированныхЯчеек = Истина;
			КонецЕсли;	
						
			Если  СтруктураНезаполненыхАналитик.Количество()>0 И Не РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.ОбратноеРаспределение  Тогда
				ИндХ = ИндХ+1;	
				Продолжить;
			КонецЕсли;
			
			ФлОшибки = Ложь;
			
			Если ТекОбласть.СодержитЗначение И ТекОбласть.Значение = НужноеЗначение Тогда
				ИндХ = ИндХ+1;	
				Продолжить;	
			КонецЕсли;	
			
			СтруктураПараметровЛог = Новый Структура;
			СтруктураПараметровЛог.Вставить("ЗначениеНовое",НужноеЗначение);
			СтруктураПараметровЛог.Вставить("ЗначениеСтарое",ТекОбласть.Значение);
			СтруктураПараметровЛог.Вставить("СтруктураРасшифровки",СтруктураРасшифровки);
			СтруктураПараметровЛог.Вставить("ОблДляВставки",ОблДляВставки);
			СтруктураПараметровЛог.Вставить("КэшАналитикПоказателей",КэшАналитикПоказателей);
			СтруктураПараметровЛог.Вставить("ТаблицаИзмененныхПоказателей",ТаблицаИзмененныхПоказателей);
			СтруктураПараметровЛог.Вставить("НомерТранзакции",НомерТранзакции);
			СтруктураПараметровЛог.Вставить("ПредставлениеТранзакции",ПредставлениеТранзакции);
			СтруктураПараметровЛог.Вставить("ФлОшибки",ФлОшибки);
			
			ВставитьЗначениеПоказателяВЛог(СтруктураПараметровЛог);
			
			Если Не ФлОшибки И ИзменятьЗначениеВячейке Тогда			
				ВставитьЗначениеВОбластьТабличногоДокумента(ТекОбласть, НужноеЗначение, НастройкаФормата, ТекущаяТочность);	
			КонецЕсли;	
			
			ИндХ = ИндХ+1;
		КонецЦикла;
		
		ИндУ = ИндУ+1;		
	КонецЦикла;
		
	
	Если Не ФлНезаблокированныхЯчеек Тогда
		ФлИзменений = Нстр("ru = 'Выделенные ячейки недоступны для редактирования'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВставитьЗначениеПоказателяВЛог(СтруктураПараметров) Экспорт;
				
	ЗначениеНовое				=  СтруктураПараметров.ЗначениеНовое;
	ЗначениеСтарое              =  СтруктураПараметров.ЗначениеСтарое;
	СтруктураРасшифровки        =  СтруктураПараметров.СтруктураРасшифровки;
	КэшАналитикПоказателей      =  СтруктураПараметров.КэшАналитикПоказателей;
	ТаблицаИзмененныхПоказателей=  СтруктураПараметров.ТаблицаИзмененныхПоказателей;
	НомерТранзакции             =  СтруктураПараметров.НомерТранзакции;
	ФлОшибки                    =  СтруктураПараметров.ФлОшибки;
		
	Если Не СтруктураРасшифровки.Свойство("ПоказательСсылка")  Тогда
		 Возврат;
	КонецЕсли;	
	
	Если  Не СтруктураРасшифровки.Свойство("ПериодОтчета") И Не РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.ОбратноеРаспределение Тогда 
		 Возврат;
	КонецЕсли;	
		
	ПоказательСсылка = СтруктураРасшифровки.ПоказательСсылка; 		 	
	//Ищем возможные значения области		
	СтруктураОтбораЭкземпляра 			= Новый Структура;
	АналитикаПоказатель 				= Неопределено;
	ОтображатьСуммыВДопВалютах  		= Ложь;
	
	ЗначениеПоказателяПреобразованное = ПолучитьПреобразованноеЗначениеПоказателя(ЗначениеНовое,СтруктураРасшифровки.ПоказательТипЗначения,ФлОшибки);
	Если ФлОшибки Тогда
		Возврат;
	Иначе
		ЗначениеЧисло 	= ЗначениеПоказателяПреобразованное.ЗначениеЧисло; 
		ЗначениеНЕЧисло = ЗначениеПоказателяПреобразованное.ЗначениеНЕЧисло;
	КонецЕсли;	
	
	Если СтруктураРасшифровки.Свойство("ПоказательСсылка") Тогда
		АналитикаПоказатель = СтруктураРасшифровки.ПоказательСсылка;	
	Иначе
		АналитикаПоказатель = СтруктураРасшифровки.ПоказательОтчета;	
	КонецЕсли;
			
	ГруппаПоказателя = КэшАналитикПоказателей.Найти(АналитикаПоказатель,"Показатель");
		
	Если СтруктураРасшифровки.Свойство("АналитикаВалюта") Тогда
		 АналитикаВалюта = ?(СтруктураРасшифровки["АналитикаВалюта"]=Неопределено,Справочники.Валюты.ПустаяСсылка(),СтруктураРасшифровки["АналитикаВалюта"]);
	КонецЕсли;	
	
	ЭтоВалютнаяСумма = Ложь;
	Если СтруктураРасшифровки.Свойство("ВалютнаяСумма") ИЛИ СтруктураРасшифровки.Свойство("ОтображатьСуммуВДопВалюте") Тогда
		 ЭтоВалютнаяСумма = Истина;
	КонецЕсли;		
	
	Если ЗначениеЧисло = ЗначениеСтарое Тогда
		 Возврат;
	КонецЕсли;	
	
	//Заполняем Таблицу измененых текущей транзакции
	нСтрокаИзмененных 							= ТаблицаИзмененныхПоказателей.Добавить();
		
	
	Для ИндА=1 По ПараметрыСЕанса.ЧислоДопАналитик Цикл 
		Если НЕ ЗначениеЗаполнено(ГруппаПоказателя["ВидАналитики"+Строка(ИндА)+"Код"]) Тогда 
			Прервать;
		КонецЕсли;
		Если СтруктураРасшифровки.Свойство(ГруппаПоказателя["ВидАналитики"+Строка(ИндА)+"Код"]) Тогда
			нСтрокаИзмененных["Аналитика"+ИндА] = СтруктураРасшифровки[СокрЛП(ГруппаПоказателя["ВидАналитики"+Строка(ИндА)+"Код"])];	
		КонецЕсли;
	КонецЦикла;		
	
	нСтрокаИзмененных.АналитикаВалюта             = АналитикаВалюта;
	нСтрокаИзмененных.Показатель                  = АналитикаПоказатель;
	нСтрокаИзмененных.Сценарий                  	= СтруктураРасшифровки.Сценарий;
	//нСтрокаИзмененных.Валюта                      = Валюта;
	
	Если СтруктураРасшифровки.Свойство("ПериодОтчета") Тогда
		 нСтрокаИзмененных.ПериодОтчета  = СтруктураРасшифровки.ПериодОтчета;
	КонецЕсли;	
	Если СтруктураРасшифровки.Свойство("Организация") Тогда
		 нСтрокаИзмененных.Организация  = СтруктураРасшифровки.Организация;
	КонецЕсли;
	Если СтруктураРасшифровки.Свойство("Проект") Тогда
		 нСтрокаИзмененных.Проект  = СтруктураРасшифровки.Проект;
	КонецЕсли;
		
	Если ЭтоВалютнаяСумма Тогда
		нСтрокаИзмененных.ЗначениеВалюта = ЗначениеЧисло - ЗначениеСтарое;
	ИначеЕсли СтруктураРасшифровки.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда	
		нСтрокаИзмененных.Значение = ЗначениеЧисло - ЗначениеСтарое;
	Иначе	
		нСтрокаИзмененных.ЗначениеНечисловое = ЗначениеНЕЧисло;
	КонецЕсли;	
			
КонецПроцедуры	

Функция ПолучитьПреобразованноеЗначениеПоказателя(Значение,ПоказательТипЗначения,ФлагОшибки)
	
	ЗначениеПоказателяПреобразованное = Новый Структура;
	ЗначениеЧисло                     = Неопределено;
	ЗначениеНЕЧисло                   = Неопределено;
	
	Если ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда	
		Попытка
			
			Если СокрЛП(Значение) = "" ИЛИ Значение = Неопределено Тогда 
				Значение = 0 
			КонецЕсли;
			
			Если ТипЗнч(Значение) = Тип("Число") Тогда
				ЗначениеЧисло = Значение;
			Иначе	 
				Если ОбщегоНазначенияКлиентСерверУХ.ЭтоЧисло(СтрЗаменить(Значение," ","")) тогда     			
					ЗначениеЧисло = Число(СтрЗаменить(Значение," ",""));
				Иначе
					ОбщегоНазначенияУх.СообщитьОбОшибке( Нстр("ru = 'Некорректное значение'", ОбщегоНазначения.КодОсновногоЯзыка() ));
					ФлагОшибки = Истина;
				КонецЕсли;
				
			КонецЕсли;							
		Исключение                                                                                                
			ОбщегоНазначенияУх.СообщитьОбОшибке(Нстр("ru = 'Некорректное значение'", ОбщегоНазначения.КодОсновногоЯзыка()));
			ФлагОшибки = Истина;
		КонецПопытки;
		
	ИначеЕсли ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда	
		
		Если ВРЕГ(Значение) = "ИСТИНА" ИЛИ ВРЕГ(Значение) = "TRUE" ИЛИ   Значение = "1" ИЛИ Значение = 1 ИЛИ ВРЕГ(Значение) = "ДА" Тогда
			ЗначениеНЕЧисло = Истина;	 	
		ИначеЕсли ВРЕГ(Значение) = "ЛОЖЬ" ИЛИ ВРЕГ(Значение) = "FALSE" ИЛИ   Значение = "0" ИЛИ Значение = 0 ИЛИ ВРЕГ(Значение) = "НЕТ" ИЛИ СокрЛП(Значение) = "" Тогда
			ЗначениеНЕЧисло = Ложь;	 
		ИначеЕсли Значение = Неопределено  Тогда
			ЗначениеНЕЧисло = Неопределено;	 
		Иначе	 
			ОбщегоНазначенияУх.СообщитьОбОшибке(Нстр("ru = 'Некорректное значение булево'", ОбщегоНазначения.КодОсновногоЯзыка()));
			ФлагОшибки = Истина;
		КонецЕсли;		
	ИначеЕсли ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда	
		
		Если Значение = "" Тогда
			ЗначениеНЕЧисло = Дата(1,1,1);
		Иначе
			Попытка
				ЗначениеНЕЧисло  	= ОбщегоНазначенияУХ.ВыполнитьПреобразованиеТипов(Значение,"Строка","Дата");
			Исключение
				ОбщегоНазначенияУх.СообщитьОбОшибке(Нстр("ru = 'Некорректное значение даты'", ОбщегоНазначения.КодОсновногоЯзыка()));
				ФлагОшибки = Истина;
			КонецПопытки;
		КонецЕсли;
	Иначе 	
		ЗначениеНЕЧисло = Значение;	
	КонецЕсли;	
	
	ЗначениеПоказателяПреобразованное.Вставить("ЗначениеЧисло",ЗначениеЧисло);
	ЗначениеПоказателяПреобразованное.Вставить("ЗначениеНЕЧисло",ЗначениеНЕЧисло);
	
	Возврат ЗначениеПоказателяПреобразованное;
	
КонецФункции

#КонецОбласти



Процедура ЗаполнитьНстройкиДополнительныхОтборов(тСкдАдрес) Экспорт
	
	МассивУдаляемыхОтборов = Новый Массив;
	НовыйИсточник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(тСкдАдрес); 
	СТ_ДополнительныеНастройки_Объект.Инициализировать(НовыйИсточник);
			
КонецПроцедуры
		
Функция ПолучитьПредставлениеПериодичностиДляЗапроса()
		
	Если Периодичность  = Перечисления.Периодичность.Год Тогда	
		тПериодичность = "Год";
	ИначеЕсли Периодичность  = Перечисления.Периодичность.Полугодие Тогда
		тПериодичность = "Полугодие";
	ИначеЕсли Периодичность  = Перечисления.Периодичность.Квартал Тогда	
		тПериодичность = "Квартал";
	ИначеЕсли Периодичность  = Перечисления.Периодичность.Месяц Тогда	
		тПериодичность = "Месяц";
	ИначеЕсли Периодичность  = Перечисления.Периодичность.Декада Тогда	
		тПериодичность = "Декада";
    ИначеЕсли Периодичность  = Перечисления.Периодичность.Неделя Тогда	
		тПериодичность = "Неделя";
    ИначеЕсли Периодичность  = Перечисления.Периодичность.Неделя Тогда	
		тПериодичность = "Неделя";
    Иначе
		тПериодичность = "Месяц";
	КонецЕсли;	
	
	Возврат тПериодичность;
	
КонецФункции	

Функция ПолучитьОтборПоСпискуВерсий(ЗапросДанные,СписокВерсий)
	
	ТекстОтбораПоАналитикеВерсии = "";
		                                      
	Если Не СписокВерсий = Неопределено Тогда
		Если   ТипЗнч(СписокВерсий) = Тип("СписокЗначений") Тогда
			ТекстОтбораПоАналитикеВерсии = ТекстОтбораПоАналитикеВерсии+"
			|	ВерсииЗначенийПоказателей.Владелец.Ссылка В (&СписокВерсий) И ВерсииЗначенийПоказателей.Валюта = &Валюта";
			ЗапросДанные.УстановитьПараметр("СписокВерсий",СписокВерсий);
		ИначеЕсли  ТипЗнч(СписокВерсий) = Тип("Массив") Тогда
			ТекстОтбораПоАналитикеВерсии = ТекстОтбораПоАналитикеВерсии+"
			|	ВерсииЗначенийПоказателей.Ссылка В (&СписокВерсий)";
			ЗапросДанные.УстановитьПараметр("СписокВерсий",СписокВерсий);
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ТекстОтбораПоАналитикеВерсии;
	
КонецФункции

Функция ПолучитьОтборПоСпискуВерсийНечисловые(ЗапросДанные,СписокВерсий)
	
	ТекстОтбораПоАналитикеВерсии = "";
		
	Если Не СписокВерсий = Неопределено Тогда
		Если   ТипЗнч(СписокВерсий) = Тип("СписокЗначений") Тогда
			ТекстОтбораПоАналитикеВерсии = ТекстОтбораПоАналитикеВерсии+"
			|	И ЗначенияПоказателейОтчетов.Версия.Владелец.Ссылка В (&СписокВерсий) И  ЗначенияПоказателейОтчетов.Версия.Валюта = &Валюта";
			ЗапросДанные.УстановитьПараметр("СписокВерсий",СписокВерсий);
		ИначеЕсли  ТипЗнч(СписокВерсий) = Тип("Массив") Тогда
			ТекстОтбораПоАналитикеВерсии = ТекстОтбораПоАналитикеВерсии+"
			|	И ЗначенияПоказателейОтчетов.Версия.Ссылка В (&СписокВерсий)";
			ЗапросДанные.УстановитьПараметр("СписокВерсий",СписокВерсий);
		КонецЕсли;	
	КонецЕсли;	

	
	Возврат ТекстОтбораПоАналитикеВерсии;
	
КонецФункции

Функция ПолучитьОтборПоВидамАналитикиВерсии(ЗапросДанные)
	
	ТекстОтбораПоАналитикеВерсии = "";
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ЗначениеЗаполнено(ЭтотОбъект.Бланк.Владелец["ВидАналитики" + Инд]) Тогда
			ТекстОтбораПоАналитикеВерсии = ТекстОтбораПоАналитикеВерсии+"
			|	И ВерсииЗначенийПоказателей.Аналитика"+Инд+" = &АналитикаВО"+Инд;
			ЗапросДанные.УстановитьПараметр("АналитикаВО"+Инд,ЭтотОбъект["Аналитика"+Инд]);
		Иначе	
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	                                      	
	Возврат ТекстОтбораПоАналитикеВерсии;
	
КонецФункции

Функция ПолучитьОтборПоВидамАналитикиВерсииНечисловые(ЗапросДанные)
	
	ТекстОтбораПоАналитикеВерсии = "";
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ЗначениеЗаполнено(ЭтотОбъект.Бланк.Владелец["ВидАналитики" + Инд]) Тогда
			ТекстОтбораПоАналитикеВерсии = ТекстОтбораПоАналитикеВерсии+"
			|	И ЗначенияПоказателейОтчетов.Версия.Аналитика"+Инд+" = &АналитикаВО"+Инд;
			ЗапросДанные.УстановитьПараметр("АналитикаВО"+Инд,ЭтотОбъект["Аналитика"+Инд]);
		Иначе	
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ТекстОтбораПоАналитикеВерсии;
	
КонецФункции

Процедура ЗаполнитьЗаблокированныеПоказатели()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПроцедурыРасчетов.ПотребительРасчета КАК ПоказательОтчета
	               |ИЗ
	               |	РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
	               |ГДЕ
	               |	ПроцедурыРасчетов.НазначениеРасчетов = &тПравило
	               |	И ПроцедурыРасчетов.РедактированиеВозможно = Ложь";
	
	Запрос.УстановитьПараметр("тПравило",ТекущееПравило);
	
	тПоказатели = Запрос.Выполнить().Выгрузить();

	ЗаблокированныеПоказатели.Загрузить(тПоказатели);
	
КонецПроцедуры	

Процедура ИнициализироватьПоляСкд(ТзДоступныеАналитики)
	
	МакетСкд = ПолучитьОбщийМакет("МакетНастройкиОтборов");	
	МакетСкд.НаборыДанных[0].Поля.Очистить();
	СТ_ДополнительныеНастройки_Объект.Настройки.Отбор.Элементы.Очистить();		
	
	Для Каждого ДоступнаяАналитика Из ТзДоступныеАналитики Цикл	
		Если ДоступнаяАналитика.АналитикаКод = "ПериодОтчета" Тогда
			 Продолжить;
		КонецЕсли;		
		ИмяДляПоиска = "";	
		АналитическийБланкУХСервер.ДобавитьОписаниеПоляСКД(ДоступнаяАналитика.АналитикаКод,ДоступнаяАналитика.АналитикаПредставление,ДоступнаяАналитика.АналитикаТипСтрока,МакетСкд);		
	КонецЦикла;	
	
	СТ_ДополнительныеНастройки_Объект.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(МакетСКД, Новый УникальныйИдентификатор)));
	
	Для Каждого ДоступнаяАналитика Из ТзДоступныеАналитики Цикл 		
		Если ДоступнаяАналитика.АналитикаКод = "ПериодОтчета" Тогда
			Продолжить;
		КонецЕсли;	
		
		ЭлОтбора		 						= СТ_ДополнительныеНастройки_Объект.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
		ЭлОтбора.ЛевоеЗначение   				= Новый ПолеКомпоновкиДанных(ДоступнаяАналитика.АналитикаКод);
		ЭлОтбора.ВидСравнения 					= ВидСравненияКомпоновкиДанных.Равно;
		ЭлОтбора.Использование   				= Ложь;

	КонецЦикла;	
		
КонецПроцедуры	

Функция ПолучитьОператорОтбора(ОператорСКД)

	СтрокаОператора = "";
	Если ОператорСКД = ВидСравненияКомпоновкиДанных.Равно Тогда
		
		 СтрокаОператора = "=";
		 
	ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.НеРавно Тогда	 
		
		 СтрокаОператора = "<>";
		
	ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.Больше Тогда	 
		
		 СтрокаОператора = ">";
	 
	ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда	 
		
		 СтрокаОператора = ">=";
	 
	ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.ВИерархии Тогда	 
		
		 СтрокаОператора = "В Иерархии(";
	 
	ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.ВСписке Тогда	 
		
		 СтрокаОператора = "В (";	 
		 
	ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.НеВСписке Тогда	 
		
		 СтрокаОператора = "НЕ В (";	 	 
		 
	ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда	 
		
		 СтрокаОператора = "В Иерархии(";		 
		 
	 ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.Заполнено Тогда	 
		
		 СтрокаОператора = "<>";	 
		 
	 ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.Меньше Тогда	 
		
		 СтрокаОператора = "< ";		 
		 
	 ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда	 
		
		 СтрокаОператора = "<= ";		 
		 
	 ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда	 
		
		 СтрокаОператора = "<= ";	 
		 
	ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда	 
		
		СтрокаОператора = "НЕ В Иерархии(";
	 	 
	ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда	 
		
		СтрокаОператора = "НЕ В Иерархии(";	
		
	ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда	 
		
		 СтрокаОператора = "=";	
		
	КонецЕсли;	
	
	Возврат СтрокаОператора;
	
КонецФункции


#Область КонтекстноеОбновлениеЗависимыхПоказателей

Процедура ОбновитьВычисляемыеЯчейки(логИзмененныхДанныхКопия,ПолеТабличногоДокументаМакет,ИдентификаторСеанса,ПараметрыЗадания=Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(логИзмененныхДанныхКопия) Тогда
		Возврат;                                                                           
	КонецЕсли;	
							
	 Если логИзмененныхДанныхКопия.Количество()>5000 Тогда
		 ДополнительныеНастройки = Новый КомпоновщикНастроекКомпоновкиДанных;
		 СтруктураПараметров     = Новый Структура;
		 СтруктураПараметров.Вставить("ПолеТабличногоДокументаМакет",ПолеТабличногоДокументаМакет);
		 СтруктураПараметров.Вставить("ОбновитьДанные",Ложь);
		 СтруктураПараметров.Вставить("ДополнительныеНастройки",ДополнительныеНастройки); 
		 ПолучитьРезультирующийМакет(СтруктураПараметров);
		 Возврат;
	 КонецЕсли;	 

	тВыводимыхОбластей = ПолучитьИзВременногоХранилища(тКэшОбластейРаскрытияАдрес);
	
	тРасшифровкаГруппОтборов = РасшифровкаГруппОтборов.Выгрузить();
	тРасшифровкаГруппОтборов.Индексы.Добавить("УИДГруппыОтборов");
	
	тГруппыОтборов  = тРасшифровкаГруппОтборов.Скопировать();
	тГруппыОтборов.Свернуть("УидГруппыОтборов");
	
	
	тКэшГруппОтборовПоказателей = КэшГруппОтборовПоказателей.Выгрузить();
	тКэшГруппОтборовПоказателей.Индексы.Добавить("УИДГруппыОтборов");

	
	тИзмененныеПоказатели = логИзмененныхДанныхКопия.Скопировать();
	тИзмененныеПоказатели.Свернуть("ПоказательОтчета");
	
	тОбластиСинтетика = ПолучитьИзВременногоХранилища(тзПоказателиАдрес).Скопировать(Новый Структура("ТолькоСинтетика",Истина));
	
	тКэшПоказателейКроссОбластей = ПолучитьИзВременногоХранилища(КэшПоказателейКроссОбластейАдрес);
	тКэшПоказателейКроссОбластей.Индексы.Добавить("ИмяФормулы");
	ТзПоказателиМакетовРаскрытий = ПолучитьИзВременногоХранилища(ПоказателиМакетовРаскрытийАдрес);
	
	
	ТзЗапросыДляОбновления = Новый ТаблицаЗначений;
	ТзЗапросыДляОбновления.Колонки.Добавить("Показатель");
	ТзЗапросыДляОбновления.Колонки.Добавить("УИДГруппыОтборов");
	ТзЗапросыДляОбновления.Колонки.Добавить("ИндексЗапросаВПакете");
    ТзЗапросыДляОбновления.Колонки.Добавить("СтрокаГруппировок");
    ТзЗапросыДляОбновления.Колонки.Добавить("СтруктураГруппировок");
    ТзЗапросыДляОбновления.Колонки.Добавить("ТекОтбор");
	
	
	ТзПараметровЗапроса = Новый ТаблицаЗначений;
	ТзПараметровЗапроса.Колонки.Добавить("ИмяОтбора");
	ТзПараметровЗапроса.Колонки.Добавить("ТипОтбора");
	ТзПараметровЗапроса.Колонки.Добавить("ЗначениеОтбора");
    ТзПараметровЗапроса.Колонки.Добавить("УидГруппыОтбора");
	
	КэшАналитикПоказателей = ПолучитьИзВременногоХранилища(КэшАналитикПоказателейАдрес);
	
	Если ЗначениеЗаполнено(СтруктураРасшифровкаОбластейХАдрес) Тогда 
		ТзПоказателейОбластейКолонки 			= ПолучитьИзВременногоХранилища(ТзПоказателейОбластейКолонкиАдрес);
		СтруктураРасшифровкаОбластейХ		    = ПолучитьИзВременногоХранилища(СтруктураРасшифровкаОбластейХАдрес);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СтруктураРасшифровкаОбластейYАдрес) Тогда 
		ТзПоказателейОбластейСтроки 			= ПолучитьИзВременногоХранилища(ТзПоказателейОбластейСтрокиАдрес);
		СтруктураРасшифровкаОбластейY		    = ПолучитьИзВременногоХранилища(СтруктураРасшифровкаОбластейYАдрес);
	КонецЕсли;	
	
	тОбновляемыеОбласти = Новый ТаблицаЗначений;
	
	
	тОбновляемыеОбласти.Колонки.Добавить("Показатель");
	тОбновляемыеОбласти.Колонки.Добавить("УидГруппыОтборов");
	тОбновляемыеОбласти.Колонки.Добавить("ИмяКроссОбласти");
	тОбновляемыеОбласти.Колонки.Добавить("ПериодОтчета");
	тОбновляемыеОбласти.Колонки.Добавить("Организация");
	тОбновляемыеОбласти.Колонки.Добавить("Сценарий");
	тОбновляемыеОбласти.Колонки.Добавить("Проект");
	тОбновляемыеОбласти.Колонки.Добавить("ЭтоФормула");
	тОбновляемыеОбласти.Колонки.Добавить("СтрГруппировки");
	тОбновляемыеОбласти.Колонки.Добавить("Значение");
	тОбновляемыеОбласти.Колонки.Добавить("ДетальнаяЗапись");
	тОбновляемыеОбласти.Колонки.Добавить("ТипОбласти");
    тОбновляемыеОбласти.Колонки.Добавить("СмещениеХ");
	тОбновляемыеОбласти.Колонки.Добавить("СмещениеY");
	тОбновляемыеОбласти.Колонки.Добавить("ИмяОбластиСтрок");
	тОбновляемыеОбласти.Колонки.Добавить("ИмяОбластиКолонок");
    тОбновляемыеОбласти.Колонки.Добавить("ИмяФормулы");
	тОбновляемыеОбласти.Колонки.Добавить("ИмяОперанда");
	
	
	МассивУдаляемыхСтрокОбластей = Новый Массив;
	
	
	тПоказатели =  ПолучитьИзВременногоХранилища(ТзСвойстваПоказателейАдрес);
	
	СтруктураТекущихГруппУид 		= Новый Структура;
	
	//Вычисляем обновляемые группы отборов...
	Для Каждого СтрОтбор Из тГруппыОтборов Цикл
		
		РасшифровкиГруппы = тРасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УидГруппыОтборов",СтрОтбор.УидГруппыОтборов));		
		ФлДетали = Истина;
		
		Для Каждого Стр Из РасшифровкиГруппы Цикл
			
			Если Стр.Поле = "Сценарий" И НЕ Стр.Отбор ="Сценарий отчета" Тогда
				 ФлДетали = Ложь;
			КонецЕсли;	
				
			Если Стр.Поле = "Проект" И НЕ Стр.Отбор ="Проект отчета" Тогда
				 ФлДетали = Ложь;
			КонецЕсли;
			
			Если Стр.Поле = "Организация" И НЕ Стр.Отбор ="Организация отчета" Тогда
				 ФлДетали = Ложь;
			КонецЕсли;
			
			Если Стр.Поле = "ПериодС" И НЕ Стр.Отбор ="Период начала отчета" Тогда
				 ФлДетали = Ложь;
			КонецЕсли;

			Если Стр.Поле = "ПериодПо" И НЕ Стр.Отбор ="Период окончания отчета" Тогда
				 ФлДетали = Ложь;
			КонецЕсли;
		
		КонецЦикла;	

		
		Если ФлДетали Тогда
			СтруктураТекущихГруппУид.Вставить("УИД_"+СтрОтбор.УидГруппыОтборов,СтрОтбор.УидГруппыОтборов);
		КонецЕсли;	
			
	КонецЦикла;
	
	
	Для Каждого СтрПоказатель Из логИзмененныхДанныхКопия Цикл
			
		//Добавление итогов по раскрытиям
		тИтогиПоПоказателям = тКэшПоказателейКроссОбластей.НайтиСтроки(Новый Структура("Показатель",СтрПоказатель.ПоказательОтчета));
		
		Для Каждого текПоказатель Из тИтогиПоПоказателям Цикл
				
			тПоказатель_ = тПоказатели.Найти(СтрПоказатель.ПоказательОтчета,"Ссылка");
					
			нТобновляемаяОбласть 				= тОбновляемыеОбласти.Добавить();	
			тАналитикиОбласти                   = СтрРазделить(текПоказатель.СтрГруппировки,";");	
			ФлДетали = Истина;
			
			тГруппаПоказателя = КэшАналитикПоказателей.Найти(СтрПоказатель.ПоказательОтчета,"Показатель");
			Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				Если  ЗначениеЗаполнено(тГруппаПоказателя["ВидАналитики"+Инд])  Тогда	
					тКэшАналитикаКод = СокрЛП(тГруппаПоказателя["ВидАналитики"+Инд+"Код"]);
						
					Если тОбновляемыеОбласти.Колонки.Найти(тКэшАналитикаКод) = Неопределено Тогда
						тОбновляемыеОбласти.Колонки.Добавить(тКэшАналитикаКод);
					КонецЕсли;	
					
					Если НЕ тАналитикиОбласти.Найти(тКэшАналитикаКод)=Неопределено Тогда
						нТобновляемаяОбласть[тКэшАналитикаКод] = СтрПоказатель["Аналитика"+Инд];
					Иначе							
						Если НЕ тПоказатель_["ВОВидАналитики"+Инд+"Код"] = тКэшАналитикаКод Тогда  //Это аналитика вида отчета
							ФлДетали = Ложь;	
						КонецЕсли;
					КонецЕсли;						
				Иначе	
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			Если ЗначениеЗаполнено(тГруппаПоказателя.ВидАналитикиВалютаКод)  Тогда	
				тКэшАналитикаКод = СокрЛП(тГруппаПоказателя["ВидАналитикиВалютаКод"]);
				Если тОбновляемыеОбласти.Колонки.Найти(тКэшАналитикаКод) = Неопределено Тогда
					тОбновляемыеОбласти.Колонки.Добавить(тКэшАналитикаКод);
				КонецЕсли;	
				Если НЕ тАналитикиОбласти.Найти(тКэшАналитикаКод)=Неопределено Тогда
					нТобновляемаяОбласть[тКэшАналитикаКод] = СтрПоказатель["АналитикаВалюта"];
				ИНаче	
					ФлДетали = Ложь;
				КонецЕсли;		
			КонецЕсли;	
			
			Если НЕ тАналитикиОбласти.Найти("ПериодОтчета")=Неопределено Тогда
				нТобновляемаяОбласть["ПериодОтчета"] = СтрПоказатель["ПериодОтчета"];
			Иначе	
				ФлДетали = Ложь;
			КонецЕсли;	
			
			Если НЕ тАналитикиОбласти.Найти("Организация")=Неопределено Тогда	
				нТобновляемаяОбласть["Организация"] = СтрПоказатель["Организация"];
			КонецЕсли;	
			
			Если НЕ тАналитикиОбласти.Найти("Сценарий")=Неопределено Тогда	
				нТобновляемаяОбласть["Сценарий"] = СтрПоказатель["Сценарий"];	
			КонецЕсли;	
			
			Если НЕ тАналитикиОбласти.Найти("Проект")=Неопределено Тогда	
				нТобновляемаяОбласть["Проект"] = СтрПоказатель["Проект"];
			КонецЕсли;	
			
			
			ЗаполнитьЗначенияСвойств(нТобновляемаяОбласть,текПоказатель);
			
			Если текПоказатель.ЭтоФормула Тогда
				МассивУдаляемыхСтрокОбластей.Добавить(нТобновляемаяОбласть);
				ЗаполнитьОперандыОбновляемойОбласти(текПоказатель,нТобновляемаяОбласть,тОбновляемыеОбласти,тКэшПоказателейКроссОбластей);
			КонецЕсли;
			
			Если  ФлДетали  И СтруктураТекущихГруппУид.Свойство("УИД_"+текПоказатель.УидГруппыОтборов) Тогда
				Если ЗначениеЗаполнено(СтрПоказатель.ЗначениеВалюта) И Не ЗначениеЗАполнено(СтрПоказатель.Значение) Тогда
					нТобновляемаяОбласть.Значение = СтрПоказатель.ЗначениеВалюта;	
				ИначеЕсли СтрПоказатель.ПоказательОтчета.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число тогда	
					нТобновляемаяОбласть.Значение = СтрПоказатель.Значение;
				Иначе
					нТобновляемаяОбласть.Значение = СтрПоказатель.ЗначениеНечисловое;
				КонецЕсли;
								
				нТобновляемаяОбласть.ДетальнаяЗапись = ФлДетали;
			КонецЕсли;	
						
		КонецЦикла;
						
	КонецЦикла;	
	
	//Если были измененные по формуле - добавляем в итоги...
	Если  НЕ ПараметрыЗадания = Неопределено И ПараметрыЗадания.Свойство("МассивПересчитанныхПоказателей") И  ТипЗнч(ПараметрыЗадания.МассивПересчитанныхПоказателей) = Тип("Массив")  Тогда
		Для Каждого ИзмПоказатель Из ПараметрыЗадания.МассивПересчитанныхПоказателей Цикл
			
			Для Каждого СтрПоказатель Из логИзмененныхДанныхКопия Цикл
				
				//Добавление итогов по раскрытиям
				тИтогиПоПоказателям = тКэшПоказателейКроссОбластей.НайтиСтроки(Новый Структура("Показатель",ИзмПоказатель));
				
				тПоказатель_ = тПоказатели.Найти(СтрПоказатель.ПоказательОтчета,"Ссылка");
				Если НЕ тПоказатель_.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
					Продолжить;
				КонецЕсли;	
				
				Для Каждого текПоказатель Из тИтогиПоПоказателям Цикл
					
					нТобновляемаяОбласть 				= тОбновляемыеОбласти.Добавить();
					
					тАналитикиОбласти                   = СтрРазделить(текПоказатель.СтрГруппировки,";");
					
					ФлДетали = Истина;
					
					тГруппаПоказателя = КэшАналитикПоказателей.Найти(ИзмПоказатель,"Показатель");
					Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
						Если  ЗначениеЗаполнено(тГруппаПоказателя["ВидАналитики"+Инд])  Тогда	
							тКэшАналитикаКод = СокрЛП(тГруппаПоказателя["ВидАналитики"+Инд+"Код"]);
							Если тОбновляемыеОбласти.Колонки.Найти(тКэшАналитикаКод) = Неопределено Тогда
								тОбновляемыеОбласти.Колонки.Добавить(тКэшАналитикаКод);
							КонецЕсли;	
							
							Если НЕ тАналитикиОбласти.Найти(тКэшАналитикаКод)=Неопределено Тогда
								нТобновляемаяОбласть[тКэшАналитикаКод] = СтрПоказатель["Аналитика"+Инд];
							Иначе	
								Если НЕ тПоказатель_["ВОВидАналитики"+Инд+"Код"] = тКэшАналитикаКод Тогда  //Это аналитика вида отчета
									ФлДетали = Ложь;	
								КонецЕсли;	
							КонецЕсли;								
						КонецЕсли;	
					КонецЦикла;	
					
					Если ЗначениеЗаполнено(тГруппаПоказателя.ВидАналитикиВалютаКод)  Тогда	
						тКэшАналитикаКод = СокрЛП(тГруппаПоказателя["ВидАналитикиВалютаКод"]);
						Если тОбновляемыеОбласти.Колонки.Найти(тКэшАналитикаКод) = Неопределено Тогда
							тОбновляемыеОбласти.Колонки.Добавить(тКэшАналитикаКод);
						КонецЕсли;	
						Если НЕ тАналитикиОбласти.Найти(тКэшАналитикаКод)=Неопределено Тогда
							нТобновляемаяОбласть[тКэшАналитикаКод] = СтрПоказатель["АналитикаВалюта"];
						ИНаче	
							ФлДетали = Ложь;
						КонецЕсли;		
					КонецЕсли;	
					
					
					Если НЕ тАналитикиОбласти.Найти("ПериодОтчета")=Неопределено Тогда
						нТобновляемаяОбласть["ПериодОтчета"] = СтрПоказатель["ПериодОтчета"];
					Иначе	
						ФлДетали = Ложь;
					КонецЕсли;	
					
					Если НЕ тАналитикиОбласти.Найти("Организация")=Неопределено Тогда	
						нТобновляемаяОбласть["Организация"] = СтрПоказатель["Организация"];
					КонецЕсли;	
					
					Если НЕ тАналитикиОбласти.Найти("Сценарий")=Неопределено Тогда	
						нТобновляемаяОбласть["Сценарий"] = СтрПоказатель["Сценарий"];	
					КонецЕсли;	
					
					Если НЕ тАналитикиОбласти.Найти("Проект")=Неопределено Тогда	
						нТобновляемаяОбласть["Проект"] = СтрПоказатель["Проект"];
					КонецЕсли;	
					
					ЗаполнитьЗначенияСвойств(нТобновляемаяОбласть,текПоказатель);
					
					Если текПоказатель.ЭтоФормула Тогда
						МассивУдаляемыхСтрокОбластей.Добавить(нТобновляемаяОбласть);
						ЗаполнитьОперандыОбновляемойОбласти(текПоказатель,нТобновляемаяОбласть,тОбновляемыеОбласти,тКэшПоказателейКроссОбластей);
					КонецЕсли;
					
				КонецЦикла;			
			КонецЦикла;		  
		КонецЦикла;
		
	КонецЕсли;	
	
	Для Каждого УдСтр Из   МассивУдаляемыхСтрокОбластей Цикл
		тОбновляемыеОбласти.Удалить(УдСтр);
	КонецЦикла;	  
	
	
	тЗапросыОбновляемыхОбластей 	= тОбновляемыеОбласти.Скопировать(Новый Структура("ДетальнаяЗапись",Ложь),"Показатель,УидГруппыОтборов,СтрГруппировки");
	тОбновляемыеОбласти.Индексы.Добавить("Показатель,УидГруппыОтборов,СтрГруппировки");
	
	тЗапросыОбновляемыхОбластей.Свернуть("Показатель,УидГруппыОтборов,СтрГруппировки");
	тЗапросыОбновляемыхОбластей.Колонки.Добавить("Результат");
	тЗапросыОбновляемыхОбластей.Индексы.Добавить("Показатель,УидГруппыОтборов,СтрГруппировки");
	
	 //Проверим, сколько различных запросов придется сделать. 
	 Если тЗапросыОбновляемыхОбластей.Количество()>30 Тогда
		 ДополнительныеНастройки = Новый КомпоновщикНастроекКомпоновкиДанных;
		 СтруктураПараметров     = Новый Структура;
		 СтруктураПараметров.Вставить("ПолеТабличногоДокументаМакет",ПолеТабличногоДокументаМакет);
		 СтруктураПараметров.Вставить("ОбновитьДанные",Ложь);
		 СтруктураПараметров.Вставить("ДополнительныеНастройки",ДополнительныеНастройки); 
		 ПолучитьРезультирующийМакет(СтруктураПараметров);
		 Возврат;
	 КонецЕсли;	 

	 //Проверим, сколько различных областей придется обновить. 
	 Если тОбновляемыеОбласти.Количество()>3000 Тогда
		 ДополнительныеНастройки = Новый КомпоновщикНастроекКомпоновкиДанных;
		 СтруктураПараметров     = Новый Структура;
		 СтруктураПараметров.Вставить("ПолеТабличногоДокументаМакет",ПолеТабличногоДокументаМакет);
		 СтруктураПараметров.Вставить("ОбновитьДанные",Ложь);
		 СтруктураПараметров.Вставить("ДополнительныеНастройки",ДополнительныеНастройки); 
		 ПолучитьРезультирующийМакет(СтруктураПараметров);
		 Возврат;
	 КонецЕсли;	 
 
	Для Каждого стрОбновляемыеОбластиФинал  Из тЗапросыОбновляемыхОбластей Цикл	
		тОтборАналитикПоКонтексту = тОбновляемыеОбласти.Скопировать(Новый Структура("Показатель,УидГруппыОтборов,СтрГруппировки",стрОбновляемыеОбластиФинал.Показатель,стрОбновляемыеОбластиФинал.УидГруппыОтборов,стрОбновляемыеОбластиФинал.СтрГруппировки));	
		стрОбновляемыеОбластиФинал.Результат = ВернутьПодзапросЗапросПолученияИтога(стрОбновляемыеОбластиФинал,тОтборАналитикПоКонтексту,КэшАналитикПоказателей,тПоказатели,ТзПараметровЗапроса);	
	КонецЦикла;	
		
	тОбновляемыеОбластиФинал = Новый ТаблицаЗначений;
		
	тДанные = Неопределено;
		                                                                               	
	ОперандыСинтетика 	= Новый Структура;
	ОперандыСтроки 		= Новый Структура;
    ОперандыКолонки 	= Новый Структура;
	ОперандыТаблицы 	= Новый Структура;
		
	Для Каждого тОбновляемаяОбласть Из тОбновляемыеОбласти Цикл
		
		текЗапросВПакете = тЗапросыОбновляемыхОбластей.НайтиСтроки(Новый Структура("Показатель,УИДГруппыОтборов,СтрГруппировки",тОбновляемаяОбласть.Показатель,тОбновляемаяОбласть.УИДГруппыОтборов,тОбновляемаяОбласть.СтрГруппировки));
		
		тПоказатель      = тПоказатели.Найти(тОбновляемаяОбласть.Показатель,"Ссылка");
		
		Если тОбновляемаяОбласть.ТипОбласти = "Синтетика" Тогда
			
			НачалоОбластиY  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигY;
			НачалоОбластиХ  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигX;
			
			КоординатаХ = НачалоОбластиХ+тОбновляемаяОбласть.СмещениеХ-1;
			КоординатаY = НачалоОбластиY+(тОбновляемаяОбласть.СмещениеY-1);
			
			Если тОбновляемаяОбласть.ДетальнаяЗапись Тогда
				тЗначение = тОбновляемаяОбласть.Значение;
			Иначе	
				тЗначение = ПолучитьРезультатСОтбором(тОбновляемаяОбласть,текЗапросВПакете[0].Результат);
			КонецЕсли;
			
			Если  ЗначениеЗаполнено(тОбновляемаяОбласть.ИмяФормулы) Тогда
				тОбновляемаяОбласть.Значение = тЗначение;
				Продолжить;
			КонецЕсли;	
			
			тОбластьДляВывода = ПолеТабличногоДокументаМакет.Область(КоординатаY,КоординатаХ,КоординатаY,КоординатаХ);	
			
			тЗначениеИтог = ПолучитьИтогПоПоказателю(тЗначение,тОбновляемаяОбласть,тПоказатель);
			
			Если  НЕ тОбластьДляВывода = Неопределено Тогда
				
				Если тПоказатель.НеМасштабируется Тогда
					тОбластьДляВывода.СодержитЗначение = Истина;
					ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьДляВывода, тЗначениеИтог, НастройкаФорматаНеМасштабируется, ТекущаяТочность);
				Иначе
					тОбластьДляВывода.СодержитЗначение = Истина;
					ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьДляВывода, тЗначениеИтог, НастройкаФормата, ТекущаяТочность);
				КонецЕсли;
			Иначе
				Прервать;	
			КонецЕсли;
			
		ИначеЕсли тОбновляемаяОбласть.ТипОбласти = "Колонки" Тогда	
			
			НачалоОбластиY  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигY;
			НачалоОбластиХ  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигX;
			
			
			КоординатаY = НачалоОбластиY+(тОбновляемаяОбласть.СмещениеY-1);
			
			СтруктураГРуппирвок = СтрРазделить(тОбновляемаяОбласть.СтрГруппировки,";");
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора = Новый Структура;
			Для Каждого Кол Из СтруктураГРуппирвок Цикл
				СтруктураОтбора.Вставить(Кол,тОбновляемаяОбласть[Кол]);		
			КонецЦикла;	
			
			
			Если тОбновляемаяОбласть.ДетальнаяЗапись Тогда
				тЗначение = тОбновляемаяОбласть.Значение;
			Иначе	
				тЗначение = ПолучитьРезультатСОтбором(тОбновляемаяОбласть,текЗапросВПакете[0].Результат,СтруктураОтбора,СтруктураГРуппирвок);
			КонецЕсли;
	
			Если  ЗначениеЗаполнено(тОбновляемаяОбласть.ИмяФормулы) Тогда
				тОбновляемаяОбласть.Значение = тЗначение;
				Продолжить;
			КонецЕсли;	

			тЗначениеИтог = ПолучитьИтогПоПоказателю(тЗначение,тОбновляемаяОбласть,тПоказатель);
			
			СтруктураОтбора 		= Новый Структура;
			ПолнаяСтруктураПоиска 	= СтруктураРасшифровкаОбластейХ[тОбновляемаяОбласть.ИмяОбластиКолонок].Колонки;
			
			Для Каждого Кол Из ПолнаяСтруктураПоиска Цикл
				Если Кол.Имя = "СмещениеХ" ИЛИ Кол.Имя = "ИмяМакета" ИЛИ Кол.Имя = "ЭтоГруппа" Тогда
					Продолжить;
				Иначе
					СтруктураОтбора.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
				КонецЕсли;	
			КонецЦикла;	
			
			
			КоординатаСмещенияX = СтруктураРасшифровкаОбластейХ[тОбновляемаяОбласть.ИмяОбластиКолонок].НайтиСтроки(СтруктураОтбора);
			
			Если КоординатаСмещенияX.Количество() = 1 Тогда
				КоординатаСмещенияX_ 			= КоординатаСмещенияX[0].СмещениеХ;
				КоординатаСмещенияПоказателяX  = ТзПоказателиМакетовРаскрытий.НайтиСтроки(Новый Структура("ТипМакета,Показатель,УидГруппыОтборов,ИмяМакетаКолонок","Колонки",тОбновляемаяОбласть.Показатель,тОбновляемаяОбласть.УидГруппыОтборов, КоординатаСмещенияX[0].ИмяМакета))[0].СмещениеХ;
				
				Если тПоказатель.НеМасштабируется Тогда
										
					ВыбраннаяОбласть = ПолеТабличногоДокументаМакет.Область(КоординатаY
						,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX
						,КоординатаY
						,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX);
						
					ВыбраннаяОбласть.СодержитЗначение = Истина;
					ВставитьЗначениеВОбластьТабличногоДокумента(ВыбраннаяОбласть, тЗначениеИтог, НастройкаФорматаНеМасштабируется, ТекущаяТочность);
					
				Иначе
										
					ВыбраннаяОбласть = ПолеТабличногоДокументаМакет.Область(КоординатаY
						,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX
						,КоординатаY
						,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX);
						
					ВыбраннаяОбласть.СодержитЗначение = Истина;
					ВставитьЗначениеВОбластьТабличногоДокумента(ВыбраннаяОбласть, тЗначениеИтог, НастройкаФормата, ТекущаяТочность);
					
				КонецЕсли;
			Иначе	 
				Продолжить;					 
			КонецЕсли;	
			
			
		ИначеЕсли тОбновляемаяОбласть.ТипОбласти = "Строки" Тогда	
			
			НачалоОбластиY  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигY;
			НачалоОбластиХ  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигX;
			
			КоординатаХ = НачалоОбластиХ+тОбновляемаяОбласть.СмещениеХ-1;
			
			СтруктураГРуппирвок = СтрРазделить(тОбновляемаяОбласть.СтрГруппировки,";");
			
			СтруктураОтбора = Новый Структура;
			Для Каждого Кол Из СтруктураГРуппирвок Цикл
				СтруктураОтбора.Вставить(Кол,тОбновляемаяОбласть[Кол]);		
			КонецЦикла;	
			
			Если тОбновляемаяОбласть.ДетальнаяЗапись Тогда
				тЗначение = тОбновляемаяОбласть.Значение;
			Иначе	
				тЗначение = ПолучитьРезультатСОтбором(тОбновляемаяОбласть,текЗапросВПакете[0].Результат,СтруктураОтбора,СтруктураГРуппирвок);
			КонецЕсли;
			
			Если  ЗначениеЗаполнено(тОбновляемаяОбласть.ИмяФормулы) Тогда
				тОбновляемаяОбласть.Значение = тЗначение;
				Продолжить;
			КонецЕсли;	
			
			тЗначениеИтог = ПолучитьИтогПоПоказателю(тЗначение,тОбновляемаяОбласть,тПоказатель);
			
			СтруктураОтбора = Новый Структура;
			ПолнаяСтруктураПоиска =   СтруктураРасшифровкаОбластейY[тОбновляемаяОбласть.ИмяОбластиСтрок].Колонки;
			
			Для Каждого Кол Из ПолнаяСтруктураПоиска Цикл
				Если Кол.Имя = "СмещениеY" ИЛИ Кол.Имя = "ИмяМакета" ИЛИ Кол.Имя = "ЭтоГруппа" Тогда
					Продолжить;
				Иначе
					СтруктураОтбора.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
				КонецЕсли;	
			КонецЦикла;	
			
			КоординатаСмещенияY = СтруктураРасшифровкаОбластейY[тОбновляемаяОбласть.ИмяОбластиСтрок].НайтиСтроки(СтруктураОтбора);
			Если КоординатаСмещенияY.Количество() = 1 Тогда
				КоординатаСмещенияY_			= КоординатаСмещенияY[0].СмещениеY-1;
				КоординатаСмещенияПоказателяY  = ТзПоказателиМакетовРаскрытий.НайтиСтроки(Новый Структура("ТипМакета,Показатель,УидГруппыОтборов,ИмяМакетаСтрок","Строки",тОбновляемаяОбласть.Показатель,тОбновляемаяОбласть.УидГруппыОтборов, КоординатаСмещенияY[0].ИмяМакета))[0].СмещениеY;
				
				Если тПоказатель.НеМасштабируется Тогда
					
					ВыбраннаяОбласть = ПолеТабличногоДокументаМакет.Область(НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
						,КоординатаХ
						,НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
						,КоординатаХ);
						
					ВыбраннаяОбласть.СодержитЗначение = Истина;
					ВставитьЗначениеВОбластьТабличногоДокумента(ВыбраннаяОбласть, тЗначениеИтог, НастройкаФорматаНеМасштабируется, ТекущаяТочность);
					
				Иначе
					
					ВыбраннаяОбласть = ПолеТабличногоДокументаМакет.Область(НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
						,КоординатаХ
						,НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
						,КоординатаХ);
						
					ВыбраннаяОбласть.СодержитЗначение = Истина;
					ВставитьЗначениеВОбластьТабличногоДокумента(ВыбраннаяОбласть, тЗначениеИтог, НастройкаФормата, ТекущаяТочность);
					
				КонецЕсли;
				
			Иначе	 
				Продолжить;					 
			КонецЕсли;	
			
		ИначеЕсли тОбновляемаяОбласть.ТипОбласти = "Таблица" Тогда	
			
			
			тСтруктураТаблицы = Новый Структура;
			
			НачалоОбластиY  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигY;
			НачалоОбластиХ  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигX;
			
			СтруктураГРуппирвок = СтрРазделить(тОбновляемаяОбласть.СтрГруппировки,";");
			
			СтруктураОтбора = Новый Структура;
			ПолнаяСтруктураПоиска =   СтруктураРасшифровкаОбластейY[тОбновляемаяОбласть.ИмяОбластиСтрок].Колонки;
			
			Для Каждого Кол Из ПолнаяСтруктураПоиска Цикл
				Если Кол.Имя = "СмещениеY" ИЛИ Кол.Имя = "ИмяМакета" ИЛИ Кол.Имя = "ЭтоГруппа" Тогда
					Продолжить;
				Иначе
					СтруктураОтбора.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
					тСтруктураТаблицы.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
				КонецЕсли;	
			КонецЦикла;	
			
			КоординатаСмещенияY = СтруктураРасшифровкаОбластейY[тОбновляемаяОбласть.ИмяОбластиСтрок].НайтиСтроки(СтруктураОтбора);
			Если КоординатаСмещенияY.Количество() = 1 Тогда
				КоординатаСмещенияY_ 	= КоординатаСмещенияY[0].СмещениеY-1;
				КоординатаСмещенияПоказателяY  = ТзПоказателиМакетовРаскрытий.НайтиСтроки(Новый Структура("ТипМакета,Показатель,УидГруппыОтборов,ИмяМакетаСтрок","Таблица",тОбновляемаяОбласть.Показатель,тОбновляемаяОбласть.УидГруппыОтборов, КоординатаСмещенияY[0].ИмяМакета));
				Если КоординатаСмещенияПоказателяY.Количество() = 1 Тогда
					КоординатаСмещенияПоказателяY = КоординатаСмещенияПоказателяY[0].СмещениеY;
				Иначе
					Продолжить;
				КонецЕсли;	 
			Иначе	 
				Продолжить;
			КонецЕсли;	
			
			СтруктураОтбора 		= Новый Структура;
			ПолнаяСтруктураПоиска 	= СтруктураРасшифровкаОбластейХ[тОбновляемаяОбласть.ИмяОбластиКолонок].Колонки;
			
			Для Каждого Кол Из ПолнаяСтруктураПоиска Цикл
				Если Кол.Имя = "СмещениеХ" ИЛИ Кол.Имя = "ИмяМакета" ИЛИ Кол.Имя = "ЭтоГруппа" Тогда
					Продолжить;
				Иначе
					СтруктураОтбора.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
					тСтруктураТаблицы.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
				КонецЕсли;	
			КонецЦикла;	
			
			КоординатаСмещенияX = СтруктураРасшифровкаОбластейХ[тОбновляемаяОбласть.ИмяОбластиКолонок].НайтиСтроки(СтруктураОтбора);
			
			Если КоординатаСмещенияX.Количество() = 1 Тогда
				КоординатаСмещенияX_ 			= КоординатаСмещенияX[0].СмещениеХ;
				КоординатаСмещенияПоказателяX  = ТзПоказателиМакетовРаскрытий.НайтиСтроки(Новый Структура("ТипМакета,Показатель,УидГруппыОтборов,ИмяМакетаКолонок","Таблица",тОбновляемаяОбласть.Показатель,тОбновляемаяОбласть.УидГруппыОтборов, КоординатаСмещенияX[0].ИмяМакета))[0].СмещениеХ;
			Иначе	 
				Продолжить;	 
			КонецЕсли;	
			
			СтруктураОтбора = Новый Структура;
			Для Каждого Кол Из СтруктураГРуппирвок Цикл
				СтруктураОтбора.Вставить(Кол,тОбновляемаяОбласть[Кол]);		
			КонецЦикла;	
			
			Если тОбновляемаяОбласть.ДетальнаяЗапись Тогда
				тЗначение = тОбновляемаяОбласть.Значение;
			Иначе	
				тЗначение = ПолучитьРезультатСОтбором(тОбновляемаяОбласть,текЗапросВПакете[0].Результат,СтруктураОтбора,СтруктураГРуппирвок);
			КонецЕсли;
			
			Если  ЗначениеЗаполнено(тОбновляемаяОбласть.ИмяФормулы) Тогда
				тОбновляемаяОбласть.Значение = тЗначение;
				Продолжить;
			КонецЕсли;	
			
			тЗначениеИтог = ПолучитьИтогПоПоказателю(тЗначение,тОбновляемаяОбласть,тПоказатель);
			
			Если тЗначениеИтог = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			Если тПоказатель.НеМасштабируется Тогда
				
				ЯчейкаРедактирования = ПолеТабличногоДокументаМакет.Область(НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
					,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX
					,НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
					,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX);
					
				ЯчейкаРедактирования.СодержитЗначение = Истина;
				ВставитьЗначениеВОбластьТабличногоДокумента(ЯчейкаРедактирования, тЗначениеИтог, НастройкаФорматаНеМасштабируется, ТекущаяТочность);
				
			Иначе
				
				ЯчейкаРедактирования = ПолеТабличногоДокументаМакет.Область(НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
					,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX
					,НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
					,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX);
					
				ЯчейкаРедактирования.СодержитЗначение = Истина;
				ВставитьЗначениеВОбластьТабличногоДокумента(ЯчейкаРедактирования, тЗначениеИтог, НастройкаФормата, ТекущаяТочность);
				
			КонецЕсли;
						
		КонецЕсли;						
	КонецЦикла;	

	тОперандыОбластей  				=  тКэшПоказателейКроссОбластей.Скопировать(Новый Структура("ЭтоФормула",Истина));
	тОперандыОбластей.Колонки.Добавить("Результат");
	тОперандыОбластей.Индексы.Добавить("ИмяФормулы");
	
	тФормулыОбластей                =  тОбновляемыеОбласти.Скопировать(Новый Структура("ЭтоФормула",Истина));
	СтрокаСверткиФормул             =  "";
	
	тОбновляемыеОбласти.Индексы.Добавить("ИмяОперанда,ИмяФормулы,ИмяКроссОбласти");
	
	
	Для Каждого Кол Из тФормулыОбластей.Колонки Цикл
		Если Кол.Имя = "Показатель" ИЛИ  Кол.Имя = "УидГруппыОтборов" Тогда
			 Продолжить;
		КонецЕсли;	
		
		СтрокаСверткиФормул = СтрокаСверткиФормул+Кол.Имя+",";
		
	КонецЦикла;	
	
	СтрокаСверткиФормул = ЛЕВ(СтрокаСверткиФормул,СтрДлина(СтрокаСверткиФормул)-1);
	
	тФормулыОбластей.Свернуть(СтрокаСверткиФормул);
	
	Для Каждого тОбновляемаяОбласть Из тФормулыОбластей Цикл
		
		КэшОперандов = Новый Структура;
		
		тОперанды =  тОперандыОбластей.НайтиСтроки(Новый Структура("ИмяФормулы",тОбновляемаяОбласть.ИмяФормулы));
		Для Каждого СтрОперанд Из тОперанды Цикл
			
			СтруктураГРуппирвок = СтрРазделить(тОбновляемаяОбласть.СтрГруппировки,";");
			
			текЗапросВПакете = тЗапросыОбновляемыхОбластей.НайтиСтроки(Новый Структура("Показатель,УИДГруппыОтборов,СтрГруппировки",СтрОперанд.Показатель,СтрОперанд.УИДГруппыОтборов,СтрОперанд.СтрГруппировки));			
			тЗначенияОперандов =  тОбновляемыеОбласти.НайтиСтроки(Новый Структура("ИмяОперанда,ИмяФормулы,ИмяКроссОбласти",СтрОперанд.ИмяОперанда,СтрОперанд.ИмяФормулы,СтрОперанд.ИмяКроссОбласти));	
			тЗначение = 0;
			
			Если тЗначенияОперандов.Количество()=1 И ЗначениеЗаполнено(тЗначенияОперандов[0].Значение) Тогда
				тЗначение = тЗначенияОперандов[0].Значение;
			ИначеЕсли текЗапросВПакете.Количество() = 1 Тогда		
				Если тОбновляемаяОбласть.СтрГруппировки = "" Тогда
					тЗначение = ПолучитьРезультатСОтбором(СтрОперанд,текЗапросВПакете[0].Результат);
				Иначе	
					СтруктураОтбора = Новый Структура;
					Для Каждого Кол Из СтруктураГРуппирвок Цикл
						СтруктураОтбора.Вставить(Кол,тОбновляемаяОбласть[Кол]);		
					КонецЦикла;		
					тЗначение = ПолучитьРезультатСОтбором(СтрОперанд,текЗапросВПакете[0].Результат,СтруктураОтбора,СтруктураГРуппирвок);	
				КонецЕсли;		
			КонецЕсли;
			КэшОперандов.Вставить(СтрОперанд.ИмяОперанда,тЗначение);
			
		КонецЦикла;	
		
		тФормула = КэшФормулОбластейПоказателей.Найти(тОбновляемаяОбласть.ИмяФормулы).ТекстФормулы;
		
		Попытка
			тЗначениеИтог = Вычислить(тФормула);
		Исключение
			тЗначениеИтог = "#Ошибка";
		КонецПопытки;
		
		//Вывод результата вычисления
		
		Если тОбновляемаяОбласть.ТипОбласти = "Синтетика" Тогда
			
			НачалоОбластиY  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигY;
			НачалоОбластиХ  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигX;
			
			КоординатаХ = НачалоОбластиХ+тОбновляемаяОбласть.СмещениеХ-1;
			КоординатаY = НачалоОбластиY+(тОбновляемаяОбласть.СмещениеY-1);
						
			тОбластьДляВывода = ПолеТабличногоДокументаМакет.Область(КоординатаY,КоординатаХ,КоординатаY,КоординатаХ);	
						
			Если  НЕ тОбластьДляВывода = Неопределено Тогда
				
				Если тПоказатель.НеМасштабируется Тогда
					тОбластьДляВывода.СодержитЗначение = Истина;
					ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьДляВывода, тЗначениеИтог, НастройкаФорматаНеМасштабируется, ТекущаяТочность);
				Иначе
					тОбластьДляВывода.СодержитЗначение = Истина;
					ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьДляВывода, тЗначениеИтог, НастройкаФормата, ТекущаяТочность);
				КонецЕсли;
			Иначе
				Прервать;	
			КонецЕсли;
			
		ИначеЕсли тОбновляемаяОбласть.ТипОбласти = "Колонки" Тогда	
			
			НачалоОбластиY  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигY;
			НачалоОбластиХ  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигX;
			
			
			КоординатаY = НачалоОбластиY+(тОбновляемаяОбласть.СмещениеY-1);
			
			СтруктураГРуппирвок = СтрРазделить(тОбновляемаяОбласть.СтрГруппировки,";");
						
			СтруктураОтбора 		= Новый Структура;
			ПолнаяСтруктураПоиска 	= СтруктураРасшифровкаОбластейХ[тОбновляемаяОбласть.ИмяОбластиКолонок].Колонки;
			
			Для Каждого Кол Из ПолнаяСтруктураПоиска Цикл
				Если Кол.Имя = "СмещениеХ" ИЛИ Кол.Имя = "ИмяМакета" ИЛИ Кол.Имя = "ЭтоГруппа" Тогда
					Продолжить;
				Иначе
					СтруктураОтбора.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
				КонецЕсли;	
			КонецЦикла;	
			
			
			КоординатаСмещенияX = СтруктураРасшифровкаОбластейХ[тОбновляемаяОбласть.ИмяОбластиКолонок].НайтиСтроки(СтруктураОтбора);
			
			Если КоординатаСмещенияX.Количество() = 1 Тогда
				КоординатаСмещенияX_ 			= КоординатаСмещенияX[0].СмещениеХ;
				КоординатаСмещенияПоказателяX  = ТзПоказателиМакетовРаскрытий.НайтиСтроки(Новый Структура("ТипМакета,Формула,ИмяМакетаКолонок","Колонки",тОбновляемаяОбласть.ИмяФормулы, КоординатаСмещенияX[0].ИмяМакета))[0].СмещениеХ;
				
				ЯчейкаРедактирования = ПолеТабличногоДокументаМакет.Область(КоординатаY
					,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX
					,КоординатаY
					,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX);
					
				ЯчейкаРедактирования.СодержитЗначение = Истина;
				ВставитьЗначениеВОбластьТабличногоДокумента(ЯчейкаРедактирования, тЗначениеИтог, НастройкаФормата, ТекущаяТочность);
				
			Иначе	 
				Продолжить;					 
			КонецЕсли;	
			
			
		ИначеЕсли тОбновляемаяОбласть.ТипОбласти = "Строки" Тогда	
			
			НачалоОбластиY  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигY;
			НачалоОбластиХ  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигX;
			
			КоординатаХ = НачалоОбластиХ+тОбновляемаяОбласть.СмещениеХ-1;
			
			СтруктураГРуппирвок = СтрРазделить(тОбновляемаяОбласть.СтрГруппировки,";");
						
			
			СтруктураОтбора = Новый Структура;
			ПолнаяСтруктураПоиска =   СтруктураРасшифровкаОбластейY[тОбновляемаяОбласть.ИмяОбластиСтрок].Колонки;
			
			Для Каждого Кол Из ПолнаяСтруктураПоиска Цикл
				Если Кол.Имя = "СмещениеY" ИЛИ Кол.Имя = "ИмяМакета" ИЛИ Кол.Имя = "ЭтоГруппа" Тогда
					Продолжить;
				Иначе
					СтруктураОтбора.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
				КонецЕсли;	
			КонецЦикла;	
			
			КоординатаСмещенияY = СтруктураРасшифровкаОбластейY[тОбновляемаяОбласть.ИмяОбластиСтрок].НайтиСтроки(СтруктураОтбора);
			Если КоординатаСмещенияY.Количество() = 1 Тогда
				КоординатаСмещенияY_			= КоординатаСмещенияY[0].СмещениеY-1;
				КоординатаСмещенияПоказателяY  = ТзПоказателиМакетовРаскрытий.НайтиСтроки(Новый Структура("ТипМакета,Формула,ИмяМакетаСтрок","Строки",тОбновляемаяОбласть.ИмяФормулы,КоординатаСмещенияY[0].ИмяМакета))[0].СмещениеY;
				 
					ЯчейкаРедактирования = ПолеТабличногоДокументаМакет.Область(НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
						,КоординатаХ
						,НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
						,КоординатаХ);
						
					ЯчейкаРедактирования.СодержитЗначение = Истина;
					ВставитьЗначениеВОбластьТабличногоДокумента(ЯчейкаРедактирования, тЗначениеИтог, НастройкаФормата, ТекущаяТочность);
					
				Иначе	 
				Продолжить;					 
			КонецЕсли;	
			
		ИначеЕсли тОбновляемаяОбласть.ТипОбласти = "Таблица" Тогда	
			
			
			тСтруктураТаблицы = Новый Структура;
			
			НачалоОбластиY  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигY;
			НачалоОбластиХ  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигX;
			
			СтруктураГРуппирвок = СтрРазделить(тОбновляемаяОбласть.СтрГруппировки,";");
			
			СтруктураОтбора = Новый Структура;
			ПолнаяСтруктураПоиска =   СтруктураРасшифровкаОбластейY[тОбновляемаяОбласть.ИмяОбластиСтрок].Колонки;
			
			Для Каждого Кол Из ПолнаяСтруктураПоиска Цикл
				Если Кол.Имя = "СмещениеY" ИЛИ Кол.Имя = "ИмяМакета" ИЛИ Кол.Имя = "ЭтоГруппа" Тогда
					Продолжить;
				Иначе
					СтруктураОтбора.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
					тСтруктураТаблицы.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
				КонецЕсли;	
			КонецЦикла;	
			
			КоординатаСмещенияY = СтруктураРасшифровкаОбластейY[тОбновляемаяОбласть.ИмяОбластиСтрок].НайтиСтроки(СтруктураОтбора);
			Если КоординатаСмещенияY.Количество() = 1 Тогда
				КоординатаСмещенияY_ 	= КоординатаСмещенияY[0].СмещениеY-1;
				КоординатаСмещенияПоказателяY  = ТзПоказателиМакетовРаскрытий.НайтиСтроки(Новый Структура("ТипМакета,Формула,ИмяМакетаСтрок","Таблица",тОбновляемаяОбласть.ИмяФормулы, КоординатаСмещенияY[0].ИмяМакета));
				Если КоординатаСмещенияПоказателяY.Количество() = 1 Тогда
					КоординатаСмещенияПоказателяY = КоординатаСмещенияПоказателяY[0].СмещениеY;
				Иначе
					Продолжить;
				КонецЕсли;	 
			Иначе	 
				Продолжить;
			КонецЕсли;	
			
			СтруктураОтбора 		= Новый Структура;
			ПолнаяСтруктураПоиска 	= СтруктураРасшифровкаОбластейХ[тОбновляемаяОбласть.ИмяОбластиКолонок].Колонки;
			
			Для Каждого Кол Из ПолнаяСтруктураПоиска Цикл
				Если Кол.Имя = "СмещениеХ" ИЛИ Кол.Имя = "ИмяМакета"  ИЛИ Кол.Имя = "ЭтоГруппа" Тогда
					Продолжить;
				Иначе
					СтруктураОтбора.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
					тСтруктураТаблицы.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
				КонецЕсли;	
			КонецЦикла;	
			
			КоординатаСмещенияX = СтруктураРасшифровкаОбластейХ[тОбновляемаяОбласть.ИмяОбластиКолонок].НайтиСтроки(СтруктураОтбора);
			
			Если КоординатаСмещенияX.Количество() = 1 Тогда
				КоординатаСмещенияX_ 			= КоординатаСмещенияX[0].СмещениеХ;
				КоординатаСмещенияПоказателяX   = ТзПоказателиМакетовРаскрытий.НайтиСтроки(Новый Структура("ТипМакета,Формула,ИмяМакетаКолонок","Таблица",тОбновляемаяОбласть.ИмяФормулы,КоординатаСмещенияX[0].ИмяМакета))[0].СмещениеХ;
			Иначе	 
				Продолжить;	 
			КонецЕсли;	
						
			Если тЗначениеИтог = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			ЯчейкаРедактирования = ПолеТабличногоДокументаМакет.Область(НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
				,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX
				,НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
				,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX);
				
			ЯчейкаРедактирования.СодержитЗначение = Истина;
			ВставитьЗначениеВОбластьТабличногоДокумента(ЯчейкаРедактирования, тЗначениеИтог, НастройкаФормата, ТекущаяТочность);
						
		КонецЕсли;						
		
	КонецЦикла;	
	
		
КонецПроцедуры	

Функция ВернутьПодзапросЗапросПолученияИтога(тСтрокаПоказателя,тОтборАналитикПоКонтексту,КэшАналитикПоказателей,тПоказатели,ТзПараметровЗапроса) 
	
	ФинальныйЗапрос = Новый Запрос;
	ИндексЗапроса  = 1;
	
	УидГруппыОтборов = тСтрокаПоказателя.УидГруппыОтборов;
	ТзПараметровЗапроса.Очистить();
	
	РасшифровкаОтборовОрганизация 	= РасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УидГруппыОтборов,Поле",УидГруппыОтборов,"Организация"))[0];
	РасшифровкаОтборовСценарий 		= РасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УидГруппыОтборов,Поле",УидГруппыОтборов,"Сценарий"))[0];
	РасшифровкаОтборовПроект		= РасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УидГруппыОтборов,Поле",УидГруппыОтборов,"Проект"))[0];
	
	ТекстДополнительныхПолей = "";
	ТекстДополнительныхПолейИтог = "";
	
	тСвойстваПоказателя = тПоказатели.Найти(тСтрокаПоказателя.Показатель,"Ссылка");
	
	Если тСвойстваПоказателя.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
		
		
		ФинальныйЗапрос.Текст ="                         
		|
		|ВЫБРАТЬ
		|ВерсииЗначенийПоказателей.Ссылка КАК Версия,
		|ВерсииЗначенийПоказателей.Сценарий КАК Сценарий,
		|ВерсииЗначенийПоказателей.Проект КАК Проект,
		|ВерсииЗначенийПоказателей.ПериодОтчета КАК ПериодОтчета,
		|ВерсииЗначенийПоказателей.Валюта КАК Валюта,
		|ВерсииЗначенийПоказателей.Организация КАК Организация,
		|"+""""+УидГруппыОтборов+""""+ " КАК УидГруппыОтборов"+"
		|ПОМЕСТИТЬ втВерсииБаза
		|ИЗ
		|Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
		|ГДЕ
		|ВерсииЗначенийПоказателей.Валюта = &Валюта
		|"+АналитическийБланкУХСервер.СформироватьТекстОтбораПоВерсии("ВерсииЗначенийПоказателей",УидГруппыОтборов,,ТзПараметровЗапроса,"ПериодОтчета")+"
		|"+АналитическийБланкУХСервер.СформироватьТекстОтбораПоВерсии("ВерсииЗначенийПоказателей",УидГруппыОтборов,РасшифровкаОтборовСценарий,ТзПараметровЗапроса,"Сценарий")+"
		|"+АналитическийБланкУХСервер.СформироватьТекстОтбораПоВерсии("ВерсииЗначенийПоказателей",УидГруппыОтборов,РасшифровкаОтборовОрганизация,ТзПараметровЗапроса,"Организация")+"
		|"+АналитическийБланкУХСервер.СформироватьТекстОтбораПоВерсии("ВерсииЗначенийПоказателей",УидГруппыОтборов,РасшифровкаОтборовПроект,ТзПараметровЗапроса,"Проект");	
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			Если ЗначениеЗаполнено(ЭтотОбъект["Аналитика"+Инд]) Тогда
				ФинальныйЗапрос.Текст =ФинальныйЗапрос.Текст +"
				|И ВерсииЗначенийПоказателей.Аналитика"+Инд+" = &АналитикаВО"+Инд;
				ФинальныйЗапрос.Параметры.Вставить("АналитикаВО"+Инд,ЭтотОбъект["Аналитика"+Инд]);
			КонецЕсли;	
		Конеццикла;	
		ФинальныйЗапрос.Текст =ФинальныйЗапрос.Текст+"
		|И ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета"+"
		|И ( (НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия) ИЛИ ВерсииЗначенийПоказателей.ИдентификаторСеанса=&ИдентификаторСеанса) 
		|";
		
	Иначе	
		
		ФинальныйЗапрос.Текст = "
		|
		|ВЫБРАТЬ
		|ВерсииЗначенийПоказателей.Ссылка КАК Версия,
		|ВерсииЗначенийПоказателей.Сценарий КАК Сценарий,
		|ВерсииЗначенийПоказателей.Проект КАК Проект,
		|ВерсииЗначенийПоказателей.ПериодОтчета КАК ПериодОтчета,
		|ВерсииЗначенийПоказателей.Валюта КАК Валюта,
		|ВерсииЗначенийПоказателей.Организация КАК Организация,
		|"+""""+УидГруппыОтборов+""""+ " КАК УидГруппыОтборов"+"
		|ПОМЕСТИТЬ втВерсииБаза
		|ИЗ
		|Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей  
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|	(ВЫБРАТЬ 
		|		МАКСИМУМ(ЗначенияПоказателейОтчетовНечисловые.Версия.Код) КАК ВерсияКод,
		|		ЗначенияПоказателейОтчетовНечисловые.Показатель КАК Показатель,
		|		ЗначенияПоказателейОтчетовНечисловые.Версия.Сценарий КАК Сценарий,
		|		ЗначенияПоказателейОтчетовНечисловые.Версия.Проект КАК Проект,
		|		ЗначенияПоказателейОтчетовНечисловые.Версия.ПериодОтчета КАК ПериодОтчета,
		|		ЗначенияПоказателейОтчетовНечисловые.Версия.Организация КАК Организация
		|	ИЗ
		|		РегистрСведений.ЗначенияПоказателейОтчетовНечисловые КАК ЗначенияПоказателейОтчетовНечисловые
		|	ГДЕ
		|	ЗначенияПоказателейОтчетовНечисловые.Версия.Валюта = &Валюта
		|	"+АналитическийБланкУХСервер.СформироватьТекстОтбораПоВерсии("ЗначенияПоказателейОтчетовНечисловые.Версия",УидГруппыОтборов,,ТзПараметровЗапроса,"ПериодОтчета")+"
		|	"+АналитическийБланкУХСервер.СформироватьТекстОтбораПоВерсии("ЗначенияПоказателейОтчетовНечисловые.Версия",УидГруппыОтборов,РасшифровкаОтборовСценарий,ТзПараметровЗапроса,"Сценарий")+"
		|	"+АналитическийБланкУХСервер.СформироватьТекстОтбораПоВерсии("ЗначенияПоказателейОтчетовНечисловые.Версия",УидГруппыОтборов,РасшифровкаОтборовОрганизация,ТзПараметровЗапроса,"Организация")+"
		|	"+АналитическийБланкУХСервер.СформироватьТекстОтбораПоВерсии("ЗначенияПоказателейОтчетовНечисловые.Версия",УидГруппыОтборов,РасшифровкаОтборовПроект,ТзПараметровЗапроса,"Проект")+"	
		|	И ЗначенияПоказателейОтчетовНечисловые.Показатель = &Показатель"+" 
		|	И ЗначенияПоказателейОтчетовНечисловые.Версия.ВидОтчета  = &ВидОтчета"+"
		|	И ( (НЕ ЗначенияПоказателейОтчетовНечисловые.Версия.ЧерноваяВерсия) ИЛИ ЗначенияПоказателейОтчетовНечисловые.Версия.ИдентификаторСеанса=&ИдентификаторСеанса)  
		|СГРУППИРОВАТЬ ПО
		|ЗначенияПоказателейОтчетовНечисловые.Версия.Сценарий,
		|ЗначенияПоказателейОтчетовНечисловые.Версия.Проект,
		|ЗначенияПоказателейОтчетовНечисловые.Версия.ПериодОтчета,
		|ЗначенияПоказателейОтчетовНечисловые.Версия.Организация,
		|ЗначенияПоказателейОтчетовНечисловые.Показатель
        |) КАК втВерсииБазаПредв
		| ПО
		| ВерсииЗначенийПоказателей.Код =  втВерсииБазаПредв.ВерсияКод 
		| И ВерсииЗначенийПоказателей.Сценарий =  втВерсииБазаПредв.Сценарий
		| И ВерсииЗначенийПоказателей.Организация =  втВерсииБазаПредв.Организация
		| И ВерсииЗначенийПоказателей.ПериодОтчета =  втВерсииБазаПредв.ПериодОтчета
        | И ВерсииЗначенийПоказателей.Проект =  втВерсииБазаПредв.Проект";
		
	КонецЕсли;
	
	
	тАналитикиЗапроса                   = СтрРазделить(тСтрокаПоказателя.СтрГруппировки,";");
	СтрокаИндексов                      = "";
	
	Для Каждого СтрИтог Из тАналитикиЗапроса Цикл
		
		Если СтрИтог = "" Тогда
			Продолжить;
		ИначеЕсли  СтрИтог = "ПериодОтчета" ИЛИ СтрИтог = "Сценарий" ИЛИ СтрИтог = "Организация" ИЛИ СтрИтог = "Проект" Тогда
			ТекстДополнительныхПолей = ТекстДополнительныхПолей+"
			|втВерсииБаза."+СтрИтог+",";	
			
			ТекстДополнительныхПолейИтог = ТекстДополнительныхПолейИтог+"
			|втВерсииБаза."+СтрИтог+",";
			
			СтрокаИндексов = СтрокаИндексов+СтрИтог+",";
			
		Иначе	 
			тГруппаПоказателя = КэшАналитикПоказателей.Найти(тСтрокаПоказателя.Показатель,"Показатель");
			Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				Если  СокрЛП(тГруппаПоказателя["ВидАналитики"+Инд+"Код"]) = СтрИтог Тогда
					ТекстДополнительныхПолей = ТекстДополнительныхПолей+"
					|&&ТекущийРегистр.Аналитика"+Инд+" КАК "+СтрИтог+",";	
					
					ТекстДополнительныхПолейИтог = ТекстДополнительныхПолейИтог+"
					|&&ТекущийРегистр.Аналитика"+Инд+",";
				КонецЕсли;						
			КонецЦикла;	
			Если тГруппаПоказателя.ВидАналитикиВалютаКод =  СтрИтог Тогда	
				ТекстДополнительныхПолей = ТекстДополнительныхПолей+"
				|&&ТекущийРегистр.АналитикаВалюта КАК "+СтрИтог+",";	
				
				ТекстДополнительныхПолейИтог = ТекстДополнительныхПолейИтог+"
				|&&ТекущийРегистр.АналитикаВалюта,"
			КонецЕсли;	
			
			СтрокаИндексов = СтрокаИндексов+СтрИтог+",";
			
		КонецЕсли;			
	КонецЦикла;	

	СтрокаРесурса = "";
	
	Если тСвойстваПоказателя.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
		Если   тСвойстваПоказателя.ВидИтога = Перечисления.ВидыИтоговПоказателя.НеРассчитывается  Тогда
			СтрокаРесурса = " 	СУММА(&&ТекущийРегистр.Значение)";
		ИначеЕсли  тСвойстваПоказателя.ВидИтога = Перечисления.ВидыИтоговПоказателя.Максимум Тогда
			СтрокаРесурса = " 	МАКСИМУМ(&&ТекущийРегистр.Значение)";
		ИначеЕсли  тСвойстваПоказателя.ВидИтога = Перечисления.ВидыИтоговПоказателя.Минимум Тогда
			СтрокаРесурса = " 	МИНИМУМ(&&ТекущийРегистр.Значение)";
		ИначеЕсли  Не ЗначениеЗаполнено(тСвойстваПоказателя.ВидИтога) ИЛИ тСвойстваПоказателя.ВидИтога = Перечисления.ВидыИтоговПоказателя.Сумма Тогда 	
			СтрокаРесурса = " 	СУММА(&&ТекущийРегистр.Значение)";
		ИначеЕсли тСвойстваПоказателя.ВидИтога = Перечисления.ВидыИтоговПоказателя.Среднее Тогда	
			СтрокаРесурса = " 	СРЕДНЕЕ(&&ТекущийРегистр.Значение)";
		КонецЕсли;				
	Иначе	
		Если   тСвойстваПоказателя.ВидИтога = Перечисления.ВидыИтоговПоказателя.НеРассчитывается   Тогда
			СтрокаРесурса = " 	МАКСИМУМ(&&ТекущийРегистр.Значение)";
		ИначеЕсли  тСвойстваПоказателя.ВидИтога = Перечисления.ВидыИтоговПоказателя.Максимум Тогда
			СтрокаРесурса = " 	МАКСИМУМ(&&ТекущийРегистр.Значение)";
		ИначеЕсли  тСвойстваПоказателя.ВидИтога = Перечисления.ВидыИтоговПоказателя.Минимум Тогда
			СтрокаРесурса = " 	МИНИМУМ(&&ТекущийРегистр.Значение)";
		ИначеЕсли  (Не ЗначениеЗаполнено(тСвойстваПоказателя.ВидИтога) И  тСвойстваПоказателя.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка) Тогда 	
			СтрокаРесурса = " 	МАКСИМУМ(&&ТекущийРегистр.Значение)";
		ИначеЕсли  (Не ЗначениеЗаполнено(тСвойстваПоказателя.ВидИтога) И  (тСвойстваПоказателя.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево ИЛИ тСвойстваПоказателя.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата)) Тогда 	
			СтрокаРесурса = " 	МАКСИМУМ(&&ТекущийРегистр.Значение)";
		КонецЕсли;		
	КонецЕсли;

	
	СтрокаУсловий = "";
	
	ОтборыТекущейАналитики = РасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УидГруппыОтборов",УидГруппыОтборов));
	ПрефиксПараметра = УидГруппыОтборов;
	Для Каждого СтрОтбор Из ОтборыТекущейАналитики Цикл
		Если СтрОтбор.ПолеКод = "ПериодС" ИЛИ СтрОтбор.ПолеКод = "ПериодПо" ИЛИ СтрОтбор.ПолеКод = "Организация" ИЛИ СтрОтбор.ПолеКод = "Сценарий" ИЛИ СтрОтбор.ПолеКод = "Проект" ИЛИ СтрОтбор.Отбор = Нстр("ru = 'Отбор не производится'") Тогда
			Продолжить;
		КонецЕсли;			
		
		Если  НЕ тАналитикиЗапроса.Найти(СтрОтбор.ПолеКод) = Неопределено Тогда
			ТекЗначенияДляОтбора = тОтборАналитикПоКонтексту.ВыгрузитьКолонку(СтрОтбор.ПолеКод);
			тГруппаПоказателя = КэшАналитикПоказателей.Найти(тСтрокаПоказателя.Показатель,"Показатель");
			Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				Если  СокрЛП(тГруппаПоказателя["ВидАналитики"+Инд+"Код"]) = СтрОтбор.ПолеКод Тогда
					СтрокаУсловий = СтрокаУсловий+"
					|И &&ТекущийРегистр.Аналитика"+Инд+" В (&Пар_"+ПрефиксПараметра+"_Аналитика"+Инд+")";
					ФинальныйЗапрос.Параметры.Вставить("Пар_"+ПрефиксПараметра+"_Аналитика"+Инд,ТекЗначенияДляОтбора);
				КонецЕсли;
			КонецЦикла;		

			  Продолжить;
		КонецЕсли;	
		
		тГруппаПоказателя = КэшАналитикПоказателей.Найти(тСтрокаПоказателя.Показатель,"Показатель");
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			Если  СокрЛП(тГруппаПоказателя["ВидАналитики"+Инд+"Код"]) = СтрОтбор.ПолеКод Тогда
				 СтрокаУсловий = СтрокаУсловий+"
				 |"+АналитическийБланкУХСервер.СформироватьТекстОтбораПоВерсии("&&ТекущийРегистр",ПрефиксПараметра,СтрОтбор,ТзПараметровЗапроса,"Аналитика"+Инд);
			КонецЕсли;
		КонецЦикла;		
	КонецЦикла;	

	
	ФинальныйЗапрос.Текст =  ФинальныйЗапрос.Текст +"	
	|;
	|///////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|"+СтрокаРесурса+" КАК Значение,
	|"+ТекстДополнительныхПолей+"
	| &&ТекущийРегистр.Показатель КАК Показатель
	|ИЗ
	|  &&ТекущийРегистр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсииБаза КАК втВерсииБаза
	|		ПО втВерсииБаза.Версия = &&ТекущийРегистр.Версия
	|	    И &&ТекущийРегистр.Показатель = &Показатель";   
	Если  НЕ СтрокаУсловий="" Тогда
		  ФинальныйЗапрос.Текст =  ФинальныйЗапрос.Текст +"
		  |ГДЕ "+ПРАВ(СтрокаУсловий,СтрДлина(СтрокаУсловий)-2);
	КонецЕсли;	
	ФинальныйЗапрос.Текст =  ФинальныйЗапрос.Текст +"	
	|СГРУППИРОВАТЬ ПО
	|"+ТекстДополнительныхПолейИтог+"
    |&&ТекущийРегистр.Показатель	
	|";	
 
	ФинальныйЗапрос.Параметры.Вставить("Валюта",ЭтотОбъект["Валюта"]);
	ФинальныйЗапрос.Параметры.Вставить("ИдентификаторСеанса",Строка(ИдентификаторСеанса));
	ФинальныйЗапрос.Параметры.Вставить("Показатель",тСтрокаПоказателя.Показатель);
	ФинальныйЗапрос.Параметры.Вставить("ВидОтчета",тСвойстваПоказателя.ВидОтчета);
	
	Для Каждого ПараметрОтчета Из ТзПараметровЗапроса Цикл
		Если ПараметрОтчета.ТипОтбора = "Равно" Или ПараметрОтчета.ТипОтбора = "Не равно" ИЛИ ПараметрОтчета.ТипОтбора = "В списке" ИЛИ ПараметрОтчета.ТипОтбора = "Не в списке" ИЛИ ПараметрОтчета.ТипОтбора = "В группе" ИЛИ ПараметрОтчета.ТипОтбора  = "В группе из списка" Тогда
			ФинальныйЗапрос.УстановитьПараметр(ПараметрОтчета.ИмяОтбора,ПараметрОтчета.ЗначениеОтбора);
		КонецЕсли;		
		Если ПараметрОтчета.ТипОтбора = "Сценарий отчета" 
			Или ПараметрОтчета.ТипОтбора = "Организация отчета"
			Или ПараметрОтчета.ТипОтбора = "Проект отчета"
			Или ПараметрОтчета.ТипОтбора = "Параметр отчета" Тогда
			ФинальныйЗапрос.УстановитьПараметр(ПараметрОтчета.ИмяОтбора,ЭтотОбъект[СтрЗаменить(ПараметрОтчета.ЗначениеОтбора,"&","")]);
		КонецЕсли;		
		Если Лев(ПараметрОтчета.ИмяОтбора,12) = "ПериодОтчета" Тогда	
			Если  НЕ тАналитикиЗапроса.Найти("ПериодОтчета") = Неопределено Тогда		
				ФинальныйЗапрос.УстановитьПараметр(ПараметрОтчета.ИмяОтбора,тОтборАналитикПоКонтексту.ВыгрузитьКолонку("ПериодОтчета"));	
			Иначе
				СформироватьОтборПоПериодам(ФинальныйЗапрос,ПараметрОтчета.УидГруппыОтбора,ПараметрОтчета.ИмяОтбора);
			КонецЕсли;		
		КонецЕсли;		
	КонецЦикла;	

	ИндексРегистра = КэшГруппОтборовПоказателей.Найти(тСтрокаПоказателя.УидГруппыОтборов,"УидГруппыОтборов").ИндексРегистра;
	ЧислоАналитикГруппы = ИндексРегистра;
	Если ЧислоАналитикГруппы = 0 ИЛИ ЧислоАналитикГруппы=NULL Тогда
		ЧислоАналитикГруппы = "Синтетика";
		ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекущийРегистр.ЗначениеВалюта","0");
	ИначеЕсли ЧислоАналитикГруппы = -1 Тогда
		ЧислоАналитикГруппы = "Нечисловые";
		ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекущийРегистр.ЗначениеВалюта","0");
	ИначеЕсли ЧислоАналитикГруппы = -11 Тогда
		ЧислоАналитикГруппы = "Нечисловые";
		ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекущийРегистр.ЗначениеВалюта","0");	
	ИначеЕсли ЧислоАналитикГруппы = -2 Тогда
		ЧислоАналитикГруппы = "Валютные";
	КонецЕсли;	
	
	
	ФинальныйЗапрос.Текст = СтрЗаменить(ФинальныйЗапрос.Текст,"&&ТекущийРегистр","РегистрСведений.ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы);

	ТзЗначений = ФинальныйЗапрос.Выполнить().Выгрузить();
	
	СтрокаИндексов = ЛЕВ(СтрокаИндексов,СтрДлина(СтрокаИндексов)-1);
	ТзЗначений.Индексы.Добавить(СтрокаИндексов);
	
	Возврат ТзЗначений;
		
КонецФункции	

Функция ПолучитьРезультатСОтбором(тОбновляемаяОбласть,РезультатЗапроса,СтруктураОтбора = Неопределено,СтруктураГРуппирвок=Неопределено)
						
	
	Если СтруктураОтбора = Неопределено Тогда
		РезультатИтог               = РезультатЗапроса;
	Иначе	
		РезультатИтог 				= РезультатЗапроса.НайтиСтроки(СтруктураОтбора);
	КонецЕсли;
	
	Если РезультатИтог.Количество() = 1 Тогда
		 ЗначениеИтога = РезультатИтог[0].Значение;
	Иначе
		 ЗначениеИтога = 0;
	КонецЕсли;	
	
	Возврат ЗначениеИтога;
	
КонецФункции  

Процедура ОбновитьСтруктуруГруппировок(нТзЗапросов,текПоказатель)
	
	Если нТзЗапросов.СтруктураГруппировок = Неопределено Тогда
		 тСтруктураГруппировок = Новый Структура;
		 нТзЗапросов.СтруктураГруппировок =  тСтруктураГруппировок;		 
	КонецЕсли;	
	
	тСтруктураГруппировок = нТзЗапросов.СтруктураГруппировок;
	
	Если текПоказатель.ТипОбласти = "Синтетика" Тогда
		тСтруктураГруппировок.Вставить("Общие");
	Иначе	 
		
		Если ЗначениеЗаполнено(текПоказатель.ИмяОбластиКолонок) Тогда
			
			текСвойстваОбласти =  НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов",текПоказатель.ИмяОбластиКолонок));
			Для Каждого сСвойство Из текСвойстваОбласти Цикл
				Если  сСвойство.ПолеКод = "ПериодС" Или сСвойство.ПолеКод = "ПериодПо" Тогда
					тСтруктураГруппировок.Вставить("ПериодОтчета"); 
					Продолжить; 
				КонецЕсли;	 
				тСтруктураГруппировок.Вставить(сСвойство.ПолеКод); 
			КонецЦикла;	 
			
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(текПоказатель.ИмяОбластиСтрок) Тогда
			
			текСвойстваОбласти =  НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов",текПоказатель.ИмяОбластиСтрок));
			Для Каждого сСвойство Из текСвойстваОбласти Цикл
				Если  сСвойство.ПолеКод = "ПериодС" Или сСвойство.ПолеКод = "ПериодПо" Тогда
					тСтруктураГруппировок.Вставить("ПериодОтчета"); 
					Продолжить; 
				КонецЕсли;	 
				тСтруктураГруппировок.Вставить(сСвойство.ПолеКод); 
			КонецЦикла;	 
			
		КонецЕсли; 
	
	КонецЕсли;	
	
	
КонецПроцедуры	

Функция ПолучитьИтогПоПоказателю(тЗначение,тОбновляемаяОбласть,тСвойстваПоказателя)
	
	Если тОбновляемаяОбласть.ДетальнаяЗапись Тогда
		
		тЗначениеПоИтогу = тЗначение;
		
	ИначеЕсли тСвойстваПоказателя.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка Тогда
		
		тЗначениеПоИтогу = "";
	
	Иначе
		
		Если тОбновляемаяОбласть.ТипОбласти = "Колонки" 
			И тСвойстваПоказателя.ВидИтога = Перечисления.ВидыИтоговПоказателя.НеРассчитывается Тогда
			тЗначениеПоИтогу = "";
		ИначеЕсли (тОбновляемаяОбласть.ТипОбласти = "Строки" ИЛИ тОбновляемаяОбласть.ТипОбласти = "Синтетика") 
			И тСвойстваПоказателя.ВидИтогаПериод = Перечисления.ВидыИтоговПоказателяПоПериоду.НеРассчитывать Тогда
			тЗначениеПоИтогу = "";
		ИначеЕсли НЕ ЗначениеЗаполнено(тСвойстваПоказателя.ВидИтога) Тогда	
			тЗначениеПоИтогу = тЗначение;
		Иначе	
			тЗначениеПоИтогу = тЗначение;
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат тЗначениеПоИтогу;
	
КонецФункции	

Процедура ЗаполнитьОперандыОбновляемойОбласти(текПоказатель,нТобновляемаяОбласть,тОбновляемыеОбласти,тКэшПоказателейКроссОбластей)
	
	тОперандыПоПоказателям = тКэшПоказателейКроссОбластей.НайтиСтроки(Новый Структура("ИмяФормулы",текПоказатель.ИмяФормулы));
	
	Для Каждого СтрОперанд Из тОперандыПоПоказателям Цикл		
		нТобновляемаяОбластьОперанд =  тОбновляемыеОбласти.Добавить();
		ЗаполнитьЗначенияСвойств(нТобновляемаяОбластьОперанд,нТобновляемаяОбласть);	
		нТобновляемаяОбластьОперанд.Показатель 			= СтрОперанд.Показатель;		
		нТобновляемаяОбластьОперанд.УидГруппыОтборов 	= СтрОперанд.УидГруппыОтборов;	
		нТобновляемаяОбластьОперанд.ДетальнаяЗапись     = Ложь;
	КонецЦикла;
	
КонецПроцедуры	

#КонецОбласти


#Область КонтекстноеОбновлениеЗависимыхПоказателей

Процедура ВывестиКомментарии(ПолеТабличногоДокументаМакет)
	
	тКомментарии = ПолучитьИзВременногоХранилища(мКомментарииАдрес);
	
	Если тКомментарии.Количество() = 0 Тогда
		Возврат;                                                                           
	КонецЕсли;	

	тКэшПоказателейКроссОбластей 	= ПолучитьИзВременногоХранилища(КэшПоказателейКроссОбластейАдрес);
	ТзПоказателиМакетовРаскрытий	= ПолучитьИзВременногоХранилища(ПоказателиМакетовРаскрытийАдрес);
    КэшАналитикПоказателей 			= ПолучитьИзВременногоХранилища(КэшАналитикПоказателейАдрес);
	тВыводимыхОбластей 				= ПолучитьИзВременногоХранилища(тКэшОбластейРаскрытияАдрес);

	Если ЗначениеЗаполнено(ТзПоказателейОбластейКолонкиАдрес) И ЗначениеЗаполнено(СтруктураРасшифровкаОбластейХАдрес) Тогда 
		ТзПоказателейОбластейКолонки 			= ПолучитьИзВременногоХранилища(ТзПоказателейОбластейКолонкиАдрес);
		СтруктураРасшифровкаОбластейХ		    = ПолучитьИзВременногоХранилища(СтруктураРасшифровкаОбластейХАдрес);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТзПоказателейОбластейСтрокиАдрес) И ЗначениеЗаполнено(СтруктураРасшифровкаОбластейYАдрес) Тогда 
		ТзПоказателейОбластейСтроки 			= ПолучитьИзВременногоХранилища(ТзПоказателейОбластейСтрокиАдрес);
		СтруктураРасшифровкаОбластейY		    = ПолучитьИзВременногоХранилища(СтруктураРасшифровкаОбластейYАдрес);
	КонецЕсли;	

	
	тОбновляемыеОбласти = тКэшПоказателейКроссОбластей.СкопироватьКолонки();
	тОбновляемыеОбласти.Колонки.Добавить("ПериодОтчета");
	тОбновляемыеОбласти.Колонки.Добавить("Организация");
    тОбновляемыеОбласти.Колонки.Добавить("Проект");
    тОбновляемыеОбласти.Колонки.Добавить("Сценарий");
	тОбновляемыеОбласти.Колонки.Добавить("Комментарий");
	
	Для Каждого СтрПоказатель Из тКомментарии Цикл
		
		//Добавление итогов по раскрытиям
		тИтогиПоПоказателям = тКэшПоказателейКроссОбластей.НайтиСтроки(Новый Структура("Показатель,УидГРуппыОтборов",СтрПоказатель.Показатель,СтрПоказатель.УидГруппыОтборов));
		
		Для Каждого текПоказатель Из тИтогиПоПоказателям Цикл
			
			нТобновляемаяОбласть 				= тОбновляемыеОбласти.Добавить();
			
			тАналитикиОбласти                   = СтрРазделить(текПоказатель.СтрГруппировки,";");
			
			
			ФлДетали = Истина;
			
			тГруппаПоказателя = КэшАналитикПоказателей.Найти(СтрПоказатель.Показатель,"Показатель");
			Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				Если  ЗначениеЗаполнено(тГруппаПоказателя["ВидАналитики"+Инд])  Тогда	
					тКэшАналитикаКод = СокрЛП(тГруппаПоказателя["ВидАналитики"+Инд+"Код"]);
					Если тОбновляемыеОбласти.Колонки.Найти(тКэшАналитикаКод) = Неопределено Тогда
						тОбновляемыеОбласти.Колонки.Добавить(тКэшАналитикаКод);
					КонецЕсли;	
					
					Если НЕ тАналитикиОбласти.Найти(тКэшАналитикаКод)=Неопределено Тогда
						нТобновляемаяОбласть[тКэшАналитикаКод] = СтрПоказатель["Аналитика"+Инд];
					ИНаче	
						ФлДетали = Ложь;
					КонецЕсли;						
					
				КонецЕсли;	
			КонецЦикла;	
			
			Если ЗначениеЗаполнено(тГруппаПоказателя.ВидАналитикиВалютаКод)  Тогда	
				тКэшАналитикаКод = СокрЛП(тГруппаПоказателя["ВидАналитикиВалютаКод"]);
				Если тОбновляемыеОбласти.Колонки.Найти(тКэшАналитикаКод) = Неопределено Тогда
					тОбновляемыеОбласти.Колонки.Добавить(тКэшАналитикаКод);
				КонецЕсли;	
				Если НЕ тАналитикиОбласти.Найти(тКэшАналитикаКод)=Неопределено Тогда
					нТобновляемаяОбласть[тКэшАналитикаКод] = СтрПоказатель["АналитикаВалюта"];
				ИНаче	
					ФлДетали = Ложь;
				КонецЕсли;		
			КонецЕсли;	
			
			
			Если НЕ тАналитикиОбласти.Найти("ПериодОтчета")=Неопределено Тогда
				нТобновляемаяОбласть["ПериодОтчета"] = СтрПоказатель["ПериодОтчета"];
			Иначе	
				ФлДетали = Ложь;
			КонецЕсли;
			
			Если НЕ тАналитикиОбласти.Найти("Организация")=Неопределено Тогда
				нТобновляемаяОбласть["Организация"] = СтрПоказатель["Организация"];
			КонецЕсли;

			Если НЕ тАналитикиОбласти.Найти("Сценарий")=Неопределено Тогда
				нТобновляемаяОбласть["Сценарий"] = СтрПоказатель["Сценарий"];
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(нТобновляемаяОбласть,текПоказатель);
			нТобновляемаяОбласть.ДетальнаяЗапись = ФлДетали;
            нТобновляемаяОбласть.Комментарий     = СтрПоказатель.Комментарий;
			
		КонецЦикла;
		
	КонецЦикла;
	
    тОбновляемыеОбластиФинал 		= тОбновляемыеОбласти.Скопировать(Новый Структура("ДетальнаяЗапись",Истина));
	
	Для Каждого тОбновляемаяОбласть Из тОбновляемыеОбластиФинал Цикл
		
		Если тОбновляемаяОбласть.ТипОбласти = "Синтетика" Тогда
			
			НачалоОбластиY  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигY;
			НачалоОбластиХ  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигX;
			
			КоординатаХ = НачалоОбластиХ+тОбновляемаяОбласть.СмещениеХ-1;
			КоординатаY = НачалоОбластиY+(тОбновляемаяОбласть.СмещениеY-1);
			
			тОбластьДляВывода = ПолеТабличногоДокументаМакет.Область(КоординатаY,КоординатаХ,КоординатаY,КоординатаХ);	
			
			тОбластьДляВывода.Примечание = тОбновляемаяОбласть.Комментарий; 
			
			Если  НЕ тОбластьДляВывода = Неопределено Тогда
				тОбластьДляВывода.Примечание = тОбновляемаяОбласть.Комментарий;        
			Иначе
				Продолжить;	
			КонецЕсли;
			
		ИначеЕсли тОбновляемаяОбласть.ТипОбласти = "Колонки" Тогда
			
			Если НЕ СтруктураРасшифровкаОбластейХ.Свойство(тОбновляемаяОбласть.ИмяОбластиКолонок) Тогда
				Продолжить;
			КонецЕсли;
			
			НачалоОбластиY  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигY;
			НачалоОбластиХ  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигX;			
			
			КоординатаY = НачалоОбластиY+(тОбновляемаяОбласть.СмещениеY-1);			
			
			СтруктураГРуппирвок = СтрРазделить(тОбновляемаяОбласть.СтрГруппировки,";");
			
			СтруктураОтбора = Новый Структура;
			ПолнаяСтруктураПоиска =   СтруктураРасшифровкаОбластейХ[тОбновляемаяОбласть.ИмяОбластиКолонок].Колонки;
			Для Каждого Кол Из ПолнаяСтруктураПоиска Цикл
				Если Кол.Имя = "СмещениеХ"  ИЛИ Кол.Имя = "ИмяМакета"  ИЛИ Кол.Имя = "ЭтоГруппа" Тогда
					Продолжить;
				Иначе
					СтруктураОтбора.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
				КонецЕсли;	
			КонецЦикла;	
			
			КоординатаСмещенияX = СтруктураРасшифровкаОбластейХ[тОбновляемаяОбласть.ИмяОбластиКолонок].НайтиСтроки(СтруктураОтбора);
			
			Если КоординатаСмещенияX.Количество() = 1 Тогда
				КоординатаСмещенияX_ 			= КоординатаСмещенияX[0].СмещениеХ;
				КоординатаСмещенияПоказателяX  = ТзПоказателиМакетовРаскрытий.НайтиСтроки(Новый Структура("Показатель,УидГруппыОтборов,ИмяМакетаКолонок",тОбновляемаяОбласть.Показатель,тОбновляемаяОбласть.УидГруппыОтборов, КоординатаСмещенияX[0].ИмяМакета))[0].СмещениеХ;
				
				ПолеТабличногоДокументаМакет.Область(КоординатаY
				,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX
				,КоординатаY
				,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX).Примечание.Текст = тОбновляемаяОбласть.Комментарий;
			Иначе	 
				Продолжить;					 
			КонецЕсли;	
			
			
		ИначеЕсли тОбновляемаяОбласть.ТипОбласти = "Строки" Тогда
			
			Если НЕ СтруктураРасшифровкаОбластейY.Свойство(тОбновляемаяОбласть.ИмяОбластиСтрок) Тогда
				Продолжить;
			КонецЕсли;
			
			НачалоОбластиY  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигY;
			НачалоОбластиХ  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигX;
			
			КоординатаХ = НачалоОбластиХ+тОбновляемаяОбласть.СмещениеХ-1;
			
			СтруктураГРуппирвок = СтрРазделить(тОбновляемаяОбласть.СтрГруппировки,";");
			
			СтруктураОтбора = Новый Структура;
			ПолнаяСтруктураПоиска =   СтруктураРасшифровкаОбластейY[тОбновляемаяОбласть.ИмяОбластиСтрок].Колонки;
			Для Каждого Кол Из ПолнаяСтруктураПоиска Цикл
				Если Кол.Имя = "СмещениеY" ИЛИ Кол.Имя = "ИмяМакета" ИЛИ Кол.Имя = "ЭтоГруппа" Тогда
					Продолжить;
				Иначе
					СтруктураОтбора.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
				КонецЕсли;	
			КонецЦикла;	
			
			КоординатаСмещенияY = СтруктураРасшифровкаОбластейY[тОбновляемаяОбласть.ИмяОбластиСтрок].НайтиСтроки(СтруктураОтбора);
			Если КоординатаСмещенияY.Количество() = 1 Тогда
				КоординатаСмещенияY_			= КоординатаСмещенияY[0].СмещениеY-1;
				КоординатаСмещенияПоказателяY  = ТзПоказателиМакетовРаскрытий.НайтиСтроки(Новый Структура("Показатель,УидГруппыОтборов,ИмяМакетаСтрок",тОбновляемаяОбласть.Показатель,тОбновляемаяОбласть.УидГруппыОтборов, КоординатаСмещенияY[0].ИмяМакета))[0].СмещениеY;
				
				ПолеТабличногоДокументаМакет.Область(НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
				,КоординатаХ
				,НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
				,КоординатаХ).Примечание.Текст = тОбновляемаяОбласть.Комментарий;
			Иначе	 
				Продолжить;					 
			КонецЕсли;	
			
		ИначеЕсли тОбновляемаяОбласть.ТипОбласти = "Таблица" Тогда
			
			Если НЕ СтруктураРасшифровкаОбластейY.Свойство(тОбновляемаяОбласть.ИмяОбластиСтрок) Тогда
				Продолжить;
			КонецЕсли;			
			
			тСтруктураТаблицы = Новый Структура;
			
			НачалоОбластиY  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигY;
			НачалоОбластиХ  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигX;
			
			СтруктураГРуппирвок = СтрРазделить(тОбновляемаяОбласть.СтрГруппировки,";");
			
			СтруктураОтбора = Новый Структура;
			ПолнаяСтруктураПоиска =   СтруктураРасшифровкаОбластейY[тОбновляемаяОбласть.ИмяОбластиСтрок].Колонки;
			Для Каждого Кол Из ПолнаяСтруктураПоиска Цикл
				Если Кол.Имя = "СмещениеY" ИЛИ Кол.Имя = "ИмяМакета" ИЛИ Кол.Имя = "ЭтоГруппа" Тогда
					Продолжить;
				Иначе
					СтруктураОтбора.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
					тСтруктураТаблицы.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
				КонецЕсли;	
			КонецЦикла;	
			
			КоординатаСмещенияY = СтруктураРасшифровкаОбластейY[тОбновляемаяОбласть.ИмяОбластиСтрок].НайтиСтроки(СтруктураОтбора);
			Если КоординатаСмещенияY.Количество() = 1 Тогда
				КоординатаСмещенияY_ 	= КоординатаСмещенияY[0].СмещениеY-1;
				КоординатаСмещенияПоказателяY  = ТзПоказателиМакетовРаскрытий.НайтиСтроки(Новый Структура("Показатель,УидГруппыОтборов,ИмяМакетаСтрок",тОбновляемаяОбласть.Показатель,тОбновляемаяОбласть.УидГруппыОтборов, КоординатаСмещенияY[0].ИмяМакета))[0].СмещениеY;
			Иначе	 
				Продолжить;
			КонецЕсли;	
			
			СтруктураОтбора = Новый Структура;
			ПолнаяСтруктураПоиска =   СтруктураРасшифровкаОбластейХ[тОбновляемаяОбласть.ИмяОбластиКолонок].Колонки;
			Для Каждого Кол Из ПолнаяСтруктураПоиска Цикл
				Если Кол.Имя = "СмещениеХ" ИЛИ Кол.Имя = "ИмяМакета" ИЛИ Кол.Имя = "ЭтоГруппа" Тогда
					Продолжить;
				Иначе
					СтруктураОтбора.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
					тСтруктураТаблицы.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
				КонецЕсли;	
			КонецЦикла;	
			
			
			КоординатаСмещенияX = СтруктураРасшифровкаОбластейХ[тОбновляемаяОбласть.ИмяОбластиКолонок].НайтиСтроки(СтруктураОтбора);
			
			Если КоординатаСмещенияX.Количество() = 1 Тогда
				КоординатаСмещенияX_ 			= КоординатаСмещенияX[0].СмещениеХ;
				
				КоординатаСмещенияПоказателяX  = ТзПоказателиМакетовРаскрытий.НайтиСтроки(Новый Структура("Показатель,УидГруппыОтборов,ИмяМакетаКолонок",тОбновляемаяОбласть.Показатель,тОбновляемаяОбласть.УидГруппыОтборов, КоординатаСмещенияX[0].ИмяМакета));
				Если  КоординатаСмещенияПоказателяX.Количество()>0 Тогда
					КоординатаСмещенияПоказателяX = КоординатаСмещенияПоказателяX[0].СмещениеХ
				Иначе	
					Продолжить;
				КонецЕсли;	
			Иначе	 
				Продолжить;	 
			КонецЕсли;	
			
			ПолеТабличногоДокументаМакет.Область(НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
			,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX
			,НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
			,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX).Примечание.Текст = тОбновляемаяОбласть.Комментарий;
			
		КонецЕсли;				
		
	КонецЦикла;
			
КонецПроцедуры	

Функция  ЗаполнитьСтруктуруНемасштабируемыхПоказателей(ТзСвойстваПоказателей)
	
	мНемасштабируемые = Новый Массив;
		
	тНемасштабируемые = ТзСвойстваПоказателей.НайтиСтроки(Новый Структура("НеМасштабируется",Истина));
	Для Каждого стрПоказатель Из тНемасштабируемые Цикл
		мНемасштабируемые.Добавить(стрПоказатель.Ссылка)
	КонецЦикла;	

	Возврат мНемасштабируемые;
	
КонецФункции

Процедура ВыделитьОбластиПоказателей(ПолеТабличногоДокументаМакет,МассивПоказателей,ПериодРасшифровки,СтруктураОтбора,МассивИменОбластей,НезаполненныеАналитики) Экспорт
	
	тОбластиСинтетика = ПолучитьИзВременногоХранилища(тзПоказателиАдрес);
	
	тКэшПоказателейКроссОбластей 	= ПолучитьИзВременногоХранилища(КэшПоказателейКроссОбластейАдрес);
	ТзПоказателиМакетовРаскрытий 	= ПолучитьИзВременногоХранилища(ПоказателиМакетовРаскрытийАдрес);
	КэшАналитикПоказателей 			= ПолучитьИзВременногоХранилища(КэшАналитикПоказателейАдрес);
    тВыводимыхОбластей 				= ПолучитьИзВременногоХранилища(тКэшОбластейРаскрытияАдрес);

	Если ЗначениеЗаполнено(ТзПоказателейОбластейКолонкиАдрес) И  ЗначениеЗаполнено(СтруктураРасшифровкаОбластейХАдрес) Тогда 
		ТзПоказателейОбластейКолонки 			= ПолучитьИзВременногоХранилища(ТзПоказателейОбластейКолонкиАдрес);
		СтруктураРасшифровкаОбластейХ		    = ПолучитьИзВременногоХранилища(СтруктураРасшифровкаОбластейХАдрес);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТзПоказателейОбластейСтрокиАдрес) И  ЗначениеЗаполнено(СтруктураРасшифровкаОбластейYАдрес) Тогда 
		ТзПоказателейОбластейСтроки 			= ПолучитьИзВременногоХранилища(ТзПоказателейОбластейСтрокиАдрес);
		СтруктураРасшифровкаОбластейY		    = ПолучитьИзВременногоХранилища(СтруктураРасшифровкаОбластейYАдрес);
	КонецЕсли;	

	
	ТекущаяСтруктураГруппирвок = Новый Структура;
	Если ЗначениеЗаполнено(ПериодРасшифровки) Тогда	
		ТекущаяСтруктураГруппирвок.Вставить("ПериодОтчета",ПериодРасшифровки);		
	КонецЕсли;	
	
	Если НЕ СтруктураОтбора = Неопределено Тогда
		Для Каждого СтрАналитика Из СтруктураОтбора Цикл		
			тГруппаПоказателя = КэшАналитикПоказателей.Найти(МассивПоказателей[0],"Показатель");	
			КлючАналитики     = тГруппаПоказателя[СтрЗаменить(СтрАналитика.Ключ,"Аналитика","ВидАналитики")+"Код"];	
			ТекущаяСтруктураГруппирвок.Вставить(КлючАналитики,СтрАналитика.Значение);			
		КонецЦикла;	
	КонецЕсли;
	
	ТекущаяГруппаУИД = Новый Массив;

	тРасшифровкаГруппОтборов = РасшифровкаГруппОтборов.Выгрузить();
	тРасшифровкаГруппОтборов.Индексы.Добавить("УИДГруппыОтборов");

	тГруппыОтборов  = тРасшифровкаГруппОтборов.Скопировать();
	тГруппыОтборов.Свернуть("УидГруппыОтборов");
	
	
	Для Каждого СтрОтбор Из тГруппыОтборов Цикл
		
		РасшифровкиГруппы = тРасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УидГруппыОтборов",СтрОтбор.УидГруппыОтборов));		
		ФлДетали = Истина;
		
		Для Каждого Стр Из РасшифровкиГруппы Цикл
			
			Если Стр.Поле = "Сценарий" И НЕ Стр.Отбор ="Сценарий отчета" Тогда
				 ФлДетали = Ложь;
			КонецЕсли;	
				
			Если Стр.Поле = "Проект" И НЕ Стр.Отбор ="Проект отчета" Тогда
				 ФлДетали = Ложь;
			КонецЕсли;
			
			Если Стр.Поле = "Организация" И НЕ Стр.Отбор ="Организация отчета" Тогда
				 ФлДетали = Ложь;
			КонецЕсли;
			
			Если Стр.Поле = "ПериодС" И НЕ Стр.Отбор ="Период начала отчета" Тогда
				 ФлДетали = Ложь;
			КонецЕсли;

			Если Стр.Поле = "ПериодПо" И НЕ Стр.Отбор ="Период окончания отчета" Тогда
				 ФлДетали = Ложь;
			КонецЕсли;
		
		КонецЦикла;	
		
		Если ФлДетали Тогда
			ТекущаяГруппаУИД.Добавить(СтрОтбор.УидГруппыОтборов);
		КонецЕсли;	
			
	КонецЦикла;

	Для Каждого тГруппаУид Из ТекущаяГруппаУИД Цикл
		
		ОбластиРасшифровки = тКэшПоказателейКроссОбластей.Скопировать(Новый Структура("Показатель,ЭтоФормула,УидГруппыОтборов",МассивПоказателей[0],Ложь,тГруппаУид));
		
		ОбластиРасшифровки.Колонки.Добавить("Вес",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5,0));
		
		Для Каждого СтрокаОбласти Из  ОбластиРасшифровки Цикл
			
			СтрокаОбласти.Вес = 100;
			
			Если СтрокаОбласти.СтрГруппировки = "" Тогда	
				Для Каждого ГруппировкаРасшифровки Из ТекущаяСтруктураГруппирвок Цикл		
					СтрокаОбласти.Вес = СтрокаОбласти.Вес -1;		
				КонецЦикла;		
			Иначе		
				СтрокаОбласти.Вес =  СтрокаОбласти.Вес - КоличествоНесовпадающихГрупп(СтрокаОбласти.СтрГруппировки,ТекущаяСтруктураГруппирвок);	
			КонецЕсли;	
			
		КонецЦикла;	
		
		ОбластиРасшифровки.Сортировать("Вес УБЫВ");
		
		Если ОбластиРасшифровки.Количество() > 0 Тогда	
			тОбновляемаяОбласть = ОбластиРасшифровки[0];	
			текАналитики = СтрРазделить(тОбновляемаяОбласть.СтрГруппировки,";");
			Для Каждого Стр Из ТекущаяСтруктураГруппирвок Цикл
				Если текАналитики.Найти(Стр.Ключ) = Неопределено Тогда
					НезаполненныеАналитики.Вставить(Стр.Ключ,Стр.Значение);
				КонецЕсли;	
			КонецЦикла;		
		Иначе					
			Продолжить;
		КонецЕсли;	
		
		Если тОбновляемаяОбласть.ТипОбласти = "Синтетика" Тогда
			
			НачалоОбластиY  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигY;
			НачалоОбластиХ  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигX;
			
			КоординатаХ = НачалоОбластиХ+тОбновляемаяОбласть.СмещениеХ-1;
			КоординатаY = НачалоОбластиY+(тОбновляемаяОбласть.СмещениеY-1);
			
			тОбластьДляВывода = ПолеТабличногоДокументаМакет.Область(КоординатаY,КоординатаХ,КоординатаY,КоординатаХ);	
			
			Если  НЕ тОбластьДляВывода = Неопределено Тогда
				МассивИменОбластей.Добавить(тОбластьДляВывода.Имя);        	
			КонецЕсли;
			
		ИначеЕсли тОбновляемаяОбласть.ТипОбласти = "Колонки" Тогда	
			
			НачалоОбластиY  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигY;
			НачалоОбластиХ  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигX;
			
			
			КоординатаY = НачалоОбластиY+(тОбновляемаяОбласть.СмещениеY-1);
			
			
			СтруктураГРуппирвок = СтрРазделить(тОбновляемаяОбласть.СтрГруппировки,";");
			
			СтруктураОтбора = Новый Структура;
			
			Если НЕ СтруктураРасшифровкаОбластейХ.Свойство(тОбновляемаяОбласть.ИмяОбластиКолонок) Тогда
				МассивИменОбластей = Неопределено;
				Возврат;
			КонецЕсли;	
			
			ПолнаяСтруктураПоиска =   СтруктураРасшифровкаОбластейХ[тОбновляемаяОбласть.ИмяОбластиКолонок].Колонки;
			Для Каждого Кол Из ПолнаяСтруктураПоиска Цикл
				Если Кол.Имя = "СмещениеХ"  ИЛИ Кол.Имя = "ИмяМакета" ИЛИ Кол.Имя = "ЭтоГруппа" Тогда
					Продолжить;
				Иначе
					Если ТекущаяСтруктураГруппирвок.Свойство(Кол.Имя) Тогда 
						СтруктураОтбора.Вставить(Кол.Имя,ТекущаяСтруктураГруппирвок[Кол.Имя]);
					Иначе
						СтруктураОтбора.Вставить(Кол.Имя,Неопределено);
					КонецЕсли;
					
				КонецЕсли;	
			КонецЦикла;	
			
			КоординатаСмещенияX = СтруктураРасшифровкаОбластейХ[тОбновляемаяОбласть.ИмяОбластиКолонок].НайтиСтроки(СтруктураОтбора);
			
			Если КоординатаСмещенияX.Количество() = 1 Тогда
				КоординатаСмещенияX_ 			= КоординатаСмещенияX[0].СмещениеХ;
				КоординатаСмещенияПоказателяX  = ТзПоказателиМакетовРаскрытий.НайтиСтроки(Новый Структура("Показатель,УидГруппыОтборов,ИмяМакетаКолонок",тОбновляемаяОбласть.Показатель,тОбновляемаяОбласть.УидГруппыОтборов, КоординатаСмещенияX[0].ИмяМакета))[0].СмещениеХ;
				
				тОбластьДляВывода = ПолеТабличногоДокументаМакет.Область(КоординатаY
				,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX
				,КоординатаY
				,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX);					 
				
				МассивИменОбластей.Добавить(тОбластьДляВывода.Имя);
			Иначе	
				МассивИменОбластей = Неопределено;
				Возврат;		
			КонецЕсли;	
			
			
		ИначеЕсли тОбновляемаяОбласть.ТипОбласти = "Строки" Тогда	
			
			НачалоОбластиY  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигY;
			НачалоОбластиХ  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигX;
			
			КоординатаХ = НачалоОбластиХ+тОбновляемаяОбласть.СмещениеХ-1;
			
			СтруктураГРуппирвок = СтрРазделить(тОбновляемаяОбласть.СтрГруппировки,";");
			
			СтруктураОтбора = Новый Структура;
			
			Если НЕ СтруктураРасшифровкаОбластейY.Свойство(тОбновляемаяОбласть.ИмяОбластиСтрок) Тогда
				МассивИменОбластей = Неопределено;
				Возврат;
			КонецЕсли;	
			
			ПолнаяСтруктураПоиска =   СтруктураРасшифровкаОбластейY[тОбновляемаяОбласть.ИмяОбластиСтрок].Колонки;
			Для Каждого Кол Из ПолнаяСтруктураПоиска Цикл
				Если Кол.Имя = "СмещениеY" ИЛИ Кол.Имя = "ИмяМакета" ИЛИ Кол.Имя = "ЭтоГруппа" Тогда
					Продолжить;
				Иначе
					
					Если ТекущаяСтруктураГруппирвок.Свойство(Кол.Имя) Тогда 
						СтруктураОтбора.Вставить(Кол.Имя,ТекущаяСтруктураГруппирвок[Кол.Имя]);
					Иначе
						СтруктураОтбора.Вставить(Кол.Имя,Неопределено);	
					КонецЕсли;
					
					СтруктураОтбора.Вставить(Кол.Имя,ТекущаяСтруктураГруппирвок[Кол.Имя]);
				КонецЕсли;	
			КонецЦикла;	
			
			КоординатаСмещенияY = СтруктураРасшифровкаОбластейY[тОбновляемаяОбласть.ИмяОбластиСтрок].НайтиСтроки(СтруктураОтбора);
			Если КоординатаСмещенияY.Количество() = 1 Тогда
				КоординатаСмещенияY_			= КоординатаСмещенияY[0].СмещениеY-1;
				КоординатаСмещенияПоказателяY  = ТзПоказателиМакетовРаскрытий.НайтиСтроки(Новый Структура("Показатель,УидГруппыОтборов,ИмяМакетаСтрок",тОбновляемаяОбласть.Показатель,тОбновляемаяОбласть.УидГруппыОтборов, КоординатаСмещенияY[0].ИмяМакета))[0].СмещениеY;
				
				тОбластьДляВывода = ПолеТабличногоДокументаМакет.Область(НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
				,КоординатаХ
				,НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
				,КоординатаХ);				 
				
				МассивИменОбластей.Добавить(тОбластьДляВывода.Имя);  
			Иначе	
				МассивИменОбластей = Неопределено;
				Возврат;		
			КонецЕсли;	
			
		ИначеЕсли тОбновляемаяОбласть.ТипОбласти = "Таблица" Тогда	
			
			
			тСтруктураТаблицы = Новый Структура;
			
			НачалоОбластиY  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигY;
			НачалоОбластиХ  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигX;
			
			СтруктураГРуппирвок = СтрРазделить(тОбновляемаяОбласть.СтрГруппировки,";");
			
			СтруктураОтбора = Новый Структура;
			
			Если НЕ СтруктураРасшифровкаОбластейY.Свойство(тОбновляемаяОбласть.ИмяОбластиСтрок) Тогда
				МассивИменОбластей = Неопределено;
				Возврат;
			КонецЕсли;	
			
			ПолнаяСтруктураПоиска =   СтруктураРасшифровкаОбластейY[тОбновляемаяОбласть.ИмяОбластиСтрок].Колонки;
			
			Для Каждого Кол Из ПолнаяСтруктураПоиска Цикл
				Если Кол.Имя = "СмещениеY" ИЛИ Кол.Имя = "ИмяМакета" ИЛИ Кол.Имя = "ЭтоГруппа" Тогда
					Продолжить;
				Иначе
					Если ТекущаяСтруктураГруппирвок.Свойство(Кол.Имя) Тогда 
						СтруктураОтбора.Вставить(Кол.Имя,ТекущаяСтруктураГруппирвок[Кол.Имя]);
						тСтруктураТаблицы.Вставить(Кол.Имя,ТекущаяСтруктураГруппирвок[Кол.Имя]);
					Иначе
						СтруктураОтбора.Вставить(Кол.Имя,Неопределено);
						тСтруктураТаблицы.Вставить(Кол.Имя,Неопределено);
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;	
			
			КоординатаСмещенияY = СтруктураРасшифровкаОбластейY[тОбновляемаяОбласть.ИмяОбластиСтрок].НайтиСтроки(СтруктураОтбора);
			Если КоординатаСмещенияY.Количество() = 1 Тогда
				КоординатаСмещенияY_ 	= КоординатаСмещенияY[0].СмещениеY-1;
				КоординатаСмещенияПоказателяY  = ТзПоказателиМакетовРаскрытий.НайтиСтроки(Новый Структура("Показатель,УидГруппыОтборов,ИмяМакетаСтрок",тОбновляемаяОбласть.Показатель,тОбновляемаяОбласть.УидГруппыОтборов, КоординатаСмещенияY[0].ИмяМакета))[0].СмещениеY;
				
			Иначе	
				МассивИменОбластей = Неопределено;
				Возврат;		
			КонецЕсли;	
			
			СтруктураОтбора = Новый Структура;
			ПолнаяСтруктураПоиска =   СтруктураРасшифровкаОбластейХ[тОбновляемаяОбласть.ИмяОбластиКолонок].Колонки;
			Для Каждого Кол Из ПолнаяСтруктураПоиска Цикл
				Если Кол.Имя = "СмещениеХ" ИЛИ Кол.Имя = "ИмяМакета" ИЛИ Кол.Имя = "ЭтоГруппа" Тогда
					Продолжить;
				Иначе
					СтруктураОтбора.Вставить(Кол.Имя,ТекущаяСтруктураГруппирвок[Кол.Имя]);
					тСтруктураТаблицы.Вставить(Кол.Имя,ТекущаяСтруктураГруппирвок[Кол.Имя]);
				КонецЕсли;	
			КонецЦикла;	
			
			
			КоординатаСмещенияX = СтруктураРасшифровкаОбластейХ[тОбновляемаяОбласть.ИмяОбластиКолонок].НайтиСтроки(СтруктураОтбора);
			
			Если КоординатаСмещенияX.Количество() = 1 Тогда
				КоординатаСмещенияX_ 			= КоординатаСмещенияX[0].СмещениеХ;
				КоординатаСмещенияПоказателяX  = ТзПоказателиМакетовРаскрытий.НайтиСтроки(Новый Структура("Показатель,УидГруппыОтборов,ИмяМакетаКолонок",тОбновляемаяОбласть.Показатель,тОбновляемаяОбласть.УидГруппыОтборов, КоординатаСмещенияX[0].ИмяМакета))[0].СмещениеХ;
			Иначе	
				МассивИменОбластей = Неопределено;
				Возврат;		
			КонецЕсли;	
			
			тОбластьДляВывода = ПолеТабличногоДокументаМакет.Область(НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
			,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX
			,НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
			,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX);
			
			МассивИменОбластей.Добавить(тОбластьДляВывода.Имя);  
			
		КонецЕсли;				
		
		Если НЕ МассивИменОбластей = Неопределено И МассивИменОбластей.Количество() = 1 Тогда
			 Возврат;
		КонецЕсли;	
		
	КонецЦикла;
	
	МассивИменОбластей = Неопределено;
	
КонецПроцедуры	
	
Функция  КоличествоНесовпадающихГрупп(СтрГруппировки,ТекущаяСтруктураГруппирвок) 
	
	  СтруктураГруппирвок = СтрРазделить(СтрГруппировки,";");

	  СчетчикРасхождений = 0;
	  
	  Для Каждого Стр из  СтруктураГруппирвок Цикл	  
		  Если  НЕ ТекущаяСтруктураГруппирвок.Свойство(Стр) Тогда  
			  СчетчикРасхождений = СчетчикРасхождений+1;  
		  КонецЕсли;	  
	  КонецЦикла;
	
	  Для Каждого Стр из  ТекущаяСтруктураГруппирвок Цикл	  
		  Если  СтруктураГруппирвок.Найти(Стр.Ключ) = Неопределено Тогда  
			  СчетчикРасхождений = СчетчикРасхождений+1;  
		  КонецЕсли;	  
	  КонецЦикла;

	  Возврат  СчетчикРасхождений;
	  
КонецФункции	

#КонецОбласти

ЦветПоложительный = Новый Цвет(0,128,0);
ЦветОтрицательный = Новый Цвет(255,0,0);

#КонецЕсли
	
