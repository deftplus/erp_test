
&НаКлиенте
Перем ВидСравненияКэш;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Заблокирован = Ложь;
	
	Бланк = Параметры.Бланк;
	
	//Первая страница при открытии - всегда ПолеТабличногоДокументаМакет
	ТекущийМакет 		= "ПолеТабличногоДокументаМакет";
	ТекущийОбъектАБ     = "ОбъектАналитическогоБланка";

	Если Не ЗначениеЗаполнено(Бланк) Тогда
		ЭтаФорма.Доступность = Ложь;
		ОтображениеСостояния = ЭтаФорма.Элементы.ПолеТабличногоДокументаМакет.ОтображениеСостояния;
		ОтображениеСостояния.Видимость                      = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
		ОтображениеСостояния.Картинка                       = Новый Картинка;
		ОтображениеСостояния.Текст                          = НСтр("ru = 'Обработка не предназначена для интерактивного использования'");
	КонецЕсли;	
	
	ПараметрыКонтекстногоОбновленияЗависимыхЯчеек = Перечисления.ПараметрыКонтекстногоОбновленияЗависимыхЯчеек.АвтоматическиВсе;

	СтрокаШаблона = Нстр("ru = '%1 (Режим просмотра)'");
		
	ИспользоватьБыстрыйОтборПоОрганизации 						= Истина;
	Элементы.ИспользоватьБыстрыйОтборПоОрганизации.Видимость 	= Истина;
	Элементы.Элемент_Фильтр_Организация.Видимость 				=  ИспользоватьБыстрыйОтборПоОрганизации;

	Элементы.ОсновнаяПанель.ОтображениеСтраниц 					= ОтображениеСтраницФормы.ЗакладкиСверху;
    РасположениеЗакладок                                        = "Закладки сверху";
	
	Если Параметры.Свойство("ЭкземплярОтчета") Тогда   //Открываем форму в режиме просмотра версий
		ЗаполнитьЗначенияСвойств(ЭтаФорма,Параметры.ЭкземплярОтчета);
		Валюта              = Параметры.ВалютаОтображения;
		Периодичность 		= ПериодОтчета.Периодичность;
		тЕдиница            = Параметры.ЭкземплярОтчета.ЕдиницаИзмерения;
		Если тЕдиница = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
			ТекущийДелитель = 1;	
		ИначеЕсли тЕдиница = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
			ТекущийДелитель = 1000;
		Иначе
			ТекущийДелитель = 1000000;
		КонецЕсли;	
						
		СтруктураДополнительныхПараметров = Новый Структура();
		Если Параметры.Свойство("СписокВерсий") Тогда	
			СтруктураДополнительныхПараметров.Вставить("СписокВерсий",Параметры.СписокВерсий);
			СтрокаШаблона = Нстр("ru = '%1 (Режим просмотра версии)'");
		КонецЕсли;
		Если Параметры.Свойство("ПараметрыБазовойВерсии") Тогда	
			СтруктураДополнительныхПараметров.Вставить("ПараметрыБазовойВерсии",Параметры.ПараметрыБазовойВерсии);
			СтрокаШаблона = Нстр("ru = '%1 (Режим сравнения двух версий)'");
		КонецЕсли;
		Если Параметры.Свойство("СтруктураНастроекАналитическогоБланкаАдрес")
			И ЗначениеЗаполнено(Параметры.СтруктураНастроекАналитическогоБланкаАдрес) Тогда
			СтруктураДополнительныхПараметров.Вставить("СтруктураНастроекВарианта",ПолучитьИзВременногоХранилища(Параметры.СтруктураНастроекАналитическогоБланкаАдрес));
		КонецЕсли;

		ДополнительныеПараметрыАдрес  = ПоместитьВоВременноеХранилище(СтруктураДополнительныхПараметров,ЭтаФорма.УникальныйИдентификатор);
		
		Элементы.ФильтрПериод.Видимость = Ложь;
		
		ОбновитьСтрокуКлючевыхПараметров(Параметры);
		
		СоздатьСтраницыДополнительныхБланков(Истина);

		Элементы.ГруппаОтборыСтрокой.Видимость = Истина;
		
	Иначе	
		
		ПрочитатьНастройкиВарианта();	
		СоздатьСтраницыДополнительныхБланков();

	КонецЕсли;
	
	ЭтаФорма.Заголовок = "";
	Если Не ПустаяСтрока(СтрокаШаблона) И ЗначениеЗаполнено(Бланк) тогда								
		ЭтаФорма.Заголовок = СтрШаблон(СтрокаШаблона, Бланк.Наименование);
	КонецЕсли;

	УстановитьПараметрыВыбораПериодов();
	
	//Установим заголовк основного макета по имени бланка
	Элементы.ОсновнойМакет.Заголовок = Строка(Бланк);
	
	//При открытии выводим только заглавный бланк
	Если КэшБланков.Количество() > 0 Тогда
		МассивСтраниц = Новый Массив();
		МассивСтраниц.Добавить(КэшБланков[0].ИмяСтраницы);
		ВывестиБланки(МассивСтраниц);
	КонецЕсли;
	
	АдресЛогаИзмененныхПоказателей 		 = ПоместитьВоВременноеХранилище(УправлениеРасчетомПоказателей.ПолучитьОписаниеЛогаИзмененныхПоказателей(),ЭтаФорма.УникальныйИдентификатор);
    АдресЛогаИзмененныхПоказателейREDO 	 = ПоместитьВоВременноеХранилище(УправлениеРасчетомПоказателей.ПолучитьОписаниеЛогаИзмененныхПоказателей(),ЭтаФорма.УникальныйИдентификатор);
	
	РасчетИЗаписьПоказателейОбъект = РеквизитФормыВЗначение("РасчетИЗаписьПоказателей");
	РасчетИЗаписьПоказателейОбъект.УникальныйИдентификаторСеанса = ЭтаФорма.УникальныйИдентификатор;
	ЗначениеВреквизитФормы(РасчетИЗаписьПоказателейОбъект,"РасчетИЗаписьПоказателей");
	
	УстановитьВидимостьДоступностьЭлементов();
		
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	СохранитьНастройкиВарианта();
	
	Если Заблокирован Тогда
		 Обработки.АналитическийБланк.ОчиститьЛогИзмененныхПоказателей(ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы Тогда
		СохранитьНастройкиВарианта();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиВарианта()
	
	УстановитьПривилегированныйРежим (Истина);
	
	Настройка = Строка(Бланк.УникальныйИдентификатор());
	ЗначениеСохраняемойНастройки = ХранилищеОбщихНастроек.Загрузить(Настройка, Нстр("ru = 'Основной вариант'"),, ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
	
	Периодичность = Перечисления.Периодичность.Месяц;
	
	Если ЗначениеСохраняемойНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;			
	Если  ЗначениеСохраняемойНастройки.Свойство("ПериодОтчета") Тогда		
		ПериодОтчета = ЗначениеСохраняемойНастройки.ПериодОтчета;
	КонецЕсли;
	Если  ЗначениеСохраняемойНастройки.Свойство("ПериодОкончания") Тогда		
		ПериодОкончания = ЗначениеСохраняемойНастройки.ПериодОкончания;
	КонецЕсли;
	Если  ЗначениеСохраняемойНастройки.Свойство("Валюта") Тогда		
		Валюта = ЗначениеСохраняемойНастройки.Валюта;
	КонецЕсли;
	Если  ЗначениеСохраняемойНастройки.Свойство("Сценарий") Тогда		
		Сценарий = ЗначениеСохраняемойНастройки.Сценарий;
	КонецЕсли;
    Если  ЗначениеСохраняемойНастройки.Свойство("Организация") Тогда		
		Организация = ЗначениеСохраняемойНастройки.Организация;
	КонецЕсли;
	Если  ЗначениеСохраняемойНастройки.Свойство("Периодичность") Тогда		
		Периодичность = ЗначениеСохраняемойНастройки.Периодичность;
	КонецЕсли;
    Если  ЗначениеСохраняемойНастройки.Свойство("Проект") Тогда		
		Проект = ЗначениеСохраняемойНастройки.Проект;
	КонецЕсли;
    Если  ЗначениеСохраняемойНастройки.Свойство("РасположениеЗакладок") Тогда		
		РасположениеЗакладок = ЗначениеСохраняемойНастройки.РасположениеЗакладок;
		РасположениеЗакладокПриИзмененииСервер();
	КонецЕсли;

	Элементы.Элемент_Фильтр_Проект.Видимость = Объект.Бланк.Владелец.РазделениеПоПроектам;
	
	УровеньТочности 						= Бланк.УровеньТочностиПоУмолчанию;
	Делитель 								= Перечисления.ПорядкиОкругленияОтчетности.Окр1;
	ТекущийДелитель 						= 1;
	
	УстановитьПривилегированныйРежим (Ложь);
	
КонецПроцедуры	

&НаСервере
Процедура СохранитьНастройкиВарианта()
	
	УстановитьПривилегированныйРежим (Истина);
	
	ИмяНастройки = Нстр("ru = 'Основной вариант'");
	
	ЗначениеСохраняемойНастройки = Новый Структура;
		
	ЗначениеСохраняемойНастройки.Вставить("ПериодОтчета",				ПериодОтчета);
	ЗначениеСохраняемойНастройки.Вставить("ПериодОкончания",	   		ПериодОкончания);
	ЗначениеСохраняемойНастройки.Вставить("Периодичность",      		Периодичность);
	ЗначениеСохраняемойНастройки.Вставить("Валюта",	   					Валюта);	
	ЗначениеСохраняемойНастройки.Вставить("Сценарий",   				Сценарий);	
	ЗначениеСохраняемойНастройки.Вставить("Организация",  				Организация);
	ЗначениеСохраняемойНастройки.Вставить("Проект",  					Проект);
	ЗначениеСохраняемойНастройки.Вставить("РасположениеЗакладок",  		РасположениеЗакладок);

	Настройка = Строка(Бланк.УникальныйИдентификатор());
	ХранилищеОбщихНастроек.Сохранить((Настройка),ИмяНастройки, ЗначениеСохраняемойНастройки,, ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	Элементы.ГруппаПрименитьОтменить.Видимость 		= Заблокирован;
	Элементы.ГруппаКомандыРедактирования.Видимость 	= Заблокирован;
	
	Обработки.АналитическийБланк.УстановитьВидимостьДоступностьЭлементовЖурналаДействий(ЭтаФорма);
	
КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПериодПланированияОтборНачалоПриИзменении(Элемент)
	
	АналитическийБланкУХКлиент.УстановитьСостояниеНеИспользовать(ЭтаФорма,НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПланированияОтборОкончаниеПриИзменении(Элемент)
	
	АналитическийБланкУХКлиент.УстановитьСостояниеНеИспользовать(ЭтаФорма,НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Элемент_Фильтр_ВалютыПриИзменении(Элемент)
		
	АналитическийБланкУХКлиент.УстановитьСостояниеНеИспользовать(ЭтаФорма,НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Элемент_Фильтр_СценарийПриИзменении(Элемент)
	
	АналитическийБланкУХКлиент.УстановитьСостояниеНеИспользовать(ЭтаФорма,НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Элемент_Фильтр_ОрганизацияПриИзменении(Элемент)
	
	АналитическийБланкУХКлиент.УстановитьСостояниеНеИспользовать(ЭтаФорма,НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
		
	//Сбросим кэш актуальности бланков
	Для Каждого СтрКэш Из КэшБланков Цикл	
		СтрКэш.Выведен = Ложь;	
	КонецЦикла;	
	
	МассивСтраниц = Новый Массив();
	МассивСтраниц.Добавить(Элементы.ОсновнаяПанель.ТекущаяСтраница.Имя);
	ВывестиБланки(МассивСтраниц);
		
	АналитическийБланкУХКлиент.ВосстановитьСверткуСтрокКолонок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура НарисоватьТаблицуСервер() Экспорт
		
	//Сбросим кэш актуальности бланков
	Для Каждого СтрКэш Из КэшБланков Цикл	
		СтрКэш.Выведен = Ложь;	
	КонецЦикла;	
	
	МассивСтраниц = Новый Массив();
	МассивСтраниц.Добавить(Элементы.ОсновнаяПанель.ТекущаяСтраница.Имя);
	ВывестиБланки(МассивСтраниц);
		
	//АналитическийБланкУХКлиент.ВосстановитьСверткуСтрокКолонок(ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура СкрытьПанельОтборов(Команда)
	
	Элементы.ПанельНастроекОтборов.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДополнительныеОтборы(Команда)
	
	Элементы.ПоказатьДополнительныеОтборы.Пометка   = НЕ Элементы.ПоказатьДополнительныеОтборы.Пометка;	
	Элементы.ПанельНастроекОтборов.Видимость 		= Элементы.ПоказатьДополнительныеОтборы.Пометка;

КонецПроцедуры

&НаКлиенте
Процедура НепустыеСтроки(Команда)
	
	Элементы.ФормаНепустыеСтроки.Пометка = НЕ Элементы.ФормаНепустыеСтроки.Пометка;
	АналитическийБланкУХКлиент.УправлениеВидимостьюПустыхСтрок(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура НепустыеКолонки(Команда)
		
	Элементы.ФормаНепустыеКолонки.Пометка = НЕ Элементы.ФормаНепустыеКолонки.Пометка;
	АналитическийБланкУХКлиент.УправлениеВидимостьюПустыхКолонок(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ДелительПриИзменении(Элемент)
	
	АналитическийБланкУХКлиент.УстановитьСостояниеНеИспользовать(ЭтаФорма,НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));

КонецПроцедуры

&НаКлиенте
Процедура ТочностьПриИзменении(Элемент)
	
	АналитическийБланкУХКлиент.УстановитьСостояниеНеИспользовать(ЭтаФорма,НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьБыстрыйОтборПоОрганизацииПриИзменении(Элемент)
	
	//Предупредим пользователя, что если установлены отборы по организациям в доп. панели, то они потеряются 
	Если ИспользоватьБыстрыйОтборПоОрганизации Тогда
		Если ПроверитьОрганизацииВДопОтборах() Тогда
			Оповещение = Новый ОписаниеОповещения("ВопросОчиститьОтборыЗавершение",ЭтаФорма);
			ПоказатьВопрос(Оповещение, Нстр("ru = 'Установленный отбор по оранизациям будет очищен. Продолжить?'"), РежимДиалогаВопрос.ДаНет);		
		Иначе	
			Элементы.Элемент_Фильтр_Организация.Видимость =  ИспользоватьБыстрыйОтборПоОрганизации;
			ОбновитьИзмеренияИОтборы();
			АналитическийБланкУХКлиент.УстановитьСостояниеНеИспользовать(ЭтаФорма,НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));	 
        	Элементы.НастройкиОтборов.Развернуть(НастройкиОтборов.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
		КонецЕсли;	
	Иначе	
		Элементы.Элемент_Фильтр_Организация.Видимость =  ИспользоватьБыстрыйОтборПоОрганизации;
		ОбновитьИзмеренияИОтборы();
		АналитическийБланкУХКлиент.УстановитьСостояниеНеИспользовать(ЭтаФорма,НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));	 
        Элементы.НастройкиОтборов.Развернуть(НастройкиОтборов.ПолучитьЭлементы()[0].ПолучитьИдентификатор());

	КонецЕсли;	
			   
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьОтборыЗавершение(Результат, ДополнительныеПараметры) Экспорт      
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Нет  Тогда
		ИспользоватьБыстрыйОтборПоОрганизации = Ложь;
		Возврат;
	КонецЕсли;	
	
	Элементы.Элемент_Фильтр_Организация.Видимость =  ИспользоватьБыстрыйОтборПоОрганизации;
	ОбновитьИзмеренияИОтборы();
	АналитическийБланкУХКлиент.УстановитьСостояниеНеИспользовать(ЭтаФорма,НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));	 
    Элементы.НастройкиОтборов.Развернуть(НастройкиОтборов.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура РасположениеЗакладокПриИзменении(Элемент)
	
	РасположениеЗакладокПриИзмененииСервер();
		
КонецПроцедуры


#КонецОбласти

#Область РаботаСРасшифровкойЯчеек


&НаКлиенте
Функция ПолучитьСвойстваТекущегоОбъекта()
	
	тОбъект                 				= Новый Структура;
	
	тОбъект.Вставить("ВидОтчета"			,тВидыОтчетов);
	тОбъект.Вставить("УправлениеПериодом"	,тУправленияПериодом);
	тОбъект.Вставить("ПериодОтчета"			,ПериодОтчета);
	тОбъект.Вставить("ПериодОкончания"		,ПериодОкончания);
	тОбъект.Вставить("Сценарий"				,Сценарий);
	тОбъект.Вставить("ОсновнаяВалюта"		,Валюта);	
    тОбъект.Вставить("мТекущаяВалюта"		,Валюта);

	Если тОрганизации.Количество() = 0 Тогда
		тОбъект.Вставить("Организация"			,Неопределено);
	ИначеЕсли тОрганизации.Количество() = 1 Тогда	
		тОбъект.Вставить("Организация"			,тОрганизации[0].Значение);
	Иначе	
		тОбъект.Вставить("Организация"			,тОрганизации);
	КонецЕсли;
	
	Если тПроекты.Количество() = 0 Тогда
		тОбъект.Вставить("Проект"			,Неопределено);
	ИначеЕсли тПроекты.Количество() = 1 Тогда	
		тОбъект.Вставить("Проект"			,тПроекты[0].Значение);
	Иначе	
		тОбъект.Вставить("Проект"			,тПроекты);
	КонецЕсли;
	
	Возврат тОбъект;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруРасшифровкиБезКонтекста(СтруктураРасшифровки,АдресРасшифровки,тОбъект,АдресРасшифровкиГруппОтборов,ОбластьИмя,Расшифровка,ТзСвойстваПоказателейАдрес)
	
	Возврат Обработки.АналитическийБланк.ПолучитьСтруктуруРасшифровкиБезКонтекста(СтруктураРасшифровки,АдресРасшифровки,тОбъект,АдресРасшифровкиГруппОтборов,ОбластьИмя,Расшифровка,ТзСвойстваПоказателейАдрес);
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыВызоваФормыРаскрытий(СтруктураРасшифровки,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик)
	
	Возврат Обработки.АналитическийБланк.ПодготовитьПараметрыВызоваФормыРаскрытий(ЭтаФорма,СтруктураРасшифровки,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик);
	
КонецФункции	

&НаСервере
Функция РасшифроватьОперандНаСервере(Расшифровка,Текст,ОбластьИмя)
	
	СтруктураНезаполненыхАналитик 	= Новый Структура;
	СтруктураОтбираемыхАналитик 	= Новый Структура;
	
	тМакет 							= ЭтаФорма[ТекущийМакет];
	тОбъектАБ               		= ЭтаФорма[ТекущийОбъектАБ];
		
	СтруктураКлючевыхРеквизитов     = ПолучитьСвойстваТекущегоОбъектаСервер();
	
	СтруктураРасшифровки = 	Обработки.АналитическийБланк.ПолучитьСтруктуруРасшифровки(ЭтаФорма,СтруктураКлючевыхРеквизитов,ОбластьИмя,Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик);
	
	Если СтруктураРасшифровки = Неопределено  Тогда
		Возврат Неопределено;		
	ИначеЕсли Расшифровка.Свойство("УидФормулы") Тогда	
		
		тОбласть    = тМакет.Область(ОбластьИмя);
									
		СтруктураРасшифровкиГруппировок = Новый Структура;
		ЗаполнитьЗначенияРасшифровкиПоТекущемуКонтекстуСервер(тОбласть,СтруктураРасшифровкиГруппировок);			
			
		СтруктураРасшифровки.Вставить("ЭтоФормула", Истина);
		СтруктураРасшифровки.Вставить("РасшифровкаЯчейки", тОбласть.Расшифровка);
		СтруктураРасшифровки.Вставить("СтруктураРасшифровкиГруппировок", СтруктураРасшифровкиГруппировок);
		СтруктураРасшифровки.Вставить("СтруктураКлючевыхРеквизитов", СтруктураКлючевыхРеквизитов);
		СтруктураРасшифровки.Вставить("ИдентификаторСеанса", ЭтаФорма.УникальныйИдентификатор);	
		СтруктураРасшифровки.Вставить("РасшифровкаГруппОтборовАдрес", ЭтаФорма[ТекущийОбъектАБ].АдресРасшифровкиГруппОтборов);
		СтруктураРасшифровки.Вставить("КэшАналитикПоказателейАдрес", ЭтаФорма[ТекущийОбъектАБ].КэшАналитикПоказателейАдрес);
		СтруктураРасшифровки.Вставить("ТзСвойстваПоказателейАдрес", ЭтаФорма[ТекущийОбъектАБ].ТзСвойстваПоказателейАдрес);
		СтруктураРасшифровки.Вставить("КэшПоказателейКроссОбластейАдрес", ЭтаФорма[ТекущийОбъектАБ].КэшПоказателейКроссОбластейАдрес);
        СтруктураРасшифровки.Вставить("ЗначениеВыражения", тОбласть.Текст);
		
		КэшФормулПоказателейАдрес = ПоместитьВоВременноеХранилище(ЭтаФорма[ТекущийОбъектАБ].КэшФормулОбластейПоказателей.Выгрузить(),Новый УникальныйИдентификатор);
		СтруктураРасшифровки.Вставить("КэшФормулПоказателейАдрес", КэшФормулПоказателейАдрес);
		
		Возврат  СтруктураРасшифровки;

		
	ИначеЕсли НЕ СтруктураРасшифровки.Свойство("ПоказательСсылка") Тогда	
		
		Возврат Неопределено;		
		
	ИначеЕсли  ВозможнаРасшифровкаПоФормулеРасчета(СтруктураРасшифровки)  Тогда	//Достаточно для расшифровки ключевого среза
		
		СтруктураПараметровДляВызоваРасшифровки = Обработки.АналитическийБланк.ПолучитьПараметрыРасшифровкиОперанда(ЭтаФорма,СтруктураРасшифровки,Текст,Валюта);
		
		Если НЕ СтруктураПараметровДляВызоваРасшифровки = Неопределено Тогда
			
			СтруктураПараметровДляВызоваРасшифровки.ОбъектРасчета.Вставить("ЕдиницаИзмеренияОтображения",ТекущийДелитель); 			
			СтруктураПараметровДляВызоваРасшифровки.ОбъектРасчета.Вставить("УровеньТочности",УровеньТочности);
			СтруктураПараметровДляВызоваРасшифровки.ОбъектРасчета.Вставить("ИдентификаторСеанса",""+ЭтаФорма.УникальныйИдентификатор);		
			СтруктураПараметровДляВызоваРасшифровки.Вставить("АдресХранилищаПеременныхДляРасчета", ПоместитьВоВременноеХранилище(СтруктураПараметровДляВызоваРасшифровки.ОбъектРасчета,ЭтаФорма.УникальныйИдентификатор));
			СтруктураПараметровДляВызоваРасшифровки.Удалить("ОбъектРасчета");
			
			Возврат СтруктураПараметровДляВызоваРасшифровки;
			
		КонецЕсли;		                                                                            		
		
	Иначе	//Полказатель чужого ключевого среза  - получим параметры для расшифровки среза.			
		
		тМакет 		= ЭтаФорма[ТекущийМакет];
		тОбласть    = ЭтаФорма[ТекущийМакет].Область(ОбластьИмя);
					
		СтруктураРасшифровкиГруппировок = Новый Структура;
		ЗаполнитьЗначенияРасшифровкиПоТекущемуКонтекстуСервер(тОбласть,СтруктураРасшифровкиГруппировок);	
		
		СтруктураРасшифровки.Вставить("РасшифровкаЯчейки", тОбласть.Расшифровка);
		СтруктураРасшифровки.Вставить("СтруктураРасшифровкиГруппировок", СтруктураРасшифровкиГруппировок);
		СтруктураРасшифровки.Вставить("СтруктураКлючевыхРеквизитов", СтруктураКлючевыхРеквизитов);
		СтруктураРасшифровки.Вставить("СтруктураОтбираемыхАналитик", СтруктураОтбираемыхАналитик);
		СтруктураРасшифровки.Вставить("СтруктураНезаполненыхАналитик", СтруктураНезаполненыхАналитик);
		СтруктураРасшифровки.Вставить("ИдентификаторСеанса", ЭтаФорма.УникальныйИдентификатор);	
		СтруктураРасшифровки.Вставить("РасшифровкаГруппОтборовАдрес", ЭтаФорма[ТекущийОбъектАБ].АдресРасшифровкиГруппОтборов);
		СтруктураРасшифровки.Вставить("КэшАналитикПоказателейАдрес", ЭтаФорма[ТекущийОбъектАБ].КэшАналитикПоказателейАдрес);
		СтруктураРасшифровки.Вставить("ТзСвойстваПоказателейАдрес", ЭтаФорма[ТекущийОбъектАБ].ТзСвойстваПоказателейАдрес);
		
		Возврат  СтруктураРасшифровки;
		
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ВозможнаРасшифровкаПоФормулеРасчета(СтруктураРасшифровки)
				
	Если СтруктураРасшифровки.Свойство("ПериодОтчета") 
		И СтруктураРасшифровки.Свойство("Организация")
		И СтруктураРасшифровки.Свойство("Сценарий")  Тогда		
		
		Если ТипЗнч(СтруктураРасшифровки.Организация) = Тип("СправочникСсылка.Организации") Тогда
			Возврат Истина;	
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат  Ложь;
	
КонецФункции	

&НаСервере
Функция ПолучитьСвойстваТекущегоОбъектаСервер() Экспорт
	
	тОбъект                 				= Новый Структура;
	
	тОбъект.Вставить("ВидОтчета"			,тВидыОтчетов);
	тОбъект.Вставить("УправлениеПериодом"	,тУправленияПериодом);
	тОбъект.Вставить("ПериодОтчета"			,ПериодОтчета);
	тОбъект.Вставить("ПериодОкончания"		,ПериодОкончания);
	тОбъект.Вставить("Сценарий"				,Сценарий);
	тОбъект.Вставить("ОсновнаяВалюта"		,Валюта);	
    тОбъект.Вставить("мТекущаяВалюта"		,Валюта);

	Если тОрганизации.Количество() = 0 Тогда
		тОбъект.Вставить("Организация"			,Неопределено);
	ИначеЕсли тОрганизации.Количество() = 1 Тогда	
		тОбъект.Вставить("Организация"			,тОрганизации[0].Значение);
	Иначе	
		тОбъект.Вставить("Организация"			,тОрганизации);
	КонецЕсли;
	
	Если тПроекты.Количество() = 0 Тогда
		тОбъект.Вставить("Проект"			,Неопределено);
	ИначеЕсли тПроекты.Количество() = 1 Тогда	
		тОбъект.Вставить("Проект"			,тПроекты[0].Значение);
	Иначе	
		тОбъект.Вставить("Проект"			,тПроекты);
	КонецЕсли;
	
	Возврат тОбъект;
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьЗначенияРасшифровкиПоТекущемуКонтекстуСервер(Область,СтруктураРасшифровки)
	
	тМакет 					= ЭтаФорма[ТекущийМакет];;

	//Строки
	ОбластьРасшифровкиСтроки  =  тМакет.Область(Область.Верх,1,Область.Низ,1);
	Если  НЕ ОбластьРасшифровкиСтроки.Расшифровка = Неопределено Тогда
		Для Каждого рСтроки Из ОбластьРасшифровкиСтроки.Расшифровка Цикл
			Если НЕ рСтроки.Значение = Неопределено Тогда
				СтруктураРасшифровки.Вставить(рСтроки.Ключ,рСтроки.Значение);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;		
	//Колонки
	ОбластьРасшифровкиКолонки =  тМакет.Область(1,Область.Лево,1,Область.Право);
	Если  НЕ ОбластьРасшифровкиКолонки.Расшифровка = Неопределено Тогда
		Для Каждого рКолонки Из ОбластьРасшифровкиКолонки.Расшифровка Цикл
			Если НЕ рКолонки.Значение = Неопределено Тогда
				СтруктураРасшифровки.Вставить(рКолонки.Ключ,рКолонки.Значение); 
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;			
	
	
КонецПроцедуры	



#КонецОбласти

#Область РаботаСПанельюДополнительныхОтборов

&НаСервере
Процедура ОбновитьИзмеренияИОтборы()
	
	глТаблицаПоказателей = ПолучитьИзВременногоХранилища(глТаблицаПоказателейАдрес);
	
	//Читаем и типизируем все поля-аналитики, доступные для выбранных строк
	ТаблицаДоступныеПоля.Очистить();  
	ПрочитатьСоставДоступныхАналитик(ТаблицаДоступныеПоля,глТаблицаПоказателей,НастройкиПолейСводнойТаблицы);
	
	СКДПолейОтборов = ПолучитьОбщийМакет("МакетНастройкиОтборов");

	СТ_ДополнительныеНастройки.Настройки.Отбор.Элементы.Очистить();
	
	Для Каждого СтрДоступноеПоле Из ТаблицаДоступныеПоля Цикл
		
		Если СтрДоступноеПоле.ТипСубконто = Перечисления.ПостоянныеПоляСводнойТаблицы.ПериодОтчета 
			ИЛИ СтрДоступноеПоле.ТипСубконто = Перечисления.ПостоянныеПоляСводнойТаблицы.КолонкиОтчетов Тогда
			Продолжить;
		КонецЕсли;	
				
		Если ИспользоватьБыстрыйОтборПоОрганизации 
			И СтрДоступноеПоле.ТипСубконто = Перечисления.ПостоянныеПоляСводнойТаблицы.Организация Тогда
			Продолжить;
		КонецЕсли;	
			
		НП =  СКДПолейОтборов.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НП.Заголовок 			= СтрДоступноеПоле.Наименование;
		НП.ПутьКДанным 			= СтрДоступноеПоле.Код;
		МассивТиповСтрока 		= СтрРазделить(СтрДоступноеПоле.ТипСтрока,"|");
		МассивТипов             = Новый Массив;
		Для Каждого СтрТип Из МассивТиповСтрока Цикл
			МассивТипов.Добавить(Тип(СтрТип));
		КонецЦикла;	
		
		НП.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
		НП.Поле = Строка(СтрДоступноеПоле.Код);
		
		НовыйЭлементОтбора = СТ_ДополнительныеНастройки.Настройки.Отбор.Элементы.
		Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных(СтрДоступноеПоле.Код);
		НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НовыйЭлементОтбора.Использование  = Ложь;
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		
		
	КонецЦикла;	
		
	СКДПолейОтборовАдрес = ПоместитьВоВременноеХранилище(СКДПолейОтборов, ЭтаФорма.УникальныйИдентификатор);
	СТ_ДополнительныеНастройки.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКДПолейОтборовАдрес));
	
	ЗаполнитьДеревоОтборов();

КонецПроцедуры

&НаСервере
Процедура ПрочитатьСоставДоступныхАналитик(ТаблицаДоступныеПоля,глТаблицаПоказателей,НастройкиПолейСводнойТаблицы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	глТаблицаПоказателей.Показатель КАК Показатель
	               |ПОМЕСТИТЬ втНастройкиСоставаПоказателей
	               |ИЗ
	               |	&глТаблицаПоказателей КАК глТаблицаПоказателей
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВЫРАЗИТЬ(втНастройкиСоставаПоказателей.Показатель КАК Справочник.ПоказателиОтчетов).Владелец КАК ВидОтчета
	               |ПОМЕСТИТЬ втВидыОтчетов
	               |ИЗ
	               |	втНастройкиСоставаПоказателей КАК втНастройкиСоставаПоказателей
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВЫРАЗИТЬ(втНастройкиСоставаПоказателей.Показатель КАК Справочник.ПоказателиОтчетов).ГруппаРаскрытия КАК ГруппаРаскрытия
	               |ПОМЕСТИТЬ втГруппыРаскрытия
	               |ИЗ
	               |	втНастройкиСоставаПоказателей КАК втНастройкиСоставаПоказателей
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	втВидыОтчетов.ВидОтчета.ВидАналитики1 КАК ВидОтчетаВидАналитики1,
	               |	втВидыОтчетов.ВидОтчета.ВидАналитики2 КАК ВидОтчетаВидАналитики2,
	               |	втВидыОтчетов.ВидОтчета.ВидАналитики3 КАК ВидОтчетаВидАналитики3,
	               |	втВидыОтчетов.ВидОтчета.ВидАналитики4 КАК ВидОтчетаВидАналитики4,
	               |	втВидыОтчетов.ВидОтчета.ВидАналитики5 КАК ВидОтчетаВидАналитики5,
	               |	втВидыОтчетов.ВидОтчета.ВидАналитики6 КАК ВидОтчетаВидАналитики6,
				   |	втВидыОтчетов.ВидОтчета.ВидАналитики1.Код КАК ВидОтчетаВидАналитики1Код,
	               |	втВидыОтчетов.ВидОтчета.ВидАналитики2.Код КАК ВидОтчетаВидАналитики2Код,
	               |	втВидыОтчетов.ВидОтчета.ВидАналитики3.Код КАК ВидОтчетаВидАналитики3Код,
	               |	втВидыОтчетов.ВидОтчета.ВидАналитики4.Код КАК ВидОтчетаВидАналитики4Код,
	               |	втВидыОтчетов.ВидОтчета.ВидАналитики5.Код КАК ВидОтчетаВидАналитики5Код,
	               |	втВидыОтчетов.ВидОтчета.ВидАналитики6.Код КАК ВидОтчетаВидАналитики6Код
				   |ИЗ
	               |	втВидыОтчетов КАК втВидыОтчетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитики1 КАК ГруппаРаскрытияВидАналитики1,
	               |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитики2 КАК ГруппаРаскрытияВидАналитики2,
	               |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитики3 КАК ГруппаРаскрытияВидАналитики3,
	               |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитики4 КАК ГруппаРаскрытияВидАналитики4,
	               |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитики5 КАК ГруппаРаскрытияВидАналитики5,
	               |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитики6 КАК ГруппаРаскрытияВидАналитики6,
				   |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитики1.Код КАК ГруппаРаскрытияВидАналитики1Код,
	               |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитики2.Код КАК ГруппаРаскрытияВидАналитики2Код,
	               |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитики3.Код КАК ГруппаРаскрытияВидАналитики3Код,
	               |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитики4.Код КАК ГруппаРаскрытияВидАналитики4Код,
	               |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитики5.Код КАК ГруппаРаскрытияВидАналитики5Код,
	               |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитики6.Код КАК ГруппаРаскрытияВидАналитики6Код,
				   |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитикиВалютаДт КАК АналитикаВалюта,
				   |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитикиВалютаДт.Код КАК АналитикаВалютаКод,
				   |	втГруппыРаскрытия.ГруппаРаскрытия.АналитикаЭтапПроекта КАК ГруппаРаскрытияАналитикаЭтапПроекта
	               |ИЗ
	               |	втГруппыРаскрытия КАК втГруппыРаскрытия";
	
	Запрос.УстановитьПараметр("глТаблицаПоказателей",глТаблицаПоказателей);
	
    РезультатПакета =  Запрос.ВыполнитьПакет();
	
	АналитикиВидаОтчета 		= РезультатПакета[3].Выгрузить();
	АналитикиГруппРаскрытия 	= РезультатПакета[4].Выгрузить();
	
	времАналитики = ТаблицаДоступныеПоля.Выгрузить().СкопироватьКолонки();

	Для Каждого Стр Из АналитикиВидаОтчета Цикл
		Для ИндКол = 1 по ПараметрыСеанса.ЧислоДопАналитик Цикл
			Если ЗначениеЗаполнено(Стр["ВидОтчетаВидАналитики"+Строка(ИндКол)]) Тогда
				нПоле = времАналитики.Добавить();
				нПоле.Наименование 		= Строка(Стр["ВидОтчетаВидАналитики"+Строка(ИндКол)]);
				нПоле.ТипСтрока 		= Обработки.АналитическийБланкСводнаяТаблица.ПолучитьТипЗначенияАналитики(Стр["ВидОтчетаВидАналитики"+Строка(ИндКол)]);
				нПоле.Код 				= Стр["ВидОтчетаВидАналитики"+Строка(ИндКол)+"Код"];
				нПоле.ИндексКартинки 	= 1;
				нПоле.НПП 				= 100;
				нПоле.ТипСубконто 		= Стр["ВидОтчетаВидАналитики"+Строка(ИндКол)];	
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;	
	
	Для Каждого Стр Из АналитикиГруппРаскрытия Цикл
		Для ИндКол = 1 по ПараметрыСеанса.ЧислоДопАналитик Цикл
			Если ЗначениеЗаполнено(Стр["ГруппаРаскрытияВидАналитики"+Строка(ИндКол)]) Тогда
				нПоле = времАналитики.Добавить();
				нПоле.Наименование 		= Строка(Стр["ГруппаРаскрытияВидАналитики"+Строка(ИндКол)]);
				нПоле.ТипСтрока 		= Обработки.АналитическийБланкСводнаяТаблица.ПолучитьТипЗначенияАналитики(Стр["ГруппаРаскрытияВидАналитики"+Строка(ИндКол)]); 
				нПоле.Код 				= Стр["ГруппаРаскрытияВидАналитики"+Строка(ИндКол)+"Код"];
				нПоле.ИндексКартинки 	= 1;
				нПоле.НПП 				= 100;
				нПоле.ТипСубконто 		= Стр["ГруппаРаскрытияВидАналитики"+Строка(ИндКол)];	
			КонецЕсли;	
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Стр.АналитикаВалюта) Тогда
			нПоле = времАналитики.Добавить();
			нПоле.Наименование 		= "Дополнительные валюты";
			нПоле.ТипСтрока 		= "СправочникСсылка.Валюты"; 
			нПоле.Код 				= Стр.АналитикаВалютаКод;
			нПоле.ИндексКартинки 	= 1;
			нПоле.НПП 				= 100;
			нПоле.ТипСубконто 		= Стр.АналитикаВалюта;
		КонецЕсли;
		
	КонецЦикла;	

	времАналитики.Свернуть("Наименование,ТипСтрока,Код,ИндексКартинки,НПП,ТипСубконто");
	времАналитики.Сортировать("Наименование");
		
	нПоле = ТаблицаДоступныеПоля.Добавить();
	нПоле.Наименование = НСтр("ru = 'Организация'");
	нПоле.ТипСтрока = "СправочникСсылка.Организации";
	нПоле.Код = "Организация";
	нПоле.ИндексКартинки = 1;
	нПоле.НПП = 5;
    нПоле.ТипСубконто = Перечисления.ПостоянныеПоляСводнойТаблицы.Организация;
	
	нПоле = ТаблицаДоступныеПоля.Добавить();
	нПоле.Наименование = НСтр("ru = 'Проект'");
	нПоле.ТипСтрока = "СправочникСсылка.Проекты";
	нПоле.Код = "Проект";
	нПоле.ИндексКартинки = 1;
	нПоле.НПП = 6;
	нПоле.ТипСубконто = Перечисления.ПостоянныеПоляСводнойТаблицы.Проект;

	Для Каждого СтрАналитика Из времАналитики Цикл
		нПоле = ТаблицаДоступныеПоля.Добавить();
        ЗаполнитьЗначенияСвойств(нПоле,СтрАналитика);	
	КонецЦикла;	
	
	Обработки.АналитическийБланкСводнаяТаблица.ЗаполнитьСвойстваПолейПоУмолчанию(ТаблицаДоступныеПоля,НастройкиПолейСводнойТаблицы)
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОтборов()
	
	НастройкиОтборовДерево = РеквизитФормыВЗначение("НастройкиОтборов"); 
	
	Если НастройкиОтборовДерево.Строки.Количество() = 0 Тогда 
		//Первая инициализация доп отборов
		ПервыйЭлемент =  НастройкиОтборовДерево.Строки.Добавить();
		ПервыйЭлемент.ПолеПредставление = "Отбор";
		
		Для Каждого СтрПолеОтбор Из СТ_ДополнительныеНастройки.Настройки.Отбор.Элементы Цикл
			
			ПолеСКД =  СТ_ДополнительныеНастройки.Настройки.ДоступныеПоляОтбора.Элементы.Найти(СтрПолеОтбор.ЛевоеЗначение);
			нЭлемент 					= ПервыйЭлемент.Строки.Добавить();
			нЭлемент.ПолеПредставление 	= ПолеСКД.Заголовок;
			нЭлемент.ПолеКод 			= ПолеСКД.Поле;
			нЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
			нЭлемент.РежимОтбора        = Перечисления.РежимыОтборовАналитическихТаблиц.Данные;
			нЭлемент.ТипЗначения        = ПолеСКД.ТипЗначения;
			нЭлемент.ДоступныеЗначенияВыбора.ЗагрузитьЗначения(ПолеСКД.ДоступныеВидыСравнения.ВыгрузитьЗначения())
			
		КонецЦикла;	
		
	Иначе
		
		МассивУдаляемыхОтборов = Новый Массив;
		МассивПолейОтборов     = Новый Массив;
		//Удаляем отборы, которые потеряли смысл в ноовм составе настроек
		Для Каждого ЭлементДереваОтборов Из НастройкиОтборовДерево.Строки[0].Строки Цикл 
			
			//Вычислим базовое поле  отбора без точек.
			БазовоеПоле  = ?(СтрНайти(ЭлементДереваОтборов.ПолеКод,".")>0,Лев(ЭлементДереваОтборов.ПолеКод,СтрНайти(ЭлементДереваОтборов.ПолеКод,".")-1),ЭлементДереваОтборов.ПолеКод);

			ПолеСКД =  СТ_ДополнительныеНастройки.Настройки.ДоступныеПоляОтбора.Элементы.Найти(БазовоеПоле);
			Если ПолеСКД = Неопределено Тогда
				 МассивУдаляемыхОтборов.Добавить(ЭлементДереваОтборов);
			КонецЕсли;	
			
			МассивПолейОтборов.Добавить(БазовоеПоле);
			
		КонецЦикла;			
		
		Для Каждого СтрУдаляемоеПоле Из МассивУдаляемыхОтборов Цикл
			НастройкиОтборовДерево.Строки[0].Строки.Удалить(СтрУдаляемоеПоле);
		КонецЦикла;	
		
		//Добавим поля, котрых ранее не было
		Для Каждого СтрПолеОтбор Из СТ_ДополнительныеНастройки.Настройки.Отбор.Элементы Цикл
			
			ПолеСКД =  СТ_ДополнительныеНастройки.Настройки.ДоступныеПоляОтбора.Элементы.Найти(СтрПолеОтбор.ЛевоеЗначение);
			
			Если МассивПолейОтборов.Найти(Строка(ПолеСКД.Поле))= Неопределено Тогда
				
				нЭлемент 					= НастройкиОтборовДерево.Строки[0].Строки.Добавить();
				нЭлемент.ПолеПредставление 	= ПолеСКД.Заголовок;
				нЭлемент.ПолеКод 			= ПолеСКД.Поле;
				нЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
				нЭлемент.РежимОтбора        = Перечисления.РежимыОтборовАналитическихТаблиц.Данные;
				нЭлемент.ТипЗначения        = ПолеСКД.ТипЗначения;
				нЭлемент.ДоступныеЗначенияВыбора.ЗагрузитьЗначения(ПолеСКД.ДоступныеВидыСравнения.ВыгрузитьЗначения())
				
			КонецЕсли;
			
		КонецЦикла;	

	КонецЕсли;
	
	ЗначениеВРеквизитФормы(НастройкиОтборовДерево,"НастройкиОтборов");
	
КонецПроцедуры	

&НаКлиенте
Процедура НастройкиОтборовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные.ПолеПредставление = "Отбор" Тогда  //Первая строка дерева служебная.
		 СтандартнаяОбработка = Ложь;
		 Возврат;
	КонецЕсли;	
	
	Если Поле.Имя = "НастройкиОтборовПолеПредставление" Тогда    //Открываем форму выбора поля
		
		СтандартнаяОбработка = Ложь;
		
		Параметры_ = Новый Структура("СКДТекущегоПоляАдрес,АналитикаСубконто",СКДПолейОтборовАдрес,Элемент.ТекущиеДанные.ПолеКод);	
		Оповещение = Новый ОписаниеОповещения("ВыборАналитикиОтборЗавершение", ЭтаФорма);	
		ОткрытьФорму("Обработка.АналитическийБланкСводнаяТаблица.Форма.ФормаВыбораПоляКД", 
		Параметры_,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		
	ИначеЕсли Поле.Имя = "НастройкиОтборовВидСравнения" Тогда	 //Открываем доступный список выбора
		
		ВидСравненияКэш = Элемент.ТекущиеДанные.ВидСравнения;
		Элементы.НастройкиОтборовВидСравнения.СписокВыбора.ЗагрузитьЗначения(Элемент.ТекущиеДанные.ДоступныеЗначенияВыбора.ВыгрузитьЗначения());
				
	ИначеЕсли Поле.Имя = "НастройкиОтборовЗначениеОтбора" Тогда	 //Типизируем доступное для редактирования значение
		
		АналитическийБланкУХКлиент.ОбновитьТипВыбранногоЗначения(ЭтаФорма,Элемент);
		 		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОтборовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	НовыйЭлемент                 = НастройкиОтборов.ПолучитьЭлементы()[0].ПолучитьЭлементы().Добавить();
	ИдентификаторЭлемента        = НовыйЭлемент.ПолучитьИдентификатор();
	Элементы.НастройкиОтборов.ТекущаяСтрока  = ИдентификаторЭлемента;
	
	Параметры_ = Новый Структура("СКДТекущегоПоляАдрес,АналитикаСубконто",СКДПолейОтборовАдрес,Элемент.ТекущиеДанные.ПолеКод);	
	Оповещение = Новый ОписаниеОповещения("ВыборАналитикиОтборЗавершение", ЭтаФорма);	
	ОткрытьФорму("Обработка.АналитическийБланкСводнаяТаблица.Форма.ФормаВыбораПоляКД", 
	Параметры_,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОтборовПриИзменении(Элемент)
	
	АналитическийБланкУХКлиент.НастройкиОтборовПриИзменении(ЭтаФорма,ВидСравненияКэш,Элемент);
	АналитическийБланкУХКлиент.УстановитьСостояниеНеИспользовать(ЭтаФорма,НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));	 
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОтборовПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.ПолеПредставление = "Отбор" Тогда
		 Отказ = Истина;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ВыборАналитикиОтборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	 
	нЭлементИндекс = Элементы.НастройкиОтборов.ТекущаяСтрока;
	нЭлемент       = НастройкиОтборов.НайтиПоИдентификатору(нЭлементИндекс);
	
	Если  Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Если Не ЗначениеЗаполнено(нЭлемент.ПолеКод) Тогда
			НастройкиОтборов.ПолучитьЭлементы()[0].ПолучитьЭлементы().Удалить(нЭлемент);
		КонецЕсли;	
		Возврат;
	КонецЕсли;	
		
	ПолучитьФиктивноеПолеКД(Результат);
	
	ПолеСКД =  СТ_ДополнительныеНастройкиФиктивныхПолей.Настройки.ДоступныеПоляОтбора.Элементы.Найти("ФиктивноеПоле_"+СтрЗаменить(Строка(Результат.Поле),".","_"));
	
	нЭлемент.ПолеПредставление 	= Результат.Заголовок;
	нЭлемент.ПолеКод 			= Строка(Результат.Поле);
	нЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	нЭлемент.РежимОтбора        = ПредопределенноеЗначение("Перечисление.РежимыОтборовАналитическихТаблиц.Данные");
	нЭлемент.ТипЗначения        = Результат.ТипЗначения;
	нЭлемент.ДоступныеЗначенияВыбора.ЗагрузитьЗначения(ПолеСКД.ДоступныеВидыСравнения.ВыгрузитьЗначения());
	
	Элементы.НастройкиОтборов.ТекущиеДанные.ЗначениеОтбора = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьФиктивноеПолеКД(Результат)
	
	СКДПолейОтборов = ПолучитьОбщийМакет("МакетНастройкиОтборов");
		
	НП =  СКДПолейОтборов.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НП.Заголовок 			= Результат.Заголовок;
	НП.ПутьКДанным 			= "ФиктивноеПоле_"+СтрЗаменить(Строка(Результат.Поле),".","_");	
	НП.ТипЗначения 			= Результат.ТипЗначения;
	НП.Поле 				= "ФиктивноеПоле_"+СтрЗаменить(Строка(Результат.Поле),".","_");	

	СКДФиктивныхПолейОтборовАдрес = ПоместитьВоВременноеХранилище(СКДПолейОтборов, ЭтаФорма.УникальныйИдентификатор);
	СТ_ДополнительныеНастройкиФиктивныхПолей.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКДФиктивныхПолейОтборовАдрес));
	
КонецПроцедуры	

&НаСервере
Функция ПроверитьОрганизацииВДопОтборах()
	
	НастройкиОтборовДерево = РеквизитФормыВЗначение("НастройкиОтборов"); 

	Для Каждого ЭлементДереваОтборов Из НастройкиОтборовДерево.Строки[0].Строки Цикл 
		//Вычислим базовое поле  отбора без точек.
		БазовоеПоле  = ?(СтрНайти(ЭлементДереваОтборов.ПолеКод,".")>0,Лев(ЭлементДереваОтборов.ПолеКод,СтрНайти(ЭлементДереваОтборов.ПолеКод,".")-1),ЭлементДереваОтборов.ПолеКод);
		
		Если БазовоеПоле = "Организация" И  ЭлементДереваОтборов.Использовать Тогда
			Возврат Истина;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура НастройкиОтборовЗначениеОтбораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.НастройкиОтборов.ТекущиеДанные.ТипЗначения <> Элемент.ОграничениеТипа тогда
		АналитическийБланкУХКлиент.ОбновитьТипВыбранногоЗначения(ЭтаФорма,Элементы.НастройкиОтборов);
	КонецЕсли;
	
КонецПроцедуры

	
#КонецОбласти

#Область РаботаСКомандамиТабличногоДокумента


&НаКлиенте
Процедура ПолеТабличногоДокументаМакетВыбор(Элемент, Область, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	тМакет 					= ЭтаФорма[ТекущийМакет];
	тОбъектАБ               = ЭтаФорма[ТекущийОбъектАБ];
	АдресРасшифровки 		= Неопределено;
	СтруктураРасшифровки 	= Новый Структура;
		
	ОбластьИмя 				= Область.Имя;
	ОбластьРасшифровка      = Область.Расшифровка;
	
	Если  Область.Расшифровка = Неопределено Тогда	
		Возврат;		
	ИначеЕсли  ТипЗнч(Область.Расшифровка) = Тип("Структура") И Область.Расшифровка.Свойство("Ссылка") Тогда			
		//Если это не формула и есть раскрытие  - открываем форму раскрытия.	
		АналитическийБланкУХКлиент.ЗаполнитьЗначенияРасшифровкиПоТекущемуКонтексту(ЭтаФорма,Область,СтруктураРасшифровки);			
		тОбъект = ПолучитьСвойстваТекущегоОбъекта();
		СтруктураОтвета = ПолучитьСтруктуруРасшифровкиБезКонтекста(СтруктураРасшифровки,АдресРасшифровки,тОбъект,тОбъектАБ.АдресРасшифровкиГруппОтборов,ОбластьИмя,ОбластьРасшифровка,тОбъектАБ.ТзСвойстваПоказателейАдрес);
		
		Если НЕ СтруктураОтвета.СтруктураРасшифровки = Неопределено 
			И СтруктураОтвета.СтруктураНезаполненыхАналитик.Количество()=0 Тогда
			
			//редактирование ячейки	
			Если  НЕ СтруктураОтвета.СтруктураРасшифровки.Свойство("ПоказательТипЗначения") Тогда
				СтандартнаяОбработка = Ложь;
				Возврат;
			КонецЕсли;	
			
			СтандартнаяОбработка = Истина;	
			ЗначениеОбластиДоИзменения = Область.Значение;
				
		Иначе
			ОткрытьФормуРаскрытияПоказателей();
		КонецЕсли;
					
		//Динамическую формулу расшифровываем	
	ИначеЕсли  ТипЗнч(Область.Расшифровка) = Тип("Структура") И Область.Расшифровка.Свойство("УидФормулы") Тогда			
		ОбработатьРасшифровкуОперанда(Область);			
	Иначе 			
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	АналитическийБланкУХКлиент.ПолеТабличногоДокументаМакетОбработкаРасшифровки(ЭтаФорма,Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	АналитическийБланкУХКлиент.ПолеТабличногоДокументаМакетОбработкаДополнительнойРасшифровки(ЭтаФорма,Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
		
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетПриАктивизацииОбласти(Элемент)
	
	тМакет = ЭтаФорма[ТекущийМакет];
	
	Если тМакет.ВыделенныеОбласти.Количество()=0 ИЛИ НЕ ТипЗнч(тМакет.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда 
		Возврат;
	КонецЕсли;
		
	ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.1);
	ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыборДействияИзКонтекстногоМенюБланк(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("ЭлементСпискаЗначений") Тогда
		Если  Результат.Значение = "РасшифроватьПоказатель" Тогда
			РасшифроватьПоказатель();	
		ИначеЕсли Результат.Значение = "ОтобразитьРаскрытие" Тогда	
			ОтобразитьРаскрытие();
		ИначеЕсли Результат.Значение = "ОтобразитьРаскрытиеДиаграмма" Тогда	
			ОтобразитьРаскрытиеДиаграмма();
	    ИначеЕсли Результат.Значение = "РасшифроватьПоказательДиаграмма" Тогда	
			РасшифроватьПоказательДиаграмма();
		ИначеЕсли Результат.Значение = "СкопироватьДанныеПоСтроке" Тогда	
			СкопироватьДанныеПоСтроке(Неопределено);
		ИначеЕсли Результат.Значение = "СкопироватьДанныеПоКолонке" Тогда	
			СкопироватьДанныеПоКолонке(Неопределено);
		ИначеЕсли Результат.Значение = "ОчиститьДиапазон" Тогда	
			ОчиститьДиапазон(Неопределено);
		ИначеЕсли Результат.Значение = "КомментироватьПоказатель" Тогда	
			//КомментироватьПоказатель(Неопределено);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьРаскрытие() 
	
	ОткрытьФормуРаскрытияПоказателей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьРаскрытиеДиаграмма() Экспорт 
	
	Если тИмяСвязаннойОбластиДиаграммы = "" Тогда
		 Возврат;
	КонецЕсли;	
	
	Элемент 							= ЭтаФорма[ТекущийМакет];
	
	тСтраница  			= КэшБланков.НайтиСтроки(Новый Структура("Бланк",Элемент.ТекущаяОбласть.Расшифровка.СвязаннаяОбластьБланк))[0];
	тОбласть      		= ЭтаФорма[тСтраница.ИмяМакета].Область(тИмяСвязаннойОбластиДиаграммы); 
	
	ТекущийМакет 		= тСтраница.ИмяМакета;
	ТекущийОбъектАБ     = тСтраница.ИмяОбъекта;
	тЭлемент 			= Элементы[ТекущийМакет];
	
	Если тОбласть.Расшифровка.Свойство("Ссылка") Тогда
		
		ОткрытьФормуРаскрытияПоказателей(тОбласть);
		
	КонецЕсли;
	
	тСтраница 			= КэшБланков.НайтиСтроки(Новый Структура("ИмяСтраницы",Элементы.ОсновнаяПанель.ТекущаяСтраница.Имя))[0];
	ТекущийМакет 		= тСтраница.ИмяМакета;
	ТекущийОбъектАБ     = тСтраница.ИмяОбъекта;
	
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоказатель()
	
	тМакет 							= ЭтаФорма[ТекущийМакет];
	//Обработка расшифровки показателя по правилу	
	Если   ТипЗнч(тМакет.ТекущаяОбласть.Расшифровка) = Тип("Структура") И 
		(тМакет.ТекущаяОбласть.Расшифровка.Свойство("Ссылка")
		ИЛИ тМакет.ТекущаяОбласть.Расшифровка.Свойство("УидФормулы")) Тогда			
		ОбработатьРасшифровкуОперанда(тМакет.ТекущаяОбласть);				
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоказательДиаграмма() Экспорт
		
	Элемент 			= ЭтаФорма[ТекущийМакет];
	
	Если тИмяСвязаннойОбластиДиаграммы = "" Тогда
		 Возврат;
	КонецЕсли;	
	
	тСтраница  			= КэшБланков.НайтиСтроки(Новый Структура("Бланк",Элемент.ТекущаяОбласть.Расшифровка.СвязаннаяОбластьБланк))[0];
	тОбласть      		= ЭтаФорма[тСтраница.ИмяМакета].Область(тИмяСвязаннойОбластиДиаграммы); 
	
	ТекущийМакет 		= тСтраница.ИмяМакета;
	ТекущийОбъектАБ     = тСтраница.ИмяОбъекта;
	тЭлемент 			= Элементы[ТекущийМакет];
	
	
	Если ТипЗнч(тОбласть.Расшифровка) = Тип("Структура") 
		И (тОбласть.Расшифровка.Свойство("Ссылка") 
		ИЛИ тОбласть.Расшифровка.Свойство("УидФормулы")) Тогда
		
		СтандартнаяОбработка = Истина;
		ОбработатьРасшифровкуОперанда(тОбласть);		
				
	КонецЕсли;
	
	тСтраница 			= КэшБланков.НайтиСтроки(Новый Структура("ИмяСтраницы",Элементы.ОсновнаяПанель.ТекущаяСтраница.Имя))[0];
	ТекущийМакет 		= тСтраница.ИмяМакета;
	ТекущийОбъектАБ     = тСтраница.ИмяОбъекта;

	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРаскрытияПоказателей(тОбласть = Неопределено)
	
	тМакет 					= ЭтаФорма[ТекущийМакет];
	тОбъектАБ               = ЭтаФорма[ТекущийОбъектАБ];
	АдресРасшифровки 		= Неопределено;
	СтруктураРасшифровки 	= Новый Структура;
	
	Если тОбласть = Неопределено Тогда 	
		тОбласть                = тМакет.ТекущаяОбласть;	
	КонецЕсли;	
	
	ОбластьИмя 				= тОбласть.Имя;
	ОбластьРасшифровка      = тОбласть.Расшифровка;

	
	АналитическийБланкУХКлиент.ЗаполнитьЗначенияРасшифровкиПоТекущемуКонтексту(ЭтаФорма,тОбласть,СтруктураРасшифровки);			

	тОбъект = ПолучитьСвойстваТекущегоОбъекта();

	СтруктураОтвета = ПолучитьСтруктуруРасшифровкиБезКонтекста(СтруктураРасшифровки,АдресРасшифровки,тОбъект,тОбъектАБ.АдресРасшифровкиГруппОтборов,ОбластьИмя,ОбластьРасшифровка,тОбъектАБ.ТзСвойстваПоказателейАдрес);

	Если СтруктураОтвета.СтруктураНезаполненыхАналитик.Свойство("Проект") Тогда
		 СтруктураОтвета.СтруктураНезаполненыхАналитик.Удалить("Проект");
	КонецЕсли;	
	
	СтруктураНезаполненыхАналитик 	= СтруктураОтвета.СтруктураНезаполненыхАналитик;
    СтруктураОтбираемыхАналитик 	= СтруктураОтвета.СтруктураОтбираемыхАналитик;
    СтруктураРасшифровки 			= СтруктураОтвета.СтруктураРасшифровки;
	
	Если СтруктураРасшифровки = Неопределено  Тогда
		
	ИначеЕсли СтруктураРасшифровки.Свойство("ТекстФормулы") Тогда	
		
		ОбработатьРасшифровкуОперанда(тОбласть);
		
	ИначеЕсли СтруктураНезаполненыхАналитик.Количество()=0 Тогда 	 
			
		ПоказатьОповещениеПользователя(Нстр("ru = 'Нет данных для отображения'"),, Нстр("ru = 'Нет данных для отображения'"), БиблиотекаКартинок.Внимание16);

		Если  НЕ СтруктураРасшифровки.Свойство("ПоказательТипЗначения") Тогда
			Возврат;
		КонецЕсли;	
				
	Иначе	
		
		тОбъектСтруктура = Новый Структура;
		
		ПараметрыФормыРаскрытия = ПодготовитьПараметрыВызоваФормыРаскрытий(СтруктураРасшифровки,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик);	
		ПараметрыФормыРаскрытия.Вставить("тОбъект",тОбъект);
		ПараметрыФормыРаскрытия.Вставить("АдресЛогаИзмененныхПоказателей",АдресЛогаИзмененныхПоказателей);
		ПараметрыФормыРаскрытия.Вставить("РежимЗаписиВлог",Истина);
		
		Если НЕ Заблокирован Тогда
			СтруктураЗаблокированныхПоказателей = Новый Структура;
			СтруктураЗаблокированныхПоказателей.Вставить("ТекстОповещения", Нстр("ru = 'Показатель заблокирован'"));
			СтруктураЗаблокированныхПоказателей.Вставить("Пояснение","");
			СтруктураЗаблокированныхПоказателей.Вставить("Заблокирован",Истина);
		Иначе	
			СтруктураЗаблокированныхПоказателей = Новый Структура;
			СтруктураЗаблокированныхПоказателей.Вставить("ТекстОповещения", "");
			СтруктураЗаблокированныхПоказателей.Вставить("Пояснение","");
			СтруктураЗаблокированныхПоказателей.Вставить("Заблокирован",Ложь);
		КонецЕсли;
		
		ПараметрыФормыРаскрытия.Вставить("СтруктураЗаблокированныхПоказателей",СтруктураЗаблокированныхПоказателей);
		
		РедактированиеРаскрытияЗавершение = Новый ОписаниеОповещения("РедактированиеРаскрытияЗавершение", ЭтаФорма);
		ОткрытьФорму("Обработка.АналитическийБланк.Форма.ФормаРаскрытияПоказателей",ПараметрыФормыРаскрытия,ЭтаФорма,,,,РедактированиеРаскрытияЗавершение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
		
	КонецЕсли;	
 
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРаскрытияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	

	Если Результат.Свойство("УидФормыВладельца") И Результат.УидФормыВладельца<>ЭтаФорма.УникальныйИдентификатор Тогда
		Возврат;
	КонецЕсли;	
	
	АдресЛогаИзмененныхПоказателей 			= Результат.АдресЛогаИзмененныхПоказателей;
	АдресТаблицыИзмененныхПоказателей       = Результат.АдресТаблицыИзмененныхПоказателей;
	
	РедактированиеРаскрытиеЗавершениеСервер();
	
КонецПроцедуры

&НаСервере
Процедура РедактированиеРаскрытиеЗавершениеСервер()
	
	Если Не ЗначениеЗаполнено(АдресТаблицыИзмененныхПоказателей) Тогда
		 Возврат;
	КонецЕсли;	
	
	РасчетПоказателейОбъект = РеквизитФормыВЗначение("РасчетИЗаписьПоказателей");
	РасчетПоСвязаннымВидамОтчетов       = Константы.АвтоматическийПересчетЗависимыхПоказателей.Получить();

	
	РасчетПоказателейОбъект.АдресТаблицыИзмененныхПоказателей = АдресТаблицыИзмененныхПоказателей;
	РасчетПоказателейОбъект.АдресЛогаИзмененныхПоказателей    = АдресЛогаИзмененныхПоказателей;
	Результат = РасчетПоказателейОбъект.РассчитатьПоЗначениямИзмененныхПоказателей(НомерТранзакции, РасчетПоСвязаннымВидамОтчетов);
	
	АдресЛогаИзмененныхПоказателей                            = РасчетПоказателейОбъект.АдресЛогаИзмененныхПоказателей;
	
	ПредставлениеТранзакции = Перечисления.ТранзакцииИзмененияПоказателей.ИзменениеПоказателя;
	Обработки.АналитическийБланк.ДобавитьЗаписьвЖурналДействий(ЭтаФорма,ПредставлениеТранзакции,"");

	//Сбросим кэш актуальности бланков
	Для Каждого СтрКэш Из КэшБланков Цикл	
		СтрКэш.Выведен = Ложь;	
	КонецЦикла;	

	МассивСтраниц = Новый Массив();
	МассивСтраниц.Добавить(Элементы.ОсновнаяПанель.ТекущаяСтраница.Имя);
	ВывестиБланки(МассивСтраниц);
	
КонецПроцедуры	


&НаКлиенте
Процедура ОбработатьРасшифровкуОперанда(ТекущаяОбластьРасшифровка)
	
	ТекстОбласти 								= ТекущаяОбластьРасшифровка.Текст;
	СтруктураПараметровДляВызоваРасшифровки 	= РасшифроватьОперандНаСервере(ТекущаяОбластьРасшифровка.Расшифровка,ТекстОбласти,ТекущаяОбластьРасшифровка.Имя);	
		
	АналитическийБланкУХКлиент.ОбработатьРасшифровкуОперанда(ЭтаФорма,ТекущаяОбластьРасшифровка,СтруктураПараметровДляВызоваРасшифровки)
	
КонецПроцедуры


#КонецОбласти

#Область РаботаСДиалогомВыбораПериода

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	
	ОтборДатаНачалаПериода 		= ПериодОтчета;
	ОтборДатаОкончанияПериода   = ПериодОкончания;
	
	ЗаполнитьПериоды(ОтборДатаНачалаПериода,ОтборДатаОкончанияПериода);
	
	АналитическийБланкУХКлиент.УстановитьСостояниеНеИспользовать(ЭтаФорма,НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериод(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	ПолучитьДатыПериодов(Диалог.Период.ДатаНачала,Диалог.Период.ДатаОкончания);
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьПериодЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
		
	Если  ЗначениеЗаполнено(РезультатВыбора) Тогда	
		ЗаполнитьПериоды(РезультатВыбора.ДатаНачала,РезультатВыбора.ДатаОкончания);	
		АналитическийБланкУХКлиент.УстановитьСостояниеНеИспользовать(ЭтаФорма,НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервере
Процедура ПолучитьДатыПериодов(ДатаНачала,ДатаОкончания)
	
	 ДатаНачала 		= ?(ЗначениеЗаполнено(ПериодОтчета),ПериодОтчета.ДатаНачала,ТекущаяДата());
	 ДатаОкончания 		= ?(ЗначениеЗаполнено(ПериодОкончания),ПериодОкончания.ДатаОкончания,ТекущаяДата());
	 
КонецПроцедуры	
 
&НаСервере
Процедура ЗаполнитьПериоды(ОтборДатаНачалаПериода,ОтборДатаОкончанияПериода)
	
	ПериодОтчета 	= Справочники.Периоды.ПустаяСсылка();
	ПериодОкончания 	= Справочники.Периоды.ПустаяСсылка();
	
	УстановитьПараметрыВыбораПериодов();
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Периоды.Ссылка Как ПериодПланированияОтборНачало,
	|   NULL КАК ПериодПланированияОтборОкончание
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	Периоды.ДатаНачала = &ДатаНачала
	|	И Периоды.Периодичность = &Периодичность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|   NULL,
	|	Периоды.Ссылка
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	Периоды.Периодичность = &Периодичность
	|	И Периоды.ДатаНачала = &ДатаОкончания";
	
	
	Если ТипЗнч(ОтборДатаНачалаПериода) = Тип("СправочникСсылка.Периоды") Тогда
		 ОтборДатаНачалаПериода = ОтборДатаНачалаПериода.ДатаНачала;
	КонецЕсли;
	
	Если ТипЗнч(ОтборДатаОкончанияПериода) = Тип("СправочникСсылка.Периоды") Тогда
		 ОтборДатаОкончанияПериода = ОтборДатаОкончанияПериода.ДатаНачала;
	КонецЕсли;
	
	Если Периодичность = Перечисления.Периодичность.Месяц Тогда
		Запрос.УстановитьПараметр("ДатаНачала",НачалоМесяца(ОтборДатаНачалаПериода));
		Запрос.УстановитьПараметр("ДатаОкончания",НачалоМесяца(ОтборДатаОкончанияПериода));
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Запрос.УстановитьПараметр("ДатаНачала",НачалоКвартала(ОтборДатаНачалаПериода));
		Запрос.УстановитьПараметр("ДатаОкончания",НачалоКвартала(ОтборДатаОкончанияПериода));	
	ИначеЕсли  Периодичность = Перечисления.Периодичность.Год Тогда
		Запрос.УстановитьПараметр("ДатаНачала",НачалоГода(ОтборДатаНачалаПериода));
		Запрос.УстановитьПараметр("ДатаОкончания",НачалоГода(ОтборДатаОкончанияПериода));		
	ИначеЕсли  Периодичность = Перечисления.Периодичность.Неделя Тогда
		Запрос.УстановитьПараметр("ДатаНачала",НачалоНедели(ОтборДатаНачалаПериода));
		Запрос.УстановитьПараметр("ДатаОкончания",НачалоНедели(ОтборДатаОкончанияПериода));		
	Иначе 
		Запрос.УстановитьПараметр("ДатаНачала",ОтборДатаНачалаПериода);
		Запрос.УстановитьПараметр("ДатаОкончания",ОтборДатаОкончанияПериода);		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Периодичность",Периодичность);
    
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ПериодПланированияОтборНачало) Тогда
			 ПериодОтчета =  Выборка.ПериодПланированияОтборНачало
		КонецЕсли;
	    Если ЗначениеЗаполнено(Выборка.ПериодПланированияОтборОкончание) Тогда
			 ПериодОкончания =  Выборка.ПериодПланированияОтборОкончание
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры	 

&НаСервере
Процедура УстановитьПараметрыВыбораПериодов()
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Периодичность", Периодичность);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ПериодПланированияОтборНачало.ПараметрыВыбора 	= НовыеПараметры;	
	Элементы.ПериодПланированияОтборОкончание.ПараметрыВыбора = НовыеПараметры;	
	
КонецПроцедуры	


#КонецОбласти



&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	тМакет = ЭтаФорма[ТекущийМакет];
	
	Если НЕ ТипЗнч(тМакет.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда 
		Возврат;
	КонецЕсли;
		
	ДанныеРасчета = ОбщегоНазначенияСлужебныйКлиентСервер.РасчетныеПоказателиЯчеек(тМакет, тМакет.ВыделенныеОбласти);
	
	СуммаВыделенныхЯчеек 		= ДанныеРасчета.Сумма;                        
	КоличествоВыделенныхЯчеек 	= ДанныеРасчета.Количество;
		
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаСервере
Процедура ВывестиБланки(МассивСтраниц,ДанныеДиаграмм = Ложь)
	
	КлючевыеПараметры = Новый Структура;
		
	КлючевыеПараметры.Вставить("Сценарий",Сценарий);
	КлючевыеПараметры.Вставить("ПериодОтчета",ПериодОтчета);
	КлючевыеПараметры.Вставить("ПериодОкончания",ПериодОкончания);
	КлючевыеПараметры.Вставить("Валюта",Валюта);
	КлючевыеПараметры.Вставить("ИспользоватьБыстрыйОтборПоОрганизации",ИспользоватьБыстрыйОтборПоОрганизации);
	КлючевыеПараметры.Вставить("Организация",Организация);
	КлючевыеПараметры.Вставить("тОрганизации",тОрганизации);
	КлючевыеПараметры.Вставить("Проект",Проект);
		
	КлючевыеПараметры.Вставить("УровеньТочности",УровеньТочности);
	КлючевыеПараметры.Вставить("ТекущийДелитель",ТекущийДелитель);
    КлючевыеПараметры.Вставить("НомерОсновногоЯзыка",1);
	
	КлючевыеПараметры.Вставить("ДополнительныеПараметрыАдрес",ДополнительныеПараметрыАдрес);
	КлючевыеПараметры.Вставить("ИспользоватьДополнительныеОтборы",Истина);
	КлючевыеПараметры.Вставить("АдресЛогаИзмененныхПоказателей",АдресЛогаИзмененныхПоказателей);
	КлючевыеПараметры.Вставить("ИдентификаторСеанса",ЭтаФорма.УникальныйИдентификатор);
	
	Обработки.АналитическийБланк.ВывестиБланки(КлючевыеПараметры,ЭтаФорма,МассивСтраниц,ДанныеДиаграмм);
	
	Если ЭтаФорма.РежимТолькоПросмотр Тогда
		 ЭтаФорма.Элементы.ФильтрПериод.Доступность = Ложь;
		 ЭтаФорма.Элементы.ГруппаКоманды.Видимость  = Ложь;
	     ЭтаФорма.Элементы.ГруппаСтатусы.Доступность = Ложь;	 
	КонецЕсли;	

	
КонецПроцедуры	

&НаСервере
Процедура СоздатьСтраницыДополнительныхБланков(ТолькоОсновнойБланк = Ложь)
		
	РеквизитыКДобавлению = Новый Массив;
	РеквизитыКДобавлению.Добавить(Новый РеквизитФормы("НепустыеСтроки", Новый ОписаниеТипов("Булево"),,, Ложь));
	РеквизитыКДобавлению.Добавить(Новый РеквизитФормы("НепустыеКолонки", Новый ОписаниеТипов("Булево"),,, Ложь));
	РеквизитыКДобавлению.Добавить(Новый РеквизитФормы("НепустыеСтрокиОшибка", Новый ОписаниеТипов("Булево"),,, Ложь));
	РеквизитыКДобавлению.Добавить(Новый РеквизитФормы("НепустыеКолонкиОшибка", Новый ОписаниеТипов("Булево"),,, Ложь));
	РеквизитыКДобавлению.Добавить(Новый РеквизитФормы("НепустыеСтрокиСводнаяТаблица", Новый ОписаниеТипов("Булево"),,, Ложь));
	РеквизитыКДобавлению.Добавить(Новый РеквизитФормы("НепустыеКолонкиСводнаяТаблица", Новый ОписаниеТипов("Булево"),,, Ложь));
	
	ИзменитьРеквизиты(РеквизитыКДобавлению);
	
	МассивБланковДиаграмм  = Новый Массив;
	
	глТаблицаПоказателей = Новый ТаблицаЗначений;
	глТаблицаПоказателей.Колонки.Добавить("Показатель",Новый ОписаниеТипов("СправочникССылка.ПоказателиОтчетов"));
	
	Если НЕ Бланк.Пустая()  Тогда	
		
		ИндексБланка = 1;
		РеквизитыКДобавлению			= Новый Массив;
		
		//Добавляем осовной бланк в кэш
		КэшБланков.Очистить();
		нСтрокаКэшаБланков 					= КэшБланков.Добавить();
		нСтрокаКэшаБланков.Бланк    		= Бланк;
		//нСтрокаКэшаБланков.РежимБланка      = Перечисления.РежимыБланков.БланкМногоПериодный;
		нСтрокаКэшаБланков.ЭтоОсновнойБланк = Истина;
        нСтрокаКэшаБланков.ИмяСтраницы      = "ОсновнойМакет";
		нСтрокаКэшаБланков.ИмяОбъекта       = "ОбъектАналитическогоБланка";
		нСтрокаКэшаБланков.ИмяМакета        = "ПолеТабличногоДокументаМакет";
		
		Обработки.АналитическийБланк.ЗаполнитьБланкиДиаграмм(Бланк,МассивБланковДиаграмм);
		
		//Добавляем дополнительные бланки
		Если Не ТолькоОсновнойБланк Тогда
			Для Каждого СтрБланк Из Бланк.ДополнительныеБланки Цикл										
				Обработки.АналитическийБланк.СоздатьРеквизитыДополнительногоБланка(ЭтаФорма,Элементы.ОсновнаяПанель,ИндексБланка,СтрБланк.Бланк,,СтрБланк);	
				ИндексБланка = ИндексБланка +1;						
				Обработки.АналитическийБланк.ЗаполнитьБланкиДиаграмм(СтрБланк.Бланк,МассивБланковДиаграмм)
			КонецЦикла;				
		КонецЕсли;				
		//Добавляем скрытые бланки с даннми диаграмм, если есть.
		Для Каждого СтрБланкДиаграммы Из МассивБланковДиаграмм Цикл
			тБланк = КэшБланков.НайтиСтроки(Новый Структура("Бланк",СтрБланкДиаграммы)); 
			Если тБланк.Количество() = 0 Тогда
				Обработки.АналитическийБланк.СоздатьРеквизитыДополнительногоБланка(ЭтаФорма,Элементы.ОсновнаяПанель,ИндексБланка,СтрБланкДиаграммы,Истина);	
				ИндексБланка = ИндексБланка +1;
			КонецЕсли;		
		КонецЦикла;	
		
		//Если не закладочный режим, то страницы не показываем.
		Если ТолькоОсновнойБланк 
			ИЛИ КэшБланков.Количество() = 1 Тогда
			 Элементы.ОсновнаяПанель.ОтображениеСтраниц 	= ОтображениеСтраницФормы.Нет;
			 Элементы.РасположениеЗакладок.Видимость 		= Ложь;
		 КонецЕсли;	
		
	КонецЕсли;

	//Прочитаем таблицу показателей бланков, для работы с отборами
	Для Каждого СтрБланк Из КэшБланков Цикл
		
		текНаборЗаписей = РегистрыСведений.НастройкиАналитическихБланков.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(СтрБланк.Бланк);
		текНаборЗаписей.Прочитать();
		
		Если текНаборЗаписей.Количество()>0 Тогда
			ЗначениеСохраняемойНастройки = текНаборЗаписей[0].ХранилищеДополнительныхНастроек.Получить();	
			Если ЗначениеСохраняемойНастройки.Свойство("тИспользованныеПоказатели") Тогда 
				Для Каждого СтрПоказатель Из ЗначениеСохраняемойНастройки.тИспользованныеПоказатели Цикл
					нСтр 				= глТаблицаПоказателей.Добавить();
					нСтр.Показатель     = СтрПоказатель;	
				КонецЦикла;	
			КонецЕсли;
		КонецЕсли;
		
		Элементы[СтрБланк.ИмяМакета].Редактирование = Заблокирован;
		
	КонецЦикла;	
	
	глТаблицаПоказателей.Свернуть("Показатель");
	глТаблицаПоказателейАдрес  = ПоместитьВоВременноеХранилище(глТаблицаПоказателей,ЭтаФорма.УникальныйИдентификатор);
	
	ОбновитьИзмеренияИОтборы();
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьСтрокуКлючевыхПараметров(Параметры_)
			
	ТекстУстановленногоФильтра = "";
			
	МассивСтрок = Новый Массив;
	
	ЖирыйШрифт =  Новый Шрифт(Элементы.ОтборыЗаголовок.Шрифт,,,Истина);
				
	Если Параметры_.Свойство("ПараметрыБазовойВерсии") Тогда   //Это режим сравнения двух версий 
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Нстр("ru = 'Базовая версия: '"),, Новый Цвет(0,0,255)));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(Параметры_.ПараметрыБазовойВерсии.СписокВерсий[0]),ЖирыйШрифт,Новый Цвет(0,0,255)));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Нстр("ru = 'Текущая версия: '"),, Новый Цвет(0,0,255)));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(Параметры_.СписокВерсий[0]),ЖирыйШрифт,Новый Цвет(0,0,255)));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));

		
	ИначеЕсли Параметры_.Свойство("СписокВерсий") Тогда	
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Нстр("ru = 'Версия: '"),, Новый Цвет(0,0,255)));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(Параметры_.СписокВерсий[0]),ЖирыйШрифт,Новый Цвет(0,0,255)));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));		
	КонецЕсли;	
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Нстр("ru = 'Период с: '"),, Новый Цвет(0,0,255)));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(ПериодОтчета),ЖирыйШрифт,Новый Цвет(0,0,255)));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Нстр("ru = 'по: '"),, Новый Цвет(0,0,255)));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(ПериодОкончания),ЖирыйШрифт,Новый Цвет(0,0,255)));
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Нстр("ru = 'Валюта: '"),, Новый Цвет(0,0,255)));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(Валюта),ЖирыйШрифт,Новый Цвет(0,0,255)));
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Нстр("ru = 'Сценарий: '"),, Новый Цвет(0,0,255)));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(Сценарий),ЖирыйШрифт,Новый Цвет(0,0,255)));

	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Нстр("ru = 'Организация: '"),, Новый Цвет(0,0,255)));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(Организация),ЖирыйШрифт,Новый Цвет(0,0,255)));

	Если ЗначениеЗаполнено(Проект) Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Нстр("ru = 'Проект: '"),, Новый Цвет(0,0,255)));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(Проект),ЖирыйШрифт,Новый Цвет(0,0,255)));
	КонецЕсли;
	
	ОтборыЗаголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры	

&НаКлиенте
Процедура ГруппаСтраницыБланковПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	//При открытии выводим только заглавный бланк
	МассивСтраниц = Новый Массив();
	МассивСтраниц.Добавить(ТекущаяСтраница.Имя);
	ВывестиБланки(МассивСтраниц);
	
	тСтраница 			= КэшБланков.НайтиСтроки(Новый Структура("ИмяСтраницы",ТекущаяСтраница.Имя))[0];

	ТекущийМакет 		= тСтраница.ИмяМакета;
	ТекущийОбъектАБ     = тСтраница.ИмяОбъекта;
	
		
КонецПроцедуры

&НаСервере
Процедура РасположениеЗакладокПриИзмененииСервер()
	
	Если РасположениеЗакладок = "Закладки сверху" Тогда
		Элементы.ОсновнаяПанель.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	ИначеЕсли РасположениеЗакладок = "Закладки снизу" Тогда
		Элементы.ОсновнаяПанель.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСнизу;
	ИначеЕсли РасположениеЗакладок = "Закладки слева" Тогда
		Элементы.ОсновнаяПанель.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСлеваГоризонтально;
	ИначеЕсли РасположениеЗакладок = "Закладки справа" Тогда	
		 Элементы.ОсновнаяПанель.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСправаГоризонтально;
	ИначеЕсли РасположениеЗакладок = "Не отображать" Тогда	
		 Элементы.ОсновнаяПанель.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;	 
	КонецЕсли;	
		
КонецПроцедуры


#Область РаботаСИзмененнымиПоказателями

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Заблокирован = Истина;
	Если  Заблокирован Тогда
				
		Если ТипЗнч(Область.Расшифровка)=Тип("Структура") Тогда
			//Выделена одна ячейка
			Если Область.Лево - Область.Право = 0 И Область.Верх - Область.Низ = 0 Тогда
				
				ОписаниеИзменений 					= "";
				ОписаниеТранзакции 					= ПредопределенноеЗначение("Перечисление.ТранзакцииИзмененияПоказателей.ИзменениеПоказателя");
				ЗначениеОбласти 					= Область.Значение;
				ИмяИнтерактивноИзмененнойОбласти 	= Область.Имя;
				
				ВставитьЗначениеПоказателя(Область.Имя, ЗначениеОбласти, ОписаниеИзменений,ОписаниеТранзакции);
				
				//Если ВычислятьПриИзменении Тогда
				//	ЗаписатьИзмененныеПоказателиБланк(Истина);
				//Иначе	 
				//	УстановитьРежимРедактированияДанныхКлиент(Истина);
				//КонецЕсли;
				
				ЭтаФорма.Модифицированность = Истина;	
				ЭтаФорма.ТекущийЭлемент = Элементы[ТекущийМакет];
						
			КонецЕсли;		
		Иначе					
			Возврат;
		КонецЕсли;		
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Функция ВставитьЗначениеПоказателя(ИмяОбласти,Значение,ОписаниеИзменений="",ПредставлениеТранзакции)
	
	Возврат Обработки.АналитическийБланк.ВставитьЗначениеПоказателя(ЭтаФорма,Валюта,ИмяОбласти,Значение,ОписаниеИзменений="",ПредставлениеТранзакции)
	
КонецФункции

&НаКлиенте
Процедура ВставитьДанныеИзБуфера(Команда)	
	
	ОписаниеТранзакции = ПредопределенноеЗначение("Перечисление.ТранзакцииИзмененияПоказателей.ВставкаИзБуфера");
	
	тМакет = ЭтаФорма[ТекущийМакет];
	ОписаниеИзменений = "";
	ОбъектКопирования = Новый COMОбъект("htmlfile");
	ДанныеБуфера =ОбъектКопирования.ParentWindow.ClipboardData.GETdata("Text");
	МассивСтрок = Новый Массив;
	МассивЗначений = Новый Массив;		
	Если КодСимвола(Прав(ДанныеБуфера,1)) = 10 И КодСимвола(Прав(ДанныеБуфера,2)) = 13 Тогда	
		ДанныеБуфера = Лев(ДанныеБуфера,СтрДлина(ДанныеБуфера)-2);	
	КонецЕсли;	
	
	АналитическийБланкУХКлиент.РазобратьДанныеБуфера(ДанныеБуфера,МассивСтрок,МассивЗначений);
	
	Для Каждого Область Из тМакет.ВыделенныеОбласти Цикл
		СкопироватьЗначения(Область.Имя,МассивЗначений,,ОписаниеИзменений,ОписаниеТранзакции);
	КонецЦикла;
	Если ЗначениеЗаполнено(ОписаниеИзменений) Тогда		
		ПоказатьОповещениеПользователя(Нстр("ru = 'Ячейки не редактируются'"),,ОписаниеИзменений,БиблиотекаКартинок.Внимание16);
		Возврат;
	КонецЕсли;	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьДанныеПоСтроке(Команда)
	
	тМакет 				= ЭтаФорма[ТекущийМакет];	
	ВыдОбласть 			= тМакет.ВыделенныеОбласти[0];
	ОписаниеТранзакции 	= ПредопределенноеЗначение("Перечисление.ТранзакцииИзмененияПоказателей.КопированиеПоСтроке");

	
	Если ВыдОбласть.Право - ВыдОбласть.Лево<>0 Тогда
		ГраницаОбласти =   ВыдОбласть.Право;
	Иначе	
		ГраницаОбласти =  тМакет.ШиринаТаблицы;
	КонецЕсли;
	
	МассивСтрок = Новый Массив();
	НачальныйИндексКолонки = ВыдОбласть.Лево;
 
	ОбластьДляВставки = тМакет.Область(ВыдОбласть.Верх,ВыдОбласть.Лево,ВыдОбласть.Низ,ГраницаОбласти);
	КодРесурса = "";
	тОбласть    = тМакет.Область(ВыдОбласть.Верх,ВыдОбласть.Лево,ВыдОбласть.Верх,ВыдОбласть.Лево);
	
	СтруктураНезаполненыхАналитик 	= Новый Структура;
	СтруктураОтбираемыхАналитик 	= Новый Структура;
	
	Если НЕ тОбласть.Расшифровка  = Неопределено Тогда		
		СтруктураРасшифровки = 	ПолучитьСтруктуруРасшифровки(тОбласть.Имя,тОбласть.Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик);	
		// Получим код ресурса, по которому будем осуществлять копирование.
		Если СтруктураРасшифровки.Свойство("ПоказательКод") Тогда
			КодРесурса = СтруктураРасшифровки.ПоказательКод;
		Иначе	 
			Возврат;
		КонецЕсли;		
	Иначе	
		Возврат;
	КонецЕсли;	
	
	Для СтрУ = ВыдОбласть.Верх По ВыдОбласть.Низ Цикл 
		ОбластьПраво = тМакет.Область(СтрУ, ВыдОбласть.Право, СтрУ, ВыдОбласть.Право);
		МассивЗначений = Новый Массив();
		ОбластьЛево = тМакет.Область(СтрУ, ВыдОбласть.Лево, СтрУ, ВыдОбласть.Лево);
				
		Значение = АналитическийБланкУХКлиент.ПолучитьЗначениеОбластиТабличногоДокумента(ОбластьЛево);
		
		Для ИндК = НачальныйИндексКолонки По ГраницаОбласти Цикл		
			Область = тМакет.Область(СтрУ,ИндК,СтрУ,ИндК);	
			МассивЗначений.Добавить(Значение);	
		КонецЦикла;	
		МассивСтрок.Добавить(МассивЗначений);	
	КонецЦикла;
	
	КодКолонкиРесурса = ПолучитьКодКолонкиПоказателя(СтруктураРасшифровки.ПоказательСсылка);	
	
	ОписаниеИзменений = "";
	СкопироватьЗначения(ОбластьДляВставки.Имя,МассивСтрок,КодКолонкиРесурса,ОписаниеИзменений,ОписаниеТранзакции);
	Если ЗначениеЗаполнено(ОписаниеИзменений) Тогда		
		 ПоказатьОповещениеПользователя(Нстр("ru = 'Ячейки не редактируются'"),, ОписаниеИзменений,БиблиотекаКартинок.Внимание16);
		 Возврат;
	КонецЕсли;	
	
	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьДанныеПоКолонке(Команда)
	
	тМакет 				= ЭтаФорма[ТекущийМакет];	
	ВыдОбласть 			= тМакет.ВыделенныеОбласти[0];
	ОписаниеТранзакции 	= ПредопределенноеЗначение("Перечисление.ТранзакцииИзмененияПоказателей.КопированиеПоСтолбцу");

	Если ВыдОбласть.Низ - ВыдОбласть.Верх<>0 Тогда
		ГраницаОбласти =   ВыдОбласть.Низ;
	Иначе	
		ГраницаОбласти =   тМакет.ВысотаТаблицы;	
	КонецЕсли;
	МассивСтрок = Новый Массив();
	НачальныйИндексСтроки = ВыдОбласть.Верх;	
	
	ОбластьДляВставки = тМакет.Область(ВыдОбласть.Верх,ВыдОбласть.Лево,ГраницаОбласти,ВыдОбласть.Право);
	тОбласть    = тМакет.Область(ВыдОбласть.Верх,ВыдОбласть.Лево,ВыдОбласть.Верх,ВыдОбласть.Лево);
	СтруктураНезаполненыхАналитик 	= Новый Структура;
	СтруктураОтбираемыхАналитик 	= Новый Структура;
	
	Если НЕ тОбласть.Расшифровка  = Неопределено Тогда		
		СтруктураРасшифровки = 	ПолучитьСтруктуруРасшифровки(тОбласть.Имя,тОбласть.Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик);	
		Если СтруктураРасшифровки.Свойство("ПоказательКод") Тогда
			 КодРесурса = СтруктураРасшифровки.ПоказательКод;
		Иначе	 
			Возврат;
		КонецЕсли;		
	Иначе	
		Возврат;
	КонецЕсли;	
	
	Для  СтрУ=ВыдОбласть.Верх По ГраницаОбласти Цикл 
		
		МассивЗначений = Новый Массив();	
		Для ИндК =  ВыдОбласть.Лево По ВыдОбласть.Право Цикл
						
			Значение = АналитическийБланкУХКлиент.ПолучитьЗначениеОбластиТабличногоДокумента(тМакет.Область(ВыдОбласть.Верх, ИндК, ВыдОбласть.Верх, ИндК));
			
			Область = тМакет.Область(СтрУ,ИндК,СтрУ,ИндК);		
			МассивЗначений.Добавить(Значение);		
		КонецЦикла;	
		
		МассивСтрок.Добавить(МассивЗначений);		
	КонецЦикла;
	
	ОписаниеИзменений = "";
	СкопироватьЗначения(ОбластьДляВставки.Имя,МассивСтрок,,ОписаниеИзменений,ОписаниеТранзакции);
	Если ЗначениеЗаполнено(ОписаниеИзменений) Тогда		
		 ПоказатьОповещениеПользователя(Нстр("ru = 'Ячейки не редактируются'"),,ОписаниеИзменений,БиблиотекаКартинок.Внимание16);
		 Возврат;
	КонецЕсли;	
	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДиапазон(Команда)
	
	тМакет = ЭтаФорма[ТекущийМакет];
	ОписаниеИзменений = "";
	Для Каждого Область Из тМакет.ВыделенныеОбласти Цикл
		ОчиститьСодержимоеРаскрытияСервер(Область.Имя,ОписаниеИзменений);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОписаниеИзменений) Тогда		
		 ПоказатьОповещениеПользователя(Нстр("ru = 'Ячейки не редактируются'"),,ОписаниеИзменений,БиблиотекаКартинок.Внимание16);
	Иначе	 
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьСодержимоеРаскрытияСервер(ИмяОбласти,ОписаниеИзменений)
		
	Обработки.АналитическийБланк.ОчиститьСодержимоеОбласти(ЭтаФорма,Валюта,ИмяОбласти,ОписаниеИзменений);
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьЗначения(ИмяОбласти,МассивЗначений,КодРесурса="",ОписаниеИзменений,ПредставлениеТранзакции)
	
	Обработки.АналитическийБланк.СкопироватьЗначения(ЭтаФорма,Валюта,ИмяОбласти,МассивЗначений,КодРесурса,ОписаниеИзменений="",ПредставлениеТранзакции)
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьЗаблокированныеПериоды(тОбъектАБ,ЗаблокированныеПериоды = Неопределено,УправлениеПериодом,Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатусыПериодовСценариев.Периоды КАК ПериодОтчета
	               |ИЗ
	               |	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	               |ГДЕ
	               |	СтатусыПериодовСценариев.УправлениеПериодомСценария = &УправлениеПериодомСценария
	               |	И СтатусыПериодовСценариев.СтатусБлокировки = 1
	               |	И СтатусыПериодовСценариев.Организации = &Организации";
	
	Запрос.УстановитьПараметр("УправлениеПериодомСценария",УправлениеПериодом);
	Запрос.УстановитьПараметр("Организации",Организация);
	
	Если ЗаблокированныеПериоды = Неопределено Тогда
		тПериоды = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПериодОтчета");
		тОбъектАБ.Вставить("ЗаблокированныеПериоды",тПериоды);
	Иначе	
		тПериоды = Запрос.Выполнить().Выгрузить();
		ЗаблокированныеПериоды.Загрузить(тПериоды);
		тОбъектАБ.Вставить("ЗаблокированныеПериоды",ЗаблокированныеПериоды);
	КонецЕсли;	
		
КонецПроцедуры	

&НаСервере
Функция ПолучитьСтруктуруРасшифровки(ОбластьИмя,Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик)
	
	тМакет 					= ЭтаФорма[ТекущийМакет];
	тОбъектАБ     			= ЭтаФорма[ТекущийОбъектАБ];
    ТзСвойстваПоказателей 	= ПолучитьИзВременногоХранилища(тОбъектАБ.ТзСвойстваПоказателейАдрес);
	СтруктураКлючевыхРеквизитов     = ПолучитьСвойстваТекущегоОбъектаСервер();

	
	Возврат АналитическийБланкУХСервер.ПолучитьСтруктуруРасшифровки(тМакет,СтруктураКлючевыхРеквизитов,тОбъектАБ,ОбластьИмя,Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик,ТзСвойстваПоказателей);
	
КонецФункции

&НаСервереБезКонтекста
// Возвращает код колонки, которой принадлежит показатель отчета ПоказательВход.
Функция ПолучитьКодКолонкиПоказателя(ПоказательВход)
	
	Если ЗначениеЗаполнено(ПоказательВход) Тогда
		Возврат СокрЛП(ПоказательВход.Колонка.Код);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьИзменения(Команда)
			
	ЗаписатьИзмененияСервер();	
	ЭтаФорма.Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияСервер()
	
	РасчетПоказателейОбъект 									= РеквизитФормыВЗначение("РасчетИЗаписьПоказателей");
	РасчетПоказателейОбъект.АдресЛогаИзмененныхПоказателей 		= АдресЛогаИзмененныхПоказателей;
	РасчетПоказателейОбъект.ЗаписатьЛогИзмененныхПоказателей();
	
	АдресЛогаИзмененныхПоказателей 								= ПоместитьВоВременноеХранилище(УправлениеРасчетомПоказателей.ПолучитьОписаниеЛогаИзмененныхПоказателей(),ЭтаФорма.УникальныйИдентификатор);
	Транзакции.Очистить();
	
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры	


#КонецОбласти

#Область РаботаСЖурналомДействий

&НаКлиенте
Процедура ОтменитьПрименитьПодробно(Команда)
	
	ИсторияТранзакцийЗавершение = Новый ОписаниеОповещения("ИсторияТранзакцийЗавершение", ЭтаФорма);
	ПараметрыФормыРаскрытия = ПодготовитьПараметрыФормыТранзакций();
	ОткрытьФорму("Обработка.АналитическийБланк.Форма.ИсторияТранзакций",ПараметрыФормыРаскрытия,ЭтаФорма,,,,ИсторияТранзакцийЗавершение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
			
КонецПроцедуры

&НаКлиенте
Процедура ИсторияТранзакцийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	ОтменитьДействиеСервер(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьДействие(Команда)
	
	ОтменитьДействиеСервер();
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПовторитьДействие(Команда)
	
	ПовторитьДействиеСервер();
		
КонецПроцедуры

&НаСервере
Процедура ОтменитьДействиеСервер(МассивВыделенныхТранзакций = Неопределено)
	
	Обработки.АналитическийБланк.ОтменитьДействие(ЭтаФорма,МассивВыделенныхТранзакций);
	НарисоватьТаблицуСервер();
	
КонецПроцедуры


&НаСервере
Процедура ПовторитьДействиеСервер(МассивВыделенныхТранзакций = Неопределено)
	
	Обработки.АналитическийБланк.ПовторитьДействие(ЭтаФорма,МассивВыделенныхТранзакций);
	НарисоватьТаблицуСервер();
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыФормыТранзакций()
	
	СтруктураПараметров = Новый Структура;
	
	АдресТранзакцийОтменить  = ПоместитьВоВременноеХранилище(Транзакции.Выгрузить(),ЭтаФорма.УникальныйИдентификатор);
	СтруктураПараметров.Вставить("АдресТранзакцийОтменить",АдресТранзакцийОтменить);
	
	Возврат СтруктураПараметров;
	
КонецФункции

#КонецОбласти





