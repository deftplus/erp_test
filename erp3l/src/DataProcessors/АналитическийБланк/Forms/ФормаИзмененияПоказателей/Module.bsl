
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Режим = Параметры.Режим;
	
	Если ЗначениеЗаполнено(Режим) Тогда	
		Элементы.Действия.ТекущаяСтраница = Элементы["Группа"+Параметры.Режим];	
	Иначе	
		Элементы.Действия.ТекущаяСтраница = Элементы["ГруппаЗначениеПроцент"];
	КонецЕсли;
	
	Если Режим = "Актуализация" Тогда
		
		ПериодЗагрузкиФактическихДанныхС 	= Параметры.СписокПериодов[0];
		ПериодЗагрузкиФактическихДанныхПо 	= Параметры.СписокПериодов[Параметры.СписокПериодов.Количество()-1];
		
		СписокПоказателей.ЗагрузитьЗначения(Параметры.СписокПоказателей.ВыгрузитьЗначения());
		СписокОрганизаций.ЗагрузитьЗначения(Параметры.СписокОрганизаций.ВыгрузитьЗначения());
	
		ВидОтчета 				=  Параметры.ВидОтчета;
		
		ДействияПриАктуализации = Перечисления.ДействияПриАктуализацииБюджетов.НеПереносить;
					
		СценарийДляАктуализации = Параметры.Сценарий.СценарийДляАктуализации;
		ТекущийСценарий         = Параметры.Сценарий;
			 
					
		ПроверитьДанныеПоФакту();
		
		УстановитьПараметрыВыбораПериодов(Параметры.СписокПериодов);
		
	КонецЕсли;	
	
	ВидКорректировки = "Значение";	
	
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	
	Если  Режим = "Актуализация" Тогда
		
		Если Не ЗначениеЗаполнено(СценарийДляАктуализации) Тогда	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбран сценарий фактических данных'"),,,"СценарийДляАктуализации");		
			Возврат;	
		КонецЕсли;
		
		ВыполнитьАктуализациюСервер();
		
		Элементы.ДекорацияПроцессИдет.Видимость = Истина;
		Элементы.СтатусПроцесса.Заголовок = Нстр("ru = 'Выполняется копирование фактических данных...'");
		Элементы.СтатусПроцесса.ЦветТекста = Новый Цвет(0,0,0);
		
		Элементы.Применить.Доступность 					= Ложь;
		Элементы.ФормаОтмена.Доступность 				= Ложь;
		Элементы.ГруппаДанныеСценария.Доступность 		= Ложь;
		Элементы.ГруппаПериод.Доступность 				= Ложь;
		
		
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьАктуализацию",ИнтервалОжидания,Истина);	
		
	Иначе	
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЗначениеКорректировки",ЗначениеКорректировки);
		СтруктураПараметров.Вставить("ВидКорректировки",ВидКорректировки);
		СтруктураПараметров.Вставить("Режим",Режим);
		СтруктураПараметров.Вставить("СценарийПриемник",СценарийПриемник);
		СтруктураПараметров.Вставить("СценарийДляАктуализации",СценарийДляАктуализации);
		СтруктураПараметров.Вставить("ПериодЗагрузкиФактическихДанныхС",ПериодЗагрузкиФактическихДанныхС);
		СтруктураПараметров.Вставить("ПериодЗагрузкиФактическихДанныхПо",ПериодЗагрузкиФактическихДанныхПо);
		СтруктураПараметров.Вставить("ДействияПриАктуализации",ДействияПриАктуализации);
		
		Если ЗначениеЗаполнено(Дефлятор) Тогда
			СтруктураПараметров.Вставить("ВидКорректировки","Дефлятор");
			СтруктураПараметров.Вставить("ЗначениеКорректировки",Дефлятор);
		КонецЕсли;
		
		Закрыть(СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьФактПоРегламенту(Команда)
	
	ВыполнитьЗаполнениеФактаСервер();
	
	Элементы.ДекорацияПроцессИдетФакт.Видимость = Истина;
	Элементы.СтатусПроцессаФакт.Заголовок = Нстр("ru = 'Выполняется обновление фактических данных...'");
	Элементы.СтатусПроцессаФакт.ЦветТекста = Новый Цвет(0,0,0);
	
	Элементы.Применить.Доступность 					= Ложь;
	Элементы.ФормаОтмена.Доступность 				= Ложь;
	Элементы.СценарийДляАктуализации.Доступность 	= Ложь;
	Элементы.ЗаполнитьФактПоРегламенту.Доступность 	= Ложь;
	Элементы.ГруппаПериод.Доступность 				= Ложь;
	
	
	ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
	ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьОбновлениеФакта",ИнтервалОжидания,Истина);	
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДанныеПоФакту()
	
	СтруктураОтбираемыхАналитик = Новый Структура;
	СтруктураОтбираемыхАналитик.Вставить("ПоказательОтчета",СписокПоказателей.ВыгрузитьЗначения());
	СтруктураОтбираемыхАналитик.Вставить("Сценарий",СценарийДляАктуализации);
	СтруктураОтбираемыхАналитик.Вставить("Организация",СписокОрганизаций.ВыгрузитьЗначения());
    СтруктураОтбираемыхАналитик.Вставить("Период",ПериодыУХ.ПолучитьПодчиненныеПериоды(ПериодЗагрузкиФактическихДанныхС,ПериодЗагрузкиФактическихДанныхПо));

	
	Результат = СводнаяТаблицаУХ.ПолучитьЗначениеПоказателей(СтруктураОтбираемыхАналитик);	
	
	Если Результат = Неопределено ИЛИ Результат.Количество()=0 Тогда
		Элементы.ДекорацияНетДанныхПоФакту.Видимость = Истина;
	Иначе	
		Элементы.ДекорацияНетДанныхПоФакту.Видимость = Ложь;
	КонецЕсли;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийДляАктуализацииПриИзменении(Элемент)
	ПроверитьДанныеПоФакту();
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАктуализациюСервер()
		   
	//Определим периоды для загрузки факта	
	МассивФактическихПериодов = ПериодыУХ.ПолучитьПодчиненныеПериоды(ПериодЗагрузкиФактическихДанныхС,ПериодЗагрузкиФактическихДанныхПо);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МассивФактическихПериодов",МассивФактическихПериодов);
	СтруктураПараметров.Вставить("СписокОрганизаций",СписокОрганизаций);
	СтруктураПараметров.Вставить("СписокПоказателей",СписокПоказателей);
    СтруктураПараметров.Вставить("ДействияПриАктуализации",ДействияПриАктуализации);
    СтруктураПараметров.Вставить("Сценарий",ТекущийСценарий);
	СтруктураПараметров.Вставить("СценарийФактическихДанных",СценарийДляАктуализации);
		
	УправлениеПериодом = УправлениеРабочимиПроцессамиУХ.ПолучитьДокументУправленияПериодомСценария(ТекущийСценарий,МассивФактическихПериодов[0]);

	Если НЕ ЗначениеЗаполнено(УправлениеПериодом) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не открыт период по сценарию'"),,,);
		Возврат;
	КонецЕсли;	
	
	СтруктураПараметров.Вставить("ПериодДействия",УправлениеПериодом.ПериодСценарияОкончание);
	
	СтруктураВыполнения = Новый Структура("СтатусВыполнения,ИнформацияОбОшибке,ТекстСтатусаВыполнения","Прогресс",, Нстр("ru = 'Выполняется копирование фактических данных...'"));
	АдресХранилищаСтатусаОбработки = ПоместитьВоВременноеХранилище(СтруктураВыполнения,Новый УникальныйИдентификатор);
	МассивПараметров = Новый Массив; 
	МассивПараметров.Добавить(АдресХранилищаСтатусаОбработки); 
	МассивПараметров.Добавить(СтруктураПараметров);
	
	ФЗ_Актуализация = ФоновыеЗадания.Выполнить("СводнаяТаблицаУХ.ВыполнитьАктуализациюПоказателейВФоне",МассивПараметров); 
	
		
КонецПроцедуры	

&НаСервере
Процедура ВыполнитьЗаполнениеФактаСервер()
		   
	//Определим периоды для загрузки факта	
	МассивФактическихПериодов = ПериодыУХ.ПолучитьПодчиненныеПериоды(ПериодЗагрузкиФактическихДанныхС,ПериодЗагрузкиФактическихДанныхПо);
	
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидОтчета",ВидОтчета);
	СтруктураПараметров.Вставить("СтруктураФильтров",ПолучитьИзВременногоХранилища(АдресСтруктураФильтров));
	СтруктураПараметров.Вставить("ТЗКолонок",ПолучитьИзВременногоХранилища(ТЗКолонокАдрес));
    СтруктураПараметров.Вставить("тзДанные",ПолучитьИзВременногоХранилища(тзДанныеАдрес));
  	СтруктураПараметров.Вставить("СценарийФактическихДанных",СценарийДляАктуализации);

	
	УправлениеПериодом = УправлениеРабочимиПроцессамиУХ.ПолучитьДокументУправленияПериодомСценария(ТекущийСценарий,МассивФактическихПериодов[0]);

	Если НЕ ЗначениеЗаполнено(УправлениеПериодом) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не открыт период по сценарию'"),,,);
		Возврат;
	КонецЕсли;	
	
	СтруктураПараметров.Вставить("ПериодДействия",УправлениеПериодом.ПериодСценарияОкончание);
	
	СтруктураВыполнения = Новый Структура("СтатусВыполнения,ИнформацияОбОшибке,ТекстСтатусаВыполнения","Прогресс",, Нстр("ru = 'Выполняется подготовка к обновлению фактических данных...'"));
	АдресХранилищаСтатусаОбработки = ПоместитьВоВременноеХранилище(СтруктураВыполнения,Новый УникальныйИдентификатор);
	МассивПараметров = Новый Массив; 
	МассивПараметров.Добавить(АдресХранилищаСтатусаОбработки); 
	МассивПараметров.Добавить(СтруктураПараметров);
	
	ФЗ_Актуализация = ФоновыеЗадания.Выполнить("СводнаяТаблицаУХ.ВыполнитьЗаполнениеФактаВФоне",МассивПараметров); 
	
		
КонецПроцедуры	


&НаКлиенте
Процедура ПериодЗагрузкиФактическихДанныхСПриИзменении(Элемент)
	ПроверитьДанныеПоФакту();
КонецПроцедуры


&НаКлиенте
Процедура ПериодЗагрузкиФактическихДанныхПоПриИзменении(Элемент)
	ПроверитьДанныеПоФакту();
КонецПроцедуры
	
&НаКлиенте
Процедура Подключаемый_ВыполнитьАктуализацию() Экспорт
			
	ДанныеОВыполнении 		= ПолучитьИзВременногоХранилища(АдресХранилищаСтатусаОбработки); 
	СтатусВыполнения 		= ДанныеОВыполнении.СтатусВыполнения;
	ТекстСтатусаВыполнения  = ДанныеОВыполнении.ТекстСтатусаВыполнения;
	
	Элементы.СтатусПроцесса.Заголовок = ТекстСтатусаВыполнения;
	
	Если СтатусВыполнения = "Прогресс" Тогда 
		Элементы.СтатусПроцесса.ЦветТекста = Новый Цвет(0,0,0);
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьАктуализацию",ИнтервалОжидания,Истина);	
	КонецЕсли; 
	
	Если  СтатусВыполнения = "Ошибка" Тогда		
		Элементы.Применить.Доступность 					= Истина;
		Элементы.ФормаОтмена.Доступность 				= Истина;
		Элементы.ГруппаДанныеСценария.Доступность 		= Истина;
		Элементы.ГруппаПериод.Доступность 				= Истина;

		Элементы.ДекорацияПроцессИдет.Видимость = Ложь;
		Элементы.СтатусПроцесса.ЦветТекста = Новый Цвет(255,0,0);
		Элементы.ГруппаПроцессИдет.Видимость = Ложь;
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ДанныеОВыполнении.ИнформацияОбОшибке, , , СтатусСообщения.Важное);
		ОтключитьОбработчикОжидания("Подключаемый_ВыполнитьКопирование");			
	ИначеЕсли СтатусВыполнения = "Успех" Тогда 	
		Элементы.Применить.Доступность 					= Истина;
		Элементы.ФормаОтмена.Доступность 				= Истина;
		Элементы.ГруппаДанныеСценария.Доступность 		= Истина;
		Элементы.ГруппаПериод.Доступность 				= Истина;

		Элементы.СтатусПроцесса.ЦветТекста = Новый Цвет(0,255,0);
		Элементы.ДекорацияПроцессИдет.Видимость = Ложь;
		Оповестить("ОбновитьДанныеПослеАктуализации");
		ОтключитьОбработчикОжидания("Подключаемый_ВыполнитьКопирование");				
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьОбновлениеФакта() Экспорт
			
	ДанныеОВыполнении 		= ПолучитьИзВременногоХранилища(АдресХранилищаСтатусаОбработки); 
	СтатусВыполнения 		= ДанныеОВыполнении.СтатусВыполнения;
	ТекстСтатусаВыполнения  = ДанныеОВыполнении.ТекстСтатусаВыполнения;
	
	Элементы.СтатусПроцессаФакт.Заголовок = ТекстСтатусаВыполнения;
	
	Если СтатусВыполнения = "Прогресс" Тогда 
		Элементы.СтатусПроцессаФакт.ЦветТекста = Новый Цвет(0,0,0);
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьОбновлениеФакта",ИнтервалОжидания,Истина);	
	КонецЕсли; 
	
	Если  СтатусВыполнения = "Ошибка" Тогда		
		Элементы.Применить.Доступность 					= Истина;
		Элементы.ФормаОтмена.Доступность 				= Истина;
		Элементы.СценарийДляАктуализации.Доступность 	= Истина;
		Элементы.ЗаполнитьФактПоРегламенту.Доступность 	= Истина;
		Элементы.ГруппаПериод.Доступность 				= Истина;
		Элементы.ДекорацияПроцессИдетФакт.Видимость = Ложь;
		Элементы.СтатусПроцессаФакт.ЦветТекста = Новый Цвет(255,0,0);
		Элементы.ГруппаПроцессИдетФакт.Видимость = Ложь;
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ДанныеОВыполнении.ИнформацияОбОшибке, , , СтатусСообщения.Важное);
		Элементы.ДекорацияНетДанныхПоФакту.Вдимость = Ложь;
		ОтключитьОбработчикОжидания("Подключаемый_ВыполнитьОбновлениеФакта");			
		
	ИначеЕсли СтатусВыполнения = "Успех" Тогда 	
		Элементы.Применить.Доступность 					= Истина;
		Элементы.ФормаОтмена.Доступность 				= Истина;
		Элементы.СценарийДляАктуализации.Доступность 	= Истина;
		Элементы.ЗаполнитьФактПоРегламенту.Доступность 	= Истина;
		Элементы.ГруппаПериод.Доступность 				= Истина;
		Элементы.СтатусПроцессаФакт.ЦветТекста = Новый Цвет(0,255,0);
		Элементы.ДекорацияПроцессИдетФакт.Видимость = Ложь;
		Элементы.ДекорацияНетДанныхПоФакту.Видимость = Ложь;
		ОтключитьОбработчикОжидания("Подключаемый_ВыполнитьОбновлениеФакта");				
	КонецЕсли;	
	
КонецПроцедуры



&НаСервере
Процедура УстановитьПараметрыВыбораПериодов(ДоступныеПериоды)
		   	
	МассивЗнченийПараметров  = Новый ФиксированныйМассив(ДоступныеПериоды);
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", МассивЗнченийПараметров);	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ПериодЗагрузкиФактическихДанныхС.ПараметрыВыбора 	= НовыеПараметры;
	Элементы.ПериодЗагрузкиФактическихДанныхПо.ПараметрыВыбора 	= НовыеПараметры;
		
КонецПроцедуры