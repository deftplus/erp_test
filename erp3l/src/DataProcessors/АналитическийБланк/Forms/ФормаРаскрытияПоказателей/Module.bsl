

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	АдресТзРаскрытия       				= Параметры.АдресТзРаскрытия;
	АдресЛогаИзмененныхПоказателей      = Параметры.АдресЛогаИзмененныхПоказателей;
	ТзРаскрытияПоказателей 				= ПолучитьИзВременногоХранилища(Параметры.АдресТзРаскрытия);	
	ТзРаскрытияПоказателей.Колонки.Добавить("ПризнакИзменено",ОбщегоНазначенияУх.ПолучитьОписаниеТиповЧисла(1,0));
	РежимЗаписиВлог                     = Параметры.РежимЗаписиВлог;
	
	Если Не ТзРаскрытияПоказателей.Колонки.Найти("УидГруппыОтборов") = Неопределено Тогда
		ТзРаскрытияПоказателей.ЗаполнитьЗначения(Параметры.УидГруппыОтборов, "УидГруппыОтборов");
	КонецЕсли;
	
	РеквизитыКДобавлению			= Новый Массив;
	РеквизитыОтборыКДобавлению 		= Новый Массив;	     
	
	Ссылка = Параметры.Ссылка;
	
	СписокКолонок.Добавить(Параметры.УидГруппыОтборов,"УидГруппыОтборов");
	СписокКолонокФильтра.Добавить(Параметры.УидГруппыОтборов,"УидГруппыОтборов");
	
	Показатель = Параметры.СтруктураОтбираемыхАналитик.ПоказательОтчета[0];
	ТипЗначениеПоказателя = Показатель.ТипЗначения;
	ТипКолонкиЗначение = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5);
	
	Если ТипЗначениеПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда
		ТипКолонкиЗначение = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево();
	ИначеЕсли ТипЗначениеПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда
		ТипКолонкиЗначение = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
	ИначеЕсли ТипЗначениеПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка Тогда
		ТипКолонкиЗначение = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255);
	КонецЕсли;	
	
	АдрестСвойствАналитик      				 = Параметры.АдрестСвойствАналитик;
	АдресСтруктураКлючевыхРеквизитов         = Параметры.АдресСтруктураКлючевыхРеквизитов;
	тСвойствАналитик 						 = ПолучитьИзВременногоХранилища(Параметры.АдрестСвойствАналитик);
		
	Для Каждого Колонка ИЗ ТзРаскрытияПоказателей.Колонки Цикл	                                                 		
		ТекСубконто =  ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.НайтиПоКоду(Колонка.Имя);
		Если ЗначениеЗаполнено(ТекСубконто) Тогда
			 ТипКолонки = Новый ОписаниеТипов(ТекСубконто.ТипЗначения);
		ИначеЕсли Колонка.Имя = "Значение" ИЛИ Колонка.Имя = "ЗначениеВалюта" Тогда	
			 ТипКолонки = ТипКолонкиЗначение;
		Иначе	
			 ТипКолонки = Новый ОписаниеТипов(Колонка.ТипЗначения,,"NULL");	
		КонецЕсли;	
		
		РеквизитыКДобавлению.Добавить(Новый РеквизитФормы(Колонка.Имя,
		ТипКолонки,
		"РаскрытиеПоказателей",
		Колонка.Заголовок,
		Ложь));	
		
		Если НЕ Параметры.СтруктураНезаполненыхАналитик.Свойство(Колонка.Имя) Тогда
			Если НЕ Колонка.Имя = "Значение" И НЕ Колонка.Имя = "ЗначениеВалюта" Тогда	
				Продолжить;
			КонецЕсли;	
		КонецЕсли;	
	
		РеквизитыОтборыКДобавлению.Добавить(Новый РеквизитФормы("БыстрыйОтбор_"+Колонка.Имя,
		ТипКолонки,,
		Колонка.Заголовок,
		Ложь));		
		СписокКолонок.Добавить(Неопределено,Колонка.Имя);		
	КонецЦикла;

	Если НЕ Параметры.Заблокирован Тогда
		
		СтрокаШаблона = Нстр("ru = '%1 (только просмотр)'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда				
			ЭтаФорма.Заголовок = СтрШаблон(СтрокаШаблона, ЭтаФорма.Заголовок);
		КонецЕсли;
		
		Элементы.РаскрытиеПоказателей.ТолькоПросмотр = Истина;
		Элементы.ФормаКнопкаОК.Доступность = Ложь;
		Элементы.ФормаКнопкаПрименить.Доступность = Ложь;
		Элементы.Редактирование.Пометка = Ложь;
	Иначе	
		Элементы.Редактирование.Пометка = Истина;
		Элементы.Редактирование.Доступность = Ложь;
	КонецЕсли;	
	
	ИзменитьРеквизиты(РеквизитыКДобавлению);
	ИзменитьРеквизиты(РеквизитыОтборыКДобавлению);
	ЗначениеВРеквизитФормы(ТзРаскрытияПоказателей,"РаскрытиеПоказателей");
			
	Для Каждого Колонка ИЗ ТзРаскрытияПоказателей.Колонки Цикл			
		     			
		Если НЕ Параметры.СтруктураНезаполненыхАналитик.Свойство(Колонка.Имя) Тогда
			Если НЕ Колонка.Имя = "Значение" И НЕ Колонка.Имя = "ЗначениеВалюта" Тогда	
				Продолжить;
			КонецЕсли;	
		КонецЕсли;	
		
		Если  Параметры.СтруктураНезаполненыхАналитик.Свойство("АналитикаВалюта") И Показатель.ПересчитыватьВалютнуюСумму Тогда
			Элементы.РаскрытиеПоказателейОтобразитьВалютныеСуммы.Видимость = Истина;
		КонецЕсли;	
	
		ЭтаФорма.Элементы.Добавить(Колонка.Имя,Тип("ПолеФормы"),ЭтаФорма.Элементы.РаскрытиеПоказателей);	
		ЭтаФорма.Элементы[Колонка.Имя].ПутьКДанным		= "РаскрытиеПоказателей."+Колонка.Имя;
		ЭтаФорма.Элементы[Колонка.Имя].Вид				= ВидПоляФормы.ПолеВвода;						
		ЭтаФорма.Элементы[Колонка.Имя].ВыбиратьТип		= Ложь;		
		Если  Колонка.Имя = "Значение" Тогда
			ЭтаФорма.Элементы[Колонка.Имя].ДоступныеТипы=ТипКолонкиЗначение;
			ЭтаФорма.Элементы[Колонка.Имя].КнопкаВыбора=Истина;
			ЭтаФорма.Элементы[Колонка.Имя].РедактированиеТекста=Истина;
			ЭтаФорма.Элементы[Колонка.Имя].Заголовок=Строка(Параметры.СтруктураОтбираемыхАналитик.ВидОтчета[0])+"."+Строка(Параметры.СтруктураОтбираемыхАналитик.ПоказательОтчета[0]);
			ЭтаФорма.Элементы[Колонка.Имя].ТекстПодвала = РаскрытиеПоказателей.Итог(Колонка.Имя);		
			ЭтаФорма.Элементы[Колонка.Имя].Ширина=10;
		ИначеЕсли  Колонка.Имя = "ЗначениеВалюта"   Тогда	
			ЭтаФорма.Элементы[Колонка.Имя].ДоступныеТипы=Новый ОписаниеТипов(Колонка.ТипЗначения,,"NULL");
			ЭтаФорма.Элементы[Колонка.Имя].КнопкаВыбора=Истина;
			ЭтаФорма.Элементы[Колонка.Имя].РедактированиеТекста=Истина;
			ЭтаФорма.Элементы[Колонка.Имя].Заголовок=Строка(Параметры.СтруктураОтбираемыхАналитик.ВидОтчета[0])+"."+Строка(Параметры.СтруктураОтбираемыхАналитик.ПоказательОтчета[0]) + Нстр("ru = '(значение в валюте)'");
			ЭтаФорма.Элементы[Колонка.Имя].ТекстПодвала = РаскрытиеПоказателей.Итог(Колонка.Имя);		
			ЭтаФорма.Элементы[Колонка.Имя].Ширина=10;		
		ИначеЕсли  Колонка.Имя = "ПериодОтчета" ИЛИ Колонка.Имя = "Организация" ИЛИ Колонка.Имя = "Проект" ИЛИ Колонка.Имя = "Сценарий"  Тогда	
			ЭтаФорма.Элементы[Колонка.Имя].ДоступныеТипы=Новый ОписаниеТипов(Колонка.ТипЗначения,,"NULL");
			ЭтаФорма.Элементы[Колонка.Имя].КнопкаВыбора=Истина;
			ЭтаФорма.Элементы[Колонка.Имя].КнопкаОчистки=Истина;
			ЭтаФорма.Элементы[Колонка.Имя].КнопкаОткрытия=Истина;
			ЭтаФорма.Элементы[Колонка.Имя].Ширина=10;
			ЭтаФорма.Элементы[Колонка.Имя].АвтоОтметкаНезаполненного = Истина;
			Если  Колонка.Имя = "ПериодОтчета" Тогда
				тГоризонт  = Параметры.тГоризонт;
				СоздатьОграничениеПоПериодам(тГоризонт);
			Иначе	
				СоздатьОграничениеПоКлючевойАналитике(Колонка.Имя,Параметры.тОбъект);
			КонецЕсли;	
		ИначеЕсли  Колонка.Имя = "ПризнакИзменено"   Тогда		
			ЭтаФорма.Элементы[Колонка.Имя].ТолькоПросмотр=Истина;
			ЭтаФорма.Элементы[Колонка.Имя].КнопкаВыбора=Ложь;
			ЭтаФорма.Элементы[Колонка.Имя].КнопкаОчистки=Ложь;
			ЭтаФорма.Элементы[Колонка.Имя].КнопкаОткрытия=Ложь;
            ЭтаФорма.Элементы[Колонка.Имя].Заголовок=" ";
			ЭтаФорма.Элементы[Колонка.Имя].АвтоМаксимальнаяШирина = Ложь;
			ЭтаФорма.Элементы[Колонка.Имя].МаксимальнаяШирина=2; 
		Иначе
			ТекСтрокаСвойств = тСвойствАналитик.НайтиСтроки(Новый Структура("КодАналитики",Колонка.Имя))[0];
			
			Если Колонка.Имя = "АналитикаВалюта" Тогда
				ТекСубконто =  ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты;
			Иначе	
				ТекСубконто =  ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.НайтиПоКоду(Колонка.Имя);
			КонецЕсли;	
			
			ЭтаФорма.Элементы[Колонка.Имя].ДоступныеТипы=Новый ОписаниеТипов(ТекСубконто.ТипЗначения);
			ЭтаФорма.Элементы[Колонка.Имя].КнопкаВыбора=Истина;
			ЭтаФорма.Элементы[Колонка.Имя].КнопкаОчистки=Истина;
			ЭтаФорма.Элементы[Колонка.Имя].КнопкаОткрытия=Истина;
			ЭтаФорма.Элементы[Колонка.Имя].ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
			ЭтаФорма.Элементы[Колонка.Имя].Заголовок=ТекСубконто.Наименование;
			ЭтаФорма.Элементы[Колонка.Имя].Ширина=10;
			Если ТекСтрокаСвойств.ОбязательноеЗаполнение Тогда
				ЭтаФорма.Элементы[Колонка.Имя].АвтоОтметкаНезаполненного = Истина;
			КонецЕсли;	
			Если ТекСубконто.ТипЗначения.Типы().Количество()>1 Тогда
				ЭтаФорма.Элементы[Колонка.Имя].ВыбиратьТип = Истина;
			КонецЕсли;	

			УстановитьСвязиПараметровВыбора(ТекСтрокаСвойств);
			
			Если ТекСтрокаСвойств.ЭтоЭтапПроекта Тогда             
				УстановитьОтборПоПроекту(ТекСтрокаСвойств,Параметры.СтруктураОтбираемыхАналитик);
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(ТекСтрокаСвойств.ОтборЗначений) И ТекСтрокаСвойств.типАналитики.Типы().Количество()=1 Тогда
				УстановитьОтборПоФильтру(ТекСтрокаСвойств);
			КонецЕсли;	
			
			Если ТекСтрокаСвойств.МетаИмяАналитики = "ПроизвольныйКлассификаторУХ" Тогда
				НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", ТекСубконто);
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НовыйПараметр);				
				НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
				ЭтаФорма.Элементы[ТекСтрокаСвойств.КодАналитики].ПараметрыВыбора=НовыеПараметры;	
			КонецЕсли;	
					
		КонецЕсли;
		ЭтаФорма.Элементы[Колонка.Имя].ГоризонтальноеПоложениеВПодвале=ГоризонтальноеПоложениеЭлемента.Право;					 
	КонецЦикла;
	
	Для Каждого РеквизитОтбор Из РеквизитыОтборыКДобавлению Цикл	
		НГруппа     		= ЭтаФорма.Элементы.Добавить("Группа_"+РеквизитОтбор.Имя,Тип("ГруппаФормы"),Элементы.ГруппаБыстрыеОтборы);
	    НГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
        НГруппа.Отображение	= ОтображениеОбычнойГруппы.Нет;
        НГруппа.Группировка	= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		НГруппа.ЦветФона    = Новый Цвет(255,250,217);
		НГруппа.Высота     =1;
		НГруппа.РастягиватьПоВертикали  = Ложь;
		НГруппа.ОтображатьЗаголовок  = Ложь;
		НГруппа.Видимость = Ложь;
		
		
		
		НЭлемент = ЭтаФорма.Элементы.Добавить("Элемент_"+РеквизитОтбор.Имя,Тип("ПолеФормы"),НГруппа);	
		НЭлемент.ПутьКДанным		= РеквизитОтбор.Имя;
		НЭлемент.Вид				= ВидПоляФормы.ПолеВвода;						
		НЭлемент.ВыбиратьТип		= Ложь;		
		НЭлемент.ДоступныеТипы		= РеквизитОтбор.ТипЗначения;
        НЭлемент.ЦветФона    		= ЦветаСтиля.БыстрыеОтборыФонГруппы;
        НЭлемент.ЦветРамки          = ЦветаСтиля.БыстрыеОтборыФонГруппы;
		НЭлемент.Высота     		= 1;
		НГруппа.РастягиватьПоВертикали  = Ложь;
		НЭлемент.ШрифтЗаголовка     = Новый Шрифт(НЭлемент.ШрифтЗаголовка,,9);
		НЭлемент.Шрифт			    = Новый Шрифт(НЭлемент.Шрифт,,9);
		НЭлемент.УстановитьДействие("ПриИзменении","ЭлементОтбораПриИзменении");
		
		ТекСубконто =  ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.НайтиПоКоду(РеквизитОтбор.Заголовок);
		Если ЗначениеЗаполнено(ТекСубконто) Тогда
			НЭлемент.Заголовок     = ТекСубконто.Наименование;
		КонецЕсли;	
		
		НЭлемент     		= ЭтаФорма.Элементы.Добавить("ЭлементОчистить_"+РеквизитОтбор.Имя,Тип("ДекорацияФормы"),НГруппа);
		НЭлемент.Вид 		= ВидДекорацииФормы.Картинка;
		НЭлемент.Картинка 	= БиблиотекаКартинок.СкрытаяНастройкаОтчета;
		НЭлемент.Рамка      = Новый Рамка(ТипРамкиЭлементаУправления.Выпуклая, 1);	
		НЭлемент.Ширина     = 2;
		НЭлемент.Высота     = 1;
		НЭлемент.Гиперссылка = Истина;
		НЭлемент.Подсказка   = Нстр("ru = 'Удалить отбор'");
		НЭлемент.УстановитьДействие("Нажатие","ОчиститьОтбор");		
	КонецЦикла;	
	
	ОбновитьНадписьФильтраПоАналитике(Параметры.СтруктураОтбираемыхАналитик);
	
	логИзмененныхПоказателейАдрес 		= Параметры.логИзмененныхПоказателейАдрес;
	мПоказателиРаскрытияАдрес		 	= Параметры.мПоказателиРаскрытияАдрес;
	КэшАналитикПоказателейАдрес         = Параметры.КэшАналитикПоказателейАдрес;
	ЕдиницаИзмерения                    = Параметры.ЕдиницаИзмерения;
	УровеньТочности                     = Параметры.УровеньТочности;
	
	Если ЗначениеЗаполнено(логИзмененныхПоказателейАдрес) Тогда
		логИзмененныхПоказателейАдрес 		= Параметры.логИзмененныхПоказателейАдрес 				
	Иначе	
		логИзмененныхПоказателей 			= Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать().ТаблицаИзмененныхПоказателей.ВыгрузитьКолонки();		
		логИзмененныхПоказателей.Индексы.Добавить("Сценарий,ПериодОтчета,Организация,Проект,ПоказательОтчета,Аналитика1,Аналитика2,Аналитика3,Аналитика4,Аналитика5");
		логИзмененныхПоказателейАдрес		= ПоместитьВоВременноеХранилище(логИзмененныхПоказателей,Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Элементы.ЗначениеВалюта.Видимость = Элементы.РаскрытиеПоказателейОтобразитьВалютныеСуммы.Видимость;
		
	ПравилоОбработки = Параметры.ПравилоОбработки;
	ВИБ              = Параметры.ВИБ;
	
	Если Параметры.СтруктураЗаблокированныхПоказателей.Заблокирован ИЛИ Параметры.РежимТолькоЧтение Тогда
		
		СтрокаШаблона = Нстр("ru = '%1 (только просмотр)'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда				
			ЭтаФорма.Заголовок = СтрШаблон(СтрокаШаблона, ЭтаФорма.Заголовок);
		КонецЕсли;
		
		Элементы.РаскрытиеПоказателей.ТолькоПросмотр = Истина;
		Элементы.ФормаКнопкаОК.Доступность = Ложь;
		Элементы.ФормаКнопкаПрименить.Доступность = Ложь;
		Элементы.Редактирование.Пометка = Ложь;
		Элементы.Редактирование.Видимость = Ложь;
		ДопИнформация  = Параметры.СтруктураЗаблокированныхПоказателей.Пояснение;
		
	КонецЕсли;	
	
	Если Параметры.Свойство("ДополнительныйОтбор") Тогда	
		Для Каждого СтрФильтр Из Параметры.ДополнительныйОтбор Цикл
			ТекЭлемент 		= СтрФильтр.Ключ;
			ТекЗначение     = СтрФильтр.Значение;
			ФлОтбора = Ложь;
			Для Каждого СтОтбор Из СписокОтборов Цикл
				Если СтОтбор.Представление = ТекЭлемент Тогда
					СтОтбор.Значение = ТекЗначение;
					ФлОтбора = Истина;
					Прервать;
				КонецЕсли;		
			КонецЦикла; 
			
			Если Не ФлОтбора Тогда
				СтОтбор = СписокОтборов.Добавить();             
				СтОтбор.Представление 		= ТекЭлемент;
				СтОтбор.Значение		 	= ТекЗначение;
			КонецЕсли;	
			
			УстановитьОтборСтрок();
			
		КонецЦикла;			
	КонецЕсли;	

	ЭтаФорма.Элементы["Значение"].ТекстПодвала = РаскрытиеПоказателей.Итог("Значение");	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	АдресФормыВладельца = ЭтаФорма.ВладелецФормы;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СортироватьПоВозрастанию(Команда)
	
	Отсортировать("");
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоУбыванию(Команда)
	
	Отсортировать(" УБЫВ");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтбор(Элемент)
	
	СтандартнаяОбработка=Ложь;
	КодОтбора = СтрЗаменить(Элемент.Имя,"ЭлементОчистить_БыстрыйОтбор_","");
	УдОтбор = Ложь;
	Для Каждого СтОтбор Из СписокОтборов Цикл
		Если СтОтбор.Представление = КодОтбора Тогда
			 УдОтбор = СтОтбор;
			 Прервать;
		КонецЕсли;		
	КонецЦикла; 
	
	СписокОтборов.Удалить(УдОтбор);
	УстановитьОтборСтрок();
		
КонецПроцедуры 

&НаКлиенте
Процедура ЭлементОтбораПриИзменении(Элемент)
	
	КодОтбора = СтрЗаменить(Элемент.Имя,"Элемент_БыстрыйОтбор_","");
	УдОтбор = Ложь;
	Для Каждого СтОтбор Из СписокОтборов Цикл
		Если СтОтбор.Представление = КодОтбора Тогда
			 СтОтбор.Значение = ЭтаФорма["БыстрыйОтбор_"+КодОтбора];
			 Прервать;
		КонецЕсли;		
	КонецЦикла; 
	
	УстановитьОтборСтрок();
	
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьФильтр(Команда)
	
	ТекЭлемент 		= Элементы.РаскрытиеПоказателей.ТекущийЭлемент.Имя;
	ТекЗначение     = Элементы.РаскрытиеПоказателей.ТекущиеДанные[Элементы.РаскрытиеПоказателей.ТекущийЭлемент.Имя];

	ФлОтбора = Ложь;
	Для Каждого СтОтбор Из СписокОтборов Цикл
		Если СтОтбор.Представление = ТекЭлемент Тогда
			 СтОтбор.Значение = ТекЗначение;
			 ФлОтбора = Истина;
			 Прервать;
		КонецЕсли;		
	КонецЦикла; 
	
	Если Не ФлОтбора Тогда
		 СтОтбор = СписокОтборов.Добавить();             
		 СтОтбор.Представление 		= ТекЭлемент;
		 СтОтбор.Значение		 	= ТекЗначение;
	КонецЕсли;	
	
	УстановитьОтборСтрок();
		
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОтбор(Команда)
	
	ОтключитьОтборСервер();
    ЭтаФорма.Элементы["Значение"].ТекстПодвала = РаскрытиеПоказателей.Итог("Значение");		
	
КонецПроцедуры


&НаКлиенте
Процедура РаскрытиеПоказателейПриИзменении(Элемент)
			
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		 Возврат;
	КонецЕсли;		
	Элемент.ТекущиеДанные.ПризнакИзменено  = 1;	
	Для Каждого Кол Из СписокКолонокФильтра Цикл
		Если Элемент.ТекущиеДанные.Свойство(Кол.Представление) Тогда
			Элемент.ТекущиеДанные[Кол.Представление] = Кол.Значение;
		КонецЕсли;
	КонецЦикла;

	ЭтаФорма.Элементы["Значение"].ТекстПодвала = РаскрытиеПоказателей.Итог("Значение");		
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаПрименить(Команда)
	
	Если Не ПровериьЗаполнениеОбязательных() Тогда
		Возврат;
	КонецЕсли;	
		
	ПрименитьИзменения();
	
	Если ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("ФормаКлиентскогоПриложения") Тогда
		УидФормыВладельца = ЭтаФорма.ВладелецФормы.УникальныйИдентификатор;
	Иначе	
		УидФормыВладельца = Неопределено;
	КонецЕсли;	
	
	СтруктураОтвета = Новый Структура("мПоказателиРаскрытияАдрес,логИзмененныхПоказателейАдрес,АдресТаблицыИзмененныхПоказателей,УидФормыВладельца"
	,мПоказателиРаскрытияАдрес
	,логИзмененныхПоказателейАдрес
	,АдресТаблицыИзмененныхПоказателей
	,УидФормыВладельца);
	
	Оповестить("ИзменилисьПоказатели",СтруктураОтвета);
 
КонецПроцедуры

&НаКлиенте
Процедура КнопкаОК(Команда)
			 
	 Если Не ПровериьЗаполнениеОбязательных() Тогда
		Возврат;
	 КонецЕсли;	

	 ПрименитьИзменения();
	 СтруктураОтвета = Новый Структура("мПоказателиРаскрытияАдрес,логИзмененныхПоказателейАдрес,АдресЛогаИзмененныхПоказателей,АдресТаблицыИзмененныхПоказателей"
	 ,мПоказателиРаскрытияАдрес,логИзмененныхПоказателейАдрес,АдресЛогаИзмененныхПоказателей,АдресТаблицыИзмененныхПоказателей);
	 Закрыть(СтруктураОтвета);
	 
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПолучитьИтогСУчетомОтборов()
	
	ТзЗначение = РеквизитФормыВЗначение("РаскрытиеПоказателей");
	СтруктураОтбора = Новый Структура();
	
	Для Каждого СтОтбор Из СписокОтборов Цикл		
		СтруктураОтбора.Вставить(СтОтбор.Представление, СтОтбор.Значение);		     		
	КонецЦикла;		
	
	ТзСУчетомОтборов =  ТзЗначение.Скопировать(СтруктураОтбора);
	
	Возврат ТзСУчетомОтборов.Итог("Значение");
	
КонецФункции	

&НаСервере
Процедура ОбновитьНадписьФильтраПоАналитике(Отбор)
	
	ТекстУстановленногоФильтра = "";
	РеквизитыОтборыКДобавлению 		= Новый Массив;	
	
	Если НЕ Отбор = Неопределено Тогда			
		Для каждого Стр из Отбор Цикл		
			
			ЗаголовокПоля = "";
			
			Если Стр.Ключ = "УидГруппыОтборов" ИЛИ  Стр.Ключ = "ВидОтчета" Тогда
				 Продолжить;
			ИначеЕсли Стр.Ключ = "ПериодОтчета" Тогда	 
				 ЗаголовокПоля = "Период";
			ИначеЕсли Стр.Ключ = "ПоказательОтчета" Тогда	 
				 ЗаголовокПоля = "Показатель";
	        ИначеЕсли Стр.Ключ = "Сценарий" Тогда	 
				 ЗаголовокПоля = "Сценарий";
            ИначеЕсли Стр.Ключ = "Организация" Тогда	 
				 ЗаголовокПоля = "Организация";
            ИначеЕсли Стр.Ключ = "Проект" Тогда	 
				 ЗаголовокПоля = "Проект";
            Иначе
				Если ЗначениеЗаполнено(Стр.Значение) И НЕ ТипЗнч(Стр.Значение) = Тип("Массив") Тогда 
					ЗаголовокПоля =Стр.Значение.Метаданные().Синоним;
				КонецЕсли;
			КонецЕсли;	
			
			Если ТипЗнч(Стр.Значение) = Тип("Массив") Тогда
				Если Стр.Ключ = "ПоказательОтчета"  И Стр.Значение.Количество() =  1 Тогда
					СписокКолонок.Добавить(Стр.Значение[0],"ПоказательОтчета");	
					СписокКолонок.Добавить(Стр.Значение[0].ТипЗначения,"ПоказательТипЗначения");	
					СписокКолонокФильтра.Добавить(Стр.Значение[0],Стр.Ключ);
				КонецЕсли;		
				Продолжить;
			КонецЕсли;	
			
			РеквизитыОтборыКДобавлению.Добавить(Новый РеквизитФормы("БыстрыйОтбор_"+Стр.Ключ,
			Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(Стр.Значение))),,
			ЗаголовокПоля,
			Ложь));		
			
			
			ТекстУстановленногоФильтра = ТекстУстановленногоФильтра + ?(ТекстУстановленногоФильтра = "", "", " | ")
			+ ЗаголовокПоля + "=" + Стр.Значение;
			СписокКолонок.Добавить(Стр.Значение,Стр.Ключ);
			СписокКолонокФильтра.Добавить(Стр.Значение,Стр.Ключ);
		КонецЦикла;		
	КонецЕсли;		
		
	ЭтаФорма.Заголовок = ЭтаФорма.Заголовок+": "+ ТекстУстановленногоФильтра;
	
КонецПроцедуры	

&НаКлиенте
Процедура Отсортировать(Направление)
	
	ВыделеннаяСтрока = Элементы.РаскрытиеПоказателей.ТекущийЭлемент;
	
	Если Не ВыделеннаяСтрока = Неопределено Тогда		
		РаскрытиеПоказателей.Сортировать(ВыделеннаяСтрока.Имя + Направление);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьЗначениеПоказателя(ЗначениеДляВставки,СтруктураРасшифровки);	
	
	логИзмененныхПоказателей    = ПолучитьИзВременногоХранилища(логИзмененныхПоказателейАдресКопия);
	КэшАналитикПоказателей      = ПолучитьИзВременногоХранилища(КэшАналитикПоказателейАдрес); 
	мПоказателиРаскрытия 		= ПолучитьИзВременногоХранилища(мПоказателиРаскрытияАдресКопия);
	ФлагОшибки = Ложь; 
	
	
	АналитическийБланкУХСервер.ЗаписатьЗначениеВПоказатель(логИзмененныхПоказателей,мПоказателиРаскрытия,ЗначениеДляВставки,СтруктураРасшифровки,КэшАналитикПоказателей,ФлагОшибки,ЕдиницаИзмерения);	
			
КонецПроцедуры

&НаСервере 
Процедура  ПрименитьИзменения()
		
	логИзмененныхПоказателей    = ПолучитьИзВременногоХранилища(логИзмененныхПоказателейАдрес);      
	
	Если  ЗначениеЗаполнено(мПоказателиРаскрытияАдрес) Тогда
		мПоказателиРаскрытия 		= ПолучитьИзВременногоХранилища(мПоказателиРаскрытияАдрес);
		КэшАналитикПоказателей      = ПолучитьИзВременногоХранилища(КэшАналитикПоказателейАдрес); 
	Иначе
		мПоказателиРаскрытия 		= Неопределено;
		МассивПоказателей = Новый Массив;
		МассивПоказателей.Добавить(Показатель);
		КэшАналитикПоказателей = АналитическийБланкУХСервер.ПолучитьКэшАналитикПоказателей(МассивПоказателей);
	КонецЕсли;	
		
	мПоказателиРаскрытияЭталон 		= ПолучитьИзВременногоХранилища(АдресТзРаскрытия);
    мПоказателиРаскрытияТекущие 	= РеквизитФормывЗначение("РаскрытиеПоказателей");
			
	СтрокаВыбираемыхПолей   = "";
	СтрокаСоединяемыхПолей   = "";
	СтрокаВыбираемыхПолейИзмененные   = "";
	СтрокаВыбираемыхПолейДобавленные  = "";
	СтрокаВыбираемыхПолейГруппы       = "";
		
	Для Каждого Кол Из СписокКолонок Цикл	
		Если мПоказателиРаскрытияЭталон.Колонки.Найти(Кол.Представление) = Неопределено  Тогда
			Продолжить;
		КонецЕсли;
			
		Если Кол.Представление = "Значение" Тогда 
			
			СтрокаВыбираемыхПолейИзмененные = СтрокаВыбираемыхПолейИзмененные+"
			|ВЫБОР КОГДА мПоказателиРаскрытияТекущие.Значение IS NULL ТОГДА 0  ИНАЧЕ мПоказателиРаскрытияТекущие.Значение КОНЕЦ КАК Значение,";		
			СтрокаВыбираемыхПолейИзмененные = СтрокаВыбираемыхПолейИзмененные+"
			|ВЫБОР КОГДА мПоказателиРаскрытияЭталон.Значение IS NULL ТОГДА 0  ИНАЧЕ мПоказателиРаскрытияЭталон.Значение КОНЕЦ КАК ИсходноеЗначение,";		
			СтрокаВыбираемыхПолейИзмененные = СтрокаВыбираемыхПолейИзмененные+"
			|ВЫБОР КОГДА мПоказателиРаскрытияТекущие.Значение =  мПоказателиРаскрытияЭталон.Значение Тогда 0 Иначе 1 КОНЕЦ КАК Дельта,";				
			
			СтрокаВыбираемыхПолейДобавленные = СтрокаВыбираемыхПолейДобавленные+"
			|мПоказателиРаскрытияТекущие.Значение КАК Значение,";		
			СтрокаВыбираемыхПолейДобавленные = СтрокаВыбираемыхПолейДобавленные+"
			|ВЫБОР КОГДА мПоказателиРаскрытияЭталон.Значение IS NULL ТОГДА 0 ИНАЧЕ мПоказателиРаскрытияЭталон.Значение КОНЕЦ КАК ИсходноеЗначение,";
			СтрокаВыбираемыхПолейДобавленные = СтрокаВыбираемыхПолейДобавленные+"
			|ВЫБОР КОГДА мПоказателиРаскрытияТекущие.Значение =  мПоказателиРаскрытияЭталон.Значение Тогда 0 Иначе 1 КОНЕЦ КАК Дельта,";		
				
			СтрокаВыбираемыхПолей = СтрокаВыбираемыхПолей+"
			|мПоказателиРаскрытия.Значение,";
			
			Продолжить;
			
		ИначеЕсли Кол.Представление = "ЗначениеВалюта" Тогда	
			
			СтрокаВыбираемыхПолейИзмененные = СтрокаВыбираемыхПолейИзмененные+"
			|ВЫБОР КОГДА мПоказателиРаскрытияТекущие.ЗначениеВалюта IS NULL ТОГДА 0  ИНАЧЕ мПоказателиРаскрытияТекущие.ЗначениеВалюта КОНЕЦ КАК ЗначениеВалюта,";		
			СтрокаВыбираемыхПолейИзмененные = СтрокаВыбираемыхПолейИзмененные+"
			|ВЫБОР КОГДА мПоказателиРаскрытияЭталон.ЗначениеВалюта IS NULL ТОГДА 0  ИНАЧЕ мПоказателиРаскрытияЭталон.ЗначениеВалюта КОНЕЦ КАК ИсходноеЗначениеВалюта,";			
			СтрокаВыбираемыхПолейИзмененные = СтрокаВыбираемыхПолейИзмененные+"
			|ВЫБОР КОГДА мПоказателиРаскрытияТекущие.ЗначениеВалюта IS NULL ТОГДА мПоказателиРаскрытияЭталон.ЗначениеВалюта  ИНАЧЕ мПоказателиРаскрытияЭталон.ЗначениеВалюта - мПоказателиРаскрытияТекущие.ЗначениеВалюта КОНЕЦ КАК ДельтаВалюта,";
			
			СтрокаВыбираемыхПолейДобавленные = СтрокаВыбираемыхПолейДобавленные+"
			|мПоказателиРаскрытияТекущие.ЗначениеВалюта КАК ЗначениеВалюта,";		
			СтрокаВыбираемыхПолейДобавленные = СтрокаВыбираемыхПолейДобавленные+"
			|ВЫБОР КОГДА мПоказателиРаскрытияЭталон.ЗначениеВалюта IS NULL ТОГДА 0  ИНАЧЕ мПоказателиРаскрытияЭталон.ЗначениеВалюта КОНЕЦ КАК ИсходноеЗначениеВалюта,";	
			СтрокаВыбираемыхПолейДобавленные = СтрокаВыбираемыхПолейДобавленные+"
			|ВЫБОР КОГДА мПоказателиРаскрытияТекущие.ЗначениеВалюта =  мПоказателиРаскрытияЭталон.ЗначениеВалюта Тогда 0 Иначе 1 КОНЕЦ КАК ДельтаВалюта,";		
			
			СтрокаВыбираемыхПолей = СтрокаВыбираемыхПолей+"
			|мПоказателиРаскрытия.ЗначениеВалюта,";
			
			Продолжить;
			
		ИначеЕсли Кол.Представление = "ЗначениеНечисловое" ИЛИ Кол.Представление = "ПризнакИзменено" Тогда	
			Продолжить;			
		ИначеЕсли Кол.Значение = Неопределено   Тогда	
			СтрокаСоединяемыхПолей 				= СтрокаСоединяемыхПолей+" 
			|мПоказателиРаскрытияЭталон."+Кол.Представление+" = мПоказателиРаскрытияТекущие."+Кол.Представление+" И";		
		КонецЕсли;	
		
		СтрокаВыбираемыхПолейГруппы      	= СтрокаВыбираемыхПолейГруппы + "
		|мПоказателиРаскрытия."+Кол.Представление+",";
		СтрокаВыбираемыхПолей 				= СтрокаВыбираемыхПолей+"
		|мПоказателиРаскрытия."+Кол.Представление+",";	
		СтрокаВыбираемыхПолейИзмененные  = СтрокаВыбираемыхПолейИзмененные+"
		|мПоказателиРаскрытияЭталон."+Кол.Представление+",";
		СтрокаВыбираемыхПолейДобавленные = СтрокаВыбираемыхПолейДобавленные+"
		|мПоказателиРаскрытияТекущие."+Кол.Представление+",";		
				
	КонецЦикла;	
	
	СтрокаВыбираемыхПолей 					= Лев(СтрокаВыбираемыхПолей,СтрДлина(СтрокаВыбираемыхПолей)-1);
	СтрокаСоединяемыхПолей 					= Лев(СтрокаСоединяемыхПолей,СтрДлина(СтрокаСоединяемыхПолей)-1);
	СтрокаВыбираемыхПолейИзмененные 		= Лев(СтрокаВыбираемыхПолейИзмененные,СтрДлина(СтрокаВыбираемыхПолейИзмененные)-1);
    СтрокаВыбираемыхПолейДобавленные 		= Лев(СтрокаВыбираемыхПолейДобавленные,СтрДлина(СтрокаВыбираемыхПолейДобавленные)-1);
	СтрокаВыбираемыхПолейГруппы 			= Лев(СтрокаВыбираемыхПолейГруппы,СтрДлина(СтрокаВыбираемыхПолейГруппы)-1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
    | &СтрокаВыбираемыхПолей	
	| ПОМЕСТИТЬ мПоказателиРаскрытияЭталон 
	|ИЗ
	|	&мПоказателиРаскрытияЭталон КАК мПоказателиРаскрытия
	|; 
	|//////////////////////////////////////////////////
    |
	| ВЫБРАТЬ
	|  &СтрокаВыбираемыхПолей	
	|  ПОМЕСТИТЬ _мПоказателиРаскрытияТекущие
	|ИЗ
	|	&мПоказателиРаскрытияТекущие КАК мПоказателиРаскрытия
	|; 
	|//////////////////////////////////////////////////
	|
	| ВЫБРАТЬ
	|  СУММА(мПоказателиРаскрытия.Значение) КАК Значение,
	|  СУММА(мПоказателиРаскрытия.ЗначениеВалюта),
	|  &СтрокаПолейГруппы	
	|  ПОМЕСТИТЬ мПоказателиРаскрытияТекущие
	|ИЗ
	|	_мПоказателиРаскрытияТекущие КАК мПоказателиРаскрытия
	|СГРУППИРОВАТЬ ПО
	| &СтрокаПолейГруппы
	|; 
	|//////////////////////////////////////////////////	
	| ВЫБРАТЬ
	| &ЭталонныеПоля	
	|  ПОМЕСТИТЬ ИзмененныеИУдаленные
	|ИЗ
	|	мПоказателиРаскрытияЭталон КАК мПоказателиРаскрытияЭталон
	| ЛЕВОЕ СОЕДИНЕНИЕ мПоказателиРаскрытияТекущие КАК мПоказателиРаскрытияТекущие ПО
    | &СтрокаСоединяемыхПолей
	|; 
	|//////////////////////////////////////////////////	
	| ВЫБРАТЬ
	| &ТекущиеПоля	
	|  ПОМЕСТИТЬ Добавленные
	|ИЗ
	|	мПоказателиРаскрытияТекущие КАК мПоказателиРаскрытияТекущие
	| ЛЕВОЕ СОЕДИНЕНИЕ мПоказателиРаскрытияЭталон КАК мПоказателиРаскрытияЭталон ПО
    | &СтрокаСоединяемыхПолей
	| ГДЕ  мПоказателиРаскрытияЭталон.Значение IS NULL 
	|; 
	|//////////////////////////////////////////////////		
	| ВЫБРАТЬ
	| &ИсхСтрокаВыбираемыхПолей,	
	| ВЫРАЗИТЬ(мПоказателиРаскрытия.ПоказательОтчета КАК Справочник.ПоказателиОтчетов).ТипЗначения КАК ПоказательТипЗначения,
	| ВЫРАЗИТЬ(мПоказателиРаскрытия.ПоказательОтчета КАК Справочник.ПоказателиОтчетов).НормализованныйКод КАК ПоказательКод,
	| мПоказателиРаскрытия.ПоказательОтчета КАК ПоказательСсылка
	|  ПОМЕСТИТЬ мИзмененныеИУдаленные
	|ИЗ
	|	ИзмененныеИУдаленные КАК мПоказателиРаскрытия  ГДЕ мПоказателиРаскрытия.Дельта<>0 	
	|; 
	|//////////////////////////////////////////////////	
	| ВЫБРАТЬ
	| &ИсхСтрокаВыбираемыхПолей,
	| ВЫРАЗИТЬ(мПоказателиРаскрытия.ПоказательОтчета КАК Справочник.ПоказателиОтчетов).ТипЗначения КАК ПоказательТипЗначения,
	| ВЫРАЗИТЬ(мПоказателиРаскрытия.ПоказательОтчета КАК Справочник.ПоказателиОтчетов).НормализованныйКод КАК ПоказательКод,
	| мПоказателиРаскрытия.ПоказательОтчета КАК ПоказательСсылка
	|  ПОМЕСТИТЬ мДобавленные
	|ИЗ
	|	Добавленные КАК мПоказателиРаскрытия ГДЕ мПоказателиРаскрытия.Дельта<>0 	
	|; 
	|//////////////////////////////////////////////////		
	| ВЫБРАТЬ
	| &ИсхСтрокаВыбираемыхПолей,	
	| ВЫРАЗИТЬ(мПоказателиРаскрытия.ПоказательОтчета КАК Справочник.ПоказателиОтчетов).ТипЗначения КАК ПоказательТипЗначения,
	| ВЫРАЗИТЬ(мПоказателиРаскрытия.ПоказательОтчета КАК Справочник.ПоказателиОтчетов).НормализованныйКод КАК ПоказательКод,
	| мПоказателиРаскрытия.ПоказательОтчета КАК ПоказательСсылка
	|  ПОМЕСТИТЬ мИзмененныеИУдаленныеВалютные
	|ИЗ
	|	ИзмененныеИУдаленные КАК мПоказателиРаскрытия  ГДЕ  мПоказателиРаскрытия.ДельтаВалюта<>0
	|; 
	|//////////////////////////////////////////////////	
	| ВЫБРАТЬ
	| &ИсхСтрокаВыбираемыхПолей,
	| ВЫРАЗИТЬ(мПоказателиРаскрытия.ПоказательОтчета КАК Справочник.ПоказателиОтчетов).ТипЗначения КАК ПоказательТипЗначения,
	| ВЫРАЗИТЬ(мПоказателиРаскрытия.ПоказательОтчета КАК Справочник.ПоказателиОтчетов).НормализованныйКод КАК ПоказательКод,
	| мПоказателиРаскрытия.ПоказательОтчета КАК ПоказательСсылка
	|  ПОМЕСТИТЬ мДобавленныеВалютные
	|ИЗ
	|	Добавленные КАК мПоказателиРаскрытия ГДЕ  мПоказателиРаскрытия.ДельтаВалюта<>0	
	|";
	
	Запрос.УстановитьПараметр("мПоказателиРаскрытияЭталон",мПоказателиРаскрытияЭталон);
	Запрос.УстановитьПараметр("мПоказателиРаскрытияТекущие",мПоказателиРаскрытияТекущие);
	
	ИсхСтрокаВыбираемыхПолей = СтрокаВыбираемыхПолей+"
	|,мПоказателиРаскрытия.ИсходноеЗначение
	|,мПоказателиРаскрытия.ИсходноеЗначениеВалюта";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ИсхСтрокаВыбираемыхПолей",ИсхСтрокаВыбираемыхПолей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&СтрокаВыбираемыхПолей",СтрокаВыбираемыхПолей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&СтрокаСоединяемыхПолей",СтрокаСоединяемыхПолей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ЭталонныеПоля",СтрокаВыбираемыхПолейИзмененные);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ТекущиеПоля"	,СтрокаВыбираемыхПолейДобавленные);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&СтрокаПолейГруппы"	,СтрокаВыбираемыхПолейГруппы);
	
	Если НЕ ТипЗначениеПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"СУММА(мПоказателиРаскрытия.Значение) КАК Значение", "МАКСИМУМ(мПоказателиРаскрытия.Значение) КАК Значение");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"СУММА(мПоказателиРаскрытия.ЗначениеВалюта)", "0 КАК ЗначениеВалюта");
	КонецЕсли;	
	
	СхемаЗапроса 					= Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	ТекстЗапроса_Форматированный 	= СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.Текст 					= ТекстЗапроса_Форматированный;
	
	Результат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	РезультатИзмененные 		= Результат[5].Выгрузить();
	РезультатДобавленные 		= Результат[6].Выгрузить();
	РезультатИзмененные_Вал 	= Результат[7].Выгрузить();
	РезультатДобавленные_Вал 	= Результат[8].Выгрузить();
	
	Если РезультатИзмененные.Количество() +  РезультатДобавленные.Количество() + РезультатИзмененные_Вал.Количество() + РезультатДобавленные_Вал.Количество() = 0 Тогда
		 Возврат;
	КонецЕсли;	
		
	СтруктураРасшифровки = Новый Структура;
	СтруктураРасшифровки.Вставить("ПоказательКод");
	Для Каждого Стр Из СписокКолонок Цикл 
		Если НЕ РезультатИзмененные.Колонки.Найти(Стр.Представление) = Неопределено Тогда
			СтруктураРасшифровки.Вставить(Стр.Представление);
		КонецЕсли;			
	КонецЦикла;	
	
	СтруктураРасшифровки.Вставить("НеМасштабируется",Истина);
	
	ФлНезаблокированныхЯчеек = Ложь;
	Если ЗначениеЗАполнено(АдресСтруктураКлючевыхРеквизитов) Тогда
		СтруктураКлючевыхРеквизитов = ПолучитьИзВременногоХранилища(АдресСтруктураКлючевыхРеквизитов);
	Иначе	
		СтруктураКлючевыхРеквизитов = Неопределено;
	КонецЕсли;	
	
	Если РежимЗаписиВлог Тогда
		
		ТаблицаИзмененныхПоказателей 	= УправлениеРасчетомПоказателей.ПолучитьОписаниеТаблицыИзмененныхПоказателей();
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("КэшАналитикПоказателей",КэшАналитикПоказателей);
		СтруктураПараметров.Вставить("НомерТранзакции",НомерТранзакции);
		СтруктураПараметров.Вставить("ТаблицаИзмененныхПоказателей",ТаблицаИзмененныхПоказателей);
		СтруктураПараметров.Вставить("ФлОшибки",Ложь);
		
		ОбъектАБ            = Обработки.АналитическийБланк.Создать();
		
		Для Каждого иСтрока Из РезультатИзмененные Цикл		
			
			ЗаполнитьЗначенияСвойств(СтруктураРасшифровки,иСтрока);		
			СтруктураРасшифровки.Вставить("ПоказательСсылка",Показатель);
			
			СтруктураПараметров.Вставить("ЗначениеНовое",иСтрока.Значение);
            СтруктураПараметров.Вставить("ЗначениеСтарое",иСтрока.ИсходноеЗначение);
            СтруктураПараметров.Вставить("СтруктураРасшифровки",СтруктураРасшифровки);
		
			ОбъектАБ.ВставитьЗначениеПоказателяВЛог(СтруктураПараметров);
					
		КонецЦикла;
		
		Для Каждого иСтрока Из РезультатДобавленные Цикл		
			
			ЗаполнитьЗначенияСвойств(СтруктураРасшифровки,иСтрока);		
			СтруктураРасшифровки.Вставить("ПоказательСсылка",Показатель);
			
			СтруктураПараметров.Вставить("ЗначениеНовое",иСтрока.Значение);
            СтруктураПараметров.Вставить("ЗначениеСтарое",иСтрока.ИсходноеЗначение);
            СтруктураПараметров.Вставить("СтруктураРасшифровки",СтруктураРасшифровки);
           

			ОбъектАБ.ВставитьЗначениеПоказателяВЛог(СтруктураПараметров);

		КонецЦикла;
		
		Для Каждого иСтрока Из РезультатИзмененные_Вал Цикл		
			
			ЗаполнитьЗначенияСвойств(СтруктураРасшифровки,иСтрока);		
			СтруктураРасшифровки.Вставить("ПоказательСсылка",Показатель);
			СтруктураРасшифровки.Вставить("ВалютнаяСумма",Истина);

			СтруктураПараметров.Вставить("ЗначениеНовое",иСтрока.ЗначениеВалюта);
            СтруктураПараметров.Вставить("ЗначениеСтарое",иСтрока.ИсходноеЗначениеВалюта);
            СтруктураПараметров.Вставить("СтруктураРасшифровки",СтруктураРасшифровки);
           
			ОбъектАБ.ВставитьЗначениеПоказателяВЛог(СтруктураПараметров);

		КонецЦикла;
		
		Для Каждого иСтрока Из РезультатДобавленные_Вал Цикл		
			
			ЗаполнитьЗначенияСвойств(СтруктураРасшифровки,иСтрока);		
			СтруктураРасшифровки.Вставить("ПоказательСсылка",Показатель);
			СтруктураРасшифровки.Вставить("ВалютнаяСумма",Истина);
			
			СтруктураПараметров.Вставить("ЗначениеНовое",иСтрока.ЗначениеВалюта);
			СтруктураПараметров.Вставить("ЗначениеСтарое",иСтрока.ИсходноеЗначениеВалюта);
			СтруктураПараметров.Вставить("СтруктураРасшифровки",СтруктураРасшифровки);
			
			ОбъектАБ.ВставитьЗначениеПоказателяВЛог(СтруктураПараметров);
			
		КонецЦикла;			
		
		АдресТаблицыИзмененныхПоказателей   = ПоместитьВоВременноеХранилище(ТаблицаИзмененныхПоказателей,АдресФормыВладельца);

	Иначе	
		
		Для Каждого иСтрока Из РезультатИзмененные Цикл		
			ЗаполнитьЗначенияСвойств(СтруктураРасшифровки,иСтрока);		
			ФлагОшибки = Ложь; 
			АналитическийБланкУХСервер.ЗаписатьЗначениеВПоказатель(логИзмененныхПоказателей,мПоказателиРаскрытия,иСтрока.Значение,СтруктураРасшифровки,КэшАналитикПоказателей,ФлагОшибки,ЕдиницаИзмерения);		
		КонецЦикла;
		
		Для Каждого иСтрока Из РезультатДобавленные Цикл		
			ЗаполнитьЗначенияСвойств(СтруктураРасшифровки,иСтрока);		
			ФлагОшибки = Ложь; 		
			АналитическийБланкУХСервер.ЗаписатьЗначениеВПоказатель(логИзмененныхПоказателей,мПоказателиРаскрытия,иСтрока.Значение,СтруктураРасшифровки,КэшАналитикПоказателей,ФлагОшибки,ЕдиницаИзмерения);		
		КонецЦикла;
		
		Для Каждого иСтрока Из РезультатИзмененные_Вал Цикл		
			ЗаполнитьЗначенияСвойств(СтруктураРасшифровки,иСтрока);		
			СтруктураРасшифровки.Вставить("ВалютнаяСумма",Истина);
			ФлагОшибки = Ложь; 
			АналитическийБланкУХСервер.ЗаписатьЗначениеВПоказатель(логИзмененныхПоказателей,мПоказателиРаскрытия,иСтрока.ЗначениеВалюта,СтруктураРасшифровки,КэшАналитикПоказателей,ФлагОшибки,ЕдиницаИзмерения);		
		КонецЦикла;
		
		Для Каждого иСтрока Из РезультатДобавленные_Вал Цикл		
			ЗаполнитьЗначенияСвойств(СтруктураРасшифровки,иСтрока);		
			СтруктураРасшифровки.Вставить("ВалютнаяСумма",Истина);
			ФлагОшибки = Ложь; 
			АналитическийБланкУХСервер.ЗаписатьЗначениеВПоказатель(логИзмененныхПоказателей,мПоказателиРаскрытия,иСтрока.ЗначениеВалюта,СтруктураРасшифровки,КэшАналитикПоказателей,ФлагОшибки,ЕдиницаИзмерения);		
		КонецЦикла;
	КонецЕсли;
			
КонецПроцедуры	

&НаСервере 
Процедура ВставитьЗначениеПоказателяМассив(МассивИндексовСтрок)
				
	СтруктураРасшифровки = Новый Структура;
	логИзмененныхПоказателей    = ПолучитьИзВременногоХранилища(логИзмененныхПоказателейАдресКопия);
	КэшАналитикПоказателей      = ПолучитьИзВременногоХранилища(КэшАналитикПоказателейАдрес); 
	мПоказателиРаскрытия 		= ПолучитьИзВременногоХранилища(мПоказателиРаскрытияАдресКопия);
	
	Для Каждого удСтрока Из МассивИндексовСтрок Цикл
	ТекущиеДанные  = РаскрытиеПоказателей.Получить(удСтрока);
		Для Каждого Стр Из СписокКолонок Цикл 
			Если ТекущиеДанные.Свойство(Стр.Представление) Тогда
				СтруктураРасшифровки.Вставить(Стр.Представление,ТекущиеДанные[Стр.Представление]);
			Иначе	
				СтруктураРасшифровки.Вставить(Стр.Представление,Стр.Значение);
			КонецЕсли;		
		КонецЦикла;	
		ФлагОшибки = Ложь; 
		АналитическийБланкУХСервер.ЗаписатьЗначениеВПоказатель(логИзмененныхПоказателей,мПоказателиРаскрытия,0,СтруктураРасшифровки,КэшАналитикПоказателей,ФлагОшибки,ЕдиницаИзмерения);	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСтрок()
    
    Элементы.РаскрытиеПоказателей.ОтборСтрок = Неопределено;
		
	Для Каждого Эл Из Элементы.ГруппаБыстрыеОтборы.ПодчиненныеЭлементы Цикл
		Эл.Видимость =Ложь;
	КонецЦикла;	
	
	СтруктураОтбора = Новый Структура;
	
	Для Каждого СтОтбор Из СписокОтборов Цикл		
		ТекЗначение = СтОтбор.Значение;
		ТекЭлемент  = СтОтбор.Представление;	
		Если НЕ Элементы.Найти("Группа_БыстрыйОтбор_"+ТекЭлемент) = Неопределено Тогда	
			СтруктураОтбора.Вставить(ТекЭлемент, ТекЗначение);			
			Элементы["Группа_БыстрыйОтбор_"+ТекЭлемент].Видимость = Истина;
			ЭтаФорма["БыстрыйОтбор_"+ТекЭлемент] = ТекЗначение;					
		КонецЕсли;
	КонецЦикла;
	
	Элементы.РаскрытиеПоказателей.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
		
КонецПроцедуры


&НаСервере
Процедура ОтключитьОтборСервер()    
	
	СписокОтборов.Очистить();
	УстановитьОтборСтрок();		    
	
КонецПроцедуры

&НаКлиенте
Процедура РаскрытиеПоказателейПослеУдаления(Элемент)
	
	ЭтаФорма.Элементы["Значение"].ТекстПодвала = РаскрытиеПоказателей.Итог("Значение");		
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВалютныеСуммы(Команда)
	
	Элементы.РаскрытиеПоказателейОтобразитьВалютныеСуммы.Пометка = НЕ Элементы.РаскрытиеПоказателейОтобразитьВалютныеСуммы.Пометка;	
	Элементы.ЗначениеВалюта.Видимость = Элементы.РаскрытиеПоказателейОтобразитьВалютныеСуммы.Пометка;
		
КонецПроцедуры

&НаСервере
Процедура СоздатьОграничениеПоПериодам(тГоризонт)
	
	МассивЗнченийПараметров  = Новый ФиксированныйМассив(тГоризонт);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", МассивЗнченийПараметров);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.ПериодОтчета.ПараметрыВыбора = НовыеПараметры;	
		
КонецПроцедуры

&НаСервере
Процедура СоздатьОграничениеПоКлючевойАналитике(КолонкаИмя,КлючевыеРеквизиты)
	
	МассивПараметров         = Новый Массив;
	МассивПараметров.Добавить(КлючевыеРеквизиты[КолонкаИмя]);
	МассивЗнченийПараметров  = Новый ФиксированныйМассив(МассивПараметров);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", МассивЗнченийПараметров);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы[КолонкаИмя].ПараметрыВыбора = НовыеПараметры;	
	
КонецПроцедуры


&НаСервере
Процедура УстановитьСвязиПараметровВыбора(ТекСтрокаСвойств)
	
	СвязиПараметровВыбора = Новый Массив;
	// общая часть
	Для Каждого Связь Из ТекСтрокаСвойств.СвязьПоВладельцу Цикл	
		СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец","Элементы.РаскрытиеПоказателей.ТекущиеДанные."+Связь));		
	КонецЦикла;	
	
	ЭтаФорма.Элементы[ТекСтрокаСвойств.КодАналитики].СвязиПараметровВыбора=Новый ФиксированныйМассив(СвязиПараметровВыбора);

		
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПроекту(ТекСтрокаСвойств,СтруктураОтбираемыхАналитик)
	
	Если СтруктураОтбираемыхАналитик.Свойство("Проект") Тогда
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ПроектЭтапа", СтруктураОтбираемыхАналитик.Проект);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		
		НовыйПараметр1 = Новый ПараметрВыбора("Отбор.Проект", Ложь);
		НовыйМассив.Добавить(НовыйПараметр1);
		
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		
		ЭтаФорма.Элементы[ТекСтрокаСвойств.КодАналитики].ПараметрыВыбора=НовыеПараметры;
		
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоФильтру(ТекСтрокаСвойств)
		
	Запрос = Новый Запрос;
	Запрос.Текст =  ТекСтрокаСвойств.ОтборЗначений;
	
	Для Каждого Стр Из ТекСтрокаСвойств.ПараметрыОтбораЗначений Цикл		
		Запрос.УстановитьПараметр(Стр.ИмяОтбора,Стр.ЗначениеОтбора);		
	КонецЦикла;	
	
	ЗначениеЗапроса =  Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", ЗначениеЗапроса);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	ЭтаФорма.Элементы[ТекСтрокаСвойств.КодАналитики].ПараметрыВыбора=НовыеПараметры;
	
КонецПроцедуры

&НаКлиенте
Процедура Редактирование(Команда)
	
	ТекПометка=Элементы.Редактирование.Пометка;
	Элементы.Редактирование.Доступность = Ложь;
	
	Если НЕ ТекПометка Тогда	
		Оповестить("ПеревестиВРежимРедактирования");
		ЭтаФорма.Заголовок = СтрЗаменить(ЭтаФорма.Заголовок, Нстр("ru = '(только просмотр)'"), "");	
	Иначе	
		ПрименитьИзменения();
		СтруктураОтвета = Новый Структура("мПоказателиРаскрытияАдрес,логИзмененныхПоказателейАдрес",мПоказателиРаскрытияАдрес,логИзмененныхПоказателейАдрес);
		Оповестить("ИзменилисьПоказатели",СтруктураОтвета);
		
		СтрокаШаблона = Нстр("ru = '%1 (только просмотр)'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда				
			ЭтаФорма.Заголовок = СтрШаблон(СтрокаШаблона, ЭтаФорма.Заголовок);
		КонецЕсли;
		
		Оповестить("ПеревестиВРежимРедактирования");
	КонецЕсли;
	
	Элементы.Редактирование.Пометка=НЕ ТекПометка;
	Элементы.РаскрытиеПоказателей.ТолькоПросмотр=НЕ Элементы.Редактирование.Пометка;
	Элементы.ФормаКнопкаОК.Доступность = Элементы.Редактирование.Пометка;
	Элементы.ФормаКнопкаПрименить.Доступность = Элементы.Редактирование.Пометка;
		
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
		
	Если Элементы.РаскрытиеПоказателей.ТекущийЭлемент.Имя = "Значение" И НЕ Элементы.РаскрытиеПоказателей.ТекущиеДанные = Неопределено Тогда	 
		СтруктураРасшифровки = 	Новый Структура;
		
		Для Каждого Кол Из СписокКолонок Цикл	 
			Если Элементы.РаскрытиеПоказателей.ТекущиеДанные.Свойство(Кол.Представление) Тогда
				СтруктураРасшифровки.Вставить(Кол.Представление,Элементы.РаскрытиеПоказателей.ТекущиеДанные[Кол.Представление]); 
			Иначе	  
				СтруктураРасшифровки.Вставить(Кол.Представление,Кол.Значение); 
			КонецЕсли;	 	 
		КонецЦикла;	 	 
		
		СтруктураПараметровДляВызоваРасшифровки = РасшифроватьОперандНаСервере(СтруктураРасшифровки,Элементы.РаскрытиеПоказателей.ТекущиеДанные.Значение);	
		Если СтруктураПараметровДляВызоваРасшифровки = Неопределено Тогда
			Возврат;
		КонецЕсли;		
		СтруктураПараметровДляВызоваРасшифровки.Вставить("ВсегдаПоказыватьБланкРасшифровки",Истина);
		Если НЕ СтруктураПараметровДляВызоваРасшифровки = Неопределено  Тогда
			ОткрытьФорму("Обработка.РасшифровкаРассчитанныхЗначений.Форма", 
			СтруктураПараметровДляВызоваРасшифровки,ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		КонецЕсли;
		
	КонецЕсли;	 
		
КонецПроцедуры

&НаСервере
Функция РасшифроватьОперандНаСервере(СтруктураРасшифровки,Значение)
	
	СтруктураПараметровДляВызоваРасшифровки = ПолучитьПараметрыРасшифровкиОперанда(СтруктураРасшифровки,Значение);
	
	Если НЕ СтруктураПараметровДляВызоваРасшифровки = Неопределено Тогда
		
		СтруктураПараметровДляВызоваРасшифровки.ОбъектРасчета.Вставить("ЕдиницаИзмеренияОтображения",	ЕдиницаИзмерения); 			
		СтруктураПараметровДляВызоваРасшифровки.ОбъектРасчета.Вставить("УровеньТочности",				УровеньТочности);
		СтруктураПараметровДляВызоваРасшифровки.ОбъектРасчета.Вставить("ИдентификаторСеанса",""+ЭтаФорма.УникальныйИдентификатор);
		
		СтруктураПараметровДляВызоваРасшифровки.Вставить("АдресХранилищаПеременныхДляРасчета", ПоместитьВоВременноеХранилище(СтруктураПараметровДляВызоваРасшифровки.ОбъектРасчета,ЭтаФорма.УникальныйИдентификатор));
		СтруктураПараметровДляВызоваРасшифровки.Удалить("ОбъектРасчета");
		
		Возврат СтруктураПараметровДляВызоваРасшифровки;
		
	КонецЕсли;		
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыРасшифровкиОперанда(Расшифровка,ЗначениеПоказателя) Экспорт
	
		
	ОбработкаОбъект = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
	ОбработкаОбъект.ВидОтчета 			= Расшифровка.ПоказательОтчета.Владелец;
	ОбработкаОбъект.ВалютаОтображения 	= Расшифровка.Валюта;
	оТаблицаИзмененныхПоказателей = ОбработкаОбъект.ТаблицаИзмененныхПоказателей.Выгрузить();
	оТаблицаИзмененныхПоказателей.Колонки.Добавить("ID");
	ФлагОшибки = Ложь;
	
	КэшАналитикПоказателей  = ПолучитьИзВременногоХранилища(КэшАналитикПоказателейАдрес);
	
	АналитическийБланкУХСервер.ЗаписатьЗначениеВПоказатель(оТаблицаИзмененныхПоказателей,,ЗначениеПоказателя,Расшифровка,КэшАналитикПоказателей,ФлагОшибки,Объект.ЕдиницаИзмерения);
	
	ОбработкаОбъект.ТаблицаИзмененныхПоказателей.Загрузить(оТаблицаИзмененныхПоказателей);
	ОбработкаОбъект.ПравилоОбработки	= ПравилоОбработки;
	ОбработкаОбъект.ИспользуемаяИБ		= ВИБ;
	
	Если НЕ ФлагОшибки Тогда
		 Возврат ОбработкаОбъект.ПолучитьСтруктуруПараметровДляРасшифровки();
	Иначе	 
		 Возврат Неопределено;
	КонецЕсли;	
			
КонецФункции	

&НаСервере
Функция ПровериьЗаполнениеОбязательных()
		
	тСвойствАналитик 			= ПолучитьИзВременногоХранилища(АдрестСвойствАналитик);

	Если РаскрытиеПоказателей.Количество() = 0 Тогда
		 Возврат Истина;
	КонецЕсли;	
	
	Если РаскрытиеПоказателей[0].Свойство("ПериодОтчета") Тогда
		ПустыеСтроки = РаскрытиеПоказателей.НайтиСтроки(Новый Структура("ПериодОтчета",Справочники.Периоды.ПустаяСсылка()));
		Если ПустыеСтроки.Количество()>0 Тогда		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнена обязательная аналитика период'"),,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РаскрытиеПоказателей", РаскрытиеПоказателей.Индекс(ПустыеСтроки[0])+1,"ПериодОтчета"));		
			Возврат Ложь;		
		КонецЕсли;	
	КонецЕсли;	
		
	Для Каждого Аналитика Из тСвойствАналитик Цикл
		Если Аналитика.ОбязательноеЗАполнение Тогда	
			ПустыеСтроки = РаскрытиеПоказателей.НайтиСтроки(Новый Структура(Аналитика.КодАналитики,Аналитика.ТипАналитики.ПривестиЗначение()));
			Если ПустыеСтроки.Количество()>0 Тогда		
				ТекАналитика = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.НайтиПоКоду(Аналитика.КодАналитики);
				
				ТекстСообщения = НСтр("ru = 'Не заполнена обязательная аналитика %Аналитика%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Аналитика%", Строка(ТекАналитика.Наименование));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , 
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РаскрытиеПоказателей", РаскрытиеПоказателей.Индекс(ПустыеСтроки[0])+1, Аналитика.КодАналитики));		
				Возврат Ложь;		
			КонецЕсли;		
		КонецЕсли;		
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции	

&НаСервере
Функция ПроверитьВозможностьРедактированияТекущегоСреза(СтруктураРасшифровки,СтруктураКлючевыхРеквизитов) 
	
	Если СтруктураКлючевыхРеквизитов = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Если СтруктураРасшифровки.Свойство("ПериодОтчета") Тогда			
		Если  СтруктураКлючевыхРеквизитов.ВложенныеПериоды.Найти(СтруктураРасшифровки.ПериодОтчета) = Неопределено Тогда				
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;	
	Если СтруктураРасшифровки.Свойство("Сценарий") И СтруктураРасшифровки.Сценарий<>СтруктураКлючевыхРеквизитов.Сценарий Тогда
		Возврат Ложь;
	КонецЕсли;	
	Если СтруктураРасшифровки.Свойство("Организация") И СтруктураРасшифровки.Организация<>СтруктураКлючевыхРеквизитов.Организация Тогда
		Возврат Ложь;
	КонецЕсли;	
	Если СтруктураРасшифровки.Свойство("Проект") И СтруктураРасшифровки.Проект<>СтруктураКлючевыхРеквизитов.Проект Тогда
		Возврат Ложь;
	КонецЕсли;	
	Если СтруктураРасшифровки.Свойство("ВидОтчетаКод") И СтруктураРасшифровки.ВидОтчетаКод<>СтруктураКлючевыхРеквизитов.ВидОтчета Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Если СтруктураРасшифровки.Свойство("ПоказательОтчета") Тогда		
		Если  НЕ СтруктураКлючевыхРеквизитов.ЗаблокированныеПоказатели.Найти(СтруктураРасшифровки.ПоказательОтчета) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;	 		 
	КонецЕсли;		
	
	Возврат Истина;
	
КонецФункции	




