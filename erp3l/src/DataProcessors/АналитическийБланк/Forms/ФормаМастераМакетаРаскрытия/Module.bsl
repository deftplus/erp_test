
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТипМакета 			= Параметры.ТипОбласти;	
	ТабДокОбластиАдрес 	= Параметры.ТабДокОбластиАдрес;
	ТабДокОбласти		= ПолучитьИзВременногоХранилища(Параметры.ТабДокОбластиАдрес);
	
	Если ТипМакета = "Строки" Тогда
		МаксРазмерОбласти = ТабДокОбласти.ВысотаТаблицы;		
		Элементы.КоличествоСтрокМакета.Заголовок = Нстр("ru = 'Количество строк в области раскрытия'");
		ЭтаФорма.Заголовок = Нстр("ru = 'Помощник генерации макетов раскрытий строк'");	
	Иначе	
		МаксРазмерОбласти = ТабДокОбласти.ШиринаТаблицы;
		Элементы.КоличествоСтрокМакета.Заголовок = Нстр("ru = 'Количество колонок в области раскрытия'");
		ЭтаФорма.Заголовок = Нстр("ru = 'Помощник генерации макетов раскрытий колонок'");
	КонецЕсли;
	
	КоличествоСтрокМакета = 1;
	НачалоОбластиЗаголовка = 1;
	
	Элементы.КоличествоСтрокМакета.МинимальноеЗначение 	=1;
	Элементы.КоличествоСтрокМакета.МаксимальноеЗначение =МаксРазмерОбласти;	
	Элементы.НачалоОбластиЗаголовка.МинимальноеЗначение 	=1;
	Элементы.НачалоОбластиЗаголовка.МаксимальноеЗначение =?(ТипМакета = "Строки",ТабДокОбласти.ШиринаТаблицы,ТабДокОбласти.ВысотаТаблицы);	
	Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы["РазделСвойстваМакета"];
	
	ТзДоступныеАналитикиАдрес   = Параметры.ТзДоступныхАналитикАдрес;
	
	РазбитьОбластьНаГРуппировки();
	
	нСтр 							= ДеревоСтруктуры.ПолучитьЭлементы().Добавить();
	нСтр.АналитикаПредставление     = Нстр("ru = 'Структура аналитик макета'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьОформлениеКнопок("РазделСвойстваМакета");
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КоличествоСтрокМакетаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если (КоличествоСтрокМакета=1 И  Направление = -1) ИЛИ (КоличествоСтрокМакета=МаксРазмерОбласти И  Направление = 1) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;	
	
	РазбитьОбластьНаГРуппировки();
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	Закрыть(ПодготовитьСтруктуруПараметров());
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаВперед(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	ОбновитьДоступныеОтборыИСортировки();	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ТекущаяСтраница = Элементы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	
	Если Итератор>0 Тогда	 
		Если ТекущаяСтраница = "РазделСвойстваМакета" Тогда	
			СледующаяСтраница = "РазделСтруктура";	
		ИначеЕсли ТекущаяСтраница = "РазделСтруктура" Тогда	
			СледующаяСтраница = "РазделОтборы";	
		ИначеЕсли ТекущаяСтраница = "РазделОтборы" Тогда		
			СледующаяСтраница = "РазделСортировка";
		ИначеЕсли ТекущаяСтраница = "РазделСортировка" Тогда		
			СледующаяСтраница = "РазделМакет";			
		ИначеЕсли ТекущаяСтраница = "РазделМакет" Тогда		
			СледующаяСтраница = ТекущаяСтраница;		
		КонецЕсли;		
	Иначе		
		Если ТекущаяСтраница = "РазделСвойстваМакета" Тогда	
			СледующаяСтраница = ТекущаяСтраница;
		ИначеЕсли ТекущаяСтраница = "РазделСтруктура" Тогда	
			СледующаяСтраница = "РазделСвойстваМакета";	
		ИначеЕсли ТекущаяСтраница = "РазделОтборы" Тогда		
			СледующаяСтраница = "РазделСтруктура";	
		ИначеЕсли ТекущаяСтраница = "РазделСортировка" Тогда		
			СледующаяСтраница = "РазделОтборы";			
		ИначеЕсли ТекущаяСтраница = "РазделМакет" Тогда		
			СледующаяСтраница = "РазделСортировка";			
		КонецЕсли;		
	КонецЕсли;	
	
	Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы[СледующаяСтраница];	
	
	УстановитьОформлениеКнопок(СледующаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтруктурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗАполнено(Элемент.ТекущиеДанные.СтруктураАналитикСтрока) Тогда
		 Возврат;
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДоступныеАналитикиСтрока"	,ТзДоступныеАналитикиАдрес);
	СтруктураПараметров.Вставить("ТекущиеАналитикиГруппы"	,Элемент.ТекущиеДанные.СтруктураАналитикСтрока);
	СтруктураПараметров.Вставить("РедактироватьСостав"		,Истина);
	
	
	Оповещение = Новый ОписаниеОповещения("ФормаРедактированияСоставаГруппировкиЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.АналитическийБланк.Форма.ФормаРедактированияСоставаГруппировки",СтруктураПараметров,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтруктурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДоступныеАналитикиСтрока",ТзДоступныеАналитикиАдрес);
	
	Оповещение = Новый ОписаниеОповещения("ФормаВыбораРеквизитовЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.АналитическийБланк.Форма.ФормаВыбораРеквизитов",СтруктураПараметров,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Сгруппировать(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДоступныеАналитикиСтрока",ТзДоступныеАналитикиАдрес);
	
	Оповещение = Новый ОписаниеОповещения("ФормаГруппировкаРеквизитовЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.АналитическийБланк.Форма.ФормаВыбораРеквизитов",СтруктураПараметров,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура КоличествоСтрокМакетаПриИзменении(Элемент)
	
	РазбитьОбластьНаГРуппировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтруктурыПриИзменении(Элемент)
	
	Элементы.КомандаВперед.Доступность =ДеревоСтруктуры.ПолучитьЭлементы()[0].ПолучитьЭлементы().Количество()>0;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоменятьГруппировкиМестами(Команда)
	
	ЗаменяемыйЭлемент1 							= ДеревоСтруктуры.НайтиПоИдентификатору(Элементы.ДеревоСтруктуры.ВыделенныеСтроки[0]); 	  
	Аналитика1         							= ЗаменяемыйЭлемент1.АналитикаПредставление;
	АналитикаСтруктура1         				= ЗаменяемыйЭлемент1.СтруктураАналитикСтрока;
	
	ЗаменяемыйЭлемент2 							= ДеревоСтруктуры.НайтиПоИдентификатору(Элементы.ДеревоСтруктуры.ВыделенныеСтроки[1]);	
	Аналитика2         							= ЗаменяемыйЭлемент2.АналитикаПредставление;
	АналитикаСтруктура2         				= ЗаменяемыйЭлемент2.СтруктураАналитикСтрока;
	
	ЗаменяемыйЭлемент1.АналитикаПредставление  	=  Аналитика2;
	ЗаменяемыйЭлемент1.СтруктураАналитикСтрока 	=  АналитикаСтруктура2;
	
	ЗаменяемыйЭлемент2.АналитикаПредставление  	=  Аналитика1;
	ЗаменяемыйЭлемент2.СтруктураАналитикСтрока 	=  АналитикаСтруктура1;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтруктурыПриАктивизацииСтроки(Элемент)
		
	Элементы.ДеревоСтруктурыПоменятьГруппировки.Доступность =  Элемент.ВыделенныеСтроки.Количество()=2;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОтбораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	АналитическийБланкУХКлиент.ПараметрыОтбораВыбор(Элементы,Элемент,СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтруктурыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
		
	СтрокаПриемник = ДеревоСтруктуры.НайтиПоИдентификатору(Строка);
	СтрокаИсточник = ДеревоСтруктуры.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	
	Если СтрокаИсточник.АналитикаПредставление = Нстр("ru = 'Структура аналитик макета'") Тогда
	     Возврат;
	КонецЕсли;
	
	РодительИсточника = СтрокаИсточник.ПолучитьРодителя().ПолучитьИдентификатор(); 
		
	Если РодительИсточника = Строка Тогда
		 Возврат;
	Иначе		
		
		нСтрока =  СтрокаПриемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(нСтрока,СтрокаИсточник);
		
		Элементы.ДеревоСтруктуры.Развернуть(СтрокаПриемник.ПолучитьИдентификатор(),Истина);
		
		ПеренестиВложенныеЭлементыРекурсивно(нСтрока,СтрокаИсточник);
		
		СтрокаИсточник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(СтрокаИсточник);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтруктурыПередУдалением(Элемент, Отказ)
	
	 Если Элемент.ТекущиеДанные.АналитикаПредставление = Нстр("ru = 'Структура аналитик макета'") Тогда
	     Отказ = Истина;
	 КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОтбораОтборПредставлениеПриИзменении(Элемент)
	
	АналитическийБланкУХКлиент.ПараметрыОтбораОтборПриИзменении(Элемент,Элементы);

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОтбораОтборПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	АналитическийБланкУХКлиент.ЗаполнитьСписокТиповОтбора(Элементы.ПараметрыОтбораОтбор.СписокВыбора,Элемент.СписокВыбора,Элементы.ПараметрыОтбора.ТекущиеДанные,Ложь,ПоддерживаетИерархию(Элементы.ПараметрыОтбора.ТекущиеДанные.ТипЗначенияСтрока));

КонецПроцедуры


#КонецОбласти


&НаСервере
Процедура РазбитьОбластьНаГРуппировки()
	
	ТабДокОбласти		= ПолучитьИзВременногоХранилища(ТабДокОбластиАдрес);
	ТабДокОбразец.Очистить();
	ТабДокОбразец.Вывести(ТабДокОбласти);
	
	Если ТипМакета = "Строки" Тогда
	ИндСчетчика = 1;
	ПоследняяКоординатаОбласти = ТабДокОбразец.ВысотаТаблицы; 
	Иначе	
	ИндСчетчика = 1;
	ПоследняяКоординатаОбласти = ТабДокОбразец.ШиринаТаблицы; 	
	КонецЕсли;
	
	Пока ИндСчетчика<=ПоследняяКоординатаОбласти Цикл	
		РазмечаемаяОбласть = ?(ТипМакета = "Строки",ТабДокОбразец.Область(ИндСчетчика,0,ИндСчетчика+КоличествоСтрокМакета-1,0),ТабДокОбразец.Область(0,ИндСчетчика,0,ИндСчетчика+КоличествоСтрокМакета-1));
		РазмечаемаяОбласть.Имя = "ОбластьГруппы_"+СтрЗаменить(Новый УникальныйИдентификатор,"-","");
		ИндСчетчика = ИндСчетчика+КоличествоСтрокМакета;	
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьОформлениеКнопок(ТекущаяСтраница);
	
	Если ТекущаяСтраница = "РазделСвойстваМакета" Тогда	
		Элементы.ФормаСформировать.Доступность = Ложь;
		Элементы.КомандаНазад.Доступность =Ложь;
		Элементы.КомандаВперед.Доступность =Истина;
        Элементы.КомандаВперед.КнопкаПоУмолчанию =Истина;	
	ИначеЕсли ТекущаяСтраница = "РазделМакет" Тогда		
		Элементы.ФормаСформировать.Доступность = Истина;
		Элементы.КомандаНазад.Доступность =Истина;
		Элементы.КомандаВперед.Доступность =Ложь;
        Элементы.ФормаСформировать.КнопкаПоУмолчанию = Истина;	
	ИначеЕсли ТекущаяСтраница = "РазделСтруктура" Тогда		
		Элементы.КомандаВперед.Доступность =ДеревоСтруктуры.ПолучитьЭлементы()[0].ПолучитьЭлементы().Количество()>0;		
		Элементы.КомандаНазад.Доступность =Истина;
        Элементы.КомандаВперед.КнопкаПоУмолчанию =Истина;
	Иначе		
		Элементы.ФормаСформировать.Доступность = Ложь;
		Элементы.КомандаНазад.Доступность =Истина;
		Элементы.КомандаВперед.Доступность =Истина;
		Элементы.КомандаВперед.КнопкаПоУмолчанию =Истина;	
	КонецЕсли;	
		
КонецПроцедуры	

&НаКлиенте
Процедура ФормаРедактированияСоставаГруппировкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	ТекЭлДерева = ДеревоСтруктуры.НайтиПоИдентификатору(Элементы.ДеревоСтруктуры.ТекущаяСтрока);
	ТекЭлДерева.АналитикаПредставление 		             = ПолучитьПредставлениеГруппировки(Результат.СтруктураАналитикСтрока);
	ТекЭлДерева.СтруктураАналитикСтрока					 = Результат.СтруктураАналитикСтрока;		
	
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаВыбораРеквизитовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
			
	Если Элементы.ДеревоСтруктуры.ТекущиеДанные = Неопределено Тогда	
		 НэлДерева = ДеревоСтруктуры.ПолучитьЭлементы().Добавить();
		 НэлДерева.АналитикаПредставление 		 			 = Результат.ПолеПредставление;
		 НэлДерева.СтруктураАналитикСтрока					 = Результат.СтруктураАналитикСтрока;	 
		 
	 Иначе	
		 ТекЭлДерева = ДеревоСтруктуры.НайтиПоИдентификатору(Элементы.ДеревоСтруктуры.ТекущаяСтрока);
		 НэлДерева   = ТекЭлДерева.ПолучитьЭлементы().Добавить();
		 НэлДерева.АналитикаПредставление 		             = Результат.ПолеПредставление;
		 НэлДерева.СтруктураАналитикСтрока					 = Результат.СтруктураАналитикСтрока;		
		 Элементы.ДеревоСтруктуры.ТекущаяСтрока 			 = НэлДерева.ПолучитьИдентификатор();
		 
		 Элементы.ДеревоСтруктуры.Развернуть(ТекЭлДерева.ПолучитьИдентификатор(),Истина);
		 	 
	 КонецЕсли;	
	
	Элементы.КомандаВперед.Доступность =ДеревоСтруктуры.ПолучитьЭлементы()[0].ПолучитьЭлементы().Количество()>0;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаГруппировкаРеквизитовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
			
	Если Элементы.ДеревоСтруктуры.ТекущиеДанные = Неопределено Тогда		
		НэлДерева = ДеревоСтруктуры.ПолучитьЭлементы().Добавить();
		НэлДерева.АналитикаПредставление 		 = Результат.ПолеПредставление;
		НэлДерева.АналитикаКод					 = Результат.Поле;		
	Иначе	
		ТекЭлДерева = ДеревоСтруктуры.НайтиПоИдентификатору(Элементы.ДеревоСтруктуры.ТекущаяСтрока);
		ТекРодитель   = ТекЭлДерева.ПолучитьРодителя();
		Если ТекРодитель = Неопределено Тогда	 
			НэлДерева = ДеревоСтруктуры.ПолучитьЭлементы().Добавить();
			НэлДерева.АналитикаПредставление 		 = Результат.ПолеПредставление;	 		
			ПереносимыйЭлемент = НэлДерева.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(ПереносимыйЭлемент,ТекЭлДерева);		
			
			ПеренестиЭлементыРекурсивно(ТекЭлДерева,ПереносимыйЭлемент);
			
			ДеревоСтруктуры.ПолучитьЭлементы().Удалить(ТекЭлДерева);		
		Иначе	 			
			НэлДерева = ТекРодитель.ПолучитьЭлементы().Добавить();
			НэлДерева.АналитикаПредставление 		 = Результат.ПолеПредставление;		 			
			ПереносимыйЭлемент = НэлДерева.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(ПереносимыйЭлемент,ТекЭлДерева);		
			ТекРодитель.ПолучитьЭлементы().Удалить(ТекЭлДерева);			
		КонецЕсли;	 
		
		НэлДерева.АналитикаПредставление 		 = Результат.ПолеПредставление;
	
	КонецЕсли;	
	
	Элементы.ДеревоСтруктуры.Развернуть(НэлДерева.ПолучитьИдентификатор(),Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЭлементыРекурсивно(ТекЭлДерева,НэлДерева)

	 Для Каждого Стр Из ТекЭлДерева.ПолучитьЭлементы() Цикл	 
		 НСтр = НэлДерева.ПолучитьЭлементы().Добавить();
		 ЗаполнитьЗначенияСвойств(НСтр,Стр);
		 ПеренестиЭлементыРекурсивно(Стр,НСтр);
	 Конеццикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступныеОтборыИСортировки();
	
	ТзДоступныеАналитики 			= ЗначениеИзСтрокиВнутр(ТзДоступныеАналитикиАдрес);
	ВыбранныеАналитики              = Новый Структура;
	ПолучитьПоляГруппировокРекурсивно(ТзДоступныеАналитики,ДеревоСтруктуры.ПолучитьЭлементы(),ВыбранныеАналитики);
	
	МассивУдаляемыхОтборов = Новый Массив;
	Для Каждого СтрОтбор Из ПараметрыОтбора Цикл
		Если НЕ ВыбранныеАналитики.Свойство(СтрОтбор.ПолеКод) Тогда	
			 МассивУдаляемыхОтборов.Добавить(СтрОтбор);
		КонецЕсли;	
	КонецЦикла;	
	Для Каждого СтрОтбор Из МассивУдаляемыхОтборов Цикл
		ПараметрыОтбора.Удалить(СтрОтбор);
	КонецЦикла;	
	
	ИнициализироватьПоляСкд(ВыбранныеАналитики);
	
КонецПроцедуры

&НаСервере
Процедура  ПолучитьПоляГруппировокРекурсивно(ТзДоступныеАналитики,ТекущийУровень,ВыбранныеАналитики)
	
	Для Каждого Стр Из ТекущийУровень Цикл	
		
		Если Стр.АналитикаПредставление = Нстр("ru = 'Структура аналитик макета'; en = 'Template dimension structure'") Тогда
			 ПолучитьПоляГруппировокРекурсивно(ТзДоступныеАналитики,Стр.ПолучитьЭлементы(),ВыбранныеАналитики);
             Продолжить;
		КонецЕсли;	
		
		ВыбранныеАналитикиУровня =  ЗначениеИзСтрокиВнутр(Стр.СтруктураАналитикСтрока);
		Для Каждого ПолеАналитики Из ВыбранныеАналитикиУровня Цикл
			
			ВыбранныеАналитики.Вставить(ПолеАналитики.Ключ);
			
			Если ПолеАналитики.Ключ = "ПериодОтчета" Тогда 
				Если ПараметрыОтбора.НайтиСтроки(Новый Структура("ПолеКод","ПериодС")).Количество() = 1 Тогда	
					ВыбранныеАналитики.Вставить("ПериодС");
					ВыбранныеАналитики.Вставить("ПериодПо");
					Продолжить;
				КонецЕсли;
			Иначе	
				Если ПараметрыОтбора.НайтиСтроки(Новый Структура("ПолеКод",ПолеАналитики.Ключ)).Количество() = 1 Тогда	
					Продолжить;
				КонецЕсли;	
			КонецЕсли;
			
			нДоступныйЭлементы = ТзДоступныеАналитики.НайтиСтроки(Новый Структура("АналитикаКод",ПолеАналитики.Ключ));
			Если нДоступныйЭлементы.Количество() = 1 Тогда
				НовыйОтбор = ПараметрыОтбора.Добавить();
				НовыйОтбор.Использовать = Истина;
				НовыйОтбор.Поле 				= нДоступныйЭлементы[0].АналитикаПредставление;
				НовыйОтбор.ПолеКод 				= нДоступныйЭлементы[0].АналитикаКод;
				ТекСубконто =  ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.НайтиПоКоду(НовыйОтбор.ПолеКод);
				Если ЗначениеЗаполнено(ТекСубконто) Тогда
					НовыйОтбор.ПолеСсылка  = ТекСубконто;
				КонецЕсли;		
				НовыйОтбор.ТипЗначенияСтрока    = нДоступныйЭлементы[0].АналитикаТипСтрока;
				Если НовыйОтбор.ПолеКод = "Организация" Тогда
					НовыйОтбор.Отбор =  "Организация отчета";	
					НовыйОтбор.ПорядокОтбора = 4;
				ИначеЕсли НовыйОтбор.ПолеКод 	=	"Проект" Тогда
					НовыйОтбор.Отбор =  			"Проект отчета";
					НовыйОтбор.ПорядокОтбора = 5;
				ИначеЕсли НовыйОтбор.ПолеКод = 	"Сценарий" Тогда
					НовыйОтбор.Отбор =  		"Сценарий отчета";
					НовыйОтбор.ПорядокОтбора = 3;
				ИначеЕсли НовыйОтбор.ПолеКод = "ПериодОтчета" Тогда
					НовыйОтбор.ПолеКод = "ПериодС";
					НовыйОтбор.Отбор   = "Период начала отчета";
					НовыйОтбор.Поле    = "Период начала отбора";
					НовыйОтбор.ПорядокОтбора = 1;
					НовыйОтбор.ОтборПредставление 	= НовыйОтбор.Отбор;
					НовыйОтбор.ПолеПредставление 	= НовыйОтбор.Поле;	
					НовыйОтбор = ПараметрыОтбора.Добавить();
					НовыйОтбор.Использовать = Истина;
					НовыйОтбор.Поле 				= нДоступныйЭлементы[0].АналитикаПредставление;
					НовыйОтбор.ПолеКод 				= "ПериодПо";
					НовыйОтбор.Поле 				= "Период окончания отбора";
					НовыйОтбор.ТипЗначенияСтрока    = нДоступныйЭлементы[0].АналитикаТипСтрока;
					НовыйОтбор.Отбор 		= "Период окончания отчета";
					ВыбранныеАналитики.Вставить("ПериодС");
					ВыбранныеАналитики.Вставить("ПериодПо");	
					НовыйОтбор.ПорядокОтбора = 2;
				Иначе	
					НовыйОтбор.Отбор =  "Отбор не производится";
					НовыйОтбор.ПорядокОтбора = 99;
				КонецЕсли;	
				
				НовыйОтбор.ОтборПредставление 	= АналитическийБланкГенерацияМакетаУХСервер.ПолучитьПредставлениеОтбора(НовыйОтбор.Отбор);
				НовыйОтбор.ПолеПредставление 	= АналитическийБланкГенерацияМакетаУХСервер.ПолучитьПредставлениеПоля(НовыйОтбор.Поле);
				
			КонецЕсли;			
		КонецЦикла;
		
		ПолучитьПоляГруппировокРекурсивно(ТзДоступныеАналитики,Стр.ПолучитьЭлементы(),ВыбранныеАналитики);
		
	КонецЦикла;
			
КонецПроцедуры	
		
&НаСервере
Процедура ИнициализироватьПоляСкд(ВыбранныеАналитики)
	
	МакетСкд = ПолучитьОбщийМакет("МакетНастройкиОтборов");	
	МакетСкд.НаборыДанных[0].Поля.Очистить();
	КомпоновщикНастроек.Настройки.Порядок.Элементы.Очистить();		
	ТзДоступныеАналитики 			= ЗначениеИзСтрокиВнутр(ТзДоступныеАналитикиАдрес);
	
	Для Каждого ДоступнаяАналитика Из ТзДоступныеАналитики Цикл	
		Если ДоступнаяАналитика.АналитикаКод = "ПериодОтчета" Тогда
			Продолжить;
		КонецЕсли;		
		ИмяДляПоиска = "";	
		АналитическийБланкУХСервер.ДобавитьОписаниеПоляСКД(ДоступнаяАналитика.АналитикаКод,ДоступнаяАналитика.АналитикаПредставление,ДоступнаяАналитика.АналитикаТипСтрока,МакетСкд);	
	КонецЦикла;	
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(МакетСКД, УникальныйИдентификатор)));
	
	Для Каждого ДоступнаяАналитика Из ТзДоступныеАналитики Цикл 		
		Если ДоступнаяАналитика.АналитикаКод = "ПериодОтчета" Тогда
			Продолжить;
		КонецЕсли;	
		
		Если НЕ ВыбранныеАналитики.Свойство(ДоступнаяАналитика.АналитикаКод) Тогда
			 Продолжить;
		КонецЕсли;		
		ЭлПорядка		 = КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));	
		ЭлПорядка.Поле  = Новый ПолеКомпоновкиДанных(ДоступнаяАналитика.АналитикаСортировка);
		ЭлПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
	КонецЦикла;	
		
КонецПроцедуры	

&НаСервере
Функция ПодготовитьСтруктуруПараметров() 
	
	тзСтруктураМакета = Новый ТаблицаЗначений;
	тзСтруктураМакета.Колонки.Добавить("ИмяОбласти",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
    тзСтруктураМакета.Колонки.Добавить("ВерхОбласти",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));
	тзСтруктураМакета.Колонки.Добавить("ЛевоОбласти",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));

	ТабПоказателей = Новый ТаблицаЗначений;
	ТабПоказателей.Колонки.Добавить("ПоказательСсылка",Новый ОписаниеТипов("СправочникСсылка.ПоказателиОтчетов"));
	
	Для Каждого Обл Из ТабДокОбразец.Области Цикл	
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки ИЛИ Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда	
			Нстр = тзСтруктураМакета.Добавить();
			Нстр.ИмяОбласти = Обл.Имя;
			Нстр.ВерхОбласти = Обл.Верх;
            Нстр.ЛевоОбласти = Обл.Лево;
		КонецЕсли;
		Если Лев(Обл.Имя,10) = "ВидОтчета_" Тогда
			нСтр = ТабПоказателей.Добавить();
			нстр.ПоказательСсылка = Обл.Расшифровка.Ссылка;	
		КонецЕсли;	
	КонецЦикла;		
			
	тзСтруктураМакета.Сортировать("ВерхОбласти,ЛевоОбласти");
	
	СтруктураСортировки = Новый Структура;	
	Для Каждого ЭлПорядка Из КомпоновщикНастроек.Настройки.Порядок.Элементы Цикл 
		ПозицияПервойТочки = СтрНайти(ЭлПорядка.Поле,".");
		ПолеКод = Лев(ЭлПорядка.Поле,ПозицияПервойТочки-1);
		СтруктураСортировки.Вставить(ПолеКод,ЭлПорядка.Поле);
	КонецЦикла;	
	
	Для Каждого Стр Из ПараметрыОтбора Цикл	
		Стр.ЗначениеОтбораСтрока 		=  ЗначениеВСтрокуВнутр(Стр.ЗначениеОтбора);
		Стр.ЗначениеДляПроверкиСтрока	=  ЗначениеВСтрокуВнутр(Стр.ЗначениеДляПроверки);		
	КонецЦикла;	   
			
	ТабПоказателей.Свернуть("ПоказательСсылка");	
	ТзСвойстваПоказателей 					= АналитическийБланкГенерацияМакетаУХСервер.ПолучитьСвойстваВыбранныхПоказателей(ТабПоказателей);
	
	СтруктураИерархии = Новый Структура; 
	ПолучитьСтруктуруИерархииРекурсивно(ДеревоСтруктуры.ПолучитьЭлементы()[0],СтруктураИерархии);

	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("КоличествоСтрокМакета",КоличествоСтрокМакета);
	СтруктураОтвета.Вставить("НачалоОбластиЗаголовка",	ПолучитьИндексНачалаОбластиЗаголовка());
	СтруктураОтвета.Вставить("СтруктураАналитикАдрес",	ПоместитьВоВременноеХранилище(РеквизитформыВЗначение("ДеревоСтруктуры"),Новый УникальныйИдентификатор() ));
	СтруктураОтвета.Вставить("ПараметрыОтбораАдрес",	ПоместитьВоВременноеХранилище(РеквизитформыВЗначение("ПараметрыОтбора"),Новый УникальныйИдентификатор() ));
	СтруктураОтвета.Вставить("СортировкиАдрес",			ПоместитьВоВременноеХранилище(СтруктураСортировки,Новый УникальныйИдентификатор() ));
	СтруктураОтвета.Вставить("МакетГруппировок",		ПоместитьВоВременноеХранилище(ТабДокОбразец,Новый УникальныйИдентификатор() ));
    СтруктураОтвета.Вставить("тзСтруктураМакетаАдрес",  ПоместитьВоВременноеХранилище(тзСтруктураМакета,Новый УникальныйИдентификатор() ));
	СтруктураОтвета.Вставить("текПоказатели",  			ПоместитьВоВременноеХранилище(ТзСвойстваПоказателей,Новый УникальныйИдентификатор() ));
	СтруктураОтвета.Вставить("СтруктураИерархии",		СтруктураИерархии);
	
	Возврат СтруктураОтвета;
	
КонецФункции

&НаКлиенте
Процедура ПеренестиВложенныеЭлементыРекурсивно(нСтрока, СтрокаИсточник)
	
	Для Каждого Стр Из  СтрокаИсточник.ПолучитьЭлементы() Цикл
		новаяСтрока =  нСтрока.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(новаяСтрока,Стр);
		Элементы.ДеревоСтруктуры.Развернуть(нСтрока.ПолучитьИдентификатор(),Истина);
		ПеренестиВложенныеЭлементыРекурсивно(новаяСтрока, Стр);
	КонецЦикла;	
		
КонецПроцедуры

&НаСервере
Функция ПолучитьИндексНачалаОбластиЗаголовка()
	
	ИндексНачалаОбласти = 1;
	
	Если ТипМакета = "Строки" Тогда	
		Для ИндСтроки  = 1 По КоличествоСтрокМакета Цикл
			Для ИндКолонки = 1 По ТабДокОбразец.ШиринаТаблицы Цикл	
				тОбласть = ТабДокОбразец.Область(ИндСтроки,ИндКолонки,ИндСтроки,ИндКолонки);
				Если ТипЗнч(тОбласть.Расшифровка) = Тип("Структура") И тОбласть.Расшифровка.Свойство("Ссылка") Тогда
					 Возврат ИндКолонки-1;
				КонецЕсли;		
			КонецЦикла;	 
		КонецЦикла;	 
		
	Иначе
		Для ИндСтроки  = 1 По ТабДокОбразец.ВысотаТаблицы Цикл
			Для ИндКолонки = 1 По КоличествоСтрокМакета Цикл	
				тОбласть = ТабДокОбразец.Область(ИндСтроки,ИндКолонки,ИндСтроки,ИндКолонки);
				Если ТипЗнч(тОбласть.Расшифровка) = Тип("Структура") И тОбласть.Расшифровка.Свойство("Ссылка") Тогда
					 Возврат ИндСтроки-1;
				КонецЕсли;		
			КонецЦикла;	 
		КонецЦикла;	 

	КонецЕсли;	 
	
	Возврат ИндексНачалаОбласти;
	
КонецФункции	

&НаСервереБезКонтекста
Функция  ПоддерживаетИерархию(ТипСтрока)
	
	ТипСсылки = СтрРазделить(ТипСтрока,"|");
	
	Для Каждого ТипСтрока_ Из ТипСсылки Цикл
		
		ТипСсылка = Новый(ТипСтрока_);
		
		Если Лев(ТипСтрока_,10) = "Справочник" И  ТипСсылка.Метаданные().Иерархический  Тогда		
			Возврат Истина			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Ложь;
		
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеГруппировки(СтруктураАналитикСтрока)
	
	СтруктураАналитик = ЗначениеИзСтрокиВнутр(СтруктураАналитикСтрока);
	
	ПолеПредставление = "";
	
	Для Каждого Стр Из СтруктураАналитик Цикл		
		ПолеИерархия      = "";
		тИерархия         = Стр.Значение[0].ИерархииАналитики;
		
		Если НЕ тИерархия = ПредопределенноеЗначение("ТипГруппировкиКомпоновкиДанных.Элементы") Тогда
			 ПолеИерархия = "("+Строка(тИерархия)+")";
		КонецЕсли;	
		
		ПолеПредставление = ПолеПредставление+Стр.Значение[0].АналитикаПредставление+ПолеИерархия+",";
				
	КонецЦикла;	

	ПолеПредставление = Лев(ПолеПредставление,СтрДлина(ПолеПредставление)-1);
	
	Возврат ПолеПредставление;
		
КонецФункции	

&НаСервере
Процедура ПолучитьСтруктуруИерархииРекурсивно(нСтрока, СтруктураИерархии)
	
	Для Каждого Стр Из  нСтрока.ПолучитьЭлементы() Цикл
		
		Если ЗначениеЗаполнено(Стр.ИерархияАналитикСтрока) Тогда	
			тИерархия = ЗначениеИзСтрокиВнутр(Стр.ИерархияАналитикСтрока);	
			Для Каждого СтрИерархия Из тИерархия Цикл
				 СтруктураИерархии.Вставить(СтрИерархия.Ключ,СтрИерархия.Значение);
			КонецЦикла;	
		КонецЕсли;	
		
		ПолучитьСтруктуруИерархииРекурсивно(Стр, СтруктураИерархии);
	
	КонецЦикла;	
		
КонецПроцедуры


