
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ПрочитатьНастройкиАналитическогоБланка(ПолеТабличногоДокументаМакет,Бланк,ТекущийОбъект) Экспорт
	
	
	текНаборЗаписей = РегистрыСведений.КэшГруппОтборовПоказателей.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
	текНаборЗаписей.Прочитать();
	ТекущийОбъект.КэшГруппОтборовПоказателей.Загрузить(текНаборЗаписей.Выгрузить());

	текНаборЗаписей = РегистрыСведений.РасшифровкаГруппОтборов.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
	текНаборЗаписей.Прочитать();
	ТекущийОбъект.РасшифровкаГруппОтборов.Загрузить(текНаборЗаписей.Выгрузить());

	текНаборЗаписей = РегистрыСведений.КэшИменОбластейПоказателей.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
	текНаборЗаписей.Прочитать();
	ТекущийОбъект.КэшИменОбластейПоказателей.Загрузить(текНаборЗаписей.Выгрузить());
	
	текНаборЗаписей = РегистрыСведений.КэшРаскрываемыхОбластей.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
	текНаборЗаписей.Прочитать();
	ТекущийОбъект.КэшРаскрываемыхОбластей.Загрузить(текНаборЗаписей.Выгрузить());

	текНаборЗаписей = РегистрыСведений.НастройкиРаскрываемыхОбластей.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
	текНаборЗаписей.Прочитать();
	ТекущийОбъект.НастройкиРаскрываемыхОбластей.Загрузить(текНаборЗаписей.Выгрузить());

	текНаборЗаписей = РегистрыСведений.КэшИменФормул.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
	текНаборЗаписей.Прочитать();
	ТекущийОбъект.КэшИменФормул.Загрузить(текНаборЗаписей.Выгрузить());
	
	текНаборЗаписей = РегистрыСведений.РасшифровкаФормулОбластейПоказателей.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
	текНаборЗаписей.Прочитать();
	ТекущийОбъект.РасшифровкаФормулОбластейПоказателей.Загрузить(текНаборЗаписей.Выгрузить());

	текНаборЗаписей = РегистрыСведений.НастройкиАналитическихБланков.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
	текНаборЗаписей.Прочитать();
	Если  текНаборЗаписей.Количество() =1 Тогда			
		ЗначениеСохраняемойНастройки = текНаборЗаписей[0].ХранилищеДополнительныхНастроек.Получить();	
		Если  ЗначениеСохраняемойНастройки.Свойство("ТабДокМакет") Тогда		
			ПолеТабличногоДокументаМакет.Вывести(ЗначениеСохраняемойНастройки.ТабДокМакет);
		КонецЕсли;
		Если  ЗначениеСохраняемойНастройки.Свойство("ФиксацияСверху") Тогда		
			ПолеТабличногоДокументаМакет.ФиксацияСверху = ЗначениеСохраняемойНастройки.ФиксацияСверху;
		КонецЕсли;
		Если  ЗначениеСохраняемойНастройки.Свойство("ФиксацияСлева") Тогда		
			ПолеТабличногоДокументаМакет.ФиксацияСлева = ЗначениеСохраняемойНастройки.ФиксацияСлева;
		КонецЕсли;	
	КонецЕсли;	
		
КонецПроцедуры	

Процедура ЗаписатьНастройкиАналитическогоБланка(ПолеТабличногоДокументаМакет,МакетДляВыводаПоказателей,Бланк,ТекущийОбъект,Отказ) Экспорт
		
	ПолучитьГруппировкиТабличногоДокумента(МакетДляВыводаПоказателей,ТекущийОбъект);
	
	текНаборЗаписей = РегистрыСведений.КэшГруппОтборовПоказателей.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
	текНаборЗаписей.Загрузить(ТекущийОбъект.КэшГруппОтборовПоказателей.Выгрузить());
	Для Каждого Стр Из текНаборЗаписей Цикл
		Стр.Бланк = Бланк;
	КонецЦикла;	
	текНаборЗаписей.Записать(Истина);
	
	текНаборЗаписей = РегистрыСведений.РасшифровкаГруппОтборов.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
	текНаборЗаписей.Загрузить(ТекущийОбъект.РасшифровкаГруппОтборов.Выгрузить());
	Для Каждого Стр Из текНаборЗаписей Цикл
		Стр.Бланк = Бланк;
	КонецЦикла;	
	текНаборЗаписей.Записать(Истина);

	текНаборЗаписей = РегистрыСведений.КэшРаскрываемыхОбластей.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
	текНаборЗаписей.Загрузить(ТекущийОбъект.КэшРаскрываемыхОбластей.Выгрузить());
	Для Каждого Стр Из текНаборЗаписей Цикл
		Стр.Бланк = Бланк;
	КонецЦикла;	
	текНаборЗаписей.Записать(Истина);

	текНаборЗаписей = РегистрыСведений.НастройкиРаскрываемыхОбластей.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
	текНаборЗаписей.Загрузить(ТекущийОбъект.НастройкиРаскрываемыхОбластей.Выгрузить());
	Для Каждого Стр Из текНаборЗаписей Цикл
		Стр.Бланк = Бланк;
	КонецЦикла;	
	текНаборЗаписей.Записать(Истина);

	текНаборЗаписей = РегистрыСведений.НастройкиТаблицРаскрываемыхОбластей.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
	текНаборЗаписей.Загрузить(ТекущийОбъект.НастройкиТаблицРаскрываемыхОбластей.Выгрузить());
	Для Каждого Стр Из текНаборЗаписей Цикл
		Стр.Бланк = Бланк;
	КонецЦикла;	
	текНаборЗаписей.Записать(Истина);
	
	текНаборЗаписей = РегистрыСведений.РасшифровкаФормулОбластейПоказателей.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
	тТаблица  = ТекущийОбъект.РасшифровкаФормулОбластейПоказателей.Выгрузить();
	тТаблица.Свернуть("УидФормулы,УидГруппыОтборов,Показатель,ИндексПоказателя,ВидОтчета,ВидОтчетаКод,ПоказательКод,ИмяВФормуле");
	текНаборЗаписей.Загрузить(тТаблица);
	Для Каждого Стр Из текНаборЗаписей Цикл
		Стр.Бланк = Бланк;
	КонецЦикла;	
	текНаборЗаписей.Записать(Истина);
	
	текНаборЗаписей = РегистрыСведений.КэшИменОбластейПоказателей.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
	текНаборЗаписей.Загрузить(ТекущийОбъект.КэшИменОбластейПоказателей.Выгрузить());
	Для Каждого Стр Из текНаборЗаписей Цикл
		Стр.Бланк = Бланк;
	КонецЦикла;	
	текНаборЗаписей.Записать(Истина);
	
	текНаборЗаписей = РегистрыСведений.КэшИменФормул.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
	текНаборЗаписей.Загрузить(ТекущийОбъект.КэшИменФормул.Выгрузить());
	Для Каждого Стр Из текНаборЗаписей Цикл
		Стр.Бланк = Бланк;
	КонецЦикла;	
	текНаборЗаписей.Записать(Истина);
	
	СтруктураАналитикРаскрытияПоказателей = Новый Структура;

	Попытка
		СтруктураПараметров = АналитическийБланкУХСервер.ПодготовитьТекстЗапросаПолученияДанных(ТекущийОбъект,ПолеТабличногоДокументаМакет,СтруктураАналитикРаскрытияПоказателей);
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ОписаниеОшибки(),Отказ,НСтр("ru = 'Ошибка записи бланка'"));
		Возврат;
	КонецПопытки;	
				
	Если СтруктураПараметров = Неопределено Тогда
		ЗначениеСохраняемойНастройки = Новый Структура;	
		ЗначениеСохраняемойНастройки.Вставить("ТабДокМакет",  				 			 ПолеТабличногоДокументаМакет);
		ЗначениеСохраняемойНастройки.Вставить("МакетДляВыводаПоказателей",  			 МакетДляВыводаПоказателей);
		ЗначениеСохраняемойНастройки.Вставить("ФиксацияСлева",   						 ПолетабличногоДокументаМакет.ФиксацияСлева);
		ЗначениеСохраняемойНастройки.Вставить("ФиксацияСверху",  						 ПолетабличногоДокументаМакет.ФиксацияСверху);	
		ЗначениеСохраняемойНастройки.Вставить("ТекстЗапросаСинтетика",  			 	 Неопределено);
		ЗначениеСохраняемойНастройки.Вставить("КоличествоОдинаковыхИмен",  				 ПолучитьИзВременногоХранилища(ТекущийОбъект.КоличествоОдинаковыхИменАдрес));
	Иначе		
		
		ТекущийОбъект.КэшФормулОбластейПоказателей.Очистить();
		тКэшОбластейРаскрытия  =  ПолучитьИзВременногоХранилища(СтруктураПараметров.тКэшОбластейРаскрытияАдрес);
		ЗаполнитьКэшВыводаОбластейМакета(тКэшОбластейРаскрытия,ТекущийОбъект,ПолеТабличногоДокументаМакет,СтруктураАналитикРаскрытияПоказателей);
				
		ЗначениеСохраняемойНастройки = Новый Структура;	
		ЗначениеСохраняемойНастройки.Вставить("ТабДокМакет",  				 			 ПолеТабличногоДокументаМакет);
		ЗначениеСохраняемойНастройки.Вставить("МакетДляВыводаПоказателей",  			 МакетДляВыводаПоказателей);
		ЗначениеСохраняемойНастройки.Вставить("ФиксацияСлева",   						 ПолетабличногоДокументаМакет.ФиксацияСлева);
		ЗначениеСохраняемойНастройки.Вставить("ФиксацияСверху",  						 ПолетабличногоДокументаМакет.ФиксацияСверху);	
		                                                                                                                                   
		ЗначениеСохраняемойНастройки.Вставить("ТзСтруктураВыводаГруппировок",  	 		 СтруктураПараметров.ТзСтруктураВыводаГруппировок);		
		ЗначениеСохраняемойНастройки.Вставить("ПараметрыОбластейКолонки",  				 ПолучитьИзВременногоХранилища(СтруктураПараметров.ПараметрыОбластейКолонки));
		ЗначениеСохраняемойНастройки.Вставить("ПараметрыОбластейСтроки",  				 ПолучитьИзВременногоХранилища(СтруктураПараметров.ПараметрыОбластейСтроки));
			
		ЗначениеСохраняемойНастройки.Вставить("тзПоказатели",  					 	 	 ПолучитьИзВременногоХранилища(СтруктураПараметров.тзПоказателиАдрес));
		ЗначениеСохраняемойНастройки.Вставить("тКэшОбластейРаскрытия",  			 	 ПолучитьИзВременногоХранилища(СтруктураПараметров.тКэшОбластейРаскрытияАдрес));
		ЗначениеСохраняемойНастройки.Вставить("КоличествоОдинаковыхИмен",  		 		 ПолучитьИзВременногоХранилища(ТекущийОбъект.КоличествоОдинаковыхИменАдрес));
		ЗначениеСохраняемойНастройки.Вставить("КэшОперандов",  		 		 	 		 ПолучитьИзВременногоХранилища(ТекущийОбъект.КэшОперандовАдрес));
		ЗначениеСохраняемойНастройки.Вставить("тИспользованныеПоказатели",  		 	 ПолучитьИзВременногоХранилища(ТекущийОбъект.ТзСвойстваПоказателейАдрес).ВыгрузитьКолонку("Ссылка"));		
			
		Если СтруктураПараметров.Свойство("ТзПоказателейОбластейКолонки") Тогда
			ЗначениеСохраняемойНастройки.Вставить("ТзПоказателейОбластейКолонки",  		 СтруктураПараметров.ТзПоказателейОбластейКолонки);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ТзПоказателейОбластейСтроки") Тогда
			ЗначениеСохраняемойНастройки.Вставить("ТзПоказателейОбластейСтроки",  		 СтруктураПараметров.ТзПоказателейОбластейСтроки);
		КонецЕсли;
	
		ТзПоказателиКроссОбластей = ТекущийОбъект.КэшПоказателейКроссОбластей.Выгрузить();
		ТзПоказателиКроссОбластей.Индексы.Добавить("Показатель");
		
		ЗначениеСохраняемойНастройки.Вставить("КэшПоказателейКроссОбластей",  		 ТзПоказателиКроссОбластей);
		
		ТзПоказателиМакетовРаскрытий = ТекущийОбъект.ПоказателиМакетовРаскрытий.Выгрузить();
		ТзПоказателиМакетовРаскрытий.Индексы.Добавить("Показатель");
		
		ЗначениеСохраняемойНастройки.Вставить("ТзПоказателиМакетовРаскрытий",  		 ТзПоказателиМакетовРаскрытий);
		ЗначениеСохраняемойНастройки.Вставить("СтруктураНемасштабируемых",  		 ПолучитьИзВременногоХранилища(ТекущийОбъект.НемасшатбируемыеАдрес));
		
	КонецЕсли;
			
	текНаборЗаписей = РегистрыСведений.КэшФормулОбластейПоказателей.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
	текНаборЗаписей.Загрузить(ТекущийОбъект.КэшФормулОбластейПоказателей.Выгрузить());
	Для Каждого Стр Из текНаборЗаписей Цикл
		Стр.Бланк = Бланк;
	КонецЦикла;	
	текНаборЗаписей.Записать(Истина);
	
	текНаборЗаписей = РегистрыСведений.НастройкиАналитическихБланков.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
	текНаборЗаписей.Очистить();
	нЗапись  									= текНаборЗаписей.Добавить();
	нЗапись.Бланк								= Бланк;
	нЗапись.ХранилищеДополнительныхНастроек 	= Новый ХранилищеЗначения(ЗначениеСохраняемойНастройки);
    текНаборЗаписей.Записать(Истина);
		
КонецПроцедуры	

Процедура ВернутьНастройкиАналитическогоБланка(ПолеТабличногоДокументаМакет,МакетДляВыводаПоказателей,Приемник,ТекущийОбъект,Отказ) Экспорт
		
	ПолучитьГруппировкиТабличногоДокумента(МакетДляВыводаПоказателей,ТекущийОбъект);
	
	Приемник.Вставить("КэшГруппОтборовПоказателей",ТекущийОбъект.КэшГруппОтборовПоказателей.Выгрузить());
	Приемник.Вставить("РасшифровкаГруппОтборов",ТекущийОбъект.РасшифровкаГруппОтборов.Выгрузить());
    Приемник.Вставить("КэшРаскрываемыхОбластей",ТекущийОбъект.КэшРаскрываемыхОбластей.Выгрузить());
	Приемник.Вставить("НастройкиРаскрываемыхОбластей",ТекущийОбъект.НастройкиРаскрываемыхОбластей.Выгрузить());
    Приемник.Вставить("НастройкиТаблицРаскрываемыхОбластей",ТекущийОбъект.НастройкиТаблицРаскрываемыхОбластей.Выгрузить());

	тТаблица  = ТекущийОбъект.РасшифровкаФормулОбластейПоказателей.Выгрузить();
	тТаблица.Свернуть("УидФормулы,УидГруппыОтборов,Показатель,ИндексПоказателя,ВидОтчета,ВидОтчетаКод,ПоказательКод,ИмяВФормуле");

	Приемник.Вставить("РасшифровкаФормулОбластейПоказателей",тТаблица);
	Приемник.Вставить("КэшИменОбластейПоказателей",ТекущийОбъект.КэшИменОбластейПоказателей.Выгрузить());
    Приемник.Вставить("КэшИменФормул",ТекущийОбъект.КэшИменФормул.Выгрузить());
	
	ТекущийОбъект.РежимСводнойТаблицы = Истина;
	
	СтруктураАналитикРаскрытияПоказателей = Новый Структура;

	Попытка
		СтруктураПараметров = АналитическийБланкУХСервер.ПодготовитьТекстЗапросаПолученияДанных(ТекущийОбъект,ПолеТабличногоДокументаМакет,СтруктураАналитикРаскрытияПоказателей);
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ОписаниеОшибки(),Отказ,НСтр("ru = 'Ошибка записи бланка'"));
		Возврат;
	КонецПопытки;	
				
	Если СтруктураПараметров = Неопределено Тогда
		ЗначениеСохраняемойНастройки = Новый Структура;	
		ЗначениеСохраняемойНастройки.Вставить("ТабДокМакет",  				 			 ПолеТабличногоДокументаМакет);
		ЗначениеСохраняемойНастройки.Вставить("МакетДляВыводаПоказателей",  			 МакетДляВыводаПоказателей);
		ЗначениеСохраняемойНастройки.Вставить("ФиксацияСлева",   						 ПолетабличногоДокументаМакет.ФиксацияСлева);
		ЗначениеСохраняемойНастройки.Вставить("ФиксацияСверху",  						 ПолетабличногоДокументаМакет.ФиксацияСверху);	
		ЗначениеСохраняемойНастройки.Вставить("ТекстЗапросаСинтетика",  			 	 Неопределено);
		ЗначениеСохраняемойНастройки.Вставить("КоличествоОдинаковыхИмен",  				 ПолучитьИзВременногоХранилища(ТекущийОбъект.КоличествоОдинаковыхИменАдрес));
	Иначе		
		
		тКэшОбластейРаскрытия  =  ПолучитьИзВременногоХранилища(СтруктураПараметров.тКэшОбластейРаскрытияАдрес);
		ЗаполнитьКэшВыводаОбластейМакета(тКэшОбластейРаскрытия,ТекущийОбъект,ПолеТабличногоДокументаМакет,СтруктураАналитикРаскрытияПоказателей);
				
		ЗначениеСохраняемойНастройки = Новый Структура;	
		ЗначениеСохраняемойНастройки.Вставить("ТабДокМакет",  				 			 ПолеТабличногоДокументаМакет);
		ЗначениеСохраняемойНастройки.Вставить("МакетДляВыводаПоказателей",  			 МакетДляВыводаПоказателей);
		ЗначениеСохраняемойНастройки.Вставить("ФиксацияСлева",   						 ПолетабличногоДокументаМакет.ФиксацияСлева);
		ЗначениеСохраняемойНастройки.Вставить("ФиксацияСверху",  						 ПолетабличногоДокументаМакет.ФиксацияСверху);	
		                                                                                                                                   
		ЗначениеСохраняемойНастройки.Вставить("ТзСтруктураВыводаГруппировок",  	 		 СтруктураПараметров.ТзСтруктураВыводаГруппировок);		
		ЗначениеСохраняемойНастройки.Вставить("ПараметрыОбластейКолонки",  				 ПолучитьИзВременногоХранилища(СтруктураПараметров.ПараметрыОбластейКолонки));
		ЗначениеСохраняемойНастройки.Вставить("ПараметрыОбластейСтроки",  				 ПолучитьИзВременногоХранилища(СтруктураПараметров.ПараметрыОбластейСтроки));
			
		ЗначениеСохраняемойНастройки.Вставить("тзПоказатели",  					 	 	 ПолучитьИзВременногоХранилища(СтруктураПараметров.тзПоказателиАдрес));
		ЗначениеСохраняемойНастройки.Вставить("тКэшОбластейРаскрытия",  			 	 ПолучитьИзВременногоХранилища(СтруктураПараметров.тКэшОбластейРаскрытияАдрес));
		ЗначениеСохраняемойНастройки.Вставить("КоличествоОдинаковыхИмен",  		 		 ПолучитьИзВременногоХранилища(ТекущийОбъект.КоличествоОдинаковыхИменАдрес));
		ЗначениеСохраняемойНастройки.Вставить("КэшОперандов",  		 		 	 		 ПолучитьИзВременногоХранилища(ТекущийОбъект.КэшОперандовАдрес));
		ЗначениеСохраняемойНастройки.Вставить("тИспользованныеПоказатели",  		 	 ПолучитьИзВременногоХранилища(ТекущийОбъект.ТзСвойстваПоказателейАдрес).ВыгрузитьКолонку("Ссылка"));		
			
		Если СтруктураПараметров.Свойство("ТзПоказателейОбластейКолонки") Тогда
			ЗначениеСохраняемойНастройки.Вставить("ТзПоказателейОбластейКолонки",  		 СтруктураПараметров.ТзПоказателейОбластейКолонки);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ТзПоказателейОбластейСтроки") Тогда
			ЗначениеСохраняемойНастройки.Вставить("ТзПоказателейОбластейСтроки",  		 СтруктураПараметров.ТзПоказателейОбластейСтроки);
		КонецЕсли;
	
		ТзПоказателиКроссОбластей = ТекущийОбъект.КэшПоказателейКроссОбластей.Выгрузить();
		ТзПоказателиКроссОбластей.Индексы.Добавить("Показатель");
		
		ЗначениеСохраняемойНастройки.Вставить("КэшПоказателейКроссОбластей",  		 ТзПоказателиКроссОбластей);
		
		ТзПоказателиМакетовРаскрытий = ТекущийОбъект.ПоказателиМакетовРаскрытий.Выгрузить();
		ТзПоказателиМакетовРаскрытий.Индексы.Добавить("Показатель");
		
		ЗначениеСохраняемойНастройки.Вставить("ТзПоказателиМакетовРаскрытий",  		 ТзПоказателиМакетовРаскрытий);
		ЗначениеСохраняемойНастройки.Вставить("СтруктураНемасштабируемых",  		 ПолучитьИзВременногоХранилища(ТекущийОбъект.НемасшатбируемыеАдрес));
		
	КонецЕсли;
			
	Приемник.Вставить("КэшФормулОбластейПоказателей",ТекущийОбъект.КэшФормулОбластейПоказателей.Выгрузить());
    Приемник.Вставить("НастройкиАналитическихБланков",ЗначениеСохраняемойНастройки);
		
КонецПроцедуры	

Процедура ЗаполнитьКэшВыводаОбластейМакета(тКэшОбластейРаскрытия,ТекущийОбъект,ПолеТабличногоДокументаМакет,СтруктураАналитикРаскрытияПоказателей) 
		
	ТзСвойствПоказателей = ПолучитьИзВременногоХранилища(ТекущийОбъект.ТзСвойстваПоказателейАдрес);
	
	//Кэш областей для динамического обновления итогов показателей.      
	Для Каждого СтрОбластиВывода Из тКэшОбластейРаскрытия Цикл	
		
		Если  СтрОбластиВывода.Лево>1 Тогда
			 СтрОбластиВывода.Лево = СтрОбластиВывода.Лево-1;
		КонецЕсли;	
		Если  СтрОбластиВывода.Право>1 Тогда
			 СтрОбластиВывода.Право = СтрОбластиВывода.Право-1;
		КонецЕсли;		
		Если  СтрОбластиВывода.Верх>1 Тогда
			 СтрОбластиВывода.Верх = СтрОбластиВывода.Верх-1;
		КонецЕсли;
		Если  СтрОбластиВывода.Низ>1 Тогда
			 СтрОбластиВывода.Низ = СтрОбластиВывода.Низ-1;
		КонецЕсли;

		тОбластьМакета = ПолеТабличногоДокументаМакет.Область(СтрОбластиВывода.ИмяОбласти); 
		ТабОперандов   = ПолучитьИзВременногоХранилища(ТекущийОбъект.ТабОперандовАдрес);
		
		СмещениеY = 1;	
		Для ИндС = тОбластьМакета.Верх По тОбластьМакета.Низ Цикл		
			СмещениеХ = 1;		
			Для ИндК = тОбластьМакета.Лево По тОбластьМакета.Право Цикл
				
				тОбласть =  ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);
				
				Если Лев(тОбласть.Имя,10) = "ВидОтчета_" Тогда 
					
					нТзКэша =  ТекущийОбъект.КэшПоказателейКроссОбластей.Добавить();
					ЗаполнитьЗначенияСвойств(нТзКэша,СтрОбластиВывода);
					
					нТзКэша.Показатель 				= тОбласть.Расшифровка.Ссылка;
					нТзКэша.УидГруппыОтборов 		= тОбласть.Расшифровка.Уид;
					нТзКэша.ИмяКроссОбласти 		= СтрОбластиВывода.ИмяОбласти;
					Если СтрОбластиВывода.Верх = 1 Тогда
						 нТзКэша.СмещениеY 				= СмещениеY-1;
					Иначе	 
						 нТзКэша.СмещениеY 				= СмещениеY;
					КонецЕсли;	
						
					Если СтрОбластиВывода.Лево = 1 Тогда
						 нТзКэша.СмещениеХ 				= СмещениеХ-1;
					Иначе	 
						 нТзКэша.СмещениеХ 				= СмещениеХ;
					КонецЕсли;	
									
					Если СтруктураАналитикРаскрытияПоказателей.Свойство(тОбласть.Имя) Тогда
						 нТзКэша.СтрГруппировки = СтрСоединить(СтруктураАналитикРаскрытияПоказателей[тОбласть.Имя],";")
					КонецЕсли;	
					
				ИначеЕсли Лев(тОбласть.Имя,8) = "Формула_" Тогда	
					
					ПоказателиФормулы   = ЗначениеИзСтрокиВнутр(тОбласть.Расшифровка.РасшифровкаФормулы);
					СтруктураОперандов 	= Новый Структура;
					
					тСтрокаКэшаФормул   					= ТекущийОбъект.КэшФормулОбластейПоказателей.Добавить();
					тСтрокаКэшаФормул.УидФормулы    		= тОбласть.Имя;
					ТекстФормулыПриведенный  				= тОбласть.Расшифровка.ТекстФормулы;
					тСтрокаКэшаФормул.ТекстФормулыИсходный  = тОбласть.Расшифровка.ТекстФормулы;
					
					Для Каждого СтрПоказатель Из ПоказателиФормулы Цикл
						
						нТзКэша =  ТекущийОбъект.КэшПоказателейКроссОбластей.Добавить();
						ЗаполнитьЗначенияСвойств(нТзКэша,СтрОбластиВывода);
						
						УидПоказателя =  ТабОперандов.Найти(СтрПоказатель.ИмяВФормуле,"ИмяВФормуле").УидГруппыОтборов;
						
						нТзКэша.Показатель 				= СтрПоказатель.Показатель;
						нТзКэша.УидГруппыОтборов 		= УидПоказателя;
						нТзКэша.ИмяФормулы              = тОбласть.Имя;
						нТзКэша.ЭтоФормула              = Истина;
						
						тПоказатель  					=  ТзСвойствПоказателей.Найти(нТзКэша.Показатель,"Ссылка");
						ИмяОбластиДляВыводаСУид       	=  СокрП(тПоказатель.ВидОтчетаКод)+"_"+СокрП(тПоказатель.ПоказательКод)+"_"+УидПоказателя;		
						нТзКэша.ИмяОперанда             =  ИмяОбластиДляВыводаСУид;	
						ТекстФормулыПриведенный 		= СтрЗаменить(ТекстФормулыПриведенный,"["+СтрПоказатель.ИмяВФормуле+"]","КэшОперандов."+ИмяОбластиДляВыводаСУид);
						
						нТзКэша.ИмяКроссОбласти 		= СтрОбластиВывода.ИмяОбласти;
						Если СтрОбластиВывода.Верх = 1 Тогда
							нТзКэша.СмещениеY 				= СмещениеY-1;
						Иначе	 
							нТзКэша.СмещениеY 				= СмещениеY;
						КонецЕсли;	
						
						Если СтрОбластиВывода.Лево = 1 Тогда
							нТзКэша.СмещениеХ 				= СмещениеХ-1;
						Иначе	 
							нТзКэша.СмещениеХ 				= СмещениеХ;
						КонецЕсли;	
						
						Если СтруктураАналитикРаскрытияПоказателей.Свойство(тОбласть.Имя) Тогда
							нТзКэша.СтрГруппировки = СтрСоединить(СтруктураАналитикРаскрытияПоказателей[тОбласть.Имя],";")
						КонецЕсли;	
						
					КонецЦикла;
						
					тСтрокаКэшаФормул.ТекстФормулы    = ТекстФормулыПриведенный;
					
				КонецЕсли;
				
				СмещениеХ = СмещениеХ+1;		
			КонецЦикла;	
			СмещениеY = СмещениеY+1;
		КонецЦикла;	   	
	КонецЦикла;		

	
КонецПроцедуры	

Процедура ЗполнитьПервоначальныйКэшОтборов(РасшифровкаГруппОтборов,УидГруппыОтборов) Экспорт
	
	НстрОтборов = РасшифровкаГруппОтборов.Добавить();
	НстрОтборов.УидГруппыОтборов = УидГруппыОтборов;
	НстрОтборов.Поле  		= "ПериодС";
	НстрОтборов.ПолеКод  	= "ПериодС";
	НстрОтборов.Отбор  		= "Период начала отчета";
	НстрОтборов.ЗначениеОтбора  = "";
	НстрОтборов.ТипЗначенияСтрока = "СправочникСсылка.Периоды";
	НстрОтборов.ПорядокОтбора  = 1;	
	
	НстрОтборов = РасшифровкаГруппОтборов.Добавить();
	НстрОтборов.УидГруппыОтборов = УидГруппыОтборов;
	НстрОтборов.Поле 	 	= "ПериодПо";
	НстрОтборов.ПолеКод  	= "ПериодПо";
	НстрОтборов.Отбор  		= "Период окончания отчета";
	НстрОтборов.ЗначениеОтбора  = "";
	НстрОтборов.ТипЗначенияСтрока = "СправочникСсылка.Периоды";
	НстрОтборов.ПорядокОтбора  = 2;

	НстрОтборов = РасшифровкаГруппОтборов.Добавить();
	НстрОтборов.УидГруппыОтборов = УидГруппыОтборов;
	НстрОтборов.Поле  		= 	"Сценарий";
	НстрОтборов.ПолеКод  	= 	"Сценарий";
	НстрОтборов.Отбор  		= 	"Сценарий отчета";
	НстрОтборов.ЗначениеОтбора  = "";
	НстрОтборов.ТипЗначенияСтрока = "СправочникСсылка.Сценарии";
	НстрОтборов.ПорядокОтбора  = 3;
	
	НстрОтборов = РасшифровкаГруппОтборов.Добавить();
	НстрОтборов.УидГруппыОтборов = УидГруппыОтборов;
	НстрОтборов.Поле  = 	"Организация";
	НстрОтборов.ПолеКод  = 	"Организация";
	НстрОтборов.Отбор  = 	"Организация отчета";
	НстрОтборов.ЗначениеОтбора  = "";
	НстрОтборов.ТипЗначенияСтрока = "СправочникСсылка.Организации";
	НстрОтборов.ПорядокОтбора  = 4;
	
	НстрОтборов = РасшифровкаГруппОтборов.Добавить();
	НстрОтборов.УидГруппыОтборов = УидГруппыОтборов;
	НстрОтборов.Поле  		= "Проект";
	НстрОтборов.ПолеКод  	= "Проект";
	НстрОтборов.Отбор  		= "Проект отчета";
	НстрОтборов.ЗначениеОтбора  = "";
	НстрОтборов.ТипЗначенияСтрока = "СправочникСсылка.Проекты";
	НстрОтборов.ПорядокОтбора  = 5;
	
КонецПроцедуры	

Функция ПолучитьОписаниеТаблицыНастроекАналитик() Экспорт 
	
	ТзДоступныхАналитик = Новый ТаблицаЗначений;
	ТзДоступныхАналитик.Колонки.Добавить("АналитикаПредставление",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	ТзДоступныхАналитик.Колонки.Добавить("АналитикаКод",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
	ТзДоступныхАналитик.Колонки.Добавить("АналитикаТипСтрока",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
	ТзДоступныхАналитик.Колонки.Добавить("АналитикаСортировка",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	ТзДоступныхАналитик.Колонки.Добавить("Пометка",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТзДоступныхАналитик.Колонки.Добавить("ЭтоАналитикаВерсии",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТзДоступныхАналитик.Колонки.Добавить("ЭтоОтбор",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТзДоступныхАналитик.Колонки.Добавить("АналитикаБезОтбора",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
    ТзДоступныхАналитик.Колонки.Добавить("ПорядокАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(2));
    ТзДоступныхАналитик.Колонки.Добавить("ИерархииАналитики");
	ТзДоступныхАналитик.Колонки.Добавить("АналитикаСортировкаСКД");


	Возврат ТзДоступныхАналитик;
	
КонецФункции	

Функция ПолучитьОписаниеТаблицыВыводаГруппировок() Экспорт
	
	ТзСтруктураВыводаГрупировок  = Новый ТаблицаЗначений;
	
	ТзСтруктураВыводаГрупировок.Колонки.Добавить("ТипОбласти");
	ТзСтруктураВыводаГрупировок.Колонки.Добавить("ИмяОбласти");
	ТзСтруктураВыводаГрупировок.Колонки.Добавить("Макет");
	ТзСтруктураВыводаГрупировок.Колонки.Добавить("МакетЭталон");
	ТзСтруктураВыводаГрупировок.Колонки.Добавить("Уровень");                           
    ТзСтруктураВыводаГрупировок.Колонки.Добавить("ИменаГруппировок");
	ТзСтруктураВыводаГрупировок.Колонки.Добавить("Группировки");
	ТзСтруктураВыводаГрупировок.Колонки.Добавить("УидОбласти");
    ТзСтруктураВыводаГрупировок.Колонки.Добавить("КоличествоОдинаковыхИмен");
    ТзСтруктураВыводаГрупировок.Колонки.Добавить("ТекстЗапросаВыводаОбластей");
	ТзСтруктураВыводаГрупировок.Колонки.Добавить("ТекстЗапросаВыводаИтогов");
    ТзСтруктураВыводаГрупировок.Колонки.Добавить("ИндексЗапросаПакета");
	ТзСтруктураВыводаГрупировок.Колонки.Добавить("ПараметрыЗапроса");
	ТзСтруктураВыводаГрупировок.Колонки.Добавить("ПоказателиОбласти");
	ТзСтруктураВыводаГрупировок.Колонки.Добавить("ТзАналитикСтроки");
	ТзСтруктураВыводаГрупировок.Колонки.Добавить("ТзАналитикКолонки");
	ТзСтруктураВыводаГрупировок.Колонки.Добавить("АналитикиСтрок");
    ТзСтруктураВыводаГрупировок.Колонки.Добавить("АналитикиКолонок");	
	ТзСтруктураВыводаГрупировок.Колонки.Добавить("ИмяОбластиСтроки");
	ТзСтруктураВыводаГрупировок.Колонки.Добавить("ИмяОбластиКолонки");
	ТзСтруктураВыводаГрупировок.Колонки.Добавить("ОбластьСодержитМакет");
	ТзСтруктураВыводаГрупировок.Колонки.Добавить("ОписаниеСмещенияПоказателй");
	ТзСтруктураВыводаГрупировок.Колонки.Добавить("КэшНастроекПериодов");
	ТзСтруктураВыводаГрупировок.Колонки.Добавить("КэшНастроекИерархий");
	ТзСтруктураВыводаГрупировок.Колонки.Добавить("СКДДляВыводаОбласти");
    ТзСтруктураВыводаГрупировок.Колонки.Добавить("СтруктураИменПолейСКД");
    ТзСтруктураВыводаГрупировок.Колонки.Добавить("МакетКомпоновки");
    ТзСтруктураВыводаГрупировок.Колонки.Добавить("ДанныеРасшифровки");

	
	Возврат ТзСтруктураВыводаГрупировок;
	
КонецФункции

Функция ПолучитьХэшПоОтборам(ПараметрыОтбора) Экспорт
	
	СтрокаХэшаОтборов = "";
	ПараметрыОтбора.Сортировать("ПорядокОтбора,ПолеКод");
	
	Для Каждого Стр Из ПараметрыОтбора Цикл
		
		Если ТипЗнч(Стр.ЗначениеОтбора) = Тип("СписокЗначений") Тогда
			СтрЗначениеОтбора = ЗначениеВСтрокуВнутр(Стр.ЗначениеОтбора.ВыгрузитьЗначения());
		ИначеЕсли Стр.ЗначениеОтбора = "" Тогда
			СтрЗначениеОтбора = "";
		Иначе	
			СтрЗначениеОтбора = ЗначениеВСтрокуВнутр(Стр.ЗначениеОтбора);
		КонецЕсли;
		
		Если Стр.ПолеКод = "ПериодС"  Тогда
			Если НЕ Стр.Отбор=Нстр("ru = 'Период начала отчета'") Тогда
				СтрокаХэшаОтборов = СтрокаХэшаОтборов+Стр.ПолеКод+"@"+Стр.Отбор+"@"+СтрЗначениеОтбора;		      
			КонецЕсли;	   
		ИначеЕсли Стр.ПолеКод = "ПериодПо" Тогда
			Если НЕ Стр.Отбор=Нстр("ru = 'Период окончания отчета'") Тогда
				СтрокаХэшаОтборов = СтрокаХэшаОтборов+Стр.ПолеКод+"@"+Стр.Отбор+"@"+СтрЗначениеОтбора;		      
			КонецЕсли;	   	   
		ИначеЕсли Стр.ПолеКод = "Организация" Тогда
			Если НЕ Стр.Отбор=Нстр("ru = 'Организация отчета'") Тогда
				СтрокаХэшаОтборов = СтрокаХэшаОтборов+Стр.ПолеКод+"@"+Стр.Отбор+"@"+СтрЗначениеОтбора;		      
			КонецЕсли;	      
		ИначеЕсли Стр.ПолеКод = "Сценарий" Тогда
			Если НЕ Стр.Отбор=Нстр("ru = 'Сценарий отчета'") Тогда
				СтрокаХэшаОтборов = СтрокаХэшаОтборов+Стр.ПолеКод+"@"+Стр.Отбор+"@"+СтрЗначениеОтбора;		      
			КонецЕсли;      
		ИначеЕсли Стр.ПолеКод = "Проект" Тогда
			Если НЕ Стр.Отбор=Нстр("ru = 'Проект отчета'") Тогда
				СтрокаХэшаОтборов = СтрокаХэшаОтборов+Стр.ПолеКод+"@"+Стр.Отбор+"@"+СтрЗначениеОтбора;		      
			КонецЕсли;	   
		ИначеЕсли  НЕ Стр.Отбор=Нстр("ru = 'Отбор не производится'") Тогда 	   
			СтрокаХэшаОтборов = СтрокаХэшаОтборов+Стр.ПолеКод+"@"+Стр.Отбор+"@"+СтрЗначениеОтбора;
		КонецЕсли;	
				
	КонецЦикла;	   
	
	Возврат СтрокаХэшаОтборов;
	
КонецФункции	

Функция ПолучитьОписаниеТаблицыРасшифровкиОперандов() Экспорт 
	
	ТзОперандов = Новый ТаблицаЗначений;
	ТзОперандов.Колонки.Добавить("ИмяВФормуле"					,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	ТзОперандов.Колонки.Добавить("УидГруппыОтборов"				,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(128));
	ТзОперандов.Колонки.Добавить("Показатель"					,Новый ОписаниеТипов("СправочникСсылка.ПоказателиОтчетов"));
	ТзОперандов.Колонки.Добавить("ВидОтчета"					,Новый ОписаниеТипов("СправочникСсылка.ВидыОтчетов"));
	ТзОперандов.Колонки.Добавить("ИндексОтборов"				,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10,0));
    ТзОперандов.Колонки.Добавить("ВидОтчетаКод"					,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
    ТзОперандов.Колонки.Добавить("ПоказательКод"				,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	
	Возврат ТзОперандов;
	
КонецФункции	

Функция ПолучитьОписаниеТаблицыКэшаПериодов() Экспорт 
	
	ТзОперандов = Новый ТаблицаЗначений;
	ТзОперандов.Колонки.Добавить("ПериодС"					,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	ТзОперандов.Колонки.Добавить("ПериодПо"					,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	ТзОперандов.Колонки.Добавить("Периоды");
	
	Возврат ТзОперандов;
	
КонецФункции	

Функция ПолучитьМакетБезСлужебныхОбластей(ПолеТабличногоДокументаМакет) Экспорт
	
	ТабДокДляВывода = Новый ТабличныйДокумент;
	ТабДокДляВывода.Вывести(ПолеТабличногоДокументаМакет);
	
	ОбластьКУдалениюСтроки = ТабДокДляВывода.Области.Найти("ОбластьНастроекРаскрытийСтрок");
	Если НЕ ОбластьКУдалениюСтроки = Неопределено Тогда
		ТабДокДляВывода.УдалитьОбласть(ОбластьКУдалениюСтроки,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;	
	
	ОбластьКУдалениюКолонки = ТабДокДляВывода.Области.Найти("ОбластьНастроекРаскрытийКолонок");
	Если НЕ ОбластьКУдалениюКолонки = Неопределено Тогда
		ТабДокДляВывода.УдалитьОбласть(ОбластьКУдалениюКолонки,ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;	

	Возврат ТабДокДляВывода;
	
КонецФункции	

Процедура УдалитьСлужебныеОбласти(ПолеТабличногоДокументаМакет) Экспорт

	ОбластьКУдалениюСтроки = ПолеТабличногоДокументаМакет.Области.Найти("ОбластьНастроекРаскрытийСтрок");
	Если НЕ ОбластьКУдалениюСтроки = Неопределено Тогда
		ПолеТабличногоДокументаМакет.УдалитьОбласть(ОбластьКУдалениюСтроки,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;	
	
	ОбластьКУдалениюКолонки = ПолеТабличногоДокументаМакет.Области.Найти("ОбластьНастроекРаскрытийКолонок");
	Если НЕ ОбластьКУдалениюКолонки = Неопределено Тогда
		ПолеТабличногоДокументаМакет.УдалитьОбласть(ОбластьКУдалениюКолонки,ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;	
		
КонецПроцедуры	

Процедура ПолучитьГруппировкиТабличногоДокумента(ТабДокумент, ТекущийОбъект)
	
	ТабДокумент.ПоказатьУровеньГруппировокСтрок(ТабДокумент.КоличествоУровнейГруппировокСтрок());
	
	Для Каждого СтрГруппа Из ТекущийОбъект.КэшРаскрываемыхОбластейСгруппированный Цикл
		ТабДокумент.Область(СтрГруппа.ИмяОбласти).Разгруппировать(); 
	КонецЦикла;	
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ТабДокумент);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ЗаписьXML.Закрыть());
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	МассивУзловГрупп = ДокументDOM.ПолучитьЭлементыПоИмени("vg");
	Для Каждого УзелГруппы Из МассивУзловГрупп Цикл		
		Попытка
			
			НомерСтроки = Число(УзелГруппы.ПервыйДочерний.ТекстовоеСодержимое);
			ОбластьНачалаГруппировки = ТабДокумент.Область(НомерСтроки,1,НомерСтроки,1);
			Если Лев(ТабДокумент.Область(НомерСтроки,0,НомерСтроки,0).Имя,9) = "Раскрытие" Тогда
				ОбластьНачалаГруппировки = ТабДокумент.Область(НомерСтроки-1,1,НомерСтроки-1,1);
			КонецЕсли;
			ОбластьНачалаГруппировки.Текст = ОбластьНачалаГруппировки.Текст + "&&" + "[" + УзелГруппы.ТекстовоеСодержимое;

			НомерСтроки = Мин(Число(УзелГруппы.ПоследнийДочерний.ТекстовоеСодержимое)+2, ТабДокумент.ВысотаТаблицы);
			ОбластьОкончанияГруппировки = ТабДокумент.Область(НомерСтроки,1,НомерСтроки,1);
			ОбластьОкончанияГруппировки.Текст = ОбластьОкончанияГруппировки.Текст + "&&" + "]" + УзелГруппы.ТекстовоеСодержимое;
			
		Исключение
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры	

Функция ПолучитьОписаниеТаблицыТекущихОтборов() Экспорт
	
	ТзТекущихОтборов = Новый ТаблицаЗначений;
	ТзТекущихОтборов.Колонки.Добавить("ПолеПредставление",			ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
	ТзТекущихОтборов.Колонки.Добавить("ПолеКод",					ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
	ТзТекущихОтборов.Колонки.Добавить("ВидСравнения");
	ТзТекущихОтборов.Колонки.Добавить("Использовать",				ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТзТекущихОтборов.Колонки.Добавить("Пометка",					ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТзТекущихОтборов.Колонки.Добавить("ЗначениеОтбора");
	ТзТекущихОтборов.Колонки.Добавить("РежимОтбора");
	ТзТекущихОтборов.Колонки.Добавить("ТипЗначения");
    ТзТекущихОтборов.Колонки.Добавить("ВидСравненияСтрока",			ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
    ТзТекущихОтборов.Колонки.Добавить("ОсновноеПолеКод",            ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
	ТзТекущихОтборов.Колонки.Добавить("ОтборВерсии",            	ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());

	
	Возврат ТзТекущихОтборов;

	
КонецФункции	


#Область РаботаСПанельюБланков

Процедура СоздатьРеквизитыДополнительногоБланка(ЭтаФорма,ЭлементРодитель,ИндексБланка,Бланк,Скрытый = Ложь,СвойстваБланка = Неопределено) Экспорт
	
	РеквизитыКДобавлению = Новый Массив;
	
	РеквизитыКДобавлению.Добавить(Новый РеквизитФормы("ОбъектАналитическогоБланка"+ИндексБланка,
			Новый ОписаниеТипов("ОбработкаОбъект.АналитическийБланк"),,,
			Ложь));		
			РеквизитыКДобавлению.Добавить(Новый РеквизитФормы("ПолеТабличногоДокументаМакет"+ИндексБланка,
			Новый ОписаниеТипов("ТабличныйДокумент"),,,
			Ложь));					
			РеквизитыКДобавлению.Добавить(Новый РеквизитФормы("ПримечаниеАналитическогоБланка"+ИндексБланка,
			Новый ОписаниеТипов("ТекстовыйДокумент"),,,
			Ложь));
			РеквизитыКДобавлению.Добавить(Новый РеквизитФормы("НепустыеСтроки"+ИндексБланка,
			Новый ОписаниеТипов("Булево"),,,
			Ложь));
			РеквизитыКДобавлению.Добавить(Новый РеквизитФормы("НепустыеКолонки"+ИндексБланка,
			Новый ОписаниеТипов("Булево"),,,
			Ложь));
			
	ЭтаФорма.ИзменитьРеквизиты(РеквизитыКДобавлению);
	
	ОтчетАБ 		= ЭтаФорма.РеквизитФормыВЗначение("ОбъектАналитическогоБланка"+ИндексБланка);
	ОтчетАБ.Бланк 	= Бланк;
	ЭтаФорма.ЗначениеВРеквизитФормы(ОтчетАБ,"ОбъектАналитическогоБланка"+ИндексБланка);
	
	НГруппа     								= ЭтаФорма.Элементы.Добавить("Бланк_"+ИндексБланка,Тип("ГруппаФормы"),ЭлементРодитель);
	НГруппа.Вид         						= ВидГруппыФормы.Страница;
	НГруппа.Группировка							= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НГруппа.Заголовок							= Строка(Бланк);			
	Если Не СвойстваБланка = Неопределено Тогда
		Если Не СвойстваБланка.ЦветЗакладки = "" Тогда
			 НГруппа.ЦветФона = ЗначениеИзСтрокиВнутр(СвойстваБланка.ЦветЗакладки);
		КонецЕсли;	
		Если Не СвойстваБланка.КартинкаЗакладки = "" Тогда
			 НГруппа.Картинка = ЗначениеИзСтрокиВнутр(СвойстваБланка.КартинкаЗакладки);
		КонецЕсли;
	КонецЕсли;	
	
	НЭлемент 									= ЭтаФорма.Элементы.Добавить("ПолеТабличногоДокументаМакет"+ИндексБланка,Тип("ПолеФормы"),НГруппа);	
	НЭлемент.Вид       							= ВидПоляФормы.ПолеТабличногоДокумента;
	НЭлемент.ПутьКДанным						= "ПолеТабличногоДокументаМакет"+ИндексБланка;
	НЭлемент.РежимМасштабированияПросмотра 		= РежимМасштабированияПросмотра.Обычный;			
	НЭлемент.ОтображатьГруппировки				= Истина;
	НЭлемент.ПоложениеЗаголовка 				= ПоложениеЗаголовкаЭлементаФормы.Нет;
	НЭлемент.Видимость                          = НЕ Скрытый;
	НЭлемент.ОтображатьЗаголовки                = Истина;
	
	
	НЭлемент.УстановитьДействие("ПриИзменении","ПолеТабличногоДокументаМакетПриИзменении");
	НЭлемент.УстановитьДействие("Выбор","ПолеТабличногоДокументаМакетВыбор");	
	НЭлемент.УстановитьДействие("ОбработкаРасшифровки","ПолеТабличногоДокументаМакетОбработкаРасшифровки");
	НЭлемент.УстановитьДействие("ПриИзмененииСодержимогоОбласти","ПолеТабличногоДокументаМакетПриИзмененииСодержимогоОбласти");
	НЭлемент.УстановитьДействие("ПриАктивизации","ПолеТабличногоДокументаМакетПриАктивизацииОбласти");
	НЭлемент.УстановитьДействие("ОбработкаДополнительнойРасшифровки","ПолеТабличногоДокументаМакетОбработкаДополнительнойРасшифровки");
	
	НЭлемент 							= ЭтаФорма.Элементы.Добавить("ПримечаниеАналитическогоБланка"+ИндексБланка,Тип("ПолеФормы"),НГруппа);	
	НЭлемент.Вид      	 				= ВидПоляФормы.ПолеТекстовогоДокумента;
	НЭлемент.ПутьКДанным				= "ПримечаниеАналитическогоБланка"+ИндексБланка;
	НЭлемент.Заголовок 					= НСтр("ru = 'Примечание к текущему бланку'");
	НЭлемент.ЦветТекстаЗаголовка		= Новый Цвет(51, 153, 102);
	НЭлемент.Видимость = Ложь;
	НЭлемент.Высота    = 5;
	НЭлемент.УстановитьДействие("ПриИзменении","ПримечаниеАналитическогоБланкаПриИзменении");
	
	//Добавим выведенные бланки в кэш
	нСтрокаКэшаБланков 					= ЭтаФорма.КэшБланков.Добавить();
	нСтрокаКэшаБланков.Бланк    		= Бланк;
	//нСтрокаКэшаБланков.РежимБланка      = Перечисления.РежимыБланков.БланкМногоПериодный;
	нСтрокаКэшаБланков.ИмяСтраницы      = НГруппа.Имя;
	нСтрокаКэшаБланков.ИмяОбъекта       = "ОбъектАналитическогоБланка"+ИндексБланка;
	нСтрокаКэшаБланков.ИмяМакета        = "ПолеТабличногоДокументаМакет"+ИндексБланка;
	нСтрокаКэшаБланков.Скрытый          = Скрытый;
		
КонецПроцедуры

Процедура ЗаполнитьБланкиДиаграмм(Бланк,МассивБланковДиаграмм) Экспорт
	
	текНаборЗаписей = РегистрыСведений.НастройкиАналитическихБланков.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(Бланк);
	текНаборЗаписей.Прочитать();
		
	Если текНаборЗаписей.Количество() = 1 Тогда
		ЗначениеСохраняемойНастройки = текНаборЗаписей[0].ХранилищеДополнительныхНастроек.Получить();
		тМакет = ЗначениеСохраняемойНастройки.МакетДляВыводаПоказателей;
		Для Каждого Обл Из тМакет.Рисунки Цикл
			Если  Обл.ТипРисунка = ТипРисункаТабличногоДокумента.Диаграмма
				И НЕ  Обл.Расшифровка = Неопределено 
				И Обл.Расшифровка.Свойство("СвязаннаяОбластьИмя") Тогда 
				БланкДанныхДиаграммы      = Обл.Расшифровка.СвязаннаяОбластьБланк;
				Если МассивБланковДиаграмм.Найти(БланкДанныхДиаграммы) = Неопределено Тогда
					МассивБланковДиаграмм.Добавить(БланкДанныхДиаграммы);
				КонецЕСли;
			КонецЕсли;			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиБланки(КлючевыеПараметры,ЭтаФорма,МассивСтраниц,ДанныеДиаграмм = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(КлючевыеПараметры.Сценарий) Тогда
		УстановитьСостояниеНеИспользовать(ЭтаФорма,НСтр("ru = 'Не заполнен сценарий'"));
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(КлючевыеПараметры.ПериодОтчета) Тогда
		УстановитьСостояниеНеИспользовать(ЭтаФорма,НСтр("ru = 'Не заполнен период начала'"));
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(КлючевыеПараметры.ПериодОкончания) Тогда
		УстановитьСостояниеНеИспользовать(ЭтаФорма,НСтр("ru = 'Не заполнен период окончания'"));
		Возврат;
	КонецЕсли;	

	Если Не ЗначениеЗаполнено(КлючевыеПараметры.Валюта) Тогда
		УстановитьСостояниеНеИспользовать(ЭтаФорма,НСтр("ru = 'Не заполнена валюта отображения'"));
		Возврат;
	КонецЕсли;
	
	Если КлючевыеПараметры.ИспользоватьБыстрыйОтборПоОрганизации И Не ЗначениеЗаполнено(КлючевыеПараметры.Организация) Тогда
		УстановитьСостояниеНеИспользовать(ЭтаФорма,НСтр("ru = 'Не заполнена организационная единица'"));
		Возврат;
	КонецЕсли;

	Если КлючевыеПараметры.Свойство("тОрганизации") Тогда
		КлючевыеПараметры.тОрганизации.Очистить();
		Если  КлючевыеПараметры.ИспользоватьБыстрыйОтборПоОрганизации Тогда
			КлючевыеПараметры.тОрганизации.Добавить(ЭтаФорма.Организация);
		КонецЕсли;  
	КонецЕсли;
	
	МакетВыведен = Истина;
				
	//Выводим бланки
	ИндексБланка = 0;
	Для Каждого Страница Из МассивСтраниц Цикл		
		
		СтрБланк  = ЭтаФорма.КэшБланков.НайтиСтроки(Новый Структура("ИмяСтраницы",Страница))[0];
		
		//Для неполных прав проверим возможность вывода
		Если НЕ ПроверитьВозможностьОтображенияВТекущемРежиме(ЭтаФорма,СтрБланк.Бланк.Владелец,СтрБланк.Бланк,КлючевыеПараметры.Организация) Тогда
			Продолжить;
		КонецЕсли;	

		Если СтрБланк.Выведен И НЕ СтрБланк.Скрытый Тогда  //актуальный макет уже обновлен
			//Дополним расшифовку для работы диаграмм, если нужно
			Если ДанныеДиаграмм И НЕ СтрБланк.УстановленаРасшифровкаДиаграммы Тогда
				 УстановитьРасшифровкуОбластиДляДиаграммы(ЭтаФорма,СтрБланк);
			КонецЕсли;	
			//Дальше не идем...
			Продолжить;			 	
		КонецЕсли;	
					
		ОтчетАБ 						= ЭтаФорма.РеквизитФормыВЗначение(СтрБланк.ИмяОбъекта);
		ОтчетАБ.Бланк 			 		= СтрБланк.Бланк;
		ОтчетАБ.Сценарий				= КлючевыеПараметры.Сценарий;
		ОтчетАБ.ПериодОтчета			= КлючевыеПараметры.ПериодОтчета;
		ОтчетАБ.ПериодОтчетаОкончание 	= КлючевыеПараметры.ПериодОкончания;
		ОтчетАБ.Организация 			= КлючевыеПараметры.Организация;
		ОтчетАБ.Проект 			 		= КлючевыеПараметры.Проект;
		ОтчетАБ.Валюта 			 		= КлючевыеПараметры.Валюта;		
		ОтчетАБ.ИдентификаторСеанса     = КлючевыеПараметры.ИдентификаторСеанса;
		
		Если КлючевыеПараметры.Свойство("ЕдиницаИзмерения") Тогда
			ОтчетАБ.ЕдиницаИзмерения 		= КлючевыеПараметры.ЕдиницаИзмерения;
		КонецЕсли;	
		Если КлючевыеПараметры.Свойство("ПравилоОбработки") Тогда
			ОтчетАБ.ТекущееПравило 			= КлючевыеПараметры.ПравилоОбработки;
		КонецЕсли;	
				
		Если КлючевыеПараметры.Свойство("ИспользоватьБыстрыйОтборПоАналитикамВерсии") Тогда
			ОтчетАБ.ИспользоватьБыстрыйОтборПоАналитикамВерсии = Истина;
			Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				Если КлючевыеПараметры.Свойство("Аналитика"+Инд) Тогда
					ОтчетАБ["Аналитика"+Инд] = КлючевыеПараметры["Аналитика"+Инд];
				КонецЕсли;	
			КонецЦикла;		
		КонецЕсли;
		
		СтруктураПараметров     = Новый Структура;
		СтруктураПараметров.Вставить("ПолеТабличногоДокументаМакет",ЭтаФорма[СтрБланк.ИмяМакета]);
		СтруктураПараметров.Вставить("ОбновитьДанные",Истина);
		СтруктураПараметров.Вставить("ДополнительныеНастройки",ОтчетАБ.СТ_ДополнительныеНастройки_Объект); 
		СтруктураПараметров.Вставить("ТекущаяТочность",КлючевыеПараметры.УровеньТочности);
		СтруктураПараметров.Вставить("ТекущийДелитель",КлючевыеПараметры.ТекущийДелитель);
		СтруктураПараметров.Вставить("НомерОсновногоЯзыка",КлючевыеПараметры.НомерОсновногоЯзыка);

		Если КлючевыеПараметры.Свойство("ИспользоватьДополнительныеОтборы") Тогда
			СтруктураПараметров.Вставить("тДополнительныхОтборов",ПодготовитьТаблицуОтборов(КлючевыеПараметры,ЭтаФорма));
		КонецЕсли;
		
		ДополнительныеПараметры = Неопределено;
		Если ЗначениеЗаполнено(КлючевыеПараметры.ДополнительныеПараметрыАдрес) Тогда
			ДополнительныеПараметры  = ПолучитьИзВременногоХранилища(КлючевыеПараметры.ДополнительныеПараметрыАдрес);
		КонецЕсли;
		
		Если Не ДополнительныеПараметры = Неопределено И ДополнительныеПараметры.Свойство("СписокВерсий") Тогда
			СтруктураПараметров.Вставить("СписокВерсий",ДополнительныеПараметры.СписокВерсий);
		КонецЕсли;	
		
		Если Не ДополнительныеПараметры = Неопределено И ДополнительныеПараметры.Свойство("ПараметрыБазовойВерсии") Тогда
			СтруктураПараметров.Вставить("ПараметрыБазовойВерсии",ДополнительныеПараметры.ПараметрыБазовойВерсии);
		КонецЕсли;	
		
		Если КлючевыеПараметры.Свойство("логИзмененныхДанныхАдрес") Тогда
			ОтчетАБ.логИзмененныхДанныхАдрес 		= КлючевыеПараметры.логИзмененныхДанныхАдрес;
		КонецЕсли;
		Если КлючевыеПараметры.Свойство("логИзмененныхКомментариевАдрес") Тогда
			ОтчетАБ.логИзмененныхКомментариевАдрес 		= КлючевыеПараметры.логИзмененныхКомментариевАдрес;
		КонецЕсли;
        Если КлючевыеПараметры.Свойство("УникальныйИдентификатор")  Тогда
			ОтчетАБ.ИдентификаторСеанса 		= КлючевыеПараметры.УникальныйИдентификатор;
		КонецЕсли;
        Если КлючевыеПараметры.Свойство("ТекущееПравило") Тогда
			ОтчетАБ.ТекущееПравило 		= КлючевыеПараметры.ТекущееПравило;
		КонецЕсли;

		ОтчетАБ.ПолучитьРезультирующийМакет(СтруктураПараметров);
		ОтчетАБ.НомерОсновногоЯзыка		= КлючевыеПараметры.НомерОсновногоЯзыка;
		ОтчетАБ.ТекущийДелитель 		= КлючевыеПараметры.ТекущийДелитель;
		ОтчетАБ.ТекущаяТочность 		= КлючевыеПараметры.УровеньТочности;
		
		ЭтаФорма.ЗначениеВРеквизитФормы(ОтчетАБ,СтрБланк.ИмяОбъекта);		
		ИндексБланка = ИндексБланка +1;			
		
		тБланкКэш 			= ЭтаФорма.КэшБланков.НайтиСтроки(Новый Структура("ИмяСтраницы",Страница))[0];
		тБланкКэш.Выведен   = Истина;
		тБланкКэш.Обновлен  = Истина;
		
		//Если бланк диаграммы, то создаим дополнительную расшифровку ячеек для диаграмм
		Если ДанныеДиаграмм Тогда
			УстановитьРасшифровкуОбластиДляДиаграммы(ЭтаФорма,СтрБланк);
		КонецЕсли;	
		
		ОбновитьБланкиДанныхДиагармм(КлючевыеПараметры,ЭтаФорма,СтруктураПараметров.ПолеТабличногоДокументаМакет);
		СброситьСостояниеНеИспользовать(ЭтаФорма);
		
	КонецЦикла;		
			
	
КонецПроцедуры	

Процедура УстановитьРасшифровкуОбластиДляДиаграммы(ЭтаФорма,СтрБланк);
	
	тМакет = ЭтаФорма[СтрБланк.ИмяМакета];
	
	Для ИндСтроки = 1 По тМакет.ВысотаТаблицы Цикл
		Для ИндКолонки = 1 По тМакет.ШиринаТаблицы Цикл
			тЯчейка = тМакет.Область(ИндСтроки,ИндКолонки,ИндСтроки,ИндКолонки);
			Если ТипЗнч(тЯчейка.Расшифровка) = Тип("Структура") Тогда
				Если  тЯчейка.Расшифровка.Свойство("Ссылка") Тогда
					нСтруктура = Новый Структура;
					нСтруктура.Вставить("Ссылка",тЯчейка.Расшифровка.Ссылка);
					нСтруктура.Вставить("УИД",тЯчейка.Расшифровка.УИД);
					нСтруктура.Вставить("ИмяОбласти",тЯчейка.Имя);						
					тЯчейка.Расшифровка = нСтруктура;
				ИначеЕсли тЯчейка.Расшифровка.Свойство("УидФормулы") Тогда
					нСтруктура = Новый Структура;
					Если тЯчейка.Расшифровка.Свойство("ТекстФормулы") Тогда
						нСтруктура.Вставить("ТекстФормулы",тЯчейка.Расшифровка.ТекстФормулы);
					КонецЕсли;
					нСтруктура.Вставить("УидФормулы",тЯчейка.Расшифровка.УидФормулы);
					нСтруктура.Вставить("ИмяОбласти",тЯчейка.Имя);						
					тЯчейка.Расшифровка = нСтруктура;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;		
	
	СтрБланк.УстановленаРасшифровкаДиаграммы = Истина;
	
КонецПроцедуры	

Процедура УстановитьСостояниеНеИспользовать(ЭтаФорма,ТекстСообщения) Экспорт
	
	тСтраница = ЭтаФорма.КэшБланков.НайтиСтроки(Новый Структура("ИмяСтраницы",ЭтаФорма.Элементы.ОсновнаяПанель.ТекущаяСтраница.Имя))[0];
	тМакет    = ЭтаФорма.Элементы[тСтраница.ИмяМакета];
	
	ОтображениеСостояния = тМакет.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = ТекстСообщения;
	
	тМакет.Доступность = Ложь;
	
	//Сбросим кэш актуальности бланков
	Для Каждого СтрКэш Из ЭтаФорма.КэшБланков Цикл	
		СтрКэш.Выведен = Ложь;	
	КонецЦикла	
	
КонецПроцедуры	

Процедура СброситьСостояниеНеИспользовать(ЭтаФорма)
	
	тСтраница = ЭтаФорма.КэшБланков.НайтиСтроки(Новый Структура("ИмяСтраницы",ЭтаФорма.Элементы.ОсновнаяПанель.ТекущаяСтраница.Имя))[0];
	тМакет    = ЭтаФорма.Элементы[тСтраница.ИмяМакета];
	
	ОтображениеСостояния 								= тМакет.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Ложь;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = "";
	
	тМакет.Доступность = Истина;
		
КонецПроцедуры

Функция ПодготовитьТаблицуОтборов(КлючевыеПараметры,ЭтаФорма); 
	
	тРасшифровкаОтборов = Новый ТаблицаЗначений;
	
	тДеревоОтборов      = ЭтаФорма.РеквизитФормыВЗначение("НастройкиОтборов");
	Для Каждого СтрОтборКолонка Из тДеревоОтборов.Колонки Цикл
		тРасшифровкаОтборов.Колонки.Добавить(СтрОтборКолонка.Имя,СтрОтборКолонка.ТипЗначения);	
	КонецЦикла;	
	
	тРасшифровкаОтборов.Колонки.Добавить("ИдентификаторСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));	
	тРасшифровкаОтборов.Колонки.Добавить("ИдентификаторРодителя",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));	
	
	ИдентификаторСтроки = 1;
	
	нСтр  						= тРасшифровкаОтборов.Добавить();
	нСтр.ПолеПредставление      = "Сценарий";
	нСтр.ПолеКод      			= "Сценарий";
	нСтр.ВидСравнения      		= ВидСравненияКомпоновкиДанных.Равно;
	нСтр.Использовать     		= Истина;
	нСтр.ЗначениеОтбора     	= КлючевыеПараметры.Сценарий;
	нСтр.РежимОтбора 	    	= Перечисления.РежимыОтборовАналитическихТаблиц.Данные;
	нСтр.ТипЗначения 	    	= Новый ОписаниеТипов("Справочникссылка.Сценарии");
	нСтр.ИдентификаторСтроки = ИдентификаторСтроки;	
	ИдентификаторСтроки = ИдентификаторСтроки+1;
	
	Если КлючевыеПараметры.ИспользоватьБыстрыйОтборПоОрганизации Тогда
		нСтр  						= тРасшифровкаОтборов.Добавить();
		нСтр.ПолеПредставление      = "Организация";
		нСтр.ПолеКод      			= "Организация";
		нСтр.ВидСравнения      		= ВидСравненияКомпоновкиДанных.Равно;
		нСтр.Использовать     		= Истина;
		нСтр.ЗначениеОтбора     	= КлючевыеПараметры.Организация;
		нСтр.РежимОтбора 	    	= Перечисления.РежимыОтборовАналитическихТаблиц.Данные;
		нСтр.ТипЗначения 	    	= Новый ОписаниеТипов("Справочникссылка.Организации");
		нСтр.ИдентификаторСтроки 	= ИдентификаторСтроки;	
		ИдентификаторСтроки 		= ИдентификаторСтроки+1;
	КонецЕсли;
	
	Для Каждого СтрЭлемент Из ЭтаФорма.НастройкиОтборов.ПолучитьЭлементы()[0].ПолучитьЭлементы() Цикл
		
		нСтр = тРасшифровкаОтборов.Добавить();
		ЗаполнитьЗначенияСвойств(нСтр,СтрЭлемент);	
		нСтр.ИдентификаторСтроки = ИдентификаторСтроки;	
		ИдентификаторСтроки = ИдентификаторСтроки+1;
		
	КонецЦикла;	
	
	Возврат тРасшифровкаОтборов;
	
КонецФункции	

Функция ПроверитьВозможностьОтображенияВТекущемРежиме(ЭтаФорма,тВидОтчета,тШаблонОтчета,тОрганизация) Экспорт
		
	ТекстПроверкаПравБланк =	 ПолныеПраваУХ.ПроверитьВозможностьОтображенияПоБланкуОтчета(тШаблонОтчета,тОрганизация,ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
	
	Если НЕ ПустаяСтрока(ТекстПроверкаПравБланк) Тогда
		УстановитьСостояниеНеИспользовать(ЭтаФорма,ТекстПроверкаПравБланк);
		Возврат Ложь;	
	Иначе	
		Возврат Истина;
	КонецЕсли;
	
КонецФункции	


#КонецОбласти


#Область РаботаСДиаграммами

Процедура ОбновитьБланкиДанныхДиагармм(КлючевыеПараметры,ЭтаФорма,ТекМакет) Экспорт
	
	МассивСтраницДиаграмм  = Новый Массив;
	
	Для Каждого Обл Из ТекМакет.Рисунки Цикл
		Если  Обл.ТипРисунка = ТипРисункаТабличногоДокумента.Диаграмма
			И НЕ Обл.Расшифровка = Неопределено И
			Обл.Расшифровка.Свойство("СвязаннаяОбластьИмя") Тогда 
			
			ИмяОбластиДанныхДиаграммы = Обл.Расшифровка.СвязаннаяОбластьИмя;
			БланкДанныхДиаграммы      = Обл.Расшифровка.СвязаннаяОбластьБланк;
			
			//Ищем бланк с данными диаграммы в текущем кэше
			тБланк = ЭтаФорма.КэшБланков.НайтиСтроки(Новый Структура("Бланк",БланкДанныхДиаграммы));
			Если тБланк.Количество() = 1 Тогда
				БланкИсточник = тБланк[0];	
				Если МассивСтраницДиаграмм.Найти(БланкИсточник.ИмяСтраницы) = Неопределено Тогда	
					МассивСтраницДиаграмм.Добавить(БланкИсточник.ИмяСтраницы);
				КонецЕсли;				
			КонецЕсли;			
		КонецЕсли;			
	КонецЦикла;	
	
	//Обновим страницы данных диаграмм
	ВывестиБланки(КлючевыеПараметры,ЭтаФорма,МассивСтраницДиаграмм,Истина);
	
	Для Каждого Обл Из ТекМакет.Рисунки Цикл
		Если  Обл.ТипРисунка = ТипРисункаТабличногоДокумента.Диаграмма
			И НЕ Обл.Расшифровка = Неопределено И
			Обл.Расшифровка.Свойство("СвязаннаяОбластьИмя") Тогда 
 
			ИмяОбластиДанныхДиаграммы = Обл.Расшифровка.СвязаннаяОбластьИмя;
			БланкДанныхДиаграммы      = Обл.Расшифровка.СвязаннаяОбластьБланк;
			//Ищем бланк с данными диаграммы в текущем кэше
			тБланк = ЭтаФорма.КэшБланков.НайтиСтроки(Новый Структура("Бланк",БланкДанныхДиаграммы));
			Если тБланк.Количество() = 1 Тогда
				БланкИсточник = тБланк[0];				
			КонецЕсли;			
			ОбновитьОбластьДанныхДиаграммы(ЭтаФорма,Обл,БланкИсточник);		
		КонецЕсли;			
	КонецЦикла;	

	
КонецПроцедуры

Процедура ОбновитьОбластьДанныхДиаграммы(ЭтаФорма,тДиаграмма,БланкИсточник)
	
	ИмяОбластиДанныхДиаграммы = тДиаграмма.Расшифровка.СвязаннаяОбластьИмя;

	БланкОбъект               = ЭтаФорма[БланкИсточник.ИмяОбъекта];
	ЭталонныйМакет            = БланкОбъект.ЭталонныйМакет;
	тВыводимыхОбластей        = ПолучитьИзВременногоХранилища(БланкОбъект.тКэшОбластейРаскрытияАдрес);
    СтруктураМакетаСтрок      = ПолучитьИзВременногоХранилища(БланкОбъект.СтруктураМакетаСтрокАдрес);
	СтруктураМакетаКолонок    = ПолучитьИзВременногоХранилища(БланкОбъект.СтруктураМакетаКолонокАдрес);
	тМакет                    = ЭтаФорма[БланкИсточник.ИмяМакета];
	
	КоординатыОбластиВИсходномМакете = 	ЭталонныйМакет.Область(ИмяОбластиДанныхДиаграммы);
	тВыводимыхОбластейКопия = тВыводимыхОбластей.СкопироватьКолонки();
	тВыводимыхОбластейКопия.Колонки.Добавить("ВсегоЯчеекВОбластиРаскрытияСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));
	тВыводимыхОбластейКопия.Колонки.Добавить("ВсегоЯчеекВОбластиРаскрытияКолонки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));
	Для Каждого тОбласть Из тВыводимыхОбластей Цикл
		Если КоординатыОбластиВИсходномМакете.Лево-1<=тОбласть.Право
			И КоординатыОбластиВИсходномМакете.Право-1>=тОбласть.Лево
			И КоординатыОбластиВИсходномМакете.Верх-1<=тОбласть.Низ
			И КоординатыОбластиВИсходномМакете.Низ-1>= тОбласть.Верх  Тогда
			нВложенныеОбласти = тВыводимыхОбластейКопия.Добавить();
			ЗаполнитьЗначенияСвойств(нВложенныеОбласти,тОбласть);
			Если тОбласть.ТипОбласти = "Строки" Тогда
				Если СтруктураМакетаСтрок.Свойство(тОбласть.ИмяОбластиСтрок) Тогда
					нВложенныеОбласти.ВсегоЯчеекВОбластиРаскрытияСтроки =  СтруктураМакетаСтрок[тОбласть.ИмяОбластиСтрок];
				Иначе
					нВложенныеОбласти.ВсегоЯчеекВОбластиРаскрытияСтроки =  0;
				КонецЕсли;
			ИначеЕсли тОбласть.ТипОбласти = "Колонки" Тогда	
				Если СтруктураМакетаКолонок.Свойство(тОбласть.ИмяОбластиКолонок) Тогда
					нВложенныеОбласти.ВсегоЯчеекВОбластиРаскрытияКолонки =  СтруктураМакетаКолонок[тОбласть.ИмяОбластиКолонок];
				Иначе
					нВложенныеОбласти.ВсегоЯчеекВОбластиРаскрытияКолонки =  0;
				КонецЕсли;		
			ИначеЕсли тОбласть.ТипОбласти = "Таблица" Тогда		
				 Если СтруктураМакетаСтрок.Свойство(тОбласть.ИмяОбластиСтрок) Тогда
					нВложенныеОбласти.ВсегоЯчеекВОбластиРаскрытияСтроки =  СтруктураМакетаСтрок[тОбласть.ИмяОбластиСтрок];
				Иначе
					нВложенныеОбласти.ВсегоЯчеекВОбластиРаскрытияСтроки =  0;
				КонецЕсли;
                Если СтруктураМакетаКолонок.Свойство(тОбласть.ИмяОбластиКолонок) Тогда
					нВложенныеОбласти.ВсегоЯчеекВОбластиРаскрытияКолонки =  СтруктураМакетаКолонок[тОбласть.ИмяОбластиКолонок];
				Иначе
					нВложенныеОбласти.ВсегоЯчеекВОбластиРаскрытияКолонки =  0;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	
	
	тВыводимыхОбластейКопия.Сортировать("Лево,Верх");
	
	Если тВыводимыхОбластейКопия.Количество() = 1 
		И тВыводимыхОбластейКопия[0].ТипОбласти = "Синтетика" 
		И  НЕ тМакет.Области.Найти(ИмяОбластиДанныхДиаграммы) = Неопределено  Тогда
		тДиаграмма.Объект.ИсточникДанных = тМакет.Область(ИмяОбластиДанныхДиаграммы);
		Возврат;
	КонецЕсли;	
	
	КоординатыИсточникаВерх = 0;
	КоординатыИсточникаЛево = 0;
	КоординатыИсточникаНиз  = 0;
	КоординатыИсточникаПраво = 0;
	
	Если НЕ тВыводимыхОбластейКопия.Количество() = 0 Тогда
		
		ПерваяСтрока 		= тВыводимыхОбластейКопия[0];
		ПоследняяСтрока    = тВыводимыхОбластейКопия[тВыводимыхОбластейКопия.Количество()-1];
		
		Если ПерваяСтрока.ТипОбласти = "Синтетика" Тогда			
			КоординатыИсточникаВерх = (КоординатыОбластиВИсходномМакете.Верх-1)+ (ПерваяСтрока.СдвигY-ПерваяСтрока.Верх);		
			КоординатыИсточникаЛево = (КоординатыОбластиВИсходномМакете.Лево-1)+ПерваяСтрока.СдвигX-ПерваяСтрока.Лево;		 	
		Иначе	
			
		КонецЕсли;	 	 
		
		Если ПоследняяСтрока.ТипОбласти = "Синтетика" Тогда
			КоординатыИсточникаНиз = (КоординатыОбластиВИсходномМакете.Низ-2)+ПоследняяСтрока.СдвигY;
			КоординатыИсточникаНиз = (КоординатыОбластиВИсходномМакете.Низ-1)+ (ПоследняяСтрока.СдвигY-ПоследняяСтрока.Верх);		
			
			КоординатыИсточникаПраво = (КоординатыОбластиВИсходномМакете.Право-2)+ПоследняяСтрока.СдвигX;		 
		ИначеЕсли ПоследняяСтрока.ТипОбласти = "Строки" Тогда 	
			КоординатыИсточникаНиз = ПоследняяСтрока.СдвигY+ПоследняяСтрока.ВсегоЯчеекВОбластиРаскрытияСтроки-1;
			КоординатыИсточникаПраво = (КоординатыОбластиВИсходномМакете.Право-2)+ПоследняяСтрока.СдвигX;	
		ИначеЕсли ПоследняяСтрока.ТипОбласти = "Колонки" Тогда 	
			КоординатыИсточникаНиз = (КоординатыОбластиВИсходномМакете.Низ-2)+ПоследняяСтрока.СдвигY;
			КоординатыИсточникаПраво = ПоследняяСтрока.СдвигX+ПоследняяСтрока.ВсегоЯчеекВОбластиРаскрытияКолонки-1;	
		ИначеЕсли  ПоследняяСтрока.ТипОбласти = "Таблица" Тогда 	
			КоординатыИсточникаНиз 		= ПоследняяСтрока.СдвигY+ПоследняяСтрока.ВсегоЯчеекВОбластиРаскрытияСтроки-1;
			КоординатыИсточникаПраво 	= ПоследняяСтрока.СдвигX+ПоследняяСтрока.ВсегоЯчеекВОбластиРаскрытияКолонки-1;	
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(КоординатыИсточникаВерх)
		И ЗначениеЗаполнено(КоординатыИсточникаЛево)
		И ЗначениеЗаполнено(КоординатыИсточникаПраво)
		И ЗначениеЗаполнено(КоординатыИсточникаНиз) Тогда
		тДиаграмма.Объект.ИсточникДанных = тМакет.Область(КоординатыИсточникаВерх,КоординатыИсточникаЛево,КоординатыИсточникаНиз,КоординатыИсточникаПраво);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


 #Область РаботаСЖурналомДействий

Процедура ОтменитьДействие(ЭтаФорма,МассивВыделенныхТранзакций = Неопределено) Экспорт
	
	тТранзакции =  ЭтаФорма.Транзакции.Выгрузить();
	тТранзакции.Сортировать("НомерТранзакции УБЫВ");
	
	ЛогИзмененныхПоказателей 		= ПолучитьЛогИзмененныхПоказателей(ЭтаФорма.УникальныйИдентификатор);
	ЛогИзмененныхПоказателей.Индексы.Добавить("НомерТранзакции");
	ЛогИзмененныхПоказателейREDO 	= ПолучитьИзВременногоХранилища(ЭтаФорма.АдресЛогаИзмененныхПоказателейREDO);
	
	ЭтаФорма.НомерТранзакцииREDO = ЭтаФорма.НомерТранзакцииREDO+1;
	
	Если МассивВыделенныхТранзакций = Неопределено Тогда
		МассивВыделенныхТранзакций = Новый Массив;
		Если тТранзакции.Количество() >0 Тогда
			  МассивВыделенныхТранзакций.Добавить(тТранзакции[0].НомерТранзакции);
		 КонецЕсли;	 	 
	КонецЕсли;	
	
	Если Не МассивВыделенныхТранзакций.Количество() = 0 Тогда
		
		Для Каждого НТранзакции Из  МассивВыделенныхТранзакций Цикл
			
			ЗаписиПоследнейТранзакции  = ЛогИзмененныхПоказателей.НайтиСтроки(Новый Структура("НомерТранзакции",НТранзакции));
			МассивУдаляемыхТранзакций  = Новый Массив;
			
			//Запомним записи лога в памяти для возможности отката отмены транзакции
			Для Каждого Стр Из ЗаписиПоследнейТранзакции Цикл
				МассивУдаляемыхТранзакций.Добавить(Стр);
			КонецЦикла;	
			
			Для Каждого УдСтрока Из МассивУдаляемыхТранзакций Цикл	
				нСтрока 				= ЛогИзмененныхПоказателейREDO.Добавить();
				ЗаполнитьЗначенияСвойств(нСтрока,УдСтрока);
				нСтрока.НомерТранзакции	 = ЭтаФорма.НомерТранзакцииREDO;					
			КонецЦикла;	
			
			//Удалим записи транзакции из регистра лога.	
			НаборЗаписей = РегистрыСведений.ЛогИзмененныхЗначенийПоказателейОтчетов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.УникальныйИдентификаторСеанса.Установить(ЭтаФорма.УникальныйИдентификатор);
			НаборЗаписей.Отбор.НомерТранзакции.Установить(НТранзакции);
			НаборЗаписей.Записать(Истина);
				
			ПоследняяТранзакция    = тТранзакции.Найти(НТранзакции,"НомерТранзакции");
			
			нТранзакцияПовторить 					= ЭтаФорма.ТранзакцииПовторить.Добавить();
			ЗаполнитьЗначенияСвойств(нТранзакцияПовторить,ПоследняяТранзакция);
			нТранзакцияПовторить.НомерТранзакции	= ЭтаФорма.НомерТранзакцииREDO;

			тТранзакции.Удалить(ПоследняяТранзакция);
			тТранзакции.Сортировать("НомерТранзакции");
			ЭтаФорма.Транзакции.Загрузить(тТранзакции);
				
		КонецЦикла;
		
		ЭтаФорма.АдресЛогаИзмененныхПоказателейREDO 	= ПоместитьВоВременноеХранилище(ЛогИзмененныхПоказателейREDO,ЭтаФорма.УникальныйИдентификатор);
		
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементовЖурналаДействий(ЭтаФорма);
	
КонецПроцедуры

Процедура ПовторитьДействие(ЭтаФорма,МассивВыделенныхТранзакций = Неопределено) Экспорт
	
	тТранзакции =  ЭтаФорма.ТранзакцииПовторить.Выгрузить();
	тТранзакции.Сортировать("НомерТранзакции УБЫВ");
	
	ТекЛогИзмененныхПоказателей 	= РегистрыСведений.ЛогИзмененныхЗначенийПоказателейОтчетов.СоздатьНаборЗаписей().ВыгрузитьКолонки();
    ЛогИзмененныхПоказателейREDO 	= ПолучитьИзВременногоХранилища(ЭтаФорма.АдресЛогаИзмененныхПоказателейREDO);
	
	ЭтаФорма.НомерТранзакции = ЭтаФорма.НомерТранзакции+1;
	
	Если МассивВыделенныхТранзакций = Неопределено Тогда
		МассивВыделенныхТранзакций = Новый Массив;
		Если тТранзакции.Количество() >0 Тогда
			  МассивВыделенныхТранзакций.Добавить(тТранзакции[0].НомерТранзакции);
		 КонецЕсли;	 	 
	КонецЕсли;	
	
	Если Не МассивВыделенныхТранзакций.Количество() = 0 Тогда
		
		Для Каждого НТранзакции Из  МассивВыделенныхТранзакций Цикл
			
			ЗаписиПоследнейТранзакции  = ЛогИзмененныхПоказателейREDO.НайтиСтроки(Новый Структура("НомерТранзакции",НТранзакции));
			МассивУдаляемыхТранзакций  = Новый Массив;
			
			Для Каждого Стр Из ЗаписиПоследнейТранзакции Цикл
				МассивУдаляемыхТранзакций.Добавить(Стр);
			КонецЦикла;	
			
			Сч=1;
			Для Каждого УдСтрока Из МассивУдаляемыхТранзакций Цикл
								
				нСтрока 				= ТекЛогИзмененныхПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(нСтрока,УдСтрока);
				нСтрока.УникальныйИдентификаторСеанса = ЭтаФорма.УникальныйИдентификатор;
				нСтрока.НомерТранзакции	 = ЭтаФорма.НомерТранзакции;
				нСтрока.НомерЗаписи      = Сч;
				
				Сч = Сч+1; 
				
				ЛогИзмененныхПоказателейREDO.Удалить(УдСтрока);
				
			КонецЦикла;	
			
			НаборЗаписей = РегистрыСведений.ЛогИзмененныхЗначенийПоказателейОтчетов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.УникальныйИдентификаторСеанса.Установить(ЭтаФорма.УникальныйИдентификатор);
			НаборЗаписей.Отбор.НомерТранзакции.Установить(ЭтаФорма.НомерТранзакции);
			НаборЗаписей.Загрузить(ТекЛогИзмененныхПоказателей);
			НаборЗаписей.Записать(Ложь);
			
			ПоследняяТранзакция    = тТранзакции.Найти(НТранзакции,"НомерТранзакции");

			нТранзакцияПовторить 					= ЭтаФорма.Транзакции.Добавить();
			ЗаполнитьЗначенияСвойств(нТранзакцияПовторить,ПоследняяТранзакция);
			нТранзакцияПовторить.НомерТранзакции	= ЭтаФорма.НомерТранзакции;

			тТранзакции.Удалить(ПоследняяТранзакция);
			тТранзакции.Сортировать("НомерТранзакции");
			ЭтаФорма.ТранзакцииПовторить.Загрузить(тТранзакции);
				
		КонецЦикла;
		
		ЭтаФорма.АдресЛогаИзмененныхПоказателейREDO 	= ПоместитьВоВременноеХранилище(ЛогИзмененныхПоказателейREDO,ЭтаФорма.УникальныйИдентификатор);

				
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементовЖурналаДействий(ЭтаФорма);
	
КонецПроцедуры

Процедура ДобавитьЗаписьвЖурналДействий(ЭтаФорма,ПредставлениеТранзакции,ТекущаяОбласть) Экспорт

	СтрокаПредставлениеОбласти = "";
	Если  ЗначениеЗаполнено(ТекущаяОбласть) Тогда
		 Если ТипЗнч(ТекущаяОбласть) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			 Если  ТекущаяОбласть.Лево = ТекущаяОбласть.Право 
				 И ТекущаяОбласть.Верх = ТекущаяОбласть.Низ
				 И ЗначениеЗаполнено(ТекущаяОбласть.Расшифровка)
				 И ТекущаяОбласть.Расшифровка.Свойство("Ссылка") Тогда
				 
				 ПолеТабличногоДокументаМакет = ЭтаФорма[ЭтаФорма.ТекущийМакет];
				 тОбласть 					  = ТекущаяОбласть;
				 СтруктураРасшифровки         = Новый Структура;
				 
				 //Строки
				 ОбластьРасшифровкиСтроки  =  ПолеТабличногоДокументаМакет.Область(тОбласть.Верх,1,тОбласть.Низ,1);
				 Если  НЕ ОбластьРасшифровкиСтроки.Расшифровка = Неопределено Тогда
					 Для Каждого рСтроки Из ОбластьРасшифровкиСтроки.Расшифровка Цикл
						 Если НЕ рСтроки.Значение = Неопределено Тогда
							 СтруктураРасшифровки.Вставить(рСтроки.Ключ,рСтроки.Значение);
						 КонецЕсли;
					 КонецЦикла;	
				 КонецЕсли;	
				 
				 //Колонки
				 ОбластьРасшифровкиКолонки =  ПолеТабличногоДокументаМакет.Область(1,тОбласть.Лево,1,тОбласть.Право);
				 Если  НЕ ОбластьРасшифровкиКолонки.Расшифровка = Неопределено Тогда
					 Для Каждого рКолонки Из ОбластьРасшифровкиКолонки.Расшифровка Цикл
						 Если НЕ рКолонки.Значение = Неопределено Тогда
							 СтруктураРасшифровки.Вставить(рКолонки.Ключ,рКолонки.Значение); 
						 КонецЕсли;
					 КонецЦикла;	
				 КонецЕсли;	
				 
				 тПериод = "";
				 Если СтруктураРасшифровки.Свойство("ПериодОтчета") Тогда
					  тПериод =  СтруктураРасшифровки.ПериодОтчета;
				 КонецЕсли;	 
					 
				 СтрокаПредставлениеОбласти = НСтр("ru = 'Показатель: '")+ТекущаяОбласть.Расшифровка.Ссылка+", "+тПериод;
			Иначе	 
				 СтрокаПредставлениеОбласти = НСтр("ru = 'Область: '")+ТекущаяОбласть.Имя;
			КонецЕсли;
		 КонецЕсли;	
	КонецЕсли;
	
	тТранзакций 								= ЭтаФорма.Транзакции.Добавить();
	тТранзакций.НомерТранзакции 				= ЭтаФорма.НомерТранзакции;
	тТранзакций.ПредставлениеТранзакции 		= ПредставлениеТранзакции;
	тТранзакций.ПредставлениеТранзакцииСтрока 	= Строка(ПредставлениеТранзакции)+ "    ("+СтрокаПредставлениеОбласти+")";
	
	ЭтаФорма.НомерТранзакции = ЭтаФорма.НомерТранзакции+1;
	
	ЭтаФорма.ТранзакцииПовторить.Очистить();
	
	УстановитьВидимостьДоступностьЭлементовЖурналаДействий(ЭтаФорма);
	
КонецПроцедуры

Процедура УстановитьВидимостьДоступностьЭлементовЖурналаДействий(ЭтаФорма) Экспорт
		
	ЭтаФорма.Элементы.ОтменитьПрименитьПодробно.Доступность = ЭтаФорма.Транзакции.Количество()>0;
	ЭтаФорма.Элементы.ОтменитьДействие.Доступность          = ЭтаФорма.Транзакции.Количество()>0;
	ЭтаФорма.Элементы.ПовторитьДействие.Доступность         = ЭтаФорма.ТранзакцииПовторить.Количество()>0;
	ЭтаФорма.Элементы.Применить.Доступность                 = ЭтаФорма.Транзакции.Количество()>0;
	
КонецПроцедуры	

#КонецОбласти


#Область РаботаСКомандамиИзмененияДанных

Функция РассчитатьЗависимыеПоказатели(ЭтаФорма, Валюта, АдресТаблицыИзмененныхПоказателей, РасчетПоТекущимВидамОтчетов = Истина) Экспорт 
	
	ОбработкаОбъект = ЭтаФорма.РеквизитФормыВЗначение("РасчетИЗаписьПоказателей");
	ОбработкаОбъект.АдресТаблицыИзмененныхПоказателей = АдресТаблицыИзмененныхПоказателей; 		
	
	Результат = ОбработкаОбъект.РассчитатьПоЗначениямИзмененныхПоказателей(ЭтаФорма.НомерТранзакции, ЭтаФорма.РасчетПоСвязаннымВидамОтчетов, РасчетПоТекущимВидамОтчетов); 
	
	Если Результат Тогда
		
		// Обновим связанные ячейки	
		Если ЗначениеЗаполнено(ОбработкаОбъект.АдресТаблицыРассчитанныхПоказателей) Тогда
			ТаблицаРассчитаныхПоказателей   = ПолучитьИзВременногоХранилища(ОбработкаОбъект.АдресТаблицыРассчитанныхПоказателей);
		Иначе	
			ТаблицаРассчитаныхПоказателей   = Новый ТаблицаЗначений;
		КонецЕсли;
		
		ТаблицаИзмененныхПоказателей 	= ПолучитьИзВременногоХранилища(АдресТаблицыИзмененныхПоказателей).Скопировать();
		ОбновитьЗависимыеЯчейки(ЭтаФорма,Валюта,ТаблицаИзмененныхПоказателей,ТаблицаРассчитаныхПоказателей); 
		
	КонецЕсли;	
	
	ЭтаФорма.ЗначениеВРеквизитФормы(ОбработкаОбъект, "РасчетИЗаписьПоказателей");
	
	Возврат Результат;
	
КонецФункции

Функция ВставитьЗначениеПоказателя(ЭтаФорма,Валюта,ИмяОбласти,Значение,ОписаниеИзменений="",ПредставлениеТранзакции) Экспорт
	
	тМакет 								= ЭтаФорма[ЭтаФорма.ТекущийМакет];	
	СтруктураРасшифровки 				= Новый Структура;
	ОбъектАБ 							= ЭтаФорма.РеквизитФормыВЗначение(ЭтаФорма.ТекущийОбъектАБ);
	АдресТаблицыИзмененныхПоказателей	= ПоместитьВоВременноеХранилище(УправлениеРасчетомПоказателей.ПолучитьОписаниеТаблицыИзмененныхПоказателей(),ЭтаФорма.УникальныйИдентификатор);
    РасчетПоСвязаннымВидамОтчетов       = Константы.АвтоматическийПересчетЗависимыхПоказателей.Получить();
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("АдресТаблицыИзмененныхПоказателей",АдресТаблицыИзмененныхПоказателей);
	СтруктураПараметров.Вставить("ПолеТабличногоДокументаМакет",тМакет);
	СтруктураПараметров.Вставить("ИмяВыделеннойОбласти",ИмяОбласти);
	СтруктураПараметров.Вставить("Значение",Значение);
	СтруктураПараметров.Вставить("ЗначениеДоИзменения",ЭтаФорма.ЗначениеОбластиДоИзменения);
	СтруктураПараметров.Вставить("ОписаниеИзменений",ОписаниеИзменений);
	СтруктураПараметров.Вставить("Объект",ЭтаФорма.ПолучитьСвойстваТекущегоОбъектаСервер());
	СтруктураПараметров.Вставить("НомерТранзакции",ЭтаФорма.НомерТранзакции);
	СтруктураПараметров.Вставить("ПредставлениеТранзакции",ПредставлениеТранзакции);
	СтруктураПараметров.Вставить("УидФормы",ЭтаФорма.УникальныйИдентификатор);
	СтруктураПараметров.Вставить("ИзменятьЗначениеВячейке",ЭтаФорма.ПараметрыКонтекстногоОбновленияЗависимыхЯчеек = Перечисления.ПараметрыКонтекстногоОбновленияЗависимыхЯчеек.Вручную);

	ОбъектАБ.ИзменитьСодержимоеОбласти(СтруктураПараметров);

	ЭтаФорма.ЗначениеВРеквизитФормы(ОбъектАБ, ЭтаФорма.ТекущийОбъектАБ);
	
	// Выполним расчет зависимых показателей
	РассчитатьЗависимыеПоказатели(ЭтаФорма, Валюта, АдресТаблицыИзмененныхПоказателей); 
	
	Для Каждого СтрКэш Из ЭтаФорма.КэшБланков Цикл	
		СтрКэш.Выведен = Ложь;	
	КонецЦикла;	
	
	ДобавитьЗаписьвЖурналДействий(ЭтаФорма,ПредставлениеТранзакции,тМакет.Область(ИмяОбласти));
	
	Возврат СтруктураРасшифровки;
	
КонецФункции

Процедура СкопироватьЗначения(ЭтаФорма,Валюта,ИмяОбласти,МассивЗначений,КодРесурса="",ОписаниеИзменений,ПредставлениеТранзакции) Экспорт
	
	Если ТипЗнч(МассивЗначений) = Тип("Массив")
		И МассивЗначений.Количество() =0 Тогда
		Возврат;
	КонецЕсли;	
	
	тМакет 				= ЭтаФорма[ЭтаФорма.ТекущийМакет];	
	ОбъектАБ 			= ЭтаФорма.РеквизитФормыВЗначение(ЭтаФорма.ТекущийОбъектАБ);
	тОбъектСтруктура 	= Новый Структура;	
	АдресТаблицыИзмененныхПоказателей	= ПоместитьВоВременноеХранилище(УправлениеРасчетомПоказателей.ПолучитьОписаниеТаблицыИзмененныхПоказателей(),ЭтаФорма.УникальныйИдентификатор);
	РасчетПоСвязаннымВидамОтчетов       = Константы.АвтоматическийПересчетЗависимыхПоказателей.Получить();

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("АдресТаблицыИзмененныхПоказателей",АдресТаблицыИзмененныхПоказателей);
	СтруктураПараметров.Вставить("ПолеТабличногоДокументаМакет",тМакет);
	СтруктураПараметров.Вставить("ИмяВыделеннойОбласти",ИмяОбласти);
	СтруктураПараметров.Вставить("Значение",МассивЗначений);
	СтруктураПараметров.Вставить("КодРесурса",КодРесурса);
	СтруктураПараметров.Вставить("ЗначениеДоИзменения",ЭтаФорма.ЗначениеОбластиДоИзменения);
	СтруктураПараметров.Вставить("ОписаниеИзменений",ОписаниеИзменений);
	СтруктураПараметров.Вставить("Объект",ЭтаФорма.ПолучитьСвойстваТекущегоОбъектаСервер());
	СтруктураПараметров.Вставить("НомерТранзакции",ЭтаФорма.НомерТранзакции);
	СтруктураПараметров.Вставить("ПредставлениеТранзакции",ПредставлениеТранзакции);
	СтруктураПараметров.Вставить("УидФормы",ЭтаФорма.УникальныйИдентификатор);
	СтруктураПараметров.Вставить("ИзменятьЗначениеВячейке",ЭтаФорма.ПараметрыКонтекстногоОбновленияЗависимыхЯчеек = Перечисления.ПараметрыКонтекстногоОбновленияЗависимыхЯчеек.Вручную);
    
	ОбъектАБ.ИзменитьСодержимоеОбласти(СтруктураПараметров);
	
	// Выполним расчет зависимых показателей
	РассчитатьЗависимыеПоказатели(ЭтаФорма, Валюта, АдресТаблицыИзмененныхПоказателей);
	
	Для Каждого СтрКэш Из ЭтаФорма.КэшБланков Цикл	
		СтрКэш.Выведен = Ложь;	
	КонецЦикла;	
	
	ДобавитьЗаписьвЖурналДействий(ЭтаФорма,ПредставлениеТранзакции,тМакет.Область(ИмяОбласти));

КонецПроцедуры

Процедура ОчиститьСодержимоеОбласти(ЭтаФорма,Валюта,ИмяОбласти,ОписаниеИзменений) Экспорт
			
	тМакет 								= ЭтаФорма[ЭтаФорма.ТекущийМакет];	
	ОбъектАБ 							= ЭтаФорма.РеквизитФормыВЗначение(ЭтаФорма.ТекущийОбъектАБ);
	АдресТаблицыИзмененныхПоказателей	= ПоместитьВоВременноеХранилище(УправлениеРасчетомПоказателей.ПолучитьОписаниеТаблицыИзмененныхПоказателей(),ЭтаФорма.УникальныйИдентификатор);
	тОбъектСтруктура 					= Новый Структура;
	РасчетПоСвязаннымВидамОтчетов       = Константы.АвтоматическийПересчетЗависимыхПоказателей.Получить();
	
	ПредставлениеТранзакции = Перечисления.ТранзакцииИзмененияПоказателей.ОчисткаДиапазонаЯчеек;
		
	МассивСтрок 		= Новый Массив();
	МассивЗначений 		= Новый Массив();
	МассивЗначений.Добавить("");
	МассивСтрок.Добавить(МассивЗначений);
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("АдресТаблицыИзмененныхПоказателей",АдресТаблицыИзмененныхПоказателей);
	СтруктураПараметров.Вставить("ПолеТабличногоДокументаМакет",тМакет);
	СтруктураПараметров.Вставить("ИмяВыделеннойОбласти",ИмяОбласти);
	СтруктураПараметров.Вставить("Значение",МассивСтрок);
	СтруктураПараметров.Вставить("ЗначениеДоИзменения","");
	СтруктураПараметров.Вставить("ОписаниеИзменений",ОписаниеИзменений);
	СтруктураПараметров.Вставить("Объект",ЭтаФорма.ПолучитьСвойстваТекущегоОбъектаСервер());
	СтруктураПараметров.Вставить("НомерТранзакции",ЭтаФорма.НомерТранзакции);
	СтруктураПараметров.Вставить("ПредставлениеТранзакции",ПредставлениеТранзакции);
	СтруктураПараметров.Вставить("УидФормы",ЭтаФорма.УникальныйИдентификатор);
	СтруктураПараметров.Вставить("ИзменятьЗначениеВячейке",ЭтаФорма.ПараметрыКонтекстногоОбновленияЗависимыхЯчеек = Перечисления.ПараметрыКонтекстногоОбновленияЗависимыхЯчеек.Вручную);
		
	ОбъектАБ.ИзменитьСодержимоеОбласти(СтруктураПараметров);
	
	// Выполним расчет зависимых показателей
	РассчитатьЗависимыеПоказатели(ЭтаФорма, Валюта, АдресТаблицыИзмененныхПоказателей);

	Для Каждого СтрКэш Из ЭтаФорма.КэшБланков Цикл	
		СтрКэш.Выведен = Ложь;	
	КонецЦикла;	
	
	ДобавитьЗаписьвЖурналДействий(ЭтаФорма,ПредставлениеТранзакции,тМакет.Область(ИмяОбласти));
   	
КонецПроцедуры

Процедура ИзменитьЗначенияВОбласти(ЭтаФорма,Валюта,ИмяОбласти,СтруктураПараметров,ОписаниеИзменений) Экспорт;
				
	тМакет 								= ЭтаФорма[ЭтаФорма.ТекущийМакет];	
	ПредставлениеТранзакции 			= Перечисления.ТранзакцииИзмененияПоказателей.ИзменениеПоказателя;
	
	ОблДляВставки=тМакет.Область(ИмяОбласти);
		
	Если ОблДляВставки.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Таблица Тогда
		оВерх 	=  тМакет.ФиксацияСверху+1;
		оНиз  	=  тМакет.ВысотаТаблицы;
		оЛево 	=  тМакет.ФиксацияСлева+1;
		оПраво 	=  тМакет.ШиринаТаблицы;	
	Иначе			
		оВерх 	=  ОблДляВставки.Верх;
		оНиз  	=  ОблДляВставки.Низ;
		оЛево 	=  ОблДляВставки.Лево;
		оПраво 	=  ОблДляВставки.Право;		
	КонецЕсли;
		
	ОС=тМакет.ПолучитьОбласть(ИмяОбласти);
					
	МассивДляВставки 			= Новый Массив;

	Для ИндексСтрока = ОВерх По ОНиз Цикл	
		МассивДляВставкиЗначения 	= Новый Массив();
		Для ИндексКолонка = ОЛево По ОПраво Цикл
			
			ТекОбласть = тМакет.Область(ИндексСтрока,ИндексКолонка,ИндексСтрока,ИндексКолонка);
						
			Если ТекОбласть.СодержитЗначение И  ТекОбласть.ТипЗначения.Типы()[0] = Тип("Число") Тогда
				
				ЗначениеЧисло = ТекОбласть.Значение;
				
				Если СтруктураПараметров.ВидКорректировки = "Процент" Тогда
					ЗначениеЧислоИтог = ЗначениеЧисло*(1+СтруктураПараметров.ЗначениеКорректировки/100);
				ИначеЕсли СтруктураПараметров.ВидКорректировки = "Значение" Тогда	
					ЗначениеЧислоИтог = ЗначениеЧисло+СтруктураПараметров.ЗначениеКорректировки;
				КонецЕсли;
								
				МассивДляВставкиЗначения.Добавить(ЗначениеЧислоИтог);
													
			КонецЕсли;
			
		КонецЦикла;			
		МассивДляВставки.Добавить(МассивДляВставкиЗначения);
	КонецЦикла;
	
	СкопироватьЗначения(ЭтаФорма,Валюта,ИмяОбласти,МассивДляВставки,,,ПредставлениеТранзакции)
	
КонецПроцедуры

Процедура ОчиститьЛогИзмененныхПоказателей(УникальныйИдентификаторСеанса) Экспорт
	
	НаборЗаписей = РегистрыСведений.ЛогИзмененныхЗначенийПоказателейОтчетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УникальныйИдентификаторСеанса.Установить(УникальныйИдентификаторСеанса);
	НаборЗаписей.Записать(Истина);
		
КонецПроцедуры

Функция ВставитьЗначениеКомментария(ЭтаФорма,Валюта,ИмяОбласти,ЗначениеКомментария,СтруктураРасшифровки,КэшАналитикПоказателей,ПредставлениеТранзакции) Экспорт
	
	тМакет 								= ЭтаФорма[ЭтаФорма.ТекущийМакет];	
	ОблДляВставки                       = тМакет.Область(ИмяОбласти);
		
	ПоказательСсылка = СтруктураРасшифровки.ПоказательСсылка;
	ГруппаПоказателя = КэшАналитикПоказателей.Найти(ПоказательСсылка,"Показатель");
	
	тЗаписьКомментария = РегистрыСведений.ЛогИзмененныхКомментариевПоказателейОтчетов.СоздатьМенеджерЗаписи();
	тЗаписьКомментария.УникальныйИдентификаторСеанса 						= ЭтаФорма.УникальныйИдентификатор;
	тЗаписьКомментария.НомерТранзакции  									= ЭтаФорма.НомерТранзакции;
	тЗаписьКомментария.Сценарий                                             = СтруктураРасшифровки.Сценарий;
	тЗаписьКомментария.Показатель                                           = СтруктураРасшифровки.ПоказательСсылка;
	тЗаписьКомментария.Организация                                          = СтруктураРасшифровки.Организация;
	тЗаписьКомментария.ПериодОтчета                                         = СтруктураРасшифровки.ПериодОтчета;
	тЗаписьКомментария.Валюта                                               = Валюта;
	тЗаписьКомментария.Комментарий                                          = ЗначениеКомментария;
	
	Для ИндА=1 По ПараметрыСЕанса.ЧислоДопАналитик Цикл 
		Если НЕ ЗначениеЗаполнено(ГруппаПоказателя["ВидАналитики"+Строка(ИндА)+"Код"]) Тогда 
			Прервать;
		КонецЕсли;
		Если СтруктураРасшифровки.Свойство(ГруппаПоказателя["ВидАналитики"+Строка(ИндА)+"Код"]) Тогда
			тЗаписьКомментария["Аналитика"+ИндА] = СтруктураРасшифровки[СокрЛП(ГруппаПоказателя["ВидАналитики"+Строка(ИндА)+"Код"])];	
		КонецЕсли;	
	КонецЦикла;		

	Если СтруктураРасшифровки.Свойство("АналитикаВалюта") Тогда
		 АналитикаВалюта = ?(СтруктураРасшифровки["АналитикаВалюта"]=Неопределено,Справочники.Валюты.ПустаяСсылка(),СтруктураРасшифровки["АналитикаВалюта"]);
	КонецЕсли;	
	тЗаписьКомментария.АналитикаВалюта = АналитикаВалюта;
	
	Если СтруктураРасшифровки.Свойство("Проект") Тогда
		тЗаписьКомментария.Проект = ?(СтруктураРасшифровки["Проект"]=Неопределено,Справочники.Проекты.ПустаяСсылка(),СтруктураРасшифровки["Проект"]);
	КонецЕсли;
	
	тЗаписьКомментария.ПравилоОбработки = УправлениеОтчетамиУХ.ПолучитьПравилоОбработкиПоУмолчанию(
		ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(СтруктураРасшифровки.ПоказательСсылка, "Владелец"),
		СтруктураРасшифровки.Сценарий, СтруктураРасшифровки.Организация, СтруктураРасшифровки.ПериодОтчета);		
	
	тЗаписьКомментария.Записать();
	
	ОблДляВставки.Примечание.Текст = ЗначениеКомментария;
	
	ДобавитьЗаписьвЖурналДействий(ЭтаФорма,ПредставлениеТранзакции,тМакет.Область(ИмяОбласти));
	
	Возврат СтруктураРасшифровки;
	
КонецФункции

Процедура ОчиситьПоказателиТекущегоЭкземпляраОтчета(ЭтаФорма,Валюта,Периоды,СтруктураДопОтборов) Экспорт
		
	ТаблицаИзмененныхПоказателей = ПолучитьТаблицуДанныхДляОчистки(ЭтаФорма,Периоды,СтруктураДопОтборов);
	ТаблицаИзмененныхПоказателей.Колонки.ПоказательОтчета.Имя  = "Показатель";
	ТаблицаИзмененныхПоказателей.Колонки.Добавить("ПравилоОбработки");
	
	АдресТаблицыИзмененныхПоказателей	= ПоместитьВоВременноеХранилище(ТаблицаИзмененныхПоказателей,ЭтаФорма.УникальныйИдентификатор);

	ПредставлениеТранзакции = Перечисления.ТранзакцииИзмененияПоказателей.ОчисткаДиапазонаЯчеек;
		
	// Выполним расчет зависимых показателей
	РассчитатьЗависимыеПоказатели(ЭтаФорма, Валюта, АдресТаблицыИзмененныхПоказателей, Ложь);

	ДобавитьЗаписьвЖурналДействий(ЭтаФорма,ПредставлениеТранзакции,"");
	
КонецПроцедуры	

Процедура ИмпортироватьПоказателиТекущегоЭкземпляраОтчета(ЭтаФорма,Валюта,Периоды,СтруктураДопОтборов,ТаблицаИмпорта) Экспорт
	
	ТаблицаИзмененныхПоказателей = ПолучитьТаблицуДанныхДляОчистки(ЭтаФорма,Периоды,СтруктураДопОтборов);
	ТаблицаИзмененныхПоказателей.Колонки.ПоказательОтчета.Имя  = "Показатель";
	ТаблицаИзмененныхПоказателей.Колонки.Добавить("ПравилоОбработки");
	
	Для Каждого Стр Из ТаблицаИмпорта Цикл
		Нстр = ТаблицаИзмененныхПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(Нстр,Стр);
	КонецЦикла;	
	
	АдресТаблицыИзмененныхПоказателей	= ПоместитьВоВременноеХранилище(ТаблицаИзмененныхПоказателей,ЭтаФорма.УникальныйИдентификатор);

	ПредставлениеТранзакции = Перечисления.ТранзакцииИзмененияПоказателей.ЗагрузкаИзMSExcel;
			
	// Выполним расчет зависимых показателей
	РассчитатьЗависимыеПоказатели(ЭтаФорма, Валюта, АдресТаблицыИзмененныхПоказателей);
	
	ДобавитьЗаписьвЖурналДействий(ЭтаФорма,ПредставлениеТранзакции,"");
	
КонецПроцедуры	



Функция ПолучитьТаблицуДанныхДляОчистки(ЭтаФорма,Периоды,ДопОтборы) Экспорт
						
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ВидОтчета",ЭтаФорма.Объект.ВидОтчета);
	СтруктураПараметров.Вставить("Сценарий",ЭтаФорма.Объект.Сценарий);
	СтруктураПараметров.Вставить("Организация",ЭтаФорма.Объект.Организация);
	СтруктураПараметров.Вставить("ПериодОтчета",Периоды);
	СтруктураПараметров.Вставить("Валюта",ЭтаФорма.Объект.ОсновнаяВалюта);
	
	Если ЗначениеЗаполнено(ЭтаФорма.Объект.Проект) Тогда
		СтруктураПараметров.Вставить("Проект",ЭтаФорма.Объект.Проект);
	КонецЕсли;	
	
	Для Каждого ДопОтбор Из ДопОтборы Цикл 
		СтруктураПараметров.Вставить(ДопОтбор.Ключ,ДопОтбор.Значение);
	КонецЦикла;
	
	РаскрываемыеАналитики = Новый Структура;
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		РаскрываемыеАналитики.Вставить("Аналитика"+Инд);
	КонецЦикла;	

	РаскрываемыеАналитики.Вставить("АналитикаВалюта");
	
	СтруктураДопПараметров  = Новый Структура;
	СтруктураДопПараметров.Вставить("ИдентификаторСеанса",ЭтаФорма.УникальныйИдентификатор);
	СтруктураДопПараметров.Вставить("РежимИнверсии",Истина);
	
	Возврат СводнаяТаблицаУХ.ПолучитьЗначениеПоказателей(СтруктураПараметров,РаскрываемыеАналитики,СтруктураДопПараметров);
					
КонецФункции	




#КонецОбласти


#Область КонтекстноеОбновлениеЗависимыхПоказателей

Процедура ОбновитьЗависимыеЯчейки(ЭтаФорма,Валюта,ТаблицаИзмененныхПоказателей,ТаблицаРассчитаныхПоказателей) Экспорт

	тОбъектАБ     			= ЭтаФорма[ЭтаФорма.ТекущийОбъектАБ];
    тМакет                  = ЭтаФорма[ЭтаФорма.ТекущийМакет];
	
	//Добавим рассчитанные в основной лог 
	Для Каждого СтрЛог Из ТаблицаРассчитаныхПоказателей Цикл	
		нСтрЛог = ТаблицаИзмененныхПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(нСтрЛог,СтрЛог);	
	КонецЦикла;	
	
	//Если ничего не менялось - выходим.
	Если ТаблицаИзмененныхПоказателей.Количество() = 0 Тогда
		 Возврат;
	КонецЕсли;	
	
	//Если изменилось больше 10% ячеек в документе - быстрее вывести макет целиком
	Если (ТаблицаИзмененныхПоказателей.Количество()*100)/((тМакет.ШиринаТаблицы-1)*(тМакет.ВысотаТаблицы-1))>10 Тогда
		//Сбросим кэш актуальности бланков
		//Для Каждого СтрКэш Из ЭтаФорма.КэшБланков Цикл	
		//	СтрКэш.Выведен = Ложь;	
		//КонецЦикла;	
		//ЭтаФорма.НарисоватьТаблицуСервер();	
		//Возврат;	
	КонецЕсли;	
	
	тВыводимыхОбластей = ПолучитьИзВременногоХранилища(тОбъектАБ.тКэшОбластейРаскрытияАдрес);
	
	тРасшифровкаГруппОтборов = тОбъектАБ.РасшифровкаГруппОтборов.Выгрузить();
	тРасшифровкаГруппОтборов.Индексы.Добавить("УИДГруппыОтборов");
	
	тГруппыОтборов  = тРасшифровкаГруппОтборов.Скопировать();
	тГруппыОтборов.Свернуть("УидГруппыОтборов");
	
	тКэшГруппОтборовПоказателей = тОбъектАБ.КэшГруппОтборовПоказателей.Выгрузить();
	тКэшГруппОтборовПоказателей.Индексы.Добавить("УИДГруппыОтборов");
	
	тИзмененныеПоказатели = ТаблицаИзмененныхПоказателей.Скопировать();
	тИзмененныеПоказатели.Свернуть("Показатель");

	тОбластиСинтетика = ПолучитьИзВременногоХранилища(тОбъектАБ.тзПоказателиАдрес).Скопировать(Новый Структура("ТолькоСинтетика",Истина));
	
	тКэшПоказателейКроссОбластей = ПолучитьИзВременногоХранилища(тОбъектАБ.КэшПоказателейКроссОбластейАдрес);
	тКэшПоказателейКроссОбластей.Индексы.Добавить("ИмяФормулы");
	ТзПоказателиМакетовРаскрытий = ПолучитьИзВременногоХранилища(тОбъектАБ.ПоказателиМакетовРаскрытийАдрес);
	
	ТзЗапросыДляОбновления = Новый ТаблицаЗначений;
	ТзЗапросыДляОбновления.Колонки.Добавить("Показатель");
	ТзЗапросыДляОбновления.Колонки.Добавить("УИДГруппыОтборов");
	ТзЗапросыДляОбновления.Колонки.Добавить("ИндексЗапросаВПакете");
    ТзЗапросыДляОбновления.Колонки.Добавить("СтрокаГруппировок");
    ТзЗапросыДляОбновления.Колонки.Добавить("СтруктураГруппировок");
    ТзЗапросыДляОбновления.Колонки.Добавить("ТекОтбор");
	
	ТзПараметровЗапроса = Новый ТаблицаЗначений;
	ТзПараметровЗапроса.Колонки.Добавить("ИмяОтбора");
	ТзПараметровЗапроса.Колонки.Добавить("ТипОтбора");
	ТзПараметровЗапроса.Колонки.Добавить("ЗначениеОтбора");
    ТзПараметровЗапроса.Колонки.Добавить("УидГруппыОтбора");
	
	КэшАналитикПоказателей 		= ПолучитьИзВременногоХранилища(тОбъектАБ.КэшАналитикПоказателейАдрес);
	мПоказателиРаскрытия    	= ПолучитьИзВременногоХранилища(тОбъектАБ.мПоказателиРаскрытияАдрес);
	ЛогИзмененныхПоказателей    = ПолучитьЛогИзмененныхПоказателей(ЭтаФорма.УникальныйИдентификатор);
	КэшФормулОбластейПоказателей = тОбъектАБ.КэшФормулОбластейПоказателей.Выгрузить();
	
	Если ЗначениеЗаполнено(тОбъектАБ.СтруктураРасшифровкаОбластейХАдрес) Тогда 
		ТзПоказателейОбластейКолонки 			= ПолучитьИзВременногоХранилища(тОбъектАБ.ТзПоказателейОбластейКолонкиАдрес);
		СтруктураРасшифровкаОбластейХ		    = ПолучитьИзВременногоХранилища(тОбъектАБ.СтруктураРасшифровкаОбластейХАдрес);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(тОбъектАБ.СтруктураРасшифровкаОбластейYАдрес) Тогда 
		ТзПоказателейОбластейСтроки 			= ПолучитьИзВременногоХранилища(тОбъектАБ.ТзПоказателейОбластейСтрокиАдрес);
		СтруктураРасшифровкаОбластейY		    = ПолучитьИзВременногоХранилища(тОбъектАБ.СтруктураРасшифровкаОбластейYАдрес);
	КонецЕсли;	
	
	тОбновляемыеОбласти = Новый ТаблицаЗначений;
		
	тОбновляемыеОбласти.Колонки.Добавить("Показатель");
	тОбновляемыеОбласти.Колонки.Добавить("УидГруппыОтборов");
	тОбновляемыеОбласти.Колонки.Добавить("ИмяКроссОбласти");
	тОбновляемыеОбласти.Колонки.Добавить("ПериодОтчета");
	тОбновляемыеОбласти.Колонки.Добавить("Организация");
	тОбновляемыеОбласти.Колонки.Добавить("Сценарий");
	тОбновляемыеОбласти.Колонки.Добавить("Проект");
	тОбновляемыеОбласти.Колонки.Добавить("ЭтоФормула");
	тОбновляемыеОбласти.Колонки.Добавить("СтрГруппировки");
	тОбновляемыеОбласти.Колонки.Добавить("Значение");
	тОбновляемыеОбласти.Колонки.Добавить("ДетальнаяЗапись");
	тОбновляемыеОбласти.Колонки.Добавить("ТипОбласти");
    тОбновляемыеОбласти.Колонки.Добавить("СмещениеХ");
	тОбновляемыеОбласти.Колонки.Добавить("СмещениеY");
	тОбновляемыеОбласти.Колонки.Добавить("ИмяОбластиСтрок");
	тОбновляемыеОбласти.Колонки.Добавить("ИмяОбластиКолонок");
    тОбновляемыеОбласти.Колонки.Добавить("ИмяФормулы");
	тОбновляемыеОбласти.Колонки.Добавить("ИмяОперанда");
	тОбновляемыеОбласти.Колонки.Добавить("ЭтоИтогПоПериоду",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
    тОбновляемыеОбласти.Колонки.Добавить("ЭтоИтогПоАналитике",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());

	МассивУдаляемыхСтрокОбластей = Новый Массив;
		
	тПоказатели 					=  ПолучитьИзВременногоХранилища(тОбъектАБ.ТзСвойстваПоказателейАдрес);	
	СтруктураТекущихГруппУид 		= Новый Структура;	
	ЗаполнитьСтруктураТекущихГруппУид(тГруппыОтборов,тРасшифровкаГруппОтборов,СтруктураТекущихГруппУид);

	Для Каждого СтрПоказатель Из ТаблицаИзмененныхПоказателей Цикл
			
		//Добавление итогов по раскрытиям
		тИтогиПоПоказателям = тКэшПоказателейКроссОбластей.НайтиСтроки(Новый Структура("Показатель",СтрПоказатель.Показатель));
		
		Для Каждого текПоказатель Из тИтогиПоПоказателям Цикл
				
			тПоказатель_ = тПоказатели.Найти(СтрПоказатель.Показатель,"Ссылка");
					
			нТобновляемаяОбласть 				= тОбновляемыеОбласти.Добавить();	
			тАналитикиОбласти                   = СтрРазделить(текПоказатель.СтрГруппировки,";");	
			ФлДетали = Истина;
			
			тГруппаПоказателя = КэшАналитикПоказателей.Найти(СтрПоказатель.Показатель,"Показатель");
			Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				Если  ЗначениеЗаполнено(тГруппаПоказателя["ВидАналитики"+Инд])  Тогда	
					тКэшАналитикаКод = СокрЛП(тГруппаПоказателя["ВидАналитики"+Инд+"Код"]);
						
					Если тОбновляемыеОбласти.Колонки.Найти(тКэшАналитикаКод) = Неопределено Тогда
						тОбновляемыеОбласти.Колонки.Добавить(тКэшАналитикаКод);
					КонецЕсли;	
					
					Если НЕ тАналитикиОбласти.Найти(тКэшАналитикаКод)=Неопределено Тогда
						нТобновляемаяОбласть[тКэшАналитикаКод] = СтрПоказатель["Аналитика"+Инд];
					Иначе							
						Если НЕ тПоказатель_["ВОВидАналитики"+Инд+"Код"] = тКэшАналитикаКод Тогда  //Это аналитика вида отчета
							ФлДетали = Ложь;	
						КонецЕсли;
					КонецЕсли;						
				Иначе	
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			Если ЗначениеЗаполнено(тГруппаПоказателя.ВидАналитикиВалютаКод)  Тогда	
				тКэшАналитикаКод = СокрЛП(тГруппаПоказателя["ВидАналитикиВалютаКод"]);
				Если тОбновляемыеОбласти.Колонки.Найти(тКэшАналитикаКод) = Неопределено Тогда
					тОбновляемыеОбласти.Колонки.Добавить(тКэшАналитикаКод);
				КонецЕсли;	
				Если НЕ тАналитикиОбласти.Найти(тКэшАналитикаКод)=Неопределено Тогда
					нТобновляемаяОбласть[тКэшАналитикаКод] = СтрПоказатель["АналитикаВалюта"];
				ИНаче	
					ФлДетали = Ложь;
				КонецЕсли;		
			КонецЕсли;	
			
			Если НЕ тАналитикиОбласти.Найти("ПериодОтчета")=Неопределено Тогда
				нТобновляемаяОбласть["ПериодОтчета"] = СтрПоказатель["ПериодОтчета"];
			Иначе	
				нТобновляемаяОбласть.ЭтоИтогПоПериоду = Истина;
				ФлДетали = Ложь;
			КонецЕсли;	
			
			Если НЕ тАналитикиОбласти.Найти("Организация")=Неопределено Тогда	
				нТобновляемаяОбласть["Организация"] = СтрПоказатель["Организация"];
			КонецЕсли;	
			
			Если НЕ тАналитикиОбласти.Найти("Сценарий")=Неопределено Тогда	
				нТобновляемаяОбласть["Сценарий"] = СтрПоказатель["Сценарий"];	
			КонецЕсли;	
			
			Если НЕ тАналитикиОбласти.Найти("Проект")=Неопределено Тогда	
				нТобновляемаяОбласть["Проект"] = СтрПоказатель["Проект"];
			КонецЕсли;	
			
			ЗаполнитьЗначенияСвойств(нТобновляемаяОбласть,текПоказатель);
			
			Если текПоказатель.ЭтоФормула Тогда
				МассивУдаляемыхСтрокОбластей.Добавить(нТобновляемаяОбласть);
				ЗаполнитьОперандыОбновляемойОбласти(текПоказатель,нТобновляемаяОбласть,тОбновляемыеОбласти,тКэшПоказателейКроссОбластей);
			КонецЕсли;
			
			//Если  ФлДетали  И СтруктураТекущихГруппУид.Свойство("УИД_"+текПоказатель.УидГруппыОтборов) Тогда
				//Если ЗначениеЗаполнено(СтрПоказатель.ЗначениеВалюта) И Не ЗначениеЗАполнено(СтрПоказатель.Значение) Тогда
				//	нТобновляемаяОбласть.Значение = СтрПоказатель.ЗначениеВалюта;	
				Если тПоказатель_.ТипЗначенияЧисло Тогда	
					нТобновляемаяОбласть.Значение = СтрПоказатель.Значение;
				Иначе
					нТобновляемаяОбласть.Значение = СтрПоказатель.ЗначениеНечисловое;
				КонецЕсли;
								
				нТобновляемаяОбласть.ДетальнаяЗапись = ФлДетали;
			//КонецЕсли;	
						
		КонецЦикла;
						
	КонецЦикла;	

	//Обновление ячеек
	Для Каждого УдСтр Из   МассивУдаляемыхСтрокОбластей Цикл
		тОбновляемыеОбласти.Удалить(УдСтр);
	КонецЦикла;	  
	
	тЗапросыОбновляемыхОбластей 	= тОбновляемыеОбласти.Скопировать(Новый Структура("ДетальнаяЗапись",Ложь),"Показатель,УидГруппыОтборов,СтрГруппировки");
	тОбновляемыеОбласти.Индексы.Добавить("Показатель,УидГруппыОтборов,СтрГруппировки");
	
	тЗапросыОбновляемыхОбластей.Свернуть("Показатель,УидГруппыОтборов,СтрГруппировки");
	тЗапросыОбновляемыхОбластей.Колонки.Добавить("Результат");
	тЗапросыОбновляемыхОбластей.Индексы.Добавить("Показатель,УидГруппыОтборов,СтрГруппировки");
	 		
	тОбновляемыеОбластиФинал = Новый ТаблицаЗначений;	
	тДанные					 = Неопределено;
	
	СтруктураСлужебныхТаблиц    = Новый Структура;
	СтруктураСлужебныхТаблиц.Вставить("КэшАналитикПоказателей",КэшАналитикПоказателей);
	СтруктураСлужебныхТаблиц.Вставить("мПоказателиРаскрытия",мПоказателиРаскрытия);
	СтруктураСлужебныхТаблиц.Вставить("ЛогИзмененныхПоказателей",ЛогИзмененныхПоказателей);
    СтруктураСлужебныхТаблиц.Вставить("тЗапросыОбновляемыхОбластей",тЗапросыОбновляемыхОбластей);
    СтруктураСлужебныхТаблиц.Вставить("тПоказатели",тПоказатели);
	СтруктураСлужебныхТаблиц.Вставить("тВыводимыхОбластей",тВыводимыхОбластей);
	СтруктураСлужебныхТаблиц.Вставить("СтруктураРасшифровкаОбластейХ",СтруктураРасшифровкаОбластейХ);
	СтруктураСлужебныхТаблиц.Вставить("СтруктураРасшифровкаОбластейY",СтруктураРасшифровкаОбластейY);
	СтруктураСлужебныхТаблиц.Вставить("ТзПоказателиМакетовРаскрытий",ТзПоказателиМакетовРаскрытий);

	//Пересчитаем итоговые ячейки бланка, если они есть.
	ОбновитьЗначенияПоказателей(ЭтаФорма,тМакет,тОбновляемыеОбласти,СтруктураСлужебныхТаблиц);
	
	тОперандыОбластей  				=  тКэшПоказателейКроссОбластей.Скопировать(Новый Структура("ЭтоФормула",Истина));
	тОперандыОбластей.Колонки.Добавить("Результат");
	тОперандыОбластей.Индексы.Добавить("ИмяФормулы");
	
	тФормулыОбластей                =  тОбновляемыеОбласти.Скопировать(Новый Структура("ЭтоФормула",Истина));
	СтрокаСверткиФормул             =  "";
	
	тОбновляемыеОбласти.Индексы.Добавить("ИмяОперанда,ИмяФормулы,ИмяКроссОбласти");
	
	Для Каждого Кол Из тФормулыОбластей.Колонки Цикл
		Если Кол.Имя = "Показатель" ИЛИ  Кол.Имя = "УидГруппыОтборов" Тогда
			 Продолжить;
		КонецЕсли;		
		СтрокаСверткиФормул = СтрокаСверткиФормул+Кол.Имя+",";	
	КонецЦикла;	
	
	СтрокаСверткиФормул = ЛЕВ(СтрокаСверткиФормул,СтрДлина(СтрокаСверткиФормул)-1);
	//Вычислим все области с формулами
	тФормулыОбластей.Свернуть(СтрокаСверткиФормул);

	СтруктураСлужебныхТаблиц.Вставить("тФормулыОбластей",тФормулыОбластей);
	СтруктураСлужебныхТаблиц.Вставить("тОперандыОбластей",тОперандыОбластей);
	СтруктураСлужебныхТаблиц.Вставить("КэшФормулОбластейПоказателей",КэшФормулОбластейПоказателей);

	//Пересчитаем ячейки динамических формул бланка, если они есть.
	ОбновитьЗначенияДинамическихФормул(Валюта,тМакет,тОбновляемыеОбласти,СтруктураСлужебныхТаблиц);
	
	ИмяИнтерактивноИзмененнойОбласти = "";
				
КонецПроцедуры

Процедура ПолучитьЗначениеИзТекущихДанных(Валюта,тОбновляемаяОбласть,тПоказатель,СтруктураСлужебныхТаблиц)
	
	
	тАналитикиЗапроса                   = СтрРазделить(тОбновляемаяОбласть.СтрГруппировки,";");
    СтруктураПоиска                     = Новый Структура;
	СтруктураПоиска.Вставить("Показатель",тОбновляемаяОбласть.Показатель);
	СтруктураПоиска.Вставить("Валюта",Валюта);
	
	Для Каждого СтрИтог Из тАналитикиЗапроса Цикл
		
		Если СтрИтог = "" Тогда	
			Продолжить;	
		ИначеЕсли  СтрИтог = "ПериодОтчета" ИЛИ СтрИтог = "Сценарий" ИЛИ СтрИтог = "Организация" ИЛИ СтрИтог = "Проект" Тогда	
			СтруктураПоиска.Вставить(СтрИтог,тОбновляемаяОбласть[СтрИтог]);	
		Иначе	 
			
			тГруппаПоказателя = СтруктураСлужебныхТаблиц.КэшАналитикПоказателей.Найти(тОбновляемаяОбласть.Показатель,"Показатель");
			Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				Если  СокрЛП(тГруппаПоказателя["ВидАналитики"+Инд+"Код"]) = СтрИтог Тогда
										
					СтруктураПоиска.Вставить("Аналитика"+Инд,тОбновляемаяОбласть[СтрИтог]);
	
				КонецЕсли;						
			КонецЦикла;	
			Если тГруппаПоказателя.ВидАналитикиВалютаКод =  СтрИтог Тогда	
				СтруктураПоиска.Вставить("АналитикаВалюта",тОбновляемаяОбласть[СтрИтог]);
			КонецЕсли;	
						
		КонецЕсли;			
		
	КонецЦикла;	
	
	ЗначенияИзЛога = СтруктураСлужебныхТаблиц.ЛогИзмененныхПоказателей.НайтиСтроки(СтруктураПоиска);
	СтруктураПоиска.Удалить("Валюта");
	СтруктураПоиска.Вставить("УидГруппыОтборов",тОбновляемаяОбласть.УидГруппыОтборов);
    ЗначенияИзДанных = СтруктураСлужебныхТаблиц.мПоказателиРаскрытия.НайтиСтроки(СтруктураПоиска);

	ИтоговаяТаблица = СтруктураСлужебныхТаблиц.ЛогИзмененныхПоказателей.СкопироватьКолонки("Значение");
	
	Для Каждого Стр Из ЗначенияИзДанных Цикл
		 Нстр = ИтоговаяТаблица.Добавить();
		 Нстр.Значение = Стр.Значение;
	 КонецЦикла;
	
	Для Каждого Стр Из ЗначенияИзЛога Цикл
		Нстр = ИтоговаяТаблица.Добавить();
		Нстр.Значение = Стр.Значение;
	КонецЦикла;

	Если ИтоговаяТаблица.Количество()>0 Тогда	
		ИтоговаяТаблица.Свернуть(,"Значение");
		тОбновляемаяОбласть.Значение = ИтоговаяТаблица[0].Значение;
	Иначе
		тОбновляемаяОбласть.Значение = 0;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗаполнитьСтруктураТекущихГруппУид(тГруппыОтборов,тРасшифровкаГруппОтборов,СтруктураТекущихГруппУид)

	//Вычисляем обновляемые группы отборов...
	Для Каждого СтрОтбор Из тГруппыОтборов Цикл
		
		РасшифровкиГруппы = тРасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УидГруппыОтборов",СтрОтбор.УидГруппыОтборов));		
		ФлДетали = Истина;
		
		Для Каждого Стр Из РасшифровкиГруппы Цикл
			
			Если Стр.Поле = "Сценарий" И НЕ Стр.Отбор ="Сценарий отчета" Тогда
				 ФлДетали = Ложь;
			КонецЕсли;	
				
			Если Стр.Поле = "Проект" И НЕ Стр.Отбор ="Проект отчета" Тогда
				 ФлДетали = Ложь;
			КонецЕсли;
			
			Если Стр.Поле = "Организация" И НЕ Стр.Отбор ="Организация отчета" Тогда
				 ФлДетали = Ложь;
			КонецЕсли;
			
			Если Стр.Поле = "ПериодС" И НЕ Стр.Отбор ="Период начала отчета" Тогда
				 ФлДетали = Ложь;
			КонецЕсли;

			Если Стр.Поле = "ПериодПо" И НЕ Стр.Отбор ="Период окончания отчета" Тогда
				 ФлДетали = Ложь;
			КонецЕсли;
		
		КонецЦикла;	

		
		Если ФлДетали Тогда
			СтруктураТекущихГруппУид.Вставить("УИД_"+СтрОтбор.УидГруппыОтборов,СтрОтбор.УидГруппыОтборов);
		КонецЕсли;	
			
	КонецЦикла;


КонецПроцедуры	

Процедура ЗаполнитьОперандыОбновляемойОбласти(текПоказатель,нТобновляемаяОбласть,тОбновляемыеОбласти,тКэшПоказателейКроссОбластей)
	
	тОперандыПоПоказателям = тКэшПоказателейКроссОбластей.НайтиСтроки(Новый Структура("ИмяФормулы",текПоказатель.ИмяФормулы));
	
	Для Каждого СтрОперанд Из тОперандыПоПоказателям Цикл		
		нТобновляемаяОбластьОперанд =  тОбновляемыеОбласти.Добавить();
		ЗаполнитьЗначенияСвойств(нТобновляемаяОбластьОперанд,нТобновляемаяОбласть);	
		нТобновляемаяОбластьОперанд.Показатель 			= СтрОперанд.Показатель;		
		нТобновляемаяОбластьОперанд.ИмяОперанда 		= СтрОперанд.ИмяОперанда;
		нТобновляемаяОбластьОперанд.УидГруппыОтборов 	= СтрОперанд.УидГруппыОтборов;	
		нТобновляемаяОбластьОперанд.ДетальнаяЗапись     = Ложь;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьЗначенияПоказателей(ЭтаФорма,тМакет,тОбновляемыеОбласти,СтруктураСлужебныхТаблиц)
	
	тЗапросыОбновляемыхОбластей     = СтруктураСлужебныхТаблиц.тЗапросыОбновляемыхОбластей;
	тПоказатели                     = СтруктураСлужебныхТаблиц.тПоказатели;
	тВыводимыхОбластей              = СтруктураСлужебныхТаблиц.тВыводимыхОбластей;
	СтруктураРасшифровкаОбластейХ   = СтруктураСлужебныхТаблиц.СтруктураРасшифровкаОбластейХ;
	СтруктураРасшифровкаОбластейY   = СтруктураСлужебныхТаблиц.СтруктураРасшифровкаОбластейY;
	ТзПоказателиМакетовРаскрытий    = СтруктураСлужебныхТаблиц.ТзПоказателиМакетовРаскрытий;
	
	Для Каждого тОбновляемаяОбласть Из тОбновляемыеОбласти Цикл
		
		Если тОбновляемаяОбласть.ЭтоФормула Тогда
			 Продолжить;
		КонецЕсли;	
		
		текЗапросВПакете = тЗапросыОбновляемыхОбластей.НайтиСтроки(Новый Структура("Показатель,УИДГруппыОтборов,СтрГруппировки",тОбновляемаяОбласть.Показатель,тОбновляемаяОбласть.УИДГруппыОтборов,тОбновляемаяОбласть.СтрГруппировки));
		
		тПоказатель      = тПоказатели.Найти(тОбновляемаяОбласть.Показатель,"Ссылка");
		
		Если тОбновляемаяОбласть.ТипОбласти = "Синтетика" Тогда
			
			НачалоОбластиY  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигY;
			НачалоОбластиХ  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигX;
			
			КоординатаХ = НачалоОбластиХ+тОбновляемаяОбласть.СмещениеХ-1;
			КоординатаY = НачалоОбластиY+(тОбновляемаяОбласть.СмещениеY-1);
			
			тОбластьДляВывода = тМакет.Область(КоординатаY,КоординатаХ,КоординатаY,КоординатаХ);

			УстановитьЗначениеВЯчейке(ЭтаФорма,тОбновляемаяОбласть,тПоказатель,тОбластьДляВывода,СтруктураСлужебныхТаблиц);			
									
		ИначеЕсли тОбновляемаяОбласть.ТипОбласти = "Колонки" Тогда	
			
			НачалоОбластиY  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигY;
			НачалоОбластиХ  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигX;
			
			
			КоординатаY = НачалоОбластиY+(тОбновляемаяОбласть.СмещениеY-1);
			
			СтруктураГРуппирвок = СтрРазделить(тОбновляемаяОбласть.СтрГруппировки,";");
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора = Новый Структура;
			Для Каждого Кол Из СтруктураГРуппирвок Цикл
				СтруктураОтбора.Вставить(Кол,тОбновляемаяОбласть[Кол]);		
			КонецЦикла;	
					
			СтруктураОтбора 		= Новый Структура;
			ПолнаяСтруктураПоиска 	= СтруктураРасшифровкаОбластейХ[тОбновляемаяОбласть.ИмяОбластиКолонок].Колонки;
			
			Для Каждого Кол Из ПолнаяСтруктураПоиска Цикл
				Если Кол.Имя = "СмещениеХ" ИЛИ Кол.Имя = "ИмяМакета" ИЛИ Кол.Имя = "ЭтоГруппа" Тогда
					Продолжить;
				Иначе
					СтруктураОтбора.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
				КонецЕсли;	
			КонецЦикла;	
			
			
			КоординатаСмещенияX = СтруктураРасшифровкаОбластейХ[тОбновляемаяОбласть.ИмяОбластиКолонок].НайтиСтроки(СтруктураОтбора);
			
			Если КоординатаСмещенияX.Количество() = 1 Тогда
				КоординатаСмещенияX_ 			= КоординатаСмещенияX[0].СмещениеХ;
				КоординатаСмещенияПоказателяX  = ТзПоказателиМакетовРаскрытий.НайтиСтроки(Новый Структура("ТипМакета,Показатель,УидГруппыОтборов,ИмяМакетаКолонок","Колонки",тОбновляемаяОбласть.Показатель,тОбновляемаяОбласть.УидГруппыОтборов, КоординатаСмещенияX[0].ИмяМакета))[0].СмещениеХ;
				
				
				тОбластьДляВывода = тМакет.Область(КоординатаY
				,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX
				,КоординатаY
				,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX);
				
				УстановитьЗначениеВЯчейке(ЭтаФорма,тОбновляемаяОбласть,тПоказатель,тОбластьДляВывода,СтруктураСлужебныхТаблиц);			
				
			КонецЕсли;	
			
		ИначеЕсли тОбновляемаяОбласть.ТипОбласти = "Строки" Тогда	
			
			НачалоОбластиY  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигY;
			НачалоОбластиХ  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигX;
			
			КоординатаХ = НачалоОбластиХ+тОбновляемаяОбласть.СмещениеХ-1;
			
			СтруктураГРуппирвок = СтрРазделить(тОбновляемаяОбласть.СтрГруппировки,";");
			
			СтруктураОтбора = Новый Структура;
			Для Каждого Кол Из СтруктураГРуппирвок Цикл
				СтруктураОтбора.Вставить(Кол,тОбновляемаяОбласть[Кол]);		
			КонецЦикла;	
						
			СтруктураОтбора = Новый Структура;
			ПолнаяСтруктураПоиска =   СтруктураРасшифровкаОбластейY[тОбновляемаяОбласть.ИмяОбластиСтрок].Колонки;
			
			Для Каждого Кол Из ПолнаяСтруктураПоиска Цикл
				Если Кол.Имя = "СмещениеY" ИЛИ Кол.Имя = "ИмяМакета" ИЛИ Кол.Имя = "ЭтоГруппа" Тогда
					Продолжить;
				Иначе
					СтруктураОтбора.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
				КонецЕсли;	
			КонецЦикла;	
			
			КоординатаСмещенияY = СтруктураРасшифровкаОбластейY[тОбновляемаяОбласть.ИмяОбластиСтрок].НайтиСтроки(СтруктураОтбора);
			
			Если КоординатаСмещенияY.Количество() = 1 Тогда
				КоординатаСмещенияY_			= КоординатаСмещенияY[0].СмещениеY-1;
				КоординатаСмещенияПоказателяY  = ТзПоказателиМакетовРаскрытий.НайтиСтроки(Новый Структура("ТипМакета,Показатель,УидГруппыОтборов,ИмяМакетаСтрок","Строки",тОбновляемаяОбласть.Показатель,тОбновляемаяОбласть.УидГруппыОтборов, КоординатаСмещенияY[0].ИмяМакета))[0].СмещениеY;
				
									
				тОбластьДляВывода = тМакет.Область(НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
						,КоординатаХ
						,НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
						,КоординатаХ);
						
				УстановитьЗначениеВЯчейке(ЭтаФорма,тОбновляемаяОбласть,тПоказатель,тОбластьДляВывода,СтруктураСлужебныхТаблиц);			
				
			КонецЕсли;	
			
		ИначеЕсли тОбновляемаяОбласть.ТипОбласти = "Таблица" Тогда	
			
			
			тСтруктураТаблицы = Новый Структура;
			
			НачалоОбластиY  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигY;
			НачалоОбластиХ  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигX;
			
			СтруктураГРуппирвок = СтрРазделить(тОбновляемаяОбласть.СтрГруппировки,";");
			
			СтруктураОтбора = Новый Структура;
			ПолнаяСтруктураПоиска =   СтруктураРасшифровкаОбластейY[тОбновляемаяОбласть.ИмяОбластиСтрок].Колонки;
			
			Для Каждого Кол Из ПолнаяСтруктураПоиска Цикл
				Если Кол.Имя = "СмещениеY" ИЛИ Кол.Имя = "ИмяМакета" ИЛИ Кол.Имя = "ЭтоГруппа" Тогда
					Продолжить;
				Иначе
					СтруктураОтбора.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
					тСтруктураТаблицы.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
				КонецЕсли;	
			КонецЦикла;	
			
			КоординатаСмещенияY = СтруктураРасшифровкаОбластейY[тОбновляемаяОбласть.ИмяОбластиСтрок].НайтиСтроки(СтруктураОтбора);
			Если КоординатаСмещенияY.Количество() = 1 Тогда
				КоординатаСмещенияY_ 	= КоординатаСмещенияY[0].СмещениеY-1;
				КоординатаСмещенияПоказателяY  = ТзПоказателиМакетовРаскрытий.НайтиСтроки(Новый Структура("ТипМакета,Показатель,УидГруппыОтборов,ИмяМакетаСтрок","Таблица",тОбновляемаяОбласть.Показатель,тОбновляемаяОбласть.УидГруппыОтборов, КоординатаСмещенияY[0].ИмяМакета));
				Если КоординатаСмещенияПоказателяY.Количество() = 1 Тогда
					КоординатаСмещенияПоказателяY = КоординатаСмещенияПоказателяY[0].СмещениеY;
				Иначе
					Продолжить;
				КонецЕсли;	 
			Иначе	 
				Продолжить;
			КонецЕсли;	
			
			СтруктураОтбора 		= Новый Структура;
			ПолнаяСтруктураПоиска 	= СтруктураРасшифровкаОбластейХ[тОбновляемаяОбласть.ИмяОбластиКолонок].Колонки;
			
			Для Каждого Кол Из ПолнаяСтруктураПоиска Цикл
				Если Кол.Имя = "СмещениеХ" ИЛИ Кол.Имя = "ИмяМакета" ИЛИ Кол.Имя = "ЭтоГруппа" Тогда
					Продолжить;
				Иначе
					СтруктураОтбора.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
					тСтруктураТаблицы.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
				КонецЕсли;	
			КонецЦикла;	
			
			КоординатаСмещенияX = СтруктураРасшифровкаОбластейХ[тОбновляемаяОбласть.ИмяОбластиКолонок].НайтиСтроки(СтруктураОтбора);
			
			Если КоординатаСмещенияX.Количество() = 1 Тогда
				КоординатаСмещенияX_ 			= КоординатаСмещенияX[0].СмещениеХ;
				КоординатаСмещенияПоказателяX  = ТзПоказателиМакетовРаскрытий.НайтиСтроки(Новый Структура("ТипМакета,Показатель,УидГруппыОтборов,ИмяМакетаКолонок","Таблица",тОбновляемаяОбласть.Показатель,тОбновляемаяОбласть.УидГруппыОтборов, КоординатаСмещенияX[0].ИмяМакета))[0].СмещениеХ;
			Иначе	 
				Продолжить;	 
			КонецЕсли;	
			
			СтруктураОтбора = Новый Структура;
			Для Каждого Кол Из СтруктураГРуппирвок Цикл
				СтруктураОтбора.Вставить(Кол,тОбновляемаяОбласть[Кол]);		
			КонецЦикла;	
						
			тОбластьДляВывода = тМакет.Область(НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
			,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX
			,НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
			,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX);
			
			УстановитьЗначениеВЯчейке(ЭтаФорма,тОбновляемаяОбласть,тПоказатель,тОбластьДляВывода,СтруктураСлужебныхТаблиц);			
				
		КонецЕсли;						
	КонецЦикла;	

	
	
КонецПроцедуры	

Процедура ОбновитьЗначенияДинамическихФормул(Валюта,тМакет,тОбновляемыеОбласти,СтруктураСлужебныхТаблиц)
	
	тЗапросыОбновляемыхОбластей     = СтруктураСлужебныхТаблиц.тЗапросыОбновляемыхОбластей;
	тПоказатели                     = СтруктураСлужебныхТаблиц.тПоказатели;
	тВыводимыхОбластей              = СтруктураСлужебныхТаблиц.тВыводимыхОбластей;
	СтруктураРасшифровкаОбластейХ   = СтруктураСлужебныхТаблиц.СтруктураРасшифровкаОбластейХ;
	СтруктураРасшифровкаОбластейY   = СтруктураСлужебныхТаблиц.СтруктураРасшифровкаОбластейY;
	ТзПоказателиМакетовРаскрытий    = СтруктураСлужебныхТаблиц.ТзПоказателиМакетовРаскрытий;
	тФормулыОбластей                = СтруктураСлужебныхТаблиц.тФормулыОбластей;
	тОперандыОбластей               = СтруктураСлужебныхТаблиц.тОперандыОбластей;
	КэшФормулОбластейПоказателей    = СтруктураСлужебныхТаблиц.КэшФормулОбластейПоказателей;
	
	Для Каждого тОбновляемаяОбласть Из тФормулыОбластей Цикл
		
		КэшОперандов = Новый Структура;
		
		//Вычислим опернады теущей формулы
		тОперанды =  тОперандыОбластей.НайтиСтроки(Новый Структура("ИмяФормулы",тОбновляемаяОбласть.ИмяФормулы));
		
		Для Каждого СтрОперанд Из тОперанды Цикл
			
			СтруктураГРуппирвок = СтрРазделить(тОбновляемаяОбласть.СтрГруппировки,";");
			тЗначенияОперандов =  тОбновляемыеОбласти.НайтиСтроки(Новый Структура("ИмяОперанда,ИмяФормулы,ИмяКроссОбласти",СтрОперанд.ИмяОперанда,СтрОперанд.ИмяФормулы,СтрОперанд.ИмяКроссОбласти));	
			
			//Попытаемся найти значение операнда в уже выведенных показателях
			//тЗначенияОперандов =  тОбновляемыеОбласти.НайтиСтроки(Новый Структура("Показатель,УидГруппыОтборов,ИмяКроссОбласти",СтрОперанд.Показатель,СтрОперанд.УидГруппыОтборов,СтрОперанд.ИмяКроссОбласти));	
			тЗначение = 0;
			//						
			//Если тЗначенияОперандов.Количество()>0 И ЗначениеЗаполнено(тЗначенияОперандов[0].Значение) Тогда
			//	тЗначение = тЗначенияОперандов[0].Значение;
			//Иначе 		
			тПоказатель      = тПоказатели.Найти(СтрОперанд.Показатель,"Ссылка");
			ПолучитьЗначениеИзТекущихДанных(Валюта,тЗначенияОперандов[0],тПоказатель,СтруктураСлужебныхТаблиц);
				
				тЗначение = тЗначенияОперандов[0].Значение;
			//КонецЕсли;
			
			КэшОперандов.Вставить(СтрОперанд.ИмяОперанда,тЗначение);
			
		КонецЦикла;	
		
		тФормула = КэшФормулОбластейПоказателей.Найти(тОбновляемаяОбласть.ИмяФормулы).ТекстФормулы;
		
		Попытка
			тЗначениеИтог = Вычислить(тФормула);
		Исключение
			тЗначениеИтог = "#Ошибка";
		КонецПопытки;
		
		//Вывод результата вычисления
		
		Если тОбновляемаяОбласть.ТипОбласти = "Синтетика" Тогда
			
			НачалоОбластиY  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигY;
			НачалоОбластиХ  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигX;
			
			КоординатаХ = НачалоОбластиХ+тОбновляемаяОбласть.СмещениеХ-1;
			КоординатаY = НачалоОбластиY+(тОбновляемаяОбласть.СмещениеY-1);
						
			тОбластьДляВывода = тМакет.Область(КоординатаY,КоординатаХ,КоординатаY,КоординатаХ);	
						
			Если  НЕ тОбластьДляВывода = Неопределено Тогда	
				УстановитьЗначениеФормулы(тОбластьДляВывода,тЗначениеИтог);
			КонецЕсли;
			
		ИначеЕсли тОбновляемаяОбласть.ТипОбласти = "Колонки" Тогда	
			
			НачалоОбластиY  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигY;
			НачалоОбластиХ  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигX;
			
			
			КоординатаY = НачалоОбластиY+(тОбновляемаяОбласть.СмещениеY-1);
			
			СтруктураГРуппирвок = СтрРазделить(тОбновляемаяОбласть.СтрГруппировки,";");
						
			СтруктураОтбора 		= Новый Структура;
			ПолнаяСтруктураПоиска 	= СтруктураРасшифровкаОбластейХ[тОбновляемаяОбласть.ИмяОбластиКолонок].Колонки;
			
			Для Каждого Кол Из ПолнаяСтруктураПоиска Цикл
				Если Кол.Имя = "СмещениеХ" ИЛИ Кол.Имя = "ИмяМакета" ИЛИ Кол.Имя = "ЭтоГруппа" Тогда
					Продолжить;
				Иначе
					СтруктураОтбора.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
				КонецЕсли;	
			КонецЦикла;	
			
			
			КоординатаСмещенияX = СтруктураРасшифровкаОбластейХ[тОбновляемаяОбласть.ИмяОбластиКолонок].НайтиСтроки(СтруктураОтбора);
			
			Если КоординатаСмещенияX.Количество() = 1 Тогда
				КоординатаСмещенияX_ 			= КоординатаСмещенияX[0].СмещениеХ;
				КоординатаСмещенияПоказателяX  = ТзПоказателиМакетовРаскрытий.НайтиСтроки(Новый Структура("ТипМакета,Формула,ИмяМакетаКолонок","Колонки",тОбновляемаяОбласть.ИмяФормулы, КоординатаСмещенияX[0].ИмяМакета))[0].СмещениеХ;
				
				тОбластьДляВывода = тМакет.Область(КоординатаY
				,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX
				,КоординатаY
				,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX);
				
				УстановитьЗначениеФормулы(тОбластьДляВывода,тЗначениеИтог);
				
			КонецЕсли;	
			
			
		ИначеЕсли тОбновляемаяОбласть.ТипОбласти = "Строки" Тогда	
			
			НачалоОбластиY  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигY;
			НачалоОбластиХ  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигX;
			
			КоординатаХ = НачалоОбластиХ+тОбновляемаяОбласть.СмещениеХ-1;
			
			СтруктураГРуппирвок = СтрРазделить(тОбновляемаяОбласть.СтрГруппировки,";");
						
			
			СтруктураОтбора = Новый Структура;
			ПолнаяСтруктураПоиска =   СтруктураРасшифровкаОбластейY[тОбновляемаяОбласть.ИмяОбластиСтрок].Колонки;
			
			Для Каждого Кол Из ПолнаяСтруктураПоиска Цикл
				Если Кол.Имя = "СмещениеY" ИЛИ Кол.Имя = "ИмяМакета" ИЛИ Кол.Имя = "ЭтоГруппа" Тогда
					Продолжить;
				Иначе
					СтруктураОтбора.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
				КонецЕсли;	
			КонецЦикла;	
			
			КоординатаСмещенияY = СтруктураРасшифровкаОбластейY[тОбновляемаяОбласть.ИмяОбластиСтрок].НайтиСтроки(СтруктураОтбора);
			
			Если КоординатаСмещенияY.Количество() = 1 Тогда
				КоординатаСмещенияY_			= КоординатаСмещенияY[0].СмещениеY-1;
				КоординатаСмещенияПоказателяY  = ТзПоказателиМакетовРаскрытий.НайтиСтроки(Новый Структура("ТипМакета,Формула,ИмяМакетаСтрок","Строки",тОбновляемаяОбласть.ИмяФормулы,КоординатаСмещенияY[0].ИмяМакета))[0].СмещениеY;
				
				тОбластьДляВывода = тМакет.Область(НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
				,КоординатаХ
				,НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
				,КоординатаХ);
				
				УстановитьЗначениеФормулы(тОбластьДляВывода,тЗначениеИтог);
				
			КонецЕсли;	
			
		ИначеЕсли тОбновляемаяОбласть.ТипОбласти = "Таблица" Тогда	
				
			тСтруктураТаблицы = Новый Структура;
			
			НачалоОбластиY  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигY;
			НачалоОбластиХ  = тВыводимыхОбластей.Найти(тОбновляемаяОбласть.ИмяКроссОбласти,"ИмяОбласти").СдвигX;
			
			СтруктураГРуппирвок = СтрРазделить(тОбновляемаяОбласть.СтрГруппировки,";");
			
			СтруктураОтбора = Новый Структура;
			ПолнаяСтруктураПоиска =   СтруктураРасшифровкаОбластейY[тОбновляемаяОбласть.ИмяОбластиСтрок].Колонки;
			
			Для Каждого Кол Из ПолнаяСтруктураПоиска Цикл
				Если Кол.Имя = "СмещениеY" ИЛИ Кол.Имя = "ИмяМакета" ИЛИ Кол.Имя = "ЭтоГруппа" Тогда
					Продолжить;
				Иначе
					СтруктураОтбора.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
					тСтруктураТаблицы.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
				КонецЕсли;	
			КонецЦикла;	
			
			КоординатаСмещенияY = СтруктураРасшифровкаОбластейY[тОбновляемаяОбласть.ИмяОбластиСтрок].НайтиСтроки(СтруктураОтбора);
			Если КоординатаСмещенияY.Количество() = 1 Тогда
				КоординатаСмещенияY_ 	= КоординатаСмещенияY[0].СмещениеY-1;
				КоординатаСмещенияПоказателяY  = ТзПоказателиМакетовРаскрытий.НайтиСтроки(Новый Структура("ТипМакета,Формула,ИмяМакетаСтрок","Таблица",тОбновляемаяОбласть.ИмяФормулы, КоординатаСмещенияY[0].ИмяМакета));
				Если КоординатаСмещенияПоказателяY.Количество() = 1 Тогда
					КоординатаСмещенияПоказателяY = КоординатаСмещенияПоказателяY[0].СмещениеY;
				Иначе
					Продолжить;
				КонецЕсли;	 
			Иначе	 
				Продолжить;
			КонецЕсли;	
			
			СтруктураОтбора 		= Новый Структура;
			ПолнаяСтруктураПоиска 	= СтруктураРасшифровкаОбластейХ[тОбновляемаяОбласть.ИмяОбластиКолонок].Колонки;
			
			Для Каждого Кол Из ПолнаяСтруктураПоиска Цикл
				Если Кол.Имя = "СмещениеХ" ИЛИ Кол.Имя = "ИмяМакета"  ИЛИ Кол.Имя = "ЭтоГруппа" Тогда
					Продолжить;
				Иначе
					СтруктураОтбора.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
					тСтруктураТаблицы.Вставить(Кол.Имя,тОбновляемаяОбласть[Кол.Имя]);
				КонецЕсли;	
			КонецЦикла;	
			
			КоординатаСмещенияX = СтруктураРасшифровкаОбластейХ[тОбновляемаяОбласть.ИмяОбластиКолонок].НайтиСтроки(СтруктураОтбора);
			
			Если КоординатаСмещенияX.Количество() = 1 Тогда
				КоординатаСмещенияX_ 			= КоординатаСмещенияX[0].СмещениеХ;
				КоординатаСмещенияПоказателяX   = ТзПоказателиМакетовРаскрытий.НайтиСтроки(Новый Структура("ТипМакета,Формула,ИмяМакетаКолонок","Таблица",тОбновляемаяОбласть.ИмяФормулы,КоординатаСмещенияX[0].ИмяМакета))[0].СмещениеХ;
			Иначе	 
				Продолжить;	 
			КонецЕсли;	
						
			Если тЗначениеИтог = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			тОбластьДляВывода = тМакет.Область(НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
			,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX
			,НачалоОбластиY+КоординатаСмещенияY_+КоординатаСмещенияПоказателяY
			,НачалоОбластиХ+КоординатаСмещенияX_+КоординатаСмещенияПоказателяX);
			
			УстановитьЗначениеФормулы(тОбластьДляВывода,тЗначениеИтог);

		КонецЕсли;								
	КонецЦикла;	
	
КонецПроцедуры	

Процедура УстановитьЗначениеВЯчейке(ЭтаФорма,тОбновляемаяОбласть,тПоказатель,тОбластьДляВывода,СтруктураСлужебныхТаблиц)
	
	Если ЭтаФорма.ИмяИнтерактивноИзмененнойОбласти = тОбластьДляВывода.Имя Тогда
		 Возврат;
	КонецЕсли;	
	
	Если тОбновляемаяОбласть.ЭтоФормула Тогда
		
		//тОбновляемаяОбласть.Значение =  тОбластьДляВывода.Значение;
		//ПолучитьЗначениеИзТекущихДанных(тОбновляемаяОбласть,тПоказатель,СтруктураСлужебныхТаблиц);
		
	ИначеЕсли тПоказатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
		Если тОбновляемаяОбласть.ЭтоИтогПоПериоду Тогда
			Если НЕ тПоказатель.ВидИтогаПериод = Перечисления.ВидыИтоговПоказателяПоПериоду.НеРассчитывать Тогда
				тОбластьДляВывода.Значение = тОбластьДляВывода.Значение+тОбновляемаяОбласть.Значение;
			КонецЕсли;	 	 
		ИначеЕсли НЕ тОбновляемаяОбласть.ДетальнаяЗапись Тогда		    
			Если тПоказатель.ВидИтога = Перечисления.ВидыИтоговПоказателя.Максимум Тогда
				тОбластьДляВывода.Значение = Макс(тОбластьДляВывода.Значение,тОбластьДляВывода.Значение+тОбновляемаяОбласть.Значение);
			ИначеЕсли 	тПоказатель.ВидИтога = Перечисления.ВидыИтоговПоказателя.Минимум Тогда 
				тОбластьДляВывода.Значение = Мин(тОбластьДляВывода.Значение,тОбластьДляВывода.Значение+тОбновляемаяОбласть.Значение);
			ИначеЕсли 	тПоказатель.ВидИтога = Перечисления.ВидыИтоговПоказателя.НеРассчитывается Тогда 
				//...
			ИначеЕсли 	тПоказатель.ВидИтога = Перечисления.ВидыИтоговПоказателя.Среднее Тогда 
				
			Иначе 
				//Сумма
				тОбластьДляВывода.Значение = тОбластьДляВывода.Значение+тОбновляемаяОбласть.Значение;
			КонецЕсли;	 
		Иначе	 
			тОбластьДляВывода.Значение = тОбластьДляВывода.Значение+тОбновляемаяОбласть.Значение;
		КонецЕсли;
		
		тОбновляемаяОбласть.Значение =  тОбластьДляВывода.Значение;
		
	Иначе	
		Если тОбновляемаяОбласть.ЭтоИтогПоПериоду Тогда
			//Для нечисловых итог по периоду не заполняется. 
		ИначеЕсли НЕ тОбновляемаяОбласть.ДетальнаяЗапись Тогда	 
			Если тПоказатель.ВидИтога = Перечисления.ВидыИтоговПоказателя.Максимум Тогда
				тОбластьДляВывода.Значение = Макс(тОбластьДляВывода.Значение,тОбластьДляВывода.Значение+тОбновляемаяОбласть.Значение);
			ИначеЕсли 	тПоказатель.ВидИтога = Перечисления.ВидыИтоговПоказателя.Минимум Тогда 
				тОбластьДляВывода.Значение = Мин(тОбластьДляВывода.Значение,тОбластьДляВывода.Значение+тОбновляемаяОбласть.Значение);
			ИначеЕсли 	тПоказатель.ВидИтога = Перечисления.ВидыИтоговПоказателя.НеРассчитывается 
				ИЛИ тПоказатель.ВидИтога = Перечисления.ВидыИтоговПоказателя.Среднее 
				ИЛИ тПоказатель.ВидИтога = Перечисления.ВидыИтоговПоказателя.Сумма   Тогда
				//... итоги не считать.
			ИначеЕсли  тПоказатель.ВидИтога = Перечисления.ВидыИтоговПоказателя.ПустаяСсылка() Тогда 
				//Итог по-умолчанию
				Если  тПоказатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка Тогда
					//... итоги не считать
				ИначеЕсли тПоказатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда
					тОбластьДляВывода.Значение = Макс(тОбластьДляВывода.Значение,тОбновляемаяОбласть.Значение);
				ИначеЕсли тПоказатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда	
					тОбластьДляВывода.Значение = Макс(тОбластьДляВывода.Значение,тОбновляемаяОбласть.Значение);
				КонецЕсли;	
			КонецЕсли;	
		Иначе	 
			тОбластьДляВывода.Значение = тОбновляемаяОбласть.Значение;
		КонецЕсли;	 	
		
		тОбновляемаяОбласть.Значение =  тОбластьДляВывода.Значение;
	
	КонецЕсли;	
	
КонецПроцедуры	

Процедура УстановитьЗначениеФормулы(тОбластьДляВывода,тЗначениеИтог);
	
	тОбластьДляВывода.Значение =  тЗначениеИтог;
			
КонецПроцедуры	

Функция  ПолучитьЛогИзмененныхПоказателей(УникальныйИдентификаторСеанса)

       Запрос = Новый Запрос;
	   Запрос.Текст = "ВЫБРАТЬ
	                  |	ЛогИзмененныхЗначенийПоказателейОтчетов.Показатель КАК Показатель,
	                  |	ЛогИзмененныхЗначенийПоказателейОтчетов.Сценарий КАК Сценарий,
	                  |	ЛогИзмененныхЗначенийПоказателейОтчетов.Организация КАК Организация,
	                  |	ЛогИзмененныхЗначенийПоказателейОтчетов.Проект КАК Проект,
	                  |	ЛогИзмененныхЗначенийПоказателейОтчетов.Аналитика1 КАК Аналитика1,
	                  |	ЛогИзмененныхЗначенийПоказателейОтчетов.Аналитика2 КАК Аналитика2,
	                  |	ЛогИзмененныхЗначенийПоказателейОтчетов.Аналитика3 КАК Аналитика3,
	                  |	ЛогИзмененныхЗначенийПоказателейОтчетов.Аналитика4 КАК Аналитика4,
	                  |	ЛогИзмененныхЗначенийПоказателейОтчетов.Аналитика5 КАК Аналитика5,
	                  |	ЛогИзмененныхЗначенийПоказателейОтчетов.Аналитика6 КАК Аналитика6,
	                  |	ЛогИзмененныхЗначенийПоказателейОтчетов.АналитикаВалюта КАК АналитикаВалюта,
	                  |	ЛогИзмененныхЗначенийПоказателейОтчетов.ПериодОтчета КАК ПериодОтчета,
	                  |	ЛогИзмененныхЗначенийПоказателейОтчетов.Валюта КАК Валюта,
	                  |	ЛогИзмененныхЗначенийПоказателейОтчетов.Значение КАК Значение,
	                  |	ЛогИзмененныхЗначенийПоказателейОтчетов.ЗначениеНечисловое КАК ЗначениеНечисловое,
	                  |	ЛогИзмененныхЗначенийПоказателейОтчетов.ЗначениеВалюта КАК ЗначениеВалюта,
	                  |	ЛогИзмененныхЗначенийПоказателейОтчетов.НомерТранзакции КАК НомерТранзакции,
	                  |	ЛогИзмененныхЗначенийПоказателейОтчетов.ПравилоОбработки КАК ПравилоОбработки
	                  |ИЗ
	                  |	РегистрСведений.ЛогИзмененныхЗначенийПоказателейОтчетов КАК ЛогИзмененныхЗначенийПоказателейОтчетов
	                  |ГДЕ
	                  |	ЛогИзмененныхЗначенийПоказателейОтчетов.УникальныйИдентификаторСеанса = &УникальныйИдентификаторСеанса";
	   
	   Запрос.УстановитьПараметр("УникальныйИдентификаторСеанса",УникальныйИдентификаторСеанса);
	   
	   Возврат Запрос.Выполнить().Выгрузить();
	  	   
КонецФункции	

#КонецОбласти




Функция ПодготовитьПараметрыВызоваФормыРаскрытий(ЭтаФорма,СтруктураРасшифровки,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик) Экспорт
	
	СтруктураОтбираемыхАналитик.Вставить("Валюта",ЭтаФорма.Валюта);
	
	тОбъектАБ               = ЭтаФорма[ЭтаФорма.ТекущийОбъектАБ];	
	
	МассивПериодов = Новый Массив;
	
		
	Для Каждого СтрНезаполненнаяАналитика Из СтруктураНезаполненыхАналитик Цикл
		Если СтруктураОтбираемыхАналитик.Свойство(СтрНезаполненнаяАналитика.Ключ) Тогда //Мы имеем дело с аналитикой -группой, нужно ее расшифровать
			Если СтрНезаполненнаяАналитика.Ключ = "ПериодОтчета" Тогда
				МассивПериодов = ПолучитьВложенныеПериоды(СтруктураОтбираемыхАналитик.ПериодОтчета,тОбъектАБ.Периодичность);			
				СтруктураОтбираемыхАналитик.Вставить("ПериодОтчета",МассивПериодов);	
			Иначе	
				МассивЗначений = ПолучитьЭлементыПотомки(СтруктураОтбираемыхАналитик[СтрНезаполненнаяАналитика.Ключ]);			
				СтруктураОтбираемыхАналитик.Вставить(СтрНезаполненнаяАналитика.Ключ,МассивЗначений);	
			КонецЕсли;	 
		КонецЕсли;	
	КонецЦикла;	
	
	Если СтруктураНезаполненыхАналитик.Свойство("ПериодОтчета")     //Если не указан,  период, то берем весь текущий диапазон
		И НЕ СтруктураОтбираемыхАналитик.Свойство("ПериодОтчета") Тогда	
		МассивПериодов = ПериодыУХ.ПолучитьПодчиненныеПериоды(СтруктураРасшифровки.ПериодС, СтруктураРасшифровки.ПериодПо, тОбъектАБ.Периодичность);			
		СтруктураОтбираемыхАналитик.Вставить("ПериодОтчета",МассивПериодов);	
	КонецЕсли;	

	
	МассивПоказателей = Новый Массив();
    МассивПоказателей.Добавить(СтруктураРасшифровки.ПоказательСсылка);	
	СтруктураОтбираемыхАналитик.Вставить("ПоказательОтчета",МассивПоказателей);
    СтруктураОтбираемыхАналитик.Вставить("УидГруппыОтборов",СтруктураРасшифровки.УидГруппыОтборов);

	мПоказателиРаскрытия = ПолучитьИзВременногоХранилища(тОбъектАБ.мПоказателиРаскрытияАдрес);
	
	МассивУдаляемыхКолонок = Новый Массив;
	
	тСвойствАналитик = Новый ТаблицаЗначений;
	тСвойствАналитик.Колонки.Добавить("КодАналитики");
	тСвойствАналитик.Колонки.Добавить("типАналитики");
	тСвойствАналитик.Колонки.Добавить("Аналитика");
    тСвойствАналитик.Колонки.Добавить("СвязьПоВладельцу");
    тСвойствАналитик.Колонки.Добавить("ЭтоЭтапПроекта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
    тСвойствАналитик.Колонки.Добавить("ОбязательноеЗаполнение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	тСвойствАналитик.Колонки.Добавить("МетаИмяАналитики");
    тСвойствАналитик.Колонки.Добавить("ОтборЗначений");
	тСвойствАналитик.Колонки.Добавить("ПараметрыОтбораЗначений");
	
	тГруппаРаскрытия = СтруктураРасшифровки.ПоказательСсылка.ГруппаРаскрытия;
	
	ДополнительныйОтбор = Новый ТаблицаЗначений;
	ДополнительныйОтбор.Колонки.Добавить("ИмяОтбора");
	ДополнительныйОтбор.Колонки.Добавить("ТипОтбора");
	ДополнительныйОтбор.Колонки.Добавить("ЗначениеОтбора");
	
	Для Каждого Аналитика Из СтруктураНезаполненыхАналитик Цикл
		
		нСвойство = тСвойствАналитик.Добавить();
		нСвойство.КодАналитики = Аналитика.Ключ;
		
		Если Аналитика.Ключ = "ПериодОтчета" Тогда
			нСвойство.типАналитики = Новый ОписаниеТипов("СправочникСсылка.Периоды");	
			нСвойство.ОбязательноеЗаполнение = Истина;
		ИначеЕсли  Аналитика.Ключ = "Организация" Тогда 
			нСвойство.типАналитики = Новый ОписаниеТипов("СправочникСсылка.Организации");
			нСвойство.ОбязательноеЗаполнение = Истина;
		ИначеЕсли  Аналитика.Ключ = "Проект"   Тогда
			нСвойство.типАналитики = Новый ОписаниеТипов("СправочникСсылка.Проекты");
			нСвойство.ОбязательноеЗаполнение = Истина;
		ИначеЕсли  Аналитика.Ключ = "Сценарий" Тогда
			нСвойство.типАналитики = Новый ОписаниеТипов("СправочникСсылка.Сценарии");
			нСвойство.ОбязательноеЗаполнение = Истина;
		ИначеЕсли  Аналитика.Ключ = "АналитикаВалюта" Тогда
			нСвойство.типАналитики = Новый ОписаниеТипов("СправочникСсылка.Валюты");
			нСвойство.ОбязательноеЗаполнение = Истина;
		
		Иначе	
			
			ТекСубконто =  ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.НайтиПоКоду(Аналитика.Ключ);
			
			Если ЗначениеЗаполнено(ТекСубконто) Тогда
				нСвойство.типАналитики = Новый ОписаниеТипов(ТекСубконто.ТипЗначения);
			КонецЕсли;	 
			
			Для Инд = 1 по ПараметрыСеанса.ЧислоДопАналитик Цикл	
				Если  тГруппаРаскрытия["ВидАналитики"+Инд] = ТекСубконто Тогда	
					нСвойство.ОбязательноеЗаполнение = тГруппаРаскрытия["Аналитика"+Инд+"Обязательна"];
				КонецЕсли;		
				
				Если Инд =  тГруппаРаскрытия.АналитикаЭтапПроекта Тогда
					 нСвойство.ЭтоЭтапПроекта = Истина;
				КонецЕсли;	
				
			КонецЦикла;					
		КонецЕсли;		
		
		Если нСвойство.типАналитики.ПривестиЗначение() = Неопределено Тогда
			нСвойство.МетаИмяАналитики = "СправочникСсылка."+Метаданные.НайтиПоТипу(нСвойство.типАналитики.Типы()[0]).Имя;
		Иначе
			нСвойство.МетаИмяАналитики = нСвойство.типАналитики.ПривестиЗначение().Метаданные().Имя;
		КонецЕсли;

		тРасшифровкаГруппыОтборов = тОбъектАБ.РасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УидГруппыОтборов,ПолеКод",СтруктураОтбираемыхАналитик.УидГруппыОтборов,Аналитика.Ключ));
		
		Если тРасшифровкаГруппыОтборов.Количество() = 1 И ЗначениеЗаполнено(тРасшифровкаГруппыОтборов[0].ЗначениеОтбораСтрока) И НЕ тРасшифровкаГруппыОтборов[0].Отбор = НСтр("ru = 'Отбор не производится'") Тогда
			
			ТзПараметровЗапроса = Новый ТаблицаЗначений;
			ТзПараметровЗапроса.Колонки.Добавить("ИмяОтбора");
			ТзПараметровЗапроса.Колонки.Добавить("ТипОтбора");
			ТзПараметровЗапроса.Колонки.Добавить("ЗначениеОтбора");
			ТзПараметровЗапроса.Колонки.Добавить("УидГруппыОтбора");
				
			ТекстОтбора = АналитическийБланкУХСервер.СформироватьТекстОтбораПоВерсии("ТекущийСправочник","",тРасшифровкаГруппыОтборов[0],ТзПараметровЗапроса,"Ссылка");
			ТекстОтбора = Прав(ТекстОтбора,СтрДлина(ТекстОтбора)-1);
			
			ТекстЗапроса = "ВЫБРАТЬ 
			|	ТекущийСправочник.Ссылка
			|ИЗ
			|	Справочник."+нСвойство.МетаИмяАналитики+" КАК ТекущийСправочник
			|ГДЕ "+ТекстОтбора;
			
			Если ЗначениеЗАполнено(ТекстОтбора) Тогда		
				нСвойство.ОтборЗначений 			= ТекстЗапроса;
				нСвойство.ПараметрыОтбораЗначений 	= ТзПараметровЗапроса;	
			КонецЕсли;	
					
			нДополнительныйОтбор 				= ДополнительныйОтбор.Добавить();
			нДополнительныйОтбор.ИмяОтбора      = Аналитика.Ключ;
			нДополнительныйОтбор.ТипОтбора      = тРасшифровкаГруппыОтборов[0].Отбор;
			нДополнительныйОтбор.ЗначениеОтбора = ЗначениеИзСтрокиВнутр(тРасшифровкаГруппыОтборов[0].ЗначениеОтбораСтрока);
	
		КонецЕсли;
			
	КонецЦикла;	
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСеанса",ЭтаФорма.УникальныйИдентификатор);
	ДополнительныеПараметры.Вставить("ДополнительныйФильтр",ДополнительныйОтбор);
	
	Если НЕ СтруктураРасшифровки.ПоказательСсылка.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда 
		ДополнительныеПараметры.Вставить("ЭтоНечисловые",Истина);
	КонецЕсли;
	
	Если СтруктураНезаполненыхАналитик.Свойство("Проект") Тогда
		СтруктураНезаполненыхАналитик.Удалить("Проект"); 
	КонецЕсли;
	
	Результат = СводнаяТаблицаУХ.ПолучитьЗначениеПоказателей(СтруктураОтбираемыхАналитик,СтруктураНезаполненыхАналитик,ДополнительныеПараметры);	
	
	Если  НЕ СтруктураРасшифровки.ПоказательСсылка.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
		Результат.Колонки.Удалить("Значение");
		Результат.Колонки.ЗначениеНеЧисловое.Имя = "Значение";
	КонецЕсли;	
	
	АдресТзРаскрытия = ПоместитьВовременноеХранилище(Результат,Новый УникальныйИдентификатор);
		
	//Заполняем возможные связи по владельцу
	Для Каждого Аналитика Из тСвойствАналитик Цикл				
		
		мВладельцы = Новый Массив;
		
		Если Аналитика.типАналитики.ПривестиЗначение() = Неопределено ИЛИ СтрНайти(Аналитика.типАналитики.ПривестиЗначение().Метаданные().ПолноеИмя(),"Справочник") = 0 Тогда
			Аналитика.СвязьПоВладельцу =  мВладельцы;
			Продолжить;	
		Иначе	
			Владельцы =  Аналитика.типАналитики.ПривестиЗначение().Метаданные().Владельцы;
		КонецЕсли;	

		Владельцы =  Аналитика.типАналитики.ПривестиЗначение().Метаданные().Владельцы;
		
		Для Каждого тВладелец Из Владельцы Цикл	
			СущВладельцы = тСвойствАналитик.НайтиСтроки(Новый Структура("МетаИмяАналитики",тВладелец.Имя));
			Для Каждого сВладелец Из СущВладельцы Цикл	
				мВладельцы.Добавить(сВладелец.КодАналитики);	
			КонецЦикла;		
		КонецЦикла;		
		Аналитика.СвязьПоВладельцу =  мВладельцы;
		
	КонецЦикла;	
    	
	СтруктураКлючевыхРеквизитов = Новый Структура;
	СтруктураКлючевыхРеквизитов.Вставить("Сценарий"		,ЭтаФорма["Сценарий"]);
	СтруктураКлючевыхРеквизитов.Вставить("Организация"	,ЭтаФорма["Организация"]);
    СтруктураКлючевыхРеквизитов.Вставить("Проект"		,Неопределено);
	СтруктураКлючевыхРеквизитов.Вставить("ПериодОтчета"	,ЭтаФорма.ПериодОтчета);
	СтруктураКлючевыхРеквизитов.Вставить("ВидОтчета"	,ЭтаФорма.тВидыОтчетов);
    СтруктураКлючевыхРеквизитов.Вставить("ВложенныеПериоды"	,тОбъектАБ.ВложенныеПериоды.Выгрузить());
	СтруктураКлючевыхРеквизитов.Вставить("ЗаблокированныеПоказатели",тОбъектАБ.ЗаблокированныеПоказатели.Выгрузить());
   	СтруктураКлючевыхРеквизитов.Вставить("ЗаблокированныеПериоды",тОбъектАБ.ЗаблокированныеПериоды.Выгрузить());
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктураОтбираемыхАналитик",СтруктураОтбираемыхАналитик);
	СтруктураПараметров.Вставить("СтруктураНезаполненыхАналитик",СтруктураНезаполненыхАналитик);
	СтруктураПараметров.Вставить("АдресТзРаскрытия",АдресТзРаскрытия);
	СтруктураПараметров.Вставить("логИзмененныхПоказателейАдрес","");
	СтруктураПараметров.Вставить("мПоказателиРаскрытияАдрес",тОбъектАБ.мПоказателиРаскрытияАдрес);
	СтруктураПараметров.Вставить("КэшАналитикПоказателейАдрес",тОбъектАБ.КэшАналитикПоказателейАдрес);
	СтруктураПараметров.Вставить("Заблокирован",Истина);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения",ЭтаФорма.ТекущийДелитель);
	СтруктураПараметров.Вставить("УровеньТочности",ЭтаФорма.УровеньТочности);
	СтруктураПараметров.Вставить("УидГруппыОтборов",СтруктураРасшифровки.УидГруппыОтборов);
    СтруктураПараметров.Вставить("тГоризонт",МассивПериодов);
	СтруктураПараметров.Вставить("АдрестСвойствАналитик",ПоместитьВоВременноеХранилище(тСвойствАналитик,ЭтаФорма.УникальныйИдентификатор));
    СтруктураПараметров.Вставить("ПравилоОбработки",Неопределено);
	СтруктураПараметров.Вставить("ВИБ",Неопределено);

	
	СтруктураПараметров.Вставить("АдресСтруктураКлючевыхРеквизитов",ПоместитьВоВременноеХранилище(СтруктураКлючевыхРеквизитов,ЭтаФорма.УникальныйИдентификатор));
	
	Возврат СтруктураПараметров;
	
КонецФункции	

Функция ПолучитьВложенныеПериоды(ПериодОтчета,Периодичность)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Периоды.Ссылка КАК ПериодОтчета,
	|	Периоды.Периодичность КАК Периодичность
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	Периоды.ПометкаУдаления = ЛОЖЬ
	|	И Периоды.ДатаНачала >= &ДатаНачала
	|	И Периоды.ДатаОкончания <= &ДатаОкончания
	|	И Периоды.Периодичность = &Периодичность
	|	И Периоды.Произвольный = ЛОЖЬ";
	
	
	Запрос.УстановитьПараметр("Периодичность",Периодичность);
	Запрос.УстановитьПараметр("ДатаНачала",ПериодОтчета.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",ПериодОтчета.ДатаОкончания);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПериодОтчета");
	
КонецФункции

Функция ПолучитьЭлементыПотомки(ЭлементРодитель)
	
	ТекущийТип = ЭлементРодитель.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначениеСправочика.Ссылка КАК Ссылка
	|ИЗ
	|	//ТекущийСправочник// КАК ЗначениеСправочика
	|ГДЕ
	|	ЗначениеСправочика.ПометкаУдаления = ЛОЖЬ
	|	И ЗначениеСправочика.Родитель  В ИЕРАРХИИ(&ЭлементРодитель)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ТекущийСправочник//","Справочник."+ТекущийТип);
	
	Запрос.УстановитьПараметр("ЭлементРодитель",ЭлементРодитель);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьПараметрыРасшифровкиОперанда(ЭтаФорма,Расшифровка,ЗначениеПоказателя,ВалютаОтображения) Экспорт
		
	ТекущийОбъектАБ                         = ЭтаФорма.ТекущийОбъектАБ;
	                                        
	СтруктураРеквизитов 					= УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(Расшифровка.ВидОтчета, Расшифровка.Сценарий, Расшифровка.Организация, Расшифровка.ПериодОтчета);	

	ОбработкаОбъект 						= Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
	ОбработкаОбъект.ВидОтчета 				= Расшифровка.ВидОтчета;
	ОбработкаОбъект.ВалютаОтображения 		= ВалютаОтображения;
	оТаблицаИзмененныхПоказателей 			= ОбработкаОбъект.ТаблицаИзмененныхПоказателей.Выгрузить();
	оТаблицаИзмененныхПоказателей.Колонки.Добавить("ID");
	ФлагОшибки = Ложь;
	
	КэшАналитикПоказателей  = ПолучитьИзВременногоХранилища(ЭтаФорма[ТекущийОбъектАБ].КэшАналитикПоказателейАдрес);
		
	АналитическийБланкУХСервер.ЗаписатьЗначениеВПоказатель(оТаблицаИзмененныхПоказателей,,ЗначениеПоказателя,Расшифровка,КэшАналитикПоказателей,ФлагОшибки,ЭтаФорма.ТекущийДелитель);
	
	Для Каждого Стр Из оТаблицаИзмененныхПоказателей Цикл		
		Если Стр.Аналитика1 = Неопределено И Стр.Аналитика2 = Неопределено И Стр.Аналитика3= Неопределено И Стр.Аналитика4  = Неопределено Тогда
			 Стр.СинтетическоеЗначение = Истина;
		КонецЕсли;		
	КонецЦикла;	
	
	ОбработкаОбъект.ТаблицаИзмененныхПоказателей.Загрузить(оТаблицаИзмененныхПоказателей);
	ОбработкаОбъект.ПравилоОбработки 				= СтруктураРеквизитов.ПравилоОбработки;
	Если СтруктураРеквизитов.Свойство("ВИБ") Тогда
		ОбработкаОбъект.ИспользуемаяИБ  				= СтруктураРеквизитов.ВИБ;
	КонецЕсли;	
	Если НЕ ФлагОшибки Тогда
		Возврат ОбработкаОбъект.ПолучитьСтруктуруПараметровДляРасшифровки();
	Иначе  
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

Функция ПолучитьСтруктуруРасшифровки(ЭтаФорма,СтруктураТекущихКлючевыхРеквизитов,ОбластьИмя,Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик) Экспорт
	
	тМакет 					= ЭтаФорма[ЭтаФорма.ТекущийМакет];
	тОбъектАБ               = ЭтаФорма[ЭтаФорма.ТекущийОбъектАБ];	
	
	ТзСвойстваПоказателей 	= ПолучитьИзВременногоХранилища(тОбъектАБ.ТзСвойстваПоказателейАдрес);
		
	Возврат АналитическийБланкУХСервер.ПолучитьСтруктуруРасшифровки(тМакет,СтруктураТекущихКлючевыхРеквизитов,тОбъектАБ,ОбластьИмя,Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик,ТзСвойстваПоказателей);
	
КонецФункции

Функция ПолучитьСтруктуруРасшифровкиБезКонтекста(СтруктураРасшифровки,АдресРасшифровки,тОбъект,АдресРасшифровкиГруппОтборов,ОбластьИмя,Расшифровка,ТзСвойстваПоказателейАдрес) Экспорт
	
	СтруктураНезаполненыхАналитик 	= Новый Структура;
	СтруктураОтбираемыхАналитик 	= Новый Структура;
	РасшифровкаГруппОтборов         = ПолучитьИзВременногоХранилища(АдресРасшифровкиГруппОтборов);
	
	тРасшифровка 				= ПолучитьИзВременногоХранилища(АдресРасшифровкиГруппОтборов);
	ТзСвойстваПоказателей 		= ПолучитьИзВременногоХранилища(ТзСвойстваПоказателейАдрес);
	
	тПоказатель  = Неопределено;
	тПоказатель  = ТзСвойстваПоказателей.Найти(Расшифровка.Ссылка,"Ссылка");
	
	АналитическийБланкУХСервер.ПолучитьСвойстваПоказателяСтруктура(ТзСвойстваПоказателей,Расшифровка,СтруктураРасшифровки,тПоказатель);
	
	АналитическийБланкУХСервер.ПолучитьСтруктуруРасшифровкиБезКонтекста(тОбъект,СтруктураРасшифровки,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик,РасшифровкаГруппОтборов,тПоказатель);
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("СтруктураНезаполненыхАналитик",СтруктураНезаполненыхАналитик);
	СтруктураОтвета.Вставить("СтруктураОтбираемыхАналитик",СтруктураОтбираемыхАналитик);
	СтруктураОтвета.Вставить("СтруктураРасшифровки",СтруктураРасшифровки);
	
	Возврат СтруктураОтвета;
	
КонецФункции



#КонецЕсли
