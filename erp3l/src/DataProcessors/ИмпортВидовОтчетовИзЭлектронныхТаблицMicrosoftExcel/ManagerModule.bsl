
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
// ФОРМИРОВАНИЕ СТРУКТУРЫ КНИГ

Процедура СкопироватьСсылки(СоответствиеИсточник, СоответствиеПриемник, ПроверятьНаличие)
	
	Для Каждого ИсточникЛист Из СоответствиеИсточник Цикл
		
		Если ПроверятьНаличие Тогда
			
			ПриемникЛист = СоответствиеПриемник.Получить(ИсточникЛист.Ключ);
			Если ПриемникЛист = Неопределено Тогда
				ПриемникЛист = Новый Соответствие;
				СоответствиеПриемник.Вставить(ИсточникЛист.Ключ, ПриемникЛист);
				НовыйЛист = Истина;
			Иначе
				НовыйЛист = Ложь;
			КонецЕсли;
			
		Иначе
			
			ПриемникЛист = Новый Соответствие;
			СоответствиеПриемник.Вставить(ИсточникЛист.Ключ, ПриемникЛист);
			
			НовыйЛист = Истина;
			
		КонецЕсли;
		
		Для Каждого СсылкаСлева Из ИсточникЛист.Значение Цикл
			
			Если НовыйЛист Тогда
				ОбластьСлева = Новый Соответствие;
				ПриемникЛист.Вставить(СсылкаСлева.Ключ, ОбластьСлева);
			Иначе
				ОбластьСлева = ПриемникЛист.Получить(СсылкаСлева.Ключ);
				Если ОбластьСлева = Неопределено Тогда
					ОбластьСлева = Новый Соответствие;
					ПриемникЛист.Вставить(СсылкаСлева.Ключ, ОбластьСлева);
				КонецЕсли;
			КонецЕсли;
			
			СкопироватьСоответствиеВСоответствие(СсылкаСлева.Значение, ОбластьСлева);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьСоответствиеВСоответствие(Источник, Приемник)
	
	Для Каждого Элемент Из Источник Цикл
		Приемник.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла; 
	
КонецПроцедуры

Функция ПолучитьСтруктуруКниг(АдресаРезультатов, ПараметрыАдресации) Экспорт
	
	Книги						= Новый Соответствие; // [{ Имя, ({ Имя, Листы: [АдресЛиста], Листы_: [{ Имя, АдресЛиста }] }) }]
	Листы						= Новый Соответствие; // [{ АдресЛиста, ({ Адрес, Имя, Книга, Формулы: [{ ИндексФормулы, Истина }], ТекущаяОбласть }) }]
	ОбластиФормул				= Новый Соответствие; // [{ АдресОбласти, ИндексФормулы }]
	ИндексыФормул				= Новый Соответствие; // [{ ТекстФормулы, ИндексФормулы }]
	ТекстыФормул				= Новый Соответствие; // [{ ИндексФормулы, ТекстФормулы }]
	ДеревьяФормул				= Новый Соответствие; // [{ ИндексФормулы, ДеревоФормулыСтрокаВнутр }]
	ОперандыФормул				= Новый Соответствие; // [{ АдресОбластиФормулы, [{ ИндексСтрокиДереваФормулы, [{ АдресОбластиОперанда, Истина }] }] }]
	ТабличныеДокументы			= Новый Соответствие; // [{ АдресЛиста, ТабличныйДокумент }]
	ВходящиеСсылки				= Новый Соответствие; // [{ АдресЛиста, [{ АдресОбластиПриемник, [{ АдресОбластиИсточник, Истина }] }] }]
	ИсходящиеСсылки				= Новый Соответствие; // [{ АдресЛиста, [{ АдресОбластиИсточник, [{ АдресОбластиПриемник, Истина }] }] }]
	ВырожденныеСсылки			= Новый Соответствие; // [{ АдресВырожденнойОбласти, Истина }]
	ИменованныеОбластиКниг		= Новый Соответствие; // [{ Имя, [{ ИмяОбласти, Формула }] }]
	ИменованныеОбластиЛистов	= Новый Соответствие; // [{ АдресЛиста, [{ ИмяОбласти, Формула }] }]
	ГруппыРаскрытия				= Новый Соответствие; // [{ АдресЛиста, [ ГруппыРаскрытия ] }] // ГруппаРаскрытия	= ({ Имя, ИмяОбласти, Аналитики:[ ({ Имя, ВидСубконто, Реквизиты:[ ({ Имя, ИмяОбласти }) ] }) ], Показатели:[ ({ Имя, ИмяОбласти }) ], Прочее:[ ({ Имя, ИмяОбласти }) ] })
	СтруктурыОтчетов			= Новый Массив;       // [ СтруктураОтчетов ] // для формы, есть только у сохраненных 
	XLS							= Новый Соответствие; // [{ ИмяКниги, ХранилищеЗначенияДвоичныеДанныеXLS }]
	ПравилаИмпортаТаблиц		= Новый Соответствие; // [{ АдресЛиста, ПравилаИмпортаТаблицСохраненнаяНастройкаXML }]
	СозданныеОбъекты			= Новый Соответствие; // [{ ТипОбъектаСтрока, [ [{ Адрес, УникальныйИдентификаторСсылки }], [{ Адрес, ДанныеXML }] ] }]
	ПараметрыВидовОтчетов		= Новый Соответствие; // [{ АдресЛиста, [{ ВидКурса, СуществующийВидОтчета }] }]
	
	ОтложенныеФормулы	= Новый Массив;
	
	ВырожденныеОбласти = Новый Соответствие;
	
	Для Каждого АдресРезультата Из АдресаРезультатов Цикл
		
		Попытка
			СтруктураКниги = ПолучитьИзВременногоХранилища(АдресРезультата).Получить();
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		
		Если СтруктураКниги.Свойство("Имя") Тогда
			
			ЕстьНовыеКниги = Истина;
				
			Книга = Новый Структура;
			Книги.Вставить(СтруктураКниги.Имя, Книга);
			
			Книга.Вставить("Имя", СтруктураКниги.Имя);
			Книга.Вставить("Листы", Новый Массив);
			Книга.Вставить("Листы_", Новый Соответствие);
			
			СкопироватьСсылки(СтруктураКниги.ИсходящиеСсылки, ИсходящиеСсылки, Ложь);
			СкопироватьСсылки(СтруктураКниги.ВходящиеСсылки, ВходящиеСсылки, Истина);
			
			Для Каждого Ссылка Из СтруктураКниги.ВырожденныеОбласти Цикл
				Если ВырожденныеОбласти.Получить(Ссылка.Ключ) = Неопределено Тогда
					ВырожденныеОбласти.Вставить(Ссылка.Ключ, Ссылка.Значение);
				КонецЕсли;
			КонецЦикла;
			
			НовыеИндексыФормул = Новый Массив;
			
			Для ПрежнийИндексФормулы = 0 По СтруктураКниги.ТекстыФормул.ВГраница() Цикл
				ТекстФормулы = СтруктураКниги.ТекстыФормул[ПрежнийИндексФормулы];
				ИндексТекущейФормулы = ИндексыФормул.Получить(ТекстФормулы);
				Если ИндексТекущейФормулы = Неопределено Тогда
					ИндексФормулы = ИндексыФормул.Количество();
					ИндексыФормул.Вставить(ТекстФормулы, ИндексФормулы);
					ТекстыФормул.Вставить(ИндексФормулы, ТекстФормулы);
					ДеревьяФормул.Вставить(ИндексФормулы, СтруктураКниги.ДеревьяФормул[ПрежнийИндексФормулы]);
					НовыеИндексыФормул.Добавить(ИндексФормулы);
				Иначе
					НовыеИндексыФормул.Добавить(ИндексТекущейФормулы);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ОбластьФормулы Из СтруктураКниги.ОбластиФормул Цикл
				ОбластиФормул.Вставить(ОбластьФормулы.Ключ, НовыеИндексыФормул[ОбластьФормулы.Значение]);
			КонецЦикла;
			
			СкопироватьСоответствиеВСоответствие(СтруктураКниги.ОперандыФормул, ОперандыФормул);
			
			Для Каждого СтрокаЛист Из СтруктураКниги.Листы Цикл
				
				Лист = Новый Структура;
				
				Лист.Вставить("Адрес", СтрокаЛист.АдресЛиста);
				Лист.Вставить("Имя", СтрокаЛист.Имя);
				Лист.Вставить("Книга", Книга.Имя);
				
				ФормулыЛиста = Новый Соответствие;
				Для Каждого ФормулаЛиста Из СтрокаЛист.Формулы Цикл
					ФормулыЛиста.Вставить(НовыеИндексыФормул[ФормулаЛиста.Ключ], Истина);
				КонецЦикла; 
				Лист.Вставить("Формулы", ФормулыЛиста);
				
				Лист.Вставить("ТекущаяОбласть", Неопределено);
				
				Листы.Вставить(Лист.Адрес, Лист);
				
				Книга.Листы.Добавить(Лист.Адрес);
				Книга.Листы_.Вставить(Лист.Имя, Лист.Адрес);
				
				ТабличныеДокументы.Вставить(Лист.Адрес, СтрокаЛист.Документ);
				
			КонецЦикла;
			
			ИменованныеОбластиКниг.Вставить(Книга.Имя, СтруктураКниги.ИменованныеОбластиКниги);
			
			Для Каждого Область Из СтруктураКниги.ИменованныеОбластиЛистов Цикл
				ИменованныеОбластиЛистов.Вставить(Область.Ключ, Область.Значение);
			КонецЦикла; 
			
			Для Каждого ОтложеннаяФормула Из СтруктураКниги.ОтложенныеФормулы Цикл
				ОтложенныеФормулы.Добавить(ОтложеннаяФормула);
			КонецЦикла; 
			
			XLS.Вставить(Книга.Имя, СтруктураКниги.XLS);
			
			Если СозданныеОбъекты.Количество() = 0 Тогда
				СозданныеОбъекты = СтруктураКниги.СозданныеОбъекты;
			КонецЕсли;
			
		Иначе
			
			СтруктурыОтчетов.Добавить(СтруктураКниги.СтруктураОтчетов);
			
			Если Книги.Количество() = 0 Тогда
				
				Книги						= СтруктураКниги.Книги;
				Листы						= СтруктураКниги.Листы;
				ОбластиФормул				= СтруктураКниги.ОбластиФормул;
				ИндексыФормул				= СтруктураКниги.ИндексыФормул;
				ТекстыФормул				= СтруктураКниги.ТекстыФормул;
				ДеревьяФормул				= СтруктураКниги.ДеревьяФормул;
				ОперандыФормул				= СтруктураКниги.ОперандыФормул;
				ТабличныеДокументы			= СтруктураКниги.ТабличныеДокументы;
				ВходящиеСсылки				= СтруктураКниги.ВходящиеСсылки;
				ИсходящиеСсылки				= СтруктураКниги.ИсходящиеСсылки;
				ВырожденныеСсылки			= СтруктураКниги.ВырожденныеСсылки;
				ИменованныеОбластиКниг		= СтруктураКниги.ИменованныеОбластиКниг;
				ИменованныеОбластиЛистов	= СтруктураКниги.ИменованныеОбластиЛистов;
				ГруппыРаскрытия				= СтруктураКниги.ГруппыРаскрытия;
				XLS							= СтруктураКниги.XLS;
				ПравилаИмпортаТаблиц		= СтруктураКниги.ПравилаИмпортаТаблиц;
				СозданныеОбъекты			= СтруктураКниги.СозданныеОбъекты;
				ПараметрыВидовОтчетов		= СтруктураКниги.ПараметрыВидовОтчетов;
				
				
			Иначе
				
				СкопироватьСоответствиеВСоответствие(СтруктураКниги.Книги,					Книги);
				СкопироватьСоответствиеВСоответствие(СтруктураКниги.ОперандыФормул,			ОперандыФормул);
				СкопироватьСоответствиеВСоответствие(СтруктураКниги.ТабличныеДокументы,		ТабличныеДокументы);
				СкопироватьСоответствиеВСоответствие(СтруктураКниги.ВходящиеСсылки,			ВходящиеСсылки);
				СкопироватьСоответствиеВСоответствие(СтруктураКниги.ИсходящиеСсылки,		ИсходящиеСсылки);
				СкопироватьСоответствиеВСоответствие(СтруктураКниги.ВырожденныеСсылки,		ВырожденныеСсылки);
				СкопироватьСоответствиеВСоответствие(СтруктураКниги.ИменованныеОбластиКниг,	ИменованныеОбластиКниг);
				СкопироватьСоответствиеВСоответствие(СтруктураКниги.ИменованныеОбластиЛистов, ИменованныеОбластиЛистов);
				СкопироватьСоответствиеВСоответствие(СтруктураКниги.ГруппыРаскрытия,		ГруппыРаскрытия);
				СкопироватьСоответствиеВСоответствие(СтруктураКниги.XLS,					XLS);
				СкопироватьСоответствиеВСоответствие(СтруктураКниги.ПравилаИмпортаТаблиц,	ПравилаИмпортаТаблиц);
				СкопироватьСоответствиеВСоответствие(СтруктураКниги.ПараметрыВидовОтчетов,	ПараметрыВидовОтчетов);
				
				НовыеИндексыФормул = Новый Соответствие;
				
				Для Каждого ЭлементТекстФормулы Из СтруктураКниги.ТекстыФормул Цикл
					ПрежнийИндексФормулы = ЭлементТекстФормулы.Ключ;
					ТекстФормулы = ЭлементТекстФормулы.Значение;
					НовыйИндексФормулы = ИндексыФормул.Получить(ТекстФормулы);
					Если НовыйИндексФормулы = Неопределено Тогда
						НовыйИндексФормулы = ИндексыФормул.Количество();
						ИндексыФормул.Вставить(ТекстФормулы, НовыйИндексФормулы);
						ТекстыФормул.Вставить(НовыйИндексФормулы, ТекстФормулы);
						ДеревьяФормул.Вставить(НовыйИндексФормулы, СтруктураКниги.ДеревьяФормул[ПрежнийИндексФормулы]);
					КонецЕсли;
					НовыеИндексыФормул.Вставить(ПрежнийИндексФормулы, НовыйИндексФормулы);
				КонецЦикла;
				
				Для Каждого ОбластьФормулы Из СтруктураКниги.ОбластиФормул Цикл
					ОбластиФормул.Вставить(ОбластьФормулы.Ключ, НовыеИндексыФормул[ОбластьФормулы.Значение]);
				КонецЦикла;
				
				Для Каждого СтрокаЛист Из СтруктураКниги.Листы Цикл
					ФормулыЛиста = Новый Соответствие;
					Для Каждого ФормулаЛиста Из СтрокаЛист.Значение.Формулы Цикл
						ФормулыЛиста.Вставить(НовыеИндексыФормул[ФормулаЛиста.Ключ], Истина);
					КонецЦикла; 
					СтрокаЛист.Значение.Вставить("Формулы", ФормулыЛиста);
				КонецЦикла;
				
				СкопироватьСоответствиеВСоответствие(СтруктураКниги.Листы, Листы);
				
				Для Каждого КоллекцияТипа Из СтруктураКниги.СозданныеОбъекты Цикл
					
					СкопироватьСоответствиеВСоответствие(КоллекцияТипа.Значение[0],		СозданныеОбъекты[КоллекцияТипа.Ключ][0]);
					СкопироватьСоответствиеВСоответствие(КоллекцияТипа.Значение[1],		СозданныеОбъекты[КоллекцияТипа.Ключ][1]);
					
				КонецЦикла; 
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВырожденныеСсылки = Новый Соответствие;
	Для Каждого ВходящиеСсылкиЛиста Из ВходящиеСсылки Цикл
		
		Для Каждого Ссылка Из ВходящиеСсылкиЛиста.Значение Цикл
			
			ВырожденнаяОбласть = ВырожденныеОбласти.Получить(Ссылка.Ключ);
			Если НЕ ВырожденнаяОбласть = Неопределено Тогда
				ВырожденныеСсылки.Вставить(Ссылка.Ключ, ВырожденнаяОбласть);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ОтложенныеФормулы.Количество() > 0 Тогда
		
		СтруктураФормул = Новый Структура;
		СтруктураФормул.Вставить("Деревья", ДеревьяФормул);
		СтруктураФормул.Вставить("Тексты", ТекстыФормул);
		СтруктураФормул.Вставить("Области", ОбластиФормул);
		СтруктураФормул.Вставить("Операнды", ОперандыФормул);
		СтруктураФормул.Вставить("Индексы", ИндексыФормул);
		
		СтруктураФормул.Вставить("СтрокиОперандов", Новый Соответствие);
		СтруктураФормул.Вставить("РазложенныеОперанды", Новый Соответствие);
		
		СтруктураСсылок = Новый Массив;
		СтруктураСсылок.Добавить(ИсходящиеСсылки);
		СтруктураСсылок.Добавить(ВходящиеСсылки);
		
		Для Каждого Ф Из ОтложенныеФормулы Цикл
			ОбработатьФормулу(Ф.Формула, Ф.АдресЛиста, Ф.НомерСтроки, Ф.НомерКолонки, ПараметрыАдресации, Листы[Ф.АдресЛиста].Книга, Листы[Ф.АдресЛиста].Имя, СтруктураФормул, СтруктураСсылок, Листы[Ф.АдресЛиста].Формулы, Истина, ИменованныеОбластиКниг, ИменованныеОбластиЛистов);
		КонецЦикла;
		
	КонецЕсли;
	
	Данные = Новый Структура;
	Данные.Вставить("Книги", Книги);
	Данные.Вставить("Листы", Листы);
	Данные.Вставить("ТабличныеДокументы", ТабличныеДокументы);
	Данные.Вставить("ОбластиФормул", ОбластиФормул); 
	Данные.Вставить("ОперандыФормул", ОперандыФормул);
	Данные.Вставить("ТекстыФормул", ТекстыФормул);
	Данные.Вставить("ДеревьяФормул", ДеревьяФормул);
	Данные.Вставить("ИсходящиеСсылки", ИсходящиеСсылки);
	Данные.Вставить("ВходящиеСсылки", ВходящиеСсылки);
	Данные.Вставить("ВырожденныеСсылки", ВырожденныеСсылки);
	Данные.Вставить("ИменованныеОбластиКниг", ИменованныеОбластиКниг);
	Данные.Вставить("ИменованныеОбластиЛистов", ИменованныеОбластиЛистов);
	Данные.Вставить("ГруппыРаскрытия", ГруппыРаскрытия);
	Данные.Вставить("СтруктурыОтчетов", СтруктурыОтчетов);
	Данные.Вставить("XLS", XLS);
	Данные.Вставить("ПравилаИмпортаТаблиц", ПравилаИмпортаТаблиц);
	Данные.Вставить("СозданныеОбъекты", СозданныеОбъекты);
	Данные.Вставить("ПараметрыВидовОтчетов", ПараметрыВидовОтчетов);
	
	Возврат Данные;
	
КонецФункции

// ЧТЕНИЕ КНИГИ

Процедура УправлениеЧтениемКниг(Файлы, ПараметрыАдресации, КлючЗадания = Неопределено) Экспорт
	
	Для Каждого СтрокаФайлы Из Файлы Цикл
		Параметры = Новый Структура("Файл,Книга,Тип,ПараметрыАдресации,АдресРезультата", СтрокаФайлы.Данные, СтрокаФайлы.Представление, СтрокаФайлы.Тип, ПараметрыАдресации, СтрокаФайлы.АдресРезультата);
		Обработки.ИмпортВидовОтчетовИзЭлектронныхТаблицMicrosoftExcel.ПрочитатьКнигу(Параметры);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьКнигу(ПараметрыЗадания, КлючЗадания = Неопределено) Экспорт
	
	ОчередьФоновыхЗаданийУХ.УстановитьСостояниеЗадания(КлючЗадания,, 1);
	
	ИмяZipФайла = ПолучитьИмяВременногоФайла();
	ПараметрыЗадания.Файл.Записать(ИмяZipФайла);
	
	ИмяВременногоКаталога = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременногоКаталога);
	
	ЧтениеZipФайла = Новый ЧтениеZipФайла(ИмяZipФайла);
	ЧтениеZipФайла.ИзвлечьВсе(ИмяВременногоКаталога);
	
	Если ПараметрыЗадания.Тип = 0 Тогда
		
		Если СтрДлина(ЧтениеZipФайла.Элементы[0].Имя) >  СтрДлина(ЧтениеZipФайла.Элементы[1].Имя) Тогда
			ИмяФайлаXML = ЧтениеZipФайла.Элементы[0].Имя;
			ИмяФайлаXLS = ЧтениеZipФайла.Элементы[1].Имя;
		Иначе
			ИмяФайлаXML = ЧтениеZipФайла.Элементы[1].Имя;
			ИмяФайлаXLS = ЧтениеZipФайла.Элементы[0].Имя;
		КонецЕсли;
		
		ИмяФайлаXML = ИмяВременногоКаталога + "\" + ИмяФайлаXML;
		ИмяФайлаXLS = ИмяВременногоКаталога + "\" + ИмяФайлаXLS;

		Книга = ПрочитатьТекстКнигиXML(ИмяФайлаXML, ПараметрыЗадания.Книга, ПараметрыЗадания.ПараметрыАдресации, КлючЗадания);
		
		Книга.Вставить("XLS", Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяФайлаXLS), Новый СжатиеДанных()));
		Книга.Вставить("ПравилаИспортаТаблиц", Новый Соответствие);
		
		Книга.Вставить("СозданныеОбъекты", ПолучитьСтруктуруСозданныхОбъектов());
		
	Иначе
		
		Книга = ПересчитатьАдресациюКниг(ПараметрыЗадания.Книга, ИмяВременногоКаталога, ПараметрыЗадания.ПараметрыАдресации, КлючЗадания);
		
	КонецЕсли;
	
	ЧтениеZipФайла.Закрыть();
	//УдалитьФайлы(ИмяZipФайла);
		
	УдалитьФайлы(ИмяВременногоКаталога);
	
	ОчередьФоновыхЗаданийУХ.УстановитьСостояниеЗадания(КлючЗадания,, 95);
	
	Если ЗначениеЗаполнено(КлючЗадания) Тогда
		ОчередьФоновыхЗаданийУХ.ОтправитьСообщение(ПараметрыЗадания.КлючЗаданияРодителя, КлючЗадания, 0, Книга);
	Иначе
		ПоместитьВоВременноеХранилище(Новый ХранилищеЗначения(Книга, Новый СжатиеДанных()), ПараметрыЗадания.АдресРезультата);
	КонецЕсли;
	
	ОчередьФоновыхЗаданийУХ.УстановитьСостояниеЗадания(КлючЗадания,, 100);
	
КонецПроцедуры

Функция ПрочитатьТекстКнигиXML(ИмяФайла, ИмяКниги, ПараметрыАдресации, КлючЗадания)
	
	Чтение = Новый ЧтениеXML();
	Чтение.ОткрытьФайл(ИмяФайла);
	
	НачалоЭлемента = ТипУзлаXML.НачалоЭлемента;
	КонецЭлемента = ТипУзлаXML.КонецЭлемента;
	Текст = ТипУзлаXML.Текст;
	
	АдресацияЛистов = ПараметрыАдресации[ИмяКниги]; // [{ ИмяКниги, [{ ИмяЛиста, АдресЛиста }] }]
	
	НеПрименятьЭвристическийАнализ = ПараметрыАдресации[3];
	
	//ПрогрессКниги = 0;
	
	ТекущийУзел = "";
	СтекУзлов = Новый Массив;
	
	НомерСтроки = 0;
	НомерКолонки = 0;
	ОбъединениеКолонок = 0;
	
	СоответствиеТипов = Новый Соответствие;
	СоответствиеТипов.Вставить("Number", Новый ОписаниеТипов("Число"));
	СоответствиеТипов.Вставить("DateTime", Новый ОписаниеТипов("Дата"));
	СоответствиеТипов.Вставить("Boolean", Новый ОписаниеТипов("Булево"));
	СоответствиеТипов.Вставить("Error", Новый ОписаниеТипов("Строка"));
	
	ВырожденныеОбласти = Новый Соответствие; // области, которых нет - перекрыты другими областями
	
	ОтложенныеФормулы = Новый Массив;
	
	СтруктураФормул = Новый Соответствие;
	СтруктураФормул.Вставить("Деревья", Новый Массив);
	СтруктураФормул.Вставить("Тексты", Новый Массив);
	СтруктураФормул.Вставить("Области", Новый Соответствие);
	СтруктураФормул.Вставить("Операнды", Новый Соответствие);
	СтруктураФормул.Вставить("Индексы", Новый Соответствие);
	
	СтруктураФормул.Вставить("СтрокиОперандов", Новый Соответствие);
	СтруктураФормул.Вставить("РазложенныеОперанды", Новый Соответствие);
	
	СтруктураФормул.Вставить("Отложенные", Новый Соответствие); // [{ ТекстФормулы, Истина }]
	
	СтруктураСсылок = Новый Массив(3);
	СтруктураСсылок[0] = Новый Соответствие; // ИсходящиеСсылки [{ АдресЛиста, [{ Адрес(Исходящей)Области, [{АдресСсылки, [АдресЛиста, Строка, Колонка] }] }] }]
	СтруктураСсылок[1] = Новый Соответствие; // ВходящиеСсылки  [{ АдресЛиста, [{ Адрес(Входящей)Области,  [{АдресСсылки, [АдресЛиста, Строка, Колонка] }] }] }]
	
	Листы = Новый Массив;
	Стили = Новый Соответствие;
	
	ИменованныеОбластиКниги = Новый Соответствие;
	ИменованныеОбластиЛистов = Новый Соответствие;
	
	ИмяЛиста = "";
	
	АдресЛиста = Неопределено;
	
	Документ = Неопределено;                         
	ТабличныеДокументы = Новый Соответствие;
	Область = Неопределено;
	ФорматированныйТекст = "";
	НеобходимоЧитатьПодряд = Ложь;
	МеткаСтроки = Ложь;
	ТипДанных = "";
	Стиль = Новый Структура;
	ПолучитьОбласть = Ложь;
	ИменованныеОбластиЛиста = Новый Соответствие;
	
	ПрименятьОформление = Истина;
	
	ОдинаковыеСтроки = 0;
	ПрофильПредыдущейСтроки1 = "";
	ПрофильПредыдущейСтроки2 = "";
	ОграничитьЧтениеОдинаковыхСтрок = Ложь;
	КоличествоОдинаковыхСтрокПослеКоторогоПрекращаемЧтение = 16;
	
	ИмяСтиляПоУмолчанию = "Default";
	
	ФормулыЛиста = Неопределено;
	
	КоэффициентШириныКолонки = 1/5.5;
	
	Пока Чтение.Прочитать() Цикл
		
		Имя				= Чтение.Имя;
		//ЛокальноеИмя	= Чтение.ЛокальноеИмя;
		ТипУзла			= Чтение.ТипУзла;
		
		Если ТипУзла = НачалоЭлемента Тогда
			
			НеобходимоЧитать = Ложь;
			
			Если ТекущийУзел = "Cell" Тогда
				
				Если Имя = "Data" Тогда
					
					НеобходимоЧитать = Истина;
					
					ТипДанных = Чтение.ПолучитьАтрибут("ss:Type");
					Если ТипДанных = "String" Тогда
						Метка = Чтение.ПолучитьАтрибут("x:Ticked");
						Если Метка = Неопределено Тогда
							МеткаСтроки = Ложь;
						Иначе
							МеткаСтроки = Метка = "1";
						КонецЕсли;
					КонецЕсли;
					
					ПолучитьОбласть = Истина;
					
				ИначеЕсли Имя = "ss:Data" Тогда
						
					НеобходимоЧитать = Истина;
					НеобходимоЧитатьПодряд = Истина;
						
					ФорматированныйТекст = "";
					
					ТипДанных = Чтение.ПолучитьАтрибут("ss:Type");
					Если ТипДанных = "String" Тогда
						Метка = Чтение.ПолучитьАтрибут("x:Ticked");
						Если Метка = "1" Тогда
							ФорматированныйТекст = "'";
						КонецЕсли;
					КонецЕсли;
					
					ПолучитьОбласть = Истина;
					
				ИначеЕсли Имя = "NamedCell" Тогда
										
				КонецЕсли;
				
			ИначеЕсли ТекущийУзел = "Row" Тогда
				
				Если Имя = "Cell" Тогда
					
					Индекс = Чтение.ПолучитьАтрибут("ss:Index");
					Если Индекс = Неопределено Тогда
						НомерКолонки = НомерКолонки + ОбъединениеКолонок + 1;
					Иначе
						НомерКолонки = Число(Индекс);
					КонецЕсли;
					
					НеобходимоОбъединить = Ложь;
					
					ОбъединениеСтрок = Чтение.ПолучитьАтрибут("ss:MergeDown");
					Если ОбъединениеСтрок = Неопределено Тогда
						ОбъединениеСтрок = 0;
					Иначе
						ОбъединениеСтрок = Число(ОбъединениеСтрок);
						НеобходимоОбъединить = Истина;
					КонецЕсли;
					
					ОбъединениеКолонок = Чтение.ПолучитьАтрибут("ss:MergeAcross");
					Если ОбъединениеКолонок = Неопределено Тогда
						ОбъединениеКолонок = 0;
					Иначе
						ОбъединениеКолонок = Число(ОбъединениеКолонок);
						НеобходимоОбъединить = Истина;
					КонецЕсли;
					
					Область = Неопределено;
					
					Если ПрименятьОформление Тогда
						ИмяСтиля = Чтение.ПолучитьАтрибут("ss:StyleID");
					Иначе
						ИмяСтиля = Неопределено;
					КонецЕсли;
					
					ПолучитьОбласть = НеобходимоОбъединить ИЛИ НЕ ИмяСтиля = Неопределено;
					
					Формула = Чтение.ПолучитьАтрибут("ss:Formula");
					
					Если НЕ Формула = Неопределено Тогда
						
						Если НЕ ОбработатьФормулу(Формула, АдресЛиста, НомерСтроки, НомерКолонки, ПараметрыАдресации, ИмяКниги, ИмяЛиста, СтруктураФормул, СтруктураСсылок, ФормулыЛиста) Тогда
							ОтложенныеФормулы.Добавить(Новый Структура("Формула,АдресЛиста,НомерСтроки,НомерКолонки", Формула, АдресЛиста, НомерСтроки, НомерКолонки));
						КонецЕсли;
						
					КонецЕсли;
						
					НеобходимоЧитать = Истина;
					
				КонецЕсли;
				
			ИначеЕсли ТекущийУзел = "Style" Тогда
				
				Если Имя = "Borders" Тогда
					НеобходимоЧитать = Истина;
				Иначе
				    ПрочитатьЭлементСтиля(Имя, Чтение, Стиль);
				КонецЕсли;
				
			ИначеЕсли ТекущийУзел = "Borders" Тогда
				
				Если Имя = "Border" Тогда
					ПрочитатьЭлементСтиля(Имя, Чтение, Стиль);
				КонецЕсли;
				
			ИначеЕсли ТекущийУзел = "Table" Тогда
				
				Если Имя = "Row" Тогда
					
					Если НЕ ОграничитьЧтениеОдинаковыхСтрок Тогда
						
						НомерКолонки = 0;
						ОбъединениеКолонок = 0;
						
						Индекс = Чтение.ПолучитьАтрибут("ss:Index");
						Если Индекс = Неопределено Тогда
							НомерСтроки = НомерСтроки + 1;
						Иначе
							НомерСтроки = Число(Индекс);
						КонецЕсли;
						
						Если ПрименятьОформление Тогда
							
							ВысотаСтроки = Чтение.ПолучитьАтрибут("ss:Height");
							Если НЕ ВысотаСтроки = Неопределено Тогда
								Документ.Область(НомерСтроки,, НомерСтроки).ВысотаСтроки = Число(ВысотаСтроки);
							КонецЕсли;
							
							Скрытая = Чтение.ПолучитьАтрибут("ss:Hidden");
							Если Скрытая = "1" Тогда
								Документ.Область(НомерСтроки,, НомерСтроки).Видимость = Ложь;
							КонецЕсли;
							
							ИмяСтиля = Чтение.ПолучитьАтрибут("ss:StyleID");
							Если НЕ ИмяСтиля = Неопределено Тогда
								ПрименитьСтильКОбласти(Стили[ИмяСтиля], Документ.Область(НомерСтроки,, НомерСтроки));
							КонецЕсли;
							
							ПовторноеОформление = Чтение.ПолучитьАтрибут("ss:Span");
							Если НЕ ПовторноеОформление = Неопределено Тогда
								
								Для НомерПовторнойСтроки = НомерСтроки + 1 По НомерСтроки + Число(ПовторноеОформление) Цикл
									
									Если Скрытая = "1" Тогда
										Документ.Область(НомерСтроки,, НомерСтроки).Видимость = Ложь;
									КонецЕсли;
									
									Если НЕ ИмяСтиля = Неопределено Тогда
										ПрименитьСтильКОбласти(Стили[ИмяСтиля], Документ.Область(НомерСтроки,, НомерСтроки));
									КонецЕсли;
									
								КонецЦикла;
								
							КонецЕсли;
							
						КонецЕсли;
						
						НеобходимоЧитать = Истина;
					
					КонецЕсли;
					
				ИначеЕсли Имя = "Column" Тогда
					
					Индекс = Чтение.ПолучитьАтрибут("ss:Index");
					Если Индекс = Неопределено Тогда
						НомерКолонки = НомерКолонки + 1;
					Иначе
						НомерКолонки = Число(Индекс);
					КонецЕсли;
					
					Если ПрименятьОформление Тогда
						
						ШиринаКолонки = Чтение.ПолучитьАтрибут("ss:Width");
						Если НЕ ШиринаКолонки = Неопределено Тогда
							Документ.Область(, НомерКолонки,, НомерКолонки).ШиринаКолонки = Число(ШиринаКолонки)* КоэффициентШириныКолонки;
						КонецЕсли;
						
						Скрытая = Чтение.ПолучитьАтрибут("ss:Hidden");
						Если Скрытая = "1" Тогда
							Документ.Область(, НомерКолонки,, НомерКолонки).Видимость = Ложь;
						КонецЕсли;
						
						ИмяСтиля = Чтение.ПолучитьАтрибут("ss:StyleID");
						Если НЕ ИмяСтиля = Неопределено Тогда
							ПрименитьСтильКОбласти(Стили[ИмяСтиля], Документ.Область(, НомерКолонки,, НомерКолонки));
						КонецЕсли;
						
						ПовторноеОформление = Чтение.ПолучитьАтрибут("ss:Span");
						Если НЕ ПовторноеОформление = Неопределено Тогда
							
							Для НомерПовторнойКолонки = НомерКолонки + 1 По НомерКолонки + Число(ПовторноеОформление) Цикл
								
								Если Скрытая = "1" Тогда
									Документ.Область(, НомерПовторнойКолонки,, НомерПовторнойКолонки).Видимость = Ложь;
								КонецЕсли;
								
								Если НЕ ИмяСтиля = Неопределено Тогда
									ПрименитьСтильКОбласти(Стили[ИмяСтиля], Документ.Область(, НомерПовторнойКолонки,, НомерПовторнойКолонки));
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТекущийУзел = "Styles" Тогда
				
				Если Имя = "Style" Тогда
					Стиль = Новый Структура;
					ИмяСтиля = Чтение.ПолучитьАтрибут("ss:ID");
					Стили.Вставить(ИмяСтиля, Стиль);
					Если НЕ ИмяСтиля = ИмяСтиляПоУмолчанию Тогда
						ssParent = Чтение.ПолучитьАтрибут("ss:Parent");
						Стиль.Вставить("Родитель", ?(ssParent = Неопределено, ИмяСтиляПоУмолчанию, ssParent));
					КонецЕсли;
					НеобходимоЧитать = Истина;
				КонецЕсли;
				
			ИначеЕсли ТекущийУзел = "Names" Тогда
				
				Если Имя = "NamedRange" Тогда
					Если Документ = Неопределено Тогда
						ИменованныеОбластиКниги.Вставить(Чтение.ПолучитьАтрибут("ss:Name"), Сред(Чтение.ПолучитьАтрибут("ss:RefersTo"), 2));
					Иначе
						ИменованныеОбластиЛиста.Вставить(Чтение.ПолучитьАтрибут("ss:Name"), Сред(Чтение.ПолучитьАтрибут("ss:RefersTo"), 2));
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТекущийУзел = "Worksheet" Тогда
				
				Если Имя = "Table" Тогда
					
					НомерСтроки = 0;
					НомерКолонки = 0;
					
					Если ПрименятьОформление Тогда
						
						ШиринаКолонокПоУмолчанию = Чтение.ПолучитьАтрибут("ss:DefaultColumnWidth");
						Если НЕ ШиринаКолонокПоУмолчанию = Неопределено Тогда
							Документ.Область().ШиринаКолонки = Число(ШиринаКолонокПоУмолчанию) * КоэффициентШириныКолонки;
						КонецЕсли;
						
						ВысотаСтрокПоУмолчанию = Чтение.ПолучитьАтрибут("ss:DefaultRowHeight");
						Если НЕ ВысотаСтрокПоУмолчанию = Неопределено Тогда
							Документ.Область().ВысотаСтроки = Число(ВысотаСтрокПоУмолчанию); 
						КонецЕсли;
						
						ИмяСтиля = Чтение.ПолучитьАтрибут("ss:StyleID");
						Если ИмяСтиля = Неопределено Тогда
							ИмяСтиля = ИмяСтиляПоУмолчанию;
						КонецЕсли;
						ПрименитьСтильКОбласти(Стили[ИмяСтиля], Документ.Область());
						
					КонецЕсли;
					
					ОграничитьЧтениеОдинаковыхСтрок = Ложь;
					ОдинаковыеСтроки = 0;
					
					НеобходимоЧитать = Истина;
					
				ИначеЕсли Имя = "Names" Тогда
					НеобходимоЧитать = Истина;
				КонецЕсли;
				
			ИначеЕсли ТекущийУзел = "Workbook" Тогда
				
				Если Имя = "Worksheet" Тогда
					
					ИмяЛиста = Чтение.ПолучитьАтрибут("ss:Name");
					
					АдресЛиста = АдресацияЛистов[ИмяЛиста];
					
					НеобходимоЧитать = НЕ АдресЛиста = Неопределено;
					
					Если НеобходимоЧитать Тогда
						
						Документ = Новый ТабличныйДокумент;
						ИменованныеОбластиЛиста = Новый Соответствие;
						
						ФормулыЛиста = Новый Соответствие;
						
						ПрименятьОформление = Истина;
						
						//ОчередьФоновыхЗаданийУХ.УстановитьСостояниеЗадания(КлючЗадания,, 1 + ПрогрессКниги*94,);
						
					КонецЕсли;
					
				ИначеЕсли Имя = "Styles" Тогда
					НеобходимоЧитать = Истина;
				ИначеЕсли Имя = "Names" Тогда
					НеобходимоЧитать = Истина;
				КонецЕсли;
				
			ИначеЕсли ТекущийУзел = "" Тогда
				
				Если Имя = "Workbook" Тогда
					НеобходимоЧитать = Истина;
				КонецЕсли;
				
			ИначеЕсли ТекущийУзел = "ss:Data" Тогда
				
				ФорматированныйТекст = ФорматированныйТекст + "<" + Имя + ">";
				
			КонецЕсли;
			
			Если ПолучитьОбласть Тогда
				Если Область = Неопределено Тогда
					Если НеобходимоОбъединить Тогда
						Область = Документ.Область(НомерСтроки, НомерКолонки, НомерСтроки + ОбъединениеСтрок, НомерКолонки + ОбъединениеКолонок);
					Иначе
						Область = Документ.Область(НомерСтроки, НомерКолонки);
					КонецЕсли;
					Если НЕ ИмяСтиля = Неопределено Тогда
						ПрименитьСтильКОбласти(Стили[ИмяСтиля], Область);
					КонецЕсли;
				КонецЕсли;
				ПолучитьОбласть = Ложь;
			КонецЕсли;
			
			Если НеобходимоЧитать Тогда
				СтекУзлов.Добавить(ТекущийУзел);
				ТекущийУзел = Имя;
			ИначеЕсли НЕ НеобходимоЧитатьПодряд Тогда
				Чтение.Пропустить();
			КонецЕсли;
			
		ИначеЕсли ТипУзла = КонецЭлемента Тогда
			
			Если ТекущийУзел = Имя Тогда
				
				Если ТекущийУзел = "Cell" И НеобходимоОбъединить Тогда
					
					Область.Объединить();
					Для Строка = НомерСтроки По НомерСтроки + ОбъединениеСтрок Цикл
						АдресСтрокиЛиста = АдресСтрокиЛиста(АдресЛиста, Строка);
						Для Колонка = НомерКолонки По НомерКолонки + ОбъединениеКолонок Цикл
							ВставитьВСоответствие(ВырожденныеОбласти, АдресЯчейкиСтрокиЛиста(АдресСтрокиЛиста, Колонка));//, СтрокаКолонка);
						КонецЦикла;
					КонецЦикла;
					ВырожденныеОбласти.Удалить(АдресЯчейкиЛиста(АдресЛиста, НомерСтроки, НомерКолонки));
					
				ИначеЕсли ТекущийУзел = "Row" И НЕ НеПрименятьЭвристическийАнализ И НЕ ОграничитьЧтениеОдинаковыхСтрок Тогда
					
					ПрофильТекущейСтроки1 = "";
					ПрофильТекущейСтроки2 = "";
					АдресСтрокиЛиста = АдресСтрокиЛиста(АдресЛиста, НомерСтроки);
					Для К = 1 По Документ.ШиринаТаблицы Цикл
						ИндексФормулы = СтруктураФормул["Области"].Получить(АдресЯчейкиСтрокиЛиста(АдресСтрокиЛиста, К));
						ПрофильТекущейСтроки1 = ПрофильТекущейСтроки1 + "," + ?(ИндексФормулы = Неопределено, "", ИндексФормулы);
						ПрофильТекущейСтроки2 = ПрофильТекущейСтроки2 + "|" + СокрЛП(Документ.Область(НомерСтроки, К).Текст);
					КонецЦикла;
					
					Если ПрофильПредыдущейСтроки1 = ПрофильТекущейСтроки1 И ПрофильТекущейСтроки2 = ПрофильПредыдущейСтроки2 Тогда
						ОдинаковыеСтроки = ОдинаковыеСтроки + 1;
					Иначе
						ОдинаковыеСтроки = 1;
					КонецЕсли;
					
					ПрофильПредыдущейСтроки1 = ПрофильТекущейСтроки1;
					ПрофильПредыдущейСтроки2 = ПрофильТекущейСтроки2;
					
					Если ОдинаковыеСтроки = КоличествоОдинаковыхСтрокПослеКоторогоПрекращаемЧтение Тогда
						
						ОграничитьЧтениеОдинаковыхСтрок = Истина;
						Документ.УдалитьОбласть(Документ.Область(НомерСтроки - ОдинаковыеСтроки + 2,, НомерСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
						
						АдресСтрокиЛиста = АдресСтрокиЛиста(АдресЛиста, НомерСтроки - ОдинаковыеСтроки + 2);
						ИсходящиеСсылкиЛиста = СтруктураСсылок[0][АдресЛиста];
						ВходящиеСсылкиЛиста  = СтруктураСсылок[1][АдресЛиста];
						
						Для К = 1 По Документ.ШиринаТаблицы Цикл
							
							Если СтруктураФормул["Области"].Получить(АдресЯчейкиСтрокиЛиста(АдресСтрокиЛиста, К)) = Неопределено Тогда
								Продолжить;
							КонецЕсли;
							
							АдресКолонкиЛиста = АдресКолонкиЛиста(АдресЛиста, К);
							
							Для С = НомерСтроки - ОдинаковыеСтроки + 2 По НомерСтроки Цикл
								
								АдресЯчейкиЛиста = АдресЯчейкиКолонкиЛиста(АдресКолонкиЛиста, С);
								
								СтруктураФормул["Области"].Удалить(АдресЯчейкиЛиста);
								СтруктураФормул["Операнды"].Удалить(АдресЯчейкиЛиста);
								
								Для Каждого ВходящаяСсылкаЛиста Из ИсходящиеСсылкиЛиста[АдресЯчейкиЛиста] Цикл
									
									АдресЛистаВходящейСсылки = РазложитьАдресЯчейки(ВходящаяСсылкаЛиста.Ключ)[0];
									
									ВходящиеСсылкиПоИсходящей = СтруктураСсылок[1][АдресЛистаВходящейСсылки][ВходящаяСсылкаЛиста.Ключ];
									
									Если ВходящиеСсылкиПоИсходящей.Количество() = 1 Тогда
										СтруктураСсылок[1][АдресЛистаВходящейСсылки].Удалить(ВходящаяСсылкаЛиста.Ключ);
									Иначе
										ВходящиеСсылкиПоИсходящей.Удалить(АдресЯчейкиЛиста);
									КонецЕсли;
									
								КонецЦикла; 
								
								ИсходящиеСсылкиЛиста.Удалить(АдресЯчейкиЛиста);
								
							КонецЦикла; 
							
						КонецЦикла; 
						
					КонецЕсли;
					
				ИначеЕсли ТекущийУзел = "Styles" Тогда
					
					ИменаСтилей = Новый Массив;
					
					Для Каждого Стиль Из Стили Цикл
						ИменаСтилей.Добавить(Стиль.Ключ);
						РасширитьСтильРодительскимСтилем(Стиль.Значение, Стили);
					КонецЦикла;
					
					Для Каждого ИмяСтиля Из ИменаСтилей Цикл
						Если Стили.Получить(ИмяСтиля).Количество() = 0 Тогда
							Стили.Удалить(ИмяСтиля);
						КонецЕсли;
					КонецЦикла;
					
				ИначеЕсли ТекущийУзел = "Table" Тогда
					
					Если ОграничитьЧтениеОдинаковыхСтрок Тогда
						ПустыхКолонок = 0;
						НашлиЗначение = Ложь;
						К = Документ.ШиринаТаблицы;
						Пока К > 0 Цикл
							Для С = 1 По Документ.ВысотаТаблицы Цикл
								Обл = Документ.Область(С, К);
								Если Обл.СодержитЗначение ИЛИ НЕ ПустаяСтрока(Обл.Текст) ИЛИ НЕ (Обл.Верх = С И Обл.Лево = К) Тогда
									НашлиЗначение = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла; 
							Если НашлиЗначение Тогда
								Прервать;
							КонецЕсли;
							ПустыхКолонок = ПустыхКолонок + 1;
							К = К - 1;
						КонецЦикла;
						Если ПустыхКолонок > 0 Тогда
							Документ.УдалитьОбласть(Документ.Область(, Документ.ШиринаТаблицы - ПустыхКолонок + 1,, Документ.ШиринаТаблицы), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
						КонецЕсли;
					КонецЕсли;
					
					Листы.Добавить(Новый Структура("Имя,АдресЛиста,Документ,Формулы", ИмяЛиста, АдресЛиста, Документ, ФормулыЛиста));
					
					ИменованныеОбластиЛистов.Вставить(АдресЛиста, ИменованныеОбластиЛиста);
					
					ТабличныеДокументы.Вставить(ИмяЛиста, Документ);
					
					Документ = Неопределено;
					
					//ПрогрессКниги = ПрогрессКниги + РазмерыЛистовКниги[ИндексЛиста]/РазмерКниги; 
					
				ИначеЕсли ТекущийУзел = "ss:Data" Тогда
					
					Область.Текст = ФорматированныйТекст;
					НеобходимоЧитатьПодряд = Ложь;
					
				КонецЕсли;
				
				ВГраница = СтекУзлов.ВГраница();
				ТекущийУзел = СтекУзлов[ВГраница];
				СтекУзлов.Удалить(ВГраница);
				
			ИначеЕсли ТекущийУзел = "ss:Data" Тогда
				
				ФорматированныйТекст = ФорматированныйТекст + "</" + Имя + ">";
				
			КонецЕсли;
			
		ИначеЕсли ТипУзла = Текст Тогда
			
			Если ТекущийУзел = "Data" Тогда
				
				Если ТипДанных = "String" Тогда
					Область.Текст = ?(МеткаСтроки, "'", "") + Чтение.Значение;
				Иначе
					Область.СодержитЗначение = Истина;
					Область.ТипЗначения = СоответствиеТипов[ТипДанных];
					Если ТипДанных = "DateTime" Тогда
						ДатаВремя = Чтение.Значение; //2000-12-31T23:59:59.999
						Область.Значение = Вычислить("Дата('" + Лев(ДатаВремя, СтрДлина(ДатаВремя)-4)+ "')");
					Иначе
						Область.Значение = СоответствиеТипов[ТипДанных].ПривестиЗначение(Чтение.Значение);
					КонецЕсли;
				КонецЕсли;	
				
			ИначеЕсли ТекущийУзел = "ss:Data" Тогда
				
				ФорматированныйТекст = ФорматированныйТекст + Чтение.Значение;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Чтение.Закрыть();
	
	МассивКонтейнеровИменованныхОбластей = Новый Массив;
	МассивКонтейнеровИменованныхОбластей.Добавить(ИменованныеОбластиКниги);
	Для Каждого ЭлементИменованныеОбластиЛиста Из ИменованныеОбластиЛистов Цикл
		МассивКонтейнеровИменованныхОбластей.Добавить(ЭлементИменованныеОбластиЛиста.Значение);
	КонецЦикла; 
	
	Для Каждого КонтейнерИменованныхОбластей Из МассивКонтейнеровИменованныхОбластей Цикл
		
		Для Каждого Формула Из КонтейнерИменованныхОбластей Цикл
			
			Дерево = РазложитьФормулу("=" + Формула.Значение);
			Если Дерево.Строки.Количество() = 1 И Дерево.Строки[0].Строки.Количество() = 1 И (Дерево.Строки[0].Строки[0].Тип = "Операнд_НЕОПРЕДЕЛЕНО" ИЛИ Дерево.Строки[0].Строки[0].Тип = "Операнд_Интервал") Тогда
				Операнд = Дерево.Строки[0].Строки[0].Значение;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Разложение = РазложитьОперанд(Операнд, СтруктураФормул["РазложенныеОперанды"]);
			Если НЕ (ПустаяСтрока(Разложение[0]) И НЕ ПустаяСтрока(Разложение[1])) Тогда
				Продолжить;
			КонецЕсли;
			
			Документ = ТабличныеДокументы[Разложение[1]];
			Если Документ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				Если Разложение.Количество() = 3 Тогда
					Область = Документ.Область(Разложение[2]);
				Иначе
					Область = Документ.Область(Разложение[2] + ":" + Разложение[3]);
				КонецЕсли;
				Область.Имя = Формула.Ключ;
			Исключение
			КонецПопытки;
			
		КонецЦикла; 
		
	КонецЦикла; 
			
	Возврат Новый Структура("Имя,Листы,ОбластиФормул,ТекстыФормул,ОперандыФормул,ДеревьяФормул,ОтложенныеФормулы,ИсходящиеСсылки,ВходящиеСсылки,ВырожденныеОбласти,ИменованныеОбластиКниги,ИменованныеОбластиЛистов", 
							ИмяКниги, Листы, 
							СтруктураФормул["Области"], СтруктураФормул["Тексты"], СтруктураФормул["Операнды"], СтруктураФормул["Деревья"], 
							ОтложенныеФормулы,
							СтруктураСсылок[0], СтруктураСсылок[1],
							ВырожденныеОбласти,
							ИменованныеОбластиКниги, ИменованныеОбластиЛистов);

КонецФункции

Функция ПересчитатьАдресациюКниг(ИмяСохраненногоФайла, ИмяВременногоКаталога, ПараметрыАдресации, КлючЗадания)
		
	ЭлементыДанных = Новый Массив;
	ЭлементыДанных.Добавить("Книги");
	ЭлементыДанных.Добавить("Листы");
	ЭлементыДанных.Добавить("ОбластиФормул"); 
	ЭлементыДанных.Добавить("ТекстыФормул");
	ЭлементыДанных.Добавить("ДеревьяФормул");
	ЭлементыДанных.Добавить("ОперандыФормул");
	ЭлементыДанных.Добавить("ИсходящиеСсылки");
	ЭлементыДанных.Добавить("ВходящиеСсылки");
	ЭлементыДанных.Добавить("ВырожденныеСсылки");
	ЭлементыДанных.Добавить("ИменованныеОбластиКниг");
	ЭлементыДанных.Добавить("ИменованныеОбластиЛистов");
	ЭлементыДанных.Добавить("ГруппыРаскрытия");
	ЭлементыДанных.Добавить("СтруктураОтчетов");
	ЭлементыДанных.Добавить("XLS");
	
	ЭлементыДанных02 = Новый Массив;
	ЭлементыДанных02.Добавить("ПравилаИмпортаТаблиц");
	//ЭлементыДанных02.Добавить("СозданныеОбъекты");
	
	Данные = Новый Структура;
	
	Чтение = Новый ЧтениеXML;
	
	Чтение.ОткрытьФайл(ИмяВременногоКаталога + "\Info.xml");
	Info = СериализаторXDTO.ПрочитатьXML(Чтение);
	Чтение.Закрыть();
	
	Если Info.Version = "0.3" Тогда
		Версия = 0.3;
	ИначеЕсли Info.Version = "0.2" Тогда
		Версия = 0.2;
	ИначеЕсли Info.Version = "0.1" Тогда
		Версия = 0.1;
	Иначе
		ТекстИсключения = "Неизвестная версия сохраненной модели в файле """ + ИмяСохраненногоФайла + """";
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
		
	Для Каждого ЭлементДанных Из ЭлементыДанных Цикл
		
		Чтение.ОткрытьФайл(ИмяВременногоКаталога + "\" + ЭлементДанных + ".xml");
		Данные.Вставить(ЭлементДанных, СериализаторXDTO.ПрочитатьXML(Чтение));
		Чтение.Закрыть();
		
	КонецЦикла;
	
	Если Версия > 0.1 Тогда
		Для Каждого ЭлементДанных Из ЭлементыДанных02 Цикл
			Чтение.ОткрытьФайл(ИмяВременногоКаталога + "\" + ЭлементДанных + ".xml");
			Данные.Вставить(ЭлементДанных, СериализаторXDTO.ПрочитатьXML(Чтение));
			Чтение.Закрыть();
		КонецЦикла;
	Иначе
		Для Каждого ЭлементДанных Из ЭлементыДанных02 Цикл
			Данные.Вставить(ЭлементДанных, Новый Соответствие);
		КонецЦикла;
	КонецЕсли;
	
	ЭлементДанных = "СозданныеОбъекты";
	Файл = Новый Файл(ИмяВременногоКаталога + "\" + ЭлементДанных + ".xml");
	Если Файл.Существует() Тогда
		Чтение.ОткрытьФайл(ИмяВременногоКаталога + "\" + ЭлементДанных + ".xml");
		Данные.Вставить(ЭлементДанных, ПолучитьСтруктуруСозданныхОбъектов(СериализаторXDTO.ПрочитатьXML(Чтение)));
		Чтение.Закрыть();
	Иначе
		Данные.Вставить(ЭлементДанных, ПолучитьСтруктуруСозданныхОбъектов());
	КонецЕсли;
	
	ЭлементДанных = "ПараметрыВидовОтчетов";
	Файл = Новый Файл(ИмяВременногоКаталога + "\" + ЭлементДанных + ".xml");
	Если Файл.Существует() Тогда
		Чтение.ОткрытьФайл(ИмяВременногоКаталога + "\" + ЭлементДанных + ".xml");
		Данные.Вставить(ЭлементДанных, СериализаторXDTO.ПрочитатьXML(Чтение));
		Чтение.Закрыть();
	Иначе
		Данные.Вставить(ЭлементДанных, Новый Соответствие);
	КонецЕсли;
	
	ТабличныеДокументы = Новый Соответствие;
	Для Каждого Листы Из Данные.Листы Цикл
		
		Чтение.ОткрытьФайл(ИмяВременногоКаталога + ?(Версия > 0.1, "\ТабличныеДокументы\", "\") + Формат(Листы.Ключ, "ЧГ=;ЧН=;") + ".xml");
		ТабличныеДокументы.Вставить(Листы.Ключ, СериализаторXDTO.ПрочитатьXML(Чтение));
		Чтение.Закрыть();
		
	КонецЦикла;
	Данные.Вставить("ТабличныеДокументы", ТабличныеДокументы);
	
	ИндексыФормул = Новый Соответствие;
	Для Каждого Элемент Из Данные.ТекстыФормул Цикл
		ИндексыФормул.Вставить(Элемент.Значение, Элемент.Ключ);
	КонецЦикла;
	Данные.Вставить("ИндексыФормул", ИндексыФормул);
	
	
	СоставСохраненнойМодели = ПараметрыАдресации[4][ИмяСохраненногоФайла]; // ПараметрыАдресации[4] = [{ ИмяСохраненногоФайла, [{ ИмяКниги, Истина }] }]
	
	НоваяАдресацияЛистов = Новый Соответствие; // [{ СтарыйАдресЛиста, НовыйАдресЛиста }]
	Для Каждого ЭлементКнига Из Данные.Книги Цикл
		
		Если СоставСохраненнойМодели[ЭлементКнига.Ключ] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		АдресацияЛистов = ПараметрыАдресации[ЭлементКнига.Ключ];
		Если НЕ АдресацияЛистов = Неопределено Тогда
			Для Каждого ЭлементЛист Из ЭлементКнига.Значение.Листы_ Цикл
				НоваяАдресацияЛистов.Вставить(ЭлементЛист.Значение, АдресацияЛистов[ЭлементЛист.Ключ]);
			КонецЦикла; 
		КонецЕсли;
		
	КонецЦикла;
	
	//Книги				= Новый Соответствие; // [{ Имя, ({ Имя, Листы[АдресЛиста], Листы_[{ Имя, АдресЛиста }] }) }]
	Книги = Новый Соответствие;
	Для Каждого ЭлементКнига Из Данные.Книги Цикл
		
		Если СоставСохраненнойМодели[ЭлементКнига.Ключ] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Книга = ЭлементКнига.Значение;
		
		Листы = Новый Массив;
		Для Каждого АдресЛиста Из Книга.Листы Цикл
			НовыйАдресЛиста = НоваяАдресацияЛистов[АдресЛиста];
			Если НЕ НовыйАдресЛиста = Неопределено Тогда
				Листы.Добавить(НовыйАдресЛиста);
			КонецЕсли;
		КонецЦикла; 
		Книга.Вставить("Листы", Листы);
		
		Если Листы.Количество() > 0 Тогда
			Книги.Вставить(ЭлементКнига.Ключ, Книга);
		Иначе
			Продолжить;
		КонецЕсли;
		
		Листы_ = Новый Соответствие;
		Для Каждого ЭлементЛист Из Книга.Листы_ Цикл
			НовыйАдресЛиста = НоваяАдресацияЛистов[ЭлементЛист.Значение];
			Если НЕ НовыйАдресЛиста = Неопределено Тогда
				Листы_.Вставить(ЭлементЛист.Ключ, НовыйАдресЛиста);
			КонецЕсли;
		КонецЦикла; 
		Книга.Вставить("Листы_", Листы_);
		
	КонецЦикла;
	Данные.Вставить("Книги", Книги);
	
	//Листы				= Новый Соответствие; // [{ АдресЛиста, ({ Адрес, Имя, Книга, Формулы, ТекущаяОбласть }) }]
	Листы = Новый Соответствие;
	Для Каждого ЭлементЛист Из Данные.Листы Цикл
		Лист = ЭлементЛист.Значение;
		НовыйАдресЛиста = НоваяАдресацияЛистов[ЭлементЛист.Ключ];
		Если НЕ НовыйАдресЛиста = Неопределено Тогда
			Лист.Вставить("Адрес", НовыйАдресЛиста);
			Листы.Вставить(НовыйАдресЛиста, Лист);
		КонецЕсли;
	КонецЦикла; 
	Данные.Вставить("Листы", Листы);
	
	//ОперандыФормул	= Новый Соответствие; // [{ АдресОбластиФормулы, [{ ИндексСтрокиДереваФормулы, [{ АдресОбластиОперанда, Истина }] }] }]
	ОперандыФормул = Новый Соответствие;
	Для Каждого ЭлементОперандыФормулы Из Данные.ОперандыФормул Цикл
		НовыйАдрес = НовыйАдресЯчейки(ЭлементОперандыФормулы.Ключ, НоваяАдресацияЛистов);
		Если НовыйАдрес = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Операнды = Новый Соответствие;
		ОперандыФормул.Вставить(НовыйАдрес, Операнды);
		Для Каждого ЭлементСтрокаДереваФормулы Из ЭлементОперандыФормулы.Значение Цикл
			Адреса = Новый Соответствие;
			Операнды.Вставить(ЭлементСтрокаДереваФормулы.Ключ, Адреса);
			Для Каждого ЭлементАдресОбласти Из ЭлементСтрокаДереваФормулы.Значение Цикл
				НовыйАдрес = НовыйАдресЯчейки(ЭлементАдресОбласти.Ключ, НоваяАдресацияЛистов);
				Если НовыйАдрес = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Адреса.Вставить(НовыйАдрес, ЭлементАдресОбласти.Значение);
			КонецЦикла; 
		КонецЦикла;
	КонецЦикла; 
	Данные.Вставить("ОперандыФормул", ОперандыФормул);
	
	Коллекции = Новый Массив;
	Коллекции.Добавить("ВходящиеСсылки");
	Коллекции.Добавить("ИсходящиеСсылки");
	
	Для Каждого Коллекция Из Коллекции Цикл
		
		СсылкиЛистов = Новый Соответствие;
		Для Каждого ЭлементЛист Из Данные[Коллекция] Цикл
			НовыйАдрес = НоваяАдресацияЛистов[ЭлементЛист.Ключ];
			Если НовыйАдрес = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СсылкиЛиста = Новый Соответствие;
			СсылкиЛистов.Вставить(НовыйАдрес, СсылкиЛиста);
			Для Каждого ЭлементОбласть Из ЭлементЛист.Значение Цикл
				НовыйАдрес = НовыйАдресЯчейки(ЭлементОбласть.Ключ, НоваяАдресацияЛистов);
				Если НовыйАдрес = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СсылкиОбласти = Новый Соответствие;
				СсылкиЛиста.Вставить(НовыйАдрес, СсылкиОбласти);
				Для Каждого ЭлементСсылки Из ЭлементОбласть.Значение Цикл
					НовыйАдрес = НовыйАдресЯчейки(ЭлементСсылки.Ключ, НоваяАдресацияЛистов);
					Если НовыйАдрес = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СсылкиОбласти.Вставить(НовыйАдрес, ЭлементСсылки.Значение);
				КонецЦикла; 
			КонецЦикла; 
		КонецЦикла; 
		Данные.Вставить(Коллекция, СсылкиЛистов);
		
	КонецЦикла; 
		
	Коллекции = Новый Массив;
	Коллекции.Добавить("ОбластиФормул");
	Коллекции.Добавить("ТабличныеДокументы");
	Коллекции.Добавить("ВырожденныеСсылки");
	Коллекции.Добавить("ИменованныеОбластиЛистов");
	Коллекции.Добавить("ГруппыРаскрытия");
	Коллекции.Добавить("ПараметрыВидовОтчетов");
	Для Каждого Коллекция Из Коллекции Цикл
		
		Соответствие = Новый Соответствие;
		Для Каждого Элемент Из Данные[Коллекция] Цикл
			НовыйАдрес = НовыйАдресЯчейки(Элемент.Ключ, НоваяАдресацияЛистов);
			Если НЕ НовыйАдрес = Неопределено Тогда
				Соответствие.Вставить(НовыйАдрес, Элемент.Значение);
			КонецЕсли;
		КонецЦикла; 
		Данные.Вставить(Коллекция, Соответствие);
		
	КонецЦикла;
	
	Индексы = Новый Соответствие;
	Для Каждого ЭлементИндекс Из Данные["СтруктураОтчетов"].Индексы Цикл
		НовыйАдресЛиста = НоваяАдресацияЛистов[ЭлементИндекс.Значение];
		Если НЕ НовыйАдресЛиста = Неопределено Тогда
			Индексы.Вставить(ЭлементИндекс.Ключ, НовыйАдресЛиста);
		КонецЕсли;
	КонецЦикла; 
	Данные["СтруктураОтчетов"].Вставить("Индексы", Индексы);
	
	ПравилаИмпортаТаблиц = Новый Соответствие;
	Для Каждого ЭлементПравило Из Данные["ПравилаИмпортаТаблиц"] Цикл
		НовыйАдресЛиста = НоваяАдресацияЛистов[ЭлементПравило.Ключ];
		Если НЕ НовыйАдресЛиста = Неопределено Тогда
			Если Версия < 0.3 Тогда
				М = Новый Массив;
				М.Добавить(ЭлементПравило.Значение);
				ПравилаИмпортаТаблиц.Вставить(НовыйАдресЛиста, М);
			Иначе
				ПравилаИмпортаТаблиц.Вставить(НовыйАдресЛиста, ЭлементПравило.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	Данные.Вставить("ПравилаИмпортаТаблиц", ПравилаИмпортаТаблиц);
	
	Если Версия = 0.1 Тогда
		
		ВидыОтчетов = Новый Массив;
		ВидыОтчетовКорзина = Новый Массив;
		
		Индексы = Данные["СтруктураОтчетов"]["Индексы"];
		
		Для НомерКоллекции = 1 По 2 Цикл
			
			Если НомерКоллекции = 1 Тогда
				МассивОтчетов = Данные["СтруктураОтчетов"].ВидыОтчетов;
				НовыйМассивОтчетов = ВидыОтчетов;
			Иначе
				МассивОтчетов = Данные["СтруктураОтчетов"].ВидыОтчетовКорзина;
				НовыйМассивОтчетов = ВидыОтчетовКорзина;
			КонецЕсли;
			
			Книги = Новый Соответствие;
			
			Для Каждого СтруктураВидаОтчета Из МассивОтчетов Цикл
				
				Если СтруктураВидаОтчета.БланкиОтчетов.Количество() = 1 Тогда
					
					Для Каждого КлючЗначение Из СтруктураВидаОтчета.БланкиОтчетов Цикл
						ЭлементБланк_Индекс = КлючЗначение.Ключ;
						ЭлементБланк_Имя = КлючЗначение.Значение;
						Прервать;
					КонецЦикла; 
					
					КнигаВидаОтчета = Данные["Листы"][Индексы[ЭлементБланк_Индекс]].Книга;
					
					СтруктураКниги = Книги[КнигаВидаОтчета];
					Если СтруктураКниги = Неопределено Тогда
						СтруктураКниги = Новый Структура("Имя,Тип,Элементы", КнигаВидаОтчета, "Отчеты", Новый Массив);
						НовыйМассивОтчетов.Добавить(СтруктураКниги);
						Книги.Вставить(КнигаВидаОтчета, СтруктураКниги);
					КонецЕсли;
					
					БланкВидаОтчета = Новый Структура("Имя,Индекс,Элементы", ЭлементБланк_Имя, ЭлементБланк_Индекс, Новый Массив);
					
					СтруктураКниги.Элементы.Добавить(БланкВидаОтчета);
					
				Иначе
					КнигаВидаОтчета = Неопределено;
					БланкВидаОтчета = Неопределено;
				КонецЕсли;
				
				Для Каждого ЭлементПравило Из СтруктураВидаОтчета.ПравилаПроверки Цикл
					
					ЭлементПравило_Индекс = ЭлементПравило.Ключ;
					ЭлементПравило_Имя = ЭлементПравило.Значение;
					
					КнигаПравила = Данные["Листы"][Индексы[ЭлементПравило_Индекс]].Книга;
					
					Если КнигаПравила = КнигаВидаОтчета Тогда
						
						БланкВидаОтчета.Элементы.Добавить(Новый Структура("Имя,Индекс", ЭлементПравило_Имя, ЭлементПравило_Индекс));
						
					Иначе
						
						СтруктураКнигиПравила = Книги[КнигаПравила];
						Если СтруктураКнигиПравила = Неопределено Тогда
							СтруктураКнигиПравила = Новый Структура("Имя,Тип,Элементы", КнигаПравила, "Отчеты", Новый Массив);
							НовыйМассивОтчетов.Добавить(СтруктураКниги);
							Книги.Вставить(КнигаПравила, СтруктураКнигиПравила);
						КонецЕсли;
						
						СтруктураКнигиПравила.Элементы.Добавить(Новый Структура("Имя,Индекс,Элементы", ЭлементПравило_Имя, ЭлементПравило_Индекс, Новый Массив));
						
					КонецЕсли;
					
				КонецЦикла; 
				
			КонецЦикла; 
			
		КонецЦикла; 
		
		Данные["СтруктураОтчетов"].Вставить("ВидыОтчетов", ВидыОтчетов);
		Данные["СтруктураОтчетов"].Вставить("ВидыОтчетовКорзина", ВидыОтчетовКорзина);
		
	КонецЕсли;
	
	МассивКонтейнеров = Новый Массив;
	МассивКонтейнеров.Добавить("ВидыОтчетов");
	МассивКонтейнеров.Добавить("ВидыОтчетовКорзина");
	Для Каждого ИмяКонтейнера Из МассивКонтейнеров Цикл
		Контейнер = Новый Массив;
		Для Каждого ЭлементОтчет Из Данные["СтруктураОтчетов"][ИмяКонтейнера] Цикл
			Если НЕ Данные["Книги"][ЭлементОтчет.Имя] = Неопределено Тогда
				Контейнер.Добавить(ЭлементОтчет);
			КонецЕсли;
		КонецЦикла;
		Если НЕ Контейнер.Количество() = Данные["СтруктураОтчетов"][ИмяКонтейнера].Количество() Тогда
			Данные["СтруктураОтчетов"].Вставить(ИмяКонтейнера, Контейнер);
		КонецЕсли;
	КонецЦикла; 
	
	СозданныеОбъекты = Новый Соответствие;
	Для Каждого КоллекцияТипа Из Данные["СозданныеОбъекты"] Цикл
		
		Если КоллекцияТипа.Ключ = "ТипБД" Тогда
			
			СозданныеОбъекты.Вставить(КоллекцияТипа.Ключ, КоллекцияТипа.Значение);
			
		ИначеЕсли КоллекцияТипа.Ключ = "ПакетИмпорта" Тогда
			
			СозданныеОбъекты.Вставить(КоллекцияТипа.Ключ, КоллекцияТипа.Значение);
			
		Иначе
			
			НоваяКоллекцияТипа = Новый Массив;
			НоваяКоллекцияТипа.Добавить(Новый Соответствие);
			НоваяКоллекцияТипа.Добавить(Новый Соответствие);
			
			Для Каждого ЭлементКоллекции Из КоллекцияТипа.Значение[0] Цикл
				
				КоллекцияТипа1 = КоллекцияТипа.Значение[1];
				
				НовыйАдрес = НовыйАдресЯчейки(ЭлементКоллекции.Ключ, НоваяАдресацияЛистов);
				
				НоваяКоллекцияТипа[0].Вставить(НовыйАдрес, ЭлементКоллекции.Значение);
				НоваяКоллекцияТипа[1].Вставить(НовыйАдрес, КоллекцияТипа1[ЭлементКоллекции.Ключ]);
				
			КонецЦикла; 
			
			СозданныеОбъекты.Вставить(КоллекцияТипа.Ключ, НоваяКоллекцияТипа);
			
		КонецЕсли;
		
	КонецЦикла;
	Данные.Вставить("СозданныеОбъекты", СозданныеОбъекты);
	
	Возврат Данные;
	
Конецфункции

Функция ПолучитьСтруктуруСозданныхОбъектов(Структура = Неопределено)
	
	Если Структура = Неопределено Тогда
		Структура = Новый Соответствие;
	КонецЕсли;
	
	ЭлементыСтруктуры = Новый Массив;
	ЭлементыСтруктуры.Добавить("ТипБД");
	ЭлементыСтруктуры.Добавить("ВидОтчета");
	ЭлементыСтруктуры.Добавить("Показатель");
	ЭлементыСтруктуры.Добавить("ПакетИмпорта");
	
	Для Каждого ЭлементСтруктуры Из ЭлементыСтруктуры Цикл
		Если Структура.Получить(ЭлементСтруктуры) = Неопределено Тогда
			М2 = Новый Массив;
			М2.Добавить(Новый Соответствие);
			М2.Добавить(Новый Соответствие);
			Структура.Вставить(ЭлементСтруктуры, М2);
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Структура;
	
Конецфункции

// ОБСЛУЖИВАНИЕ СТИЛЕЙ

Процедура ПрочитатьЭлементСтиля(Имя, Чтение, Стиль)
	
	Если Имя = "Alignment" Тогда
		
		ПрочитатьВыравнивание(Чтение, Стиль);
		
	ИначеЕсли Имя = "Border" Тогда
		
		ПрочитатьГраницу(Чтение, Стиль);
		
	ИначеЕсли Имя = "Font" Тогда
		
		ПрочитатьШрифт(Чтение, Стиль);
		
	ИначеЕсли Имя = "Interior" Тогда
		
		ПрочитатьЗаливку(Чтение, Стиль);
		
	ИначеЕсли Имя = "NumberFormat" Тогда
		
	ИначеЕсли Имя = "Protection" Тогда
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьВыравнивание(Чтение, Стиль)
	
	Структура = Новый Соответствие;
	
	ПрочитатьУстановитьАтрибутСтрока(Чтение, "ss:Horizontal", Структура, "ГоризонтальноеПоложение");
	ПрочитатьУстановитьАтрибутСтрока(Чтение, "ss:Vertical", Структура, "ВертикальноеПоложение");
	ПрочитатьУстановитьАтрибутЧисло(Чтение, "ss:Rotate", Структура, "ОриентацияТекста");
	ПрочитатьУстановитьАтрибутБулево(Чтение, "ss:ShrinkToFit", Структура, "ОбрезатьТекст");
	ПрочитатьУстановитьАтрибутБулево(Чтение, "ss:WrapText", Структура, "ПереноситьТекст");
	
	ЗначениеСвойства = Структура.Получить("ГоризонтальноеПоложение");
	Если НЕ ЗначениеСвойства = Неопределено Тогда
		
		Если ЗначениеСвойства = "Automatic" Тогда
			ЗначениеСвойства = ГоризонтальноеПоложение.Авто;
		Иначе
			Попытка
				ЗначениеСвойства = Вычислить("HorizontalAlign." + ЗначениеСвойства);
			Исключение
				ЗначениеСвойства = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		Если ЗначениеСвойства = Неопределено Тогда
			Структура.Удалить("ГоризонтальноеПоложение");
		Иначе
		    Структура.Вставить("ГоризонтальноеПоложение", ЗначениеСвойства);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначениеСвойства = Структура.Получить("ВертикальноеПоложение");
	Если НЕ ЗначениеСвойства = Неопределено Тогда
		
		Попытка
			ЗначениеСвойства = Вычислить("VerticalAlign." + ЗначениеСвойства);
		Исключение
			ЗначениеСвойства = Неопределено;
		КонецПопытки;
		
		Если ЗначениеСвойства = Неопределено Тогда
			Структура.Удалить("ВертикальноеПоложение");
		Иначе
		    Структура.Вставить("ВертикальноеПоложение", ЗначениеСвойства);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Структура.Количество() Тогда
		Стиль.Вставить("Выравнивание", Структура);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьГраницу(Чтение, Стиль)
	
	Позиция = Чтение.ПолучитьАтрибут("ss:Position");
	
	Если Позиция = "Left" Тогда
		Позиция = "Левая";
	ИначеЕсли Позиция = "Top" Тогда
		Позиция = "Верхняя";
	ИначеЕсли Позиция = "Right" Тогда 
		Позиция = "Правая";
	ИначеЕсли Позиция = "Bottom" Тогда
		Позиция = "Нижняя";
	Иначе
		Возврат;
	КонецЕсли;
	
	Структура = Новый Соответствие;
	
	ПрочитатьУстановитьАтрибутСтрока(Чтение, "ss:Color", Структура, "Цвет");
	ПрочитатьУстановитьАтрибутСтрока(Чтение, "ss:LineStyle", Структура, "Стиль");
	
	Если НЕ Структура.Получить("Цвет") = Неопределено Тогда
		Структура.Вставить("Цвет", ПолучитьЦвет(Структура.Получить("Цвет")));
		Если Структура.Получить("Цвет") = Неопределено Тогда
			Структура.Удалить("Цвет");
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеСвойства = Структура.Получить("Стиль");
	Если НЕ ЗначениеСвойства = Неопределено Тогда
		
		Если ЗначениеСвойства = "None" Тогда
			ЗначениеСвойства = "НетЛинии";
			
		ИначеЕсли ЗначениеСвойства = "Continuous" Тогда
			ЗначениеСвойства = "Сплошная";
			
		ИначеЕсли ЗначениеСвойства = "Dot" Тогда
			ЗначениеСвойства = "Точечная";
			
		ИначеЕсли ЗначениеСвойства = "Double" Тогда
			ЗначениеСвойства = "Двойная";
			
		ИначеЕсли ЗначениеСвойства = "Dash" Тогда
			ЗначениеСвойства = "РедкийПунктир";
			
		ИначеЕсли ЗначениеСвойства = "DashDot" Тогда
			ЗначениеСвойства = "БольшойПунктир";
			
		ИначеЕсли ЗначениеСвойства = "DashDotDot" Тогда
			ЗначениеСвойства = "ЧастыйПунктир";
			
		ИначеЕсли ЗначениеСвойства = "SlantDashDot" Тогда
			ЗначениеСвойства = "ЧастыйПунктир";
			
		Иначе
			ЗначениеСвойства = Неопределено;
		КонецЕсли;
		
		Если НЕ ЗначениеСвойства = Неопределено Тогда
			Структура.Вставить("Стиль", Новый Линия(Вычислить("ТипЛинииЯчейкиТабличногоДокумента." + ЗначениеСвойства)));
		Иначе
			Структура.Удалить("Стиль");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Структура.Количество() Тогда
		
		Граница = Неопределено;
		Если НЕ Стиль.Свойство("Границы", Граница) Тогда
			Граница = Новый Соответствие;
			Стиль.Вставить("Границы", Граница);
		КонецЕсли;
		
		Граница.Вставить(Позиция, Структура);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьШрифт(Чтение, Стиль)
	
	Структура = Новый Соответствие;
	
	ПрочитатьУстановитьАтрибутБулево(Чтение, "ss:Bold", Структура, "Жирный");
	ПрочитатьУстановитьАтрибутБулево(Чтение, "ss:Italic", Структура, "Наклонный");
	ПрочитатьУстановитьАтрибутБулево(Чтение, "ss:StrikeThrough", Структура, "Зачеркнутый");
	
	ПрочитатьУстановитьАтрибутСтрока(Чтение, "ss:Color", Структура, "Цвет");
	ПрочитатьУстановитьАтрибутСтрока(Чтение, "ss:FontName", Структура, "Имя");
	ПрочитатьУстановитьАтрибутСтрока(Чтение, "ss:Underline", Структура, "Подчеркнутый");
	
	ПрочитатьУстановитьАтрибутЧисло(Чтение, "ss:Size", Структура, "Размер");
	
	Если НЕ Структура.Получить("Цвет") = Неопределено Тогда
		Структура.Вставить("Цвет", ПолучитьЦвет(Структура.Получить("Цвет")));
		Если Структура.Получить("Цвет") = Неопределено Тогда
			Структура.Удалить("Цвет");
		КонецЕсли;
	КонецЕсли;
	
	Если Структура.Количество() Тогда
		Стиль.Вставить("Шрифт", Структура);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьЗаливку(Чтение, Стиль)
	
	Структура = Новый Соответствие;
	
	ПрочитатьУстановитьАтрибутСтрока(Чтение, "ss:Color", Структура, "Цвет");
	//ПрочитатьУстановитьАтрибутСтрока(Чтение, "ss:Pattern", Структура, "Узор");
	//ПрочитатьУстановитьАтрибутСтрока(Чтение, "ss:PatternColor", Структура, "ЦветУзора");
	
	Если НЕ Структура.Получить("Цвет") = Неопределено Тогда
		Структура.Вставить("Цвет", ПолучитьЦвет(Структура.Получить("Цвет")));
		Если Структура.Получить("Цвет") = Неопределено Тогда
			Структура.Удалить("Цвет");
		КонецЕсли;
	КонецЕсли;
	
	//Если Структура.Свойство("ЦветУзора") Тогда
	//	Структура.Вставить("ЦветУзора", ПолучитьЦвет(Структура["ЦветУзора"]));
	//КонецЕсли;
	
	Если Структура.Количество() Тогда
		Стиль.Вставить("Заливка", Структура);
	КонецЕсли;
	
КонецПроцедуры


Функция ПрочитатьУстановитьАтрибутБулево(Чтение, Имя, Структура, Ключ, ЗначениеПоУмолчанию = Неопределено)
	
	Значение = Чтение.ПолучитьАтрибут(Имя);
	Если НЕ Значение = Неопределено Тогда
		Структура.Вставить(Ключ, Значение = "1");
	ИначеЕсли НЕ ЗначениеПоУмолчанию = Неопределено Тогда
		Структура.Вставить(Ключ, ЗначениеПоУмолчанию);
	КонецЕсли;
	
КонецФункции

Функция ПрочитатьУстановитьАтрибутСтрока(Чтение, Имя, Структура, Ключ, ЗначениеПоУмолчанию = Неопределено)
	
	Значение = Чтение.ПолучитьАтрибут(Имя);
	Если НЕ Значение = Неопределено Тогда
		Структура.Вставить(Ключ, Значение);
	ИначеЕсли НЕ ЗначениеПоУмолчанию = Неопределено Тогда
		Структура.Вставить(Ключ, ЗначениеПоУмолчанию);
	КонецЕсли;
	
КонецФункции

Функция ПрочитатьУстановитьАтрибутЧисло(Чтение, Имя, Структура, Ключ, ЗначениеПоУмолчанию = Неопределено)
	
	Значение = Чтение.ПолучитьАтрибут(Имя);
	Если НЕ Значение = Неопределено Тогда
		Структура.Вставить(Ключ, Число(Значение));
	ИначеЕсли НЕ ЗначениеПоУмолчанию = Неопределено Тогда
		Структура.Вставить(Ключ, ЗначениеПоУмолчанию);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЦвет(СтрокаЦвет)
	
	Если Лев(СтрокаЦвет, 1) = "#" Тогда
		Возврат ЦветИзRGB(СтрокаЦвет);
	ИначеЕсли НРег(СтрокаЦвет) = "automatic" Тогда
		Возврат Неопределено;
	Иначе
		Попытка
			Возврат WebЦвета[СтрокаЦвет]
		Исключение
			Попытка
				Возврат WindowsЦвета[СтрокаЦвет]
			Исключение
				Возврат Неопределено;
			КонецПопытки;
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

Функция ЦветИзRGB(Знач RGB)
	
	К_0 = КодСимвола("0");
	К_А = КодСимвола("A");
	
	RGB = ВРег(RGB);
	
	К = КодСимвола(RGB, 2);
	R = ?(К >= К_А, 10 + К - К_А, К - К_0);
	
	К = КодСимвола(RGB, 3);
	R = R * 16 + ?(К >= К_А, 10 + К - К_А, К - К_0);
	
	К = КодСимвола(RGB, 4);
	G = ?(К >= К_А, 10 + К - К_А, К - К_0);
	
	К = КодСимвола(RGB, 5);
	G = G * 16 + ?(К >= К_А, 10 + К - К_А, К - К_0);
	
	К = КодСимвола(RGB, 6);
	B = ?(К >= К_А, 10 + К - К_А, К - К_0);
	
	К = КодСимвола(RGB, 7);
	B = B * 16 + ?(К >= К_А, 10 + К - К_А, К - К_0);
	
	Возврат Новый Цвет(R, G, B);
	
КонецФункции


Процедура РасширитьСтильРодительскимСтилем(Стиль, Стили)
	
	Если НЕ Стиль.Свойство("Родитель") Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = Стили[Стиль.Родитель];
	РасширитьСтильРодительскимСтилем(Родитель, Стили);
	Стиль.Удалить("Родитель");
	
	ЭлементСтиля = Неопределено;
	ЗначениеАтрибутаСтиля = Неопределено;
	
	Для Каждого ЭлементСтиляРодителя Из Родитель Цикл
		
		ИмяЭлементаСтиля = ЭлементСтиляРодителя.Ключ;
		
		Если НЕ Стиль.Свойство(ИмяЭлементаСтиля, ЭлементСтиля) Тогда
			ЭлементСтиля = Новый Соответствие;
			Стиль.Вставить(ИмяЭлементаСтиля, ЭлементСтиля);
		КонецЕсли;
		
		Для Каждого АтрибутСтиляРодителя Из ЭлементСтиляРодителя.Значение Цикл
			
			ЗначениеАтрибутаСтиля = ЭлементСтиля.Получить(АтрибутСтиляРодителя.Ключ);
			Если ЗначениеАтрибутаСтиля = Неопределено Тогда
				ЭлементСтиля.Вставить(АтрибутСтиляРодителя.Ключ, АтрибутСтиляРодителя.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ПрименитьСтильКОбласти(Стиль, Область)
	
	Если Стиль = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСтиля Из Стиль Цикл
		
		ИмяЭлементаСтиля = ЭлементСтиля.Ключ;
		
		Если ИмяЭлементаСтиля = "Выравнивание" Тогда
			ПрименитьВыравниваниеКОбласти(Область, ЭлементСтиля.Значение);
		ИначеЕсли ИмяЭлементаСтиля = "Границы" Тогда
			ПрименитьГраницуКОбласти(Область, ЭлементСтиля.Значение);
		ИначеЕсли ИмяЭлементаСтиля = "Шрифт" Тогда
			ПрименитьШрифтКОбласти(Область, ЭлементСтиля.Значение);
		ИначеЕсли ИмяЭлементаСтиля = "Заливка" Тогда
			ПрименитьЗаливкуКОбласти(Область, ЭлементСтиля.Значение);
		ИначеЕсли ИмяЭлементаСтиля = "Формат" Тогда
		ИначеЕсли ИмяЭлементаСтиля = "Защита" Тогда
		КонецЕсли;			
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьВыравниваниеКОбласти(Область, Стиль)
	
	ЗначениеСвойства = Стиль.Получить("ГоризонтальноеПоложение");
	Если НЕ ЗначениеСвойства = Неопределено Тогда
		Область.ГоризонтальноеПоложение = ЗначениеСвойства;
	КонецЕсли;
	
	ЗначениеСвойства = Стиль.Получить("ВертикальноеПоложение");
	Если НЕ ЗначениеСвойства = Неопределено Тогда
		Область.ВертикальноеПоложение = ЗначениеСвойства;
	КонецЕсли;
	
	ЗначениеСвойства = Стиль.Получить("ОриентацияТекста");
	Если НЕ ЗначениеСвойства = Неопределено Тогда
		Область.ОриентацияТекста = ЗначениеСвойства;
	КонецЕсли;
	
	ОбрезатьТекст = Стиль.Получить("ОбрезатьТекст");
	ПереноситьТекст = Стиль.Получить("ПереноситьТекст");
	
	Если НЕ ПереноситьТекст = Неопределено И ПереноситьТекст Тогда
		Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	ИначеЕсли НЕ ОбрезатьТекст = Неопределено И ОбрезатьТекст Тогда
		Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрименитьГраницуКОбласти(Область, Стиль)
	
	Для Каждого Граница Из Стиль Цикл
		
		Позиция = Граница.Ключ;
		
		СтильГраницы = Граница.Значение.Получить("Стиль");
		Если НЕ СтильГраницы = Неопределено Тогда
			Если Позиция = "Левая" Тогда
				Область.ГраницаСлева = СтильГраницы;
			ИначеЕсли Позиция = "Правая" Тогда
				Область.ГраницаСправа = СтильГраницы;
			ИначеЕсли Позиция = "Верхняя" Тогда
				Область.ГраницаСверху = СтильГраницы;
			ИначеЕсли Позиция = "Нижняя" Тогда
				Область.ГраницаСнизу = СтильГраницы;
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеСвойства = Граница.Значение.Получить("Цвет");
		Если НЕ ЗначениеСвойства = Неопределено Тогда
			Область.ЦветРамки = ЗначениеСвойства;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьШрифтКОбласти(Область, Стиль)
	
	Область.Шрифт = Новый Шрифт(Область.Шрифт, Стиль.Получить("Имя"), Стиль.Получить("Размер"), Стиль.Получить("Жирный"), Стиль.Получить("Наклонный"), Стиль.Получить("Подчеркнутый"), Стиль.Получить("Зачеркнутый"));
	
	ЗначениеСвойства = Стиль.Получить("Цвет");
	Если НЕ ЗначениеСвойства = Неопределено Тогда
		Область.ЦветТекста = ЗначениеСвойства;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрименитьЗаливкуКОбласти(Область, Стиль)
	
	ЗначениеСвойства = Стиль.Получить("Цвет");
	Если НЕ ЗначениеСвойства = Неопределено Тогда
		Область.ЦветФона = ЗначениеСвойства;
	КонецЕсли;
	
КонецПроцедуры

// РАЗБОР ФОРМУЛЫ

Функция ДобавитьЭлементФормулы(Коллекция, Значение, Тип = "", Интервал, Индекс)
	
	НовыйЭлемент = Коллекция.Добавить();
	НовыйЭлемент.Индекс = Индекс;
	НовыйЭлемент.Значение = Значение;
	
	Если Тип = "Операнд" Тогда 
		
		Тип = "Операнд_НЕОПРЕДЕЛЕНО";
		
		Если Интервал Тогда
			Тип = "Операнд_Интервал";
		Иначе
			Попытка
				Т = Число(Значение);
				Тип = "Операнд_Число";
			Исключение
				Если СтрДлина(Значение) < 6 Тогда
					ВРегЗначение = ВРег(Значение);
					Если ВРегЗначение = "TRUE" ИЛИ ВРегЗначение = "FALSE" Тогда
						Тип = "Операнд_Булево";
					КонецЕсли;
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	НовыйЭлемент.Тип = Тип;
	
	Индекс = Индекс + 1;
	Интервал = Ложь;
	Значение = "";
	
	Возврат НовыйЭлемент;
	
КонецФункции

Функция РазложитьФормулу(ФормулаСтрока)
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Индекс");
	Дерево.Колонки.Добавить("Значение");
	Дерево.Колонки.Добавить("Тип");
	
	Если СтрДлина(ФормулаСтрока) < 2 ИЛИ НЕ Лев(ФормулаСтрока, 1) = "=" Тогда
		Возврат Дерево;
	КонецЕсли;
	
	МассивОшибок = Новый Массив;
	МассивОшибок.Добавить("#NULL!");
	МассивОшибок.Добавить("#DIV/0!");
	МассивОшибок.Добавить("#VALUE!");
	МассивОшибок.Добавить("#REF!");
	МассивОшибок.Добавить("#NAME?");
	МассивОшибок.Добавить("#NUM!");
	МассивОшибок.Добавить("#N/A");
	МассивОшибок.Добавить("#CIRC!");
	
	ФормулаДлина = СтрДлина(ФормулаСтрока);
	Формула = Новый Массив;
	Для сч = 1 ПО ФормулаДлина Цикл
		Формула.Добавить(Сред(ФормулаСтрока, сч, 1));
	КонецЦикла;
	
	ИндексСтрокиДерева = 0;
	
	ТекущаяКоллекция = ДобавитьЭлементФормулы(Дерево.Строки, "", "Выражение", Ложь, ИндексСтрокиДерева).Строки;
	
	Индекс = 1;
	Значение = "";
	Интервал = Ложь;
	
	Пока (Индекс < ФормулаДлина) Цикл
		
		Т = Формула[Индекс];
		
		Если Т = """" ИЛИ Т = "'" Тогда
			
			Если СтрДлина(Значение) Тогда
				ДобавитьЭлементФормулы(ТекущаяКоллекция, Значение, "Неизвестно_ПередСтрокойИнтервалом", Интервал, ИндексСтрокиДерева);
			КонецЕсли;
			
			Если Т = """" Тогда
				Значение = Т;
			КонецЕсли;
			
			Индекс = Индекс + 1;
			Пока Индекс < ФормулаДлина Цикл
				Если Формула[Индекс] = Т Тогда
					Если (Индекс + 1) < ФормулаДлина И Формула[Индекс + 1] = Т Тогда
						Значение = Значение + Т;
						Индекс = Индекс + 1;
					Иначе
						Если Т = """" Тогда
							Значение = Значение + Т;
							ДобавитьЭлементФормулы(ТекущаяКоллекция, Значение, "Текст", Интервал, ИндексСтрокиДерева);
						Иначе
							Интервал = Истина;
						КонецЕсли;
						Прервать;
					КонецЕсли;      
				Иначе
					Значение = Значение + Формула[Индекс];
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
			
		ИначеЕсли Т = "[" Тогда
			
			Значение = Значение + Т;
			
			Индекс = Индекс + 1;
			Пока Индекс < ФормулаДлина Цикл
				Т = Формула[Индекс];
				Значение = Значение + Т;
				Если Т = "]" Тогда
					Прервать;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
			
			Интервал = Истина;
			
		ИначеЕсли Т = "#" Тогда
			
			Если СтрДлина(Значение) Тогда
				ДобавитьЭлементФормулы(ТекущаяКоллекция, Значение, "Неизвестно_ПередОшибкой", Интервал, ИндексСтрокиДерева);
			КонецЕсли;
			
			Значение = Т;
			
			Индекс = Индекс + 1;
			Пока Индекс < ФормулаДлина Цикл
				Значение = Значение + Формула[Индекс];
				Если НЕ МассивОшибок.Найти(Значение) = Неопределено Тогда
					ДобавитьЭлементФормулы(ТекущаяКоллекция, Значение, "Ошибка", Интервал, ИндексСтрокиДерева);
					Прервать;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
			
		ИначеЕсли Т = "(" ИЛИ Т = "{" Тогда
			
			Если Т = "{" Тогда
				Если СтрДлина(Значение) Тогда
					ДобавитьЭлементФормулы(ТекущаяКоллекция, Значение, "Неизвество_ПередМассивом", Интервал, ИндексСтрокиДерева);
				КонецЕсли;
				ИмяФункции = "";
				ОписаниеФункции = "Массив";
			Иначе
				ИмяФункции = Значение;
				ОписаниеФункции = ?(ПустаяСтрока(ИмяФункции), "Выражение", "Функция");
			КонецЕсли; 
			Значение = "";
			
			ТекущаяКоллекция = ДобавитьЭлементФормулы(ТекущаяКоллекция, ИмяФункции, ОписаниеФункции, Интервал, ИндексСтрокиДерева).Строки;
			ТекущаяКоллекция = ДобавитьЭлементФормулы(ТекущаяКоллекция, "", "Выражение", Ложь, ИндексСтрокиДерева).Строки;
			
		ИначеЕсли Т = ")" ИЛИ Т = "}" Тогда
			
			Если СтрДлина(Значение) Тогда
				ДобавитьЭлементФормулы(ТекущаяКоллекция, Значение, "Операнд", Интервал, ИндексСтрокиДерева);
			КонецЕсли;
			
			ТекущаяКоллекция = ?(ТекущаяКоллекция.Родитель = Неопределено ИЛИ ТекущаяКоллекция.Родитель.Родитель = Неопределено, Дерево.Строки, ТекущаяКоллекция.Родитель.Родитель.Строки);
			ТекущаяКоллекция = ?(ТекущаяКоллекция.Родитель = Неопределено ИЛИ ТекущаяКоллекция.Родитель.Родитель = Неопределено, Дерево.Строки, ТекущаяКоллекция.Родитель.Родитель.Строки);
			
		ИначеЕсли Т = ";" ИЛИ Т = "," Тогда
			
			Если СтрДлина(Значение) Тогда
				ДобавитьЭлементФормулы(ТекущаяКоллекция, Значение, "Операнд", Интервал, ИндексСтрокиДерева);
			КонецЕсли;
			
			ТекущаяКоллекция = ?(ТекущаяКоллекция.Родитель = Неопределено ИЛИ ТекущаяКоллекция.Родитель.Родитель = Неопределено, Дерево.Строки, ТекущаяКоллекция.Родитель.Родитель.Строки);
			ДобавитьЭлементФормулы(ТекущаяКоллекция, Т, "Разделитель", Интервал, ИндексСтрокиДерева);
			ТекущаяКоллекция = ДобавитьЭлементФормулы(ТекущаяКоллекция, "", "Выражение", Ложь, ИндексСтрокиДерева).Строки;
			
		ИначеЕсли Т = " " ИЛИ Т = Символы.Таб Тогда
			
			Если СтрДлина(Значение) Тогда
				ДобавитьЭлементФормулы(ТекущаяКоллекция, Значение, "Операнд", Интервал, ИндексСтрокиДерева);
			КонецЕсли;
			
		ИначеЕсли Т = "<" ИЛИ Т = ">" ИЛИ Т = "=" Тогда
			
			Если СтрДлина(Значение) Тогда
				ДобавитьЭлементФормулы(ТекущаяКоллекция, Значение, "Операнд", Интервал, ИндексСтрокиДерева);
			КонецЕсли;
			
			Если НЕ Т = "=" И (Индекс + 1) < ФормулаДлина И (Формула[Индекс + 1] = "=" ИЛИ Формула[Индекс + 1] = ">") Тогда
				Индекс = Индекс + 1;
				Т = Т + Формула[Индекс];
			КонецЕсли;
				
			ДобавитьЭлементФормулы(ТекущаяКоллекция, Т, "Оператор", Интервал, ИндексСтрокиДерева);
			
		ИначеЕсли Т = "+" ИЛИ Т = "-" ИЛИ Т = "*" ИЛИ Т = "/" ИЛИ Т = "^" ИЛИ Т = "&" ИЛИ Т = "%" Тогда
			
			Если СтрДлина(Значение) Тогда
				ДобавитьЭлементФормулы(ТекущаяКоллекция, Значение, "Операнд", Интервал, ИндексСтрокиДерева);
			КонецЕсли;
			
			ДобавитьЭлементФормулы(ТекущаяКоллекция, Т, "Оператор", Интервал, ИндексСтрокиДерева);
			
		Иначе
			
			Значение = Значение + Т;
			
		КонецЕсли;
				
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Если СтрДлина(Значение) Тогда
		ДобавитьЭлементФормулы(ТекущаяКоллекция, Значение, "Операнд", Интервал, ИндексСтрокиДерева);
	КонецЕсли;
	
	Возврат Дерево;
	
КонецФункции

Функция СобратьВыражение(Строки)
	
	Текст = "";
	
	Для Каждого Строка Из Строки Цикл
		
		Тип = Строка.Тип;
		
		ТекстСтроки = "";
		
		Если Тип = "Выражение" Тогда
			
			ТекстСтроки = СобратьВыражение(Строка.Строки);
			Если Строка.Строки.Количество() > 1 Тогда
				ТекстСтроки = "(" + ТекстСтроки + ")";
			КонецЕсли;
			
		ИначеЕсли Тип = "Функция" Тогда
			
			ТекстСтроки = Строка.Значение + "(" + СобратьВыражение(Строка.Строки) + ")";
			
		Иначе
			
			ТекстСтроки = Строка.Значение
			
		КонецЕсли;
		
		Текст = Текст + ТекстСтроки;
		
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции

Функция СобратьФормулу(Дерево)
	
	Возврат "=" + СобратьВыражение(Дерево.Строки);
	
КонецФункции

// ОБРАБОТКА ФОРМУЛЫ

Функция РазложитьОперанд(Операнд, РазложенныеОперанды)
	
	М = РазложенныеОперанды.Получить(Операнд);
	Если НЕ М = Неопределено Тогда
		Возврат М;
	КонецЕсли;
	
	Книга = "";
	Лист = "";
	Адрес = "";
	
	Разделитель = СтрНайти(Операнд, "!");
	Если Разделитель Тогда
		Если СтрЧислоВхождений(Операнд, "!") = 1 Тогда
			Адрес = Сред(Операнд, Разделитель + 1);
			Лист = Лев(Операнд, Разделитель - 1);
		Иначе	
			Операнд_  = СтрЗаменить(Операнд, "!", Символы.ПС);
			Адрес = СтрПолучитьСтроку(Операнд_, СтрЧислоСтрок(Операнд_));
			Лист = Лев(Операнд, СтрДлина(Операнд) - СтрДлина(Адрес) - 1);
		КонецЕсли;
		Разделитель1 = СтрНайти(Лист, "[");
		Если Разделитель1 Тогда
			Разделитель2 = СтрНайти(Лист, "]");
			Книга = Сред(Лист, Разделитель1 + 1, Разделитель2 - Разделитель1 - 1);
			Лист = Сред(Лист, Разделитель2 + 1);
		КонецЕсли;
	Иначе
		Адрес = Операнд;
	КонецЕсли;
	
	М = Новый Массив(2);
	М[0] = Книга;
	М[1] = Лист;
	
	Разделитель = СтрНайти(Адрес, ":");
	Если Разделитель Тогда
		М.Добавить(Лев(Адрес, Разделитель - 1));
		М.Добавить(Сред(Адрес, Разделитель + 1));
	Иначе
		М.Добавить(Адрес);
	КонецЕсли;
	
	РазложенныеОперанды.Вставить(Операнд, М);
	
	Возврат М; 
	
КонецФункции

Функция ПолучитьАдресаОперанда(Операнд, АдресЛиста, НомерСтроки, НомерКолонки, Адресация, ИмяКниги, ИмяЛиста, РазложенныеОперанды)
	
	Разложение = РазложитьОперанд(Операнд, РазложенныеОперанды);
	
	АдресЛистаОперанда = Неопределено;
	
	Если Разложение[0] = "" Тогда
		Если Разложение[1] = "" Тогда
			АдресЛистаОперанда = АдресЛиста;
		Иначе
			СтруктураАдресаЛиста = Адресация[ИмяКниги][Разложение[1]];
			Если НЕ СтруктураАдресаЛиста = Неопределено Тогда
				АдресЛистаОперанда = СтруктураАдресаЛиста;
			КонецЕсли;
		КонецЕсли;
	Иначе
		АдресацияЛистов = Адресация[Разложение[0]];
		Если НЕ АдресацияЛистов = Неопределено Тогда
			СтруктураАдресаЛиста = АдресацияЛистов[Разложение[1]];
			Если НЕ СтруктураАдресаЛиста = Неопределено Тогда
				АдресЛистаОперанда = СтруктураАдресаЛиста;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если АдресЛистаОперанда = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Если Разложение.Количество() = 4 Тогда
		IsRange = Истина;
		Range = Новый Массив;
	Иначе
		IsRange = Ложь;
	КонецЕсли;
	
	Адреса = Новый Соответствие;
	
	Попытка
		
		Для Индекс = 2 По Разложение.ВГраница() Цикл
			
			ОтносительныйАдрес = Разложение[Индекс];
			
			ПервыйR = СтрНайти(ОтносительныйАдрес, "R");
			ПервыйC = СтрНайти(ОтносительныйАдрес, "C");
			
			Если ПервыйR = 0 Тогда
				
				Строка = "";
				
				Если ПервыйC = 1 Тогда
					Колонка = Сред(ОтносительныйАдрес, 2);
				Иначе
					ВызватьИсключение Неопределено;
				КонецЕсли;
				
			ИначеЕсли ПервыйR = 1 Тогда
				
				Если ПервыйC = 0 Тогда
					
					Колонка = "";
					Строка = Сред(ОтносительныйАдрес, 2);
					
				Иначе
					
					Строка = Сред(ОтносительныйАдрес, 2, ПервыйC - 2);
					Колонка = Сред(ОтносительныйАдрес, ПервыйC + 1);
					
				КонецЕсли;
			Иначе
				ВызватьИсключение Неопределено;
			КонецЕсли;
			
			Если ПустаяСтрока(Строка) Тогда
				Строка = ?(ПервыйR = 0, 0, НомерСтроки);
			ИначеЕсли Лев(Строка, 1) = "[" Тогда
				Строка = НомерСтроки + Число(Сред(Строка, 2, СтрДлина(Строка) - 2));
			Иначе
				Строка = Число(Строка);
			КонецЕсли;
			
			Если ПустаяСтрока(Колонка) Тогда
				Колонка = ?(ПервыйC = 0, 0, НомерКолонки);
			ИначеЕсли Лев(Колонка, 1) = "[" Тогда
				Колонка = НомерКолонки + Число(Сред(Колонка, 2, СтрДлина(Колонка) - 2));
			Иначе
				Колонка = Число(Колонка);
			КонецЕсли;
			
			Если IsRange Тогда
				Range.Добавить(Строка);
				Range.Добавить(Колонка);
			Иначе
				ЛистСтрокаКолонка = Новый Массив(3);
				ЛистСтрокаКолонка[0] = АдресЛистаОперанда;
				ЛистСтрокаКолонка[1] = Строка;
				ЛистСтрокаКолонка[2] = Колонка;
				Адреса.Вставить(АдресЯчейкиЛиста(АдресЛистаОперанда, Строка, Колонка), ЛистСтрокаКолонка);
			КонецЕсли;
			
		КонецЦикла;
		
		Если IsRange Тогда
			Для Строка = Range[0] По Range[2] Цикл
				АдресСтрокиЛиста = АдресСтрокиЛиста(АдресЛистаОперанда, Строка);
				Для Колонка = Range[1] По Range[3] Цикл
					СтрокаКолонка = Новый Массив(3);
					СтрокаКолонка[0] = АдресЛистаОперанда;
					СтрокаКолонка[1] = Строка;
					СтрокаКолонка[2] = Колонка;
					Адреса.Вставить(АдресЯчейкиСтрокиЛиста(АдресСтрокиЛиста, Колонка), СтрокаКолонка);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	Исключение
		Возврат Неопределено
	КонецПопытки;
	
	Возврат Адреса;
	
КонецФункции

Функция ОбработатьФормулу(ФормулаСтрока, АдресЛиста, НомерСтроки, НомерКолонки, Адресация, ИмяКниги, ИмяЛиста, СтруктураФормул, СтруктураСсылок, ФормулыЛиста, ОтложеннаяОбработка = Ложь, ИменованныеОбластиКниг = Неопределено, ИменованныеОбластиЛистов = Неопределено)
	
	ИндексФормулы = СтруктураФормул["Индексы"].Получить(ФормулаСтрока);
	
	Если ОтложеннаяОбработка И ИндексФормулы = Неопределено Тогда
		
		РазыменованиеЗавершено = Ложь;
		
		РазыменованнаяФормула = ФормулаСтрока;
		
		ИменованныеОбластиЛиста = ИменованныеОбластиЛистов.Получить(АдресЛиста);
		ИменованныеОбластиКниги = ИменованныеОбластиКниг.Получить(ИмяКниги);
		
		Пока НЕ РазыменованиеЗавершено Цикл
			
			Дерево = РазложитьФормулу(РазыменованнаяФормула);
			
			СтрокиОперандов = Новый Массив;
			ТипыОперандов = Новый Массив;
			ТипыОперандов.Добавить("Операнд_НЕОПРЕДЕЛЕНО");
			ТипыОперандов.Добавить("Операнд_Интервал");
			Для Каждого ТипОперанда Из ТипыОперандов Цикл
				Для Каждого СтрокаОперанда Из Дерево.Строки.НайтиСтроки(Новый Структура("Тип", ТипОперанда), Истина) Цикл
					СтрокиОперандов.Добавить(СтрокаОперанда);
				КонецЦикла;
			КонецЦикла;
			
			БылоРазыменование = Ложь;
			
			Для Каждого СтрокаОперанда Из СтрокиОперандов Цикл
				
				АдресаОперанда = ПолучитьАдресаОперанда(СтрокаОперанда.Значение, АдресЛиста, НомерСтроки, НомерКолонки, Адресация, ИмяКниги, ИмяЛиста, СтруктураФормул["РазложенныеОперанды"]);
				
				Если НЕ АдресаОперанда = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				РазыменованиеОперанда = ИменованныеОбластиЛиста.Получить(СтрокаОперанда.Значение);
				Если НЕ РазыменованиеОперанда = Неопределено Тогда
					СтрокаОперанда.Значение = РазыменованиеОперанда;
					БылоРазыменование = Истина;
					Продолжить;
				КонецЕсли;
				
				РазыменованиеОперанда = ИменованныеОбластиКниги.Получить(СтрокаОперанда.Значение);
				Если НЕ РазыменованиеОперанда = Неопределено Тогда
					СтрокаОперанда.Значение = РазыменованиеОперанда;
					БылоРазыменование = Истина;
					Продолжить;
				КонецЕсли;
				
				РазложениеОперанда = РазложитьОперанд(СтрокаОперанда.Значение, СтруктураФормул["РазложенныеОперанды"]);
				Если РазложениеОперанда.Количество() = 4 Тогда
					Продолжить; 
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(РазложениеОперанда[1]) Тогда
					
					Если ПустаяСтрока(РазложениеОперанда[0]) Тогда
						
						ИменованныеОбласти = ИменованныеОбластиЛистов[Адресация[ИмяКниги][РазложениеОперанда[1]]];
						Если НЕ ИменованныеОбласти = Неопределено Тогда
							РазыменованиеОперанда = ИменованныеОбласти.Получить(РазложениеОперанда[2]);
							Если НЕ РазыменованиеОперанда = Неопределено Тогда
								СтрокаОперанда.Значение = РазыменованиеОперанда;
								БылоРазыменование = Истина;
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						
						ИменованныеОбласти = ИменованныеОбластиКниг[РазложениеОперанда[1]];
						Если НЕ ИменованныеОбласти = Неопределено Тогда
							РазыменованиеОперанда = ИменованныеОбласти.Получить(РазложениеОперанда[2]);
							Если НЕ РазыменованиеОперанда = Неопределено Тогда
								СтрокаОперанда.Значение = "[" + РазложениеОперанда[1] + "]" + РазыменованиеОперанда;
								БылоРазыменование = Истина;
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						
					Иначе
						
						Попытка
							ИменованныеОбласти = ИменованныеОбластиЛистов[Адресация[РазложениеОперанда[0]][РазложениеОперанда[1]]];
						Исключение
							ИменованныеОбласти = Неопределено;
						КонецПопытки;
						Если НЕ ИменованныеОбласти = Неопределено Тогда
							РазыменованиеОперанда = ИменованныеОбласти.Получить(РазложениеОперанда[2]);
							Если НЕ РазыменованиеОперанда = Неопределено Тогда
								СтрокаОперанда.Значение = "[" + РазложениеОперанда[0] + "]" + РазложениеОперанда[1] + "!" + РазыменованиеОперанда;
								БылоРазыменование = Истина;
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если БылоРазыменование Тогда
				РазыменованнаяФормула = СобратьФормулу(Дерево);
			Иначе
				РазыменованиеЗавершено = Истина;
			КонецЕсли;
			
		КонецЦикла;
			
		ИндексФормулы = СтруктураФормул["Индексы"].Количество();
		СтруктураФормул["Индексы"].Вставить(ФормулаСтрока, ИндексФормулы);
		СтруктураФормул["Деревья"].Вставить(ИндексФормулы, ЗначениеВСтрокуВнутр(Дерево));
		СтруктураФормул["Тексты"].Вставить(ИндексФормулы, РазыменованнаяФормула);
		
		ФормулыЛиста.Вставить(ИндексФормулы, Истина);
		
		СтрокиОперандов = Новый Соответствие;
		ТипыОперандов = Новый Массив;
		ТипыОперандов.Добавить("Операнд_НЕОПРЕДЕЛЕНО");
		ТипыОперандов.Добавить("Операнд_Интервал");
		Для Каждого ТипОперанда Из ТипыОперандов Цикл
			Для Каждого СтрокаОперанда Из Дерево.Строки.НайтиСтроки(Новый Структура("Тип", ТипОперанда), Истина) Цикл
				СтрокиОперандов.Вставить(СтрокаОперанда.Индекс, СтрокаОперанда.Значение);
			КонецЦикла;
		КонецЦикла;
		СтруктураФормул["СтрокиОперандов"].Вставить(ИндексФормулы, СтрокиОперандов);
			
	Иначе
		
		Если ИндексФормулы = Неопределено Тогда
			
			Если СтруктураФормул["Отложенные"].Получить(ФормулаСтрока) = Истина Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Дерево = РазложитьФормулу(ФормулаСтрока);
			ИндексФормулы = СтруктураФормул["Индексы"].Количество();
			СтруктураФормул["Индексы"].Вставить(ФормулаСтрока, ИндексФормулы);
			СтруктураФормул["Деревья"].Добавить(ЗначениеВСтрокуВнутр(Дерево));
			СтруктураФормул["Тексты"].Добавить(ФормулаСтрока);
			
			ФормулыЛиста.Вставить(ИндексФормулы, Истина);
			
			СтрокиОперандов = Новый Соответствие;
			ТипыОперандов = Новый Массив;
			ТипыОперандов.Добавить("Операнд_НЕОПРЕДЕЛЕНО");
			ТипыОперандов.Добавить("Операнд_Интервал");
			Для Каждого ТипОперанда Из ТипыОперандов Цикл
				Для Каждого СтрокаОперанда Из Дерево.Строки.НайтиСтроки(Новый Структура("Тип", ТипОперанда), Истина) Цикл
					СтрокиОперандов.Вставить(СтрокаОперанда.Индекс, СтрокаОперанда.Значение);
				КонецЦикла;
			КонецЦикла;
			СтруктураФормул["СтрокиОперандов"].Вставить(ИндексФормулы, СтрокиОперандов);
			
		Иначе
			СтрокиОперандов = СтруктураФормул["СтрокиОперандов"].Получить(ИндексФормулы);
		КонецЕсли;
		
	КонецЕсли;
	
	АдресаОперандов = Новый Соответствие;
	
	Если НЕ СтрокиОперандов = Неопределено Тогда
		
		Для Каждого СтрокаОперанда Из СтрокиОперандов Цикл
			
			АдресаОперанда = ПолучитьАдресаОперанда(СтрокаОперанда.Значение, АдресЛиста, НомерСтроки, НомерКолонки, Адресация, ИмяКниги, ИмяЛиста, СтруктураФормул["РазложенныеОперанды"]);
			
			Если АдресаОперанда = Неопределено Тогда
				Если НЕ ОтложеннаяОбработка Тогда
					
					СтруктураФормул["Индексы"].Удалить(ФормулаСтрока);
					СтруктураФормул["Деревья"].Удалить(ИндексФормулы);
					СтруктураФормул["Тексты"].Удалить(ИндексФормулы);
					СтруктураФормул["СтрокиОперандов"].Удалить(ИндексФормулы);
					
					ФормулыЛиста.Удалить(ИндексФормулы);
					
					СтруктураФормул["Отложенные"].Вставить(ФормулаСтрока, Истина);
					
					Возврат Ложь;
					
				КонецЕсли;
			Иначе
				АдресаОперандов.Вставить(СтрокаОперанда.Ключ, АдресаОперанда);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	АдресОбласти = АдресЯчейкиЛиста(АдресЛиста, НомерСтроки, НомерКолонки);
	
	Операнды = Новый Соответствие;
	
	ИсходящиеСсылкиЛиста = СтруктураСсылок[0].Получить(АдресЛиста);
	Если ИсходящиеСсылкиЛиста = Неопределено Тогда
		ИсходящиеСсылкиЛиста = Новый Соответствие;
		СтруктураСсылок[0].Вставить(АдресЛиста, ИсходящиеСсылкиЛиста);
	КонецЕсли;
	ИсходящиеСсылки = Новый Соответствие;
	ИсходящиеСсылкиЛиста.Вставить(АдресОбласти, ИсходящиеСсылки);
	
	АдресОперандаАдресЛиста = Неопределено;
	
	Если НЕ СтрокиОперандов = Неопределено Тогда
		
		Для Каждого СтрокаОперанда Из СтрокиОперандов Цикл
			
			АдресаОперанда = АдресаОперандов.Получить(СтрокаОперанда.Ключ);
			
			Если АдресаОперанда = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОперандыСтроки = Новый Соответствие;
			Операнды.Вставить(СтрокаОперанда.Ключ, ОперандыСтроки);
			
			Для Каждого АдресОперанда Из АдресаОперанда Цикл
			
				ВставитьВСоответствие(ОперандыСтроки, АдресОперанда.Ключ);
				
				Если НЕ АдресОперандаАдресЛиста = АдресОперанда.Значение[0] Тогда
					
					АдресОперандаАдресЛиста = АдресОперанда.Значение[0];
					
					ВходящиеСсылкиЛиста = СтруктураСсылок[1].Получить(АдресОперандаАдресЛиста);
					Если ВходящиеСсылкиЛиста = Неопределено Тогда
						ВходящиеСсылкиЛиста = Новый Соответствие;
						СтруктураСсылок[1].Вставить(АдресОперандаАдресЛиста, ВходящиеСсылкиЛиста);
						ВходящиеСсылки = Новый Соответствие;
						ВходящиеСсылкиЛиста.Вставить(АдресОперанда.Ключ, ВходящиеСсылки);
					Иначе
						ВходящиеСсылки = ВходящиеСсылкиЛиста.Получить(АдресОперанда.Ключ);
						Если ВходящиеСсылки = Неопределено Тогда
							ВходящиеСсылки = Новый Соответствие;
							ВходящиеСсылкиЛиста.Вставить(АдресОперанда.Ключ, ВходящиеСсылки);
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					
					ВходящиеСсылки = ВходящиеСсылкиЛиста.Получить(АдресОперанда.Ключ);
					Если ВходящиеСсылки = Неопределено Тогда
						ВходящиеСсылки = Новый Соответствие;
						ВходящиеСсылкиЛиста.Вставить(АдресОперанда.Ключ, ВходящиеСсылки);
					КонецЕсли;
					
				КонецЕсли;
				
				ВставитьВСоответствие(ИсходящиеСсылки, АдресОперанда.Ключ);
				ВставитьВСоответствие(ВходящиеСсылки, АдресОбласти);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//СтруктураФормул["Области"].Вставить(АдресОбласти, ИндексФормулы);
	СтруктураФормул["Операнды"].Вставить(АдресОбласти, Операнды);
	
	Возврат Истина;
	
КонецФункции

// АДРЕСАЦИЯ

Функция АдресЯчейкиЛиста(АдресЛиста, НомерСтроки, НомерКолонки)
	
	Возврат АдресЛиста + (16384 + 1) * НомерСтроки + НомерКолонки;
	
Конецфункции

Функция АдресСтрокиЛиста(АдресЛиста, НомерСтроки)
	
	Возврат АдресЯчейкиЛиста(АдресЛиста, НомерСтроки, 0);
	
Конецфункции

Функция АдресКолонкиЛиста(АдресЛиста, НомерКолонки)
	
	Возврат АдресЯчейкиЛиста(АдресЛиста, 0, НомерКолонки);
	
Конецфункции

Функция АдресЯчейкиСтрокиЛиста(АдресСтроки, НомерКолонки)
	
	Возврат АдресСтроки + НомерКолонки;
	
Конецфункции

Функция АдресЯчейкиКолонкиЛиста(АдресКолонки, НомерСтроки)
	
	Возврат АдресКолонки + (16384 + 1) * НомерСтроки;
	
Конецфункции

Функция ИзвлечьАдресЛиста(АдресЯчейки)
	
	Возврат АдресЯчейки - АдресЯчейки % 17180934145;
	
Конецфункции

Функция ИзвлечьАдресСтроки(АдресЯчейки)
	
	Возврат АдресЯчейки - АдресЯчейки % (16384 + 1);
	
Конецфункции

Функция РазложитьАдресЯчейки(АдресЯчейки, АдресЛиста = Неопределено)
	
	ОтносительныйАдресНаЛисте = ?(АдресЛиста = Неопределено, АдресЯчейки % 17180934145, АдресЯчейки - АдресЛиста);
	НомерКолонки = ОтносительныйАдресНаЛисте % (16384 + 1);
	
	Разложение = Новый Массив;
	Разложение.Добавить(АдресЯчейки - ОтносительныйАдресНаЛисте);
	Разложение.Добавить((ОтносительныйАдресНаЛисте - НомерКолонки)/(16384 + 1));
	Разложение.Добавить(НомерКолонки);
	
	Возврат Разложение;
	
Конецфункции

Функция НовыйАдресЯчейки(Адрес, НоваяАдресация)
	
	АдресЛиста = ИзвлечьАдресЛиста(Адрес);
	
	НовыйАдресЛиста = НоваяАдресация[АдресЛиста];
	
	Если НовыйАдресЛиста = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат НовыйАдресЛиста + (Адрес - АдресЛиста);
	КонецЕсли;
	
КонецФункции

// ПРЕОБРАЗОВАНИЕ АДРЕСОВ

Функция АдресС1К1(Строка, Колонка)
	               
	Возврат "С" + Формат(Строка, "ЧГ=") + "К" + Формат(Колонка, "ЧГ=");
	
КонецФункции

Функция ЭтоИмяАдресRC(Имя)
	
	Строка = "R";
	Колонка = "C";
	
	Если НЕ Лев(Имя, 1) = Строка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяЧисло = СтрЗаменить(Сред(Имя, 2), Колонка, "");
	
	Если НЕ СтрДлина(ИмяЧисло) = СтрДлина(Имя) - 2 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Возврат ИмяЧисло = Формат(Число(ИмяЧисло), "ЧДЦ=0; ЧН=; ЧГ=; ЧО=0");
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
Конецфункции
	
// ЗАПИСЬ БЛАНКОВ

Процедура СформироватьОбластиДокумента(ПараметрыЗадания, КлючЗаданияРодителя, КлючЗадания) Экспорт
	
	ТабличныйДокумент = ПараметрыЗадания[0];
	ВсеСсылкиЛиста = ПараметрыЗадания[1];
	ВырожденныеСсылки = ПараметрыЗадания[2];
	
	Для Каждого Адрес Из ВсеСсылкиЛиста Цикл
		Если НЕ ВырожденныеСсылки.Получить(Адрес.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Область = ТабличныйДокумент.Область(Адрес.Значение[1], Адрес.Значение[2]);
		АдресС1К1 = АдресС1К1(Адрес.Значение[1], Адрес.Значение[2]);
		Область.Имя = АдресС1К1;
		Адрес.Значение.Добавить(АдресС1К1);
	КонецЦикла;
	
	ОчередьФоновыхЗаданийУХ.ОтправитьСообщение(КлючЗаданияРодителя, КлючЗадания, 0, Новый Структура("ТабличныйДокумент,ВсеСсылки", ТабличныйДокумент, ВсеСсылкиЛиста), 9);
	
КонецПроцедуры

Функция ПолучитьНастройкуСопоставления(ИсточникТипВИБ, ИсточникТаблицаADO, Приемник, Реквизиты)
	
	// Приемник = ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные ИЛИ Тип("СправочникСсылка.<>")
	// Реквизиты = [{ ИмяПоляИсточника, ИмяПоляПриемника }]
	
	ПриемникЭтоВидСубконто = ТипЗнч(Приемник) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные");
	ПриемникЭтоСправочник = Ложь;
	ПриемникЭтоПеречисление = Ложь;
	
	Если НЕ ПриемникЭтоВидСубконто Тогда
		ПриемникЭтоСправочник = Справочники.ТипВсеСсылки().СодержитТип(Приемник);
		Если НЕ ПриемникЭтоСправочник Тогда
			ПриемникЭтоПеречисление = Перечисления.ТипВсеСсылки().СодержитТип(Приемник);
		КонецЕсли;
	КонецЕсли;
	
	Если ПриемникЭтоВидСубконто Тогда
		ТипОбъектаКонсолидации = "ВидСубконто";
	ИначеЕсли ПриемникЭтоСправочник Тогда
		ТипОбъектаКонсолидации = "Справочник";
	ИначеЕсли ПриемникЭтоПеречисление Тогда
		ТипОбъектаКонсолидации = "Перечисление";
	Иначе
		ТипОбъектаКонсолидации = "";
	КонецЕсли;
	
	ИмяОбъектаМетаданных	= ?(ПриемникЭтоВидСубконто, Приемник, Метаданные.НайтиПоТипу(Приемник).Имя);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец",				ИсточникТипВИБ);
	Запрос.УстановитьПараметр("ОписаниеОбъектаВИБ",		ИсточникТаблицаADO);
	Запрос.УстановитьПараметр("ТипОбъектаКонсолидации", ТипОбъектаКонсолидации);
	Запрос.УстановитьПараметр("ИмяОбъектаМетаданных",	ИмяОбъектаМетаданных);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеВнешнимИБ.Ссылка
	|ИЗ
	|	Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	|ГДЕ
	|	СоответствиеВнешнимИБ.Владелец = &Владелец
	|	И СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ = &ОписаниеОбъектаВИБ
	|	И СоответствиеВнешнимИБ.ИмяОбъектаМетаданных = &ИмяОбъектаМетаданных
	|	И СоответствиеВнешнимИБ.ТипОбъектаКонсолидации = &ТипОбъектаКонсолидации";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
	СопоставленияРеквизитов = Новый Соответствие;
		
	Если ПриемникЭтоВидСубконто Тогда
		
		НастройкиРеквизитовРеквизитов = Новый Соответствие;
		
		Для Каждого ЭлементРеквизит Из Реквизиты Цикл
			
			ИмяПоляИсточника = ЭлементРеквизит.Ключ;
			ИмяПоляПриемника = ЭлементРеквизит.Значение;
			
			Точка = СтрНайти(ИмяПоляПриемника, ".");
			Если Точка = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяРеквизитаПриемника = Лев(ИмяПоляПриемника, Точка - 1);
			
			НастройкиРеквизита = НастройкиРеквизитовРеквизитов[ИмяРеквизитаПриемника];
			Если НастройкиРеквизита = Неопределено Тогда
				НастройкиРеквизита = Новый Соответствие;
				НастройкиРеквизитовРеквизитов.Вставить(ИмяРеквизитаПриемника, НастройкиРеквизита);
			КонецЕсли;
			
			НастройкиРеквизита.Вставить(ИмяПоляИсточника, Сред(ИмяПоляПриемника, Точка + 1));
			
		КонецЦикла;
		
		Если НастройкиРеквизитовРеквизитов.Количество() > 0 Тогда
			
			МетаданныеПриемника = Метаданные.НайтиПоТипу(Приемник.ТипЗначения.Типы()[0]);
			
			Для Каждого ЭлементНастроекРеквизитов Из НастройкиРеквизитовРеквизитов Цикл
				
				ИмяРеквизита = ЭлементНастроекРеквизитов.Ключ;
				НастройкиРеквизита = ЭлементНастроекРеквизитов.Значение;
				
				МетаданныеРеквизитаПриемника = МетаданныеПриемника.Реквизиты.Найти(ИмяРеквизита);
				Если МетаданныеРеквизитаПриемника = Неопределено Тогда
					Попытка
						МетаданныеРеквизитаПриемника = МетаданныеПриемника.СтандартныеРеквизиты[ИмяРеквизита];
					Исключение
						ВызватьИсключение;
					КонецПопытки;
				КонецЕсли;
				
				ТипРеквизита = МетаданныеРеквизитаПриемника.Тип.Типы()[0];
				
				НастройкаСопоставленияРеквизита = ПолучитьНастройкуСопоставления(ИсточникТипВИБ, ИсточникТаблицаADO, ТипРеквизита, НастройкиРеквизита);
				
				СопоставленияРеквизитов.Вставить(ИмяРеквизита, НастройкаСопоставленияРеквизита);
				
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкаСоответствияОбъект = Справочники.СоответствиеВнешнимИБ.СоздатьЭлемент();
	НастройкаСоответствияОбъект.Владелец				= ИсточникТипВИБ;
	НастройкаСоответствияОбъект.ТипОбъектаВИБ			= "ТаблицаADO";
	НастройкаСоответствияОбъект.ОписаниеОбъектаВИБ		= ИсточникТаблицаADO;
	НастройкаСоответствияОбъект.ТипОбъектаКонсолидации	= ТипОбъектаКонсолидации;
	НастройкаСоответствияОбъект.ИмяОбъектаМетаданных	= ИмяОбъектаМетаданных;
	
	НастройкаСоответствияОбъект.ЗаполнитьРеквизитыОбъектаВИБ();
	НастройкаСоответствияОбъект.ЗаполнитьСписокПолей();
	НастройкаСоответствияОбъект.СформироватьТаблицуСоответствияБД();
	НастройкаСоответствияОбъект.мТабличноеПолеИзмеренийБД = НастройкаСоответствияОбъект.ЗаполнитьДеревоПоОбъектуВИБ();
	
	Для Каждого Строка Из НастройкаСоответствияОбъект.мТаблицаСоответствия.Строки.НайтиСтроки(Новый Структура("Сопоставлено", Истина), Истина) Цикл
		Строка.Сопоставлено = Ложь;
		Строка.АналитикаБД = Неопределено;
		Строка.ПсевдонимБД = Неопределено;
		Строка.СправочникБД = "";
		Строка.ПолеЗапроса = "";
		Строка.ТипМетаДанных = "";
		Строка.НастройкаСоответствия = "";
	КонецЦикла;
	
	Для Каждого ЭлементРеквизит Из Реквизиты Цикл
		
		ИмяПоляИсточника = ЭлементРеквизит.Ключ;
		ИмяПоляПриемника = ЭлементРеквизит.Значение;
		
		Если СтрНайти(ИмяПоляПриемника, ".") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыФормыИз = НастройкаСоответствияОбъект.мТаблицаПоказателейБД.НайтиСтроки(Новый Структура("НаименованиеБД", ИмяПоляИсточника));
		Если СтрокаТаблицыФормыИз.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицыФормыИз = СтрокаТаблицыФормыИз[0];
		
		СтрокаТаблицыФормыВ = НастройкаСоответствияОбъект.мТаблицаСоответствия.Строки.НайтиСтроки(Новый Структура("АналитикаКонсолидации,ПримитивныйТип", ИмяПоляПриемника, Истина), Истина);
		Если СтрокаТаблицыФормыВ.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицыФормыВ = СтрокаТаблицыФормыВ[0];
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыФормыВ, СтрокаТаблицыФормыИз,, "ПримитивныйТип");
		СтрокаТаблицыФормыВ.АналитикаБД = СтрокаТаблицыФормыИз.ПолеБД;
		СтрокаТаблицыФормыВ.ПсевдонимБД = СтрокаТаблицыФормыИз.НаименованиеБД;
		СтрокаТаблицыФормыВ.Сопоставлено = Истина;
		
	КонецЦикла;
	
	Для Каждого ЭлементСопоставлениеРеквизита Из СопоставленияРеквизитов Цикл
		
		ИмяПоляПриемника = ЭлементСопоставлениеРеквизита.Ключ;
		НастройкаСопоставленияПриемника = ЭлементСопоставлениеРеквизита.Значение;
		
		СтрокаТаблицыФормыВ = НастройкаСоответствияОбъект.мТаблицаСоответствия.Строки.НайтиСтроки(Новый Структура("АналитикаКонсолидации,ПримитивныйТип", ИмяПоляПриемника, Ложь), Истина);
		Если СтрокаТаблицыФормыВ.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицыФормыВ = СтрокаТаблицыФормыВ[0];
		
		СтрокаТаблицыФормыВ.Сопоставлено = Истина;
		СтрокаТаблицыФормыВ.НастройкаСоответствия = НастройкаСопоставленияПриемника;
		СтрокаТаблицыФормыВ.НеИспользоватьДляСинхронизации = Истина;
		СтрокаТаблицыФормыВ.АналитикаБД = "[" + ИсточникТаблицаADO + "]";
		СтрокаТаблицыФормыВ.СправочникБД = "({[" + ИсточникТаблицаADO + "]})";
		СтрокаТаблицыФормыВ.ТипМетаданных = "ТаблицаADO";
		
	КонецЦикла;
	
	НастройкаСоответствияОбъект.СохранитьНастройкиОперанда();
	НастройкаСоответствияОбъект.Записать();
	
	Возврат НастройкаСоответствияОбъект.Ссылка;
	
Конецфункции

Процедура ЗапомнитьСозданныйОбъект(Коллекция, Тип, Значение, Ссылка)
	
	КоллекцияТипа = Коллекция[Тип];
	Если КоллекцияТипа = Неопределено Тогда
		КоллекцияТипа = Новый Соответствие;
		Коллекция.Вставить(Тип, КоллекцияТипа);
	КонецЕсли;
	
	КоллекцияТипа.Вставить(Значение, Ссылка);
	
КонецПроцедуры

Функция ПолучитьСозданныйОбъект(Коллекция, Тип, Значение, МенеджерОбъекта)
	
	УникальныйИдентификатор = Коллекция[Тип][0][Значение];
	
	Если УникальныйИдентификатор = Неопределено Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Ссылка = МенеджерОбъекта.ПолучитьСсылку(УникальныйИдентификатор);
		
		Если Ссылка.ПолучитьОбъект() = Неопределено Тогда
			
			Возврат Неопределено;
			
		Иначе
			
			Возврат Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
Конецфункции

Процедура ОбновитьСериализованноеЗначение(Коллекция, Ключ, Значение) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение.ПолучитьОбъект());
	Коллекция.Вставить(Ключ, ЗаписьXML.Закрыть());
	
КонецПроцедуры


Функция НайтиТаблицуADO(ТипБД, ИмяФайла, ИмяЛиста)
	
	ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ = "Обработка.ИмпортВидовОтчетовИзЭлектронныхТаблицMicrosoftExcel.МодульМенеджера.НайтиТаблицуADO";
	
	ИмяТаблицыADO = ОбщегоНазначенияMicrosoftExcelКлиентСерверУХ.ИмяЛистаCOM2ADO(ИмяЛиста);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Владелец",	ТипБД);
	Запрос.УстановитьПараметр("Имя",		ИмяТаблицыADO);
	Запрос.УстановитьПараметр("ИмяФайла",	ИмяФайла);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицыADO.Ссылка
	|ИЗ
	|	Справочник.ТаблицыADO КАК ТаблицыADO
	|ГДЕ
	|	ТаблицыADO.Владелец = &Владелец
	|	И ТаблицыADO.Имя = &Имя
	|	И ТаблицыADO.ИмяФайла = &ИмяФайла";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ТаблицаADO = Неопределено;
		ТекстОшибки = 
		"Не найдена таблица ADO.
		|Тип БД: " + ТипБД + " (" + ТипБД.УникальныйИдентификатор() + ")
		|Имя книги: " + ИмяФайла + "
		|Имя листа: " + ИмяЛиста + "
		|Имя таблицы ADO: " + ИмяТаблицыADO;
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьПримечание(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,,, ТекстОшибки);
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ТаблицаADO = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ТаблицаADO;
	
КонецФункции

Функция СоздатьВидыОтчетов(АдресСтруктурыКниг, Знач МассивОтчетов, Знач МассивПакетовИмпорта) Экспорт
	
	ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ = "Обработка.ИмпортВидовОтчетовИзЭлектронныхТаблицMicrosoftExcel.МодульМенеджера.СоздатьВидыОтчетов";
	
	Попытка
		Возврат СоздатьВидыОтчетов_(АдресСтруктурыКниг, МассивОтчетов, МассивПакетовИмпорта);
	Исключение
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,,, "Системная ошибка. Подробности в полном протоколе.", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьДокументБДДляПакетаПравил(ПакетПравилИмпорта)  

	ДокументБД = Неопределено;
	
	ЧислоПравил = ПакетПравилИмпорта.Правила.Количество();
	
	Для ИндексПравила = 1 По ЧислоПравил Цикл
		
		ПравилоИмпорта = ПакетПравилИмпорта.Правила.Получить(ЧислоПравил-ИндексПравила);
		ЧислоПравилЗагрузки = ПравилоИмпорта.Правила.Количество();
		Если ЧислоПравилЗагрузки > 0 Тогда
			Для ИндексПравилаЗагрузки = 1 По ЧислоПравилЗагрузки Цикл
				Для каждого Правило Из ПравилоИмпорта.Правила Цикл
					
					НастройкиХранилища = ПолучитьИзВременногоХранилища(Правило);
					Если НастройкиХранилища <> Неопределено Тогда
						ПолноеИмя = НастройкиХранилища.СохраненнаяНастройка.Получить("ПриемникПолноеИмя");
						Мас = ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ПолноеИмя, ".");
						Если (Мас.Количество() > 1) И Мас[0] = "Документ" Тогда
							ДокументБД = Справочники.ДокументыБД.НайтиПоНаименованию(Мас[1]);	
							Если ЗначениеЗаполнено(ДокументБД) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;					
					КонецЕсли;
					
				КонецЦикла;				
				
				Если ЗначениеЗаполнено(ДокументБД) Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументБД) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДокументБД = Неопределено Тогда
		
		//Не нашли подставим из имеющихся
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументыБД.Ссылка КАК ДокументБД
		|ИЗ
		|	Справочник.ДокументыБД КАК ДокументыБД
		|ГДЕ
		|	ДокументыБД.Владелец = ЗНАЧЕНИЕ(Справочник.ТипыБазДанных.ТекущаяИБ)
		|	И НЕ ДокументыБД.ПометкаУдаления
		|	И НЕ ДокументыБД.ЭтоГруппа
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументыБД.ИспользуетсяВПроцессе УБЫВ,
		|	ДокументыБД.Наименование";
		
		Выборка = Запрос.Выполнить().Выбрать();		  
		Если Выборка.Следующий() Тогда
			ДокументБД = Выборка.ДокументБД;
		КонецЕсли;		  
	
	КонецЕсли;
	
	Возврат ДокументБД;
	
КонецФункции


Функция СоздатьВидыОтчетов_(АдресСтруктурыКниг, МассивОтчетов, МассивПакетовИмпорта)
	
	// МассивОтчетов	= [ ВидОтчета ]
	// ВидОтчета		= ({ Имя, Бланки: [ ({ Имя, АдресЛиста }) ], ПравилаПроверки: [ ({ Имя, АдресЛиста }) ], ГруппыРаскрытия: [{ АдресЛиста, [ГруппаРаскрытия] }] })
	// ГруппаРаскрытия	= ({ Имя, ИмяОбласти, Аналитики:[ ({ Имя, ВидСубконто, Реквизиты:[ ({ Имя, ИмяРеквизита, ИмяОбласти }) ] }) ], Показатели:[ ({ Имя, ИмяОбласти }) ], Прочее:[ ({ Имя, ИмяОбласти }) ] })
	
	ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ = "Обработка.ИмпортВидовОтчетовИзЭлектронныхТаблицMicrosoftExcel.МодульМенеджера.СоздатьВидыОтчетов_";
	
	СоответствиеТиповПоказателейГруппРаскрытия = Новый Соответствие;
	СоответствиеТиповПоказателейГруппРаскрытия.Вставить("",			Перечисления.ТипыЗначенийПоказателейОтчетов.Число);
	СоответствиеТиповПоказателейГруппРаскрытия.Вставить("Число",	Перечисления.ТипыЗначенийПоказателейОтчетов.Число);
	СоответствиеТиповПоказателейГруппРаскрытия.Вставить("Дата",		Перечисления.ТипыЗначенийПоказателейОтчетов.Дата);
	СоответствиеТиповПоказателейГруппРаскрытия.Вставить("Булево",	Перечисления.ТипыЗначенийПоказателейОтчетов.Булево);
	СоответствиеТиповПоказателейГруппРаскрытия.Вставить("Строка",	Перечисления.ТипыЗначенийПоказателейОтчетов.Строка);
	
	Данные = ПолучитьИзВременногоХранилища(АдресСтруктурыКниг);
	
	ДанныеВырожденныеСсылки		= Данные.ВырожденныеСсылки;
	ДанныеОбластиФормул			= Данные.ОбластиФормул;
	ДанныеОперандыФормул		= Данные.ОперандыФормул;
	ДанныеДеревьяФормул			= Данные.ДеревьяФормул;
	ДанныеСозданныеОбъекты		= Данные.СозданныеОбъекты;
	ДанныеЛисты					= Данные.Листы;
	ДанныеТабличныеДокументы	= Данные.ТабличныеДокументы;
	ДанныеИсходящиеСсылки		= Данные.ИсходящиеСсылки;
	ДанныеXLS					= Данные.XLS;
	
	ВидыОтчетов			= Новый Соответствие;	// [{ АдресЛиста, ВидОтчета }]
	БланкиОтчетов		= Новый Соответствие;	// [{ АдресЛиста, Имя }]
	ПравилаПроверки		= Новый Соответствие;	// [{ АдресЛиста, ПравилоПроверки }]
	ГруппыРаскрытия		= Новый Соответствие;	// [{ АдресЛиста, [ ГруппаРаскрытия ] }]
	ТабличныеДокументы	= Новый Соответствие;	// [{ АдресЛиста, ТабличныйДокумент }]  - Бланки отчетов + Правила проверки
	ПравилаОбработки	= Новый Соответствие;	// [{ АдресЛиста, ПравилоОбработки }]
	
	ВырожденныеСтроки			= Новый Соответствие;	// [{ АдресСтроки, Истина }]
	ВысотаТабличногоДокумента	= Новый Соответствие; // [{ АдресЛиста, Высота }]
	ШиринаТабличногоДокумента	= Новый Соответствие; // [{ АдресЛиста, Ширина }]
	
	ИменаОбластейГруппРаскрытияАналитики		= Новый Соответствие; // [{ АдресОбласти, Имя }]
	ИменаОбластейГруппРаскрытияПоказатели		= Новый Соответствие; // [{ АдресОбласти, Имя }]
	ИменаОбластейГруппРаскрытияПрочее			= Новый Соответствие; // [{ АдресОбласти, Истина }]
	
	РаннееСозданныеВидыОтчетов	= Новый Соответствие; // [{ АдресЛиста, Истина }]
	РаннееСозданныеПоказатели	= Новый Соответствие; // [{ АдресОбласти, ПоказательСсылка }]
	
	ИменаСинтетическихПоказателей = Новый Соответствие; // [{ ИмяОбласти, ИмяПоказателя }]
	
	ИменаОбластейС1К1				= Новый Соответствие; // [{ АдресОбласти, Имя }]
	ИменаОбластейОперандов			= Новый Соответствие; // [{ АдресОбласти, Имя }]
	
	Показатели						= Новый Соответствие; // [{ Адрес, Ссылка }]
	
	ИсходящиеСсылки	= Новый Соответствие; // [{ АдресЛиста, [{ АдресЯчейки, Истина }] }]
	ВходящиеСсылки	= Новый Соответствие; // [{ АдресЛиста, [{ АдресЯчейки, Истина }] }]
	
	ВсеСсылки		= Новый Массив;
	ВсеСсылки.Добавить(ИсходящиеСсылки);
	ВсеСсылки.Добавить(ВходящиеСсылки);
	
	Формулы			= Новый Соответствие; // [{ АдресФормулы, [ АдресОперанда ] }] 
	
	ИмпортируемыеПоказателиГруппРаскрытия = Новый Соответствие; // [{ Адрес, СтруктураДляСозданияФормулыИмпорта }] 
	ИменаИмпортируемыхОбластей = Новый Соответствие; // [{ Адрес, Имя }]
	
	КаталогВременныхФайлов = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(КаталогВременныхФайлов);
	
	СозданныеОбъекты = Новый Соответствие;
	
	ОбщееНаименованиеИмпорта = "Импорт бланков из Microsoft Excel от " + Формат(ТекущаяДата(), "ДФ='yyyy.MM.dd HH:mm:ss'");
	
	//НачатьТранзакцию();
	
	// ТИП БД
	
	НовыйТипБД = ПолучитьСозданныйОбъект(ДанныеСозданныеОбъекты, "ТипБД", 0, Справочники.ТипыБазДанных);
	
	Если НовыйТипБД = Неопределено Тогда
		
		НовыйТипБДОбъект = Справочники.ТипыБазДанных.СоздатьЭлемент();
		НовыйТипБДОбъект.Наименование = ОбщееНаименованиеИмпорта;
		НовыйТипБДОбъект.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO;
		НовыйТипБДОбъект.Записать();
		
		НовыйТипБД = НовыйТипБДОбъект.Ссылка;
	
		НовыйВИБОбъект = Справочники.ВнешниеИнформационныеБазы.СоздатьЭлемент();
		НовыйВИБОбъект.Наименование = ОбщееНаименованиеИмпорта;
		НовыйВИБОбъект.ТипБД = НовыйТипБД;
		НовыйВИБОбъект.ТипХранилищаДанныхADO = Перечисления.ТипыХранилищДанныхADO.XLS;
		НовыйВИБОбъект.ИспользоватьДляИмпортаЭталонныйКаталог = Истина;
		НовыйВИБОбъект.Записать();
		
		НовыйТипБДОбъект.ВИБПоУмолчанию = НовыйВИБОбъект.Ссылка;
		НовыйТипБДОбъект.Записать();
		
		ЗапомнитьСозданныйОбъект(СозданныеОбъекты, "ТипБД", 0, НовыйТипБД);
		
	КонецЕсли;
	
	Если НовыйТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO И ЗначениеЗаполнено(НовыйТипБД.ВИБПоУмолчанию) Тогда
		НовыйВИБОбъект = НовыйТипБД.ВИБПоУмолчанию.ПолучитьОбъект();
		ЭталонныйКаталог_ = НовыйВИБОбъект.ЭталонныйКаталог;
		НовыйВИБОбъект.ЭталонныйКаталог = КаталогВременныхФайлов;
		НовыйВИБОбъект.Записать();
	Иначе
		ЭталонныйКаталог_ = Неопределено;
	КонецЕсли;
	
	// ВИДЫ ОТЧЕТОВ
	
	Если МассивОтчетов.Количество() > 0 Тогда
		ГруппаВидовОтчетов = Справочники.ВидыОтчетов.СоздатьГруппу();
		ГруппаВидовОтчетов.Наименование = ОбщееНаименованиеИмпорта;
		ГруппаВидовОтчетов.Код = ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(ГруппаВидовОтчетов.Наименование,, "ВидыОтчетов");
		ГруппаВидовОтчетов.Записать();
		ГруппаВидовОтчетов = ГруппаВидовОтчетов.Ссылка;
	КонецЕсли;
	
	ОбновлятьТаблицыADO = Ложь;
	
	Для Каждого ВидОтчета Из МассивОтчетов Цикл
		
		БланкОтчета = ВидОтчета.БланкиОтчетов[0];
		
		ВидОтчетаСсылка = ПолучитьСозданныйОбъект(ДанныеСозданныеОбъекты, "ВидОтчета", БланкОтчета.Адрес, Справочники.ВидыОтчетов);
		
		Если НЕ ВидОтчетаСсылка = Неопределено Тогда
			РаннееСозданныеВидыОтчетов.Вставить(БланкОтчета.Адрес, ВидОтчетаСсылка);
		КонецЕсли;
		
		Если НЕ ВидОтчета.Выбран Тогда
			Продолжить;
		КонецЕсли;
		
		ВидыОтчетов.Вставить(БланкОтчета.Адрес, ВидОтчета);
		БланкиОтчетов.Вставить(БланкОтчета.Адрес, БланкОтчета.Имя);
		ТабличныеДокументы.Вставить(БланкОтчета.Адрес, ДанныеТабличныеДокументы.Получить(БланкОтчета.Адрес).ПолучитьОбласть());
		
		Если ВидОтчетаСсылка = Неопределено Тогда
			
			Если НЕ ЗначениеЗаполнено(ВидОтчета.Параметры["ВидОтчетаСуществующий"]) Тогда
				
				ВидОтчетаОбъект = Справочники.ВидыОтчетов.СоздатьЭлемент();
				ВидОтчетаОбъект.Код = ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(ВидОтчета.Имя,, "ВидыОтчетов");
				ВидОтчетаОбъект.Наименование = ВидОтчета.Имя;
				ВидОтчетаОбъект.Родитель = ГруппаВидовОтчетов;
				ВидОтчетаОбъект.ОбъектДляСогласованияЗначений = Перечисления.ОбъектыСогласованияЗначенийПоказателейОтчетов.ЭкземплярОтчета;
				ВидОтчетаОбъект.Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ПроизвольныеДанные;
				ВидОтчетаОбъект.Записать();
				
				ВидОтчетаСсылка = ВидОтчетаОбъект.Ссылка;
				
			Иначе
				
				ВидОтчетаСсылка = ВидОтчета.Параметры["ВидОтчетаСуществующий"];
				
			КонецЕсли;
			
			ЗапомнитьСозданныйОбъект(СозданныеОбъекты, "ВидОтчета", БланкОтчета.Адрес, ВидОтчетаСсылка);
				
			Если НовыйТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO Тогда
			
				ИмяКниги = ДанныеЛисты[БланкОтчета.Адрес].Книга;
				ПолноеИмяФайлаКниги = КаталогВременныхФайлов + "\" + ИмяКниги;
				Файл = Новый Файл(ПолноеИмяФайлаКниги);
				Если НЕ Файл.Существует() Тогда
					ДанныеXLS[ИмяКниги].Получить().Записать(ПолноеИмяФайлаКниги);
					ОбновлятьТаблицыADO = Истина;
				КонецЕсли;
				
				ЗаписьИменаФайловИКаталогов = РегистрыСведений.ИменаФайловИКаталогов.СоздатьМенеджерЗаписи();
				ЗаписьИменаФайловИКаталогов.Объект = ВидОтчетаСсылка;
				ЗаписьИменаФайловИКаталогов.ТипОбъекта = Перечисления.ТипыОбъектов.ВидОтчета;
				ЗаписьИменаФайловИКаталогов.Имя = Файл.ИмяБезРасширения;
				ЗаписьИменаФайловИКаталогов.Записать();
				
			КонецЕсли;
			
			ПравилоПроверкиОбъект = Справочники.ПравилаПроверки.СоздатьЭлемент();
			ПравилоПроверкиОбъект.Владелец = ВидОтчетаСсылка;
			ПравилоПроверкиОбъект.Наименование = "Правило проверки: " + ВидОтчета.Имя;
			ПравилоПроверкиОбъект.ТипБД = НовыйТипБД;
			ПравилоПроверкиОбъект.Записать();
			
			Если НЕ ЗначениеЗаполнено(ВидОтчета.Параметры["ВидОтчетаСуществующий"]) Тогда
				УправлениеОтчетамиУХ.УстановитьЭлементПоУмолчаниюДляВидаОтчета(ПравилоПроверкиОбъект.Ссылка, ПравилоПроверкиОбъект.Владелец, Перечисления.ЭлементыНастройкиОтчета.ПравилоПроверки);
			КонецЕсли;
			
			ПравилоОбработкиОбъект = Справочники.ПравилаОбработки.СоздатьЭлемент();
			ПравилоОбработкиОбъект.Владелец = ВидОтчетаСсылка;
			ПравилоОбработкиОбъект.Наименование = "Правило обработки: " + ВидОтчета.Имя;
			ПравилоОбработкиОбъект.ТипБД = НовыйТипБД;
			ПравилоОбработкиОбъект.ПравилоПроверки = ПравилоПроверкиОбъект.Ссылка;
			Если НовыйТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO Тогда
				ПравилоОбработкиОбъект.ИмяФайла = Файл.Имя;
			КонецЕсли;
			ПравилоОбработкиОбъект.Записать();
			ПравилаОбработки.Вставить(БланкОтчета.Адрес, ПравилоОбработкиОбъект.Ссылка);
			
			Если НЕ ЗначениеЗаполнено(ВидОтчета.Параметры["ВидОтчетаСуществующий"]) Тогда
				УправлениеОтчетамиУХ.УстановитьЭлементПоУмолчаниюДляВидаОтчета(ПравилоОбработкиОбъект.Ссылка, ПравилоОбработкиОбъект.Владелец, Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки);
			КонецЕсли;
			
			Для Каждого ПравилоПроверки Из ВидОтчета.ПравилаПроверки Цикл
				ВидыОтчетов.Вставить(ПравилоПроверки.Адрес, ВидОтчета);
				ПравилаПроверки.Вставить(ПравилоПроверки.Адрес, ПравилоПроверкиОбъект.Ссылка);
				ТабличныеДокументы.Вставить(ПравилоПроверки.Адрес, ДанныеТабличныеДокументы.Получить(ПравилоПроверки.Адрес).ПолучитьОбласть());
			КонецЦикла;
			
			Для Каждого ГруппаРаскрытия Из ВидОтчета.ГруппыРаскрытия Цикл
				ГруппыРаскрытия.Вставить(ГруппаРаскрытия.Ключ, ГруппаРаскрытия.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
		ВидОтчета.Вставить("Ссылка", ВидОтчетаСсылка);
		
	КонецЦикла; 
	
	Если ОбновлятьТаблицыADO Тогда
		Справочники.ТаблицыADO.ОбновитьТаблицыADO(НовыйТипБД);
	КонецЕсли;
	
	Для Каждого ТабличныйДокумент Из ТабличныеДокументы Цикл
		ВысотаТабличногоДокумента.Вставить(ТабличныйДокумент.Ключ, ТабличныйДокумент.Значение.ВысотаТаблицы);
		ШиринаТабличногоДокумента.Вставить(ТабличныйДокумент.Ключ, ТабличныйДокумент.Значение.ШиринаТаблицы);
	КонецЦикла; 
	
	Для Каждого ЛистГруппыРасрытия Из ГруппыРаскрытия Цикл
		
		АдресЛиста = ЛистГруппыРасрытия.Ключ;
		ВидОтчета = ВидыОтчетов[АдресЛиста];
		ТабличныйДокумент = ТабличныеДокументы[АдресЛиста];
		
		ВидОтчетаСуществует = ЗначениеЗаполнено(ВидОтчета.Параметры["ВидОтчетаСуществующий"]);
		
		ИмяКниги = ДанныеЛисты[АдресЛиста].Книга;
		ИмяЛиста = ДанныеЛисты[АдресЛиста].Имя;
		
		Если НовыйТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO Тогда
		
			ТаблицаADO = НайтиТаблицуADO(НовыйТипБД, ИмяКниги, ИмяЛиста);
			
			Если ТаблицаADO = Неопределено Тогда
				ТекстИсключения = "Не найдена таблица ADO: по данной таблице не могут быть настроены соответствия сопоставленных реквизитов.";
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
		
			ТаблицаADOОбъект = ТаблицаADO.ПолучитьОбъект();
			
		КонецЕсли;
		
		ПравилоОбработки = ПравилаОбработки[АдресЛиста];
		
		Для Каждого ГруппаРаскрытия Из ЛистГруппыРасрытия.Значение Цикл
			
			Если НЕ ВидОтчетаСуществует Тогда
				
				ГруппаРаскрытияОбъект = Справочники.ГруппыРаскрытия.СоздатьЭлемент();
				ГруппаРаскрытияОбъект.Владелец = ВидОтчета.Ссылка;
				ГруппаРаскрытияОбъект.Наименование = ГруппаРаскрытия.Имя;
				ГруппаРаскрытияОбъект.Код = ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(ГруппаРаскрытияОбъект.Наименование,, "ГруппыРаскрытия", ГруппаРаскрытияОбъект.Владелец);
				
				Для Индекс = 0 По ГруппаРаскрытия.Аналитики.ВГраница() Цикл
										
					Аналитика = ГруппаРаскрытия.Аналитики[Индекс];
					НомерАналитики = Формат(Индекс + 1, "ЧГ=");
					ГруппаРаскрытияОбъект["ВидАналитики" + НомерАналитики] = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПолучитьСсылку(Аналитика.ВидСубконто);
					ГруппаРаскрытияОбъект["Аналитика" + НомерАналитики + "Обязательна"] = Истина;
					
				КонецЦикла;
				
				ГруппаРаскрытияОбъект.Записать();
				
			Иначе
				
				ГруппаРаскрытияСсылка = Справочники.ГруппыРаскрытия.НайтиПоНаименованию(ГруппаРаскрытия.Имя, Истина,, ВидОтчета.Ссылка);
				Если ГруппаРаскрытияСсылка.Пустая() Тогда
					ВызватьИсключение "Не найдена группа раскрытия <" + ГруппаРаскрытия.Имя + "> у вида отчета <" + ВидОтчета.Имя + ">";
				КонецЕсли;
				
				ГруппаРаскрытияОбъект = ГруппаРаскрытияСсылка.ПолучитьОбъект();
				
			КонецЕсли;
			
			ГруппаРаскрытия.Вставить("Код", СокрП(ГруппаРаскрытияОбъект.Код));
			ГруппаРаскрытия.Вставить("Ссылка", ГруппаРаскрытияОбъект.Ссылка);
			
			ОбластьГруппыРаскрытия = ТабличныйДокумент.Область(ГруппаРаскрытия.ИмяОбласти);
			
			Для НомерСтроки = ОбластьГруппыРаскрытия.Верх + 1 По ОбластьГруппыРаскрытия.Низ Цикл
				ВырожденныеСтроки.Вставить(АдресСтрокиЛиста(АдресЛиста, НомерСтроки), Истина);
			КонецЦикла;
			
			Для Индекс = 0 По ГруппаРаскрытия.Аналитики.ВГраница() Цикл
				
				Аналитика = ГруппаРаскрытия.Аналитики[Индекс];
				НомерАналитики = Формат(Индекс + 1, "ЧГ=");
				КодАналитики = ГруппаРаскрытия.Код + "_Аналитика_Аналитика" + НомерАналитики;
				
				СопоставлениеРеквизитов = Новый Соответствие;
				
				ВидАналитики = ГруппаРаскрытияОбъект["ВидАналитики" + НомерАналитики];
				
				Для Каждого ОбластьРеквизит Из Аналитика.Реквизиты Цикл
					
					Область = ТабличныйДокумент.Область(ОбластьРеквизит.ИмяОбласти);
					ИменаОбластейГруппРаскрытияАналитики.Вставить(АдресЯчейкиЛиста(АдресЛиста, Область.Верх, Область.Лево), КодАналитики + "_" + ОбластьРеквизит.ИмяРеквизита);
					
					Если НовыйТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO Тогда
					
						Если ЗначениеЗаполнено(ВидАналитики) И ЗначениеЗаполнено(ОбластьРеквизит.ИмяРеквизита) Тогда
							СопоставлениеРеквизитов.Вставить(ОбластьРеквизит.Имя, ОбластьРеквизит.ИмяРеквизита);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если НовыйТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO Тогда
					Если ЗначениеЗаполнено(ВидАналитики) Тогда
						Аналитика.Вставить("Настройка", ПолучитьНастройкуСопоставления(НовыйТипБД, ТаблицаADO, ВидАналитики, СопоставлениеРеквизитов));
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокаОтчета=Неопределено;
			
			Для Каждого ОбластьПоказатель Из ГруппаРаскрытия.Показатели Цикл
				
				НачалоКодаПоказателяГруппыРаскрытия = ГруппаРаскрытия.Код + "_Показатель_";
								
				Если ЭтоИмяАдресRC(ОбластьПоказатель.Имя) Тогда
					ИмяПоказателя = "С" + СтрЗаменить(Сред(ОбластьПоказатель.Имя, 2), "C", "К");
				Иначе
					ИмяПоказателя = ОбластьПоказатель.Имя;
				КонецЕсли;
				
				Область = ТабличныйДокумент.Область(ОбластьПоказатель.ИмяОбласти);
				АдресЯчейки = АдресЯчейкиЛиста(АдресЛиста, Область.Верх, Область.Лево);
				
				Если ВидОтчетаСуществует Тогда
					
					ПоказательСсылка = Справочники.ПоказателиОтчетов.НайтиПоНаименованию(ИмяПоказателя, Истина,, ВидОтчета.Ссылка);
					Если ПоказательСсылка.Пустая() Тогда
						ВызватьИсключение "Не найден показатель <" + ИмяПоказателя + "> у вида отчета <" + ВидОтчета.Имя + ">";
					КонецЕсли;
					
				Иначе
					
					ПоказательСсылка = ПолучитьСозданныйОбъект(ДанныеСозданныеОбъекты, "Показатель", АдресЯчейки, Справочники.ПоказателиОтчетов);
					Если ПоказательСсылка = Неопределено Тогда
						
						ПоказательОбъект = Справочники.ПоказателиОтчетов.СоздатьЭлемент();
						ПоказательОбъект.Владелец = ВидОтчета.Ссылка;
						ПоказательОбъект.Наименование = ИмяПоказателя;
						ПоказательОбъект.Код = ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(ПоказательОбъект.Наименование,, "ПоказателиОтчетов", ПоказательОбъект.Владелец);
						ПоказательОбъект.ТипЗначения = СоответствиеТиповПоказателейГруппРаскрытия[ОбластьПоказатель.ТипЗначения];
						ПоказательОбъект.Нефинансовый = ?(ЗначениеЗаполнено(ОбластьПоказатель.ТипЗначения), НЕ ОбластьПоказатель.Финансовый, Ложь);
						ПоказательОбъект.ГруппаРаскрытия = ГруппаРаскрытия.Ссылка;
						ПоказательОбъект.ВидИтога = ?(ПоказательОбъект.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число, Перечисления.ВидыИтоговПоказателя.Сумма, Перечисления.ВидыИтоговПоказателя.НеРассчитывается);
						Если НЕ ПоказательОбъект.НеФинансовый Тогда
							ПоказательОбъект.ВидКурса = ВидОтчета.Параметры["ВидКурса"];
						КонецЕсли;
						
						Если СтрокаОтчета=Неопределено Тогда
							
							СтрокаОтчета=СформироватьСтрокуОтчета(ВидОтчета.Ссылка,ГруппаРаскрытия);
							
						КонецЕсли;
						
						ПоказательОбъект.Строка=СтрокаОтчета;
						ПоказательОбъект.Колонка=СформироватьКолонкуОтчета(ВидОтчета.Ссылка,ИмяПоказателя,ПоказательОбъект.ТипЗначения,Область.Право);
						
						ПоказательОбъект.Записать();
					
						ПоказательСсылка = ПоказательОбъект.Ссылка;
					
						ЗапомнитьСозданныйОбъект(СозданныеОбъекты, "Показатель", АдресЯчейки, ПоказательСсылка);
						
					КонецЕсли;
					
					
				КонецЕсли;
				
				КодПоказателя = СокрП(ПоказательСсылка.Код);
				
				Показатели.Вставить(АдресЯчейки, ПоказательСсылка);
				
				ИменаОбластейГруппРаскрытияПоказатели.Вставить(АдресЯчейки, НачалоКодаПоказателяГруппыРаскрытия + КодПоказателя);
				ИменаОбластейОперандов.Вставить(АдресЯчейки, КодПоказателя);
				ИменаСинтетическихПоказателей.Вставить(НачалоКодаПоказателяГруппыРаскрытия + КодПоказателя, КодПоказателя);
				
				Если НовыйТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO Тогда
					
					СтруктураИмпорта = Новый Структура();
					СтруктураИмпорта.Вставить("Наименование",			КодПоказателя);
					СтруктураИмпорта.Вставить("НазначениеРасчетов",		ПравилоОбработки);
					СтруктураИмпорта.Вставить("ПотребительРасчета",		ПоказательСсылка);
					СтруктураИмпорта.Вставить("ТипБД",					НовыйТипБД);
					СтруктураИмпорта.Вставить("ТаблицаADO",				ТаблицаADO);
					СтруктураИмпорта.Вставить("ТипЗначения",			ПоказательСсылка.ТипЗначения);
					СтруктураИмпорта.Вставить("ИмяКолонкиADO", 			ОбластьПоказатель.Имя);
					СтруктураИмпорта.Вставить("ГруппаРаскрытия",		ГруппаРаскрытия);
					СтруктураИмпорта.Вставить("ГруппаРаскрытияОбъект",	ГруппаРаскрытияОбъект);
					
					ИмпортируемыеПоказателиГруппРаскрытия.Вставить(АдресЯчейки, СтруктураИмпорта);
					
				КонецЕсли;
					
			КонецЦикла; 
			
			Для Каждого ОбластьПрочее Из ГруппаРаскрытия.Прочее Цикл
				Область = ТабличныйДокумент.Область(ОбластьПрочее.ИмяОбласти);
				ИменаОбластейГруппРаскрытияПрочее.Вставить(АдресЯчейкиЛиста(АдресЛиста, Область.Верх, Область.Лево), Истина);
			КонецЦикла; 
			
		КонецЦикла; 
		
	КонецЦикла;
		
	Для Каждого ИмпортируемыйПоказатель Из ИмпортируемыеПоказателиГруппРаскрытия Цикл
				
		ИменаИмпортируемыхОбластей.Вставить(ИмпортируемыйПоказатель.Ключ, ИменаОбластейГруппРаскрытияПоказатели[ИмпортируемыйПоказатель.Ключ]);
			
		СтруктураИмпорта = ИмпортируемыйПоказатель.Значение;
		
		ИсточникДанныхОбъект = Справочники.ИсточникиДанныхДляРасчетов.СоздатьЭлемент();
		
		ИсточникДанныхОбъект.Наименование			= СтруктураИмпорта.Наименование;
		ИсточникДанныхОбъект.НазначениеРасчетов		= СтруктураИмпорта.НазначениеРасчетов;
		ИсточникДанныхОбъект.ПотребительРасчета		= СтруктураИмпорта.ПотребительРасчета;
		ИсточникДанныхОбъект.СпособПолучения		= Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO;
		ИсточникДанныхОбъект.ТипБД					= СтруктураИмпорта.ТипБД;
		ИсточникДанныхОбъект.ТаблицаADO				= СтруктураИмпорта.ТаблицаADO;
		
		ИсточникДанныхОбъект.СпособИспользования	= Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета;
		
		ИсточникДанныхОбъект.ПодготовитьТаблицыСопоставленийИОтборов();
						
		Для Каждого СтрокаСоответствия ИЗ ИсточникДанныхОбъект.ТаблицаСоответствияБД Цикл
			
			Если СтрокаСоответствия.ПсевдонимКонсолидации = "Значение" Тогда
				
				СтрокаСоответствия.ПолеБД = "[" + СтруктураИмпорта.ИмяКолонкиADO + "]";
				СтрокаСоответствия.ПсевдонимБД = СтруктураИмпорта.ИмяКолонкиADO;
				СтрокаСоответствия.Сопоставлено = Истина;
				
			ИначеЕсли Лев(СтрокаСоответствия.АналитикаКонсолидации, СтрДлина("Аналитика")) = "Аналитика" Тогда
				
				НомерАналитики = Число(Сред(СтрокаСоответствия.АналитикаКонсолидации, СтрДлина("Аналитика") + 1));
				
				Аналитика = СтруктураИмпорта.ГруппаРаскрытия.Аналитики[НомерАналитики - 1];
				
				Если Аналитика.Свойство("Настройка") Тогда
					
					СтрокаСоответствия.ПолеБД				= "";
					СтрокаСоответствия.Сопоставлено			= Истина;
					СтрокаСоответствия.СправочникБД			= "";
					СтрокаСоответствия.ПолеЗапроса			= "";
					СтрокаСоответствия.ТипМетаДанных		= "Простой";
					СтрокаСоответствия.НастройкаСоответствия= Аналитика.Настройка;
					СтрокаСоответствия.ВидАналитики			= СтруктураИмпорта.ГруппаРаскрытияОбъект["ВидАналитики" + НомерАналитики];
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
				
		ИсточникДанныхОбъект.СохранитьНастройкиОперанда();
		ИсточникДанныхОбъект.ТипЗначения = СтруктураИмпорта.ТипЗначения;
		
		ИсточникДанныхОбъект.Записать();
		
		ИсточникДанных = ИсточникДанныхОбъект.Ссылка;
		
		ЗаписьФормулы = РегистрыСведений.ПроцедурыРасчетов.СоздатьМенеджерЗаписи();
		ЗаписьФормулы.НазначениеРасчетов = СтруктураИмпорта.НазначениеРасчетов;
		ЗаписьФормулы.ПотребительРасчета = СтруктураИмпорта.ПотребительРасчета;
		ЗаписьФормулы.Процедура = "[" + СокрП(ИсточникДанных.Код) + "]";
		ЗаписьФормулы.СпособОбработки = Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение;
		ЗаписьФормулы.РедактированиеВозможно = Истина;
		ЗаписьФормулы.Записать();
		
	КонецЦикла; 
	
	Для Каждого СтруктураСсылок Из ВсеСсылки Цикл
		
		Для Каждого ЭлементСтруктурыСсылки Из СтруктураСсылок Цикл
			
			АдресЛиста = ЭлементСтруктурыСсылки.Ключ;
			
			Если БланкиОтчетов[АдресЛиста] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СсылкиЛиста = ЭлементСтруктурыСсылки.Значение;
			
			ВидОтчета = ВидыОтчетов[АдресЛиста];
			
			ТабличныйДокумент = ТабличныеДокументы[АдресЛиста];
			
			Для Каждого ЭлементСсылкаЛиста Из СсылкиЛиста Цикл
				
				АдресОбласти = ЭлементСсылкаЛиста.Ключ;
				
				Если ИменаОбластейГруппРаскрытияПоказатели[АдресОбласти] = Неопределено Тогда
						
					Адрес = РазложитьАдресЯчейки(АдресОбласти, АдресЛиста);
					ИмяОбласти = АдресС1К1(Адрес[1], Адрес[2]);
					
					ПоказательСсылка = ПолучитьСозданныйОбъект(ДанныеСозданныеОбъекты, "Показатель", АдресОбласти, Справочники.ПоказателиОтчетов);
					Если ПоказательСсылка = Неопределено Тогда
						
						ПоказательОбъект = Справочники.ПоказателиОтчетов.СоздатьЭлемент();
						ПоказательОбъект.Владелец = ВидОтчета.Ссылка;
						ПоказательОбъект.Наименование = ИмяОбласти;
						ПоказательОбъект.Код = ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(ПоказательОбъект.Наименование,, "ПоказателиОтчетов", ПоказательОбъект.Владелец);
						ПоказательОбъект.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
						ПоказательОбъект.ВидКурса = ВидОтчета.Параметры["ВидКурса"];
						ПоказательОбъект.Записать();
						
						ПоказательСсылка = ПоказательОбъект.Ссылка;
						
						ЗапомнитьСозданныйОбъект(СозданныеОбъекты, "Показатель", АдресОбласти, ПоказательСсылка);
						
					КонецЕсли;
					
					Показатели.Вставить(АдресОбласти, ПоказательСсылка);
					
					ИмяОбласти = СокрП(ПоказательСсылка.Код);
				
					ИменаОбластейС1К1.Вставить(АдресОбласти, ИмяОбласти);
					ИменаОбластейОперандов.Вставить(АдресОбласти, ИмяОбласти);
					
				КонецЕсли;
					
			КонецЦикла; 
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	// ПЕРЕИМЕНОВАНИЕ ОБЛАСТЕЙ ТАБЛИЧНЫХ ДОКУМЕНТОВ
	
	МассивКоллекцийИменОбластей = Новый Массив;
	МассивКоллекцийИменОбластей.Добавить(ИменаОбластейГруппРаскрытияАналитики);
	МассивКоллекцийИменОбластей.Добавить(ИменаИмпортируемыхОбластей);
	
	Для Каждого КоллекцияИменОбластей Из МассивКоллекцийИменОбластей Цикл
		
		Для Каждого ЭлементОбласть Из КоллекцияИменОбластей Цикл
			
			АдресОбласти = РазложитьАдресЯчейки(ЭлементОбласть.Ключ);
			
			Если БланкиОтчетов[АдресОбласти[0]] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТабличныйДокумент = ТабличныеДокументы[АдресОбласти[0]];
			ИмяОбласти = ЭлементОбласть.Значение;
			
			Если НЕ ТабличныйДокумент.Области.Найти(ИмяОбласти) = Неопределено Тогда
				ТабличныйДокумент.Область(ИмяОбласти).Имя = "";
			КонецЕсли;
			
			Область = ТабличныйДокумент.Область(АдресОбласти[1], АдресОбласти[2]);
			Область.Имя = ИмяОбласти;
			
		КонецЦикла;
		
	КонецЦикла; 
	
	// Установим флаг "СодержитДанные"
	Для Каждого ТабличныйДокумент_ Из ТабличныеДокументы Цикл
		Для Каждого Область Из ТабличныйДокумент_.Значение.Области Цикл
			Если Область.СодержитЗначение = Ложь Тогда
				Область.СодержитЗначение = Истина;
				Если НЕ ЗначениеЗаполнено(Область.ТипЗначения) Тогда
					Область.ТипЗначения = Новый ОписаниеТипов("Строка");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ЭлементБланкОтчетов Из БланкиОтчетов Цикл
		
		АдресЛиста = ЭлементБланкОтчетов.Ключ;
		ВидОтчета = ВидыОтчетов[АдресЛиста];
		ТабличныйДокумент = ТабличныеДокументы[АдресЛиста];
		
		ИсходящиеСсылкиЛиста = ИсходящиеСсылки[АдресЛиста];
		ВходящиеСсылкиЛиста = ВходящиеСсылки[АдресЛиста];
		
		ОбластиИменования = Новый Соответствие;
		
		Если НЕ ИсходящиеСсылкиЛиста = Неопределено Тогда
			
			Для Каждого ЭлементИсходящаяСсылка Из ИсходящиеСсылкиЛиста Цикл
				
				ИмяОбласти = ИменаОбластейГруппРаскрытияПоказатели[ЭлементИсходящаяСсылка.Ключ];
				Если ИмяОбласти = Неопределено Тогда
					ИмяОбласти = ИменаОбластейС1К1[ЭлементИсходящаяСсылка.Ключ];
				КонецЕсли;
				
				ОбластиИменования.Вставить(ЭлементИсходящаяСсылка.Ключ, ИмяОбласти);
				
			КонецЦикла;
			
		КонецЕсли;
				
		Если НЕ ВходящиеСсылкиЛиста = Неопределено Тогда
			
			Для Каждого ЭлементВходящаяСсылка Из ВходящиеСсылкиЛиста Цикл
				
				Если НЕ ИсходящиеСсылкиЛиста[ЭлементВходящаяСсылка.Ключ] = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ ИменаИмпортируемыхОбластей[ЭлементВходящаяСсылка.Ключ] = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяОбласти = ИменаОбластейГруппРаскрытияПоказатели[ЭлементВходящаяСсылка.Ключ];
				Если ИмяОбласти = Неопределено Тогда
					ИмяОбласти = ИменаОбластейС1К1[ЭлементВходящаяСсылка.Ключ];
				КонецЕсли;
				
				ОбластиИменования.Вставить(ЭлементВходящаяСсылка.Ключ, ИмяОбласти);
				
			КонецЦикла; 
			
		КонецЕсли;
		
		Для Каждого ЭлементОбластьИменования Из ОбластиИменования Цикл
			
			ИмяОбласти = ЭлементОбластьИменования.Значение;
				
			Если НЕ ТабличныйДокумент.Области.Найти(ИмяОбласти) = Неопределено Тогда
				ТабличныйДокумент.Область(ИмяОбласти).Имя = "";
			КонецЕсли;
			
			Адрес = РазложитьАдресЯчейки(ЭлементОбластьИменования.Ключ);
			
			Область = ТабличныйДокумент.Область(Адрес[1], Адрес[2]);
			Попытка
				Область.СодержитЗначение = Ложь;
				Область.Имя = ИмяОбласти;
			Исключение
				ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,,, "Системная ошибка в " + Адрес[0] + "," + Адрес[1] + "," + Адрес[2] + "," + ИмяОбласти + ". Подробности в полном протоколе.", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВызватьИсключение;
			КонецПопытки;
				
		КонецЦикла; 
		
		ГруппыРаскрытияЛиста = ГруппыРаскрытия[АдресЛиста];
		Если НЕ ГруппыРаскрытияЛиста = Неопределено Тогда
			
			Области = Новый СписокЗначений;
			ИменаОбластей = Новый Соответствие;
			Для Каждого ГруппаРаскрытия Из ГруппыРаскрытияЛиста Цикл
				
				Область = ТабличныйДокумент.Область(ГруппаРаскрытия.ИмяОбласти);
				Области.Добавить(Область.Верх, ГруппаРаскрытия.ИмяОбласти);
				ИменаОбластей.Вставить(ГруппаРаскрытия.ИмяОбласти, ГруппаРаскрытия.Код)
				
			КонецЦикла; 
			
			Области.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
			
			Для Индекс = 0 По Области.Количество()-1 Цикл
				
				Область = ТабличныйДокумент.Область(Области[Индекс].Представление);
				Если Область.Низ > Область.Верх Тогда
					ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область(Область.Верх + 1,, Область.Низ));
				КонецЕсли;
				
				Область = ТабличныйДокумент.Область(Область.Верх, 1, Область.Верх, ТабличныйДокумент.ШиринаТаблицы);
				ИмяОбласти = ИменаОбластей[Области[Индекс].Представление];
				Область.Имя = ИмяОбласти;
				
				ТабличныйДокумент.ВставитьОбласть(Область,, ТипСмещенияТабличногоДокумента.ПоВертикали);
				
				ИсходнаяОбласть = ТабличныйДокумент.Области[ИмяОбласти];
				
				НомерСтрокиОбластиГруппыРаскрытия = ИсходнаяОбласть.Верх;
				Для НомерКолонки = ИсходнаяОбласть.Лево По ИсходнаяОбласть.Право Цикл
					
					ОбластьСинтетическогоПоказателя = ТабличныйДокумент.Область(НомерСтрокиОбластиГруппыРаскрытия - 1, НомерКолонки);
					
					ИмяСинтетическогоПоказателя = ИменаСинтетическихПоказателей[ТабличныйДокумент.Область(НомерСтрокиОбластиГруппыРаскрытия, НомерКолонки).Имя];
					
					Если НЕ ИмяСинтетическогоПоказателя = Неопределено Тогда
						ОбластьСинтетическогоПоказателя.Имя = ИмяСинтетическогоПоказателя;
					Иначе
						ОбластьСинтетическогоПоказателя.СодержитЗначение = Ложь;
						ОбластьСинтетическогоПоказателя.Текст = "X";
						ОбластьСинтетическогоПоказателя.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
						ОбластьСинтетическогоПоказателя.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
					КонецЕсли;
					
				КонецЦикла; 
				
			КонецЦикла; 
			
		КонецЕсли;
		
		БланкОтчетаОбъект = Справочники.БланкиОтчетов.СоздатьЭлемент();
		БланкОтчетаОбъект.Владелец = ВидОтчета.Ссылка;
		БланкОтчетаОбъект.Наименование = ЭлементБланкОтчетов.Значение;
		БланкОтчетаОбъект.Макет = Новый ХранилищеЗначения(ТабличныйДокумент);
		БланкОтчетаОбъект.СохранитьМакетВХранилищеЗначений(ТабличныйДокумент);
		БланкОтчетаОбъект.Записать();
		
		Если НЕ ЗначениеЗаполнено(ВидОтчета.Параметры["ВидОтчетаСуществующий"]) Тогда
			УправлениеОтчетамиУХ.УстановитьЭлементПоУмолчаниюДляВидаОтчета(БланкОтчетаОбъект.Ссылка, БланкОтчетаОбъект.Владелец, Перечисления.ЭлементыНастройкиОтчета.БланкДляИмпорта);
			УправлениеОтчетамиУХ.УстановитьЭлементПоУмолчаниюДляВидаОтчета(БланкОтчетаОбъект.Ссылка, БланкОтчетаОбъект.Владелец, Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображения);
		КонецЕсли;
		
	КонецЦикла;	
		
	Для Каждого ЭлементПравилоОбработки Из ПравилаОбработки Цикл
		
		ПравилоОбработки = ЭлементПравилоОбработки.Значение;
		УправлениеОтчетамиУХ.СформироватьДанныеРегистраПараметрическихНастроек(ПравилоОбработки);
		
	КонецЦикла; 
	
	// ПАКЕТЫ ПРАВИЛ ИМПОРТА ТАБЛИЦ
	
	Если МассивПакетовИмпорта.Количество() > 0 Тогда
				
		ГруппаПравилИмпорта = Справочники.ПравилаИмпортаТаблиц.СоздатьГруппу();
		ГруппаПравилИмпорта.Наименование = ОбщееНаименованиеИмпорта;
		ГруппаПравилИмпорта.Записать();
		
		ГруппаПравилИмпорта = ГруппаПравилИмпорта.Ссылка;
		
		КаталогВременныхФайлов2 = ПолучитьИмяВременногоФайла();
		СоздатьКаталог(КаталогВременныхФайлов2);
		
		НовыйВИБОбъект.ЭталонныйКаталог = КаталогВременныхФайлов2;
		НовыйВИБОбъект.Записать();
		
		Для Каждого ЭлементПакетИмпорта Из МассивПакетовИмпорта Цикл
			
			ИмяФайла = ЭлементПакетИмпорта.ИмяФайла;
			
			ПакетИмпортаСсылка = ПолучитьСозданныйОбъект(ДанныеСозданныеОбъекты, "ПакетИмпорта", ИмяФайла, Справочники.ПакетыПравилИмпортаТаблиц);
			
			Если НЕ ПакетИмпортаСсылка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПолноеИмяФайлаКниги = КаталогВременныхФайлов2 + "\" + ИмяФайла;
			
			ДанныеXLS[ИмяФайла].Получить().Записать(ПолноеИмяФайлаКниги);
				
		КонецЦикла;
		
		Справочники.ТаблицыADO.ОбновитьТаблицыADO(НовыйТипБД);
		
		ЗаписьXML = Новый ЗаписьXML;
	
		Для Каждого ЭлементПакетИмпорта Из МассивПакетовИмпорта Цикл
			
			ИмяФайла = ЭлементПакетИмпорта.ИмяФайла;
			
			ПакетИмпортаСсылка = ПолучитьСозданныйОбъект(ДанныеСозданныеОбъекты, "ПакетИмпорта", ИмяФайла, Справочники.ПакетыПравилИмпортаТаблиц);
			
			Если НЕ ПакетИмпортаСсылка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПакетИмпортаОбъект = Справочники.ПакетыПравилИмпортаТаблиц.СоздатьЭлемент();
			//ПакетИмпортаОбъект.Родитель = ГруппаПакетовИмпорта;
			ПакетИмпортаОбъект.Наименование = ИмяФайла;
			ПакетИмпортаОбъект.Владелец = ПолучитьДокументБДДляПакетаПравил(ЭлементПакетИмпорта);
			ПакетИмпортаОбъект.ТипБД = НовыйТипБД;
			
			Для Каждого ЭлементПравилоИмпорта Из ЭлементПакетИмпорта.Правила Цикл
				
				Для Каждого АдресПравилоИмпорта Из ЭлементПравилоИмпорта.Правила Цикл
					
					Правило = ПолучитьИзВременногоХранилища(АдресПравилоИмпорта);
					
					ИмяЛиста = ЭлементПравилоИмпорта.ИмяЛиста;
					
					ПравилоИмпортаТаблицы = Справочники.ПравилаИмпортаТаблиц.СоздатьЭлемент();
					ПравилоИмпортаТаблицы.Родитель = ГруппаПравилИмпорта;
					
					ПравилоИмпортаТаблицы.ПриемникПолноеИмяМетаданных = Правило.СохраненнаяНастройка["ПриемникПолноеИмя"];
					ПравилоИмпортаТаблицы.ПриемникВладелецТабличнойЧасти = Правило.СохраненнаяНастройка["ПриемникОбъектТабличнойЧасти"];
					ПравилоИмпортаТаблицы.ПриемникРодительСправочника = Правило.СохраненнаяНастройка["ПриемникОбъектРодитель"];
					
					ПравилоИмпортаТаблицы.Условие = Правило.СохраненнаяНастройка["ИсточникУсловие"];
					ПравилоИмпортаТаблицы.Первые1 = Правило.СохраненнаяНастройка["ИсточникПервые1"];
					
					Для Каждого Соединение Из Правило.СохраненнаяНастройка["ИсточникСоединения"] Цикл
						ЗаполнитьЗначенияСвойств(ПравилоИмпортаТаблицы.Соединения.Добавить(), Соединение);
					КонецЦикла; 
					
					Если Правило.Свойство("ИсточникДобавочныеПоля") Тогда 
						Для Каждого ЭлементДобавочноеПоле Из Правило.СохраненнаяНастройка["ИсточникДобавочныеПоля"] Цикл
							СтрокаДобавочноеПоле = ПравилоИмпортаТаблицы.ДобавочныеПоля.Добавить();
							СтрокаДобавочноеПоле.Имя = ЭлементДобавочноеПоле.Имя;
							Если ТипЗнч(ЭлементДобавочноеПоле.Значение) = Тип("Строка") Тогда
								СтрокаДобавочноеПоле.ЗначениеНеСтрока = Неопределено;
								СтрокаДобавочноеПоле.ЗначениеСтрока = ЭлементДобавочноеПоле.Значение;
								СтрокаДобавочноеПоле.ТипСтрока = Истина;
							Иначе
								СтрокаДобавочноеПоле.ЗначениеНеСтрока = ЭлементДобавочноеПоле.Значение;
								СтрокаДобавочноеПоле.ЗначениеСтрока = "";
								СтрокаДобавочноеПоле.ТипСтрока = Ложь;
							КонецЕсли;
						КонецЦикла; 
					КонецЕсли;
					
					ПравилоИмпортаТаблицы.Наименование = ИмяФайла + "/" + ИмяЛиста + " -> " + ПравилоИмпортаТаблицы.ПриемникПолноеИмяМетаданных;
					
					ЗаписьXML.УстановитьСтроку();
					СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Правило.Правила);
					ПравилоИмпортаТаблицы.ПравилаXML = ЗаписьXML.Закрыть();
					
					ЗаписьXML.УстановитьСтроку();
					СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Правило.СохраненнаяНастройка);
					ПравилоИмпортаТаблицы.СохраненнаяНастройкаXML = ЗаписьXML.Закрыть();
					
					ТаблицаADO = НайтиТаблицуADO(НовыйТипБД, ИмяФайла, ИмяЛиста);
					
					Если ТаблицаADO = Неопределено Тогда
						ТекстИсключения = "Не найдена таблица ADO: таблица ADO не может быть заполнена в правиле импорта таблиц.";
						ВызватьИсключение ТекстИсключения;
					КонецЕсли;
					
					ПравилоИмпортаТаблицы.ТаблицаADO = ТаблицаADO;
				
					ПравилоИмпортаТаблицы.Записать();
					
					ПакетИмпортаОбъект.ПорядокИмпортаТаблиц.Добавить().ПравилоИмпортаТаблицы = ПравилоИмпортаТаблицы.Ссылка;
					
				КонецЦикла; 
				
			КонецЦикла; 
			
			ПакетИмпортаОбъект.Записать();
			
			Файл = Новый Файл(ИмяФайла);
			
			НаборЗаписей = РегистрыСведений.ИменаФайловИКаталогов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ТипОбъекта.Установить(Перечисления.ТипыОбъектов.ДокументПараллельногоУчета);
			НаборЗаписей.Прочитать();
			
			УдаляемыеЗаписи = Новый Массив;
			
			Для Каждого Запись Из НаборЗаписей Цикл
				Если Запись.Имя = Файл.ИмяБезРасширения Тогда
					УдаляемыеЗаписи.Добавить(Запись);
				КонецЕсли;
			КонецЦикла; 
			
			Если УдаляемыеЗаписи.Количество() > 0 Тогда
				Для Каждого Запись Из УдаляемыеЗаписи Цикл
					НаборЗаписей.Удалить(Запись);
				КонецЦикла; 
				НаборЗаписей.Записать();
			КонецЕсли;
			
			ЗаписьИменаФайловИКаталогов = РегистрыСведений.ИменаФайловИКаталогов.СоздатьМенеджерЗаписи();
			ЗаписьИменаФайловИКаталогов.Объект = ПакетИмпортаОбъект.Ссылка;
			ЗаписьИменаФайловИКаталогов.ТипОбъекта = Перечисления.ТипыОбъектов.ДокументПараллельногоУчета;
			ЗаписьИменаФайловИКаталогов.Имя = Файл.ИмяБезРасширения;
			ЗаписьИменаФайловИКаталогов.Записать();
			
			ЗапомнитьСозданныйОбъект(СозданныеОбъекты, "ПакетИмпорта", ИмяФайла, ПакетИмпортаОбъект.Ссылка);
			
		КонецЦикла; 
		
	КонецЕсли;
	
	// ТИП БД
	
	Если НЕ ЭталонныйКаталог_ = Неопределено Тогда
		НовыйВИБОбъект.ЭталонныйКаталог = ЭталонныйКаталог_;
		НовыйВИБОбъект.Записать();
	КонецЕсли;
	
//	ЗафиксироватьТранзакцию();
	
	Если МассивОтчетов.Количество() > 0 Тогда
		Попытка
			УдалитьФайлы(КаталогВременныхФайлов);
		Исключение
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьПредупреждение(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,,, "Системная ошибка. Подробности в полном протоколе.", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	Если МассивПакетовИмпорта.Количество() > 0 Тогда
		Попытка
			УдалитьФайлы(КаталогВременныхФайлов2);
		Исключение
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьПредупреждение(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,,, "Системная ошибка. Подробности в полном протоколе.", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	Для Каждого КоллекцияТипа Из СозданныеОбъекты Цикл
		
		ДанныеКоллекцияТипа = ДанныеСозданныеОбъекты[КоллекцияТипа.Ключ];
		
		Для Каждого ЭлементКоллекции Из КоллекцияТипа.Значение Цикл
			
			ДанныеКоллекцияТипа[0].Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение.УникальныйИдентификатор());
			
			ОбновитьСериализованноеЗначение(ДанныеКоллекцияТипа[1], ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			
		КонецЦикла; 
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Данные, АдресСтруктурыКниг);
	
	Возврат Истина;
	
КонецФункции

Функция СформироватьСтрокуОтчета(ВидОтчета,ГруппаРаскрытия)
	
	СтрокаОбъект=справочники.СтрокиОтчетов.СоздатьЭлемент();
	СтрокаОбъект.Владелец=ВидОтчета;
	СтрокаОбъект.Наименование=ГруппаРаскрытия.Имя;
	СтрокаОбъект.Код=ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(СтрокаОбъект.Наименование,,"СтрокиОтчетов");
	СтрокаОбъект.ГруппаРаскрытия=ГруппаРаскрытия.Ссылка;
	СтрокаОбъект.ПорядковыйНомер=Число(СтрЗаменить(ГруппаРаскрытия.ИмяОбласти,"R",""))-1;
	СтрокаОбъект.ОбменДанными.Загрузка=Истина;
	СтрокаОбъект.Записать();
	
	Возврат СтрокаОбъект.Ссылка;
		
КонецФункции // СформироватьСтрокуОтчета()

Функция СформироватьКолонкуОтчета(ВидОтчета,Наименование,ТипЗначения,ПорядковыйНомер)
	
	КолонкаОбъект=Справочники.КолонкиОтчетов.СоздатьЭлемент();
	КолонкаОбъект.Владелец=ВидОтчета;
	КолонкаОбъект.Наименование=Наименование;
	КолонкаОбъект.Код=ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(КолонкаОбъект.Наименование,,"КолонкиОтчетов");
	КолонкаОбъект.ТипЗначения=ТипЗначения;
	КолонкаОбъект.ПорядковыйНомер=ПорядковыйНомер;
	КолонкаОбъект.ОбменДанными.Загрузка=Истина;
	КолонкаОбъект.Записать();
	
	Возврат КолонкаОбъект.Ссылка;
	
КонецФункции // СформироватьКолонкуОтчета() 

Функция СформироватьТекстФормулы(Дерево, ОперандыОбласти, ИсточникиРасчетов)
	
	Возврат СформироватьТекстВыражения(Дерево.Строки, ОперандыОбласти, ИсточникиРасчетов);
	
КонецФункции

Функция СформироватьТекстВыражения(Строки, ОперандыОбласти, ИсточникиРасчетов, Разделитель = ", ")
	
	ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ = "Обработка.ИмпортВидовОтчетовИзЭлектронныхТаблицMicrosoftExcel.МодульМенеджера.СформироватьТекстВыражения";
	
	Текст = "";
	
	Для Каждого Строка Из Строки Цикл
		
		Тип = Строка.Тип;
		ТекстСтроки = "";
		
		Если Тип = "Операнд_НЕОПРЕДЕЛЕНО" ИЛИ Тип = "Операнд_Интервал" Тогда
			
			ОперандыСтроки = ОперандыОбласти.Получить(Строка.Индекс);
			Если ОперандыСтроки = Неопределено Тогда
				ТекстСтроки = "[ОШИБКА]";
			Иначе
				Для Каждого ОперандСтроки Из ОперандыСтроки Цикл
					Код = ИсточникиРасчетов[ОперандСтроки.Ключ];
					Если Код = Неопределено Тогда
						Код = "ОШИБКА"
					КонецЕсли;
					ТекстСтроки = ТекстСтроки + Разделитель + "[" + Код + "]";
				КонецЦикла;
				ТекстСтроки = Сред(ТекстСтроки, СтрДлина(Разделитель) + 1);
			КонецЕсли;
			
		ИначеЕсли Тип = "Выражение" Тогда
			
			ТекстСтроки = СформироватьТекстВыражения(Строка.Строки, ОперандыОбласти, ИсточникиРасчетов, Разделитель);
			Если Строка.Строки.Количество() > 1 Тогда
				ТекстСтроки = "(" + ТекстСтроки + ")";
			КонецЕсли;
			
		ИначеЕсли Тип = "Функция" Тогда
			
			Имя = Строка.Значение;
			Если Имя = "SUM" Тогда
				ТекстСтроки = "(" + СформироватьТекстВыражения(Строка.Строки, ОперандыОбласти, ИсточникиРасчетов, " + ") + ")";
			ИначеЕсли Имя = "IF" Тогда
				ТекстСтроки = "?(" + СформироватьТекстВыражения(Строка.Строки, ОперандыОбласти, ИсточникиРасчетов) + ")";
			ИначеЕсли Имя = "OR" Тогда
				ТекстСтроки = "(" + СформироватьТекстВыражения(Строка.Строки, ОперандыОбласти, ИсточникиРасчетов, " ИЛИ ") + ")";
			ИначеЕсли Имя = "AND" Тогда
				ТекстСтроки = "(" + СформироватьТекстВыражения(Строка.Строки, ОперандыОбласти, ИсточникиРасчетов, " И ") + ")";
			ИначеЕсли Имя = "LEFT" Тогда
				ТекстСтроки = "Лев(" + СформироватьТекстВыражения(Строка.Строки, ОперандыОбласти, ИсточникиРасчетов) + ")";
			Иначе
				ПротоколируемыеСобытияУХ.ДобавитьЗаписьПредупреждение(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,,, "Не возможно преобразовать функцию: " + Имя);
				ТекстСтроки = Имя + "(" + СформироватьТекстВыражения(Строка.Строки, ОперандыОбласти, ИсточникиРасчетов) + ")";
			КонецЕсли;
			
		ИначеЕсли Тип = "Разделитель" Тогда
			ТекстСтроки = Разделитель;
		ИначеЕсли Тип = "Ошибка" Тогда
			ТекстСтроки = "[ОШИБКА]";
		Иначе
			ТекстСтроки = Строка.Значение
		КонецЕсли;
		
		Текст = Текст + ТекстСтроки;
		
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции

// ПРОЧЕЕ

Процедура ВставитьВСоответствие(Соответствие, Ключ, Значение = Истина)
	
	Если Соответствие.Получить(Ключ) = Неопределено Тогда
		Соответствие.Вставить(Ключ, Значение);
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли