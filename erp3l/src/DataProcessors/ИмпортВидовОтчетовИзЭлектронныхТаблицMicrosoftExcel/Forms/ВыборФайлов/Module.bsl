
&НаКлиенте
Перем Excel;

&НаКлиенте
Перем Excel_Настройки;

// УПРАВЛЕНИЕ ФОРМОЙ

&НаКлиенте
Процедура ВидимостьДоступность()
	
	СтраницаОшибки = Excel = Неопределено;
	Если НЕ (Элементы.Страницы_Пояснение.ТекущаяСтраница = Элементы.Страница_ExcelНеНайден) = СтраницаОшибки Тогда
		Если СтраницаОшибки Тогда
			Элементы.Страницы_Пояснение.ТекущаяСтраница = Элементы.Страница_ExcelНеНайден;
		Иначе
			Элементы.Страницы_Пояснение.ТекущаяСтраница = Элементы.Страница_Основная;
		КонецЕсли;
	КонецЕсли;
	
	ФайлыКоличествоБольшеНуля = Файлы.ПолучитьЭлементы().Количество() > 0;
	
	Кнопка_ЗагрузитьДоступность = ФайлыКоличествоБольшеНуля;
	Если НЕ Элементы.Кнопка_Загрузить.Доступность = Кнопка_ЗагрузитьДоступность Тогда
		Элементы.Кнопка_Загрузить.Доступность = Кнопка_ЗагрузитьДоступность;
	КонецЕсли;
	
	УказатьПарольДоступность = ФайлыКоличествоБольшеНуля;
	Если НЕ Элементы.УказатьПароль.Доступность = УказатьПарольДоступность Тогда
		Элементы.УказатьПароль.Доступность = УказатьПарольДоступность;
	КонецЕсли;
	
	ПометкаПоказыватьУдаленныеЛисты = РежимПоказыватьУдаленныеЛисты;
	Если НЕ Элементы.ПоказыватьУдалённыеЛисты.Пометка = ПометкаПоказыватьУдаленныеЛисты Тогда
		Элементы.ПоказыватьУдалённыеЛисты.Пометка = ПометкаПоказыватьУдаленныеЛисты;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьУдаленныеЛисты(Показать)
	
	Если Показать Тогда
		Для Каждого Строка Из Файлы.ПолучитьЭлементы() Цикл
			Если Строка.УдаленныеЛисты.Количество() Тогда
								
				Список = Новый СписокЗначений;
				Строки = Новый Соответствие;
				Для Каждого УдаленныйЛист Из Строка.УдаленныеЛисты Цикл
					Список.Добавить(УдаленныйЛист.Индекс);
					Строки.Вставить(УдаленныйЛист.Индекс, УдаленныйЛист);
				КонецЦикла;
				Список.СортироватьПоЗначению();
				Для Каждого ЭлементСписка Из Список Цикл
					СтрокаЛист = Строка.ПолучитьЭлементы().Вставить(ЭлементСписка.Значение);
					ЗаполнитьЗначенияСвойств(СтрокаЛист, Строки.Получить(ЭлементСписка.Значение));
					СтрокаЛист.Тип = 3;
				КонецЦикла; 
				
			КонецЕсли;
		КонецЦикла; 
	Иначе
		Для Каждого Строка Из Файлы.ПолучитьЭлементы() Цикл
			Если Строка.УдаленныеЛисты.Количество() Тогда
				Удаляемые = Новый Массив;
				Для Каждого СтрокаЛист Из Строка.ПолучитьЭлементы() Цикл
					Если СтрокаЛист.Тип = 3 Тогда
						Удаляемые.Добавить(СтрокаЛист);
					КонецЕсли;
				КонецЦикла; 
				Для Каждого СтрокаЛист Из Удаляемые Цикл
					Строка.ПолучитьЭлементы().Удалить(СтрокаЛист);
				КонецЦикла; 
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РежимПоказыватьУдаленныеЛисты = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Попытка
		Excel = ОбщегоНазначенияMicrosoftExcelКлиентСерверУХ.Создать(Excel_Настройки);
	Исключение
		Excel = Неопределено;
	КонецПопытки;
		
	ВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И НажатаКнопкаЗагрузить Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НажатаКнопкаЗагрузить Тогда
		
		ТД = ТекущаяДата();
		
		НажатаКнопкаЗагрузить = Ложь;
		
		//ФормаОжидания = ПолучитьФорму("ОбщаяФорма.ВыполнениеОчередиФоновыхЗаданий",,, КлючЗадания);
		
		АдресацияКниг = КонвертироватьВXML(КлючЗадания);
		
		ЕстьОшибки = АдресацияКниг = Неопределено;
				
		Если ЕстьОшибки Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(, "Во время проверки файлов произошла ошибка.
			|Подробная информация содержится в журнале регистрации.");
			//ФормаОжидания.ЗакрытьБезВопросов();			
			Возврат;
		КонецЕсли;
				
		ВычитатьКнигиНаСервере(АдресацияКниг, КлючЗадания);
		
		ФормаПросмотрБланковМодифицированность = Файлы.ПолучитьЭлементы().Количество() > 1 ИЛИ Файлы.ПолучитьЭлементы()[0].Тип = 0;
		
		ФормаПросмотрБланков = ПолучитьФорму("Обработка.ИмпортВидовОтчетовИзЭлектронныхТаблицMicrosoftExcel.Форма.ПросмотрБланков", Новый Структура("ПараметрыАдресации,Модифицированность", АдресацияКниг, ФормаПросмотрБланковМодифицированность), ВладелецФормы, Истина);
	
		АдресСтруктурыКниг = ФормаПросмотрБланков.АдресСтруктурыКниг;
		
		АдресаРезультатов = Новый Массив;
		Для Каждого СтрокаФайл Из Файлы.ПолучитьЭлементы() Цикл
			АдресаРезультатов.Добавить(СтрокаФайл.АдресРезультата);
		КонецЦикла;
		
		СформироватьСтруктуруКниг(АдресаРезультатов, АдресСтруктурыКниг, АдресацияКниг);
		
		//ОткрытьФорму("Обработка.ИмпортВидовОтчетовИзЭлектронныхТаблицMicrosoftExcel.Форма.ПросмотрБланков", Новый Структура("АдресСтруктурыКниг,ПараметрыАдресации", АдресСтруктурыКниг, АдресацияКниг), ВладелецФормы, Истина);
		ФормаПросмотрБланков.ПередОткрытиемНаСервере();
		ФормаПросмотрБланков.Открыть();
		
		//Сообщить("Время выполнения - " + (ТекущаяДата()-ТД) + " сек.");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если НЕ Excel = Неопределено Тогда
		Попытка
			ОбщегоНазначенияMicrosoftExcelКлиентСерверУХ.Закрыть(Excel, Excel_Настройки);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// КОМАНДЫ ФОРМЫ

&НаКлиенте
Процедура УказатьПароль(Команда)
	
	Пароль = "";
	ДопПараметры = Новый Структура("Пароль", Пароль);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_УказатьПарольЗавершение", ЭтотОбъект, ДопПараметры);
	ПоказатьВводЗначения(ОписаниеОповещения, Пароль, "Пароль");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УказатьПарольЗавершение(Значение, ДополнительныеПараметры) Экспорт
    
    Пароль = ?(Значение = Неопределено, ДополнительныеПараметры.Пароль, Значение);
        
    Если (Значение <> Неопределено) Тогда
        
        Если СтрДлина(Пароль) > 255 Тогда
            Пароль = Лев(Пароль, 255);
        КонецЕсли;
        
        Если Элементы.Файлы.ВыделенныеСтроки.Количество() > 1 Тогда
            Для Каждого ИдентификаторСтроки Из Элементы.Файлы.ВыделенныеСтроки Цикл
                Файлы.НайтиПоИдентификатору(ИдентификаторСтроки).Пароль = Пароль;
            КонецЦикла;
        Иначе
            Для Каждого СтрокаФайл Из Файлы.ПолучитьЭлементы() Цикл
                СтрокаФайл.Пароль = Пароль;
            КонецЦикла;
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдалённыеЛисты(Команда)
	
	РежимПоказыватьУдаленныеЛисты = НЕ РежимПоказыватьУдаленныеЛисты;
	
	ПоказатьСкрытьУдаленныеЛисты(РежимПоказыватьУдаленныеЛисты);
	
	ВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	ИменаКниг = Новый Соответствие;
	ЕстьДвойные = Ложь;
	
	Для Каждого СтрокаФайл Из Файлы.ПолучитьЭлементы() Цикл
		Если СтрокаФайл.Тип = 0 Тогда
			ИмяКниги = СтрокаФайл.Представление;
			Если ИменаКниг.Получить(ИмяКниги) = Неопределено Тогда
				ИменаКниг.Вставить(ИмяКниги, 1);
			Иначе
				ИменаКниг.Вставить(ИмяКниги, ИменаКниг.Получить(ИмяКниги) + 1);
				ЕстьДвойные = Истина;
			КонецЕсли;
		Иначе
			Для Каждого СтрокаКнига Из СтрокаФайл.ПолучитьЭлементы() Цикл
				Если СтрокаКнига.Тип = 3 Тогда
					Продолжить;
				КонецЕсли;
				ИмяКниги = СтрокаКнига.Имя;
				Если ИменаКниг.Получить(ИмяКниги) = Неопределено Тогда
					ИменаКниг.Вставить(ИмяКниги, 1);
				Иначе
					ИменаКниг.Вставить(ИмяКниги, ИменаКниг.Получить(ИмяКниги) + 1);
					ЕстьДвойные = Истина;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьДвойные Тогда
		Для Каждого Книга Из ИменаКниг Цикл
			Если Книга.Значение > 1 Тогда
				Сообщить("Книга """ + Книга.Ключ + """ встречается " + НРег(ЧислоПрописью(Книга.Значение, , "раз,раза,раз,м,,,,,0")));
			КонецЕсли;
		КонецЦикла; 
		Возврат;
	КонецЕсли;
	
	НажатаКнопкаЗагрузить = Истина;
	
	КлючЗадания = Строка(Новый УникальныйИдентификатор);
	
	//ПараметрыФормыОжидания = Новый Структура;
	//ПараметрыФормыОжидания.Вставить("Заголовок", "Импорт бланков отчетов из электронных таблиц Microsoft Excel");
	//ПараметрыФормыОжидания.Вставить("Состояние", "Этап 1 из 3: проверка файлов");
	//ПараметрыФормыОжидания.Вставить("ОтображатьПрогресс", Истина);
	//ПараметрыФормыОжидания.Вставить("КлючЗадания", КлючЗадания);
	//
	//ФормаОжидания = ОткрытьФорму("ОбщаяФорма.ВыполнениеОчередиФоновыхЗаданий", ПараметрыФормыОжидания,, КлючЗадания);
	
	Закрыть();
	
КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ФайлыПриИзменении(Элемент)
	
	ВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	ВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	ВыбратьФайл();
		
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Для Каждого ИдентификаторСтроки Из Элементы.Файлы.ВыделенныеСтроки Цикл
		Строка = Файлы.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если Строка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Строка.Тип < 2 Тогда
			Файлы.ПолучитьЭлементы().Удалить(Строка);
		Иначе
			Если Строка.Тип = 3 Тогда
				ПрообразСтроки = Строка.ПолучитьРодителя().УдаленныеЛисты.НайтиСтроки(Новый Структура("Имя", Строка.Имя))[0];
				Строка.Тип = ПрообразСтроки.Тип;
				Если Строка.Тип = 4 Тогда
					Для Каждого Лист Из ПрообразСтроки.Листы Цикл
						СтрокаЛист = Строка.ПолучитьЭлементы().Добавить();
						СтрокаЛист.Имя = Лист.Значение;
						СтрокаЛист.Тип = 5;
					КонецЦикла; 
				КонецЕсли;
				Строка.ПолучитьРодителя().УдаленныеЛисты.Удалить(ПрообразСтроки);
			ИначеЕсли НЕ Строка.Тип = 5 Тогда
				ПрообразСтроки = Строка.ПолучитьРодителя().УдаленныеЛисты.Добавить();
				ЗаполнитьЗначенияСвойств(ПрообразСтроки, Строка);
				Если Строка.Тип = 5 Тогда
					Для Каждого СтрокаЛист Из Строка.ПолучитьЭлементы() Цикл
						ПрообразСтроки.Листы.Добавить(СтрокаЛист.Имя);
					КонецЦикла; 
				КонецЕсли;
				Если НЕ РежимПоказыватьУдаленныеЛисты Тогда
					Строка.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Строка);
				Иначе
					Если Строка.Тип = 4 Тогда
						Строка.ПолучитьЭлементы().Очистить();
					КонецЕсли;
					Строка.Тип = 3;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыИмяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	ВыбратьФайл(ТекущиеДанные.Имя, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыИмяОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные.Тип = 0 Тогда
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ФайлыИмяОткрытиеЗавершение", ЭтотОбъект), Элементы.Файлы.ТекущиеДанные.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыИмяОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
    
    

КонецПроцедуры

&НаКлиенте
Процедура ФайлыИмяОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// ОБСЛУЖИВАНИЕ ОБРАБОТЧИКОВ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ВыбратьФайл(ПолноеИмяФайла = "", ТекущиеДанные = Неопределено)
	
	МножественныйВыбор = (ТекущиеДанные = Неопределено);
	Фильтр = ?(Excel = Неопределено, "", "Все импортируемые файлы (*.xls, *.xlsx, *.hm)|*.xls; *.xlsx; *.hm|Листы Microsoft Excel (*.xls, *.xlsx)|*.xls; *.xlsx|") + "Файлы Управления Холдингом (*.hm)|*.hm|Все файлы (*.*)|*.*";
	
	ДиалогВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыборФайла.Заголовок = "Выбор файлов";
	ДиалогВыборФайла.ПолноеИмяФайла = ПолноеИмяФайла;
	ДиалогВыборФайла.МножественныйВыбор = МножественныйВыбор;
	ДиалогВыборФайла.Фильтр = Фильтр;
	
	ДопПараметры = Новый Структура("ДиалогВыборФайла, МножественныйВыбор, ТекущиеДанные", 
									ДиалогВыборФайла, МножественныйВыбор, ТекущиеДанные);									
	Оповещение = Новый ОписаниеОповещения("ВыбратьФайлЗавершение", ЭтотОбъект, ДопПараметры);
	ДиалогВыборФайла.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
    
    ДиалогВыборФайла 	= ДополнительныеПараметры.ДиалогВыборФайла;
    МножественныйВыбор 	= ДополнительныеПараметры.МножественныйВыбор;
    ТекущиеДанные 		= ДополнительныеПараметры.ТекущиеДанные;    
    
    Если (ВыбранныеФайлы <> Неопределено) Тогда
        
        Если МножественныйВыбор Тогда
            Для Каждого ВыбранныйФайл Из ДиалогВыборФайла.ВыбранныеФайлы Цикл
                ДобавитьФайлКаталог(ВыбранныйФайл);
            КонецЦикла;
        Иначе
            ИдентификаторСтроки = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ИдентификаторСтроки);
            ДобавитьФайлКаталог(ДиалогВыборФайла.ПолноеИмяФайла, ИдентификаторСтроки);
        КонецЕсли;
        
    КонецЕсли;
    
    ПодключитьОбработчикОжидания("ВидимостьДоступность", 5, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлКаталог(ФайлКаталог, ИдентификаторСтроки = Неопределено, ИскатьВПодкаталогах = Ложь)
	
	Если ТипЗнч(ФайлКаталог) = Тип("Строка") Тогда
		ФайлКаталог = Новый Файл(ФайлКаталог);
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ИдентификаторСтроки, ИскатьВПодкаталогах, ФайлКаталог", 
									ИдентификаторСтроки, ИскатьВПодкаталогах, ФайлКаталог);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ДобавитьФайлКаталог_ФайлСуществует", ЭтотОбъект, ДопПараметры);
	
	ФайлКаталог.НачатьПроверкуСуществования(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДобавитьФайлКаталог_ФайлСуществует(Существует, ДополнительныеПараметры) Экспорт
    
    Если Существует Тогда
		
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ДобавитьФайлКаталог_ЭтоКаталог", ЭтотОбъект, ДополнительныеПараметры);
        ДополнительныеПараметры.ФайлКаталог.НачатьПроверкуЭтоКаталог(Оповещение);
        
    Иначе
		
		Сообщить("Файл(каталог) <" + ДополнительныеПараметры.ФайлКаталог.ПолноеИмя + "> не существует.");
		
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДобавитьФайлКаталог_ЭтоКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
    
    ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
    ИскатьВПодкаталогах = ДополнительныеПараметры.ИскатьВПодкаталогах;
    ФайлКаталог 		= ДополнительныеПараметры.ФайлКаталог;
    
    Если ЭтоКаталог Тогда
        
        Фильтры = Новый Массив;
        Фильтры.Добавить("*.xls");
        Фильтры.Добавить("*.xlsx");
        
        Для Каждого Фильтр Из Фильтры Цикл
            
            ДопПараметры = Новый Структура("Фильтр", Фильтр);
            Оповещение = Новый ОписаниеОповещения("Подключаемый_ДобавитьФайлКаталог_НайтиФайлы", ЭтотОбъект, ДопПараметры);
			
			НачатьПоискФайлов(Оповещение, ФайлКаталог.ПолноеИмя, Фильтр, ИскатьВПодкаталогах);
            
        КонецЦикла;
        
    Иначе
        
        ДобавитьФайл(ИдентификаторСтроки, ФайлКаталог);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДобавитьФайлКаталог_НайтиФайлы(НайденныеФайлы, ДополнительныеПараметры) Экспорт
    
    Для Каждого ФайлКаталога Из НайденныеФайлы Цикл
        
        ДопПараметры = Новый Структура("ФайлКаталога, Фильтр", ФайлКаталога, ДополнительныеПараметры.Фильтр);
        Оповещение = Новый ОписаниеОповещения("Подключаемый_ДобавитьФайлКаталог_ПолучитьНевидимость", ЭтотОбъект, ДопПараметры);
        
        ФайлКаталога.НачатьПолучениеНевидимости(Оповещение);
        
    КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДобавитьФайлКаталог_ПолучитьНевидимость(Невидимый, ДополнительныеПараметры) Экспорт
    
    ФайлКаталога = ДополнительныеПараметры.ФайлКаталога;
	
	Если НЕ Невидимый Тогда
        Если НРег(ФайлКаталога.Расширение) = Прав(ДополнительныеПараметры.Фильтр, СтрДлина(ФайлКаталога.Расширение)) Тогда
            ДобавитьФайлКаталог(ФайлКаталога);
        КонецЕсли;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(ИдентификаторСтроки, Файл)
        
    УжеДобавлен = Ложь;
    Для Каждого Элемент Из Файлы.ПолучитьЭлементы() Цикл
        Если Элемент.Представление = Файл.Имя Тогда
            УжеДобавлен = Истина;
            Прервать;
        КонецЕсли;
    КонецЦикла; 
    
    Если УжеДобавлен Тогда
        Сообщить("Файл " + Файл.Имя + " уже содержится в списке.");
    Иначе
        
        Если ИдентификаторСтроки = Неопределено Тогда
            СтрокаФайл = Файлы.ПолучитьЭлементы().Добавить();
		Иначе
			СтрокаФайл = Файлы.НайтиПоИдентификатору(ИдентификаторСтроки);
        КонецЕсли;
        
        СтрокаФайл.Имя = Файл.ПолноеИмя;
        СтрокаФайл.Представление = Файл.Имя;
        
        Если НРег(Файл.Расширение) = ".xls" ИЛИ НРег(Файл.Расширение) = ".xlsx" Тогда
            
            СтрокаФайл.Тип = 0;
            
            ЭлементыЛисты = СтрокаФайл.ПолучитьЭлементы();
            ЭлементыЛисты.Очистить();
            
			//Попытка
                
                Workbook = Excel.Workbooks.Open(СтрокаФайл.Имя, 0, True);
                For Each Sheet In Workbook.Sheets Do
                    
                    СтрокаЛист = ЭлементыЛисты.Добавить();
                    СтрокаЛист.Тип = 2;
                    СтрокаЛист.Имя = Sheet.Name;
                    СтрокаЛист.ЛистЗащищен = Sheet.ProtectContents;
                    СтрокаЛист.Индекс = ЭлементыЛисты.Индекс(СтрокаЛист);
                    
                EndDo;
                
                Workbook.Close(False);
				Workbook=Неопределено;
				Sheet=Неопределено;
                
			//Исключение
			//    Сообщить("Ошибка при чтении файла " + Файл.ПолноеИмя + ". " + ОписаниеОшибки());
			//    Файлы.ПолучитьЭлементы().Удалить(СтрокаФайл);
			//    Workbook.Close(False);
			//КонецПопытки;
            
        Иначе
            
            ИмяВременнойПапки = ОбщегоНазначенияКлиентСерверУХ.ПолучитьИмяВременногоФайлаУниверсально();
            
            СтрокаФайл.Тип = 1;
            Попытка
                
                ЧтениеZipФайла = Новый ЧтениеZipФайла(Файл.ПолноеИмя);
				#Если Не ВебКлиент Тогда
					СоздатьКаталог(ИмяВременнойПапки);
				#КонецЕсли				
                ЧтениеZipФайла.Извлечь(ЧтениеZipФайла.Элементы.Найти("Info.xml"), ИмяВременнойПапки);
                ЧтениеXML = Новый ЧтениеXML();
                ЧтениеXML.ОткрытьФайл(ИмяВременнойПапки + "\Info.xml");
                
                #Если ВебКлиент Тогда
                    Сериализатор = ПолучитьСериализаторФабрики();	
                #Иначе
                    Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);	
                #КонецЕсли
                
                Info = Сериализатор.ПрочитатьXML(ЧтениеXML);
                ЧтениеXML.Закрыть();
                
                Если Info.Name = "ИмпортВидовОтчетов" Тогда
                    
                    ИмяФайлаКниги = ОбщегоНазначенияКлиентСерверУХ.ПолучитьИмяВременногоФайлаУниверсально();
                    ЧтениеZipФайла.Извлечь(ЧтениеZipФайла.Элементы.Найти("Книги.xml"), ИмяВременнойПапки);
                    ЧтениеXML.ОткрытьФайл(ИмяВременнойПапки + "\Книги.xml");
                    Книги = Сериализатор.ПрочитатьXML(ЧтениеXML);
                    ЧтениеXML.Закрыть();
                    
                    ЭлементыКниги = СтрокаФайл.ПолучитьЭлементы();
                    Для Каждого Книга Из Книги Цикл
                        СтрокаКнига = ЭлементыКниги.Добавить();
                        СтрокаКнига.Тип = 4;
                        СтрокаКнига.Имя = Книга.Значение.Имя;
                        СтрокаКнига.Индекс = ЭлементыКниги.Индекс(СтрокаКнига);
                        
                        ЭлементыЛисты = СтрокаКнига.ПолучитьЭлементы();
                        Для Каждого Лист Из Книга.Значение.Листы_ Цикл
                            СтрокаЛист = ЭлементыЛисты.Добавить();
                            СтрокаЛист.Тип = 5;
                            СтрокаЛист.Имя = Лист.Ключ;
                        КонецЦикла;
                        
                    КонецЦикла; 
                    
                КонецЕсли;
                
            Исключение
				
				Файлы.ПолучитьЭлементы().Удалить(СтрокаФайл);
                Сообщить("Ошибка при чтении файла " + Файл.ПолноеИмя + ". " + ОписаниеОшибки());
                ЧтениеZipФайла = "";
                Попытка
                    ЧтениеXML.Закрыть();
                Исключение
				КонецПопытки;
				
            КонецПопытки;
			
			ДопПараметры = Новый Структура("СтрокаФайл", СтрокаФайл);
			Оповещение = Новый ОписаниеОповещения("ДобавитьФайлЗавершение", ЭтотОбъект, ДопПараметры);
			
			НачатьУдалениеФайлов(Оповещение, ИмяВременнойПапки);
			
			Возврат;
            
        КонецЕсли;
        
        Элементы.Файлы.Развернуть(СтрокаФайл.ПолучитьИдентификатор());
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлЗавершение(ДополнительныеПараметры) Экспорт    
    Элементы.Файлы.Развернуть(ДополнительныеПараметры.СтрокаФайл.ПолучитьИдентификатор());
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСериализаторФабрики()
	Возврат Новый СериализаторXDTO(ФабрикаXDTO);
КонецФункции

// УПРАВЛЕНИЕ ЗАГРУЗКОЙ

&НаКлиенте
Функция КонвертироватьВXML(КлючЗадания)
	
	БылиОшибки = Ложь;
	
	ИндексЛиста = 0;
	АдресацияКниг = Новый Соответствие; // [{ ИмяКниги, [{ ИмяЛиста, АдресЛиста) }] }]
	
	ИменаКниг = Новый Соответствие;     // [{ АдресЛиста, ИмяКниги }]
	ИменаЛистов = Новый Соответствие;   // [{ АдресЛиста, ИмяЛиста }]
	
	// http://office.microsoft.com/en-us/excel-help/excel-specifications-and-limits-HP010342495.aspx
	РазмерЛиста = (1 + 1048576) * (1 + 16384);
	
	Если НЕ РежимПоказыватьУдаленныеЛисты Тогда
		ПоказатьСкрытьУдаленныеЛисты(Истина);
	КонецЕсли;
	
	Попытка
		
		//ИндексКниги = 0;
		
		ПостфиксФайла = Строка(Новый УникальныйИдентификатор) + ".xml";
		
		Для Каждого СтрокаФайл Из Файлы.ПолучитьЭлементы() Цикл
			
			Если СтрокаФайл.Тип = 0 Тогда
								
				ИмяКниги = СтрокаФайл.Представление;
				
				АдресацияЛистов = Новый Соответствие;
				АдресацияКниг.Вставить(ИмяКниги, АдресацияЛистов);
				
				Попытка
					Workbook = Excel.Workbooks.Open(СтрокаФайл.Имя, 0, True);
				Исключение
					ОписаниеОшибки = "Не удалось открыть файл """ + СтрокаФайл.Имя + """" + Символы.ПС + ОписаниеОшибки();
					Workbook.Close(False);
					Workbook=Неопределено;
					БылиОшибки = Истина;
					Прервать;
				КонецПопытки;
				
				Для Каждого СтрокаЛист Из СтрокаФайл.ПолучитьЭлементы() Цикл
					
					Если СтрокаЛист.Тип = 3 Тогда
						Попытка
							Workbook.Sheets(СтрокаЛист.Имя).Delete();
						Исключение
						КонецПопытки;
						Продолжить;
					КонецЕсли;
					
					АдресЛиста = ИндексЛиста * РазмерЛиста;
					ИндексЛиста = ИндексЛиста + 1;
					
					АдресацияЛистов.Вставить(СтрокаЛист.Имя, АдресЛиста);
					
					Если СтрокаЛист.ЛистЗащищен Тогда
						
						Если НЕ ПустаяСтрока(СтрокаЛист.Пароль) Тогда
							Пароль = СтрокаЛист.Пароль;
						ИначеЕсли НЕ ПустаяСтрока(СтрокаФайл.Пароль) Тогда
							Пароль = СтрокаФайл.Пароль;
						Иначе
							Пароль = "";
						КонецЕсли;
						
						Если НЕ ПустаяСтрока(Пароль) Тогда
							
							Попытка
								Sheet = Workbook.Sheets(СтрокаЛист.Имя);
							Исключение
								ОписаниеОшибки = "В файле """ + СтрокаФайл.Имя + """ не найден лист """ + СтрокаЛист.Имя + """" + Символы.ПС + ОписаниеОшибки();
								БылиОшибки = Истина;
								Прервать;
							КонецПопытки;
							
							Попытка
								Sheet.Unprotect(Пароль);
							Исключение
								ОписаниеОшибки = "Для файла """ + СтрокаФайл.Имя + """ указан неверный пароль защиты листа """ + СтрокаЛист.Имя + """" + Символы.ПС + ОписаниеОшибки();
								БылиОшибки = Истина;
								Прервать;
							КонецПопытки;
							
						КонецЕсли;
						
					КонецЕсли;
					
					ИменаКниг.Вставить(АдресЛиста, ИмяКниги);
					ИменаЛистов.Вставить(АдресЛиста, СтрокаЛист.Имя);
					
					Sheet=Неопределено;
					
				КонецЦикла;
				
				Если БылиОшибки Тогда
					Прервать;
				КонецЕсли;
				
				ИмяФайлаXML = СтрокаФайл.Имя + "." + ПостфиксФайла;
				
				Workbook.SaveAs(ИмяФайлаXML, 46);
				Workbook.Close(False);
				Workbook=Неопределено;
				
				ИмяZipФайла = ОбщегоНазначенияКлиентСерверУХ.ПолучитьИмяВременногоФайлаУниверсально();
				ЗаписьZipФайла = Новый ЗаписьZipФайла(ИмяZipФайла);
				ЗаписьZipФайла.Добавить(ИмяФайлаXML);
				ЗаписьZipФайла.Добавить(СтрокаФайл.Имя);
				ЗаписьZipФайла.Записать();
				
				#Если ВебКлиент Тогда
					НачатьУдалениеФайлов(, ИмяФайлаXML);	
				#Иначе	
					УдалитьФайлы(ИмяФайлаXML);
				#КонецЕсли
				
				ДвоичныеДанные = Новый ДвоичныеДанные(ИмяZipФайла);
				
				#Если ВебКлиент Тогда
					НачатьУдалениеФайлов(, ИмяZipФайла);
				#Иначе	
					УдалитьФайлы(ИмяZipФайла);
				#КонецЕсли
				
				СтрокаФайл.Размер = ДвоичныеДанные.Размер();
				СтрокаФайл.АдресДанных = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
				СтрокаФайл.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
								
			Иначе
				
				ДвоичныеДанные = Новый ДвоичныеДанные(СтрокаФайл.Имя);
				СтрокаФайл.Размер = ДвоичныеДанные.Размер();
				СтрокаФайл.АдресДанных = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
				СтрокаФайл.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
				
				Для Каждого СтрокаКнига Из СтрокаФайл.ПолучитьЭлементы() Цикл
					
					Если СтрокаКнига.Тип = 3 Тогда
						Продолжить;
					КонецЕсли;
					
					ИмяКниги = СтрокаКнига.Имя;
					
					АдресацияЛистов = Новый Соответствие;
					АдресацияКниг.Вставить(ИмяКниги, АдресацияЛистов);
					
					Для Каждого СтрокаЛист Из СтрокаКнига.ПолучитьЭлементы() Цикл
						
						АдресЛиста = ИндексЛиста * РазмерЛиста;
						ИндексЛиста = ИндексЛиста + 1;
						
						ИмяЛиста = СтрокаЛист.Имя;
						
						АдресацияЛистов.Вставить(ИмяЛиста, АдресЛиста);
						
						ИменаКниг.Вставить(АдресЛиста, ИмяКниги);
						ИменаЛистов.Вставить(АдресЛиста, ИмяЛиста);
						
					КонецЦикла; 
					
				КонецЦикла; 
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		БылиОшибки = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Если НЕ РежимПоказыватьУдаленныеЛисты Тогда
		ПоказатьСкрытьУдаленныеЛисты(Ложь);
	КонецЕсли;
	
	Если БылиОшибки Тогда
		Сообщить("При конвертации файлов Microsoft Excel возникла ошибка: " + ОписаниеОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	АдресацияКниг.Вставить(0, ИменаКниг);
	АдресацияКниг.Вставить(1, ИменаЛистов);
	
	Возврат АдресацияКниг;
	
КонецФункции

&НаСервере
Функция ВычитатьКнигиНаСервере(Знач АдресацияКниг, Знач КлючЗадания)
	
	ДанныеФайлов = Новый Массив;
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("АдресДанных");
	ТаблицаФайлов.Колонки.Добавить("Представление");
	ТаблицаФайлов.Колонки.Добавить("АдресРезультата");
	ТаблицаФайлов.Колонки.Добавить("Размер");
	ТаблицаФайлов.Колонки.Добавить("Тип");
	
	СоставСохраненныхМоделей = Новый Соответствие;
	
	Для Каждого СтрокаФайл Из Файлы.ПолучитьЭлементы() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаФайлов.Добавить(), СтрокаФайл);
		Если СтрокаФайл.Тип = 1 Тогда
			СоставСохраненнойМодели = Новый Соответствие;
			Для Каждого СтрокаКнига Из СтрокаФайл.ПолучитьЭлементы() Цикл
				Если СтрокаКнига.Тип = 3 Тогда
					Продолжить;
				КонецЕсли;
				СоставСохраненнойМодели.Вставить(СтрокаКнига.Имя, Истина);
			КонецЦикла; 
			СоставСохраненныхМоделей.Вставить(СтрокаФайл.Представление, СоставСохраненнойМодели);
		КонецЕсли;
	КонецЦикла; 
	
	ТаблицаФайлов.Сортировать("Размер Убыв");
	
	ТаблицаФайлов.Колонки.Добавить("Данные", Новый ОписаниеТипов("ДвоичныеДанные"));
	
	Для Каждого Строка Из ТаблицаФайлов Цикл
		Строка.Данные = ПолучитьИзВременногоХранилища(Строка.АдресДанных);
	КонецЦикла;
	
	ТаблицаФайлов.Колонки.Удалить("АдресДанных");
	
	АдресацияКниг.Вставить(3, НеПрименятьЭвристическийАнализПриЗагрузке);
	АдресацияКниг.Вставить(4, СоставСохраненныхМоделей);
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ТаблицаФайлов);
	ПараметрыЗадания.Добавить(АдресацияКниг);
	ПараметрыЗадания.Добавить(КлючЗадания);
	
	Обработки.ИмпортВидовОтчетовИзЭлектронныхТаблицMicrosoftExcel.УправлениеЧтениемКниг(ПараметрыЗадания[0], ПараметрыЗадания[1], ПараметрыЗадания[2]);
	
КонецФункции

&НаСервереБезКонтекста
Процедура СформироватьСтруктуруКниг(Знач АдресаРезультатов, Знач АдресРезультата, Знач АдресацияКниг)
	
	ПоместитьВоВременноеХранилище(Обработки.ИмпортВидовОтчетовИзЭлектронныхТаблицMicrosoftExcel.ПолучитьСтруктуруКниг(АдресаРезультатов, АдресацияКниг), АдресРезультата);
	
КонецПроцедуры
