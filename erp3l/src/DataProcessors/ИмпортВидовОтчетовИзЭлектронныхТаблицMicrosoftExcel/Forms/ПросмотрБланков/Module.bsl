
// УПРАВЛЕНИЕ ФОРМОЙ

&НаКлиенте
Процедура ВидимостьДоступность()
	
	Если РежимКорзинка Тогда
		
		Если НЕ (Элементы.Страницы_Основные.ТекущаяСтраница = Элементы.Страница_Корзинка) = РежимКорзинка Тогда
			Элементы.Страницы_Основные.ТекущаяСтраница = Элементы.Страница_Корзинка;
		КонецЕсли;
		
	Иначе
		
		Если Бланк_Индекс = -1 Тогда
			
			Если Бланк_Тип = -1 Тогда
				Если НЕ Элементы.Страницы_Основные.ТекущаяСтраница = Элементы.Страница_Пустая Тогда
					Элементы.Страницы_Основные.ТекущаяСтраница = Элементы.Страница_Пустая;
				КонецЕсли;
			Иначе
				Если НЕ Элементы.Страницы_Основные.ТекущаяСтраница = Элементы.Страница_Файл Тогда
					Элементы.Страницы_Основные.ТекущаяСтраница = Элементы.Страница_Файл;
				КонецЕсли;
				ФайлТип3Доступность = Истина;
				Если Бланк_Тип = 0 Тогда
					Для Каждого Элемент Из Элементы.ВидыОтчетов.ТекущиеДанные.ПолучитьЭлементы() Цикл
						Если Элемент.ПолучитьЭлементы().Количество() > 0 Тогда
							ФайлТип3Доступность = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла; 
				КонецЕсли;
				Если НЕ (Элементы.Страницы_ФайлТип3.ТекущаяСтраница = Элементы.Страница_ФайлТип3Доступен) = ФайлТип3Доступность Тогда
					Элементы.Страницы_ФайлТип3.ТекущаяСтраница = ?(ФайлТип3Доступность, Элементы.Страница_ФайлТип3Доступен, Элементы.Страница_ФайлТип3НеДоступен);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Если Бланк_Тип = 4 Тогда
				
				Если НЕ Элементы.Страницы_Основные.ТекущаяСтраница = Элементы.Страница_ПравилаИмпорта Тогда
					Элементы.Страницы_Основные.ТекущаяСтраница = Элементы.Страница_ПравилаИмпорта;
				КонецЕсли;
				
			Иначе
				
				Если НЕ Элементы.Страницы_Основные.ТекущаяСтраница = Элементы.Страница_ВидОтчета Тогда
					Элементы.Страницы_Основные.ТекущаяСтраница = Элементы.Страница_ВидОтчета;
				КонецЕсли;
				
				Если НЕ (Элементы.Страницы_ГруппыРаскрытия_Видимость.ТекущаяСтраница = Элементы.Страница_ГруппыРаскрытия_Видимость_Истина) = (Бланк_Тип = 1) Тогда
					Если Бланк_Тип = 1 Тогда
						Элементы.Страницы_ГруппыРаскрытия_Видимость.ТекущаяСтраница = Элементы.Страница_ГруппыРаскрытия_Видимость_Истина;
					Иначе
						Элементы.Страницы_ГруппыРаскрытия_Видимость.ТекущаяСтраница = Элементы.Страница_ГруппыРаскрытия_Видимость_Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ (Элементы.Страницы_ПараметрыВидаОтчета_Видимость.ТекущаяСтраница = Элементы.Страница_ПараметрыВидаОтчета_Видимость_Истина) = (Бланк_Тип = 1) Тогда
					Если Бланк_Тип = 1 Тогда
						Элементы.Страницы_ПараметрыВидаОтчета_Видимость.ТекущаяСтраница = Элементы.Страница_ПараметрыВидаОтчета_Видимость_Истина;
					Иначе
						Элементы.Страницы_ПараметрыВидаОтчета_Видимость.ТекущаяСтраница = Элементы.Страница_ПараметрыВидаОтчета_Видимость_Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если Бланк_Тип = 1 Тогда
					СоздатьГруппуРаскрытияДоступность = НЕ Бланк_ТолькоПросмотр;
					Если НЕ СоздатьГруппуРаскрытияДоступность = Элементы.СоздатьГруппуРаскрытия.Доступность Тогда
						Элементы.СоздатьГруппуРаскрытия.Доступность = СоздатьГруппуРаскрытияДоступность;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	ДоступностьОсновныхЭлементов = НЕ РежимКорзинка;
	
	Если НЕ ДоступностьОсновныхЭлементов = Элементы.ФормаСоздатьВидыОтчетов.Доступность Тогда
		Элементы.ФормаСоздатьВидыОтчетов.Доступность = ДоступностьОсновныхЭлементов;
	КонецЕсли;
	
	Если НЕ ДоступностьОсновныхЭлементов = Элементы.ВидыОтчетов.Доступность Тогда
		Элементы.ВидыОтчетов.Доступность = ДоступностьОсновныхЭлементов;
	КонецЕсли;
	
	Если НЕ ДоступностьОсновныхЭлементов = Элементы.ИзменитьНастройкиИмпорта.Доступность Тогда
		Элементы.ИзменитьНастройкиИмпорта.Доступность = ДоступностьОсновныхЭлементов;
	КонецЕсли;
	
	Если НЕ Элементы.ФормаКнопкаКорзинка.Пометка = РежимКорзинка Тогда
		Элементы.ФормаКнопкаКорзинка.Пометка = РежимКорзинка;
	КонецЕсли;
	
КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЧислоДопАналитик=ПараметрыСеанса.ЧислоДопАналитик;
	
	Данные = Новый Структура;
	Данные.Вставить("ПараметрыАдресации", Параметры.ПараметрыАдресации);
	
	Модифицированность = Параметры.Модифицированность;
	
	АдресСтруктурыКниг = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	Бланк_Индекс = -1;
	
КонецПроцедуры

&НаСервере
Процедура ПередОткрытиемНаСервере() Экспорт
			
	СтруктураКниг = ПолучитьИзВременногоХранилища(АдресСтруктурыКниг);
	
	Если СтруктураКниг = Неопределено Тогда
		АдресСтруктурыКниг = "";
		Возврат;
	КонецЕсли;
	
	Данные.Вставить("Книги", СтруктураКниг.Книги);
	Данные.Вставить("Листы", СтруктураКниг.Листы);
	
	АдресаТабличныхДокументов = Новый Соответствие;
	Для Каждого ДокументКЗ Из СтруктураКниг.ТабличныеДокументы Цикл
		АдресаТабличныхДокументов.Вставить(ДокументКЗ.Ключ, ПоместитьВоВременноеХранилище(ДокументКЗ.Значение, УникальныйИдентификатор));
	КонецЦикла;
	Данные.Вставить("АдресаТабличныхДокументов", АдресаТабличныхДокументов);
	
	АдресаСсылок = Новый Соответствие;
	Для Каждого Лист Из СтруктураКниг.Листы Цикл
		СсылкиЛиста = Новый Массив(2);
		СсылкиЛиста[0] = СтруктураКниг.ИсходящиеСсылки[Лист.Ключ];
		СсылкиЛиста[1] = СтруктураКниг.ВходящиеСсылки[Лист.Ключ];
		Если СсылкиЛиста[0] = Неопределено Тогда
			СсылкиЛиста[0] = Новый Соответствие;
		КонецЕсли;
		Если СсылкиЛиста[1] = Неопределено Тогда
			СсылкиЛиста[1] = Новый Соответствие;
		КонецЕсли;
		АдресаСсылок.Вставить(Лист.Ключ, ПоместитьВоВременноеХранилище(СсылкиЛиста, УникальныйИдентификатор));
	КонецЦикла;
	
	Данные.Вставить("АдресаСсылок", АдресаСсылок);
	
	Данные.Вставить("ОбластиФормул", СтруктураКниг.ОбластиФормул); 
	Данные.Вставить("ТекстыФормул", СтруктураКниг.ТекстыФормул);
	Данные.Вставить("ВырожденныеСсылки", СтруктураКниг.ВырожденныеСсылки);
	
	АдресаXLS = Новый Соответствие;
	Для Каждого ЭлементXLS Из СтруктураКниг.XLS Цикл
		АдресаXLS.Вставить(ЭлементXLS.Ключ, ПоместитьВоВременноеХранилище(ЭлементXLS.Значение.Получить(), УникальныйИдентификатор));
	КонецЦикла; 
	Данные.Вставить("АдресаXLS", АдресаXLS);
	
	АдресаПравилИмпортаТаблиц = Новый Соответствие;
	Для Каждого ЭлементПравило Из СтруктураКниг.ПравилаИмпортаТаблиц Цикл
		МассивПравилЛиста = Новый Массив;
		Для Каждого Правило Из ЭлементПравило.Значение Цикл
			МассивПравилЛиста.Добавить(ПоместитьВоВременноеХранилище(Правило, УникальныйИдентификатор));
		КонецЦикла; 
		АдресаПравилИмпортаТаблиц.Вставить(ЭлементПравило.Ключ, МассивПравилЛиста);
	КонецЦикла; 
	Данные.Вставить("ПравилаИмпортаТаблиц", АдресаПравилИмпортаТаблиц); // [{ АдресЛиста, АдресНастроек }]
	
	Данные.Вставить("ГруппыРаскрытия", Новый Соответствие);
	Данные.Вставить("ПараметрыВидовОтчетов", СтруктураКниг.ПараметрыВидовОтчетов);
	
	ПолучитьДанныеСозданныеОбъекты(Данные, СтруктураКниг.СозданныеОбъекты, УникальныйИдентификатор);
		
	ДанныеФормы = Новый Структура;
	ДанныеФормы.Вставить("Выделение", Новый Массив);
	ДанныеФормы.Вставить("ОбластиГруппыРаскрытия", Новый Соответствие);
	ДанныеФормы.Вставить("ИменованныеОбласти", Новый Соответствие);
	
	ВосстановленныеКниги = ВосстановитьСтруктуруВидовОтчетов(СтруктураКниг.СтруктурыОтчетов);
	
	Для Каждого КнигаКЗ Из СтруктураКниг.Книги Цикл
		
		Книга = КнигаКЗ.Значение;
		
		Если НЕ ВосстановленныеКниги[Книга.Имя] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементВидОтчета = ВидыОтчетов.ПолучитьЭлементы().Добавить();
		ЭлементВидОтчета.Индекс = -1;
		ЭлементВидОтчета.Имя = Книга.Имя;
		ЭлементВидОтчета.Тип = 0;
		
		Для Каждого ИндексЛиста Из Книга.Листы Цикл
			
			Лист = СтруктураКниг.Листы[ИндексЛиста];
			
			ЭлементБланкОтчета = ЭлементВидОтчета.ПолучитьЭлементы().Добавить();
			ЭлементБланкОтчета.Индекс = Лист.Адрес;
			ЭлементБланкОтчета.Имя = Лист.Имя;
			ЭлементБланкОтчета.Тип = 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ГруппыРаскрытияКолонки = УправлениеФормойУХ.ПолучитьСтрокуРеквизитовФормы(ЭтаФорма, "ГруппыРаскрытия");
	
	КонвертироватьСтруктуруГруппыРаскрытияДляФормы(СтруктураКниг.ГруппыРаскрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ПустаяСтрока(АдресСтруктурыКниг) ИЛИ ВидыОтчетов.ПолучитьЭлементы().Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Во время импорта произошла ошибка. 
										|Более подробная информация содержится в журнале регистрации'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОбновитьБлокировкиВидовОтчетов();
		
	//ВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = ЭтаФорма Тогда
		Если ИмяСобытия = "Обработка.ИмпортДанныхИзЭлектронныхТаблицMicrosoftExcel.Форма.Форма" Тогда
			
			Если РежимДобавлениеНовогоПравила Тогда
				ТекущиеДанные = ПравилаИмпортаТаблиц.Добавить();
			Иначе
				ТекущиеДанные = Элементы.ПравилаИмпортаТаблиц.ТекущиеДанные;
				УдалитьИзВременногоХранилища(ТекущиеДанные.Адрес);
			КонецЕсли;
			
			ТекущиеДанные.Адрес = Параметр;
			
			ТекущиеДанные.Приемник = ПолучитьИмяТаблицыПриемникаПравилаИмпортаТаблицы(ТекущиеДанные.Адрес);
			
		ИначеЕсли ИмяСобытия = "Обработка.ИмпортВидовОтчетовИзЭлектронныхТаблицMicrosoftExcel.Форма.НастройкиСозданияОтчетов" Тогда
			ОбновитьТипБД(Данные["СозданныеОбъекты_ТипБД"], Параметр.ТипБД);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	Если Модифицированность Тогда
		
		Если ВыполнитьСохранениеМодели = Неопределено Тогда
			
			Отказ = Истина; 
			СтандартнаяОбработка = Ложь;
			
			ТекстВопроса = НСтр("ru = 'Данные были изменены'");
			Ответы = Новый СписокЗначений;
			Ответы.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не сохранять'"));
			Ответы.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
			Ответы.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Сохранить'"));
			
			Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Ответы,, КодВозвратаДиалога.Да, НСтр("ru = 'Сохранение модели'"));			
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьСохранениеМодели = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ВыполнитьСохранениеМодели = Истина;		
		ВыполнитьСохранениеМодели(Истина);		
        Возврат;
				
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда	
		
	    ВыполнитьСохранениеМодели = Ложь;
		Закрыть();
		
	КонецЕсли;

КонецПроцедуры

// КОМАНДЫ ФОРМЫ

&НаКлиенте
Процедура СоздатьГруппуРаскрытия(Команда)
	
	ВыделенныеОбласти = Элементы.ТабличныйДокумент.ПолучитьВыделенныеОбласти();
	Если НЕ ВыделенныеОбласти.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыделеннаяОбласть = ТабличныйДокумент.ВыделенныеОбласти[0];
	
	Если НЕ ТипЗнч(ВыделеннаяОбласть) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтроки = ВыделеннаяОбласть.Верх;
	
	Если ВыделеннаяОбласть.Лево > 0 Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеТипов = Новый Соответствие;
	СоответствиеТипов.Вставить(Новый ОписаниеТипов("Число"),		"Число");
	СоответствиеТипов.Вставить(Новый ОписаниеТипов("Дата"),			"Дата");
	СоответствиеТипов.Вставить(Новый ОписаниеТипов("Булево"),		"Булево");
	СоответствиеТипов.Вставить(Новый ОписаниеТипов("Строка"),		"Строка");
	СоответствиеТипов.Вставить(Новый ОписаниеТипов("Неопределено"),	"");
	
	ГруппаРаскрытия = ГруппыРаскрытия.ПолучитьЭлементы().Добавить();
	ГруппаРаскрытия.Тип = 0;
	ГруппаРаскрытия.Имя = Данные.Листы[Бланк_Индекс].Имя + " " + ГруппыРаскрытия.ПолучитьЭлементы().Количество();
	
	Элементы.ГруппыРаскрытия.Развернуть(ГруппаРаскрытия.ПолучитьИдентификатор());
	
	Аналитики = ГруппаРаскрытия.ПолучитьЭлементы().Добавить();
	Аналитики.Тип = 1;
	Аналитики.Раздел = Истина;
	Аналитики.Имя = "Аналитики";
	
	Элементы.ГруппыРаскрытия.Развернуть(Аналитики.ПолучитьИдентификатор());
	
	Для Индекс=1 По ЧислоДопАналитик Цикл
		
		ТекАналитика=Аналитики.ПолучитьЭлементы().Добавить();	
		ТекАналитика.Тип = 1;
		ТекАналитика.Раздел = Ложь;
		ТекАналитика.Имя = "Аналитика"+Индекс;
		
		Реквизиты=ТекАналитика.ПолучитьЭлементы().Добавить();
		Реквизиты.Тип = 3;
		Реквизиты.Раздел = Истина;
		Реквизиты.Имя = "Реквизиты";
		
	КонецЦикла;
	
	ДобавленныеАналитики = Новый Соответствие;
	
	Показатели = ГруппаРаскрытия.ПолучитьЭлементы().Добавить();
	Показатели.Тип = 2;
	Показатели.Раздел = Истина;
	Показатели.Имя = "Показатели";
	
	Элементы.ГруппыРаскрытия.Развернуть(Показатели.ПолучитьИдентификатор());
	
	Прочее = ГруппаРаскрытия.ПолучитьЭлементы().Добавить();
	Прочее.Тип = 4;
	Прочее.Раздел = Истина;
	Прочее.Имя = "Прочее";
	
	Элементы.ГруппыРаскрытия.Развернуть(Прочее.ПолучитьИдентификатор());
	
	ИсходящиеСсылки = Данные.ИсходящиеСсылки;
	ВходящиеСсылки = Данные.ВходящиеСсылки;
	ОбластиФормул = Данные.ОбластиФормул;
	ИменованныеОбласти = ДанныеФормы.ИменованныеОбласти[Бланк_Индекс];
	АдресСтрокиЛиста = АдресСтрокиЛиста(Бланк_Индекс, НомерСтроки);
	
	ОбластиГруппыРаскрытия = ДанныеФормы.ОбластиГруппыРаскрытия[Бланк_Индекс];
	Если ОбластиГруппыРаскрытия = Неопределено Тогда
		ОбластиГруппыРаскрытия = Новый Соответствие;
		ДанныеФормы.ОбластиГруппыРаскрытия.Вставить(Бланк_Индекс, ОбластиГруппыРаскрытия);
	КонецЕсли;
	
	ГруппаРаскрытияФормулы = Новый Соответствие;
	
	Для НомерКолонки = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		
		Область = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки);
		
		Если НЕ (Область.Верх = НомерСтроки И Область.Лево = НомерКолонки) Тогда
			Продолжить;
		КонецЕсли;
		
		Имя = Область.Имя;
		Номер_ = СтрНайти(Имя, "_");
		
		Наименование = "";
		Если НомерСтроки > 1 Тогда
			Попытка
				Т = СокрЛП(ТабличныйДокумент.Область(НомерСтроки - 1, НомерКолонки).Текст);
				Для НомерСтрокаНаименования = 1 По СтрЧислоСтрок(Т) Цикл
					Наименование = Наименование + " " + СокрЛП(СтрПолучитьСтроку(Т, НомерСтрокаНаименования));
				КонецЦикла; 
				Наименование = Сред(Наименование, 2);
			Исключение
				//Ячейка содержит значение
			КонецПопытки;
		КонецЕсли;
		
		Если Область.СодержитЗначение Тогда
			ТипЗначенияОбласти = СоответствиеТипов[Область.ТипЗначения];
		Иначе
			ТипЗначенияОбласти = СоответствиеТипов[Неопределено];
		КонецЕсли;
		
		Финансовый = ТипЗначенияОбласти = "Число";
		
		Если Номер_ > 0 Тогда
			
			ИмяАналитики = Лев(Имя, Номер_ - 1);
			Аналитика = ДобавленныеАналитики.Получить(ИмяАналитики);
			
			Аналитика = ОбщегоНазначенияКлиентСерверУХ.НайтиСтрокуДерева(Аналитики.ПолучитьЭлементы(),ИмяАналитики,"Имя"); 
			ДобавленныеАналитики.Вставить(ИмяАналитики, Аналитика);				
			Реквизиты = Аналитика.ПолучитьЭлементы()[0];	
			
			Реквизит = Реквизиты.ПолучитьЭлементы().Добавить();
			Реквизит.Тип = 3;
			Реквизит.Имя = ?(НЕ ПустаяСтрока(Наименование), Наименование, Сред(Имя, Номер_ + 1));
			Реквизит.ИмяОбласти = Имя;
			
			Реквизит.ТипЗначения = ТипЗначенияОбласти;
			Реквизит.Финансовый = Финансовый;
			
			ОбластиГруппыРаскрытия.Вставить(Реквизит.ИмяОбласти, Реквизит.Тип);
			
		Иначе
			
			АдресЯчейкиЛиста = АдресЯчейкиСтрокиЛиста(АдресСтрокиЛиста, НомерКолонки);
			
			Если НЕ ИменованныеОбласти.Получить(Имя) = Неопределено ИЛИ НЕ ИсходящиеСсылки.Получить(АдресЯчейкиЛиста) = Неопределено ИЛИ НЕ ВходящиеСсылки.Получить(АдресЯчейкиЛиста) = Неопределено Тогда
				
				Показатель = Показатели.ПолучитьЭлементы().Добавить();
				Показатель.Тип = Показатели.Тип;
				Показатель.Имя = ?(НЕ ПустаяСтрока(Наименование), Наименование, Имя);
				Показатель.ИмяОбласти = Имя;
				
				Показатель.ТипЗначения = ТипЗначенияОбласти;
				Показатель.Финансовый = Финансовый;
				
				ОбластиГруппыРаскрытия.Вставить(Показатель.ИмяОбласти, Показатель.Тип);
				
				ИндексФормулы = ОбластиФормул.Получить(АдресЯчейкиЛиста);
				
				Если НЕ ИндексФормулы = Неопределено Тогда
					ГруппаРаскрытияФормулы.Вставить(НомерКолонки, ИндексФормулы);
				КонецЕсли;
				
			Иначе
				
				ПрочаяСтрока = Прочее.ПолучитьЭлементы().Добавить();
				ПрочаяСтрока.Тип = Прочее.Тип;
				ПрочаяСтрока.Имя = ?(НЕ ПустаяСтрока(Наименование), Наименование, Имя);
				ПрочаяСтрока.ИмяОбласти = Имя;
				
				ПрочаяСтрока.ТипЗначения = ТипЗначенияОбласти;
				ПрочаяСтрока.Финансовый = Финансовый;
				
				ОбластиГруппыРаскрытия.Вставить(ПрочаяСтрока.ИмяОбласти, ПрочаяСтрока.Тип);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ГруппаРаскрытияФормулы.Количество() > 0 И ВыделеннаяОбласть.Низ = НомерСтроки Тогда
		
		НомерСтрокиКонец = НомерСтроки;
		
		КонецГруппыРаскрытия = Ложь;
		Пока НЕ КонецГруппыРаскрытия Цикл
			
			НомерСтрокиКонец = НомерСтрокиКонец + 1;
			
			Если НомерСтрокиКонец > ТабличныйДокумент.ВысотаТаблицы Тогда
				Прервать;
			КонецЕсли;
			
			АдресСтрокиЛиста = АдресСтрокиЛиста(Бланк_Индекс, НомерСтрокиКонец);
			
			Для Каждого КолонкаФормулы Из ГруппаРаскрытияФормулы Цикл
				
				НомерКолонки = КолонкаФормулы.Ключ;
				
				Область = ТабличныйДокумент.Область(НомерСтрокиКонец, НомерКолонки);
				
				Если НЕ (Область.Верх = НомерСтрокиКонец И Область.Лево = НомерКолонки) Тогда
					КонецГруппыРаскрытия = Истина;
					Прервать;
				КонецЕсли;
				
				ИндексФормулы = ОбластиФормул.Получить(АдресЯчейкиСтрокиЛиста(АдресСтрокиЛиста, НомерКолонки));
				
				Если НЕ ИндексФормулы = КолонкаФормулы.Значение Тогда
					КонецГруппыРаскрытия = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЦикла;
		
		НомерСтрокиКонец = НомерСтрокиКонец - 1;
		
		ГруппаРаскрытия.ИмяОбласти = ТабличныйДокумент.Область(НомерСтроки,, НомерСтрокиКонец).Имя;
		
		Если НомерСтрокиКонец > НомерСтроки Тогда
			ТабличныйДокумент.Область(НомерСтроки + 1,, НомерСтрокиКонец).Сгруппировать();
		КонецЕсли;
		
	Иначе
		ГруппаРаскрытия.ИмяОбласти = ТабличныйДокумент.Область(НомерСтроки,, ВыделеннаяОбласть.Низ).Имя;
		Если НомерСтроки < ВыделеннаяОбласть.Низ Тогда
			ТабличныйДокумент.Область(НомерСтроки + 1,, ВыделеннаяОбласть.Низ).Сгруппировать();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВидыОтчетов(Команда)
	
	СоздатьВидыОтчетов_();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВидыОтчетов_(ЭлементОтчет = Неопределено)
	
	ЗаписатьТекущиеДанные();
	
	МассивОтчетов = Новый Массив; // [ ({ Имя, Бланки: [ ({ Имя, АдресЛиста }) ], ПравилаПроверки: [ ({ Имя, АдресЛиста }) ], ГруппыРаскрытия: [{ АдресЛиста, (ГруппаРаскрытия) }] }) ]
	МассивПакетовИмпорта = Новый Массив; // [( )]
	
	СтруктураГруппРаскрытия = ПолучитьСтруктуруГруппРаскрытия();
	
	ЕстьНенастроенныеПакетыИмпорта = Ложь;
	
	КоличествоВыбранныхВидовОтчетов = 0;
	
	Для Каждого Контейнер Из ВидыОтчетов.ПолучитьЭлементы() Цикл
		
		Если Контейнер.Тип = 0 Тогда
			
			Для Каждого ЭлементКонтейнера Из Контейнер.ПолучитьЭлементы() Цикл
				
				СтруктураОтчета = Новый Структура();
				МассивОтчетов.Добавить(СтруктураОтчета);
				
				СтруктураОтчета.Вставить("Имя", ЭлементКонтейнера.Имя);
				
				СтруктураОтчета.Вставить("БланкиОтчетов", Новый Массив);
				СтруктураОтчета.БланкиОтчетов.Добавить(Новый Структура("Имя,Адрес", ЭлементКонтейнера.Имя, ЭлементКонтейнера.Индекс));
				
				СтруктураОтчета.Вставить("ГруппыРаскрытия", Новый Соответствие);
				ГР = СтруктураГруппРаскрытия[ЭлементКонтейнера.Индекс];
				Если НЕ ГР = Неопределено Тогда
					СтруктураОтчета.ГруппыРаскрытия.Вставить(ЭлементКонтейнера.Индекс, ГР);
				КонецЕсли;
				
				СтруктураОтчета.Вставить("ПравилаПроверки", Новый Массив);
				Для Каждого ПравилоПроверки Из ЭлементКонтейнера.ПолучитьЭлементы() Цикл
					СтруктураОтчета.ПравилаПроверки.Добавить(Новый Структура("Имя,Адрес", ПравилоПроверки.Имя, ПравилоПроверки.Индекс));
				КонецЦикла;
				
				ПараметрыВидаОтчета = Данные.ПараметрыВидовОтчетов[ЭлементКонтейнера.Индекс];
				СтруктураОтчета.Вставить("Параметры", ?(ПараметрыВидаОтчета = Неопределено, Новый Соответствие, Данные.ПараметрыВидовОтчетов[ЭлементКонтейнера.Индекс]));
				
				СтруктураОтчета.Вставить("Выбран", ЭлементОтчет = Неопределено ИЛИ ЭлементКонтейнера = ЭлементОтчет);
				
			КонецЦикла; 
			
		Иначе
			
			Если НЕ ЭлементОтчет = Неопределено И НЕ Контейнер = ЭлементОтчет Тогда
				Продолжить;
			КонецЕсли;
			
			МассивПравилИмпортаТаблиц = Новый Массив;
			
			Для Каждого ЭлементКонтейнера Из Контейнер.ПолучитьЭлементы() Цикл
				
				ПравилоИмпортаТаблиц = Данные["ПравилаИмпортаТаблиц"][ЭлементКонтейнера.Индекс];
				Если ПравилоИмпортаТаблиц = Неопределено Тогда
					МассивПравилИмпортаТаблиц = Неопределено;
					ЕстьНенастроенныеПакетыИмпорта = Истина;
					Прервать;
				КонецЕсли;
				
				СтруктураИмпортаЛиста = Новый Структура;
				СтруктураИмпортаЛиста.Вставить("Правила", ПравилоИмпортаТаблиц);
				СтруктураИмпортаЛиста.Вставить("ИмяЛиста", Данные.Листы[ЭлементКонтейнера.Индекс].Имя);
				
				МассивПравилИмпортаТаблиц.Добавить(СтруктураИмпортаЛиста);
				
			КонецЦикла;
			
			Если НЕ МассивПравилИмпортаТаблиц = Неопределено Тогда
				СтруктураПакетаИмпорта = Новый Структура;
				СтруктураПакетаИмпорта.Вставить("ИмяФайла", Контейнер.Имя);
				СтруктураПакетаИмпорта.Вставить("Правила", МассивПравилИмпортаТаблиц);
				МассивПакетовИмпорта.Добавить(СтруктураПакетаИмпорта);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Если МассивОтчетов.Количество() = 0 И МассивПакетовИмпорта.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Нет выбранных данных!");
		Возврат;
	КонецЕсли;
	
	Если ЭлементОтчет = Неопределено И ЕстьНенастроенныеПакетыИмпорта Тогда
		
		Ответы = Новый СписокЗначений;
		Ответы.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Создать виды отчетов и пакеты импорта только для настроенных файлов'"));
		Ответы.Добавить(КодВозвратаДиалога.Отмена);
		
		ТекстВопроса = НСтр("ru = 'Среди файлов, помеченных для импорта документов параллельного учета,
		|обнаружены листы, для которых не настроены правила импорта данных.'");
		
		Ответ = Неопределено;
		
		ДопПараметры = Новый Структура("МассивОтчетов, МассивПакетовИмпорта", МассивОтчетов, МассивПакетовИмпорта);
		Оповещение = Новый ОписаниеОповещения("Подключаемый_СоздатьВидыОтчетов", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Ответы,, КодВозвратаДиалога.Отмена);
		
		Возврат;
		
	КонецЕсли;
	
	ОбработатьСозданиеВидовОтчетов(МассивОтчетов, МассивПакетовИмпорта);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьВидыОтчетов(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    МассивОтчетов 			= ДополнительныеПараметры.МассивОтчетов;
    МассивПакетовИмпорта	= ДополнительныеПараметры.МассивПакетовИмпорта;
        
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    КонецЕсли;    
    
    ОбработатьСозданиеВидовОтчетов(МассивОтчетов, МассивПакетовИмпорта);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСозданиеВидовОтчетов(Знач МассивОтчетов, Знач МассивПакетовИмпорта)
    
    Попытка
        
        ПоместитьДанныеСозданныеОбъекты(Данные, АдресСтруктурыКниг);
        
        Если НЕ СоздатьВидыОтчетовСервер(АдресСтруктурыКниг, МассивОтчетов, МассивПакетовИмпорта) = Неопределено Тогда
            
            ПолучитьДанныеСозданныеОбъекты(Данные, АдресСтруктурыКниг, УникальныйИдентификатор);
            
        КонецЕсли;
        
        ОбновитьБлокировкиВидовОтчетов();
        
        Модифицированность = Истина;
        
        ОповеститьОбИзменении(Тип("СправочникСсылка.ВидыОтчетов"));
        ОповеститьОбИзменении(Тип("СправочникСсылка.БланкиОтчетов"));
        ОповеститьОбИзменении(Тип("СправочникСсылка.ПоказателиОтчетов"));
        ОповеститьОбИзменении(Тип("СправочникСсылка.СтрокиОтчетов"));
        ОповеститьОбИзменении(Тип("СправочникСсылка.КолонкиОтчетов"));
        ОповеститьОбИзменении(Тип("СправочникСсылка.ГруппыРаскрытия"));
        ОповеститьОбИзменении(Тип("СправочникСсылка.ПравилаОбработки"));
        ОповеститьОбИзменении(Тип("СправочникСсылка.ИсточникиДанныхДляРасчетов"));
        ОповеститьОбИзменении(Тип("СправочникСсылка.ПравилаПроверки"));
        ОповеститьОбИзменении(Тип("СправочникСсылка.КонтрольныеСоотношения"));
        ОповеститьОбИзменении(Тип("СправочникСсылка.ПравилаИмпортаТаблиц"));
        ОповеститьОбИзменении(Тип("СправочникСсылка.ПакетыПравилИмпортаТаблиц"));
        ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ИменаФайловИКаталогов"));
        ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ПроцедурыРасчетов"));
        ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.РеквизитыИсточниковДанныхДляФормул"));
        
        ПоказатьПредупреждение(, "Создание успешно завершено!");
        
    Исключение
        
        ПоказатьПредупреждение(, НСтр("ru = 'Создание бланков завершилось ошибкой.
        |Более подробная информация находится в журнале регистрации.'"));
        
    КонецПопытки;
    
    ПрочитатьТекущиеДанные();

КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьВидыОтчетовСервер(Знач АдресСтруктурыКниг, Знач МассивОтчетов, Знач МассивПакетовИмпорта)
	
	Возврат Обработки.ИмпортВидовОтчетовИзЭлектронныхТаблицMicrosoftExcel.СоздатьВидыОтчетов(АдресСтруктурыКниг, МассивОтчетов, МассивПакетовИмпорта);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьЗакрытьКорзинку(Команда)
	
	РежимКорзинка = НЕ РежимКорзинка;
	ВидимостьДоступность();
	
КонецПроцедуры

// ЭКПОРТНЫЕ ПРОЦЕДУРЫ ФОРМЫ

Процедура УстановитьАдресСтруктурыКниг()
КонецПроцедуры
                                                          
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура АктивнаяОбласть_ИмяПриИзменении(Элемент)
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области.Найти(АктивнаяОбласть_Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивнаяОбласть_ИмяНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Если Элемент.СписокВыбора.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Область Из ТабличныйДокумент.Области Цикл
		
		Элемент.СписокВыбора.Добавить(Область.Имя); 
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивнаяОбласть_ИмяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = АктивнаяОбласть_Имя Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВидыОтчетовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ВидыОтчетов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Бланк_Индекс = -1;
		Бланк_Тип = -1;
		Бланк_ТолькоПросмотр = Ложь;
	Иначе
		Если НЕ Бланк_Индекс = ТекущиеДанные.Индекс Тогда
			ЗаписатьТекущиеДанные();
		КонецЕсли;
		Бланк_Индекс = ТекущиеДанные.Индекс;
		Бланк_Тип = ТекущиеДанные.Тип;
		Бланк_ТолькоПросмотр = ТекущиеДанные.ТолькоПросмотр;
	КонецЕсли;
	
	ПрочитатьТекущиеДанные();
		
	ВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыОтчетовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыОтчетовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ВидыОтчетов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдалениеВосстановлениеВидовОтчетов(ТекущиеДанные, ВидыОтчетов, ВидыОтчетовКорзина);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеВосстановлениеВидовОтчетов(ТекущиеДанные, КонтейнерИсточник, КонтейнерПриемник)
	
	Если ТекущиеДанные.ТолькоПросмотр Тогда
		Если ТекущиеДанные.Тип = 0 ИЛИ ТекущиеДанные.Тип = 1 ИЛИ ТекущиеДанные.Тип = 2 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Удалить невозможно: уже создан вид отчета!'"));
		ИначеЕсли ТекущиеДанные.Тип = 3 ИЛИ ТекущиеДанные.Тип = 4 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Удалить невозможно: уже создан пакет правил импорта!'"));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Тип = 0 Тогда
		Для Каждого ЭлементВидОтчета Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			Если ЭлементВидОтчета.ТолькоПросмотр Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Удалить невозможно: книга содержит листы, на основе которых уже созданы виды отчетов!'"));
				Возврат;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Родитель = ТекущиеДанные;
	Пока НЕ Родитель.ПолучитьРодителя() = Неопределено Цикл
		Родитель = Родитель.ПолучитьРодителя();
	КонецЦикла;
	
	КонтейнерПолучатель = Неопределено;
	
	Для Каждого ЭлементВидОтчета Из КонтейнерПриемник.ПолучитьЭлементы() Цикл
		Если Родитель.Имя = ЭлементВидОтчета.Имя Тогда
			КонтейнерПолучатель = ЭлементВидОтчета;
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Если КонтейнерПолучатель = Неопределено Тогда
		КонтейнерПолучатель = КонтейнерПриемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(КонтейнерПолучатель, Родитель);
	КонецЕсли;
	
	Если НЕ Родитель = ТекущиеДанные Тогда
		Получатель = КонтейнерПолучатель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(Получатель, ТекущиеДанные);
		Получатель.Тип = КонтейнерПолучатель.Тип + 1;
	Иначе
		Получатель = КонтейнерПолучатель;
	КонецЕсли;
	
	СкопироватьСтрокиДерева(ТекущиеДанные.ПолучитьЭлементы(), Получатель.ПолучитьЭлементы(), Получатель.Тип);
	
	Если ТекущиеДанные.ПолучитьРодителя() = Неопределено  Тогда
		
		КонтейнерИсточник.ПолучитьЭлементы().Удалить(ТекущиеДанные);
		
	Иначе
		
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		Родитель.ПолучитьЭлементы().Удалить(ТекущиеДанные);
		
		Если Родитель.ПолучитьРодителя() = Неопределено Тогда
			Если Родитель.ПолучитьЭлементы().Количество() = 0 Тогда
				КонтейнерИсточник.ПолучитьЭлементы().Удалить(Родитель);
			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтрокиДерева(КоллекцияИсточник, КоллекцияПриемник, ТипПриемника)
	
	Для Каждого ЭлементИсточник Из КоллекцияИсточник Цикл
		ЭлементПриемник = КоллекцияПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		ЭлементПриемник.Тип = ТипПриемника + 1;
		СкопироватьСтрокиДерева(ЭлементИсточник.ПолучитьЭлементы(), ЭлементПриемник.ПолучитьЭлементы(), ЭлементПриемник.Тип);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыОтчетовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ТекущиеДанные = ВидыОтчетов.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	
	Выполнение = НЕ ТекущиеДанные.Индекс = -1;
	
	Если Выполнение Тогда
		Выполнение = НЕ ТекущиеДанные.ТолькоПросмотр;
	КонецЕсли;
	
	Если Выполнение Тогда
		Выполнение = ТекущиеДанные.ПолучитьЭлементы().Количество() = 0;
	КонецЕсли;
	
	Если НЕ Выполнение Тогда
		Возврат;
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("Источник", Элемент.Имя);
	Структура.Вставить("Форма", ЭтаФорма);
	Структура.Вставить("Значение", ПараметрыПеретаскивания.Значение);
	ПараметрыПеретаскивания.Значение = Структура;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыОтчетовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ВидыОтчетов.НайтиПоИдентификатору(Строка);
	
	Если ТекущиеДанные.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") Тогда
		Значение = ПараметрыПеретаскивания.Значение;
		Если Значение.Свойство("Форма") И Значение.Форма = ЭтаФорма И Значение.Свойство("Источник") И Значение.Источник = Элемент.Имя Тогда
			ДанныеИсточника = ВидыОтчетов.НайтиПоИдентификатору(Значение.Значение);
		Иначе
			Возврат;
		КонецЕсли;
	Иначе 
		Возврат;
	КонецЕсли;
	
	Если ДанныеИсточника = ТекущиеДанные Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИсточника.Тип < 3 Тогда
		
		Если ДанныеИсточника.ПолучитьРодителя() = ТекущиеДанные Тогда
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанные.ПолучитьРодителя() = ДанныеИсточника Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
		
	ДанныеИсточникаРодитель = ДанныеИсточника;
	Пока НЕ ДанныеИсточникаРодитель.ПолучитьРодителя() = Неопределено Цикл
		ДанныеИсточникаРодитель = ДанныеИсточникаРодитель.ПолучитьРодителя();
	КонецЦикла;
	
	ТекущиеДанныеРодитель = ТекущиеДанные;
	Пока НЕ ТекущиеДанныеРодитель.ПолучитьРодителя() = Неопределено Цикл
		ТекущиеДанныеРодитель = ТекущиеДанныеРодитель.ПолучитьРодителя();
	КонецЦикла;
	
	Если НЕ ТекущиеДанныеРодитель = ДанныеИсточникаРодитель Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыОтчетовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаИсточник = ВидыОтчетов.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение.Значение);
	СтрокаПриемник = ВидыОтчетов.НайтиПоИдентификатору(Строка);
	
	Если СтрокаИсточник.Тип < 3 Тогда
		
		Если СтрокаПриемник.Тип = 2 Тогда
			СтрокаПриемник = СтрокаПриемник.ПолучитьРодителя();
		КонецЕсли;
		
		НоваяСтрока = СтрокаПриемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
		НоваяСтрока.Тип = СтрокаПриемник.Тип + 1;
		
		ЭлементыРодителя = СтрокаИсточник.ПолучитьРодителя().ПолучитьЭлементы();
		ЭлементыРодителя.Удалить(СтрокаИсточник);
		
		Элементы.ВидыОтчетов.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
	Иначе
		
		ЭлементыРодителя = СтрокаИсточник.ПолучитьРодителя().ПолучитьЭлементы();
		
		ТекущийИндекс = ЭлементыРодителя.Индекс(СтрокаИсточник);
		
		Если СтрокаПриемник.Тип = 3 Тогда
			ЦелевойИндекс = ЭлементыРодителя.Количество() - 1;
		Иначе
			ЦелевойИндекс = ЭлементыРодителя.Индекс(СтрокаПриемник);
			Если ЦелевойИндекс > ТекущийИндекс + 1 Тогда // + 1 - чтобы можно было менять местами рядом стоящие
				ЦелевойИндекс = ЦелевойИндекс - 1;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЦелевойИндекс = ТекущийИндекс Тогда
			ЭлементыРодителя.Сдвинуть(ТекущийИндекс, ЦелевойИндекс - ТекущийИндекс);
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Если Бланк_Индекс = -1 Тогда
		Возврат;
	КонецЕсли;
	
	СнятьВыделениеОбластей();
	
	Лист = Данные.Листы[Бланк_Индекс];
	
	ИмяОбласти = Элемент.ТекущаяОбласть.Имя;
	
	АктивнаяОбласть_Имя = ИмяОбласти;
	АктивнаяОбласть_ЗначениеФормула = Элемент.ТекущаяОбласть.Текст;
	
	АктивнаяОбласть_ВходящиеСсылки.Очистить();
	АктивнаяОбласть_ИсходящиеСсылки.Очистить();
	
	Элементы.АктивнаяОбласть_ЗначениеФормула.КнопкаВыбора = Неопределено;
	
	АдресЯчейки = АдресЯчейкиЛиста(Бланк_Индекс, Элемент.ТекущаяОбласть.Верх, Элемент.ТекущаяОбласть.Лево);
	
	ОбластьГруппыРаскрытия = ДанныеФормы.ОбластиГруппыРаскрытия.Получить(Бланк_Индекс);
	Если НЕ ОбластьГруппыРаскрытия = Неопределено Тогда
		ТипОбластиГруппыРаскрытия = ОбластьГруппыРаскрытия.Получить(ИмяОбласти);
		Если НЕ ТипОбластиГруппыРаскрытия = Неопределено И НЕ ТипОбластиГруппыРаскрытия = 0 Тогда
			Если ТипОбластиГруппыРаскрытия = 2 Тогда
				ЦветРамки = WebЦвета.Зеленый;
			Иначе
				ЦветРамки = WebЦвета.ХакиТемный;
			КонецЕсли;
			ОбвестиОбласть(Элемент.ТекущаяОбласть, ЦветРамки);
		КонецЕсли;
	КонецЕсли;
	
	ВходящиеСсылки = Данные.ВходящиеСсылки.Получить(АдресЯчейки);
	
	Если НЕ ВходящиеСсылки = Неопределено Тогда
		ОбвестиСвязныеОбласти(Данные.ВходящиеСсылки.Получить(АдресЯчейки), АктивнаяОбласть_ВходящиеСсылки, WebЦвета.Красный, Бланк_Индекс);
	КонецЕсли;
	
	ИндексФормулы = Данные.ОбластиФормул.Получить(АдресЯчейки);
	Если ИндексФормулы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АктивнаяОбласть_ЗначениеФормула = Данные.ТекстыФормул.Получить(ИндексФормулы);
	ОбвестиСвязныеОбласти(Данные.ИсходящиеСсылки.Получить(АдресЯчейки), АктивнаяОбласть_ИсходящиеСсылки, WebЦвета.Синий, Бланк_Индекс);
	
КонецПроцедуры


&НаКлиенте
Процедура ГруппыРаскрытияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ГруппыРаскрытия.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Раздел Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Тип = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(ТекущиеДанные.ИмяОбласти);
	Элементы.ГруппыРаскрытия.Обновить();
	
КонецПроцедуры


&НаКлиенте
Процедура ГруппыРаскрытияВидСубконтоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГруппыРаскрытия.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ВидСубконто) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ВидСубконтоРеквизиты.Очистить();
	
	СписокРеквизитов = ПолучитьСписокРеквизитов(ТекущиеДанные.ВидСубконто);
	
	Для Каждого Реквизит Из СписокРеквизитов Цикл
		
		Если НЕ ЗначениеЗаполнено(Реквизит.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущиеДанные.ВидСубконтоРеквизиты.Добавить(Реквизит.Значение);
		
	КонецЦикла;
	
	ЭлементыРеквизитыВидаСубконто = ТекущиеДанные.ПолучитьЭлементы()[0].ПолучитьЭлементы();
	
	Для Каждого Строка Из ЭлементыРеквизитыВидаСубконто Цикл
		
		Если ЗначениеЗаполнено(Строка.ВидСубконтоРеквизит) Тогда
			Если НЕ СписокРеквизитов.НайтиПоЗначению(Строка.ВидСубконтоРеквизит) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Реквизит = СписокРеквизитов.НайтиПоЗначению(Строка.Имя);
		Если Реквизит = Неопределено Тогда
			Строка.ВидСубконтоРеквизит = "";
		Иначе
			Строка.ВидСубконтоРеквизит = Реквизит.Значение;
		КонецЕсли;
		
	КонецЦикла; 
	
	Если ЭлементыРеквизитыВидаСубконто.Количество() = 1 И СписокРеквизитов.Количество() = 1 И НЕ ЗначениеЗаполнено(ЭлементыРеквизитыВидаСубконто[0].ВидСубконтоРеквизит) Тогда
		ЭлементыРеквизитыВидаСубконто[0].ВидСубконтоРеквизит = СписокРеквизитов[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыРаскрытияВидСубконтоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ГруппыРаскрытия.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидСубконто = ВыбранноеЗначение Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыРаскрытияВидСубконтоРеквизитНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ДанныеВыбора = Элементы.ГруппыРаскрытия.ТекущиеДанные.ПолучитьРодителя().ПолучитьРодителя().ВидСубконтоРеквизиты;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыРаскрытияВидСубконтоРеквизитНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.ЗагрузитьЗначения(Элементы.ГруппыРаскрытия.ТекущиеДанные.ПолучитьРодителя().ПолучитьРодителя().ВидСубконтоРеквизиты.ВыгрузитьЗначения());
	
	Для Каждого ЭлементСписка Из Элемент.СписокВыбора Цикл
		ЭлементСписка.Представление = ЭлементСписка.Значение;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОтчета_ВидКурсаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура СнятьВыделениеОбластей()
	
	НетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	Для Каждого СтруктураОбласти Из ДанныеФормы.Выделение Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОбласти.Область, СтруктураОбласти.Свойства);
	КонецЦикла;
	
	ДанныеФормы.Выделение.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбвестиОбласть(Область, ЦветРамки)
	
	СвойстваОбласти = Новый Структура("ЦветРамки,ГраницаСверху,ГраницаСлева,ГраницаСнизу,ГраницаСправа");
	ЗаполнитьЗначенияСвойств(СвойстваОбласти, Область);
	ДанныеФормы.Выделение.Добавить(Новый Структура("Область,Свойства", Область, СвойстваОбласти));
	
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	
	Область.ЦветРамки = ЦветРамки;
	Область.Обвести(Линия, Линия, Линия, Линия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбвестиСвязныеОбласти(Ссылки, СписокСсылок, ЦветЛинии, АдресЛиста)
	
	Если Ссылки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВырожденныеСсылки = Данные.ВырожденныеСсылки;
	
	Для Каждого Ссылка Из Ссылки Цикл
		
		Адрес = РазложитьАдресЯчейки(Ссылка.Ключ);
		
		ПредставлениеСсылки = ?(Адрес[1] = 0, "", "R" + Формат(Адрес[1], "ЧГ=")) + ?(Адрес[2] = 0, "", "C" + Формат(Адрес[2], "ЧГ="));
		Если АдресЛиста = Адрес[0] Тогда
			ЛокальнаяСсылка = Истина;
		Иначе
			ПредставлениеСсылки = Данные.ПараметрыАдресации[0][Адрес[0]] + "->" + Данные.ПараметрыАдресации[1][Адрес[0]] + "->" + ПредставлениеСсылки;
			ЛокальнаяСсылка = Ложь;
		КонецЕсли;
		
		СсылкаВСписке = СписокСсылок.Добавить(Ссылка.Ключ, ПредставлениеСсылки);
		
		Если НЕ ВырожденныеСсылки.Получить(Ссылка.Ключ) = Неопределено Тогда
			СсылкаВСписке.Пометка = Истина;
		ИначеЕсли ЛокальнаяСсылка Тогда
			ОбвестиОбласть(ТабличныйДокумент.Область(ПредставлениеСсылки), ЦветЛинии);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьТекущиеДанные()
	
	Если Бланк_Индекс = -1 Тогда
		Возврат;
	КонецЕсли;
	
	Если Бланк_Тип = 4 Тогда
		
		Если ПравилаИмпортаТаблиц.Количество() = 0 Тогда
			
			Данные["ПравилаИмпортаТаблиц"].Удалить(Бланк_Индекс);
			
		Иначе
			
			МассивПравилЛиста = Новый Массив;
			
			Для Каждого ЭлементПравило Из ПравилаИмпортаТаблиц Цикл
				МассивПравилЛиста.Добавить(ЭлементПравило.Адрес);
			КонецЦикла; 
			
			Данные["ПравилаИмпортаТаблиц"].Вставить(Бланк_Индекс, МассивПравилЛиста);
			
		КонецЕсли;
		
	Иначе
		
		СнятьВыделениеОбластей();
		
		Данные.Листы[Бланк_Индекс].ТекущаяОбласть = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
		
		Если Бланк_Тип = 1 Тогда
			
			Данные.ГруппыРаскрытия.Вставить(Бланк_Индекс, УправлениеФормойКлиентСерверУХ.УпаковатьДанныеФормыДерево(ГруппыРаскрытия, ГруппыРаскрытияКолонки, Элементы.ГруппыРаскрытия));
			
			ПараметрыВидаОтчета = Новый Соответствие;
			ПараметрыВидаОтчета.Вставить("ВидКурса", ВидОтчета_ВидКурса);
			ПараметрыВидаОтчета.Вставить("ВидОтчетаСуществующий", ВидОтчета_Существующий);
			Данные.ПараметрыВидовОтчетов.Вставить(Бланк_Индекс, ПараметрыВидаОтчета);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьТекущиеДанные()
	
	Если Бланк_Индекс = -1 Тогда
		Возврат;
	КонецЕсли;
	
	Если Бланк_Тип = 4 Тогда
		
		ПравилаИмпортаТаблиц.Очистить();
		
		МассивПравилЛиста = Данные["ПравилаИмпортаТаблиц"][Бланк_Индекс];
		
		Если НЕ МассивПравилЛиста = Неопределено Тогда
			
			ИменаПриемниковПравил = ПолучитьИмяТаблицыПриемникаПравилаИмпортаТаблицы(МассивПравилЛиста);
			
			Для Индекс = 0 По МассивПравилЛиста.ВГраница() Цикл
				
				Правило = ПравилаИмпортаТаблиц.Добавить();
				Правило.Адрес = МассивПравилЛиста[Индекс];
				Правило.Приемник = ИменаПриемниковПравил[Индекс];
				
			КонецЦикла; 
			
		КонецЕсли;
		
	Иначе
		
		Лист = Данные.Листы[Бланк_Индекс];
		
		АдресДокумента = Данные.АдресаТабличныхДокументов[Бланк_Индекс];
		АдресСсылок = Данные.АдресаСсылок[Бланк_Индекс];
		
		ТабличныйДокумент = ПолучитьИзВременногоХранилища(АдресДокумента);
		
		Если НеПодсвечиватьСвязныеЯчейки ИЛИ Бланк_Тип = 4 Тогда
			Ссылки = Новый Массив;
			Ссылки.Добавить(Новый Соответствие);
			Ссылки.Добавить(Новый Соответствие);
		Иначе
			Ссылки = ПолучитьИзВременногоХранилища(АдресСсылок);
		КонецЕсли;
		
		Данные.Вставить("ИсходящиеСсылки", Ссылки[0]);
		Данные.Вставить("ВходящиеСсылки", Ссылки[1]);
		
		Если ДанныеФормы.ИменованныеОбласти[Бланк_Индекс] = Неопределено Тогда
			ИменованныеОбласти = Новый Соответствие;
			Для Каждого Область Из ТабличныйДокумент.Области Цикл
				ИменованныеОбласти.Вставить(Область.Имя, Истина);
			КонецЦикла; 
			ДанныеФормы.ИменованныеОбласти.Вставить(Бланк_Индекс, ИменованныеОбласти);
		КонецЕсли;
		
		ГруппыРаскрытия.ПолучитьЭлементы().Очистить();
			
		Если Бланк_Тип = 1 Тогда
			
			УпакованныеГруппыРаскрытия = Данные.ГруппыРаскрытия[Бланк_Индекс];
			Если НЕ УпакованныеГруппыРаскрытия = Неопределено Тогда
				
				УправлениеФормойКлиентСерверУХ.РаспаковатьДанныеФормыДерево(УпакованныеГруппыРаскрытия, ГруппыРаскрытия, Элементы.ГруппыРаскрытия);
				
				Если ГруппыРаскрытия.ПолучитьЭлементы().Количество() > 0 Тогда
					ЕстьРазвернутые = Ложь;
					Для Каждого ГруппаРаскрытия Из ГруппыРаскрытия.ПолучитьЭлементы() Цикл
						Если Элементы.ГруппыРаскрытия.Развернут(ГруппаРаскрытия.ПолучитьИдентификатор()) Тогда
							ЕстьРазвернутые = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла; 
					Если НЕ ЕстьРазвернутые Тогда
						Для Каждого ГруппаРаскрытия Из ГруппыРаскрытия.ПолучитьЭлементы() Цикл
							Элементы.ГруппыРаскрытия.Развернуть(ГруппаРаскрытия.ПолучитьИдентификатор(), Истина);
						КонецЦикла; 
					КонецЕсли;
				КонецЕсли;
				
				Области = Новый Массив;
				Для Каждого ГруппаРаскрытия Из ГруппыРаскрытия.ПолучитьЭлементы() Цикл
					Область = ТабличныйДокумент.Область(ГруппаРаскрытия.ИмяОбласти);
					Если Область.Низ > Область.Верх Тогда
						Области.Добавить(Область.Имя);
					КонецЕсли;
				КонецЦикла;
				Если Области.Количество() > 0 Тогда
					СвернутьГруппыРаскрытия(ТабличныйДокумент, Области);
				КонецЕсли;
				
				ОбластиГруппыРаскрытия = ДанныеФормы.ОбластиГруппыРаскрытия[Бланк_Индекс];
				Если ОбластиГруппыРаскрытия = Неопределено Тогда
					ДанныеФормы.ОбластиГруппыРаскрытия.Вставить(Бланк_Индекс, ПолучитьОбластиГруппыРаскрытия(ГруппыРаскрытия));
				КонецЕсли;
					
			КонецЕсли;
			
			ПараметрыВидаОтчета = Данные.ПараметрыВидовОтчетов[Бланк_Индекс];
			Если НЕ ПараметрыВидаОтчета = Неопределено Тогда
				ВидОтчета_ВидКурса = ПараметрыВидаОтчета["ВидКурса"];
				ВидОтчета_Существующий = ПараметрыВидаОтчета["ВидОтчетаСуществующий"];
			Иначе
				ВидОтчета_ВидКурса = Неопределено;
				ВидОтчета_Существующий = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ Лист.ТекущаяОбласть = Неопределено Тогда
			Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(Лист.ТекущаяОбласть);
		Иначе
			Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
		КонецЕсли;
		
		Элементы.АктивнаяОбласть_Имя.СписокВыбора.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяТаблицыПриемникаПравилаИмпортаТаблицы(АдресМассиваПравил)
	
	Если ТипЗнч(АдресМассиваПравил) = Тип("Массив") Тогда
		М = Новый Массив;
		Для Каждого Адрес Из АдресМассиваПравил Цикл
			Правило = ПолучитьИзВременногоХранилища(Адрес);
			М.Добавить(Правило.СохраненнаяНастройка["ПриемникПолноеИмя"]);
		КонецЦикла;
		Возврат М;
	Иначе
		М = Новый Массив;
		М.Добавить(АдресМассиваПравил);
		Возврат ПолучитьИмяТаблицыПриемникаПравилаИмпортаТаблицы(М)[0];
	КонецЕсли;
	
Конецфункции

&НаКлиенте
Функция ПолучитьОбластиГруппыРаскрытия(Строка)
	
	Соот = Новый Соответствие;
	
	Для Каждого Элемент Из Строка.ПолучитьЭлементы() Цикл
		Если НЕ ПустаяСтрока(Элемент.ИмяОбласти) Тогда
			Соот.Вставить(Элемент.ИмяОбласти, Элемент.Тип);
		КонецЕсли;
		Для Каждого КЗ Из ПолучитьОбластиГруппыРаскрытия(Элемент) Цикл
			Соот.Вставить(КЗ.Ключ, КЗ.Значение);
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат Соот;
	
Конецфункции

&НаСервереБезКонтекста
Процедура СвернутьГруппыРаскрытия(ТабличныйДокумент, Знач Области)
	
	Для Каждого ИмяОбласти Из Области Цикл
		Область = ТабличныйДокумент.Область(ИмяОбласти);
		ТабличныйДокумент.Область(Область.Верх + 1,, Область.Низ).Сгруппировать();
	КонецЦикла;	
	
КонецПроцедуры

// АДРЕСАЦИЯ ("копия" процедур модуля менеджера)

&НаКлиенте
Функция АдресЯчейкиЛиста(АдресЛиста, НомерСтроки, НомерКолонки)
	
	Возврат АдресЛиста + (16384 + 1) * НомерСтроки + НомерКолонки;
	
Конецфункции

&НаКлиенте
Функция АдресСтрокиЛиста(АдресЛиста, НомерСтроки)
	
	Возврат АдресЯчейкиЛиста(АдресЛиста, НомерСтроки, 0);
	
Конецфункции

&НаКлиенте
Функция АдресКолонкиЛиста(АдресЛиста, НомерКолонки)
	
	Возврат АдресЯчейкиЛиста(АдресЛиста, 0, НомерКолонки);
	
Конецфункции

&НаКлиенте
Функция АдресЯчейкиСтрокиЛиста(АдресСтроки, НомерКолонки)
	
	Возврат АдресСтроки + НомерКолонки;
	
Конецфункции

&НаКлиенте
Функция АдресЯчейкиКолонкиЛиста(АдресКолонки, НомерСтроки)
	
	Возврат АдресКолонки + (16384 + 1) * НомерСтроки;
	
Конецфункции

&НаКлиенте
Функция АдресЛиста(АдресЯчейки)
	
	Возврат АдресЯчейки - АдресЯчейки % 17180934145;
	
Конецфункции

&НаКлиенте
Функция РазложитьАдресЯчейки(АдресЯчейки)
	
	ОтносительныйАдресНаЛисте = АдресЯчейки % 17180934145;
	НомерКолонки = ОтносительныйАдресНаЛисте % (16384 + 1);
	
	Разложение = Новый Массив;
	Разложение.Добавить(АдресЯчейки - ОтносительныйАдресНаЛисте);
	Разложение.Добавить((ОтносительныйАдресНаЛисте - НомерКолонки)/(16384 + 1));
	Разложение.Добавить(НомерКолонки);
	
	Возврат Разложение;
	
Конецфункции


&НаКлиенте
Процедура ВидыОтчетовКорзинаВосстановить(Команда)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ВидыОтчетовКорзина.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдалениеВосстановлениеВидовОтчетов(ТекущиеДанные, ВидыОтчетовКорзина, ВидыОтчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыРаскрытияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыРаскрытияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные.Раздел ИЛИ ТекущиеДанные.Тип = 0 Тогда
		Выполнение = Ложь;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.Раздел И ТекущиеДанные.Тип = 1 Тогда
		Выполнение = Ложь;
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = Новый Структура("Форма,Источник,Значение", ЭтаФорма, Элемент.Имя, ПараметрыПеретаскивания.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыРаскрытияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Значение = ПараметрыПеретаскивания.Значение;
	Если ТипЗнч(Значение) = Тип("Структура") Тогда
		Если Значение.Свойство("Форма") И Значение.Форма = ЭтаФорма И Значение.Свойство("Источник") И Значение.Источник = Элемент.Имя Тогда
			
			СтрокаПриемник = ГруппыРаскрытия.НайтиПоИдентификатору(Строка);
			Если СтрокаПриемник.Тип = 0 Тогда
				Возврат;
			КонецЕсли;
			
			Пока НЕ СтрокаПриемник.ПолучитьРодителя() = Неопределено Цикл
				СтрокаПриемник = СтрокаПриемник.ПолучитьРодителя();
			КонецЦикла;
			
			СтрокаИсточник = ГруппыРаскрытия.НайтиПоИдентификатору(Значение.Значение);
			Пока НЕ СтрокаИсточник.ПолучитьРодителя() = Неопределено Цикл
				СтрокаИсточник = СтрокаИсточник.ПолучитьРодителя();
			КонецЦикла;
			
			Если СтрокаПриемник = СтрокаИсточник Тогда
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыРаскрытияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтрокаИсточник = ГруппыРаскрытия.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение.Значение);
	
	СтрокаПриемник = ГруппыРаскрытия.НайтиПоИдентификатору(Строка);
	
	Если НЕ (СтрокаПриемник.Раздел ИЛИ СтрокаПриемник.Тип = 1) Тогда
		СтрокаПриемник = СтрокаПриемник.ПолучитьРодителя();
	КонецЕсли;
	
	Если СтрокаПриемник.Тип = 1 Тогда
		
		Если СтрокаПриемник.Раздел Тогда
			
			СтрокаАналитики=СтрокаПриемник.ПолучитьЭлементы()[0];
			
		Иначе
			
			СтрокаАналитики=СтрокаПриемник;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаАналитики.ВидСубконто) Тогда
			
			Сообщить(СтрШаблон(НСтр("ru = 'Для аналитики %1 не указан вид субконто.'"), СтрокаАналитики.Имя), СтатусСообщения.Внимание);
			Возврат;
			
		КонецЕсли;
					
		СтрокаПриемник = СтрокаАналитики.ПолучитьЭлементы()[0];
		
	КонецЕсли;
	
	НоваяСтрока = СтрокаПриемник.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
	НоваяСтрока.Тип = СтрокаПриемник.Тип;
	
	Если НоваяСтрока.Тип = 3 И ЗначениеЗаполнено(НоваяСтрока.ВидСубконтоРеквизит) Тогда
		СписокРеквизитов = НоваяСтрока.ПолучитьРодителя().ПолучитьРодителя().ВидСубконтоРеквизиты;
		Если СписокРеквизитов.НайтиПоЗначению(НоваяСтрока.ВидСубконтоРеквизит) = Неопределено Тогда
			НоваяСтрока.ВидСубконтоРеквизит = "";
		КонецЕсли;
	КонецЕсли;
	
	СтрокаИсточник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(СтрокаИсточник);
	
	Элементы.ГруппыРаскрытия.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыРаскрытияПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ГруппыРаскрытия.ТекущиеДанные;
	
	Если ТекущиеДанные.Имя="Реквизиты" Тогда
		
		Отказ=Истина;
		Возврат;
		
	ИначеЕсли ТекущиеДанные.Тип=1 Тогда
		
		Отказ=Истина;
		
		Если НЕ ТекущиеДанные.Раздел Тогда
			
			ТекущиеДанные.ВидСубконто=Неопределено;
			
			ГруппаПрочее=ОбщегоНазначенияКлиентСерверУХ.НайтиСтрокуДерева(ГруппыРаскрытия.ПолучитьЭлементы(),4,"Тип");
			
			Для Каждого СтрРеквизит ИЗ ТекущиеДанные.ПолучитьЭлементы()[0].ПолучитьЭлементы() Цикл
				
				НовыйЭлемент = ГруппаПрочее.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтрРеквизит);
				НовыйЭлемент.Тип = ГруппаПрочее.Тип;
				
			КонецЦикла;
			
			ТекущиеДанные.ПолучитьЭлементы()[0].ПолучитьЭлементы().Очистить();
			
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.Тип > 1 Тогда
		
		Отказ = Истина;
		
		Если НЕ ТекущиеДанные.Тип = 4 Тогда
			
			ЭлементГруппа = ТекущиеДанные.ПолучитьРодителя();
			Пока НЕ ЭлементГруппа.Тип = 0 Цикл
				ЭлементГруппа = ЭлементГруппа.ПолучитьРодителя();
			КонецЦикла;
			
			ГруппаПрочее = Неопределено;
			Для Каждого ЭлементСтрока Из ЭлементГруппа.ПолучитьЭлементы() Цикл
				Если ЭлементСтрока.Тип = 4 Тогда
					ГруппаПрочее = ЭлементСтрока;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			КопируемыеЭлементы = Новый Массив;
			УдаляемыеЭлементы = Новый Массив;
			
			Если ТекущиеДанные.Раздел Тогда
				
				Для Каждого ЭлементСтрока Из ТекущиеДанные.ПолучитьЭлементы() Цикл
					
					КопируемыеЭлементы.Добавить(ЭлементСтрока);
					УдаляемыеЭлементы.Добавить(ЭлементСтрока);
					
				КонецЦикла; 
				
			Иначе
				
				КопируемыеЭлементы.Добавить(ТекущиеДанные);
				УдаляемыеЭлементы.Добавить(ТекущиеДанные);
				
			КонецЕсли;
			
			Для Каждого КопируемыйЭлемент Из КопируемыеЭлементы Цикл
				
				НовыйЭлемент = ГруппаПрочее.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НовыйЭлемент, КопируемыйЭлемент);
				НовыйЭлемент.Тип = ГруппаПрочее.Тип;
				
			КонецЦикла;
			
			Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
				УдаляемыйЭлемент.ПолучитьРодителя().ПолучитьЭлементы().Удалить(УдаляемыйЭлемент);
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьМодель(Команда)
	
	ЗаписатьТекущиеДанные();
	
	ПоместитьДанныеСозданныеОбъекты(Данные, АдресСтруктурыКниг);
	
	ВыполнитьСохранениеМодели(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьМодельЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПрочитатьТекущиеДанные();

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСохранениеМодели(ЗакрытьПослеВыполнения = Ложь)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Сохранение модели'");
	ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Файлы Управления Холдингом (*.hm)|*.hm|Все файлы (*.*)|*.*'");
	ДиалогВыбораФайла.ПолноеИмяФайла = НСтр("ru = 'Модель видов отчетов от '") + Формат(ТекущаяДата(), "ДФ='yyyy.MM.dd HH.mm.ss'");
	ДиалогВыбораФайла.Расширение = "hm";
	
	ДопПараметры = Новый Структура("ЗакрытьПослеВыполнения", ЗакрытьПослеВыполнения);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ВыполнитьСохранениеМодели", ЭтотОбъект, ДопПараметры);
	ДиалогВыбораФайла.Показать(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьСохранениеМодели(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
    
	Если ВыбранныеФайлы = Неопределено Тогда
		ВыполнитьСохранениеМодели = Неопределено;
        Возврат;
    КонецЕсли;
    
    ДвоичныеДанные = СохранитьМодельНаСервере(АдресСтруктурыКниг, ПолучитьСтруктуруГруппРаскрытия(), ПолучитьСтруктуруВидовОтчетов(), Данные["ПравилаИмпортаТаблиц"], Данные["ПараметрыВидовОтчетов"]);
    ДвоичныеДанные.Записать(ВыбранныеФайлы[0]);
    
    Модифицированность = Ложь;
    
    Если ДополнительныеПараметры.ЗакрытьПослеВыполнения = Истина Тогда
        Закрыть();
    КонецЕсли;
    
КонецПроцедуры

&НаСервереБезКонтекста
Функция СохранитьМодельНаСервере(Знач АдресСтруктурыКниг, Знач ГруппыРаскрытия, Знач СтруктураОтчетов, Знач ПравилаИмпортаТаблиц, Знач ПараметрыВидовОтчетов)
	
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	
	СоздатьКаталог(ИмяВременнойПапки + "\ТабличныеДокументы");
	
	СписокФайлов = Новый СписокЗначений;
	
	ПропускаемыеЭлементы = Новый Соответствие; // элементы, которые могли изменить на форме
	ПропускаемыеЭлементы.Вставить("СтруктурыОтчетов");
	ПропускаемыеЭлементы.Вставить("ГруппыРаскрытия");
	ПропускаемыеЭлементы.Вставить("ПравилаИмпортаТаблиц");
	ПропускаемыеЭлементы.Вставить("ПараметрыВидовОтчетов");
	
	Для Каждого ЭлементСтруктурыКниг Из ПолучитьИзВременногоХранилища(АдресСтруктурыКниг) Цикл
		Если НЕ ПропускаемыеЭлементы.Получить(ЭлементСтруктурыКниг.Ключ) = Неопределено Тогда
			Продолжить;
		ИначеЕсли ЭлементСтруктурыКниг.Ключ = "ТабличныеДокументы" Тогда
			Для Каждого ЭлементТабличныйДокумент Из ЭлементСтруктурыКниг.Значение Цикл
				СписокФайлов.Добавить(ЭлементТабличныйДокумент.Значение, "ТабличныеДокументы\" + Формат(ЭлементТабличныйДокумент.Ключ, "ЧГ=;ЧН="));
			КонецЦикла; 
		Иначе
			СписокФайлов.Добавить(ЭлементСтруктурыКниг.Значение, ЭлементСтруктурыКниг.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементСпискаФайлов Из СписокФайлов Цикл
		ИмяФайла = ИмяВременнойПапки + "\" + ЭлементСпискаФайлов.Представление + ".xml";
		ЗаписьXML = Новый ЗаписьXML();
		ЗаписьXML.ОткрытьФайл(ИмяФайла);
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ЭлементСпискаФайлов.Значение);
		ЗаписьXML.Закрыть();
	КонецЦикла; 
	
	ИмяФайла = ИмяВременнойПапки + "\" + НСтр("ru = 'ГруппыРаскрытия.xml'");
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ГруппыРаскрытия);
	ЗаписьXML.Закрыть();
	
	ИмяФайла = ИмяВременнойПапки + "\" + НСтр("ru = 'СтруктураОтчетов.xml'");
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, СтруктураОтчетов);
	ЗаписьXML.Закрыть();
	
	Правила = Новый Соответствие;
	Для Каждого ЭлементПравило Из ПравилаИмпортаТаблиц Цикл
		МассивПравилЛиста = Новый Массив;
		Для Каждого АдресПравила Из ЭлементПравило.Значение Цикл
			МассивПравилЛиста.Добавить(ПолучитьИзВременногоХранилища(АдресПравила));
		КонецЦикла; 
		Правила.Вставить(ЭлементПравило.Ключ, МассивПравилЛиста);
	КонецЦикла; 
	
	ИмяФайла = ИмяВременнойПапки + "\" + НСтр("ru = 'ПравилаИмпортаТаблиц.xml'");
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Правила);
	ЗаписьXML.Закрыть();
	
	ИмяФайла = ИмяВременнойПапки + "\" + НСтр("ru = 'ПараметрыВидовОтчетов.xml'");
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ПараметрыВидовОтчетов);
	ЗаписьXML.Закрыть();
	
	ИмяФайла = ИмяВременнойПапки + "\Info.xml";
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Новый Структура("Name,Version", "ИмпортВидовОтчетов", "0.3"));
	ЗаписьXML.Закрыть();
	
	ИмяВременногоZipФайла = ИмяВременнойПапки + "\zip.zip";
	
	ZipФайл = Новый ЗаписьZipФайла(ИмяВременногоZipФайла);
	ZipФайл.Добавить(ИмяВременнойПапки + "\*.xml", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	ZipФайл.Записать();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоZipФайла);
	
	УдалитьФайлы(ИмяВременнойПапки);
	
	Возврат ДвоичныеДанные;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруГруппРаскрытия()
	
	Структура = Новый Соответствие;
	
	Для Каждого ГруппыЛиста Из Данные.ГруппыРаскрытия Цикл
		
		УправлениеФормойКлиентСерверУХ.РаспаковатьДанныеФормыДерево(ГруппыЛиста.Значение, ГруппыРаскрытия_);
		МассивГруппЛиста = Новый Массив;
		
		Для Каждого СтрокаГруппа Из ГруппыРаскрытия_.ПолучитьЭлементы() Цикл
			
			Группа = Новый Структура("Имя,ИмяОбласти,Аналитики,Показатели,Прочее", СтрокаГруппа.Имя, СтрокаГруппа.ИмяОбласти, Новый Массив, Новый Массив, Новый Массив);
			МассивГруппЛиста.Добавить(Группа);
			
			Для Каждого РазделГруппы Из СтрокаГруппа.ПолучитьЭлементы() Цикл
				
				Если РазделГруппы.Тип = 1 Тогда
					
					Для Каждого СтрокаАналитика Из РазделГруппы.ПолучитьЭлементы() Цикл
						
						Если НЕ ЗначениеЗаполнено(СтрокаАналитика.ВидСубконто) Тогда
							
							Продолжить;
							
						КонецЕсли;
						
						Реквизиты = Новый Массив;
						
						Для Каждого СтрокаРеквизит Из СтрокаАналитика.ПолучитьЭлементы()[0].ПолучитьЭлементы() Цикл
							Реквизиты.Добавить(Новый Структура("Имя,ИмяРеквизита,ИмяОбласти,ТипЗначения,Финансовый", СтрокаРеквизит.Имя, СтрокаРеквизит.ВидСубконтоРеквизит, СтрокаРеквизит.ИмяОбласти, СтрокаРеквизит.ТипЗначения, СтрокаРеквизит.Финансовый));
						КонецЦикла; 
						
						Группа.Аналитики.Добавить(Новый Структура("Имя,ВидСубконто,Реквизиты", СтрокаАналитика.Имя, СтрокаАналитика.ВидСубконто.УникальныйИдентификатор(), Реквизиты));
						
					КонецЦикла; 
					
					
				ИначеЕсли РазделГруппы.Тип = 2 Тогда
					
					Показатели = Группа.Показатели;
					Для Каждого СтрокаПоказатель Из РазделГруппы.ПолучитьЭлементы() Цикл
						Показатели.Добавить(Новый Структура("Имя,ИмяОбласти,ТипЗначения,Финансовый", СтрокаПоказатель.Имя, СтрокаПоказатель.ИмяОбласти, СтрокаПоказатель.ТипЗначения, СтрокаПоказатель.Финансовый));
					КонецЦикла;
					
				ИначеЕсли РазделГруппы.Тип = 4 Тогда
					
					Прочее = Группа.Прочее;
					Для Каждого СтрокаПрочее Из РазделГруппы.ПолучитьЭлементы() Цикл
						Прочее.Добавить(Новый Структура("Имя,ИмяОбласти,ТипЗначения,Финансовый", СтрокаПрочее.Имя, СтрокаПрочее.ИмяОбласти, СтрокаПрочее.ТипЗначения, СтрокаПрочее.Финансовый));
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЦикла; 
		
		Структура.Вставить(ГруппыЛиста.Ключ, МассивГруппЛиста);
		
	КонецЦикла;
	
	Возврат Структура;
	
Конецфункции

&НаСервере
Процедура КонвертироватьСтруктуруГруппыРаскрытияДляФормы(СтруктураГруппРаскрытия)
	
	// [{ АдресЛиста, [ ГруппыРаскрытия ] }] // ГруппаРаскрытия	= ({ Имя, ИмяОбласти, Аналитики:[ ({ Имя, ВидСубконто, Реквизиты:[ ({ Имя, ИмяОбласти }) ] }) ], Показатели:[ ({ Имя, ИмяОбласти }) ], Прочее:[ ({ Имя, ИмяОбласти }) ] })
	
	Для Каждого ЭлементСтруктурыГруппРаскрытия Из СтруктураГруппРаскрытия Цикл
		
		Для Каждого ГруппаРаскрытия Из ЭлементСтруктурыГруппРаскрытия.Значение Цикл
			
			ЭлементГруппа = ГруппыРаскрытия_.ПолучитьЭлементы().Добавить();
			ЭлементГруппа.Имя = ГруппаРаскрытия.Имя;
			ЭлементГруппа.ИмяОбласти = ГруппаРаскрытия.ИмяОбласти;
			
			ЭлементАналитики = ЭлементГруппа.ПолучитьЭлементы().Добавить();
			ЭлементАналитики.Тип = 1;
			ЭлементАналитики.Раздел = Истина;
			ЭлементАналитики.Имя = "Аналитики";
			
			Для Индекс=1 По ЧислоДопАналитик Цикл
				
				ТекАналитика=ЭлементАналитики.ПолучитьЭлементы().Добавить();
				ТекАналитика.Имя="Аналитика"+Индекс;
				ТекАналитика.Тип = 1;
				ТекАналитика.Раздел = Ложь;
				
				ЭлементРеквизиты = ТекАналитика.ПолучитьЭлементы().Добавить();
				ЭлементРеквизиты.Тип = 3;
				ЭлементРеквизиты.Раздел = Истина;
				ЭлементРеквизиты.Имя = "Реквизиты";
				
			КонецЦикла;

			Для Каждого Аналитика Из ГруппаРаскрытия.Аналитики Цикл
				
				ЭлементАналитика = ОбщегоНазначенияКлиентСерверУХ.НайтиСтрокуДерева(ЭлементАналитики.ПолучитьЭлементы(),Аналитика.Имя,"Имя");
				ЭлементАналитика.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПолучитьСсылку(Аналитика.ВидСубконто);
				
				//Если ЗначениеЗаполнено(ЭлементАналитика.ВидСубконто) И ЭлементАналитика.ВидСубконто.ПолучитьОбъект() = Неопределено Тогда
				//	ЭлементАналитика.ВидСубконто = Неопределено;
				//КонецЕсли;
				
				ЭлементРеквизиты = ЭлементАналитика.ПолучитьЭлементы()[0];
								
				Для Каждого Реквизит Из Аналитика.Реквизиты Цикл
					
					ЭлементРеквизит = ЭлементРеквизиты.ПолучитьЭлементы().Добавить();
					ЭлементРеквизит.Тип = ЭлементРеквизиты.Тип;
					ЭлементРеквизит.Имя = Реквизит.Имя;
					ЭлементРеквизит.ВидСубконтоРеквизит = Реквизит.ИмяРеквизита;
					ЭлементРеквизит.ИмяОбласти = Реквизит.ИмяОбласти;
					ЭлементРеквизит.ТипЗначения = Реквизит.ТипЗначения;
					Если НЕ Реквизит.Свойство("Финансовый") Тогда
						Если Реквизит.ТипЗначения = "Число" Тогда
							ЭлементРеквизит.Финансовый = Истина;
						КонецЕсли;
					Иначе
						ЭлементРеквизит.Финансовый = Реквизит.Финансовый;
					КонецЕсли;
					ЭлементРеквизит.ТипЗначенияФинансовый = ТипЗначенияФинансовыйПредставление(ЭлементРеквизит.ТипЗначения, ЭлементРеквизит.Финансовый); 
					
				КонецЦикла; 
				
				Если ЗначениеЗаполнено(ЭлементАналитика.ВидСубконто) И НЕ ЭлементАналитика.ВидСубконто.ПолучитьОбъект() = Неопределено Тогда
					
					СписокРеквизитов = ПолучитьСписокРеквизитов(ЭлементАналитика.ВидСубконто);
					
					Для Каждого Реквизит Из СписокРеквизитов Цикл
						
						Если НЕ ЗначениеЗаполнено(Реквизит.Значение) Тогда
							Продолжить;
						КонецЕсли;
						
						ЭлементАналитика.ВидСубконтоРеквизиты.Добавить(Реквизит.Значение, Реквизит.Значение);
						
					КонецЦикла;
					
					Для Каждого ЭлементРеквизит Из ЭлементРеквизиты.ПолучитьЭлементы() Цикл
						
						Если ЗначениеЗаполнено(ЭлементРеквизит.ВидСубконтоРеквизит) Тогда
							Если НЕ СписокРеквизитов.НайтиПоЗначению(ЭлементРеквизит.ВидСубконтоРеквизит) = Неопределено Тогда
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						
						Реквизит = СписокРеквизитов.НайтиПоЗначению(ЭлементРеквизит.Имя);
						Если Реквизит = Неопределено Тогда
							Если НЕ ПустаяСтрока(ЭлементРеквизит.ВидСубконтоРеквизит) Тогда
								ЭлементРеквизит.ВидСубконтоРеквизит = "";
							КонецЕсли;
						Иначе
							ЭлементРеквизит.ВидСубконтоРеквизит = Реквизит.Значение;
						КонецЕсли;
						
					КонецЦикла; 
					
				КонецЕсли;
				
			КонецЦикла; 
			
			ЭлементПоказатели = ЭлементГруппа.ПолучитьЭлементы().Добавить();
			ЭлементПоказатели.Тип = 2;
			ЭлементПоказатели.Раздел = Истина;
			ЭлементПоказатели.Имя = "Показатели";
			
			ЭлементПрочее = ЭлементГруппа.ПолучитьЭлементы().Добавить();
			ЭлементПрочее.Тип = 4;
			ЭлементПрочее.Раздел = Истина;
			ЭлементПрочее.Имя = "Прочее";
						
			Для Каждого Показатель Из ГруппаРаскрытия.Показатели Цикл
				ЭлементПоказатель = ЭлементПоказатели.ПолучитьЭлементы().Добавить();
				ЭлементПоказатель.Тип = ЭлементПоказатели.Тип;
				ЭлементПоказатель.Имя = Показатель.Имя;
				ЭлементПоказатель.ИмяОбласти = Показатель.ИмяОбласти;
				ЭлементПоказатель.ТипЗначения = Показатель.ТипЗначения;
				Если НЕ Показатель.Свойство("Финансовый") Тогда 
					Если Показатель.ТипЗначения = "Число" Тогда
						ЭлементПоказатель.Финансовый = Истина;
					КонецЕсли;
				Иначе
					ЭлементПоказатель.Финансовый = Показатель.Финансовый;
				КонецЕсли;
				ЭлементПоказатель.ТипЗначенияФинансовый = ТипЗначенияФинансовыйПредставление(ЭлементПоказатель.ТипЗначения, ЭлементПоказатель.Финансовый); 
			КонецЦикла; 
			
			Для Каждого Прочее Из ГруппаРаскрытия.Прочее Цикл
				ЭлементПрочееСтрока = ЭлементПрочее.ПолучитьЭлементы().Добавить();
				ЭлементПрочееСтрока.Тип = ЭлементПрочее.Тип;
				ЭлементПрочееСтрока.Имя = Прочее.Имя;
				ЭлементПрочееСтрока.ИмяОбласти = Прочее.ИмяОбласти;
				ЭлементПрочееСтрока.ТипЗначения = Прочее.ТипЗначения;
				Если НЕ Прочее.Свойство("Финансовый") Тогда 
					Если Прочее.ТипЗначения = "Число" Тогда
						ЭлементПрочееСтрока.Финансовый = Истина;
					КонецЕсли;
				Иначе
					ЭлементПрочееСтрока.Финансовый = Прочее.Финансовый;
				КонецЕсли;
				ЭлементПрочееСтрока.ТипЗначенияФинансовый = ТипЗначенияФинансовыйПредставление(ЭлементПрочееСтрока.ТипЗначения, ЭлементПрочееСтрока.Финансовый); 
			КонецЦикла; 
			
		КонецЦикла;
		
		Данные.ГруппыРаскрытия.Вставить(ЭлементСтруктурыГруппРаскрытия.Ключ, УправлениеФормойКлиентСерверУХ.УпаковатьДанныеФормыДерево(ГруппыРаскрытия_, ГруппыРаскрытияКолонки));
		ГруппыРаскрытия_.ПолучитьЭлементы().Очистить();
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруВидовОтчетов()
	
	СтруктураОтчетов = Новый Структура("Индексы,ВидыОтчетов,ВидыОтчетовКорзина", Новый Соответствие, Новый Массив, Новый Массив);
	
	Для НомерКоллекции = 1 По 2 Цикл
		
		Если НомерКоллекции = 1 Тогда
			КоллекцияВидыОтчетов = ВидыОтчетов;
			МассивОтчетов = СтруктураОтчетов.ВидыОтчетов;
		Иначе
			КоллекцияВидыОтчетов = ВидыОтчетовКорзина;
			МассивОтчетов = СтруктураОтчетов.ВидыОтчетовКорзина;
		КонецЕсли;
		
		Для Каждого Книга Из КоллекцияВидыОтчетов.ПолучитьЭлементы() Цикл
			
			ОписаниеКниги = Новый Структура("Имя,Тип,Элементы", Книга.Имя, ?(Книга.Тип = 0, "Отчеты", "Документы"), Новый Массив);
			МассивОтчетов.Добавить(ОписаниеКниги);
			
			Для Каждого Лист Из Книга.ПолучитьЭлементы() Цикл
				
				ИндексЛиста = СтруктураОтчетов.Индексы.Количество();
				СтруктураОтчетов.Индексы.Вставить(ИндексЛиста, Лист.Индекс);
				
				ОписаниеЛиста = Новый Структура("Имя,Индекс,Элементы", Лист.Имя, ИндексЛиста, Новый Массив);
				ОписаниеКниги.Элементы.Добавить(ОписаниеЛиста);
				
				Для Каждого Правило Из Лист.ПолучитьЭлементы() Цикл
					
					ИндексПравила = СтруктураОтчетов.Индексы.Количество();
					СтруктураОтчетов.Индексы.Вставить(ИндексПравила, Правило.Индекс);
					
					ОписаниеПравила = Новый Структура("Имя,Индекс", Правило.Имя, ИндексПравила);
					ОписаниеЛиста.Элементы.Добавить(ОписаниеПравила);
					
				КонецЦикла; 
				
			КонецЦикла; 
			
		КонецЦикла;
		
	КонецЦикла; 
	
	Возврат СтруктураОтчетов;
	
Конецфункции

&НаСервере
Функция ВосстановитьСтруктуруВидовОтчетов(МассивСтруктурОтчетов)
	
	ВосстановленныеКниги = Новый Соответствие;
	
	Для Каждого СтруктураОтчетов Из МассивСтруктурОтчетов Цикл
		
		Индексы = СтруктураОтчетов.Индексы;
		
		Для НомерКоллекции = 1 По 2 Цикл
			
			Если НомерКоллекции = 1 Тогда
				КоллекцияВидыОтчетов = ВидыОтчетов;
				МассивОтчетов = СтруктураОтчетов.ВидыОтчетов;
			Иначе
				КоллекцияВидыОтчетов = ВидыОтчетовКорзина;
				МассивОтчетов = СтруктураОтчетов.ВидыОтчетовКорзина;
			КонецЕсли;
			
			Для Каждого ВидОтчета Из МассивОтчетов Цикл
				
				ЭлементВидОтчета = КоллекцияВидыОтчетов.ПолучитьЭлементы().Добавить();
				ЭлементВидОтчета.Индекс = -1;
				ЭлементВидОтчета.Имя = ВидОтчета.Имя;
				ЭлементВидОтчета.Тип = ?(ВидОтчета.Тип = "Отчеты", 0, 3);
				
				ВосстановленныеКниги.Вставить(ЭлементВидОтчета.Имя, Истина);
				
				Для Каждого Лист Из ВидОтчета.Элементы Цикл
					
					Индекс = Индексы[Лист.Индекс];
					Если Индекс = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ЭлементЛист = ЭлементВидОтчета.ПолучитьЭлементы().Добавить();
					ЭлементЛист.Имя = Лист.Имя;
					ЭлементЛист.Индекс = Индекс;
					ЭлементЛист.Тип = ?(ЭлементВидОтчета.Тип = 0, 1, 4);
					
					Если ЭлементВидОтчета.Тип = 1 Тогда
						ЭлементЛист.ТолькоПросмотр = НЕ Данные["СозданныеВидыОтчетов"][Индекс] = Неопределено;
					КонецЕсли;
					
					Для Каждого ПравилоПроверки Из Лист.Элементы Цикл
						
						Индекс = Индексы[ПравилоПроверки.Индекс];
						Если Индекс = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						ЭлементПравило = ЭлементЛист.ПолучитьЭлементы().Добавить();
						ЭлементПравило.Имя = ПравилоПроверки.Имя;
						ЭлементПравило.Индекс = Индекс;
						ЭлементПравило.Тип = 2;
						
					КонецЦикла; 
					
				КонецЦикла; 
				
			КонецЦикла; 
			
		КонецЦикла;
		
	КонецЦикла; 
	
	Возврат ВосстановленныеКниги; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокРеквизитов(Знач ВидСубконто)
	
	Реквизиты = Новый СписокЗначений;
	
	Тип = ВидСубконто.ТипЗначения.Типы()[0];
	
	Попытка
		МетаданныеТипаСубконто = Метаданные.НайтиПоТипу(Тип);
	Исключение
		Возврат Реквизиты;
	КонецПопытки;
	
	ТипВсеСправочники = Справочники.ТипВсеСсылки();
	ТипВсеПеречисления = Перечисления.ТипВсеСсылки();
	
	КоллекцииРеквизитов = Новый Массив;
	Если ТипВсеПеречисления.СодержитТип(Тип) Тогда
		КоллекцияРеквизитов = Новый Массив;
		КоллекцияРеквизитов.Добавить(Новый Структура("Имя,Синоним,Тип", "Наименование", "Наименование", Новый ОписаниеТипов("Строка")));
		КоллекцииРеквизитов.Добавить(КоллекцияРеквизитов);
	Иначе
		КоллекцииРеквизитов.Добавить(МетаданныеТипаСубконто.СтандартныеРеквизиты);
		КоллекцииРеквизитов.Добавить(МетаданныеТипаСубконто.Реквизиты);
	КонецЕсли;
	
	
	Префиксы = Новый Массив;
	Префиксы.Добавить("");
	Префиксы.Добавить("");
	
	Для Каждого КоллекцияРеквизитов Из КоллекцииРеквизитов Цикл
		
		Префикс = Префиксы[0];
		Префиксы.Удалить(0);
		
		Для Каждого Реквизит Из КоллекцияРеквизитов Цикл
			
			Имя = Реквизит.Имя;
			
			Если Имя = "ЭтоГруппа" ИЛИ Имя = "Ссылка" ИЛИ Имя = "Предопределенный" ИЛИ Имя = "Родитель" ИЛИ Имя = "ПометкаУдаления" Тогда
				Продолжить;
			КонецЕсли;
			
			Если Лев(Имя, 4) = "НСИ_" Тогда
				Продолжить;
			КонецЕсли;
			
			Типы = Реквизит.Тип.Типы();
			
			Если Типы.Количество() > 1 Тогда
				Продолжить;
			КонецЕсли;
			
			Тип = Типы[0];
			
			Если Тип = Тип("Строка") ИЛИ Тип = Тип("Число") ИЛИ Тип = Тип("Дата") ИЛИ Тип = Тип("Булево") Тогда
				
				Реквизиты.Добавить(Префикс + Имя, Реквизит.Синоним);
				
			ИначеЕсли Префикс = "" Тогда
				
				Если ТипВсеПеречисления.СодержитТип(Тип) Тогда
					
					Реквизиты.Добавить(Префикс + Имя + ".Наименование", Реквизит.Синоним);
					
				ИначеЕсли ТипВсеСправочники.СодержитТип(Тип) Тогда
					
					МетаданныеТипаРеквизита = Метаданные.НайтиПоТипу(Тип);
					КоллекцииРеквизитов.Добавить(МетаданныеТипаРеквизита.СтандартныеРеквизиты);
					КоллекцииРеквизитов.Добавить(МетаданныеТипаРеквизита.Реквизиты);
					
					Префиксы.Добавить(Префикс + Имя + ".");
					Префиксы.Добавить(Префикс + Имя + ".");
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЦикла;
	
	Возврат Реквизиты;
	
КонецФункции

&НаКлиенте
Процедура ГруппыРаскрытияВидСубконтоОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ГруппыРаскрытия.ТекущиеДанные;
	
	ТекущиеДанные.ВидСубконтоРеквизиты.Очистить();
	
	Для Каждого Строка Из ТекущиеДанные.ПолучитьЭлементы()[0].ПолучитьЭлементы() Цикл
		
		Строка.ВидСубконтоРеквизит = "";
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьТипБД(АдресВременногоХранилища, ТипБД)
	
	ТипыБД = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Если ЗначениеЗаполнено(ТипБД) Тогда
		ТипыБД[0].Вставить(0, ТипБД.УникальныйИдентификатор());
		Обработки.ИмпортВидовОтчетовИзЭлектронныхТаблицMicrosoftExcel.ОбновитьСериализованноеЗначение(ТипыБД[1], 0, ТипБД);
	Иначе
		ТипыБД[0].Удалить(0);
		ТипыБД[0].Удалить(0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьБлокировкиВидовОтчетов()
	
	ДанныеСозданныеВидыОтчетов = ПолучитьИзВременногоХранилища(Данные["СозданныеОбъекты_ВидОтчета"])[0];
	ДанныеСозданныеПакетыИмпорта = ПолучитьИзВременногоХранилища(Данные["СозданныеОбъекты_ПакетИмпорта"])[0];
	
	Для Каждого Контейнер Из ВидыОтчетов.ПолучитьЭлементы() Цикл
		
		Если Контейнер.Тип = 0 Тогда
		
			ВесьКонтейнерТолькоПросмотр = Истина;
			
			Для Каждого ВидОтчета Из Контейнер.ПолучитьЭлементы() Цикл
				
				ВидОтчета.ТолькоПросмотр = НЕ ДанныеСозданныеВидыОтчетов[ВидОтчета.Индекс] = Неопределено;
				
				Для Каждого ПравилоПроверки Из ВидОтчета.ПолучитьЭлементы() Цикл
					ПравилоПроверки.ТолькоПросмотр = ВидОтчета.ТолькоПросмотр;
				КонецЦикла; 
					
				Если ВесьКонтейнерТолькоПросмотр И НЕ ВидОтчета.ТолькоПросмотр Тогда
					ВесьКонтейнерТолькоПросмотр = Ложь;
				КонецЕсли;
				
			КонецЦикла; 
			
			Контейнер.ТолькоПросмотр = ВесьКонтейнерТолькоПросмотр;
			
		Иначе
			
			Контейнер.ТолькоПросмотр = НЕ ДанныеСозданныеПакетыИмпорта[Контейнер.Имя] = Неопределено;
			
			Для Каждого Таблица Из Контейнер.ПолучитьЭлементы() Цикл
				Таблица.ТолькоПросмотр = Контейнер.ТолькоПросмотр;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры
&НаКлиенте
Процедура ВидыОтчетовКорзинаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Файл_Тип3ПриИзменении(Элемент)
	
	ТипФайлаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура Файл_Тип0ПриИзменении(Элемент)
	
	ТипФайлаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипФайлаПриИзменении()
	
	ТекущиеДанные = Элементы.ВидыОтчетов.ТекущиеДанные;
	
	ТекущиеДанные.Тип = Бланк_Тип;
	
	Для Каждого Элемент Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		Элемент.Тип = ТекущиеДанные.Тип + 1;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВидОтчета(Команда)
	
	ТекущиеДанные = Элементы.ВидыОтчетов.ТекущиеДанные;
	
	Если ТекущиеДанные.Тип = 1 ИЛИ ТекущиеДанные.Тип = 3 Тогда
		Если ТекущиеДанные.ТолькоПросмотр Тогда
			Если ТекущиеДанные.Тип = 1 Тогда
				ПоказатьПредупреждение(, "Вид отчета уже создан!");
			Иначе
				ПоказатьПредупреждение(, "Пакет правил импорта уже создан!");
			КонецЕсли;
			Возврат;
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Для создания одного вида отчета или пакета импорта выберите строку с видом отчета или строку с книгой 
								|для импорта в документы!'"));
		Возврат;
	КонецЕсли;
	
	СоздатьВидыОтчетов_(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНастройкиСозданияОтчетов(Команда)
	
	ОткрытьФорму("Обработка.ИмпортВидовОтчетовИзЭлектронныхТаблицMicrosoftExcel.Форма.НастройкиСозданияОтчетов", Новый Структура("ТипБД", Данные["СозданныеОбъекты_ТипБД"]), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтвязатьВидОтчета(Команда)
	
	ТекущиеДанные = Элементы.ВидыОтчетов.ТекущиеДанные;
	Если ТекущиеДанные.Тип = 1 ИЛИ ТекущиеДанные.Тип = 3 Тогда
		Если НЕ ТекущиеДанные.ТолькоПросмотр Тогда
			Если ТекущиеДанные.Тип = 1 Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Вид отчета еще не создан!'"));
			Иначе
				ПоказатьПредупреждение(, НСтр("ru = 'Пакет правил импорта еще не создан!'"));
			КонецЕсли;
			Возврат;
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.Тип = 4 Тогда
		Если НЕ ТекущиеДанные.ТолькоПросмотр Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Пакет правил импорта еще не создан!'"));
			Возврат;
		КонецЕсли;
	Иначе	
		ПоказатьПредупреждение(, НСтр("ru = 'Для отвязывания выберите строку с созданным видом отчета или пакетом правил импорта!'"));
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Тип = 1 Тогда
		ОтвязатьВидОтчетаНаСервере(ТекущиеДанные.Индекс, Данные["СозданныеОбъекты_ВидОтчета"], Данные["СозданныеОбъекты_Показатель"]);
	Иначе
		ОтвязатьПакетИмпортаНаСервере(ТекущиеДанные.Имя, Данные["СозданныеОбъекты_ПакетИмпорта"]);
	КонецЕсли;
	
	ОбновитьБлокировкиВидовОтчетов();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтвязатьВидОтчетаНаСервере(АдресЛиста, АдресВидыОтчета, АдресПоказатели)
	
	ВидыОтчетов = ПолучитьИзВременногоХранилища(АдресВидыОтчета);
	ВидыОтчетов[0].Удалить(АдресЛиста);
	ВидыОтчетов[1].Удалить(АдресЛиста);
	
	АдресСледующегоЛиста = АдресЛиста + 17180934145;
	
	Показатели = ПолучитьИзВременногоХранилища(АдресПоказатели);
	УдаляемыеПоказатели = Новый Массив;
	Для Каждого ЭлементПоказатель Из Показатели[0] Цикл
		Если ЭлементПоказатель.Ключ >= АдресЛиста И ЭлементПоказатель.Ключ < АдресСледующегоЛиста Тогда
			УдаляемыеПоказатели.Добавить(ЭлементПоказатель.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Показатели0 = Показатели[0];
	Показатели1 = Показатели[1];
	Для Каждого УдаляемыйПоказатель Из УдаляемыеПоказатели Цикл
		Показатели0.Удалить(УдаляемыйПоказатель);
		Показатели1.Удалить(УдаляемыйПоказатель);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтвязатьПакетИмпортаНаСервере(ИмяКниги, АдресПакетИмпорта)
	
	ПакетыИмпорта = ПолучитьИзВременногоХранилища(АдресПакетИмпорта);
	ПакетыИмпорта[0].Удалить(ИмяКниги);
	ПакетыИмпорта[1].Удалить(ИмяКниги);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаИмпортаТаблицВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ПравилаИмпортаТаблиц.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	ПравилаИмпортаТаблицИзменить(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаИмпортаТаблицПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ВидыОтчетовТекущиеДанные = Элементы.ВидыОтчетов.ТекущиеДанные;
	
	Если ВидыОтчетовТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидыОтчетовТекущиеДанные.ТолькоПросмотр Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Пакет правил импорта уже создан!'"));
		Возврат;
	КонецЕсли;
	
	ПравилаИмпортаТаблицИзменить()
		
КонецПроцедуры

&НаКлиенте
Процедура ПравилаИмпортаТаблицПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ВидыОтчетовТекущиеДанные = Элементы.ВидыОтчетов.ТекущиеДанные;
	
	Если ВидыОтчетовТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидыОтчетовТекущиеДанные.ТолькоПросмотр Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Пакет правил импорта уже создан!'"));
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПравилаИмпортаТаблиц.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(ТекущиеДанные.Адрес);
	
	Отказ = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаИмпортаТаблицПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ПравилаИмпортаТаблиц.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПравилаИмпортаТаблицИзменить(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаИмпортаТаблицИзменить(ТекущиеДанные = Неопределено)
	
	РежимДобавлениеНовогоПравила = ТекущиеДанные = Неопределено;
	
	ИмяФайла = Данные.Листы[Бланк_Индекс].Книга;
	ИмяЛиста = Данные.Листы[Бланк_Индекс].Имя;
	
	ИмяТаблицы = ОбщегоНазначенияMicrosoftExcelКлиентСерверУХ.ИмяЛистаCOM2ADO(ИмяЛиста);
	
	Параметр = Новый Структура;
	Параметр.Вставить("Файл", Данные.АдресаXLS[ИмяФайла]);
	Параметр.Вставить("ИмяФайла", ИмяФайла);
	Параметр.Вставить("ИмяТаблицы", ИмяТаблицы);
	Параметр.Вставить("СохраненнаяНастройка", ?(РежимДобавлениеНовогоПравила, Неопределено, ТекущиеДанные.Адрес));

	ОткрытьФорму("Обработка.ИмпортДанныхИзЭлектронныхТаблицMicrosoftExcel.Форма", Новый Структура("Параметр", Параметр), ЭтаФорма, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьДанныеСозданныеОбъекты(Данные, СозданныеОбъекты, УникальныйИдентификатор)
	
	УдаляемыеЭлементы = Новый Массив;
	
	Для Каждого ЭлементДанных Из Данные Цикл
		Если Лев(ЭлементДанных.Ключ, СтрДлина("СозданныеОбъекты_")) = "СозданныеОбъекты_" Тогда
			УдаляемыеЭлементы.Добавить(ЭлементДанных.Ключ);
		КонецЕсли;
	КонецЦикла; 
	
	Для Каждого ЭлементДанных Из УдаляемыеЭлементы Цикл
		Данные.Удалить(ЭлементДанных);
	КонецЦикла; 
	
	Если ТипЗнч(СозданныеОбъекты) = Тип("Строка") Тогда
		СтруктураКниг = ПолучитьИзВременногоХранилища(СозданныеОбъекты);
		СозданныеОбъекты_ = СтруктураКниг.СозданныеОбъекты;
	Иначе
		СозданныеОбъекты_ = СозданныеОбъекты;
	КонецЕсли;
	
	Для Каждого ЭлементСозданныхОбъектов Из СозданныеОбъекты_ Цикл
		
		Значение = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(ЭлементСозданныхОбъектов.Значение));
		
		Данные.Вставить("СозданныеОбъекты_" + ЭлементСозданныхОбъектов.Ключ, ПоместитьВоВременноеХранилище(Значение, УникальныйИдентификатор));
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПоместитьДанныеСозданныеОбъекты(Данные, АдресСтруктурыКниг)
	
	СтруктураКниг = ПолучитьИзВременногоХранилища(АдресСтруктурыКниг);
	
	СтруктураКниг.СозданныеОбъекты.Очистить();
	
	Для Каждого ЭлементДанных Из Данные Цикл
		
		Если Лев(ЭлементДанных.Ключ, СтрДлина("СозданныеОбъекты_")) = "СозданныеОбъекты_" Тогда
			
			Значение = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(ПолучитьИзВременногоХранилища(ЭлементДанных.Значение)));
			
			СтруктураКниг.СозданныеОбъекты.Вставить(Сред(ЭлементДанных.Ключ, СтрДлина("СозданныеОбъекты_") + 1), Значение);
			
		КонецЕсли;
		
	КонецЦикла; 
	
	ПоместитьВоВременноеХранилище(СтруктураКниг, АдресСтруктурыКниг);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипЗначенияФинансовыйПредставление(ТипЗначения, Финансовый = Ложь)
	
	Если НЕ ЗначениеЗаполнено(ТипЗначения) Тогда
		Возврат ТипЗначенияФинансовыйПредставление("Число", Истина);
	ИначеЕсли ТипЗначения = "Число" Тогда
		Возврат "Число - " + ?(Финансовый, "финансовый", "нефинансовый");
	Иначе
		Возврат ТипЗначения;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ГруппыРаскрытияТипЗначенияФинансовыйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(ТипЗначенияФинансовыйПредставление("Число", Истина));
	ДанныеВыбора.Добавить(ТипЗначенияФинансовыйПредставление("Число", Ложь));
	ДанныеВыбора.Добавить(ТипЗначенияФинансовыйПредставление("Строка"));
	ДанныеВыбора.Добавить(ТипЗначенияФинансовыйПредставление("Дата"));
	ДанныеВыбора.Добавить(ТипЗначенияФинансовыйПредставление("Булево"));
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыРаскрытияТипЗначенияФинансовыйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ГруппыРаскрытия.ТекущиеДанные;
	
	Если ВыбранноеЗначение = ТипЗначенияФинансовыйПредставление("Число", Истина) Тогда
		
		ТекущиеДанные.ТипЗначения = "Число";
		ТекущиеДанные.Финансовый = Истина;
		
	Иначе
		
		ТекущиеДанные.Финансовый = Ложь;
		
		Если ВыбранноеЗначение = ТипЗначенияФинансовыйПредставление("Число", Ложь) Тогда
			ТекущиеДанные.ТипЗначения = "Число";
		ИначеЕсли ВыбранноеЗначение = ТипЗначенияФинансовыйПредставление(ВыбранноеЗначение) Тогда
			ТекущиеДанные.ТипЗначения = ВыбранноеЗначение;
		Иначе
			ТекущиеДанные.ТипЗначения = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыРаскрытияТипЗначенияФинансовыйОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ГруппыРаскрытия.ТекущиеДанные;
	ТекущиеДанные.ТипЗначения = "";
	ТекущиеДанные.Финансовый = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыРаскрытияПередРазворачиванием(Элемент, Строка, Отказ)
	
	ТекСтрока=ГруппыРаскрытия.НайтиПоИдентификатору(Строка);
	
	Если ТекСтрока.Тип=1 И (НЕ (ТекСтрока.Раздел ИЛИ ЗначениеЗаполнено(ТекСтрока.ВидСубконто))) Тогда
		
		Отказ=Истина;
		
	КонецЕсли;
	
КонецПроцедуры
