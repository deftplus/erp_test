#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Процедура ВыполнитьРеструктуризациюБланков() Экспорт
			
	Возврат;
			
КонецПроцедуры

Функция ПолучитьИменаОбластейРаскрытия(текМакет,имяОбласти,тКэшОбластейРаскрытия)
	
	МассивИмен = Новый Массив;
	
	тКоординатавМакете = текМакет.Области.Найти(имяОбласти);
	Если тКоординатавМакете = Неопределено Тогда
		Возврат МассивИмен;
	КонецЕсли;	
		
	Для Каждого стробластьРаскрытия Из текМакет.Области Цикл
		
		Если стробластьРаскрытия.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда		
			
			Если  тКоординатавМакете.Верх >= стробластьРаскрытия.Верх И тКоординатавМакете.Низ<=стробластьРаскрытия.Низ Тогда 
				МассивИмен.Добавить(Сред(стробластьРаскрытия.Имя,18,32));
			КонецЕсли;	
		КонецЕсли;	
		
		Если стробластьРаскрытия.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда
			
			Если  тКоординатавМакете.Лево >= стробластьРаскрытия.Лево И тКоординатавМакете.Право<=стробластьРаскрытия.Право Тогда 
				МассивИмен.Добавить(Сред(стробластьРаскрытия.Имя,18,32));
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат МассивИмен;
	
КонецФункции	

Функция ПроверитьСуществованиеТекущегоПоляВГруппеРаскрытия(тАналитикиПоказателя,ПолеКод)
	
	АналитикаЕстьВТекущейСтруктуре = Ложь;
	
	Если ПолеКод = "Организация" ИЛИ ПолеКод = "ПериодОтчета" ИЛИ ПолеКод = "Сценарий" ИЛИ ПолеКод = "Проект" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Для Инд = 1 По 6 Цикл	 
		Если тАналитикиПоказателя["ВидАналитики"+Инд+"Код"] = ПолеКод Тогда 
			АналитикаЕстьВТекущейСтруктуре = Истина;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	
	Возврат АналитикаЕстьВТекущейСтруктуре;
	
КонецФункции

Функция нРеструктуризироватьТекущийКэшОтборов(тАналитикиПоказателя,тРасшифровкаОтборов,нРасшифровкаОтборов)

	Для Каждого СтрОтбор Из  тРасшифровкаОтборов Цикл
		
		ЕстьАналитика = Ложь;
		
		Если СтрОтбор.ПолеКод = "Организация" ИЛИ СтрОтбор.ПолеКод = "ПериодС" ИЛИ СтрОтбор.ПолеКод = "Сценарий" ИЛИ СтрОтбор.ПолеКод = "Проект" ИЛИ СтрОтбор.ПолеКод = "ПериодПо" Тогда
			ЕстьАналитика = Истина;
		КонецЕсли;	 
		
		Для Инд = 1 По 6 Цикл	 
			Если тАналитикиПоказателя["ВидАналитики"+Инд+"Код"] = СтрОтбор.ПолеКод Тогда 
				ЕстьАналитика = Истина;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	
		
		Если ЕстьАналитика Тогда
			нСтрока = нРасшифровкаОтборов.Добавить();
			ЗаполнитьЗначенияСвойств(нСтрока,СтрОтбор);
		КонецЕсли;	
				
	КонецЦикла;
	
	тХэшГруппыОтборов = Обработки.АналитическийБланк.ПолучитьХэшПоОтборам(нРасшифровкаОтборов);
	Возврат тХэшГруппыОтборов;
	
КонецФункции

Процедура ОбработатьПереносПоказателяВО() Экспорт

	тИзменяемыхБланков = Новый ТаблицаЗначений;
	тИзменяемыхБланков.Колонки.Добавить("Бланк",Новый ОписаниеТипов("СправочникСсылка.БланкиОтчетов"));
	тИзменяемыхБланков.Колонки.Добавить("ПолеТабличногоДокументаМакет",Новый ОписаниеТипов("ТабличныйДокумент"));
	тИзменяемыхБланков.Колонки.Добавить("ОбъектАБ",Новый ОписаниеТипов("ОбработкаОбъект.АналитическийБланк"));

	тИзменяемыхОперандов  = Новый ТаблицаЗначений;
	тИзменяемыхОперандов.Колонки.Добавить("ТекущийУид");
	тИзменяемыхОперандов.Колонки.Добавить("НовыйУид");
	тИзменяемыхОперандов.Колонки.Добавить("Показатель");
	тИзменяемыхОперандов.Колонки.Добавить("ИмяВФормуле");
	тИзменяемыхОперандов.Колонки.Добавить("Бланк");
	тИзменяемыхОперандов.Колонки.Добавить("ПолеТабличногоДокументаМакет");
	
	//Выбираем существующие измененные показатели из бланков 	
    Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	КэшИменОбластейПоказателей.ИмяОбласти КАК ИмяОбласти,
	               |	КэшИменОбластейПоказателей.УидГруппыОтборов КАК УидГруппыОтборов,
	               |	КэшИменОбластейПоказателей.Бланк КАК Бланк,
	               |	КэшИменОбластейПоказателей.Показатель КАК Показатель,
				   |	КэшИменОбластейПоказателей.Показатель.Владелец КАК ВидОтчета,
				   |	КэшИменОбластейПоказателей.Показатель.Владелец.Код КАК ВидОтчетаКод,
				   |	КэшИменОбластейПоказателей.Показатель.ТипЗначения КАК ПоказательТипЗначения
	               |ИЗ
	               |	РегистрСведений.КэшИменОбластейПоказателей КАК КэшИменОбластейПоказателей
	               |ГДЕ
	               |	КэшИменОбластейПоказателей.Показатель В(&Показатель)
	               |	И КэшИменОбластейПоказателей.Бланк.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Показатель",ИзмененныеПоказатели.ВыгрузитьКолонку("ПоказательОтчета"));
		
	тРазличныеБланки = Запрос.Выполнить().Выгрузить();
	тРазличныеБланки.Свернуть("Бланк");
	
	Для Каждого стрБланк Из тРазличныеБланки Цикл	
		нСтр 								=  тИзменяемыхБланков.Добавить();
		нСтр.Бланк 							= стрБланк.Бланк;
		нСтр.ПолеТабличногоДокументаМакет 	= Новый ТабличныйДокумент;
		ОбъектАБ = Обработки.АналитическийБланк.Создать();
		Обработки.АналитическийБланк.ПрочитатьНастройкиАналитическогоБланка(нСтр.ПолеТабличногоДокументаМакет,нСтр.Бланк,ОбъектАБ);
        нСтр.ОбъектАБ = ОбъектАБ;	
		АналитическийБланкГенерацияМакетаУХСервер.ПодготовитьКэшСГруппировками(нСтр.ПолеТабличногоДокументаМакет,нСтр.ОбъектАБ);
	КонецЦикла;	

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
			
		тРабочаяЗаписьБланка = тИзменяемыхБланков.НайтиСтроки(Новый Структура("Бланк",Выборка.Бланк))[0];

		ОбластьРасшифровка_ = тРабочаяЗаписьБланка.ПолеТабличногоДокументаМакет.Области.Найти(Выборка.ИмяОбласти);
		Если ОбластьРасшифровка_ = Неопределено Тогда
			 Продолжить;
		КонецЕсли;	
		
		ОбластьРасшифровка 					= ОбластьРасшифровка_.Расшифровка;
        ОбластьРасшифровка.ВидОтчета        = Выборка.ВидОтчета;
		ОбластьРасшифровка.ВидОтчетаКод     = СокрЛП(Выборка.ВидОтчетаКод);
		ОбластьРасшифровка_.Имя 			= ПолучитьИмяСледующейОбласти(тРабочаяЗаписьБланка.ПолеТабличногоДокументаМакет,Выборка.ВидОтчета,ОбластьРасшифровка.ПоказательКод);
		ОбластьРасшифровка_.Текст           = ОбластьРасшифровка.ВидОтчетаКод+"."+ОбластьРасшифровка.ПоказательКод;
		
		тКэшОбластей 						= тРабочаяЗаписьБланка.ОбъектАБ.КэшИменОбластейПоказателей.НайтиСтроки(Новый Структура("ИмяОбласти",Выборка.ИмяОбласти));
		Для Каждого стрКэш Из тКэшОбластей Цикл
			стрКэш.ИмяОбласти = ОбластьРасшифровка_.Имя;
			стрКэш.ВидОтчета =  Выборка.ВидОтчета;
		КонецЦикла;	
		
	КонецЦикла;
	
	
	//Сохраняем измененные  бланки
	Для Каждого СтрБланк Из  тИзменяемыхБланков Цикл	 
		Попытка
			Отказ = Ложь;
			//АналитическийБланкУХСервер.ПроверитьНеСуществующиеОбласти(СтрБланк.ПолеТабличногоДокументаМакет,СтрБланк.ОбъектАБ);				
			АналитическийБланкГенерацияМакетаУХСервер.ПодготовитьКэшСГруппировками(СтрБланк.ПолеТабличногоДокументаМакет,СтрБланк.ОбъектАБ);		 
			Обработки.АналитическийБланк.ЗаписатьНастройкиАналитическогоБланка(СтрБланк.ПолеТабличногоДокументаМакет,СтрБланк.Бланк,СтрБланк.ОбъектАБ,Отказ);		 		 
			БланкОбъект = СтрБланк.Бланк.ПолучитьОбъект();
			БланкОбъект.ОбменДанными.Загрузка = Истина;
			БланкОбъект.Записать();	 
		Исключение	 
			
			ТекстСообщения = НСтр("ru = 'При реструктутризации бланка %Бланк% произошла ошибка
			|			%ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Бланк%", Строка(СтрБланк.Бланк));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Строка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.БланкиОтчетов,
			СтрБланк.Бланк, 
			ТекстСообщения);
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			
		КонецПопытки;	 
	Конеццикла;	

	//Выбираем существующие измененные показатели из формул бланков 	
	тИзменяемыхБланков.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РасшифровкаФормулОбластейПоказателей.УидГруппыОтборов КАК УидГруппыОтборов,
	               |	РасшифровкаФормулОбластейПоказателей.Бланк КАК Бланк,
	               |	РасшифровкаФормулОбластейПоказателей.Показатель КАК Показатель,
				   |	РасшифровкаФормулОбластейПоказателей.ВидОтчета КАК ВидОтчета,
				   |	РасшифровкаФормулОбластейПоказателей.ВидОтчетаКод КАК ВидОтчетаКод
	               |ИЗ
	               |	РегистрСведений.РасшифровкаФормулОбластейПоказателей КАК РасшифровкаФормулОбластейПоказателей
	               |ГДЕ
	               |	РасшифровкаФормулОбластейПоказателей.Показатель В(&Показатель)
	               |	И РасшифровкаФормулОбластейПоказателей.Бланк.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Показатель",ИзмененныеПоказатели.ВыгрузитьКолонку("ПоказательОтчета"));
		
	тРазличныеБланки = Запрос.Выполнить().Выгрузить();
	тРазличныеБланки.Свернуть("Бланк");
	
	Для Каждого стрБланк Из тРазличныеБланки Цикл	
		нСтр 								=  тИзменяемыхБланков.Добавить();
		нСтр.Бланк 							= стрБланк.Бланк;
		нСтр.ПолеТабличногоДокументаМакет 	= Новый ТабличныйДокумент;
		ОбъектАБ = Обработки.АналитическийБланк.Создать();
		Обработки.АналитическийБланк.ПрочитатьНастройкиАналитическогоБланка(нСтр.ПолеТабличногоДокументаМакет,нСтр.Бланк,ОбъектАБ);
        нСтр.ОбъектАБ = ОбъектАБ;	
		АналитическийБланкГенерацияМакетаУХСервер.ПодготовитьКэшСГруппировками(нСтр.ПолеТабличногоДокументаМакет,нСтр.ОбъектАБ);
	КонецЦикла;	

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
	
		 тРабочаяЗаписьБланка = тИзменяемыхБланков.НайтиСтроки(Новый Структура("Бланк",Выборка.Бланк))[0];
		 		 
		 //Обновляем кэш имен формул
		 ПоказателиФормул =  тРабочаяЗаписьБланка.ОбъектАБ.РасшифровкаФормулОбластейПоказателей.НайтиСтроки(Новый Структура("УидГруппыОтборов,Показатель",Выборка.УидГруппыОтборов,Выборка.Показатель));
		 Для Каждого тПоказатель Из  ПоказателиФормул Цикл
			 
			 СтароеИмяВФормуле              = тПоказатель.ВидОтчетаКод+"."+тПоказатель.ПоказательКод;
			 тПоказатель.ВидОтчета 			= Выборка.Показатель.Владелец;
			 тПоказатель.ВидОтчетаКод 		= СокрЛП(Выборка.Показатель.Владелец.Код);
			 НовоеИмяВФормуле 				= тПоказатель.ВидОтчетаКод+"."+тПоказатель.ПоказательКод;
             тПоказатель.ИмяВФормуле 		= СтрЗаменить(тПоказатель.ИмяВФормуле,СтароеИмяВФормуле,НовоеИмяВФормуле);
	  
		 КонецЦикла;	
		 
		 Для Каждого ИмяФормулы Из тРабочаяЗаписьБланка.ОбъектАБ.КэшИменФормул Цикл
			 
			 ОбластьРасшифровка_ = тРабочаяЗаписьБланка.ПолеТабличногоДокументаМакет.Области.Найти(ИмяФормулы.ИмяОбласти);
			 Если ОбластьРасшифровка_ = Неопределено ИЛИ ОбластьРасшифровка_.Расшифровка = Неопределено  Тогда
				 Продолжить;
			 КонецЕсли;	
			 
			 тРасшифровкаФормулы = ЗначениеИзСтрокиВнутр(ОбластьРасшифровка_.Расшифровка.РасшифровкаФормулы);
			 Для Каждого стрРасшифровка Из тРасшифровкаФормулы Цикл 
				 
				 Если стрРасшифровка.Показатель = Выборка.показатель Тогда
					 
					 СтароеИмяВФормуле              = стрРасшифровка.ВидОтчетаКод+"."+стрРасшифровка.ПоказательКод;
					 стрРасшифровка.ВидОтчета 		= Выборка.Показатель.Владелец;
					 стрРасшифровка.ВидОтчетаКод 	= СокрЛП(Выборка.Показатель.Владелец.Код);
					 НовоеИмяВФормуле 				= стрРасшифровка.ВидОтчетаКод+"."+стрРасшифровка.ПоказательКод;
					 стрРасшифровка.ИмяВФормуле 	= СтрЗаменить(стрРасшифровка.ИмяВФормуле,СтароеИмяВФормуле,НовоеИмяВФормуле);
					 ОбластьРасшифровка_.Расшифровка.ТекстФормулы  = СтрЗаменить(ОбластьРасшифровка_.Расшифровка.ТекстФормулы,СтароеИмяВФормуле,НовоеИмяВФормуле);
					 
				 КонецЕсли;	 
				 
			 КонецЦикла;	 
			 
			 ОбластьРасшифровка_.Расшифровка.РасшифровкаФормулы = ЗначениеВстрокуВнутр(тРасшифровкаФормулы);
			 ОбластьРасшифровка_.Текст                          = ОбластьРасшифровка_.Расшифровка.ТекстФормулы;
			 
		 КонецЦикла;	 	 
	 КонецЦикла;
		
	 //Сохраняем измененные  бланки
	Для Каждого СтрБланк Из  тИзменяемыхБланков Цикл	 
		Попытка
			Отказ = Ложь;
			//АналитическийБланкУХСервер.ПроверитьНеСуществующиеОбласти(СтрБланк.ПолеТабличногоДокументаМакет,СтрБланк.ОбъектАБ);				
			АналитическийБланкГенерацияМакетаУХСервер.ПодготовитьКэшСГруппировками(СтрБланк.ПолеТабличногоДокументаМакет,СтрБланк.ОбъектАБ);		 
			Обработки.АналитическийБланк.ЗаписатьНастройкиАналитическогоБланка(СтрБланк.ПолеТабличногоДокументаМакет,СтрБланк.Бланк,СтрБланк.ОбъектАБ,Отказ);		 		 
			БланкОбъект = СтрБланк.Бланк.ПолучитьОбъект();
			БланкОбъект.ОбменДанными.Загрузка = Истина;
			БланкОбъект.Записать();	 
		Исключение	 
			
			ТекстСообщения = НСтр("ru = 'При реструктутризации бланка %Бланк% произошла ошибка
			|			%ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Бланк%", Строка(СтрБланк.Бланк));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Строка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.БланкиОтчетов,
			СтрБланк.Бланк, 
			ТекстСообщения);
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			
		КонецПопытки;	 
	Конеццикла;	 
	 
 КонецПроцедуры

Функция ПолучитьИмяСледующейОбласти(ПолеТабличногоДокументаМакет_,ВидОтчета,ПоказательКод)
		
	ТекущееИмя = "ВидОтчета_"+ВидОтчета +"_Показатель_"+ПоказательКод+"_ИндексЯчейки";
	
	ИндексОбласти = 1;
	
	Пока НЕ ПолеТабличногоДокументаМакет_.Области.Найти(ТекущееИмя) = Неопределено Цикл
		ТекущееИмя = "ВидОтчета_"+ВидОтчета +"_Показатель_"+ПоказательКод+"_ИндексЯчейки"+ИндексОбласти;
		ИндексОбласти = ИндексОбласти+1;
	КонецЦикла;	
	
	Возврат ТекущееИмя;
		
КонецФункции

#КонецЕсли