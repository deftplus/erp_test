
Перем ЦветФонаРеквизита;
Перем ЦветФонаЗначения;
Перем ЦветФонаТабличнойЧасти;
Перем ЦветРамкиРеквизита;
Перем ЦветРамкиТабличнойЧасти;
Перем ЦветаТабличнойЧасти;

// Основная функции подготовки данных для запроса и получения результирующего набора данных.
//

Процедура СкопироватьОформлениеОбласти(ОбластьПриемник, ОбластьИсточник)
	
	ОбластьПриемник.ЦветФона = ОбластьИсточник.ЦветФона;
	ОбластьПриемник.ЦветУзора = ОбластьИсточник.ЦветУзора;
	
	Если ОбластьИсточник.Узор <> ТипУзораТабличногоДокумента.БезУзора Тогда
		ОбластьПриемник.Узор = ОбластьИсточник.Узор;
	КонецЕсли;
	
	ОбластьПриемник.ЦветРамки = ОбластьИсточник.ЦветРамки;
	ОбластьПриемник.Обвести(ОбластьИсточник.ГраницаСлева, ОбластьИсточник.ГраницаСверху, ОбластьИсточник.ГраницаСправа, ОбластьИсточник.ГраницаСнизу);
	ОбластьПриемник.Шрифт = ОбластьИсточник.Шрифт;
	
КонецПроцедуры

Процедура ВывестиДанныеСтроки(ТабличныйДокумент, СтрокаВывода, СтруктураШапки, МакетВывода)
	
	Для Каждого Строка Из СтруктураШапки Цикл
		ТекЗначение = СтрокаВывода[Строка.Ключ];
		ДлинаСтроки = СтрДлина(Строка(ТекЗначение));
		
		Если ДлинаСтроки > Строка.Значение Тогда
			СтруктураШапки.Вставить(Строка.Ключ, ДлинаСтроки);
		КонецЕсли;
		
		ТекОбласть = ТабличныйДокумент.Присоединить(МакетВывода);
		ТекОбласть.ТЕкст = СтрокаВывода[Строка.Ключ];
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьОтчет() Экспорт
	
	Перем База;
	
	Если НЕ СтруктураЗапроса.Свойство("База", База) Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	Если СтрОперанд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии Тогда
			
		Если СтрНайти(СтрОперанд.ТекстЗапросаМодуля, "Обороты") <> 0 Тогда
			
			ОборотыМеждуСчетами = СтрНайти(СтрОперанд.ТекстЗапросаМодуля, "СчетДт") <> 0;
			
			ТекстЗапроса = "";
			
			ТекстПолей = 
			"
			|	Проводки.Период,
			|	Проводки.НомерСтроки,
			|	Проводки.Регистратор,
			|	Проводки.ВалютаДт,
			|	Проводки.ВалютаКт,
			|	Проводки.Сумма,
			|	Проводки.ВалютнаяСуммаДт,
			|	Проводки.ВалютнаяСуммаКт,
			|	Проводки.КоличествоДт,
			|	Проводки.КоличествоКт,
			|	Проводки.Содержание,
			|	Проводки.СчетДт,
			|	Проводки.СчетКт";
			
			СтрокаОграниченийПоРеквизитам = "Активность = ИСТИНА";
			СтрокаОграниченийПоОтборам    = "";
			ЕстьДатаНач = Ложь;
			ЕстьДатаКон = Ложь;
			
			Для Каждого СтрокаОтбора ИЗ СтруктураЗапроса.ОбъектЗапрос.ИспользуемыеПараметры Цикл
				Если СтрокаОтбора.ИмяПараметра = "ДатаНач" Тогда
					ЕстьДатаНач = Истина;
				ИначеЕсли СтрокаОтбора.ИмяПараметра = "ДатаКон" Тогда
					ЕстьДатаКон = Истина;
				Иначе
					СтрокаОграниченийПоРеквизитам = СтрокаОграниченийПоРеквизитам + " И " + СтрокаОтбора.ИмяПараметра + " = &" + СтрокаОтбора.ИмяПараметра;
					СтрокаОграниченийПоОтборам    = СтрокаОграниченийПоОтборам + " И " + + СтрокаОтбора.ИмяПараметра + " = &" + СтрокаОтбора.ИмяПараметра;
				КонецЕсли;
			КонецЦикла;
			
			Если ОборотыМеждуСчетами Тогда
				СтрокаОграниченийПоРеквизитам = СтрокаОграниченийПоРеквизитам
				 + " И СчетДт.Код В (&СчетДт)" + ?(ПустаяСтрока(СтрОперанд.КоррСчет), "", " И СчетКт.Код В (&СчетКт)");
			Иначе
				СтрокаОграниченийПоРеквизитам = СтрокаОграниченийПоРеквизитам
				 + " И Счет.Код В (&Счет)";
			КонецЕсли;
			
			СтрокаОтборов = "";
			
			МассивУдаляемыхСтрок = Новый Массив;
			
			Для Каждого СтрокаОтбора Из СтруктураЗапроса.ОбъектЗапрос.ИспользуемыеОтборы Цикл
				
				Если СтрокаОтбора.ИмяОтбора = "ДатаНач" Тогда
					НоваяСтрока = СтруктураЗапроса.ОбъектЗапрос.ИспользуемыеПараметры.Добавить();
					НоваяСтрока.ИмяПараметра = "ДатаНач";
					НоваяСтрока.ЗначениеПараметра = СтрокаОтбора.Значение;
					МассивУдаляемыхСтрок.Добавить(СтрокаОтбора);
					ЕстьДатаНач = Истина;
				ИначеЕсли СтрокаОтбора.ИмяОтбора = "ДатаКон" Тогда
					НоваяСтрока = СтруктураЗапроса.ОбъектЗапрос.ИспользуемыеПараметры.Добавить();
					НоваяСтрока.ИмяПараметра = "ДатаКон";
					НоваяСтрока.ЗначениеПараметра = СтрокаОтбора.Значение;
					МассивУдаляемыхСтрок.Добавить(СтрокаОтбора);
					ЕстьДатаКон = Истина;
				Иначе
					СтрокаОтборов = СтрокаОтборов + ", " + СтрокаОтбора.ИмяОтбора;
				КонецЕсли;
				
			КонецЦикла;
			
			ТабСчетаСписок = Новый ТаблицаЗначений;
			ТабСчетаСписок.Колонки.Добавить("Операнд");
			ТабСчетаСписок.Колонки.Добавить("Счет");
			ТабСчетаСписок.Колонки.Добавить("КоррСчет");
			
			НоваяЗапись = ТабСчетаСписок.Добавить();
			НоваяЗапись.Операнд  = СтрОперанд.Код;
			НоваяЗапись.Счет     = СтрОперанд.Счет;
			НоваяЗапись.КоррСчет = СтрОперанд.КоррСчет;
			
			СтруктураЗапроса.ОБъектЗапрос.Вставить("ТабСчетаСписок", ТабСчетаСписок);
			
			Для Каждого ЭлементМассива Из МассивУдаляемыхСтрок Цикл
				СтруктураЗапроса.ОБъектЗапрос.ИспользуемыеОтборы.Удалить(ЭлементМассива);
			КонецЦикла;
			
			СтрокаОграниченийПоРеквизитам = ?(ЕстьДатаНач, "&ДатаНач", "") + ", " + ?(ЕстьДатаКон, "&ДатаКон", "") + ", " + СтрокаОграниченийПоРеквизитам + ?(ПустаяСтрока(СтрокаОтборов), "", "{" + Сред(СтрокаОтборов, 2) + "}");
			
			ТекстСубконто = "";
			
			Для н=1 По 3 Цикл
				ТекстСубконто = ТекстСубконто+","+Символы.ПС+"	Проводки.СубконтоДт"+н+" КАК СубконтоДт"+н;
				ТекстСубконто = ТекстСубконто+","+Символы.ПС+"	Проводки.СубконтоКт"+н+" КАК СубконтоКт"+н;
			КонецЦикла;
			
			ТекстИсточника = "РегистрБухгалтерии."+ИмяРегистра+".ДвиженияССубконто("+СтрокаОграниченийПоРеквизитам+") КАК Проводки";
				
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|"+ТекстПолей+ТекстСубконто+"
			|ИЗ
			|	"+ТекстИсточника;
				
			// обернем наш запрос еще одним и добавим свойства счетов
			ТекстПолейВнеш = 
			"
			|	НАЧАЛОПЕРИОДА(Вн_Отчет.Период, День) КАК Период,
			|	Вн_Отчет.НомерСтроки,
			|	Вн_Отчет.Регистратор КАК Регистратор,
			|	ПРЕДСТАВЛЕНИЕ(Вн_Отчет.Регистратор) КАК Регистратор_Представление,
			|	Вн_Отчет.ВалютаДт КАК ВалютаДт,
			|	ПРЕДСТАВЛЕНИЕ(Вн_Отчет.ВалютаДт) КАК ВалютаДт_Представление,
			|	Вн_Отчет.ВалютаКт КАК ВалютаКт,
			|	ПРЕДСТАВЛЕНИЕ(Вн_Отчет.ВалютаКт) КАК ВалютаКт_Представление,
			|	Вн_Отчет.Сумма,
			|	Вн_Отчет.ВалютнаяСуммаДт,
			|	Вн_Отчет.ВалютнаяСуммаКт,
			|	Вн_Отчет.КоличествоДт,
			|	Вн_Отчет.КоличествоКт,
			|	Вн_Отчет.Содержание,
			|	ЕСТЬNULL(Вн_Отчет.СчетДт.Количественный, Ложь) КАК КоличественныйДт,
			|	ЕСТЬNULL(Вн_Отчет.СчетКт.Количественный, Ложь) КАК КоличественныйКт,
			|	ЕСТЬNULL(Вн_Отчет.СчетДт.Валютный, Ложь) КАК ВалютныйДт,
			|	ЕСТЬNULL(Вн_Отчет.СчетКт.Валютный, Ложь) КАК ВалютныйКт,
			|	Вн_Отчет.СчетДт КАК СчетДт,
			|	ПРЕДСТАВЛЕНИЕ(Вн_Отчет.СчетДт) КАК СчетДт_Представление,
			|	Вн_Отчет.СчетКт КАК СчетКт,
			|	ПРЕДСТАВЛЕНИЕ(Вн_Отчет.СчетКт) КАК СчетКт_Представление";
			
			ТекстСубконтоВнеш = "";
			
			Для н=1 По 3 Цикл
				
				ТекстСубконтоВнеш = ТекстСубконтоВнеш + "," + Символы.ПС + "Вн_Отчет.СубконтоДт"+н+" КАК СубконтоДт"+н
									+ ", " + Символы.ПС + "ПРЕДСТАВЛЕНИЕ(Вн_Отчет.СубконтоДт" + н + ") КАК СубконтоДт"+н + "_Представление";
				ТекстСубконтоВнеш = ТекстСубконтоВнеш + "," + Символы.ПС + "Вн_Отчет.СубконтоКт"+н+" КАК СубконтоКт"+н
									+ ", " + Символы.ПС + "ПРЕДСТАВЛЕНИЕ(Вн_Отчет.СубконтоКт" + н + ") КАК СубконтоКт"+н + "_Представление";
				
			КонецЦикла;
			
			ТекстВыбораСчетов = 
			"	ВЫБРАТЬ
			|		Счета.Ссылка КАК ССЫЛКА,
			|		Счета.Количественный КАК Количественный,
			|		Счета.Валютный КАК Валютный,
			|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Субконто.ВидСубконто) КАК КолвоСубконто
			|	ИЗ
			|		ПланСчетов." + ИмяРегистра + " КАК Счета
			|			ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов." + ИмяРегистра + ".ВидыСубконто КАК Субконто
			|			ПО Субконто.Ссылка = Счета.Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	Счета.Ссылка";
			
			ТекстЗапросаВнеш = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|"+ТекстПолейВнеш+ТекстСубконтоВнеш+"
			|ИЗ
			|	("+ТекстЗапроса+") КАК Вн_Отчет";
			
			ТекстЗапросаВнеш = ТекстЗапросаВнеш+"
			|УПОРЯДОЧИТЬ По Вн_Отчет.Период, Вн_Отчет.Регистратор";
			
			СтруктураЗапроса.ОбъектЗапрос.Вставить("ТекстЗапроса", ТекстЗапросаВнеш);
			СтруктураЗапроса.ОбъектЗапрос.ИспользуемыеПоля.Очистить();
			
			Если ТипЗнч(База) = Тип("WSProxy") Тогда
				РезультатЗапроса = База.ОбработкаЗапроса(Новый ХранилищеЗначения(СтруктураЗапроса.ОбъектЗапрос, Новый СжатиеДанных(9))).Получить();
			Иначе
				РезультатЗапроса = ОбработкаЗапроса(База, СтруктураЗАпроса.ОбъектЗапрос);
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СчетаБД.Код КАК Код
			|ИЗ
			|	Справочник.СчетаБД КАК СчетаБД
			|ГДЕ
			|	СчетаБД.Ссылка В(&СписокСчетов)";
			Запрос.УстановитьПараметр("СписокСчетов", СтруктураЗапроса.ОбъектЗапрос.ТабСчетаСписок.ВыгрузитьКолонку("Счет"));
			
			ИспользуемыеДебетовыеСчета = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Код");
			
			Макет = ПолучитьМакет("МакетОтчетПоПроводкам");
			ТаблДок = Новый ТабличныйДокумент;
			ТаблДок.Вывести(Макет.ПолучитьОбласть("ОбластьЗаголовок"));
			ТекПериод      = Неопределено;
			ТекРегистратор = Неопределено;
			
			ОбластьПериод = Макет.ПолучитьОбласть("ОбластьПериод");
			ОбластьРегистратор = Макет.ПолучитьОбласть("ОбластьРегистратор");
			ОбластьДанные      = Макет.ПолучитьОбласть("ОбластьДанные");
			ОбластьШапка       = Макет.ПолучитьОбласть("ОбластьШапка");
			
			СуммаДт = 0;
			СуммаКт = 0;
			
			СуммаКтПериод = 0;
			СуммаДтПериод = 0;
			
			СуммаДтОбщая  = 0;
			СуммаКтОбщая  = 0;
			
			Если ЗначениеЗаполнено(РезультатЗапроса.РезультатЗапроса) Тогда
			
				Для Каждого Строка Из РезультатЗапроса.РезультатЗапроса Цикл
					
					Если ТекПериод = Неопределено Тогда
						
						ОбластьПериод.Параметры.Период = Строка.Период;
						ТекОбластьПериод = ТаблДок.Вывести(ОбластьПериод);
						ТаблДок.НачатьГруппуСтрок("Период");
						ОбластьРегистратор.Параметры.Заполнить(Строка);
						ТекОбластьРегистратор = ТаблДок.Вывести(ОбластьРегистратор);
						ТаблДок.НачатьГруппуСтрок("Регистратор");
						ТекПериод = Строка.Период;
						ТекРегистратор = Строка.Регистратор;
						ТаблДок.Вывести(ОбластьШапка);
						
					ИначеЕсли ТекПериод <> Строка.Период Тогда
						
						ТаблДок.ЗакончитьГруппуСтрок();
						ТаблДок.ЗакончитьГруппуСтрок();
						
						ТаблДок.Область(ТекОбластьРегистратор.Низ, ТекОбластьРегистратор.Лево + 6).Текст = СуммаДт;
						ТаблДок.Область(ТекОбластьРегистратор.Низ, ТекОбластьРегистратор.Лево + 7).Текст = СуммаКт;
						СуммаДт = 0;
						СуммаКт = 0;
						
						ТаблДок.Область(ТекОбластьПериод.Низ, ТекОбластьПериод.Лево + 6).Текст = СуммаДтПериод;
						ТаблДок.Область(ТекОбластьПериод.Низ, ТекОбластьПериод.Лево + 7).Текст = СуммаКтПериод;
						СуммаДтПериод = 0;
						СуммаКтПериод = 0;
						
						ОбластьПериод.Параметры.Период = Строка.Период;
						ТекОбластьПериод = ТаблДок.Вывести(ОбластьПериод);
						ТаблДок.НачатьГруппуСтрок("Период");
						ОбластьРегистратор.Параметры.Заполнить(Строка);
						ТекОбластьРегистратор = ТаблДок.Вывести(ОбластьРегистратор);
						ТаблДок.НачатьГруппуСтрок("Регистратор");
						ТекПериод = Строка.Период;
						ТекРегистратор = Строка.Регистратор;
						ТаблДок.Вывести(ОбластьШапка);
						
					ИначеЕсли ТекРегистратор <> Строка.Регистратор Тогда
						
						ТаблДок.ЗакончитьГруппуСтрок();
						
						ТаблДок.Область(ТекОбластьРегистратор.Низ, ТекОбластьРегистратор.Лево + 6).Текст = СуммаДт;
						ТаблДок.Область(ТекОбластьРегистратор.Низ, ТекОбластьРегистратор.Лево + 7).Текст = СуммаКт;
						
						СуммаДт = 0;
						СуммаКт = 0;

						ОбластьРегистратор.Параметры.Заполнить(Строка);
						ТекОбластьРегистратор = ТаблДок.Вывести(ОбластьРегистратор);
						ТаблДок.НачатьГруппуСтрок("Регистратор");
						ТекРегистратор = Строка.Регистратор;
						ТаблДок.Вывести(ОбластьШапка);
						
					КонецЕсли;
					
					ОбластьДанные.Параметры.Заполнить(Строка);
					ОбластьДанные.Область("ВалютнаяСуммаДт").ЦветТекста = ?(ЗначениеЗаполнено(Строка.ВалютнаяСуммаДт) И Строка.ВалютнаяСуммаДт < 0, ЦветаСтиля.ЦветОтрицательногоЧисла, Новый Цвет);
					ОбластьДанные.Область("ВалютнаяСуммаКт").ЦветТекста = ?(ЗначениеЗаполнено(Строка.ВалютнаяСуммаКт) И Строка.ВалютнаяСуммаКт < 0, ЦветаСтиля.ЦветОтрицательногоЧисла, Новый Цвет);
					
					Если ИспользуемыеДебетовыеСчета.Найти(Строка.СчетДт_Представление) <> Неопределено Тогда
						СуммаДт = СуммаДт + Строка.Сумма;
						СуммаДтПериод = СуммаДтПериод + Строка.Сумма;
						СуммаДтОбщая  = СуммаДтОбщая  + Строка.Сумма;
						ОбластьДанные.Параметры.СуммаДт = Строка.Сумма;
						ОбластьДанные.Параметры.СуммаКт = 0;
					Иначе
						СуммаКт = СуммаКт + Строка.Сумма;
						СуммаКтОбщая  = СуммаКтОбщая  + Строка.Сумма;
						СуммаКтПериод = СуммаКтПериод + Строка.Сумма;
						ОбластьДанные.Параметры.СуммаКт = Строка.Сумма;
						ОбластьДанные.Параметры.СуммаДт = 0;
					КонецЕсли;
					
					ТаблДок.Вывести(ОбластьДанные);
					
				КонецЦикла;
				
				ТаблДок.ЗакончитьГруппуСтрок();
				ТаблДок.ЗакончитьГруппуСтрок();
				ТаблДок.Область(ТекОбластьРегистратор.Низ, ТекОбластьРегистратор.Лево + 6).Текст = СуммаДт;
				ТаблДок.Область(ТекОбластьРегистратор.Низ, ТекОбластьРегистратор.Лево + 7).Текст = СуммаКт;

				ТаблДок.Область(ТекОбластьПериод.Низ, ТекОбластьПериод.Лево + 6).Текст = СуммаДтПериод;
				ТаблДок.Область(ТекОбластьПериод.Низ, ТекОбластьПериод.Лево + 7).Текст = СуммаКтПериод;

				ОбластьИтоги = Макет.ПолучитьОбласть("ОбластьИтоги");
				ОбластьИтоги.Параметры.СуммаДт = СуммаДтОбщая;
				ОбластьИтоги.Параметры.СуммаКт = СуммаКтОбщая;
				ТаблДок.Вывести(ОбластьИтоги);

			КонецЕсли;
			
			Возврат ТаблДок;
			
		КонецЕсли;
		
	ИначеЕсли СтрОперанд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления Тогда
		
		//НастройкиОперанда = СтрОперанд.НастройкиОперанда.Получить();
		ТекстЗапроса   = СтруктураЗапроса.ТекстЗапроса;
		ПозицияУсловия = СтрНайти(ТекстЗапроса, ИсточникДанных.РегистрБД.Наименование + "." + ИсточникДанных.РегистрБД.ВидРегистра);
		ТекстУсловия   = Сред(ТекстЗапроса, ПозицияУсловия - 21);
		ТекстУсловия   = СтрЗаменить(ТекстУсловия, "{&ДатаКон}, ", "{&ДатаКон}, Регистратор");
		ТекстПолей     = "ВЫБРАТЬ НАЧАЛОПЕРИОДА(Регистр.Период, День) КАК Период, Регистратор КАК Регистратор, ПРЕДСТАВЛЕНИЕ(Регистратор) КАК Регистратор_Представление";
		
		СтруктураШапки = Новый Структура;
		
		Макет = ПолучитьМакет("МакетОтчетПоДвижениямПоРегиструНакопления");
		
		ОбластьДанные = Макет.ПолучитьОбласть("ОбластьДанные");
		ОбластьШапка = Новый ТабличныйДокумент;
		ОбластьШапкаОформление = Макет.ПолучитьОбласть("ОбластьШапка");

		Для Каждого Запись Из СтруктураЗапроса.ТаблицаВычисленияПараметров Цикл
			Если Запись.ИмяПараметра <> "ДатаНач" И Запись.ИмяПараметра <> "ДатаКон" Тогда
				ТекстПолей = ТекстПолей + "
				|, ПРЕДСТАВЛЕНИЕ(" + Запись.ИмяПараметра + ") КАК " + Запись.ИмяПараметра + "_Представление";
				СтруктураШапки.Вставить(Запись.ИмяПараметра + "_Представление", 0);
				ТекОбласть = ОбластьШапка.Присоединить(ОбластьШапкаОформление);
				ТекОБласть.Текст = Запись.ПредставлениеПараметра;
			КонецЕсли;
		КонецЦикла;
		
		ТекстПолей = ТекстПолей + "
		|, " + ИсточникДанных.РесурсРегистра + ИсточникДанных.ВидИтога + " КАК " + ИсточникДанных.РесурсРегистра;
		
		СтруктураШапки.Вставить(ИсточникДанных.РесурсРегистра, 0);
		
		ТекОбласть = ОбластьШапка.Присоединить(ОбластьШапкаОформление);
		ТекОБласть.Текст = ИсточникДанных.РесурсРегистра + Символы.ПС + ИсточникДанных.ВидИтога;

		СтруктураЗапроса.ОбъектЗапрос.ТекстЗапроса = ТекстПолей + "
													 |" + ТекстУсловия + " КАК Регистр
													 | УПОРЯДОЧИТЬ ПО Регистр.Период, Регистр.Регистратор";
													 
		Если ТипЗнч(База) = Тип("WSProxy") Тогда
			РезультатЗапроса = База.ОбработкаЗапроса(Новый ХранилищеЗначения(СтруктураЗапроса.ОбъектЗапрос, Новый СжатиеДанных(9))).Получить();
		Иначе
			РезультатЗапроса = ОбработкаЗапроса(База, СтруктураЗАпроса.ОбъектЗапрос);
		КонецЕсли;
		
		КоличествоКолонок = СтруктураШапки.Количество();
		
		ОбластьПериод = Новый ТабличныйДокумент;
		
		ОбластьПериод.Область(1, 1, 1, КоличествоКолонок- 1).Объединить();
		СкопироватьОформлениеОбласти(ОбластьПериод.Область(1, 1, 1, КоличествоКолонок), Макет.Область("ОбластьПериод"));
		
		ОбластьРегистратор = Новый ТабличныйДокумент;
		ОбластьРегистратор.Область(1, 1, 1, КоличествоКолонок - 1).Объединить();
		СкопироватьОформлениеОбласти(ОбластьРегистратор.Область(1, 1, 1, КоличествоКолонок), Макет.Область("ОбластьРегистратор"));
		
		Сумма_Регистратор = 0;
		Сумма_Период      = 0;
		ТекПериод      = Неопределено;
		ТекРегистратор = Неопределено;
		
		ТаблДок = Новый ТабличныйДокумент;
		
		Для Каждого Строка Из РезультатЗапроса.РезультатЗапроса Цикл
				
			Если ТекПериод = Неопределено Тогда
				
				ОбластьПериод.Область(1, 1).Текст = Строка.Период;
				ТекОбластьПериод = ТаблДок.Вывести(ОбластьПериод);
				ТаблДок.НачатьГруппуСтрок("Период");
				
				ОбластьРегистратор.Область(1, 1).Текст = Строка.Регистратор_Представление;
				ОбластьРегистратор.Область(1, 1).Расшифровка = Строка.Регистратор;
				ТекОбластьРегистратор = ТаблДок.Вывести(ОбластьРегистратор);
				
				ТаблДок.НачатьГруппуСтрок("Регистратор");
				ТекПериод = Строка.Период;
				ТекРегистратор = Строка.Регистратор;
				ТаблДок.Вывести(ОбластьШапка);
				
			ИначеЕсли ТекПериод <> Строка.Период Тогда
				
				ТаблДок.ЗакончитьГруппуСтрок();
				ТаблДок.ЗакончитьГруппуСтрок();
				
				ТаблДок.Область(ТекОбластьРегистратор.Низ, ТекОбластьРегистратор.Лево + КоличествоКолонок).Текст = Сумма_Регистратор;
				Сумма_Регистратор = 0;
				
				ТаблДок.Область(ТекОбластьПериод.Низ, ТекОбластьПериод.Лево + КоличествоКолонок).Текст = Сумма_Период;
				Сумма_Период =0;
				
				ОбластьПериод.Область(1, 1).Текст = Строка.Период;
				ТекОбластьПериод = ТаблДок.Вывести(ОбластьПериод);
				ТаблДок.НачатьГруппуСтрок("Период");
				
				ОбластьРегистратор.Область(1, 1).Текст = Строка.Регистратор_Представление;
				ОбластьРегистратор.Область(1, 1).Расшифровка = Строка.Регистратор;
				ТекОбластьРегистратор = ТаблДок.Вывести(ОбластьРегистратор);
				
				ТаблДок.НачатьГруппуСтрок("Регистратор");
				ТекПериод = Строка.Период;
				ТекРегистратор = Строка.Регистратор;
				ТаблДок.Вывести(ОбластьШапка);
				
			ИначеЕсли ТекРегистратор <> Строка.Регистратор Тогда
				
				ТаблДок.ЗакончитьГруппуСтрок();
				
				ТаблДок.Область(ТекОбластьРегистратор.Низ, ТекОбластьРегистратор.Лево + КоличествоКолонок).Текст = Сумма_Регистратор;
				
				Сумма_Регистратор = 0;
				
				ОбластьРегистратор.Область(1, 1).Текст = Строка.Регистратор_Представление;
				ОбластьРегистратор.Область(1, 1).Расшифровка = Строка.Регистратор;
				ТекОбластьРегистратор = ТаблДок.Вывести(ОбластьРегистратор);
				
				ТаблДок.НачатьГруппуСтрок("Регистратор");
				ТекРегистратор = Строка.Регистратор;
				ТаблДок.Вывести(ОбластьШапка);
				
			КонецЕсли;
			
			ТекЗначение = Строка[ИсточникДанных.РесурсРегистра];
			Сумма_Регистратор = Сумма_Регистратор + ТекЗначение;
			Сумма_Период      = Сумма_Период      + ТекЗначение;
			ОбластьСтрока = НОвый ТабличныйДокумент;
			ВывестиДанныеСтроки(ОбластьСтрока, Строка, СтруктураШапки, ОбластьДанные);
			ТаблДок.Вывести(ОбластьСтрока);
				
		КонецЦикла;
			
		ТаблДок.ЗакончитьГруппуСтрок();
		ТаблДок.ЗакончитьГруппуСтрок();
		
		ТаблДок.Область(ТекОбластьРегистратор.Низ, ТекОбластьРегистратор.Лево + КоличествоКолонок).Текст = Сумма_Регистратор;
		ТаблДок.Область(ТекОбластьПериод.Низ, ТекОбластьПериод.Лево + КоличествоКолонок).Текст = Сумма_Период;
		
		ТекРяд = 1;
		Для Каждого Строка Из СтруктураШапки Цикл
			ТаблДок.Область("C" + ТекРяд).ШиринаКолонки = ?(Строка.Значение < 9, 9, ?(Строка.Значение > 25, 25, Строка.Значение));
			ТекРяд = ТекРяд + 1;
		КонецЦикла;
		
		Возврат ТаблДок;

	ИначеЕсли СтрОперанд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос Тогда
		
		Возврат Новый ТабличныйДокумент;
		
	КонецЕсли;
	
КонецФункции

Функция ОбработкаЗапроса(База, ПолученныеДанные) Экспорт
	
	Перем ЕстьОбороты;
	Перем ПланСчетов;
	Перем ПостроительЗапроса;
	
	ОписаниеПримитивныхТипов = Новый ОписаниеТипов("Строка, Число, Дата, Булево");
	ТаблицаСчетовОперанда = Новый ТаблицаЗначений;
	
	ТаблицаСчетовОперанда.Колонки.Добавить("КодОперанда");
	ТаблицаСчетовОперанда.Колонки.Добавить("СчетДанные");
	ТаблицаСчетовОперанда.Колонки.Добавить("КоррСчетДанные");
	
	// Возможно, что передан параметр некорректного типа.
	Если ТипЗнч(ПолученныеДанные) <> Тип("Структура") Тогда
		Возврат Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	
	ПостроительЗапроса = База.NewObject("ПостроительЗапроса");
	ПостроительЗапроса.ДобавлениеПредставлений = База.PresentationAdditionType.DontAdd;
	Если НЕ ПолученныеДанные.Свойство("ТекстЗапроса", ПостроительЗапроса.Текст) Тогда
		Возврат Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	
	ПостроительЗапроса.ЗаполнитьНастройки();
	
	ЕстьОбороты = СтрНайти(ПостроительЗапроса.Текст,"&СчетДт")>0;
	СтруктураОтвета = Новый Структура;
	
	Если ПолученныеДанные.Свойство("ТабСчетаСписок") Тогда
		
		ПолученныеДанные.Свойство("ИспользуемыйПланСчетов", ПланСчетов);
		
		СписокСчетов    = База.NewObject("СписокЗначений");
		
		Если ЕстьОбороты Тогда
			СписокКоррСчетов    = База.NewObject("СписокЗначений");
		КонецЕсли;
		
		Для Каждого ТекСчет Из ПолученныеДанные.ТабСчетаСписок Цикл
			
			ТаблицаСчетов = ПолучитьСчетаВИерархии(База, ТекСчет.Счет, ПланСчетов);
			
			Если ЕстьОбороты Тогда
				ТаблицаКоррСчетов = ПолучитьСчетаВИерархии(База, ТекСчет.КоррСчет, ПланСчетов);
			КонецЕсли;
			
			Для Каждого Запись Из ТаблицаСчетов Цикл
				
				СписокСчетов.Добавить(Запись.Код);
				
				Если ЕстьОбороты Тогда
					Для Каждого Запись_Корр Из ТаблицаКоррСчетов Цикл
						СписокКоррСчетов.Добавить(Запись_Корр.Код);
						НоваяЗапись                = ТаблицаСчетовОперанда.Добавить();
						НоваяЗапись.КодОперанда    = ТекСчет.Операнд;
						НоваяЗапись.СчетДанные     = Запись.Код;
						НоваяЗапись.КоррСчетДанные = Запись_Корр.Код;
					КонецЦикла;
				Иначе
					НоваяЗапись          = ТаблицаСчетовОперанда.Добавить();
					НоваяЗапись.КодОперанда = ТекСчет.Операнд;
					НоваяЗапись.СчетДанные  = Запись.Код;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если ЕстьОбороты Тогда
			ПостроительЗапроса.Параметры.Вставить("СчетДт", СписокСчетов);
			ПостроительЗапроса.Параметры.Вставить("СчетКт", СписокКоррСчетов);
		Иначе
			ПостроительЗапроса.Параметры.Вставить("Счет", СписокСчетов);
		КонецЕсли;
		
		СтруктураОтвета.Вставить("ИспользуемыеСчета", ТаблицаСчетовОперанда);
		
	ИначеЕсли ПолученныеДанные.Свойство("ТабСтатьиСписок") Тогда
		
		СписокСтатей = Новый СписокЗначений;
		
		Для Каждого СтрокаСтатья ИЗ ПолученныеДанные.ТабСтатьиСписок Цикл
				
			ТаблицаСтатей = ПолучитьСтатьиВИерархии(База, СтрокаСтатья.Статья);
			СписокСтатейЛок=Новый СписокЗначений;
			ОбщегоНазначенияУХ.ДобавитьМассивВСписокЗначений(СписокСтатейЛок, ТаблицаСтатей.ВыгрузитьКолонку("Код"));
			СтрокаСтатья.СписокСтатей = СписокСтатейЛок;
			ОбщегоНазначенияУХ.ДобавитьМассивВСписокЗначений(СписокСтатей, ТаблицаСтатей.ВыгрузитьКолонку("Ссылка"));
				
		КонецЦикла;
			
		ПостроительЗапроса.Параметры.Вставить("Статья",СписокСтатей);
		СтруктураОтвета.Вставить("ИспользуемыеСтатьи", ПолученныеДанные.ТабСтатьиСписок);
		
	КонецЕсли;
	
	Если ПолученныеДанные.Свойство("ИспользуемыеПараметры") Тогда
		Для Каждого Запись Из ПолученныеДанные.ИспользуемыеПараметры Цикл
			ПостроительЗапроса.Параметры.Вставить(Запись.ИмяПараметра, Запись.ЗначениеПараметра);
		КонецЦикла;
	КонецЕсли;
	
	Если ПолученныеДанные.Свойство("ИспользуемыеОтборы") Тогда
		
		Для Каждого Запись Из ПолученныеДанные.ИспользуемыеОтборы Цикл
			Если Запись.Рассчитывается И ТипЗнч(Запись.Значение) = Тип("Структура") Тогда
				ТекЗначение = ПолучитьЗначениеОтбора(База, Запись.Значение);
			Иначе
				ТекЗначение = Новый СписокЗначений;
				ТекЗначение.Добавить(Запись.Значение);
			КонецЕсли;
			
			Отбор = ПостроительЗапроса.Отбор.Добавить(Запись.ИмяОтбора);
			Отбор.Использование = Истина;
			
			Если Запись.ТипОтбора = ВидСравнения.ВСписке
			 ИЛИ Запись.ТипОтбора = ВидСравнения.ВСпискеПоИерархии Тогда
				Если ТекЗначение.Количество() = 1 Тогда
					Отбор.ВидСравнения = ВернутьВидСравненияВИБ(База, ВидСравнения.Равно);
					Отбор.Значение = ТекЗначение[0].Значение;
				Иначе
					Отбор.ВидСравнения = ВернутьВидСравненияВИБ(База, Запись.ТипОтбора);
					Отбор.Значение = ТекЗначение;
				КонецЕсли;
			ИначеЕсли Запись.ТипОтбора = ВидСравнения.НеВСписке
			 ИЛИ Запись.ТипОтбора = ВидСравнения.НеВСпискеПоИерархии Тогда
				Если ТекЗначение.Количество() = 1 Тогда
					Отбор.ВидСравнения = ВернутьВидСравненияВИБ(База, ВидСравнения.НеРавно);
					Отбор.Значение = ТекЗначение[0].Значение;
				Иначе
					Отбор.ВидСравнения = Запись.ТипОтбора;
					Отбор.Значение = ТекЗначение;
				КонецЕсли;
			ИначеЕсли ТекЗначение.Количество() > 0 И ТекЗначение[0].Значение <> Неопределено Тогда
				Отбор.ВидСравнения = ВернутьВидСравненияВИБ(База, Запись.ТипОтбора);
				Отбор.Значение = ТекЗначение[0].Значение;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	МассивИменПолей                = Новый Массив;	
	
	Если ПолученныеДанные.Свойство("ИспользуемыеПоля") И ЗначениеЗаполнено(ПолученныеДанные.ИспользуемыеПоля) Тогда
		ПостроительЗапроса.ВыбранныеПоля.Очистить();
		Для Каждого Запись Из ПолученныеДанные.ИспользуемыеПоля Цикл
			ПостроительЗапроса.ВыбранныеПоля.Добавить(Запись.ПутьКДанным, Запись.ИмяПоля);
		КонецЦикла;
	Иначе
		
		МассивДобавляемыхПредставлений = Новый Массив;
		
		ОписаниеПримитивныхТипов = База.NewObject("ОписаниеТипов", "Число, Строка, Булево, Дата");
		
		Для Каждого Поле Из ПостроительЗапроса.ВыбранныеПоля Цикл
			ОписаниеПоля = ПостроительЗапроса.ДоступныеПоля.Найти(Поле.Имя);
			Если ОписаниеПоля <> Неопределено Тогда
				Для Каждого ТекТип Из ОписаниеПоля.ТипЗначения.Типы() Цикл
					Если НЕ ОписаниеПримитивныхТипов.ContainsType(ТекТип) Тогда
						МассивДобавляемыхПредставлений.Добавить(Поле);
						МассивИменПолей.Добавить(Поле.Имя);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураОтвета.Вставить("РезультатЗапроса", ПреобразоватьТаблицуКПримитивнымТипам(База, МассивИменПолей, ПостроительЗапроса.Результат.Выгрузить()));
	СтруктураОтвета.Вставить("МассивИменПолей", МассивИменПолей);
	
	Возврат СтруктураОтвета;
	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// КОПИИ ФУНКЦИЙ, ИСПОЛЬЗУЕМЫХ ПРИ ПОДГОТОВКЕ ЗАПРОСА ДЛЯ ПОЛУЧЕНИЯ ДАННЫХ ИЗ
// ВИБ В КОНСОЛИДАЦИИ.
//

// Функция получает таблицу иерархически подчиненных счетов счету, код которого задан
// параметром КодОсновногоСчета.
//
Функция ПолучитьСчетаВИерархии(База, КодОсновногоСчета, ПланСчетов)
	
	//Запрос       = Новый Запрос;
	Запрос = База.NewObject("Запрос");
	Запрос.Текст =" 
	|ВЫБРАТЬ
	|ПланСчетов.Ссылка КАК Ссылка,
	|ПланСчетов.Код КАК Код
	|ИЗ
	|ПланСчетов."+ПланСчетов+" КАК ПланСчетов
	|ГДЕ
	|ПланСчетов.Ссылка В ИЕРАРХИИ
	|		(ВЫБРАТЬ
	|			ПланОтбор.Ссылка
	|		ИЗ
	|			ПланСчетов."+ПланСчетов+" КАК ПланОтбор
	|		ГДЕ ПланОтбор.Код=&КодОсновногоСчета)";
	
	Запрос.УстановитьПараметр("КодОсновногоСчета",КодОсновногоСчета);
	
	Возврат Запрос.Выполнить().Выгрузить();

	
КонецФункции

// Функция возвращает таблицу иерархически подчиненных статей статье, код которой
// передан в параметре КодОсновнойСтатьи.
//
Функция ПолучитьСтатьиВИерархии(База, КодОсновнойСтатьи)
	
	Запрос = База.NewObject("Запрос");
	
	Запрос.Текст="
	|ВЫБРАТЬ
	|СтатьиОборотовПоБюджетам.Ссылка,
	|СтатьиОборотовПоБюджетам.Код
	|ИЗ
	|Справочник.СтатьиОборотовПоБюджетам КАК СтатьиОборотовПоБюджетам
	|ГДЕ
	|(НЕ СтатьиОборотовПоБюджетам.ЭтоГруппа)
	|И СтатьиОборотовПоБюджетам.Ссылка В ИЕРАРХИИ
	|(ВЫБРАТЬ
	|	СтатьиОборотовПоБюджетам.Ссылка
	|ИЗ
	|	Справочник.СтатьиОборотовПоБюджетам КАК СтатьиОборотовПоБюджетам
	|ГДЕ
	|	СтатьиОборотовПоБюджетам.Код = &КодОсновнойСтатьи)";
		
	Запрос.УстановитьПараметр("КодОсновнойСтатьи",КодОсновнойСтатьи);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьЗначениеОтбора(База, ЗначениеОтбора)
	
	СписокЗначений = База.NewObject("СписокЗначений");
	
	//Запрос = Новый Запрос;
	Запрос = База.NewObject("Запрос");
	
	ИмяСправочника = ?(ЗначениеОтбора.Свойство("_Справочник"), ЗначениеОтбора._Справочник, ЗначениеОтбора._Справочники.СправочникБД);
	
	Для Каждого Элемент Из ЗначениеОтбора.МассивОтбора Цикл
		
		Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ " + ИмяСправочника + " ГДЕ ";
		
		Для Каждого КлючИЗначение Из Элемент Цикл
			Если КлючИЗначение.Ключ = "_ЗначениеКонсолидации" Тогда
				Продолжить;
			ИначеЕсли КлючИЗначение.Ключ = "Ссылка" И СтрНайти(ВРЕГ(КлючИЗначение.Значение), "ЗНАЧЕНИЕ") > 0 Тогда
				Запрос.Текст = Запрос.Текст + " " + КлючИЗначение.Ключ + " = " + КлючИЗначение.Значение + " И ";
			Иначе
				КлючЗначения = СтрЗаменить(КлючИЗначение.Ключ, ".", "_");
				Запрос.Текст = Запрос.Текст + " " + КлючИЗначение.Ключ + " = &" + КлючЗначения + " И ";
				Запрос.УстановитьПараметр(КлючЗначения, КлючИЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст) - 2);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СписокЗначений.Добавить(Выборка.Ссылка);
			
		Иначе
			
			Если СтрНайти(ИмяСправочника, "Справочник.") > 0 Тогда
				ПустоеЗначение = База.Catalogs[СтрЗаменить(ИмяСправочника, "Справочник.", "")].ПустаяСсылка();
			ИначеЕсли СтрНайти(ИмяСправочника, "ПланСчетов.") > 0 Тогда
				ПустоеЗначение = База.ChartsOfAccounts[СтрЗаменить(ИмяСправочника, "ПланСчетов.", "")].ПустаяСсылка();
			ИначеЕсли СтрНайти(ИмяСправочника, "ПланВидовХарактеристик.") > 0 Тогда
				ПустоеЗначение = База.ChartsOfCharacteristicTypes[СтрЗаменить(ИмяСправочника, "ПланВидовХарактеристик.", "")].ПустаяСсылка();
			Иначе
				ПустоеЗначение = База.Enums[СтрЗаменить(ИмяСправочника, "Перечисление.", "")].ПустаяСсылка();
			КонецЕсли;
			
			СписокЗначений.Добавить(ПустоеЗначение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокЗначений;
	
КонецФункции

Функция ВернутьВидСравненияВИБ(База, ТекВидСравнения)
	

	Если ТекВидСравнения = ВидСравнения.Больше Тогда 
		Возврат База.ComparisonType.Greater;
	КонецЕсли;
	
	Если ТекВидСравнения = ВидСравнения.БольшеИлиРавно Тогда 
		Возврат База.ComparisonType.GreaterOrEqual;
	КонецЕсли;

	Если ТекВидСравнения = ВидСравнения.ВИерархии Тогда 
		Возврат База.ComparisonType.InHierarchy;
	КонецЕсли;

	Если ТекВидСравнения = ВидСравнения.ВСписке Тогда 
		Возврат База.ComparisonType.InList;
	КонецЕсли;
	Если ТекВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда 
		Возврат  База.ComparisonType.InListByHierarchy;
	КонецЕсли;

	Если ТекВидСравнения = ВидСравнения.Интервал Тогда 
		Возврат База.ComparisonType.Interval;
	КонецЕсли;

	Если ТекВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда 
		Возврат База.ComparisonType.IntervalIncludingBounds;
	КонецЕсли;

	Если ТекВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда 
		Возврат База.ComparisonType.IntervalIncludingLowerBound;
	КонецЕсли;

	Если ТекВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда 
		Возврат База.ComparisonType.IntervalIncludingUpperBound;
	КонецЕсли;

	Если ТекВидСравнения = ВидСравнения.Меньше Тогда 
		Возврат База.ComparisonType.Less;
	КонецЕсли;

	Если ТекВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда 
		Возврат База.ComparisonType.LessOrEqual;
	КонецЕсли;

	Если ТекВидСравнения = ВидСравнения.НеВИерархии Тогда 
		Возврат База.ComparisonType.NotInHierarchy;
	КонецЕсли;

	Если ТекВидСравнения = ВидСравнения.НеВСписке Тогда 
		Возврат База.ComparisonType.NotInList;
	КонецЕсли;

	Если ТекВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда 
		Возврат База.ComparisonType.NotInListByHierarchy;
	КонецЕсли;

	Если ТекВидСравнения = ВидСравнения.НеРавно Тогда 
		Возврат База.ComparisonType.NotEqual;
	КонецЕсли;

	Если ТекВидСравнения = ВидСравнения.НеСодержит Тогда 
		Возврат База.ComparisonType.NotContains;
	КонецЕсли;

	Если ТекВидСравнения = ВидСравнения.Равно Тогда 
		Возврат База.ComparisonType.Equal;
	КонецЕсли;

	Если ТекВидСравнения = ВидСравнения.Содержит Тогда 
		Возврат База.ComparisonType.Contains;
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРА ПРЕОБРАЗОВАНИЯ ТАБЛИЦЫ К ПРИМТИТИВНЫМ ТИПАМ.
//
Функция ПреобразоватьТаблицуКПримитивнымТипам(База, МассивКолонокСсылочныхТипов, ТаблицаДанных)
	
	ИтоговаяТаблица = Новый ТаблицаЗначений;
	ОписаниеСтроковогоТипаCOM = База.NewObject("ОписаниеТипов", "Строка");
	ТипСтрока = Тип("Строка");
	ТипСтрокаCOM =  ОписаниеСтроковогоТипаCOM.Types().Get(0);
	СтрокаИсключений = "";
	
	Для Каждого Колонка Из ТаблицаДанных.Колонки Цикл
		
		ВО_ОписаниеТипов = РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьОписаниеПримитивногоТипаИзБД(База, Колонка.ТипЗначения);
		
		Если ВО_ОписаниеТипов <> Неопределено Тогда
			МассивТипов = ВО_ОписаниеТипов.Типы();
		КонецЕсли;
		
		Если МассивКолонокСсылочныхТипов.Найти(Колонка.Имя) <> Неопределено Тогда
			
			МассивТипов.Добавить(Тип("Структура"));
			
		КонецЕсли;
		
		СтруктураКвалификаторов = ВернутьСтруктуруКвалификаторов(База, Колонка.ТипЗначения);
	
		НоваяКолонка = ИтоговаяТаблица.Колонки.Добавить(Колонка.Имя, Новый ОписаниеТипов(МассивТипов, СтруктураКвалификаторов.ТК_Числа, СтруктураКвалификаторов.ТК_Строки, СтруктураКвалификаторов.ТК_Даты));
	
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаИсключений) Тогда
		СтрокаИсключений = Сред(СтрокаИсключений, 2);
	КонецЕсли;
	
	ОписаниеПримитивныхТипов = База.NewObject("ОписаниеТипов", "Булево, Дата, Строка, Число");
	
	КэшСоответствий = Новый Соответствие;
	
	Для Каждого Строка Из ТаблицаДанных Цикл
		НоваяСтрока = ИтоговаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, , СтрокаИсключений);
		Для Каждого Элемент Из МассивКолонокСсылочныхТипов Цикл
			ТекЗначение = Строка[Элемент];
			
			Если Не РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьЗначениеЗаполнено(База,ТекЗначение) Тогда
				Продолжить;
			КонецЕсли;
			
			ТипЗначения = РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьFromXMLType(База,РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLTypeOf(База,ТекЗначение));
			Если ТекЗначение <> Неопределено И ТекЗначение <> Null И НЕ ОписаниеПримитивныхТипов.СодержитТип(ТипЗначения) Тогда
				ЗначениеВТаблицу = КэшСоответствий[ТекЗначение];
				Если ЗначениеВТаблицу = Неопределено Тогда
					ЗначениеВТаблицу = ПолучитьПредставлениеСсылки(База, ТекЗначение);
					КэшСоответствий.Вставить(ТекЗначение, ЗначениеВТаблицу);
				КонецЕсли;
				НоваяСтрока[Элемент] = ЗначениеВТаблицу;
			Иначе
				НоваяСтрока[Элемент] = ТекЗначение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ИтоговаяТаблица;
	
КонецФункции

Функция ВернутьСтруктуруКвалификаторов(База, ОписаниеТиповВИБ)
	
		
	Структура = Новый Структура;
	Структура.Вставить("ТК_Числа", Новый КвалификаторыЧисла(ОписаниеТиповВИБ.NumberQualifiers.Digits
								  , ОписаниеТиповВИБ.NumberQualifiers.FractionDigits
								  , ?(ОписаниеТиповВИБ.NumberQualifiers.AllowedSign = База.AllowedSign.Any, ДопустимыйЗнак.Любой, ДопустимыйЗнак.Неотрицательный)));

	Структура.Вставить("ТК_Строки", Новый КвалификаторыСтроки(?(ОписаниеТиповВИБ.StringQualifiers.Length = 0, 200, ОписаниеТиповВИБ.StringQualifiers.Length = 0)
									, ?(ОписаниеТиповВИБ.StringQualifiers.AllowedLength = База.AllowedLength.Variable
										, ДопустимаяДлина.Переменная
										, ДопустимаяДлина.Фиксированная)));
										
	COM_DateFractions = ОписаниеТиповВИБ.DateQualifiers.DateFractions;

	Если COM_DateFractions = База.DateFractions.Date Тогда
		ДатаЧасть = ЧастиДаты.Дата;
	ИначеЕсли COM_DateFractions = База.DateFractions.Time Тогда
		ДатаЧасть = ЧастиДаты.Время;
	Иначе
		ДатаЧасть = ЧастиДаты.ДатаВремя;
	КонецЕсли;

	Структура.Вставить("ТК_Даты", Новый КвалификаторыДаты(ДатаЧасть));

	Возврат Структура;
	
КонецФункции

Функция ПолучитьПредставлениеСсылки(База, ТекСсылка)
	
	Попытка
		Возврат Новый Структура("ТипЗначения, Значение", РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLTypeOf(База,ТекСсылка).ИмяТипа, РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLString(База,ТекСсылка));//Строка(ТекСсылка.УникальныйИдентификатор());
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьОтображениеОбъектаТек(СтроковоеПредставление,НаименованиеФормы)
	
	ТекСсылка=СтроковоеПредставление.Ссылка;	
	ТабличныйДокумент = Новый Табличныйдокумент;
	
	НаименованиеМетаданных = ТекСсылка.Метаданные().ПолноеИмя();
	НаименованиеФормы      = НаименованиеМетаданных;
	
	ТипМетаданных = Лев(НаименованиеМетаданных, СтрНайти(НаименованиеМетаданных, ".") - 1);
	ТекМетаданные = ТекСсылка.Метаданные();
	
	Если ТипМетаданных="Перечисление" Тогда
		
		Возврат ТабличныйДокумент;
		
	КонецЕсли;
	
	СоответствиеШиринКолонок = Новый Соответствие;
	
	ОписаниеПримитивныхТипов = Новый ОписаниеТИпов("Строка, Число, Булево, Дата");
	
	ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,1, 1, ТипМетаданных, СоответствиеШиринКолонок, 12, Истина);
	ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,2, 1, ТекМетаданные.Синоним, СоответствиеШиринКолонок, 12, Истина);
	
	Если ТипМетаданных = "Документ" Тогда
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,3, 1, Нстр("ru = 'Номер '"), СоответствиеШиринКолонок, 10, Истина);
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,3, 2, ТекСсылка.Номер, СоответствиеШиринКолонок, 10, Истина);
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,4, 1, Нстр("ru = ' от '"), СоответствиеШиринКолонок, 10, Истина);
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,4, 2, ТекСсылка.Дата, СоответствиеШиринКолонок, 10, Истина);
	Иначе
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,3, 1, Нстр("ru = 'Код '"), СоответствиеШиринКолонок, 10, Истина);
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,3, 2, ТекСсылка.Код, СоответствиеШиринКолонок, 10, Истина);
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,4, 1, Нстр("ru = 'Наименование'"), СоответствиеШиринКолонок, 10, Истина);
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,4, 2, ТекСсылка.Наименование, СоответствиеШиринКолонок, 10, Истина);
	КонецЕсли;
	
	ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,6, 1, Нстр("ru = 'Реквизиты:  '"), СоответствиеШиринКолонок, 10, Истина);
	
	ТекСтрока = 7;
	
	ТекстЗапроса = "";
	
	Для Каждого Реквизит ИЗ ТекМетаданные.Реквизиты Цикл
		
		ТекстЗапроса = ТекстЗапроса + ",
		|" + Реквизит.Имя + " КАК " + Реквизит.Имя + "
		|, ПРЕДСТАВЛЕНИЕ(" + Реквизит.Имя + ") КАК " + Реквизит.Имя + "_Представление";
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ " + Сред(ТекстЗапроса, 2) + " 
		|ИЗ " + НаименованиеМетаданных + " ГДЕ Ссылка = &Ссылка";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", ТекСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Для Каждого Реквизит Из ТекМетаданные.Реквизиты Цикл
				Если Выборка[Реквизит.Имя] <> Неопределено Тогда
					ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,ТекСтрока, 1, Реквизит.Синоним, СоответствиеШиринКолонок, , Истина, Истина, ЦветФонаРеквизита, ЦветРамкиРеквизита);
					Если НЕ ОписаниеПримитивныхТипов.СодержитТип(ТипЗнч(Выборка[Реквизит.Имя])) Тогда
						Расшифровка = Новый Структура("Ссылка",Выборка[Реквизит.Имя]);
					Иначе
						Расшифровка = Неопределено;
					КонецЕсли;
					ВывестиПоКоординатам(ОписаниеПримитивныхТипов, ТабличныйДокумент,ТекСтрока, 2, Выборка[Реквизит.Имя + "_Представление"], СоответствиеШиринКолонок, , , Истина, ЦветФонаЗначения, ЦветРамкиРеквизита, Расшифровка);
					ТекСтрока = ТекСтрока + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

	Для Каждого ТабличнаяЧасть Из ТекМетаданные.ТабличныеЧасти Цикл
		
		ТекСтрока = ТекСтрока + 1;
			ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,ТекСтрока, 1, ТабличнаяЧасть.Синоним, , 10, Истина,);
			МассивРеквизитов = Новый Массив;
			ТекСтрока = ТекСтрока + 1;
			ТекКолонка = 1;
			НачалоСтрок = ТекСтрока;
			
			ТекстЗапроса = "";
			
			Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
				
				ТекстЗапроса = ТекстЗапроса + ",
				|" + Реквизит.Имя + " КАК " + Реквизит.Имя + "
				|, ПРЕДСТАВЛЕНИЕ(" + Реквизит.Имя + ") КАК " + Реквизит.Имя + "_Представление";
				
				МассивРеквизитов.Добавить(Реквизит.Имя);
				ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,ТекСтрока, ТекКолонка, Реквизит.Синоним, , ,Истина, Истина, ЦветФонаТабличнойЧасти, ЦветРамкиТабличнойЧасти);
				ТекКолонка = ТекКолонка + 1;
				
			КонецЦикла;
			
			Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
				
				ТекстЗапроса = "ВЫБРАТЬ " + Сред(ТекстЗапроса, 2) + " 
				|ИЗ " + НаименованиеМетаданных + "." + ТабличнаяЧасть.Имя + " ГДЕ Ссылка = &Ссылка";
				Запрос = Новый Запрос(ТекстЗапроса);
				Запрос.УстановитьПараметр("Ссылка", ТекСсылка);
				
				ТекСтрока = ТекСтрока + 1;
				
				ТекИнд = 0;
				
				ТекТаблЧасть = Запрос.Выполнить().Выгрузить();
				
				Для Каждого Строка Из ТекТаблЧасть Цикл
					ТекКолонка = 1;
					Для Каждого Реквизит Из МассивРеквизитов Цикл
						
						Если НЕ ОписаниеПримитивныхТипов.СодержитТип(ТипЗнч(Строка[Реквизит])) Тогда
							Расшифровка = Новый Структура("Ссылка", Строка[Реквизит]);
						Иначе
							Расшифровка = Неопределено;
						КонецЕсли;

						ВывестиПоКоординатам(ОписаниеПримитивныхТипов, ТабличныйДокумент,ТекСтрока, ТекКолонка, Строка[Реквизит + "_Представление"], СоответствиеШиринКолонок, , , Истина, ЦветаТабличнойЧасти[ТекИнд], ЦветРамкиТабличнойЧасти, Расшифровка);
						ТекКолонка = ТекКолонка + 1;
					КонецЦикла;
					ТекИнд = ?(ТекИнд = 0, 1, 0);
					ТекСтрока = ТекСтрока + 1;
				КонецЦикла;
				
			КонецЕсли;
			
			ТабличныйДокумент.Область(НачалоСтрок, , ТекСтрока).Сгруппировать();
		
	КонецЦикла;
	
	Для Каждого Запись Из СоответствиеШиринКолонок Цикл
		ТабличныйДокумент.Область(1, Запись.Ключ, ТекСтрока).ШиринаКолонки = ?(Запись.Значение < 8, 8, ?(Запись.Значение > 40, 40, Запись.Значение));
	КонецЦикла;

	Возврат ТабличныйДокумент;

	
КонецФункции // ПолучитьОтображениеОбъектаТек()

Функция ПолучитьОтображениеОбъектаCOM(База,СтроковоеПредставление,НаименованиеФормы)
		
	ТабличныйДокумент = Новый Табличныйдокумент;
	
	ТипСсылки=База.NewObject("ОписаниеТипов", СтроковоеПредставление.ТипЗначения).Types().Get(0);
	ТипМетаданных=ОбщегоНазначенияУХ.ПолучитьНаименованиеСсылочногоТипаБД(База, ТипСсылки);
	
	Если ТипМетаданных="НеПоддерживается" Тогда
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	ТекСсылка = РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLValue(База,ТипСсылки, СтроковоеПредставление.Значение);
	
	Если ТЕкСсылка = Неопределено Тогда
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	НаименованиеМетаданных = РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьРабочееПредставлениеТипа(ТекСсылка.Метаданные().ПолноеИмя());
	
	ТипМетаданных = Лев(НаименованиеМетаданных, СтрНайти(НаименованиеМетаданных, ".") - 1);
	ТекМетаданные = РаботаСОбъектамиМетаданныхВнешнийУХ.МетаданныеНайтиПоПолномуИмени(База,НаименованиеМетаданных);
	
	Если ТипМетаданных="Перечисление" Тогда
		
		Возврат ТабличныйДокумент;
		
	КонецЕсли;
	
	СоответствиеШиринКолонок = Новый Соответствие;
	
	ОписаниеПримитивныхТипов = Новый ОписаниеТИпов("Строка, Число, Булево, Дата");
	
	ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,1, 1, ТипМетаданных, СоответствиеШиринКолонок, 12, Истина);
	ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,2, 1, ТекМетаданные.Синоним, СоответствиеШиринКолонок, 12, Истина);
	
	Если ТипМетаданных = "Документ" Тогда
		
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,3, 1, Нстр("ru = 'Номер '"), СоответствиеШиринКолонок, 10, Истина);
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,3, 2, ТекСсылка.Номер, СоответствиеШиринКолонок, 10, Истина);
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,4, 1, Нстр("ru = ' от '"), СоответствиеШиринКолонок, 10, Истина);
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,4, 2, ТекСсылка.Дата, СоответствиеШиринКолонок, 10, Истина);
		
		НаименованиеФормы      = СтрШаблон(Нстр("ru = 'Документ %1 №%2 от %3'"), ТекМетаданные.Синоним, ТекСсылка.Номер, ТекСсылка.Дата); 
		
	Иначе
		
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,3, 1, Нстр("ru = 'Код '"), СоответствиеШиринКолонок, 10, Истина);
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,3, 2, ТекСсылка.Код, СоответствиеШиринКолонок, 10, Истина);
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,4, 1, "Наименование", СоответствиеШиринКолонок, 10, Истина);
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,4, 2, ТекСсылка.Наименование, СоответствиеШиринКолонок, 10, Истина);
		
		НаименованиеФормы      = СтрШаблон(Нстр("ru = 'Справочник %1: %2'"), ТекМетаданные.Синоним, ТекСсылка.Наименование);
		
	КонецЕсли;
	
	ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,6, 1, Нстр("ru = 'Реквизиты:  '"), СоответствиеШиринКолонок, 10, Истина);
	
	ТекСтрока = 7;
	
	ТекстЗапроса = "";
	
	Для Каждого Реквизит ИЗ ТекМетаданные.Реквизиты Цикл
		
		ТекстЗапроса = ТекстЗапроса + ",
		|" + Реквизит.Имя + " КАК " + Реквизит.Имя + "
		|, ПРЕДСТАВЛЕНИЕ(" + Реквизит.Имя + ") КАК " + Реквизит.Имя + "_Представление";
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ " + Сред(ТекстЗапроса, 2) + " 
		|ИЗ " + НаименованиеМетаданных + " ГДЕ Ссылка = &Ссылка";
		Запрос = База.NewObject("Запрос", ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", ТекСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Для Каждого Реквизит Из ТекМетаданные.Реквизиты Цикл
				Если Выборка[Реквизит.Имя] <> Неопределено Тогда
					ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,ТекСтрока, 1, Реквизит.Синоним, СоответствиеШиринКолонок, , Истина, Истина, ЦветФонаРеквизита, ЦветРамкиРеквизита);
					Если НЕ ОписаниеПримитивныхТипов.СодержитТип(ТипЗнч(Выборка[Реквизит.Имя])) Тогда
						Расшифровка = ВернутьРасшифровку(База, Выборка[Реквизит.Имя]);
					Иначе
						Расшифровка = Неопределено;
					КонецЕсли;
					ВывестиПоКоординатам(ОписаниеПримитивныхТипов, ТабличныйДокумент,ТекСтрока, 2, Выборка[Реквизит.Имя + "_Представление"], СоответствиеШиринКолонок, , , Истина, ЦветФонаЗначения, ЦветРамкиРеквизита, Расшифровка);
					ТекСтрока = ТекСтрока + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

	Для Каждого ТабличнаяЧасть Из ТекМетаданные.ТабличныеЧасти Цикл
		
		ТекСтрока = ТекСтрока + 1;
			ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,ТекСтрока, 1, ТабличнаяЧасть.Синоним, , 10, Истина,);
			МассивРеквизитов = Новый Массив;
			ТекСтрока = ТекСтрока + 1;
			ТекКолонка = 1;
			НачалоСтрок = ТекСтрока;
			
			ТекстЗапроса = "";
			
			Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
				
				ТекстЗапроса = ТекстЗапроса + ",
				|" + Реквизит.Имя + " КАК " + Реквизит.Имя + "
				|, ПРЕДСТАВЛЕНИЕ(" + Реквизит.Имя + ") КАК " + Реквизит.Имя + "_Представление";
				
				МассивРеквизитов.Добавить(Реквизит.Имя);
				ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,ТекСтрока, ТекКолонка, Реквизит.Синоним, , ,Истина, Истина, ЦветФонаТабличнойЧасти, ЦветРамкиТабличнойЧасти);
				ТекКолонка = ТекКолонка + 1;
				
			КонецЦикла;
			
			Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
				
				ТекстЗапроса = "ВЫБРАТЬ " + Сред(ТекстЗапроса, 2) + " 
				|ИЗ " + НаименованиеМетаданных + "." + ТабличнаяЧасть.Имя + " ГДЕ Ссылка = &Ссылка";
				Запрос = База.NewObject("Запрос", ТекстЗапроса);
				Запрос.УстановитьПараметр("Ссылка", ТекСсылка);
				
				ТекСтрока = ТекСтрока + 1;
				
				ТекИнд = 0;
				
				ТекТаблЧасть = Запрос.Выполнить().Выгрузить();
				
				Для Каждого Строка Из ТекТаблЧасть Цикл
					ТекКолонка = 1;
					Для Каждого Реквизит Из МассивРеквизитов Цикл
						
						Если НЕ ОписаниеПримитивныхТипов.СодержитТип(ТипЗнч(Строка[Реквизит])) Тогда
							Расшифровка = ВернутьРасшифровку(База, Строка[Реквизит]);
						Иначе
							Расшифровка = Неопределено;
						КонецЕсли;

						ВывестиПоКоординатам(ОписаниеПримитивныхТипов, ТабличныйДокумент,ТекСтрока, ТекКолонка, Строка[Реквизит + "_Представление"], СоответствиеШиринКолонок, , , Истина, ЦветаТабличнойЧасти[ТекИнд], ЦветРамкиТабличнойЧасти, Расшифровка);
						ТекКолонка = ТекКолонка + 1;
					КонецЦикла;
					ТекИнд = ?(ТекИнд = 0, 1, 0);
					ТекСтрока = ТекСтрока + 1;
				КонецЦикла;
				
			КонецЕсли;
			
			ТабличныйДокумент.Область(НачалоСтрок, , ТекСтрока).Сгруппировать();
		
	КонецЦикла;
	
	Для Каждого Запись Из СоответствиеШиринКолонок Цикл
		ТабличныйДокумент.Область(1, Запись.Ключ, ТекСтрока).ШиринаКолонки = ?(Запись.Значение < 8, 8, ?(Запись.Значение > 40, 40, Запись.Значение));
	КонецЦикла;

	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОтображениеОбъектаCOM()

Функция ПолучитьПредставлениеОбъекта77(Объект77,Реквизит)
		
	Если СтрНайти(Реквизит.ТипДанных,"Справочник")>0 Тогда
		
		Возврат Объект77.Наименование;
		
	ИначеЕсли СтрНайти(Реквизит.ТипДанных,"Документ")>0 Тогда
		
		Возврат СтрШаблон(Нстр("ru = '%1 №%2 от %3'"), Объект77.ПредставлениеВида(), Объект77.НомерДок, 
			Формат(Объект77.ДатаДок,"ДФ=dd.MM.yyyy"));
		
	ИначеЕсли СтрНайти(Реквизит.ТипДанных,"Перечисление")>0 Тогда
		
		Возврат Объект77.Identifier();
		
	Иначе
		
		Возврат Объект77;
		
	КонецЕсли;
			
КонецФункции // ПолучитьПредставлениеОбъекта77()

Функция ПолучитьРасшифровкуРеквизита77(Реквизит77,ОписаниеРеквизита)
	
	Если СтрНайти(ОписаниеРеквизита.ТипДанных,"Справочник")>0 Тогда
		
		Возврат Новый Структура("ТипОбъектаМетаданных,Вид,Код","Справочник",Реквизит77.Вид(),Реквизит77.Код);
		
	ИначеЕсли СтрНайти(ОписаниеРеквизита.ТипДанных,"Документ")>0 Тогда
		
		Возврат Новый Структура("ТипОбъектаМетаданных,Вид,НомерДок,ДатаДок","Документ",Реквизит77.Вид(),Реквизит77.НомерДок,Реквизит77.ДатаДок);
				
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
		
КонецФункции // ПолучитьРасшифровкуРеквизита77()

Функция ПолучитьОтображениеОбъекта77(База,ДанныеОбъекта,НаименованиеФормы) Экспорт
	
	ТабличныйДокумент = Новый Табличныйдокумент;
	
	ОбъектВИБ=База.CreateObject(ДанныеОбъекта.ТипОбъектаМетаданных+"."+ДанныеОбъекта.Вид);
	
	Если ДанныеОбъекта.ТипОбъектаМетаданных="Документ" Тогда
		
		ОбъектВИБ.НайтиПоНомеру(ДанныеОбъекта.НомерДок, ДанныеОбъекта.ДатаДок);
		
		Если ОбъектВИБ.Выбран() = 1 Тогда
			
			ТекСсылка=ОбъектВИБ.ТекущийДокумент();
			
		Иначе
			
			Возврат ТабличныйДокумент;
			
		КонецЕсли;
		
	ИначеЕсли ДанныеОбъекта.ТипОбъектаМетаданных="Справочник" Тогда
		
		ОбъектВИБ.НайтиПоКоду(ДанныеОбъекта.Код);
		
		Если ОбъектВИБ.Выбран() = 1 Тогда
			
			ТекСсылка=ОбъектВИБ.ТекущийЭлемент();
			
		Иначе
			
			Возврат ТабличныйДокумент;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекМетаданные		= Справочники[?(ДанныеОбъекта.ТипОбъектаМетаданных="Документ","ДокументыБД","СправочникиБД")].НайтиПоНаименованию(ДанныеОбъекта.Вид,,,ДанныеОбъекта.ИспользуемаяИБ.ТипБД);	
	
	СоответствиеШиринКолонок = Новый Соответствие;
	
	ОписаниеПримитивныхТипов = Новый ОписаниеТИпов("Строка, Число, Булево, Дата");
	
	ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,1, 1, ДанныеОбъекта.ТипОбъектаМетаданных, СоответствиеШиринКолонок, 12, Истина);
	ВывестиПоКоординатам( Неопределено, ТабличныйДокумент,2, 1, ТекМетаданные.Синоним, СоответствиеШиринКолонок, 12, Истина);
	
	Если ДанныеОбъекта.ТипОбъектаМетаданных="Документ" Тогда	
		
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,3, 1, Нстр("ru = 'Номер '"), СоответствиеШиринКолонок, 10, Истина);
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,3, 2, ТекСсылка.НомерДок, СоответствиеШиринКолонок, 10, Истина);
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,4, 1, Нстр("ru = ' от '"), СоответствиеШиринКолонок, 10, Истина);
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,4, 2, ТекСсылка.ДатаДок, СоответствиеШиринКолонок, 10, Истина);
		
		НаименованиеФормы=СтрШаблон(Нстр("ru = 'Документ %1 №%2 от %3'"), ДанныеОбъекта.Вид, ТекСсылка.НомерДок, ТекСсылка.ДатаДок);
		
	Иначе
		
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,3, 1, Нстр("ru = 'Код '"), СоответствиеШиринКолонок, 10, Истина);
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,3, 2, ТекСсылка.Код, СоответствиеШиринКолонок, 10, Истина);
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,4, 1, Нстр("ru = 'Наименование'"), СоответствиеШиринКолонок, 10, Истина);
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,4, 2, ТекСсылка.Наименование, СоответствиеШиринКолонок, 10, Истина);
		
		НаименованиеФормы=СтрШаблон(Нстр("ru = 'Справочник %1: %2'"), ДанныеОбъекта.Вид, ТекСсылка.Наименование);
		
	КонецЕсли;	
	
	ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,6, 1, Нстр("ru = 'Реквизиты:  '"), СоответствиеШиринКолонок, 10, Истина);
	
	ТекСтрока = 7;
	
	Для Каждого Реквизит Из ТекМетаданные.Реквизиты Цикл
		
		Если ПустаяСтрока(Реквизит.ТипДанных) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Попытка
			
			ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,ТекСтрока, 1, Реквизит.Синоним, СоответствиеШиринКолонок, , Истина, Истина, ЦветФонаРеквизита, ЦветРамкиРеквизита);
			
			Если НЕ ОписаниеПримитивныхТипов.СодержитТип(ТипЗнч(ТекСсылка[Реквизит.Имя])) Тогда
				Расшифровка = ПолучитьРасшифровкуРеквизита77(ТекСсылка[Реквизит.Имя],Реквизит);
			Иначе
				Расшифровка = Неопределено;
			КонецЕсли;
			
			ВывестиПоКоординатам(ОписаниеПримитивныхТипов, ТабличныйДокумент,ТекСтрока, 2, ПолучитьПредставлениеОбъекта77(ТекСсылка[Реквизит.Имя],Реквизит), СоответствиеШиринКолонок, , , Истина, ЦветФонаЗначения, ЦветРамкиРеквизита, Расшифровка);
			ТекСтрока = ТекСтрока + 1;
			
		Исключение
			
		КонецПопытки;
		
	КонецЦикла;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТабличныеЧастиБД.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ТабличныеЧастиБД КАК ТабличныеЧастиБД
	|ГДЕ
	|	ТабличныеЧастиБД.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец",ТекМетаданные);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		ТабличнаяЧасть=Результат.Ссылка;
		
		ТекСтрока = ТекСтрока + 1;
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,ТекСтрока, 1, ТабличнаяЧасть.Синоним, , 10, Истина,);
		МассивРеквизитов = Новый Массив;
		ТекСтрока = ТекСтрока + 1;
		ТекКолонка = 1;
		НачалоСтрок = ТекСтрока;
		
		ТекстЗапроса = "";
		
		Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
			
			Если ПустаяСтрока(Реквизит.ТипДанных) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,ТекСтрока, ТекКолонка, Реквизит.Синоним, , ,Истина, Истина, ЦветФонаТабличнойЧасти, ЦветРамкиТабличнойЧасти);
			ТекКолонка = ТекКолонка + 1;
			
		КонецЦикла;
		
		ТекСтрока = ТекСтрока + 1;
		
		ТекСсылка.ВыбратьСтроки();
		Пока ТекСсылка.ПолучитьСтроку() Цикл
			
			ТекКолонка = 1;
			Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
				
				Если ПустаяСтрока(Реквизит.ТипДанных) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Попытка
					
					Если НЕ ОписаниеПримитивныхТипов.СодержитТип(ТипЗнч(ТекСсылка[Реквизит.Имя])) Тогда
						Расшифровка = ПолучитьРасшифровкуРеквизита77(ТекСсылка[Реквизит.Имя],Реквизит);
					Иначе
						Расшифровка = Неопределено;
					КонецЕсли;
					
					ВывестиПоКоординатам(ОписаниеПримитивныхТипов, ТабличныйДокумент,ТекСтрока, ТекКолонка, ПолучитьПредставлениеОбъекта77(ТекСсылка[Реквизит.Имя],Реквизит), СоответствиеШиринКолонок, , , Истина, ЦветаТабличнойЧасти[0], ЦветРамкиТабличнойЧасти, Расшифровка);
					
				Исключение
					
				КонецПопытки;
				
				ТекКолонка = ТекКолонка + 1;
				
			КонецЦикла;
			ТекИнд = ?(ТекИнд = 0, 1, 0);
			ТекСтрока = ТекСтрока + 1;
			
		КонецЦикла;
		
		ТабличныйДокумент.Область(НачалоСтрок, , ТекСтрока).Сгруппировать();
		
	КонецЕсли;
	
	Для Каждого Запись Из СоответствиеШиринКолонок Цикл
		ТабличныйДокумент.Область(1, Запись.Ключ, ТекСтрока).ШиринаКолонки = ?(Запись.Значение < 8, 8, ?(Запись.Значение > 40, 40, Запись.Значение));
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
		
КонецФункции // ПолучитьОтображениеОбъекта77()

Функция ПолучитьОтображениеОтчета(База, СтроковоеПредставление, НаименованиеФормы = Неопределено) Экспорт
	
	ЦветФонаРеквизита         = Новый Цвет(255, 233, 188);
	ЦветФонаЗначения          = Новый Цвет(255, 247, 229);
	ЦветФонаТабличнойЧасти    = Новый Цвет(230, 230, 240);
	ЦветРамкиРеквизита        = Новый Цвет(128, 0, 0);
	ЦветРамкиТабличнойЧасти   = Новый Цвет(100, 100, 150);
	ЦветаТабличнойЧасти = Новый Массив;
	ЦветаТабличнойЧасти.Добавить(Новый Цвет(230, 230, 250));
	ЦветаТабличнойЧасти.Добавить(Новый Цвет(245, 245, 250));
	
	Если СтроковоеПредставление.Свойство("Вид") Тогда
		
		Возврат ПолучитьОтображениеОбъекта77(База,СтроковоеПредставление,НаименованиеФормы);
		
	ИначеЕсли СтроковоеПредставление.Свойство("ТипЗначения") Тогда
		
		Возврат ПолучитьОтображениеОбъектаCOM(База,СтроковоеПредставление,НаименованиеФормы);
	
	ИначеЕсли СтроковоеПредставление.Свойство("Ссылка") Тогда
		
		Возврат ПолучитьОтображениеОбъектаТек(СтроковоеПредставление,НаименованиеФормы);
		
	КонецЕсли;
			
КонецФункции

Функция ВернутьРасшифровку(База, ЗначениеПоказателя)
	
	ТипЗначения = РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLTypeOf(База,ЗначениеПоказателя).TypeName;
	Возврат Новый Структура("ТипЗначения, Значение", ТипЗначения, РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLString(База,ЗначениеПоказателя));
	
КонецФункции

Процедура ВывестиПоКоординатам(ОписаниеПримитивныхТипов, ТабличныйДокумент, Строка, Столбец, Значение, СоответствиеШиринКолонок = Неопределено, Размер = 8, Жирный = Ложь, Обвести = Ложь, ЦветФона = Неопределено, ЦветРамки = Неопределено, Расшифровка = Неопределено)
	
	Если ЦветФона = Неопределено Тогда
		ЦветФона = Новый Цвет;
	КонецЕсли;
	
	Если ЦветРамки = Неопределено Тогда
		ЦветРамки = Новый Цвет;
	КонецЕсли;
	
	ТекОбласть       = ТабличныйДокумент.Область(Строка, Столбец);
	ТекОБласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
	ТекОбласть.ЦветФона  = ЦветФона;
	ТекОбласть.ЦветРамки = ЦветРамки;
	ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ТекОбласть.Шрифт = Новый Шрифт(ТекОбласть.Шрифт, , Размер, Жирный);
	
	Если ТипЗнч(Значение) = Тип("Булево") Тогда
		Если Значение Тогда
			ТекОбласть.Текст = Нстр("ru = 'да'");
			ТекОбласть.ЦветТекста = WebЦвета.Зеленый;
		Иначе
			ТекОбласть.Текст = Нстр("ru = 'нет'");
			ТекОбласть.ЦветТекста = WebЦвета.Красный;
		КонецЕсли;
		
		ТекОБласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		
	Иначе
		
		ТекОбласть.Текст = Значение;
		
	КонецЕсли;
	
	ТекОбласть.Расшифровка = Расшифровка;
	
	Если Обвести Тогда
		Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		ТекОбласть.Обвести(Линия, Линия, Линия, Линия);
	КонецЕсли;
	
	ДлинаСтроки = СтрДлина(СокрЛП(ТабличныйДокумент.Область(Строка, Столбец).текст));
	
	Если СоответствиеШиринКолонок <> Неопределено Тогда
		Если СоответствиеШиринКолонок[Столбец] = Неопределено ИЛИ СоответствиеШиринКолонок[Столбец] <= ДлинаСтроки Тогда
			СоответствиеШиринКолонок.Вставить(Столбец, ДлинаСтроки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры