
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЭтоАдресВременногоХранилища(Параметры.ДанныеФИ) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДанныеФИ = ПолучитьИзВременногоХранилища(Параметры.ДанныеФИ);
	
	Объект.ДополнительныеРасходы.Загрузить(ДанныеФИ.ДополнительныеРасходы);
	Объект.Проценты.Загрузить(ДанныеФИ.Проценты);
	Объект.ГрафикМСФО.Загрузить(ДанныеФИ.ГрафикМСФО);
	Объект.ОсновнойДолг.Загрузить(ДанныеФИ.ОсновнойДолг);
	Объект.ВНА.Загрузить(ДанныеФИ.ВНА);
	Объект.АвансовыеПлатежи.Загрузить(ДанныеФИ.АвансовыеПлатежи);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеФИ.СтрокаФИ);	
	
	Документ = ДанныеФИ.Документ;		
	ДатаНачалаПериодаОтчета	= Документ.ПериодОтчета.ДатаНачала;
	ДатаОкончанияПериодаОтчета = КонецДня(Документ.ПериодОтчета.ДатаОкончания);
	
	Если Объект.ДатаПризнанияДоРекласса <> Дата(1,1,1) Тогда
		
		ДанныеГрафика = Новый Структура("Документ,СтрокаФИ", Документ, Новый Структура("ФИ,ДатаПризнания", Объект.ФИ, Объект.ДатаПризнания));
		
		ПараметрыПредыдущегоГрафика = УчетФинансовыхИнструментовМСФОСерверУХ.ПолучитьПараметрыПредыдущегГрафика(ДанныеГрафика);
		Если ПараметрыПредыдущегоГрафика.Количество() Тогда
			ВерсияДоИзмененияГрафика = ПараметрыПредыдущегоГрафика.ВерсияГрафика;
			//ТекстПараметрыДоРекласса = ВерсияДоИзмененияГрафика;
		КонецЕсли;	
		 
	КонецЕсли;
	
	//Для каждого СтрокаТаб Из Объект.ДополнительныеРасходы Цикл
	//	СтрокаТаб.СуммаБезНДСВВалюте = СтрокаТаб.СуммаВВалюте - СтрокаТаб.НДСВВалюте;	
	//КонецЦикла;
	
	ЭтаФорма.КэшируемыеЗначения = Новый Структура;	
	ЭтаФорма.КэшируемыеЗначения.Вставить("ИменаСубконто", 			Обработки.ГрафикФИМСФО.ПолучитьИменаСубконто());
	ЭтаФорма.КэшируемыеЗначения.Вставить("СчетаГруппыПодробно", 	Новый Структура);
	ЭтаФорма.КэшируемыеЗначения.Вставить("КлючевыеСубконто", 		Новый Соответствие);
	
	МСФОУХ.ЗаполнитьДоступностьСубконто(ЭтаФорма, ЭтаФорма.КэшируемыеЗначения.ИменаСубконто.ОсновнойДолг, 			"ОсновнойДолг");
	МСФОУХ.ЗаполнитьДоступностьСубконто(ЭтаФорма, ЭтаФорма.КэшируемыеЗначения.ИменаСубконто.ДополнительныеРасходы,	"ДополнительныеРасходы");
	МСФОУХ.ЗаполнитьДоступностьСубконто(ЭтаФорма, ЭтаФорма.КэшируемыеЗначения.ИменаСубконто.АвансовыеПлатежи,		"АвансовыеПлатежи");
	
	УстановитьУсловноеОформление();	
	НастроитьСчетаУчета();
	
	УчетФинансовыхИнструментовМСФОКлиентСерверУХ.УправлениеФормой(ЭтаФорма);
	
	ОбновитьЗаголовок(ЭтаФорма);
	ОбновитьОписаниеПараметрыУчетаФИ();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
	Если (ИмяСобытия = "ЗагрузитьГрафикИзТабличногоДокумента") И (Источник = ЭтаФорма) Тогда
		ЗагрузитьГрафикНСБУСервер(Неопределено, Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если (ЭтаФорма = ИсточникВыбора.ВладелецФормы) Тогда
		ОбработкаВыбораНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура РассчитатьСтоимостьВНА(Команда)
	ЗаполнитьГрафик("ЗаполнитьСтоимостьОбъектовПоРСП");	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьГрафик(Команда)
	
	АдресДанныхГрафика = ПолучитьГрафикНаСервере();
	Оповестить("ЗагрузитьИзФормыГрафика", АдресДанныхГрафика, ЭтаФорма.ВладелецФормы);
	
	Закрыть(АдресДанныхГрафика);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПогашениеПроцентов(Команда)
	
	ПараметрыГрафика = Новый Структура("ФИ,ДатаНачала");
		
	ЗаполнитьЗначенияСвойств(ПараметрыГрафика, Объект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыГрафика", 	ПараметрыГрафика);
	ПараметрыФормы.Вставить("АдресТаблицыГрафика", 	ПолучитьАдресТаблицыГрафика(Ложь, Истина));
		
	ОткрытьФорму("Обработка.ЗагрузкаГрафикаФИ.Форма.Форма", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьГрафикОсновногоДолга(Команда)
	
	ПараметрыГрафика = Новый Структура("ФИ,ДатаНачала");
		
	ЗаполнитьЗначенияСвойств(ПараметрыГрафика, Объект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыГрафика", 	ПараметрыГрафика);
	ПараметрыФормы.Вставить("АдресТаблицыГрафика", 	ПолучитьАдресТаблицыГрафика(Истина, Ложь));
		
	ОткрытьФорму("Обработка.ЗагрузкаГрафикаФИ.Форма.Форма", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОсновнойДолгИПроценты(Команда)
	
	ПараметрыГрафика = Новый Структура("ФИ,ДатаНачала");
		
	ЗаполнитьЗначенияСвойств(ПараметрыГрафика, Объект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыГрафика", 	ПараметрыГрафика);
	ПараметрыФормы.Вставить("АдресТаблицыГрафика", 	ПолучитьАдресТаблицыГрафика(Истина, Истина));
		
	ОткрытьФорму("Обработка.ЗагрузкаГрафикаФИ.Форма.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикМСФО_Подробно(Команда)
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробноВНА(Команда)
	Элементы.ВНАПодробноВНА.Пометка = Не Элементы.ВНАПодробноВНА.Пометка;
	Элементы.ГруппаПодробноВНА.Видимость = Элементы.ВНАПодробноВНА.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПослеИзменения(Команда)
	
	Элементы.ФормаГрафикПослеИзменения.Пометка = Истина;
	Элементы.ФормаГрафикДоИзменения.Пометка = Ложь;
	Элементы.ГрафикМСФО.ТолькоПросмотр = Истина;
	
	ГрафикПослеИзмененияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикДоИзменения(Команда)
	
	Если Элементы.ФормаГрафикДоИзменения.Пометка Тогда
		Возврат;//график уже виден, ГрафикДо нельзя помещать в хранилище основного графика
	КонецЕсли;
	
	Элементы.ФормаГрафикПослеИзменения.Пометка = Ложь;
	Элементы.ФормаГрафикДоИзменения.Пометка = Истина;
	Элементы.ГрафикМСФО.ТолькоПросмотр = Ложь;
	
	ГрафикДоИзмененияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробноГрафик(Команда)
	
	Элементы.ФормаПодробноГрафик.Пометка = Не Элементы.ФормаПодробноГрафик.Пометка;	
	УчетФинансовыхИнструментовМСФОКлиентСерверУХ.УправлениеФормой(ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьГрафик(Команда)
	ЗаполнитьГрафик("ЗаполнитьОсновнойДолг");
КонецПроцедуры

&НаКлиенте
Процедура ПодборВНА(Команда)
	
	ТипВНА = Неопределено;
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		ТипВНА = ВстраиваниеУХКлиентСервер.ПолучитьТипОС();	
	Иначе
		ТипВНА = ТипЗнч(ТекущаяСтрока.ВНА);
	КонецЕсли;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("РежимВыбора",			Истина);
	ПараметрыВыбора.Вставить("МножественныйВыбор",	Истина);
	ПараметрыВыбора.Вставить("ЗакрыватьПриВыборе",	ложь);

	
	ИмяФормыОткрытия = "Справочник.ОсновныеСредства.ФормаВыбора";
	Если ТипВНА <> Неопределено Тогда
		ПолноеИмя = СтрРазделить(ОбщегоНазначенияУХ.ИмяТаблицыПоСсылке(Новый (типвна)), ".");
		Если ПолноеИмя.Количество() > 1 Тогда
			ИмяФормыОткрытия = СтрЗаменить("Справочник.ОсновныеСредства.ФормаВыбора", 
											"ОсновныеСредства", ПолноеИмя[1]);
		КонецЕсли;		
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыОткрытия, ПараметрыВыбора, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыВНА(Команда)
	ОткрытьФорму("ЖурналДокументов.ДокументыПоВНАМСФО.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияВНА(Команда)
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормы(ТекущаяСтрока.ВНА);
	
	ОткрытьФорму("Отчет.ДвиженияВНА.Форма", 
					ПараметрыФормы,  
				);

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийРеквизитовФормы

&НаКлиенте
Процедура ПараметрыУчетаФИПриИзменении(Элемент)	
	ОбновитьОписаниеПараметрыУчетаФИ();
	ЗаполнитьГрафик("ЗаполнитьОсновнойДолг");		
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаГрафикаПриИзменении(Элемент)
	ЗаполнитьГрафик("ЗаполнитьОсновнойДолг");
	ОбновитьЗаголовок(ЭтаФорма);	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияГрафикаПриИзменении(Элемент)
	ЗаполнитьГрафик("ЗаполнитьОсновнойДолг");
	ОбновитьЗаголовок(ЭтаФорма);	
КонецПроцедуры

&НаКлиенте
Процедура РСППриИзменении(Элемент)
	ЗаполнитьГрафик("ЗаполнитьОсновнойДолг");
	ОбновитьЗаголовок(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПризнатьНовыйФинансовыйИнструментМСФОПриИзменении(Элемент)
	ЗаполнитьГрафик("ЗаполнитьОсновнойДолг");
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	СтавкаНДС = Объект.СтавкаНДС;
	
	Для каждого ТекущаяСтрока Из Объект.ОсновнойДолг Цикл
		ТекущаяСтрока.НДС = ПолучитьНДС(ТекущаяСтрока.Получение, Истина, СтавкаНДС);
	КонецЦикла;
	
	Для каждого ТекущаяСтрока Из Объект.АвансовыеПлатежи Цикл
		ТекущаяСтрока.НДСВВалюте = ПолучитьНДС(ТекущаяСтрока.СуммаВВалюте, Истина, СтавкаНДС);
	КонецЦикла;
	
	ЗаполнитьГрафик("ЗаполнитьОсновнойДолг");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандЭлементовТабличнойЧасти_ОсновнойДолг

&НаКлиенте
Процедура ОсновнойДолгДатаПриИзменении(Элемент)
	ЗаполнитьГрафик("ЗаполнитьОсновнойДолг")
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойДолгПолучениеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОсновнойДолг.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущаяСтрока.НДС = ПолучитьНДС(ТекущаяСтрока.Получение, Истина, ОБъект.СтавкаНДС);
	КонецЕсли;
		
	ЗаполнитьГрафик("ЗаполнитьОсновнойДолг");
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойДолгВозвратПриИзменении(Элемент)
	ЗаполнитьГрафик("ЗаполнитьОсновнойДолг")
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойДолгПослеУдаления(Элемент)
	ЗаполнитьГрафик("ЗаполнитьОсновнойДолг")
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойДолгСчетПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ОсновнойДолг");
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойДолгПередНачаломИзменения(Элемент, Отказ)
	
	ТекущаяСтрока = Элементы.ОсновнойДолг.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИменаСубконто = Этаформа.КэшируемыеЗначения.ИменаСубконто.ОсновнойДолг;
	
	Для каждого СчетСубконто Из ИменаСубконто Цикл
		МСФОКлиентСерверУХ.ОбновитьСубконтоСчетаТЧ(Этаформа, ТекущаяСтрока, СчетСубконто.Ключ, "ОсновнойДолг", ИменаСубконто);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандЭлементовТабличнойЧасти_Проценты

&НаКлиенте
Процедура ПроцентыНачислениеПриИзменении(Элемент)
	ЗаполнитьГрафик("ЗаполнитьУплатуПроцентов")
КонецПроцедуры

&НаКлиенте
Процедура ПроцентыДатаПриИзменении(Элемент)
	ЗаполнитьГрафик("ЗаполнитьУплатуПроцентов")
КонецПроцедуры

&НаКлиенте
Процедура ПроцентыДенежныйПотокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Проценты.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.НДС = ПолучитьНДС(ТекущаяСтрока.Уплата, Истина, Объект.СтавкаНДС);
		
	ЗаполнитьГрафик("ЗаполнитьУплатуПроцентов");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентыНеарендныйПлатежПриИзменении(Элемент)
	ЗаполнитьГрафик("ЗаполнитьУплатуПроцентов");
КонецПроцедуры

&НаКлиенте
Процедура ПроцентыНДСПриИзменении(Элемент)
	ЗаполнитьГрафик("ЗаполнитьУплатуПроцентов")
КонецПроцедуры

&НаКлиенте
Процедура ПроцентыПослеУдаления(Элемент)
	ЗаполнитьГрафик("ЗаполнитьУплатуПроцентов")
КонецПроцедуры

&НаКлиенте
Процедура СчетСписанияНеарендногоПлатежаМСФОПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ОбновитьСубконтоСчета(ЭтаФорма, Элемент.Имя);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандЭлементовТабличнойЧасти_Расходы

&НаКлиенте
Процедура ДополнительныеРасходыПослеУдаления(Элемент)
	ЗаполнитьГрафик("ЗаполнитьДопРасходы");	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыДатаПриИзменении(Элемент)
	ЗаполнитьГрафик("ЗаполнитьДопРасходы");	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыСуммаВВалютеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДополнительныеРасходы.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ЗаполнитьГрафик("ЗаполнитьДопРасходы");
		
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыСуммаБезНДСВВалютеПриИзменении(Элемент)
		
	ТекущаяСтрока = Элементы.ДополнительныеРасходы.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//ТекущаяСтрока.НДСВВалюте = ПолучитьНДС(ТекущаяСтрока.СуммаБезНДСВВалюте, Ложь, Объект.СтавкаНДС);
	ТекущаяСтрока.СуммаВВалюте = ТекущаяСтрока.СуммаБезНДСВВалюте + ТекущаяСтрока.НДСВВалюте;
	
	ЗаполнитьГрафик("ЗаполнитьДопРасходы");

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыНДСВВалютеПриИзменении(Элемент)
		
	ТекущаяСтрока = Элементы.ДополнительныеРасходы.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьГрафик("ЗаполнитьДопРасходы");

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыТипПлатежаПриИзменении(Элемент)
		
	ТекущаяСтрока = Элементы.ДополнительныеРасходы.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьГрафик("ЗаполнитьДопРасходы");

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыСчетРасходаНСБУПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ДополнительныеРасходы");	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыСчетРасходаМСФОПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "ДополнительныеРасходы");	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущаяСтрока = Элементы.ДополнительныеРасходы.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИменаСубконто = Этаформа.КэшируемыеЗначения.ИменаСубконто.ДополнительныеРасходы;
	
	Для каждого СчетСубконто Из ИменаСубконто Цикл
		МСФОКлиентСерверУХ.ОбновитьСубконтоСчетаТЧ(Этаформа, ТекущаяСтрока, СчетСубконто.Ключ, "ДополнительныеРасходы", ИменаСубконто);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандЭлементовТабличнойЧасти_ВНА

&НаКлиенте
Процедура ВНАВНАПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.ВидОперации = ПредопределенноеЗначение("Справочник.ВидыОпераций.ВводВЭксплуатацию") Тогда
		
		ТекущаяСтрока.ПараметрыУчетаВНА = ПолучитьГруппуВНА(ТекущаяСтрока.ВНА);
 
	Иначе 
		
		ЗависимостиРеквизитов = Новый Структура("ПараметрыУчетаВНА", "ГруппаВНА");
		ПараметрыДействия = Новый Структура("КолонкаДата,ЗависимостиРеквизитов", "Дата", ЗависимостиРеквизитов);
		СтруктураДействий = Новый Структура("ЗаполнитьИсточникГруппаВНАНаДату", ПараметрыДействия);
		КэшируемыеЗначенияВНА = Новый Структура("ВидУчетаМСФО,Организация,Сценарий", ПредопределенноеЗначение("Перечисление.ВидыУчета.МСФО"));
		ЗаполнитьЗначенияСвойств(КэшируемыеЗначенияВНА, ЭтотОбъект.Документ);
		
		ОбработкаТабличныхЧастейКлиентСерверУХ.ОбработатьСтрокуТЧ_ВНА(ТекущаяСтрока, СтруктураДействий, КэшируемыеЗначенияВНА);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьГруппуВНА(ВНА)
	
	Возврат Справочники.ГруппыВНАМСФО.ПолучитьГруппуВНАпоУмолчанию(ВНА, ЭтотОбъект.Документ.Дата);

КонецФункции

&НаКлиенте
Процедура ВНАДатаВводаМСФОПриИзменении(Элемент)
	ЗаполнитьГрафик("ЗаполнитьОсновнойДолг");
КонецПроцедуры

&НаКлиенте
Процедура ВНАДатаВыбытияМСФОПриИзменении(Элемент)
	ЗаполнитьГрафик("ЗаполнитьОсновнойДолг");
КонецПроцедуры

&НаКлиенте
Процедура ВНАПервоначальнаяСтоимостьМСФОПриИзменении(Элемент)
	ЗаполнитьГрафик("ЗаполнитьОсновнойДолг");	
КонецПроцедуры

&НаКлиенте
Процедура ВНАПослеУдаления(Элемент)
	ЗаполнитьГрафик("ЗаполнитьОсновнойДолг");	
КонецПроцедуры

&НаКлиенте
Процедура ВНАПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.Дата = Объект.ДатаПризнания;
	ТекущаяСтрока.СуммаМСФО = Объект.СуммаОсновнойЗадолженностиНСБУ - Объект.ВНА.Итог("СуммаМСФО");
	Если ТекущаяСтрока.СуммаМСФО < 0 Тогда
		ТекущаяСтрока.СуммаМСФО = Объект.СуммаОсновнойЗадолженностиВсегоНСБУ;
	КонецЕсли;

	ЗаполнитьГрафик("ЗаполнитьОсновнойДолг");
		
КонецПроцедуры

&НаКлиенте
Процедура ВНАДатаВозвратаМСФОПриИзменении(Элемент)
	
	ЗаполнитьГрафик("ЗаполнитьОсновнойДолг");
		
КонецПроцедуры

&НаКлиенте
Процедура ВНАДатаПогашенияМСФОПриИзменении(Элемент)
	
	ЗаполнитьГрафик("ЗаполнитьОсновнойДолг");
		
КонецПроцедуры

&НаКлиенте
Процедура ВНАПередНачаломИзменения(Элемент, Отказ)
		
	ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИменаСубконто = Этаформа.КэшируемыеЗначения.ИменаСубконто.ВНА;
	
	Для каждого СчетСубконто Из ИменаСубконто Цикл
		МСФОКлиентСерверУХ.ОбновитьСубконтоСчетаТЧ(Этаформа, ТекущаяСтрока, СчетСубконто.Ключ, "ВНА", ИменаСубконто);
	КонецЦикла;

КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиКомандЭлементовТабличнойЧасти_Авансы

&НаКлиенте
Процедура АвансовыеПлатежиВключенВОсновнойДолгПриИзменении(Элемент)
	ЗаполнитьГрафик("ЗаполнитьОсновнойДолг");
КонецПроцедуры

&НаКлиенте
Процедура АвансовыеПлатежиДатаНачисленияПриИзменении(Элемент)
	ЗаполнитьГрафик("ЗаполнитьОсновнойДолг");
КонецПроцедуры

&НаКлиенте
Процедура АвансовыеПлатежиСуммаБезНДСВВалютеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.АвансовыеПлатежи.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.НДСВВалюте = ПолучитьНДС(ТекущаяСтрока.СуммаБезНДСВВалюте, Ложь, Объект.СтавкаНДС);
		
	ЗаполнитьГрафик("ЗаполнитьОсновнойДолг");
	
КонецПроцедуры

&НаКлиенте
Процедура АвансовыеПлатежиПослеУдаления(Элемент)
	ЗаполнитьГрафик("ЗаполнитьОсновнойДолг");
КонецПроцедуры

&НаКлиенте
Процедура АвансовыеПлатежиСчетВзаиморасчетовМСФОПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "АвансовыеПлатежи");
КонецПроцедуры

&НаКлиенте
Процедура АвансовыеПлатежиСчетВзаиморасчетовНСБУПриИзменении(Элемент)
	МСФОКлиентСерверУХ.ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, "АвансовыеПлатежи");
КонецПроцедуры

&НаКлиенте
Процедура АвансовыеПлатежиСуммаВВалютеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.АвансовыеПлатежи.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущаяСтрока.НДСВВалюте = ПолучитьНДС(ТекущаяСтрока.СуммаВВалюте, Истина, Объект.СтавкаНДС);
	КонецЕсли;
	
	ЗаполнитьГрафик("ЗаполнитьОсновнойДолг");
	
КонецПроцедуры

&НаКлиенте
Процедура АвансовыеПлатежиНеарендныйПлатежПриИзменении(Элемент)
	ЗаполнитьГрафик("ЗаполнитьОсновнойДолг");
КонецПроцедуры

&НаКлиенте
Процедура АвансовыеПлатежиПередНачаломИзменения(Элемент, Отказ)
			
	ТекущаяСтрока = Элементы.АвансовыеПлатежи.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИменаСубконто = Этаформа.КэшируемыеЗначения.ИменаСубконто.АвансовыеПлатежи;
	
	Для каждого СчетСубконто Из ИменаСубконто Цикл
		МСФОКлиентСерверУХ.ОбновитьСубконтоСчетаТЧ(Этаформа, ТекущаяСтрока, СчетСубконто.Ключ, "АвансовыеПлатежи", ИменаСубконто);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

&НаСервере
Процедура ЗаполнитьГрафик(Знач СтруктураДействий)

	Если ТипЗнч(СтруктураДействий) = Тип("Строка") Тогда
		СтруктураДействий = Новый Структура(СтруктураДействий);
	КонецЕсли;
	
	ИмяТаблицы = Неопределено;
	Если ТипЗнч(ЭтаФорма.ТекущийЭлемент) = Тип("ТаблицаФормы") Тогда
		ИмяТаблицы = ЭтаФорма.ТекущийЭлемент.Имя;
	ИначеЕсли ТипЗнч(ЭтаФорма.ТекущийЭлемент) = Тип("ПолеФормы") И ТипЗнч(ЭтаФорма.ТекущийЭлемент.Родитель) = Тип("ТаблицаФормы") Тогда	
		ИмяТаблицы = ЭтаФорма.ТекущийЭлемент.Родитель.Имя;
	КонецЕсли;
	
	Если ИмяТаблицы <> Неопределено Тогда
		
		ТекущаяСтрока = Элементы[ИмяТаблицы].ТекущаяСтрока;
		ЭтаФорма.Объект[ИмяТаблицы].Сортировать("Дата Возр");
		Элементы[ИмяТаблицы].ТекущаяСтрока = ТекущаяСтрока;
		
	КонецЕсли;
	
	ДанныеГрафика = Новый Структура;
	ДанныеГрафика.Вставить("ГрафикМСФО", 			Объект.ГрафикМСФО.Выгрузить());
	ДанныеГрафика.Вставить("ОсновнойДолг", 			Объект.ОсновнойДолг.Выгрузить());
	ДанныеГрафика.Вставить("ДополнительныеРасходы",	Объект.ДополнительныеРасходы.Выгрузить());
	ДанныеГрафика.Вставить("Проценты", 				Объект.Проценты.Выгрузить());
	ДанныеГрафика.Вставить("АвансовыеПлатежи", 		Объект.АвансовыеПлатежи.Выгрузить());
	ДанныеГрафика.Вставить("ВНА", 					Объект.ВНА.Выгрузить());
	ДанныеГрафика.Вставить("СтрокаФИ", 				Объект);
	ДанныеГрафика.Вставить("Документ", 				Документ);
		
	УчетФинансовыхИнструментовМСФОКлиентСерверУХ.ЗаполнитьГрафик(ДанныеГрафика, СтруктураДействий);
		
	Объект.ГрафикМСФО.Загрузить(ДанныеГрафика.ГрафикМСФО);
	Объект.ОсновнойДолг.Загрузить(ДанныеГрафика.ОсновнойДолг);
	Объект.ВНА.Загрузить(ДанныеГрафика.ВНА);
	
	АдресГрафикДо = Неопределено;
	
	ВерсияДоИзмененияГрафика = Неопределено;
	Если ДанныеГрафика.Свойство("КэшПредыдущегоГрафика") Тогда
		ДанныеГрафика.КэшПредыдущегоГрафика.Свойство("ВерсияГрафика", ВерсияДоИзмененияГрафика);
	КонецЕсли;
	
	Если Элементы.ФормаГрафикДоИзменения.Пометка Тогда
		ГрафикДоИзмененияСервер();	    	
	КонецЕсли;
	
	ОбновитьЗаголовок(ЭтаФорма);
	УчетФинансовыхИнструментовМСФОКлиентСерверУХ.УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗаголовок(Форма)
	
	Объект = Форма.Объект;
	
	Форма.Заголовок = СтрШаблон(
							НСтр("ru = '%1 (%2): ЧПС: %3. Ставка по договору: %4, ЭСП:%5, РСП:%6'"),
							Объект.ФИ,
							Объект.Контрагент,
							ФорматЧисла(Объект.ЧистаяПриведеннаяСтоимостьМСФО),
							ФорматЧисла(Объект.ПроцентнаяСтавкаПоДоговоруНСБУ) + " %",
							ФорматЧисла(Объект.ЭффективнаяПроцентнаяСтавкаМСФО) + " %",
							ФорматЧисла(Объект.РыночнаяПроцентнаяСтавкаМСФО) + " %"
						);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ФорматЧисла(ЗначениеЧисло)
	Возврат Формат(ЗначениеЧисло, "ЧДЦ=3; ЧН=0");
КонецФункции

&НаСервере
Функция ПолучитьАдресТаблицыГрафика(ИспользоватьОсновнойДолг = Истина, ИспользоватьПроценты = Истина)

	ВидФИ = Объект.ПараметрыУчетаФинансовогоИнструментаМСФО.ВидОбъектаФинансовогоХарактера;
	
	Если Не ИспользоватьПроценты Тогда//только основной долг
	    Возврат ПоместитьВоВременноеХранилище(Объект.ОсновнойДолг.Выгрузить(, "Дата,Получение,Возврат"), УникальныйИдентификатор);
	КонецЕсли;
	
	ЕстьНДС = (ВидФИ.Лизинг Или ВидФИ.Задолженность);
	ЕстьНеарендныйПлатеж = ВидФИ.Лизинг;

	КолонкиПроцентов = "Начисление, Уплата" + ?(ЕстьНДС, ", НДС", "") + ?(ЕстьНеарендныйПлатеж, ", НеарендныйПлатеж", "");
	ТабДляЗагрузки = Объект.Проценты.Выгрузить(, "Дата, " + КолонкиПроцентов);	
	Если ИспользоватьОсновнойДолг Тогда	
			
		ТабДляЗагрузки.Колонки.Начисление.Заголовок = НСтр("ru = 'Проценты - Начисление(справочно)'");
		ТабДляЗагрузки.Колонки.Уплата.Заголовок = НСтр("ru = 'Проценты - Уплата'");
		
		НоваяКолонка = ТабДляЗагрузки.Колонки.Вставить(1);
		НоваяКолонка.Имя = "ОсновнойДолг_Получение";
		НоваяКолонка.Заголовок = НСтр("ru = 'Основной долг - Получение'");
		НоваяКолонка = ТабДляЗагрузки.Колонки.Вставить(2);
		НоваяКолонка.Имя = "ОсновнойДолг_Возврат";
		НоваяКолонка.Заголовок = НСтр("ru = 'Основной долг - возврат'");
		
		ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(Объект.ОсновнойДолг.Выгрузить(), ТабДляЗагрузки);
		
		ТабДляЗагрузки.Свернуть("Дата", КолонкиПроцентов + ", ОсновнойДолг_Получение, ОсновнойДолг_Возврат");
		ТабДляЗагрузки.Сортировать("Дата Возр");
		
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ТабДляЗагрузки, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьГрафикНСБУСервер(ФИ = Неопределено, АдресГрафикНСБУ)

	ДанныеГрафика = ПолучитьИзВременногоХранилища(АдресГрафикНСБУ);
	
	Если ТипЗнч(ДанныеГрафика) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;	
	
	График = ДанныеГрафика.График;
	
	ЕстьОсновнойДолг = (График.Колонки.Найти("ОсновнойДолг_Получение") <> Неопределено) Или (График.Колонки.Найти("Получение") <> Неопределено);
	ЕстьПроценты = График.Колонки.Найти("Уплата") <> Неопределено;
	
	Если ЕстьОсновнойДолг Тогда
		
		Объект.ОсновнойДолг.Очистить();
		
		Если График.Колонки.Найти("ОсновнойДолг_Получение") <> Неопределено Тогда
			График.Колонки.ОсновнойДолг_Получение.Имя = "Получение";	
		КонецЕсли;
		
		Если График.Колонки.Найти("ОсновнойДолг_Возврат") <> Неопределено Тогда
			График.Колонки.ОсновнойДолг_Возврат.Имя = "Возврат";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьПроценты Тогда		
		Объект.Проценты.Очистить();				
	КонецЕсли;
	
	Для каждого Стр Из График Цикл
	
		Если ЕстьОсновнойДолг И (ЗначениеЗаполнено(стр.Получение) Или ЗначениеЗаполнено(стр.Возврат)) Тогда
			ЗаполнитьЗначенияСвойств(Объект.ОсновнойДолг.Добавить(), стр);
		КонецЕсли;
				
		Если ЕстьПроценты И (ЗначениеЗаполнено(стр.Уплата) Или (стр.Начисление)) Тогда
			ЗаполнитьЗначенияСвойств(Объект.Проценты.Добавить(), стр);
		КонецЕсли;

	КонецЦикла;
			
	ЗаполнитьГрафик(Новый Структура("ЗаполнитьОсновнойДолг"));
	
	Модифицированность = Истина;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьГрафикНаСервере()

	Результат = Новый Структура;	
	
	Результат.Вставить("ДополнительныеРасходы", Объект.ДополнительныеРасходы.Выгрузить());
	Результат.Вставить("ГрафикНСБУ", 			Объект.Проценты.Выгрузить());
	Результат.Вставить("ГрафикМСФО", 			Объект.ГрафикМСФО.Выгрузить());
	Результат.Вставить("АвансовыеПлатежи", 		Объект.АвансовыеПлатежи.Выгрузить());
	
	Если Объект.ПараметрыУчетаФинансовогоИнструментаМСФО.ВидОбъектаФинансовогоХарактера.Лизинг Тогда
		Результат.Вставить("ВНА", 			Объект.ВНА.Выгрузить());
		Результат.Вставить("ОсновнойДолг", 	Объект.ОсновнойДолг.Выгрузить().СкопироватьКолонки());
	Иначе 
		Результат.Вставить("ВНА", 			Объект.ВНА.Выгрузить().СкопироватьКолонки());
		Результат.Вставить("ОсновнойДолг", 	Объект.ОсновнойДолг.Выгрузить());	
	КонецЕсли;
			
	//для лизинга может отличаться на Авансы не вкл в стоимость// СтрокаФИ.СуммаОсновнойЗадолженностиНСБУ = Результат.ГрафикМСФО.Итог("ОсновнойДолг_Получение");
	
	СтрокаФИ = Новый Структура;
	Для каждого ТекущийРеквизит Из Метаданные.Обработки.ГрафикФИМСФО.Реквизиты Цикл	
		СтрокаФИ.Вставить(ТекущийРеквизит.Имя, Объект[ТекущийРеквизит.Имя]);
	КонецЦикла;
	
	Результат.Вставить("СтрокаФИ", СтрокаФИ);
	
	Возврат ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ГрафикДоИзмененияСервер()
	
	АдресГрафик = ПоместитьВоВременноеХранилище(Объект.ГрафикМСФО.Выгрузить(), УникальныйИдентификатор);
	
	Если ЭтоАдресВременногоХранилища(АдресГрафикДо) Тогда
		Объект.ГрафикМСФО.Загрузить(ПолучитьИзВременногоХранилища(АдресГрафикДо));
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВерсияДоИзмененияГрафика) Тогда
		Возврат;
	КонецЕсли;
		
	ГрафикМСФО = ВерсияДоИзмененияГрафика.ГрафикиМСФО.Выгрузить(Новый Структура("ФИ", Объект.ФИ));
	ГрафикМСФО.Сортировать("Дата Возр");
	КоличествоНачальное = ГрафикМСФО.Количество();
		
	Для ОбрИндекс = 1 По КоличествоНачальное Цикл
		
		СтрокаДляУдаления = ГрафикМСФО.Получить(КоличествоНачальное-ОбрИндекс);
		Если СтрокаДляУдаления.Дата > Объект.ДатаПризнания Тогда
			ГрафикМСФО.Удалить(СтрокаДляУдаления);
		Иначе 
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ПоследняяСтрока = ГрафикМСФО.Получить(ГрафикМСФО.Количество()-1);
	Если ПоследняяСтрока.Дата = Объект.ДатаПризнания Тогда
		СтрокаЗакрытия = ПоследняяСтрока;
	Иначе	
		
		СтрокаЗакрытия = ГрафикМСФО.Добавить();
		СтрокаЗакрытия.Дата = Объект.ДатаПризнания;
		
		ЗаполнитьЗначенияСвойств(СтрокаЗакрытия, ПоследняяСтрока, 
			"ОсновнойДолг_Задолженность,
			|Проценты_Задолженность,
			|Дисконт_Остаток,
			|ЭСП_ОсновнойДолг_Задолженность,
			|ЭСП_Проценты_Задолженность");
			
	КонецЕсли;
	
	СтрокаЗакрытия.ОсновнойДолг_Возврат = СтрокаЗакрытия.ОсновнойДолг_Возврат + СтрокаЗакрытия.ОсновнойДолг_Задолженность;
	СтрокаЗакрытия.ОсновнойДолг_Задолженность = 0;
	
	СтрокаЗакрытия.Проценты_Уплата = СтрокаЗакрытия.Проценты_Уплата + СтрокаЗакрытия.Проценты_Задолженность;
	СтрокаЗакрытия.Проценты_Задолженность = 0;
	
	СтрокаЗакрытия.ЭСП_Проценты_Уплата = СтрокаЗакрытия.ЭСП_Проценты_Уплата + СтрокаЗакрытия.ЭСП_Проценты_Задолженность;
	СтрокаЗакрытия.ЭСП_Проценты_Задолженность = 0;
	
	СтрокаЗакрытия.ЭСП_Проценты_Задолженность = 0;
	
	Объект.ГрафикМСФО.Загрузить(ГрафикМСФО);
	
	АдресГрафикДо = ПоместитьВоВременноеХранилище(ГрафикМСФО, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ГрафикПослеИзмененияСервер()
	
	Если ЗначениеЗаполнено(АдресГрафик) И ЭтоАдресВременногоХранилища(АдресГрафик) Тогда
		ГрафикИзАдреса = ПолучитьИзВременногоХранилища(АдресГрафик);
		Если ГрафикИзАдреса <> Неопределено Тогда
			Объект.ГрафикМСФО.Загрузить(ГрафикИзАдреса);		
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНДС(СуммаОД, СуммаВключаетНДС = Ложь, СтавкаНДС)
	СтавкаНДСчислом = УчетНДСПереопределяемый.ПолучитьСтавкуНДС(СтавкаНДС);
	Возврат УчетНДСКлиентСервер.РассчитатьСуммуНДС(СуммаОД, СуммаВключаетНДС, СтавкаНДСчислом);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаСубконто() Экспорт

	Результат = Новый Структура;
	
	//тч ФинансовыеИнструменты
	СубконтоФИ = Новый Структура;
	
	СубконтоФИ.Вставить("СчетЗадолженностиНСБУ", Новый Соответствие);
	СубконтоФИ.СчетЗадолженностиНСБУ.Вставить(1, "СчетЗадолженностиСубконто1НСБУ");
	СубконтоФИ.СчетЗадолженностиНСБУ.Вставить(2, "СчетЗадолженностиСубконто2НСБУ");
	СубконтоФИ.СчетЗадолженностиНСБУ.Вставить(3, "СчетЗадолженностиСубконто3НСБУ");
	
	СубконтоФИ.Вставить("СчетЗадолженностиМСФО", Новый Соответствие);
	СубконтоФИ.СчетЗадолженностиМСФО.Вставить(1, "СчетЗадолженностиСубконто1МСФО");
	СубконтоФИ.СчетЗадолженностиМСФО.Вставить(2, "СчетЗадолженностиСубконто2МСФО");
	СубконтоФИ.СчетЗадолженностиМСФО.Вставить(3, "СчетЗадолженностиСубконто3МСФО");
	
	СубконтоФИ.Вставить("СчетПроцентыНСБУ", Новый Соответствие);
	СубконтоФИ.СчетПроцентыНСБУ.Вставить(1, "СчетПроцентыСубконто1НСБУ");
	СубконтоФИ.СчетПроцентыНСБУ.Вставить(2, "СчетПроцентыСубконто2НСБУ");
	СубконтоФИ.СчетПроцентыНСБУ.Вставить(3, "СчетПроцентыСубконто3НСБУ");
	
	СубконтоФИ.Вставить("СчетПроцентыМСФО", Новый Соответствие);
	СубконтоФИ.СчетПроцентыМСФО.Вставить(1, "СчетПроцентыСубконто1МСФО");
	СубконтоФИ.СчетПроцентыМСФО.Вставить(2, "СчетПроцентыСубконто2МСФО");
	СубконтоФИ.СчетПроцентыМСФО.Вставить(3, "СчетПроцентыСубконто3МСФО");
	
	СубконтоФИ.Вставить("СчетИсточникМСФО", Новый Соответствие);
	СубконтоФИ.СчетИсточникМСФО.Вставить(1, "СчетИсточникСубконто1МСФО");
	СубконтоФИ.СчетИсточникМСФО.Вставить(2, "СчетИсточникСубконто2МСФО");
	СубконтоФИ.СчетИсточникМСФО.Вставить(3, "СчетИсточникСубконто3МСФО");
	
	СубконтоФИ.Вставить("СчетНДСНСБУ", Новый Соответствие);
	СубконтоФИ.СчетНДСНСБУ.Вставить(1, "СчетНДССубконто1НСБУ");
	СубконтоФИ.СчетНДСНСБУ.Вставить(2, "СчетНДССубконто2НСБУ");
	СубконтоФИ.СчетНДСНСБУ.Вставить(3, "СчетНДССубконто3НСБУ");
	
	СубконтоФИ.Вставить("СчетНДСМСФО", Новый Соответствие);
	СубконтоФИ.СчетНДСМСФО.Вставить(1, "СчетНДССубконто1МСФО");
	СубконтоФИ.СчетНДСМСФО.Вставить(2, "СчетНДССубконто2МСФО");
	СубконтоФИ.СчетНДСМСФО.Вставить(3, "СчетНДССубконто3МСФО");
	
	СубконтоФИ.Вставить("СчетЗадолженностиНСБУ", Новый Соответствие);
	СубконтоФИ.СчетЗадолженностиНСБУ.Вставить(1, "СчетЗадолженностиСубконто1НСБУ");
	СубконтоФИ.СчетЗадолженностиНСБУ.Вставить(2, "СчетЗадолженностиСубконто2НСБУ");
	СубконтоФИ.СчетЗадолженностиНСБУ.Вставить(3, "СчетЗадолженностиСубконто3НСБУ");
	
	СубконтоФИ.Вставить("СчетЗадолженностиМСФО", Новый Соответствие);
	СубконтоФИ.СчетЗадолженностиМСФО.Вставить(1, "СчетЗадолженностиСубконто1МСФО");
	СубконтоФИ.СчетЗадолженностиМСФО.Вставить(2, "СчетЗадолженностиСубконто2МСФО");
	СубконтоФИ.СчетЗадолженностиМСФО.Вставить(3, "СчетЗадолженностиСубконто3МСФО");
		
	Результат.Вставить("ФинансовыеИнструменты", СубконтоФИ);
	
	//тч АвансовыеПлатежи
	СубконтоАвансовыеПлатежи = Новый Структура;
	
	СубконтоАвансовыеПлатежи.Вставить("СчетВзаиморасчетовНСБУ", Новый Соответствие);
	СубконтоАвансовыеПлатежи.СчетВзаиморасчетовНСБУ.Вставить(1, "СчетВзаиморасчетовСубконто1НСБУ");
	СубконтоАвансовыеПлатежи.СчетВзаиморасчетовНСБУ.Вставить(2, "СчетВзаиморасчетовСубконто2НСБУ");
	СубконтоАвансовыеПлатежи.СчетВзаиморасчетовНСБУ.Вставить(3, "СчетВзаиморасчетовСубконто3НСБУ");
	
	СубконтоАвансовыеПлатежи.Вставить("СчетВзаиморасчетовМСФО", Новый Соответствие);
	СубконтоАвансовыеПлатежи.СчетВзаиморасчетовМСФО.Вставить(1, "СчетВзаиморасчетовСубконто1МСФО");
	СубконтоАвансовыеПлатежи.СчетВзаиморасчетовМСФО.Вставить(2, "СчетВзаиморасчетовСубконто2МСФО");
	СубконтоАвансовыеПлатежи.СчетВзаиморасчетовМСФО.Вставить(3, "СчетВзаиморасчетовСубконто3МСФО");
	
	Результат.Вставить("АвансовыеПлатежи", СубконтоАвансовыеПлатежи);
	
	// тч ДополнительныеРасходы
	СубконтоРасходы = Новый Структура;
	
	СубконтоРасходы.Вставить("СчетРасходаНСБУ", Новый Соответствие);
	СубконтоРасходы.СчетРасходаНСБУ.Вставить(1, "СчетРасходаСубконто1НСБУ");
	СубконтоРасходы.СчетРасходаНСБУ.Вставить(2, "СчетРасходаСубконто2НСБУ");
	СубконтоРасходы.СчетРасходаНСБУ.Вставить(3, "СчетРасходаСубконто3НСБУ");
	
	СубконтоРасходы.Вставить("СчетРасходаМСФО", Новый Соответствие);
	СубконтоРасходы.СчетРасходаМСФО.Вставить(1, "СчетРасходаСубконто1МСФО");
	СубконтоРасходы.СчетРасходаМСФО.Вставить(2, "СчетРасходаСубконто2МСФО");
	СубконтоРасходы.СчетРасходаМСФО.Вставить(3, "СчетРасходаСубконто3МСФО");
	
	Результат.Вставить("ДополнительныеРасходы", СубконтоРасходы);
	
	// тч ВНА
	СубконтоВНА = Новый Структура;
	
	СубконтоВНА.Вставить("СчетУчетаНСБУ", Новый Соответствие);
	СубконтоВНА.СчетУчетаНСБУ.Вставить(1, "СчетУчетаСубконто1НСБУ");
	СубконтоВНА.СчетУчетаНСБУ.Вставить(2, "СчетУчетаСубконто2НСБУ");
	СубконтоВНА.СчетУчетаНСБУ.Вставить(3, "СчетУчетаСубконто3НСБУ");
	
	СубконтоВНА.Вставить("СчетУчетаМСФО", Новый Соответствие);
	СубконтоВНА.СчетУчетаМСФО.Вставить(1, "СчетУчетаСубконто1МСФО");
	СубконтоВНА.СчетУчетаМСФО.Вставить(2, "СчетУчетаСубконто2МСФО");
	СубконтоВНА.СчетУчетаМСФО.Вставить(3, "СчетУчетаСубконто3МСФО");
		
	Результат.Вставить("ВНА", СубконтоВНА);
	
	// тч ПроцентыНСБУ
	СубконтоПроцентыНСБУ = Новый Структура;
	
	СубконтоПроцентыНСБУ.Вставить("СчетДоходаРасходаНСБУ", Новый Соответствие);
	СубконтоПроцентыНСБУ.СчетДоходаРасходаНСБУ.Вставить(1, "СчетДоходаРасходаСубконто1НСБУ");
	СубконтоПроцентыНСБУ.СчетДоходаРасходаНСБУ.Вставить(2, "СчетДоходаРасходаСубконто2НСБУ");
	СубконтоПроцентыНСБУ.СчетДоходаРасходаНСБУ.Вставить(3, "СчетДоходаРасходаСубконто3НСБУ");
	
	СубконтоПроцентыНСБУ.Вставить("СчетДоходаРасходаМСФО", Новый Соответствие);
	СубконтоПроцентыНСБУ.СчетДоходаРасходаМСФО.Вставить(1, "СчетДоходаРасходаСубконто1МСФО");
	СубконтоПроцентыНСБУ.СчетДоходаРасходаМСФО.Вставить(2, "СчетДоходаРасходаСубконто2МСФО");
	СубконтоПроцентыНСБУ.СчетДоходаРасходаМСФО.Вставить(3, "СчетДоходаРасходаСубконто3МСФО");
	
	Результат.Вставить("Проценты", СубконтоПроцентыНСБУ);

	// тч АмортизацияНСБУ
	СубконтоАмортизацияНСБУ = Новый Структура;
	
	СубконтоАмортизацияНСБУ.Вставить("СчетЗатратНСБУ", Новый Соответствие);
	СубконтоАмортизацияНСБУ.СчетЗатратНСБУ.Вставить(1, "СчетЗатратСубконто1НСБУ");
	СубконтоАмортизацияНСБУ.СчетЗатратНСБУ.Вставить(2, "СчетЗатратСубконто2НСБУ");
	СубконтоАмортизацияНСБУ.СчетЗатратНСБУ.Вставить(3, "СчетЗатратСубконто3НСБУ");
	
	СубконтоАмортизацияНСБУ.Вставить("СчетАмортизацииНСБУ", Новый Соответствие);
	СубконтоАмортизацияНСБУ.СчетАмортизацииНСБУ.Вставить(1, "СчетАмортизацииСубконто1НСБУ");
	СубконтоАмортизацияНСБУ.СчетАмортизацииНСБУ.Вставить(2, "СчетАмортизацииСубконто2НСБУ");
	СубконтоАмортизацияНСБУ.СчетАмортизацииНСБУ.Вставить(3, "СчетАмортизацииСубконто3НСБУ");
	
	Результат.Вставить("АмортизацияНСБУ", СубконтоАмортизацияНСБУ);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура НастроитьСчетаУчета()
	
	КэшируемыеЗначения = Новый Структура;
	
	КэшируемыеЗначения.Вставить("СчетаГруппыПодробно", 	Новый Структура);
	КэшируемыеЗначения.Вставить("КлючевыеСубконто", 	Новый Соответствие);// для счетов авансов, расходов не скрываем ключевые субконто
	
	МСФОУХ.ОбновитьКэшируемыеЗначенияОрганизации(ЭтаФорма, Документ.Организация);
	
	РазделыПланаСчетов = Новый Массив;
	РазделыПланаСчетов.Добавить(Справочники.РазделыПланаСчетов.Себестоимость);
	РазделыПланаСчетов.Добавить(Справочники.РазделыПланаСчетов.ОПУ);
	РазделыПланаСчетов.Добавить(Справочники.РазделыПланаСчетов.НезавершенныеОперации);
	РазделыПланаСчетов.Добавить(Справочники.РазделыПланаСчетов.НезавершенноеСтроительство);
	РазделыПланаСчетов.Добавить(Справочники.РазделыПланаСчетов.Запасы);
	РазделыПланаСчетов.Добавить(Справочники.РазделыПланаСчетов.КоммерческиеАдминистративныеРасходы);
	РазделыПланаСчетов.Добавить(Справочники.РазделыПланаСчетов.ВнереализационныеДоходыИРасходы);
	
	псМСФО = ЭтаФорма.КэшируемыеЗначения.ПланСчетовМСФО;	
	
	ПараметрыВыбораМСФО = МСФОКлиентСерверУХ.ПолучитьПараметрыВыбораДляСчетаБД(псМСФО);
	ПараметрыВыбораНСБУ = МСФОКлиентСерверУХ.ПолучитьПараметрыВыбораДляСчетаБД(КэшируемыеЗначения.ПланСчетовНСБУ);
	
	Элементы.ОсновнойДолгСчет.ПараметрыВыбора = ПараметрыВыбораМСФО;
	Элементы.АвансовыеПлатежиСчетВзаиморасчетовМСФО.ПараметрыВыбора = ПараметрыВыбораМСФО;
	Элементы.АвансовыеПлатежиСчетВзаиморасчетовНСБУ.ПараметрыВыбора = ПараметрыВыбораНСБУ;
	Элементы.ДополнительныеРасходыСчетРасходаМСФО.ПараметрыВыбора = ПараметрыВыбораМСФО;	
	Элементы.ДополнительныеРасходыСчетРасходаНСБУ.ПараметрыВыбора = ПараметрыВыбораНСБУ;
		
	КэшируемыеЗначения.Вставить("ИменаСубконто", Обработки.ГрафикФИМСФО.ПолучитьИменаСубконто());
	
	МСФОУХ.ЗаполнитьДоступностьСубконто(ЭтаФорма, ЭтаФорма.КэшируемыеЗначения.ИменаСубконто.АвансовыеПлатежи, "АвансовыеПлатежи");
	МСФОУХ.ДобавитьОформлениеДоступностиСубконто(ЭтаФорма, ЭтаФорма.КэшируемыеЗначения.ИменаСубконто.АвансовыеПлатежи, "АвансовыеПлатежи");
	
	МСФОУХ.ЗаполнитьДоступностьСубконто(ЭтаФорма, ЭтаФорма.КэшируемыеЗначения.ИменаСубконто.ДополнительныеРасходы, "ДополнительныеРасходы");	
	МСФОУХ.ДобавитьОформлениеДоступностиСубконто(ЭтаФорма, ЭтаФорма.КэшируемыеЗначения.ИменаСубконто.ДополнительныеРасходы, "ДополнительныеРасходы");
	
	МСФОУХ.ЗаполнитьДоступностьСубконто(ЭтаФорма, ЭтаФорма.КэшируемыеЗначения.ИменаСубконто.ОсновнойДолг, "ОсновнойДолг");	
	МСФОУХ.ДобавитьОформлениеДоступностиСубконто(ЭтаФорма, ЭтаФорма.КэшируемыеЗначения.ИменаСубконто.ОсновнойДолг, "ОсновнойДолг");
		
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	ИменаТЧ = СтрРазделить("ОсновнойДолг,ДополнительныеРасходы,Проценты,АвансовыеПлатежи,ГрафикМСФО,ВНА", ",");
	
	ОформлениеНедоступно = Новый Структура("ЦветФона,ТолькоПросмотр", WebЦвета.СеребристоСерый, Истина);
	ОформлениеОшибка = Новый Структура("ЦветФона", WebЦвета.Красный);
	ОформлениеБудущиеОперации = Новый Структура("ЦветФона", WebЦвета.Голубой);
	
	Для каждого ИмяТЧ Из ИменаТЧ Цикл		
		
		ИмяПоля = СтрШаблон("Объект.%1.Дата", ИмяТЧ);
		ИмяПоляОформления = ?(ИмяТЧ = "ГрафикМСФО", "ГрафикМСФОДата", ИмяТЧ);
		ПолеОформления = Новый Структура("Поле,Использование", Новый ПолеКомпоновкиДанных(ИмяПоляОформления), Истина);
		
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();		
		УстановитьОформление(ЭлементОформления.Оформление, ОформлениеОшибка);
		ЗаполнитьЗначенияСвойств(ЭлементОформления.Поля.Элементы.Добавить(), ПолеОформления);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор, ИмяПоля, ВидСравненияКомпоновкиДанных.Меньше, Новый ПолеКомпоновкиДанных("Объект.ДатаПризнания"));
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор, ИмяПоля, ВидСравненияКомпоновкиДанных.Заполнено);		
		ЭлементОформления.Использование = Истина;
		
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();		
		УстановитьОформление(ЭлементОформления.Оформление, ОформлениеНедоступно);
		ЗаполнитьЗначенияСвойств(ЭлементОформления.Поля.Элементы.Добавить(), ПолеОформления);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор, ИмяПоля, ВидСравненияКомпоновкиДанных.Меньше, Новый ПолеКомпоновкиДанных("ДатаНачалаПериодаОтчета"));
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор, ИмяПоля, ВидСравненияКомпоновкиДанных.Заполнено);
		ЭлементОформления.Использование = Истина;
		
		//ЭлементОформления = УсловноеОформление.Элементы.Добавить();		
		//УстановитьОформление(ЭлементОформления.Оформление, ОформлениеБудущиеОперации);
		//ЗаполнитьЗначенияСвойств(ЭлементОформления.Поля.Элементы.Добавить(), ПолеОформления);
		//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор, ИмяПоля, ВидСравненияКомпоновкиДанных.Больше, Новый ПолеКомпоновкиДанных("ДатаОкончанияПериодаОтчета"));
		//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор, ИмяПоля, ВидСравненияКомпоновкиДанных.Заполнено);
		//ЭлементОформления.Использование = Истина;
		
	КонецЦикла;	

	УсловноеОформление_ВНА();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформление(Оформление, СтруктураЭлементовОформлений)

	Для каждого ЭлементОформления Из СтруктураЭлементовОформлений Цикл
		Оформление.УстановитьЗначениеПараметра(ЭлементОформления.Ключ, ЭлементОформления.Значение);	
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьПоля(ЭлементОформления, Поля)

	Для каждого ИмяПоля Из СтрРазделить(Поля, ",") Цикл
		ПолеОформления = Новый Структура("Поле,Использование", Новый ПолеКомпоновкиДанных(ИмяПоля), Истина);
		ЗаполнитьЗначенияСвойств(ЭлементОформления.Поля.Элементы.Добавить(), ПолеОформления);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УсловноеОформление_ВНА()

	ОформлениеСкрыть = Новый Структура("Видимость", Ложь);
	
	ИмяПоляОформления = "ВНАПараметрыУчетаВНА,ВНАСпособНачисленияАмортизацииМСФО,ВНАСпособОтраженияРасходовПоАмортизацииМСФО,ВНАСрокПолезногоИспользованияМСФО";// Ввод ВНА в эксплуатацию
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();		
	УстановитьОформление(ЭлементОформления.Оформление, ОформлениеСкрыть);
	ДобавитьПоля(ЭлементОформления, ИмяПоляОформления);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор, "Объект.ВНА.ВидОперации", ВидСравненияКомпоновкиДанных.НеРавно, Справочники.ВидыОпераций.ВводВЭксплуатацию);
	ЭлементОформления.Использование = Истина;
	
	ИмяПоляОформления = "ВНАСписатьНаВНА,ВНАСуммаСписанияВНА";// Выбытие ВНА(частичное выбытие ВНА) 
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	УстановитьОформление(ЭлементОформления.Оформление, ОформлениеСкрыть);
	ДобавитьПоля(ЭлементОформления, ИмяПоляОформления);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор, "Объект.ВНА.ВидОперации", ВидСравненияКомпоновкиДанных.НеРавно, Справочники.ВидыОпераций.УменьшениеЛизинга);
	ЭлементОформления.Использование = Истина;
	
	ИмяПоляОформления = "ВНАОтступ";// другие операции 
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	УстановитьОформление(ЭлементОформления.Оформление, ОформлениеСкрыть);
	ДобавитьПоля(ЭлементОформления, ИмяПоляОформления);
	Операции = Новый СписокЗначений;
	Операции.Добавить(Справочники.ВидыОпераций.ВводВЭксплуатацию);
	Операции.Добавить(Справочники.ВидыОпераций.УменьшениеЛизинга);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор, "Объект.ВНА.ВидОперации", ВидСравненияКомпоновкиДанных.ВСписке, Операции);
	ЭлементОформления.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОписаниеПараметрыУчетаФИ()
	ЗначенияРеквизитов = Справочники.ВидыОбъектовФинансовогоХарактера.ПолучитьЗначенияРеквизитов(Объект.ПараметрыУчетаФинансовогоИнструментаМСФО.ВидОбъектаФинансовогоХарактера);
	Элементы.ДекорацияПараметрыУчетаФИ.Заголовок = ЗначенияРеквизитов.ОписаниеВидаФИ;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекущимиДаннымиСервер(ЗаполнитьРеквизиты = Ложь, ЗаполнитьНСБУ = Ложь, ЗаполнитьМСФО = Ложь, СтрокаВНА = Ложь) 
	
	Если НЕ СтрокаВНА Тогда		
		СтрокиДляЗаполнения = Объект.ВНА;
	Иначе
		СтрокиДляЗаполнения = Новый Массив;
		СтрокиДляЗаполнения.Добавить(Объект.ВНА.НайтиПоИдентификатору(Элементы.ВНА.ТекущаяСтрока));	
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура("ЗаполнитьРеквизиты,ЗаполнитьНСБУ,ЗаполнитьМСФО", ЗаполнитьРеквизиты, ЗаполнитьНСБУ, ЗаполнитьМСФО);
	Документы.ВыбытиеВНАМСФО.ЗаполнитьСтроки(СтрокиДляЗаполнения, ЭтаФорма, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение)
	
	ТекущийВидОперации = ПредопределенноеЗначение("Справочник.ВидыОпераций.ВводВЭксплуатацию");
	ГруппыВНА = Справочники.ГруппыВНАМСФО.ПолучитьТаблицуГруппВНАпоУмолчанию(ВыбранноеЗначение, ДатаНачалаПериодаОтчета);
	ГруппыВНА.Индексы.Добавить("ВНА");
	
	Для каждого ТекВНА Из ВыбранноеЗначение Цикл
		
		Если Объект.ВНА.НайтиСтроки(Новый Структура("ВНА", ТекВНА)).Количество() Тогда
			Продолжить;//ВНА уже добавлен
		КонецЕсли;
		
		СтрокаВНА 				= Объект.ВНА.Добавить();
		
		СтрокаВНА.ВНА 			= ТекВНА;
		СтрокаВНА.Дата 			= Объект.ДатаПризнания;
		СтрокаВНА.ВидОперации 	= ТекущийВидОперации;
		
		СтрокаГруппаВНА = ГруппыВНА.Найти(ТекВНА, "ВНА");
		Если СтрокаГруппаВНА <> Неопределено Тогда
			СтрокаВНА.ПараметрыУчетаВНА = СтрокаГруппаВНА.ПараметрыУчетаВНА;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыФормы(ДокументСсылка)

	Отчет = Отчеты.ДвиженияВНА.Создать();	
	ПользовательскиеНастройки = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	Результат = Новый Структура;
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	ЭтоДокумент = ОбщегоНазначения.ЭтоДокумент(Метаданные.НайтиПоТипу(ТипДокумента));
	
	Если ЭтоДокумент Тогда
		
		Результат.Вставить("Организация",	ДокументСсылка.Организация);
		Результат.Вставить("Сценарий", 		ДокументСсылка.Сценарий);
	
	Иначе 
		
		Результат.Вставить("ВНА", ДокументСсылка);
	
	КонецЕсли;
	
	Результат.Вставить("Период", новый СтандартныйПериод(Дата(1,1,1), КонецГода(ТекущаяДата())));
		
	Если ТипДокумента = Тип("ДокументСсылка.НачислениеАмортизацииВНАМСФО") Тогда
		
		//Результат.Вставить("ВНА", Неопределено);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВосстановлениеВНАИзРасходов") Тогда
	 
		Результат.Вставить("ВНА", ДокументСсылка.ПартииВНА.ВыгрузитьКолонку("ВНА"));
		
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипДокумента) Тогда
	
		Результат.Вставить("ВНА", ДокументСсылка);
		
	Иначе 
		
		ОбъектыВНА = ДокументСсылка.ВНА.ВыгрузитьКолонку("ВНА");		
		Результат.Вставить("ВНА", ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбъектыВНА));
		
	КонецЕсли;
	
	Для каждого ТекущаяНастройка Из ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(ТекущаяНастройка) <> Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			КлючПараметра = Строка(ТекущаяНастройка.Параметр);		
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если Не Результат.Свойство(КлючПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Результат[КлючПараметра]) = Тип("Массив") Тогда
			ТекущаяНастройка.Значение.ЗагрузитьЗначения(Результат[КлючПараметра]);
		Иначе 
			ТекущаяНастройка.Значение = Результат[КлючПараметра];
		КонецЕсли;
		
		ТекущаяНастройка.Использование = Истина;
		
		Результат.Удалить(КлючПараметра);
			
	КонецЦикла;
	
	Возврат Новый Структура("Отбор,СформироватьПриОткрытии,КлючВарианта,ПользовательскиеНастройки", 
								Результат, Истина, "Основной", ПользовательскиеНастройки);
	
КонецФункции
							
#КонецОбласти
