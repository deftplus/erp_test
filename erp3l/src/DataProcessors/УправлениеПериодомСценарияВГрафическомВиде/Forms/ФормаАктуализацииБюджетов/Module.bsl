
&НаКлиенте
Процедура ВыполнитьАктуализацию(Команда)
	
	Если Не ЗначениеЗаполнено(СценарийФактическихДанных) Тогда	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбран сценарий с данными для актуализации'"),,,"СценарийФактическихДанных");		
		Возврат;	
	КонецЕсли;

	ВыполнитьАктуализациюСервер();
	
	Элементы.ДекорацияПроцессИдет.Видимость = Истина;
	Элементы.СтатусПроцесса.Заголовок = НСтр("ru = 'Выполняется копирование фактических данных...'");
	Элементы.СтатусПроцесса.ЦветТекста = Новый Цвет(0,0,0);
	
	Элементы.ВыполнитьАктуализацию.Доступность 		= Ложь;
	Элементы.СценарийФактическихДанных.Доступность 	= Ложь;
	Элементы.ПериодФактическихДанных.Доступность 	= Ложь;

	
	ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
	ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьАктуализацию",ИнтервалОжидания,Истина);

	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьАктуализацию() Экспорт
			
	ДанныеОВыполнении 		= ПолучитьИзВременногоХранилища(АдресХранилищаСтатусаОбработки); 
	СтатусВыполнения 		= ДанныеОВыполнении.СтатусВыполнения;
	ТекстСтатусаВыполнения  = ДанныеОВыполнении.ТекстСтатусаВыполнения;
	
	Элементы.СтатусПроцесса.Заголовок = ТекстСтатусаВыполнения;
	
	Если СтатусВыполнения = "Прогресс" Тогда 
		Элементы.СтатусПроцесса.ЦветТекста = Новый Цвет(0,0,0);
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьАктуализацию",ИнтервалОжидания,Истина);	
	КонецЕсли; 
	
	Если  СтатусВыполнения = "Ошибка" Тогда		
		Элементы.ВыполнитьАктуализацию.Доступность 		= Истина;
		Элементы.СценарийФактическихДанных.Доступность 	= Истина;
		Элементы.ПериодФактическихДанных.Доступность 	= Истина;
		Элементы.ДекорацияПроцессИдет.Видимость = Ложь;
		Элементы.СтатусПроцесса.ЦветТекста = Новый Цвет(255,0,0);
		Элементы.ГруппаПроцессИдет.Видимость = Ложь;
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ДанныеОВыполнении.ИнформацияОбОшибке, , , СтатусСообщения.Важное);
		ОтключитьОбработчикОжидания("Подключаемый_ВыполнитьКопирование");			
	ИначеЕсли СтатусВыполнения = "Успех" Тогда 	
		Элементы.ВыполнитьАктуализацию.Доступность 		= Истина;
		Элементы.СценарийФактическихДанных.Доступность 	= Истина;
		Элементы.ПериодФактическихДанных.Доступность 	= Истина;
		Элементы.СтатусПроцесса.ЦветТекста = Новый Цвет(0,255,0);
		Элементы.ДекорацияПроцессИдет.Видимость = Ложь;
		УстановитьНовуюГраницуЗагрузкиФакта();
		Оповестить("ОбновитьПанельПериодов");
		ОтключитьОбработчикОжидания("Подключаемый_ВыполнитьКопирование");				
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Сценарий 							= Параметры.Сценарий;
	ПериодАктуализацииДанныхТекущий 	= Параметры.ГраницаАктуализации;
	ТекущийДокументУправленияПериодом   = Параметры.ТекущийДокументУправленияПериодом;
	
	Элементы.ЭтапПроцессаДляПересчета.Видимость = ТекущийДокументУправленияПериодом.РасширеннаяНастройка;
			
	Если ЗначениеЗаполнено(Параметры.ОрганизацииДляАктуализацииАдрес) Тогда
		тзОрганизацииДляАктуализации = ПолучитьИзВременногоХранилища(Параметры.ОрганизацииДляАктуализацииАдрес);	
		Для Каждого мЭлемент Из тзОрганизацииДляАктуализации Цикл	
			нСтр = ОрганизацииДляАктуализации.Добавить();
			ЗаполнитьЗначенияСвойств(нСтр,мЭлемент);	
		КонецЦикла;	
			
	КонецЕсли;	
			
	СценарийФактическихДанных =  Сценарий.СценарийДляАктуализации;
	
	ДоступныеПериоды =  Параметры.ДоступныеПериоды.ВыгрузитьЗначения();
	УстановитьПараметрыВыбораПериодов(ДоступныеПериоды);
	
	ПериодАктуализацииДанныхНовыйС 	= Параметры.ВыбранныеПериоды[0];
	ПериодАктуализацииДанныхНовыйПО = Параметры.ВыбранныеПериоды[Параметры.ВыбранныеПериоды.Количество()-1];
	
	Если ЗначениеЗаполнено(Параметры.ПериодАктуализацииДанныхНовыйПо) Тогда
		
		ПериодАктуализацииДанныхНовыйПО = Параметры.ПериодАктуализацииДанныхНовыйПо;
		
	КонецЕсли;	
	
	Если ТекущийДокументУправленияПериодом.РасширеннаяНастройка Тогда
		УстановитьПараметрыРасширеннойНастройки();				
	Иначе	
		Элементы.ГруппаЭтапыДляПересчета.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАктуализациюСервер()
		   
	//Определим периоды для загрузки факта	
	МассивФактическихПериодов = ПериодыУХ.ПолучитьПодчиненныеПериоды(ПериодАктуализацииДанныхНовыйС,ПериодАктуализацииДанныхНовыйПо);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МассивФактическихПериодов",МассивФактическихПериодов);
	СтруктураПараметров.Вставить("ОрганизацииДляАктуализации",РеквизитФормыВЗначение("ОрганизацииДляАктуализации"));
    СтруктураПараметров.Вставить("ТекущийДокументУправленияПериодом",ТекущийДокументУправленияПериодом);
    СтруктураПараметров.Вставить("ЭтапПроцессаДляПересчета",ЭтапПроцессаДляПересчета);
    СтруктураПараметров.Вставить("Сценарий",Сценарий);
	СтруктураПараметров.Вставить("СценарийФактическихДанных",СценарийФактическихДанных);
	СтруктураПараметров.Вставить("мПоследователиСтрок",мПоследователиСтрок);
	СтруктураПараметров.Вставить("мПредшественникиСтрок",мПредшественникиСтрок);
	
	СтруктураВыполнения = Новый Структура("СтатусВыполнения, ИнформацияОбОшибке, ТекстСтатусаВыполнения", "Прогресс", Нстр("ru = 'Выполняется копирование фактических данных...'"));
	АдресХранилищаСтатусаОбработки = ПоместитьВоВременноеХранилище(СтруктураВыполнения,Новый УникальныйИдентификатор);
	МассивПараметров = Новый Массив; 
	МассивПараметров.Добавить(АдресХранилищаСтатусаОбработки); 
	МассивПараметров.Добавить(СтруктураПараметров);
	
	ФЗ_Актуализация = ФоновыеЗадания.Выполнить("УправлениеРабочимиПроцессамиУХ.ВыполнитьАктуализациюУОПВФоне",МассивПараметров); 
			
КонецПроцедуры	
	
&НаСервере
Процедура СформироватьПробнуюОтчетность_Сервер(ЭтапПроцесса, Организация = Неопределено)

	СтруктураПараметров = УправлениеПроцессамиСогласованияУХ.СформироватьСтруктуруПараметровПроцессаПодготовки();
	СтруктураПараметров.Вставить("ВерсияРегламента", ТекущийДокументУправленияПериодом.ВерсияОрганизационнойСтруктуры);
	СтруктураПараметров.Вставить("ПериодОтчета", ТекущийДокументУправленияПериодом.ПериодСценария);
	СтруктураПараметров.Вставить("Сценарий", ТекущийДокументУправленияПериодом.Сценарий);
	СтруктураПараметров.Вставить("ЭкземплярПроцесса", Документы.ЭкземплярПроцесса.ПустаяСсылка());
	УправлениеПроцессамиСогласованияУХ.СформироватьПробнуюОтчетностьДоЭтапа(ЭтапПроцесса, Объект.СостоянияВыполненияПроцесса, мПоследователиСтрок, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ПериодАктуализацииДанныхНовыйПоПриИзменении(Элемент)
	
	Для Каждого стрОрганизация Из ОрганизацииДляАктуализации Цикл	
		стрОрганизация.ПериодФакт = ПериодАктуализацииДанныхНовыйПо;					
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПериодАктуализацииДанныхНовыйПоПриИзменении(Неопределено);
КонецПроцедуры
	
&НаСервере
Процедура УстановитьПараметрыВыбораПериодов(ДоступныеПериоды)
		   	
	МассивЗнченийПараметров  = Новый ФиксированныйМассив(ДоступныеПериоды);
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", МассивЗнченийПараметров);	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ПериодАктуализацииДанныхНовыйС.ПараметрыВыбора 	= НовыеПараметры;
	Элементы.ПериодАктуализацииДанныхНовыйПО.ПараметрыВыбора 	= НовыеПараметры;
		
КонецПроцедуры	

&НаСервере
Процедура УстановитьПараметрыРасширеннойНастройки()
	
	//определим по регламенту шаблон процесса
	РасширениеБизнесЛогикиУХ.УправлениеПериодом_ОпределитьСвязанныйШаблон(ТекущийДокументУправленияПериодом.ВерсияОрганизационнойСтруктуры, СвязанныйШаблонПроцесса);
	
	ДоступныеЭтапы = Новый Массив;
	ДоступныеЭтапыВыборка = Справочники.ЭтапыУниверсальныхПроцессов.Выбрать(,СвязанныйШаблонПроцесса);
	Пока ДоступныеЭтапыВыборка.Следующий() Цикл
		ДоступныеЭтапы.Добавить(ДоступныеЭтапыВыборка.Ссылка);
	КонецЦикла;	
	
	//ограничим выбор этапов текущим шаблоном
	МассивЗнченийПараметров  = Новый ФиксированныйМассив(ДоступныеЭтапы);
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", МассивЗнченийПараметров);	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ЭтапПроцессаДляПересчета.ПараметрыВыбора = НовыеПараметры;
	
	//если процесс запущен, определим последний этап, до которого пересчитываем по умолчанию
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	ТекущийМаршрутПроцесса.ЭтапИсточник КАК ЭтапИсточник,
	 |	ТекущийМаршрутПроцесса.ЭтапПриемник КАК ЭтапПриемник
	 |ИЗ
	 |	РегистрСведений.ТекущийМаршрутПроцесса КАК ТекущийМаршрутПроцесса
	 |ГДЕ
	 |	ТекущийМаршрутПроцесса.ДокументПроцесса.ШаблонПроцесса = &ШаблонПроцесса
	 |	И ТекущийМаршрутПроцесса.ДокументПроцесса.СостояниеВыполнения <>  &СостояниеВыполнения";
	 
	 Запрос.УстановитьПараметр("ШаблонПроцесса",СвязанныйШаблонПроцесса);
	 Запрос.УстановитьПараметр("СостояниеВыполнения",Перечисления.СостоянияПроцесса.Остановлен);

	 
	 Результат = Запрос.Выполнить().Выгрузить();
	 
	 		 
	 Элементы.ЭтапПроцессаДляПересчета.Видимость = Результат.Количество()>0;
	 Элементы.ДекорацияПроцессНеЗапущен.Видимость = Результат.Количество()=0;
	 
	 Для Каждого СтрЭтап Из Результат Цикл
		 
		 Если Результат.Найти(СтрЭтап.ЭтапПриемник,"ЭтапИсточник") = Неопределено Тогда
			 ЭтапПроцессаДляПересчета = СтрЭтап.ЭтапПриемник;
			 Прервать;
		 КонецЕсли;	 
		 
	 КонецЦикла;	 
	 
		 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНовуюГраницуЗагрузкиФакта();

	тУопОбъект = ТекущийДокументУправленияПериодом.ПолучитьОбъект();
	тУопОбъект.ГраницаАктуализации = ПериодАктуализацииДанныхНовыйПо;
	тУопОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ПериодАктуализацииДанныхТекущий  = тУопОбъект.ГраницаАктуализации;
	
КонецПроцедуры	

&НаКлиенте
Процедура СброситьГраницуАктуализации(Команда)
	СброситьГраницуЗагрузкиФакта();
	Оповестить("ОбновитьПанельПериодов");
КонецПроцедуры

&НаСервере
Процедура СброситьГраницуЗагрузкиФакта();

	тУопОбъект = ТекущийДокументУправленияПериодом.ПолучитьОбъект();
	тУопОбъект.ГраницаАктуализации = Справочники.Периоды.ПустаяСсылка();
	тУопОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ПериодАктуализацииДанныхТекущий  = тУопОбъект.ГраницаАктуализации;
	
КонецПроцедуры