#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Режим = Параметры.Режим;
	
	Если ЗначениеЗаполнено(Параметры.ДокументУправленияПериодомСценария) Тогда
		
		Объект.Регламент = Параметры.ДокументУправленияПериодомСценария.ВерсияОрганизационнойСтруктуры;		
		Объект.Сценарий = Параметры.ДокументУправленияПериодомСценария.Сценарий;	
		ЗаполнитьСписокПериодов();	
		СписокДоступныхПериодов = Параметры.ДокументУправленияПериодомСценария;
		ПолучитьДокументУправленияПериодомСценария();
		
		Элементы.Регламент.ТолькоПросмотр = Истина;
		Элементы.Регламент.КнопкаВыпадающегоСписка = Ложь;
		Элементы.Сценарий.ТолькоПросмотр = Истина;
		Элементы.Сценарий.КнопкаВыпадающегоСписка = Ложь;
		Элементы.ПериодНазад.Видимость = Ложь;
		Элементы.СписокДоступныхПериодов.ТолькоПросмотр = Истина;
		Элементы.СписокДоступныхПериодов.КнопкаВыпадающегоСписка = Ложь;
		Элементы.ПериодВперед.Видимость = Ложь;
				
	КонецЕсли;	
	
	Если Объект.Режим  = "ПоВидамОтчетов" Тогда
		
		Элементы.ГруппаДеревоРакурсов.Видимость = Истина;		
		Элементы.ГруппаСтатистика.Видимость = Истина;		
		Элементы.ГруппаУправлениеДанными.Видимость = Истина;		
		ЭтаФорма.Заголовок = Нстр("ru = 'Управление ракурсами отчетного периода'");
		
	ИначеЕсли Объект.Режим = "Периоды" Тогда	
		
		Элементы.ГруппаДеревоРакурсов.Видимость = Ложь;		
		Элементы.ФормаПоказатьСтатистику.Видимость = Ложь;		
		Элементы.ПоказатьМаршрутСогласования.Видимость = Ложь;		
		Элементы.ГруппаУправлениеПериодами.Видимость = Истина;
		Элементы.ГруппаСтатистика.Видимость = Ложь;		
		Элементы.ГруппаУправлениеДанными.Видимость = Ложь;		
		ЭтаФорма.Заголовок = Нстр("ru = 'Управление границей блокировки периодов и актуализацией показателей'");
		
	КонецЕсли;
	
	ОбновитьПанель();	
	
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьПанель();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьДоступностьРеквизитов();
		
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиОповещенийФормы

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	ОбновитьСтатистику();

	Если ТипЗнч(ПолеТабличногоДокумента.ТекущаяОбласть.Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
	
	ОбновитьХодПроцессаСогласования(ПолеТабличногоДокумента.ТекущаяОбласть.Расшифровка);
	
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура ОжиданиеОбновленияДанных()
		
	Элементы.Группа8.Видимость = Ложь;
	Элементы.ПолеТабличногоДокумента.Доступность =Истина;
	ОтключитьОбработчикОжидания("ОжиданиеОбновленияДанных");
		
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПоказатьСтатистику(Команда)
	
	Элементы.ФормаПоказатьСтатистику.Пометка = НЕ Элементы.ФормаПоказатьСтатистику.Пометка;
	Элементы.ГруппаСтатистика.Видимость = Элементы.ФормаПоказатьСтатистику.Пометка;
		
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьМаршрутСогласования(Команда)
	
	Элементы.ПоказатьМаршрутСогласования.Пометка = НЕ Элементы.ПоказатьМаршрутСогласования.Пометка;
    Элементы.Группа5.Видимость = Элементы.ПоказатьМаршрутСогласования.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	ЗаполнитьСписокПериодов();
		
	ОбновитьДоступностьРеквизитов();
	
	ОбновитьПанель();
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентПриИзменении(Элемент)
	
	ЗаполнитьСписокПериодов();

	ОбновитьПанель();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДоступныхПериодовПриИзменении(Элемент)
	
	ОбновитьПанель();
			
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Область.Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		ТекущаяРасшифровка = ПолучитьРасшифровкуОбласти(Область.Расшифровка);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ТекущаяРасшифровка.БланкДляОтображения) Тогда
		
		ПараметрыФормы = Новый Структура("Бланк",ТекущаяРасшифровка.БланкДляОтображения);
		ПараметрыФормы.Вставить("ПериодПланированияОтборНачало",Объект.ДатаНачала);
		ПараметрыФормы.Вставить("ПериодПланированияОтборОкончание",Объект.ДатаОкончания);
		ПараметрыФормы.Вставить("АналитикиОтбораИсточник",ТекущаяРасшифровка.АналитикиОтбораИсточник);
		
		ОткрытьФорму("Обработка.СводнаяТаблица.Форма",ПараметрыФормы);
				
	КонецЕсли;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаПриАктивизацииОбласти(Элемент)
		
	Если НЕ ТипЗнч(ПолетабличногоДокумента.ТекущаяОбласть.Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗАполнено(АдресРасшифровкиМакета) Тогда
		ОбновитьХодПроцессаСогласования(ПолетабличногоДокумента.ТекущаяОбласть.Расшифровка);
	КонецЕсли;

КонецПроцедуры

#Область КомандыУправленияСогласованием

&НаКлиенте
Процедура ЗаблокироватьОбласть(Команда)
	
	Для Каждого Обл Из ПолеТабличногоДокумента.ВыделенныеОбласти Цикл
		
		Для Стр = Обл.Верх По Обл.Низ Цикл 
				
			ТекОбл =  ПолеТабличногоДокумента.Область(Стр,Обл.Лево,Стр,Обл.Лево);
			
			Если ТипЗнч(ТекОбл.Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
				
				УстановитьБлокировкуОбласти(ТекОбл.Расшифровка,1);
		
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	

		
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьОбласть(Команда)
	
	Для Каждого Обл Из ПолеТабличногоДокумента.ВыделенныеОбласти Цикл
		
		Для Стр = Обл.Верх По Обл.Низ Цикл 
			
			ТекОбл =  ПолеТабличногоДокумента.Область(Стр,Обл.Лево,Стр,Обл.Лево);
			
			Если ТипЗнч(ТекОбл.Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
				
				УстановитьБлокировкуОбласти(ТекОбл.Расшифровка,0);
	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	

		
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьСогласование(Команда)
		
	Для Каждого Обл Из ПолеТабличногоДокумента.ВыделенныеОбласти Цикл
		
		Для Стр = Обл.Верх По Обл.Низ Цикл 
				
			ТекОбл =  ПолеТабличногоДокумента.Область(Стр,Обл.Лево,Стр,Обл.Лево);
			
			Если ТипЗнч(ТекОбл.Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
				
				ЗапуститьПроцессСогласования(ТекОбл.Расшифровка);
		
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	
	
	ОбновитьПанель();
			
	ОбновитьХодПроцессаСогласования(ПолетабличногоДокумента.ТекущаяОбласть.Расшифровка);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусУтвержден(Команда)
	
	Для Каждого Обл Из ПолеТабличногоДокумента.ВыделенныеОбласти Цикл
		
		Для Стр = Обл.Верх По Обл.Низ Цикл 
						
			ТекОбл =  ПолеТабличногоДокумента.Область(Стр,Обл.Лево,Стр,Обл.Лево);
			
			Если ТипЗнч(ТекОбл.Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
				
				УстановитьСтатус(ТекОбл.Расшифровка,3);
	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	

	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЧерновик(Команда)
	
	Для Каждого Обл Из ПолеТабличногоДокумента.ВыделенныеОбласти Цикл
		
		Для Стр = Обл.Верх По Обл.Низ Цикл 
				
			ТекОбл =  ПолеТабличногоДокумента.Область(Стр,Обл.Лево,Стр,Обл.Лево);
			
			Если ТипЗнч(ТекОбл.Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
				
				УстановитьСтатус(ТекОбл.Расшифровка,0);
	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	


КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОшибка(Команда)
	
	Для Каждого Обл Из ПолеТабличногоДокумента.ВыделенныеОбласти Цикл
		
		Для Стр = Обл.Верх По Обл.Низ Цикл 
				
			ТекОбл =  ПолеТабличногоДокумента.Область(Стр,Обл.Лево,Стр,Обл.Лево);
			
			Если ТипЗнч(ТекОбл.Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
				
				УстановитьСтатус(ТекОбл.Расшифровка,2);
	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	

	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВыполняется(Команда)
		
	Для Каждого Обл Из ПолеТабличногоДокумента.ВыделенныеОбласти Цикл
		
		Для Стр = Обл.Верх По Обл.Низ Цикл 
				
			ТекОбл =  ПолеТабличногоДокумента.Область(Стр,Обл.Лево,Стр,Обл.Лево);
			
			Если ТипЗнч(ТекОбл.Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
				
				УстановитьСтатус(ТекОбл.Расшифровка,1);
	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСогласование(Команда)
	
	Для Каждого Обл Из ПолеТабличногоДокумента.ВыделенныеОбласти Цикл
		
		Для Стр = Обл.Верх По Обл.Низ Цикл 
				
			ТекОбл =  ПолеТабличногоДокумента.Область(Стр,Обл.Лево,Стр,Обл.Лево);
			
			Если ТипЗнч(ТекОбл.Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда		
				ОстановитьПроцессСогласования(ТекОбл.Расшифровка);		
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	
	
	ОбновитьПанель();
			
	ОбновитьХодПроцессаСогласования(ПолетабличногоДокумента.ТекущаяОбласть.Расшифровка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования(Команда)
		
	ТекущаяРасшифровка = ПолучитьРасшифровкуОбласти(ПолеТабличногоДокумента.ТекущаяОбласть.Расшифровка);	
	ТекущийДокументСогласования = ПолучитьДокументСогласованияОбласти(ТекущаяРасшифровка);	
	ДействияСогласованиеУХКлиент.ИсторияСогласования(ЭтаФорма,ТекущийДокументСогласования);
	
КонецПроцедуры

&НаКлиенте
Процедура Соглсовать(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура УправлениеГраницейПериода(Команда)
	
	Элементы.УправлениеГраницейПериода.Пометка = НЕ Элементы.УправлениеГраницейПериода.Пометка;
    Элементы.ГруппаУправлениеПериодами.Видимость = Элементы.УправлениеГраницейПериода.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодВперед(Команда)
	
	Индекс = 0;
	
	Для Каждого Стр Из Элементы.СписокДоступныхПериодов.СписокВыбора Цикл		
		Если Стр.Значение = СписокДоступныхПериодов Тогда		
			 Прервать;		
		КонецЕсли;			
		Индекс = Индекс+1;		
	КонецЦикла;
		
	Если  Элементы.СписокДоступныхПериодов.СписокВыбора.Количество()>Индекс+1 Тогда 		
		СписокДоступныхПериодов = Элементы.СписокДоступныхПериодов.СписокВыбора[Индекс+1].Значение;		
		ОбновитьПанель();	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПериодНазад(Команда)
	
	Индекс = 0;
	
	Для Каждого Стр Из Элементы.СписокДоступныхПериодов.СписокВыбора Цикл		
		Если Стр.Значение = СписокДоступныхПериодов Тогда		
			 Прервать;	
		КонецЕсли;			
		Индекс = Индекс+1;		
	КонецЦикла;
		
	Если  Индекс>0 Тогда 		
		СписокДоступныхПериодов = Элементы.СписокДоступныхПериодов.СписокВыбора[Индекс-1].Значение;		
		ОбновитьПанель();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПериод(Команда)
	
	МассивРасшифровокДляОбработки = РасшифровкиВыделенныхОбластей(ПолеТабличногоДокументаУправлениеПериодами);
	
	ОткрытьПериодСервер(МассивРасшифровокДляОбработки);	
	
	ОбновитьУправлениеПериодами();

КонецПроцедуры

&НаКлиенте
Функция РасшифровкиВыделенныхОбластей(ТабДок)
		
	МассивРасшифровок = Новый Массив;
	
	Для Каждого ВыдОбласть Из ТабДок.ВыделенныеОбласти Цикл
		Для СтрУ=ВыдОбласть.Верх По ВыдОбласть.Низ Цикл 
			Для КолУ=ВыдОбласть.Лево По ВыдОбласть.Право Цикл
				Расшифровка = ПолеТабличногоДокументаУправлениеПериодами.Область(СтрУ,КолУ,СтрУ,КолУ).Расшифровка;
				Если ТипЗнч(Расшифровка)=Тип("Структура") Тогда
					МассивРасшифровок.Добавить(Расшифровка);
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивРасшифровок;
	
КонецФункции

&НаКлиенте
Процедура ЗакрытьПериод(Команда)
		
	МассивРасшифровокДляОбработки = РасшифровкиВыделенныхОбластей(ПолеТабличногоДокументаУправлениеПериодами);
	
	ЗакрытьПериодСервер(МассивРасшифровокДляОбработки);	
	
	ОбновитьУправлениеПериодами();

КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьДоступностьРеквизитов()
	
	Элементы.ГруппаПериод.Доступность = ЗначениеЗаполнено(Объект.Сценарий);	 		
	 
КонецПроцедуры

#КонецОбласти

Процедура ОбновитьСтатистику()
	
	РабочийОбъект = РеквизитФормыВЗначение("Объект");
    
    ПолеТабличногоДокументаСтатистикаТекст.Очистить();	
	СтатистикаЗаголовок = РабочийОбъект.ПолучитьМакет("МакетЗаголовкаСтатистика"); 
	
	СтатистикаЗаголовок.Параметры.Сценарий = Объект.Сценарий;
	Если ЗначениеЗаполнено(СписокДоступныхПериодов) Тогда
		СтатистикаЗаголовок.Параметры.ПериодОтчета = Элементы.СписокДоступныхПериодов.СписокВыбора.НайтиПоЗначению(СписокДоступныхПериодов).Представление;
	КонецЕсли;
	
	
		
	
	ЗапросСтатистика = Новый Запрос;
	ЗапросСтатистика.Текст = "ВЫБРАТЬ
	                         |	РегистрМатрицыПолномочий.ШаблонДокументаБД,
	                         |	РегистрМатрицыПолномочий.ШаблонДокументаБД КАК Ракурс,
	                         |	РегистрМатрицыПолномочий.Исполняющий,
	                         |	РегистрМатрицыПолномочий.Согласование,
	                         |	РегистрМатрицыПолномочий.Проект,
	                         |	РегистрМатрицыПолномочий.Организация,
	                         |	ВложенныйЗапрос.ЗначениеЗаблокировано,
	                         |	ВложенныйЗапрос.Ссылка КАК ДокументОбласти,
	                         |	ВЫБОР
	                         |		КОГДА ВложенныйЗапрос.ИндексСостояния ЕСТЬ NULL
	                         |				ИЛИ ВложенныйЗапрос.ИндексСостояния = 0
	                         |			ТОГДА ""Черновик""
	                         |		ИНАЧЕ ВЫБОР
	                         |				КОГДА ВложенныйЗапрос.ИндексСостояния = 1
	                         |					ТОГДА ""Выполняется""
	                         |				ИНАЧЕ ВЫБОР
	                         |						КОГДА ВложенныйЗапрос.ИндексСостояния = 3
	                         |							ТОГДА ""Утвержден""
	                         |						ИНАЧЕ ВЫБОР
	                         |								КОГДА ВложенныйЗапрос.ИндексСостояния = 2
	                         |									ТОГДА ""Отклонен""
	                         |							КОНЕЦ
	                         |					КОНЕЦ
	                         |			КОНЕЦ
	                         |	КОНЕЦ КАК Статус
	                         |ПОМЕСТИТЬ ОбластиДанных
	                         |ИЗ
	                         |	РегистрСведений.РегистрМатрицыПолномочий КАК РегистрМатрицыПолномочий
	                         |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                         |			СогласованиеОбластиДанных.Ссылка КАК Ссылка,
	                         |			СогласованиеОбластиДанных.ЗначениеЗаблокировано КАК ЗначениеЗаблокировано,
	                         |			СогласованиеОбластиДанных.ИндексСостояния КАК ИндексСостояния,
	                         |			СогласованиеОбластиДанных.Область КАК Область,
	                         |			ИСТИНА КАК СостояниеПроверки,
	                         |			СогласованиеОбластиДанных.Организация КАК Организация,
	                         |			СогласованиеОбластиДанных.Проект КАК Проект
	                         |		ИЗ
	                         |			Документ.РакурсДанных КАК СогласованиеОбластиДанных
	                         |		ГДЕ
	                         |			СогласованиеОбластиДанных.Сценарий = &Сценарий
	                         |			И СогласованиеОбластиДанных.ПометкаУдаления = ЛОЖЬ
	                         |			И СогласованиеОбластиДанных.ПериодОтчета = &ПериодСценария) КАК ВложенныйЗапрос
	                         |		ПО РегистрМатрицыПолномочий.ШаблонДокументаБД = ВложенныйЗапрос.Область
	                         |			И РегистрМатрицыПолномочий.Организация = ВложенныйЗапрос.Организация
	                         |			И РегистрМатрицыПолномочий.Проект = ВложенныйЗапрос.Проект
	                         |ГДЕ
	                         |	РегистрМатрицыПолномочий.ДокументБД = &ТипКлючевогоОбъектаРакурс
	                         |	И РегистрМатрицыПолномочий.ВерсияРегламентаПодготовкиОтчетности = &ВерсияРегламента
	                         |	И ВЫРАЗИТЬ(РегистрМатрицыПолномочий.ШаблонДокументаБД КАК Справочник.ОбластиДанныхВидовОтчетов).Владелец В ИЕРАРХИИ (&Модель)
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ
	                         |	СУММА(ВЫБОР
	                         |			КОГДА ОбластиДанных.Статус = ""Черновик""
	                         |				ТОГДА 1
	                         |		КОНЕЦ) КАК КоличествоЧерновик,
	                         |	СУММА(ВЫБОР
	                         |			КОГДА ОбластиДанных.Статус = ""Утвержден""
	                         |				ТОГДА 1
	                         |		КОНЕЦ) КАК КоличествоУтверждено,
	                         |	СУММА(ВЫБОР
	                         |			КОГДА ОбластиДанных.Статус = ""Отклонен""
	                         |				ТОГДА 1
	                         |		КОНЕЦ) КАК КоличествоОтклонено,
	                         |	СУММА(ВЫБОР
	                         |			КОГДА ОбластиДанных.Статус = ""Выполняется""
	                         |				ТОГДА 1
	                         |		КОНЕЦ) КАК КоличествоВыполняется,
	                         |	КОЛИЧЕСТВО(ОбластиДанных.Статус) КАК ВсегоЭлементов
	                         |ИЗ
	                         |	ОбластиДанных КАК ОбластиДанных";
	
	
	
	ЗапросСтатистика.УстановитьПараметр("Модель",Объект.Регламент.ВидОтчета);
	ЗапросСтатистика.УстановитьПараметр("Сценарий",Объект.Сценарий);
	ЗапросСтатистика.УстановитьПараметр("ПериодСценария",ТекущийДокументУправленияПериодом.ПериодСценария);
	ЗапросСтатистика.УстановитьПараметр("ВерсияРегламента",Объект.Регламент);					 
	ЗапросСтатистика.УстановитьПараметр("ТипКлючевогоОбъектаРакурс",Справочники.ДокументыБД.НайтиПоНаименованию("РакурсДанных",,,Справочники.ТипыБазДанных.ТекущаяИБ));							 
							 
		
	
	Результат = ЗапросСтатистика.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтатистикаЗаголовок.Параметры.КоличествоОбластей = Выборка.ВсегоЭлементов;
		СтатистикаЗаголовок.Параметры.УтвержденоОбластей =  Выборка.КоличествоУтверждено;
		
		СтатистикаЗаголовок.Параметры.УтвержденоПроцент =  Формат(?(Выборка.ВсегоЭлементов=0,0,?(Выборка.КоличествоУтверждено=NULL,0,Выборка.КоличествоУтверждено)/Выборка.ВсегоЭлементов*100),"ЧЦ=5; ЧДЦ=2");

	КонецЦикла;
		
	ПолеТабличногоДокументаСтатистикаТекст.Вывести(СтатистикаЗаголовок);
	
	СхемаКомпоновки = РабочийОбъект.ПолучитьМакет("МакетСтатистика");
	НовыйИсточник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки);    
	
	КомпоновщикМатрицаОтчетов.ЗагрузитьНастройки(СхемаКомпоновки.ВариантыНастроек[0].Настройки);
	КомпоновщикМатрицаОтчетов.Инициализировать(НовыйИсточник);
	НастройкиКомпоновки=КомпоновщикМатрицаОтчетов.ПолучитьНастройки();
	
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодСценария",     	ТекущийДокументУправленияПериодом.ПериодСценария);
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("Сценарий",            	Объект.Сценарий);
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("ВерсияРегламента", 	Объект.Регламент);
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("Модель", 	Объект.Регламент.ВидОтчета);
	
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("ТипКлючевогоОбъектаРакурс", 	Справочники.ДокументыБД.НайтиПоНаименованию("РакурсДанных",,,Справочники.ТипыБазДанных.ТекущаяИБ));



	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиКомпоновки, ДанныеРасшифровки,,Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных();
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент();
	ПроцессорВывода.УстановитьДокумент(ПолеТабличногоДокументаСтатистика);
	ПолеТабличногоДокументаСтатистика.Очистить();
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	ПолеТабличногоДокументаСтатистика.Рисунки[0].Ширина = 80;
	ПолеТабличногоДокументаСтатистика.Рисунки[0].Высота = 70;
	
	
КонецПроцедуры	

Процедура ОбновитьДанные()
		
		
    Если НЕ ЗначениеЗАполнено(Объект.Сценарий) Тогда	
		ВернутьРисунокПустойТаблицы(ПолеТабличногоДокумента,Нстр("ru = 'Сценарий не выбран!'"));
	    Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СписокДоступныхПериодов) Тогда  	
		ВернутьРисунокПустойТаблицы(ПолеТабличногоДокумента,Нстр("ru = 'Период не выбран!'"));
		Возврат;
	КонецЕсли;	
		
	Если НЕ ЗначениеЗАполнено(Объект.Регламент) Тогда		
		ВернутьРисунокПустойТаблицы(ПолеТабличногоДокумента,Нстр("ru = 'Регламент не выбран!'"));
		Возврат;	
	КонецЕсли;
		
	ПолучитьДокументУправленияПериодомСценария();
	
	Если НЕ ЗначениеЗАполнено(СписокДоступныхПериодов) Тогда	
		ВернутьРисунокПустойТаблицы(ПолеТабличногоДокумента,Нстр("ru = 'Не открыт текущий период!'"));
		Возврат;	
	КонецЕсли;

	
	РабочийОбъект = РеквизитФормыВЗначение("Объект");
		
	СхемаКомпоновки = РабочийОбъект.ПолучитьМакет("МакетРакурсы");
	НовыйИсточник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки);    
	
	КомпоновщикМатрицаОтчетов.ЗагрузитьНастройки(СхемаКомпоновки.ВариантыНастроек[0].Настройки);
	КомпоновщикМатрицаОтчетов.Инициализировать(НовыйИсточник);
		
	НастройкиКомпоновки=КомпоновщикМатрицаОтчетов.ПолучитьНастройки();
	
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодСценария",     	ТекущийДокументУправленияПериодом.ПериодСценария);
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("Сценарий",            	Объект.Сценарий);
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("ВерсияРегламента", 	Объект.Регламент);
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("Модель", 	Объект.Регламент.ВидОтчета);
	
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("ТипКлючевогоОбъектаРакурс", 	Справочники.ДокументыБД.НайтиПоНаименованию("РакурсДанных",,,Справочники.ТипыБазДанных.ТекущаяИБ));
	
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодСценария",     	ТекущийДокументУправленияПериодом.ПериодСценария);

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиКомпоновки, ДанныеРасшифровки,,Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных();
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент();
	ДокументРезультат = Новый ТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПолеТабличногоДокумента.Очистить();
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	АдресРасшифровкиМакета = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
	
	ФорматироватьЗаголовкиИерархии(ПолеТабличногоДокумента,ДокументРезультат);
	
	Элементы.ГруппаДеревоРакурсов.Доступность = НЕ ПериодЗакрыт;
	Элементы.ГруппаПериодЗакрыт.Видимость =  ПериодЗакрыт;
	
КонецПроцедуры	

Процедура ОбновитьУправлениеПериодами()
			
	ВывестиТабличныйДокументУправленияПериодами(ПолеТабличногоДокументаУправлениеПериодами);
	
	ПолеТабличногоДокументаУправлениеПериодами.ФиксацияСверху = 1;
	ПолеТабличногоДокументаУправлениеПериодами.ФиксацияСлева = 1;
	
	Элементы.ПолеТабличногоДокументаУправлениеПериодами.Доступность = НЕ ПериодЗакрыт;
	Элементы.ГруппаПериодЗакрыт.Видимость =  ПериодЗакрыт;
	Элементы.Группа1.Доступность =  НЕ ПериодЗакрыт;
		
КонецПроцедуры	

&НаСервере
Процедура ВывестиТабличныйДокументУправленияПериодами(ТабДок)
	
	ТекущаяГраницаАктуализации = ТекущийДокументУправленияПериодом.ГраницаАктуализации; 
	ИндексКолонкиГраницы       = 0;
	
	РеквизитыУОП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийДокументУправленияПериодом, "ПериодСценария.Периодичность, ПериодСценария.ДатаНачала, ПериодСценарияОкончание.ДатаОкончания, ВерсияОрганизационнойСтруктуры, Сценарий");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыПериодовСценариев.Организации КАК Организация,
	|	СтатусыПериодовСценариев.Периоды КАК Период,
	|	СтатусыПериодовСценариев.СтатусБлокировки КАК СтатусБлокировки
	|ПОМЕСТИТЬ ВТ_СтатусыПериодов
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|ГДЕ
	|	СтатусыПериодовСценариев.Сценарии = &Сценарий
	|	И СтатусыПериодовСценариев.Периоды.ДатаНачала >= &ДатаНачала
	|	И СтатусыПериодовСценариев.Периоды.ДатаОкончания <= &ДатаОкончания
	|	И СтатусыПериодовСценариев.Периоды.Периодичность = &Периодичность
	|	И СтатусыПериодовСценариев.Организации <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.ОрганизационнаяЕдиница КАК Организация,
	|	ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.ОрганизационнаяЕдиницаРодитель КАК ОрганизацияРодитель,
	|	ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_Иерархия
	|ИЗ
	|	Справочник.ВерсииРегламентовПодготовкиОтчетности.СтруктураГруппы КАК ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы
	|ГДЕ
	|	ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.Ссылка = &Регламент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_Иерархия.ОрганизацияРодитель, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ОрганизацияРодитель,
	|	ВТ_СтатусыПериодов.Организация КАК Организация,
	|	ВТ_СтатусыПериодов.Период КАК Период,
	|	ВТ_СтатусыПериодов.СтатусБлокировки КАК СтатусБлокировки,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_СтатусыПериодов.Период) КАК ПериодПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_СтатусыПериодов.Организация) КАК ОрганизацияПредставление,
	|	ЕСТЬNULL(ВТ_Иерархия.НомерСтроки, 0) КАК НомерСтрокиРегламента
	|ИЗ
	|	ВТ_СтатусыПериодов КАК ВТ_СтатусыПериодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Иерархия КАК ВТ_Иерархия
	|		ПО ВТ_СтатусыПериодов.Организация = ВТ_Иерархия.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиРегламента,
	|	Организация,
	|	ВТ_СтатусыПериодов.Период.ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_СтатусыПериодов.Период КАК Период,
	|	ВТ_СтатусыПериодов.Период.Наименование КАК ПериодПредставление
	|ИЗ
	|	ВТ_СтатусыПериодов КАК ВТ_СтатусыПериодов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_СтатусыПериодов.Период.ДатаНачала"
	);
	Запрос.УстановитьПараметр("Регламент", РеквизитыУОП.ВерсияОрганизационнойСтруктуры);
	Запрос.УстановитьПараметр("Сценарий", РеквизитыУОП.Сценарий);
	Запрос.УстановитьПараметр("ДатаНачала", РеквизитыУОП.ПериодСценарияДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", РеквизитыУОП.ПериодСценарияОкончаниеДатаОкончания);
	Запрос.УстановитьПараметр("Периодичность", РеквизитыУОП.ПериодСценарияПериодичность);
	
	ТабДок.Очистить();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ОбработкаОбъект.ПолучитьМакет("МакетУправленияПериодами");
	ОбластьШапкаОрганизация = Макет.ПолучитьОбласть("Шапка|Организация");
	ОбластьШапкаПериод = Макет.ПолучитьОбласть("Шапка|Период");
	
	ОбластьСтрокаОрганизация = Макет.ПолучитьОбласть("Строка|Организация");
	ОбластьСтрокаПериод = Макет.ПолучитьОбласть("Строка|Период");
	
	ТабДок.Вывести(ОбластьШапкаОрганизация);
	
	ДоступныеПериоды.Очистить();
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаШапка = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	Пока ВыборкаШапка.Следующий() Цикл
		ОбластьШапкаПериод.Параметры.ПериодПредставление = ВыборкаШапка.ПериодПредставление;
		ОбластьШапкаПериод.Параметры.Период = ВыборкаШапка.Период;	
		ТабДок.Присоединить(ОбластьШапкаПериод);
		ДоступныеПериоды.Добавить(ВыборкаШапка.Период);
		Если ВыборкаШапка.Период = ТекущаяГраницаАктуализации Тогда
			 ИндексКолонкиГраницы = ТабДок.ШиринаТаблицы;
		КонецЕсли;
	КонецЦикла;
		
	ТаблицаСтрок = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выгрузить();
	ТаблицаСтрок.Индексы.Добавить("Организация");
	ТаблицаОрганизаций = ТаблицаСтрок.Скопировать(,"ОрганизацияРодитель, Организация, ОрганизацияПредставление");
	ТаблицаОрганизаций.Свернуть("ОрганизацияРодитель, Организация, ОрганизацияПредставление");
		
	ДоступныеОрганизации.ЗагрузитьЗначения(ТаблицаОрганизаций.ВыгрузитьКолонку("Организация"));
	
	Родитель = Справочники.Организации.ПустаяСсылка();
	ВывестиСтрокиПоРодителю(Родитель, ТаблицаОрганизаций, ТаблицаСтрок, 0, ОбластьСтрокаОрганизация, ОбластьСтрокаПериод, ТабДок);
		
КонецПроцедуры	

&НаСервере
Функция ВывестиСтрокиПоРодителю(Родитель, ТаблицаОрганизаций, ТаблицаСтрок, ТекущийУровень, ОбластьСтрокаОрганизация, ОбластьСтрокаПериод, ТабДок)
	
	Отступ = "";
	Для ном = 1 По ТекущийУровень Цикл
		Отступ = Отступ + "    ";
	КонецЦикла;
	
	ВыведеныСтроки = Ложь;
	
	Если ТекущийУровень = 0 Тогда
		ТабДок.НачатьАвтогруппировкуСтрок();
	КонецЕсли;
	
	НовыйУровень = ТекущийУровень + 1;
	СтрокиПоРодителю = ТаблицаОрганизаций.НайтиСтроки(Новый Структура("ОрганизацияРодитель", Родитель));
	Для каждого СтрокаОрганизации Из СтрокиПоРодителю Цикл
		
		ОбластьСтрокаОрганизация.Параметры.ОрганизацияПредставление = Отступ + СтрокаОрганизации.ОрганизацияПредставление;
		ОбластьСтрокаОрганизация.Параметры.Организация = СтрокаОрганизации.Организация;
		ОбластьВыводаОрганизации = ТабДок.Вывести(ОбластьСтрокаОрганизация, ТекущийУровень, "Группа" + ТекущийУровень, Истина);
	
		СтрокиПериодовОрганизации = ТаблицаСтрок.НайтиСтроки(Новый Структура("Организация", СтрокаОрганизации.Организация));
		Для каждого СтрокаПериода Из СтрокиПериодовОрганизации Цикл
			ОбластьСтрокаПериод.Параметры.Статус = ?(СтрокаПериода.СтатусБлокировки = 1, "Закрыт", "");
			ОбластьСтрокаПериод.Параметры.Расшифровка = Новый Структура("Организация, Период", СтрокаПериода.Организация, СтрокаПериода.Период);
			ОбластьВыводаПериода = ТабДок.Присоединить(ОбластьСтрокаПериод);
			Если СтрокаПериода.СтатусБлокировки = 1 Тогда
				ОбластьВыводаПериода.ЦветФона = Новый Цвет(191, 205, 219); // серый
			КонецЕсли;
		КонецЦикла;
		
		ЕстьПотомки = ВывестиСтрокиПоРодителю(СтрокаОрганизации.Организация, ТаблицаОрганизаций, ТаблицаСтрок, НовыйУровень, ОбластьСтрокаОрганизация, ОбластьСтрокаПериод, ТабДок);
		Если ЕстьПотомки Тогда
			ОбластьВыводаОрганизации.Шрифт = Новый Шрифт(ОбластьВыводаОрганизации.Шрифт,,,Истина); // полужирный
		КонецЕсли;
		
		ВыведеныСтроки = Истина;
		
	КонецЦикла;
	
	Если ТекущийУровень = 0 Тогда
		ТабДок.ЗакончитьАвтогруппировкуСтрок();
	КонецЕсли;
	
	Возврат ВыведеныСтроки;
	
КонецФункции

Процедура ОбновитьХодПроцессаСогласования(Расшифровка)
	
	
	ТекущаяРасшифровка = ПолучитьРасшифровкуОбласти(Расшифровка);
	
	СтруктураОтвета = ПолучитьДанныеПроцессаСогласования(ТекущаяРасшифровка.Ракурс,ТекущаяРасшифровка.Организация,ТекущаяРасшифровка.Проект);
	
	КонсольОбъект = Обработки.КонсольУправленияПроцессом.Создать();
	КонсольОбъект.ЭкземплярПроцесса = СтруктураОтвета.ДокументПроцесса;
	КонсольОбъект.ШаблонПроцесса =  СтруктураОтвета.Согласование;
		
	ПолеТабличногоДокументаМаршрут = КонсольОбъект.СформироватьОтчет();
		
КонецПроцедуры	

Функция ПолучитьДанныеПроцессаСогласования(Ракурс,Организация,Проект)
	
	
	 СтруктураОтвета = Новый Структура;
	 СтруктураОтвета.Вставить("Исполняющий");
	 СтруктураОтвета.Вставить("Согласование");
	 СтруктураОтвета.Вставить("ДокументПроцесса");

	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	РегистрМатрицыПолномочий.ШаблонДокументаБД КАК Ракурс,
	                |	РегистрМатрицыПолномочий.Исполняющий,
	                |	ВЫБОР
	                |		КОГДА РегистрМатрицыПолномочий.Согласование ССЫЛКА Справочник.ШаблоныУниверсальныхПроцессов
	                |			ТОГДА РегистрМатрицыПолномочий.Согласование
	                |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ШаблоныУниверсальныхПроцессов.Автоутверждение)
	                |	КОНЕЦ КАК Согласование,
	                |	ЭкземплярПроцесса.Ссылка КАК ДокументПроцесса
	                |ИЗ
	                |	РегистрСведений.РегистрМатрицыПолномочий КАК РегистрМатрицыПолномочий
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭкземплярПроцесса КАК ЭкземплярПроцесса
	                |		ПО РегистрМатрицыПолномочий.ШаблонДокументаБД = ЭкземплярПроцесса.КлючевойОбъектПроцесса.Область
	                |			И (ЭкземплярПроцесса.ПометкаУдаления = ЛОЖЬ)
	                |			И (ЭкземплярПроцесса.Период = &ПериодСценария)
	                |			И (ЭкземплярПроцесса.Сценарий = &Сценарий)
	                |			И (ЭкземплярПроцесса.Организация = &Организация)
	                |			И (ЭкземплярПроцесса.Проект = &Проект)
	                |ГДЕ
	                |	РегистрМатрицыПолномочий.ШаблонДокументаБД = &ШаблонДокументаБД";
	 
	 Запрос.УстановитьПараметр("ПериодСценария",ТекущийДокументУправленияПериодом.ПериодСценария);
	 Запрос.УстановитьПараметр("Сценарий",Объект.Сценарий);
	 Запрос.УстановитьПараметр("Организация",Организация);
	 Запрос.УстановитьПараметр("Проект",Проект);
	 Запрос.УстановитьПараметр("ШаблонДокументаБД",Ракурс);

	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
	 
	 	   ЗаполнитьЗначенияСвойств(СтруктураОтвета,Выборка);
	 
	 КонецЦикла;
	 
	 Возврат СтруктураОтвета;
	 
		
КонецФункции	

Процедура УстановитьБлокировкуОбласти(Расшифровка,Блокировка);
	
	ТекущаяРасшифровка = ПолучитьРасшифровкуОбласти(Расшифровка);
	
	Если ТекущаяРасшифровка.Ракурс.ЭтоГруппа Тогда
				
		СписокЭлементов = Новый Массив;
		
		ПолучитьЭлементыГруппы(ТекущаяРасшифровка.Ссылка,СписокЭлементов);
		
		ТекущийДокументСогласования = ПолучитьДокументСогласованияОбласти(ТекущаяРасшифровка);
		
		Если Не ПроверитьВозможностьБлокировкиПоГруппе(ТекущаяРасшифровка) Тогда
			 Возврат;
		КонецЕсли;
		
		СводнаяТаблицаУХ.УстановитьСтатусОбласти(ТекущийДокументСогласования,Неопределено,Блокировка);

		Для Каждого Стр Из СписокЭлементов Цикл
			
			ТекущийДокументСогласования = ПолучитьДокументСогласованияОбласти(Стр);	
			СводнаяТаблицаУХ.УстановитьСтатусОбласти(ТекущийДокументСогласования,Неопределено,Блокировка);
			
		КонецЦикла;	
		
	Иначе	
		
		ТекущийДокументСогласования = ПолучитьДокументСогласованияОбласти(ТекущаяРасшифровка);
		СводнаяТаблицаУХ.УстановитьСтатусОбласти(ТекущийДокументСогласования,Неопределено,Блокировка);
			
	КонецЕсли;	
		
	ОбновитьПанель();
	
КонецПроцедуры

Процедура ФорматироватьЗаголовкиИерархии(ПолеТабличногоДокументаМакет,ДокументРезультат) 
	
	///////////////////////////// Форматирование ///////////////////////////////////////////////////////////////////////////	
		
	КоличествоУдаляемыхСтрок = 0;
	
	Для Стр=1 По ДокументРезультат.ФиксацияСверху Цикл
	    Для Кол=1 По ДокументРезультат.ШиринаТаблицы Цикл
		      ДокументРезультат.Область(Стр,Кол,Стр,Кол).ВертикальноеПоложение=ВертикальноеПоложение.Центр;
			  ДокументРезультат.Область(Стр,Кол,Стр,Кол).ГоризонтальноеПоложение=ГоризонтальноеПоложение.Центр;	  
		  КонецЦикла;
	КонецЦикла; 
		
	//Фиксация    
	ФиксацияСлева=1;
	ФиксацияСверху=ДокументРезультат.ФиксацияСверху;
    ДокументРезультат.ФиксацияСлева = 1;
	
	//Удаляем пустые строки,если есть
	
	МассивУдаляемыхСтрок = Новый Массив;
	Сч = 0;
	Для  СтрокаТаблицы =ДокументРезультат.ФиксацияСверху  По ДокументРезультат.ВысотаТаблицы Цикл 
		
		ОблКУдалению = ДокументРезультат.Область(СтрокаТаблицы,0,СтрокаТаблицы,0);
		Если ОблКУдалению.ВысотаСтроки = 1 Тогда		
			МассивУдаляемыхСтрок.Добавить(ОблКУдалению);
			ОблКУдалению.Имя = "Удалить"+Сч;
			Сч = Сч+1;
		КонецЕсли;	
		
				
	КонецЦикла;
	
	Для Сч=0 По  МассивУдаляемыхСтрок.Количество()-1 Цикл	
		ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область("Удалить"+Сч),ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЦикла;
	
	КоличествоДопФиксируемыхСтрок =ДокументРезультат.ФиксацияСверху;
	
		
	//Уголок шапки с заголовком
	Для Стр=1 По ДокументРезультат.ФиксацияСлева Цикл
		ДокументРезультат.Область(Стр,1,Стр,1).Текст = Нстр("ru = 'Вид отчета/ Ракурс/ Аналитика'");
	КонецЦикла;
	
		
	ПолеТабличногоДокументаМакет.Очистить();
	ПолеТабличногоДокументаМакет.Вывести(ДокументРезультат);
		
	//Фиксируем 
	ПолеТабличногоДокументаМакет.ФиксацияСверху=ФиксацияСверху;
	ПолеТабличногоДокументаМакет.ФиксацияСлева=1;
	
	//Форматируем шапку...
	ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ПолеТабличногоДокументаМакет.ШиринаТаблицы).ЦветФона=Новый Цвет(155,194,230);
    ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ПолеТабличногоДокументаМакет.ШиринаТаблицы).ЦветТекста=Новый Цвет(255,255,255);
	ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ПолеТабличногоДокументаМакет.ШиринаТаблицы).Шрифт=Новый Шрифт("Arial",8,Истина);

	
	//Уголок шапки с заголовком
	ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ФиксацияСлева).Объединить();
	
	
	//Линии таблицы
	ПолеТабличногоДокументаМакет.Область(2,1,ПолеТабличногоДокументаМакет.ВысотаТаблицы,
	ПолеТабличногоДокументаМакет.ШиринаТаблицы+1).ЦветРамки = Новый Цвет(230,230,250);	
	ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ФиксацияСверху+1,1,ПолеТабличногоДокументаМакет.ВысотаТаблицы,
	ПолеТабличногоДокументаМакет.ФиксацияСлева).ЦветФона = Новый Цвет(255,255,255);
				
	ПолеТабличногоДокументаМакет.Область(ФиксацияСверху,0,ФиксацияСверху,0).ВысотаСтроки=33; 
	 
    //Установить картинки статусов
	ОбластьСтатуса =  ПолеТабличногоДокументаМакет.НайтиТекст("Статус");
	Если НЕ ОбластьСтатуса =Неопределено Тогда
		
		 КолонкаОбласти = ОбластьСтатуса.Лево;
		 
		 Для Инд = 2 По ПолеТабличногоДокументаМакет.ВысотаТаблицы Цикл
			 
			 Если ПолеТабличногоДокументаМакет.Область(Инд,КолонкаОбласти,Инд,КолонкаОбласти).Текст = "Вып." Тогда
				 
				  ПолеТабличногоДокументаМакет.Область(Инд,КолонкаОбласти,Инд,КолонкаОбласти).Картинка = БиблиотекаКартинок.ЗолотойШар;
				  
			 ИначеЕсли ПолеТабличногоДокументаМакет.Область(Инд,КолонкаОбласти,Инд,КолонкаОбласти).Текст = "Черн." Тогда	  
				 
				 ПолеТабличногоДокументаМакет.Область(Инд,КолонкаОбласти,Инд,КолонкаОбласти).Картинка = БиблиотекаКартинок.СерыйШар;
				 
			 ИначеЕсли ПолеТабличногоДокументаМакет.Область(Инд,КолонкаОбласти,Инд,КолонкаОбласти).Текст = "Утв." Тогда	  
				 
				 ПолеТабличногоДокументаМакет.Область(Инд,КолонкаОбласти,Инд,КолонкаОбласти).Картинка = БиблиотекаКартинок.ЗеленыйШар;
				 
			 ИначеЕсли ПолеТабличногоДокументаМакет.Область(Инд,КолонкаОбласти,Инд,КолонкаОбласти).Текст = "Откл." Тогда	  
				 
				 ПолеТабличногоДокументаМакет.Область(Инд,КолонкаОбласти,Инд,КолонкаОбласти).Картинка = БиблиотекаКартинок.КрасныйШар;

				 
				 
			 КонецЕсли;	 
			 
			 ПолеТабличногоДокументаМакет.Область(Инд,КолонкаОбласти,Инд,КолонкаОбласти).РазмерКартинки = РазмерКартинки.РеальныйРазмер;  
			 
		 КонецЦикла;	 
		
	КонецЕсли;	
	
	//Установить картинки статусов
	ОбластьСтатуса =  ПолеТабличногоДокументаМакет.НайтиТекст("Блокировка");
	Если НЕ ОбластьСтатуса =Неопределено Тогда
		
		 КолонкаОбласти = ОбластьСтатуса.Лево;
		 
		 Для Инд = 2 По ПолеТабличногоДокументаМакет.ВысотаТаблицы Цикл
			 
			 Если ПолеТабличногоДокументаМакет.Область(Инд,КолонкаОбласти,Инд,КолонкаОбласти).Текст = "1" Тогда
				 
				 ПолеТабличногоДокументаМакет.Область(Инд,КолонкаОбласти,Инд,КолонкаОбласти).Текст = "";
				 ПолеТабличногоДокументаМакет.Область(Инд,КолонкаОбласти,Инд,КолонкаОбласти).Картинка = БиблиотекаКартинок.ЗакрытьПроцесс;
				 ПолеТабличногоДокументаМакет.Область(Инд,КолонкаОбласти,Инд,КолонкаОбласти).ГоризонтальноеПоложениеКартинки = ГоризонтальноеПоложение.Центр;
 				 
			 КонецЕсли;	 
			 
		 КонецЦикла;	 
		
	КонецЕсли;	

		
КонецПроцедуры	

Функция ПолучитьРасшифровкуОбласти(Расшифровка)
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Ракурс");
	СтруктураПолей.Вставить("ИндексСостояния");	
	СтруктураПолей.Вставить("БланкДляОтображения");
	СтруктураПолей.Вставить("ШаблонДокументаБД");
	СтруктураПолей.Вставить("ДокументСогласования");	
	СтруктураПолей.Вставить("ДокументПроцесса");
	СтруктураПолей.Вставить("Согласование");
	СтруктураПолей.Вставить("Проект",Справочники.Проекты.ПустаяСсылка());	
	СтруктураПолей.Вставить("Организация",Справочники.Организации.ПустаяСсылка());
	
	Если НЕ ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		 Возврат СтруктураПолей;
	КонецЕсли;
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресРасшифровкиМакета);
	СводнаяТаблицаУХ.ПолучитьРасшифровкуГруппировок(ДанныеРасшифровки.Элементы[Расшифровка],СтруктураПолей);	
	
	СтруктураАналитик = Новый Структура;
    СтруктураАналитик.Вставить("Сценарии",Объект.Сценарий);	
	СтруктураАналитик.Вставить("Организации",СтруктураПолей.Организация);
	СтруктураАналитик.Вставить("Проекты",СтруктураПолей.Проект);	
	СтруктураПолей.Вставить("АналитикиОтбораИсточник",ПоместитьВоВременноеХранилище(СтруктураАналитик,Новый УникальныйИдентификатор() ));	
	СтруктураПолей.Вставить("Проект",СтруктураПолей.Проект);
	СтруктураПолей.Вставить("Организация",СтруктураПолей.Организация);
	
	Если ЗначениеЗаполнено(СтруктураПолей.Ракурс) Тогда

		СтруктураПолей.Вставить("БланкДляОтображения",СтруктураПолей.Ракурс.БланкОтображения);
		
	Иначе	
		
		Если ТипЗнч(СтруктураПолей.ШаблонДокументаБД) = Тип("СправочникСсылка.ВидыОтчетов") Тогда
			
			СоответствиеНастроек = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(СтруктураПолей.ШаблонДокументаБД);	
			СоответствиеНастроек.Свойство("БланкОтчета", СтруктураПолей.БланкДляОтображения);	
				
		КонецЕсли;	  
		
	КонецЕсли;
	
	Возврат СтруктураПолей;
		
КонецФункции

Функция ВернутьРисунокПустойТаблицы(ТабДок,Заголовок) Экспорт
	
	ТабДок.Очистить();
	ТабДок.ФиксацияСлева = 0;
	ТабДок.ФиксацияСверху = 0;	

	Рисунок = ТабДок.Рисунки.ДОбавить(ТипРисункаТабличногоДокумента.Прямоугольник);
	Рисунок.Лево = 18;
	Рисунок.Верх = 14;
	Рисунок.Ширина = 160;
	Рисунок.Высота = 28;
	Рисунок.ГраницаСверху = Ложь;
	Рисунок.ГраницаСнизу  = Ложь;
	Рисунок.ГраницаСправа = Ложь;
	Рисунок.ГраницаСлева  = Ложь;
	Рисунок.ЦветФона=Новый Цвет(100, 100, 100);	   
	Рисунок.Имя  = "ШаблонПустойТаблицы";	
	
	Рисунок = ТабДок.Рисунки.ДОбавить(ТипРисункаТабличногоДокумента.Текст);
	Рисунок.Лево = 16;
	Рисунок.Верх = 12;
	Рисунок.Ширина = 160;
	Рисунок.Высота = 28;
	//Рисунок.ЦветФона  = Новый Цвет(255,255,255);
	Рисунок.ЦветФона=Новый Цвет(155, 194, 230);	
	Рисунок.Шрифт = Новый Шрифт(Рисунок.Шрифт,,12);
	Рисунок.ЦветТекста = Новый Цвет(255,255,255);
	Рисунок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр; 
	Рисунок.ВертикальноеПоложение = ВертикальноеПоложение.Центр; 
	Рисунок.Текст = Заголовок;
	
		
КонецФункции	

Процедура УстановитьСтатус(Расшифровка,Статус)
	
	
	ТекущаяРасшифровка = ПолучитьРасшифровкуОбласти(Расшифровка);
	
	ЕстьСуперПользователь = МодульСогласованияДокументовУХ.ЕстьСуперПользователь(ТекущаяРасшифровка.Организация);
	
	Если Не ЕстьСуперПользователь Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'У пользователя недостаточно прав для изменения статуса!'"));
		Возврат;
	КонецЕсли;	
	

	ТекущийДокументСогласования = ПолучитьДокументСогласованияОбласти(ТекущаяРасшифровка);
		
	    	
	Если ТекущаяРасшифровка.Ракурс.ЭтоГруппа Тогда
		
	Иначе	
		
		Если Статус = 3 Тогда
			УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВСостояниеУтверждена(ТекущийДокументСогласования);
		ИначеЕсли  Статус = 0 Тогда
			УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВСостояниеЧерновик(ТекущийДокументСогласования);	
		ИначеЕсли  Статус = 2 Тогда
			УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВСостояниеОтклонена(ТекущийДокументСогласования);		
		ИначеЕсли  Статус = 1 Тогда
			УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВСостояниеНаУтверждении(ТекущийДокументСогласования);		
		КонецЕсли;
			
	КонецЕсли;	
	
	ОбновитьПанель();
	
КонецПроцедуры

Функция ПолучитьДокументСогласованияОбласти(Расшифровка)
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	СогласованиеОбластиДанных.Ссылка
	                |ИЗ
	                |	Документ.РакурсДанных КАК СогласованиеОбластиДанных
	                |ГДЕ
	                |	СогласованиеОбластиДанных.Сценарий = &Сценарий
	                |	И СогласованиеОбластиДанных.ПериодОтчета = &Период
	                |	И СогласованиеОбластиДанных.Область = &Область
	                |	И СогласованиеОбластиДанных.Организация = &Организация
	                |	И СогласованиеОбластиДанных.Проект = &Проект
	                |	И СогласованиеОбластиДанных.ПометкаУдаления = ЛОЖЬ";
	 
	 Запрос.УстановитьПараметр("Сценарий",Объект.Сценарий);
	 Запрос.УстановитьПараметр("Период",ТекущийДокументУправленияПериодом.ПериодСценария);
 	 Запрос.УстановитьПараметр("Область",Расшифровка.Ракурс);
     Запрос.УстановитьПараметр("Организация",Расшифровка.Организация);
     Запрос.УстановитьПараметр("Проект",Расшифровка.Проект);

	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Если Выборка.Следующий() Тогда
	 
	 	
		 Возврат Выборка.Ссылка;
		 
	 Иначе	
		 
		 СогласованиеОбластиДанных = Документы.РакурсДанных.СоздатьДокумент();
		 СогласованиеОбластиДанных.Дата = ТекущаяДата();
		 СогласованиеОбластиДанных.Область =  Расшифровка.Ракурс;
		 СогласованиеОбластиДанных.Сценарий = Объект.Сценарий;
		 СогласованиеОбластиДанных.Организация = Расшифровка.Организация;
		 СогласованиеОбластиДанных.Проект = Расшифровка.Проект;
		 СогласованиеОбластиДанных.Дата = ТекущаяДата();
		 СогласованиеОбластиДанных.ПредставлениеПериода = Элементы.СписокДоступныхПериодов.СписокВыбора.НайтиПоЗначению(СписокДоступныхПериодов).Представление;
		 
		 СогласованиеОбластиДанных.ПериодНачалоДата = ТекущийДокументУправленияПериодом.ПериодСценария.ДатаНачала;
		 Если ЗначениеЗаполнено(ТекущийДокументУправленияПериодом.ПериодСценарияОкончание) Тогда
			 СогласованиеОбластиДанных.ПериодОкончаниеДата = ТекущийДокументУправленияПериодом.ПериодСценарияОкончание.ДатаОкончания;
		 Иначе	 
			 СогласованиеОбластиДанных.ПериодОкончаниеДата = ТекущийДокументУправленияПериодом.ПериодСценария.ДатаОкончания;
		 КонецЕсли;
		 
		 Если ЗначениеЗаполнено(Объект.Сценарий.Периодичность) Тогда
			 СогласованиеОбластиДанных.Периодичность = Объект.Сценарий.Периодичность;
		 Иначе	 
			 СогласованиеОбластиДанных.Периодичность = ТекущийДокументУправленияПериодом.ПериодСценария.Периодичность;
		 КонецЕсли;
		 
		 СогласованиеОбластиДанных.ПериодОтчета = ТекущийДокументУправленияПериодом.ПериодСценария;
		 
		 СогласованиеОбластиДанных.Записать();
		 
		 Возврат СогласованиеОбластиДанных.Ссылка;
		 
	 КонецЕсли;
	 
	
КонецФункции	

Процедура ЗапуститьПроцессСогласования(Расшифровка)
	
	ТекущаяРасшифровка = ПолучитьРасшифровкуОбласти(Расшифровка);

	ТекущийДокументСогласования = ПолучитьДокументСогласованияОбласти(ТекущаяРасшифровка);

	МодульУправленияПроцессамиУХ.ПринятьКОбработке(, ТекущийДокументСогласования);
	
		
КонецПроцедуры	
	
Процедура ОстановитьПроцессСогласования(Расшифровка)
	
	ТекущаяРасшифровка = ПолучитьРасшифровкуОбласти(Расшифровка);
	ТекущийДокументСогласования = ПолучитьДокументСогласованияОбласти(ТекущаяРасшифровка);
	МодульУправленияПроцессамиУХ.ОтменитьСогласование(,ТекущийДокументСогласования);
		
КонецПроцедуры	

Процедура ПолучитьДокументУправленияПериодомСценария()
	
	 
	 ТекущийДокументУправленияПериодом =   СписокДоступныхПериодов;
	 ПериодЗакрыт =  ТекущийДокументУправленияПериодом.ПериодЗакрыт;
	 
	 
КонецПроцедуры	

Процедура ЗаполнитьСписокПериодов()
	
	Элементы.СписокДоступныхПериодов.СписокВыбора.Очистить();
	СписокДоступныхПериодов = Документы.УправлениеПериодомСценария.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УправлениеПериодомСценария.Ссылка,
	               |	УправлениеПериодомСценария.ТекущаяПериодичность,
	               |	УправлениеПериодомСценария.ПериодСценария,
	               |	УправлениеПериодомСценария.ПериодСценарияОкончание
	               |ИЗ
	               |	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	               |ГДЕ
	               |	УправлениеПериодомСценария.Сценарий = &Сценарий
	               |	И УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры = &ВерсияОрганизационнойСтруктуры
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	УправлениеПериодомСценария.ПериодСценария.ДатаНачала";
	
	Запрос.УстановитьПараметр("Сценарий",Объект.Сценарий);
	Запрос.УстановитьПараметр("ВерсияОрганизационнойСтруктуры",Объект.Регламент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
				
		Если Выборка.ПериодСценария <> Выборка.ПериодСценарияОкончание Тогда	
			Шаблон = НСтр("ru = '%1 - %2'");		
			ПредставлениеПериода = СтрШаблон(Шаблон, Выборка.ПериодСценария, Выборка.ПериодСценарияОкончание);
		Иначе 
			Шаблон = НСтр("ru = '%1'");
			ПредставлениеПериода = СтрШаблон(Шаблон, Выборка.ПериодСценария);
		КонецЕсли;
	
		Элементы.СписокДоступныхПериодов.СписокВыбора.Добавить(Выборка.Ссылка,ПредставлениеПериода);
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ОбновитьПанель()
		
	ПолучитьДокументУправленияПериодомСценария();
	
	Объект.ДатаНачала = СписокДоступныхПериодов.ПериодСценария.ДатаНачала;	
	Объект.ДатаОкончания = СписокДоступныхПериодов.ПериодСценарияОкончание.ДатаОкончания;
		
	Если Объект.Режим  = "ПоВидамОтчетов" Тогда
		
		ОбновитьДанные();
		ОбновитьСтатистику();
		
	ИначеЕсли Объект.Режим = "Периоды" Тогда	
		
		ОбновитьУправлениеПериодами();
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПолучитьЭлементыГруппы(Ссылка,СписокЭлементов)	

	Выборка = Справочники.ОбластиДанныхВидовОтчетов.Выбрать(Ссылка,Объект.Регламент,,"Код");
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоГруппа Тогда
			ПолучитьЭлементыГруппы(Выборка.Ссылка,СписокЭлементов);
		Иначе	
			СписокЭлементов.Добавить(Выборка.Ссылка);
		КонецЕсли;	
		
	КонецЦикла;	
	
	
КонецПроцедуры

&НаСервере
Процедура ЗакрытьПериодСервер(МассивРасшифровокДляОбработки)
		
	РеквизитыУОП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийДокументУправленияПериодом, "ПериодСценария.Периодичность, ПериодСценария.ДатаНачала, ПериодСценарияОкончание.ДатаОкончания");
	УОПДатаНачала = РеквизитыУОП.ПериодСценарияДатаНачала;
	УОПДатаОкончания = РеквизитыУОП.ПериодСценарияОкончаниеДатаОкончания;
	УОППериодичность = РеквизитыУОП.ПериодСценарияПериодичность;
	
	Для Каждого эРасшифровка Из  МассивРасшифровокДляОбработки Цикл
		
		НаборЗаписей = РегистрыСведений.СтатусыПериодовСценариев.СоздатьНаборЗаписей();
						
		Граница = эРасшифровка.Период;
		
		НаборЗаписей.Отбор.Сценарии.Установить(Объект.Сценарий);
		НаборЗаписей.Отбор.Организации.Установить(эРасшифровка.Организация);
		НаборЗаписей.Прочитать();
		
		//Если закрываем - то закрываем все данные по организации, сценарию до текущего периода.
		Для Каждого СтрЗапись ИЗ НаборЗаписей Цикл
			Если  СтрЗапись.Периоды.ДатаНачала >= УОПДатаНачала И СтрЗапись.Периоды.ДатаНачала <= УОПДатаОкончания И СтрЗапись.Периоды.Периодичность = УОППериодичность Тогда
				СтрЗапись.ДатаЗакрытияПериода = ТекущаяДата();	
				Если  СтрЗапись.Периоды.ДатаНачала <= Граница.ДатаНачала Тогда 	
					СтрЗапись.СтатусБлокировки = 1;	 
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);	 		 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОткрытьПериодСервер(МассивРасшифровокДляОбработки)
		
	РеквизитыУОП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийДокументУправленияПериодом, "ПериодСценария.Периодичность, ПериодСценария.ДатаНачала, ПериодСценарияОкончание.ДатаОкончания");
	УОПДатаНачала = РеквизитыУОП.ПериодСценарияДатаНачала;
	УОПДатаОкончания = РеквизитыУОП.ПериодСценарияОкончаниеДатаОкончания;
	УОППериодичность = РеквизитыУОП.ПериодСценарияПериодичность;
	
	Для Каждого эРасшифровка Из  МассивРасшифровокДляОбработки Цикл
		
		НаборЗаписей = РегистрыСведений.СтатусыПериодовСценариев.СоздатьНаборЗаписей();
						
		Граница = эРасшифровка.Период;
		
		НаборЗаписей.Отбор.Сценарии.Установить(Объект.Сценарий);
		НаборЗаписей.Отбор.Организации.Установить(эРасшифровка.Организация);
		НаборЗаписей.Прочитать();
		
		//Если открываем - то открываем все данные по организации, сценарию с текущего периода.
		Для Каждого СтрЗапись ИЗ НаборЗаписей Цикл
			Если  СтрЗапись.Периоды.ДатаНачала >= УОПДатаНачала И СтрЗапись.Периоды.ДатаНачала <= УОПДатаОкончания И СтрЗапись.Периоды.Периодичность = УОППериодичность Тогда
				СтрЗапись.ДатаЗакрытияПериода = ТекущаяДата();	
				Если  СтрЗапись.Периоды.ДатаНачала >= Граница.ДатаНачала Тогда 	
					СтрЗапись.СтатусБлокировки = 0;	 
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);	 		 
		
	КонецЦикла;

КонецПроцедуры

Функция ПроверитьВозможностьБлокировкиПоГруппе(Расшифровка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РегистрМатрицыПолномочий.Согласование ССЫЛКА Справочник.РолиКонтактныхЛиц
	|			ТОГДА ОтветственныеОрганизаций_Согласование.Пользователь
	|		ИНАЧЕ РегистрМатрицыПолномочий.Согласование
	|	КОНЕЦ КАК Согласование,
	|	ВЫБОР
	|		КОГДА РегистрМатрицыПолномочий.Исполняющий ССЫЛКА Справочник.РолиКонтактныхЛиц
	|			ТОГДА ОтветственныеОрганизаций_Исполняющий.Пользователь
	|		ИНАЧЕ РегистрМатрицыПолномочий.Исполняющий
	|	КОНЕЦ КАК Исполняющий,
	|	ОтветственныеОрганизаций_Исполняющий.Роль КАК ИсполняющийРоль,
	|	ОтветственныеОрганизаций_Согласование.Роль КАК СогласованиеРоль
	|ИЗ
	|	РегистрСведений.РегистрМатрицыПолномочий КАК РегистрМатрицыПолномочий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций_Согласование
	|		ПО (ОтветственныеОрганизаций_Согласование.Роль = РегистрМатрицыПолномочий.Согласование)
	|			И (ОтветственныеОрганизаций_Согласование.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций_Исполняющий
	|		ПО (ОтветственныеОрганизаций_Исполняющий.Роль = РегистрМатрицыПолномочий.Исполняющий)
	|			И (ОтветственныеОрганизаций_Исполняющий.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|ГДЕ
	|	РегистрМатрицыПолномочий.ДокументБД = &ДокументБД
	|	И РегистрМатрицыПолномочий.ШаблонДокументаБД = &ШаблонДокументаБД
	|	И РегистрМатрицыПолномочий.Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	|	И РегистрМатрицыПолномочий.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	
	
	
	Запрос.УстановитьПараметр("ДокументБД",Справочники.ДокументыБД.НайтиПоНаименованию("РакурсДанных",,,Справочники.ТипыБазДанных.ТекущаяИБ));
	Запрос.УстановитьПараметр("ШаблонДокументаБД",Расшифровка.Ссылка);
		
	Ответственные = Запрос.Выполнить().Выгрузить();	
	
	Если Ответственные.НайтиСтроки(Новый Структура("Исполняющий",ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"))).Количество()>0 Тогда
		
		Если ЗначениеЗаполнено(Расшифровка.Ссылка.Родитель) Тогда
			
			ТекущийДокументСогласования = ПолучитьДокументСогласованияОбласти(Расшифровка.Ссылка.Родитель);
			Если  ТекущийДокументСогласования.ЗначениеЗаблокировано = 1 Тогда
				
				СтрокаШаблона = Нстр("ru = 'Невозможно изменить блокировку области, так как заблокирована область %1 %2'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда	
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Расшифровка.Ссылка.Родитель, ОписаниеОшибки()));
				КонецЕсли;
				
				Возврат Ложь;
				
			КонецЕсли;	 		
		КонецЕсли;	
		
	Иначе	
		
		СтрокаШаблона = Нстр("ru = 'У пользователя нет прав для текущей операции! %1'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда	
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ОписаниеОшибки()));
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
	
КонецФункции	

&НаКлиенте
Процедура ВыполнитьАктуализацию(Команда)
	
	МассивРасшифровокДляОбработки = Новый Массив;
	
	
	
	Для Каждого вОбласть Из ПолеТабличногоДокументаУправлениеПериодами.ВыделенныеОбласти Цикл 
		
		Для  СтрУ=вОбласть.Верх По вОбласть.Низ Цикл 
			Для  КолУ=вОбласть.Лево По вОбласть.Право Цикл
				Если  ТипЗнч(ПолеТабличногоДокументаУправлениеПериодами.Область(СтрУ,КолУ,СтрУ,КолУ).Расшифровка)=Тип("Структура") Тогда
					МассивРасшифровокДляОбработки.Добавить(ПолеТабличногоДокументаУправлениеПериодами.Область(СтрУ,КолУ,СтрУ,КолУ).Расшифровка);
				КонецЕсли;	
				Если  ТипЗнч(ПолеТабличногоДокументаУправлениеПериодами.Область(СтрУ,КолУ,СтрУ,КолУ).Расшифровка)=Тип("СправочникСсылка.Периоды") Тогда
					МассивРасшифровокДляОбработки.Добавить(Новый Структура("Период",ПолеТабличногоДокументаУправлениеПериодами.Область(СтрУ,КолУ,СтрУ,КолУ).Расшифровка));
				КонецЕсли;	
	
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
		
	СтруктураПараметров = ПодготовитьПараметрыАктуализацииБюджетов(МассивРасшифровокДляОбработки);
	
	Если СтруктураПараметров = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Необходимо выделить область с заголовками периодов (для актуализации по всем организациям) или с организациями и периодами '"));
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("Обработка.УправлениеПериодомСценарияВГрафическомВиде.Форма.ФормаАктуализацииБюджетов",СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыАктуализацииБюджетов(МассивРасшифровокДляОбработки)
		
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ДоступныеПериоды",ДоступныеПериоды);
	СтруктураПолей.Вставить("ГраницаАктуализации",ТекущийДокументУправленияПериодом.ГраницаАктуализации);
	СтруктураПолей.Вставить("ТекущийДокументУправленияПериодом",ТекущийДокументУправленияПериодом);

	
	ОрганизацииДляАктуализации = Новый ТаблицаЗначений;
    ОрганизацииДляАктуализации.Колонки.Добавить("Организация");	
	ОрганизацииДляАктуализации.Колонки.Добавить("ПериодФакт");
	ОрганизацииДляАктуализации.Колонки.Добавить("ПериодПлан");
	ОрганизацииДляАктуализации.Колонки.Добавить("ПризнакИспользования");
	
	ВыбранныеПериоды = Новый Массив;
	
	УОППериодСценарияОкончание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийДокументУправленияПериодом, "ПериодСценарияОкончание");
				
	Для Каждого мРасшифровка Из МассивРасшифровокДляОбработки Цикл	
		
		Если мРасшифровка.Свойство("Организация") Тогда
			нСтр = ОрганизацииДляАктуализации.Добавить();
			нСтр.Организация 			= мРасшифровка.Организация;
			нСтр.ПериодФакт 			= ТекущийДокументУправленияПериодом.ГраницаАктуализации;
			нСтр.ПериодПлан 			= УОППериодСценарияОкончание;
			нСтр.ПризнакИспользования 	= Истина;
		КонецЕсли;	
		
		Если  мРасшифровка.Свойство("Период") Тогда
            ВыбранныеПериоды.Добавить(мРасшифровка.Период);
		КонецЕсли;
		
	КонецЦикла;	
	
	Если  ВыбранныеПериоды.Количество()=0 Тогда	
		Возврат Неопределено;		
	КонецЕсли;	
	
	//Если выбрали только периоды, то добавляем все организации
	Если ОрганизацииДляАктуализации.Количество()=0 Тогда	
		Для Каждого Организация Из ДоступныеОрганизации Цикл
			нСтр = ОрганизацииДляАктуализации.Добавить();
			нСтр.Организация 			= Организация.Значение;
			нСтр.ПериодФакт 			= ТекущийДокументУправленияПериодом.ГраницаАктуализации;
			нСтр.ПериодПлан 			= УОППериодСценарияОкончание;
			нСтр.ПризнакИспользования 	= Истина;	
		КонецЦикла;	
	КонецЕсли;	
	
	ОрганизацииДляАктуализацииАдрес = ПоместитьВоВременноеХранилище(ОрганизацииДляАктуализации,ЭтаФорма.УникальныйИдентификатор);
		
	СтруктураПолей.Вставить("ВыбранныеПериоды",ВыбранныеПериоды);
	СтруктураПолей.Вставить("ПериодОкончания", УОППериодСценарияОкончание);
	СтруктураПолей.Вставить("ОрганизацииДляАктуализацииАдрес",ОрганизацииДляАктуализацииАдрес);
	СтруктураПолей.Вставить("Сценарий",Объект.Сценарий);
	
	Возврат СтруктураПолей;
		
КонецФункции	

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьПанельПериодов" Тогда
		 ОбновитьПанель();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаУправлениеПериодамиВыбор(Элемент, Область, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры
