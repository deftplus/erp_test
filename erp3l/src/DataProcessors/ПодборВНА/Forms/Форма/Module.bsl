
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПериодОтчета = ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(Параметры.Дата, Перечисления.Периодичность.Год, 0);
	
	РеквизитыУП = МСФОВызовСервераУХ.ОсновныеРеквизитыУП(Параметры.Организация, Параметры.Дата, Параметры.Сценарий);
	ИспользуютсяТК = Не РеквизитыУП.ФормироватьПроводкиМСФО;
	ВидОтчетаОСВ = Справочники.ВидыОтчетов.ПолучитьВидОтчетаОСВ(РеквизитыУП.ПланСчетовМСФО);
	
	АктивыТрансляция.Параметры.УстановитьЗначениеПараметра("Использовать", 	Истина);
	АктивыТрансляция.Параметры.УстановитьЗначениеПараметра("Организация",	Параметры.Организация);
	АктивыТрансляция.Параметры.УстановитьЗначениеПараметра("Сценарий", 		Параметры.Сценарий);	
	АктивыТрансляция.Параметры.УстановитьЗначениеПараметра("Период", 		Параметры.Дата);
	АктивыТрансляция.Параметры.УстановитьЗначениеПараметра("ПланСчетовМСФО", РеквизитыУП.ПланСчетовМСФО);
	
	АктивыТрансформация.Параметры.УстановитьЗначениеПараметра("Использовать", 	ИспользуютсяТК);	
	АктивыТрансформация.Параметры.УстановитьЗначениеПараметра("Организация",	Параметры.Организация);
	АктивыТрансформация.Параметры.УстановитьЗначениеПараметра("Сценарий", 		Параметры.Сценарий);
	АктивыТрансформация.Параметры.УстановитьЗначениеПараметра("ПериодОтчета", 	ПериодОтчета);
	АктивыТрансформация.Параметры.УстановитьЗначениеПараметра("ВидОтчетаОСВ", 	ВидОтчетаОСВ);
	АктивыТрансформация.Параметры.УстановитьЗначениеПараметра("ТипыВНА", 		УчетМСФОПовтИспУХ.ПолучитьОписаниеТиповВНА().Типы());
		
	РегистрПараллельныйУчет.Параметры.УстановитьЗначениеПараметра("Использовать", 	Не ИспользуютсяТК);	
	РегистрПараллельныйУчет.Параметры.УстановитьЗначениеПараметра("Организация",	Параметры.Организация);
	РегистрПараллельныйУчет.Параметры.УстановитьЗначениеПараметра("Сценарий", 		Параметры.Сценарий);
	РегистрПараллельныйУчет.Параметры.УстановитьЗначениеПараметра("Период", 		Параметры.Дата);
	
	Если Параметры.Свойство("Ссылка") И (ТипЗнч(Параметры.Ссылка) = Тип("ДокументСсылка.ПереоценкаВНАМСФО")) Тогда	
		МодельПереоценки = ПредопределенноеЗначение("Перечисление.МоделиУчетаВНАМСФО.УчетПоПереоцененнойСтоимости");
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(РегистрПараллельныйУчет, "ПараметрыУчетаВНА.МодельУчетаВНА", МодельПереоценки);
	КонецЕсли;
	
	//Элементы.ГруппаАктивыТрансляция.Видимость = Не ИспользуютсяТК; 
	//Элементы.ГруппаАктивыТрансформация.Видимость = ИспользуютсяТК;
			
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	АдресВНА = ПеренестиВДокументНаСервере();
	ОповеститьОВыборе(АдресВНА);
	//Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрПараллельныйУчетВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ЗаполнитьЗначенияСвойств(Корзина.Добавить(), Элементы.РегистрПараллельныйУчет.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТрансляцияАктивыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	НоваяСтрока = Корзина.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Элементы.ТрансляцияАктивы.ТекущиеДанные);
	НоваяСтрока.ВНА = Элементы.ТрансляцияАктивы.ТекущиеДанные.Актив;
КонецПроцедуры

&НаКлиенте
Процедура АктивыТрансформацияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ЗаполнитьЗначенияСвойств(Корзина.Добавить(), Элементы.АктивыТрансформация.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзКорзины(Команда)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Корзина.Удалить(ТекущаяСтрока);
	 	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

&НаСервере
Функция ПеренестиВДокументНаСервере()
	Возврат ПоместитьВоВременноеХранилище(Корзина.Выгрузить(), УникальныйИдентификатор);	
КонецФункции

#КонецОбласти