&НаКлиенте
Перем ВыполняетсяЗакрытие;

// Возвращает таблицу значений, содержащую данные о потребности в номенклатуре в периоде
// между НачалоПериодаВход и КонецПериодаВход по организации ОрганизацияВход для места поставки
// МестоПоставкиВход. Когда один из параметров не задан - отбор по нему не производится.
&НаСервереБезКонтекста
Функция ПолучитьТаблицуПотребностей(НачалоПериодаВход = Неопределено, КонецПериодаВход = Неопределено, ОрганизацияВход = Неопределено, МестоПоставкиВход = Неопределено, НоменклатураВход = Неопределено, ТоварнаяКатегорияВход = Неопределено)
	РезультатФункции = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПотребностиВНоменклатуре.Приоритет КАК Приоритет,
		|	ПотребностиВНоменклатуре.Номенклатура КАК Номенклатура,
		|	ПотребностиВНоменклатуре.ПериодПотребности КАК ПериодПотребности,
		|	ПотребностиВНоменклатуре.Организация КАК Организация,
		|	ПотребностиВНоменклатуре.МестоПоставки КАК МестоПоставки,
		|	ПотребностиВНоменклатуре.Проект КАК Проект,
		|	ПотребностиВНоменклатуре.Менеджер КАК Менеджер,
		|	ПотребностиВНоменклатуре.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ПотребностиВНоменклатуре.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(ПотребностиВНоменклатуре.КоличествоПотребность) КАК КоличествоПотребностьОборот,
		|	СУММА(ПотребностиВНоменклатуре.СуммаПотребность) КАК СуммаПотребностьОборот,
		|	СУММА(ПотребностиВНоменклатуре.КоличествоВОбеспечении) КАК КоличествоВОбеспеченииОборот,
		|	СУММА(ПотребностиВНоменклатуре.СуммаВОбеспечении) КАК СуммаВОбеспеченииОборот,
		|	СУММА(ПотребностиВНоменклатуре.КоличествоВнеПлана) КАК КоличествоВнеПланаОборот,
		|	СУММА(ПотребностиВНоменклатуре.СуммаВнеПлана) КАК СуммаВнеПланаОборот,
		|	ПотребностиВНоменклатуре.Характеристика КАК Характеристика,
		|	ПотребностиВНоменклатуре.Коэффициент КАК Коэффициент,
		|	ПотребностиВНоменклатуре.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ПотребностиВНоменклатуре.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ПотребностиВНоменклатуре.Номенклатура.ТоварнаяКатегория
		|		КОГДА ПотребностиВНоменклатуре.Номенклатура ССЫЛКА Справочник.ТоварныеКатегории
		|			ТОГДА ПотребностиВНоменклатуре.Номенклатура
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)
		|	КОНЕЦ КАК ТоварнаяКатегория
		|ПОМЕСТИТЬ ВТ_ДанныеРегистра
		|ИЗ
		|	РегистрНакопления.ПотребностиВНоменклатуре КАК ПотребностиВНоменклатуре
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &Организация = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ПотребностиВНоменклатуре.Организация В ИЕРАРХИИ (&Организация)
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &МестоПоставки = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ПотребностиВНоменклатуре.МестоПоставки = &МестоПоставки
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ДатаНачала = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ПотребностиВНоменклатуре.ПериодПотребности.ДатаНачала >= &ДатаНачала
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ДатаОкончания = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ПотребностиВНоменклатуре.ПериодПотребности.ДатаОкончания <= &ДатаОкончания
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА НЕ &ЕстьНоменклатура
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ПотребностиВНоменклатуре.Номенклатура В (&Номенклатура)
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ПотребностиВНоменклатуре.Приоритет,
		|	ПотребностиВНоменклатуре.Номенклатура,
		|	ПотребностиВНоменклатуре.ПериодПотребности,
		|	ПотребностиВНоменклатуре.Организация,
		|	ПотребностиВНоменклатуре.МестоПоставки,
		|	ПотребностиВНоменклатуре.Проект,
		|	ПотребностиВНоменклатуре.Менеджер,
		|	ПотребностиВНоменклатуре.ДоговорСПокупателем,
		|	ПотребностиВНоменклатуре.СтавкаНДС,
		|	ПотребностиВНоменклатуре.Характеристика,
		|	ПотребностиВНоменклатуре.Коэффициент,
		|	ПотребностиВНоменклатуре.ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ПотребностиВНоменклатуре.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ПотребностиВНоменклатуре.Номенклатура.ТоварнаяКатегория
		|		КОГДА ПотребностиВНоменклатуре.Номенклатура ССЫЛКА Справочник.ТоварныеКатегории
		|			ТОГДА ПотребностиВНоменклатуре.Номенклатура
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ДанныеРегистра.Номенклатура КАК Номенклатура,
		|	ВТ_ДанныеРегистра.ПериодПотребности КАК ПериодПотребности,
		|	ВТ_ДанныеРегистра.Организация КАК Организация,
		|	ВТ_ДанныеРегистра.МестоПоставки КАК МестоПоставки,
		|	СУММА(ВТ_ДанныеРегистра.КоличествоПотребностьОборот) КАК КоличествоПотребностьОборот,
		|	СУММА(ВТ_ДанныеРегистра.СуммаПотребностьОборот) КАК СуммаПотребностьОборот,
		|	СУММА(ВТ_ДанныеРегистра.КоличествоВОбеспеченииОборот) КАК КоличествоВОбеспеченииОборот,
		|	СУММА(ВТ_ДанныеРегистра.СуммаВОбеспеченииОборот) КАК СуммаВОбеспеченииОборот,
		|	СУММА(ВТ_ДанныеРегистра.КоличествоВнеПланаОборот) КАК КоличествоВнеПланаОборот,
		|	СУММА(ВТ_ДанныеРегистра.СуммаВнеПланаОборот) КАК СуммаВнеПланаОборот,
		|	СУММА(ВТ_ДанныеРегистра.КоличествоПотребностьОборот - ВТ_ДанныеРегистра.КоличествоВОбеспеченииОборот) КАК КоличествоПотребностьОстаток,
		|	СУММА(ВТ_ДанныеРегистра.СуммаПотребностьОборот - ВТ_ДанныеРегистра.СуммаВОбеспеченииОборот) КАК СуммаПотребностьОстаток,
		|	ВТ_ДанныеРегистра.Приоритет КАК Приоритет,
		|	ВТ_ДанныеРегистра.Проект КАК Проект,
		|	ВТ_ДанныеРегистра.Менеджер КАК Менеджер,
		|	ВТ_ДанныеРегистра.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ВТ_ДанныеРегистра.СтавкаНДС КАК СтавкаНДС,
		|	ВТ_ДанныеРегистра.Характеристика КАК Характеристика,
		|	ВТ_ДанныеРегистра.Коэффициент КАК Коэффициент,
		|	ВТ_ДанныеРегистра.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВТ_ДанныеРегистра.ТоварнаяКатегория КАК ТоварнаяКатегория
		|ПОМЕСТИТЬ ВТ_Остатки
		|ИЗ
		|	ВТ_ДанныеРегистра КАК ВТ_ДанныеРегистра
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДанныеРегистра.Номенклатура,
		|	ВТ_ДанныеРегистра.ПериодПотребности,
		|	ВТ_ДанныеРегистра.Организация,
		|	ВТ_ДанныеРегистра.МестоПоставки,
		|	ВТ_ДанныеРегистра.Приоритет,
		|	ВТ_ДанныеРегистра.Проект,
		|	ВТ_ДанныеРегистра.Менеджер,
		|	ВТ_ДанныеРегистра.ДоговорСПокупателем,
		|	ВТ_ДанныеРегистра.СтавкаНДС,
		|	ВТ_ДанныеРегистра.Характеристика,
		|	ВТ_ДанныеРегистра.Коэффициент,
		|	ВТ_ДанныеРегистра.ЕдиницаИзмерения,
		|	ВТ_ДанныеРегистра.ТоварнаяКатегория
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Остатки.Номенклатура КАК Номенклатура,
		|	ВТ_Остатки.ПериодПотребности КАК Период,
		|	ВТ_Остатки.Организация КАК Организация,
		|	ВТ_Остатки.МестоПоставки КАК МестоПоставки,
		|	ВТ_Остатки.КоличествоПотребностьОборот КАК КоличествоПотребностьОборот,
		|	ВТ_Остатки.СуммаПотребностьОборот КАК СуммаПотребностьОборот,
		|	ВТ_Остатки.КоличествоВОбеспеченииОборот КАК КоличествоВОбеспеченииОборот,
		|	ВТ_Остатки.СуммаВОбеспеченииОборот КАК СуммаВОбеспеченииОборот,
		|	ВТ_Остатки.КоличествоВнеПланаОборот КАК КоличествоВнеПланаОборот,
		|	ВТ_Остатки.СуммаВнеПланаОборот КАК СуммаВнеПланаОборот,
		|	ВТ_Остатки.КоличествоПотребностьОстаток КАК Количество,
		|	ВТ_Остатки.СуммаПотребностьОстаток КАК Сумма,
		|	ВТ_Остатки.Приоритет КАК Приоритет,
		|	ВТ_Остатки.Проект КАК Проект,
		|	ВТ_Остатки.Менеджер КАК Менеджер,
		|	ВТ_Остатки.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ВТ_Остатки.СтавкаНДС КАК СтавкаНДС,
		|	ВТ_Остатки.Характеристика КАК Характеристика,
		|	ВТ_Остатки.Коэффициент КАК Коэффициент,
		|	ВТ_Остатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ВТ_Остатки.КоличествоПотребностьОстаток = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВТ_Остатки.СуммаПотребностьОстаток / ВТ_Остатки.КоличествоПотребностьОстаток
		|	КОНЕЦ КАК Цена,
		|	ВТ_Остатки.ТоварнаяКатегория КАК ТоварнаяКатегория
		|ИЗ
		|	ВТ_Остатки КАК ВТ_Остатки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВТ_Остатки.Номенклатура ССЫЛКА Справочник.ТоварныеКатегории
		|				ТОГДА ВТ_Остатки.КоличествоПотребностьОстаток > 0
		|						ИЛИ ВТ_Остатки.СуммаПотребностьОстаток > 0
		|			ИНАЧЕ ВТ_Остатки.КоличествоПотребностьОстаток > 0
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ТоварнаяКатегория = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВТ_Остатки.ТоварнаяКатегория = &ТоварнаяКатегория
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_Остатки.ПериодПотребности.ДатаНачала,
		|	ВТ_Остатки.Организация,
		|	ВТ_Остатки.Номенклатура";
	Если ЗначениеЗаполнено(НачалоПериодаВход) Тогда
		Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(НачалоПериодаВход));
	Иначе
		Запрос.УстановитьПараметр("ДатаНачала", Неопределено);
	КонецЕсли;
	Если ЗначениеЗаполнено(КонецПериодаВход) Тогда
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КонецПериодаВход));
	Иначе
		Запрос.УстановитьПараметр("ДатаОкончания", Неопределено);
	КонецЕсли;	
	Если ЗначениеЗаполнено(МестоПоставкиВход) Тогда
		Запрос.УстановитьПараметр("МестоПоставки", МестоПоставкиВход);
	Иначе
		Запрос.УстановитьПараметр("МестоПоставки", Неопределено);
	КонецЕсли;	
	Если ТипЗнч(НоменклатураВход) = Тип("СписокЗначений") Тогда
		Если НоменклатураВход.Количество() > 0 Тогда
			Запрос.УстановитьПараметр("Номенклатура", НоменклатураВход);
			Запрос.УстановитьПараметр("ЕстьНоменклатура", Истина);
		Иначе
			Запрос.УстановитьПараметр("Номенклатура", Новый СписокЗначений);
			Запрос.УстановитьПараметр("ЕстьНоменклатура", Ложь);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(НоменклатураВход) Тогда
			Запрос.УстановитьПараметр("Номенклатура", НоменклатураВход);
			Запрос.УстановитьПараметр("ЕстьНоменклатура", Истина);
		Иначе
			Запрос.УстановитьПараметр("Номенклатура", Новый СписокЗначений);
			Запрос.УстановитьПараметр("ЕстьНоменклатура", Ложь);
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОрганизацияВход) Тогда
		Запрос.УстановитьПараметр("Организация", ОрганизацияВход);
	Иначе
		Запрос.УстановитьПараметр("Организация", Неопределено);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТоварнаяКатегорияВход) Тогда
		Запрос.УстановитьПараметр("ТоварнаяКатегория", ТоварнаяКатегорияВход);
	Иначе
		Запрос.УстановитьПараметр("ТоварнаяКатегория", Неопределено);
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
КонецФункции		// ПолучитьТаблицуПотребностей()

// Возвращает строку свертки по всем измерениям.
&НаСервереБезКонтекста
Функция ПолучитьСтрокуСвертки()
	РезультатФункции = "Номенклатура, Период, Приоритет, Характеристика, Организация, МестоПоставки, Проект, Менеджер, ДоговорСПокупателем, СтавкаНДС, Коэффициент, ЕдиницаИзмерения, Цена, ТоварнаяКатегория";
	Возврат РезультатФункции;	
КонецФункции		// ПолучитьСтрокуСвертки()	

// Возвращает таблицу, в которой потребность из таблицы ТаблицаПотребностиВход
// скорректирована на данные из таблицы ТаблицаРазмещениеВход.
&НаСервереБезКонтекста
Функция СкорректироватьТаблицуПотребностиНаРазмещение(ТаблицаПотребностиВход, ТаблицаРазмещениеВход)
	РезультатФункции = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ_Потребность.Номенклатура КАК Номенклатура,
		|	ТЗ_Потребность.Период КАК Период,
		|	ТЗ_Потребность.Сумма КАК Сумма,
		|	ТЗ_Потребность.Количество КАК Количество,
		|	ТЗ_Потребность.Приоритет КАК Приоритет,
		|	ТЗ_Потребность.Характеристика КАК Характеристика,
		|	ТЗ_Потребность.Организация КАК Организация,
		|	ТЗ_Потребность.МестоПоставки КАК МестоПоставки,
		|	ТЗ_Потребность.Проект КАК Проект,
		|	ТЗ_Потребность.Менеджер КАК Менеджер,
		|	ТЗ_Потребность.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ТЗ_Потребность.СтавкаНДС КАК СтавкаНДС,
		|	ТЗ_Потребность.Коэффициент КАК Коэффициент,
		|	ТЗ_Потребность.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТЗ_Потребность.Цена КАК Цена,
		|	ТЗ_Потребность.ТоварнаяКатегория КАК ТоварнаяКатегория
		|ПОМЕСТИТЬ ВТ_Потребность
		|ИЗ
		|	&ТЗ_Потребность КАК ТЗ_Потребность
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗ_Размещение.Номенклатура КАК Номенклатура,
		|	ТЗ_Размещение.Период КАК Период,
		|	ТЗ_Размещение.Количество КАК Количество,
		|	ТЗ_Размещение.Сумма КАК Сумма,
		|	ТЗ_Размещение.Приоритет КАК Приоритет,
		|	ТЗ_Размещение.Характеристика КАК Характеристика,
		|	ТЗ_Размещение.Организация КАК Организация,
		|	ТЗ_Размещение.МестоПоставки КАК МестоПоставки,
		|	ТЗ_Размещение.Проект КАК Проект,
		|	ТЗ_Размещение.Менеджер КАК Менеджер,
		|	ТЗ_Размещение.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ТЗ_Размещение.СтавкаНДС КАК СтавкаНДС,
		|	ТЗ_Размещение.Коэффициент КАК Коэффициент,
		|	ТЗ_Размещение.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ПОМЕСТИТЬ ВТ_Размещение
		|ИЗ
		|	&ТЗ_Размещение КАК ТЗ_Размещение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Потребность.Номенклатура КАК Номенклатура,
		|	ВТ_Потребность.Период КАК Период,
		|	ВТ_Потребность.Сумма КАК СуммаПотребность,
		|	ВТ_Потребность.Количество КАК КоличествоПотребность,
		|	ЕСТЬNULL(ВТ_Размещение.Количество, 0) КАК КоличествоРазмещение,
		|	ЕСТЬNULL(ВТ_Размещение.Сумма, 0) КАК СуммаРазмещение,
		|	ВТ_Потребность.Количество - ЕСТЬNULL(ВТ_Размещение.Количество, 0) КАК КоличествоОстаток,
		|	ВТ_Потребность.Сумма - ЕСТЬNULL(ВТ_Размещение.Сумма, 0) КАК СуммаОстаток,
		|	ВТ_Потребность.Приоритет КАК Приоритет,
		|	ВТ_Потребность.Организация КАК Организация,
		|	ВТ_Потребность.Характеристика КАК Характеристика,
		|	ВТ_Потребность.МестоПоставки КАК МестоПоставки,
		|	ВТ_Потребность.Проект КАК Проект,
		|	ВТ_Потребность.Менеджер КАК Менеджер,
		|	ВТ_Потребность.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ВТ_Потребность.СтавкаНДС КАК СтавкаНДС,
		|	ВТ_Потребность.Коэффициент КАК Коэффициент,
		|	ВТ_Потребность.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВТ_Потребность.Цена КАК Цена,
		|	ВТ_Потребность.ТоварнаяКатегория КАК ТоварнаяКатегория
		|ПОМЕСТИТЬ ВТ_Остатки
		|ИЗ
		|	ВТ_Потребность КАК ВТ_Потребность
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Размещение КАК ВТ_Размещение
		|		ПО ВТ_Потребность.Номенклатура = ВТ_Размещение.Номенклатура
		|			И ВТ_Потребность.Период = ВТ_Размещение.Период
		|			И ВТ_Потребность.Приоритет = ВТ_Размещение.Приоритет
		|			И ВТ_Потребность.Характеристика = ВТ_Размещение.Характеристика
		|			И ВТ_Потребность.Организация = ВТ_Размещение.Организация
		|			И ВТ_Потребность.МестоПоставки = ВТ_Размещение.МестоПоставки
		|			И ВТ_Потребность.Проект = ВТ_Размещение.Проект
		|			И ВТ_Потребность.Менеджер = ВТ_Размещение.Менеджер
		|			И ВТ_Потребность.ДоговорСПокупателем = ВТ_Размещение.ДоговорСПокупателем
		|			И ВТ_Потребность.СтавкаНДС = ВТ_Размещение.СтавкаНДС
		|			И ВТ_Потребность.Коэффициент = ВТ_Размещение.Коэффициент
		|			И ВТ_Потребность.ЕдиницаИзмерения = ВТ_Размещение.ЕдиницаИзмерения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Остатки.Номенклатура КАК Номенклатура,
		|	ВТ_Остатки.Период КАК Период,
		|	ВТ_Остатки.СуммаПотребность КАК СуммаПотребность,
		|	ВТ_Остатки.КоличествоПотребность КАК КоличествоПотребность,
		|	ВТ_Остатки.КоличествоРазмещение КАК КоличествоРазмещение,
		|	ВТ_Остатки.СуммаРазмещение КАК СуммаРазмещение,
		|	ВТ_Остатки.КоличествоОстаток КАК Количество,
		|	ВТ_Остатки.СуммаОстаток КАК Сумма,
		|	ВТ_Остатки.Приоритет КАК Приоритет,
		|	ВТ_Остатки.Организация КАК Организация,
		|	ВТ_Остатки.Характеристика КАК Характеристика,
		|	ВТ_Остатки.МестоПоставки КАК МестоПоставки,
		|	ВТ_Остатки.Проект КАК Проект,
		|	ВТ_Остатки.Менеджер КАК Менеджер,
		|	ВТ_Остатки.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ВТ_Остатки.СтавкаНДС КАК СтавкаНДС,
		|	ВТ_Остатки.Коэффициент КАК Коэффициент,
		|	ВТ_Остатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВТ_Остатки.Цена КАК Цена,
		|	ВТ_Остатки.ТоварнаяКатегория КАК ТоварнаяКатегория
		|ИЗ
		|	ВТ_Остатки КАК ВТ_Остатки
		|ГДЕ
		|	(ВТ_Остатки.КоличествоОстаток > 0
		|			ИЛИ ВТ_Остатки.СуммаОстаток > 0)";
	Запрос.УстановитьПараметр("ТЗ_Потребность", ТаблицаПотребностиВход);
	Запрос.УстановитьПараметр("ТЗ_Размещение", ТаблицаРазмещениеВход);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
КонецФункции		// СкорректироватьТаблицуПотребностиНаРазмещение()

// Переносит данные по размещению из ДанныеРазмещенияВход в строку таблицы СтрокаТаблицыИзм.
&НаСервереБезКонтекста
Процедура ПеренестиДанныеРазмещенияВСтрокуТаблицы(ДанныеРазмещенияВход, СтрокаТаблицыИзм)
	СтрокаТаблицыИзм.ДоговорСПокупателем	 = ДанныеРазмещенияВход.ДоговорСПокупателем;
	СтрокаТаблицыИзм.Количество				 = ДанныеРазмещенияВход.Количество;
	СтрокаТаблицыИзм.Менеджер				 = ДанныеРазмещенияВход.Менеджер;
	СтрокаТаблицыИзм.МестоПоставки			 = ДанныеРазмещенияВход.МестоПоставки;
	СтрокаТаблицыИзм.Номенклатура			 = ДанныеРазмещенияВход.Номенклатура;
	СтрокаТаблицыИзм.Организация			 = ДанныеРазмещенияВход.Организация;
	СтрокаТаблицыИзм.Период					 = ДанныеРазмещенияВход.Период;
	СтрокаТаблицыИзм.Приоритет				 = ДанныеРазмещенияВход.Приоритет;
	СтрокаТаблицыИзм.Проект					 = ДанныеРазмещенияВход.Проект;
	СтрокаТаблицыИзм.СтавкаНДС				 = ДанныеРазмещенияВход.СтавкаНДС;
	СтрокаТаблицыИзм.Сумма					 = ДанныеРазмещенияВход.Сумма;
	СтрокаТаблицыИзм.Характеристика			 = ДанныеРазмещенияВход.Характеристика;
	СтрокаТаблицыИзм.Коэффициент			 = ДанныеРазмещенияВход.Коэффициент;
	СтрокаТаблицыИзм.ЕдиницаИзмерения		 = ДанныеРазмещенияВход.ЕдиницаИзмерения;
	СтрокаТаблицыИзм.Цена					 = ДанныеРазмещенияВход.Цена;
	СтрокаТаблицыИзм.ТоварнаяКатегория		 = ДанныеРазмещенияВход.ТоварнаяКатегория;
КонецПроцедуры		// ПеренестиДанныеРазмещенияВСтрокуТаблицы()

// Возвращает структуру, куда перенесены данные потребности из ДанныеРазмещения.
&НаКлиентеНаСервереБезКонтекста
Функция ПеренестиДанныеРазмещениеВСтруктуру(ДанныеРазмещения)
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Номенклатура",			 ДанныеРазмещения.Номенклатура);
	РезультатФункции.Вставить("Период",					 ДанныеРазмещения.Период);
	РезультатФункции.Вставить("Приоритет",				 ДанныеРазмещения.Приоритет);
	РезультатФункции.Вставить("Характеристика",			 ДанныеРазмещения.Характеристика);
	РезультатФункции.Вставить("Организация",			 ДанныеРазмещения.Организация);
	РезультатФункции.Вставить("МестоПоставки",			 ДанныеРазмещения.МестоПоставки);
	РезультатФункции.Вставить("Проект",					 ДанныеРазмещения.Проект);
	РезультатФункции.Вставить("Менеджер",				 ДанныеРазмещения.Менеджер);
	РезультатФункции.Вставить("ДоговорСПокупателем",	 ДанныеРазмещения.ДоговорСПокупателем);
	РезультатФункции.Вставить("СтавкаНДС",				 ДанныеРазмещения.СтавкаНДС);
	РезультатФункции.Вставить("Коэффициент",			 ДанныеРазмещения.Коэффициент);
	РезультатФункции.Вставить("ЕдиницаИзмерения",		 ДанныеРазмещения.ЕдиницаИзмерения);
	РезультатФункции.Вставить("Цена",					 ДанныеРазмещения.Цена);
	Возврат РезультатФункции;	
КонецФункции		// ПеренестиДанныеРазмещениеВСтруктуру()

// Отображает данные по потребностям на форме. Когда параметр ОбновитьПотребностьВход равен Истина,
// данные будут снова загружены из базы.
&НаСервере
Процедура СчитатьДанныеПотребности(НачалоПериодаВход = Неопределено, КонецПериодаВход = Неопределено, ОрганизацияВход = Неопределено, МестоПоставкиВход = Неопределено, НоменклатураВход = Неопределено, ТоварнаяКатегорияВход = Неопределено, ОбновитьПотребностьВход = Ложь)
	// Получение данных по потребности.
	Если ОбновитьПотребностьВход Тогда
		ТоварнаяКатегорияРабочая = Неопределено;
		Если флРазделятьНоменклатуруПоКатегорийнымМенеджерам Тогда
			ТоварнаяКатегорияРабочая = ТоварнаяКатегорияОтбор;
		Иначе
			ТоварнаяКатегорияРабочая = Неопределено;
		КонецЕсли;
		НоваяТаблицаПотребности = ПолучитьТаблицуПотребностей(НачалоПериодаВход, КонецПериодаВход, ОрганизацияВход, МестоПоставкиВход, НоменклатураВход, ТоварнаяКатегорияРабочая);
	Иначе
		НоваяТаблицаПотребности = ТаблицаПотребности.Выгрузить();
	КонецЕсли;
	ВыгрузкаРазмещение = ТаблицаРазмещение.Выгрузить();
	// Корректировка потребности на величину уже размещенных.
	НоваяТаблицаПотребности = СкорректироватьТаблицуПотребностиНаРазмещение(НоваяТаблицаПотребности, ВыгрузкаРазмещение);
	// Вывод в таблицу.
	ТаблицаПотребности.Очистить();
	Для Каждого ТекНоваяТаблицаПотребности Из НоваяТаблицаПотребности Цикл
		НоваяСтрока = ТаблицаПотребности.Добавить();
		ПеренестиДанныеРазмещенияВСтрокуТаблицы(ТекНоваяТаблицаПотребности, НоваяСтрока);
		НоваяСтрока.Использование = Ложь;
	КонецЦикла;	
КонецПроцедуры		// СчитатьДанныеПотребности()

// Возвращает текстовое представление режима отображения договоров Все договоры.
&НаКлиентеНаСервереБезКонтекста
Функция РежимОтображенияВсеДоговорыПредставление()
	РезультатФункции = "ВсеДоговоры";
	Возврат РезультатФункции;	
КонецФункции		// РежимОтображенияВсеДоговорыПредставление()	

// Возвращает текстовое представление режима отображения договоров Только пустые.
&НаКлиентеНаСервереБезКонтекста
Функция РежимОтображенияТолькоПустыеПредставление()
	РезультатФункции = "ТолькоПустые";
	Возврат РезультатФункции;	
КонецФункции		// РежимОтображенияТолькоПустыеПредставление()	

// Возвращает текстовое представление режима отображения договоров С выбранной номенклатурой.
&НаКлиентеНаСервереБезКонтекста
Функция РежимОтображенияСВыбраннойНоменклатуройПредставление()
	РезультатФункции = "СВыбраннойНоменклатурой";
	Возврат РезультатФункции;	
КонецФункции		// РежимОтображенияСВыбраннойНоменклатуройПредставление()	

// Отбирает в таблице договоров ТаблицаВход строки согласно режиму отображения
// договоров РежимОтображенияВход.
&НаСервереБезКонтекста
Функция ОтобратьТаблицуДоговоров(ТаблицаВход, РежимОтображенияВход)
	РезультатФункции = ТаблицаВход.СкопироватьКолонки();
	Для Каждого ТекТаблицаВход Из ТаблицаВход Цикл
		Если РежимОтображенияВход = РежимОтображенияВсеДоговорыПредставление() Тогда
			// Добавляем строку безусловно.
			НоваяСтрока = РезультатФункции.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекТаблицаВход);
		ИначеЕсли РежимОтображенияВход = РежимОтображенияТолькоПустыеПредставление() Тогда
			// Выберем те строки, у которых общее количество номенклатуры нулевое.
			Если ТекТаблицаВход.КоличествоНоменклатуры = 0 Тогда
				НоваяСтрока = РезультатФункции.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекТаблицаВход);
			Иначе
				// Пропускаем.
			КонецЕсли;
		ИначеЕсли РежимОтображенияВход = РежимОтображенияСВыбраннойНоменклатуройПредставление() Тогда
			// Выберем те строки, у которых ненулевое количество выбранной номенклатуры.
			Если ТекТаблицаВход.КоличествоВыбраннойНоменклатуры <> 0 Тогда
				НоваяСтрока = РезультатФункции.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекТаблицаВход);
			Иначе
				// Пропускаем.
			КонецЕсли;
		ИначеЕсли Не ЗначениеЗаполнено(РежимОтображенияВход) Тогда
			// Пустой вариант. Отбираем все.
			НоваяСтрока = РезультатФункции.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекТаблицаВход);
		Иначе	
			// Неизвестный вариант.
			ТекстСообщения = НСтр("ru = 'Неизвестный вариант отображения договоров: %РежимОтображения%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РежимОтображения%", Строка(РежимОтображенияВход));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		// ОтобратьТаблицуДоговоров()

// Возвращает таблицу заключенных договоров в периоде между НачалоПериодаВход и КонецПериодаВход
// по организации ОрганизацияВход. Когда параметр не установлен - отбор по нему не производится.
&НаСервереБезКонтекста
Функция ПолучитьТаблицуДоговоров(НачалоПериодаВход = Неопределено, КонецПериодаВход = Неопределено, ОрганизацияВход = Неопределено, НоменклатураОтборВход = Неопределено, ТоварнаяКатегорияОтборВход = Неопределено, РежимОтображенияВход = "")
	РезультатФункции = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВерсияСоглашенияКоммерческийДоговор.Ссылка КАК ВерсияСоглашения,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВерсияСоглашенияКоммерческийДоговорНоменклатура.Номенклатура) КАК КоличествоНоменклатура
		|ПОМЕСТИТЬ ВТ_КоличествоНоменклатура
		|ИЗ
		|	Документ.ВерсияСоглашенияКоммерческийДоговор КАК ВерсияСоглашенияКоммерческийДоговор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияКоммерческийДоговор.Номенклатура КАК ВерсияСоглашенияКоммерческийДоговорНоменклатура
		|		ПО (ВерсияСоглашенияКоммерческийДоговорНоменклатура.Ссылка = ВерсияСоглашенияКоммерческийДоговор.Ссылка)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НЕ &ЕстьНоменклатура
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВерсияСоглашенияКоммерческийДоговорНоменклатура.Номенклатура В (&Номенклатура)
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ТоварнаяКатегория = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ВерсияСоглашенияКоммерческийДоговорНоменклатура.Номенклатура ССЫЛКА Справочник.Номенклатура
		|						ТОГДА ВерсияСоглашенияКоммерческийДоговорНоменклатура.Номенклатура.ТоварнаяКатегория
		|					КОГДА ВерсияСоглашенияКоммерческийДоговорНоменклатура.Номенклатура ССЫЛКА Справочник.ТоварныеКатегории
		|						ТОГДА ВерсияСоглашенияКоммерческийДоговорНоменклатура.Номенклатура
		|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)
		|				КОНЕЦ = &ТоварнаяКатегория
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВерсияСоглашенияКоммерческийДоговор.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВерсияСоглашенияКоммерческийДоговор.Ссылка КАК ВерсияСоглашения,
		|	ВерсияСоглашенияКоммерческийДоговор.ДатаНачалаДействия КАК ДатаНачалаДействия,
		|	ВерсияСоглашенияКоммерческийДоговор.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		|	ВерсияСоглашенияКоммерческийДоговор.Организация КАК Организация,
		|	ДоговорыКонтрагентов.Ссылка КАК Договор,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВерсияСоглашенияКоммерческийДоговорНоменклатура.Номенклатура) КАК КоличествоНоменклатуры,
		|	ЕСТЬNULL(ВТ_КоличествоНоменклатура.КоличествоНоменклатура, 0) КАК КоличествоВыбраннойНоменклатуры
		|ИЗ
		|	Документ.ВерсияСоглашенияКоммерческийДоговор КАК ВерсияСоглашенияКоммерческийДоговор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ВерсияСоглашенияКоммерческийДоговор.Ссылка = ДоговорыКонтрагентов.ВерсияСоглашения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияКоммерческийДоговор.Номенклатура КАК ВерсияСоглашенияКоммерческийДоговорНоменклатура
		|		ПО (ВерсияСоглашенияКоммерческийДоговорНоменклатура.Ссылка = ВерсияСоглашенияКоммерческийДоговор.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоНоменклатура КАК ВТ_КоличествоНоменклатура
		|		ПО (ВТ_КоличествоНоменклатура.ВерсияСоглашения = ВерсияСоглашенияКоммерческийДоговор.Ссылка)
		|ГДЕ
		|	НЕ ВерсияСоглашенияКоммерческийДоговор.ПометкаУдаления
		|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
		|	И ВЫБОР
		|			КОГДА &ДатаНачала = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВерсияСоглашенияКоммерческийДоговор.ДатаНачалаДействия >= &ДатаНачала
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ДатаОкончания = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВерсияСоглашенияКоммерческийДоговор.ДатаОкончанияДействия <= &ДатаОкончания
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Организация = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВерсияСоглашенияКоммерческийДоговор.Организация В ИЕРАРХИИ (&Организация)
		|		КОНЕЦ
		|	И ВерсияСоглашенияКоммерческийДоговор.ВидСоглашения = &ВидСоглашения
		|	И ВерсияСоглашенияКоммерческийДоговор.ВидДоговораУХ = &ВидДоговора
		|
		|СГРУППИРОВАТЬ ПО
		|	ВерсияСоглашенияКоммерческийДоговор.Ссылка,
		|	ДоговорыКонтрагентов.Ссылка,
		|	ВерсияСоглашенияКоммерческийДоговор.ДатаНачалаДействия,
		|	ВерсияСоглашенияКоммерческийДоговор.ДатаОкончанияДействия,
		|	ВерсияСоглашенияКоммерческийДоговор.Организация,
		|	ЕСТЬNULL(ВТ_КоличествоНоменклатура.КоличествоНоменклатура, 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	ДатаНачалаДействия";
	Запрос.УстановитьПараметр("ВидСоглашения", Перечисления.ВидыСоглашений.ДоговорСУсловием);
	Запрос.УстановитьПараметр("ВидДоговора", Справочники.ВидыДоговоровКонтрагентовУХ.СПоставщиком);
	Если ЗначениеЗаполнено(НачалоПериодаВход) Тогда
		Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(НачалоПериодаВход));
	Иначе
		Запрос.УстановитьПараметр("ДатаНачала", Неопределено);
	КонецЕсли;
	Если ЗначениеЗаполнено(КонецПериодаВход) Тогда
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КонецПериодаВход));
	Иначе
		Запрос.УстановитьПараметр("ДатаОкончания", Неопределено);
	КонецЕсли;	
	Если ТипЗнч(НоменклатураОтборВход) = Тип("СписокЗначений") Тогда
		Если НоменклатураОтборВход.Количество() > 0 Тогда
			Запрос.УстановитьПараметр("Номенклатура", НоменклатураОтборВход);
			Запрос.УстановитьПараметр("ЕстьНоменклатура", Истина);
		Иначе
			Запрос.УстановитьПараметр("Номенклатура", Новый СписокЗначений);
			Запрос.УстановитьПараметр("ЕстьНоменклатура", Ложь);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(НоменклатураОтборВход) Тогда
			Запрос.УстановитьПараметр("Номенклатура", НоменклатураОтборВход);
			Запрос.УстановитьПараметр("ЕстьНоменклатура", Истина);
		Иначе
			Запрос.УстановитьПараметр("Номенклатура", Новый СписокЗначений);
			Запрос.УстановитьПараметр("ЕстьНоменклатура", Ложь);
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОрганизацияВход) Тогда
		Запрос.УстановитьПараметр("Организация", ОрганизацияВход);
	Иначе
		Запрос.УстановитьПараметр("Организация", Неопределено);
	КонецЕсли;	
	Если ЗначениеЗаполнено(ТоварнаяКатегорияОтборВход) Тогда
		Запрос.УстановитьПараметр("ТоварнаяКатегория", ТоварнаяКатегорияОтборВход);
	Иначе
		Запрос.УстановитьПараметр("ТоварнаяКатегория", Неопределено);
	КонецЕсли;	
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	РезультатФункции = ОтобратьТаблицуДоговоров(РезультатФункции, РежимОтображенияВход);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьТаблицуДоговоров()

// Считывает из базы данные коммерческих договоров и отображает на форме по полям отбора.
&НаСервере
Процедура СчитатьДанныеДоговоры(НачалоПериодаВход = Неопределено, КонецПериодаВход = Неопределено, ОрганизацияВход = Неопределено, НоменклатураОтборВход = Неопределено, ТоварнаяКатегорияОтборВход = Неопределено, РежимОтображенияВход = "")
	ВыгрузкаРазмещение = ТаблицаРазмещение.Выгрузить();
	МассивДоговоровРазмещение = ВыгрузкаРазмещение.ВыгрузитьКолонку("Договор");
	МассивДоговоровРазмещение = ОбщегоНазначенияКлиентСерверУХ.СортироватьМассив(МассивДоговоровРазмещение);
	МассивДоговоровРазмещение = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивДоговоровРазмещение);	
	ТаблицаДоговоров.Очистить();
	ТоварнаяКатегорияРабочая = Неопределено;
	Если флРазделятьНоменклатуруПоКатегорийнымМенеджерам Тогда
		ТоварнаяКатегорияРабочая = ТоварнаяКатегорияОтбор;
	Иначе
		ТоварнаяКатегорияРабочая = Неопределено;
	КонецЕсли;
	НоваяТаблицаДоговоров = ПолучитьТаблицуДоговоров(НачалоПериодаВход, КонецПериодаВход, ОрганизацияВход, НоменклатураОтборВход, ТоварнаяКатегорияРабочая, РежимОтображенияВход);
	Для Каждого ТекНоваяТаблицаДоговоров Из НоваяТаблицаДоговоров Цикл
		НоваяСтрока = ТаблицаДоговоров.Добавить();
		НоваяСтрока.ВерсияСоглашения	 = ТекНоваяТаблицаДоговоров.ВерсияСоглашения;
		НоваяСтрока.Договор				 = ТекНоваяТаблицаДоговоров.Договор;
		ДоговорИзменен = (МассивДоговоровРазмещение.Найти(ТекНоваяТаблицаДоговоров.Договор) <> Неопределено);
		НоваяСтрока.Изменена			 = ДоговорИзменен;
	КонецЦикла;	
КонецПроцедуры		// СчитатьДанныеДоговоры()

// Возвращает таблицу значений номенклатуры в версии договора ВерсияСоглашенияВход.
&НаСервере
Функция ПолучитьТаблицуНоменклатураДоговоров(ДоговорВход)
	РезультатФункции = Новый ТаблицаЗначений;
	Если ЗначениеЗаполнено(ДоговорВход) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Номенклатура КАК Номенклатура,
		|	СУММА(ВерсияСоглашенияКоммерческийДоговорНоменклатура.Количество) КАК Количество,
		|	СУММА(ВерсияСоглашенияКоммерческийДоговорНоменклатура.Сумма) КАК Сумма,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.ПериодПотребности КАК Период,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Ссылка КАК ВерсияСоглашения,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Приоритет КАК Приоритет,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Характеристика КАК Характеристика,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Организация КАК Организация,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.МестоПоставки КАК МестоПоставки,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Проект КАК Проект,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Менеджер КАК Менеджер,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.СтавкаНДС КАК СтавкаНДС,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Коэффициент КАК Коэффициент,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ДоговорыКонтрагентов.Ссылка КАК Договор,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Цена КАК Цена,
		|	ВЫБОР
		|		КОГДА ВерсияСоглашенияКоммерческийДоговорНоменклатура.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВерсияСоглашенияКоммерческийДоговорНоменклатура.Номенклатура.ТоварнаяКатегория
		|		КОГДА ВерсияСоглашенияКоммерческийДоговорНоменклатура.Номенклатура ССЫЛКА Справочник.ТоварныеКатегории
		|			ТОГДА ВерсияСоглашенияКоммерческийДоговорНоменклатура.Номенклатура
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)
		|	КОНЕЦ КАК ТоварнаяКатегория
		|ИЗ
		|	Документ.ВерсияСоглашенияКоммерческийДоговор.Номенклатура КАК ВерсияСоглашенияКоммерческийДоговорНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ВерсияСоглашенияКоммерческийДоговорНоменклатура.Ссылка = ДоговорыКонтрагентов.ВерсияСоглашения
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Номенклатура,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.ПериодПотребности,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Ссылка,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Приоритет,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Характеристика,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Организация,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.МестоПоставки,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Проект,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Менеджер,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.ДоговорСПокупателем,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.СтавкаНДС,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Коэффициент,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.ЕдиницаИзмерения,
		|	ДоговорыКонтрагентов.Ссылка,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Цена,
		|	ВЫБОР
		|		КОГДА ВерсияСоглашенияКоммерческийДоговорНоменклатура.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВерсияСоглашенияКоммерческийДоговорНоменклатура.Номенклатура.ТоварнаяКатегория
		|		КОГДА ВерсияСоглашенияКоммерческийДоговорНоменклатура.Номенклатура ССЫЛКА Справочник.ТоварныеКатегории
		|			ТОГДА ВерсияСоглашенияКоммерческийДоговорНоменклатура.Номенклатура
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВерсияСоглашенияКоммерческийДоговорНоменклатура.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВерсияСоглашенияКоммерческийДоговорНоменклатура.Номенклатура.ТоварнаяКатегория
		|		КОГДА ВерсияСоглашенияКоммерческийДоговорНоменклатура.Номенклатура ССЫЛКА Справочник.ТоварныеКатегории
		|			ТОГДА ВерсияСоглашенияКоммерческийДоговорНоменклатура.Номенклатура
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.ПериодПотребности.ДатаНачала,
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Номенклатура";
		Запрос.УстановитьПараметр("Ссылка", ДоговорВход);
		РезультатЗапроса = Запрос.Выполнить();
		РезультатФункции = РезультатЗапроса.Выгрузить();
	Иначе
		РезультатФункции = Новый ТаблицаЗначений;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьТаблицуНоменклатураДоговоров()

// Выполняет обновление вычисляемых данных в подвале таблицы Потребности.
&НаСервере
Процедура ОбновитьПодвалПотребности()
	ТаблицаВыбранныхПотребностей = ПолучитьТаблицуВыбранныхПотребностей();
	// Количество.
	ИтогКоличествоВыбранное = ТаблицаВыбранныхПотребностей.Итог("Количество");
	ИтогКоличествоОбщее = ТаблицаПотребности.Итог("Количество");
	НовыйТекстПодвала = "";
	НовыйТекстПодвала = НовыйТекстПодвала + Строка(ИтогКоличествоВыбранное);
	НовыйТекстПодвала = НовыйТекстПодвала + " / ";
	НовыйТекстПодвала = НовыйТекстПодвала + Строка(ИтогКоличествоОбщее);
	Элементы.ТаблицаПотребностиКоличество.ТекстПодвала = НовыйТекстПодвала;
	// Сумма.
	ИтогСуммаВыбранная = ТаблицаВыбранныхПотребностей.Итог("Сумма");
	ИтогСуммаОбщая = ТаблицаПотребности.Итог("Сумма");
	НовыйТекстПодвала = "";
	НовыйТекстПодвала = НовыйТекстПодвала + Строка(ИтогСуммаВыбранная);
	НовыйТекстПодвала = НовыйТекстПодвала + " / ";
	НовыйТекстПодвала = НовыйТекстПодвала + Строка(ИтогСуммаОбщая);
	Элементы.ТаблицаПотребностиСумма.ТекстПодвала = Строка(НовыйТекстПодвала);
КонецПроцедуры		// ОбновитьПодвалПотребности()

// Выполняет обновление вычисляемых данных в подвале таблицы Номенклатура договоров.
&НаСервере
Процедура ОбновитьПодвалНоменклатураДоговора()
	// Количество.
	ИтогКоличество = ТаблицаНоменклатураДоговора.Итог("Количество");
	Элементы.ТаблицаНоменклатураДоговораКоличество.ТекстПодвала = Строка(ИтогКоличество);
	// Сумма.
	ИтогСумма = ТаблицаНоменклатураДоговора.Итог("Сумма");
	Элементы.ТаблицаНоменклатураДоговораСумма.ТекстПодвала = Строка(ИтогСумма);
КонецПроцедуры		// ОбновитьПодвалПотребности()

// Серверная обёртка команды СчитатьДанные. Когда параметр ОбновитьПотребностьВход
// Истина, данные по потребностям будут считаны из базы.
&НаСервере
Процедура СчитатьДанные_Сервер(ОбновитьПотребностьВход = Ложь)
	НачалоПериода = ПериодОтбор.ДатаНачала;
	КонецПериода = ПериодОтбор.ДатаОкончания;
	СчитатьДанныеПотребности(НачалоПериода, КонецПериода, ОрганизацияОтбор, МестоПоставкиОтбор, НоменклатураОтбор, ТоварнаяКатегорияОтбор, ОбновитьПотребностьВход);
	СчитатьДанныеДоговоры(НачалоПериода, КонецПериода, ОрганизацияОтбор, НоменклатураОтбор, ТоварнаяКатегорияОтбор, РежимОтображенияДоговоров);
	ОбновитьПодвалПотребности();
	ОбновитьПодвалНоменклатураДоговора();
	ВосстановитьПоложениеСтрокиДоговора(ВыбранныйДоговор);
	УправлениеДоступностью(ЭтаФорма);
КонецПроцедуры		// СчитатьДанные_Сервер()

// Возвращает таблицу, в которой потребность из таблицы ТаблицаПотребностиВход
// скорректирована на данные из таблицы ТаблицаРазмещениеВход.
&НаСервереБезКонтекста
Функция СкорректироватьТаблицуНоменклатураДоговоров(ТаблицаНоменклатураДоговоровВход, ТаблицаРазмещениеВход, ДоговорВход)
	РезультатФункции = Новый ТаблицаЗначений;
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ_НоменклатураДоговора.Номенклатура КАК Номенклатура,
		|	ВЫРАЗИТЬ(ТЗ_НоменклатураДоговора.Период КАК Справочник.Периоды) КАК Период,
		|	ТЗ_НоменклатураДоговора.Сумма КАК Сумма,
		|	ТЗ_НоменклатураДоговора.Количество КАК Количество,
		|	ТЗ_НоменклатураДоговора.ВерсияСоглашения КАК ВерсияСоглашения,
		|	ТЗ_НоменклатураДоговора.Приоритет КАК Приоритет,
		|	ТЗ_НоменклатураДоговора.Характеристика КАК Характеристика,
		|	ТЗ_НоменклатураДоговора.Организация КАК Организация,
		|	ТЗ_НоменклатураДоговора.МестоПоставки КАК МестоПоставки,
		|	ТЗ_НоменклатураДоговора.Проект КАК Проект,
		|	ТЗ_НоменклатураДоговора.Менеджер КАК Менеджер,
		|	ТЗ_НоменклатураДоговора.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ТЗ_НоменклатураДоговора.СтавкаНДС КАК СтавкаНДС,
		|	ТЗ_НоменклатураДоговора.Коэффициент КАК Коэффициент,
		|	ТЗ_НоменклатураДоговора.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТЗ_НоменклатураДоговора.Договор КАК Договор,
		|	ТЗ_НоменклатураДоговора.Цена КАК Цена,
		|	ТЗ_НоменклатураДоговора.ТоварнаяКатегория КАК ТоварнаяКатегория
		|ПОМЕСТИТЬ ВТ_НоменклатураДоговора
		|ИЗ
		|	&ТЗ_НоменклатураДоговора КАК ТЗ_НоменклатураДоговора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗ_Размещение.Номенклатура КАК Номенклатура,
		|	ВЫРАЗИТЬ(ТЗ_Размещение.Период КАК Справочник.Периоды) КАК Период,
		|	ТЗ_Размещение.Количество КАК Количество,
		|	ТЗ_Размещение.Сумма КАК Сумма,
		|	ТЗ_Размещение.ВерсияСоглашения КАК ВерсияСоглашения,
		|	ТЗ_Размещение.Приоритет КАК Приоритет,
		|	ТЗ_Размещение.Характеристика КАК Характеристика,
		|	ТЗ_Размещение.Организация КАК Организация,
		|	ТЗ_Размещение.МестоПоставки КАК МестоПоставки,
		|	ТЗ_Размещение.Проект КАК Проект,
		|	ТЗ_Размещение.Менеджер КАК Менеджер,
		|	ТЗ_Размещение.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ТЗ_Размещение.СтавкаНДС КАК СтавкаНДС,
		|	ТЗ_Размещение.Коэффициент КАК Коэффициент,
		|	ТЗ_Размещение.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТЗ_Размещение.Договор КАК Договор,
		|	ТЗ_Размещение.ИдентификаторРазмещения КАК ИдентификаторРазмещения,
		|	ТЗ_Размещение.Цена КАК Цена,
		|	ТЗ_Размещение.ТоварнаяКатегория КАК ТоварнаяКатегория
		|ПОМЕСТИТЬ ВТ_Размещение
		|ИЗ
		|	&ТЗ_Размещение КАК ТЗ_Размещение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НоменклатураДоговора.Номенклатура КАК Номенклатура,
		|	ВТ_НоменклатураДоговора.Период КАК Период,
		|	ВТ_НоменклатураДоговора.Сумма КАК Сумма,
		|	ВТ_НоменклатураДоговора.Количество КАК Количество,
		|	ВТ_НоменклатураДоговора.ВерсияСоглашения КАК ВерсияСоглашения,
		|	ВТ_НоменклатураДоговора.Приоритет КАК Приоритет,
		|	ВТ_НоменклатураДоговора.Характеристика КАК Характеристика,
		|	ВТ_НоменклатураДоговора.Организация КАК Организация,
		|	ВТ_НоменклатураДоговора.МестоПоставки КАК МестоПоставки,
		|	ВТ_НоменклатураДоговора.Проект КАК Проект,
		|	ВТ_НоменклатураДоговора.Менеджер КАК Менеджер,
		|	ВТ_НоменклатураДоговора.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ВТ_НоменклатураДоговора.СтавкаНДС КАК СтавкаНДС,
		|	ВТ_НоменклатураДоговора.Коэффициент КАК Коэффициент,
		|	ВТ_НоменклатураДоговора.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВТ_НоменклатураДоговора.Договор КАК Договор,
		|	ВТ_НоменклатураДоговора.Цена КАК Цена,
		|	ВТ_НоменклатураДоговора.ТоварнаяКатегория КАК ТоварнаяКатегория
		|ПОМЕСТИТЬ ВТ_НоменклатураВерсии
		|ИЗ
		|	ВТ_НоменклатураДоговора КАК ВТ_НоменклатураДоговора
		|ГДЕ
		|	ВТ_НоменклатураДоговора.Договор = &Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Размещение.Номенклатура КАК Номенклатура,
		|	ВТ_Размещение.Период КАК Период,
		|	ВТ_Размещение.Количество КАК Количество,
		|	ВТ_Размещение.Сумма КАК Сумма,
		|	ВТ_Размещение.ВерсияСоглашения КАК ВерсияСоглашения,
		|	ВТ_Размещение.Приоритет КАК Приоритет,
		|	ВТ_Размещение.Характеристика КАК Характеристика,
		|	ВТ_Размещение.Организация КАК Организация,
		|	ВТ_Размещение.МестоПоставки КАК МестоПоставки,
		|	ВТ_Размещение.Проект КАК Проект,
		|	ВТ_Размещение.Менеджер КАК Менеджер,
		|	ВТ_Размещение.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ВТ_Размещение.СтавкаНДС КАК СтавкаНДС,
		|	ВТ_Размещение.Коэффициент КАК Коэффициент,
		|	ВТ_Размещение.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВТ_Размещение.Договор КАК Договор,
		|	ВТ_Размещение.ИдентификаторРазмещения КАК ИдентификаторРазмещения,
		|	ВТ_Размещение.Цена КАК Цена,
		|	ВТ_Размещение.ТоварнаяКатегория КАК ТоварнаяКатегория
		|ПОМЕСТИТЬ ВТ_РазмещениеВерсия
		|ИЗ
		|	ВТ_Размещение КАК ВТ_Размещение
		|ГДЕ
		|	ВТ_Размещение.Договор = &Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.Номенклатура, ВТ_РазмещениеВерсия.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ВТ_НоменклатураВерсии.Период, ВТ_РазмещениеВерсия.Период) КАК Справочник.Периоды) КАК Период,
		|	СУММА(ЕСТЬNULL(ВТ_НоменклатураВерсии.Сумма, 0)) КАК СуммаДоговора,
		|	СУММА(ЕСТЬNULL(ВТ_НоменклатураВерсии.Количество, 0)) КАК КоличествоДоговора,
		|	СУММА(ЕСТЬNULL(ВТ_РазмещениеВерсия.Количество, 0)) КАК КоличествоРазмещение,
		|	СУММА(ЕСТЬNULL(ВТ_РазмещениеВерсия.Сумма, 0)) КАК СуммаРазмещение,
		|	СУММА(ЕСТЬNULL(ВТ_НоменклатураВерсии.Сумма, 0) + ЕСТЬNULL(ВТ_РазмещениеВерсия.Сумма, 0)) КАК Сумма,
		|	СУММА(ЕСТЬNULL(ВТ_НоменклатураВерсии.Количество, 0) + ЕСТЬNULL(ВТ_РазмещениеВерсия.Количество, 0)) КАК Количество,
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.ВерсияСоглашения, ВТ_РазмещениеВерсия.ВерсияСоглашения) КАК ВерсияСоглашения,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ВТ_РазмещениеВерсия.Номенклатура ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК Изменена,
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.Приоритет, ВТ_РазмещениеВерсия.Приоритет) КАК Приоритет,
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.Характеристика, ВТ_РазмещениеВерсия.Характеристика) КАК Характеристика,
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.Организация, ВТ_РазмещениеВерсия.Организация) КАК Организация,
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.МестоПоставки, ВТ_РазмещениеВерсия.МестоПоставки) КАК МестоПоставки,
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.Проект, ВТ_РазмещениеВерсия.Проект) КАК Проект,
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.Менеджер, ВТ_РазмещениеВерсия.Менеджер) КАК Менеджер,
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.ДоговорСПокупателем, ВТ_РазмещениеВерсия.ДоговорСПокупателем) КАК ДоговорСПокупателем,
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.СтавкаНДС, ВТ_РазмещениеВерсия.СтавкаНДС) КАК СтавкаНДС,
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.Коэффициент, ВТ_РазмещениеВерсия.Коэффициент) КАК Коэффициент,
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.ЕдиницаИзмерения, ВТ_РазмещениеВерсия.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.Договор, ВТ_РазмещениеВерсия.Договор) КАК Договор,
		|	ЕСТЬNULL(ВТ_РазмещениеВерсия.ИдентификаторРазмещения, """") КАК ИдентификаторРазмещения,
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.Цена, ВТ_РазмещениеВерсия.Цена) КАК Цена,
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.ТоварнаяКатегория, ВТ_РазмещениеВерсия.ТоварнаяКатегория) КАК ТоварнаяКатегория
		|ПОМЕСТИТЬ ВТ_Объединение
		|ИЗ
		|	ВТ_НоменклатураВерсии КАК ВТ_НоменклатураВерсии
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_РазмещениеВерсия КАК ВТ_РазмещениеВерсия
		|		ПО ВТ_НоменклатураВерсии.Номенклатура = ВТ_РазмещениеВерсия.Номенклатура
		|			И ВТ_НоменклатураВерсии.Период = ВТ_РазмещениеВерсия.Период
		|			И ВТ_НоменклатураВерсии.Приоритет = ВТ_РазмещениеВерсия.Приоритет
		|			И ВТ_НоменклатураВерсии.Характеристика = ВТ_РазмещениеВерсия.Характеристика
		|			И ВТ_НоменклатураВерсии.Организация = ВТ_РазмещениеВерсия.Организация
		|			И ВТ_НоменклатураВерсии.МестоПоставки = ВТ_РазмещениеВерсия.МестоПоставки
		|			И ВТ_НоменклатураВерсии.Проект = ВТ_РазмещениеВерсия.Проект
		|			И ВТ_НоменклатураВерсии.Менеджер = ВТ_РазмещениеВерсия.Менеджер
		|			И ВТ_НоменклатураВерсии.ДоговорСПокупателем = ВТ_РазмещениеВерсия.ДоговорСПокупателем
		|			И ВТ_НоменклатураВерсии.СтавкаНДС = ВТ_РазмещениеВерсия.СтавкаНДС
		|			И ВТ_НоменклатураВерсии.Коэффициент = ВТ_РазмещениеВерсия.Коэффициент
		|			И ВТ_НоменклатураВерсии.ЕдиницаИзмерения = ВТ_РазмещениеВерсия.ЕдиницаИзмерения
		|			И ВТ_НоменклатураВерсии.Договор = ВТ_РазмещениеВерсия.Договор
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.Номенклатура, ВТ_РазмещениеВерсия.Номенклатура),
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ВТ_НоменклатураВерсии.Период, ВТ_РазмещениеВерсия.Период) КАК Справочник.Периоды),
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.ВерсияСоглашения, ВТ_РазмещениеВерсия.ВерсияСоглашения),
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.Приоритет, ВТ_РазмещениеВерсия.Приоритет),
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.Характеристика, ВТ_РазмещениеВерсия.Характеристика),
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.Организация, ВТ_РазмещениеВерсия.Организация),
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.МестоПоставки, ВТ_РазмещениеВерсия.МестоПоставки),
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.Проект, ВТ_РазмещениеВерсия.Проект),
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.Менеджер, ВТ_РазмещениеВерсия.Менеджер),
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.ДоговорСПокупателем, ВТ_РазмещениеВерсия.ДоговорСПокупателем),
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.СтавкаНДС, ВТ_РазмещениеВерсия.СтавкаНДС),
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.Коэффициент, ВТ_РазмещениеВерсия.Коэффициент),
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.ЕдиницаИзмерения, ВТ_РазмещениеВерсия.ЕдиницаИзмерения),
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.Договор, ВТ_РазмещениеВерсия.Договор),
		|	ЕСТЬNULL(ВТ_РазмещениеВерсия.ИдентификаторРазмещения, """"),
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.Цена, ВТ_РазмещениеВерсия.Цена),
		|	ЕСТЬNULL(ВТ_НоменклатураВерсии.ТоварнаяКатегория, ВТ_РазмещениеВерсия.ТоварнаяКатегория)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Объединение.Номенклатура КАК Номенклатура,
		|	ВТ_Объединение.Период КАК Период,
		|	ВТ_Объединение.СуммаДоговора КАК СуммаДоговора,
		|	ВТ_Объединение.КоличествоДоговора КАК КоличествоДоговора,
		|	ВТ_Объединение.КоличествоРазмещение КАК КоличествоРазмещение,
		|	ВТ_Объединение.СуммаРазмещение КАК СуммаРазмещение,
		|	ВТ_Объединение.Сумма КАК Сумма,
		|	ВТ_Объединение.Количество КАК Количество,
		|	ВТ_Объединение.ВерсияСоглашения КАК ВерсияСоглашения,
		|	ВТ_Объединение.Изменена КАК Изменена,
		|	ВТ_Объединение.Приоритет КАК Приоритет,
		|	ВТ_Объединение.Характеристика КАК Характеристика,
		|	ВТ_Объединение.Организация КАК Организация,
		|	ВТ_Объединение.МестоПоставки КАК МестоПоставки,
		|	ВТ_Объединение.Проект КАК Проект,
		|	ВТ_Объединение.Менеджер КАК Менеджер,
		|	ВТ_Объединение.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ВТ_Объединение.СтавкаНДС КАК СтавкаНДС,
		|	ВТ_Объединение.Коэффициент КАК Коэффициент,
		|	ВТ_Объединение.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВТ_Объединение.Договор КАК Договор,
		|	ВТ_Объединение.ИдентификаторРазмещения КАК ИдентификаторРазмещения,
		|	ВТ_Объединение.Цена КАК Цена,
		|	ВТ_Объединение.ТоварнаяКатегория КАК ТоварнаяКатегория
		|ИЗ
		|	ВТ_Объединение КАК ВТ_Объединение
		|ГДЕ
		|	(ВТ_Объединение.Количество > 0
		|			ИЛИ ВТ_Объединение.Сумма > 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_Объединение.Период.ДатаНачала,
		|	Номенклатура";
		Запрос.УстановитьПараметр("ТЗ_НоменклатураДоговора", ТаблицаНоменклатураДоговоровВход);
		Запрос.УстановитьПараметр("ТЗ_Размещение", ТаблицаРазмещениеВход);
		Запрос.УстановитьПараметр("Договор", ДоговорВход);
		РезультатЗапроса = Запрос.Выполнить();
		РезультатФункции = РезультатЗапроса.Выгрузить();
	Исключение
		ТекстСообщения = НСтр("ru = 'При корректировке данных номенклатуры по договору произошли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции		// СкорректироватьТаблицуНоменклатураДоговоров()

// Считывает из базы данные номенклатуры по ВерсияСоглашенияВход и помещает в таблицу номенклатуры.
&НаСервере
Процедура СчитатьДанныеНоменклатураДоговоров(ДоговорВход)
	Попытка
		ТаблицаНоменклатураДоговора.Очистить();
		НоваяТаблицаНоменклатураДоговоров = ПолучитьТаблицуНоменклатураДоговоров(ДоговорВход);
		ВыгрузкаРазмещение = ТаблицаРазмещение.Выгрузить();
		НоваяТаблицаНоменклатураДоговоров = СкорректироватьТаблицуНоменклатураДоговоров(НоваяТаблицаНоменклатураДоговоров, ВыгрузкаРазмещение, ДоговорВход);
		Для Каждого ТекНоваяТаблицаНоменклатураДоговоров Из НоваяТаблицаНоменклатураДоговоров Цикл
			НоваяСтрока = ТаблицаНоменклатураДоговора.Добавить();
			ПеренестиДанныеРазмещенияВСтрокуТаблицы(ТекНоваяТаблицаНоменклатураДоговоров, НоваяСтрока);
			НоваяСтрока.ВерсияСоглашения		 = ТекНоваяТаблицаНоменклатураДоговоров.ВерсияСоглашения;
			НоваяСтрока.Изменена				 = ТекНоваяТаблицаНоменклатураДоговоров.Изменена;
			НоваяСтрока.Договор					 = ТекНоваяТаблицаНоменклатураДоговоров.Договор;
			НоваяСтрока.ИдентификаторРазмещения	 = ТекНоваяТаблицаНоменклатураДоговоров.ИдентификаторРазмещения;
			Если ЗначениеЗаполнено(НоваяСтрока.ВерсияСоглашения) Тогда
				НоваяСтрока.ИндексКартинки = 1;
			Иначе
				НоваяСтрока.ИндексКартинки = 0;
			КонецЕсли;
		КонецЦикла;	
		ОбновитьПодвалНоменклатураДоговора();
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось обновить данные по номенклатуре договора %Договор% : %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Договор%", Строка(ДоговорВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры		// СчитатьДанныеНоменклатура_Сервер()

// Возвращает таблицу, содержащую данные по выбранным пользователям потребностям.
&НаСервере
Функция ПолучитьТаблицуВыбранныхПотребностей()
	РезультатФункции = Новый ТаблицаЗначений;
	Выгрузка = ТаблицаПотребности.Выгрузить();
	РезультатФункции = Выгрузка.СкопироватьКолонки();
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Использование", Истина);
	НайденныеСтроки = Выгрузка.НайтиСтроки(СтруктураПоиска);
	Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
		НоваяСтрока = РезультатФункции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекНайденныеСтроки);		
	КонецЦикла;	
	Возврат РезультатФункции;		
КонецФункции		// ПолучитьТаблицуВыбранныхПотребностей()	

// Проверяет наличие размещений в таблице ТаблицаРазмещениеВход по версиям соглашения, 
// отличной от ВерсияСоглашенияВход в договоре ДоговорВход.
&НаСервереБезКонтекста
Функция ЕстьРазмещенияПоДругимВерсиям(ТаблицаРазмещениеВход, ВерсияСоглашенияВход, ДоговорВход)
	РезультатФункции = Ложь;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Договор", ДоговорВход);
	НайденныеСтроки = ТаблицаРазмещениеВход.НайтиСтроки(СтруктураПоиска);
	Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
		Если ТекНайденныеСтроки.ВерсияСоглашения <> ВерсияСоглашенияВход Тогда
			РезультатФункции = Истина;
			Прервать;
		Иначе
			// Выполняем поиск далее.
		КонецЕсли;		
	КонецЦикла;	
	Возврат РезультатФункции;		
КонецФункции		// ЕстьРазмещенияПоДругимВерсиям()	

// Размещает таблицу ТаблицаПотребностейВход в таблице размещенных потребностей договора по версии
// ВерсияСоглашенияВход.
&НаСервере
Процедура РазместитьТаблицуПотребностейВТекущейВерсии(ТаблицаПотребностейВход, ВерсияСоглашенияВход)
	// Проверим, что потребности ещё не размещены в других версиях.
	ДоговорКонтрагента = ВерсияСоглашенияВход.ДоговорКонтрагента;
	ВыгрузкаРазмещение = ТаблицаРазмещение.Выгрузить();
	ЕстьДругиеВерсии = ЕстьРазмещенияПоДругимВерсиям(ВыгрузкаРазмещение, ВерсияСоглашенияВход, ДоговорКонтрагента);
	Если НЕ ЕстьДругиеВерсии Тогда
		СтрокаСверткаИзмерения = ПолучитьСтрокуСвертки();
		ТаблицаПотребностейВход.Свернуть(СтрокаСверткаИзмерения, "Количество, Сумма");
		Если ТаблицаПотребностейВход.Количество() > 0 Тогда
			// Разместим выбранные строки в таблице размещенных потребностей.
			ТаблицаСвертка = ТаблицаПотребностейВход.Скопировать();
			ТаблицаСвертка.Свернуть(СтрокаСверткаИзмерения);
			Для Каждого ТекТаблицаСвертка Из ТаблицаСвертка Цикл
				// Ищем измерения среди уже размещенных строк.
				СтруктураПоиска = ПеренестиДанныеРазмещениеВСтруктуру(ТекТаблицаСвертка);
				СтруктураПоиска.Вставить("Договор", ДоговорКонтрагента);
				НайденныеСтроки = ТаблицаРазмещение.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					// Строка найдена. Разместим в ней.
					ЦелеваяСтрока = НайденныеСтроки[0];
				Иначе
					ЦелеваяСтрока = ТаблицаРазмещение.Добавить();
					ЦелеваяСтрока.ИдентификаторРазмещения = Строка(Новый УникальныйИдентификатор);
				КонецЕсли;
				// Добавляем данные в целевую строку. 
				СтруктураПоиска = ПеренестиДанныеРазмещениеВСтруктуру(ТекТаблицаСвертка);
				НайденныеСтроки = ТаблицаПотребностейВход.НайтиСтроки(СтруктураПоиска);
				Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
					НовоеКоличество = ЦелеваяСтрока.Количество + ТекНайденныеСтроки.Количество;
					НоваяСумма = ЦелеваяСтрока.Сумма + ТекНайденныеСтроки.Сумма;
					ПеренестиДанныеРазмещенияВСтрокуТаблицы(ТекНайденныеСтроки, ЦелеваяСтрока);
					ЦелеваяСтрока.Количество		 = НовоеКоличество;
					ЦелеваяСтрока.Сумма				 = НоваяСумма;
					ЦелеваяСтрока.ВерсияСоглашения	 = ВерсияСоглашенияВход;
					ЦелеваяСтрока.Договор			 = ДоговорКонтрагента;
				КонецЦикла;	
			КонецЦикла;	
		Иначе
			ТекстСообщения = НСтр("ru = 'Не выбраны строки потребности. Размещение потребности отменено.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Потребности уже были размещены в других версиях договора. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры		// РазместитьТаблицуПотребностей()

// Серверная обёртка команды Разместить в текущей версии.
&НаСервере
Процедура РазместитьВТекущейВерсии_Сервер(ВерсияСоглашенияВход)
	ДоговорКонтрагента = ВерсияСоглашенияВход.ДоговорКонтрагента;
	// Отберем выбранные пользователем строки потребностей.
	ТаблицаВыбранныхПотребностей = ПолучитьТаблицуВыбранныхПотребностей();
	РазместитьТаблицуПотребностейВТекущейВерсии(ТаблицаВыбранныхПотребностей, ВерсияСоглашенияВход);
КонецПроцедуры		// РазместитьВТекущейВерсии_Сервер()

// Серверная обёртка команды Разместить в текущей версии.
&НаСервере
Процедура РазместитьВНовойВерсии_Сервер(ДоговорВход)
	ПустаяВерсияСоглашения = Документы.ВерсияСоглашенияКоммерческийДоговор.ПустаяСсылка();
	ВыгрузкаРазмещение = ТаблицаРазмещение.Выгрузить();
	ЕстьДругиеВерсии = ЕстьРазмещенияПоДругимВерсиям(ВыгрузкаРазмещение, ПустаяВерсияСоглашения, ДоговорВход);
	Если НЕ ЕстьДругиеВерсии Тогда
		СтрокаСверткаИзмерения = ПолучитьСтрокуСвертки();
		// Отберем выбранные пользователем строки потребностей.
		ТаблицаВыбранныхПотребностей = ПолучитьТаблицуВыбранныхПотребностей();
		ТаблицаВыбранныхПотребностей.Свернуть(СтрокаСверткаИзмерения, "Количество, Сумма");
		Если ТаблицаВыбранныхПотребностей.Количество() > 0 Тогда
			// Разместим выбранные строки в таблице размещенных потребностей.
			ТаблицаСвертка = ТаблицаВыбранныхПотребностей.Скопировать();
			ТаблицаСвертка.Свернуть(СтрокаСверткаИзмерения);
			Для Каждого ТекТаблицаСвертка Из ТаблицаСвертка Цикл
				// Ищем измерения среди уже размещенных строк.
				СтруктураПоиска = ПеренестиДанныеРазмещениеВСтруктуру(ТекТаблицаСвертка);
				СтруктураПоиска.Вставить("Договор",				 ДоговорВход);
				НайденныеСтроки = ТаблицаРазмещение.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					// Строка найдена. Разместим в ней.
					ЦелеваяСтрока = НайденныеСтроки[0];
				Иначе
					// Строка не найдена. Создадим новую.
					ЦелеваяСтрока = ТаблицаРазмещение.Добавить();
				КонецЕсли;
				// Добавляем данные в целевую строку. 
				СтруктураПоиска = ПеренестиДанныеРазмещениеВСтруктуру(ТекТаблицаСвертка);
				НайденныеСтроки = ТаблицаВыбранныхПотребностей.НайтиСтроки(СтруктураПоиска);
				Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
					НовоеКоличество = ЦелеваяСтрока.Количество + ТекНайденныеСтроки.Количество;
					НоваяСумма = ЦелеваяСтрока.Сумма + ТекНайденныеСтроки.Сумма;
					ПеренестиДанныеРазмещенияВСтрокуТаблицы(ТекНайденныеСтроки, ЦелеваяСтрока);
					ЦелеваяСтрока.Количество			 = НовоеКоличество;
					ЦелеваяСтрока.Сумма					 = НоваяСумма;
					ЦелеваяСтрока.ВерсияСоглашения		 = ПустаяВерсияСоглашения;
					ЦелеваяСтрока.Договор				 = ДоговорВход;
				КонецЦикла;	
			КонецЦикла;	
		Иначе
			ТекстСообщения = НСтр("ru = 'Не выбраны строки потребности. Размещение потребности отменено.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Потребности уже были размещены в других версиях договора. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры		// РазместитьВНовойВерсии_Сервер()

// Позиционируется на строке с договором ДоговорВход.
&НаСервере
Процедура ВосстановитьПоложениеСтрокиДоговора(ДоговорВход)
	Если ЗначениеЗаполнено(ДоговорВход) Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Договор", ДоговорВход);
		НайденныеСтроки = ТаблицаДоговоров.НайтиСтроки(СтруктураПоиска);
		ИдентификаторСтроки = -1;
		Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
			ИдентификаторСтроки = ТекНайденныеСтроки.ПолучитьИдентификатор();
		КонецЦикла;	
		Если ИдентификаторСтроки <> -1 Тогда
			Элементы.ТаблицаДоговоров.ТекущаяСтрока = ИдентификаторСтроки;
		Иначе
			// Строка не найдена. Не переставляем курсор.
		КонецЕсли;
	Иначе
		// Нет данных о сохранённой строке.
	КонецЕсли;
КонецПроцедуры		// ВосстановитьПоложениеСтрокиДоговора()

// Управляет доступностью элементов формы.
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)
	// Видимость команд Применить/Отменить.
	Форма.Элементы.ФормаГруппаОтменитьПрименить.Видимость = Форма.Модифицированность;
	// Доступность команд добавления данных в версии.
	ЕстьВыбранныеСтрокиПотребности = Ложь;
	Для Каждого ТекТаблицаПотребности Из Форма.ТаблицаПотребности Цикл
		Если ТекТаблицаПотребности.Использование Тогда
			ЕстьВыбранныеСтрокиПотребности = Истина;
			Прервать;
		Иначе
			// Выполняем поиск далее.
		КонецЕсли;
	КонецЦикла;	
	Форма.Элементы.ТаблицаНоменклатураДоговораГруппаРазместитьВВерсию.Доступность = ЕстьВыбранныеСтрокиПотребности;
	// Доступность команд установки флажков.
	ЕстьДанныеПотребности = (Форма.ТаблицаПотребности.Количество() > 0);
	Форма.Элементы.ТаблицаПотребностиГруппаУстановитьФлажки.Доступность = ЕстьДанныеПотребности;
	// Отображение товарных категорий.
	ЕстьТоварныеКатегории = Форма.флРазделятьНоменклатуруПоКатегорийнымМенеджерам;
	Форма.Элементы.ТоварнаяКатегорияОтбор.Видимость							 = ЕстьТоварныеКатегории;
	Форма.Элементы.ТаблицаПотребностиТоварнаяКатегория.Видимость			 = ЕстьТоварныеКатегории;
	Форма.Элементы.ТаблицаНоменклатураДоговораТоварнаяКатегория.Видимость	 = ЕстьТоварныеКатегории;
КонецПроцедуры		// УправлениеДоступностью()

// Выполняет заполнение объекта-Версии соглашения из массива данных
// МассивСтрокВход и записывает объект. Возвращает успешность выполнения.
Функция ЗаполнитьВерсиюСоглашения(ВерсияОбъектИзм, МассивСтрокВход)
	РезультатФункции = Истина;
	Попытка
		Для Каждого ТекМассивСтрокВход Из МассивСтрокВход Цикл
			// Найдём существующие строки, либо создадим новые.
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Приоритет",			 ТекМассивСтрокВход.Приоритет);
			СтруктураПоиска.Вставить("ПериодПотребности",	 ТекМассивСтрокВход.Период);
			СтруктураПоиска.Вставить("Номенклатура",		 ТекМассивСтрокВход.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика",		 ТекМассивСтрокВход.Характеристика);
			СтруктураПоиска.Вставить("Организация",			 ТекМассивСтрокВход.Организация);
			СтруктураПоиска.Вставить("МестоПоставки",		 ТекМассивСтрокВход.МестоПоставки);
			СтруктураПоиска.Вставить("Проект",				 ТекМассивСтрокВход.Проект);
			СтруктураПоиска.Вставить("Менеджер",			 ТекМассивСтрокВход.Менеджер);
			СтруктураПоиска.Вставить("ДоговорСПокупателем",	 ТекМассивСтрокВход.ДоговорСПокупателем);
			СтруктураПоиска.Вставить("СтавкаНДС",			 ТекМассивСтрокВход.СтавкаНДС);
			СтруктураПоиска.Вставить("Коэффициент",			 ТекМассивСтрокВход.Коэффициент);
			СтруктураПоиска.Вставить("ЕдиницаИзмерения",	 ТекМассивСтрокВход.ЕдиницаИзмерения);
			НайденныеСтрокиДоговор = ВерсияОбъектИзм.Номенклатура.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтрокиДоговор.Количество() > 0 Тогда
				ЦелеваяСтрока = НайденныеСтрокиДоговор[0];
			Иначе
				ЦелеваяСтрока = ВерсияОбъектИзм.Номенклатура.Добавить();
			КонецЕсли;
			// Заполним данные в строке.
			НовоеКоличество = ЦелеваяСтрока.Количество + ТекМассивСтрокВход.Количество;
			НоваяСумма = ЦелеваяСтрока.Сумма + ТекМассивСтрокВход.Сумма;
			ЦелеваяСтрока.Количество			 = НовоеКоличество;
			ЦелеваяСтрока.Сумма					 = НоваяСумма;
			ЦелеваяСтрока.Приоритет				 = ТекМассивСтрокВход.Приоритет;
			ЦелеваяСтрока.ПериодПотребности		 = ТекМассивСтрокВход.Период;
			ЦелеваяСтрока.Номенклатура			 = ТекМассивСтрокВход.Номенклатура;
			ЦелеваяСтрока.Характеристика		 = ТекМассивСтрокВход.Характеристика;
			ЦелеваяСтрока.Организация			 = ТекМассивСтрокВход.Организация;
			ЦелеваяСтрока.МестоПоставки			 = ТекМассивСтрокВход.МестоПоставки;
			ЦелеваяСтрока.Проект				 = ТекМассивСтрокВход.Проект;
			ЦелеваяСтрока.Менеджер				 = ТекМассивСтрокВход.Менеджер;
			ЦелеваяСтрока.ДоговорСПокупателем	 = ТекМассивСтрокВход.ДоговорСПокупателем;
			ЦелеваяСтрока.СтавкаНДС				 = ТекМассивСтрокВход.СтавкаНДС;
			ЦелеваяСтрока.Коэффициент			 = ТекМассивСтрокВход.Коэффициент;
			ЦелеваяСтрока.ЕдиницаИзмерения		 = ТекМассивСтрокВход.ЕдиницаИзмерения;
		КонецЦикла;	
		ВерсияОбъектИзм.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстСообщения = НСтр("ru = 'При добавлений данных в версию договора %Договор% произошли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Договор%", Строка(ВерсияОбъектИзм.ДоговорКонтрагента));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Ложь;
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции		// ЗаполнитьВерсиюСоглашения()

// Осуществляет запись размещённых строк в договоры. Возвращает массив записанных документов.
&НаСервере
Функция ЗаписатьДанныеВДоговоры()
	РезультатФункции = Новый Массив;
	// Заполнение в существующие версии.
	ВыгрузкаРазмещение = ТаблицаРазмещение.Выгрузить();
	МассивВерсий = ВыгрузкаРазмещение.ВыгрузитьКолонку("ВерсияСоглашения");
	МассивВерсий = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивВерсий);
	МассивВерсий = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивВерсий);
	Для Каждого ТекМассивВерсий Из МассивВерсий Цикл
		// Отберём строки по каждой версии.
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВерсияСоглашения", ТекМассивВерсий);
		НайденныеСтрокиРазмещение = ВыгрузкаРазмещение.НайтиСтроки(СтруктураПоиска);
		ВерсияОбъект = ТекМассивВерсий.ПолучитьОбъект();
		// Заполним отобранную версию.
		РезультатЗаполнения = ЗаполнитьВерсиюСоглашения(ВерсияОбъект, НайденныеСтрокиРазмещение);
		Если РезультатЗаполнения Тогда
			РезультатФункции.Добавить(ТекМассивВерсий);
		Иначе
			// Заполнение не удалось. Не добавляем в результирующий массив.
		КонецЕсли;
	КонецЦикла;	
	// Создание и заполнение новых версий договора.
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ВерсияСоглашения", Документы.ВерсияСоглашенияКоммерческийДоговор.ПустаяСсылка());
	НайденныеСтрокиРазмещение = ВыгрузкаРазмещение.НайтиСтроки(СтруктураПоиска);
	МассивДоговоров = Новый Массив;
	Для Каждого ТекНайденныеСтрокиРазмещение Из НайденныеСтрокиРазмещение Цикл
		МассивДоговоров.Добавить(ТекНайденныеСтрокиРазмещение.Договор);
	КонецЦикла;	
	МассивДоговоров = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивДоговоров);
	МассивДоговоров = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивДоговоров);
	// Создадим новую версию для всех найденных договоров.
	Для Каждого ТекМассивДоговоров Из МассивДоговоров Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВерсияСоглашения", Документы.ВерсияСоглашенияКоммерческийДоговор.ПустаяСсылка());
		СтруктураПоиска.Вставить("Договор", ТекМассивДоговоров);
		НайденныеСтроки = ВыгрузкаРазмещение.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ВерсияОбъект = Документы.ВерсияСоглашенияКоммерческийДоговор.СоздатьДокумент();
			ВерсияОбъект.Заполнить(ТекМассивДоговоров);
			РезультатЗаполнения = ЗаполнитьВерсиюСоглашения(ВерсияОбъект, НайденныеСтроки);
			Если РезультатЗаполнения Тогда
				РезультатФункции.Добавить(ВерсияОбъект.Ссылка);
			Иначе
				// Заполнение не удалось. Не добавляем в результирующий массив.
			КонецЕсли;
		Иначе
			// Нет данных по этому договору.
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		// ЗаписатьДанныеВДоговоры()

// Размещает в версию соглашения ВерсияСоглашенияВход строки размещения из массива
// МассивСтрокПеретаскиванияВход.
&НаСервере
Процедура РазместитьМассивПеретаскивания(МассивСтрокПеретаскиванияВход, ВерсияСоглашенияВход)
	Выгрузка = ТаблицаПотребности.Выгрузить();
	НоваяТаблицаРазмещения = Выгрузка.СкопироватьКолонки();
	Для Каждого ТекМассивСтрокПеретаскиванияВход Из МассивСтрокПеретаскиванияВход Цикл
		НоваяСтрока = НоваяТаблицаРазмещения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекМассивСтрокПеретаскиванияВход);
	КонецЦикла;	
	РазместитьТаблицуПотребностейВТекущейВерсии(НоваяТаблицаРазмещения, ВерсияСоглашенияВход); 
	ЭтаФорма.Модифицированность = Истина;
	СчитатьДанные_Сервер(Истина);
КонецПроцедуры		// РазместитьМассивПеретаскивания()

// Возвращает копию таблицы ТаблицаВход, из которой исключены строки
// с идентификатором ИдентификаторРазмещенияВход.
&НаСервереБезКонтекста
Функция ИсключитьРазмещеннуюСтроку(ТаблицаВход, ИдентификаторРазмещенияВход)
	РезультатФункции = ТаблицаВход.СкопироватьКолонки();
	Для Каждого ТекТаблицаВход Из ТаблицаВход Цикл
		Если ТекТаблицаВход.ИдентификаторРазмещения <> ИдентификаторРазмещенияВход Тогда
			НоваяСтрока = РезультатФункции.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекТаблицаВход);
		Иначе
			// Пропускаем.
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		// ИсключитьРазмещеннуюСтроку()

// Выставляет в размещённой потребности с идентификатором ИдентификаторРазмещенияВход 
// новое количество КоличествоВход. Когда КоличествоВход = 0 - удаляет размещённую строку.
&НаСервере
Процедура ИзменитьРазмещеннуюПотребностьКоличество(ИдентификаторРазмещенияВход, КоличествоВход)
	Если КоличествоВход > 0 Тогда
		// Изменим количество размещения.
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИдентификаторРазмещения", ИдентификаторРазмещенияВход);
		НайденныеСтроки = ТаблицаРазмещение.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
			ТекНайденныеСтроки.Количество = КоличествоВход;		
		КонецЦикла;	
	Иначе
		Выгрузка = ТаблицаРазмещение.Выгрузить();
		НовоеРазмещение = ИсключитьРазмещеннуюСтроку(Выгрузка, ИдентификаторРазмещенияВход);
		ТаблицаРазмещение.Загрузить(НовоеРазмещение);
	КонецЕсли;
	СчитатьДанные_Сервер(Истина);
КонецПроцедуры		// ИзменитьРазмещеннуюПотребностьКоличество()

// Выставляет в размещённой потребности с идентификатором ИдентификаторРазмещенияВход 
// новую сумму СуммаВход. Когда СуммаВход = 0 - удаляет размещённую строку.
&НаСервере
Процедура ИзменитьРазмещеннуюПотребностьСумма(ИдентификаторРазмещенияВход, СуммаВход)
	Если СуммаВход > 0 Тогда
		// Изменим количество размещения.
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИдентификаторРазмещения", ИдентификаторРазмещенияВход);
		НайденныеСтроки = ТаблицаРазмещение.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
			ТекНайденныеСтроки.Сумма = СуммаВход;		
		КонецЦикла;	
	Иначе
		Выгрузка = ТаблицаРазмещение.Выгрузить();
		НовоеРазмещение = ИсключитьРазмещеннуюСтроку(Выгрузка, ИдентификаторРазмещенияВход);
		ТаблицаРазмещение.Загрузить(НовоеРазмещение);
	КонецЕсли;
	СчитатьДанные_Сервер(Истина);
КонецПроцедуры		// ИзменитьРазмещеннуюПотребностьСумма()

&НаКлиенте
Процедура СчитатьДанные(Команда)
	СчитатьДанные_Сервер(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоговоровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элементы.ТаблицаДоговоров.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ПоказатьЗначение(, ТекДанные.ВерсияСоглашения);
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоговоровПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.ТаблицаДоговоров.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекДоговор = ТекДанные.Договор;
		СчитатьДанныеНоменклатураДоговоров(ТекДоговор);
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РазместитьВТекущейВерсии(Команда)
	ТекДанные = Элементы.ТаблицаДоговоров.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ВыбранныйДоговор = ТекДанные.Договор;
		РазместитьВТекущейВерсии_Сервер(ТекДанные.ВерсияСоглашения);
		СчитатьДанные_Сервер(Ложь);
	Иначе
		ТекстСообщения = НСтр("ru = 'Требуется выбрать договор для размещения потребности. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсе(Команда)
	Для Каждого ТекТаблицаПотребности Из ТаблицаПотребности Цикл
		ТекТаблицаПотребности.Использование = Истина;
	КонецЦикла;	
	УправлениеДоступностью(ЭтаФорма);
	ОбновитьПодвалПотребности();
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделение(Команда)
	Для Каждого ТекТаблицаПотребности Из ТаблицаПотребности Цикл
		ТекТаблицаПотребности.Использование = Ложь;
	КонецЦикла;	
	УправлениеДоступностью(ЭтаФорма);
	ОбновитьПодвалПотребности();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	флРазделятьНоменклатуруПоКатегорийнымМенеджерам = Константы.РазделятьНоменклатуруПоКатегорийнымМенеджерам.Получить();
	ТекДата = ТекущаяДатаСеанса();
	ПериодОтбор = Новый СтандартныйПериод(НачалоГода(ТекДата), КонецГода(ТекДата));
	ОрганизацияОтбор = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	РежимОтображенияДоговоров = РежимОтображенияВсеДоговорыПредставление();
	УправлениеДоступностью(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеЗаписиДоговоров_Завершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		// Запись данных в договор.
		МассивЗаписанных = ЗаписатьДанныеВДоговоры();
		// Отображение результата записи.
		КоличествоЗаписанных = МассивЗаписанных.Количество();
		Если КоличествоЗаписанных > 0 Тогда
			КартинкаОповещения = БиблиотекаКартинок.ПравилоПроверки_32;
			ТекстОповещения = НСтр("ru = 'Обновление договоров'");
			ПояснениеОповещения = НСтр("ru = '%Количество% договоров были успешно записаны'");
			ПояснениеОповещения = СтрЗаменить(ПояснениеОповещения, "%Количество%", Строка(КоличествоЗаписанных));
			ПоказатьОповещениеПользователя(ТекстОповещения, , ПояснениеОповещения, КартинкаОповещения);
		Иначе
			ТекстСообщения = НСтр("ru = 'Договоры не были перезаписаны'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
		// Обновление формы.
		ЭтаФорма.Модифицированность = Ложь;
		ТаблицаРазмещение.Очистить();
		СчитатьДанные_Сервер(Истина);
	Иначе
		ТекстСообщения = НСтр("ru = 'Запись отменена'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	СтруктураПараметров = Новый Структура;
	ТекстВопроса = НСтр("ru = 'Размещённые потребности будут записаны в договоры. Продолжить?'");
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПодтверждениеЗаписиДоговоров_Завершение", ЭтаФорма, СтруктураПараметров);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеОчисткаРазмещения_Завершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЭтаФорма.Модифицированность = Ложь;
		ТаблицаРазмещение.Очистить();
		СчитатьДанные_Сервер(Истина);
	Иначе
		ТекстСообщения = НСтр("ru = 'Очистка размещения потребностей отменена'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры		// ПодтверждениеОчисткаРазмещения_Завершение()

&НаКлиенте
Процедура ОтменитьИзменения(Команда)
	СтруктураПараметров = Новый Структура;
	ТекстВопроса = НСтр("ru = 'Размещения потребностей будут очищены. Продолжить?'");
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПодтверждениеОчисткаРазмещения_Завершение", ЭтаФорма, СтруктураПараметров);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
КонецПроцедуры

&НаКлиенте
Процедура РазместитьВНовойВерсии(Команда)
	ТекДанные = Элементы.ТаблицаДоговоров.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ВыбранныйДоговор = ТекДанные.Договор;
		РазместитьВНовойВерсии_Сервер(ТекДанные.Договор);
		СчитатьДанные_Сервер(Ложь);
	Иначе
		ТекстСообщения = НСтр("ru = 'Требуется выбрать договор для размещения потребности. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПотребностиИспользованиеПриИзменении(Элемент)
	УправлениеДоступностью(ЭтаФорма);
	ОбновитьПодвалПотребности();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием_Завершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
	Иначе
		// Пользователь отказался.
	КонецЕсли;	
КонецПроцедуры		// ПередЗакрытием_Завершение()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если (ЭтаФорма.Модифицированность) И (Не ВыполняетсяЗакрытие) Тогда
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытием_Завершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Не все изменения были сохранены. Закрытие приведёт к потере выполненных изменений. Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		// Закрываем безусловно.
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтборПриИзменении(Элемент)
	СчитатьДанные_Сервер(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОтборПриИзменении(Элемент)
	СчитатьДанные_Сервер(Истина);
КонецПроцедуры

&НаКлиенте
Процедура МестоПоставкиОтборПриИзменении(Элемент)
	СчитатьДанные_Сервер(Истина);
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураОтборПриИзменении(Элемент)
	СчитатьДанные_Сервер(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатураДоговораПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ТекДанные = Элементы.ТаблицаДоговоров.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		МассивРазмещение = Новый Массив;
		ВыбранныйДоговор = ТекДанные.Договор;
		Для Каждого ТекЗначение Из ПараметрыПеретаскивания.Значение Цикл
			СтруктураРазмещение = ПеренестиДанныеРазмещениеВСтруктуру(ТекЗначение);
			СтруктураРазмещение.Вставить("Использование",		 ТекЗначение.Использование);
			СтруктураРазмещение.Вставить("Количество",			 ТекЗначение.Количество);
			СтруктураРазмещение.Вставить("Сумма",				 ТекЗначение.Сумма);
			МассивРазмещение.Добавить(СтруктураРазмещение);
		КонецЦикла;	
		РазместитьМассивПеретаскивания(МассивРазмещение, ТекДанные.ВерсияСоглашения);
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатураДоговораПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Попытка
		ТекДанные = Элементы.ТаблицаДоговоров.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;
			Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") Тогда
				Если ЗначениеПеретаскивания.Количество() > 0 Тогда
					ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
				Иначе
					СтандартнаяОбработка = Ложь;
					ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
				КонецЕсли;
			Иначе
				СтандартнаяОбработка = Ложь;
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			КонецЕсли;
		Иначе
			СтандартнаяОбработка = Ложь;
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		КонецЕсли;
	Исключение
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоговоровПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ЗначениеЗаполнено(Строка) Тогда
		ДанныеСтроки = ТаблицаДоговоров.НайтиПоИдентификатору(Строка);
		Если ДанныеСтроки <> Неопределено Тогда
			МассивРазмещение = Новый Массив;
			ВыбранныйДоговор = ДанныеСтроки.Договор;
			Для Каждого ТекЗначение Из ПараметрыПеретаскивания.Значение Цикл
				СтруктураРазмещение = ПеренестиДанныеРазмещениеВСтруктуру(ТекЗначение);
				СтруктураРазмещение.Вставить("Использование",		 ТекЗначение.Использование);
				СтруктураРазмещение.Вставить("Количество",			 ТекЗначение.Количество);
				СтруктураРазмещение.Вставить("Сумма",				 ТекЗначение.Сумма);
				МассивРазмещение.Добавить(СтруктураРазмещение);
			КонецЦикла;	
			РазместитьМассивПеретаскивания(МассивРазмещение, ДанныеСтроки.ВерсияСоглашения);
		Иначе
			// Строка не найдена. Не добавляем.
		КонецЕсли;
	Иначе
		// Строка не выбрана. Не добавляем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоговоровПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Попытка
		Если ЗначениеЗаполнено(Строка) Тогда
			ДанныеСтроки = ТаблицаДоговоров.НайтиПоИдентификатору(Строка);
			Если ДанныеСтроки <> Неопределено Тогда
				ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;
				Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") Тогда
					Если ЗначениеПеретаскивания.Количество() > 0 Тогда
						ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
					Иначе
						СтандартнаяОбработка = Ложь;
						ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
					КонецЕсли;
				Иначе
					СтандартнаяОбработка = Ложь;
					ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
				КонецЕсли;
			Иначе
				СтандартнаяОбработка = Ложь;
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			КонецЕсли;
		Иначе
			СтандартнаяОбработка = Ложь;
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		КонецЕсли;	
	Исключение
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатураДоговораПередНачаломИзменения(Элемент, Отказ)
	// Проверим, что это изменяемая строка.
	ТекДанные = Элементы.ТаблицаНоменклатураДоговора.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если (НЕ ТекДанные.Изменена) ИЛИ (НЕ ЗначениеЗаполнено(ТекДанные.ИдентификаторРазмещения)) Тогда
			Отказ = Истина;
		Иначе
			// Проверка пройдена.
		КонецЕсли;	
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатураДоговораКоличествоПриИзменении(Элемент)
	ТекДанные = Элементы.ТаблицаНоменклатураДоговора.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		// Обновим Количество.
		ТекДанныеДоговор = Элементы.ТаблицаДоговоров.ТекущиеДанные;
		Если ТекДанныеДоговор <> Неопределено Тогда
			ВыбранныйДоговор = ТекДанныеДоговор.Договор;
		Иначе
			// Строка не выбрана. Ничего не делаем.
		КонецЕсли;
		ТекИдентификаторРазмещения = ТекДанные.ИдентификаторРазмещения;
		ТекКоличество = ТекДанные.Количество;
		ИзменитьРазмещеннуюПотребностьКоличество(ТекИдентификаторРазмещения, ТекКоличество);
		// Пересчитаем Сумму.
		Если ТекДанные.Цена <> 0 Тогда
			НоваяСумма = ТекДанные.Количество * ТекДанные.Цена;
			ТекДанные.Сумма = НоваяСумма;
			// Обновим Сумму.
			ИзменитьРазмещеннуюПотребностьСумма(ТекИдентификаторРазмещения, НоваяСумма);
		Иначе
			// Не обновляем цену.
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуРазмещения(Команда)
	ТекДанные = Элементы.ТаблицаНоменклатураДоговора.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекДанныеДоговор = Элементы.ТаблицаДоговоров.ТекущиеДанные;
		Если ТекДанныеДоговор <> Неопределено Тогда
			ВыбранныйДоговор = ТекДанныеДоговор.Договор;
		Иначе
			// Строка не выбрана. Ничего не делаем.
		КонецЕсли;
		ТекИдентификаторРазмещения = ТекДанные.ИдентификаторРазмещения;
		ИзменитьРазмещеннуюПотребностьКоличество(ТекИдентификаторРазмещения, 0);
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатураДоговораПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.ТаблицаНоменклатураДоговора.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ЭтоСтрокаРазмещения = ((ТекДанные.Изменена) И (ЗначениеЗаполнено(ТекДанные.ИдентификаторРазмещения)));
		Элементы.ТаблицаНоменклатураДоговораУдалитьСтрокуРазмещения.Доступность = ЭтоСтрокаРазмещения;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РежимОтображенияДоговоровПриИзменении(Элемент)
	СчитатьДанные_Сервер(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатураДоговораСуммаПриИзменении(Элемент)
	ТекДанные = Элементы.ТаблицаНоменклатураДоговора.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекДанныеДоговор = Элементы.ТаблицаДоговоров.ТекущиеДанные;
		Если ТекДанныеДоговор <> Неопределено Тогда
			ВыбранныйДоговор = ТекДанныеДоговор.Договор;
		Иначе
			// Строка не выбрана. Ничего не делаем.
		КонецЕсли;
		ТекИдентификаторРазмещения = ТекДанные.ИдентификаторРазмещения;
		ТекСумма = ТекДанные.Сумма;
		ИзменитьРазмещеннуюПотребностьСумма(ТекИдентификаторРазмещения, ТекСумма);
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварнаяКатегорияОтборПриИзменении(Элемент)
	СчитатьДанные_Сервер(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиОтборНоменклатуры(Команда)
	// Получение выбранной номенклатуры.
	МассивНоменклатуры = Новый Массив;
	Для Каждого ТекТаблицаПотребности Из ТаблицаПотребности Цикл
		Если ТекТаблицаПотребности.Использование Тогда
			МассивНоменклатуры.Добавить(ТекТаблицаПотребности.Номенклатура);
		Иначе
			// Не выбрана строка. Пропускаем.
		КонецЕсли;
	КонецЦикла;	
	МассивНоменклатуры = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивНоменклатуры);
	МассивНоменклатуры = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивНоменклатуры);
	// Добавление номенклатуры в отбор.
	НоменклатураОтбор.Очистить();
	Для Каждого ТекМассивНоменклатуры Из МассивНоменклатуры Цикл
		НоменклатураОтбор.Добавить(ТекМассивНоменклатуры);
	КонецЦикла;	
	// Обновление данных на форме с учётом нового отбора.
	СчитатьДанные_Сервер(Истина);
КонецПроцедуры

ВыполняетсяЗакрытие = Ложь;