
#Область ОбработкаОсновныхСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КолонкиРасхождения = УправлениеФормойУХ.ПолучитьСтрокуРеквизитовФормы(ЭтаФорма, "Расхождения");
	Пользователь = Пользователи.ТекущийПользователь();
	флПолныеПрава = ПолныеПраваУХ.ПроверитьНаличиеПолныхПравУПользователя(Пользователь);
	
	СтарПериметрСверки = Документы.УправлениеПериодомСценария.ПустаяСсылка();
	СтарПериодСценария = Справочники.Периоды.ПустаяСсылка();
	СтарСценарий = Справочники.Сценарии.ПустаяСсылка();
	СтарЭтап = Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка();
	
	Объект.ПериметрСверки = СверкаВГОУХ.ПолучитьПериметрПоСценариюИПериоду(Объект.Сценарий, Объект.ПериодСценария);
	
	ИнициализироватьИнтерфейсРасхождений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	мАналитикиКорреспонденции = Новый Массив;
	ЭтоОтветственноеЛицо = Ложь;
	ВалютаПредставленияПриИзменении(Элементы.ВалютаПредставления);
	УстановитьВидимостьКолонокРасхождений();
	ПериметрСверкиПриИзменении(Элементы.ПериметрСверки);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УрегулированиеРасхождения" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		ОбработкаСозданияДокументаУрегулирования(Параметр);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура ПрочитатьДанные(Команда)
	
	ОбновлениеИзвне = Ложь;
	ПодключитьОбработчикОжидания("ОбновитьДанныеНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетСостояниеСверки(Команда)
	
	ПараметрыОтчета_ = Новый Структура("СформироватьПриОткрытии", Истина);
	
	Если ЗначениеЗаполнено(Объект.Сценарий) И ЗначениеЗаполнено(Объект.ПериодСценария) Тогда
		ПараметрыОтбора = Новый Структура("ПериодСценария,Сценарий", Объект.ПериодСценария, Объект.Сценарий);
		
		Если ЗначениеЗаполнено(Объект.Этап) Тогда
			ПараметрыОтбора.Вставить("Этап", Объект.Этап);
		КонецЕсли;
			
		ТекСтрока = Элементы.Расхождения.ТекущиеДанные;
		Если ТекСтрока <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекСтрока.Организация) Тогда
				ПараметрыОтбора.Вставить("Организация", ТекСтрока.Организация);
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
				ПараметрыОтбора.Вставить("Контрагент", ТекСтрока.Контрагент);
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыОтчета_.Вставить("ПользовательскиеНастройки", ТиповыеОтчетыУХ.ПолучитьПользовательскиеНастройкиОтчета("ХодСверкиВГО", ПараметрыОтбора));
	КонецЕсли;
	
	ОткрытьФорму("Отчет.ХодСверкиВГО.Форма", ПараметрыОтчета_);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаАвтоурегулирование(Команда)
	ОткрытьМастерАвтоурегулирования();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУрегулированиеОбработчик(Команда)
	ТекСтрока = Элементы.Расхождения.ТекущаяСтрока;
	ДобавитьУрегулирование(ТекСтрока, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетШахматка(Команда)
	
	ПараметрыОтчета_ = Новый Структура("СформироватьПриОткрытии", Истина);
	
	Если ЗначениеЗаполнено(Объект.Сценарий) И ЗначениеЗаполнено(Объект.ПериодСценария) Тогда
		ПараметрыОтбора = Новый Структура("ПериодСверки,Сценарий", Объект.ПериодСценария, Объект.Сценарий);
		
		ТекСтрока = Элементы.Расхождения.ТекущиеДанные;
		Если ТекСтрока <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекСтрока.Организация) Тогда
				ПараметрыОтбора.Вставить("Организация", ТекСтрока.Организация);
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
				ПараметрыОтбора.Вставить("Контрагент", ТекСтрока.Контрагент);
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.РазделВГО) Тогда
				ПараметрыОтбора.Вставить("РазделВГО", ТекСтрока.РазделВГО);
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыОтчета_.Вставить("ПользовательскиеНастройки", ТиповыеОтчетыУХ.ПолучитьПользовательскиеНастройкиОтчета("ШахматкаВГО", ПараметрыОтбора));
	КонецЕсли;

	ОткрытьФорму("Отчет.ШахматкаВГО.Форма", ПараметрыОтчета_);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАктСверки(Команда)
	
	ПараметрыОтчета_ = Новый Структура("СформироватьПриОткрытии", Истина);
	
	Если ЗначениеЗаполнено(Объект.Сценарий) И ЗначениеЗаполнено(Объект.ПериодСценария) Тогда
		ПараметрыОтбора = Новый Структура("ПериодСверки,Сценарий", Объект.ПериодСценария, Объект.Сценарий);
		
		ТекСтрока = Элементы.Расхождения.ТекущиеДанные;
		Если ТекСтрока <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекСтрока.Организация) Тогда
				ПараметрыОтбора.Вставить("Организация", ТекСтрока.Организация);
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
				ПараметрыОтбора.Вставить("Контрагент", ТекСтрока.Контрагент);
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.РазделВГО) Тогда
				ПараметрыОтбора.Вставить("РазделВГО", ТекСтрока.РазделВГО);
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.ДопАналитикаРасхождения) Тогда
				ПараметрыОтбора.Вставить("ДопАналитикаРасхождения", ТекСтрока.ДопАналитикаРасхождения);
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.ВалютаВзаиморасчетов) Тогда
				ПараметрыОтбора.Вставить("ВалютаВзаиморасчетов", ТекСтрока.ВалютаВзаиморасчетов);
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыОтчета_.Вставить("ПользовательскиеНастройки", ТиповыеОтчетыУХ.ПолучитьПользовательскиеНастройкиОтчета("РасхожденияВГОДляПисьма", ПараметрыОтбора));
	КонецЕсли;
	
	ОткрытьФорму("Отчет.РасхожденияВГОДляПисьма.Форма", ПараметрыОтчета_);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзИерархииВСтроки(Команда)
	
	ТекСтрока = Элементы.Иерархия.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекДанные = Элементы.Иерархия.ТекущиеДанные;
	Если текДанные.Фиксировано Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДанные);
	Иерархия.Удалить(ТекДанные);
	ИзменилисьНастройки = Истина;
	ОчиститьРасхождения = Истина;
	Элементы.Иерархия.Обновить();
	Элементы.Строки.Обновить();
	
	ЭлементФормы = Элементы.Найти("Расхождения" + НоваяСтрока.Иерархия);
	Если ЭлементФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭлементФормы.Видимость = НоваяСтрока.Выбор;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзСтрокВИерархию(Команда)
	
	ТекСтрока = Элементы.Строки.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекДанные = Элементы.Строки.ТекущиеДанные;
	НоваяСтрока = Иерархия.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДанные);
	Строки.Удалить(ТекДанные);
	ИзменилисьНастройки = Истина;
	ОчиститьРасхождения = Истина;
	Элементы.Иерархия.Обновить();
	Элементы.Строки.Обновить();
	
	ЭлементФормы = Элементы.Найти("Расхождения" + НоваяСтрока.Иерархия);
	Если ЭлементФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементФормы.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийЭлементовФормы

&НаКлиенте
Процедура РасхожденияПриСменеТекущегоРодителяНеОбрабатывать(Элемент)
	// Устанавливаем для исключения вызова обновления данных в момент установки текущей строки из функции заполнения дерева.
КонецПроцедуры

&НаКлиенте
Процедура РасхожденияПриСменеТекущегоРодителя(Элемент)
	
	Если флНеОбновлятьАвтоматически ИЛИ УжеОбновляемРасхождения Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьДанныеНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеФильтрыПриИзменении(Элемент)
	
	Перем мОрганизаций;
	
	Если Объект[Элемент.Имя] = ЭтаФорма["Стар"+Элемент.Имя] Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма["Стар"+Элемент.Имя] = Объект[Элемент.Имя];
	
	Если Элемент.Имя <> "ОрганизацияОтбор" Тогда
		СтруктураОрганизаций = СверкаВГОВызовСервераУХ.ОрганизацииУчаствующиеВСверке(Объект.ПериодСценария, Объект.Сценарий, Пользователь);
		
		ДоступныеОрганизации = СтруктураОрганизаций.ОрганизацииПроверяем;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДоступныеОрганизации, СтруктураОрганизаций.ОрганизацииСогласуем, Истина);
		
		УстановитьСписокВыбораЭлемента(Элементы.ОрганизацияОтбор, ДоступныеОрганизации, Объект, "ОрганизацияОтбор");
		УстановитьСписокВыбораЭлемента(Элементы.КонтрагентОтбор, СтруктураОрганизаций.ВсеОрганизации, ЭтаФорма, "КонтрагентОтбор");
		
		ОрганизацииСогласуем.ЗагрузитьЗначения(СтруктураОрганизаций.ОрганизацииСогласуем);
	КонецЕсли;
	
	Если флАвтоматическиРсчитыватьРасхождения И ЗначениеЗаполнено(Объект.Сценарий) И ЗначениеЗаполнено(Объект.ПериодСценария) И ЗначениеЗаполнено(Объект.Этап) Тогда
		ОтборДанных = Новый Структура("ПериодСценария,Сценарий,Этап", Объект.ПериодСценария, Объект.Сценарий, Объект.Этап);
		СверкаВГОВызовСервераУХ.УбедитьсяЧтоРасхожденияРасчитаны(ОтборДанных);
	КонецЕсли;
	
	Если НЕ флНеОбновлятьАвтоматически Тогда
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя <> "ГруппаСверкаУрегулирование" Тогда
			ИзменилисьНастройки = Истина;
		Иначе
			ОбновлениеИзвне = Ложь;
			ПодключитьОбработчикОжидания("ОбновитьДанныеНаКлиенте", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасхожденияПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элемент.Имя = "Расхождения" И Элемент.ТекущийЭлемент.Имя = "РасхожденияСпор" Тогда
		ТекСтрока = Элемент.ТекущиеДанные;
		Если ЗначениеЗаполнено(Объект.Сценарий) И ЗначениеЗаполнено(Объект.ПериодСценария)
			И ЗначениеЗаполнено(Объект.Этап) И ЗначениеЗаполнено(ТекСтрока.Отправитель)
			И ЗначениеЗаполнено(ТекСтрока.Получатель) И ЗначениеЗаполнено(ТекСтрока.РазделВГО)
			И ЗначениеЗаполнено(ТекСтрока.ВалютаВзаиморасчетов)
			И (НЕ ТекСтрока.флЕстьДопАналитики ИЛИ ЗначениеЗаполнено(ТекСтрока.ДопАналитикаРасхождения))
			И ТекСтрока.Иерархия <> "Регистратор" Тогда
			
		    ЭтоОтветственноеЛицо = ОрганизацииСогласуем.НайтиПоЗначению(ТекСтрока.Организация) <> Неопределено;
			Если ЭтоОтветственноеЛицо Тогда
				Отказ = Ложь;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Элемент.Имя = "Расхождения" И Элемент.ТекущийЭлемент.Имя = "РасхожденияСверкаЗакрыта" Тогда
		ТекСтрока = Элемент.ТекущиеДанные;
		Если ЗначениеЗаполнено(Объект.Сценарий) И ЗначениеЗаполнено(Объект.ПериодСценария) И ЗначениеЗаполнено(Объект.Этап)
			И ТекСтрока.Иерархия <> "Регистратор" И ЗначениеЗаполнено(ТекСтрока.Отправитель) И ЗначениеЗаполнено(ТекСтрока.Получатель)
			И ЗначениеЗаполнено(ТекСтрока.СторонаСверки) Тогда
			
			НачатьИзменениеФлагаЗакрытияСверки(Элемент.ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасхожденияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "РасхожденияНашаАналитика" Тогда
		СтрРасхождения = Расхождения.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если СтрРасхождения.Иерархия = "Регистратор" Тогда
			Если ТипЗнч(СтрРасхождения.НашаАналитика) = Тип("ДокументСсылка.УрегулированиеРасхожденияВГО") Тогда
				Параметры_ = Новый Структура("Ключ", СтрРасхождения.НашаАналитика);
				ОткрытьФорму("Документ.УрегулированиеРасхожденияВГО.ФормаОбъекта",
					Параметры_, ЭтаФорма, Истина,,,,
					РежимОткрытияОкнаФормы.Независимый);
			КонецЕсли;
		Иначе
			Если ТекущийУровень > СтрРасхождения.Уровень Тогда
				УжеОбновляемРасхождения = Истина;
				Элементы.Расхождения.ТекущийРодитель = ВыбраннаяСтрока;
				Элементы.Расхождения.ТекущаяСтрока = ВыбраннаяСтрока;
				УжеОбновляемРасхождения = Ложь;
				ПодключитьОбработчикОжидания("ОбновитьДанныеНаКлиенте", 0.1, Истина);
			Иначе
				Элементы.Расхождения.Развернуть(ВыбраннаяСтрока);
				ЭлементыСтроки = СтрРасхождения.ПолучитьЭлементы();
				Если ЭлементыСтроки.Количество() > 0 Тогда
					ИдСтроки = ЭлементыСтроки[0].ПолучитьИдентификатор();
					УжеОбновляемРасхождения = Истина;
					Элементы.Расхождения.ТекущийРодитель = ИдСтроки;
					Элементы.Расхождения.ТекущаяСтрока = ИдСтроки;
					УжеОбновляемРасхождения = Ложь;
					ПодключитьОбработчикОжидания("ОбновитьДанныеНаКлиенте", 0.1, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "РасхожденияПричинаРасхождения" Тогда
		СтандартнаяОбработка = Ложь;
		Если ВыбраннаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ДобавитьУрегулирование(ВыбраннаяСтрока, Истина);
		
	ИначеЕсли Поле.Имя = "РасхожденияКомментарии" Тогда
		СтандартнаяОбработка = Ложь;
		Если ВыбраннаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекстОшибки = "";
		КомментироватьВыбраннуюСтрокуРасхождения(ВыбраннаяСтрока, ТекстОшибки);
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстОшибки;
			Сообщение.Сообщить();
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "РасхожденияСуммаНаша"	ИЛИ Поле.Имя = "РасхожденияСуммаНашаГр" Тогда
		СтандартнаяОбработка = Ложь;
		РасшифроватьСтроку(ВыбраннаяСтрока, Истина);
		
	ИначеЕсли Поле.Имя = "РасхожденияСуммаКонтрагента" ИЛИ Поле.Имя = "РасхожденияСуммаКонтрагентаФункц"
			ИЛИ Поле.Имя = "РасхожденияСуммаКонтрагентаГр" Тогда
		СтандартнаяОбработка = Ложь;
		РасшифроватьСтроку(ВыбраннаяСтрока, Ложь);
	
	ИначеЕсли (Поле.Имя = "РасхожденияРасхождение"
			ИЛИ Поле.Имя = "РасхожденияРасхождениеГр"
			ИЛИ Поле.Имя = "РасхожденияОсталосьУрегулировать"
			ИЛИ Поле.Имя = "РасхожденияУрегулировано"
			ИЛИ Поле.Имя = "РасхожденияОсталосьУрегулироватьГр"
			ИЛИ Поле.Имя = "РасхожденияУрегулированоГр"
			ИЛИ Поле.Имя = "РасхожденияРасхождениеГрДляСортировки"
			ИЛИ Поле.Имя = "РасхожденияПроцентНеурегулированных")
			И НЕ ТолькоСтатистика Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьУрегулирование(ВыбраннаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасхожденияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	ВыбраннаяСтрока = Элемент.текущаяСтрока;
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДобавитьУрегулирование(ВыбраннаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура РасхожденияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РасхожденияСпорПриИзменении(Элемент)
	
	Если Элемент.Имя = "РасхожденияСпор" Тогда
		
		ТекСтрока = Элементы.Расхождения.текущиеДанные;
		Если ТекСтрока <> неопределено Тогда
			ТекСтрока.ДатаНачалаСпора = ТекущаяДата();
			ПараметрыСпора = Новый Структура("ПериодСценария,Сценарий,Этап,Пользователь,"+КолонкиРасхождения, Объект.ПериодСценария, Объект.Сценарий, Объект.Этап, Пользователь);
			ЗаполнитьЗначенияСвойств(ПараметрыСпора, ТекСтрока);
			
			ТекстОшибки = "";
			УстановитьСостояниеСпораНаСервере(ПараметрыСпора, ТекстОшибки);
			
			Если ТекстОшибки <> "" Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстОшибки;
				Сообщение.Сообщить();
			КонецЕсли;
			
			ОбновлениеИзвне = Ложь;
			ПодключитьОбработчикОжидания("ОбновитьДанныеНаКлиенте", 0.1, Истина);
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура флОтборФлагПриИзменении(Элемент)
	
	Если флНеОбновлятьАвтоматически Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя <> "ГруппаСверкаУрегулирование" Тогда
		ИзменилисьНастройки = Истина;
	Иначе
		ОбновлениеИзвне = Ложь;
		ПодключитьОбработчикОжидания("ОбновитьДанныеНаКлиенте", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПредставленияПриИзменении(Элемент)
	
	Если ВалютаПредставления = ПредопределенноеЗначение("Перечисление.ВалютыПорталаСверкиВГО.ВалютаВзаиморасчетов") Тогда
		СуффиксСуммовыхПоказателей = "";
	ИначеЕсли ВалютаПредставления = ПредопределенноеЗначение("Перечисление.ВалютыПорталаСверкиВГО.ФункциональнаяВалюта") Тогда
		СуффиксСуммовыхПоказателей = "Функц";
	ИначеЕсли ВалютаПредставления = ПредопределенноеЗначение("Перечисление.ВалютыПорталаСверкиВГО.ВалютаГруппы") Тогда
		СуффиксСуммовыхПоказателей = "Гр";
	КонецЕсли;
	
	УстановитьВидимостьКолонокРасхождений();
	
	Если НЕ флНеОбновлятьАвтоматически Тогда
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя <> "ГруппаСверкаУрегулирование" Тогда
			ИзменилисьНастройки = Истина;
		Иначе
			ОбновлениеИзвне = Ложь;
			ПодключитьОбработчикОжидания("ОбновитьДанныеНаКлиенте", 0.1, Истина);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КолонкиВыборПриИзменении(Элемент)
	
	ТекКолонка = Элементы.Колонки.ТекущиеДанные;
	Если ТекКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементФормы = Элементы.Найти("Расхождения" + ТекКолонка.Имя);
	Если ЭлементФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементФормы.Видимость = ТекКолонка.Выбор;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериметрСверкиПриИзменении(Элемент)
	Если Объект.ПериметрСверки = СтарПериметрСверки Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПериметрСверки) Тогда
		СценарийПериод = ПолучитьСценарийПериодНаСервере(Объект.ПериметрСверки);
		Объект.Сценарий = СценарийПериод.Сценарий;
		Объект.ПериодСценария = СценарийПериод.ПериодСценария;
		Объект.Этап = СценарийПериод.Этап;
	КонецЕсли;
	
	ОсновныеФильтрыПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИерархияПриИзменении(Элемент)
	
	ИзменилисьНастройки = Истина;
	ОчиститьРасхождения = Истина;
	ИерархияТекДанные = Элемент.ТекущиеДанные;
	Если ИерархияТекДанные <> Неопределено И ИерархияТекДанные.Иерархия = "РазделВГО" Тогда
		Если ИерархияТекДанные.Выбор Тогда
			Элементы.флМеньшеПорогаСущественности.Доступность = Истина;
		Иначе
			флМеньшеПорогаСущественности = Ложь;
			Элементы.флМеньшеПорогаСущественности.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если флНеОбновлятьАвтоматически Тогда
		Возврат;
	КонецЕсли;
	
	Если ИзменилисьНастройки И ТекущаяСтраница.Имя = "ГруппаСверкаУрегулирование" Тогда
		Если ОчиститьРасхождения = Истина Тогда
			Расхождения.ПолучитьЭлементы().Очистить();
			ОчиститьРасхождения = Ложь;
		КонецЕсли;
		ТекущийУровень = 1;
		АдресТекущейСтрокиРасхождения.Очистить();
		ОбновлениеИзвне = Ложь;
		ПодключитьОбработчикОжидания("ОбновитьДанныеНаКлиенте", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияПередНачаломИзменения(Элемент, Отказ)
	// обрабатываем запрет измненеия фиксированных
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если текДанные.Фиксировано Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтрокиПриИзменении(Элемент)
	ИзменилисьНастройки = Истина;
	ОчиститьРасхождения = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПриИзменении(Элемент)
	ИзменилисьНастройки = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СтрокиВыборПриИзменении(Элемент)
	
	ТекКолонка = Элементы.Строки.ТекущиеДанные;
	Если ТекКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементФормы = Элементы.Найти("Расхождения" + ТекКолонка.Иерархия);
	Если ЭлементФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементФормы.Видимость = ТекКолонка.Выбор;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОтборПриИзменении(Элемент)
	
	Если НЕ флНеОбновлятьАвтоматически Тогда
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя <> "ГруппаСверкаУрегулирование" Тогда
			ИзменилисьНастройки = Истина;
		Иначе
			ОбновлениеИзвне = Ложь;
			ПодключитьОбработчикОжидания("ОбновитьДанныеНаКлиенте", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыНаКлиенте

&НаКлиенте
Функция ОбновитьДанныеНаКлиенте()
	Перем флОбновилиДерево;
	
	Если Элементы.ОрганизацияОтбор.СписокВыбора.Количество() = 0 Тогда
		Расхождения.ПолучитьЭлементы().Очистить();
		Возврат Ложь;
	КонецЕсли;
	
	флОбновилиДерево = ложь;
	Если УжеОбновляемРасхождения Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОбновлениеИзвне Тогда
		ОбновлениеИзвне = Ложь;
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Сценарий) И ЗначениеЗаполнено(Объект.ПериодСценария)
		И ЗначениеЗаполнено(Объект.Этап) Тогда
		
		УжеОбновляемРасхождения = Истина;
		ИзменилисьНастройки = Ложь;
		
		Попытка
			ПараметрыСверки = Новый Структура;
			// получаем список колонок дерева расхождений
			ПараметрыСверки.Вставить("КолонкиРасхождения", КолонкиРасхождения);
			
			// запоминаем адрес текущей строки
			флИерархияСтроки = РасчитатьАдресТекущейСтрокиРасхождения();
			
			ПараметрыСверки.Вставить("Сценарий", Объект.Сценарий);
			ПараметрыСверки.Вставить("ПериодСценария", Объект.ПериодСценария);
			ПараметрыСверки.Вставить("Этап", Объект.Этап);
			
			// Отбор по всем доступным пользователю организациям
			Если ЗначениеЗаполнено(Объект.ОрганизацияОтбор) И ЗначениеЗаполнено(КонтрагентОтбор) Тогда
				мОрганизацийОтбора = Новый Массив;
				мОрганизацийОтбора.Добавить(Объект.ОрганизацияОтбор);
				мОрганизацийОтбора.Добавить(КонтрагентОтбор);
				ПараметрыСверки.Вставить("ТолькоПоОрганизациям", мОрганизацийОтбора);
			ИначеЕсли Элементы.ОрганизацияОтбор.СписокВыбора.Количество() > 0 Тогда
				ПараметрыСверки.Вставить("ТолькоПоОрганизациям", Элементы.ОрганизацияОтбор.СписокВыбора.ВыгрузитьЗначения()); 
			КонецЕсли;
			
			// Отбор по основной организации
			Если ЗначениеЗаполнено(Объект.ОрганизацияОтбор) Тогда
				ПараметрыСверки.Вставить("ОрганизацияОтбор", Объект.ОрганизацияОтбор);
			КонецЕсли;
			
			// Отбор по организации-контрагенту
			Если ЗначениеЗаполнено(КонтрагентОтбор) Тогда
				ПараметрыСверки.Вставить("КонтрагентОтбор", КонтрагентОтбор);
			КонецЕсли;
			
			ПараметрыСверки.Вставить("АдресТекСтроки", АдресТекущейСтрокиРасхождения);
			
			МассивИерархий = Новый Массив;
			НомУровня = 1;
			НомСтрокиВалюты = 100; // номер строки иерархии с валютой взаиморасчетов
			НомСтрокиОрганизации = 100; // номер строки иерархии с организацией
			ДЛя Каждого элементИерархии Из Иерархия Цикл
				Если НЕ элементИерархии.Выбор Тогда
					Продолжить;
				КонецЕсли;
				СтруктИ = Новый Структура("Иерархия,Уровень,Отбор,Значение,ВидСравнения,Строка");
				Если элементИерархии.Иерархия = "ВалютаВзаиморасчетов" Тогда
					НомСтрокиВалюты = НомУровня;
				ИначеЕсли элементИерархии.Иерархия = "Организация" Тогда
					НомСтрокиОрганизации = НомУровня;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтруктИ, элементИерархии);
				СтруктИ.Строка = Ложь;
				СтруктИ.Уровень = НомУровня;
				МассивИерархий.Добавить(СтруктИ);
				НомУровня = НомУровня + 1;
			КонецЦикла;
			
			ПараметрыСверки.Вставить("СтрокаРасшифровки", НомУровня-1); // начиная с этой строки вся иерархия идет не разворачивается, а показывается в одну строку
			// если есть строки, то добавим еще один уровень иерархии
			ВыбранныеСтроки = Строки.НайтиСтроки(Новый Структура("Выбор", Истина));
			КолСтрок = ВыбранныеСтроки.Количество();
			Если КолСтрок > 0 Тогда
				Если флИерархияСтроки = Истина Тогда
					// добавим в иерархию все аналитики строки
					Для Каждого СтрСтрока Из ВыбранныеСтроки Цикл
						СтруктИ = Новый Структура("Иерархия,Уровень,Отбор,Значение,ВидСравнения,Строка");
						Если СтрСтрока.Иерархия = "ВалютаВзаиморасчетов" Тогда
							НомСтрокиВалюты = НомУровня;
						ИначеЕсли СтрСтрока.Иерархия = "Оргнизация" Тогда
							НомСтрокиОрганизации = НомУровня;
						КонецЕсли;
						ЗаполнитьЗначенияСвойств(СтруктИ, СтрСтрока);
						СтруктИ.Строка = Истина;
						СтруктИ.Уровень = НомУровня;
						МассивИерархий.Добавить(СтруктИ);
						НомУровня = НомУровня;
						НомУровня = НомУровня + 1;
					КонецЦикла;
					КолСтрок = КолСтрок - 1;
				Иначе	
					СтруктИ = Новый Структура("Иерархия,Уровень,Отбор,Значение,ВидСравнения,Строка");
					СтруктИ.Иерархия = "Строка";
					СтруктИ.Отбор = Ложь;
					СтруктИ.Строка = Истина;
					СтруктИ.Уровень = НомУровня;
					МассивИерархий.Добавить(СтруктИ);
					НомУровня = НомУровня;
					НомУровня = НомУровня + 1;
					КолСтрок = 0;
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыСверки.Вставить("НомСтрокиОрганизации", НомСтрокиОрганизации);
			ПараметрыСверки.Вставить("НомСтрокиВалюты", НомСтрокиВалюты);
			ПараметрыСверки.Вставить("КолСтрок", КолСтрок);
			ПараметрыСверки.Вставить("ТекУровень", ТекущийУровень);
			ПараметрыСверки.Вставить("Иерархия", МассивИерархий);
			ПараметрыСверки.Вставить("МаксУровень", НомУровня-1); // максимальный уровень до которго может пройти пользователь
			
			ВыбранныеСтрокиСортировки = Сортировка.НайтиСтроки(Новый Структура("Выбор", Истина));
			мСортировка = Новый Массив;
			Для Каждого СтрСортировки Из ВыбранныеСтрокиСортировки Цикл
				СтруктСортировки = Новый Структура("Имя,Направление");
				ЗаполнитьЗначенияСвойств(СтруктСортировки, СтрСортировки);
				мСортировка.Добавить(СтруктСортировки);
			КонецЦикла;
			ПараметрыСверки.Вставить("Сортировка", мСортировка);
			
			Отбор_ = Новый Структура();
			Если флЕстьКомментарий Тогда
				Отбор_.Вставить("ЕстьКомментарий", Истина);
			КонецЕсли;
			Если флМеньшеПорогаСущественности Тогда
				Отбор_.Вставить("МеньшеПорогаСущественности", Истина);
			КонецЕсли;
			Если флОтборСпор Тогда
				Отбор_.Вставить("Спор", Истина);
			КонецЕсли;
			Если флНеУрегулированы Тогда
				Отбор_.Вставить("НеУрегулированы", Истина);
			КонецЕсли;
			Если флУрегулированы Тогда
				Отбор_.Вставить("Урегулированы", Истина);
			КонецЕсли;

			Если флЭлиминированы Тогда
				Отбор_.Вставить("Элиминированы", флЭлиминированы);
			КонецЕсли;
			
			ПараметрыСверки.Вставить("Отбор", Отбор_);
			ПараметрыСверки.Вставить("ВалютаПредставления", ВалютаПредставления);
			ПараметрыСверки.Вставить("ТолькоСтатистика", ТолькоСтатистика);
			
			ДанныеДеревоРасхождений = ПолучитьРасхождения(ПараметрыСверки, флОтладка);
			Если ДанныеДеревоРасхождений <> Неопределено Тогда
				// значения иерархии и текущий уровень сохранили в адресе, очищаем чтобы передать на сервер только структуру колонок
				Если Расхождения.ПолучитьЭлементы().Количество() > 0 Тогда
					флОбновилиДерево = Истина;
				КонецЕсли;
				
				УправлениеФормойКлиентСерверУХ.РаспаковатьДанныеФормыДерево(ДанныеДеревоРасхождений, Расхождения, Элементы.Расхождения);
				
			КонецЕсли;
			
			УжеОбновляемРасхождения = Ложь;
		Исключение
			УжеОбновляемРасхождения = Ложь;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();
		КонецПопытки;
		
	КонецЕсли;
	
	УстановитьОформлениеФормы();
	
	Возврат флОбновилиДерево;
	
КонецФункции

// Загружает список значений элемента из массива, устанавливает значение выбора, если можно выбрать только одно значение.
// Параметры:
//	Элемент - элемент формы для которого будет загружен список выбора.
//	МассивЗначений - значения для загрузки.
//	ОбъектРеквизита - объект, реквизиту (ИмяРеквизитаОбъекта) которого будет присвоено значение.
//	ИмяРеквизитаОбъекта - Строка, если указано, то в случае, если в массиве только одно значение,
//		оно будет присвоено указанному реквизиту объекта (ОбъектРеквизита).
//
&НаКлиенте
Процедура УстановитьСписокВыбораЭлемента(Элемент, МассивЗначений, ОбъектРеквизита, ИмяРеквизитаОбъекта)
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	
	Если МассивЗначений.Количество() = 1 Тогда
		//Объект.ОрганизацияОтбор = ДоступныеОрганизации[0];
		//КонтрагентОтбор = СтруктураОрганизаций.ВсеОрганизации[0];
		ОбъектРеквизита[ИмяРеквизитаОбъекта] = МассивЗначений[0];
	Иначе
		Если МассивЗначений.Найти(ОбъектРеквизита[ИмяРеквизитаОбъекта]) = Неопределено Тогда
			//Объект.ОрганизацияОтбор = Неопределено;
			ОбъектРеквизита[ИмяРеквизитаОбъекта] = Неопределено;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКолонокРасхождений()
	
	Суффиксы = Новый Массив;
	Суффиксы.Добавить("");
	Суффиксы.Добавить("Функц");
	Суффиксы.Добавить("Гр");
	
	Для Каждого Колонка_ Из Колонки Цикл
		Если Колонка_.ЕстьСуффикс Тогда
			ДЛя Каждого Суффикс_ Из Суффиксы Цикл
				ЭлементФормы = Элементы.Найти("Расхождения" + Колонка_.Имя + Суффикс_);
				Если ЭлементФормы <> Неопределено Тогда
					ЭлементФормы.Видимость = ?(Суффикс_=СуффиксСуммовыхПоказателей, Колонка_.Выбор, Ложь);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЭлементФормы = Элементы.Найти("Расхождения" + Колонка_.Имя);
			Если ЭлементФормы <> Неопределено Тогда
				ЭлементФормы.Видимость = Колонка_.Выбор;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьСтроку(ВыбраннаяСтрока, ЭтоОтправитель)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрРасхождения = Расхождения.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрРасхождения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мПоляРасшифровки = Новый Структура;
	мПоляРасшифровки.Вставить("ПериодСверки", 	Объект.ПериодСценария);
	мПоляРасшифровки.Вставить("ПериодСценария", Объект.ПериодСценария);
	мПоляРасшифровки.Вставить("Сценарий", 		Объект.Сценарий);
	мПоляРасшифровки.Вставить("Этап", 			Объект.Этап);
	
	Если ЗначениеЗаполнено(СтрРасхождения.СторонаСверки) Тогда
		СторонаСверкиДляРасшифровки = СтрРасхождения.СторонаСверки;
		Если НЕ ЭтоОтправитель Тогда
			// меняем сторону на сторону контрагента
			Если СторонаСверкиДляРасшифровки = ПредопределенноеЗначение("Перечисление.СтороныСверкиВГО.Кредитор") Тогда
				СторонаСверкиДляРасшифровки = ПредопределенноеЗначение("Перечисление.СтороныСверкиВГО.Дебитор")
			Иначе
				СторонаСверкиДляРасшифровки = ПредопределенноеЗначение("Перечисление.СтороныСверкиВГО.Кредитор")
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	мПоляРасшифровки.Вставить("СторонаСверки", СторонаСверкиДляРасшифровки);
	Если ЗначениеЗаполнено(СтрРасхождения.Организация) Тогда
		ОрганизацияДляРасшифровки = СтрРасхождения.Организация;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрРасхождения.Контрагент) Тогда
		КонтрагентДляРасшифровки = СтрРасхождения.Контрагент;
	КонецЕсли;
	
	Если ЭтоОтправитель Тогда
		мПоляРасшифровки.Вставить("Организация", ОрганизацияДляРасшифровки);
		мПоляРасшифровки.Вставить("Контрагент", КонтрагентДляРасшифровки);
	Иначе
		мПоляРасшифровки.Вставить("Организация", КонтрагентДляРасшифровки);
		мПоляРасшифровки.Вставить("Контрагент", ОрганизацияДляРасшифровки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрРасхождения.РазделВГО) Тогда
		мПоляРасшифровки.Вставить("РазделВГО", СтрРасхождения.РазделВГО);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрРасхождения.ВалютаВзаиморасчетов) Тогда
		мПоляРасшифровки.Вставить("ВалютаВзаиморасчетов", СтрРасхождения.ВалютаВзаиморасчетов);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрРасхождения.ДопАналитикаРасхождения) Тогда
		мПоляРасшифровки.Вставить("ДопАналитика", СтрРасхождения.ДопАналитикаРасхождения);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("Отбор", мПоляРасшифровки);	
	ОткрытьФорму("Отчет.РасшифровкаРасхожденийВГО.Форма", ПараметрыФормы, , Истина);
	
КонецПроцедуры

&НаКлиенте
Функция РасчитатьАдресТекущейСтрокиРасхождения()
	
	ТекДанныеСтроки = Элементы.Расхождения.ТекущиеДанные;
	Если ТекДанныеСтроки = Неопределено Тогда
		ТекущийУровень = 1;
	Иначе 
		ТекущийУровень = ТекДанныеСтроки.Уровень;
		Если ТекущийУровень = 0 Тогда
			ТекущийУровень = 1;
		КонецЕсли;
		ТекДанныеСтроки = ТекДанныеСтроки.ПолучитьРодителя();
	КонецЕсли;
	
	флИерархияСтроки = Ложь;
	АдресТекущейСтрокиРасхождения.Очистить();
	Пока ТекДанныеСтроки <> Неопределено Цикл
		НашаАналитика = ТекДанныеСтроки.НашаАналитика;
		Если НашаАналитика <> Неопределено Тогда
			Если ТекДанныеСтроки.Иерархия = "Строка" Тогда
				флИерархияСтроки = Истина;
				НомУровня = ТекДанныеСтроки.Уровень;
				Для Каждого СтрСтрока Из Строки Цикл
					Если НЕ СтрСтрока.Выбор Тогда
						Продолжить;
					КонецЕсли;
					ДанныеСтроки = ТекДанныеСтроки[СтрСтрока.Иерархия];
					Если ЗначениеЗаполнено(ДанныеСтроки) Тогда
						НоваяСтрока = АдресТекущейСтрокиРасхождения.Добавить();
						НоваяСтрока.Значение = ДанныеСтроки;
						НоваяСтрока.Имя = СтрСтрока.Иерархия;
						НоваяСтрока.Уровень = НомУровня;
						НомУровня = НомУровня + 1;
					КонецЕсли;
				КонецЦикла;
				ТекДанныеСтроки = ТекДанныеСтроки.ПолучитьРодителя();
			Иначе
				НоваяСтрока = АдресТекущейСтрокиРасхождения.Добавить();
				НоваяСтрока.Значение = НашаАналитика;
				НоваяСтрока.Имя = ТекДанныеСтроки.Иерархия;
				НоваяСтрока.Уровень = ТекДанныеСтроки.Уровень;
				ТекДанныеСтроки = ТекДанныеСтроки.ПолучитьРодителя();
			КонецЕсли;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат флИерархияСтроки;
	
КонецФункции

&НаКлиенте
Процедура НачатьИзменениеФлагаЗакрытияСверки(ТекСтрока)
	
	СтрРасхождения = Расхождения.НайтиПоИдентификатору(ТекСтрока);
		
	СтруктураРасхождения = Новый Структура("ПериодСценария,Сценарий,Этап,Пользователь,"+КолонкиРасхождения);
	
	ЗаполнитьЗначенияСвойств(СтруктураРасхождения, Объект);
	ЗаполнитьЗначенияСвойств(СтруктураРасхождения, СтрРасхождения);
	
	СтруктураРасхождения.Вставить("ДопАналитика", СтрРасхождения.ДопАналитикаРасхождения);
	СтруктураРасхождения.Вставить("СуммаУрегулирования", СтрРасхождения.ОсталосьУрегулировать);
	СтруктураРасхождения.Вставить("СуммаУрегулированияГр", СтрРасхождения.ОсталосьУрегулироватьГр);
	СтруктураРасхождения.Вставить("СуммаОрганизации", СтрРасхождения.СуммаНаша);
	СтруктураРасхождения.Вставить("СуммаКонтрагента", СтрРасхождения.СуммаКонтрагента);
	
	СтруктураРасхождения.СверкаЗакрыта = НЕ СтрРасхождения.СверкаЗакрыта;
	
	ЗакрытьСверкуНаКлиенте(СтруктураРасхождения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСверкуНаКлиенте(СтруктураРасхождения)
	
	Если НЕ флПолныеПрава Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ПроверитьЗафиксироватьСверкуНаСервере(СтруктураРасхождения, флОтладка);
	
	Если Результат.СообщениеОбОшибке <> "" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Результат.СообщениеОбОшибке;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если Результат.НеобходимоУрегулирование Тогда
		
		ДопПараметры = Новый Структура("ОписаниеОповещенияОЗакрытии");
		// Обработаем закрытие формы автоурегулирования повторным запуском функции
		ДопПараметры.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗафиксироватьСверкуПослеЗакрытияФормыАвтоурегулирования", ЭтаФорма, СтруктураРасхождения); 
		ОписаниеОповещенияОВыборе = Новый ОписаниеОповещения("ОбработатьВыборДействияАвтоурегулирования", ЭтаФорма, ДопПараметры);
		ТекстВопроса = НСтр("ru = 'Есть не урегулированные незначительные расхождения. Их необходимо урегулировать. Открыть форму мастера автоурегулирования?'");
		ПоказатьВопрос(ОписаниеОповещенияОВыборе, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Возврат;
	КонецЕсли;
	
	ОбновлениеИзвне = Ложь;
	ПодключитьОбработчикОжидания("ОбновитьДанныеНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеОкнаКомментированияНаКлиенте(РезультатЗакрытия, ДопПараметры) Экспорт
	Если ПустаяСтрока(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	
	СтрРасхождения = Расхождения.НайтиПоИдентификатору(ДопПараметры.ВыбраннаяСтрока);
	Если СтрРасхождения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрРасхождения.Комментарии = РезультатЗакрытия;
	
	Если НЕ ЗначениеЗаполнено(СтрРасхождения.ПредметКомментирования)
		И ЗначениеЗаполнено(ДопПараметры.ОписаниеПредметаКомментирования)
		И ЗначениеЗаполнено(ДопПараметры.ОписаниеПредметаКомментирования.ПредметКомментирования)
		Тогда
		
		СтрРасхождения.ПредметКомментирования = ДопПараметры.ОписаниеПредметаКомментирования.ПредметКомментирования;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДействияАвтоурегулирования(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещенияОЗакрытии = Неопределено;
	Если ДопПараметры <> Неопределено Тогда
		ДопПараметры.Свойство("ОписаниеОповещенияОЗакрытии", ОписаниеОповещенияОЗакрытии);
	КонецЕсли;
	
	ОткрытьМастерАвтоурегулирования(ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

// Открыть окно мастера автоурегулирования.
// Если передано оповещение о закрытии, то вызовет его после закрытия мастера.
//
&НаКлиенте
Процедура ОткрытьМастерАвтоурегулирования(ОписаниеОповещенияОЗакрытии=Неопределено)
	
	Если не ЗначениеЗаполнено(Объект.Сценарий) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Необходимо выбрать значение!'");
		Сообщение.Поле = "Объект.Сценарий";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(Объект.ПериодСценария) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Необходимо выбрать значение!'");
		Сообщение.Поле = "Объект.ПериодСценария";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(Объект.Этап) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Необходимо выбрать значение!'");
		Сообщение.Поле = "Объект.Этап";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ТекДанныеСтроки = Элементы.Расхождения.ТекущиеДанные;
	Если ТекДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор_ = Новый Структура();
	Если ЗначениеЗаполнено(ТекДанныеСтроки.ДопАналитикаРасхождения) Тогда
		Отбор_.Вставить("ДопАналитика", ТекДанныеСтроки.ДопАналитикаРасхождения);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанныеСтроки.ВалютаВзаиморасчетов) Тогда
		Отбор_.Вставить("ВалютаВзаиморасчетов", ТекДанныеСтроки.ВалютаВзаиморасчетов);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанныеСтроки.РазделВГО) Тогда
		Отбор_.Вставить("РазделВГО", ТекДанныеСтроки.РазделВГО);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанныеСтроки.Отправитель) Тогда
		Отбор_.Вставить("Кредитор", ТекДанныеСтроки.Отправитель);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанныеСтроки.Получатель) Тогда
		Отбор_.Вставить("Дебитор", ТекДанныеСтроки.Получатель);
	КонецЕсли;

	Параметры_ = Новый Структура("ПериодСверки, Сценарий, Этап, Отбор");
	Параметры_.ПериодСверки = Объект.ПериодСценария;
	Параметры_.Сценарий = Объект.Сценарий;
	Параметры_.Этап = Объект.Этап;
	Параметры_.Отбор = Отбор_;
	
	ОткрытьФорму("Обработка.ПорталСверкиВГО.Форма.АвтоматическоеУрегулирование", Параметры_, ЭтаФорма,,,, ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУрегулирование(ВыбраннаяСтрока, СпроситьПричинуРасхождения=Ложь)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрРасхождения = Расхождения.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если СтрРасхождения.СверкаЗакрыта Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрРасхождения.Иерархия <> "Регистратор" Тогда
		РодительРасхождения = СтрРасхождения;
	Иначе
		РодительРасхождения = СтрРасхождения.ПолучитьРодителя();
	КОнецЕсли;
	Если РодительРасхождения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (ЗначениеЗаполнено(СтрРасхождения.Отправитель) И ЗначениеЗаполнено(СтрРасхождения.Получатель) И 
		ЗначениеЗаполнено(СтрРасхождения.РазделВГО) И ЗначениеЗаполнено(СтрРасхождения.ВалютаВзаиморасчетов))
		И (Иерархия.Количество() + ?(Строки.Количество()>0,1,0) - СтрРасхождения.Уровень) < 1 Тогда
		Возврат;
	КонецЕсли;
	
	СуммаУрегулирования = РодительРасхождения.ОсталосьУрегулировать;
	СуммаУрегулированияГр = РодительРасхождения.ОсталосьУрегулироватьГр;
	
	Если СуммаУрегулирования = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРасхождения = Новый Структура(КолонкиРасхождения);
	ЗаполнитьЗначенияСвойств(СтруктураРасхождения, СтрРасхождения);
	
	СтруктураРодителя = Новый Структура(КолонкиРасхождения);
	ЗаполнитьЗначенияСвойств(СтруктураРодителя, РодительРасхождения);
	
	ПараметрыЗаполненияДокумента = Новый Структура;
	ПараметрыЗаполненияДокумента.Вставить("Сценарий", Объект.Сценарий);
	ПараметрыЗаполненияДокумента.Вставить("ПериодСценария", Объект.ПериодСценария);
	ПараметрыЗаполненияДокумента.Вставить("Этап", Объект.Этап);
	ПараметрыЗаполненияДокумента.Вставить("ВалютаПредставления", ВалютаПредставления);
	ПараметрыЗаполненияДокумента.Вставить("Организация", РодительРасхождения.Организация);
	ПараметрыЗаполненияДокумента.Вставить("Контрагент", РодительРасхождения.Контрагент);
	ПараметрыЗаполненияДокумента.Вставить("РазделВГО", РодительРасхождения.РазделВГО);
	ПараметрыЗаполненияДокумента.Вставить("ВалютаВзаиморасчетов", РодительРасхождения.ВалютаВзаиморасчетов);
	ПараметрыЗаполненияДокумента.Вставить("ОсновнаяВалюта", РодительРасхождения.ВалютаВзаиморасчетов);
	ПараметрыЗаполненияДокумента.Вставить("СторонаУрегулирования", РодительРасхождения.СторонаСверки);
	ПараметрыЗаполненияДокумента.Вставить("СуммаУрегулирования", РодительРасхождения.ОсталосьУрегулировать);
	ПараметрыЗаполненияДокумента.Вставить("СуммаУрегулированияГр", РодительРасхождения.ОсталосьУрегулироватьГр);
	ПараметрыЗаполненияДокумента.Вставить("ДопАналитикаРасхождения", РодительРасхождения.ДопАналитикаРасхождения);
	ПараметрыЗаполненияДокумента.Вставить("РодительРасхождения", СтруктураРодителя);
	ПараметрыЗаполненияДокумента.Вставить("СтруктураРасхождения", СтруктураРасхождения);
	ПараметрыЗаполненияДокумента.Вставить("СуммаОрганизации", РодительРасхождения.СуммаНаша);
	ПараметрыЗаполненияДокумента.Вставить("СуммаКонтрагента", РодительРасхождения.СуммаКонтрагента);
	ПараметрыЗаполненияДокумента.Вставить("Ответственный", Пользователь);
	ПараметрыЗаполненияДокумента.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	
	Если СпроситьПричинуРасхождения Тогда
		Делегат_ = Новый ОписаниеОповещения("ОбработатьВыборПричиныРасхождения", ЭтаФорма, ПараметрыЗаполненияДокумента);
		ПоказатьВводЗначения(Делегат_, Неопределено, НСтр("ru = 'Укажите причину расхождения'"), Тип("СправочникСсылка.ПричиныРасхожденийВГО"));
		
	Иначе
		ОткрытьФормуДокументаУрегулирования(ПараметрыЗаполненияДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСозданияДокументаУрегулирования(ДанныеДокументаУрегулирования) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеДокументаУрегулирования) И ТипЗнч(ДанныеДокументаУрегулирования) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СтрРасхождения = Расхождения.НайтиПоИдентификатору(Элементы.Расхождения.ТекущаяСтрока);
	
	Если СтрРасхождения.Иерархия <> "Регистратор" Тогда
		РодительРасхождения = СтрРасхождения;
	Иначе
		РодительРасхождения = СтрРасхождения.ПолучитьРодителя();
	КОнецЕсли;
	Если РодительРасхождения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	ДокУрегулирования = ДанныеДокументаУрегулирования.Ссылка;
	СуммаУрегулирования = ДанныеДокументаУрегулирования.СуммаУрегулирования; 
	СуммаУрегулированияГр = ДанныеДокументаУрегулирования.СуммаУрегулированияГр; 
	
	Элементы_ = РодительРасхождения.ПолучитьЭлементы();
	ЗначениеНашаАналитика = Элементы_[0].НашаАналитика;
	Если Элементы_.Количество() = 1 И
		ЗначениеНашаАналитика = Неопределено  ИЛИ ЗначениеНашаАналитика = НСтр("ru = 'Нет урегулирований'") Тогда
		ЭлементД = Элементы_[0];
	Иначе
		ЭлементД = Элементы_.Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭлементД, СтрРасхождения);
	
	ЭлементД.СуммаНаша = ДанныеДокументаУрегулирования.СуммаУрегулирования * ?(ДанныеДокументаУрегулирования.ЗнакУрегулирования,1,-1);
	ЭлементД.СуммаКонтрагента = 0;
	ЭлементД.СуммаНашаГр = 0;
	ЭлементД.СуммаКонтрагентаГр = 0;
	
	ЭлементД.НашаАналитика = ДокУрегулирования;
	ЭлементД.АналитикаКонтрагента = ДокУрегулирования;
	ЭлементД.Расхождение = 0;
	ЭлементД.РасхождениеГр = 0;
	ЭлементД.ОсталосьУрегулировать = 0;
	ЭлементД.Иерархия = "Регистратор";
	ЭлементД.АвторПоследнегоУрегулирования = Пользователь;
	ЭлементД.Уровень = РодительРасхождения.Уровень + 1;
	
	Если ДанныеДокументаУрегулирования.СообщениеОшибки <> "" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ДанныеДокументаУрегулирования.СообщениеОшибки;
		Сообщение.Сообщить();
	Иначе
		ПересчитатьИерархию(ЭлементД, Макс(СуммаУрегулирования, -СуммаУрегулирования), Макс(СуммаУрегулированияГр, -СуммаУрегулированияГр));
	КонецЕсли;
		
	Элементы.Расхождения.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПричиныРасхождения(ПричинаРасхождения, ДопПараметры) Экспорт
	Если ПричинаРасхождения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры.Вставить("ПричинаРасхождения", ПричинаРасхождения);
	ОткрытьФормуДокументаУрегулирования(ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДокументаУрегулирования(ПараметрыЗаполненияДокумента) Экспорт
	ПараметрыСозданияДокумента = Новый Структура("ПараметрыЗаполнения", ПараметрыЗаполненияДокумента);
	ОткрытьФорму("Документ.УрегулированиеРасхожденияВГО.ФормаОбъекта", ПараметрыСозданияДокумента,
				ЭтаФорма,,,,, РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьСверкуПослеЗакрытияФормыАвтоурегулирования(РезультатЗакрытия, СтруктураРасхождения) Экспорт
	ЗакрытьСверкуНаКлиенте(СтруктураРасхождения);
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИерархию(Знач ТекСтрока, Знач Сумма, Знач СуммаГр)
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.Иерархия <> "Регистратор" Тогда
		ТекСтрока.УрегулированоГр = ТекСтрока.УрегулированоГр + СуммаГр;
		ТекСтрока.ОсталосьУрегулироватьГр = Макс(ТекСтрока.ОсталосьУрегулироватьГр - СуммаГр,0);
		ТекСтрока.ПроцентУрегулированных = ?(ТекСтрока.РасхождениеГр=0, 1, СуммаГр/ТекСтрока.РасхождениеГр) * 100;
		ТекСтрока.ПроцентНеурегулированных = Макс(100 - ТекСтрока.ПроцентУрегулированных, 0);
		
		ТекСтрока.Урегулировано = ТекСтрока.Урегулировано + Сумма;
		ТекСтрока.ОсталосьУрегулировать = Макс(ТекСтрока.ОсталосьУрегулировать - Сумма,0);
	КонецЕсли;
	
	Если ТекСтрока.Иерархия = "ВалютаВзаиморасчетов" Тогда
		Сумма = 0;
	КонецЕсли;
	
	ПересчитатьИерархию(ТекСтрока.ПолучитьРодителя(), Сумма, СуммаГр);
КонецПроцедуры

&НаКлиенте
Процедура КомментироватьВыбраннуюСтрокуРасхождения(ВыбраннаяСтрока, ТекстОшибки)
	СтрРасхождения = Расхождения.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрРасхождения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если НЕ (ЗначениеЗаполнено(СтрРасхождения.Отправитель) И ЗначениеЗаполнено(СтрРасхождения.Получатель) И 
		ЗначениеЗаполнено(СтрРасхождения.РазделВГО) И ЗначениеЗаполнено(СтрРасхождения.ВалютаВзаиморасчетов)) Тогда
		Возврат;
	КонецЕсли;
	
	Если (СтрРасхождения.Иерархия = "Регистратор") Тогда
		РодительРасхождения = СтрРасхождения.ПолучитьРодителя();
		Если РодительРасхождения <> Неопределено Тогда
			СуммаУрегулирования = РодительРасхождения.ОсталосьУрегулировать;
		КонецЕсли;
	Иначе
		СуммаУрегулирования = СтрРасхождения.ОсталосьУрегулировать;
	КонецЕсли;
	РеквизитыПредметаКомментирования = Новый Структура("ПериодСценария, Сценарий, Этап, Отправитель, Получатель, РазделВГО, ВалютаВзаиморасчетов, ДопАналитикаРасхождения, Сумма, Пользователь");
	ЗаполнитьЗначенияСвойств(РеквизитыПредметаКомментирования, СтрРасхождения);
	ЗаполнитьЗначенияСвойств(РеквизитыПредметаКомментирования, Объект);
	РеквизитыПредметаКомментирования.Сумма = СуммаУрегулирования;
	РеквизитыПредметаКомментирования.Пользователь = Пользователь;
	
	ОписаниеПредметаКомментирования = УниверсальныеКомментарииВызовСервераУХ.ПодготовитьОписаниеПредметаКомментированияВГО(
										СтрРасхождения.ПредметКомментирования, РеквизитыПредметаКомментирования, ТекстОшибки);
		
	Если ОписаниеПредметаКомментирования <> Неопределено Тогда
		ДопПараметрыКомментария = Новый Структура;
		ДопПараметрыКомментария.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
		ДопПараметрыКомментария.Вставить("ОписаниеПредметаКомментирования", ОписаниеПредметаКомментирования);
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработатьЗакрытиеОкнаКомментированияНаКлиенте", ЭтаФорма, ДопПараметрыКомментария);
		
		ПредметКомментирования = УниверсальныеКомментарииКлиентУХ.ОткрытьОкноКомментирования(ОписаниеПредметаКомментирования, ОписаниеОповещенияОЗакрытии, ЭтаФорма,, Ложь, ТекстОшибки);
		
		Если НЕ ЗначениеЗаполнено(СтрРасхождения.ПредметКомментирования) И ЗначениеЗаполнено(ПредметКомментирования) Тогда
			СтрРасхождения.ПредметКомментирования = ПредметКомментирования;
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыНаСервере

&НаСервере
Процедура ИнициализироватьИнтерфейсРасхождений()
	
	ТекущийУровень = 1;
	СтрокаИерархии = Иерархия.Добавить();
	СтрокаИерархии.Выбор = Истина; // уровень выбран для использования
	СтрокаИерархии.Фиксировано = Истина;
	СтрокаИерархии.Отбор = Ложь; // используется ли отбор
	СтрокаИерархии.Имя = НСтр("ru = 'Организация'"); // представление для пользователя
	СтрокаИерархии.Иерархия = "Организация"; // имя для запроса
	СтрокаИерархии.Значение = Справочники.Организации.ПустаяСсылка();
	
	СтрокаИерархии = Иерархия.Добавить();
	СтрокаИерархии.Выбор = Истина;
	СтрокаИерархии.Отбор = Ложь;
	СтрокаИерархии.Имя = НСтр("ru = 'Сторона сверки'");
	СтрокаИерархии.Иерархия = "СторонаСверки";
	СтрокаИерархии.Значение = Перечисления.СтороныСверкиВГО.Кредитор;
	
	СтрокаИерархии = Иерархия.Добавить();
	СтрокаИерархии.Выбор = Истина;
	СтрокаИерархии.Отбор = Ложь;
	СтрокаИерархии.Имя = НСтр("ru = 'Контрагент'");
	СтрокаИерархии.Иерархия = "Контрагент";
	СтрокаИерархии.Значение = Справочники.Организации.ПустаяСсылка();
	
	СтрокаИерархии = Иерархия.Добавить();
	СтрокаИерархии.Выбор = Истина;
	СтрокаИерархии.Отбор = Ложь;
	СтрокаИерархии.Имя = НСтр("ru = 'Раздел сверки ВГО'");
	СтрокаИерархии.Иерархия = "РазделВГО";
	СтрокаИерархии.Значение = Справочники.РазделыСверкиВГО.ПустаяСсылка();
	
	СтрокаИерархии = Иерархия.Добавить();
	СтрокаИерархии.Выбор = Истина;
	СтрокаИерархии.Отбор = Ложь;
	СтрокаИерархии.Имя = НСтр("ru = 'Валюта взаиморасчетов'");
	СтрокаИерархии.Иерархия = "ВалютаВзаиморасчетов";
	СтрокаИерархии.Значение = Справочники.Валюты.ПустаяСсылка();
	
	СтрокаИерархии = Иерархия.Добавить();
	СтрокаИерархии.Фиксировано = Истина;
	СтрокаИерархии.Выбор = Истина;
	СтрокаИерархии.Отбор = Ложь;
	СтрокаИерархии.Имя = НСтр("ru = 'Доп. аналитики'");
	СтрокаИерархии.Иерархия = "ДопАналитикаРасхождения";
	СтрокаИерархии.Значение = Неопределено;
	
	ТолькоСтатистика = Параметры.ТолькоСтатистика;
	Если ТолькоСтатистика Тогда
		ВалютаПредставления = Перечисления.ВалютыПорталаСверкиВГО.ВалютаГруппы;
		СуффиксСуммовыхПоказателей = "Гр";
		
		СтрокаКолонки = Колонки.Добавить();
		СтрокаКолонки.Выбор = ЛОжь;
		СтрокаКолонки.Имя = "СуммаНаша";
		СтрокаКолонки.Представление = НСтр("ru = 'Сумма наша'");
		СтрокаКолонки.ЕстьСуффикс = Истина;
		
		СтрокаКолонки = Колонки.Добавить();
		СтрокаКолонки.Выбор = ЛОжь;
		СтрокаКолонки.Имя = "СуммаКонтрагента";
		СтрокаКолонки.Представление = НСтр("ru = 'Сумма контрагента'");
		СтрокаКолонки.ЕстьСуффикс = Истина;
		
		СтрокаКолонки = Колонки.Добавить();
		СтрокаКолонки.Выбор = Истина;
		СтрокаКолонки.Имя = "Расхождение";
		СтрокаКолонки.Представление = НСтр("ru = 'Расхождение'");
		СтрокаКолонки.ЕстьСуффикс = Истина;
		
		СтрокаКолонки = Колонки.Добавить();
		СтрокаКолонки.Выбор = Истина;
		СтрокаКолонки.Имя = "ПроцентНеурегулированных";
		СтрокаКолонки.Представление = НСтр("ru = 'Процент неурегулированных'");
		СтрокаКолонки.ЕстьСуффикс = Ложь;
		
		СтрокаКолонки = Колонки.Добавить();
		СтрокаКолонки.Выбор = Истина;
		СтрокаКолонки.Имя = "Комментарии";
		СтрокаКолонки.Представление = НСтр("ru = 'Комментарии'");
		СтрокаКолонки.ЕстьСуффикс = Ложь;
		
		СтрокаКолонки = Колонки.Добавить();
		СтрокаКолонки.Выбор = Истина;
		СтрокаКолонки.Имя = "Спор";
		СтрокаКолонки.Представление = НСтр("ru = 'Спор'");
		СтрокаКолонки.ЕстьСуффикс = Ложь;
		
		СтрокаКолонки = Колонки.Добавить();
		СтрокаКолонки.Выбор = Истина;
		СтрокаКолонки.Имя = "ДатаНачалаСпора";
		СтрокаКолонки.Представление = НСтр("ru = 'Дата начала спора'");
		СтрокаКолонки.ЕстьСуффикс = Ложь;
		
	Иначе
		ВалютаПредставления = Перечисления.ВалютыПорталаСверкиВГО.ВалютаВзаиморасчетов;
		СуффиксСуммовыхПоказателей = "";
		
		СтрокаКолонки = Колонки.Добавить();
		СтрокаКолонки.Выбор = Истина;
		СтрокаКолонки.Имя = "СуммаНаша";
		СтрокаКолонки.Представление = НСтр("ru = 'Сумма наша'");
		СтрокаКолонки.ЕстьСуффикс = Истина;
		
		СтрокаКолонки = Колонки.Добавить();
		СтрокаКолонки.Выбор = Истина;
		СтрокаКолонки.Имя = "СуммаКонтрагента";
		СтрокаКолонки.Представление = НСтр("ru = 'Сумма контрагента'");
		СтрокаКолонки.ЕстьСуффикс = Истина;
		
		СтрокаКолонки = Колонки.Добавить();
		СтрокаКолонки.Выбор = Истина;
		СтрокаКолонки.Имя = "Расхождение";
		СтрокаКолонки.Представление = НСтр("ru = 'Расхождение'");
		СтрокаКолонки.ЕстьСуффикс = Истина;
		
		СтрокаКолонки = Колонки.Добавить();
		СтрокаКолонки.Выбор = Истина;
		СтрокаКолонки.Имя = "ПроцентНеурегулированных";
		СтрокаКолонки.Представление = НСтр("ru = 'Процент неурегулированных'");
		СтрокаКолонки.ЕстьСуффикс = Ложь;
		
		СтрокаКолонки = Колонки.Добавить();
		СтрокаКолонки.Выбор = Истина;
		СтрокаКолонки.Имя = "Комментарии";
		СтрокаКолонки.Представление = НСтр("ru = 'Комментарии'");
		СтрокаКолонки.ЕстьСуффикс = Ложь;
		
		СтрокаКолонки = Колонки.Добавить();
		СтрокаКолонки.Выбор = Истина;
		СтрокаКолонки.Имя = "Спор";
		СтрокаКолонки.Представление = НСтр("ru = 'Спор'");
		СтрокаКолонки.ЕстьСуффикс = Ложь;
		
		СтрокаКолонки = Колонки.Добавить();
		СтрокаКолонки.Выбор = Истина;
		СтрокаКолонки.Имя = "ДатаНачалаСпора";
		СтрокаКолонки.Представление = НСтр("ru = 'Дата начала спора'");
        СтрокаКолонки.ЕстьСуффикс = Ложь;
		
		СтрокаКолонки = Колонки.Добавить();
		СтрокаКолонки.Выбор = Ложь;
		СтрокаКолонки.Имя = "АвторПоследнегоУрегулирования";
		СтрокаКолонки.Представление = НСтр("ru = 'Кто урегулировал'");
		СтрокаКолонки.ЕстьСуффикс = Ложь;
		
	КонецЕсли;
	
	// колонки приоритетной сортировки
	СтрокаСортировки = Сортировка.Добавить();
	СтрокаСортировки.Выбор = Истина; 
	СтрокаСортировки.Имя = "РасхожденийОсталосьУрегулироватьГр";
	СтрокаСортировки.Представление = НСтр("ru = 'Расхождения в валюте группы'");
	СтрокаСортировки.Направление = "По убыванию"; // по возрастанию
	
	СтрокаСортировки = Сортировка.Добавить();
	СтрокаСортировки.Выбор = Ложь; 
	СтрокаСортировки.Имя = "ПроцентОсталосьУрегулировать"; // имя в запросе
	СтрокаСортировки.Представление = НСтр("ru = '% неурегулированных'");
	СтрокаСортировки.Направление = "По убыванию"; // по убыванию
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеФормы()
	Если НЕ ЗначениеЗаполнено(Объект.ПериодСценария) ИЛИ НЕ ЗначениеЗаполнено(Объект.Сценарий) ИЛИ НЕ ЗначениеЗаполнено(Объект.Этап) Тогда
		Элементы.Расхождения.Доступность = Ложь;
		//Элементы.Расхождения.КоманднаяПанель.ТолькоПросмотр = Истина;
	Иначе
		Элементы.Расхождения.Доступность = Истина;
		//Элементы.Расхождения.КоманднаяПанель.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСостояниеСпораНаСервере(Знач ПараметрыСпора, ТекстОшибки)
	
	Попытка
		Данные = Новый Структура("Состояние,АвторСпора,ДатаНачалаСпора,ДатаЗавершенияСпора");
		Данные.Состояние = ?(ПараметрыСпора.Спор, Перечисления.СостояниеСверкиВГО.Спор, Перечисления.СостояниеСверкиВГО.Несогласован);
		Данные.АвторСпора = ПараметрыСпора.Пользователь;
		Данные.ДатаНачалаСпора = ПараметрыСпора.ДатаНачалаСпора;
		Данные.ДатаЗавершенияСпора = ?(ПараметрыСпора.Спор, '00010101000000', ПараметрыСпора.ДатаНачалаСпора);
		
		Если НЕ ЗначениеЗаполнено(ПараметрыСпора.ПредметКомментирования) Тогда
			ТаблицаПредметаКомментирования = УниверсальныеКомментарииВызовСервераУХ.СоздатьТаблицуРасхожденияВГО(
				ПараметрыСпора.ПериодСценария, ПараметрыСпора.Сценарий, ПараметрыСпора.Этап, ПараметрыСпора.Отправитель,
				ПараметрыСпора.Получатель, ПараметрыСпора.РазделВГО, ПараметрыСпора.ВалютаВзаиморасчетов,
				ПараметрыСпора.ДопАналитикаРасхождения);
				
			ПредметКомментирования = УниверсальныеКомментарииУХ.ПолучитьПредметКомментированияДляТаблицы(
				Перечисления.РазделыКомментариев.РасхожденияВГО,
				ТаблицаПредметаКомментирования, "");
				
			Данные.Вставить("ПредметКомментирования", ПредметКомментирования);
		КонецЕсли;
			
		СверкаВГОУХ.ДобавитьСостояниеСверки(ПараметрыСпора, Данные, ПараметрыСпора.ДатаНачалаСпора, ТекстОшибки);
		
	Исключение
		ТекстОшибки = ТекстОшибки + ОписаниеОшибки() + Символы.ПС;
	КонецПопытки;
	
	Если Константы.ОповеститьПриВозникновенииСпораВГО.Получить() Тогда
		// Отправим сообщение о возникновении спора
		Попытка
			мОрганизаций = Новый Массив;
			мОрганизаций.Добавить(ПараметрыСпора.Отправитель);
			мОрганизаций.Добавить(ПараметрыСпора.Получатель);
			ТаблицаАдресов = СверкаВГОУХ.ПочтаЛицОтветственныхЗаСверку(
						ПараметрыСпора.Сценарий, ПараметрыСпора.ПериодСценария, мОрганизаций, Истина, ПараметрыСпора.Пользователь); 
			Если ТаблицаАдресов.Количество() > 0 Тогда
				Для Каждого СтрокаАдреса Из ТаблицаАдресов Цикл
					ТаблицаАдресов.Свернуть("Email");
					
					Письмо = Новый ИнтернетПочтовоеСообщение;
					Письмо.Получатели.Добавить(СтрокаАдреса.Email);
					
					ШаблонПисьма = 
					НСтр("ru = 'Ответственный: %1. <BR>
					|Сценарий: %2. <BR>
					|ПериодСценария: %3. <BR>
					|Этап: %4. <BR>
					|Отправитель: %5. <BR>
					|Получатель: %6. <BR>
					|Раздел сверки ВГО: %7. <BR>
					|Валюта взаиморасчетов: %8. <BR>'");
					
					ТекстПисьма = СтрШаблон(
									ШаблонПисьма, 
									ПараметрыСпора.Пользователь, 
									ПараметрыСпора.Сценарий,
									ПараметрыСпора.ПериодСценария,
									ПараметрыСпора.Этап,
									ПараметрыСпора.Отправитель,
									ПараметрыСпора.Получатель,
									ПараметрыСпора.РазделВГО,
									ПараметрыСпора.ВалютаВзаиморасчетов
								);
					
					Если ЗначениеЗаполнено(ПараметрыСпора.ДопАналитикаРасхождения) Тогда
						ТекстПисьма = ТекстПисьма + НСтр("ru = 'Доп. аналитика: '") + ПараметрыСпора.ДопАналитика +". <BR>" + Символы.ПС;
					КонецЕсли;
					
					Если ПараметрыСпора.Спор Тогда
						ТекстСпора = НСтр("ru = 'Возник спор между '") + ПараметрыСпора.Отправитель + НСтр("ru = ' и '") + ПараметрыСпора.Получатель + ".";
						ТекстПисьма = ТекстПисьма + НСтр("ru = 'Дата начала спора: '") + ПараметрыСпора.ДатаНачалаСпора + ". <BR>" + Символы.ПС;
					Иначе
						ТекстСпора = НСтр("ru = 'Спор '") + ПараметрыСпора.Отправитель + НСтр("ru = ' и '") + ПараметрыСпора.Получатель + НСтр("ru = ' отменен.'");
						ТекстПисьма = ТекстПисьма + НСтр("ru = 'Дата завершения спора: '") + ПараметрыСпора.ДатаНачалаСпора + ". <BR>" + Символы.ПС;
					КонецЕсли;
						
					Письмо.Тексты.Добавить(УправлениеЭлектроннойПочтойУХ.ВернутьТекстПисьма(ТекстСпора, ТекстПисьма),	ТипТекстаПочтовогоСообщения.HTML);
					Письмо.Тема = ТекстСпора;
					УправлениеЭлектроннойПочтойУХ.ЗаписатьПисьмоВРегистр(Письмо, ПараметрыСпора.Этап);
					Письмо = Неопределено;
					
				КонецЦикла;
			КонецЕсли;
			
		Исключение
			ТекстОшибки = ТекстОшибки + ОписаниеОшибки() + Символы.ПС;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет возможность зафиксировать сверку, если да, то фиксирует.
//  Если нет, то возвращает Ложь и сообщение об ошибке.
//
// Параметры:
//  СтруктураРасхождения - описание расхождения 
// 
// Возвращаемое значение:
//	Структура с описанием результатов проверки и фиксации расхождения.
//
&НаСервереБезКонтекста
Функция ПроверитьЗафиксироватьСверкуНаСервере(СтруктураРасхождения, Отладка)
	
	Результат = Новый Структура("Зафиксирована, НеобходимоУрегулирование, СообщениеОбОшибке", Ложь, Ложь, "");
	
	ТекДата = ТекущаяДата();
	
	мЭкземпляровСОшибками = СверкаВГОУХ.ЭкземплярыОтчетовСОшибками(СтруктураРасхождения, ТекДата, Результат.СообщениеОбОшибке);
	
	Если НЕ ПустаяСтрока(Результат.СообщениеОбОшибке) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если мЭкземпляровСОшибками.Количество() > 0 Тогда
		Результат.СообщениеОбОшибке = НСтр("ru = 'Сверка по выбранным компаниям не может быть завершена, так как есть не подготовленные экземпляры отчетов:'");
		Для Каждого ЭкзОтчета Из мЭкземпляровСОшибками Цикл
			Результат.СообщениеОбОшибке = Результат.СообщениеОбОшибке + Символы.ПС + ЭкзОтчета;
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
	
	Если СтруктураРасхождения.СверкаЗакрыта
		И СверкаВГОУХ.ЕстьНеУрегулированныеРасхождения(СтруктураРасхождения, ТекДата, Результат.СообщениеОбОшибке) Тогда
		
		Результат.НеобходимоУрегулирование = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Результат.Зафиксирована = СверкаВГОУХ.ЗафиксироватьСверкуНаСервере(СтруктураРасхождения, ТекДата, Результат.СообщениеОбОшибке, Отладка);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьПричинуРасхожденияНаСервере(СтруктураРасхождения, СообщениеОшибки)
	СверкаВГОУХ.УстановитьПричинуРасхождения(СтруктураРасхождения, СообщениеОшибки);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСценарийПериодНаСервере(ПериметрСверки)
	
	СценарийПериод = Новый Структура("Сценарий, ПериодСценария,Этап", Справочники.Сценарии.ПустаяСсылка(), Справочники.Периоды.ПустаяСсылка(), Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка());
	Если ЗначениеЗаполнено(ПериметрСверки) Тогда
		ЗаполнитьЗначенияСвойств(СценарийПериод, ПериметрСверки);
		СценарийПериод.Этап = ПериметрСверки.ВерсияОрганизационнойСтруктуры;
	КонецЕсли;
	
	Возврат СценарийПериод;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапроса_РасхожденияБезКомментариев()

	Возврат
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СтатусыПериодовСценариев.ВерсияРегламента.ШаблонСверкиВГО КАК ШаблонСверкиВГО
	|ПОМЕСТИТЬ ШаблоныСверкиВГО
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|ГДЕ
	|	СтатусыПериодовСценариев.Сценарии = &Сценарий
	|	И СтатусыПериодовСценариев.Периоды В ИЕРАРХИИ (&ПериодСценария)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнформацияСверкиВГО.Отправитель КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО.Кредитор) КАК СторонаСверки,
	|	ИнформацияСверкиВГО.Получатель КАК Контрагент,
	|	ИнформацияСверкиВГО.РазделВГО КАК РазделВГО,
	|	ИнформацияСверкиВГО.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ИнформацияСверкиВГО.ДопАналитикаРасхождения КАК ДопАналитикаРасхождения,
	|	ЗНАЧЕНИЕ(Документ.УрегулированиеРасхожденияВГО.ПустаяСсылка) КАК Регистратор,
	|	0 КАК Регистрация,
	|	0 КАК Урегулирование,
	|	ИнформацияСверкиВГО.СуммаРасхождения КАК РасхожденийОсталосьУрегулировать,
	|	ИнформацияСверкиВГО.СуммаОтправителя КАК СуммаОрганизации,
	|	ИнформацияСверкиВГО.СуммаПолучателя КАК СуммаКонтрагента,
	|	0 КАК ПроцентУрегулировано,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ИнформацияСверкиВГО.СуммаОтправителя >= 0
	|					ТОГДА ИнформацияСверкиВГО.СуммаОтправителя
	|				ИНАЧЕ -ИнформацияСверкиВГО.СуммаОтправителя
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ИнформацияСверкиВГО.СуммаПолучателя >= 0
	|					ТОГДА ИнформацияСверкиВГО.СуммаПолучателя
	|				ИНАЧЕ -ИнформацияСверкиВГО.СуммаПолучателя
	|			КОНЕЦ = 0
	|			ТОГДА 0
	|		ИНАЧЕ ИнформацияСверкиВГО.СуммаРасхождения / (ВЫБОР
	|				КОГДА ИнформацияСверкиВГО.СуммаОтправителя >= 0
	|					ТОГДА ИнформацияСверкиВГО.СуммаОтправителя
	|				ИНАЧЕ -ИнформацияСверкиВГО.СуммаОтправителя
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ИнформацияСверкиВГО.СуммаПолучателя >= 0
	|					ТОГДА ИнформацияСверкиВГО.СуммаПолучателя
	|				ИНАЧЕ -ИнформацияСверкиВГО.СуммаПолучателя
	|			КОНЕЦ) * 200
	|	КОНЕЦ КАК ПроцентОсталосьУрегулировать,
	|	ИнформацияСверкиВГОСрезПоследних.Состояние КАК Состояние,
	|	ИнформацияСверкиВГОСрезПоследних.ПредметКомментирования КАК ПредметКомментирования,
	|	ИнформацияСверкиВГО.РазделВГО.ПорогСущественности КАК ПорогСущественности,
	|	ИнформацияСверкиВГОСрезПоследних.Принудительно КАК Принудительно,
	|	0 КАК РегистрацияГр,
	|	0 КАК УрегулированиеГр,
	|	ИнформацияСверкиВГО.СуммаРасхожденияГр КАК РасхожденийОсталосьУрегулироватьГр,
	|	ИнформацияСверкиВГО.СуммаОтправителяГр КАК СуммаОрганизацииГр,
	|	ИнформацияСверкиВГО.СуммаПолучателяГр КАК СуммаКонтрагентаГр,
	|	ИнформацияСверкиВГОСрезПоследних.АвторУрегулирования КАК АвторУрегулирования,
	|	ИнформацияСверкиВГОСрезПоследних.ДатаНачалаСпора КАК ДатаНачалаСпора,
	|	ВЫБОР
	|		КОГДА СверкаВГОЗакрыта.РазделСверкиВГО ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СверкаЗакрыта,
	|	ИнформацияСверкиВГОСрезПоследних.ПричинаРасхождения КАК ПричинаРасхождения,
	|	ИнформацияСверкиВГОСрезПоследних.СторонаПричиныРасхождения КАК СторонаПричиныРасхождения
	|ПОМЕСТИТЬ РасходженияБезКомментариев
	|ИЗ
	|	РегистрСведений.ИнформацияСверкиВГОПостоянная КАК ИнформацияСверкиВГО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СверкаВГОЗакрыта КАК СверкаВГОЗакрыта
	|		ПО ИнформацияСверкиВГО.ПериодСценария = СверкаВГОЗакрыта.ПериодСценария
	|			И ИнформацияСверкиВГО.Сценарий = СверкаВГОЗакрыта.Сценарий
	|			И ИнформацияСверкиВГО.Этап = СверкаВГОЗакрыта.Этап
	|			И ИнформацияСверкиВГО.Отправитель = СверкаВГОЗакрыта.Отправитель
	|			И ИнформацияСверкиВГО.Получатель = СверкаВГОЗакрыта.Получатель
	|			И ИнформацияСверкиВГО.РазделВГО = СверкаВГОЗакрыта.РазделСверкиВГО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнформацияСверкиВГО.СрезПоследних(
	|				&Дата,
	|				ПериодСценария В ИЕРАРХИИ (&ПериодСценария)
	|					И Сценарий = &Сценарий
	|					И Этап = &Этап
	|					И &Отправитель) КАК ИнформацияСверкиВГОСрезПоследних
	|		ПО ИнформацияСверкиВГО.ПериодСценария = ИнформацияСверкиВГОСрезПоследних.ПериодСценария
	|			И ИнформацияСверкиВГО.Сценарий = ИнформацияСверкиВГОСрезПоследних.Сценарий
	|			И ИнформацияСверкиВГО.Этап = ИнформацияСверкиВГОСрезПоследних.Этап
	|			И ИнформацияСверкиВГО.Отправитель = ИнформацияСверкиВГОСрезПоследних.Отправитель
	|			И ИнформацияСверкиВГО.Получатель = ИнформацияСверкиВГОСрезПоследних.Получатель
	|			И ИнформацияСверкиВГО.РазделВГО = ИнформацияСверкиВГОСрезПоследних.РазделВГО
	|			И ИнформацияСверкиВГО.ВалютаВзаиморасчетов = ИнформацияСверкиВГОСрезПоследних.ВалютаВзаиморасчетов
	|			И ИнформацияСверкиВГО.ДопАналитикаРасхождения = ИнформацияСверкиВГОСрезПоследних.ДопАналитикаРасхождения
	|ГДЕ
	|	ИнформацияСверкиВГО.ПериодСценария В ИЕРАРХИИ (&ПериодСценария)
	|	И ИнформацияСверкиВГО.Сценарий = &Сценарий
	|	И ИнформацияСверкиВГО.Этап = &Этап
	|	И &УсловиеКредитораГДЕ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИнформацияСверкиВГО.Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО.Дебитор),
	|	ИнформацияСверкиВГО.Отправитель,
	|	ИнформацияСверкиВГО.РазделВГО,
	|	ИнформацияСверкиВГО.ВалютаВзаиморасчетов,
	|	ИнформацияСверкиВГО.ДопАналитикаРасхождения,
	|	ЗНАЧЕНИЕ(Документ.УрегулированиеРасхожденияВГО.ПустаяСсылка),
	|	0,
	|	0,
	|	ИнформацияСверкиВГО.СуммаРасхождения,
	|	ИнформацияСверкиВГО.СуммаПолучателя,
	|	ИнформацияСверкиВГО.СуммаОтправителя,
	|	0,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ИнформацияСверкиВГО.СуммаОтправителя >= 0
	|					ТОГДА ИнформацияСверкиВГО.СуммаОтправителя
	|				ИНАЧЕ -ИнформацияСверкиВГО.СуммаОтправителя
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ИнформацияСверкиВГО.СуммаПолучателя >= 0
	|					ТОГДА ИнформацияСверкиВГО.СуммаПолучателя
	|				ИНАЧЕ -ИнформацияСверкиВГО.СуммаПолучателя
	|			КОНЕЦ = 0
	|			ТОГДА 0
	|		ИНАЧЕ ИнформацияСверкиВГО.СуммаРасхождения / (ВЫБОР
	|				КОГДА ИнформацияСверкиВГО.СуммаОтправителя >= 0
	|					ТОГДА ИнформацияСверкиВГО.СуммаОтправителя
	|				ИНАЧЕ -ИнформацияСверкиВГО.СуммаОтправителя
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ИнформацияСверкиВГО.СуммаПолучателя >= 0
	|					ТОГДА ИнформацияСверкиВГО.СуммаПолучателя
	|				ИНАЧЕ -ИнформацияСверкиВГО.СуммаПолучателя
	|			КОНЕЦ) * 200
	|	КОНЕЦ,
	|	ИнформацияСверкиВГОСрезПоследних.Состояние,
	|	ИнформацияСверкиВГОСрезПоследних.ПредметКомментирования,
	|	ИнформацияСверкиВГО.РазделВГО.ПорогСущественности,
	|	ИнформацияСверкиВГОСрезПоследних.Принудительно,
	|	0,
	|	0,
	|	ИнформацияСверкиВГО.СуммаРасхожденияГр,
	|	ИнформацияСверкиВГО.СуммаПолучателяГр,
	|	ИнформацияСверкиВГО.СуммаОтправителяГр,
	|	ИнформацияСверкиВГОСрезПоследних.АвторУрегулирования,
	|	ИнформацияСверкиВГОСрезПоследних.ДатаНачалаСпора,
	|	ВЫБОР
	|		КОГДА СверкаВГОЗакрыта.РазделСверкиВГО ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ИнформацияСверкиВГОСрезПоследних.ПричинаРасхождения,
	|	ИнформацияСверкиВГОСрезПоследних.СторонаПричиныРасхождения
	|ИЗ
	|	РегистрСведений.ИнформацияСверкиВГОПостоянная КАК ИнформацияСверкиВГО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СверкаВГОЗакрыта КАК СверкаВГОЗакрыта
	|		ПО ИнформацияСверкиВГО.ПериодСценария = СверкаВГОЗакрыта.ПериодСценария
	|			И ИнформацияСверкиВГО.Сценарий = СверкаВГОЗакрыта.Сценарий
	|			И ИнформацияСверкиВГО.Этап = СверкаВГОЗакрыта.Этап
	|			И ИнформацияСверкиВГО.Отправитель = СверкаВГОЗакрыта.Отправитель
	|			И ИнформацияСверкиВГО.Получатель = СверкаВГОЗакрыта.Получатель
	|			И ИнформацияСверкиВГО.РазделВГО = СверкаВГОЗакрыта.РазделСверкиВГО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнформацияСверкиВГО.СрезПоследних(
	|				&Дата,
	|				ПериодСценария В ИЕРАРХИИ(&ПериодСценария)
	|					И Сценарий = &Сценарий
	|					И Этап = &Этап
	|					И &Получатель) КАК ИнформацияСверкиВГОСрезПоследних
	|		ПО ИнформацияСверкиВГО.ПериодСценария = ИнформацияСверкиВГОСрезПоследних.ПериодСценария
	|			И ИнформацияСверкиВГО.Сценарий = ИнформацияСверкиВГОСрезПоследних.Сценарий
	|			И ИнформацияСверкиВГО.Этап = ИнформацияСверкиВГОСрезПоследних.Этап
	|			И ИнформацияСверкиВГО.Отправитель = ИнформацияСверкиВГОСрезПоследних.Отправитель
	|			И ИнформацияСверкиВГО.Получатель = ИнформацияСверкиВГОСрезПоследних.Получатель
	|			И ИнформацияСверкиВГО.РазделВГО = ИнформацияСверкиВГОСрезПоследних.РазделВГО
	|			И ИнформацияСверкиВГО.ВалютаВзаиморасчетов = ИнформацияСверкиВГОСрезПоследних.ВалютаВзаиморасчетов
	|			И ИнформацияСверкиВГО.ДопАналитикаРасхождения = ИнформацияСверкиВГОСрезПоследних.ДопАналитикаРасхождения
	|ГДЕ
	|	ИнформацияСверкиВГО.ПериодСценария В ИЕРАРХИИ (&ПериодСценария)
	|	И ИнформацияСверкиВГО.Сценарий = &Сценарий
	|	И ИнформацияСверкиВГО.Этап = &Этап
	|	И &УсловиеДебитораГДЕ
	|";

КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапроса_Урегулирования()

	Возврат
	"ВЫБРАТЬ
	|	УрегулированиеРасхожденияВГО.Отправитель,
	|	ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО.Кредитор) КАК СторонаСверки,
	|	УрегулированиеРасхожденияВГО.Получатель,
	|	УрегулированиеРасхожденияВГО.РазделВГО,
	|	УрегулированиеРасхожденияВГО.ВалютаВзаиморасчетов,
	|	УрегулированиеРасхожденияВГО.ДопАналитикаРасхождения,
	|	УрегулированиеРасхожденияВГО.Ссылка,
	|	0 КАК Поле2,
	|	УрегулированиеРасхожденияВГО.СуммаУрегулирования,
	|	0 КАК Поле3,
	|	0 КАК Поле4,
	|	0 КАК Поле5,
	|	0 КАК Поле6,
	|	0 КАК Поле7,
	|	0 КАК Поле71,
	|	ЗНАЧЕНИЕ(Перечисление.СостояниеСверкиВГО.Несогласован) КАК Поле8,
	|	ЗНАЧЕНИЕ(Перечисление.СостояниеСверкиВГО.Несогласован) КАК Поле81,
	|	ЗНАЧЕНИЕ(Перечисление.СостояниеСверкиВГО.Несогласован) КАК Поле82,
	|	0 КАК Поле9,
	|	0 КАК Поле11,
	|	УрегулированиеРасхожденияВГО.Принудительно,
	|	0 КАК Поле12,
	|	УрегулированиеРасхожденияВГО.СуммаУрегулированияГр,
	|	0 КАК Поле18,
	|	0 КАК Поле18_1,
	|	0 КАК Поле19,
	|	0 КАК Поле20,
	|	УрегулированиеРасхожденияВГО.Ответственный,
	|	0 КАК Поле21,
	|	ЛОЖЬ КАК Поле22,
	|	Значение(Справочник.ПричиныРасхожденийВГО.ПустаяСсылка) КАК Поле23,
	|	Значение(Перечисление.СтороныСверкиВГО.ПустаяСсылка) Как Поле24
	|ИЗ
	|	Документ.УрегулированиеРасхожденияВГО КАК УрегулированиеРасхожденияВГО
	|ГДЕ
	|	УрегулированиеРасхожденияВГО.Проведен
	|	И УрегулированиеРасхожденияВГО.ПериодСценария В ИЕРАРХИИ (&ПериодСценария)
	|	И УрегулированиеРасхожденияВГО.Сценарий = &Сценарий
	|	И УрегулированиеРасхожденияВГО.Этап = &Этап
	|	И &ОтправительРегистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УрегулированиеРасхожденияВГО.Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО.Дебитор),
	|	УрегулированиеРасхожденияВГО.Отправитель,
	|	УрегулированиеРасхожденияВГО.РазделВГО,
	|	УрегулированиеРасхожденияВГО.ВалютаВзаиморасчетов,
	|	УрегулированиеРасхожденияВГО.ДопАналитикаРасхождения,
	|	УрегулированиеРасхожденияВГО.Ссылка,
	|	0,
	|	УрегулированиеРасхожденияВГО.СуммаУрегулирования,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ЗНАЧЕНИЕ(Перечисление.СостояниеСверкиВГО.Несогласован),
	|	ЗНАЧЕНИЕ(Перечисление.СостояниеСверкиВГО.Несогласован) КАК Поле81,
	|	ЗНАЧЕНИЕ(Перечисление.СостояниеСверкиВГО.Несогласован) КАК Поле82,
	|	0,
	|	0,
	|	УрегулированиеРасхожденияВГО.Принудительно,
	|	0,
	|	УрегулированиеРасхожденияВГО.СуммаУрегулированияГр,
	|	0,
	|	0 ,
	|	0,
	|	0,
	|	УрегулированиеРасхожденияВГО.Ответственный,
	|	0,
	|	ЛОЖЬ,
	|	Значение(Справочник.ПричиныРасхожденийВГО.ПустаяСсылка),
	|	Значение(Перечисление.СтороныСверкиВГО.ПустаяСсылка)
	|ИЗ
	|	Документ.УрегулированиеРасхожденияВГО КАК УрегулированиеРасхожденияВГО
	|ГДЕ
	|	УрегулированиеРасхожденияВГО.Проведен
	|	И УрегулированиеРасхожденияВГО.ПериодСценария В ИЕРАРХИИ (&ПериодСценария)
	|	И УрегулированиеРасхожденияВГО.Сценарий = &Сценарий
	|	И УрегулированиеРасхожденияВГО.Этап = &Этап
	|	И &ПолучательРегистратор";

КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапроса_Расхождения()

	Возврат
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходженияБезКомментариев.ПредметКомментирования КАК ПредметКомментирования,
	|	МАКСИМУМ(УниверсальныеКомментарииСрезПоследних.Период) КАК Период
	|ПОМЕСТИТЬ ПоследнийКомментарий
	|ИЗ
	|	РасходженияБезКомментариев КАК РасходженияБезКомментариев
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УниверсальныеКомментарии.СрезПоследних(&Дата, ) КАК УниверсальныеКомментарииСрезПоследних
	|		ПО РасходженияБезКомментариев.ПредметКомментирования = УниверсальныеКомментарииСрезПоследних.ПредметКомментирования
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходженияБезКомментариев.ПредметКомментирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходженияБезКомментариев.Организация КАК Организация,
	|	РасходженияБезКомментариев.СторонаСверки КАК СторонаСверки,
	|	РасходженияБезКомментариев.Контрагент КАК Контрагент,
	|	РасходженияБезКомментариев.РазделВГО КАК РазделВГО,
	|	РасходженияБезКомментариев.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	РасходженияБезКомментариев.ДопАналитикаРасхождения КАК ДопАналитикаРасхождения,
	|	РасходженияБезКомментариев.Регистратор КАК Регистратор,
	|	РасходженияБезКомментариев.Регистрация КАК Регистрация,
	|	РасходженияБезКомментариев.Урегулирование КАК Урегулирование,
	|	РасходженияБезКомментариев.РасхожденийОсталосьУрегулировать КАК РасхожденийОсталосьУрегулировать,
	|	РасходженияБезКомментариев.СуммаОрганизации КАК СуммаОрганизации,
	|	РасходженияБезКомментариев.СуммаКонтрагента КАК СуммаКонтрагента,
	|	РасходженияБезКомментариев.ПроцентУрегулировано КАК ПроцентУрегулировано,
	|	РасходженияБезКомментариев.ПроцентОсталосьУрегулировать КАК ПроцентОсталосьУрегулировать,
	|	РасходженияБезКомментариев.ПроцентОсталосьУрегулировать КАК ПроцентОсталосьУрегулироватьБезПорога,
	|	РасходженияБезКомментариев.Состояние КАК Состояние,
	|	РасходженияБезКомментариев.Состояние КАК СостояниеОрганизация,
	|	РасходженияБезКомментариев.Состояние КАК СостояниеКонтрагент,	
	|	РасходженияБезКомментариев.ПредметКомментирования КАК ПредметКомментирования,
	|	ПОДСТРОКА(УниверсальныеКомментарииСрезПоследних.Комментарий, 1, 40) КАК Комментарий,
	|	РасходженияБезКомментариев.ПорогСущественности КАК ПорогСущественности,
	|	РасходженияБезКомментариев.Принудительно КАК Принудительно,
	|	РасходженияБезКомментариев.РегистрацияГр КАК РегистрацияГр,
	|	РасходженияБезКомментариев.УрегулированиеГр КАК УрегулированиеГр,
	|	РасходженияБезКомментариев.РасхожденийОсталосьУрегулироватьГр КАК РасхожденийОсталосьУрегулироватьГр,
	|	РасходженияБезКомментариев.СуммаОрганизацииГр КАК СуммаОрганизацииГр,
	|	РасходженияБезКомментариев.СуммаКонтрагентаГр КАК СуммаКонтрагентаГр,
	|	РасходженияБезКомментариев.АвторУрегулирования КАК АвторУрегулирования,
	|	РасходженияБезКомментариев.ДатаНачалаСпора КАК ДатаНачалаСпора,
	|	РасходженияБезКомментариев.СверкаЗакрыта КАК СверкаЗакрыта,
	|	РасходженияБезКомментариев.ПричинаРасхождения КАК ПричинаРасхождения,
	|	РасходженияБезКомментариев.СторонаПричиныРасхождения КАК СторонаПричиныРасхождения
	|ИЗ
	|	РасходженияБезКомментариев КАК РасходженияБезКомментариев
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследнийКомментарий КАК ПоследнийКомментарий
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УниверсальныеКомментарии.СрезПоследних(&Дата, ) КАК УниверсальныеКомментарииСрезПоследних
	|			ПО ПоследнийКомментарий.ПредметКомментирования = УниверсальныеКомментарииСрезПоследних.ПредметКомментирования
	|				И ПоследнийКомментарий.Период = УниверсальныеКомментарииСрезПоследних.Период
	|		ПО РасходженияБезКомментариев.ПредметКомментирования = ПоследнийКомментарий.ПредметКомментирования
	|
	|";
	
КонецФункции

&НаСервереБезКонтекста
// Возвращает упакованное дерево расхождений. Распаковка в данные формы дерево
// производится функцией УправлениеФормойКлент.РаспаковатьДанныеФормыДерево()
// Параметры:
//	Параметры - структура, содержит следующие элементы:
//		Сортировка - список значений содержащий имена полей по которым.
//		ТекУровень - уровень строки, которую необходимо показать.
//		КолСтрок - количество аналитик, которые будут отображаться пользователю в виде дополнительных колонок.
//		МаксУровень - максимальный уровень иерархии.
//		Отбор - дополнительные поля отбора.
//		ОрганизацияОтбор - ссылка на основную организацию, по которой будет сделан отбор, иначе Неопредлено.
//		КонтрагентОтбор - ссылка на организацию-контрагента, по которой будет сделан отбор, иначе Неопредлено.
//		ТолькоПоОрганизациям - массив ссылок на организации, по которой будет сделан отбор, иначе Неопредлено.
//		АдресТекСтроки - Таблица значений с перечнем значений разных уровней иерархии текущего отображения.
//		Иерархия - перечень иерархий.
//		Сценарий - сценарий для которого осуществляется сверка.
//		ПериодСценария - период сценария для которого осуществляется сверка.
//		Этап - этап процесса для которого осуществляется сверка.
//		КолонкиРасхождения - таблица значений с описанием используемых колонок дерева расхождений,
//			используется для формирования запроса.
//		СтрокаРасшифровки - номер строки иерархии с которой иерархия показывается не как иерархия, а
//			как дополнительные колонки.
//		НомСтрокиОрганизации - номер уровня в иерархии, для отображения итоговых сумм в валюте организации,
//			для вышестоящих строк итоги не рассчитываются.
//		НомСтрокиВалюты - номер уровня в иерархии, для отображения итоговых сумм в валюте взаиморасчетов,
//			для вышестоящих строк итоги не рассчитываются.
//		ВалютаПредставления - ссылка на перечисление "ВалютыСверкиВГО", определяет из каких ресурсов
//			регистра накопления будут взяты суммы, а также как будут расчитываться итоги по иерархиям.
//	Возвращаемое значение: массив, для разбора функцией УправлениеФормойКлент.РаспаковатьДанныеФормыДерево()
//
Функция ПолучитьРасхождения(Параметры, флОтладка=Ложь) Экспорт
	
	ЕстьРасчет = ОбщегоНазначенияПовтИспУХ.РассчитыватьРасхожденияПорталаВГО();
	
	Запрос = Новый Запрос;
	
	Если ЕстьРасчет Тогда
		ТекстЗапроса = ТекстЗапроса_РасхожденияБезКомментариев();
	Иначе	
		ТекстЗапроса = СверкаВГОУХ.ТекстЗапроса_РасхожденияВГО(Параметры);
	КонецЕсли;
	
	// приоритетная сортировка
	мСортировки = Параметры.Сортировка;
	ТекстСортировки = "";
	Для Каждого СтрСортировки Из мСортировки ЦИкл
		ТекстСортировки = ТекстСортировки + СтрСортировки.Имя + ?(СтрСортировки.Направление="По убыванию"," УБЫВ"," ВОЗР") + "," + Символы.ПС;
	КонецЦикла;
	
	ТекстСортировки = "УПОРЯДОЧИТЬ ПО" + Символы.ПС + ТекстСортировки +
		"	Организация,
		|	СторонаСверки,
		|	Контрагент,
		|	РазделВГО,
		|	ВалютаВзаиморасчетов
		|";
	   
	// убираем регистратор или добавляем сортировку по регистратору
	МаксУровень = Параметры.ТекУровень;
	КолСтрок = Параметры.КолСтрок;
	флЕстьРегистратор = МаксУровень + КолСтрок > Параметры.МаксУровень;
	Если флЕстьРегистратор Тогда
		
		// добавляем сортировку по регистратору
		ТекстСортировки = ТекстСортировки + ",
			|	Регистратор";

		Если ЕстьРасчет Тогда
			
			ТекстЗапроса = ТекстЗапроса +
			"
			|ОБЪЕДИНИТЬ ВСЕ
			|" +
			ТекстЗапроса_Урегулирования();//добавляем поле Валюта
			
		Иначе 
			
			ТекстУрег = ТекстЗапроса_Урегулирования();
			
			ЧтоМеняем = "УрегулированиеРасхожденияВГО.Ссылка";
			ТекстУрег = СтрЗаменить(ТекстУрег, ЧтоМеняем, ЧтоМеняем + " КАК Поле1_1, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)");
			
			ТекстЗапроса = ТекстЗапроса +
			"
			|ОБЪЕДИНИТЬ ВСЕ
			|" +
			ТекстУрег;
			
		КонецЕсли;
			
	КонецЕсли;
   
	// условия по фильтрам
	Отбор = Параметры.Отбор;
	АдресСтроки = Неопределено;
	ТекстУсловияОтправителя = "";
	ТекстУсловияПолучателя = "";
	ТекстУсловия = ""; // Условия применимые к Дт и Кт
	ТекстУсловияКт = "";
	ТекстУсловияДт = "";
	ТекстУсловияОтправителяРегистратора = "";
	ТекстУсловияПолучателяРегистратора = "";
	ТекстУсловияКомментария = "";
	мСостояния = Новый Массив;
	Если Отбор.Свойство("Спор") И Отбор.Спор Тогда
		мСостояния.Добавить(Перечисления.СостояниеСверкиВГО.Спор);
	КонецЕсли;
	Если Отбор.Свойство("НеУрегулированы") И Отбор.НеУрегулированы Тогда
		мСостояния.Добавить(Перечисления.СостояниеСверкиВГО.Несогласован);
	КонецЕсли;
	Если Отбор.Свойство("Урегулированы") И Отбор.Урегулированы Тогда
		мСостояния.Добавить(Перечисления.СостояниеСверкиВГО.Согласован);
	КонецЕсли;
	Если Отбор.Свойство("УрегулированыПринудительно") И Отбор.УрегулированыПринудительно Тогда
		ТекстУсловия = ТекстУсловия + "И  ИнформацияСверкиВГОСрезПоследних.Принудительно" + Символы.ПС;
		мСостояния.Добавить(Перечисления.СостояниеСверкиВГО.Согласован);
	КонецЕсли;
	Если Отбор.Свойство("Элиминированы") И Отбор.Элиминированы Тогда
		мСостояния.Добавить(Перечисления.СостояниеСверкиВГО.Элиминирован);
	КонецЕсли;
	Если Отбор.Свойство("ЕстьКомментарий") И Отбор.ЕстьКомментарий Тогда
		ТекстУсловияКомментария = ТекстУсловияКомментария + "ПОДСТРОКА(УниверсальныеКомментарииСрезПоследних.Комментарий, 1, 2) <> """"" + Символы.ПС;
	КонецЕсли;
	Если НЕ Отбор.Свойство("МеньшеПорогаСущественности") ИЛИ НЕ Отбор.МеньшеПорогаСущественности Тогда
		ТекстУсловия = ТекстУсловия +
			"И ВЫБОР
			|		КОГДА ИнформацияСверкиВГО.СуммаОтправителя + ИнформацияСверкиВГО.СуммаПолучателя = 0
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ИнформацияСверкиВГО.СуммаРасхождения / (ИнформацияСверкиВГО.СуммаОтправителя + ИнформацияСверкиВГО.СуммаПолучателя) * 200 >= ИнформацияСверкиВГО.РазделВГО.ПорогСущественности
			|		КОНЕЦ
			|" + Символы.ПС;
	КонецЕсли;
	Если мСостояния.Количество() > 0 Тогда
		ТекстУсловия = ТекстУсловия + "И ВЫБОР КОГДА ИнформацияСверкиВГОСрезПоследних.Состояние ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИнформацияСверкиВГОСрезПоследних.Состояние В(&мСостояний) КОНЕЦ" + Символы.ПС;
		Запрос.УстановитьПараметр("мСостояний", мСостояния);
	КонецЕсли;
	
	// сформируем параметры отбора	
	// по организациям
	ОрганизацияОтбор = Неопределено;
	КонтрагентОтбор = Неопределено;
	ТолькоПоОрганизациям = Неопределено;
	
	// Накладываем отбор по списку организаций. И отправитель, и получатель должны удовлетворять.
	Если Параметры.Свойство("ТолькоПоОрганизациям", ТолькоПоОрганизациям) Тогда
		
		// Условие на РС ИнформацияСверкиВГОПостоянная
		ТекстУсловия = ТекстУсловия +
			"И ИнформацияСверкиВГО.Отправитель В(&ОрганизацииОтбораПарамФ)
			|И ИнформацияСверкиВГО.Получатель В(&ОрганизацииОтбораПарамФ)
			|";
			
		// Условие на срез последних по РС ИнформацияСверкиВГОПеременная
		ТекстУсловияОтправителя = ТекстУсловияОтправителя 
			+ "И Отправитель В(&ОрганизацииОтбораПарамФ)" + Символы.ПС
			+ "И Получатель В(&ОрганизацииОтбораПарамФ)" + Символы.ПС;
		ТекстУсловияПолучателя = ТекстУсловияПолучателя
			+ "И Получатель В(&ОрганизацииОтбораПарамФ)" + Символы.ПС
			+ "И Отправитель В(&ОрганизацииОтбораПарамФ)" + Символы.ПС;
			
		// Условие на документ Урегулирования
		ТекстУсловияОтправителяРегистратора = ТекстУсловияОтправителяРегистратора 
			+ "И УрегулированиеРасхожденияВГО.Отправитель В(&ОрганизацииОтбораПарамФ)" + Символы.ПС
			+ "И УрегулированиеРасхожденияВГО.Получатель В(&ОрганизацииОтбораПарамФ)" + Символы.ПС;
		ТекстУсловияПолучателяРегистратора = ТекстУсловияПолучателяРегистратора
			+ "И УрегулированиеРасхожденияВГО.Получатель В(&ОрганизацииОтбораПарамФ)" + Символы.ПС
			+ "И УрегулированиеРасхожденияВГО.Отправитель В(&ОрганизацииОтбораПарамФ)" + Символы.ПС;
			
		Запрос.УстановитьПараметр("ОрганизацииОтбораПарамФ", Параметры.ТолькоПоОрганизациям);
		
	КонецЕсли;
	
	// Организация основная
	Если Параметры.Свойство("ОрганизацияОтбор", ОрганизацияОтбор) Тогда
		
		// Условие на РС ИнформацияСверкиВГОПостоянная
		ТекстУсловияКт = ТекстУсловияКт
			+ "И ИнформацияСверкиВГО.Отправитель = &ОрганизацияПарамФ" + Символы.ПС;
		ТекстУсловияДт = ТекстУсловияДт
			+ "И ИнформацияСверкиВГО.Получатель = &ОрганизацияПарамФ" + Символы.ПС;
		
		// Условие на срез последних по РС ИнформацияСверкиВГОПеременная
		ТекстУсловияОтправителя = ТекстУсловияОтправителя 
			+ "И Отправитель = &ОрганизацияПарамФ" + Символы.ПС;
		ТекстУсловияПолучателя = ТекстУсловияПолучателя
			+ "И Получатель = &ОрганизацияПарамФ" + Символы.ПС;
			
		// Условие на документ Урегулирования
		ТекстУсловияОтправителяРегистратора = ТекстУсловияОтправителяРегистратора 
			+ "И УрегулированиеРасхожденияВГО.Отправитель = &ОрганизацияПарамФ" + Символы.ПС;
		ТекстУсловияПолучателяРегистратора = ТекстУсловияПолучателяРегистратора
			+ "И УрегулированиеРасхожденияВГО.Получатель = &ОрганизацияПарамФ" + Символы.ПС;
			
		Запрос.УстановитьПараметр("ОрганизацияПарамФ", Параметры.ОрганизацияОтбор);
		
	КонецЕсли;
	
	// Контрагент
	Если Параметры.Свойство("КонтрагентОтбор", КонтрагентОтбор) Тогда
		
		// Условие на РС ИнформацияСверкиВГОПостоянная
		ТекстУсловияКт = ТекстУсловияКт
			+ "И ИнформацияСверкиВГО.Получатель = &КонтрагентПарамФ" + Символы.ПС;
		ТекстУсловияДт = ТекстУсловияДт
			+ "И ИнформацияСверкиВГО.Отправитель = &КонтрагентПарамФ" + Символы.ПС;
		
		// Условие на срез последних по РС ИнформацияСверкиВГОПеременная
		ТекстУсловияОтправителя = ТекстУсловияОтправителя 
			+ "И Получатель = &КонтрагентПарамФ" + Символы.ПС;
		ТекстУсловияПолучателя = ТекстУсловияПолучателя
			+ "И Отправитель = &КонтрагентПарамФ" + Символы.ПС;
			
		// Условие на документ Урегулирования
		ТекстУсловияОтправителяРегистратора = ТекстУсловияОтправителяРегистратора 
			+ "И УрегулированиеРасхожденияВГО.Получатель В(&КонтрагентПарамФ)" + Символы.ПС;
		ТекстУсловияПолучателяРегистратора = ТекстУсловияПолучателяРегистратора
			+ "И УрегулированиеРасхожденияВГО.Отправитель В(&КонтрагентПарамФ)" + Символы.ПС;
			
		Запрос.УстановитьПараметр("КонтрагентПарамФ", Параметры.КонтрагентОтбор);
		
	КонецЕсли;
	
	// по отборам по текущей иерархии
	Если Параметры.Свойство("АдресТекСтроки", АдресСтроки) Тогда
		Для Каждого РеквА Из АдресСтроки Цикл
			ЗначениеР = РеквА.Значение;
			Если ЗначениеР = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ИмяР = РеквА.Имя;
			ИмяРПарам = ИмяР+"Парам";
			Если ИмяР = "Организация" Тогда
				ИмяРОтпр = "Отправитель";
				ИмяРПолуч = "Получатель";
			ИначеЕсли ИмяР = "Контрагент" Тогда
				ИмяРОтпр = "Получатель";
				ИмяРПолуч = "Отправитель";
			ИначеЕсли ИмяР = "СторонаСверки" Тогда
				Если ЗначениеР = Перечисления.СтороныСверкиВГО.Кредитор Тогда
					ИмяРОтпр = "Истина";
					ИмяРПолуч = "Ложь";
				Иначе
					ИмяРОтпр = "Ложь";
					ИмяРПолуч = "Истина";
				КонецЕсли;
				ЗначениеР = Истина;
			Иначе
				ИмяРОтпр = ИмяР;
				ИмяРПолуч = ИмяР;
			КонецЕсли;
			
			Если запрос.Параметры.Свойство(ИмяРПарам) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяРПарам = "СторонаСверкиПарам" Тогда
				ТекстУсловияКт = ТекстУсловияКт + "И " + ИмяРОтпр + Символы.ПС;
				ТекстУсловияДт = ТекстУсловияДт + "И " + ИмяРПолуч + Символы.ПС;
				
				ТекстУсловияОтправителя = ТекстУсловияОтправителя + "И " + ИмяРОтпр + Символы.ПС;
				ТекстУсловияПолучателя = ТекстУсловияПолучателя + "И " + ИмяРПолуч + Символы.ПС;
				
				ТекстУсловияОтправителяРегистратора = ТекстУсловияОтправителяРегистратора  + "И " + ИмяРОтпр + Символы.ПС;
				ТекстУсловияПолучателяРегистратора = ТекстУсловияПолучателяРегистратора + "И " + ИмяРПолуч + Символы.ПС;
			Иначе
				ТекстУсловияКт = ТекстУсловияКт + "И ИнформацияСверкиВГО." + ИмяРОтпр + " = &" + ИмяРПарам + Символы.ПС;
				ТекстУсловияДт = ТекстУсловияДт + "И ИнформацияСверкиВГО." + ИмяРПолуч + " = &" + ИмяРПарам + Символы.ПС;
				
				ТекстУсловияОтправителя = ТекстУсловияОтправителя + "И " + ИмяРОтпр + " = &" + ИмяРПарам + Символы.ПС;
				ТекстУсловияПолучателя = ТекстУсловияПолучателя + "И " + ИмяРПолуч + " = &" + ИмяРПарам + Символы.ПС;
			
				ТекстУсловияОтправителяРегистратора = ТекстУсловияОтправителяРегистратора 
					+ "И УрегулированиеРасхожденияВГО." + ИмяРОтпр + " = &" + ИмяРПарам + Символы.ПС;
				ТекстУсловияПолучателяРегистратора = ТекстУсловияПолучателяРегистратора
					+ "И УрегулированиеРасхожденияВГО." + ИмяРПолуч + " = &" + ИмяРПарам + Символы.ПС;
			КонецЕсли;
			
			Запрос.УстановитьПараметр(ИмяРПарам, ЗначениеР);
			
		КонецЦикла;
	КонецЕсли;
	
	// определим поля итогов
	ТекстИтогиПо = "";
	флЕстьСтрока = Ложь;
	Иерархия = Параметры.Иерархия;
	Для Каждого СтрИерархии Из Иерархия Цикл
		Если СтрИерархии.Уровень > МаксУровень + КолСтрок Тогда
			Прервать; //**
		КонецЕсли;
		ИмяИ = СтрИерархии.Иерархия;
		Если ИмяИ = "Строка" Тогда
			флЕстьСтрока = Истина;
			Продолжить;
		КонецЕсли;
		ТекстИтогиПо = ТекстИтогиПо + Символы.ПС + ИмяИ + ",";
		Если СтрИерархии.Отбор Тогда
			ИмяРПарам = ИмяР+"Парам";
			ВидСравнения = СтрИерархии.ВидСравнения;
			Если ЗначениеЗаполнено(ВидСравнения) Тогда
				ЗначениеИ = СтрИерархии.Значение;
				Если ИмяИ = "Организация" Тогда
					ИмяРОтпр = "Отправитель";
					ИмяРПолуч = "Получатель";
				ИначеЕсли ИмяИ = "Контрагент" Тогда
					ИмяРОтпр = "Получатель";
					ИмяРПолуч = "Отправитель";
				ИначеЕсли ИмяР = "СторонаСверки" Тогда
					Если ЗначениеИ = Перечисления.СтороныСверкиВГО.Кредитор Тогда
						ИмяРОтпр = "Истина";
						ИмяРПолуч = "Ложь";
					Иначе
						ИмяРОтпр = "Ложь";
						ИмяРПолуч = "Истина";
					КонецЕсли;
					ЗначениеИ = Истина;
				Иначе
					ИмяРОтпр = ИмяИ;
					ИмяРПолуч = ИмяИ;
				КонецЕсли;
				
				Если запрос.Параметры.Свойство(ИмяРПарам) Тогда
					Продолжить;
				КонецЕсли;
			
				Если ИмяРПарам = "СторонаСверкиПарам" Тогда
					ТекстУсловияКт = ТекстУсловияКт + "И " + ИмяРОтпр + Символы.ПС;
					ТекстУсловияДт = ТекстУсловияДт + "И " + ИмяРПолуч + Символы.ПС;
					
					ТекстУсловияОтправителя = ТекстУсловияОтправителя + "И " + ИмяРОтпр+ Символы.ПС;
					ТекстУсловияПолучателя = ТекстУсловияПолучателя + "И " + ИмяРПолуч + Символы.ПС;
					
					ТекстУсловияОтправителяРегистратора = ТекстУсловияОтправителяРегистратора + "И " + ИмяРОтпр + Символы.ПС;
					ТекстУсловияПолучателяРегистратора = ТекстУсловияПолучателяРегистратора	+ "И " + ИмяРПолуч + Символы.ПС;
				Иначе
					ТекстУсловияКт = ТекстУсловияКт + "И  ИнформацияСверкиВГО." + ИмяРОтпр + " " + ВидСравнения + " &" + ИмяРПарам + Символы.ПС;
					ТекстУсловияДт = ТекстУсловияДт + "И ИнформацияСверкиВГО." + ИмяРПолуч + " " + ВидСравнения + " &" + ИмяРПарам + Символы.ПС;
					
					ТекстУсловияОтправителя = ТекстУсловияОтправителя + "И " + ИмяРОтпр + " " + ВидСравнения + " &" + ИмяРПарам + Символы.ПС;
					ТекстУсловияПолучателя = ТекстУсловияПолучателя + "И " + ИмяРПолуч + " " + ВидСравнения + " &" + ИмяРПарам + Символы.ПС;
				
					ТекстУсловияОтправителяРегистратора = ТекстУсловияОтправителяРегистратора 
						+ "И УрегулированиеРасхожденияВГО." + ИмяРОтпр + " " + ВидСравнения + " &" + ИмяРПарам + Символы.ПС;
					ТекстУсловияПолучателяРегистратора = ТекстУсловияПолучателяРегистратора
						+ "И УрегулированиеРасхожденияВГО." + ИмяРПолуч + " " + ВидСравнения + " &" + ИмяРПарам + Символы.ПС;
				КонецЕсли;
				
				Запрос.УстановитьПараметр(ИмяРПарам, ЗначениеИ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ТекстИтогиПо <> "" Тогда
		ТекстИтогиПо = Лев(ТекстИтогиПо, СтрДлина(ТекстИтогиПо)-1);
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеКредитораГДЕ", ТекстУсловия + ТекстУсловияКт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеДебитораГДЕ", ТекстУсловия + ТекстУсловияДт);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ОтправительРегистратор", ТекстУсловияОтправителяРегистратора);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ПолучательРегистратор", ТекстУсловияПолучателяРегистратора);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &Отправитель", ТекстУсловияОтправителя);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &Получатель", ТекстУсловияПолучателя);
	
	Если ЗначениеЗаполнено(ТекстИтогиПо) Тогда
		
		Если ЕстьРасчет Тогда
			ТекстЗапроса = ТекстЗапроса + ТекстЗапроса_Расхождения();
		Иначе 
			ТекстЗапроса = ТекстЗапроса + Символы.ПС; //Расхождения уже добавлены		
		КонецЕсли;
					
		Если НЕ ПустаяСтрока(ТекстУсловияКомментария) Тогда
			ТекстЗапроса = ТекстЗапроса +
			"ГДЕ" + Символы.ПС + ТекстУсловияКомментария + Символы.ПС;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса +
			ТекстСортировки + Символы.ПС +
			"
			|ИТОГИ
			|	СУММА(Регистрация),
			|	СУММА(Урегулирование),
			|	СУММА(РасхожденийОсталосьУрегулировать),
			|	СУММА(СуммаОрганизации),
			|	СУММА(СуммаКонтрагента),
			|	СУММА(РегистрацияГр),
			|	СУММА(УрегулированиеГр),
			|	СУММА(РасхожденийОсталосьУрегулироватьГр),
			|	СУММА(СуммаОрганизацииГр),
			|	СУММА(СуммаКонтрагентаГр),
			|	0 КАК ПроцентУрегулировано,
			|	ЕстьNULL(ВЫБОР
			|	КОГДА СУММА(ВЫБОР
			|			КОГДА СуммаОрганизации > 0
			|					ТОГДА СуммаОрганизации
			|				ИНАЧЕ -СуммаОрганизации
			|			КОНЕЦ + ВЫБОР
			|				КОГДА СуммаКонтрагента > 0
			|					ТОГДА СуммаКонтрагента
			|				ИНАЧЕ -СуммаКонтрагента
			|			КОНЕЦ) = 0
			|		ТОГДА 0
			|	ИНАЧЕ СУММА(Регистрация) / СУММА(ВЫБОР
			|				КОГДА СуммаОрганизации > 0
			|					ТОГДА СуммаОрганизации
			|				ИНАЧЕ -СуммаОрганизации
			|			КОНЕЦ + ВЫБОР
			|				КОГДА СуммаКонтрагента > 0
			|					ТОГДА СуммаКонтрагента
			|				ИНАЧЕ -СуммаКонтрагента
			|			КОНЕЦ) * 100
			|	КОНЕЦ, 0) КАК ПроцентОсталосьУрегулировать,
			|	МИНИМУМ(Состояние),
			|	МИНИМУМ(ПредметКомментирования),
			|	МИНИМУМ(Комментарий),
			|	МИНИМУМ(АвторУрегулирования),
			|	МАКСИМУМ(ДатаНачалаСпора),
			|	МИНИМУМ(СверкаЗакрыта),
			|	МИНИМУМ(ПричинаРасхождения),
			|	МИНИМУМ(СторонаПричиныРасхождения)
			|ПО " + ТекстИтогиПо;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Сценарий", Параметры.Сценарий);
	Запрос.УстановитьПараметр("ПериодСценария", Параметры.ПериодСценария);
	Запрос.УстановитьПараметр("Этап", Параметры.Этап);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("РазделКомментариев", Перечисления.РазделыКомментариев.РасхожденияВГО);
	
	Если флОтладка Тогда
		СверкаВГОУХ.ЗаписатьЗапросВрегистрДляОтладки("ПорталСверки", Запрос, Параметры);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.Выполнить();
	
 	ДеревоЗапроса = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ОбработатьДерево(ДеревоЗапроса, АдресСтроки, Параметры);
	
КонецФункции

&НаСервереБезКонтекста
// Заполняем строку дерева расхождений данными
Процедура ЗаполнитьСтрокуРасхождения(НоваяСтрока, СтрДанных, ИмяГруппировки, ТекУровень,
									ЕстьВалюта, ЕстьОрганизация, ЭтоИерархия)
	НоваяСтрока.Организация = ЗаменитьNULL(СтрДанных.Организация);
	НоваяСтрока.Контрагент = ЗаменитьNULL(СтрДанных.Контрагент);
	Если ИмяГруппировки = "Строка" Тогда
		НоваяСтрока.НашаАналитика = "--"; //СтрДанных.Организация;
	Иначе
		НоваяСтрока.НашаАналитика = СтрДанных[ИмяГруппировки];
	КонецЕсли;
	
	Если ИмяГруппировки = "Организация" Тогда
		НоваяСтрока.АналитикаКонтрагента = "";
	ИначеЕсли ИмяГруппировки = "Контрагент" Тогда
		НоваяСтрока.АналитикаКонтрагента = СтрДанных.Контрагент;
	ИначеЕсли ИмяГруппировки = "СторонаСверки" Тогда
		НоваяСтрока.АналитикаКонтрагента =
			?(НоваяСтрока.НашаАналитика = Перечисления.СтороныСверкиВГО.Кредитор,
				Перечисления.СтороныСверкиВГО.Дебитор,
				Перечисления.СтороныСверкиВГО.Кредитор);
	Иначе
		НоваяСтрока.АналитикаКонтрагента = НоваяСтрока.НашаАналитика;
	КонецЕсли;
	Если ИмяГруппировки <> "Организация" Тогда
		НоваяСтрока.СторонаСверки = ЗаменитьNULL(СтрДанных.СторонаСверки);	
	КонецЕсли;
	
	Если ИмяГруппировки = "Регистратор" Тогда
		НоваяСтрока.АвторПоследнегоУрегулирования = СтрДанных.Регистратор.Ответственный;
	Иначе
		НоваяСтрока.АвторПоследнегоУрегулирования = СтрДанных.АвторУрегулирования;
	КонецЕсли;
	
	Если ИмяГруппировки = "Регистратор" Тогда
		ЗнакУрегулирования_ = ?(СтрДанных.Регистратор.ЗнакУрегулирования,1,-1);
		НоваяСтрока.Расхождение = 0;
		НоваяСтрока.ОсталосьУрегулировать = 0;
		НоваяСтрока.СуммаНаша = СтрДанных.Регистратор.СуммаУрегулирования * ЗнакУрегулирования_;
		НоваяСтрока.СуммаКонтрагента = 0;
		НоваяСтрока.Урегулировано = СтрДанных.Регистратор.СуммаУрегулирования;
		
		НоваяСтрока.РасхождениеГр = 0;
		НоваяСтрока.ОсталосьУрегулироватьГр = 0;
		НоваяСтрока.СуммаНашаГр = СтрДанных.Регистратор.СуммаУрегулированияГр * ЗнакУрегулирования_;
		НоваяСтрока.СуммаКонтрагентаГр = 0;
		НоваяСтрока.УрегулированоГр = СтрДанных.Регистратор.СуммаУрегулированияГр;
		
	ИначеЕсли ЕстьВалюта Тогда
		НоваяСтрока.Расхождение = СтрДанных.РасхожденийОсталосьУрегулировать; //Регистрация;
		НоваяСтрока.ОсталосьУрегулировать = СтрДанных.РасхожденийОсталосьУрегулировать;
		НоваяСтрока.СуммаНаша = СтрДанных.СуммаОрганизации;
		НоваяСтрока.СуммаКонтрагента = СтрДанных.СуммаКонтрагента;
		НоваяСтрока.Урегулировано = СтрДанных.Урегулирование;
		
		НоваяСтрока.РасхождениеГр = СтрДанных.РасхожденийОсталосьУрегулироватьГр; //РегистрацияГр;
		НоваяСтрока.ОсталосьУрегулироватьГр = СтрДанных.РасхожденийОсталосьУрегулироватьГр;
		НоваяСтрока.СуммаНашаГр = СтрДанных.СуммаОрганизацииГр;
		НоваяСтрока.СуммаКонтрагентаГр = СтрДанных.СуммаКонтрагентаГр;
		НоваяСтрока.УрегулированоГр = СтрДанных.УрегулированиеГр;
		
	ИначеЕсли ЕстьОрганизация Тогда
		НоваяСтрока.Расхождение = 0;
		НоваяСтрока.ОсталосьУрегулировать = 0;
		НоваяСтрока.СуммаНаша = 0;
		НоваяСтрока.СуммаКонтрагента = 0;
		НоваяСтрока.Урегулировано = 0;
		
		НоваяСтрока.РасхождениеГр = СтрДанных.РасхожденийОсталосьУрегулироватьГр; //РегистрацияГр;
		НоваяСтрока.ОсталосьУрегулироватьГр = СтрДанных.РасхожденийОсталосьУрегулироватьГр;
		НоваяСтрока.СуммаНашаГр = СтрДанных.СуммаОрганизацииГр;
		НоваяСтрока.СуммаКонтрагентаГр = СтрДанных.СуммаКонтрагентаГр;
		НоваяСтрока.УрегулированоГр = СтрДанных.УрегулированиеГр;
		
	Иначе
		НоваяСтрока.Расхождение = 0;
		НоваяСтрока.ОсталосьУрегулировать = 0; 
		НоваяСтрока.СуммаНаша = 0;
		НоваяСтрока.СуммаКонтрагента = 0;
		НоваяСтрока.Урегулировано = 0; 
		
		НоваяСтрока.РасхождениеГр = СтрДанных.РасхожденийОсталосьУрегулироватьГр; //РегистрацияГр;
		НоваяСтрока.ОсталосьУрегулироватьГр = СтрДанных.РасхожденийОсталосьУрегулироватьГр;
		НоваяСтрока.СуммаНашаГр = СтрДанных.СуммаОрганизацииГр;
		НоваяСтрока.СуммаКонтрагентаГр = СтрДанных.СуммаКонтрагентаГр;
		НоваяСтрока.УрегулированоГр = СтрДанных.УрегулированиеГр;
		
	КонецЕсли;
	
	НоваяСтрока.ПроцентУрегулированных = Макс(СтрДанных.ПроцентУрегулировано, 0);
	НоваяСтрока.ПроцентНеурегулированных = Макс(СтрДанных.ПроцентОсталосьУрегулировать, 0);
	
	Если СтрДанных.ВалютаВзаиморасчетов <> NULL И СтрДанных.Организация <> NULL И СтрДанных.Контрагент <> NULL И 
		СтрДанных.РазделВГО <> NULL И СтрДанных.СторонаСверки <> NULL И
		НЕ (СтрДанных.РазделВГО.ЕстьДопАналитики И СтрДанных.ДопАналитикаРасхождения = NULL) Тогда
		НоваяСтрока.Комментарии = СтрДанных.Комментарий;
		НоваяСтрока.ПредметКомментирования = СтрДанных.ПредметКомментирования;
		Если СтрДанных.Состояние = Перечисления.СостояниеСверкиВГО.Спор Тогда
			НоваяСтрока.Спор = Истина;
			НоваяСтрока.ДатаНачалаСпора = СтрДанных.ДатаНачалаСпора;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрДанных.СторонаСверки = Перечисления.СтороныСверкиВГО.Кредитор Тогда
		НоваяСтрока.Отправитель = ЗаменитьNULL(СтрДанных.Организация);
		НоваяСтрока.Получатель = ЗаменитьNULL(СтрДанных.Контрагент);
	Иначе
		НоваяСтрока.Отправитель = ЗаменитьNULL(СтрДанных.Контрагент);
		НоваяСтрока.Получатель = ЗаменитьNULL(СтрДанных.Организация);
	КонецЕсли;
	НоваяСтрока.РазделВГО = ЗаменитьNULL(СтрДанных.РазделВГО);
	НоваяСтрока.ВалютаВзаиморасчетов = ЗаменитьNULL(СтрДанных.ВалютаВзаиморасчетов);
	НоваяСтрока.ДопАналитикаРасхождения = ЗаменитьNULL(СтрДанных.ДопАналитикаРасхождения);
	НоваяСтрока.Иерархия = ИмяГруппировки;
	НоваяСтрока.Уровень = ТекУровень;
	НоваяСтрока.ЭтоГруппа = ЭтоИерархия;
	НоваяСтрока.СверкаЗакрыта = СтрДанных.СверкаЗакрыта;
	
	Если ЗначениеЗаполнено(НоваяСтрока.РазделВГО) И ЗначениеЗаполнено(НоваяСтрока.Отправитель) И
		ЗначениеЗаполнено(НоваяСтрока.Получатель) И ЗначениеЗаполнено(НоваяСтрока.ВалютаВзаиморасчетов) И
		(НЕ НоваяСтрока.РазделВГО.ЕстьДопАналитики ИЛИ ЗначениеЗаполнено(НоваяСтрока.ДопАналитикаРасхождения)) Тогда
		
		НоваяСтрока.ПричинаРасхождения = ЗаменитьNULL(СтрДанных.ПричинаРасхождения);
		НоваяСтрока.СторонаПричиныРасхождения = ЗаменитьNULL(СтрДанных.СторонаПричиныРасхождения);
		
	Иначе
		
		НоваяСтрока.ПричинаРасхождения = Справочники.ПричиныРасхожденийВГО.ПустаяСсылка();
		НоваяСтрока.СторонаПричиныРасхождения = Перечисления.СтороныСверкиВГО.ПустаяСсылка();
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(НоваяСтрока.РазделВГО) Тогда
		НоваяСтрока.флЕстьДопАналитики = НоваяСтрока.РазделВГО.ЕстьДопАналитики;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработатьДерево(ДеревоЗапроса, АдресСтроки, Параметры)
	Расхождения = Новый Массив;
	КолонкиРасхождения = Параметры.КолонкиРасхождения;
	Иерархия = Параметры.Иерархия;
	КолСтрок = Параметры.КолСтрок;
	МаксУровень = Параметры.ТекУровень + КолСтрок;
	НомСтрРасшифровки = Параметры.СтрокаРасшифровки;
	НомСтрВалюты = Параметры.НомСтрокиВалюты;
	НомСтрОрганизации = Параметры.НомСтрокиОрганизации;
	УровеньРегистратора = Параметры.МаксУровень + 1;
	ТекСписокЗапроса = ДеревоЗапроса.Строки;
	ТекСписокРасхождений = Расхождения;
	НомИерархии = 1;
	Строка = Неопределено;
	
	// заполним иерархию до текущего уровня
	Если АдресСтроки.Количество() > 0 Тогда
		Пока (НомИерархии < МаксУровень) И (ТекСписокЗапроса <> неопределено) Цикл
			флЭтоСтрока = Иерархия[НомИерархии-1].Строка;
			Если флЭтоСтрока Тогда
				ИмяГруппировки = "Строка";
			Иначе
				ИмяГруппировки = Иерархия[НомИерархии-1].Иерархия;
			КонецЕсли;
			Для Каждого СтрДанных Из ТекСписокЗапроса Цикл
				Если (НомИерархии = МаксУровень-1) ИЛИ НЕ флЭтоСтрока Тогда
					Строка = Новый Структура;
					ТекСписокРасхождений.Добавить(Строка);
					Значение = Новый Структура(КолонкиРасхождения);
					ЗаполнитьСтрокуРасхождения(Значение, СтрДанных, ИмяГруппировки, ?(флЭтоСтрока,НомИерархии-КолСтрок,НомИерархии), 
						(НомИерархии>=НомСтрВалюты), (НомИерархии>=НомСтрОрганизации), Истина);
					Строка.Вставить("Значение", Значение);
					Строка.Вставить("Развернута", Истина);
					Строка.Вставить("Строки", Новый Массив);
					ТекСписокРасхождений = Строка.Строки;
				КонецЕсли;
				ТекСписокЗапроса = СтрДанных.Строки;
				Прервать;
			КонецЦикла;
			НомИерархии = НомИерархии + 1;
		КонецЦикла;
	КонецЕсли;
	
	// Загрузить данные в текущий уровень
	Если НомИерархии = УровеньРегистратора И Строка <> Неопределено  И Строка.Значение.Урегулировано = 0 Тогда 
		ТекСписокРасхождений = Новый Массив;
		Строка1 = Новый Структура;
		ТекСписокРасхождений.Добавить(Строка1);
		Значение = Новый Структура(КолонкиРасхождения);
		Если Строка.Свойство("Значение") Тогда
			ЗаполнитьЗначенияСвойств(Значение, Строка.Значение);
			Значение.СуммаНаша = 0;
			Значение.СуммаКонтрагента = 0;
			Значение.Урегулировано = 0;
			Значение.Расхождение = 0;
			Значение.СуммаНашаГр = 0;
			Значение.СуммаКонтрагентаГр = 0;
			Значение.УрегулированоГр = 0;
			Значение.РасхождениеГр = 0;
		КонецЕсли;
		Значение.НашаАналитика = НСтр("ru = 'Нет урегулирований'");
		Значение.Иерархия = "Регистратор";
		Значение.ЭтоГруппа = Ложь;
		Значение.Уровень = НомИерархии;
		Строка1.Вставить("Значение", Значение);
		Строка1.Вставить("Строки", Новый Массив);
		Строка1.Вставить("Текущая", Истина);
	Иначе
		ТекСписокРасхождений = УпаковатьДерево(ТекСписокЗапроса, КолонкиРасхождения, НомИерархии, Иерархия,
			АдресСтроки, МаксУровень, УровеньРегистратора, НомСтрВалюты, НомСтрОрганизации, КолСтрок);
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		Расхождения = ТекСписокРасхождений;
	Иначе
		Строка.Строки = ТекСписокРасхождений;
	КонецЕсли;
	
	Возврат Расхождения;
	
КонецФункции

&НаСервереБезКонтекста
Функция УпаковатьДерево(ДеревоСтроки, Колонки, Знач НомИерархии, Иерархия, АдресСтроки,
		МаксУровень, УровеньРегистратора, НомСтрВалюты, НомСтрОрганизации, КолСтрок)
		
	Строки = Новый Массив;
	флДобавитьПустуюПодчиненнуюСтроку = Истина;
	Если НомИерархии <= МаксУровень И ДеревоСтроки <> Неопределено Тогда
		флТекСтрока = (НомИерархии = МаксУровень);
		Если НомИерархии = УровеньРегистратора Тогда
			ИмяГруппировки = "Регистратор";
		Иначе
			ИмяГруппировки = Иерархия[НомИерархии-1].Иерархия;
		КонецЕсли;
		
		// Если данных нет, то напишем об этом в строке
		Если ДеревоСтроки.Количество() = 0 Тогда
			флДобавитьПустуюПодчиненнуюСтроку = Ложь;
			Строка = Новый Структура;
			Строки.Добавить(Строка);
			Значение = Новый Структура(Колонки);
			Значение.Уровень = НомИерархии;
			Значение.НашаАналитика = НСтр("ru = 'Нет данных для отображения!'");
			Строка.Вставить("Значение", Значение);
			Строка.Вставить("Строки", Новый Массив);
			
		Иначе
			Для Каждого Элемент Из ДеревоСтроки Цикл
				Если НомИерархии = УровеньРегистратора И НЕ ЗначениеЗаполнено(Элемент.Регистратор) Тогда
					Продолжить;
				КонецЕсли;
				
				Строка = Новый Структура;
				Строки.Добавить(Строка);
				Значение = Новый Структура(Колонки);
				ЗаполнитьСтрокуРасхождения(Значение, Элемент, ИмяГруппировки, НомИерархии-КолСтрок,
					(НомИерархии>=НомСтрВалюты), (НомИерархии>=НомСтрОрганизации), Ложь);
				Строка.Вставить("Значение", Значение);
				Если флТекСтрока Тогда
					флТекСтрока = Ложь;
					Строка.Вставить("Текущая", Истина);
				КонецЕсли;
				Если ИмяГруппировки = "Регистратор" Тогда
					Строка.Вставить("Строки", Новый Массив);
				Иначе
					Строка.Вставить("Строки", УпаковатьДерево(Элемент.Строки, Колонки, НомИерархии+1, Иерархия,
						АдресСтроки, МаксУровень, УровеньРегистратора, НомСтрВалюты, НомСтрОрганизации, КолСтрок));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	// Для того чтобы была возможность раскрыть этот уровень добавим пустую подчиненную строку
	Если флДобавитьПустуюПодчиненнуюСтроку И Строки.Количество() = 0 Тогда
		Строка = Новый Структура;
		Строки.Добавить(Строка);
		Значение = Новый Структура(Колонки);
		Значение.Уровень = НомИерархии;
		Строка.Вставить("Значение", Значение);
		Строка.Вставить("Строки", Новый Массив);
	КонецЕсли;
	
	Возврат Строки;
	
Конецфункции

&НаСервереБезКонтекста
Функция ЗаменитьNULL(Значение)
	Возврат ?(Значение = NULL, Неопределено, Значение);
КонецФункции

#КонецОбласти
