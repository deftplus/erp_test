
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Параметры.Свойство("ДатаОкончанияПериода") Тогда
		ДатаОкончанияПериода = Параметры.ДатаОкончанияПериода;
	КонецЕсли;
	
	Если Параметры.Свойство("Организация") Тогда
		Организация = Параметры.Организация;
		УправлениеЭлементамиФормыПриИзмененииОрганизации();
	КонецЕсли;
	
	Если Параметры.Свойство("ПланСчетов") Тогда
		ПланСчетов = Параметры.ПланСчетов;
	КонецЕсли;
	ОбновитьДанныеОСостоянииДокументовИНастройкахНастройкиФормированияПроводок();
	
	ДополнительныеПараметры = Новый Структура;
	ИнтеграцияССППР.ДобавитьРазмещениеКомандСППРВДополнительныеПараметры(Элементы.ГруппаСППР, ДополнительныеПараметры);
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	УправлениеЭлементамиФормыПриИзмененииАвтоматическогоОтраженияВУчете();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ВнешниеСобытия = Новый Массив;
	ВнешниеСобытия.Добавить("Запись_ОтражениеДокументовВМеждународномУчете");
	ВнешниеСобытия.Добавить("ЗаконченаНастройкаШаблоновПроводокМеждународногоУчета");
	ВнешниеСобытия.Добавить("ЗакрытаФормаНастройкиНеобходимыхПравилОтраженияВУчете");
	ВнешниеСобытия.Добавить("ИзмененаДатаЗапретаФормированияПроводок");
	
	Если ВнешниеСобытия.Найти(ИмяСобытия) <> Неопределено Тогда
		ОбработкаОповещенияСервер(ИмяСобытия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры.Свойство("ДатаОкончанияПериода") Тогда
		ДатаОкончанияПериода = Параметры.ДатаОкончанияПериода;
	КонецЕсли;
	
	Если Параметры.Свойство("Организация") Тогда
		Организация = Параметры.Организация;
	Иначе
		УправлениеЭлементамиФормыПриИзмененииОрганизации();
	КонецЕсли;

	Если Параметры.Свойство("ПланСчетов") Тогда
		ПланСчетов = Параметры.ПланСчетов;
	КонецЕсли;
	
	ОбновитьДанныеОСостоянииДокументовИНастройкахНастройкиФормированияПроводок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланСчетовПриИзменении(Элемент)
	
	ПланСчетовПриИзмененииСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПериодаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДатаОкончанияПериода) Тогда
		ДатаОкончанияПериода = КонецДня(ДатаОкончанияПериода);
	КонецЕсли;
	ОбновитьДанныеОСостоянииДокументовИНастройкахНастройкиФормированияПроводок();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусКОтражениюВУчетеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов();
	ОткрытьФорму("Обработка.ОтражениеДокументовВМеждународномУчете.Форма.ДокументыОжидающиеОтраженияВУчете", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтсутствуютПравилаОтраженияВУчетеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов();
	ОткрытьФорму("Обработка.ОтражениеДокументовВМеждународномУчете.Форма.ДокументыНеОтраженныеВУчетеОтсутствуютПравилаОтражения", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СтатусОжидаетсяОтражениеВРеглУчетеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов();
	ОткрытьФорму("Обработка.ОтражениеДокументовВМеждународномУчете.Форма.ДокументыНеОтраженныеВУчетеОжидаютОтраженияВРеглУчете", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусНарушенаДвойнаяЗаписьФинансовыхРегистровНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов();
	ОткрытьФорму("Обработка.ОтражениеДокументовВМеждународномУчете.Форма.ДокументыНеОтраженныеВУчетеНарушенаДвойнаяЗаписьФинансовыхРегистров", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяНастроитьПравилаОтраженияВУчетеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("АдресРезультатаПроверки", АдресРезультатаПроверки);
	ОткрытьФорму("Обработка.ОтражениеДокументовВМеждународномУчете.Форма.НеобходимыеПравилаОтражения", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтраженоВУчетеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов();
	ОткрытьФорму("Обработка.ОтражениеДокументовВМеждународномУчете.Форма.ДокументыОтраженныеВУчете", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусКОтражениюВЗакрытомПериодеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов();
	ПараметрыФормы.Вставить("ДатаЗапрета", ДатаЗапрета);
	ОткрытьФорму("Обработка.ОтражениеДокументовВМеждународномУчете.Форма.ДокументыОжидающиеОтраженияВУчете", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусКОтражениюВУчетеВручнуюНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов();
	ОткрытьФорму("Обработка.ОтражениеДокументовВМеждународномУчете.Форма.ДокументыОжидающиеОтраженияВУчетеВручную", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтраженоВУчетеВручнуюНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов();
	ОткрытьФорму("Обработка.ОтражениеДокументовВМеждународномУчете.Форма.ДокументыОтраженныеВУчетеВручную", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическоеОтражениеВУчетеПриИзменении(Элемент)
	
	СохранитьРеквизитыРегламентногоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеРасписанияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РедактированиеРасписанияРегламентногоЗадания();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСостояние(Команда)
	
	ОбновитьДанныеОСостоянииДокументовИНастройкахНастройкиФормированияПроводок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьДокументыВМеждународномУчете(Команда)
	
	ОтразитьДокументыВМеждународномУчетеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
 
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДатуЗапрета(Команда)
	
	ОткрытьФорму("РегистрСведений.ДатыЗапретаФормированияПроводокМеждународныйУчет.Форма.ДатыЗапретаФормирования", , ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура НастроитьШаблоныПроводок(Команда)
	
	ПараметрыФормы = МеждународныйУчетКлиент.ПараметрыОткрытияФормНастройкиПроводок();
	ПараметрыФормы.Организация = Организация;
	ПараметрыФормы.ПланСчетов = ПланСчетов;
	МеждународныйУчетПоДаннымОперативногоУчетаКлиент.ОткрытьНастройкуШаблоновПроводок(ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкуСчетовПоОбъектамУчета(Команда)
	
	ПараметрыФормы = МеждународныйУчетКлиент.ПараметрыОткрытияФормНастройкиПроводок();
	ПараметрыФормы.Организация = Организация;
	ПараметрыФормы.ПланСчетов = ПланСчетов;
	МеждународныйУчетПоДаннымОперативногоУчетаКлиент.ОткрытьНастройкуСчетовПоОбъектамУчета(ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСоответствиеСчетовИОборотов(Команда)
	
	ПараметрыФормы = МеждународныйУчетКлиент.ПараметрыОткрытияФормНастройкиПроводок();
	ПараметрыФормы.Организация = Организация;
	ПараметрыФормы.ПланСчетов = ПланСчетов;
	МеждународныйУчетПоДаннымРеглУчетаКлиент.ОткрытьНастройкуСоответствияСчетовИОборотов(ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Общие

&НаСервере
Процедура ОтразитьДокументыВМеждународномУчетеСервер()
	
	ПараметрыОтражения = МеждународныйУчетПроведениеСервер.ПараметрыОтраженияВМеждународномУчете();
	ПараметрыОтражения.МассивОрганизаций = Организация;
	ПараметрыОтражения.ДатаОкончания = ДатаОкончанияПериода;
	МеждународныйУчетПроведениеСервер.ОтразитьВМеждународномУчете(ПараметрыОтражения);
	
	ПолучитьСостояниеОтраженияДокументов();
	
	ПолучитьОперацииТребующиеНастройкиШаблонов();

КонецПроцедуры

&НаСервере
Процедура ПолучитьСостояниеОтраженияДокументов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтражениеДокументов.ДатаОтражения КАК ДатаОтражения,
	|	ОтражениеДокументов.Регистратор КАК Регистратор,
	|	ОтражениеДокументов.Статус КАК Статус
	|ПОМЕСТИТЬ ОтражениеДокументов
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументов
	|ГДЕ
	|	(&ЛюбаяОрганизация ИЛИ ОтражениеДокументов.Организация = &Организация)
	|	И (&ЛюбойПланСчетов ИЛИ ОтражениеДокументов.ПланСчетов = &ПланСчетов)
	|	И ОтражениеДокументов.ДатаОтражения <= &ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ОтражениеДокументов.ДатаОтражения) КАК ДатаНачала
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную)
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОтражениеДокументов.Регистратор) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОтражениеДокументов.ДатаОтражения) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) КАК Количество
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную)
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОтражениеДокументов.Регистратор) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ОтражениеДокументов.ДатаОтражения) КАК ДатаНачала
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете)
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОтражениеДокументов.Регистратор) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОтражениеДокументов.ДатаОтражения) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) КАК Количество
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете)
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОтражениеДокументов.Регистратор) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОтражениеДокументов.ДатаОтражения) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) КАК Количество
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОжидаетсяОтражениеВРеглУчете)
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОтражениеДокументов.Регистратор) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОтражениеДокументов.ДатаОтражения) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) КАК Количество
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете)
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОтражениеДокументов.Регистратор) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОтражениеДокументов.ДатаОтражения) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) КАК Количество
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете)
	|	И ОтражениеДокументов.ДатаОтражения <= &ДатаЗапрета
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОтражениеДокументов.ДатаОтражения) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) КАК Количество
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров)
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОтражениеДокументов.Регистратор) > 0
	|";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ЛюбаяОрганизация", Не ЗначениеЗаполнено(Организация));
	Запрос.УстановитьПараметр("ПланСчетов", ПланСчетов);
	Запрос.УстановитьПараметр("ЛюбойПланСчетов", Не ЗначениеЗаполнено(ПланСчетов));
	Запрос.УстановитьПараметр("ДатаОкончания", ?(ЗначениеЗаполнено(ДатаОкончанияПериода), ДатаОкончанияПериода, Дата(2399, 1, 1)));
	Запрос.УстановитьПараметр("ДатаЗапрета", ДатаЗапрета);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[1].Выбрать();
	Если Выборка.Следующий() Тогда
		ТекстСтатуса = НСтр("ru = 'Документы, отраженные в учете вручную, по %Дата%';
							|en = 'Documents posted in financial accounting manually before %Дата%'");
		СтатусОтраженоВУчетеВручную = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.ДатаНачала, "ДЛФ=Д"));
		Элементы.СтатусОтраженоВУчетеВручную.ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
		Элементы.СтатусОтраженоВУчетеВручную.Гиперссылка = Истина;
	Иначе
		СтатусОтраженоВУчетеВручную = НСтр("ru = 'Нет документов, отраженных в международном учете вручную.';
											|en = 'No documents which are manually posted in financial accounting.'");
		Элементы.СтатусОтраженоВУчетеВручную.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
		Элементы.СтатусОтраженоВУчетеВручную.Гиперссылка = Ложь;
	КонецЕсли;
	
	Выборка = МассивРезультатов[2].Выбрать();
	Если Выборка.Следующий() Тогда
		ТекстСтатуса = НСтр("ru = 'Документы, ожидающие ручного отражения в международном учете (%Количество%), с %Дата%';
							|en = 'Documents awaiting manual financial accounting posting (%Количество%), from %Дата%'");
		ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", Выборка.Количество);
		СтатусКОтражениюВУчетеВручную = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.ДатаНачала, "ДЛФ=Д"));
		Элементы.СтатусКОтражениюВУчетеВручную.ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
		Элементы.СтатусКОтражениюВУчетеВручную.Гиперссылка = Истина;
	Иначе
		СтатусКОтражениюВУчетеВручную = НСтр("ru = 'Нет документов, ожидающих ручного отражения в международном учете.';
											|en = 'No documents which are awaiting manual financial accounting posting.'");
		Элементы.СтатусКОтражениюВУчетеВручную.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
		Элементы.СтатусКОтражениюВУчетеВручную.Гиперссылка = Ложь;
	КонецЕсли;
	
	Выборка = МассивРезультатов[3].Выбрать();
	Если Выборка.Следующий() Тогда
		ТекстСтатуса = НСтр("ru = 'Отраженные в учете документы, по %Дата%';
							|en = 'Documents posted to accounting, up to %Дата%'");
		СтатусОтраженоВУчете = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.ДатаНачала, "ДЛФ=Д"));
		Элементы.СтатусОтраженоВУчете.ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
		Элементы.СтатусОтраженоВУчете.Гиперссылка = Истина;
	Иначе
		СтатусОтраженоВУчете = НСтр("ru = 'Нет документов, отраженных в международном учете.';
									|en = 'No documents posted in financial accounting.'");
		Элементы.СтатусОтраженоВУчете.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
		Элементы.СтатусОтраженоВУчете.Гиперссылка = Ложь;
	КонецЕсли;
	
	Выборка = МассивРезультатов[4].Выбрать();
	Если Выборка.Следующий() Тогда
		ТекстСтатуса = НСтр("ru = 'Документы, ожидающие автоматического отражения в международном учете (%Количество%), с %Дата%';
							|en = 'Documents awaiting automatic financial accounting posting (%Количество%), from %Дата%'");
		ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", Выборка.Количество);
		СтатусКОтражениюВУчете = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.ДатаНачала, "ДЛФ=Д"));
		Элементы.СтатусКОтражениюВУчете.ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
		Элементы.СтатусКОтражениюВУчете.Гиперссылка = Истина;
	Иначе
		СтатусКОтражениюВУчете = НСтр("ru = 'Нет документов, ожидающих автоматического отражения в международном учете.';
										|en = 'No documents which are awaiting automatic financial accounting posting.'");
		Элементы.СтатусКОтражениюВУчете.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
		Элементы.СтатусКОтражениюВУчете.Гиперссылка = Ложь;
	КонецЕсли;
	
	Выборка = МассивРезультатов[5].Выбрать();
	Если Выборка.Следующий() Тогда
		ТекстСтатуса = НСтр("ru = 'Документы не отраженные в учете из-за ожидания отражения в регл. учете (%Количество%), с %Дата%';
							|en = 'Documents not posted to accounting due to awaiting posting in local accounting (%Количество%), from %Дата%'");
		ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", Выборка.Количество);
		СтатусОжидаетсяОтражениеВРеглУчете = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.ДатаНачала, "ДЛФ=Д"));
		Элементы.СтатусОжидаетсяОтражениеВРеглУчете.ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
		Элементы.СтатусОжидаетсяОтражениеВРеглУчете.Гиперссылка = Истина;
		Элементы.СтатусОжидаетсяОтражениеВРеглУчете.Видимость = Истина;
	Иначе
		Элементы.СтатусОжидаетсяОтражениеВРеглУчете.Видимость = Ложь;
	КонецЕсли;
	
	Выборка = МассивРезультатов[6].Выбрать();
	Если Выборка.Следующий() Тогда
		ТекстСтатуса = НСтр("ru = 'Документы не отраженные в учете из-за ошибок (%Количество%), с %Дата%';
							|en = 'Documents not posted to accounting due to errors (%Количество%), from %Дата%'");
		ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", Выборка.Количество);
		СтатусОтсутствуютПравилаОтраженияВУчете = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.ДатаНачала, "ДЛФ=Д"));
		Элементы.СтатусОтсутствуютПравилаОтраженияВУчете.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
		Элементы.СтатусОтсутствуютПравилаОтраженияВУчете.Гиперссылка = Истина;
		Элементы.СтатусОтсутствуютПравилаОтраженияВУчете.Видимость = Истина;
	Иначе
		Элементы.СтатусОтсутствуютПравилаОтраженияВУчете.Видимость = Ложь;
	КонецЕсли;

	Выборка = МассивРезультатов[7].Выбрать();
	Если Выборка.Следующий() Тогда
		ТекстСтатуса = НСтр("ru = 'в том числе в закрытом периоде (%Количество%)';
							|en = 'including in the closed period (%Количество%)'");
		ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", Выборка.Количество);
		ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(ДатаЗапрета, "ДЛФ=Д"));
		СтатусКОтражениюВЗакрытомПериоде = ТекстСтатуса;
		Элементы.СтатусКОтражениюВЗакрытомПериоде.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
		Элементы.ГруппаЗакрытыйПериод.Видимость = Истина;
	Иначе
		Элементы.ГруппаЗакрытыйПериод.Видимость = Ложь;
	КонецЕсли;
	
	Выборка = МассивРезультатов[8].Выбрать();
	Если Выборка.Следующий() Тогда
		ТекстСтатуса = НСтр("ru = 'Документы не отраженные в учете из-за нарушения двойной записи в финансовых регистрах (%Количество%), с %Дата%';
							|en = 'Documents not recorded in accounting due to violation of double entry in financial registers (%Количество%), from %Дата%'");
		ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", Выборка.Количество);
		СтатусНарушенаДвойнаяЗаписьФинансовыхРегистров = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.ДатаНачала, "ДЛФ=Д"));
		Элементы.СтатусНарушенаДвойнаяЗаписьФинансовыхРегистров.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
		Элементы.СтатусНарушенаДвойнаяЗаписьФинансовыхРегистров.Гиперссылка = Истина;
		Элементы.СтатусНарушенаДвойнаяЗаписьФинансовыхРегистров.Видимость = Истина;
	Иначе
		Элементы.СтатусНарушенаДвойнаяЗаписьФинансовыхРегистров.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервере
Процедура ПолучитьОперацииТребующиеНастройкиШаблонов()
	
	ПараметрыПроверки = Обработки.ОтражениеДокументовВМеждународномУчете.ПараметрыПроверкиПравилОтражения();
	Если ЗначениеЗаполнено(Организация) Тогда
		ПараметрыПроверки.Организация = Организация;
	КонецЕсли;
	Результат = Обработки.ОтражениеДокументовВМеждународномУчете.ПроверитьНастройкуПравилОтраженияУчете(ПараметрыПроверки);
	
	АдресРезультатаПроверки = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);
	
	КоличествоОшибок = 
		Результат.ХозяйственныеОперацииБезПравилОтражения.Количество() + Результат.СчетаБезПравилОтражения.Количество();
	
	Если КоличествоОшибок > 0 Тогда
		ТекстСтатуса = НСтр("ru = 'Требуется настроить правила отражения в учете (%Количество%)';
							|en = 'Configure rules of posting in accounting (%Количество%)'");
		ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", КоличествоОшибок);
		ТребуетсяНастроитьПравилаОтраженияВУчете = ТекстСтатуса;
		Элементы.ТребуетсяНастроитьПравилаОтраженияВУчете.Видимость = Истина;
		Элементы.ТребуетсяНастроитьПравилаОтраженияВУчете.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
	Иначе
		Элементы.ТребуетсяНастроитьПравилаОтраженияВУчете.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОСостоянииДокументовИНастройкахНастройкиФормированияПроводок()
	
	ОбновитьДатуЗапретаОтраженияНаСервере();
	ПолучитьСостояниеОтраженияДокументов();
	ПолучитьОперацииТребующиеНастройкиШаблонов();
	ПолучитьСостояниеРегламентногоЗадания();
	СформироватьПредставлениеНастройкиФормированияПроводок();
	
КонецПроцедуры

&НаКлиенте
Функция ИнициализироватьПараметрыФормыСпискаДокументов()

	ПараметрыФормы = Новый Структура();
	
	Отбор = Новый Структура();
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор.Вставить("Организация", Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПланСчетов) Тогда
		Отбор.Вставить("ПланСчетов", ПланСчетов);
	КонецЕсли;
	Если Отбор.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("Отбор", Отбор);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ДатаОкончанияПериода", ?(ЗначениеЗаполнено(ДатаОкончанияПериода), ДатаОкончанияПериода, '39991231'));
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияСервер(ИмяСобытия)

	Если ИмяСобытия = "Запись_ОтражениеДокументовВМеждународномУчете" Тогда
		ПолучитьСостояниеОтраженияДокументов();
		ПолучитьОперацииТребующиеНастройкиШаблонов();
	ИначеЕсли ИмяСобытия = "ЗаконченаНастройкаШаблоновПроводокМеждународногоУчета"
		ИЛИ ИмяСобытия = "ЗакрытаФормаНастройкиНеобходимыхПравилОтраженияВУчете" Тогда
		ПолучитьОперацииТребующиеНастройкиШаблонов();
	ИначеЕсли ИмяСобытия = "ИзмененаДатаЗапретаФормированияПроводок" Тогда
		ОбновитьДанныеЗакрытогоПериода();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область АвтоматическоеОтражениеВУчете

&НаКлиенте
Процедура ОбновитьПредставлениеРасписания()
	
	ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗадания);
	Если ПредставлениеРасписания = Строка(Новый РасписаниеРегламентногоЗадания) Тогда
		ПредставлениеРасписания = НСтр("ru = 'Расписание не задано';
										|en = 'Schedule is not set'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостояниеРегламентногоЗадания()

	УстановитьПривилегированныйРежим(Истина);
	
	Задание = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.ОтражениеДокументовВМеждународномУчете);
	Если ОбщегоНазначения.РазделениеВключено() И ЗначениеЗаполнено(Задание.Шаблон) Тогда
		РасписаниеРегламентногоЗадания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание.Шаблон, "Расписание").Получить();
	Иначе
		РасписаниеРегламентногоЗадания	= Задание.Расписание;
	КонецЕсли;
	ИспользоватьАвтоматическоеОтражениеВУчете = Задание.Использование;
	
	СвойстваПоследнегоФоновогоЗадания = ОбщегоНазначенияУТ.ПолучитьСостояниеПоследнегоЗадания(Задание);
	Если СвойстваПоследнегоФоновогоЗадания = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(СвойстваПоследнегоФоновогоЗадания.ДатаЗавершения) Тогда
		СостояниеАвтоматическогоОтраженияВУчете = НСтр("ru = 'Не выполнялось';
														|en = 'Not executed'");
	Иначе
		СостояниеАвтоматическогоОтраженияВУчете = Строка(СвойстваПоследнегоФоновогоЗадания.Состояние) + ": "
			+ Строка(СвойстваПоследнегоФоновогоЗадания.ДатаЗавершения);
	КонецЕсли;
	
	Элементы.ИспользоватьАвтоматическоеОтражениеВУчете.Видимость = НЕ ОбщегоНазначения.РазделениеВключено();
	Элементы.ПредставлениеРасписания.Гиперссылка = НЕ ОбщегоНазначения.РазделениеВключено();
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗадания()
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(Новый ОписаниеОповещения("ОбработкаВыбораРасписания", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораРасписания(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание <> Неопределено Тогда
		РасписаниеРегламентногоЗадания = Расписание;
		СохранитьРеквизитыРегламентногоЗадания();
	КонецЕсли;
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьРеквизитыРегламентногоЗадания()

	УстановитьПривилегированныйРежим(Истина);
	
	Задание = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.ОтражениеДокументовВМеждународномУчете);
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", ИспользоватьАвтоматическоеОтражениеВУчете);
	ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
	РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	УправлениеЭлементамиФормыПриИзмененииАвтоматическогоОтраженияВУчете();
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиФормированияПроводок

&НаСервере
Процедура СформироватьПредставлениеНастройкиФормированияПроводок()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(1) КАК Количество
	|ИЗ
	|	РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций.СрезПоследних(
	|		&ДатаОкончанияПериода,
	|		Организация = &Организация ИЛИ &ВсеОрганизации) КАК ПланыСчетовМеждународногоУчета
	|ГДЕ
	|	ПланыСчетовМеждународногоУчета.НастройкаФормированияПроводок <> ЗНАЧЕНИЕ(Справочник.НастройкиФормированияПроводокМеждународногоУчета.ПустаяСсылка)
	|";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаОкончанияПериода", ДатаОкончанияПериода);
	Запрос.УстановитьПараметр("ВсеОрганизации", НЕ ЗначениеЗаполнено(Организация));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.Количество <> Null Тогда
		КоличествоЗаписей = Выборка.Количество;
	Иначе
		КоличествоЗаписей = 0;
	КонецЕсли;
	
	ТекстСостояния = "";
	ЦветТекста = Неопределено;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоПлановСчетовВМеждународномУчете") Тогда
		Если КоличествоЗаписей > 0 Тогда
			ТекстСостояния = СтрШаблон(НСтр("ru = 'Использование планов счетов (%1)';
											|en = 'Using charts of accounts (%1)'"), КоличествоЗаписей);
			ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
		Иначе
			ТекстСостояния = СтрШаблон(НСтр("ru = 'Нет настроек использования планов счетов';
											|en = 'No settings for using charts of accounts'"));
			ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
		КонецЕсли;
		НавигационнаяСсылка = "ОткрытьПланыСчетовМеждународногоУчетаОрганизаций";
	Иначе
		Если КоличествоЗаписей > 0 Тогда
			ТекстСостояния = СтрШаблон(НСтр("ru = 'Использование международного учета (%1)';
											|en = 'Use of financial accounting (%1)'"), КоличествоЗаписей);
			ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
		Иначе
			ТекстСостояния = СтрШаблон(НСтр("ru = 'Нет настроек использования международного учета';
											|en = 'No financial accounting use settings'"));
			ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
		КонецЕсли;
		НавигационнаяСсылка = "ОткрытьПланыСчетовМеждународногоУчетаОрганизаций";
	КонецЕсли;
	СостояниеНастройкиФормированияПроводок = Новый ФорматированнаяСтрока(ТекстСостояния, , ЦветТекста, , НавигационнаяСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПланыСчетовМеждународногоУчетаОрганизаций" Тогда
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФорму("РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций.Форма.РабочееМесто",
			Новый Структура("Организация", Организация));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()

	УправлениеЭлементамиФормыПриИзмененииОрганизации();
	ОбновитьДанныеОСостоянииДокументовИНастройкахНастройкиФормированияПроводок();

КонецПроцедуры

&НаСервере
Процедура ПланСчетовПриИзмененииСервер()

	ОбновитьДанныеОСостоянииДокументовИНастройкахНастройкиФормированияПроводок();

КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыПриИзмененииОрганизации()

	Если Не ЗначениеЗаполнено(Организация) Тогда
		
		Элементы.ГруппаЗакрытыйПериод.Видимость = Ложь;
		ОбновитьДатуЗапретаОтраженияНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыПриИзмененииАвтоматическогоОтраженияВУчете()

	Элементы.ПредставлениеРасписания.Доступность = ИспользоватьАвтоматическоеОтражениеВУчете;
	Элементы.ПредставлениеРасписания.Гиперссылка = НЕ ОбщегоНазначения.РазделениеВключено();
	Элементы.СостояниеАвтоматическогоОтраженияВУчете.Доступность = ИспользоватьАвтоматическоеОтражениеВУчете;

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеЗакрытогоПериода()
	
	ОбновитьДатуЗапретаОтраженияНаСервере();
	Если ЗначениеЗаполнено(Организация) Тогда
		ПолучитьСостояниеОтраженияДокументов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДатуЗапретаОтраженияНаСервере()
	
	ДатаЗапрета = МеждународныйУчетОбщегоНазначения.ДатаЗапретаФормированияПроводок(Организация);
	Элементы.УстановитьДатуЗапрета.Заголовок = МеждународныйУчетОбщегоНазначения.ПредставлениеКомандыУстановитьДатуЗапрета(ДатаЗапрета);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
