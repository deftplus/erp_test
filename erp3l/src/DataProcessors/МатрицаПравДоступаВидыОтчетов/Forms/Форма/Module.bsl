&НаКлиенте
Перем ВыполняетсяЗакрытие;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	Если НЕ Константы.ОграничиватьДоступНаУровнеЗаписей.Получить() Тогда
		
		ТекстСообщения=НСтр("ru = 'Перед началом настроек прав доступа необходимо включить константу
		|""Ограничивать доступ на уровне записей"".'");
		
		ОтображениеСостояния = Элементы.ПолеНастройки.ОтображениеСостояния;
		ОтображениеСостояния.Видимость                      = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
		ОтображениеСостояния.Картинка                       = Новый Картинка;
		ОтображениеСостояния.Текст                          = ТекстСообщения;
		
		ЭтаФорма.Доступность=Ложь;
	
		Возврат;
		
	КонецЕсли;
	
	
	ЦветЧетныйВидОтчета        = Новый Цвет(255, 255, 255);
	ЦветНеЧетныйВидОтчета      = Новый Цвет(255, 255, 255);
	ЦветУзораЧетныйВидОтчета   = Новый Цвет(255, 255, 255);
	ЦветУзораНеЧетныйВидОтчета = Новый Цвет(255, 255, 255);
	ЦветФонаЧетнойСтроки       = Новый Цвет(255, 255, 255);
	
	ПоГруппамВидовОтчетов=?(Константы.ИспользоватьГруппыДоступаКВидамОтчетов.Получить(),1,0);
	ПоГруппамОрганизаций=?(Константы.ИспользоватьГруппыДоступаОрганизацииВидыОтчетов.Получить(),1,0);
	ПоГруппамПользователей=?(Константы.ИспользоватьГруппыДоступаПользователиВидыОтчетов.Получить(),1,0);
		
	ЗаполнитьОбъектыПрав();
	ЗаполнитьТекущиеНастройки();
	
	ПоГоризонталиОрганизации=Истина;
			
	ОбработатьСпособПросмотраВидыОтчетов();
	ОбработатьСпособПросмотраОрганизации();
	ОбработатьСпособПросмотраПользователи();
	
	Элементы.ФормаПрименитьНастройки.Видимость=Ложь;
	Элементы.ПеречитатьДанные.Видимость=Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекущиеНастройки()
	
	СправочникПользователи=?(ПоГруппамПользователей=1,"ГруппыДоступаПользователиВидыОтчетов","Пользователи");
	СправочникОрганизации=?(ПоГруппамОрганизаций=1,"ГруппыДоступаОрганизацииВидыОтчетов","Организации");
	СправочникВидыОтчетов=?(ПоГруппамВидовОтчетов=1,"ГруппыДоступаКВидамОтчетов","ВидыОтчетов");

	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	НастройкиПравДоступаПользователейВидыОтчетов.Организация КАК Организация,
	|	НастройкиПравДоступаПользователейВидыОтчетов.ВидОтчета КАК ВидОтчета,
	|	НастройкиПравДоступаПользователейВидыОтчетов.Пользователь КАК Пользователь,
	|	НастройкиПравДоступаПользователейВидыОтчетов.ВидДоступа КАК ВидДоступа
	|ИЗ
	|	РегистрСведений.НастройкиПравДоступаПользователейВидыОтчетов КАК НастройкиПравДоступаПользователейВидыОтчетов
	|Где НастройкиПравДоступаПользователейВидыОтчетов.Организация Ссылка Справочник."+СправочникОрганизации+"
	|И НастройкиПравДоступаПользователейВидыОтчетов.ВидОтчета Ссылка Справочник."+СправочникВидыОтчетов+"
	|И НастройкиПравДоступаПользователейВидыОтчетов.Пользователь Ссылка Справочник."+СправочникПользователи;
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(),"ТаблицаНастроекПравВидыОтчетов");
	
	Запрос.Текст="ВЫБРАТЬ
	|	НастройкиПравДоступаПользователейБланкиДанные.Организация КАК Организация,
	|	НастройкиПравДоступаПользователейБланкиДанные.ВидОтчета КАК ВидОтчета,
	|	НастройкиПравДоступаПользователейБланкиДанные.БланкОтчета КАК БланкОтчета,
	|	НастройкиПравДоступаПользователейБланкиДанные.Пользователь КАК Пользователь,
	|	НастройкиПравДоступаПользователейБланкиДанные.ВидДоступа КАК ВидДоступа
	|ИЗ
	|	РегистрСведений.НастройкиПравДоступаПользователейБланкиДанные КАК НастройкиПравДоступаПользователейБланкиДанные
	|Где НастройкиПравДоступаПользователейБланкиДанные.Организация Ссылка Справочник."+СправочникОрганизации+"
	|И НастройкиПравДоступаПользователейБланкиДанные.ВидОтчета Ссылка Справочник."+СправочникВидыОтчетов+"
	|И НастройкиПравДоступаПользователейБланкиДанные.Пользователь Ссылка Справочник."+СправочникПользователи;
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(),"ТаблицаНастроекПравБланкиОтчетов");
	
КонецПроцедуры // ЗаполнитьТекущиеНастройки() 

&НаСервере
Процедура ЗаполнитьОбъектыПрав()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	БланкиОтчетов.Владелец КАК ВидОтчета,
	|	БланкиОтчетов.Ссылка КАК БланкОтчета
	|ИЗ
	|	Справочник.БланкиОтчетов КАК БланкиОтчетов
	|ГДЕ
	|	НЕ БланкиОтчетов.Владелец.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	БланкиОтчетов.Владелец.Наименование,
	|	БланкиОтчетов.Наименование
	|ИТОГИ ПО
	|	ВидОтчета";
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам),"ОбъектыПрава");
	
	Запрос.Текст="ВЫБРАТЬ
	|	ГруппыДоступаКВидамОтчетов.Ссылка КАК ГруппаДоступа
	|ИЗ
	|	Справочник.ГруппыДоступаКВидамОтчетов КАК ГруппыДоступаКВидамОтчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГруппыДоступаКВидамОтчетов.Наименование";
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(),"ОбъектыПраваГруппа");
	
		
КонецПроцедуры // ЗаполнитьОбъектыПрава()


&НаСервере
Функция ОбрабатыватьОбъектБД(СтрокаОбъектПрава)
	
	Если ЗначениеЗаполнено(ОбъектПраваОтбор) И (Не СтрокаОбъектПрава.ОбъектПрава=ОбъектПраваОтбор) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
			
	Возврат Истина;
	
КонецФункции // ОбрабатыватьОбъектБД()

&НаСервере
Процедура ЗаполнитьТаблицуОтбора()
	
	Запрос=Новый Запрос;
	ТекстОтбор="";
	
	ТаблицаСубъектыОтбор.Очистить();
	
	Если ПоГоризонталиОрганизации Тогда
		
		Если ПоГруппамПользователей Тогда
			
			СправочникСубъект="ГруппыДоступаПользователиВидыОтчетов";
			
		Иначе
			
			СправочникСубъект="Пользователи";
			ТекстОтбор=ТекстОтбор+" И (НЕ СправочникСубъект.Наименование=""<Не указан>"")";
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтборПользователи) Тогда
			
			ТекстОтбор=ТекстОтбор+" И СправочникСубъект.Ссылка=&ОтборСубъект";
			Запрос.УстановитьПараметр("ОтборСубъект",ОтборПользователи);
			
		КонецЕсли;
		
	Иначе
		
		Если ПоГруппамОрганизаций Тогда
			
			СправочникСубъект="ГруппыДоступаОрганизацииВидыОтчетов";
			
			Если ЗначениеЗаполнено(ОтборОрганизации) Тогда
				
				ТекстОтбор=" И СправочникСубъект.Ссылка=&ОтборСубъект";
				Запрос.УстановитьПараметр("ОтборСубъект",ОтборОрганизации);
				
			КонецЕсли;
			
		Иначе
			
			СправочникСубъект="Организации";
			
			Если ЗначениеЗаполнено(ОтборОрганизации) Тогда
				
				ТекстОтбор=" И СправочникСубъект.Ссылка В Иерархии(&ОтборСубъект)";
				Запрос.УстановитьПараметр("ОтборСубъект",ОтборОрганизации);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОтбор) Тогда
		
		Запрос.Текст="ВЫБРАТЬ СправочникСубъект.Ссылка КАК Субъект
		|ИЗ Справочник."+СправочникСубъект+" КАК СправочникСубъект
		|ГДЕ (НЕ СправочникСубъект.ПометкаУдаления)"+ТекстОтбор;
		
		ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(),"ТаблицаСубъектыОтбор");
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТаблицуОтбора() 

&НаСервере
Процедура ВывестиСтрокуШапки(ОбластьСубъект)
	
	Запрос=Новый Запрос;
	ТекстОтбор="";
	
	Если ПоГоризонталиОрганизации Тогда
		
		Если ПоГруппамОрганизаций Тогда
			
			СправочникСубъект="ГруппыДоступаОрганизацииВидыОтчетов";
			
			Если ЗначениеЗаполнено(ОтборОрганизации) Тогда
				
				ТекстОтбор=" И СправочникСубъект.Ссылка=&ОтборСубъект";
				Запрос.УстановитьПараметр("ОтборСубъект",ОтборОрганизации);
				
			КонецЕсли;
			
		Иначе
			
			СправочникСубъект="Организации";
			
			Если ЗначениеЗаполнено(ОтборОрганизации) Тогда
				
				ТекстОтбор=" И СправочникСубъект.Ссылка =&ОтборСубъект";
				Запрос.УстановитьПараметр("ОтборСубъект",ОтборОрганизации);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ПоГруппамПользователей Тогда
			
			СправочникСубъект="ГруппыДоступаПользователиВидыОтчетов";
			
		Иначе
			
			СправочникСубъект="Пользователи";
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтборПользователи) Тогда
			
			ТекстОтбор=" И СправочникСубъект.Ссылка=&ОтборСубъект";
			Запрос.УстановитьПараметр("ОтборСубъект",ОтборПользователи);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст="ВЫБРАТЬ СправочникСубъект.Ссылка КАК Субъект
	|ИЗ Справочник."+СправочникСубъект+" КАК СправочникСубъект
	|ГДЕ (НЕ СправочникСубъект.ПометкаУдаления)"+ТекстОтбор;
	
	Результат=Запрос.Выполнить().Выбрать();
	
	ТаблицаСубъектыПрав.Очистить();
	
	Инд=1;
	
	Пока Результат.Следующий() Цикл
		
		ОбластьСубъект.Параметры.Субъект   	= Результат.Субъект;
		ОбластьСубъект.Параметры.Расшифровка 	= Новый Структура("Субъект",Результат.Субъект);
		ТекОбласть = ПолеНастройки.Присоединить(ОбластьСубъект);
		ТекОбласть.ЦветФона  = ?(ОбщегоНазначенияУХ.ЧетноеЧисло(Инд), ЦветЧетныйВидОтчета, ЦветНеЧетныйВидОтчета);
		ТекОбласть.ЦветУзора = ?(ОбщегоНазначенияУХ.ЧетноеЧисло(Инд), ЦветУзораЧетныйВидОтчета, ЦветУзораНеЧетныйВидОтчета);
		
		НоваяСтрока=ТаблицаСубъектыПрав.Добавить();
		НоваяСтрока.Субъект   	= Результат.Субъект;
		НоваяСтрока.Колонка = ТекОбласть.Лево;
		Инд = Инд + 1;
		
	КонецЦикла;
		
КонецПроцедуры // ВывестиСтрокуШапки()
 
&НаСервере
Процедура ВывестиПраваПоГруппам(СтруктураОбластей,ТаблицаЗначенийНастройки)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ГруппыДоступаКВидамОтчетов.Ссылка КАК ГруппаДоступа
	|ИЗ
	|	Справочник.ГруппыДоступаКВидамОтчетов КАК ГруппыДоступаКВидамОтчетов
	|ГДЕ
	|	НЕ ГруппыДоступаКВидамОтчетов.ПометкаУдаления";
	
	Если ЗначениеЗаполнено(ОтборВидыОтчетов) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ГруппыДоступаКВидамОтчетов.Ссылка=&ОтборВидыОтчетов";
		
		Запрос.УстановитьПараметр("ОтборВидыОтчетов",ОтборВидыОтчетов);
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГруппыДоступаКВидамОтчетов.Наименование";
		
	РезультатВидОтчета=Запрос.Выполнить().Выбрать();
	
	Инд=1;
	
	Пока РезультатВидОтчета.Следующий() Цикл
		
		СтруктураОбластей.ОбластьВидОтчета.Параметры.ВидОтчета=РезультатВидОтчета.ГруппаДоступа;
		
		Расшифровка=Новый Структура("ВидОтчета",РезультатВидОтчета.ГруппаДоступа);
		
		СтруктураОбластей.ОбластьВидОтчета.Параметры.Расшифровка=Расшифровка;
		
		ПолеНастройки.Вывести(СтруктураОбластей.ОбластьВидОтчета);
		ЗаполнитьСтрокуПрав(СтруктураОбластей,Расшифровка,ТаблицаЗначенийНастройки);
					
	КонецЦикла;
		
КонецПроцедуры // ВывестиПраваПоГруппам()

&НаСервере
Процедура ВывестиПраваПоВидамОтчетов(СтруктураОбластей,ТаблицаЗначенийНастройки)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ВидыОтчетов.Ссылка КАК ВидОтчета
	|ИЗ
	|	Справочник.ВидыОтчетов КАК ВидыОтчетов
	|ГДЕ
	|	НЕ ВидыОтчетов.ПометкаУдаления";
	
	Если ЗначениеЗаполнено(ОтборВидыОтчетов) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ВидыОтчетов.Ссылка=&ОтборВидыОтчетов";
		
		Запрос.УстановитьПараметр("ОтборВидыОтчетов",ОтборВидыОтчетов);
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыОтчетов.Наименование";
		
	РезультатВидОтчета=Запрос.Выполнить().Выбрать();
	
	Инд=1;
	
	Пока РезультатВидОтчета.Следующий() Цикл
		
		СтруктураОбластей.ОбластьВидОтчета.Параметры.ВидОтчета=РезультатВидОтчета.ВидОтчета;
		
		Расшифровка=Новый Структура("ВидОтчета",РезультатВидОтчета.ВидОтчета);
		
		СтруктураОбластей.ОбластьВидОтчета.Параметры.Расшифровка=Расшифровка;
		
		ПолеНастройки.Вывести(СтруктураОбластей.ОбластьВидОтчета);
		ЗаполнитьСтрокуПрав(СтруктураОбластей,Расшифровка,ТаблицаЗначенийНастройки);
					
	КонецЦикла;
		
КонецПроцедуры // ВывестиПраваПоГруппам()

&НаСервере
Процедура ВывестиПраваПоЭлементамВидыОтчетовБланки(СтруктураОбластей,ТаблицаЗначенийНастройки)
	
	ТаблицаЗначенийНастройкиБланки=РеквизитФормыВЗначение("ТаблицаНастроекПравБланкиОтчетов");
	ТаблицаЗначенийНастройкиБланки.Индексы.Добавить("ВидОтчета,Организация,Пользователь,БланкОтчета");
	
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	БланкиОтчетов.Владелец КАК ВидОтчета,
	|	БланкиОтчетов.Ссылка КАК БланкОтчета
	|ИЗ
	|	Справочник.БланкиОтчетов КАК БланкиОтчетов
	|ГДЕ
	|	НЕ БланкиОтчетов.ПометкаУдаления";
	
	Если ЗначениеЗаполнено(ОтборВидыОтчетов) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И БланкиОтчетов.Владелец В Иерархии(&ОтборВидыОтчетов)";
		
		Запрос.УстановитьПараметр("ОтборВидыОтчетов",ОтборВидыОтчетов);
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|
	|УПОРЯДОЧИТЬ ПО
	|	БланкиОтчетов.Владелец.Наименование
	|ИТОГИ ПО
	|	ВидОтчета";
	
	РезультатВидОтчета=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Инд=1;
	
	Пока РезультатВидОтчета.Следующий() Цикл
		
		СтруктураОбластей.ОбластьВидОтчета.Параметры.ВидОтчета=РезультатВидОтчета.ВидОтчета;
		
		Расшифровка=Новый Структура("ВидОтчета",РезультатВидОтчета.ВидОтчета);
		
		СтруктураОбластей.ОбластьВидОтчета.Параметры.Расшифровка=Расшифровка;
		
		ПолеНастройки.Вывести(СтруктураОбластей.ОбластьВидОтчета);
		ЗаполнитьСтрокуПрав(СтруктураОбластей,Расшифровка,ТаблицаЗначенийНастройки);
		
		ПолеНастройки.НачатьГруппуСтрок("ВидОтчета"+Инд,Истина);
		
		РезультатБланкОтчета=РезультатВидОтчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока РезультатБланкОтчета.Следующий() Цикл
			
			СтруктураОбластей.ОбластьБланкОтчета.Параметры.БланкОтчета=РезультатБланкОтчета.БланкОтчета;
			
			Расшифровка=Новый Структура("ВидОтчета,БланкОтчета",РезультатВидОтчета.ВидОтчета,РезультатБланкОтчета.БланкОтчета);
			
			СтруктураОбластей.ОбластьБланкОтчета.Параметры.Расшифровка=Расшифровка;
			
			ПолеНастройки.Вывести(СтруктураОбластей.ОбластьБланкОтчета);
			ЗаполнитьСтрокуПрав(СтруктураОбластей,Расшифровка,ТаблицаЗначенийНастройкиБланки);
					
		КонецЦикла;
		
		ПолеНастройки.ЗакончитьГруппуСтрок();			
		
	КонецЦикла;
		
КонецПроцедуры // ВывестиПраваПоЭлементам()

&НаСервере
Процедура ВывестиПраваПоГруппамВидыОтчетовБланки(СтруктураОбластей,ТаблицаЗначенийНастройки)
	
	ТаблицаЗначенийНастройкиБланки=РеквизитФормыВЗначение("ТаблицаНастроекПравБланкиОтчетов");
	ТаблицаЗначенийНастройкиБланки.Индексы.Добавить("ВидОтчета,Организация,Пользователь,БланкОтчета");
	
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ГруппыДоступаКВидамОтчетовВидыОтчетов.ВидОтчета КАК ВидОтчета,
	|	ГруппыДоступаКВидамОтчетовВидыОтчетов.Ссылка КАК ГруппаДоступа,
	|	ГруппыДоступаКВидамОтчетовВидыОтчетов.Ссылка.Наименование КАК ГруппаДоступаНаименование
	|ПОМЕСТИТЬ ГруппыВидыОтчетов
	|ИЗ
	|	Справочник.ГруппыДоступаКВидамОтчетов.ВидыОтчетов КАК ГруппыДоступаКВидамОтчетовВидыОтчетов
	|ГДЕ
	|	НЕ ГруппыДоступаКВидамОтчетовВидыОтчетов.Ссылка.ПометкаУдаления";
	
	Если ЗначениеЗаполнено(ОтборВидыОтчетов) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ГруппыДоступаКВидамОтчетовВидыОтчетов.Ссылка =&ОтборВидыОтчетов";
		
		Запрос.УстановитьПараметр("ОтборВидыОтчетов",ОтборВидыОтчетов);
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БланкиОтчетов.Ссылка КАК БланкОтчета,
	|	ГруппыВидыОтчетов.ГруппаДоступа КАК ГруппаДоступа
	|ИЗ
	|	ГруппыВидыОтчетов КАК ГруппыВидыОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БланкиОтчетов КАК БланкиОтчетов
	|		ПО ГруппыВидыОтчетов.ВидОтчета = БланкиОтчетов.Владелец
	|ГДЕ
	|	НЕ БланкиОтчетов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГруппыВидыОтчетов.ГруппаДоступаНаименование
	|ИТОГИ ПО
	|	ГруппаДоступа";
		
	РезультатВидОтчета=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Инд=1;
	
	Пока РезультатВидОтчета.Следующий() Цикл
		
		СтруктураОбластей.ОбластьВидОтчета.Параметры.ВидОтчета=РезультатВидОтчета.ГруппаДоступа;
		
		Расшифровка=Новый Структура("ВидОтчета",РезультатВидОтчета.ГруппаДоступа);
		
		СтруктураОбластей.ОбластьВидОтчета.Параметры.Расшифровка=Расшифровка;
		
		ПолеНастройки.Вывести(СтруктураОбластей.ОбластьВидОтчета);
		ЗаполнитьСтрокуПрав(СтруктураОбластей,Расшифровка,ТаблицаЗначенийНастройки);
		
		ПолеНастройки.НачатьГруппуСтрок("ВидОтчета"+Инд,Истина);
		
		РезультатБланкОтчета=РезультатВидОтчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока РезультатБланкОтчета.Следующий() Цикл
			
			СтруктураОбластей.ОбластьБланкОтчета.Параметры.БланкОтчета=РезультатБланкОтчета.БланкОтчета;
			
			Расшифровка=Новый Структура("ВидОтчета,БланкОтчета",РезультатВидОтчета.ГруппаДоступа,РезультатБланкОтчета.БланкОтчета);
			
			СтруктураОбластей.ОбластьБланкОтчета.Параметры.Расшифровка=Расшифровка;
			
			ПолеНастройки.Вывести(СтруктураОбластей.ОбластьБланкОтчета);
			ЗаполнитьСтрокуПрав(СтруктураОбластей,Расшифровка,ТаблицаЗначенийНастройкиБланки);
					
		КонецЦикла;
		
		ПолеНастройки.ЗакончитьГруппуСтрок();			
		
	КонецЦикла;
		
КонецПроцедуры // ВывестиПраваПоЭлементам()

&НаСервере
Функция ПолучитьНастройкиПрав(Расшифровка,ТаблицаЗначенийНастройки)
	
	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("ВидОтчета",Расшифровка.ВидОтчета);
	
	Если Расшифровка.Свойство("БланкОтчета") Тогда
				
		СтруктураПоиска.Вставить("БланкОтчета",Расшифровка.БланкОтчета);
		
	КонецЕсли;
	
	ЕстьОрганизация=Ложь;
	ЕстьПользователь=Ложь;

	Если Расшифровка.Свойство("Организация") Тогда
				
		СтруктураПоиска.Вставить("Организация",Расшифровка.Организация);
		ЕстьОрганизация=Истина;
		
	ИначеЕсли Расшифровка.Свойство("Пользователь") Тогда
				
		СтруктураПоиска.Вставить("Пользователь",Расшифровка.Пользователь);
		ЕстьПользователь=Истина;
		
	КонецЕсли;
	
	Если ТаблицаСубъектыОтбор.Количество()=1 Тогда
		
		Если ПоГоризонталиОрганизации Тогда
						
			СтруктураПоиска.Вставить("Пользователь",ТаблицаСубъектыОтбор[0].Субъект);
			Расшифровка.Вставить("Пользователь",ТаблицаСубъектыОтбор[0].Субъект);
			ЕстьПользователь=Истина;
			
		Иначе
						
			СтруктураПоиска.Вставить("Организация",ТаблицаСубъектыОтбор[0].Субъект);
			Расшифровка.Вставить("Организация",ТаблицаСубъектыОтбор[0].Субъект);
			ЕстьОрганизация=Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат=ТаблицаЗначенийНастройки.НайтиСтроки(СтруктураПоиска);
	
	Если Результат.Количество()=1 И ЕстьОрганизация И ЕстьПользователь Тогда
		
		Расшифровка.Вставить("ВидДоступа",Результат[0].ВидДоступа);
		
	Иначе
		
		Расшифровка.Вставить("ВидДоступа",?(Результат.Количество()>0,"+",""));
		
	КонецЕсли;
	
	Возврат Расшифровка.ВидДоступа;
			
КонецФункции // ПолучитьНастройкиПрав() 

&НаСервере
Процедура ЗаполнитьСтрокуПрав(СтруктураОбластей,Расшифровка,ТаблицаЗначенийНастройки)
	
	ТаблицаСубъектыПрав.Сортировать("Колонка Возр");
	
	Для Каждого Строка ИЗ ТаблицаСубъектыПрав Цикл
		
		РасшифровкаДетализация=Новый Структура;
		РасшифровкаДетализация.Вставить("ВидОтчета",Расшифровка.ВидОтчета);
		
		Если Расшифровка.Свойство("БланкОтчета") Тогда	
			
			РасшифровкаДетализация.Вставить("БланкОтчета",Расшифровка.БланкОтчета);
			
		КонецЕсли;
		
		Если ПоГоризонталиОрганизации Тогда
			
			РасшифровкаДетализация.Вставить("Организация",Строка.Субъект);
			
		Иначе
			
			РасшифровкаДетализация.Вставить("Пользователь",Строка.Субъект);
			
		КонецЕсли;
		
		Если Расшифровка.Свойство("БланкОтчета") Тогда
			
			ОбластьДетализация=СтруктураОбластей.ОбластьДетализацияБланкОтчета;
			
		Иначе
			
			ОбластьДетализация=СтруктураОбластей.ОбластьДетализацияВидОтчета;
			
		КонецЕсли;
		
		ОбластьДетализация.Параметры.ПраваДоступа=ПолучитьНастройкиПрав(РасшифровкаДетализация,ТаблицаЗначенийНастройки);
		ОбластьДетализация.Параметры.Расшифровка=РасшифровкаДетализация;
		ПолеНастройки.Присоединить(ОбластьДетализация);
		
	КонецЦикла;
				
КонецПроцедуры // ЗаполнитьСтрокуПрав() 

&НаСервере
Процедура ОбновитьПолеНастройки()
		
	ПолеНастройки.Очистить();
	
	Макет = Обработки.МатрицаПравДоступаВидыОтчетов.ПолучитьМакет("Макет");
	
	СтруктураОбластей=Новый Структура;
	
	СтруктураОбластей.Вставить("ОбластьВидОтчета",Макет.ПолучитьОбласть("ВидОтчета"));
	СтруктураОбластей.Вставить("ОбластьБланкОтчета",Макет.ПолучитьОбласть("БланкОтчета"));

	СтруктураОбластей.Вставить("ОбластьДетализацияВидОтчета",Макет.ПолучитьОбласть("ДетализацияВидОтчета"));
	СтруктураОбластей.Вставить("ОбластьДетализацияБланкОтчета",Макет.ПолучитьОбласть("ДетализацияБланкОтчета"));
	ОбластьСубъект = Макет.ПолучитьОбласть("Субъект");

	ПолеНастройки.Вывести(Макет.ПолучитьОбласть("Шапка"));
		
	ВывестиСтрокуШапки(ОбластьСубъект);
	ЗаполнитьТаблицуОтбора();
	
	ТаблицаЗначенийНастройки=РеквизитФормыВЗначение("ТаблицаНастроекПравВидыОтчетов");
	ТаблицаЗначенийНастройки.Индексы.Добавить("ВидОтчета,Организация,Пользователь");
	
	Если ОтображатьБланкиОтчетов Тогда
		
		Если ПоГруппамВидовОтчетов=1 Тогда
			
			ВывестиПраваПоГруппамВидыОтчетовБланки(СтруктураОбластей,ТаблицаЗначенийНастройки);

			
		Иначе
			
			ВывестиПраваПоЭлементамВидыОтчетовБланки(СтруктураОбластей,ТаблицаЗначенийНастройки);
			
		КонецЕсли;
		
	Иначе
		
		Если ПоГруппамВидовОтчетов=1 Тогда
			
			ВывестиПраваПоГруппам(СтруктураОбластей,ТаблицаЗначенийНастройки);
			
		Иначе
			
			ВывестиПраваПоВидамОтчетов(СтруктураОбластей,ТаблицаЗначенийНастройки);
			
		КонецЕсли;
	
	КонецЕсли;
	
	СброситьСостояниеНеИспользовать();
	Элементы.ПеречитатьДанные.Видимость=Истина;
	
КонецПроцедуры

&НаСервере
Функция СформироватьПредставлениеНастроекСервер(ТабНастройкиЗаполнения)
	
	ТекстНастройки="";
	
	МаксНомерСтроки=?(ТабНастройкиЗаполнения.Количество()<=3,ТабНастройкиЗаполнения.Количество()-1,2);
	
	Для Инд=0 по МаксНомерСтроки цикл
		
		ТекстНастройки=ТекстНастройки+","+ТабНастройкиЗаполнения[Инд].ИспользуемаяИБ+": "+?(ЗначениеЗаполнено(ТабНастройкиЗаполнения[Инд].ИсходныйОбъектБД),ТабНастройкиЗаполнения[Инд].ИсходныйОбъектБД,ТабНастройкиЗаполнения[Инд].ПравилоЗаполнения);
		
	КонецЦикла;
	
	ТекстНастройки=Сред(ТекстНастройки,2);
	
	Если ТабНастройкиЗаполнения.Количество()>3 Тогда
		
		ТекстНастройки=ТекстНастройки+"...("+(ТабНастройкиЗаполнения.Количество()-3)+")";
		
	КонецЕсли;
	
	Возврат ТекстНастройки;
		
КонецФункции // СформироватьПредставлениеНастроек()
 
&НаКлиенте
Процедура ПолеНастройкиОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка)=Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Расшифровка.Свойство("Организация") И Расшифровка.Свойство("Пользователь") Тогда
			
			ТекВидДоступа=?(ТипЗнч(Расшифровка.ВидДоступа)=Тип("ПеречислениеСсылка.ВидыДоступа"),Расшифровка.ВидДоступа,ПредопределенноеЗначение("Перечисление.ВидыДоступа.Чтение"));
			
			ОписаниеОповещения=Новый ОписаниеОповещения("ПослеВводаВидаДоступа",ЭтотОбъект,Расшифровка);
			ПоказатьВводЗначения(ОписаниеОповещения,ТекВидДоступа,НСтр("ru = 'Выберите вид доступа'"));
			
		Иначе
			
			СтруктураПоиска=Новый Структура;
			
			Для Каждого КлючИЗначение ИЗ Расшифровка Цикл
				
				Если КлючИЗначение.Ключ="ВидДоступа" Тогда
					
					Продолжить;
					
				ИначеЕсли КлючИЗначение.Ключ="Субъект" Тогда
					
					Если ПоГоризонталиОрганизации Тогда
						
						СтруктураПоиска.Вставить("Организация",КлючИЗначение.Значение);
						
					Иначе
						
						СтруктураПоиска.Вставить("Пользователь",КлючИЗначение.Значение);
						
					КонецЕсли;		
					
				Иначе
					
					СтруктураПоиска.Вставить(КлючИЗначение.Ключ,КлючИЗначение.Значение);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ОтборОрганизации) Тогда
				
				СтруктураПоиска.Вставить("Организация",ОтборОрганизации);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОтборВидыОтчетов) Тогда
				
				СтруктураПоиска.Вставить("ВидОтчета",ОтборВидыОтчетов);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОтборПользователи) Тогда
				
				СтруктураПоиска.Вставить("Пользователь",ОтборПользователи);
				
			КонецЕсли;

			СтруктураПараметров=ПолучитьСтруктуруПараметровНастройки();
			ОткрытьФорму("Обработка.МатрицаПравДоступаВидыОтчетов.Форма.ФормаГрупповаяНастройка",СтруктураПараметров,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;	
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруПараметровНастройки()
		
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ОтборВидыОтчетов",ОтборВидыОтчетов);
	СтруктураПараметров.Вставить("ОтборОрганизации",ОтборОрганизации);
	СтруктураПараметров.Вставить("ОтборПользователи",ОтборПользователи);
	СтруктураПараметров.Вставить("ПоГруппамВидовОтчетов",ПоГруппамВидовОтчетов);
	СтруктураПараметров.Вставить("ПоГруппамОрганизаций",ПоГруппамОрганизаций);
	СтруктураПараметров.Вставить("ПоГруппамПользователей",ПоГруппамПользователей);
	СтруктураПараметров.Вставить("ОтображатьБланкиОтчетов",ОтображатьБланкиОтчетов);
	
	Для Каждого КлючИЗначение ИЗ СтруктураПоиска Цикл
		
		СтруктураПараметров.Вставить(КлючИЗначение.Ключ,КлючИЗначение.Значение);
		
	КонецЦикла;
	
	Если СтруктураПоиска.Свойство("БланкОтчета") Тогда
		
		ТаблицаНастроекПрав=РеквизитФормыВЗначение("ТаблицаНастроекПравБланкиОтчетов");
		
	Иначе
		
		ТаблицаНастроекПрав=РеквизитФормыВЗначение("ТаблицаНастроекПравВидыОтчетов");
		
	КонецЕсли;
	
	ТекТаблицаПрав=ТаблицаНастроекПрав.Скопировать(СтруктураПоиска);
			
	СтруктураПараметров.Вставить("АдресТекущихНастроек",ПоместитьВоВременноеХранилище(ТекТаблицаПрав));
	
	Возврат СтруктураПараметров;
		
КонецФункции // ПолучитьСтруктуруПараметровНастройки()

&НаКлиенте
Процедура ПослеВводаВидаДоступа(Значение,ДополнительныеПараметры) Экспорт
	
	Если Значение=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ВидДоступа") Тогда
		
		ДополнительныеПараметры.Удалить("ВидДоступа");
		
	КонецЕсли;
	
	ИзменитьНастройкуДоступа(ДополнительныеПараметры,Значение);	
	
	ОбновитьПолеНастройки();
	
КонецПроцедуры // ПослеВводаВидаДоступа()

&НаСервере
Процедура ИзменитьНастройкуДоступаБланкОтчета(СтруктураПараметров,ВидДоступа)
	
	МассивНастроек=ТаблицаНастроекПравБланкиОтчетов.НайтиСтроки(СтруктураПараметров);
	
	Если МассивНастроек.Количество()=1 Тогда
		
		СтрокаНастроек=МассивНастроек[0];
		
	Иначе
		
		СтрокаНастроек=ТаблицаНастроекПравБланкиОтчетов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНастроек,СтруктураПараметров);
		
	КонецЕсли;
	
	СтрокаНастроек.ВидДоступа=ВидДоступа;
	
	ПроверитьУстановитьВышестоящийВидДоступа(СтрокаНастроек);
	
	ОбновитьИнформациюОбИзмененииБланкиОтчетов(СтрокаНастроек.ВидОтчета,СтрокаНастроек.БланкОтчета);
	
КонецПроцедуры // ИзменитьНастройкуДоступаБланкОтчета()

&НаСервере
Процедура ИзменитьНастройкуДоступаВидОтчета(СтруктураПараметров,ВидДоступа)
	
	МассивНастроек=ТаблицаНастроекПравВидыОтчетов.НайтиСтроки(СтруктураПараметров);
	Если МассивНастроек.Количество()=1 Тогда
		
		СтрокаНастроек=МассивНастроек[0];
		
	Иначе
		
		СтрокаНастроек=ТаблицаНастроекПравВидыОтчетов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНастроек,СтруктураПараметров);
		
	КонецЕсли;
	
	СтрокаНастроек.ВидДоступа=ВидДоступа;
	
	ОбновитьИнформациюОбИзмененииВидыОтчетов(СтрокаНастроек.ВидОтчета);
		
	МассивБланков=ПолучитьМассивБланков(СтрокаНастроек.ВидОтчета);
			
	Для Каждого БланкОтчета ИЗ МассивБланков Цикл
		
		СтруктураПараметров.Вставить("БланкОтчета",БланкОтчета);
		
		МассивНастроекБланки=ТаблицаНастроекПравБланкиОтчетов.НайтиСтроки(СтруктураПараметров);
		
		Если МассивНастроекБланки.Количество()=0 Тогда
			
			НоваяСтрокаБланк= ТаблицаНастроекПравБланкиОтчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаБланк,СтрокаНастроек);
			НоваяСтрокаБланк.БланкОтчета=БланкОтчета;
			
			//ОбновитьИнформациюОбИзмененииБланкиОтчетов(НоваяСтрокаБланк.ВидОтчета,НоваяСтрокаБланк.БланкОтчета);
			
			Продолжить
			
		КонецЕсли;
		
		Для Каждого СтрокаБланк ИЗ МассивНастроекБланки Цикл
			
			Если ВидДоступаБольше(СтрокаБланк.ВидДоступа,СтрокаНастроек.ВидДоступа) Тогда
				
				СтрокаБланк.ВидДоступа=СтрокаНастроек.ВидДоступа;
				ОбновитьИнформациюОбИзмененииБланкиОтчетов(СтрокаБланк.ВидОтчета,СтрокаБланк.БланкОтчета);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ИзменитьНастройкуДоступаБланкОтчета()

&НаКлиенте
Процедура ИзменитьНастройкуДоступа(СтруктураПараметров,ВидДоступа)
	
	Если СтруктураПараметров.Свойство("БланкОтчета") Тогда
		
		ИзменитьНастройкуДоступаБланкОтчета(СтруктураПараметров,ВидДоступа);
		
	Иначе
		
		ИзменитьНастройкуДоступаВидОтчета(СтруктураПараметров,ВидДоступа);
		
	КонецЕсли;
	
	Модифицированность=Истина;
	Элементы.ФормаПрименитьНастройки.Видимость=Истина;
	
КонецПроцедуры // ИзменитьНастройкуДоступа()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
		
КонецПроцедуры

&НаСервере
Процедура Применить()
	
	ЗаписатьДанныеВРегистр();	
	ОбновитьДанныеИзРегистра();			
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеВРегистр()
	
	Для Каждого Строка ИЗ ТабИзмененныеВидыОтчетов Цикл
		
		НаборЗаписей=РегистрыСведений.НастройкиПравДоступаПользователейВидыОтчетов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидОтчета.Установить(Строка.ВидОтчета);
		
		МассивНастроек=ТаблицаНастроекПравВидыОтчетов.НайтиСтроки(Новый Структура("ВидОтчета",Строка.ВидОтчета));
		
		Для Каждого Строка ИЗ МассивНастроек Цикл
						
			НоваяСтрока=НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
									
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);	

	КонецЦикла;
		
	Для Каждого Строка ИЗ ТабИзмененныеБланкиОтчетов Цикл
		
		НаборЗаписей=РегистрыСведений.НастройкиПравДоступаПользователейБланкиДанные.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидОтчета.Установить(Строка.ВидОтчета);
		НаборЗаписей.Отбор.БланкОтчета.Установить(Строка.БланкОтчета);
		
		МассивНастроек=ТаблицаНастроекПравБланкиОтчетов.НайтиСтроки(Новый Структура("ВидОтчета,БланкОтчета",Строка.ВидОтчета,Строка.БланкОтчета));
		
		Для Каждого Строка ИЗ МассивНастроек Цикл
						
			НоваяСтрока=НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
									
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);

	КонецЦикла;
	
	
	
КонецПроцедуры // ЗаписатьДанныеВРегистр()

&НаСервере
Процедура ОбновитьДанныеИзРегистра()
	
	ТабИзмененныеВидыОтчетов.Очистить();
	ТабИзмененныеБланкиОтчетов.Очистить();
	
	ЗаполнитьТекущиеНастройки();
	ОбновитьПолеНастройки();
	Модифицированность = Ложь;
	Элементы.ФормаПрименитьНастройки.Видимость=Ложь;
		
КонецПроцедуры // ОбновитьДанныеИзРегистра() 



&НаКлиенте
Процедура ПрименитьНастройки(Команда)
	
	Применить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицу(Команда)
	
	ОбновитьПолеНастройки();
	
КонецПроцедуры
	
&НаКлиенте
Функция СформироватьПредставлениеНастроекКлиент(ТабНастройкиЗаполнения)
	
	ТекстНастройки="";
	
	МаксНомерСтроки=?(ТабНастройкиЗаполнения.Количество()<=3,ТабНастройкиЗаполнения.Количество()-1,2);
	
	Для Инд=0 по МаксНомерСтроки цикл
		
		ТекстНастройки=ТекстНастройки+","+?(ЗначениеЗаполнено(ТабНастройкиЗаполнения[Инд].ИсходныйОбъектБД),ТабНастройкиЗаполнения[Инд].ИсходныйОбъектБД,ТабНастройкиЗаполнения[Инд].ПравилоЗаполнения)+"("+ТабНастройкиЗаполнения[Инд].ИспользуемаяИБ+")";
		
	КонецЦикла;
	
	ТекстНастройки=Сред(ТекстНастройки,2);
	
	Если ТабНастройкиЗаполнения.Количество()>3 Тогда
		
		ТекстНастройки=ТекстНастройки+"...("+(ТабНастройкиЗаполнения.Количество()-3)+")";
		
	КонецЕсли;
	
	Возврат ТекстНастройки;
		
КонецФункции // СформироватьПредставлениеНастроек()	
	

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия="ГрупповоеИзменениеНастроекПравДоступаВО" Тогда
		
		ОбработатьИзменениеНастроек(Параметр);
		
	ИначеЕсли ИмяСобытия="ИзмененаЗаписьПравПользователейВидыОтчетов" Тогда
		
		УстановитьСостояниеНеИспользовать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОбИзмененииВидыОтчетов(ВидОтчета)
	
	МассивИзмененных=ТабИзмененныеВидыОтчетов.НайтиСтроки(Новый Структура("ВидОтчета",ВидОтчета));
	
	Если МассивИзмененных.Количество()=0  Тогда
		
		НоваяСтрока=ТабИзмененныеВидыОтчетов.Добавить();
		НоваяСтрока.ВидОтчета=ВидОтчета;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьИнформациюОбИзмененииВидыОтчетов()

&НаСервере
Процедура ОбновитьИнформациюОбИзмененииБланкиОтчетов(ВидОтчета,БланкОтчета)
	
	МассивИзмененных=ТабИзмененныеБланкиОтчетов.НайтиСтроки(Новый Структура("ВидОтчета,БланкОтчета",ВидОтчета,БланкОтчета));
	
	Если МассивИзмененных.Количество()=0  Тогда
		
		НоваяСтрока=ТабИзмененныеБланкиОтчетов.Добавить();
		НоваяСтрока.ВидОтчета=ВидОтчета;
		НоваяСтрока.БланкОтчета=БланкОтчета;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьИнформациюОбИзмененииВидыОтчетов()

&НаСервере
Процедура ОбновитьТекущиеНастройкиВидыОтчетов(ТекТаблицаНастроек)
		
	ТаблицаНастроекВидыОтчетов	= РеквизитФормыВЗначение("ТаблицаНастроекПравВидыОтчетов");		
	МассивНастроекВидыОтчетов	= ТаблицаНастроекВидыОтчетов.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого Строка ИЗ МассивНастроекВидыОтчетов Цикл
		
		Если ТекТаблицаНастроек.Количество()=0 Тогда
			
			ОбновитьИнформациюОбИзмененииВидыОтчетов(Строка.ВидОтчета);
			
		КонецЕсли;	
			
		ТаблицаНастроекВидыОтчетов.Удалить(Строка);
		
	КонецЦикла;
	
	ТаблицаНастроекБланкиОтчетов= РеквизитФормыВЗначение("ТаблицаНастроекПравБланкиОтчетов");	
	ТекТаблицаНастроекБланкиОтчетов=ТаблицаНастроекБланкиОтчетов.Скопировать(СтруктураПоиска);
	ТекТаблицаНастроекБланкиОтчетов.Колонки.Добавить("Применить",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	МассивНастроекБланкиОтчетов	= ТаблицаНастроекБланкиОтчетов.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого Строка ИЗ МассивНастроекБланкиОтчетов Цикл
		
		Если ТекТаблицаНастроек.Количество()=0 Тогда
			
			ОбновитьИнформациюОбИзмененииБланкиОтчетов(Строка.ВидОтчета,Строка.БланкОтчета);
			
		КонецЕсли;
		
		ТаблицаНастроекБланкиОтчетов.Удалить(Строка);
		
	КонецЦикла;
	
	Для Каждого Строка ИЗ ТекТаблицаНастроек Цикл
		
		НоваяСтрока=ТаблицаНастроекВидыОтчетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураПоиска);
		
		ОбновитьИнформациюОбИзмененииВидыОтчетов(НоваяСтрока.ВидОтчета);  	
		ОбновитьНастройкиБланков(НоваяСтрока,ТекТаблицаНастроекБланкиОтчетов);
				
	КонецЦикла;
	
	Для Каждого Строка ИЗ ТекТаблицаНастроекБланкиОтчетов Цикл
		
		Если Строка.Применить Тогда
			
			НоваяСтрока=ТаблицаНастроекБланкиОтчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаНастроекВидыОтчетов,	"ТаблицаНастроекПравВидыОтчетов");
	ЗначениеВРеквизитФормы(ТаблицаНастроекБланкиОтчетов,"ТаблицаНастроекПравБланкиОтчетов");
		
КонецПроцедуры // ОбновитьТекущиеНастройкиВидыОтчетов()

&НаСервере
Процедура ОбновитьТекущиеНастройкиБланкиОтчетов(ТекТаблицаНастроек)
	
	ТаблицаНастроек=РеквизитФормыВЗначение("ТаблицаНастроекПравБланкиОтчетов");
	
	МассивИзмененных=ТабИзмененныеБланкиОтчетов.НайтиСтроки(Новый Структура("ВидОтчета,БланкОтчета",СтруктураПоиска.ВидОтчета,СтруктураПоиска.БланкОтчета));
	
	Если МассивИзмененных.Количество()=0  Тогда
		
		НоваяСтрока=ТабИзмененныеБланкиОтчетов.Добавить();
		НоваяСтрока.ВидОтчета=СтруктураПоиска.ВидОтчета;
		НоваяСтрока.БланкОтчета=СтруктураПоиска.БланкОтчета;
		
	КонецЕсли;
		
	МассивНастроек=ТаблицаНастроек.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого Строка ИЗ МассивНастроек Цикл
		
		ТаблицаНастроек.Удалить(Строка);
		
	КонецЦикла;
		
	Для Каждого Строка ИЗ ТекТаблицаНастроек Цикл
		
		НоваяСтрока=ТаблицаНастроек.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураПоиска);
				
		ПроверитьУстановитьВышестоящийВидДоступа(НоваяСтрока);
			
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаНастроек,"ТаблицаНастроекПравБланкиОтчетов");
	
		
КонецПроцедуры // ОбновитьТекущиеНастройкиВидыОтчетов()

&НаСервере
Процедура ПроверитьУстановитьВышестоящийВидДоступа(НоваяСтрокаБланк)
	
	СтруктураПоискаВидыОтчетов=Новый Структура("Организация,Пользователь,ВидОтчета");
	ЗаполнитьЗначенияСвойств(СтруктураПоискаВидыОтчетов,НоваяСтрокаБланк);
	
	МассивВидыОтчетов=ТаблицаНастроекПравВидыОтчетов.НайтиСтроки(СтруктураПоискаВидыОтчетов);
	
	Если МассивВидыОтчетов.Количество()=0 Тогда
		
		НоваяСтрокаВидОтчета=ТаблицаНастроекПравВидыОтчетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаВидОтчета,НоваяСтрокаБланк);
		ОбновитьИнформациюОбИзмененииВидыОтчетов(НоваяСтрокаВидОтчета.ВидОтчета);
		
	ИначеЕсли ВидДоступаБольше(НоваяСтрокаБланк.ВидДоступа,МассивВидыОтчетов[0].ВидДоступа) Тогда
		
		НоваяСтрокаБланк.ВидДоступа=МассивВидыОтчетов[0].ВидДоступа;
		
	КонецЕсли;
				
КонецПроцедуры // ПроверитьПодчиненныеВидыДоступа()


&НаСервере
Функция ВидДоступаБольше(ЛевоеЗначение,ПравоеЗначение)
	
	СоответствиеВидДоступа=Новый Соответствие;
	СоответствиеВидДоступа.Вставить(Перечисления.ВидыДоступа.ДоступЗакрыт,0);
	СоответствиеВидДоступа.Вставить(Перечисления.ВидыДоступа.Чтение,1);
	СоответствиеВидДоступа.Вставить(Перечисления.ВидыДоступа.ЧтениеЗапись,2);
	СоответствиеВидДоступа.Вставить(Перечисления.ВидыДоступа.ЧтениеЗаписьУтверждение,3);

	Возврат СоответствиеВидДоступа[ЛевоеЗначение]>СоответствиеВидДоступа[ПравоеЗначение];
	
КонецФункции // ВидДоступаБольше()

&НаСервере
Функция ПолучитьМассивБланков(ВидОтчета)
		
	СтрВидОтчета=ВидыБланкиОтчетов.НайтиСтроки(Новый Структура("ВидОтчета",ВидОтчета));
	
	Если СтрВидОтчета.Количество()=0 Тогда
		
		Запрос=Новый Запрос;
		
		Если ТипЗнч(ВидОтчета)=Тип("СправочникСсылка.ВидыОтчетов") Тогда
			
			Запрос.Текст="ВЫБРАТЬ
			|	БланкиОтчетов.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.БланкиОтчетов КАК БланкиОтчетов
			|ГДЕ
			|	БланкиОтчетов.Владелец = &Владелец";
				
		Иначе
			
			Запрос.Текст="ВЫБРАТЬ
			|	ГруппыДоступаКВидамОтчетовВидыОтчетов.ВидОтчета КАК ВидОтчета
			|ПОМЕСТИТЬ ТабВидыОтчетов
			|ИЗ
			|	Справочник.ГруппыДоступаКВидамОтчетов.ВидыОтчетов КАК ГруппыДоступаКВидамОтчетовВидыОтчетов
			|ГДЕ
			|	ГруппыДоступаКВидамОтчетовВидыОтчетов.Ссылка = &Владелец
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	БланкиОтчетов.Ссылка КАК Ссылка
			|ИЗ
			|	ТабВидыОтчетов КАК ТабВидыОтчетов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БланкиОтчетов КАК БланкиОтчетов
			|		ПО ТабВидыОтчетов.ВидОтчета = БланкиОтчетов.Владелец";
			
		КонецЕсли;
				
		Запрос.УстановитьПараметр("Владелец",ВидОтчета);
		ТекМассивБланков=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		НоваяСтрока=ВидыБланкиОтчетов.Добавить();
		НоваяСтрока.ВидОтчета=ВидОтчета;
		НоваяСтрока.БланкиОтчетов=Новый ФиксированныйМассив(ТекМассивБланков);
		
		Возврат ТекМассивБланков;
		
	Иначе
		
		Возврат СтрВидОтчета[0].БланкиОтчетов;
		
	КонецЕсли;
					
КонецФункции // ПолучитьМассивБланков()

&НаСервере
Процедура ОбновитьНастройкиБланков(НоваяСтрока,ТекТаблицаНастроекБланкиОтчетов)
	
	МассивБланков=ПолучитьМассивБланков(НоваяСтрока.ВидОтчета);
	
	СтруктураПоискаБланки=Новый Структура("Организация,Пользователь,ВидОтчета");
	ЗаполнитьЗначенияСвойств(СтруктураПоискаБланки,НоваяСтрока);
	
	Для Каждого БланкОтчета ИЗ МассивБланков Цикл
		
		СтруктураПоискаБланки.Вставить("БланкОтчета",БланкОтчета);
		
		МассивНастроекБланки=ТекТаблицаНастроекБланкиОтчетов.НайтиСтроки(СтруктураПоискаБланки);
		
		Если МассивНастроекБланки.Количество()=0 Тогда
			
			НоваяСтрокаБланк= ТекТаблицаНастроекБланкиОтчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаБланк,НоваяСтрока);
			НоваяСтрокаБланк.БланкОтчета=БланкОтчета;
			НоваяСтрокаБланк.Применить=Истина;
			
	//		ОбновитьИнформациюОбИзмененииБланкиОтчетов(НоваяСтрокаБланк.ВидОтчета,НоваяСтрокаБланк.БланкОтчета);
			
			Продолжить
			
		КонецЕсли;
		
		Для Каждого СтрокаБланк ИЗ МассивНастроекБланки Цикл
			
			Если ВидДоступаБольше(СтрокаБланк.ВидДоступа,НоваяСтрока.ВидДоступа) Тогда
				
				СтрокаБланк.ВидДоступа=НоваяСтрока.ВидДоступа;
				ОбновитьИнформациюОбИзмененииБланкиОтчетов(СтрокаБланк.ВидОтчета,СтрокаБланк.БланкОтчета);
				
			КонецЕсли;
			
			СтрокаБланк.Применить=Истина;
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры // ПроверитьПодчиненныеВидыДоступа()

&НаСервере
Процедура ОбработатьИзменениеНастроек(АдресТаблицыНастроек)
	
	ТекТаблицаНастроек=ПолучитьИзВременногоХранилища(АдресТаблицыНастроек);
	
	Если СтруктураПоиска.Свойство("БланкОтчета") Тогда
		
		ОбновитьТекущиеНастройкиБланкиОтчетов(ТекТаблицаНастроек);
		
	Иначе
		
		ОбновитьТекущиеНастройкиВидыОтчетов(ТекТаблицаНастроек);
		
	КонецЕсли;
	
	Модифицированность=Истина;
	Элементы.ФормаПрименитьНастройки.Видимость=Истина;
	
	ОбновитьПолеНастройки();
	
КонецПроцедуры // ОбработатьИзменениеНастроек() 


&НаКлиенте
Процедура ПередЗапись_Завершение(Результат, ДополнительныеПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        ВыполняетсяЗакрытие = Истина;
        ЭтаФорма.Закрыть();
    ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
    	ЗаписатьДанныеВРегистр();
        ВыполняетсяЗакрытие = Истина;
        ЭтаФорма.Закрыть();
    ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда    
    	// Пользователь отказался закрывать форму.
    Иначе       
    	ТекстСообщения = НСтр("ru = 'Выбран неизвестный вариант: %Результат%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Результат%", Строка(Результат));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если (Модифицированность) И НЕ (ЗавершениеРаботы) Тогда
		Если Не ВыполняетсяЗакрытие Тогда
			Отказ = Истина;
			СтруктураПараметров = Новый Структура;
			ТекстВопроса = НСтр("ru = 'Настройки были изменены. Записать настройки перед закрытием?'");
			Режим = РежимДиалогаВопрос.ДаНетОтмена;
			Оповещение = Новый ОписаниеОповещения("ПередЗапись_Завершение", ЭтаФорма, СтруктураПараметров);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		Иначе
			// Закрытие разрешено.
		КонецЕсли;
	Иначе
		// Данные записаны. Можно закрывать форму
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоГруппамВидовОтчетовПриИзменении(Элемент)
	
	ОтборВидыОтчетов=Неопределено;
	ОбработатьСпособПросмотраВидыОтчетов();
			
КонецПроцедуры

&НаСервере
Процедура УстановитьОграничениеТипаОтбор()
	
	
	
				
КонецПроцедуры // УстановитьОграничениеТипаОтбор()

&НаСервере
Процедура ОбработатьСпособПросмотраВидыОтчетов()
	
	Если ПоГруппамВидовОтчетов=0 Тогда
		
		Элементы.ОтборВидыОтчетов.ОграничениеТипа=Новый ОписаниеТипов("СправочникСсылка.ВидыОтчетов");
		Элементы.ОтборВидыОтчетов.Заголовок=Нстр("ru = 'Вид отчета'");
		
	Иначе
		
		Элементы.ОтборВидыОтчетов.ОграничениеТипа=Новый ОписаниеТипов("СправочникСсылка.ГруппыДоступаКВидамОтчетов");
		Элементы.ОтборВидыОтчетов.Заголовок=Нстр("ru = 'Группа доступа к видам отчетов'");
		
	КонецЕсли;
	
	Элементы.СписокРегистрВидОтчета.Заголовок=Элементы.ОтборВидыОтчетов.Заголовок;
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных("ПоГруппамВидовОтчетов");
	ТекЭлемент = ТиповыеОтчеты_УправляемыйРежимУХ.ВернутьЭлементОтбора(СписокРегистр.Отбор, ПолеКомпоновки);
	
	Если ТекЭлемент = Неопределено Тогда
		
		ТекЭлемент = СписокРегистр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ТекЭлемент.ЛевоеЗначение = ПолеКомпоновки;
		
	КонецЕсли;
			
	ТекЭлемент.Использование = Истина;
	ТекЭлемент.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ТекЭлемент.ПравоеЗначение = ?(ПоГруппамВидовОтчетов=1,0,1);
	
	ПриИзмененииОтборВидыОтчетов();
	
КонецПроцедуры // ОбработатьСпособПросмотраВидыОтчетов() 

&НаСервере
Процедура ОбработатьСпособПросмотраОрганизации()
	
	Если ПоГруппамОрганизаций=0 Тогда
		
		Элементы.ОтборОрганизации.ОграничениеТипа=Новый ОписаниеТипов("СправочникСсылка.Организации");
		Элементы.ОтборОрганизации.Заголовок=Нстр("ru = 'Организация'");
			
	Иначе
		
		Элементы.ОтборОрганизации.ОграничениеТипа=Новый ОписаниеТипов("СправочникСсылка.ГруппыДоступаОрганизацииВидыОтчетов");
		Элементы.ОтборОрганизации.Заголовок=Нстр("ru = 'Группа доступа к организациям'");
		
	КонецЕсли;
	
	Элементы.СписокРегистрОрганизация.Заголовок=Элементы.ОтборОрганизации.Заголовок;
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных("ПоГруппамОрганизаций");
	ТекЭлемент = ТиповыеОтчеты_УправляемыйРежимУХ.ВернутьЭлементОтбора(СписокРегистр.Отбор, ПолеКомпоновки);
	
	Если ТекЭлемент = Неопределено Тогда
		
		ТекЭлемент = СписокРегистр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ТекЭлемент.ЛевоеЗначение = ПолеКомпоновки;
		
	КонецЕсли;
			
	ТекЭлемент.Использование = Истина;
	ТекЭлемент.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ТекЭлемент.ПравоеЗначение = ?(ПоГруппамОрганизаций=1,0,1);
	
	ОтборОрганизацииПриИзмененииНаСервере();
	
КонецПроцедуры // ОбработатьСпособПросмотраОрганизации()

&НаСервере
Процедура ОбработатьСпособПросмотраПользователи()
	
	Если ПоГруппамПользователей=0 Тогда
		
		Элементы.ОтборПользователи.ОграничениеТипа=Новый ОписаниеТипов("СправочникСсылка.Пользователи");
		Элементы.ОтборПользователи.Заголовок=Нстр("ru = 'Пользователь'");
	
	Иначе
		
		Элементы.ОтборПользователи.ОграничениеТипа=Новый ОписаниеТипов("СправочникСсылка.ГруппыДоступаПользователиВидыОтчетов");
		Элементы.ОтборПользователи.Заголовок=Нстр("ru = 'Группа пользователей'");
		
	КонецЕсли;
	
	Элементы.СписокРегистрПользователь.Заголовок=Элементы.ОтборПользователи.Заголовок;
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных("ПоГруппамПользователей");
	ТекЭлемент = ТиповыеОтчеты_УправляемыйРежимУХ.ВернутьЭлементОтбора(СписокРегистр.Отбор, ПолеКомпоновки);
	
	Если ТекЭлемент = Неопределено Тогда
		
		ТекЭлемент = СписокРегистр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ТекЭлемент.ЛевоеЗначение = ПолеКомпоновки;
		
	КонецЕсли;
			
	ТекЭлемент.Использование = Истина;
	ТекЭлемент.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ТекЭлемент.ПравоеЗначение = ?(ПоГруппамПользователей=1,0,1);
	
	ОтборПользователиПриИзмененииНаСервере();
	
КонецПроцедуры // ОбработатьСпособПросмотраОрганизации()

&НаКлиенте
Процедура ПоГруппамОрганизацийПриИзменении(Элемент)
	
	ОтборОрганизации=Неопределено;
	ОбработатьСпособПросмотраОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоГруппамПользователейПриИзменении(Элемент)
	
	ОтборПользователи=Неопределено;
	ОбработатьСпособПросмотраПользователи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоГоризонталиОрганизацииПриИзменении(Элемент)
	
	ПоГоризонталиПользователи=Не ПоГоризонталиОрганизации;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоГоризонталиПользователиПриИзменении(Элемент)
	
	ПоГоризонталиОрганизации=НЕ ПоГоризонталиПользователи;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводВКолонкахЧислоПриИзменении(Элемент)
	
	ПоГоризонталиОрганизации=(ВыводВКолонкахЧисло=0);
	ПоГоризонталиПользователи=НЕ ПоГоризонталиОрганизации;
	УстановитьСостояниеНеИспользовать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьДанные(Команда)
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Настройки были изменены. Записать настройки перед обновлением данных из информационной базы'");
		Режим = РежимДиалогаВопрос.ДаНетОтмена;
		Оповещение = Новый ОписаниеОповещения("ПередОбновлением_Завершение", ЭтаФорма, Новый Структура);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		
		ОбновитьДанныеИзРегистра();
		
	КонецЕсли;
			
КонецПроцедуры
	
&НаКлиенте
Процедура ПередОбновлением_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Применить();	
		
	Иначе
		
		ОбновитьДанныеИзРегистра();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидыОтчетовПриИзменении(Элемент)
	
	ПриИзмененииОтборВидыОтчетов();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтборВидыОтчетов()
		
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных("ВидОтчета");
	ТекЭлемент = ТиповыеОтчеты_УправляемыйРежимУХ.ВернутьЭлементОтбора(СписокРегистр.Отбор, ПолеКомпоновки);
	
	Если ТекЭлемент = Неопределено Тогда
		
		ТекЭлемент = СписокРегистр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ТекЭлемент.ЛевоеЗначение = ПолеКомпоновки;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтборВидыОтчетов) Тогда
		
		ТекЭлемент.Использование = Ложь;
		
	Иначе
			
		ТекЭлемент.Использование = Истина;
		ТекЭлемент.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ТекЭлемент.ПравоеЗначение = ОтборВидыОтчетов;
		
	КонецЕсли;
	
	УстановитьСостояниеНеИспользовать();
	
КонецПроцедуры // ПриИзмененииОтборВидыОтчетов()

&НаСервере
Процедура ОтборОрганизацииПриИзмененииНаСервере()
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных("Организация");
	ТекЭлемент = ТиповыеОтчеты_УправляемыйРежимУХ.ВернутьЭлементОтбора(СписокРегистр.Отбор, ПолеКомпоновки);
	
	Если ТекЭлемент = Неопределено Тогда
		
		ТекЭлемент = СписокРегистр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ТекЭлемент.ЛевоеЗначение = ПолеКомпоновки;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтборОрганизации) Тогда
		
		ТекЭлемент.Использование = Ложь;
		
	Иначе
			
		ТекЭлемент.Использование = Истина;
		ТекЭлемент.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ТекЭлемент.ПравоеЗначение = ОтборОрганизации;
		
	КонецЕсли;

	УстановитьСостояниеНеИспользовать();
		
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацииПриИзменении(Элемент)
	ОтборОрганизацииПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтборПользователиПриИзмененииНаСервере()
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных("Пользователь");
	ТекЭлемент = ТиповыеОтчеты_УправляемыйРежимУХ.ВернутьЭлементОтбора(СписокРегистр.Отбор, ПолеКомпоновки);
	
	Если ТекЭлемент = Неопределено Тогда
		
		ТекЭлемент = СписокРегистр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ТекЭлемент.ЛевоеЗначение = ПолеКомпоновки;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтборПользователи) Тогда
		
		ТекЭлемент.Использование = Ложь;
		
	Иначе
			
		ТекЭлемент.Использование = Истина;
		ТекЭлемент.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ТекЭлемент.ПравоеЗначение = ОтборПользователи;
		
	КонецЕсли;
	
	УстановитьСостояниеНеИспользовать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПользователиПриИзменении(Элемент)
	ОтборПользователиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СписокРегистрПередНачаломИзменения(Элемент, Отказ)
	
	Отказ=Истина;
	
	СтруктураПараметров=Новый Структура;
	
	Если ЗначениеЗаполнено(Элемент.ТекущаяСтрока) Тогда
		
		СтруктураПараметров.Вставить("Ключ",Элемент.ТекущаяСтрока);
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("НастройкаВидыОтчетов",ПоГруппамВидовОтчетов+1);
	СтруктураПараметров.Вставить("НастройкаОрганизации",ПоГруппамОрганизаций+1);
	СтруктураПараметров.Вставить("НастройкаПользователи",ПоГруппамПользователей+1);
	
	СтруктураПараметров.Вставить("ОтборВидыОтчетов",ОтборВидыОтчетов);
	СтруктураПараметров.Вставить("ОтборОрганизации",ОтборОрганизации);
	СтруктураПараметров.Вставить("ОтборПользователи",ОтборПользователи);

	ОткрытьФорму("РегистрСведений.НастройкиПравДоступаПользователейВидыОтчетов.ФормаЗаписи",СтруктураПараметров);
		
КонецПроцедуры

&НаКлиенте
Процедура СписокРегистрПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ=Истина;
	
	СтруктураПараметров=Новый Структура;
	
	Если Копирование И ЗначениеЗаполнено(Элемент.ТекущаяСтрока) Тогда
		
		СтруктураПараметров.Вставить("ЗначениеКопирования",Элемент.ТекущаяСтрока);
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("НастройкаВидыОтчетов",ПоГруппамВидовОтчетов+1);
	СтруктураПараметров.Вставить("НастройкаОрганизации",ПоГруппамОрганизаций+1);
	СтруктураПараметров.Вставить("НастройкаПользователи",ПоГруппамПользователей+1);
	
	СтруктураПараметров.Вставить("ОтборВидыОтчетов",ОтборВидыОтчетов);
	СтруктураПараметров.Вставить("ОтборОрганизации",ОтборОрганизации);
	СтруктураПараметров.Вставить("ОтборПользователи",ОтборПользователи);
	
	ОткрытьФорму("РегистрСведений.НастройкиПравДоступаПользователейВидыОтчетов.ФормаЗаписи",СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеНеИспользовать(ПеречитатьДанные=Ложь)
	
	Если ПеречитатьДанные Тогда
		
		ТекстСообщения=НСтр("ru = 'Данные в информационной базе изменены. Нажмите ""Перечитать данные из базы "" для получения новых данных.'");
		Элементы.ФормаОбновитьТаблицу.Доступность=Ложь;
		Элементы.ПеречитатьДанные.Видимость=Истина;
		
	Иначе
		
		Если ПолеНастройки.ВысотаТаблицы=0 Тогда
			
			ТекстСообщения=НСтр("ru = 'Нажмите ""Обновить таблицу "" для отображения данных.'");
			
		Иначе	
			
			ТекстСообщения=НСтр("ru = 'Изменились параметры вывода данных. Нажмите ""Обновить таблицу "" для отображения.'");
			
		КонецЕсли;
		
		Элементы.ФормаОбновитьТаблицу.Доступность=Истина;
		
	КонецЕсли;
	
	ОтображениеСостояния = Элементы.ПолеНастройки.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = ТекстСообщения;
	
	Элементы.ПолеНастройки.Доступность = Ложь;
			
КонецПроцедуры

&НаСервере
Процедура СброситьСостояниеНеИспользовать()
		
	ОтображениеСостояния = Элементы.ПолеНастройки.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Ложь;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = "";
	
	Элементы.ПолеНастройки.Доступность = Истина;
	Элементы.ФормаОбновитьТаблицу.Доступность=Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьБланкиОтчетовПриИзменении(Элемент)
	
	УстановитьСостояниеНеИспользовать();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ЕстьОтбор=Ложь;
	
	Если ЗначениеЗаполнено(ОтборОрганизации) Тогда
		
		ОтборОрганизацииПриИзмененииНаСервере();
		ЕстьОтбор=Истина;
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ОтборВидыОтчетов) Тогда
		
		ПриИзмененииОтборВидыОтчетов();
		ЕстьОтбор=Истина;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПользователи) Тогда
		
		ОтборПользователиПриИзмененииНаСервере();
		ЕстьОтбор=Истина;
		
	КонецЕсли;
	
		
КонецПроцедуры
	
	

ВыполняетсяЗакрытие = Ложь;
