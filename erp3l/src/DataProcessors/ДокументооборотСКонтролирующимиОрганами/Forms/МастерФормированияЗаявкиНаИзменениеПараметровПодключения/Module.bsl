&НаКлиенте 
Перем КонтекстЭДОКлиент;

&НаКлиенте
Перем ПрисоединенныйФайлЗаявления;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Инициализация(Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытии_ПослеПолученияКонтекста", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Отказ = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_СпроситьПроСохранение", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	Если Элементы.Закрыть.Заголовок = "Закрыть" Тогда
		ПрограммноеЗакрытие = Истина;
	КонецЕсли;
	
	ТекстПредупреждения = НСтр("ru = 'Прервать работу помощника?';
								|en = 'Cancel the wizard?'");
	
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(
		ЭтотОбъект, 
		Отказ, 
		ЗавершениеРаботы,
		ТекстПредупреждения, 
		"ПрограммноеЗакрытие");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Организации" Тогда
		
		Если Источник = Организация ИЛИ Параметр = Организация Тогда
			ОбработкаОповещенияЗаписиОрганизации();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ФизическиеЛица"
		ИЛИ ИмяСобытия = "Запись_ВладельцаИлиБухгалтера" Тогда
		
		ОбработкаОповещенияЗаписиВладельца(ИмяСобытия, Параметр, Источник);
		
	ИначеЕсли ИмяСобытия = "ПроверитьЧтоМастерФормированияЗаявкиНаПодключениеИлиИзменениеПодключенияОткрыт" И Источник = Организация Тогда
		
		Параметр.ФормаМастераФормированияЗаявкиНаПодключениеИлиИзменениеПодключенияОткрыта = Истина;
		
	ИначеЕсли ИмяСобытия = "ИсправитьОшибкиЛокальногоХраненияКлюча" Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ИсправитьОшибкиЛокальногоХраненияКлюча_Завершение", 
			ЭтотОбъект);
			
		ПроверитьКриптопровайдерИМестоХраненияКлючей(ОписаниеОповещения, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗаписиВладельца(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ВладельцаИлиБухгалтера" Тогда
		Руководитель	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Организация); 
		ГлБухгалтер		= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ГлБухгалтер(Организация);
	КонецЕсли;
	
	Если Параметр = Руководитель ИЛИ Источник = Руководитель Тогда
		
		ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(ЭтотОбъект);
		НовыйТипВладельца = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
		УстановитьНовогоВладельцаЭЦП(НовыйТипВладельца);
		
	ИначеЕсли (Параметр = ГлБухгалтер ИЛИ Источник = ГлБухгалтер) И ЭтоЮридическоеЛицо Тогда
		
		ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(ЭтотОбъект);
		НовыйТипВладельца = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер");
		УстановитьНовогоВладельцаЭЦП(НовыйТипВладельца);
		
	ИначеЕсли (Параметр = СотрудникВыбор ИЛИ Источник = СотрудникВыбор) И ЭтоЮридическоеЛицо Тогда
		
		ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(ЭтотОбъект);
		НовыйТипВладельца = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник");
		УстановитьНовогоВладельцаЭЦП(НовыйТипВладельца);
		
	КонецЕсли;
	
	// Обновляем данные на второй закладке только если мы находимся на этой закладке
	Если Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ПроверкаЗаявления Тогда
		СформироватьТаблицуДляПодтвержденияДанных();
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗаписиОрганизации()
	
	ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(ЭтотОбъект);
	ИнициализироватьНовыеРеквизитыОрганизации(Ложь);
	ПриУстановкеРежимаТолькоСУЦ();
	
	СравнитьРеквизитыОрганизацииСИсходными();
	СравнитьНаправленияИКодыСдачиОтчетностиСИсходными();
	
	ПроверитьНеобходимостьУстановкиГалки_ИзменитьРеквизитыОрганизации();
	ПроверитьНеобходимостьУстановкиГалки_ПереиздатьСертификат();
	
	// Обновляем данные на второй закладке только если мы находимся на этой закладке
	Если Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ПроверкаЗаявления Тогда
		СформироватьТаблицуДляПодтвержденияДанных();
	КонецЕсли;
	
	УправлениеФормой();
	
	ЭтаФорма.Активизировать();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЭтоНотариусАдвокатИлиГКФХПриИзменении(Элемент) Экспорт
	
	ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(ЭтотОбъект);
	СравнитьРеквизитыОрганизацииСИсходными();
	ПроверитьНеобходимостьУстановкиГалки_ПереиздатьСертификат();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоБюджетополучательПриИзменении(Элемент) Экспорт
	
	ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(ЭтотОбъект);
	
	ПриУстановкеРежимаТолькоСУЦНаСервере();
	
	// Смена вида органинизации к смене места хранения не приводит
	ОпределятьМестоХранения = Ложь;
	СброситьСпособПолученияСертификата(ОпределятьМестоХранения, Истина);
	
	ИнициализироватьВозможностьБезбумажногоПродления();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаИзменитьНастройкиУведомленийНажатие(Элемент)
	
	ПоказатьИзменившиесяРеквизиты(
		ИзмененныеРеквизитыУведомлений(), 
		НСтр("ru = 'Изменившиеся настройки уведомлений';
			|en = 'Modified notification settings'"));
	
КонецПроцедуры
	
&НаКлиенте
Процедура КартинкаРеквизитыОрганизацииНажатие(Элемент)
	
	ПоказатьИзменившиесяРеквизиты(
		ИзмененныеРеквизитыОрганизации(), 
		НСтр("ru = 'Изменившиеся реквизиты организации';
			|en = 'Changed company details'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаВыбораМестаХраненияНажатие(Элемент)
	
	ПоказатьИзменившиесяРеквизиты(
		ИзмененныеНастройкиХраненияКлюча(), 
		НСтр("ru = 'Изменившиеся настройки хранения ключа';
			|en = 'Modified key storage settings'"));

КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаИзменитьНаправленияНажатие(Элемент)
	
	ПоказатьИзменившиесяРеквизиты(
		ИзмененныеНаправления(), 
		НСтр("ru = 'Изменения в составе гос. органов';
			|en = 'Changes in state authorities composition'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаИзменитьРеквизитыСертификатаНажатие(Элемент)
	
	Реквизиты = ИзмененныеРеквизитыСертификата();
	
	ПоказатьИзменившиесяРеквизиты(
		Реквизиты, 
		НСтр("ru = 'Изменившиеся реквизиты сертификата';
			|en = 'Changed certificate details'"));

КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяПомощьНажатие(Элемент)
	
	ФИО = СокрЛП(ВладелецЭЦПИмя + " " + ВладелецЭЦПОтчество);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Фио", ФИО);
	ДополнительныеПараметры.Вставить("НомерТелефона", ТелефонМобильный);
	
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_Помощь", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннойПодписьюПриИзменении(Элемент)
	
	ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(ЭтотОбъект);
	ПереключитьНаЭлектронноеПодписание(ЭтотОбъект);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВБумажномВидеПриИзменении(Элемент)

	ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(ЭтотОбъект);
	ПереключитьНаБумажноеПодписание(ЭтотОбъект);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияСканаЗаявленияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НапечататьЗаявление();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	КонтекстЭДОКлиент.ВыбратьВсеОбработкаНавигационнойСсылки(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СканОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеДобавленияСкана", 
	ЭтотОбъект);
	
	КонтекстЭДОКлиент.ВыполнитьДействиеСФайлом(
		ЭтотОбъект, 
		ОписаниеОповещения, 
		Элемент, 
		НавигационнаяСсылкаФорматированнойСтроки, 
		СтандартнаяОбработка);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПослеДобавленияСкана(Результат, ВходящийКонтекст) Экспорт
	
	УправлениеФормой();
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОчиститьСканНажатие(Элемент)
	
	КонтекстЭДОКлиент.ОчиститьСканНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПодсказкаИзменитьВладельцаНажатие(Элемент)
	
	ПоказатьИзменившиесяРеквизиты(
		ИзмененныеРеквизитыВладельца(), 
		НСтр("ru = 'Изменившиеся реквизиты владельца сертификата';
			|en = 'Changed certificate owner attributes'"));

КонецПроцедуры

&НаКлиенте
Процедура НастройкиУведомленийНажатие(Элемент)
	
	Если ЭтоОблако(ЭтотОбъект) Тогда
		ПоказатьФормуВыбораТелефонаИПочтыВОблаке();
	Иначе
		ПоказатьФормуВыбораТелефонаВКоробке();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаИзменитьРеквизитыПодключенияК1СОтчетностиНажатие(Элемент)
	
	ПоказатьИзменившиесяРеквизиты(
		ИзмененныеРеквизитыОрганизации(), 
		НСтр("ru = 'Изменившиеся реквизиты организации';
			|en = 'Changed company details'"));
	
КонецПроцедуры
	
&НаКлиенте
Процедура ИзменитьМестоХраненияПриИзменении(Элемент)
	
	ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(ЭтотОбъект);
	
	// Определяем место, т.к. только что был снят/установлен флаг изменения места хранение и надо вернуть все изменения в исходный вид
	ОпределятьМестоХранения = Истина;
	ПриИзмененииМестаХранения(ОпределятьМестоХранения);
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуВыбораМестаХраненияНажатие(Элемент)

	ПараметрыФормы = 
		"ПереиздатьСертификатЭДО,
         |CryptoProCSPУстановлен,
         |ViPNetCSPУстановлен,
         |ВключатьЛицензиюКриптоПроВСертификат,
         |ВыбранноеМестоХраненияКлюча,
         |ДоступнаЭлектроннаяПодписьВМоделиСервиса,
         |ЕстьВыборМестаХраненияКлючей,
         |КомпонентаУстановлена,
         |КриптопровайдерПредставление,
         |НомерТелефонаПриПереходеВОблако,
         |СпособПодтвержденияКриптоопераций,
		 |УчетнаяЗапись,
		 |ЭтоУчетнаяЗаписьВМоделиСервиса,
		 |ПредупреждатьПроНаличиеЛицензииКриптоПро,
		 |СпособПолученияСертификата,
		 |ЭтоПереходВОблако,
		 |ЭтоПереходВКоробку,
		 |ПроверенДоступДляТокена,
		 |ПоказыватьФлагВключатьЛицензиюКриптоПроВСертификат,
		 |СрокЛицензииКриптоПроКонечный,
		 |ЛицензияКриптоПроВключенаВСертификат,
		 |ТипКриптопровайдера,
		 |ТипКриптопровайдераИзменился,
		 |ТипКриптопровайдераИсходный,
		 |ЭтаУчетнаяЗаписьБылаСделанаДляОблака, 
		 |ПереиздатьСертификат,
		 |ИзменитьМестоХранения,
		 |СертификатДолженБытьПолученОтГосУЦ,
		 |ВозможноБесшовноеПолучениеСертификатаВДУЦ";
	
	ДополнительныеПараметры = Новый Структура(ПараметрыФормы);
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ЭтотОбъект, ПараметрыФормы); 
	ДополнительныеПараметры.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПоказатьФормуВыбораМестаХраненияНажатие_Завершение", 
		ЭтотОбъект);
		
	ОткрытьФорму(
		КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_ВыборМестаХранения",
		ДополнительныеПараметры,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПодключениеЭДОНедоступноОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(СсылкаОписаниеСервисаЭДО) Тогда
		ПерейтиПоНавигационнойСсылке(СсылкаОписаниеСервисаЭДО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеССертификатомНажатие(Элемент)
	
	Если СертификатДолженБытьПолученОтГосУЦ Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВключаемыйСертификатНажатие_Завершение", 
			ЭтотОбъект);
		
		ОбработкаЗаявленийАбонентаКлиентСервер.УточнитьРежимРаботыСКлючами(ЭтотОбъект);
		КонтекстЭДОКлиент.ВключаемыйСертификатНажатие(ЭтотОбъект, ОписаниеОповещения, Истина);
		
	Иначе
		ВыбратьДейстивиеССертификатом();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагПереиздатьСертификатЭДОПриИзменении(Элемент)
	
	ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(ЭтотОбъект);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагПодключитьЭДОПриИзменении(Элемент)
	
	ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(ЭтотОбъект);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРеквизитыПодключенияК1СОтчетностиПриИзменении(Элемент)
	
	ИзмененныеРеквизиты = ИзмененныеРеквизитыОрганизации();
	
	ЕстьИзменения = ИзмененныеРеквизиты.Количество() > 0;

	Если НЕ ЕстьИзменения Тогда
		
		ИзменитьРеквизитыПодключенияК1СОтчетности = Ложь;
		
		Текст = НСтр("ru = 'Реквизиты организации не менялись. Чтобы отправить заявление на изменение реквизитов организации сначала отразите эти изменения в свойствах организации.';
					|en = 'The company attributes have not changed. To submit an application for changing company attributes, first record these changes in the company properties.'");
		ПоказатьПредупреждение(, Текст);
		
	КонецЕсли;
	
	ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(ЭтотОбъект);
	ИзменитьРеквизитыПодключенияК1СОтчетностиПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВладелецЭЦПНажатие(Элемент)
	
	ОткрытьФормуВыбораВладельцаЭЦП();

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОрганизацияПриИзменении_ПослеЗаполненияРеквизитов", 
		ЭтотОбъект);
	
	ИнициализироватьРеквизиты1СОтчетности(ДанныеЗаполнения, Ложь,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродлитьЛицензиюНа1СОтчетностьПриИзменении(Элемент)
	
	ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(ЭтотОбъект);
	ПродлитьЛицензиюНа1СОтчетностьПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереиздатьСертификатПриИзменении(Элемент)
	
	ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(ЭтотОбъект);
	ПереиздатьСертификатПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьМобильныйТелефонПриИзменении(Элемент)
	
	ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(ЭтотОбъект);
	
	ПриИзмененииНастроекУведомленийНаСервере();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВладельцаСертификатаПриИзменении(Элемент)

	ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(ЭтотОбъект);
	ИзменитьВладельцаСертификатаПриИзмененииНаСервере();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСоставКонтролирующихОргановПриИзменении(Элемент)
	
	ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(ЭтотОбъект);
	// Чтобы серверный вызов были за один раз
	ИзменитьСоставКонтролирующихОргановПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ТаблицаДанныхЗаявленияНаПодключениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные = Неопределено ИЛИ НЕ Элемент.ТекущиеДанные.РеквизитРедактируется Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийРеквизит 		= Элемент.ТекущиеДанные.ИзмененныйРеквизит;
	НаименованиеРеквизита 	= Строка(ТекущийРеквизит);
	
	// Если это реквизит, который отсутствует у организации, то он должен редактироваться напрямую в таблице.
	Если Элемент.ТекущиеДанные.ЭтоРеквизитНеХранящийсяВБазе Тогда
		
		Маска = Неопределено;
		Если ТекущийРеквизит = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС") Тогда
			Маска = "999-999-999 99";
		ИначеЕсли ТекущийРеквизит = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПКодПодразделения") Тогда
			Маска = "999-999";
		КонецЕсли; 
		
		ИмяРеквизита = ИмяПеречисленияПараметрыПодключенияК1СОтчетности(ТекущийРеквизит);
		ЗадатьНовоеЗначениеРеквизиту(ИмяРеквизита, НаименованиеРеквизита, ЭтаФорма[ИмяРеквизита], Маска);
		
	ИначеЕсли Элемент.ТекущиеДанные.СодержитОшибку Тогда // Это реквизит Владельца ЭП
		
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВладелецРеквизита) Тогда
			Если Элемент.ТекущиеДанные.ИзмененныйРеквизит = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДолжность") Тогда
				
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ТаблицаДанныхЗаявленияНаПодключениеВыбор_ПослеЗаполненияДолжности", 
					ЭтотОбъект);
					
				ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуРедактированияДолжности(Организация, ВладелецЭЦП, ОписаниеОповещения);
					
			Иначе
				ПоказатьЗначение(, Элемент.ТекущиеДанные.ВладелецРеквизита);
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось определить сотрудника-владельца сертификата.
                                   |Укажите сотрудника-владельца сертификата на первом шаге помощника';
                                   |en = 'Cannot determine an employee who owns the certificate.
                                   |Specify the employee who owns the certificate at the first step of the wizard'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьНастройкиЭДО(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьНастройкиЭДО_Завершение", 
		ЭтотОбъект);
		
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуНастроекРегистрацииЭДО(НастройкиЭДО, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокПартнеров1С(Команда)
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("http://www.1c.ru/rus/partners/onecrep.jsp");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСсылкуНаСтатьюПоПодключению(Команда)
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("http://its.1c.ru/bmk/elreps/settings");
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьНаправления(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УказатьНаправления_Завершение", 
		ЭтотОбъект);
		
	КонтекстЭДОКлиент.УказатьНаправленияВЗаявлении(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЗаявление(Команда = Неопределено)
	
	СохранитьЗаявлениеКлиент();
	КонтекстЭДОКлиент.НапечататьЗаявлениеПо1СОтчетности(ДокументЗаявление.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьМастер(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельМастерДалее(Команда = Неопределено)
	
	ОчиститьСообщения();
	МастерДалее = Истина;
	
	ТекущаяСтраница = Элементы.ОсновнаяПанель.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.ОсновнаяСтраница Тогда
		
		ПриНажатииДалееНаОсновнойСтранице(МастерДалее);
				
	ИначеЕсли ТекущаяСтраница = Элементы.ПроверкаЗаявления Тогда
		
		ПриНажатииДалееНаСтраницеПроверкиЗаявления(МастерДалее);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельМастерНазад(Команда)
	ПоказатьПредыдущуюСтраницу();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДиректора(Команда)
	
	НовыйТипВладельца = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	УстановитьНовогоВладельцаЭЦП(НовыйТипВладельца);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьГлБухгалтера(Команда)
	
	НовыйТипВладельца = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер");
	УстановитьНовогоВладельцаЭЦП(НовыйТипВладельца);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСотрудника(Команда)
	
	СотрудникВыбор = Неопределено;
	НовыйТипВладельца = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник");
	УстановитьНовогоВладельцаЭЦП(НовыйТипВладельца);
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проверки
	
&НаКлиенте
Процедура ПроверитьВозможностьОтправкиВторичныхЗаявлений(ВыполняемоеОповещение)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьВозможностьОтправкиВторичныхЗаявлений_ПослеПроверки", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	КонтекстЭДОКлиент.ЕстьДанныеДляФормированияВторичногоЗаявления(
		ОписаниеОповещения,
		УчетнаяЗапись);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьОтправкиВторичныхЗаявлений_ПослеПроверки(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	ПоддерживаетсяВторичноеЗаявление = Истина;
	ЕстьДанныеДляФормированияВторичногоЗаявления = Результат.ЕстьДанные;
	УжеНастроенаУчетнаяЗаписьДокументооборота    = ЗначениеЗаполнено(УчетнаяЗапись);
	
	// Проверяем возможность создания вторичного заявления
	Если НЕ УжеНастроенаУчетнаяЗаписьДокументооборота 
		ИЛИ НЕ СпецоператорПоддерживаетВторичныеЗаявления 
		ИЛИ НЕ ЕстьДанныеДляФормированияВторичногоЗаявления Тогда
		
		ПоддерживаетсяВторичноеЗаявление = Ложь;
		
		Если НЕ УжеНастроенаУчетнаяЗаписьДокументооборота Тогда
			
			// Случай, когда организация не подключена к 1С-Отчетности
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПоказатьФормуПредложениеОформитьЗаявлениеНаПодключение(Организация);
			
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ПоддерживаетсяВторичноеЗаявление);

		ИначеЕсли НЕ СпецоператорПоддерживаетВторичныеЗаявления Тогда
			
			// Случай, когда оператор электронного документооборота не поддерживает отправку вторичных заявлений
			ПоказатьПредупреждение(, НСтр("ru = 'Оператор электронного документооборота не поддерживает отправку вторичных заявлений.
									|Для изменения настроек подключения к 1С-Отчетности свяжитесь со службой поддержки оператора электронного документооборота';
									|en = 'Electronic data interchange provider does not support sending secondary applications.
									|To change settings of connection to 1C Reporting, contact technical support of the electronic data interchange provider'"));
									
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ПоддерживаетсяВторичноеЗаявление);
		
		ИначеЕсли НЕ ЕстьДанныеДляФормированияВторичногоЗаявления Тогда
			
			// Случай, когда невозможно получить новый рег файл 
			ТекстОшибокДляМастераПодключенияК1СОтчетности = "";
			
			ДополнительныеПараметры = Новый Структура("ТекстОшибокДляМастераПодключенияК1СОтчетности, УчетнаяЗапись, ВыполняемоеОповещение, ПоддерживаетсяВторичноеЗаявление", ТекстОшибокДляМастераПодключенияК1СОтчетности, УчетнаяЗапись, ВыполняемоеОповещение, ПоддерживаетсяВторичноеЗаявление);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВозможностьОтправкиВторичныхЗаявлений_ПовторнаяПопытка", ЭтотОбъект, ДополнительныеПараметры);
			
			КонтекстЭДОКлиент.ЕстьДанныеДляФормированияВторичногоЗаявления(
				ОписаниеОповещения,
				УчетнаяЗапись,
				ТекстОшибокДляМастераПодключенияК1СОтчетности);

		Иначе
			
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ПоддерживаетсяВторичноеЗаявление);

		КонецЕсли;
	Иначе
		
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ПоддерживаетсяВторичноеЗаявление);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьОтправкиВторичныхЗаявлений_ПовторнаяПопытка(Результат, ДополнительныеПараметры) Экспорт
	
	ЕстьДанные = Результат.ЕстьДанные;
	ТекстОшибокДляМастераПодключенияК1СОтчетности = Результат.ТекстОшибок;
	УчетнаяЗапись = ДополнительныеПараметры.УчетнаяЗапись;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ПоддерживаетсяВторичноеЗаявление = ДополнительныеПараметры.ПоддерживаетсяВторичноеЗаявление;
	
	Если НЕ ЕстьДанные Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("УчетнаяЗапись", УчетнаяЗапись);
		ПараметрыФормы.Вставить("ТекстОшибки", ТекстОшибокДляМастераПодключенияК1СОтчетности);
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ПредупреждениеОНевозможностиПолучитьНастройкиУчетнойЗаписи", ПараметрыФормы);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ПоддерживаетсяВторичноеЗаявление);

КонецПроцедуры

&НаКлиенте
Процедура ИсправитьОшибкиЛокальногоХраненияКлюча_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	ОбработкаЗаявленийАбонентаКлиентСервер.УточнитьРежимРаботыСКлючами(ЭтотОбъект);
	
	ТелефонДляПаролей = ТелефонМобильныйДляПаролей;
	
	Оповестить("ИсправленыОшибкиЛокальногоХраненияКлюча", КонтекстЭДОКлиент.ПараметрыОткрытияФормыВыбораСуществующегоСертификата(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКриптопровайдер_УстановитьКомпонентуИОпределитьКриптопровайдер(ВыполняемоеОповещение)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьКриптопровайдер_ПослеСозданияМенеджераКриптографии", 
		ЭтотОбъект,
		ДополнительныеПараметры);
			
	КриптографияЭДКОКлиент.СоздатьМенеджерКриптографии(ОписаниеОповещения, Ложь,, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКриптопровайдер_ПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	ЗапомнитьПризнакУстановкиКомпоненты(ЭтотОбъект, Результат.Выполнено);
	
	ПроверитьКриптопровайдерИМестоХраненияКлючей(ВходящийКонтекст.ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапомнитьПризнакУстановкиКомпоненты(Форма, Подключена)
	
	Форма.КомпонентаДляРаботыСКриптографиейПодключена = Подключена;
	Форма.КомпонентаУстановлена = Подключена;
	
КонецПроцедуры	

&НаСервере
Процедура Проверить1СЭДОПоНовойСхеме(МастерДалее)
	
	Если ПодключитьЭДО И Элементы.ГруппаПодключитьЭДО.Видимость Тогда
		
		НастройкиКорректны = Неопределено;
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ПроверитьНастройкиРегистрацииЭДО(НастройкиЭДО, НастройкиКорректны);

		Если НЕ НастройкиКорректны Тогда
			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Уточните настройки подключения 1С-ЭДО';
														|en = 'Refine 1C:EDI connection settings'"), ,"ПодключитьЭДО");
			МастерДалее = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УстановленХотяБыОдинФлаг(Форма)
	
	Возврат Форма.ПродлитьЛицензиюНа1СОтчетность 
		ИЛИ Форма.ИзменитьСоставКонтролирующихОрганов 
		ИЛИ Форма.ПереиздатьСертификат
		ИЛИ Форма.ИзменитьВладельцаСертификата 
		ИЛИ Форма.ИзменитьНастройкиУведомлений 
		ИЛИ Форма.ИзменитьРеквизитыПодключенияК1СОтчетности
		ИЛИ Форма.ИзменитьМестоХранения;
	
КонецФункции

&НаСервере
Процедура ПроверитьВключаемыйСертификат(МастерДалее)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ПроверитьВключаемыйСертификат(ЭтотОбъект, МастерДалее);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКриптопровайдерИМестоХраненияКлючей(ВыполняемоеОповещение, Принудительно = Ложь)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьКриптопровайдерИМестоХраненияКлючей_Завершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
		
	ПропуститьПроверкуКриптопровайдера = 
		НЕ Принудительно И (ЭтоПереходВОблако 
		ИЛИ ЭтоУчетнаяЗаписьВМоделиСервиса И НЕ ЭтоПереходВКоробку 
		ИЛИ ИспользоватьСуществующий(ЭтотОбъект) И ВключаемыйСертификатОблачный);
		
	Если ПропуститьПроверкуКриптопровайдера Тогда
		
		МастерДалее = ПроверитьТелефонИМестоХранения();
		
		Если МастерДалее Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Истина);
		КонецЕсли;
		
	Иначе
		ПроверитьНаличиеКриптопровайдера(ОписаниеОповещения, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПроверитьТелефонИМестоХранения()
	
	МастерДалее = Истина;
	
	ПроверятьМестоХранения = 
		ЕстьВыборМестаХраненияКлючей 
		И НЕ ЗначениеЗаполнено(ВыбранноеМестоХраненияКлюча) 
		И НЕ ИспользоватьСуществующий(ЭтотОбъект)
		И ИзменитьМестоХранения;
	
	Если ПроверятьМестоХранения Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выберите место хранения ключа';
														|en = 'Select key storage location'"), ,"ВыбранноеМестоХраненияКлюча");
		МастерДалее = Ложь;
		
	КонецЕсли;

	Если НЕ ПодтверждениеКонтактовВыполнено() Тогда
		
		Сообщение = НСтр("ru = 'Подтвердите контактные данные.';
						|en = 'Confirm contact details.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение,,"НомерТелефонаПриПереходеВОблако");
		МастерДалее = Ложь;
		
	КонецЕсли;
	
	Возврат МастерДалее;
		
КонецФункции

&НаКлиенте
Процедура ПроверитьКриптопровайдерИМестоХраненияКлючей_ПослеВопроса(Ответ, ВходящийКонтекст) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПроверитьКриптопровайдер_УстановитьКомпонентуИОпределитьКриптопровайдер(ВходящийКонтекст.ВыполняемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКриптопровайдерИМестоХраненияКлючей_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	ВыбранCryptoPro = ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro");
	ВыбранVipNet    = ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet");
	
	НеУстановленНиОдинКриптопровайдер = НЕ CryptoProCSPУстановлен И НЕ ViPNetCSPУстановлен;
	
	УстановленыОбаКриптопровайдера = 
		(ВыбранCryptoPro ИЛИ ВыбранVipNet) 
		И CryptoProCSPУстановлен 
		И ViPNetCSPУстановлен 
		И НЕ ИгнорироватьКонфликт;
		
	ВыбранНеустановленныйКриптопровайдер = 
		(ВыбранCryptoPro И НЕ CryptoProCSPУстановлен 
		ИЛИ ВыбранVipNet И НЕ ViPNetCSPУстановлен) 
		И НЕ ИспользоватьСуществующий(ЭтотОбъект);
	
	МастерДалее = Истина;
	
	Если НЕ КомпонентаУстановлена Тогда 
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПроверитьКриптопровайдерИМестоХраненияКлючей_ПослеВопроса", 
			ЭтотОбъект, 
			ВходящийКонтекст);
			
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Не удалось установить компоненту криптографии. Повторить попытку?';
												|en = 'Cannot install cryptography add-in. Retry?'"),РежимДиалогаВопрос.ДаНетОтмена);
		
	ИначеЕсли НеУстановленНиОдинКриптопровайдер Тогда
		
		// Ни одного криптопровайдера
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ЭтоОткрытиеИзВторичногоМастера", Истина);
		
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.УстановкаКриптопровайдера", ДополнительныеПараметры,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		МастерДалее = Ложь;
		
	ИначеЕсли УстановленыОбаКриптопровайдера Тогда
		
		// Два криптопровайдера
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеПоказаПредупрежденияОКонфликте", 
			ЭтотОбъект);
			
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("КриптопровайдерПриКонфликте", ВыбранноеМестоХраненияКлюча);
		ДополнительныеПараметры.Вставить("ЭтоЗаявлениеНаИзменение", 	Истина);
			
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_КонфликтКриптопровайдеров",
			ДополнительныеПараметры,
			,
			,
			,
			,
			ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		МастерДалее = Ложь;
	
	ИначеЕсли ВыбранНеустановленныйКриптопровайдер Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выбранный криптопровайдер не установлен на рабочий компьютер';
														|en = 'Selected cryptographic service provider is not installed on the work computer'"), ,"ВыбранноеМестоХраненияКлюча");
		МастерДалее = Ложь;
		
	КонецЕсли;
	
	Если МастерДалее Тогда
		МастерДалее = ПроверитьТелефонИМестоХранения();
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ВыполняемоеОповещение, МастерДалее); 

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВладельцаЭП(МастерДалее)
	
	// проверка заполненности сведений о руководителе
	Если (ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат) 
		И ЭтоРуководитель(ЭтотОбъект)
		И НЕ ЗначениеЗаполнено(Руководитель) Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выберите руководителя';
														|en = 'Select manager'"), ,"ДекорацияРуководитель");
		МастерДалее = Ложь;
	КонецЕсли;
	
	// проверка заполненности сведений о бухгалтере
	Если (ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат) 
		И ЭтоБухгалтер(ЭтотОбъект)
		И НЕ ЗначениеЗаполнено(ГлБухгалтер) Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выберите бухгалтера';
														|en = 'Select accountant'"), ,"ДекорацияГлБухгалтер");
		МастерДалее = Ложь;
	КонецЕсли;
	
	// проверка заполненности сведений о сотруднике
	ПроверитьНаличиеВладельца = 
		ПереиздатьСертификат 
		И НЕ ИзменитьВладельцаСертификата
		И ЭтоДругойСотрудник(ЭтотОбъект)
		И НЕ ЗначениеЗаполнено(СотрудникВыбор)
		И НЕ ИспользоватьСуществующий(ЭтотОбъект);
	
	Если ПроверитьНаличиеВладельца Тогда 
		
		ТекстПредупреждения = НСтр("ru = 'Переиздание сертификата требует обязательного указания сотрудника-владельца сертификата. 
                                    |Установите флажок ""Изменение сотрудника-владельца сертификата"" и выберите владельца сертификата';
                                    |en = 'To reissue a certificate, it is required to specify an employee owning the certificate.
                                    |Select the ""Change the employee owning the certificate"" check box and select the certificate owner'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстПредупреждения,,"ИзменитьВладельцаСертификата");
		МастерДалее = Ложь;
		
	КонецЕсли;
	
	// проверка заполненности Владельца ЭЦП
	Если (ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат) 
		И ВладелецЭЦП = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка") Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выберите сотрудника-владельца сертификата';
														|en = 'Select an employee who owns the certificate'"), ,"СотрудникВыбор");
		МастерДалее = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтролирующиеОрганы(МастерДалее)
	
	// коды ФНС
	Если СдаватьВФНС И ПолучателиФНС.Количество()=0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Заполните коды ФНС';
														|en = 'Fill in FTS codes'"), ,"СдаватьВФНС");
		МастерДалее = Ложь;
	КонецЕсли;
	
	// код отделения ПФР
	Если СдаватьВПФР Тогда
		КодПФРВОрганизации = КодПФР(ДанныеОрганизации);
		Если ПустаяСтрока(СтрЗаменить(КодПФР,"-","")) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Код отделения ПФР""';
															|en = 'Fill in the ""PF branch code"" field '"), ,"СдаватьВПФР");
			МастерДалее = Ложь;
		ИначеЕсли СтрДлина(СокрЛП(КодПФР))<> 7 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Код отделения ПФР должен состоять из 6 цифр';
															|en = 'PF branch code should contain 6 digits'"), ,"СдаватьВПФР");
			МастерДалее = Ложь;
		ИначеЕсли СокрЛП(КодПФР) <> КодПФРВОрганизации Тогда
			ТекстСообщения = НСтр("ru = 'Код отделения ПФР не совпадает с кодом, указанным в организации (%1)';
									|en = 'PF branch code does not match the code specified in company (%1)'");
			Если ПустаяСтрока(СтрЗаменить(КодПФРВОрганизации, "-", "")) Тогда
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "(%1)", "");
			Иначе
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "(%1)", "(" + КодПФРВОрганизации + ")");
			КонецЕсли;
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, ,"СдаватьВПФР");
			МастерДалее = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// код органа Росстата
	Если СдаватьВРосстат Тогда
		
		Если ПолучателиФСГС.Количество() = 0 Тогда
		
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Заполните коды органа Росстата';
															|en = 'Enter codes of the Russian Federal State Statistics Service'"), ,"СдаватьВРосстат");
			МастерДалее = Ложь;
			
		ИначеЕсли ПолучателиФСГС.Количество() > 0 Тогда
			
			Для каждого Получатель Из ПолучателиФСГС Цикл
				
				Если ПустаяСтрока(СтрЗаменить(Получатель.КодПолучателя,"-","")) Тогда
					ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Код органа Росстата""';
																	|en = 'Fill in the ""Russian Federal State Statistics Service body code"" field '"), ,"СдаватьВРосстат");
					МастерДалее = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(Получатель.КодПолучателя)) < 5 Тогда
					ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Код органа Росстата должен состоять как минимум из 4 цифр';
																	|en = 'Code of the Russian Federal State Statistics Service body must contain at least 4 digits'"), ,"СдаватьВРосстат");
					МастерДалее = Ложь;
				ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(Получатель.КодПолучателя, НСтр("ru = 'Код органа Росстата';
																									|en = 'Russian Federal State Statistics Service body code'"), "СдаватьВРосстат") Тогда
					МастерДалее = Ложь;
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ (СдаватьВФНС ИЛИ СдаватьВПФР ИЛИ СдаватьВФСС ИЛИ СдаватьВРосстат ИЛИ ПодатьЗаявкуНаСертификатДляФСРАР ИЛИ ПодатьЗаявкуНаПодключениеРПН ИЛИ ПодатьЗаявкуНаПодключениеФТС) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Укажите хотя бы один контролирующий орган, в который будет сдаваться отчетность';
														|en = 'Specify at least one regulatory authority the reporting will be submitted to.'")
			, ,"ИзменитьСоставКонтролирующихОрганов");
		МастерДалее = Ложь;
	ИначеЕсли НЕ СдаватьВФНС И НЕ СдаватьВПФР Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Среди контролирующих органов, в которые будет сдаваться отчетность, должены быть ФНС или ПФР';
				|en = 'FTS or PF should be among the regulatory authorities to which reporting will be sent'")
			, ,"ИзменитьСоставКонтролирующихОрганов");
		МастерДалее = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРеквизитыЗаявления(МастерДалее)
	
	ПроверитьРеквизитыЗаявленияНаКлиенте(МастерДалее);
	ПроверитьРеквизитыЗаявленияНаСервере(МастерДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРеквизитыЗаявленияНаКлиенте(МастерДалее)
	
	ПроверитьРеквизитыПриПереизданииСертификата(МастерДалее);
	ПроверитьЧтоВыбраноХотяБыОдноДействие(МастерДалее);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитыЗаявленияНаСервере(МастерДалее)
	
	ПроверитьНаправления(МастерДалее);
	ПроверитьТаблицуДанныхЗаявления(МастерДалее);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьТаблицуДанныхЗаявления(МастерДалее)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Для каждого СтрокаТаблицы Из ТаблицаДанныхЗаявленияНаПодключение Цикл
		
		ВыполнятьПроверку = 
			СтрокаТаблицы.ВыделятьСтрокуЖелтым 
			ИЛИ ПереиздатьСертификат;
			
		Если НЕ ВыполнятьПроверку Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.СодержитОшибку Тогда
			
			ОбщегоНазначения.СообщитьПользователю(СтрокаТаблицы.ТекстОшибки);
			МастерДалее = Ложь;
			
		ИначеЕсли КонтекстЭДОСервер.ЗначениеЗаполненоШумом(СтрокаТаблицы.ЗначениеРеквизита) Тогда
			
			ТекстОшибки = НСтр("ru = 'Значение ""%1"" в поле ""%2"" не несет в себе полезной информации';
								|en = 'The value ""%1"" in the field ""%2"" does not contain useful information'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, СтрокаТаблицы.ЗначениеРеквизита, СтрокаТаблицы.НазваниеРеквизита);
			
			Индекс = ТаблицаДанныхЗаявленияНаПодключение.Индекс(СтрокаТаблицы);
			Индекс = Формат(Индекс, "ЧГ=0");
			Поле   =  "ТаблицаДанныхЗаявленияНаПодключение[" + Индекс + "].ЗначениеРеквизита";
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , Поле);
			МастерДалее = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНаправления(МастерДалее)
	
	Если ИзменитьСоставКонтролирующихОрганов Тогда
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		Возврат КонтекстЭДОСервер.ПроверитьНаправления(ЭтотОбъект, МастерДалее, Истина); 
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ПроверитьЧтоВыбраноХотяБыОдноДействие(МастерДалее)
	
	// Проверяем, что пользователь отправляет не пустое заявление
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ЭтотПараметрИзменился", Истина);
	ПараметрыОтбора.Вставить("ВыделятьСтрокуЖелтым", Истина);
	
	Если ТаблицаДанныхЗаявленияНаПодключение.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
		
		ТекстОшибки = НСтр("ru = 'Не изменено ни одной настройки подключения к 1С-Отчетности';
							|en = 'No setting of connection to 1C Reporting is changed'"); 
		Поле 		= "ТаблицаДанныхЗаявленияНаПодключение[0].ЗначениеРеквизита";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , Поле);
		
		МастерДалее = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРеквизитыПриПереизданииСертификата(МастерДалее)
	
	// юридический адрес
	Если ПереиздатьСертификат Тогда
		
		// Проверяем при переиздании сертификата, так как в сертификат идут части адреса
		КонтекстЭДОКлиент.ПроверитьАдресОрганизацииЗаявления(
			АдресЮридическийЗначение, 
			"АдресЮридический", 
			НСтр("ru = 'Юридический адрес';
				|en = 'Legal address'"), 
			НСтр("ru = 'юридического адреса';
				|en = 'legal address'"), 
			МастерДалее);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьOIDЛицензииКриптоПро(МастерДалее)
	
	Если ИспользоватьСуществующий(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВключатьЛицензиюКриптоПроВСертификат Тогда
		
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		OIDЛицензииКриптоПро = КонтекстЭДОСервер.ПолучитьOIDЛицензииКриптоПро();
		
		Если OIDЛицензииКриптоПро = "" Тогда
			
			МастерДалее = Ложь;
			ТекстОшибки = НСтр("ru = 'Возможность выдачи лицензий на КриптоПро CSP временно недоступна. 
                                |Повторите попытку позже или отправьте заявление на сертификат без включения лицензии на КриптоПро CSP в его состав.';
                                |en = 'The issuance of licenses to CryptoPro CSP is temporarily unavailable. 
                                |Try again later or send an application for a certificate without including CryptoPro CSP as one of its components.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеКриптопровайдера(ВыполняемоеОповещение, ПредлагатьУстановкуРасширения) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьНаличиеКриптопровайдераЗавершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	КонтекстЭДОКлиент.ПроверитьНаличиеКриптопровайдера(ОписаниеОповещения, ПредлагатьУстановкуРасширения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеКриптопровайдераЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗапомнитьПризнакУстановкиКомпоненты(ЭтотОбъект, Результат.Выполнено);
	
	CryptoProCSPУстановлен 	= Результат.CryptoProCSPУстановлен;
	ViPNetCSPУстановлен 	= Результат.ViPNetCSPУстановлен;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ВыполняемоеОповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПослеПоказаПредупрежденияОКонфликте(Результат, ВходящийКонтекст) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("ИгнорироватьКонфликт")
		И Результат.ИгнорироватьКонфликт Тогда
		
		ИгнорироватьКонфликт = Истина;
		ОтправитьВБумажномВиде();
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПроверкаПереходногоПериода

&НаКлиенте
Процедура ПроверитьПереходныйПериод(МастерДалее)
	
	ПроверитьОбмен = 
		ЭтоПереходВОблако 
		И НЕ ИспользоватьСуществующий(ЭтотОбъект);
	
	Если НЕ ПредупредилиОПереходе И МастерДалее И ПроверитьОбмен Тогда
		
		МастерДалее = ПроверитьТелефонИМестоХранения();
		
		Если МастерДалее Тогда
			
			МастерДалее = Ложь;
			ПредупредилиОПереходе = Истина;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ОтпечатокСертификата", ОтпечатокСертификата); 
			ПараметрыФормы.Вставить("УчетнаяЗапись", УчетнаяЗапись); 
			
			ОповещениеСледующее = Новый ОписаниеОповещения("ПредупредитьОПереходеПослеОтвета", ЭтотОбъект);
			
			ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_ПроверкаПереходаВОблако", ПараметрыФормы, ЭтотОбъект, , , , ОповещениеСледующее);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупредитьОПереходеПослеОтвета(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "Продолжить" Тогда
		
		ПриНажатииДалееНаОсновнойСтранице(Истина);
		
	ИначеЕсли Результат = "Обновить" Тогда
		ВсеОрганизации = Новый Массив;
		ВсеОрганизации.Добавить(Организация);
		
		ПараметрыДлительногоОбмена = ДлительнаяОтправкаКлиент.ПараметрыДлительногоОбмена();
		ПараметрыДлительногоОбмена.Организации 					= ВсеОрганизации;
		ПараметрыДлительногоОбмена.ЭтоОбменИзФормы1СОтчетность 	= Ложь;
		
		Если НЕ ДлительнаяОтправкаКлиент.ПоказатьФормуДлительногоОбмена(ПараметрыДлительногоОбмена) Тогда // Обмен из 1С-Отчетность.
			Возврат;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОсуществитьОбменПоОрганизацииЗавершение", 
			ЭтотОбъект);
		КонтекстЭДОКлиент.ОсуществитьОбменПоОрганизации(
			ЭтаФорма, 
			Организация, 
			ОписаниеОповещения);
			
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ОсуществитьОбменПоОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОтправкаКлиент.ОповеститьОЗавершенииОбмена();
	ПриНажатииДалееНаОсновнойСтранице(Истина);
	
КонецПроцедуры

#КонецОбласти
 
#Область ПроверитьНаличиеИзменений

&НаСервере
Функция ПолучатьУведомленияИзменен()

	ПолучатьУведомленияИзменен = 
		ТелефонМобильныйЗаполнен(ТелефонМобильныйИсходный)
		И Не ПолучатьУведомления;
		
	Возврат ПолучатьУведомленияИзменен;

КонецФункции

&НаСервере
Процедура ДополнитьРеквизитамиВлияющимиНаСертификат(Приемник, Источник)
	
	Для каждого ТекущийРеквизит Из Источник Цикл
		
		Если ТекущийРеквизит.ТребуетПереизданияСертификата Тогда
			Приемник.Добавить(ТекущийРеквизит);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ИзмененныеРеквизитыСертификата(УчитыватьФлаг = Ложь)
	
	ВсеИзмененныеРеквизиты = Новый Массив;
	
	// Реквизиты организации
	ИзмененныеРеквизиты = ИзмененныеРеквизитыОрганизации(УчитыватьФлаг);
	ДополнитьРеквизитамиВлияющимиНаСертификат(ВсеИзмененныеРеквизиты, ИзмененныеРеквизиты);
		
	// Реквизиты владельца
	ИзмененныеРеквизиты = ИзмененныеРеквизитыВладельца(УчитыватьФлаг);
	ДополнитьРеквизитамиВлияющимиНаСертификат(ВсеИзмененныеРеквизиты, ИзмененныеРеквизиты);
	
	// Уведомления	
	ИзмененныеРеквизиты = ИзмененныеРеквизитыУведомлений(УчитыватьФлаг);
	ДополнитьРеквизитамиВлияющимиНаСертификат(ВсеИзмененныеРеквизиты, ИзмененныеРеквизиты);	
	
	// Криптография
	ИзмененныеРеквизиты = ИзмененныеНастройкиХраненияКлюча(УчитыватьФлаг);
	ДополнитьРеквизитамиВлияющимиНаСертификат(ВсеИзмененныеРеквизиты, ИзмененныеРеквизиты);
	
	// Сведения сертификата
	ИзмененныеРеквизиты = ИзмененныеРеквизитыСамогоСертификата(УчитыватьФлаг);
	ДополнитьРеквизитамиВлияющимиНаСертификат(ВсеИзмененныеРеквизиты, ИзмененныеРеквизиты);
	
	Возврат ВсеИзмененныеРеквизиты;
		
КонецФункции

&НаСервере
Функция ИзмененныеРеквизитыСамогоСертификата(УчитыватьФлаг = Ложь)
	
	УчитыватьРеквизитСертификата = ПереиздатьСертификат И УчитыватьФлаг ИЛИ НЕ УчитыватьФлаг; 
	
	ИзмененныеРеквизиты = Новый Массив;
	
	Изменился = УчитыватьРеквизитСертификата И СертификатДоступен И СертификатПросрочен(ЭтотОбъект);
		
	ДополнитьИзменившиесяРеквизиты(
		НСтр("ru = 'Срок действия';
			|en = 'Validity period'"), 
		Изменился,
		ИзмененныеРеквизиты,
		"",
		НачалоДня(СертификатДействителенПо),
		Рекомендовано);
		
	ДополнитьИзменившиесяРеквизиты(
		НСтр("ru = 'Доступность сертификата';
			|en = 'Certificate availability'"), 
		НЕ СертификатДоступен,
		ИзмененныеРеквизиты,
		НСтр("ru = 'Доступен';
			|en = 'Available to'"),
		НСтр("ru = 'Недоступен';
			|en = 'Disabled'"),
		Обязательно);
	
	Возврат ИзмененныеРеквизиты;
		
КонецФункции
	
&НаСервере
Функция ИзмененныеНаправления(УчитыватьФлаг = Ложь)
	
	УчитыватьРеквизит = ИзменитьСоставКонтролирующихОрганов И УчитыватьФлаг ИЛИ НЕ УчитыватьФлаг;
	ИзмененныеРеквизиты = Новый Массив;
	
	ДополнитьИзменившиесяРеквизиты(
		Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФНС,
		СдаватьВФНСИзменился И УчитыватьРеквизит,
		ИзмененныеРеквизиты,
		СдаватьВФНСИсходный,
		СдаватьВФНС);
		
	ДополнитьИзменившиесяРеквизиты(
		Перечисления.ПараметрыПодключенияК1СОтчетности.КодыФНС,
		КодыФНСИзменились И УчитыватьРеквизит,
		ИзмененныеРеквизиты,
		КодыФНСПрописьюИсходные,
		ИтоговыеДанныеГосОрганы_КодыФНС());
		
	ДополнитьИзменившиесяРеквизиты(
		Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВПФР,
		СдаватьВПФРИзменился И УчитыватьРеквизит,
		ИзмененныеРеквизиты,
		СдаватьВПФРИсходный,
		СдаватьВПФР);
		
	ДополнитьИзменившиесяРеквизиты(
		Перечисления.ПараметрыПодключенияК1СОтчетности.КодПФР,
		(СдаватьВПФРИсходный ИЛИ СдаватьВПФР) И КодПФРИзменился И УчитыватьРеквизит,
		ИзмененныеРеквизиты,
		КодПФРИсходный,
		КодПФР);
		
	ДополнитьИзменившиесяРеквизиты(
		Перечисления.ПараметрыПодключенияК1СОтчетности.РегНомерПФР,
		(СдаватьВПФРИсходный ИЛИ СдаватьВПФР) И РегНомерПФРИзменился И УчитыватьРеквизит,
		ИзмененныеРеквизиты,
		РегНомерПФРИсходный,
		РегНомерПФР);
		
	ДополнитьИзменившиесяРеквизиты(
		Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВРосстат,
		СдаватьВРосстатИзменился И УчитыватьРеквизит,
		ИзмененныеРеквизиты,
		СдаватьВРосстатИсходный,
		СдаватьВРосстат);
		
	ДополнитьИзменившиесяРеквизиты(
		Перечисления.ПараметрыПодключенияК1СОтчетности.КодРосстата,
		(СдаватьВРосстатИсходный ИЛИ СдаватьВРосстат) И КодыРосстатаИзменились И УчитыватьРеквизит,
		ИзмененныеРеквизиты,
		КодыРосстатПрописьюИсходные,
		ИтоговыеДанныеГосОрганы_КодыРосстата());
		
	ДополнитьИзменившиесяРеквизиты(
		Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФСРАР,
		ПодатьЗаявкуНаСертификатДляФСРАРИзменился И УчитыватьРеквизит,
		ИзмененныеРеквизиты,
		ПодатьЗаявкуНаСертификатДляФСРАРИсходный,
		ПодатьЗаявкуНаСертификатДляФСРАР);
		
	ДополнитьИзменившиесяРеквизиты(
		Перечисления.ПараметрыПодключенияК1СОтчетности.КодРегионаФСРАР,
		(ПодатьЗаявкуНаСертификатДляФСРАРИсходный ИЛИ ПодатьЗаявкуНаСертификатДляФСРАР) И КодРегионаФСРАРИзменился И УчитыватьРеквизит,
		ИзмененныеРеквизиты,
		КодРегионаФСРАРИсходный,
		КодРегионаФСРАР);
		
	ДополнитьИзменившиесяРеквизиты(
		Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФСС,
		СдаватьВФССИзменился И УчитыватьРеквизит,
		ИзмененныеРеквизиты,
		СдаватьВФССИсходный,
		СдаватьВФСС);
		
	ДополнитьИзменившиесяРеквизиты(
		Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФТС,
		ПодатьЗаявкуНаПодключениеФТСИзменился И УчитыватьРеквизит,
		ИзмененныеРеквизиты,
		ПодатьЗаявкуНаПодключениеФТСИсходный,
		ПодатьЗаявкуНаПодключениеФТС);
		
	ДополнитьИзменившиесяРеквизиты(
		Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВРПН,
		ПодатьЗаявкуНаПодключениеРПНИзменился И УчитыватьРеквизит,
		ИзмененныеРеквизиты,
		ПодатьЗаявкуНаПодключениеРПНИсходный,
		ПодатьЗаявкуНаПодключениеРПН);
		
	Возврат ИзмененныеРеквизиты;
		
КонецФункции

&НаСервере
Функция ИзмененныеНастройкиХраненияКлюча(УчитыватьФлаг = Ложь)
	
	ИзмененныеРеквизиты = Новый Массив;
	Если ИспользоватьСуществующий(ЭтотОбъект) Тогда
		Возврат ИзмененныеРеквизиты;
	КонецЕсли;
	
	УчитыватьРеквизитМестаХранения = ИзменитьМестоХранения И УчитыватьФлаг ИЛИ НЕ УчитыватьФлаг;
	
	Изменилось = ЭтоПереходВКоробку И УчитыватьРеквизитМестаХранения;
	
	ДополнитьИзменившиесяРеквизиты(
		Перечисления.ПараметрыПодключенияК1СОтчетности.ПереходВКоробку, 
		Изменилось,
		ИзмененныеРеквизиты,
		Неопределено,
		Изменилось,
		Требует);
		
	Изменилось = ЭтоПереходВОблако И УчитыватьРеквизитМестаХранения;
		
	ДополнитьИзменившиесяРеквизиты(
		Перечисления.ПараметрыПодключенияК1СОтчетности.ПереходВОблако, 
		Изменилось,
		ИзмененныеРеквизиты,
		Неопределено,
		Изменилось,
		Требует);
		
	Изменилось = ТипКриптопровайдераИзменился И НЕ ЭтоОблако(ЭтотОбъект) И УчитыватьРеквизитМестаХранения;
		
	ДополнитьИзменившиесяРеквизиты(
		Перечисления.ПараметрыПодключенияК1СОтчетности.ИзменениеКриптопровайдера, 
		Изменилось,
		ИзмененныеРеквизиты,
		Неопределено,
		Изменилось,
		Требует);
		
	Изменилось = ВключатьЛицензиюКриптоПроВСертификат И НЕ ЭтоОблако(ЭтотОбъект) И УчитыватьРеквизитМестаХранения;
		
	ДополнитьИзменившиесяРеквизиты(
		НСтр("ru = 'Лицензия КриптоПро CSP';
			|en = 'CryptoPro CSP license'"), 
		Изменилось,
		ИзмененныеРеквизиты,
		Неопределено,
		Изменилось,
		Требует);
		
	Изменилось = 
		СпособПодтвержденияКриптооперацийИзменился(ЭтотОбъект)
		И УчитыватьРеквизитМестаХранения;
	
	ДополнитьИзменившиесяРеквизиты(
		Перечисления.ПараметрыПодключенияК1СОтчетности.ПодтверждениеОперацийСКлючом, 
		Изменилось,
		ИзмененныеРеквизиты,
		ПредставлениеСпособаПодтвержденияКриптоопераций(СпособПодтвержденияКриптооперацийИсходный),
		ПредставлениеСпособаПодтвержденияКриптоопераций(СпособПодтвержденияКриптоопераций));
		
	Возврат ИзмененныеРеквизиты;
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СпособПодтвержденияКриптооперацийИзменился(Форма)
	
	Возврат ЭтоОблако(Форма) И Форма.СпособПодтвержденияКриптооперацийИсходный <> Форма.СпособПодтвержденияКриптоопераций;
	
КонецФункции

&НаСервере
Функция ИзмененныеРеквизитыВладельца(
		УчитыватьФлаг_ВладелецСертификата = Ложь,
		УчитыватьФлаг_Сертификат = Ложь)
	
	УчитыватьРеквизитВладельца = 
		ИзменитьВладельцаСертификата И УчитыватьФлаг_ВладелецСертификата 
		ИЛИ НЕ УчитыватьФлаг_ВладелецСертификата;
		
	УчитыватьРеквизитСертификата = 
		ПереиздатьСертификат И УчитыватьФлаг_Сертификат;
		
	// Паспортные данные
	ИзмененныеРеквизиты = ИзмененныеРеквизитыПаспорта(
		УчитыватьФлаг_ВладелецСертификата, 
		УчитыватьФлаг_Сертификат, 
		Истина);
		
	// СНИЛС
	ВладелецЭЦПСНИЛСИзменился = Форматировать(ВладелецЭЦПСНИЛС) <> Форматировать(ВладелецЭЦПСНИЛСИсходный);
	Изменилось = ВладелецЭЦПСНИЛСИзменился И (УчитыватьРеквизитВладельца ИЛИ УчитыватьРеквизитСертификата);
	
	ДополнитьИзменившиесяРеквизиты(
		Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС, 
		Изменилось,
		ИзмененныеРеквизиты,
		ВладелецЭЦПСНИЛСИсходный,
		ВладелецЭЦПСНИЛС,
		Требует,
		Требует,
		Препятствует);
		
	// ИНН
	Если ЭтоЮридическоеЛицо Тогда

		ВладелецЭЦПИННИзменился = 
			Форматировать(ВладелецЭЦПИНН) <> Форматировать(ВладелецЭЦПИННИсходный)
			И ЗначениеЗаполнено(Форматировать(ВладелецЭЦПИННИсходный));

		Изменилось = ВладелецЭЦПИННИзменился И (УчитыватьРеквизитВладельца ИЛИ УчитыватьРеквизитСертификата);

		ДополнитьИзменившиесяРеквизиты(
			Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПИНН, 
			Изменилось,
			ИзмененныеРеквизиты,
			ВладелецЭЦПИННИсходный,
			ВладелецЭЦПИНН,
			Требует,
			Требует,
			Препятствует);

	КонецЕсли;

	// Подразделение
	ВладелецЭЦППодразделениеИзменилось = Форматировать(ВладелецЭЦППодразделение) <> Форматировать(ВладелецЭЦППодразделениеИсходное);
	Изменилось = ВладелецЭЦППодразделениеИзменилось И УчитыватьРеквизитВладельца;
	
	ДополнитьИзменившиесяРеквизиты(
		Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦППодразделение, 
		Изменилось,
		ИзмененныеРеквизиты,
		ВладелецЭЦППодразделениеИсходное,
		ВладелецЭЦППодразделение);
		
	// Должность
	ВладелецЭЦПДолжностьИзменилась = Форматировать(ВладелецЭЦПДолжность) <> Форматировать(ВладелецЭЦПДолжностьИсходная);
	Изменилось = ВладелецЭЦПДолжностьИзменилась И УчитыватьРеквизитВладельца;
	
	ДополнитьИзменившиесяРеквизиты(
		Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДолжность, 
		Изменилось,
		ИзмененныеРеквизиты,
		ВладелецЭЦПДолжностьИсходная,
		ВладелецЭЦПДолжность);
		
	Возврат ИзмененныеРеквизиты;
		
КонецФункции

// Вызывается еще и из ОбработкаЗаявленийАбонентаКлиентСервер !!!
//
&НаСервере
Функция ИзмененныеРеквизитыПаспорта(УчитыватьФлаг_ВладелецСертификата, УчитыватьФлаг_Сертификат, ДобавитьФИО) Экспорт
	
	ИзмененныеРеквизиты = Новый Массив;
	
	Если ДобавитьФИО Тогда
		ДобавитьИзмененныеЧастиФИО(ИзмененныеРеквизиты, УчитыватьФлаг_ВладелецСертификата, УчитыватьФлаг_Сертификат);
	КонецЕсли;
	
	УчитыватьРеквизитВладельца = 
		ИзменитьВладельцаСертификата И УчитыватьФлаг_ВладелецСертификата 
		ИЛИ НЕ УчитыватьФлаг_ВладелецСертификата;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ВладелецЭЦПВидДокументаКод = КонтекстЭДОСервер.ПолучитьКодВидаДокументаФизическогоЛица(ВладелецЭЦПВидДокумента);
	
	Изменилось = Форматировать(ВладелецЭЦПВидДокументаКодИсходный) <> Форматировать(ВладелецЭЦПВидДокументаКод) И УчитыватьРеквизитВладельца;
	
	ДополнитьИзменившиесяРеквизиты(
		Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПВидДокумента, 
		Изменилось,
		ИзмененныеРеквизиты,
		ВладелецЭЦПВидДокументаКодИсходный,
		ВладелецЭЦПВидДокументаКод);
		
	Изменилось = Форматировать(ВладелецЭЦПСерияДокументаИсходный) <> Форматировать(ВладелецЭЦПСерияДокумента) И УчитыватьРеквизитВладельца;
		
	ДополнитьИзменившиесяРеквизиты(
		Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСерияДокумента, 
		Изменилось,
		ИзмененныеРеквизиты,
		ВладелецЭЦПСерияДокументаИсходный,
		ВладелецЭЦПСерияДокумента);
		
	Изменилось = Форматировать(ВладелецЭЦПНомерДокументаИсходный) <> Форматировать(ВладелецЭЦПНомерДокумента) И УчитыватьРеквизитВладельца;
		
	ДополнитьИзменившиесяРеквизиты(
		Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПНомерДокумента, 
		Изменилось,
		ИзмененныеРеквизиты,
		ВладелецЭЦПНомерДокументаИсходный,
		ВладелецЭЦПНомерДокумента);
		
	Изменилось = ВладелецЭЦПДатаВыдачиДокументаИсходный <> ВладелецЭЦПДатаВыдачиДокумента И УчитыватьРеквизитВладельца;
		
	ДополнитьИзменившиесяРеквизиты(
		Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДатаВыдачиДокумента, 
		Изменилось,
		ИзмененныеРеквизиты,
		ВладелецЭЦПДатаВыдачиДокументаИсходный,
		ВладелецЭЦПДатаВыдачиДокумента);
		
	Изменилось = Форматировать(ВладелецЭЦПКемВыданДокументИсходный) <> Форматировать(ВладелецЭЦПКемВыданДокумент) И УчитыватьРеквизитВладельца;
		
	ДополнитьИзменившиесяРеквизиты(
		Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПКемВыданДокумент, 
		Изменилось,
		ИзмененныеРеквизиты,
		ВладелецЭЦПКемВыданДокументИсходный,
		ВладелецЭЦПКемВыданДокумент);
		
	Изменилось = Форматировать(ВладелецЭЦПКодПодразделенияИсходный) <> Форматировать(ВладелецЭЦПКодПодразделения) И УчитыватьРеквизитВладельца;
		
	ДополнитьИзменившиесяРеквизиты(
		Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПКодПодразделения, 
		Изменилось,
		ИзмененныеРеквизиты,
		ВладелецЭЦПКодПодразделенияИсходный,
		ВладелецЭЦПКодПодразделения);
		
	Возврат ИзмененныеРеквизиты;
		
КонецФункции

&НаСервере
Функция ИзменилосьФИО()
	
	ИзмененныеРеквизиты = Новый Массив;
	ДобавитьИзмененныеЧастиФИО(ИзмененныеРеквизиты, Ложь, Ложь);
	Изменилось =  ИзмененныеРеквизиты.Количество() > 0;
	
	Возврат Изменилось;
	
КонецФункции

&НаСервере
Процедура ДобавитьИзмененныеЧастиФИО(ИзмененныеРеквизиты, УчитыватьФлаг_ВладелецСертификата, УчитыватьФлаг_Сертификат) Экспорт
	
	УчитыватьРеквизитВладельца = 
		ИзменитьВладельцаСертификата И УчитыватьФлаг_ВладелецСертификата 
		ИЛИ НЕ УчитыватьФлаг_ВладелецСертификата;
		
	УчитыватьРеквизитСертификата = 
		ПереиздатьСертификат И УчитыватьФлаг_Сертификат;
	
	Изменилось = 
		Форматировать(ВладелецЭЦПФамилияИсходный) <> Форматировать(ВладелецЭЦПФамилия) 
		И (УчитыватьРеквизитВладельца ИЛИ УчитыватьРеквизитСертификата);
		
	ДополнитьИзменившиесяРеквизиты(
		НСтр("ru = 'Фамилия';
			|en = 'Last name'"),
		Изменилось,
		ИзмененныеРеквизиты,
		ВладелецЭЦПФамилияИсходный,
		ВладелецЭЦПФамилия,
		Требует,
		Требует,
		Препятствует);
		
	Изменилось = 
		Форматировать(ВладелецЭЦПИмяИсходный) <> Форматировать(ВладелецЭЦПИмя) 
		И (УчитыватьРеквизитВладельца ИЛИ УчитыватьРеквизитСертификата);
		
	ДополнитьИзменившиесяРеквизиты(
		НСтр("ru = 'Имя';
			|en = 'First name'"),
		Изменилось,
		ИзмененныеРеквизиты,
		ВладелецЭЦПИмяИсходный,
		ВладелецЭЦПИмя,
		Требует,
		Требует,
		Препятствует);
		
	Изменилось = 
		Форматировать(ВладелецЭЦПОтчествоИсходный) <> Форматировать(ВладелецЭЦПОтчество) 
		И (УчитыватьРеквизитВладельца ИЛИ УчитыватьРеквизитСертификата);
		
	ДополнитьИзменившиесяРеквизиты(
		НСтр("ru = 'Отчество';
			|en = 'Middle name'"),
		Изменилось,
		ИзмененныеРеквизиты,
		ВладелецЭЦПОтчествоИсходный,
		ВладелецЭЦПОтчество,
		Требует,
		Требует,
		Препятствует);
		
КонецПроцедуры
	
&НаСервере
Функция НеобходимостьПереизданияСертификата()
	
	ИзмененныеРеквизиты = ИзмененныеРеквизитыСертификата(Истина);
	
	МаксимальнаяНеобходимость = НеТребуется;
	Для каждого ИзмененныйРеквизиты Из ИзмененныеРеквизиты Цикл
		
		МаксимальнаяНеобходимость = Макс(
			ИзмененныйРеквизиты.ТребуетПереизданияСертификата, 
			МаксимальнаяНеобходимость);
	КонецЦикла;
	
	Возврат МаксимальнаяНеобходимость;

КонецФункции

&НаСервере
Процедура СравнитьНаправленияИКодыСдачиОтчетностиСИсходными()
	
	// ФНС
	СдаватьВФНСИзменился = СдаватьВФНС <> СдаватьВФНСИсходный;
	КодыФНСИзменились = КодыИзменились("ПолучателиФНС", "ПолучателиФНСИсходные");
	
	// ПФР
	СдаватьВПФРИзменился = СдаватьВПФР <> СдаватьВПФРИсходный;
	КодПФРИзменился = Форматировать(КодПФР) <> Форматировать(КодПФРИсходный);
	РегНомерПФРИзменился = Форматировать(РегНомерПФР) <> Форматировать(РегНомерПФРИсходный); 
	
	// ФСС
	СдаватьВФССИзменился = СдаватьВФСС <> СдаватьВФССИсходный;
	
	// Росстат
	СдаватьВРосстатИзменился = СдаватьВРосстат <> СдаватьВРосстатИсходный;
	КодыРосстатаИзменились = КодыИзменились("ПолучателиФСГС", "ПолучателиФСГСИсходные");
	
	// ФСРАР
	ПодатьЗаявкуНаСертификатДляФСРАРИзменился = ПодатьЗаявкуНаСертификатДляФСРАР <> ПодатьЗаявкуНаСертификатДляФСРАРИсходный;
	КодРегионаФСРАРИзменился = Форматировать(КодРегионаФСРАР) <> Форматировать(КодРегионаФСРАРИсходный);
	
	// РПН
	ПодатьЗаявкуНаПодключениеРПНИзменился = ПодатьЗаявкуНаПодключениеРПН <> ПодатьЗаявкуНаПодключениеРПНИсходный;
	
	// ФТС
	ПодатьЗаявкуНаПодключениеФТСИзменился = ПодатьЗаявкуНаПодключениеФТС <> ПодатьЗаявкуНаПодключениеФТСИсходный;
	
КонецПроцедуры

&НаСервере
Функция КодыИзменились(ИмяТаблицыНовой, ИмяТаблицыИсходной)
	
	Хэш         = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(РеквизитФормыВЗначение(ИмяТаблицыНовой));
	ХэшИсходный = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(РеквизитФормыВЗначение(ИмяТаблицыИсходной));
	
	КодыИзменились = Хэш <> ХэшИсходный;
	
	Возврат КодыИзменились;
	
КонецФункции

&НаСервере
Процедура СравнитьРеквизитыОрганизацииСИсходными()
	
	// Изменились ли реквизиты подключения к 1С-Отчетности ?
	//
	// Краткое наименование
	КраткоеНаименованиеИзменилось = Форматировать(КраткоеНаименование) <> Форматировать(КраткоеНаименованиеИсходное);
	
	// КПП
	КППИзменился = Форматировать(КПП) <> Форматировать(КППИсходный);
	
	// ОГРН
	ОГРНИзменился = Форматировать(ОГРН) <> Форматировать(ОГРНИсходный)
		И НЕ ЭтоИностраннаяОрганизация; 
	
	// Телефон основной
	ТелефонОсновнойИзменился = ФорматироватьТелефон(ТелефонОсновной) <> ФорматироватьТелефон(ТелефонОсновнойИсходный);
	
	// Части адреса
	Если СравниватьАдрес(ЭтотОбъект) Тогда
		
		ОбластьИзменилась = НЕ ДокументооборотСКОКлиентСервер.ЗначенияСовпадают(
			Форматировать(Область), 
			Форматировать(ОбластьИсходная));
			
		ГородИзменился = НЕ ДокументооборотСКОКлиентСервер.ЗначенияСовпадают(
			Форматировать(Город),
			Форматировать(ГородИсходный));
		
		УлицаИзменилась = Форматировать(Улица) <> Форматировать(УлицаИсходная);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СравниватьАдрес(Форма)
	
	ЭтоСУЦ = Форма.ЭтоСертификатДругогоУЦИсходный
		ИЛИ Форма.ПереиздатьСертификат И Форма.ЭтоСертификатДругогоУЦ;
	
	Сравнивать = НЕ ЭтоСУЦ; // В СУЦ поля могут быть заполнены по-другому
		
	Возврат Сравнивать;
	
КонецФункции

&НаСервере
Функция ИзмененныеРеквизитыОрганизации(
		УчитыватьФлаг_РеквизитыОрганизации = Ложь, 
		УчитыватьФлаг_Сертификат = Ложь)
	
	ИзмененныеРеквизиты = Новый Массив;
	
	УчитыватьФлагОрганизации = 
		ИзменитьРеквизитыПодключенияК1СОтчетности И УчитыватьФлаг_РеквизитыОрганизации
		ИЛИ НЕ УчитыватьФлаг_РеквизитыОрганизации;
	
	УчитыватьРеквизитСертификата = 
		ПереиздатьСертификат И УчитыватьФлаг_Сертификат;
	
	// Краткое наименование
	ДополнитьИзменившиесяРеквизиты(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КраткоеНаименование"), 
		КраткоеНаименованиеИзменилось И (УчитыватьФлагОрганизации ИЛИ УчитыватьРеквизитСертификата),
		ИзмененныеРеквизиты,
		КраткоеНаименованиеИсходное,
		КраткоеНаименование,
		Рекомендовано);
	
	// КПП
	ДополнитьИзменившиесяРеквизиты(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КПП"), 
		КППИзменился И УчитыватьФлагОрганизации,
		ИзмененныеРеквизиты,
		КППИсходный,
		КПП);

	// ОГРН
	Если НЕ ЭтоИностраннаяОрганизация Тогда
		
		ДополнитьИзменившиесяРеквизиты(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ОГРН"), 
			ОГРНИзменился И (УчитыватьФлагОрганизации ИЛИ УчитыватьРеквизитСертификата),
			ИзмененныеРеквизиты,
			ОГРНИсходный,
			ОГРН,
			Требует,
			Требует,
			Препятствует);
			
	КонецЕсли;

	// Область
	ДополнитьИзменившиесяРеквизиты(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.Область"), 
		ОбластьИзменилась И (УчитыватьФлагОрганизации ИЛИ УчитыватьРеквизитСертификата),
		ИзмененныеРеквизиты,
		ОбластьИсходная,
		Область,
		Требует,
		Требует,
		Препятствует);
		
	// Город
	ДополнитьИзменившиесяРеквизиты(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.Город"), 
		ГородИзменился И УчитыватьФлагОрганизации,
		ИзмененныеРеквизиты,
		ГородИсходный,
		Город,
		Требует);
		
	// Улица
	ДополнитьИзменившиесяРеквизиты(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.Улица"), 
		УлицаИзменилась И УчитыватьФлагОрганизации,
		ИзмененныеРеквизиты,
		УлицаИсходная,
		Улица,
		Требует);

	// Телефон основной
	ДополнитьИзменившиесяРеквизиты(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонОсновной"), 
		ТелефонОсновнойИзменился И УчитыватьФлагОрганизации,
		ИзмененныеРеквизиты,
		ТелефонОсновнойИсходный,
		ТелефонОсновной);
	
	Возврат ИзмененныеРеквизиты;
		
КонецФункции

&НаСервере
Процедура ОпределитьЯвляетсяЛиСертификатСУЦом() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ЭтоСертификатДругогоУЦИсходный = КонтекстЭДОСервер.ЭтоСертификатСУЦ(СвойстваСертификата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСрокДействияСертификата()
	
	Если ЭтоУчетнаяЗаписьВМоделиСервиса Тогда
		
		КонтекстЭДОСервер    = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		ОтпечатокСертификата = УчетнаяЗапись.СертификатРуководителя;
		СвойстваСертификата  = КонтекстЭДОСервер.ПолучитьСвойстваСертификатаПоОтпечаткуНаСервере(ОтпечатокСертификата, "MY");
		
	КонецЕсли;
	
	СертификатДействителенПо = Неопределено;
	
	Если СвойстваСертификата <> Неопределено Тогда
		
		СертификатДействителенПо = СвойстваСертификата.ДействителенПо;
		СекундВОдномДне = 24 * 60 * 60;
		// Прибавляем один день, так как в день окончания сертификат еще действует.
		СертификатДействителенПо = СертификатДействителенПо + СекундВОдномДне;
		
		КоличествоДнейДоОкончанияСертификата = (НачалоДня(СертификатДействителенПо) - НачалоДня(ТекущаяДатаСервер))/СекундВОдномДне;
		
		ПродлитьСертификатИсходный = (КоличествоДнейДоОкончанияСертификата <= ТридцатьДней);
		
	КонецЕсли;
	
	СертификатДоступен = ЗначениеЗаполнено(СертификатДействителенПо);
	
КонецПроцедуры

#КонецОбласти

#Область КопированиеИзИсходногоЗаявления

&НаСервере
Процедура СкопироватьРеквизитыИзИсходногоЗаявления_Криптография()
	
	СкопироватьРеквизитыИзИсходногоЗаявления_МестоХранения();
	СкопироватьРеквизитыИзИсходногоЗаявления_СертификатИСпособПолученияСертификата();
	
	// Реквизит ВключитьЛицензиюКриптоПро не берем из документа, 
	// так как он расчитывается по особому алгоритму.

КонецПроцедуры

&НаСервере
Процедура СкопироватьРеквизитыИзИсходногоЗаявления_СертификатИСпособПолученияСертификата()
	
	СпособПолученияСертификата = Реквизит.СпособПолученияСертификата;
	СкопироватьВключаемыйСертификатИзИсходногоЗаявления();
	
	// Не определяем место хранения, т.к. мы его скопировали из исходного заявления
	ОпределятьМестоХранения = Ложь;
	ПриИзмененииСпособаПолученияСертификата(ОпределятьМестоХранения);
	
	СкопироватьРеквизитыИзИсходногоЗаявления_ЭПВОблаке();

КонецПроцедуры

&НаСервере
Процедура СкопироватьРеквизитыИзИсходногоЗаявления_ЭПВОблаке()
	
	ЭтаУчетнаяЗаписьБылаСделанаДляОблака = УчетнаяЗапись.ЭлектроннаяПодписьВМоделиСервиса;
	
	Если ИспользоватьСуществующий(ЭтотОбъект) И ВключаемыйСертификатОблачный Тогда
		
		СпособПодтвержденияКриптоопераций = Реквизит.СпособПодтвержденияКриптоопераций;
		
		// Инициализировать не нужно, т.к. взяли из исходного заявления
		ИнициализироватьТокен = Ложь;
		ИнициализацияЭПВОблакеСервер(ИнициализироватьТокен, ВключаемыйСертификат);
		
	ИначеЕсли Реквизит.ЭлектроннаяПодписьВМоделиСервиса Тогда
		
 		СпособПодтвержденияКриптоопераций = Реквизит.СпособПодтвержденияКриптоопераций;
		ЭтоПереходВОблако = ЭтотПараметрИзменился(
			Реквизит.ИзменившиесяРеквизитыВторичногоЗаявления, 
			Перечисления.ПараметрыПодключенияК1СОтчетности.ПереходВОблако);
		
		Если ЭтоПереходВОблако Тогда 
			
			ИнициализироватьПроверкиДляОблака(ЭтотОбъект);
		
			ПроверкаТелефонДляПаролей.ИсходноеЗначение = Реквизит.ТелефонМобильныйДляАвторизации;
			ПроверкаТелефонДляПаролей.ЗначениеВведено = ЗначениеЗаполнено(ПолучитьПредставлениеТелефона(ПроверкаТелефонДляПаролей.ИсходноеЗначение));
			ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено = ПроверкаТелефонДляПаролей.ЗначениеВведено;
			ПроверкаТелефонДляПаролей.ИдентификаторПроверки = Реквизит.ИдентификаторПроверкиТелефонаДляПаролей;
			ТелефонМобильныйДляПаролей = Реквизит.ТелефонМобильныйДляАвторизации;
			ТелефонМобильныйДляПаролейИзменился = Истина;
			
			ПроверкаЭлектроннаяПочтаДляПаролей.ИсходноеЗначение = Реквизит.ЭлектроннаяПочта;
			ПроверкаЭлектроннаяПочтаДляПаролей.ЗначениеВведено = ЗначениеЗаполнено(ПроверкаЭлектроннаяПочтаДляПаролей.ИсходноеЗначение);
			ПроверкаЭлектроннаяПочтаДляПаролей.ПодтверждениеВыполнено = ПроверкаЭлектроннаяПочтаДляПаролей.ЗначениеВведено;
			ПроверкаЭлектроннаяПочтаДляПаролей.ИдентификаторПроверки = Реквизит.ИдентификаторПроверкиЭлектроннойПочтыДляПаролей;
			ЭлектроннаяПочтаДляПаролей = Реквизит.ЭлектроннаяПочта;
			ЭлектроннаяПочтаДляПаролейИзменилась = Истина;
			
		Иначе
			
			// Инициализировать не нужно, т.к. взяли из исходного заявления
			ИнициализироватьТокен = Ложь;
			ИнициализацияЭПВОблакеСервер(ИнициализироватьТокен);
			
			ПроверкаТелефонДляПаролей.ИдентификаторПроверки = Реквизит.ИдентификаторПроверкиТелефонаДляПаролей;
			ТелефонМобильныйДляПаролей = Реквизит.ТелефонМобильныйДляАвторизации;
			ТелефонМобильныйДляПаролейИзменился = ПроверкаТелефонДляПаролей.ИсходноеЗначение <> ТелефонМобильныйДляПаролей;
			
			ПроверкаЭлектроннаяПочтаДляПаролей.ИдентификаторПроверки = Реквизит.ИдентификаторПроверкиЭлектроннойПочтыДляПаролей;
			ЭлектроннаяПочтаДляПаролей = Реквизит.ЭлектроннаяПочта;
			ЭлектроннаяПочтаДляПаролейИзменилась = ПроверкаЭлектроннаяПочтаДляПаролей.ИсходноеЗначение <> ЭлектроннаяПочтаДляПаролей;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СкопироватьРеквизитыИзИсходногоЗаявления_МестоХранения()
	
	Если Реквизит.ЭлектроннаяПодписьВМоделиСервиса Тогда
		ВыбранноеМестоХраненияКлюча = Перечисления.МодельРаботыСКлючами.ВМоделиСервиса;
	Иначе
		ВыбранноеМестоХраненияКлюча = Реквизит.ТипКриптопровайдера;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьРеквизитыИзИсходногоЗаявления_Организация()
	
	ТелефонОсновной	= Реквизит.ТелефонОсновной;
	КодРегиона		= Реквизит.КодРегионаФСРАР;
	КодРегионаФСРАР = Реквизит.КодРегионаФСРАР;
	ОГРН			= Реквизит.ОГРН;
	
	ЭтоБюджетополучатель      = Реквизит.ЭтоБюджетополучатель;
	ЭтоНотариусАдвокатИлиГКФХ = Реквизит.ЭтоНотариусАдвокатИлиГКФХ;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьРеквизитыИзИсходногоЗаявления_Владелец()
	
	ОбработкаЗаявленийАбонента.СкопироватьРеквизитыВладельцаИзИсходногоЗаявления(ЭтотОбъект, Реквизит);
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьРеквизитыИзИсходногоЗаявления_ГосОрганы()
	
	Если ЭтоОткрытиеЗаявления Тогда 
		
		ПодатьЗаявкуНаСертификатДляФСРАР= Реквизит.ПодатьЗаявкуНаСертификатДляФСРАР;
		ПодатьЗаявкуНаПодключениеРПН	= Реквизит.ПодатьЗаявкуНаПодключениеРПН;
		ПодатьЗаявкуНаПодключениеФТС	= Реквизит.ПодатьЗаявкуНаПодключениеФТС;
		
		КодРегионаФСРАР = Реквизит.КодРегионаФСРАР;
		КодРегиона		= Реквизит.КодРегионаФСРАР;
	
		СкопироватьНаправленияИзИсходногоЗаявления();
		
	Иначе
		
		// При копировании все направления делаем свежими
		СделатьНаправленияСдачиОтчетностиРавнымиИсходным();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьВключаемыйСертификатИзИсходногоЗаявления()
	
	Если ИспользоватьСуществующий(Реквизит) Тогда
		
		ВключаемыйСертификат         = Реквизит.Сертификат.Получить();
		ВключаемыйСертификатОблачный = Реквизит.ЭлектроннаяПодписьВМоделиСервиса;
		ЭтоСертификатДругогоУЦ       = Реквизит.ЭтоСертификатДругогоУЦ;
		
	ИначеЕсли ЗначениеЗаполнено(НовыйСертификат) Тогда
		
		// При открытии из формы предупреждения об изменении реквизитов сертификата будет заполнен альтернативный сертификат
		СпособПолученияСертификата = Перечисления.СпособПолученияСертификата.ИспользоватьСуществующий;
		
		Если ЗначениеЗаполнено(НовыйСертификат.НовыйСертификат) Тогда
			
			ВключаемыйСертификат = НовыйСертификат.НовыйСертификат;
			Результат = МенеджерСервисаКриптографии.ПоискСертификатаПоОтпечаткуИлиСерийномуНомеру(
				НовыйСертификат.НовыйСертификат.Отпечаток,
				, 
				Ложь);
				
			Если Результат.Выполнено И Результат.Сертификаты.Количество() > 0 Тогда
				ВключаемыйСертификатОблачный = Истина;
				ВключаемыйСертификат = Неопределено;
			Иначе
				ВключаемыйСертификатОблачный = Ложь;
			Конецесли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, Реквизит)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
 	Возврат КонтекстЭДОСервер.ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, Реквизит);
	
КонецФункции

&НаСервере
Процедура СкопироватьФлажкиИзИсходногоЗаявления()
	
	СкопироватьФлажкиИзИсходногоЗаявления_ВосстановитьФлаги();
	СкопироватьФлажкиИзИсходногоЗаявления_ВосстановитьИзмененияИзИзмененныхРеквизитов();
	СкопироватьФлажкиИзИсходногоЗаявления_ПроверитьФлагиСТремяСостояниями();

КОнецПроцедуры

&НаСервере
Процедура СкопироватьФлажкиИзИсходногоЗаявления_ПроверитьФлагиСТремяСостояниями()
	
	Если ИзменитьНастройкиУведомлений = Рекомендовано Тогда

		// Проверяем, возможно требуется значение Требует 
		ПроверитьНеобходимостьУстановкиГалки_ИзменитьНастройкиУведомлений();
		
		Если ИзменитьНастройкиУведомлений = НеТребуется Тогда
			ИзменитьНастройкиУведомлений = Рекомендовано;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПереиздатьСертификат = Рекомендовано Тогда

		// Проверяем, возможно требуется значение Требует
		ПроверитьНеобходимостьУстановкиГалки_ПереиздатьСертификат();
		
		Если ПереиздатьСертификат = НеТребуется Тогда
			ПереиздатьСертификат = Рекомендовано;
		КонецЕсли;
	КонецЕсли;
	
КОнецПроцедуры

&НаСервере
Процедура СкопироватьФлажкиИзИсходногоЗаявления_ВосстановитьИзмененияИзИзмененныхРеквизитов()
	
	ПараметрыПодключения = Перечисления.ПараметрыПодключенияК1СОтчетности;
	
	ИзменившиесяРеквизиты = Реквизит.ИзменившиесяРеквизитыВторичногоЗаявления;
	
 	ИзменитьРеквизитыПодключенияК1СОтчетности = 
		ИзменитьРеквизитыПодключенияК1СОтчетности 
		ИЛИ БылиИзменененыРеквизитыПодключенияК1СОтчетности();
		
	ИзменитьСоставКонтролирующихОрганов = 
		ИзменитьСоставКонтролирующихОрганов 
		ИЛИ БылИзмененСоставКонтролирующихОрганов(ИзменившиесяРеквизиты);
		
	ИзменитьВладельцаСертификата = ИзменитьВладельцаСертификата 
		ИЛИ ЭтотПараметрИзменился(ИзменившиесяРеквизиты, ПараметрыПодключения.ВладелецЭЦП);
		
	ПродлитьЛицензиюНа1СОтчетность = ПродлитьЛицензиюНа1СОтчетность 
		ИЛИ ЭтотПараметрИзменился(ИзменившиесяРеквизиты, ПараметрыПодключения.ПродлениеЛицензии);
		
	ПереиздатьСертификат = ПереиздатьСертификат 
		ИЛИ ?(ЭтотПараметрИзменился(ИзменившиесяРеквизиты, ПараметрыПодключения.ПереизданиеСертификата), Требует, НеТребуется);
		
	ЭтоПереходВКоробку = ЭтоПереходВКоробку 
		ИЛИ ЭтотПараметрИзменился(ИзменившиесяРеквизиты, ПараметрыПодключения.ПереходВКоробку);
		
	ЭтоПереходВОблако = ЭтоПереходВОблако 
		ИЛИ ЭтотПараметрИзменился(ИзменившиесяРеквизиты, ПараметрыПодключения.ПереходВОблако);
		
	ПодтверждениеОперацийСКлючомИзменилось = ЭтотПараметрИзменился(ИзменившиесяРеквизиты, ПараметрыПодключения.ПодтверждениеОперацийСКлючом);
		
	ИзменитьМестоХранения = 
		ИзменитьМестоХранения 
		ИЛИ ЭтоПереходВКоробку 
		ИЛИ ЭтоПереходВОблако 
		ИЛИ ПодтверждениеОперацийСКлючомИзменилось;
		
КОнецПроцедуры

&НаСервере
Процедура СкопироватьФлажкиИзИсходногоЗаявления_ВосстановитьФлаги()
	
	// Очистка
	Значения = Метаданные.Перечисления.ФлагиЗаявленияНаИзменение.ЗначенияПеречисления;
	Для каждого Значение Из Значения Цикл
		Имя = Значение.Имя;
		ЭтотОбъект[Имя] = Ложь;
	КонецЦикла;
	
	// Восстановление
	Для каждого Строка Из Реквизит.ФлагиЗаявленияНаИзменение Цикл
		Имя = ОбщегоНазначения.ИмяЗначенияПеречисления(Строка.Флаг);
		ЭтотОбъект[Имя] = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьФлаг(НовыйДокументЗаявление, Флаг)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.СохранитьФлаг(НовыйДокументЗаявление, Флаг.Имя);
	
КонецПроцедуры

&НаСервере
Функция БылиИзменененыРеквизитыПодключенияК1СОтчетности() Экспорт
	
	ТабличнаяЧасть = Реквизит.ИзменившиесяРеквизитыВторичногоЗаявления;
	
	Возврат ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.КраткоеНаименование)
		ИЛИ ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.КПП)
		ИЛИ ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.ОГРН)
		ИЛИ ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочта)
		ИЛИ ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.ТелефонОсновной);
	
КонецФункции

&НаСервере
Функция БылИзмененСоставКонтролирующихОрганов(ТабличнаяЧасть) Экспорт
	
	СдаватьВФНСИзменился 		= ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФНС);
	КодыФНСИзменились 			= ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.КодыФНС);
	
	СдаватьВПФРИзменился 		= ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВПФР);
	КодПФРИзменился 			= ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.КодПФР); 
	РегНомерПФРИзменился 		= ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.РегНомерПФР);
	
	СдаватьВРосстатИзменился 	= ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВРосстат);
	КодРосстатаИзменился		= ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.КодРосстата); 
	
	СдаватьВФСРАРИзменился 		= ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФСРАР);
	КодРегионаФСРАРИзменился 	= ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.КодРегионаФСРАР);
	
	СдаватьВРПНИзменился 		= ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВРПН);
	СдаватьВФТСИзменился 		= ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФТС);
	СдаватьВФССИзменился 		= ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФСС);
	
	Возврат 
		СдаватьВФНСИзменился ИЛИ КодыФНСИзменились 
		ИЛИ СдаватьВПФРИзменился ИЛИ КодПФРИзменился ИЛИ РегНомерПФРИзменился
		ИЛИ СдаватьВРосстатИзменился ИЛИ КодРосстатаИзменился 
		ИЛИ СдаватьВФССИзменился 
		ИЛИ СдаватьВФСРАРИзменился ИЛИ КодРегионаФСРАРИзменился
		ИЛИ СдаватьВРПНИзменился ИЛИ СдаватьВФТСИзменился;
	
КонецФункции

&НаСервере
Процедура СкопироватьИдентификаторИзИсходногоЗаявления()
	
	Если ЭтоОткрытиеЗаявления Тогда
		ЗначениеВРеквизитФормы(Реквизит.ПолучитьОбъект(), "ДокументЗаявление");
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура СкопироватьНаправленияИзИсходногоЗаявления()

	Для Каждого СтрокаНаправления из Реквизит.Получатели цикл 
		
		Если СтрокаНаправления.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС") Тогда
			СдаватьВФНС = Истина;
			НоваяСтрокаНаправления = ПолучателиФНС.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя	= СтрокаНаправления.ТипПолучателя;
			НоваяСтрокаНаправления.КодПолучателя	= СтрокаНаправления.КодПолучателя;
			НоваяСтрокаНаправления.КПП				= СтрокаНаправления.КПП;
		ИначеЕсли СтрокаНаправления.ТипПолучателя	= ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР") Тогда
			СдаватьВПФР = Истина;
			КодПФР = СтрокаНаправления.КодПолучателя;
		ИначеЕсли СтрокаНаправления.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС") Тогда
			СдаватьВФСС = Истина;	
		ИначеЕсли СтрокаНаправления.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС") Тогда	
			
			СдаватьВРосстат = Истина;
			
			НоваяСтрокаНаправления = ПолучателиФСГС.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя	= СтрокаНаправления.ТипПолучателя;
			НоваяСтрокаНаправления.КодПолучателя	= СтрокаНаправления.КодПолучателя;
			
		ИначеЕсли СтрокаНаправления.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.РПН") Тогда
			ПодатьЗаявкуНаПодключениеРПН = Истина;
		ИначеЕсли СтрокаНаправления.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСРАР") Тогда
			ПодатьЗаявкуНаСертификатДляФСРАР = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область  УстановитьГалку

&НаКлиенте
Процедура ПриИзмененииНастроекУведомленийНаСервере()
	
	Необходимо = НеобходимоИзменитьНастрокиУведомлений();
	
	Если Необходимо Тогда
		
		ИзменитьНастройкиУведомлений = Обязательно;
		
	Иначе
			
		// Т.к. в данной ветке Если изменение настроек необязательно, 
		// то флаг не может принимать значение 2
		ИзменитьНастройкиУведомлений = ИзменитьНастройкиУведомлений % 2;
	
	КонецЕсли;
	
	ИзменилисьУведомленияВОблаке = 
		ЭтоОблако(ЭтотОбъект)
		И (ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено 
		ИЛИ ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено);
		
	ИзменилисьУведомленияВКоробке = 
		НЕ ЭтоОблако(ЭтотОбъект) 
		И (ТелефонМобильныйИзменился ИЛИ ЭлектроннаяПочтаИзменилась());
	
	ПерепроверитьСертификат = 
		ИзменитьНастройкиУведомлений
		И (ИзменилисьУведомленияВОблаке 
		ИЛИ ИзменилисьУведомленияВКоробке);
	
	Если ПерепроверитьСертификат Тогда
		ПроверитьНеобходимостьУстановкиГалки_ПереиздатьСертификат();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьУстановкиГалки_ИзменитьНастройкиУведомлений()
	
	Необходимо = НеобходимоИзменитьНастрокиУведомлений();
	Если Необходимо Тогда
		
		// Оставляем без изменения, так как нельзя снимать
		ИзменитьНастройкиУведомлений = Обязательно;
		
	Иначе
		
		Изменились = ИзмененныеРеквизитыУведомлений().Количество() > 0;
		
		Если Изменились Тогда
			ИзменитьНастройкиУведомлений = Рекомендовано;
		Иначе
			ИзменитьНастройкиУведомлений = НеТребуется;
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НеобходимоИзменитьНастрокиУведомлений()
	
	Заполнены = УведомленияЗаполнены();
	
	Возврат 
		НЕ Заполнены И ИзменитьМестоХранения И ЭтоПереходВКоробку
		ИЛИ ИзменитьМестоХранения И ЭтоПереходВОблако
		ИЛИ НЕ Заполнены И ПереиздатьСертификат;
	
КонецФункции

&НаСервере
Функция ИзмененныеРеквизитыУведомлений(УчитыватьФлаг = Ложь)
	
	ИзмененныеРеквизиты = Новый Массив;
	
	УчитыватьРеквизит = ИзменитьНастройкиУведомлений И УчитыватьФлаг ИЛИ НЕ УчитыватьФлаг;
	
	Если ЭтоОблако(ЭтотОбъект) Тогда
		
		ТелефонМобильныйДляПаролейПредставление = ПолучитьПредставлениеТелефона(ТелефонМобильныйДляПаролей);
		ТелефонМобильныйДляПаролейИсходныйПредставление = ПолучитьПредставлениеТелефона(ПроверкаТелефонДляПаролей.ИсходноеЗначение); 
		
		Изменилось = 
			ТелефонМобильныйДляПаролейПредставление <> ТелефонМобильныйДляПаролейИсходныйПредставление 
			И УчитыватьРеквизит;

		ДополнитьИзменившиесяРеквизиты(
			Перечисления.ПараметрыПодключенияК1СОтчетности.ТелефонМобильныйДляПаролей, 
			Изменилось,
			ИзмененныеРеквизиты,
			ПроверкаТелефонДляПаролей.ИсходноеЗначение,
			ТелефонМобильныйДляПаролей);
		
		Изменилось = 
			ЭлектроннаяПочтаДляПаролейИзменена() 
			И УчитыватьРеквизит;

		ДополнитьИзменившиесяРеквизиты(
			Перечисления.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочтаДляПаролей, 
			Изменилось,
			ИзмененныеРеквизиты,
			ПроверкаЭлектроннаяПочтаДляПаролей.ИсходноеЗначение,
			ЭлектроннаяПочтаДляПаролей);
			
	Иначе
		
		Изменилось = 
			ЭлектроннаяПочта <> ЭлектроннаяПочтаИсходная
			И УчитыватьРеквизит;

		ДополнитьИзменившиесяРеквизиты(
			Перечисления.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочта, 
			Изменилось,
			ИзмененныеРеквизиты,
			ЭлектроннаяПочтаИсходная,
			ЭлектроннаяПочта);

	КонецЕсли;
	
	ТелефонМобильныйПредставление = ПолучитьПредставлениеТелефона(ТелефонМобильный);
	ТелефонМобильныйИсходныйПредставление = ПолучитьПредставлениеТелефона(ТелефонМобильныйИсходный);
		
	Изменилось = 
		ТелефонМобильныйПредставление <> ТелефонМобильныйИсходныйПредставление
		И УчитыватьРеквизит;
		
	ДополнитьИзменившиесяРеквизиты(
		Перечисления.ПараметрыПодключенияК1СОтчетности.ТелефонМобильный, 
		Изменилось,
		ИзмененныеРеквизиты,
		ТелефонМобильныйИсходныйПредставление,
		ТелефонМобильныйПредставление);
		
	Изменилось = 
		ЗначениеЗаполнено(ТелефонМобильныйПредставление) <> ЗначениеЗаполнено(ТелефонМобильныйИсходныйПредставление)
		И УчитыватьРеквизит;
		
	ДополнитьИзменившиесяРеквизиты(
		НСтр("ru = 'Получать SMS-уведомления о статусе отправки';
			|en = 'Receive text notifications of sending status'"), 
		Изменилось,
		ИзмененныеРеквизиты,
		ЗначениеЗаполнено(ТелефонМобильныйИсходныйПредставление),
		ЗначениеЗаполнено(ТелефонМобильныйПредставление));

	Возврат ИзмененныеРеквизиты;
	
КонецФункции

&НаСервере
Процедура ПроверитьНеобходимостьУстановкиГалки_ПереиздатьСертификат()
	
	ПереиздатьСертификат = НеобходимостьПереизданияСертификата();
		
	Если ПереиздатьСертификат = НеТребуется
		И НЕ СертификатДоступен Тогда
		
		ПереиздатьСертификат = Рекомендовано;
		
	КонецЕсли;
	
	ИнициализироватьВозможностьБезбумажногоПродления();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьУстановкиГалки_ИзменитьСоставКонтролирующихОрганов()
	
	ИзменилсяСоставКонтролирующихОрганов = ИзмененныеНаправления().Количество() > 0;

	Если ИзменилсяСоставКонтролирующихОрганов Тогда
		ИзменитьСоставКонтролирующихОрганов = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьУстановкиГалки_ИзменитьРеквизитыОрганизации()
	
	ИзменитьРеквизитыПодключенияК1СОтчетности = 
		ИзмененныеРеквизитыОрганизации().Количество() > 0;
	
КОнецПроцедуры
	
&НаСервере
Процедура ПроверитьНеобходимостьУстановкиГалки_ИзменитьВладельцаСертификата()
	
	Если НЕ ЗначениеЗаполнено(ВладелецЭЦПИсходный) И НЕ ЗначениеЗаполнено(ВладелецЭЦП) Тогда
		
		ИзменитьВладельцаСертификата = Истина;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ВладелецЭЦП) Тогда
		
		ИзменитьВладельцаСертификата = Истина;
		
	Иначе
		
		ИзмененныеРеквизитыВладельца = ИзмененныеРеквизитыВладельца();
		
		// Для ИП владелец ЭП м.б. только руководитель
		ЭтоИПиНеРуководитель = 
			НЕ ЭтоЮридическоеЛицо 
			И ВладелецЭЦПТипИсходный <> Перечисления.ТипыВладельцевЭЦП.Руководитель;
			
		// Проверяем, изменились ли данные владельца ЭЦП только если нашли владельца ЭП в базе
		Если ИзмененныеРеквизитыВладельца.Количество() > 0 
			ИЛИ ЭтоИПиНеРуководитель Тогда
			
			ИзменитьВладельцаСертификата = Истина;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьУстановкиГалки_ФлагПодключитьЭДО()
	
	ПодключитьЭДО = 
		НЕ ЭтоУчетнаяЗаписьВМоделиСервиса 
		И НЕ ЭтоПереходВОблако 
		И ПодключениеЭДОВозможно
		И ЕстьПравоНастройкиЭДО; 

КонецПроцедуры	

&НаСервере
Процедура ПроверитьНеобходимостьУстановкиГалки_ФлагПереиздатьСертификатЭДО()
	
	ПереиздатьСертификатЭДО = 
		НЕ ЭтоУчетнаяЗаписьВМоделиСервиса 
		И НЕ ЭтоПереходВОблако 
		И НЕ ЭтоПереходВКоробку
		И ПереизданиеСертификатаЭДОВозможно
		И ЕстьПравоНастройкиЭДО;
	
КонецПроцедуры

#КонецОбласти

#Область ВладелецЭП

&НаСервере
Процедура ИнициализироватьИсходныеРеквизиты1СОтчетности_ПаспортныеДанные()
	
	ВладелецЭЦПСерияДокументаИсходный = "";
	ВладелецЭЦПНомерДокументаИсходный = "";
	ВладелецЭЦПДатаВыдачиДокументаИсходный = "";
	ВладелецЭЦПКемВыданДокументИсходный = "";
	ВладелецЭЦПКодПодразделенияИсходный = "";
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ФайлыСведенийСпецоператоры.Данные КАК Данные,
	                      |	ФайлыСведенийСпецоператоры.ДатаФайла КАК ДатаФайла
	                      |ИЗ
	                      |	РегистрСведений.ФайлыСведенийСпецоператоры КАК ФайлыСведенийСпецоператоры
	                      |ГДЕ
	                      |	ФайлыСведенийСпецоператоры.УчетнаяЗапись = &УчетнаяЗапись
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ФайлыСведенийСпецоператоры.ДатаФайла УБЫВ");
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Данные = Выборка.Данные;
	Если НЕ ЗначениеЗаполнено(Данные) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
	
		ВременныйФайл = ПолучитьИмяВременногоФайла();
		Данные.Получить().Записать(ВременныйФайл);
		
		ДокументDOM = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗагрузитьФайлXML(ВременныйФайл);
		
		Удостоверения = ДокументDOM.ПолучитьЭлементыПоИмени("УдЛичн");
		Если Удостоверения.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Удостоверение = Удостоверения[0].Атрибуты;
		
		// Вид документа
		ВладелецЭЦПВидДокументаКодИсходный = Удостоверение.ПолучитьИменованныйЭлемент("КодВидДок").ТекстовоеСодержимое;
		
		// Серия и номер
		СерНомДокВФайле = Удостоверение.ПолучитьИменованныйЭлемент("СерНомДок").ТекстовоеСодержимое;
		СерНомДокВФайле = СтрРазделить(СерНомДокВФайле, " ");
		
		Если СерНомДокВФайле.Количество() = 1 Тогда
			ВладелецЭЦПСерияДокументаИсходный = СерНомДокВФайле[0];
		ИначеЕсли СерНомДокВФайле.Количество() = 2 Тогда
			ВладелецЭЦПСерияДокументаИсходный = СерНомДокВФайле[0];
			ВладелецЭЦПНомерДокументаИсходный = СерНомДокВФайле[1];
		ИначеЕсли СерНомДокВФайле.Количество() = 3 Тогда
			ВладелецЭЦПСерияДокументаИсходный = СерНомДокВФайле[0] + " " + СерНомДокВФайле[1];
			ВладелецЭЦПНомерДокументаИсходный = СерНомДокВФайле[2];
		КонецЕсли;
		
		// Дата выдачи
		ДатаДокВФайле = Удостоверение.ПолучитьИменованныйЭлемент("ДатаДок").ТекстовоеСодержимое;
		ВладелецЭЦПДатаВыдачиДокументаИсходный = КонтекстЭДОСервер.ДатаВремяИзСтроки(ДатаДокВФайле);
		
		// Кем выдан
		ВладелецЭЦПКемВыданДокументИсходный = Удостоверение.ПолучитьИменованныйЭлемент("ВыдДок").ТекстовоеСодержимое;
		
		// Код подразделения
		ВладелецЭЦПКодПодразделенияИсходный = Удостоверение.ПолучитьИменованныйЭлемент("КодВыдДок").ТекстовоеСодержимое;
		
	Исключение
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ВладелецПоТипу()
	
	Если ВладелецЭЦПТип = Перечисления.ТипыВладельцевЭЦП.ПустаяСсылка() И ЭтоЮридическоеЛицо Тогда
		Возврат Неопределено;
	ИначеЕсли ВладелецЭЦПТип = Перечисления.ТипыВладельцевЭЦП.Руководитель
		ИЛИ ВладелецЭЦПТип = Перечисления.ТипыВладельцевЭЦП.ПустаяСсылка() И НЕ ЭтоЮридическоеЛицо Тогда
		Возврат Руководитель;
	ИначеЕсли ВладелецЭЦПТип = Перечисления.ТипыВладельцевЭЦП.ГлавныйБухгалтер Тогда
		Возврат ГлБухгалтер;
	ИначеЕсли ВладелецЭЦПТип = Перечисления.ТипыВладельцевЭЦП.ДругойСотрудник Тогда
		Возврат СотрудникВыбор;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеСотрудника(ПеречитатьДанныеОСотруднике = Истина)
	
	НетДанныхДляЗаполненияВладельца = 
		НЕ ЗначениеЗаполнено(Организация)
		ИЛИ ВладелецЭЦПТип = Перечисления.ТипыВладельцевЭЦП.ПустаяСсылка() И ЭтоЮридическоеЛицо;
	
	Если НетДанныхДляЗаполненияВладельца Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецЭЦП = ВладелецПоТипу();
	
	Если НЕ ЗначениеЗаполнено(ВладелецЭЦП) Тогда
		Возврат;
	КонецЕсли;

	// Обновляем данные о сотрудниках
	Если ПеречитатьДанныеОСотруднике Тогда
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		КонтекстЭДОСервер.ЗаполнитьДанныеОрганизации(СтруктураРеквизитов);
		ДанныеЗаполнения = КонтекстЭДОСервер.ДополнитьДанныеОрганизацииДаннымиПоОтветственнымЛицам(СтруктураРеквизитов);
		Если ДанныеЗаполнения.Свойство("СтруктураДанныхОрганизации") Тогда
			ДанныеОрганизации = ДанныеЗаполнения.СтруктураДанныхОрганизации;
		КонецЕсли;
	КонецЕсли;
	
 	ДанныеОрганизации.Вставить("Организация", Организация);
 
	ДанныеСотрудника = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьДанныеСотрудника(
		ВладелецЭЦПТип, 
		ДанныеОрганизации, 
		ВладелецЭЦП);
	
	ВладелецЭЦПИмя					= ДанныеСотрудника.ФИО.Имя;
	ВладелецЭЦПФамилия				= ДанныеСотрудника.ФИО.Фамилия;
	ВладелецЭЦПОтчество				= ДанныеСотрудника.ФИО.Отчество;
	ВладелецЭЦПВидДокумента			= ДанныеСотрудника.ВидДокумента;
	ВладелецЭЦПСерияДокумента		= ДанныеСотрудника.Серия;
	ВладелецЭЦПНомерДокумента		= ДанныеСотрудника.Номер;
	ВладелецЭЦПДатаВыдачиДокумента	= ДанныеСотрудника.ДатаВыдачи;
	ВладелецЭЦПКемВыданДокумент		= ДанныеСотрудника.КемВыдан;
	
	Если ЭтоЮридическоеЛицо Тогда
		ВладелецЭЦПДолжность = ДанныеСотрудника.Должность;
	КонецЕсли;
	
	ВладелецЭЦППодразделение		= ДанныеСотрудника.Подразделение;
	ВладелецЭЦПСНИЛС				= ДанныеСотрудника.СНИЛС;
	ВладелецЭЦПИНН					= ДанныеСотрудника.ИНН;
	ВладелецЭЦПДатаРождения         = ДанныеСотрудника.ДатаРождения;
	ВладелецЭЦПМестоРождения        = ДанныеСотрудника.МестоРождения;
	ВладелецЭЦППол                  = ДанныеСотрудника.Пол;
	ВладелецЭЦПГражданство          = ДанныеСотрудника.Гражданство;
	
	Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоПаспортРФ(ВладелецЭЦПВидДокумента) Тогда
		ВладелецЭЦПКодПодразделения = ДанныеСотрудника.КодПодразделения;
	Иначе
		ВладелецЭЦПКодПодразделения = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриУстановкеРежимаТолькоСУЦ(ПриОткрытии = Ложь)
	
	ПриУстановкеРежимаТолькоСУЦНаСервере(ПриОткрытии);
	ОбработкаЗаявленийАбонентаКлиентСервер.ПроверитьНеобходимостьУстановкиГалки_ВключатьЛицензиюКриптоПроВСертификат(ЭтотОбъект);
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПриУстановкеРежимаТолькоСУЦНаСервере(ПриОткрытии = Ложь)
	
	ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(ЭтотОбъект);
	
	ОбработкаЗаявленийАбонента.ПриУстановкеРежимаТолькоСУЦНаСервере(ЭтотОбъект);
	
	ИнициализироватьСпособПолученияСертификата(ЭтотОбъект);
		
	ПересчитатьМестоХранения(ПриОткрытии);
	
	ПроверитьНеобходимостьУстановкиГалки_ПереиздатьСертификат();
	
	ИнициализироватьВозможностьБезбумажногоПродления();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьМестоХранения(ПриОткрытии)
	
	МестоХраненияПредыдущее = ВыбранноеМестоХраненияКлюча;
	
	ОбработкаЗаявленийАбонентаКлиентСервер.ОпределитьВыбранноеМестоХраненияКлюча(ЭтотОбъект);
	ОбработкаЗаявленийАбонентаКлиентСервер.ОпределитьИзменениеВМестеХраненияКлючей(ЭтотОбъект);
	ОбработкаЗаявленийАбонентаКлиентСервер.ОчиститьВключаемыйСертификат(ЭтотОбъект);
	
	ИзменилосьМестоХранения = МестоХраненияПредыдущее <> ВыбранноеМестоХраненияКлюча;
	
	Если ИзменилосьМестоХранения Тогда
		
		Если ЭтоОблако(ЭтотОбъект) Тогда
			// Т.к. здесь сбрасываем все настройки, то токен тоже переинициализируем 
			ИнициализироватьТокен = Истина;
			ИнициализацияЭПВОблакеСервер(ИнициализироватьТокен);
		КонецЕсли;
		
		// Не определяем место хранения, т.к. мы только что его тут определили
		ОпределятьМестоХранения = Ложь;
		ПриИзмененииМестаХранения(ОпределятьМестоХранения);
		
		ИнициализироватьПараметрыЭДО(ПриОткрытии);
		
		ИзменитьМестоХранения = ИзменилосьМестоХранения(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИзменилосьМестоХранения(Форма)
	
	ВМоделиСервиса = ПредопределенноеЗначение("Перечисление.МодельРаботыСКлючами.ВМоделиСервиса");
	
	ЭтоОблако = 
		ЭтоОблако(Форма) 
		ИЛИ Форма.ВыбранноеМестоХраненияКлюча = ВМоделиСервиса;
	
	Изменилось = 
		Форма.ЭтаУчетнаяЗаписьБылаСделанаДляОблака <> ЭтоОблако
		ИЛИ Форма.ЭтаУчетнаяЗаписьБылаСделанаДляОблака И НЕ Форма.ДоступнаЭлектроннаяПодписьВМоделиСервиса
		ИЛИ СпособПодтвержденияКриптооперацийИзменился(Форма)
		ИЛИ Форма.ВключатьЛицензиюКриптоПроВСертификат И НЕ ЭтоОблако;
	
	Возврат Изменилось;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбновитьДанныеРуководителя()
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьДанныеРуководителя");
	НовыйРуководитель = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Организация);
	
	Если Руководитель = НовыйРуководитель Тогда
		Возврат;
	КонецЕсли;
	
	Руководитель      = НовыйРуководитель; 
	НовыйТипВладельца = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	УстановитьНовогоВладельцаЭЦП(НовыйТипВладельца);
	
	// Обновляем данные на второй закладке только если мы находимся на этой закладке
	Если Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ПроверкаЗаявления Тогда
		СформироватьТаблицуДляПодтвержденияДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьДанныеГлБухгалтера()
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьДанныеГлБухгалтера");
	НовыйГлБухгалтер = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ГлБухгалтер(Организация);
	
	Если ГлБухгалтер = НовыйГлБухгалтер Тогда
		Возврат;
	КонецЕсли;
	
	ГлБухгалтер = НовыйГлБухгалтер;
	НовыйТипВладельца 	= ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер");
	УстановитьНовогоВладельцаЭЦП(НовыйТипВладельца);
	
	// Обновляем данные на второй закладке только если мы находимся на этой закладке
	Если Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ПроверкаЗаявления Тогда
		СформироватьТаблицуДляПодтвержденияДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовогоВладельцаЭЦП(НовыйТипВладельца)
	
	УстановитьНовогоВладельцаЭЦПНаСервере(НовыйТипВладельца);
	ПриУстановкеРежимаТолькоСУЦ();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНовогоВладельцаЭЦПНаСервере(НовыйТипВладельца)
	
	ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(ЭтотОбъект);
	ОчиститьДанныеВладельца();
	
	ВладелецЭЦПТип = НовыйТипВладельца;
	
	ЗаполнитьДанныеСотрудника(Истина);
	
	// Смена владельца к смене места хранения не приводит
	ОпределятьМестоХранения = Ложь;
	СброситьСпособПолученияСертификата(ОпределятьМестоХранения, Ложь);
	
	ПроверитьНеобходимостьУстановкиГалки_ИзменитьВладельцаСертификата();
	ПроверитьНеобходимостьУстановкиГалки_ПереиздатьСертификат();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРуководителя()
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуРуководителя(Организация);
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДанныеРуководителя",1);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуГлБухгалтера()
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуГлБухгалтера(Организация);
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДанныеГлБухгалтера",1);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораВладельцаЭЦП()
	
	Если ЭтоРуководитель(ЭтотОбъект) Тогда
		Если ЭтоЮридическоеЛицо Тогда
			ОткрытьФормуРуководителя();
		Иначе
			Если ЗначениеЗаполнено(ВладелецЭЦП) Тогда
				ПоказатьЗначение(, ВладелецЭЦП);
			Иначе
				ОткрытьФормуРуководителя();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЭтоБухгалтер(ЭтотОбъект) Тогда
		ОткрытьФормуГлБухгалтера();
	ИначеЕсли ЭтоДругойСотрудник(ЭтотОбъект) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСотрудникаЗавершение", ЭтотОбъект);
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ПолучитьИсполнителя(
			Организация, 
			СотрудникВыбор, 
			ОписаниеОповещения);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСотрудникаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда 
		
		СотрудникВыбор = Результат;
		НовыйТипВладельца = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник");
		УстановитьНовогоВладельцаЭЦП(НовыйТипВладельца);
		УправлениеФормой();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Очистка

&НаСервере
Процедура ОчиститьРеквизитыФормы() 

	// Организации
	АдресЮридическийПредставление = "";
	ИНН                      = "";
	КПП                      = "";
	ОГРН                     = "";
	КраткоеНаименование      = "";
	ТелефонОсновной          = "";
	ПризнакОбособленногоПодразделения = Ложь;
	Область                  = "";
	Город                    = "";
	Улица                    = "";
	
	// Владелец
	СотрудникВыбор           = Неопределено;
	ГлБухгалтер              = Неопределено;
	Руководитель             = Неопределено;
	ЭлектроннаяПочта         = "";
	ТелефонМобильный         = "";
	
	// Криптография
	СертификатДоступен       = "";
	ЭтоЭлектронноеПодписание = Ложь;
	СвойстваСертификата      = Неопределено;
	НастройкиУчетнойЗаписи   = Неопределено;
	НовыйСертификат          = Неопределено;
	ПредупредилиОПереходе    = Ложь;
	ЭтоПереходВКоробку       = Ложь;
	ЭтоПереходВОблако        = Ложь;
	СпособПодтвержденияКриптоопераций = Неопределено;
	СертификатДолженБытьПолученОтГосУЦ = Ложь;
	ВозможноБесшовноеПолучениеСертификатаВДУЦ = Ложь;
	
	// Служебные
	ЗаявлениеСозданоКопированием = Ложь;
	ЭтоОткрытиеЗаявления         = Ложь;
	Реквизит                     = Неопределено;

КонецПроцедуры

&НаСервере
Процедура СброситьНаправленияСдачиОтчетности() 
	
	РеквизитыФормы = ПолучитьРеквизиты();
	Для каждого РеквизитФормы Из РеквизитыФормы Цикл
		Имя = РеквизитФормы.Имя;
		
		Если ТипЗнч(ЭтотОбъект[Имя]) = Тип("ДанныеФормыКоллекция") Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(Имя, "ФНС") > 0 
			ИЛИ СтрНайти(Имя, "ПФР") > 0
			ИЛИ СтрНайти(Имя, "Росстат") > 0
			ИЛИ СтрНайти(Имя, "ФСС") > 0
			ИЛИ СтрНайти(Имя, "ФТС") > 0
			ИЛИ СтрНайти(Имя, "РПН") > 0 Тогда
			
			ЭтотОбъект[Имя] = Неопределено;
			
		КонецЕсли;
	КонецЦикла;
	
	ПолучателиФНС.Очистить();
	ПолучателиФСГС.Очистить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СброситьВсеФлажки(Форма)
	
	Форма.ИзменитьВладельцаСертификата 				= Ложь;
	Форма.ПродлитьЛицензиюНа1СОтчетность 			= Ложь;
	Форма.ИзменитьСоставКонтролирующихОрганов 		= Ложь;
	Форма.ИзменитьРеквизитыПодключенияК1СОтчетности = Ложь;
	Форма.ИзменитьНастройкиУведомлений 				= Форма.НеТребуется;
	Форма.ПереиздатьСертификат 						= Форма.НеТребуется;
	Форма.ИзменитьМестоХранения 					= Ложь;
	
КонецПроцедуры
	
&НаСервере
Процедура ОчиститьИсходныеЗначенияИПризнакИзменения() 
	
	РеквизитыФормы = ПолучитьРеквизиты();
	Для каждого РеквизитФормы Из РеквизитыФормы Цикл
		Имя = РеквизитФормы.Имя;
		
		Если ТипЗнч(ЭтотОбъект[Имя]) = Тип("ДанныеФормыКоллекция") Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(Имя, "Исход") > 0 
			ИЛИ СтрНайти(Имя, "Изменил") > 0 Тогда
			ЭтотОбъект[Имя] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	ЭтоНотариусАдвокатИлиГКФХ = Ложь;
	ЭтоИностраннаяОрганизация = Ложь;
	ЭтоБюджетополучатель      = Ложь;
	
	ПолучателиФНС.Очистить();
	ПолучателиФСГС.Очистить();

КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеВладельца()
	
	РеквизитыФормы = ПолучитьРеквизиты();
	Для каждого РеквизитФормы Из РеквизитыФормы Цикл
		Имя = РеквизитФормы.Имя;
		Если СтрНайти(Имя, "Владелец") <> 0
			И СтрНайти(Имя, "Исходн") = 0 Тогда
			ЭтотОбъект[Имя] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	ОбработкаЗаявленийАбонентаКлиентСервер.ОчиститьФайлыПриУстановкеНовогоВладельцаЭЦП(ЭтотОбъект);
		
КонецПроцедуры

#КонецОбласти

#Область СделатьРавнымИсходному

&НаСервере
Процедура СделатьНехранящиесяВБазеРеквизитыРавнымиИсходным()

	// Если мобильный телефон не хранится в базе, то приравниваем его исходному
	Если ЭтоРеквизитНеХранящийсяВБазе(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонМобильный")) Тогда

		ТелефонМобильный = ТелефонМобильныйИсходный;
	КонецЕсли;
	
	// Если основной телефон не хранится в базе, то приравниваем его исходному
	Если ЭтоРеквизитНеХранящийсяВБазе(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонОсновной")) Тогда

		ТелефонОсновной = ТелефонОсновнойИсходный;
	КонецЕсли;
	
	// Если электронная не хранится в базе, то приравниваем ее исходному значению
	Если ЭтоРеквизитНеХранящийсяВБазе(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочта")) Тогда

		ЭлектроннаяПочта = ЭлектроннаяПочтаИсходная;
	КонецЕсли;
	
	// Если СНИЛС не хранится в базе, то приравниваем его к исходному
	Если ЭтоРеквизитНеХранящийсяВБазе(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС")) Тогда

		ВладелецЭЦПСНИЛС = ВладелецЭЦПСНИЛСИсходный;
	КонецЕсли;
	
	ПродлитьЛицензиюНа1СОтчетность = ПродлитьЛицензиюНа1СОтчетностьИсходный;
	
КонецПроцедуры

&НаСервере
Процедура СделатьНаправленияСдачиОтчетностиРавнымиИсходным()
	
	// ФНС
	СдаватьВФНС 		= СдаватьВФНСИсходный;
	СкопироватьИзОднойТаблицыВДругую(ПолучателиФНСИсходные, ПолучателиФНС);
	КодыФНСПрописью 	= КодыФНСПрописьюИсходные;
	
	// ПФР
	СдаватьВПФР	= СдаватьВПФРИсходный;
	КодПФР 		= КодПФР(ДанныеОрганизации); // Берется из текущих данных организации!!!!
	РегНомерПФР	= ДанныеОрганизации.РегНомПФР;
	
	// ФСС
	СдаватьВФСС = СдаватьВФССИсходный;
	
	// Росстат
	СдаватьВРосстат 		= СдаватьВРосстатИсходный;
	СкопироватьИзОднойТаблицыВДругую(ПолучателиФСГСИсходные, ПолучателиФСГС);
	КодыРосстатПрописью 	= КодыРосстатПрописьюИсходные;

	// ФСРАР
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ПодатьЗаявкуНаСертификатДляФСРАР = ПодатьЗаявкуНаСертификатДляФСРАРИсходный;
	КодРегионаФСРАР = КонтекстЭДОСервер.КодРегионаФСРАР(АдресЮридическийЗначение);
	
	// РПН
	ПодатьЗаявкуНаПодключениеРПН = ПодатьЗаявкуНаПодключениеРПНИсходный;
	
	// ФТС
	ПодатьЗаявкуНаПодключениеФТС = ПодатьЗаявкуНаПодключениеФТСИсходный;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТипВладелеца()
	
	Если ЭтоЮридическоеЛицо Тогда
		ВладелецЭЦПТип = ВладелецЭЦПТипИсходный;
	Иначе
		ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьИсходногоВладельцаПоФИО_И_СНИЛС()
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Результат = КонтекстЭДОСервер.ИсходныйВладелецСертификатаПоФИОиСНИЛС(
		Организация, 
		ДанныеОрганизации, 
		ВладелецЭЦПФамилияИсходный, 
		ВладелецЭЦПИмяИсходный, 
		ВладелецЭЦПОтчествоИсходный, 
		ВладелецЭЦПСНИЛСИсходный);
		
	ВладелецЭЦПТипИсходный = Результат.ВладелецЭЦПТипИсходный;
	ВладелецЭЦПИсходный    = Результат.ВладелецЭЦПИсходный;
	
	Если ВладелецЭЦПТипИсходный = Перечисления.ТипыВладельцевЭЦП.ДругойСотрудник Тогда
		
		СотрудникВыборИсходный = ВладелецЭЦПИсходный;
		СотрудникВыбор = СотрудникВыборИсходный;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Направления

&НаСервере
Процедура ИнициализироватьДоступностьНаправлений()
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ОпределитьПодключаемыеНаправленияСдачиОтчетности(ЭтотОбъект, ЗаявлениеСозданоКопированием);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьНаправления_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Модифицированность Тогда
		ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(ЭтотОбъект);
	Конецесли;
	
	ОбработатьВыбранныеНаправления(Результат); // Сервер
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыбранныеНаправления(Результат)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ОбработатьВыбранныеНаправления(ЭтотОбъект, Результат);
	
	СравнитьНаправленияИКодыСдачиОтчетностиСИсходными();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыНаправлений() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ПараметрыФормыНаправлений(ЭтотОбъект);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Процедура СкопироватьИзОднойТаблицыВДругую(ТаблицаИсточник, ТаблицаПриемник)
	ТаблицаПриемник.Очистить();
	Для Каждого СтрокаНаправлений Из ТаблицаИсточник Цикл
		НоваяСтрока = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНаправлений); 
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция КодПФР(ДанныеОрганизации)
	
	ПолученыйКодПФР = "";
	
	Если ДанныеОрганизации = Неопределено 
		ИЛИ ПустаяСтрока(ДанныеОрганизации.КодОрганаПФР) 
		ИЛИ СтрДлина(ДанныеОрганизации.КодОрганаПФР) < 7 Тогда
		
		ПолученыйКодПФР = Лев(ДанныеОрганизации.КодОрганаПФР,7); 
		
	Иначе
		
		ПолученыйКодПФР = ДанныеОрганизации.КодОрганаПФР;
		
	КонецЕсли;
	
	Возврат ПолученыйКодПФР;
	
КонецФункции

#КонецОбласти

#Область Навигация

&НаКлиенте
Процедура ПоказатьДругуюСтраницу(Вперед = Истина)
	
	ТекущаяСтраница = Элементы.ОсновнаяПанель.ТекущаяСтраница;
	Страницы        = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы;
	ИндексТекущейСтраницы = Страницы.Индекс(ТекущаяСтраница);
	
	Пока Страницы.Индекс(ТекущаяСтраница) < Страницы.Количество() - 1 Цикл
		
		Если Вперед Тогда
			ИндексНовойСтраницы = Страницы.Индекс(ТекущаяСтраница) + 1;
		Иначе
			ИндексНовойСтраницы = Страницы.Индекс(ТекущаяСтраница) - 1;
		КонецЕсли;
		
		Страница = Страницы.Получить(ИндексНовойСтраницы);
		
		Если Страница.Видимость Тогда
			Элементы.ОсновнаяПанель.ТекущаяСтраница = Страница;
			Прервать;
		Иначе
			ТекущаяСтраница = Страница;
		КонецЕсли;
	КонецЦикла;	
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСледующуюСтраницу()
	ПоказатьДругуюСтраницу(Истина);
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеКнопокНавигации()
	
	ТекущаяСтраница = Элементы.ОсновнаяПанель.ТекущаяСтраница;
	
	КнопкаДалее	    = Элементы.Далее;
	КнопкаНазад     = Элементы.Назад;
	КнопкаЗакрыть   = Элементы.Закрыть;
	
	КнопкаДалее.Заголовок = НСтр("ru = 'Далее>';
								|en = 'Next>'");
	
	Если ТекущаяСтраница = Элементы.ОсновнаяСтраница Тогда
		
		УстановитьСвойстваКнопок(Ложь, Истина, Истина);
		
	ИначеЕсли ТекущаяСтраница = Элементы.ПроверкаЗаявления Тогда
		
		УстановитьСвойстваКнопок(Истина, Истина, Истина);
		
		Если ЭтоЭлектронноеПодписание Тогда
			КнопкаДалее.Заголовок = НСтр("ru = 'Подписать и отправить';
										|en = 'Sign and send'");
		Иначе
			КнопкаДалее.Заголовок = НСтр("ru = 'Отправить заявление';
										|en = 'Send application'");
		КонецЕсли;

	ИначеЕсли ТекущаяСтраница = Элементы.РезультатаОтправки Тогда
		
		Если ДокументЗаявление.Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено
			ИЛИ ДокументЗаявление.Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено Тогда 
			
			КнопкаЗакрыть.Заголовок = НСтр("ru = 'Закрыть';
											|en = 'Close'");
			
			УстановитьСвойстваКнопок(Ложь, Ложь, Истина);
			
			ПрограммноеЗакрытие = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваКнопок(ВидимостьНазад, ВидимостьДалее, ВидимостьЗакрыть)
	
	Элементы.Назад.Видимость = ВидимостьНазад;
	Элементы.Далее.Видимость = ВидимостьДалее;
	Элементы.Закрыть.Видимость = ВидимостьЗакрыть;
	
	Элементы.Далее.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредыдущуюСтраницу()
	ПоказатьДругуюСтраницу(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНаСтраницеУспешнойОтправки()
	
	Оповестить(НСтр("ru = 'Упрощенное заявление. Успешная отправки заявления';
					|en = 'Simplified application. Application successfully sent'"), , ДокументЗаявление.Ссылка);
	
	ПоказатьСледующуюСтраницу();
	ПрограммноеЗакрытие = Истина;
	УправлениеФормой();
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатОтправки()
	
	ОтправленоИлиОдобреноПриСменеелефонаИлиПочты = 
		ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено")
		ИЛИ ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено") И ЭтоТолькоСменаТелефонаИлиПочтыВОблаке();
	
	Если ОтправленоИлиОдобреноПриСменеелефонаИлиПочты Тогда 
		ОткрытьФормуНаСтраницеУспешнойОтправки();
	ИначеЕсли СтрНайти(ТекстОшибокОтправки, "Отказ от ввода пароля") <> 0 Тогда
		Оповестить(НСтр("ru = 'Упрощенное заявление. Отказ от ввода пароля';
						|en = 'Simplified application. Refuse entering the password'"), "", ДокументЗаявление.Ссылка);
	Иначе
		Оповестить(НСтр("ru = 'Упрощенное заявление. Ошибка отправки заявления';
						|en = 'Simplified application. Application sending error'"), ТекстОшибокОтправки, ДокументЗаявление.Ссылка);
	КонецЕсли;
	
	ЭтаФорма.Активизировать();
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельМастерДалее_ВыборДействия_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат Тогда
		
		СравнитьНаправленияИКодыСдачиОтчетностиСИсходными();
		
		СформироватьТаблицуДляПодтвержденияДанных();
		
		ПоказатьСледующуюСтраницу();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриНажатииДалееНаОсновнойСтранице(МастерДалее)
	
	МастерДалее = Истина;
	
	// проверка организации
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Организация""';
														|en = 'Fill in the ""Company"" field'"), ,"Организация");
		МастерДалее = Ложь;
	КонецЕсли;
	
	// проверка органов
	Если ИзменитьСоставКонтролирующихОрганов Тогда
		ПроверитьКонтролирующиеОрганы(МастерДалее);
	КонецЕсли;
	
	// Владелец ЭЦП
	ПроверитьВладельцаЭП(МастерДалее);
	
	ПроверитьВключаемыйСертификат(МастерДалее);
	
	// если ни один флажок не отмечен - сообщаем об этом пользователю
	Если НЕ УстановленХотяБыОдинФлаг(ЭтотОбъект) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Вы не выбрали никакого действия';
														|en = 'No action selected'"), ,"");
		МастерДалее = Ложь;
	КонецЕсли;
	
	ПроверитьOIDЛицензииКриптоПро(МастерДалее);
	Проверить1СЭДОПоНовойСхеме(МастерДалее);
	ПроверитьДоступДляТокена(МастерДалее);
	КонтекстЭДОКлиент.ПроверитьСканыДокументов(ЭтотОбъект, МастерДалее);
	ПроверитьПереходныйПериод(МастерДалее);
	
	Если МастерДалее Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"КоманднаяПанельМастерДалее_ВыборДействия_Завершение", 
			ЭтотОбъект);
		
		Если ИспользоватьСуществующий(ЭтотОбъект) Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, МастерДалее);
		Иначе
			ПроверитьКриптопровайдерИМестоХраненияКлючей(ОписаниеОповещения); // асинхр
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриНажатииДалееНаСтраницеПроверкиЗаявления(МастерДалее)
	
	ОчиститьСообщения();
	
	СохранитьЗаявлениеКлиент();
	
	ПроверитьРеквизитыЗаявления(МастерДалее); 
	
	Если НЕ МастерДалее Тогда
		Возврат;
	КонецЕсли;
		
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьДанныеГлБухгалтера");
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьДанныеРуководителя");
	ОповеститьОбИзменении(ДокументЗаявление.Ссылка);
	
	СформироватьИОтправитьЗаявление();
	
КонецПроцедуры

#КонецОбласти

#Область Таблица

#Область ИтоговыеДанные

&НаСервере
Функция ИтоговыеДанныеОрганизации_Адрес(ЕстьИзменение, НовоеЗначение, ИсходноеЗначение)
	
	Изменилось = ИзменитьРеквизитыПодключенияК1СОтчетности И ЕстьИзменение 
		ИЛИ ПереиздатьСертификат;
	
	Возврат ?(Изменилось, 
		НовоеЗначение, 
		ИсходноеЗначение);
	
КонецФункции

&НаСервере
Функция ИтоговыеДанныеОрганизации_КраткоеНаименование()
	
	Изменилось = 
		ИзменитьРеквизитыПодключенияК1СОтчетности И КраткоеНаименованиеИзменилось 
		ИЛИ ПереиздатьСертификат;
	
	Возврат ?(Изменилось, 
		КраткоеНаименование, 
		КраткоеНаименованиеИсходное);
	
КонецФункции

&НаСервере
Функция ИтоговыеДанныеОрганизации_КПП()
	
	Возврат ?(ИзменитьРеквизитыПодключенияК1СОтчетности И КППИзменился, КПП, КППИсходный);
	
КонецФункции

&НаСервере
Функция ИтоговыеДанныеОрганизации_ОГРН()
	
	Изменилось = ИзменитьРеквизитыПодключенияК1СОтчетности И ОГРНИзменился
		ИЛИ ПереиздатьСертификат;
	
	Возврат ?(Изменилось, 
		ОГРН, 
		ОГРНИсходный);
	
КонецФункции

&НаСервере
Функция ИтоговыеДанныеОрганизации_РегНомерПФР()
	
	Возврат ?(ИзменитьСоставКонтролирующихОрганов И РегНомерПФРИзменился, РегНомерПФР, РегНомерПФРИсходный);
	
КонецФункции

&НаСервере
Функция ИтоговыеДанныеОрганизации_КодРегионаФСРАР()
	
	Возврат ?(ИзменитьСоставКонтролирующихОрганов И КодРегионаФСРАРИзменился, КодРегионаФСРАР, КодРегионаФСРАРИсходный);
	
КонецФункции

&НаСервере
Функция ИтоговыеДанныеОрганизации_ТелефонОсновной()
	
	Возврат ?(ИзменитьРеквизитыПодключенияК1СОтчетности И ТелефонОсновнойИзменился, ТелефонОсновной, ТелефонОсновнойИсходный);
	
КонецФункции

&НаСервере
Функция ИтоговыеДанныеОрганизации_ЭлектроннаяПочта()
	
	ПереиздаетсяСертификат = ПереиздатьСертификат;
	
	Если ЭтоОблако(ЭтотОбъект) Тогда
		
		Изменилась = 
			(ИзменитьНастройкиУведомлений ИЛИ ПереиздаетсяСертификат)
			И ЭлектроннаяПочтаДляПаролейИзменена();
	
		Возврат ?(Изменилась, 
			ЭлектроннаяПочтаДляПаролей, 
			ПроверкаЭлектроннаяПочтаДляПаролей.ИсходноеЗначение);
		
	Иначе
		
		Изменилась = 
			(ИзменитьНастройкиУведомлений ИЛИ ПереиздаетсяСертификат)
			И ЭлектроннаяПочтаИзменилась();
		
		Возврат ?(Изменилась, 
			ЭлектроннаяПочта, 
			ЭлектроннаяПочтаИсходная);
			
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИтоговыеДанныеВладельца_ВладелецЭЦП()
	
	Изменилось = ИзменитьВладельцаСертификата И ИзменилосьФИО()
		ИЛИ ПереиздатьСертификат;
	
	Возврат ?(Изменилось, ВладелецЭЦП, ВладелецЭЦПИсходный);
	
КонецФункции

&НаСервере
Функция ИтоговыеДанныеВладельца_ВладелецЭЦПДолжность()
	
	Изменилось = ИзменитьВладельцаСертификата И ВладелецЭЦПДолжностьИзменилась 
		ИЛИ ПереиздатьСертификат;

	Возврат ?(Изменилось, ВладелецЭЦПДолжность, ВладелецЭЦПДолжностьИсходная);
	
КонецФункции

&НаСервере
Функция ИтоговыеДанныеВладельца_ВладелецЭЦПСНИЛС()
	
	Изменилось = ИзменитьВладельцаСертификата И ВладелецЭЦПСНИЛСИзменился 
		ИЛИ ПереиздатьСертификат;
	
	Возврат ?(Изменилось, ВладелецЭЦПСНИЛС, ВладелецЭЦПСНИЛСИсходный);
	
КонецФункции

&НаСервере
Функция ИтоговыеДанныеВладельца_ВладелецЭЦПИНН()

	Изменилось = ИзменитьВладельцаСертификата И ВладелецЭЦПИННИзменился 
		ИЛИ ПереиздатьСертификат;

	Возврат ?(Изменилось, ВладелецЭЦПИНН, ВладелецЭЦПИННИсходный);
	
КонецФункции

&НаСервере
Функция ИтоговыеДанныеГосОрганы_СдаватьВОрган(Орган)
	
	Исходный = ЭтотОбъект["СдаватьВ" + Орган+ "Исходный"];
	Изменившийся = ЭтотОбъект["СдаватьВ" + Орган];
	Изменился = ЭтотОбъект["СдаватьВ" + Орган+ "Изменился"];
	
	Возврат ?(ИзменитьСоставКонтролирующихОрганов И Изменился, Изменившийся, Исходный);
	
КонецФункции

&НаСервере
Функция ИтоговыеДанныеГосОрганы_КодыФНС()
	
	Если ИзменитьСоставКонтролирующихОрганов Тогда
		Если СдаватьВФНС Тогда
			Возврат ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьКодыФНСПрописью(ПолучателиФНС);
		Иначе
			Возврат "";
		КонецЕсли;
	Иначе
		Возврат КодыФНСПрописьюИсходные;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИтоговыеДанныеГосОрганы_КодыРосстата()
	
	КодыРосстатПрописью = ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьКодыРосстатПрописью(ПолучателиФСГС);
	Если ИзменитьСоставКонтролирующихОрганов Тогда
		Если СдаватьВРосстат Тогда
			Возврат КодыРосстатПрописью;
		Иначе
			Возврат "";
		КонецЕсли;
	Иначе
		Возврат КодыРосстатПрописьюИсходные;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИтоговыеДанныеГосОрганы_КодПФР()
	
	Если ИзменитьСоставКонтролирующихОрганов Тогда
		Если СдаватьВПФР Тогда
			Возврат КодПФР;
		Иначе
			Возврат "";
		КонецЕсли;
	Иначе
		Возврат КодПФРИсходный;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РезультатПроверки

&НаСервере
Функция РезультатПроверки_Шаблон()
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("СодержитОшибку", Ложь);
	ДополнительныеПараметры.Вставить("РеквизитРедактируется", Ложь);
	ДополнительныеПараметры.Вставить("ТекстОшибки", "");
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

&НаСервере
Функция РезультатПроверки_ТелефонМобильный()
	
	Результат = РезультатПроверки_Шаблон();
	
	ВключенЛокальныйСертификат = ИспользоватьСуществующий(ЭтотОбъект) И НЕ ВключаемыйСертификатОблачный;
	Если НЕ ЭтоУчетнаяЗаписьВМоделиСервиса ИЛИ ВключенЛокальныйСертификат  Тогда
		ТекстОшибки = "";
		Если НЕ ОбработкаЗаявленийАбонентаКлиентСервер.МобильныйУказанКорректно(ЭтотОбъект, Истина, ТекстОшибки) Тогда
			
			Результат.ТекстОшибки = ТекстОшибки;
			Результат.СодержитОшибку = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РезультатПроверки_ТелефонМобильный_ДляПаролей()
	
	Результат = РезультатПроверки_Шаблон();
	
	ВключенЛокальныйСертификат = ИспользоватьСуществующий(ЭтотОбъект) И НЕ ВключаемыйСертификатОблачный;
	Если ЭтоУчетнаяЗаписьВМоделиСервиса И НЕ ВключенЛокальныйСертификат И ИзменитьНастройкиУведомлений Тогда
		
		ПолучатьУведомленияИзменен = 
			ТелефонМобильныйЗаполнен(ТелефонМобильныйИсходный)
			И Не ПолучатьУведомления;
			
		ТелефонДляПаролейЗаполнен  = ТелефонМобильныйЗаполнен(ТелефонМобильныйДляПаролей);
		
		ТелефонДляПаролейИзменен   = 
			ПроверкаТелефонДляПаролей.ИсходноеЗначение <> ТелефонМобильныйДляПаролей 
			И ПроверкаТелефонДляПаролей.ЗначениеВведено;
			
		Если Не ТелефонДляПаролейИзменен 
			И Не ЭлектроннаяПочтаДляПаролейИзменена() 
			И НЕ ПолучатьУведомленияИзменен 
			И НЕ ТелефонМобильныйИзменился
			ИЛИ НЕ ТелефонДляПаролейЗаполнен Тогда
			
			Результат.ТекстОшибки = НСтр("ru = 'Укажите новый номер телефона или новую электронную почту, либо снимите флажок';
										|en = 'Specify a new phone number or a new email, or clear the check box'");
			Результат.СодержитОшибку = Истина;
			
		ИначеЕсли ТелефонДляПаролейИзменен И Не ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено Тогда
			
			Результат.ТекстОшибки = НСтр("ru = 'Подтвердите номер мобильного телефона';
										|en = 'Confirm the cell phone number'");
			Результат.СодержитОшибку = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РезультатПроверки_ЭлектроннаяПочта_ДляПаролей()
	
	Результат = РезультатПроверки_Шаблон();
	
	ВключенЛокальныйСертификат = ИспользоватьСуществующий(ЭтотОбъект) И НЕ ВключаемыйСертификатОблачный;
	Если ЭтоУчетнаяЗаписьВМоделиСервиса И НЕ ВключенЛокальныйСертификат И ИзменитьНастройкиУведомлений Тогда
		
		Если ЭлектроннаяПочтаДляПаролейИзменена() 
			И Не ПроверкаЭлектроннаяПочтаДляПаролей.ПодтверждениеВыполнено 
			И ЗначениеЗаполнено(ЭлектроннаяПочтаДляПаролей) Тогда
			
			Результат.ТекстОшибки = НСтр("ru = 'Подтвердите адрес электронной почты';
										|en = 'Confirm the email address'");
			Результат.СодержитОшибку = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РезультатПроверки_ВладелецЭЦПФИО()
	
	Результат = РезультатПроверки_Шаблон();
	
	Если ПроверятьДанныеВладельца() Тогда
		
		// фамилия
		Если ПустаяСтрока(ВладелецЭЦПФамилия) Тогда
			
			Результат.ТекстОшибки 		= НСтр("ru = 'Заполните фамилию сотрудника-владельца ЭП';
												|en = 'Specify the last name of the employee owning DS'");
			Результат.СодержитОшибку = Истина;
			
		КонецЕсли;
		
		// имя
		Если ПустаяСтрока(ВладелецЭЦПИмя) Тогда
			
			Результат.ТекстОшибки 		= НСтр("ru = 'Заполните имя сотрудника-владельца ЭП';
												|en = 'Specify the name of the employee owning DS'");
			Результат.СодержитОшибку = Истина;
			
		КонецЕсли;
		
		Результат.РеквизитРедактируется = Истина;

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РезультатПроверки_ВладелецЭЦПВидДокумента()
	
	Результат = РезультатПроверки_Шаблон();
	
	Если ПроверятьДанныеВладельца() Тогда
		
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		
		Если ПустаяСтрока(ВладелецЭЦПВидДокумента) Тогда
					
			Результат.ТекстОшибки = НСтр("ru = 'Заполните документ, удостоверяющий личность сотрудника-владельца ЭП';
										|en = 'Specify the identity document of the employee owning DS'");
			Результат.СодержитОшибку = Истина;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(КонтекстЭДОСервер.ПолучитьКодВидаДокументаФизическогоЛица(ВладелецЭЦПВидДокумента)) Тогда
			
			Результат.ТекстОшибки = НСтр("ru = 'Заполните код вида документа, удостоверяющего личность сотрудника-владельца ЭП';
										|en = 'Populate code of the identity document of the employee owning DS'");
			Результат.СодержитОшибку = Истина;
			
		КонецЕсли;
		
		Результат.РеквизитРедактируется = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РезультатПроверки_ВладелецЭЦПСерияДокумента()
	
	Результат = РезультатПроверки_Шаблон();
	
	Если ПроверятьДанныеВладельца() Тогда
		
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		ЭтоПаспортРФ = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоПаспортРФ(ВладелецЭЦПВидДокумента);
		
		Если НЕ КонтекстЭДОСервер.ПроверитьСериюДокумента(ВладелецЭЦПВидДокумента, ВладелецЭЦПСерияДокумента, Истина) Тогда 
			
			Результат.СодержитОшибку = Истина;
			Результат.ТекстОшибки 	 = НСтр("ru = 'Проверьте корректность заполнения серии документа, удостоверяющего личность сотрудника-владельца ЭП';
												|en = 'Check the correctness of filling in the identity document series of the employee who owns the digital signature'");
			
		ИначеЕсли ПустаяСтрока(ВладелецЭЦПСерияДокумента) 
			И ЭтоПаспортРФ Тогда
			
			Результат.ТекстОшибки 		= НСтр("ru = 'Заполните серию документа, удостоверяющего личность сотрудника-владельца ЭП';
												|en = 'Enter the series of the identity document of the employee owning DS '");
			Результат.СодержитОшибку = Истина;
			
		КонецЕсли;
		
		Результат.РеквизитРедактируется = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РезультатПроверки_ВладелецЭЦПНомерДокумента()
	
	Результат = РезультатПроверки_Шаблон();
	
	Если ПроверятьДанныеВладельца() Тогда
		
		ЭтоПаспортРФ = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоПаспортРФ(ВладелецЭЦПВидДокумента);
		
		Если ПустаяСтрока(ВладелецЭЦПНомерДокумента) И ЭтоПаспортРФ Тогда
			
			Результат.ТекстОшибки 	 = НСтр("ru = 'Заполните номер документа, удостоверяющего личность сотрудника-владельца ЭП';
												|en = 'Specify the number of the identity document of the employee owning DS '");
			Результат.СодержитОшибку = Истина;
			
		КонецЕсли;
		
		Если НЕ ЭтоПаспортРФ И ПустаяСтрока(ВладелецЭЦПСерияДокумента) И  ПустаяСтрока(ВладелецЭЦПНомерДокумента) Тогда
			
			Результат.ТекстОшибки 		= НСтр("ru = 'Заполните серию либо номер документа, удостоверяющего личность сотрудника-владельца ЭП';
												|en = 'Specify the series or number of the identity document of the employee owning DS '");
			Результат.СодержитОшибку = Истина;

		КонецЕсли;
		
		Результат.РеквизитРедактируется = Истина;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПроверятьДанныеВладельца()
	
	Возврат ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат;
	
КонецФункции

&НаСервере
Функция РезультатПроверки_ВладелецЭЦПКемВыданДокумент()
	
	Результат = РезультатПроверки_Шаблон();
	
	Если ПроверятьДанныеВладельца() Тогда
		
		Если ПустаяСтрока(ВладелецЭЦПКемВыданДокумент) Тогда
			
			Результат.ТекстОшибки = НСтр("ru = 'Заполните поле ""Кем выдан"" документа, удостоверяющего личность сотрудника-владельца ЭП';
										|en = 'Fill in the ""Issued by"" field of the identity document of the employee owning DS '");
			Результат.СодержитОшибку = Истина;
			
		КонецЕсли;

		Результат.РеквизитРедактируется = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РезультатПроверки_ВладелецЭЦПДатаВыдачиДокумента()
	
	Результат = РезультатПроверки_Шаблон();
	
	Если ПроверятьДанныеВладельца() Тогда
		
		Если НЕ ЗначениеЗаполнено(ВладелецЭЦПДатаВыдачиДокумента) Тогда
				
			Результат.ТекстОшибки = НСтр("ru = 'Заполните дату выдачи документа, удостоверяющего личность сотрудника-владельца ЭП';
										|en = 'Specify the issue date of the identity document of the employee owning DS  '");
			Результат.СодержитОшибку = Истина;
			
		ИначеЕсли ВладелецЭЦПДатаВыдачиДокумента > ТекущаяДатаСервер ИЛИ Год(ВладелецЭЦПДатаВыдачиДокумента) < 1900 Тогда	
			
			Результат.ТекстОшибки = НСтр("ru = 'Некорректно указана дата выдачи документа, удостоверяющего личность сотрудника-владельца ЭП';
										|en = 'Issue date of identity document of DS employee owner is specified incorrectly'");
			Результат.СодержитОшибку = Истина;
			
		КонецЕсли;
		
		Результат.РеквизитРедактируется = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РезультатПроверки_ВладелецЭЦПКодПодразделения()
	
	Результат = РезультатПроверки_Шаблон();
	ЭтоПаспортРФ = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоПаспортРФ(ВладелецЭЦПВидДокумента);
	
	Если ПроверятьДанныеВладельца() И ЭтоПаспортРФ Тогда
		
		КодПодразделенияБезТире = СтрЗаменить(ВладелецЭЦПКодПодразделения, "-","");
		Если ПустаяСтрока(КодПодразделенияБезТире) Тогда
			
			Результат.ТекстОшибки = НСтр("ru = 'Заполните код подразделения, выдавшего документ, удостоверяющего личность сотрудника-владельца ЭП';
										|en = 'Specify the business unit code of the authority issued the identity document of the employee owning DS'");
			Результат.СодержитОшибку = Истина;
			
		ИначеЕсли СтрДлина(ВладелецЭЦПКодПодразделения) <> 7
			ИЛИ НЕ ДокументооборотСКОКлиентСервер.ПроверитьЦифровойКодЗаданнойДлины(КодПодразделенияБезТире, 6, Истина) Тогда
			
			Результат.ТекстОшибки = НСтр("ru = 'Некорректно указан код подразделения, выдавшего документ, удостоверяющего личность сотрудника-владельца ЭП. 
				|Не соответствует маске ХХХ-ХХХ, где X – любая цифра';
				|en = 'Code of the business unit that issued the identity document of the employee owning DS is specified incorrectly.
				|It does not correspond to mask XXX-XXX, where X is any digit'");
			Результат.СодержитОшибку = Истина;
			
		КонецЕсли;

		Результат.РеквизитРедактируется = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РезультатПроверки_ВладелецЭЦПМестоРождения()
	
	Результат = РезультатПроверки_Шаблон();
		
	Если НЕ ИспользоватьСуществующий(ЭтотОбъект)
		И (ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат) 
		И ПустаяСтрока(ВладелецЭЦПМестоРождения) Тогда
		
		Результат.ТекстОшибки 		= НСтр("ru = 'Заполните место рождения сотрудника-владельца ЭП';
											|en = 'Specify the birthplace of the employee owning DS'");
		Результат.СодержитОшибку = Истина;
		
		Результат.РеквизитРедактируется = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РезультатПроверки_ВладелецЭЦПГражданство()
	
	Результат = РезультатПроверки_Шаблон();
	
	// Гражданство
	Если (ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат) И НЕ ЗначениеЗаполнено(ВладелецЭЦПГражданство) Тогда
		
		Результат.ТекстОшибки	 = НСтр("ru = 'Заполните гражданство сотрудника-владельца ЭП';
										|en = 'Specify citizenship of the employee owning DS '");
		Результат.СодержитОшибку = Истина;
		
	ИначеЕсли (ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат) 
		И НЕ ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.КодАльфа2Заполнен(ВладелецЭЦПГражданство)
		И ВладелецЭЦПГражданство <> ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СтраныМира.Россия") Тогда
		
		Результат.ТекстОшибки = НСтр("ru = 'Заполните код альфа-2 у страны, указанной в качестве гражданства сотрудника-владельца ЭП';
									|en = 'Specify alpha code-2 of the country specified as citizenship of the employee owning DS '");
		Результат.СодержитОшибку = Истина;
		
	КонецЕсли;
	
	Результат.РеквизитРедактируется = ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РезультатПроверки_ВладелецЭЦППол()
	
	Результат = РезультатПроверки_Шаблон();
	
	Если (ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат) И НЕ ЗначениеЗаполнено(ВладелецЭЦППол) Тогда
			
		Результат.ТекстОшибки 	 = НСтр("ru = 'Заполните пол сотрудника-владельца ЭП';
											|en = 'Specify the sex of the employee owning DS'");
		Результат.СодержитОшибку = Истина;
		
	КонецЕсли;
	
	Результат.РеквизитРедактируется = ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РезультатПроверки_ВладелецЭЦПДатаРождения()
	
	Результат = РезультатПроверки_Шаблон();
	
	Если (ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат) И НЕ ЗначениеЗаполнено(ВладелецЭЦПДатаРождения) Тогда
			
		Результат.ТекстОшибки 	 = НСтр("ru = 'Заполните дату рождения сотрудника-владельца ЭП';
											|en = 'Specify the date of birth of the employee owning DS'");
		Результат.СодержитОшибку = Истина;
		
	КонецЕсли;
	
	Результат.РеквизитРедактируется = ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РезультатПроверки_Должность()
	
	Результат = РезультатПроверки_Шаблон();
	
	Если ПереиздатьСертификат ИЛИ ИзменитьВладельцаСертификата Тогда
		Если ЭтоЮридическоеЛицо И ПустаяСтрока(ВладелецЭЦПДолжность) Тогда
			
			Результат.ТекстОшибки 		= НСтр("ru = 'Заполните должность сотрудника-владельца ЭП';
												|en = 'Specify the position of the employee owning DS'");
			Результат.СодержитОшибку = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	Результат.РеквизитРедактируется = ПереиздатьСертификат ИЛИ ИзменитьВладельцаСертификата;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РезультатПроверки_ЭлектроннаяПочта()
	
	Результат = РезультатПроверки_Шаблон();
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	СодержитОшибку = НЕ КонтекстЭДОСервер.ЭлектроннаяПочтаВведенаКорректно(
		ИтоговыеДанныеОрганизации_ЭлектроннаяПочта(),
		Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение,
		Ложь);
	
	Если СодержитОшибку Тогда
		Результат.ТекстОшибки = НСтр("ru = 'Эл. почта содержит ошибки или не заполнена';
									|en = 'Email address contains errors or is not filled in'");
		Результат.СодержитОшибку = Истина;
	КонецЕсли;
	
	Результат.РеквизитРедактируется = ИзменитьРеквизитыПодключенияК1СОтчетности И ЭлектроннаяПочтаИзменилась();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РезультатПроверки_ТелефонОсновной()
	
	Результат = РезультатПроверки_Шаблон();
	
	Если ТелефонОсновнойИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности Тогда
		Если СтрДлина(СокрЛП(ТелефонОсновной)) = 0 Тогда
			Результат.ТекстОшибки = НСтр("ru = 'Заполните телефон организации';
										|en = 'Fill in the company phone'");
			Результат.СодержитОшибку = Истина;
		КонецЕсли;
		
		Результат.РеквизитРедактируется = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РезультатПроверки_ИНН()
	
	Результат = РезультатПроверки_Шаблон();
	
	Если ИзменитьРеквизитыПодключенияК1СОтчетности ИЛИ ПереиздатьСертификат Тогда
		
		Если ПустаяСтрока(ИНН) Тогда 
				
			Результат.ТекстОшибки = НСтр("ru = 'Заполните ИНН';
										|en = 'Fill in TIN'");
			Результат.СодержитОшибку = Истина;
			
			Возврат Результат;
			
		КонецЕсли;
		
		Длина = ?(ЭтоЮридическоеЛицо, 10, 12);
			
		Если НЕ ДокументооборотСКОКлиентСервер.ПроверитьЦифровойКодЗаданнойДлины(ИНН,Длина) Тогда
			Результат.ТекстОшибки = СтрШаблон(НСтр("ru = 'ИНН должен состоять из %1 цифр';
													|en = 'TIN should consist of %1 digits'"), Длина);
			Результат.СодержитОшибку = Истина;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РезультатПроверки_КПП()
	
	Результат = РезультатПроверки_Шаблон();
	
	Если КППИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности И ЭтоЮридическоеЛицо Тогда
		
		Если ПустаяСтрока(КПП) Тогда
			
			Результат.ТекстОшибки = НСтр("ru = 'Заполните КПП';
										|en = 'Fill in CRTR'");
			Результат.СодержитОшибку = Истина;
			
		ИначеЕсли НЕ (ДокументооборотСКОКлиентСервер.ПроверитьКПП(КПП)) Тогда
			
			Результат.ТекстОшибки = НСтр("ru = 'КПП должен состоять из 9 цифр';
										|en = 'CRTR must contain 9 digits'");
			Результат.СодержитОшибку = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РезультатПроверки_ОГРН()
	
	Результат = РезультатПроверки_Шаблон();
	
	Если ОГРНИзменился И (ИзменитьРеквизитыПодключенияК1СОтчетности ИЛИ ПереиздатьСертификат) Тогда
		Если ПустаяСтрока(ОГРН) И НЕ ЭтоНотариусАдвокатИлиГКФХ Тогда
					
			Результат.ТекстОшибки = НСтр("ru = 'Заполните ОГРН';
										|en = 'Fill in registration number'");
			Результат.СодержитОшибку = Истина;

			Возврат Результат;
			
		КонецЕсли;
			
		Длина = ?(ЭтоЮридическоеЛицо, 13, 15);

		Если НЕ ПустаяСтрока(ОГРН) И НЕ (ДокументооборотСКОКлиентСервер.ПроверитьЦифровойКодЗаданнойДлины(ОГРН, Длина)) Тогда
			
			Результат.ТекстОшибки = НСтр("ru = 'ОГРН должен состоять из 13 цифр';
										|en = 'Registration number should contain 13 digits'");
			Результат.СодержитОшибку = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РезультатПроверки_СНИЛС()
	
	Результат = РезультатПроверки_Шаблон();
	
	Если ВладелецЭЦПСНИЛСИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности 
		ИЛИ ПереиздатьСертификат ИЛИ ИзменитьВладельцаСертификата Тогда
		
		Если ПустаяСтрока(СтрЗаменить(ВладелецЭЦПСНИЛС, "-","")) Тогда
			Результат.ТекстОшибки = НСтр("ru = 'Заполните СНИЛС сотрудника-владельца ЭП';
										|en = 'Enter IIAN of the employee owning DS'");
			Результат.СодержитОшибку = Истина;
		Иначе	
			Если НЕ ДокументооборотСКОКлиентСервер.ПроверитьСНИЛС(ВладелецЭЦПСНИЛС) Тогда
				Результат.ТекстОшибки = НСтр("ru = 'Некорректно указан СНИЛС сотрудника. Не соответствует маске ХХХ-ХХХ-ХХХ ХХ, где X - любая цифра';
											|en = 'Employee IIAN is specified incorrectly. It does not correspond to the XXX-XXX-XXX XX mask, where X is any digit'");
				Результат.СодержитОшибку = Истина;
			ИначеЕсли НЕ ДокументооборотСКОКлиентСервер.ПроверитьСНИЛС(ВладелецЭЦПСНИЛС, Ложь, Истина) Тогда
				Результат.ТекстОшибки = НСтр("ru = 'Некорректно указан СНИЛС сотрудника. Не сошлось контрольное число (СНИЛС не существует)';
											|en = 'Employee''s IIAN is specified incorrectly. Checksum is not identical (IIAN does not exist)'");
				Результат.СодержитОшибку = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.РеквизитРедактируется  = ПереиздатьСертификат ИЛИ ИзменитьВладельцаСертификата;
	
	Возврат Результат;
		
КонецФункции

&НаСервере
Функция РезультатПроверки_ИННФЛ()
	
	РезультатПроверки = РезультатПроверки_Шаблон();
	
	Если ВладелецЭЦПИННИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности 
		ИЛИ ПереиздатьСертификат ИЛИ ИзменитьВладельцаСертификата Тогда
		
			РезультатПроверки = ДокументооборотСКОКлиентСервер.ПроверитьИННВладельцаЭП(ЭтотОбъект);
			СодержитОшибку    = ЗначениеЗаполнено(РезультатПроверки.ТекстОшибки);
			РезультатПроверки.Вставить("СодержитОшибку", СодержитОшибку);
		
	КонецЕсли;
	
	РезультатПроверки.Вставить("РеквизитРедактируется", ПереиздатьСертификат ИЛИ ИзменитьВладельцаСертификата);
	
	Возврат РезультатПроверки;
		
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ТаблицаДанныхЗаявленияНаПодключениеВыбор_ПослеЗаполненияДолжности(Результат, ВходящийКонтекст) Экспорт
	
	ОбработкаОповещения("Запись_ФизическиеЛица", ВладелецЭЦП, ВладелецЭЦП);
	
КонецПроцедуры

&НаСервере
Функция ИмяПеречисленияПараметрыПодключенияК1СОтчетности(ЭлементПеречисления)
	
	ИмяПеречисления = ЭлементПеречисления.Метаданные().Имя;
	ИндексЗначенияПеречисления = Перечисления.ПараметрыПодключенияК1СОтчетности.Индекс(ЭлементПеречисления);
	Возврат Метаданные.Перечисления.ПараметрыПодключенияК1СОтчетности.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;

КонецФункции

&НаСервере
Функция ПредставлениеКриптопровайдера()
		
	Если ЭтоПереходВОблако 
		ИЛИ ИспользоватьСуществующий(ЭтотОбъект) И ВключаемыйСертификатОблачный
		ИЛИ ВыбранноеМестоХраненияКлюча = Перечисления.МодельРаботыСКлючами.ВМоделиСервиса Тогда
		ПредставлениеКриптопровайдера = НСтр("ru = 'Встроенный криптопровайдер';
											|en = 'Built-in cryptographic service provider'");
	Иначе
		ПредставлениеКриптопровайдера = КриптографияЭДКОКлиентСервер.СвойстваКриптопровайдераПоУмолчанию(
			ВыбранноеМестоХраненияКлюча).Представление;
	КонецЕсли;
		
	Возврат ПредставлениеКриптопровайдера;	
		
КонецФункции

&НаСервере
Процедура СформироватьТаблицуДляПодтвержденияДанных_Криптография()
	
	ДобавитьЗаголовокВТаблицу("Общие сведения");
	
	// Включение сертификата
	ИспользоватьСуществующий = ИспользоватьСуществующий(ЭтотОбъект);
	
	Если ИспользоватьСуществующий Тогда
		
		ДобавитьВТаблицуПроверки(
			Перечисления.ПараметрыПодключенияК1СОтчетности.ИспользованиеСуществующегоСертификата, 
			Истина,
			Истина);
			
	ИначеЕсли ПереиздатьСертификат Тогда
			
		ДобавитьВТаблицуПроверки(
			Перечисления.ПараметрыПодключенияК1СОтчетности.ПереизданиеСертификата, 
			Истина,
			Истина);
			
	КонецЕсли;
		
	Если ЭтоПереходВКоробку И НЕ ИспользоватьСуществующий Тогда
			
		ДобавитьВТаблицуПроверки(
			Перечисления.ПараметрыПодключенияК1СОтчетности.ПереходВКоробку, 
			Истина,
			Истина);
			
	КонецЕсли;
		
	Если ЭтоПереходВОблако И НЕ ИспользоватьСуществующий Тогда
			
		ДобавитьВТаблицуПроверки(
			Перечисления.ПараметрыПодключенияК1СОтчетности.ПереходВОблако, 
			Истина, 
			Истина);
			
	КонецЕсли;
	
	Если ЭтоПереходВКоробку ИЛИ ЭтоПереходВОблако ИЛИ ТипКриптопровайдераИзменился Тогда
		ДобавитьВТаблицуПроверки(
			Перечисления.ПараметрыПодключенияК1СОтчетности.ИзменениеКриптопровайдера, 
			ПредставлениеКриптопровайдера(),
			Истина);
	КонецЕсли;
		
	Если (ЭтоПереходВОблако ИЛИ ЭтоУчетнаяЗаписьВМоделиСервиса) И НЕ ИспользоватьСуществующий Тогда
		
		ЭтоДолговременныйТокен = СпособПодтвержденияКриптоопераций = Перечисления.СпособыПодтвержденияКриптоопераций.ДолговременныйТокен;
		Изменился = ПроверенДоступДляТокена И ЭтоДолговременныйТокен;
			
		ДобавитьВТаблицуПроверки(
			Перечисления.ПараметрыПодключенияК1СОтчетности.ПодтверждениеОперацийСКлючом, 
			ПредставлениеСпособаПодтвержденияКриптоопераций(СпособПодтвержденияКриптоопераций),
			Изменился);
			
	КонецЕсли;
		
	Если НЕ ЭтоОблако(ЭтотОбъект) И НЕ ИспользоватьСуществующий И ВключатьЛицензиюКриптоПроВСертификат И ПереиздатьСертификат Тогда
		
		ДобавитьВТаблицуПроверки(
			НСтр("ru = 'Добавить лицензию КриптоПро CSP в сертификат';
				|en = 'Add CryptoPro CSP license to the certificate'"), 
			ВключатьЛицензиюКриптоПроВСертификат,
			Истина);
			
	КонецЕсли;
	
КонецПроцедуры
		
&НаСервере
Функция ПредставлениеСпособаПодтвержденияКриптоопераций(Способ)
		
	Если Способ = Перечисления.СпособыПодтвержденияКриптоопераций.ДолговременныйТокен Тогда
		ЗаголовокПодтверждения = НСтр("ru = 'Не подтверждать';
										|en = 'Do not confirm'");
	ИначеЕсли Способ = Перечисления.СпособыПодтвержденияКриптоопераций.СессионныйТокен Тогда
		ЗаголовокПодтверждения = НСтр("ru = 'Подтверждать';
										|en = 'Confirm'");
	Иначе
		ЗаголовокПодтверждения = НСтр("ru = 'Не выбран';
										|en = 'Not selected'");
	КонецЕсли;
	
	Возврат ЗаголовокПодтверждения;
		
КонецФункции

&НаСервере
Процедура СформироватьТаблицуДляПодтвержденияДанных_ДанныеОрганизации()
	
	ДобавитьЗаголовокВТаблицу("Сведения об организации");
	
	БудетПереизданСертификат = ПереиздатьСертификат И НЕ ИспользоватьСуществующий(ЭтотОбъект);
	
	Если НЕ ИспользоватьСуществующий(ЭтотОбъект) Тогда
		ДобавитьВТаблицуПроверки(
			Перечисления.ПараметрыПодключенияК1СОтчетности.КраткоеНаименование, 
			ИтоговыеДанныеОрганизации_КраткоеНаименование(), 
			КраткоеНаименованиеИзменилось И (ИзменитьРеквизитыПодключенияК1СОтчетности ИЛИ БудетПереизданСертификат),
			Организация);
	КонецЕсли;
		
	ДобавитьВТаблицуПроверки(
		Перечисления.ПараметрыПодключенияК1СОтчетности.ИНН, 
		ИНН, 
		Ложь,// ИНН запрещено менять
		Организация,
		РезультатПроверки_ИНН()); 
		
	Если ЭтоЮридическоеЛицо Тогда
		ДобавитьВТаблицуПроверки(
			Перечисления.ПараметрыПодключенияК1СОтчетности.КПП, 
			ИтоговыеДанныеОрганизации_КПП(),
			КППИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности,
			Организация,
			РезультатПроверки_КПП());
	КонецЕсли;
	
	ИтоговоеЗначение = ИтоговыеДанныеОрганизации_Адрес(ОбластьИзменилась, Область, ОбластьИсходная);
	ДобавитьВТаблицуПроверки(
		Перечисления.ПараметрыПодключенияК1СОтчетности.Область, 
		ИтоговоеЗначение,
		ОбластьИзменилась И (ИзменитьРеквизитыПодключенияК1СОтчетности ИЛИ БудетПереизданСертификат),
		Организация,
		РезультатПроверки_Шаблон());
		
	ИтоговоеЗначение = ИтоговыеДанныеОрганизации_Адрес(ГородИзменился, Город, ГородИсходный);
	ДобавитьВТаблицуПроверки(
		Перечисления.ПараметрыПодключенияК1СОтчетности.Город, 
		ИтоговоеЗначение,
		ГородИзменился И (ИзменитьРеквизитыПодключенияК1СОтчетности ИЛИ БудетПереизданСертификат),
		Организация,
		РезультатПроверки_Шаблон());
		
	ИтоговоеЗначение = ИтоговыеДанныеОрганизации_Адрес(УлицаИзменилась, Улица, УлицаИсходная);
	ДобавитьВТаблицуПроверки(
		Перечисления.ПараметрыПодключенияК1СОтчетности.Улица, 
		ИтоговоеЗначение,
		УлицаИзменилась И (ИзменитьРеквизитыПодключенияК1СОтчетности ИЛИ БудетПереизданСертификат),
		Организация,
		РезультатПроверки_Шаблон());
	
	Если НЕ ЭтоИностраннаяОрганизация Тогда
		ДобавитьВТаблицуПроверки(
			Перечисления.ПараметрыПодключенияК1СОтчетности.ОГРН, 
			ИтоговыеДанныеОрганизации_ОГРН(),
			ОГРНИзменился И (ИзменитьРеквизитыПодключенияК1СОтчетности ИЛИ БудетПереизданСертификат),
			Организация,
			РезультатПроверки_ОГРН());
	КонецЕсли;
	
	ДобавитьВТаблицуПроверки(
		Перечисления.ПараметрыПодключенияК1СОтчетности.ТелефонОсновной, 
		ИтоговыеДанныеОрганизации_ТелефонОсновной(),
		ТелефонОсновнойИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности,
		Организация,
		РезультатПроверки_ТелефонОсновной());
			
КонецПроцедуры

&НаСервере
Процедура ДобавитьВТаблицу_ЭлектроннаяПочта()
	
	ИспользоватьСуществующий = ИспользоватьСуществующий(ЭтотОбъект);
	
	Если НЕ ИспользоватьСуществующий 
		ИЛИ ИспользоватьСуществующий И НЕ ВключаемыйСертификатОблачный Тогда
		
		ДобавитьВТаблицуПроверки(
			Перечисления.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочта, 
			ИтоговыеДанныеОрганизации_ЭлектроннаяПочта(),
			ЭлектроннаяПочтаИзменилась() И (ИзменитьНастройкиУведомлений ИЛИ ПереиздатьСертификат),
			Организация,
			РезультатПроверки_ЭлектроннаяПочта());
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВТаблицу_ТелефонМобильный()
	
	ИспользоватьСуществующий = ИспользоватьСуществующий(ЭтотОбъект);
	
	Если НЕ ИспользоватьСуществующий 
		ИЛИ ИспользоватьСуществующий И НЕ ВключаемыйСертификатОблачный Тогда
		
		Если ОператорПоддерживаетСМСУведомление Тогда
			
			Если ИзменитьНастройкиУведомлений Тогда
				
				ТелефонМобильныйБезРазделителей = ТелефонМобильныйБезРазделителей(ТелефонМобильный);
				
				Если НЕ ПолучатьУведомления И ПолучатьУведомленияИзменен() Тогда
					
					ДобавитьВТаблицуПроверки(
						Перечисления.ПараметрыПодключенияК1СОтчетности.ТелефонМобильный, 
						НСтр("ru = 'SMS-уведомления о статусе отправки отключены';
							|en = 'Text notifications of sending status disabled'"), 
						Истина);
						
				ИначеЕсли ПустаяСтрока(ТелефонМобильныйБезРазделителей) Тогда
					
					ДобавитьВТаблицуПроверки(
						Перечисления.ПараметрыПодключенияК1СОтчетности.ТелефонМобильный, 
						НСтр("ru = 'Не указан (SMS-уведомления будут отключены)';
							|en = 'Not specified (SMS notifications will be disabled)'"), 
						ТелефонМобильныйИзменился);
					
				Иначе
					
					ДобавитьВТаблицуПроверки(
						Перечисления.ПараметрыПодключенияК1СОтчетности.ТелефонМобильный, 
						ТелефонМобильный, 
						ТелефонМобильныйИзменился,
						РезультатПроверки_ТелефонМобильный());
						
				КонецЕсли;
			Иначе
				
				ДобавитьВТаблицуПроверки(
					Перечисления.ПараметрыПодключенияК1СОтчетности.ТелефонМобильный, 
					ТелефонМобильныйИсходный, 
					Ложь);
					
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТелефонМобильныйЗаполнен(Телефон)
	
	Возврат ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйЗаполнен(Телефон);
	
КонецФункции

&НаСервере
Функция ЭлектроннаяПочтаДляПаролейИзменена()
	
	Изменилась =
		ПроверкаЭлектроннаяПочтаДляПаролей <> Неопределено
		И ПроверкаЭлектроннаяПочтаДляПаролей.ИсходноеЗначение <> ЭлектроннаяПочтаДляПаролей 
		И (ПроверкаЭлектроннаяПочтаДляПаролей.ЗначениеВведено 
		ИЛИ Не ЗначениеЗаполнено(ЭлектроннаяПочтаДляПаролей))
		ИЛИ Не ЗначениеЗаполнено(ПроверкаЭлектроннаяПочтаДляПаролей.ИсходноеЗначение);
		
	Возврат Изменилась;
		
КонецФункции

&НаСервере
Функция ЭлектроннаяПочтаИзменилась()
	
	Изменилась = 
		Форматировать(ЭлектроннаяПочта) <> Форматировать(ЭлектроннаяПочтаИсходная)
		ИЛИ НЕ ЗначениеЗаполнено(ЭлектроннаяПочта)
		ИЛИ НЕ ЗначениеЗаполнено(ЭлектроннаяПочтаИсходная);
		
	Возврат Изменилась; 
		
КонецФункции

&НаСервере
Процедура ДобавитьВТаблицу_ТелефонМобильный_ДляПаролей()
	
	ВключаемыйСертификатЛокальный = ИспользоватьСуществующий(ЭтотОбъект) И НЕ ВключаемыйСертификатОблачный;
	
	Если НЕ ЭтоУчетнаяЗаписьВМоделиСервиса И НЕ ИзменитьНастройкиУведомлений
		И (ВключаемыйСертификатЛокальный ИЛИ НЕ ИспользоватьСуществующий(ЭтотОбъект)) Тогда
		Возврат;
	КонецЕсли;

	ДобавитьВТаблицуПроверки(
		Перечисления.ПараметрыПодключенияК1СОтчетности.ТелефонМобильныйДляПаролей,
		ТелефонМобильныйДляПаролей, 
		ТелефонМобильныйДляПаролейИзменился,
		Организация,
		РезультатПроверки_ТелефонМобильный_ДляПаролей());
	
КонецПроцедуры
	
&НаСервере
Процедура ДобавитьВТаблицу_ЭлектроннаяПочта_ДляПаролей()
	
	ВключаемыйСертификатЛокальный = ИспользоватьСуществующий(ЭтотОбъект) И НЕ ВключаемыйСертификатОблачный;
	
	Если НЕ ЭтоУчетнаяЗаписьВМоделиСервиса И НЕ ИзменитьНастройкиУведомлений
		И (ВключаемыйСертификатЛокальный ИЛИ НЕ ИспользоватьСуществующий(ЭтотОбъект)) Тогда
		Возврат;
	КонецЕсли;

	ДобавитьВТаблицуПроверки(
		Перечисления.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочтаДляПаролей,
		ЭлектроннаяПочтаДляПаролей, 
		ЭлектроннаяПочтаДляПаролейИзменилась,
		Организация,
		РезультатПроверки_ЭлектроннаяПочта_ДляПаролей());
	
КонецПроцедуры

&НаСервере
Функция ВладелецЭЦПФИО()

	ФИО = Новый Массив;
	ФИО.Добавить(СокрЛП(ВладелецЭЦПФамилия));
	ФИО.Добавить(СокрЛП(ВладелецЭЦПИмя));
	ФИО.Добавить(СокрЛП(ВладелецЭЦПОтчество));
	
	ФИО = СтрСоединить(ФИО, " ");
	
	Возврат ФИО;
	
КонецФункции
	
&НаСервере
Процедура СформироватьТаблицуДляПодтвержденияДанных_Владелец()
	
	Если НЕ ИспользоватьСуществующий(ЭтотОбъект) Тогда
		
		ДобавитьЗаголовокВТаблицу("Сведения о владельце электронной подписи");

		БудетПереизданСертификат = ПереиздатьСертификат И НЕ ИспользоватьСуществующий(ЭтотОбъект);
		ВладелецРеквизита = ИтоговыеДанныеВладельца_ВладелецЭЦП();
		
		ДобавитьВТаблицуПроверки(
			Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПФИО, 
			ВладелецЭЦПФИО(), 
			ИзменилосьФИО() И (ИзменитьВладельцаСертификата ИЛИ БудетПереизданСертификат),
			ВладелецРеквизита,
			РезультатПроверки_ВладелецЭЦПФИО());
			
		Если ЭтоЮридическоеЛицо Тогда
			
			ДобавитьВТаблицуПроверки(
				Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДолжность, 
				ИтоговыеДанныеВладельца_ВладелецЭЦПДолжность(), 
				ВладелецЭЦПДолжностьИзменилась И (ИзменитьВладельцаСертификата ИЛИ БудетПереизданСертификат),
				ВладелецРеквизита,
				РезультатПроверки_Должность());
		
		КонецЕсли;
		
		ДобавитьВТаблицуПроверки(
			Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС, 
			ИтоговыеДанныеВладельца_ВладелецЭЦПСНИЛС(), 
			ВладелецЭЦПСНИЛСИзменился И (ИзменитьВладельцаСертификата ИЛИ БудетПереизданСертификат),
			ВладелецРеквизита,
			РезультатПроверки_СНИЛС());
			
		Если ЭтоЮридическоеЛицо Тогда
				
			ДобавитьВТаблицуПроверки(
				Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПИНН, 
				ИтоговыеДанныеВладельца_ВладелецЭЦПИНН(), 
				ВладелецЭЦПИННИзменился И (ИзменитьВладельцаСертификата ИЛИ БудетПереизданСертификат),
				ВладелецРеквизита,
				РезультатПроверки_ИННФЛ());
				
		КонецЕсли;

		ДобавитьВТаблицуПроверки(
			Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДатаРождения, 
			Формат(ВладелецЭЦПДатаРождения, "ДЛФ=D"),
			Ложь,
			ВладелецРеквизита,
			РезультатПроверки_ВладелецЭЦПДатаРождения());
			
		ДобавитьВТаблицуПроверки(
			Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦППол, 
			ВладелецЭЦППол, 
			Ложь,
			ВладелецРеквизита,
			РезультатПроверки_ВладелецЭЦППол());
			
		ДобавитьВТаблицуПроверки(
			Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПГражданство, 
			ВладелецЭЦПГражданство, 
			Ложь,
			ВладелецРеквизита,
			РезультатПроверки_ВладелецЭЦПГражданство());
			
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		ВладелецЭЦПВидДокументаКод = КонтекстЭДОСервер.ПолучитьКодВидаДокументаФизическогоЛица(ВладелецЭЦПВидДокумента);
	
		Изменился = 
			Форматировать(ВладелецЭЦПВидДокументаКодИсходный) <> Форматировать(ВладелецЭЦПВидДокументаКод) 
			И (ИзменитьВладельцаСертификата ИЛИ БудетПереизданСертификат);
	
		ДобавитьВТаблицуПроверки(
			Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПВидДокумента, 
			ВладелецЭЦПВидДокумента, 
			Изменился,
			ВладелецРеквизита,
			РезультатПроверки_ВладелецЭЦПВидДокумента());

		Изменилось = 
			Форматировать(ВладелецЭЦПСерияДокументаИсходный) <> Форматировать(ВладелецЭЦПСерияДокумента)
			И (ИзменитьВладельцаСертификата ИЛИ БудетПереизданСертификат);
			
		ДобавитьВТаблицуПроверки(
			Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСерияДокумента, 
			Строка(ВладелецЭЦПСерияДокумента), 
			Изменилось,
			ВладелецРеквизита,
			РезультатПроверки_ВладелецЭЦПСерияДокумента());
			
		Изменилось = 
			Форматировать(ВладелецЭЦПНомерДокументаИсходный) <> Форматировать(ВладелецЭЦПНомерДокумента)
			И (ИзменитьВладельцаСертификата ИЛИ БудетПереизданСертификат);
		
		ДобавитьВТаблицуПроверки(
			Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПНомерДокумента,
			Строка(ВладелецЭЦПНомерДокумента), 
			Изменилось,
			ВладелецРеквизита,
			РезультатПроверки_ВладелецЭЦПНомерДокумента());
			
		Изменилось = 
			Форматировать(ВладелецЭЦПКемВыданДокументИсходный) <> Форматировать(ВладелецЭЦПКемВыданДокумент)
			И (ИзменитьВладельцаСертификата ИЛИ БудетПереизданСертификат);
		
		ДобавитьВТаблицуПроверки(
			Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПКемВыданДокумент, 
			ВладелецЭЦПКемВыданДокумент, 
			Изменилось,
			ВладелецРеквизита,
			РезультатПроверки_ВладелецЭЦПКемВыданДокумент());
			
		Изменилось = 
			ВладелецЭЦПДатаВыдачиДокументаИсходный <> ВладелецЭЦПДатаВыдачиДокумента
			И (ИзменитьВладельцаСертификата ИЛИ БудетПереизданСертификат);
		
		ДобавитьВТаблицуПроверки(
			Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДатаВыдачиДокумента, 
			Формат(ВладелецЭЦПДатаВыдачиДокумента, "ДЛФ=D"), 
			Изменилось,
			ВладелецРеквизита,
			РезультатПроверки_ВладелецЭЦПДатаВыдачиДокумента());
			
		Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоПаспортРФ(ВладелецЭЦПВидДокумента) Тогда
			
			Изменилось = 
				Форматировать(ВладелецЭЦПКодПодразделенияИсходный) <> Форматировать(ВладелецЭЦПКодПодразделения)
				И (ИзменитьВладельцаСертификата ИЛИ БудетПереизданСертификат);
			
			ДобавитьВТаблицуПроверки(
				Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПКодПодразделения, 
				ВладелецЭЦПКодПодразделения, 
				Изменилось,
				ВладелецРеквизита,
				РезультатПроверки_ВладелецЭЦПКодПодразделения());
				
		КонецЕсли;
			
		ДобавитьВТаблицуПроверки(
			Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПМестоРождения, 
			ВладелецЭЦПМестоРождения, 
			Ложь,
			ВладелецРеквизита,
			РезультатПроверки_ВладелецЭЦПМестоРождения());
			
	КонецЕсли;
	
	ДобавитьВТаблицу_ТелефонМобильный();
	
	Если ЭтоОблако(ЭтотОбъект) Тогда
		ДобавитьВТаблицу_ТелефонМобильный_ДляПаролей();
		ДобавитьВТаблицу_ЭлектроннаяПочта_ДляПаролей();
	Иначе
		ДобавитьВТаблицу_ЭлектроннаяПочта();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуДляПодтвержденияДанных_ГосОрганы()
	
	ДобавитьЗаголовокВТаблицу("Сведения о контролирующих органах"); // заголовок
	
	// ФНС
	ДобавитьВТаблицуПроверки(
		Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФНС,
		ИтоговыеДанныеГосОрганы_СдаватьВОрган("ФНС"), 
		СдаватьВФНСИзменился И ИзменитьСоставКонтролирующихОрганов);
		
	ДобавитьВТаблицуПроверки(
		Перечисления.ПараметрыПодключенияК1СОтчетности.КодыФНС, 
		ИтоговыеДанныеГосОрганы_КодыФНС(), 
		СдаватьВФНС И КодыФНСИзменились И ИзменитьСоставКонтролирующихОрганов);
		
	// ПФР
	ДобавитьВТаблицуПроверки(
		Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВПФР, 
		ИтоговыеДанныеГосОрганы_СдаватьВОрган("ПФР"), 
		СдаватьВПФРИзменился И ИзменитьСоставКонтролирующихОрганов);
		
	ДобавитьВТаблицуПроверки(
		Перечисления.ПараметрыПодключенияК1СОтчетности.КодПФР, 
		ИтоговыеДанныеГосОрганы_КодПФР(), 
		СдаватьВПФР И КодПФРИзменился И ИзменитьСоставКонтролирующихОрганов);
		
	ДобавитьВТаблицуПроверки(
		Перечисления.ПараметрыПодключенияК1СОтчетности.РегНомерПФР, 
		ИтоговыеДанныеОрганизации_РегНомерПФР(),
		СдаватьВПФР И РегНомерПФРИзменился И ИзменитьСоставКонтролирующихОрганов,
		Организация);
		
	// Росстат
	ДобавитьВТаблицуПроверки(
		Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВРосстат, 
		ИтоговыеДанныеГосОрганы_СдаватьВОрган("Росстат"), 
		СдаватьВРосстатИзменился И ИзменитьСоставКонтролирующихОрганов);
		
	ДобавитьВТаблицуПроверки(
		Перечисления.ПараметрыПодключенияК1СОтчетности.КодРосстата, 
		ИтоговыеДанныеГосОрганы_КодыРосстата(), 
		СдаватьВРосстат И КодыРосстатаИзменились И ИзменитьСоставКонтролирующихОрганов);
		
	// ФСРАР
	ДобавитьВТаблицуПроверки(
		Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФСРАР, 
		ПодатьЗаявкуНаСертификатДляФСРАР, 
		ИзменитьСоставКонтролирующихОрганов И ПодатьЗаявкуНаСертификатДляФСРАРИзменился);
		
	ДобавитьВТаблицуПроверки(
		Перечисления.ПараметрыПодключенияК1СОтчетности.КодРегионаФСРАР, 
		ИтоговыеДанныеОрганизации_КодРегионаФСРАР(),
		ПодатьЗаявкуНаСертификатДляФСРАР И КодРегионаФСРАРИзменился И ИзменитьСоставКонтролирующихОрганов,
		Организация);
		
	// Остальные
 	ДобавитьВТаблицуПроверки(
		Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФСС, 
		СдаватьВФСС, 
		ИзменитьСоставКонтролирующихОрганов И СдаватьВФССИзменился);
		
	ДобавитьВТаблицуПроверки(
		Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВРПН, 
		ПодатьЗаявкуНаПодключениеРПН, 
		ИзменитьСоставКонтролирующихОрганов И ПодатьЗаявкуНаПодключениеРПНИзменился);
	
	ДобавитьВТаблицуПроверки(
		Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФТС, 
		ПодатьЗаявкуНаПодключениеФТС, 
		ИзменитьСоставКонтролирующихОрганов И ПодатьЗаявкуНаПодключениеФТСИзменился);
		
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуДляПодтвержденияДанных_ЭДО()
	
	Если ПоказатьЭлементыПодключенияЭДО(ЭтотОбъект) И ПодключитьЭДО Тогда
		ДобавитьЗаголовокВТаблицу("Подключение к сервису 1С-ЭДО");
		ДобавитьВТаблицуПроверки("Подключиться к сервису 1С-ЭДО", Истина, Истина);
	КонецЕсли;
	
	Если ПоказатьЭлементыПереизданияЭДО(ЭтотОбъект) И ПереиздатьСертификатЭДО Тогда
		ДобавитьЗаголовокВТаблицу("Обновление сертификата 1С-ЭДО");
		ДобавитьВТаблицуПроверки("Обновить сертификат 1С-ЭДО", Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуДляПодтвержденияДанных_Лицензия()
	
	Текст = ?(ПродлитьЛицензиюНа1СОтчетность, "Да (может потребоваться дополнительная оплата)", "Нет");
		
	ДобавитьВТаблицуПроверки(
		Перечисления.ПараметрыПодключенияК1СОтчетности.ПродлениеЛицензии,
		Текст, 
		ПродлитьЛицензиюНа1СОтчетность);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуДляПодтвержденияДанных()
	
	ПорядковыйНомерСтроки = 0;
	
	ТаблицаДанныхЗаявленияНаПодключение.Очистить();
	
	СформироватьТаблицуДляПодтвержденияДанных_Криптография();
	СформироватьТаблицуДляПодтвержденияДанных_Лицензия();
	СформироватьТаблицуДляПодтвержденияДанных_ДанныеОрганизации();
	СформироватьТаблицуДляПодтвержденияДанных_Владелец();
	СформироватьТаблицуДляПодтвержденияДанных_ГосОрганы();
	СформироватьТаблицуДляПодтвержденияДанных_ЭДО();
	
	// Выделяем желтым измененные строки
	ДобавитьЖелтыеСтроки();
	
	ОтметитьНеХранящиесяРеквизиты();
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьНеХранящиесяРеквизиты()
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанныхЗаявленияНаПодключение Цикл
		
		Если ЭтоРеквизитНеХранящийсяВБазе(СтрокаТаблицы.ИзмененныйРеквизит) Тогда
			СтрокаТаблицы.ЭтоРеквизитНеХранящийсяВБазе = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЖелтыеСтроки()
	
	КоличествоСтрок = ТаблицаДанныхЗаявленияНаПодключение.Количество();
	
	Отбор = Новый Структура();
	Отбор.Вставить("ЭтотПараметрИзменился", Истина);
	
	КоличествоИзмененныхСтрок = ТаблицаДанныхЗаявленияНаПодключение.НайтиСтроки(Отбор).Количество();
	
	СтрокаТаблицыПодтверждения = ДобавитьЗаголовокВТаблицу("Изменяемые настройки подключения"); // заголовок
	ПорядковыйНомерСтроки = 0;
	СтрокаТаблицыПодтверждения.ПорядковыйНомерСтроки = 0;
	
	Для сч = 0 По КоличествоСтрок - 1 Цикл
		СтрокаТаблицаДанных = ТаблицаДанныхЗаявленияНаПодключение[сч];
		Если СтрокаТаблицаДанных.ЭтотПараметрИзменился Тогда
			
			ДобавитьВТаблицуПроверки(
				СтрокаТаблицаДанных.ИзмененныйРеквизит, 
				СтрокаТаблицаДанных.ЗначениеРеквизита, 
				СтрокаТаблицаДанных.ЭтотПараметрИзменился, 
				СтрокаТаблицаДанных.ВладелецРеквизита);
				
			СтрокаТаблицаДанных.ВыделятьСтрокуЖелтым = Ложь;
			
		КонецЕсли;
		СтрокаТаблицаДанных.ПорядковыйНомерСтроки = СтрокаТаблицаДанных.ПорядковыйНомерСтроки + КоличествоИзмененныхСтрок + 1;
	КонецЦикла;
	
	СтрокаТаблицыПодтверждения 	= ДобавитьЗаголовокВТаблицу("", Ложь); // заголовок
	ПорядковыйНомерСтроки 		= ПорядковыйНомерСтроки - 1;
	СтрокаТаблицыПодтверждения.ПорядковыйНомерСтроки = КоличествоИзмененныхСтрок + 1; 
	
	ТаблицаДанныхЗаявленияНаПодключение.Сортировать("ПорядковыйНомерСтроки");

КонецПроцедуры

&НаСервере
Функция ДобавитьЗаголовокВТаблицу(НазваниеРеквизита, ВыделятьСтрокуЖирным = Истина)
	
	ПорядковыйНомерСтроки = ПорядковыйНомерСтроки + 1;
		
	НоваяСтрока = ТаблицаДанныхЗаявленияНаПодключение.Добавить();
	НоваяСтрока.НазваниеРеквизита = НазваниеРеквизита;
	НоваяСтрока.ВыделятьСтрокуЖирным = ВыделятьСтрокуЖирным;
	НоваяСтрока.ПорядковыйНомерСтроки	= ПорядковыйНомерСтроки;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Процедура ДобавитьВТаблицуПроверки(
		ИзмененныйРеквизит,  
		ЗначениеРеквизита = "", 
		ЭтотПараметрИзменился = Ложь,
		ВладелецРеквизита = Неопределено,
		РезультатПроверки = Неопределено)
		
	ПорядковыйНомерСтроки = ПорядковыйНомерСтроки + 1;
		
	НоваяСтрока = ТаблицаДанныхЗаявленияНаПодключение.Добавить();
	
	НоваяСтрока.ИзмененныйРеквизит		= ИзмененныйРеквизит;
	НоваяСтрока.НазваниеРеквизита 		= Строка(ИзмененныйРеквизит);
	НоваяСтрока.ЗначениеРеквизита		= ЗначениеРеквизита;
	НоваяСтрока.ЭтотПараметрИзменился 	= ЭтотПараметрИзменился;
	НоваяСтрока.ВыделятьСтрокуЖелтым 	= ЭтотПараметрИзменился;
	НоваяСтрока.ПорядковыйНомерСтроки	= ПорядковыйНомерСтроки;
	
	Если ВладелецРеквизита <> Неопределено Тогда
		НоваяСтрока.ВладелецРеквизита = ВладелецРеквизита;
	КонецЕсли;
	
	Если РезультатПроверки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатПроверки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьНовоеЗначениеРеквизиту(ИмяРеквизита, НаименованиеРеквизита, ИзменяемыйРеквизит, МаскаРеквизита = Неопределено)
	
	ОткрытьФормуРедактированияРеквизита(ИмяРеквизита, НаименованиеРеквизита, ИзменяемыйРеквизит, МаскаРеквизита);

КонецПроцедуры

&НаСервере
Функция ОписаниеТиповРеквизитаФормы(НаименованиеРеквизита)
	
	ВсеРеквизитыФормы = ПолучитьРеквизиты();
	Для каждого РеквизитФормы Из ВсеРеквизитыФормы Цикл
		Если НРег(РеквизитФормы.Имя) = НРег(НаименованиеРеквизита) Тогда
			Возврат РеквизитФормы.ТипЗначения;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРедактированияРеквизита(ИмяРеквизита, НаименованиеРеквизита, ИзменяемыйРеквизит, МаскаРеквизита = Неопределено)
	
	ОписаниеТипаРеквизита = ОписаниеТиповРеквизитаФормы(ИмяРеквизита);
	
	ДополнительныеПараметры = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуРедактированияРеквизитаЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("ИмяРеквизита",          ИмяРеквизита);
	ПараметрыОткрытияФормы.Вставить("НаименованиеРеквизита", НаименованиеРеквизита + ":");
	ПараметрыОткрытияФормы.Вставить("ЗначениеРеквизита",     ИзменяемыйРеквизит);
	ПараметрыОткрытияФормы.Вставить("МаскаРеквизита",        МаскаРеквизита);
	ПараметрыОткрытияФормы.Вставить("ОписаниеТипаРеквизита", ОписаниеТипаРеквизита);
	
	ОткрытьФорму(
		КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаРедактированияРеквизита", 
		ПараметрыОткрытияФормы,
		,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияРеквизитаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяРеквизита = ДополнительныеПараметры.ИмяРеквизита;
	
	Если Результат <> Неопределено Тогда
		
		ЭтаФорма[ИмяРеквизита] = Результат;
		
		СравнитьРеквизитыОрганизацииСИсходными();
		СформироватьТаблицуДляПодтвержденияДанных();
		
		УправлениеФормой();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИзменитьОформлениеЭлементов

&НаСервере
Процедура ИзменитьОформлениеДобавляемыхФлагов()
	
	ОбработкаЗаявленийАбонента.ИзменитьОформлениеДобавляемыхФлагов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеЗаголовкаФормы()

	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ДобавитьОрганизациюВЗаголовок(
		ЭтотОбъект.Заголовок, 
		ИспользуетсяОднаОрганизация, 
		КраткоеНаименование,
		// Разный заголовок!
		НСтр("ru = 'Изменение настроек подключения к 1С-Отчетности';
			|en = 'Change 1C Reporting connection settings'"));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоказатьЭлементыПодключенияЭДО(Форма) 
	
	Возврат НЕ Форма.ЭтоПереизданиеСертификатаЭДО 
		И Форма.ЭтоПодключениеЭДО 
		И Форма.ПодключениеЭДОВозможно
		И ЗначениеЗаполнено(Форма.Организация)
		И Форма.ПоддерживаетсяВторичноеЗаявление
		И НЕ Форма.ЭтоПереходВОблако
		И НЕ Форма.ЭтоУчетнаяЗаписьВМоделиСервиса
		И (Форма.ПереиздатьСертификат 
		ИЛИ ИспользоватьСуществующий(Форма));
		
КонецФункции
	
&НаКлиентеНаСервереБезКонтекста
Функция ПоказатьЭлементыПереизданияЭДО(Форма) 
	
	Возврат Форма.ЭтоПереизданиеСертификатаЭДО 
		И НЕ Форма.ЭтоПодключениеЭДО
		И Форма.ПереизданиеСертификатаЭДОВозможно
		И ЗначениеЗаполнено(Форма.Организация)
		И Форма.ПоддерживаетсяВторичноеЗаявление
		И Форма.ПереиздатьСертификат
		И НЕ Форма.ЭтоПереходВОблако
		И НЕ Форма.ЭтоУчетнаяЗаписьВМоделиСервиса
		И НЕ Форма.ЭтоПереходВКоробку;
		
КонецФункции
	
&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформление1СЭДО(Форма)
	
	ИзменитьОформление1СЭДО_Подключение(Форма);
	ИзменитьОформление1СЭДО_Переиздание(Форма);
	ИзменитьОформление1СЭДО_ПодсказкиНедоступногоЭДО(Форма);
	ИзменитьОформление1СЭДО_Заголовок(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформление1СЭДО_Заголовок(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаЭДО.Видимость = 
		Элементы.ГруппаПодключитьЭДО.Видимость
		ИЛИ Элементы.ФлагПереиздатьСертификатЭДО.Видимость
		ИЛИ Элементы.ПодсказкаНедоступного1СЭДО.Видимость;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформление1СЭДО_Переиздание(Форма)
	
	Элементы = Форма.Элементы;
	
	ПоказатьЭлементыПереиздания = ПоказатьЭлементыПереизданияЭДО(Форма);
		
	Элементы.ФлагПереиздатьСертификатЭДО.Доступность = Форма.ЕстьПравоНастройкиЭДО;
	Элементы.ФлагПереиздатьСертификатЭДО.Видимость   = ПоказатьЭлементыПереиздания;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформление1СЭДО_Подключение(Форма)
	
	Элементы = Форма.Элементы;
	
	ПоказатьЭлементыПодключения = ПоказатьЭлементыПодключенияЭДО(Форма);
	
	Элементы.ФлагПодключитьЭДО.Доступность = Форма.ЕстьПравоНастройкиЭДО;
	Элементы.ГруппаПодключитьЭДО.Видимость = ПоказатьЭлементыПодключения;
	
	ИзменитьОформлениеНастроекПодключения1СЭДО(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформление1СЭДО_ПодсказкиНедоступногоЭДО(Форма)
	
	Элементы = Форма.Элементы;
	
	ПоказатьЭлементыПодключения = ПоказатьЭлементыПодключенияЭДО(Форма);
	ПоказатьЭлементыПереиздания = ПоказатьЭлементыПереизданияЭДО(Форма);
	
	Видимость = 
		НЕ Форма.ЕстьПравоНастройкиЭДО
		И (ПоказатьЭлементыПодключения ИЛИ ПоказатьЭлементыПереиздания);
		
	Элементы.ПодсказкаНедоступного1СЭДО.Видимость = Видимость;
	
	Если Видимость Тогда
		Если Форма.ЭтоПодключениеЭДО Тогда
			Элементы.ПодсказкаНедоступного1СЭДО.Заголовок = НСтр("ru = 'У пользователя недостаточно прав для подключения к 1С-ЭДО';
																|en = 'The user does not have sufficient rights to connect to 1C-EDI'");
		Иначе
			Элементы.ПодсказкаНедоступного1СЭДО.Заголовок = НСтр("ru = 'У пользователя недостаточно прав для обновления сертификата 1С-ЭДО';
																|en = 'The user does not have sufficient rights to update 1C-EDI certificate'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеНастроекПодключения1СЭДО(Форма)
	
	Элементы = Форма.Элементы;
	
	ПоказатьЭлементыПодключения = ПоказатьЭлементыПодключенияЭДО(Форма);
	Элементы.ОткрытьПараметрыПодключения.Видимость = ПоказатьЭлементыПодключения И Форма.ЕстьПравоНастройкиЭДО;
	
	Если Форма.ЭтоПодключениеЭДО Тогда
		
		Элементы.ОткрытьПараметрыПодключения.Доступность = Истина;
		
		Если Форма.ПодключитьЭДО Тогда
			
			НастройкиКорректны = Неопределено;
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПроверитьНастройкиРегистрацииЭДО(Форма.НастройкиЭДО, НастройкиКорректны);
		
			Если НастройкиКорректны = Ложь Тогда
				Элементы.ОткрытьПараметрыПодключения.Заголовок   = НСтр("ru = 'Уточнить настройки';
																		|en = 'Specify settings'");
				Элементы.ОткрытьПараметрыПодключения.ЦветТекста  = Форма.КрасныйЦвет;
			Иначе
				Элементы.ОткрытьПараметрыПодключения.Заголовок   = НСтр("ru = 'Настройки';
																		|en = 'Settings'");
				Элементы.ОткрытьПараметрыПодключения.ЦветТекста  = Форма.СинийЦвет;
			КонецЕсли;
			
		Иначе
			Элементы.ОткрытьПараметрыПодключения.Заголовок   = НСтр("ru = 'Настройки';
																	|en = 'Settings'");
			Элементы.ОткрытьПараметрыПодключения.ЦветТекста  = Форма.СерыйЦвет;
			Элементы.ОткрытьПараметрыПодключения.Доступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеДокументов(Форма)
	
	ОбработкаЗаявленийАбонентаКлиентСервер.ИзменитьОформлениеДокументов(Форма);
	СкрытьГрупповоеДобавлениеДокументов(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьГрупповоеДобавлениеДокументов(Форма)
	
	Сч = 0;
	ВидыДокументов = ОбработкаЗаявленийАбонентаКлиентСервер.ВидыДокументовПоФорме(Форма);
	Для каждого ТекущийВидДокумента Из ВидыДокументов Цикл
		Описание = ТекущийВидДокумента.Значение;
		Если Описание.Видимость Тогда
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	Элементы  = Форма.Элементы;
	ЕстьНесколькоДокументов = Сч > 1;
	
	Элементы.ВыбратьВсе.Видимость = ЕстьНесколькоДокументов;
	Элементы.ПодсказкаКСканКопиям.Видимость = ЕстьНесколькоДокументов;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеМестаХраненияКлючей()
	
	Если ВыбранноеМестоХраненияКлюча = Перечисления.МодельРаботыСКлючами.ВМоделиСервиса Тогда
		ЭтоДолговременныйТокен = СпособПодтвержденияКриптоопераций = Перечисления.СпособыПодтвержденияКриптоопераций.ДолговременныйТокен;
		Если ЭтоДолговременныйТокен Тогда
			Представление = НСтр("ru = 'В программе (операции не подтверждать)';
								|en = 'In the application (do not confirm operations)'");
		Иначе
			Представление = НСтр("ru = 'В программе';
								|en = 'In application'");
		КонецЕсли;
	Иначе
		Представление = Строка(ВыбранноеМестоХраненияКлюча);
	КонецЕсли;
	
	Если ВыбранноеМестоХраненияКлюча = Перечисления.ТипыКриптоПровайдеров.CryptoPro
		И ВключатьЛицензиюКриптоПроВСертификат Тогда
		
		Представление = Представление + НСтр("ru = ' (добавить лицензию в сертификат)';
											|en = ' (add license to certificate)'");
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервере
Процедура ИзменитьОформлениеМестаХраненияКлючей()
	
	ИзменитьОформлениеМестаХраненияКлючей_Настройки();
	ИзменитьОформлениеМестаХраненияКлючей_Картинка();
	ИзменитьОформлениеМестаХраненияКлючей_Флаг();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеМестаХраненияКлючей_Картинка()
	
	Элементы.ПодсказкаВыбораМестаХранения.Видимость = ИзмененныеНастройкиХраненияКлюча().Количество() > 0;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеМестаХраненияКлючей_Флаг()
	
	Элементы.ИзменитьМестоХранения.Доступность = ДоступностьМестаХраненияКлючей();
	
КонецПроцедуры

&НаСервере
Функция ДоступностьМестаХраненияКлючей()
	
	ДоступностьМестаХранения = 
		НЕ ИспользоватьСуществующий(ЭтотОбъект)
		И НЕ СертификатДолженБытьПолученОтГосУЦ;
	
	Возврат ДоступностьМестаХранения;
	
КонецФункции

&НаСервере
Процедура ИзменитьОформлениеМестаХраненияКлючей_Настройки()
	
	Надпись = Элементы.ПоказатьФормуВыбораМестаХранения;
	
	Если ЗначениеЗаполнено(ВыбранноеМестоХраненияКлюча) Тогда
		
		Надпись.Заголовок = ПредставлениеМестаХраненияКлючей();
		Надпись.ЦветТекста = СинийЦвет;
		
	Иначе
		Надпись.Заголовок = НСтр("ru = 'Заполнить';
								|en = 'Fill in'");
		Надпись.ЦветТекста = КрасныйЦвет;
	КонецЕсли;
	
	Надпись.Доступность = ДоступностьМестаХраненияКлючей() И ИзменитьМестоХранения;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеВладельцаСертификата()

	ИзменитьОформлениеВладельцаСертификата_Группа();
	ИзменитьОформлениеВладельцаСертификата_Настройки();
	ИзменитьОформлениеВладельцаСертификата_ТипыВладельца();
	ИзменитьОформлениеВладельцаСертификата_ДоступностьПриВключении();
	ИзменитьОформлениеВладельцаСертификата_Картинка();
		 
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеВладельцаСертификата_ДоступностьПриВключении()

	Элементы.ГруппаВладелец.Доступность = ИзменитьВладельцаСертификата;
		 
КонецПроцедуры
	
&НаСервере
Процедура ИзменитьОформлениеВладельцаСертификата_Картинка()

	ИзмененныеРеквизиты  = ИзмененныеРеквизитыВладельца();
	
	Элементы.ПодсказкаИзменитьВладельца.Видимость = 
		ИзмененныеРеквизиты.Количество() > 0 
		И ЗначениеЗаполнено(ВладелецЭЦП);
		 
КонецПроцедуры	
	
&НаСервере
Процедура ИзменитьОформлениеВладельцаСертификата_ТипыВладельца()

	Элементы.ГруппаВыбораВидаВладельцаЭЦП.Видимость = ЭтоЮридическоеЛицо;
	
	Если ЭтоРуководитель(ЭтотОбъект) Тогда
		Элементы.ВидВладельцаЭЦП.Заголовок = Элементы.ВыбратьДиректора.Заголовок;
		Элементы.ВыбратьДиректора.Пометка = Истина;
	ИначеЕсли ЭтоБухгалтер(ЭтотОбъект) Тогда
		Элементы.ВидВладельцаЭЦП.Заголовок = Элементы.ВыбратьГлБухгалтера.Заголовок;
		Элементы.ВыбратьГлБухгалтера.Пометка = Истина;
	ИначеЕсли ЭтоДругойСотрудник(ЭтотОбъект) Тогда
		Элементы.ВидВладельцаЭЦП.Заголовок = Элементы.ВыбратьСотрудника.Заголовок;
		Элементы.ВыбратьСотрудника.Пометка = Истина;
	КонецЕсли;
		 
КонецПроцедуры
	
&НаСервере
Процедура ИзменитьОформлениеВладельцаСертификата_Настройки()

	Если ЭтоЮридическоеЛицо Тогда
		Представление = Строка(ВладелецЭЦП);
	Иначе
		Представление = НСтр("ru = 'ИП ';
							|en = 'IE '") + Строка(ВладелецЭЦП);
	КОнецЕсли;

	ИзменитьОформлениеГиперссылки("ДекорацияВладелецЭЦП", Представление, Истина, Истина);
	Элементы.ВыбратьДиректора.Пометка 		= Ложь;
	Элементы.ВыбратьГлБухгалтера.Пометка 	= Ложь;
	Элементы.ВыбратьСотрудника.Пометка 		= Ложь;
		 
КонецПроцедуры
	
&НаСервере
Процедура ИзменитьОформлениеВладельцаСертификата_Группа()

	Элементы.ГруппаИзменитьВладельцаСертификата.Доступность = Истина;
		 
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеПодсказкиДляГалкиПродлитьЛицензиюНа1СОтчетность()
	
	Надпись = Элементы.ПодсказкаПоПродлениюЛицензии;
	
	// Определяем цвет
	Надпись.ЦветТекста = Новый Цвет;
	
	// Определяем заголовок
	ТекстЗаголовка = "";
	Если ПродлитьЛицензиюНа1СОтчетностьИсходный Тогда
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		КоличествоОставшегосяВремени = КонтекстЭДОСервер.ТекстЧерезСколькоЛетМесяцевНедельДней(ТекущаяДатаСервер, ЛицензияДатаОкончания, "", "");
		Надпись.ЦветТекста = КрасныйЦвет;
		
		Если КоличествоОставшегосяВремени = Неопределено Тогда
			ТекстЗаголовка = НСтр("ru = 'Истекла %1';
									|en = 'Expired %1'");
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1", Формат(ЛицензияДатаОкончания,"ДЛФ=DD"));
		Иначе
			ТекстЗаголовка = НСтр("ru = 'Истекает через %1';
									|en = 'Expires in %1'");
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1", КоличествоОставшегосяВремени);
		КонецЕсли;
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Действует до %1';
								|en = 'Valid until %1'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1", Формат(ЛицензияДатаОкончания,"ДЛФ=DD"));
	КонецЕсли;
	Надпись.Заголовок = ТекстЗаголовка;
	
	Надпись.Доступность = ПродлитьЛицензиюНа1СОтчетность;
		 
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеРеквизитовОрганизации()
	
	ИзмененныеРеквизиты = ИзмененныеРеквизитыОрганизации();
	
	ИзменитьОформлениеРеквизитовОрганизации_Настройки(ИзмененныеРеквизиты);
	ИзменитьОформлениеРеквизитовОрганизации_Картинка(ИзмененныеРеквизиты);
	ИзменитьОформлениеРеквизитовОрганизации_Интервал();
	ИзменитьОформлениеДобавляемыхФлагов();
	ОбработкаЗаявленийАбонентаКлиентСервер.ИзменитьОформлениеБюджтополучателя(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеРеквизитовОрганизации_Интервал()
	
	Если ЭтоЮридическоеЛицо Тогда
		Элементы.ГруппаОрганизация.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	Иначе
		Элементы.ГруппаОрганизация.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеРеквизитовОрганизации_Картинка(ИзмененныеРеквизиты)
	
	Элементы.КартинкаРеквизитыОрганизации.Видимость = ИзмененныеРеквизиты.Количество() > 0;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеРеквизитовОрганизации_Настройки(ИзмененныеРеквизиты)
	
	ИзменитьОформлениеИзменившихсяРеквизитов(
		Элементы.ПодсказкаИзменитьРеквизитыПодключенияК1СОтчетности, 
		ИзмененныеРеквизиты, 
		ИзменитьРеквизитыПодключенияК1СОтчетности);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПодчиненныеЭлементыРекурсивно(Родительский, Подчиненные)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Родительский, "ПодчиненныеЭлементы") Тогда
		Для каждого ПодчиненныеРодительского Из Родительский.ПодчиненныеЭлементы Цикл
			Подчиненные.Добавить(ПодчиненныеРодительского);
			ПолучитьПодчиненныеЭлементыРекурсивно(ПодчиненныеРодительского, Подчиненные)
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеИзменившихсяРеквизитов(Надпись, ИзмененныеРеквизиты, ДоступностьРеквизита)
	
	// Определяем заголовок
	Если ИзмененныеРеквизиты.Количество() = 1 Тогда
		
		Надпись.Заголовок = НСтр("ru = 'Изменился реквизит - ';
								|en = 'Changed attribute - '") + ИзмененныеРеквизиты[0].Представление;
		
	ИначеЕсли ИзмененныеРеквизиты.Количество() = 1 Тогда
		
		Надпись.Заголовок = 
			НСтр("ru = 'Изменились ';
				|en = 'Changed '") 
			+ ИзмененныеРеквизиты[0].Представление 
			+ НСтр("ru = ' и ';
					|en = ' and'") 
			+ ИзмененныеРеквизиты[1].Представление;
			
	ИначеЕсли ИзмененныеРеквизиты.Количество() >= 2 Тогда
		
		Представление = ДлительнаяОтправкаКлиентСервер.ЧислоИПредметИсчисления(
			ИзмененныеРеквизиты.Количество(),
			НСтр("ru = 'реквизит';
				|en = 'attribute'"),
			НСтр("ru = 'реквизита';
				|en = 'attributes'"),
			НСтр("ru = 'реквизитов';
				|en = 'attributes'"),
			"м");
			
		Если СтрНайти(Представление, НСтр("ru = 'реквизитов';
											|en = 'attributes'")) > 0
			ИЛИ СтрНайти(Представление, НСтр("ru = 'реквизита';
											|en = 'attributes'")) > 0 Тогда
			Представление = НСтр("ru = 'Изменилось ';
								|en = 'Changed '") + Представление;
		Иначе
			Представление = НСтр("ru = 'Изменился ';
								|en = 'Changed '") + Представление;
		КонецЕсли;
		
		Надпись.Заголовок = Представление;
		
	Иначе
		Надпись.Заголовок = НСтр("ru = 'Реквизиты не менялись';
								|en = 'Attributes were not changed'");
	КонецЕсли;
	
	Надпись.Доступность = ДоступностьРеквизита;
	Надпись.Гиперссылка = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОблако(Форма)
	
	Если НЕ Форма.ДоступнаЭлектроннаяПодписьВМоделиСервиса Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоОблако = 
		Форма.ЭтоПереходВОблако 
		ИЛИ Форма.ЭтоУчетнаяЗаписьВМоделиСервиса И НЕ Форма.ЭтоПереходВКоробку 
		ИЛИ ИспользоватьСуществующий(Форма) И Форма.ВключаемыйСертификатОблачный;
		
	Возврат ЭтоОблако;
	
КонецФункции

&НаСервере
Процедура ИзменитьОформлениеУведомлений()
	
	ИзменитьОформлениеУведомлений_Группа();
	ИзменитьОформлениеУведомлений_Настройки();
	ИзменитьОформлениеУведомлений_Картинка();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеУведомлений_Настройки()
	
	// Заголовок
	Элементы.НастройкиУведомлений.Заголовок = ПредставлениеУведомлений();
	
	// Цвет
	Если НЕ УведомленияЗаполнены() ИЛИ НЕ ПодтверждениеКонтактовВыполнено() Тогда 
		Элементы.НастройкиУведомлений.ЦветТекста = КрасныйЦвет;
	Иначе
		Элементы.НастройкиУведомлений.ЦветТекста = СинийЦвет;
	КонецЕсли;
	
	// Доступность
	Элементы.НастройкиУведомлений.Доступность = ИзменитьНастройкиУведомлений;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеУведомлений_Группа()
	
	УведомляенияМожноНастраивать = 
		ОператорПоддерживаетСМСУведомление 
		ИЛИ ЭтоОблако(ЭтотОбъект) И НЕ ИспользоватьСуществующий(ЭтотОбъект);
	
	Элементы.ГруппаИзмененитьМобильныйТелефон.Доступность = УведомляенияМожноНастраивать;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеУведомлений_Картинка()
	
	Элементы.ПодсказкаИзменитьНастройкиУведомлений.Видимость   = ИзмененныеРеквизитыУведомлений().Количество() > 0;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеТелефона(Телефон)
	
	Возврат ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(Телефон);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФорматироватьТелефон(Телефон)
	
	Возврат ОбработкаЗаявленийАбонентаКлиентСервер.ЦифрыИзСтроки(Телефон, Истина);
	
КонецФункции

&НаСервере
Функция ПризнакПодключеныЛиУведомления()
	
	Если ПолучатьУведомления И ЗначениеЗаполнено(ТелефонМобильный) Тогда
		Если ПолучатьУведомления Тогда
			ПризнакПодключеныЛиУведомления = НСтр("ru = ' (SMS подключены)';
													|en = ' (SMS enabled)'");
		Иначе
			ПризнакПодключеныЛиУведомления = НСтр("ru = ' (SMS не подключены)';
													|en = ' (SMS not enabled)'");
		КонецЕсли;
	Иначе
		ПризнакПодключеныЛиУведомления = "";
	КонецЕсли;
	
	Возврат ПризнакПодключеныЛиУведомления;

КонецФункции

&НаСервере
Функция ПредставлениеУведомлений()
	
	Если НЕ УведомленияЗаполнены() Тогда
		
		Представление = НСтр("ru = 'Заполнить';
							|en = 'Fill in'");
		
	ИначеЕсли ЭтоОблако(ЭтотОбъект) Тогда
		
		Представление = ПредставлениеУведомленийВОблаке();
		
	Иначе
		
		Представление = ПредставлениеУведомленийВКоробке();
		
	КонецЕсли;
	
	Представление = СокрЛП(Представление);
	Возврат Представление;

КонецФункции

&НаСервере
Функция ПредставлениеУведомленийВКоробке()
	
	Если ЗначениеЗаполнено(ТелефонМобильный) И ПолучатьУведомления Тогда
		
		Представление = 
			ТелефонСПризнакомУведомлений(ТелефонМобильный) 
			+ ", " 
			+ ЭлектроннаяПочта;
			
	Иначе
		Представление = ЭлектроннаяПочта;
	КонецЕсли;
	
	Представление = СокрЛП(Представление);
	Возврат Представление;

КонецФункции

&НаСервере
Функция ТелефонСПризнакомУведомлений(Телефон)
	
	Возврат Телефон + ПризнакПодключеныЛиУведомления();

КонецФункции

&НаСервере
Функция ПредставлениеУведомленийВОблаке()
	
	УказанОтдельныйМобильныйТелефон = 
	    ПолучатьУведомления
		И ЗначениеЗаполнено(ТелефонМобильный)
		И ТелефонМобильныйДляПаролей <> ТелефонМобильный;
		
	Если НЕ ПодтверждениеКонтактовВыполнено() Тогда
		
		Представление = НСтр("ru = 'Подтвердить';
							|en = 'Confirm'");
		
	ИначеЕсли УказанОтдельныйМобильныйТелефон Тогда
		
		Представление = 
			НСтр("ru = 'пароли: ';
				|en = 'passwords: '")  
			+ ТелефонМобильныйДляПаролей
			+ ", " 
			+ ЭлектроннаяПочтаДляПаролей
			+ Символы.ПС 
			+ НСтр("ru = 'уведомления: ';
					|en = 'notifications: '") 
			+ ТелефонСПризнакомУведомлений(ТелефонМобильный);
			
	Иначе
		
		Представление = 
			ТелефонСПризнакомУведомлений(ТелефонМобильныйДляПаролей) 
			+ ", "
			+ ЭлектроннаяПочтаДляПаролей;
			
 	КонецЕсли;
	
	Представление = СокрЛП(Представление);
	Возврат Представление;


КонецФункции

&НаСервере
Функция ПодтверждениеКонтактовВыполнено()
	
	Возврат 
		ЭтоОблако(ЭтотОбъект)
		// телефон
		И (ПроверкаТелефонДляПаролей <> Неопределено 
		И ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено 
		ИЛИ ПроверкаТелефонДляПаролей = Неопределено)
		// почта
		И (ПроверкаЭлектроннаяПочтаДляПаролей <> Неопределено 
		И ПроверкаЭлектроннаяПочтаДляПаролей.ПодтверждениеВыполнено 
		ИЛИ ПроверкаЭлектроннаяПочтаДляПаролей = Неопределено)
		ИЛИ НЕ ЭтоОблако(ЭтотОбъект)
		ИЛИ ИспользоватьСуществующий(ЭтотОбъект);
		
КонецФункции

&НаСервере
Функция УведомленияЗаполнены()
	
	Если ЭтоОблако(ЭтотОбъект) Тогда
		
		Заполнены = ЗначениеЗаполнено(ТелефонМобильныйДляПаролей) 
			И ЗначениеЗаполнено(ЭлектроннаяПочтаДляПаролей);
		
	Иначе
		
		// Телефон в коробке не обязателен, нужен только для СМС-уведомлений
		Заполнены = ЗначениеЗаполнено(ЭлектроннаяПочта);
		
	КонецЕсли;
	
	Возврат Заполнены;

КонецФункции

&НаСервере
Процедура ИзменитьОформлениеПодписания()
	
	ВидноПодписание = УстановленХотяБыОдинФлаг(ЭтотОбъект);
	Элементы.ГруппаПодписание.Видимость = ВидноПодписание;
	
	Если ВидноПодписание Тогда
		
		ВозможностьПодписания = ВозможностьПодписания();
		
		ВозможноЭлектронное = ВозможностьПодписания.ВозможноЭлектронное;
		ВозможноБумажное    = ВозможностьПодписания.ВозможноБумажное;
		ОписаниеОшибки      = ВозможностьПодписания.ОписаниеОшибки;
		
		// В электронном виде
		Элементы.ЭлектроннойПодписью.Доступность = ВозможноЭлектронное;
		
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			Элементы.ЭлектроннойПодписью.Подсказка = ОписаниеОшибки;
			Элементы.ЭлектроннойПодписью.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Иначе
			Элементы.ЭлектроннойПодписью.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		КонецЕсли;
			
		// В бумажном виде
		Элементы.ВБумажномВиде.Доступность = ВозможноБумажное;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеГиперссылки(ИмяЭлемента, Знач Значение, ОбязательныйДляЗаполнения, Доступно)
	
	Элемент = Элементы[ИмяЭлемента];
	
	ПроверяемоеЗначение	= Строка(Значение);
	ПроверяемоеЗначение	= СтрЗаменить(ПроверяемоеЗначение,"-","");
	ПроверяемоеЗначение	= СтрЗаменить(ПроверяемоеЗначение,",","");
	ПроверяемоеЗначение	= СтрЗаменить(ПроверяемоеЗначение," ","");
	
	ЗначениеЗаполнено 	= ЗначениеЗаполнено(ПроверяемоеЗначение);
	Элемент.Доступность = Доступно;
	
	// Заголовок
	Если ЗначениеЗаполнено Тогда
		Элемент.Заголовок = Строка(Значение);
	Иначе
		Элемент.Заголовок = "Заполнить";
	КонецЕсли;
	
	// Цвет
	Если НЕ Доступно Тогда
		Элемент.ЦветТекста 	= СерыйЦвет;
	ИначеЕсли ЗначениеЗаполнено Тогда
		Элемент.ЦветТекста 	= СинийЦвет;
	Иначе
		Элемент.ЦветТекста 	= ?(ОбязательныйДляЗаполнения, КрасныйЦвет, СинийЦвет);
	КонецЕсли;
	
	Элемент.Гиперссылка = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеДействияССертификатом()
	
	ИзменитьОформлениеДействияССертификатом_Настройка();
	ИзменитьОформлениеДействияССертификатом_Картинка();
	ИзменитьОформлениеПодсказкиСУЦ();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеДействияССертификатом_Картинка()
	
	Надпись = Элементы.ПодсказкаИзменитьРеквизитыСертификата;
	
	ИзмененныеРеквизиты = ИзмененныеРеквизитыСертификата();
	
	Надпись.Видимость = 
		ИзмененныеРеквизиты.Количество() > 0
		И НЕ ИспользоватьСуществующий(ЭтотОбъект)
		И СертификатДоступен
		И НЕ СертификатДолженБытьПолученОтГосУЦ;
		
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеДействияССертификатом_Настройка()
	
	Надпись = Элементы.ДействиеССертификатом;
	
	Если СпособПолученияСертификата = Перечисления.СпособПолученияСертификата.ИздатьНовый Тогда
		
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		КоличествоОставшегосяВремени = КонтекстЭДОСервер.ТекстЧерезСколькоЛетМесяцевНедельДней(
			ТекущаяДатаСервер, 
			СертификатДействителенПо, 
			"", 
			"");
 		
		Если СвойстваСертификата = Неопределено ИЛИ НЕ СертификатДоступен Тогда
			Надпись.Заголовок = НСтр("ru = 'Переиздать (сертификат недоступен)';
									|en = 'Reissue (certificate is unavailable)'");
			Надпись.ЦветТекста = СинийЦвет;
		ИначеЕсли ПродлитьСертификатИсходный И КоличествоОставшегосяВремени = Неопределено Тогда
			ТекстЗаголовка = НСтр("ru = 'Продлить, истек %1';
									|en = 'Extend, expired on %1'");
			Надпись.Заголовок = СтрЗаменить(ТекстЗаголовка, "%1", Формат(СертификатДействителенПо, "ДЛФ=DD"));
			Надпись.ЦветТекста = КрасныйЦвет;
		ИначеЕсли ПродлитьСертификатИсходный Тогда
			ТекстЗаголовка = НСтр("ru = 'Продлить, истекает через %1';
									|en = 'Extend, expires in %1'");
			Надпись.Заголовок = СтрЗаменить(ТекстЗаголовка, "%1", КоличествоОставшегосяВремени);
			Надпись.ЦветТекста = КрасныйЦвет;
		Иначе
			Надпись.Заголовок = НСтр("ru = 'Переиздать (продлить)';
									|en = 'Reissue (extend)'");
			Надпись.ЦветТекста = СинийЦвет;
		КонецЕсли;
		
	ИначеЕсли ВключаемыйСертификат = Неопределено Тогда
		
		Надпись.Заголовок  = НСтр("ru = 'Выбрать';
									|en = 'Select'");
		
		Если ПереиздатьСертификат Тогда
			Надпись.ЦветТекста = КрасныйЦвет;
		Иначе
			Надпись.ЦветТекста = СинийЦвет;
		КонецЕсли;
			
	ИначеЕсли СпособПолученияСертификата = Перечисления.СпособПолученияСертификата.ИспользоватьСуществующий Тогда
		
		ПредставлениеВключаемогоСертификата = ДокументооборотСКОКлиентСервер.ПредставлениеСертификата(ВключаемыйСертификат);
		Надпись.Заголовок  = ПредставлениеВключаемогоСертификата;
		Надпись.ЦветТекста = СинийЦвет;
		
	Иначе
		
		Надпись.Заголовок  = НСтр("ru = 'Настроить';
									|en = 'Configure'");
		Надпись.ЦветТекста = КрасныйЦвет;
		
	КонецЕсли;
	
	Надпись.Доступность = ПереиздатьСертификат;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеПодсказкиСУЦ()
	
	Элемент = Элементы.ГруппаСертификат;
	
	Если ВозможноБесшовноеПолучениеСертификатаВДУЦ И НЕ ИспользоватьСуществующий(ЭтотОбъект) Тогда
		Элемент.РасширеннаяПодсказка.Заголовок = ОбработкаЗаявленийАбонентаКлиентСервер.ПодсказкаПриБесшовномПолученииСертификатаВДУЦ(Истина);
		Элемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	ИначеЕсли ЭтоПолучениеЭПС2022Г И ЭтоБюджетополучатель Тогда
		Элемент.РасширеннаяПодсказка.Заголовок = ОбработкаЗаявленийАбонентаКлиентСервер.ПодсказкаПриВыбореСертификатаКазначейства();
		Элемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Иначе
		Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	ИзменитьОформлениеЕслиНеПоддерживаетсяВторичное();
	
	// Сертификат
	ИзменитьОформлениеДействияССертификатом();
	ИзменитьОформлениеМестаХраненияКлючей();
	// Лицензия
	ИзменитьОформлениеПодсказкиДляГалкиПродлитьЛицензиюНа1СОтчетность();
	// Владелец сертификата
	ИзменитьОформлениеВладельцаСертификата();
	// Реквизиты организации
	ИзменитьОформлениеРеквизитовОрганизации();
	// Направления
	ИзменитьОформлениеНаправлений();
	// Мобильный
	ИзменитьОформлениеУведомлений();
	// ЭДО
	ИзменитьОформление1СЭДО(ЭтотОбъект);
	// Сканы
	ИзменитьОформлениеДокументов(ЭтотОбъект);
	// Прочее
	ИзменитьОформлениеКнопокНавигации();
	ИзменитьОформлениеЗаголовкаФормы();
	ИзменитьОформлениеПодписания();	
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеЕслиНеПоддерживаетсяВторичное()
	
	Если Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ОсновнаяСтраница Тогда
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Элементы.ВариантыОсновнойПанели.ТекущаяСтраница = Элементы.ОрганизацияНеЗаполнена;
		ИначеЕсли ПоддерживаетсяВторичноеЗаявление Тогда
			Элементы.ВариантыОсновнойПанели.ТекущаяСтраница = Элементы.ГруппаВыбораДействия;
		Иначе
			Элементы.ВариантыОсновнойПанели.ТекущаяСтраница = Элементы.ОтправкаЗапрещена;
		КонецЕсли;
		
		Элементы.ГруппаНижняяПанель.Видимость = ПоддерживаетсяВторичноеЗаявление И ЗначениеЗаполнено(Организация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеНаправлений() Экспорт
	
	ИзменитьОформлениеНаправлений_Настройки();
	ИзменитьОформлениеНаправлений_Картинка();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеНаправлений_Настройки()
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ИзменитьОформлениеНаправлений(ЭтотОбъект);
	Элементы.УказатьНаправления.Доступность = ИзменитьСоставКонтролирующихОрганов;
	
КонецПроцедуры
	
&НаСервере
Процедура ИзменитьОформлениеНаправлений_Картинка()
	
	ИзмененныеРеквизиты = ИзмененныеНаправления();
	
	Элементы.ПодсказкаИзменитьНаправления.Видимость = 
		ИзмененныеРеквизиты.Количество() > 0 
		И НЕ ИспользоватьСуществующий(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

&НаСервере
Процедура СравнитьРеквизитыИПроверитьНеобходимостьУстановкиГалок()
	
	СравнитьРеквизитыОрганизацииСИсходными();
	СделатьНаправленияСдачиОтчетностиРавнымиИсходным();
	СравнитьНаправленияИКодыСдачиОтчетностиСИсходными();
	ПроверитьНеобходимостьУстановкиГалки_ИзменитьСоставКонтролирующихОрганов();
	ПроверитьНеобходимостьУстановкиГалки_ИзменитьРеквизитыОрганизации();
	ПроверитьНеобходимостьУстановкиГалки_ИзменитьВладельцаСертификата();
	ПроверитьНеобходимостьУстановкиГалки_ИзменитьНастройкиУведомлений();
	ПроверитьНеобходимостьУстановкиГалки_ПереиздатьСертификат();
	ПереопределитьГалкиНаОснованииВходящихФлаговМастера();
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьДанныеИзИсходногоЗаявления()
	
	ВладелецЭЦПТип = Реквизит.ВладелецЭЦПТип;
	ЗаполнитьДанныеСотрудника(Ложь);
	
	// Предварительно восстанавливаем флаги, т.к. без флага переиздания 
	// сертификата не определяется использование существующего сертификата
	СкопироватьФлажкиИзИсходногоЗаявления_ВосстановитьФлаги();
	
	СкопироватьИдентификаторИзИсходногоЗаявления();
	СкопироватьРеквизитыИзИсходногоЗаявления_Организация();
	СкопироватьРеквизитыИзИсходногоЗаявления_Криптография();
	СкопироватьРеквизитыИзИсходногоЗаявления_Владелец();
	СкопироватьРеквизитыИзИсходногоЗаявления_ГосОрганы();
	СкопироватьДокументыИзИсходногоЗаявления();
	
	// Сбрасываем все установленнные флажки
	СброситьВсеФлажки(ЭтотОбъект); 
	
	// Сравниваем по новой чтобы понять, что изменилось
	СравнитьРеквизитыОрганизацииСИсходными();
	СравнитьНаправленияИКодыСдачиОтчетностиСИсходными();
	
	// Копируем флажки из заявления
	СкопироватьФлажкиИзИсходногоЗаявления();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРеквизитыОператора()
	
	СтруктураДанныхСпецоператорыСвязи = Новый Структура();
	СтруктураДанныхСпецоператорыСвязи.Вставить("СпецоператорыСвязи",                   ДанныеЗаполнения.СпецоператорыСвязи);
	СтруктураДанныхСпецоператорыСвязи.Вставить("Макет",                                ДанныеЗаполнения.МакетПараметрыСпецоператоровСвязи);
	СтруктураДанныхСпецоператорыСвязи.Вставить("ТекстМакетаСоглашение",                ДанныеЗаполнения.ТекстМакетаСоглашение);
	СтруктураДанныхСпецоператорыСвязи.Вставить("ЗначениеЗаполненияСпецоператораСвязи", ДанныеЗаполнения.ЗначениеЗаполненияСпецоператораСвязи);

КонецПроцедуры

&НаСервере
Процедура СкопироватьДокументыИзИсходногоЗаявления()
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ЗаполнитьДокументыИзСкопированногоЗаявления(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьВозможностьБезбумажногоПродления()
	
	ЭлектронноеВозможно = ВозможностьПодписания().ВозможноЭлектронное;
	
	Если ЭлектронноеВозможно Тогда
		ПереключитьНаЭлектронноеПодписание(ЭтотОбъект);
	Иначе
		ПереключитьНаБумажноеПодписание(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИнициализироватьДанныеСпецоператора(
		УчетнаяЗапись, 
		ОператорПоддерживаетСМСУведомление = Неопределено, 
		ОператорПоддерживаетФСРАР = Неопределено, 
		ОператорПоддерживаетРПН = Неопределено, 
		ОператорПоддерживаетФТС = Неопределено)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ОператорПоддерживаетСМСУведомление = (ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(УчетнаяЗапись.СпецоператорСвязи, "ПризнакПоддержкиСМС") = "Истина");
	
	ОператорПоддерживаетФСРАРЗначение = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(УчетнаяЗапись.СпецоператорСвязи, "ФСРАРПризнак");
	ОператорПоддерживаетФСРАР = (ОператорПоддерживаетФСРАРЗначение = Истина ИЛИ ОператорПоддерживаетФСРАРЗначение = "Истина");
	
	ОператорПоддерживаетРПНЗначение = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(УчетнаяЗапись.СпецоператорСвязи, "РПНПризнак");
	ОператорПоддерживаетРПН = (ОператорПоддерживаетРПНЗначение = Истина ИЛИ ОператорПоддерживаетРПНЗначение = "Истина");
	
	ОператорПоддерживаетФТСЗначение = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(УчетнаяЗапись.СпецоператорСвязи, "ФТСПризнак");
	ОператорПоддерживаетФТС = (ОператорПоддерживаетФТСЗначение = Истина ИЛИ ОператорПоддерживаетФТСЗначение = "Истина");
	
	Возврат УчетнаяЗапись.СпецоператорСвязи;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИспользованиеДолговременногоТокена()
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ЗаполнитьИспользованиеДолговременногоТокена(ЭтотОбъект);
	
	СпособПодтвержденияКриптооперацийИсходный = СпособПодтвержденияКриптоопераций;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнициализироватьСпособыДоставкиПаролей(Идентификатор)
	
	Попытка
		Возврат СервисКриптографии.ПолучитьНастройкиПолученияВременныхПаролей(Идентификатор);
	Исключение
		Возврат Новый Структура("Телефон, ЭлектроннаяПочта", "", "");
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьРеквизитыНеХранящиесяВБазе()
	
	РеквизитыНеХранящиесяВБазе = Новый ФиксированныйМассив(ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.РеквизитыНеХранящиесяВБазе(Организация));
		
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСписокВыбораОрганизаций()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Организации.Ссылка КАК Ссылка,
		|	"""" КАК Представление
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.УчетнаяЗаписьОбмена <> ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиДокументооборота.ПустаяСсылка)
		|	И Организации.ВидОбменаСКонтролирующимиОрганами = ЗНАЧЕНИЕ(Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организации.Ссылка";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТаблицы Из Таблица Цикл
		СтрокаТаблицы.Представление = Строка(СтрокаТаблицы.Ссылка);
	КонецЦикла; 
	
	Таблица.Сортировать("Представление");
	
	Организации = Таблица.ВыгрузитьКолонку("Ссылка");
	
	Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(Организации);
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(Параметры)
	
	ИнициализироватьКонстантныеЗначения();
	ИнициализироватьНастройкиРежимаОграниченнойФункциональности();
	ИнициализацияПараметров(Параметры);
	ИнициализацияРасчитываемыхЗначений();
	ИнициализироватьСписокВыбораОрганизаций();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ПрединициализацияРеквизитовОрганизацииНаСервере(Истина);
	КонецЕсли;
	
	Элементы.ГруппаНижняяПанель.Видимость = Ложь;
	Элементы.РамкаОрганизации.Видимость = НЕ ИспользуетсяОднаОрганизация;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьНастройкиРежимаОграниченнойФункциональности()
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.УстановитьНастройкиРежимаОграниченнойФункциональности(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияРасчитываемыхЗначений()
	
	ЗаявлениеСозданоКопированием = ЗначениеЗаполнено(Реквизит);
	ИнициализацияДляЭПВМоделиСервиса();
	
	ИменаУЦКалуги = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ИменаУЦКалуги();
	УчетнаяЗапись = УчетнаяЗаписьОрганизации(Организация);
	
	Если ЭтоОткрытиеЗаявления Тогда
		ЭтоПолучениеЭПС2022Г = ОбработкаЗаявленийАбонента.ЭтоПолучениеЭПС2022Г(Реквизит.Дата);
	Иначе
		ЭтоПолучениеЭПС2022Г = ОбработкаЗаявленийАбонента.ЭтоПолучениеЭПС2022Г(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ИнициализацияЭДО();
	
КонецПроцедуры

&НаСервере
Функция ИнициализацияДляЭПВМоделиСервиса() ЭКспорт
	
	ДоступнаЭлектроннаяПодписьВМоделиСервиса = ОбработкаЗаявленийАбонента.ДоступнаЭлектроннаяПодписьВМоделиСервиса(ЭтотОбъект);
	
	Если НЕ ДоступнаЭлектроннаяПодписьВМоделиСервиса Тогда
		
		СпособПодтвержденияКриптоопераций = Неопределено;
		ПроверенДоступДляТокена			  = Ложь;
			
	КонецЕсли;
		
КонецФункции

&НаСервере
Процедура ИнициализацияЭДО()
	
	ЕстьПравоНастройкиЭДО = Истина;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ЕстьПравоНастройкиЭДО(ЕстьПравоНастройкиЭДО);
	
	СсылкаОписаниеСервисаЭДО = "";
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.АдресСтраницыСУсловиямиПодключения(СсылкаОписаниеСервисаЭДО);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияПараметров(Параметры)
	
	Если Параметры.Свойство("АктивироватьФлагиМастера") Тогда
		ВходящиеФлагиМастера = Параметры.АктивироватьФлагиМастера.ФлагиВМастер;
	КонецЕсли;
	
	Реквизит      = Параметры.Реквизит;
	Организация   = ИнициализироватьОрганизацию(Параметры);
	Параметры.Свойство("ЭтоОткрытиеЗаявления", ЭтоОткрытиеЗаявления);
	Параметры.Свойство("НовыйСертификат",      НовыйСертификат);
	
	ПриОткрытииЗапрошеноПродлениеСертификата 	= Параметры.ПриОткрытииЗапрошеноПродлениеСертификата;
	ПриОткрытииЗапрошеноПродлениеЛицензии 		= Параметры.ПриОткрытииЗапрошеноПродлениеЛицензии;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьИсходныеРеквизиты1СОтчетности(УчетнаяЗапись)

	// Обновляем информацию по учетной записи
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ДопРеквизитыУчетнойЗаписи = КонтекстЭДОСервер.ДополнительныеРеквизитыУчетнойЗаписи(УчетнаяЗапись);
	
	Если НЕ ЗначениеЗаполнено(ДопРеквизитыУчетнойЗаписи) Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьИсходныеРеквизиты1СОтчетности_Организация(ДопРеквизитыУчетнойЗаписи);
	ИнициализироватьИсходныеРеквизиты1СОтчетности_ВладелецЭП(ДопРеквизитыУчетнойЗаписи);
	ИнициализироватьИсходныеРеквизиты1СОтчетности_ПаспортныеДанные();
	ИнициализироватьИсходныеРеквизиты1СОтчетности_ПризнакИностраннойОрганизации();
	ИнициализироватьИсходныеРеквизиты1СОтчетности_Лицензия(УчетнаяЗапись, ДопРеквизитыУчетнойЗаписи);
	ИнициализироватьИсходныеРеквизиты1СОтчетности_ГосОрганы(ДопРеквизитыУчетнойЗаписи);
	ИнициализироватьИсходныеРеквизиты1СОтчетности_Криптография(ДопРеквизитыУчетнойЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьИсходныеРеквизиты1СОтчетности_Криптография(ДопРеквизитыУчетнойЗаписи)

	ТипКриптопровайдераИсходный 		= ДопРеквизитыУчетнойЗаписи.ТипКриптопровайдера;
	ЛицензияКриптоПроВключенаВСертификат= ДопРеквизитыУчетнойЗаписи.ЛицензияКриптоПроВключенаВСертификат;

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьИсходныеРеквизиты1СОтчетности_Организация(ДопРеквизитыУчетнойЗаписи)

	КраткоеНаименованиеИсходное = ДопРеквизитыУчетнойЗаписи.КраткоеНаименование;
	КППИсходный 				= ДопРеквизитыУчетнойЗаписи.КПП;
	ОГРНИсходный 				= ДопРеквизитыУчетнойЗаписи.ОГРН;
	ТелефонОсновнойИсходный 	= ДопРеквизитыУчетнойЗаписи.ТелефонОсновной;
	ЭтоНотариусАдвокатИлиГКФХ 	= ДопРеквизитыУчетнойЗаписи.ЭтоНотариусАдвокатИлиГКФХ;

	ИнициализироватьИсходныеРеквизиты1СОтчетности_Адрес();

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьИсходныеРеквизиты1СОтчетности_Адрес()
	
	ОбластьИсходная = "";
	ГородИсходный	= "";
	УлицаИсходная	= "";
	
	Если ЭтоОблако(ЭтотОбъект) Тогда
		
		ДанныеСертификата = ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.ПолучитьСертификатПоОрганизации(Организация);
		
		Субъект = ДанныеСертификата.Субъект;
		
		Субъект.Свойство("ST", ОбластьИсходная);
		Субъект.Свойство("L", ГородИсходный);
		Субъект.Свойство("STREET", УлицаИсходная);
		
	ИначеЕсли ДвДанныеЛокальногоСертификата <> Неопределено Тогда
		
		ДанныеСертификата = Новый СертификатКриптографии(ДвДанныеЛокальногоСертификата);
		Субъект = ДанныеСертификата.Субъект;
		
		Субъект.Свойство("OID2_5_4_8", ОбластьИсходная);
		Субъект.Свойство("OID2_5_4_7", ГородИсходный);
		Субъект.Свойство("OID2_5_4_9", УлицаИсходная);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьИсходныеРеквизиты1СОтчетности_Лицензия(УчетнаяЗапись, ДопРеквизитыУчетнойЗаписи)

	ЛицензияНаименование  = УчетнаяЗапись.ЛицензияНаименование;
	ЛицензияДатаНачала    = УчетнаяЗапись.ЛицензияДатаНачала;
	ЛицензияДатаОкончания = УчетнаяЗапись.ЛицензияДатаОкончания + 24*60*60; // В последний день лицензия еще действует.
	ЛицензияТребуетсяНапоминаниеОбОкончанииСрокаДействия = УчетнаяЗапись.ЛицензияТребуетсяНапоминаниеОбОкончанииСрокаДействия;
	
	СекундВОдномДне = 24 * 60 * 60;
	КоличествоДнейДоОкончанияЛицензии = (НачалоДня(ЛицензияДатаОкончания) - НачалоДня(ТекущаяДатаСервер))/СекундВОдномДне;
	ПродлитьЛицензиюНа1СОтчетностьИсходный = КоличествоДнейДоОкончанияЛицензии <= ТридцатьДней;

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьИсходныеРеквизиты1СОтчетности_ВладелецЭП(ДопРеквизитыУчетнойЗаписи)

	ВладелецЭЦПФамилияИсходный 			= ДопРеквизитыУчетнойЗаписи.ВладелецЭЦПФамилия;
	ВладелецЭЦПИмяИсходный 				= ДопРеквизитыУчетнойЗаписи.ВладелецЭЦПИмя;
	ВладелецЭЦПОтчествоИсходный			= ДопРеквизитыУчетнойЗаписи.ВладелецЭЦПОтчество;
	ВладелецЭЦППодразделениеИсходное 	= ДопРеквизитыУчетнойЗаписи.ВладелецЭЦППодразделение;
	ВладелецЭЦПСНИЛСИсходный 			= ДопРеквизитыУчетнойЗаписи.ВладелецЭЦПСНИЛС;
	ВладелецЭЦПДолжностьИсходная 		= ДопРеквизитыУчетнойЗаписи.ВладелецЭЦПДолжность;
	ТелефонМобильныйИсходный			= ПреобразоватьНомерТелефонаКМаскеСервер(ДопРеквизитыУчетнойЗаписи.ТелефонМобильный);
	ЭлектроннаяПочтаИсходная 			= ДопРеквизитыУчетнойЗаписи.ЭлектроннаяПочта;
	ПолучатьУведомления 				= ТелефонМобильныйЗаполнен(ТелефонМобильныйИсходный);
	
	Если ЭтоУчетнаяЗаписьВМоделиСервиса ИЛИ ПолучатьУведомления Тогда
		ТелефонМобильный = ПолучитьПредставлениеТелефона(ТелефонМобильныйИсходный);
	КонецЕсли;
	
	ИнициализироватьИсходныеРеквизиты1СОтчетности_ВладелецЭПИНН();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьИсходныеРеквизиты1СОтчетности_ВладелецЭПИНН()
	
	ВладелецЭЦПИННИсходный = "";
	
	Если ЭтоОблако(ЭтотОбъект) Тогда
		
		ДанныеСертификата = ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.ПолучитьСертификатПоОрганизации(Организация);
		Субъект = ДанныеСертификата.Субъект;
		ВладелецЭЦПИННИсходный = ДокументооборотСКОКлиентСервер.ИННИзСертификата(Субъект, , Ложь);
		
	ИначеЕсли ДвДанныеЛокальногоСертификата <> Неопределено Тогда
		
		ДанныеСертификата = Новый СертификатКриптографии(ДвДанныеЛокальногоСертификата);
		Субъект = ДанныеСертификата.Субъект;
		ВладелецЭЦПИННИсходный = ДокументооборотСКОКлиентСервер.ИННИзСертификата(Субъект, , Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьИсходныеРеквизиты1СОтчетности_ГосОрганы(ДопРеквизитыУчетнойЗаписи)

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	РегНомерПФРИсходный     = ДопРеквизитыУчетнойЗаписи.РегНомерПФР;
	КодРегионаФСРАРИсходный = ДопРеквизитыУчетнойЗаписи.КодРегионаФСРАР;
	
	ПолучателиФНСИсходные.Очистить();
	ПолучателиФСГСИсходные.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.ТипПолучателя,
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.КодПолучателя,
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.КПП
		|ИЗ
		|	РегистрСведений.ДополнительныеРеквизитыУчетнойЗаписиПолучатели КАК ДополнительныеРеквизитыУчетнойЗаписиПолучатели
		|ГДЕ
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.УчетнаяЗапись = &УчетнаяЗапись";

	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаНаправлений Из Результат Цикл
		Если СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
			СдаватьВПФРИсходный = Истина;
			КодПФРИсходный 		= Форматировать(СтрокаНаправлений.КодПолучателя);
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСС Тогда
			СдаватьВФССИсходный = Истина;
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
			СдаватьВФНСИсходный = Истина;
			
			НоваяСтрока = ПолучателиФНСИсходные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНаправлений);
			
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСГС Тогда
			
			СдаватьВРосстатИсходный = Истина;
			
			НоваяСтрока = ПолучателиФСГСИсходные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНаправлений);
			НоваяСтрока.Наименование = КонтекстЭДОСервер.НаименованиеТОГСаПоКоду(СтрокаНаправлений.КодПолучателя, Спецоператор);
			
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСРАР Тогда
			ПодатьЗаявкуНаСертификатДляФСРАРИсходный = Истина;
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.РПН Тогда
			ПодатьЗаявкуНаПодключениеРПНИсходный = Истина;
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФТС Тогда
			ПодатьЗаявкуНаПодключениеФТСИсходный = Истина;
		КонецЕсли;
	КонецЦикла;
	
	КодыФНСПрописьюИсходные 	= ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьКодыФНСПрописью(ПолучателиФНСИсходные);
	КодыРосстатПрописьюИсходные = ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьКодыРосстатПрописью(ПолучателиФСГСИсходные);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияЭПВОблакеСервер(ИнициализироватьТокен, Сертификат = Неопределено)
	
	ОчиститьПеременныеДляОблака();
	
	Если ДоступнаЭлектроннаяПодписьВМоделиСервиса Тогда
		
		Если Сертификат = Неопределено Тогда
			Сертификат = ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.ПолучитьСертификатПоОрганизации(Организация);
		КонецЕсли;
		
		Если ЭтоПереходВОблако Тогда
			ДокументооборотСКОКлиентСервер.СкопироватьНастройкиПаролейВОблакеИзКоробки(ЭтотОбъект);
		Иначе
			ПолучитьНастройкиПаролейВОблакеССервера(Сертификат);
		КонецЕсли;
		
		Если ИнициализироватьТокен Тогда
			ЗаполнитьИспользованиеДолговременногоТокена();
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПеременныеДляОблака()
	
	// Сбрасываем в исходные значения
	ИнициализироватьПроверкиДляОблака(ЭтотОбъект);
	ТелефонМобильныйДляПаролей = "";
	ЭлектроннаяПочтаДляПаролей = "";
	ЭтоУчетнаяЗаписьВМоделиСервиса = Ложь;
	ЭтаУчетнаяЗаписьБылаСделанаДляОблака = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНастройкиПаролейВОблакеССервера(Сертификат)
	
	Если ЗначениеЗаполнено(Сертификат) И Сертификат.Свойство("Идентификатор") Тогда
		
		НастройкиПолученияВременныхПаролей = ИнициализироватьСпособыДоставкиПаролей(Сертификат.Идентификатор);
		
		ПроверкаТелефонДляПаролей.ИсходноеЗначение = НастройкиПолученияВременныхПаролей.Телефон;
		ПроверкаТелефонДляПаролей.ЗначениеВведено = ЗначениеЗаполнено(ПолучитьПредставлениеТелефона(ПроверкаТелефонДляПаролей.ИсходноеЗначение));
		ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено = ПроверкаТелефонДляПаролей.ЗначениеВведено;
		
		ПроверкаЭлектроннаяПочтаДляПаролей.ИсходноеЗначение = НастройкиПолученияВременныхПаролей.ЭлектроннаяПочта;
		ПроверкаЭлектроннаяПочтаДляПаролей.ЗначениеВведено = ЗначениеЗаполнено(ПроверкаЭлектроннаяПочтаДляПаролей.ИсходноеЗначение);
		ПроверкаЭлектроннаяПочтаДляПаролей.ПодтверждениеВыполнено = ПроверкаЭлектроннаяПочтаДляПаролей.ЗначениеВведено;
		
		ТелефонМобильныйДляПаролей = НастройкиПолученияВременныхПаролей.Телефон;
		ЭлектроннаяПочтаДляПаролей = НастройкиПолученияВременныхПаролей.ЭлектроннаяПочта;
		
		ЭтоУчетнаяЗаписьВМоделиСервиса = ЗначениеЗаполнено(НастройкиПолученияВременныхПаролей.Телефон);
		ЭтаУчетнаяЗаписьБылаСделанаДляОблака = УчетнаяЗапись.ЭлектроннаяПодписьВМоделиСервиса;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПараметрыУЦ()
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ИнициализироватьПараметрыУЦ(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПараметрыЭДО(ПриОткрытии = Ложь)
	
	ЭтоПодключениеЭДО                   = Ложь;
	ЭтоПереизданиеСертификатаЭДО        = Ложь;
	ПодключениеЭДОВозможно              = Ложь;
	ПереизданиеСертификатаЭДОВозможно   = Ложь;
	ЭтоОткрытиеРанееСозданногоЗаявления = ЗаявлениеСозданоКопированием И ПриОткрытии И ЭтоОткрытиеЗаявления;
	
	ТребуетсяПодключение = Неопределено;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ТребуетсяПодключениеЭДО(Организация, ТребуетсяПодключение);
	
	ТребуетсяПереиздание = Неопределено;
	Если ДвДанныеЛокальногоСертификата <> Неопределено Тогда
		ПереиздаваемыйСертификат = Новый СертификатКриптографии(ДвДанныеЛокальногоСертификата);
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ТребуетсяПереизданиеСертификатаЭДО(
			Организация, 
			ПереиздаваемыйСертификат, 
			ТребуетсяПереиздание);
	КонецЕсли;

	Если ЭтоОткрытиеРанееСозданногоЗаявления 
		И ЗначениеЗаполнено(Реквизит.НастройкиЭДО)
		И (Реквизит.ПодключитьЭДО ИЛИ Реквизит.ПереиздатьСертификатЭДО) Тогда
		
		НастройкиЭДО = Реквизит.НастройкиЭДО;
		
		// Переиздание
		ПереиздатьСертификатЭДО      = Реквизит.ПереиздатьСертификатЭДО;
		ЭтоПереизданиеСертификатаЭДО = ПереиздатьСертификатЭДО;
		Если ЭтоПереизданиеСертификатаЭДО И НЕ ЭтоУчетнаяЗаписьВМоделиСервиса И НЕ ЭтоПереходВОблако Тогда
			ПереизданиеСертификатаЭДОВозможно = Истина;
		КонецЕсли;
		
		// Подключение
		ПодключитьЭДО 			     = Реквизит.ПодключитьЭДО И ЕстьПравоНастройкиЭДО;
		ПодключениеЭДОВозможно       = НЕ ЭтоУчетнаяЗаписьВМоделиСервиса И НЕ ЭтоПереходВОблако;
		ЭтоПодключениеЭДО            = НЕ ЭтоПереизданиеСертификатаЭДО;
		
		СсылкаОписаниеСервисаЭДО = "";
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.АдресСтраницыСУсловиямиПодключения(СсылкаОписаниеСервисаЭДО);
	
	Иначе
		
		// Если заявление копируется, то настройки обновляются, 
		// потому что к этому моменту организация уже может подключиться к ЭДО
		Если ТребуетсяПодключение = Истина Тогда // Может быть Неопределено, если не заполнена переопределяемая
			
			НастройкиЭДО = Неопределено;
			КодФНС       = СокрЛП(РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "КодНО").КодНО);
			
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ИнициализироватьНастройкиПодключенияЭДО(Организация, КодФНС, НастройкиЭДО);
			
			Если НастройкиЭДО <> Неопределено Тогда
				
				ПодключениеЭДОВозможно = Истина;
				ЭтоПодключениеЭДО      = Истина;
				
				Если ЗаявлениеСозданоКопированием ИЛИ ЭтоОткрытиеРанееСозданногоЗаявления Тогда
					ПодключитьЭДО = Реквизит.ПодключитьЭДО И ЕстьПравоНастройкиЭДО;
				Иначе
					ПроверитьНеобходимостьУстановкиГалки_ФлагПодключитьЭДО();
				КонецЕсли;
				
			КонецЕсли;
			
			СсылкаОписаниеСервисаЭДО = "";
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.АдресСтраницыСУсловиямиПодключения(СсылкаОписаниеСервисаЭДО);
			
		ИначеЕсли ДвДанныеЛокальногоСертификата <> Неопределено Тогда
			
			Если ТребуетсяПереиздание = Истина Тогда
				
				НастройкиЭДО = Неопределено;
				КодФНС       = СокрЛП(РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "КодНО").КодНО);
				
				ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ИнициализироватьНастройкиПереизданияСертификатаЭДО(Организация, КодФНС, ПереиздаваемыйСертификат, НастройкиЭДО);
				
				Если НастройкиЭДО <> Неопределено Тогда
					
					ПереизданиеСертификатаЭДОВозможно = Истина;
					ЭтоПереизданиеСертификатаЭДО      = Истина;
					
					Если ЗаявлениеСозданоКопированием ИЛИ ЭтоОткрытиеРанееСозданногоЗаявления Тогда
						ПереиздатьСертификатЭДО = Реквизит.ПереиздатьСертификатЭДО И ЕстьПравоНастройкиЭДО;
					Иначе
						ПроверитьНеобходимостьУстановкиГалки_ФлагПереиздатьСертификатЭДО();
					КонецЕсли;
					
				КонецЕсли;
				
				СсылкаОписаниеСервисаЭДО = "";
				ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.АдресСтраницыСУсловиямиПодключения(СсылкаОписаниеСервисаЭДО);
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКонстантныеЗначения()
	
	ТекущаяДатаСервер = ТекущаяДатаСеанса();
	
	// Состояния флагов
	Рекомендовано = 1;
	Обязательно   = 2;
	Требует       = 2;
	НеТребуется   = 0;
	Препятствует  = Истина;
	
	// Цвета
	ЧерныйЦвет 			= Новый Цвет(65, 48, 3);
	СерыйЦвет 			= Новый Цвет(87, 87, 87);
	СинийЦвет 			= Новый Цвет(28, 85, 174);
	КрасныйЦвет 		= Новый Цвет(178,34, 34);
	ЦветТекстаФормы 	= Новый Цвет(65, 48, 3);
	
	МаксимальныйРазмерФайла = 10 * 1024 * 1024;
	ДопустимыеТипыФайлов    = "png;jpeg;jpg;tiff;tif;pdf";

	// Данные службы поддержки - контактные данные АО "Калуга Астрал"
	ТелефонСлужбыПоддержки = "8-800-700-86-68";
	АдресЭлектроннойПочтыСлужбыПоддержки = "1c@astralnalog.ru";
	
	ТридцатьДней = 30;
	
	ПрограммноеЗакрытие	= Ложь;
	
КонецПроцедуры

&НаСервере
Функция ИнициализироватьОрганизацию(Параметры)
	
	// Получаем значение параметров
	Организация = Параметры.Организация;
	Реквизит    = Параметры.Реквизит;
	
	ИспользуетсяОднаОрганизация = РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация();
	Если ИспользуетсяОднаОрганизация Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации");
		Организация = Модуль.ОрганизацияПоУмолчанию();
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Реквизит) Тогда 
			Организация = Реквизит.Организация;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОсновнаяОрганизация();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

&НаКлиенте
Процедура ИнициализироватьРеквизиты1СОтчетности(ДанныеЗаполнения, ПриОткрытии, ВыполняемоеОповещение)
	
	// Очистка
	ЭтоСменаОрганизации = НЕ ПриОткрытии;
	Если ЭтоСменаОрганизации Тогда
		ПрединициализацияРеквизитовОрганизацииНаСервере(ПриОткрытии);
	КонецЕсли;

	// Проверка поддержки вторичных заявлений
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПриОткрытии", 			ПриОткрытии);
	ДополнительныеПараметры.Вставить("УчетнаяЗапись", 			УчетнаяЗапись);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 	ВыполняемоеОповещение);
	ДополнительныеПараметры.Вставить("ДанныеЗаполнения", 		ДанныеЗаполнения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИнициализироватьРеквизиты1СОтчетности_ПослеПроверкиПоддержкиВторичногоЗаявления", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	ПроверитьВозможностьОтправкиВторичныхЗаявлений(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРеквизиты1СОтчетностиЕслиЭтоСменаОрганизации(Форма)
	
	ОчиститьДанныеВладельца();
	ОчиститьИсходныеЗначенияИПризнакИзменения(); // только здесь
	ОчиститьРеквизитыФормы(); // только здесь
	СброситьНаправленияСдачиОтчетности(); // только здесь
	СброситьВсеФлажки(Форма);
	
КонецПроцедуры

&НаСервере
Процедура ПрединициализацияРеквизитовОрганизацииНаСервере(ПриОткрытии)
	
	ИспользуетсяОднаОрганизация = РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация();
	
	Если НЕ ПриОткрытии Тогда
		ОчиститьРеквизиты1СОтчетностиЕслиЭтоСменаОрганизации(ЭтотОбъект);
	КонецЕсли;
	
	// При смене организации нужно проинициализировать
	ИнициализироватьТокен = Истина;
	ИнициализацияЭПВОблакеСервер(ИнициализироватьТокен);
	
	ИнициализироватьРеквизитыНеХранящиесяВБазе();
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	// Проверка поддержки отправки вторичного заявления
	УчетнаяЗапись = УчетнаяЗаписьОрганизации(Организация);
	
	Настройки = КонтекстЭДОСервер.НастройкиУчетнойЗаписиОрганизации(Организация);
	Если Настройки <> Неопределено Тогда
		НастройкиУчетнойЗаписи = Новый ФиксированнаяСтруктура(Настройки);
	КонецЕсли;
	
	ОператорПоддерживаетСМСУведомление 	= Ложь;
	ОператорПоддерживаетФСРАР 			= Ложь;
	ОператорПоддерживаетРПН 			= Ложь;
	ОператорПоддерживаетФТС 			= Ложь;
	
	СпецоператорПоддерживаетВторичныеЗаявления = КонтекстЭДОСервер.ПоддерживаетсяВторичноеЗаявление(Организация);
	
	Спецоператор = ИнициализироватьДанныеСпецоператора(
		УчетнаяЗапись, 
		ОператорПоддерживаетСМСУведомление, 
		ОператорПоддерживаетФСРАР, 
		ОператорПоддерживаетРПН, 
		ОператорПоддерживаетФТС);
		
	ИнициализироватьПараметрыУЦ();

КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьРеквизиты1СОтчетности_ПослеПроверкиПоддержкиВторичногоЗаявления(ПоддерживаетсяВторичноеЗаявление, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПоддерживаетсяВторичноеЗаявление Тогда
		
		СброситьВсеФлажки(ЭтотОбъект);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ВыполняемоеОповещение);
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИнициализироватьРеквизиты1СОтчетности_ПослеПолученияBase64", 
		ЭтотОбъект,
		ДополнительныеПараметры);

	Если КомпонентаУстановлена Тогда
		ПолучитьДанныеЛокальногоСертификатаОрганизации(Организация, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьРеквизиты1СОтчетности_ПослеПолученияBase64(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат <> Неопределено Тогда
		ДвДанныеЛокальногоСертификата = Base64Значение(Результат);
	КонецЕсли;
	
	ПостинициализацияРеквизитовОрганизацииНаСервере(ВходящийКонтекст.ПриОткрытии);
	ПриУстановкеРежимаТолькоСУЦ(ВходящийКонтекст.ПриОткрытии);
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ВыполняемоеОповещение)

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеЛокальногоСертификатаОрганизации(Организация, ВыполняемоеОповещение) Экспорт
	
	Если НастройкиУчетнойЗаписи = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Неопределено);
		Возврат;
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучитьДанныеЛокальногоСертификатаОрганизации_ПослеПоискаСертификатаПоОтпечатку", 
		ЭтотОбъект,
		ВыполняемоеОповещение);
		
	// Асинхронно получаем ДвДанныеЛокальногоСертификата
	КриптографияЭДКОКлиент.НайтиСертификатПоОтпечатку(ОписаниеОповещения, НастройкиУчетнойЗаписи.СертификатРуководителя, "MY",, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеЛокальногоСертификатаОрганизации_ПослеПоискаСертификатаПоОтпечатку(Результат, ВыполняемоеОповещение) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучитьДанныеЛокальногоСертификатаОрганизации_ПослеПолученияBase64", 
		ЭтотОбъект,
		ВыполняемоеОповещение);
	
	Если Результат.Выполнено И Результат.СертификатНайден Тогда
		СвойстваСертификата = Результат.СвойстваСертификата;
		КриптографияЭДКОКлиент.ЭкспортироватьСертификатВBase64(ОписаниеОповещения, СвойстваСертификата, Ложь);
	Иначе
		Результат = Новый Структура();
		Результат.Вставить("Выполнено", Ложь);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеЛокальногоСертификатаОрганизации_ПослеПолученияBase64(Результат, ВыполняемоеОповещение) Экспорт
	
	Если Результат.Выполнено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Результат.СтрокаBase64);
	Иначе
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПостинициализацияРеквизитовОрганизацииНаСервере(ПриОткрытии)
	
	// Исходные данные
	ИнициализироватьИсходныеРеквизиты1СОтчетности(УчетнаяЗапись);
	
	// Новые данные
	ИнициализироватьНовыеРеквизитыОрганизации(ПриОткрытии);
	ИнициализироватьИсходногоВладельцаПоФИО_И_СНИЛС();
	Если НЕ ЗаявлениеСозданоКопированием Тогда
		ИнициализироватьТипВладелеца();
		ЗаполнитьДанныеСотрудника(Истина);
	КонецЕсли;
	
	// Направления
	ИнициализироватьДоступностьНаправлений();
	
	// Не хранящиеся в базе
	СделатьНехранящиесяВБазеРеквизитыРавнымиИсходным();
	
	// Криптография
	ИнициализироватьРеквизитыОператора();
	ИнициализироватьКриптографию();
	
	Если ЗаявлениеСозданоКопированием Тогда
		СкопироватьДанныеИзИсходногоЗаявления();
	Иначе
		СравнитьРеквизитыИПроверитьНеобходимостьУстановкиГалок();
	КонецЕсли;
	ПостинициализацияЭПВОблакеСервер();

	НужноИнициализировать = НужноИнициализироватьСпособПолученияСертификата(ПриОткрытии);
	
	Если НужноИнициализировать Тогда
		ИнициализироватьСпособПолученияСертификатаПриСменеОрганизации();
	КонецЕсли;
	ИнициализироватьВозможностьБезбумажногоПродления();
	
КонецПроцедуры

&НаСервере
Функция НужноИнициализироватьСпособПолученияСертификата(ПриОткрытии)
	
	ВыбраноИздатьНовый = СпособПолученияСертификата = Перечисления.СпособПолученияСертификата.ИздатьНовый;
		
	ПересчитатьДляСтарого = 
		ПриОткрытии
		И НЕ ЭтоОткрытиеЗаявления
		И СертификатДолженБытьПолученОтГосУЦ 
		И (ВыбраноИздатьНовый ИЛИ ЭтоОблако(ЭтотОбъект));
		 
	ПересчитатьПриСменеОрганизации = НЕ ПриОткрытии;
	
	Инициализировать = ПересчитатьДляСтарого ИЛИ ПересчитатьПриСменеОрганизации;
	
	Возврат Инициализировать;
	
КонецФункции

&НаСервере
Процедура ПостинициализацияЭПВОблакеСервер()
	
	Если НЕ ИспользоватьСуществующий(ЭтотОбъект) И НЕ ЗаявлениеСозданоКопированием Тогда
		Возврат;
	КонецЕСли;
	
	Если ДоступнаЭлектроннаяПодписьВМоделиСервиса И ВключаемыйСертификат <> Неопределено Тогда
		
		Сертификат = ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.НайтиСертификатВХранилищеПоОтпечатку(ВключаемыйСертификат.Отпечаток);
		ПолучитьНастройкиПаролейВОблакеССервера(Сертификат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКриптографию()
	
	ОбработкаЗаявленийАбонентаКлиентСервер.ОпределитьВыбранноеМестоХраненияКлюча(ЭтотОбъект);
	ОбработкаЗаявленийАбонентаКлиентСервер.ОпределитьИзменениеВМестеХраненияКлючей(ЭтотОбъект);
	ОпределитьЯвляетсяЛиСертификатСУЦом();
	ПроверитьСрокДействияСертификата();
	
	Если НЕ ЭтоОблако(ЭтотОбъект) Тогда
		ОбработкаЗаявленийАбонентаКлиентСервер.ПроверитьНеобходимостьУстановкиГалки_ВключатьЛицензиюКриптоПроВСертификат(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьНовыеРеквизитыОрганизации(ПриОткрытии)
	
	// Заполняем текущие реквизиты организации
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполнения = Новый Структура();
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	СтруктураРеквизитов = Новый Структура("Организация, ПриОткрытии", Организация, НЕ ДанныеЗаполнения = Неопределено);
	Если ДанныеЗаполнения <> Неопределено Тогда
		СтруктураРеквизитов.Вставить("АдресЮридический",);
		СтруктураРеквизитов.Вставить("АдресФактический",);
	КонецЕсли;
	КонтекстЭДОСервер.ЗаполнитьДанныеОрганизации(СтруктураРеквизитов);
	ДанныеЗаполнения = КонтекстЭДОСервер.ДополнитьДанныеОрганизацииДаннымиПоОтветственнымЛицам(СтруктураРеквизитов);
	ДанныеОрганизации = ДанныеЗаполнения.СтруктураДанныхОрганизации;
	ИнициализироватьРеквизиты1СОтчетности_ПрочитатьИзБД(ДанныеЗаполнения);
	ИнициализироватьРеквизиты1СОтчетности_ОбработатьПрочитанноеИзБД_Сервер();
	ИнициализироватьПараметрыЭДО(ПриОткрытии);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРеквизиты1СОтчетности_ОбработатьПрочитанноеИзБД_Сервер()
	
	ИПИспользуетТрудНаемныхРаботников = РегламентированнаяОтчетность.ИПИспользуетТрудНаемныхРаботников(Организация);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРеквизиты1СОтчетности_ПрочитатьИзБД(ДанныеЗаполнения)

	Руководитель	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Организация); 
	ГлБухгалтер		= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ГлБухгалтер(Организация);
	
	ЭтоЮридическоеЛицо		 = ДанныеОрганизации.ТипОрганизации;
	КраткоеНаименование		 = ДанныеОрганизации.КраткоеНаименование;
	ИНН						 = ДанныеОрганизации.ИННЮЛ;
	КПП						 = ДанныеОрганизации.КППЮЛ;
	ОГРН					 = ДанныеОрганизации.ОГРН;
	РегНомерПФР				 = ДанныеОрганизации.РегНомПФР;
	
	// Если реквизита нет в базе, то не обновляем его, потому в этом случае данные, введенные пользователем вручную, затрутся
	Если НЕ ЭтоРеквизитНеХранящийсяВБазе(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонОсновной")) Тогда
		ТелефонОсновной = ДанныеОрганизации.ТелОрганизации;
	КонецЕсли;

	АдресЮридическийЗначение	  = ДанныеЗаполнения.АдресЮридическийЗначение;
	АдресЮридическийПредставление = ДанныеЗаполнения.АдресЮридическийПредставление;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Область = КонтекстЭДОСервер.ПолеСертификата_2_5_4_8(АдресЮридическийЗначение);
	Город   = КонтекстЭДОСервер.ПолеСертификата_2_5_4_7(АдресЮридическийЗначение);
	Улица   = КонтекстЭДОСервер.ПолеСертификата_2_5_4_9(АдресЮридическийЗначение);
	
	// Если реквизита нет в базе, то не обновляем его, потому в этом случае данные, введенные пользователем вручную, затрутся
	Если НЕ ЭтоРеквизитНеХранящийсяВБазе(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочта")) Тогда
		ЭлектроннаяПочта = ДанныеОрганизации.ЭлектроннаяПочта;
		Если ЭтоОблако(ЭтотОбъект) Тогда
			ЭлектроннаяПочта = ЭлектроннаяПочтаДляПаролей;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоЮридическоеЛицо Тогда
		ПризнакОбособленногоПодразделения = ДанныеОрганизации.ПризнакОбособленногоПодразделения;
		ЭтоБюджетополучатель = ДанныеОрганизации.ЭтоБюджетополучатель;
	КонецЕсли;
	
	ИнициализироватьИсходныеРеквизиты1СОтчетности_ПризнакИностраннойОрганизации();
	
	КодРегионаФСРАР = КонтекстЭДОСервер.КодРегионаФСРАР(АдресЮридическийЗначение);
	КодРегиона      = КодРегионаФСРАР;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСпособПолученияСертификатаПриСменеОрганизации()
	
	// При смене организации возвращаемся к исходным настройкам
	ОпределятьМестоХранения = Истина;
	СброситьСпособПолученияСертификата(ОпределятьМестоХранения, Истина);
	
	СертификатыОрганизацииПоИНН.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура СброситьСпособПолученияСертификата(
		ОпределятьМестоХранения, 
		ОпределятьНеобходимостьПереизданияСертификата)
	
	ИнициализироватьСпособПолученияСертификата(ЭтотОбъект);
	ОбработкаЗаявленийАбонентаКлиентСервер.ОчиститьВключаемыйСертификат(ЭтотОбъект);
	ПриИзмененииСпособаПолученияСертификата(ОпределятьМестоХранения);
	
	Если ОпределятьНеобходимостьПереизданияСертификата Тогда
		ПроверитьНеобходимостьУстановкиГалки_ПереиздатьСертификат();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьИсходныеРеквизиты1СОтчетности_ПризнакИностраннойОрганизации()
	
	ЭтоИностраннаяОрганизация = ИнтерфейсыВзаимодействияБРО.ЭтоИностраннаяОрганизацияПоИНН(Организация);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеИзДиагностики

&НаСервере
Процедура ПереопределитьГалкиНаОснованииВходящихФлаговМастера()
	
	Если ТипЗнч(ВходящиеФлагиМастера) = Тип("Структура") Тогда 
		
		ПереопределитьГалкиНаОснованииВходящихФлаговМастера_ИзДиагностики();
		
	ИначеЕсли ПриОткрытииЗапрошеноПродлениеСертификата 
		ИЛИ ПриОткрытииЗапрошеноПродлениеЛицензии Тогда
		
		ПереопределитьГалкиНаОснованииВходящихФлаговМастера_ИзНастроекОбмена();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереопределитьГалкиНаОснованииВходящихФлаговМастера_ИзНастроекОбмена()
	
	// Сертификат
	Если ПриОткрытииЗапрошеноПродлениеСертификата Тогда 
		ПереиздатьСертификат = Рекомендовано;
		ПереиздатьСертификатПриИзмененииНаСервере();
	КонецЕсли;
	
	// Лицензия
	Если ПриОткрытииЗапрошеноПродлениеЛицензии Тогда 
		ПродлитьЛицензиюНа1СОтчетность = Рекомендовано;
		ПродлитьЛицензиюНа1СОтчетностьПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереопределитьГалкиНаОснованииВходящихФлаговМастера_ИзДиагностики()
	
	// Сертификат
	УстановитьФлаг = 
		ПереиздатьСертификат = НеТребуется 
		ИЛИ ВходящиеФлагиМастера.ПродлитьСертификат 
		ИЛИ ВходящиеФлагиМастера.ИзменитьРеквизитыПодключенияК1СОтчетности;
	
	Если УстановитьФлаг Тогда 
		ПереиздатьСертификат = Рекомендовано;
		ПереиздатьСертификатПриИзмененииНаСервере();
	КонецЕсли;
	
	// Реквизиты организации
	Если ВходящиеФлагиМастера.ИзменитьРеквизитыПодключенияК1СОтчетности 
		И НЕ ИзменитьРеквизитыПодключенияК1СОтчетности Тогда
		
		ИзменитьРеквизитыПодключенияК1СОтчетности = Истина;
		ИзменитьРеквизитыПодключенияК1СОтчетностиПриИзмененииНаСервере();
		
	КонецЕсли;
	
	// Лицензия
	Если ВходящиеФлагиМастера.ПродлитьЛицензиюНа1СОтчетность 
		И НЕ ПродлитьЛицензиюНа1СОтчетность Тогда
		
		ПродлитьЛицензиюНа1СОтчетность = Рекомендовано;
		ПродлитьЛицензиюНа1СОтчетностьПриИзмененииНаСервере();
		
	КонецЕсли;
	
	// Направления
	Если ВходящиеФлагиМастера.Свойство("ПодключаемоеНаправление") Тогда 
		ВключитьНаправление(ВходящиеФлагиМастера.ПодключаемоеНаправление);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьНаправление(ПодключаемоеНаправление)
	
	ИзменитьСоставКонтролирующихОрганов = Истина;
	ИзменитьСоставКонтролирующихОргановПриИзмененииНаСервере();
	
	Если ПодключаемоеНаправление = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС") Тогда
		
		СдаватьВФНС = Истина;
			
	ИначеЕсли ПодключаемоеНаправление = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР") Тогда
			
		СдаватьВПФР = Истина;
		
	ИначеЕсли ПодключаемоеНаправление = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС") Тогда
			
		СдаватьВРосстат = Истина;
		
	ИначеЕсли ПодключаемоеНаправление = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС") Тогда
		
		СдаватьВФСС = Истина;
		
	ИначеЕсли ПодключаемоеНаправление = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСРАР") Тогда
		
		ПодатьЗаявкуНаСертификатДляФСРАР = Истина;
		
	ИначеЕсли ПодключаемоеНаправление = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.РПН") Тогда
		
		ПодатьЗаявкуНаПодключениеРПН = Истина;
		
	ИначеЕсли ПодключаемоеНаправление = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФТС") Тогда
		
		ПодатьЗаявкуНаПодключениеФТС = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТелефонИЭлПочта

&НаКлиенте
Процедура ПоказатьФормуВыбораТелефонаИПочтыВОблаке()
	
	ВыполняемоеОповещение = Новый ОписаниеОповещения(
		"ПоказатьФормуВыбораТелефонаИПочтыВОблаке_Завершение", 
		ЭтотОбъект);
	
	КонтекстЭДОКлиент.ПоказатьФормуВыбораТелефонаИПочтыВОблаке(ЭтотОбъект, ВыполняемоеОповещение);
		
КонецПроцедуры
	
&НаКлиенте
Процедура ПоказатьФормуВыбораТелефонаИПочтыВОблаке_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = "Телефон недоступен" Тогда
		ОткрытьФормуИнструкцииПоСменеТелефона();
		Возврат;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуИнструкцииПоСменеТелефона()
	
	Сертификат = ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.ПолучитьСертификатПоОрганизации(Организация);

	ПараметрыФормы = Новый Структура("Сертификат, НовыйТелефон", Сертификат, ТелефонМобильныйДляПаролей);
	
	ОткрытьФорму(
		"ОбщаяФорма.ИзменениеНомераТелефона", 
		ПараметрыФормы, 
		Неопределено);
		
	ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьФормуСЗадержкой", 0.1, Истина);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПоказатьФормуВыбораТелефонаВКоробке()
	
	ПараметрыФормы = 
		"ПолучатьУведомления,
		|ТелефонМобильный,
		|ЭлектроннаяПочта";
	
	ДополнительныеПараметры = Новый Структура(ПараметрыФормы);
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ЭтотОбъект, ПараметрыФормы); 
	ДополнительныеПараметры.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПоказатьФормуВыбораТелефонаВКоробке_Завершение", 
		ЭтотОбъект);
	
	ОткрытьФорму(
		КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_СМС_ЛокальнаяУчетнаяЗапись",
		ДополнительныеПараметры,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Функция ТелефонМобильныйБезРазделителей(Телефон)
	
	Возврат ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(Телефон);
	
КонецФункции
	
&НаКлиенте
Процедура ПоказатьФормуВыбораТелефонаВКоробке_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено ИЛИ НЕ Результат.Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(ЭтотОбъект);
	
	ЭлектроннаяПочтаДоИзменения = ЭлектроннаяПочта;
	
	ПараметрыФормы = Результат.ПараметрыФормы;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат, ПараметрыФормы, "ПараметрыФормы");
	
	// Телефон мобильный
	Если ОператорПоддерживаетСМСУведомление Тогда
		
		ТелефонМобильныйБезРазделителей         = ТелефонМобильныйБезРазделителей(ТелефонМобильный);
		ТелефонМобильныйИсходныйБезРазделителей = ТелефонМобильныйБезРазделителей(ТелефонМобильныйИсходный);
		
		ТелефонМобильныйИзменился = ТелефонМобильныйБезРазделителей <> ТелефонМобильныйИсходныйБезРазделителей;
		
	КонецЕсли;
	
	Если ЭлектроннаяПочтаДоИзменения <> ЭлектроннаяПочта Тогда
		ПроверитьНеобходимостьУстановкиГалки_ПереиздатьСертификат();
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПреобразоватьНомерТелефонаКМаскеСервер(НомерТелефона)
	
	// Маска +7 (999) 999-99-99
	// Номер телефона 89851234567
	КодВСкобках =  Сред(НомерТелефона, 2,3);
	ПервыйБлокЧисел = Сред(НомерТелефона, 5,3);
	ВторойБлокЧисел = Сред(НомерТелефона, 8,2);
	ТретийБлокЧисел = Сред(НомерТелефона, 10,2);

	Результат = "";
	Если НЕ ПустаяСтрока(СтрЗаменить(НомерТелефона, "-", "")) Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					  "+7 (%1) %2-%3-%4",
					  КодВСкобках,
					  ПервыйБлокЧисел,
					  ВторойБлокЧисел,
					  ТретийБлокЧисел)
	КонецЕсли;
				  
	Возврат Результат;  

КонецФункции

&НаКлиенте
Процедура Подключаемый_ЗакрытьФормуСЗадержкой()
	
	Если Открыта() Тогда
		ПрограммноеЗакрытие = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПроверитьДоступДляТокена(МастерДалее)
	
	ЭтоЭПВОблакеИНеПереходВКоробку = ЭтоУчетнаяЗаписьВМоделиСервиса И НЕ ЭтоПереходВКоробку;
	ДолговременныйТокен = ПредопределенноеЗначение("Перечисление.СпособыПодтвержденияКриптоопераций.ДолговременныйТокен");
	
	ОтключитьПодтвержденияКриптоопераций = 
		НЕ ПроверенДоступДляТокена
		И МастерДалее
		И ЭтоЭПВОблакеИНеПереходВКоробку 
		И ПереиздатьСертификат
		И НЕ ИзменитьНастройкиУведомлений 
		И СпособПодтвержденияКриптоопераций = ДолговременныйТокен
		И НЕ ИспользоватьСуществующий(ЭтотОбъект);
	
	Если ОтключитьПодтвержденияКриптоопераций Тогда
			
		Сертификат = ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.ПолучитьСертификатПоОрганизации(Организация);
		
		МастерДалее 	= Ложь;
		ПараметрыФормы	= Новый Структура("ТолькоПроверка, СпособПодтвержденияКриптоопераций", Истина, СпособПодтвержденияКриптоопераций);
		ОбработчикОповещения = Новый ОписаниеОповещения("ПроверитьДоступДляТокенаПослеПроверки", ЭтотОбъект);
		ЭлектроннаяПодписьВМоделиСервисаКлиент.ОтключитьПодтвержденияКриптоопераций(Сертификат, ОбработчикОповещения, ПараметрыФормы);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступДляТокенаПослеПроверки(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
		ПроверенДоступДляТокена = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыбора, "Выполнено", Ложь);
	Иначе
		ПроверенДоступДляТокена = Ложь;
	КонецЕсли;
 
	Если ПроверенДоступДляТокена Тогда
		ПриНажатииДалееНаОсновнойСтранице(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИнициализироватьПроверкиДляОблака(Форма)
	
	ДокументооборотСКОКлиентСервер.ИнициализироватьПроверкиДляОблака(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область Отправка

#Область СравнениеРеквизитовСертификатаИЗаявления

&НаКлиенте
Процедура СравнитьРеквизитыСертификатов()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СравнитьРеквизитыСертификатов_ПослеПолученияОтвета", 
		ЭтотОбъект);
		
	КонтекстЭДОКлиент.СравнитьРеквизитыСертификатов(ЭтотОбъект, "Сертификат", ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьРеквизитыСертификатов_ПослеПолученияОтвета(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		ПоказатьБубликОтправки();
		
	ИначеЕсли Результат.Действие = НСтр("ru = 'В бумажном виде';
										|en = 'In paper form'") Тогда
			
		ОтправитьВБумажномВиде();
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТолькоСменаТелефонаИлиПочтыДляПаролей

&НаКлиенте
Функция НужноПодтвердитьПаролемСменуТелефона()
	
	Возврат ДокументЗаявление.ЭлектроннаяПодписьВМоделиСервиса 
		И (ТелефонМобильныйДляПаролейИзменился ИЛИ ЭлектроннаяПочтаДляПаролейИзменилась)
		И ИзменитьНастройкиУведомлений
		И НЕ ПереиздатьСертификат;
		
КонецФункции

&НаКлиенте
Процедура ПодтвердитьПаролемСменуТелефона(Оповещение)
	
	Сертификат = ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.ПолучитьСертификатПоОрганизации(Организация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сертификат", Сертификат);
	ПараметрыФормы.Вставить("Телефон", ?(ТелефонМобильныйДляПаролейИзменился, ПроверкаТелефонДляПаролей.ИдентификаторПроверки, Неопределено));
	ПараметрыФормы.Вставить("ЭлектроннаяПочта", ?(ЭлектроннаяПочтаДляПаролейИзменилась, ПроверкаЭлектроннаяПочтаДляПаролей.ИдентификаторПроверки, Неопределено));
	
	ОткрытьФорму(
		"Обработка.ДокументооборотСКонтролирующимиОрганами.Форма.ВводВременногоПароля",
		ПараметрыФормы,
		ЭтаФорма,,,,
		Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура СменитьТелефонИлиПочтуБезОтправкиЗаявления()
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодтвержденияСменыТелефонаИПочты", 
		ЭтотОбъект);
	
	ПодтвердитьПаролемСменуТелефона(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияСменыТелефонаИПочты(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда

		ЭтотОбъект.Прочитать();
		ЗаписатьСостояниеЗаявления();
		
		Элементы.ПодсказкаПоРезультатам.Заголовок = НСтр("ru = 'Ваше заявление одобрено!';
														|en = 'Your application has been approved!'");
		Элементы.ГруппаПодсказок1.Видимость = Ложь;
		Элементы.ПодсказкаПоРезультатам4.Видимость = Ложь;
		
		ПоказатьРезультатОтправки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияСменыТелефона(Результат, Контекст) Экспорт

	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		ЭтоАвтоматическаяОбработка = ТипЗнч(Контекст) = Тип("Структура")
			И Контекст.Свойство("СостояниеОтправки")
			И Контекст.СостояниеОтправки = "Заявление отправлено в автоматическую обработку";
			
		Если ТипЗнч(Контекст) = Тип("Структура") Тогда
			Контекст.ВыполняемоеОповещение.ДополнительныеПараметры.Вставить("ЭтоАвтоматическаяОбработка", ЭтоАвтоматическаяОбработка);
			Контекст.ВыполняемоеОповещение.ДополнительныеПараметры.Вставить("ТелефонБылПодтвержден", Истина);
		КонецЕсли;
			
		КонтекстЭДОКлиент.СформироватьИОтправитьЗаявление(Контекст);
		
	Иначе
		
		ТекстОшибокОтправки = НСтр("ru = 'Изменение номера телефона не было подтверждено';
									|en = 'Phone number change was not confirmed'");
		ПоказатьРезультатОтправки();
		
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

&НаКлиенте
Процедура СформироватьИОтправитьЗаявление_СПодписанием()
	
	ИспользоватьСуществующий = ИспользоватьСуществующий(ЭтотОбъект);
	
	Если ИспользоватьСуществующий И ПереиздатьСертификат Тогда
		СвойстваТекущегоСертификата = ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.НайтиСертификатВХранилищеПоОтпечатку(ВключаемыйСертификат.Отпечаток);
	Иначе
		СвойстваТекущегоСертификата = ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.ПолучитьСертификатПоОрганизации(Организация);
	КонецЕсли;
	
	ПропуститьПолучениеСертификата = 
		ЭтоУчетнаяЗаписьВМоделиСервиса И НЕ ИспользоватьСуществующий 
		ИЛИ ИспользоватьСуществующий И ВключаемыйСертификатОблачный;
		
	СохранитьСертификатВДокумент();
		
	Если ПропуститьПолучениеСертификата Тогда
		СравнитьРеквизитыСертификатов();
	Иначе
		ПолучитьСертификатПередПодписанием();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьОшибкиОтправки(Результат) Экспорт
	
	Если Результат.Свойство("ТекстОшибки") Тогда
		ПолученныйТекстОшибокОтправки = Результат.ТекстОшибки;
	ИначеЕсли Результат.Свойство("ОписаниеОшибки") Тогда
		ПолученныйТекстОшибокОтправки = Результат.ОписаниеОшибки;
	КонецЕсли;
	
	// Анализируем 
	Если ТекстОшибокОтправки <> ПолученныйТекстОшибокОтправки Тогда
		ТекстОшибокОтправки = ПолученныйТекстОшибокОтправки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗаявление(СохранятьЗаявление = Истина) Экспорт
	
	Если ЗапретитьИзменение Тогда
		Возврат;
	КонецЕсли;
		
	НовыйДокументЗаявление = РеквизитФормыВЗначение("ДокументЗаявление");
	
	СохранитьЗаявление_Очистка(НовыйДокументЗаявление);
	СохранитьЗаявление_ДанныеУЦ(НовыйДокументЗаявление);
	СохранитьЗаявление_ДанныеОрганизации(НовыйДокументЗаявление);
	СохранитьЗаявление_Владелец(НовыйДокументЗаявление);
	СохранитьЗаявление_СлужебныеРеквизиты(НовыйДокументЗаявление);
	СохранитьЗаявление_ГосОрганы(НовыйДокументЗаявление);
	СохранитьЗаявление_ИзменившиесяРеквизитыВТЧ(НовыйДокументЗаявление);  
	СохранитьЗаявление_Флаги(НовыйДокументЗаявление);
	СохранитьЗаявление_ЭДО(НовыйДокументЗаявление);
	СохранитьЗаявление_ПрисоединенныеФайлы(НовыйДокументЗаявление, СохранятьЗаявление);
	СохранитьЗаявление_Криптография(НовыйДокументЗаявление, СохранятьЗаявление);
	СохранитьЗаявление_Документы(НовыйДокументЗаявление);
	
	ОбработкаЗаявленийАбонента.УдалитьПробелы(НовыйДокументЗаявление);
	НовыйДокументЗаявление.Записать();
	
	ЗначениеВРеквизитФормы(НовыйДокументЗаявление, "ДокументЗаявление");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЗаявлениеКлиент(СохранятьЗаявление = Истина) Экспорт
	
	СохранитьЗаявление(СохранятьЗаявление);
	Оповестить("Запись_ЗаявлениеАбонентаСпецоператораСвязи", , ДокументЗаявление.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗаявление_Документы(НовыйДокументЗаявление)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.СохранитьДокументыЗаявления(ЭтотОбъект, НовыйДокументЗаявление);
		
КонецПроцедуры

&НаСервере
Процедура СохранитьЗаявление_ДанныеУЦ(НовыйДокументЗаявление)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.РазобратьДанныеУЦ(ЭтотОбъект);
	
	НовыйДокументЗаявление.СпецоператорСвязи		= Спецоператор;
	НовыйДокументЗаявление.НаименованиеУЦ			= НаименованиеУЦ;
	НовыйДокументЗаявление.РегламентУЦ				= РегламентУЦ;
	НовыйДокументЗаявление.ПолучательЗаявленияВУЦ	= ПолучательЗаявленияВУЦ;
	НовыйДокументЗаявление.АдресУЦ					= АдресУЦ;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗаявление_ДанныеОрганизации(НовыйДокументЗаявление)
	
	НовыйДокументЗаявление.Организация							= Организация;
	НовыйДокументЗаявление.ТипОрганизации						= ЭтоЮридическоеЛицо;
	НовыйДокументЗаявление.ИНН									= ИНН;
	НовыйДокументЗаявление.КПП									= ИтоговыеДанныеОрганизации_КПП();
	НовыйДокументЗаявление.КраткоеНаименование					= ИтоговыеДанныеОрганизации_КраткоеНаименование();
	НовыйДокументЗаявление.ПризнакОбособленногоПодразделения	= ПризнакОбособленногоПодразделения;
	НовыйДокументЗаявление.ЭтоНотариусАдвокатИлиГКФХ			= ЭтоНотариусАдвокатИлиГКФХ;
	НовыйДокументЗаявление.АдресЮридический 					= АдресЮридическийЗначение;
	НовыйДокументЗаявление.ТелефонОсновной						= ИтоговыеДанныеОрганизации_ТелефонОсновной();
	НовыйДокументЗаявление.ВключитьЛицензиюКриптоПро 			= ВключатьЛицензиюКриптоПроВСертификат И ПоказыватьФлагВключатьЛицензиюКриптоПроВСертификат;
	НовыйДокументЗаявление.ЭтоБюджетополучатель 				= ЭтоБюджетополучатель;
	
	Если НЕ ЭтоИностраннаяОрганизация И НЕ ЭтоНотариусАдвокатИлиГКФХ Тогда
		НовыйДокументЗаявление.ОГРН = ИтоговыеДанныеОрганизации_ОГРН();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗаявление_СлужебныеРеквизиты(НовыйДокументЗаявление)
	
	НовыйДокументЗаявление.Дата									= ТекущаяДатаСеанса();
	НовыйДокументЗаявление.Ответственный						= Пользователи.ТекущийПользователь();
	НовыйДокументЗаявление.ДатаСозданияУчетнойЗаписи			= '00010101';
	НовыйДокументЗаявление.ТипЗаявления							= Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение;
	НовыйДокументЗаявление.ИдентификаторДокументооборота		= нрег(СтрЗаменить(Строка(Новый("УникальныйИдентификатор")), "-", ""));
	НовыйДокументЗаявление.Статус								= Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено;

КонецПроцедуры

&НаСервере
Процедура СохранитьЗаявление_Владелец(НовыйДокументЗаявление)
	
	НовыйДокументЗаявление.ВладелецЭЦПТип						= ВладелецЭЦПТип;
	НовыйДокументЗаявление.ВладелецЭЦП							= ИтоговыеДанныеВладельца_ВладелецЭЦП();
	НовыйДокументЗаявление.ВладелецЭЦПФамилия					= СокрЛП(ВладелецЭЦПФамилия);
	НовыйДокументЗаявление.ВладелецЭЦПИмя						= СокрЛП(ВладелецЭЦПИмя);
	НовыйДокументЗаявление.ВладелецЭЦПОтчество					= СокрЛП(ВладелецЭЦПОтчество);
	
	НовыйДокументЗаявление.ЭлектроннаяПочта						= ЭлектроннаяПочта;
	ТелефонМобильныйБезРазделителей = ТелефонМобильныйБезРазделителей(ТелефонМобильный);
	Если Не ПолучатьУведомления ИЛИ ПустаяСтрока(ТелефонМобильныйБезРазделителей) Тогда
		НовыйДокументЗаявление.ТелефонМобильный = "";
	Иначе
		НовыйДокументЗаявление.ТелефонМобильный = ТелефонМобильный;
	КонецЕсли;
	
	НовыйДокументЗаявление.ВладелецЭЦПВидДокумента				= ВладелецЭЦПВидДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПНомерДокумента			= ВладелецЭЦПНомерДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПСерияДокумента			= ВладелецЭЦПСерияДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПДатаВыдачиДокумента		= ВладелецЭЦПДатаВыдачиДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПКемВыданДокумент			= ВладелецЭЦПКемВыданДокумент;
	НовыйДокументЗаявление.ВладелецЭЦПДатаРождения				= ВладелецЭЦПДатаРождения;
	НовыйДокументЗаявление.ВладелецЭЦПМестоРождения				= ВладелецЭЦПМестоРождения;
	НовыйДокументЗаявление.ВладелецЭЦПКодПодразделения			= ВладелецЭЦПКодПодразделения;
	НовыйДокументЗаявление.ВладелецЭЦППол						= ВладелецЭЦППол;
	НовыйДокументЗаявление.ВладелецЭЦПГражданство				= ВладелецЭЦПГражданство;
	НовыйДокументЗаявление.ВладелецЭЦПСНИЛС						= ИтоговыеДанныеВладельца_ВладелецЭЦПСНИЛС();
	
	Если ЭтоЮридическоеЛицо Тогда
		НовыйДокументЗаявление.ВладелецЭЦПДолжность 	= ИтоговыеДанныеВладельца_ВладелецЭЦПДолжность();
		НовыйДокументЗаявление.ВладелецЭЦППодразделение	= ВладелецЭЦППодразделение;
		НовыйДокументЗаявление.ВладелецЭЦПИНН			= ИтоговыеДанныеВладельца_ВладелецЭЦПИНН();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗаявление_Очистка(НовыйДокументЗаявление)
	
	// Очистка заявления
	Для каждого РеквизитЗаявления Из НовыйДокументЗаявление.Метаданные().Реквизиты Цикл
		Если РеквизитЗаявления.Имя = "Номер" И ЭтоОткрытиеЗаявления Тогда
			НовыйДокументЗаявление.УстановитьНовыйНомер();
		ИначеЕсли РеквизитЗаявления.Имя <> "ПодписатьЭП" Тогда
			НовыйДокументЗаявление[РеквизитЗаявления.Имя] = Неопределено;
		КонецЕсли;
	КонецЦикла;

	Для каждого ТаблицаЗаявления Из НовыйДокументЗаявление.Метаданные().ТабличныеЧасти Цикл
		НовыйДокументЗаявление[ТаблицаЗаявления.Имя].Очистить();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗаявление_Криптография(НовыйДокументЗаявление, СохранятьЗаявление)
	
	СохранитьЗаявление_СохранитьСертификат(НовыйДокументЗаявление, СохранятьЗаявление);
	
	Если ВыбранноеМестоХраненияКлюча = Перечисления.МодельРаботыСКлючами.ВМоделиСервиса Тогда
		НовыйДокументЗаявление.ТипКриптопровайдера = Перечисления.ТипыКриптоПровайдеров.CryptoPro;
	Иначе
		НовыйДокументЗаявление.ТипКриптопровайдера = ВыбранноеМестоХраненияКлюча;
	КонецЕсли;
	
	НовыйДокументЗаявление.СпособПодтвержденияКриптоопераций = СпособПодтвержденияКриптоопераций;
	НовыйДокументЗаявление.УчетнаяЗапись = УчетнаяЗапись;
	НовыйДокументЗаявление.ПодписатьЭП   = ЭтоЭлектронноеПодписание;
	НовыйДокументЗаявление.ТребуетсяВстречаСПартнером = ТребуетсяВстречаСПартнером();
	
	Если ЗначениеЗаполнено(СпособПолученияСертификата) Тогда 
		НовыйДокументЗаявление.СпособПолученияСертификата = СпособПолученияСертификата;
	Иначе
		НовыйДокументЗаявление.СпособПолученияСертификата = Перечисления.СпособПолученияСертификата.ИздатьНовый;
	КонецЕсли;
	
	СохранитьЗаявление_ЭПВОблаке(НовыйДокументЗаявление);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗаявление_СохранитьСертификат(НовыйДокументЗаявление, СохранятьЗаявление)
	
	Если СвойстваТекущегоСертификата <> Неопределено Тогда
		НовыйДокументЗаявление.Сертификат = Новый ХранилищеЗначения(СвойстваТекущегоСертификата);
	ИначеЕсли ИспользоватьСуществующий(ЭтотОбъект) Тогда
		// Для печати заявления, когда еще не получены СвойстваТекущегоСертификата
		НовыйДокументЗаявление.Сертификат = Новый ХранилищеЗначения(ВключаемыйСертификат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗаявление_ПрисоединенныеФайлы(НовыйДокументЗаявление, СохранятьЗаявление)
	
	// Сохранение документа
	Если СохранятьЗаявление Тогда
		
		Если НовыйДокументЗаявление.ЭтоНовый() Тогда
			СсылкаНаЗаявление = Документы.ЗаявлениеАбонентаСпецоператораСвязи.ПолучитьСсылку(Новый УникальныйИдентификатор);
		Иначе
			СсылкаНаЗаявление = НовыйДокументЗаявление.Ссылка;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФайлСканПаспорт) Тогда
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("Автор", Неопределено);
			ПараметрыФайла.Вставить("ВладелецФайлов", СсылкаНаЗаявление);
			ПараметрыФайла.Вставить("ИмяБезРасширения", ФайлСканПаспорт.ИмяБезРасширения);
			ПараметрыФайла.Вставить("РасширениеБезТочки", ФайлСканПаспорт.Расширение);
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
			
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ФайлСканПаспорт.Адрес);
			НоваяСтрока = НовыйДокументЗаявление.ЭлектронныеДокументы.Добавить();
			НоваяСтрока.Документ = "Паспорт";
			НоваяСтрока.Файл = ПрисоединенныйФайл;
		КонецЕсли;
		Если НовыйДокументЗаявление.ЭтоНовый() Тогда
			НовыйДокументЗаявление.УстановитьСсылкуНового(СсылкаНаЗаявление);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗаявление_ЭПВОблаке(НовыйДокументЗаявление)
	
	Если ИспользоватьСуществующий(ЭтотОбъект) Тогда
		НовыйДокументЗаявление.ЭлектроннаяПодписьВМоделиСервиса = ВключаемыйСертификатОблачный;
	ИначеЕсли ЭтоПереходВОблако Тогда
		НовыйДокументЗаявление.ЭлектроннаяПодписьВМоделиСервиса = Истина;
	ИначеЕсли ЭтоПереходВКоробку Тогда
		НовыйДокументЗаявление.ЭлектроннаяПодписьВМоделиСервиса = Ложь;
	Иначе
		НовыйДокументЗаявление.ЭлектроннаяПодписьВМоделиСервиса = ЭтоУчетнаяЗаписьВМоделиСервиса;
	КонецЕсли;
	
	НовыйДокументЗаявление.ИдентификаторПроверкиТелефонаДляПаролей         = ПроверкаТелефонДляПаролей.ИдентификаторПроверки;
	НовыйДокументЗаявление.ИдентификаторПроверкиЭлектроннойПочтыДляПаролей = ПроверкаЭлектроннаяПочтаДляПаролей.ИдентификаторПроверки;
	НовыйДокументЗаявление.ТелефонМобильныйДляАвторизации = ТелефонМобильныйДляПаролей;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗаявление_ИзменившиесяРеквизитыВТЧ(НовыйДокументЗаявление)
	
	// Записываем перечень изменившихся реквизитов
	НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Очистить();
	Для каждого СтрокаТаблицыПодтверждения Из ТаблицаДанныхЗаявленияНаПодключение Цикл
		
		// Записываем в документ только изменившиеся реквизиты
		Если СтрокаТаблицыПодтверждения.ЭтотПараметрИзменился И СтрокаТаблицыПодтверждения.ВыделятьСтрокуЖелтым Тогда
			
			Если ТипЗнч(СтрокаТаблицыПодтверждения.ИзмененныйРеквизит) <> Тип("Строка") Тогда
				НоваяСтрока = НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Добавить();
				НоваяСтрока.ИзмененныйРеквизит = СтрокаТаблицыПодтверждения.ИзмененныйРеквизит;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПереиздатьСертификат И (ЭтоСертификатДругогоУЦИсходный ИЛИ ЭтоСертификатДругогоУЦ) Тогда
		
		НоваяСтрока = НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Добавить();
		НоваяСтрока.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.УдостоверяющийЦентр;
		
		Если ЭтоСертификатДругогоУЦ Тогда
			НовыйДокументЗаявление.ЭтоСертификатДругогоУЦ = ЭтоСертификатДругогоУЦ;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗаявление_Флаги(НовыйДокументЗаявление)
	
	Значения = Метаданные.Перечисления.ФлагиЗаявленияНаИзменение.ЗначенияПеречисления;
	Для каждого Значение Из Значения Цикл
		Имя = Значение.Имя;
		Если ЭтотОбъект[Имя] Тогда
			 СохранитьФлаг(НовыйДокументЗаявление, Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗаявление_ГосОрганы(НовыйДокументЗаявление)
	
	// Контролирующие органы
	НовыйДокументЗаявление.ПодатьЗаявкуНаСертификатДляФСРАР 	= ПодатьЗаявкуНаСертификатДляФСРАР;
	НовыйДокументЗаявление.КодРегионаФСРАР 						= ИтоговыеДанныеОрганизации_КодРегионаФСРАР();
	НовыйДокументЗаявление.ПодатьЗаявкуНаПодключениеРПН 		= ПодатьЗаявкуНаПодключениеРПН;
	НовыйДокументЗаявление.ПодатьЗаявкуНаПодключениеФТС 		= ПодатьЗаявкуНаПодключениеФТС;
	НовыйДокументЗаявление.РегНомерПФР							= ИтоговыеДанныеОрганизации_РегНомерПФР();
	
	НовыйДокументЗаявление.Получатели.Очистить();
	
	Если СдаватьВФНС Тогда
		Для Каждого СтрокаНаправлений Из ПолучателиФНС Цикл
			НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя 	= СтрокаНаправлений.ТипПолучателя;
			НоваяСтрокаНаправления.КодПолучателя 	= СтрокаНаправлений.КодПолучателя;
			НоваяСтрокаНаправления.КПП 				= СтрокаНаправлений.КПП;
		КонецЦикла;
	КонецЕсли;
	
	Если СдаватьВПФР Тогда 
		НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
		НоваяСтрокаНаправления.ТипПолучателя =  ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР");
		НоваяСтрокаНаправления.КодПолучателя = КодПФР;
		НоваяСтрокаНаправления.КПП = "";
	КонецЕсли;
	
	Если СдаватьВФСС Тогда 
		НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
		НоваяСтрокаНаправления.ТипПолучателя =  ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС");
		НоваяСтрокаНаправления.КПП = "";
	КонецЕсли;
	
	Если СдаватьВРосстат Тогда
		Для Каждого СтрокаНаправлений Из ПолучателиФСГС Цикл
			НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя 	= СтрокаНаправлений.ТипПолучателя;
			НоваяСтрокаНаправления.КодПолучателя 	= СтрокаНаправлений.КодПолучателя;
			НоваяСтрокаНаправления.КПП 				= СтрокаНаправлений.КПП;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗаявление_ЭДО(НовыйДокументЗаявление)
	
	// Предварительно очищаем, потому что для открытого ранее заявления эти значения будут заполнены
	НовыйДокументЗаявление.ПодключитьЭДО           = Ложь;
	НовыйДокументЗаявление.ПереиздатьСертификатЭДО = Ложь;
	НовыйДокументЗаявление.НастройкиЭДО            = Неопределено;
	
	// ЭДО подключение
	Если ПодключитьЭДО И Элементы.ГруппаПодключитьЭДО.Видимость Тогда
		НовыйДокументЗаявление.ПодключитьЭДО = Истина;
		НовыйДокументЗаявление.НастройкиЭДО = НастройкиЭДО;
	КонецЕсли;
	
	// ЭДО переиздание
	Если ПереиздатьСертификатЭДО И Элементы.ФлагПереиздатьСертификатЭДО.Видимость Тогда
		НовыйДокументЗаявление.ПереиздатьСертификатЭДО = Истина;
		НовыйДокументЗаявление.НастройкиЭДО            = НастройкиЭДО;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПрисоединитьФайлЗаявления(АдресТекстаОтправляемогоЗаявления)
	
	ЭтотОбъект.Прочитать();
	НовыйДокументЗаявление = РеквизитФормыВЗначение("ДокументЗаявление");
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ПрисоединенныйФайлЗаявления = КонтекстЭДОСервер.ПрисоединитьФайлЗаявления(НовыйДокументЗаявление, АдресТекстаОтправляемогоЗаявления, "Заявление_на_изменение");
	НовыйДокументЗаявление.Записать();
	
	ЗначениеВРеквизитФормы(НовыйДокументЗаявление, "ДокументЗаявление");
	
	Возврат ПрисоединенныйФайлЗаявления;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьТОГСВОрганизацию()
	
	// Меняем код ТОГС на тот, который был указан в заявлении
	Если ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено")
		И ИзменитьСоставКонтролирующихОрганов
		И ПолучателиФСГС.Количество() = 1
		И СокрЛП(ПолучателиФСГС[0].КодПолучателя) <> ДанныеОрганизации.КодОрганаФСГС Тогда
		
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЗадатьКодОрганаФСГСВОрганизации(
		Организация, 
		СокрЛП(ПолучателиФСГС[0].КодПолучателя));
	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОЗавершенииОтправки(Результат)
	
	ОповеститьОбИзменении(ДокументЗаявление.Ссылка);
	Оповестить("Завершение отправки заявления", Результат, ДокументЗаявление.Ссылка);
	ЭтаФорма.Активизировать();

КонецПроцедуры

&НаКлиенте
Процедура АнализРезультатовОтправки(Результат, ДополнительныеПараметры) Экспорт
	
	ЭтотОбъект.Прочитать();
	
	ПрочитатьОшибкиОтправки(Результат);
	ОповеститьОЗавершенииОтправки(Результат);
	ЗаписатьТОГСВОрганизацию();
		
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") 
		И ДополнительныеПараметры.Свойство("ТелефонБылПодтвержден") Тогда
		
		Если ДополнительныеПараметры.Свойство("ЭтоАвтоматическаяОбработка")
			И ДополнительныеПараметры.ЭтоАвтоматическаяОбработка Тогда
			Элементы.ГруппаПодсказок1.Видимость = Ложь;
			Элементы.ПодсказкаПоРезультатам.Заголовок = НСтр("ru = 'Ваше заявление успешно отправлено в автоматическую обработку';
															|en = 'Your application is sent to automatic processing'");
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьРезультатОтправки();
	
КонецПроцедуры

&НаСервере
Процедура НачатьОпределениеТекстаЗаявленияНаСервере(Алгоритм)

	АдресЗаданияПоПолучениюТекстаЗаявления = ПоместитьВоВременноеХранилище("", ЭтаФорма.УникальныйИдентификатор);
	
	ДополнительныеПараметры = Новый Массив();
	ДополнительныеПараметры.Добавить(АдресЗаданияПоПолучениюТекстаЗаявления);
	ДополнительныеПараметры.Добавить(ДокументЗаявление.Ссылка);
	ДополнительныеПараметры.Добавить(Алгоритм);
	
	ФоновыеЗадания.Выполнить("ЭлектронныйДокументооборотСКонтролирующимиОрганами.НачатьОпределениеТекстаЗаявления", ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБубликОтправки()
	
	ПодключитьОбработчикОжидания("Подключаемый_ПоказатьБубликОтправки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьБубликОтправки()
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Заявление", ДокументЗаявление.Ссылка);
	
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_ОтправкаЗаявления", ДополнительныеПараметры, ЭтотОбъект);
	
	// Создание закрытого ключа начнется из метода ОтправитьЗаявлениеИзВладельца,
	// а из него - ОтправитьЗаявлениеПослеПоказаБублика()
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗаявлениеПослеПоказаБублика()
	
	АдресТекстаОтправляемогоЗаявления = "";
	
	НужноПредварительноПолучитьТекстЗаявления = 
		ДокументЗаявление.ЭлектроннаяПодписьВМоделиСервиса 
		И ДокументЗаявление.ПодписатьЭП;
	
	Если НужноПредварительноПолучитьТекстЗаявления Тогда
		НачатьОпределениеТекстаЗаявления();
	Иначе
		ОтправитьЗаявлениеИзКонтейнера();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОпределениеТекстаЗаявления()
	
	АлгоритмКонтейнераКлючей = КонтекстЭДОКлиент.ЗаявлениеОпределитьАлгоритмДляСозданияКонтейнераКлючей(ДокументЗаявление);
	
	НачатьОпределениеТекстаЗаявленияНаСервере(АлгоритмКонтейнераКлючей);
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьТекстЗаявления", 1, Истина);

КонецПроцедуры

&НаСервере
Процедура ЗаписатьСостояниеЗаявления()

	НовыйДокументЗаявление = РеквизитФормыВЗначение("ДокументЗаявление");
	
	НовыйДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено");
	НовыйДокументЗаявление.НастройкаЗавершена = Истина;
	НовыйДокументЗаявление.Записать();
	
	ЗначениеВРеквизитФормы(НовыйДокументЗаявление, "ДокументЗаявление");

КонецПроцедуры

&НаКлиенте
Процедура СформироватьИОтправитьЗаявление()
	
	Если ЭтоТолькоСменаТелефонаИлиПочтыВОблаке() Тогда
		СменитьТелефонИлиПочтуБезОтправкиЗаявления()
	ИначеЕсли ЭтоЭлектронноеПодписание Тогда
		СформироватьИОтправитьЗаявление_СПодписанием();
	Иначе
		ПоказатьБубликОтправки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СертификатПросрочен(Форма)
	
	Просрочен = ЗначениеЗаполнено(Форма.СертификатДействителенПо) 
				И НачалоДня(Форма.СертификатДействителенПо) < НачалоДня(Форма.ТекущаяДатаСервер);
							
	Возврат Просрочен
	
КонецФункции

&НаСервере
Функция ВозможностьПодписания()
	
	ВозможноЭлектронное = Ложь;
	ВозможноБумажное    = Истина;
	ОписаниеОшибки      = "";
	
	Если ИспользоватьСуществующий(ЭтотОбъект) Тогда
		
		ВозможноЭлектронное = Истина;
		ВозможноБумажное    = Ложь;
		
		ОписаниеОшибки = НСтр("ru = 'Обязательно при использовании сертификата из другой программы';
								|en = 'Required for a certificate from another application'");
			
	Иначе
		
		Если НЕ СертификатДоступен Тогда
			ОписаниеОшибки = НСтр("ru = 'Невозможно при недоступном сертификате';
									|en = 'Not available with unavailable certificate'");
		ИначеЕсли СертификатПросрочен(ЭтотОбъект) Тогда
			ОписаниеОшибки = НСтр("ru = 'Недоступно при истекшем сертификате';
									|en = 'Not available with expired certificate'");
		ИначеЕсли ТипКриптопровайдераИзменился И НЕ ЭтоПереходНаЛокальнуюКриптографиюВоФреше() Тогда
			ОписаниеОшибки = НСтр("ru = 'Недоступно при изменении криптопровайдера';
									|en = 'Not available when changing a cryptographic service provider'");
		ИначеЕсли ЭлПодписаниеНевозможно() Тогда
			
			Реквизиты = РеквизитыПрепятствующиеЭлПодписанию();
			Реквизиты = СтрСоединить(Реквизиты, Символы.ПС);
			
			ОписаниеОшибки = НСтр("ru = 'Подписание электронной подписью невозможно, т.к. изменился ключевой реквизит сертификата:';
									|en = 'Cannot sign digitally as the key certificate attribute changed:'") + Символы.ПС + Реквизиты;
			
		ИначеЕсли ПереиздатьСертификат И ВозможноБесшовноеПолучениеСертификатаВДУЦ Тогда
			
			ОписаниеОшибки = ОбработкаЗаявленийАбонентаКлиентСервер.ОшибкаПриПолученииСертификатаЧерезДУЦ();
			
		ИначеЕсли ТребуетсяВстречаСПартнером() Тогда
			
			ВозможноЭлектронное = Истина;
			
			Реквизиты = РеквизитыТребующиеВстречиСПартнером();
			Если Реквизиты.Количество() = 0 И НЕ ЭтоЭлектронноеПодписание Тогда
				ОписаниеОшибки = НСтр("ru = 'Потребуется встреча с партнером для оформления документов, поскольку выбрана отправка без подписания';
										|en = 'To register documents, meet the partner as sending without signature is selected'");
			Иначе
				Реквизиты = СтрСоединить(Реквизиты, Символы.ПС);
				ОписаниеОшибки = НСтр("ru = 'Потребуется встреча с партнером для оформления документов, поскольку изменились:';
										|en = 'You will need to meet a partner to draw up documents as there are changes in:'") + Символы.ПС + Реквизиты;
			КонецЕсли;
			
		Иначе
			
			ВозможноЭлектронное = Истина;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если НЕ ВозможноБумажное Тогда
		ПереключитьНаЭлектронноеПодписание(ЭтотОбъект);
	КонецЕсли;
	
	Если НЕ ВозможноЭлектронное Тогда
		ПереключитьНаБумажноеПодписание(ЭтотОбъект);
	КонецЕсли;
	
	
	Результат = Новый Структура();
	Результат.Вставить("ВозможноЭлектронное", ВозможноЭлектронное);
	Результат.Вставить("ВозможноБумажное",    ВозможноБумажное);
	Результат.Вставить("ОписаниеОшибки",      ОписаниеОшибки);

	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЭтоПереходНаЛокальнуюКриптографиюВоФреше()
	
	Возврат
		ИзменитьМестоХранения
		И ЭтаУчетнаяЗаписьБылаСделанаДляОблака
		И ДоступнаЭлектроннаяПодписьВМоделиСервиса
		И ЭтоПереходВКоробку;
	
КонецФункции

&НаСервере
Функция ТребуетсяВстречаСПартнером()
	
	Реквизиты = РеквизитыТребующиеВстречиСПартнером();
	ТребуетсяВстреча = Реквизиты.Количество() > 0 И НЕ ИспользоватьСуществующий(ЭтотОбъект);
	Возврат ТребуетсяВстреча ИЛИ НЕ ЭтоЭлектронноеПодписание;
	
КонецФункции

&НаСервере
Функция ЭлПодписаниеНевозможно()
	
	Реквизиты = РеквизитыПрепятствующиеЭлПодписанию(); 
	Возврат Реквизиты.Количество() > 0;
	
КонецФункции

&НаСервере
Функция РеквизитыТребующиеВстречиСПартнером()
	
	//Требуется встреча при изменении:
	// - ОГРН/ОГРНИП
	// - Область - позже уберем
	// - ФИО владельца
	// - СНИЛС
	
	Реквизиты = РеквизитыПоУсловию("ТребуетВстречиСПартнером", Требует);
	
	Возврат Реквизиты;
	
КонецФункции

&НаСервере
Функция РеквизитыПрепятствующиеЭлПодписанию()
	
	// Невозможно подписать при изменении:
	// - Краткое наименование организации - позже уберем
	// - ОГРН/ОГРНИП
	// - Область - позже уберем
	// - ФИО владельца
	// - СНИЛС
	
	Возврат РеквизитыПоУсловию("ПрепятствуетЭлПодписанию", Препятствует);
	
КонецФункции

&НаСервере
Функция РеквизитыПоУсловию(ИмяРеквизита, Значение)
	
	РеквизитыПоУсловию = Новый Массив;
	
	ВсеРеквизиты = Новый Массив;
	
	Реквизиты = ИзмененныеРеквизитыВладельца(Истина, Истина);
	ДобавитьВМассив(ВсеРеквизиты, Реквизиты);
	
	Реквизиты = ИзмененныеРеквизитыОрганизации(Истина, Истина);
	ДобавитьВМассив(ВсеРеквизиты, Реквизиты);
		
	Для каждого ТекущийРеквизит Из ВсеРеквизиты Цикл
			
		Если ТекущийРеквизит[ИмяРеквизита] = Значение Тогда
			РеквизитыПоУсловию.Добавить("- " + ТекущийРеквизит.Представление);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат РеквизитыПоУсловию;
	
КонецФункции

&НаСервере
Процедура ДобавитьВМассив(Массив, Добавляемое)
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Массив, Добавляемое);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСертификатПередПодписанием()
	
	Отпечаток = СвойстваТекущегоСертификата.Отпечаток;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Отпечаток", Отпечаток);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодписатьЗаявлениеИОтправить_ПослеПоискаСертификатаПоОтпечатку", 
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	КриптографияЭДКОКлиент.ПолучитьСертификаты(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗаявлениеИОтправить_ПослеПоискаСертификатаПоОтпечатку(Результат, ВходящийКонтекст) Экспорт
	
	Найден = Ложь;
	Если Результат.Выполнено Тогда
		Для каждого Сертификат Из Результат.Сертификаты Цикл
			Если Сертификат.Отпечаток = ВходящийКонтекст.Отпечаток Тогда
				Найден = Истина;
				СвойстваСертификата = Сертификат;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Если Найден Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПодписатьЗаявлениеИОтправить_ПослеПолученияBase64", 
			ЭтотОбъект, 
			СвойстваСертификата);
			
		КриптографияЭДКОКлиент.ЭкспортироватьСертификатВBase64(ОписаниеОповещения, СвойстваСертификата, Ложь);
		
	Иначе
		
		Если НЕ Результат.Свойство("ОписаниеОшибки") 
			ИЛИ Результат.Свойство("ОписаниеОшибки") И НЕ ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
			
			Текст = НСтр("ru = 'На компьютере не удалось найти сертификат, которым выполняется подписание';
						|en = 'Cannot find the certificate used for signing on the PC'");
			Результат.Вставить("ОписаниеОшибки", Текст);
			
		КонецЕсли;
		
		СообщитьОНевозможностиПодписания(Результат);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция АдресТаблицыСравненияРеквизитов() Экспорт
	
	ТаблицаЗначенийСравненияРеквизитов = РеквизитФормыВЗначение("ТаблицаСравненияРеквизитов");
	Возврат ПоместитьВоВременноеХранилище(ТаблицаЗначенийСравненияРеквизитов, Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ПодписатьЗаявлениеИОтправить_ПослеПолученияBase64(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		Если ИспользоватьСуществующий(ЭтотОбъект) Тогда
			СвойстваТекущегоСертификата = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ВключаемыйСертификат);
		Иначе
			СвойстваТекущегоСертификата = ВходящийКонтекст;
		КонецЕсли;
		
		ДвДанныеСертификата = Base64Значение(Результат.СтрокаBase64);
		СвойстваТекущегоСертификата.Вставить("Сертификат", ДвДанныеСертификата);
		
		// Сохраняем в документ сертификат
		СохранитьСертификатВДокумент();
		
		СравнитьРеквизитыСертификатов();
		
	Иначе
		СообщитьОНевозможностиПодписания(Результат);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СохранитьСертификатВДокумент() Экспорт
	
	НовыйДокументЗаявление = РеквизитФормыВЗначение("ДокументЗаявление");
	СохранитьЗаявление_СохранитьСертификат(НовыйДокументЗаявление, Истина);
	НовыйДокументЗаявление.Записать();
	ЗначениеВРеквизитФормы(НовыйДокументЗаявление, "ДокументЗаявление");
	
КонецФункции

&НаКлиенте
Процедура СообщитьОНевозможностиПодписания(Результат)
	
	Оповещение = Новый ОписаниеОповещения("СообщитьОНевозможностиПодписания_Завершение", ЭтотОбъект);
	
	ТекстВопроса = НСтр("ru = 'Продление с использованием электронной подписи невозможно по причине:
                         |%1
                         |
                         |Отправить заявление без подписания?';
                         |en = 'Extension by using a digital signature is impossible due to:
                         |%1
                         |
                         |Send the application without signature?'");
	
	ТекстВопроса = СтрШаблон(ТекстВопроса, Результат.ОписаниеОшибки);
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНевозможностиПодписания_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОтправитьВБумажномВиде();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВБумажномВиде() Экспорт
	
	ПереключитьНаБумажноеПодписание(ЭтотОбъект);
	УправлениеФормой();
	КоманднаяПанельМастерДалее();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗаявлениеИзКонтейнера()
	
	ИдентификаторАбонента = КонтекстЭДОКлиент.ИдентификаторАбонентаПоОрганизации(Организация);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("АнализРезультатовОтправки", ЭтотОбъект, Новый Структура);
	
	Контекст = КонтекстЭДОКлиент.ПараметрыПроцедурыСформироватьИОтправитьЗаявление();
	Контекст.ДокументЗаявление 							= ДокументЗаявление;
	Контекст.ИдентификаторАбонента 						= ИдентификаторАбонента;
	Контекст.ВызовИзМастераПодключенияК1СОтчетности 	= Истина;
	Контекст.ВыполняемоеОповещение 						= ОписаниеОповещения;
	Контекст.АдресТекстаОтправленногоЗаявления 			= АдресТекстаОтправляемогоЗаявления;
	Контекст.ПрисоединенныйФайлЗаявления 				= ПрисоединенныйФайлЗаявления;
	Контекст.ФормироватьЗакрытыйКлючИЗапросНаСертификат = НЕ ДокументЗаявление.ЭлектроннаяПодписьВМоделиСервиса
		И НЕ ИспользоватьСуществующий(ЭтотОбъект)
		И ПереиздатьСертификат <> НеТребуется;
		
	Если ВключатьЛицензиюКриптоПроВСертификат И ПоказыватьФлагВключатьЛицензиюКриптоПроВСертификат Тогда
		Контекст.OIDЛицензииКриптоПро = OIDЛицензииКриптоПро;
	КонецЕсли;
	
	Если НужноПодтвердитьПаролемСменуТелефона() Тогда
		
		Оповещение = Новый ОписаниеОповещения(
			"ПослеПодтвержденияСменыТелефона", 
			ЭтотОбъект, 
			Контекст);
		
		ПодтвердитьПаролемСменуТелефона(Оповещение);
		
	Иначе
		КонтекстЭДОКлиент.СформироватьИОтправитьЗаявление(Контекст);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьЗаявлениеПослеПоказаБублика() Экспорт
	
	ОтправитьЗаявлениеПослеПоказаБублика();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьТекстЗаявления() Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресЗаданияПоПолучениюТекстаЗаявления) Тогда
		Результат = ПолучитьИзВременногоХранилища(АдресЗаданияПоПолучениюТекстаЗаявления);
		Если ЗначениеЗаполнено(Результат) Тогда
			
			ОтключитьОбработчикОжидания("Подключаемый_ПроверитьТекстЗаявления");
			
			Если Результат.Выполнено Тогда
				
				ТекстОтправляемогоЗаявления 	  = Результат.ТекстОтправляемогоЗаявления;
				АдресТекстаОтправляемогоЗаявления = ПоместитьВоВременноеХранилище(ТекстОтправляемогоЗаявления, Новый УникальныйИдентификатор);
				
				ПрисоединенныйФайлЗаявления = ПрисоединитьФайлЗаявления(АдресТекстаОтправляемогоЗаявления);
				ОтправитьЗаявлениеИзКонтейнера();
				
			Иначе
				// Вывод ошибки
				АнализРезультатовОтправки(Результат, Неопределено);
			КонецЕсли;
			
		Иначе
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьТекстЗаявления", 1, Истина);
		КонецЕсли;
		
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьТекстЗаявления", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗаявлениеИзВладельца() Экспорт
	
	ПодключитьОбработчикОжидания("Подключаемый_ОтправитьЗаявлениеПослеПоказаБублика", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Функция РодительФлага() Экспорт
	
	Группы = Новый Массив;
	Группы.Добавить(Элементы.РамкаОрганизации);
	Группы.Добавить(Элементы.ГруппаИзменитьРеквизитыПодключенияК1СОтчетности);
	
	ГруппаРодитель = ОбработкаЗаявленийАбонента.РодительДобавляемогоФлага(Группы);
	
	Возврат ГруппаРодитель;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьИзменившиесяРеквизиты(ИзмененныеРеквизиты, ЗаголовокФормы)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИзмененныеРеквизиты", ИзмененныеРеквизиты);
	ДополнительныеПараметры.Вставить("Заголовок", ЗаголовокФормы);
	
	ОткрытьФорму(
		КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_СравнениеРеквизитовЗаявления",
		ДополнительныеПараметры,
		ЭтотОбъект,
		,
		,
		,
		, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры	
	
&НаКлиентеНаСервереБезКонтекста
Процедура ПереключитьНаБумажноеПодписание(Форма)
	
	Форма.СпособПодписания = 2; 
	Форма.ЭтоЭлектронноеПодписание = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереключитьНаЭлектронноеПодписание(Форма)
	
	Форма.СпособПодписания = 1; 
	Форма.ЭтоЭлектронноеПодписание = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СброситьГалкиНедоступныхНастроекПриИспользованииСуществующего()
	
	ИзменитьНастройкиУведомлений = ВключаемыйСертификатОблачный;
	ВключатьЛицензиюКриптоПроВСертификат = Ложь;
	ИзменитьМестоХранения = ИзменилосьМестоХранения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСпособаПолученияСертификата(ОпределятьМестоХранения)
	
	ПриИзмененииВключаемогоСертификатаСервер(ОпределятьМестоХранения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВключаемогоСертификатаСервер(ОпределятьМестоХранения)
	
	Если ИспользоватьСуществующий(ЭтотОбъект) Тогда 
		
		ПриИзмененииВключаемогоСертификатаСервер_ПриИспользованииСуществующего();
		
	Иначе
		
		ПриИзмененииВключаемогоСертификатаСервер_ПриИспользованииНового(ОпределятьМестоХранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВключаемогоСертификатаСервер_ПриИспользованииНового(ОпределятьМестоХранения)
	
	СравнитьРеквизитыОрганизацииСИсходными();
	
	Если ОпределятьМестоХранения Тогда
		ОбработкаЗаявленийАбонентаКлиентСервер.ОпределитьВыбранноеМестоХраненияКлюча(ЭтотОбъект);
	КонецЕсли;
	
	ОбработкаЗаявленийАбонентаКлиентСервер.ОпределитьИзменениеВМестеХраненияКлючей(ЭтотОбъект);
	
	Если ПереиздатьСертификат Тогда
		
		ПроверитьНеобходимостьУстановкиГалки_ИзменитьНастройкиУведомлений();
		// зависит от места хранения
		Если НЕ ЭтоОблако(ЭтотОбъект) Тогда
			ОбработкаЗаявленийАбонентаКлиентСервер.ПроверитьНеобходимостьУстановкиГалки_ВключатьЛицензиюКриптоПроВСертификат(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВключаемогоСертификатаСервер_ПриИспользованииСуществующего()
	
	СравнитьРеквизитыОрганизацииСИсходными();
	
	Если ВключаемыйСертификатОблачный Тогда
		ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.МодельРаботыСКлючами.ВМоделиСервиса");
	Иначе
		ВыбранноеМестоХраненияКлюча = ОбработкаЗаявленийАбонентаКлиентСервер.ВыбранныйКриптопровайдер(ЭтотОбъект);
	КонецЕсли;
	
	ОбработкаЗаявленийАбонентаКлиентСервер.ОпределитьИзменениеВМестеХраненияКлючей(ЭтотОбъект);
	
	СброситьГалкиНедоступныхНастроекПриИспользованииСуществующего();
	ПереиздатьСертификат = Рекомендовано;

	// При включенном сертификате обязательно подписание этим сертификатом
	ПереключитьНаЭлектронноеПодписание(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьИзменившиесяРеквизиты(
		ИзменившийсяРеквизит, 
		РеквизитИзменился, 
		ИзмененныеРеквизиты, 
		Было = Неопределено, 
		Стало = Неопределено,
		ТребуетПереизданияСертификата = Ложь,
		ТребуетВстречиСПартнером = Ложь,
		ПрепятствуетЭлПодписанию = Ложь)
		
	Если РеквизитИзменился Тогда
		
		Представление = Строка(ИзменившийсяРеквизит);
		
		Описание = Новый Структура();
		Описание.Вставить("Представление", Представление);
		Описание.Вставить("Было", Было);
		Описание.Вставить("Стало", Стало);
		Описание.Вставить("ТребуетПереизданияСертификата", ТребуетПереизданияСертификата);
		Описание.Вставить("ТребуетВстречиСПартнером", ТребуетВстречиСПартнером);
		Описание.Вставить("ПрепятствуетЭлПодписанию", ПрепятствуетЭлПодписанию);
		
		ИзмененныеРеквизиты.Добавить(Описание);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УчетнаяЗаписьОрганизации(Организация) Экспорт
	
	ВидОбменаСКонтролирующимиОрганами = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ВидОбменаСКонтролирующимиОрганами");
	Если ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате
		И ЗначениеЗаполнено(Организация.УчетнаяЗаписьОбмена) Тогда
		
		УчетнаяЗапись = Организация.УчетнаяЗаписьОбмена;
		ЕстьОшибкиСменыМоделиХраненияКлючей = УчетнаяЗапись.ЕстьОшибкиСменыМоделиХраненияКлючей;
		 
	Иначе
		УчетнаяЗапись = Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка();
	КонецЕсли;
	
	Возврат УчетнаяЗапись;
	
КонецФункции

&НаКлиенте
Функция ЭтоТолькоСменаТелефонаИлиПочтыВОблаке()

	// Телефон
	НазваниеРеквизита = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонМобильныйДляПаролей");
	НазваниеРеквизита = Строка(НазваниеРеквизита);
	
	Отбор = Новый Структура();
	Отбор.Вставить("НазваниеРеквизита", 	НазваниеРеквизита);
	Отбор.Вставить("ЭтотПараметрИзменился", Истина);
	Отбор.Вставить("ВыделятьСтрокуЖелтым", 	Истина);
	
	НайденныеСтроки   = ТаблицаДанныхЗаявленияНаПодключение.НайтиСтроки(Отбор);
	ЕстьСменаТелефона = НайденныеСтроки.Количество() = 1 И ТелефонМобильныйДляПаролейИзменился;
	
	// Почта
	НазваниеРеквизита = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочтаДляПаролей");
	НазваниеРеквизита = Строка(НазваниеРеквизита);
	
	Отбор = Новый Структура();
	Отбор.Вставить("НазваниеРеквизита", 	НазваниеРеквизита);
	Отбор.Вставить("ЭтотПараметрИзменился", Истина);
	Отбор.Вставить("ВыделятьСтрокуЖелтым", 	Истина);
	
	НайденныеСтроки = ТаблицаДанныхЗаявленияНаПодключение.НайтиСтроки(Отбор);
	ЕстьСменаПочты  = НайденныеСтроки.Количество() = 1 И ЭлектроннаяПочтаДляПаролейИзменилась;
	
	// Всего
	Отбор = Новый Структура();
	Отбор.Вставить("ЭтотПараметрИзменился", Истина);
	Отбор.Вставить("ВыделятьСтрокуЖелтым", 	Истина);
	ВсегоИзменений = ТаблицаДанныхЗаявленияНаПодключение.НайтиСтроки(Отбор).Количество();
	
	// Проверка
	ПоменялсяТолькоТелефон = ЕстьСменаТелефона И НЕ ЕстьСменаПочты И ВсегоИзменений = 1;
	ПоменяласьТолькоПочта = НЕ ЕстьСменаТелефона И ЕстьСменаПочты И ВсегоИзменений = 1;
	ПоменялисьПочтаИТелефон = ЕстьСменаТелефона И ЕстьСменаПочты И ВсегоИзменений = 2;
	
	ЭтоТолькоСменаТелефонаИлиПочты = ПоменялсяТолькоТелефон ИЛИ ПоменяласьТолькоПочта ИЛИ ПоменялисьПочтаИТелефон;
	
	Возврат	
		ИзменитьНастройкиУведомлений
		И ЭтоТолькоСменаТелефонаИлиПочты
		И ЭтоУчетнаяЗаписьВМоделиСервиса;

КонецФункции
	
&НаКлиентеНаСервереБезКонтекста
Функция Форматировать(Значение)
	
	Возврат ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(Значение);
	
КонецФункции

&НаСервере
Функция ЭтоРеквизитНеХранящийсяВБазе(ПроверяемыйРеквизит)

	Возврат РеквизитыНеХранящиесяВБазе.Найти(ПроверяемыйРеквизит) <> Неопределено;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИспользоватьСуществующий(Объект) Экспорт
	Возврат ОбработкаЗаявленийАбонентаКлиентСервер.ИспользоватьСуществующий(Объект);
КонецФункции

#КонецОбласти

#Область ОтправкаЗаявленияВПФР

&НаКлиенте
Процедура ПоказатьСтраницуОшибкиОтправкиВПФР() Экспорт
	
	// Метод нужен для того, чтобы работала универсальная отправка заявления в методе 
	// ЗаявленияВПФР_ОтправитьЗаявлениеСейчас_Завершение
	
	// При возникновении ошибки отправку заявления в КА не продолжаем
	
КонецПроцедуры

&НаСервере
Процедура ДействияПередОтправкойЗаявленияВПФР() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ДействияПередОтправкойЗаявленияВПФР(ЭтотОбъект);

КонецПроцедуры


#КонецОбласти

#Область ПриОткрытии

&НаКлиенте
Процедура ПриОткрытии_ПослеПолученияКонтекста(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	// На клиенте, т.к. Крипто-Про стоит на клиенте
	СрокЛицензииКриптоПроКонечный = КонтекстЭДОКлиент.СрокЛицензииКриптоПроКонечный();
	СканированиеДоступно = РаботаСФайламиСлужебныйКлиент.ДоступнаКомандаСканировать();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПриОткрытии_ПослеПроверкиКриптопровайдеров", 
		ЭтотОбъект);
		
	ПроверитьНаличиеКриптопровайдера(ОписаниеОповещения, ПредлагатьУстановкуРасширения());
	
КонецПроцедуры

&НаКлиенте
Функция ПредлагатьУстановкуРасширения()
	
	ЭтоMacOS = ОбщегоНазначенияКлиент.ЭтоMacOSКлиент();
	Если ЭтоMacOS Тогда
		ПредлагатьУстановкуРасширения = Ложь;
	Иначе
		#Если ВебКлиент Тогда
			ПредлагатьУстановкуРасширения = Ложь;
		#Иначе
			ПредлагатьУстановкуРасширения = Истина;
		#КонецЕсли
	КонецЕсли;
	
	Возврат ПредлагатьУстановкуРасширения;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии_ПослеПроверкиКриптопровайдеров(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		УправлениеФормой();
		Возврат;
	КонецЕсли;
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПриОткрытии_Завершение", 
		ЭтотОбъект);
	
	// Заполняем параметры организации
	ДанныеЗаполнения = Новый Структура();
	ИнициализироватьРеквизиты1СОтчетности(ДанныеЗаполнения, Истина, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПоддерживаетсяВторичноеЗаявление Тогда
		Возврат;
	КонецЕсли;
		
	ЭтаФорма.Активизировать();
	
	// Скопировали с исходного заявления все что нужно, дальше работаем самостоятельно
	ЗаявлениеСозданоКопированием = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ЗавершениеДействия

&НаСервере
Процедура ПродлитьЛицензиюНа1СОтчетностьПриИзмененииНаСервере()
	
	ИнициализироватьВозможностьБезбумажногоПродления();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРеквизитыПодключенияК1СОтчетностиПриИзмененииНаСервере()
	
	// Определяем, нужно ли перездавать сертификат 
	ПроверитьНеобходимостьУстановкиГалки_ПереиздатьСертификат();
	УправлениеФормой();

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении_ПослеЗаполненияРеквизитов(Результат, ВходящийКонтекст) Экспорт
	
	// Заглушка
	ЭтоЗавершение = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЭДО_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(ЭтотОбъект);
	НастройкиЭДО = Результат;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуВыбораМестаХраненияНажатие_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено ИЛИ НЕ Результат.Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(ЭтотОбъект);
	ИзменилосьМестоХранения = ВыбранноеМестоХраненияКлюча <> Результат.ВыбранноеМестоХраненияКлюча;
	
	ПараметрыФормы = Результат.ПараметрыФормы;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат, ПараметрыФормы, "ПараметрыФормы");
	
	Если ИзменилосьМестоХранения Тогда
		
		// Не определяем место хранения, т.к. мы только что его тут определили
		ОпределятьМестоХранения = Ложь;
		ПриИзмененииМестаХранения(ОпределятьМестоХранения);
		
	КонецЕсли;
	
	ПроверитьНеобходимостьУстановкиГалки_ПереиздатьСертификат();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеССертификатомНажатие_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено ИЛИ НЕ Результат.Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(ЭтотОбъект);
	
	ПараметрыФормы = Результат.ПараметрыФормы;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат, ПараметрыФормы, "ПараметрыФормы, ИзмененныеРеквизиты");
	
	Адрес = Результат.ОблачныеСертификатыКалуги;
	ОблачныеСертификатыКалуги = ПолучитьИзВременногоХранилища(Адрес);
	
	Адрес = Результат.СертификатыОрганизацииПоИНН;
	СертификатыОрганизацииПоИНН = ПолучитьИзВременногоХранилища(Адрес);
	
	// Т.к. возможно изменился включаемый сертификат, то пересчитываем место хранения.
	// В случае включения сертификата место хранения будет взято из него
	ОпределятьМестоХранения = Истина;
	ПриИзмененииСпособаПолученияСертификата(ОпределятьМестоХранения);
	
	Если ВладелецЭЦПИННИсходный = "" 
		И ЭтоЮридическоеЛицо 
		И ИспользоватьСуществующий(ЭтотОбъект)
		И ТипЗнч(ВключаемыйСертификат) = Тип("Структура") Тогда
		
		ВладелецСертификата = ДокументооборотСКОКлиентСервер.ВладелецСертификат(ВключаемыйСертификат);
		ВладелецЭЦПИННИсходный = ДокументооборотСКОКлиентСервер.ИННИзСертификата(ВладелецСертификата, , Ложь);
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПереиздатьСертификатПриИзмененииНаСервере()
	
	Необходимость = НеобходимостьПереизданияСертификата();
	
	Если Необходимость = Обязательно Тогда
		ПереиздатьСертификат = Обязательно;
	Иначе
		
		// Т.к. в данной ветке Если переиздание сертификата необязательно, 
		// то флаг не может принимать значение 2
		ПереиздатьСертификат = ПереиздатьСертификат % 2;
		
		Если ПереиздатьСертификат = НеТребуется Тогда
		
			// Т.к. мы сбросили флаг переиздание сертификата, то возвращаем все исходные настройки
			ОпределятьМестоХранения = Истина;
			СброситьСпособПолученияСертификата(ОпределятьМестоХранения, Ложь);
			
		КонецЕсли;
		
		ПроверитьНеобходимостьУстановкиГалки_ИзменитьНастройкиУведомлений();
		
	КонецЕсли;
	
	ИнициализироватьВозможностьБезбумажногоПродления();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СпроситьПроСохранение()
	
	ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?';
						|en = 'The data was changed. Do you want to save the changes?'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СпроситьПроСохранение_Завершение", 
		ЭтотОбъект); 
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура СпроситьПроСохранение_Завершение(Ответ, ВходящийКонтекст) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		СохранитьЗаявлениеКлиент();
		Модифицированность  = Ложь;
		ПрограммноеЗакрытие = Истина;
		ОповеститьОбИзменении(ДокументЗаявление.Ссылка);

	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		
		Модифицированность  = Ложь;
		ПрограммноеЗакрытие = Истина;
		
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Да ИЛИ Ответ = КодВозвратаДиалога.Нет Тогда
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПриИзмененииФлагов

&НаСервере
Процедура ИзменитьВладельцаСертификатаПриИзмененииНаСервере()

	ПроверитьНеобходимостьУстановкиГалки_ПереиздатьСертификат();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСоставКонтролирующихОргановПриИзмененииНаСервере()
	
	СравнитьНаправленияИКодыСдачиОтчетностиСИсходными();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииМестаХранения(ОпределятьМестоХранения) Экспорт
	
	СброситьСпособПолученияСертификата(ОпределятьМестоХранения, Ложь);
	
	ИнициализироватьВозможностьБезбумажногоПродления();
	
	Если ЭтоОблако(ЭтотОбъект) Тогда
		// Т.к. здесь сбрасываем все настройки, то токен тоже переинициализируем 
		ИнициализироватьТокен = Истина;
		ИнициализацияЭПВОблакеСервер(ИнициализироватьТокен);
	КонецЕсли;
	
	ПроверитьНеобходимостьУстановкиГалки_ИзменитьНастройкиУведомлений();
	ПроверитьНеобходимостьУстановкиГалки_ПереиздатьСертификат();
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеСертификатов2022

&НаКлиенте
Процедура ВключаемыйСертификатНажатие_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(ЭтотОбъект);
	
	// Сбрасываем все изменения места хранения
	ОпределятьМестоХранения = Истина;
	ПриИзмененииМестаХранения(ОпределятьМестоХранения);
	
	Если ПереиздатьСертификат = НеТребуется Тогда
		ПереиздатьСертификат = Рекомендовано;
	КонецЕсли;
	
	СпособПолученияСертификата   = ПредопределенноеЗначение("Перечисление.СпособПолученияСертификата.ИспользоватьСуществующий");
	ЭтоСертификатДругогоУЦ       = Результат.ЭтоСертификатДругогоУЦ;
	ВключаемыйСертификат         = Результат.ВключаемыйСертификат;
	ВключаемыйСертификатОблачный = Результат.ВключаемыйСертификатОблачный;
	
	ОпределятьМестоХранения = Истина;
	ПриИзмененииСпособаПолученияСертификата(ОпределятьМестоХранения);
	
	ИнициализироватьПараметрыЭДО();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДейстивиеССертификатом()
	
	ПараметрыФормы = 
		"ПродлитьСертификатИсходный,
		|СпособПолученияСертификата,
		|СертификатДоступен,
		|ТекущаяДатаСервер,
		|СертификатДействителенПо,
		|КрасныйЦвет,
		|ВключаемыйСертификат,
		|ВключаемыйСертификатОблачный,
		|ТелефонДляПаролей,
		|ТелефонМобильныйДляПаролей,
		|ВыбранноеМестоХраненияКлюча,
		|СинийЦвет,
		|СерыйЦвет,
		|КомпонентаУстановлена,
		|ИдентификаторПолученияСпискаОблачныхСертификатов,
		|ЗапретитьИзменение,
		|ИгнорироватьКонфликт,
		|CryptoProCSPУстановлен,
		|ViPNetCSPУстановлен,
		|ИНН,
		|КомпонентаДляРаботыСКриптографиейПодключена,
		|РежимРаботыСКлючами,
		|ДоступнаЭлектроннаяПодписьВМоделиСервиса,
		|ВсеСертификаты,
		|ИменаУЦКалуги,
		|ЭтоПереходВКоробку,
		|ЭтоПереходВОблако,
		|ЭтаУчетнаяЗаписьБылаСделанаДляОблака,
		|ТипКриптопровайдераИсходный,
		|ТипКриптопровайдераИзменился,
		|ПереиздатьСертификат,
		|ЭтоСертификатДругогоУЦ,
		|ИзменитьМестоХранения,
		|ЭтоБюджетополучатель,
		|ЭтоПолучениеЭПС2022Г,
		|ВладелецЭЦПТип,
		|ВладелецЭЦПИНН,
		|ВладелецЭЦПСНИЛС,
		|ВладелецЭЦПИмя,
		|ВладелецЭЦПОтчество,
		|ВладелецЭЦПФамилия,
		|ЭтоЮридическоеЛицо,
		|Организация,
		|ВладелецЭЦП,
		|СертификатДолженБытьПолученОтГосУЦ";
	
	ДополнительныеПараметры = Новый Структура(ПараметрыФормы);
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ЭтотОбъект, ПараметрыФормы); 
	ДополнительныеПараметры.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Адрес = ПоместитьВоВременноеХранилище(ОблачныеСертификатыКалуги, Новый УникальныйИдентификатор);
	ДополнительныеПараметры.Вставить("ОблачныеСертификатыКалуги", Адрес);
	
	Адрес = ПоместитьВоВременноеХранилище(СертификатыОрганизацииПоИНН, Новый УникальныйИдентификатор);
	ДополнительныеПараметры.Вставить("СертификатыОрганизацииПоИНН", Адрес);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДействиеССертификатомНажатие_Завершение", 
		ЭтотОбъект);
	
	ОткрытьФорму(
		КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_ВыборДействияССертификатом",
		ДополнительныеПараметры,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИнициализироватьСпособПолученияСертификата(Форма)
	
	ОбработкаЗаявленийАбонентаКлиентСервер.ИнициализироватьСпособПолученияСертификата(
		Форма, 
		Форма.ЗаявлениеСозданоКопированием);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоРуководитель(Форма)
	
	Возврат ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(Форма);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоБухгалтер(Форма)
	
	Возврат ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоБухгалтер(Форма);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоДругойСотрудник(Форма)
	
	Возврат ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоДругойСотрудник(Форма);
	
КонецФункции

&НаКлиенте
Процедура ГруппаСертификатРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = НСтр("ru = 'здесь';
														|en = 'here'") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВключаемыйСертификатНажатие_Завершение", 
			ЭтотОбъект);
			
		ОбработкаЗаявленийАбонентаКлиентСервер.УточнитьРежимРаботыСКлючами(ЭтотОбъект);
		КонтекстЭДОКлиент.ВключаемыйСертификатНажатие(ЭтотОбъект, ОписаниеОповещения, Истина);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти