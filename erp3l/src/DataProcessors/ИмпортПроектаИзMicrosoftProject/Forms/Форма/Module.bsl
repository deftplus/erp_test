
#Область ОбработкаОсновныхСобытийФормы


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		ПодключитьОбработчикОжидания("ПодключениеРасширенияРаботыСФайлами", 0.1, Истина);
	#Иначе
		ПодключениеРасширенияРаботыСФайламиЗавершение(Истина, Неопределено);
	#КонецЕсли
	
КонецПроцедуры


#КонецОбласти


#Область ОбработкаСобытийЭлементовФормы


&НаКлиенте
Процедура ТипФайлаПриИзменении(Элемент)
	Элементы.ДекорацияПояснениеИсточник.Заголовок = ТекстПоясненияПоТипуФайла(ВозможностьВыбораФайлов, ТипФайла);
	ПутьКФайлу = "";
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыборФайла();
КонецПроцедуры

&НаКлиенте
Процедура ПроектСсылкаПриИзменении(Элемент)
	УстановитьДоступностьЭлементов(Элементы, ПроектСсылка);
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)Экспорт
	ОбработатьЗагрузкуДанных();	
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыНаКлиенте


&НаКлиенте
Процедура ВыборФайла()
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Если ТипФайла = Истина Тогда
		Текст = "ru = 'Проект MS Project в формате XML'";
		ДиалогВыбораФайла.Фильтр = НСтр(Текст) + "(*.xml)|*.xml";
	Иначе
		Текст = "ru = 'Проект MS Project в формате mpp'";
		ДиалогВыбораФайла.Фильтр = НСтр(Текст) + "(*.mpp)|*.mpp";
	КонецЕсли;
	
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите проект'");
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.Расширение                  ="xml";
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла              = ПутьКФайлу;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор 		  = Ложь;
	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы <> Неопределено
		И ВыбранныеФайлы.Количество()>0 Тогда
		ПутьКФайлу = ВыбранныеФайлы[0];
		ПроектСсылка = Неопределено;
		УстановитьДоступностьЭлементов(Элементы, ПроектСсылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗагрузкуДанных()
	
	АдресФайла = Неопределено;
	ЭтаФорма.ТекстСообщения = "";
	ОчиститьСообщения();
	
	Если ВозможностьВыбораФайлов Тогда
		
		Если ПустаяСтрока(ПутьКФайлу) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Не указан файл данных для загрузки'"));
			Возврат;
		КонецЕсли;
		
		Файл = Новый Файл(ПутьКФайлу);
		ОП2 = Новый ОписаниеОповещения("ОбработатьПослеПроверкиСуществования", ЭтаФорма, Неопределено);
		Файл.НачатьПроверкуСуществования(ОП2);
		
	Иначе
		
		// Веб клиент без расширения для работы с файлами
		
		Если ТипФайла = Ложь Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Веб клиент не поддерживает загрузку через COM-подключение!'"));
			Возврат;
		КонецЕсли;
		
		Попытка
			ПомещениеФайлаЗавершение = Новый ОписаниеОповещения("ПомещениеФайлаЗавершение", ЭтотОбъект);
			НачатьПомещениеФайла(ПомещениеФайлаЗавершение, АдресФайла, , Истина, УникальныйИдентификатор);
			
		Исключение
			ШаблонСообщения = НСтр("ru = 'При чтении файла возникла ошибка
			|%1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОписаниеОшибки = ИнформацияОбОшибке();
			ЗаписатьОшибкуВЖурнал(ТекстСообщения, ОписаниеОшибки);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеФайлаЗавершение(Результат, АдресФайлаПомещенный, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	ЗагрузитьПроектИзФайлаXMLНаСервере(АдресФайлаПомещенный);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПослеПроверкиСуществования(Существует, ДопПараметры)Экспорт
	Если Не Существует Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'Файл %1 не существует!'"), ПутьКФайлу);
		Сообщение.Поле = "ПутьКФайлу";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если ТипФайла Тогда
		ПомещаемыеФайлы = Новый Массив;
		ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПутьКФайлу));
		ПомещениеФайловЗавершение = Новый ОписаниеОповещения("НачатьОбработкуФайлаИзХранилища", ЭтотОбъект);
		НачатьПомещениеФайлов(ПомещениеФайловЗавершение, ПомещаемыеФайлы, , Ложь);
		
	Иначе
		ОбработатьФайлЧерезCOM(ПутьКФайлу);
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОбработкуФайлаИзХранилища(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	Если ПомещенныеФайлы <> Неопределено И ПомещенныеФайлы.Количество() > 0 Тогда
		ОписаниеФайлов = ПомещенныеФайлы.Получить(0);
		Если ТипФайла Тогда
			ЗагрузитьПроектИзФайлаXMLНаСервере(ОписаниеФайлов.Хранение);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Веб клиент не поддерживает загрузку через COM-подключение!'"));
			Возврат;
		Конецесли;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементов(Элементы, ПроектСсылка)
	Если Не ЗначениеЗаполнено(ПроектСсылка) Тогда
		Элементы.ДекорацияПроектаПояснение.Заголовок = НСтр("ru = 'Будет создан новый проект. Если нужно обновить существующий, то укажите его в поле ниже.'");
	Иначе
		Элементы.ДекорацияПроектаПояснение.Заголовок = НСтр("ru = 'Проект будет обновлен. Если необходимо создать новый проект, то очистите поле ниже.'");
	КонецЕсли;			
КонецПроцедуры

&НаКлиенте
Процедура ПодключениеРасширенияРаботыСФайлами() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключениеРасширенияРаботыСФайламиЗавершение(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	ВозможностьВыбораФайлов = РасширениеРаботыСФайламиПодключено;
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	Элементы.ГруппаВыборФайла.Видимость = ВозможностьВыбораФайлов;	
	Элементы.ТипФайла.Видимость = ВозможностьВыбораФайлов;
	
	Если НЕ ВозможностьВыбораФайлов Тогда
		ТипФайла = Истина;
	КонецЕсли;
	
	Элементы.ДекорацияПояснениеИсточник.Заголовок = ТекстПоясненияПоТипуФайла(ВозможностьВыбораФайлов, ТипФайла);
	
	УстановитьДоступностьЭлементов(Элементы, ПроектСсылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьФайлЧерезCOM(ПутьКФайлу)
	
	Попытка
		MSPDoc = Новый COMОбъект("MSProject.Application");
		MSPDoc.DisplayAlerts = False;
		MSPDoc.Visible = False;
		
		MSPDoc.fileOpen(ПутьКФайлу);
	
		ИмпортируемыйПроект = MSPDoc.ActiveProject();
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке("Не удалось открыть файл!" + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
		Возврат;
	КонецПопытки;
	
	ДанныеГлПроекта = Новый Структура;
	ДанныеГлПроекта.Вставить("ИД", ИмпортируемыйПроект.ID);
	ДанныеГлПроекта.Вставить("Наименование", ИмпортируемыйПроект.projectsummarytask.name);
	ДанныеГлПроекта.Вставить("ДатаНачала", ИмпортируемыйПроект.start);
	ДанныеГлПроекта.Вставить("ДатаОкончания", ИмпортируемыйПроект.finish);
	ДанныеГлПроекта.Вставить("Цена", ИмпортируемыйПроект.cost);
	
	мДанныеПроектов = Новый Массив;
	
	Для Каждого ЗадачаПроекта Из ИмпортируемыйПроект.tasks Цикл
		
		ДанныеПроекта = Новый Структура;
		ДанныеПроекта.Вставить("ИД", ЗадачаПроекта.ID);
		ДанныеПроекта.Вставить("Наименование", ЗадачаПроекта.name);
		ДанныеПроекта.Вставить("ДатаНачала", ЗадачаПроекта.start);
		ДанныеПроекта.Вставить("ДатаОкончания", ЗадачаПроекта.finish);
		ДанныеПроекта.Вставить("ИД_Родителя", ЗадачаПроекта.outlineparent.ID);
		ДанныеПроекта.Вставить("Цена", ЗадачаПроекта.cost);
		ДанныеПроекта.Вставить("Комментарий", СокрЛП(ЗадачаПроекта.Notes));
		
		//Получение списка предшественников
		Предшественники_ = Новый Массив;
		Для Каждого ЗадачаПредшественник Из ЗадачаПроекта.PredecessorTasks Цикл
			Предшественники_.Добавить(ЗадачаПредшественник.ID);
		КонецЦикла;
		
		ДанныеПроекта.Вставить("массивПредшественников", Предшественники_);
		
		мДанныеПроектов.Добавить(ДанныеПроекта);
		
	КонецЦикла;
	
	MSPDoc.fileclose();
	
	ОбработатьCOM(мДанныеПроектов, ДанныеГлПроекта);
	
	УстановитьДоступностьЭлементов(Элементы, ПроектСсылка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПоясненияПоТипуФайла(ВозможностьВыбораФайлов, ТипФайла)
	Если ВозможностьВыбораФайлов = Ложь Тогда
		ТекстПояснения = НСтр("ru = 'По кнопке ""Загрузить данные"" укажите путь к файлу, с данными классификатора'");
	КонецЕсли;
	
	Если ТипФайла Тогда
		Возврат НСтр("ru = 'Источником данных для загрузки является файл проекта MS Project, выгруженный в XML'");
	КонецЕсли;
	
	Возврат НСтр("ru = 'Источником данных для загрузки является файл проекта MS Project'");
КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыНаСервере


&НаСервере
Процедура ЗаписатьОшибкуВЖурнал(ТекстСообщения, ОписаниеОшибки)
	ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПроектИзФайлаXMLНаСервере(Адрес)
	
	Префикс = Новый РазыменовательПространствИменDOM("msp", "http://schemas.microsoft.com/project");
	МассивЗагруженныхЗадач = Новый Массив();
	МассивОбъектовДляОбновленияПрав = Новый Массив();
	
	ДвоичныеДанныеПроекта = ПолучитьИзВременногоХранилища(Адрес);
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеПроекта.Записать(ИмяФайла);
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	ПостроительDOM = Новый ПостроительDOM;
	ОбъектДокумент = ПостроительDOM.Прочитать(ЧтениеXML);	
	ВыражениеXPath = ОбъектДокумент.СоздатьВыражениеXPath("/msp:Project", Префикс);
	РезультатXPath = ВыражениеXPath.Вычислить(ОбъектДокумент);
	УзелПроект = РезультатXPath.ПолучитьСледующий();
	
	// Если в xml-файле нет тега "Project", останавливаем импорт.
	Если УзелПроект = Неопределено Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Неправильный формат файла'"));
	КонецЕсли;
		
	// Получение имени проекта
	ИмяПроекта = ЗначениеРеквизита(УзелПроект, "Name", Тип("Строка"));
	Если ПустаяСтрока(ИмяПроекта) Тогда
		ЗаголовокПроекта = ЗначениеРеквизита(УзелПроект, "Title", Тип("Строка"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЗаголовокПроекта) Тогда
		ИмяПроекта = СтрЗаменить(НРег(ИмяПроекта), ".xml", "");
	Иначе
		ИмяПроекта = ЗаголовокПроекта;
	КонецЕсли;
	
	// Заполнение реквизитов проекта
	Если НЕ ЗначениеЗаполнено(ПроектСсылка) Тогда
		ПроектОбъект = Справочники.Проекты.СоздатьЭлемент();
		
	Иначе
		ПроектОбъект = ПроектСсылка.ПолучитьОбъект();
		УдалитьЗадачиПроекта(ПроектСсылка);
	КонецЕсли;
	
	ДатаНачала = ЗначениеРеквизита(УзелПроект, "StartDate", Тип("Дата"));
	ДатаОкончания = ЗначениеРеквизита(УзелПроект, "FinishDate", Тип("Дата"));
	
	ДанныеГлПроекта = Новый Структура;
	ДанныеГлПроекта.Вставить("ИД", 0);
	ДанныеГлПроекта.Вставить("Наименование", ИмяПроекта);
	ДанныеГлПроекта.Вставить("ДатаНачала", ДатаНачала);
	ДанныеГлПроекта.Вставить("ДатаОкончания", ДатаОкончания);
	ДанныеГлПроекта.Вставить("Комментарий", ЗначениеРеквизита(УзелПроект, "Notes", Тип("Строка")));
		
	ВыражениеXPath = ОбъектДокумент.СоздатьВыражениеXPath("/msp:Project/msp:Tasks/msp:Task", Префикс);	
		
	// Загрузка задач проекта
	мДанныеПроектов = Новый Массив;
	ИндексыПоКодам = Новый Соответствие; //OutlineNumber->ИД задачи
	
	РезультатXPath = ВыражениеXPath.Вычислить(ОбъектДокумент);
	УзелЗадача = РезультатXPath.ПолучитьСледующий();
	СтоимостьПроекта = 0;
	Пока УзелЗадача <> Неопределено Цикл
		//НомерПроекта = ЗначениеРеквизита(УзелЗадача, "OutlineNumber", Тип("Строка"));
		//НаименованиеПроекта = ЗначениеРеквизита(УзелЗадача, "Name", Тип("Строка"));
		Уровень = ЗначениеРеквизита(УзелЗадача, "OutlineLevel", Тип("Число"));
		Если Уровень = 0 Тогда
			// Обновим данные проекта
			ИмяПроекта = ЗначениеРеквизита(УзелЗадача, "Name", Тип("Строка"));
			Если НЕ ПустаяСтрока(ИмяПроекта) Тогда
				ДанныеГлПроекта.Наименование = ИмяПроекта;
			КонеЦЕсли;
			
		Иначе
			// Добавим задачу в проект
			ДобавитьЗадачу(Уровень, ОбъектДокумент, УзелЗадача, Префикс, мДанныеПроектов, ИндексыПоКодам, СтоимостьПроекта);
		КонецЕсли;
		
		УзелЗадача = РезультатXPath.ПолучитьСледующий();
	КонецЦикла;
		
	ДанныеГлПроекта.Вставить("Цена", СтоимостьПроекта);
	
	ЧтениеXML.Закрыть();
	УдалитьФайлы(ИмяФайла);
	
	// Установим идентификаторы родителей
	ДЛя каждого Проект Из мДанныеПроектов Цикл
		
		КодСтруктурыПроекта = Проект.КодСтруктурыПроекта;
		Поз_ = СтрНайти(КодСтруктурыПроекта, ".", НаправлениеПоиска.СКонца);
		Если Поз_ = 0 Тогда
			Продолжить;
		КонецЕсли;
		КодСтруктурыРодителя = Лев(КодСтруктурыПроекта, Поз_-1);
		ИД_Родителя = ИндексыПоКодам[КодСтруктурыРодителя];
		Если ИД_Родителя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Проект.ИД_Родителя = ИД_Родителя;
		
	КонецЦикла;
		
	ОбработатьCOM(мДанныеПроектов, ДанныеГлПроекта);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗадачу(Уровень, ОбъектДокумент, УзелЗадача, Префикс, мДанныеПроектов, ИндексыПоКодам, СтоимостьГлавногоПроекта)
	
	КодСтруктурыПроекта = ЗначениеРеквизита(УзелЗадача, "OutlineNumber", Тип("Строка"));
		
	ДанныеПроекта = Новый Структура;
	
	ДанныеПроекта.Вставить("ИД", ЗначениеРеквизита(УзелЗадача, "UID", Тип("Число")));
	ДанныеПроекта.Вставить("Наименование", ЗначениеРеквизита(УзелЗадача, "Name", Тип("Строка")));
	ДанныеПроекта.Вставить("ДатаНачала", ЗначениеРеквизита(УзелЗадача, "Start", Тип("Дата")));
	ДанныеПроекта.Вставить("ДатаОкончания", ЗначениеРеквизита(УзелЗадача, "Finish", Тип("Дата")));
	ДанныеПроекта.Вставить("ИД_Родителя", 0);
	ДанныеПроекта.Вставить("Цена", ЗначениеРеквизита(УзелЗадача, "Cost", Тип("Число")) / 100);
	ДанныеПроекта.Вставить("Комментарий", ЗначениеРеквизита (УзелЗадача, "Notes", Тип("Строка")));
	ДанныеПроекта.Вставить("КодСтруктурыПроекта", КодСтруктурыПроекта);
	
	Если Уровень = 1 Тогда
		СтоимостьГлавногоПроекта = СтоимостьГлавногоПроекта + ДанныеПроекта.Цена;
	КонецЕсли;
	
	// запомним идентификаторы предшественников
	мПредшественники = Новый Массив;
	ВыражениеXPathПредшественники = ОбъектДокумент.СоздатьВыражениеXPath("./msp:PredecessorLink", Префикс);	
	РезультатXPathПредшественники = ВыражениеXPathПредшественники.Вычислить(УзелЗадача);
	УзелПредшественник = РезультатXPathПредшественники.ПолучитьСледующий();
	Пока УзелПредшественник <> Неопределено Цикл
		ИДПредшественника = ЗначениеРеквизита(УзелПредшественник, "PredecessorUID", Тип("Число"));
		мПредшественники.Добавить(ИДПредшественника);
		УзелПредшественник = РезультатXPathПредшественники.ПолучитьСледующий();
	КонецЦикла;
		
	ДанныеПроекта.Вставить("массивПредшественников", мПредшественники);
	
	мДанныеПроектов.Добавить(ДанныеПроекта);
	
	ИндексыПоКодам.Вставить(КодСтруктурыПроекта, ДанныеПроекта.ИД);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьЗадачиПроекта(ПроектСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Проекты.Ссылка
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	НЕ Проекты.ПометкаУдаления
		|	И Проекты.Родитель В ИЕРАРХИИ(&Родитель)";
	
	Запрос.УстановитьПараметр("Родитель", ПроектСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПроектнаяЗадача = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ПроектнаяЗадача.УстановитьПометкуУдаления(Истина, Истина);
	КонецЦикла;
	
КонецПроцедуры

// Получает значение реквизита объекта.
// Параметры:
//	Узел - объект типа ЭлементDOM
//	ИмяРеквизита - имя реквизита (дочернего элемента), значение которого необходимо получить
//	Тип - тип значения в документообороте
&НаСервере
Функция ЗначениеРеквизита(Узел, ИмяРеквизита, Тип)
	Результат = Неопределено;
	Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
		Значение = ДочернийУзел.ТекстовоеСодержимое;
		Если НРег(ДочернийУзел.ИмяУзла) = НРег(ИмяРеквизита) Тогда
			Если Тип = Тип("Булево") Тогда
				Возврат ?(Значение = "0", Ложь, Истина);
				
			ИначеЕсли Тип = Тип("Число") Тогда
				Возврат Число(Значение);
				
			ИначеЕсли Тип = Тип("Дата") Тогда
				Значение = СтрЗаменить(Значение, "-", "");
				Значение = СтрЗаменить(Значение, ":", "");
				Значение = СтрЗаменить(Значение, "T", "");
				Результат = Дата(Значение);
				
			Иначе
				Результат = Значение;
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбработатьCOM(мДанныеПроектов, ДанныеГлПроекта)
	
	ИДГлПроекта = ДанныеГлПроекта.ИД;
	
	флПроектУказан = ЗначениеЗаполнено(ПроектСсылка);
	
	Попытка
		
		НачатьТранзакцию();
		
		Если флПроектУказан Тогда
			ПроектОбъект = ПроектСсылка.ПолучитьОбъект();
			УдалитьЗадачиПроекта(ПроектСсылка);
		Иначе
			ПроектОбъект = Справочники.Проекты.СоздатьЭлемент();
		КонецЕсли;
		
		ПроектОбъект.Проект = Истина;
		ПроектОбъект.Наименование = ДанныеГлПроекта.Наименование;
		ПроектОбъект.Записать();
		
		ПроектСсылка = ПроектОбъект.Ссылка;
		
		//заполняем регистр сведений
		НоваяЗапись = РегистрыСведений.АтрибутыПроектов.СоздатьМенеджерЗаписи();
		НоваяЗапись.Сценарий = Справочники.Сценарии.План;
		НоваяЗапись.Проект = ПроектСсылка;
		НоваяЗапись.ДатаНачала = ДанныеГлПроекта.ДатаНачала;
		НоваяЗапись.ДатаОкончания = ДанныеГлПроекта.ДатаОкончания;
		НоваяЗапись.ДлительностьДней =  (НачалоДня(ДанныеГлПроекта.ДатаОкончания) - НачалоДня(ДанныеГлПроекта.ДатаНачала))/86400 + 1;
		НоваяЗапись.ОценкаПроекта = ДанныеГлПроекта.Цена;
		НоваяЗапись.Записать();
			
		//создаем проекты
		ПроектыПоИД = Новый Соответствие;
		Для Каждого ОписаниеПроекта Из мДанныеПроектов Цикл
			ПроектОбъект = Справочники.Проекты.СоздатьЭлемент();
			ПроектОбъект.ОбменДанными.Загрузка = Истина;
			ПроектОбъект.Проект = Ложь;
			ПроектОбъект.Наименование = ОписаниеПроекта.Наименование;
			ПроектОбъект.Комментарий = ОписаниеПроекта.Комментарий;
			ПроектОбъект.Записать();
			
			НоваяЗапись = РегистрыСведений.АтрибутыПроектов.СоздатьМенеджерЗаписи();
			НоваяЗапись.Сценарий = Справочники.Сценарии.План;
			НоваяЗапись.Проект = ПроектОбъект.Ссылка;
			НоваяЗапись.ДатаНачала = ОписаниеПроекта.ДатаНачала;
			НоваяЗапись.ДатаОкончания = ОписаниеПроекта.ДатаОкончания;
			НоваяЗапись.ДлительностьДней =  (НачалоДня(ОписаниеПроекта.ДатаОкончания) - НачалоДня(ОписаниеПроекта.ДатаНачала))/86400 + 1;
			НоваяЗапись.ОценкаПроекта = ОписаниеПроекта.Цена;
			НоваяЗапись.Записать();

			ПроектыПоИД.Вставить(ОписаниеПроекта.ИД, ПроектОбъект.Ссылка);
		КонецЦикла;
		
		// Установим родителя и предшественников
		Для Каждого ОписаниеПроекта Из мДанныеПроектов Цикл
			
			ИД_Родителя = ОписаниеПроекта.ИД_Родителя;
			Если ИД_Родителя = 0 Тогда	
				СсылкаНаРодителя = ПроектСсылка;
			Иначе
				СсылкаНаРодителя = ПроектыПоИД[ИД_Родителя];
				Если СсылкаНаРодителя = Неопределено Тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Не найден элемент по идентификатору: '") + ИД_Родителя + НСтр("ru = '. В качестве родителя будет использован основной проект!'"));
					СсылкаНаРодителя = ПроектСсылка;
				КонецЕсли;
			КонецЕсли;

			ТекущийПроектСсылка = ПроектыПоИД[ОписаниеПроекта.ИД];
			
			ПроектОбъект = ТекущийПроектСсылка.ПолучитьОбъект();
				
			ПроектОбъект.Родитель = СсылкаНаРодителя;
			
			// Предшественники
			Если ОписаниеПроекта.массивПредшественников.Количество() > 0 Тогда
				ТЧПредшественников = ПроектОбъект.ПроектыПредшественники;
				Для Каждого ИДПредшественника Из ОписаниеПроекта.массивПредшественников Цикл
					ПредшественникСсылка = ПроектыПоИД[ИДПредшественника];
					Если ПредшественникСсылка = Неопределено Тогда
						ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Не найден элемент по идентификатору: '") + ИД_Родителя + НСтр("ru = '. Он не будет добавлен в качестве предшественника у проекта '") + ТекущийПроектСсылка + НСтр("ru = ' (код '") + ТекущийПроектСсылка.Код + ")!");
						Продолжить;
					КонецЕсли;
					НоваяСтрока = ТЧПредшественников.Добавить();
					НоваяСтрока.Проект = ПредшественникСсылка;
				КонецЦикла;
				
				ТЧПредшественников.Свернуть("Проект", "");
			КонецЕсли;
			
			ПроектОбъект.ОбменДанными.Загрузка = Ложь;
			ПроектОбъект.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Ошибка импорта проекта из файла '") + ПутьКФайлу + "." + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОтменитьТранзакцию();
		
		Если НЕ флПроектУказан Тогда
			ПроектСсылка = Справочники.Проекты.ПустаяСсылка();
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры


#КонецОбласти
