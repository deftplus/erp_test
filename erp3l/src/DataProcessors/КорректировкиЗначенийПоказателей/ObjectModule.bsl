#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем ДокументОбъект Экспорт;

Перем ВалютаУчета Экспорт;
Перем ВалютаОтчетности Экспорт;

Перем АнализЧувствительности Экспорт;
Перем База Экспорт;
Перем ВидОтчета Экспорт;
Перем ДанныеПараметрикиАктуальны Экспорт;
Перем ДанныеРасшифровкиСчитаны Экспорт;
Перем ЕстьОбращениеКВИБ Экспорт;
Перем ЛогИзмененийПоказателей Экспорт;
Перем ЛогИзмененийРаскрытийПоказателей Экспорт;
Перем МаксАналитикОтчета Экспорт;
Перем МаксАналитикПоказателя Экспорт;
Перем мЗначенияОперандов Экспорт;
Перем мОперанды Экспорт;
Перем мПоказатели Экспорт;
Перем мПоказателиДляОбработки Экспорт;
Перем мПоказателиОбязательныеКПересчету Экспорт;
Перем мПоказателиРаскрытия Экспорт;
Перем мПустойВидАналитики Экспорт;
Перем мРасширеннаяДиагностикаВключена Экспорт;
Перем мСоответствиеДляПоискаПоКоду Экспорт;
Перем мСоответствиеДляПоискаПоСсылке Экспорт;
Перем мСоответствиеОперандовИПоказателейОтбора Экспорт;
Перем мТаблицаВидовАналитикВидаОтчета Экспорт;
Перем мТаблицаПересчета Экспорт;
Перем мТабПоказателиЗапросы Экспорт;
Перем мТабРасшифровкиПоказателей Экспорт;
Перем НомерТекущейОперации Экспорт;
Перем Показатели Экспорт;
Перем ПоказателиДляЗаполнения Экспорт;
Перем ТабКорректировок Экспорт;
Перем ТаблицаВыявленныхОшибок Экспорт;
Перем ТипЗначенияЧисло Экспорт;
Перем ФлагОшибкиИмпорта Экспорт;
Перем ЧислоДопАналитик Экспорт;
Перем ТаблицаСогласования Экспорт;
Перем ПутьКФайлуADO Экспорт;
Перем ПутьКВременномуФайлуADO Экспорт;
Перем ДополнительныеСвойстваДляРасчета Экспорт;

Перем ПроводкиДокумента Экспорт;
Перем СводныеПроводкиДокумента Экспорт;

Перем АдресХранилищаПеременныхДляРасчета Экспорт;
Перем ДанныеОбъекта Экспорт;

/////////////////////////////////////////////////////////////////////////////
// Таблицы для расчета корректировок значений показателей

Перем Записи Экспорт;
Перем РедактируемыеЗаписи Экспорт;
Перем СводныеКорректировки Экспорт;
Перем УправляемыйРежим Экспорт;

Перем ТаблицаТрансляцииПоказателей;

Перем ЭтоНовый Экспорт;

Перем СоответствиеКурсовВалют Экспорт;
Перем СпособПолучения;
Перем мОписаниеТиповБулево;
Перем ЭкземплярыИсточники Экспорт;
Перем ДатаИсходногоДокумента;

Перем ОбработанныеОперанды Экспорт;
Перем КэшТаблицаКурсов;
Перем МассивКолонокИзмерений;

Перем ВалютаУчетаИсточник Экспорт;
Перем ВалютаПредставленияИсточник Экспорт;
Перем ВалютаУчетаПриемник Экспорт;
Перем ВалютаПредставленияПриемник Экспорт;

Процедура ОбновитьПроводкиПоШаблону(ТаблицаДокумента)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШаблоныПроводок.Ссылка КАК ШаблонПроводки,
	|	ШаблоныПроводок.СчетБД КАК СчетДт,
	|	ШаблоныПроводок.КоррСчетБД КАК СчетКт,
	|	ШаблоныПроводок.РесурсРегистра КАК РесурсРегистра
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ШаблоныПроводок
	|ГДЕ
	|	ШаблоныПроводок.Владелец = &Владелец
	|	И НЕ ШаблоныПроводок.ПометкаУдаления
	|	И НЕ ШаблоныПроводок.Отключен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ШаблоныПроводок.ПорядковыйНомер";
	
	Если ТаблицаДокумента.Количество()>0 Тогда
		ТаблицаДокумента.Очистить();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Владелец",ШаблонКорректировки);
	Запрос.УстановитьПараметр("РесурсРегистра",?(РегистрБухгалтерии.Наименование="МСФО","СуммаВВалютеУчета","Сумма"));
		
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока=ТаблицаДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьПроводкиПоШаблону() 

Процедура ЗаполнитьПоШаблонуТрансформации() Экспорт
	
	МассивРеквизитов=Новый Массив;
	МассивРеквизитов.Добавить("ВидОперации");
	МассивРеквизитов.Добавить("ПланСчетов");
	МассивРеквизитов.Добавить("РасчетДатыОтраженияВУчете");
	МассивРеквизитов.Добавить("РегистрБухгалтерии");
	МассивРеквизитов.Добавить("ДействиеВСледующемПериоде");
	МассивРеквизитов.Добавить("ДвиженияПоРегиструБухгалтерии");
	МассивРеквизитов.Добавить("КорректировкиЗначенийПоказателей");

	ДанныеШаблона=ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ШаблонКорректировки,МассивРеквизитов);
	
	ВидОперации 						= ДанныеШаблона.ВидОперации;
	ПланСчетов 							= ДанныеШаблона.ПланСчетов;
	РасчетДатыОтраженияВУчете 			= ДанныеШаблона.РасчетДатыОтраженияВУчете;
	РегистрБухгалтерии 					= ДанныеШаблона.РегистрБухгалтерии;
	ДействиеВСледующемПериоде			= ДанныеШаблона.ДействиеВСледующемПериоде;
	ДвиженияПоРегиструБухгалтерии		= ДанныеШаблона.ДвиженияПоРегиструБухгалтерии;
	КорректировкиЗначенийПоказателей	= ДанныеШаблона.КорректировкиЗначенийПоказателей;
			
	ОбновитьПроводкиПоШаблону(ПроводкиДокумента);
	ОбновитьПроводкиПоШаблону(СводныеПроводкиДокумента);
	
	ПравилоОбработкиПоУмолчанию = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки, ШаблонКорректировки, Неопределено, Неопределено, Неопределено);
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПравилаОбработки.Ссылка КАК ПравилоОбработки,
	|	ВнешниеИнформационныеБазы.Ссылка КАК ИспользуемаяИБ
	|ИЗ
	|	Справочник.ПравилаОбработки КАК ПравилаОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнешниеИнформационныеБазы КАК ВнешниеИнформационныеБазы
	|		ПО ПравилаОбработки.ТипБД = ВнешниеИнформационныеБазы.ТипБД
	|ГДЕ
	|	ПравилаОбработки.Владелец = &Владелец";
	
	Если ЗначениеЗаполнено(ПравилоОбработкиПоУмолчанию) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ПравилаОбработки.Ссылка=&ПравилоПоУмолчанию";
		Запрос.УстановитьПараметр("ПравилоПоУмолчанию",ПравилоОбработкиПоУмолчанию);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Владелец",ШаблонКорректировки);
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		ПравилоОбработки	= Результат.ПравилоОбработки;
		ИспользуемаяИБ		= Результат.ИспользуемаяИБ;
		
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьПоШаблону() 

Процедура ОпределитьПравилоОбработки()

	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПравилаОбработки.Ссылка КАК ПравилоОбработки,
	|	ВнешниеИнформационныеБазы.Ссылка КАК ВнешняяИБ
	|ИЗ
	|	Справочник.ПравилаОбработки КАК ПравилаОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнешниеИнформационныеБазы КАК ВнешниеИнформационныеБазы
	|		ПО ПравилаОбработки.ТипБД = ВнешниеИнформационныеБазы.ТипБД
	|ГДЕ
	|	НЕ ПравилаОбработки.ПометкаУдаления
	|	И ПравилаОбработки.Владелец = &ШаблонКорректировки
	|	И ПравилаОбработки.НаправлениеТрансляции = &НаправлениеТрансляции";
	
	Запрос.УстановитьПараметр("ШаблонКорректировки",ШаблонКорректировки);
	Запрос.УстановитьПараметр("НаправлениеТрансляции",НаправлениеТрансляции);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		ПравилоОбработки=Результат.ПравилоОбработки;
		ИспользуемаяИБ=Результат.ВнешняяИБ;
		
	КонецЕсли;
		
КонецПроцедуры // ОпределитьПравилоОбработки() 

Процедура ЗаполнитьПоШаблонуТрансляции() Экспорт
	
	ВидОперации 						= Справочники.ВидыОпераций.Трансляция;

	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ШаблоныТрансляций.ПланСчетовПриемник КАК ПланСчетов,
	|	ШаблоныТрансляций.РегистрБухгалтерииПриемник КАК РегистрБухгалтерии,
	|	ШаблоныТрансляций.ПланСчетовИсточник КАК ПланСчетовИсточник,
	|	ШаблоныТрансляций.РегистрБухгалтерииИсточник КАК РегистрБухгалтерииИсточник,
	|	ШаблоныТрансляций.НаправлениеТрансляции КАК НаправлениеТрансляции
	|ИЗ
	|	Справочник.ШаблоныТрансляций КАК ШаблоныТрансляций
	|ГДЕ
	|	ШаблоныТрансляций.Ссылка = &ШаблонКорректировки";
	
	Запрос.УстановитьПараметр("ШаблонКорректировки",ШаблонКорректировки);
	Результат=Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	ПланСчетов 							= Результат.ПланСчетов;
	РегистрБухгалтерии 					= Результат.РегистрБухгалтерии;
	
	ПланСчетовИсточник 					= Результат.ПланСчетовИсточник;
	РегистрБухгалтерииИсточник 			= Результат.РегистрБухгалтерииИсточник;
	НаправлениеТрансляции               = Результат.НаправлениеТрансляции;
			
	ОпределитьПравилоОбработки();
		
КонецПроцедуры // ЗаполнитьПоШаблону()
	
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ШаблоныТрансформационныхКорректировок") Тогда
		
		ШаблонКорректировки=ДанныеЗаполнения.Ссылка;
		ЗаполнитьПоШаблонуТрансформации();
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ШаблоныТрансляций") Тогда
		
		ШаблонКорректировки=ДанныеЗаполнения.Ссылка;
		ЗаполнитьПоШаблонуТрансляции();
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьТаблицыЗаписей() Экспорт
	
	Если РедактируемыеЗаписи=Неопределено Тогда
		
		РедактируемыеЗаписи=Новый ТаблицаЗначений;
		РедактируемыеЗаписи.Колонки.Добавить("ЭкземплярОтчета",	ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ДокументСсылка.НастраиваемыйОтчет"));
		РедактируемыеЗаписи.Колонки.Добавить("Показатель",		ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОтчетов"));
		РедактируемыеЗаписи.Колонки.Добавить("АналитикаВалюта",	ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Валюты"));
		
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			РедактируемыеЗаписи.Колонки.Добавить("Аналитика" + строка(Инд),Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип);
			
		КонецЦикла;
		
		РедактируемыеЗаписи.Колонки.Добавить("Значение",	ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
		РедактируемыеЗаписи.Колонки.Добавить("ЗначениеВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
		РедактируемыеЗаписи.Колонки.Добавить("ЗначениеИзменено",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		РедактируемыеЗаписи.Колонки.Добавить("Валюта",		ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Валюты"));
		РедактируемыеЗаписи.Колонки.Добавить("Раскрытие",	ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		РедактируемыеЗаписи.Колонки.Добавить("РаспределятьПоАналитикам",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		РедактируемыеЗаписи.Колонки.Добавить("ДанныеРасчета");
		
	Иначе
		
		РедактируемыеЗаписи.Очистить();
		
	КонецЕсли;
	
	Если ТипЗнч(РедактируемыеЗаписи) = Тип("ТаблицаЗначений") Тогда
		Записи = РедактируемыеЗаписи.СкопироватьКолонки();
	Иначе
		ТабВрем = РедактируемыеЗаписи.Выгрузить();
		Записи = ТабВрем.СкопироватьКолонки();
	КонецЕсли;
		
КонецПроцедуры // ИнициализироватьРедактируемыеЗаписи()

Функция ВыбратьДатуОтраженияВУчете()
	
	Если ЗначениеЗаполнено(ДатаОтраженияВУчете) Тогда
		
		Возврат ДатаОтраженияВУчете;
		
	Иначе
		
		Возврат ДокументОбъект.Дата;
		
	КонецЕсли;
		
КонецФункции // ВыбратьДатуОтраженияВУчете()

Процедура ПодготовитьДанныеДляРасчетаДвижений(РежимЗаписи,Отказ) Экспорт
		
	Если ЗначениеЗаполнено(РасчетДатыОтраженияВУчете) Тогда
		
		Если РасчетДатыОтраженияВУчете=Перечисления.СпособыРасчетаДатыОтраженияВУчете.ПроизвольнаяДата Тогда
				
			ДокументОбъект.ДатаОтраженияВУчете=ВыбратьДатуОтраженияВУчете();
					
		ИначеЕсли ЗначениеЗаполнено(ПолучитьПериодЗаписи()) Тогда
			
			Если РасчетДатыОтраженияВУчете=Перечисления.СпособыРасчетаДатыОтраженияВУчете.ДатаНачалаПериода Тогда
				
				ДокументОбъект.ДатаОтраженияВУчете=НачалоДня(ПолучитьПериодЗаписи().ДатаНачала);
				
			Иначе
				
				ДокументОбъект.ДатаОтраженияВУчете=КонецДня(ПолучитьПериодЗаписи().ДатаОкончания);
				
			КонецЕсли;
			
		Иначе
			
			ДокументОбъект.ДатаОтраженияВУчете=ВыбратьДатуОтраженияВУчете();

		КонецЕсли;
		
	Иначе
		
		ДокументОбъект.ДатаОтраженияВУчете=ВыбратьДатуОтраженияВУчете();

	КонецЕсли;	
	
	Если ПроводкиДокумента=Неопределено Тогда
		
		ПроводкиДокумента=ДокументОбъект.Проводки.ВыгрузитьКолонки()
		
	Иначе
		
		ДокументОбъект.Проводки.Загрузить(ПроводкиДокумента);
		
	КонецЕсли;
	
	Инд=1;
	
	Для Каждого Строка ИЗ ДокументОбъект.Проводки Цикл
		
		Строка.НомерПроводки=Инд;
		Инд=Инд+1;
		
	КонецЦикла;
	
	СоответствиеКурсовВалют=Новый Соответствие;
	
	ПроверитьПараметрыВалюты(ВалютаУчета);
	ПроверитьПараметрыВалюты(ВалютаОтчетности);
	ПроверитьПараметрыВалюты(ОсновнаяВалюта);
		
	Если КорректировкиЗначенийПоказателей И РежимЗаписи=РежимЗаписиДокумента.Проведение Тогда
		
		ЗаполнитьТаблицуЗаписейДляКорректировки();
		
		ТекстОшибки=ПроверитьЗаписиДляКорректировки(Отказ);
		
		Если Отказ Тогда
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки,,,СтатусСообщения.Внимание);
			
		Иначе
			
			ПараметрыОбработки=Новый Структура;
			ПараметрыОбработки.Вставить("ДокументОбъект",		ЭтотОбъект);
			ПараметрыОбработки.Вставить("НомерОперации",		);
			ПараметрыОбработки.Вставить("ШаблонОперации",		);
			ПараметрыОбработки.Вставить("ТаблицаСтрок",			Неопределено);
			ПараметрыОбработки.Вставить("ОчищатьЗаписи",		Ложь);
			ПараметрыОбработки.Вставить("Сбалансированная",		Ложь);
			ПараметрыОбработки.Вставить("Трансформационная",	Истина);
			ПараметрыОбработки.Вставить("АбсолютныеЗначения",	Ложь);
			
			ТабЗаписиТек=Обработки.КорректировкиЗначенийПоказателей.ОбработатьРедактируемыеСтроки(ПараметрыОбработки);
			
			Если ТабЗаписиТек.Количество()>0 Тогда
				
				ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ТабЗаписиТек,Записи);
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьДанныеДляРасчетаДвижений()

Процедура ПроверитьПараметрыВалюты(Валюта)
	
	Если СоответствиеКурсовВалют.Получить(Валюта)=Неопределено Тогда
		
		СоответствиеКурсовВалют.Вставить(Валюта,РаботаСКурсамиВалютУХ.ЗаполнитьДанныеКурсаДляВалюты(Валюта,ДокументОбъект.ДатаОтраженияВУчете));
		
	КонецЕсли;
		
КонецПроцедуры // ПроверитьПараметрыВалюты() 

Процедура ЗаписатьРабочийОбъект(Знач РежимЗаписи, Знач РежимПроведения,Отказ=Ложь) Экспорт
		
	Если ДокументОбъект.ПометкаУдаления Тогда
		
		РежимЗаписи=РежимЗаписиДокумента.Запись;
	
	КонецЕсли;
	
	Если РежимЗаписи=РежимЗаписиДокумента.Проведение И ЗначениеЗаполнено(ДокументОбъект.ИсходныйДокумент) Тогда
		
		Если ДокументОбъект.ИсходныйДокумент.ПометкаУдаления Тогда
			
			ТекстОшибки=СтрШаблон(Нстр("ru = 'Проведение документа %1 отменено: исходный документ %2 помечен на удаление.'"),ДокументОбъект,ДокументОбъект.ИсходныйДокумент);
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки,Отказ,,СтатусСообщения.Внимание);
			Возврат;
			
		ИначеЕсли ДокументОбъект.ИсходныйДокумент.Метаданные().Проведение=Метаданные.СвойстваОбъектов.Проведение.Разрешить
			И (НЕ ДокументОбъект.ИсходныйДокумент.Проведен) Тогда 
			
			ТекстОшибки=СтрШаблон(Нстр("ru = 'Проведение документа %1 отменено: исходный документ %2 не проведен.'"),ДокументОбъект,ДокументОбъект.ИсходныйДокумент);
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки,Отказ,,СтатусСообщения.Внимание);
			Возврат;
			
			
		КонецЕсли;
		
	КонецЕсли;

	НачатьТранзакцию();
	
	ПередЗаписьюРабочегоОбъекта(Отказ, РежимЗаписи, РежимПроведения);
	
	Если Отказ Тогда
		
		ОтменитьТранзакцию();
		Возврат;	
		
	КонецЕсли;
			
	Попытка
		
		Если ((НЕ ДвиженияПоРегиструБухгалтерии) И ДокументОбъект.Проведен)
			ИЛИ РежимЗаписи=РежимЗаписиДокумента.ОтменаПроведения Тогда
			
			Для каждого Движение Из ДокументОбъект.Движения Цикл
				
				Движение.Очистить();
				Движение.Записать();
				
			КонецЦикла;
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
		Иначе
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			
		КонецЕсли;
				
		Ссылка=ДокументОбъект.Ссылка;
		Номер=ДокументОбъект.Номер;
				
	Исключение
		
		Отказ=Истина;
		ОтменитьТранзакцию();
		Возврат;
	КонецПопытки;
	
	Если РежимЗаписи=РежимЗаписиДокумента.Проведение Тогда
		
		ЗаписатьДвиженияДокумента(РежимЗаписи,Отказ);
		
		Если Отказ Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
				
		Если ДвиженияПоРегиструБухгалтерии 
			И ИмяОбъектаМетаданных="Трансляция"
			И Константы.КонтролироватьСостояниеДокументаТрансляции.Получить() Тогда		
			
			Если НЕ ТребуетсяПерезаполнение Тогда
				
				Обработки.КорректировкиЗначенийПоказателей.ОбновитьСостояниеДокумента(Ссылка,Новый Структура("ИзмененыИсходныеДанные,ИзмененШаблонКорректировки",Ложь,Ложь));
				
			КонецЕсли;
			
			Обработки.КорректировкиЗначенийПоказателей.ПроверитьУстановитьНаличиеРасхождений(Ссылка);
			
		КонецЕсли;
		
	Иначе
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
		
КонецПроцедуры // ЗаписатьРабочийОбъект()

Процедура ЗаписатьДвиженияДокумента(РежимЗаписи,Отказ) Экспорт
	
	// Проверим установку флагов ДвиженияПоРегиструБухгалтерии и КорректировкиЗначенийПоказателей при проведении документа.
	ЭтоПроведение = (РежимЗаписи = РежимЗаписиДокумента.Проведение);
	ПроизводятсяДвижения = (ДвиженияПоРегиструБухгалтерии ИЛИ КорректировкиЗначенийПоказателей);
	Если (ЭтоПроведение) И (НЕ ПроизводятсяДвижения) Тогда
		// Проверка не пройдена. Сообщим пользователю.
		ТекстСообщения = НСтр("ru = 'Не выбраны регистры для отражения движений в документе %Документ%. Проведение не выполнено.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Строка(ДокументОбъект));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	Иначе	
		// Проверка успешна. Выполняем формирование движений.
		Если ДвиженияПоРегиструБухгалтерии Тогда
			
			Если ЗначениеЗаполнено(ИсходныйДокумент) Тогда
				
				ДатаИсходногоДокумента=ИсходныйДокумент.Дата;
				
			КонецЕсли;
			
			Если РегистрБухгалтерии.Наименование="Хозрасчетный" Тогда
				
				СформироватьДвиженияПоРегиструБухгалтерииХозрасчетный(Отказ);
				
			Иначе
				
				СформироватьДвиженияПоРегиструБухгалтерии(Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КорректировкиЗначенийПоказателей Тогда
			
			Обработки.КорректировкиЗначенийПоказателей.ВыполнитьЗаписьКорректировки(ЭтотОбъект,Отказ);
			ДокументОбъект.НеОбрабатыватьПроведение=Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ЗаписатьДвиженияДокумента()

Процедура ПередЗаписьюРабочегоОбъекта(Отказ, РежимЗаписи, РежимПроведения) Экспорт
		
	Если ДокументОбъект.ПометкаУдаления <> ДокументОбъект.Ссылка.ПометкаУдаления 
		И ЕстьКорректировкиПоказателей() Тогда
		
		Если ДокументОбъект.ПометкаУдаления Тогда
			
			УправлениеОтчетамиУХ.ОчиститьЗначенияПоказателейОтчетов(ДокументОбъект.Ссылка,Отказ);
			
		КонецЕсли;
		
		Если Отказ Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВерсииЗначенийПоказателей.Владелец КАК ОписаниеВерсии
		|ИЗ
		|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
		|ГДЕ
		|	ВерсииЗначенийПоказателей.Регистратор = &ТекОперация";
		
		Запрос.УстановитьПараметр("ТекОперация", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Выборка.ОписаниеВерсии.ПолучитьОбъект().УстановитьПометкуУдаления(ДокументОбъект.ПометкаУдаления, Истина);
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	Если ДокументОбъект.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаУчета		=УчетнаяПолитика.ВалютаУчета;	
	ВалютаОтчетности=УчетнаяПолитика.ВалютаУчетаДоп;
	
	Если ЕстьКорректировкиПоказателей() Тогда
		
		УправлениеОтчетамиУХ.ОчиститьЗначенияПоказателейОтчетов(ДокументОбъект.Ссылка,Отказ);
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ИмяОбъектаМетаданных="ТрансформационнаяКорректировка" Тогда
		
		ПодготовитьДанныеДляРасчетаДвижений(РежимЗаписи,Отказ);
		
		Обработки.КорректировкиЗначенийПоказателей.ОбновитьНомераПроводок(ПроводкиДокумента);
		ДокументОбъект.Проводки.Загрузить(ПроводкиДокумента);		
		
		СводныеПроводкиДокумента=ПроводкиДокумента.Скопировать();
		СводныеПроводкиДокумента.Свернуть("СчетДт,СчетКт,РесурсРегистра,ШаблонПроводки","Значение");
		
		ДокументОбъект.СводныеПроводки.Загрузить(СводныеПроводкиДокумента);
		
	ИначеЕсли ИмяОбъектаМетаданных="Трансляция" Тогда
		
		ДокументОбъект.НачалоПериода		=НачалоПериода;
		ДокументОбъект.ОкончаниеПериода		=ОкончаниеПериода;
		
		Если НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.ПоказателиВПоказатели
			ИЛИ НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.РегистрБухгалтерииВПоказатели Тогда
			
			Записи=ДокументОбъект.РедактируемыеЗаписи.ВыгрузитьКолонки();
			КорректировкиЗначенийПоказателей=Истина;			
			
			ЗаполнитьЭкземплярыОтчетовДляКорректировки(Истина);
			ТекстОшибки=ПроверитьЗаписиДляКорректировки(Отказ);
			
			Если Отказ Тогда
				
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки,,,СтатусСообщения.Внимание);
				
			Иначе
								
				ДокументОбъект.РедактируемыеЗаписи.Загрузить(РедактируемыеЗаписи);
				
			КонецЕсли;
			
		Иначе
			
			ДвиженияПоРегиструБухгалтерии=Истина;
			
			ПодготовитьДанныеДляРасчетаДвижений(РежимЗаписи,Отказ);
			
			СохранитьПроводкиДокумента(ДокументОбъект);		
			СводныеПроводкиДокумента=ПроводкиДокумента.Скопировать();
			СводныеПроводкиДокумента.Свернуть("СчетДт,СчетКт,СчетДтИсточник,СчетКтИсточник,ПравилоДт,ПравилоКт,РесурсРегистра","Значение");
			
			ДокументОбъект.СводныеПроводки.Загрузить(СводныеПроводкиДокумента);
						
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументОбъект.ПоследнийРедактировавший = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	ДокументОбъект.ДатаИзменения            = ТекущаяДата();
				
КонецПроцедуры

Процедура СохранитьПроводкиДокумента(ДокументОбъект)
	
	Если ПроводкиДокумента.Количество()<100000 Тогда
		
		  ДокументОбъект.Проводки.Загрузить(ПроводкиДокумента);
		  ДокументОбъект.ДанныеВРегистре=Ложь;
		  
	  Иначе
		  
		  ДокументОбъект.Проводки.Очистить();
		  
		  НаборЗаписей=РегистрыСведений.ПроводкиТрансляции.СоздатьНаборЗаписей();
		  НаборЗаписей.Отбор.ДокументТрансляции.Установить(ДокументОбъект.Ссылка);
		  
		  Для Каждого Строка ИЗ ПроводкиДокумента Цикл
			  
			  НоваяСтрока=НаборЗаписей.Добавить();
			  ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			  новаяСтрока.ДокументТрансляции=ДокументОбъект.Ссылка;
			  НоваяСтрока.ПериодПроводки=Строка.Период;
			  
		  КонецЦикла;
		  
		  НаборЗаписей.Записать(Истина);
		  ДокументОбъект.ДанныеВРегистре=Истина;
		  
	КонецЕсли;	
	
КонецПроцедуры // СохранитьПроводкиДокумента( 

Процедура ЗаполнитьЭкземплярыОтчетовДляКорректировки(СоздаватьЭкземплярыОтчетов=Ложь)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТаблицаЗаписей.Показатель,
	|	ТаблицаЗаписей.АналитикаВалюта,
	|	ТаблицаЗаписей.Аналитика1,
	|	ТаблицаЗаписей.Аналитика2,
	|	ТаблицаЗаписей.Аналитика3,
	|	ТаблицаЗаписей.Аналитика4,
	|	ТаблицаЗаписей.Аналитика5,
	|	ТаблицаЗаписей.Аналитика6,
	|	ТаблицаЗаписей.Значение,
	|	ТаблицаЗаписей.ЗначениеВалюта,
	|	ТаблицаЗаписей.Раскрытие,
	|	ТаблицаЗаписей.РаспределятьПоАналитикам
	|ПОМЕСТИТЬ РедактируемыеЗаписи
	|ИЗ
	|	&ТаблицаЗаписей КАК ТаблицаЗаписей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РедактируемыеЗаписи.Показатель,
	|	РедактируемыеЗаписи.АналитикаВалюта,
	|	РедактируемыеЗаписи.Аналитика1,
	|	РедактируемыеЗаписи.Аналитика2,
	|	РедактируемыеЗаписи.Аналитика3,
	|	РедактируемыеЗаписи.Аналитика4,
	|	РедактируемыеЗаписи.Аналитика5,
	|	РедактируемыеЗаписи.Аналитика6,
	|	РедактируемыеЗаписи.Значение,
	|	РедактируемыеЗаписи.ЗначениеВалюта,
	|	РедактируемыеЗаписи.Раскрытие,
	|	РедактируемыеЗаписи.РаспределятьПоАналитикам,
	|	ПоказателиОтчетов.Владелец КАК ВидОтчета
	|ПОМЕСТИТЬ ТаблицаЗаписей
	|ИЗ
	|	РедактируемыеЗаписи КАК РедактируемыеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ПО РедактируемыеЗаписи.Показатель = ПоказателиОтчетов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаписей.Показатель,
	|	ТаблицаЗаписей.АналитикаВалюта,
	|	ТаблицаЗаписей.Аналитика1,
	|	ТаблицаЗаписей.Аналитика2,
	|	ТаблицаЗаписей.Аналитика3,
	|	ТаблицаЗаписей.Аналитика4,
	|	ТаблицаЗаписей.Аналитика5,
	|	ТаблицаЗаписей.Аналитика6,
	|	ТаблицаЗаписей.Значение,
	|	ТаблицаЗаписей.ЗначениеВалюта,
	|	ТаблицаЗаписей.Раскрытие,
	|	ТаблицаЗаписей.РаспределятьПоАналитикам,
	|	&Валюта КАК Валюта,
	|	ЭкземплярыОтчетов.Ссылка КАК ЭкземплярОтчета,
	|	ТаблицаЗаписей.ВидОтчета
	|ИЗ
	|	ТаблицаЗаписей КАК ТаблицаЗаписей
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НастраиваемыйОтчет.Ссылка КАК Ссылка,
	|			НастраиваемыйОтчет.ВидОтчета КАК ВидОтчета,
	|			НастраиваемыйОтчет.ОсновнаяВалюта КАК ОсновнаяВалюта
	|		ИЗ
	|			Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|		ГДЕ
	|			НастраиваемыйОтчет.Организация = &Организация
	|			И НастраиваемыйОтчет.ПериодОтчета = &ПериодОтчета
	|			И НастраиваемыйОтчет.Сценарий = &Сценарий
	|			И НастраиваемыйОтчет.ВидОтчета В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаЗаписей.ВидОтчета
	|					ИЗ
	|						ТаблицаЗаписей)) КАК ЭкземплярыОтчетов
	|		ПО ТаблицаЗаписей.ВидОтчета = ЭкземплярыОтчетов.ВидОтчета";
	
	Запрос.УстановитьПараметр("ТаблицаЗаписей",	РедактируемыеЗаписи);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("ПериодОтчета",	ПолучитьПериодЗаписи());
	Запрос.УстановитьПараметр("Сценарий",		Сценарий);
	Запрос.УстановитьПараметр("Валюта",			ВалютаУчета);
	
	РедактируемыеЗаписи=Запрос.Выполнить().Выгрузить();
	
	Если СоздаватьЭкземплярыОтчетов Тогда
		
		Для Каждого СтрокаЗаписи ИЗ РедактируемыеЗаписи Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаЗаписи.ЭкземплярОтчета) Тогда
				СтрокаЗаписи.ЭкземплярОтчета=Документы.НастраиваемыйОтчет.ПолучитьЭкземплярОтчета(Организация,ПолучитьПериодЗаписи(),Сценарий,СтрокаЗаписи.ВидОтчета,ВалютаУчета,Истина,Истина);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
			
КонецПроцедуры // ЗаполнитьЭкземплярыОтчетовДляКорректировки()

Функция ПолучитьПериодЗаписи()
	
	Возврат ?(ЗначениеЗаполнено(ПериодОтражения),ПериодОтражения,ПериодОтчета);
	
КонецФункции // ПолучитьПериодЗаписи()

Функция ОпределитьПериодПроводки(СтрокаПроводки)
	
	Если ЗначениеЗаполнено(ДатаИсходногоДокумента) 
		И ((Не ЗначениеЗаполнено(ПериодОтражения)) ИЛИ ПериодОтчета=ПериодОтражения) Тогда

		Возврат ДатаИсходногоДокумента;

	ИначеЕсли КорректировкиЗначенийПоказателей32.ТрансляцияВРегистрБухгалтерии(НаправлениеТрансляции) 
		И ((Не ЗначениеЗаполнено(ПериодОтражения)) ИЛИ ПериодОтчета=ПериодОтражения) Тогда
		
		Возврат СтрокаПроводки.Период;
		
	Иначе
		
		Возврат ДокументОбъект.ДатаОтраженияВУчете;
		
	КонецЕсли;
	
КонецФункции // ОпределитьПериодПроводки() 

Функция ОпределитьВидОперации(СтрокаПроводки)
	
	
	
КонецФункции // ОпределитьВидОперации()

Процедура СформироватьДвиженияПоРегиструБухгалтерии(Отказ) Экспорт
	
	УчетПоСценариям = Константы.УчетПоСценариям.Получить();
	СценарийПоУмолчанию = Константы.СценарийМСФО.Получить();
	ВалютаУчета 		= ДокументОбъект.УчетнаяПолитика.ВалютаУчета;	
	ВалютаОтчетности 	= ДокументОбъект.УчетнаяПолитика.ВалютаУчетаДоп;
	
	ПересчитатьВалютныеСуммы = (ДокументОбъект.ВидОперации <> ПредопределенноеЗначение("Справочник.ВидыОпераций._02ПереоценкаВалютныхАктивовИОбязательств"));
	ПроверитьПараметрыВалюты(ВалютаОтчетности);
	
	Если ДокументОбъект.Проведен Тогда   
		Если ЗначениеЗаполнено(РегистрБухгалтерии) Тогда
			ДокументОбъект.Движения[РегистрБухгалтерии.Наименование].Очистить();	
		Иначе
			ТекстСообщения = НСтр("ru = 'Не указан регистр бухгалтерии в документе %Ссылка%. Проведение отменено.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Строка(Ссылка));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРеквизитов=Новый Структура;	
	
	Для Каждого СтрРеквизит ИЗ РегистрБухгалтерии.Реквизиты Цикл
		СтруктураРеквизитов.Вставить(СтрРеквизит.Имя);
	КонецЦикла;
	
	НомерПроводки=0;
	
	Для Каждого Строка ИЗ ДокументОбъект.Проводки Цикл
		
		Если Строка.СчетДт.ДляИсключенийПриТрансляции ИЛИ Строка.СчетКт.ДляИсключенийПриТрансляции Тогда
			
			Продолжить;
			
		КонецЕсли;
				
		Проводка=ДокументОбъект.Движения[РегистрБухгалтерии.Наименование].Добавить();
		
		НомерПроводки=НомерПроводки+1;
		Строка.НомерПроводки=НомерПроводки;
			
		Проводка.Период	= ОпределитьПериодПроводки(Строка);
					
		Проводка.Организация			= ДокументОбъект.Организация;
		Проводка.Сценарий				= ?(УчетПоСценариям, ДокументОбъект.Сценарий, СценарийПоУмолчанию);
		Проводка.Содержание				= Строка.Комментарий;
		
		Если ЗначениеЗаполнено(Строка.ВидОперации) Тогда
			
			Проводка.ВидОперации=Строка.ВидОперации;
			
		Иначе
			
			Проводка.ВидОперации=?(ЗначениеЗаполнено(ДокументОбъект.ВидОперации),ДокументОбъект.ВидОперации,Справочники.ВидыОпераций.УчетныеОперации);
			
		КонецЕсли;
		
		Проводка.ПодразделениеДт=Строка.ПодразделениеДт;
		Проводка.ПодразделениеКт=Строка.ПодразделениеКт;
		Проводка.НаправлениеДеятельностиДт=Строка.НаправлениеДеятельностиДт;
		Проводка.НаправлениеДеятельностиКт=Строка.НаправлениеДеятельностиКт;
			
		Проводка.СчетДт					= Строка.СчетДт.СчетСсылка;
		Проводка.СчетКт					= Строка.СчетКт.СчетСсылка;
		
		Для Индекс=1 По 3 Цикл
			
			Если ЗначениеЗаполнено(Строка["СубконтоДт"+Индекс]) Тогда
				
				МСФОВызовСервераУХ.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,Индекс,Строка["СубконтоДт"+Индекс]);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка["СубконтоКт"+Индекс]) Тогда
				
				МСФОВызовСервераУХ.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,Индекс,Строка["СубконтоКт"+Индекс]);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрНайти(Строка.СчетДт.ПризнакиУчета,"Количественный")>0 Тогда
			
			Проводка.КоличествоДт=Строка.КоличествоДт;
			
		КонецЕсли;
		
		Если СтрНайти(Строка.СчетКт.ПризнакиУчета,"Количественный")>0 Тогда
			
			Проводка.КоличествоКт=Строка.КоличествоКт;
			
		КонецЕсли;
		
		Если СтрНайти(Строка.СчетДт.ПризнакиУчета,"Валютный")>0 И ЗначениеЗаполнено(Строка.ВалютаДт) Тогда
			
			Проводка.ВалютаДт		= Строка.ВалютаДт;
			Если ПересчитатьВалютныеСуммы Тогда
				Проводка.СуммаВВалютеДт	= Строка.ЗначениеВалютаДт;			
			КонецЕсли;			
						
		КонецЕсли;
		
		Если СтрНайти(Строка.СчетКт.ПризнакиУчета,"Валютный")>0 И ЗначениеЗаполнено(Строка.ВалютаКт) Тогда
			
			Проводка.ВалютаКт		= Строка.ВалютаКт;
			Если ПересчитатьВалютныеСуммы Тогда
				Проводка.СуммаВВалютеКт	= Строка.ЗначениеВалютаКт;			
			КонецЕсли;			
			
		КонецЕсли;
				
		ПересчитатьСуммаВВалютеОтчетности = ПересчитатьВалютныеСуммы Или НЕ ((ВалютаОтчетности = Проводка.ВалютаДт) Или (ВалютаОтчетности = Проводка.ВалютаКт));
		
		Если Строка.РесурсРегистра="Количество" Тогда
			
			Если СтрНайти(Строка.СчетДт.ПризнакиУчета,"Количественный")>0 И Проводка.КоличествоДт=0 Тогда
				
				Проводка.КоличествоДт=Строка.Значение;
				
			КонецЕсли;
			
			Если СтрНайти(Строка.СчетКт.ПризнакиУчета,"Количественный")>0 И Проводка.КоличествоКт=0 Тогда
				
				Проводка.КоличествоКт=Строка.Значение;
				
			КонецЕсли;
			
		Иначе
			
			Проводка.СуммаВВалютеУчета=Строка.Значение;
			
			Если ЗначениеЗаполнено(Строка.ПредставлениеЗначения) Тогда
				
				Проводка.СуммаВВалютеОтчетности=Строка.ПредставлениеЗначения;
				
			Иначе
				
				ПересчитатьПоКурсу(Проводка.Период,Проводка.СуммаВВалютеОтчетности, Проводка.СуммаВВалютеУчета, ВалютаУчета, ВалютаОтчетности, ПересчитатьСуммаВВалютеОтчетности);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов,Строка);
		
		Для Каждого КлючИЗначение ИЗ СтруктураРеквизитов Цикл
			
			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				
				Проводка[КлючИЗначение.Ключ]=КлючИЗначение.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	
	
	Попытка
		
		ДокументОбъект.Движения[РегистрБухгалтерии.Наименование].Записать();
		ДокументОбъект.НеОбрабатыватьПроведение=Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	Исключение
		
		Отказ=Истина;
		
//		ОбщегоНазначенияУХ.СообщитьОбОшибке(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),Отказ,,СтатусСообщения.ОченьВажное);
		
	КонецПопытки;

	
КонецПроцедуры // СформироватьДвиженияПоРегиструБухгалтерии()

Процедура ПересчитатьПоКурсу(Период,ЗначениеПриемник, ЗначениеИсточник, ВалютаИсточник, ВалютаПриемник, ВыполнитьПересчет = Истина);

	Если ВыполнитьПересчет = Ложь Тогда
		Возврат; 
	КонецЕсли;
		
	ЗначениеПриемник = РаботаСКурсамиВалютКлиентСерверУХ.ПересчитатьПоКурсу(ЗначениеИсточник, ПолучитьДанныеКурса(ВалютаИсточник,Период), ПолучитьДанныеКурса(ВалютаПриемник,Период));

КонецПроцедуры

Функция ПолучитьДанныеКурса(Валюта,ДатаКурса)
	
	МассивДанных=КэшТаблицаКурсов.НайтиСтроки(Новый Структура("Валюта,ДатаКурса",Валюта,ДатаКурса));
	
	Если МассивДанных.Количество()=1 Тогда
		
		Возврат МассивДанных[0].ДанныеКурса;
		
	Иначе
		
		ДанныеКурса=РаботаСКурсамиВалютУХ.ЗаполнитьДанныеКурсаДляВалюты(Валюта,ДатаКурса);
		НоваяСтрока=КэшТаблицаКурсов.Добавить();
		НоваяСтрока.Валюта=Валюта;
		НоваяСтрока.ДатаКурса=ДатаКурса;
		НоваяСтрока.ДанныеКурса=ДанныеКурса;
		
		Возврат ДанныеКурса;
		
	КонецЕсли;
		
КонецФункции // ПолучитьДанныеКурса() 

Процедура СформироватьДвиженияПоРегиструБухгалтерииХозрасчетный(Отказ) Экспорт
	
	ВалютаУчета = Константы.ВалютаРегламентированногоУчета.Получить();	
	
	Если ДокументОбъект.Проведен Тогда
		ДокументОбъект.Движения[РегистрБухгалтерии.Наименование].Очистить();
	КонецЕсли;
	
	СтруктураРеквизитов=Новый Структура;
	
	Для Каждого СтрРеквизит ИЗ РегистрБухгалтерии.Реквизиты Цикл
		
		СтруктураРеквизитов.Вставить(СтрРеквизит.Имя);
		
	КонецЦикла;
	
	НомерПроводки=0;
	
	Для Каждого Строка ИЗ ДокументОбъект.Проводки Цикл
		
		Если Строка.СчетДт.ДляИсключенийПриТрансляции ИЛИ Строка.СчетКт.ДляИсключенийПриТрансляции Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Проводка=ДокументОбъект.Движения[РегистрБухгалтерии.Наименование].Добавить();
		
		НомерПроводки=НомерПроводки+1;
		Строка.НомерПроводки=НомерПроводки;
			
		Проводка.Период	= ОпределитьПериодПроводки(Строка);
					
		Проводка.Организация			= ДокументОбъект.Организация;
		Проводка.ПодразделениеДт		= ?(ЗначениеЗаполнено(ПодразделениеОрганизации),ПодразделениеОрганизации,Строка.ПодразделениеДт);
		Проводка.ПодразделениеКт		= ?(ЗначениеЗаполнено(ПодразделениеОрганизации),ПодразделениеОрганизации,Строка.ПодразделениеКт);
		Проводка.Содержание				= Строка.Комментарий;
		
		Проводка.СчетДт					= Строка.СчетДт.СчетСсылка;
		Проводка.СчетКт					= Строка.СчетКт.СчетСсылка;
		
		Для Индекс=1 По 3 Цикл
			
			Если ЗначениеЗаполнено(Строка["СубконтоДт"+Индекс]) Тогда
				
				Обработки.КорректировкиЗначенийПоказателей.УстановитьСубконтоСчетаБД(Строка.СчетДт,Проводка.СубконтоДт,Индекс,Строка["СубконтоДт"+Индекс]);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка["СубконтоКт"+Индекс]) Тогда
				
				Обработки.КорректировкиЗначенийПоказателей.УстановитьСубконтоСчетаБД(Строка.СчетКт,Проводка.СубконтоКт,Индекс,Строка["СубконтоКт"+Индекс]);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрНайти(Строка.СчетДт.ПризнакиУчета,"Количественный")>0 Тогда
			
			Проводка.КоличествоДт=Строка.КоличествоДт;
			
		КонецЕсли;
		
		Если СтрНайти(Строка.СчетКт.ПризнакиУчета,"Количественный")>0 Тогда
			
			Проводка.КоличествоКт=Строка.КоличествоКт;
			
		КонецЕсли;
		
		Если СтрНайти(Строка.СчетДт.ПризнакиУчета,"Валютный")>0 И ЗначениеЗаполнено(Строка.ВалютаДт) Тогда
			
			Проводка.ВалютаДт			= Строка.ВалютаДт;
			Проводка.ВалютнаяСуммаДт	= Строка.ЗначениеВалютаДт;
			
		КонецЕсли;
		
		Если СтрНайти(Строка.СчетКт.ПризнакиУчета,"Валютный")>0 И ЗначениеЗаполнено(Строка.ВалютаКт) Тогда
			
			Проводка.ВалютаКт			= Строка.ВалютаКт;
			Проводка.ВалютнаяСуммаКт	= Строка.ЗначениеВалютаКт;
			
		КонецЕсли;
		
		Если Строка.РесурсРегистра="Сумма" Тогда
			
			Проводка.Сумма	= РаботаСКурсамиВалютКлиентСерверУХ.ПересчитатьПоКурсу(Строка.Значение,СоответствиеКурсовВалют[ДокументОбъект.ОсновнаяВалюта],СоответствиеКурсовВалют[ВалютаУчета]);
			
		ИначеЕсли Строка.РесурсРегистра="ВалютнаяСумма" Тогда
			
			Если ЗначениеЗаполнено(Строка.ВалютаДт) Тогда 
				
				ПроверитьПараметрыВалюты(Строка.ВалютаДт);
				Проводка.Сумма	= РаботаСКурсамиВалютКлиентСерверУХ.ПересчитатьПоКурсу(Строка.Значение,СоответствиеКурсовВалют[Строка.ВалютаДт],СоответствиеКурсовВалют[ВалютаУчета]);
				
			Иначе
				
				Проводка.Сумма	= РаботаСКурсамиВалютКлиентСерверУХ.ПересчитатьПоКурсу(Строка.Значение,СоответствиеКурсовВалют[ДокументОбъект.ОсновнаяВалюта],СоответствиеКурсовВалют[ВалютаУчета]);
				
			КонецЕсли;
			
		ИначеЕсли Строка.РесурсРегистра="Количество" Тогда
			
			Если СтрНайти(Строка.СчетДт.ПризнакиУчета,"Количественный")>0 И Проводка.КоличествоДт=0 Тогда
				
				Проводка.КоличествоДт=Строка.Значение;
				
			КонецЕсли;
			
			Если СтрНайти(Строка.СчетКт.ПризнакиУчета,"Количественный")>0 И Проводка.КоличествоКт=0 Тогда
				
				Проводка.КоличествоКт=Строка.Значение;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов,Строка);
		
		Для Каждого КлючИЗначение ИЗ СтруктураРеквизитов Цикл
			
			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				
				Проводка[КлючИЗначение.Ключ]=КлючИЗначение.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Попытка
		
		ДокументОбъект.Движения[РегистрБухгалтерии.Наименование].Записать();
		ДокументОбъект.НеОбрабатыватьПроведение=Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	Исключение
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),Отказ,,СтатусСообщения.ОченьВажное);
		
	КонецПопытки;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструБухгалтерииХозрасчетный()



Функция ПроверитьЗаписиДляКорректировки(Отказ)
		
	МассивОбработанных=Новый Массив;
	МассивЗаблокированных=Новый Массив;
	
	ТекстОшибки="";
	
	Для Каждого Запись Из РедактируемыеЗаписи Цикл
		
		Если НЕ ЗначениеЗаполнено(Запись.ЭкземплярОтчета) Тогда
			ТекстОшибки = СтрШаблон(Нстр("ru = '%1В строке %2 не указан экземпляр отчета%3'"), ТекстОшибки, 
				(РедактируемыеЗаписи.Индекс(Запись) + 1), Символы.ПС);
		КонецЕсли;
		
		Если  ЗначениеЗаполнено(Запись.ЭкземплярОтчета) Тогда
			
			ТекстБлокировки = СтрШаблон(Нстр("ru = 'В строке %1
			|указан %2, который в настоящий момент редактируется.
			|Запрещено вводить ручные корректировки
			|экземпляра отчета в случае, когда он редактируется в основной форме.%3'"), 
			(РедактируемыеЗаписи.Индекс(Запись) + 1), Запись.ЭкземплярОтчета, Символы.ПС);
			
			Если МассивОбработанных.Найти(Запись.ЭкземплярОтчета)=Неопределено Тогда
				
				ОтчетОбъект=Запись.ЭкземплярОтчета.ПолучитьОбъект();
				МассивОбработанных.Добавить(Запись.ЭкземплярОтчета);
				
				Попытка
					
					ОтчетОбъект.Заблокировать();
					ОтчетОбъект.Разблокировать();
					
				Исключение
					
					ТекстОшибки = ТекстОшибки + ТекстБлокировки;
					МассивЗаблокированных.Добавить(Запись.ЭкземплярОтчета);
					
				КонецПопытки;
				
			ИначеЕсли НЕ МассивЗаблокированных.Найти(Запись.ЭкземплярОтчета)=Неопределено Тогда
				
				ТекстОшибки = ТекстОшибки + ТекстБлокировки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Конеццикла;
	
	Если ТекстОшибки <> "" Тогда
		
		Отказ=Истина;
		Возврат ТекстОшибки;
		
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Процедура ЗаполнитьТаблицуЗаписейДляКорректировки()
	
	// Подготовим таблицы для расчета корректировок
	
	ИнициализироватьТаблицыЗаписей();
	
	// Заполним таблицы корректировок
	
	ТаблицаПроводок=ПроводкиДокумента;
	
	СписокВидовИтога=Новый СписокЗначений;
	
	Если Справочники.ВидыОпераций.ЯвляетсяОперациейПовтора(ВидОперации) Тогда
		
		СписокВидовИтога.Добавить(Перечисления.ВидыБухгалтерскихИтогов.СНД);
		СписокВидовИтога.Добавить(Перечисления.ВидыБухгалтерскихИтогов.СНК);
		СписокВидовИтога.Добавить(Перечисления.ВидыБухгалтерскихИтогов.СКД);
		СписокВидовИтога.Добавить(Перечисления.ВидыБухгалтерскихИтогов.СКК);
		
	Иначе
		
		СписокВидовИтога.Добавить(Перечисления.ВидыБухгалтерскихИтогов.ДО);
		СписокВидовИтога.Добавить(Перечисления.ВидыБухгалтерскихИтогов.КО);
		СписокВидовИтога.Добавить(Перечисления.ВидыБухгалтерскихИтогов.СКД);
		СписокВидовИтога.Добавить(Перечисления.ВидыБухгалтерскихИтогов.СКК);
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПроводок.СчетДт КАК СчетДт,
	|	ТаблицаПроводок.СубконтоДт1,
	|	ТаблицаПроводок.СубконтоДт2,
	|	ТаблицаПроводок.СубконтоДт3,
	|	ТаблицаПроводок.СчетКт КАК СчетКт,
	|	ТаблицаПроводок.СубконтоКт1,
	|	ТаблицаПроводок.СубконтоКт2,
	|	ТаблицаПроводок.СубконтоКт3,
	|	ТаблицаПроводок.Значение,
	|	ТаблицаПроводок.НомерПроводки,
	|	ТаблицаПроводок.ВалютаДт,
	|	ТаблицаПроводок.ВалютаКт,
	|	ТаблицаПроводок.ЗначениеВалютаДт,
	|	ТаблицаПроводок.ЗначениеВалютаКт,
	|	ТаблицаПроводок.ВидДвижения КАК ВидДвиженияДт,
	|	ТаблицаПроводок.ВидДвижения КАК ВидДвиженияКт
	|ПОМЕСТИТЬ ТаблицаПроводок
	|ИЗ
	|	&ТаблицаПроводок КАК ТаблицаПроводок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетДт,
	|	СчетКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	т.Ссылка КАК ВидОтчета
	|ПОМЕСТИТЬ втВидыОтчетов
	|ИЗ
	|	Справочник.ВидыОтчетов КАК т
	|ГДЕ
	|	т.ИспользоватьПоУмолчанию
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПроводок.СубконтоДт1,
	|	ТаблицаПроводок.СубконтоДт2,
	|	ТаблицаПроводок.СубконтоДт3,
	|	ТаблицаПроводок.ВидДвиженияДт,
	|	СУММА(ТаблицаПроводок.Значение) КАК Значение,
	|	ПоказателиОтчетов.Ссылка,
	|	ПоказателиОтчетов.ВидИтогаПоСчету,
	|	ПоказателиОтчетов.Владелец КАК ВидОтчета,
	|	ПоказателиОтчетов.ГруппаРаскрытия,
	|	ПоказателиОтчетов.ПересчитыватьВалютнуюСумму,
	|	ПоказателиОтчетов.ВидКурса,
	|	ПоказателиОтчетов.СчетБД.Вид КАК ВидСчета,
	|	ПоказателиОтчетов.СчетБД.ИспользоватьВидыДвижений КАК ИспользоватьВидыДвижений,
	|	ПоказателиОтчетов.ВидПоказателя,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.ЧислоАналитик, 0) КАК ЧислоАналитик,
	|	ТаблицаПроводок.ВалютаДт,
	|	СУММА(ТаблицаПроводок.ЗначениеВалютаДт) КАК ЗначениеВалютаДт,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.Валютная, ЛОЖЬ) КАК Валютный
	|ПОМЕСТИТЬ ПоказателиДт
	|ИЗ
	|	ТаблицаПроводок КАК ТаблицаПроводок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ПО ТаблицаПроводок.СчетДт = ПоказателиОтчетов.СчетБД
	|			И (ПоказателиОтчетов.Владелец В
	|				(ВЫБРАТЬ
	|					т.ВидОтчета
	|				ИЗ
	|					втВидыОтчетов КАК т))
	|			И (НЕ ПоказателиОтчетов.ПометкаУдаления)
	|			И (НЕ ПоказателиОтчетов.ВидИтогаПоСчету = ЗНАЧЕНИЕ(Перечисление.ВидыБухгалтерскихИтогов.КО))
	|			И (ПоказателиОтчетов.ВидИтогаПоСчету В (&СписокВидовИтога))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПроводок.СубконтоДт1,
	|	ТаблицаПроводок.СубконтоДт2,
	|	ТаблицаПроводок.СубконтоДт3,
	|	ТаблицаПроводок.ВидДвиженияДт,
	|	ПоказателиОтчетов.Ссылка,
	|	ПоказателиОтчетов.ВидИтогаПоСчету,
	|	ПоказателиОтчетов.Владелец,
	|	ПоказателиОтчетов.ГруппаРаскрытия,
	|	ПоказателиОтчетов.ПересчитыватьВалютнуюСумму,
	|	ПоказателиОтчетов.ВидКурса,
	|	ПоказателиОтчетов.СчетБД.Вид,
	|	ПоказателиОтчетов.ВидПоказателя,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.ЧислоАналитик, 0),
	|	ТаблицаПроводок.ВалютаДт,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.Валютная, ЛОЖЬ),
	|	ПоказателиОтчетов.СчетБД.ИспользоватьВидыДвижений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПроводок.СубконтоКт1,
	|	ТаблицаПроводок.СубконтоКт2,
	|	ТаблицаПроводок.СубконтоКт3,
	|	ТаблицаПроводок.ВидДвиженияКт,
	|	СУММА(ТаблицаПроводок.Значение) КАК Значение,
	|	ПоказателиОтчетов.Ссылка,
	|	ПоказателиОтчетов.Владелец КАК ВидОтчета,
	|	ПоказателиОтчетов.ВидИтогаПоСчету,
	|	ПоказателиОтчетов.ГруппаРаскрытия,
	|	ПоказателиОтчетов.ПересчитыватьВалютнуюСумму,
	|	ПоказателиОтчетов.ВидКурса,
	|	ПоказателиОтчетов.СчетБД.Вид КАК ВидСчета,
	|	ПоказателиОтчетов.СчетБД.ИспользоватьВидыДвижений КАК ИспользоватьВидыДвижений,
	|	ПоказателиОтчетов.ВидПоказателя,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.ЧислоАналитик, 0) КАК ЧислоАналитик,
	|	ТаблицаПроводок.ВалютаКт,
	|	СУММА(ТаблицаПроводок.ЗначениеВалютаКт) КАК ЗначениеВалютаКт,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.Валютная, ЛОЖЬ) КАК Валютный
	|ПОМЕСТИТЬ ПоказателиКт
	|ИЗ
	|	ТаблицаПроводок КАК ТаблицаПроводок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ПО ТаблицаПроводок.СчетКт = ПоказателиОтчетов.СчетБД
	|			И (ПоказателиОтчетов.Владелец В
	|				(ВЫБРАТЬ
	|					т.ВидОтчета
	|				ИЗ
	|					втВидыОтчетов КАК т))
	|			И (НЕ ПоказателиОтчетов.ПометкаУдаления)
	|			И (НЕ ПоказателиОтчетов.ВидИтогаПоСчету = ЗНАЧЕНИЕ(Перечисление.ВидыБухгалтерскихИтогов.ДО))
	|			И (ПоказателиОтчетов.ВидИтогаПоСчету В (&СписокВидовИтога))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПроводок.СубконтоКт1,
	|	ТаблицаПроводок.СубконтоКт2,
	|	ТаблицаПроводок.СубконтоКт3,
	|	ТаблицаПроводок.ВидДвиженияКт,
	|	ПоказателиОтчетов.Ссылка,
	|	ПоказателиОтчетов.Владелец,
	|	ПоказателиОтчетов.ВидИтогаПоСчету,
	|	ПоказателиОтчетов.ГруппаРаскрытия,
	|	ПоказателиОтчетов.ПересчитыватьВалютнуюСумму,
	|	ПоказателиОтчетов.ВидКурса,
	|	ПоказателиОтчетов.СчетБД.Вид,
	|	ПоказателиОтчетов.ВидПоказателя,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.ЧислоАналитик, 0),
	|	ТаблицаПроводок.ВалютаКт,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.Валютная, ЛОЖЬ),
	|	ПоказателиОтчетов.СчетБД.ИспользоватьВидыДвижений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастраиваемыйОтчет.Ссылка КАК Ссылка,
	|	НастраиваемыйОтчет.ВидОтчета КАК ВидОтчета
	|ПОМЕСТИТЬ втЭкземпляры
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|ГДЕ
	|	НастраиваемыйОтчет.ВидОтчета.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость)
	|	И НастраиваемыйОтчет.Сценарий = &Сценарий
	|	И НастраиваемыйОтчет.ВидОтчета.ИспользоватьПоУмолчанию
	|	И НастраиваемыйОтчет.Организация = &Организация
	|	И НастраиваемыйОтчет.ПериодОтчета = &ПериодОтчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиДт.СубконтоДт1,
	|	ПоказателиДт.СубконтоДт2,
	|	ПоказателиДт.СубконтоДт3,
	|	ПоказателиДт.ВидДвиженияДт,
	|	ПоказателиДт.Значение,
	|	ПоказателиДт.Ссылка,
	|	ПоказателиДт.ВидОтчета,
	|	ПоказателиДт.ВидИтогаПоСчету,
	|	ПоказателиДт.ГруппаРаскрытия,
	|	ПоказателиДт.ВидКурса,
	|	ПоказателиДт.ПересчитыватьВалютнуюСумму,
	|	ПоказателиДт.ВидСчета,
	|	ПоказателиДт.ИспользоватьВидыДвижений,
	|	ЭкземплярыОтчетов.Ссылка КАК ЭкземплярОтчета,
	|	ПоказателиДт.ВидПоказателя,
	|	ПоказателиДт.ЧислоАналитик,
	|	ПоказателиДт.ВалютаДт,
	|	ПоказателиДт.ЗначениеВалютаДт,
	|	ПоказателиДт.Валютный
	|ИЗ
	|	ПоказателиДт КАК ПоказателиДт
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЭкземпляры КАК ЭкземплярыОтчетов
	|		ПО ПоказателиДт.ВидОтчета = ЭкземплярыОтчетов.ВидОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиКт.СубконтоКт1,
	|	ПоказателиКт.СубконтоКт2,
	|	ПоказателиКт.СубконтоКт3,
	|	ПоказателиКт.ВидДвиженияКт,
	|	ПоказателиКт.Значение,
	|	ПоказателиКт.Ссылка,
	|	ПоказателиКт.ВидОтчета,
	|	ПоказателиКт.ГруппаРаскрытия,
	|	ПоказателиКт.ВидИтогаПоСчету,
	|	ПоказателиКт.ВидКурса,
	|	ПоказателиКт.ПересчитыватьВалютнуюСумму,
	|	ПоказателиКт.ВидСчета,
	|	ПоказателиКт.ИспользоватьВидыДвижений,
	|	ЭкземплярыОтчетов.Ссылка КАК ЭкземплярОтчета,
	|	ПоказателиКт.ВидПоказателя,
	|	ПоказателиКт.ЧислоАналитик,
	|	ПоказателиКт.ВалютаКт,
	|	ПоказателиКт.ЗначениеВалютаКт,
	|	ПоказателиКт.Валютный
	|ИЗ
	|	ПоказателиКт КАК ПоказателиКт
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЭкземпляры КАК ЭкземплярыОтчетов
	|		ПО ПоказателиКт.ВидОтчета = ЭкземплярыОтчетов.ВидОтчета";
	
	Запрос.УстановитьПараметр("ТаблицаПроводок",	ТаблицаПроводок);
	Запрос.УстановитьПараметр("СписокВидовИтога",	СписокВидовИтога);
	Запрос.УстановитьПараметр("Сценарий",			Сценарий);
	Запрос.УстановитьПараметр("ПериодОтчета",		ПолучитьПериодЗаписи());
	Запрос.УстановитьПараметр("Организация",		Организация);
	
	РезультатВыполнения = Запрос.ВыполнитьПакет();
	
	НомераТаблиц = Новый Структура("ДебетоваяСторона,КредитоваяСторона", 5, 6);
	
	КэшТаблицыКурсов=Неопределено;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Настроим корректировки показателей по дебетовой стороне проводок.
	
	КорректировкиДт=РезультатВыполнения[НомераТаблиц.ДебетоваяСторона].Выбрать();
	
	Пока КорректировкиДт.Следующий() Цикл
		
		РабочееЗначение=КорректировкиДт.Значение;
		РабочееЗначениеВалюта=КорректировкиДт.ЗначениеВалютаДт;
		
		Если КорректировкиДт.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СНД
			ИЛИ КорректировкиДт.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СКД Тогда
			
			Если КорректировкиДт.ВидСчета=Перечисления.ВидыСчетовБД.Пассивный Тогда
				
				РабочееЗначение=0;
				
			КонецЕсли;
			
		ИначеЕсли КорректировкиДт.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.КО Тогда
			
			РабочееЗначение=0;
			
		ИначеЕсли КорректировкиДт.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СНК
			ИЛИ КорректировкиДт.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СКК Тогда
			
			Если КорректировкиДт.ВидСчета=Перечисления.ВидыСчетовБД.Пассивный Тогда
				
				РабочееЗначение=-РабочееЗначение;
				РабочееЗначениеВалюта=-РабочееЗначениеВалюта;
				
			Иначе
				
				РабочееЗначение=0;
				
			КонецЕсли;
			
		КонецЕсли;

		Если РабочееЗначение=0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЗначениеКорректировки	= РаботаСКурсамиВалютКлиентСерверУХ.ПересчитатьПоКурсу(РабочееЗначение,СоответствиеКурсовВалют[ОсновнаяВалюта],СоответствиеКурсовВалют[ВалютаУчета]);			
		
		НоваяСтрока=РедактируемыеЗаписи.Добавить();
		НоваяСтрока.Показатель		= КорректировкиДт.Ссылка;
		НоваяСтрока.Валюта			= ВалютаУчета;
		
		НоваяСтрока.Значение		= РабочееЗначение;
		
		НоваяСтрока.АналитикаВалюта = КорректировкиДт.ВалютаДт;	
		НоваяСтрока.Раскрытие=ЗначениеЗаполнено(КорректировкиДт.ГруппаРаскрытия);
		
		Если ЗначениеЗаполнено(НоваяСтрока.АналитикаВалюта) Тогда
			
			НоваяСтрока.ЗначениеВалюта	= ?(КорректировкиДт.ПересчитыватьВалютнуюСумму,УправлениеРабочимиПроцессамиУХ.ПересчитатьПоКурсу(РабочееЗначение, ВалютаУчета, КорректировкиДт.ВалютаДт, КорректировкиДт.ВидКурса, Сценарий, ПолучитьПериодЗаписи(),,,, КэшТаблицыКурсов),0);		
			
		КонецЕсли;
		
		НомерАналитики=0;
		СдвигАналитик=?(КорректировкиДт.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.ДО И КорректировкиДт.ИспользоватьВидыДвижений,1,0); 
		
		Для Инд=1 ПО Мин((КорректировкиДт.ЧислоАналитик-СдвигАналитик),3) Цикл
			
			НоваяСтрока["Аналитика"+Инд]=КорректировкиДт["СубконтоДт"+Инд];
			НомерАналитики=НомерАналитики+1;
			
		КонецЦикла;
		
		Если СдвигАналитик=1 Тогда
			
			НоваяСтрока["Аналитика"+(НомерАналитики+1)]=КорректировкиДт.ВидДвиженияДт;
			
		КонецЕсли;
			
		Если ЗначениеЗаполнено(КорректировкиДт.ЭкземплярОтчета) Тогда
			
			НоваяСтрока.ЭкземплярОтчета=КорректировкиДт.ЭкземплярОтчета;
			
		Иначе
			
			НоваяСтрока.ЭкземплярОтчета=Документы.НастраиваемыйОтчет.ПолучитьЭкземплярОтчета(Организация,ПолучитьПериодЗаписи(),Сценарий,КорректировкиДт.ВидОтчета,ВалютаУчета,Истина,Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Настроим корректировки показателей по кредитовой стороне проводок.
	
	КорректировкиКт=РезультатВыполнения[НомераТаблиц.КредитоваяСторона].Выбрать();
	
	Пока КорректировкиКт.Следующий() Цикл
		
		РабочееЗначение=КорректировкиКт.Значение;
		РабочееЗначениеВалюта=КорректировкиКт.ЗначениеВалютаКт;
		
		Если КорректировкиКт.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СНК
			ИЛИ КорректировкиКт.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СКК Тогда
			
			Если КорректировкиКт.ВидСчета=Перечисления.ВидыСчетовБД.Активный Тогда
				
				РабочееЗначение=0;
				
			КонецЕсли;
			
		ИначеЕсли КорректировкиКт.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.ДО Тогда
			
			РабочееЗначение=0;
			
		ИначеЕсли КорректировкиКт.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СНД
			ИЛИ КорректировкиКт.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СКД Тогда
			
			Если КорректировкиКт.ВидСчета=Перечисления.ВидыСчетовБД.Активный Тогда
				
				РабочееЗначение=-РабочееЗначение;
				РабочееЗначениеВалюта=-РабочееЗначениеВалюта;
				
			Иначе
				
				РабочееЗначение=0;
				
			КонецЕсли;
			
		КонецЕсли;

		Если РабочееЗначение=0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЗначениеКорректировки	= РаботаСКурсамиВалютКлиентСерверУХ.ПересчитатьПоКурсу(РабочееЗначение,СоответствиеКурсовВалют[ОсновнаяВалюта],СоответствиеКурсовВалют[ВалютаУчета]);
		
		НоваяСтрока=РедактируемыеЗаписи.Добавить();
		НоваяСтрока.Показатель		= КорректировкиКт.Ссылка;
		НоваяСтрока.Валюта			= ВалютаУчета;
		
		НоваяСтрока.Значение		= РабочееЗначение;
		
		НоваяСтрока.АналитикаВалюта=КорректировкиКт.ВалютаКт;
		НоваяСтрока.Раскрытие=ЗначениеЗаполнено(КорректировкиКт.ГруппаРаскрытия);
		
		Если ЗначениеЗаполнено(НоваяСтрока.АналитикаВалюта) Тогда
			НоваяСтрока.ЗначениеВалюта	= ?(КорректировкиКт.ПересчитыватьВалютнуюСумму,УправлениеРабочимиПроцессамиУХ.ПересчитатьПоКурсу(РабочееЗначение, ВалютаУчета, КорректировкиКт.ВалютаКт, КорректировкиКт.ВидКурса, Сценарий, ПолучитьПериодЗаписи(),,,, КэшТаблицыКурсов),0);
		КонецЕсли;
		
		НомерАналитики=0;
		СдвигАналитик=?(КорректировкиКт.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.КО И КорректировкиКт.ИспользоватьВидыДвижений,1,0);
		
		Для Инд=1 ПО Мин((КорректировкиКт.ЧислоАналитик-СдвигАналитик),3) Цикл
			
			НоваяСтрока["Аналитика"+Инд]=КорректировкиКт["СубконтоКт"+Инд];
			НомерАналитики=НомерАналитики+1;
			
		КонецЦикла;
		
		Если СдвигАналитик=1 Тогда
			
			НоваяСтрока["Аналитика"+(НомерАналитики+1)]=КорректировкиКт.ВидДвиженияКт;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КорректировкиКт.ЭкземплярОтчета) Тогда
			
			НоваяСтрока.ЭкземплярОтчета=КорректировкиКт.ЭкземплярОтчета;
			
		Иначе
			
			НоваяСтрока.ЭкземплярОтчета=Документы.НастраиваемыйОтчет.ПолучитьЭкземплярОтчета(Организация,ПолучитьПериодЗаписи(),Сценарий,КорректировкиКт.ВидОтчета,ВалютаУчета,Истина,Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрКорректировка ИЗ ДокументОбъект.ДополнительныеКорректировки Цикл
		
		НоваяСтрока=РедактируемыеЗаписи.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрКорректировка);
		
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьТаблицуЗаписейДляКорректировки()

Функция ЕстьКорректировкиПоказателей()
	
	Возврат (ИмяОбъектаМетаданных="ТрансформационнаяКорректировка" И КорректировкиЗначенийПоказателей)
			ИЛИ (ИмяОбъектаМетаданных="Трансляция"
				И (НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.ПоказателиВПоказатели
					ИЛИ НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.РегистрБухгалтерииВПоказатели));
	
	
КонецФункции //  

//////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ АВТОМАТИЧЕСКОГО ЗАПОЛНЕНИЯ ДОКУМЕНТА

Процедура ПолучитьПроводкиДокумента(ДокументТрансляции)
	
	Если ДокументТрансляции.ДанныеВРегистре Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ПроводкиТрансляции.СчетДт КАК СчетДт,
		|	ПроводкиТрансляции.СубконтоДт1 КАК СубконтоДт1,
		|	ПроводкиТрансляции.СубконтоДт2 КАК СубконтоДт2,
		|	ПроводкиТрансляции.СубконтоДт3 КАК СубконтоДт3,
		|	ПроводкиТрансляции.СчетКт КАК СчетКт,
		|	ПроводкиТрансляции.СубконтоКт1 КАК СубконтоКт1,
		|	ПроводкиТрансляции.СубконтоКт2 КАК СубконтоКт2,
		|	ПроводкиТрансляции.СубконтоКт3 КАК СубконтоКт3,
		|	ПроводкиТрансляции.Комментарий КАК Комментарий,
		|	ПроводкиТрансляции.НомерПроводки КАК НомерПроводки,
		|	ПроводкиТрансляции.ШаблонПроводки КАК ШаблонПроводки,
		|	ПроводкиТрансляции.РесурсРегистра КАК РесурсРегистра,
		|	ПроводкиТрансляции.ВалютаДт КАК ВалютаДт,
		|	ПроводкиТрансляции.ВалютаКт КАК ВалютаКт,
		|	ПроводкиТрансляции.ДатаПроводки КАК ДатаПроводки,
		|	ПроводкиТрансляции.СчетДтИсточник КАК СчетДтИсточник,
		|	ПроводкиТрансляции.СчетКтИсточник КАК СчетКтИсточник,
		|	ПроводкиТрансляции.ПравилоДт КАК ПравилоДт,
		|	ПроводкиТрансляции.ПравилоКт КАК ПравилоКт,
		|	ПроводкиТрансляции.ПериодПроводки КАК Период,
		|	ПроводкиТрансляции.ВидОперации КАК ВидОперации,
		|	ПроводкиТрансляции.ПодразделениеДт КАК ПодразделениеДт,
		|	ПроводкиТрансляции.ПодразделениеКт КАК ПодразделениеКт,
		|	ПроводкиТрансляции.НаправлениеДеятельностиДт КАК НаправлениеДеятельностиДт,
		|	ПроводкиТрансляции.НаправлениеДеятельностиКт КАК НаправлениеДеятельностиКт,
		|	ПроводкиТрансляции.ДокументТрансляции КАК ДокументТрансляции,
		|	ПроводкиТрансляции.Значение КАК Значение,
		|	ПроводкиТрансляции.ЗначениеВалютаДт КАК ЗначениеВалютаДт,
		|	ПроводкиТрансляции.ЗначениеВалютаКт КАК ЗначениеВалютаКт,
		|	ПроводкиТрансляции.КоличествоДт КАК КоличествоДт,
		|	ПроводкиТрансляции.КоличествоКт КАК КоличествоКт
		|ИЗ
		|	РегистрСведений.ПроводкиТрансляции КАК ПроводкиТрансляции
		|ГДЕ
		|	ПроводкиТрансляции.ДокументТрансляции = &ДокументТрансляции";
		
		Если ТипЗнч(ДокументТрансляции)=Тип("ДокументОбъект.Трансляция") Тогда 
			
			Запрос.УстановитьПараметр("ДокументТрансляции",ДокументОбъект.Ссылка);
			
		Иначе
			
			Запрос.УстановитьПараметр("ДокументТрансляции",ДокументТрансляции);
			
		КонецЕсли;
		
		ПроводкиДокумента=Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		ПроводкиДокумента= ДокументТрансляции.Проводки.Выгрузить();
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьПроводкиДокумента()

Процедура ИнициализироватьКонтекст() Экспорт
		
	ВидОтчета=ШаблонКорректировки;
	МаксАналитикОтчета=0;
	
	ЭтоНовый=НЕ ЗначениеЗаполнено(Ссылка);
	
	Если ЗначениеЗаполнено(ПериодОтчета) Тогда
		
		ДанныеПериода=ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПериодОтчета,"ДатаНачала,ДатаОкончания");
		НачалоПериода=ДанныеПериода.ДатаНачала;
		ОкончаниеПериода=ДанныеПериода.ДатаОкончания;
		
	КонецЕсли;
		
	Если ТипЗнч(ДокументОбъект)=Тип("ДокументОбъект.ТрансформационнаяКорректировка") Тогда
		
		ПроводкиДокумента			= ДокументОбъект.Проводки.Выгрузить();	
		СводныеПроводкиДокумента	= ДокументОбъект.СводныеПроводки.Выгрузить();
		СводныеПроводкиДокумента.Колонки.Удалить("ДанныеРасчета");
	
	ИначеЕсли ТипЗнч(Ссылка)=Тип("ДокументСсылка.ТрансформационнаяКорректировка") Тогда
		
		ПроводкиДокумента			= Ссылка.Проводки.Выгрузить();	
		СводныеПроводкиДокумента	= Ссылка.СводныеПроводки.Выгрузить();
		СводныеПроводкиДокумента.Колонки.Удалить("ДанныеРасчета");
		
	ИначеЕсли ТипЗнч(ЗначениеКопирования)=Тип("ДокументСсылка.ТрансформационнаяКорректировка") Тогда
		
		ПроводкиДокумента			= ЗначениеКопирования.Проводки.Выгрузить();	
		СводныеПроводкиДокумента	= ЗначениеКопирования.СводныеПроводки.Выгрузить();
		СводныеПроводкиДокумента.Колонки.Удалить("ДанныеРасчета");
	
	ИначеЕсли ИмяОбъектаМетаданных="ТрансформационнаяКорректировка" Тогда
		
		ИнициализироватьТаблицыПроводок(ИмяОбъектаМетаданных);
		ИнициализироватьТаблицыЗаписей();
		
	ИначеЕсли ТипЗнч(ДокументОбъект)=Тип("ДокументОбъект.Трансляция") Тогда
		
		Если КорректировкиЗначенийПоказателей32.ТрансляцияВРегистрБухгалтерии(НаправлениеТрансляции) Тогда
			
			ПолучитьПроводкиДокумента(ДокументОбъект);	
			СводныеПроводкиДокумента	= ДокументОбъект.СводныеПроводки.Выгрузить();
			СводныеПроводкиДокумента.Колонки.Удалить("ДанныеРасчета");
			
		Иначе
			
			РедактируемыеЗаписи=ДокументОбъект.РедактируемыеЗаписи.Выгрузить();
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Ссылка)=Тип("ДокументСсылка.Трансляция") Тогда
		
		Если КорректировкиЗначенийПоказателей32.ТрансляцияВРегистрБухгалтерии(НаправлениеТрансляции) Тогда
			
			ПолучитьПроводкиДокумента(Ссылка);
			СводныеПроводкиДокумента	= Ссылка.СводныеПроводки.Выгрузить();
			СводныеПроводкиДокумента.Колонки.Удалить("ДанныеРасчета");
			
		Иначе
			
			РедактируемыеЗаписи=Ссылка.РедактируемыеЗаписи.Выгрузить();
			
		КонецЕсли;
			
	ИначеЕсли ТипЗнч(ЗначениеКопирования)=Тип("ДокументСсылка.Трансляция") Тогда
		
		Если КорректировкиЗначенийПоказателей32.ТрансляцияВРегистрБухгалтерии(НаправлениеТрансляции) Тогда
			 			
			ПолучитьПроводкиДокумента(ЗначениеКопирования);
			СводныеПроводкиДокумента	= ЗначениеКопирования.СводныеПроводки.Выгрузить();
			СводныеПроводкиДокумента.Колонки.Удалить("ДанныеРасчета");
			
		Иначе
			
			РедактируемыеЗаписи=ЗначениеКопирования.РедактируемыеЗаписи.Выгрузить();
			
		КонецЕсли;
		
	ИначеЕсли ИмяОбъектаМетаданных="Трансляция" Тогда
		
		ИнициализироватьТаблицыПроводок(ИмяОбъектаМетаданных);
		ИнициализироватьТаблицыЗаписей();
				
	КонецЕсли;
	
	мСоответствиеДляПоискаПоКоду=Новый Соответствие;
	мСоответствиеДляПоискаПоСсылке=Новый Соответствие;
		
	Если НЕ ЗначениеЗаполнено(ШаблонКорректировки) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяОбъектаМетаданных="ТрансформационнаяКорректировка" И СводныеПроводкиДокумента.Количество()=0  Тогда
		ОбновитьПроводкиПоШаблону(СводныеПроводкиДокумента);
	КонецЕсли;
	
	Если ИмяОбъектаМетаданных="ТрансформационнаяКорректировка" Тогда
		
		мПоказатели 			= ЗаполнитьТаблицуПоказателейТрансформация();
		мПоказателиРаскрытия 	= ЗаполнитьТаблицуРаскрытийТрансформация();
		МаксАналитикПоказателя	= 6;
		ЧислоДопАналитик		= 6;
		
		ПодготовитьТаблицуЗначенийОперандов();
	
	Иначе
		
		мПоказатели				= ЗаполнитьТаблицуПоказателейТрансляция();
		мПоказателиРаскрытия 	= ЗаполнитьТаблицуРаскрытийТрансляция();
		МаксАналитикПоказателя	= 0;
		ЧислоДопАналитик		= ПараметрыСеанса.ЧислоДопАналитик;
		
	КонецЕсли;
			
	Если мПоказатели.Колонки.Найти("Комментарий") = Неопределено Тогда
		мПоказатели.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	// обрезаем коды
	мПоказатели.Колонки.Код.Имя = "Имя";
	мПоказатели.Колонки.Добавить("Код",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
			
	мНеЧисловыеПоказатели=Новый Массив;
	мЧисловыеПоказатели=Новый Структура;
	
	МаксАналитикДт=0;
	МаксАналитикКт=0;
	
	Для Каждого Стр Из мПоказатели Цикл
		
		Стр.Код = СокрЛП(Стр.Имя);
		
		мСоответствиеДляПоискаПоКоду.Вставить(Стр.Код, Стр);
		мСоответствиеДляПоискаПоСсылке.Вставить(Стр.Ссылка, Стр);
		мЧисловыеПоказатели.Вставить(Стр.Код, Стр.НеМасштабируется);	
		
		Если ИмяОбъектаМетаданных="ТрансформационнаяКорректировка" Тогда
			
			Если Стр.ЧислоАналитикДт>МаксАналитикДт Тогда
				МаксАналитикДт=Стр.ЧислоАналитикДт;
			КонецЕсли;
			
			Если Стр.ЧислоАналитикКт>МаксАналитикКт Тогда
				МаксАналитикКт=Стр.ЧислоАналитикКт;
			КонецЕсли;
			
		Иначе
			
			Если Стр.ЧислоАналитикГруппыРаскрытия>МаксАналитикПоказателя Тогда
				МаксАналитикПоказателя=Стр.ЧислоАналитикГруппыРаскрытия;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	мПоказатели.Колонки.Удалить(мПоказатели.Колонки.Имя);
		
	мПоказатели.Колонки.Добавить("ДанныеРасчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтруктура());
	мПоказатели.Колонки.Добавить("СохраненныеДанныеАктуальны",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	мПоказатели.ЗаполнитьЗначения(Истина,"СохраненныеДанныеАктуальны");
		
	// Создаем соответствие кодов и ссылок на показатели
	
	мСоответствиеПоказателейКодов = Новый Соответствие;
	Для Каждого Стр Из мПоказатели Цикл
		мСоответствиеПоказателейКодов.Вставить(Стр.Код, Стр.Ссылка);
	КонецЦикла;
	
	ТекстИндексАналитика="Показатель";
	
	Для Инд=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		
		Если НЕ мПоказателиРаскрытия.Колонки.Найти("Аналитика"+Инд)=Неопределено Тогда
			
			ТекстИндексАналитика=ТекстИндексАналитика+",Аналитика"+Инд;
			
		КонецЕсли;
		
	КонецЦикла;
			
	ТекстИндексАналитика=ТекстИндексАналитика+",АналитикаВалюта";
					
	мПоказателиРаскрытия.Индексы.Добавить(ТекстИндексАналитика);
	
	Если ИмяОбъектаМетаданных="ТрансформационнаяКорректировка" Тогда
		
		ТекстИндексПроводки="ШаблонПроводки,ВалютаДт,ВалютаКт";
		
		Для Индекс=1 ПО МаксАналитикДт Цикл
			ТекстИндексПроводки=ТекстИндексПроводки+",СубконтоДт"+Индекс;
		КонецЦикла;
		
		Для Индекс=1 ПО МаксАналитикКт Цикл
			ТекстИндексПроводки=ТекстИндексПроводки+",СубконтоКт"+Индекс;
		КонецЦикла;
		
		ПроводкиДокумента.Индексы.Добавить(ТекстИндексПроводки);
		
	ИначеЕсли ИмяОбъектаМетаданных="Трансляция" Тогда
		
		ИнициализироватьЛоги();
		
	КонецЕсли;
	
	Если мПоказателиРаскрытия.Колонки.Найти("Техническая")=Неопределено Тогда
		
		мПоказателиРаскрытия.Колонки.Добавить("Техническая",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		
	КонецЕсли;
	
	СформироватьСтруктуруПоказателей();
	
	ЭкземплярыИсточники=Новый ТаблицаЗначений;
	ЭкземплярыИсточники.Колонки.Добавить("ЭкземплярОтчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ДокументСсылка.НастраиваемыйОтчет"));

	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		ОпределитьНеобходимостьПерезаполнения();	
		
	КонецЕсли; 	
		
КонецПроцедуры // ИнициализироватьКонтекст() 

Процедура ОпределитьНеобходимостьПерезаполнения()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СостоянияДокументовТрансляции.ИзмененыИсходныеДанные КАК ИзмененыИсходныеДанные,
	|	СостоянияДокументовТрансляции.ИзмененШаблонКорректировки КАК ИзмененШаблонКорректировки
	|ИЗ
	|	РегистрСведений.СостоянияДокументовТрансляции КАК СостоянияДокументовТрансляции
	|ГДЕ
	|	СостоянияДокументовТрансляции.ДокументТрансляции = &Ссылка";
				 
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		ТребуетсяПерезаполнение=Результат.ИзмененыИсходныеДанные ИЛИ Результат.ИзмененШаблонКорректировки;
		
	Иначе
		
		ТребуетсяПерезаполнение=Ложь;
		
	КонецЕсли;
			
КонецПроцедуры // ОпределитьНеобходимостьПерезаполнения() 

Процедура ПодготовитьТаблицуЗначенийОперандов()
	
	мЗначенияОперандов=Новый ТаблицаЗначений;
	мЗначенияОперандов.Колонки.Добавить("КодОперанда",общегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(Метаданные.Справочники.ИсточникиДанныхДляРасчетов.ДлинаКода));
	
	МассивКолонокИзмерений=Новый Массив;
	
	Если мПоказателиРаскрытия=Неопределено Тогда
		
		ИнициализироватьКонтекст();
		
	КонецЕсли;
	
	Для Каждого Колонка ИЗ мПоказателиРаскрытия.Колонки Цикл
		
		Если Лев(Колонка.Имя,9)="Аналитика" Тогда
	
		ДобавитьКолонкуТаблицыОперандов(мЗначенияОперандов,Колонка.Имя,Колонка.ТипЗначения);
			
			Если СтрНайти(Колонка.Имя,"Аналитика_")>0 Тогда
				
				МассивКолонокИзмерений.Добавить(Колонка.Имя);
				
			КонецЕсли;
					
		КонецЕсли;
		
	КонецЦикла;
	
	
	ДобавитьКолонкуТаблицыОперандов(мЗначенияОперандов,"Значение",Новый ОписаниеТипов("Строка, Число, Булево, Дата", Новый КвалификаторыЧисла(18, 5), Новый КвалификаторыСтроки(500), Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДобавитьКолонкуТаблицыОперандов(мЗначенияОперандов,"ЗначениеВалюта",общегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ДобавитьКолонкуТаблицыОперандов(мЗначенияОперандов,"ИтогПоПоказателю",общегоНазначенияУХ.ПолучитьОписаниеТиповБулево());

	мЗначенияОперандов.Индексы.Добавить("КодОперанда");
	
КонецПроцедуры // ПодготовитьТаблицуЗначенийОперандов() 

Процедура ДобавитьКолонкуТаблицыОперандов(мЗначенияОперандов,ИмяКолонки,ТипЗначения)
	
	Если мЗначенияОперандов.Колонки.Найти(ИмяКолонки)=Неопределено Тогда
		
		мЗначенияОперандов.Колонки.Добавить(ИмяКолонки,ТипЗначения);
		
	КонецЕсли;	
	
КонецПроцедуры // ДобавитьКолонкуТаблицыОперандов

Процедура ИнициализироватьТаблицыПроводок(ИмяОбъектаМетаданных) Экспорт
	
	ОбъектКорректировки			= Документы[ИмяОбъектаМетаданных].СоздатьДокумент();
	ПроводкиДокумента			= ОбъектКорректировки.Проводки.ВыгрузитьКолонки();
	СводныеПроводкиДокумента	= ОбъектКорректировки.СводныеПроводки.ВыгрузитьКолонки();
	СводныеПроводкиДокумента.Колонки.Удалить("ДанныеРасчета");
	
КонецПроцедуры // ИнициализироватьТаблицыПроводок() 

Функция ЗаполнитьТаблицуПоказателейТрансформация();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		
	Запрос.Текст = "ВЫБРАТЬ
	|	СводныеПроводкиДокумента.ШаблонПроводки КАК ШаблонПроводки,
	|	СводныеПроводкиДокумента.Значение КАК Значение
	|ПОМЕСТИТЬ ТекущиеПроводки
	|ИЗ
	|	&СводныеПроводкиДокумента КАК СводныеПроводкиДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШаблоныПроводок.Код КАК Код,
	|	ШаблоныПроводок.Наименование КАК Наименование,
	|	ШаблоныПроводок.Ссылка КАК Ссылка,
	|	ШаблоныПроводок.ЧисловойПоказатель КАК ЧисловойПоказатель,
	|	ШаблоныПроводок.НеФинансовый КАК НеФинансовый,
	|	ШаблоныПроводок.ТипЗначения КАК ТипЗначения,
	|	ШаблоныПроводок.ВидИтога КАК ВидИтога,
	|	ШаблоныПроводок.СвязанныйПоказатель КАК СвязанныйПоказатель,
	|	ШаблоныПроводок.ВидКурса КАК ВидКурса,
	|	ШаблоныПроводок.НеМасштабируется КАК НеМасштабируется,
	|	ШаблоныПроводок.ГруппаРаскрытия КАК ГруппаРаскрытия,
	|	ШаблоныПроводок.ПорядковыйНомерСтроки КАК ПорядковыйНомерСтроки,
	|	ШаблоныПроводок.ПорядковыйНомерКолонки КАК ПорядковыйНомерКолонки,
	|	ШаблоныПроводок.КодСтрока КАК КодСтрока,
	|	ШаблоныПроводок.ГруппаРаскрытияСтрока КАК ГруппаРаскрытияСтрока,
	|	ШаблоныПроводок.КодГруппыРаскрытияСтрока КАК КодГруппыРаскрытияСтрока,
	|	ШаблоныПроводок.КодКолонка КАК КодКолонка,
	|	ШаблоныПроводок.КодГруппыРаскрытия КАК КодГруппыРаскрытия,
	|	ШаблоныПроводок.ЧислоАналитикГруппыРаскрытия КАК ЧислоАналитикГруппыРаскрытия,
	|	ШаблоныПроводок.ЧислоАналитикДт КАК ЧислоАналитикДт,
	|	ШаблоныПроводок.ЧислоАналитикКт КАК ЧислоАналитикКт,
	|	ШаблоныПроводок.ВидАналитики1 КАК ВидАналитики1,
	|	ШаблоныПроводок.ВидАналитики2 КАК ВидАналитики2,
	|	ШаблоныПроводок.ВидАналитики3 КАК ВидАналитики3,
	|	ШаблоныПроводок.ВидАналитики4 КАК ВидАналитики4,
	|	ШаблоныПроводок.ВидАналитики5 КАК ВидАналитики5,
	|	ШаблоныПроводок.ВидАналитики6 КАК ВидАналитики6,
	|	ЕСТЬNULL(ТекущиеПроводки.Значение, 0) КАК Значение,
	|	ЛОЖЬ КАК ЗначениеИзменено,
	|	ШаблоныПроводок.СчетДт КАК СчетДт,
	|	ШаблоныПроводок.СчетКт КАК СчетКт,
	|	ШаблоныПроводок.РесурсРегистра КАК РесурсРегистра,
	|	ШаблоныПроводок.ПорядковыйНомер КАК ПорядковыйНомер,
	|	ШаблоныПроводок.ВалютныйДт КАК ВалютныйДт,
	|	ШаблоныПроводок.ВалютныйКт КАК ВалютныйКт,
	|	ШаблоныПроводок.Валютный КАК Валютный,
	|	ШаблоныПроводок.ПересчитыватьВалютнуюСумму КАК ПересчитыватьВалютнуюСумму
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоказателиОтчетов.Код КАК Код,
	|		ПоказателиОтчетов.Наименование КАК Наименование,
	|		ПоказателиОтчетов.Ссылка КАК Ссылка,
	|		ПоказателиОтчетов.ЧисловойПоказатель КАК ЧисловойПоказатель,
	|		ПоказателиОтчетов.НеФинансовый КАК НеФинансовый,
	|		ПоказателиОтчетов.ТипЗначения КАК ТипЗначения,
	|		ПоказателиОтчетов.ВидИтога КАК ВидИтога,
	|		ПоказателиОтчетов.СвязанныйПоказатель КАК СвязанныйПоказатель,
	|		ПоказателиОтчетов.ВидКурса КАК ВидКурса,
	|		ПоказателиОтчетов.НеМасштабируется КАК НеМасштабируется,
	|		ПоказателиОтчетов.ГруппаРаскрытия КАК ГруппаРаскрытия,
	|		ПоказателиОтчетов.Строка.ПорядковыйНомер КАК ПорядковыйНомерСтроки,
	|		ПоказателиОтчетов.Колонка.ПорядковыйНомер КАК ПорядковыйНомерКолонки,
	|		ПоказателиОтчетов.Строка.Код КАК КодСтрока,
	|		ПоказателиОтчетов.Строка.ГруппаРаскрытия КАК ГруппаРаскрытияСтрока,
	|		ПоказателиОтчетов.Строка.ГруппаРаскрытия.Код КАК КодГруппыРаскрытияСтрока,
	|		ПоказателиОтчетов.Колонка.Код КАК КодКолонка,
	|		ПоказателиОтчетов.ГруппаРаскрытия.Код КАК КодГруппыРаскрытия,
	|		ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.ЧислоАналитик, 0) КАК ЧислоАналитикГруппыРаскрытия,
	|		ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.ЧислоАналитикДт, 0) КАК ЧислоАналитикДт,
	|		ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.ЧислоАналитикКт, 0) КАК ЧислоАналитикКт,
	|		ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики1 КАК ВидАналитики1,
	|		ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики2 КАК ВидАналитики2,
	|		ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3 КАК ВидАналитики3,
	|		ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 КАК ВидАналитики4,
	|		ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 КАК ВидАналитики5,
	|		ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 КАК ВидАналитики6,
	|		ПоказателиОтчетов.СчетБД КАК СчетДт,
	|		ПоказателиОтчетов.КоррСчетБД КАК СчетКт,
	|		ПоказателиОтчетов.РесурсРегистра КАК РесурсРегистра,
	|		ПоказателиОтчетов.ПорядковыйНомер КАК ПорядковыйНомер,
	|		ПоказателиОтчетов.СчетБД.Валютный КАК ВалютныйДт,
	|		ПоказателиОтчетов.КоррСчетБД.Валютный КАК ВалютныйКт,
	|		ВЫБОР
	|			КОГДА ПоказателиОтчетов.СчетБД.Валютный
	|					ИЛИ ПоказателиОтчетов.КоррСчетБД.Валютный
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК Валютный,
	|		ПоказателиОтчетов.ПересчитыватьВалютнуюСумму КАК ПересчитыватьВалютнуюСумму,
	|		ЛОЖЬ КАК ЗначениеИзменено
	|	ИЗ
	|		Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|	ГДЕ
	|		ПоказателиОтчетов.Владелец = &ВидОтчета
	|		И НЕ ПоказателиОтчетов.ПометкаУдаления
	|		И ПоказателиОтчетов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.ТрансформационныеКорректировки)
	|		И НЕ ПоказателиОтчетов.Отключен) КАК ШаблоныПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеПроводки КАК ТекущиеПроводки
	|		ПО ШаблоныПроводок.Ссылка = ТекущиеПроводки.ШаблонПроводки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядковыйНомер";
	
	Запрос.УстановитьПараметр("ВидОтчета",ШаблонКорректировки);
	Запрос.УстановитьПараметр("СводныеПроводкиДокумента",СводныеПроводкиДокумента);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ЗаполнитьТаблицуПоказателейТрансформация()

Функция ПолеВТаблицеПроводок(ИмяПоля,Балансовый)
		
	Возврат НЕ ПроводкиДокумента.Колонки.Найти(ИмяПоля+?(Балансовый,"","Дт"))=Неопределено;
	
КонецФункции // ПолеВТаблицеПроводок() 

Функция ЗаполнитьТаблицуРаскрытийТрансформация(ШаблонПроводки=Неопределено)
	
	ШаблонТаблицыРаскрытия=Новый ТаблицаЗначений;
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		ШаблонТаблицыРаскрытия.Колонки.Добавить("Аналитика"+Индекс,Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип);
		
	КонецЦикла;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	РегистрыБухгалтерииБДИзмерения.Имя КАК Имя,
	|	РегистрыБухгалтерииБДИзмерения.Балансовый КАК Балансовый,
	|	РегистрыБухгалтерииБДИзмерения.ТипДанных КАК ТипДанных
	|ИЗ
	|	Справочник.РегистрыБухгалтерииБД.Измерения КАК РегистрыБухгалтерииБДИзмерения
	|ГДЕ
	|	РегистрыБухгалтерииБДИзмерения.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ШаблонКорректировки.РегистрБухгалтерии);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Если НЕ ПолеВТаблицеПроводок(Результат.Имя,Результат.Балансовый) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если Результат.Балансовый Тогда
			
			ШаблонТаблицыРаскрытия.Колонки.Добавить("Аналитика_"+Результат.Имя,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповИзСтрокиТипов(Результат.ТипДанных));
			
		Иначе
			
			ШаблонТаблицыРаскрытия.Колонки.Добавить("Аналитика_"+Результат.Имя+"Дт",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповИзСтрокиТипов(Результат.ТипДанных));
			ШаблонТаблицыРаскрытия.Колонки.Добавить("Аналитика_"+Результат.Имя+"Кт",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповИзСтрокиТипов(Результат.ТипДанных));
			
		КонецЕсли;
		
	КонецЦикла;
			
	ШаблонТаблицыРаскрытия.Колонки.Добавить("АналитикаВалюта",Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		
	ШаблонТаблицыРаскрытия.Колонки.Добавить("Значение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ШаблонТаблицыРаскрытия.Колонки.Добавить("ЗначениеВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ШаблонТаблицыРаскрытия.Колонки.Добавить("ЗначениеВалютаДт",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ШаблонТаблицыРаскрытия.Колонки.Добавить("ЗначениеВалютаКт",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ШаблонТаблицыРаскрытия.Колонки.Добавить("ЗначениеИзменено",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ШаблонТаблицыРаскрытия.Колонки.Добавить("ИтоговоеЗначение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ШаблонТаблицыРаскрытия.Колонки.Добавить("Показатель",Новый ОписаниеТипов("СправочникСсылка.ПоказателиОтчетов"));
	ШаблонТаблицыРаскрытия.Колонки.Добавить("ЧислоАналитикГруппыРаскрытия",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1));
	ШаблонТаблицыРаскрытия.Колонки.Добавить("ЧислоАналитикДт",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1));
	ШаблонТаблицыРаскрытия.Колонки.Добавить("ЧислоАналитикКт",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1));
	
	Возврат ШаблонТаблицыРаскрытия;
		
КонецФункции // ЗаполнитьТаблицуРаскрытийТрансформация()

Функция ЗаполнитьТаблицуПоказателейТрансляция()
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ ПроцедурыРасчетов.ПотребительРасчета.Код КАК Код,
	|	ПроцедурыРасчетов.ПотребительРасчета.Наименование КАК Наименование,
	|	ПроцедурыРасчетов.ПотребительРасчета.Ссылка КАК Ссылка,
	|	ПроцедурыРасчетов.ПотребительРасчета.ЧисловойПоказатель КАК ЧисловойПоказатель,
	|	ПроцедурыРасчетов.ПотребительРасчета.НеФинансовый КАК НеФинансовый,
	|	ПроцедурыРасчетов.ПотребительРасчета.ТипЗначения КАК ТипЗначения,
	|	ПроцедурыРасчетов.ПотребительРасчета.ВидИтога КАК ВидИтога,
	|	ПроцедурыРасчетов.ПотребительРасчета.СвязанныйПоказатель КАК СвязанныйПоказатель,
	|	ПроцедурыРасчетов.ПотребительРасчета.ВидКурса КАК ВидКурса,
	|	ЕСТЬNULL(ПроцедурыРасчетов.ПотребительРасчета.ГруппаРаскрытия.Валютная,ЛОЖЬ) КАК Валютный,
	|	ПроцедурыРасчетов.ПотребительРасчета.ПересчитыватьВалютнуюСумму КАК ПересчитыватьВалютнуюСумму,
	|	ПроцедурыРасчетов.ПотребительРасчета.НеМасштабируется КАК НеМасштабируется,
	|	ПроцедурыРасчетов.ПотребительРасчета.ГруппаРаскрытия КАК ГруппаРаскрытия, ";
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Запрос.Текст = Запрос.Текст + "
		|	ПроцедурыРасчетов.ПотребительРасчета.ГруппаРаскрытия.ВидАналитики" + Инд + " КАК ВидАналитики" + Инд + ", ";
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
	|	ПроцедурыРасчетов.ПотребительРасчета.Строка.ПорядковыйНомер КАК ПорядковыйНомерСтроки,
	|	ПроцедурыРасчетов.ПотребительРасчета.Колонка.ПорядковыйНомер КАК ПорядковыйНомерКолонки,
	|	ПроцедурыРасчетов.ПотребительРасчета.Строка.Код КАК КодСтрока,
	|	ПроцедурыРасчетов.ПотребительРасчета.Строка.ГруппаРаскрытия КАК ГруппаРаскрытияСтрока,
	|	ПроцедурыРасчетов.ПотребительРасчета.Строка.ГруппаРаскрытия.Код КАК КодГруппыРаскрытияСтрока,
	|	ПроцедурыРасчетов.ПотребительРасчета.Колонка.Код КАК КодКолонка,
	|	ПроцедурыРасчетов.ПотребительРасчета.ГруппаРаскрытия.Код КАК КодГруппыРаскрытия,
	|	ЕСТЬNULL(ПроцедурыРасчетов.ПотребительРасчета.ГруппаРаскрытия.ЧислоАналитик,0) КАК ЧислоАналитикГруппыРаскрытия,
	|	ПроцедурыРасчетов.ПотребительРасчета.Колонка КАК Колонка,
	|	ПроцедурыРасчетов.ПотребительРасчета.Строка КАК Строка, 
	|	ЛОЖЬ КАК ЗначениеИзменено,
	|	0 КАК Значение
	|ИЗ РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
	|	ГДЕ ПроцедурыРасчетов.НазначениеРасчетов = &НазначениеРасчетов";
	
	Запрос.УстановитьПараметр("НазначениеРасчетов"    ,ПравилоОбработки);
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ЗаполнитьТаблицуРаскрытийТрансляция()
	
	ВнТаблицаРаскрытия = Новый ТаблицаЗначений;
	ВнТаблицаРаскрытия.Колонки.Добавить("Показатель",Новый ОписаниеТипов("СправочникСсылка.ПоказателиОтчетов"));
	ВнТаблицаРаскрытия.Колонки.Добавить("АналитикаВалюта",Новый ОписаниеТипов("СправочникСсылка.Валюты"));

	ВнТаблицаРаскрытия.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка, Число, Булево, Дата", Новый КвалификаторыЧисла(18, 5), Новый КвалификаторыСтроки(500), Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ВнТаблицаРаскрытия.Колонки.Добавить("ЗначениеВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ВнТаблицаРаскрытия.Колонки.Добавить("ЗначениеИзменено",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());

	ВнТаблицаРаскрытия.Колонки.Добавить("ГруппаРаскрытия", Новый ОписаниеТипов("СправочникСсылка.ГруппыРаскрытия"));
	ВнТаблицаРаскрытия.Колонки.Добавить("ЧислоАналитикГруппыРаскрытия", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1));
	ВнТаблицаРаскрытия.Колонки.Добавить("ИтоговоеЗначение", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	Для Инд = 1 По ЧислоДопАналитик Цикл
		ВнТаблицаРаскрытия.Колонки.Добавить("Аналитика" + строка(Инд),Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип);
	КонецЦикла;
	
	Возврат ВнТаблицаРаскрытия;
	
КонецФункции // ЗаполнитьТаблицуРаскрытийТрансляция() 

Процедура ИнициализироватьЛоги()
	
	НомерТекущейОперации = 0;
	
	ЛогИзмененийПоказателей = Новый ТаблицаЗначений;
	ЛогИзмененийПоказателей.Колонки.Добавить("Ссылка",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОтчетов"));
	ЛогИзмененийПоказателей.Колонки.Добавить("НомерОперации", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));
	ЛогИзмененийПоказателей.Колонки.Добавить("Значение",мПоказатели.Колонки.Значение.ТипЗначения);
	ЛогИзмененийПоказателей.Колонки.Добавить("ПервоеИзменение", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ЛогИзмененийПоказателей.Колонки.Добавить("ЧисловойПоказатель", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ЛогИзмененийПоказателей.Индексы.Добавить("Ссылка");
	ЛогИзмененийПоказателей.Индексы.Добавить("НомерОперации");
	
	ЛогИзмененийРаскрытийПоказателей = Новый ТаблицаЗначений;
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("Показатель",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОтчетов"));
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("АналитикаВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Валюты"));
	
	ТипАналитики=Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("Аналитика" + Инд,ТипАналитики);
		
	КонецЦикла;
	
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("НомерОперации", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("НачальноеЗначение");
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("НачальноеЗначениеВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("Значение",мПоказателиРаскрытия.Колонки.Значение.ТипЗначения);
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("ЗначениеВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("ПервоеИзменение", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("ЧисловойПоказатель", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("ДобавлениеАналитики", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("СторнированиеАналитики", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("ЧислоАналитикГруппыРаскрытия", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1));
	
	УстановитьИндексыНаЛогРаскрытий();
	
КонецПроцедуры

Процедура УстановитьИндексыНаЛогРаскрытий() Экспорт
	
	СтрокаИндекс="Показатель";
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		СтрокаИндекс=СтрокаИндекс+",Аналитика"+Индекс;
		
	КонецЦикла;

	ЛогИзмененийРаскрытийПоказателей.Индексы.Добавить(СтрокаИндекс);
	ЛогИзмененийРаскрытийПоказателей.Индексы.Добавить("НомерОперации");
	
КонецПроцедуры

// Формирует структуру показателей (Показатели), которая будет доступна из модулей отчета.
// Ключи структуры - коды показателей, значения - значения показателей.
//
Процедура СформироватьСтруктуруПоказателей() Экспорт
	
	Показатели = Новый Структура;
	
	Для Каждого Пок из мПоказатели Цикл
		Показатели.Вставить(Пок.Код, Пок.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановитьПеременныеДляРасчета() Экспорт
	
	ПеременныеДляРасчета=ПолучитьИзВременногоХранилища(АдресХранилищаПеременныхДляРасчета);
	
	Если ТипЗнч(ПеременныеДляРасчета)=Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,ПеременныеДляРасчета);
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьПеременныеДляРасчета()

Функция ПодготовитьСтруктуруПеременныхДляРасчета() Экспорт
	
	СтруктураПеременных=Новый Структура;
	СтруктураПеременных.Вставить("Ссылка",Ссылка);
	СтруктураПеременных.Вставить("АнализЧувствительности",АнализЧувствительности);
	СтруктураПеременных.Вставить("База",База);
	СтруктураПеременных.Вставить("ВидОтчета",ВидОтчета);
	СтруктураПеременных.Вставить("ПравилоОбработки",ПравилоОбработки);
	СтруктураПеременных.Вставить("ДанныеПараметрикиАктуальны",ДанныеПараметрикиАктуальны);
	СтруктураПеременных.Вставить("ЕстьОбращениеКВИБ",ЕстьОбращениеКВИБ);
	СтруктураПеременных.Вставить("ЛогИзмененийПоказателей",ЛогИзмененийПоказателей);
	СтруктураПеременных.Вставить("ЛогИзмененийРаскрытийПоказателей",ЛогИзмененийРаскрытийПоказателей);
	СтруктураПеременных.Вставить("МаксАналитикОтчета",МаксАналитикОтчета);
	СтруктураПеременных.Вставить("МаксАналитикПоказателя",МаксАналитикПоказателя);
	СтруктураПеременных.Вставить("мЗначенияОперандов",мЗначенияОперандов);
	СтруктураПеременных.Вставить("мОперанды",мОперанды);
	СтруктураПеременных.Вставить("ОбработанныеОперанды",ОбработанныеОперанды);
	СтруктураПеременных.Вставить("мПоказатели",мПоказатели);
	СтруктураПеременных.Вставить("мПоказателиДляОбработки",мПоказателиДляОбработки);
	СтруктураПеременных.Вставить("мПоказателиОбязательныеКПересчету",мПоказателиОбязательныеКПересчету);
	СтруктураПеременных.Вставить("мПоказателиРаскрытия",мПоказателиРаскрытия);
	СтруктураПеременных.Вставить("мПустойВидАналитики",мПустойВидАналитики);
	СтруктураПеременных.Вставить("мРасширеннаяДиагностикаВключена",мРасширеннаяДиагностикаВключена);
	СтруктураПеременных.Вставить("мСоответствиеДляПоискаПоКоду",мСоответствиеДляПоискаПоКоду);
	СтруктураПеременных.Вставить("мСоответствиеДляПоискаПоСсылке",мСоответствиеДляПоискаПоСсылке);
	СтруктураПеременных.Вставить("мСоответствиеОперандовИПоказателейОтбора",мСоответствиеОперандовИПоказателейОтбора);
	СтруктураПеременных.Вставить("мТаблицаВидовАналитикВидаОтчета",мТаблицаВидовАналитикВидаОтчета);
	СтруктураПеременных.Вставить("мТаблицаПересчета",мТаблицаПересчета);
	СтруктураПеременных.Вставить("мТабПоказателиЗапросы",мТабПоказателиЗапросы);
	СтруктураПеременных.Вставить("мТабРасшифровкиПоказателей",мТабРасшифровкиПоказателей);
	СтруктураПеременных.Вставить("НомерТекущейОперации",НомерТекущейОперации);
	СтруктураПеременных.Вставить("Показатели",Показатели);
	СтруктураПеременных.Вставить("ПоказателиДляЗаполнения",ПоказателиДляЗаполнения);
	СтруктураПеременных.Вставить("ТабКорректировок",ТабКорректировок);
	СтруктураПеременных.Вставить("ТаблицаВыявленныхОшибок",ТаблицаВыявленныхОшибок);
	СтруктураПеременных.Вставить("ТипЗначенияЧисло",ТипЗначенияЧисло);
	СтруктураПеременных.Вставить("ФлагОшибкиИмпорта",ФлагОшибкиИмпорта);
	СтруктураПеременных.Вставить("ЧислоДопАналитик",ЧислоДопАналитик);
	СтруктураПеременных.Вставить("ТаблицаСогласования",ТаблицаСогласования);
	СтруктураПеременных.Вставить("ДанныеРасшифровкиСчитаны",ДанныеРасшифровкиСчитаны);
	СтруктураПеременных.Вставить("ТрансформационнаяКорректировка",ИмяОбъектаМетаданных="ТрансформационнаяКорректировка");
	СтруктураПеременных.Вставить("ПроводкиДокумента",ПроводкиДокумента);
	СтруктураПеременных.Вставить("СводныеПроводкиДокумента",СводныеПроводкиДокумента);
	СтруктураПеременных.Вставить("ЕдиницаИзмеренияОтображения",Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	СтруктураПеременных.Вставить("УровеньТочности",0);
	СтруктураПеременных.Вставить("Записи",Записи);
	СтруктураПеременных.Вставить("РедактируемыеЗаписи",РедактируемыеЗаписи);
	СтруктураПеременных.Вставить("СводныеКорректировки",СводныеКорректировки);
	СтруктураПеременных.Вставить("ПутьКФайлуADO",ПутьКФайлуADO);
	СтруктураПеременных.Вставить("ПутьКВременномуФайлуADO",ПутьКВременномуФайлуADO);
	СтруктураПеременных.Вставить("РежимКорректировки",Ложь);
	СтруктураПеременных.Вставить("мСоответствиеДляПоискаПоСсылкеКорр");
	СтруктураПеременных.Вставить("ЭкземплярыИсточники",ЭкземплярыИсточники);
	СтруктураПеременных.Вставить("УправляемыйРежим",Истина);
	СтруктураПеременных.Вставить("ВидОперации",ВидОперации);
	
	СтруктураПеременных.Вставить("ВалютаУчетаИсточник",			ВалютаУчетаИсточник);
	СтруктураПеременных.Вставить("ВалютаПредставленияИсточник",	ВалютаПредставленияИсточник);
	СтруктураПеременных.Вставить("ВалютаУчетаПриемник",			ВалютаУчетаПриемник);
	СтруктураПеременных.Вставить("ВалютаПредставленияПриемник",	ВалютаПредставленияПриемник);
	
	Если МассивКолонокИзмерений=Неопределено И ЗначениеЗаполнено(ШаблонКорректировки) Тогда
		
		ПодготовитьТаблицуЗначенийОперандов();
		
	КонецЕсли;	
	
	СтруктураПеременных.Вставить("МассивКолонокИзмерений",МассивКолонокИзмерений);

	СтруктураПеременных.Вставить("ДополнительныеСвойства", ?(ДополнительныеСвойстваДляРасчета = Неопределено, Новый Структура, ДополнительныеСвойстваДляРасчета));
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		СтруктураПеременных.Вставить("Аналитика"+Индекс,Неопределено);
		
	КонецЦикла;
		
	Возврат СтруктураПеременных
	
КонецФункции // ПодготовитьСтруктуруПеременныхДляРасчета()

Процедура ВыполнитьТрансляциюПроводок(ДанныеОбъекта,ТаблицаСчетов=Неопределено,Период=Неопределено)
	
	СтруктураПоиска=Новый Структура;	
	
	Если Не Период=Неопределено Тогда
		
		СтруктураПоиска.Вставить("Период",Период);
		
		ДанныеПериода=Новый Структура;
		ДанныеПериода.Вставить("ДатаНачала",НачалоДня(Период));
		ДанныеПериода.Вставить("ДатаОкончания",КонецДня(Период));
		
		ДанныеОбъекта.Вставить("ПериодОтчета",ДанныеПериода);
		
	КонецЕсли; 
		
	Если НЕ ЗначениеЗаполнено(УчетнаяПолитика) Тогда
		
		ДанныеУчетнойПолитики=КорректировкиЗначенийПоказателей32.ПолучитьДанныеУчетнойПолитики(Организация,Сценарий,ПериодОтражения.ДатаНачала);
		
		
	Иначе
		
		ДанныеУчетнойПолитики=ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяПолитика,"ВалютаИсточник,ВалютаИсточникДоп,ВалютаУчета,ВалютаУчетаДоп");
		
	КонецЕсли;
		
	ДанныеОбъекта.Вставить("ВалютаУчетаИсточник",			ДанныеУчетнойПолитики.ВалютаИсточник);
	ДанныеОбъекта.Вставить("ВалютаПредставленияИсточник",	ДанныеУчетнойПолитики.ВалютаИсточникДоп);
	ДанныеОбъекта.Вставить("ВалютаУчетаПриемник",			ДанныеУчетнойПолитики.ВалютаУчета);
	ДанныеОбъекта.Вставить("ВалютаПредставленияПриемник",	ДанныеУчетнойПолитики.ВалютаУчетаДоп); 
	
	Если ДанныеОбъекта.НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.ФинансовыеРегистрыВРегистрБухгалтерии Тогда
		
		КорректировкиЗначенийПоказателей32.ТранслироватьДанныеРегистров(ДанныеОбъекта);
		
	Иначе
		
		Если Не ТаблицаСчетов=Неопределено Тогда
			
			Для Каждого Строка ИЗ ТаблицаСчетов Цикл
				
				СтруктураПоиска.Вставить("СчетДтИсточник",ТаблицаСчетов.СчетДтИсточник);
				СтруктураПоиска.Вставить("СчетКтИсточник",ТаблицаСчетов.СчетКтИсточник);
				
				МассивПроводок=ПроводкиДокумента.НайтиСтроки(СтруктураПоиска);
				
				Для Каждого Строка ИЗ МассивПроводок Цикл
					
					ПроводкиДокумента.Удалить(Строка);
					
				КонецЦикла;
				
			КонецЦикла;
			
		ИначеЕсли СтруктураПоиска.Количество()>0 Тогда
			
			МассивПроводок=ПроводкиДокумента.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого Строка ИЗ МассивПроводок Цикл
				
				ПроводкиДокумента.Удалить(Строка);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Обработки.КорректировкиЗначенийПоказателей.ВыполнитьТрансляциюПроводок(ДанныеОбъекта,ПроводкиДокумента,ТаблицаСчетов);
		
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("ПериодОтчета",ПериодОтчета);
	
КонецПроцедуры // ВыполнитьТрансляциюПроводок() 
	
Процедура ЗаполнитьАвтоматически() Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		
		ДокументОбъект.УстановитьСсылкуНового(Документы[ИмяОбъектаМетаданных].ПолучитьСсылку());
		
	КонецЕсли;
	
	ИнициализироватьКонтекст();
	
	Если КорректировкиЗначенийПоказателей32.ТрансляцияВРегистрБухгалтерии(НаправлениеТрансляции)
		ИЛИ ИмяОбъектаМетаданных="ТрансформационнаяКорректировка" Тогда
		
		ПроводкиДокумента.Очистить();
		СводныеПроводкиДокумента.Очистить();
		
	КонецЕсли;
		
	СтруктураОбъекта=ПодготовитьСтруктуруПеременныхДляРасчета();
	
	ДанныеОбъекта=ОбщегоНазначенияУХ.ПолучитьСтруктуруРеквизитовОбъекта(ЭтотОбъект,СтруктураОбъекта);
	ДанныеОбъекта.Вставить("ДокументОбъект",ЭтотОбъект);
	
	ПротоколируемыеСобытияУХ.Начать(ДанныеОбъекта);
	
	Если ИмяОбъектаМетаданных="Трансляция" 
		И КорректировкиЗначенийПоказателей32.ТрансляцияВРегистрБухгалтерии(НаправлениеТрансляции) Тогда
		
		ВыполнитьТрансляциюПроводок(ДанныеОбъекта);
		
	Иначе
		
		Если ЗначениеЗаполнено(ИсходныйДокумент) Тогда
			
			Обработки.КорректировкиЗначенийПоказателей.ЗаполнитьПроводкиПоТаблицамРегистратора(ШаблонКорректировки,ИсходныйДокумент,ПроводкиДокумента);
			
		КонецЕсли;
		
		УправлениеОтчетамиУХ.ОбработатьПоПараметрическойНастройке(ДанныеОбъекта,Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение);
		
		Если Не ЗначениеЗаполнено(ПравилоОбработки.НаправлениеТрансляции) Тогда
			УправлениеОтчетамиУХ.ОбработатьПоПараметрическойНастройке(ДанныеОбъекта,Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление);
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеОбъекта.Удалить("ДокументОбъект");
	
	Для Каждого Реквизит ИЗ ЭтотОбъект.Метаданные().Реквизиты Цикл
		ДанныеОбъекта.Удалить(Реквизит.Имя);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПравилоОбработки.НаправлениеТрансляции) Тогда
		
		ИнициализироватьТаблицыЗаписей();
		Если ТипЗнч(РедактируемыеЗаписи) = Тип("ТаблицаЗначений") Тогда
			ТаблицаТрансляцииПоказателей = РедактируемыеЗаписи.СкопироватьКолонки();
		Иначе
			ТабВрем = РедактируемыеЗаписи.Выгрузить();
			ТаблицаТрансляцииПоказателей = ТабВрем.СкопироватьКолонки();
		КонецЕсли;
		
		Для Каждого СтрокаПоказатель ИЗ ДанныеОбъекта.мПоказатели Цикл
			
			Если ЗначениеЗаполнено(СтрокаПоказатель.Значение)
				И ДанныеОбъекта.мПоказателиРаскрытия.Найти(СтрокаПоказатель.Ссылка,"Показатель")=Неопределено Тогда
				
				НоваяСтрока=РедактируемыеЗаписи.Добавить();
				НоваяСтрока.Показатель	= СтрокаПоказатель.Ссылка;
				НоваяСтрока.Значение	= СтрокаПоказатель.Значение;
				НоваяСтрока.Раскрытие   = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаРаскрытие ИЗ ДанныеОбъекта.мПоказателиРаскрытия Цикл
			
			Если ЗначениеЗаполнено(СтрокаРаскрытие.Значение) Тогда 
				
				НоваяСтрока=РедактируемыеЗаписи.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРаскрытие);
				НоваяСтрока.Значение		= СтрокаРаскрытие.Значение;
				НоваяСтрока.ЗначениеВалюта	= СтрокаРаскрытие.ЗначениеВалюта;
				НоваяСтрока.Раскрытие		= Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьЭкземплярыОтчетовДляКорректировки();
		ДанныеОбъекта.Вставить("Записи",Записи);
		ДанныеОбъекта.Вставить("РедактируемыеЗаписи",РедактируемыеЗаписи);
		ДанныеОбъекта.Вставить("СводныеКорректировки",СводныеКорректировки);
		
	Иначе
			
		Для Каждого Строка ИЗ ДанныеОбъекта.СводныеПроводкиДокумента Цикл
			
			Если ДанныеОбъекта.ПроводкиДокумента.НайтиСтроки(Новый Структура("СчетДт,СчетКт",Строка.СчетДт,Строка.СчетКт)).Количество()=0 Тогда
				
				НоваяСтрока=ДанныеОбъекта.ПроводкиДокумента.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбновитьПроводкиПоШаблону(ДанныеОбъекта.СводныеПроводкиДокумента);
		
		Для Каждого Строка ИЗ ДанныеОбъекта.СводныеПроводкиДокумента Цикл
			
			Если ДанныеОбъекта.ПроводкиДокумента.НайтиСтроки(Новый Структура("СчетДт,СчетКт",Строка.СчетДт,Строка.СчетКт)).Количество()=0 Тогда
				
				НоваяСтрока=ДанныеОбъекта.ПроводкиДокумента.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДанныеОбъекта.ПроводкиДокумента.Количество()=0 Тогда 
			
			ОбновитьПроводкиПоШаблону(ДанныеОбъекта.ПроводкиДокумента);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТребуетсяПерезаполнение=Ложь;
	
	ПротоколОшибок=ПротоколируемыеСобытияУХ.Завершить(ДокументОбъект.Номер,,?(ЗначениеЗаполнено(ДокументОбъект.Ссылка),ДокументОбъект.Ссылка,ДокументОбъект.ПолучитьСсылкуНового()));	
	
	Если НЕ ПротоколОшибок=Неопределено Тогда
		ПротоколируемыеСобытияУХ.ЗаписатьПротоколВРегистр(?(ЗначениеЗаполнено(ДокументОбъект.Ссылка),ДокументОбъект.Ссылка,ДокументОбъект.ПолучитьСсылкуНового()),,ПротоколОшибок,Организация,ПериодОтчета,Сценарий,ШаблонКорректировки);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоПравилуРасчета()
 
///////////////////////////////////////////////////////////////////////
// Процедуры и функции для расшифровки трансляции проводок

Функция СформироватьСтруктуруПараметровОтчета(ТекущаяПроводка) Экспорт
	
	ЭтоВнешняяИБ=ЗначениеЗаполнено(ИспользуемаяИБ) И (НЕ ИспользуемаяИБ=Справочники.ВнешниеИнформационныеБазы.ТекущаяИБ);

	Если НЕ ЭтоВнешняяИБ Тогда
		
		ДополнительныйОтбор=Новый Массив;
		СтруктураПараметров=Новый Структура;
		
		Для Индекс=1 По 3 Цикл
			
			Если ЗначениеЗаполнено(ТекущаяПроводка["СубконтоДт"+Индекс]) Тогда
				
				СтруктураПараметров.Вставить("СубконтоДт"+Индекс,ТекущаяПроводка["СубконтоДт"+Индекс]);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущаяПроводка["СубконтоКт"+Индекс]) Тогда
				
				СтруктураПараметров.Вставить("СубконтоКт"+Индекс,ТекущаяПроводка["СубконтоКт"+Индекс]);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ИсходныйДокумент) Тогда
			
			СтруктураОтбора=Новый Структура;
			СтруктураОтбора.Вставить("ИмяПараметра","Регистратор");
			СтруктураОтбора.Вставить("ПредставлениеПараметра","Регистратор");
			СтруктураОтбора.Вставить("ПолеБД","Регистратор");
			СтруктураОтбора.Вставить("СпособВычисленияПараметра",	Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение);
			СтруктураОтбора.Вставить("УточнениеСпособаОпределения",	ИсходныйДокумент);
			
			ДополнительныйОтбор.Добавить(СтруктураОтбора);
			
		КонецЕсли;
		
		Для Каждого Элемент ИЗ СтруктураПараметров Цикл
			
			СтруктураОтбора=Новый Структура;
			СтруктураОтбора.Вставить("ИмяПараметра",Элемент.Ключ);
			СтруктураОтбора.Вставить("ПредставлениеПараметра",Элемент.Ключ);
			СтруктураОтбора.Вставить("ПолеБД",Элемент.Ключ);
			СтруктураОтбора.Вставить("СпособВычисленияПараметра",	Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение);
			СтруктураОтбора.Вставить("УточнениеСпособаОпределения",	Элемент.Значение);
			
			ДополнительныйОтбор.Добавить(СтруктураОтбора);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыОтчета=Новый Структура;
	ПараметрыОтчета.Вставить("ДатаНач",				ТекущаяПроводка.Период);
	ПараметрыОтчета.Вставить("ДатаКон",				ТекущаяПроводка.Период);
	ПараметрыОтчета.Вставить("ИспользуемаяИБ",		ИспользуемаяИБ);
	ПараметрыОтчета.Вставить("РегистрБД",			РегистрБухгалтерииИсточник);
	ПараметрыОтчета.Вставить("ПоСубсчетам",Истина);
	ПараметрыОтчета.Вставить("ПоСубсчетамИСубконто",Истина);	
	ПараметрыОтчета.Вставить("ВидОтчета","ОтчетПоПроводкам");
	ПараметрыОтчета.Вставить("Счет",				ТекущаяПроводка.СчетДтИсточник);
	ПараметрыОтчета.Вставить("КоррСчет",			ТекущаяПроводка.СчетКтИсточник);
	
	ОтборПоИзмерениям=Новый Массив;
	
	Если ЭтоВнешняяИБ Тогда
		
		ОтборПоИзмерениям.Добавить(Новый Структура("ИмяПараметра,ПредставлениеПараметра,Значение","Организация","Организация",Организация));
		
	Иначе
		
		НастройкаСоответствия=УправлениеОтчетамиУХ.ПолучитьНастройкуСоответствияРеквизитов(ИспользуемаяИБ.ТипБД,"Организации","Организации","Справочник");
		ОтборПоИзмерениям.Добавить(Новый Структура("ИмяПараметра,ПредставлениеПараметра,Значение,НастройкаСоответствия","Организация","Организация",Организация,НастройкаСоответствия));
		
	КонецЕсли;
		
	ПараметрыОтчета.Вставить("ОтборПоИзмерениям",		ОтборПоИзмерениям);
	ПараметрыОтчета.Вставить("ПолнаяДетализация",		Истина);
	ПараметрыОтчета.Вставить("ФормироватьПриОткрытии",	Истина);
	
	ПараметрыОтчета.Вставить("МассивДополнительныйОтбор",ДополнительныйОтбор);
	ПараметрыОтчета.Вставить("МассивДетализация",	Новый Массив);
	ПараметрыОтчета.Вставить("ОтборПоСубконто",		Новый Массив);
	ПараметрыОтчета.Вставить("МассивПроизводные",	Новый Массив);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

Функция ПолучитьПараметрыОтчетаПоПроводкам(СтруктураРасшифровки) Экспорт
	
	ДокументОбъект=СтруктураРасшифровки.Ключ.ПолучитьОбъект();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ДокументОбъект);
	
	
	
КонецФункции // 

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ДействиеВСледующемПериоде <> Перечисления.ДействияКорректировкиВСледующемПериоде.Сторнировать Тогда
		ПроверяемыеРеквизиты.Удалить();
	КонецЕсли;
	
КонецПроцедуры



///////////////////////////////////////////////////////////////////////

ТипЗначенияЧисло=Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
АнализЧувствительности=Ложь;
ДанныеПараметрикиАктуальны=Ложь;
мРасширеннаяДиагностикаВключена = Ложь;
мПустойВидАналитики=ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка();
ФлагОшибкиИмпорта=Ложь;
ЧислоДопАналитикПроводки=6;
ЧислоДопАналитикПоказателя=6;
ЧислоДопАналитик=6;

ДанныеРасшифровкиСчитаны=Ложь;
ЕстьОбращениеКВИБ=Ложь;

ОбработанныеОперанды=Новый Соответствие;
УправляемыйРежим=Истина;

КэшТаблицаКурсов=Новый ТаблицаЗначений;
КэшТаблицаКурсов.Колонки.Добавить("Валюта");
КэшТаблицаКурсов.Колонки.Добавить("ДатаКурса");
КэшТаблицаКурсов.Колонки.Добавить("ДанныеКурса");

КэшТаблицаКурсов.Индексы.Добавить("Валюта,ДатаКурса");

#КонецЕсли



