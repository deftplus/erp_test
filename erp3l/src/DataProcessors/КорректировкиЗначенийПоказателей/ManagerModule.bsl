#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область Трансляция 

Процедура ПриИзмененииРегистраБухгалтерииТрансляция(Источник, Отказ, РежимЗаписи) Экспорт
	
	// В ЕРПУХ используется процедура общего модуля КорректировкиЗначенийПоказателей32
	
КонецПроцедуры // ПриИзмененииРегистраБухгалтерииТрансляция()

Функция ОбработатьКорректировкиПоПараметрам(ВидКорректировки,
											ПериодСценария, 
											Сценарий, 
											Организация, 
											ШаблонКорректировки, 
											ДатаНачалаРасчетная,
											ДокументКорректировки=Неопределено,
											ПериодОтражения=Неопределено,
											ИсходныйДокумент=Неопределено) Экспорт

   // В ЕРПУХ используется функция общего модуля КорректировкиЗначенийПоказателей32
											
КонецФункции // ОбработатьКорректировкиПоПараметрам() 
	
Функция ПолучитьДанныеУчетнойПолитики(Организация,Сценарий,Период) Экспорт
	
	Возврат КорректировкиЗначенийПоказателей32.ПолучитьДанныеУчетнойПолитики(Организация,Сценарий,Период);
						
КонецФункции // ПолучитьУчетнуюПолитику() 
	
Функция ОбновитьМаркерыПроводок(ТаблицаПроводок) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТаблицаПроводок.СчетДт,
	|	ТаблицаПроводок.СубконтоДт1,
	|	ТаблицаПроводок.СубконтоДт2,
	|	ТаблицаПроводок.СубконтоДт3,
	|	ТаблицаПроводок.Значение,
	|	ТаблицаПроводок.СчетКт,
	|	ТаблицаПроводок.СубконтоКт1,
	|	ТаблицаПроводок.СубконтоКт2,
	|	ТаблицаПроводок.СубконтоКт3,
	|	ТаблицаПроводок.Комментарий,
	|	ТаблицаПроводок.НомерПроводки,
	|	ТаблицаПроводок.ШаблонПроводки,
	|	ТаблицаПроводок.ВидДвижения,
	|	ТаблицаПроводок.РесурсРегистра,
	|	ТаблицаПроводок.ВалютаДт,
	|	ТаблицаПроводок.ВалютаКт,
	|	ТаблицаПроводок.ЗначениеВалютаДт,
	|	ТаблицаПроводок.ЗначениеВалютаКт,
	|	ТаблицаПроводок.КоличествоДт,
	|	ТаблицаПроводок.КоличествоКт,
	|	ТаблицаПроводок.ПодразделениеДт,
	|	ТаблицаПроводок.ПодразделениеКт,
	|	ТаблицаПроводок.НаправлениеДеятельностиДт,
	|	ТаблицаПроводок.НаправлениеДеятельностиКт,
	|	ТаблицаПроводок.Повтор,
	|	ТаблицаПроводок.Маркер
	|ПОМЕСТИТЬ ТаблицаПроводокИсходная
	|ИЗ
	|	&ТаблицаПроводок КАК ТаблицаПроводок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПроводокИсходная.СчетДт,
	|	ТаблицаПроводокИсходная.СубконтоДт1,
	|	ТаблицаПроводокИсходная.СубконтоДт2,
	|	ТаблицаПроводокИсходная.СубконтоДт3,
	|	ТаблицаПроводокИсходная.Значение,
	|	ТаблицаПроводокИсходная.СчетКт,
	|	ТаблицаПроводокИсходная.СубконтоКт1,
	|	ТаблицаПроводокИсходная.СубконтоКт2,
	|	ТаблицаПроводокИсходная.СубконтоКт3,
	|	ТаблицаПроводокИсходная.Комментарий,
	|	ТаблицаПроводокИсходная.НомерПроводки,
	|	ТаблицаПроводокИсходная.ШаблонПроводки,
	|	ТаблицаПроводокИсходная.ВидДвижения,
	|	ТаблицаПроводокИсходная.РесурсРегистра,
	|	ТаблицаПроводокИсходная.ВалютаДт,
	|	ТаблицаПроводокИсходная.ВалютаКт,
	|	ТаблицаПроводокИсходная.ЗначениеВалютаДт,
	|	ТаблицаПроводокИсходная.ЗначениеВалютаКт,
	|	ТаблицаПроводокИсходная.КоличествоДт,
	|	ТаблицаПроводокИсходная.КоличествоКт,
	|	ТаблицаПроводокИсходная.ПодразделениеДт,
	|	ТаблицаПроводокИсходная.ПодразделениеКт,
	|	ТаблицаПроводокИсходная.НаправлениеДеятельностиДт,
	|	ТаблицаПроводокИсходная.НаправлениеДеятельностиКт,
	|	ТаблицаПроводокИсходная.Повтор,
	|	ВЫБОР
	|		КОГДА СчетаДт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Баланс)
	|					И СчетаКт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Баланс)
	|				ИЛИ СчетаДт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.ОПУ)
	|					И СчетаКт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.ОПУ)
	|				ИЛИ СчетаДт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Капитал)
	|					И СчетаКт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Капитал)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.МаркерыПроводок.Рекл)
	|		КОГДА СчетаДт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Баланс)
	|				И СчетаКт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.ОПУ)
	|				И НЕ ТаблицаПроводокИсходная.Повтор
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.МаркерыПроводок.КоррОПУ)
	|		КОГДА СчетаДт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Баланс)
	|				И СчетаКт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.ОПУ)
	|				И ТаблицаПроводокИсходная.Повтор
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.МаркерыПроводок.КоррОПУПовтор)
	|		КОГДА СчетаДт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.ОПУ)
	|				И СчетаКт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Баланс)
	|				И НЕ ТаблицаПроводокИсходная.Повтор
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.МаркерыПроводок.КоррОПУ)
	|		КОГДА СчетаДт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.ОПУ)
	|				И СчетаКт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Баланс)
	|				И ТаблицаПроводокИсходная.Повтор
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.МаркерыПроводок.КоррОПУПовтор)
	|		КОГДА СчетаДт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Баланс)
	|				И СчетаКт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Капитал)
	|				И НЕ ТаблицаПроводокИсходная.Повтор
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.МаркерыПроводок.КоррКапитал)
	|		КОГДА СчетаДт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Баланс)
	|				И СчетаКт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Капитал)
	|				И ТаблицаПроводокИсходная.Повтор
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.МаркерыПроводок.КоррКапиталПовтор)
	|		КОГДА СчетаДт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Капитал)
	|				И СчетаКт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Баланс)
	|				И НЕ ТаблицаПроводокИсходная.Повтор
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.МаркерыПроводок.КоррКапитал)
	|		КОГДА СчетаДт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Капитал)
	|				И СчетаКт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Баланс)
	|				И ТаблицаПроводокИсходная.Повтор
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.МаркерыПроводок.КоррКапиталПовтор)
	|		КОГДА СчетаДт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.ОПУ)
	|				И СчетаКт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Капитал)
	|				И НЕ ТаблицаПроводокИсходная.Повтор
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.МаркерыПроводок.КоррКапитал)
	|		КОГДА СчетаДт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.ОПУ)
	|				И СчетаКт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Капитал)
	|				И ТаблицаПроводокИсходная.Повтор
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.МаркерыПроводок.КоррКапиталПовтор)
	|		КОГДА СчетаДт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Капитал)
	|				И СчетаКт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.ОПУ)
	|				И НЕ ТаблицаПроводокИсходная.Повтор
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.МаркерыПроводок.КоррКапитал)
	|		КОГДА СчетаДт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Капитал)
	|				И СчетаКт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.ОПУ)
	|				И ТаблицаПроводокИсходная.Повтор
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.МаркерыПроводок.КоррКапиталПовтор)
	|		КОГДА (СчетаДт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Баланс)
	|				ИЛИ СчетаКт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Баланс))
	|				И НЕ ТаблицаПроводокИсходная.Повтор
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.МаркерыПроводок.Рекл)
	|		КОГДА (СчетаДт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Баланс)
	|				ИЛИ СчетаКт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Баланс))
	|				И ТаблицаПроводокИсходная.Повтор
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.МаркерыПроводок.РеклПовтор)
	|		КОГДА (СчетаДт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.ОПУ)
	|				ИЛИ СчетаКт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.ОПУ))
	|				И НЕ ТаблицаПроводокИсходная.Повтор
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.МаркерыПроводок.КоррОПУ)
	|		КОГДА (СчетаДт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.ОПУ)
	|				ИЛИ СчетаКт.РазделПланаСчетов = ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.ОПУ))
	|				И ТаблицаПроводокИсходная.Повтор
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.МаркерыПроводок.КоррОПУПовтор)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.МаркерыПроводок.ПустаяСсылка)
	|	КОНЕЦ КАК Маркер
	|ИЗ
	|	ТаблицаПроводокИсходная КАК ТаблицаПроводокИсходная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СчетаБД КАК СчетаДт
	|		ПО ТаблицаПроводокИсходная.СчетДт = СчетаДт.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СчетаБД КАК СчетаКт
	|		ПО ТаблицаПроводокИсходная.СчетКт = СчетаКт.Ссылка";
	
	Запрос.УстановитьПараметр("ТаблицаПроводок",ТаблицаПроводок);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ОбновитьМаркерыПроводок()

Функция ПолучитьИсточникТрансляции() Экспорт
	
	ТекстЗапроса= "ВЫБРАТЬ РАЗРЕШЕННЫЕ Первые 1
	|	ИсточникиДанныхДляРасчетов.Код,
	|	ИсточникиДанныхДляРасчетов.Ссылка,
	|	ИсточникиДанныхДляРасчетов.Наименование,
	|	ИсточникиДанныхДляРасчетов.СпособПолучения,
	|	ИсточникиДанныхДляРасчетов.ТипБД.ВерсияПлатформы КАК ВерсияПлатформы,
	|	ИсточникиДанныхДляРасчетов.ТекстЗапросаМодуля,
	|	ИсточникиДанныхДляРасчетов.ТолькоАналитическиеЗначения,
	|	ИсточникиДанныхДляРасчетов.РесурсРегистра,
	|	ИсточникиДанныхДляРасчетов.ВидИтога,
	|	ИсточникиДанныхДляРасчетов.ДтКт,
	|	ИсточникиДанныхДляРасчетов.ТипЗначения,
	|	ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК Показатель,
	|	ИсточникиДанныхДляРасчетов.ИсточникШаблон КАК ИсточникШаблон,
	|	ЕСТЬNULL(ИсточникиДанныхДляРасчетов.ПотребительРасчета.ТипЗначения,ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийПоказателейОтчетов.Число)) КАК ТипЗначенияПоказателя,
	|	ЕСТЬNULL(ИсточникиДанныхДляРасчетов.ПотребительРасчета.ВидИтога,ЗНАЧЕНИЕ(Перечисление.ВидыИтоговПоказателя.Сумма)) КАК ВидИтогаПоказателя,
	|   ЕСТЬNULL(ИсточникиДанныхДляРасчетов.ПотребительРасчета.ГруппаРаскрытия, ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка)) КАК ГруппаРаскрытия,
	|   ЕСТЬNULL(ИсточникиДанныхДляРасчетов.ПотребительРасчета.ПересчитыватьВалютнуюСумму, ЛОЖЬ) КАК ПоказательПересчитыватьВалютнуюСумму,
	|	ИсточникиДанныхДляРасчетов.ПоказательОтбор,
	|	ИсточникиДанныхДляРасчетов.ГруппаРаскрытияОтбор,";
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		ТекстЗапроса=ТекстЗапроса+"
		|	ИсточникиДанныхДляРасчетов.ПоказательОтбор.Владелец.ВидАналитики"+Индекс+" КАК АналитикаОтчета"+Индекс+",";
	КонецЦикла;
	
	ТекстЗапроса=ТекстЗапроса+"
	
	|	ИсточникиДанныхДляРасчетов.ПоказательОтбор.Код КАК ПоказательОтборКод,
	|	ИсточникиДанныхДляРасчетов.ПоказательОтбор.Владелец КАК ВидОтчетаОтбор,
	|	ЕСТЬNULL(ИсточникиДанныхДляРасчетов.ПоказательОтбор.ЧисловойПоказатель,ИСТИНА) КАК ЧисловойПоказатель,
	|	ЕСТЬNULL(ИсточникиДанныхДляРасчетов.ПоказательОтбор.ГруппаРаскрытия.ЧислоАналитик,0) КАК ЧислоАналитикГруппыРаскрытия,
	|   ЕСТЬNULL(ИсточникиДанныхДляРасчетов.ПоказательОтбор.ПересчитыватьВалютнуюСумму, ЛОЖЬ) КАК ПоказательОтборПересчитыватьВалютнуюСумму,
	|	ИсточникиДанныхДляРасчетов.ТаблицаПараметровОтбораБД.(
	|		ПолеБД,
	|		ИмяПараметра,
	|		НаименованиеБД,
	|		СпособВычисленияПараметра,
	|		ЗначениеДляПроверки,
	|		ТипРасчета,
	|       НастройкаСоответствия,
	|       ТаблицаАналитикиВИБ
	|	) КАК ТаблицаПараметровОтбораБД,
	|	ИсточникиДанныхДляРасчетов.УточненияСпособовОпределения.(
	|		ПолеБД,
	|		ИмяПараметра,
	|		Значение,
	|		Представление,
	|		Пометка,
	|		Тип) КАК УточненияСпособовОпределения,
	|	ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса.(
	|		Поле,
	|		Синоним,
	|		АналитикаОперанда КАК АналитикаОперанда,
	|		ЕстьNULL(АналитикаОперанда.СоздаватьПриНеудачномПоискеПриИмпорте,Истина) КАК СоздаватьНовые,
	|		ЕстьNULL(АналитикаОперанда.РазделятьПоОрганизациям,Ложь) КАК РазделятьПоОрганизациям,
	|		ЕстьNULL(АналитикаОперанда.ОбновлятьРеквизитыПриИмпорте,Истина) КАК ОбновлятьРеквизитыПриИмпорте,
	|		КодАналитики,
	|       НастройкаСоответствия,
	|       РеквизитАналитики,
	|       ТаблицаАналитики,
	|       ТаблицаАналитикиВИБ,
	|       НеИспользоватьДляСинхронизации,
	|       СпособЗаполнения,
	|       ФиксированноеЗначение
	|	) КАК ПравилаИспользованияПолейЗапроса,
	|	ИсточникиДанныхДляРасчетов.Счет,
	|	ИсточникиДанныхДляРасчетов.КоррСчет,
	|	ИсточникиДанныхДляРасчетов.РегистрБД,
	|	ИсточникиДанныхДляРасчетов.ТекстОтбора,
	|	ИсточникиДанныхДляРасчетов.ТаблицаADO,
	|	ВЫБОР Когда (НЕ ИсточникиДанныхДляРасчетов.ПланСчетовБД=Значение(Справочник.ПланыСчетовБД.ПустаяСсылка))
	|	Тогда ИсточникиДанныхДляРасчетов.ПланСчетовБД 
	|   Иначе ЕСТЬNULL(ИсточникиДанныхДляРасчетов.РегистрБД.ПланСчетов,Неопределено) Конец КАК ПланСчетов,
	|	ИсточникиДанныхДляРасчетов.СпособИспользования,
	|	ИсточникиДанныхДляРасчетов.ПоказательТекущегоОтчета
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	(НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления)
	|	И ИсточникиДанныхДляРасчетов.НазначениеРасчетов=&НазначениеРасчетов
	|	И (НЕ ИсточникиДанныхДляРасчетов.ЕстьНестандартныеОтборы)";
		
	Возврат ТекстЗапроса;
			
КонецФункции // ПолучитьИсточникТрансляции()

Функция СформироватьТекстЗапросаКДвижениямССубконто(РегистрБухгалтерии,ТекстОтбораДт,ТекстОтбораКт,ИспользуемаяИБ,ПоРегистратору=Ложь,ОтборПоРегистратору=Ложь) Экспорт
	
	ДополнениеКода=?(НЕ ТекущаяИБ(ИспользуемаяИБ),".Код","");
	
	ТекстРесурсы="";
	ТекстОтбор="";
	
	Для Каждого Ресурс ИЗ РегистрБухгалтерии.Ресурсы Цикл
		
		Если Ресурс.Балансовый Тогда
			ТекстРесурсы=ТекстРесурсы+",
			|СУММА("+Ресурс.Имя+") КАК "+Ресурс.Имя;
		Иначе
			ТекстРесурсы=ТекстРесурсы+",
			|СУММА("+Ресурс.Имя+"Дт) КАК "+Ресурс.Имя+"Дт,
			|СУММА("+Ресурс.Имя+"Кт) КАК "+Ресурс.Имя+"Кт";
		КонецЕсли;
		
	КонецЦикла;
	
	ГдеЗапрос    = "(Регистратор).*,";
	ТекстЗапроса = "ВЫБРАТЬ "+Сред(ТекстРесурсы,2)+" {ВЫБРАТЬ Период,Регистратор.*, СчетДт.*,СчетКт.*";
				
	// Формирование текста запроса для измерений регистра бухгалтерии.

	Для Каждого Элемент Из РегистрБухгалтерии.Измерения Цикл
		
		Если НЕ Элемент.Балансовый Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|" + Элемент.Имя + "Дт.*, 
			|" + Элемент.Имя + "Кт.*";
			ГдеЗапрос    = ГдеЗапрос + ",
			|(" + Элемент.Имя + "Дт).*,
			|(" + Элемент.Имя + "Кт).*";
		Иначе
			ТекстЗапроса = ТекстЗапроса + ",
			|" + Элемент.Имя + ".*";
			ГдеЗапрос    = ГдеЗапрос + "
			|(" + Элемент.Имя + ").*";
		КонецЕсли;
		
	КонецЦикла;
	
	// Формирование текста запроса для аналитик счета.
	Для Инд = 1 По РегистрБухгалтерии.ПланСчетов.МаксимальноеКоличествоСубконто Цикл
		
		ТекстЗапроса = ТекстЗапроса + ",
		|СубконтоДт" + Инд + ".*, 
		|СубконтоКт" + Инд + ".*";
		ГдеЗапрос    = ГдеЗапрос + ",
		|(СубконтоДт" + Инд + ").*,
		|(СубконтоКт" + Инд + ").*";
		
	КонецЦикла;
		
	ТекстЗапроса=ТекстЗапроса+"} ИЗ  
	|РегистрБухгалтерии."+ РегистрБухгалтерии.Наименование + ".ДвиженияССубконто({(&ДатаНач)}, {(&ДатаКон)},СчетДт"+ДополнениеКода+" В (&СчетДт)
				|И СчетКт"+ДополнениеКода+" В (&СчетКт) И Активность "+?(ОтборПоРегистратору," И Регистратор=&Регистратор","")+",,)";
	
	Если НЕ ПустаяСтрока(ТекстОтбораДт) Тогда
		
		ТекстОтбор=ТекстОтбор+" И "+ТекстОтбораДт;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОтбораКт) Тогда
		
		ТекстОтбор=ТекстОтбор+" И "+ТекстОтбораКт;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОтбор) Тогда
		
		ТекстЗапроса=ТекстЗапроса+"
		|ГДЕ"+Сред(ТекстОтбор,3);
		
	КонецЕсли;
			
	Возврат ТекстЗапроса;	
	
КонецФункции // СформироватьТекстЗапросаДляТрансляции()

Процедура ДобавитьТаблицуОтборомПоРегистратору(ДанныеОбъекта,ПравилаВычисленияПараметров) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.ИсходныйДокумент) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрока=ПравилаВычисленияПараметров.Добавить();
	НоваяСтрока.ИмяПараметра=		"Регистратор";
	НоваяСтрока.НаименованиеБД=		"Регистратор";
	НоваяСтрока.ПолеБД=				"Регистратор";
	НоваяСтрока.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
	НоваяСтрока.УточнениеСпособаОпределения=ДанныеОбъекта.ИсходныйДокумент;	
	
КонецПроцедуры // ДобавитьТаблицуОтборомПоРегистратору()

Функция ТекущаяИБ(ИспользуемаяИБ) Экспорт
	
	Возврат (НЕ ЗначениеЗаполнено(ИспользуемаяИБ)) 
	ИЛИ ИспользуемаяИБ=Справочники.ВнешниеИнформационныеБазы.ТекущаяИБ
	ИЛИ ИспользуемаяИБ.ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ; 
		
КонецФункции // ТекущаяИБ() 

Функция ПолучитьТаблицуКорреспонденций(ДанныеОбъекта)
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("НазначениеРасчетов",ДанныеОбъекта.ПравилоОбработки);
			
	//////////////////////////////////////////////////////////////////////////////////////////////
	// Получаем все корреспонденции счетов за период
	
	Запрос.Текст=Обработки.КорректировкиЗначенийПоказателей.ПолучитьИсточникТрансляции();
	
	мОперанды=Запрос.Выполнить().Выгрузить();
	
	// обрезаем коды
	мОперанды.Колонки.Код.Имя = "Имя";
	мОперанды.Колонки.Добавить("Код");
	
	Для Каждого Стр Из мОперанды Цикл
		Стр.Код = СокрЛП(Стр.Имя);
	КонецЦикла;
	
	мОперанды.Колонки.Удалить(мОперанды.Колонки.Имя);	
	мОперанды.Индексы.Добавить("Код");
	
	мОперанды.Колонки.Добавить("АналитикВидаОтчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1,0));
	мОперанды.Колонки.Добавить("Ресурс",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	мОперанды.Колонки.Добавить("ПравилаВычисленияПараметровЗапроса");
	
	Для Каждого Операнд ИЗ мОперанды Цикл
		
		Операнд.ТекстЗапросаМодуля="ВЫБРАТЬ Различные СчетДт,СчетКт {ВЫБРАТЬ СчетДт.*,СчетКт.*,Регистратор.*} 
		|ИЗ РегистрБухгалтерии."+ ДанныеОбъекта.РегистрБухгалтерииИсточник + ".ДвиженияССубконто({&ДатаНач}, {&ДатаКон},Активность"+?(ЗначениеЗаполнено(ДанныеОбъекта.ИсходныйДокумент)," И Регистратор=&Регистратор","")+?(ЗначениеЗаполнено(Операнд.ТекстОтбора)," И "+Операнд.ТекстОтбора,"")+")";
		Операнд.ПравилаИспользованияПолейЗапроса.Очистить();
		
	КонецЦикла;
	
	ОписаниеТиповСтрока			= ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(Метаданные.Справочники.СчетаБД.ДлинаКода);
	
	ТаблицаСчетов=Новый ТаблицаЗначений;	
	ТаблицаСчетов.Колонки.Добавить("СчетДтИсточникКод",	ОписаниеТиповСтрока);
	ТаблицаСчетов.Колонки.Добавить("СчетКтИсточникКод",	ОписаниеТиповСтрока);
	
	ДанныеРасчета=УправлениеОтчетамиУХ.ПодготовитьОперандыДляПолученияДанных(мОперанды,Ложь,,,,Ложь);
	
	Для Каждого СтрЗапрос ИЗ ДанныеРасчета.мТабПоказателиЗапросы Цикл
		
		Если ТекущаяИБ(ДанныеОбъекта.ИспользуемаяИБ) Тогда
			
			ДобавитьТаблицуОтборомПоРегистратору(ДанныеОбъекта,СтрЗапрос.ПравилаВычисленияПараметров);
		
			ТаблицаДанных=УправлениеОтчетамиУХ.ПолучитьТаблицуПоИсточникуВнутрРегистрНакопления(ДанныеОбъекта,СтрЗапрос);
			
			Для Каждого Строка ИЗ ТаблицаДанных Цикл
				
				НоваяСтрока=ТаблицаСчетов.Добавить();
				НоваяСтрока.СчетДтИсточникКод		= Строка.Счет;
				НоваяСтрока.СчетКтИсточникКод		= Строка.КоррСчет;
				
			КонецЦикла;	
			
		Иначе
			
			СтруктураЗапроса 	= РасширениеИнтеграцииУХ.ПодготовитьСтруктуруЗапроса(ДанныеОбъекта,СтрЗапрос);	
			ТаблицаДанных		= РасширениеИнтеграцииУХ.ПолучитьТаблицуДанныхПоЗапросу(СтруктураЗапроса);
			
			Для Каждого Строка ИЗ ТаблицаДанных Цикл
				
				НоваяСтрока=ТаблицаСчетов.Добавить();
				НоваяСтрока.СчетДтИсточникКод		= Строка.СчетКод;
				НоваяСтрока.СчетКтИсточникКод		= Строка.КоррСчетКод;
				
			КонецЦикла;
				
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТаблицаСчетов;
	
КонецФункции // ПолучитьТаблицуКорреспонденций() 

Процедура ВыполнитьТрансляциюПроводок(ДанныеОбъекта,ПроводкиДокумента,ТаблицаСчетов=Неопределено,Дата=Неопределено,ПоРегистратору=Ложь) Экспорт
	
	Если ТаблицаСчетов=Неопределено Тогда
		
		ТаблицаСчетов=ПолучитьТаблицуКорреспонденций(ДанныеОбъекта);
		
	КонецЕсли;  
			
	//////////////////////////////////////////////////////////////////////////////////////////////
	// Определяем для полученных корреспонденций настройки соответствия и правила трансляции
	// дебетовой и кредитовой стороны проводки
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТаблицаСчетов.СчетДтИсточникКод,
	|	ТаблицаСчетов.СчетКтИсточникКод
	|ПОМЕСТИТЬ ТаблицаСчетов
	|ИЗ
	|	&ТаблицаСчетов КАК ТаблицаСчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствияСчетовДляТрансляции.Ссылка,
	|	СоответствияСчетовДляТрансляции.СчетИсточник,
	|	СоответствияСчетовДляТрансляции.СчетИсточник.Код КАК СчетИсточникКод,
	|	СоответствияСчетовДляТрансляции.СчетПриемник,
	|	СоответствияСчетовДляТрансляции.СчетПриемник.Код КАК СчетПриемникКод,
	|	СоответствияСчетовДляТрансляции.КоррСчетИсточник,
	|	СоответствияСчетовДляТрансляции.КоррСчетИсточник.Код КАК КоррСчетИсточникКод,
	|	НастройкиПравилТрансляции.ИспользованиеДт,
	|	НастройкиПравилТрансляции.ИспользованиеКт
	|ПОМЕСТИТЬ ИсключенияПоКорреспонденции
	|ИЗ
	|	Справочник.СоответствияСчетовДляТрансляции КАК СоответствияСчетовДляТрансляции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравилТрансляции КАК НастройкиПравилТрансляции
	|		ПО СоответствияСчетовДляТрансляции.Ссылка = НастройкиПравилТрансляции.СоответствиеСчетов
	|ГДЕ
	|	СоответствияСчетовДляТрансляции.Владелец = &ШаблонТрансляции
	|	И СоответствияСчетовДляТрансляции.СчетПриемник.ДляИсключенийПриТрансляции
	|	И НЕ СоответствияСчетовДляТрансляции.КоррСчетИсточник = ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствияСчетовДляТрансляции.Ссылка,
	|	СоответствияСчетовДляТрансляции.СчетИсточник,
	|	СоответствияСчетовДляТрансляции.СчетИсточник.Код КАК СчетИсточникКод,
	|	СоответствияСчетовДляТрансляции.СчетПриемник,
	|	СоответствияСчетовДляТрансляции.СчетПриемник.Код КАК СчетПриемникКод,
	|	СоответствияСчетовДляТрансляции.КоррСчетИсточник,
	|	СоответствияСчетовДляТрансляции.КоррСчетИсточник.Код КАК КоррСчетИсточникКод,
	|	НастройкиПравилТрансляции.ИспользованиеДт,
	|	НастройкиПравилТрансляции.ИспользованиеКт
	|ПОМЕСТИТЬ ТрансляцияПоКорреспонденции
	|ИЗ
	|	Справочник.СоответствияСчетовДляТрансляции КАК СоответствияСчетовДляТрансляции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравилТрансляции КАК НастройкиПравилТрансляции
	|		ПО СоответствияСчетовДляТрансляции.Ссылка = НастройкиПравилТрансляции.СоответствиеСчетов
	|ГДЕ
	|	СоответствияСчетовДляТрансляции.Владелец = &ШаблонТрансляции
	|	И НЕ СоответствияСчетовДляТрансляции.СчетПриемник.ДляИсключенийПриТрансляции
	|	И НЕ СоответствияСчетовДляТрансляции.КоррСчетИсточник = ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствияСчетовДляТрансляции.Ссылка,
	|	СоответствияСчетовДляТрансляции.СчетИсточник,
	|	СоответствияСчетовДляТрансляции.СчетИсточник.Код КАК СчетИсточникКод,
	|	СоответствияСчетовДляТрансляции.СчетПриемник,
	|	СоответствияСчетовДляТрансляции.СчетПриемник.Код КАК СчетПриемникКод,
	|	СоответствияСчетовДляТрансляции.КоррСчетИсточник,
	|	СоответствияСчетовДляТрансляции.КоррСчетИсточник.Код КАК КоррСчетИсточникКод,
	|	НастройкиПравилТрансляции.ИспользованиеДт,
	|	НастройкиПравилТрансляции.ИспользованиеКт
	|ПОМЕСТИТЬ СоотвествияТрансляция
	|ИЗ
	|	Справочник.СоответствияСчетовДляТрансляции КАК СоответствияСчетовДляТрансляции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравилТрансляции КАК НастройкиПравилТрансляции
	|		ПО СоответствияСчетовДляТрансляции.Ссылка = НастройкиПравилТрансляции.СоответствиеСчетов
	|ГДЕ
	|	СоответствияСчетовДляТрансляции.Владелец = &ШаблонТрансляции
	|	И СоответствияСчетовДляТрансляции.КоррСчетИсточник = ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСчетов.СчетДтИсточникКод,
	|	ВЫБОР
	|		КОГДА НЕ ИсключенияПоКорреспонденцииДт.СчетИсточник ЕСТЬ NULL 
	|			ТОГДА ИсключенияПоКорреспонденцииДт.СчетИсточник
	|		КОГДА НЕ ТрансляцияПоКорреспонденцииДт.СчетИсточник ЕСТЬ NULL 
	|			ТОГДА ТрансляцияПоКорреспонденцииДт.СчетИсточник
	|		ИНАЧЕ СоответствияСчетовДт.СчетИсточник
	|	КОНЕЦ КАК СчетДтИсточник,
	|	ВЫБОР
	|		КОГДА НЕ ИсключенияПоКорреспонденцииДт.СчетПриемник ЕСТЬ NULL 
	|			ТОГДА ИсключенияПоКорреспонденцииДт.СчетПриемник
	|		КОГДА НЕ ТрансляцияПоКорреспонденцииДт.СчетПриемник ЕСТЬ NULL 
	|			ТОГДА ТрансляцияПоКорреспонденцииДт.СчетПриемник
	|		ИНАЧЕ СоответствияСчетовДт.СчетПриемник
	|	КОНЕЦ КАК СчетДтПриемник,
	|	ТаблицаСчетов.СчетКтИсточникКод,
	|	ВЫБОР
	|		КОГДА НЕ ИсключенияПоКорреспонденцииКт.СчетИсточник ЕСТЬ NULL 
	|			ТОГДА ИсключенияПоКорреспонденцииКт.СчетИсточник
	|		КОГДА НЕ ТрансляцияПоКорреспонденцииКт.СчетИсточник ЕСТЬ NULL 
	|			ТОГДА ТрансляцияПоКорреспонденцииКт.СчетИсточник
	|		ИНАЧЕ СоответствияСчетовКт.СчетИсточник
	|	КОНЕЦ КАК СчетКтИсточник,
	|	ВЫБОР
	|		КОГДА НЕ ИсключенияПоКорреспонденцииКт.СчетПриемник ЕСТЬ NULL 
	|			ТОГДА ИсключенияПоКорреспонденцииКт.СчетПриемник
	|		КОГДА НЕ ТрансляцияПоКорреспонденцииКт.СчетПриемник ЕСТЬ NULL 
	|			ТОГДА ТрансляцияПоКорреспонденцииКт.СчетПриемник
	|		ИНАЧЕ СоответствияСчетовКт.СчетПриемник
	|	КОНЕЦ КАК СчетКтПриемник,
	|	ВЫБОР
	|		КОГДА НЕ ИсключенияПоКорреспонденцииДт.Ссылка ЕСТЬ NULL 
	|			ТОГДА ИсключенияПоКорреспонденцииДт.Ссылка
	|		КОГДА НЕ ТрансляцияПоКорреспонденцииДт.Ссылка ЕСТЬ NULL 
	|			ТОГДА ТрансляцияПоКорреспонденцииДт.Ссылка
	|		ИНАЧЕ СоответствияСчетовДт.Ссылка
	|	КОНЕЦ КАК СоответствиеДт,
	|	ВЫБОР
	|		КОГДА НЕ ИсключенияПоКорреспонденцииКт.Ссылка ЕСТЬ NULL 
	|			ТОГДА ИсключенияПоКорреспонденцииКт.Ссылка
	|		КОГДА НЕ ТрансляцияПоКорреспонденцииКт.Ссылка ЕСТЬ NULL 
	|			ТОГДА ТрансляцияПоКорреспонденцииКт.Ссылка
	|		ИНАЧЕ СоответствияСчетовКт.Ссылка
	|	КОНЕЦ КАК СоответствиеКт
	|ПОМЕСТИТЬ ТаблицаСчетовСоответствия
	|ИЗ
	|	ТаблицаСчетов КАК ТаблицаСчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоотвествияТрансляция КАК СоответствияСчетовДт
	|		ПО ТаблицаСчетов.СчетДтИсточникКод = СоответствияСчетовДт.СчетИсточникКод
	|			И (СоответствияСчетовДт.ИспользованиеДт)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоотвествияТрансляция КАК СоответствияСчетовКт
	|		ПО ТаблицаСчетов.СчетКтИсточникКод = СоответствияСчетовКт.СчетИсточникКод
	|			И (СоответствияСчетовКт.ИспользованиеКт)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсключенияПоКорреспонденции КАК ИсключенияПоКорреспонденцииДт
	|		ПО ТаблицаСчетов.СчетДтИсточникКод = ИсключенияПоКорреспонденцииДт.СчетИсточникКод
	|			И ТаблицаСчетов.СчетКтИсточникКод = ИсключенияПоКорреспонденцииДт.КоррСчетИсточникКод
	|			И (ИсключенияПоКорреспонденцииДт.ИспользованиеДт)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсключенияПоКорреспонденции КАК ИсключенияПоКорреспонденцииКт
	|		ПО ТаблицаСчетов.СчетКтИсточникКод = ИсключенияПоКорреспонденцииКт.СчетИсточникКод
	|			И ТаблицаСчетов.СчетДтИсточникКод = ИсключенияПоКорреспонденцииКт.КоррСчетИсточникКод
	|			И (ИсключенияПоКорреспонденцииКт.ИспользованиеКт)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТрансляцияПоКорреспонденции КАК ТрансляцияПоКорреспонденцииДт
	|		ПО ТаблицаСчетов.СчетДтИсточникКод = ТрансляцияПоКорреспонденцииДт.СчетИсточникКод
	|			И ТаблицаСчетов.СчетКтИсточникКод = ТрансляцияПоКорреспонденцииДт.КоррСчетИсточникКод
	|			И (ТрансляцияПоКорреспонденцииДт.ИспользованиеДт)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТрансляцияПоКорреспонденции КАК ТрансляцияПоКорреспонденцииКт
	|		ПО ТаблицаСчетов.СчетКтИсточникКод = ТрансляцияПоКорреспонденцииКт.СчетИсточникКод
	|			И ТаблицаСчетов.СчетДтИсточникКод = ТрансляцияПоКорреспонденцииКт.КоррСчетИсточникКод
	|			И (ТрансляцияПоКорреспонденцииКт.ИспользованиеКт)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСчетовСоответствия.СчетДтИсточникКод,
	|	ТаблицаСчетовСоответствия.СчетДтИсточник,
	|	ТаблицаСчетовСоответствия.СчетДтПриемник,
	|	ТаблицаСчетовСоответствия.СчетКтИсточникКод,
	|	ТаблицаСчетовСоответствия.СчетКтИсточник,
	|	ТаблицаСчетовСоответствия.СчетКтПриемник,
	|	ТаблицаСчетовСоответствия.СоответствиеДт,
	|	ТаблицаСчетовСоответствия.СоответствиеКт,
	|	ПравилаДт.Ссылка КАК ПравилоДт,
	|	ПравилаКт.Ссылка КАК ПравилоКт,
	|	ЕСТЬNULL(НастройкиПравилТрансляцииДт.ИспользованиеДт, ЛОЖЬ) КАК ИспользованиеДт,
	|	ЕСТЬNULL(НастройкиПравилТрансляцииКт.ИспользованиеКт, ЛОЖЬ) КАК ИспользованиеКт
	|ИЗ
	|	ТаблицаСчетовСоответствия КАК ТаблицаСчетовСоответствия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиДанныхДляРасчетов КАК ПравилаДт
	|		ПО ТаблицаСчетовСоответствия.СоответствиеДт = ПравилаДт.ПотребительРасчета
	|			И (ПравилаДт.НазначениеРасчетов = &ПравилоОбработки)
	|			И (ПравилаДт.ТрансляцияДебет)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиДанныхДляРасчетов КАК ПравилаКт
	|		ПО ТаблицаСчетовСоответствия.СоответствиеКт = ПравилаКт.ПотребительРасчета
	|			И (ПравилаКт.НазначениеРасчетов = &ПравилоОбработки)
	|			И (ПравилаКт.ТрансляцияКредит)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравилТрансляции КАК НастройкиПравилТрансляцииДт
	|		ПО ТаблицаСчетовСоответствия.СоответствиеДт = НастройкиПравилТрансляцииДт.СоответствиеСчетов
	|			И (НастройкиПравилТрансляцииДт.ШаблонТрансляции = &ШаблонТрансляции)
	|			И (НастройкиПравилТрансляцииДт.ИспользованиеДт)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравилТрансляции КАК НастройкиПравилТрансляцииКт
	|		ПО ТаблицаСчетовСоответствия.СоответствиеКт = НастройкиПравилТрансляцииКт.СоответствиеСчетов
	|			И (НастройкиПравилТрансляцииКт.ШаблонТрансляции = &ШаблонТрансляции)
	|			И (НастройкиПравилТрансляцииКт.ИспользованиеКт)";
		
	Запрос.УстановитьПараметр("ТаблицаСчетов",ТаблицаСчетов);
	Запрос.УстановитьПараметр("ШаблонТрансляции",ДанныеОбъекта.ШаблонКорректировки);
	Запрос.УстановитьПараметр("ПравилоОбработки",ДанныеОбъекта.ПравилоОбработки);
		
	РабочаяТаблица=Запрос.Выполнить().Выгрузить();
	
	мОписаниеТиповБулево=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево();
	
	//////////////////////////////////////////////////////////////////////////////////////////////
	// Проверяем:
	//	 - актуальность справочников "СчетаБД" для источника и приемника
	//	 - достаточность настроек для трансляции всех корреспонденций, 
	//	при недостаточности - формируем протокол
		
	РабочаяТаблица.Колонки.Добавить("Транслировать",мОписаниеТиповБулево);
	
	ТаблицаСчетов.Колонки.Добавить("ЕстьСоответствиеДт",	мОписаниеТиповБулево);
	ТаблицаСчетов.Колонки.Добавить("ЕстьСоответствиеКт",	мОписаниеТиповБулево);
	ТаблицаСчетов.Колонки.Добавить("ЕстьПравилоДт",			мОписаниеТиповБулево);
	ТаблицаСчетов.Колонки.Добавить("ЕстьПравилоКт",			мОписаниеТиповБулево);
	ТаблицаСчетов.Колонки.Добавить("ЕстьСчетБДИсточникДт",	мОписаниеТиповБулево);
	ТаблицаСчетов.Колонки.Добавить("ЕстьСчетБДИсточникКт",	мОписаниеТиповБулево);
	ТаблицаСчетов.Колонки.Добавить("ВозможнаТрансляция",	мОписаниеТиповБулево);
	
	Для Каждого СтрокаСчет ИЗ ТаблицаСчетов Цикл
		
		МассивСоответствий=РабочаяТаблица.НайтиСтроки(Новый Структура("СчетДтИсточникКод,СчетКтИсточникКод",СтрокаСчет.СчетДтИсточникКод,СтрокаСчет.СчетКтИсточникКод));
		
		Для Каждого РабочаяСтрока ИЗ МассивСоответствий Цикл
			
			Если ЗначениеЗаполнено(РабочаяСтрока.СоответствиеДт) Тогда
				
				СтрокаСчет.ЕстьСоответствиеДт=Истина;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РабочаяСтрока.СоответствиеКт) Тогда
				
				СтрокаСчет.ЕстьСоответствиеКт=Истина;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РабочаяСтрока.ПравилоДт) Тогда
				
				СтрокаСчет.ЕстьПравилоДт=Истина;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РабочаяСтрока.ПравилоКт) Тогда
				
				СтрокаСчет.ЕстьПравилоКт=Истина;
				
			КонецЕсли;
						
			РабочаяСтрока.Транслировать=(ЗначениеЗаполнено(РабочаяСтрока.СоответствиеДт) 
										И ЗначениеЗаполнено(РабочаяСтрока.СоответствиеКт)
										И ЗначениеЗаполнено(РабочаяСтрока.ПравилоДт)
										И ЗначениеЗаполнено(РабочаяСтрока.ПравилоКт));
										
		КонецЦикла;

		СтрокаСчет.ВозможнаТрансляция=(СтрокаСчет.ЕстьСоответствиеДт 
										И СтрокаСчет.ЕстьСоответствиеКт 
										И СтрокаСчет.ЕстьПравилоДт 
										И СтрокаСчет.ЕстьПравилоКт);
		
	КонецЦикла;	
	
	// Сформируем протокол проверки настроек перед трансляцией
	
	МассивОшибочные=ТаблицаСчетов.НайтиСтроки(Новый Структура("ВозможнаТрансляция",Ложь));
	
	Для Каждого Строка ИЗ МассивОшибочные Цикл
		
		ТекстОшибки=СтрШаблон(Нстр("ru = 'Корреспонденция Дт %1 - Кт %2: '"), Строка.СчетДтИсточникКод, Строка.СчетКтИсточникКод);
				
		Если Не Строка.ЕстьСоответствиеДт Тогда
			
			ТекстОшибки=СтрШаблон(Нстр("ru = '%1	не найдено соответствие для счета %2'"), ТекстОшибки+Символы.ПС, 
				Строка.СчетДтИсточникКод);
			
		КонецЕсли;
		
		Если Не Строка.ЕстьСоответствиеКт Тогда
			
			ТекстОшибки=СтрШаблон(Нстр("ru = '%1	не найдено соответствие для счета %2'"), ТекстОшибки+Символы.ПС, 
				Строка.СчетКтИсточникКод);
			
		КонецЕсли;
		
		Если Строка.ЕстьСоответствиеДт И (НЕ Строка.ЕстьПравилоДт) Тогда
			
			ТекстОшибки=СтрШаблон(Нстр("ru = '%1	не найдено правило трансляции по дебету.'"), ТекстОшибки+Символы.ПС);
			
		КонецЕсли;
		
		Если Строка.ЕстьСоответствиеКт И (НЕ Строка.ЕстьПравилоКт) Тогда
			
			ТекстОшибки=СтрШаблон(Нстр("ru = '%1	не найдено правило трансляции по кредиту.'"), ТекстОшибки+Символы.ПС);
			
		КонецЕсли;
		
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("КорректировкиЗначенийПоказателей.ВыполнитьТрансляциюПроводок.1",,,ТекстОшибки);
		
	КонецЦикла;
	
	//////////////////////////////////////////////////////////////////////////////////////////////
	// Получаем правила отбора и сопоставления полей для каждой корреспонденции
		
	ПроводкиДокумента.Очистить();
	ТаблицаТрансляции=РабочаяТаблица.Скопировать(Новый Структура("Транслировать",Истина));
	
	Запрос.Текст="ВЫБРАТЬ
	             |	ТаблицаТрансляции.СчетДтИсточникКод КАК СчетДтИсточникКод,
	             |	ТаблицаТрансляции.СчетДтИсточник КАК СчетДтИсточник,
	             |	ТаблицаТрансляции.СчетДтПриемник КАК СчетДтПриемник,
	             |	ТаблицаТрансляции.СчетКтИсточникКод КАК СчетКтИсточникКод,
	             |	ТаблицаТрансляции.СчетКтИсточник КАК СчетКтИсточник,
	             |	ТаблицаТрансляции.СчетКтПриемник КАК СчетКтПриемник,
	             |	ТаблицаТрансляции.СоответствиеДт КАК СоответствиеДт,
	             |	ТаблицаТрансляции.СоответствиеКт КАК СоответствиеКт,
	             |	ТаблицаТрансляции.ПравилоДт КАК ПравилоДт,
	             |	ТаблицаТрансляции.ПравилоКт КАК ПравилоКт
	             |ПОМЕСТИТЬ ТаблицаТрансляции
	             |ИЗ
	             |	&ТаблицаТрансляции КАК ТаблицаТрансляции
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ТаблицаТрансляции.СчетДтИсточникКод КАК СчетДтИсточникКод,
	             |	ТаблицаТрансляции.СчетДтИсточник КАК СчетДтИсточник,
	             |	ТаблицаТрансляции.СчетДтПриемник КАК СчетДтПриемник,
	             |	ТаблицаТрансляции.СчетКтИсточникКод КАК СчетКтИсточникКод,
	             |	ТаблицаТрансляции.СчетКтИсточник КАК СчетКтИсточник,
	             |	ТаблицаТрансляции.СчетКтПриемник КАК СчетКтПриемник,
	             |	ТаблицаТрансляции.СоответствиеДт КАК СоответствиеДт,
	             |	ТаблицаТрансляции.СоответствиеКт КАК СоответствиеКт,
	             |	ТаблицаТрансляции.ПравилоДт КАК ПравилоДт,
	             |	ТаблицаТрансляции.ПравилоКт КАК ПравилоКт,
	             |	ИсточникиДанныхДт.ПравилаИспользованияПолейЗапроса.(
	             |		Ссылка КАК Ссылка,
	             |		НомерСтроки КАК НомерСтроки,
	             |		Поле КАК Поле,
	             |		Синоним КАК Синоним,
	             |		АналитикаОперанда КАК АналитикаОперанда,
	             |		ЕСТЬNULL(ИсточникиДанныхДт.ПравилаИспользованияПолейЗапроса.АналитикаОперанда.СоздаватьПриНеудачномПоискеПриИмпорте, ИСТИНА) КАК СоздаватьНовые,
	             |		ЕСТЬNULL(ИсточникиДанныхДт.ПравилаИспользованияПолейЗапроса.АналитикаОперанда.РазделятьПоОрганизациям, ЛОЖЬ) КАК РазделятьПоОрганизациям,
	             |		ЕСТЬNULL(ИсточникиДанныхДт.ПравилаИспользованияПолейЗапроса.АналитикаОперанда.ОбновлятьРеквизитыПриИмпорте, ИСТИНА) КАК ОбновлятьРеквизитыПриИмпорте,
	             |		КодАналитики КАК КодАналитики,
	             |		НастройкаСоответствия КАК НастройкаСоответствия,
	             |		РеквизитАналитики КАК РеквизитАналитики,
	             |		ТаблицаАналитики КАК ТаблицаАналитики,
	             |		ТаблицаАналитикиВИБ КАК ТаблицаАналитикиВИБ,
	             |		НеИспользоватьДляСинхронизации КАК НеИспользоватьДляСинхронизации,
	             |		СпособЗаполнения КАК СпособЗаполнения,
	             |		ФиксированноеЗначение КАК ФиксированноеЗначение
	             |	) КАК ПравилаИспользованияПолейЗапросаДт,
	             |	ИсточникиДанныхДт.ТаблицаПараметровОтбораБД.(
	             |		Ссылка КАК Ссылка,
	             |		НомерСтроки КАК НомерСтроки,
	             |		ПолеБД КАК ПолеБД,
	             |		НаименованиеБД КАК НаименованиеБД,
	             |		СпособВычисленияПараметра КАК СпособВычисленияПараметра,
	             |		ЗначениеДляПроверки КАК ЗначениеДляПроверки,
	             |		ТипРасчета КАК ТипРасчета,
	             |		Реквизит КАК Реквизит,
	             |		СмещениеПериода КАК СмещениеПериода,
	             |		НастройкаСоответствия КАК НастройкаСоответствия,
	             |		ТаблицаАналитикиВИБ КАК ТаблицаАналитикиВИБ,
	             |		ТекстМодуля КАК ТекстМодуля,
	             |		ИдентификаторСтроки КАК ИдентификаторСтроки,
	             |		ИдентификаторРодителя КАК ИдентификаторРодителя,
	             |		ИмяПараметра КАК ИмяПараметра
	             |	) КАК ТаблицаПараметровОтбораБДДт,
	             |	ИсточникиДанныхДт.УточненияСпособовОпределения.(
	             |		Ссылка КАК Ссылка,
	             |		НомерСтроки КАК НомерСтроки,
	             |		ПолеБД КАК ПолеБД,
	             |		ИмяПараметра КАК ИмяПараметра,
	             |		Значение КАК Значение,
	             |		Представление КАК Представление,
	             |		Пометка КАК Пометка,
	             |		Тип КАК Тип
	             |	) КАК УточненияСпособовОпределенияДт,
	             |	ИсточникиДанныхДт.ТекстОтбора КАК ТекстОтбораДт,
	             |	ИсточникиДанныхКт.ПравилаИспользованияПолейЗапроса.(
	             |		Ссылка КАК Ссылка,
	             |		НомерСтроки КАК НомерСтроки,
	             |		Поле КАК Поле,
	             |		Синоним КАК Синоним,
	             |		АналитикаОперанда КАК АналитикаОперанда,
	             |		ЕСТЬNULL(ИсточникиДанныхКт.ПравилаИспользованияПолейЗапроса.АналитикаОперанда.СоздаватьПриНеудачномПоискеПриИмпорте, ИСТИНА) КАК СоздаватьНовые,
	             |		ЕСТЬNULL(ИсточникиДанныхКт.ПравилаИспользованияПолейЗапроса.АналитикаОперанда.РазделятьПоОрганизациям, ЛОЖЬ) КАК РазделятьПоОрганизациям,
	             |		ЕСТЬNULL(ИсточникиДанныхКт.ПравилаИспользованияПолейЗапроса.АналитикаОперанда.ОбновлятьРеквизитыПриИмпорте, ИСТИНА) КАК ОбновлятьРеквизитыПриИмпорте,
	             |		КодАналитики КАК КодАналитики,
	             |		НастройкаСоответствия КАК НастройкаСоответствия,
	             |		РеквизитАналитики КАК РеквизитАналитики,
	             |		ТаблицаАналитики КАК ТаблицаАналитики,
	             |		ТаблицаАналитикиВИБ КАК ТаблицаАналитикиВИБ,
	             |		НеИспользоватьДляСинхронизации КАК НеИспользоватьДляСинхронизации,
	             |		СпособЗаполнения КАК СпособЗаполнения,
	             |		ФиксированноеЗначение КАК ФиксированноеЗначение
	             |	) КАК ПравилаИспользованияПолейЗапросаКт,
	             |	ИсточникиДанныхКт.ТаблицаПараметровОтбораБД.(
	             |		Ссылка КАК Ссылка,
	             |		НомерСтроки КАК НомерСтроки,
	             |		ПолеБД КАК ПолеБД,
	             |		НаименованиеБД КАК НаименованиеБД,
	             |		СпособВычисленияПараметра КАК СпособВычисленияПараметра,
	             |		ЗначениеДляПроверки КАК ЗначениеДляПроверки,
	             |		ТипРасчета КАК ТипРасчета,
	             |		Реквизит КАК Реквизит,
	             |		СмещениеПериода КАК СмещениеПериода,
	             |		НастройкаСоответствия КАК НастройкаСоответствия,
	             |		ТаблицаАналитикиВИБ КАК ТаблицаАналитикиВИБ,
	             |		ТекстМодуля КАК ТекстМодуля,
	             |		ИдентификаторСтроки КАК ИдентификаторСтроки,
	             |		ИдентификаторРодителя КАК ИдентификаторРодителя,
	             |		ИмяПараметра КАК ИмяПараметра
	             |	) КАК ТаблицаПараметровОтбораБДКт,
	             |	ИсточникиДанныхКт.УточненияСпособовОпределения.(
	             |		Ссылка КАК Ссылка,
	             |		НомерСтроки КАК НомерСтроки,
	             |		ПолеБД КАК ПолеБД,
	             |		ИмяПараметра КАК ИмяПараметра,
	             |		Значение КАК Значение,
	             |		Представление КАК Представление,
	             |		Пометка КАК Пометка,
	             |		Тип КАК Тип
	             |	) КАК УточненияСпособовОпределенияКт,
	             |	ИсточникиДанныхКт.ТекстОтбора КАК ТекстОтбораКт
	             |ИЗ
	             |	ТаблицаТрансляции КАК ТаблицаТрансляции
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДт
	             |		ПО ТаблицаТрансляции.ПравилоДт = ИсточникиДанныхДт.Ссылка
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхКт
	             |		ПО ТаблицаТрансляции.ПравилоКт = ИсточникиДанныхКт.Ссылка
	             |ГДЕ
	             |	ИсточникиДанныхДт.НазначениеРасчетов = &ПравилоОбработки
	             |	И ИсточникиДанныхКт.НазначениеРасчетов = &ПравилоОбработки";
	
	Запрос.УстановитьПараметр("ТаблицаТрансляции",ТаблицаТрансляции);
	
	РабочаяТаблицаТрансляции=Запрос.Выполнить().Выгрузить();
	
	МассивБалансовые=Новый Массив;
	РесурсКоличество=Неопределено;
	РесурсВалютнаяСумма=Неопределено; 
	
	Для Каждого СоответствиеРесурсов ИЗ ДанныеОбъекта.ШаблонКорректировки.СоответствиеРесурсов Цикл
		
		Если НЕ (ЗначениеЗаполнено(СоответствиеРесурсов.РесурсИсточник) И ЗначениеЗаполнено(СоответствиеРесурсов.РесурсПриемник)) Тогда
			
			Продолжить;
			
		КонецЕсли;
				
		СтрРесурс=ДанныеОбъекта.РегистрБухгалтерииИсточник.Ресурсы.Найти(СоответствиеРесурсов.РесурсИсточник,"Имя");
		
		Если СтрРесурс.Балансовый Тогда
			
			МассивБалансовые.Добавить(Новый Структура("Источник,Приемник",СоответствиеРесурсов.РесурсИсточник,СоответствиеРесурсов.РесурсПриемник));
			
		ИначеЕсли СтрНайти(СтрРесурс.ПризнакУчета,"Количественный")>0 Тогда
			
			РесурсКоличество=Новый Структура("Источник,Приемник",СоответствиеРесурсов.РесурсИсточник,СоответствиеРесурсов.РесурсПриемник);
			
		ИначеЕсли СтрНайти(СтрРесурс.ПризнакУчета,"Валютный")>0 Тогда
			
			РесурсВалютнаяСумма=Новый Структура("Источник,Приемник",СоответствиеРесурсов.РесурсИсточник,СоответствиеРесурсов.РесурсПриемник);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	МассивИсключаемыхВНА=Неопределено;
	МассивТиповВНА=Справочники.ГруппыВНАМСФО.ПолучитьТипыОбъектовВНА();
		
	Для Каждого Строка ИЗ РабочаяТаблицаТрансляции Цикл
		
		Если ТекущаяИБ(ДанныеОбъекта.ИспользуемаяИБ) Тогда
				
			ЕстьСубконтоВНА=Ложь;		
			МассивВидовСубконтоВНА=Новый Массив;
			
			ДополнитьТекстОтбораИсключаемыхВНА(Строка,ЕстьСубконтоВНА,МассивТиповВНА,МассивВидовСубконтоВНА);
			
			Если ЕстьСубконтоВНА И МассивИсключаемыхВНА=Неопределено Тогда
				
				МассивИсключаемыхВНА=ВстраиваниеУХ.ПолучитьВнаУчитываемыеПараллельно();
				
			КонецЕсли;
			
			СтрЗапрос=ПодготовитьЗапросДляТрансляции(ДанныеОбъекта,Строка,ПоРегистратору);
			
			ДобавитьТаблицуОтборомПоРегистратору(ДанныеОбъекта,СтрЗапрос.ПравилаВычисленияПараметров);
			
			Если ЕстьСубконтоВНА Тогда
				
				ДобавитьПараметрыОтбораИсключаемыхВНА(СтрЗапрос.ПравилаВычисленияПараметров,МассивИсключаемыхВНА,МассивВидовСубконтоВНА);
				
			КонецЕсли;		
			
			ТаблицаДанных=УправлениеОтчетамиУХ.ПолучитьТаблицуПоИсточникуВнутрРегистрНакопления(ДанныеОбъекта,СтрЗапрос)
			
		Иначе
			
			СтрЗапрос=ПодготовитьЗапросДляТрансляции(ДанныеОбъекта,Строка,ПоРегистратору);

			СтруктураЗапроса 	= РасширениеИнтеграцииУХ.ПодготовитьСтруктуруЗапроса(ДанныеОбъекта,СтрЗапрос);	
			РабочаяТаблица	 	= РасширениеИнтеграцииУХ.ПолучитьТаблицуДанныхПоЗапросу(СтруктураЗапроса);
			ТекПравило			= ОбщегоНазначенияУХ.ПолучитьЭлементСтруктурыПоИндексу(СтруктураЗапроса.СтруктураПолей,0).Значение;
			ТаблицаДанных		= РасширениеИнтеграцииУХ.ТрансформироватьВнешниеДанные(ДанныеОбъекта,РабочаяТаблица,ТекПравило);
			
		КонецЕсли; 
		
		КэшТаблицыКурсов=Новый ТаблицаЗначений;
		КэшТаблицыКурсов.Колонки.Добавить("Валюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Валюты"));
		КэшТаблицыКурсов.Колонки.Добавить("Период",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		КэшТаблицыКурсов.Колонки.Добавить("Курс",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10,4));
		КэшТаблицыКурсов.Колонки.Добавить("Кратность",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));
		
		КэшТаблицыКурсов.Индексы.Добавить("Валюта,Период"); 
		
		ЗапросКурсов=Новый Запрос;
		ЗапросКурсов.Текст="ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Курс КАК Курс,
		|	КурсыВалютСрезПоследних.Кратность КАК Кратность
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &Валюта) КАК КурсыВалютСрезПоследних";
				
		Для Каждого СтрокаДанные ИЗ ТаблицаДанных Цикл
			
			НоваяСтрока=ПроводкиДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДанные); 
						
			НоваяСтрока.СчетДт			=Строка.СчетДтПриемник;
			НоваяСтрока.СчетДтИсточник	=Строка.СчетДтИсточник;
			
			НоваяСтрока.СчетКт			=Строка.СчетКтПриемник;
			НоваяСтрока.СчетКтИсточник	=Строка.СчетКтИсточник;
			
			НоваяСтрока.ПравилоДт		=Строка.ПравилоДт;
			НоваяСтрока.ПравилоКт		=Строка.ПравилоКт;

			Для Каждого СтрРесурс ИЗ МассивБалансовые Цикл
								
				Если СтрРесурс.Приемник="СуммаВВалютеУчета" ИЛИ СтрРесурс.Приемник="Сумма" Тогда 
				
					НоваяСтрока.Значение=ПолучитьЗначениеПриемник(СтрокаДанные.Период,
														СтрокаДанные[СтрРесурс.Источник],
														ДанныеОбъекта.ВалютаУчетаИсточник,
														ДанныеОбъекта.ВалютаУчетаПриемник,
														КэшТаблицыКурсов,ЗапросКурсов);
					
				ИначеЕсли СтрРесурс.Приемник="СуммаВВалютеОтчетности" Тогда
					
					Если ДанныеОбъекта.ВалютаПредставленияИсточник=
						ДанныеОбъекта.ВалютаПредставленияПриемник Тогда
						
						НоваяСтрока.ПредставлениеЗначения=СтрокаДанные[СтрРесурс.Источник];
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ РесурсКоличество=Неопределено Тогда
					
					НоваяСтрока.КоличествоДт=СтрокаДанные[РесурсКоличество.Источник+"Дт"];
					НоваяСтрока.КоличествоКт=СтрокаДанные[РесурсКоличество.Источник+"Кт"];
					
				КонецЕсли;
				
				Если НЕ РесурсВалютнаяСумма=Неопределено Тогда
					
					НоваяСтрока.ЗначениеВалютаДт=СтрокаДанные[РесурсВалютнаяСумма.Источник+"Дт"];
					НоваяСтрока.ЗначениеВалютаКт=СтрокаДанные[РесурсВалютнаяСумма.Источник+"Кт"];
					
				КонецЕсли;
					
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ДанныеОбъекта.ВалютаПредставленияПриемник) И (НЕ ЗначениеЗаполнено(НоваяСтрока.ПредставлениеЗначения)) Тогда
				
				НоваяСтрока.ПредставлениеЗначения=ПолучитьЗначениеПриемник(НоваяСтрока.Период,
														НоваяСтрока.Значение,
														ДанныеОбъекта.ВалютаУчетаПриемник,
														ДанныеОбъекта.ВалютаПредставленияПриемник,
														КэшТаблицыКурсов,ЗапросКурсов);
														
			КонецЕсли;
				
			
		КонецЦикла;
		
	КонецЦикла;		
	
КонецПроцедуры // ВыполнитьТрансляциюПроводок() 

Функция ПолучитьЗначениеПриемник(Период,
								ЗначениеИсточник,
								ВалютаИсточник,
								ВалютаПриемник,
								КэшТаблицыКурсов,ЗапросКурсов) Экспорт
								
	Если ЗначениеИсточник=0 ИЛИ ВалютаИсточник=ВалютаПриемник Тогда
									
		Возврат ЗначениеИсточник;
		
	КонецЕсли;
	
	ДанныеИсточник=ПолучитьДанныеКурса(ВалютаИсточник,Период,КэшТаблицыКурсов,ЗапросКурсов);
	ДанныеПриемник=ПолучитьДанныеКурса(ВалютаПриемник,Период,КэшТаблицыКурсов,ЗапросКурсов);
	
	Если ДанныеИсточник.Курс=0 ИЛИ ДанныеПриемник.Курс=0 Тогда
		
		Возврат 0;
		
	КонецЕсли;
	
	Возврат ЗначениеИсточник*(ДанныеИсточник.Курс*ДанныеПриемник.Кратность)/(ДанныеПриемник.Курс*ДанныеИсточник.Кратность); 
																						
КонецФункции // ПолучитьЗначениеПриемник() 

Функция ПолучитьДанныеКурса(Валюта,Период,КэшТаблицыКурсов,ЗапросКурсов)

	ДанныеКурса=КэшТаблицыКурсов.НайтиСтроки(Новый Структура("Валюта,Период",Валюта,Период));
	
	Если ДанныеКурса.Количество()>0 Тогда
		
		Возврат Новый Структура("Курс,Кратность",ДанныеКурса[0].Курс,ДанныеКурса[0].Кратность);
		
	Иначе
		
		ЗапросКурсов.УстановитьПараметр("Период", Период);
		ЗапросКурсов.УстановитьПараметр("Валюта", Валюта);
		
		ТаблицаКурсов=ЗапросКурсов.Выполнить().Выгрузить();
		
		Если ТаблицаКурсов.Количество()>0 Тогда
			
			НоваяСтрока=КэшТаблицыКурсов.Добавить();
			НоваяСтрока.Валюта=Валюта;
			НоваяСтрока.Период=Период;
			НоваяСтрока.Курс=ТаблицаКурсов[0].Курс;
			НоваяСтрока.Кратность=ТаблицаКурсов[0].Кратность;
			
		Иначе
			
			ТекстОшибки=СтрШаблон(Нстр("ru = 'Не установлен курс для валюты %1 на период %2'"),Валюта,Период);
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки,,,СтатусСообщения.Важное);
			
			НоваяСтрока=КэшТаблицыКурсов.Добавить();
			НоваяСтрока.Валюта=Валюта;
			НоваяСтрока.Период=Период;
			НоваяСтрока.Курс=0;
			НоваяСтрока.Кратность=0;
			
		КонецЕсли;
		
		Возврат Новый Структура("Курс,Кратность",НоваяСтрока.Курс,НоваяСтрока.Кратность);
		
	КонецЕсли;	
		
КонецФункции // ПолучитьДанныеКурса() 

Функция ЕстьТипВНА(ВидСубконтоСсылка,МассивТиповВНА)
	
	Для Каждого Тип ИЗ ВидСубконтоСсылка.ТипЗначения.Типы() Цикл
		
		Если НЕ МассивТиповВНА.Найти(Тип)=Неопределено Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
		
КонецФункции // ЕстьТипВНА() 

Процедура ДополнитьТекстОтбораИсключаемыхВНА(СтрокаТрансляции,ЕстьСубконто,МассивТиповВНА,МассивВидовСубконтоВНА) Экспорт
	
	ДополнениеОтбораДт="";
	ДополнениеОтбораКт="";
	
	Для Каждого Строка ИЗ СтрокаТрансляции.СчетДтИсточник.ВидыСубконто Цикл
		
		Если ЕстьТипВНА(Строка.ВидСубконтоСсылка,МассивТиповВНА) Тогда
			
			Если МассивВидовСубконтоВНА.Найти(Строка.ВидСубконтоСсылка)=Неопределено Тогда
				
				МассивВидовСубконтоВНА.Добавить(Строка.ВидСубконтоСсылка);
				
			КонецЕсли;
				
			ДополнениеОтбораДт=ДополнениеОтбораДт+" И НЕ (ВидСубконтоДт"+Строка.Номер+" В(&МассивВидовСубконтоВНА) И СубконтоДт"+Строка.Номер+" В(&МассивИсключаемыхВНА))";
			ЕстьСубконто=Истина;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Для Каждого Строка ИЗ СтрокаТрансляции.СчетКтИсточник.ВидыСубконто Цикл
		
		Если ЕстьТипВНА(Строка.ВидСубконтоСсылка,МассивТиповВНА) Тогда
			
			Если МассивВидовСубконтоВНА.Найти(Строка.ВидСубконтоСсылка)=Неопределено Тогда
				
				МассивВидовСубконтоВНА.Добавить(Строка.ВидСубконтоСсылка);
				
			КонецЕсли;
			
			ДополнениеОтбораКт=ДополнениеОтбораКт+" И НЕ (ВидСубконтоКт"+Строка.Номер+" В(&МассивВидовСубконтоВНА) И СубконтоКт"+Строка.Номер+" В(&МассивИсключаемыхВНА))";
			ЕстьСубконто=Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ДополнениеОтбораДт) Тогда
			
		Если НЕ ПустаяСтрока(СтрокаТрансляции.ТекстОтбораДт) Тогда
			
			СтрокаТрансляции.ТекстОтбораДт=СтрокаТрансляции.ТекстОтбораДт+" И "+Сред(ДополнениеОтбораДт,3);
			
		Иначе
			
			СтрокаТрансляции.ТекстОтбораДт=Сред(ДополнениеОтбораДт,3);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДополнениеОтбораКт) Тогда
		
		Если НЕ ПустаяСтрока(СтрокаТрансляции.ТекстОтбораКт) Тогда
			
			СтрокаТрансляции.ТекстОтбораКт=СтрокаТрансляции.ТекстОтбораКт+" И "+Сред(ДополнениеОтбораКт,3);
			
		Иначе
			
			СтрокаТрансляции.ТекстОтбораКт=Сред(ДополнениеОтбораКт,3);
			
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры // ДополнитьТекстОтбораИсключаемыхВНА() 

Процедура ДобавитьПараметрыОтбораИсключаемыхВНА(ПравилаВычисленияПараметров,МассивИсключаемыхВНА,МассивВидовСубконтоВНА) Экспорт
	
	НоваяСтрока=ПравилаВычисленияПараметров.Добавить();
	НоваяСтрока.ИмяПараметра=		"МассивИсключаемыхВНА";
	НоваяСтрока.НаименованиеБД=		"МассивИсключаемыхВНА";
	НоваяСтрока.ПолеБД=				"МассивИсключаемыхВНА";
	НоваяСтрока.ТипРасчета=			"Простой";
	НоваяСтрока.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений;
	
	СписокВНА=Новый СписокЗначений;
	СписокВНА.ЗагрузитьЗначения(МассивИсключаемыхВНА);
	
	НоваяСтрока.УточнениеСпособаОпределения=СписокВНА;
	
	НоваяСтрока=ПравилаВычисленияПараметров.Добавить();
	НоваяСтрока.ИмяПараметра=		"МассивВидовСубконтоВНА";
	НоваяСтрока.НаименованиеБД=		"МассивВидовСубконтоВНА";
	НоваяСтрока.ПолеБД=				"МассивВидовСубконтоВНА";
	НоваяСтрока.ТипРасчета=			"Простой";
	НоваяСтрока.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений;
	
	СписокТиповВНА=Новый СписокЗначений;
	СписокТиповВНА.ЗагрузитьЗначения(МассивВидовСубконтоВНА);
	
	НоваяСтрока.УточнениеСпособаОпределения=СписокТиповВНА;
	
КонецПроцедуры // ДобавитьПараметрыОтбораИсключаемыхВНА()

Процедура ПротоколироватьИсключенияТрансляции(ПричинаИсключения,ТаблицаИсключений)
	
	Если ТаблицаИсключений.Количество()=0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого Строка ИЗ ТаблицаИсключений Цикл
		
		ТекстСообщения=Строка.Счет+" - "+Строка.КоррСчет;
		
		Для Индекс=1 По 3 Цикл
			
			Если (НЕ ТаблицаИсключений.Колонки.Найти("СубконтоДт"+Индекс)=Неопределено) И ЗначениеЗаполнено(Строка["СубконтоДт"+Индекс]) Тогда
				
				ТекстСообщения=ТекстСообщения+", СубконтоДт"+Индекс+": "+Строка["СубконтоДт"+Индекс];
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Индекс=1 По 3 Цикл
			
			Если (НЕ ТаблицаИсключений.Колонки.Найти("СубконтоКт"+Индекс)=Неопределено) И ЗначениеЗаполнено(Строка["СубконтоКт"+Индекс]) Тогда
				
				ТекстСообщения=ТекстСообщения+", СубконтоКт"+Индекс+": "+Строка["СубконтоКт"+Индекс];
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстПредупреждения=ПричинаИсключения+Символы.ПС+ТекстСообщения;
		
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьПредупреждение("КорректировкиЗначенийПоказателей.ВыполнитьТрансляциюПроводок.2",,,ТекстПредупреждения);
		
	КонецЦикла;	
	
КонецПроцедуры // ПротоколироватьИсключенияТрансляции()

Функция ПолучитьТаблицуБезИсключаемыхВНА(ТаблицаДанных,МассивИсключаемыхВНА)
	
	ТекстОтбор="";
	СтруктураДанных=Новый Структура;
	
	Для Каждого Колонка ИЗ ТаблицаДанных.Колонки Цикл
		
		Если СтрНачинаетсяС(Колонка.Имя,"СубконтоДт") ИЛИ СтрНачинаетсяС(Колонка.Имя,"СубконтоКт") Тогда
			
			ТекстОтбор=ТекстОтбор+" ИЛИ ТаблицаДанных."+Колонка.Имя+" В(&МассивИсключаемыхВНА)";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстОтбор) Тогда
		
		СтруктураДанных.Вставить("ТаблицаДанных",ТаблицаДанных);
		Возврат СтруктураДанных;
		
	КонецЕсли;
		
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ * Поместить ТаблицаДанных ИЗ &ТаблицаДанных КАК ТаблицаДанных
	|;
	|ВЫБРАТЬ * ИЗ ТаблицаДанных
	|ГДЕ НЕ ("+Сред(ТекстОтбор,5)+")
	|;
	|ВЫБРАТЬ * ИЗ ТаблицаДанных
	|ГДЕ ("+Сред(ТекстОтбор,5)+")";
	
	Запрос.УстановитьПараметр("ТаблицаДанных",			ТаблицаДанных);
	Запрос.УстановитьПараметр("МассивИсключаемыхВНА",	МассивИсключаемыхВНА);
	
	Результат=Запрос.ВыполнитьПакет();
	
	СтруктураДанных=Новый Структура;
	СтруктураДанных.Вставить("ТаблицаДанных",Результат[1].Выгрузить());
	СтруктураДанных.Вставить("ТаблицаИсключений",Результат[2].Выгрузить());
		
	Возврат СтруктураДанных;
	
КонецФункции // ПолучитьТаблицуБезИсключаемыхВНА()

Функция ОбъединитьТаблицыЗначений(Таблица1,Таблица2)
	
	ШаблонПоиска=Новый Структура;
	
	Для Каждого Колонка ИЗ Таблица1.Колонки Цикл
		
		ШаблонПоиска.Вставить(Колонка.Имя);
		
	КонецЦикла;	
	
	Для Каждого Строка ИЗ Таблица2 Цикл
		
		СтруктураПоиска=ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(ШаблонПоиска);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,Строка);
		
		Если Таблица1.НайтиСтроки(СтруктураПоиска).Количество()=0 Тогда
			
			НоваяСтрока=Таблица1.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураПоиска);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Таблица1;
			
КонецФункции // ОбъединитьТаблицыЗначений()

Функция ПолучитьНовыйПуть(ИсходноеПолеНов,МассивПутей)
	
	МассивПутей.Установить(0,ИсходноеПолеНов);	
	Возврат СтрСоединить(МассивПутей,".");	
	
КонецФункции // ПолучитьНовыйПуть() 

Процедура ОбработатьОтбор(ДанныеОбъекта,ТаблицаПараметровОтбораБД,УточненияСпособовОпределения,ТекстОтбора,Постфикс)
	
	Для Каждого СтрПоле ИЗ ТаблицаПараметровОтбораБД Цикл
		
		ПолныйПутьСтар=СтрПоле.ПолеБД;
		
		МассивПутей=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(СтрПоле.ПолеБД,".");
		
		ИсходноеПолеСтар=МассивПутей[0];
		ИсходноеПолеНов=ИсходноеПолеСтар;
		
		Если Лев(ИсходноеПолеСтар,8)="Субконто" И (НЕ (Лев(ИсходноеПолеСтар,10)="СубконтоКт" ИЛИ Лев(ИсходноеПолеСтар,10)="СубконтоДт")) Тогда 
			
			ИсходноеПолеНов=СтрЗаменить(ИсходноеПолеСтар,"Субконто","Субконто"+Постфикс);
			
		ИначеЕсли СтрНайти(ИсходноеПолеСтар,"Дт")=0 И СтрНайти(ИсходноеПолеСтар,"Кт")=0 Тогда 
			
			СтрИзмерение=ДанныеОбъекта.РегистрБухгалтерииИсточник.Измерения.Найти(ИсходноеПолеСтар,"Имя");
			
			Если НЕ (СтрИзмерение=Неопределено 
				ИЛИ СтрИзмерение.Балансовый) Тогда
				
				ИсходноеПолеНов=ИсходноеПолеСтар+Постфикс;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Если НЕ ИсходноеПолеНов=ИсходноеПолеСтар Тогда
			
			СтрПоле.ПолеБД=ПолучитьНовыйПуть(ИсходноеПолеНов,МассивПутей);
			
			ТекстОтбора=СтрЗаменить(ТекстОтбора,ПолныйПутьСтар,СтрПоле.ПолеБД);
			
			МассивУточнений=УточненияСпособовОпределения.НайтиСтроки(Новый Структура("ИмяПараметра",СтрПоле.ИмяПараметра));
			
			Для Каждого Строка ИЗ МассивУточнений Цикл
				
				Строка.ПолеБД=СтрПоле.ПолеБД;
				
			КонецЦикла;
			
		КонецЕсли;
					
	КонецЦикла;
	
КонецПроцедуры // ОбработатьОтбор()

Процедура ОбработатьПоля(ДанныеОбъекта,ПравилаИспользованияПолейЗапроса,ТаблицаИзмерений,Постфикс)
	
	Для Каждого СтрПоле ИЗ ПравилаИспользованияПолейЗапроса Цикл
		
		ПолныйПутьСтар=СтрПоле.Поле;
		
		МассивПутей=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(СтрПоле.Поле,".");
		
		ИсходноеПолеСтар=МассивПутей[0];
		ИсходноеПолеНов=ИсходноеПолеСтар;
		
		Если Лев(ИсходноеПолеСтар,8)="Субконто" И (НЕ (Лев(ИсходноеПолеСтар,10)="СубконтоКт" ИЛИ Лев(ИсходноеПолеСтар,10)="СубконтоДт")) Тогда 
			
			ИсходноеПолеНов=СтрЗаменить(ИсходноеПолеСтар,"Субконто","Субконто"+Постфикс);
			
		ИначеЕсли СтрНайти(ИсходноеПолеСтар,"Дт")=0 И СтрНайти(ИсходноеПолеСтар,"Кт")=0 Тогда 
			
			СтрИзмерение=ДанныеОбъекта.РегистрБухгалтерииИсточник.Измерения.Найти(ИсходноеПолеСтар,"Имя");
			
			Если НЕ (СтрИзмерение=Неопределено 
				ИЛИ СтрИзмерение.Балансовый) Тогда
				
				ИсходноеПолеНов=ИсходноеПолеСтар+Постфикс;
				
			КонецЕсли;
			
		КонецЕсли;	
				
		Если СтрПоле.КодАналитики="АналитикаВалюта" Тогда
			
			СтрПоле.КодАналитики="Валюта"+Постфикс;
			СтрПоле.Синоним		="Валюта"+Постфикс;
			
		ИначеЕсли СтрНайти(СтрПоле.КодАналитики,"Аналитика")>0 Тогда
			
			СтрПоле.КодАналитики=СтрЗаменить(СтрПоле.КодАналитики,"Аналитика","Субконто"+Постфикс);
			СтрПоле.Синоним=СтрПоле.КодАналитики;
			
		ИначеЕсли НЕ ТаблицаИзмерений.Найти(СтрПоле.КодАналитики+Постфикс,"Имя")=Неопределено Тогда
			
			СтрПоле.КодАналитики=СтрПоле.КодАналитики+Постфикс;
			СтрПоле.Синоним=СтрПоле.КодАналитики;			
	
		КонецЕсли;	
		
		Если НЕ ИсходноеПолеНов=ИсходноеПолеСтар Тогда
			
			СтрПоле.Поле=ПолучитьНовыйПуть(ИсходноеПолеНов,МассивПутей);
						
		КонецЕсли;
					
	КонецЦикла;
	
КонецПроцедуры // ОбработатьПоля()

Функция ПодготовитьЗапросДляТрансляции(ДанныеОбъекта,СтрокаТрансляции,ПоРегистратору=Ложь) Экспорт	
	
	мОписаниеТиповБулево=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево();
	
	мОперанды=Новый ТаблицаЗначений;
	
	Для Индекс=1 ПО ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		мОперанды.Колонки.Добавить("АналитикаОтчета"+Индекс);
		
	КонецЦикла;
	
	мОперанды.Колонки.Добавить("ВерсияПлатформы");
	мОперанды.Колонки.Добавить("ВидИтога");
	мОперанды.Колонки.Добавить("ВидИтогаПоказателя");
	мОперанды.Колонки.Добавить("ВидОтчетаОтбор");
	мОперанды.Колонки.Добавить("ГруппаРаскрытия");
	мОперанды.Колонки.Добавить("ГруппаРаскрытияОтбор");
	мОперанды.Колонки.Добавить("ДтКт");
	мОперанды.Колонки.Добавить("Код");
	мОперанды.Колонки.Добавить("КоррСчет");
	мОперанды.Колонки.Добавить("Наименование");
	мОперанды.Колонки.Добавить("ПланСчетов");
	мОперанды.Колонки.Добавить("Показатель");
	мОперанды.Колонки.Добавить("ПоказательОтбор");
	мОперанды.Колонки.Добавить("ПоказательОтборКод");
	мОперанды.Колонки.Добавить("ПоказательОтборПересчитыватьВалютнуюСумму",мОписаниеТиповБулево);
	мОперанды.Колонки.Добавить("ПоказательПересчитыватьВалютнуюСумму",мОписаниеТиповБулево);
	мОперанды.Колонки.Добавить("ПоказательТекущегоОтчета",мОписаниеТиповБулево);
	мОперанды.Колонки.Добавить("ПравилаИспользованияПолейЗапроса");
	мОперанды.Колонки.Добавить("ПравилаВычисленияПараметровЗапроса");
	мОперанды.Колонки.Добавить("РегистрБД");
	мОперанды.Колонки.Добавить("РесурсРегистра");
	мОперанды.Колонки.Добавить("СпособИспользования");
	мОперанды.Колонки.Добавить("СпособПолучения");
	мОперанды.Колонки.Добавить("Ссылка");
	мОперанды.Колонки.Добавить("Счет");
	мОперанды.Колонки.Добавить("ТаблицаADO");
	мОперанды.Колонки.Добавить("ТаблицаПараметровОтбораБД");
	мОперанды.Колонки.Добавить("ТекстЗапросаМодуля");
	мОперанды.Колонки.Добавить("ТекстОтбора");
	мОперанды.Колонки.Добавить("ТипЗначения");
	мОперанды.Колонки.Добавить("ТипЗначенияПоказателя");
	мОперанды.Колонки.Добавить("ТолькоАналитическиеЗначения",мОписаниеТиповБулево);
	мОперанды.Колонки.Добавить("УточненияСпособовОпределения");
	мОперанды.Колонки.Добавить("ЧислоАналитикГруппыРаскрытия");
	мОперанды.Колонки.Добавить("ЧисловойПоказатель");
	мОперанды.Колонки.Добавить("АналитикВидаОтчета");
	мОперанды.Колонки.Добавить("Ресурс");
	мОперанды.Колонки.Добавить("ИсточникШаблон");

	
	НоваяСтрока=мОперанды.Добавить();
	
	НоваяСтрока.ВерсияПлатформы			=?(НЕ ТекущаяИБ(ДанныеОбъекта.ИспользуемаяИБ),ДанныеОбъекта.ИспользуемаяИБ.ТипБД.ВерсияПлатформы,Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие83);
	НоваяСтрока.Код						= ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление("Ист_"+СокрЛП(СтрокаТрансляции.СчетДтИсточникКод)+"_Пр_"+СокрЛП(СтрокаТрансляции.СчетКтИсточникКод));
	НоваяСтрока.Счет					= СтрокаТрансляции.СчетДтИсточник;
	НоваяСтрока.КоррСчет				= СтрокаТрансляции.СчетКтИсточник;
	НоваяСтрока.ПланСчетов				= ДанныеОбъекта.РегистрБухгалтерииИсточник.ПланСчетов;
	НоваяСтрока.ВидИтога				= "Оборот";
	НоваяСтрока.РегистрБД				= ДанныеОбъекта.РегистрБухгалтерииИсточник;
	НоваяСтрока.РесурсРегистра			= ДанныеОбъекта.РегистрБухгалтерииИсточник.Ресурсы[0].Имя;
	НоваяСтрока.СпособИспользования		= Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета;
	
	СписокСчетов=Новый СписокЗначений;
	СписокКоррСчетов=Новый СписокЗначений;
	
	Если НЕ ТекущаяИБ(ДанныеОбъекта.ИспользуемаяИБ) Тогда
		
		СписокСчетов.Добавить(СтрокаТрансляции.СчетДтИсточникКод);
		СписокКоррСчетов.Добавить(СтрокаТрансляции.СчетКтИсточникКод);
		
		Если НоваяСтрока.ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие77 Тогда
			
			НоваяСтрока.СпособПолучения	= Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов;
			
		Иначе
			
			НоваяСтрока.СпособПолучения	= Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии;
			
		КонецЕсли;
		
	Иначе
		
		СписокСчетов.Добавить(СтрокаТрансляции.СчетДтИсточник.СчетСсылка);
		СписокКоррСчетов.Добавить(СтрокаТрансляции.СчетКтИсточник.СчетСсылка);
		
		НоваяСтрока.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии;
		
	КонецЕсли;
		
	НоваяСтрока.Ссылка					= Справочники.ИсточникиДанныхДляРасчетов.ПустаяСсылка();
	НоваяСтрока.ТипЗначения				= Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
	НоваяСтрока.ТипЗначенияПоказателя 	= Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
	НоваяСтрока.ЧисловойПоказатель 		= Истина;
	
	// Получим общую таблицу отбора
	
	ОбработатьОтбор(ДанныеОбъекта,СтрокаТрансляции.ТаблицаПараметровОтбораБДДт,СтрокаТрансляции.УточненияСпособовОпределенияДт,СтрокаТрансляции.ТекстОтбораДт,"Дт");
	ОбработатьОтбор(ДанныеОбъекта,СтрокаТрансляции.ТаблицаПараметровОтбораБДКт,СтрокаТрансляции.УточненияСпособовОпределенияКт,СтрокаТрансляции.ТекстОтбораКт,"Кт");
	
	НоваяСтрока.ТаблицаПараметровОтбораБД 		= ОбъединитьТаблицыЗначений(СтрокаТрансляции.ТаблицаПараметровОтбораБДДт,СтрокаТрансляции.ТаблицаПараметровОтбораБДКт);		
	НоваяСтрока.УточненияСпособовОпределения 	= ОбъединитьТаблицыЗначений(СтрокаТрансляции.УточненияСпособовОпределенияДт,СтрокаТрансляции.УточненияСпособовОпределенияКт);	
	
	// Обработаем имена возвращаемых полей, чтобы избежать повторов
	
	СтрокаЗначение=СтрокаТрансляции.ПравилаИспользованияПолейЗапросаДт.Найти("Значение","КодАналитики");
	
	Если Не СтрокаЗначение=Неопределено Тогда
		
		СтрокаТрансляции.ПравилаИспользованияПолейЗапросаДт.Удалить(СтрокаЗначение);
		
	КонецЕсли;
	
	СтрокаЗначение=СтрокаТрансляции.ПравилаИспользованияПолейЗапросаКт.Найти("Значение","КодАналитики");
	
	Если Не СтрокаЗначение=Неопределено Тогда
		
		СтрокаТрансляции.ПравилаИспользованияПолейЗапросаКт.Удалить(СтрокаЗначение);
		
	КонецЕсли;
	
	ТаблицаИзмерений=РаботаСПолямиАналитикиУХ.ЗаполнитьИзмеренияПроводки(,ДанныеОбъекта.РегистрБухгалтерии,СтрокаТрансляции.СчетДтПриемник,СтрокаТрансляции.СчетКтПриемник);

	// Обработаем имена полей измерений приемника
	
	Для Каждого СтрИзмерение ИЗ ТаблицаИзмерений Цикл
		
		Если СтрИзмерение.Балансовый Тогда
			
			Если НЕ СтрокаТрансляции.ПравилаИспользованияПолейЗапросаДт.Найти(СтрИзмерение.Имя,"КодАналитики")=Неопределено Тогда
				
				СтрокаКредит=СтрокаТрансляции.ПравилаИспользованияПолейЗапросаКт.Найти(СтрИзмерение.Имя,"КодАналитики");
				
				Если НЕ СтрокаКредит=Неопределено Тогда
					
					СтрокаТрансляции.ПравилаИспользованияПолейЗапросаКт.Удалить(СтрокаКредит);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработатьПоля(ДанныеОбъекта,СтрокаТрансляции.ПравилаИспользованияПолейЗапросаДт,ТаблицаИзмерений,"Дт");
	ОбработатьПоля(ДанныеОбъекта,СтрокаТрансляции.ПравилаИспользованияПолейЗапросаКт,ТаблицаИзмерений,"Кт");
	
	НоваяСтрока.ПравилаИспользованияПолейЗапроса= ОбъединитьТаблицыЗначений(СтрокаТрансляции.ПравилаИспользованияПолейЗапросаДт,СтрокаТрансляции.ПравилаИспользованияПолейЗапросаКт);
	
	Для Каждого СтрокаРесурс ИЗ ДанныеОбъекта.ШаблонКорректировки.СоответствиеРесурсов Цикл
		
		Если ПустаяСтрока(СтрокаРесурс.РесурсПриемник) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДанныеРесурса=ДанныеОбъекта.РегистрБухгалтерииИсточник.Ресурсы.Найти(СтрокаРесурс.РесурсИсточник);
		
		Если ДанныеРесурса.Балансовый Тогда
			
			ПолеРесурс=НоваяСтрока.ПравилаИспользованияПолейЗапроса.Добавить();
			ПолеРесурс.Поле			= ДанныеРесурса.Имя;
			ПолеРесурс.Синоним		= ДанныеРесурса.Имя;
			ПолеРесурс.КодАналитики	= СтрокаРесурс.РесурсПриемник;
			
		Иначе
			
			ПолеРесурс=НоваяСтрока.ПравилаИспользованияПолейЗапроса.Добавить();
			ПолеРесурс.Поле			= ДанныеРесурса.Имя+"Дт";
			ПолеРесурс.Синоним		= ДанныеРесурса.Имя+"Дт";
			ПолеРесурс.КодАналитики	= СтрокаРесурс.РесурсПриемник+"Дт";
			
			ПолеРесурс=НоваяСтрока.ПравилаИспользованияПолейЗапроса.Добавить();
			ПолеРесурс.Поле			= ДанныеРесурса.Имя+"Кт";
			ПолеРесурс.Синоним		= ДанныеРесурса.Имя+"Кт";
			ПолеРесурс.КодАналитики	= СтрокаРесурс.РесурсПриемник+"Кт";
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПолеПериод=НоваяСтрока.ПравилаИспользованияПолейЗапроса.Добавить();
	ПолеПериод.Поле			= "Период";
	ПолеПериод.Синоним		= "Период";
	ПолеПериод.КодАналитики	= "Период";
	
	НоваяСтрока.ТекстЗапросаМодуля=Обработки.КорректировкиЗначенийПоказателей.СформироватьТекстЗапросаКДвижениямССубконто(ДанныеОбъекта.РегистрБухгалтерииИсточник,СтрокаТрансляции.ТекстОтбораДт,СтрокаТрансляции.ТекстОтбораКт,ДанныеОбъекта.ИспользуемаяИБ,ПоРегистратору ИЛИ ЗначениеЗаполнено(ДанныеОбъекта.ИсходныйДокумент),ЗначениеЗаполнено(ДанныеОбъекта.ИсходныйДокумент));
	
	ДанныеРасчета=УправлениеОтчетамиУХ.ПодготовитьОперандыДляПолученияДанных(мОперанды,Ложь,,,,Ложь);
	
	ДанныеДляЗапроса=ДанныеРасчета.мТабПоказателиЗапросы[0];
	
	ДанныеДляЗапроса.СтруктураЗапроса.Вставить("СписокСчетов",СписокСчетов);
	ДанныеДляЗапроса.СтруктураЗапроса.Вставить("СписокКоррСчетов",СписокКоррСчетов);
	
	Возврат ДанныеДляЗапроса;
		
КонецФункции // ПодготовитьЗапросДляТрансляции()

Процедура ЗаполнитьПоРеквизитам(ОбработкаКЗП, Реквизиты) Экспорт
	
	Если Реквизиты.Свойство("РасчетДатыОтраженияВУчете") Тогда
	    ОбработкаКЗП.РасчетДатыОтраженияВУчете = Реквизиты.РасчетДатыОтраженияВУчете;
	Иначе	
		ОбработкаКЗП.РасчетДатыОтраженияВУчете = Перечисления.СпособыРасчетаДатыОтраженияВУчете.ДатаОкончанияПериода;
	КонецЕсли;
	
	Если Реквизиты.Свойство("ВидОперации") Тогда
	    ОбработкаКЗП.ВидОперации = Реквизиты.ВидОперации;
	Иначе	
		ОбработкаКЗП.ВидОперации = Справочники.ВидыОпераций.УчетныеОперации;
	КонецЕсли;
	
	Если Реквизиты.Свойство("ДатаОтраженияВУчете") Тогда
	    ОбработкаКЗП.ДатаОтраженияВУчете = Реквизиты.ДатаОтраженияВУчете;
	Иначе	
		ОбработкаКЗП.ДатаОтраженияВУчете = Реквизиты.Период;
	КонецЕсли;
	
	ИспользуютсяТК = Истина;
	Если Реквизиты.Свойство("ИспользуютсяТК") Тогда
		ИспользуютсяТК = Реквизиты.ИспользуютсяТК;
	КонецЕсли;
	
	Если ИспользуютсяТК = Истина Тогда
		
		ОбработкаКЗП.ДвиженияПоРегиструБухгалтерии = Ложь;
		ОбработкаКЗП.КорректировкиЗначенийПоказателей = Истина;
		
	ИначеЕсли ИспользуютсяТК = Ложь Тогда
		
		ОбработкаКЗП.ДвиженияПоРегиструБухгалтерии = Истина;
		ОбработкаКЗП.КорректировкиЗначенийПоказателей = Ложь;
		Если Реквизиты.Свойство("РегистрБухгатерииБД") Тогда
			ОбработкаКЗП.РегистрБухгалтерии = Реквизиты.РегистрБухгатерииБД;
		Иначе
			ОбработкаКЗП.РегистрБухгалтерии = Справочники.РегистрыБухгалтерииБД.НайтиПоНаименованию("МСФО");
		КонецЕсли;	
		
	КонецЕсли;
	
	Если Реквизиты.Свойство("ПериодОтчетаКЗП") Тогда
	    ОбработкаКЗП.ПериодОтчета = Реквизиты.ПериодОтчетаКЗП;
	Иначе	
		ОбработкаКЗП.ПериодОтчета = ?(Реквизиты.Свойство("ПериодСценария"), Реквизиты.ПериодСценария, Реквизиты.ПериодОтчета);
	КонецЕсли;
	
	ОбработкаКЗП.Сценарий       = Реквизиты.Сценарий;			
	
	ОбработкаКЗП.ОсновнаяВалюта	= Реквизиты.ФункциональнаяВалюта;
	ОбработкаКЗП.ВалютаУчета	= Реквизиты.ФункциональнаяВалюта;		
	ОбработкаКЗП.Организация    = Реквизиты.Организация;
		
КонецПроцедуры

Процедура ОбработкаПроведенияОбъекта(ДокументОбъект,РежимПроведения,Отказ) Экспорт
	
	
	ОбработкаОбъект=Обработки.КорректировкиЗначенийПоказателей.Создать();
	ЗаполнитьЗначенияСвойств(ОбработкаОбъект,ДокументОбъект);
	ОбработкаОбъект.ДокументОбъект=ДокументОбъект;
	
	ОбработкаОбъект.ИмяОбъектаМетаданных=ДокументОбъект.Метаданные().Имя;	
	ОбработкаОбъект.ИнициализироватьКонтекст();	
	
	ОбработкаОбъект.ЗаписатьРабочийОбъект(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный,Отказ) 
			
КонецПроцедуры // ОбработаПроведенияОбъекта()

Процедура ОбновитьНомераПроводок(ТаблицаПроводок) Экспорт

	ПустыеНомераПроводок = Новый Массив;
	ПоследнийНомерПроводки = 1;
	
	Для Каждого СтрокаПроводка ИЗ ТаблицаПроводок Цикл
		
		Если СтрокаПроводка.НомерПроводки = 0 Тогда
			ПустыеНомераПроводок.Добавить(СтрокаПроводка);
		ИначеЕсли ПоследнийНомерПроводки <= СтрокаПроводка.НомерПроводки Тогда
			ПоследнийНомерПроводки = СтрокаПроводка.НомерПроводки + 1;			
		КонецЕсли;
		
	КонецЦикла;
		
	Для каждого СтрокаПроводка Из ПустыеНомераПроводок Цикл
		СтрокаПроводка.НомерПроводки = ПоследнийНомерПроводки;
		ПоследнийНомерПроводки = ПоследнийНомерПроводки + 1;
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьСубконтоСчетаБД(СчетБД, Субконто, ИмяСубконто, ЗначениеСубконто) Экспорт

	Если НЕ ЗначениеЗаполнено(ИмяСубконто) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСчета = ПолучитьСвойстваСчетаБД(СчетБД);
	ВидыСубконто=ПланыВидовХарактеристик[СчетБД.Владелец.ВидыСубконто];
	
	Если ТипЗнч(ИмяСубконто) = Тип("Число") Тогда

		Если ИмяСубконто > СвойстваСчета.КоличествоСубконто Тогда
			Возврат;
		КонецЕсли;

		ВидСубконто = СвойстваСчета["ВидСубконто" + ИмяСубконто+"Ссылка"];
		
	ИначеЕсли ТипЗнч(ИмяСубконто)=Тип("Строка") Тогда
		
		ВидСубконто = ВидыСубконто[ИмяСубконто];

		Если СвойстваСчета.ВидСубконто1 <> ВидСубконто
			И СвойстваСчета.ВидСубконто2 <> ВидСубконто
			И СвойстваСчета.ВидСубконто3 <> ВидСубконто Тогда
			
			Возврат;
			
		КонецЕсли;

	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ИмяСубконто.Метаданные())Тогда
		
		ВидСубконто = ИмяСубконто;
		
		Если СвойстваСчета.ВидСубконто1Ссылка <> ВидСубконто
			И СвойстваСчета.ВидСубконто2Ссылка <> ВидСубконто
			И СвойстваСчета.ВидСубконто3Ссылка <> ВидСубконто Тогда
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
		
	Если ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		
		Субконто.Вставить(ВидСубконто, ЗначениеСубконто);
		
	КонецЕсли;

КонецПроцедуры // УстановитьСубконто()

Функция ПолучитьСвойстваСчетаБД(Счет) Экспорт

	ДанныеСчета = Новый Структура;
	
	ЗаданСчетСсылка = (Счет.СчетСсылка <> Неопределено) И НЕ Счет.СчетСсылка.Пустая();
	
	ДанныеСчета.Вставить("Ссылка"                         , Счет.Ссылка);
	ДанныеСчета.Вставить("Наименование"                   , Счет.Наименование);
	ДанныеСчета.Вставить("Код"                            , Счет.Код);
	ДанныеСчета.Вставить("Родитель"                       , Счет.Родитель);
	ДанныеСчета.Вставить("Наименование"                   , Счет.Наименование);
	ДанныеСчета.Вставить("Вид"                            , Счет.Вид);
	ДанныеСчета.Вставить("Забалансовый"                   , Счет.Забалансовый);
	ДанныеСчета.Вставить("Валютный"                       , Счет.Валютный);
	ДанныеСчета.Вставить("Количественный"                 , ?(ЗаданСчетСсылка, Счет.СчетСсылка.Количественный, Ложь));
	ДанныеСчета.Вставить("КоличествоСубконто"             , Счет.ВидыСубконто.Количество());
	ДанныеСчета.Вставить("Счет"             		  	, Счет.СчетСсылка);
	
	МаксКоличествоСубконто = Счет.Владелец.МаксимальноеКоличествоСубконто;
	
	Для Индекс = 1 По МаксКоличествоСубконто Цикл
		
		Если Индекс <= Счет.ВидыСубконто.Количество() Тогда
			
			ВидСубконтоСсылка = Счет.ВидыСубконто[Индекс - 1].ВидСубконтоСсылка;
			Если (ВидСубконтоСсылка = Неопределено) Или ВидСубконтоСсылка.Пустая() Тогда 
				ТипЗначенияСубконто = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип;
			Иначе //ЗначениеЗаполнено
				ТипЗначенияСубконто = ВидСубконтоСсылка.ТипЗначения;					
			КонецЕсли;
			
			ДанныеСчета.Вставить("ВидСубконто" + Индекс,                   Счет.ВидыСубконто[Индекс - 1].ВидСубконто);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Наименование",  Строка(Счет.ВидыСубконто[Индекс - 1].ВидСубконто));
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТипЗначения",   ТипЗначенияСубконто);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Суммовой",      СтрНайти(Счет.ВидыСубконто[Индекс - 1].ПризнакиУчетаСубконто, "Суммовой") >0);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТолькоОбороты", Счет.ВидыСубконто[Индекс - 1].ТолькоОбороты);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Ссылка", 	   ВидСубконтоСсылка);
			
		Иначе
			
			ДанныеСчета.Вставить("ВидСубконто" + Индекс,                   Неопределено);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Наименование",  Неопределено);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТипЗначения",   Неопределено);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Суммовой",      Ложь);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТолькоОбороты", Ложь);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Ссылка", 	   Неопределено);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеСчета;
	
КонецФункции

Функция ПолучитьСписокРегистраторов(ОбъектКорректировка,ТекущаяПроводка)
	
	СписокРегистраторов=Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(ОбъектКорректировка.ИсходныйДокумент) Тогда
		
		СписокРегистраторов.Добавить(ОбъектКорректировка.ИсходныйДокумент);
		Возврат СписокРегистраторов;
		
	КонецЕсли;	
	
	ДанныеОбъекта=ОбщегоНазначенияУХ.ПолучитьСтруктуруРеквизитовОбъекта(ОбъектКорректировка,ОбъектКорректировка.ПодготовитьСтруктуруПеременныхДляРасчета());
	
	ОписаниеТиповСтрока	= ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(Метаданные.Справочники.СчетаБД.ДлинаКода);
	
	ТаблицаСчетов=Новый ТаблицаЗначений;	
	ТаблицаСчетов.Колонки.Добавить("СчетДтИсточникКод",	ОписаниеТиповСтрока);
	ТаблицаСчетов.Колонки.Добавить("СчетКтИсточникКод",	ОписаниеТиповСтрока);
	
	НоваяСтрока=ТаблицаСчетов.Добавить();
	НоваяСтрока.СчетДтИсточникКод=ТекущаяПроводка.СчетДтИсточник.Код;
	НоваяСтрока.СчетКтИсточникКод=ТекущаяПроводка.СчетКтИсточник.Код;
	
	ТаблицаПроводокТек=ОбъектКорректировка.ПроводкиДокумента.СкопироватьКолонки();
	ТаблицаПроводокТек.Колонки.Добавить("Регистратор");
	
	ВыполнитьТрансляциюПроводок(ДанныеОбъекта,ТаблицаПроводокТек,ТаблицаСчетов,,Истина);
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("СчетДт",ТекущаяПроводка.СчетДт);
	СтруктураПараметров.Вставить("СчетКт",ТекущаяПроводка.СчетКт);
		
	Для Индекс=1 По 3 Цикл
		
		Если ЗначениеЗаполнено(ТекущаяПроводка["СубконтоДт"+Индекс]) Тогда
			
			СтруктураПараметров.Вставить("СубконтоДт"+Индекс,ТекущаяПроводка["СубконтоДт"+Индекс]);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяПроводка["СубконтоКт"+Индекс]) Тогда
			
			СтруктураПараметров.Вставить("СубконтоКт"+Индекс,ТекущаяПроводка["СубконтоКт"+Индекс]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивСтрок=ТаблицаПроводокТек.НайтиСтроки(СтруктураПараметров);	
	
	Для Каждого Строка ИЗ МассивСтрок Цикл
		
		СписокРегистраторов.Добавить(Строка.Регистратор);
		
	КонецЦикла;
		
	Возврат СписокРегистраторов;
	
КонецФункции // ПолучитьСписокРегистраторов() 

Функция СформироватьСтруктуруПараметровОтчета(ОбъектКорректировка,ТекущаяПроводка) Экспорт
	
	ЭтоВнешняяИБ=ЗначениеЗаполнено(ОбъектКорректировка.ИспользуемаяИБ) И (НЕ ОбъектКорректировка.ИспользуемаяИБ=Справочники.ВнешниеИнформационныеБазы.ТекущаяИБ);
	ПараметрыОтчета=Новый Структура;
	ОтборПоИзмерениям=Новый Массив;
	
	Если ЭтоВнешняяИБ Тогда
		
		ОтборПоИзмерениям.Добавить(Новый Структура("ИмяПараметра,ПредставлениеПараметра,Значение,НастройкаСоответствия","Организация","Организация",ОбъектКорректировка.Организация,УправлениеОтчетамиУХ.ПолучитьНастройкуСоответствияРеквизитов(ОбъектКорректировка.ИспользуемаяИБ.ТипБД,"Организации","Организации","Справочник")));
		
	Иначе
		
		ДополнительныйОтбор=Новый Массив;
		
		СтруктураОтбора=Новый Структура;
		СтруктураОтбора.Вставить("ИмяПараметра","Регистратор");
		СтруктураОтбора.Вставить("ПредставлениеПараметра","Регистратор");
		СтруктураОтбора.Вставить("ПолеБД","Регистратор");
		СтруктураОтбора.Вставить("СпособВычисленияПараметра",	Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений);
		СтруктураОтбора.Вставить("УточнениеСпособаОпределения",	ПолучитьСписокРегистраторов(ОбъектКорректировка,ТекущаяПроводка));
		
		ДополнительныйОтбор.Добавить(СтруктураОтбора);	
		ПараметрыОтчета.Вставить("МассивДополнительныйОтбор",ДополнительныйОтбор);
		
		ОтборПоИзмерениям.Добавить(Новый Структура("ИмяПараметра,ПредставлениеПараметра,Значение","Организация","Организация",ОбъектКорректировка.Организация));
		
	КонецЕсли;		
		
	ПараметрыОтчета.Вставить("ДатаНач",				ТекущаяПроводка.Период);
	ПараметрыОтчета.Вставить("ДатаКон",				КонецДня(ТекущаяПроводка.Период));
	ПараметрыОтчета.Вставить("ИспользуемаяИБ",		ОбъектКорректировка.ИспользуемаяИБ);
	ПараметрыОтчета.Вставить("РегистрБД",			ОбъектКорректировка.РегистрБухгалтерииИсточник);
	ПараметрыОтчета.Вставить("ПланСчетовБД",		ОбъектКорректировка.ПланСчетовИсточник); 
	ПараметрыОтчета.Вставить("ТрансляцияФинансовыхРегистров",ОбъектКорректировка.НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.ФинансовыеРегистрыВРегистрБухгалтерии);
	ПараметрыОтчета.Вставить("ПоСубсчетам",Истина);
	ПараметрыОтчета.Вставить("ПоСубсчетамИСубконто",Истина);	
	ПараметрыОтчета.Вставить("ВидОтчета","ОтчетПоПроводкам");
	ПараметрыОтчета.Вставить("Счет",				ТекущаяПроводка.СчетДтИсточник);
	ПараметрыОтчета.Вставить("КоррСчет",			ТекущаяПроводка.СчетКтИсточник);
				
	ПараметрыОтчета.Вставить("ОтборПоИзмерениям",		ОтборПоИзмерениям);
	ПараметрыОтчета.Вставить("ПолнаяДетализация",		Истина);
	ПараметрыОтчета.Вставить("ФормироватьПриОткрытии",	Истина);
		
	ПараметрыОтчета.Вставить("МассивДетализация",	Новый Массив);
	ПараметрыОтчета.Вставить("ОтборПоСубконто",		Новый Массив);
	ПараметрыОтчета.Вставить("МассивПроизводные",	Новый Массив);
	ПараметрыОтчета.Вставить("ПравилоДт",			ТекущаяПроводка.ПравилоДт);
	ПараметрыОтчета.Вставить("ПравилоКт",			ТекущаяПроводка.ПравилоКт);
	ПараметрыОтчета.Вставить("ДокументКорректировки",ОбъектКорректировка.Ссылка);
	ПараметрыОтчета.Вставить("НомерПроводки",		ТекущаяПроводка.НомерПроводки);

	Возврат ПараметрыОтчета;
	
КонецФункции

Функция ПолучитьПараметрыОтчетаПоПроводкам(ДокументКорректировки,НомерПроводки) Экспорт
	
	ДокументОбъект=ДокументКорректировки.ПолучитьОбъект();
	ОбработкаОбъект=Обработки.КорректировкиЗначенийПоказателей.Создать();
	ЗаполнитьЗначенияСвойств(ОбработкаОбъект,ДокументОбъект);
	ОбработкаОбъект.ИнициализироватьТаблицыПроводок("Трансляция");
	
	ЗапросПроводка=Новый Запрос;
	ЗапросПроводка.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТрансляцияПроводки.СчетДт КАК СчетДт,
	|	ТрансляцияПроводки.СубконтоДт1 КАК СубконтоДт1,
	|	ТрансляцияПроводки.СубконтоДт2 КАК СубконтоДт2,
	|	ТрансляцияПроводки.СубконтоДт3 КАК СубконтоДт3,
	|	ТрансляцияПроводки.Значение КАК Значение,
	|	ТрансляцияПроводки.СчетКт КАК СчетКт,
	|	ТрансляцияПроводки.СубконтоКт1 КАК СубконтоКт1,
	|	ТрансляцияПроводки.СубконтоКт2 КАК СубконтоКт2,
	|	ТрансляцияПроводки.СубконтоКт3 КАК СубконтоКт3,
	|	ТрансляцияПроводки.Комментарий КАК Комментарий,
	|	ТрансляцияПроводки.НомерПроводки КАК НомерПроводки,
	|	ТрансляцияПроводки.ШаблонПроводки КАК ШаблонПроводки,
	|	ТрансляцияПроводки.РесурсРегистра КАК РесурсРегистра,
	|	ТрансляцияПроводки.ВалютаДт КАК ВалютаДт,
	|	ТрансляцияПроводки.ВалютаКт КАК ВалютаКт,
	|	ТрансляцияПроводки.ЗначениеВалютаДт КАК ЗначениеВалютаДт,
	|	ТрансляцияПроводки.ЗначениеВалютаКт КАК ЗначениеВалютаКт,
	|	ТрансляцияПроводки.ДатаПроводки КАК ДатаПроводки,
	|	ТрансляцияПроводки.СчетДтИсточник КАК СчетДтИсточник,
	|	ТрансляцияПроводки.СчетКтИсточник КАК СчетКтИсточник,
	|	ТрансляцияПроводки.ПравилоДт КАК ПравилоДт,
	|	ТрансляцияПроводки.ПравилоКт КАК ПравилоКт,
	|	ТрансляцияПроводки.КоличествоДт КАК КоличествоДт,
	|	ТрансляцияПроводки.КоличествоКт КАК КоличествоКт,
	|	ТрансляцияПроводки.Период КАК Период,
	|	ТрансляцияПроводки.ВидОперации КАК ВидОперации,
	|	ТрансляцияПроводки.ПодразделениеДт КАК ПодразделениеДт,
	|	ТрансляцияПроводки.ПодразделениеКт КАК ПодразделениеКт,
	|	ТрансляцияПроводки.НаправлениеДеятельностиДт КАК НаправлениеДеятельностиДт,
	|	ТрансляцияПроводки.НаправлениеДеятельностиКт КАК НаправлениеДеятельностиКт,
	|	ВЫБОР
	|		КОГДА ТрансляцияПроводки.НомерПроводки = &НомерПроводки
	|			ТОГДА 2
	|		КОГДА ТрансляцияПроводки.НомерСтроки = &НомерПроводки
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПолеПоиск
	|ИЗ
	|	Документ.Трансляция.Проводки КАК ТрансляцияПроводки
	|ГДЕ
	|	(ТрансляцияПроводки.НомерСтроки = &НомерПроводки
	|			ИЛИ ТрансляцияПроводки.НомерПроводки = &НомерПроводки)
	|	И ТрансляцияПроводки.Ссылка = &ДокументКорректировки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолеПоиск УБЫВ";
	
	ЗапросПроводка.УстановитьПараметр("ДокументКорректировки",ДокументКорректировки);
	ЗапросПроводка.УстановитьПараметр("НомерПроводки",НомерПроводки);
	
	ДанныеПроводки=ЗапросПроводка.Выполнить().Выбрать();
	
	Если ДанныеПроводки.Следующий() Тогда
		
		Возврат СформироватьСтруктуруПараметровОтчета(ОбработкаОбъект,ДанныеПроводки);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // ПолучитьПараметрыОтчетаПоПроводкам()

Функция ПолучитьПодробнуюИнформацию(ИсточникТрансляции,РегистрБухгалтерииИсточник,ДтКт="") Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СоответствияСчетовДляТрансляции.СчетИсточник КАК СчетИсточник,
	|	СоответствияСчетовДляТрансляции.СчетПриемник КАК СчетПриемник,
	|	ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса.(
	|		КодАналитики КАК КодАналитики,
	|		Поле КАК Поле,
	|		СпособЗаполнения КАК СпособЗаполнения,
	|		ФиксированноеЗначение КАК ФиксированноеЗначение
	|	) КАК ПравилаИспользованияПолейЗапроса,
	|	ИсточникиДанныхДляРасчетов.ДополнительноеПредставление КАК ДополнительноеПредставление,
	|	СоответствияСчетовДляТрансляции.КоррСчетИсточник КАК КоррСчетИсточник,
	|	СоответствияСчетовДляТрансляции.СчетИсточник.Код КАК СчетИсточникКод,
	|	СоответствияСчетовДляТрансляции.КоррСчетИсточник.Код КАК КоррСчетИсточникКод,
	|	СоответствияСчетовДляТрансляции.СчетПриемник.Код КАК СчетПриемникКод
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоответствияСчетовДляТрансляции КАК СоответствияСчетовДляТрансляции
	|		ПО ИсточникиДанныхДляРасчетов.ПотребительРасчета = СоответствияСчетовДляТрансляции.Ссылка
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ИсточникТрансляции);
	
	Результат=Запрос.Выполнить().Выбрать();
	Результат.Следующий();
		
	ТабАналитикаСчетИсточник=РаботаСПолямиАналитикиУХ.ЗаполнитьСубконтоПроводки(,РегистрБухгалтерииИсточник,Результат.СчетИсточник,?(ДтКт="","Дт",ДтКт));
	
	Если ЗначениеЗаполнено(Результат.КоррСчетИсточник) Тогда
		
		ТабАналитикаКоррСчетИсточник=РаботаСПолямиАналитикиУХ.ЗаполнитьСубконтоПроводки(,РегистрБухгалтерииИсточник,Результат.КоррСчетИсточник,"Кт");
		
	КонецЕсли;
		
	ТабАналитикаПриемник=РаботаСПолямиАналитикиУХ.ЗаполнитьСубконтоПроводки(,РегистрБухгалтерииИсточник,Результат.СчетПриемник,ДтКт);
	
	ПравилаИспользованияПолей=Результат.ПравилаИспользованияПолейЗапроса.Выгрузить();
	
	СтрСоответствие="";
	
	Для Каждого Строка ИЗ ТабАналитикаПриемник Цикл
		
		СтрСоответствие=СтрСоответствие+","+Символы.ПС+Строка.Синоним+" = ";
		
		СтрокаПравило=ПравилаИспользованияПолей.Найти(СтрЗаменить(Строка.Имя,"Субконто"+ДтКт,"Аналитика"),"КодАналитики");
		
		Если СтрокаПравило=Неопределено Тогда
			
			СтрСоответствие=СтрСоответствие+"???";
			Продолжить;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПравило.Поле) Тогда
			
			МассивПутей=СтрРазделить(СтрокаПравило.Поле,".",Ложь);
			ИсходноеПоле=МассивПутей[0];	
			ПолеСиноним="";
			
			Если СтрНайти(ИсходноеПоле,"СубконтоДт")>0 Тогда
				
				ПолеИсточник=ТабАналитикаСчетИсточник.Найти(ИсходноеПоле,"Имя");
				
				Если НЕ ПолеИсточник=Неопределено Тогда
					
					ПолеСиноним=ПолеИсточник.Синоним;
					
				КонецЕсли;
				
			ИначеЕсли СтрНайти(ИсходноеПоле,"СубконтоКт")>0 Тогда
				
				Если НЕ ТабАналитикаКоррСчетИсточник=Неопределено Тогда 
					
					ПолеИсточник=ТабАналитикаКоррСчетИсточник.Найти(ИсходноеПоле,"Имя");
					
					Если НЕ ПолеИсточник=Неопределено Тогда
						
						ПолеСиноним=ПолеИсточник.Синоним;
						
					КонецЕсли;
					
				Иначе
					
					ПолеИсточник=ТабАналитикаСчетИсточник.Найти(ИсходноеПоле,"Имя");
					
					Если НЕ ПолеИсточник=Неопределено Тогда
						
						ПолеСиноним=ПолеИсточник.Синоним;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				ПолеСиноним=ИсходноеПоле;
				
			КонецЕсли;
			
			Если ПустаяСтрока(ПолеСиноним) Тогда
				
				СтрСоответствие=СтрСоответствие+"???";
				Продолжить;
				
			Иначе
				
				МассивПутей[0]=ПолеСиноним;
				СтрСоответствие=СтрСоответствие+СтрСоединить(МассивПутей,".");
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаПравило.ФиксированноеЗначение) Тогда
			
			СтрСоответствие=СтрСоответствие+Строка(СтрокаПравило.ФиксированноеЗначение);
			
		Иначе
			
			СтрСоответствие=СтрСоответствие+"???";
			
		КонецЕсли;
		
	КонецЦикла;
	
	СоответствиеПодробно=Сред(СтрЗаменить(СтрЗаменить(СтрСоответствие,"Дт",""),"Кт",""),3);
	СоответствиеПодробно=СтрЗаменить(СоответствиеПодробно,"Субконто","С");
	ОтборПодробно="";
	
	НачалоПриемник=СтрНайти(Результат.ДополнительноеПредставление,"Пр:");
	
	ТекстОтбор=Лев(Результат.ДополнительноеПредставление,НачалоПриемник-1);
	
	ТекстСчетИсточник=Результат.СчетИсточникКод+?(ЗначениеЗаполнено(Результат.КоррСчетИсточникКод),СтрШаблон(Нстр("ru = ', корр. %1'"), Результат.КоррСчетИсточникКод),"");
	ТекстСчетПриемник=Результат.СчетПриемникКод;
	
	Если СтрНайти(ТекстОтбор,"Ист:")=0 Тогда
		
		Возврат Новый Структура("ОтборПодробно,СоответствиеПодробно,ТекстСчетИсточник,ТекстСчетПриемник",ОтборПодробно,СоответствиеПодробно,ТекстСчетИсточник,ТекстСчетПриемник);
		
	КонецЕсли;
	
	ТекстОтбор=СтрЗаменить(ТекстОтбор,"Ист: ","");
	
	Если НЕ ТабАналитикаКоррСчетИсточник=Неопределено Тогда
		
		Для Каждого Строка ИЗ ТабАналитикаКоррСчетИсточник Цикл
			
			ТекстСокрОтбор=СтрЗаменить(Строка.Имя,"СубконтоКт","КС");
			
			ТекстОтбор=СтрЗаменить(ТекстОтбор,ТекстСокрОтбор,Строка.Синоним);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Строка ИЗ ТабАналитикаСчетИсточник Цикл
		
		ТекстСокрОтбор=СтрЗаменить(Строка.Имя,"СубконтоДт","С");
		
		ТекстОтбор=СтрЗаменить(ТекстОтбор,ТекстСокрОтбор,Строка.Синоним);
		
	КонецЦикла;
	
	ОтборПодробно=Сред(СтрЗаменить(СтрЗаменить(ТекстОтбор,"Дт",""),"Кт",""),2);
	ОтборПодробно=СтрЗаменить(ОтборПодробно,"Субконто","С");	
	Возврат Новый Структура("ОтборПодробно,СоответствиеПодробно,ТекстСчетИсточник,ТекстСчетПриемник",ОтборПодробно,СоответствиеПодробно,ТекстСчетИсточник,ТекстСчетПриемник);
		
	
КонецФункции // ПолучитьПодробнуюИнформацию() 

Функция ПолучитьПодробнуюИнформациюРегистры(ИсточникТрансляции,ДтКт="") Экспорт
		
	ИсточникОбъект=ИсточникТрансляции.ПолучитьОбъект();
	ИсточникОбъект.ПодготовитьТаблицыСопоставленийИОтборов();
	
	ПредставлениеОтбора			= УправлениеОтчетамиУХ.СформироватьПредставлениеОтбора(ИсточникОбъект.ДеревоПараметровОтбораБД);
	ПредставлениеСопоставления	= УправлениеОтчетамиУХ.СформироватьПредставлениеСопоставления(ИсточникОбъект.ТаблицаСоответствияБД);

	Возврат Новый Структура("ОтборПодробно,СоответствиеПодробно",ПредставлениеОтбора,ПредставлениеСопоставления);
		
	
КонецФункции // ПолучитьПодробнуюИнформациюРегистры()

Процедура ОбновитьДокументыТрансляции(МассивДокументов) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Трансляция.Ссылка КАК Ссылка,
	|	Трансляция.ПериодОтчета КАК ПериодОтчета,
	|	Трансляция.Сценарий КАК Сценарий,
	|	Трансляция.Организация КАК Организация,
	|	Трансляция.ПериодОтражения КАК ПериодОтражения,
	|	Трансляция.ШаблонКорректировки КАК ШаблонКорректировки,
	|	Трансляция.УчетнаяПолитика КАК УчетнаяПолитика
	|ИЗ
	|	Документ.Трансляция КАК Трансляция
	|ГДЕ
	|	Трансляция.Проведен
	|	И НЕ Трансляция.Сторнирование
	|	И Трансляция.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов",МассивДокументов);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		КорректировкиЗначенийПоказателей32.ОбработатьКорректировкиПоПараметрам(Перечисления.ВидыДокументовЭтапа.ДокументыТрансляции,
			Результат.ПериодОтчета,
			Результат.Сценарий,
			Результат.Организация,
			Результат.ШаблонКорректировки,
			,
			Результат.Ссылка,
			Результат.ПериодОтражения,,Результат.УчетнаяПолитика);
	
	
	КонецЦикла;	
	
	
КонецПроцедуры // ОбновитьДокументыТрансляции() 

Функция ПолучитьТаблицаДанныхИсточник(ДанныеДокумента,РесурсыДляОтображения)

	ТекстРесурсыИсточник="";
		
	Для Каждого СтрРесурс ИЗ РесурсыДляОтображения Цикл
		
		Если НЕ СтрРесурс.Отображать Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрРесурс.РесурсИсточникБалансовый Тогда
			
			ТекстРесурсыИсточник=ТекстРесурсыИсточник+",
			|СУММА("+СтрРесурс.РесурсИсточник+") КАК "+СтрРесурс.РесурсИсточник;
								
		Иначе
						
			ТекстРесурсыИсточник=ТекстРесурсыИсточник+",
			|СУММА("+СтрРесурс.РесурсИсточник+"Дт) КАК "+СтрРесурс.РесурсИсточник+"Дт,
			|СУММА("+СтрРесурс.РесурсИсточник+"Кт) КАК "+СтрРесурс.РесурсИсточник+"Кт";
								
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СчетДт.Код КАК Счет,
	|	СчетКт.Код КАК КоррСчет"+ТекстРесурсыИсточник+"
	|	ИЗ РегистрБухгалтерии."+ ДанныеДокумента.РегистрБухгалтерииИсточник+" Как РегистрИсточник
	|ГДЕ
	|	РегистрИсточник.Организация = &Организация
	|	И РегистрИсточник.Период МЕЖДУ &ДатаНач И &ДатаКон"+?(ЗначениеЗаполнено(ДанныеДокумента.ИсходныйДокумент)," И Регистратор=&Регистратор","")+"
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрИсточник.СчетДт.Код,
	|	РегистрИсточник.СчетКт.Код";
	
	Запрос.УстановитьПараметр("Организация",ДанныеДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаНач",ДанныеДокумента.ДатаНачалаОтбор);
	Запрос.УстановитьПараметр("ДатаКон",ДанныеДокумента.ДатаОкончанияОтбор);
	Запрос.УстановитьПараметр("Регистратор",ДанныеДокумента.ИсходныйДокумент);
	
	ТаблицаДанныхИсточник=Запрос.Выполнить().Выгрузить();		
		
	Возврат ТаблицаДанныхИсточник;
	
КонецФункции // ПолучитьТаблицаДанныхИсточник()

Функция ВИБ_ПолучитьТаблицаДанныхИсточник(ДанныеДокумента,РесурсыДляОтображения)
	
	//Запрос=Новый Запрос;
	//Запрос.Текст=ПолучитьИсточникТрансляции();
	//Запрос.УстановитьПараметр("НазначениеРасчетов",ДанныеДокумента.ПравилоОбработки);
	//
	//мОперанды=Запрос.Выполнить().Выгрузить();
	//
	//// обрезаем коды
	//мОперанды.Колонки.Код.Имя = "Имя";
	//мОперанды.Колонки.Добавить("Код");
	//
	//Для Каждого Стр Из мОперанды Цикл
	//	Стр.Код = СокрЛП(Стр.Имя);
	//КонецЦикла;
	//
	//мОперанды.Колонки.Удалить(мОперанды.Колонки.Имя);	
	//мОперанды.Индексы.Добавить("Код");
	//
	//мОперанды.Колонки.Добавить("АналитикВидаОтчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1,0));
	//мОперанды.Колонки.Добавить("Ресурс",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	//мОперанды.Колонки.Добавить("ПравилаВычисленияПараметровЗапроса");
	//
	//СтрОперанд=мОперанды[0];
	//СтрОперанд.ПравилаИспользованияПолейЗапроса.Очистить();
	//
	//ТекстРесурсыИсточник="";
	//
	//ДанныеОбъекта=Новый Структура;
	//ДанныеОбъекта.Вставить("Организация",	ДанныеДокумента.Организация);
	//ДанныеОбъекта.Вставить("ПериодОтчета",	Новый Структура("ДатаНачала,ДатаОкончания",ДанныеДокумента.ДатаНачалаОтбор,ДанныеДокумента.ДатаОкончанияОтбор));
	//ДанныеОбъекта.Вставить("Сценарий",		ДанныеДокумента.Сценарий);
	//ДанныеОбъекта.Вставить("ИспользуемаяИБ",ДанныеДокумента.ИспользуемаяИБ);
	//ДанныеОбъекта.Вставить("Регистратор",	ДанныеДокумента.ИсходныйДокумент);
	//
	//МассивИсключаемыхВНА=Новый СписокЗначений;
	//
	//Для Каждого СтрРесурс ИЗ РесурсыДляОтображения Цикл
	//	
	//	Если НЕ СтрРесурс.Отображать Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Если СтрРесурс.РесурсИсточникБалансовый Тогда
	//		
	//		ТекстРесурсыИсточник=ТекстРесурсыИсточник+",
	//		|СУММА("+СтрРесурс.РесурсИсточник+") КАК "+СтрРесурс.РесурсИсточник;
	//		
	//		ПолеРесурс=СтрОперанд.ПравилаИспользованияПолейЗапроса.Добавить();
	//		ПолеРесурс.Поле			= СтрРесурс.РесурсИсточник;
	//		ПолеРесурс.Синоним		= СтрРесурс.РесурсИсточник;
	//		ПолеРесурс.КодАналитики	= СтрРесурс.РесурсПриемник;
	//	
	//	Иначе
	//		
	//		ПолеРесурс=СтрОперанд.ПравилаИспользованияПолейЗапроса.Добавить();
	//		ПолеРесурс.Поле			= СтрРесурс.РесурсИсточник+"Дт";
	//		ПолеРесурс.Синоним		= СтрРесурс.РесурсИсточник+"Дт";
	//		ПолеРесурс.КодАналитики	= СтрРесурс.РесурсПриемник+"Дт";
	//		
	//		ПолеРесурс=СтрОперанд.ПравилаИспользованияПолейЗапроса.Добавить();
	//		ПолеРесурс.Поле			= СтрРесурс.РесурсИсточник+"Кт";
	//		ПолеРесурс.Синоним		= СтрРесурс.РесурсИсточник+"Кт";
	//		ПолеРесурс.КодАналитики	= СтрРесурс.РесурсПриемник+"Кт";
	//		
	//		ТекстРесурсыИсточник=ТекстРесурсыИсточник+",
	//		|СУММА("+СтрРесурс.РесурсИсточник+"Дт) КАК "+СтрРесурс.РесурсИсточник+"Дт,
	//		|СУММА("+СтрРесурс.РесурсИсточник+"Кт) КАК "+СтрРесурс.РесурсИсточник+"Кт";
	//				
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//СтрОперанд.ТекстЗапросаМодуля="ВЫБРАТЬ "+Сред(ТекстРесурсыИсточник,2)+" {ВЫБРАТЬ СчетДт.*,СчетКт.*"+?(ЗначениеЗаполнено(ДанныеДокумента.ИсходныйДокумент),",Регистратор","")+"} ИЗ РегистрБухгалтерии."+ ДанныеДокумента.РегистрБухгалтерииИсточник + ".ДвиженияССубконто({&ДатаНач}, {&ДатаКон},Активность "+?(ПустаяСтрока(СтрОперанд.ТекстОтбора),""," И "+СтрОперанд.ТекстОтбора)+?(ЗначениеЗаполнено(ДанныеДокумента.ИсходныйДокумент)," И Регистратор=&Регистратор","")+")";
	//		
	//ДанныеРасчета=УправлениеОтчетамиУХ.ПодготовитьОперандыДляПолученияДанных(мОперанды,Ложь,,,Ложь);
	//
	//СтрЗапрос=ДанныеРасчета.мТабПоказателиЗапросы[0];
	//
	//Если ТекущаяИБ(ДанныеДокумента.ИспользуемаяИБ) Тогда
	//	
	//	ДобавитьТаблицуОтборомПоРегистратору(ДанныеДокумента,СтрЗапрос.ПравилаВычисленияПараметров);
	//	ТаблицаДанныхИсточник=УправлениеОтчетамиУХ.ПолучитьТаблицуПоИсточникуВнутрРегистрНакопления(ДанныеОбъекта,СтрЗапрос);
	//	
	//	МассивИсключаемыхВНА.ЗагрузитьЗначения(ВстраиваниеУХ.ПолучитьВнаУчитываемыеПараллельно());
	//	
	//	Если МассивИсключаемыхВНА.Количество()>0 Тогда
	//		
	//		ДополнитьТаблицуДанныхПараллельныйУчет(ТаблицаДанныхИсточник,СтрЗапрос,ДанныеДокумента,МассивИсключаемыхВНА,ДанныеОбъекта);
	//		
	//	Иначе
	//		
	//		ТаблицаДанныхИсточник.Колонки.Добавить("СуммаИсключения",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	//		
	//	КонецЕсли;	
	//	
	//Иначе
	//	
	//	СтруктураЗапроса 		= РасширениеИнтеграцииУХ.ПодготовитьСтруктуруЗапроса(ДанныеОбъекта,СтрЗапрос);	
	//	ТаблицаДанныхИсточник	= РасширениеИнтеграцииУХ.ПолучитьТаблицуДанныхПоЗапросу(СтруктураЗапроса);
	//	
	//КонецЕсли;

	//
	
	
КонецФункции // ПолучитьТаблицаДанныхИсточник()

Функция ПроверитьУстановитьНаличиеРасхождений(ДокументТрансляции) Экспорт
	
	ЗапросДокумент=Новый Запрос;
	ЗапросДокумент.Текст="ВЫБРАТЬ
	|	Трансляция.Сценарий КАК Сценарий,
	|	Трансляция.Организация КАК Организация,
	|	Трансляция.ПериодОтчета КАК ПериодОтчета,
	|	Трансляция.ПериодОтражения КАК ПериодОтражения,
	|	Трансляция.ШаблонКорректировки КАК ШаблонКорректировки,
	|	Трансляция.ПравилоОбработки КАК ПравилоОбработки,
	|	Трансляция.ПериодОтчета.ДатаНачала КАК ДатаНачалаОтбор,
	|	КОНЕЦПЕРИОДА(Трансляция.ПериодОтчета.ДатаОкончания, ДЕНЬ) КАК ДатаОкончанияОтбор,
	|	Трансляция.ПериодОтражения.ДатаНачала КАК ДатаНачалаОтражение,
	|	КОНЕЦПЕРИОДА(Трансляция.ПериодОтражения.ДатаОкончания, ДЕНЬ) КАК ДатаОкончанияОтражение,
	|	Трансляция.ШаблонКорректировки.ПланСчетовИсточник КАК ПланСчетовИсточник,
	|	Трансляция.ШаблонКорректировки.ПланСчетовПриемник КАК ПланСчетовПриемник,
	|	Трансляция.ШаблонКорректировки.РегистрБухгалтерииИсточник КАК РегистрБухгалтерииИсточник,
	|	Трансляция.ШаблонКорректировки.РегистрБухгалтерииПриемник КАК РегистрБухгалтерииПриемник,
	|	Трансляция.ИсходныйДокумент КАК ИсходныйДокумент,
	|	Трансляция.ИспользуемаяИБ КАК ИспользуемаяИБ,
	|	ЕСТЬNULL(СостоянияДокументовТрансляции.ЕстьРасхождения, ЛОЖЬ) КАК ЕстьРасхождения
	|ИЗ
	|	Документ.Трансляция КАК Трансляция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовТрансляции КАК СостоянияДокументовТрансляции
	|		ПО Трансляция.Ссылка = СостоянияДокументовТрансляции.ДокументТрансляции
	|ГДЕ
	|	Трансляция.Ссылка = &ДокументТрансляции";
	
	ЗапросДокумент.УстановитьПараметр("ДокументТрансляции",ДокументТрансляции);
	ДанныеДокумента=ЗапросДокумент.Выполнить().Выбрать();
	ДанныеДокумента.Следующий();
	
	ЗапросРесурсы=Новый Запрос;
	ЗапросРесурсы.Текст="ВЫБРАТЬ
	|	РегистрыБухгалтерииБДРесурсы.Имя КАК РесурсИсточник,
	|	РегистрыБухгалтерииБДРесурсы.Балансовый КАК Отображать,
	|	ШаблоныТрансляцийСоответствиеРесурсов.РесурсПриемник,
	|	РегистрыБухгалтерииБДРесурсы.Балансовый КАК РесурсИсточникБалансовый
	|ИЗ
	|	Справочник.ШаблоныТрансляций.СоответствиеРесурсов КАК ШаблоныТрансляцийСоответствиеРесурсов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РегистрыБухгалтерииБД.Ресурсы КАК РегистрыБухгалтерииБДРесурсы
	|		ПО ШаблоныТрансляцийСоответствиеРесурсов.Ссылка.РегистрБухгалтерииИсточник = РегистрыБухгалтерииБДРесурсы.Ссылка
	|			И ШаблоныТрансляцийСоответствиеРесурсов.РесурсИсточник = РегистрыБухгалтерииБДРесурсы.Имя
	|ГДЕ
	|	ШаблоныТрансляцийСоответствиеРесурсов.Ссылка = &Ссылка
	|	И НЕ ШаблоныТрансляцийСоответствиеРесурсов.РесурсИсточник = """"
	|	И НЕ ШаблоныТрансляцийСоответствиеРесурсов.РесурсПриемник = """"";
	
	ЗапросРесурсы.УстановитьПараметр("Ссылка",ДанныеДокумента.ШаблонКорректировки);
	
	РесурсыДляОтображения=ЗапросРесурсы.Выполнить().Выгрузить();
		
	ДанныеОбъекта=Новый Структура;
	ДанныеОбъекта.Вставить("Организация",	ДанныеДокумента.Организация);
	ДанныеОбъекта.Вставить("ПериодОтчета",	Новый Структура("ДатаНачала,ДатаОкончания",ДанныеДокумента.ДатаНачалаОтбор,ДанныеДокумента.ДатаОкончанияОтбор));
	ДанныеОбъекта.Вставить("Сценарий",		ДанныеДокумента.Сценарий);
	ДанныеОбъекта.Вставить("ИспользуемаяИБ",ДанныеДокумента.ИспользуемаяИБ);
	ДанныеОбъекта.Вставить("Регистратор",	ДанныеДокумента.ИсходныйДокумент);
		
	Если ТекущаяИБ(ДанныеДокумента.ИспользуемаяИБ) Тогда
		
		ТаблицаДанныхИсточник=ПолучитьТаблицаДанныхИсточник(ДанныеДокумента,РесурсыДляОтображения);
		
	Иначе
		
		ТаблицаДанныхИсточник=ВИБ_ПолучитьТаблицаДанныхИсточник(ДанныеДокумента,РесурсыДляОтображения);
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ
	|	ТаблицаДанныхИсточник.Счет КАК СчетДтИсточникКод,
	|	ТаблицаДанныхИсточник.КоррСчет КАК СчетКтИсточникКод,
	|	ТаблицаДанныхИсточник.Сумма КАК Сумма
	|ПОМЕСТИТЬ ТаблицаДанныхИсточник
	|ИЗ
	|	&ТаблицаДанныхИсточник КАК ТаблицаДанныхИсточник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ Первые 1
	|	СравнениеОборотов.СчетДтИсточник КАК СчетДтИсточник,
	|	СравнениеОборотов.СчетКтИсточник КАК СчетКтИсточник,
	|	СравнениеОборотов.Сумма КАК Сумма,
	|	СравнениеОборотов.СуммаВВалютеУчета КАК СуммаВВалютеУчета,
	|	СравнениеОборотов.Расхождение_Сумма_СуммаВВалютеУчета КАК Расхождение_Сумма_СуммаВВалютеУчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОбъединениеДанных.СчетДтИсточник КАК СчетДтИсточник,
	|		ОбъединениеДанных.СчетКтИсточник КАК СчетКтИсточник,
	|		СУММА(ОбъединениеДанных.Сумма) КАК Сумма,
	|		СУММА(ОбъединениеДанных.СуммаВВалютеУчета) КАК СуммаВВалютеУчета,
	|		СУММА(ОбъединениеДанных.Сумма - ОбъединениеДанных.СуммаВВалютеУчета) КАК Расхождение_Сумма_СуммаВВалютеУчета
	|	ИЗ
	|		(ВЫБРАТЬ
	|			СчетаБДИсточникДт.Ссылка КАК СчетДтИсточник,
	|			СчетаБДИсточникКт.Ссылка КАК СчетКтИсточник,
	|			ТаблицаДанныхИсточник.Сумма КАК Сумма,
	|			0 КАК СуммаВВалютеУчета
	|		ИЗ
	|			ТаблицаДанныхИсточник КАК ТаблицаДанныхИсточник
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СчетаБД КАК СчетаБДИсточникДт
	|				ПО ТаблицаДанныхИсточник.СчетДтИсточникКод = СчетаБДИсточникДт.Код
	|					И (СчетаБДИсточникДт.Владелец = &ПланСчетовИсточник)
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СчетаБД КАК СчетаБДИсточникКт
	|				ПО ТаблицаДанныхИсточник.СчетКтИсточникКод = СчетаБДИсточникКт.Код
	|					И (СчетаБДИсточникКт.Владелец = &ПланСчетовИсточник)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			РегистрБухгалтерииПриемник.СчетДтИсточник,
	|			РегистрБухгалтерииПриемник.СчетКтИсточник,
	|			0,
	|			СУММА(РегистрБухгалтерииПриемник.СуммаВВалютеУчета)
	|		ИЗ
	|			РегистрБухгалтерии.МСФО.ДвиженияССубконто(
	|					&ДатаНач,
	|					&ДатаКон,
	|					Активность
	|						И НЕ(СчетДтИсточник = ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяССылка)
	|								ИЛИ СчетКтИсточник = ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяССылка))
	|						И Регистратор = &ДокументТрансляции,
	|					,
	|					) КАК РегистрБухгалтерииПриемник
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РегистрБухгалтерииПриемник.СчетДтИсточник,
	|			РегистрБухгалтерииПриемник.СчетКтИсточник) КАК ОбъединениеДанных
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ОбъединениеДанных.СчетДтИсточник,
	|		ОбъединениеДанных.СчетКтИсточник) КАК СравнениеОборотов
	|ГДЕ
	|	НЕ СравнениеОборотов.Расхождение_Сумма_СуммаВВалютеУчета = 0";
			
	Если ЗначениеЗаполнено(ДанныеДокумента.ПериодОтражения) И (НЕ ДанныеДокумента.ПериодОтражения=ДанныеДокумента.ПериодОтчета) Тогда
		
		Запрос.УстановитьПараметр("ДатаНач",ДанныеДокумента.ДатаНачалаОтражение);
		Запрос.УстановитьПараметр("ДатаКон",ДанныеДокумента.ДатаОкончанияОтражение);
		
	Иначе
		
		Запрос.УстановитьПараметр("ДатаНач",ДанныеДокумента.ДатаНачалаОтбор);
		Запрос.УстановитьПараметр("ДатаКон",ДанныеДокумента.ДатаОкончанияОтбор);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПланСчетовИсточник",ДанныеДокумента.ПланСчетовИсточник);
	Запрос.УстановитьПараметр("ИсходныйДокумент",ДанныеДокумента.ИсходныйДокумент);
	Запрос.УстановитьПараметр("ДокументТрансляции",ДокументТрансляции);
	Запрос.УстановитьПараметр("ТаблицаДанныхИсточник",ТаблицаДанныхИсточник);
	
	Результат=Запрос.Выполнить();
	
	ЕстьРасхождения=Не Результат.Пустой();
	
	ОбновитьСостояниеДокумента(ДокументТрансляции,Новый Структура("ЕстьРасхождения",ЕстьРасхождения));
			
КонецФункции // ПроверитьУстановитьНаличиеРасхождений() 

Процедура ДополнитьТаблицуДанныхПараллельныйУчет(ТаблицаДанныхИсточник,ДанныеДокумента, МассивИсключаемыхВНА,ТекстРесурсыИсточник)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ТаблицаДанныхИсточник.*
	|ПОМЕСТИТЬ ТаблицаДанныхИсточник
	|ИЗ
	|	&ТаблицаДанныхИсточник КАК ТаблицаДанныхИсточник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаБД.Ссылка КАК Ссылка,
	|	СчетаБД.СчетСсылка КАК СчетСсылка,
	|	СчетаБД.Код КАК Код
	|ПОМЕСТИТЬ СчетаБД
	|ИЗ
	|	Справочник.СчетаБД КАК СчетаБД
	|ГДЕ
	|	СчетаБД.Владелец = &ПланСчетовИсточник
	|Индексировать ПО СчетаБД.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанныхИсточник.*,
	|	СчетаДт.Ссылка КАК СчетДтИсточник,
	|	СчетаДт.СчетСсылка КАК СчетДтИсточникСсылка,
	|	СчетаКт.Ссылка КАК СчетКтИсточник,
	|	СчетаКт.СчетСсылка КАК СчетКтИсточникСсылка
	|ИЗ
	|	ТаблицаДанныхИсточник КАК ТаблицаДанныхИсточник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаБД КАК СчетаДт
	|		ПО ТаблицаДанныхИсточник.Счет = СчетаДт.Код
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаБД КАК СчетаКт
	|		ПО ТаблицаДанныхИсточник.КоррСчет = СчетаКт.Код";
	
	Запрос.УстановитьПараметр("ТаблицаДанныхИсточник",	ТаблицаДанныхИсточник);
	Запрос.УстановитьПараметр("ПланСчетовИсточник",		ДанныеДокумента.ПланСчетовИсточник);
	МассивТиповВНА=Справочники.ГруппыВНАМСФО.ПолучитьТипыОбъектовВНА();
	
	ТаблицаДанныхИсточник=Запрос.Выполнить().Выгрузить();
	
	ТаблицаДанныхИсточник.Колонки.Добавить("СуммаИсключения",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ТаблицаДанныхИсточник.Колонки.Добавить("ТекстОтбораДт",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	ТаблицаДанныхИсточник.Колонки.Добавить("ТекстОтбораКт",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200)); 
	
	Запрос.УстановитьПараметр("Регистратор",ДанныеДокумента.ИсходныйДокумент);
	Запрос.УстановитьПараметр("Организация",ДанныеДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаНач",ДанныеДокумента.ДатаНачалаОтбор);
	Запрос.УстановитьПараметр("ДатаКон",ДанныеДокумента.ДатаОкончанияОтбор);
	

	Для Каждого Строка ИЗ ТаблицаДанныхИсточник Цикл
		
		ЕстьСубконто=Ложь;		
		МассивВидовСубконтоВНА=Новый Массив;
		
		Обработки.КорректировкиЗначенийПоказателей.ДополнитьТекстОтбораИсключаемыхВНА(Строка,ЕстьСубконто,МассивТиповВНА,МассивВидовСубконтоВНА);
		
		Если НЕ ЕстьСубконто Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если МассивИсключаемыхВНА=Неопределено Тогда
			
			МассивИсключаемыхВНА = ВстраиваниеУХ.ПолучитьВнаУчитываемыеПараллельно();
			Запрос.УстановитьПараметр("МассивИсключаемыхВНА",МассивИсключаемыхВНА);
	
		КонецЕсли;	
		
		ТекстОтбор="";
	
		Если НЕ ПустаяСтрока(Строка.ТекстОтбораДт) Тогда
			
			ТекстОтбор=ТекстОтбор+" И "+Строка.ТекстОтбораДт;
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Строка.ТекстОтбораКт) Тогда
			
			ТекстОтбор=ТекстОтбор+" И "+Строка.ТекстОтбораКт;
			
		КонецЕсли;

		
		Запрос.Текст="ВЫБРАТЬ "+Сред(ТекстРесурсыИсточник,2)+"
		|ИЗ РегистрБухгалтерии."+ ДанныеДокумента.РегистрБухгалтерииИсточник + ".ДвиженияССубконто(&ДатаНач,&ДатаКон,Активность И Организация=&Организация"
		+?(ЗначениеЗаполнено(ДанныеДокумента.ИсходныйДокумент)," И Регистратор=&Регистратор","")+" И СчетДт=&СчетДт И СчетКт=&СчетКт И НЕ ("+Сред(ТекстОтбор,3)+"))";			
						
		Запрос.УстановитьПараметр("СчетДт",Строка.СчетДтИсточникСсылка);
		Запрос.УстановитьПараметр("СчетКт",Строка.СчетКтИсточникСсылка);
		Запрос.УстановитьПараметр("МассивВидовСубконтоВНА",МассивВидовСубконтоВНА);
			
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			Строка.СуммаИсключения=Результат.Сумма;
			
		КонецЕсли;
				
	КонецЦикла;
		
КонецПроцедуры // ДополнитьТаблицуДанныхПараллельныйУчет()


Процедура ОбновитьСостояниеДокумента(ДокументТрансляции,СтруктураРесурсов) Экспорт
	
	НаборЗаписей=РегистрыСведений.СостоянияДокументовТрансляции.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументТрансляции.Установить(ДокументТрансляции);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество()=0 Тогда
		
		НоваяСтрока=НаборЗаписей.Добавить();
		НоваяСтрока.ДокументТрансляции=ДокументТрансляции;
		
	КонецЕсли;
	
	Для Каждого КлючИЗначение ИЗ СтруктураРесурсов Цикл
		
		НаборЗаписей[0][КлючИЗначение.Ключ]=КлючИЗначение.Значение;
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);	
	
КонецПроцедуры // ОбновитьСостояниеДокумента()

Процедура УстановитьПризнакИзмененияИсходныхДанных(НаименованиеРегистра,ПериодИзменения,Организация=Неопределено) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Трансляция.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Трансляция КАК Трансляция
	|ГДЕ
	|	Трансляция.Проведен
	|	И (Трансляция.НаправлениеТрансляции = ЗНАЧЕНИЕ(Перечисление.НаправленияТрансляцииДанных.РегистрБухгалтерииВРегистрБухгалтерии)
	|			ИЛИ Трансляция.НаправлениеТрансляции = ЗНАЧЕНИЕ(Перечисление.НаправленияТрансляцииДанных.РегистрБухгалтерииВПоказатели))
	|	И Трансляция.ИсходныйДокумент = НЕОПРЕДЕЛЕНО
	|	И Трансляция.ИмяРегистраИсточник = &НаименованиеРегистра
	|	И Трансляция.НачалоПериода <= &ПериодИзменения
	|	И Трансляция.ОкончаниеПериода >= &ПериодИзменения";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|	И Трансляция.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация",			Организация);
		
	КонецЕсли;
		
	Запрос.УстановитьПараметр("НаименованиеРегистра",	НаименованиеРегистра);
	Запрос.УстановитьПараметр("ПериодИзменения",		ПериодИзменения);
	
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ОбновитьСостояниеДокумента(Результат.Ссылка,Новый Структура("ИзмененыИсходныеДанные",Истина));
		
	КонецЦикла;
		
КонецПроцедуры // УстановитьНеобходимостьПроверки()

Процедура УстановитьПризнакИзмененияШаблона(ШаблонТрансляции) Экспорт
	
	Если НЕ Константы.КонтролироватьСостояниеДокументаТрансляции.Получить() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Трансляция.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Трансляция КАК Трансляция
	|ГДЕ
	|	Трансляция.ШаблонКорректировки = &ШаблонКорректировки";
	
	Запрос.УстановитьПараметр("ШаблонКорректировки",ШаблонТрансляции);
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ОбновитьСостояниеДокумента(Результат.Ссылка,Новый Структура("ИзмененШаблонКорректировки",Истина));
		
	КонецЦикла;	
	
КонецПроцедуры // УстановитьПризнакИзмененияШаблона() 

#КонецОбласти

#Область КорректировкиЗначенийПоказателей

Процедура СформироватьКорректировкиЗначенийПоказателей(ДокументОбъект,ЗаписиКорректировки,МеткаВерсии,РежимЗаписи,Отказ=Ложь,АктивностьДвижений=Истина) Экспорт
	
	Перем КэшВидовОтчета;
	Перем мСоответствиеНаборовЗаписей;
	
	Если ЗаписиКорректировки.Колонки.Найти("ЗначениеВалюта")=Неопределено Тогда
		
		ЗаписиКорректировки.Колонки.Добавить("ЗначениеВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
		
	КонецЕсли;
	
	// Подготовим таблицу для записи в регистр с указанием версии
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст="ВЫБРАТЬ
	|	ЗаписиОперации.ЭкземплярОтчета,
	|	ЗаписиОперации.Показатель,
	|	ЗаписиОперации.Аналитика1,
	|	ЗаписиОперации.Аналитика2,
	|	ЗаписиОперации.Аналитика3,
	|	ЗаписиОперации.Аналитика4,
	|	ЗаписиОперации.Аналитика5,
	|	ЗаписиОперации.Аналитика6,
	|	ЗаписиОперации.АналитикаВалюта,
	|	ЗаписиОперации.Валюта,
	|	ЗаписиОперации.Раскрытие,
	|	ЗаписиОперации.Значение,
	|	ЗаписиОперации.ЗначениеВалюта
	|ПОМЕСТИТЬ ЗаписиОперацииОбщ
	|ИЗ
	|	&ЗаписиОперации КАК ЗаписиОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиОперацииОбщ.ЭкземплярОтчета,
	|	ЗаписиОперацииОбщ.Показатель,
	|	ЗаписиОперацииОбщ.Аналитика1,
	|	ЗаписиОперацииОбщ.Аналитика2,
	|	ЗаписиОперацииОбщ.Аналитика3,
	|	ЗаписиОперацииОбщ.Аналитика4,
	|	ЗаписиОперацииОбщ.Аналитика5,
	|	ЗаписиОперацииОбщ.Аналитика6,
	|	ЗаписиОперацииОбщ.АналитикаВалюта,
	|	ЗаписиОперацииОбщ.Валюта,
	|	ЗаписиОперацииОбщ.Раскрытие,
	|	СУММА(ЗаписиОперацииОбщ.Значение) КАК Значение,
	|	СУММА(ЗаписиОперацииОбщ.ЗначениеВалюта) КАК ЗначениеВалюта
	|ПОМЕСТИТЬ ЗаписиОперации
	|ИЗ
	|	ЗаписиОперацииОбщ КАК ЗаписиОперацииОбщ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаписиОперацииОбщ.ЭкземплярОтчета,
	|	ЗаписиОперацииОбщ.Показатель,
	|	ЗаписиОперацииОбщ.Аналитика1,
	|	ЗаписиОперацииОбщ.Аналитика2,
	|	ЗаписиОперацииОбщ.Аналитика3,
	|	ЗаписиОперацииОбщ.Аналитика4,
	|	ЗаписиОперацииОбщ.Аналитика5,
	|	ЗаписиОперацииОбщ.Аналитика6,
	|	ЗаписиОперацииОбщ.АналитикаВалюта,
	|	ЗаписиОперацииОбщ.Валюта,
	|	ЗаписиОперацииОбщ.Раскрытие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиОперации.ЭкземплярОтчета,
	|	ЗаписиОперации.Показатель,
	|	ЗаписиОперации.Аналитика1,
	|	ЗаписиОперации.Аналитика2,
	|	ЗаписиОперации.Аналитика3,
	|	ЗаписиОперации.Аналитика4,
	|	ЗаписиОперации.Аналитика5,
	|	ЗаписиОперации.Аналитика6,
	|	ЗаписиОперации.АналитикаВалюта,
	|	ЗаписиОперации.Валюта,
	|	ЗаписиОперации.Раскрытие,
	|	ЗаписиОперации.Значение,
	|	ЗаписиОперации.ЗначениеВалюта,
	|	ЕСТЬNULL(ЗапросПоВерсиям.Ссылка, НЕОПРЕДЕЛЕНО) КАК Версия,
	|	ЕСТЬNULL(ЗапросПоВерсиям.Ссылка.Владелец, НЕОПРЕДЕЛЕНО) КАК ОписаниеВерсии
	|ПОМЕСТИТЬ ЗаписиВерсии
	|ИЗ
	|	ЗаписиОперацииОбщ КАК ЗаписиОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВерсииЗначенийПоказателей.Ссылка КАК Ссылка,
	|			ВерсииЗначенийПоказателей.ЭкземплярОтчета КАК ЭкземплярОтчета,
	|			ВерсииЗначенийПоказателей.Валюта КАК Валюта
	|		ИЗ
	|			Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|		ГДЕ
	|			ВерсииЗначенийПоказателей.Регистратор = &Регистратор";
	
	Если НЕ ПустаяСтрока(МеткаВерсии) Тогда
		
		Запрос.Текст=Запрос.Текст+"	
		|			И ВерсииЗначенийПоказателей.Владелец.Метка = &МеткаВерсии";	
		Запрос.УстановитьПараметр("МеткаВерсии",МеткаВерсии);
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|			И НЕ ВерсииЗначенийПоказателей.Владелец.ПометкаУдаления) КАК ЗапросПоВерсиям
	|		ПО ЗаписиОперации.ЭкземплярОтчета = ЗапросПоВерсиям.ЭкземплярОтчета
	|			И ЗаписиОперации.Валюта = ЗапросПоВерсиям.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиВерсии.ЭкземплярОтчета,
	|	ЗаписиВерсии.Валюта,
	|	ЗаписиВерсии.Версия,
	|	ТабОписания.ОписаниеВерсии
	|ИЗ
	|	ЗаписиВерсии КАК ЗаписиВерсии
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ЗаписиВерсии.ЭкземплярОтчета КАК ЭкземплярОтчета,
	|			ЗаписиВерсии.ОписаниеВерсии КАК ОписаниеВерсии
	|		ИЗ
	|			ЗаписиВерсии КАК ЗаписиВерсии
	|		ГДЕ
	|			НЕ ЗаписиВерсии.Версия = НЕОПРЕДЕЛЕНО) КАК ТабОписания
	|		ПО ЗаписиВерсии.ЭкземплярОтчета = ТабОписания.ЭкземплярОтчета
	|ГДЕ
	|	ЗаписиВерсии.Версия = НЕОПРЕДЕЛЕНО";
	
	Запрос.УстановитьПараметр("Регистратор",	ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ЗаписиОперации",	ЗаписиКорректировки);
	
	ПустыеВерсии=Запрос.Выполнить().Выгрузить();
	
	СозданныеОписания=Новый Соответствие;
	мСоответствиеНаборовЗаписей=Новый Соответствие;
	
	Для Каждого СтрВерсия ИЗ ПустыеВерсии Цикл
		
		Если СтрВерсия.ОписаниеВерсии=NULL Тогда
			
			Если СозданныеОписания[СтрВерсия.ЭкземплярОтчета]=Неопределено Тогда 
				
				НовоеОписание= Справочники.ОписаниеВерсий.СоздатьЭлемент();
				НовоеОписание.Автор = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
				НовоеОписание.УстановитьСсылкуНового(Справочники.ОписаниеВерсий.ПолучитьСсылку());
				НовоеОписание.ЭкземплярОтчета = СтрВерсия.ЭкземплярОтчета;
				НовоеОписание.Регистратор = ДокументОбъект.Ссылка;
				НовоеОписание.РучнаяОперация  = 2;
				НовоеОписание.Метка=МеткаВерсии;
				
				НовоеОписание.Организация     			= 	СтрВерсия.ЭкземплярОтчета.Организация;
				НовоеОписание.ВидОтчета       			=	СтрВерсия.ЭкземплярОтчета.ВидОтчета;
				НовоеОписание.ПериодОтчета    			= 	СтрВерсия.ЭкземплярОтчета.ПериодОтчета;
				НовоеОписание.Сценарий        			= 	СтрВерсия.ЭкземплярОтчета.Сценарий;
				
				Если НовоеОписание.ВидОтчета.РазделениеПоПроектам Тогда
					НовоеОписание.Проект        		= 	СтрВерсия.ЭкземплярОтчета.Проект;
				Конецесли;
				
				СозданныеОписания.Вставить(СтрВерсия.ЭкземплярОтчета,НовоеОписание);
				
			Иначе
				
				НовоеОписание=СозданныеОписания[СтрВерсия.ЭкземплярОтчета];
				
			КонецЕсли;
			
			НоваяВерсия=СоздатьВерсию(ДокументОбъект.Ссылка,Отказ,АктивностьДвижений,НовоеОписание.ПолучитьСсылкуНового(),СтрВерсия);
			
			Если НоваяВерсия=Неопределено Тогда
				Возврат;
			КонецЕсли;
			
		Иначе
			
			НоваяВерсия=СоздатьВерсию(ДокументОбъект.Ссылка,Отказ,АктивностьДвижений,СтрВерсия.ОписаниеВерсии,СтрВерсия);
			
			Если НоваяВерсия=Неопределено Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрВерсия.Версия=НоваяВерсия;
		
	КонецЦикла;
	
	Запрос.Текст="
	|ВЫБРАТЬ * Поместить НовыеВерсии ИЗ &ПустыеВерсии КАК ПустыеВерсии
	|;
	|ВЫБРАТЬ
	|	ЗаписиОперации.*,
	|	ЗаписиОперации.Показатель.Владелец КАК ВидОтчета,
	|	ЕСТЬNULL(ЗаписиОперации.Показатель.ГруппаРаскрытия.ЧислоАналитик,0) КАК ЧислоАналитикПоказателя,
	|	ВЫБОР КОГДА ЗапросПоВерсиям.Ссылка ЕСТЬ NULL 
	|ТОГДА НовыеВерсии.Версия
	|ИНАЧЕ ЗапросПоВерсиям.Ссылка КОНЕЦ КАК Версия,
	|ВЫБОР КОГДА ЗапросПоВерсиям.Ссылка ЕСТЬ NULL 
	|ТОГДА Неопределено
	|ИНАЧЕ ЗапросПоВерсиям.Ссылка.ВидОперации КОНЕЦ КАК СтарыйВидОперации 
	|ИЗ
	|	ЗаписиОперации КАК ЗаписиОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Ссылка, ЭкземплярОтчета, Валюта, ВидОперации
	|			ИЗ Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.Регистратор = &Регистратор";
	
	Если НЕ ПустаяСтрока(МеткаВерсии) Тогда
		
		Запрос.Текст=Запрос.Текст+"	
		|И ВерсииЗначенийПоказателей.Владелец.Метка=&МеткаВерсии";	
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|) КАК ЗапросПоВерсиям
	|		ПО ЗаписиОперации.ЭкземплярОтчета = ЗапросПоВерсиям.ЭкземплярОтчета
	|			И ЗаписиОперации.Валюта = ЗапросПоВерсиям.Валюта
	|ЛЕВОЕ СОЕДИНЕНИЕ НовыеВерсии КАК НовыеВерсии
	|ПО ЗаписиОперации.ЭкземплярОтчета=НовыеВерсии.ЭкземплярОтчета
	|И ЗаписиОперации.Валюта = НовыеВерсии.Валюта";
		
	Запрос.УстановитьПараметр("ПустыеВерсии",ПустыеВерсии);
	РабочиеЗаписи=Запрос.Выполнить().Выгрузить();
	ТабВерсии=РабочиеЗаписи.Скопировать();
	ТабВерсии.Свернуть("Версия,СтарыйВидОперации");
	
	ТекВидОперации=ДокументОбъект.ВидОперации;
	
	СтруктураРеквизиты=Новый Структура;
	
	Если ОбщегоНазначенияУХ.ПолучитьИмяОбъектаМетаданных(ДокументОбъект)="РучныеКорректировки" Тогда
		
		СтруктураРеквизиты.Вставить("ПравилоОбработки",			Справочники.ПравилаОбработки.ПустаяСсылка());
		СтруктураРеквизиты.Вставить("ИспользуемаяИБ",			Справочники.ВнешниеИнформационныеБазы.ПустаяСсылка());
		СтруктураРеквизиты.Вставить("ДатаИзменения",			ТекущаяДата());
		СтруктураРеквизиты.Вставить("ПоследнийРедактировавший",	ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
		СтруктураРеквизиты.Вставить("СпособФормированияОтчета",	?(ДокументОбъект.РедактируемыеЗаписи.Найти(Истина,"РасчетПоФормуле")=Неопределено,Перечисления.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки,Перечисления.СпособыФормированияОтчетов.РучноеЗаполнение));
		СтруктураРеквизиты.Вставить("ДатаИзмененияMs",			ТекущаяУниверсальнаяДатаВМиллисекундах());
		
	Иначе
		
		СтруктураРеквизиты.Вставить("ПравилоОбработки",			ДокументОбъект.ПравилоОбработки);
		СтруктураРеквизиты.Вставить("ИспользуемаяИБ",			ДокументОбъект.ИспользуемаяИБ);
		СтруктураРеквизиты.Вставить("ДатаИзменения",			ДокументОбъект.ДатаИзменения);
		СтруктураРеквизиты.Вставить("ПоследнийРедактировавший",	ДокументОбъект.ПоследнийРедактировавший);
		СтруктураРеквизиты.Вставить("СпособФормированияОтчета", Перечисления.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки);
		СтруктураРеквизиты.Вставить("ДатаИзмененияMs",			ТекущаяУниверсальнаяДатаВМиллисекундах());
		
	КонецЕсли;
				
	Для Каждого СтрВерсия ИЗ ТабВерсии Цикл 
					
		Если НЕ Справочники.ВерсииЗначенийПоказателей.ПроверитьВозможностьИзмененияДанныхВерсии(СтрВерсия.Версия) Тогда // Проверяем возможность изменения старых данных
			
			Отказ=Истина;
			Возврат;
			
		КонецЕсли;
		
		Отказ=Ложь;
		
		ОбъектРасчета=Новый Структура("Организация,ПериодОтчета,Сценарий,Проект,ВидОтчета");
		ЗаполнитьЗначенияСвойств(ОбъектРасчета,СтрВерсия.Версия);
		
		УправлениеОтчетамиУХ.ПроверитьВозможностьЗаписи(ОбъектРасчета,РабочиеЗаписи.Скопировать(Новый Структура("Версия,Раскрытие",СтрВерсия.Версия,Ложь)),Отказ);
		
		Если Отказ Тогда
			
			Отказ=Истина;
			Возврат;
			
		КонецЕсли;
		
		Если НЕ СтрВерсия.СтарыйВидОперации=Неопределено Тогда
			
			Если НЕ СтрВерсия.СтарыйВидОперации=ТекВидОперации Тогда
				
				ВерсияОбъект=СтрВерсия.Версия.ПолучитьОбъект();
				ВерсияОбъект.ВидОперации= ТекВидОперации;
				ВерсияОбъект.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
					
		ЗаписиВерсии=РабочиеЗаписи.НайтиСтроки(Новый Структура("Версия",СтрВерсия.Версия));
		
		Для Каждого Запись Из ЗаписиВерсии Цикл
			
			СтрокаЗаписи = Новый Структура;
			СтрокаЗаписи.Вставить("Показатель",			Запись.Показатель);
			СтрокаЗаписи.Вставить("Версия",				Запись.Версия);
			СтрокаЗаписи.Вставить("Активность",			АктивностьДвижений);
			СтрокаЗаписи.Вставить("Регистратор",		Запись.Версия);
			СтрокаЗаписи.Вставить("ИтоговоеЗначение",	НЕ Запись.Раскрытие);
			
			Для Каждого КлючИЗначение ИЗ СтруктураРеквизиты Цикл
				
				СтрокаЗаписи.Вставить(КлючИЗначение.Ключ,КлючИЗначение.Значение);
				
			КонецЦикла;
			
			СтрокаЗаписи.Вставить("Значение",			Запись.Значение);
			СтрокаЗаписи.Вставить("ЗначениеВалюта",		Запись.ЗначениеВалюта);
			
			Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				
				СтрокаЗаписи.Вставить("Аналитика"+Индекс,Запись["Аналитика" + Индекс]);
				
			КонецЦикла;
			
			СтрокаЗаписи.Вставить("АналитикаВалюта",Запись.АналитикаВалюта);
			
			ЧислоАналитикВидаОтчета = ВернутьДанныеПоКоличествуАналитик(Запись.ВидОтчета,КэшВидовОтчета);
			
			Если Запись.Раскрытие Тогда
				
				Если Запись.ЧислоАналитикПоказателя=0 Тогда
					
					ИмяРабочейТаблицы="ЗначенияПоказателейОтчетовВалютные";
					
				Иначе
					
					ИмяРабочейТаблицы="ЗначенияПоказателейОтчетов"+Запись.ЧислоАналитикПоказателя;
					
				КонецЕсли;
				
			Иначе	
				
				ИмяРабочейТаблицы=УправлениеОтчетамиУХ.ВернутьИмяТаблицыСинтетики(ЧислоАналитикВидаОтчета);
				
			КонецЕсли;
			
			ДобавитьЗаписьВРегистр(СтруктураРеквизиты,мСоответствиеНаборовЗаписей,ИмяРабочейТаблицы,СтрокаЗаписи);
			
		КонецЦикла;
		
	КонецЦикла; 
	
	Для Каждого ВерсияНабора ИЗ мСоответствиеНаборовЗаписей Цикл
		
		Для Каждого НаборЗаписей ИЗ ВерсияНабора.Значение Цикл
			
			Если РежимЗаписи=РежимЗаписиДокумента.ОтменаПроведения Тогда
				
				НаборЗаписей.Значение.Очистить();
				
			КонецЕсли;
			
			НаборЗаписей.Значение.Записать(Истина);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Описание ИЗ СозданныеОписания Цикл
		
		Описание.Значение.Дата        = ТекущаяДата();
		Описание.Значение.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры // СформироватьКорректировкиЗначенийПоказателей()

// Вычисляет сумму баланса.
//
Функция ПолучитьСуммуБаланса(Операция, МассивЗаписей,ПроверятьЗнак=Истина) Экспорт
	
	СтруктураСумм=Новый Структура("Дебет,Кредит,Значение",0,0,0);
	
	Если Операция.Сбалансированная Тогда
		
		Для Каждого ТекЗаписи ИЗ МассивЗаписей Цикл
			
			Для Каждого Запись Из ТекЗаписи Цикл
				
				Если Запись.Показатель.ВидПоказателя=Перечисления.ВидыПоказателей.Активный Тогда
					СтруктураСумм.Дебет=СтруктураСумм.Дебет+Запись.Значение*?(ПроверятьЗнак,ПолучитьЗнакЗаписи(Запись),1);
				ИначеЕсли Запись.Показатель.ВидПоказателя=Перечисления.ВидыПоказателей.Пассивный Тогда
					СтруктураСумм.Кредит=СтруктураСумм.Кредит+Запись.Значение*?(ПроверятьЗнак,ПолучитьЗнакЗаписи(Запись),1);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		СтруктураСумм.Значение=СтруктураСумм.Дебет-СтруктураСумм.Кредит;
		
	Иначе
		
		Для Каждого ТекЗаписи ИЗ МассивЗаписей Цикл
			
			СтруктураСумм.Значение=СтруктураСумм.Значение+ТекЗаписи.Итог("Значение");
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураСумм;
	
КонецФункции    

Функция ЗаписатьТаблицуКорректировки(ОбработкаЗаписи,Сценарий,ВидОтчета,Результат)
	
	ОбработкаЗаписи.ВидОтчета=ВидОтчета;
	ОбработкаЗаписи.ТаблицаИзмененныхПоказателей.Очистить();
	ОбработкаЗаписи.ВалютыОтчетности.Очистить();	
			
	ДанныеКорректировки=Результат[0].Выбрать();
	
	Пока ДанныеКорректировки.Следующий() Цикл
		
		НоваяСтрока=ОбработкаЗаписи.ТаблицаИзмененныхПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ДанныеКорректировки);
		НоваяСтрока.Сценарий=Сценарий;
		
	КонецЦикла;
	
	ДанныеВалюты=Результат[1].Выбрать();
	
	Пока ДанныеВалюты.Следующий() Цикл
		
		НОваяСтрока=ОбработкаЗаписи.ВалютыОтчетности.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ДанныеВалюты);
		НоваяСтрока.Сценарий=Сценарий;
		
	КонецЦикла;
	
	Возврат ОбработкаЗаписи.ЗаписатьЗначенияТаблицыПоказателей();
	
КонецФункции // ЗаписатьТаблицуКорректировки()

Процедура ВыполнитьЗаписьКорректировки(ДокументОбъект,Отказ) Экспорт

	РассчитыватьЗависимые 	= Константы.АвтоматическийПересчетЗависимыхПоказателей.Получить();
	
	ТК=ДокументОбъект;
	
	ОбработкаЗаписи							= Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
	ОбработкаЗаписи.РассчитыватьЗависимые	= РассчитыватьЗависимые;
	ОбработкаЗаписи.Регистратор				= ТК.Ссылка;
	ОбработкаЗаписи.РежимКорректировки		= Истина;
	ОбработкаЗаписи.ПравилоОбработки		= ТК.ПравилоОбработки; 
	
	ДанныеПериода=Документы.НастраиваемыйОтчет.ПолучитьДанныеПериода(ТК.Сценарий,ТК.ПериодОтражения,ТК.Организация);
	
	ВерсияРегламента		= ДанныеПериода.УправлениеПериодом.ВерсияОрганизационнойСтруктуры;
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст="ВЫБРАТЬ
	|	РедактируемыеЗаписи.Показатель КАК ПоказательОтчета,
	|	РедактируемыеЗаписи.ВидОтчета КАК ВидОтчета,
	|	НЕ РедактируемыеЗаписи.Раскрытие КАК СинтетическоеЗначение,
	|	РедактируемыеЗаписи.Аналитика1 КАК Аналитика1,
	|	РедактируемыеЗаписи.Аналитика2 КАК Аналитика2,
	|	РедактируемыеЗаписи.Аналитика3 КАК Аналитика3,
	|	РедактируемыеЗаписи.Аналитика4 КАК Аналитика4,
	|	РедактируемыеЗаписи.Аналитика5 КАК Аналитика5,
	|	РедактируемыеЗаписи.Аналитика6 КАК Аналитика6,
	|	РедактируемыеЗаписи.АналитикаВалюта КАК АналитикаВалюта,
	|	РедактируемыеЗаписи.Значение КАК Значение,
	|	РедактируемыеЗаписи.ЗначениеВалюта КАК ЗначениеВалюта,
	|	&Организация КАК Организация,
	|	&ПериодОтчета КАК ПериодОтчета
	|ПОМЕСТИТЬ КорректировкаИтог
	|ИЗ
	|	&РедактируемыеЗаписи КАК РедактируемыеЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КорректировкаИтог.Организация КАК Организация,
	|	КорректировкаИтог.ПериодОтчета КАК ПериодОтчета
	|ПОМЕСТИТЬ ОрганизацииПериоды
	|ИЗ
	|	КорректировкаИтог КАК КорректировкаИтог
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КорректировкаИтог.ВидОтчета КАК ВидОтчета
	|ИЗ
	|	КорректировкаИтог КАК КорректировкаИтог";
	
	Запрос.УстановитьПараметр("РедактируемыеЗаписи",ТК.РедактируемыеЗаписи);
	Запрос.УстановитьПараметр("Организация",ТК.Организация);
	Запрос.УстановитьПараметр("ПериодОтчета",ТК.ПериодОтражения);

	МассивВидовОтчетов=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидОтчета");
		
	Для Каждого ВидОтчета ИЗ МассивВидовОтчетов Цикл
		
		Запрос.Текст="ВЫБРАТЬ
		|	КорректировкаИтог.Организация КАК Организация,
		|	КорректировкаИтог.ПериодОтчета КАК ПериодОтчета,
		|	КорректировкаИтог.Аналитика1 КАК Аналитика1,
		|	КорректировкаИтог.Аналитика2 КАК Аналитика2,
		|	КорректировкаИтог.Аналитика3 КАК Аналитика3,
		|	КорректировкаИтог.Аналитика4 КАК Аналитика4,
		|	КорректировкаИтог.Аналитика5 КАК Аналитика5,
		|	КорректировкаИтог.Аналитика6 КАК Аналитика6,
		|	КорректировкаИтог.ПоказательОтчета КАК ПоказательОтчета,
		|	КорректировкаИтог.АналитикаВалюта КАК АналитикаВалюта,
		|	КорректировкаИтог.Значение КАК Значение,
		|	КорректировкаИтог.СинтетическоеЗначение КАК СинтетическоеЗначение,
		|	КорректировкаИтог.ЗначениеВалюта КАК ЗначениеВалюта
		|ИЗ
		|	КорректировкаИтог КАК КорректировкаИтог
		|ГДЕ
		|	КорректировкаИтог.ВидОтчета = &ВидОтчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОрганизацииПериоды.Организация КАК Организация,
		|	ОрганизацииПериоды.ПериодОтчета КАК ПериодОтчета,
		|	ВалютыОтчетностиСрезПоследних.Валюта КАК Валюта,
		|	ВалютыОтчетностиСрезПоследних.ОсновнаяВалюта КАК ОсновнаяВалюта
		|ИЗ
		|	ОрганизацииПериоды КАК ОрганизацииПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВалютыОтчетности.СрезПоследних(
		|				&ТекущийПериод,
		|				(ШаблонДокументаБД = &ВидОтчета
		|					ИЛИ ШаблонДокументаБД = НЕОПРЕДЕЛЕНО)
		|					И Регламент = &ВерсияРегламента
		|					И Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютыОтчетностиСрезПоследних
		|		ПО ОрганизацииПериоды.Организация = ВалютыОтчетностиСрезПоследних.Организация";
		
		Запрос.УстановитьПараметр("ВидОтчета",			ВидОтчета);
		Запрос.УстановитьПараметр("ТекущийПериод",		ТекущаяДата());
		Запрос.УстановитьПараметр("ВерсияРегламента",	ВерсияРегламента);
		
		Результат=Запрос.ВыполнитьПакет();
		
		Отказ=НЕ ЗаписатьТаблицуКорректировки(ОбработкаЗаписи,ТК.Сценарий,ВидОтчета,Результат);
		
		Если Отказ Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры // ВыполнитьЗаписьКорректировки()


// Пересчитывает зависимые от редактируемых строки
// СтруктураПараметров: структура, содержащая элементы:
// 
//
Функция ОбработатьРедактируемыеСтроки(ПараметрыОбработки) Экспорт
	
	ВремТаблицаЗаписей=ПолучитьРабочуюТаблицу(ПараметрыОбработки,"Записи").СкопироватьКолонки();
	
	СтруктураПоиска=Новый Структура("НомерОперации",ПараметрыОбработки.НомерОперации);
	
	Если ПараметрыОбработки.ТаблицаСтрок=Неопределено Тогда
		
		Если ПараметрыОбработки.Трансформационная Тогда
			
			ТекТаблицаЗаписи=ПолучитьРабочуюТаблицу(ПараметрыОбработки,"РедактируемыеЗаписи").Скопировать();
			
		Иначе
			
			ТекТаблицаЗаписи=ПолучитьРабочуюТаблицу(ПараметрыОбработки,"РедактируемыеЗаписи").Скопировать(СтруктураПоиска);
			
		КонецЕсли;
		
	Иначе
		
		ТекТаблицаЗаписи=ПараметрыОбработки.ТаблицаСтрок;
		
	КонецЕсли;
	
	// Очистим старые записи	
	
	Если ПараметрыОбработки.ОчищатьЗаписи Тогда
		
		Если ПараметрыОбработки.Трансформационная Тогда
			
			ПараметрыОбработки.ДокументОбъект.Записи.Очистить();
			
		Иначе
			
			СтарыеЗаписиОперации = ПараметрыОбработки.ДокументОбъект.Записи.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтараяЗаписьОперации Из СтарыеЗаписиОперации Цикл
				ПараметрыОбработки.ДокументОбъект.Записи.Удалить(СтараяЗаписьОперации);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
		
	ЕстьОшибкиОбработки=Ложь;
	
	// Получаем массив экземпляров отчетов для пересчета
	
	КопияТабЗаписи=ТекТаблицаЗаписи.Скопировать();
	КопияТабЗаписи.Свернуть("ЭкземплярОтчета");
	
	МассивЭкземпляров=КопияТабЗаписи.ВыгрузитьКолонку("ЭкземплярОтчета");
	
	// Подготовим шаблон запроса для создания рабочих таблиц отчета
	ЗапросПоказатели=Новый Запрос;
	ЗапросПоказатели.Текст = 
	"ВЫБРАТЬ
	|	мПоказатели.Ссылка,
	|	мПоказатели.Код,
	|	мПоказатели.НеФинансовый,
	|	мПоказатели.ЧисловойПоказатель,
	|	мПоказатели.СвязанныйПоказатель,
	|	мПоказатели.ВидКурса,
	|	мПоказатели.ПериодРасчета
	|ПОМЕСТИТЬ мПоказатели
	|ИЗ
	|	&мПоказатели КАК мПоказатели
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИзмененныхПоказателей.Ссылка,
	|	ТаблицаИзмененныхПоказателей.ЧисловойПоказатель,
	|	ВЫРАЗИТЬ(ТаблицаИзмененныхПоказателей.Значение КАК ЧИСЛО(18, 5)) КАК Значение
	|ПОМЕСТИТЬ ТаблицаИзмененныхПоказателей
	|ИЗ
	|	&ТаблицаИзмененныхПоказателей КАК ТаблицаИзмененныхПоказателей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	мПоказатели.Ссылка,
	|	мПоказатели.Код,
	|	мПоказатели.НеФинансовый,
	|	мПоказатели.СвязанныйПоказатель,
	|	мПоказатели.ВидКурса,
	|	мПоказатели.ПериодРасчета,
	|	ТаблицаИзмененныхПоказателей.ЧисловойПоказатель,
	|	ТаблицаИзмененныхПоказателей.Значение
	|ИЗ
	|	мПоказатели КАК мПоказатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаИзмененныхПоказателей КАК ТаблицаИзмененныхПоказателей
	|		ПО мПоказатели.Ссылка = ТаблицаИзмененныхПоказателей.Ссылка";
	
	Для Каждого ЭкземплярОтчета ИЗ МассивЭкземпляров Цикл
		
		// Получаем массив аналитик отчета
		МассивАналитикОтчета=Новый Массив;
		
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			Если ЗначениеЗаполнено(ЭкземплярОтчета.ВидОтчета["ВидАналитики" + Инд]) Тогда
				
				МассивАналитикОтчета.Добавить(Инд);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОтчетОбъект=ЭкземплярОтчета.ПолучитьОбъект();
		
		// Получаем таблицу отредактированных строк, изменяемых вручную и относящихся к данному экземпляру отчета
		
		Если ПараметрыОбработки.Трансформационная Тогда
			
			ТекТаблицаОтчетРучные=ТекТаблицаЗаписи.Скопировать(Новый Структура("ЭкземплярОтчета",ЭкземплярОтчета));
			ТекТаблицаОтчетФормулы=Новый ТаблицаЗначений;
			
		Иначе
			
			СтрЭкземплярыРучные=ТекТаблицаЗаписи.НайтиСтроки(Новый Структура("ЭкземплярОтчета,РасчетПоФормуле",ЭкземплярОтчета,Ложь));
			
			ТекТаблицаОтчетРучные=ТекТаблицаЗаписи.СкопироватьКолонки();
			
			Для Каждого Строка ИЗ СтрЭкземплярыРучные Цикл
				
				НоваяСтрока=ТекТаблицаОтчетРучные.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
				
			КонецЦикла;
									
		КонецЕсли;
		
		// Инициализируем контекст отчета
		ОтчетОбъект.ЧтениеНеактуальныхЗаписей = ?(ПараметрыОбработки.Трансформационная, Ложь, УправлениеОтчетамиУХ.ИспользоватьНеактуальныеЗаписи(ПараметрыОбработки.ДокументОбъект));
		
		ОтчетОбъект.ВсегдаЗаполнятьАналитики=Истина;
		ОтчетОбъект.ИнициализироватьКонтекст();
				
		мПоказатели=ОтчетОбъект.мПоказатели;
		мПоказателиРаскрытия=ОтчетОбъект.мПоказателиРаскрытия;
		
		//Отражаем внесенные вручную изменения
		// Получим упорядоченную таблицу правил расчета показателей
		
		УправлениеОтчетамиУХ.ПодготовитьДанныеПараметрическойНастройки(ОтчетОбъект,,Истина);
		мПоказателиДляВычисления=ОтчетОбъект.мПоказателиДляОбработки;
		
		ОбработкаВыполнена=Истина;
		
		Если ТекТаблицаОтчетРучные.Количество()>0 Тогда
			
			ОбработкаВыполнена=ОбработатьТаблицыОтчета(ОтчетОбъект,ТекТаблицаОтчетРучные,мПоказатели,мПоказателиРаскрытия,МассивАналитикОтчета,ПараметрыОбработки);
			
		КонецЕсли;
		
		Если НЕ ОбработкаВыполнена Тогда
			ЕстьОшибкиОбработки=Истина;
			Продолжить;
		КонецЕсли;
		
		мПоказателиКопия          = ОтчетОбъект.мПоказатели.Скопировать();
		мПоказателиРаскрытияКопия = УправлениеОтчетамиУХ.ПолучитьКопиюРаскрытия(ОтчетОбъект,Ложь);
		мСтруктураПоказателиКопия = ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(ОтчетОбъект.Показатели);
				
		ТабПересчитанныеПоказатели=ОтчетОбъект.мПоказателиДляОбработки;
		
		Если ТабПересчитанныеПоказатели=Неопределено Тогда
			ЕстьОшибкиОбработки=Истина;
			Продолжить;
		КонецЕсли;
				
		// Получаем и записываем таблицы отклонений. Механизмы аналогичны механизмам записи 
		// данных настраиваемого отчета в режиме версионирования.
		
		//Обновим таблицы после пересчета
		
		мПоказатели=ОтчетОбъект.мПоказатели;
		мПоказателиРаскрытия=ОтчетОбъект.мПоказателиРаскрытия;
		
		// Определяем, какие данные были изменены в таблице мПоказатели и мПоказателиРаскрытия.
		
		ТаблицаИзмененныхПоказателей = ОтчетОбъект.ЛогИзмененийПоказателей.Скопировать();		
		
		ОтчетОбъект.СнятьИндексыСЛогаРаскрытий();
		ТаблицаИзмененийРаскрытий = ОтчетОбъект.ЛогИзмененийРаскрытийПоказателей.Скопировать();
		ОтчетОбъект.УстановитьИндексыНаЛогРаскрытий();
		
		ТекстСвертки="";
		Для ТекИндексАналитики=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			 ТекстСвертки=ТекстСвертки+",Аналитика"+ТекИндексАналитики;
		 КонецЦикла;
		 
		 ТекстСвертки=ТекстСвертки+",АналитикаВалюта";
		
		ТаблицаИзмененийРаскрытий.Свернуть("Показатель,ЧисловойПоказатель"+ТекстСвертки,"Значение,ЗначениеВалюта");
		
		МассивКодовИзмененныхПоказателей = Новый Массив;
		
		Для Каждого Пок Из ТаблицаИзмененныхПоказателей Цикл	
			
			Если НЕ Пок.ЧисловойПоказатель Тогда
				Продолжить;
			КонецЕсли;
			
			Движение = ВремТаблицаЗаписей.Добавить();
			Движение.ЭкземплярОтчета=ЭкземплярОтчета;
			Движение.Показатель     = Пок.Ссылка;
			
			Для Каждого Инд ИЗ МассивАналитикОтчета Цикл
				Движение["Аналитика" + Инд] = ЭкземплярОтчета["Аналитика" + Инд];
			КонецЦикла;
			
			Движение.Валюта			= ?(ПараметрыОбработки.Трансформационная,ЭкземплярОтчета.ОсновнаяВалюта,ПараметрыОбработки.ДокументОбъект.ОсновнаяВалюта);
			Движение.Значение       = Число(Пок.Значение);
			
			Если НЕ ПараметрыОбработки.Трансформационная Тогда 
				Движение.НомерОперации=ПараметрыОбработки.НомерОперации;
			КонецЕсли;
			
			Движение.Раскрытие=Ложь;
			
		КонецЦикла;
		
		Для Каждого Пок Из ТаблицаИзмененийРаскрытий Цикл
			
			Если НЕ Пок.ЧисловойПоказатель
				ИЛИ (НЕ ЗначениеЗаполнено(Пок.Значение)) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Движение = ВремТаблицаЗаписей.Добавить();
			Движение.ЭкземплярОтчета=ЭкземплярОтчета;
			Движение.Показатель     = Пок.Показатель;
			
			Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				Если НЕ МассивАналитикОтчета.Найти(Инд)=Неопределено Тогда
					Движение["Аналитика" + Инд]	= ЭкземплярОтчета["Аналитика" + Инд];
				Иначе
					Движение["Аналитика" + Инд]	= Пок["Аналитика" + Инд];
				КонецЕсли;
			КонецЦикла;
			
			Движение.АналитикаВалюта=Пок.АналитикаВалюта;
			
			Движение.Валюта			= ?(ПараметрыОбработки.Трансформационная,ЭкземплярОтчета.ОсновнаяВалюта,ПараметрыОбработки.ДокументОбъект.ОсновнаяВалюта);
			Движение.Значение       = Число(Пок.Значение);
			Движение.ЗначениеВалюта = Число(Пок.ЗначениеВалюта);
			Движение.Раскрытие      = Истина;
			
			Если НЕ ПараметрыОбработки.Трансформационная Тогда 
				Движение.НомерОперации=ПараметрыОбработки.НомерОперации;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОтчетОбъект.ДополнительныеВалюты.Количество()>0 Тогда
			
			ЗапросПоказатели.УстановитьПараметр("мПоказатели",мПоказатели);
			ЗапросПоказатели.УстановитьПараметр("ТаблицаИзмененныхПоказателей",ТаблицаИзмененныхПоказателей);
			
			мПоказателиТек=ЗапросПоказатели.Выполнить().Выгрузить();
			
			// формируем и записываем значения показателей в дополнительных валютах
			Для Каждого ВалютаОтчета Из ОтчетОбъект.ДополнительныеВалюты Цикл
				
				ПризнакОшибки = Ложь;
				ТаблицаПоказателейВалюты = ОтчетОбъект.ПолучитьЗначенияПоказателейВВалюте(мПоказателиТек, ВалютаОтчета.Валюта, ПризнакОшибки);
				ТаблицаПоказателейРаскрытияВалюты = ОтчетОбъект.ПолучитьЗначенияПоказателейРаскрытияВВалюте(мПоказатели,ТаблицаИзмененийРаскрытий, ВалютаОтчета.Валюта, ПризнакОшибки);
				Если ПризнакОшибки Тогда
					
					Сообщить(СтрШаблон(Нстр("ru = 'При обработке экземпляра отчета %1
					|Не удалось получить значения показателей в валюте %2!'"), 
					Строка(ЭкземплярОтчета), ВалютаОтчета.Валюта), СтатусСообщения.Важное);
					ЕстьОшибкиОбработки=Истина;
					Продолжить;
					
				КонецЕсли;
				
				Для Каждого Пок Из ТаблицаПоказателейВалюты Цикл
					
					Если НЕ Пок.ЧисловойПоказатель Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					Движение = ВремТаблицаЗаписей.Добавить();
					Движение.ЭкземплярОтчета=ЭкземплярОтчета;
					Движение.Показатель     = Пок.Ссылка;
					
					Для Каждого Инд ИЗ МассивАналитикОтчета Цикл
						Движение["Аналитика" + Инд]  = ЭкземплярОтчета["Аналитика" + Инд];
					КонецЦикла;
					
					Движение.Валюта			= ВалютаОтчета.Валюта;
					Движение.Значение       = Число(Пок.Значение);
					
					Если НЕ ПараметрыОбработки.Трансформационная Тогда 
						Движение.НомерОперации=ПараметрыОбработки.НомерОперации;
					КонецЕсли;
					
				КонецЦикла;
				
				Для Каждого Пок Из ТаблицаПоказателейРаскрытияВалюты Цикл
					
					Если (Не Пок.ЧисловойПоказатель)
						ИЛИ НЕ (ЗначениеЗаполнено(Пок.Значение) И УправлениеОтчетамиУХ.ПроверитьЗаполнениеАналитик(ОтчетОбъект,Пок,мПоказателиРаскрытия,Истина)) Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					Движение = ВремТаблицаЗаписей.Добавить();
					Движение.ЭкземплярОтчета=ЭкземплярОтчета;
					Движение.Показатель     = Пок.Показатель;
					
					Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
						Если НЕ МассивАналитикОтчета.Найти(Инд)=Неопределено Тогда
							Движение["Аналитика" + Инд]	= ЭкземплярОтчета["Аналитика" + Инд];
						Иначе
							Движение["Аналитика" + Инд]	= Пок["Аналитика" + Инд];
						КонецЕсли;
					КонецЦикла;
					
					Движение.АналитикаВалюта=Пок.АналитикаВалюта;
					
					Движение.Валюта			= ВалютаОтчета.Валюта;
					Движение.Значение       = Число(Пок.Значение);
					Движение.ЗначениеВалюта = Число(Пок.ЗначениеВалюта);
					
					Движение.Раскрытие      = Истина;
					
					Если НЕ ПараметрыОбработки.Трансформационная Тогда 
						Движение.НомерОперации=ПараметрыОбработки.НомерОперации;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОтчетОбъект="";
		
	КонецЦикла; // По экземплярам отчетов
	
	Если ЕстьОшибкиОбработки Тогда
		
		ВремТаблицаЗаписей.Очистить();
		
	КонецЕсли;
	
	Возврат ВремТаблицаЗаписей; 
	
КонецФункции // ОбработатьРедактируемыеСтроки()


Функция ПолучитьРабочуюТаблицу(ПараметрыОбработки,ИмяТаблицы)
	
	Если ТипЗнч(ПараметрыОбработки.ДокументОбъект)=Тип("ОбработкаОбъект.КорректировкиЗначенийПоказателей") Тогда
		
		Возврат ПараметрыОбработки.ДокументОбъект[ИмяТаблицы].Скопировать();
		
	Иначе
		
		Возврат ПараметрыОбработки.ДокументОбъект[ИмяТаблицы].Выгрузить();
		
	КонецЕсли;
			
КонецФункции // ПолучитьРабочуюТаблицу() 


//Изменяет значения в экземпляре отчета в соответствии с переданной таблицей отклонений
//
Функция ОбработатьТаблицыОтчета(ОтчетОбъект,ТекТаблицаОтчет,мПоказатели,мПоказателиРаскрытия,МассивАналитикОтчета,ПараметрыОбработки)
	
	ПоказателиРаскрытия=Новый Массив;
	ПоказателиИтог=Новый Массив;
	
	ОтчетОбъект.НачатьНовуюОперацию();
	
	// Изменяем отредактированные показатели
	
	Для Каждого СтрПоказатель ИЗ ТекТаблицаОтчет Цикл
		
		Если СтрПоказатель.Раскрытие Тогда
			
			// Ищем строку в мПоказателиРаскрытия
			
			СтруктураАналитика=Новый Структура;
			СтруктураАналитика.Вставить("Показатель",СтрПоказатель.Показатель);
			
			Для Инд = 1 По ОтчетОбъект.МаксАналитикПоказателя Цикл
				
				Если МассивАналитикОтчета.Найти(Инд)=Неопределено Тогда
					
					СтруктураАналитика.Вставить("Аналитика"+Инд,СтрПоказатель["Аналитика"+Инд]);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(СтрПоказатель.АналитикаВалюта) Тогда
				
				СтруктураАналитика.Вставить("АналитикаВалюта",СтрПоказатель.АналитикаВалюта);
				
			КонецЕсли;
			
			ТекСтрокаРаскрытия=ОтчетОбъект.мПоказателиРаскрытия.НайтиСтроки(СтруктураАналитика);
			
			Если ТекСтрокаРаскрытия.Количество()>0 Тогда
				
				Если ПараметрыОбработки.АбсолютныеЗначения Тогда
					
					ТекСтрокаРаскрытия[0].Значение=0;
					ТекСтрокаРаскрытия[0].ЗначениеВалюта=0;
					
					ТекЗначение=0;
					ТекЗначениеВалюта=0;
					
				Иначе
					
					ТекЗначение			= ТекСтрокаРаскрытия[0].Значение;
					ТекЗначениеВалюта	= ТекСтрокаРаскрытия[0].ЗначениеВалюта;
					
				КонецЕсли;
				
			Иначе
				
				ТекЗначение=0;
				ТекЗначениеВалюта=0;
				
			КонецЕсли;
			
			Корректировка		= ТекЗначение		+СтрПоказатель.Значение			*ПолучитьЗнакЗаписи(СтрПоказатель,ПараметрыОбработки.Сбалансированная);
			КорректировкаВалюта	= ТекЗначениеВалюта	+СтрПоказатель.ЗначениеВалюта	*ПолучитьЗнакЗаписи(СтрПоказатель,ПараметрыОбработки.Сбалансированная);
	
			СтруктураВставки = Новый Структура("Значение, Показатель,АналитикаВалюта");
			
			Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				
				СтруктураВставки.Вставить("Аналитика"+Индекс);
				
			КонецЦикла;
			
			ЗаполнитьЗначенияСвойств(СтруктураВставки,СтруктураАналитика);
			СтруктураВставки.Показатель=СтрПоказатель.Показатель;
			
			УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ОтчетОбъект,Новый Структура("Значение,ЗначениеВалюта",Корректировка,КорректировкаВалюта),СтруктураВставки);
			
			Если ПоказателиРаскрытия.Найти(СтрПоказатель.Показатель)=Неопределено Тогда
				ПоказателиРаскрытия.Добавить(СтрПоказатель.Показатель);
			КонецЕсли;				
			
		Иначе
			
			// Ищем строку в мПоказатели
			
			ПоказательОтчета=ОтчетОбъект.мПоказатели.НайтиСтроки(Новый Структура("Ссылка",СтрПоказатель.Показатель))[0];
			
			Если ПараметрыОбработки.АбсолютныеЗначения Тогда
                 ПоказательОтчета.Значение=0;
			КонецЕсли;
			
			УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказатели(ОтчетОбъект,ПоказательОтчета,ПоказательОтчета.Значение+СтрПоказатель.Значение*ПолучитьЗнакЗаписи(СтрПоказатель,ПараметрыОбработки.Сбалансированная));
			
			Если ПоказателиИтог.Найти(СтрПоказатель.Показатель)=Неопределено Тогда
				ПоказателиИтог.Добавить(СтрПоказатель.Показатель);
			КонецЕсли;
			
			Если СтрПоказатель.РаспределятьПоАналитикам=Истина Тогда
				
				МассивДанных=ОтчетОбъект.мПоказателиРаскрытия.НайтиСтроки(Новый Структура("Показатель",СтрПоказатель.Показатель));
				
				Если МассивДанных.Количество()=0 Тогда
					
					Если ЗначениеЗаполнено(ПоказательОтчета.ГруппаРаскрытия) Тогда
						
						СтруктураАналитики=Справочники.ГруппыРаскрытия.ПолучитьПустуюСтруктуруРаскрытия(ПоказательОтчета.ГруппаРаскрытия);
						СтруктураАналитики.Вставить("Показатель",ПоказательОтчета.Ссылка);
						
						УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ОтчетОбъект,СтрПоказатель.Значение*ПолучитьЗнакЗаписи(СтрПоказатель,ПараметрыОбработки.Сбалансированная),СтруктураАналитики);
						
					КонецЕсли;
				
				ИначеЕсли МассивДанных.Количество()=1 Тогда
					
					УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ОтчетОбъект,ПоказательОтчета.Значение,МассивДанных[0]);
					
				Иначе
					
					МассивСумм=ОбщегоНазначенияУХ.РаспределитьПропорционально(ПоказательОтчета.Значение, МассивДанных, , ,"Значение");
					
					Если МассивСумм = Неопределено Тогда
						
						Для Каждого Строка ИЗ МассивДанных Цикл
							
							УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ОтчетОбъект,Неопределено,Строка);
							
						КонецЦикла;
						
					Иначе
						
						Для К = 0 По МассивСумм.ВГраница() Цикл
							
							УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ОтчетОбъект,МассивСумм[К],МассивДанных[К]);
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Готовимся к пересчету вычисляемых показателей
	
	// Пересчитаем показатели, у которых было скорректировано
	// раскрытие. Если корректировка показателя была сделана явно - он не пересчитывается.
	
	МассивКПересчету=Новый Массив;
	
	Для Каждого ПоказательРаскрытия ИЗ ПоказателиРаскрытия Цикл
		
		Если ПоказателиИтог.Найти(ПоказательРаскрытия)=Неопределено Тогда
			
			Если ПараметрыОбработки.АбсолютныеЗначения Тогда
				
				СтрокаПоказатель=ОтчетОбъект.мСоответствиеДляПоискаПоСсылке[ПоказательРаскрытия];
				СтрокаПоказатель.Значение=0;
				
			КонецЕсли;	
			
			МассивКПересчету.Добавить(ПоказательРаскрытия);
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если МассивКПересчету.Количество()>0 Тогда
		
		ОтчетОбъект.УстановитьИтогиПоПоказателям(МассивКПересчету);
		
	КонецЕсли;
	
	// заполняем параметры
	ОтчетОбъект.СформироватьСтруктуруПараметров();
	
	// инициализируем структуру "Показатели"
	ОтчетОбъект.СформироватьСтруктуруПоказателей();
	
	// Готовим массив вычисляемых показателей, которые нужно пересчитать
	
	МассивВычисляемых=Новый Массив;
	
	Для Каждого СтрПоказатель ИЗ ПоказателиИтог Цикл
		
		МассивЗависимых=ОтчетОбъект.ПолучитьПутьВычисления(СокрЛП(СтрПоказатель.Код));
		
		Если МассивЗависимых=Неопределено Тогда
			
			Продолжить;
			
		Иначе
			
			Для Каждого Зависимый ИЗ МассивЗависимых Цикл
				
				МассивВычисляемых.Добавить(Зависимый);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрПоказатель ИЗ МассивКПересчету Цикл
		
		МассивЗависимых=ОтчетОбъект.ПолучитьПутьВычисления(СокрЛП(СтрПоказатель.Код));
		
		Если МассивЗависимых=Неопределено Тогда
			
			Продолжить;
			
		Иначе
			
			Для Каждого Зависимый ИЗ МассивЗависимых Цикл
				
				МассивВычисляемых.Добавить(Зависимый);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Запускаем механизмы вычисления
	Если НЕ ЗапуститьМодульВычисленияИзолированно(ОтчетОбъект,МассивВычисляемых) Тогда
		
		Сообщить(СтрШаблон(Нстр("ru = 'При обработке экземпляра отчета %1 произошла ошибка '"), 
			Строка(ОтчетОбъект)),СтатусСообщения.Важное);
		Возврат Ложь;
		
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции // ОбработатьТаблицыОтчета()

Функция ЗапуститьМодульВычисленияИзолированно(ОтчетОбъект,МассивКодовПоказателей=Неопределено)
	
	ВычислениеВыполнено=Истина;
		
	Если НЕ ПустаяСтрока(ОтчетОбъект.ПравилоОбработки.ПроцедураВычисления) Тогда
		
		ВычислениеВыполнено=ОтчетОбъект.ЗапуститьВнешнююПроцедуру(ОтчетОбъект.ПравилоОбработки.ПроцедураВычисления);
			
	КонецЕсли;
			
	Если ВычислениеВыполнено Тогда
		
		УправлениеОтчетамиУХ.ОбработатьПоПараметрическойНастройке(ОтчетОбъект,Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление,МассивКодовПоказателей);
		
	КонецЕсли;
	
	Возврат ВычислениеВыполнено;	
	
КонецФункции // ЗапуститьМодульЗаполненияИзолированно() 

Функция ПолучитьЗнакЗаписи(Запись,Сбалансированная=Истина) Экспорт
	
	Если НЕ Сбалансированная Тогда
		Возврат 1;	
	ИначеЕсли Запись.Показатель.ВидПоказателя=Перечисления.ВидыПоказателей.Активный И Запись.Дебет Тогда
		Возврат 1;
	ИначеЕсли Запись.Показатель.ВидПоказателя=Перечисления.ВидыПоказателей.Активный И Запись.Кредит Тогда
		Возврат -1;
	ИначеЕсли Запись.Показатель.ВидПоказателя=Перечисления.ВидыПоказателей.Пассивный И Запись.Кредит Тогда
		Возврат 1;
	ИначеЕсли Запись.Показатель.ВидПоказателя=Перечисления.ВидыПоказателей.Пассивный И Запись.Дебет Тогда
		Возврат -1;
	Иначе
		Возврат 1;
	КонецЕсли;	
	
КонецФункции // ПолучитьЗнакЗаписи()

Функция ВернутьДанныеПоКоличествуАналитик(ВидОтчета,КэшВидовОтчета) Экспорт
	
	Если КэшВидовОтчета=Неопределено Тогда
		
		КэшВидовОтчета=Новый Соответствие;
		
	КонецЕсли;
	
	АналитикВидаОтчета=КэшВидовОтчета[ВидОтчета];
	
	Если АналитикВидаОтчета=Неопределено Тогда
		
		АналитикВидаОтчета=ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(ВидОтчета);	
		КэшВидовОтчета.Вставить(ВидОтчета,АналитикВидаОтчета);
		
	КонецЕсли;
	
	Возврат АналитикВидаОтчета;
					
КонецФункции

Процедура ДобавитьЗаписьВРегистр(СтруктураРеквизиты,мСоответствиеНаборовЗаписей,ИмяРабочейТаблицы,СтрокаЗаписи,Замещать=Истина)
		
	ВерсииНабора=мСоответствиеНаборовЗаписей[ИмяРабочейТаблицы];
	
	Если ВерсииНабора=Неопределено Тогда
		
		ВерсииНабора=Новый Соответствие;
		
		НаборЗаписей=РегистрыСведений[ИмяРабочейТаблицы].СоздатьНаборЗаписей();
		
		Если Замещать Тогда
			НаборЗаписей.Отбор.Версия.Установить(СтрокаЗаписи.Версия);
			НаборЗаписей.ОбменДанными.Загрузка=Истина;
		КонецЕсли;
				
		ВерсииНабора.Вставить(СтрокаЗаписи.Версия,НаборЗаписей);
		
		мСоответствиеНаборовЗаписей.Вставить(ИмяРабочейТаблицы,ВерсииНабора);
		
	Иначе
		
		НаборЗаписей=ВерсииНабора[СтрокаЗаписи.Версия];
		
		Если НаборЗаписей=Неопределено Тогда
			
			НаборЗаписей=РегистрыСведений[ИмяРабочейТаблицы].СоздатьНаборЗаписей();
			
			Если Замещать Тогда
				НаборЗаписей.Отбор.Версия.Установить(СтрокаЗаписи.Версия);
				НаборЗаписей.ОбменДанными.Загрузка=Истина;
			КонецЕсли;
			
			ВерсииНабора.Вставить(СтрокаЗаписи.Версия,НаборЗаписей);
			
		КонецЕсли;
		
	КонецЕсли;
							
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, СтрокаЗаписи);
	
	Движение.ПравилоОбработки			= СтруктураРеквизиты.ПравилоОбработки;
	Движение.ИспользуемаяИБ				= СтруктураРеквизиты.ИспользуемаяИБ;
	Движение.ДатаИзменения				= СтруктураРеквизиты.ДатаИзменения;
	Движение.ПоследнийРедактировавший 	= СтруктураРеквизиты.ПоследнийРедактировавший;
	Движение.СпособФормированияОтчета 	= СтруктураРеквизиты.СпособФормированияОтчета;
	Движение.ДатаИзмененияMs 			= СтруктураРеквизиты.ДатаИзмененияMs;
	
	// Для независимого регистра все равно должны быть заполнены поля Активность и Регистратор.
	Движение.Активность=Истина;
	Движение.Регистратор=СтрокаЗаписи.Версия;
		
КонецПроцедуры


Функция СоздатьВерсию(Ссылка,Отказ,АктивностьДвижений,ОписаниеВерсии,СтрВерсия)
	
	ШапкаОшибки = СтрШаблон(Нстр("ru = 'Версия ""%1"" не может быть записана:'"), Ссылка);
	
	Версия = Справочники.ВерсииЗначенийПоказателей.СоздатьЭлемент();
	
	Попытка
		
		Версия.ЭкземплярОтчета 	= СтрВерсия.ЭкземплярОтчета;
		Версия.Регистратор     	= Ссылка;
		Версия.Организация     	= СтрВерсия.ЭкземплярОтчета.Организация;
		Версия.ВидОтчета       	= СтрВерсия.ЭкземплярОтчета.ВидОтчета;
		Версия.Валюта          	= СтрВерсия.Валюта;
		Версия.Владелец        	= ОписаниеВерсии;
		Версия.ПериодОтчета    	= Ссылка.ПериодОтчета;
		Версия.Сценарий        	= СтрВерсия.ЭкземплярОтчета.Сценарий;
		Версия.Проект        	= СтрВерсия.ЭкземплярОтчета.Проект;
		Версия.Активность      	= АктивностьДвижений;
		Версия.ВидОперации		= Ссылка.ВидОперации;
		Версия.Записать();
		
	Исключение
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Ошибка при создании версии показателей.'"), Отказ, ШапкаОшибки);
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат Версия.Ссылка;
	
КонецФункции

#КонецОбласти

#Область ТрансформационныеКорректировки

Функция ПроверитьПрименимостьШаблона(Ссылка,ИмяДокумента,ДанныеОтбора)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Регистратор.Ссылка КАК Ссылка
	|ИЗ
	|	Документ."+ИмяДокумента+" КАК Регистратор
	|ГДЕ
	|	Регистратор.Ссылка = &Ссылка И "+ДанныеОтбора.ТекстОтбора;
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	ЗаполнитьПараметрвЗапросаПоИсточнику(Запрос,ДанныеОтбора);
		
	Результат=Запрос.Выполнить().Выбрать();
	
	Возврат Результат.Следующий();
	
КонецФункции // ПроверитьПрименимостьШаблона() 

Функция ЗаполнитьПараметрвЗапросаПоИсточнику(Запрос,ДанныеОтбора)
	
	Для Каждого Строка ИЗ ДанныеОтбора.ТаблицаПараметровОтбораБД Цикл
		
		Запрос.УстановитьПараметр(Строка.ИмяПараметра,УправлениеОтчетамиУХ.ПолучитьУточнениеСпособаОпределения(Строка.ПолеБД,Строка.ИмяПараметра,ДанныеОтбора.УточненияСпособовОпределения));
		
	КонецЦикла;

КонецФункции // ПолучитьТаблицуПараметров()

Функция ОтражатьПоДокументам(СпособТрансляции)
	
	Возврат СпособТрансляции=Перечисления.СпособыТрансляции.ПоДокументамОбработка
			ИЛИ СпособТрансляции=Перечисления.СпособыТрансляции.ПоДокументамПриПроведении
			ИЛИ СпособТрансляции=Перечисления.СпособыТрансляции.ПоДокументамФоновоеЗадание;
	
	
КонецФункции // ПолучитьСпособОтраженияДокументов()

Процедура ПроверитьОбработатьКорректировкиПоШаблонам(ИсходныйОбъект,Отказ,ОтменаПроведения=Ложь) Экспорт
	
	Организация			= ИсходныйОбъект.Организация;
	МетаданныеИсточника = ИсходныйОбъект.Метаданные();
	
	СценарийИсточника=?(ОбщегоНазначенияУХ.ЕстьРеквизитОбъектаМД("Сценарий", МетаданныеИсточника),ИсходныйОбъект.Сценарий,Неопределено);
	
	Если НЕ СценарийИсточника=Неопределено Тогда
		
		РабочийСценарий=СценарийИсточника;
		
	Иначе
		
		РабочийСценарий=Константы.СценарийМСФО.Получить();
		
	КонецЕсли;
	
	ДанныеУчетнойПолитики=КорректировкиЗначенийПоказателей32.ПолучитьДанныеУчетнойПолитики(Организация,РабочийСценарий,ИсходныйОбъект.Дата);
	
	Если (Не ЗначениеЗаполнено(ДанныеУчетнойПолитики.СпособТрансляции))
		ИЛИ ДанныеУчетнойПолитики.СпособТрансляции=Перечисления.СпособыТрансляции.СводныеПоДатам Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ДанныеУчетнойПолитики.НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.ФинансовыеРегистрыВРегистрБухгалтерии Тогда 
		
		ТаблицаФинансовыхРегистров=КорректировкиЗначенийПоказателей32.ОпределитьТаблицуФинансовыхРегистров(МетаданныеИсточника);
		
		Если ТаблицаФинансовыхРегистров.Количество()>0 Тогда
			
			КорректировкиЗначенийПоказателей32.ВыполнитьТрансляциюРегистровПоОбъекту(ИсходныйОбъект,ТаблицаФинансовыхРегистров,ДанныеУчетнойПолитики);
			
		КонецЕсли;
		
	КонецЕсли;
		
	ЗапросШаблон=Новый Запрос;
	ЗапросШаблон.Текст="ВЫБРАТЬ
	|	ШаблоныТрансформационныхКорректировок.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШаблоныТрансформационныхКорректировок КАК ШаблоныТрансформационныхКорректировок
	|ГДЕ
	|	НЕ ШаблоныТрансформационныхКорректировок.ПометкаУдаления
	|	И НЕ ШаблоныТрансформационныхКорректировок.Отключен
	|	И ШаблоныТрансформационныхКорректировок.ДляОнлайнПроводок
	|	И ШаблоныТрансформационныхКорректировок.ДокументБД.Наименование = &Наименование";
	
	ЗапросШаблон.УстановитьПараметр("Наименование",МетаданныеИсточника.Имя);
	
	Результат=ЗапросШаблон.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	ДанныеДляОтражения=Новый Структура;
	ДанныеДляОтражения.Вставить("ИсходныйДокумент",	ИсходныйОбъект.Ссылка);
	ДанныеДляОтражения.Вставить("Организация",		ИсходныйОбъект.Организация);
	ДанныеДляОтражения.Вставить("Дата",				ИсходныйОбъект.Дата);
	ДанныеДляОтражения.Вставить("СпособТрансляции",	ДанныеУчетнойПолитики.СпособТрансляции);
	ДанныеДляОтражения.Вставить("УчетнаяПолитика",	ДанныеУчетнойПолитики.УчетнаяПолитика);
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ШаблоныТрансформационныхКорректировок.Ссылка КАК ШаблонКорректировки,
	|	ШаблоныТрансформационныхКорректировок.ПланСчетов КАК ПланСчетов,
	|	ШаблоныТрансформационныхКорректировок.УстановленДополнительныйОтбор КАК УстановленДополнительныйОтбор,
	|	ШаблоныТрансформационныхКорректировок.ТекстОтбора КАК ТекстОтбора,
	|	ШаблоныТрансформационныхКорректировок.ТаблицаПараметровОтбораБД.(
	|		ПолеБД КАК ПолеБД,
	|		СпособВычисленияПараметра КАК СпособВычисленияПараметра,
	|		ЗначениеДляПроверки КАК ЗначениеДляПроверки,
	|		ТипРасчета КАК ТипРасчета,
	|		Реквизит КАК Реквизит,
	|		ТекстМодуля КАК ТекстМодуля,
	|		ИдентификаторСтроки КАК ИдентификаторСтроки,
	|		ИдентификаторРодителя КАК ИдентификаторРодителя,
	|		ИмяПараметра КАК ИмяПараметра
	|	) КАК ТаблицаПараметровОтбораБД,
	|	ШаблоныТрансформационныхКорректировок.УточненияСпособовОпределения.(
	|		НомерСтроки КАК НомерСтроки,
	|		ИмяПараметра КАК ИмяПараметра,
	|		Значение КАК Значение,
	|		Представление КАК Представление,
	|		Пометка КАК Пометка,
	|		Тип КАК Тип,
	|		ПолеБД КАК ПолеБД
	|	) КАК УточненияСпособовОпределения
	|ИЗ
	|	Справочник.ШаблоныТрансформационныхКорректировок КАК ШаблоныТрансформационныхКорректировок
	|ГДЕ
	|	ШаблоныТрансформационныхКорректировок.Ссылка=&Ссылка";
	
	ВыборкаШаблонов=Результат.Выбрать();
	
	Пока ВыборкаШаблонов.Следующий() Цикл
		
		Запрос.УстановитьПараметр("Ссылка",ВыборкаШаблонов.Ссылка);
		
		ВыборкаДанных=Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаДанных.Следующий() Цикл
			
			Если ВыборкаДанных.УстановленДополнительныйОтбор Тогда
				
				ДанныеОтбора=Новый Структура;
				ДанныеОтбора.Вставить("ТекстОтбора",					ВыборкаДанных.ТекстОтбора);
				ДанныеОтбора.Вставить("ТаблицаПараметровОтбораБД",		ВыборкаДанных.ТаблицаПараметровОтбораБД.Выгрузить());
				ДанныеОтбора.Вставить("УточненияСпособовОпределения",	ВыборкаДанных.УточненияСпособовОпределения.Выгрузить());
				
				Если НЕ ПроверитьПрименимостьШаблона(ИсходныйОбъект.Ссылка,МетаданныеИсточника.Имя,ДанныеОтбора) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОтменаПроведения Тогда
				
				ОтменитьКорректировкуПоШаблону(ВыборкаДанных.ШаблонКорректировки,ДанныеДляОтражения,Отказ);
				
			Иначе
				
				ДанныеДляОтражения.Вставить("Сценарий",РабочийСценарий);				
				СформироватьКорректировкуПоШаблону(ВыборкаДанных.ШаблонКорректировки,ДанныеДляОтражения,Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьСформироватьКорректировкиПоШаблонам()

Процедура СформироватьКорректировкуПоШаблону(ШаблонКорректировки,ДанныеДляОтражения,Отказ) Экспорт
	
	НаборЗаписей=РегистрыСведений.ОтражениеДокументовПоШаблонам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИсходныйДокумент.Установить(ДанныеДляОтражения.ИсходныйДокумент);
	НаборЗаписей.Отбор.ШаблонОперации.Установить(ШаблонКорректировки);

	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество()=0 Тогда
		
		ДанныеОбъекта=НаборЗаписей.Добавить();
		ДанныеОбъекта.ИсходныйДокумент=ДанныеДляОтражения.ИсходныйДокумент;
		ДанныеОбъекта.Организация=ДанныеДляОтражения.Организация;
		ДанныеОбъекта.Сценарий=ДанныеДляОтражения.Сценарий;
		ДанныеОбъекта.УчетнаяПолитика=ДанныеДляОтражения.УчетнаяПолитика;
		ДанныеОбъекта.ШаблонОперации=ШаблонКорректировки;
		ДанныеОбъекта.ПериодОтбора=ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(ДанныеДляОтражения.Дата,Перечисления.Периодичность.День,0);
		
		ДанныеЗакрытияПериода=УправлениеОтчетамиУХ.ПолучитьДанныеЗакрытогоПериода(ДанныеОбъекта.Организация);
		
		УправлениеОтчетамиУХ.ОбработатьДанныеОбъекта(ДанныеОбъекта,ДанныеДляОтражения.СпособТрансляции,ДанныеЗакрытияПериода);
		
	Иначе
		
		Для Каждого ДанныеОбъекта Из НаборЗаписей Цикл
			
			ДанныеОбъекта.УчетнаяПолитика=ДанныеДляОтражения.УчетнаяПолитика;
			ДанныеОбъекта.ПериодОтбора=ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(ДанныеДляОтражения.Дата,Перечисления.Периодичность.День,0);
			ДанныеЗакрытияПериода=УправлениеОтчетамиУХ.ПолучитьДанныеЗакрытогоПериода(ДанныеОбъекта.Организация);
			УправлениеОтчетамиУХ.ОбработатьДанныеОбъекта(ДанныеОбъекта,ДанныеДляОтражения.СпособТрансляции,ДанныеЗакрытияПериода);
			
		КонецЦикла;
		
	КонецЕсли;
	
	НаборЗаписей.Записать(Истина);
		
КонецПроцедуры // СформироватьКорректировкуПоШаблону() 

Процедура ОтменитьКорректировкуПоШаблону(ШаблонКорректировки,ДанныеДляОтражения,Отказ) Экспорт
	
	НаборЗаписей=РегистрыСведений.ОтражениеДокументовПоШаблонам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИсходныйДокумент.Установить(ДанныеДляОтражения.ИсходныйДокумент);
	НаборЗаписей.Отбор.ШаблонОперации.Установить(ШаблонКорректировки);
	
	НаборЗаписей.Прочитать();
	
	Для Каждого ДанныеОбъекта ИЗ НаборЗаписей Цикл
		
		ДанныеЗакрытияПериода=УправлениеОтчетамиУХ.ПолучитьДанныеЗакрытогоПериода(ДанныеОбъекта.Организация);
		
		ДанныеОбъекта.ПроведениеОтменено=Истина;
		ДанныеОбъекта.ОбработкаВыполнена=Перечисления.ДаНет.нет;
		ДанныеОбъекта.УчетнаяПолитика=ДанныеДляОтражения.УчетнаяПолитика;
		
		Если ДанныеЗакрытияПериода=Неопределено Тогда
			
			ДанныеОбъекта.ДатаЗакрытияПериодаОтражения="";
			ДанныеОбъекта.ДатаЗаписиДоЗакрытияПериода=ТекущаяДатаСеанса();
			ДанныеОбъекта.ДатаЗаписиПослеЗакрытияПериода="";
			
		ИначеЕсли ДанныеЗакрытияПериода.ДатаЗакрытияПериода>ТекущаяДатаСеанса() Тогда 
			
			ДанныеОбъекта.ДатаЗакрытияПериодаОтражения=ДанныеЗакрытияПериода.ДатаЗакрытияПериода;
			ДанныеОбъекта.ДатаЗаписиДоЗакрытияПериода=ТекущаяДатаСеанса();
			ДанныеОбъекта.ДатаЗаписиПослеЗакрытияПериода="";
			
		Иначе
			
			ДанныеОбъекта.ДатаЗакрытияПериодаОтражения=ДанныеЗакрытияПериода.ДатаЗакрытияПериода;
			ДанныеОбъекта.ДатаЗаписиПослеЗакрытияПериода=ТекущаяДатаСеанса();
			
		КонецЕсли;
		
		РегистрыСведений.ОтражениеДокументовПоШаблонам.ВыполнитьОтражениеОбъекта(ДанныеОбъекта);
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
		
	
КонецПроцедуры // ОтменитьКорректировкуПоШаблону()

Функция ПолучитьТаблицуКорректировкиПоШаблону(ШаблонПроводки,Регистратор,ПроводкиДокумента) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ШаблоныПроводок.СпособПолучения КАК СпособПолучения,
	|	ШаблоныПроводок.СоответствиеРесурсов.(
	|		РесурсИсточник КАК РесурсИсточник,
	|		РесурсПриемник КАК РесурсПриемник,
	|		Коэффициент КАК Коэффициент
	|	) КАК СоответствиеРесурсов,
	|	ШаблоныПроводок.ПравилаИспользованияПолейЗапроса.(
	|		Поле КАК Поле,
	|		Синоним КАК Синоним,
	|		КодАналитики КАК КодАналитики,
	|		РеквизитАналитики КАК РеквизитАналитики,
	|		ТаблицаАналитики КАК ТаблицаАналитики,
	|		СпособЗаполнения КАК СпособЗаполнения,
	|		ФиксированноеЗначение КАК ФиксированноеЗначение,
	|		РеквизитОбъекта КАК РеквизитОбъекта
	|	) КАК ПравилаИспользованияПолейЗапроса,
	|	ШаблоныПроводок.ТаблицаПараметровОтбораБД.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ПолеБД КАК ПолеБД,
	|		НаименованиеБД КАК НаименованиеБД,
	|		СпособВычисленияПараметра КАК СпособВычисленияПараметра,
	|		ЗначениеДляПроверки КАК ЗначениеДляПроверки,
	|		ТипРасчета КАК ТипРасчета,
	|		Реквизит КАК Реквизит,
	|		СмещениеПериода КАК СмещениеПериода,
	|		ТекстМодуля КАК ТекстМодуля,
	|		ИдентификаторСтроки КАК ИдентификаторСтроки,
	|		ИдентификаторРодителя КАК ИдентификаторРодителя,
	|		ИмяПараметра КАК ИмяПараметра
	|	) КАК ТаблицаПараметровОтбораБД,
	|	ШаблоныПроводок.УточненияСпособовОпределения.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ИмяПараметра КАК ИмяПараметра,
	|		Значение КАК Значение,
	|		Представление КАК Представление,
	|		Пометка КАК Пометка,
	|		Тип КАК Тип,
	|		ПолеБД КАК ПолеБД
	|	) КАК УточненияСпособовОпределения,
	|	ШаблоныПроводок.УстановленДополнительныйОтбор КАК УстановленДополнительныйОтбор,
	|	ШаблоныПроводок.СчетДт КАК СчетДт,
	|	ШаблоныПроводок.СчетКт КАК СчетКт,
	|	ШаблоныПроводок.ТабличнаяЧастьБД.Имя КАК ТабличнаяЧастьБДНаименование,
	|	ШаблоныПроводок.РегистрБД.Наименование КАК РегистрБДНаименование,
	|	ШаблоныПроводок.Владелец.ПланСчетов.Наименование КАК ПланСчетовНаименование,
	|	ШаблоныПроводок.ТекстОтбора КАК ТекстОтбора,
	|	ШаблоныПроводок.СчетДтИсточник.СчетСсылка КАК СчетДтИсточникСсылка,
	|	ШаблоныПроводок.СчетКтИсточник.СчетСсылка КАК СчетКтИсточникСсылка,
	|	ШаблоныПроводок.СчетДтИсточник КАК СчетДтИсточник,
	|	ШаблоныПроводок.СчетКтИсточник КАК СчетКтИсточник
	|ИЗ
	|	Справочник.ШаблоныПроводок КАК ШаблоныПроводок
	|ГДЕ
	|	ШаблоныПроводок.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ШаблонПроводки);
	
	Результат=Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	ЗапросДанные=Новый Запрос;
	ЗапросДанные.УстановитьПараметр("Регистратор",Регистратор);
	
	ПравилаИспользованияПолейЗапроса=Результат.ПравилаИспользованияПолейЗапроса.Выгрузить();
	СоответствиеРесурсов=Результат.СоответствиеРесурсов.Выгрузить();
	
	ИмяДокумента=Регистратор.Метаданные().Имя;
	
	Если Результат.УстановленДополнительныйОтбор Тогда
		
		ДанныеОтбора=Новый Структура;
		ДанныеОтбора.Вставить("ТекстОтбора",					Результат.ТекстОтбора);
		ДанныеОтбора.Вставить("ТаблицаПараметровОтбораБД",		Результат.ТаблицаПараметровОтбораБД.Выгрузить());
		ДанныеОтбора.Вставить("УточненияСпособовОпределения",	Результат.УточненияСпособовОпределения.Выгрузить());
		
		ЗаполнитьПараметрвЗапросаПоИсточнику(ЗапросДанные,ДанныеОтбора);
		
	КонецЕсли;
	
	Если Результат.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеДокументы Тогда
		
		ТекстОтбора="ГДЕ Ссылка=&Регистратор";
		
		Если ЗначениеЗаполнено(Результат.ТабличнаяЧастьБДНаименование) Тогда
			
			ИмяТаблицы= "Документ."+ИмяДокумента+"."+Результат.ТабличнаяЧастьБДНаименование;

			
		Иначе
			
			ИмяТаблицы= "Документ."+ИмяДокумента
										
		КонецЕсли;
									
	ИначеЕсли Результат.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
		
		ИмяТаблицы="РегистрБухгалтерии."+Результат.РегистрБДНаименование+".ДвиженияССубконто";
		
		ТекстОтбора="ГДЕ Регистратор=&Регистратор
		|И СчетДт В ИЕРАРХИИ(&СчетДт)
		|И СчетКт В ИЕРАРХИИ(&СчетКт)";
		
		ЗапросДанные.УстановитьПараметр("СчетДт",Результат.СчетДтИсточникСсылка);
		ЗапросДанные.УстановитьПараметр("СчетКт",Результат.СчетКтИсточникСсылка);
		
	ИначеЕсли  Результат.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления Тогда
		
		ИмяТаблицы="РегистрНакопления."+Результат.РегистрБДНаименование;	
		ТекстОтбора="ГДЕ Регистратор=&Регистратор";
		
	ИначеЕсли  Результат.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений Тогда
		
		ИмяТаблицы="РегистрСведений."+Результат.РегистрБДНаименование;	
		ТекстОтбора="ГДЕ Регистратор=&Регистратор";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Результат.ТекстОтбора) Тогда
		
		ТекстОтбора=ТекстОтбора+"
		|И "+Результат.ТекстОтбора;
		
	КонецЕсли;
	
	ТаблицаДанных=ПолучитьТаблицуДанныхПоРегистратору(ЗапросДанные,
				ИмяТаблицы,
				ПравилаИспользованияПолейЗапроса,
				СоответствиеРесурсов,
				ТекстОтбора);		

	ЗаполнитьПоляПринудительно(ТаблицаДанных,ПравилаИспользованияПолейЗапроса);
	
	ТаблицаДанных.Колонки.Добавить("СчетДт");
	ТаблицаДанных.ЗаполнитьЗначения(Результат.СчетДт,"СчетДт");
	
	ТаблицаДанных.Колонки.Добавить("СчетКт");
	ТаблицаДанных.ЗаполнитьЗначения(Результат.СчетКт,"СчетКт");
	
	Если Результат.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
		
		ТаблицаДанных.Колонки.Добавить("СчетДтИсточник");
		ТаблицаДанных.ЗаполнитьЗначения(Результат.СчетДтИсточник,"СчетДтИсточник");
		
		ТаблицаДанных.Колонки.Добавить("СчетКтИсточник");
		ТаблицаДанных.ЗаполнитьЗначения(Результат.СчетКтИсточник,"СчетКтИсточник");
		
	КонецЕсли;
	
	МассивБалансовые=Новый Массив;
		
	Для Каждого Колонка ИЗ ТаблицаДанных.Колонки Цикл
		
		Если Колонка.Имя="СуммаВВалютеУчета"
			ИЛИ Колонка.Имя="Сумма" Тогда
			
			МассивБалансовые.Добавить(Колонка.Имя);
			
		ИначеЕсли Колонка.Имя="ВалютнаяСуммаДт"
			ИЛИ Колонка.Имя="СуммаВВалютеДт" Тогда
			
			РесурсВалютнаяСуммаДт=Колонка.Имя;
			
		ИначеЕсли Колонка.Имя="ВалютнаяСуммаКт"
			ИЛИ Колонка.Имя="СуммаВВалютеКт" Тогда
			
			РесурсВалютнаяСуммаКт=Колонка.Имя;
			
		ИначеЕсли Колонка.Имя="КоличествоДт" Тогда
			
			РесурсКоличествоДт=Колонка.Имя;
			
		ИначеЕсли Колонка.Имя="КоличествоКт" Тогда
			
			РесурсКоличествоКт=Колонка.Имя;
			
		КонецЕсли;
		
	КонецЦикла;
				
	Для Каждого СтрокаДанные ИЗ ТаблицаДанных Цикл
		
		Для Каждого Ресурс ИЗ МассивБалансовые Цикл
			
			НоваяСтрока=ПроводкиДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДанные);
			
			НоваяСтрока.ШаблонПроводки=ШаблонПроводки;
						
			НоваяСтрока.РесурсРегистра	=Ресурс;
			НоваяСтрока.Значение		=СтрокаДанные[Ресурс];
			
			Если НЕ РесурсКоличествоДт=Неопределено Тогда
				
				НоваяСтрока.КоличествоДт=СтрокаДанные[РесурсКоличествоДт];
					
			КонецЕсли;
			
			Если НЕ РесурсКоличествоКт=Неопределено Тогда
				
				НоваяСтрока.КоличествоКт=СтрокаДанные[РесурсКоличествоКт];
					
			КонецЕсли;
			
			Если НЕ РесурсВалютнаяСуммаДт=Неопределено Тогда
				
				НоваяСтрока.ЗначениеВалютаДт=СтрокаДанные[РесурсВалютнаяСуммаДт];
			
			КонецЕсли;
			
			Если НЕ РесурсВалютнаяСуммаКт=Неопределено Тогда
				
				НоваяСтрока.ЗначениеВалютаКт=СтрокаДанные[РесурсВалютнаяСуммаКт];
			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
					
КонецФункции // ПолучитьТаблицуКорректировкиПоШаблону()
			
Процедура ЗаполнитьПоляПринудительно(ТаблицаДанных,ПравилаИспользованияПолейЗапроса);
		
	СтрФиксированныеЗначения=ПравилаИспользованияПолейЗапроса.НайтиСтроки(Новый Структура("СпособЗаполнения",Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение));
	
	Для Каждого СтрПоле ИЗ СтрФиксированныеЗначения Цикл
				
		Если ТаблицаДанных.Колонки.Найти(СтрПоле.РеквизитОбъекта)=Неопределено Тогда
			
			ТаблицаДанных.Колонки.Добавить(СтрПоле.РеквизитОбъекта);
			
		КонецЕсли;
		
		ТаблицаДанных.ЗаполнитьЗначения(СтрПоле.ФиксированноеЗначение,СтрПоле.РеквизитОбъекта);
					
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоляПринудительно() 


Функция ПолучитьТаблицуДанныхПоРегистратору(ЗапросДанные,ИмяТаблицы,ПравилаИспользованияПолейЗапроса,СоответствиеРесурсов,ТекстОтбора)
							
	ТекстПоля="";
	
	Для Каждого СтрПоле ИЗ ПравилаИспользованияПолейЗапроса Цикл
		
		Если НЕ СтрПоле.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекстПоля=ТекстПоля+",
		|"+СтрПоле.Поле+" КАК "+СтрПоле.РеквизитОбъекта;
		
	КонецЦикла;
	
	Для Каждого СтрРесурс ИЗ СоответствиеРесурсов Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрРесурс.РесурсИсточник) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекстПоля=ТекстПоля+",
		|"+СтрРесурс.РесурсИсточник+"*"+СтрРесурс.Коэффициент+" КАК "+СтрРесурс.РесурсПриемник;
		
	КонецЦикла;	
	
	ЗапросДанные.Текст="ВЫБРАТЬ "+Сред(ТекстПоля,2)+"
	|ИЗ "+ИмяТаблицы+"
	|"+ТекстОтбора;
	
	Возврат ЗапросДанные.Выполнить().Выгрузить();						

КонецФункции // ЗаполнитьПоТабличнойЧастиБД()

Процедура ЗаполнитьПроводкиПоТаблицамРегистратора(ШаблонКорректировки,Регистратор,ПроводкиДокумента) Экспорт
		
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ШаблоныПроводок.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШаблоныПроводок КАК ШаблоныПроводок
	|ГДЕ
	|	ШаблоныПроводок.Владелец = &ШаблонКорректировки
	|	И НЕ ШаблоныПроводок.ПометкаУдаления
	|	И НЕ ШаблоныПроводок.Отключен
	|	И НЕ ШаблоныПроводок.РасширеннаяНастройка";
	
	Запрос.УстановитьПараметр("ШаблонКорректировки",ШаблонКорректировки);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ПолучитьТаблицуКорректировкиПоШаблону(Результат.Ссылка,Регистратор,ПроводкиДокумента);
				
	КонецЦикла;	
	
КонецПроцедуры // ЗаполнитьПроводкиПоТаблицамРегистратора() 



#КонецОбласти

#КонецЕсли


