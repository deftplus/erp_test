
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.РегистрБухгалтерии.Видимость	= Ложь;	
	АдресХранилищаПеременныхДляРасчета		= ПоместитьВоВременноеХранилище(Неопределено,ЭтаФорма.УникальныйИдентификатор);
		
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ДокументЗакрыватьПриВыборе",				);
	СтруктураПараметров.Вставить("ДокументЗакрыватьПриЗакрытииВладельца",	);
	СтруктураПараметров.Вставить("ДокументЗначениеКопирования",				);
	СтруктураПараметров.Вставить("ДокументЗначенияЗаполнения",				);
	СтруктураПараметров.Вставить("ДокументКлюч",							);
	СтруктураПараметров.Вставить("ДокументКлючНазначенияИспользования",		);
	СтруктураПараметров.Вставить("ДокументОснование",						);
	СтруктураПараметров.Вставить("ДокументПараметрыФункциональныхОпций",	);
	СтруктураПараметров.Вставить("ДокументТолькоПросмотр",					);
	
	Параметры.Свойство("ЗакрыватьПриВыборе",			СтруктураПараметров.ДокументЗакрыватьПриВыборе);
	Параметры.Свойство("ЗакрыватьПриЗакрытииВладельца",	СтруктураПараметров.ДокументЗакрыватьПриЗакрытииВладельца);
	Параметры.Свойство("ЗначениеКопирования",			СтруктураПараметров.ДокументЗначениеКопирования);
	Параметры.Свойство("ЗначенияЗаполнения",			СтруктураПараметров.ДокументЗначенияЗаполнения);
	Параметры.Свойство("Ключ",							СтруктураПараметров.ДокументКлюч);
	Параметры.Свойство("КлючНазначенияИспользования",	СтруктураПараметров.ДокументКлючНазначенияИспользования);
	Параметры.Свойство("Основание",						СтруктураПараметров.ДокументОснование);
	Параметры.Свойство("ПараметрыФункциональныхОпций",	СтруктураПараметров.ДокументПараметрыФункциональныхОпций);
	Параметры.Свойство("ТолькоПросмотр",				СтруктураПараметров.ДокументТолькоПросмотр);
	
	Если НЕ (ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() ИЛИ Параметры.ИмяОбъектаМетаданных="Трансляция") Тогда 
		
		Отказ=Истина;
		Возврат;
		
	КонецЕсли;
	
	Объект.ИмяОбъектаМетаданных				= Параметры.ИмяОбъектаМетаданных;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ДокументОснование) Тогда
		
		Объект.ШаблонКорректировки=СтруктураПараметров.ДокументОснование;
		
		Если ТипЗнч(Объект.ШаблонКорректировки)=Тип("СправочникСсылка.ШаблоныТрансляций") Тогда
			Объект.НаправлениеТрансляции=Объект.ШаблонКорректировки.НаправлениеТрансляции;
		КонецЕсли;
		
		ЗаполнитьПоШаблону();
		ОбновитьРесурсыРегистра();
		ОтображатьДетальныеЗаписи=Истина;
		ОтображатьСводныеИтоги=Ложь;
		
	ИначеЕсли Не ЗначениеЗаполнено(СтруктураПараметров.ДокументКлюч) Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Сценарий) Тогда
			
			Объект.Сценарий=Константы.СценарийМСФО.Получить();
			
		КонецЕсли;
		
		Объект.ШаблонКорректировки=Параметры.ШаблонКорректировки;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ДокументЗначениеКопирования) Тогда
			
			ЗаполнитьФормуПоСсылке(СтруктураПараметров.ДокументЗначениеКопирования,Истина);
			
			Если ЗначениеЗаполнено(Объект.Организация) Тогда
				
				ПриИзмененииОрганизации();
				
			КонецЕсли;
			
		ИначеЕсли Не (ЗначениеЗаполнено(Объект.ВидОперации) 
				ИЛИ ЗначениеЗаполнено(Объект.ПланСчетов)
				ИЛИ ЗначениеЗаполнено(Объект.ШаблонКорректировки)) Тогда
			
			Если Объект.ИмяОбъектаМетаданных="ТрансформационнаяКорректировка" Тогда
				
				Объект.ВидОперации=Справочники.ВидыОпераций.УчетныеОперации;
				Объект.ШаблонКорректировки=Справочники.ШаблоныТрансформационныхКорректировок.ПустаяСсылка();

			ИначеЕсли Объект.ИмяОбъектаМетаданных="Трансляция" Тогда
				
				Объект.ВидОперации=Справочники.ВидыОпераций.Трансляция;
				Объект.СпособТрансляции=Перечисления.СпособыТрансляции.СводныеПоДатам;
				ПриИзмененииПараметровУчетнойПолитики();
				
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(Объект.ПланСчетов) Тогда
				
				Объект.ПланСчетов=УчетМСФОПовтИспУХ.ПолучитьПланСчетовПоИмениРБ("МСФО", Справочники.ТипыБазДанных.ТекущаяИБ);
							
			КонецЕсли;
			
			ОтображатьДетальныеЗаписи=Истина;
			ОтображатьСводныеИтоги=Ложь;
			
		ИначеЕсли ЗначениеЗаполнено(Объект.ШаблонКорректировки) Тогда
			
			ЗаполнитьПоШаблону();
			ОбновитьРесурсыРегистра();
			ОтображатьДетальныеЗаписи=Истина;
			ОтображатьСводныеИтоги=Ложь;
			
		КонецЕсли;
		
	Иначе
		
		ДокументОбъект=СтруктураПараметров.ДокументКлюч.ПолучитьОбъект();
		
		Попытка
			ДокументОбъект.Заблокировать();
			Заблокирован=Истина;
		Исключение
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не удалось заблокировать объект %1: %2'"), 
				ДокументОбъект, ОписаниеОшибки()),Отказ,,СтатусСообщения.Важное);
			Возврат;
		КонецПопытки;
		
		ЗаполнитьЗначенияСвойств(Объект,ДокументОбъект);
		ДанныеШаблона=Обработки.УстановкаСоответствияСчетов.ПолучитьДанныеШаблона(Объект.ШаблонКорректировки);
		Объект.НаправлениеТрансляции=ДанныеШаблона.НаправлениеТрансляции;
		Объект.ИмяОбъектаМетаданных=ДокументОбъект.Метаданные().Имя;
		ОбновитьРесурсыРегистра();
		ОбновитьСправочнуюИнформацию(ДокументОбъект.Ссылка);	
		Заголовок=""+ДокументОбъект;
		
	КонецЕсли;
	
	Элементы.ФормаИзменитьПометкуУдаления.Пометка=Объект.ПометкаУдаления;
	
	Если ЗначениеЗаполнено(Объект.ПланСчетов) Тогда
		ОбновитьРегистрБухгалтерии();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ТипБД=Объект.ПравилоОбработки.ТипБД;
	УстановитьПривилегированныйРежим(Ложь);
	
	Элементы.ФормаЧтениеНеактуальныхЗаписей.Пометка=Объект.ЧтениеНеактуальныхЗаписей;
	
	СоответствиеКурсовВалют=Новый ФиксированноеСоответствие(Новый Соответствие);
	ПолучитьДанныеУчетнойПолитики();
	
	ВалютаУчета 			= ДанныеУчетнойПолитики.ВалютаУчета;	
	ВалютаОтчетности 		= ДанныеУчетнойПолитики.ВалютаУчетаДоп;
	
	УчетПоСценариям=Константы.УчетПоСценариям.Получить();
	СценарийПоУмолчанию=Константы.СценарийМСФО.Получить();
	ПериодичностьТрансляции=КэшируемыеПроцедурыУХ.ПолучитьПериодичностьТрансляцииПроводок();
	
	ОтобразитьНеобходимостьПерезаполнения();
	
	Если УчетПоСценариям Тогда
		
		Объект.Сценарий=?(ЗначениеЗаполнено(Объект.Сценарий),Объект.Сценарий,СценарийПоУмолчанию);
		Элементы.Сценарий.Видимость=Истина;
		Элементы.ДекорацияСценарий.Видимость=Ложь;
		
	Иначе
		
		Объект.Сценарий=СценарийПоУмолчанию;
		Элементы.Сценарий.Видимость=Ложь;
		Элементы.ДекорацияСценарий.Видимость=Истина;
		Элементы.ДекорацияСценарий.Заголовок= НСтр("ru = 'Сценарий: '")+?(ЗначениеЗаполнено(Объект.Сценарий),Объект.Сценарий, НСтр("ru = 'не указан'"));
		
	КонецЕсли;	
	
	ДобавитьПараметрыВалюты(ВалютаУчета);
	ДобавитьПараметрыВалюты(ВалютаОтчетности);
	ДобавитьПараметрыВалюты(Объект.ОсновнаяВалюта);
			
	Если ОтображатьДетальныеЗаписи Тогда
		
		ИнициализироватьОбъект();	
		ОбновитьЗаписиФормы();
		
	КонецЕсли;
	
	Если ОтображатьСводныеИтоги Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ТрансформационнаяКорректировкаПроводки.СчетДт,
		|	ТрансформационнаяКорректировкаПроводки.СчетКт,
		|	ТрансформационнаяКорректировкаПроводки.РесурсРегистра,
		|	СУММА(ТрансформационнаяКорректировкаПроводки.Значение) КАК Значение
		|ИЗ
		|	Документ.ТрансформационнаяКорректировка.Проводки КАК ТрансформационнаяКорректировкаПроводки
		|ГДЕ
		|	ТрансформационнаяКорректировкаПроводки.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТрансформационнаяКорректировкаПроводки.СчетДт,
		|	ТрансформационнаяКорректировкаПроводки.СчетКт,
		|	ТрансформационнаяКорректировкаПроводки.РесурсРегистра";
		
		Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			НоваяСтрока=СводныеПроводки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.РасчетДатыОтраженияВУчете) Тогда
		
		Объект.РасчетДатыОтраженияВУчете=Перечисления.СпособыРасчетаДатыОтраженияВУчете.ДатаОкончанияПериода;
		
	КонецЕсли;
	
	Элементы.ФильтроватьПроводки.Пометка	= Ложь;
	Элементы.ФильтроватьПоказатели.Пометка	= Ложь;
	УстановитьВидимость();
	
	Если Объект.ИмяОбъектаМетаданных <> "" Тогда
		ТипыРеквизитовОбъекта = ОбщегоНазначенияУХ.ТипыРеквизитовОбъекта(Метаданные.Документы[Объект.ИмяОбъектаМетаданных]);
	Иначе
		ТипыРеквизитовОбъекта = Неопределено;
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметры.НомерПроводки) Тогда
		
		ТекСтрока=ПроводкиОперации.НайтиСтроки(Новый Структура("НомерПроводки",Параметры.НомерПроводки));
		
		Если ТекСтрока.Количество()>0 Тогда
			
			Элементы.ПроводкиОперации.ТекущаяСтрока=ТекСтрока[0].ПолучитьИдентификатор();
			
		Иначе  // Ищем по номеру строки
			
			ТекСтрока=ПроводкиОперации.НайтиСтроки(Новый Структура("НомерСтроки",Параметры.НомерПроводки));
			
			Если ТекСтрока.Количество()>0 Тогда
				
				Элементы.ПроводкиОперации.ТекущаяСтрока=ТекСтрока[0].ПолучитьИдентификатор();
				
			КонецЕсли;		
			
		КонецЕсли;
		
	КонецЕсли;
	
	СпособКорректировки=?(Объект.КорректировкиЗначенийПоказателей,1,0); 
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ЭтотОбъект.НавигационнаяСсылка=ПолучитьНавигационнуюСсылку(Объект.Ссылка);
		
	КонецЕсли;
		
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ОтобразитьНеобходимостьПерезаполнения(НеобходимостьПерезаполнения=Истина)
	
	Если НЕ (НеобходимостьПерезаполнения
		И Объект.ИмяОбъектаМетаданных="Трансляция" 
		И ЗначениеЗаполнено(Объект.Ссылка)) Тогда
		
		Элементы.ДекорацияПерезаполнение.Видимость=Ложь;
		Объект.ТребуетсяПерезаполнение=Ложь;
		Возврат;
		
	КонецЕсли;
	
	ТекстНеобходимость="";
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СостоянияДокументовТрансляции.ИзмененыИсходныеДанные КАК ИзмененыИсходныеДанные,
	|	СостоянияДокументовТрансляции.ИзмененШаблонКорректировки КАК ИзмененШаблонКорректировки
	|ИЗ
	|	РегистрСведений.СостоянияДокументовТрансляции КАК СостоянияДокументовТрансляции
	|ГДЕ
	|	СостоянияДокументовТрансляции.ДокументТрансляции = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Если Результат.ИзмененШаблонКорректировки Тогда
			
			ТекстНеобходимость=ТекстНеобходимость+", "+НСтр("ru = 'изменен шаблон трансляции '");
			
		КонецЕсли;
		
		Если Результат.ИзмененыИсходныеДанные Тогда
			
			ТекстНеобходимость=ТекстНеобходимость+", "+НСтр("ru = 'изменены исходные данные '");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстНеобходимость=Сред(ТекстНеобходимость,3);
	
	Если ПустаяСтрока(ТекстНеобходимость) Тогда
		
		Элементы.ДекорацияПерезаполнение.Видимость=Ложь;
		
	Иначе
		
		Элементы.ДекорацияПерезаполнение.Заголовок=НСтр("ru = 'Требуется перезаполнение документа: '")+ТекстНеобходимость;
		Элементы.ДекорацияПерезаполнение.Видимость=Истина;
		Объект.ТребуетсяПерезаполнение=Истина;
		
	КонецЕсли;
			
КонецПроцедуры // ОтобразитьНеобходимостьПерезаполнения() 

&НаСервере
Процедура ПроверитьОпределитьШаблонТрансляции()
	
	Если НЕ Объект.ИмяОбъектаМетаданных="Трансляция" Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	ШаблонПоУмолчанию=ДанныеУчетнойПолитики.ШаблонТрансляции;	
																								
	Если ЗначениеЗаполнено(ШаблонПоУмолчанию) И (НЕ Объект.ШаблонКорректировки=ШаблонПоУмолчанию) Тогда
																									
		Объект.ШаблонКорректировки=ШаблонПоУмолчанию;
		ЗаполнитьПоШаблону();
		
	КонецЕсли;
																																															
КонецПроцедуры // ПроверитьОпределитьШаблонТрансляции() 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьБалансОперации();
					
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если (НЕ ЗавершениеРаботы) И ЗначениеЗаполнено(Объект.Ссылка) И Заблокирован Тогда
		РазблокироватьОбъект();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьРесурсыРегистра()
		
	Элементы.РесурсРегистра.СписокВыбора.Очистить();
	
	Для Каждого СтрРесурс Из Объект.РегистрБухгалтерии.Ресурсы Цикл
		
		Элементы.РесурсРегистра.СписокВыбора.Добавить(СтрРесурс.Имя,СтрРесурс.Синоним,СтрРесурс.Балансовый);
		
	КонецЦикла;
	
	Элементы.ПодразделениеОрганизации.Видимость=Объект.РегистрБухгалтерии.Наименование="Хозрасчетный";
			
КонецПроцедуры // ОбновитьРесурсыРегистра()

&НаСервере
Процедура ИнициализироватьОбъект()
	
	Если КонтекстИнициализирован Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПолучитьОбъектДляРасчета();
			
КонецПроцедуры // ИнициализироватьОбъект()

&НаСервере
Функция ПолучитьАдресДанныхОбъекта()
	
	ОбработкаОбъект=ПолучитьОбъектДляРасчета();
	ДанныеОбъекта=ОбщегоНазначенияУХ.ПолучитьСтруктуруРеквизитовОбъекта(ОбработкаОбъект,ОбработкаОбъект.ПодготовитьСтруктуруПеременныхДляРасчета());
		
	Возврат ПоместитьВоВременноеХранилище(ДанныеОбъекта,ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции // ПолучитьАдресДанныхОбъекта() 

&НаСервере
Функция ПодготовитьПараметрыРасшифровкиПроводки(НомерСтроки)

	ТекущаяПроводка=ПроводкиОперации.НайтиПоИдентификатору(НомерСтроки);
	
	ОбработкаОбъект=ПолучитьОбъектДляРасчета();
	ДанныеОбъекта=ОбщегоНазначенияУХ.ПолучитьСтруктуруРеквизитовОбъекта(ОбработкаОбъект,ОбработкаОбъект.ПодготовитьСтруктуруПеременныхДляРасчета());
	СтруктураПараметров=Новый Структура;
	
	СтрПоказатель=ДанныеОбъекта.мСоответствиеДляПоискаПоСсылке[ТекущаяПроводка.ШаблонПроводки];
		
	Если СтрПоказатель=Неопределено Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Шаблон проводки %1 не принадлежит шаблону корректировки %2. 
						|Возможно, шаблон корректировки был изменен'"), ТекущаяПроводка.ШаблонПроводки, ОбработкаОбъект.ШаблонКорректировки);
		
		СтруктураПараметров.Вставить("ТекстОшибки", ТекстОшибки);
		Возврат СтруктураПараметров;
		
	Иначе
		
		ЧислоАналитикДт=СтрПоказатель.ЧислоАналитикДт;
		ЧислоАналитикКт=СтрПоказатель.ЧислоАналитикКт;

	КонецЕсли;	
	
	СтруктураПараметров.Вставить("ПоказательОтчета",ТекущаяПроводка.ШаблонПроводки);
	СтруктураПараметров.Вставить("АдресХранилищаПеременныхДляРасчета",ПоместитьВоВременноеХранилище(ДанныеОбъекта,ЭтаФорма.УникальныйИдентификатор));
	СтруктураПараметров.Вставить("мТекущаяВалюта",Объект.ОсновнаяВалюта);
		
	
	СтруктураОтбора=Новый Структура;
	Индекс=1;
	
	Для Инд=1 ПО ЧислоАналитикДт Цикл
		
		Если ЗначениеЗаполнено(ТекущаяПроводка["СубконтоДт"+Инд]) Тогда
			
			СтруктураОтбора.Вставить("Аналитика"+Индекс,ТекущаяПроводка["СубконтоДт"+Инд]);
			
		КонецЕсли;
		
		Индекс=Индекс+1;
		
	КонецЦикла;
	
	Для Инд=1 ПО ЧислоАналитикКт Цикл
		
		Если ЗначениеЗаполнено(ТекущаяПроводка["СубконтоКт"+Инд]) Тогда
			
			СтруктураОтбора.Вставить("Аналитика"+Индекс,ТекущаяПроводка["СубконтоКт"+Инд]);
			
		КонецЕсли;
		
		Индекс=Индекс+1;
		
	КонецЦикла;
	
	Если СтруктураОтбора.Количество()>0 Тогда
		
		СтруктураПараметров.Вставить("СтруктураОтбора",СтруктураОтбора);
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции // ПодготовитьПараметрыРасшифровкиПроводки()

&НаСервере
Функция ПолучитьПараметрыОтчетаПоПроводкам(НомерСтроки)

	ТекущаяПроводка=ПроводкиОперации.НайтиПоИдентификатору(НомерСтроки);
	ОбработкаОбъект=РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ИнициализироватьТаблицыПроводок("Трансляция");
	
	Возврат Обработки.КорректировкиЗначенийПоказателей.СформироватьСтруктуруПараметровОтчета(ОбработкаОбъект,ТекущаяПроводка); 
		
КонецФункции // ПолучитьПараметрыОтчетаПоПроводкам() 

&НаСервере
Функция ПолучитьПараметрыОтчетаПоРегистрам(НомерСтроки,ДтКт)

	ТекущаяПроводка=ПроводкиОперации.НайтиПоИдентификатору(НомерСтроки);
	ОбъектРасшифровки=ТекущаяПроводка["Правило"+ДтКт];
	ОбъектРасчета=ПолучитьОбъектДляРасчета(); 
	
	СтруктураОтбора=Новый Структура;
	
	Для Индекс=1 По 3 Цикл
		
		Если ЗначениеЗаполнено(ТекущаяПроводка["Субконто"+ДтКт+Индекс]) Тогда
			
			СтруктураОтбора.Вставить("Аналитика"+Индекс,ТекущаяПроводка["Субконто"+ДтКт+Индекс]);
			
		КонецЕсли;
		
	КонецЦикла; 
	
	СтруктураОтбора.Вставить("ИдентификаторФинЗаписи",ТекущаяПроводка.ИдентификаторФинЗаписи);
					
	ДанныеОперанда=УправлениеОтчетамиУХ.РасшифроватьДанныеОперанда(ОбъектРасшифровки, ОбъектРасчета,СтруктураОтбора,ОбъектРасчета);
	
	Возврат ДанныеОперанда;
	
КонецФункции // ПолучитьПараметрыОтчетаПоПроводкам()

&НаСервере
Функция ПодготовитьПараметрыРасшифровкиПоказателя(НомерСтроки)

	СтрокаПоказатель=ПоказателиОтчетов.НайтиПоИдентификатору(НомерСтроки);
	
	ОбработкаОбъект=ПолучитьОбъектДляРасчета();
	ДанныеОбъекта=ОбщегоНазначенияУХ.ПолучитьСтруктуруРеквизитовОбъекта(ОбработкаОбъект,ОбработкаОбъект.ПодготовитьСтруктуруПеременныхДляРасчета());
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ПоказательОтчета",СтрокаПоказатель.Показатель);
	СтруктураПараметров.Вставить("АдресХранилищаПеременныхДляРасчета",ПоместитьВоВременноеХранилище(ДанныеОбъекта,ЭтаФорма.УникальныйИдентификатор));
	СтруктураПараметров.Вставить("мТекущаяВалюта",Объект.ОсновнаяВалюта);
	
	СтрПоказатель=ДанныеОбъекта.мСоответствиеДляПоискаПоСсылке[СтрокаПоказатель.Показатель];

	СтруктураОтбора=Новый Структура;
	Индекс=1;
	
	Для Инд=1 ПО СтрПоказатель.ЧислоАналитикГруппыРаскрытия Цикл
		
		СтруктураОтбора.Вставить("Аналитика"+Индекс,СтрокаПоказатель["Аналитика"+Инд]);
		Индекс=Индекс+1;
		
	КонецЦикла;
			
	СтруктураПараметров.Вставить("СтруктураОтбора",СтруктураОтбора);
	
	Возврат СтруктураПараметров;
	
КонецФункции // ПодготовитьПараметрыРасшифровкиПроводки()

&НаСервере
Процедура ЗаполнитьФормуПоСсылке(ДокументСсылка,Копирование=Ложь)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ";
	
	Если Не Копирование Тогда
		Запрос.Текст=Запрос.Текст+"	
		|	ДокументКорректировки.Ссылка,"
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|	ДокументКорректировки.ПериодОтчета,
	|	ДокументКорректировки.Сценарий,
	|	ДокументКорректировки.ОсновнаяВалюта,	
	|	ДокументКорректировки.Организация,
	|	ДокументКорректировки.ШаблонКорректировки,
	|	ДокументКорректировки.ЧтениеНеактуальныхЗаписей,
	|	ДокументКорректировки.ПоследнийРедактировавший,
	|	ДокументКорректировки.ВидОперации,
	|	ДокументКорректировки.ИспользуемаяИБ,";

	Если Объект.ИмяОбъектаМетаданных="ТрансформационнаяКорректировка"
		ИЛИ Объект.ИмяОбъектаМетаданных="Трансляция" Тогда
		
		Запрос.Текст=Запрос.Текст+"
		
		|	ДокументКорректировки.ПланСчетов,
		|	ДокументКорректировки.РегистрБухгалтерии,
		|	ДокументКорректировки.РасчетДатыОтраженияВУчете,
		|	ДокументКорректировки.ДатаОтраженияВУчете,";
		
		Если Объект.ИмяОбъектаМетаданных="ТрансформационнаяКорректировка" Тогда
			
			Запрос.Текст=Запрос.Текст+"	
			|	ДокументКорректировки.ДвиженияПоРегиструБухгалтерии,
			|	ДокументКорректировки.КорректировкиЗначенийПоказателей,
			|	ДокументКорректировки.ДействиеВСледующемПериоде,";
			
		Иначе
			
			Запрос.Текст=Запрос.Текст+"	
			|	ДокументКорректировки.ПланСчетовИсточник,
			|	ДокументКорректировки.РегистрБухгалтерииИсточник,
			|	ДокументКорректировки.НаправлениеТрансляции,";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|	ДокументКорректировки.ПравилоОбработки
	|ИЗ
	|	Документ."+Объект.ИмяОбъектаМетаданных+" КАК ДокументКорректировки
	|ГДЕ
	|	ДокументКорректировки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(Объект,Результат);
		
	КонецЕсли;
	
	Если Копирование Тогда
		
		Объект.ЗначениеКопирования=ДокументСсылка;
		
	КонецЕсли;
	
	ОбновитьСправочнуюИнформацию(ДокументСсылка);
					 	
КонецПроцедуры // ЗаполнитьФормуПоСсылке()

&НаСервере
Функция ТрансляцияВРегистрБухгалтерии(НаправлениеТрансляции)
	
	Возврат КорректировкиЗначенийПоказателей32.ТрансляцияВРегистрБухгалтерии(НаправлениеТрансляции);

КонецФункции // ТрансляцияВРегистрБухгалтерии() 

&НаСервере
Процедура ОбновитьСправочнуюИнформацию(ДокументСсылка)
	
	Запрос=Новый Запрос;
	
	Если Объект.ИмяОбъектаМетаданных="ТрансформационнаяКорректировка"
		ИЛИ ТрансляцияВРегистрБухгалтерии(Объект.НаправлениеТрансляции) Тогда
		
		Запрос.Текст="ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ТрансформационнаяКорректировкаПроводки.НомерСтроки) КАК КоличествоПроводок
		|ИЗ
		|	Документ."+Объект.ИмяОбъектаМетаданных+".Проводки КАК ТрансформационнаяКорректировкаПроводки
		|ГДЕ
		|	ТрансформационнаяКорректировкаПроводки.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			Элементы.КоличествоПроводок.Заголовок = НСтр("ru = 'Количество проводок: '") + Результат.КоличествоПроводок;
			
			ИнициализироватьОбъект();
			ОтображатьДетальныеЗаписи=Истина;
			ОтображатьСводныеИтоги=Ложь;	
			
		КонецЕсли;
		
		Элементы.ОтображатьДетальныеЗаписи.Заголовок		= НСтр("ru = 'Отображать проводки'");
		Элементы.ОтображатьСводныеИтоги.Заголовок	= НСтр("ru = 'Отображать сводные итоги'");
		
	Иначе
		
		Запрос.Текст="ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ТрансляцияПоказателиОтчетов.НомерСтроки) КАК КоличествоКорректировок
		|ИЗ
		|	Документ."+Объект.ИмяОбъектаМетаданных+".РедактируемыеЗаписи КАК ТрансляцияПоказателиОтчетов
		|ГДЕ
		|	ТрансляцияПоказателиОтчетов.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			Элементы.КоличествоПроводок.Заголовок = НСтр("ru = 'Количество записей: '") + Результат.КоличествоКорректировок;
				
			ИнициализироватьОбъект();
			ОтображатьДетальныеЗаписи=Истина;
			ОтображатьСводныеИтоги=Ложь;
				
		КонецЕсли;
		
		Элементы.ОтображатьДетальныеЗаписи.Заголовок		= НСтр("ru = 'Отображать записи'");
		Элементы.ОтображатьСводныеИтоги.Заголовок	= НСтр("ru = 'Отображать сводные итоги корректировок'");
		
	КонецЕсли;
	
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.Регистратор = &Ссылка";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	КорректируемыеЭкземплярыОтчетов.Очистить();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока=КорректируемыеЭкземплярыОтчетов.Добавить();
		НоваяСтрока.ЭкземплярОтчета=Результат.ЭкземплярОтчета;
		
	КонецЦикла;
	
КонецПроцедуры // 
 
&НаСервере
Функция ПолучитьОбъектДляРасчета()
	
	ОбработкаОбъект=РеквизитФормыВЗначение("Объект");
	
	Если НЕ КонтекстИнициализирован Тогда
		
		ОбработкаОбъект.ИнициализироватьКонтекст();
		АдресХранилищаПеременныхДляРасчета=ПоместитьВоВременноеХранилище(ОбработкаОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),ЭтаФорма.УникальныйИдентификатор);
		КонтекстИнициализирован=Истина;
		
	Иначе
		
		ОбработкаОбъект.АдресХранилищаПеременныхДляРасчета=АдресХранилищаПеременныхДляРасчета;
		ОбработкаОбъект.ВосстановитьПеременныеДляРасчета();
		
	КонецЕсли;
	
	ОбработкаОбъект.ДокументОбъект=ПолучитьРабочийОбъект();
		
	Возврат ОбработкаОбъект;
		
КонецФункции // ПолучитьРабочийОбъект()

&НаСервере
Функция ПолучитьРабочийОбъект()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Объект.ИмяОбъектаМетаданных <> "" Тогда
			ДокументОбъект=Документы[Объект.ИмяОбъектаМетаданных].СоздатьДокумент();
			ДокументОбъект.Дата=ТекущаяДата();
			ДокументОбъект.УстановитьНовыйНомер();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		
		ДокументОбъект=Объект.Ссылка.ПолучитьОбъект();
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект,Объект,,"Ссылка");	
		
	Возврат ДокументОбъект;
		
КонецФункции // ПолучитьРабочийОбъект()

&НаСервере
Процедура УстановитьВидимость() Экспорт
	
	Если Объект.РасчетДатыОтраженияВУчете=Перечисления.СпособыРасчетаДатыОтраженияВУчете.ПроизвольнаяДата Тогда
		
		Элементы.ДатаОтраженияВУчете.Доступность=Истина;
		
	Иначе
		
		Элементы.ДатаОтраженияВУчете.Доступность=Ложь;	
			
	КонецЕсли;
	
	Элементы.ОсновнаяВалюта.Доступность=(НЕ Объект.ИмяОбъектаМетаданных="Трансляция"); 
	
	Если Объект.ИмяОбъектаМетаданных="Трансляция" Тогда
		
		Элементы.ГруппаПериодОтражения.Видимость=Истина;
		Элементы.ГруппаПериодОтчета.Видимость=(Объект.СпособТрансляции=Перечисления.СпособыТрансляции.СводныеПоДатам ИЛИ (НЕ ЗначениеЗаполнено(Объект.ИсходныйДокумент)));
		Элементы.ИсходныйДокумент.Видимость=ЗначениеЗаполнено(Объект.ИсходныйДокумент);
		Элементы.ГруппаПериодОтчета.ТолькоПросмотр=ЗначениеЗаполнено(Объект.ИсходныйДокумент);
		Элементы.ГруппаРеквизиты.ТолькоПросмотр=ЗначениеЗаполнено(Объект.ИсходныйДокумент);
		Элементы.ПанельКорректировки.ТолькоПросмотр=Истина
		
	Иначе
		
		Элементы.ГруппаПериодОтражения.Видимость=Ложь;
		Элементы.ИсходныйДокумент.Видимость			= ЗначениеЗаполнено(Объект.ИсходныйДокумент);	
		Элементы.ГруппаПериодОтчета.Видимость 			= НЕ Элементы.ИсходныйДокумент.Видимость;
		Элементы.ГруппаРеквизиты.ТолькоПросмотр		= Элементы.ИсходныйДокумент.Видимость;
		Элементы.ПанельКорректировки.ТолькоПросмотр	= Элементы.ИсходныйДокумент.Видимость;
		Элементы.НомерДата.Видимость				= НЕ Элементы.ИсходныйДокумент.Видимость;
		
	КонецЕсли;
	
	Если Объект.ИмяОбъектаМетаданных="ТрансформационнаяКорректировка" 
		ИЛИ ТрансляцияВРегистрБухгалтерии(Объект.НаправлениеТрансляции) Тогда
		
		Элементы.ПроводкиОперации.Видимость		= ОтображатьДетальныеЗаписи;
		Элементы.СводныеПроводки.Видимость		= ОтображатьСводныеИтоги;
		Элементы.ПоказателиОтчетов.Видимость	= Ложь;
		Элементы.СводныеКорректировки.Видимость	= Ложь;
		
	Иначе
		
		Элементы.ПроводкиОперации.Видимость		= Ложь;
		Элементы.СводныеПроводки.Видимость		= Ложь;
		Элементы.ПоказателиОтчетов.Видимость	= ОтображатьДетальныеЗаписи;
		Элементы.СводныеКорректировки.Видимость	= ОтображатьСводныеИтоги;
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Объект.ШаблонКорректировки) Тогда
		
		Элементы.ПроводкиОперацииЗаполнитьДокумент.Видимость=Истина;
		
		Элементы.ГруппаПравилаРасчета.Видимость=(Объект.ИмяОбъектаМетаданных="ТрансформационнаяКорректировка" И (НЕ ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ));
		Элементы.ГруппаПравилаТрансляции.Видимость		= (Объект.ИмяОбъектаМетаданных="Трансляция");		
		
	Иначе
		
		Элементы.ПроводкиОперацииЗаполнитьДокумент.Видимость=Ложь;
		Элементы.ГруппаПравилаРасчета.Видимость=Ложь;
		Элементы.ГруппаПравилаТрансляции.Видимость		= Ложь;
		
	КонецЕсли;
		
	Элементы.ИспользуемаяИБ.Видимость	= (НЕ ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ);
	Элементы.ИспользуемаяИБ1.Видимость	= Элементы.ИспользуемаяИБ.Видимость;
	
	Если НЕ Константы.ПроверятьУтверждениеДанных.Получить() Тогда
		
		Элементы.ФормаЧтениеНеактуальныхЗаписей.Пометка=Истина;
		Элементы.ФормаЧтениеНеактуальныхЗаписей.Доступность=Ложь;
		
	Иначе
		
		Элементы.ФормаЧтениеНеактуальныхЗаписей.Пометка=Объект.ЧтениеНеактуальныхЗаписей;
		
	КонецЕсли;
		
	Элементы.ФильтроватьПроводки.Видимость=ОтображатьДетальныеЗаписи;
	
	Элементы.ГруппаПоказатели.Видимость=(Объект.ИмяОбъектаМетаданных="РучнаяОперация" 
				ИЛИ Объект.НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.ПоказателиВПоказатели
				ИЛИ Объект.НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.РегистрБухгалтерииВПоказатели);
				
	Элементы.ГруппаФормированиеДвижений.Видимость	= (Объект.ИмяОбъектаМетаданных="ТрансформационнаяКорректировка");
	Элементы.ГруппаСторнирование.Видимость          = (Объект.ИмяОбъектаМетаданных="ТрансформационнаяКорректировка");
		
	Если Объект.ИмяОбъектаМетаданных="Трансляция" Тогда
		
		Элементы.ШаблонРучнойОперации.Заголовок = НСтр("ru = 'Шаблон трансляции'");
		
	Иначе
		
		Элементы.ШаблонРучнойОперации.Заголовок = НСтр("ru = 'Шаблон корректировки'");
		
	КонецЕсли;
	
	ТрансляцияПроводок=ТрансляцияВРегистрБухгалтерии(Объект.НаправлениеТрансляции);
	
	Элементы.СводныеПроводкиСчетДтИсточник	.Видимость = ТрансляцияПроводок;
	Элементы.СводныеПроводкиСчетКтИсточник	.Видимость = ТрансляцияПроводок;
	Элементы.СводныеПроводкиПравилоДт		.Видимость = ТрансляцияПроводок;
	Элементы.СводныеПроводкиПравилоКт		.Видимость = ТрансляцияПроводок;
	
	Элементы.РедактируемыеЗаписиСчетДтИсточник	.Видимость 	= ТрансляцияПроводок;
	Элементы.РедактируемыеЗаписиСчетКтИсточник	.Видимость 	= ТрансляцияПроводок;
	Элементы.ПравилоДт							.Видимость 	= ТрансляцияПроводок;
	Элементы.ПравилоКт							.Видимость 	= ТрансляцияПроводок;
	Элементы.ПроводкиОперацииПериод				.Видимость	= ТрансляцияПроводок;
	
	Элементы.ФормаВыверкаТрансляции				.Видимость  = ТрансляцияПроводок;
	Элементы.ФормаОтобразитьПротокол			.Видимость	= ТрансляцияПроводок;
	
	Элементы.ГруппаМетаданныеУчета				.Видимость	= НЕ ТрансляцияПроводок;
	Элементы.УчетнаяПолитика					.Видимость 	= ТрансляцияПроводок;
	
	Если ТрансляцияПроводок Тогда
		
		Элементы.ПанельКорректировки.ОтображениеСтраниц=ОтображениеСтраницФормы.Нет;
		Элементы.ПанельКорректировки.ТекущаяСтраница=Элементы.ПанельКорректировки.ПодчиненныеЭлементы.КорректируемыеСтроки;
		
	Иначе
		
		Элементы.ПанельКорректировки.ОтображениеСтраниц=ОтображениеСтраницФормы.ЗакладкиСверху;
		
	КонецЕсли;
		
	Элементы.ШаблонПроводки.Видимость		=НЕ ТрансляцияПроводок;
	
	ТрансляцияПоказателей=(Объект.НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.РегистрБухгалтерииВПоказатели
						ИЛИ Объект.НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.ПоказателиВПоказатели
						ИЛИ Объект.КорректировкиЗначенийПоказателей);
	
	Элементы.РезультирующиеКорректировки.Видимость	= ТрансляцияПоказателей;
	Элементы.ПанельВалюты.Видимость					= ТрансляцияПоказателей;
	
	Если Объект.ИмяОбъектаМетаданных = "ТрансформационнаяКорректировка" Тогда
		Элементы.ПроводкиОперацииВидДвижения.Видимость = Истина;
	Иначе		
		Элементы.ПроводкиОперацииВидДвижения.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Заголовок= ?(Объект.ИмяОбъектаМетаданных="ТрансформационнаяКорректировка",НСтр("ru = 'Трансформационная корректировка'"),НСтр("ru = 'Трансляция'"));
		
	Иначе
		
		Заголовок=Объект.Ссылка;
		
	КонецЕсли; 
			
КонецПроцедуры
 
&НаСервере
Процедура ОбновитьРегистрБухгалтерии()
	
	МассивРегистров=УправлениеОтчетамиУХ.ПолучитьМассивРегистровБухгалтерии(Объект.ПланСчетов);	
	Элементы.РегистрБухгалтерии.СписокВыбора.Очистить();
	
	Для Каждого Регистр ИЗ МассивРегистров Цикл
		
		Элементы.РегистрБухгалтерии.СписокВыбора.Добавить(Регистр);
		
	КонецЦикла;
	
	Если Элементы.РегистрБухгалтерии.СписокВыбора.Количество()>0 Тогда
		
		Если НЕ Объект.РегистрБухгалтерии=Элементы.РегистрБухгалтерии.СписокВыбора[0].Значение Тогда	
			
			Объект.РегистрБухгалтерии=Элементы.РегистрБухгалтерии.СписокВыбора[0].Значение;
			
		КонецЕсли;
		
	КонецЕсли;
		
	ОбновитьРесурсыРегистра();
	Элементы.РегистрБухгалтерии.Видимость=(Элементы.РегистрБухгалтерии.СписокВыбора.Количество()>1);
		
КонецПроцедуры // ОбновитьРегистрБухгалтерии() 

&НаСервере
Процедура ПриИзмененииСчета(Дебет,НомерСтроки,ГруппирующийСчет=Ложь)
	
	ТекущаяСтрока=ПроводкиОперации.НайтиПоИдентификатору(НомерСтроки);
	
	Если Дебет Тогда
				
		РабочийСчет=ТекущаяСтрока.СчетДт;
			
		ТекстВидСубконто="ВидСубконтоДт";
		ТекстСубконто="СубконтоДт";
		
		Если РабочийСчет.Валютный Тогда
			
			ТекущаяСтрока.СчетДтВалютный=Истина;
			
		Иначе
			
			ТекущаяСтрока.СчетДтВалютный	= Ложь;
			ТекущаяСтрока.ВалютаДт			= Неопределено;
			
		КонецЕсли;
				
	Иначе
				
		РабочийСчет=ТекущаяСтрока.СчетКт;
				
		ТекстВидСубконто="ВидСубконтоКт";
		ТекстСубконто="СубконтоКт";
		
		Если РабочийСчет.Валютный Тогда
			
			ТекущаяСтрока.СчетКтВалютный	= Истина;
			
		Иначе
			
			ТекущаяСтрока.СчетКтВалютный	= Ложь;
			ТекущаяСтрока.ВалютаКт			= Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Инд=1 ПО 3 Цикл
				
		Если РабочийСчет.ВидыСубконто.Количество()<Инд Тогда
			
			ТекущаяСтрока[ТекстВидСубконто+Инд]	= Неопределено;
			ТекущаяСтрока[ТекстСубконто+Инд]	= Неопределено;
			
		Иначе
			
			СтрВидСубконто=РабочийСчет.ВидыСубконто[Инд-1];
			
			Если ЗначениеЗаполнено(СтрВидСубконто.ВидСубконтоСсылка) Тогда
				
				Если НЕ ТекущаяСтрока[ТекстВидСубконто+Инд]=СтрВидСубконто.ВидСубконтоСсылка Тогда
					
					ТекущаяСтрока[ТекстВидСубконто+Инд]	= СтрВидСубконто.ВидСубконтоСсылка;
					ТекущаяСтрока[ТекстСубконто+Инд]	= Неопределено;
					
				КонецЕсли;
									
			Иначе
				
				ТекущаяСтрока[ТекстВидСубконто+Инд]	= Неопределено;
				ТекущаяСтрока[ТекстСубконто+Инд]	= Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если (Не ЗначениеЗаполнено(ТекущаяСтрока.РесурсРегистра)) И Элементы.РесурсРегистра.СписокВыбора.Количество()>0 Тогда
							
		ТекущаяСтрока.РесурсРегистра = Элементы.РесурсРегистра.СписокВыбора[0].Значение;
					
	КонецЕсли;
							
КонецПроцедуры // ПриИзмененииСчета() 

&НаСервере
Процедура ОбновитьВалютныеСуммы(ИдентификаторСтроки=Неопределено)
	
	ДобавитьПараметрыВалюты(Объект.ОсновнаяВалюта);
	
	ВалютаУчета 			= ДанныеУчетнойПолитики.ВалютаУчета;	
	ВалютаОтчетности 		= ДанныеУчетнойПолитики.ВалютаУчетаДоп;
	
	ДобавитьПараметрыВалюты(ВалютаУчета);
	ДобавитьПараметрыВалюты(ВалютаОтчетности);
	
	Если ИдентификаторСтроки=Неопределено Тогда
		
		Для Каждого Строка ИЗ ПроводкиОперации Цикл
			
			ОбновитьВалютнуюСуммуДт(Строка.ПолучитьИдентификатор());
			ОбновитьВалютнуюСуммуКт(Строка.ПолучитьИдентификатор());
			
		КонецЦикла;
		
	Иначе
		
		ОбновитьВалютнуюСуммуДт(ИдентификаторСтроки);
		ОбновитьВалютнуюСуммуКт(ИдентификаторСтроки);
		
	КонецЕсли;
			
КонецПроцедуры // ОбновитьВалютныеСуммы()

&НаСервере
Процедура ОбновитьВалютнуюСуммуДт(ИдентификаторСтроки)
	
	СтрокаПроводки=ПроводкиОперации.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если СтрокаПроводки.СчетДтВалютный И ЗначениеЗаполнено(СтрокаПроводки.ВалютаДт) И (НЕ СтрокаПроводки.РесурсРегистра="Количество") Тогда
		
		ДобавитьПараметрыВалюты(СтрокаПроводки.ВалютаДт);
		СуммаВВалютеУчета=ПолучитьСуммуВВалютеУчета(СтрокаПроводки);
		СтрокаПроводки.ЗначениеВалютаДт	= РаботаСКурсамиВалютКлиентСерверУХ.ПересчитатьПоКурсу(СуммаВВалютеУчета,СоответствиеКурсовВалют[ВалютаУчета],СоответствиеКурсовВалют[СтрокаПроводки.ВалютаДт]);
		
	КонецЕсли;	
	
КонецПроцедуры // ОбновитьВалютнуюСуммуДт()

&НаСервере
Процедура ОбновитьВалютнуюСуммуКт(ИдентификаторСтроки)
	
	СтрокаПроводки=ПроводкиОперации.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если СтрокаПроводки.СчетКтВалютный И ЗначениеЗаполнено(СтрокаПроводки.ВалютаКт) И (НЕ СтрокаПроводки.РесурсРегистра="Количество") Тогда
		
		ДобавитьПараметрыВалюты(СтрокаПроводки.ВалютаКт);
		СуммаВВалютеУчета=ПолучитьСуммуВВалютеУчета(СтрокаПроводки);
		СтрокаПроводки.ЗначениеВалютаКт	= РаботаСКурсамиВалютКлиентСерверУХ.ПересчитатьПоКурсу(СуммаВВалютеУчета,СоответствиеКурсовВалют[ВалютаУчета],СоответствиеКурсовВалют[СтрокаПроводки.ВалютаКт]);
		
	КонецЕсли;	
	
КонецПроцедуры // ОбновитьВалютнуюСуммуДт()

&НаСервере
Функция ПолучитьСуммуВВалютеУчета(СтрокаПроводки)
	
	Если СтрокаПроводки.РесурсРегистра="СуммаВВалютеУчета" Тогда																								
		
		Возврат РаботаСКурсамиВалютКлиентСерверУХ.ПересчитатьПоКурсу(СтрокаПроводки.Значение,СоответствиеКурсовВалют[Объект.ОсновнаяВалюта],СоответствиеКурсовВалют[ВалютаУчета]);
		
	ИначеЕсли СтрокаПроводки.РесурсРегистра="СуммаВВалютеОтчетности" Тогда																								
		
		СуммаВВалютеОтчетности	= РаботаСКурсамиВалютКлиентСерверУХ.ПересчитатьПоКурсу(СтрокаПроводки.Значение,СоответствиеКурсовВалют[Объект.ОсновнаяВалюта],СоответствиеКурсовВалют[ВалютаОтчетности]);
		Возврат РаботаСКурсамиВалютКлиентСерверУХ.ПересчитатьПоКурсу(СуммаВВалютеОтчетности,СоответствиеКурсовВалют[ВалютаОтчетности],СоответствиеКурсовВалют[ВалютаУчета]);
		
	ИначеЕсли СтрокаПроводки.РесурсРегистра="СуммаВВалюте" Тогда																								
		
		Если ЗначениеЗаполнено(СтрокаПроводки.ВалютаДт) Тогда 
			
			Возврат РаботаСКурсамиВалютКлиентСерверУХ.ПересчитатьПоКурсу(СтрокаПроводки.Значение,СоответствиеКурсовВалют[СтрокаПроводки.ВалютаДт],СоответствиеКурсовВалют[ВалютаУчета]);
			
		Иначе
			
			Возврат РаботаСКурсамиВалютКлиентСерверУХ.ПересчитатьПоКурсу(СтрокаПроводки.Значение,СоответствиеКурсовВалют[Объект.ОсновнаяВалюта],СоответствиеКурсовВалют[ВалютаУчета]);
			
		КонецЕсли;
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;	
	
КонецФункции // ПолучитьСуммуВВалютеУчета()

&НаСервере
Процедура ПолучитьДанныеУчетнойПолитики()
	
	ДанныеУчетнойПолитики=Новый ФиксированнаяСтруктура(КорректировкиЗначенийПоказателей32.ПолучитьДанныеУчетнойПолитики(Объект.Организация,Объект.Сценарий,Объект.ДатаОтраженияВУчете));
	
КонецПроцедуры // ПолучитьДанныеУчетнойПолитики()

&НаСервере
Процедура ПриИзмененииОрганизации()
	
	ОбновлятьВалютныеСуммы=Ложь;
	
	ПолучитьДанныеУчетнойПолитики();
	
	Объект.СпособТрансляции=?(ЗначениеЗаполнено(ДанныеУчетнойПолитики.СпособТрансляции),ДанныеУчетнойПолитики.СпособТрансляции,Перечисления.СпособыТрансляции.СводныеПоДатам);
	
	Если ЗначениеЗаполнено(ДанныеУчетнойПолитики.ВалютаУчета) Тогда
		
		Если НЕ (Объект.ОсновнаяВалюта	= ДанныеУчетнойПолитики.ВалютаУчета
			И ВалютаУчета = 			ДанныеУчетнойПолитики.ВалютаУчета
			И ВалютаОтчетности = 		ДанныеУчетнойПолитики.ВалютаУчетаДоп) Тогда
			
			Объект.ОсновнаяВалюта	= ДанныеУчетнойПолитики.ВалютаУчета;
			ВалютаУчета 			= ДанныеУчетнойПолитики.ВалютаУчета;	
			ВалютаОтчетности 		= ДанныеУчетнойПолитики.ВалютаУчетаДоп;
			
			ДобавитьПараметрыВалюты(ВалютаУчета);
			ДобавитьПараметрыВалюты(ВалютаОтчетности);
			ДобавитьПараметрыВалюты(Объект.ОсновнаяВалюта);
			
			ОбновитьВалютныеСуммы();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьОпределитьШаблонТрансляции();
	
КонецПроцедуры // ОбновитьВалютуДокумента()

&НаСервере
Процедура ЗаполнитьПоШаблону()
		
	ОбработкаОбъект=ПолучитьОбъектДляРасчета();
	
	Если Объект.ИмяОбъектаМетаданных="ТрансформационнаяКорректировка" Тогда
		
		ОбработкаОбъект.ЗаполнитьПоШаблонуТрансформации();
		
		Если ОтображатьДетальныеЗаписи Тогда
			ОбновитьЗаписиФормы();
		КонецЕсли;
		
		Если ОтображатьСводныеИтоги Тогда
			РассчитатьСводныеИтогиПоПроводкам();
		КонецЕсли;
		
		СпособКорректировки=?(ОбработкаОбъект.КорректировкиЗначенийПоказателей,1,0);
		
	ИначеЕсли Объект.ИмяОбъектаМетаданных="Трансляция" Тогда
		
		ДанныеШаблона=Обработки.УстановкаСоответствияСчетов.ПолучитьДанныеШаблона(Объект.ШаблонКорректировки);
		ОбработкаОбъект.НаправлениеТрансляции=ДанныеШаблона.НаправлениеТрансляции;

		ТипБД=ДанныеШаблона.ТипБД;
		
		Элементы.ИспользуемаяИБ1.Видимость=(Не ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ);
			
		ОбработкаОбъект.ВидОперации=Справочники.ВидыОпераций.Трансляция;
		ОбработкаОбъект.ЗаполнитьПоШаблонуТрансляции();
		
		СпособКорректировки=?(ТрансляцияВРегистрБухгалтерии(ДанныеШаблона.НаправлениеТрансляции),0,1);
		
	КонецЕсли;
	
	ОбработкаОбъект.ДанныеПараметрикиАктуальны=Ложь;
	ЗначениеВРеквизитФормы(ОбработкаОбъект,"Объект");
	
	АдресХранилищаПеременныхДляРасчета=ПоместитьВоВременноеХранилище(ОбработкаОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),ЭтаФорма.УникальныйИдентификатор);
	
	ТипБД=Объект.ПравилоОбработки.ТипБД;
		
	УстановитьВидимость();
			
КонецПроцедуры // ЗаполнитьПоШаблону()

&НаСервере
Процедура ОбновитьЗаписиФормы()
	
	ИнициализироватьОбъект();
	
	ДанныеОбъекта=ПолучитьИзВременногоХранилища(АдресХранилищаПеременныхДляРасчета);
	
	Если Объект.ИмяОбъектаМетаданных="ТрансформационнаяКорректировка"
		ИЛИ ТрансляцияВРегистрБухгалтерии(Объект.НаправлениеТрансляции) Тогда
		
		ПроводкиОперации.Очистить();
		
		Если ТипЗнч(ДанныеОбъекта)=Тип("Структура") Тогда
			
			Для Каждого СтрПроводка ИЗ ДанныеОбъекта.ПроводкиДокумента Цикл
				
				НоваяСтрока=ПроводкиОперации.Добавить();
				
				НоваяСтрока.СчетДт=СтрПроводка.СчетДт;
				НоваяСтрока.СчетКт=СтрПроводка.СчетКт;
				ПриИзмененииСчета(Истина,НоваяСтрока.ПолучитьИдентификатор());
				ПриИзмененииСчета(Ложь,НоваяСтрока.ПолучитьИдентификатор());	
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрПроводка);
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		ПоказателиОтчетов.Очистить();
		
		Если ТипЗнч(ДанныеОбъекта)=Тип("Структура") Тогда
			Если ДанныеОбъекта.РедактируемыеЗаписи <> Неопределено Тогда
				Для Каждого СтрПроводка ИЗ ДанныеОбъекта.РедактируемыеЗаписи Цикл
					
					НоваяСтрока=ПоказателиОтчетов.Добавить();	
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрПроводка);
					НоваяСтрока.ИтоговоеЗначение=НЕ СтрПроводка.Раскрытие;
					
				КонецЦикла;
			Иначе
				// Нет редактируемых записей.
			КонецЕсли;
			ПоказателиОтчетов.Сортировать("Показатель,ИтоговоеЗначение Убыв");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьЗаписиФормы()

&НаСервере
Процедура РассчитатьСводныеИтогиПоПроводкам()
	
	ТекТаблицаПроводок=РеквизитФормыВЗначение("ПроводкиОперации");
	
	Если ТрансляцияВРегистрБухгалтерии(Объект.НаправлениеТрансляции) Тогда
		
		ТекТаблицаПроводок.Свернуть("СчетДт,СчетКт,СчетДтИсточник,СчетКтИсточник,ПравилоДт,ПравилоКт,РесурсРегистра","Значение");
		
	Иначе
		
		ТекТаблицаПроводок.Свернуть("СчетДт,СчетКт,РесурсРегистра,ШаблонПроводки","Значение");
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСерверУХ.ПоместитьТаблицуЗначенийВКоллекциюФормы(ТекТаблицаПроводок,СводныеПроводки);
	
	Элементы.КоличествоПроводок.Заголовок=СтрШаблон(Нстр("ru = 'Количество проводок: %1'"), ПроводкиОперации.Количество());
	
КонецПроцедуры // РассчитатьСводныеИтогиПоПроводкам()

&НаСервере
Процедура РассчитатьСводныеИтогиПоПоказателям()
	
	ТекТаблицаПоказателей=РеквизитФормыВЗначение("ПоказателиОтчетов");
	ТекТаблицаПоказателей.Свернуть("Показатель,ЭкземплярОтчета","Значение");
	СводныеКорректировки.Очистить();
	
	ОбщегоНазначенияКлиентСерверУХ.ПоместитьТаблицуЗначенийВКоллекциюФормы(ТекТаблицаПоказателей,СводныеКорректировки);
				
КонецПроцедуры // РассчитатьСводныеИтогиПоПоказателям() 

&НаСервере
Процедура ЗаполнитьПоПравилуРасчета()
	
	Если Объект.ИмяОбъектаМетаданных="ТрансформационнаяКорректировка" Тогда
		ЗаполнитьТрансформационныеПроводки();
	ИначеЕсли Объект.НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.ПоказателиВПоказатели
		ИЛИ Объект.НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.РегистрБухгалтерииВПоказатели  Тогда
		ВыполнитьТрансляциюПоказателиВПоказатели();
	ИначеЕсли ТрансляцияВРегистрБухгалтерии(Объект.НаправлениеТрансляции) Тогда
		ВыполнитьТрансляциюРегистрВРегистр();
	КонецЕсли;
	
	ОтредактированыЗаписи=Ложь;
	
	ОтобразитьНеобходимостьПерезаполнения(Ложь);
				
КонецПроцедуры // ЗаполнитьПоПравилуРасчета()

&НаСервере
Процедура ВыполнитьТрансляциюПоказателиВПоказатели()
	
	ДокументОбъект=ПолучитьОбъектДляРасчета();
	ДокументОбъект.ЗаполнитьАвтоматически();
	
	АдресХранилищаПеременныхДляРасчета=ПоместитьВоВременноеХранилище(ДокументОбъект.ДанныеОбъекта,ЭтаФорма.УникальныйИдентификатор);
	
	Элементы.КоличествоПроводок.Заголовок = НСтр("ru = 'Количество записей: '") + ДокументОбъект.РедактируемыеЗаписи.Количество();
	
	Если ОтображатьДетальныеЗаписи Тогда
		
		ПоказателиОтчетов.Очистить();
		
		Для Каждого СтрокаЗаписи ИЗ ДокументОбъект.РедактируемыеЗаписи Цикл
			
			НоваяСтрока=ПоказателиОтчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаЗаписи);
			НоваяСтрока.ИтоговоеЗначение=НЕ СтрокаЗаписи.Раскрытие;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры // ВыполнитьТрансляциюПоказателиВПоказатели()

&НаСервере
Процедура ЗаполнитьТрансформационныеПроводки()
	
	ДокументОбъект=ПолучитьОбъектДляРасчета();
	
	Если ОтредактированыЗаписи Тогда
		ПеренестиПроводкиВОбъект(ДокументОбъект);
	КонецЕсли;
	
	ДокументОбъект.АдресХранилищаПеременныхДляРасчета=АдресХранилищаПеременныхДляРасчета;
	ДокументОбъект.ВосстановитьПеременныеДляРасчета();	
	ДокументОбъект.ЗаполнитьАвтоматически();
	
	АдресХранилищаПеременныхДляРасчета=ПоместитьВоВременноеХранилище(ДокументОбъект.ДанныеОбъекта,ЭтаФорма.УникальныйИдентификатор);
	
	Элементы.КоличествоПроводок.Заголовок = НСтр("ru = 'Количество проводок: '") + ДокументОбъект.ПроводкиДокумента.Количество();
	
	Если ОтображатьДетальныеЗаписи Тогда
		ОбновитьЗаписиФормы();
	КонецЕсли;
	
	Если ОтображатьСводныеИтоги Тогда
		ПолучитьСводныеИтоги(ДокументОбъект);
	КонецЕсли;	
	
КонецПРоцедуры // ЗаполнитьТрансформационныеПроводки()

&НаСервере
Процедура ВыполнитьТрансляциюРегистрВРегистр()
	
	ДокументОбъект=ПолучитьОбъектДляРасчета();
	ДокументОбъект.ЗаполнитьАвтоматически();
	
	АдресХранилищаПеременныхДляРасчета=ПоместитьВоВременноеХранилище(ДокументОбъект.ДанныеОбъекта,ЭтаФорма.УникальныйИдентификатор);
	
	Элементы.КоличествоПроводок.Заголовок = НСтр("ru = 'Количество проводок: '") + ДокументОбъект.ПроводкиДокумента.Количество();
	
	Если ОтображатьДетальныеЗаписи Тогда
		ОбновитьЗаписиФормы();
	КонецЕсли;
	
	Если ОтображатьСводныеИтоги Тогда
		ПолучитьСводныеИтоги(ДокументОбъект);
	КонецЕсли;	
	
КонецПРоцедуры // ЗаполнитьТрансформационныеПроводки()

&НаСервере
Процедура ПолучитьСводныеИтоги(ДокументОбъект)
	
	СводныеПроводки.Очистить();
	
	Для Каждого Строка ИЗ ДокументОбъект.ДанныеОбъекта.СводныеПроводкиДокумента Цикл
		
		НоваяСтрока=СводныеПроводки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
	КонецЦикла;
				
КонецПроцедуры // ПолучитьСводныеИтоги() 

&НаСервере
Функция ЗаписатьОбъект(Проведение=Ложь);
	
	Объект.ДвиженияПоРегиструБухгалтерии	= (СпособКорректировки=0);
	Объект.КорректировкиЗначенийПоказателей	= (СпособКорректировки=1);
	
	РабочийОбъект	=ПолучитьРабочийОбъект();
	ОбъектДляРасчета=ПолучитьОбъектДляРасчета();
	
	Если ОтредактированыЗаписи Тогда
		
		Если Объект.ИмяОбъектаМетаданных="ТрансформационнаяКорректировка"
			ИЛИ ТрансляцияВРегистрБухгалтерии(Объект.НаправлениеТрансляции) Тогда
				
			ПеренестиПроводкиВОбъект(ОбъектДляРасчета, Истина);
			
		ИначеЕсли Объект.ИмяОбъектаМетаданных="Трансляция" Тогда
			
			ОбъектДляРасчета.ИнициализироватьТаблицыЗаписей();
			
			Для Каждого СтрокаПоказатель ИЗ ПоказателиОтчетов Цикл
				
				НоваяСтрока=ОбъектДляРасчета.РедактируемыеЗаписи.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаПоказатель);
				НоваяСтрока.Раскрытие=(НЕ СтрокаПоказатель.ИтоговоеЗначение);
				
			КонецЦикла;
				
		КонецЕсли;
		
	КонецЕсли;
	
	ОбъектДляРасчета.ДокументОбъект=РабочийОбъект;
	Отказ=Ложь;
	
	Попытка
		
		Если Не Заблокирован Тогда
			РабочийОбъект.Заблокировать();
			Заблокирован=Истина;
		КонецЕсли;
		
		РежимПроведения=?(РабочийОбъект.Проведен ИЛИ Проведение,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись);
		РежимЗаписи=РежимПроведения;
		
		ОбъектДляРасчета.ЗаписатьРабочийОбъект(РежимПроведения,РежимЗаписи,Отказ);
		Объект.Ссылка=РабочийОбъект.Ссылка;
		ЭтотОбъект.НавигационнаяСсылка=ПолучитьНавигационнуюСсылку(Объект.Ссылка);
		
		Если Отказ Тогда
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = '%1: %2'"), 
				НСтр("ru = 'Не удалось записать документ '") + РабочийОбъект, 
				ОписаниеОшибки()),,,СтатусСообщения.Важное);
			Возврат Ложь;
			
		КонецЕсли;
				
		Заголовок=РабочийОбъект;
		Модифицированность=Ложь;
		
		Возврат Истина;
		
	Исключение
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = '%1: %2'"), 
			НСтр("ru = 'Не удалось записать документ '") + РабочийОбъект, ОписаниеОшибки()),,,СтатусСообщения.Важное);
		Возврат Ложь;
		
	КонецПопытки	
		
КонецФункции // ЗаписатьОбъект()

&НаСервере
Процедура РазблокироватьОбъект()
	
	Если Не Заблокирован Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект=Объект.Ссылка.ПолучитьОбъект();
	
	Попытка
		ДокументОбъект.Разблокировать();
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = '%1: %2'"), 
			НСтр("ru = 'Не удалось разблокировать объект '") + ДокументОбъект, 
			ОписаниеОшибки()),,,СтатусСообщения.Важное);
	КонецПопытки;
		
КонецПроцедуры // РазблокироватьОбъект()

&НаКлиенте
Процедура ПланСчетовПриИзменении(Элемент)
	
	ОбновитьРегистрБухгалтерии();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактируемыеЗаписиСчетДтПриИзменении(Элемент)
	
	ПриИзмененииСчета(Истина,Элементы.ПроводкиОперации.ТекущиеДанные.ПолучитьИдентификатор());
	Элементы.ПроводкиОперации.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактируемыеЗаписиСчетКтПриИзменении(Элемент)
	
	ПриИзмененииСчета(Ложь,Элементы.ПроводкиОперации.ТекущиеДанные.ПолучитьИдентификатор());
	Элементы.ПроводкиОперации.ЗакончитьРедактированиеСтроки(Ложь);
		
КонецПроцедуры

&НаСервере
Процедура ПеренестиПроводкиВОбъект(РабочийОбъект,ПереноситьДанныеРасчета=Ложь)
	
	РабочийОбъект.ПроводкиДокумента.Очистить();
	
	Для Каждого Строка ИЗ ПроводкиОперации Цикл
		
		НоваяСтрока=РабочийОбъект.ПроводкиДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
	КонецЦикла;
	
КонецПроцедуры // ПеренестиПроводкиВОбъект() 

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПеренестиПроводкиВОбъект(ТекущийОбъект,Истина);
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьТипВИБ()
	
	ТипБД=Объект.ПравилоОбработки.ТипБД;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВнешниеИнформационныеБазы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВнешниеИнформационныеБазы КАК ВнешниеИнформационныеБазы
	|ГДЕ
	|	ВнешниеИнформационныеБазы.ТипБД = &ТипБД";
	
	Запрос.УстановитьПараметр("ТипБД",ТипБД);
	Результат=Запрос.Выполнить().Выбрать();
		
	Если Результат.Следующий() Тогда
		
		Объект.ИспользуемаяИБ=Результат.Ссылка;
		
	Иначе
		
		Объект.ИспользуемаяИБ=Справочники.ВнешниеИнформационныеБазы.ТекущаяИБ;
		
	КонецЕсли;
		
КонецПроцедуры // ОбновитьТипВИБ()

&НаСервере
Процедура ОпределитьПравилоТрансляции()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПравилаОбработки.Ссылка КАК ПравилоОбработки,
	|	ВнешниеИнформационныеБазы.Ссылка КАК ВнешняяИБ
	|ИЗ
	|	Справочник.ПравилаОбработки КАК ПравилаОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнешниеИнформационныеБазы КАК ВнешниеИнформационныеБазы
	|		ПО ПравилаОбработки.ТипБД = ВнешниеИнформационныеБазы.ТипБД
	|ГДЕ
	|	НЕ ПравилаОбработки.ПометкаУдаления
	|	И ПравилаОбработки.Владелец = &ШаблонКорректировки
	|	И ПравилаОбработки.НаправлениеТрансляции = &НаправлениеТрансляции";
	
	Запрос.УстановитьПараметр("ШаблонКорректировки",	Объект.ШаблонКорректировки);
	Запрос.УстановитьПараметр("НаправлениеТрансляции",	Объект.НаправлениеТрансляции);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Объект.ПравилоОбработки=Результат.ПравилоОбработки;
		Объект.ИспользуемаяИБ=Результат.ВнешняяИБ;
		ОбновитьТипВИБ();
		
	КонецЕсли;
		
КонецПроцедуры // ОпределитьПравилоТрансляции() 

&НаСервере
Процедура ПриИзмененииПараметровТрансляции()
	
	ПоказателиОтчетов.Очистить();
	ПроводкиОперации.Очистить();
	
	ОпределитьПравилоТрансляции();
	
	ОбработкаОбъект=ПолучитьОбъектДляРасчета();
	ОбработкаОбъект.ПравилоОбработки=Объект.ПравилоОбработки;
		
	АдресХранилищаПеременныхДляРасчета=ПоместитьВоВременноеХранилище(ОбработкаОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),ЭтаФорма.УникальныйИдентификатор);

	УстановитьВидимость();
	
КонецПроцедуры // ПриИзмененииНаправленияТрансляции()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)	
	ПриИзмененииОрганизации();		
КонецПроцедуры

&НаКлиенте
Процедура ШаблонРучнойОперацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ШаблонКорректировки) Тогда
		ЗаполнитьПоШаблону();
	Иначе
		УстановитьВидимость();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПериода()
		
	Если Не ЗначениеЗаполнено(Объект.РасчетДатыОтраженияВУчете) Тогда		
	
		Объект.РасчетДатыОтраженияВУчете=Перечисления.СпособыРасчетаДатыОтраженияВУчете.ДатаОкончанияПериода;
		
	КонецЕсли;
	
	Если Объект.ИмяОбъектаМетаданных="Трансляция" Тогда
		
		Объект.ПериодОтражения=Объект.ПериодОтчета;
		
	КонецЕсли;
	
	ПриИзмененииДатыОтраженияВУчете();
		
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиОперацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанныеСтроки = Элементы.ПроводкиОперации.ТекущиеДанные;
	НомерСтроки = ТекущиеДанныеСтроки.ПолучитьИдентификатор();
	
	Если НоваяСтрока Тогда
		
		Если Элементы.РесурсРегистра.СписокВыбора.Количество()>0 Тогда		
			
			Для Каждого СтрРесурс ИЗ Элементы.РесурсРегистра.СписокВыбора Цикл
				
				Если СтрРесурс.Пометка Тогда
					
					ТекущиеДанныеСтроки.РесурсРегистра = СтрРесурс.Значение;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
						
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанныеСтроки.СчетДт) 
		И (Не ЗначениеЗаполнено(ТекущиеДанныеСтроки.ВидСубконтоДт1)) Тогда
		
		ПриИзмененииСчета(Истина,НомерСтроки);
		ПриИзмененииСчета(Ложь,НомерСтроки);
		
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанныеСтроки.НомерПроводки = 0;
	КонецЕсли;
	
	СтандартнаяОбработка=Истина;
	
	Если СтрНайти(Элемент.ТекущийЭлемент.Имя,"Субконто")>0 Тогда
		
		УстановитьСвязиПараметровВыбора(Сред(Элемент.ТекущийЭлемент.Имя,9,2), Элементы.ПроводкиОперации.ТекущаяСтрока, СтандартнаяОбработка);
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтогиПоПроводкам(Команда)
	
	РассчитатьСводныеИтогиПоПроводкам();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиОперацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтображатьСводныеИтоги Тогда
		
		СтруктураПоиска=Новый Структура;
		СтруктураПоиска.Вставить("СчетДт",Элементы.ПроводкиОперации.ТекущиеДанные.СчетДт);
		СтруктураПоиска.Вставить("СчетКт",Элементы.ПроводкиОперации.ТекущиеДанные.СчетКт);
		СтруктураПоиска.Вставить("РесурсРегистра",Элементы.ПроводкиОперации.ТекущиеДанные.РесурсРегистра);
		
		СтрИтог=СводныеПроводки.НайтиСтроки(СтруктураПоиска);
		
		Если СтрИтог.Количество()=0 Тогда
			
			НоваяСтрока=СводныеПроводки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураПоиска);
			НоваяСтрока.Значение=Элементы.ПроводкиОперации.ТекущиеДанные.Значение;
			
		Иначе
			
			СтрИтог[0].Значение=СтрИтог[0].Значение+Элементы.ПроводкиОперации.ТекущиеДанные.Значение;
			
		КонецЕсли;
		
		Элементы.КоличествоПроводок.Заголовок=СтрШаблон(Нстр("ru = 'Количество проводок: %1'"), ПроводкиОперации.Количество()); 
		
	КонецЕсли;
	
	ОбновитьБалансОперации();	
	ОтредактированыЗаписи=Истина;
			
КонецПроцедуры

&НаКлиенте
Процедура СводныеИтоги(Команда)
	
	Элементы.ПроводкиОперацииСводныеИтоги.Пометка=НЕ Элементы.ПроводкиОперацииСводныеИтоги.Пометка;
	
	Если Элементы.ПроводкиОперацииСводныеИтоги.Пометка Тогда
		
		РассчитатьСводныеИтогиПоПроводкам();
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокумент(Команда)
	
	ЗаполнитьПоПравилуРасчета();
	ОбновитьБалансОперации();
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоОбработкиПриИзменении(Элемент)
	
	ОбновитьТипВИБ();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧтениеНеактуальныхЗаписей(Команда)
	
	Элементы.ФормаЧтениеНеактуальныхЗаписей.Пометка=НЕ Элементы.ФормаЧтениеНеактуальныхЗаписей.Пометка;	
	Объект.ЧтениеНеактуальныхЗаписей=Элементы.ФормаЧтениеНеактуальныхЗаписей.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьСводныеИтогиПриИзменении(Элемент)
	
	Если Объект.ИмяОбъектаМетаданных="ТрансформационнаяКорректировка"
		ИЛИ ТрансляцияВРегистрБухгалтерии(Объект.НаправлениеТрансляции) Тогда
		
		Если ОтображатьСводныеИтоги Тогда
			
			РассчитатьСводныеИтогиПоПроводкам();
			
		Иначе
			
			Элементы.ФильтроватьПроводки.Пометка=Ложь;
			УстановитьОтборПроводок();
			
		КонецЕсли;
		
		Элементы.СводныеПроводки.Видимость=ОтображатьСводныеИтоги;
		Элементы.ФильтроватьПроводки.Видимость=ОтображатьДетальныеЗаписи;
		
	Иначе
		
		Если ОтображатьСводныеИтоги Тогда
			
			РассчитатьСводныеИтогиПоПоказателям();
			
		Иначе
			
			Элементы.ФильтроватьПоказатели.Пометка=Ложь;
			УстановитьОтборПоказателей();
			
		КонецЕсли;
		
		Элементы.СводныеКорректировки.Видимость=ОтображатьСводныеИтоги;
		Элементы.ФильтроватьПоказатели.Видимость=ОтображатьДетальныеЗаписи;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДетальныеЗаписиПриИзменении(Элемент)
	
	Если ОтображатьДетальныеЗаписи Тогда
		ОбновитьЗаписиФормы();
	КонецЕсли;
	
	Если Объект.ИмяОбъектаМетаданных="ТрансформационнаяКорректировка"
		ИЛИ ТрансляцияВРегистрБухгалтерии(Объект.НаправлениеТрансляции) Тогда
		
		Элементы.ПроводкиОперации.Видимость		= ОтображатьДетальныеЗаписи;
		Элементы.ФильтроватьПроводки.Видимость	= ОтображатьДетальныеЗаписи;
		
	Иначе
		
		Элементы.ПоказателиОтчетов.Видимость	= ОтображатьДетальныеЗаписи;
		Элементы.ФильтроватьПоказатели.Видимость= ОтображатьДетальныеЗаписи;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	Если Объект.ПометкаУдаления Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Помеченный на удаление документ не может быть проведен!'"));
		Возврат;
		
	КонецЕсли;
	
	ТекстПроверки=ПроверитьПередПроведением();
	
	Если НЕ ПустаяСтрока(ТекстПроверки) Тогда
		
		ПоказатьПредупреждение(,ТекстПроверки);
		Возврат;
		
	КонецЕсли;
	
	ТекстПроверки=ПроверитьПериодПередЗаписью();
	
	Если НЕ ПустаяСтрока(ТекстПроверки) Тогда
		
		ПоказатьПредупреждение(,ТекстПроверки);
		Возврат;
		
	КонецЕсли;
	
	Если ЗаписатьОбъект(Истина) Тогда
		
		Оповестить("ЗаписанОбъект"+Объект.ИмяОбъектаМетаданных);
		Закрыть();
		
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПередПроведением()
	
	ТекстСообщения="";
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ТекстСообщения=ТекстСообщения+Символы.ПС+НСтр("ru = 'Не указана организация.'");
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Сценарий) Тогда
		
		ТекстСообщения=ТекстСообщения+Символы.ПС+НСтр("ru = 'Не указан сценарий.'");
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПериодОтчета) Тогда
		
		ТекстСообщения=ТекстСообщения+Символы.ПС+НСтр("ru = 'Не указан период.'");
		
	КонецЕсли;
	
	Возврат Сред(ТекстСообщения,2);
		
КонецФункции // ПроверитьПередПроведением()
 	

&НаКлиенте
Функция ПроверитьПериодПередЗаписью()
	
	Если НЕ Объект.ИсходныйДокумент=Неопределено Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	Если Объект.ИмяОбъектаМетаданных="Трансляция" Тогда
		
		Возврат ПроверитьВыбранныйПериод(Объект.ПериодОтражения,"ПериодОтражения");
		
	Иначе
		
		Возврат ПроверитьВыбранныйПериод(Объект.ПериодОтчета,"ПериодОтчета");
		
	КонецЕсли;

		
КонецФункции // ПроверитьПериодПередЗаписью() 

&НаКлиенте
Процедура Провести(Команда)
	
	Если Объект.ПометкаУдаления Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Помеченный на удаление документ не может быть проведен!'"));
		Возврат;
		
	КонецЕсли;
	
	ТекстПроверки=ПроверитьПередПроведением();
	
	Если НЕ ПустаяСтрока(ТекстПроверки) Тогда
		
		ПоказатьПредупреждение(,ТекстПроверки);
		Возврат;
		
	КонецЕсли;

	ТекстПроверки=ПроверитьПериодПередЗаписью();
	
	Если НЕ ПустаяСтрока(ТекстПроверки) Тогда
		
		ПоказатьПредупреждение(,ТекстПроверки);
		Возврат;
		
	КонецЕсли;
			
	Если ЗаписатьОбъект(Истина) Тогда
		
		Оповестить("ЗаписанОбъект"+Объект.ИмяОбъектаМетаданных);
		ОбновитьСправочнуюИнформацию(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	Если Объект.Проведен Тогда			
		
		ТекстПроверки=ПроверитьПередПроведением();
		
		Если НЕ ПустаяСтрока(ТекстПроверки) Тогда
			
			ПоказатьПредупреждение(,ТекстПроверки);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстПроверки=ПроверитьПериодПередЗаписью();
	
	Если НЕ ПустаяСтрока(ТекстПроверки) Тогда
		
		ПоказатьПредупреждение(,ТекстПроверки);
		Возврат;
		
	КонецЕсли;
	
	Если ЗаписатьОбъект() Тогда
		
		Оповестить("ЗаписанОбъект"+Объект.ИмяОбъектаМетаданных);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КоректируемыеЭкземплярыОтчетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьФорму("Документ.НастраиваемыйОтчет.ФормаОбъекта",Новый Структура("Ключ",Элементы.КоректируемыеЭкземплярыОтчетов.ТекущиеДанные.ЭкземплярОтчета));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПроводок()
	
	Если Элементы.ФильтроватьПроводки.Пометка И (НЕ Элементы.СводныеПроводки.ТекущиеДанные=Неопределено) Тогда
		
		Элементы.ПроводкиОперации.ОтборСтрок=Новый ФиксированнаяСтруктура("ШаблонПроводки",Элементы.СводныеПроводки.ТекущиеДанные.ШаблонПроводки);
		
	Иначе
		
		Элементы.ПроводкиОперации.ОтборСтрок=Неопределено;
		
	КонецЕсли;	
	
КонецПроцедуры // ОтобратьПроводки()

&НаКлиенте
Процедура УстановитьОтборПоказателей()
	
	Если Элементы.ФильтроватьПоказатели.Пометка И (НЕ Элементы.СводныеКорректировки.ТекущиеДанные=Неопределено) Тогда
		
		Элементы.ПоказателиОтчетов.ОтборСтрок=Новый ФиксированнаяСтруктура("ЭкземплярОтчета,Показатель",Элементы.СводныеКорректировки.ТекущиеДанные.ЭкземплярОтчета,Элементы.СводныеКорректировки.ТекущиеДанные.Показатель);
		
	Иначе
		
		Элементы.ПоказателиОтчетов.ОтборСтрок=Неопределено;
		
	КонецЕсли;	
	
КонецПроцедуры // ОтобратьПроводки()

&НаКлиенте
Процедура ФильтроватьПроводки(Команда)
	
	Элементы.ФильтроватьПроводки.Пометка=Не Элементы.ФильтроватьПроводки.Пометка;
	УстановитьОтборПроводок();
			
КонецПроцедуры


&НаКлиенте
Процедура СводныеПроводкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	УстановитьОтборПроводок();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьСводныеПроводки(Команда)
	
	Если Элементы.СводныеПроводки.ТекущиеДанные=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ПоказательОтчета",Элементы.СводныеПроводки.ТекущиеДанные.ШаблонПроводки);
	СтруктураПараметров.Вставить("АдресХранилищаПеременныхДляРасчета",ПолучитьАдресДанныхОбъекта());
	СтруктураПараметров.Вставить("мТекущаяВалюта",Объект.ОсновнаяВалюта);
	
	ОткрытьФорму("Обработка.РасшифровкаРассчитанныхЗначений.Форма",СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПроводку(Команда)
	
	Если Элементы.ПроводкиОперации.ТекущиеДанные=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.НаправлениеТрансляции=ПредопределенноеЗначение("Перечисление.НаправленияТрансляцииДанных.РегистрБухгалтерииВРегистрБухгалтерии") Тогда
				
		ОткрытьФорму("Отчет.ОтчетПоРегиструБухгалтерииБД.ФормаОбъекта",ПолучитьПараметрыОтчетаПоПроводкам(Элементы.ПроводкиОперации.ТекущиеДанные.ПолучитьИдентификатор()),ЭтаФорма,Новый УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.Независимый);
		
	ИначеЕсли Объект.НаправлениеТрансляции=ПредопределенноеЗначение("Перечисление.НаправленияТрансляцииДанных.ФинансовыеРегистрыВРегистрБухгалтерии") Тогда	
		
		ОткрытьФорму("Отчет.ОтчетПоРегиструНакопленияБД.ФормаОбъекта",ПолучитьПараметрыОтчетаПоРегистрам(Элементы.ПроводкиОперации.ТекущиеДанные.ПолучитьИдентификатор(),"Дт"),ЭтаФорма,Новый УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.Независимый);
		ОткрытьФорму("Отчет.ОтчетПоРегиструНакопленияБД.ФормаОбъекта",ПолучитьПараметрыОтчетаПоРегистрам(Элементы.ПроводкиОперации.ТекущиеДанные.ПолучитьИдентификатор(),"Кт"),ЭтаФорма,Новый УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.Независимый);
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Элементы.ПроводкиОперации.ТекущиеДанные.ШаблонПроводки) Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Не указан шаблон проводки. Возможно, она была введена вручную'"));
			Возврат;
			
		Иначе
			
			СтруктураПараметров=ПодготовитьПараметрыРасшифровкиПроводки(Элементы.ПроводкиОперации.ТекущиеДанные.ПолучитьИдентификатор());
			
			Если СтруктураПараметров.Свойство("ТекстОшибки") Тогда
				
				ПоказатьПредупреждение(,СтруктураПараметров.ТекстОшибки);
				
				Возврат;
				
			Иначе
				
				ОткрытьФорму("Обработка.РасшифровкаРассчитанныхЗначений.Форма",СтруктураПараметров);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры


&НаКлиенте
Процедура НаправлениеТрансляцииПриИзменении(Элемент)
	
	ПриИзмененииПараметровТрансляции();
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиОтчетовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОтредактированыЗаписи = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоказатель(Команда)
	
	Если Элементы.ПоказателиОтчетов.ТекущиеДанные=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФорму("Обработка.РасшифровкаРассчитанныхЗначений.Форма",ПодготовитьПараметрыРасшифровкиПоказателя(Элементы.ПоказателиОтчетов.ТекущиеДанные.ПолучитьИдентификатор()));	
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьСводныеПоказатели(Команда)
	
	Если Элементы.СводныеКорректировки.ТекущиеДанные=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ПоказательОтчета",Элементы.СводныеКорректировки.ТекущиеДанные.Показатель);
	СтруктураПараметров.Вставить("АдресХранилищаПеременныхДляРасчета",ПолучитьАдресДанныхОбъекта());
	СтруктураПараметров.Вставить("мТекущаяВалюта",Объект.ОсновнаяВалюта);
	
	ОткрытьФорму("Обработка.РасшифровкаРассчитанныхЗначений.Форма",СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтроватьПоказатели(Команда)
	
	Элементы.ФильтроватьПоказатели.Пометка=Не Элементы.ФильтроватьПоказатели.Пометка;
	УстановитьОтборПоказателей();
	
КонецПроцедуры

&НаКлиенте
Процедура СводныеКорректировкиПослеУдаления(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиОтчетовПослеУдаления(Элемент)
	
	ОтредактированыЗаписи=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетДатыОтраженияВУчетеПриИзменении(Элемент)
	
	ПриИзмененииДатыОтраженияВУчете();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДатыОтраженияВУчете();
	
	ПриИзмененииПараметровУчетнойПолитики();
	
	ДатыПериода=ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ПериодОтчета,"ДатаНачала,ДатаОкончания");
	Объект.НачалоПериода=ДатыПериода.ДатаНачала;
	Объект.ОкончаниеПериода=ДатыПериода.ДатаОкончания;
	
	Если НЕ Объект.РасчетДатыОтраженияВУчете=Перечисления.СпособыРасчетаДатыОтраженияВУчете.ПроизвольнаяДата Тогда
		
		ПериодОтражения=?(Объект.ИмяОбъектаМетаданных="Трансляция",Объект.ПериодОтражения,Объект.ПериодОтчета);
		
		Объект.ДатаОтраженияВУчете=?(Объект.РасчетДатыОтраженияВУчете=Перечисления.СпособыРасчетаДатыОтраженияВУчете.ДатаНачалаПериода,ПериодОтражения.ДатаНачала,КонецДня(ПериодОтражения.ДатаОкончания));
				
	КонецЕсли;
	
	УстановитьВидимость();
	
	ДобавитьПараметрыВалюты(ВалютаУчета,Истина);
	ДобавитьПараметрыВалюты(ВалютаОтчетности,Истина);
	ДобавитьПараметрыВалюты(Объект.ОсновнаяВалюта,Истина);
	
	ОбновитьВалютныеСуммы();
		
КонецПроцедуры // ПриИзмененииДатыОтраженияВУчете()

&НаСервереБезКонтекста
Функция ПолучитьМассивПротоколируемыхОбъектов(Ссылка,КлючевыеРеквизиты)
	
	МассивОтчетов=Новый Массив;
	МассивОтчетов.Добавить(Ссылка);
	
	Возврат ПротоколируемыеСобытияУХ.ПолучитьМассивПротоколируемыхОбъектов(МассивОтчетов);
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьПротокол(Команда)
	
	КлючевыеРеквизиты=Новый Структура;
	КлючевыеРеквизиты.Вставить("Организация",	Объект.Организация);
	КлючевыеРеквизиты.Вставить("ПериодОтчета",	Объект.ПериодОтчета);
	КлючевыеРеквизиты.Вставить("Сценарий",		Объект.Сценарий);
	КлючевыеРеквизиты.Вставить("ВидОтчета",		Объект.ШаблонКорректировки);
	
	ОткрытьФорму("Обработка.ОтображениеПротоколируемыхСобытий.Форма.Форма",Новый Структура("МассивПротоколируемыхОбъектов",ПолучитьМассивПротоколируемыхОбъектов(Объект.Ссылка,КлючевыеРеквизиты)));
		
КонецПроцедуры

&НаКлиенте
Процедура ВыверкаТрансляции(Команда)
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Выверка результатов трансляции возможна только после записи документа.
		|Записать?'");
				
		Оповещение = Новый ОписаниеОповещения("РезультатЗапросаВыверкаТрансляции", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОткрытьФормуВыверкиТрансляции();
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбора(ДтКт,ИдентификаторСтроки,СтандартнаяОбработка)
	
	МассивАналитик=Новый Массив;
	
	ТекущиеДанные=ПроводкиОперации.НайтиПоИдентификатору(ИдентификаторСтроки);
			
	Для Индекс=1 По 3 Цикл
		
		МассивАналитик.Добавить(Новый Структура("Имя,ВидАналитики","Субконто"+ДтКт+Индекс,ТекущиеДанные["ВидСубконто"+ДтКт+Индекс]));
		
	КонецЦикла;
	
	ДанныеАналитики=ОбщегоНазначенияУХ.ПолучитьДанныеГруппыРаскрытияТЧ(,Новый Структура("Аналитики",МассивАналитик));
	
	Для Индекс=1 По 3 Цикл
		
		ИмяЭлемента="Субконто"+ДтКт+Индекс;
		
		Элемент=Элементы[ИмяЭлемента];
		
		ТекВидАналитики=ДанныеАналитики[Элемент.Имя];
		
		Если Не ЗначениеЗаполнено(ТекВидАналитики.ВидАналитики) Тогда
			
			СтандартнаяОбработка=Ложь;
			Возврат;
			
		ИначеЕсли ТекВидАналитики.ТаблицаАналитики="Справочник.ПроизвольныйКлассификаторУХ" Тогда
			
			СвязиПараметровВыбора = Новый Массив;
			СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.ПроводкиОперации.ТекущиеДанные.ВидСубконто"+ДтКт+Индекс));
			Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
			
		ИначеЕсли ТекВидАналитики.Свойство("ТипыВладельцев") Тогда
			
			ПолеВладельца="";
			
			Для Каждого КлючИЗначение ИЗ ДанныеАналитики Цикл // Ищем поле субконто с тем же типом, что и владелец
				
				Если Не ЗначениеЗаполнено(КлючИЗначение.Значение.ВидАналитики) Тогда
					
					Продолжить;
					
				ИначеЕсли НЕ ТекВидАналитики.ТипыВладельцев.НайтиПоЗначению(КлючИЗначение.Значение.Тип)=Неопределено Тогда
					
					ПолеВладельца="Элементы.ПроводкиОперации.ТекущиеДанные."+КлючИЗначение.Ключ;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПустаяСтрока(ПолеВладельца) Тогда // Ищем реквизит объекта с тем же типом, что и владелец
				
				Для Каждого СтрТип ИЗ ТекВидАналитики.ТипыВладельцев Цикл
					
					РеквизитОбъектаПоТипу=ТипыРеквизитовОбъекта.Получить(СтрТип.Значение);
					
					Если НЕ РеквизитОбъектаПоТипу=Неопределено Тогда
						
						ПолеВладельца="Объект."+РеквизитОбъектаПоТипу;
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ПолеВладельца) Тогда
				
				СвязиПараметровВыбора = Новый Массив;
				СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", ПолеВладельца));
				Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
				
			КонецЕсли;
			
		Иначе
			
			СвязиПараметровВыбора = Новый Массив;
			Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
			
			Элемент.ВыбиратьТип=ТекВидАналитики.ТипЗначения.Типы().Количество()>1;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры //

&НаКлиенте
Процедура РегистрБухгалтерииПриИзменении(Элемент)
	
	ОбновитьРесурсыРегистра();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьБалансОперации()
	
	СуммаДт=0;
	СуммаКт=0;
	
	Для Каждого Строка ИЗ ПроводкиОперации Цикл
		
		Если ЗначениеЗаполнено(Строка.СчетДт) Тогда
			
			СуммаДт=СуммаДт+Строка.Значение;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.СчетКт) Тогда
			
			СуммаКт=СуммаКт+Строка.Значение;
			
		КонецЕсли;
		
	КонецЦикла;

	Если НЕ СуммаДт=СуммаКт Тогда
		
		Элементы.БалансОперации.Видимость=Истина;
		Элементы.БалансОперации.Заголовок = НСтр("ru = 'Сумма по дебету: '") +
								Формат(СуммаДт, "ЧДЦ=2; ЧН=Ноль") + 
								НСтр("ru = ', сумма по кредиту: '") +
								Формат(СуммаКт,"ЧДЦ=2; ЧН=Ноль") + 
								НСтр("ru = ', небаланс: '") + 
								Формат((СуммаДт-СуммаКт),"ЧДЦ=2; ЧН=Ноль");
		
	Иначе
		
		Элементы.БалансОперации.Видимость=Ложь;
		
	КонецЕсли;
				
КонецПроцедуры // ОбновитьБалансОперации() 

&НаКлиенте
Процедура ПроводкиОперацииВалютаДтПриИзменении(Элемент)
	
	СтрокаПроводки=Элементы.ПроводкиОперации.ТекущиеДанные;
	
	ОбновитьВалютнуюСуммуДт(СтрокаПроводки.ПолучитьИдентификатор());
	
	Если СтрокаПроводки.СчетКтВалютный И (НЕ ЗначениеЗаполнено(СтрокаПроводки.ВалютаКт)) Тогда
		
		СтрокаПроводки.ВалютаКт=СтрокаПроводки.ВалютаДт;
		СтрокаПроводки.ЗначениеВалютаКт=СтрокаПроводки.ЗначениеВалютаДт;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиОперацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя="ПравилоДт" ИЛИ Поле.Имя="ПравилоКт" Тогда
		
		ТекПравило=Элементы.ПроводкиОперации.ТекущиеДанные[Поле.Имя];
		ПоказатьЗначение(,ТекПравило);
		
	ИначеЕсли Поле.Имя="ШаблонПроводки" Тогда
		
		ЭлементНастройки=Элементы.ПроводкиОперации.ТекущиеДанные[Поле.Имя];
		
		Если ЭлементНастройки=Неопределено Тогда
			
			Возврат;
		
		ИначеЕсли ТипЗнч(ЭлементНастройки)=Тип("СправочникСсылка.ШаблоныПроводок") Тогда
			
			СтрИмяФормы="Обработка.НастройкиФормированияПроводокПоДокументам.Форма.ФормаНастройкиПроводки";
			ОткрытьФорму(СтрИмяФормы,Новый Структура("ШаблонПроводки",ЭлементНастройки));
			
		ИначеЕсли ТипЗнч(ЭлементНастройки)=Тип("СправочникСсылка.ПоказателиОтчетов") Тогда
			
			СтрИмяФормы="Обработка.НастройкиФормированияПроводокПоДокументам.Форма.ФормаНастройкиПоказателяПроводки";
			ОткрытьФорму(СтрИмяФормы,Новый Структура("ПоказательОтчета",ЭлементНастройки));
			
		КонецЕсли;
		
	КонецЕсли;
		
		
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиОперацииПослеУдаления(Элемент)
	
	ОтредактированыЗаписи=Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметрыВалюты(ВыбраннаяВалюта,ОбновитьКурсы=Ложь)
	
	Если СоответствиеКурсовВалют=Неопределено Тогда
		
		ПараметрыВалюты=Новый Соответствие;
		
	Иначе
		
		ПараметрыВалюты=Новый Соответствие(СоответствиеКурсовВалют);
		
	КонецЕсли;
	
	Если ПараметрыВалюты.Получить(ВыбраннаяВалюта)=Неопределено ИЛИ ОбновитьКурсы Тогда
		
		ПараметрыВалюты.Вставить(ВыбраннаяВалюта,РаботаСКурсамиВалютУХ.ЗаполнитьДанныеКурсаДляВалюты(ВыбраннаяВалюта,Объект.ДатаОтраженияВУчете));
		СоответствиеКурсовВалют=Новый ФиксированноеСоответствие(ПараметрыВалюты);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьПараметрыВалюты()

&НаКлиенте
Процедура ОсновнаяВалютаПриИзменении(Элемент)
	
	ОбновитьВалютныеСуммы();
		
КонецПроцедуры

&НаКлиенте
Процедура РедактируемыеЗаписиЗначениеПриИзменении(Элемент)
	
	СтрокаПроводки=Элементы.ПроводкиОперации.ТекущиеДанные;
	
	Если (НЕ СтрокаПроводки.РесурсРегистра="Количество")
		И ((СтрокаПроводки.СчетДтВалютный И ЗначениеЗаполнено(СтрокаПроводки.ВалютаДт)) 
		ИЛИ (СтрокаПроводки.СчетКтВалютный И ЗначениеЗаполнено(СтрокаПроводки.ВалютаКт))) Тогда
		
		ОбновитьВалютныеСуммы(СтрокаПроводки.ПолучитьИдентификатор());
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиОперацииВалютаКтПриИзменении(Элемент)
	
	СтрокаПроводки=Элементы.ПроводкиОперации.ТекущиеДанные;	
	ОбновитьВалютнуюСуммуКт(СтрокаПроводки.ПолучитьИдентификатор());

	Если СтрокаПроводки.СчетДтВалютный И (НЕ ЗначениеЗаполнено(СтрокаПроводки.ВалютаДт)) Тогда
		
		СтрокаПроводки.ВалютаДт=СтрокаПроводки.ВалютаКт;
		СтрокаПроводки.ЗначениеВалютаДт=СтрокаПроводки.ЗначениеВалютаКт;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РесурсРегистраПриИзменении(Элемент)
	
	СтрокаПроводки=Элементы.ПроводкиОперации.ТекущиеДанные;
	
	Если (НЕ СтрокаПроводки.РесурсРегистра="Количество")
		И ((СтрокаПроводки.СчетДтВалютный И ЗначениеЗаполнено(СтрокаПроводки.ВалютаДт)) 
		ИЛИ (СтрокаПроводки.СчетКтВалютный И ЗначениеЗаполнено(СтрокаПроводки.ВалютаКт))) Тогда
		
		ОбновитьВалютныеСуммы(СтрокаПроводки.ПолучитьИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатЗапросаВыверкаТрансляции(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Да Тогда
		
		Провести(Неопределено);
		Модифицированность=Ложь;
		ОткрытьФормуВыверкиТрансляции();
				
	КонецЕсли;
		
КонецПроцедуры // РезультатЗапросаВыверкаТрансляции()

&НаКлиенте
Процедура ОткрытьФормуВыверкиТрансляции()
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ДокументТрансляции",	Объект.Ссылка);
	СтруктураПараметров.Вставить("ФормироватьОтчет",	Истина);
	
	Если Объект.НаправлениеТрансляции=ПредопределенноеЗначение("Перечисление.НаправленияТрансляцииДанных.ФинансовыеРегистрыВРегистрБухгалтерии") Тогда
		
		ОткрытьФорму("Отчет.ВыверкаТрансляцииРегистров.ФормаОбъекта",СтруктураПараметров,,Новый УникальныйИдентификатор);
		
	Иначе
		
		ОткрытьФорму("Отчет.ВыверкаТрансляцииПроводок.ФормаОбъекта",СтруктураПараметров,,Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуВыверкиТрансляции() 

&НаКлиенте
Процедура ДатаОтраженияВУчетеПриИзменении(Элемент)
	
	ПриИзмененииДатыОтраженияВУчете();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодТрансляцииПриИзменении(Элемент)
	
	ПриИзмененииДатыОтраженияВУчете();
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьПроведениеНаСервере()
	
		
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПроведение(Команда)
	
	Если ОтменитьПроведениеСервер() Тогда
		
		Оповестить("ЗаписанОбъект"+Объект.ИмяОбъектаМетаданных);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтменитьПроведениеСервер()
	
	РабочийОбъект	=ПолучитьРабочийОбъект();
	ОбъектДляРасчета=ПолучитьОбъектДляРасчета();
		
	ОбъектДляРасчета.ДокументОбъект=РабочийОбъект;
	Отказ=Ложь;
	
	Попытка
		
		РежимПроведения=РежимЗаписиДокумента.ОтменаПроведения;
		РежимЗаписи=РежимПроведения;
		
		Если Не Заблокирован Тогда
			РабочийОбъект.Заблокировать();
			Заблокирован=Истина;
		КонецЕсли;
		
		ОбъектДляРасчета.ЗаписатьРабочийОбъект(РежимПроведения,РежимЗаписи,Отказ);
		Объект.Ссылка=РабочийОбъект.Ссылка;
		
		Если Отказ Тогда
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = '%1: %2'"), 
				НСтр("ru = 'Не удалось записать документ '") + РабочийОбъект, 
				ОписаниеОшибки()),,,СтатусСообщения.Важное);
			Возврат Ложь;
			
		КонецЕсли;
				
		Заголовок=РабочийОбъект;
		Модифицированность=Ложь;
		
		Возврат Истина;
		
	Исключение
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = '%1: %2'"), 
			НСтр("ru = 'Не удалось записать документ '") + РабочийОбъект, ОписаниеОшибки()),,,СтатусСообщения.Важное);
		Возврат Ложь;
		
	КонецПопытки	
		
КонецФункции // ЗаписатьОбъект()

&НаКлиенте
Процедура НайтиВСписке(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ТекущаяСтрока",Объект.Ссылка);
	
	ОткрытьФорму("Документ."+Объект.ИмяОбъектаМетаданных+".ФормаСписка",СтруктураПараметров,,Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособКорректировкиПриИзменении(Элемент)
	
	Объект.ДвиженияПоРегиструБухгалтерии	= (СпособКорректировки=0);
	Объект.КорректировкиЗначенийПоказателей	= (СпособКорректировки=1);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПометкуУдаленияСервер()
	
	ДокументОбъект=Объект.Ссылка.ПолучитьОбъект();
	ДокументОбъект.ПометкаУдаления=Не ДокументОбъект.ПометкаУдаления;
	
	Попытка 
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Объект.ПометкаУдаления=ДокументОбъект.ПометкаУдаления;
		Элементы.ФормаИзменитьПометкуУдаления.Пометка=Объект.ПометкаУдаления;
		
	Исключение
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = '%1: %2'"), 
			НСтр("ru = 'Не удалось изменить пометку удаления документа '") + ДокументОбъект, ОписаниеОшибки()),,,СтатусСообщения.Важное);

	КонецПопытки;		
	
КонецПроцедуры // ИзменитьПометкуУдаленияСервер() 

&НаКлиенте
Процедура ИзменитьПометкуУдаления(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Объект.ПометкаУдаления Тогда
			
			ТекстВопроса=СтрШаблон(Нстр("ru = 'Снять с %1 пометку удаления?'"),Объект.Ссылка);
			
		Иначе
			
			ТекстВопроса=СтрШаблон(Нстр("ru = 'Пометить %1 на удаление?'"),Объект.Ссылка);
			
		КонецЕсли;
		
		ОписаниеЗакрытие = Новый ОписаниеОповещения("ПометкаУдаления_Завершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеЗакрытие, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометкаУдаления_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИзменитьПометкуУдаленияСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	ПриИзмененииПараметровУчетнойПолитики();	
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПараметровУчетнойПолитики()
	
	ПолучитьДанныеУчетнойПолитики();
	Объект.УчетнаяПолитика=ДанныеУчетнойПолитики.УчетнаяПолитика;
    ПроверитьОпределитьШаблонТрансляции();
	
КонецПроцедуры // ПриИзмененииПараметровУчетнойПолитики() 

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Объект.НачалоПериода, Объект.ОкончаниеПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект,Новый Структура("ИмяРеквизита","ПериодОтчета"));
	
	Если НЕ Объект.ИмяОбъектаМетаданных="Трансляция" Тогда
		
		ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора,, , , , ОписаниеОповещения);
		Возврат;
		
	КонецЕсли;	
	
	Если ПериодичностьТрансляции=ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда

		ПараметрыВыбора.Вставить("ВыборКварталов",Ложь);
		ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц", ПараметрыВыбора,, , , , ОписаниеОповещения);
		
	ИначеЕсли ПериодичностьТрансляции=ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		
		ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаКвартал", ПараметрыВыбора,, , , , ОписаниеОповещения);
		
	ИначеЕсли ПериодичностьТрансляции=ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		
		ПараметрыВыбора.Вставить("Кратность",ПериодичностьТрансляции);
		ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора,, , , , ОписаниеОповещения);
		
	Иначе
				
		ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаДень", ПараметрыВыбора,, , , , ОписаниеОповещения);
				
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПроверки=ПроверитьУстановитьПериод(РезультатВыбора,ДопПараметры.ИмяРеквизита);
	
	Если НЕ ПустаяСтрока(ТекстПроверки) Тогда
		
		ПоказатьПредупреждение(,ТекстПроверки);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПроверитьУстановитьПериод(РезультатВыбора,ИмяРеквизита)
	
	Если Объект.ИмяОбъектаМетаданных="Трансляция" Тогда
		
		ВыбранныйПериод	= ОбщегоНазначенияУХ.ПолучитьПериодПоДате(РезультатВыбора.НачалоПериода, ПериодичностьТрансляции);
		
	Иначе
		
		ВыбранныйПериод	= ОбщегоНазначенияУХ.ПолучитьПроизвольныйПериод(РезультатВыбора.НачалоПериода, НачалоДня(РезультатВыбора.КонецПериода));
		
	КонецЕсли;
	
	ТекстПроверки=ПроверитьВыбранныйПериод(ВыбранныйПериод,ИмяРеквизита);
	
	Если ПустаяСтрока(ТекстПроверки) Тогда
		
		Объект[ИмяРеквизита]=ВыбранныйПериод;
		
		Если ИмяРеквизита="ПериодОтчета" Тогда
			
			ПриИзмененииПериода();
			
		Иначе
			
			ПриИзмененииДатыОтраженияВУчете();	
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ТекстПроверки;
			
КонецФункции // ОпределитьПериодОтчета() 

&НаСервере
Функция ПроверитьВыбранныйПериод(ВыбранныйПериод,ИмяРеквизита)
	
	Если НЕ (ЗначениеЗаполнено(Объект.ШаблонКорректировки)
		И ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.Сценарий)
		И Объект.ИсходныйДокумент=Неопределено) Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	ДатыПериода=ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыбранныйПериод,"ДатаНачала,ДатаОкончания");
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументКорректировки.Ссылка КАК Ссылка,
	|	ДокументКорректировки.ПериодОтчета КАК ПериодОтчета
	|ИЗ
	|	Документ."+Объект.ИмяОбъектаМетаданных+" КАК ДокументКорректировки
	|ГДЕ
	|	ДокументКорректировки.ШаблонКорректировки = &ШаблонКорректировки
	|	И ДокументКорректировки.Организация = &Организация
	|	И ДокументКорректировки.Сценарий = &Сценарий
	|	И ДокументКорректировки.ИсходныйДокумент = Неопределено
	|	И (НЕ ДокументКорректировки.Ссылка = &Ссылка)
	|	И ДокументКорректировки."+ИмяРеквизита+".ДатаНачала <= &ДатаНачала
	|	И ДокументКорректировки."+ИмяРеквизита+".ДатаОкончания >= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала",			ДатыПериода.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",		ДатыПериода.ДатаОкончания);
	Запрос.УстановитьПараметр("ШаблонКорректировки",Объект.ШаблонКорректировки);
	Запрос.УстановитьПараметр("Организация",		Объект.Организация);
	Запрос.УстановитьПараметр("Сценарий",			Объект.Сценарий);
	Запрос.УстановитьПараметр("Ссылка",				Объект.Ссылка);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		ТекстПредупреждения=СтрШаблон(Нстр("ru = 'Для организации %1 и шаблона %2 уже существует документ %3 за период %4'"),
			Объект.Организация,Объект.ШаблонКорректировки,Результат.Ссылка,Результат.ПериодОтчета);
			
			Возврат ТекстПредупреждения;
			
	Иначе
		
			Возврат "";
			
	КонецЕсли;
			
		
КонецФункции //  ПроверитьВыбранныйПериод() 

&НаКлиенте
Процедура ВыбратьПериодОтражения(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Объект.НачалоПериода, Объект.ОкончаниеПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект,Новый Структура("ИмяРеквизита","ПериодОтражения"));
	
	Если ПериодичностьТрансляции=ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда

		ПараметрыВыбора.Вставить("ВыборКварталов",Ложь);
		ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц", ПараметрыВыбора,, , , , ОписаниеОповещения);
		
	ИначеЕсли ПериодичностьТрансляции=ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		
		ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаКвартал", ПараметрыВыбора,, , , , ОписаниеОповещения);
		
	ИначеЕсли ПериодичностьТрансляции=ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		
		ПараметрыВыбора.Вставить("Кратность",ПериодичностьТрансляции);
		ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора,, , , , ОписаниеОповещения);
		
	Иначе
				
		ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаДень", ПараметрыВыбора,, , , , ОписаниеОповещения);
				
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ПриИзмененииПериода();
	
КонецПроцедуры
