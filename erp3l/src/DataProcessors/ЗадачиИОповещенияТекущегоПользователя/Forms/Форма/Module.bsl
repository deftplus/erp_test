
#Область ОбработчикиСобытийФормы

// Возвращает копию таблицы объектов ТаблицаОбъектовВход, где заменены названия
// на версии соглашений.
&НаСервере
Функция ЗаменитьНаименованияВерсийСоглашений(ТаблицаОбъектовВход)
	РезультатФункции = ТаблицаОбъектовВход.Скопировать();
	МассивНаименований = Новый Массив;
	МассивНаименований.Добавить("ВерсияСоглашенияАккредитив");
	МассивНаименований.Добавить("ВерсияСоглашенияБанковскаяГарантия");
	МассивНаименований.Добавить("ВерсияСоглашенияВалютноПроцентныйСвоп");
	МассивНаименований.Добавить("ВерсияСоглашенияВалютныйСвоп");
	МассивНаименований.Добавить("ВерсияСоглашенияВалютныйФорвард");
	МассивНаименований.Добавить("ВерсияСоглашенияДепозит");
	МассивНаименований.Добавить("ВерсияСоглашенияКоммерческийДоговор");
	МассивНаименований.Добавить("ВерсияСоглашенияКредит");
	Если НЕ ИдентификацияПродуктаУХКлиентСервер.ЭтоЕХ() Тогда
		МассивНаименований.Добавить("ВерсияСоглашенияЛизинг");
	КонецЕсли;	
	Для Каждого ТекРезультатФункции Из РезультатФункции Цикл
		Если МассивНаименований.Найти(ТекРезультатФункции.ТипОбъекта) <> Неопределено Тогда
			ТекРезультатФункции.ТипОбъекта = "ВерсииСоглашения";
		Иначе
			// Выполняем поиск далее.
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		// ЗаменитьНаименованияВерсийСоглашений()

// По таблице объектов ТаблицаОбъектовВход устанавливает видимость
// и отбор в закладках согласования.
&НаСервере
Процедура ОбновитьОтображениеЗакладокПоТаблицеОбъектов(ТаблицаОбъектовВход)
	// Заменим версии соглашений.
	ТаблицаОбъектовВход = ЗаменитьНаименованияВерсийСоглашений(ТаблицаОбъектовВход);	
	// Получим массив типов объектов согласования.
	КопияТзОбъекты = ТаблицаОбъектовВход.Скопировать();
	КопияТзОбъекты.Свернуть("ТипОбъекта");
	МассивТзОбъектов = КопияТзОбъекты.ВыгрузитьКолонку("ТипОбъекта");
	// Установим видимость предопределённым закладкам согласования.
	Для Каждого текТаблицаОбъектовВход Из ТаблицаОбъектовВход Цикл
		Попытка 
			Если ЗначениеЗаполнено(текТаблицаОбъектовВход) Тогда
				Если Элементы.Найти(текТаблицаОбъектовВход.ТипОбъекта) <> Неопределено Тогда
					Элементы[текТаблицаОбъектовВход.ТипОбъекта].Видимость = Истина;
					Элементы[текТаблицаОбъектовВход.ТипОбъекта].Обновить();
					ИндексОбъекта = МассивТзОбъектов.Найти(текТаблицаОбъектовВход.ТипОбъекта);
					Если ИндексОбъекта <> Неопределено Тогда
						МассивТзОбъектов.Удалить(ИндексОбъекта);
					Иначе
						// Не удаляем.
					КонецЕсли;
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
		Исключение
			ТекстСообщения = НСтр("ru = 'Возникли ошибки при отображении таблицы %ИмяТаблицы%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяТаблицы%", Строка(текТаблицаОбъектовВход.ТипОбъекта));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецПопытки;
	КонецЦикла;	
	// Установим видимость закладки Прочее.
	ЕстьПрочиеСогласумыеОбъекты = МассивТзОбъектов.Количество() > 0;
	Элементы.Прочее.Видимость = ЕстьПрочиеСогласумыеОбъекты;	
	// Установим отбор для закладок согласования.
	Проекты.Отбор.Элементы.Очистить();
	ЭкземплярыОтчетов.Отбор.Элементы.Очистить();
	ЗакупочныеПроцедуры.Отбор.Элементы.Очистить();
	ЗаявкиНаОперацию.Отбор.Элементы.Очистить();
	ЗаявкиНаИзменениеНСИ.Отбор.Элементы.Очистить();
	РакурсДанных.Отбор.Элементы.Очистить();
	Прочее.Отбор.Элементы.Очистить();
	ВерсииСоглашения.Отбор.Элементы.Очистить();
	ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(Проекты.Отбор,							 "Ответственный", текПользователи, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
	ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(ЗакупочныеПроцедуры.Отбор,				 "Ответственный", текПользователи, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
	ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(ЗаявкиНаОперацию.Отбор,					 "Ответственный", текПользователи, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
	ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(ЗаявкиНаИзменениеНСИ.Отбор,				 "Ответственный", текПользователи, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
	ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(РакурсДанных.Отбор,						 "Ответственный", текПользователи, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
	ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(ОперативныйПлан.Отбор,				 	 "Ответственный", текПользователи, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
	ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(ЭкземплярыОтчетов.Отбор,					 "Ответственный", текПользователи, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
	ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(Прочее.Отбор,							 "Ответственный", текПользователи, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
	ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(ВерсииСоглашения.Отбор,					 "Ответственный", текПользователи, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
	Элементы.ТекущиеОповещенияСписок.Обновить();
	Элементы.Прочее.Обновить();
	// Изменим надпись на кнопке "Назначить заместителя".
	УстановитьЗаголовокКомандыНазначитьЗаместителя();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Проверим необходимость показа формы на рабочем столе.
	Если ОбщегоНазначения.РазделениеВключено()
		И Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ПараметрыКлиента = СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере();
	Если ПараметрыКлиента.Получить("СкрытьРабочийСтолПриНачалеРаботыСистемы") <> Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	текПользователи.Очистить();
	МодульУправленияПроцессамиУХ.ПолучитьЗамещаемых(ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"),текПользователи);
	МассивПользователей = текПользователи.ВыгрузитьЗначения();
	МоиОповещения.Параметры.УстановитьЗначениеПараметра("Замещаемые", МассивПользователей);
	текПользователи.Добавить(ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
	МоиОповещения.Параметры.УстановитьЗначениеПараметра("Ответственный", ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
	//Определим доступные текущему пользователю объекты (закладки)
	ЗапросОбъекты = Новый Запрос;
	ЗапросОбъекты.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗадачиУниверсальныхПроцессов.ДокументПроцесса.ТипКлючевогоОбъекта.Наименование КАК ТипОбъекта
	|ИЗ
	|	РегистрСведений.ОтложеннаяОбработкаЭтаповПроцессов КАК ЗадачиУниверсальныхПроцессов
	|ГДЕ
	|	ЗадачиУниверсальныхПроцессов.Ответственный В(&Ответственный)
	|	И ЗадачиУниверсальныхПроцессов.Выполнено = ЛОЖЬ
	|	И ЗадачиУниверсальныхПроцессов.Задача <> ЗНАЧЕНИЕ(Справочник.Задачи.ПустаяСсылка)
	|	И НЕ ЗадачиУниверсальныхПроцессов.ДокументПроцесса.ТипКлючевогоОбъекта.Наименование ЕСТЬ NULL 
	|	И ЗадачиУниверсальныхПроцессов.ВидДействия В (ЗНАЧЕНИЕ(Перечисление.СобытияОтложеннойОбработкиПроцессов.ОбработкаЭтапаСогласования), ЗНАЧЕНИЕ(Перечисление.СобытияОтложеннойОбработкиПроцессов.ДополнительноеСогласованиеЭтапа))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗадачиУниверсальныхПроцессов.ТипКлючевогоОбъекта.Наименование
	|ИЗ
	|	РегистрСведений.ОтложеннаяОбработкаЭтаповПроцессов КАК ЗадачиУниверсальныхПроцессов
	|ГДЕ
	|	ЗадачиУниверсальныхПроцессов.Ответственный В(&Ответственный)
	|	И ЗадачиУниверсальныхПроцессов.Выполнено = ЛОЖЬ
	|	И ЗадачиУниверсальныхПроцессов.Задача <> ЗНАЧЕНИЕ(Справочник.Задачи.ПустаяСсылка)
	|	И НЕ ЗадачиУниверсальныхПроцессов.ТипКлючевогоОбъекта.Наименование ЕСТЬ NULL 
	|	И ЗадачиУниверсальныхПроцессов.ВидДействия В (ЗНАЧЕНИЕ(Перечисление.СобытияОтложеннойОбработкиПроцессов.ОбработкаЭтапаСогласования), ЗНАЧЕНИЕ(Перечисление.СобытияОтложеннойОбработкиПроцессов.ДополнительноеСогласованиеЭтапа))";
	ЗапросОбъекты.УстановитьПараметр("Ответственный",текПользователи);
	ТзОбъекты = ЗапросОбъекты.Выполнить().Выгрузить();	
	ОбновитьОтображениеЗакладокПоТаблицеОбъектов(ТзОбъекты);
	// Установим начальные настройки элементов.
	Элементы.КоманднаяПанель.Видимость = Истина;
	Элементы.КоманднаяПанельОповещения.Видимость = Ложь;
	ИмяТекущейТаблицы = "ТекущиеОповещенияСписок";
	ЦветТекущегоФлажка = Перечисления.ЦветаФлажковОповещений.Красный;
	// Установим запросы таблиц.
	ЗаявкиНаОперацию.ТекстЗапроса	 = УправлениеПроцессамиСогласованияУхПереопределяемый.ПолучитьТекстЗапросаЗаявкиНаОперациюМоиОповещения();
	
	Если Лев(Метаданные.Версия, 4) = "3.1." Тогда
		Элементы.ВложенияСогласования.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОповещенийФормы

&НаКлиенте
Процедура СогласоватьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	ОбновитьОтображение();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВыборЭлемента(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутСогласования(Команда)
	ТекущиеДанные = Элементы[ИмяТекущейТаблицы].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ДействияСогласованиеУХКлиент.МаршрутСогласования(ЭтаФорма,ТекущиеДанные.Ссылка);
	Иначе
		Возврат;			// Нет ссылки. Не показываем маршрут
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВложенияСогласования()
	ТекущиеДанные = Элементы[ИмяТекущейТаблицы].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ДействияСогласованиеУХКлиент.ТелеграмВложенныеФайлы(ЭтаФорма, ТекущиеДанные.Ссылка);
	Иначе
		Возврат;			// Нет ссылки. Не показываем маршрут
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования(Команда)
	ТекущиеДанные = Элементы[ИмяТекущейТаблицы].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДействияСогласованиеУХКлиент.ИсторияСогласования(ЭтаФорма,ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СогласованиеДокумента(Команда)
	ВыделенныеСтрокиТаблицы = Элементы[ИмяТекущейТаблицы].ВыделенныеСтроки;
	Если ВыделенныеСтрокиТаблицы.Количество() = 0 Тогда
		Возврат;
	Иначе
		// Получим данные по задачам.
		СписокКлючей = Новый СписокЗначений;
		Для Каждого Стр Из ВыделенныеСтрокиТаблицы Цикл  
			СписокКлючей.Добавить(Стр);
		КонецЦикла;
		СтруктураСсылок = ВернутьСтруктуруСсылокПоКлючам(СписокКлючей);
		// Откроем задачи при необходимости.
		Если Не СтруктураСсылок.ЗадачиНеВыполнены Тогда
			ТекстСообщения = НСтр("ru = 'Задачи были выполнены ранее.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			ОбновитьОтображение();
			Возврат;
		Иначе
			ОткрытьЗадачиПоСтруктуреСсылок(СтруктураСсылок);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭлементыСогласованияПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ИмяТекущейТаблицы = СтрЗаменить(ТекущаяСтраница.Имя,"Гр","");
	ДоступностьКомандФлажков();
КонецПроцедуры

&НаКлиенте
Процедура НазначитьЗаместителя(Команда)
	ТекущийПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	ПараметрыФормы = Новый Структура("ПользовательОтбор", ТекущийПользователь);
	ОткрытьФорму("РегистрСведений.Заместители.ФормаСписка", ПараметрыФормы, , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьОтображение();
КонецПроцедуры

&НаКлиенте
Процедура ТекущиеОповещенияСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	// Открыть выбранную задачу.
	ТекДанные = Элементы.ТекущиеОповещенияСписок.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекДанные.Задача) Тогда
			// Получим данные по выбранной задаче.
			ВыделенныеСтрокиТаблицы = Элементы[ИмяТекущейТаблицы].ВыделенныеСтроки;
			СписокКлючей = Новый СписокЗначений;
			СписокКлючей.Добавить(Элементы.ТекущиеОповещенияСписок.ТекущаяСтрока);
			СтруктураСсылок = ВернутьСтруктуруСсылокПоКлючам(СписокКлючей);
			// Откроем задачу при необходимости.
			Если СтруктураСсылок.ЗадачиНеВыполнены Тогда
				ОткрытьЗадачиПоСтруктуреСсылок(СтруктураСсылок);
			Иначе
				// Нет невыполненных задач. Ничего не делаем.
			КонецЕсли;
		Иначе
			// Нет данных для открытия
		КонецЕсли;
	Иначе	
		// Нет связанного объекта
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТекущиеОповещенияСписокПриАктивизацииСтроки(Элемент)
	Попытка
		Если Элемент.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		Если ИмяТекущейТаблицы = "ТекущиеОповещенияСписок" Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ОбработчикСписокПриАктивизацииСтроки", 0.5, Истина);
		Иначе
			Возврат;		// Выбрана другая закладка.
		КонецЕсли;
	Исключение
		// Не изменяем содержимого.
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикСписокПриАктивизацииСтроки()
	
	ТекущиеДанные = Элементы.ТекущиеОповещенияСписок.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		// Отображение команды Согласование документа.
		УстановитьДоступностьКомандСогласования(ТекущиеДанные.Задача, ТекущиеДанные.Пользователь);
		// Вывод текущего оповещения.
		ОтобразитьСодержимоеТекущегоОповещения(ТекущиеДанные);
	Иначе
		// Строка не выбрана.
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура УстановитьПризнакПрочитано(Команда)
	МассивВыделенных = Элементы.ТекущиеОповещенияСписок.ВыделенныеСтроки;
	ЕстьНепрочитанные = ОпределитьНаличиеНепрочитанных(МассивВыделенных);
	Для Каждого вСтрока Из Элементы.ТекущиеОповещенияСписок.ВыделенныеСтроки Цикл
		УстановитьПометкуПрочитано(вСтрока, ЕстьНепрочитанные);			
	КонецЦикла;
	Элементы.ТекущиеОповещенияСписок.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакНеПрочитано(Команда)
	УстановитьПометкуПрочитано(Элементы.ТекущиеОповещенияСписок.ТекущаяСтрока);
	Элементы.ТекущиеОповещенияСписок.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущиеОповещенияСписокПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВсеЗадачиПередНачаломИзменения(Элемент, Отказ)

КонецПроцедуры

#КонецОбласти

// Определяет, есть ли среди оповещений МассивСтрокВход непрочитанные.
&НаСервере
Функция ОпределитьНаличиеНепрочитанных(МассивСтрокВход)
	РезультатФункции = Ложь;
	МассивИдентификаторовОповещений = Новый Массив;
	Для Каждого вСтрока Из МассивСтрокВход Цикл
		МассивИдентификаторовОповещений.Добавить(вСтрока.ИдентификаторОповещения);
	КонецЦикла;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОповещенияПользователей.ИдентификаторОповещения
	|ИЗ
	|	РегистрСведений.ОповещенияПользователей КАК ОповещенияПользователей
	|ГДЕ
	|	ОповещенияПользователей.ИдентификаторОповещения В(&ИдентификаторОповещения)
	|	И ОповещенияПользователей.Прочитано = ЛОЖЬ";
	Запрос.УстановитьПараметр("ИдентификаторОповещения", МассивИдентификаторовОповещений);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = НЕ РезультатЗапроса.Пустой();
	Возврат РезультатФункции;
КонецФункции

// Выставляет заголовок для команды НазначитьЗаместителя в зависимости от
// уже установленных заместителей.
&НаСервере
Процедура УстановитьЗаголовокКомандыНазначитьЗаместителя()
	МассивЗаместителей	 = МодульУправленияПроцессамиУХ.ПолучитьЗаместителейТекущегоПользователя();
	МассивЗамещаемых	 = МодульУправленияПроцессамиУХ.ПолучитьЗамещаемыхТекущегоПользователя();
	Если (МассивЗаместителей.Количество() > 0) ИЛИ (МассивЗамещаемых.Количество() > 0) Тогда
		ТекстЗаголовкаКоманды = НСтр("ru = 'Назначить заместителя (%КоличествоЗаместителей%/%КоличествоЗамещаемых%)'");
		ТекстЗаголовкаКоманды = СтрЗаменить(ТекстЗаголовкаКоманды, "%КоличествоЗаместителей%", Строка(МассивЗаместителей.Количество()));
		ТекстЗаголовкаКоманды = СтрЗаменить(ТекстЗаголовкаКоманды, "%КоличествоЗамещаемых%", Строка(МассивЗамещаемых.Количество()));
	Иначе
		ТекстЗаголовкаКоманды = НСтр("ru = 'Назначить заместителя'");
	КонецЕсли;
	Элементы.НазначитьЗаместителя.Заголовок = ТекстЗаголовкаКоманды;
КонецПроцедуры

// Возвращает пустую структуру ссылок по ключам.
&НаСервереБезКонтекста
Функция ИнициироватьСтруктуруСсылокПоКлючам()
	РезультатФункции = Новый Структура;
	СписокСсылок		 = Новый СписокЗначений;				
	СписокЗадач			 =  Новый СписокЗначений;
	СписокЗамещаемых	 = Новый СписокЗначений;
	РезультатФункции.Вставить("ЗадачиНеВыполнены", Истина);
	РезультатФункции.Вставить("СписокСсылок", СписокСсылок);
	РезультатФункции.Вставить("СписокЗадач", СписокЗадач);
	РезультатФункции.Вставить("ЭтоДопСогласование", Ложь);		
	РезультатФункции.Вставить("ЗадачиРазнородные", Ложь);		
	РезультатФункции.Вставить("ТипЗадачи", Неопределено);		
	РезультатФункции.Вставить("ТребуетсяВыполнение", Неопределено);		
	РезультатФункции.Вставить("АдресТаблицыЗадач", "");		
	РезультатФункции.Вставить("СписокЗамещаемых", СписокЗамещаемых);		
	Возврат РезультатФункции;
КонецФункции

// Возвращает таблицу с задачами по массиву идентификаторов МассивИдентификаторовВход.
&НаСервереБезКонтекста
Функция ПолучитьТаблицуЗадачОповещений(МассивИдентификаторовВход)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОповещенияПользователей.Пользователь,
	|	ОповещенияПользователей.ДатаСоздания,
	|	ОповещенияПользователей.КатегорияОповещений,
	|	ОповещенияПользователей.ВидОповещения,
	|	ОповещенияПользователей.ИдентификаторОповещения,
	|	ОповещенияПользователей.Прочитано,
	|	ОповещенияПользователей.Задача,
	|	ЕСТЬNULL(ОповещенияПользователей.Задача.СвязанныйОбъект, ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка)) КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Оповещения
	|ИЗ
	|	РегистрСведений.ОповещенияПользователей КАК ОповещенияПользователей
	|ГДЕ
	|	ОповещенияПользователей.ИдентификаторОповещения В(&ИдентификаторОповещения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_Оповещения.Пользователь,
	|	ВТ_Оповещения.ДатаСоздания,
	|	ВТ_Оповещения.КатегорияОповещений,
	|	ВТ_Оповещения.ВидОповещения,
	|	ВТ_Оповещения.ИдентификаторОповещения,
	|	ВТ_Оповещения.Прочитано,
	|	ВТ_Оповещения.Задача,
	|	ЕСТЬNULL(ВТ_Оповещения.Задача.СвязанныйОбъект, ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка)) КАК Ссылка,
	|	ЕСТЬNULL(ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ВидДействия, ЗНАЧЕНИЕ(Перечисление.СобытияОтложеннойОбработкиПроцессов.ПустаяСсылка)) КАК ВидДействия,
	|	ЕСТЬNULL(ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Выполнено, ИСТИНА) КАК Выполнено,
	|	ЕСТЬNULL(ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ВремяЗавершенияЗадания, &ПустаяДата) КАК ВремяЗавершенияЗадачи,
	|	ЕСТЬNULL(ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ЭтапПроцесса, ЗНАЧЕНИЕ(Справочник.ЭтапыУниверсальныхПроцессов.ПустаяСсылка)) КАК Этап,
	|	ЕСТЬNULL(ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Ответственный, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Ответственный
	|ПОМЕСТИТЬ ВТ_ОсновныеЗадачи
	|ИЗ
	|	ВТ_Оповещения КАК ВТ_Оповещения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтложеннаяОбработкаЭтаповПроцессов.СрезПоследних КАК ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних
	|		ПО ВТ_Оповещения.Пользователь = ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Ответственный
	|			И ВТ_Оповещения.Задача = ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_Оповещения.Пользователь КАК Пользователь,
	|	ВТ_Оповещения.ДатаСоздания,
	|	ВТ_Оповещения.КатегорияОповещений,
	|	ВТ_Оповещения.ВидОповещения,
	|	ВТ_Оповещения.ИдентификаторОповещения,
	|	ВТ_Оповещения.Прочитано,
	|	ВТ_Оповещения.Задача,
	|	ЕСТЬNULL(ВТ_Оповещения.Задача.СвязанныйОбъект, ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка)) КАК Ссылка,
	|	ЕСТЬNULL(ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ВидДействия, ЗНАЧЕНИЕ(Перечисление.СобытияОтложеннойОбработкиПроцессов.ПустаяСсылка)) КАК ВидДействия,
	|	ЕСТЬNULL(ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Выполнено, ИСТИНА) КАК Выполнено,
	|	ЕСТЬNULL(ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ВремяЗавершенияЗадания, &ПустаяДата) КАК ВремяЗавершенияЗадачи,
	|	ЕСТЬNULL(ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ЭтапПроцесса, ЗНАЧЕНИЕ(Справочник.ЭтапыУниверсальныхПроцессов.ПустаяСсылка)) КАК Этап,
	|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Ответственный
	|ПОМЕСТИТЬ ВТ_ЗадачиЗамещение
	|ИЗ
	|	ВТ_Оповещения КАК ВТ_Оповещения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтложеннаяОбработкаЭтаповПроцессов.СрезПоследних КАК ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних
	|		ПО ВТ_Оповещения.Задача = ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Задача
	|			И (ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Ответственный В (&СписокЗамещаемых))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_ОсновныеЗадачи.Пользователь,
	|	ВТ_ОсновныеЗадачи.ДатаСоздания,
	|	ВТ_ОсновныеЗадачи.КатегорияОповещений,
	|	ВТ_ОсновныеЗадачи.ВидОповещения,
	|	ВТ_ОсновныеЗадачи.ИдентификаторОповещения,
	|	ВТ_ОсновныеЗадачи.Прочитано,
	|	ВТ_ОсновныеЗадачи.Задача,
	|	ВТ_ОсновныеЗадачи.Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_ОсновныеЗадачи.ВидДействия = ЗНАЧЕНИЕ(Перечисление.СобытияОтложеннойОбработкиПроцессов.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ВТ_ЗадачиЗамещение.ВидДействия, ЗНАЧЕНИЕ(Перечисление.СобытияОтложеннойОбработкиПроцессов.ПустаяСсылка))
	|		ИНАЧЕ ВТ_ОсновныеЗадачи.ВидДействия
	|	КОНЕЦ КАК ВидДействия,
	|	ВЫБОР
	|		КОГДА ВТ_ОсновныеЗадачи.Выполнено
	|			ТОГДА ЕСТЬNULL(ВТ_ЗадачиЗамещение.Выполнено, ИСТИНА)
	|		ИНАЧЕ ВТ_ОсновныеЗадачи.Выполнено
	|	КОНЕЦ КАК Выполнено,
	|	ВЫБОР
	|		КОГДА ВТ_ОсновныеЗадачи.ВремяЗавершенияЗадачи = &ПустаяДата
	|			ТОГДА ЕСТЬNULL(ВТ_ЗадачиЗамещение.ВремяЗавершенияЗадачи, &ПустаяДата)
	|		ИНАЧЕ ВТ_ОсновныеЗадачи.ВремяЗавершенияЗадачи
	|	КОНЕЦ КАК ВремяЗавершенияЗадачи,
	|	ВЫБОР
	|		КОГДА ВТ_ОсновныеЗадачи.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыУниверсальныхПроцессов.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ВТ_ЗадачиЗамещение.Этап, ЗНАЧЕНИЕ(Справочник.ЭтапыУниверсальныхПроцессов.ПустаяСсылка))
	|		ИНАЧЕ ВТ_ОсновныеЗадачи.Этап
	|	КОНЕЦ КАК Этап,
	|	ВЫБОР
	|		КОГДА ВТ_ОсновныеЗадачи.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ВТ_ЗадачиЗамещение.Ответственный, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|		ИНАЧЕ ВТ_ОсновныеЗадачи.Ответственный
	|	КОНЕЦ КАК Замещаемый
	|ИЗ
	|	ВТ_ОсновныеЗадачи КАК ВТ_ОсновныеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗадачиЗамещение КАК ВТ_ЗадачиЗамещение
	|		ПО ВТ_ОсновныеЗадачи.Задача = ВТ_ЗадачиЗамещение.Задача
	|			И ВТ_ОсновныеЗадачи.ИдентификаторОповещения = ВТ_ЗадачиЗамещение.ИдентификаторОповещения";
	ТекПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	СписокЗамещаемых = Новый СписокЗначений;
	МодульУправленияПроцессамиУХ.ПолучитьЗамещаемых(ТекПользователь, СписокЗамещаемых);
	Запрос.УстановитьПараметр("СписокЗамещаемых", СписокЗамещаемых);
	Запрос.УстановитьПараметр("ИдентификаторОповещения", МассивИдентификаторовВход);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
КонецФункции

// Возвращает массив задач текущего пользователя по объектам согласования 
// из массива МассивСсылокВход.
&НаСервереБезКонтекста
Функция ПолучитьЗадачиПользователяПоОбъекту(МассивСсылокВход)
	РезультатФункции = Новый Массив;
	РезультатФункции = Справочники.Задачи.ПолучитьЗадачиПользователяПоОбъекту(МассивСсылокВход);
	Возврат РезультатФункции;
КонецФункции

// Возвращает структуру, содержащую список ссылок, список задач, признак того, что задачи
// являются задачами согласования, а также признак, что все задачи не выполнены.
&НаСервереБезКонтекста
Функция ВернутьСтруктуруСсылокПоКлючам(СписокКлючей) 
	РезультатФункции = ИнициироватьСтруктуруСсылокПоКлючам();
	Если СписокКлючей.Количество() = 0 Тогда
		// Передан пустой список. Задач по нему нет.
		РезультатФункции = ИнициироватьСтруктуруСсылокПоКлючам();	
	Иначе	
		ПервыйЭлементЗначение = СписокКлючей[0].Значение;
		Если ТипЗнч(ПервыйЭлементЗначение) = Тип("РегистрСведенийКлючЗаписи.ОповещенияПользователей") Тогда
			// Возьмём задачи из оповещений пользователей.
			// Получим массив идентификаторов сообщений.
			СписокСсылок = Новый СписокЗначений; 
			СписокЗадач = Новый СписокЗначений;
			МассивИдентификаторов = Новый Массив;
			Для Каждого нКлюч Из СписокКлючей Цикл
				МассивИдентификаторов.Добавить(нКлюч.Значение.ИдентификаторОповещения);
			КонецЦикла;
			// По известным идентификаторам получим список ссылок на согласуемые объекты.
			ТаблицаЗадач = ПолучитьТаблицуЗадачОповещений(МассивИдентификаторов);
			// Обойдём полученную таблицу и заполним результирующие данные.
			ЭтоДопСогласование = Ложь;
			ВидДействияДопСогласование = Перечисления.СобытияОтложеннойОбработкиПроцессов.ДополнительноеСогласованиеЭтапа;
			ТипЗадачи = Неопределено;
			ЗадачиРазнородные = Ложь;
			ТребуетсяВыполнение = Ложь;
			Для Каждого ТекТаблицаЗадач Из ТаблицаЗадач Цикл
				ТекСсылка = ТекТаблицаЗадач.Ссылка;
				ТекВидОповещения = ТекТаблицаЗадач.ВидОповещения;
				ЭтоВидОповещенияСогласования	 = (ТекВидОповещения = Справочники.ВидыСобытийОповещений.ТребуетсяСогласование);
				ЭтоВидОповещенияОбработка		 = (ТекВидОповещения = Справочники.ВидыСобытийОповещений.ТребуетсяОбработка);
				ЭтоВидОповещенияВыборЭтапа		 = (ТекВидОповещения = Справочники.ВидыСобытийОповещений.ТребуетсяВыборЭтапа);
				ТекЗадача = ТекТаблицаЗадач.Задача;
				// Заполнение списка ссылок.
				Если ЗначениеЗаполнено(ТекСсылка) Тогда
					СписокСсылок.Добавить(ТекСсылка);	
				Иначе
					// Нет ссылки, не добавляем.
				КонецЕсли;
				// Обработка прикреплённой задачи.
				Если ЗначениеЗаполнено(ТекЗадача) Тогда  
					// Заполнение списка задач.
					СписокЗадач.Добавить(ТекЗадача);
					// Получим тип текущей задачи.
					Если ЭтоВидОповещенияСогласования ИЛИ ЭтоВидОповещенияОбработка ИЛИ ЭтоВидОповещенияВыборЭтапа Тогда
						ВидОповещенияРабочий = ТекВидОповещения;										// Известный тип задачи. Оставим его.
					Иначе
						ВидОповещенияРабочий = Справочники.ВидыСобытийОповещений.ПустаяСсылка();		// Задача задана, но тип неизвестный. Обрабатываем как общую задачу.
					КонецЕсли;
					// Сравним полученный тип задачи с имеющимся.
					Если ТипЗадачи = Неопределено Тогда
						ТипЗадачи = ВидОповещенияРабочий;
						// Проверка на доп согласование.
						Если ТекТаблицаЗадач.ВидДействия = ВидДействияДопСогласование Тогда
							ЭтоДопСогласование = Истина;
						Иначе
							// Выполняем поиск далее.
						КонецЕсли;
					Иначе
						Если ТипЗадачи = ВидОповещенияРабочий Тогда
							// Такая же задача. Оставляем тип.
						Иначе
							ЗадачиРазнородные =  Истина; 	// Предыдущие задачи были другими. Выполнять вместе нельзя.
						КонецЕсли;
					КонецЕсли;    				
					// Установим флаг необходимости выполнения, если задача ещё не выполнена.
					Если (НЕ ТекТаблицаЗадач.Выполнено) И (НЕ ЗначениеЗаполнено(ТекТаблицаЗадач.ВремяЗавершенияЗадачи)) Тогда
						ТребуетсяВыполнение = Истина;
					Иначе
						// Задача уже выполнена. Не требуется её выполнение.
					КонецЕсли;
				Иначе
					// Задачи нет. Пропускаем эту строку.
				КонецЕсли;
			КонецЦикла;
			ЗадачиНеВыполнены = Справочники.Задачи.ЗадачиНеВыполнены(СписокЗадач);
			МассивЗамещаемых = ТаблицаЗадач.ВыгрузитьКолонку("Замещаемый");
			МассивЗамещаемых = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЗамещаемых);
			СписокЗамещаемых = Новый СписокЗначений;
			СписокЗамещаемых.ЗагрузитьЗначения(МассивЗамещаемых);
			АдресТаблицыЗадач = ПоместитьВоВременноеХранилище(ТаблицаЗадач);
			// Вывод результата.
			РезультатФункции.Вставить("ЗадачиНеВыполнены", ЗадачиНеВыполнены);
			РезультатФункции.Вставить("СписокСсылок", СписокСсылок);
			РезультатФункции.Вставить("СписокЗадач", СписокЗадач);
			РезультатФункции.Вставить("ЭтоДопСогласование", ЭтоДопСогласование);		
			РезультатФункции.Вставить("ЗадачиРазнородные", ЗадачиРазнородные);		
			РезультатФункции.Вставить("ТипЗадачи", ТипЗадачи);		
			РезультатФункции.Вставить("ТребуетсяВыполнение", ТребуетсяВыполнение);		
			РезультатФункции.Вставить("АдресТаблицыЗадач", АдресТаблицыЗадач);		
			РезультатФункции.Вставить("СписокЗамещаемых", СписокЗамещаемых);		
		ИначеЕсли ТипЗнч(ПервыйЭлементЗначение) = Тип("РегистрСведенийКлючЗаписи.ОтложеннаяОбработкаЭтаповПроцессов") Тогда
			// Получим массив задач в списке.
			СписокСсылок = Новый СписокЗначений;
			СписокЗадач = Новый СписокЗначений;
			ЭтоСогласование = Истина;
			ЭтоДопСогласование = Ложь;
			ВидДействияДопСогласование = Перечисления.СобытияОтложеннойОбработкиПроцессов.ДополнительноеСогласованиеЭтапа;
			ТипЗадачи = Неопределено;
			ЗадачиРазнородные = Ложь;
			Для Каждого ТекСписокКлючей Из СписокКлючей Цикл
				ТекСписокКлючейЗначение = ТекСписокКлючей.Значение;
				СписокСсылок.Добавить(ТекСписокКлючейЗначение.ДокументПроцесса.КлючевойОбъектПроцесса);
				ТекЭтап = ТекСписокКлючейЗначение.ЭтапПроцесса;
				ЕстьДокументПроцесса = ЗначениеЗаполнено(ТекСписокКлючейЗначение.ДокументПроцесса);
				Если (ЕстьДокументПроцесса) И (ТекСписокКлючейЗначение.ВидДействия = ВидДействияДопСогласование) Тогда
					ЭтоДопСогласование = Истина;
				Иначе
					// Выполняем далее.
				КонецЕсли;
				// Получение типа задачи.
				ТипЗадачиРабочий = Неопределено;
				Если ЗначениеЗаполнено(ТекЭтап) Тогда
					ЭтоРучнойПереход	 = (ТекЭтап.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход);
					ЭтоУсловныйПереход	 = (ТекЭтап.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.УсловныйПереход);
					ЭтоСогласование		 = (ТекЭтап.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования);
					ЭтоОбработка		 = (ТекЭтап.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Обработка);
					Если ЭтоРучнойПереход ИЛИ ЭтоУсловныйПереход Тогда
						ТипЗадачиРабочий = Справочники.ВидыСобытийОповещений.ТребуетсяВыборЭтапа;
					ИначеЕсли ЭтоСогласование Тогда
						ТипЗадачиРабочий = Справочники.ВидыСобытийОповещений.ТребуетсяСогласование;
					ИначеЕсли ЭтоОбработка Тогда
						ТипЗадачиРабочий = Справочники.ВидыСобытийОповещений.ТребуетсяОбработка;
					Иначе
						ТекстСообщения = НСтр("ru = 'Неизвестный тип этапа %ТипЭтапа%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТипЭтапа%", Строка(ТекЭтап.ТипЭтапа));
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
						ТипЗадачиРабочий = Неопределено;
					КонецЕсли;
				Иначе
					ТипЗадачиРабочий = Неопределено;
				КонецЕсли;
				Если ТипЗадачи = Неопределено Тогда
					ТипЗадачи = ТипЗадачиРабочий;
				Иначе 
					Если ТипЗадачи <> ТипЗадачиРабочий Тогда
						ЗадачиРазнородные =  Истина; 
					Иначе
						// Такая же задача. Оставляем тип.
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			МассивЗадач = ПолучитьЗадачиПользователяПоОбъекту(СписокСсылок.ВыгрузитьЗначения());
			СписокЗадач.ЗагрузитьЗначения(МассивЗадач);
			ЗадачиНеВыполнены = Справочники.Задачи.ЗадачиНеВыполнены(СписокЗадач);
			СписокЗамещаемых = Новый СписокЗначений;	
			// Вывод результата.
			РезультатФункции.Вставить("ЗадачиНеВыполнены", ЗадачиНеВыполнены);
			РезультатФункции.Вставить("СписокСсылок", СписокСсылок);
			РезультатФункции.Вставить("СписокЗадач", СписокЗадач);
			РезультатФункции.Вставить("ЭтоДопСогласование", ЭтоДопСогласование);
			РезультатФункции.Вставить("ЗадачиРазнородные", ЗадачиРазнородные);		
			РезультатФункции.Вставить("ТипЗадачи", ТипЗадачи);	// Т.к. на эти закладки попадают только задачи согласования.
			РезультатФункции.Вставить("ТребуетсяВыполнение", Истина);	
			РезультатФункции.Вставить("АдресТаблицыЗадач", "");	
			РезультатФункции.Вставить("СписокЗамещаемых", СписокЗамещаемых);	
		Иначе
			// Неизвестный вариант ключа.
			ТекстОшибки = Нстр("ru = 'Неизвестный вариант записи таблицы: %СтрокаЗаписи%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СтрокаЗаписи%", Строка(ПервыйЭлементЗначение));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
			РезультатФункции = ИнициироватьСтруктуруСсылокПоКлючам()
		КонецЕсли;
	КонецЕсли;
	// Пост-обработка и вывод результатов.
	СверткаСпискаСсылок = ОбщегоНазначенияКлиентСерверУХ.СвернутьСписокЗначений(РезультатФункции.СписокСсылок);
	СверткаСписокЗадач = ОбщегоНазначенияКлиентСерверУХ.СвернутьСписокЗначений(РезультатФункции.СписокЗадач);
	РезультатФункции.Вставить("СписокСсылок", СверткаСпискаСсылок);
	РезультатФункции.Вставить("СписокЗадач", СверткаСписокЗадач);
	Возврат РезультатФункции;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСвязанныйОбъектЗадачи(ЗадачаВход)
	Возврат ЗадачаВход.СвязанныйОбъект;
КонецФункции

// Определяет, что задача ЗадачаВход уже была выполнена.
&НаСервереБезКонтекста
Функция ЗадачаВыполненаРанее(ЗадачаВход)
	СписокЗадач = Новый СписокЗначений;
	СписокЗадач.Добавить(ЗадачаВход);
	РезультатФункции = НЕ Справочники.Задачи.ЗадачиНеВыполнены(СписокЗадач);
	Возврат РезультатФункции;
КонецФункции

// Возвращает, разрешена ли команда дополнительного согласования.
&НаСервереБезКонтекста
Функция ОпределитьДоступностьКомандыДополнительногоСогласования(СписокЗадачВход, ПользовательВход)
	РезультатФункции = Ложь;
	НесколькоЗадач = (СписокЗадачВход.Количество() > 1);
	Если НесколькоЗадач Тогда 
		Возврат Ложь;
	Иначе	
		ТаблицаДопСогласования = МодульСогласованияДокументовУХ.ПолучитьТаблицуДополнительногоСогласования(СписокЗадачВход, ПользовательВход);
		Если ТаблицаДопСогласования.Количество()>0 Тогда
			Если ТаблицаДопСогласования[0].ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход Тогда
				 Возврат Ложь;
			Иначе	 
				 Возврат Истина;
			КонецЕсли;	
		Иначе 	
			Возврат Ложь;	
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Возвращает структуру, содержащую флаги доступностей команд формы по 
// структуре ключей СтруктураКлючейВход.
&НаСервереБезКонтекста
Функция ВернутьСтруктуруДоступностиКоманд(СтруктураКлючейВход, ИмяТекущейТаблицыВход)
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ДоступностьСогласованиеДокумента", Истина);
	РезультатФункции.Вставить("ДоступностьМаршрутСогласования", Истина);
	РезультатФункции.Вставить("ДоступностьИсторияСогласования", Истина);
	РезультатФункции.Вставить("ДоступностьДополнительноеСогласование", Истина);
	Если СтруктураКлючейВход.Количество() > 0 Тогда
		// Вспомогательная логика.
		ТекПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
		ВыбранаЗакладкаОповещений = (ИмяТекущейТаблицыВход = "ТекущиеОповещенияСписок");
		ЭтоЗадачаВыборЭтапа		 = (СтруктураКлючейВход.ТипЗадачи = Справочники.ВидыСобытийОповещений.ТребуетсяВыборЭтапа);
		ЭтоЗадачаСогласование	 = (СтруктураКлючейВход.ТипЗадачи = Справочники.ВидыСобытийОповещений.ТребуетсяСогласование);
		ЭтоЗадачаОбработки		 = (СтруктураКлючейВход.ТипЗадачи = Справочники.ВидыСобытийОповещений.ТребуетсяОбработка);
		РежимСогласования = (ЭтоЗадачаВыборЭтапа) ИЛИ (ЭтоЗадачаСогласование) ИЛИ (ЭтоЗадачаОбработки) ИЛИ (НЕ ВыбранаЗакладкаОповещений);
		НесколькоЗадач = (СтруктураКлючейВход.СписокЗадач.Количество() > 1);
		// Вычисление доступности команд.  
		ДоступностьКомандыЗавершенияЗадачи		 = ОпределитьДоступностьКомандыЗавершенияЗадачи(СтруктураКлючейВход, ИмяТекущейТаблицыВход);
		ДоступностьМаршрутСогласования			 = (РежимСогласования) И (НЕ НесколькоЗадач);
		ДоступностьИсторияСогласования			 = (РежимСогласования) И (НЕ НесколькоЗадач);
		ДоступностьДополнительноеСогласование	 = ОпределитьДоступностьКомандыДополнительногоСогласования(СтруктураКлючейВход.СписокЗадач, ТекПользователь);
		// Вывод результата в структуру.
		РезультатФункции.Вставить("ДоступностьСогласованиеДокумента", ДоступностьКомандыЗавершенияЗадачи);
		РезультатФункции.Вставить("ДоступностьМаршрутСогласования", ДоступностьМаршрутСогласования);
		РезультатФункции.Вставить("ДоступностьИсторияСогласования", ДоступностьИсторияСогласования);
		РезультатФункции.Вставить("ДоступностьДополнительноеСогласование", ДоступностьДополнительноеСогласование);
	Иначе
		РезультатФункции.Вставить("ДоступностьСогласованиеДокумента", Истина);
		РезультатФункции.Вставить("ДоступностьМаршрутСогласования", Истина);
		РезультатФункции.Вставить("ДоступностьИсторияСогласования", Истина);
		РезультатФункции.Вставить("ДоступностьДополнительноеСогласование", Истина);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Возвращает количество согласующих по этапу ЭтапПроцессаВход
// экземпляра процесса ДокументПроцессаВход.
&НаСервереБезКонтекста
Функция ПолучитьКоличествоДопСогласующих(ДокументПроцессаВход, ЭтапПроцессаВход)
	ТаблицаДопСогласующих = МодульСогласованияДокументовУХ.ПолучитьТаблицуДопСогласующихПоЭтапу(ДокументПроцессаВход, ЭтапПроцессаВход);
	РезультатФункции = ТаблицаДопСогласующих.Количество();
	Возврат РезультатФункции;
КонецФункции

// Выставляет текст на команде Дополнительное согласование.
&НаКлиенте
Функция УстановитьТекстКомандыДополнительноеСогласование(ЗадачаВход, ПользовательВход)
	СтруктураСогласованияСтроки = МодульСогласованияДокументовУХ.ПолучитьСтруктуруСогласованияСтроки(ЗадачаВход, ПользовательВход);
	КоличествоДопСогласующих = ПолучитьКоличествоДопСогласующих(СтруктураСогласованияСтроки.ДокументПроцесса, СтруктураСогласованияСтроки.ЭтапПроцесса);
	Если КоличествоДопСогласующих > 0 Тогда
		
		СтрокаШаблона = Нстр("ru = 'Дополнительные согласующие (%1)'");
		
		ТекстЗаголовка = "";
		Если Не ПустаяСтрока(СтрокаШаблона) тогда				
			ТекстЗаголовка = СтрШаблон(СтрокаШаблона, Строка(КоличествоДопСогласующих));
		КонецЕсли;
		
		Элементы.ФормаДополнительноеСогласование.Заголовок = ТекстЗаголовка; 
	Иначе
		Элементы.ФормаДополнительноеСогласование.Заголовок = НСтр("ru = 'Дополнительные согласующие'");
	КонецЕсли;
	Возврат КоличествоДопСогласующих;
КонецФункции

// Обработка при активизации строки оповещения. Возвращает структуру доступности команд.
&НаКлиенте
Функция ПриАктививизацииОповещения_Клиент(ЗадачаВход, ПользовательВход, СтруктураПоКлючам)
	// Доступность команд.
	СтруктураДоступностиКоманд = ВернутьСтруктуруДоступностиКоманд(СтруктураПоКлючам, ИмяТекущейТаблицы);
	// Текст команды Дополнительное согласование.
	УстановитьТекстКомандыДополнительноеСогласование(ЗадачаВход, ПользовательВход);
	Возврат СтруктураДоступностиКоманд;
КонецФункции

// Получает структуру ключей по текущим выделенным оповещениям.
&НаКлиенте
Функция ПолучитьСтруктуруКлючейПоВыделеннымСтрокам()
	РезультатФункции = ИнициироватьСтруктуруСсылокПоКлючам();
	ВыделенныеСтроки = Элементы[ИмяТекущейТаблицы].ВыделенныеСтроки;
	СписокКлючей = Новый СписокЗначений;
	Для Каждого ТекВыделенныеСтроки Из ВыделенныеСтроки Цикл
		СписокКлючей.Добавить(ТекВыделенныеСтроки);
	КонецЦикла;
	РезультатФункции = ВернутьСтруктуруСсылокПоКлючам(СписокКлючей);
	Возврат РезультатФункции;	
КонецФункции

// Выполняет открытие необходимых форм по структуре ссылок задач СтруктураСсылок.
&НаКлиенте
Процедура ОткрытьЗадачиПоСтруктуреСсылок(СтруктураСсылок)
	Оповещение = Новый ОписаниеОповещения("СогласоватьЗавершение", ЭтаФорма);
	СписокСсылок = СтруктураСсылок.СписокСсылок;
	СписокЗадач = СтруктураСсылок.СписокЗадач;
	СписокЗамещаемых = СтруктураСсылок.СписокЗамещаемых;
	Если (СтруктураСсылок.ТребуетсяВыполнение) И (НЕ СтруктураСсылок.ЗадачиРазнородные) Тогда
		Если СписокСсылок.Количество() = 0 Тогда        // Среди выбранных строк нет ссылок. Завершаем работу
			Возврат;									
		ИначеЕсли (СписокСсылок.Количество() = 1) И (СписокЗадач.Количество() = 1) И (СписокЗамещаемых.Количество() <= 1) Тогда			// Есть одна ссылка. Откроем форму в режиме одного объекта.
			Если СтруктураСсылок.ТипЗадачи = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ТребуетсяСогласование") Тогда
				СтруктураПараметров = Новый Структура;		
				СтруктураПараметров.Вставить("СогласовываемыйДокумент", СписокСсылок[0].Значение);
				СтруктураПараметров.Вставить("ДопСогласование", СтруктураСсылок.ЭтоДопСогласование);
				СтруктураПараметров.Вставить("СписокЗадач", СтруктураСсылок.СписокЗадач);
				СтруктураПараметров.Вставить("АдресТаблицыЗадач", СтруктураСсылок.АдресТаблицыЗадач);
				ОткрытьФорму("ОбщаяФорма.КомментарийИСогласование", СтруктураПараметров, ЭтаФорма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			ИначеЕсли СтруктураСсылок.ТипЗадачи = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ТребуетсяВыборЭтапа") Тогда
				СтруктураПараметров = Новый Структура;		
				СтруктураПараметров.Вставить("СписокЗадач", СписокЗадач);
				ОткрытьФорму("Справочник.Задачи.Форма.ФормаВыбораЭтапаРучногоПерехода", СтруктураПараметров, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			ИначеЕсли СтруктураСсылок.ТипЗадачи = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ТребуетсяОбработка") Тогда	
				СтруктураПараметров = Новый Структура;		
				СтруктураПараметров.Вставить("СписокЗадач", СписокЗадач);
				ОткрытьФорму("Справочник.Задачи.Форма.ФормаЗавершенияЗадачи", СтруктураПараметров, ЭтаФорма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Иначе
				СтруктураПараметров = Новый Структура;		
				СтруктураПараметров.Вставить("СписокЗадач", СписокЗадач);
				ОткрытьФорму("Справочник.Задачи.Форма.ФормаЗавершенияЗадачи", СтруктураПараметров, ЭтаФорма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
		Иначе											// Более одной ссылки. Откроем форму в групповом режиме.
			Если СтруктураСсылок.ТипЗадачи = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ТребуетсяСогласование") Тогда
				СтруктураПараметров = Новый Структура;		
				СтруктураПараметров.Вставить("СогласовываемыйДокумент", Неопределено);
				СтруктураПараметров.Вставить("ПакетДокументов", СписокСсылок);
				СтруктураПараметров.Вставить("СписокЗадач", СтруктураСсылок.СписокЗадач);
				СтруктураПараметров.Вставить("АдресТаблицыЗадач", СтруктураСсылок.АдресТаблицыЗадач);
				ОткрытьФорму("ОбщаяФорма.КомментарийИСогласование", СтруктураПараметров, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			ИначеЕсли СтруктураСсылок.ТипЗадачи = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ТребуетсяВыборЭтапа") Тогда
				ТекстСообщения = НСтр("ru = 'Запрещено выбирать этап для нескольких задач одновременно'");
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			ИначеЕсли СтруктураСсылок.ТипЗадачи = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ТребуетсяОбработка") Тогда	
				СтруктураПараметров = Новый Структура;		
				СтруктураПараметров.Вставить("СписокЗадач", СписокЗадач);
				ОткрытьФорму("Справочник.Задачи.Форма.ФормаЗавершенияЗадачи", СтруктураПараметров, ЭтаФорма, , , , Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Иначе
				СтруктураПараметров = Новый Структура;		
				СтруктураПараметров.Вставить("СписокЗадач", СписокЗадач);
				ОткрытьФорму("Справочник.Задачи.Форма.ФормаЗавершенияЗадачи", СтруктураПараметров, ЭтаФорма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Не требуется выполнять эту задачу.
	КонецЕсли;
КонецПроцедуры

// Возвращает признак доступности для команды завершения задачи по структуре ключей СтруктураКлючейВход.
&НаСервереБезКонтекста
Функция ОпределитьДоступностьКомандыЗавершенияЗадачи(СтруктураКлючейВход, ИмяТекущейТаблицыВход)
	РезультатФункции = Ложь;
	Если ИмяТекущейТаблицыВход = "ТекущиеОповещенияСписок" Тогда
		// Определим доступность согласно структуре.
		Если СтруктураКлючейВход.Количество() > 0 Тогда
			ЕстьЗадачи = (СтруктураКлючейВход.СписокЗадач.Количество() > 0);
			РезультатФункции = (ЕстьЗадачи) И (СтруктураКлючейВход.ТребуетсяВыполнение) И (НЕ СтруктураКлючейВход.ЗадачиРазнородные);
		Иначе
			РезультатФункции = Истина;
		КонецЕсли;
	Иначе
		РезультатФункции = Истина;			// Вкладка с задачей. Разрешаем команду завершения.
	КонецЕсли;
	Возврат РезультатФункции;	
КонецФункции

Процедура ОбновитьОтображение()
	текПользователи.Очистить();
	текПользователи.Добавить(ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
	МодульУправленияПроцессамиУХ.ПолучитьЗамещаемых(ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"),текПользователи);
	ЗапросОбъекты = Новый Запрос;
	ЗапросОбъекты.Текст =  "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СправочникиБД.Наименование
	|ИЗ
	|	Справочник.СправочникиБД КАК СправочникиБД
	|ГДЕ
	|	СправочникиБД.Согласуется = ИСТИНА
	|	И СправочникиБД.Владелец = &Владелец
	|	И НЕ СправочникиБД.Наименование ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыБД.Наименование
	|ИЗ
	|	Справочник.ДокументыБД КАК ДокументыБД
	|ГДЕ
	|	ДокументыБД.Владелец = &Владелец
	|	И ДокументыБД.Согласуется = ИСТИНА
	|	И НЕ ДокументыБД.Наименование ЕСТЬ NULL ";
	ЗапросОбъекты.УстановитьПараметр("Владелец",Справочники.ТипыБазДанных.ТекущаяИБ);
	ТзОбъекты = ЗапросОбъекты.Выполнить().Выгрузить();
	Для Каждого тОбъект Из ТзОбъекты Цикл
		Попытка 
			Если ЗначениеЗаполнено(тОбъект) Тогда
				Если Элементы.Найти(тОбъект.Наименование) <> Неопределено Тогда
					Элементы[тОбъект.Наименование].Видимость = Ложь;
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;	
	Элементы.ВерсииСоглашения.Видимость = Ложь;		
	ЗапросОбъекты = Новый Запрос;
	ЗапросОбъекты.Текст =  
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗадачиУниверсальныхПроцессов.ДокументПроцесса.ТипКлючевогоОбъекта.Наименование КАК ТипОбъекта
	|ИЗ
	|	РегистрСведений.ОтложеннаяОбработкаЭтаповПроцессов КАК ЗадачиУниверсальныхПроцессов
	|ГДЕ
	|	ЗадачиУниверсальныхПроцессов.Ответственный В(&Ответственный)
	|	И НЕ ЗадачиУниверсальныхПроцессов.ДокументПроцесса.ТипКлючевогоОбъекта.Наименование ЕСТЬ NULL 
	|	И ЗадачиУниверсальныхПроцессов.Задача <> ЗНАЧЕНИЕ(Справочник.Задачи.ПустаяСсылка)
	|	И ЗадачиУниверсальныхПроцессов.Выполнено = ЛОЖЬ
	|	И ЗадачиУниверсальныхПроцессов.ВидДействия В (ЗНАЧЕНИЕ(Перечисление.СобытияОтложеннойОбработкиПроцессов.ОбработкаЭтапаСогласования), ЗНАЧЕНИЕ(Перечисление.СобытияОтложеннойОбработкиПроцессов.ДополнительноеСогласованиеЭтапа))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗадачиУниверсальныхПроцессов.ТипКлючевогоОбъекта.Наименование
	|ИЗ
	|	РегистрСведений.ОтложеннаяОбработкаЭтаповПроцессов КАК ЗадачиУниверсальныхПроцессов
	|ГДЕ
	|	ЗадачиУниверсальныхПроцессов.Ответственный В(&Ответственный)
	|	И НЕ ЗадачиУниверсальныхПроцессов.ТипКлючевогоОбъекта.Наименование ЕСТЬ NULL 
	|	И ЗадачиУниверсальныхПроцессов.Задача <> ЗНАЧЕНИЕ(Справочник.Задачи.ПустаяСсылка)
	|	И ЗадачиУниверсальныхПроцессов.Выполнено = ЛОЖЬ
	|	И ЗадачиУниверсальныхПроцессов.ВидДействия В (ЗНАЧЕНИЕ(Перечисление.СобытияОтложеннойОбработкиПроцессов.ОбработкаЭтапаСогласования), ЗНАЧЕНИЕ(Перечисление.СобытияОтложеннойОбработкиПроцессов.ДополнительноеСогласованиеЭтапа))";
	ЗапросОбъекты.УстановитьПараметр("Ответственный",текПользователи);
	ТзОбъекты = ЗапросОбъекты.Выполнить().Выгрузить();		
	ОбновитьОтображениеЗакладокПоТаблицеОбъектов(ТзОбъекты);
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура УстановитьПометкуПрочитано(КлючЗаписи,ПризнакПрочитано=Неопределено)
	Если ЗначениеЗаполнено(КлючЗаписи) Тогда
		НачатьТранзакцию();
		ЕстьОшибки = Ложь;
		Попытка 
			// Установка управляемой блокировки.
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОповещенияПользователей");
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторОповещения", КлючЗаписи.ИдентификаторОповещения);
			БлокировкаДанных.Заблокировать();
			// Установка реквизита Прочитано.
			Набор = РегистрыСВедений.ОповещенияПользователей.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Набор,КлючЗаписи);
			Набор.Прочитать();
			Если ПризнакПрочитано=Неопределено Тогда
				Набор.Прочитано = НЕ Набор.Прочитано;
			Иначе
				Набор.Прочитано = ПризнакПрочитано;
			КонецЕсли;
			Набор.Записать();
		Исключение
			ЕстьОшибки = Истина;
		КонецПопытки;
		// Обработка транзакции.
		Если ЕстьОшибки Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	Иначе
		// Оповещения нет. Не устанавливаем свойство.
	КонецЕсли;
КонецПроцедуры	

// Выставляет для записи регистра ОповещенияПользователей с ключом КлючЗаписи 
// флажок с цветом ЦветФлажкаВход.
Процедура УстановитьФлажокВСтроке(КлючЗаписи, ЦветФлажкаВход)
	Набор = РегистрыСВедений.ОповещенияПользователей.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Набор,КлючЗаписи);
	Набор.Прочитать();
	Набор.Флажок = ЦветФлажкаВход;
	Набор.Записать();
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьФорматированныйДокументПоСообщению(СообщениеВход)
	НовыйФорматированныйДокумент = Новый ФорматированныйДокумент;
	НовыйФорматированныйДокумент.УстановитьHTML(СообщениеВход, Новый Структура());
	Возврат НовыйФорматированныйДокумент;
КонецФункции

// Отображает HTML-представление оповещения из ТекущиеДанныеВход.
&НаКлиенте
Функция ОтобразитьСодержимоеТекущегоОповещения(ТекущиеДанныеВход)	
	Если ТекущиеДанныеВход <> Неопределено Тогда
		ОтобразитьСодержимоеHTML(Элементы.ТекущиеОповещенияСписок.ТекущаяСтрока, СодержаниеОповещения);
		Если Не ТекущиеДанныеВход.Прочитано Тогда
			УстановитьПометкуПрочитано(Элементы.ТекущиеОповещенияСписок.ТекущаяСтрока,Истина);
			Элементы.ТекущиеОповещенияСписок.Обновить();
		КонецЕсли;
	Иначе
		ОтобразитьСодержимоеHTML(, СодержаниеОповещения);
	КонецЕсли;
КонецФункции
	
&НаКлиенте
Процедура ОтобразитьСодержимоеHTML(КлючЗаписи = Неопределено, СодержаниеОповещенияВход)
	Если КлючЗаписи = Неопределено Тогда
		 Сообщение = "";
	Иначе	 
		 Сообщение = ПолучитьТекстОповещения(КлючЗаписи);	
	КонецЕсли;	
	Если СтрНайти(НРег(Сообщение), "<body>") = 0 Тогда
		Сообщение = ВернутьТекстПисьмаВФорматеHTML(Сообщение);
	Иначе
		// HTML уже отформатирован. Не добавляем разметку дополнительно.
	КонецЕсли;
	НовыйФорматированныйДокумент = ПолучитьФорматированныйДокументПоСообщению(Сообщение);
	СодержаниеОповещенияВход = НовыйФорматированныйДокумент;
	ТекущееОповещение = Сообщение;
КонецПроцедуры	

&НаСервереБезКонтекста 
Функция ПолучитьТекстОповещения(КлючЗаписи)
	РезультатФункции = "";
	Если ЗначениеЗаполнено(КлючЗаписи) Тогда
		НачатьТранзакцию();
		Попытка 
			// Установка управляемой блокировки.
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОповещенияПользователей");
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторОповещения", КлючЗаписи.ИдентификаторОповещения);
			БлокировкаДанных.Заблокировать();
			
			Набор = РегистрыСВедений.ОповещенияПользователей.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Набор,КлючЗаписи);
			Набор.Прочитать();	
			РезультатФункции = Набор.Сообщение;
		Исключение
			РезультатФункции = "";
		КонецПопытки;
		ЗафиксироватьТранзакцию();
	Иначе
		// Оповещения нет. Не устанавливаем свойство.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура ДоступностьКомандФлажков()
	ЭтоСтраницаОповещений = (ИмяТекущейТаблицы = "ТекущиеОповещенияСписок");
	Элементы.ТекущиеОповещенияСписокУстановитьФлажокТекущегоЦвета.Доступность	 = ЭтоСтраницаОповещений;
	Элементы.ТекущиеОповещенияСписокГруппаОтборПоФлажкам.Доступность			 = ЭтоСтраницаОповещений;
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеФормы()
	ОбновитьОтображение();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимСогласования(ДанныеСобытияВход, СтруктураПараметровВход)
	СтруктураПараметровВход.Вставить("ИдентификаторЭлемента", "");
	// Получим имя элемента по id-аттрибуту.
	Попытка 
		ИмяЭлемента = "";
		ИдентификаторЭлемента = ДанныеСобытияВход.Element.id;
		СтруктураПараметровВход.Вставить("ИдентификаторЭлемента", ИдентификаторЭлемента);
		Если СокрЛП(ИдентификаторЭлемента) = "cpm_accept" Тогда
			ИмяЭлемента = "Утвердить";
		ИначеЕсли СокрЛП(ИдентификаторЭлемента) = "cpm_decline" Тогда
			ИмяЭлемента = "Отклонить";
		ИначеЕсли СокрЛП(ИдентификаторЭлемента) = "cpm_stepback" Тогда
			ИмяЭлемента = "НаШагНазад";
		Иначе
			ИмяЭлемента = "";
		КонецЕсли;
	Исключение
		ИмяЭлемента = "";
	КонецПопытки;
	// Установим параметр в структуру.
	Если СокрЛП(ИмяЭлемента) = "Утвердить" Тогда
		СтруктураПараметровВход.Вставить("РежимСогласования", "Утверждение");
	ИначеЕсли СокрЛП(ИмяЭлемента) = "Отклонить" Тогда
		СтруктураПараметровВход.Вставить("РежимСогласования", "Отклонение");
	ИначеЕсли СокрЛП(ИмяЭлемента) = "НаШагНазад" Тогда
		СтруктураПараметровВход.Вставить("РежимСогласования", "НаШагНазад");
	Иначе
		СтруктураПараметровВход.Вставить("РежимСогласования", "");
	КонецЕсли;
КонецПроцедуры

// Добавляет данные в структуру, которая будет передана в форму согласования для 
// задачи ЗадачаВход по данным события выбора ДанныеСобытияВход.
&НаСервере
Процедура ДополнитьСтруктуруПараметровФормыСогласования(ЗадачаВход, СтруктураПараметров)
	// Параметр СогласовываемыйДокумент.
	СвязанныйОбъект = ПолучитьСвязанныйОбъектЗадачи(ЗадачаВход);
	СтруктураПараметров.Вставить("СогласовываемыйДокумент", СвязанныйОбъект);
	// Параметр ДопСогласование.
	ДопСогласование = МодульСогласованияДокументовУХ.ЭтоЗадачаДопСогласования(ЗадачаВход);
	СтруктураПараметров.Вставить("ДопСогласование", ДопСогласование);
	// Параметр СписокЗадач.
	СписокЗадач = Новый СписокЗначений;
	СписокЗадач.Добавить(ЗадачаВход);   
	СтруктураПараметров.Вставить("СписокЗадач",СписокЗадач);
	// Параметр ТипЭтапа.
	ТаблицаПараметровЗадач = Справочники.Задачи.ПолучитьТаблицуПараметровЗадач(СписокЗадач);
	КопияТаблицаПараметров = ТаблицаПараметровЗадач.Скопировать();
	КопияТаблицаПараметров.Свернуть("ЭтапПроцесса");
	ЭтапыПроцесса = КопияТаблицаПараметров.ВыгрузитьКолонку("ЭтапПроцесса");
	Если ЭтапыПроцесса.Количество() = 1 Тогда
		ЭтапЗадачи = ЭтапыПроцесса[0];
		Если ЗначениеЗаполнено(ЭтапЗадачи) Тогда
			СтруктураПараметров.Вставить("ТипЭтапа", ЭтапЗадачи.ТипЭтапа);
		Иначе
			СтруктураПараметров.Вставить("ТипЭтапа", Перечисления.ТипыЭтаповУниверсальныхПроцессов.ПустаяСсылка());
		КонецЕсли;
	Иначе	
		СтруктураПараметров.Вставить("ТипЭтапа", Перечисления.ТипыЭтаповУниверсальныхПроцессов.ПустаяСсылка());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТекущиеОповещения1СообщениеПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	// Обработаем отдельно навигационные ссылки.
	ТекстСсылки = ДанныеСобытия.href;
	ЗначениеСсылкиОбъект = ОбщегоНазначенияУХ.СсылкаНаОбъектИзНавигационнойСсылки(СокрЛП(ТекстСсылки));
	Если ЗначениеСсылкиОбъект <> Неопределено Тогда
		Если ЗначениеЗаполнено(ЗначениеСсылкиОбъект) Тогда
			СтандартнаяОбработка = Ложь;
			Если ТипЗнч(ЗначениеСсылкиОбъект) = Тип("СправочникСсылка.Задачи") Тогда
				Если НЕ ЗадачаВыполненаРанее(ЗначениеСсылкиОбъект) Тогда
					СтруктураПараметров = Новый Структура;
					УстановитьРежимСогласования(ДанныеСобытия, СтруктураПараметров);								// Т.к. COM-объект нельзя передать на сервер, обработаем Режим согласования на клиенте.
					ДополнитьСтруктуруПараметровФормыСогласования(ЗначениеСсылкиОбъект, СтруктураПараметров);		// Прочие параметры получим на сервере.
					Если СтруктураПараметров.ТипЭтапа = ПредопределенноеЗначение("Перечисление.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования") Тогда
						ОткрытьФорму("ОбщаяФорма.КомментарийИСогласование", СтруктураПараметров, , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					ИначеЕсли СтруктураПараметров.ТипЭтапа = ПредопределенноеЗначение("Перечисление.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход") Тогда
						ОткрытьФорму("Справочник.Задачи.Форма.ФормаВыбораЭтапаРучногоПерехода", СтруктураПараметров, , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					ИначеЕсли СтруктураПараметров.ТипЭтапа = ПредопределенноеЗначение("Перечисление.ТипыЭтаповУниверсальныхПроцессов.УсловныйПереход") Тогда
						ОткрытьФорму("Справочник.Задачи.Форма.ФормаВыбораЭтапаРучногоПерехода", СтруктураПараметров, , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					Иначе
						ОткрытьФорму("Справочник.Задачи.Форма.ФормаЗавершенияЗадачи", СтруктураПараметров, , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					КонецЕсли;
				Иначе
					ТекстСообщения = НСтр("ru = 'Задачи были выполнены ранее.'");
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
					ОбновитьОтображение();
					Возврат;
				КонецЕсли;
			Иначе
				Попытка
					ПерейтиПоНавигационнойСсылке(ТекстСсылки);
				Исключение
					ПоказатьЗначение(, ЗначениеСсылкиОбъект);
				КонецПопытки;
			КонецЕсли;
		Иначе
			// Пустое значение. Не переходим.	
		КонецЕсли;
	Иначе
		// Это не навигационная ссылка. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если СокрЛП(ИмяСобытия) = "ОбновитьМоиЗадачиИОповещения" Тогда
		ОбновитьОтображение();
	Иначе
		// Неизвестное событие. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрекратитьОповещения(Команда)
КонецПроцедуры

// По цвету флажка возвращает картинку для его отображения.
&НаКлиенте
Функция ПолучитьКартинкуФлажка(ЦветФлажкаВход)
	РезультатФункции = Новый Картинка;
	Если ЦветТекущегоФлажка = ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Красный") Тогда
		РезультатФункции = БиблиотекаКартинок.ЗвездаКрасная;
	ИначеЕсли ЦветТекущегоФлажка = ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Синий") Тогда
		РезультатФункции = БиблиотекаКартинок.ЗвездаСиняя;	
	ИначеЕсли ЦветТекущегоФлажка = ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Желтый") Тогда
		РезультатФункции = БиблиотекаКартинок.ЗвездаЖелтая;	
	ИначеЕсли ЦветТекущегоФлажка = ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Зеленый") Тогда
		РезультатФункции = БиблиотекаКартинок.ЗвездаЗеленая;	
	ИначеЕсли ЦветТекущегоФлажка = ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Оранжевый") Тогда
		РезультатФункции = БиблиотекаКартинок.ЗвездаОранжевая;	
	ИначеЕсли ЦветТекущегоФлажка = ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Лиловый") Тогда
		РезультатФункции = БиблиотекаКартинок.ЗвездаЛиловая;	
	ИначеЕсли ЦветТекущегоФлажка = ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Серый") Тогда
		РезультатФункции = БиблиотекаКартинок.ЗвездаСерая;	
	Иначе
		РезультатФункции = Новый Картинка;
	КонецЕсли;	
	Возврат РезультатФункции;
КонецФункции

// Устанавливает в списке Мои оповещения отбор по флажкам переданного цвета.
&НаКлиенте
Процедура УстановитьОтборПоФлажку(ЦветФлажкаВход)
	ОтборСписка = МоиОповещения.Отбор.Элементы;
	ПолеКомпоновкиФлажок = Новый ПолеКомпоновкиДанных("Флажок");
	ЭлементОтбораСписка = Неопределено;
	Для Каждого ТекОтборСписка Из ОтборСписка Цикл
		Если ТекОтборСписка.ЛевоеЗначение = ПолеКомпоновкиФлажок Тогда
			ЭлементОтбораСписка = ТекОтборСписка;
		Иначе
			Продолжить;			// Выполняем поиск далее.
		КонецЕсли;
	КонецЦикла;
	Если ЭлементОтбораСписка = Неопределено Тогда
		ЭлементОтбораСписка = ОтборСписка.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Иначе
		// Уже есть такой элемент.
	КонецЕсли;
	ЭлементОтбораСписка.ЛевоеЗначение = ПолеКомпоновкиФлажок;
	ЭлементОтбораСписка.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораСписка.Использование = Истина;
	ЭлементОтбораСписка.ПравоеЗначение = ЦветФлажкаВход;
	ТекстФильтра = НСтр("ru = 'Отметки: только %Цвет%'");
	ТекстФильтра = СтрЗаменить(ТекстФильтра, "%Цвет%", Строка(ЦветФлажкаВход));
	Элементы.ТекущиеОповещенияСписокГруппаОтборПоФлажкам.Заголовок = ТекстФильтра;
КонецПроцедуры

// Устанавливает новый цвет текущего флажка и меняет картинку соответственной команды.
&НаКлиенте
Процедура ИзменитьЦветТекущегоФлажка(ЦветВход)
	ЦветТекущегоФлажка = ЦветВход;
	НоваяКартинка = ПолучитьКартинкуФлажка(ЦветТекущегоФлажка);
	Элементы.ТекущиеОповещенияСписокУстановитьФлажокТекущегоЦвета.Картинка = НоваяКартинка;
КонецПроцедуры

// Отображает диалог выбора дополнительных согласующих.
&НаКлиенте
Процедура ВыбратьДополнительныхСогласующих()
	ТекущиеДанные = Элементы[ИмяТекущейТаблицы].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	Иначе
		Если ИмяТекущейТаблицы = "ТекущиеОповещенияСписок" Тогда
			СтруктураСогласованияСтроки = МодульСогласованияДокументовУХ.ПолучитьСтруктуруСогласованияСтроки(ТекущиеДанные.Задача, ТекущиеДанные.Пользователь);
		Иначе
			СтруктураСогласованияСтроки = МодульСогласованияДокументовУХ.ПолучитьСтруктуруСогласованияСтроки(ТекущиеДанные.Задача, ТекущиеДанные.Ответственный);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураСогласованияСтроки.ЭтапПроцесса) И ЗначениеЗаполнено(СтруктураСогласованияСтроки.ДокументПроцесса) Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ЭкземплярПроцесса", СтруктураСогласованияСтроки.ДокументПроцесса);
			СтруктураПараметров.Вставить("ЭтапСогласования", СтруктураСогласованияСтроки.ЭтапПроцесса);
			ОткрытьФорму("Обработка.ДополнительноеСогласование.Форма.Форма", СтруктураПараметров, , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ТекстОшибки = НСтр("ru = 'Не удалось получить параметры дополнительного согласования. Операция отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Получает доступные команды согласования по задаче ЗадачаВход и пользователю ОтветственныйВход 
// и устанавливает доступность.
&НаКлиенте
Процедура УстановитьДоступностьКомандСогласования(ЗадачаВход, ОтветственныйВход)
	СтруктураКлючей = ПолучитьСтруктуруКлючейПоВыделеннымСтрокам();
	СтруктураДоступностиКоманд = ПриАктививизацииОповещения_Клиент(ЗадачаВход, ОтветственныйВход, СтруктураКлючей);
	Элементы.СогласованиеДокумента.Доступность				 = СтруктураДоступностиКоманд.ДоступностьСогласованиеДокумента;    
	Элементы.МаршрутСогласования.Доступность				 = СтруктураДоступностиКоманд.ДоступностьМаршрутСогласования;
	Элементы.ИсторияСогласования.Доступность				 = СтруктураДоступностиКоманд.ДоступностьИсторияСогласования;
	Элементы.ФормаДополнительноеСогласование.Доступность	 = СтруктураДоступностиКоманд.ДоступностьДополнительноеСогласование;
КонецПроцедуры

// Выполняет общие действия при активизации строки на закладках согласования.
&НаКлиенте
Процедура ПриАктивизацииСтрокиЗакладкиСогласования(Элемент)
	Попытка
		Если Элемент.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;	 
		ТекущиеДанные = Элемент.ТекущиеДанные;
		МассивЗадач = ПолучитьЗадачиПользователяПоОбъекту(ТекущиеДанные.Ссылка);
		УстановитьДоступностьКомандСогласования(МассивЗадач, ТекущиеДанные.Ответственный);
	Исключение
		
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИзменитьЦветТекущегоФлажка(ЦветТекущегоФлажка);
	ПодключитьОбработчикОжидания("ОбновлениеФормы", 5*60);		// Обновляем форму полностью каждые 5 минут.
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажокКрасный(Команда)
	ЦветФлажка = ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Красный");
	Для Каждого вСтрока Из Элементы.ТекущиеОповещенияСписок.ВыделенныеСтроки Цикл
		УстановитьФлажокВСтроке(вСтрока, ЦветФлажка);
	КонецЦикла;
	ИзменитьЦветТекущегоФлажка(ЦветФлажка);
	Элементы.ТекущиеОповещенияСписок.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажокСиний(Команда)
	ЦветФлажка = ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Синий");
	Для Каждого вСтрока Из Элементы.ТекущиеОповещенияСписок.ВыделенныеСтроки Цикл
		УстановитьФлажокВСтроке(вСтрока, ЦветФлажка);
	КонецЦикла;
	ИзменитьЦветТекущегоФлажка(ЦветФлажка);
	Элементы.ТекущиеОповещенияСписок.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажокЖелтый(Команда)
	ЦветФлажка = ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Желтый");
	Для Каждого вСтрока Из Элементы.ТекущиеОповещенияСписок.ВыделенныеСтроки Цикл
		УстановитьФлажокВСтроке(вСтрока, ЦветФлажка);
	КонецЦикла;
	ИзменитьЦветТекущегоФлажка(ЦветФлажка);
	Элементы.ТекущиеОповещенияСписок.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажокЗеленый(Команда)
	ЦветФлажка = ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Зеленый");
	Для Каждого вСтрока Из Элементы.ТекущиеОповещенияСписок.ВыделенныеСтроки Цикл
		УстановитьФлажокВСтроке(вСтрока, ЦветФлажка);
	КонецЦикла;
	ИзменитьЦветТекущегоФлажка(ЦветФлажка);
	Элементы.ТекущиеОповещенияСписок.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажокОранжевый(Команда)
	ЦветФлажка = ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Оранжевый");
	Для Каждого вСтрока Из Элементы.ТекущиеОповещенияСписок.ВыделенныеСтроки Цикл
		УстановитьФлажокВСтроке(вСтрока, ЦветФлажка);
	КонецЦикла;
	ИзменитьЦветТекущегоФлажка(ЦветФлажка);
	Элементы.ТекущиеОповещенияСписок.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажокЛиловый(Команда)
	ЦветФлажка = ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Лиловый");
	Для Каждого вСтрока Из Элементы.ТекущиеОповещенияСписок.ВыделенныеСтроки Цикл
		УстановитьФлажокВСтроке(вСтрока, ЦветФлажка);
	КонецЦикла;
	ИзменитьЦветТекущегоФлажка(ЦветФлажка);
	Элементы.ТекущиеОповещенияСписок.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажокСерый(Команда)
	ЦветФлажка = ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Серый");
	Для Каждого вСтрока Из Элементы.ТекущиеОповещенияСписок.ВыделенныеСтроки Цикл
		УстановитьФлажокВСтроке(вСтрока, ЦветФлажка);
	КонецЦикла;
	ИзменитьЦветТекущегоФлажка(ЦветФлажка);
	Элементы.ТекущиеОповещенияСписок.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажок(Команда)
	ЦветФлажка = ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.ПустаяСсылка");
	Для Каждого вСтрока Из Элементы.ТекущиеОповещенияСписок.ВыделенныеСтроки Цикл
		УстановитьФлажокВСтроке(вСтрока, ЦветФлажка);
	КонецЦикла;
	Элементы.ТекущиеОповещенияСписок.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ОтборФлажкиКрасный(Команда)
	ЦветФлажка = ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Красный");
	УстановитьОтборПоФлажку(ЦветФлажка);
КонецПроцедуры

&НаКлиенте
Процедура ОтборФлажкиСиний(Команда)
	ЦветФлажка = ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Синий");
	УстановитьОтборПоФлажку(ЦветФлажка);
КонецПроцедуры

&НаКлиенте
Процедура ОтборФлажкиЖелтый(Команда)
	ЦветФлажка = ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Желтый");
	УстановитьОтборПоФлажку(ЦветФлажка);
КонецПроцедуры

&НаКлиенте
Процедура ОтборФлажкиОранжевый(Команда)
	ЦветФлажка = ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Оранжевый");
	УстановитьОтборПоФлажку(ЦветФлажка);
КонецПроцедуры

&НаКлиенте
Процедура ОтборФлажкиЗеленый(Команда)
	ЦветФлажка = ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Зеленый");
	УстановитьОтборПоФлажку(ЦветФлажка);
КонецПроцедуры

&НаКлиенте
Процедура ОтборФлажкиЛиловый(Команда)
	ЦветФлажка = ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Лиловый");
	УстановитьОтборПоФлажку(ЦветФлажка);
КонецПроцедуры

&НаКлиенте
Процедура ОтборФлажкиСерый(Команда)
	ЦветФлажка = ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Серый");
	УстановитьОтборПоФлажку(ЦветФлажка);
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтборПоФлажкам(Команда)
	ОтборСписка = МоиОповещения.Отбор.Элементы;
	ПолеКомпоновкиФлажок = Новый ПолеКомпоновкиДанных("Флажок");
	Для Каждого ТекОтборСписка Из ОтборСписка Цикл
		Если ТекОтборСписка.ЛевоеЗначение = ПолеКомпоновкиФлажок Тогда
			ТекОтборСписка.Использование = Ложь;
		Иначе
			Продолжить;			// Выполняем поиск далее.
		КонецЕсли;
	КонецЦикла;
	ТекстФильтра = НСтр("ru = 'Фильтр по отметкам'");
	Элементы.ТекущиеОповещенияСписокГруппаОтборПоФлажкам.Заголовок = ТекстФильтра;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажокТекущегоЦвета(Команда)
	Для Каждого вСтрока Из Элементы.ТекущиеОповещенияСписок.ВыделенныеСтроки Цикл
		УстановитьФлажокВСтроке(вСтрока, ЦветТекущегоФлажка);
	КонецЦикла;
	Элементы.ТекущиеОповещенияСписок.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПоАктивнымЗадачам(Команда)
	Элементы.ФормаФильтрПоАктивнымЗадачам.Пометка = НЕ Элементы.ФормаФильтрПоАктивнымЗадачам.Пометка;
	Если Элементы.ФормаФильтрПоАктивнымЗадачам.Пометка Тогда
		ОтборСписка = МоиОповещения.Отбор.Элементы;
		ПолеКомпоновкиЗадачаАктивна = Новый ПолеКомпоновкиДанных("ЗадачаАктивна");
		ЭлементОтбораСписка = Неопределено;
		Для Каждого ТекОтборСписка Из ОтборСписка Цикл
			Если ТекОтборСписка.ЛевоеЗначение = ПолеКомпоновкиЗадачаАктивна Тогда
				ЭлементОтбораСписка = ТекОтборСписка;
			Иначе
				Продолжить;			// Выполняем поиск далее.
			КонецЕсли;
		КонецЦикла;
		Если ЭлементОтбораСписка = Неопределено Тогда
			ЭлементОтбораСписка = ОтборСписка.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Иначе
			// Уже есть такой элемент.
		КонецЕсли;
		ЭлементОтбораСписка.ЛевоеЗначение = ПолеКомпоновкиЗадачаАктивна;
		ЭлементОтбораСписка.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораСписка.Использование = Истина;
		ЭлементОтбораСписка.ПравоеЗначение = Истина;
	Иначе
		ОтборСписка = МоиОповещения.Отбор.Элементы;
		ПолеКомпоновкиЗадачаАктивна = Новый ПолеКомпоновкиДанных("ЗадачаАктивна");
		Для Каждого ТекОтборСписка Из ОтборСписка Цикл
			Если ТекОтборСписка.ЛевоеЗначение = ПолеКомпоновкиЗадачаАктивна Тогда
				ТекОтборСписка.Использование = Ложь;
			Иначе
				Продолжить;			// Выполняем поиск далее.
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительноеСогласование(Команда)
	ВыбратьДополнительныхСогласующих();
КонецПроцедуры

&НаКлиенте
Процедура РакурсДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОперативныйПланВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочееВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОтборВсеФлажки(Команда)
	ОтборСписка = МоиОповещения.Отбор.Элементы;
	ПолеКомпоновкиФлажок = Новый ПолеКомпоновкиДанных("Флажок");
	ЭлементОтбораСписка = Неопределено;
	Для Каждого ТекОтборСписка Из ОтборСписка Цикл
		Если ТекОтборСписка.ЛевоеЗначение = ПолеКомпоновкиФлажок Тогда
			ЭлементОтбораСписка = ТекОтборСписка;
		Иначе
			Продолжить;			// Выполняем поиск далее.
		КонецЕсли;
	КонецЦикла;
	Если ЭлементОтбораСписка = Неопределено Тогда
		ЭлементОтбораСписка = ОтборСписка.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Иначе
		// Уже есть такой элемент.
	КонецЕсли;
	СписокФлажков = Новый СписокЗначений;
	СписокФлажков.Добавить(ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Красный"));
	СписокФлажков.Добавить(ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Синий"));
	СписокФлажков.Добавить(ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Желтый"));
	СписокФлажков.Добавить(ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Зеленый"));
	СписокФлажков.Добавить(ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Оранжевый"));
	СписокФлажков.Добавить(ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Лиловый"));
	СписокФлажков.Добавить(ПредопределенноеЗначение("Перечисление.ЦветаФлажковОповещений.Серый"));
	ЭлементОтбораСписка.ЛевоеЗначение = ПолеКомпоновкиФлажок;
	ЭлементОтбораСписка.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбораСписка.Использование = Истина;
	ЭлементОтбораСписка.ПравоеЗначение = СписокФлажков;
	ТекстФильтра = НСтр("ru = 'Отметки: Все цвета'");
	Элементы.ТекущиеОповещенияСписокГруппаОтборПоФлажкам.Заголовок = ТекстФильтра;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаОперациюПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиЗакладкиСогласования(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаИзменениеНСИПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиЗакладкиСогласования(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЗакупочныеПроцедурыПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиЗакладкиСогласования(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПроектыПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиЗакладкиСогласования(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РакурсДанныхПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиЗакладкиСогласования(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОперативныйПланПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиЗакладкиСогласования(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НастраиваемыйОтчетПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиЗакладкиСогласования(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПрочееПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиЗакладкиСогласования(Элемент);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВернутьТекстПисьмаВФорматеHTML(ТекстПисьма) Экспорт
	Перем СтрокаПоиска;
	
	Текст = ТекстПисьма;
	ТекстПоиска = Текст;
	
	СмещениеВТексте = 0;
	
	ПодстрокиПоиска = Новый СписокЗначений;
	ПодстрокиПоиска.Добавить("http://");
	ПодстрокиПоиска.Добавить("www.");
	ПодстрокиПоиска.Добавить("mailto:");

	ПозицияПризнакаСсылки = ПоискПервойПодстроки(ТекстПоиска,ПодстрокиПоиска,СтрокаПоиска);

	// пробежимся по всем найденным ссылкам
	Пока ПозицияПризнакаСсылки>0 Цикл
		
		НачалоСсылки = ПозицияПризнакаСсылки;
		
		// найдем последний символ ссылки
		КонецСсылки = НачалоСсылки+СтрДлина(СтрокаПоиска)-1;
		Для а=КонецСсылки+1 по СтрДлина(ТекстПоиска) Цикл
			ТекСимвол = Сред(ТекстПоиска,а,1);
			Если КодСимвола(ТекСимвол) < 33 ИЛИ КодСимвола(ТекСимвол)>127 ИЛИ КодСимвола(ТекСимвол)=91 ИЛИ КодСимвола(ТекСимвол)=93 Тогда
				Прервать;
			КонецЕсли;
			КонецСсылки = а;
		КонецЦикла;
		
		Если КонецСсылки > НачалоСсылки+СтрДлина(СтрокаПоиска)-1 Тогда
			
			ТекстСсылки   = Сред(ТекстПоиска,НачалоСсылки,КонецСсылки-НачалоСсылки+1);
			ТекстСсылкиHTML = "<a href="""+?(СтрокаПоиска="www.","http://","")+ТекстСсылки+""">"+ТекстСсылки+"</a>";
			
			ТекстДоСсылки = Лев(Текст,НачалоСсылки+СмещениеВТексте-1);
			ТекстПослеСсылки = Прав(Текст,СтрДлина(Текст)-(КонецСсылки+СмещениеВТексте));
			
			Текст = ТекстДоСсылки + ТекстСсылкиHTML + ТекстПослеСсылки;
			
			СмещениеВТексте = СмещениеВТексте + КонецСсылки + (СтрДлина(ТекстСсылкиHTML)-СтрДлина(ТекстСсылки));

		Иначе
			
			СмещениеВТексте = СмещениеВТексте + КонецСсылки;
			
		КонецЕсли;
		
		ТекстПоиска = Прав(ТекстПоиска,СтрДлина(ТекстПоиска)-КонецСсылки);
		
		ПозицияПризнакаСсылки = ПоискПервойПодстроки(ТекстПоиска,ПодстрокиПоиска,СтрокаПоиска);
		
	КонецЦикла;
	
	Текст = СтрЗаменить(Текст, Символы.ПС, "<BR>");
	
	ТекстВформатеHTML = "<HTML>        
	|<HEAD>
	|<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
	|<META content=""MSHTML 6.00.2800.1400"" name=GENERATOR>
	|<STYLE>
	|body
	|{
	|	font-size:15px;
	|	font-family:Arial,Helvetica,Sans-Serif;
	|}
	|a
	|{	
	|	font-size:15px;
	|	font-family:Arial,Helvetica,Sans-Serif;
	|}
	|</STYLE>
	|</HEAD>
	|<BODY scroll=""auto"">" + Текст + "</BODY>
	|</HTML>";
	Возврат ТекстВформатеHTML;
	
КонецФункции

// Функция ищет вхождение в переданную строку значений из списка значений
//
// Параметры
//  Строка - исходная строка для поиска
//  ПодстрокиПоиска - список значений с коллекцией подстрок для поиска
//  СтрокаПоиска - элемент, в который возвращается найденное значение строки подпоиска
//
// Возвращаемое значение:
//  Наименьшая позиция найденного значения
//
&НаКлиентеНаСервереБезКонтекста
Функция ПоискПервойПодстроки(Строка,ПодстрокиПоиска,СтрокаПоиска)
	
	Результат = 0;
	
	Для каждого Подстрока из ПодстрокиПоиска Цикл
		Нашли = СтрНайти(Строка,Подстрока.Значение);
		Если Нашли > 0 Тогда
			Если Результат=0 ИЛИ Нашли < Результат Тогда
				Результат = Нашли;
				СтрокаПоиска = Подстрока.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ТекущиеОповещенияСписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	Для Каждого ТекСтрокаСписка из Строки Цикл
		Данные = ТекСтрокаСписка.Значение.Данные;
		Данные.Тема = СтрЗаменить(Данные.Тема,Символы.ПС, " ");
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВерсииСоглашенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ВерсииСоглашенияПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиЗакладкиСогласования(Элемент);
КонецПроцедуры




