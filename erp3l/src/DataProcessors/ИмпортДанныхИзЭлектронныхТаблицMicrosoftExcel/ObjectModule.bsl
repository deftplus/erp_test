#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// СЕРВИСНЫЕ ФУНКЦИИ

Перем УникальныеИмена_Индексы;
Перем ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ;


#Область ПрограммныйИнтерфейс

Функция Загрузить1(АдресФайла, ИмяТаблицы, Правила, Соединения, Условие, Первые1, ДобавочныеПоля, Приемник, ВладелецТабличнойЧасти, РодительСправочника, ПараметрыЗагрузки, СтруктураЗначенийРеквизитовПоУмолчанию = Неопределено, ПараметрическийОтбор = Неопределено) Экспорт
	
	ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ = "Обработка.ИмпортДанныхИзЭлектронныхТаблицMicrosoftExcel.МодульМенеджера.Загрузить1";
	
	Если Правила.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	
	Файл = ПолучитьИзВременногоХранилища(АдресФайла);
		
	Попытка
		Файл.Записать(ИмяФайла);
	Исключение
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,,, НСтр("ru = 'Ошибка записи временного файла.'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Истина);
	КонецПопытки;
	
	Попытка
		Результат = ПолучитьЗагрузитьДанные(ИмяФайла, ИмяТаблицы, Правила, Соединения, Условие, Первые1, ДобавочныеПоля, Приемник, ВладелецТабличнойЧасти, РодительСправочника, ПараметрыЗагрузки, СтруктураЗначенийРеквизитовПоУмолчанию, ПараметрическийОтбор, Ложь);
	Исключение
		Результат = Неопределено;
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;
	
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат.ПротоколЗагруженоОбъектов;
	КонецЕсли;
	
КонецФункции

Функция Загрузить2(АдресФайла, ПравилоИмпортаДанных, ОстанавливатьсяПриОшибке = Ложь, ПровестиДокументы = Ложь, СтруктураЗначенийРеквизитовПоУмолчанию = Неопределено, ПараметрическийОтбор = Неопределено,ИмяИсходногоФайла="") Экспорт
	
	ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ = "Обработка.ИмпортДанныхИзЭлектронныхТаблицMicrosoftExcel.МодульМенеджера.Загрузить2";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ПравилоИмпортаДанных);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаИмпортаТаблиц.ТаблицаADO.Имя КАК ИмяТаблицы,
	|	ПравилаИмпортаТаблиц.ПриемникПолноеИмяМетаданных,
	|	ПравилаИмпортаТаблиц.ПриемникВладелецТабличнойЧасти,
	|	ПравилаИмпортаТаблиц.ПриемникРодительСправочника,
	|	ПравилаИмпортаТаблиц.ПравилаXML,
	|	ПравилаИмпортаТаблиц.Условие,
	|	ПравилаИмпортаТаблиц.Соединения.(
	|		Таблица,
	|		Условие
	|	),
	|	ПравилаИмпортаТаблиц.Первые1,
	|	ПравилаИмпортаТаблиц.ДобавочныеПоля.(
	|		Имя,
	|		ЗначениеНеСтрока,
	|		ЗначениеСтрока,
	|		ТипСтрока
	|	)
	|ИЗ
	|	Справочник.ПравилаИмпортаТаблиц КАК ПравилаИмпортаТаблиц
	|ГДЕ
	|	ПравилаИмпортаТаблиц.Ссылка = &Ссылка";
	
	НачатьТранзакцию();
	РезультатЗапроса = Запрос.Выполнить();
	ЗафиксироватьТранзакцию();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если ПустаяСтрока(Выборка.ПравилаXML) Тогда
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьПредупреждение(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ, ПравилоИмпортаДанных.Метаданные(), ПравилоИмпортаДанных, НСтр("ru = 'Отсутствуют правила импорта данных.'"), Истина);
		Возврат Новый Массив;
	КонецЕсли;
	
	ЧтениеХML = Новый ЧтениеXML;
	
	Попытка
		ЧтениеХML.УстановитьСтроку(Выборка.ПравилаXML);
		Правила = СериализаторXDTO.ПрочитатьXML(ЧтениеХML);
		Если Правила.Колонки.Найти("ИсточникДобавочноеПоле") = Неопределено Тогда 
			Правила.Колонки.Добавить("ИсточникДобавочноеПоле", Новый ОписаниеТипов("Булево"));
		КонецЕсли;
	Исключение
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ, ПравилоИмпортаДанных.Метаданные(), ПравилоИмпортаДанных, НСтр("ru = 'Ошибка десериализации правил импорта данных.'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Истина);
		Возврат Неопределено;
	КонецПопытки;
	
	Если Правила.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Соединения = Новый СписокЗначений;
	ВыборкаСоединений = Выборка.Соединения.Выбрать();
	Пока ВыборкаСоединений.Следующий() Цикл;
		Соединения.Добавить(ВыборкаСоединений.Таблица, ВыборкаСоединений.Условие);
	КонецЦикла;
	
	ДобавочныеПоля = Новый Соответствие;
	ВыборкаДобавочныхПолей = Выборка.ДобавочныеПоля.Выбрать();
	Пока ВыборкаДобавочныхПолей.Следующий() Цикл
		Если ВыборкаДобавочныхПолей.ТипСтрока Тогда
			ДобавочныеПоля.Вставить(ВыборкаДобавочныхПолей.Имя, ВыборкаДобавочныхПолей.ЗначениеСтрока);
		Иначе
			ДобавочныеПоля.Вставить(ВыборкаДобавочныхПолей.Имя, ВыборкаДобавочныхПолей.ЗначениеНеСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	
	Файл = ПолучитьИзВременногоХранилища(АдресФайла);
		
	Попытка
		Файл.Записать(ИмяФайла);
	Исключение
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,,, НСтр("ru = 'Ошибка записи временного файла.'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Истина);
	КонецПопытки;
	
	ИмяТаблицы = Выборка.ИмяТаблицы;
	Условие = Выборка.Условие;
	Первые1 = Выборка.Первые1;
	Приемник = Выборка.ПриемникПолноеИмяМетаданных;
	ВладелецТабличнойЧасти = ?(ЗначениеЗаполнено(Выборка.ПриемникВладелецТабличнойЧасти), Выборка.ПриемникВладелецТабличнойЧасти, Неопределено);
	РодительСправочника = ?(ЗначениеЗаполнено(Выборка.ПриемникРодительСправочника), Выборка.ПриемникРодительСправочника, Неопределено);
	ПараметрыЗагрузки = Новый Структура("ОстанавливатьсяПриОшибке,ПровестиДокументы", ОстанавливатьсяПриОшибке, ПровестиДокументы);
	
	Попытка
		Результат = ПолучитьЗагрузитьДанные(ИмяФайла, ИмяТаблицы, Правила, Соединения, Условие, Первые1, ДобавочныеПоля, Приемник, ВладелецТабличнойЧасти, РодительСправочника, ПараметрыЗагрузки, СтруктураЗначенийРеквизитовПоУмолчанию, ПараметрическийОтбор, Истина, ИмяИсходногоФайла);
	Исключение
		Результат = Неопределено;
	КонецПопытки;
	
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		М = Новый Массив;
		Для Каждого Элемент Из Результат.ЗагруженныеОбъекты Цикл
			М.Добавить(Элемент.Ключ);
		КонецЦикла; 
		Возврат М;
	КонецЕсли;
	
КонецФункции

#КонецОбласти


#Область ВспомогательныеФункции 

Функция УникальноеИмяПеременной(СмыслПеременной="Параметр") 
	
	МаксимальныйИндекс = 0;
	если УникальныеИмена_Индексы.Свойство(СмыслПеременной,МаксимальныйИндекс) тогда
		УникальныеИмена_Индексы[СмыслПеременной] = МаксимальныйИндекс + 1;
		Возврат СмыслПеременной + "_" + формат(УникальныеИмена_Индексы[СмыслПеременной],"ЧГ=0");
	иначе
		УникальныеИмена_Индексы.Вставить(СмыслПеременной,1);
		Возврат СмыслПеременной + "_1";
	конецЕсли;
	
КонецФункции

// доработка для неограниченной вложенности полей по дереву ссылок
// присваивает объекту Объект значение Значение в поле <Объект.Поле1.Поле2...ПолеН>, 
// где иерархия имен полей записана в строке стрИерархияПолей в виде строки "Объект.Поле1.Поле2...ПолеН"
Процедура ПрисвоитьЗначение(Объект, стрИерархияПолей, Значение, ВозвратОшибка="")
	Если ВозвратОшибка="" Тогда
		ВозвратОшибка = стрИерархияПолей;
	КонецЕсли;
	Если СокрЛП(стрИерархияПолей)="" Тогда
		ТекстИсключения = НСтр("ru = 'Неверная иерархия полей в ""%Ошибка%"".'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%Ошибка%", Строка(ВозвратОшибка));
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	Раздел = СтрНайти(стрИерархияПолей,".");
	Если Раздел=0 Тогда
		Объект[стрИерархияПолей] = Значение;
		Возврат;
	КонецЕсли;
	ПрисвоитьЗначение(Объект[Лев(стрИерархияПолей,Раздел-1)], Сред(стрИерархияПолей,Раздел+1), Значение, ВозвратОшибка);
КонецПроцедуры

Функция ПрочитатьЗначение(Объект, стрИерархияПолей)
	ДочернийОбъект = Объект;
	ОперСтрока = стрИерархияПолей;
	Пока СтрНайти(ОперСтрока,".")<>0 Цикл
		ИмяПоля = Лев(ОперСтрока, СтрНайти(ОперСтрока,".")-1);
		ДочернийОбъект = ДочернийОбъект[ИмяПоля];
		ОперСтрока = Сред(ОперСтрока, СтрНайти(ОперСтрока,".")+1);
		Если СокрЛП(ОперСтрока) = "" Тогда
			ТекстИсключения = НСтр("ru = 'Неверная иерархия полей в ""%Ошибка%"".'");
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "%Ошибка%", Строка(стрИерархияПолей));
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	КонецЦикла;
	Возврат ДочернийОбъект[ОперСтрока];
КонецФункции

Функция ЗаписатьОбъектЗапротоколироватьОшибку(Объект, ЗагруженныеОбъекты, ПроводимыеДокументы = Неопределено, Принудительно = Ложь, НомерСтрокиВыборки = Неопределено, ОстанавливатьсяПриОшибке, ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ, ДобавлениеДляТекстаОшибки = "", ПакетныйИмпорт)
	
	Если НЕ Объект.Модифицированность() И НЕ Принудительно Тогда
		Возврат Истина;
	КонецЕсли;
	
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Объект));
	
	ТекстОшибки = "";
	
	ЭтоДокумент = Ложь;
	ЭтоСправочник = Ложь;
	ЭтоРегистрСведений = Ложь;

	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		
		Если Объект.ЭтоНовый() Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
				Объект.Дата = ТекущаяДатаСеанса();
			КонецЕсли;
			
			Если МетаданныеОбъекта.ДлинаНомера > 0 И НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
				Объект.УстановитьНовыйНомер();
			КонецЕсли;
			
		КонецЕсли;
		
		ЭтоДокумент = Истина;
		
		Если ПакетныйИмпорт Тогда
			ТекстОшибки = ПроверитьВозможностьПроведенияДокумента(Объект, МетаданныеОбъекта.Имя);
		КонецЕсли;
		
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		
		Если Объект.ЭтоНовый() Тогда
			
			Если МетаданныеОбъекта.ДлинаКода > 0 И НЕ ЗначениеЗаполнено(Объект.Код) Тогда
				Объект.УстановитьНовыйКод();
			КонецЕсли;
			
		КонецЕсли;
		
		ЭтоСправочник = Истина;
		
		Если ПакетныйИмпорт Тогда
			ТекстОшибки = ПроверитьВозможностьЗаписиОбъектаПриИмпорте(МетаданныеОбъекта,Объект);
		КонецЕсли; 
			
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) Тогда
		
		ЭтоРегистрСведений = Истина;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		
		НетОшибок = Ложь;
		
		Если ПакетныйИмпорт И ЭтоДокумент Тогда
			
			Если Объект.ДополнительныеСвойства.Свойство("ЗаполнятьПриИмпорте") 
				И (Объект.ДополнительныеСвойства.ЗаполнятьПриИмпорте = Истина) Тогда
			
				Объект.Заполнить(Новый Структура("ЗаполнитьПриИмпорте", Истина));
			
			КонецЕсли;
			
			Попытка
				Объект.Записать();
			Исключение
				ТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
			
		КонецЕсли;
		
	Иначе
		НетОшибок = ЗаписатьОбъект(Объект, ЗагруженныеОбъекты, ПроводимыеДокументы, Принудительно, ЭтоРегистрСведений, МетаданныеОбъекта);
	КонецЕсли;
	
	Если НЕ НетОшибок Тогда
		
		ТекстСообщения = НСтр("ru = 'Возникла ошибка при записи нового объекта <%Объект% %ДобавлениеДляТекстаОшибки%> %НомерСтрокиВыборки%. %ТекстОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Строка(Объект));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДобавлениеДляТекстаОшибки%", Строка(ДобавлениеДляТекстаОшибки));
		ПредставлениеНомераСтроки = ?(НомерСтрокиВыборки = Неопределено, "", НСтр("ru = ' (номер строки выборки: '") + Строка(НомерСтрокиВыборки) + ")");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтрокиВыборки%", Строка(ПредставлениеНомераСтроки));
		ПредставлениеТекстаОшибки = ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС + ТекстОшибки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстОшибки%", Строка(ПредставлениеТекстаОшибки));
		ТекстОшибки = ТекстСообщения;
		
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,,, ТекстОшибки,, Истина);
		
		Если ОстанавливатьсяПриОшибке Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НетОшибок;
	
Конецфункции

Функция ПроверитьВозможностьЗаписиОбъектаПриИмпорте(МетаданныеОбъекта, Объект)
	
	ТекстОшибки="";
		
	ДанныеЗапроса=ПолучитьПараметрыОбъектаДляЗаписи(МетаданныеОбъекта.Имя);
	
	Если НЕ ДанныеЗапроса=Неопределено Тогда
		
		Результат=ДанныеЗапроса.Выбрать();
		
		Результат.Следующий();
		
		Если Объект.ЭтоНовый() И Не Результат.СоздаватьПриНеудачномПоискеПриИмпорте Тогда
			
			ТекстОшибки = НСтр("ru = 'Не удается найти элемент эталонного классификатора %МетаданныеОбъекта% с реквизитами:'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МетаданныеОбъекта%", Строка(МетаданныеОбъекта.Синоним));
			
			ТекстРеквизиты="";
			
			Реквизиты=Результат.Реквизиты.Выбрать();
			
			Пока Реквизиты.Следующий() Цикл
				
				Если ЗначениеЗаполнено(Объект[Реквизиты.Имя]) Тогда
					
					ТекстРеквизиты=ТекстРеквизиты+"
					|"+Реквизиты.Синоним+": "+Объект[Реквизиты.Имя];
					
				КонецЕсли;
				
			КонецЦикла;
			
			ТекстОшибки=ТекстОшибки+ТекстРеквизиты;
			
			Владельцы=Результат.Владельцы.Выбрать();
			
			Если Владельцы.Следующий() Тогда
				
				ТекстСообщения = НСтр("ru = '
				|				Владелец: %Владелец%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Владелец%", Строка(Объект.Владелец));
				ТекстОшибки = ТекстОшибки + ТекстСообщения;
				
			КонецЕсли;		
			
		Иначе
			
			ТекстРеквизиты="";
			
			Реквизиты=Результат.Реквизиты.Выбрать();
			
			Пока Реквизиты.Следующий() Цикл
				
				Если Реквизиты.Обязательный И НЕ ЗначениеЗаполнено(Объект[Реквизиты.Имя]) Тогда
					
					ТекстРеквизиты=ТекстРеквизиты+"
					|"+Реквизиты.Синоним;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Владельцы=Результат.Владельцы.Выбрать();
			
			Если Владельцы.Следующий() И НЕ ЗначениеЗаполнено(Объект.Владелец) Тогда
				
				ТекстРеквизиты = ТекстРеквизиты + НСтр("ru = '
				|Владелец.'");
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(ТекстРеквизиты) Тогда
				ТекстОшибки = НСтр("ru = 'Не заполнены обязательные реквизиты: %ТекстРеквизиты%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТекстРеквизиты%", Строка(ТекстРеквизиты));
			КонецЕсли;		
			
		КонецЕсли;	
				
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Не удалось получить информацию по реквизитам справочника %МетаданныеОбъекта%.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МетаданныеОбъекта%", Строка(МетаданныеОбъекта.Имя));
		
	КонецЕсли;
		
	Возврат ТекстОшибки;	
	
КонецФункции // ПроверитьВозможностьЗаписиОбъектаПриИмпорте()

Функция ПолучитьПараметрыОбъектаДляЗаписи(ИмяОбъекта)
	
	Возврат КэшируемыеПроцедурыУХ.ПолучитьПараметрыОбъектаДляЗаписи(ИмяОбъекта);
	
КонецФункции // ПолучитьПараметрыОбъектаДляЗаписи()

Функция ПроверитьВозможностьПроведенияДокумента(Объект, ИмяМетаданных)
	
	//Если вводные данные не поменяются, тогда свернуть проверку условий для вызова функции проверки...
	
	ТекстОшибки = "";
	
	Если ИмяМетаданных = "ВводСведенийРБП" Тогда
		
		ТекстОшибки = Документы[ИмяМетаданных].ПроверитьВозможностьПроведения(Объект);
		
	ИначеЕсли ИмяМетаданных = "ПоступлениеОСМСФО" Тогда
		
		ТекстОшибки = Документы[ИмяМетаданных].ПроверитьВозможностьПроведения(Объект);
		
	ИначеЕсли ИмяМетаданных = "ПоступлениеНМАМСФО" Тогда
		
		ТекстОшибки = Документы[ИмяМетаданных].ПроверитьВозможностьПроведения(Объект);
		
	ИначеЕсли ИмяМетаданных = "ВводНачальныхОстатковОСМСФО" Тогда
		
		ТекстОшибки = Документы[ИмяМетаданных].ПроверитьВозможностьПроведения(Объект);
		
	ИначеЕсли ИмяМетаданных = "ВводНМАВЭксплуатациюМСФО" Тогда
		
		ТекстОшибки = Документы[ИмяМетаданных].ПроверитьВозможностьПроведения(Объект);
		
	ИначеЕсли ИмяМетаданных = "ВводОСВЭксплуатациюМСФО" Тогда
		
		ТекстОшибки = Документы[ИмяМетаданных].ПроверитьВозможностьПроведения(Объект);
		
	ИначеЕсли ИмяМетаданных = "ВводПервоначальныхСведенийОКредитахИЗаймахМСФО" Тогда
		
		ТекстОшибки = Документы[ИмяМетаданных].ПроверитьВозможностьПроведения(Объект);
		
	ИначеЕсли ИмяМетаданных = "ВводСведенийОКредитахИЗаймахВыданныхМСФО" Тогда
		
		ТекстОшибки = Документы[ИмяМетаданных].ПроверитьВозможностьПроведения(Объект);
		
	ИначеЕсли ИмяМетаданных = "ВводПервоначальныхСведенийОКредитахИЗаймахМСФО" Тогда
		
		ТекстОшибки = Документы[ИмяМетаданных].ПроверитьВозможностьПроведения(Объект);
		
	ИначеЕсли ИмяМетаданных = "ПереоценкаЗапасовМСФО" Тогда
		
		ТекстОшибки = Документы[ИмяМетаданных].ПроверитьВозможностьПроведения(Объект);
		
	КонецЕсли;
	
	Возврат ТекстОшибки;
		
КонецФункции

Функция ЗаписатьОбъект(Объект, ЗагруженныеОбъекты, ПроводимыеДокументы = Неопределено, Принудительно = Ложь, ЭтоРегистрСведений, МетаданныеОбъекта)
	
	ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ = "Обработка.ИмпортДанныхИзЭлектронныхТаблицMicrosoftExcel.МодульМенеджера.ЗаписатьОбъект";
	
	Попытка                                                                
		
		Проводить = ПроводимыеДокументы.Получить(ТипЗнч(Объект));
		
		Если ЭтоРегистрСведений ИЛИ (Объект.ДополнительныеСвойства.Свойство("ЗаполнятьПриИмпорте")    // у регистра сведений нет дополнительных свойств
			И Объект.ДополнительныеСвойства.ЗаполнятьПриИмпорте = Истина) Тогда
			
			ПараметрыИмпортаДляЗаполнения = Новый Структура("Проводить", Проводить);
			Объект.Заполнить(Новый Структура("ЗаполнитьПриИмпорте,ПараметрыИмпорта", Истина, ПараметрыИмпортаДляЗаполнения));
			
		КонецЕсли;
		
		Если Проводить = Неопределено Тогда // не проводимый объект
			Объект.Записать();
		ИначеЕсли Проводить Тогда // проводимый объект и включено проведение при импорте
			Если НЕ Объект.ПометкаУдаления Тогда
				Объект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
		ИначеЕсли НЕ Проводить Тогда // проводимый объект, но выключено проведение при импорте
			Если Объект.Проведен Тогда
				Если НЕ Объект.ПометкаУдаления Тогда
					Объект.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				КонецЕсли;
			Иначе
				Объект.Записать();
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЭтоРегистрСведений Тогда
			Если ЗагруженныеОбъекты.Получить(Объект.Ссылка) = Неопределено Тогда
				ЗагруженныеОбъекты.Вставить(Объект.Ссылка, Истина);
			КонецЕсли;
		КонецЕсли;
		
		Возврат Истина;
		
	Исключение
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ, МетаданныеОбъекта, Объект, НСтр("ru = 'Системная ошибка. Подробности в полном протоколе.'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Истина);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ЗапросПолей(Таблица)
	
	Текст = "";
	
	М = Метаданные.НайтиПоПолномуИмени(Таблица);
	Для Каждого Реквизит Из М.Реквизиты Цикл
		Текст = Текст + ", 
		|	Таблица." + Реквизит.Имя;
	КонецЦикла; 
	
	Для Каждого Реквизит Из М.СтандартныеРеквизиты Цикл
		Текст = Текст + ", 
		|	Таблица." + Реквизит.Имя;
	КонецЦикла; 
	
	Текст = Сред(Текст, 3);
	
	Возврат Текст;
	
КонецФункции

Функция МетодТаблицаСозданияЭлемента(ОписаниеТипа, ТолькоТаблицы, СозданиеГруппы)
	
	Тип = ОписаниеТипа.Типы()[0];
	МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
	Имя = МетаданныеТипа.Имя;
	
	Если Метаданные.Справочники.Содержит(МетаданныеТипа) Тогда
		
		Если ТолькоТаблицы Тогда
			Возврат Справочники[Имя];
		Иначе
			
			Если СозданиеГруппы И Метаданные.Справочники[Имя].Иерархический И Метаданные.Справочники[Имя].ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
				Возврат "Справочники." + Имя + ".СоздатьГруппу()";
			Иначе
				Возврат "Справочники." + Имя + ".СоздатьЭлемент()";
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеТипа) Тогда
		
		Если ТолькоТаблицы Тогда
			Возврат Документы[Имя];
		Иначе
			Возврат "Документы." + Имя + ".СоздатьДокумент()";
		КонецЕсли;
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеТипа) Тогда
		
		Если ТолькоТаблицы Тогда
			Возврат ПланыСчетов[Имя];
		Иначе
			Возврат "ПланыСчетов." + Имя + ".СоздатьСчет()";
		КонецЕсли;
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеТипа) Тогда
		
		Если ТолькоТаблицы Тогда
			Возврат ПланыВидовХарактеристик[Имя];
		Иначе
			Если СозданиеГруппы И Метаданные.ПланыВидовХарактеристик[Имя].Иерархический Тогда
				Возврат "ПланыВидовХарактеристик." + Имя + ".СоздатьГруппу()";
			Иначе
				Возврат "ПланыВидовХарактеристик." + Имя + ".СоздатьЭлемент()";
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеТипа) Тогда
		
		Если ТолькоТаблицы Тогда
			Возврат РегистрыСведений[Имя];
		Иначе
			Возврат "РегистрыСведений." + Имя + ".СоздатьМенеджерЗаписи()";
		КонецЕсли;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
Конецфункции

Функция МетодСозданияЭлемента(ОписаниеТипа, СозданиеГруппы = Ложь)
	
	Возврат МетодТаблицаСозданияЭлемента(ОписаниеТипа, Ложь, СозданиеГруппы);
	
КонецФункции

Функция ТаблицаТипа(ОписаниеТипа)
	
	Возврат МетодТаблицаСозданияЭлемента(ОписаниеТипа, Истина, Неопределено);
	
КонецФункции

Функция МетодыТаблицыСозданияДополнительныхДанных(Правила, ТолькоТаблицы, ПриемникМожетИметьРодителя)
	
	Менеджеры = Новый Соответствие;
	
	Для Каждого Правило Из Правила Цикл
		
		Если ПустаяСтрока(Правило.ПриемникИскатьПоИмя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТолькоТаблицы Тогда
			Менеджеры.Вставить(Правило.ПриемникИмя, ТаблицаТипа(Правило.ПриемникТип));
		Иначе
			Менеджеры.Вставить(Правило.ПриемникИмя, МетодСозданияЭлемента(Правило.ПриемникТип, ПриемникМожетИметьРодителя И Правило.ПриемникИмя = "Родитель"));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Менеджеры;
	
КонецФункции

Функция МетодыСозданияДополнительныхДанных(Правила, ПриемникМожетИметьРодителя = Ложь)
	
	Возврат МетодыТаблицыСозданияДополнительныхДанных(Правила, Ложь, ПриемникМожетИметьРодителя);
	
КонецФункции

Функция ТаблицыДополнительныхДанных(Правила)
	
	Возврат МетодыТаблицыСозданияДополнительныхДанных(Правила, Истина, Неопределено);
	
КонецФункции

Функция ПолучитьМассивРеквизитов(Тип, СтруктураОтбора, Владелец)
	
	МетаданныеТипа = Метаданные.НайтиПоТипу(Тип.Типы()[0]);
	
	КоллекцииРеквизитов = Новый Массив;
	КоллекцииРеквизитов.Добавить(МетаданныеТипа.СтандартныеРеквизиты);
	КоллекцииРеквизитов.Добавить(МетаданныеТипа.Реквизиты);
	
	НайденныеРеквизиты = Новый Массив;
	
	Если НЕ СтруктураОтбора = Неопределено Тогда
		Для Каждого КоллекцияРеквизитов Из КоллекцииРеквизитов Цикл
			Для Каждого Реквизит Из КоллекцияРеквизитов Цикл
				Если СтруктураОтбора.Свойство(Реквизит.Имя) Тогда
					НайденныеРеквизиты.Добавить(Реквизит.Имя);
				КонецЕсли;
			КонецЦикла; 
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ Владелец = Неопределено Тогда
		НайденныеРеквизиты.Вставить(0, "Владелец");
	КонецЕсли;
	
	Возврат НайденныеРеквизиты;
	
Конецфункции

Функция ПолучитьТекстПустогоЗначенияТипа(Тип)
	
	ТекстПустогоЗначения = Неопределено;
	
	Если Тип.СодержитТип(Тип("Строка")) Тогда
		
		ТекстПустогоЗначения = """""";
		
	ИначеЕсли Тип.СодержитТип(Тип("Число")) Тогда
		
		ТекстПустогоЗначения = "0";
		
	ИначеЕсли Тип.СодержитТип(Тип("Булево")) Тогда
		
		ТекстПустогоЗначения = "ЛОЖЬ";
		
	ИначеЕсли Тип.СодержитТип(Тип("Дата")) Тогда
		
		ТекстПустогоЗначения = "ДАТАВРЕМЯ(1,1,1)";
		
	КонецЕсли;
	
	Возврат ТекстПустогоЗначения;
				
Конецфункции

#КонецОбласти


#Область ЛогикаЗагрузки

Функция ПоместитьНеобработанныеДанныеВнешнегоИсточникаВЗапрос(НеобработанныеДанные, Запрос, ТаблицаВнешниеДанные, 
																ДобавочныеПоля, Правила, НомераТаблиц)
	
	Колонки = Новый Соответствие;
	
	Поля = НеобработанныеДанные.Поля;
	ТипыПолей = НеобработанныеДанные.Типы;
	Данные = НеобработанныеДанные.Данные;
	
	КоличествоПолей = Поля.Количество();
	
	ТекстЗапроса = "";
	
	ВнешниеДанные = Новый ТаблицаЗначений;
	ВнешниеДанные.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"), "#");
	
	Для НомерПоля = 1 По КоличествоПолей Цикл
		
		ИмяКолонкиВнешнегоИсточника = Поля[НомерПоля - 1];
		ИмяКолонкиТаблицыЗапроса = ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление(ВырезатьИзСкобок(ИмяКолонкиВнешнегоИсточника,"[","]")) + Формат(НомерПоля, "ЧГ=");
		ТипКолонкиВнешнегоИсточника = ТипыПолей[НомерПоля - 1];
		
		Колонки.Вставить(ИмяКолонкиВнешнегоИсточника, ИмяКолонкиТаблицыЗапроса);
		
		ВнешниеДанные.Колонки.Добавить(ИмяКолонкиТаблицыЗапроса, ТипКолонкиВнешнегоИсточника, ИмяКолонкиВнешнегоИсточника);
		
		ТекстЗапроса = ТекстЗапроса + ", 
		|	" + "ИсточникТаблица." + ИмяКолонкиТаблицыЗапроса + " КАК " + ИмяКолонкиТаблицыЗапроса;
		
	КонецЦикла;
	
	Индекс = 0;
	Если КоличествоПолей>0 Тогда
		Для НомерСтроки = 1 По Данные.Количество()/КоличествоПолей Цикл
			Строка = ВнешниеДанные.Добавить();
			Строка.НомерСтроки = НомерСтроки;
			Для НомерКолонки = 1 По КоличествоПолей Цикл
				Строка[НомерКолонки] = Данные[Индекс];
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ИмяПараметра = УникальноеИмяПеременной("ИсточникТаблица");
	
	Запрос.УстановитьПараметр(ИмяПараметра, ВнешниеДанные);

	Запрос.Текст = Запрос.Текст + "
	|ВЫБРАТЬ 
	|	ИсточникТаблица.НомерСтроки" + ТекстЗапроса + "
	|ПОМЕСТИТЬ " + ТаблицаВнешниеДанные + " ИЗ &" + ИмяПараметра + " КАК ИсточникТаблица 
	|ИНДЕКСИРОВАТЬ ПО НомерСтроки;
	|";
	
	НомераТаблиц.Вставить("втТаблицаВнешниеДанные", НомераТаблиц.Количество());
		
	Если ДобавочныеПоля.Количество() > 0 Тогда
		
		ДобавочныеДанные = Новый ТаблицаЗначений;
		СтрокаДобавочныхДанных = ДобавочныеДанные.Добавить();
		
		ТекстЗапроса = "";
		
		ПомещенныеДобавочныеПоля = Новый Соответствие;
		
		НомерПоля = КоличествоПолей;
		
		Для Каждого Правило Из Правила Цикл
			
			Если НЕ Правило.ИсточникДобавочноеПоле Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ПомещенныеДобавочныеПоля[Правило.ИсточникИмя_ПриемникТип] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПомещенныеДобавочныеПоля.Вставить(Правило.ИсточникИмя_ПриемникТип, Истина);
			
			НомерПоля = НомерПоля + 1;
			
			ИмяДобавочнойКолонки = Правило.ИсточникИмя;
			
			ИмяКолонкиТаблицыЗапроса = ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление(ВырезатьИзСкобок(ИмяДобавочнойКолонки,"[","]")) + Формат(НомерПоля, "ЧГ=");
			
			ЗначениеДобавочнойКолонки = ДобавочныеПоля[ИмяДобавочнойКолонки];
			
			ТипЗначенияДобавочнойКолонки = ТипЗнч(ЗначениеДобавочнойКолонки);
			
			Типы = Новый Массив;
			Типы.Добавить(ТипЗначенияДобавочнойКолонки);
			
			Если ТипЗначенияДобавочнойКолонки = Тип("Строка") Тогда
				ДлинаСтроки = СтрДлина(ЗначениеДобавочнойКолонки);
				ТипКолонкиВнешнегоИсточника = Новый ОписаниеТипов(Типы,, Новый КвалификаторыСтроки(?(ДлинаСтроки = 0, 1, ДлинаСтроки)));
			Иначе
				ТипКолонкиВнешнегоИсточника = Новый ОписаниеТипов(Типы);
			КонецЕсли;
			
			Колонки.Вставить(Правило.ИсточникИмя_ПриемникТип, ИмяКолонкиТаблицыЗапроса);
			
			ДобавочныеДанные.Колонки.Добавить(ИмяКолонкиТаблицыЗапроса, ТипКолонкиВнешнегоИсточника, ИмяДобавочнойКолонки);
			
			СтрокаДобавочныхДанных[ИмяКолонкиТаблицыЗапроса] = ЗначениеДобавочнойКолонки;
			
			ТекстЗапроса = ТекстЗапроса + ", 
			|	" + "ИсточникТаблица." + ИмяКолонкиТаблицыЗапроса + " КАК " + ИмяКолонкиТаблицыЗапроса
			
		КонецЦикла; 
		
		ТекстЗапроса = Сред(ТекстЗапроса, 3); // строка ТекстЗапроса начинается с ", " - отрез 2 символа
		
		ИмяПараметра = УникальноеИмяПеременной();
		
		Запрос.УстановитьПараметр(ИмяПараметра, ДобавочныеДанные);
		
		ВременнаяТаблица1 = УникальноеИмяПеременной("ПравилаТаблица");
		ВременнаяТаблица2 = УникальноеИмяПеременной("ТаблицаВнешниеДанные"+?(ТаблицаВнешниеДанные<>"ВнешниеДанные", "_"+ТаблицаВнешниеДанные, ""));
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ " + ТекстЗапроса + " 
		|ПОМЕСТИТЬ " + ВременнаяТаблица1 + " ИЗ &" + ИмяПараметра + " КАК ИсточникТаблица;
		|
		|ВЫБРАТЬ ИсточникТаблица.*, ПравилаТаблица.* 
		|ПОМЕСТИТЬ " + ВременнаяТаблица2 + " ИЗ 
		|	" + ТаблицаВнешниеДанные + " КАК ИсточникТаблица, 
		|	" + ВременнаяТаблица1 + " КАК ПравилаТаблица;
		|УНИЧТОЖИТЬ " + ТаблицаВнешниеДанные + ";
		|УНИЧТОЖИТЬ " + ВременнаяТаблица1 + ";
		|
		|ВЫБРАТЬ ИсточникТаблица.* 
		|ПОМЕСТИТЬ " + ТаблицаВнешниеДанные + " ИЗ " + ВременнаяТаблица2 + " КАК ИсточникТаблица;
		|УНИЧТОЖИТЬ " + ВременнаяТаблица2 + ";
		|";
		
		НомераТаблиц.Вставить("вт" + ВременнаяТаблица1, НомераТаблиц.Количество());
		НомераТаблиц.Вставить("вт" + ВременнаяТаблица2, НомераТаблиц.Количество());
		НомераТаблиц.Вставить("Уничтожить_" + ТаблицаВнешниеДанные, НомераТаблиц.Количество());
		НомераТаблиц.Вставить("Уничтожить_" + ВременнаяТаблица1, НомераТаблиц.Количество());		
		НомераТаблиц.Вставить("вт_" + ТаблицаВнешниеДанные, НомераТаблиц.Количество());
		НомераТаблиц.Вставить("Уничтожить_" + ВременнаяТаблица2, НомераТаблиц.Количество());
		
	КонецЕсли;
	
	Возврат Колонки;
	
КонецФункции

// Не отрабатывает вложенные скобки.
Функция ВырезатьИзСкобок(ИсходнаяСтрока,ОткрывСкобка="(",ЗакрывСкобка=")")
	
	ОперСтрока = ИсходнаяСтрока;
	ПозицияОткрывающейСкобки = СтрНайти(ОперСтрока,ОткрывСкобка);
	если ПозицияОткрывающейСкобки<>0 тогда
		ОперСтрока = прав(ОперСтрока,стрДлина(ОперСтрока)-ПозицияОткрывающейСкобки);
	конецЕсли;
	ПозицияЗакрывающейСкобки = СтрНайти(ОперСтрока,ЗакрывСкобка);
	если ПозицияЗакрывающейСкобки<>0 тогда
		ОперСтрока = лев(ОперСтрока,ПозицияЗакрывающейСкобки-1);
	конецЕсли;
	
	Возврат ОперСтрока;
	
КонецФункции

Функция СвернутьВнешниеДанныеПоКлючевымРеквизитам(Запрос, ТаблицаВнешниеДанные, КолонкиВнешнихДанных, Правила, ПриемникТабличнаяЧасть, ТипПриемника, НомераТаблиц)
	
	Поля = "";
	Группировки = "";
	ВсеПоля = "Таблица.НомерСтроки";
	
	Если ПриемникТабличнаяЧасть Тогда
		ЕстьГруппировкиНеПоСсылке = Ложь;
	КонецЕсли;
	
	ПримененныеПоля = Новый Соответствие;
	ПримененныеГруппировки = Новый Соответствие;
	
	Для Каждого Правило Из Правила Цикл
		
		ИмяПоляИсточника = КолонкиВнешнихДанных[Правило.ИсточникИмя_ПриемникТип];
		
		Если ПримененныеПоля.Получить(ИмяПоляИсточника) = Неопределено Тогда
			ПримененныеПоля.Вставить(ИмяПоляИсточника, Истина);
			ВсеПоля = ВсеПоля + ", Таблица." + ИмяПоляИсточника;
		КонецЕсли;
		
		Если НЕ ПримененныеГруппировки.Получить(ИмяПоляИсточника) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Правило.Поиск Тогда
			
			Группировки = Группировки + ", Таблица." + ИмяПоляИсточника;
			ПримененныеГруппировки.Вставить(ИмяПоляИсточника, Истина);
			
			Если ПриемникТабличнаяЧасть И НЕ Правило.ЭтоСсылкаТабличнойЧасти Тогда
				ЕстьГруппировкиНеПоСсылке = Истина;
			КонецЕсли;
			
		ИначеЕсли НЕ ПриемникТабличнаяЧасть И Правило.ПриемникТип = ТипПриемника Тогда
			
			Нашли = Ложь;
			Для Каждого ПравилоПоиска Из Правила Цикл
				Если ПравилоПоиска.ПриемникИмя = Правило.ПриемникИскатьПоИмя Тогда
					Нашли = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			Если Нашли Тогда
				Группировки = Группировки + ",
				|	Таблица." + ИмяПоляИсточника;
				ПримененныеГруппировки.Вставить(ИмяПоляИсточника, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементПоле Из ПримененныеПоля Цикл
		Если ПримененныеГруппировки.Получить(ЭлементПоле.Ключ) = Неопределено Тогда
			Поля = Поля + ",
			|	ПримененныеПоляНабор." + ЭлементПоле.Ключ;
		КонецЕсли;
	КонецЦикла; 
	
	Группировки = Сред(Группировки, 3); // строка Группировки начинается с ", ", отрез 2 символов
	
	Если ПустаяСтрока(Группировки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПриемникТабличнаяЧасть И НЕ ЕстьГруппировкиНеПоСсылке Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВременнаяТаблица1 = УникальноеИмяПеременной("ВременнаяТаблица1");
	ВременнаяТаблица2 = УникальноеИмяПеременной("ВременнаяТаблица2");
	
	Запрос.Текст = Запрос.Текст + "
	|
	|//СвернутьВнешниеДанныеПоКлючевымРеквизитам
	|ВЫБРАТЬ 
	|	МАКСИМУМ(Таблица.НомерСтроки) КАК НомерСтроки, " + Группировки + " 
	|ПОМЕСТИТЬ " + ВременнаяТаблица1 + " ИЗ " + ТаблицаВнешниеДанные + " КАК Таблица 
	|СГРУППИРОВАТЬ ПО " + Группировки + ";
	|
	|ВЫБРАТЬ 
	|	Таблица.НомерСтроки, " + Группировки + Поля + "
	|ПОМЕСТИТЬ " + ВременнаяТаблица2 + " ИЗ " + ВременнаяТаблица1 + " КАК Таблица 
	|ЛЕВОЕ СОЕДИНЕНИЕ " + ТаблицаВнешниеДанные + " КАК ПримененныеПоляНабор ПО Таблица.НомерСтроки = ПримененныеПоляНабор.НомерСтроки;
	|УНИЧТОЖИТЬ " + ВременнаяТаблица1 + ";
	|УНИЧТОЖИТЬ " + ТаблицаВнешниеДанные + ";
	|
	|ВЫБРАТЬ " + ВсеПоля + " 
	|ПОМЕСТИТЬ " + ТаблицаВнешниеДанные + " ИЗ " + ВременнаяТаблица2 + " КАК Таблица 
	|ИНДЕКСИРОВАТЬ ПО НомерСтроки;
	|УНИЧТОЖИТЬ " + ВременнаяТаблица2 + ";
	|";
	
	НомераТаблиц.Вставить("вт1_" + ВременнаяТаблица1, НомераТаблиц.Количество());
	НомераТаблиц.Вставить("вт2_" + ВременнаяТаблица2, НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожить_вт1_" + ВременнаяТаблица1, НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожить_ТаблицаВнешниеДанные_" + ВременнаяТаблица2, НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПовторноеПомещение_ТаблицаВнешниеДанные_" + ТаблицаВнешниеДанные, НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожить_ВременнаяТаблица2_" + ВременнаяТаблица2, НомераТаблиц.Количество());
	
	Возврат Истина;
	
КонецФункции

Функция ДополнитьЗапросПеречисляемымиТипами(Запрос, ТаблицаВнешниеДанные, КолонкиВнешнихДанных, Правила, НомераТаблиц)
	
	ОписаниеПеречислений = Перечисления.ТипВсеСсылки();
	
	ТекстЗапроса = "";
	
	Для Каждого Правило Из Правила Цикл
		
		Если ПустаяСтрока(Правило.СпособПоискаПеречисляемогоТипа) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(Правило.ПриемникИскатьПоИмя) Тогда
			ПеречисляемыйТип = Правило.ПриемникТип.Типы()[0];
		Иначе
			ПеречисляемыйТип = Правило.ПриемникИскатьПоТип.Типы()[0];
		КонецЕсли;
		
		МассивИдентификаторов = Новый Массив;
		
		Если ОписаниеПеречислений.СодержитТип(ПеречисляемыйТип) Тогда
			
			МетаданныеПеречисления = Метаданные.НайтиПоТипу(ПеречисляемыйТип);
			
			МенеджерЗначений = Перечисления[МетаданныеПеречисления.Имя];
			МенеджерЗначенийИмя = "Перечисление." + МетаданныеПеречисления.Имя;
			
			Для Каждого ЗначениеПеречисления Из МетаданныеПеречисления.ЗначенияПеречисления Цикл
				МассивИдентификаторов.Добавить(ЗначениеПеречисления.Имя);
			КонецЦикла;
			
		ИначеЕсли ПеречисляемыйТип = Тип("ВидСчета") Тогда
			
			МенеджерЗначений = ВидСчета;
			МенеджерЗначенийИмя = "ВидСчета";
			
			МассивИдентификаторов.Добавить("Активный");
			МассивИдентификаторов.Добавить("Пассивный");
			МассивИдентификаторов.Добавить("АктивноПассивный");
			
		КонецЕсли;
		
		Текст = "";
		ИмяПоляИсточника = КолонкиВнешнихДанных[Правило.ИсточникИмя_ПриемникТип];
		
		Для Каждого Идентификатор Из МассивИдентификаторов Цикл
			
			Если Правило.СпособПоискаПеречисляемогоТипа = "Идентификатор" Тогда
				
				ТекстСопоставления = """" + Идентификатор + """";
				
			ИначеЕсли Правило.СпособПоискаПеречисляемогоТипа = "Представление" Тогда
				
				ТекстСопоставления = """" + Строка(МенеджерЗначений[Идентификатор]) + """";
				
			ИначеЕсли Правило.СпособПоискаПеречисляемогоТипа = "Порядок" Тогда
				
				ТекстСопоставления = Формат(МенеджерЗначений.Индекс(МенеджерЗначений[Идентификатор]), "ЧН=; ЧГ=");
				
			Иначе
				Продолжить;
			КонецЕсли;
			
			Текст = Текст + ?(ПустаяСтрока(Текст), "ВЫБОР", "") + " КОГДА Таблица." + ИмяПоляИсточника + " = " + ТекстСопоставления + " ТОГДА ЗНАЧЕНИЕ(" + МенеджерЗначенийИмя + "." + Идентификатор + ")";
			
		КонецЦикла;
		
		Если ПустаяСтрока(Текст) Тогда
			Текст = "NULL";
		Иначе
			Текст = Текст + " ИНАЧЕ NULL КОНЕЦ";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ",
		|" + Текст + " КАК " + ИмяПоляИсточника + "_" + Правило.ИмяПравила;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		
		ВременнаяТаблица = УникальноеИмяПеременной("ВременнаяТаблица");
		
		Запрос.Текст = Запрос.Текст + "
		|
		|//ДополнитьЗапросПеречисляемымиТипами
		|ВЫБРАТЬ Таблица.*" + ТекстЗапроса + " ПОМЕСТИТЬ " + ВременнаяТаблица + " ИЗ " + ТаблицаВнешниеДанные + " КАК Таблица;
		|УНИЧТОЖИТЬ " + ТаблицаВнешниеДанные + ";
		|ВЫБРАТЬ Таблица.* ПОМЕСТИТЬ " + ТаблицаВнешниеДанные + " ИЗ " + ВременнаяТаблица + " КАК Таблица ИНДЕКСИРОВАТЬ ПО НомерСтроки;
		|УНИЧТОЖИТЬ " + ВременнаяТаблица + ";";
		
	КонецЕсли;
	
КонецФункции

Функция СопоставитьВнешниеДанныеИПолучателя(Запрос, ТаблицаВнешниеДанные, КолонкиВнешнихДанных, ПараметрыИмпорта, Правила, НомераТаблиц)
											
	ТаблицаПолучателя 					= ПараметрыИмпорта.ТаблицаПолучателя;
	ПриемникТабличнаяЧасть 				= ПараметрыИмпорта.ПриемникТабличнаяЧасть;
	ВладелецТабличнойЧасти 				= ПараметрыИмпорта.ВладелецТабличнойЧасти;
	РодительСправочника					= ПараметрыИмпорта.РодительСправочника;
	ВладелецПриемникаПоУмолчанию 		= ПараметрыИмпорта.ВладелецПриемникаПоУмолчанию;
	ВладельцыПоУмолчанию				= ПараметрыИмпорта.ВладельцыПоУмолчанию;	
	РеквизитыПоискаПоУмолчанию 			= ПараметрыИмпорта.РеквизитыПоискаПоУмолчанию; 
	ТипПриемника						= ПараметрыИмпорта.ТипПриемника;
	ПриемникРегистрСведений				= ПараметрыИмпорта.ПриемникРегистрСведений;
	ПриемникИскатьСтрокиТабличнойЧасти 	= ПараметрыИмпорта.ПриемникИскатьСтрокиТабличнойЧасти;
											
	Группировки = "";
	Соединения = "";
	СоединенияВладельцаТабличнойЧасти = "";
	ПрямыеСоединенияВладельцаТабличнойЧасти = "";
	Соединения_получателя = "";
	СоединенияВладельцаТабличнойЧасти_получателя = "";
	ПрямыеСоединенияВладельцаТабличнойЧасти_владельцаПолучателя = "";
	Поля = "";
	
	ПримененныеГруппировки = Новый Соответствие;
	ПримененныеПоля = Новый Соответствие;
	
	ПримененныеСоединения = Новый Соответствие;
	ТипыПолейИсточника = Новый Соответствие;
	
	Для Каждого Правило Из Правила Цикл
		
		Если ПустаяСтрока(Правило.СпособПоискаПеречисляемогоТипа) Тогда
			ИмяПоляИсточника = КолонкиВнешнихДанных[Правило.ИсточникИмя_ПриемникТип];
		Иначе
			ИмяПоляИсточника = КолонкиВнешнихДанных[Правило.ИсточникИмя_ПриемникТип] + "_" + Правило.ИмяПравила;
		КонецЕсли;
		
		Если Правило.Поиск И Правило.НомерСубконто = 0 Тогда
			
			Если ПримененныеГруппировки.Получить(ИмяПоляИсточника) = Неопределено Тогда
				Группировки = Группировки + ",
				|	Таблица." + ИмяПоляИсточника;
				ПримененныеГруппировки.Вставить(ИмяПоляИсточника, Истина);
			КонецЕсли;
			
			ИмяПоляПолучателя = Правило.ПриемникИмя;
			Если НЕ ПустаяСтрока(Правило.ПриемникИскатьПоИмя) Тогда
				ИмяПоляПолучателя = ИмяПоляПолучателя + "." + Правило.ПриемникИскатьПоИмя;
				ТекстПустогоЗначения = ПолучитьТекстПустогоЗначенияТипа(Правило.ПриемникИскатьПоТип);
			Иначе
				ТекстПустогоЗначения = Неопределено;
			КонецЕсли;
			
			ПримененныеСоединения.Вставить(ИмяПоляПолучателя, ИмяПоляИсточника);
			ТипыПолейИсточника.Вставить(ИмяПоляИсточника, Правило.ИсточникТип);
			
			Если НЕ Правило.ЭтоСсылкаТабличнойЧасти Тогда
				Если ТекстПустогоЗначения = Неопределено Тогда
					Соединения = Соединения + " 
					|	И Таблица." + ИмяПоляИсточника + " = ПравилаСопоставления." + ИмяПоляПолучателя;
					Соединения_получателя = Соединения_получателя + " 
					|	И Таблица." + ИмяПоляИсточника + " = ТаблицаПолучателя." + ИмяПоляПолучателя;
				Иначе
					Соединения = Соединения + " 
					|	"+?(ЗначениеЗаполнено(Соединения),"И ","")+"Таблица." + ИмяПоляИсточника + " = ЕСТЬNULL(ПравилаСопоставления." + ИмяПоляПолучателя + ", " + ТекстПустогоЗначения + ")";
					Соединения_получателя = Соединения_получателя + " 
					|	"+?(ЗначениеЗаполнено(Соединения_получателя),"И ","")+"Таблица." + ИмяПоляИсточника + " = ЕСТЬNULL(ТаблицаПолучателя." + ИмяПоляПолучателя + ", " + ТекстПустогоЗначения + ")";
				КонецЕсли;
			Иначе
				СоединенияВладельцаТабличнойЧасти = СоединенияВладельцаТабличнойЧасти + " 
				|	И Таблица." + ИмяПоляИсточника + " = ПравилаСопоставления." + ИмяПоляПолучателя;
				ПрямыеСоединенияВладельцаТабличнойЧасти = ПрямыеСоединенияВладельцаТабличнойЧасти + " 
				|	И Таблица." + ИмяПоляИсточника + " = ПравилаСопоставления2." + ?(ИмяПоляПолучателя = "Ссылка", ИмяПоляПолучателя, Сред(ИмяПоляПолучателя, СтрДлина("Ссылка.") + 1));
				СоединенияВладельцаТабличнойЧасти_получателя = СоединенияВладельцаТабличнойЧасти_получателя + " 
				|	И Таблица." + ИмяПоляИсточника + " = ТаблицаПолучателя." + ИмяПоляПолучателя;
				ПрямыеСоединенияВладельцаТабличнойЧасти_владельцаПолучателя = ПрямыеСоединенияВладельцаТабличнойЧасти_владельцаПолучателя + " 
				|	И Таблица." + ИмяПоляИсточника + " = ТаблицаПолучателяВладелец." + ?(ИмяПоляПолучателя = "Ссылка", ИмяПоляПолучателя, Сред(ИмяПоляПолучателя, СтрДлина("Ссылка.") + 1));
			КонецЕсли;
			
			Если Правило.ПриемникЕстьВладелец Тогда
				ИмяПоляПолучателяВладельца = "ПравилаСопоставления." + Правило.ПриемникИмя + ".Владелец";
				Если ТипЗнч(Правило.ПриемникВладелецСпособПоиска) = Тип("Строка") Тогда
					Соединения = Соединения + "
					|	И " + ИмяПоляПолучателяВладельца + " = ПравилаСопоставления." + Правило.ПриемникВладелец;
					Соединения_получателя = Соединения_получателя + "
					|	И " + ИмяПоляПолучателяВладельца + " = ТаблицаПолучателя." + Правило.ПриемникВладелец;
				Иначе
					ИмяПараметра = УникальноеИмяПеременной();
					Соединения = Соединения + "
					|	И " + ИмяПоляПолучателяВладельца + " = &" + ИмяПараметра;
					Запрос.УстановитьПараметр(ИмяПараметра, Правило.ПриемникВладелец);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Если ПримененныеПоля.Получить(ИмяПоляИсточника) = Неопределено Тогда
				Поля = Поля + ", 
				|	ПравилаСопоставления." + ИмяПоляИсточника;
				ПримененныеПоля.Вставить(ИмяПоляИсточника, Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ (РеквизитыПоискаПоУмолчанию = Неопределено И ВладелецПриемникаПоУмолчанию = Неопределено) Тогда
		
		НайденныеРеквизиты = ПолучитьМассивРеквизитов(ТипПриемника, РеквизитыПоискаПоУмолчанию, ВладелецПриемникаПоУмолчанию);
		
		Для Каждого ИмяРеквизита Из НайденныеРеквизиты Цикл
				
			ИмяПараметра = УникальноеИмяПеременной("ПоискПоВладельцу");
			Если ИмяРеквизита = "Владелец" И НЕ ВладелецПриемникаПоУмолчанию = Неопределено Тогда
				ЗначениеПараметра = ВладелецПриемникаПоУмолчанию;
			Иначе
				ЗначениеПараметра = РеквизитыПоискаПоУмолчанию[ИмяРеквизита];
			КонецЕсли;
			
			Запрос.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра);
			
			Если ПримененныеСоединения[ИмяРеквизита] = Неопределено Тогда
				Если НЕ ПриемникТабличнаяЧасть Тогда
					Соединения = Соединения + "
					|	И ПравилаСопоставления." + ИмяРеквизита + " = &" + ИмяПараметра;
					Соединения_получателя = Соединения_получателя + "
					|	И ТаблицаПолучателя." + ИмяРеквизита + " = &" + ИмяПараметра;
				Иначе
					СоединенияВладельцаТабличнойЧасти = СоединенияВладельцаТабличнойЧасти + " 
					|	И ПравилаСопоставления.Ссылка." + ИмяРеквизита + " = &" + ИмяПараметра;
					ПрямыеСоединенияВладельцаТабличнойЧасти = ПрямыеСоединенияВладельцаТабличнойЧасти + " 
					|	И ПравилаСопоставления2." + ИмяРеквизита + " = &" + ИмяПараметра;
					СоединенияВладельцаТабличнойЧасти_получателя = СоединенияВладельцаТабличнойЧасти_получателя + " 
					|	И ТаблицаПолучателя.Ссылка." + ИмяРеквизита + " = &" + ИмяПараметра;
					ПрямыеСоединенияВладельцаТабличнойЧасти_владельцаПолучателя = ПрямыеСоединенияВладельцаТабличнойЧасти_владельцаПолучателя + " 
					|	И ТаблицаПолучателяВладелец." + ИмяРеквизита + " = &" + ИмяПараметра;
				КонецЕсли;
			Иначе
				
				ТекстПустогоЗначения = ПолучитьТекстПустогоЗначенияТипа(ТипыПолейИсточника[ПримененныеСоединения[ИмяРеквизита]]);
				
				Если НЕ ТекстПустогоЗначения = Неопределено Тогда
					
					ИмяПоляИсточника = ПримененныеСоединения[ИмяРеквизита];
					
					Если НЕ ПриемникТабличнаяЧасть Тогда
						Соединения = Соединения + " 
						|	И ВЫБОР КОГДА Таблица." + ИмяПоляИсточника + " = " + ТекстПустогоЗначения + " 
						|		ТОГДА ПравилаСопоставления." + ИмяРеквизита + " = &" + ИмяПараметра + " 
						|		ИНАЧЕ ИСТИНА 
						|		КОНЕЦ";
						Соединения_получателя = Соединения_получателя + " 
						|	И ВЫБОР КОГДА Таблица." + ИмяПоляИсточника + " = " + ТекстПустогоЗначения + " 
						|		ТОГДА ТаблицаПолучателя." + ИмяРеквизита + " = &" + ИмяПараметра + " 
						|		ИНАЧЕ ИСТИНА 
						|		КОНЕЦ";
					Иначе
						СоединенияВладельцаТабличнойЧасти = СоединенияВладельцаТабличнойЧасти + " 
						|	И ВЫБОР КОГДА Таблица." + ИмяПоляИсточника + " = " + ТекстПустогоЗначения + " 
						|		ТОГДА ПравилаСопоставления.Ссылка." + ИмяРеквизита + " = &" + ИмяПараметра + " 
						|		ИНАЧЕ ИСТИНА 
						|		КОНЕЦ";
						ПрямыеСоединенияВладельцаТабличнойЧасти = ПрямыеСоединенияВладельцаТабличнойЧасти + " 
						|	И ВЫБОР КОГДА Таблица." + ИмяПоляИсточника + " = " + ТекстПустогоЗначения + " 
						|		ТОГДА ПравилаСопоставления2." + ИмяРеквизита + " = &" + ИмяПараметра + " 
						|		ИНАЧЕ ИСТИНА 
						|		КОНЕЦ";
						СоединенияВладельцаТабличнойЧасти_получателя = СоединенияВладельцаТабличнойЧасти_получателя + " 
						|	И ВЫБОР КОГДА Таблица." + ИмяПоляИсточника + " = " + ТекстПустогоЗначения + " 
						|		ТОГДА ТаблицаПолучателя.Ссылка." + ИмяРеквизита + " = &" + ИмяПараметра + " 
						|		ИНАЧЕ ИСТИНА 
						|		КОНЕЦ";
						ПрямыеСоединенияВладельцаТабличнойЧасти_владельцаПолучателя = ПрямыеСоединенияВладельцаТабличнойЧасти_владельцаПолучателя + " 
						|	И ВЫБОР КОГДА Таблица." + ИмяПоляИсточника + " = " + ТекстПустогоЗначения + " 
						|		ТОГДА ТаблицаПолучателяВладелец." + ИмяРеквизита + " = &" + ИмяПараметра + " 
						|		ИНАЧЕ ИСТИНА 
						|		КОНЕЦ";
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЕсли;
	
	Группировки = "Таблица.НомерСтроки" + Группировки;
	Соединения = сокрЛ(Соединения);
	если лев(Соединения,2)="И " тогда
		Соединения = сред(Соединения,2);
	конецЕсли;
	СоединенияВладельцаТабличнойЧасти = сокрЛ(СоединенияВладельцаТабличнойЧасти);
	если лев(СоединенияВладельцаТабличнойЧасти,2)="И " тогда
		СоединенияВладельцаТабличнойЧасти = сред(СоединенияВладельцаТабличнойЧасти,2);
	конецЕсли;
	ПрямыеСоединенияВладельцаТабличнойЧасти = сокрЛ(ПрямыеСоединенияВладельцаТабличнойЧасти);
	если лев(ПрямыеСоединенияВладельцаТабличнойЧасти,2)="И " тогда
		ПрямыеСоединенияВладельцаТабличнойЧасти = сред(ПрямыеСоединенияВладельцаТабличнойЧасти,2);
	конецЕсли;
	Соединения_получателя = сокрЛ(Соединения_получателя);
	если лев(Соединения_получателя,2)="И " тогда
		Соединения_получателя = сред(Соединения_получателя,2);
	конецЕсли;
	СоединенияВладельцаТабличнойЧасти_получателя = сокрЛ(СоединенияВладельцаТабличнойЧасти_получателя);
	если лев(СоединенияВладельцаТабличнойЧасти_получателя,2)="И " тогда
		СоединенияВладельцаТабличнойЧасти_получателя = сред(СоединенияВладельцаТабличнойЧасти_получателя,2);
	конецЕсли;
	ПрямыеСоединенияВладельцаТабличнойЧасти_владельцаПолучателя = сокрЛ(ПрямыеСоединенияВладельцаТабличнойЧасти_владельцаПолучателя);
	если лев(ПрямыеСоединенияВладельцаТабличнойЧасти_владельцаПолучателя,2)="И " тогда
		ПрямыеСоединенияВладельцаТабличнойЧасти_владельцаПолучателя = сред(ПрямыеСоединенияВладельцаТабличнойЧасти_владельцаПолучателя,2);
	конецЕсли;
	
	ВременнаяТаблица = УникальноеИмяПеременной("ВременнаяТаблица");
		
	Запрос.Текст = Запрос.Текст + "
	|
	|//СопоставитьВнешниеДанныеИПолучателя";
	
	ПрисоединитьПоля = Ложь;
	
	Если НЕ ПриемникТабличнаяЧасть Тогда
		
		Если НЕ ПустаяСтрока(Соединения) Тогда
			
			Если НЕ РодительСправочника = Неопределено Тогда
				
				ВременнаяТаблица2 = УникальноеИмяПеременной("ВременнаяТаблица2");
				ИмяПараметра = УникальноеИмяПеременной();
				
				Запрос.УстановитьПараметр(ИмяПараметра, РодительСправочника);
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ 
				|	" + ЗапросПолей(ТаблицаПолучателя) + " 
				|ПОМЕСТИТЬ " + ВременнаяТаблица2 + " 
				|	ИЗ " + ТаблицаПолучателя + " КАК Таблица 
				|ГДЕ 
				|	Таблица.Ссылка В ИЕРАРХИИ(&" + ИмяПараметра + ")
				|
				|;
				|
				|ВЫБРАТЬ 
				|	МИНИМУМ(ПравилаСопоставления.Ссылка) КАК Ссылка, 
				|	" + Группировки + " 
				|ПОМЕСТИТЬ " + ВременнаяТаблица + " 
				|ИЗ " + ТаблицаВнешниеДанные + " КАК Таблица 
				|	ЛЕВОЕ СОЕДИНЕНИЕ " + ВременнаяТаблица2 + " КАК ПравилаСопоставления 
				|		ПО " + Соединения + " 
				|СГРУППИРОВАТЬ 
				|ПО " + Группировки + "
				|
				|;
				|
				|УНИЧТОЖИТЬ " + ВременнаяТаблица2 + "
				|;
				|";
				
				НомераТаблиц.Вставить("ПОМЕСТИТЬ_" + ВременнаяТаблица2, 	НомераТаблиц.Количество());
				НомераТаблиц.Вставить("ПОМЕСТИТЬ_" + ВременнаяТаблица, 		НомераТаблиц.Количество());
				НомераТаблиц.Вставить("УНИЧТОЖИТЬ_" + ВременнаяТаблица2,	НомераТаблиц.Количество());
				
			Иначе
				
				Если ПриемникРегистрСведений Тогда
					
					Запрос.Текст = Запрос.Текст + "
					|ВЫБРАТЬ 
					|	NULL КАК Ссылка, 
					|	" + Группировки + " 
					|ПОМЕСТИТЬ " + ВременнаяТаблица + " ИЗ " + ТаблицаВнешниеДанные + " КАК Таблица 
					|ЛЕВОЕ СОЕДИНЕНИЕ " + ТаблицаПолучателя + " КАК ТаблицаПолучателя           
					|	ПО " + Соединения_получателя + " 
					|СГРУППИРОВАТЬ ПО " + Группировки + "
					|;
					|";
					
				Иначе
					
					Запрос.Текст = Запрос.Текст + "
					|ВЫБРАТЬ 
					|	МИНИМУМ(ТаблицаПолучателя.Ссылка) КАК Ссылка, 
					|	" + Группировки + " 
					|ПОМЕСТИТЬ " + ВременнаяТаблица + " ИЗ " + ТаблицаВнешниеДанные + " КАК Таблица 
					|ЛЕВОЕ СОЕДИНЕНИЕ " + ТаблицаПолучателя + " КАК ТаблицаПолучателя           
					|	ПО " + Соединения_получателя + " 
					|СГРУППИРОВАТЬ ПО " + Группировки + "
					|;
					|";
					
				КонецЕсли;
				
			КонецЕсли;
			
			НомераТаблиц.Вставить("ПОМЕСТИТЬ_" + ВременнаяТаблица, НомераТаблиц.Количество());
			
			ПрисоединитьПоля = Истина;
				
		Иначе
			
			Запрос.Текст = Запрос.Текст + "
			|ВЫБРАТЬ 
			|	NULL КАК Ссылка, 
			|	Таблица.* 
			|ПОМЕСТИТЬ " + ВременнаяТаблица + " 
			|ИЗ " + ТаблицаВнешниеДанные + " КАК Таблица
			|;
			|";
			
			НомераТаблиц.Вставить("ПОМЕСТИТЬ_" + ВременнаяТаблица, НомераТаблиц.Количество());
			
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(ВладелецТабличнойЧасти) Тогда
			
			ИмяПараметра = УникальноеИмяПеременной();
			Запрос.УстановитьПараметр(ИмяПараметра, ВладелецТабличнойЧасти);
			
			Запрос.Текст = Запрос.Текст + "
			|ВЫБРАТЬ &" + ИмяПараметра + " КАК Ссылка, Таблица.* 
			|ПОМЕСТИТЬ " + ВременнаяТаблица + " ИЗ " + ТаблицаВнешниеДанные + " КАК Таблица;
			|";
			
			НомераТаблиц.Вставить("ПОМЕСТИТЬ_" + ВременнаяТаблица, НомераТаблиц.Количество());
			
		ИначеЕсли ПустаяСтрока(СоединенияВладельцаТабличнойЧасти) Тогда	
			
			Если НЕ ПустаяСтрока(Соединения) Тогда
				
				Если НЕ РодительСправочника = Неопределено Тогда
					
					ВременнаяТаблица2 = УникальноеИмяПеременной("ВременнаяТаблица2");
					ИмяПараметра = УникальноеИмяПеременной();
					Запрос.УстановитьПараметр(ИмяПараметра, РодительСправочника);
					Запрос.Текст = Запрос.Текст + "
					|ВЫБРАТЬ Таблица.* 
					|ПОМЕСТИТЬ " + ВременнаяТаблица2 + " ИЗ " + ТаблицаПолучателя + " КАК Таблица 
					|ГДЕ Таблица.Ссылка В ИЕРАРХИИ(&" + ИмяПараметра + ")
					|;
					|ВЫБРАТЬ 
					|	МИНИМУМ(ПравилаСопоставления.Ссылка) КАК Ссылка, 
					|	" + Группировки + " 
					|ПОМЕСТИТЬ " + ВременнаяТаблица + " ИЗ " + ТаблицаВнешниеДанные + " КАК Таблица 
					|ЛЕВОЕ СОЕДИНЕНИЕ " + ВременнаяТаблица2 + " КАК ПравилаСопоставления 
					|	ПО " + Соединения + " 
					|СГРУППИРОВАТЬ ПО " + Группировки + ";
					|УНИЧТОЖИТЬ " + ВременнаяТаблица2 + ";
					|";
					
					НомераТаблиц.Вставить("ПОМЕСТИТЬ_" + ВременнаяТаблица2, НомераТаблиц.Количество());
					НомераТаблиц.Вставить("ПОМЕСТИТЬ_" + ВременнаяТаблица, НомераТаблиц.Количество());
					НомераТаблиц.Вставить("УНИЧТОЖИТЬ_" + ВременнаяТаблица2, НомераТаблиц.Количество());
					
				Иначе
					
					Запрос.Текст = Запрос.Текст + "
					|ВЫБРАТЬ 
					|	МИНИМУМ(ТаблицаПолучателя.Ссылка) КАК Ссылка, 
					|	" + Группировки + " 
					|ПОМЕСТИТЬ " + ВременнаяТаблица + " ИЗ " + ТаблицаВнешниеДанные + " КАК Таблица 
					|ЛЕВОЕ СОЕДИНЕНИЕ " + ТаблицаПолучателя + " КАК ТаблицаПолучателя        
					|	ПО " + Соединения_получателя + " 
					|СГРУППИРОВАТЬ ПО " + Группировки + ";
					|";
					
					НомераТаблиц.Вставить("ПОМЕСТИТЬ_" + ВременнаяТаблица, НомераТаблиц.Количество());
										
				КонецЕсли;
				
				ПрисоединитьПоля = Истина;
				
			Иначе
				
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ 
				|	NULL КАК Ссылка, 
				|	Таблица.* 
				|ПОМЕСТИТЬ " + ВременнаяТаблица + " ИЗ " + ТаблицаВнешниеДанные + " КАК Таблица;
				|";
				
				НомераТаблиц.Вставить("ПОМЕСТИТЬ_" + ВременнаяТаблица, НомераТаблиц.Количество());
				
			КонецЕсли;
			
		Иначе
			
			ТаблицаПолучателя_ = СтрЗаменить(ТаблицаПолучателя, ".", Символы.ПС);
			ТаблицаПолучателяВладелец = СтрПолучитьСтроку(ТаблицаПолучателя_, 1) + "." + СтрПолучитьСтроку(ТаблицаПолучателя_, 2);
			
			Если ПустаяСтрока(Соединения) Тогда
				
				Если НЕ РодительСправочника = Неопределено Тогда
					
					ВременнаяТаблица2 = УникальноеИмяПеременной("ВременнаяТаблица2");
					ИмяПараметра = УникальноеИмяПеременной();
					Запрос.УстановитьПараметр(ИмяПараметра, РодительСправочника);
					Запрос.Текст = Запрос.Текст + "
					|ВЫБРАТЬ " + ЗапросПолей(ТаблицаПолучателяВладелец) + " 
					|ПОМЕСТИТЬ " + ВременнаяТаблица2 + " ИЗ " + ТаблицаПолучателяВладелец + " КАК ТаблицаПолучателяВладелец  
					|ГДЕ ТаблицаПолучателяВладелец.Ссылка В ИЕРАРХИИ(&" + ИмяПараметра + ");
					|
					|ВЫБРАТЬ 
					|	МИНИМУМ(ПравилаСопоставления2.Ссылка) КАК Ссылка, 
					|	" + Группировки + " 
					|ПОМЕСТИТЬ " + ВременнаяТаблица + " ИЗ " + ТаблицаВнешниеДанные + " КАК Таблица 
					|ЛЕВОЕ СОЕДИНЕНИЕ " + ВременнаяТаблица2 + " КАК ПравилаСопоставления2 
					|	ПО " + ПрямыеСоединенияВладельцаТабличнойЧасти + " 
					|СГРУППИРОВАТЬ ПО " + Группировки + ";
					|УНИЧТОЖИТЬ " + ВременнаяТаблица2 + ";
					|";
					
					НомераТаблиц.Вставить("ПОМЕСТИТЬ_" + ВременнаяТаблица2, НомераТаблиц.Количество());
					НомераТаблиц.Вставить("ПОМЕСТИТЬ_" + ВременнаяТаблица, НомераТаблиц.Количество());
					НомераТаблиц.Вставить("УНИЧТОЖИТЬ_" + ВременнаяТаблица2, НомераТаблиц.Количество());
					
				Иначе
					
					Запрос.Текст = Запрос.Текст + "
					|ВЫБРАТЬ 
					|	МИНИМУМ(ТаблицаПолучателяВладелец.Ссылка) КАК Ссылка, 
					|	" + Группировки + " 
					|ПОМЕСТИТЬ " + ВременнаяТаблица + " ИЗ " + ТаблицаВнешниеДанные + " КАК Таблица 
					|ЛЕВОЕ СОЕДИНЕНИЕ " + ТаблицаПолучателяВладелец + " КАК ТаблицаПолучателяВладелец  
					|	ПО " + ПрямыеСоединенияВладельцаТабличнойЧасти_владельцаПолучателя + " 
					|СГРУППИРОВАТЬ ПО " + Группировки + ";
					|";
					
					НомераТаблиц.Вставить("ПОМЕСТИТЬ_" + ВременнаяТаблица, НомераТаблиц.Количество());
					
				КонецЕсли;
				
			Иначе
				
				Если НЕ РодительСправочника = Неопределено Тогда
					
					ВременнаяТаблица2 = УникальноеИмяПеременной("ВременнаяТаблица2");
					ВременнаяТаблица3 = УникальноеИмяПеременной("ВременнаяТаблица3");
					ИмяПараметра = УникальноеИмяПеременной();
					Запрос.УстановитьПараметр(ИмяПараметра, РодительСправочника);
					Запрос.Текст = Запрос.Текст + "
					|ВЫБРАТЬ ТаблицаПолучателя.* ПОМЕСТИТЬ " + ВременнаяТаблица2 + " ИЗ " + ТаблицаПолучателя + " КАК ТаблицаПолучателя   
					|ГДЕ ТаблицаПолучателя.Ссылка В ИЕРАРХИИ(&" + ИмяПараметра + ");
					|ВЫБРАТЬ " + ЗапросПолей(ТаблицаПолучателяВладелец) + " 
					|ПОМЕСТИТЬ " + ВременнаяТаблица3 + " ИЗ " + ТаблицаПолучателяВладелец + "КАК ТаблицаПолучателяВладелец  
					|ГДЕ ТаблицаПолучателяВладелец.Ссылка В ИЕРАРХИИ(&" + ИмяПараметра + ")
					|;
					|ВЫБРАТЬ 
					|	МИНИМУМ(ВЫБОР 
					|		КОГДА ПравилаСопоставления.Ссылка ЕСТЬ NULL 
					|		ТОГДА ПравилаСопоставления2.Ссылка 
					|		ИНАЧЕ ПравилаСопоставления.Ссылка                                                       
					|		КОНЕЦ) КАК Ссылка, 
					|	" + Группировки + " 
					|ПОМЕСТИТЬ " + ВременнаяТаблица + " ИЗ " + ТаблицаВнешниеДанные + " КАК Таблица 
					|ЛЕВОЕ СОЕДИНЕНИЕ " + ВременнаяТаблица2 + " КАК ПравилаСопоставления 
					|	ПО " + Соединения + " И " + СоединенияВладельцаТабличнойЧасти + " 
					|ЛЕВОЕ СОЕДИНЕНИЕ " + ВременнаяТаблица3 + " КАК ПравилаСопоставления2 
					|	ПО " + ПрямыеСоединенияВладельцаТабличнойЧасти + " 
					|СГРУППИРОВАТЬ ПО " + Группировки + ";
					|УНИЧТОЖИТЬ " + ВременнаяТаблица2 + ";
					|УНИЧТОЖИТЬ " + ВременнаяТаблица3 + ";
					|";
					
					НомераТаблиц.Вставить("ПОМЕСТИТЬ_" + ВременнаяТаблица2, НомераТаблиц.Количество());
					НомераТаблиц.Вставить("ПОМЕСТИТЬ_" + ВременнаяТаблица3, НомераТаблиц.Количество());
					НомераТаблиц.Вставить("ПОМЕСТИТЬ_" + ВременнаяТаблица, НомераТаблиц.Количество());
					НомераТаблиц.Вставить("УНИЧТОЖИТЬ_" + ВременнаяТаблица2, НомераТаблиц.Количество());
					НомераТаблиц.Вставить("УНИЧТОЖИТЬ_" + ВременнаяТаблица3, НомераТаблиц.Количество());
					
				Иначе
					
					Запрос.Текст = Запрос.Текст + "
					|ВЫБРАТЬ 
					|	МИНИМУМ(ВЫБОР 
					|		КОГДА ТаблицаПолучателя.Ссылка ЕСТЬ NULL 
					|		ТОГДА ТаблицаПолучателяВладелец.Ссылка 
					|		ИНАЧЕ ТаблицаПолучателя.Ссылка 
					|		КОНЕЦ) КАК Ссылка, 
					|	" + Группировки + " 
					|ПОМЕСТИТЬ " + ВременнаяТаблица + " ИЗ " + ТаблицаВнешниеДанные + " КАК Таблица 
					|ЛЕВОЕ СОЕДИНЕНИЕ " + ТаблицаПолучателя + " КАК ТаблицаПолучателя              
					|	ПО " + Соединения_получателя + " И " + СоединенияВладельцаТабличнойЧасти_получателя + " 
					|ЛЕВОЕ СОЕДИНЕНИЕ " + ТаблицаПолучателяВладелец + " КАК ТаблицаПолучателяВладелец   
					|	ПО " + ПрямыеСоединенияВладельцаТабличнойЧасти_владельцаПолучателя + " 
					|СГРУППИРОВАТЬ ПО " + Группировки + ";
					|";
					
					НомераТаблиц.Вставить("ПОМЕСТИТЬ_" + ВременнаяТаблица, НомераТаблиц.Количество());
					
				КонецЕсли;
				
			КонецЕсли;
			
			ПрисоединитьПоля = Истина;
			
		КонецЕсли;
		
		ВременнаяТаблица2 = УникальноеИмяПеременной("ВременнаяТаблица2");
		
		Если ПустаяСтрока(Соединения) ИЛИ НЕ ПриемникИскатьСтрокиТабличнойЧасти Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|ВЫБРАТЬ 
			|	NULL КАК НомерСтрокиТабличнойЧасти, 
			|	Таблица.* 
			|ПОМЕСТИТЬ " + ВременнаяТаблица2 + " ИЗ " + ВременнаяТаблица + " КАК Таблица;
			|";
			
			НомераТаблиц.Вставить("ПОМЕСТИТЬ_" + ВременнаяТаблица2, НомераТаблиц.Количество());
			
		Иначе
			
			Запрос.Текст = Запрос.Текст + "
			|ВЫБРАТЬ 
			|	МИНИМУМ(ТаблицаПолучателя.НомерСтроки) КАК НомерСтрокиТабличнойЧасти, 
			|	Таблица.Ссылка, 
			|	" + Группировки + " 
			|ПОМЕСТИТЬ " + ВременнаяТаблица2 + " ИЗ " + ВременнаяТаблица + " КАК Таблица 
			|ЛЕВОЕ СОЕДИНЕНИЕ " + ТаблицаПолучателя + " КАК ТаблицаПолучателя                  
			|	ПО Таблица.Ссылка = ТаблицаПолучателя.Ссылка И " + Соединения_получателя + " 
			|СГРУППИРОВАТЬ ПО Таблица.Ссылка, " + Группировки + ";
			|";
			
			ПрисоединитьПоля = Истина;
			
			НомераТаблиц.Вставить("ПОМЕСТИТЬ_" + ВременнаяТаблица2, НомераТаблиц.Количество());
			
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|УНИЧТОЖИТЬ " + ВременнаяТаблица + ";
		|";
		
		НомераТаблиц.Вставить("УНИЧТОЖИТЬ_" + ВременнаяТаблица, НомераТаблиц.Количество());
		
		ВременнаяТаблица = ВременнаяТаблица2;
			
	КонецЕсли;
	
	Если ПрисоединитьПоля И НЕ ПустаяСтрока(Поля) Тогда
	
		ВременнаяТаблица2 = УникальноеИмяПеременной("ВременнаяТаблица2");
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ 
		|	Таблица.*" + Поля + " 
		|ПОМЕСТИТЬ " + ВременнаяТаблица2 + " ИЗ " + ВременнаяТаблица + " КАК Таблица 
		|ЛЕВОЕ СОЕДИНЕНИЕ " + ТаблицаВнешниеДанные + " КАК ПравилаСопоставления 
		|	ПО Таблица.НомерСтроки = ПравилаСопоставления.НомерСтроки;
		|УНИЧТОЖИТЬ " + ВременнаяТаблица + ";
		|";
		
		НомераТаблиц.Вставить("ПОМЕСТИТЬ_" + ВременнаяТаблица2, НомераТаблиц.Количество());
		НомераТаблиц.Вставить("УНИЧТОЖИТЬ_" + ВременнаяТаблица, НомераТаблиц.Количество());
				
		ВременнаяТаблица = ВременнаяТаблица2;
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|УНИЧТОЖИТЬ " + ТаблицаВнешниеДанные + ";
	|ВЫБРАТЬ Таблица.* 
	|ПОМЕСТИТЬ " + ТаблицаВнешниеДанные + " ИЗ " + ВременнаяТаблица + " КАК Таблица 
	|ИНДЕКСИРОВАТЬ ПО НомерСтроки;
	|УНИЧТОЖИТЬ " + ВременнаяТаблица + ";
	|";
	
	НомераТаблиц.Вставить("Уничтожить_" + ТаблицаВнешниеДанные, НомераТаблиц.Количество());
	НомераТаблиц.Вставить("вт_" + ТаблицаВнешниеДанные, НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожить_" + ВременнаяТаблица, НомераТаблиц.Количество());
	
КонецФункции

Функция УбратьПолностьюСопоставленныеДанные(Запрос, ТаблицаВнешниеДанные, КолонкиВнешнихДанных, ПараметрыИмпорта, Правила, НомераТаблиц)
	
	ТаблицаПолучателя = ПараметрыИмпорта.ТаблицаПолучателя;
	ПриемникТабличнаяЧасть = ПараметрыИмпорта.ПриемникТабличнаяЧасть;
	ПриемникРегистрСведений = ПараметрыИмпорта.ПриемникРегистрСведений;
	
	ИмяТаблицыПолучателя = стрЗаменить(ТаблицаПолучателя,".","_");
	ТаблицаВнешниеДанные2 = ТаблицаВнешниеДанные + "_2";
	
	Если ПриемникРегистрСведений Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПриемникРегистрСведений Тогда
		Условие = "ИСТИНА";
	Иначе
		Условие = ТаблицаВнешниеДанные2 + ".Ссылка = "+ИмяТаблицыПолучателя+".Ссылка";
	КонецЕсли;
	
	Если ПриемникТабличнаяЧасть Тогда
		Условие = Условие + " 
		|	И " + ТаблицаВнешниеДанные2 + ".НомерСтрокиТабличнойЧасти = "+ИмяТаблицыПолучателя+".НомерСтроки";
	КонецЕсли;
	
	ТипСтрока0 = Новый ОписаниеТипов("Строка");
	
	Для Каждого Правило Из Правила Цикл
		
		ПравилоПриемникИмя = Правило.ПриемникИмя;
		
		Если Правило.НомерСубконто > 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если Правило.ПриемникТип = ТипСтрока0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ПустаяСтрока(Правило.СпособПоискаПеречисляемогоТипа) Тогда
			ИмяПоляИсточника = КолонкиВнешнихДанных[Правило.ИсточникИмя_ПриемникТип];
		Иначе
			ИмяПоляИсточника = КолонкиВнешнихДанных[Правило.ИсточникИмя_ПриемникТип] + "_" + Правило.ИмяПравила;
		КонецЕсли;
		
		Если ПустаяСтрока(Правило.ПриемникИскатьПоИмя) Тогда
			
			Условие = Условие + " 
			|	И " + ТаблицаВнешниеДанные2 + "." + ИмяПоляИсточника + " = "+ИмяТаблицыПолучателя+"." + ПравилоПриемникИмя;
			
		Иначе
			
			Условие = Условие + " 
			|	И " + ТаблицаВнешниеДанные2 + "." + ИмяПоляИсточника + " = "+ИмяТаблицыПолучателя+"." + ПравилоПриемникИмя + "." + Правило.ПриемникИскатьПоИмя;
			
			Если Правило.ПриемникЕстьВладелец Тогда
				
				Если ТипЗнч(Правило.ПриемникВладелецСпособПоиска) = Тип("ОписаниеТипов") Тогда
					ИмяПараметра = УникальноеИмяПеременной();
					Запрос.УстановитьПараметр(ИмяПараметра, Правило.ПриемникВладелец);
					Условие = Условие + "
					|	И "+ИмяТаблицыПолучателя+"." + ПравилоПриемникИмя + ".Владелец = &" + ИмяПараметра;
				Иначе
					Условие = Условие + " 
					|	И "+ИмяТаблицыПолучателя+"." + ПравилоПриемникИмя + ".Владелец = "+ИмяТаблицыПолучателя+"." + Правило.ПриемникВладелец;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПриемникРегистрСведений Тогда
		Условие2 = "НЕ (" + Условие + ")";
	Иначе
		Условие2 = ""+ИмяТаблицыПолучателя+".Ссылка ЕСТЬ NULL";
	КонецЕсли;
	
	ВременнаяТаблица = УникальноеИмяПеременной("ВременнаяТаблица");
	
	Запрос.Текст = Запрос.Текст + "
	|
	|//УбратьПолностьюСопоставленныеДанные
	|
	|ВЫБРАТЬ "+ТаблицаВнешниеДанные2+".* 
	|ПОМЕСТИТЬ " + ВременнаяТаблица + " ИЗ " + ТаблицаВнешниеДанные + " КАК "+ТаблицаВнешниеДанные2+" 
	|ЛЕВОЕ СОЕДИНЕНИЕ " + ТаблицаПолучателя + " КАК "+ИмяТаблицыПолучателя+" ПО " + Условие + " 
	|ГДЕ " + Условие2 + ";
	|УНИЧТОЖИТЬ " + ТаблицаВнешниеДанные + "
	|;
	|ВЫБРАТЬ "+ТаблицаВнешниеДанные2+".* 
	|ПОМЕСТИТЬ " + ТаблицаВнешниеДанные + " ИЗ " + ВременнаяТаблица + " КАК "+ТаблицаВнешниеДанные2+" 
	|ИНДЕКСИРОВАТЬ ПО НомерСтроки;
	|УНИЧТОЖИТЬ " + ВременнаяТаблица + ";
	|";
	
	НомераТаблиц.Вставить("ПОМЕСТИТЬ_ВременнаяТаблица_" + ВременнаяТаблица);
	НомераТаблиц.Вставить("УНИЧТОЖИТЬ_ТаблицаВнешниеДанные_" + ТаблицаВнешниеДанные);
	НомераТаблиц.Вставить("ПОМЕСТИТЬ_ТаблицаВнешниеДанные_" + ТаблицаВнешниеДанные);
	НомераТаблиц.Вставить("УНИЧТОЖИТЬ_ВременнаяТаблица_" + ВременнаяТаблица);
	
Конецфункции

Функция СопоставитьДополнительныеДанные(Запрос, ТаблицаВнешниеДанные, КолонкиВнешнихДанных, Правила, ПриемникТабличнаяЧасть, РодительСправочника, ТаблицаПолучателя, ВладельцыПоУмолчанию, РеквизитыПоискаПоУмолчанию)
	
	ДополнительныеДанные = Новый Соответствие;
	
	ЕстьПодчиненныеПравила = Ложь;
	ПодчиненныеПравила = Новый ТаблицаЗначений;
	ПодчиненныеПравила.Колонки.Добавить("Правило"); // ссылка на строку из таблицы Правила
	ПодчиненныеПравила.Колонки.Добавить("ПриемникИмяКорень");
	ПодчиненныеПравила.Колонки.Добавить("ПриемникИмяДочернее");
	
	СоединяющиесяИменаПолейПриемника = Новый ТаблицаЗначений;
	СоединяющиесяИменаПолейПриемника.Колонки.Добавить("ПриемникИмя");
	СоединяющиесяИменаПолейПриемника.Колонки.Добавить("ФлагОбработано");
	СоединяющиесяИменаПолейПриемника.Колонки.Добавить("СтрокиПравил"); // массив со ссылками на строки таблицы Правила
	
	Для Каждого Правило Из Правила Цикл
		
		Если СтрНайти(Правило.ПриемникИмя,".")<>0 Тогда
			
			стр = ПодчиненныеПравила.Добавить();
			стр.Правило = Правило;
			стр.ПриемникИмяКорень 	= Лев (Правило.ПриемникИмя, СтрНайти(Правило.ПриемникИмя,".")-1);
			стр.ПриемникИмяДочернее = Сред(Правило.ПриемникИмя, СтрНайти(Правило.ПриемникИмя,".")+1);
			
			ЕстьПодчиненныеПравила = Истина;
			
		Иначе
			
			Уник = СоединяющиесяИменаПолейПриемника.Найти(Правило.ПриемникИмя,"ПриемникИмя");
			Если Уник=Неопределено Тогда
				Уник = СоединяющиесяИменаПолейПриемника.Добавить();
				Уник.ПриемникИмя = Правило.ПриемникИмя;
				Уник.ФлагОбработано = Ложь;
				Уник.СтрокиПравил = Новый Массив;
			КонецЕсли;
			Уник.СтрокиПравил.Добавить(Правило);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Правило Из Правила Цикл
		
		Если СоединяющиесяИменаПолейПриемника.Найти(Правило.ПриемникИмя,"ПриемникИмя")<>Неопределено
			И СоединяющиесяИменаПолейПриемника.Найти(Правило.ПриемникИмя,"ПриемникИмя").ФлагОбработано
			Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(Правило.ПриемникИскатьПоИмя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Правило.ЭтоСсылкаТабличнойЧасти Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(Правило.СпособПоискаПеречисляемогоТипа) Тогда
			ИмяПоляИсточника = КолонкиВнешнихДанных[Правило.ИсточникИмя_ПриемникТип];
		Иначе
			ИмяПоляИсточника = КолонкиВнешнихДанных[Правило.ИсточникИмя_ПриемникТип] + "_" + Правило.ИмяПравила;
		КонецЕсли;
		
		ВременнаяТаблица1 = УникальноеИмяПеременной("ВременнаяТаблица1");
		ВременнаяТаблица2 = УникальноеИмяПеременной("ВременнаяТаблица2");
		ВременнаяТаблица3 = УникальноеИмяПеременной("ВременнаяТаблица3");
		ИмяТаблицы = Метаданные.НайтиПоТипу(Правило.ПриемникТип.Типы()[0]).ПолноеИмя();
		
		ИмяТаблицыТекст = стрЗаменить(ИмяТаблицы,".","_");
		если НЕ РодительСправочника = Неопределено И ТипЗнч(РодительСправочника) = Правило.ПриемникТип тогда
			ИмяВременнойТаблицы = ВременнаяТаблица3;
		иначе
			ИмяВременнойТаблицы = ИмяТаблицыТекст;
		конецЕсли;
		
		Группировки1 = "";
		Группировки2 = "Таблица.НомерСтроки, Таблица.Ключ";
		
		ПолеВнешнихДанных = "Таблица." + ИмяПоляИсточника;
		ПолеТаблицы = ИмяВременнойТаблицы+"." + Правило.ПриемникИскатьПоИмя;  
		Соединение = "Таблица.Ключ = " + ПолеТаблицы;
		//=== доработка для связи по множественным полям на динамической глубине в иерархии полей запроса:   =====
		Если ЕстьПодчиненныеПравила Тогда
			Группировки1 = ПолеВнешнихДанных;
			ПолеВнешнихДанных = ПолеВнешнихДанных + " КАК Ключ";
			ОтборПоиска = Новый Структура;
			ОтборПоиска.Вставить("ПриемникИмяКорень",Правило.ПриемникИмя);
			МассивПодчиненных = ПодчиненныеПравила.НайтиСтроки(ОтборПоиска);
			Для Каждого ДополнительноеПравило Из МассивПодчиненных Цикл
				ИмяПоля = КолонкиВнешнихДанных[ДополнительноеПравило.Правило.ИсточникИмя_ПриемникТип];
				ПолеВнешнихДанных = ПолеВнешнихДанных + ",
				|			Таблица." + ИмяПоля + " КАК ДочернийКлюч_" + ИмяПоля;
				Соединение = Соединение + "
				|			И Таблица.ДочернийКлюч_" + ИмяПоля + 
				" = " + ИмяВременнойТаблицы + "." + ДополнительноеПравило.ПриемникИмяДочернее + 
				"." + ДополнительноеПравило.Правило.ПриемникИскатьПоИмя;
				Группировки1 = Группировки1 + ",
				|			Таблица." + ИмяПоля;
			КонецЦикла;
		КонецЕсли;
		СоединяющеесяПоле = ?(СтрНайти(Правило.ПриемникИмя,".")=0, СоединяющиесяИменаПолейПриемника.Найти(Правило.ПриемникИмя,"ПриемникИмя"), Неопределено);
		Если СоединяющеесяПоле<>Неопределено Тогда
			КлючевыеПоля = Новый Массив;
			Если НЕ ЕстьПодчиненныеПравила Тогда
				Группировки1 = ПолеВнешнихДанных;
				КлючевыеПоля.Добавить(ПолеВнешнихДанных);
				ПолеВнешнихДанных = ПолеВнешнихДанных + " КАК Ключ";
			КонецЕсли;
			ПерваяИтерация = Истина;
			Для Каждого ДополнительноеПравило Из СоединяющеесяПоле.СтрокиПравил Цикл
				
				ИмяПоля = КолонкиВнешнихДанных[ДополнительноеПравило.ИсточникИмя_ПриемникТип];
				Если КлючевыеПоля.Найти(ИмяПоля) <> Неопределено Тогда
					Продолжить;//поле источника использовано несколько раз в приемнике
				КонецЕсли;
				
				ПолеВнешнихДанных = ПолеВнешнихДанных + ?(ПерваяИтерация И НЕ ЗначениеЗаполнено(ПолеВнешнихДанных),"",",
				|")+"			Таблица." + ИмяПоля + " КАК Ключ_" + ИмяПоля;
				Соединение = Соединение + "
				|			И Таблица.Ключ_" + ИмяПоля + 
				" = " + ИмяВременнойТаблицы + //"." + ДополнительноеПравило.ПриемникИмя + 
				"." + ДополнительноеПравило.ПриемникИскатьПоИмя;
				Если КлючевыеПоля.Найти(ИмяПоля)=Неопределено Тогда // (не добавляем повторяющиеся значения)
					КлючевыеПоля.Добавить(ИмяПоля);
					Группировки1 = Группировки1 + ?(ПерваяИтерация И НЕ ЗначениеЗаполнено(ПолеВнешнихДанных),"",",
					|")+"			Таблица." + ИмяПоля;
				КонецЕсли;
				ПерваяИтерация = Ложь;
			КонецЦикла;
			КлючевыеПоля.Очистить();
			СоединяющеесяПоле.ФлагОбработано = Истина;
		КонецЕсли;
		//========================================================================================================
		ОбратноеСоединение = "Таблица." + ИмяПоляИсточника + " = "+ВременнаяТаблица2+".Ключ";
		
		Если Правило.ПриемникЕстьВладелец Тогда
			
			Если ТипЗнч(Правило.ПриемникВладелецСпособПоиска) = Тип("ОписаниеТипов") Тогда
				ИмяПараметра = УникальноеИмяПеременной();
				Запрос.УстановитьПараметр(ИмяПараметра, Правило.ПриемникВладелец);
				Соединение = Соединение + " 
				|	И "+ИмяВременнойТаблицы+".Владелец = &" + ИмяПараметра;
			ИначеЕсли Правило.ПриемникВладелец = "Ссылка" Тогда
				ПолеВнешнихДанныхВладелец = "ЕСТЬNULL(Таблица.Ссылка, Таблица.НомерСтроки)";
				Группировки1 = ПолеВнешнихДанных + ", 
				|	" + ПолеВнешнихДанныхВладелец;
				Группировки2 = Группировки2 + ", 
				|	Таблица.Ссылка";
				ПолеВнешнихДанных = ПолеВнешнихДанных + " КАК Ключ, 
				|	" + ПолеВнешнихДанныхВладелец + " КАК Ссылка";
				Соединение = Соединение + " 
				|	И Таблица.Ссылка = П.Владелец";
				ОбратноеСоединение = ОбратноеСоединение + " 
				|	И " + ПолеВнешнихДанныхВладелец + " = "+ВременнаяТаблица2+".Ссылка";
			Иначе
				
				Если ПриемникТабличнаяЧасть Тогда
					
					ТаблицаПолучателя_ = СтрЗаменить(ТаблицаПолучателя, ".", Символы.ПС);
					ОсновнаяТаблицаПолучателя = СтрПолучитьСтроку(ТаблицаПолучателя_, 1) + "." + СтрПолучитьСтроку(ТаблицаПолучателя_, 2);
					
					ТипизированнаяСсылка = "ВЫРАЗИТЬ (Таблица.Ссылка КАК "+ ОсновнаяТаблицаПолучателя + ")";
					
				Иначе
					ТипизированнаяСсылка = "ВЫРАЗИТЬ (Таблица.Ссылка КАК "+ ТаблицаПолучателя + ")";
				КонецЕсли;
				
				ПолеВнешнихДанныхВладелец = "ВЫБОР КОГДА Таблица.Ссылка ЕСТЬ NULL 
				|	ТОГДА Таблица.НомерСтроки 
				|	ИНАЧЕ ЕСТЬNULL(" + ТипизированнаяСсылка + "." + Правило.ПриемникВладелец + ", Таблица.НомерСтроки) 
				|	КОНЕЦ";
				Группировки1 = ПолеВнешнихДанных + ", 
				|	" + ПолеВнешнихДанныхВладелец;
				Группировки2 = Группировки2 + ", 
				|	Таблица.Владелец";
				ПолеВнешнихДанных = ПолеВнешнихДанных + " КАК Ключ, " + ПолеВнешнихДанныхВладелец + " КАК Владелец";
				Соединение = Соединение + " 
				|	И Таблица.Владелец = П.Владелец";
				ОбратноеСоединение = ОбратноеСоединение + " 
				|	И " + ПолеВнешнихДанныхВладелец + " = "+ВременнаяТаблица2+".Владелец";
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ РеквизитыПоискаПоУмолчанию = Неопределено Тогда
			
			ПримененныеСоединения = Новый Соответствие;
			ТипыПолейИсточника = Новый Соответствие;
			
			ПримененныеСоединения.Вставить(Правило.ПриемникИскатьПоИмя, "Ключ");
			ТипыПолейИсточника.Вставить("Ключ", Правило.ИсточникТип); 
			
			НайденныеРеквизиты = ПолучитьМассивРеквизитов(Правило.ПриемникТип, РеквизитыПоискаПоУмолчанию, ВладельцыПоУмолчанию[Правило.ПриемникТип]);
			
			Для Каждого ИмяРеквизита Из НайденныеРеквизиты Цикл
					
				ИмяПараметра = УникальноеИмяПеременной();
				Если ИмяРеквизита = "Владелец" И НЕ ВладельцыПоУмолчанию[Правило.ПриемникТип] = Неопределено Тогда
					ЗначениеПараметра = ВладельцыПоУмолчанию[Правило.ПриемникТип];
				Иначе
					ЗначениеПараметра = РеквизитыПоискаПоУмолчанию[ИмяРеквизита];
				КонецЕсли;
				
				Запрос.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра);
				
				ИмяПоляИсточника = ПримененныеСоединения[ИмяРеквизита];
				
				Если ИмяПоляИсточника = Неопределено Тогда
					Соединение = Соединение + " 
					|	И "+ИмяВременнойТаблицы+"." + ИмяРеквизита + " = &" + ИмяПараметра;
				Иначе
					
					ТекстПустогоЗначения = ПолучитьТекстПустогоЗначенияТипа(ТипыПолейИсточника[ПримененныеСоединения[ИмяРеквизита]]);
					Если НЕ ТекстПустогоЗначения = Неопределено Тогда
						Соединение = Соединение + " 
					|	И ВЫБОР КОГДА Таблица." + ИмяПоляИсточника + " = " + ТекстПустогоЗначения + " 
					|		ТОГДА "+ИмяВременнойТаблицы+"." + ИмяРеквизита + " = &" + ИмяПараметра + " 
					|		ИНАЧЕ ИСТИНА 
					|		КОНЕЦ";
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЕсли;
		
		Если ПустаяСтрока(Группировки1) Тогда
			Группировки1 = ПолеВнешнихДанных;
			ПолеВнешнихДанных = ПолеВнешнихДанных + " КАК Ключ";
		КонецЕсли;
				
		
		Запрос.Текст = Запрос.Текст + "
		|
		|
		|//СопоставитьДополнительныеДанные - " + Правило.ПриемникИмя + "
		|ВЫБРАТЬ 
		|	МИНИМУМ(Таблица.НомерСтроки) КАК НомерСтроки, 
		|	" + ПолеВнешнихДанных + " 
		|ПОМЕСТИТЬ " + ВременнаяТаблица1 + " 
		|ИЗ " + ТаблицаВнешниеДанные + " КАК Таблица 
		|СГРУППИРОВАТЬ ПО 
		|	" + Группировки1 + "
		|;";
		Если НЕ РодительСправочника = Неопределено И ТипЗнч(РодительСправочника) = Правило.ПриемникТип Тогда
			ИмяПараметра = УникальноеИмяПеременной();
			Запрос.Текст = Запрос.Текст + "
			|ВЫБРАТЬ 
			|	" + ЗапросПолей(ИмяТаблицы) + " 
			|ПОМЕСТИТЬ " + ВременнаяТаблица3 + " 
			|ИЗ " + ИмяТаблицы + " 
			|ГДЕ Таблица.Ссылка В ИЕРАРХИИ(&" + ИмяПараметра + ")
			|;
			|ВЫБРАТЬ 
			|	" + Группировки2 + ", 
			|	МИНИМУМ(П.Ссылка) КАК Значение 
			|ПОМЕСТИТЬ " + ВременнаяТаблица2 + " 
			|ИЗ " + ВременнаяТаблица1 + " КАК Таблица 
			|ЛЕВОЕ СОЕДИНЕНИЕ " + ВременнаяТаблица3 + " КАК "+ВременнаяТаблица3+"   
			|	ПО " + Соединение + " 
			|СГРУППИРОВАТЬ ПО " + Группировки2 + ";
			|УНИЧТОЖИТЬ " + ВременнаяТаблица3 + "
			|;";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|ВЫБРАТЬ 
			|	" + Группировки2 + ", 
			|	МИНИМУМ(" + ИмяТаблицыТекст + ".Ссылка) КАК Значение 
			|ПОМЕСТИТЬ " + ВременнаяТаблица2 + " 
			|ИЗ " + ВременнаяТаблица1 + " КАК Таблица 
			|ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК " + ИмяТаблицыТекст + "  
			|	ПО " + Соединение + " 
			|СГРУППИРОВАТЬ ПО " + Группировки2 + "
			|;";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|УНИЧТОЖИТЬ " + ВременнаяТаблица1 + ";
		|ВЫБРАТЬ Таблица.НомерСтроки КАК Ключ, Таблица.Значение ИЗ " + ВременнаяТаблица2 + " КАК Таблица;
		|ВЫБРАТЬ Таблица.НомерСтроки, "+ВременнаяТаблица2+".НомерСтроки КАК Ключ ИЗ " + ТаблицаВнешниеДанные + " КАК Таблица 
		|ЛЕВОЕ СОЕДИНЕНИЕ " + ВременнаяТаблица2 + " КАК "+ВременнаяТаблица2+"   
		|	ПО " + ОбратноеСоединение + ";
		|УНИЧТОЖИТЬ " + ВременнаяТаблица2 + ";
		|";
		
		ДополнительныеДанные.Вставить(Правило.ПриемникИмя, СтрЧислоВхождений(Запрос.Текст, ";") - 2);
		
	КонецЦикла;
	
	Возврат ДополнительныеДанные;
	
Конецфункции

Функция ДобавитьОсновнуюВыборку(Запрос, ТаблицаВнешниеДанные, НомераТаблиц)
	
	Запрос.Текст = Запрос.Текст + "
	|
	|ВЫБРАТЬ Таблица"+ТаблицаВнешниеДанные+".* ИЗ " + ТаблицаВнешниеДанные + " КАК Таблица"+ТаблицаВнешниеДанные+" УПОРЯДОЧИТЬ ПО Таблица" + ТаблицаВнешниеДанные + ".НомерСтроки";
	
	НомераТаблиц.Вставить("ВЫБРАТЬ_" + ТаблицаВнешниеДанные, НомераТаблиц.Количество());
	
Конецфункции

#КонецОбласти


#Область ВспомогательныеПроцедурыПриОбходеВыборки

Функция НайтиПоЗначениюРеквизита(Значение, ИмяРеквизита, Таблица, Родитель = Неопределено, Владелец = Неопределено, ЭтоДокумент, ЭтоПланСчетовИлиПланВидовХарактеристик)
	
	Если ЭтоДокумент Тогда
		
		Если ИмяРеквизита = "Номер" Тогда
			НовоеЗначение = Таблица.НайтиПоНомеру(Значение);
		Иначе
			НовоеЗначение = Таблица.НайтиПоРеквизиту(ИмяРеквизита, Значение);
		КонецЕсли;
		
	ИначеЕсли ЭтоПланСчетовИлиПланВидовХарактеристик Тогда
		
		Если ИмяРеквизита = "Наименование" Тогда
			НовоеЗначение = Таблица.НайтиПоНаименованию(Значение, Истина, Родитель);
		ИначеЕсли ИмяРеквизита = "Код" Тогда
			НовоеЗначение = Таблица.НайтиПоКоду(Значение, Родитель);
		Иначе
			НовоеЗначение = Таблица.НайтиПоРеквизиту(ИмяРеквизита, Значение, Родитель);
		КонецЕсли;
		
	Иначе
		
		Если ИмяРеквизита = "Наименование" Тогда
			НовоеЗначение = Таблица.НайтиПоНаименованию(Значение, Истина, Родитель, Владелец);
		ИначеЕсли ИмяРеквизита = "Код" Тогда
			НовоеЗначение = Таблица.НайтиПоКоду(Значение,, Родитель, Владелец);
		Иначе
			НовоеЗначение = Таблица.НайтиПоРеквизиту(ИмяРеквизита, Значение, Родитель, Владелец);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовоеЗначение;
	
КонецФункции

Функция ЗначениеВладельцаПоПравилу(Правило, ЗагружаемыйОбъект, ЗагруженныеОбъекты, НомерСтрокиВыборки, ОстанавливатьсяПриОшибке, ПакетныйИмпорт)
	
	ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ = "Обработка.ИмпортДанныхИзЭлектронныхТаблицMicrosoftExcel.МодульМенеджера.ЗначениеВладельцаПоПравилу";
	
	Если НЕ Правило.ПриемникЕстьВладелец Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Правило.ПриемникВладелецСпособПоиска) = Тип("ОписаниеТипов") Тогда
		Возврат Правило.ПриемникВладелец;
		
	ИначеЕсли Правило.ПриемникВладелец = "Ссылка" Тогда
		
		Если ЗагружаемыйОбъект.ЭтоНовый() Тогда
			
			Попытка
				НетОшибок = ЗаписатьОбъектЗапротоколироватьОшибку(ЗагружаемыйОбъект, ЗагруженныеОбъекты,,, НомерСтрокиВыборки, ОстанавливатьсяПриОшибке, ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ, " (Владелец)", ПакетныйИмпорт);
			Исключение
				ВызватьИсключение;
			КонецПопытки;
			
		Иначе
			
			НетОшибок = Истина;
			
		КонецЕсли;
		
		Если НетОшибок Тогда
			Возврат ЗагружаемыйОбъект.Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		Возврат ЗагружаемыйОбъект[Правило.ПриемникВладелец];
	КонецЕсли;
	
КонецФункции

#КонецОбласти


#Область ПроцедурыЗагрузки

Функция ПолучитьЗагрузитьДанные(ИмяФайла, ИмяТаблицы, Знач Правила, Соединения, Условие, Первые1, Знач ДобавочныеПоля, 
								Приемник, ВладелецТабличнойЧасти, РодительСправочника, ПараметрыЗагрузки, 
								СтруктураЗначенийРеквизитовПоУмолчанию, ПараметрическийОтбор, ПакетныйИмпорт, ИмяИсходногоФайла="")
	
	ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ = "Обработка.ИмпортДанныхИзЭлектронныхТаблицMicrosoftExcel.МодульМенеджера.ПолучитьЗагрузитьДанные";
	
	Если Правила.Количество() = 0 Тогда
		Возврат Новый Структура("ПротоколЗагруженоОбъектов,ЗагруженныеОбъекты", 0, Новый Соответствие); // аналогично ЗагрузитьДанные()
	КонецЕсли;
	
	ИспользуютсяДобавочныеПоля = Ложь;
	
	Правила.Колонки.Добавить("ИсточникИмя_ПриемникТип", Новый ОписаниеТипов("Строка"));
	Для Каждого Правило Из Правила Цикл
		
		Если ПустаяСтрока(Правило.СпособПоискаПеречисляемогоТипа) Тогда
			ТипПриемника = ?(ПустаяСтрока(Правило.ПриемникИскатьПоИмя), Правило.ПриемникТип, Правило.ПриемникИскатьПоТип);
		Иначе
			ТипПриемника = Новый ОписаниеТипов("Строка");
		КонецЕсли;
		
		Правило.ИсточникИмя_ПриемникТип = Правило.ИсточникИмя + " " + ВРег(Строка(ТипПриемника));
		
		Если НЕ ИспользуютсяДобавочныеПоля Тогда
			ИспользуютсяДобавочныеПоля = Правило.ИсточникДобавочноеПоле;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ИспользуютсяДобавочныеПоля Тогда
		ДобавочныеПоля.Очистить();
	КонецЕсли;
	
	Попытка
		//Данные = ПолучитьДанные(ИмяФайла, ИмяТаблицы, Правила, Соединения, Условие, Первые1);
		Данные = ПолучитьДанныеЗащищенно(ИмяФайла, ИмяТаблицы, Правила, Соединения, Условие, Первые1,ИмяИсходногоФайла);
	Исключение
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,,, "Системная ошибка. Подробности в полном протоколе.", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Истина);
		ВызватьИсключение;
	КонецПопытки;
	
	ПараметрыИмпорта = Новый Структура;
	ПараметрыИмпорта.Вставить("ВладелецТабличнойЧасти", 				ВладелецТабличнойЧасти);
	ПараметрыИмпорта.Вставить("РодительСправочника", 					РодительСправочника);
	ПараметрыИмпорта.Вставить("СтруктураЗначенийРеквизитовПоУмолчанию", СтруктураЗначенийРеквизитовПоУмолчанию);
	ПараметрыИмпорта.Вставить("ПараметрическийОтбор", 					ПараметрическийОтбор);
	ПараметрыИмпорта.Вставить("ПакетныйИмпорт",							ПакетныйИмпорт);
	                                	
	Попытка
		Результат = ЗагрузитьДанные(Данные, ДобавочныеПоля, Приемник, Правила, ПараметрыЗагрузки, ПараметрыИмпорта);
	Исключение
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,,, НСтр("ru = 'Системная ошибка. Подробности в полном протоколе.'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Истина);
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеЗащищенно(ИмяФайла, ИмяТаблицы, Правила, Соединения, Условие, Первые1,ИмяИсходногоФайла)
	
	ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ = "Обработка.ИмпортДанныхИзЭлектронныхТаблицMicrosoftExcel.МодульМенеджера.ПолучитьДанныеЗащищенно";
	
	ДанныеПравил = Новый Массив;
	
	НомерТекущегоПравила = 0;
	
	МассивПолей = Новый Массив;
	МассивТиповПолей = Новый Массив;
	
	Если Прав(ИмяИсходногоФайла, 3) = "xls" Тогда
		СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ИмяФайла + ";Extended Properties=""Excel 8.0;HDR=YES;IMEX=1;MaxScanRows=0;""";
	Иначе
		СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ИмяФайла + ";Extended Properties=""Excel 12.0 Xml;HDR=YES;IMEX=1;"";";
	КонецЕсли;
	
	ADODBConnection = Новый COMОбъект("ADODB.Connection");
	ADODBConnection.ConnectionString =  СтрокаПодключения;
	ADODBConnection.Open();
	
	Для Каждого Правило Из Правила Цикл
		
		НомерТекущегоПравила = НомерТекущегоПравила + 1;
		
		Если Правило.ИсточникДобавочноеПоле Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ДанныеПравила = ПолучитьДанные2(ИмяФайла, ИмяТаблицы, Правила, Соединения, Условие, Первые1, НомерТекущегоПравила,ИмяИсходногоФайла,ADODBConnection, СтрокаПодключения);
		Исключение
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,,, НСтр("ru = 'Системная ошибка. Подробности в полном протоколе.'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Истина);
			ВызватьИсключение;
		КонецПопытки;
		
		Если ДанныеПравила = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПравил.Добавить(ДанныеПравила.Данные);
		
		МассивПолей.Добавить(ДанныеПравила.Поля[0]);
		МассивТиповПолей.Добавить(ДанныеПравила.Типы[0]);
		
	КонецЦикла;
	
	ADODBConnection.Close();
	
	Данные = Новый Массив;
	
	если ДанныеПравил.Количество()=0 тогда
		// использованы только добавочные поля для правил обмена, или правила обмена пустые
		Возврат Новый Структура("Данные,Поля,Типы", Данные, МассивПолей, МассивТиповПолей);
	конецЕсли;
	
	Для ИндексСтроки = 0 По ДанныеПравил[0].ВГраница() Цикл
		Для ИндексКолонки = 0 По ДанныеПравил.ВГраница() Цикл
			Данные.Добавить(ДанныеПравил[ИндексКолонки][ИндексСтроки]);
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат Новый Структура("Данные,Поля,Типы", Данные, МассивПолей, МассивТиповПолей);
	
КонецФункции

Функция ПолучитьДанные2(ИмяФайла, ИмяТаблицы, Правила, Соединения, Условие, Первые1, 
						НомерЗагружаемогоПравила, ИмяИсходногоФайла, ADODBConnection, СтрокаПодключения)
	
	ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ = "Обработка.ИмпортДанныхИзЭлектронныхТаблицMicrosoftExcel.МодульМенеджера.ПолучитьДанные2";
	
	ОбработанныеПоляИсточника = Новый Соответствие;
	
	МассивПолей = Новый Массив;
	МассивТиповПолей = Новый Массив;
	
	Поля = "";
	УсловиеПолногоNULL = "";
	
	МассивПолейТипаСтрока = Новый Массив;
	МассивПолейТипаБулево = Новый Массив;
	
	ФункцииПриведения = Новый Соответствие;
	ФункцииПриведения.Вставить(Тип("Булево"), "CBool(");
	ФункцииПриведения.Вставить(Тип("Строка"), "Trim(CStr(");
	ФункцииПриведения.Вставить(Тип("Число"), "CDbl(");
	ФункцииПриведения.Вставить(Тип("Дата"), "CDate(");
	
	ПравыеСкобки = Новый Соответствие;
	ПравыеСкобки.Вставить(Тип("Булево"), ")");
	ПравыеСкобки.Вставить(Тип("Строка"), "))");
	ПравыеСкобки.Вставить(Тип("Число"), ")");
	ПравыеСкобки.Вставить(Тип("Дата"), ")");
	
	МассивЗначенийПоУмолчанию = Новый Массив;
	
	НомерТекущегоПравила = 0;
	
	ТаблицаПолей=Новый ТаблицаЗначений;
	ТаблицаПолей.Колонки.Добавить("ИмяТаблицы");
	ТаблицаПолей.Колонки.Добавить("ПоляТаблицы",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСписокЗначений());
	
	НоваяСтрока=ТаблицаПолей.Добавить();
	НоваяСтрока.ИмяТаблицы=ИмяТаблицы;
		
	Для Каждого Правило Из Правила Цикл
		
		НомерТекущегоПравила = НомерТекущегоПравила + 1;
		
		Если Правило.ИсточникДобавочноеПоле Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ОбработанныеПоляИсточника.Получить(Правило.ИсточникИмя_ПриемникТип) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработанныеПоляИсточника.Вставить(Правило.ИсточникИмя_ПриемникТип, Истина);
			
		Если ПустаяСтрока(Правило.СпособПоискаПеречисляемогоТипа) Тогда
			ТипПриемника = ?(ПустаяСтрока(Правило.ПриемникИскатьПоИмя), Правило.ПриемникТип, Правило.ПриемникИскатьПоТип);
		Иначе
			ТипПриемника = Новый ОписаниеТипов("Строка");
		КонецЕсли;
		
		УсловиеПолногоNULL = УсловиеПолногоNULL + " AND " + Правило.ИсточникИмя + " IS NULL";
		
		Если НомерТекущегоПравила = НомерЗагружаемогоПравила Тогда
			
			ТипПриемникаТип = ТипПриемника.Типы()[0];
			
			Поля = Поля + ", IIF(" + Правило.ИсточникИмя + " IS NULL, NULL, " + ФункцииПриведения[ТипПриемникаТип] + Правило.ИсточникИмя + ПравыеСкобки[ТипПриемникаТип] + ")";
			
			МассивПолей.Добавить(Правило.ИсточникИмя_ПриемникТип);
				
			МассивТиповПолей.Добавить(ТипПриемника);
			
			Если ТипПриемникаТип = Тип("Строка") Тогда
				МассивПолейТипаСтрока.Добавить(0);
			Иначе
				МассивПолейТипаСтрока.Добавить(Неопределено);
			КонецЕсли;
			
			Если ТипПриемникаТип = Тип("Булево") Тогда
				МассивПолейТипаБулево.Добавить(Истина);
			Иначе
				МассивПолейТипаБулево.Добавить(Неопределено);
			КонецЕсли;
		
			МассивЗначенийПоУмолчанию.Добавить(ТипПриемника.ПривестиЗначение());
			
		КонецЕсли;
		
		НоваяСтрока.ПоляТаблицы.Добавить(СтрЗаменить(СтрЗаменить(Правило.ИсточникИмя,"[",""),"]",""));
	
	КонецЦикла; 
	
	Если ПустаяСтрока(Поля) Тогда // поле источника выбирается еще раз для другого поля приемника
		Возврат Неопределено;
	КонецЕсли;
		
	Поля = Сред(Поля, 3);
	УсловиеПолногоNULL = Сред(УсловиеПолногоNULL, 6);
	
	ТекстЗапроса = "SELECT " + ?(Первые1, "TOP 1 ", "") + Поля;
	
	Если Соединения.Количество() > 0 Тогда
		
		Скобки = "";
		СтрокаСоединений = "";
		Для Каждого Соединение Из Соединения Цикл
			Скобки = Скобки + "(";
			СтрокаСоединений = СтрокаСоединений + " LEFT OUTER JOIN [" + Соединение.Значение + "] ON " + Соединение.Представление + ")";
		КонецЦикла; 
		
		ТекстЗапроса = ТекстЗапроса + " FROM " + Скобки + "[" + ИмяТаблицы + "]" + СтрокаСоединений;
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + " FROM [" + ИмяТаблицы + "]"
		
	КонецЕсли;
	
	Если ПустаяСтрока(Условие) Тогда
		ТекстЗапроса = ТекстЗапроса + " WHERE NOT (" + УсловиеПолногоNULL + ")";
	Иначе
		ТекстЗапроса = ТекстЗапроса + " WHERE (" + Условие + ") AND NOT (" + УсловиеПолногоNULL + ")";
	КонецЕсли;
		
	Данные = Новый Массив;
	
	Попытка
		
		Recordset = ADODBConnection.Execute(ТекстЗапроса);
		
		КоличествоКолонок = Recordset.Fields.Count;
		
		Пока НЕ Recordset.EOF() Цикл
			Для Индекс = 0 По КоличествоКолонок - 1 Цикл
				
				Попытка
					Значение = Recordset.Fields(Индекс).Value;
					Если Значение = NULL Тогда
						Значение = МассивЗначенийПоУмолчанию[Индекс];
					КонецЕсли;
				Исключение
					Значение = МассивЗначенийПоУмолчанию[Индекс];
				КонецПопытки;
				
				Если НЕ МассивПолейТипаБулево[Индекс] = Неопределено Тогда
					Если ТипЗнч(Значение) = Тип("Число") Тогда
						Значение = Значение = -1;
					КонецЕсли;
				КонецЕсли;
				
				Данные.Добавить(Значение);
				
				ТекущаяДлинаПоля = МассивПолейТипаСтрока[Индекс];
				Если НЕ ТекущаяДлинаПоля = Неопределено Тогда
					ДлинаЗначения = СтрДлина(Значение);
					Если ДлинаЗначения > ТекущаяДлинаПоля Тогда
						МассивПолейТипаСтрока[Индекс] = ДлинаЗначения;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			Recordset.MoveNext();
		КонецЦикла;
		
	Исключение
				
		ТекстОшибки="";
		
		Если НЕ ПустаяСтрока(ИмяИсходногоФайла) Тогда
			
			СтруктураЗапроса=Новый Структура;
			СтруктураЗапроса.Вставить("СтрокаСоединения",СтрокаПодключения);
			СтруктураЗапроса.Вставить("ТаблицаПолей",ТаблицаПолей);
			СтруктураЗапроса.Вставить("ТаблицаADO",Новый Структура("ИмяФайла",ИмяИсходногоФайла));
			
			ТекстОшибки=ИнтеграцияСВнешнимиСистемамиУХ.ПроверитьИсточникADO(СтруктураЗапроса);
			
		КонецЕсли;
		
		Если ПустаяСтрока(ТекстОшибки) Тогда
			
			ТекстОшибки=НСтр("ru = 'Системная ошибка. Подробности в полном протоколе.'");
			
		КонецЕсли;
		
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,,, ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС + ТекстЗапроса + Символы.ПС + СтрокаПодключения, Истина);
		ВызватьИсключение;
		
	КонецПопытки;
		
	Для Индекс = 0 По КоличествоКолонок - 1 Цикл
		Если НЕ МассивПолейТипаСтрока[Индекс] = Неопределено Тогда
			ДлинаСтроки = МассивПолейТипаСтрока[Индекс];
			МассивТиповПолей[Индекс] = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(?(ДлинаСтроки = 0, 1, ДлинаСтроки)));
		КонецЕсли;
	КонецЦикла; 

	Возврат Новый Структура("Данные,Поля,Типы", Данные, МассивПолей, МассивТиповПолей);
	
Конецфункции

Функция ПолучитьДанные(ИмяФайла, ИмяТаблицы, Правила, Соединения, Условие, Первые1)
	
	ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ = "Обработка.ИмпортДанныхИзЭлектронныхТаблицMicrosoftExcel.МодульМенеджера.ПолучитьДанные";
	
	ОбработанныеПоляИсточника = Новый Соответствие;
	
	МассивПолей = Новый Массив;
	МассивТиповПолей = Новый Массив;
	
	Поля = "";
	УсловиеПолногоNULL = "";
	
	МассивПолейТипаСтрока = Новый Массив;
	МассивПолейТипаБулево = Новый Массив;
	
	ФункцииПриведения = Новый Соответствие;
	ФункцииПриведения.Вставить(Тип("Булево"), "CBool(");
	ФункцииПриведения.Вставить(Тип("Строка"), "Trim(CStr(");
	ФункцииПриведения.Вставить(Тип("Число"), "CDbl(");
	ФункцииПриведения.Вставить(Тип("Дата"), "CDate(");
	
	ПравыеСкобки = Новый Соответствие;
	ПравыеСкобки.Вставить(Тип("Булево"), ")");
	ПравыеСкобки.Вставить(Тип("Строка"), "))");
	ПравыеСкобки.Вставить(Тип("Число"), ")");
	ПравыеСкобки.Вставить(Тип("Дата"), ")");
	
	МассивЗначенийПоУмолчанию = Новый Массив;
	
	Для Каждого Правило Из Правила Цикл
		
		Если НЕ ОбработанныеПоляИсточника.Получить(Правило.ИсточникИмя_ПриемникТип) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработанныеПоляИсточника.Вставить(Правило.ИсточникИмя_ПриемникТип, Истина);
			
		Если ПустаяСтрока(Правило.СпособПоискаПеречисляемогоТипа) Тогда
			ТипПриемника = ?(ПустаяСтрока(Правило.ПриемникИскатьПоИмя), Правило.ПриемникТип, Правило.ПриемникИскатьПоТип);
		Иначе
			ТипПриемника = Новый ОписаниеТипов("Строка");
		КонецЕсли;
		
		ТипПриемникаТип = ТипПриемника.Типы()[0];
			
		Поля = Поля + ", IIF(" + Правило.ИсточникИмя + " IS NULL, NULL, " + ФункцииПриведения[ТипПриемникаТип] + Правило.ИсточникИмя + ПравыеСкобки[ТипПриемникаТип] + ")";
		
		УсловиеПолногоNULL = УсловиеПолногоNULL + " AND " + Правило.ИсточникИмя + " IS NULL";
		
		МассивПолей.Добавить(Правило.ИсточникИмя_ПриемникТип);
		
		МассивТиповПолей.Добавить(ТипПриемника);
		
		Если ТипПриемникаТип = Тип("Строка") Тогда
			МассивПолейТипаСтрока.Добавить(0);
		Иначе
			МассивПолейТипаСтрока.Добавить(Неопределено);
		КонецЕсли;
		
		Если ТипПриемникаТип = Тип("Булево") Тогда
			МассивПолейТипаБулево.Добавить(Истина);
		Иначе
			МассивПолейТипаБулево.Добавить(Неопределено);
		КонецЕсли;
		
		МассивЗначенийПоУмолчанию.Добавить(ТипПриемника.ПривестиЗначение());
		
	КонецЦикла; 
	
	Если ПустаяСтрока(Поля) Тогда 
		Возврат Неопределено;
	КонецЕсли;
		
	Поля = Сред(Поля, 3);
	УсловиеПолногоNULL = Сред(УсловиеПолногоNULL, 6);
	
	ТекстЗапроса = "SELECT " + ?(Первые1, "TOP 1 ", "") + Поля;
	
	Если Соединения.Количество() > 0 Тогда
		
		Скобки = "";
		СтрокаСоединений = "";
		Для Каждого Соединение Из Соединения Цикл
			Скобки = Скобки + "(";
			СтрокаСоединений = СтрокаСоединений + " LEFT OUTER JOIN [" + Соединение.Значение + "] ON " + Соединение.Представление + ")";
		КонецЦикла; 
		
		ТекстЗапроса = ТекстЗапроса + " FROM " + Скобки + "[" + ИмяТаблицы + "]" + СтрокаСоединений;
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + " FROM [" + ИмяТаблицы + "]"
		
	КонецЕсли;
	
	Если ПустаяСтрока(Условие) Тогда
		ТекстЗапроса = ТекстЗапроса + " WHERE NOT (" + УсловиеПолногоNULL + ")";
	Иначе
		ТекстЗапроса = ТекстЗапроса + " WHERE (" + Условие + ") AND NOT (" + УсловиеПолногоNULL + ")";
	КонецЕсли;
	
	Данные = Новый Массив;
	
	Попытка
		
		СтрокаПодключения = "Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};DBQ=" + ИмяФайла + ";IMEX=1;MaxScanRows=0";
		Recordset = Новый COMОбъект ("ADODB.Recordset");
	    Recordset.Open(ТекстЗапроса, СтрокаПодключения);
		
		КоличествоКолонок = Recordset.Fields.Count;
		
		Пока НЕ Recordset.EOF() Цикл
			Для Индекс = 0 По КоличествоКолонок - 1 Цикл
				
				Попытка
					Значение = Recordset.Fields(Индекс).Value;
					Если Значение = NULL Тогда
						Значение = МассивЗначенийПоУмолчанию[Индекс];
					КонецЕсли;
				Исключение
					Значение = МассивЗначенийПоУмолчанию[Индекс];
				КонецПопытки;
				
				Если НЕ МассивПолейТипаБулево[Индекс] = Неопределено Тогда
					Если ТипЗнч(Значение) = Тип("Число") Тогда
						Значение = Значение = -1;
					КонецЕсли;
				КонецЕсли;
				
				Данные.Добавить(Значение);
				
				ТекущаяДлинаПоля = МассивПолейТипаСтрока[Индекс];
				Если НЕ ТекущаяДлинаПоля = Неопределено Тогда
					ДлинаЗначения = СтрДлина(Значение);
					Если ДлинаЗначения > ТекущаяДлинаПоля Тогда
						МассивПолейТипаСтрока[Индекс] = ДлинаЗначения;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			Recordset.MoveNext();
		КонецЦикла;
		
	Исключение
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,,, НСтр("ru = 'Системная ошибка. Подробности в полном протоколе.'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС + ТекстЗапроса, Истина);
		ВызватьИсключение;
	КонецПопытки;
	
	Попытка
		Recordset.ActiveConnection.Close();
	Исключение
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьПредупреждение(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,,, НСтр("ru = 'Системная ошибка. Подробности в полном протоколе.'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Истина);
	КонецПопытки;
		
	Для Индекс = 0 По КоличествоКолонок - 1 Цикл
		Если НЕ МассивПолейТипаСтрока[Индекс] = Неопределено Тогда
			ДлинаСтроки = МассивПолейТипаСтрока[Индекс];
			МассивТиповПолей[Индекс] = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(?(ДлинаСтроки = 0, 1, ДлинаСтроки)));
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Новый Структура("Данные,Поля,Типы", Данные, МассивПолей, МассивТиповПолей);
	
Конецфункции

Функция ЗагрузитьДанные(НеобработанныеВнешниеДанные, ДобавочныеПоля, Приемник, Правила, ПараметрыЗагрузки, ПараметрыИмпорта)
	
	ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ = "Обработка.ИмпортДанныхИзЭлектронныхТаблицMicrosoftExcel.МодульМенеджера.ЗагрузитьДанные";
		
	ТаблицаВнешниеДанные = "ВнешниеДанные";
	НомераТаблиц = Новый Структура;
	РежимОтладки = Ложь;
	Отказ = Ложь;
	
	Запрос = Новый Запрос;
	
	// [{ ИмяКолонкиВнешнихДанных, ИмяКолонкиВременнойТаблицы}]
	КолонкиВнешнихДанных = ПоместитьНеобработанныеДанныеВнешнегоИсточникаВЗапрос(
							НеобработанныеВнешниеДанные, Запрос, ТаблицаВнешниеДанные, ДобавочныеПоля, Правила, НомераТаблиц);
	    
	ДоработатьПараметрыИмпорта(ПараметрыИмпорта, Приемник, Правила, ПараметрыИмпорта.ПараметрическийОтбор, КолонкиВнешнихДанных);

	ДобавитьЗаполнитьКолонкиПравил(Правила, ПараметрыИмпорта.ПриемникТабличнаяЧасть, КолонкиВнешнихДанных);
	
	ПараметрыИмпорта.Вставить("ПриемникИскатьСтрокиТабличнойЧасти", ИскатьСтрокиТЧ(ПараметрыИмпорта.ПриемникТабличнаяЧасть, Правила));
	
	ДанныеПравил = ПолучитьДанныеПравил(Правила);
		
	Поиск = СвернутьВнешниеДанныеПоКлючевымРеквизитам(Запрос, ТаблицаВнешниеДанные, КолонкиВнешнихДанных, Правила, ПараметрыИмпорта.ПриемникТабличнаяЧасть, ПараметрыИмпорта.ТипПриемника, НомераТаблиц);
		
	ДополнитьЗапросПеречисляемымиТипами(Запрос, ТаблицаВнешниеДанные, КолонкиВнешнихДанных, Правила, НомераТаблиц);
	
	СопоставитьВнешниеДанныеИПолучателя(Запрос, ТаблицаВнешниеДанные, КолонкиВнешнихДанных, ПараметрыИмпорта, Правила, НомераТаблиц);
	
	Если НЕ ПараметрыИмпорта.ПриемникТабличнаяЧасть ИЛИ ПараметрыИмпорта.ПриемникИскатьСтрокиТабличнойЧасти Тогда
		УбратьПолностьюСопоставленныеДанные(Запрос, ТаблицаВнешниеДанные, КолонкиВнешнихДанных, ПараметрыИмпорта, Правила, НомераТаблиц);
	КонецЕсли;	
	
	ДополнитьЗапросСопоставленияСоздания(Запрос, ПараметрыИмпорта, ДанныеПравил, НомераТаблиц);
	
	ТаблицыДополнительныхДанных = ТаблицыДополнительныхДанных(Правила);
												
	
	ПриемникиДанных = ПолучитьПриемникиДанных(ПараметрыИмпорта.ПриемникРегистрСведений, ПараметрыИмпорта.ПриемникТабличнаяЧасть, 
												ТаблицыДополнительныхДанных, ПараметрыИмпорта.ТипПриемника);
	
	ПриемникиДокументы = Неопределено;
    ПриемникиПланыСчетовПланыВидовХарактеристик = Неопределено;
    ПодготовитьКэшДляПростогоПоиска(ПриемникиДанных, ПриемникиДокументы, ПриемникиПланыСчетовПланыВидовХарактеристик);
		
	ПроводимыеДокументы = Новый Соответствие;
	Для Каждого Документ Из Метаданные.Документы Цикл
		Если Документ.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			ПроводимыеДокументы.Вставить(Тип("ДокументОбъект." + Документ.Имя), ПараметрыЗагрузки.ПровестиДокументы);
		КонецЕсли;
	КонецЦикла; 
	
	ОстанавливатьсяПриОшибке = ПараметрыЗагрузки.ОстанавливатьсяПриОшибке; 
	
	ПротоколЗагруженоОбъектов = ?(НеобработанныеВнешниеДанные.Поля.Количество()<>0, НеобработанныеВнешниеДанные.Данные.Количество()/НеобработанныеВнешниеДанные.Поля.Количество(), 0);
	
	// Выполнение Запроса	
	ЗагруженныеОбъекты = Новый Соответствие;
	Если РежимОтладки Тогда
		Если (СтрЧислоВхождений(Запрос.Текст,";") + 1) <> НомераТаблиц.Количество() Тогда
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,,, НСтр("ru = 'Ошибка заполнения НомераТаблиц'"), Истина);
		КонецЕсли;		
	КонецЕсли;

	НачатьТранзакцию();	
	
	Попытка
		РезультатЗапроса = Запрос.ВыполнитьПакет();
	Исключение
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,,, НСтр("ru = 'Системная ошибка. Подробности в полном протоколе.'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС + "---" + Символы.ПС + Запрос.Текст, Истина);
		ВызватьИсключение;
	КонецПопытки;
	
	Если НЕ ОстанавливатьсяПриОшибке Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	КэшСозданных = СоздатьКэшироватьСопоставления(ДанныеПравил, РезультатЗапроса, НомераТаблиц);		
	
	// ПОИСК И СОПОСТАВЛЕНИЕ	
		
	Выборка = РезультатЗапроса[НомераТаблиц.Выбрать_ВнешниеДанныеССопоставлениями].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектНайден = Ложь;
		
		ЗагружаемыйОбъект = ПолучитьЗагружаемыйОбъект(Выборка, ПараметрыИмпорта, ОбъектНайден);
		
		ЗаполнитьЗначенияСвойств(ЗагружаемыйОбъект, Выборка, ДанныеПравил.РеквизитыОбъектаСтрокой);
		
		ЗаполнитьСозданнымиИзКэша(ЗагружаемыйОбъект, Выборка, ДанныеПравил, КэшСозданных);

		Если НЕ ПараметрыИмпорта.ПриемникТабличнаяЧасть Тогда
			
			Если НЕ ОбъектНайден И НЕ ПараметрыИмпорта.РодительСправочника = Неопределено Тогда
				Если НЕ ЗначениеЗаполнено(ЗагружаемыйОбъект.Родитель) Тогда
					ЗагружаемыйОбъект.Родитель = ПараметрыИмпорта.РодительСправочника;
				КонецЕсли;
			КонецЕсли;
			
			Попытка
				НетОшибок = ЗаписатьОбъектЗапротоколироватьОшибку(ЗагружаемыйОбъект, ЗагруженныеОбъекты, ПроводимыеДокументы, , Выборка.НомерСтроки, ОстанавливатьсяПриОшибке, ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,, ПараметрыИмпорта.ПакетныйИмпорт);
			Исключение
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПараметрыИмпорта.ПриемникТабличнаяЧасть 
		И НЕ ПараметрыИмпорта.ПриемникРегистрСведений 
		И ПараметрыИмпорта.ТребуетсяПовторныйПроход Тогда		
		
		ВыполнитьПовторныйПроход(ЗагруженныеОбъекты, Запрос, ОстанавливатьсяПриОшибке, 
									ПараметрыИмпорта, ПараметрыИмпорта.ПовторныйПроходЗначенияРеквизитовХеши, 
									ПараметрыИмпорта.ПовторныйПроходИменаРеквизитовХеши, ПараметрыИмпорта.ПриПовторномПроходеТребуетсяПоискВладельца, 
									ПроводимыеДокументы, ПротоколЗагруженоОбъектов, ПараметрыИмпорта.ТаблицаПовторногоПоиска);
		
	КонецЕсли;
	
	Если ПараметрыИмпорта.ПриемникТабличнаяЧасть Тогда		
		ЗаписатьВладельцевДляТЧ(ЗагруженныеОбъекты, ОстанавливатьсяПриОшибке, ПараметрыИмпорта, ПроводимыеДокументы);
	КонецЕсли;
	
	Если ОстанавливатьсяПриОшибке Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Возврат Новый Структура("ПротоколЗагруженоОбъектов,ЗагруженныеОбъекты", ПротоколЗагруженоОбъектов, ЗагруженныеОбъекты);
	
КонецФункции

Процедура ЗаписатьВладельцевДляТЧ(Знач ЗагруженныеОбъекты, Знач ОстанавливатьсяПриОшибке, Знач ПараметрыИмпорта, Знач ПроводимыеДокументы)
    
    Перем КЗ, НетОшибок;
    
    Если ПараметрыИмпорта.ВладелецТабличнойЧасти = Неопределено Тогда
        Для Каждого КЗ Из ПараметрыИмпорта.ПолученныеВладельцыТабличнойЧасти Цикл
            
            Попытка
                НетОшибок = ЗаписатьОбъектЗапротоколироватьОшибку(КЗ.Значение, ЗагруженныеОбъекты, ПроводимыеДокументы,,, ОстанавливатьсяПриОшибке, ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,, ПараметрыИмпорта.ПакетныйИмпорт);
            Исключение
                ВызватьИсключение;
            КонецПопытки;
            
        КонецЦикла; 
    Иначе
        
        Попытка
            НетОшибок = ЗаписатьОбъектЗапротоколироватьОшибку(ПараметрыИмпорта.Менеджер, ЗагруженныеОбъекты, ПроводимыеДокументы,,, ОстанавливатьсяПриОшибке, ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,, ПараметрыИмпорта.ПакетныйИмпорт);
        Исключение
            ВызватьИсключение;
        КонецПопытки;
        
    КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьПовторныйПроход(Знач ЗагруженныеОбъекты, Знач Запрос, Знач ОстанавливатьсяПриОшибке, Знач ПараметрыИмпорта, Знач ПовторныйПроходЗначенияРеквизитовХеши, Знач ПовторныйПроходИменаРеквизитовХеши, Знач ПриПовторномПроходеТребуетсяПоискВладельца, Знач ПроводимыеДокументы, ПротоколЗагруженоОбъектов, Знач ТаблицаПовторногоПоиска)
    
    Перем Выборка, ЗагружаемыйОбъект, ИмяПараметраВладельца, ИмяПараметраРеквизита, ИмяРеквизитаГруппы, НайденноеЗначение, НайденныеЗначения, НетОшибок, НовоеЗначение, ПовторныйЗапрос, РезультатЗапроса, РезультатПовторногоЗапроса, Строка, ТекстЗапроса;
    
    ПовторныйЗапрос = Новый Запрос;
    ПовторныйЗапрос.УстановитьПараметр("Таблица", ТаблицаПовторногоПоиска);
    
    ПовторныйЗапрос.Текст = 
    "ВЫБРАТЬ
    |	Таблица.Индекс,
    |	Таблица.Объект,
    |	" + ?(ПриПовторномПроходеТребуетсяПоискВладельца, "Таблица.Владелец,", "") + "
    |	Таблица.ИмяРеквизита,
    |	Таблица.ЗначениеРеквизита,
    |	Таблица.ПриемникИмя
    |ПОМЕСТИТЬ Таблица
    |ИЗ
    |	&Таблица КАК Таблица
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	МИНИМУМ(Таблица.Индекс) КАК Ключ,
    |	Таблица.ИмяРеквизита КАК ИмяРеквизита,
    |	" + ?(ПриПовторномПроходеТребуетсяПоискВладельца, "Таблица.Владелец КАК Владелец,", "") + "
    |	Таблица.ЗначениеРеквизита КАК ЗначениеРеквизита
    |ПОМЕСТИТЬ ВычислениеКлюча
    |ИЗ
    |	Таблица КАК Таблица
    |
    |СГРУППИРОВАТЬ ПО
    |	Таблица.ИмяРеквизита,
    |	" + ?(ПриПовторномПроходеТребуетсяПоискВладельца, "Таблица.Владелец,", "") + "
    |	Таблица.ЗначениеРеквизита
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	Таблица.Индекс,
    |	Таблица.Объект,
    |	Таблица.ИмяРеквизита,
    |	Таблица.ЗначениеРеквизита,
    |	Таблица.ПриемникИмя,
    |	" + ?(ПриПовторномПроходеТребуетсяПоискВладельца, "Таблица.Владелец,", "") + "
    |	ВычислениеКлюча.Ключ
    |ПОМЕСТИТЬ ТК
    |ИЗ
    |	Таблица КАК Таблица
    |		ЛЕВОЕ СОЕДИНЕНИЕ ВычислениеКлюча КАК ВычислениеКлюча
    |		ПО Таблица.ИмяРеквизита = ВычислениеКлюча.ИмяРеквизита
    |			И Таблица.ЗначениеРеквизита = ВычислениеКлюча.ЗначениеРеквизита
    |			" + ?(ПриПовторномПроходеТребуетсяПоискВладельца, "И Таблица.Владелец = ВычислениеКлюча.Владелец", "") + "
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
    |	ТК.Ключ
    |ИЗ
    |	ТК КАК ТК
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ТК.Ключ,
    |	ТК.Объект,
    |	ТК.ПриемникИмя,
    |	ТК.ИмяРеквизита,
    |	" + ?(ПриПовторномПроходеТребуетсяПоискВладельца, "ТК.Владелец,", "") + "
    |	ТК.ЗначениеРеквизита
    |ИЗ
    |	ТК КАК ТК";
    
    Если НЕ ОстанавливатьсяПриОшибке Тогда
        НачатьТранзакцию();
    КонецЕсли;
    
    РезультатЗапроса = ПовторныйЗапрос.ВыполнитьПакет();
    
    Если НЕ ОстанавливатьсяПриОшибке Тогда
        ЗафиксироватьТранзакцию();
    КонецЕсли;
    
    Если НЕ ПриПовторномПроходеТребуетсяПоискВладельца Тогда
        ТаблицаПовторногоПоиска.Колонки.Добавить("Владелец", Новый ОписаниеТипов("Неопределено"));
    КонецЕсли;
    
    ТекстЗапроса = "";
    
    Выборка = РезультатЗапроса[РезультатЗапроса.ВГраница()-1].Выбрать();
    Пока Выборка.Следующий() Цикл
        
        Строка = ТаблицаПовторногоПоиска[Выборка.Ключ];
        
        ИмяПараметраРеквизита = УникальноеИмяПеременной();
        ПовторныйЗапрос.УстановитьПараметр(ИмяПараметраРеквизита, ПовторныйПроходЗначенияРеквизитовХеши.Получить(Строка.ЗначениеРеквизита));
        
        Если НЕ Строка.Владелец = Неопределено Тогда
            ИмяПараметраВладельца = УникальноеИмяПеременной();
            ПовторныйЗапрос.УстановитьПараметр(ИмяПараметраВладельца, Строка.Владелец);
        КонецЕсли;
        
        ТекстЗапроса = ТекстЗапроса + "
        |" + ?(ПустаяСтрока(ТекстЗапроса), "", "ОБЪЕДИНИТЬ ВСЕ ") 
        + "ВЫБРАТЬ ПЕРВЫЕ 1 " + Формат(Строка.Индекс, "ЧН=; ЧГ=") + " КАК Ключ, Таблица.Ссылка КАК Значение ИЗ " 
        + ПараметрыИмпорта.ТаблицаПолучателя + " КАК Таблица ГДЕ Таблица." 
        + ПовторныйПроходИменаРеквизитовХеши.Получить(Строка.ИмяРеквизита) 
        + " = &" + ИмяПараметраРеквизита 
        + ?(НЕ Строка.Владелец = Неопределено, " И Таблица.Владелец = &" + ИмяПараметраВладельца, "");
        
    КонецЦикла;
    
    ПовторныйЗапрос.Текст = ТекстЗапроса;
    
    Если НЕ ОстанавливатьсяПриОшибке Тогда
        НачатьТранзакцию();
    КонецЕсли;
    
    РезультатПовторногоЗапроса = ПовторныйЗапрос.Выполнить();
    
    Если НЕ ОстанавливатьсяПриОшибке Тогда
        ЗафиксироватьТранзакцию();
    КонецЕсли;
    
    ИмяРеквизитаГруппы = "";
    Если НЕ ПараметрыИмпорта.ИмяМетодаПриемника = ПараметрыИмпорта.ИмяМетодаПриемникаГруппы Тогда
        ИмяРеквизитаГруппы = "Родитель";
    КонецЕсли;
    
    НайденныеЗначения = РезультатПовторногоЗапроса.Выгрузить();
    НайденныеЗначения.Индексы.Добавить("Ключ");
    
    Выборка = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выбрать();
    Пока Выборка.Следующий() Цикл
        ЗагружаемыйОбъект = Выборка.Объект.ПолучитьОбъект();
        НайденноеЗначение = НайденныеЗначения.Найти(Выборка.Ключ, "Ключ");
        Если НайденноеЗначение = Неопределено Тогда
            НайденноеЗначение = НайденныеЗначения.Добавить();
            НайденноеЗначение.Ключ = Выборка.Ключ;
            НайденноеЗначение.Значение = NULL;
        КонецЕсли;
        Если НайденноеЗначение.Значение = NULL Тогда
            ПротоколЗагруженоОбъектов = ПротоколЗагруженоОбъектов + 1;
            Если Выборка.ПриемникИмя = ПараметрыИмпорта.ИмяРеквизитаГруппы Тогда
                НовоеЗначение = Вычислить(ПараметрыИмпорта.ИмяМетодаПриемникаГруппы);
            Иначе
                НовоеЗначение = Вычислить(ПараметрыИмпорта.ИмяМетодаПриемника);
            КонецЕсли;
            
            Если НЕ ПараметрыИмпорта.СтруктураЗначенийРеквизитовПоУмолчанию = Неопределено Тогда
                ЗаполнитьЗначенияСвойств(НовоеЗначение, ПараметрыИмпорта.СтруктураЗначенийРеквизитовПоУмолчанию);
            КонецЕсли;
            
            Если НЕ ПараметрыИмпорта.РеквизитыПоискаПоУмолчанию = Неопределено Тогда
                ЗаполнитьЗначенияСвойств(НовоеЗначение, ПараметрыИмпорта.РеквизитыПоискаПоУмолчанию);
            КонецЕсли;
            
            Если НЕ ПараметрыИмпорта.ВладелецПриемникаПоУмолчанию = Неопределено Тогда
                ЗагружаемыйОбъект.Владелец = ПараметрыИмпорта.ВладелецПриемникаПоУмолчанию;
            КонецЕсли;
            
            НовоеЗначение[ПовторныйПроходИменаРеквизитовХеши[Выборка.ИмяРеквизита]] = ПовторныйПроходЗначенияРеквизитовХеши[Выборка.ЗначениеРеквизита];
            Если ПриПовторномПроходеТребуетсяПоискВладельца Тогда
                Если НЕ Выборка.Владелец = Неопределено Тогда
                    НовоеЗначение.Владелец = Выборка.Владелец;
                КонецЕсли;
            КонецЕсли;
            
            НовоеЗначение.Родитель = ПараметрыИмпорта.РодительСправочника;
            
            Попытка
                НетОшибок = ЗаписатьОбъектЗапротоколироватьОшибку(НовоеЗначение, ЗагруженныеОбъекты, ПроводимыеДокументы,,, ОстанавливатьсяПриОшибке, ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,, ПараметрыИмпорта.ПакетныйИмпорт);
            Исключение
                ВызватьИсключение;
            КонецПопытки;
            
            Если НетОшибок Тогда
                НайденноеЗначение.Значение = НовоеЗначение.Ссылка;
            КонецЕсли;
            
        КонецЕсли;
        Если НЕ НайденноеЗначение.Значение = NULL Тогда
            
            ЗагружаемыйОбъект[Выборка.ПриемникИмя] = НайденноеЗначение.Значение;
            
            Попытка
                НетОшибок = ЗаписатьОбъектЗапротоколироватьОшибку(ЗагружаемыйОбъект, ЗагруженныеОбъекты, ПроводимыеДокументы,,, ОстанавливатьсяПриОшибке, ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,, ПараметрыИмпорта.ПакетныйИмпорт);
            Исключение
                ВызватьИсключение;
            КонецПопытки;
            
        КонецЕсли;
    КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСозданнымиИзКэша(ЗагружаемыйОбъект, Выборка, ДанныеПравил, КэшСозданных)
    
    Перем РеквизитОбъекта;
	
	ПолеПриемника_ПолеИсточника = ДанныеПравил.ПолеПриемника_ПолеИсточника;
	ПравилаКэшированияСоответствием	= ДанныеПравил.ПравилаКэшированияСоответствием;	
	Для каждого Кэш Из КэшСозданных Цикл
		Если НЕ ЗначениеЗаполнено(Выборка[Кэш.Ключ]) Тогда
			
			ИмяКолонкиПоискаИсточник = ПравилаКэшированияСоответствием.Получить(Кэш.Ключ);			
			Если ИмяКолонкиПоискаИсточник = Неопределено Тогда
				ЗагружаемыйОбъект[Кэш.Ключ] = ПолучитьЗначениеКэшаТаблицы(Кэш.Значение, Выборка, ПолеПриемника_ПолеИсточника[Кэш.Ключ]);
			Иначе //кэширование соответствием
				ЗагружаемыйОбъект[Кэш.Ключ] = Кэш.Значение.Получить(Выборка[ИмяКолонкиПоискаИсточник]);				
			КонецЕсли;
			
		КонецЕсли;		
    КонецЦикла;
    
КонецПроцедуры

Функция ПолучитьЗначениеКэшаТаблицы(ТаблицаКэша, Выборка, СоответствиеПолей)

	Отбор = Новый Структура;
	
	Для каждого КолонкаКэша Из СоответствиеПолей Цикл 

		Отбор.Вставить(КолонкаКэша.Ключ, Выборка[КолонкаКэша.Значение]);
		
	КонецЦикла;
	
	Для каждого СтрокаКэша Из ТаблицаКэша.НайтиСтроки(Отбор) Цикл
	    Возврат СтрокаКэша.Значение;
	КонецЦикла;

КонецФункции

Функция ПолучитьЗагружаемыйОбъект(Выборка, ПараметрыИмпорта, ОбъектНайден)
    
    Перем ЗагружаемыйОбъект;
		
	Менеджер = ПараметрыИмпорта.Менеджер;
    
    Если ПараметрыИмпорта.ПриемникТабличнаяЧасть Тогда
        
        Если ПараметрыИмпорта.ВладелецТабличнойЧасти = Неопределено Тогда
            Менеджер = ПараметрыИмпорта.ПолученныеВладельцыТабличнойЧасти.Получить(Выборка.Ссылка);
            Если Менеджер = Неопределено Тогда
                
                Если Выборка.Ссылка = NULL Тогда
                    
                    Если ПараметрыИмпорта.СозданиеГрупп 
                        И (ПараметрыИмпорта.ВнешниеДанныеТипЭтоГруппаБулево 
                        И Выборка[ПараметрыИмпорта.ВнешниеДанныеИмяЭтоГруппа] 
                        ИЛИ НЕ ПараметрыИмпорта.ВнешниеДанныеТипЭтоГруппаБулево 
                        И ЗначениеЗаполнено(Выборка[ПараметрыИмпорта.ВнешниеДанныеИмяЭтоГруппа])) Тогда
                        
                        Менеджер = Вычислить(ПараметрыИмпорта.ИмяМетодаВладельцаТабличнойЧастиГруппы);
                        
                    Иначе
                        Менеджер = Вычислить(ПараметрыИмпорта.ИмяМетодаВладельцаТабличнойЧасти);
                    КонецЕсли;
                    
                    Если НЕ ПараметрыИмпорта.СтруктураЗначенийРеквизитовПоУмолчанию = Неопределено Тогда
                        ЗаполнитьЗначенияСвойств(Менеджер, ПараметрыИмпорта.СтруктураЗначенийРеквизитовПоУмолчанию);
                    КонецЕсли;
                    
                    Если НЕ ПараметрыИмпорта.РеквизитыПоискаПоУмолчанию = Неопределено Тогда
                        ЗаполнитьЗначенияСвойств(Менеджер, ПараметрыИмпорта.РеквизитыПоискаПоУмолчанию);
                    КонецЕсли;
                    
                    Если НЕ ПараметрыИмпорта.ВладелецПриемникаПоУмолчанию = Неопределено Тогда
                        Менеджер.Владелец = ПараметрыИмпорта.ВладелецПриемникаПоУмолчанию;
                    КонецЕсли;
                    
                Иначе
                    Менеджер = Выборка.Ссылка.ПолучитьОбъект();
                КонецЕсли;
                
                ПараметрыИмпорта.ПолученныеВладельцыТабличнойЧасти.Вставить(Выборка.Ссылка, Менеджер);
                
                Если НЕ ПараметрыИмпорта.ПриемникИскатьСтрокиТабличнойЧасти Тогда
                    Менеджер[ПараметрыИмпорта.ПриемникИмяТабличнойЧасти].Очистить();
                КонецЕсли;
                
            КонецЕсли;
            
        КонецЕсли;
        
        Если Выборка.НомерСтрокиТабличнойЧасти = NULL Тогда
            ЗагружаемыйОбъект = Менеджер[ПараметрыИмпорта.ПриемникИмяТабличнойЧасти].Добавить();
        Иначе
			Если Менеджер[ПараметрыИмпорта.ПриемникИмяТабличнойЧасти].Количество() < Выборка.НомерСтрокиТабличнойЧасти Тогда
				ТекстИсключения = НСтр("ru = 'Найденная запросом строка (номер строки) табличной части не обнаружена у владельца.'");
                ВызватьИсключение ТекстИсключения;
            Иначе
                ОбъектНайден = Истина;
                ЗагружаемыйОбъект = Менеджер[ПараметрыИмпорта.ПриемникИмяТабличнойЧасти][Выборка.НомерСтрокиТабличнойЧасти - 1];
            КонецЕсли;
        КонецЕсли;
        
    Иначе
        
        Если Выборка.Ссылка = NULL Тогда
            Если ПараметрыИмпорта.СозданиеГрупп 
                И (ПараметрыИмпорта.ВнешниеДанныеТипЭтоГруппаБулево И Выборка[ПараметрыИмпорта.ВнешниеДанныеИмяЭтоГруппа] 
                ИЛИ НЕ ПараметрыИмпорта.ВнешниеДанныеТипЭтоГруппаБулево И ЗначениеЗаполнено(Выборка[ПараметрыИмпорта.ВнешниеДанныеИмяЭтоГруппа])) Тогда
                ЗагружаемыйОбъект = Вычислить(ПараметрыИмпорта.ИмяМетодаПриемникаГруппы);
            Иначе
                ЗагружаемыйОбъект = Вычислить(ПараметрыИмпорта.ИмяМетодаПриемника);
            КонецЕсли;
            
            Если НЕ ПараметрыИмпорта.СтруктураЗначенийРеквизитовПоУмолчанию = Неопределено Тогда
                ЗаполнитьЗначенияСвойств(ЗагружаемыйОбъект, ПараметрыИмпорта.СтруктураЗначенийРеквизитовПоУмолчанию);
            КонецЕсли;
            
            Если НЕ ПараметрыИмпорта.РеквизитыПоискаПоУмолчанию = Неопределено Тогда
                ЗаполнитьЗначенияСвойств(ЗагружаемыйОбъект, ПараметрыИмпорта.РеквизитыПоискаПоУмолчанию);
            КонецЕсли;
            
            Если НЕ ПараметрыИмпорта.ВладелецПриемникаПоУмолчанию = Неопределено Тогда
                ЗагружаемыйОбъект.Владелец = ПараметрыИмпорта.ВладелецПриемникаПоУмолчанию;
            КонецЕсли;
            
        Иначе
            
            Если ПараметрыИмпорта.ПриемникРегистрСведений Тогда
                
                ЗагружаемыйОбъект = Вычислить(ПараметрыИмпорта.ИмяМетодаПриемника);
                
            Иначе
                
                ОбъектНайден = Истина;
                ЗагружаемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
                
            КонецЕсли;
            
            Если НЕ ПараметрыИмпорта.СтруктураЗначенийРеквизитовПоУмолчанию = Неопределено Тогда
                ЗаполнитьЗначенияСвойств(ЗагружаемыйОбъект, ПараметрыИмпорта.СтруктураЗначенийРеквизитовПоУмолчанию);
            КонецЕсли;
            
        КонецЕсли;
        
	КонецЕсли;
	
    Возврат ЗагружаемыйОбъект;

КонецФункции

Функция ЗагрузитьДанныеФрагмент(Знач ВладельцыПоУмолчанию, Знач Выборка, Знач ЗагружаемыйОбъект, 
	ЗначениеКолонкиВнешнихДанных, Знач Менеджер, Знач ПараметрыДопДанных, Знач Правило, 
	Знач ПриемникиДанных, Знач ПриемникиДокументы, Знач ПриемникиПланыСчетовПланыВидовХарактеристик, 
	Знач ПриемникТабличнаяЧасть, Знач РодительСправочника, Знач ТаблицыДополнительныхДанных, Знач ТипПриемника)
    
    Перем ВладелецСправочника;
    
    КлючПоиска = ПараметрыДопДанных.КлючиДополнительныхДанных[Правило.ПриемникИмя].Найти(Выборка.НомерСтроки, "НомерСтроки");
    НайденнаяСтрока = ПараметрыДопДанных.ДополнительныеДанные[Правило.ПриемникИмя].Найти(КлючПоиска.Ключ, "Ключ");
    
    Если НайденнаяСтрока.Значение = NULL И (ПриемникТабличнаяЧасть ИЛИ НЕ Правило.ПриемникТип = ТипПриемника) Тогда
        
        НадоИскать = Ложь;
        
        Таблица = ТаблицыДополнительныхДанных[Правило.ПриемникИмя];
        Если Таблица = Неопределено Тогда            
        КонецЕсли;
        
        Если Правило.ПриемникЕстьВладелец Тогда
            Если ТипЗнч(Правило.ПриемникВладелецСпособПоиска) = Тип("Строка") И НЕ Правило.ПриемникВладелец = "Ссылка" Тогда
                
                Если ПриемникТабличнаяЧасть Тогда
                    Если Лев(Правило.ПриемникВладелец, СтрДлина("Ссылка.")) = "Ссылка." Тогда
                        ВладелецСправочника = Менеджер[Сред(Правило.ПриемникВладелец, СтрДлина("Ссылка.") + 1)];
                    Иначе
                        ВладелецСправочника = Менеджер[Правило.ПриемникВладелец];
                    КонецЕсли;
                Иначе
                    ВладелецСправочника = ЗагружаемыйОбъект[Правило.ПриемникВладелец];
                КонецЕсли;
                
                НадоИскать = Истина;
                
            КонецЕсли;
        Иначе
            КоличествоПриемников = ПриемникиДанных.Получить(ТаблицыДополнительныхДанных[Правило.ПриемникИмя]);
            Если КоличествоПриемников > 1 Тогда
                
                ВладелецСправочника = Неопределено;
                НадоИскать = Истина;
                
            КонецЕсли;
        КонецЕсли;
        
        Если ВладелецСправочника = Неопределено И НЕ ВладельцыПоУмолчанию = Неопределено Тогда
            ВладелецСправочника = ВладельцыПоУмолчанию[Правило.ПриемникТип];
        КонецЕсли;
        
        Если НадоИскать Тогда
            
            НовоеЗначение = НайтиПоЗначениюРеквизита(ЗначениеКолонкиВнешнихДанных, Правило.ПриемникИскатьПоИмя, Таблица, ?(Правило.ПриемникТип = ТипПриемника, РодительСправочника, Неопределено), ВладелецСправочника, ПриемникиДокументы.Получить(Таблица) = Истина, ПриемникиПланыСчетовПланыВидовХарактеристик.Получить(Таблица) = Истина);
            
            Если НЕ НовоеЗначение.Пустая() Тогда
                НайденнаяСтрока.Значение = НовоеЗначение;
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЕсли;
    Возврат НайденнаяСтрока;

КонецФункции

Процедура ПодготовитьКэшДляПростогоПоиска(ПриемникиДанных, ПриемникиДокументы, ПриемникиПланыСчетовПланыВидовХарактеристик)
    
    Перем ПриемникДанныхКЗ, ТипВсеДокументы, ТипВсеПланыВидовХарактеристик, ТипВсеПланыСчетов;
    
    ПриемникиДокументы = Новый Соответствие;
    ТипВсеДокументы = Документы.ТипВсеСсылки();
    Для Каждого ПриемникДанныхКЗ Из ПриемникиДанных Цикл
        Если ТипВсеДокументы.СодержитТип(ТипЗнч(ПриемникДанныхКЗ.Ключ.ПустаяСсылка())) Тогда
            ПриемникиДокументы.Вставить(ПриемникДанныхКЗ.Ключ, Истина);
        КонецЕсли;
    КонецЦикла;
    
    ПриемникиПланыСчетовПланыВидовХарактеристик = Новый Соответствие;
    ТипВсеПланыСчетов = ПланыСчетов.ТипВсеСсылки();
    Для Каждого ПриемникДанныхКЗ Из ПриемникиДанных Цикл
        Если ТипВсеПланыСчетов.СодержитТип(ТипЗнч(ПриемникДанныхКЗ.Ключ.ПустаяСсылка())) Тогда
            ПриемникиПланыСчетовПланыВидовХарактеристик.Вставить(ПриемникДанныхКЗ.Ключ, Истина);
        КонецЕсли;
    КонецЦикла;
    ТипВсеПланыВидовХарактеристик = ПланыВидовХарактеристик.ТипВсеСсылки();
    Для Каждого ПриемникДанныхКЗ Из ПриемникиДанных Цикл
        Если ТипВсеПланыВидовХарактеристик.СодержитТип(ТипЗнч(ПриемникДанныхКЗ.Ключ.ПустаяСсылка())) Тогда
            ПриемникиПланыСчетовПланыВидовХарактеристик.Вставить(ПриемникДанныхКЗ.Ключ, Истина);
        КонецЕсли;
    КонецЦикла;

КонецПроцедуры

Функция ДоработатьПараметрыИмпорта(ПараметрыИмпорта = Неопределено, Приемник, Правила, ПараметрическийОтбор = Неопределено, КолонкиВнешнихДанных)

	Перем ВладелецПриемникаПоУмолчанию,	ВладельцыПоУмолчанию, РеквизитыПоискаПоУмолчанию, ПриемникИмяТабличнойЧасти, Менеджер,
		ИмяМетодаВладельцаТабличнойЧасти, ИмяМетодаВладельцаТабличнойЧастиГруппы, ИмяМетодаПриемника, ИмяМетодаПриемникаГруппы;
	
	Если ПараметрыИмпорта = Неопределено Тогда
		ПараметрыИмпорта = Новый Структура;
	КонецЕсли; 
		
	ПараметрыИмпорта.Вставить("Приемник", Приемник);
	
	ПриемникИскатьСтрокиТабличнойЧасти = Ложь;
	
	ПараметрыИмпорта.Вставить("ПриемникТабличнаяЧасть", СтрЧислоВхождений(Приемник, ".") = 3);
	
	Приемник_ = СтрЗаменить(Приемник, ".", Символы.ПС);
	Приемник_1 = СтрПолучитьСтроку(Приемник_, 1);
	Если Приемник_1 = "РегистрСведений" Тогда
		ТипПриемника = Новый ОписаниеТипов(Приемник_1 + "КлючЗаписи." + СтрПолучитьСтроку(Приемник_, 2));
		ПриемникРегистрСведений = Истина;
	Иначе
		ТипПриемника = Новый ОписаниеТипов(Приемник_1 + "Ссылка." + СтрПолучитьСтроку(Приемник_, 2));
		ПриемникРегистрСведений = Ложь;
	КонецЕсли;
	
	ПараметрыИмпорта.Вставить("ТипПриемника", ТипПриемника);
	ПараметрыИмпорта.Вставить("ПриемникРегистрСведений", ПриемникРегистрСведений);	
	
	Если ПараметрыИмпорта.ПриемникТабличнаяЧасть Тогда
		ПриемникИмяТабличнойЧасти = СтрПолучитьСтроку(Приемник_, 4);
		ТаблицаПолучателя = СтрПолучитьСтроку(Приемник_, 1) + "." + СтрПолучитьСтроку(Приемник_, 2) + "." + ПриемникИмяТабличнойЧасти;
	Иначе
		ТаблицаПолучателя = Приемник;
	КонецЕсли;
	
	//ПараметрыИмпорта.Вставить("ИмяТабличнойЧасти", ПриемникИмяТабличнойЧасти);
	ПараметрыИмпорта.Вставить("ПриемникИмяТабличнойЧасти", ПриемникИмяТабличнойЧасти);
	ПараметрыИмпорта.Вставить("ТаблицаПолучателя", ТаблицаПолучателя);	
	
	Если НЕ ПараметрическийОтбор = Неопределено Тогда
		ВладельцыПоУмолчанию = Новый Соответствие;
		РеквизитыПоискаПоУмолчанию = Новый Структура;
		Для Каждого Элемент Из ПараметрическийОтбор Цикл
			Если ТипЗнч(Элемент.Ключ) = Тип("ОписаниеТипов") Тогда
				ВладельцыПоУмолчанию.Вставить(Элемент.Ключ, Элемент.Значение);
			Иначе
				РеквизитыПоискаПоУмолчанию.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЕсли;
		КонецЦикла; 
		Если ВладельцыПоУмолчанию.Количество() > 0 Тогда
			ВладелецПриемникаПоУмолчанию = ВладельцыПоУмолчанию[ТипПриемника];
		Иначе
			ВладельцыПоУмолчанию = Неопределено;
		КонецЕсли;
		Если РеквизитыПоискаПоУмолчанию.Количество() = 0 Тогда
			РеквизитыПоискаПоУмолчанию = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыИмпорта.Вставить("ВладелецПриемникаПоУмолчанию", 	ВладелецПриемникаПоУмолчанию);
	ПараметрыИмпорта.Вставить("ВладельцыПоУмолчанию", 			ВладельцыПоУмолчанию);
	ПараметрыИмпорта.Вставить("РеквизитыПоискаПоУмолчанию", 	РеквизитыПоискаПоУмолчанию);
	
	// ПОДГОТОВКА ДОПОЛНИТЕЛЬНЫХ ДАННЫХ ДЛЯ УСКОРЕНИЯ ПОИСКА
	
	МетодыСозданияДополнительныхДанных = МетодыСозданияДополнительныхДанных(Правила, НЕ ПараметрыИмпорта.ПриемникТабличнаяЧасть);	// [{ИмяРеквизита, ИмяМетодаСоздатьЭлемент}]
	ТаблицыДополнительныхДанных = ТаблицыДополнительныхДанных(Правила); 											// [{ИмяРеквизита, ТаблицаМенеджер}]
	
	Если НЕ ПараметрыИмпорта.ПриемникТабличнаяЧасть Тогда
		ИмяМетодаПриемника = МетодСозданияЭлемента(ПараметрыИмпорта.ТипПриемника);
		ИмяМетодаПриемникаГруппы = МетодСозданияЭлемента(ПараметрыИмпорта.ТипПриемника, Истина);
		Если ИмяМетодаПриемника = Неопределено Тогда
			ТекстИсключения = НСтр("ru = 'Данный тип приемника не поддерживается'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	Иначе
		Если НЕ ПараметрыИмпорта.ВладелецТабличнойЧасти = Неопределено Тогда
			Менеджер = ПараметрыИмпорта.ВладелецТабличнойЧасти.ПолучитьОбъект();
			Если НЕ ПриемникИскатьСтрокиТабличнойЧасти Тогда
				Менеджер[ПараметрыИмпорта.ПриемникИмяТабличнойЧасти].Очистить();
			КонецЕсли;
		Иначе
			ИмяМетодаВладельцаТабличнойЧасти = МетодСозданияЭлемента(ПараметрыИмпорта.ТипПриемника);
			ИмяМетодаВладельцаТабличнойЧастиГруппы = МетодСозданияЭлемента(ПараметрыИмпорта.ТипПриемника, Истина);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыИмпорта.Вставить("Менеджер", Менеджер);
	
	ПараметрыИмпорта.Вставить("ИмяМетодаВладельцаТабличнойЧасти", 		ИмяМетодаВладельцаТабличнойЧасти);
	ПараметрыИмпорта.Вставить("ИмяМетодаВладельцаТабличнойЧастиГруппы", ИмяМетодаВладельцаТабличнойЧастиГруппы);
	ПараметрыИмпорта.Вставить("ИмяМетодаПриемника", 					ИмяМетодаПриемника);
	ПараметрыИмпорта.Вставить("ИмяМетодаПриемникаГруппы", 				ИмяМетодаПриемникаГруппы);
	
	СозданиеГрупп = Ложь;
	ВнешниеДанныеИмяЭтоГруппа = "";
	ВнешниеДанныеТипЭтоГруппаБулево = Ложь;
	Если НЕ ПараметрыИмпорта.ПриемникТабличнаяЧасть Тогда 
		Если Справочники.ТипВсеСсылки().СодержитТип(ПараметрыИмпорта.ТипПриемника.Типы()[0]) ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ПараметрыИмпорта.ТипПриемника.Типы()[0]) Тогда
			
			Для Каждого Правило Из Правила Цикл
				Если Правило.ПриемникИмя = "ЭтоГруппа" Тогда
					
					Если Правило.ИсточникТип = Новый ОписаниеТипов("Булево") Тогда
						ВнешниеДанныеТипЭтоГруппаБулево = Истина;
					КонецЕсли;
					
					СозданиеГрупп = Истина;
					ВнешниеДанныеИмяЭтоГруппа = КолонкиВнешнихДанных[Правило.ИсточникИмя_ПриемникТип];
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыИмпорта.Вставить("СозданиеГрупп", 						СозданиеГрупп);
	ПараметрыИмпорта.Вставить("ВнешниеДанныеИмяЭтоГруппа", 			ВнешниеДанныеИмяЭтоГруппа);
	ПараметрыИмпорта.Вставить("ВнешниеДанныеТипЭтоГруппаБулево", 	ВнешниеДанныеТипЭтоГруппаБулево);	
	
	Если ПараметрыИмпорта.ПриемникТабличнаяЧасть И ПараметрыИмпорта.ВладелецТабличнойЧасти = Неопределено Тогда
		ПараметрыИмпорта.Вставить("ПолученныеВладельцыТабличнойЧасти", Новый Соответствие);
	КонецЕсли;
	
	ДобавитьПовторныйПроходВПараметрыИмпорта(ПараметрыИмпорта);
	
	Возврат ПараметрыИмпорта;

КонецФункции

Процедура ДобавитьПовторныйПроходВПараметрыИмпорта(ПараметрыИмпорта)
	
	ТребуетсяПовторныйПроход = Неопределено;
	
	Если НЕ (ПараметрыИмпорта.ПриемникТабличнаяЧасть ИЛИ ПараметрыИмпорта.ПриемникРегистрСведений) Тогда
		ТребуетсяПовторныйПроход = Ложь;
		
		ТаблицаПовторногоПоиска = Новый ТаблицаЗначений;
		ТаблицаПовторногоПоиска.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));
		ТаблицаПовторногоПоиска.Колонки.Добавить("Объект", ПараметрыИмпорта.ТипПриемника);
		ТаблицаПовторногоПоиска.Колонки.Добавить("ПриемникИмя", Новый ОписаниеТипов("Строка"));
		ТаблицаПовторногоПоиска.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Число"));
		ТаблицаПовторногоПоиска.Колонки.Добавить("ЗначениеРеквизита", Новый ОписаниеТипов("Число"));
		
		ПовторныйПроходИменаРеквизитов = Новый Соответствие;
		ПовторныйПроходИменаРеквизитовХеши = Новый Соответствие;
		ПовторныйПроходЗначенияРеквизитов = Новый Соответствие;
		ПовторныйПроходЗначенияРеквизитовХеши = Новый Соответствие;
		
		ТипыВладельцев = Новый Массив;
		МетаданныеПриемника = Метаданные.НайтиПоТипу(ПараметрыИмпорта.ТипПриемника.Типы()[0]);
		Если Метаданные.Справочники.Содержит(МетаданныеПриемника) И МетаданныеПриемника.Владельцы.Количество() > 0 Тогда
			Для Каждого МетаданныеВладельца Из МетаданныеПриемника.Владельцы Цикл
				Если Метаданные.Справочники.Содержит(МетаданныеВладельца) Тогда
					ТипыВладельцев.Добавить(Тип("СправочникСсылка." + МетаданныеВладельца.Имя));
				ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеВладельца) Тогда
					ТипыВладельцев.Добавить(Тип("ПланВидовХарактеристикСсылка." + МетаданныеВладельца.Имя));
				Иначе
					ВызватьИсключение "Неизвестный тип владельца";
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		Если ТипыВладельцев.Количество() > 0 Тогда
			ПриПовторномПроходеТребуетсяПоискВладельца = Истина;
			ТаблицаПовторногоПоиска.Колонки.Добавить("Владелец", Новый ОписаниеТипов(ТипыВладельцев));
		Иначе
			ПриПовторномПроходеТребуетсяПоискВладельца = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыИмпорта.Вставить("ТребуетсяПовторныйПроход", ТребуетсяПовторныйПроход);
	
КонецПроцедуры

#КонецОбласти


#Область КэшМетаданныхИзЗапроса

Функция СоздатьКэшироватьСопоставления(ДанныеПравил, РезультатЗапроса, НомераТаблиц)

	СозданныеСопоставления = Новый Соответствие;	
	ПромежуточныеКэши = Новый Соответствие;
	ДанныеПравил.Вставить("ПолеПриемника_ПолеИсточника", Новый Структура() );
	ДанныеПравил.Вставить("ПравилаКэшированияСоответствием", Новый Соответствие);//Соответствие(ИмяПравилаКэширования,КолонкаИсточник)
	
	Для каждого ПравилоКэширования Из ДанныеПравил.ПравилаКэширования Цикл	
		
		Если ПравилоКэширования.Значение.ЗапросТаблицаМД = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипМД = ПравилоКэширования.Значение.ТипТаблицыМД;
		ПоляЗаполнения = ПравилоКэширования.Значение.ПолеИсточник_ЗапросПоле;
		МенеджерМД = ПолучитьМенеджерОбъектаПоТипу(ТипМД);
				
		ТабДляСоздания = РезультатЗапроса[НомераТаблиц["ЗначенияМД_" + ПравилоКэширования.Ключ]].Выгрузить();
		
		//Если ПоляЗаполнения.Количество() > ТабДляСоздания.Колонки.Количество()-1 Тогда 
		//	ЗависимыеТаблицы.Вставить(ТипМД, ТабДляСоздания);
		//КонецЕсли;
		ПодчиненныеРеквизиты = Новый Соответствие;
		Для каждого ПолеЗаполнения Из ПоляЗаполнения Цикл
			
			Позиция = СтрНайти(ПолеЗаполнения.Значение, ".");
			Если Позиция = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РеквизитПоиска = Лев(ПолеЗаполнения.Значение, Позиция-1);			
			Если ПодчиненныеРеквизиты.Получить(РеквизитПоиска) = Неопределено Тогда
				ПодчиненныеРеквизиты.Вставить(РеквизитПоиска, Новый Структура(СтрЗаменить(ПолеЗаполнения.Значение,РеквизитПоиска+".","")));
			Иначе	
				ПодчиненныеРеквизиты[РеквизитПоиска].Вставить(СтрЗаменить(ПолеЗаполнения.Значение, РеквизитПоиска+".", ""));
			КонецЕсли;			
			
		КонецЦикла;
		
		ТабДляСоздания.Колонки.Добавить("Значение");
			
		Для каждого СтрокаТаб Из ТабДляСоздания Цикл
		
			ОбъектМД = СоздатьОбъектМД(МенеджерМД);			
			ЗаполнитьЗначенияСвойств(ОбъектМД, СтрокаТаб);			
						
			Для каждого Рекв Из ПодчиненныеРеквизиты Цикл
			   ОбъектМД[Рекв.Ключ] = ПолучитьПодчиненныйРеквизит(ОбъектМД, СтрокаТаб, Рекв.Ключ, Рекв.Значение);
			КонецЦикла;
			
			СтрокаТаб.Значение = ЗаписатьОбъектМД(ОбъектМД);
			
		КонецЦикла;
		
		КэшироватьКакТаблица = (ПравилоКэширования.Значение.ПолеИсточник_ЗапросПоле.Количество() > 1);
		ИндексируемыеПоляКлюча = "";
		
		Для каждого Поле Из ПоляЗаполнения Цикл
			ИндексируемыеПоляКлюча = ?(ИндексируемыеПоляКлюча="","",ИндексируемыеПоляКлюча+",") + СтрЗаменить(Поле.Значение, ".","_");
		КонецЦикла;		
		
		ПолеПриемника = ПравилоКэширования.Значение.ПолеПриемника;
		Если КэшироватьКакТаблица Тогда
			ПромежуточныеКэши.Вставить(ПолеПриемника, ПолучитьКэшРезультатаЗапросаТаблицей(ТабДляСоздания, ИндексируемыеПоляКлюча));
		Иначе	
			ПолеИсточник = Неопределено;
			Для каждого ПолеИсточник_ЗапросПоле Из ПравилоКэширования.Значение.ПолеИсточник_ЗапросПоле Цикл
				ПолеИсточник = ПолеИсточник_ЗапросПоле.Ключ;
				Прервать;
			КонецЦикла;
			
			Если ПолеИсточник <> Неопределено Тогда
				ДанныеПравил.ПравилаКэшированияСоответствием.Вставить(ПравилоКэширования.Ключ, ПолеИсточник);
			КонецЕсли;			
			
			ПромежуточныеКэши.Вставить(ПолеПриемника, ПолучитьКэшРезультатаЗапроса(ТабДляСоздания, ИндексируемыеПоляКлюча, "Значение"));
		КонецЕсли;
		
		Если СтрНайти(ПолеПриемника,".") = 0 Тогда
			
			СозданныеСопоставления.Вставить(ПолеПриемника, ПромежуточныеКэши.Получить(ПолеПриемника));
			
			ПолеПриемника_ПолеИсточника = Новый Структура();
			Для каждого ПолеЗаполнения Из ПоляЗаполнения Цикл
				ПолеПриемника_ПолеИсточника.Вставить(СтрЗаменить(ПолеЗаполнения.Значение, ".", "_"), ПолеЗаполнения.Ключ);
			КонецЦикла;
			
			ДанныеПравил.ПолеПриемника_ПолеИсточника.Вставить(ПолеПриемника, ПолеПриемника_ПолеИсточника);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СозданныеСопоставления;

КонецФункции

Функция ПолучитьПодчиненныйРеквизит(ОбъектМД, СтрокаТаб, ИмяРеквизита, Реквизиты)    
	
	ИмяТаблицы = ОбъектМД[ИмяРеквизита].Метаданные().ПолноеИмя();
	
	Для каждого Поле Из Реквизиты Цикл
		Реквизиты.Вставить(Поле.Ключ, СтрокаТаб[ИмяРеквизита + "_" + Поле.Ключ]);
	КонецЦикла;
	
	Ссылка = НайтиСсылку(ИмяТаблицы, Реквизиты);
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Ссылка = СоздатьСсылку(ТипЗнч(ОбъектМД[ИмяРеквизита]), Реквизиты);
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция НайтиСсылку(ИмяТаблицы, Реквизиты)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	т.Ссылка
	|ИЗ
	|	" + ИмяТаблицы + " КАК т
	|ГДЕ
	|	НЕ т.ПометкаУдаления";
	
	Для каждого Рекв Из Реквизиты Цикл
		Запрос.Текст = Запрос.Текст + " И т." + Рекв.Ключ + " = &" +Рекв.Ключ;
		Запрос.УстановитьПараметр(Рекв.Ключ, Рекв.Значение);	
	КонецЦикла;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
КонецФункции

Функция СоздатьСсылку(ТипЗначения, Реквизиты)

	  МенеджерМД = ПолучитьМенеджерОбъектаПоТипу(ТипЗначения);
	  ОбъектМД = СоздатьОбъектМД(МенеджерМД);
	  ЗаполнитьЗначенияСвойств(ОбъектМД, Реквизиты);
	  
	  Возврат ЗаписатьОбъектМД(ОбъектМД);

КонецФункции

Функция ПолучитьМенеджерОбъектаПоТипу(ТипЗначения)
	
	МД = Метаданные.НайтиПоТипу(ТипЗначения);
	Возврат Справочники[МД.Имя];
	
КонецФункции

Функция СоздатьОбъектМД(МенеджерМД, Дополнительно = Неопределено)

	Если Истина Тогда
		Возврат МенеджерМД.СоздатьЭлемент();
	Иначе
		ВызватьИсключение НСтр("ru = 'Не найден менеджер'");
	КонецЕсли;
	
КонецФункции

Функция ЗаписатьОбъектМД(ОбъектМД, ПараметрыЗаписи = Неопределено)

	ОбъектМД.Записать();
	
	Возврат ОбъектМД.Ссылка;

КонецФункции

Функция ПолучитьПараметрыДопДанных(Знач НомераЗапросовПоискаДополнительныхДанных, Знач РезультатЗапроса)
    
    ДополнительныеДанные = Новый Соответствие; // Ключ, Значение
    КлючиДополнительныхДанных = Новый Соответствие; // НомерСтроки, Ключ
	
    Для Каждого НомерЗапроса Из НомераЗапросовПоискаДополнительныхДанных Цикл
        
        ДанныеПоиска = РезультатЗапроса[НомерЗапроса.Значение - 1].Выгрузить();
        ДанныеПоиска.Индексы.Добавить("Ключ");
        ДополнительныеДанные.Вставить(НомерЗапроса.Ключ, ДанныеПоиска);
        
        ДанныеПоиска = РезультатЗапроса[НомерЗапроса.Значение].Выгрузить();
        ДанныеПоиска.Индексы.Добавить("НомерСтроки");
        КлючиДополнительныхДанных.Вставить(НомерЗапроса.Ключ, ДанныеПоиска);
        
	КонецЦикла;
	
	Возврат Новый Структура("ДополнительныеДанные, КлючиДополнительныхДанных", ДополнительныеДанные, КлючиДополнительныхДанных);

КонецФункции

Функция СоздатьОбновитьОбъектыМД(ПравилаОбновленияМД)

	КэшСозданныхОбъектовМД = Новый Структура;
	
	Возврат КэшСозданныхОбъектовМД;

КонецФункции

Функция ПолучитьОбъектСтрокиВыбори(Выборка, ОписаниеПриемника)

	тч = новый ТаблицаЗначений;
	
	Возврат тч.Добавить();

КонецФункции

Процедура ЗаполнитьПоляПриемника(ОбъектМД, Выборка, ОписаниеПриемника, ПравилаПолученияКэша, ПравилаПолученияСозданных, КэшОбъектовМД, КэшСозданныхОбъектовМД)

	НомерСтрокиИсточника = Выборка.НомерСтроки;
	
	Для каждого ПравилоПолучения Из ПравилаПолученияКэша Цикл
		
		ПолучитьИзСозданных = Ложь;
		
		НомерЗначения = ПравилоПолучения.КэшНомерСтроки_НомерЗначения.Получить(НомерСтрокиИсточника);
		Если НомерЗначения = Неопределено Тогда			
			ОбъектМД[ПравилоПолучения.ПолеПриемника] = ПолучитьЗначениеСозданного(ПравилоПолучения, Выборка);			
		Иначе
			ОбъектМД[ПравилоПолучения.ПолеПриемника] = ПравилоПолучения.КэшНомерЗначения_Значение.Получить(НомерЗначения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗначениеСозданного(ПравилоПолучения, Выборка)
	
	Если ПравилоПолучения.ИзСоответвия Тогда		
		
		Возврат ПравилоПолучения.КэшПолеПоиска_СозданноеЗначение.Получить(Выборка[ПравилоПолучения.ПолеИсточника]);
		
	Иначе
		
		Отбор = Новый Структура;
		Для каждого ПолеИсточника Из ПравилоПолучения.ПоляИсточника Цикл
			Отбор.Вставить(ПолеИсточника, Выборка[ПолеИсточника]);
		КонецЦикла;
		
		СтрокиПоиска = ПравилоПолучения.КэшПоискаПоНесколькимПолям.НайтиСтроки(Отбор);
		Если СтрокиПоиска.Количество() Тогда
			Возврат СтрокиПоиска[0].Значение;
		КонецЕсли;		
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКэшРезультатаЗапроса(ТаблицаКэширования, ИмяПоляКлюч, ИмяПоляЗначение)

	Результат = Новый Соответствие;
	
	Для каждого СтрокаТаб ИЗ ТаблицаКэширования Цикл
		Результат.Вставить(СтрокаТаб[ИмяПоляКлюч], СтрокаТаб[ИмяПоляЗначение]);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ПолучитьКэшРезультатаЗапросаТаблицей(ТаблицаКэширования, ИндексируемыеПоляКлюча)

	ТаблицаКэширования.Индексы.Добавить(ИндексируемыеПоляКлюча);	
	Возврат ТаблицаКэширования;

КонецФункции

#КонецОбласти


#Область ОписаниеИмпорта

Функция ПолучитьОписаниеПриемника(Приемник, Правила)
	

КонецФункции

Функция ПолучитьПриемникиДанных(ПриемникРегистрСведений, ПриемникТабличнаяЧасть, ТаблицыДополнительныхДанных, ТипПриемника)
    
    Перем Количество, ПриемникиДанных, ТаблицаКЗ;
    
    ПриемникиДанных = Новый Соответствие;
    Если НЕ (ПриемникТабличнаяЧасть ИЛИ ПриемникРегистрСведений) Тогда
        ПриемникиДанных.Вставить(ТаблицаТипа(ТипПриемника), 1);
    КонецЕсли;
    
    Для Каждого ТаблицаКЗ Из ТаблицыДополнительныхДанных Цикл
        Количество = ПриемникиДанных.Получить(ТаблицаКЗ.Значение);
        ПриемникиДанных.Вставить(ТаблицаКЗ.Значение, ?(Количество = Неопределено, 1, Количество + 1));
    КонецЦикла;
    Возврат ПриемникиДанных;

КонецФункции

#КонецОбласти


#Область ТаблицаПравил

Процедура ДобавитьЗаполнитьКолонкиПравил(Правила, ПриемникТабличнаяЧасть, КолонкиВнешнихДанных = Неопределено)
    
    Правила.Колонки.Добавить("НомерСубконто", 				Новый ОписаниеТипов("Число"));
    Правила.Колонки.Добавить("ЭтоСтрока", 					Новый ОписаниеТипов("Булево"));
    Правила.Колонки.Добавить("ИмяПравила", 					Новый ОписаниеТипов("Строка"));
    Правила.Колонки.Добавить("ЭтоСсылкаТабличнойЧасти", 	Новый ОписаниеТипов("Булево"));
	Правила.Колонки.Добавить("ИсточникИмяПоля", 			Новый ОписаниеТипов("Строка"));
	Правила.Колонки.Добавить("ПриемникИмяПредставление", 	Новый ОписаниеТипов("Строка"));
		
    Для Каждого Правило Из Правила Цикл
		
		Если СтрНайти(Правило.ПриемникИмя, "[") Тогда
            ЛеваяСкобка = СтрНайти(Правило.ПриемникИмя, "[");
            Правило.НомерСубконто = Число(Сред(Правило.ПриемникИмя, ЛеваяСкобка + 1, СтрДлина(Правило.ПриемникИмя) - ЛеваяСкобка - 1)) + 1;
        ИначеЕсли Правило.ПриемникТип.Типы()[0] = Тип("Строка") Тогда
            Правило.ЭтоСтрока = Истина;
        КонецЕсли;
		
		Если НЕ ПустаяСтрока(Правило.СпособПоискаПеречисляемогоТипа) Тогда
            Правило.ИмяПравила = "ПравилаТаблица" + Формат(Правила.Индекс(Правило) + 1, "ЧН=; ЧГ=");
        КонецЕсли;
		
		Если ПриемникТабличнаяЧасть Тогда
            Правило.ЭтоСсылкаТабличнойЧасти = Правило.ПриемникИмя = "Ссылка" ИЛИ Лев(Правило.ПриемникИмя, СтрДлина("Ссылка.")) = "Ссылка.";
		КонецЕсли;
		
		Если КолонкиВнешнихДанных <> Неопределено Тогда
			Правило.ИсточникИмяПоля = КолонкиВнешнихДанных.Получить(Правило.ИсточникИмя_ПриемникТип);
		КонецЕсли;
		
		Правило.ПриемникИмяПредставление = СтрЗаменить(Правило.ПриемникИмяПредставление, ".", "_");
		
    КонецЦикла;

КонецПроцедуры

//Примеры:
//ОсновнаяТаблица.Договор.ВалютаДоговора+Код
//		(ОсновнаяТаблица.Договор.ВалютаДоговора+Код)
//ОсновнаяТаблица.Договор.ВалютаДоговора.ОсновнаяВалюта+Код
//		(ОсновнаяТаблица.Договор.ВалютаДоговора.ОсновнаяВалюта+Код
//		,ОсновнаяТаблица.ВалютаДоговора+ОсновнаяВалюта.Код
//		,ОсновнаяТаблица.Договор+ВалютаДоговора.ОсновнаяВалюта.Код)
//ОсновнаяТаблица.Договор.ВалютаДоговора+Код
//		(ОсновнаяТаблица.Договор.ВалютаДоговора+Код, )
//
//ПравилоПуть=ОсновнаяТаблица.Договор.ВалютаДоговора.ОсновнаяВалюта
//ПравилоПолеМД=Код
//ЗапросПуть=ОсновнаяТаблица.Договор.ВалютаДоговора
//ЗапросПоле=ОсновнаяВалюта.Код
//ПравилоТаблицаМД=ОсновнаяТаблица
//ЗапросТаблицаМД=Справочник.Валюты
//ПолеПриемник=ОсновнаяТаблица.Договор	
//
//ПравилаКэширования = Новый Структура(ЗапросПуть(ПравилоПуть если не надо обновлять дочерние), Структура(ЗапросТаблицаМД, Структура(ЗапросПуть,ЗапросПоле)))	
//ПравилаПолученияКэша = Новый Структура(ПолеПриемник, ПравилоПуть)	
//
//Источник - импортируемая таблица
//Приемник - таблица метаданных, в которую происходит загрузка
//ТаблицаМД - вспомогательные таблицы реквизитов приемника
//
// ИспользуемыеМетаданные - Структура(ПредставлениеТаблицыМетаданных, Структура("ТаблицаМетаданных,ПолеПриемникаПравило,ПоляИсточникаПоляТаблицыМД"))
Функция ПолучитьДанныеПравил(Правила, Отказ = Ложь)
    	
	ПравилаКэширования = Новый Структура;	
	ПравилаОбновленияМД = Новый Структура;
	
	КэшПравилоПуть_ТаблицаМД = Новый Соответствие;
	КэшОписаниеТипа_ТаблицаМД = Новый Соответствие;

	КоличествоПравил = Правила.Количество()-1;
	ПолучатьВложенныеМД = Истина;
	
	РеквизитыОбъекта = Новый Структура; 
		
	Для ОбратныйНомер = 0 По КоличествоПравил Цикл	
		
		Правило = Правила.Получить(КоличествоПравил - ОбратныйНомер);
		
		ТекущаяТаблицаМД = ПолучитьТаблицуМДПоОписаниюТипов(Правило.ПриемникТип, КэшОписаниеТипа_ТаблицаМД);
		ЗапросПуть_ЗапросПоле = ПолучитьВозможныеПутиЗапроса(Правило.ПриемникИмя, Правило.ПриемникИскатьПоИмя, КэшПравилоПуть_ТаблицаМД, ТекущаяТаблицаМД, ПолучатьВложенныеМД);
		
		Для каждого ЭлементЗапросПуть Из ЗапросПуть_ЗапросПоле Цикл
		
			ПравилоКэширования = Неопределено;
			ПредставлениеПравилоПуть = СтрЗаменить(ЭлементЗапросПуть.Ключ,".","_");
			
			ТекущаяТаблицаМД = КэшПравилоПуть_ТаблицаМД.Получить(ЭлементЗапросПуть.Ключ);
			//Если (ТекущаяТаблицаМД = Неопределено) Или (ТекущаяТаблицаМД = "") Тогда
			//	
			//	ТекстОшибки = "Не задан ни один простой реквизит для реквита " + ЭлементЗапросПуть.Ключ;
			//	ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,,, ТекстОшибки, Истина);
			//	
			//	Отказ = Истина;
			//	ВызватьИсключение ТекстОшибки;
			//	
			//КонецЕсли;
			
			Если НЕ ПравилаКэширования.Свойство(ПредставлениеПравилоПуть) Тогда
				
				ПравилоЗапроса = Новый Структура;
				ПравилоЗапроса.Вставить("ЗапросТаблицаМД", ТекущаяТаблицаМД);
				ПравилоЗапроса.Вставить("ПолеПриемника", Правило.ПриемникИмя);
				ПравилоЗапроса.Вставить("ТипТаблицыМД", Правило.ПриемникТип.Типы()[0]);
				ПравилоЗапроса.Вставить("ПолеИсточник_ЗапросПоле", СоздатьСоответвие(Правило.ИсточникИмяПоля, ЭлементЗапросПуть.Значение));
				//ПравилоЗапроса.Вставить("ЗапросПуть_ЗапросПоле", СоздатьСоответвие(, ЭлементЗапросПуть.Значение));
				
				ПравилаКэширования.Вставить(ПредставлениеПравилоПуть, ПравилоЗапроса);
				
			Иначе
				
				ПравилаКэширования[ПредставлениеПравилоПуть].ПолеИсточник_ЗапросПоле.Вставить(Правило.ИсточникИмяПоля, ЭлементЗапросПуть.Значение);
				//ПравилаКэширования[ПредставлениеПравилоПуть].ЗапросПуть_ЗапросПоле.Вставить(ЭлементЗапросПуть.Ключ, ЭлементЗапросПуть.Значение);
				
			КонецЕсли;
			
			Если (СтрНайти(Правило.ПриемникИмя,".") = 0) Тогда
				РеквизитыОбъекта.Вставить(Правило.ПриемникИмя);
			КонецЕсли;
		
		КонецЦикла;									
	КонецЦикла;
	
	РеквизитыОбъектаСтрокой = "";
	Для каждого Рекв Из РеквизитыОбъекта Цикл
		РеквизитыОбъектаСтрокой = ?(РеквизитыОбъектаСтрокой="", "", РеквизитыОбъектаСтрокой + ",") + Рекв.Ключ;
	КонецЦикла;
	
	Возврат Новый Структура("ПравилаКэширования,РеквизитыОбъектаСтрокой", ПравилаКэширования, РеквизитыОбъектаСтрокой);

КонецФункции

Функция ПолучитьТаблицуМДПоОписаниюТипов(ОписаниеТипа, КэшОписаниеТипа_ТаблицаМД)

	ТаблицаМД = КэшОписаниеТипа_ТаблицаМД.Получить(ОписаниеТипа);
	Если ТаблицаМД = Неопределено Тогда
		
		ОбъектМД = Метаданные.НайтиПоТипу(ОписаниеТипа.Типы()[0]);
		Если ОбъектМД <> Неопределено Тогда
			ТаблицаМД = ОбъектМД.ПолноеИмя();
			КэшОписаниеТипа_ТаблицаМД.Вставить(ОписаниеТипа, ТаблицаМД);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаМД;

КонецФункции

Функция ПолучитьВозможныеПутиЗапроса(ПравилоПуть, ПравилоПолеМД, КэшПравилоПуть_ТаблицаМД, ТекущаяТаблицаМД, ПолучатьВложенныеМД = Истина)

	ВозможныеПутиЗапроса = Новый Соответствие;	
	ЗапросПуть = "";		
	
	ИндексРазделителя = СтрНайти(ПравилоПуть, ".");
	ПравилоПутьТекущий = ПравилоПуть;
	
	Если ПолучатьВложенныеМД Или (ИндексРазделителя = 0) Тогда				
		КэшПравилоПуть_ТаблицаМД.Вставить(ПравилоПуть, ТекущаяТаблицаМД);
		ВозможныеПутиЗапроса.Вставить(ПравилоПуть, ПравилоПолеМД);		
	КонецЕсли;
	
	Пока ИндексРазделителя <> 0 Цикл
		
		ЗапросПуть = ?(ЗапросПуть = "", "", ЗапросПуть + ".") + Лев(ПравилоПутьТекущий, ИндексРазделителя-1);		
		ПравилоПутьТекущий = Сред(ПравилоПутьТекущий, ИндексРазделителя+1);		
		ВозможныеПутиЗапроса.Вставить(ЗапросПуть, ПравилоПутьТекущий + "." + ПравилоПолеМД);
		
		Если ПолучатьВложенныеМД И КэшПравилоПуть_ТаблицаМД.Получить(ЗапросПуть) = Неопределено Тогда						
			КэшПравилоПуть_ТаблицаМД.Вставить(ЗапросПуть, "");
		КонецЕсли;		
		
		Если НЕ ПолучатьВложенныеМД Тогда
			Прервать;			
		КонецЕсли;
		
		ИндексРазделителя = СтрНайти(ПравилоПутьТекущий, ".");		
				
	КонецЦикла;

	Возврат ВозможныеПутиЗапроса;

КонецФункции

Функция СоздатьСоответвие(Ключ, Значение)

	Результат = Новый Соответствие;
	Результат.Вставить(Ключ, Значение);
	
	Возврат Результат;
	
КонецФункции

Функция ИскатьСтрокиТЧ(ПриемникТабличнаяЧасть, Правила)
	
	Если ПриемникТабличнаяЧасть Тогда
		Для Каждого Правило Из Правила Цикл
			
			Если Правило.Поиск И НЕ Правило.ЭтоСсылкаТабличнойЧасти Тогда
				Возврат Истина;				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

#КонецОбласти


#Область ШаблоныЗапросов

Процедура ДополнитьЗапросСопоставленияСоздания(Запрос, ОписаниеПриемника, ДанныеПравил, НомераТаблиц)
	
	РазделительЗапросов = ПолучениеДанныхУчетнойСистемыПереопределяемыйУХ.ТекстРазделителяЗапросовПакета();	
	
	ПакетыСопоставления = "";
	СводПоляВыбора = "";
	СводЛевыеСоединения = "";
	УничтожитьВтЗначения = "";
	
	Для каждого ПравилоТипа Из ДанныеПравил.ПравилаКэширования Цикл
		
		ПредставлениеМД = ПравилоТипа.Ключ;
		ТаблицаМетаданных = ПравилоТипа.Значение.ЗапросТаблицаМД;
		ПоляПриемникаИсточника = ПравилоТипа.Значение.ПолеИсточник_ЗапросПоле;
		
		Если ТаблицаМетаданных = Неопределено Тогда
			
			ПолеИсточник = Неопределено;
			Для каждого ПолеИсточникТаблица Из ПравилоТипа.Значение.ПолеИсточник_ЗапросПоле Цикл
				ПолеИсточник = ПолеИсточникТаблица.Ключ;
				Прервать;
			КонецЦикла;
			
			СводПоляВыбора = СводПоляВыбора + ПолучитьПолеВыбораЗначенияИзИсточника(ПолеИсточник, ПравилоТипа.Значение.ПолеПриемника);
			Продолжить;
			
		КонецЕсли;
		
		ПакетыСопоставления = ПакетыСопоставления 
			+ ПолучитьЗапрос_РеквизитыПоиска(ПредставлениеМД, ПоляПриемникаИсточника, НомераТаблиц)
			+ РазделительЗапросов
			+ ПолучитьЗапрос_ПоместитьВтЗначенияСоздание(ПредставлениеМД, ТаблицаМетаданных, ПоляПриемникаИсточника, НомераТаблиц)
			+ РазделительЗапросов
			+ ПолучитьЗапрос_УничтожитьТаблицу("втИзмерения_" + ПредставлениеМД, НомераТаблиц)
			+ РазделительЗапросов
			+ ПолучитьЗапрос_ВыбратьДляСоздания(ПредставлениеМД, ПоляПриемникаИсточника, НомераТаблиц)
			+ РазделительЗапросов;

		Если СтрНайти(ПравилоТипа.Ключ, "_") = 0 Тогда
			СводПоляВыбора = СводПоляВыбора + ПолучитьПолеВыбораЗначения(ПредставлениеМД, ПравилоТипа.Значение.ПолеПриемника);	
			СводЛевыеСоединения = СводЛевыеСоединения + ПолучитьЛевоеСоединениеСВнешнимиДанными(ПредставлениеМД, ПоляПриемникаИсточника);			
		КонецЕсли;	
		
		ТаблицаУничтожить = "втЗначения_" + ПредставлениеМД;
		НомераТаблиц.Вставить("Уничтожить_" + ТаблицаУничтожить, НомераТаблиц.Количество());
		УничтожитьВтЗначения = УничтожитьВтЗначения + ПолучитьЗапрос_УничтожитьТаблицу(ТаблицаУничтожить, НомераТаблиц) + РазделительЗапросов;
				
	КонецЦикла;
	
	НомераТаблиц.Вставить("Выбрать_ВнешниеДанныеССопоставлениями", НомераТаблиц.Количество());
	
    Запрос.Текст = Запрос.Текст
					+ "//////////////////////////////// СопоставлениеАналитик //////////////////////////////////"
					+ Символы.ПС
					+ ПакетыСопоставления
					+ "ВЫБРАТЬ
						|	" + СводПоляВыбора + "
						|	т.*
						|ИЗ
						|	ВнешниеДанные КАК т
						|	" + СводЛевыеСоединения + "
						|УПОРЯДОЧИТЬ ПО т.НомерСтроки
						| "
					+ РазделительЗапросов
					+ УничтожитьВтЗначения;
   
КонецПроцедуры

Функция ПолучитьЗапросИзмеренияДляПоиска(ПредставлениеМД, ПутьМД, ПоляПриемникаИсточника, НомераТаблиц = Неопределено, РазделительЗапросов = " ; ") Экспорт

	Возврат 
	ПолучитьЗапрос_РеквизитыПоиска(ПредставлениеМД, ПоляПриемникаИсточника, НомераТаблиц)
	+ РазделительЗапросов
	+ ПолучитьЗапрос_ПоместитьВтЗначения(ПредставлениеМД, ПутьМД, ПоляПриемникаИсточника, НомераТаблиц)
	+ РазделительЗапросов
	+ ПолучитьЗапрос_УничтожитьТаблицу("втИзмерения_" + ПредставлениеМД, НомераТаблиц)
	+ РазделительЗапросов
	+ ПолучитьЗапрос_ВыбратьЗначения(ПредставлениеМД, НомераТаблиц)
	+ РазделительЗапросов
	+ ПолучитьЗапрос_КлючиДляСтрок(ПредставлениеМД, ПоляПриемникаИсточника, НомераТаблиц)
	+ РазделительЗапросов
	+ ПолучитьЗапрос_УничтожитьТаблицу("втЗначения_" + ПредставлениеМД, НомераТаблиц);
	
КонецФункции

Функция ПолучитьЗапрос_РеквизитыПоиска(ПредставлениеМД, ПоляПриемникаИсточника, НомераТаблиц)

	НомераТаблиц.Вставить("РеквизитыПоиска_" + ПредставлениеМД, НомераТаблиц.Количество());
	
	ПоляВыбора = "";
	ПоляГруппировки = "";
	ЗапятаяИПеренос = "," + Символы.ПС;
	
	Для каждого Поле Из ПоляПриемникаИсточника Цикл		
		ПоляВыбора = ПоляВыбора + " т." + Поле.Ключ + " КАК " + Поле.Ключ + ЗапятаяИПеренос;
		ПоляГруппировки = ?(ПоляГруппировки = "", "", ПоляГруппировки + ЗапятаяИПеренос) + " т." + Поле.Ключ;		
	КонецЦикла;
	
	Возврат
	"ВЫБРАТЬ
	|	" + ПоляВыбора + "
	|	МИНИМУМ(т.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ втИзмерения_" + ПредставлениеМД + "
	|ИЗ
	|	ВнешниеДанные КАК т
	|
	|СГРУППИРОВАТЬ ПО
	|	" + ПоляГруппировки;
	
КонецФункции

Функция ПолучитьЗапрос_ПоместитьВтЗначения(ПредставлениеМД, ПутьМД, ПоляПриемникаИсточника, НомераТаблиц)

	НомераТаблиц.Вставить("ЗначенияМД_" + ПредставлениеМД, НомераТаблиц.Количество());
	
	Измерения = "";
	УсловиеСоединения = "";
	
	Для каждого ПолеМетаданных Из ПоляПриемникаИсточника Цикл
		
		Измерения = Измерения + " т."+ ПолеМетаданных.Ключ + ", ";
		УсловиеСоединения = ?(УсловиеСоединения = "", "" ,УсловиеСоединения + " И ") 
		+ "(т." + ПолеМетаданных.Ключ + " = ТаблицаМД." + ПолеМетаданных.Значение + ") ";
		
	КонецЦикла;
	
	Возврат 
	"ВЫБРАТЬ
	|	т.НомерСтроки,
	|	" + Измерения + "
	|	МИНИМУМ(ТаблицаМД.Ссылка) КАК Значение
	|ПОМЕСТИТЬ втЗначения_" + ПредставлениеМД + "
	|ИЗ
	|	втИзмерения_" + ПредставлениеМД + " КАК т
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ПутьМД + " КАК ТаблицаМД
	|		ПО " + УсловиеСоединения + "
	|
	|СГРУППИРОВАТЬ ПО
	|	" + Измерения + "
	|	т.НомерСтроки";
	
КонецФункции

Функция ПолучитьЗапрос_ПоместитьВтЗначенияСоздание(ПредставлениеМД, ПутьМД, ПоляПриемникаИсточника, НомераТаблиц)

	НомераТаблиц.Вставить("ЗначенияМД_" + ПредставлениеМД, НомераТаблиц.Количество());
	
	Измерения = "";
	УсловиеСоединения = "";
	
	Для каждого ПолеМетаданных Из ПоляПриемникаИсточника Цикл
		
		Измерения = Измерения + " т."+ ПолеМетаданных.Ключ + ", ";
		УсловиеСоединения = ?(УсловиеСоединения = "", "" ,УсловиеСоединения + " И ") 
		+ "(т." + ПолеМетаданных.Ключ + " = ТаблицаМД." + ПолеМетаданных.Значение + ") ";
		
	КонецЦикла;
	
	Возврат 
	"ВЫБРАТЬ
	|	т.НомерСтроки,
	|	" + Измерения + "
	|	ВЫБОР
	|		КОГДА МИНИМУМ(ТаблицаМД.Ссылка) ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяСоздание,
	|	МИНИМУМ(ТаблицаМД.Ссылка) КАК Значение
	|ПОМЕСТИТЬ втЗначения_" + ПредставлениеМД + "
	|ИЗ
	|	втИзмерения_" + ПредставлениеМД + " КАК т
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ПутьМД + " КАК ТаблицаМД
	|		ПО " + УсловиеСоединения + "
	|
	|СГРУППИРОВАТЬ ПО
	|	" + Измерения + "
	|	т.НомерСтроки
	|ИНДЕКСИРОВАТЬ ПО
	|	" + Измерения + "
	|	ТребуетсяСоздание";
	
КонецФункции

Функция ПолучитьЗапрос_ВыбратьЗначения(ПредставлениеМД, НомераТаблиц)

	НомераТаблиц.Вставить("ЗначенияПоКлючу_" + ПредставлениеМД, НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	т.НомерСтроки КАК Ключ,
	|	т.Значение
	|ИЗ
	|	втЗначения_" + ПредставлениеМД + " КАК т";

КонецФункции

Функция ПолучитьЗапрос_КлючиДляСтрок(ИмяТаблицыВтЗначения, ПоляПриемникаИсточника, НомераТаблиц)

	НомераТаблиц.Вставить("КлючиДляСтрок_" + ИмяТаблицыВтЗначения, НомераТаблиц.Количество());
	
	УсловиеСоединения = "";
	
	Для каждого ПолеМД Из ПоляПриемникаИсточника Цикл	
		УсловиеСоединения = ?(УсловиеСоединения = "", "", УсловиеСоединения + " И ") 
						+ "т." + ПолеМД.Ключ + " = " + "втЗначения." + ПолеМД.Ключ;
	КонецЦикла;
	
	Возврат
	"ВЫБРАТЬ
	|	т.НомерСтроки,
	|	втЗначения.НомерСтроки КАК Ключ
	|ИЗ
	|	ВнешниеДанные КАК т
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗначения_" + ИмяТаблицыВтЗначения + " КАК втЗначения
	|		ПО " + УсловиеСоединения;

КонецФункции

Функция ПолучитьЗапрос_УничтожитьТаблицу(ИмяТаблицы, НомераТаблиц)

	НомераТаблиц.Вставить("УНИЧТОЖИТЬ_" + ИмяТаблицы, НомераТаблиц.Количество());
	
	Возврат
	" УНИЧТОЖИТЬ " + ИмяТаблицы;

КонецФункции

Функция ПолучитьЗапрос_ВыбратьДляСоздания(ПредставлениеМД, ПоляПриемникаИсточника, НомераТаблиц)

	НомераТаблиц.Вставить("ЗначенияМД_" + ПредставлениеМД, НомераТаблиц.Количество());
	
	Измерения = "";	
	
	Для каждого ПолеМетаданных Из ПоляПриемникаИсточника Цикл
		Измерения = Измерения + " т."+ ПолеМетаданных.Ключ + " КАК " + СтрЗаменить(ПолеМетаданных.Значение, ".", "_") + ", ";
	КонецЦикла;
	
	Возврат
	"ВЫБРАТЬ
	|	" + Измерения + "
	|	т.НомерСтроки КАК Ключ
	|ИЗ
	|	втЗначения_" + ПредставлениеМД + " КАК т
	|ГДЕ
	|	т.ТребуетсяСоздание";

КонецФункции

Функция ПолучитьПолеВыбораЗначения(ПредставлениеМД, ПолеПриемника)
	Возврат "т_" + ПредставлениеМД + ".Значение КАК " + ПолеПриемника + ",";	
КонецФункции

Функция ПолучитьПолеВыбораЗначенияИзИсточника(ПолеИсточника, ПолеПриемника)
	Возврат "т." + ПолеИсточника + " КАК " + ПолеПриемника + ",";	
КонецФункции

Функция ПолучитьЛевоеСоединениеСВнешнимиДанными(ПредставлениеМД, ПоляПриемникаИсточника)

	УсловиеПо = "";
	Для каждого ПолеИсточник Из ПоляПриемникаИсточника Цикл
		УсловиеПо = УсловиеПо + " И т." + ПолеИсточник.Ключ + " = т_" + ПредставлениеМД + "." + ПолеИсточник.Ключ;
	КонецЦикла;
	
	Возврат
	"
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗначения_" + ПредставлениеМД + " КАК т_" + ПредставлениеМД + "
	|			ПО (НЕ т_" + ПредставлениеМД + ".ТребуетсяСоздание) 
	|				" + УсловиеПо;

КонецФункции

#КонецОбласти

УникальныеИмена_Индексы = Новый Структура;

#КонецЕсли
