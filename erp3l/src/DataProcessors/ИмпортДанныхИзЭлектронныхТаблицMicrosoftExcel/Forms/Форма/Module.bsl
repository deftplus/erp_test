
&НаКлиенте
Перем ADOX_Catalog;

&НаКлиенте
Перем ОбновлениеПравил;

// УПРАВЛЕНИЕ ФОРМОЙ

&НаСервере
Процедура ВидимостьДоступностьПриСозданииНаСервере()
	
	Если РежимПодчиненный Тогда
		
		Элементы.ИсточникИмяФайла.Доступность = Ложь;
		Элементы.ИсточникТаблицаФайлаПредставление.Доступность = Ложь;
		Элементы.Загрузить.Заголовок = "ОК";
		
	КонецЕсли;
	
	ВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьДоступность() 
	
	ИсточникТаблицаФайлаПредставлениеВидимость = ЗначениеЗаполнено(ИсточникТаблицаФайла);  
	Если НЕ Элементы.ИсточникТаблицаФайлаПредставление.Видимость = ИсточникТаблицаФайлаПредставлениеВидимость Тогда
		Элементы.ИсточникТаблицаФайлаПредставление.Видимость = ИсточникТаблицаФайлаПредставлениеВидимость;
	КонецЕсли;
	
	Если НЕ Элементы.ПриемникОбъектРодитель.Видимость = ПриемникИерархическийСправочник Тогда
		Элементы.ПриемникОбъектРодитель.Видимость = ПриемникИерархическийСправочник;
	КонецЕсли;
	
	ПриемникПолноеИмяКнопкаОткрытия = НЕ ПриемникТабличнаяЧасть И НЕ ПустаяСтрока(ПриемникПолноеИмя);
	Если НЕ Элементы.ПриемникПолноеИмя.КнопкаОткрытия = ПриемникПолноеИмяКнопкаОткрытия Тогда
		Элементы.ПриемникПолноеИмя.КнопкаОткрытия = ПриемникПолноеИмяКнопкаОткрытия;
	КонецЕсли;
	
	ИсточникИмяФайлаКнопкаОткрытия = НЕ ПустаяСтрока(ИсточникИмяФайла);
	Если НЕ Элементы.ИсточникИмяФайла.КнопкаОткрытия = ИсточникИмяФайлаКнопкаОткрытия Тогда
		Элементы.ИсточникИмяФайла.КнопкаОткрытия = ИсточникИмяФайлаКнопкаОткрытия;
	КонецЕсли;
	
	ЭлементовИсточник = ?(Элементы.ИсточникТаблицаФайлаПредставление.Видимость, 1, 0);
	ЭлементовПриемник = ?(Элементы.ПриемникОбъектРодитель.Видимость, 1, 0);
	
	И1 = Ложь;
	П1 = Ложь;
	
	Если ЭлементовИсточник = 0 Тогда
		Если ЭлементовПриемник = 1 Тогда
			И1 = Истина;
		КонецЕсли;
	Иначе
		Если ЭлементовПриемник = 0 Тогда
			П1 = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Элементы.ДекорацияПустаяИсточник.Видимость = И1 Тогда
		Элементы.ДекорацияПустаяИсточник.Видимость = И1;
	КонецЕсли;
	
	Если НЕ Элементы.ДекорацияПустаяПриемник.Видимость = П1 Тогда
		Элементы.ДекорацияПустаяПриемник.Видимость = П1;
	КонецЕсли;
	
	Если ПриемникИерархическийСправочник Тогда
		Элементы.ПриемникОбъектРодитель.ОграничениеТипа = ПриемникТипТаблицыМетаданных;
	КонецЕсли;
	
	Если НЕ Элементы.ПараметрЗагрузкиПроводитьДокументы.Пометка = ПараметрЗагрузкиПроводитьДокументы Тогда
		Элементы.ПараметрЗагрузкиПроводитьДокументы.Пометка = ПараметрЗагрузкиПроводитьДокументы;
	КонецЕсли;
	
	Если НЕ Элементы.ПараметрЗагрузкиОстанавливатьсяПриОшибке.Пометка = ПараметрЗагрузкиОстанавливатьсяПриОшибке Тогда
		Элементы.ПараметрЗагрузкиОстанавливатьсяПриОшибке.Пометка = ПараметрЗагрузкиОстанавливатьсяПриОшибке;
	КонецЕсли;
	
КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РежимПодчиненный = ЗначениеЗаполнено(Параметры.Параметр);
	
	Если РежимПодчиненный Тогда
		
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		Параметр = Параметры.Параметр;
		
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			РежимПодчиненныйНовый = Параметр.СохраненнаяНастройка = Неопределено;
			
			Параметр.Свойство("Файл", РежимПодчиненныйАдресФайла);
			Параметр.Свойство("ИмяТаблицы", ИсточникТаблицаФайла);
			
			Если НЕ РежимПодчиненныйНовый Тогда
				
				СохраненнаяНастройка = ПолучитьИзВременногоХранилища(Параметр.СохраненнаяНастройка);
				
				Если ТипЗнч(СохраненнаяНастройка) = Тип("Структура") И СохраненнаяНастройка.Свойство("СохраненнаяНастройка") Тогда
				
					Если СохраненнаяНастройка.СохраненнаяНастройка["ПоляИсточника"].Колонки.Найти("ДобавочноеПоле") = Неопределено Тогда
						СохраненнаяНастройка.СохраненнаяНастройка["ПоляИсточника"].Колонки.Добавить("ДобавочноеПоле", Новый ОписаниеТипов("Булево"));
					КонецЕсли;
					
					УправлениеФормойУХ.ВосстановитьНастройки(ЭтаФорма, СохраненнаяНастройка.СохраненнаяНастройка, Ложь);
					ПослеВосстановленияНастроек();
				Иначе
					Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе                                              			
			Отказ = Истина;
		КонецЕсли;
		
	Иначе
		
		ПараметрЗагрузкиОстанавливатьсяПриОшибке = Истина;
		
	КонецЕсли;
	
	ВидимостьДоступностьПриСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ СоздатьСоединение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если РежимПодчиненный Тогда
		
		Если НЕ ПустаяСтрока(РежимПодчиненныйАдресФайла) Тогда
			
			ИсточникИмяФайла = ОбщегоНазначенияКлиентСерверУХ.ПолучитьИмяВременногоФайлаУниверсально();
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(РежимПодчиненныйАдресФайла);
			ДвоичныеДанные.Записать(ИсточникИмяФайла);
			
			ПриИзмененииИмениФайла(Ложь);
			
			Если РежимПодчиненныйНовый Тогда
				
				ПриИзмененииТаблицыФайла();
				
			КонецЕсли;
			
			Попытка
				#Если ВебКлиент Тогда
					НачатьУдалениеФайлов(Неопределено, ИсточникИмяФайла);	
				#Иначе
					УдалитьФайлы(ИсточникИмяФайла);	
				#КонецЕсли				
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
		
	Если ИсточникВыбора.ИмяФормы = "Справочник.ПравилаИмпортаТаблиц.ФормаВыбора" Тогда
		
	Иначе
		
		Элементы.ПоляПриемника.ЗакончитьРедактированиеСтроки(Ложь);
		
		ТекущиеДанные = Элементы.ПоляПриемника.ТекущиеДанные;
		
		Если ТекущиеДанные.УточнениеВладельца Тогда
			СтрокаПриемникаУстановитьВладельца(ТекущиеДанные, ВыбранноеЗначение);
		Иначе
			ПриемникОбъектТабличнойЧасти = ВыбранноеЗначение;
			УстановитьНепосредственныйВыбор(ТекущиеДанные.ПолучитьИдентификатор());
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = УникальныйИдентификатор Тогда 
		
		Если ИмяСобытия = "ВыборОбъектовМетаданныхУХ" Тогда
			
			Если Параметр.Количество() Тогда
				ПриемникПолноеИмя = Параметр[0].Значение;
				ПриИзменениеПолногоИмениПриемника();
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Источник = ЭтаФорма Тогда
		
		Если ИмяСобытия = "Обработка.ИмпортДанныхИзЭлектронныхТаблицMicrosoftExcel.Форма.НастройкиSQL" Тогда
			
			ИсточникУсловие = Параметр.Условие;
			
			Если Параметр.СоединенияИзменены Тогда
				
				ИсточникСоединения.Очистить();
				
				Для Каждого Элемент Из Параметр.Соединения Цикл
					
					Соединение = ИсточникСоединения.Добавить();
					Соединение.Таблица = Элемент.Значение;
					Соединение.Условие = Элемент.Представление;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если Параметр.ДобавочныеПоляИзменены Тогда
				
				ИсточникДобавочныеПоля.Очистить();
				
				Для Каждого Элемент Из Параметр.ДобавочныеПоля Цикл
					
					ДобавочноеПоле = ИсточникДобавочныеПоля.Добавить();
					ДобавочноеПоле.Имя = Элемент.Представление;
					ДобавочноеПоле.Значение = Элемент.Значение;
					
					Типы = Новый Массив;
					Типы.Добавить(ТипЗнч(ДобавочноеПоле.Значение));
					
					ДобавочноеПоле.Тип = Новый ОписаниеТипов(Типы);
					
				КонецЦикла; 
				
			КонецЕсли;
			
			Если Параметр.СоединенияИзменены ИЛИ Параметр.ДобавочныеПоляИзменены Тогда
				ПриИзмененииТаблицыФайла();
			КонецЕсли;
				
			ИсточникПервые1 = Параметр.Первые1;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Очистить();
	СохранитьНастройки(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	УправлениеФормойУХ.ВосстановитьНастройки(ЭтаФорма, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ПослеВосстановленияНастроек();
	
	ВидимостьДоступность();
	
КонецПроцедуры

// ОБСЛУЖИВАНИЕ ОБРАБОТЧИКОВ СОБЫТИЙ ФОРМЫ

&НаСервере
Функция ОбновитьИдентификаторы(ЭлементыДерева, Соответствие = Неопределено)
	
	Если Соответствие = Неопределено Тогда
		Соответствие = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Идентификатор = Элемент.Идентификатор;
		Элемент.Идентификатор = Элемент.ПолучитьИдентификатор();
		Соответствие.Вставить(Идентификатор, Элемент.Идентификатор);
		ОбновитьИдентификаторы(Элемент.ПолучитьЭлементы(), Соответствие);
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМ

&НаКлиенте
Процедура ИсточникИмяФайлаПриИзменении(Элемент)
	
	ПриИзмененииИмениФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыборФайла.Фильтр = "Файлы Microsoft Excel (*.xls, *.xlsx)|*.xls; *.xlsx|Все файлы (*.*)|*.*";
	ДиалогВыборФайла.Показать(Новый ОписаниеОповещения("ИсточникИмяФайлаНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыборФайла", ДиалогВыборФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникИмяФайлаНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
    
    ДиалогВыборФайла = ДополнительныеПараметры.ДиалогВыборФайла;
    
    
    Если (ВыбранныеФайлы <> Неопределено) Тогда
        ИсточникИмяФайла = ДиалогВыборФайла.ПолноеИмяФайла;
        ПриИзмененииИмениФайла();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсточникИмяФайлаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Попытка
		ОбщегоНазначенияКлиент.ОткрытьФайлВПрограммеПросмотра(ИсточникИмяФайла);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникТаблицаФайлаПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникТаблицаФайлаПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИсточникТаблицаФайла = ВыбранноеЗначение;
	
	ИсточникСоединения.Очистить();
	ИсточникУсловие = "";
	ИсточникПервые1 = Ложь;
	
	ПриИзмененииТаблицыФайла();
	
КонецПроцедуры


&НаКлиенте
Процедура ПоляИсточникаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = ПоляИсточника.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле.Имя = "ПоляИсточникаПредставлениеСопоставления" Тогда
		Если ТекущиеДанные.Выбран > 0 Тогда
			СтрокаИсточникаУдалитьСопоставление(ТекущиеДанные);
		Иначе
			СопоставитьНажатием();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляИсточникаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляИсточникаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	СтрокаИсточникаУдалитьСопоставление(Элементы.ПоляИсточника.ТекущиеДанные);
	
КонецПроцедуры


&НаКлиенте
Процедура ПриемникПолноеИмяПриИзменении(Элемент)
	
	ПриИзменениеПолногоИмениПриемника();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриемникПолноеИмяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КоллекцииВыбираемыхОбъектовМетаданных = Новый СписокЗначений;
	КоллекцииВыбираемыхОбъектовМетаданных.Добавить("Справочники");
	КоллекцииВыбираемыхОбъектовМетаданных.Добавить("Документы");
	КоллекцииВыбираемыхОбъектовМетаданных.Добавить("ПланыСчетов");
	КоллекцииВыбираемыхОбъектовМетаданных.Добавить("ПланыВидовХарактеристик");
	КоллекцииВыбираемыхОбъектовМетаданных.Добавить("РегистрыСведений");
	
	ВыбранныеОбъектыМетаданных = Новый СписокЗначений;
	
	Если НЕ ПустаяСтрока(ПриемникПолноеИмя) Тогда
		ВыбранныеОбъектыМетаданных.Добавить(ПриемникПолноеИмя);
	КонецЕсли;
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("КоллекцииВыбираемыхОбъектовМетаданных", КоллекцииВыбираемыхОбъектовМетаданных);
	ПараметрыФормыВыбора.Вставить("ВыбранныеОбъектыМетаданных", ВыбранныеОбъектыМетаданных);
	ПараметрыФормыВыбора.Вставить("НачальноеЗначениеВыбора", ПриемникПолноеИмя);
	ПараметрыФормыВыбора.Вставить("ВыборЕдинственного", Истина);
	ПараметрыФормыВыбора.Вставить("УникальныйИдентификаторИсточник", УникальныйИдентификатор);
	ПараметрыФормыВыбора.Вставить("ВыводитьТабличныеЧасти", Истина);
	
	ОткрытьФорму("ОбщаяФорма.ВыборОбъектовМетаданныхУХ", ПараметрыФормыВыбора, ЭтаФорма,,,, Новый ОписаниеОповещения("ПриемникПолноеИмяНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриемникПолноеИмяНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    

КонецПроцедуры

&НаКлиенте
Процедура ПриемникПолноеИмяОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Попытка
		ОткрытьФорму(ПриемникПолноеИмя + ".ФормаСписка");
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриемникОбъектРодительПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ПриемникОбъектРодитель) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ КорректностьВыбораГруппыСправочника(ПриемникОбъектРодитель) Тогда
		ПриемникОбъектРодитель = Неопределено;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выберите группу: выбранное значение - элемент, а должно быть группой";
		Сообщение.ПутьКДанным = "ПриемникОбъектРодитель";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПоляПриемникаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = ПоляПриемника.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле.Имя = "ПоляПриемникаПредставлениеСопоставления" Тогда
		Если ТекущиеДанные.УточнениеВладельца ИЛИ ТекущиеДанные.ВыбиратьНепосредственно Тогда
			
		ИначеЕсли ТекущиеДанные.Выбран Тогда
			СтрокаПриемникаУдалитьСопоставление(ТекущиеДанные);
			СтандартнаяОбработка = Ложь;
		Иначе
			СопоставитьНажатием();
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	Иначе
//		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляПриемникаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляПриемникаПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Элемент.ТекущийЭлемент.Имя = "ПоляПриемникаПредставлениеСопоставления" Тогда
		Если Элемент.ТекущийЭлемент.СписокВыбора.НайтиПоЗначению(ТекущиеДанные.ПредставлениеСопоставления) = Неопределено Тогда
			Элемент.ТекущийЭлемент.СписокВыбора.Добавить(ТекущиеДанные.ПредставлениеСопоставления);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляПриемникаПередУдалением(Элемент, Отказ)

	Отказ = Истина;
	
	СтрокаПриемникаУдалитьСопоставление(Элементы.ПоляПриемника.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляПриемникаПередРазворачиванием(Элемент, Строка, Отказ)
	
	СтрокаПриемника = ПоляПриемника.НайтиПоИдентификатору(Строка);
	
	ЭлементыСтроки = СтрокаПриемника.ПолучитьЭлементы();
	
	Если НЕ (ЭлементыСтроки.Количество() = 1 И ПустаяСтрока(ЭлементыСтроки[0].Имя)) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыСтроки.Очистить();
	
	ДобавитьРеквизитыОбъектаМетаданных(ЭлементыСтроки, СтрокаПриемника.Тип, Ложь, СтрокаПриемника.ВыбиратьНепосредственно);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляПриемникаПоискПриИзменении(Элемент)
	
	СтрокаПриемникаОбновитьПоиск(Элементы.ПоляПриемника.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляПриемникаПредставлениеСопоставленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПоляПриемника.ТекущиеДанные;
	
	Если ТекущиеДанные.ВыбиратьНепосредственно Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПриемникПолноеИмя_ = СтрЗаменить(ПриемникПолноеИмя, ".", Символы.ПС);
		ОткрытьФорму(СтрПолучитьСтроку(ПриемникПолноеИмя_, 1) + "." + СтрПолучитьСтроку(ПриемникПолноеИмя_, 2) + ".ФормаВыбора", Новый Структура("ТекущаяСтрока", ПриемникОбъектТабличнойЧасти), ЭтаФорма);
		
	ИначеЕсли ТекущиеДанные.УточнениеВладельца Тогда
		
		СтандартнаяОбработка = Ложь;
	
		ВыбраноЗначение = ТекущиеДанные.Поиск И ТипЗнч(ТекущиеДанные.УточнениеВладельцаСпособПоиска) = Тип("ОписаниеТипов") И НЕ ТекущиеДанные.УточнениеВладельцаВладелец.Пустая();
		
		ДанныеВыбора = Новый СписокЗначений;
		
		СписокВыбора = СтрокаПриемникаУточнениеВладельцаСписокПоиска(ТекущиеДанные);
		Для Каждого ЭлементСписка Из СписокВыбора Цикл
			Если ВыбраноЗначение И ТипЗнч(ЭлементСписка.Значение) = Тип("ОписаниеТипов") И ТипЗнч(ТекущиеДанные.УточнениеВладельцаВладелец) = ЭлементСписка.Значение.Типы()[0] Тогда
				ДанныеВыбора.Добавить(ТекущиеДанные.ПредставлениеСопоставления, Строка(ТипЗнч(ТекущиеДанные.УточнениеВладельцаВладелец)) + " <" + ТекущиеДанные.ПредставлениеСопоставления + ">");
				ДанныеВыбора.Добавить(ЭлементСписка.Представление);
			Иначе
				ДанныеВыбора.Добавить(ЭлементСписка.Представление);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляПриемникаПредставлениеСопоставленияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ПоляПриемника.ТекущиеДанные;
	Если ТекущиеДанные.УточнениеВладельца Тогда
		Значение = Неопределено;
		СписокВыбора = СтрокаПриемникаУточнениеВладельцаСписокПоиска(ТекущиеДанные);
		Для Каждого ЭлементСписка Из СписокВыбора Цикл
			Если ТипЗнч(ЭлементСписка.Значение) = Тип("Структура") И ЭлементСписка.Значение.Имя = Ложь Тогда
				Значение = ЭлементСписка.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		Если НЕ Значение = Неопределено Тогда
			СтрокаПриемникаУстановитьВладельца(ТекущиеДанные, Значение);
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.ВыбиратьНепосредственно Тогда
		Если ЗначениеЗаполнено(ПриемникОбъектТабличнойЧасти) Тогда
			ПриемникОбъектТабличнойЧасти = Неопределено;
			УстановитьНепосредственныйВыбор(ТекущиеДанные.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляПриемникаПредставлениеСопоставленияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ПоляПриемника.ТекущиеДанные;
	
	Если ТекущиеДанные.УточнениеВладельца Тогда
		
		Если НЕ ТипЗнч(ТекущиеДанные.УточнениеВладельцаСпособПоиска) = Тип("Строка") Тогда
			Если НЕ ТекущиеДанные.УточнениеВладельцаВладелец.Пустая() Тогда
				
				Значение = Неопределено;
				
				СписокВыбора = СтрокаПриемникаУточнениеВладельцаСписокПоиска(ТекущиеДанные);
				Для Каждого ЭлементСписка Из СписокВыбора Цикл
					Если ТипЗнч(ЭлементСписка.Значение) = Тип("ОписаниеТипов") Тогда
						Значение = ЭлементСписка.Значение;
						Прервать;
					КонецЕсли;
				КонецЦикла; 
				
				Если НЕ Значение = Неопределено Тогда
					ОткрытьФорму(ПолноеИмяМетаданных(Значение.Типы()[0]) + ".ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.УточнениеВладельцаВладелец), ЭтаФорма);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.ВыбиратьНепосредственно И ЗначениеЗаполнено(ПриемникОбъектТабличнойЧасти) Тогда
		
		ПриемникПолноеИмя_ = СтрЗаменить(ПриемникПолноеИмя, ".", Символы.ПС);
		ОткрытьФорму(СтрПолучитьСтроку(ПриемникПолноеИмя_, 1) + "." + СтрПолучитьСтроку(ПриемникПолноеИмя_, 2) + ".ФормаОбъекта", Новый Структура("Ключ", ПриемникОбъектТабличнойЧасти), ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляПриемникаПредставлениеСопоставленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Значение = Неопределено;
	
	ТекущиеДанные = Элементы.ПоляПриемника.ТекущиеДанные;
	СписокВыбора = СтрокаПриемникаУточнениеВладельцаСписокПоиска(ТекущиеДанные);
	Для Каждого ЭлементСписка Из СписокВыбора Цикл
		Если ЭлементСписка.Представление = ВыбранноеЗначение Тогда
			Значение = ЭлементСписка.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Если Значение = Неопределено Тогда
		Элементы.ПоляПриемника.ЗакончитьРедактированиеСтроки(Истина);
	ИначеЕсли ТипЗнч(Значение) = Тип("ОписаниеТипов") Тогда
		ОткрытьФорму(ПолноеИмяМетаданных(Значение.Типы()[0]) + ".ФормаВыбора", Новый Структура("ТекущаяСтрока", ТекущиеДанные.УточнениеВладельцаВладелец), ЭтаФорма);
	Иначе
		СтрокаПриемникаУстановитьВладельца(ТекущиеДанные, Значение);
		Элементы.ПоляПриемника.ЗакончитьРедактированиеСтроки(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// ПЕРЕТАСКИВАНИЯ
                                                                               
&НаКлиенте
Процедура ПоляИсточникаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение = Новый Структура("Форма,Источник,Значение", ЭтаФорма, Элемент.Имя, ПараметрыПеретаскивания.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляИсточникаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	
	Значение = ПараметрыПеретаскивания.Значение;
	Если ТипЗнч(Значение) = Тип("Структура") Тогда
		Если Значение.Свойство("Форма") И Значение.Форма = ЭтаФорма Тогда
			Если Значение.Источник = "ПоляПриемника" Тогда
				Если НЕ Строка = Неопределено Тогда
					ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляИсточникаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ДобавитьПравило(Строка, ПараметрыПеретаскивания.Значение.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляПриемникаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	СтрокаДерева = ПоляПриемника.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	
	Если НЕ СтрокаДерева.Выбор ИЛИ СтрокаДерева.Выбран ИЛИ СтрокаДерева.ВыбранСвязанный Тогда
		Выполнение = Ложь;
	Иначе
		ПараметрыПеретаскивания.Значение = Новый Структура("Форма,Источник,Значение", ЭтаФорма, Элемент.Имя, ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляПриемникаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	
	Значение = ПараметрыПеретаскивания.Значение;
	Если ТипЗнч(Значение) = Тип("Структура") Тогда                                                                     
		Если Значение.Свойство("Форма") И Значение.Форма = ЭтаФорма Тогда
			Если Значение.Источник = "ПоляИсточника" Тогда
				Если НЕ Строка = Неопределено Тогда
					СтрокаДерева = ПоляПриемника.НайтиПоИдентификатору(Строка);
					Если СтрокаДерева.Выбор И НЕ СтрокаДерева.Выбран И НЕ СтрокаДерева.ВыбранСвязанный Тогда
						ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляПриемникаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ДобавитьПравило(ПараметрыПеретаскивания.Значение.Значение, Строка);
	
КонецПроцедуры

// КОМАНДЫ

&НаКлиенте                   
Процедура Загрузить(Команда)  
	
	Если РежимПодчиненный Тогда
		
		Параметр = ПолучитьСтруктуруПараметра(ВладелецФормы.УникальныйИдентификатор);
		
		Оповестить(ИмяФормы, Параметр, ВладелецФормы);
		Закрыть();
		Возврат;
		
	КонецЕсли;
	
	ТД = ТекущаяДата();
		
	АдресФайла = "";
	
	ДопПараметры = Новый Структура("ТД", ТД);
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьЗавершение", ЭтотОбъект, ДопПараметры);
	НачатьПомещениеФайла(Оповещение, АдресФайла, ИсточникИмяФайла, Ложь, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
    
    ТД = ДополнительныеПараметры.ТД;
        
    КоличествоЗагруженныхОбъектов = ЗагрузитьНаСервере(Адрес);
    
    УдалитьИзВременногоХранилища(Адрес);
    
    Если НЕ КоличествоЗагруженныхОбъектов = Неопределено Тогда
		
		ВремяЗагрузки = ТекущаяДата() - ТД;
        Текст = 
		"Загрузка выполнена за " + ВремяЗагрузки + " сек.
        |Загружено " + КоличествоЗагруженныхОбъектов + " объектов.";
		
		Если КоличествоЗагруженныхОбъектов > 2 И ВремяЗагрузки > 0 Тогда
			
			Текст = Текст + "
		            |Средняя скорость загрузки " 
					+ Формат(КоличествоЗагруженныхОбъектов/ВремяЗагрузки, "ЧДЦ=0; ЧН=") 
					+ " объектов в секунду.";
					
        КонецЕсли;
		
		Сообщить(Текст);
		
    Иначе
		
		ПоказатьПредупреждение(, 
		"Загрузка не удалась!
        |Подробная информация находится в журнале регистрации.");
		
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПараметрЗагрузкиОстанавливатьсяПриОшибке(Команда)
	
	ПараметрЗагрузкиОстанавливатьсяПриОшибке = НЕ ПараметрЗагрузкиОстанавливатьсяПриОшибке;
	
	ВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрЗагрузкиПроводитьДокументы(Команда)
	
	ПараметрЗагрузкиПроводитьДокументы = НЕ ПараметрЗагрузкиПроводитьДокументы;
	
	ВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьSQL(Команда)
	
	Таблицы = Новый СписокЗначений;
	Колонки = Новый Соответствие;
	Для Каждого СтрокаТаблица Из ИсточникТаблицы Цикл
		
		Если НЕ СтрокаТаблица.Имя = ИсточникТаблицаФайла Тогда
			Таблицы.Добавить(СтрокаТаблица.Имя, СтрокаТаблица.Представление);
		КонецЕсли;
		
		КолонкиТаблицы = Новый СписокЗначений;
		Для Каждого СтрокаКолонка Из СтрокаТаблица.Колонки Цикл
			КолонкиТаблицы.Добавить("[" + СтрокаТаблица.Имя + "].[" + СтрокаКолонка.Имя + "]", "[" + СтрокаТаблица.Представление + "] " + СтрокаКолонка.Имя);
		КонецЦикла; 
		Колонки.Вставить(СтрокаТаблица.Имя, КолонкиТаблицы);
		
	КонецЦикла;
	
	Соединения = Новый СписокЗначений;
	Для Каждого Элемент Из ИсточникСоединения Цикл
		Соединения.Добавить(Элемент.Таблица, Элемент.Условие);
	КонецЦикла; 
	
	ДобавочныеПоля = Новый СписокЗначений;
	Для Каждого Элемент Из ИсточникДобавочныеПоля Цикл
		ДобавочныеПоля.Добавить(Элемент.Значение, Элемент.Имя);		
	КонецЦикла; 
	
	Параметр = Новый Структура;
	Параметр.Вставить("Таблица", ИсточникТаблицаФайла);
	Параметр.Вставить("Таблицы", Таблицы);
	Параметр.Вставить("Соединения", Соединения);
	Параметр.Вставить("Условие", ИсточникУсловие);
	Параметр.Вставить("Колонки", Колонки);
	Параметр.Вставить("Первые1", ИсточникПервые1);
	Параметр.Вставить("ДобавочныеПоля", ДобавочныеПоля);
	
	ОткрытьФорму("Обработка.ИмпортДанныхИзЭлектронныхТаблицMicrosoftExcel.Форма.НастройкиSQL", Параметр, ЭтаФорма, ЭтаФорма);
	
КонецПроцедуры

// ОБСЛУЖИВАНИЕ КОМАНД ФОРМЫ

&НаСервере
Функция ПолучитьСтруктуруПараметра(УникальныйИдентификаторВладельца)
	
	Параметр = Новый Структура();
	Параметр.Вставить("СохраненнаяНастройка", СохранитьНастройки());
	Параметр.Вставить("Правила", ПолучитьТаблицуПравил());
	
	Возврат ПоместитьВоВременноеХранилище(Параметр, УникальныйИдентификаторВладельца);
	
Конецфункции

&НаСервере
Функция ПолучитьТаблицуПравил()
	
	// тип ЛюбаяСсылка, Строка
	Для Каждого Реквизит Из ЭтаФорма.ПолучитьРеквизиты("ПоляПриемника") Цикл
		Если Реквизит.Имя = "УточнениеВладельцаВладелец" Тогда
			ОписаниеТипаВладельца = Реквизит.ТипЗначения;
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	ОписаниеПеречисляемыхТипов = Новый ОписаниеТипов(Перечисления.ТипВсеСсылки(), "ВидСчета");
	
	Правила = Новый ТаблицаЗначений;
	Правила.Колонки.Добавить("ИсточникИмя",						Новый ОписаниеТипов("Строка"));
	Правила.Колонки.Добавить("ИсточникТип",						Новый ОписаниеТипов("ОписаниеТипов"));
	Правила.Колонки.Добавить("ИсточникДобавочноеПоле",			Новый ОписаниеТипов("Булево"));
	Правила.Колонки.Добавить("Поиск",							Новый ОписаниеТипов("Булево"));
	Правила.Колонки.Добавить("ПриемникИмя",						Новый ОписаниеТипов("Строка"));
	Правила.Колонки.Добавить("ПриемникПредставление",			Новый ОписаниеТипов("Строка"));
	Правила.Колонки.Добавить("ПриемникТип",						Новый ОписаниеТипов("ОписаниеТипов"));
	Правила.Колонки.Добавить("ПриемникИскатьПоИмя",				Новый ОписаниеТипов("Строка"));
	Правила.Колонки.Добавить("ПриемникИскатьПоТип",				Новый ОписаниеТипов("ОписаниеТипов"));
	Правила.Колонки.Добавить("ПриемникЕстьВладелец",			Новый ОписаниеТипов("Булево"));
	Правила.Колонки.Добавить("ПриемникВладелецСпособПоиска",	Новый ОписаниеТипов("Строка,ОписаниеТипов"));
	Правила.Колонки.Добавить("ПриемникВладелец",				ОписаниеТипаВладельца);
	Правила.Колонки.Добавить("СпособПоискаПеречисляемогоТипа",	Новый ОписаниеТипов("Строка"));
	Правила.Колонки.Добавить("Вложенность",						Новый ОписаниеТипов("Число"));
	
	ЗависимостиВладельцев = Новый Соответствие;
	
	Для Каждого СтрокаИсточник Из ПоляИсточника.ПолучитьЭлементы() Цикл
		
		Если СтрокаИсточник.Выбран = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Приемник Из СтрокаИсточник.ИдентификаторыПриемника Цикл
			
			Правило = Правила.Добавить();
			
			Правило.ИсточникИмя = СтрокаИсточник.Имя;
			Правило.ИсточникТип = СтрокаИсточник.Тип;
			Правило.ИсточникДобавочноеПоле = СтрокаИсточник.ДобавочноеПоле;
			
			СтрокаПриемник = ПоляПриемника.НайтиПоИдентификатору(Приемник.Значение);
			СтрокаПриемникРодитель = СтрокаПриемник.ПолучитьРодителя();
			
			Если НЕ СтрокаПриемникРодитель = Неопределено 
				И (СтрокаПриемникРодитель.Тип.Типы().Количество() = 1)
				И ОписаниеПеречисляемыхТипов.СодержитТип(СтрокаПриемникРодитель.Тип.Типы()[0]) Тогда
				
				СпособПоискаПеречисляемогоТипа = СтрокаПриемник.Имя;
				СтрокаПриемник = СтрокаПриемникРодитель;
				СтрокаПриемникРодитель = СтрокаПриемник.ПолучитьРодителя();
				
			Иначе
				СпособПоискаПеречисляемогоТипа = "";
			КонецЕсли;
			
			Если СтрокаПриемникРодитель = Неопределено Тогда
				
				Правило.ПриемникИмя = СтрокаПриемник.Имя;
				Правило.ПриемникПредставление = СтрокаПриемник.Представление;
				Правило.ПриемникТип = СтрокаПриемник.Тип;
				Правило.Поиск = СтрокаПриемник.Поиск;
				Правило.СпособПоискаПеречисляемогоТипа = СпособПоискаПеречисляемогоТипа;
				
			Иначе
				
				СтрокаСВладельцем = Неопределено;
				Если СтрокаПриемникРодитель.Тип.Типы().Количество() > 1 Тогда
					СтрокаПриемникРодительРодитель = СтрокаПриемникРодитель.ПолучитьРодителя();
					Если СтрокаПриемникРодительРодитель = Неопределено Тогда
						Правило.ПриемникИмя = СтрокаПриемник.Имя;
						Правило.ПриемникПредставление = СтрокаПриемник.Представление;
						Правило.ПриемникТип = СтрокаПриемник.Тип;
						Правило.Поиск = СтрокаПриемникРодитель.Поиск;
						Правило.СпособПоискаПеречисляемогоТипа = СпособПоискаПеречисляемогоТипа;
					Иначе
						Правило.ПриемникИмя = СтрокаПриемникРодительРодитель.Имя;
						Правило.ПриемникПредставление = СтрокаПриемникРодительРодитель.Представление;
						Правило.ПриемникТип = СтрокаПриемникРодительРодитель.Тип;
						Правило.ПриемникИскатьПоИмя = СтрокаПриемник.Имя;
						Правило.ПриемникИскатьПоТип = СтрокаПриемник.Тип;
						Правило.Поиск = СтрокаПриемникРодительРодитель.Поиск;
						Правило.СпособПоискаПеречисляемогоТипа = СпособПоискаПеречисляемогоТипа;
						СтрокаСВладельцем = СтрокаПриемникРодительРодитель;
						
						Если СтрокаПриемникРодительРодитель.ИерархияВладельцаТабличнойЧасти Тогда
							Правило.ПриемникИмя = "Ссылка." + Правило.ПриемникИмя;
						КонецЕсли;
						
					КонецЕсли; 
				Иначе
					Правило.ПриемникИмя = СтрокаПриемникРодитель.Имя;
					//======== динамическое подвязывание вложенности полей по иерархии (для последующего сравнения в запросе)
					РодительПриемника = СтрокаПриемникРодитель;
					Пока (РодительПриемника.ВерхнийУровень = Ложь) Цикл
						
						РодительПриемника = РодительПриемника.ПолучитьРодителя();
						
						Если РодительПриемника.Тип.Типы().Количество() > 1 Тогда 
							
							Если (РодительПриемника.Имя = Правило.ПриемникИмя)
								Или (РодительПриемника.Имя + "." = Лев(Правило.ПриемникИмя, СтрДлина(РодительПриемника.Имя)+1)) Тогда
								Продолжить;//Для составных типов(например субконто) дочерний элемент уточняет родительский элемент
							КонецЕсли;
							
						КонецЕсли;
							
						Правило.ПриемникИмя = РодительПриемника.Имя + "." + Правило.ПриемникИмя;							
						   
					КонецЦикла;
					//========
					Правило.ПриемникПредставление = СтрокаПриемникРодитель.Представление;
					Правило.ПриемникТип = СтрокаПриемникРодитель.Тип;
					Правило.ПриемникИскатьПоИмя = СтрокаПриемник.Имя;
					Правило.ПриемникИскатьПоТип = СтрокаПриемник.Тип;
					Правило.Поиск = СтрокаПриемникРодитель.Поиск;
					Правило.СпособПоискаПеречисляемогоТипа = СпособПоискаПеречисляемогоТипа;
					СтрокаСВладельцем = СтрокаПриемникРодитель;
					
					Если СтрокаПриемникРодитель.ИерархияВладельцаТабличнойЧасти Тогда
						Правило.ПриемникИмя = "Ссылка." + Правило.ПриемникИмя;
					КонецЕсли;
					
				КонецЕсли;
				
				Правило.Вложенность = СтрЧислоВхождений(Правило.ПриемникИмя,".");
				
				Если НЕ СтрокаСВладельцем = Неопределено Тогда
					Для Каждого Строка Из СтрокаСВладельцем.ПолучитьЭлементы() Цикл
						Если Строка.УточнениеВладельца Тогда
							Если Строка.Поиск Тогда
								Правило.ПриемникЕстьВладелец = Истина;
								Правило.ПриемникВладелецСпособПоиска = Строка.УточнениеВладельцаСпособПоиска;
								Правило.ПриемникВладелец = Строка.УточнениеВладельцаВладелец;
								Если ТипЗнч(Правило.ПриемникВладелецСпособПоиска) = Тип("Строка") И НЕ Правило.ПриемникВладелец = "Ссылка" Тогда
									ЗависимостиВладельцев.Вставить(Правило.ПриемникИмя, Правило.ПриемникВладелец);
								КонецЕсли;
							КонецЕсли;
							Прервать;
						КонецЕсли;
					КонецЦикла; 
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЦикла;
	
	Правила.Сортировать("Вложенность Убыв, ПриемникИскатьПоИмя");
	
	Если ЗависимостиВладельцев.Количество() Тогда
	
		Правила2 = Правила.СкопироватьКолонки();
		
		ЗависимыеПравила = Новый Соответствие;
		
		Для Каждого Правило Из Правила Цикл
			Если ЗависимостиВладельцев[Правило.ПриемникИмя] = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Правила2.Добавить(), Правило);
			Иначе
				ЗависимыеПравила.Вставить(Правило.ПриемникИмя, Правило);
			КонецЕсли;
		КонецЦикла; 
		
		ОбработанныеЗависимости = Новый Массив;
		
		Пока ЗависимостиВладельцев.Количество() Цикл
			
			Для Каждого Зависимость Из ЗависимостиВладельцев Цикл
				Если ЗависимостиВладельцев[Зависимость.Значение] = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(Правила2.Добавить(), ЗависимыеПравила[Зависимость.Ключ]);
					ОбработанныеЗависимости.Добавить(Зависимость.Ключ);
				КонецЕсли;
			КонецЦикла;
			
			Если ОбработанныеЗависимости.Количество() < ЗависимостиВладельцев.Количество() Тогда
				Для Каждого Зависимость Из ОбработанныеЗависимости Цикл
					ЗависимостиВладельцев.Удалить(Зависимость);
				КонецЦикла;
				ОбработанныеЗависимости.Очистить();
			Иначе
				ЗависимостиВладельцев.Очистить();
			КонецЕсли;
		
		КонецЦикла;
		
		Правила = Правила2;
		
	КонецЕсли;
	
	Возврат Правила;
	
Конецфункции

&НаСервере
Функция ЗагрузитьНаСервере(АдресФайла)
	
	Правила = ПолучитьТаблицуПравил();
	
	Соединения = Новый СписокЗначений;
	Для Каждого Соединение Из ИсточникСоединения Цикл
		Соединения.Добавить(Соединение.Таблица, Соединение.Условие);
	КонецЦикла;
	
	ДобавочныеПоля = Новый Соответствие;
	Для Каждого Элемент Из ИсточникДобавочныеПоля Цикл
		ДобавочныеПоля.Вставить(Элемент.Имя, Элемент.Значение);
	КонецЦикла; 
	
	Возврат РеквизитФормыВЗначение("Объект").Загрузить1(АдресФайла, ИсточникТаблицаФайла, Правила, Соединения, ИсточникУсловие, ИсточникПервые1, ДобавочныеПоля, ПриемникПолноеИмя, ?(ЗначениеЗаполнено(ПриемникОбъектТабличнойЧасти), ПриемникОбъектТабличнойЧасти, Неопределено), ?(ЗначениеЗаполнено(ПриемникОбъектРодитель), ПриемникОбъектРодитель, Неопределено), Новый Структура("ОстанавливатьсяПриОшибке,ПровестиДокументы", ПараметрЗагрузкиОстанавливатьсяПриОшибке, ПараметрЗагрузкиПроводитьДокументы));;
	
КонецФункции

// УПРАВЛЕНИЕ ЭЛЕМЕНТАМИ ФОРМЫ И МЕХАНИЗМЫ ОБРАБОТЧИКОВ

&НаСервереБезКонтекста
Функция ПолноеИмяМетаданных(Знач Тип)
	
	Возврат Метаданные.НайтиПоТипу(Тип).ПолноеИмя();
	
Конецфункции

// УПРАВЛЕНИЕ ДАННЫМИ ФОРМЫ

&НаКлиенте
Функция СоздатьСоединение()
	
	Попытка
		
		ADOX_Catalog = Новый COMОбъект("ADOX.Catalog");
		
		Возврат Истина;
		
	Исключение
		
		ПоказатьПредупреждение(, 
		НСтр("ru = 'На компьютере не поддерживается работа по технологии ADO.
		|После нажатия на кнопку ОК откроется страница для скачивания необходимых драйверов.
		|Пожалуйста, установите их, а потом попробуйте воспользоваться этой обработкой снова.'"));
		
		ФайловаяСистемаКлиент.ЗапуститьПрограмму(
			"http://www.microsoft.com/en-us/download/details.aspx?id=23734");
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСоединение()
	
	ИсточникТаблицы.Очистить();
		
	Если ПустаяСтрока(ИсточникИмяФайла) Тогда
		Возврат;
	КонецЕсли;
		
	Попытка
		
		ADOX_Catalog.ActiveConnection = "Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};DBQ=" + ИсточникИмяФайла;
		
		Представления = Новый Соответствие;
		Имена = Новый Соответствие;
		
		Для Каждого Table Из ADOX_Catalog.Tables Цикл
			
			Если НЕ (Найти(ВРЕГ(Table.Type), "TABLE") > 0 ИЛИ ВРЕГ(Table.Type) = "VIEW") Тогда
				Продолжить;
			КонецЕсли;
			
			Если Прав(Table.Name, 1) = "$" Тогда
				Представление = Сред(Table.Name, 1, СтрДлина(Table.Name) - 1);
			ИначеЕсли Прав(Table.Name, 2) = "$'" Тогда
				Представление = Сред(Table.Name, 2, СтрДлина(Table.Name) - 3);
			Иначе
				Представление = Table.Name;
			КонецЕсли;
			
			Значение = Представления[Представление];
			
			Если Значение = Неопределено Тогда
				Представления.Вставить(Представление, Table.Name);
			Иначе
				СтрокаТаблица = Имена[Значение];
				Если Прав(Значение, 1) = "$" ИЛИ Прав(Table.Name, 2) = "$'" Тогда
					СтрокаТаблица.Представление = СтрокаТаблица.Представление + " (лист)";
					Представление = Представление + " (диапазон)";
				Иначе
					СтрокаТаблица.Представление = СтрокаТаблица.Представление + " (диапазон)";
					Представление = Представление + " (лист)";
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТаблица = ИсточникТаблицы.Добавить();
			СтрокаТаблица.Имя = Table.Name;
			СтрокаТаблица.Представление = Представление;
			
			Имена.Вставить(СтрокаТаблица.Имя, СтрокаТаблица);
			
			Для Каждого Column Из Table.Columns Цикл
				
				ТипКолонки = УправлениеСоединениямиВИБУХ.ВернутьТипЗначенияВВидеСтроки(Column.Type);
				Если ТипКолонки = "НеПоддерживается" Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = СтрокаТаблица.Колонки.Добавить();
				НоваяСтрока.Имя = Column.Name;
				НоваяСтрока.Тип = Новый ОписаниеТипов(ТипКолонки);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ADOX_Catalog.ActiveConnection.Close();
		
	Исключение
		ПоказатьПредупреждение(, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииИмениФайла(ВыбратьТаблицуАвтоматически = Истина)
	
	УстановитьСоединение();
	
	ЗаполнитьСписокТаблицИсточника();
	
	Если ВыбратьТаблицуАвтоматически Тогда
		
		ИсточникСоединения.Очистить();
		ИсточникУсловие = "";
		ИсточникПервые1 = Ложь;
	
		Если Элементы.ИсточникТаблицаФайлаПредставление.СписокВыбора.Количество() Тогда
			ИмяТаблицы = Элементы.ИсточникТаблицаФайлаПредставление.СписокВыбора[0].Значение;
		Иначе
			ИмяТаблицы = "";
		КонецЕсли;
		
		ИсточникТаблицаФайла = ИмяТаблицы;
		ПриИзмененииТаблицыФайла();
		
	КонецЕсли;
	
	ВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТаблицыФайла()
	
	Если ПустаяСтрока(ИсточникТаблицаФайла) Тогда
		ИсточникТаблицаФайлаПредставление = "";
	Иначе
		ИсточникТаблицаФайлаПредставление = Элементы.ИсточникТаблицаФайлаПредставление.СписокВыбора.НайтиПоЗначению(ИсточникТаблицаФайла).Представление;
	КонецЕсли;
	
	СохранитьВсеПравила();
	
	УдалитьВсеПравила();
	
	ЗаполнитьСписокПолейИсточника();
	
	ВосстановитьВсеПравила();

	СопоставитьАвтоматически();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВсеПравила()
	
	ОбновлениеПравил.Очистить();
	
	СтрокиИсточника = ПоляИсточника.ПолучитьЭлементы();
	Индекс = -1;
	Для Каждого СтрокаИсточника Из СтрокиИсточника Цикл
		Индекс = Индекс + 1;
		Для Каждого ИдентификаторПриемника_ЭлементСпискаЗначений Из СтрокаИсточника.ИдентификаторыПриемника Цикл
			ЗапоминаемаяСтрока = ИнициализироватьСтруктураПравило();
			ЗапоминаемаяСтрока.ИсточникФайл 			= ИсточникИмяФайла;
			ЗапоминаемаяСтрока.ИсточникТаблица 			= ИсточникТаблицаФайлаПредставление;
			ЗапоминаемаяСтрока.ИсточникНомерСтроки 		= Индекс;
			//ЗапоминаемаяСтрока.ИсточникИдентификатор 	= СтрокаИсточника.Идентификатор;
			ЗапоминаемаяСтрока.ИсточникИмя 				= СтрокаИсточника.Имя;
			ЗапоминаемаяСтрока.ПолучательОбъект 		= ПриемникПолноеИмя;
			ЗапоминаемаяСтрока.ПолучательИдентификатор 	= ИдентификаторПриемника_ЭлементСпискаЗначений.Значение;
			ОбновлениеПравил.Добавить(ЗапоминаемаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьВсеПравила()

	Если ОбновлениеПравил.Количество()=0 
		ИЛИ ОбновлениеПравил[0].ИсточникФайл		<> ИсточникИмяФайла
		ИЛИ ОбновлениеПравил[0].ИсточникТаблица 	<> ИсточникТаблицаФайлаПредставление
		ИЛИ ОбновлениеПравил[0].ПолучательОбъект 	<> ПриемникПолноеИмя
	Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиИсточника = ПоляИсточника.ПолучитьЭлементы();
	Для каждого Правило Из ОбновлениеПравил Цикл
		Если Правило.ИсточникНомерСтроки<СтрокиИсточника.Количество() И СтрокиИсточника[Правило.ИсточникНомерСтроки].Имя=Правило.ИсточникИмя тогда
			ДобавитьПравило(СтрокиИсточника[Правило.ИсточникНомерСтроки].Идентификатор, Правило.ПолучательИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Функция ИнициализироватьСтруктураПравило()
	Резалт = Новый Структура;
	Резалт.Вставить("ИсточникФайл");
	Резалт.Вставить("ИсточникТаблица");
	Резалт.Вставить("ИсточникНомерСтроки");
	Резалт.Вставить("ИсточникИдентификатор");
	Резалт.Вставить("ИсточникИмя");
	Резалт.Вставить("ПолучательОбъект");
	Резалт.Вставить("ПолучательНомерСтроки");
	Резалт.Вставить("ПолучательИдентификатор");
	Резалт.Вставить("ПолучательИмя");
	Возврат Резалт;
КонецФункции

&НаКлиенте
Процедура ПриИзменениеПолногоИмениПриемника()
	
	УдалитьВсеПравила();
	
	ЗаполнитьПараметрыТаблицМетаданных();
	
	ПоляПриемника.ПолучитьЭлементы().Очистить();
	
	Если НЕ ПустаяСтрока(ПриемникПолноеИмя) Тогда
		ДобавитьРеквизитыОбъектаМетаданных(ПоляПриемника.ПолучитьЭлементы(), ПриемникТипТаблицыМетаданных, ПриемникТабличнаяЧасть, Истина);
		Если ПриемникТабличнаяЧасть Тогда
			Для Каждого СтрокаПриемника Из ПоляПриемника.ПолучитьЭлементы() Цикл
				Если СтрокаПриемника.Имя = "Ссылка" Тогда
					СтрокаПриемника.ПолучитьЭлементы().Очистить();
					ДобавитьРеквизитыОбъектаМетаданных(СтрокаПриемника.ПолучитьЭлементы(), СтрокаПриемника.Тип, Ложь, Истина);
					Прервать;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
	СопоставитьАвтоматически();
		
	ВидимостьДоступность();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КорректностьВыбораГруппыСправочника(Знач Группа)
	
	Если Группа.ЭтоГруппа Тогда
		Возврат Истина;
	КонецЕсли;
	
	М = Метаданные.НайтиПоТипу(ТипЗнч(Группа));
	Если Метаданные.Справочники.Содержит(М) И М.Иерархический И М.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияЭлементов Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// ФОРМИРОВАНИЕ СПИСКОВ ПОЛЕЙ ИСТОЧНИКА

&НаКлиенте
Процедура ЗаполнитьСписокТаблицИсточника()
	
	СписокТаблицИсточника = Элементы.ИсточникТаблицаФайлаПредставление.СписокВыбора;
	СписокТаблицИсточника.Очистить();
	
	Для Каждого Таблица Из ИсточникТаблицы Цикл
		СписокТаблицИсточника.Добавить(Таблица.Имя, Таблица.Представление);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокТаблицИсточникаНаСервере()
	
	СписокТаблицИсточника = Элементы.ИсточникТаблицаФайлаПредставление.СписокВыбора;
	СписокТаблицИсточника.Очистить();
	
	Для Каждого Таблица Из ИсточникТаблицы Цикл
		СписокТаблицИсточника.Добавить(Таблица.Имя, Таблица.Представление);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокПолейИсточника()
	
	ЭлементыКолонки = ПоляИсточника.ПолучитьЭлементы();
	ЭлементыКолонки.Очистить();
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить(ИсточникТаблицаФайла);
	
	Для Каждого Элемент Из ИсточникСоединения Цикл
		МассивТаблиц.Добавить(Элемент.Таблица);
	КонецЦикла; 
	
	Для Каждого Таблица Из МассивТаблиц Цикл
		
		СтрокаТаблица = ИсточникТаблицы.НайтиСтроки(Новый Структура("Имя", Таблица))[0];
			
		Для Каждого СтрокаКолонка Из СтрокаТаблица.Колонки Цикл
			
			ЭлементКолонка = ЭлементыКолонки.Добавить();
			ЭлементКолонка.Тип = СтрокаКолонка.Тип;
			ЭлементКолонка.Картинка = 1;
			
			Если МассивТаблиц.Количество() = 1 Тогда
				ЭлементКолонка.Имя = "[" + СтрокаКолонка.Имя + "]";
				ЭлементКолонка.Представление = СтрокаКолонка.Имя;
			Иначе
				ЭлементКолонка.Имя = "[" + СтрокаТаблица.Имя + "].[" + СтрокаКолонка.Имя + "]";
				ЭлементКолонка.Представление = "[" + СтрокаТаблица.Представление + "] " + СтрокаКолонка.Имя;
			КонецЕсли;
			
			ЭлементКолонка.Идентификатор = ЭлементКолонка.ПолучитьИдентификатор();
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ДобавочноеПоле Из ИсточникДобавочныеПоля Цикл
		
		ЭлементКолонка = ЭлементыКолонки.Добавить();
		ЭлементКолонка.Тип = ДобавочноеПоле.Тип;
		ЭлементКолонка.Картинка = 4;
		ЭлементКолонка.Имя = ДобавочноеПоле.Имя;
		ЭлементКолонка.Представление = ДобавочноеПоле.Имя;
		ЭлементКолонка.ДобавочноеПоле = Истина;
		
		ЭлементКолонка.Идентификатор = ЭлементКолонка.ПолучитьИдентификатор();
		
	КонецЦикла; 
	
КонецПроцедуры

// ФОРМИРОВАНИЕ СПИСКОВ ПОЛЕЙ ПРИЕМНИКА

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитТипТаблицыМетаданных(Знач ПолноеИмя)
	
	ПолноеИмя = СтрЗаменить(ПолноеИмя, ".", Символы.ПС);
	
	ПолноеИмя1 = СтрПолучитьСтроку(ПолноеИмя, 1);
	
	Если ПолноеИмя1 = "РегистрСведений" Тогда
		ИдентификаторТипа = ПолноеИмя1 + "КлючЗаписи." + СтрПолучитьСтроку(ПолноеИмя, 2);
	Иначе
		ИдентификаторТипа = ПолноеИмя1 + "Ссылка." + СтрПолучитьСтроку(ПолноеИмя, 2);
	КонецЕсли;
	
	Возврат Новый ОписаниеТипов(ИдентификаторТипа);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПараметрыТаблицМетаданных()
	
	ПриемникОбъектТабличнойЧасти = Неопределено;
	ПриемникОбъектРодитель = Неопределено;
	
	Если ПустаяСтрока(ПриемникПолноеИмя) Тогда
		ПриемникТипТаблицыМетаданных = Неопределено;
		ПриемникИмяТабличнойЧасти = "";
		ПриемникТабличнаяЧасть = Ложь;
		ПриемникИерархическийСправочник = Ложь;
		ПриемникПланСчетов = Ложь;
		ПриемникРегистрСведений = Ложь;
	Иначе
		
		ПриемникТипТаблицыМетаданных = ПолучитТипТаблицыМетаданных(ПриемникПолноеИмя);
		
		ПриемникПолноеИмя_ = СтрЗаменить(ПриемникПолноеИмя, ".", Символы.ПС);
		ПриемникИмяТабличнойЧасти = СтрПолучитьСтроку(ПриемникПолноеИмя_, 4);
		ПриемникТабличнаяЧасть = НЕ ПустаяСтрока(ПриемникИмяТабличнойЧасти);
		
		ПриемникПолноеИмя_1 = СтрПолучитьСтроку(ПриемникПолноеИмя_, 1);
		
		ПриемникИерархическийСправочник = ПриемникПолноеИмя_1 = "Справочник";
		ПриемникПланСчетов = НЕ ПриемникТабличнаяЧасть И ПриемникПолноеИмя_1 = "ПланСчетов";
		
		ПриемникРегистрСведений = ПриемникПолноеИмя_1 = "РегистрСведений";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРеквизитыОбъектаМетаданных(Коллекция, Тип, РеквизитыТабличнойЧасти, РазворачиватьСсылки)
	
	Реквизиты = ПолучитьДеревоДобавляемыхРеквизитов(Тип, ?(РеквизитыТабличнойЧасти, ПриемникИмяТабличнойЧасти, ""), Истина);
	
	СкопироватьСтруктуруМассивовВДеревоФормы(Реквизиты, Коллекция);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтруктуруМассивовВДеревоФормы(КоллекцияИсточник, КоллекцияПриемник)
	
	ПолноеИмяРодителя = Неопределено;
	
	Для Каждого Источник Из КоллекцияИсточник Цикл
		
		ЭлементКоллекции = КоллекцияПриемник.Добавить();
		ЭлементКоллекции.Идентификатор = ЭлементКоллекции.ПолучитьИдентификатор();
		ЭлементКоллекции.ВерхнийУровень = ЭлементКоллекции.ПолучитьРодителя() = Неопределено;
		ЭлементКоллекции.ВыбранСвязанный = ?(НЕ ЭлементКоллекции.ПолучитьРодителя() = Неопределено, ЭлементКоллекции.ПолучитьРодителя().Выбран ИЛИ ЭлементКоллекции.ПолучитьРодителя().ВыбранСвязанный, Ложь);
		
		ЭлементКоллекции.ИерархияВладельцаТабличнойЧасти = ?(НЕ ЭлементКоллекции.ПолучитьРодителя() = Неопределено, ЭлементКоллекции.ПолучитьРодителя().ВыбиратьНепосредственно ИЛИ ЭлементКоллекции.ПолучитьРодителя().ИерархияВладельцаТабличнойЧасти, Ложь);
		
		Если Источник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьСтроки = Ложь;
		Для Каждого КЗ Из Источник Цикл
			Если КЗ.Ключ = "Строки" Тогда
				ЕстьСтроки = Истина;
			Иначе
				ЭлементКоллекции[КЗ.Ключ] = КЗ.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Если ПриемникТабличнаяЧасть И ЭлементКоллекции.ВерхнийУровень Тогда
			Если ЭлементКоллекции.Имя = "Ссылка" Тогда
				ЭлементКоллекции.ВыбиратьНепосредственно = Истина;
				ЭлементКоллекции.Картинка = 2;
			ИначеЕсли ЭлементКоллекции.Имя = "НомерСтроки" Тогда
				ЭлементКоллекции.Картинка = 3;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭлементКоллекции.УточнениеВладельца Тогда
			
			СписокПоискаВладельца = СтрокаПриемникаУточнениеВладельцаСписокПоиска(ЭлементКоллекции);
			СтрокаПриемникаУстановитьВладельца(ЭлементКоллекции, СписокПоискаВладельца[0].Значение);

		КонецЕсли;
		
		Если ЕстьСтроки Тогда
			СкопироватьСтруктуруМассивовВДеревоФормы(Источник.Строки, ЭлементКоллекции.ПолучитьЭлементы());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДеревоДобавляемыхРеквизитов(Знач Тип, Знач ПриемникИмяТабличнойЧасти, Знач РазворачиватьСсылки)
	
	Реквизиты = Новый Массив;
	
	ЭтоТабличнаяЧасть = НЕ ПустаяСтрока(ПриемникИмяТабличнойЧасти);
	
	Тип0 = Тип.Типы()[0];
	
	ЭтоПеречисление = Перечисления.ТипВсеСсылки().СодержитТип(Тип0);
	ЭтоПланСчетов = ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип0);
	
	ЭтоСистемноеПеречислениеВидСчета = Тип0 = Тип("ВидСчета");
	ЭтоСистемноПеречисление = ЭтоСистемноеПеречислениеВидСчета;
	
	ОсновнаяТаблицаМетаданных = Метаданные.НайтиПоТипу(Тип0);             
	
	ЭтоСтандартнаяТабличнаяЧасть = Ложь;
	Если ЭтоТабличнаяЧасть Тогда
		Попытка
			ТаблицаМетаданных = ОсновнаяТаблицаМетаданных.СтандартныеТабличныеЧасти[ПриемникИмяТабличнойЧасти];
			ЭтоСтандартнаяТабличнаяЧасть = Истина;
		Исключение
			ТаблицаМетаданных = ОсновнаяТаблицаМетаданных.ТабличныеЧасти[ПриемникИмяТабличнойЧасти];
		КонецПопытки;
	Иначе
		ТаблицаМетаданных = ОсновнаяТаблицаМетаданных;              
	КонецЕсли;
	
	ЭтоРегистрСведений = ?(ТаблицаМетаданных=Неопределено ИЛИ ЭтоСтандартнаяТабличнаяЧасть, Ложь, Метаданные.РегистрыСведений.Содержит(ТаблицаМетаданных));
	
	Если ЭтоТабличнаяЧасть Тогда
		Представление = ОсновнаяТаблицаМетаданных.ПредставлениеОбъекта;
		Если ПустаяСтрока(Представление) Тогда
			Представление = ОсновнаяТаблицаМетаданных.РасширенноеПредставлениеОбъекта;
		КонецЕсли;
		Если ПустаяСтрока(Представление) Тогда
			Представление = ОсновнаяТаблицаМетаданных.Представление();
		КонецЕсли;
		ДобавитьРеквизит(Реквизиты, "Ссылка", Представление, Новый ОписаниеТипов(СтрЗаменить(ОсновнаяТаблицаМетаданных.ПолноеИмя(), ".", "Ссылка.")), РазворачиватьСсылки);
	КонецЕсли;
	
	Если ЭтоПеречисление ИЛИ ЭтоСистемноеПеречислениеВидСчета Тогда
		ДобавитьРеквизит(Реквизиты, "Идентификатор", "Идентификатор", Новый ОписаниеТипов("Строка"), РазворачиватьСсылки);
		ДобавитьРеквизит(Реквизиты, "Представление", "Представление", Новый ОписаниеТипов("Строка"), РазворачиватьСсылки);
	КонецЕсли;
	
	Попытка
		Для Каждого Реквизит Из ТаблицаМетаданных.СтандартныеРеквизиты Цикл
			Если ЭтоТабличнаяЧасть И Реквизит.Имя = "НомерСтроки" И Реквизит.Представление() = "" Тогда
				ДобавитьРеквизит(Реквизиты, Реквизит.Имя, "Номер строки", Реквизит.Тип, РазворачиватьСсылки);
			ИначеЕсли ЭтоРегистрСведений И Реквизит.Имя = "НомерСтроки" И Реквизит.Представление() = "N" Тогда
				ДобавитьРеквизит(Реквизиты, Реквизит.Имя, "Номер строки", Реквизит.Тип, РазворачиватьСсылки);
			ИначеЕсли ЭтоПеречисление И Реквизит.Имя = "Порядок" Тогда
				Продолжить;
			ИначеЕсли Реквизит.Имя = "Ссылка" Тогда
				Продолжить;
			ИначеЕсли Реквизит.Имя = "Предопределенный" Тогда
				Продолжить;
			ИначеЕсли ЭтоПланСчетов И Реквизит.Имя = "Вид" И Реквизит.Представление() = "Вид" Тогда
				ДобавитьРеквизит(Реквизиты, Реквизит.Имя, "Вид счета", Реквизит.Тип, РазворачиватьСсылки);
			Иначе
				ДобавитьРеквизит(Реквизиты, Реквизит.Имя, Реквизит.Представление(), Реквизит.Тип, РазворачиватьСсылки, Реквизит.Имя = "Владелец");
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	// добавление признаков учета для планов счетов (Валютный, Количественный...)
	Если ЭтоПланСчетов И НЕ ЭтоСтандартнаяТабличнаяЧасть Тогда   // по ТЧ плана счетов этих реквизитов не должно быть
		Для Каждого Реквизит Из ТаблицаМетаданных.ПризнакиУчета Цикл
			ДобавитьРеквизит(Реквизиты, Реквизит.Имя, Реквизит.Представление(), Реквизит.Тип, РазворачиватьСсылки);
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтоРегистрСведений Тогда
		Для Каждого Реквизит Из ТаблицаМетаданных.Измерения Цикл
			ДобавитьРеквизит(Реквизиты, Реквизит.Имя, Реквизит.Представление(), Реквизит.Тип, РазворачиватьСсылки);
		КонецЦикла;
		Для Каждого Реквизит Из ТаблицаМетаданных.Ресурсы Цикл
			ДобавитьРеквизит(Реквизиты, Реквизит.Имя, Реквизит.Представление(), Реквизит.Тип, РазворачиватьСсылки);
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		Для Каждого Реквизит Из ТаблицаМетаданных.Реквизиты Цикл
			ДобавитьРеквизит(Реквизиты, Реквизит.Имя, Реквизит.Представление(), Реквизит.Тип, РазворачиватьСсылки);
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Если НЕ ЭтоСистемноПеречисление И НЕ ЭтоТабличнаяЧасть И Метаданные.ПланыСчетов.Содержит(ОсновнаяТаблицаМетаданных) Тогда
		
		Если НЕ ОсновнаяТаблицаМетаданных.ВидыСубконто = Неопределено Тогда
			
			ОписаниеТиповСубконто = Новый ОписаниеТипов(СтрЗаменить(ОсновнаяТаблицаМетаданных.ВидыСубконто.ПолноеИмя(), ".", "Ссылка."));
			
			Для НомерСубконто = 1 По ОсновнаяТаблицаМетаданных.МаксКоличествоСубконто Цикл
				ДобавитьРеквизит(Реквизиты, "ВидыСубконто[" + (НомерСубконто - 1) + "]", "Вид субконто " + НомерСубконто, ОписаниеТиповСубконто, РазворачиватьСсылки);
			КонецЦикла; 
			                                                                     
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьРеквизит(Коллекция, Имя, Представление, ОписаниеТипа, РазворачиватьСсылки, ЭтоВладелец = Ложь)
	
	ОписаниеПростыхТипов = Новый ОписаниеТипов("Строка,Число,Булево,Дата");
	
	ОписаниеКомплексныхТипов = Новый ОписаниеТипов(Справочники.ТипВсеСсылки());
	ОписаниеКомплексныхТипов = Новый ОписаниеТипов(ОписаниеКомплексныхТипов, ПланыСчетов.ТипВсеСсылки().Типы());
	ОписаниеКомплексныхТипов = Новый ОписаниеТипов(ОписаниеКомплексныхТипов, Документы.ТипВсеСсылки().Типы()); 
	ОписаниеКомплексныхТипов = Новый ОписаниеТипов(ОписаниеКомплексныхТипов, ПланыВидовХарактеристик.ТипВсеСсылки().Типы());
	
	ОписаниеПеречисляемыхТипов = Новый ОписаниеТипов(Перечисления.ТипВсеСсылки(), "ВидСчета");
	
	ВсеТипы = Новый Массив;
	ПростыеТипы = Новый Массив;
	КомплексныеТипы = Новый Массив;
	ПеречисляемыеТипы = Новый Массив;
	
	Для Каждого Тип Из ОписаниеТипа.Типы() Цикл
		                                                   
		Если ОписаниеПростыхТипов.СодержитТип(Тип) Тогда
			ПростыеТипы.Добавить(Тип);
			ВсеТипы.Добавить(Тип);
		ИначеЕсли ОписаниеКомплексныхТипов.СодержитТип(Тип) Тогда
			КомплексныеТипы.Добавить(Тип);
			ВсеТипы.Добавить(Тип);
		ИначеЕсли ОписаниеПеречисляемыхТипов.СодержитТип(Тип) Тогда
			ПеречисляемыеТипы.Добавить(Тип);
			ВсеТипы.Добавить(Тип);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПростыеТипы.Количество() = 0 И ПеречисляемыеТипы.Количество() = 0 И (КомплексныеТипы.Количество() = 0 ИЛИ НЕ РазворачиватьСсылки) Тогда
		Если ЭтоВладелец Тогда
			УточнениеВладельца = Истина;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		УточнениеВладельца = Ложь;
	КонецЕсли;
	
	СтрокаРеквизита = Новый Структура;
	Если УточнениеВладельца Тогда
		Коллекция.Вставить(0, СтрокаРеквизита);
	Иначе
		Коллекция.Добавить(СтрокаРеквизита);
	КонецЕсли;
	
	СтрокаРеквизита.Вставить("Имя", Имя);
	СтрокаРеквизита.Вставить("Представление", Представление);
	СтрокаРеквизита.Вставить("Тип", Новый ОписаниеТипов(ВсеТипы, ОписаниеТипа.КвалификаторыЧисла, ОписаниеТипа.КвалификаторыСтроки, ОписаниеТипа.КвалификаторыДаты, ОписаниеТипа.КвалификаторыДвоичныхДанных));
	
	Если УточнениеВладельца Тогда
		СтрокаРеквизита.Вставить("Картинка", 3);
		СтрокаРеквизита.Вставить("УточнениеВладельца", Истина);
		Возврат;
	КонецЕсли;
	
	Если ВсеТипы.Количество() = 1 Тогда
		
		Если ПростыеТипы.Количество() = 1 Тогда
			СтрокаРеквизита.Вставить("Выбор", Истина);
			СтрокаРеквизита.Вставить("Картинка",  1);
		Иначе
			СтрокаРеквизита.Вставить("Строки", Новый Массив(1));
		КонецЕсли;
		
	Иначе
		
		Строки = Новый Массив;
		СтрокаРеквизита.Вставить("Строки", Строки);
		
		Для Каждого Тип Из ПростыеТипы Цикл
			
			СтрокаТипа = Новый Структура();
			Строки.Добавить(СтрокаТипа);
			
			СтрокаТипа.Вставить("Выбор", Истина);
			СтрокаТипа.Вставить("Имя", Имя);
			СтрокаТипа.Вставить("Представление", Тип);
			Т = Новый Массив;
			Т.Добавить(Тип);
			СтрокаТипа.Вставить("Тип", Новый ОписаниеТипов(Т, ОписаниеТипа.КвалификаторыЧисла, ОписаниеТипа.КвалификаторыСтроки, ОписаниеТипа.КвалификаторыДаты, ОписаниеТипа.КвалификаторыДвоичныхДанных));
			СтрокаТипа.Вставить("Картинка", 1);
			
		КонецЦикла; 
		
		Для Каждого Тип Из КомплексныеТипы Цикл
			
			СтрокаТипа = Новый Структура();
			Строки.Добавить(СтрокаТипа);
			
			СтрокаТипа.Вставить("Имя", Имя);
			СтрокаТипа.Вставить("Представление", Тип);
			Т = Новый Массив;
			Т.Добавить(Тип);
			СтрокаТипа.Вставить("Тип", Новый ОписаниеТипов(Т));
			СтрокаТипа.Вставить("Строки", Новый Массив(1));
			
		КонецЦикла; 
		
		Для Каждого Тип Из ПеречисляемыеТипы Цикл
			
			СтрокаТипа = Новый Структура();
			Строки.Добавить(СтрокаТипа);
			
			СтрокаТипа.Вставить("Имя", Имя);
			СтрокаТипа.Вставить("Представление", Тип);
			Т = Новый Массив;
			Т.Добавить(Тип);
			СтрокаТипа.Вставить("Тип", Новый ОписаниеТипов(Т));
			СтрокаТипа.Вставить("Строки", Новый Массив(1));
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

// УПРАВЛЕНИЕ ПРАВИЛАМИ

&НаКлиенте
Процедура СопоставитьАвтоматически()
	
	Для НомерПрохода = 1 По 2 Цикл  
		
		Для Каждого КолонкаИсточника Из ПоляИсточника.ПолучитьЭлементы() Цикл
			
			Для Каждого КолонкаПриемника Из ПоляПриемника.ПолучитьЭлементы() Цикл
				
				Если КолонкаПриемника.ПолучитьЭлементы().Количество() Тогда
					Продолжить;
				КонецЕсли;
				
				Если НомерПрохода = 1 Тогда
				
					Если КолонкаИсточника.Имя = КолонкаПриемника.Имя Тогда
						ДобавитьПравило(КолонкаИсточника.ПолучитьИдентификатор(), КолонкаПриемника.ПолучитьИдентификатор());
					КонецЕсли;
					
				Иначе
					
					Если КолонкаПриемника.Выбран Тогда
						Продолжить;
					КонецЕсли;
					
					Если КолонкаИсточника.Имя = КолонкаПриемника.Представление Тогда
						ДобавитьПравило(КолонкаИсточника.ПолучитьИдентификатор(), КолонкаПриемника.ПолучитьИдентификатор());
					ИначеЕсли ПриемникПланСчетов И КолонкаИсточника.Имя = "Код" И КолонкаПриемника.Имя = "Порядок" Тогда
						ДобавитьПравило(КолонкаИсточника.ПолучитьИдентификатор(), КолонкаПриемника.ПолучитьИдентификатор());
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьНажатием()
	
	СтрокаИсточника = Элементы.ПоляИсточника.ТекущиеДанные;
	СтрокаПриемника = Элементы.ПоляПриемника.ТекущиеДанные;
	
	Если СтрокаИсточника = Неопределено ИЛИ СтрокаПриемника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтрокаПриемника.Выбор ИЛИ СтрокаПриемника.Выбран ИЛИ СтрокаПриемника.ВыбранСвязанный Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПравило(СтрокаИсточника.ПолучитьИдентификатор(), СтрокаПриемника.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеПравила()
	
	Для Каждого СтрокаИсточника Из ПоляИсточника.ПолучитьЭлементы() Цикл
		СтрокаИсточникаУдалитьСопоставление(СтрокаИсточника);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПравило(Источник, Приемник)
	
	СтрокаИсточника = ПоляИсточника.НайтиПоИдентификатору(Источник);
	СтрокаИсточника.ИдентификаторыПриемника.Добавить(Приемник);
	СтрокаИсточника.Выбран = СтрокаИсточника.Выбран + 1;
	
	СтрокаИсточникаОбновитьПредставлениеСопоставления(СтрокаИсточника);
	
	СтрокаПриемника = ПоляПриемника.НайтиПоИдентификатору(Приемник);
	СтрокаПриемника.ИдентификаторИсточника = Источник;
	СтрокаПриемника.Выбран = Истина;
	Если НЕ СтрокаПриемника.ВерхнийУровень Тогда
		РодительПриемника = СтрокаПриемника.ПолучитьРодителя();
		Если НЕ РодительПриемника = Неопределено Тогда
			Если РодительПриемника.Тип.Типы().Количество() > 1 Тогда
				РодительРодительПриемника = РодительПриемника.ПолучитьРодителя();
				Если НЕ РодительРодительПриемника = Неопределено Тогда
					РодительПриемника.Поиск = Истина;
				КонецЕсли;
			Иначе
				СтрокаПриемника.Поиск = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПриемникТабличнаяЧасть И СтрокаПриемника.ВерхнийУровень И СтрокаПриемника.Имя = "НомерСтроки" Тогда
		СтрокаПриемника.Поиск = Истина;
		СтрокаПриемника.ПоискПринудительно = Истина;
	КонецЕсли;
	
	СтрокаПриемникаОбновитьПоиск(СтрокаПриемника);
	СтрокаПриемникаОбновитьСвязанные(СтрокаПриемникаКорневойРодитель(СтрокаПриемника), Истина);
	СтрокаПриемникаОбновитьВыбранПодчиненный(СтрокаПриемника);
	СтрокаПриемникаОбновитьПредставлениеСопоставления(СтрокаПриемника);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПравило(Источник, Приемник)
	
	СтрокаИсточника = ПоляИсточника.НайтиПоИдентификатору(Источник);
	СтрокаИсточника.ИдентификаторыПриемника.Удалить(СтрокаИсточника.ИдентификаторыПриемника.НайтиПоЗначению(Приемник));
	СтрокаИсточника.Выбран = СтрокаИсточника.Выбран - 1;
	
	СтрокаИсточникаОбновитьПредставлениеСопоставления(СтрокаИсточника);
	
	СтрокаПриемника = ПоляПриемника.НайтиПоИдентификатору(Приемник);
	СтрокаПриемника.ИдентификаторИсточника = -1;
	СтрокаПриемника.Выбран = Ложь;
	
	СтрокаПриемникаУдалитьПоиск(СтрокаПриемника);
	СтрокаПриемникаОбновитьВыбранПодчиненный(СтрокаПриемника);
	
	КорневойРодитель = СтрокаПриемникаКорневойРодитель(СтрокаПриемника);
	СтрокаПриемникаОбновитьСвязанные(КорневойРодитель, КорневойРодитель.ВыбранПодчиненный);
	
	СтрокаПриемникаОбновитьПредставлениеСопоставления(СтрокаПриемника);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПодчиненные(СтрокаПриемника)
	
	Если СтрокаПриемника.ВыбранПодчиненный Тогда
		Для Каждого Элемент Из СтрокаПриемника.ПолучитьЭлементы() Цикл
			Если Элемент.Выбран Тогда
				УдалитьПравило(Элемент.ИдентификаторИсточника, Элемент.ПолучитьИдентификатор());
				Прервать;
			ИначеЕсли Элемент.ВыбранПодчиненный Тогда
				ОчиститьПодчиненные(Элемент);
				Прервать;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНепосредственныйВыбор(Приемник)
	
	СтрокаПриемника = ПоляПриемника.НайтиПоИдентификатору(Приемник);
	
	СтрокаПриемника.Выбран = ЗначениеЗаполнено(ПриемникОбъектТабличнойЧасти);
	
	ОчиститьПодчиненные(СтрокаПриемника);
	
	СтрокаПриемника.Поиск = СтрокаПриемника.Выбран;
	
	Если СтрокаПриемника.Выбран Тогда
		СтрокаПриемника.ВыбранСвязанный = Ложь;
	КонецЕсли;
	
	Если СтрокаПриемника.Поиск Тогда
		Элементы.ПоляПриемника.Свернуть(Приемник);
		СтрокаПриемника.ПолучитьЭлементы().Очистить();
	Иначе
		СкопироватьСтруктуруМассивовВДеревоФормы(Новый Массив(1), СтрокаПриемника.ПолучитьЭлементы());
	КонецЕсли;
	
	СтрокаПриемникаОбновитьСвязанные(СтрокаПриемника, СтрокаПриемника.Выбран);
	СтрокаПриемникаОбновитьПредставлениеСопоставления(СтрокаПриемника);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаИсточникаОбновитьПредставлениеСопоставления(СтрокаИсточника)
	
	Если СтрокаИсточника.Выбран = 0 Тогда
		СтрокаИсточника.ПредставлениеСопоставления = "";
	Иначе
		ПредставлениеСопоставления = "";
		Для Каждого Приемник Из СтрокаИсточника.ИдентификаторыПриемника Цикл
			ПредставлениеСопоставления = ПредставлениеСопоставления + ", " + СтрокаПриемникаПолноеПредставление(ПоляПриемника.НайтиПоИдентификатору(Приемник.Значение));
		КонецЦикла;
		СтрокаИсточника.ПредставлениеСопоставления = "=> " + Сред(ПредставлениеСопоставления, 3);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПриемникаОбновитьПредставлениеСопоставления(СтрокаПриемника)
	
	Если СтрокаПриемника.УточнениеВладельца Тогда
		
		Если ТипЗнч(СтрокаПриемника.УточнениеВладельцаСпособПоиска) = Тип("Строка") Тогда
			СтрокаПриемника.ПредставлениеСопоставления = СтрокаПриемника.УточнениеВладельцаСпособПоиска;
		Иначе
			Если СтрокаПриемника.УточнениеВладельцаВладелец.Пустая() Тогда
				СтрокаПриемника.ПредставлениеСопоставления = Строка(СтрокаПриемника.УточнениеВладельцаСпособПоиска) + " <Пустая ссылка>";
			Иначе
				СтрокаПриемника.ПредставлениеСопоставления = Строка(СтрокаПриемника.УточнениеВладельцаВладелец);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтрокаПриемника.ВыбиратьНепосредственно И ЗначениеЗаполнено(ПриемникОбъектТабличнойЧасти) Тогда
		
		СтрокаПриемника.ПредставлениеСопоставления = ПриемникОбъектТабличнойЧасти;
		
	ИначеЕсли СтрокаПриемника.Выбран Тогда
		
		СтрокаПриемника.ПредставлениеСопоставления = "<= " + ПоляИсточника.НайтиПоИдентификатору(СтрокаПриемника.ИдентификаторИсточника).Представление;
		
	ИначеЕсли СтрокаПриемника.ВыбранПодчиненный Тогда
		
		ПредставлениеСопоставления = "";
		ПредставлениеПодчиненного = Новый Массив;
		ПредставлениеСопоставленияВладельца = "";
		ПредставлениеСопоставленияПодчиненного = Новый Массив;
		
		Для Каждого Строка Из СтрокаПриемника.ПолучитьЭлементы() Цикл
			
			Если Строка.УточнениеВладельца Тогда
				ПредставлениеСопоставленияВладельца = Строка.ПредставлениеСопоставления;
			ИначеЕсли Строка.ВыбранПодчиненный ИЛИ Строка.Выбран Тогда
				ПредставлениеПодчиненного.Добавить(Строка.Представление);
				ПредставлениеСопоставленияПодчиненного.Добавить(Строка.ПредставлениеСопоставления);
			КонецЕсли;
			
			Если НЕ СтрокаПриемника.ВыбиратьНепосредственно И ПредставлениеСопоставленияПодчиненного.Количество() > 0 И НЕ ПустаяСтрока(ПредставлениеСопоставленияВладельца) Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПредставлениеПодчиненного.Количество() = 0 Тогда
			СтрокаПриемника.ПредставлениеСопоставления = "";
		Иначе
			Для Индекс = 0 По ПредставлениеПодчиненного.ВГраница() Цикл
				ПредставлениеСопоставления = ПредставлениеСопоставления + ", " + ПредставлениеПодчиненного[Индекс] + ": " + ПредставлениеСопоставленияПодчиненного[Индекс];
			КонецЦикла; 
			ПредставлениеСопоставления = Сред(ПредставлениеСопоставления, 3);
			Если НЕ ПустаяСтрока(ПредставлениеСопоставленияВладельца) Тогда
				ПредставлениеСопоставления = ПредставлениеСопоставления + " (Владелец: " + ПредставлениеСопоставленияВладельца + ")";
			КонецЕсли;
			СтрокаПриемника.ПредставлениеСопоставления = ПредставлениеСопоставления;
		КонецЕсли;
		
	Иначе
		СтрокаПриемника.ПредставлениеСопоставления = "";
	КонецЕсли;
	
	Родитель = СтрокаПриемника.ПолучитьРодителя();
	Если НЕ Родитель = Неопределено Тогда
		СтрокаПриемникаОбновитьПредставлениеСопоставления(Родитель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаИсточникаУдалитьСопоставление(СтрокаИсточника)
	
	Если СтрокаИсточника.Выбран = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Источник = СтрокаИсточника.ПолучитьИдентификатор();
	ИдентификаторыПриемника = СтрокаИсточника.ИдентификаторыПриемника;
	Пока ИдентификаторыПриемника.Количество() Цикл
		УдалитьПравило(Источник, ИдентификаторыПриемника[0].Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПриемникаУдалитьСопоставление(СтрокаПриемника)
	
	Если СтрокаПриемника.Выбран Тогда
		УдалитьПравило(СтрокаПриемника.ИдентификаторИсточника, СтрокаПриемника.ПолучитьИдентификатор());
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПриемникаОбновитьПоиск(СтрокаПриемника)
	
	Родитель = СтрокаПриемника.ПолучитьРодителя();
	Пока НЕ Родитель = Неопределено И (Родитель.ВыбиратьНепосредственно ИЛИ НЕ Родитель.ВерхнийУровень) Цикл
		Родитель.Поиск = СтрокаПриемника.Поиск;
		Родитель = Родитель.ПолучитьРодителя();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПриемникаУдалитьПоиск(СтрокаПриемника)
	
	СтрокаПриемника.Поиск = Ложь;
	СтрокаПриемника.ПоискПринудительно = Ложь;
	
	Родитель = СтрокаПриемника.ПолучитьРодителя();
	Пока НЕ Родитель = Неопределено Цикл
		Если Родитель.ИерархияВладельцаТабличнойЧасти ИЛИ Родитель.ВыбиратьНепосредственно Тогда
			ЕстьПоиск = Ложь;
			Для Каждого СтрокаРодителя Из Родитель.ПолучитьЭлементы() Цикл
				Если СтрокаРодителя.УточнениеВладельца Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокаРодителя.Поиск Тогда
					ЕстьПоиск = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			Если НЕ ЕстьПоиск Тогда
				Родитель.Поиск = Ложь;
				Родитель.ПоискПринудительно = Ложь;
			КонецЕсли;
		Иначе
			Родитель.Поиск = Ложь;
			Родитель.ПоискПринудительно = Ложь;
		КонецЕсли;
		Родитель = Родитель.ПолучитьРодителя();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПриемникаОбновитьВыбранПодчиненный(СтрокаПриемника)
	
	Родитель = СтрокаПриемника.ПолучитьРодителя();
	Пока НЕ Родитель = Неопределено Цикл
		Если Родитель.ИерархияВладельцаТабличнойЧасти ИЛИ Родитель.ВыбиратьНепосредственно Тогда
			ЕстьВыбор = Ложь;
			Для Каждого СтрокаРодителя Из Родитель.ПолучитьЭлементы() Цикл
				Если СтрокаРодителя.Выбран ИЛИ СтрокаРодителя.ВыбранПодчиненный Тогда
					ЕстьВыбор = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			Родитель.ВыбранПодчиненный = ЕстьВыбор;
		Иначе
			Родитель.ВыбранПодчиненный = СтрокаПриемника.Выбран ИЛИ СтрокаПриемника.ВыбранПодчиненный;
		КонецЕсли;
		Родитель = Родитель.ПолучитьРодителя();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПриемникаОбновитьСвязанные(СтрокаПриемника, ВыбранСвязанный)
	
	Если СтрокаПриемника.ВыбиратьНепосредственно Тогда
	ИначеЕсли СтрокаПриемника.ИерархияВладельцаТабличнойЧасти Тогда
		
		ЕстьВыбор = Ложь;
		Для Каждого Строка Из СтрокаПриемника.ПолучитьЭлементы() Цикл
			Если Строка.Выбран Тогда
				ЕстьВыбор = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Строка Из СтрокаПриемника.ПолучитьЭлементы() Цикл
			
			Если Строка.Представление="Контрагент" тогда
			Если НЕ Строка.Выбран Тогда
				Если СтрокаПриемника.ВыбиратьНепосредственно Тогда
					Если Строка.Выбор Тогда
						Строка.ВыбранСвязанный = ЕстьВыбор;
					КонецЕсли;
				Иначе
					Строка.ВыбранСвязанный = ЕстьВыбор;
				КонецЕсли;
			КонецЕсли;
			КонецЕсли;
			
		КонецЦикла; 
		
	ИначеЕсли НЕ СтрокаПриемника.Выбран Тогда
		
		Если СтрокаПриемника.Представление="Контрагент" И НЕ СтрокаПриемника.ВерхнийУровень Тогда
			ВыбраноСвязанныхВПодгруппе = 0;
			Для Каждого Строка из СтрокаПриемникаКорневойРодитель(СтрокаПриемника).ПолучитьЭлементы() Цикл
				ВыбраноСвязанныхВПодгруппе = ВыбраноСвязанныхВПодгруппе + ?(Строка.Выбран, 1, 0);
			КонецЦикла;
			СтрокаПриемника.ВыбранСвязанный = ВыбранСвязанный ИЛИ (ВыбраноСвязанныхВПодгруппе>0); 
		КонецЕсли;
			
	КонецЕсли;
	
	Для Каждого Строка Из СтрокаПриемника.ПолучитьЭлементы() Цикл
		
		СтрокаПриемникаОбновитьСвязанные(Строка, ВыбранСвязанный);
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПриемникаУстановитьВладельца(СтрокаПриемника, Владелец)
	
	Если ТипЗнч(Владелец) = Тип("Структура") Тогда
		Если Владелец.Имя = Ложь Тогда
			СтрокаПриемника.УточнениеВладельцаСпособПоиска = Владелец.Представление;
			СтрокаПриемника.УточнениеВладельцаВладелец = Неопределено;
			СтрокаПриемника.Поиск = Ложь;
		Иначе
			СтрокаПриемника.УточнениеВладельцаСпособПоиска = Владелец.Представление;
			СтрокаПриемника.УточнениеВладельцаВладелец = Владелец.Имя;
			СтрокаПриемника.Поиск = Истина;
		КонецЕсли;
	Иначе
		СтрокаПриемника.Поиск = Истина;
		М = Новый Массив;
		М.Добавить(ТипЗнч(Владелец));
		СтрокаПриемника.УточнениеВладельцаСпособПоиска = Новый ОписаниеТипов(М);
		СтрокаПриемника.УточнениеВладельцаВладелец = Владелец;
	КонецЕсли;
	
	СтрокаПриемникаОбновитьПредставлениеСопоставления(СтрокаПриемника);
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаПриемникаПолноеПредставление(СтрокаПриемника, Имя = Ложь)
	
	СтрокаПриемникаРодитель = СтрокаПриемника.ПолучитьРодителя();
	
	Если СтрокаПриемникаРодитель = Неопределено Тогда
		Если Имя Тогда
			ПолноеИмя = СтрокаПриемника.Имя;
		Иначе
			ПолноеИмя = СтрокаПриемника.Представление;
		КонецЕсли;
	Иначе
		Если СтрокаПриемникаРодитель.Тип.Типы().Количество() > 1 Тогда
			СтрокаПриемникаРодительРодитель = СтрокаПриемникаРодитель.ПолучитьРодителя();
			Если СтрокаПриемникаРодительРодитель = Неопределено Тогда
				Если Имя Тогда
					ПолноеИмя = СтрокаПриемникаРодитель.Имя;
				Иначе
					ПолноеИмя = СтрокаПриемникаРодитель.Представление;
				КонецЕсли;
			Иначе
				Если Имя Тогда
					ПолноеИмя = СтрокаПриемникаРодительРодитель.Имя + "." + СтрокаПриемникаРодитель.Имя;
					Если СтрокаПриемникаРодительРодитель.ИерархияВладельцаТабличнойЧасти Тогда
						ПолноеИмя = "Ссылка." + ПолноеИмя;
					КонецЕсли;
				Иначе
					ПолноеИмя = СтрокаПриемникаРодительРодитель.Представление + "." + СтрокаПриемникаРодитель.Представление;
					Если СтрокаПриемникаРодительРодитель.ИерархияВладельцаТабличнойЧасти Тогда
						ПолноеИмя = СтрокаПриемникаРодительРодитель.ПолучитьРодителя().Представление + "." + ПолноеИмя;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли; 
		Иначе
			Если Имя Тогда
				ПолноеИмя = СтрокаПриемникаРодитель.Имя + "." + СтрокаПриемника.Имя;
				Если СтрокаПриемникаРодитель.ИерархияВладельцаТабличнойЧасти Тогда
					ПолноеИмя = "Ссылка." + ПолноеИмя;
				КонецЕсли;
			Иначе
				ПолноеИмя = СтрокаПриемникаРодитель.Представление + "." + СтрокаПриемника.Представление;
				Если СтрокаПриемникаРодитель.ИерархияВладельцаТабличнойЧасти ИЛИ НЕ СтрокаПриемникаРодитель.ВерхнийУровень Тогда
					Родитель = СтрокаПриемникаРодитель;
					Пока Родитель.ВерхнийУровень<>Истина Цикл
						Если Родитель.ИерархияВладельцаТабличнойЧасти Тогда
							ПолноеИмя = стрЗаменить(Родитель.ПолучитьРодителя().Представление," ","") + "." + ПолноеИмя;    
						Иначе
							ПолноеИмя = Родитель.ПолучитьРодителя().Имя + "." + ПолноеИмя;     
						КонецЕсли;
						Родитель = Родитель.ПолучитьРодителя();
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПолноеИмя;
	
КонецФункции

&НаКлиенте
Функция СтрокаПриемникаКорневойРодитель(СтрокаПриемника)
	
	СтрокаРодитель = СтрокаПриемника;
	
	Пока НЕ СтрокаРодитель.ПолучитьРодителя() = Неопределено Цикл
		СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
	КонецЦикла;
	
	Возврат СтрокаРодитель;
	
Конецфункции

&НаКлиенте
Функция СтрокаПриемникаУточнениеВладельцаСписокПоиска(СтрокаПриемника)
	
	Если СтрокаПриемника.УточнениеВладельцаСписокПоискаСписокЗначений.Количество() Тогда
		Возврат СтрокаПриемника.УточнениеВладельцаСписокПоискаСписокЗначений;
	КонецЕсли;
	
	СписокВыбора = Новый СписокЗначений;
	
	ОписаниеТиповВладельцаТипы = СтрокаПриемника.Тип.Типы();
	
	Если ПриемникТабличнаяЧасть Тогда
		СоздаваемыйОбъект = "<Строка табличной части>";
	ИначеЕсли НЕ ПриемникРегистрСведений Тогда
		СоздаваемыйОбъект = "<Создаваемый объект>";
	КонецЕсли;
	
	Если НЕ ПриемникРегистрСведений Тогда
		
		Для Каждого СтрокаРеквизита Из ПоляПриемника.ПолучитьЭлементы() Цикл
			
			Если СтрокаРеквизита.УточнениеВладельца Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокиПодчиненныхРеквизитов = Новый Массив;
			ПредставленияВладельцаРеквизита = Новый Массив;
			ИдентификаторыВладельцаРеквизита = Новый Массив;
			
			Если ПриемникТабличнаяЧасть И СтрокаРеквизита.Имя = "Ссылка" Тогда
				Для Каждого СтрокаРеквизитаШапки Из СтрокаРеквизита.ПолучитьЭлементы() Цикл
					
					СтрокиПодчиненныхРеквизитов.Добавить(СтрокаРеквизитаШапки);
					ПредставленияВладельцаРеквизита.Добавить("<" + СтрокаРеквизита.Представление + ">");
					ИдентификаторыВладельцаРеквизита.Добавить("Ссылка.");
					
				КонецЦикла;
			КонецЕсли;
			
			СтрокиПодчиненныхРеквизитов.Добавить(СтрокаРеквизита);
			ПредставленияВладельцаРеквизита.Добавить(СоздаваемыйОбъект);
			ИдентификаторыВладельцаРеквизита.Добавить("");
			
			Для Индекс = 0 По СтрокиПодчиненныхРеквизитов.ВГраница() Цикл
				
				СтрокаПодчиненногоРеквизита = СтрокиПодчиненныхРеквизитов[Индекс];
				ПредставлениеВладельцаРеквизита = ПредставленияВладельцаРеквизита[Индекс];
				ИдентификаторВладельцаРеквизита = ИдентификаторыВладельцаРеквизита[Индекс];
				
				Добавили = Ложь;
				Для Каждого ТипРеквизита Из СтрокаПодчиненногоРеквизита.Тип.Типы() Цикл
					Для Каждого Тип Из ОписаниеТиповВладельцаТипы Цикл
						Если ТипРеквизита = Тип Тогда
							Представление = ПредставлениеВладельцаРеквизита + ".<" + СтрокаПодчиненногоРеквизита.Представление + ">";
							СписокВыбора.Добавить(Новый Структура("Имя,Представление", ИдентификаторВладельцаРеквизита + СтрокаПодчиненногоРеквизита.Имя, Представление), Представление);
							Добавили = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Добавили Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла; 
			
		КонецЦикла;
	
    КонецЕсли;
	
	Представление = "<Не учитывать>";
	СписокВыбора.Добавить(Новый Структура("Имя,Представление", Ложь, Представление), Представление);
	
	Если ОписаниеТиповВладельцаТипы.Количество() > 1 Тогда
		Представление = "<Не определен>";
		СписокВыбора.Добавить(Новый Структура("Имя,Представление", Неопределено, Представление), Представление);
	КонецЕсли;
	
	СоздаваемыйОбъектМожетВыступатьВладельцем = Ложь;
	
	М = Новый Массив;
	Для Каждого Тип Из ОписаниеТиповВладельцаТипы Цикл
		Если Тип = ПриемникТипТаблицыМетаданных.Типы()[0] Тогда
			СоздаваемыйОбъектМожетВыступатьВладельцем = Истина;
		КонецЕсли;
		М.Очистить();
		М.Добавить(Тип);
		ОписаниеТипа = Новый ОписаниеТипов(М);
		ПустоеЗначение = ОписаниеТипа.ПривестиЗначение(Неопределено);
		СписокВыбора.Добавить(ПустоеЗначение, "" + ОписаниеТипа + " <Пустая ссылка>");
		СписокВыбора.Добавить(ОписаниеТипа, "" + ОписаниеТипа + "...");
	КонецЦикла;
	
	Если СоздаваемыйОбъектМожетВыступатьВладельцем Тогда
		Представление = "<Создаваемый объект>";
		СписокВыбора.Вставить(0, Новый Структура("Имя,Представление", "Ссылка", Представление), Представление);
	КонецЕсли;
	
	ДобавленныеПредставления = Новый Соответствие;
	Для Каждого ЭлементСписка Из СписокВыбора Цикл
		Количество = ДобавленныеПредставления.Получить(ЭлементСписка.Представление);
		Если Количество = Неопределено Тогда
			ДобавленныеПредставления.Вставить(ЭлементСписка.Представление, 1);
		Иначе
			ЭлементСписка.Представление = ЭлементСписка.Представление + " (" + (Количество + 1) + ")";
			ДобавленныеПредставления.Вставить(ЭлементСписка.Представление, Количество + 1);
			Если ТипЗнч(ЭлементСписка.Значение) = Тип("Структура") Тогда
				ЭлементСписка.Значение.Представление = ЭлементСписка.Представление;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаПриемника.УточнениеВладельцаСписокПоискаСписокЗначений = СписокВыбора;
	
	Возврат СписокВыбора;
	
Конецфункции

// УПРАВЛЕНИЕ НАСТРОЙКАМИ

&НаКлиенте
Процедура СохранитьНастройкиВСправочник(Команда)
	
	ВыбранноеЗначение = Неопределено;

	
	ОткрытьФорму("Справочник.ПравилаИмпортаТаблиц.ФормаВыбора", Новый Структура("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы), ЭтаФорма,,,, Новый ОписаниеОповещения("СохранитьНастройкиВСправочникЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиВСправочникЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыбранноеЗначение = Результат;
    
    Если ВыбранноеЗначение  = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    СохранитьНастройкиВСправочникНаСервере(ВыбранноеЗначение);

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиВСправочникНаСервере(Знач ПравилоИмпортаТаблиц)
	
	ПравилоОбъект = ПравилоИмпортаТаблиц.ПолучитьОбъект();
	
	ПравилоОбъект.ПриемникПолноеИмяМетаданных = ПриемникПолноеИмя;
	ПравилоОбъект.ПриемникВладелецТабличнойЧасти = ПриемникОбъектТабличнойЧасти;
	ПравилоОбъект.ПриемникРодительСправочника = ПриемникОбъектРодитель;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ПолучитьТаблицуПравил());
	ПравилоОбъект.ПравилаXML = ЗаписьXML.Закрыть();
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, СохранитьНастройки());
	ПравилоОбъект.СохраненнаяНастройкаXML = ЗаписьXML.Закрыть();
	
	ПравилоОбъект.Условие = ИсточникУсловие;
	
	ПравилоОбъект.Соединения.Очистить();
	Для Каждого Соединение Из ИсточникСоединения Цикл
		ЗаполнитьЗначенияСвойств(ПравилоОбъект.Соединения.Добавить(), Соединение);
	КонецЦикла; 
	
	ПравилоОбъект.Первые1 = ИсточникПервые1;
	
	ПравилоОбъект.ДобавочныеПоля.Очистить();
	Для Каждого ЭлементДобавочноеПоле Из ИсточникДобавочныеПоля Цикл
		СтрокаДобавочноеПоле = ПравилоОбъект.ДобавочныеПоля.Добавить();
		СтрокаДобавочноеПоле.Имя = ЭлементДобавочноеПоле.Имя;
		Если ТипЗнч(ЭлементДобавочноеПоле.Значение) = Тип("Строка") Тогда
			СтрокаДобавочноеПоле.ЗначениеНеСтрока = Неопределено;
			СтрокаДобавочноеПоле.ЗначениеСтрока = ЭлементДобавочноеПоле.Значение;
			СтрокаДобавочноеПоле.ТипСтрока = Истина;
		Иначе
			СтрокаДобавочноеПоле.ЗначениеНеСтрока = ЭлементДобавочноеПоле.Значение;
			СтрокаДобавочноеПоле.ЗначениеСтрока = "";
			СтрокаДобавочноеПоле.ТипСтрока = Ложь;
		КонецЕсли;
	КонецЦикла; 
	
	ПравилоОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Функция СохранитьНастройки(Настройки = Неопределено)
	
	Возврат УправлениеФормойУХ.СохранитьНастройки(ЭтаФорма, Настройки,, "Объект,РежимПодчиненный,РежимПодчиненныйАдресФайла,РежимПодчиненныйНовый");
	
КонецФункции

&НаСервере
Процедура ПослеВосстановленияНастроек()
	
	Элементы.ИсточникТаблицаФайлаПредставление.СписокВыбора.Очистить();
	Элементы.ИсточникТаблицаФайлаПредставление.СписокВыбора.Добавить(ИсточникТаблицаФайла, ИсточникТаблицаФайлаПредставление);
	
	Если ИсточникТаблицы.Количество() Тогда
		ЗаполнитьСписокТаблицИсточникаНаСервере();
	КонецЕсли;
	
	ИдентификаторыИсточника = ОбновитьИдентификаторы(ПоляИсточника.ПолучитьЭлементы());
	ИдентификаторыПриемника = ОбновитьИдентификаторы(ПоляПриемника.ПолучитьЭлементы());
	
	Для Каждого СтрокаИсточника Из ПоляИсточника.ПолучитьЭлементы() Цикл
		Если СтрокаИсточника.Выбран = 0 Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Приемник Из СтрокаИсточника.ИдентификаторыПриемника Цикл
			СтрокаПриемника = ПоляПриемника.НайтиПоИдентификатору(ИдентификаторыПриемника[Приемник.Значение]);
			СтрокаПриемника.ИдентификаторИсточника = СтрокаИсточника.Идентификатор;
			Приемник.Значение = ИдентификаторыПриемника[Приемник.Значение];
		КонецЦикла;
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиИзСправочника(Команда)
	
	ВыбранноеЗначение = Неопределено;

	
	ОткрытьФорму("Справочник.ПравилаИмпортаТаблиц.ФормаВыбора", Новый Структура("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы), ЭтаФорма,,,, Новый ОписаниеОповещения("ВосстановитьНастройкиИзСправочникаЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиИзСправочникаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыбранноеЗначение = Результат;
    
    Если ВыбранноеЗначение  = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    ВосстановитьНастройкиИзСправочникаНаСервере(ВыбранноеЗначение);

КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиИзСправочникаНаСервере(Знач ПравилоИмпортаТаблиц)
	
	СохраненнаяНастройкаXML = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ПравилоИмпортаТаблиц, "СохраненнаяНастройкаXML");
	Если НЕ ЗначениеЗаполнено(СохраненнаяНастройкаXML) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.УстановитьСтроку(СохраненнаяНастройкаXML);
		СохраненнаяНастройка = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
	Исключение
		// попытка восстановить настройки из правил XML	
		ЧтениеXML = Новый ЧтениеXML();
		ПравилаXML = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ПравилоИмпортаТаблиц, "ПравилаXML");
		ЧтениеXML.УстановитьСтроку(ПравилаXML);	
		СохраненнаяНастройкаДругая = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
		СохраненнаяНастройка = Новый Соответствие;
		СохраненнаяНастройка.Вставить("ИсточникТаблицаФайла",						ИсточникТаблицаФайлаПредставление);
		СохраненнаяНастройка.Вставить("ПараметрЗагрузкиОстанавливатьсяПриОшибке",	Истина);
		СохраненнаяНастройка.Вставить("ПараметрЗагрузкиПроводитьДокументы",			Ложь);
		СохраненнаяНастройка.Вставить("ИсточникТаблицаФайлаПредставление",			ИсточникТаблицаФайлаПредставление);
		СохраненнаяНастройка.Вставить("ПриемникПолноеИмя",							ПравилоИмпортаТаблиц.ПриемникПолноеИмяМетаданных);
		СохраненнаяНастройка.Вставить("ПоляПриемника", 								Новый ДеревоЗначений);
		СохраненнаяНастройка.Вставить("ИсточникСоединения", 						Новый ТаблицаЗначений);
		СохраненнаяНастройка.Вставить("ПоляИсточника", 								Новый ДеревоЗначений);
		СохраненнаяНастройка.Вставить("ИсточникТаблицы", 							Новый ТаблицаЗначений);
		СохраненнаяНастройка.Вставить("ИсточникДобавочныеПоля", 					Новый ТаблицаЗначений);
		СохраненнаяНастройка.Вставить("",);
		СохраненнаяНастройка.Вставить("",);
		СохраненнаяНастройка.Вставить("",);
	КонецПопытки;
	
	Если СохраненнаяНастройка["ПоляИсточника"].Колонки.Найти("ДобавочноеПоле") = Неопределено Тогда
		СохраненнаяНастройка["ПоляИсточника"].Колонки.Добавить("ДобавочноеПоле", Новый ОписаниеТипов("Булево"));
	КонецЕсли;

	УправлениеФормойУХ.ВосстановитьНастройки(ЭтаФорма, СохраненнаяНастройка);
	ПослеВосстановленияНастроек();
	ВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколируемыеСобытия(Команда)	
	ОткрытьФорму("РегистрСведений.ПротоколируемыеСобытия.ФормаСписка");	
КонецПроцедуры

ОбновлениеПравил = Новый Массив;

