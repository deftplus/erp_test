////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ.
//
&НаКлиенте
Процедура КомандаВперед(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура КомандаНазад(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//

Процедура ПолучитьГруппыРаскрытия()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Объект.ВидОтчета);
		
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСТИНА КАК Пометка,
	|	ПоказателиОтчетов.ГруппаРаскрытия КАК ГруппаРаскрытия,
	|	ИСТИНА КАК ФормироватьШапку
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &Владелец
	|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)
	|	И (НЕ ПоказателиОтчетов.ГруппаРаскрытия.ПометкаУдаления)";
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(), "ГруппыРаскрытияПоказатели");
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСТИНА КАК Пометка,
	|	СтрокиОтчетов.ГруппаРаскрытия,
	|	СтрокиОтчетов.Ссылка КАК СтрокаОтчета,
	|	ИСТИНА КАК ФормироватьШапку
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &Владелец
	|	И (НЕ СтрокиОтчетов.ПометкаУдаления)
	|	И (НЕ СтрокиОтчетов.ГруппаРаскрытия.ПометкаУдаления)";	
	
	ГруппыРаскрытияСтроки = Запрос.Выполнить().Выгрузить();
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(), "ГруппыРаскрытияСтрок");
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Перем АдресМакета;
	
	Если Не ЗначениеЗаполнено(Параметры.ВидОтчета) Тогда
		ВызватьИсключение НСтр("ru = 'Обработка не предназначена для непосредственного использования.'");
	КонецЕсли;
	
	Параметры.Свойство("БланкОтчета",                           Объект.ШаблонОтчета);
	Параметры.Свойство("Макет",                                 Макет);
	Параметры.Свойство("РасширенныйСпособИмпорта",              Объект.РасширенныйСпособИмпорта);
	Параметры.Свойство("РежимМастера",                          РежимМастера);
	Параметры.Свойство("ЦветФонаНаименования",                  Объект.ЦветФонаНаименования);
	Параметры.Свойство("ЦветФонаОбластиВычисляемогоПоказателя", Объект.ЦветФонаОбластиВычисляемогоПоказателя);
	Параметры.Свойство("ЦветФонаОбластиЗаполняемогоПоказателя", Объект.ЦветФонаОбластиЗаполняемогоПоказателя);
	Параметры.Свойство("ЦветФонаОбластиПараметра",              Объект.ЦветФонаОбластиПараметра);
	Параметры.Свойство("ВидОтчета",                             Объект.ВидОтчета);
	Параметры.Свойство("БланкДляОтображения",                   Объект.БланкДляОтображения);
	
	Объект.ФормироватьЗаголовок                 = Истина;
	Объект.ФормироватьШапку                     = Истина;
	Объект.ФормироватьПараметры                 = Истина;
	Объект.ФормироватьСодержательнуюЧасть       = Истина;
	Объект.ВыводитьНаименованияСтрок            = Истина;
	Объект.ВыводитьНаименованияКолонок          = Истина;
	
	ЗначениеВРеквизитФормы(ПолучитьИзВременногоХранилища(Параметры.АдресПараметровБланкаОтчета), "ПараметрыБланка");
	
	Элементы.КомандаВперед.Видимость                  = РежимМастера;
	Элементы.КомандаНазад.Видимость                   = РежимМастера;
	Элементы.КомандаДополнитьМакет.Видимость          = НЕ РежимМастера;
	Элементы.КомандаСформироватьМакетЗаново.Видимость = НЕ РежимМастера;
	
	Если НЕ РежимМастера Тогда
		Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.СтандартнаяГенерация;
	КонецЕсли;
	
	ПолучитьГруппыРаскрытия();
	
	УправлениеДоступностьюЭУ();
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьТаблицуРаскрытий(ИмяРеквизита)
	
	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение(ИмяРеквизита));
	
КонецФункции

&НаСервере
Процедура ОбновитьТаблицуРаскрытия(ИмяРеквизита, АдресТаблицы)
	
	ТаблицаРаскрытий = ПолучитьИзВременногоХранилища(АдресТаблицы);
	ЗначениеВРеквизитФормы(ТаблицаРаскрытий, ИмяРеквизита);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыРаскрытияСтрок(Команда)
	
	РезультатОбработки = Неопределено;

	
	ОткрытьФорму("Обработка.МастерГенерацииМакетаОтчета.Форма.ФормаНастройкиФормированияМакетовРаскрытий", Новый Структура("АдресГруппыРаскрытия, РаскрытиеСтрок", ПодготовитьТаблицуРаскрытий("ГруппыРаскрытияСтрок"), Истина),,,,, Новый ОписаниеОповещения("ГруппыРаскрытияСтрокЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыРаскрытияСтрокЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    РезультатОбработки = Результат;
    Если РезультатОбработки <> Неопределено Тогда
        
        ОбновитьТаблицуРаскрытия("ГруппыРаскрытияСтрок", РезультатОбработки);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппыРаскрытияПоказателя(Команда)
	
	РезультатОбработки = Неопределено;

	
	ОткрытьФорму("Обработка.МастерГенерацииМакетаОтчета.Форма.ФормаНастройкиФормированияМакетовРаскрытий", Новый Структура("АдресГруппыРаскрытия, РаскрытиеСтрок", ПодготовитьТаблицуРаскрытий("ГруппыРаскрытияПоказатели"), Ложь),,,,, Новый ОписаниеОповещения("ГруппыРаскрытияПоказателяЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыРаскрытияПоказателяЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    РезультатОбработки = Результат;
    Если РезультатОбработки <> Неопределено Тогда
        
        ОбновитьТаблицуРаскрытия("ГруппыРаскрытияПоказатели", РезультатОбработки);
        
    КонецЕсли;

КонецПроцедуры

// Регулирует доступность элементов управления формы.
//
Процедура УправлениеДоступностьюЭУ()
	
	ЕстьГруппыРаскрытияПоказатели = ГруппыРаскрытияПоказатели.Количество() > 0;
	ЕстьГруппыРаскрытияСтрок = ГруппыРаскрытияСтрок.Количество() > 0;
	
	ВозможностьДобавления = ЕстьГруппыРаскрытияПоказатели И (НЕ Объект.РасширенныйСпособИмпорта ИЛИ НЕ ЕстьГруппыРаскрытияСтрок);
	
	Если РежимМастера Тогда

		Элементы.ФормироватьГруппыРаскрытияПоказатели.Доступность = ЕстьГруппыРаскрытияПоказатели;

		Если НЕ ЕстьГруппыРаскрытияПоказатели Тогда
			Объект.ФормироватьГруппыРаскрытияПоказатели = Ложь;
		КонецЕсли;
		
		Элементы.ФормироватьРаскрытияСтрок.Доступность = ЕстьГруппыРаскрытияСтрок;
		
		Если НЕ ЕстьГруппыРаскрытияСтрок Тогда
			Объект.ФормироватьРаскрытияСтрок = Ложь;
		КонецЕсли;
		
		Элементы.ДополнитьГруппамиРаскрытия.Доступность = ВозможностьДобавления;
		
		Если НЕ ВозможностьДобавления Тогда
			Объект.СформироватьНовыйМакет = Истина;
			Элементы.НачальноеЗаполнение.Доступность = Ложь;
			ДействияПомощника = 0;
		КонецЕсли;
		
		Элементы.ФормироватьСодержательнуюЧасть.Доступность = Объект.СформироватьНовыйМакет;
		Элементы.ФормироватьЗаголовок.Доступность           = Объект.СформироватьНовыйМакет;
		
		Объект.ФормироватьСодержательнуюЧасть = Объект.СформироватьНовыйМакет;
		Объект.ФормироватьЗаголовок           = Объект.СформироватьНовыйМакет;
		
		Элементы.ВыводитьНаименованиеКолонок.Доступность = ОБъект.ФормироватьСодержательнуюЧасть;
		Элементы.ВыводитьНаименованияСтрок.Доступность   = ОБъект.ФормироватьСодержательнуюЧасть;
		Элементы.ГруппироватьПоСтрокам.Доступность       = ОБъект.ФормироватьСодержательнуюЧасть;
				
		Элементы.Автоотступ.Доступность = ОБъект.ФормироватьСодержательнуюЧасть И Объект.ГруппироватьПоСтрокам;
		
		Элементы.ФормироватьШапку.Доступность = ОБъект.ФормироватьЗаголовок;
		Элементы.Параметры.Доступность        = ОБъект.ФормироватьЗаголовок;
		
	Иначе
		
		Элементы.ФормироватьГруппыРаскрытияПоказатели_СО.Доступность = ЕстьГруппыРаскрытияПоказатели;

		Если НЕ ЕстьГруппыРаскрытияПоказатели Тогда
			Объект.ФормироватьГруппыРаскрытияПоказатели = Ложь;
		КонецЕсли;
		
		Элементы.ФормироватьРаскрытияСтрок.Доступность = ЕстьГруппыРаскрытияСтрок;
		
		Если НЕ ЕстьГруппыРаскрытияСтрок Тогда
			ОБъект.ФормироватьРаскрытияСтрок = Ложь;
		КонецЕсли;
		
		Элементы.КомандаВперед.Доступность  = ВозможностьДобавления;
		Элементы.ВыводитьНаименованиеКолонок_СО.Доступность = Объект.ФормироватьСодержательнуюЧасть;
		Элементы.ВыводитьНаименованияСтрок_СО.Доступность   = Объект.ФормироватьСодержательнуюЧасть;
		Элементы.ГруппироватьПоСтрокам_СО.Доступность       = Объект.ФормироватьСодержательнуюЧасть;
		Элементы.Автоотступ_СО.Доступность                  = Объект.ФормироватьСодержательнуюЧасть И Объект.ГруппироватьПоСтрокам;
		Элементы.ФормироватьШапку_СО.Доступность            = Объект.ФормироватьЗаголовок;
		Элементы.ФормироватьПараметры_СО.Доступность        = Объект.ФормироватьЗаголовок;

	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ МАКЕТА ОТЧЕТА.
//

&НаКлиенте
Процедура СформироватьМакетЗаново(Команда)
	
	Оповестить("МакетСформирован", ВернутьТабличныйДокумент(Ложь), ВладелецФормы);
	Закрыть();
	
КонецПроцедуры


&НаКлиенте
Процедура ДополнитьМакет(Команда)
	
	Оповестить("МакетСформирован", ВернутьТабличныйДокумент(Истина), ВладелецФормы);
	Закрыть();
	
КонецПроцедуры

&НаСервере
Функция ВернутьТабличныйДокумент(ДополнятьОтчет)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ДописыватьВКонецПредыдущего = ДополнятьОтчет;
	ТекОбъект.СформироватьНовыйМакет      = НЕ ДополнятьОтчет;
	
	Возврат ТекОбъект.СформироватьМакет(Макет, РеквизитФормыВЗначение("ГруппыРаскрытияСтрок"), РеквизитФормыВЗначение("ГруппыРаскрытияПоказатели"), РеквизитФормыВЗначение("ПараметрыБланка"));
	
КонецФункции


&НаКлиенте
Процедура ГруппироватьПоСтрокам_СОПриИзменении(Элемент)
	
	УправлениеДоступностьюЭУ();
	
КонецПроцедуры


&НаКлиенте
Процедура ГруппироватьПоСтрокамПриИзменении(Элемент)
	
	УправлениеДоступностьюЭУ();
	
КонецПроцедуры




