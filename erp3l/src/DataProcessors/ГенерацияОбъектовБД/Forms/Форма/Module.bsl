
&НаКлиенте
Процедура ОбработатьОбъекты(Команда)
			
	ОбработатьОбъектыНаСервере();
		
КонецПроцедуры

// Убирает из массива документов МассивВход те, по которым уже созданы
// документы Отражение фактических данных.
&НаСервереБезКонтекста
Функция ОчиститьОбработанныеДокументыКСозданию(МассивВход)
	РезультатФункции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОтражениеФактическихДанныхБюджетирования.Ссылка КАК Ссылка,
		|	ОтражениеФактическихДанныхБюджетирования.ИсходныйДокумент КАК ИсходныйДокумент
		|ИЗ
		|	Документ.ОтражениеФактическихДанныхБюджетирования КАК ОтражениеФактическихДанныхБюджетирования
		|ГДЕ
		|	НЕ ОтражениеФактическихДанныхБюджетирования.ПометкаУдаления
		|	И ОтражениеФактическихДанныхБюджетирования.ИсходныйДокумент В(&ИсходныйДокумент)";
	Запрос.УстановитьПараметр("ИсходныйДокумент", МассивВход);
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	МассивОбработанныхДокументов = Выгрузка.ВыгрузитьКолонку("ИсходныйДокумент");
	Для Каждого ТекМассивВход Из МассивВход Цикл
		НайденныйДокумент = МассивОбработанныхДокументов.Найти(ТекМассивВход);
		Если НайденныйДокумент = Неопределено Тогда
			РезультатФункции.Добавить(ТекМассивВход);
		Иначе
			//Уже создан документ Отражение фактических данных по этому документу. Пропускаем.
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		// ОчиститьОбработанныеДокументыКСозданию()

// Возвращает массив документов, по которым необходимо оформить
// документ Отражение фактических данных по виду документа ИсточникВход.
&НаСервере
Функция ПолучитьМассивДокументовИсточникаКСозданию(ИсточникВход)
	РезультатФункции = Новый Массив;
	Если ТипЗнч(ИсточникВход) = Тип("СправочникСсылка.ДокументыБД") Тогда
		// Документы.
		Запрос = Новый Запрос;
		ТекстЗапроса = "";
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			// Установлен отбор по организации.
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
			|ГДЕ
			|	ЗаявкаНаРасходованиеДенежныхСредств.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И НЕ ЗаявкаНаРасходованиеДенежныхСредств.ПометкаУдаления
			|	И ЗаявкаНаРасходованиеДенежныхСредств.Организация = &Организация
			|	И ЗаявкаНаРасходованиеДенежныхСредств.Проведен";
			РеквизитОрганизация = ИсточникВход.РеквизитРазделенияПоОрганизациям;
			Если ЗначениеЗаполнено(РеквизитОрганизация) Тогда
				СтрокаЗамены = "ЗаявкаНаРасходованиеДенежныхСредств." + РеквизитОрганизация;
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗаявкаНаРасходованиеДенежныхСредств.Организация", СтрокаЗамены);
			Иначе
				// Оставляем предыдущий вариант.
			КонецЕсли;
			Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Иначе
			// Нет отбора по организации.
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
			|ГДЕ
			|	ЗаявкаНаРасходованиеДенежныхСредств.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И НЕ ЗаявкаНаРасходованиеДенежныхСредств.ПометкаУдаления
			|	И ЗаявкаНаРасходованиеДенежныхСредств.Проведен";
		КонецЕсли;
		НаименованиеДокумента = ИсточникВход.Наименование;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗаявкаНаРасходованиеДенежныхСредств", НаименованиеДокумента);
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ДатаНачала", Объект.ПериодОтчета.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", Объект.ПериодОтчета.ДатаОкончания);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			РезультатФункции.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	Иначе
		РезультатФункции = Новый Массив;
	КонецЕсли;
	РезультатФункции = ОчиститьОбработанныеДокументыКСозданию(РезультатФункции);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьТаблицуДокументовИсточникаКСозданию()

// Формирует документ ОФД по источнику ИсточникВход. Возвращает успешность выполнения.
&НаСервере
Функция ОтразитьФактическоеДвижениеПоБюджетамПоПредопределенномуПравилу(ИсточникВход)
	РезультатФункции = Истина;
	ОтказИзм = Ложь;
	МассивКСозданию = ПолучитьМассивДокументовИсточникаКСозданию(ИсточникВход);
	Для Каждого ТекМассивКСозданию Из МассивКСозданию Цикл
		ДокументОбъект = ТекМассивКСозданию.ПолучитьОбъект();
		Документы.ОтражениеФактическихДанныхБюджетирования.ОтразитьФактическоеДвижениеПоБюджетамПоПредопределенномуПравилу(ДокументОбъект, ОтказИзм);
	КонецЦикла;	
	РезультатФункции = НЕ ОтказИзм;
	Возврат РезультатФункции;
КонецФункции		// ОтразитьФактическоеДвижениеПоБюджетамПоПредопределенномуПравилу()

&НаСервере
Процедура ОбработатьОбъектыНаСервере()
	
	ОбработкаОбъект=РеквизитФормыВЗначение("Объект");
	
	Для Каждого Строка ИЗ ТаблицаПравилЗаполнения Цикл
		
		Попытка
			ТекДокумент = Строка.ИсходныйОбъектБД;
			Если Строка.Выполнить И ЗаполненыРеквизитыДляГенерацииОбъектов(Строка) Тогда
				Если Строка.ПредопределенноеПравило Тогда
					// Заполнение по предопределённым правилам.
					РезультатЗаполнения = ОтразитьФактическоеДвижениеПоБюджетамПоПредопределенномуПравилу(ТекДокумент);
					Если НЕ РезультатЗаполнения Тогда
						ТекстСообщения = НСтр("ru = 'Не удалось создать документ Отражение фактических данных по документу %Документ% по предопределённым правилам'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Строка(ТекДокумент));
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
					Иначе
						// Заполнение выполнено успешно.
					КонецЕсли;
				Иначе
					// Заполнение по выбранным правилам.
					Если ЗначениеЗаполнено(Строка.ПравилоЗаполнения) Тогда
						ЗаполнитьЗначенияСвойств(ОбработкаОбъект, Строка);
						ОбработкаОбъект.ОбработатьОбъектыБД();
					Иначе
						ТекстСообщения = НСтр("ru = 'Не заполнено правило обработки для объекта %Объект%. Строка пропущена.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Строка(ТекДокумент));
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Исключение
			
			ТекстДокумент=?(Строка.ПредопределенноеПравило,Нстр("ru = 'Отражение фактических данных по бюджетам'"),Строка(Строка.ПравилоЗаполнения.Владелец));	
			ТекстСообщения=СтрШаблон(Нстр("ru = 'При создании документов ""%1"" по правилу ""%2"" произошла ошибка: %3'"),ТекстДокумент,Строка.ПравилоЗаполнения,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения,,,СтатусСообщения.Важное);
			
		КонецПопытки;
		
	КонецЦикла;
	
	ОбновитьОтборыСписка();
		
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(ОбработанныеОбъектыБД.Отбор,"Организация",	Объект.Организация,ВидСравненияКомпоновкиДанных.Равно,,Истина);
	ПриИзмененииПараметраОтбора();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПараметраОтбора()
	
	ЗаполнитьСписокНаСервере();		
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтборыСписка()
	
	ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(ОбработанныеОбъектыБД.Отбор,"Организация",	Объект.Организация,ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Объект.Организация));
	ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(ОбработанныеОбъектыБД.Отбор,"ПериодОтчета",	Объект.ПериодОтчета,ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Объект.ПериодОтчета));
	ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(ОбработанныеОбъектыБД.Отбор,"ОбъектБД",		Объект.ОбъектБД,ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Объект.ОбъектБД));
		
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбновитьОтборыСписка();
	
	Если Не ЗначениеЗаполнено(Объект.ДатаОбработки) Тогда
		
		Объект.ДатаОбработки=ТекущаяДата();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(ОбработанныеОбъектыБД.Отбор,"ПериодОтчета",	Объект.ПериодОтчета,ВидСравненияКомпоновкиДанных.Равно,,Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Сценарий) Тогда
		
		Объект.Сценарий=Справочники.Сценарии.Факт;
		
	КонецЕсли;
	
	Объект.ОбластьГенерации=Перечисления.ОбластиГенерацииОбъектов.ТекущаяИБ;
	ТипБДПриемник=Справочники.ТипыБазДанных.ТекущаяИБ;	
	Элементы.ТипБДПриемник.Доступность=Ложь;
	УстановитьПараметрыВыбораОбъектаБД();
	Объект.ДатаОбработки=ТекущаяДата();
	Объект.ПериодОтчета=ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(Объект.ДатаОбработки,ДвиженияБюджетированиеУХПереопределяемый.ПолучитьПериодичностьБюджетирования(Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств),0);
			
	ОбновитьОтборыСписка();
	УстановитьУсловноеОформление();

КонецПроцедуры

&НаКлиенте
Процедура ОбъектБДПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(ОбработанныеОбъектыБД.Отбор,"ОбъектБД",		Объект.ОбъектБД,ВидСравненияКомпоновкиДанных.Равно,,Истина);
	ПриИзмененииПараметраОтбора();
	
КонецПроцедуры

&НаСервере
Функция ЗаполненыРеквизитыДляГенерацииОбъектов(СтрокаГенерации)
	
	Возврат ЗначениеЗаполнено(Объект.ПериодОтчета)
		И ЗначениеЗаполнено(Объект.ОбъектБД)
		И ЗначениеЗаполнено(СтрокаГенерации.ИспользуемаяИБ);
	
КонецФункции // ЗаполненыРеквизитыДляГенерацииОбъектов()

&НаСервере
Процедура ЗаполнитьСписокНаСервере()
	
	ТаблицаПравилЗаполнения.Очистить();
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	НастройкиЗаполненияОбъектовБДСрезПоследних.ПравилоЗаполнения,
	|	НастройкиЗаполненияОбъектовБДСрезПоследних.ИсходныйОбъектБД,
	|	НастройкиЗаполненияОбъектовБДСрезПоследних.ИспользуемаяИБ,
	|	НастройкиЗаполненияОбъектовБДСрезПоследних.ПроводитьДокументы,
	|	НастройкиЗаполненияОбъектовБДСрезПоследних.Организация
	|ИЗ
	|	РегистрСведений.НастройкиЗаполненияОбъектовБД.СрезПоследних(
	|			,
	|			ОбъектБД = &ОбъектБД"+?(ЗначениеЗаполнено(Объект.Организация)," И Организация = &Организация","")+") КАК НастройкиЗаполненияОбъектовБДСрезПоследних";
	
	Запрос.УстановитьПараметр("ОбъектБД",Объект.ОбъектБД);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Запрос.УстановитьПараметр("Организация",Объект.Организация);
		
	КонецЕсли;
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока = ТаблицаПравилЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
		НоваяСтрока.Выполнить=Истина;
		
	КонецЦикла;	
	
	ТекИБ = Справочники.ТипыБазДанных.ТекущаяИБ;
	ДокументБдОтражениеФактическихДанных = Справочники.ДокументыБД.НайтиПоНаименованию("ОтражениеФактическихДанныхБюджетирования", , , ТекИБ);
	Если Объект.ОбъектБД = ДокументБдОтражениеФактическихДанных Тогда
		СписокПредопределенныхОбъектов = ДенежныеСредстваВстраиваниеУХ.ОбъектыСПредопределеннымиПравиламиГенерации(Ложь);		
		Для Каждого ТекСписокПредопределенныхОбъектов Из СписокПредопределенныхОбъектов Цикл
			НайденныйОбъект = ОбщегоНазначенияСерверУХ.ВернутьСсылкуБДПоПолномуИмени(ТекСписокПредопределенныхОбъектов);
			Если ЗначениеЗаполнено(НайденныйОбъект) Тогда
				НоваяСтрока = ТаблицаПравилЗаполнения.Добавить();
				НоваяСтрока.Выполнить				 = Истина;
				НоваяСтрока.ИсходныйОбъектБД		 = НайденныйОбъект;
				НоваяСтрока.ИспользуемаяИБ			 = Справочники.ВнешниеИнформационныеБазы.ТекущаяИБ;
				НоваяСтрока.ПроводитьДокументы		 = Истина;
				НоваяСтрока.ТипБД					 = Справочники.ТипыБазДанных.ТекущаяИБ;
				НоваяСтрока.ПредопределенноеПравило	 = Истина;
			Иначе
				// Значение не найдено. Пропускаем.
			КонецЕсли;
		КонецЦикла;	
	Иначе
		// Не добавляем предопределенные правила.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписок(Команда)
	
	ЗаполнитьСписокНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораОбъектаБД()
	
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец", ТипБДПриемник));
	Элементы.ОбъектБД.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	Объект.ОбъектБД="";
	
	Элементы.ОбъектБД.Доступность=ЗначениеЗаполнено(ТипБДПриемник);
		
КонецПроцедуры // УстановитьПараметрыВыбораОбъектаБД() 

// Выставляет условное оформление на форме.
&НаСервере
Процедура УстановитьУсловноеОформление()
	УсловноеОформление.Элементы.Очистить();
	// Оформление предопределённого правила.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПравилНастройкиПравилоЗаполнения");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, "ТаблицаПравилЗаполнения.ПредопределенноеПравило", ВидСравненияКомпоновкиДанных.Равно, Истина, , Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст",					 НСтр("ru = '<Предопределённое правило>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",	 Ложь);
	// Оформление текущей Информационной базы.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПравилНастройкиИспользуемаяИБ");
	ТекИБ = Справочники.ТипыБазДанных.ТекущаяИБ;
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, "ТаблицаПравилЗаполнения.ТипБД", ВидСравненияКомпоновкиДанных.Равно, ТекИБ, , Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	// Оформление сеанса обмена данными.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбработанныеОбъектыСеансОбменаДанными");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, "ОбработанныеОбъектыБД.СеансОбменаДанными", ВидСравненияКомпоновкиДанных.Заполнено, , , Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
КонецПроцедуры		// УстановитьУсловноеОформление()


&НаСервере
Процедура ВнешняяИБПриИзмененииНаСервере()
	
	ТаблицаПравилЗаполнения.Очистить();
	ТипБДПриемник=?(Объект.ОбластьГенерации=Перечисления.ОбластиГенерацииОбъектов.ТекущаяИБ,Справочники.ТипыБазДанных.ТекущаяИБ,"");
	Элементы.ТипБДПриемник.Доступность=НЕ Объект.ОбластьГенерации=Перечисления.ОбластиГенерацииОбъектов.ТекущаяИБ;
	
	УстановитьПараметрыВыбораОбъектаБД();
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешняяИБПриИзменении(Элемент)
	
	ВнешняяИБПриИзмененииНаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработанныеОбъектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Запись=Элементы.ОбработанныеОбъекты.ТекущиеДанные;
	
	Если Поле.Имя="ОбработанныеОбъектыОбработанныйОбъектСсылка" Тогда
		
		СтандартнаяОбработка=Ложь;
		
		Если НЕ ЗначениеЗаполнено(Запись.ОбработанныйОбъектСсылка) Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Если ТипЗнч(Запись.ОбработанныйОбъектСсылка)=Тип("Строка") Тогда
			
			ДанныеОбъекта=ПолучитьДанныеОбъектаВИБ(Запись.ОбработанныйОбъектСсылка,Запись);
			
			Если ТипЗнч(ДанныеОбъекта)=Тип("Структура") Тогда
				
				ОткрытьФорму("ОбщаяФорма.ОтображениеЭлементаWS_Управляемая", Новый Структура("Расшифровка, ИспользуемаяИБ", ДанныеОбъекта,  ПолучитьРеквизитСеанса(Запись.СеансОбменаДанными,"ИспользуемаяИБ")));				

			КонецЕсли;
			
		Иначе
			
			ПоказатьЗначение(, Запись.ОбработанныйОбъектСсылка);
			
		КонецЕсли;
		
	ИначеЕсли Поле.Имя="ОбработанныеОбъектыИсходныйОбъектСсылка" Тогда
		
		СтандартнаяОбработка=Ложь;
		
		Если НЕ ЗначениеЗаполнено(Запись.ИсходныйОбъектСсылка) Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Если ТипЗнч(Запись.ИсходныйОбъектСсылка)=Тип("Строка") Тогда
			
			ДанныеОбъекта=ПолучитьДанныеОбъектаВИБ(Запись.ИсходныйОбъектСсылка,Запись);
			
			Если ТипЗнч(ДанныеОбъекта)=Тип("Структура") Тогда
				
				ОткрытьФорму("ОбщаяФорма.ОтображениеЭлементаWS_Управляемая", Новый Структура("Расшифровка, ИспользуемаяИБ", ДанныеОбъекта, ПолучитьРеквизитСеанса(Запись.СеансОбменаДанными,"ИспользуемаяИБ")));
				
			КонецЕсли;
			
		Иначе
			
			ПоказатьЗначение(, Запись.ИсходныйОбъектСсылка);
			
		КонецЕсли;
		
	ИначеЕсли Поле.Имя="ОбработанныеОбъектыЕстьОшибки" ИЛИ Поле.Имя="ОбработанныеОбъектыПротоколЗагрузки" Тогда
		
		СтандартнаяОбработка=Ложь;
		ОтобразитьПротоколОбмена(Неопределено);
		
	КонецЕсли;	
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьРеквизитСеанса(СеансОбменаДанными,ИмяРеквизита)
	
	Возврат СеансОбменаДанными[ИмяРеквизита];	
	
КонецФункции // ПолучитьРеквизитСеанса() 


&НаСервере
Функция ПолучитьДанныеОбъектаВИБ(СтрокаGUID,Запись)
	
	ТекСоединениеВИБ = УправлениеСоединениямиВИБУХ.ПолучитьСоединение(Запись.СеансОбменаДанными.ИспользуемаяИБ, 1);
		
	Если ТекСоединениеВИБ=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектСсылкаВИБ=РасширениеИнтеграцииУХ.ПолучитьСсылкуПОСтрокеUUID(ТекСоединениеВИБ,"Документ",?(Запись.СеансОбменаДанными.ОбластьГенерации=Перечисления.ОбластиГенерацииОбъектов.ТекущаяИБ,Запись.СеансОбменаДанными.ПравилоЗаполнения.ИсходныйОбъектБД.Наименование,Запись.СеансОбменаДанными.ОбъектБД.Наименование),СтрокаGUID);
		
	ТипЗначения = РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLTypeOf(ТекСоединениеВИБ,ОбъектСсылкаВИБ).TypeName;
	
	СтруктураОбъекта=Новый Структура("ТипЗначения, Значение", ТипЗначения, РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLString(ТекСоединениеВИБ,ОбъектСсылкаВИБ));
	Возврат СтруктураОбъекта;
			
КонецФункции // ПолучитьДанныеОбъектаВИБ()


&НаКлиенте
Процедура ОбъектБДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ДляЗаполненияПоПравилам",Истина);
	СтруктураПараметров.Вставить("ОбластьГенерации",Объект.ОбластьГенерации);	
	СтруктураПараметров.Вставить("Отбор",Новый Структура("Владелец",ТипБДПриемник));
			
	ОткрытьФорму("Справочник.ДокументыБД.ФормаВыбора",СтруктураПараметров,Элемент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОбъектуБДНаСервере()
	
	ТаблицаПравилЗаполнения.Очистить();
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПравилаЗаполненияОбъектовБД.Владелец.Владелец = ЗНАЧЕНИЕ(Справочник.ТипыБазДанных.ТекущаяИБ)
	|			ТОГДА ПравилаЗаполненияОбъектовБД.ТипБД
	|		ИНАЧЕ ПравилаЗаполненияОбъектовБД.Владелец.Владелец
	|	КОНЕЦ КАК ТипБД,
	|	ПравилаЗаполненияОбъектовБД.ИсходныйОбъектБД,
	|	ПравилаЗаполненияОбъектовБД.Ссылка КАК ПравилоЗаполнения,
	|	ВЫБОР
	|		КОГДА ПравилаЗаполненияОбъектовБД.Владелец.Владелец = ЗНАЧЕНИЕ(Справочник.ТипыБазДанных.ТекущаяИБ)
	|			ТОГДА ПравилаЗаполненияОбъектовБД.ТипБД.ВИБПоУмолчанию
	|		ИНАЧЕ ПравилаЗаполненияОбъектовБД.Владелец.Владелец.ВИБПоУмолчанию
	|	КОНЕЦ КАК ИспользуемаяИБ
	|ИЗ
	|	Справочник.ПравилаЗаполненияОбъектовБД КАК ПравилаЗаполненияОбъектовБД
	|ГДЕ
	|	ПравилаЗаполненияОбъектовБД.Владелец = &ОбъектБД
	|	И НЕ ПравилаЗаполненияОбъектовБД.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ОбъектБД",Объект.ОбъектБД);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока=ТаблицаПравилЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
		
		НоваяСтрока.ВыполнятьАвтоматически=ЗначениеЗаполнено(Результат.ИсходныйОбъектБД) И Результат.ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ;
		НоваяСтрока.ПроводитьДокументы=НоваяСтрока.ВыполнятьАвтоматически;
		
		Если Результат.ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ Тогда
			
			НоваяСтрока.ИспользуемаяИБ=Справочники.ВнешниеИнформационныеБазы.ТекущаяИБ;
			
		КонецЕсли;
		
		НоваяСтрока.Организация=Объект.Организация;
		НоваяСтрока.Выполнить=ЗначениеЗаполнено(НоваяСтрока.Организация);
				
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОбъектуБД(Команда)
	
	ЗаполнитьПоОбъектуБДНаСервере();
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПравилНастройкиПравилоЗаполненияПриИзменении(Элемент)
	
	ТаблицаПравилНастройкиПравилоЗаполненияПриИзмененииНаСервере(Элементы.ТаблицаПравилНастройки.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПравилНастройкиПравилоЗаполненияПриИзмененииНаСервере(ИдентификаторСтроки)
	
	ТекущиеДанные=ТаблицаПравилЗаполнения.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ПравилоЗаполнения=ТекущиеДанные.ПравилоЗаполнения;
	
	Если Объект.ОбъектБД.Владелец=Справочники.ТипыБазДанных.ТекущаяИБ Тогда
		
		ТекущиеДанные.ТипБД	=ПравилоЗаполнения.ТипБД;
		
		Если ПравилоЗаполнения.ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ Тогда
			
			ТекущиеДанные.ИспользуемаяИБ=Справочники.ТипыБазДанных.ТекущаяИБ;
			
		КонецЕсли;
		
	Иначе
		
		ТекущиеДанные.ТипБД	=Объект.ОбъектБД.Владелец;
		
	КонецЕсли;
	
	ТекущиеДанные.ИсходныйОбъектБД=ПравилоЗаполнения.ИсходныйОбъектБД;
		
КонецПроцедуры


&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Для Каждого Строка ИЗ ТаблицаПравилЗаполнения Цикл
		
		Строка.Выполнить=Истина;
		
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для Каждого Строка ИЗ ТаблицаПравилЗаполнения Цикл
		
		Строка.Выполнить=Ложь;
		
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ТипБДПриемникПриИзменении(Элемент)
	
	УстановитьПараметрыВыбораОбъектаБД();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивПротоколируемыхОбъектов(СеансОбменаДанными)
	
	МассивОбъектов=Новый Массив;
	МассивОбъектов.Добавить(СеансОбменаДанными);
	
	Возврат ПротоколируемыеСобытияУХ.ПолучитьМассивПротоколируемыхОбъектов(МассивОбъектов);
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьПротоколОбмена(Команда)
	
	Если Элементы.ОбработанныеОбъекты.ТекущиеДанные=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МассивПротоколируемыхОбъектов=ПолучитьМассивПротоколируемыхОбъектов(Элементы.ОбработанныеОбъекты.ТекущиеДанные.СеансОбменаДанными);
	
	Если МассивПротоколируемыхОбъектов.Количество()>0 Тогда
		
		ОткрытьФорму("Обработка.ОтображениеПротоколируемыхСобытий.Форма.Форма",Новый Структура("МассивПротоколируемыхОбъектов",МассивПротоколируемыхОбъектов));
		
	Иначе
		
		ОткрытьФорму("Обработка.ОтображениеПротоколируемыхСобытий.Форма.Форма",Новый Структура("КонтекстПротокола",ПолучитьКонтекстОбъекта(Элементы.ОбработанныеОбъекты.ТекущиеДанные.СеансОбменаДанными)));
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКонтекстОбъекта(СеансОбменаДанными)
	
	Возврат ПротоколируемыеСобытияУХ.ПолучитьСтруктуруКонтекста(СеансОбменаДанными);	
	
КонецФункции


