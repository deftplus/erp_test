
Перем КонтекстЗагрузки;
Перем СтруктураТаблиц;

Перем ДокументОбъект Экспорт;

Перем ВалютаУчета Экспорт;
Перем ВалютаОтчетности Экспорт;

Перем АнализЧувствительности Экспорт;
Перем База Экспорт;
Перем ВидОтчета Экспорт;
Перем ДанныеПараметрикиАктуальны Экспорт;
Перем ДанныеРасшифровкиСчитаны Экспорт;
Перем ЕстьОбращениеКВИБ Экспорт;
Перем ЛогИзмененийПоказателей Экспорт;
Перем ЛогИзмененийРаскрытийПоказателей Экспорт;
Перем МаксАналитикОтчета Экспорт;
Перем МаксАналитикПоказателя Экспорт;
Перем мЗначенияОперандов Экспорт;
Перем мОперанды Экспорт;
Перем мПоказатели Экспорт;
Перем мПоказателиДляОбработки Экспорт;
Перем мПоказателиОбязательныеКПересчету Экспорт;
Перем мПоказателиРаскрытия Экспорт;
Перем мПустойВидАналитики Экспорт;
Перем мРасширеннаяДиагностикаВключена Экспорт;
Перем мСоответствиеДляПоискаПоКоду Экспорт;
Перем мСоответствиеДляПоискаПоСсылке Экспорт;
Перем мСоответствиеОперандовИПоказателейОтбора Экспорт;
Перем мТаблицаВидовАналитикВидаОтчета Экспорт;
Перем мТаблицаПересчета Экспорт;
Перем мТабПоказателиЗапросы Экспорт;
Перем мТабРасшифровкиПоказателей Экспорт;
Перем НомерТекущейОперации Экспорт;
Перем Показатели Экспорт;
Перем ПоказателиДляЗаполнения Экспорт;
Перем ТабКорректировок Экспорт;
Перем ТаблицаВыявленныхОшибок Экспорт;
Перем ТипЗначенияЧисло Экспорт;
Перем ФлагОшибкиИмпорта Экспорт;
Перем ЧислоДопАналитик Экспорт;
Перем ТаблицаСогласования Экспорт;
Перем ПутьКФайлуADO Экспорт;
Перем ПутьКВременномуФайлуADO Экспорт;
Перем ДополнительныеСвойстваДляРасчета Экспорт;

Перем АдресХранилищаПеременныхДляРасчета Экспорт;
Перем ДанныеОбъекта Экспорт;

// Инициализируются при инициализации контекста на основании матрицы полномочий.
Перем Исполнитель   Экспорт;
Перем Проверяющий  Экспорт;

/////////////////////////////////////////////////////////////////////////////
// Таблицы для расчета корректировок значений показателей

Перем Записи Экспорт;
Перем РедактируемыеЗаписи Экспорт;
Перем СводныеКорректировки Экспорт;

Перем ТаблицаТрансляцииПоказателей;

Перем ЭтоНовый Экспорт;

Перем СоответствиеКурсовВалют Экспорт;
Перем СпособПолучения;
Перем мОписаниеТиповБулево;

Перем ОбработкаЗавершена Экспорт;

Перем ОбработанныеОперанды Экспорт;

Перем ТекСоединениеВИБ;
Перем СеансОбменаДанными Экспорт;
Перем ТаблицаОбъектов Экспорт;

Процедура ЗаполнитьПоОбъектуБД()
	
	Для Каждого Строка ИЗ ПравилоЗаполнения.ИсточникиДляЗаполненияТЧ Цикл
		
		Если ЗначениеЗаполнено(Строка.ИсточникДанных) Тогда
			СтруктураТаблиц.Вставить(Строка.ТабличнаяЧасть.Имя,УправлениеОтчетамиУХ.ПолучитьТаблицуДанныхПоИсточнику(КонтекстЗагрузки,Строка.ИсточникДанных));
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбластьГенерации=Перечисления.ОбластиГенерацииОбъектов.ТекущаяИБ Тогда
		
		ОбработатьСтруктуруТаблицТекущаяИБ();
		
	Иначе
		
		ОбработатьСтруктуруТаблицВнешняяИБ();
		
	КонецЕсли;
	
КонецПроцедуры //

Процедура ПолучитьОбъектДляОбработкиПоИсходному()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ОбработанныеОбъектыБД.ОбработанныйОбъектСсылка
	|ИЗ
	|	РегистрСведений.ОбработанныеОбъектыБД КАК ОбработанныеОбъектыБД
	|ГДЕ
	|	ОбработанныеОбъектыБД.ОбработанныйОбъектСсылка ССЫЛКА Документ."+ОбъектБД.Наименование+"
	|	И ОбработанныеОбъектыБД.ИсходныйОбъектСсылка = &ИсходныйОбъектСсылка";
	
	Запрос.УстановитьПараметр("ИсходныйОбъектСсылка",ИсходныйОбъектСсылка);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		ДокументОбъект=Результат.ОбработанныйОбъектСсылка.ПолучитьОбъект();
		ДокументОбъект.Дата=ИсходныйОбъектСсылка.Дата;
		ДокументОбъект.ПометкаУдаления=Ложь;
		
	Иначе
		
		ДокументОбъект=Документы[ОбъектБД.Наименование].СоздатьДокумент();
		ДокументОбъект.Дата=ИсходныйОбъектСсылка.Дата;
		ДокументОбъект.УстановитьНовыйНомер();
		
	КонецЕсли;
		
КонецПроцедуры  //ПолучитьОбъектДляОбработки() 

Процедура ЗаполнитьПоПроизвольномуКоду()
	
	Если ЗначениеЗаполнено(ИсходныйОбъектСсылка) Тогда
		
		ПолучитьОбъектДляОбработкиПоИсходному();
		
		ЕстьОшибки=Ложь;
		ОбработкаЗавершена=Ложь;
		
		Попытка // Выполняется заполнение документа
			
			Выполнить(ПравилоЗаполнения.ПроцедураЗаполнения);
			
			Если ПроводитьДокументы Тогда
				
				ДокументОбъект.ОбменДанными.Загрузка=Ложь;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ОбработкаЗавершена=Истина;
				
			Иначе
				
				ДокументОбъект.ОбменДанными.Загрузка=Истина;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			КонецЕсли;
						
		Исключение
			
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
				
				ТекстОшибки=СтрШаблон(Нстр("ru = 'Не удалось создать на основании объекта %1 объект вида %2 по процедуре правила %3:
				|%4'"), ИсходныйОбъектСсылка, ОбъектБД, ПравилоЗаполнения, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			Иначе
				
				ТекстОшибки=СтрШаблон(Нстр("ru = 'Не удалось создать на основании объекта %1 обновить объект %2 по процедуре правила %3:
				|%4'"), ИсходныйОбъектСсылка, ДокументОбъект, ПравилоЗаполнения, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			КонецЕсли;
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки,ЕстьОшибки,,СтатусСообщения.Внимание);
			
		КонецПопытки;
		
		ОтразитьОбработкуОбъектаПоСсылке(ДокументОбъект.Ссылка, ЕстьОшибки);
		
	Иначе
		
		Попытка
			
			Выполнить(ПравилоЗаполнения.ПроцедураЗаполнения);
			
		Исключение
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не удалось выполнить обработку объектов вида %1 по процедуре правила %2:
			|%3'"), ОбъектБД, ПравилоЗаполнения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			
		КонецПопытки;
		
	КонецЕсли;					 
		
КонецПроцедуры // ЗаполнитьПоПроизвольномуКоду()

Процедура ДобавитьЗаписьпоСеансуЗагрузки()
	
	НаборЗаписей=РегистрыСведений.ОбработанныеОбъектыБД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СеансОбменаДанными.Установить(СеансОбменаДанными);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	НоваяСтрока=НаборЗаписей.Добавить();
	НоваяСтрока.СеансОбменаДанными=СеансОбменаДанными;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры // ДобавитьЗаписьпоСеансуЗагрузки() 

Функция ПолучитьТаблицуРеквизитов(ИмяОбъекта) Экспорт
	
	Если ИмяОбъекта="Шапка" Тогда
		
		РеквизитыОбъекта=ОбъектБД.Реквизиты;
		
	Иначе
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ТабличныеЧастиБДРеквизиты.Имя,
		|	ТабличныеЧастиБДРеквизиты.Синоним,
		|	ТабличныеЧастиБДРеквизиты.ТипДанных
		|ИЗ
		|	Справочник.ТабличныеЧастиБД.Реквизиты КАК ТабличныеЧастиБДРеквизиты
		|ГДЕ
		|	ТабличныеЧастиБДРеквизиты.Ссылка.Владелец = &Владелец
		|	И ТабличныеЧастиБДРеквизиты.Ссылка.Имя = &Имя";
		
		Запрос.УстановитьПараметр("Владелец",ОбъектБД);
		Запрос.УстановитьПараметр("Имя",ИмяОбъекта);
		
		РеквизитыОбъекта=Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	ТаблицаРеквизитов=Новый ТаблицаЗначений;
	
	Для Каждого СтрРеквизит ИЗ РеквизитыОбъекта Цикл
				
		ОписаниеТиповРеквизита=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповИзСтрокиТипов(СтрРеквизит.ТипДанных);
		
		Если ОписаниеТиповРеквизита=Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТаблицаРеквизитов.Колонки.Добавить(СтрРеквизит.Имя,ОписаниеТиповРеквизита);
		
	КонецЦикла;
	
	Возврат ТаблицаРеквизитов;
		
КонецФункции // ПолучитьТаблицуРеквизитов()

Функция ПолучитьСтрокуРеквизитовДляЗаполненияШапки()
	
	СтрРеквизитыЗаполнения="";
	
	Для Каждого СтрПоле ИЗ ПравилоЗаполнения.ИсточникДляЗаполненияШапки.ПравилаИспользованияПолейЗапроса Цикл
		
		Если НЕ (ОбъектБД.Реквизиты.Найти(СтрПоле.КодАналитики)=Неопределено ИЛИ СтрПоле.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.РучнойВвод) Тогда
			
			СтрРеквизитыЗаполнения=СтрРеквизитыЗаполнения+","+СтрПоле.КодАналитики;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПравилоЗаполнения.ПоОбъектуБД=0 Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ПоказателиОбъектовБД.Наименование
		|ИЗ
		|	Справочник.ПоказателиОбъектовБД КАК ПоказателиОбъектовБД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
		|		ПО (ПроцедурыРасчетов.НазначениеРасчетов = &ПравилоОбработки)
		|			И ПоказателиОбъектовБД.Ссылка = ПроцедурыРасчетов.ПотребительРасчета
		|ГДЕ
		|	ПоказателиОбъектовБД.Владелец = &Владелец
		|	И НЕ ПоказателиОбъектовБД.ПометкаУдаления
		|	И НЕ ПоказателиОбъектовБД.ДляЗаполненияШапки
		|	И ПоказателиОбъектовБД.ТабличнаяЧастьБД = ЗНАЧЕНИЕ(Справочник.ТабличныеЧастиБД.ПустаяСсылка)";
		
		Запрос.УстановитьПараметр("ПравилоОбработки",ПравилоЗаполнения);
		Запрос.УстановитьПараметр("Владелец",ОбъектБД);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			СтрРеквизитыЗаполнения=СтрРеквизитыЗаполнения+","+Результат.Наименование;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Сред(СтрРеквизитыЗаполнения,2);
		
КонецФункции // ПолучитьСтрокуРеквизитовДляЗаполненияШапки() 

Процедура ОбработатьСтруктуруТаблицТекущаяИБ()
	
	Если СтруктураТаблиц.Количество()=0 Тогда
		
		ДобавитьЗаписьпоСеансуЗагрузки();
		Возврат;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса="";
	
	Для Каждого КлючИЗначение ИЗ СтруктураТаблиц Цикл
		
		Если КлючИЗначение.Ключ="Шапка" Тогда
			
			Если КлючИЗначение.Значение.Количество()=0 Тогда
				
				ДобавитьЗаписьпоСеансуЗагрузки();
				Возврат;
				
			КонецЕсли;
			
			Если ПравилоЗаполнения.ПоОбъектуБД=1 Тогда
				
				ТаблицаРеквизитов=КлючИЗначение.Значение;
				
			Иначе	
				
				ТаблицаРеквизитов=ПолучитьТаблицуРеквизитов(КлючИЗначение.Ключ);
				ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(КлючИЗначение.Значение,ТаблицаРеквизитов);
				
				СтруктураТаблиц.Вставить(КлючИЗначение.Ключ,ТаблицаРеквизитов);
				
			КонецЕсли;
			
		Иначе
			
			ТаблицаРеквизитов=КлючИЗначение.Значение;
			
		КонецЕсли;
		
		ТекстВыборки="";
		
		Для Каждого Колонка ИЗ ТаблицаРеквизитов.Колонки Цикл
			
			ТекстВыборки=ТекстВыборки+",
			|"+КлючИЗначение.Ключ+"_Исходник."+Колонка.Имя;
			
		КонецЦикла;
		
		ТекстЗапроса=ТекстЗапроса+"
		|ВЫБРАТЬ "+Сред(ТекстВыборки,2)+" Поместить "+КлючИЗначение.Ключ+"_ВТ ИЗ &"+КлючИЗначение.Ключ+" КАК "+КлючИЗначение.Ключ+"_Исходник
		|;";
		
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ,ТаблицаРеквизитов);
		
	КонецЦикла;
	
	ТекстСоединение="";
	ОписаниеТиповСтрокаНеограниченнойДлины=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0);
	
	Если ПравилоЗаполнения.ПоОбъектуБД=1 Тогда
		
		ТекстЗапроса=ТекстЗапроса+"
		|ВЫБРАТЬ Шапка_ВТ.*,
		|ЕСТЬNULL(ОбработанныеОбъектыБДИсточник.ОбработанныйОбъектСсылка,Неопределено) КАК СуществующийДокумент,
		|ЕСТЬNULL(ОбработанныеОбъектыБДПриемник.ИсходныйОбъектСсылка,Неопределено) КАК ДокументПланирования
		|ИЗ Шапка_ВТ 
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеОбъектыБД КАК ОбработанныеОбъектыБДИсточник ПО Шапка_ВТ.ИсходныйОбъектСсылка=ОбработанныеОбъектыБДИсточник.ИсходныйОбъектСсылка
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеОбъектыБД КАК ОбработанныеОбъектыБДПриемник ПО Шапка_ВТ.ИсходныйОбъектСсылка=ОбработанныеОбъектыБДПриемник.ОбработанныйОбъектСсылка";
		
	Иначе	

		СтруктураПоиска=Новый Структура("ОбъектБД,Организация,ПериодОтчета,Сценарий,ПравилоЗаполнения,ИспользуемаяИБ");
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,ЭтотОбъект);
		
		СеансОбменаДанными=Справочники.СеансыОбменаДанными.НайтиСоздатьСеансОбменаДанными(СтруктураПоиска);
				
		ТекстЗапроса=ТекстЗапроса+"
		|ВЫБРАТЬ Шапка_ВТ.*,ЕСТЬNULL(ОбработанныеОбъектыБДПриемник.ОбработанныйОбъектСсылка,Неопределено) КАК СуществующийДокумент
		|ИЗ Шапка_ВТ ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеОбъектыБД КАК ОбработанныеОбъектыБДПриемник ПО
		|ОбработанныеОбъектыБДПриемник.СеансОбменаДанными=&СеансОбменаДанными";
		
		Запрос.УстановитьПараметр("СеансОбменаДанными",СеансОбменаДанными);
				
	КонецЕсли;
		
	Запрос.Текст=ТекстЗапроса;
	ТаблицаДокументов=Запрос.Выполнить().Выгрузить();
	
	СтруктураПоиска=Новый Структура;
	ТекстОтбор="";
	
	Для Каждого СтрРеквизит ИЗ ПравилоЗаполнения.РеквизитыШапкиДляСинхронизацииТЧ Цикл
		
		СтруктураПоиска.Вставить(СтрРеквизит.Имя);
		
		ТекстОтбор=СтрШаблон(Нстр("ru = '%1
		|И %2=&%3'"), ТекстОтбор, СтрРеквизит.Имя, СтрРеквизит.Имя);
		
	КонецЦикла;
	
	ТекстОтбор=Сред(ТекстОтбор,3);
	ТаблицаОбъектов=Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("ОбработанныйОбъектСсылка");
	ТаблицаОбъектов.Колонки.Добавить("ИсходныйОбъектНомер");
	ТаблицаОбъектов.Колонки.Добавить("ИсходныйОбъектКод");
	ТаблицаОбъектов.Колонки.Добавить("ИсходныйОбъектНаименование");
	ТаблицаОбъектов.Колонки.Добавить("ИсходныйОбъектДата");
	ТаблицаОбъектов.Колонки.Добавить("ИсходныйОбъектСсылка");
	ТаблицаОбъектов.Колонки.Добавить("ОбработкаЗавершена");
	ТаблицаОбъектов.Колонки.Добавить("ЕстьОшибкиИмпорта");
	
	РеквизитыДляЗаполненияШапки=ПолучитьСтрокуРеквизитовДляЗаполненияШапки();
		
	Для Каждого СтрДокумент ИЗ ТаблицаДокументов Цикл
		
		Если СтрДокумент.СуществующийДокумент=Неопределено Тогда
			
			ДокументОбъект=Документы[ОбъектБД.Наименование].СоздатьДокумент();
			
		Иначе
			
			ДокументОбъект=СтрДокумент.СуществующийДокумент.ПолучитьОбъект();
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект,СтрДокумент,РеквизитыДляЗаполненияШапки);
		
		Если Не ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
			
			ДокументОбъект.Дата=ПериодОтчета.ДатаОкончания;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокументОбъект.Номер) Тогда
			
			ДокументОбъект.УстановитьНовыйНомер(Организация.Префикс);
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрДокумент);
		
		Для Каждого КлючИЗначение ИЗ СтруктураТаблиц Цикл
			
			Если КлючИЗначение.Ключ="Шапка" Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект[КлючИЗначение.Ключ].Очистить();
			
			Запрос.Текст="ВЫБРАТЬ * ИЗ "+КлючИЗначение.Ключ + "_ВТ";
			
			Если Не ПустаяСтрока(ТекстОтбор) Тогда
				
				Запрос.Текст=СтрШаблон(Нстр("ru = '%1 ГДЕ %2'"), Запрос.Текст, ТекстОтбор);
				
				Для Каждого ПараметрПоиска ИЗ СтруктураПоиска Цикл
					
					Запрос.УстановитьПараметр(ПараметрПоиска.Ключ,ПараметрПоиска.Значение);
					
				КонецЦикла;
				
			КонецЕсли;

			Результат=Запрос.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл
				
				НоваяСтрока=ДокументОбъект[КлючИЗначение.Ключ].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрДокумент);
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ДокументОбъект.ПометкаУдаления=Ложь;
		ДокументПроведен=Ложь;
		ДокументЗаписан=Ложь;
		ЕстьОшибкиИмпорта=Ложь;
		ТекстОшибки="";
		
		Если ПравилоЗаполнения.ПроизвольныйКодПослеЗаполнения И ЗначениеЗаполнено(ПравилоЗаполнения.ПроцедураЗаполнения) Тогда
			
			Попытка
								


				Выполнить(ПравилоЗаполнения.ПроцедураЗаполнения);
				
			Исключение

				ТекстОшибки=СтрШаблон(Нстр("ru = 'Не удалось выполнить процедуру после заполнения объекта;
				|%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки,,,СтатусСообщения.Внимание);
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если ПроводитьДокументы Тогда
			
			ТекстОшибки=ЗаписатьОбъект(ДокументОбъект,РежимЗаписиДокумента.Проведение,Ложь,ДокументПроведен);
			
			Если НЕ ДокументПроведен Тогда
				
				ТекстОшибки=ЗаписатьОбъект(ДокументОбъект,РежимЗаписиДокумента.Запись,Истина,ДокументЗаписан);
				
			КонецЕсли;
			
		Иначе
			
			ТекстОшибки=ЗаписатьОбъект(ДокументОбъект,РежимЗаписиДокумента.Запись,Истина,ДокументЗаписан);
			
		КонецЕсли;
		
		Если ПустаяСтрока(ТекстОшибки) Тогда
			
			НоваяСтрока=ТаблицаОбъектов.Добавить();
			НоваяСтрока.ОбработанныйОбъектСсылка=ДокументОбъект.Ссылка;
			НоваяСтрока.ОбработкаЗавершена=ДокументПроведен;
			НоваяСтрока.ЕстьОшибкиИмпорта=Ложь;
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрДокумент);
			
		Иначе
			
			ТекстОшибки=СтрШаблон(Нстр("ru = '%1
			|Не удалось записать документ со следующими реквизитами:'"), ТекстОшибки);
			
			Для Каждого СтрРеквизит ИЗ ОбъектБД.Реквизиты Цикл
				
				Если ЗначениеЗаполнено(ДокументОбъект[СтрРеквизит.Имя]) Тогда
					
					ТекстОшибки=ТекстОшибки+"
					|"+СтрРеквизит.Синоним+": "+ДокументОбъект[СтрРеквизит.Имя];
					
				КонецЕсли;
				
			КонецЦикла;
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки,ЕстьОшибкиИмпорта);
			
			НоваяСтрока=ТаблицаОбъектов.Добавить();
			НоваяСтрока.ОбработкаЗавершена=Ложь;
			НоваяСтрока.ЕстьОшибкиИмпорта=Истина;
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрДокумент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОтразитьОбработкуТаблицыОбъектов(ТаблицаОбъектов);
	
КонецПроцедуры // ЗаполнитьПоОбъектуБД()

Функция ЗаписатьОбъект(ДокументОбъект,РежимЗаписи,ОбменДанными,ОперацияВыполнена)
	
	Попытка
	
		ДокументОбъект.ОбменДанными.Загрузка=ОбменДанными;
		ДокументОбъект.Записать(РежимЗаписи);
		ОперацияВыполнена=Истина;
		Возврат "";
			
	Исключение
		
		ОперацияВыполнена=Ложь;
		Возврат ОписаниеОшибки();
		
	КонецПопытки;
	
КонецФункции // ПровестиОбъект()  

Процедура ОбработатьСтруктуруТаблицВнешняяИБ()
	
	Если СтруктураТаблиц.Количество()=0 Тогда
		
		ДобавитьЗаписьпоСеансуЗагрузки();
		Возврат;
		
	КонецЕсли;
	
	ТекСоединениеВИБ = УправлениеСоединениямиВИБУХ.ПолучитьСоединение(ИспользуемаяИБ, 1);
		
	Если ТекСоединениеВИБ=Неопределено Тогда
		
		ДобавитьЗаписьпоСеансуЗагрузки();
		Возврат;
		
	КонецЕсли;
	
	СтруктураТаблицВИБ=ТекСоединениеВИБ.NewObject("Структура");
	КэшОбъектовВИБ=Новый Соответствие;
	
	ТабНастройкиСоответствия=ПравилоЗаполнения.НастройкиСоответствияРеквизитов.Выгрузить();
	ТабНастройкиСоответствия.Свернуть("НастройкаСоответствия");
	
	Для Каждого СтрНастройка ИЗ ТабНастройкиСоответствия Цикл
		
		СписокОтбора=Новый СписокЗначений;
		
		РеквизитыСоответствия=ПравилоЗаполнения.НастройкиСоответствияРеквизитов.НайтиСтроки(Новый Структура("НастройкаСоответствия",СтрНастройка.НастройкаСоответствия));
		
		Для Каждого СтрРеквизит ИЗ РеквизитыСоответствия Цикл
			
			МассивЭлементов=СтруктураТаблиц[СтрРеквизит.РасположениеРеквизита].ВыгрузитьКолонку(СтрРеквизит.ИмяРеквизита);
			
			Для Каждого ЭлементАналитики ИЗ МассивЭлементов Цикл
				
				Если СписокОтбора.НайтиПоЗначению(ЭлементАналитики)=Неопределено Тогда
					
					СписокОтбора.Добавить(ЭлементАналитики);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		СоответствиеОбъектов=ИнтеграцияСВнешнимиСистемамиУХ.ВыгрузитьОбъектыВВИБ(ИспользуемаяИБ,СтрНастройка.НастройкаСоответствия,,СписокОтбора,Истина);
		
		Для Каждого КлючИЗначение ИЗ СоответствиеОбъектов Цикл
			
			КэшОбъектовВИБ.Вставить(КлючИЗначение.Ключ,КлючИЗначение.Значение);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Переведем таблицы объекта на сторону ВИБ
	
	Для Каждого КлючИЗначение ИЗ СтруктураТаблиц Цикл
		
		// Создадим таблицу значений с реквизитами объекта ВИБ или его табличной части
		
		ТаблицаВИБ=ТекСоединениеВИБ.NewObject("ТаблицаЗначений");
		
		МассивСсылочные=Новый Массив;
		ТаблицаДанных=КлючИЗначение.Значение;
		
		Для Каждого Колонка ИЗ ТаблицаДанных.Колонки Цикл
			
			ТипЗначения=Колонка.ТипЗначения;
			ОписаниеТипов=Неопределено;
			
			Для Каждого ТекущийТип ИЗ ТипЗначения.Типы() Цикл
				
				Если ВРег(XMLТип(ТекущийТип).ИмяТипа)="NULL" Тогда
					
					Продолжить;
					
				ИначеЕсли ТекущийТип=Тип("Число") Тогда
					
					Разрядность=Колонка.ТипЗначения.КвалификаторыЧисла.Разрядность;
					РазрядностьДробнойЧасти=Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
					
					ОписаниеТипов=ИнтеграцияСВнешнимиСистемамиУХ.ВИБ_ПолучитьОписаниеТиповЧисла(ТекСоединениеВИБ,Разрядность,РазрядностьДробнойЧасти);
					
				ИначеЕсли ТекущийТип=Тип("Строка") Тогда
					
					ДлинаСтроки=Колонка.ТипЗначения.КвалификаторыСтроки.Длина;
					ОписаниеТипов=РаботаСОбъектамиМетаданныхВнешнийУХ.ВИБ_ПолучитьОписаниеТиповСтроки(ТекСоединениеВИБ,ДлинаСтроки);
					
				ИначеЕсли ТекущийТип=Тип("Дата") Тогда
					
					ТекЧастиДаты=Колонка.ТипЗначения.КвалификаторыДаты.ЧастиДаты;
					ОписаниеТипов=ИнтеграцияСВнешнимиСистемамиУХ.ВИБ_ПолучитьОписаниеТиповДата(ТекСоединениеВИБ,ТекЧастиДаты);
					
				ИначеЕсли ТекущийТип=Тип("Булево") Тогда
					
					ОписаниеТипов=РаботаСОбъектамиМетаданныхВнешнийУХ.ВИБ_ПолучитьОписаниеТиповБулево(ТекСоединениеВИБ);
					
				ИначеЕсли Колонка.Имя="ИсходныйОбъектСсылка" Тогда
					
					ОписаниеТипов=РаботаСОбъектамиМетаданныхВнешнийУХ.ВИБ_ПолучитьОписаниеТиповСтроки(ТекСоединениеВИБ,150);
					
				Иначе
					
					СтрНастройкаСоответствия=ПравилоЗаполнения.НастройкиСоответствияРеквизитов.НайтиСтроки(Новый Структура("РасположениеРеквизита,ИмяРеквизита",КлючИЗначение.Ключ,Колонка.Имя));
					
					Если СтрНастройкаСоответствия.Количество()>0 Тогда 
						
						ТаблицаАналитики=СтрНастройкаСоответствия[0].НастройкаСоответствия.ТипОбъектаВИБ+"."+СтрНастройкаСоответствия[0].НастройкаСоответствия.ОписаниеОбъектаВИБ.Наименование;		
						ОписаниеТипов=ИнтеграцияСВнешнимиСистемамиУХ.ВИБ_ПолучитьОписаниеТиповПоТаблицеАналитики(ТекСоединениеВИБ,ТаблицаАналитики);
						
						Если НЕ ОписаниеТипов=Неопределено Тогда
							
							МассивСсылочные.Добавить(Колонка.Имя);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ОписаниеТипов=Неопределено Тогда
				
				ТаблицаВИБ.Columns.Add(Колонка.Имя,ОписаниеТипов);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Строка ИЗ ТаблицаДанных Цикл
			
			Если ЗначениеЗаполнено(ИсходныйОбъектСсылка) И (НЕ Строка.ИсходныйОбъектСсылка=ИсходныйОбъектСсылка) Тогда
				
				Продолжить;
				
			КонецЕсли; 
			
			НоваяСтрока=ТаблицаВИБ.Add();
			
			Для Каждого Колонка ИЗ ТаблицаДанных.Колонки Цикл
				
				Если ТаблицаВИБ.Columns.Find(Колонка.Имя)=Неопределено ИЛИ 
					(Не ЗначениеЗаполнено(Строка[Колонка.Имя])) Тогда
					Продолжить;
				КонецЕсли;
				
				Если Колонка.Имя="ИсходныйОбъектСсылка" Тогда 
					
					НоваяСтрока[Колонка.Имя]=XMLСтрока(Строка[Колонка.Имя]);
					
				ИначеЕсли МассивСсылочные.Найти(Колонка.Имя)=Неопределено Тогда
					
					НоваяСтрока[Колонка.Имя]=Строка[Колонка.Имя];
					
				Иначе
					
					НоваяСтрока[Колонка.Имя]=КэшОбъектовВИБ.Получить(Строка[Колонка.Имя]);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		СтруктураТаблицВИБ.Вставить(КлючИЗначение.Ключ,ТаблицаВИБ);
		
	КонецЦикла;
	
	ЗапросВИБ=ТекСоединениеВИБ.NewObject("Запрос");
	ЗапросВИБ.TempTablesManager=ТекСоединениеВИБ.NewObject("TempTablesManager");
	
	ТекстЗапроса="";
	
	Для Каждого КлючИЗначение ИЗ СтруктураТаблицВИБ Цикл
		
		ТаблицаРеквизитов=КлючИЗначение.Значение;
			
		ТекстВыборки="";
		
		Для Каждого Колонка ИЗ ТаблицаРеквизитов.Колонки Цикл
			
			ТекстВыборки=ТекстВыборки+",
			|"+КлючИЗначение.Ключ+"."+Колонка.Имя;
			
		КонецЦикла;
		
		ТекстЗапроса=СтрШаблон(Нстр("ru = '%1
		|ВЫБРАТЬ %2 Поместить %3 ИЗ &%4 КАК %5
		|;'"), ТекстЗапроса, Сред(ТекстВыборки,2), КлючИЗначение.Ключ, КлючИЗначение.Ключ, КлючИЗначение.Ключ);
		
		ЗапросВИБ.УстановитьПараметр(КлючИЗначение.Ключ,ТаблицаРеквизитов);
		
	КонецЦикла;
	
	ТекстСоединение="";
	
	Если ПравилоЗаполнения.ПоОбъектуБД=1 Тогда
		
		// Нужно перенести данные по обработанным объектам на сторону ВИБ. Для этого необходимо выполнить преобразование
		// ссылок текущей базы в GUID, а GUIDы обработанных объектов - в ссылки внешней ИБ.
			
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ОбработанныеОбъектыБД.ИсходныйОбъектСсылка,
		|	ОбработанныеОбъектыБД.ОбработанныйОбъектСсылка
		|ИЗ
		|	РегистрСведений.ОбработанныеОбъектыБД КАК ОбработанныеОбъектыБД
		|ГДЕ
		|	ОбработанныеОбъектыБД.ИсходныйОбъектСсылка В(&МассивОбъектов)
		|	И ОбработанныеОбъектыБД.ОбработанныйОбъектСсылка <> НЕОПРЕДЕЛЕНО
		|	И ОбработанныеОбъектыБД.СеансОбменаДанными.ИспользуемаяИБ = &ИспользуемаяИБ";
				
		Запрос.УстановитьПараметр("МассивОбъектов",	СтруктураТаблиц.Шапка.ВыгрузитьКолонку("ИсходныйОбъектСсылка"));
		Запрос.УстановитьПараметр("ИспользуемаяИБ",	ИспользуемаяИБ);
				
		ТабОбработанныеОбъекты=Запрос.Выполнить().Выгрузить();
		
		ТабОбработанныеОбъектыВИБ=ТекСоединениеВИБ.NewObject("ТаблицаЗначений");
		ТабОбработанныеОбъектыВИБ.Колонки.Добавить("ИсходныйОбъектСсылка",		РаботаСОбъектамиМетаданныхВнешнийУХ.ВИБ_ПолучитьОписаниеТиповСтроки(ТекСоединениеВИБ,150));
		ТабОбработанныеОбъектыВИБ.Колонки.Добавить("ОбработанныйОбъектСсылка",	ИнтеграцияСВнешнимиСистемамиУХ.ВИБ_ПолучитьОписаниеТиповПоТаблицеАналитики(ТекСоединениеВИБ,"Документ."+ОбъектБД.Наименование));
		
		Для Каждого Строка Из ТабОбработанныеОбъекты Цикл
			
			НоваяСтрока=ТабОбработанныеОбъектыВИБ.Добавить();
			НоваяСтрока.ИсходныйОбъектСсылка=XMLСтрока(Строка.ИсходныйОбъектСсылка);
			
			НоваяСтрока.ОбработанныйОбъектСсылка=РасширениеИнтеграцииУХ.ПолучитьСсылкуПОСтрокеUUID(ТекСоединениеВИБ,"Документ",ОбъектБД.Наименование,Строка.ОбработанныйОбъектСсылка);
						
		КонецЦикла;
		
		ТекстЗапроса=ТекстЗапроса+"
		|ВЫБРАТЬ * Поместить ОбработанныеОбъектыБД ИЗ &ТабОбработанныеОбъектыВИБ КАК ТабОбработанныеОбъектыВИБ
		|;
		|ВЫБРАТЬ Шапка.*,ЕСТЬNULL(ОбработанныеОбъектыБД.ОбработанныйОбъектСсылка,Неопределено) КАК СуществующийДокумент
		|ИЗ Шапка ЛЕВОЕ СОЕДИНЕНИЕ ОбработанныеОбъектыБД КАК ОбработанныеОбъектыБД ПО Шапка.ИсходныйОбъектСсылка=ОбработанныеОбъектыБД.ИсходныйОбъектСсылка";

		ЗапросВИБ.УстановитьПараметр("ТабОбработанныеОбъектыВИБ",ТабОбработанныеОбъектыВИБ);
		
	Иначе	
		
		Для Каждого Колонка ИЗ СтруктураТаблицВИБ.Шапка.Колонки Цикл
			
			Если ОбъектБД.Реквизиты.Найти(Колонка.Имя)=Неопределено
				ИЛИ Колонка.Имя="Ссылка"
				ИЛИ Колонка.Имя="Номер"
				ИЛИ Колонка.Имя="Код" Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ТекстСоединение=ТекстСоединение+"
			|И Шапка."+Колонка.Имя+" = ОбъектыБД."+Колонка.Имя;
			
		КонецЦикла;
		
		ТекстСоединение=Сред(ТекстСоединение,3);
		
		ТекстЗапроса=ТекстЗапроса+"
		|ВЫБРАТЬ Шапка.*,ЕСТЬNULL(ОбъектыБД.Ссылка,Неопределено) КАК СуществующийДокумент
		|ИЗ Шапка ЛЕВОЕ СОЕДИНЕНИЕ Документ."+ОбъектБД.Наименование+" КАК ОбъектыБД ПО "+ТекстСоединение;
		
	КонецЕсли;
		
	ЗапросВИБ.Текст=ТекстЗапроса;
	ТаблицаДокументов=ЗапросВИБ.Выполнить().Выгрузить();
	
	СтруктураПоиска=Новый Структура;
	ТекстОтбор="";
	
	Для Каждого СтрРеквизит ИЗ ПравилоЗаполнения.РеквизитыШапкиДляСинхронизацииТЧ Цикл
		
		СтруктураПоиска.Вставить(СтрРеквизит.Имя);
		
		ТекстОтбор=СтрШаблон(Нстр("ru = '%1
		|И %2=&%3'"), ТекстОтбор, СтрРеквизит.Имя, СтрРеквизит.Имя);
		
	КонецЦикла;
	
	ТекстОтбор=Сред(ТекстОтбор,3);
	ТаблицаОбъектов=Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("ОбработанныйОбъектСсылка");
	ТаблицаОбъектов.Колонки.Добавить("ИсходныйОбъектНомер");
	ТаблицаОбъектов.Колонки.Добавить("ИсходныйОбъектКод");
	ТаблицаОбъектов.Колонки.Добавить("ИсходныйОбъектНаименование");
	ТаблицаОбъектов.Колонки.Добавить("ИсходныйОбъектДата");
	ТаблицаОбъектов.Колонки.Добавить("ИсходныйОбъектСсылка");
	ТаблицаОбъектов.Колонки.Добавить("ЕстьОшибкиИмпорта");
	ТаблицаОбъектов.Колонки.Добавить("ОбработкаЗавершена");
	
	РеквизитыДляЗаполненияШапки=ПолучитьСтрокуРеквизитовДляЗаполненияШапки();
	
	Для Каждого СтрДокумент ИЗ ТаблицаДокументов Цикл
		
		ОбработанныйОбъектСсылка=Неопределено;
		
		Если СтрДокумент.СуществующийДокумент=Неопределено Тогда
			
			ДокументОбъект=ТекСоединениеВИБ.Documents[ОбъектБД.Наименование].СоздатьДокумент();
			
		Иначе
			
			ДокументОбъект=СтрДокумент.СуществующийДокумент.ПолучитьОбъект();
			
			Если ДокументОбъект=Неопределено Тогда // Возможно, удален объект из внешней базы
				
				Продолжить;
				
			Иначе
				
				ОбработанныйОбъектСсылка=РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLString(ТекСоединениеВИБ,ДокументОбъект.Ссылка);

			КонецЕсли;	
			
		КонецЕсли;
		
		РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьЗаполнитьЗначенияСвойств(ТекСоединениеВИБ,ДокументОбъект,СтрДокумент,РеквизитыДляЗаполненияШапки);
		
		Если Не ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
			
			ДокументОбъект.Дата=ПериодОтчета.ДатаОкончания;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокументОбъект.Номер) Тогда
			
			ДокументОбъект.УстановитьНовыйНомер(Организация.Префикс);
			
		КонецЕсли;
		
		РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьЗаполнитьЗначенияСвойств(ТекСоединениеВИБ,СтруктураПоиска,СтрДокумент);
		
		Для Каждого КлючИЗначение ИЗ СтруктураТаблицВИБ Цикл
			
			Если КлючИЗначение.Ключ="Шапка" Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект[КлючИЗначение.Ключ].Очистить();
			
			ЗапросВИБ.Текст=СтрШаблон(Нстр("ru = 'ВЫБРАТЬ * ИЗ %1'"), КлючИЗначение.Ключ);
			
			Если Не ПустаяСтрока(ТекстОтбор) Тогда
				
				ЗапросВИБ.Текст=СтрШаблон(Нстр("ru = '%1 ГДЕ %2'"), ЗапросВИБ.Текст, ТекстОтбор);
				
				Для Каждого ПараметрПоиска ИЗ СтруктураПоиска Цикл
					
					ЗапросВИБ.УстановитьПараметр(ПараметрПоиска.Ключ,ПараметрПоиска.Значение);
					
				КонецЦикла;
				
			КонецЕсли;
						
			Результат=ЗапросВИБ.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл
				
				НоваяСтрока=ДокументОбъект[КлючИЗначение.Ключ].Добавить();
				РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьЗаполнитьЗначенияСвойств(ТекСоединениеВИБ,НоваяСтрока,Результат);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ДокументОбъект.ПометкаУдаления=Ложь;
		ДокументПроведен=Ложь;
		ДокументЗаписан=Ложь;
		ТекстОшибки="";
		
		Если ПравилоЗаполнения.ПроизвольныйКодПослеЗаполнения И ЗначениеЗаполнено(ПравилоЗаполнения.ПроцедураЗаполнения) Тогда
			
			Попытка
								
				Выполнить(ПравилоЗаполнения.ПроцедураЗаполнения);
				
			Исключение

				ТекстОшибки=СтрШаблон(Нстр("ru = 'Не удалось выполнить процедуру после заполнения объекта;
				|%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки,,,СтатусСообщения.Внимание);
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если ПроводитьДокументы Тогда
			
			ТекстОшибки=ЗаписатьОбъект(ДокументОбъект,ТекСоединениеВИБ.DocumentWriteMode.Posting,Ложь,ДокументПроведен);
			
			Если НЕ ДокументПроведен Тогда
				
				ТекстОшибки=ЗаписатьОбъект(ДокументОбъект,ТекСоединениеВИБ.DocumentWriteMode.Write,Истина,ДокументЗаписан);
				
			КонецЕсли;
		
		Иначе
			
			ТекстОшибки=ЗаписатьОбъект(ДокументОбъект,ТекСоединениеВИБ.DocumentWriteMode.Write,Истина,ДокументЗаписан);
			
		КонецЕсли;
		
		Если ПустаяСтрока(ТекстОшибки) Тогда
			
			НоваяСтрока=ТаблицаОбъектов.Добавить();
			
			Если ПравилоЗаполнения.ПоОбъектуБД=1 Тогда // Восстановим ссылку исходного объекта текущей ИБ
				
				ТекUUID=Новый УникальныйИдентификатор(СтрДокумент.ИсходныйОбъектСсылка);
				НоваяСтрока.ИсходныйОбъектСсылка=Документы[ПравилоЗаполнения.ИсходныйОбъектБД.Наименование].GetRef(ТекUUID);
				
			КонецЕсли;
			
			НоваяСтрока.ОбработанныйОбъектСсылка=РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLString(ТекСоединениеВИБ,ДокументОбъект.Ссылка);
			НоваяСтрока.ОбработкаЗавершена=ДокументПроведен;
			НоваяСтрока.ЕстьОшибкиИмпорта=Ложь;
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрДокумент,,"ИсходныйОбъектСсылка");
			
		Иначе
			
			Если ПравилоЗаполнения.ПоОбъектуБД=1 Тогда // Восстановим ссылку исходного объекта текущей ИБ
				
				ТекUUID=Новый УникальныйИдентификатор(СтрДокумент.ИсходныйОбъектСсылка);
				ДокументСсылка=Документы[ПравилоЗаполнения.ИсходныйОбъектБД.Наименование].GetRef(ТекUUID);
				
				ТекстОшибки=СтрШаблон(Нстр("ru = '%1
				|Не удалось записать документ на основании документа текущей ИБ %2: '"), ТекстОшибки, ДокументСсылка);
				
			Иначе
				
				ТекстОшибки=СтрШаблон(Нстр("ru = '%1
				|Ошибка записи документа: '"), ТекстОшибки);				
				
			КонецЕсли;
			
			ТекстОшибки=ТекстОшибки+ОписаниеОшибки();					
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
			
			НоваяСтрока=ТаблицаОбъектов.Добавить();
			
			Если ПравилоЗаполнения.ПоОбъектуБД=1 Тогда // Восстановим ссылку исходного объекта текущей ИБ
				
				ТекUUID=Новый УникальныйИдентификатор(СтрДокумент.ИсходныйОбъектСсылка);
				НоваяСтрока.ИсходныйОбъектСсылка=Документы[ПравилоЗаполнения.ИсходныйОбъектБД.Наименование].GetRef(ТекUUID);
				
			КонецЕсли;
			
			НоваяСтрока.ОбработкаЗавершена=Ложь;
			НоваяСтрока.ЕстьОшибкиИмпорта=Истина;
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрДокумент,,"ИсходныйОбъектСсылка");
			
			Если ЗначениеЗаполнено(ОбработанныйОбъектСсылка) Тогда
				
				НоваяСтрока.ОбработанныйОбъектСсылка=ОбработанныйОбъектСсылка;
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОтразитьОбработкуТаблицыОбъектов(ТаблицаОбъектов);
	
КонецПроцедуры // ЗаполнитьПоОбъектуБД()

/////////////////////////////////////////////////////////////////////////////////////
// Заполнение результирующего объекта на основании исходного

Процедура ЗаполнитьОбъектПоИсточнику() Экспорт
	
	ПолучитьОбъектДляОбработкиПоИсходному();
	
	Если ОбъектБД.Наименование="ОтражениеФактическихДанныхБюджетирования" Тогда
				
		ДокументОбъект.БюджетДвиженияДенежныхСредств.Очистить();
		ДокументОбъект.БюджетДоходовИРасходов.Очистить();
		ДокументОбъект.БюджетДвиженияРесурсов.Очистить();
		
		ДокументОбъект.ДокументБД		= Справочники.ДокументыБД.НайтиПоНаименованию(ИсходныйОбъектСсылка.Метаданные().Имя,,,ПравилоЗаполнения.ТипБД);
		
		ДокументОбъект.ИсходныйДокумент	= ИсходныйОбъектСсылка;
		ДокументОбъект.ПравилоЗаполнения   = ПравилоЗаполнения;
		ДокументОбъект.ИспользуемаяИБ   = ИспользуемаяИБ;
		
	КонецЕсли;
	
	// Заполняем шапку документа
	
	Запрос=Новый Запрос;
	ТекстПоляШапки="";
	
	Для Каждого Строка ИЗ ПравилоЗаполнения.ИсточникДляЗаполненияШапки.ПравилаИспользованияПолейЗапроса Цикл
		
		Если Строка.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы Тогда
			
			ТекстПоляШапки=ТекстПоляШапки+",
			|ДокументСсылка."+Строка.Поле+" КАК "+Строка.КодАналитики;
			
		ИначеЕсли Строка.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение Тогда
			
			ДокументОбъект[Строка.КодАналитики]=Строка.ФиксированноеЗначение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстПоляШапки) Тогда
		
		Запрос.Текст="ВЫБРАТЬ "+Сред(ТекстПоляШапки,2)+"
		|ИЗ Документ."+ИсходныйОбъектСсылка.Метаданные().Имя+" КАК ДокументСсылка
		|Где ДокументСсылка.Ссылка=&Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",ИсходныйОбъектСсылка);
		
		Результат=Запрос.Выполнить().Выбрать();
		Результат.Следующий();
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект,Результат);
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////
	// Заполняем табличные части документа
	
	Для Каждого СтрокаТЧ ИЗ ПравилоЗаполнения.ИсточникиДляЗаполненияТЧ Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ИсточникДанных) И СтрокаТЧ.Используется Тогда
			
			ЗаполнитьТЧОбъектаПоИсточнику(ДокументОбъект[СтрокаТЧ.ТабличнаяЧасть.Имя],СтрокаТЧ.ИсточникДанных,ИсходныйОбъектСсылка.Метаданные().Имя);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ЕстьОшибки			= Ложь;
	ОбработкаЗавершена	= Ложь;
	
	Если ПравилоЗаполнения.ПроизвольныйКодПослеЗаполнения И ЗначениеЗаполнено(ПравилоЗаполнения.ПроцедураЗаполнения) Тогда
		
		Попытка
			
			Выполнить(ПравилоЗаполнения.ПроцедураЗаполнения);
			
		Исключение
			
			ТекстОшибки=СтрШаблон(Нстр("ru = 'Не удалось выполнить процедуру после заполнения объекта;
			|%1'"),ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки,,,СтатусСообщения.Внимание);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Попытка
		
		Если ПроводитьДокументы Тогда
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ОбработкаЗавершена=Истина;
			
		Иначе
			
			Если ДокументОбъект.Проведен Тогда
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				
			Иначе
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
			
			ТекстОшибки=СтрШаблон(Нстр("ru = 'Не удалось создать на основании объекта %1 объект вида %2 по процедуре правила %3:
			|%4'"), ИсходныйОбъектСсылка, ОбъектБД, ПравилоЗаполнения, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Иначе
			
			ТекстОшибки=СтрШаблон(Нстр("ru = 'Не удалось создать на основании объекта %1 обновить объект %2 по процедуре правила %3:
			|%4'"), ИсходныйОбъектСсылка, ДокументОбъект, ПравилоЗаполнения, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецЕсли;
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки,ЕстьОшибки,,СтатусСообщения.Внимание);
		
	КонецПопытки;
	
	ОтразитьОбработкуОбъектаПоСсылке(ДокументОбъект.Ссылка, ЕстьОшибки);

КонецПроцедуры // ЗаполнитьОбъектПоИсточнику()

Процедура ЗаполнитьТЧОбъектаПоИсточнику(ТабличнаяЧасть,ИсточникДанных,НаименованиеДокумента)
	
	СтруктураФиксированныхЗначений=Новый Структура;
	Запрос=Новый Запрос;
	ТекстПоляТЧ="";
	
	ТабличнаяЧасть.Очистить();

	Для Каждого Строка ИЗ ИсточникДанных.ПравилаИспользованияПолейЗапроса Цикл
		
		Если Строка.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы Тогда
			
			ТекстПоляТЧ=ТекстПоляТЧ+",
			|ДокументТабличнаяЧасть."+Строка.Поле+" КАК "+Строка.КодАналитики;
			
		ИначеЕсли Строка.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение Тогда
			
			СтруктураФиксированныхЗначений.Вставить(Строка.КодАналитики,Строка.ФиксированноеЗначение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстПоляТЧ) Тогда
		
		Если ЗначениеЗаполнено(ИсточникДанных.ТабличнаяЧастьБД) Тогда
			
			Запрос.Текст="ВЫБРАТЬ "+Сред(ТекстПоляТЧ,2)+"
			|ИЗ Документ."+НаименованиеДокумента+"."+ИсточникДанных.ТабличнаяЧастьБД.Имя+" КАК ДокументТабличнаяЧасть
			|Где ДокументТабличнаяЧасть.Ссылка=&Ссылка";
			
		Иначе
			
			Запрос.Текст="ВЫБРАТЬ "+Сред(ТекстПоляТЧ,2)+"
			|ИЗ Документ."+НаименованиеДокумента+" КАК ДокументТабличнаяЧасть
			|Где ДокументТабличнаяЧасть.Ссылка=&Ссылка";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Ссылка",ИсходныйОбъектСсылка);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			НоваяСтрока=ТабличнаяЧасть.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураФиксированныхЗначений);
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
			
		КонецЦикла;
		
	ИначеЕсли СтруктураФиксированныхЗначений.Количество()>0 Тогда
		
		НоваяСтрока=ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураФиксированныхЗначений);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТЧОтраженияФактаПоИсточнику()

Процедура ЗаполнитьПоПроизвольнымИсточникам()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОбъектовБД.Ссылка,
	|	ПоказателиОбъектовБД.Код,
	|	ПоказателиОбъектовБД.Наименование,
	|	ПоказателиОбъектовБД.ТипЗначения,
	|	ПоказателиОбъектовБД.ТабличнаяЧастьБД,
	|	ВЫБОР
	|		КОГДА ПоказателиОбъектовБД.ТипЗначения = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийПоказателейОтчетов.Число)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЧисловойПоказатель,
	|	ВЫБОР
	|		КОГДА ПоказателиОбъектовБД.ТабличнаяЧастьБД = ЗНАЧЕНИЕ(Справочник.ТабличныеЧастиБД.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПоказательШапки
	|ИЗ
	|	Справочник.ПоказателиОбъектовБД КАК ПоказателиОбъектовБД
	|ГДЕ
	|	ПоказателиОбъектовБД.Владелец = &ДокументБД
	|	И НЕ ПоказателиОбъектовБД.ДляЗаполненияШапки
	|	И НЕ ПоказателиОбъектовБД.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДокументБД",ОбъектБД);
	
	мПоказатели=Запрос.Выполнить().Выгрузить();
	мПоказатели.Колонки.Добавить("Валютный",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	мПоказатели.Колонки.Добавить("ПересчитыватьВалютнуюСумму",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	мПоказатели.Колонки.Добавить("НеФинансовый",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	мПоказатели.Колонки.Добавить("ДанныеРасчета");
	мПоказатели.Колонки.Добавить("ВидИтога");
	мПоказатели.Колонки.Добавить("Значение");
	мПоказатели.Колонки.Добавить("СохраненныеДанныеАктуальны",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	мПоказатели.Колонки.Добавить("ГруппаРаскрытия",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ГруппыРаскрытия"));
	мПоказатели.Колонки.Добавить("ЧислоАналитикГруппыРаскрытия",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(3));
	мПоказатели.Колонки.Добавить("ЗначениеИзменено", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	мПоказатели.ЗаполнитьЗначения(Перечисления.ВидыИтоговПоказателя.НеРассчитывается,"ВидИтога");
	
	мПоказателиРаскрытия = Новый ТаблицаЗначений;
	мПоказателиРаскрытия.Колонки.Добавить("Показатель",Новый ОписаниеТипов("СправочникСсылка.ПоказателиОбъектовБД"));
	мПоказателиРаскрытия.Колонки.Добавить("АналитикаВалюта",Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	мПоказателиРаскрытия.Колонки.Добавить("Значение");
	мПоказателиРаскрытия.Колонки.Добавить("ЗначениеВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	мПоказателиРаскрытия.Колонки.Добавить("ГруппаРаскрытия", Новый ОписаниеТипов("СправочникСсылка.ГруппыРаскрытия"));
	мПоказателиРаскрытия.Колонки.Добавить("ЧислоАналитикГруппыРаскрытия", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1));
	мПоказателиРаскрытия.Колонки.Добавить("ИтоговоеЗначение", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	мПоказателиРаскрытия.Колонки.Добавить("Техническая", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	мПоказателиРаскрытия.Колонки.Добавить("ЗначениеИзменено", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());

	мСоответствиеДляПоискаПоКоду=Новый Соответствие;
	мСоответствиеДляПоискаПоСсылке=Новый Соответствие;
	
	СоответствиеАналитик=Новый ТаблицаЗначений;
	СоответствиеАналитик.Колонки.Добавить("Показатель");
	СоответствиеАналитик.Колонки.Добавить("ИмяРеквизита");
	СоответствиеАналитик.Колонки.Добавить("КодАналитики");
	
	ЛогИзмененийПоказателей = Новый ТаблицаЗначений;
	ЛогИзмененийПоказателей.Колонки.Добавить("Ссылка",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОбъектовБД"));
	ЛогИзмененийПоказателей.Колонки.Добавить("НомерОперации", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));
	ЛогИзмененийПоказателей.Колонки.Добавить("Значение",мПоказатели.Колонки.Значение.ТипЗначения);
	ЛогИзмененийПоказателей.Колонки.Добавить("ПервоеИзменение", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ЛогИзмененийПоказателей.Колонки.Добавить("ЧисловойПоказатель", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ЛогИзмененийПоказателей.Индексы.Добавить("Ссылка");
	ЛогИзмененийПоказателей.Индексы.Добавить("НомерОперации");
	
	ЛогИзмененийРаскрытийПоказателей = Новый ТаблицаЗначений;
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("Показатель",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОбъектовБД"));
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("АналитикаВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Валюты"));
	
	ТипАналитики=Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип;
	
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("НомерОперации", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("НачальноеЗначение");
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("НачальноеЗначениеВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("Значение",мПоказателиРаскрытия.Колонки.Значение.ТипЗначения);
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("ЗначениеВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("ПервоеИзменение", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("ЧисловойПоказатель", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("ДобавлениеАналитики", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("СторнированиеАналитики", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("ЧислоАналитикГруппыРаскрытия", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1));
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("Техническая", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("ИтоговоеЗначение", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("ИндексАналитики", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	
	Показатели=Новый Структура;
	
	МаксЧислоРеквизитов=0;
	МассивРеквизитов=ПравилоЗаполнения.РеквизитыШапкиДляСинхронизацииТЧ.ВыгрузитьКолонку("Имя");
	
	Для Каждого СтрПоказатель ИЗ мПоказатели Цикл
		
		ЧислоАналитикГруппыРаскрытия=МассивРеквизитов.Количество();
		
		Если ЗначениеЗаполнено(СтрПоказатель.ТабличнаяЧастьБД) Тогда
			
			Для Каждого СтрРеквизит ИЗ СтрПоказатель.Ссылка.Реквизиты Цикл
				
				Если МассивРеквизитов.Найти(СтрРеквизит.Имя)=Неопределено Тогда
					
					ЧислоАналитикГруппыРаскрытия=ЧислоАналитикГруппыРаскрытия+1;
					
				КонецЕсли;
				
			КонецЦикла;
					
			СтрПоказатель.ЧислоАналитикГруппыРаскрытия=ЧислоАналитикГруппыРаскрытия;
			
			Если СтрПоказатель.ЧислоАналитикГруппыРаскрытия>МаксЧислоРеквизитов Тогда
				
				МаксЧислоРеквизитов=СтрПоказатель.ЧислоАналитикГруппыРаскрытия;
				
			КонецЕсли;
			
		Иначе
			
			СтрПоказатель.ЧислоАналитикГруппыРаскрытия=ЧислоАналитикГруппыРаскрытия;
			
		КонецЕсли;
		
		Показатели.Вставить(СтрПоказатель.Код);
		
	КонецЦикла;
	
	ЧислоДопАналитик=МаксЧислоРеквизитов+ПравилоЗаполнения.РеквизитыШапкиДляСинхронизацииТЧ.Количество();	
	ЧислоДопАналитик=?(ЧислоДопАналитик<ПараметрыСеанса.ЧислоДопАналитик,ПараметрыСеанса.ЧислоДопАналитик,ЧислоДопАналитик);
	
	Для Индекс=1 По ЧислоДопАналитик Цикл
		
		мПоказателиРаскрытия.Колонки.Добавить("Аналитика"+Индекс);
		мПоказатели.Колонки.Добавить("ВидАналитики"+Индекс);
				
		ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("Аналитика"+Индекс,ТипАналитики);
		
	КонецЦикла;
	
	Для Каждого Строка ИЗ мПоказатели Цикл
		
		Для Индекс=1 ПО Строка.ЧислоАналитикГруппыРаскрытия Цикл
			
			Строка["ВидАналитики"+Индекс]=ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПриходРасход;
			
		КонецЦикла;
		
		мСоответствиеДляПоискаПоКоду.Вставить(Строка.Код,Строка);
		мСоответствиеДляПоискаПоСсылке.Вставить(Строка.Ссылка,Строка);
		
	КонецЦикла;
	
	мЗначенияОперандов=мПоказателиРаскрытия.СкопироватьКолонки();
	мЗначенияОперандов.Колонки.Добавить("КодОперанда");
	мЗначенияОперандов.Колонки.Добавить("ИтогПоПоказателю",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());	
		
	СтруктураОбъекта=ПодготовитьСтруктуруПеременныхДляРасчета();
	
	ДанныеОбъекта=ОбщегоНазначенияУХ.ПолучитьСтруктуруРеквизитовОбъекта(ЭтотОбъект,СтруктураОбъекта);
	ДанныеОбъекта.Вставить("ЧислоДопАналитик",		ЧислоДопАналитик);
	ДанныеОбъекта.Вставить("СоответствиеАналитик",	СоответствиеАналитик);
	ДанныеОбъекта.Вставить("МаксАналитикОтчета",	0);
	ДанныеОбъекта.Вставить("МаксАналитикПоказателя",ЧислоДопАналитик);

	ДанныеОбъекта.Вставить("ДокументОбъект",ЭтотОбъект);
	
	УправлениеОтчетамиУХ.ОбработатьПоПараметрическойНастройке(ДанныеОбъекта,Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение);
	
	// Формирование объектов
	
	ТаблицаШапки=СтруктураТаблиц.Шапка;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТабличныеЧастиБД.Ссылка,
	|	ТабличныеЧастиБД.Имя
	|ИЗ
	|	Справочник.ТабличныеЧастиБД КАК ТабличныеЧастиБД
	|ГДЕ
	|	ТабличныеЧастиБД.Владелец = &Владелец
	|	И НЕ ТабличныеЧастиБД.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец",ОбъектБД);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СтруктураТаблиц.Вставить(Результат.Имя,ПолучитьТаблицуБД(Результат.Ссылка,ДанныеОбъекта));
		
	КонецЦикла;
	
	ПоказателиШапки=мПоказатели.Скопировать(Новый Структура("ПоказательШапки",Истина));
	
	ТаблицаШапки=СтруктураТаблиц.Шапка;
	
	Для Каждого СтрПоказатель ИЗ ПоказателиШапки Цикл
		
		Если ТаблицаШапки.Колонки.Найти(СтрПоказатель.Наименование)=Неопределено Тогда
			
			ТаблицаШапки.Колонки.Добавить(СтрПоказатель.Наименование,ОбщегоНазначенияУХ.ПолучитьОписаниеТипаПоТипуПоказателя(СтрПоказатель.ТипЗначения));
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПоиска=Новый Структура;
	
	ИндексАналитики=0;
	СтруктураПолей=Новый Структура;
	
	Для Каждого СтрРеквизит ИЗ ПравилоЗаполнения.РеквизитыШапкиДляСинхронизацииТЧ Цикл
		
		ИндексАналитики=ИндексАналитики+1;
		СтруктураПолей.Вставить("Аналитика"+ИндексАналитики,СтрРеквизит.Имя);
			
	КонецЦикла;
	
	Для Каждого Строка ИЗ ТаблицаШапки Цикл
		
		СтруктураПоиска=Новый Структура;
		
		Для Каждого КлючИЗначение ИЗ СтруктураПолей Цикл
			
			СтруктураПоиска.Вставить(КлючИЗначение.Ключ,Строка[КлючИЗначение.Значение]);
			
		КонецЦикла;
				
		Для Каждого СтрПоказатель ИЗ ПоказателиШапки Цикл
			
			СтруктураПоиска.Вставить("Показатель",СтрПоказатель.Ссылка);
			МассивПоказателей=ДанныеОбъекта.мПоказателиРаскрытия.НайтиСтроки(СтруктураПоиска);
			
			Если МассивПоказателей.Количество()>0 Тогда
				
				Строка[СтрПоказатель.Наименование]=МассивПоказателей[0].Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
				
	Если ОбластьГенерации=Перечисления.ОбластиГенерацииОбъектов.ТекущаяИБ Тогда
		
		ОбработатьСтруктуруТаблицТекущаяИБ();
		
	Иначе
		
		ОбработатьСтруктуруТаблицВнешняяИБ();
		
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьПоПроизвольнымИсточникам()

Функция ПолучитьТаблицуБД(ТабличнаяЧастьБД,ДанныеОбъекта)
	
	ПоказателиКолонки=ДанныеОбъекта.мПоказатели.Скопировать(Новый Структура("ТабличнаяЧастьБД",ТабличнаяЧастьБД));
	
	Если ПоказателиКолонки.Количество()=0 Тогда
		
		ДобавитьЗаписьпоСеансуЗагрузки();
		Возврат Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	ЕстьНечисловыеПоказатели=Ложь;
	ЕстьЧисловыеПоказатели=Ложь;
	
	ПоказателиГруппы=Новый Соответствие;
	
	ТаблицаРаскрытияГруппа = Новый ТаблицаЗначений;
	ТаблицаРаскрытияГруппа.Колонки.Добавить("Показатель",Новый ОписаниеТипов("СправочникСсылка.ПоказателиОбъектовБД"));
	ТаблицаРаскрытияГруппа.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка, Число, Булево, Дата", Новый КвалификаторыЧисла(18, 5), Новый КвалификаторыСтроки(500), Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	СоответствиеПолей=Новый Соответствие;
	
	ИндексАналитики=0;
	
	Для Каждого РеквизитСинхронизации ИЗ ПравилоЗаполнения.РеквизитыШапкиДляСинхронизацииТЧ Цикл
				
		ИндексАналитики=ИндексАналитики+1;
		ТаблицаРаскрытияГруппа.Колонки.Добавить("Аналитика"+ИндексАналитики,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповИзСтрокиТипов(РеквизитСинхронизации.ТипДанных));
		
		СоответствиеПолей.Вставить("Аналитика"+ИндексАналитики,РеквизитСинхронизации.Имя);
		
	КонецЦикла;
	
	Для Каждого СтрРеквизит ИЗ ПоказателиКолонки[0].Ссылка.Реквизиты Цикл
		
		Если СтрРеквизит.Имя="НомерСтроки" 
			ИЛИ СтрРеквизит.Имя="Ссылка"  Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТипЗначенияКолонки=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповИзСтрокиТипов(СтрРеквизит.ТипДанных);
		
		Если НЕ ТипЗнч(ТипЗначенияКолонки)=Тип("ОписаниеТипов") Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ИндексАналитики=ИндексАналитики+1;
		ТаблицаРаскрытияГруппа.Колонки.Добавить("Аналитика"+ИндексАналитики,ТипЗначенияКолонки);
		
		СоответствиеПолей.Вставить("Аналитика"+ИндексАналитики,СтрРеквизит.Имя);
		
	КонецЦикла;

	Для Каждого Пок Из ПоказателиКолонки Цикл
		
		Если Пок.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			ЕстьЧисловыеПоказатели=Истина;
		Иначе
			ЕстьНечисловыеПоказатели=Истина;
		КонецЕсли;
		
		ПоказателиГруппы.Вставить(Пок.Ссылка,1);
		
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст="
	|ВЫБРАТЬ
	|ПоказателиКолонки.Ссылка,
	|ПоказателиКолонки.Код,
	|ВЫБОР КОГДА ПоказателиКолонки.ТипЗначения=&ТипЗначенияЧисло Тогда Истина Иначе Ложь Конец КАК ЧисловойПоказатель
	|ПОМЕСТИТЬ ПоказателиКолонки
	|ИЗ &ПоказателиКолонки КАК ПоказателиКолонки
	|;
	|ВЫБРАТЬ *
	|ПОМЕСТИТЬ мПоказателиРаскрытия
	|ИЗ &мПоказателиРаскрытия КАК мПоказателиРаскрытия";
	
	//2 - Переносим значения
	Для каждого Стр из ДанныеОбъекта.мПоказателиРаскрытия Цикл
		
		Если ПоказателиГруппы.Получить(Стр.Показатель)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока=ТаблицаРаскрытияГруппа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр,"Показатель,Значение");
		
		Для  Инд = 1 По ИндексАналитики Цикл
			
			НоваяСтрока["Аналитика" + Инд] = Стр["Аналитика" + Инд];
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПоказателиКолонки",		ПоказателиКолонки);
	Запрос.УстановитьПараметр("мПоказателиРаскрытия", 	ТаблицаРаскрытияГруппа);
	Запрос.УстановитьПараметр("ТипЗначенияЧисло",		Перечисления.ТипыЗначенийПоказателейОтчетов.Число);
	
	Запрос.Выполнить();
	
	ТекстАналитики="";
	ТекстГруппировка="";
	
	СтруктураОтбора=Новый Структура;
	
	ТаблицаРаскрытия=Новый ТаблицаЗначений;
			
	Для Инд = 1 По ИндексАналитики Цикл
				
		ТекстАналитики=СтрШаблон(Нстр("ru = '%1,
		|Аналитика%2 КАК Аналитика%3'"), ТекстАналитики, Инд, Инд);
			                                                                                                                              //НаименованиеАналитики
		ТаблицаРаскрытия.Колонки.Добавить("Аналитика"+Инд,ТаблицаРаскрытияГруппа.Колонки["Аналитика"+Инд].ТипЗначения);
		
		ТекстГруппировка=ТекстГруппировка+","+"Аналитика"+Инд;
		СтруктураОтбора.Вставить("Аналитика"+Инд);
				
	КонецЦикла;
		
	Для Каждого Показатель ИЗ ПоказателиКолонки Цикл
					
		ТаблицаРаскрытия.Колонки.Вставить(ТаблицаРаскрытия.Колонки.Количество(),Показатель.Код,КэшируемыеПроцедурыУХ.ПолучитьОписаниеТиповПоТипуЗначения(Показатель.ТипЗначения,18,5));
							
	КонецЦикла;
						
	ТекстИтоговогоЗапроса=Сред(ТекстАналитики,2)+",
	|ПоказателиКолонки.Код,
	|ПоказателиКолонки.ЧисловойПоказатель
	|ПОМЕСТИТЬ ТабРаскрытиеЧисловых
	|ИЗ мПоказателиРаскрытия КАК мПоказателиРаскрытия
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоказателиКолонки КАК ПоказателиКолонки
	|ПО мПоказателиРаскрытия.Показатель=ПоказателиКолонки.Ссылка
	|ГДЕ #ПоказателиКолонки.ЧисловойПоказатель";
	
	ПризнакОшибки = Ложь;
	
	Если ЕстьЧисловыеПоказатели Тогда
		
		ЗначениеДелителя=1;
		
		ТекстИтоговогоЗапросаЧисло=СтрЗаменить(ТекстИтоговогоЗапроса,"#","");
		
		
		ТекстИтоговогоЗапросаЧисло=СтрЗаменить(ТекстИтоговогоЗапросаЧисло,"ПОМЕСТИТЬ ТабРаскрытиеЧисловых","");
		Запрос.Текст="ВЫБРАТЬ
		|мПоказателиРаскрытия.Показатель,
		|ВЫРАЗИТЬ (мПоказателиРаскрытия.Значение КАК Число (18,5)) КАК Значение,";
		
		Запрос.Текст=Запрос.Текст+ТекстИтоговогоЗапросаЧисло;
		
		ТабРаскрытиеЧисловых=Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрРаскрытие ИЗ ТабРаскрытиеЧисловых Цикл
			
			ТекЗначение = СтрРаскрытие.Значение;
			
		КонецЦикла;
		
		// Получим развернутую таблицу числовых значений
		Запрос.Текст="ВЫБРАТЬ *
		|ПОМЕСТИТЬ ТабРаскрытиеЧисловых
		|ИЗ &ТабРаскрытиеЧисловых КАК ТабРаскрытиеЧисловых
		|;";
		
		Запрос.УстановитьПараметр("ТабРаскрытиеЧисловых",ТабРаскрытиеЧисловых);
		
		Запрос.Текст=СтрШаблон(Нстр("ru = '%1
		|ВЫБРАТЬ'"), Запрос.Текст);
		
		ТекстСумма="";
		Для Каждого Показатель ИЗ ПоказателиКолонки Цикл
			
			Если НЕ Показатель.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
				Продолжить;
			КонецЕсли;
			
			Запрос.Текст=Запрос.Текст+"
			|ВЫБОР КОГДА ТабРаскрытиеЧисловых.Код=&"+Показатель.Код+"
			|ТОГДА ТабРаскрытиеЧисловых.Значение
			|ИНАЧЕ 0 КОНЕЦ КАК "+Показатель.Код+",";
			
			ТекстСумма=СтрШаблон(Нстр("ru = '%1
			|СУММА(%2) КАК %3,'"), ТекстСумма, Показатель.Код, Показатель.Код);
			
			Запрос.УстановитьПараметр(Показатель.Код,Показатель.Код);
			
		КонецЦикла;
		
		Запрос.Текст=Запрос.Текст+Сред(ТекстАналитики,2)+"
		|ПОМЕСТИТЬ ТабРаскрытиеСвод
		|ИЗ ТабРаскрытиеЧисловых КАК ТабРаскрытиеЧисловых
		|;
		|ВЫБРАТЬ"+ТекстСумма+Сред(ТекстАналитики,2)+"
		|ИЗ ТабРаскрытиеСвод КАК ТабРаскрытиеСвод
		|СГРУППИРОВАТЬ ПО "+Сред(ТекстГруппировка,2);
		
		ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(),ТаблицаРаскрытия);
		
	КонецЕсли;  // Если ЕстьЧисловыеПоказатели 	
	
	Если ЕстьНечисловыеПоказатели Тогда
		
		Если ЕстьЧисловыеПоказатели Тогда
			
			Запрос.Текст="УНИЧТОЖИТЬ ТабРаскрытиеЧисловых";
			Запрос.Выполнить();
			
			Для Каждого КлючИЗначение ИЗ СтруктураОтбора Цикл
				ТаблицаРаскрытия.Индексы.Добавить(КлючИЗначение.Ключ);
			КонецЦикла;
			
		КонецЕсли;
		
		Запрос.Текст="ВЫБРАТЬ
		|мПоказателиРаскрытия.Показатель,
		|мПоказателиРаскрытия.Значение КАК Значение,"+СтрЗаменить(ТекстИтоговогоЗапроса,"#","НЕ ")+"
		|;
		|ВЫБРАТЬ * ИЗ ТабРаскрытиеЧисловых";
		
		Запрос.УстановитьПараметр("ТипЗначения",Перечисления.ТипыЗначенийПоказателейОтчетов.Число);
		Стр=Запрос.Выполнить().Выбрать();
		
		// заполняем матрицу раскрытий значениями
		Пока Стр.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбора,Стр);
			
			РезультатПоиска = ТаблицаРаскрытия.НайтиСтроки(СтруктураОтбора);
			
			Если РезультатПоиска.Количество() = 0 Тогда
				НовСтр = ТаблицаРаскрытия.Добавить();
				//ЗаполнитьЗначенияСвойств(НовСтр, СтруктураОтбора);
				ЗаполнитьЗначенияСвойств(НовСтр, Стр);
				НовСтр[Стр.Код] = Стр.Значение;
			Иначе
				РезультатПоиска[0][Стр.Код] = Стр.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого КлючИЗначение ИЗ СтруктураОтбора Цикл
			ТаблицаРаскрытия.Индексы.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
		
	Иначе
		
		Для Каждого КлючИЗначение ИЗ СтруктураОтбора Цикл
			ТаблицаРаскрытия.Индексы.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаРаскрытия.Колонки.Добавить("ID", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ИндексРаскрытия = 0; // Вводим идентификатор строки в таблице раскрытия для однозначного определения поля 
	// при неполном выводе (вывод с отбором) в поле макета.
	
	Для Каждого Строка Из ТаблицаРаскрытия Цикл
		Строка.ID       = ИндексРаскрытия;
		ИндексРаскрытия = ИндексРаскрытия + 1;
	КонецЦикла;
	
	СоответствиеПовтор=Новый Соответствие;
	
	Для Каждого КлючИЗначение ИЗ СоответствиеПолей Цикл
		
		Если ТаблицаРаскрытия.Колонки.Найти(КлючИЗначение.Значение)=Неопределено Тогда
			
			ТаблицаРаскрытия.Колонки[КлючИЗначение.Ключ].Имя=КлючИЗначение.Значение;
			
		Иначе
			
			СоответствиеПовтор.Вставить(КлючИЗначение.Ключ,КлючИЗначение.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение ИЗ СоответствиеПовтор Цикл
		
		ТаблицаРаскрытия.Колонки[КлючИЗначение.Ключ].Имя=КлючИЗначение.Значение;
					
	КонецЦикла;

	Для Каждого СтрПоказатель ИЗ ПоказателиКолонки Цикл
		
		ТаблицаРаскрытия.Колонки[СтрПоказатель.Код].Имя=СтрПоказатель.Наименование;
		
	КонецЦикла;
	
	Возврат ТаблицаРаскрытия;
	
КонецФункции // ПолучитьТаблицуБД()

Процедура ОбработатьОбъектыБД() Экспорт
	
	Если Не ЗначениеЗаполнено(ПравилоЗаполнения) Тогда
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не указано правило импорта объекта %1 для организации %2. 
		|Обработка данных не выполнена.'"), ОбъектБД, Организация),,,СтатусСообщения.Внимание);
		
		Возврат;
		
	КонецЕсли;
	
	ПолучитьСеансОбменаДанными();
	
	НаборЗаписей=РегистрыСведений.ОбработанныеОбъектыБД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СеансОбменаДанными.Установить(СеансОбменаДанными);
	НаборЗаписей.Прочитать();
	
	ЕстьУдаленныеЗаписи=Ложь;
	
	Для Каждого Запись ИЗ НаборЗаписей Цикл
		
		Если НЕ ЗначениеЗаполнено(Запись.ОбработанныйОбъектСсылка) Тогда
			
			НаборЗаписей.Удалить(Запись);
			
			ЕстьУдаленныеЗаписи=Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьУдаленныеЗаписи Тогда
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	КонтекстЗагрузки=Новый Структура;
	КонтекстЗагрузки.Вставить("ИспользуемаяИБ",			ИспользуемаяИБ);
	КонтекстЗагрузки.Вставить("Организация",			Организация);
	КонтекстЗагрузки.Вставить("ПериодОтчета",			ПериодОтчета);
	КонтекстЗагрузки.Вставить("Сценарий",				Сценарий);
	КонтекстЗагрузки.Вставить("ОбъектБД", 				ОбъектБД);
	КонтекстЗагрузки.Вставить("ИсходныйОбъектСсылка", 	ИсходныйОбъектСсылка);
	КонтекстЗагрузки.Вставить("Загрузка",				Истина);
	КонтекстЗагрузки.Вставить("База");
	КонтекстЗагрузки.Вставить("ЧтениеНеактуальныхЗаписей",Ложь);
	КонтекстЗагрузки.Вставить("АнализЧувствительности",	Ложь);
	КонтекстЗагрузки.Вставить("СеансОбменаДанными",		СеансОбменаДанными);
	КонтекстЗагрузки.Вставить("ПутьКФайлуADO",			ПутьКФайлуADO);

	ПротоколируемыеСобытияУХ.Начать(ЭтотОбъект);
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		КонтекстЗагрузки.Вставить("Аналитика"+Индекс);
		
	КонецЦикла;
	
	Если ПравилоЗаполнения.ПроизвольныйКод Тогда
		
		ЗаполнитьПоПроизвольномуКоду();
		ЗавершитьПротоколОбмена();
		Возврат;
		
	ИначеЕсли ЗначениеЗаполнено(ИсходныйОбъектСсылка) И ОбластьГенерации=Перечисления.ОбластиГенерацииОбъектов.ТекущаяИБ Тогда
		
		ЗаполнитьОбъектПоИсточнику();
		ЗавершитьПротоколОбмена();
		Возврат;
		
	КонецЕсли;
	
	СтруктураТаблиц = Новый Структура;
	
	Если НЕ ЗначениеЗаполнено(ПравилоЗаполнения.ИсточникДляЗаполненияШапки) Тогда
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'В правиле импорта %1 не указан источник для заполнения шапки.'"), 
			ПравилоЗаполнения),,,СтатусСообщения.Внимание);
		ЗавершитьПротоколОбмена();
		Возврат;
		
	КонецЕсли;
	
	СтруктураТаблиц.Вставить("Шапка",УправлениеОтчетамиУХ.ПолучитьТаблицуДанныхПоИсточнику(КонтекстЗагрузки,ПравилоЗаполнения.ИсточникДляЗаполненияШапки));
	
	ЗаполнитьПоОбъектуБД();
	
	//Если ПравилоЗаполнения.ПоОбъектуБД=1 Тогда
	//				
	//	ЗаполнитьПоОбъектуБД();
	//	
	//Иначе
	//	
	//	ЗаполнитьПоПроизвольнымИсточникам();
	//	
	//КонецЕсли;
	
	ЗавершитьПротоколОбмена();
				
КонецПроцедуры // ОбработатьОбъектыБД()

Процедура ЗавершитьПротоколОбмена()
	
	// Удалим информацию о предыдущих протоколах, связанных с текущим сеансом загрузки
		
	ПротоколируемыеСобытияУХ.ЗаписатьПротоколВРегистр(СеансОбменаДанными,,Неопределено);
	
	ПротоколОшибок = ПротоколируемыеСобытияУХ.Завершить("ГенерацияОбъектовБД",,СеансОбменаДанными);
		
	ПротоколируемыеСобытияУХ.ЗаписатьПротоколВРегистр(СеансОбменаДанными,,ПротоколОшибок);	
		
КонецПроцедуры // ЗавершитьПротоколОбмена()

Функция ПодготовитьСтруктуруПеременныхДляРасчета() Экспорт
	
	СтруктураПеременных=Новый Структура;
	СтруктураПеременных.Вставить("АнализЧувствительности",АнализЧувствительности);
	СтруктураПеременных.Вставить("База",База);
	СтруктураПеременных.Вставить("ВидОтчета",ВидОтчета);
	СтруктураПеременных.Вставить("ПравилоОбработки",ПравилоЗаполнения);
	СтруктураПеременных.Вставить("ДанныеПараметрикиАктуальны",ДанныеПараметрикиАктуальны);
	СтруктураПеременных.Вставить("ЕстьОбращениеКВИБ",ЕстьОбращениеКВИБ);
	СтруктураПеременных.Вставить("ЛогИзмененийПоказателей",ЛогИзмененийПоказателей);
	СтруктураПеременных.Вставить("ЛогИзмененийРаскрытийПоказателей",ЛогИзмененийРаскрытийПоказателей);
	СтруктураПеременных.Вставить("МаксАналитикОтчета",МаксАналитикОтчета);
	СтруктураПеременных.Вставить("МаксАналитикПоказателя",МаксАналитикПоказателя);
	СтруктураПеременных.Вставить("мЗначенияОперандов",мЗначенияОперандов);
	СтруктураПеременных.Вставить("мОперанды",мОперанды);
	СтруктураПеременных.Вставить("ОбработанныеОперанды",ОбработанныеОперанды);
	СтруктураПеременных.Вставить("мПоказатели",мПоказатели);
	СтруктураПеременных.Вставить("мПоказателиДляОбработки",мПоказателиДляОбработки);
	СтруктураПеременных.Вставить("мПоказателиОбязательныеКПересчету",мПоказателиОбязательныеКПересчету);
	СтруктураПеременных.Вставить("мПоказателиРаскрытия",мПоказателиРаскрытия);
	СтруктураПеременных.Вставить("мПустойВидАналитики",мПустойВидАналитики);
	СтруктураПеременных.Вставить("мРасширеннаяДиагностикаВключена",мРасширеннаяДиагностикаВключена);
	СтруктураПеременных.Вставить("мСоответствиеДляПоискаПоКоду",мСоответствиеДляПоискаПоКоду);
	СтруктураПеременных.Вставить("мСоответствиеДляПоискаПоСсылке",мСоответствиеДляПоискаПоСсылке);
	СтруктураПеременных.Вставить("мСоответствиеОперандовИПоказателейОтбора",мСоответствиеОперандовИПоказателейОтбора);
	СтруктураПеременных.Вставить("мТаблицаВидовАналитикВидаОтчета",мТаблицаВидовАналитикВидаОтчета);
	СтруктураПеременных.Вставить("мТаблицаПересчета",мТаблицаПересчета);
	СтруктураПеременных.Вставить("мТабПоказателиЗапросы",мТабПоказателиЗапросы);
	СтруктураПеременных.Вставить("мТабРасшифровкиПоказателей",мТабРасшифровкиПоказателей);
	СтруктураПеременных.Вставить("НомерТекущейОперации",НомерТекущейОперации);
	СтруктураПеременных.Вставить("Показатели",Показатели);
	СтруктураПеременных.Вставить("ПоказателиДляЗаполнения",ПоказателиДляЗаполнения);
	СтруктураПеременных.Вставить("ТабКорректировок",ТабКорректировок);
	СтруктураПеременных.Вставить("ТаблицаВыявленныхОшибок",ТаблицаВыявленныхОшибок);
	СтруктураПеременных.Вставить("ТипЗначенияЧисло",ТипЗначенияЧисло);
	СтруктураПеременных.Вставить("ФлагОшибкиИмпорта",ФлагОшибкиИмпорта);
	СтруктураПеременных.Вставить("ЧислоДопАналитик",ЧислоДопАналитик);
	СтруктураПеременных.Вставить("ТаблицаСогласования",ТаблицаСогласования);
	СтруктураПеременных.Вставить("ДанныеРасшифровкиСчитаны",ДанныеРасшифровкиСчитаны);
	СтруктураПеременных.Вставить("ЕдиницаИзмеренияОтображения",Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	СтруктураПеременных.Вставить("УровеньТочности",0);
	СтруктураПеременных.Вставить("Записи",Записи);
	СтруктураПеременных.Вставить("РедактируемыеЗаписи",РедактируемыеЗаписи);
	СтруктураПеременных.Вставить("СводныеКорректировки",СводныеКорректировки);
	СтруктураПеременных.Вставить("ПутьКФайлуADO",ПутьКФайлуADO);
	СтруктураПеременных.Вставить("ПутьКВременномуФайлуADO",ПутьКВременномуФайлуADO);
	СтруктураПеременных.Вставить("РежимКорректировки",Ложь);
	СтруктураПеременных.Вставить("ТрансформационнаяКорректировка",Ложь);
	СтруктураПеременных.Вставить("ДополнительныеСвойства", ?(ДополнительныеСвойстваДляРасчета = Неопределено, Новый Структура, ДополнительныеСвойстваДляРасчета));
	
	СтруктураПеременных.Вставить("мСоответствиеДляПоискаПоСсылкеКорр");
	СтруктураПеременных.Вставить("СтруктураТаблиц",СтруктураТаблиц);	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		СтруктураПеременных.Вставить("Аналитика"+Индекс,Неопределено);
		
	КонецЦикла;
		
	Возврат СтруктураПеременных
	
КонецФункции // ПодготовитьСтруктуруПеременныхДляРасчета()

Процедура ПолучитьСеансОбменаДанными()
	
	СтруктураПоискаСеанса = Новый Структура;
	СтруктураПоискаСеанса.Вставить("Организация", Организация);
	СтруктураПоискаСеанса.Вставить("ОбъектБД", ОбъектБД);
	СтруктураПоискаСеанса.Вставить("ПериодОтчета", ПериодОтчета);
	СтруктураПоискаСеанса.Вставить("Сценарий", Сценарий);
	СтруктураПоискаСеанса.Вставить("ПравилоЗаполнения", ПравилоЗаполнения);
	СтруктураПоискаСеанса.Вставить("ИспользуемаяИБ", ИспользуемаяИБ);
	СтруктураПоискаСеанса.Вставить("ОбластьГенерации", ОбластьГенерации);
	
	СеансОбменаДанными = Справочники.СеансыОбменаДанными.НайтиСоздатьСеансОбменаДанными(СтруктураПоискаСеанса);
		
КонецПроцедуры // ПолучитьСеансОбменаДанными() 

#Область СлужебныеПроцедурыИФункции

Процедура ОтразитьОбработкуОбъектаПоСсылке(Ссылка, ЕстьОшибки)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбработанныеОбъектыБД");
	ЭлементБлокировки.УстановитьЗначение("СеансОбменаДанными", СеансОбменаДанными);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	
	Блокировка.Заблокировать();
	НаборЗаписей=РегистрыСведений.ОбработанныеОбъектыБД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбработанныйОбъектСсылка.Установить(Ссылка);
	НаборЗаписей.Отбор.ИсходныйОбъектСсылка.Установить(ИсходныйОбъектСсылка);
	НаборЗаписей.Отбор.СеансОбменаДанными.Установить(СеансОбменаДанными);
	
	НоваяСтрока=НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,ЭтотОбъект);
	
	НоваяСтрока.СеансОбменаДанными = СеансОбменаДанными;
	НоваяСтрока.ОбработанныйОбъектСсылка= Ссылка;
	НоваяСтрока.ИсходныйОбъектСсылка	= ИсходныйОбъектСсылка;
	НоваяСтрока.ДатаОбработки			= ДатаОбработки;
	НоваяСтрока.ЕстьОшибкиИмпорта		= ЕстьОшибки;
	НоваяСтрока.ОбработкаЗавершена		= ОбработкаЗавершена;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура ОтразитьОбработкуТаблицыОбъектов(ТаблицаОбъектов)
	
	СтруктураПоискаСеанса = Новый Структура;
	СтруктураПоискаСеанса.Вставить("Организация", Организация);
	СтруктураПоискаСеанса.Вставить("ОбъектБД", ОбъектБД);
	СтруктураПоискаСеанса.Вставить("ПериодОтчета", ПериодОтчета);
	СтруктураПоискаСеанса.Вставить("Сценарий", Сценарий);
	СтруктураПоискаСеанса.Вставить("ПравилоЗаполнения", ПравилоЗаполнения);
	СтруктураПоискаСеанса.Вставить("ИспользуемаяИБ", ИспользуемаяИБ);
	СтруктураПоискаСеанса.Вставить("ОбластьГенерации", ОбластьГенерации);
	
	СеансОбменаДанными = Справочники.СеансыОбменаДанными.НайтиСоздатьСеансОбменаДанными(СтруктураПоискаСеанса);
	
	Для Каждого Объект ИЗ ТаблицаОбъектов Цикл
		
		НаборЗаписей=РегистрыСведений.ОбработанныеОбъектыБД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СеансОбменаДанными.Установить(СеансОбменаДанными);
		
		Если ЗначениеЗаполнено(Объект.ОбработанныйОбъектСсылка) Тогда
			НаборЗаписей.Отбор.ОбработанныйОбъектСсылка.Установить(Объект.ОбработанныйОбъектСсылка);
		ИначеЕсли ЗначениеЗаполнено(Объект.ИсходныйОбъектСсылка) Тогда
			НаборЗаписей.Отбор.ИсходныйОбъектСсылка.Установить(Объект.ИсходныйОбъектСсылка);
		КонецЕсли;
		
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		НоваяСтрока=НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ЭтотОбъект);
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Объект);
		НоваяСтрока.ДатаОбработки=ДатаОбработки;
		
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
	
КонецПроцедуры

	
#КонецОбласти

///////////////////////////////////////////////////////////////////////

ТипЗначенияЧисло=Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
АнализЧувствительности=Ложь;
ДанныеПараметрикиАктуальны=Ложь;
мРасширеннаяДиагностикаВключена = Ложь;
мПустойВидАналитики=ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка();
ФлагОшибкиИмпорта=Ложь;
ЧислоДопАналитикПроводки=6;
ЧислоДопАналитикПоказателя=6;
ЧислоДопАналитик=ПараметрыСеанса.ЧислоДопАналитик;

ДанныеРасшифровкиСчитаны=Ложь;
ОбработкаЗавершена=Ложь;

ОбработанныеОперанды=Новый Соответствие;
