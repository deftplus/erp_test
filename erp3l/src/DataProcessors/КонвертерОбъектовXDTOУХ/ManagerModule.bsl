#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ПрограммныйИнтерфейс


// Возвращает тип первого элемента массива.
//
// Параметры:
//  МассивЭлементов - Массив.
// 
// Возвращаемое значение:
//	 - Тип - тип первого элемента в массиве.
//   - Неопределено - массив пуст.
//
Функция ТипМассива(МассивЭлементов) Экспорт
	Если МассивЭлементов.Количество() > 0 Тогда
		Возврат ТипЗнч(МассивЭлементов[0]);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

// Преобразует объект XDTO в структуру
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Объект XDTO.
// 
// Возвращаемое значение:
//  Структура - Структура объекта.
//
Функция ОбъектXDTOВСтруктуру(ОбъектXDTO, ПараметрыПреобразования = Неопределено) Экспорт
	Структура      = Новый Структура;
	ТипОбъектаXDTO = ОбъектXDTO.Тип();
	
	Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
		ИмяСвойства      = Свойство.Имя;
		ЗначениеСвойства = ОбъектXDTO[ИмяСвойства];
		Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
			Структура.Вставить(ИмяСвойства, ОбъектXDTOВСтруктуру(ЗначениеСвойства, ПараметрыПреобразования));
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("СписокXDTO") Тогда
			Структура.Вставить(ИмяСвойства, Новый Массив);
			Для Индекс = 0 По ЗначениеСвойства.Количество() - 1 Цикл
				ЭлементСписка = ЗначениеСвойства.Получить(Индекс);
				Если ТипЗнч(ЭлементСписка) = Тип("ОбъектXDTO") Тогда
					Структура[ИмяСвойства].Добавить(ОбъектXDTOВСтруктуру(ЭлементСписка, ПараметрыПреобразования));
				Иначе
					Структура[ИмяСвойства].Добавить(ЭлементСписка);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Структура.Вставить(ИмяСвойства, ЗначениеСвойства);
			Если ПараметрыПреобразования <> Неопределено
				И ПараметрыПреобразования.НайтиИдентификаторы
				И Свойство.Тип = ПараметрыПреобразования.ТипUUID Тогда
				
				РезультатПоиска = ПараметрыПреобразования.ТипыИдентификаторов[ТипОбъектаXDTO];
				Если РезультатПоиска <> Неопределено
					И РезультатПоиска.ИмяПоля = ИмяСвойства Тогда
					ПараметрыПреобразования.Идентификаторы[РезультатПоиска.ИмяТаблицы].Вставить(ЗначениеСвойства, РезультатПоиска.ПустоеЗначение);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Структура;
КонецФункции

// Возвращает имя и версию текущей конфигурации.
// 
// Возвращаемое значение:
//   - Структура:
//		- Имя - Строка - имя текущей конфигурации.
//		- Версия - Строка - версия.
//
Функция ПолучитьИмяВерсиюКонфигурации() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Имя", Метаданные.Имя);
	Результат.Вставить("Версия", Метаданные.Версия);
	Возврат Результат;
КонецФункции

Функция ПолучитьИмяПространстваW3C() Экспорт
	Возврат "http://www.w3.org/2001/XMLSchema";
КонецФункции

// Выполняет произвольный алгоритм на встроенном языке 1С:Предприятия,
// предварительно устанавливая безопасный режим выполнения кода
// и безопасный режим разделения данных для всех разделителей,
// присутствующих в составе конфигурации.
//
// Важные особенности:
// 1. Параметры передаются по ссылке и могут быть изменены в функции.
// 2. В контексте алгоритам объявлены переменные Результат и Ошибка,
//	  которые можно заполнить внутри алгоритма. И это значение будет
//    результатом его работы.
// 3. Текст алгоритма также передается по ссылке.
// 4. Возвращает упакованное значение результата работы алгоритма.
//
// Параметры:
//  Алгоритм - Строка - алгоритм на встроенном языке 1С:Предприятия.
//  Параметры - Произвольный - контекст, который требуется для выполнения.
//		алгоритма. В тексте алгоритма обращение к контексту должно происходить
//		по имени "Параметры".
//		Например, выражение "Параметры.Значение1 = Параметры.Значение2"
//		обращается к значениям "Значение1" и "Значение2" переданные в Параметры,
//		как свойства.
//
// Возвращаемое значение:
//	- Обработки.КонвертерОбъектовXDTOУХ.РезультатОшибка() - при выполнении
//		 алгоритма возникла ошибка.
//	- Обработки.КонвертерОбъектовXDTOУХ.РезультатУспех()- алгоритм выполнен
//		успешно, в Результат содержится произвольное значение - результат
//		работы алгоритма.
//
Функция ВыполнитьВБезопасномРежиме(Алгоритм,
									Параметры = Неопределено) Экспорт
	УстановитьБезопасныйРежим(Истина);
	Если ОбщегоНазначения.ПодсистемаСуществует(
				"СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса =
			ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		МассивРазделителей =
			МодульРаботаВМоделиСервиса.РазделителиКонфигурации();
	Иначе
		МассивРазделителей = Новый Массив;
	КонецЕсли;
	Для Каждого ИмяРазделителя Из МассивРазделителей Цикл
		УстановитьБезопасныйРежимРазделенияДанных(ИмяРазделителя, Истина);
	КонецЦикла;
	Результат = Неопределено;
	Ошибка = Неопределено;
	Попытка
		Выполнить Алгоритм;
	Исключение
		Инфо = ИнформацияОбОшибке();
		Ошибка = ПодробноеПредставлениеОшибки(Инфо);
	КонецПопытки;
	Если Ошибка <> Неопределено Тогда
		Возврат РезультатОшибка(Ошибка);
	КонецЕсли;
	Возврат РезультатУспех(Результат);
КонецФункции


#Область ВншениеФункцииРаботыСКонфигурацией1С


// Для объекта 1С возвращает представление его значения.
//
Функция ПолучитьИмяЗначения1С(Значение1С) Экспорт
	Если ЭтоПредопределенноеЗначение(Значение1С) Тогда
		Возврат ПолучитьИмяПредопределенногоЗначения1С(
			Значение1С);
	ИначеЕсли ЭтоПримитивныйТип(ТипЗнч(Значение1С)) Тогда
		Возврат XMLСтрока(Значение1С);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

// Для объекта 1С возвращает его представление в виде:
// 	ИмяОбъектаМетаданных.ИмяОбъекта.
// 	Например: Справочник.Номенклатура.
// Для примитивного типа возвращает его название,
//	например, Строка.
//
Функция ПолучитьИмяТипа1С(Объект1С) Экспорт
	Если Объект1С = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	ТипОбъекта1С = ТипЗнч(Объект1С);
	Возврат ПолучитьТипСтрокой(ТипОбъекта1С);
КонецФункции

// Для указанной ссылки на предопределенный элемент 1С возвращает
// значение его ключевого поля. Для справочника - это имя
// предопределенного элемента. Для перечисления - это имя значения.
// Для всех остальных значение.
//
Функция ПолучитьИмяПредопределенногоЗначения1С(Значение1С) Экспорт
	ИмяТипа1С = Значение1С.Метаданные().ПолноеИмя();
	НачалоИмени = Лев(ИмяТипа1С, 10);
	Если НачалоИмени = "Справочник" Тогда
		Возврат Значение1С.ИмяПредопределенныхДанных;
	ИначеЕсли НачалоИмени = "Перечислен" Тогда
		МетаданныеПеречисления = Значение1С.Метаданные();
		ИмяПеречисления = МетаданныеПеречисления.Имя;
		ИндексЗначения = Перечисления[ИмяПеречисления].Индекс(Значение1С);
		Возврат МетаданныеПеречисления.ЗначенияПеречисления[ИндексЗначения].Имя;
	КонецЕсли;
	Возврат Значение1С;
КонецФункции

// Возвращает ссылку на предопределенное значение.
//
Функция ПолучитьПредопределенноеЗначение1С(ИмяТипа, ИмяЗначения) Экспорт
	Если ПустаяСтрока(ИмяТипа)
			ИЛИ ПустаяСтрока(ИмяЗначения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ПредопределенноеЗначение(ИмяТипа + "." + ИмяЗначения);
КонецФункции

Функция ЭтоПеречислениеСсылка(ТипОбъекта) Экспорт
	Возврат Перечисления.ТипВсеСсылки().СодержитТип(ТипОбъекта);
КонецФункции

Функция ЭтоПредопределенноеЗначение(Объект1С) Экспорт
	Если ЗначениеЗаполнено(Объект1С) Тогда
		ТипОбъекта = ТипЗнч(Объект1С);
		Если ЭтоПеречислениеСсылка(ТипОбъекта) Тогда
			Возврат Истина;
		ИначеЕсли ТипМожетИметьПредопределенноеЗначение(ТипОбъекта) Тогда
			Возврат Объект1С.Предопределенный;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

// Проверка того, что тип имеет ссылочный тип данных
//
Функция ЭтоСсылочныйТип(Тип) Экспорт
	Возврат Справочники.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип);
КонецФункции

Функция ТипМожетИметьПредопределенноеЗначение(Тип) Экспорт
	Возврат Справочники.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип);
КонецФункции

// Служебная функция, определяющая примитивность переданного типа
//
Функция ЭтоПримитивныйТип(Тип) Экспорт
	Возврат(Тип = Тип("Строка")
		ИЛИ Тип = Тип("Дата")
		ИЛИ Тип = Тип("Булево")
		ИЛИ Тип = Тип("Число"));
КонецФункции

// Для указанного типа возвращает строковое представление его наименования.
//
Функция ПреобразоватьПримитивныйТипВСтроку(Тип) Экспорт
	Если Тип=Тип("Строка") Тогда
		Возврат "Строка";
	ИначеЕсли Тип=Тип("Число") Тогда
		Возврат "Число";
	ИначеЕсли Тип=Тип("Дата") Тогда
		Возврат "Дата";
	ИначеЕсли Тип=Тип("Булево") Тогда
		Возврат "Булево";
	ИначеЕсли Тип=Тип("Структура") Тогда
		Возврат "Структура";
	ИначеЕсли Тип=Тип("Массив") Тогда
		Возврат "Массив";
	ИначеЕсли Тип=Тип("ТаблицаЗначений") Тогда
		Возврат "ТаблицаЗначений";
	ИначеЕсли Тип=Тип("СтрокаТаблицыЗначений") Тогда
		Возврат "СтрокаТаблицыЗначений";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Для указанного типа возвращает строковое представление его наименования.
//
Функция ПреобразоватьСоставнойТипВСтроку(Тип) Экспорт
	Если Тип=Тип("Структура") Тогда
		Возврат "Структура";
	ИначеЕсли Тип=Тип("Массив") Тогда
		Возврат "Массив";
	ИначеЕсли Тип=Тип("СписокЗначений") Тогда
		Возврат "СписокЗначений";
	ИначеЕсли Тип=Тип("ТаблицаЗначений") Тогда
		Возврат "ТаблицаЗначений";
	ИначеЕсли Тип=Тип("СтрокаТаблицыЗначений") Тогда
		Возврат "СтрокаТаблицыЗначений";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Возвращает строку типа "Справочник.ИмяСправочника".
//
Функция ПолучитьТипСтрокой(Тип) Экспорт
	ИмяПримитивногоТипа=ПреобразоватьПримитивныйТипВСтроку(Тип);
	Если ИмяПримитивногоТипа <> Неопределено Тогда
		Возврат ИмяПримитивногоТипа;
	Иначе
		ИмяСоставногоТипа = ПреобразоватьСоставнойТипВСтроку(Тип);
		Если ИмяСоставногоТипа <> Неопределено Тогда
			Возврат ИмяСоставногоТипа;
		КонецЕсли;
	КонецЕсли;
	Возврат Метаданные.НайтиПоТипу(Тип).ПолноеИмя();
КонецФункции

// Возвращает массив имен реквизитов объекта указанного типа.
//
// Параметры:
//  ИмяТипа1С - Строка - в формате "Справочник.ИмяСправочника".
//		Поддерживаются справочники, документы.
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - описывет реквизиты. Содержит поля:
//		- ИмяРеквизита - Строка - имя реквизита.
//		- СпособПолучения - Строка - способ получения
//						("Функция", "Реквизит").
//		- ИмяТипа - Строка - имя типа 1С в виде "Справочник.Валюты"
//						для ссылочных типов, либо "Число"
//						 для примитивных.
//
Функция ПолучитьИменаРеквизитовОбъекта1С(ИмяТипа1С) Экспорт
	Результат = СоздатьТаблицуОписанияРеквизитовОбъекта1С();
	ПутьИмени = СтрРазделить(ИмяТипа1С, ".");
	Если ПутьИмени.Количество() = 2 Тогда
		ВидОбъектаМетаданных = ПутьИмени[0];
		Если ВидОбъектаМетаданных = "Справочник" Тогда
			ДобавитьИменаРеквизитовСправочника(ИмяТипа1С, Результат);
		ИначеЕсли ВидОбъектаМетаданных = "Документ" Тогда
			ДобавитьИменаРеквизитовДокумента(ИмяТипа1С, Результат);
		КонецЕсли;
	ИначеЕсли ПутьИмени.Количество() = 4 Тогда
		ДобавитьИменаРеквизитовТабличнойЧасти(ПутьИмени, Результат);
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Возвращает массив имен ссылочных типов 1С.
//
Функция ПолучитьМассивИменСсылочныхТипов1С() Экспорт
	мИменТипов = Новый Массив;
	мИменТипов.Добавить("Перечисление");
	мИменТипов.Добавить("Справочник");
	мИменТипов.Добавить("Документ");
	Возврат мИменТипов;
КонецФункции

// Возвращает массив имен составных типов 1С.
//
Функция ПолучитьМассивИменСоставныхТипов1С() Экспорт
	мИменТипов = Новый Массив;
	мИменТипов.Добавить("Структура");
	мИменТипов.Добавить("Массив");
	мИменТипов.Добавить("ТаблицаЗначений");
	мИменТипов.Добавить("СтрокаТаблицыЗначений");
	Возврат мИменТипов;
КонецФункции

// Возвращает массив имен примитивных типов 1С.
//
Функция ПолучитьМассивИменПримитивныхТипов1С() Экспорт
	мИменТипов = Новый Массив;
	мИменТипов.Добавить("Строка");
	мИменТипов.Добавить("Число");
	мИменТипов.Добавить("Булево");
	Возврат мИменТипов;
КонецФункции



#КонецОбласти


#Область РаботаСРезультатомВыполненияФункций


// Если значение Результат заполнено, то возвращает Успех(Результат).
// Иначе возвращает Ошибка(СообщениеНетРезультата).
//
// Параметры:
//  Результат - Структура результата | Произвольное значение
//			 - значение для дальнейшей обработки.
//			Если передано Неопределено, то создает ошибку с текстом
//				СообщениеНетРезультата.
//			Если передано произвольное значение, то возвращает
//				упакованный успех.
//			Если передана структура с успешным результатом,
//				то просто возвращает ее.
//			Если передана структура с результатом в которой уже есть ошибка,
//				то добавляет к сообщению об ошибке СообщениеНетРезультата.
//	СообщениеНетРезультата - Строка - описание ошибки, если Результат пустой.
// 
// Возвращаемое значение:
//   - Структура - описание результата функции с успешным звершением работы,
//		определены поля:
//			- Результат - значением Данные;
//			- Ошибка - значение СообщениеНетРезультата;
//			- ЕстьОшибка - Булево - Ложь.
//
Функция УпаковатьРезультат(Результат, СообщениеНетРезультата) Экспорт
	Если Результат = Неопределено Тогда
		Возврат Обработки.КонвертерОбъектовXDTOУХ.РезультатОшибка(
			СообщениеНетРезультата);
	КонецЕсли;
	Если ЭтоСтруктураРезультата(Результат) Тогда
		Если Результат.ЕстьОшибка Тогда
			Возврат ДополнитьОшибку(Результат, СообщениеНетРезультата);
		Иначе
			Возврат Обработки.КонвертерОбъектовXDTOУХ.РезультатУспех(
				Результат.Результат);
		КонецЕсли;
	КонецЕсли;
	Возврат Обработки.КонвертерОбъектовXDTOУХ.РезультатУспех(
		Результат);
КонецФункции

// Упаковывает переданные Данные в структуру результата.
//
// Параметры:
//  Данные - Произвольное значение - значение для дальнейшей обработки.
// 
// Возвращаемое значение:
//   - Структура - описание результата функции с успешным звершением работы,
//		определены поля:
//			- Результат - значением Данные;
//			- ЕстьОшибка - Булево - Ложь.
//
Функция РезультатУспех(Данные) Экспорт
	Результат = СоздатьПустойРезультат();
	Результат.Результат = Данные;
	Возврат Результат;
КонецФункции

// Упаковывает описание ошибки в структуру результата.
//
// Параметры:
//  Ошибка - Строка - описание ошибки.
// 
// Возвращаемое значение:
//   - Структура - описание результата функции с ошибкой. Поля:
//			- Ошибка - значение Ошибка;
//			- ЕстьОшибка - Булево - Ложь.
//
Функция РезультатОшибка(Ошибка) Экспорт
	Результат = СоздатьПустойРезультат();
	Результат.ЕстьОшибка = Истина;
	Результат.Ошибка = Ошибка;
	Возврат Результат;
КонецФункции

// Добавить описание ошибки слева в поле Ошибка структуры результата.
//
// Параметры:
//	СтруктураРезультат - Структура - описание успеха или ошибки.
//  Ошибка - Строка | СтруктураРезультат - описание первой ошибки.
//			Использует Ошибка как префикс.
//	Разделитель - Строка | Неопределено - символы разделители ошибок.
//			Если не заполнен, то Символы.ПС.
// 
// Возвращаемое значение:
//   - Структура - описание результата функции с ошибкой. Поля:
//			- Ошибка - текстовое описание ошибки;
//			- ЕстьОшибка - Булево - Ложь.
//
Функция ДополнитьОшибку(СтруктураРезультат,
						Ошибка, 
						Знач Разделитель=Неопределено) Экспорт
	Если ЭтоСтруктураРезультата(Ошибка) Тогда
		ПерваяОшибка = Ошибка.Ошибка;
	Иначе
		ПерваяОшибка = Ошибка;
	КонецЕсли;
	Если СтруктураРезультат.ЕстьОшибка Тогда
		ИсходнаяОшибка = СтруктураРезультат.Ошибка;
		Возврат РезультатОшибка(ПерваяОшибка
			+ ?(Разделитель=Неопределено, Символы.ПС, Разделитель)
			+ ИсходнаяОшибка);
	КонецЕсли;
	Возврат РезультатОшибка(ПерваяОшибка);
КонецФункции

// Объединяет описание ошибок первого и второго результатов
// в один резульат с ошибкой.
// Если один из результатов не ошибка, тогда игнорирует его.
//
// Параметры:
//	СтруктураРезультат1 - Структура - описание результата или ошибки.
//	СтруктураРезультат1 - Структура - описание результата или ошибки.
//	Разделитель			- Строка | Неопределено - символы разделители ошибок.
//							Если не заполнен, то Символы.ПС.
// 
// Возвращаемое значение:
//   - Структура - описание результата функции с ошибкой. Поля:
//			- Ошибка - текстовое описание ошибки - это ошибка1 разделитель ошибка 2.
//			- ЕстьОшибка - Булево - Ложь.
//
Функция ОбъединитьОшибки(СтруктураРезультат1, 
						 СтруктураРезультат2, 
						 Знач Разделитель=Неопределено) Экспорт
	ТекстОшибки = "";
	Если Разделитель = Неопределено Тогда
		Разделитель = Символы.ПС;
	КонецЕсли;
	Если СтруктураРезультат1.ЕстьОшибка Тогда
		ТекстОшибки = СтруктураРезультат1.Ошибка;
	КонецЕсли;
	Если СтруктураРезультат2.ЕстьОшибка Тогда
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			ТекстОшибки = ТекстОшибки + Разделитель;
		КонецЕсли;
		ТекстОшибки = ТекстОшибки + СтруктураРезультат2.Ошибка;
	КонецЕсли;
	Возврат РезультатОшибка(ТекстОшибки);
КонецФункции

// Проверяет, что Данные - это структура с результатом, т.е. содержит
// поле "ЕстьОшибка", "Результат", "Ошибка".
//
Функция ЭтоСтруктураРезультата(Данные) Экспорт
	ТипДанных = ТипЗнч(Данные);
	Возврат (ТипДанных = Тип("Структура")
				ИЛИ ТипДанных = Тип("ФиксированнаяСтруктура"))
			И Данные.Свойство("ЕстьОшибка")
			И Данные.Свойство("Ошибка")
			И Данные.Свойство("Результат");
КонецФункции

// Возвращает значение упакованное в результат,
// либо если упакована ошибка, возвращает Неопределено.
//
Функция РаспаковатьРезультат(Результат) Экспорт
	Если Результат.ЕстьОшибка Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Результат.Результат;
КонецФункции


#КонецОбласти


#КонецОбласти


#Область НеЭкспортныеФункции


Функция СоздатьПустойРезультат()
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибка", Ложь);
	Результат.Вставить("Результат", Неопределено);
	Результат.Вставить("Ошибка", Неопределено);
	Возврат Результат;
КонецФункции


#Область РаботаСТаблицеОписывающейРеквизитыОбъекта1С


Функция СоздатьТаблицуОписанияРеквизитовОбъекта1С()
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("СпособПолучения", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("ИмяТипа", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("ПолучаемСписок", Новый ОписаниеТипов("Булево"));
	Возврат ТЗ;
КонецФункции

Функция ДобавитьОписаниеРеквизитаВТЗРеквизитов(ТЗРеквизитов,
												ИмяРеквизита,
												СпособПолучения,
												ИмяТипа)
	НоваяСтрока = ТЗРеквизитов.Добавить();
	НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
	НоваяСтрока.СпособПолучения = СпособПолучения;
	НоваяСтрока.ИмяТипа = ИмяТипа;
	НоваяСтрока.ПолучаемСписок = Ложь;
	Возврат НоваяСтрока;
КонецФункции

Функция ДобавитьИменаРеквизитовСправочника(ИмяСправочника, ТЗРеквизитов)
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ИмяСправочника);
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат ТЗРеквизитов;
	КонецЕсли;
	ДобавитьОписаниеРеквизитаВТЗРеквизитов(
		ТЗРеквизитов, "Результат = УникальныйИдентификатор()", "Функция", "Строка");
	ДобавитьОписаниеРеквизитаВТЗРеквизитов(
		ТЗРеквизитов, "ПометкаУдаления", "Реквизит", "Булево");
	ДобавитьОписаниеРеквизитаВТЗРеквизитов(
		ТЗРеквизитов, "Предопределенный", "Реквизит", "Булево");
	ДобавитьОписаниеРеквизитаВТЗРеквизитов(
		ТЗРеквизитов, "ИмяПредопределенныхДанных", "Реквизит", "Строка");
	Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
		ДобавитьОписаниеРеквизитаВТЗРеквизитов(
			ТЗРеквизитов, "Результат = ПолноеНаименование()", "Функция", "Строка");
		ДобавитьОписаниеРеквизитаВТЗРеквизитов(
			ТЗРеквизитов, "Наименование", "Реквизит", "Строка");
	КонецЕсли;
	Если МетаданныеОбъекта.ДлинаКода > 0 Тогда
		ДобавитьОписаниеРеквизитаВТЗРеквизитов(
			ТЗРеквизитов, "Результат = ПолныйКод()", "Функция", "Строка");
		ДобавитьОписаниеРеквизитаВТЗРеквизитов(
			ТЗРеквизитов, "Код", "Реквизит", 
				ПолучитьТипСтрокойИзОписанияРеквизита(
					МетаданныеОбъекта.СтандартныеРеквизиты["Код"]));
	КонецЕсли;
	Для Каждого Владелец Из МетаданныеОбъекта.Владельцы Цикл
		ДобавитьОписаниеРеквизитаВТЗРеквизитов(
			ТЗРеквизитов, "Владелец", "Реквизит", Владелец.ПолноеИмя());
		Прервать;
	КонецЦикла;
	Если МетаданныеОбъекта.Иерархический Тогда
		ДобавитьОписаниеРеквизитаВТЗРеквизитов(
			ТЗРеквизитов, "Родитель", "Реквизит",
				ПолучитьТипСтрокойИзОписанияРеквизита(
					МетаданныеОбъекта.СтандартныеРеквизиты["Код"]));
		ДобавитьОписаниеРеквизитаВТЗРеквизитов(
			ТЗРеквизитов, "ЭтоГруппа", "Реквизит", "Булево");
		ДобавитьОписаниеРеквизитаВТЗРеквизитов(
			ТЗРеквизитов, "Результат = Уровень()", "Функция", "Число");
	КонецЕсли;
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		ДобавитьОписаниеРеквизитаВТЗРеквизитов(
			ТЗРеквизитов, Реквизит.Имя, "Реквизит",
				ПолучитьТипСтрокойИзОписанияРеквизита(Реквизит));
	КонецЦикла;
	Для Каждого Реквизит Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		СтрокаОписания = ДобавитьОписаниеРеквизитаВТЗРеквизитов(
			ТЗРеквизитов,
			"ТабличнаяЧасть." + Реквизит.Имя,
			"Реквизит",
			"ТабличнаяЧасть");
		СтрокаОписания.ПолучаемСписок = Истина;
	КонецЦикла;
	Возврат ТЗРеквизитов;
КонецФункции

Функция ДобавитьИменаРеквизитовДокумента(ИмяДокумента, ТЗРеквизитов)
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ИмяДокумента);
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат ТЗРеквизитов;
	КонецЕсли;
	ДобавитьОписаниеРеквизитаВТЗРеквизитов(
			ТЗРеквизитов, "Результат = УникальныйИдентификатор()", "Функция", "Строка");
	Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		ДобавитьОписаниеРеквизитаВТЗРеквизитов(
			ТЗРеквизитов, Реквизит.Имя, "Реквизит",
				ПолучитьТипСтрокойИзОписанияРеквизита(Реквизит));
	КонецЦикла;
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		ДобавитьОписаниеРеквизитаВТЗРеквизитов(
			ТЗРеквизитов, Реквизит.Имя, "Реквизит",
				ПолучитьТипСтрокойИзОписанияРеквизита(Реквизит));
	КонецЦикла;
	Для Каждого Реквизит Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		СтрокаОписания = ДобавитьОписаниеРеквизитаВТЗРеквизитов(
			ТЗРеквизитов,
			"ТабличнаяЧасть." + Реквизит.Имя,
			"Реквизит",
			"ТабличнаяЧасть");
		СтрокаОписания.ПолучаемСписок = Истина;
	КонецЦикла;
	Возврат ТЗРеквизитов;
КонецФункции

Функция ДобавитьИменаРеквизитовТабличнойЧасти(ПутьИмени, ТЗРеквизитов)
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(
		ПутьИмени[0] + "." + ПутьИмени[1]);
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат ТЗРеквизитов;
	КонецЕсли;
	МетаданныеТЧ = МетаданныеОбъекта.ТабличныеЧасти[ПутьИмени[3]];
	Если МетаданныеТЧ = Неопределено Тогда
		Возврат ТЗРеквизитов;
	КонецЕсли;
	ДобавитьОписаниеРеквизитаВТЗРеквизитов(
		ТЗРеквизитов, "Результат = Количество()", "Функция", "Строка");
	ДобавитьОписаниеРеквизитаВТЗРеквизитов(
		ТЗРеквизитов, "Результат = Выгрузить()", "Функция", "Строка");
	Для Каждого Реквизит Из МетаданныеТЧ.СтандартныеРеквизиты Цикл
		ДобавитьОписаниеРеквизитаВТЗРеквизитов(
			ТЗРеквизитов, Реквизит.Имя, "Реквизит",
				ПолучитьТипСтрокойИзОписанияРеквизита(Реквизит));
	КонецЦикла;
	Для Каждого Реквизит Из МетаданныеТЧ.Реквизиты Цикл
		ДобавитьОписаниеРеквизитаВТЗРеквизитов(
			ТЗРеквизитов, Реквизит.Имя, "Реквизит",
				ПолучитьТипСтрокойИзОписанияРеквизита(Реквизит));
	КонецЦикла;
	Возврат ТЗРеквизитов;
КонецФункции

Функция ПолучитьТипСтрокойИзОписанияРеквизита(ОписаниеРеквизита)
	Возврат ПолучитьТипСтрокой(ОписаниеРеквизита.Тип.Типы()[0]);
КонецФункции


#КонецОбласти


#КонецОбласти


#КонецЕсли