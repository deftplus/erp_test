
#Область ОбработкаОсновныхСобытийФормы


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ИнициализироватьЭлементыФормыМетаданных1С();
	ТекстПравил = Параметры.СтрокаПравил;
	флОповеститьОВыборе = Параметры.ОповеститьОбИзменении;
	ЭтаФорма.ЗакрыватьПриВыборе = НЕ флОповеститьОВыборе;
	Если НЕ ПустаяСтрока(ТекстПравил) Тогда
		ПрочитатьПравилаИзТекстаXMLНаСервере();
	КонецЕсли;
	Элементы.ФормаСохранитьПравила.Видимость = флОповеститьОВыборе;
	Элементы.ФормаСохранитьПравила.КнопкаПоУмолчанию = флОповеститьОВыборе;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбработатьИзменениеСсылки1СДляПреобразования();
	УстановитьФлагОтладки(Ложь);
	УстановитьВидимостьСистемыЛогирования();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если НЕ ЗавершениеРаботы
			И флОповеститьОВыборе
			И Модифицированность Тогда
		Отказ = Истина;
		ПередатьПравилаВладельцуФормыИСервер(Истина);
	КонецЕсли;
КонецПроцедуры

	

#КонецОбласти


#Область ОбработкаСобытийЭлементовФормы


&НаКлиенте
Процедура ПрочитатьПравилаИзТекстаXML(Команда)
	Если ПустаяСтрока(ТекстПравил) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен текст правил!";
		Сообщение.Поле = "ТекстПравил";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	ПрочитатьПравилаИзТекстаXMLНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПравилаВТекстXML(Команда)
	ЗаписатьПравилаВТекстXMLНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьW3CXMLСхему(Команда)
	СтрокаW3C = Объект.ПространстваИменXSD.НайтиСтроки(
		Новый Структура("ИмяПространстваИмен", ИмяПространстваW3C));
	Если СтрокаW3C.Количество() = 0 Тогда
		ДобавитьW3CXMLСхемуНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМетаданныеXSD(Команда)
	Если ПроверитьСообщитьКодыПространствИменXSDКорректны() Тогда
		ОбновитьМетаданныеXSDНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеробразоватьОбъект1СВXML(Команда)
	ПеробразоватьОбъект1СВXMLНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПрограмму(Команда)
	СформироватьПрограммуНаСервере();
КонецПроцедуры
&НаКлиенте
Процедура ПередатьПравилаВладельцу(Команда)
	ПередатьПравилаВладельцуФормыИСервер();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПравилаВФайл(Команда)
	ПолучаемыеФайлы = СохранитьПравилаВХранилищеНаСервере();
	Если ПолучаемыеФайлы.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Заголовок", НСтр("ru = 'Сохранение в файл'"));
		ДопПараметры.Вставить("Пояснение",
			НСтр("ru = 'Правила успешно сохранены в файл.'"));
		ДопПараметры.Вставить("Картинка", БиблиотекаКартинок.Успешно32);
		Оповещение = Новый ОписаниеОповещения(
			"ОповеститьОбУспешномЗавершенииОперацииСФайлом",
			ЭтаФорма,
			ДопПараметры);
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Диалог.Заголовок =
			НСтр("ru = 'Выберите файл для сохранения правил'");
		Диалог.Фильтр =
			НСтр("ru = 'Файл правил (*.xml)|*.xml|Все файлы (*.*)|*.*'");
		Диалог.МножественныйВыбор = Ложь;
		НачатьПолучениеФайлов(Оповещение, ПолучаемыеФайлы, Диалог, Истина);
	КонецЕсли;
	Модифицированность = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьПравилаИзФайла(Команда)
	ДопПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения(
		"ОбработатьПолучениеИмениФайлаПравилИСервер",
		ЭтаФорма,
		ДопПараметры);
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок =
		НСтр("ru = 'Выберите файл правил'");
	Диалог.Фильтр =
		НСтр("ru = 'Файл правил (*.xml)|*.xml|Все файлы (*.*)|*.*'");
	Диалог.МножественныйВыбор = Ложь;
	НачатьПомещениеФайла(Оповещение,, Диалог, Истина,
		ЭтотОбъект.УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтандартноеИмяГруппыПравилЗначения(Команда)
	ТекДанные = Элементы.Значения1СВXDTO.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекДанные.ИмяГруппы = "";
		ЗаполнитьИмяГруппыПравилПоСтроке(Элементы.Значения1СВXDTO);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтандартноеИмяГруппыПравилОбъекта(Команда)
	ТекДанные = Элементы.Объекты1СВXDTO.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекДанные.ИмяГруппы = "";
		ЗаполнитьИмяГруппыПравилПоСтроке(Элементы.Объекты1СВXDTO);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИзКонфигурации(Команда)
	ПолучитьИмяВерсиюТекущейКонфигурацииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПравилаПреобразованияРеквизитов(Команда)
	ЗаполнитьПравилаПреобразованияРеквизитовТекущегоОбъектаИСервер();
КонецПроцедуры

&НаКлиенте
Процедура Отладка(Команда)
	УстановитьФлагОтладки(НЕ Элементы.ФормаОтладка.Пометка);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоПравилОтТипаXSD(Команда)
	ТекДанные = Элементы.Объекты1СВXDTO.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ОбновитьДеревоПравилОтТипаXSDНаСервере(ТекДанные.ИмяТипаПриемника);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПравилоКонвертацииОбъекта(Команда)
	Результат = ПроверитьПравилоКонвертацииОбъектаНаСервере();
	Если Результат.ЕстьОшибка Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ОбработкаПросмотраОшибкиЗаглушка", ЭтаФорма);
		ПоказатьВводСтроки(
			ОбработчикОповещения,
			Результат.Ошибка,
			"При проверке возникли ошибки",
			,
			Истина);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибок нет";
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КодыПространствИменXSDТекстXSDНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИдСтроки = Элементы.ПространстваИменXSD.ТекущаяСтрока;
	ВвестиБольшуюСтроку("Объект.ПространстваИменXSD",
		"ТекстXSD",
		"",
		ИдСтроки,
		Нстр("ru='Введите текст описания пакета XSD'"),
		"ТекстПакетаXSD");
КонецПроцедуры

&НаКлиенте
Процедура ПространстваИменXSDПриНачалеРедактирования(Элемент, 
													НоваяСтрока, 
													Копирование)
	Если НоваяСтрока ИЛИ Копирование Тогда
		ТекущийРедактируемыйКодПространстваИмен = "";
	Иначе
		ТекДанные = Элементы.ПространстваИменXSD.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			ТекущийРедактируемыйКодПространстваИмен = ТекДанные.Код;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПространстваИменXSDПриОкончанииРедактирования(Элемент,
														НоваяСтрока,
														ОтменаРедактирования)
	Если НЕ НоваяСтрока И НЕ ОтменаРедактирования Тогда
		ТекДанные = Элементы.ПространстваИменXSD.ТекущиеДанные;
		Если ТекДанные <> Неопределено
				И ТекущийРедактируемыйКодПространстваИмен <> ТекДанные.Код Тогда
			ОбработатьИзменениеПространстваИмен = ОбработатьИзменениеПространстваИмен
				+ ?(ПустаяСтрока(ОбработатьИзменениеПространстваИмен), "", Символы.ПС)
				+ ТекущийРедактируемыйКодПространстваИмен
				+ ПолучитьРазделительПереименованияПространстваИмен()
				+ ТекДанные.Код;
		КонецЕсли;
		ТекущийРедактируемыйКодПространстваИмен = "";
		ПодключитьОбработчикОжидания("ОбновитьПрефиксыТиповДанныхXSD", 0.1, Истина);
	КонецЕсли;
	ТекущийРедактируемыйКодПространстваИмен = "";
КонецПроцедуры

&НаКлиенте
Процедура МакросыИмяПриИзменении(Элемент)
	ТекДанные = Элементы.Макросы.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		КлючИмени = ВРег(ТекДанные.Имя);
		КлючИмени = СтрЗаменить(КлючИмени, " ", "_");
		КлючИмени = СтрЗаменить(КлючИмени, Символы.НПП, "_");
		ТекДанные.Имя = КлючИмени;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МакросыТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИдСтроки = Элементы.Макросы.ТекущаяСтрока;
	ВвестиБольшуюСтроку("Объект.Макросы",
		"Текст",
		"",
		ИдСтроки,
		Нстр("ru='Введите текст функции'"),
		"Макрос");
КонецПроцедуры

&НаКлиенте
Процедура Значения1СВXDTOИмяГруппыПриИзменении(Элемент)
	ЗаполнитьИмяГруппыПравилПоСтроке(Элемент.Родитель);
КонецПроцедуры

&НаКлиенте
Процедура Значения1СВXDTOИмяТипаПриемникаПриИзменении(Элемент)
	ЗаполнитьИмяГруппыПравилПоСтроке(Элемент.Родитель);
КонецПроцедуры

&НаКлиенте
Процедура Значения1СВXDTOСпособПолученияПриИзменении(Элемент)
	ТекСтрока = Элементы.Значения1СВXDTO.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПодготовитьЭлементПредставленияЗначенияXDTO(ТекСтрока);
	ОбновитьЗначениеXDTOИзПредставления(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура Значения1СВXDTOПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элементы.Значения1СВXDTO.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПодготовитьЭлементПредставленияЗначенияXDTO(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура Значения1СВXDTOПредставлениеПриемникаПриИзменении(Элемент)
	ТекСтрока = Элементы.Значения1СВXDTO.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбработатьИзменениеЗначения1СНаСервере(ТекСтрока);
	ОбновитьЗначениеXDTOИзПредставления(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура Объекты1СВXDTOПредставлениеПриемникаПриИзменении(Элемент)
	ТекСтрока = Элементы.Объекты1СВXDTO.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбновитьЗначениеОбъектаXDTOИзПредставления(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура Значения1СВXDTOЗначение1СПриИзменении(Элемент)
	ТекСтрока = Элементы.Значения1СВXDTO.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбработатьИзменениеЗначения1СНаСервере(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура Значения1СВXDTOИмяТипаПриемникаНачалоВыбора(
												Элемент, 
												ДанныеВыбора, 
												СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокТиповЗначенийXSD;
КонецПроцедуры

&НаКлиенте
Процедура Значения1СВXDTOПредставлениеПриемникаНачалоВыбора(
												Элемент, 
												ДанныеВыбора, 
												СтандартнаяОбработка)
	ТекСтрока = Элементы.Значения1СВXDTO.ТекущаяСтрока;
	ВыбратьЗначениеЗначенияXDTO(ТекСтрока, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Объекты1СВXDTOПредставлениеПриемникаНачалоВыбора(Элемент,
												ДанныеВыбора, 
												СтандартнаяОбработка)
	ТекСтрока = Элементы.Объекты1СВXDTO.ТекущаяСтрока;
	ВыбратьЗначениеОбъектаXDTO(ТекСтрока, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Объекты1СВXDTOФункцияПередЗаполнениемНачалоВыбора(Элемент,
												ДанныеВыбора,
												СтандартнаяОбработка)
	ИдСтроки = Элементы.Объекты1СВXDTO.ТекущаяСтрока;
	ТекДанные = Объект.Объекты1СВXDTO.НайтиПоИдентификатору(ИдСтроки);
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СпособПолучения = ТекДанные.СпособПолучения;
	Если СпособПолучения = "МассивПравил" Тогда
		СтандартнаяОбработка = Ложь;
		ВвестиБольшуюСтроку("Объект.Объекты1СВXDTO",
			"ФункцияПередЗаполнением",
			"",
			ИдСтроки,
			Нстр("ru='Введите текст функции'"),
			"ФункцияПередЗаполнениемОбъекта");
	КонецЕсли;
КонецПроцедуры
	
&НаКлиенте
Процедура Объекты1СВXDTOИмяТипаИсточникаПриИзменении(Элемент)
	ЗаполнитьИмяГруппыПравилПоСтроке(Элемент.Родитель);
КонецПроцедуры

&НаКлиенте
Процедура Объекты1СВXDTOИмяТипаПриемникаПриИзменении(Элемент)
	ЗаполнитьИмяГруппыПравилПоСтроке(Элемент.Родитель);
КонецПроцедуры

&НаКлиенте
Процедура Объекты1СВXDTOСпособПолученияПриИзменении(Элемент)
	ТекСтрока = Элементы.Объекты1СВXDTO.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПодготовитьЭлементПредставленияОбъектаXDTO(ТекСтрока);
	ОбновитьЗначениеОбъектаXDTOИзПредставления(ТекСтрока);
	УстановитьОтборПравилРеквизитовПоПравилуОбъекта();
КонецПроцедуры

&НаКлиенте
Процедура Объекты1СВXDTOИмяТипаПриемникаНачалоВыбора(Элемент,
													ДанныеВыбора,
													СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	//ДанныеВыбора = СписокТиповОбъектовXSD;
КонецПроцедуры

&НаКлиенте
Процедура Объекты1СВXDTOИмяТипаИсточникаНачалоВыбора(Элемент, 
													ДанныеВыбора, 
													СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	НачатьВыборИмениТипаИсточника(
		"Объект.Объекты1СВXDTO",
		"ИмяТипаИсточника",
		Элементы.Объекты1СВXDTO.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура Объекты1СВXDTOПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания(
		"ОбработатьАктивизациюСтрокиОбъекта1СВXDTOИСервер",
		0.1,
		Истина);
КонецПроцедуры

&НаКлиенте
Процедура Объекты1СВXDTOПередУдалением(Элемент, Отказ)
	ТекДанные = Элементы.Объекты1СВXDTO.ТекущиеДанные;
	Если НЕ Отказ И ТекДанные <> Неопределено Тогда
		УдалитьПравилаПреобразованияРеквизитов(
			ТекДанные.КлючПравилРеквизитов);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Объекты1СВXDTOПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И Копирование Тогда
		ТекДанные = Элементы.Объекты1СВXDTO.ТекущиеДанные;
		Если ТекДанные <> Неопределено
				И ТекДанные.СпособПолучения = "МассивПравил" Тогда
			ИсходныйКлючПравилРеквизитов = ТекДанные.КлючПравилРеквизитов;
			ТекДанные.ИмяГруппы = "";
			ТекДанные.КлючПравилРеквизитов = 0;
			ЗаполнитьКлючПравилРеквизитовТекущейСтроки();
			СкопироватьПравилаРеквизитовСНовымКлючом(
				ТекДанные.КлючПравилРеквизитов,
				ИсходныйКлючПравилРеквизитов);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Объекты1СВXDTOПередОкончаниемРедактирования(Элемент,
												НоваяСтрока, 
												ОтменаРедактирования, 
												Отказ)
	Если НоваяСтрока И ОтменаРедактирования И НЕ Отказ Тогда
		ТекДанные = Элементы.Объекты1СВXDTO.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			УдалитьПравилаПреобразованияРеквизитов(
				ТекДанные.КлючПравилРеквизитов);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Объекты1СВXDTOПриОкончанииРедактирования(Элемент,
												НоваяСтрока,
												ОтменаРедактирования)
	Если НоваяСтрока И НЕ ОтменаРедактирования Тогда
		ТекДанные = Элементы.Объекты1СВXDTO.ТекущиеДанные;
		Если ТекДанные <> Неопределено 
				И ТекДанные.СпособПолучения = "МассивПравил"
				И НЕ ЕстьПравилаРеквизитовДляКлюча(
								ТекДанные.КлючПравилРеквизитов) Тогда
				ЗаполнитьКлючПравилРеквизитовТекущейСтроки();
				ПодключитьОбработчикОжидания(
					"ЗаполнитьПравилаПреобразованияРеквизитовТекущегоОбъектаИСервер",
					0.1,
					Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Объекты1СВXDTOПриИзменении(Элемент)
	ЗаполнитьКлючПравилРеквизитовТекущейСтроки();
КонецПроцедуры

&НаКлиенте
Процедура ПравилаПреобразованияРеквизитов1СВXDTOПриАктивизацииСтроки(Элемент)
	ПравилаПреобразованияРеквизитов1СВXDTOОбновитьОформление();
КонецПроцедуры

&НаКлиенте
Процедура ПравилаПреобразованияРеквизитов1СВXDTOСпособПолученияПриИзменении(Элемент)
	ПравилаПреобразованияРеквизитов1СВXDTOОбновитьОформление();
	ОбновитьПравилоПреобразованияРеквизита(
		ПолучитьИмяТекущегоОбъектаXSD(ЭтаФорма),
		Элементы.ПравилаПреобразованияРеквизитов1СВXDTO.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПравилаПреобразованияРеквизитов1СВXDTOПередОкончаниемРедактирования(
															Элемент,
															НоваяСтрока, 
															ОтменаРедактирования, 
															Отказ)
	Если НоваяСтрока Тогда
		ТекДанныеОбъекты1СВXDTO = Элементы.Объекты1СВXDTO.ТекущиеДанные;
		ТекДанныеРеквизитов =
			Элементы.ПравилаПреобразованияРеквизитов1СВXDTO.ТекущиеДанные;
		Если ТекДанныеОбъекты1СВXDTO = Неопределено
				ИЛИ ТекДанныеРеквизитов = Неопределено Тогда
			Отказ = Истина;
		Иначе
			ТекДанныеРеквизитов.Ключ = ТекДанныеОбъекты1СВXDTO.КлючПравилРеквизитов;
			ТекДанныеРеквизитов.ПорядковыйНомер =
				ПолучитьПорядковыйНомерСвойстваОбъектаXSD(
					ТекДанныеОбъекты1СВXDTO.ИмяТипаПриемника,
					ТекДанныеРеквизитов.Приемник);
			флНужноОбновитьОтборПравилРеквизитовПоКлючу = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПравилаПреобразованияРеквизитов1СВXDTOПриИзменении(Элемент)
	Если флНужноОбновитьОтборПравилРеквизитовПоКлючу Тогда
		// После добавления строки она должна попасть в отбор.
		ТекДанные = Элементы.Объекты1СВXDTO.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			УстановитьОтборПравилРеквизитовТекущегоОбъекта(
				ТекДанные.КлючПравилРеквизитов);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПравилаПреобразованияРеквизитов1СВXDTOИсточникПолученияНачалоВыбора(
														Элемент, 
														ДанныеВыбора, 
														СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.ПравилаПреобразованияРеквизитов1СВXDTO.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.СпособПолучения = "Функция" Тогда
			ВвестиБольшуюСтроку("Объект.ПравилаПреобразованияРеквизитов1СВXDTO",
				"ИсточникПолучения",
				"",
				Элементы.ПравилаПреобразованияРеквизитов1СВXDTO.ТекущаяСтрока,
				Нстр("ru='Введите текст функции'"),
				"ФункцияЧтениеРеквизита");
		ИначеЕсли ТекДанные.СпособПолучения = "Реквизит" Тогда
			ДанныеВыбора = ПолучитьСписокИменРеквизитовОбъекта1С(
				ПолучитьИмяТекущегоОбъекта1С(ЭтаФорма));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПравилаПреобразованияРеквизитов1СВXDTOИсточникПолученияПриИзменении(Элемент)
	ТекДанные = Элементы.ПравилаПреобразованияРеквизитов1СВXDTO.ТекущиеДанные;
	Если ТекДанные <> Неопределено
			И ТекДанные.СпособПолучения = "Реквизит"
			И СтрНайти(ТекДанные.ИсточникПолучения, "(") > 0 Тогда
		ТекДанные.СпособПолучения = "Функция";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПравилаПреобразованияРеквизитов1СВXDTOИмяТипаXSDНачалоВыбора(
														Элемент,
														ДанныеВыбора,
														СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокТиповОбъектовXSD;
КонецПроцедуры

&НаКлиенте
Процедура ПравилаПреобразованияРеквизитов1СВXDTOПриемникНачалоВыбора(
														Элемент, 
														ДанныеВыбора, 
														СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;													
	ТекДанные = Элементы.ПравилаПреобразованияРеквизитов1СВXDTO.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.СпособЗаполнения = "Реквизит" Тогда
			ДанныеВыбора = Новый СписокЗначений;
			ДанныеВыбора.ЗагрузитьЗначения(ПолучитьИменаСвойствОбъектаXSD(
				Объект.МетаСвойстваОбъектовXSD,
				ПолучитьИмяТекущегоОбъектаXSD(ЭтаФорма)));
		ИначеЕсли ТекДанные.СпособЗаполнения = "Функция" Тогда
			ВвестиБольшуюСтроку("Объект.ПравилаПреобразованияРеквизитов1СВXDTO",
				"Приемник",
				"",
				Элементы.ПравилаПреобразованияРеквизитов1СВXDTO.ТекущаяСтрока,
				Нстр("ru='Введите текст функции'"),
				"ФункцияЗаписатьРеквизит");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПравилаПреобразованияРеквизитов1СВXDTOПриемникПриИзменении(Элемент)
	ПравилаПреобразованияРеквизитов1СВXDTOОбновитьОформление();
	ОбновитьПравилоПреобразованияРеквизита(
		ПолучитьИмяТекущегоОбъектаXSD(ЭтаФорма),
		Элементы.ПравилаПреобразованияРеквизитов1СВXDTO.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПравилаПреобразованияРеквизитов1СВXDTOСпособПреобразованияПриИзменении(Элемент)
	ПравилаПреобразованияРеквизитов1СВXDTOОбновитьОформление();
	ОбновитьПравилоПреобразованияРеквизита(
		ПолучитьИмяТекущегоОбъектаXSD(ЭтаФорма),
		Элементы.ПравилаПреобразованияРеквизитов1СВXDTO.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПравилаПреобразованияРеквизитов1СВXDTOОписаниеПреобразованияНачалоВыбора(
																Элемент, 
																ДанныеВыбора, 
																СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;													
	ТекДанные = Элементы.ПравилаПреобразованияРеквизитов1СВXDTO.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.СпособПреобразования = "Функция" Тогда
			ВвестиБольшуюСтроку("Объект.ПравилаПреобразованияРеквизитов1СВXDTO",
				"ОписаниеПреобразования",
				"",
				Элементы.ПравилаПреобразованияРеквизитов1СВXDTO.ТекущаяСтрока,
				Нстр("ru='Введите текст функции'"),
				"ФункцияПреобразованиеРеквизита");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СсылкаДляПреобразованияНачалоВыбора(Элемент,
											ДанныеВыбора,
											СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	НачатьВыборИмениТипаСсылки1СДляПреобразования(
		"СсылкаДляПреобразования",
		"ИмяТипа1СДляПреобразования",
		"ОбработатьИзменениеСсылки1СДляПреобразования");
КонецПроцедуры

&НаКлиенте
Процедура СсылкаДляПреобразованияПриИзменении(Элемент)
	ОбработатьИзменениеСсылки1СДляПреобразования();
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьЛогКонвертацииПриИзменении(Элемент)
	УстановитьВидимостьСистемыЛогирования();
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыНаКлиенте


&НаКлиенте
Процедура ПравилаПреобразованияРеквизитов1СВXDTOОбновитьОформление()
	ТекДанные = Элементы.ПравилаПреобразованияРеквизитов1СВXDTO.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		УстановитьОформлениеИсточникаВПравилахПреобразованияРеквизитов(ТекДанные);
		УстановитьОформлениеПриемникаВПравилахПреобразованияРеквизитов(ТекДанные);
		Элементы.ПравилаПреобразованияРеквизитов1СВXDTOОписаниеПреобразования.КнопкаВыбора =
			НЕ ПустаяСтрока(ТекДанные.СпособПреобразования);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеИсточникаВПравилахПреобразованияРеквизитов(ТекДанные)
	Если ТекДанные <> Неопределено Тогда
		Элемент = Элементы.ПравилаПреобразованияРеквизитов1СВXDTOИсточникПолучения;
		флИсточникИзСписка = ТекДанные.СпособПолучения = "Реквизит";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеПриемникаВПравилахПреобразованияРеквизитов(ТекДанные)
	Если ТекДанные <> Неопределено Тогда
		Элемент = Элементы.ПравилаПреобразованияРеквизитов1СВXDTOПриемник;
		флПриемникИзСписка = ТекДанные.СпособПолучения = "Реквизит";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКлючПравилРеквизитовТекущейСтроки()
	ТекДанные = Элементы.Объекты1СВXDTO.ТекущиеДанные;
	Если ТекДанные <> Неопределено 
			И ТекДанные.СпособПолучения = "МассивПравил"
			И ТекДанные.КлючПравилРеквизитов = 0 Тогда
		ТекДанные.КлючПравилРеквизитов = ПолучитьНовыйКлючПравилРеквизитов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНовыйКлючПравилРеквизитов()
	Результат = Объект.ПоследнийВыделенныйКлючПравилРеквизитов + 1;
	Объект.ПоследнийВыделенныйКлючПравилРеквизитов = Результат;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПередатьПравилаВладельцуФормыИСервер(Закрыть=Ложь)
	ЗаписатьПравилаВТекстXMLНаСервере();
	Модифицированность = Ложь;
	Если Закрыть Тогда
		флОповеститьОВыборе = Ложь;
		ОповеститьОВыборе(ТекстПравил);
		Закрыть();
	Иначе
		ОповеститьОВыборе(ТекстПравил);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьЭлементПредставленияЗначенияXDTO(ИдСтроки)
	ТекДанные = Объект.Значения1СВXDTO.НайтиПоИдентификатору(ИдСтроки);
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	флПростоеЗначение = (ТекДанные.СпособПолучения = "Значение");
	Элементы.Значения1СВXDTOПредставлениеПриемника.РедактированиеТекста =
		флПростоеЗначение;
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьЭлементПредставленияОбъектаXDTO(ИдСтроки)
	ТекДанные = Объект.Объекты1СВXDTO.НайтиПоИдентификатору(ИдСтроки);
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СпособПолучения = ТекДанные.СпособПолучения;
	// Все остальные способы получения не предусматривают непосредственное
	// редактирование текста в поле.
	флПростоеЗначение = (СпособПолучения = "Значение");
	Элементы.Объекты1СВXDTOПредставлениеПриемника.РедактированиеТекста =
		флПростоеЗначение;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиОбъекта1СВXDTOИСервер()
	УстановитьОтборПравилРеквизитовПоПравилуОбъекта();
	ТекДанные = ТекущиеДанныеКоллекции(
		ЭтаФорма, "Объект.Объекты1СВXDTO", "Объекты1СВXDTO");
	Если ТекДанные <> Неопределено
			И ТекДанные.СпособПолучения = "МассивПравил" Тогда
		ДобавитьВКэшРеквизитыОбъекта1СИСервер(
			ТекДанные.ИмяТипаИсточника);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКэшРеквизитыОбъекта1СИСервер(ИмяОбъекта1С)
	Если НЕ ПустаяСтрока(ИмяОбъекта1С) Тогда
		СтрокиКэша = КэшРеквизитовОбъектов1С.НайтиСтроки(
			Новый Структура("ИмяОбъекта1С", ИмяОбъекта1С));
		Если СтрокиКэша.Количество() = 0 Тогда
			ДобавитьВКэшРеквизитыОбъекта1СНаСервере(ИмяОбъекта1С);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначениеXDTOИзПредставления(ИдСтроки)
	ТекДанные = Объект.Значения1СВXDTO.НайтиПоИдентификатору(ИдСтроки);
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекДанные.СпособПолучения = "Значение" Тогда
		ИмяПоляОчищаем = "БольшаяСтрока";
		ИмяПоляЗаполняем = "ПростоеЗначение";
	Иначе
		ИмяПоляОчищаем = "ПростоеЗначение";
		ИмяПоляЗаполняем = "БольшаяСтрока";
	КонецЕсли;
	ТекДанные[ИмяПоляОчищаем] = Неопределено;
	ТекДанные[ИмяПоляЗаполняем] = ТекДанные.ПредставлениеПриемника;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначениеОбъектаXDTOИзПредставления(ИдСтроки)
	ТекДанные = Объект.Объекты1СВXDTO.НайтиПоИдентификатору(ИдСтроки);
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СпособПолучения = ТекДанные.СпособПолучения;
	Если СпособПолучения = "МассивПравил" Тогда
		Возврат;
	ИначеЕсли СпособПолучения = "Значение" Тогда
		ИмяПоляОчищаем = "БольшаяСтрока";
		ИмяПоляЗаполняем = "ПростоеЗначение";
	Иначе
		ИмяПоляОчищаем = "ПростоеЗначение";
		ИмяПоляЗаполняем = "БольшаяСтрока";
	КонецЕсли;
	ТекДанные[ИмяПоляОчищаем] = Неопределено;
	ТекДанные[ИмяПоляЗаполняем] = ТекДанные.ПредставлениеПриемника;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗначениеЗначенияXDTO(ИдСтроки, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Объект.Значения1СВXDTO.НайтиПоИдентификатору(ИдСтроки);
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СпособПолучения = ТекДанные.СпособПолучения;
	Если СпособПолучения = "XML" ИЛИ СпособПолучения = "Функция" Тогда
		СтандартнаяОбработка = Ложь;
		ВвестиБольшуюСтроку("Объект.Значения1СВXDTO",
			"БольшаяСтрока",
			"ПредставлениеПриемника",
			ИдСтроки,
			?(СпособПолучения = "XML",
				НСтр("ru='Введите текст XML представления значения XDTO'"),
				Нстр("ru='Введите текст функции'")),
			?(СпособПолучения = "XML", Неопределено, "ФункцияЗаполнениеЗначения"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗначениеОбъектаXDTO(ИдСтроки, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Объект.Объекты1СВXDTO.НайтиПоИдентификатору(ИдСтроки);
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СпособПолучения = ТекДанные.СпособПолучения;
	Если СпособПолучения = "XML" ИЛИ СпособПолучения = "Функция" Тогда
		СтандартнаяОбработка = Ложь;
		ВвестиБольшуюСтроку("Объект.Объекты1СВXDTO",
			"БольшаяСтрока",
			"ПредставлениеПриемника",
			ИдСтроки,
			?(СпособПолучения = "XML",
				НСтр("ru='Введите текст XML представления объекта XDTO'"),
				Нстр("ru='Введите текст функции'")),
			?(СпособПолучения = "XML", Неопределено, "ФункцияЗаполнениеОбъекта"));
	КонецЕсли;
КонецПроцедуры

// Процедура - Ввести большую строку
//
// Параметры:
//  ПутьКТаблицеФормы - Строка - путь к таблице в которой редактируем поле.
//  ИмяРеквизитаЗначения - 	 - 
//  ИмяРеквизитаПредставления - Строка - имя колонки таблицы, в которую будет
//		записано представление.
//  ИдСтроки - Число - идентификатор строки в таблице. 
//  Заголовок - Строка - заголовок формы редактирования.
//  Подсказка - Строка - подсказка, отображаемая в форме редактирования.
//
&НаКлиенте
Процедура ВвестиБольшуюСтроку(ПутьКТаблицеФормы,
								ИмяРеквизитаЗначения, 
								ИмяРеквизитаПредставления,
								ИдСтроки, 
								Заголовок="",
								ИмяПодсказки="")
	ТаблицаФормы =
		ОбщегоНазначенияКлиентУХ.ПолучитьЗнчениеРеквизитаПоПолномуПути(
			ЭтаФорма, ПутьКТаблицеФормы);
	ТекДанные = ТаблицаФормы.НайтиПоИдентификатору(ИдСтроки);
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекЗначение = ТекДанные[ИмяРеквизитаЗначения];
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ПутьКТаблицеФормы", ПутьКТаблицеФормы);
	ДопПараметры.Вставить("ИмяРеквизитаЗначения", ИмяРеквизитаЗначения);
	ДопПараметры.Вставить("ИмяРеквизитаПредставления", ИмяРеквизитаПредставления);
	ДопПараметры.Вставить("ИдСтроки", ИдСтроки);
	ДопПараметры.Вставить("СтароеЗначение", ТекЗначение);
	ОбработчикВыбораЗначенияДляXDTO = Новый ОписаниеОповещения(
		"ОбработатьВыборЗначенияДляXDTO", ЭтаФорма, ДопПараметры);
	ОткрытьФормуРедактированияФорматированногоТекста(
		ТекЗначение, ИмяПодсказки, Заголовок, ОбработчикВыбораЗначенияДляXDTO);
КонецПроцедуры


// Открыть форму редактирования текста программы
//
// Параметры:
//  ТекстПрограммы - Строка - текст для выполнения.
//  ИмяПодсказки - Строка - тип подсказки, которая будет показана
//						в окне редактирования:
//							- Макрос,
//							- ФункцияЗаполнениеЗначения,
//							- ФункцияЗаполнениеОбъекта,
//							- ФункцияПередЗаполнениемОбъекта,
//							- ФункцияЧтениеРеквизита,
//							- ФункцияПреобразованиеРеквизита,
//							- ФункцияЗаписатьРеквизит,
//							- ТекстПакетаXSD.
//  Заголовок - Строка - заголовок формы.
//  ОбработчикВыбораЗначения - ОписаниеОповещения - будет вызван, когда
//		пользователь успешно запишет и закроет форму редактирования.
//
&НаКлиенте
Процедура ОткрытьФормуРедактированияФорматированногоТекста(ТекстПрограммы,
													ИмяПодсказки,
													Заголовок,
													ОбработчикВыбораЗначения)
	//ПоказатьВводСтроки(
	//	ОбработчикВыбораЗначения, ТекстПрограммы, Заголовок,, Истина);
	ПараметрыРедактирования = Новый Структура;
	ПараметрыРедактирования.Вставить("ТекстПрограммы", ТекстПрограммы);
	ПараметрыРедактирования.Вставить("ИмяПодсказки", ИмяПодсказки);
	ПараметрыРедактирования.Вставить("Заголовок", Заголовок);
	ОткрытьФорму("Обработка.КонвертерОбъектовXDTOУХ.Форма.РедактированиеКода",
		ПараметрыРедактирования,
		ЭтаФорма,
		Истина,
		,
		,
		ОбработчикВыбораЗначения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры	

&НаКлиенте
Процедура ОбработатьВыборЗначенияДляXDTO(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено ИЛИ
			ДопПараметры.СтароеЗначение = Результат Тогда
		Возврат;
	КонецЕсли;
	ТаблицаФормы =
		ОбщегоНазначенияКлиентУХ.ПолучитьЗнчениеРеквизитаПоПолномуПути(
			ЭтаФорма, ДопПараметры.ПутьКТаблицеФормы);
	ТекДанные = ТаблицаФормы.НайтиПоИдентификатору(
		ДопПараметры.ИдСтроки);
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекДанные[ДопПараметры.ИмяРеквизитаЗначения] = Результат;
	Если НЕ ПустаяСтрока(ДопПараметры.ИмяРеквизитаПредставления) Тогда
		ТекДанные[ДопПараметры.ИмяРеквизитаПредставления] = 
			ПолучитьПредставлениеЗначенияДляXDTO(ТекДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачатьВыборИмениТипаИсточника(ПутьККоллекцииФормы,
										ИмяКолонки,
										ТекущаяСтрока)
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ПутьККоллекцииФормы", ПутьККоллекцииФормы);
	ДопПараметры.Вставить("ИмяКолонки", ИмяКолонки);
	ДопПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"ОбработатьВыборВидаТипаИсточника",
		ЭтаФорма,
		ДопПараметры);
	СписокИменТипов1С.ПоказатьВыборЭлемента(
		ОбработчикОповещения, 
		НСтр("ru='Выбор вида объекта метаданных 1С'"));
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборВидаТипаИсточника(ВидОбъекта, ДопПараметры) Экспорт
	Если ВидОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяВидаОбъекта = ВидОбъекта.Значение;
	Если ЭтоИмяСоставногоТипа1С(ИмяВидаОбъекта)
			ИЛИ ЭтоИмяПримитивногоТипа1С(ИмяВидаОбъекта) Тогда
		ОбработатьВыборИмениТипаИсточника(ВидОбъекта, ДопПараметры);
	Иначе
		НачатьВыборВидаИмениТипаОбъекта1С(ИмяВидаОбъекта, ДопПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЭтоИмяСоставногоТипа1С(ИмяТипа1С)
	Возврат
		СписокИменСоставныхТипов1С.НайтиПоЗначению(ИмяТипа1С) <> Неопределено;
КонецФункции

&НаКлиенте
Функция ЭтоИмяПримитивногоТипа1С(ИмяТипа1С)
	Возврат
		СписокИменПримитивныхТипов1С.НайтиПоЗначению(ИмяТипа1С) <> Неопределено;
КонецФункции

&НаКлиенте
Процедура НачатьВыборВидаИмениТипаОбъекта1С(ИмяВидаОбъекта, ДопПараметры) Экспорт
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"ОбработатьВыборИмениТипаИсточника",
		ЭтаФорма,
		ДопПараметры);
	СписокСЭлементамиВыбора = ЭтаФорма[ИмяВидаОбъекта];
	СписокСЭлементамиВыбора.ПоказатьВыборЭлемента(
		ОбработчикОповещения, 
		СтрШаблон(НСтр("ru='Выбор объекта метаданных 1С: %1'"),
			ИмяВидаОбъекта));
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборИмениТипаИсточника(ТипОбъекта1С, ДопПараметры) Экспорт
	Если ТипОбъекта1С = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Коллекция = ОбщегоНазначенияКлиентУХ.ПолучитьЗнчениеРеквизитаПоПолномуПути(
		ЭтаФорма, ДопПараметры.ПутьККоллекцииФормы);
	Если Коллекция <> Неопределено Тогда
		ОбщегоНазначенияКлиентСерверУХ.УстановитьЗначениеПоляКоллекции(
			Коллекция,
			ДопПараметры.ИмяКолонки,
			ДопПараметры.ТекущаяСтрока,
			ТипОбъекта1С.Значение);
	КонецЕсли;
КонецПроцедуры
	
&НаКлиенте
Процедура УстановитьОтборПравилРеквизитовПоПравилуОбъекта()
	ПравилоОбъекта = Элементы.Объекты1СВXDTO.ТекущиеДанные;
	Если ПравилоОбъекта = Неопределено
			ИЛИ ПравилоОбъекта.СпособПолучения <> "МассивПравил" Тогда
		ТекущийКлючПравилРеквизитов = 0; // Будет отобран пустой список.
	Иначе
		ТекущийКлючПравилРеквизитов = ПравилоОбъекта.КлючПравилРеквизитов;
	КонецЕсли;
	УстановитьОтборПравилРеквизитовТекущегоОбъекта(
		ТекущийКлючПравилРеквизитов);
	УстановитьОформлениеПравилПреобразованияРеквизитовОбъекта(
		ТекущийКлючПравилРеквизитов);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПравилРеквизитовТекущегоОбъекта(
									ТекущийКлючПравилРеквизитов)
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", ТекущийКлючПравилРеквизитов);
	Элементы.ПравилаПреобразованияРеквизитов1СВXDTO.ОтборСтрок =
		Новый ФиксированнаяСтруктура(Отбор);
	флНужноОбновитьОтборПравилРеквизитовПоКлючу = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеПравилПреобразованияРеквизитовОбъекта(
											ТекущийКлючПравилРеквизитов)
	флЕстьДоступ = ТекущийКлючПравилРеквизитов <> 0;
	Элементы.ПравилаПреобразованияРеквизитов1СВXDTO.Доступность = флЕстьДоступ;
	Элементы.ЗаполнитьПравилаПреобразованияРеквизитов.Доступность = флЕстьДоступ;
КонецПроцедуры

&НаКлиенте
Процедура НачатьВыборИмениТипаСсылки1СДляПреобразования(ИмяРеквизитаФормыСОбъектом1С,
													ИмяРеквизитаФормыСИменемТипа,
													ИмяПроцедурыПриИзменении)
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяРеквизитаФормыСОбъектом1С", ИмяРеквизитаФормыСОбъектом1С);
	ДопПараметры.Вставить("ИмяРеквизитаФормыСИменемТипа", ИмяРеквизитаФормыСИменемТипа);
	ДопПараметры.Вставить("ТекущееЗначение", ЭтаФорма[ИмяРеквизитаФормыСОбъектом1С]);
	ДопПараметры.Вставить("ТекущийТип1С", ЭтаФорма[ИмяРеквизитаФормыСИменемТипа]);
	ДопПараметры.Вставить("ИмяПроцедурыПриИзменении", ИмяПроцедурыПриИзменении);
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"ОбработатьВыборИмениТипа1С", ЭтаФорма, ДопПараметры);
	ВыбранЭлемент = ДоступныеКПреобразованиюТипы1С.НайтиПоЗначению(
		ДопПараметры.ТекущееЗначение);
	ДоступныеКПреобразованиюТипы1С.ПоказатьВыборЭлемента(
		ОбработчикОповещения,
		НСтр("ru='Выберите тип 1С'"),
		ДопПараметры.ТекущийТип1С);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборИмениТипа1С(ИмяТипа1С, ДопПараметры) Экспорт
	Если ИмяТипа1С = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДопПараметры.Вставить("ИмяТипа1С", ИмяТипа1С);
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"ОбработатьВыборЗначения1С",
		ЭтаФорма,
		ДопПараметры);
	ТипЗначения1С = ПреобразоватьИмяТипа1СВТип(ИмяТипа1С);
	Если ТипЗначения1С <> Неопределено Тогда
		ПоказатьВводЗначения(ОбработчикОповещения,
			ДопПараметры.ТекущееЗначение,
			НСтр("ru='Выбор значения 1С'"),
			ТипЗначения1С);
	Иначе
		ПоказатьОповещениеПользователя(
			"Некорректный тип значения 1С",,,, СтатусОповещенияПользователя.Важное);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборЗначения1С(Значение1С, ДопПараметры) Экспорт
	Если Значение1С = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ДопПараметры.ТекущееЗначение <> Значение1С Тогда
		ЭтаФорма[ДопПараметры.ИмяРеквизитаФормыСОбъектом1С] = Значение1С;
		ЭтаФорма[ДопПараметры.ИмяРеквизитаФормыСИменемТипа] =
			ДопПараметры.ИмяТипа1С;
		Если НЕ ПустаяСтрока(ДопПараметры.ИмяПроцедурыПриИзменении) Тогда
			ПодключитьОбработчикОжидания(
				ДопПараметры.ИмяПроцедурыПриИзменении, 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеСсылки1СДляПреобразования()
	Если ЗначениеЗаполнено(СсылкаДляПреобразования) Тогда
		Элементы.ИмяТипаXSDДляПреобразования.СписокВыбора.ЗагрузитьЗначения(
			ПолучитьИменаТиповXSDПолучаемыеИзТипа1С(
				Объект, ИмяТипа1СДляПреобразования));
	Иначе
		Элементы.ИмяТипаXSDДляПреобразования.СписокВыбора.ЗагрузитьЗначения(
			СписокТиповОбъектовXSD.ВыгрузитьЗначения());
	КонецЕсли;
КонецПроцедуры

// Возвращает массив уникальных значений полученных отоборм из указанной
// колонки коллекции.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗначенияКолонкиПоОтбору(Коллекция, Отбор, ИмяКолонки)
	мСтрок = Коллекция.НайтиСтроки(Отбор);
	Множество = Новый Соответствие;
	Для Каждого Строка Из мСтрок Цикл
		Множество.Вставить(Строка[ИмяКолонки], Истина);
	КонецЦикла;
	Возврат 
		ОбщегоНазначенияКлиентСерверУХ.КлючиСоответствияВМассив(
			Множество);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаТиповXSDПолучаемыеИзТипа1С(Объект, ИмяТипа1СДляПреобразования)
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяТипаИсточника", ИмяТипа1СДляПреобразования);
	Отбор.Вставить("Отключить", Ложь);
	Отбор.Вставить("ЕстьДопПараметры", Ложь);
	мИменаТиповXSD = ПолучитьЗначенияКолонкиПоОтбору(
		Объект.Объекты1СВXDTO, Отбор, "ИмяТипаПриемника");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		мИменаТиповXSD,
		ПолучитьЗначенияКолонкиПоОтбору(
			Объект.Значения1СВXDTO, Отбор, "ИмяТипаПриемника"),
		Истина);
	Возврат мИменаТиповXSD;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьИмяТипа1СВТип(ИмяТипа1С)
	Поз = СтрНайти(ИмяТипа1С, ".");
	Если Поз = 0 Тогда
		Возврат Тип(ИмяТипа1С);
	КонецЕсли;
	ВидОбъекта = Лев(ИмяТипа1С, Поз-1);
	ТипОбъекта = Сред(ИмяТипа1С, Поз+1);
	Попытка
		Тип_ = Тип(ВидОбъекта + "Ссылка." + ТипОбъекта);
	Исключение
		Тип_ = Неопределено;
	КонецПопытки;
	Возврат Тип_;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяГруппыПравил(ИмяИсточника, ИмяПриемника, СпособПолучения)
	Результат = СтрШаблон("%3(%1) -> %2",
		ИмяИсточника, ИмяПриемника, СпособПолучения);
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеЗначенияДляXDTO(СтрокаПравила)
	Если СтрокаПравила.СпособПолучения = "Значение" Тогда
		Возврат СтрокаПравила.ПростоеЗначение;
	КонецЕсли;
	Возврат Лев(СтрокаПравила.БольшаяСтрока, 30);
КонецФункции

&НаКлиенте
Процедура ЗаполнитьИмяГруппыПравилПоСтроке(Таблица)
	ТекДанные = Таблица.ТекущиеДанные;
	Если ТекДанные <> Неопределено
		И ПустаяСтрока(ТекДанные.ИмяГруппы)
		И НЕ ПустаяСтрока(ТекДанные.ИмяТипаИсточника)
		И НЕ ПустаяСтрока(ТекДанные.ИмяТипаПриемника)
		И НЕ ПустаяСтрока(ТекДанные.СпособПолучения) Тогда
		ТекДанные.ИмяГруппы = ПолучитьИмяГруппыПравил(
			ТекДанные.ИмяТипаИсточника,
			ТекДанные.ИмяТипаПриемника,
			ТекДанные.СпособПолучения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбУспешномЗавершенииОперацииСФайлом(
											ОбработанныеФайлы,
											ДопПараметры) Экспорт
	Если ОбработанныеФайлы <> Неопределено 
			И ОбработанныеФайлы.Количество() > 0 Тогда
		ПоказатьОповещениеПользователя(
			ДопПараметры.Заголовок,
			,
			ДопПараметры.Пояснение,
			ДопПараметры.Картинка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолучениеИмениФайлаПравилИСервер(Результат,
											Адрес,
											ПомещаемыйФайл,
											ДопПараметры) Экспорт
	Если Результат Тогда
		ПрочитатьПравилаИзХранилищаНаСервере(Адрес);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПравилоПреобразованияРеквизита(ИмяОбъектаXSD,
												ИдСтрокиПравилаРеквизита);
	ТекПравилоРеквизита = 
		Объект.ПравилаПреобразованияРеквизитов1СВXDTO.НайтиПоИдентификатору(
			ИдСтрокиПравилаРеквизита);
	Если ТекПравилоРеквизита = Неопределено
			ИЛИ ТекПравилоРеквизита.СпособЗаполнения = "Функция"
			ИЛИ ПустаяСтрока(ТекПравилоРеквизита.СпособЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПустаяСтрока(ИмяОбъектаXSD)
			И ПустаяСтрока(ТекПравилоРеквизита.ИмяТипаXSD)
			И НЕ ПустаяСтрока(ТекПравилоРеквизита.СпособПреобразования)
			И НЕ ПустаяСтрока(ТекПравилоРеквизита.Приемник)
			И ТекПравилоРеквизита.СпособЗаполнения = "Реквизит" Тогда
		ОписаниеСвойства = ПолучитьОписаниеСвойстваОбъектаXSD(
			ИмяОбъектаXSD, ТекПравилоРеквизита.Приемник);
		ТекПравилоРеквизита.ИмяТипаXSD =  ?(ОписаниеСвойства = Неопределено,
			"", ОписаниеСвойства.ИмяТипаСвойства);
	Иначе
		ТекПравилоРеквизита.ОписаниеПреобразования = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписаниеСвойстваОбъектаXSD(ИмяОбъектаXSD, ИмяСвойства)
	мСвойств = Объект.МетаСвойстваОбъектовXSD.НайтиСтроки(
		Новый Структура("ИмяТипаОбъекта, ИмяСвойства",
						ИмяОбъектаXSD, ИмяСвойства));
	Если мСвойств.Количество() > 0 Тогда
		Возврат мСвойств[0];
	КонецЕсли;
	Возврат Неопределено;
КонецФункции
				
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяТекущегоОбъекта1С(ЭтаФорма)
	ТекДанные = ТекущиеДанныеКоллекции(
		ЭтаФорма, "Объект.Объекты1СВXDTO", "Объекты1СВXDTO");
	Если ТекДанные = Неопределено
			ИЛИ ПустаяСтрока(ТекДанные.ИмяТипаИсточника) Тогда
		Возврат "";
	КонецЕсли;
	Возврат ТекДанные.ИмяТипаИсточника;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяТекущегоОбъектаXSD(ЭтаФорма)
	ТекДанные = ТекущиеДанныеКоллекции(
		ЭтаФорма, "Объект.Объекты1СВXDTO", "Объекты1СВXDTO");
	Если ТекДанные = Неопределено
			ИЛИ ПустаяСтрока(ТекДанные.ИмяТипаПриемника) Тогда
		Возврат "";
	КонецЕсли;
	Возврат ТекДанные.ИмяТипаПриемника;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекущиеДанныеКоллекции(ЭтаФорма,
								ИмяРеквизитаКоллекции, 
								ИмяЭлементаКоллекции)
	Элемент = ЭтаФорма.Элементы[ИмяЭлементаКоллекции];
	ТекСтрока = Элемент.ТекущаяСтрока;
	Если ТекСтрока <> Неопределено Тогда
		КоллекцияНаФорме = 
			ОбщегоНазначенияКлиентСерверУХ.ПолучитьРеквизитФормыПоПути(
				ЭтаФорма, ИмяРеквизитаКоллекции);
		Возврат КоллекцияНаФорме.НайтиПоИдентификатору(ТекСтрока);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура УстановитьОтладкуДляФормы(Отладка);
	Элементы.ГруппаОтладка.Видимость = Отладка;
	Элементы.ФормироватьЛогКонвертации.Видимость = Отладка;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокИменРеквизитовОбъекта1С(ИмяОбъекта1С)
	Результат = Новый СписокЗначений;
	Если НЕ ПустаяСтрока(ИмяОбъекта1С) Тогда
		мСтроки = КэшРеквизитовОбъектов1С.НайтиСтроки(
			Новый Структура("ИмяОбъекта1С", ИмяОбъекта1С));
		Для Каждого ОписаниеРеквизита Из мСтроки Цикл
			Результат.Добавить(ОписаниеРеквизита.ИмяРеквизита,
				СтрШаблон("%1: %2",
					ОписаниеРеквизита.ИмяРеквизита,
					ОписаниеРеквизита.ИмяТипа));
		КонецЦикла;
		Результат.СортироватьПоПредставлению();
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаСвойствОбъектаXSD(МетаСвойстваОбъектовXSD, ИмяОбъектаXSD)
	ИменаРеквизитов = Новый Массив;
	Если НЕ ПустаяСтрока(ИмяОбъектаXSD) Тогда
		мСвойств = МетаСвойстваОбъектовXSD.НайтиСтроки(
			Новый Структура("ИмяТипаОбъекта", ИмяОбъектаXSD));
		Для Каждого ОписаниеСвойства Из мСвойств Цикл
			ИменаРеквизитов.Добавить(ОписаниеСвойства.ИмяСвойства);
		КонецЦикла;
	КонецЕсли;
	Возврат ИменаРеквизитов;
КонецФункции

&НаКлиенте
Процедура ОбработкаПросмотраОшибкиЗаглушка(Результат, ДопПараметры) Экспорт
	// Обработка не предусмотрена.
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПорядковыйНомерСвойстваОбъектаXSD(ИмяТипаОбъектаXSD, ИмяСвойства)
	Если ПустаяСтрока(ИмяТипаОбъектаXSD) ИЛИ ПустаяСтрока(ИмяСвойства) Тогда
		Возврат 0;
	КонецЕсли;
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяТипаОбъекта", ИмяТипаОбъектаXSD);
	Отбор.Вставить("ИмяСвойства", ИмяСвойства);
	мСтрок = Объект.МетаСвойстваОбъектовXSD.НайтиСтроки(Отбор);
	Если мСтрок.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	Возврат мСтрок[0].ПорядковыйНомер;
КонецФункции

&НаКлиенте
Процедура УдалитьПравилаПреобразованияРеквизитов(КлючПравилРеквизитов)
	мСтрокПравилРеквизитов = ПолучитьПравилаРеквизитовДляКлюча(
		КлючПравилРеквизитов);
	Для Каждого Строка Из мСтрокПравилРеквизитов Цикл
		Объект.ПравилаПреобразованияРеквизитов1СВXDTO.Удалить(Строка);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПравилаПреобразованияРеквизитовТекущегоОбъектаИСервер()
	ТекСтрокаОбъекта = Элементы.Объекты1СВXDTO.ТекущаяСтрока;
	Если ТекСтрокаОбъекта <> Неопределено Тогда
		ТекДанные = Объект.Объекты1СВXDTO.НайтиПоИдентификатору(ТекСтрокаОбъекта);
		Если ТекДанные.СпособПолучения = "МассивПравил" Тогда
			ЗаполнитьПравилаПреобразованияРеквизитовНаСервере(ТекСтрокаОбъекта);
		КонецЕсли;
		УстановитьОтборПравилРеквизитовПоПравилуОбъекта();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПравилаРеквизитовСНовымКлючом(НовыйКлюч, ИсходныйКлюч)
	мСтрокиДляКопирования = ПолучитьПравилаРеквизитовДляКлюча(ИсходныйКлюч);
	Для Каждого Источник Из мСтрокиДляКопирования Цикл
		НоваяСтрока =
			Объект.ПравилаПреобразованияРеквизитов1СВXDTO.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);
		НоваяСтрока.Ключ = НовыйКлюч;
	КонецЦикла
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПравилаРеквизитовДляКлюча(Ключ)
	Отбор = Новый Структура("Ключ", Ключ);
	Возврат Объект.ПравилаПреобразованияРеквизитов1СВXDTO.НайтиСтроки(
		Отбор);
КонецФункции

&НаКлиенте
Функция ЕстьПравилаРеквизитовДляКлюча(Ключ)
	Возврат ПолучитьПравилаРеквизитовДляКлюча(Ключ).Количество() > 0;
КонецФункции

&НаКлиенте
Процедура ОбновитьПрефиксыТиповДанныхXSD()
	Если НЕ ПустаяСтрока(ОбработатьИзменениеПространстваИмен) Тогда
		ОбновитьПрефиксыТиповДанныхXSDНаСервере(
			ОбработатьИзменениеПространстваИмен);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСистемыЛогирования()
	Элементы.СтраницаЛогФормированияXML.Видимость = ФормироватьЛогКонвертации;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагОтладки(ИспользоватьОтладку)
	Элементы.ФормаОтладка.Пометка = ИспользоватьОтладку;
	УстановитьОтладкуДляФормы(Элементы.ФормаОтладка.Пометка);
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыНаСервере


&НаСервере
Процедура ОбработатьИзменениеЗначения1СНаСервере(ИдСтроки)
	ТекДанные = Объект.Значения1СВXDTO.НайтиПоИдентификатору(ИдСтроки);
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Значение1С = ТекДанные.Значение1С;
	Если Значение1С <> Неопределено Тогда
		ТекДанные.ИмяТипаИсточника = 
			Обработки.КонвертерОбъектовXDTOУХ.ПолучитьИмяТипа1С(Значение1С);
		ТекДанные.ИмяЗначения =
			Обработки.КонвертерОбъектовXDTOУХ.ПолучитьИмяЗначения1С(ТекДанные.Значение1С);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПеробразоватьОбъект1СВXMLНаСервере()
	Конвертер = РеквизитФормыВЗначение("Объект");
	Если Элементы.ФормаОтладка.Пометка Тогда
		Конвертер.ВключитьОтладку();
	Иначе
		Конвертер.ВыключитьОтладку();
	КонецЕсли;
	РезультатТекстXML = Конвертер.ПреобразоватьПоУмолчаниюОбъект1СВТекстXML(
		СсылкаДляПреобразования,
		Неопределено,
		ИмяТипаXSDДляПреобразования,
		Неопределено);
	ЛогКонвертации = Конвертер.ПолучитьЛогКонвертацииКакТекст();
	Если РезультатТекстXML.ЕстьОшибка Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = РезультатТекстXML.Ошибка;
		Сообщение.Сообщить();
	Иначе
		ТекстXMLПредставленияОбъектаXDTO = РезультатТекстXML.Результат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьПрограммуНаСервере()
	ТекстПрограммыКонвертацииВXDTO = 
		НСтр("ru='--- Не реализовано ---'");
КонецПроцедуры

&НаСервере
Функция ПроверитьСообщитьКодыПространствИменXSDКорректны()
	Ошибки = Неопределено;
	Корректны = ПроверитьУникальностьКолонокКоллекции(
		"Объект.ПространстваИменXSD",
		СтрРазделить("ИмяПространстваИмен,Код", ","),
		Ошибки);
	Корректны = ПроверитьЗаполненностьКлонокКоллекции(
					"Объект.ПространстваИменXSD",
					СтрРазделить("ИмяПространстваИмен", ","),
					Ошибки)
		И Корректны;
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	Возврат Корректны;
КонецФункции

&НаСервере
Функция ПроверитьУникальностьКолонокКоллекции(ПутьККоллекции,
											мИменаКолонок,
											Ошибки=Неопределено)
	Коллекция = ОбщегоНазначенияКлиентСерверУХ.ПолучитьРеквизитФормыПоПути(
		ЭтаФорма, ПутьККоллекции);
	Для Каждого ИмяКолонки Из мИменаКолонок Цикл
		мПовторяющиесяЗначения = НайтиПовторяющиесяЗначенияКолонки(
			Коллекция, ИмяКолонки);
		Если мПовторяющиесяЗначения.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				ПутьККоллекции + "." + ИмяКолонки,
				СтрШаблон(НСтр("ru='Значения в колонке %1 не уникальны:%2%3'"),
					ИмяКолонки,
					Символы.ПС,
					СтрСоединить(мПовторяющиесяЗначения, ", ")),
				Неопределено);
		КонецЕсли;
	КонецЦикла;
	Возврат Ошибки = Неопределено ИЛИ Ошибки.Количество() = 0;
КонецФункции

&НаСервере
Функция ПроверитьЗаполненностьКлонокКоллекции(ПутьККоллекции,
											мИменаКолонок,
											Ошибки=Неопределено)
	Коллекция = ОбщегоНазначенияКлиентСерверУХ.ПолучитьРеквизитФормыПоПути(
		ЭтаФорма, ПутьККоллекции);
	Для Каждого ИмяКолонки Из мИменаКолонок Цикл
		Для Каждого Строка Из Коллекция Цикл
			Если НЕ ЗначениеЗаполнено(Строка[ИмяКолонки]) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
					Ошибки,
					СтрШаблон("%1[%%1].%2", ПутьККоллекции, ИмяКолонки),
					НСтр("ru='Значение должно быть заполнено!'"),
					Неопределено,
					Строка.НомерСтроки-1);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Ошибки = Неопределено ИЛИ Ошибки.Количество() = 0;
КонецФункции

// Возвращаемое значение:
// 		- {Колонка: [повторяющиеся значения]}
//
&НаСервереБезКонтекста
Функция НайтиПовторяющиесяЗначенияКолонки(Коллекция, ИмяКолонки)
	Результат = Новый Массив;
	ВстреченныеЗначения = Новый Соответствие;
	Для Каждого Строка Из Коллекция Цикл
		Значение = Строка[ИмяКолонки];
		Повтор = ВстреченныеЗначения[Значение];
		Если Повтор = Неопределено Тогда
			ВстреченныеЗначения[Значение] = Ложь;
		ИначеЕсли Повтор = Ложь Тогда
			Результат.Добавить(Значение);
			ВстреченныеЗначения[Значение] = Истина
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ПрочитатьПравилаИзТекстаXMLНаСервере()
	Конвертер = РеквизитФормыВЗначение("Объект");
	Конвертер.ПрочитатьИзТекста(ТекстПравил);
	ЗначениеВРеквизитФормы(Конвертер, "Объект");
	ЗаполнитьРеквизитыФормыМетаданных1С();
	ИнициализироватьРеквизитыФормыМетаданныхXSD();
	ЗаполнитьРеквизитыФормыПоПравилам();
	УстановитьОформлениеФормыПоПравилам();
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеФормыПоПравилам()
	Элементы.Объекты1СВXDTOИмяТипаПриемника.СписокВыбора.Очистить();
	ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(
		СписокТиповОбъектовXSD,
		Элементы.Объекты1СВXDTOИмяТипаПриемника.СписокВыбора);
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПравилаВТекстXMLНаСервере()
	Конвертер = РеквизитФормыВЗначение("Объект");
	ТекстПравил = Конвертер.ВТекст();
КонецПроцедуры

&НаСервере
Процедура ОбновитьМетаданныеXSDНаСервере()
	Конвертер = РеквизитФормыВЗначение("Объект");
	Конвертер.ЗаполнитьМетаданныеXSD();
	ЗначениеВРеквизитФормы(Конвертер, "Объект");
	ИнициализироватьРеквизитыФормыМетаданныхXSD();
	УстановитьОформлениеФормыПоПравилам();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормыМетаданных1С()
	мТипы1С = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		мТипы1С,
		Объект.Объекты1СВXDTO.Выгрузить(, "ИмяТипаИсточника")
			.ВыгрузитьКолонку(0),
		Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		мТипы1С,
		Объект.Значения1СВXDTO.Выгрузить(, "ИмяТипаИсточника").ВыгрузитьКолонку(0),
		Истина);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(
		мТипы1С, "");
	ДоступныеКПреобразованиюТипы1С.ЗагрузитьЗначения(мТипы1С);
	//ЗаполнитьСпискиИменТипов1С();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиИменТипов1С()
	СписокИменПримитивныхТипов1С.ЗагрузитьЗначения(
	    Обработки.КонвертерОбъектовXDTOУХ.ПолучитьМассивИменПримитивныхТипов1С());
	СписокИменСоставныхТипов1С.ЗагрузитьЗначения(	
		Обработки.КонвертерОбъектовXDTOУХ.ПолучитьМассивИменСоставныхТипов1С());
	СписокИменСсылочныхТипов1С.ЗагрузитьЗначения(	
		Обработки.КонвертерОбъектовXDTOУХ.ПолучитьМассивИменСсылочныхТипов1С());
	// Этот список для отображения. Он позволяет сослаться в значении
	// на другой список, который содержит имена объектов метаданных
	// выбранного типа.
	СписокИменТипов1С.Очистить();
	СписокИменТипов1С.Добавить("СписокПеречисленийБД", "Перечисление");
	СписокИменТипов1С.Добавить("СписокСправочниковБД", "Справочник");
	СписокИменТипов1С.Добавить("СписокДокументовБД", "Документ");
	СписокИменТипов1С.Добавить("СписокТабличныхЧастейБД", "ТабличнаяЧасть");
	ОбщегоНазначенияКлиентСерверУХ.ДобавитьВСписокИзСписка(
		СписокИменТипов1С, СписокИменСоставныхТипов1С);
	ОбщегоНазначенияКлиентСерверУХ.ДобавитьВСписокИзСписка(
		СписокИменТипов1С, СписокИменПримитивныхТипов1С);
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРеквизитыФормыМетаданныхXSD()
	СписокТиповЗначенийXSD.ЗагрузитьЗначения(
		Объект.МетаТипыЗначенийXSD.Выгрузить(, "ИмяТипа")
			.ВыгрузитьКолонку(0));
	СписокТиповОбъектовXSD.ЗагрузитьЗначения(
		Объект.МетаТипыОбъектовXSD.Выгрузить(, "ИмяТипа")
			.ВыгрузитьКолонку(0));
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьЭлементыФормыМетаданных1С()
	ЗаполнитьСписокСправочниковБД();
	ЗаполнитьСписокПеречисленийБД();
	ЗаполнитьСписокДокументовБД();
	ЗаполнитьСписокТабличныхЧастейБД();
	ЗаполнитьСпискиИменТипов1С();
	ИмяПространстваW3C =
		Обработки.КонвертерОбъектовXDTOУХ.ПолучитьИмяПространстваW3C();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДокументовБД()
	СписокДокументовБД.Очистить();
	Выборка =
		ПолучитьРезультатЗапросаИдентификаторовОбъектовБД("Документы");
	Пока Выборка.Следующий() Цикл
		СписокДокументовБД.Добавить(Выборка.ПолноеИмя, Выборка.Синоним);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСправочниковБД()
	СписокСправочниковБД.Очистить();
	Выборка =
		ПолучитьРезультатЗапросаИдентификаторовОбъектовБД("Справочники");
	Пока Выборка.Следующий() Цикл
		СписокСправочниковБД.Добавить(Выборка.ПолноеИмя, Выборка.Синоним);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокТабличныхЧастейБД()
	СписокТабличныхЧастейБД.Очистить();
	ДобавитьТабличныеЧастиВСписокБД(СписокТабличныхЧастейБД, "Справочники");
	ДобавитьТабличныеЧастиВСписокБД(СписокТабличныхЧастейБД, "Документы");
КонецПроцедуры

&НаСервере
Процедура ДобавитьТабличныеЧастиВСписокБД(СписокТабличныхЧастейБД,
										  ИмяКорневогоЭлемента)
	Выборка =
		ПолучитьРезультатЗапросаИдентификаторовОбъектовБД(ИмяКорневогоЭлемента);
	Пока Выборка.Следующий() Цикл
		МетаданныеОбъектаСТЧ = Метаданные.НайтиПоПолномуИмени(Выборка.ПолноеИмя);
		Для Каждого МетаданныеТЧ Из МетаданныеОбъектаСТЧ.ТабличныеЧасти Цикл
			СписокТабличныхЧастейБД.Добавить(
				МетаданныеТЧ.ПолноеИмя(),
				ИмяКорневогоЭлемента + "." + МетаданныеОбъектаСТЧ.Синоним + "." + МетаданныеТЧ.Синоним);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПеречисленийБД()
	СписокПеречисленийБД.Очистить();
	мПеречислений = ПолучитьМассивОписанийПеречисленийБД();
	Для Каждого Перечисление Из мПеречислений Цикл
		СписокПеречисленийБД.Добавить(Перечисление.ПолноеИмя, Перечисление.Синоним);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРезультатЗапросаИдентификаторовОбъектовБД(ИмяКорневогоЭлемента)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыОбъектовМетаданных.Синоним КАК Синоним,
		|	ИдентификаторыОбъектовМетаданных.ПолноеИмя КАК ПолноеИмя
		|ИЗ
		|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		|ГДЕ
		|	ИдентификаторыОбъектовМетаданных.Родитель.ПолноеИмя = &ИмяКорневогоЭлемента
		|	И НЕ ИдентификаторыОбъектовМетаданных.ПометкаУдаления";
	Запрос.УстановитьПараметр("ИмяКорневогоЭлемента", ИмяКорневогоЭлемента);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выбрать();
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивОписанийПеречисленийБД()
	мРезультат = Новый Массив;
	Для Каждого МетаПеречисление Из Метаданные.Перечисления Цикл
		мРезультат.Добавить(Новый Структура(
			"ПолноеИмя, Синоним", 
			МетаПеречисление.ПолноеИмя(),
			МетаПеречисление.Синоним));
	КонецЦикла;
	Возврат мРезультат;
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыФормыПоПравилам()
	ТекущийКлючПравилРеквизитов = 0;
	Для Каждого СтрокаЗначения Из Объект.Значения1СВXDTO Цикл
		СтрокаЗначения.ПредставлениеПриемника =
			ПолучитьПредставлениеЗначенияДляXDTO(СтрокаЗначения);
	КонецЦикла;
	Для Каждого СтрокаОбъекта Из Объект.Объекты1СВXDTO Цикл
		СтрокаОбъекта.ПредставлениеПриемника =
			ПолучитьПредставлениеЗначенияДляXDTO(СтрокаОбъекта);
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПравилаПреобразованияРеквизитовНаСервере(ТекСтрокаОбъекта)
	Если ТекСтрокаОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекДанные = Объект.Объекты1СВXDTO.НайтиПоИдентификатору(ТекСтрокаОбъекта);
	Если ТекДанные = Неопределено 
			ИЛИ ТекДанные.СпособПолучения <> "МассивПравил" Тогда
		Возврат;
	КонецЕсли;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ОбновитьПравилаПреобразованияРеквизитовОбъектаXSD(
		ТекДанные);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры

&НаСервере
Процедура ПолучитьИмяВерсиюТекущейКонфигурацииНаСервере()
	ИмяВерсия =
		Обработки.КонвертерОбъектовXDTOУХ.ПолучитьИмяВерсиюКонфигурации();
	Объект.ИмяКонфигурации1С = ИмяВерсия.Имя;
	Объект.ВерсияКонфигурации1С = ИмяВерсия.Версия;
КонецПроцедуры

&НаСервере
Процедура ДобавитьW3CXMLСхемуНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ДобавитьПространствоИменXSD(
		"xs", ИмяПространстваW3C, "");
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	ОбновитьМетаданныеXSDНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьНовыйКодПространстваИмен(ПространстваИменXSD)
	ТЗКоды = ПространстваИменXSD.Выгрузить(, "Код");
	ТЗКоды.Свернуть("Код");
	ТЗКоды.Сортировать("Код Убыв");
	Возврат ПолучитьСледующийКодПространстваИмен(
		?(ТЗКоды.Количество() = 0, "", ТЗКоды[0].Код));
КонецФункции

&НаСервере
Функция ПолучитьСледующийКодПространстваИмен(ИсходныйКод)
	Если ПустаяСтрока(ИсходныйКод) Тогда
		Возврат "ns";
	КонецЕсли;
	ПрефиксНомер = РазбитьНаПрефиксИНомер(ИсходныйКод);
	Возврат ПрефиксНомер.Префикс + Строка(ПрефиксНомер.Номер + 1);
КонецФункции

&НаСервере
Функция РазбитьНаПрефиксИНомер(КодСтрока)
	НачалоНомера = ПерваяСКонцаПозицияЦифры(КодСтрока);
	Результат = Новый Структура;
	Результат.Вставить("Префикс",
		?(НачалоНомера <= 1, "ns", Лев(КодСтрока, НачалоНомера-1)));
	Результат.Вставить("Номер",
		?(НачалоНомера > СтрДлина(КодСтрока), 0, Сред(КодСтрока, НачалоНомера)));
	Возврат Результат;
КонецФункции

// Если находит, то возвращает позицию в строке, такую, что
//  все символы, начиная с нее - это цифры.
//
// Параметры:
//  Строка_	 - Строка - строка в которой делаем поиск.
// 
// Возвращаемое значение:
//   - Число - номер искомой позиции (нумерация начинается с 1).
//		Если не находим, то возвращаем длину строки + 1.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПерваяСКонцаПозицияЦифры(Строка_)
	ПозЧисла = СтрДлина(Строка_);
	Пока ПозЧисла > 0 Цикл
		Символ_ = Сред(Строка_, ПозЧисла, 1);
		Если НЕ СимволЭтоЧисло(Символ_) Тогда
			Прервать;
		КонецЕсли;
		ПозЧисла = ПозЧисла - 1;
	КонецЦикла;
	Возврат ПозЧисла+1;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СимволЭтоЧисло(Символ_)
	Возврат Символ_ >= "0" И Символ_ <= "9";
КонецФункции

&НаСервере
Процедура ПрочитатьПравилаИзХранилищаНаСервере(АдресВХранилище)
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВХранилище);
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЧтениеДанных = Новый ЧтениеДанных(ДвоичныеДанные,
		КодировкаТекста.UTF8,, Символы.ВК+Символы.ПС, Символы.ВК+Символы.ПС);
	ТекстПравил = ЧтениеДанных.ПрочитатьСимволы();
	ПрочитатьПравилаИзТекстаXMLНаСервере();
	ТекстПравил = "";
КонецПроцедуры

&НаСервере
Функция СохранитьПравилаВХранилищеНаСервере()
	ЗаписатьПравилаВТекстXMLНаСервере();
	АдресВХранилище = ПоместитьВоВременноеХранилище(
		ПолучитьДвоичныеДанныеИзСтроки(ТекстПравил, КодировкаТекста.UTF8));
	ТекстПравил = "";
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(
		"rules.xml", АдресВХранилище));
	Возврат ПолучаемыеФайлы;
КонецФункции

&НаСервере
Процедура ДобавитьВКэшРеквизитыОбъекта1СНаСервере(ИмяОбъекта1С)
	Если НЕ ПустаяСтрока(ИмяОбъекта1С) Тогда
		СтрокиКэша = КэшРеквизитовОбъектов1С.НайтиСтроки(
			Новый Структура("ИмяОбъекта1С", ИмяОбъекта1С));
		Если СтрокиКэша.Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
		ТЗРеквизитов = 
			Обработки.КонвертерОбъектовXDTOУХ.ПолучитьИменаРеквизитовОбъекта1С(
				ИмяОбъекта1С);
		Для Каждого ОписаниеРеквизита Из ТЗРеквизитов Цикл
			НоваяСтрока = КэшРеквизитовОбъектов1С.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеРеквизита);
			НоваяСтрока.ИмяОбъекта1С = ИмяОбъекта1С;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверитьПравилоКонвертацииОбъектаНаСервере()
	Перем РезультатОбъектXDTO;
	Конвертер = РеквизитФормыВЗначение("Объект");
	Возврат Конвертер.ПроверитьПравилаДляОбъекта1С(
		СсылкаДляПреобразования,
		Неопределено,
		ИмяТипаXSDДляПреобразования,
		Ложь);
КонецФункции

&НаСервере
Процедура ОбновитьДеревоПравилОтТипаXSDНаСервере(ИмяТипаXSD)
	КонвертацияОбъект = РеквизитФормыВЗначение("Объект");
	КонвертацияОбъект.ОбновитьПравилаОтТипаОбъектаXSD(ИмяТипаXSD);
	ЗначениеВРеквизитФормы(КонвертацияОбъект, "Объект");
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьРазделительПереименованияПространстваИмен()
	Возврат ">";
КонецФункции

&НаСервере
Процедура ОбновитьПрефиксыТиповДанныхXSDНаСервере(КодыПростанствИменДляОбновления)
	мПереименований = СтрРазделить(КодыПростанствИменДляОбновления, Символы.ПС);
	КодыПростанствИменДляОбновления = "";
	Разделитель = ПолучитьРазделительПереименованияПространстваИмен();
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого ОписаниеПереименования Из мПереименований Цикл
		мИмена = СтрРазделить(ОписаниеПереименования, Разделитель);
		Если мИмена.Количество() = 2 Тогда
			ОбработкаОбъект.ПереименоватьПространствоИменВПсевдонимахТиповXSD(
				мИмена[0], мИмена[1]);
		КонецЕсли;
	КонецЦикла;
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры


#КонецОбласти
