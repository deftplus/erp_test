
// Возвращает структуру измерений по идентификатору расшифровки РасшифровкаВход
&НаСервере
Функция ПолучитьПоляРасшифровки(РасшифровкаВход)
	// Инициализация.
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	// Получение данных по расшифровке.
	Попытка
		ДанныеРасшифровкиКомпоновки = ПолучитьИзВременногоХранилища(ДанныеРасшифровкиАдрес);	
		РодителиРасшифровки = ДанныеРасшифровкиКомпоновки.Элементы[РасшифровкаВход].ПолучитьРодителей(); 	//Получим расшифровку заголовочных ячеек
		Для Каждого ТекРодителиРасшифровки Из РодителиРасшифровки Цикл
			ПоляРодителей = ДанныеРасшифровкиКомпоновки.Элементы[ТекРодителиРасшифровки.Идентификатор].ПолучитьПоля();	//Получим поля заголовочной ячейки
			Для Каждого ТекПоляРодителей Из ПоляРодителей Цикл									//Поиск значений необходимых полей
				Если СокрЛП(ТекПоляРодителей.Поле) = "Организация" Тогда
					РезультатФункции.Вставить("Организация", ТекПоляРодителей.Значение);
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЦикла; 
		КонецЦикла;
	Исключение
		ТекстСообщения = НСтр("ru = 'При расшифровке возникли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьПоляРасшифровки()

// Осуществляет расшифровку дерева этапов деревом операций.
&НаСервере
Процедура Расшифровка_Сервер(РасшифровкаВход)
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	СтруктураРасшифровки = ПолучитьПоляРасшифровки(РасшифровкаВход);
	Организация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураРасшифровки, "Организация", ПустаяОрганизация);
	ВывестиОтчетПоОперациям();
КонецПроцедуры		// Расшифровка_Сервер()

// Возвращает индекс картинки строки для дерева этапов.
&НаСервере
Функция ПолучитьИндексКартинкиДерева(СтрокаДереваВход, НаименованиеКолонкиВход)
	РезультатФункции = -1;
	ТекОрганизацияЭтапа = СтрокаДереваВход[НаименованиеКолонкиВход];
	Если ТипЗнч(ТекОрганизацияЭтапа) = Тип("СправочникСсылка.Организации") Тогда
		// Типы организаций.
		ЕстьЗависимыеОрганизации = Ложь;
		Для Каждого ТекСтроки Из СтрокаДереваВход.Строки Цикл
			Если ТипЗнч(ТекСтроки[НаименованиеКолонкиВход]) = Тип("СправочникСсылка.Организации") Тогда
				ЕстьЗависимыеОрганизации = Истина;
				Прервать;
			Иначе
				// Продолжаем поиск.
			КонецЕсли;
		КонецЦикла;
		Если ЕстьЗависимыеОрганизации Тогда
			РезультатФункции = 1;			// Группа компаний.
		Иначе	
			Если СтрокаДереваВход.ЭлиминирующаяОрганизация Тогда
				РезультатФункции = 2;		// Элиминирующая организация.
			Иначе
				РезультатФункции = 0;		// Обычная организация.
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ТекОрганизацияЭтапа) = Тип("СправочникСсылка.ЭтапыУниверсальныхПроцессов") Тогда
		// Типы этапов.
		ТекТипЭтапа = ТекОрганизацияЭтапа.ТипЭтапа;
		Если ТекТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности Тогда
			ТекТипОрганизацииЭтапа = ТекОрганизацияЭтапа.ТипОрганизацийЭтапа;
			Если ТекТипОрганизацииЭтапа = Перечисления.ТипыОрганизационныхЕдиниц.Обычная Тогда
				РезультатФункции = 4;				// Этап консолидируемой организации.
			ИначеЕсли ТекТипОрганизацииЭтапа = Перечисления.ТипыОрганизационныхЕдиниц.Консолидирующая Тогда
				РезультатФункции = 5;				// Этап консолидируемой организации.
			ИначеЕсли ТекТипОрганизацииЭтапа = Перечисления.ТипыОрганизационныхЕдиниц.Элиминирующая Тогда
				РезультатФункции = 6;				// Этап элиминирующей организации.
			Иначе
				РезультатФункции = 4;				// Неизвестный вариант.
			КонецЕсли;
		ИначеЕсли ТекТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Обработка Тогда
			РезультатФункции = 7;					// Этап обработка.
		ИначеЕсли ТекТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Оповещение Тогда
			РезультатФункции = 8;					// Этап оповещение.
		ИначеЕсли ТекТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ДочернийМаршрут Тогда
			РезультатФункции = 9;					// Этап оповещение.			
		Иначе
			РезультатФункции = 7;					// Неизвестный вариант.
		КонецЕсли;
	Иначе	
		РезультатФункции = -1;				// Пустая картинка
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьИндексКартинкиДерева()

// Заполняет колонку ЭтапОрганизация в дереве ДеревоВход. Параметр ГлубинаРекурсии 
// защищает от бесконечной рекурсии.
&НаСервере
Процедура ПроставитьПоляИзмеренийЭтапов(ДеревоВход, ГлубинаРекурсии = 0)
	Если ГлубинаРекурсии > 10000 Тогда
		Возврат;			// Бесконечная рекурсия.
	КонецЕсли;
	СтрокиДерева = ДеревоВход.Строки;
	ПустойЭтап = Справочники.ЭтапыУниверсальныхПроцессов.ПустаяСсылка();
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	Если ОтображениеВВидеЭтапов(СпособОтображенияДереваЭтапов) Тогда
		Для Каждого ТекСтрокиДерева Из СтрокиДерева Цикл
			Если (ТекСтрокиДерева.ЭтапПроцесса = Неопределено) И (ТекСтрокиДерева.Организация <> Неопределено) Тогда
				ТекСтрокиДерева.ЭтапОрганизация = ТекСтрокиДерева.Организация;
			ИначеЕсли (ТекСтрокиДерева.ЭтапПроцесса <> Неопределено) И (ТекСтрокиДерева.Организация = Неопределено) Тогда
				ТекСтрокиДерева.ЭтапОрганизация = ТекСтрокиДерева.ЭтапПроцесса;
			ИначеЕсли (ТекСтрокиДерева.ЭтапПроцесса <> Неопределено) И (ТекСтрокиДерева.Организация <> Неопределено) Тогда
				ТекСтрокиДерева.ЭтапОрганизация = ТекСтрокиДерева.Организация;
			Иначе
				ТекСтрокиДерева.ЭтапОрганизация = ПустойЭтап;
			КонецЕсли;
			ПроставитьПоляИзмеренийЭтапов(ТекСтрокиДерева, ГлубинаРекурсии + 1);
		КонецЦикла;
	Иначе
		Для Каждого ТекСтрокиДерева Из СтрокиДерева Цикл
			Если (ТекСтрокиДерева.ЭтапПроцесса = Неопределено) И (ТекСтрокиДерева.Организация <> Неопределено) Тогда
				ТекСтрокиДерева.ЭтапОрганизация = ТекСтрокиДерева.Организация;
			ИначеЕсли (ТекСтрокиДерева.ЭтапПроцесса <> Неопределено) И (ТекСтрокиДерева.Организация = Неопределено) Тогда
				ТекСтрокиДерева.ЭтапОрганизация = ТекСтрокиДерева.ЭтапПроцесса;
			ИначеЕсли (ТекСтрокиДерева.ЭтапПроцесса <> Неопределено) И (ТекСтрокиДерева.Организация <> Неопределено) Тогда
				ТекСтрокиДерева.ЭтапОрганизация = ТекСтрокиДерева.ЭтапПроцесса;
			Иначе
				ТекСтрокиДерева.ЭтапОрганизация = ПустаяОрганизация;
			КонецЕсли;
			ПроставитьПоляИзмеренийЭтапов(ТекСтрокиДерева, ГлубинаРекурсии + 1);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры		// ПроставитьПоляИзмеренийЭтапов()

// Заполняет колонку ИндексКартинки в дереве ДеревоВход. Параметр ГлубинаРекурсии 
// защищает от бесконечной рекурсии.
&НаСервере
Процедура ПроставитьПолеИндексКартинкиДереваЭтапов(ДеревоВход, ГлубинаРекурсии = 0)
	Если ГлубинаРекурсии > 10000 Тогда
		Возврат;			// Бесконечная рекурсия.
	КонецЕсли;
	СтрокиДерева = ДеревоВход.Строки;
	Для Каждого ТекСтрокиДерева Из СтрокиДерева Цикл
		НовыйИндексКартинки = ПолучитьИндексКартинкиДерева(ТекСтрокиДерева, "ЭтапОрганизация");
		ТекСтрокиДерева.ИндексКартинки = НовыйИндексКартинки;
		ПроставитьПолеИндексКартинкиДереваЭтапов(ТекСтрокиДерева, ГлубинаРекурсии + 1);
	КонецЦикла;
КонецПроцедуры		// ПроставитьПолеИндексКартинкиДереваЭтапов()

// Заполняет колонку ИндексКартинки в дереве ДеревоВход. Параметр ГлубинаРекурсии 
// защищает от бесконечной рекурсии.
&НаСервере
Процедура ПроставитьПолеИндексКартинкиДереваОпераций(ДеревоВход, ГлубинаРекурсии = 0)
	Если ГлубинаРекурсии > 10000 Тогда
		Возврат;			// Бесконечная рекурсия.
	КонецЕсли;
	СтрокиДерева = ДеревоВход.Строки;
	Для Каждого ТекСтрокиДерева Из СтрокиДерева Цикл
		НовыйИндексКартинки = ПолучитьИндексКартинкиДерева(ТекСтрокиДерева, "ОрганизацияВидОтчета");
		ТекСтрокиДерева.ИндексКартинкиОрганизации = НовыйИндексКартинки;
		ПроставитьПолеИндексКартинкиДереваОпераций(ТекСтрокиДерева, ГлубинаРекурсии + 1);
	КонецЦикла;
КонецПроцедуры		// ПроставитьПолеИндексКартинкиДереваОпераций()

// Выводит в дерево ДеревоВход компоновку МакетКомпоновкиВход с данными расшифровки ДанныеРасшифровкиВход.
&НаСервере
Процедура ВывестиКомпоновкуВДерево(ДеревоВход, МакетКомпоновкиВход, ДанныеРасшифровкиВход)
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиВход, , ДанныеРасшифровкиВход);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоВход);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
КонецПроцедуры		// ВывестиКомпоновкуВДерево()

// По дереву значений ДеревоВход возвращает соответствие выполнения этапов.
&НаСервереБезКонтекста
Функция ПолучитьСоответствиеВыполненияЭтапов(ДеревоВход)
	РезультатФункции = Новый Соответствие;
	Для Каждого ТекСтроки Из ДеревоВход.Строки Цикл
		ТекСостояние = ТекСтроки.СостояниеЭтапа;
		ПредЗначение = РезультатФункции.Получить(ТекСостояние);
		ТекЭтап = ТекСтроки.ЭтапПроцесса;
		Если ЗначениеЗаполнено(ТекЭтап) Тогда
			Если ПредЗначение <> Неопределено Тогда
				РезультатФункции.Вставить(ТекСостояние, ПредЗначение + ТекЭтап.ДлительностьПлановая);
			Иначе
				РезультатФункции.Вставить(ТекСостояние, ТекЭтап.ДлительностьПлановая);
			КонецЕсли;
		Иначе
			Если ПредЗначение <> Неопределено Тогда
				РезультатФункции.Вставить(ТекСостояние, ПредЗначение);
			Иначе
				РезультатФункции.Вставить(ТекСостояние, 0);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьСоответствиеВыполненияЭтапов()

// Дополняет соответствие этапов РезСоответствие значениями из дерева ДеревоВход.
&НаСервереБезКонтекста
Процедура ДополнитьСоответствиеВыполненияОрганизация(ДеревоВход, РезСоответствие)
	РезСоответствие = Новый Соответствие;
	Для Каждого ТекСтроки Из ДеревоВход.Строки Цикл
		ТекСостояние = ТекСтроки.СостояниеЭтапа;
		ПредЗначение = РезСоответствие.Получить(ТекСостояние);
		Если ЗначениеЗаполнено(ТекСтроки.ЭтапПроцесса) Тогда
			Если ПредЗначение <> Неопределено Тогда
				РезСоответствие.Вставить(ТекСостояние, ПредЗначение + ТекСтроки.ЭтапПроцесса.ДлительностьПлановая);
			Иначе
				РезСоответствие.Вставить(ТекСостояние, ТекСтроки.ЭтапПроцесса.ДлительностьПлановая);
			КонецЕсли;
		Иначе
			ДополнитьСоответствиеВыполненияОрганизация(ТекСтроки, РезСоответствие);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры		// ДополнитьСоответствиеВыполненияОрганизация()

// Рекурсивно обходит дерево ДеревоВход, добавляя в соответствие СоответствиеОперацийВход
// количество найденных операций. Параметр ГлубинаРекурсии защищает от бесконечной рекурсии.
&НаСервереБезКонтекста
Процедура ДополнитьСоответствиеОпераций(ДеревоВход, СоответствиеОперацийВход, ГлубинаРекурсии = 0)
	Если ГлубинаРекурсии > 10000 Тогда
		Возврат;		// Бесконечная рекурсия.
	КонецЕсли;
	СтрокиДерева = ДеревоВход.Строки;
	Для Каждого ТекСтрокиДерева Из СтрокиДерева Цикл
		Если ЗначениеЗаполнено(ТекСтрокиДерева.ВидОтчета) И ЗначениеЗаполнено(ТекСтрокиДерева.Организация) Тогда
			ЗависимыСтроки = ТекСтрокиДерева.Строки;
			Если ЗависимыСтроки.Количество() = 0 Тогда     		
				ТекСостояние = ТекСтрокиДерева.Состояние;
				Если ЗначениеЗаполнено(ТекСостояние) Тогда
					НовоеЗначение = 0;
					Если СоответствиеОперацийВход.Получить(ТекСостояние) <> Неопределено Тогда
						НовоеЗначение = СоответствиеОперацийВход[ТекСостояние] + 1;
					Иначе
						НовоеЗначение = 1;
					КонецЕсли;
					СоответствиеОперацийВход[ТекСостояние] = НовоеЗначение;
				Иначе
					// Нет значения состояния.
				КонецЕсли;
			Иначе
				// Групповая организация. Пропускаем.
			КонецЕсли;
		Иначе
			// Групповая строка. Пропускаем.
		КонецЕсли;
		ДополнитьСоответствиеОпераций(ТекСтрокиДерева, СоответствиеОперацийВход, ГлубинаРекурсии + 1);
	КонецЦикла;
КонецПроцедуры		// ДополнитьСоответствиеОпераций()

// По дереву значений ДеревоВход возвращает соответствие выполнения операций.
&НаСервереБезКонтекста
Функция ПолучитьСоответствиеВыполненияОпераций(ДеревоВход)
	РезультатФункции = Новый Соответствие;
	ДополнитьСоответствиеОпераций(ДеревоВход, РезультатФункции);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьСоответствиеВыполненияОпераций()

// Формирует диаграмму по соответствию СоответствиеВыполненияЭтаповВход и выводит её
// на форму.
&НаСервере
Процедура СформироватьДиаграммуЭтапы(СоответствиеВыполненияЭтаповВход)
	// Формирование таблицы из соответствия.
	ТаблицаРабочая = Новый ТаблицаЗначений;
	ТаблицаРабочая.Колонки.Добавить("Состояние");
	ТаблицаРабочая.Колонки.Добавить("Значение");
	Для Каждого ТекСоответствиеВыполненияЭтаповВход Из СоответствиеВыполненияЭтаповВход Цикл
		НоваяСтрока = ТаблицаРабочая.Добавить();
		НоваяСтрока.Состояние	 = ТекСоответствиеВыполненияЭтаповВход.Ключ;
		НоваяСтрока.Значение	 = ТекСоответствиеВыполненияЭтаповВход.Значение;
	КонецЦикла;
	// Получение макета.
	СхемаКД = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетДиаграммаЭтапы");
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	// Настройка компоновки.
	НастройкиКД = СхемаКД.НастройкиПоУмолчанию;
	// Вывод СКД.
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКД, НастройкиКД, ДанныеРасшифровки);
	РезультатДиаграммаЭтапы.Очистить();
	ВнешниеДанные = Новый Структура("ТЗ_ДанныеДиаграммы", ТаблицаРабочая);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, ВнешниеДанные, ДанныеРасшифровки, Ложь);
	ПроцессорВыводаРезультатаОтчета = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаРезультатаОтчета.УстановитьДокумент(РезультатДиаграммаЭтапы);
	ПроцессорВыводаРезультатаОтчета.НачатьВывод();
	ПроцессорВыводаРезультатаОтчета.Вывести(ПроцессорКомпоновкиДанных);
	ПроцессорВыводаРезультатаОтчета.ЗакончитьВывод();
	// Масштаб диаграммы.
	Если РезультатДиаграммаЭтапы.Рисунки.Количество() > 0 Тогда
		ТекРисунок = РезультатДиаграммаЭтапы.Рисунки.Получить(0);
		ТекРисунок.Ширина = 80;   
		ТекРисунок.Высота = 60;   
	Иначе
		// Диаграмма не найдена.
	КонецЕсли;
КонецПроцедуры		// СформироватьДиаграммуЭтапы()

// Возвращает текстовое представление способа отображения "По этапам".
&НаКлиентеНаСервереБезКонтекста
Функция СпособОтображенияДереваПоЭтапам()
	Возврат "ПоЭтапам";
КонецФункции		// СпособОтображенияДереваПоЭтапам()

// Возвращает текстовое представление способа отображения "По организациям".
&НаКлиентеНаСервереБезКонтекста
Функция СпособОтображенияДереваПоОрганизациям()
	Возврат "ПоОрганизациям";
КонецФункции		// СпособОтображенияДереваПоОрганизациям()

// Анализирует настройку отображения СпособОтображенияВход и требуется ли 
// отображать дерево по этапам.
&НаКлиентеНаСервереБезКонтекста
Функция ОтображениеВВидеЭтапов(СпособОтображенияВход)	
	РезультатФункции = Истина;
	Если СокрЛП(СпособОтображенияВход) = СпособОтображенияДереваПоЭтапам() Тогда
		РезультатФункции = Истина;
	ИначеЕсли СокрЛП(СпособОтображенияВход) = СпособОтображенияДереваПоОрганизациям() Тогда	
		РезультатФункции = Ложь;
	Иначе
		РезультатФункции = Истина;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Возвращает текстовое представление способа сортировки "По умолчанию".
&НаКлиентеНаСервереБезКонтекста
Функция СпособСортировкиПоУмолчаниюПредставление()
	Возврат "ПоУмолчанию";
КонецФункции		// СпособСортировкиПоУмолчаниюПредставление()

// Возвращает текстовое представление способа сортировки "По алфавиту".
&НаКлиентеНаСервереБезКонтекста
Функция СпособСортировкиПоАлфавитуПредставление()
	Возврат "ПоАлфавиту";
КонецФункции		// СпособСортировкиПоАлфавитуПредставление()

// Заполняет из базы таблицу количества предшественников этапов из дерева ДеревоВход.
&НаСервере
Процедура ОбновитьТаблицуКоличествоПредшествениковЭтапов(ДеревоВход)
	// Инициализация.
	ТаблицаКоличествоПредшественниковЭтапов.Очистить();
	// Получим массив этапов.
	Если ТипЗнч(ДеревоВход) = Тип("ДеревоЗначений") Тогда
		ВыгрузкаДерева = ОбщегоНазначенияСерверУХ.ПреобразоватьДеревоЗначенийВТаблицу(ДеревоВход);
		МассивЭтапов = ВыгрузкаДерева.ВыгрузитьКолонку("ЭтапПроцесса");
	ИначеЕсли ТипЗнч(ДеревоВход) = Тип("ТаблицаЗначений") Тогда
		МассивЭтапов = ДеревоВход.ВыгрузитьКолонку("ЭтапПроцесса");
	Иначе
		ТекстСообщения = НСтр("ru = 'Переданы неизвестные данные для получения количества предшественников: %Дерево%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Дерево%", Строка(ДеревоВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		МассивЭтапов = Новый Массив;
	КонецЕсли;
	МассивЭтапов = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивЭтапов);
	МассивЭтапов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЭтапов);
	Для Каждого ТекМассивЭтапов Из МассивЭтапов Цикл
		// Получим количество предшественников каждого этапа.
		МассивПредшественников = УправлениеПроцессамиСогласованияУХПовтИсп.ПолучитьЭтапыПредшественники(ТекМассивЭтапов);
		КоличествоПредшественников = МассивПредшественников.Количество();
		// Заполним таблицу полученными значениями.
		НоваяСтрока = ТаблицаКоличествоПредшественниковЭтапов.Добавить();
		НоваяСтрока.Этап						 = ТекМассивЭтапов;
		НоваяСтрока.КоличествоПредшественников	 = КоличествоПредшественников;
	КонецЦикла;
КонецПроцедуры		// ОбновитьТаблицуКоличествоПредшествениковЭтапов()

// Осуществляет сортировку строк дерева этапов ДеревоВход согласно
// способу СпособСортировкиВход.
&НаСервереБезКонтекста
Функция СортироватьДеревоЭтапов(ДеревоВход, СпособСортировкиВход, ТаблицаПредшественниковВход)
	// Инициализация.
	РезультатФункции = ДеревоВход;
	// Заполнение порядкового номера этапа по количеству предшественников.
	СоответствиеПредшественников = ОбщегоНазначенияСерверУХ.ПреобразоватьТаблицуЗначенийВСоответствие(ТаблицаПредшественниковВход, "Этап", "КоличествоПредшественников");
	ОбщегоНазначенияУХ.ПроставитьЗначенияПолейИзСоответствия("ЭтапПроцесса", "ПорядковыйНомерЭтапаПроцесса", СоответствиеПредшественников, ДеревоВход);
	// Сортировка выбранным способом.
	СтрокиДерева = РезультатФункции.Строки;
	Если СпособСортировкиВход = СпособСортировкиПоАлфавитуПредставление() Тогда
		СтрокиДерева.Сортировать("ЭтапОрганизация Возр", Истина); 
	ИначеЕсли СпособСортировкиВход = СпособСортировкиПоУмолчаниюПредставление() Тогда
		СтрокиДерева.Сортировать("ПорядковыйНомерЭтапаПроцесса Возр", Истина); 
	Иначе
		СтрокиДерева.Сортировать("ПорядковыйНомерЭтапаПроцесса Возр", Истина); 
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// СортироватьДеревоЭтапов()

// Возвращает этап процесса, на котором находится организация ОрганизацияВход
// согласно срезу ТаблицаСрезВыполненияПроцессаВход регистра СостоянияВыполненияПроцессов.
&НаСервереБезКонтекста
Функция ПолучитьАктуальныйЭтапПоОрганизации(ТаблицаСрезВыполненияПроцессаВход, ОрганизацияВход)
	// Инициализация.
	РезультатФункции = Справочники.ЭтапыУниверсальныхПроцессов.ПустаяСсылка();
	Если (ЗначениеЗаполнено(ОрганизацияВход)) И (ТаблицаСрезВыполненияПроцессаВход.Количество() > 0) Тогда
		// Получим отдельную таблицу по организации.
		ТаблицаПоОрганизации = ТаблицаСрезВыполненияПроцессаВход.СкопироватьКолонки();
		ТипЭтапаОповещение = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Оповещение;
		ТипЭтапаОбработка = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Обработка;
		ТипЭтапаПодготовкаОтчетности = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности;
		Для Каждого ТекТаблицаСрезВыполненияПроцессаВход Из ТаблицаСрезВыполненияПроцессаВход Цикл
			ТекОрганизацияПроцесса	 = ТекТаблицаСрезВыполненияПроцессаВход.Организация;
			ТекЭтап					 = ТекТаблицаСрезВыполненияПроцессаВход.ЭтапПроцесса;
			МожноДобавлять = Ложь;
			Если ТекОрганизацияПроцесса = ОрганизацияВход Тогда
				МожноДобавлять = Истина;
			ИначеЕсли (НЕ ЗначениеЗаполнено(ТекОрганизацияПроцесса)) Тогда
				ТекТипЭтапа = ТекЭтап.ТипЭтапа;
				МожноДобавлять = (ТекТипЭтапа <> ТипЭтапаПодготовкаОтчетности);
			Иначе
				Продолжить;				// Пропускаем строку.
			КонецЕсли;
			Если МожноДобавлять Тогда
				НоваяСтрока = ТаблицаПоОрганизации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекТаблицаСрезВыполненияПроцессаВход);
			Иначе
				// Не добавляем строку.
			КонецЕсли;
		КонецЦикла;
		ТаблицаПоОрганизации.Сортировать("КоличествоПредшественников Убыв");
		// Обойдем таблицу, получим актуальный этап.
		ПредЭтап = Справочники.ЭтапыУниверсальныхПроцессов.ПустаяСсылка();
		СостояниеЭтапаЗавершен		 = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.Завершен;
		СостояниеЭтапаВОбработке	 = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.ВОбработке;
		ЕстьВОбработке = Ложь;
		Для Счетчик = 0 По ТаблицаПоОрганизации.Количество() - 1 Цикл
			ТекСтрока = ТаблицаПоОрганизации[Счетчик];
			ТекСостояние = ТекСтрока.СостояниеЭтапа;
			ТекЭтап = ТекСтрока.ЭтапПроцесса;
			Если ТекСостояние = СостояниеЭтапаВОбработке Тогда
				РезультатФункции = ТекЭтап;			// Этап в обработке.
				ЕстьВОбработке = Истина;
			ИначеЕсли (ТекСостояние = СостояниеЭтапаЗавершен) И (НЕ ЕстьВОбработке) Тогда	
				Если ЗначениеЗаполнено(ПредЭтап) Тогда
					РезультатФункции = ПредЭтап;
				Иначе
					РезультатФункции = ТекЭтап;		// Это последний этап.
				КонецЕсли;
				Прервать;
			Иначе
				// Выполняем обход далее.
			КонецЕсли;
			ПредЭтап = ТекСтрока.ЭтапПроцесса;
		КонецЦикла;
		// Проверим, найден ли хотя бы один активный этап. В противном случае, считаем актуальным первый этап.
		Если Не ЗначениеЗаполнено(РезультатФункции) Тогда
			КоличествоСтрокПоОрганизации = ТаблицаПоОрганизации.Количество();
			Если КоличествоСтрокПоОрганизации > 0 Тогда
				ПоследняяСтрокаСреза = ТаблицаПоОрганизации[КоличествоСтрокПоОрганизации-1];
				РезультатФункции = ПоследняяСтрокаСреза.ЭтапПроцесса;
			Иначе
				// Попытаемся выставить первый этап процесса.
				КоличествоСтрокСреза = ТаблицаСрезВыполненияПроцессаВход.Количество();
				Если КоличествоСтрокСреза > 0 Тогда
					ПерваяСтрокаСреза = ТаблицаСрезВыполненияПроцессаВход[0];
					РезультатФункции = ПерваяСтрокаСреза.ЭтапПроцесса;
				Иначе	
					РезультатФункции = Справочники.ЭтапыУниверсальныхПроцессов.ПустаяСсылка();		// Пустая таблица среза.
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Этап найден. Вернем его.
		КонецЕсли;
	Иначе
		РезультатФункции = Справочники.ЭтапыУниверсальныхПроцессов.ПустаяСсылка();		// Недостаточно входных данных.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьАктуальныйЭтапПоОрганизации()

// Возвращает таблицу значений, содержащую срез актуальных этапов по организациям 
// в периоде ПериодВход, сценарии СценарийВход и по регламенту РегламентВход.
&НаСервереБезКонтекста
Функция ПолучитьТаблицуСрезовАктуальныхЭтапов(ПериодВход, СценарийВход, РегламентВход)
	РезультатФункции = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЭтапыУниверсальныхПроцессов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ВсеЭтапы
	|ИЗ
	|	Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыУниверсальныхПроцессов
	|ГДЕ
	|	ЭтапыУниверсальныхПроцессов.Владелец.СвязанныйРегламент = &ВерсияОрганизационнойСтруктуры
	|	И НЕ ЭтапыУниверсальныхПроцессов.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(Процесс.Ссылка) КАК ЭкземплярПроцесса
	|ПОМЕСТИТЬ ВТ_Процесс
	|ИЗ
	|	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭкземплярПроцесса КАК Процесс
	|		ПО УправлениеПериодомСценария.Ссылка = Процесс.КлючевойОбъектПроцесса
	|ГДЕ
	|	УправлениеПериодомСценария.Сценарий = &Сценарий
	|	И УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры = &ВерсияОрганизационнойСтруктуры
	|	И УправлениеПериодомСценария.ПериодСценария = &ПериодСценария
	|	И Процесс.СостояниеВыполнения В (ЗНАЧЕНИЕ(Перечисление.СостоянияПроцесса.Вработе), ЗНАЧЕНИЕ(Перечисление.СостоянияПроцесса.Завершен))
	|	И НЕ Процесс.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	ВТ_ВсеЭтапы.Ссылка КАК ЭтапПроцесса,
	|	ВЫБОР
	|		КОГДА ВыполнениеПроцессовСрезПоследних.СостояниеЭтапа ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.НеАктивен)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВыполнениеПроцессовСрезПоследних.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.НеАктивен)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.НеАктивен)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа ЕСТЬ NULL
	|							ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.НеАктивен)
	|						КОГДА СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцессов.Запланирован)
	|							ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.НеАктивен)
	|						КОГДА СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцессов.Выполняется)
	|							ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.ВОбработке)
	|						КОГДА СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцессов.Утвержден)
	|							ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.Завершен)
	|						КОГДА СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцессов.Отменен)
	|							ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.ЗавершенСОшибкой)
	|						КОГДА СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцессов.Приостановлен)
	|							ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.ВОбработке)
	|						ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.НеАктивен)
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СостояниеЭтапа
	|ИЗ
	|	ВТ_ВсеЭтапы КАК ВТ_ВсеЭтапы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизационныеЕдиницыЭтаповПроцессов КАК ОрганизационныеЕдиницыЭтаповПроцессов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияВыполненияПроцессов.СрезПоследних(
	|					,
	|					ПериодСценария = &ПериодСценария
	|						И Сценарий = &Сценарий) КАК СостоянияВыполненияПроцессовСрезПоследних
	|			ПО ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница = СостоянияВыполненияПроцессовСрезПоследних.Организация
	|				И ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса = СостоянияВыполненияПроцессовСрезПоследних.ЭтапПроцесса
	|		ПО ВТ_ВсеЭтапы.Ссылка = ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыполнениеПроцессов.СрезПоследних(, ) КАК ВыполнениеПроцессовСрезПоследних
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Процесс КАК ВТ_Процесс
	|			ПО ВыполнениеПроцессовСрезПоследних.ДокументПроцесса = ВТ_Процесс.ЭкземплярПроцесса
	|		ПО ВТ_ВсеЭтапы.Ссылка = ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса
	|ГДЕ
	|	ВТ_ВсеЭтапы.Ссылка.ТипЭтапа = ЗНАЧЕНИЕ(Перечисление.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
	|	ВТ_ВсеЭтапы.Ссылка,
	|	ЕСТЬNULL(ВыполнениеПроцессовСрезПоследних.СостояниеЭтапа, ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.НеАктивен))
	|ИЗ
	|	ВТ_ВсеЭтапы КАК ВТ_ВсеЭтапы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыполнениеПроцессов.СрезПоследних(, ) КАК ВыполнениеПроцессовСрезПоследних
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Процесс КАК ВТ_Процесс
	|			ПО ВыполнениеПроцессовСрезПоследних.ДокументПроцесса = ВТ_Процесс.ЭкземплярПроцесса
	|		ПО ВТ_ВсеЭтапы.Ссылка = ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса
	|ГДЕ
	|	ВТ_ВсеЭтапы.Ссылка.ТипЭтапа <> ЗНАЧЕНИЕ(Перечисление.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности)";	
	Запрос.УстановитьПараметр("ПериодСценария", ПериодВход);
	Запрос.УстановитьПараметр("ВерсияОрганизационнойСтруктуры", РегламентВход);
	Запрос.УстановитьПараметр("Сценарий", СценарийВход);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
КонецФункции	// ПолучитьТаблицуСрезовАктуальныхЭтапов()

// Выставляет в поле Актуальный этап значение этапов, на которых находится организация 
//согласно таблице количества предшественников этапов ТаблицаПредшественниковЭтаповВход
// и таблице среза актуальных этапов СрезАктуальныхЭтаповВход.
&НаСервереБезКонтекста
Процедура ПроставитьАктуальныйЭтап(ТаблицаПредшественниковЭтаповВход, СрезАктуальныхЭтаповВход, ДеревоОбработки)
	// Добавим количество предшественников для каждого этапа.
	СрезАктуальныхЭтаповВход.Колонки.Добавить("КоличествоПредшественников");
	СоответствиеПредшественников = ОбщегоНазначенияСерверУХ.ПреобразоватьТаблицуЗначенийВСоответствие(ТаблицаПредшественниковЭтаповВход, "Этап", "КоличествоПредшественников");
	Для Каждого ТекСрезАктуальныхЭтаповВход Из СрезАктуальныхЭтаповВход Цикл
		ТекЭтап = ТекСрезАктуальныхЭтаповВход.ЭтапПроцесса;
		НовоеКоличество = СоответствиеПредшественников[ТекЭтап];
		ТекСрезАктуальныхЭтаповВход.КоличествоПредшественников = НовоеКоличество;
	КонецЦикла;
	// Получим соответствие актуальных этапов для каждой организации.
	МассивОрганизаций = СрезАктуальныхЭтаповВход.ВыгрузитьКолонку("Организация");
	МассивОрганизаций = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивОрганизаций);
	МассивОрганизаций = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивОрганизаций);
	СоответствиеАктуальныхЭтапов = Новый Соответствие;
	Для Каждого ТекМассивОрганизаций Из МассивОрганизаций Цикл
		АктуальныйЭтап = ПолучитьАктуальныйЭтапПоОрганизации(СрезАктуальныхЭтаповВход, ТекМассивОрганизаций);
		СоответствиеАктуальныхЭтапов.Вставить(ТекМассивОрганизаций, АктуальныйЭтап);
	КонецЦикла;
	// Проставим полученные соответствия в дерево значений.
	ОбщегоНазначенияУХ.ПроставитьЗначенияПолейИзСоответствия("Организация", "АктуальныйЭтап", СоответствиеАктуальныхЭтапов, ДеревоОбработки, Истина);
КонецПроцедуры		// ПроставитьАктуальныйЭтап()

// Убирает из дерева значений ДеревоОбработки строки, содержащие неактуальные этапы.
// Параметр ГлубинаРекурсииВход защищает от бесконечной рекурсии.
&НаСервереБезКонтекста
Процедура ОтобратьНеактуальныеЭтапы(ДеревоОбработки, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 10000 Тогда
		Возврат;
	КонецЕсли;
	// Получим массив строк к удалению.
	МассивНеактуальныхЭтапов = Новый Массив;
	Для Каждого ТекСтроки Из ДеревоОбработки.Строки Цикл
		ТекЭтапПроцесса		 = ТекСтроки.ЭтапПроцесса;
		ТекАктуальныйЭтап	 = ТекСтроки.АктуальныйЭтап;
		КоличествоЗависимых = ТекСтроки.Строки.Количество();
		ЗаполненТекущийЭтап					 = ЗначениеЗаполнено(ТекЭтапПроцесса);
		ЗаполненАктуальныйЭтап				 = ЗначениеЗаполнено(ТекАктуальныйЭтап);
		ТекущийЭтапОтличаетсяОтАктуального	 = (ТекЭтапПроцесса <> ТекАктуальныйЭтап);
		ЕстьЗависимые						 = (КоличествоЗависимых > 0);
		Если (ЗаполненТекущийЭтап) И (ЗаполненАктуальныйЭтап) И (ТекущийЭтапОтличаетсяОтАктуального) Тогда
			МассивНеактуальныхЭтапов.Добавить(ТекСтроки);
		Иначе
			// Не добавляем строку в массив неактуальных.
		КонецЕсли;
	КонецЦикла;
	// Рекурсивно удалим строки из дерева.
	ЕстьИзменения = Истина;
	Счетчик = 0;
	Пока (ЕстьИзменения) И (Счетчик < 100000) Цикл
		ЕстьИзменения = Ложь;
		Для Каждого ТекСтроки Из ДеревоОбработки.Строки Цикл
			Если МассивНеактуальныхЭтапов.Найти(ТекСтроки) <> Неопределено Тогда
				ДеревоОбработки.Строки.Удалить(ТекСтроки);
				ЕстьИзменения = Истина;
			Иначе
				ОтобратьНеактуальныеЭтапы(ТекСтроки, ГлубинаРекурсииВход + 1);
			КонецЕсли;
		КонецЦикла;
		Счетчик = Счетчик + 1;
	КонецЦикла;
КонецПроцедуры		// ОтобратьНеактуальныеЭтапы()

// Удаляет из дерева ДеревоОбработки строки, не содеражащие листьев и не имеющие
// признака актуального этапа. Параметр ПроизведеныУдаления показывает, было ли
// произведено хотя бы одно удаление строк. Параметр ГлубинаРекурсииВход защищает
// от бесконечной рекурсии.
&НаСервереБезКонтекста
Процедура ОтобратьПустыеЭтапы(ДеревоОбработки, ПроизведеныУдаления, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 10000 Тогда
		Возврат;
	КонецЕсли;
	// Получим массив строк к удалению.
	МассивПустыхСтрок = Новый Массив;
	Для Каждого ТекСтроки Из ДеревоОбработки.Строки Цикл
		ТекАктуальныйЭтап = ТекСтроки.АктуальныйЭтап;
		КоличествоПодчиненных = ТекСтроки.Строки.Количество();
		Если (НЕ ЗначениеЗаполнено(ТекАктуальныйЭтап)) И (КоличествоПодчиненных = 0) Тогда
			МассивПустыхСтрок.Добавить(ТекСтроки);
		Иначе
			// Не добавляем строку в массив неактуальных.
		КонецЕсли;
	КонецЦикла;
	// Рекурсивно удалим строки из дерева.
	ЕстьИзменения = Истина;
	Счетчик = 0;
	Пока (ЕстьИзменения) И (Счетчик < 100000) Цикл
		ЕстьИзменения = Ложь;
		Для Каждого ТекСтроки Из ДеревоОбработки.Строки Цикл
			Если МассивПустыхСтрок.Найти(ТекСтроки) <> Неопределено Тогда
				ДеревоОбработки.Строки.Удалить(ТекСтроки);
				ЕстьИзменения = Истина;
				ПроизведеныУдаления = Истина;
			Иначе
				ОтобратьПустыеЭтапы(ТекСтроки, ПроизведеныУдаления, ГлубинаРекурсииВход + 1);
			КонецЕсли;
		КонецЦикла;
		Счетчик = Счетчик + 1;
	КонецЦикла;
КонецПроцедуры		// ОтобратьПустыеЭтапы()

// Преобразует дерево ДеревоОбработки согласно установки режима отображения актуальных этапов
// ЗначениеФлагаАктуальностиВход. Возвращает успешность операции.
&НаСервереБезКонтекста
Функция ОбработатьФлагАктуальныхЭтапов(ДеревоОбработки, ЗначениеФлагаАктуальностиВход)
	РезультатФункции = Истина;
	Попытка
		Если ЗначениеФлагаАктуальностиВход Тогда
			ОтобратьНеактуальныеЭтапы(ДеревоОбработки);
			Счетчик = 0;
			ПроизведеныУдаления = Истина;
			Пока (ПроизведеныУдаления) И (Счетчик < 100000) Цикл
				ПроизведеныУдаления = Ложь;
				ОтобратьПустыеЭтапы(ДеревоОбработки, ПроизведеныУдаления);
				Счетчик = Счетчик + 1;
			КонецЦикла;
		Иначе
			// Не накладываем отбор, выводим дерево полностью.
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'Во время обработки актуальных этапов возникли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Ложь;
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции		// ОбработатьФлагАктуальныхЭтапов()

// Выводит дерево этапов по данным информационной базы.
&НаСервере
Процедура ВывестиОтчетПоЭтапам()
	// Получение вспомогательных данных.
	СрезАктуальныхЭтапов = ПолучитьТаблицуСрезовАктуальныхЭтапов(ПериодОтчета, Сценарий, ВерсияРегламента);
	ОбновитьТаблицуКоличествоПредшествениковЭтапов(СрезАктуальныхЭтапов);
	ВыгрузкаКоличествоПредшественников = ТаблицаКоличествоПредшественниковЭтапов.Выгрузить();
	// Исполнение компоновки.
	ДанныеРасшифровки = Неопределено;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетДокумента = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетЭтапы");  
	Если ОтображениеВВидеЭтапов(СпособОтображенияДереваЭтапов) Тогда
		ВыбранныйВариант = МакетДокумента.ВариантыНастроек[0];
	Иначе
		ВыбранныйВариант = МакетДокумента.ВариантыНастроек[1];
	КонецЕсли;
	НовыеНастройки = ВыбранныйВариант.Настройки;	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(МакетДокумента));
	КомпоновщикНастроек.ЗагрузитьНастройки(НовыеНастройки);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВерсияОрганизационнойСтруктуры",		 ВерсияРегламента);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПарНастраиваемыйОтчет",				 Справочники.ДокументыБД.НайтиПоНаименованию("НастраиваемыйОтчет"));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПарТрансформационнаяКорректировка",	 Справочники.ДокументыБД.НайтиПоНаименованию("ТрансформационнаяКорректировка"));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПарТрансляция",						 Справочники.ДокументыБД.НайтиПоНаименованию("Трансляция"));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПарЭлиминация",						 Справочники.ДокументыБД.НайтиПоНаименованию("Элиминация"));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодСценария",						 ПериодОтчета);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Сценарий",							 Сценарий);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекущаяДата",						 ТекущаяДатаСеанса());
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("СостояниеВыполняется",				 Перечисления.СостоянияЭтаповПроцессов.Выполняется);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("СостояниеУтвержден",					 Перечисления.СостоянияЭтаповПроцессов.Утвержден);
	МакетКомпоновки = КомпоновщикМакета.Выполнить(МакетДокумента, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ДеревоВрем = Новый ДеревоЗначений;
	ВывестиКомпоновкуВДерево(ДеревоВрем, МакетКомпоновки, ДанныеРасшифровки);
	// Постобработка.
	ДеревоВрем.Колонки.Добавить("ЭтапОрганизация");
	ПроставитьПоляИзмеренийЭтапов(ДеревоВрем);
	ДеревоВрем.Колонки.Добавить("ИндексКартинки");
	ПроставитьПолеИндексКартинкиДереваЭтапов(ДеревоВрем);
	ДеревоВрем.Колонки.Добавить("АктуальныйЭтап");
	ПроставитьАктуальныйЭтап(ВыгрузкаКоличествоПредшественников, СрезАктуальныхЭтапов, ДеревоВрем);
	ОтображатьТолькоАктуальные = Элементы.ДеревоЭтапыОтобразитьТолькоАктуальные.Пометка;
	ОбработатьФлагАктуальныхЭтапов(ДеревоВрем, ОтображатьТолькоАктуальные);
	ДеревоВрем = СортироватьДеревоЭтапов(ДеревоВрем, СпособСортировкиЭтапов, ВыгрузкаКоличествоПредшественников);
	// Перенос дерева на форму.
	ДеревоЭтапы.ПолучитьЭлементы().Очистить();
	ЗначениеВРеквизитФормы(ДеревоВрем, "ДеревоЭтапы");
	ВосстановитьПоложениеСтрокиЭтапа();
	// Отображение заголовка колонки Этап/Организация.
	Если СпособОтображенияДереваЭтапов = СпособОтображенияДереваПоЭтапам() Тогда
		Элементы.ДеревоЭтапыЭтапОрганизация.Заголовок = НСтр("ru = 'Этап/Организация'");
	ИначеЕсли СпособОтображенияДереваЭтапов = СпособОтображенияДереваПоОрганизациям() Тогда	
		Элементы.ДеревоЭтапыЭтапОрганизация.Заголовок = НСтр("ru = 'Организация/Этап'");
	Иначе
		Элементы.ДеревоЭтапыЭтапОрганизация.Заголовок = НСтр("ru = 'Этап/Организация'");
	КонецЕсли;
	// Вывод данных диаграммы.
	Если ОтображениеВВидеЭтапов(СпособОтображенияДереваЭтапов) Тогда
		СоответствиеВыполненияЭтапов = ПолучитьСоответствиеВыполненияЭтапов(ДеревоВрем);
	Иначе
		СоответствиеВыполненияЭтапов = Новый Соответствие;
		ДополнитьСоответствиеВыполненияОрганизация(ДеревоВрем, СоответствиеВыполненияЭтапов);
	КонецЕсли;
	СформироватьДиаграммуЭтапы(СоответствиеВыполненияЭтапов);
КонецПроцедуры		// ВывестиОтчетПоЭтапам()

// Заполняет колонку ОрганизацияВидОтчета в дереве операция ДеревоВход. Параметр ГлубинаРекурсии
// защищает от бесконечной рекурсии.
&НаСервереБезКонтекста
Процедура ПроставитьПоляИзмеренийОпераций(ДеревоВход, ГлубинаРекурсии = 0)
	Если ГлубинаРекурсии > 10000 Тогда
		Возврат;			// Бесконечная рекурсия.
	КонецЕсли;
	СтрокиДерева = ДеревоВход.Строки;
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	ПустойВидОтчета = Справочники.ВидыОтчетов.ПустаяСсылка();
	Для Каждого ТекСтрокиДерева Из СтрокиДерева Цикл
		Если (ТекСтрокиДерева.ВидОтчета = Неопределено) И (ТекСтрокиДерева.Организация <> Неопределено) Тогда
			ТекСтрокиДерева.ОрганизацияВидОтчета = ТекСтрокиДерева.Организация;
		ИначеЕсли (ТекСтрокиДерева.ВидОтчета <> Неопределено) И (ТекСтрокиДерева.Организация = Неопределено) Тогда
			ТекСтрокиДерева.ОрганизацияВидОтчета = ТекСтрокиДерева.ВидОтчета;
		ИначеЕсли (ТекСтрокиДерева.ВидОтчета <> Неопределено) И (ТекСтрокиДерева.Организация <> Неопределено) Тогда
			ТекСтрокиДерева.ОрганизацияВидОтчета = ТекСтрокиДерева.Организация;
		Иначе
			ТекСтрокиДерева.ОрганизацияВидОтчета = ПустойВидОтчета;
		КонецЕсли;
		ПроставитьПоляИзмеренийОпераций(ТекСтрокиДерева, ГлубинаРекурсии + 1);
	КонецЦикла;
КонецПроцедуры		// ПроставитьПоляИзмеренийОпераций()

// Формирует диаграмму по соответствию СоответствиеВыполненияОперацийВход и выводит её
// на форму.
&НаСервере
Процедура СформироватьДиаграммуОперации(СоответствиеВыполненияОперацийВход)
	// Формирование таблицы из соответствия.
	ТаблицаРабочая = Новый ТаблицаЗначений;
	ТаблицаРабочая.Колонки.Добавить("Состояние");
	ТаблицаРабочая.Колонки.Добавить("Значение");
	Для Каждого ТекСоответствиеВыполненияОперацийВход Из СоответствиеВыполненияОперацийВход Цикл
		НоваяСтрока = ТаблицаРабочая.Добавить();
		НоваяСтрока.Состояние	 = ТекСоответствиеВыполненияОперацийВход.Ключ;
		НоваяСтрока.Значение	 = ТекСоответствиеВыполненияОперацийВход.Значение;
	КонецЦикла;
	// Получение макета.
	СхемаКД = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетДиаграммаОперации");
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	// Настройка компоновки.
	НастройкиКД = СхемаКД.НастройкиПоУмолчанию;
	// Вывод СКД.
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКД, НастройкиКД, ДанныеРасшифровки);
	РезультатДиаграммаОперации.Очистить();
	ВнешниеДанные = Новый Структура("ТЗ_ДанныеДиаграммы", ТаблицаРабочая);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, ВнешниеДанные, ДанныеРасшифровки, Ложь);
	ПроцессорВыводаРезультатаОтчета = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаРезультатаОтчета.УстановитьДокумент(РезультатДиаграммаОперации);
	ПроцессорВыводаРезультатаОтчета.НачатьВывод();
	ПроцессорВыводаРезультатаОтчета.Вывести(ПроцессорКомпоновкиДанных);
	ПроцессорВыводаРезультатаОтчета.ЗакончитьВывод();
	// Масштаб диаграммы.
	Если РезультатДиаграммаОперации.Рисунки.Количество() > 0 Тогда
		ТекРисунок = РезультатДиаграммаОперации.Рисунки.Получить(0);
		ТекРисунок.Ширина = 80;   
		ТекРисунок.Высота = 60;   
	Иначе
		// Диаграмма не найдена.
	КонецЕсли;
КонецПроцедуры		// СформироватьДиаграммуОперации()

// В дереве ДеревоВход ищет строки по структуре поиска СтруктураПоискаВход,
// добавляя найденные в МассивСтрок.
&НаСервере
Процедура НайтиСтрокуДереваОперации(ДеревоВход, СтруктураПоискаВход, МассивСтрок, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 10000 Тогда
		Возврат;
	КонецЕсли;
	ПодчиненныеСтроки = ДеревоВход.ПолучитьЭлементы();
	ОрганизацияПоиска = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПоискаВход, "Организация", Справочники.Организации.ПустаяСсылка());
	ВидОтчетаПоиска = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПоискаВход, "ВидОтчета", Справочники.ВидыОтчетов.ПустаяСсылка());
	Если ЗначениеЗаполнено(ОрганизацияПоиска) И ЗначениеЗаполнено(ВидОтчетаПоиска) Тогда
		Для Каждого ТекПодчиненныеСтроки Из ПодчиненныеСтроки Цикл
			Если (ТекПодчиненныеСтроки.Организация = ОрганизацияПоиска) И (ТекПодчиненныеСтроки.ВидОтчета = ВидОтчетаПоиска) Тогда
				МассивСтрок.Добавить(ТекПодчиненныеСтроки);
			Иначе
				// Выполняем поиск далее.
			КонецЕсли;
			НайтиСтрокуДереваОперации(ТекПодчиненныеСтроки, СтруктураПоискаВход, МассивСтрок, ГлубинаРекурсииВход + 1);
		КонецЦикла;
	Иначе
		МассивСтрок = Новый Массив;			// Пустые данные поиска. Возвращаем пустой массив.
	КонецЕсли;
КонецПроцедуры		// НайтиСтрокуДереваОперации()

// Сравнивает строку ТекСтрокаДерева на соответствие критериям поиска
// по ОрганизацияПоискаВход и ЭтапПоискаВход.
&НаСервереБезКонтекста
Функция СравнитьСтрокуЭтапы(ТекСтрокаДереваВход, ОрганизацияПоискаВход, ЭтапПоискаВход)
	РезультатФункции = Истина;
	ЕстьОрганизацияПоиска = ЗначениеЗаполнено(ОрганизацияПоискаВход);
	ЕстьЭтапПоиска = ЗначениеЗаполнено(ЭтапПоискаВход);
	Если ЕстьЭтапПоиска ИЛИ ЕстьОрганизацияПоиска Тогда
		СовпадаетОрганизация = (НЕ ЕстьОрганизацияПоиска) ИЛИ (ТекСтрокаДереваВход.Организация = ОрганизацияПоискаВход);
		СовпадаетЭтап = (НЕ ЕстьЭтапПоиска) ИЛИ (ТекСтрокаДереваВход.ЭтапПроцесса = ЭтапПоискаВход);
		РезультатФункции = (СовпадаетОрганизация) И (СовпадаетЭтап);
	Иначе
		РезультатФункции = Ложь;	// Условия поиска не заданы.
	КонецЕсли;
	Возврат РезультатФункции;	
КонецФункции		// СравнитьСтрокуЭтапы()

// В дереве ДеревоВход ищет строки по структуре поиска СтруктураПоискаВход,
// добавляя найденные в МассивСтрок.
&НаСервере
Процедура НайтиСтрокуДереваЭтап(ДеревоВход, СтруктураПоискаВход, МассивСтрок, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 10000 Тогда
		Возврат;
	КонецЕсли;
	ПодчиненныеСтроки = ДеревоВход.ПолучитьЭлементы();
	ОрганизацияПоиска = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПоискаВход, "Организация", Справочники.Организации.ПустаяСсылка());
	ЭтапПоиска = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПоискаВход, "ЭтапПроцесса", Справочники.ЭтапыУниверсальныхПроцессов.ПустаяСсылка());
	Если ЗначениеЗаполнено(ОрганизацияПоиска) ИЛИ ЗначениеЗаполнено(ЭтапПоиска) Тогда
		Для Каждого ТекПодчиненныеСтроки Из ПодчиненныеСтроки Цикл
			Если СравнитьСтрокуЭтапы(ТекПодчиненныеСтроки, ОрганизацияПоиска, ЭтапПоиска) Тогда
				МассивСтрок.Добавить(ТекПодчиненныеСтроки);
			Иначе
				// Выполняем поиск далее.
			КонецЕсли;
			НайтиСтрокуДереваЭтап(ТекПодчиненныеСтроки, СтруктураПоискаВход, МассивСтрок, ГлубинаРекурсииВход + 1);
		КонецЦикла;
	Иначе
		МассивСтрок = Новый Массив;			// Пустые данные поиска. Возвращаем пустой массив.
	КонецЕсли;
КонецПроцедуры		// НайтиСтрокуДереваЭтап()

// Позиционируется на строке с выбранной организацией и видом отчета.
&НаСервере
Процедура ВосстановитьПоложениеСтрокиОпераций()
	Если ЗначениеЗаполнено(ВыбраннаяОрганизацияОперации) И ЗначениеЗаполнено(ВыбранныйВидОтчета) Тогда
		// Поиск строк.
		НайденныеСтроки = Новый Массив;
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Организация", ВыбраннаяОрганизацияОперации);
		СтруктураПоиска.Вставить("ВидОтчета", ВыбранныйВидОтчета);
		НайтиСтрокуДереваОперации(ДеревоОперации, СтруктураПоиска, НайденныеСтроки);
		// Позиционирование.
		Если НайденныеСтроки.Количество() > 0 Тогда
			ПерваяСтрока = НайденныеСтроки[0];
			ИдентификаторСтроки = ПерваяСтрока.ПолучитьИдентификатор();
			Элементы.ДеревоОперации.ТекущаяСтрока = ИдентификаторСтроки;
		Иначе
			// Не найдена строка. Не позиционируемся.
		КонецЕсли; 
	Иначе
		// Нет данных о сохранённой строке.
	КонецЕсли;
КонецПроцедуры		// ВосстановитьПоложениеСтрокиОпераций()

// Рекурсивно заполняет параметр КоличествоЛистьев количество подчинённых 
//элементов-листьев дерева ДеревоВход, а также параметр СтруктураЛиста значением 
//данных последнего найденного листа. Параметр ГлубинаРекурсииВход защищает 
// от бесконечной рекурсии.
&НаСервере
Процедура ПосчитатьЛистья(ДеревоВход, КоличествоЛистьев, СтруктураЛиста, ГлубинаРекурсииВход = 0)
	ПодчиненныеСтроки = ДеревоВход.Строки;
	Если ПодчиненныеСтроки.Количество() > 0 Тогда
		Для Каждого ТекПодчиненныеСтроки Из ПодчиненныеСтроки Цикл
			ПосчитатьЛистья(ТекПодчиненныеСтроки, КоличествоЛистьев, СтруктураЛиста, ГлубинаРекурсииВход + 1);
		КонецЦикла;
	Иначе
		КоличествоЛистьев = КоличествоЛистьев + 1;
		ЗаполнитьЗначенияСвойств(СтруктураЛиста, ДеревоВход);
	КонецЕсли;
КонецПроцедуры		// ПосчитатьЛистья()

// Возвращает структуру, содержащую количество и структуру данных элементов-листьев в дереве ДеревоВход.
&НаСервере
Функция ПолучитьСтруктуруДанныхЛистьевВДереве(ДеревоВход)
	// Инициализация.
	РезультатФункции = Новый Структура;
	КоличествоЛистьев = 0;
	СтруктураЛиста = Новый Структура;		// Хранит данные элемента-листа.
	СтруктураЛиста.Вставить("Ссылка");
	СтруктураЛиста.Вставить("Организация");
	СтруктураЛиста.Вставить("ВидОтчета");
	СтруктураЛиста.Вставить("Исполняющий");
	СтруктураЛиста.Вставить("Согласование");
	СтруктураЛиста.Вставить("Состояние");
	СтруктураЛиста.Вставить("ДатаПоследнегоИзменения");
	СтруктураЛиста.Вставить("Изменивший");
	СтруктураЛиста.Вставить("ЭтапПроцесса");
	// Обход дерева.
	ПосчитатьЛистья(ДеревоВход, КоличествоЛистьев, СтруктураЛиста);
	// Возврат результата.
	РезультатФункции.Вставить("КоличествоЛистьев", КоличествоЛистьев);
	РезультатФункции.Вставить("СтруктураЛиста", СтруктураЛиста);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьСтруктуруДанныхЛистьевВДереве()

// Превращает в одну строку ветки дерева ДеревоВход, содержащие только один лист.
&НаСервере
Процедура СократитьДеревоОпераций(ДеревоВход)
	ПустойДокумент = Документы.НастраиваемыйОтчет.ПустаяСсылка();
	Попытка
		Для Каждого ТекСтроки Из ДеревоВход.Строки Цикл
			СтруктураДанныхЛистьев = ПолучитьСтруктуруДанныхЛистьевВДереве(ТекСтроки);
			КоличествоЛистьев = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхЛистьев, "КоличествоЛистьев", 0);
			СтруктураЛиста = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхЛистьев, "СтруктураЛиста", Новый Структура);
			Если КоличествоЛистьев = 1 Тогда
				ЗаполнитьЗначенияСвойств(ТекСтроки, СтруктураЛиста);
				Для Каждого ТекПодчиненнаяСтрока Из ТекСтроки.Строки Цикл
					ТекСтроки.Строки.Удалить(ТекПодчиненнаяСтрока);
				КонецЦикла;
			Иначе
				// Не сокращаем дерево.
			КонецЕсли;
		КонецЦикла;
	Исключение
		ТекстСообщения = НСтр("ru = 'При сокращении дерева возникли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры		// СократитьДеревоОпераций()

// Возвращает дерево операций по параметрам отбора.
&НаСервере
Функция ПолучитьДеревоОпераций(ОрганизацияВход, СценарийВход, ПериодОтчетаВход, ЭтапВход, СЗависимымиОрганизациямиВход = Истина)
	// Выполнение компоновки.
	РезультатФункции = Новый ДеревоЗначений;
	ДанныеРасшифровки = Неопределено;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетДокумента = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетДетали");  
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(МакетДокумента));
	КомпоновщикНастроек.ЗагрузитьНастройки(МакетДокумента.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВерсияОрганизационнойСтруктуры",		 ВерсияРегламента);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПарНастраиваемыйОтчет",				 Справочники.ДокументыБД.НайтиПоНаименованию("НастраиваемыйОтчет"));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПарТрансформационнаяКорректировка",	 Справочники.ДокументыБД.НайтиПоНаименованию("ТрансформационнаяКорректировка"));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПарТрансляция",						 Справочники.ДокументыБД.НайтиПоНаименованию("Трансляция"));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПарЭлиминация",						 Справочники.ДокументыБД.НайтиПоНаименованию("Элиминация"));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодСценария",						 ПериодОтчета);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Сценарий",							 СценарийВход);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("СЗависимымиОрганизациями",			 СЗависимымиОрганизациямиВход);
	Если ЗначениеЗаполнено(ОрганизацияВход) Тогда
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Организация",	 ОрганизацияВход);  
	Иначе
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Организация",	 Справочники.Организации.ПустаяСсылка());
	КонецЕсли;  
	Если ЗначениеЗаполнено(ЭтапВход) Тогда
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ЭтапПроцесса",	 ЭтапВход);
	Иначе
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ЭтапПроцесса",	 Справочники.ЭтапыУниверсальныхПроцессов.ПустаяСсылка());
	КонецЕсли;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(МакетДокумента, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ВывестиКомпоновкуВДерево(РезультатФункции, МакетКомпоновки, ДанныеРасшифровки);
	// Постобработка.
	РезультатФункции.Колонки.Добавить("ОрганизацияВидОтчета");
	ПроставитьПоляИзмеренийОпераций(РезультатФункции);
	РезультатФункции.Колонки.Добавить("ИндексКартинкиОрганизации");
	ПроставитьПолеИндексКартинкиДереваОпераций(РезультатФункции);
	СократитьДеревоОпераций(РезультатФункции);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьДеревоОпераций()

// В строке дерева этапов с идентификатором ИдентификаторСтрокиВход
// определяет налицие зависимых строк с организациями.
Функция ЕстьЗависимыеОрганизации(ИдентификаторСтрокиВход)
	РезультатФункции = Ложь;
	ТекущаяСтрокаДерева = ДеревоЭтапы.НайтиПоИдентификатору(ИдентификаторСтрокиВход);
	Если ТекущаяСтрокаДерева <> Неопределено Тогда
		Для Каждого ТекЭлементы Из ТекущаяСтрокаДерева.ПолучитьЭлементы() Цикл
			Если ТипЗнч(ТекЭлементы["ЭтапОрганизация"]) = Тип("СправочникСсылка.Организации") Тогда
				РезультатФункции = Истина;
				Прервать;
			Иначе
				// Продолжаем поиск.
			КонецЕсли;
		КонецЦикла;
	Иначе
		РезультатФункции = Ложь;		// Не удалось найти строку.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ЕстьЗависимыеОрганизации()

// Выводит дерево операций по данным информационной базы.
&НаСервере
Процедура ВывестиОтчетПоОперациям(ВосстановитьПоложениеСтрокиВход = Ложь, ИдентификаторСтрокиВход = Неопределено)
	СЗависимымиОрганизациями = Истина;
	Если ИдентификаторСтрокиВход <> Неопределено Тогда
		СЗависимымиОрганизациями = ЕстьЗависимыеОрганизации(ИдентификаторСтрокиВход);
	Иначе
		СЗависимымиОрганизациями = Истина;
	КонецЕсли;
	ДеревоВрем = ПолучитьДеревоОпераций(Организация, Сценарий, ПериодОтчета, ТекущийЭтап, СЗависимымиОрганизациями);
	ДеревоОперации.ПолучитьЭлементы().Очистить();
	ЗначениеВРеквизитФормы(ДеревоВрем, "ДеревоОперации");
	СоответствиеВыполненияОпераций = ПолучитьСоответствиеВыполненияОпераций(ДеревоВрем);
	СформироватьДиаграммуОперации(СоответствиеВыполненияОпераций);
	Если ВосстановитьПоложениеСтрокиВход Тогда
		ВосстановитьПоложениеСтрокиОпераций();
	Иначе
		// Не требуется обновления позиционирования.
	КонецЕсли;
КонецПроцедуры		// ВывестиОтчетПоОперациям()

// Обновляет картинку, показывающую состояние процесса по документу 
// управление сценарием УправлениеПериодомСценарияВход. А также отображает 
// подсказку у картинки.
&НаСервере
Процедура ОтобразитьГрафическоеСостояниеПроцесса(УправлениеПериодомСценарияВход)
	// Получение состояния из базы.
	СостояниеЗаявки = УправлениеПроцессамиСогласованияУХ.ВернутьТекущееСостояние(УправлениеПериодомСценарияВход);
	// Доопределим состояние до Черновика, если оно пустое.
	Если НЕ ЗначениеЗаполнено(СостояниеЗаявки) Тогда
		СостояниеЗаявки = Перечисления.СостоянияПроцесса.Черновик;
	Иначе
		// Состояние задано явно. Не изменяем.
	КонецЕсли;
	// Отобразим графическое представление.
	НоваяКартинкаСостояния = УправлениеПроцессамиСогласованияУХ.ПолучитьКартинкуОтображенияПроцесса(СостояниеЗаявки);
	Элементы.КартинкаСтатуса.Картинка = НоваяКартинкаСостояния;
	// Подсказка у графического статуса.
	Элементы.КартинкаСтатуса.Подсказка = Строка(СостояниеЗаявки);
КонецПроцедуры

// Считывает информацию из информационной базы и выводит её на форму.
&НаСервере
Процедура ВывестиОтчетНаСервере()
	// Дозаполнение способа отображения дерева этапов.
	Если НЕ ЗначениеЗаполнено(СпособОтображенияДереваЭтапов) Тогда
		СпособОтображенияДереваЭтапов = СпособОтображенияДереваПоЭтапам();
	Иначе
		// Способ установлен, не изменяем его.
	КонецЕсли;
	// Дозаполнение способа сортировки дерева этапов.
	Если НЕ ЗначениеЗаполнено(СпособСортировкиЭтапов) Тогда
		СпособСортировкиЭтапов = СпособСортировкиПоУмолчаниюПредставление();
	Иначе
		// Способ установлен, не изменяем его.
	КонецЕсли;
	Элементы.ДеревоЭтапыУстановитьСпособПоАлфавиту.Пометка = (СпособСортировкиЭтапов = СпособСортировкиПоАлфавитуПредставление());
	Элементы.ДеревоЭтапыУстановитьСпособПоУмолчанию.Пометка = (СпособСортировкиЭтапов = СпособСортировкиПоУмолчаниюПредставление());	
	// Непосредственный вывод данных в таблицы этапов и операций.
	Если ЗначениеЗаполнено(УправлениеПериодомСценария) Тогда
		УправлениеРабочимиПроцессамиУХ.ИнициализироватьПроцесс(ПериодОтчета, Сценарий, ТекущаяДатаСеанса(), Объект.СостоянияВыполненияПроцесса, мПоследователиСтрок, мПредшественникиСтрок);
		ВывестиОтчетПоЭтапам();
		ВывестиОтчетПоОперациям();
	Иначе
		ДеревоЭтапы.ПолучитьЭлементы().Очистить();
		ДеревоОперации.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	// Отображение флажка процесса.
	ОтобразитьГрафическоеСостояниеПроцесса(УправлениеПериодомСценария);
КонецПроцедуры		// ВывестиОтчетНаСервере()

// Возвращает адрес таблицы организаций для этапа ЭтапВход по версии регламента ВерсияРегламентаВход.
&НаСервереБезКонтекста
Функция ПолучитьАдресТаблицыОрганизацийЭтапа(ЭтапВход, ВерсияРегламентаВход)
	РезультатФункции = "";
	Выгрузка = МодульУправленияПроцессамиУХ.ПолучитьТаблицуОрганизацийЭтапаПоРегламенту(ЭтапВход, ВерсияРегламентаВход);
	Выгрузка.Сортировать("Организация Возр");
	РезультатФункции = ПоместитьВоВременноеХранилище(Выгрузка, Новый УникальныйИдентификатор);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьАдресТаблицыОрганизацийЭтапа()

// Создаёт документы с видом отчета ВидОтчетаВход по сценарию СценарийВход организации ОрганизацияВход
// в периоде ПериодВход по версии регламента ВерсияРегламентаВход.
&НаСервереБезКонтекста
Процедура СоздатьОбъекты_Сервер(СценарийВход, ОрганизацияВход, ВидОтчетаВход, ПериодВход, ПериодОкончаниеВход, ВерсияРегламентаВход)
	Попытка
		СтруктураСоздания = Новый Структура;
		// Получение настроек, специфических для разных документов.
		Если ТипЗнч(ВидОтчетаВход) = Тип("СправочникСсылка.ВидыОтчетов") Тогда                							// Экземпляр отчета.
			ДокументБд = Справочники.ДокументыБД.НайтиПоНаименованию("НастраиваемыйОтчет");
		ИначеЕсли ТипЗнч(ВидОтчетаВход) = Тип("СправочникСсылка.ШаблоныТрансформационныхКорректировок") Тогда			// Трансформационная корректировка.
			ДокументБд = Справочники.ДокументыБД.НайтиПоНаименованию("ТрансформационнаяКорректировка");
			Если ЗначениеЗаполнено(ВидОтчетаВход) Тогда
				СтруктураСоздания.Вставить("ВидОперации",					 ВидОтчетаВход.ВидОперации);
				СтруктураСоздания.Вставить("ПланСчетов",					 ВидОтчетаВход.ПланСчетов);
				СтруктураСоздания.Вставить("ДвиженияПоРегиструБухгалтерии",	 ВидОтчетаВход.ДвиженияПоРегиструБухгалтерии);
			Иначе
				СтруктураСоздания.Вставить("ВидОперации",					 Справочники.ВидыОпераций.ПустаяСсылка());
				СтруктураСоздания.Вставить("ПланСчетов",					 Справочники.ПланыСчетовБД.ПустаяСсылка());
				СтруктураСоздания.Вставить("ДвиженияПоРегиструБухгалтерии",	 Ложь);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ВидОтчетаВход) = Тип("СправочникСсылка.ШаблоныТрансляций") Тогда                               // Трансляция.
			ДокументБд = Справочники.ДокументыБД.НайтиПоНаименованию("Трансляция");
		Иначе                                                                                                           // Неизвестный вариант.
			ТекстСообщения = НСтр("ru = 'Неизвестный вид отчета: %ВидОтчета%. Создание отменено.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидОтчета%", Строка(ВидОтчетаВход));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Возврат;
		КонецЕсли;
		// Добавление настроек, общих для всех документов.
		СтруктураСоздания.Вставить("ВерсияРегламента",		 	ВерсияРегламентаВход);
		СтруктураСоздания.Вставить("ВидОтчета",				 	ВидОтчетаВход);
		СтруктураСоздания.Вставить("ДокументБД",			 	ДокументБд);
		СтруктураСоздания.Вставить("Организация",			 	ОрганизацияВход);
		СтруктураСоздания.Вставить("ПериодСценария",		 	ПериодВход);
		СтруктураСоздания.Вставить("ПериодСценарияОкончание",	ПериодОкончаниеВход);
		СтруктураСоздания.Вставить("Сценарий",				 	СценарийВход);
		// Непосредственное формирование документов.
		МодульУправленияПроцессамиУХ.СоздатьОбъектПоСтруктуре(СтруктураСоздания);
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось создать объекты %ВидОтчета%: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидОтчета%", Строка(ВидОтчетаВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры		// СоздатьОбъекты_Сервер()

// Управляет видимостью элементов на форме.
&НаСервере
Процедура УправлениеВидимостью()
	Элементы.ГруппаДиаграмма.Видимость = Элементы.ФормаОтобразитьДиаграмму.Пометка;
КонецПроцедуры		// УправлениеВидимостью()

// Создаёт объекты по строкам с идентификаторами из МассивИдентификаторовСтрокВход
// по структуре данных СтруктураСозданияВход.
&НаСервере
Процедура СоздатьОбъектыПоВыделеннымСтрокам(МассивИдентификаторовСтрокВход, СтруктураСозданияВход)
	НоваяВерсияРегламента		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураСозданияВход, "ВерсияРегламента",			 Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка());
	НовыйПериодОтчета		 	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураСозданияВход, "ПериодОтчета",				 Справочники.Периоды.ПустаяСсылка());
    НовыйПериодОтчетаОкончание	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураСозданияВход, "ПериодОтчетаОкончание",		 Справочники.Периоды.ПустаяСсылка());
	НовыйСценарий			 	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураСозданияВход, "Сценарий",					 Справочники.Сценарии.ПустаяСсылка());
	
	Для Каждого ТекМассивИдентификаторовСтрокВход Из МассивИдентификаторовСтрокВход Цикл
		СтрокаДерева = ДеревоОперации.НайтиПоИдентификатору(ТекМассивИдентификаторовСтрокВход);
		НоваяОрганизация	 = СтрокаДерева.Организация;
		НовыйВидОтчета		 = СтрокаДерева.ВидОтчета;
		Если ЗначениеЗаполнено(НоваяОрганизация) И ЗначениеЗаполнено(НовыйВидОтчета) Тогда
			СоздатьОбъекты_Сервер(НовыйСценарий, НоваяОрганизация, НовыйВидОтчета, НовыйПериодОтчета, НовыйПериодОтчетаОкончание, НоваяВерсияРегламента);
		Иначе
			Продолжить;					// Группирующая строка. Ничего не делаем.
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры		// СоздатьОбъектыПоВыделеннымСтрокам()

// В строках, которые заданы массивом идентификаторов строк МассивИдентификаторовСтрокВход,
// заполняет отчёты в соответствие с регламентом, заданном в параметре ВерсияРегламента структуры
// СтруктураСозданияВход.
&НаСервере
Процедура ЗаполнитьОбъектыПоВыделеннымСтрокам(МассивИдентификаторовСтрокВход, СтруктураСозданияВход)
	НоваяВерсияРегламента	 = СтруктураСозданияВход.ВерсияРегламента;
	МассивСтруктурНастроек = Новый Массив();
	Для Каждого ТекМассивИдентификаторовСтрокВход Из МассивИдентификаторовСтрокВход Цикл
		СтрокаДерева = ДеревоОперации.НайтиПоИдентификатору(ТекМассивИдентификаторовСтрокВход);
		ТекСсылка = СтрокаДерева.Ссылка;
		Если ЗначениеЗаполнено(ТекСсылка) Тогда
			СтрукутраНастройки = Новый Структура;
			СтрукутраНастройки.Вставить("Организация",			 Неопределено);
			СтрукутраНастройки.Вставить("ПериодОтчета",			 Неопределено);
			СтрукутраНастройки.Вставить("Сценарий",				 Неопределено);
			СтрукутраНастройки.Вставить("ОсновнаяВалюта",		 Неопределено);
			СтрукутраНастройки.Вставить("ШаблонДокументаБД",	 Неопределено);
			СтрукутраНастройки.Вставить("ДокументБД",			 Неопределено);
			СтрукутраНастройки.Вставить("ДокументСсылка",		 ТекСсылка);
			СтрукутраНастройки.Вставить("ДокументОбъект",		 Неопределено);
			МассивСтруктурНастроек.Добавить(СтрукутраНастройки);	
		Иначе
			Продолжить;					// Группировочная строка. Ничего не делаем.
		КонецЕсли;
	КонецЦикла;
	Попытка
		УправлениеРабочимиПроцессамиУХ.ОбработатьДокументыПоРегламенту(МассивСтруктурНастроек, НоваяВерсияРегламента);	
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось заполнить документы по причине: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры		// ЗаполнитьОбъектыПоВыделеннымСтрокам()

// Возвращает документ управление отчетным периодом по регламенту ВерсияРегламентаВход,
// сценарию СценарийВход и периоду ПериодОтчетаВход. В случае неудачи получения - 
// возвращает пустую ссылку.
&НаСервереБезКонтекста
Функция ПолучитьУправлениеОтчетнымПериодом(ВерсияРегламентаВход, ПериодОтчетаВход, СценарийВход)
	РезультатФункции = Документы.УправлениеПериодомСценария.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	УправлениеПериодомСценария.Ссылка,
		|	УправлениеПериодомСценария.Сценарий,
		|	УправлениеПериодомСценария.ПериодСценария,
		|	УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры
		|ИЗ
		|	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
		|ГДЕ
		|	УправлениеПериодомСценария.Сценарий = &Сценарий
		|	И УправлениеПериодомСценария.ПериодСценария = &ПериодСценария
		|	И УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры = &ВерсияОрганизационнойСтруктуры
		|	И НЕ УправлениеПериодомСценария.ПометкаУдаления";
	Запрос.УстановитьПараметр("ВерсияОрганизационнойСтруктуры", ВерсияРегламентаВход);
	Запрос.УстановитьПараметр("ПериодСценария", ПериодОтчетаВход);
	Запрос.УстановитьПараметр("Сценарий", СценарийВход);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Выгрузить().Количество() = 1 Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			РезультатФункции = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
	Иначе
		РезультатФункции = Документы.УправлениеПериодомСценария.ПустаяСсылка();
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьУправлениеОтчетнымПериодом()

// В массив МассивОтчетов заносит отчеты из дерева ДеревоВход. Параметр ГлубинаРекурсииВход
// защищает от бесконечной рекурсии.
&НаСервереБезКонтекста
Процедура ЗаполнитьМассивОтчетовВДеревеОпераций(ДеревоВход, МассивОтчетов, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 10000 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ТекСтроки Из ДеревоВход.Строки Цикл
		ТекСсылка = ТекСтроки.Ссылка;
		Если ЗначениеЗаполнено(ТекСсылка) Тогда
			МассивОтчетов.Добавить(ТекСсылка);
		Иначе
			// Пустой отчет, не добавляем в массив.
		КонецЕсли;
		ЗаполнитьМассивОтчетовВДеревеОпераций(ТекСтроки, МассивОтчетов, ГлубинаРекурсииВход + 1);
	КонецЦикла;
КонецПроцедуры		// ЗаполнитьМассивОтчетовВДеревеОпераций()

// Выполняет заполнение отчетов в этапе ЭтапВход по переданным настройкам.
&НаСервере
Функция ЗаполнитьЭтапПоРегламенту_Сервер(ОрганизацияВход, СценарийВход, ПериодОтчетаВход, ЭтапВход)
	РезультатФункции = Истина;
	// Формирование дерева операций по этапу.
	ДеревоВрем = ПолучитьДеревоОпераций(ОрганизацияВход, СценарийВход, ПериодОтчетаВход, ЭтапВход);
	// Извлечение массива ссылок из дерева.
	МассивОтчетов = Новый Массив;
	ЗаполнитьМассивОтчетовВДеревеОпераций(ДеревоВрем, МассивОтчетов);
	МассивОтчетов = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивОтчетов);
	МассивОтчетов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивОтчетов);
	// Формирование массива структур для заполнения.
	МассивСтруктурНастроек = Новый Массив;
	Для Каждого ТекМассивОтчетов Из МассивОтчетов Цикл
		СтрукутраНастройки = Новый Структура;
		СтрукутраНастройки.Вставить("Организация",			 Неопределено);
		СтрукутраНастройки.Вставить("ПериодОтчета",			 Неопределено);
		СтрукутраНастройки.Вставить("Сценарий",				 Неопределено);
		СтрукутраНастройки.Вставить("ОсновнаяВалюта",		 Неопределено);
		СтрукутраНастройки.Вставить("ШаблонДокументаБД",	 Неопределено);
		СтрукутраНастройки.Вставить("ДокументБД",			 Неопределено);
		СтрукутраНастройки.Вставить("ДокументСсылка",		 ТекМассивОтчетов);
		СтрукутраНастройки.Вставить("ДокументОбъект",		 Неопределено);
		МассивСтруктурНастроек.Добавить(СтрукутраНастройки);	
	КонецЦикла;
	// Непосредственное заполнение по настройкам.
	Попытка
		УправлениеРабочимиПроцессамиУХ.ОбработатьДокументыПоРегламенту(МассивСтруктурНастроек, ВерсияРегламента);	
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось заполнить документ по причине: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Ложь;
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции		// ЗаполнитьЭтапПоРегламенту_Сервер()

// Создаёт документы в этапе ЭтапВход по периоду ПериодОтчетаВход, сценарию СценарийВход
// и регламенту ВерсияРегламентаВход. Когда параметр ОрганизацияВход указан, будут созданы отчеты
// только по выбранной организации; иначе - по всем.
&НаСервереБезКонтекста
Процедура СоздатьДокументыЭтапа_Сервер(ОрганизацияВход, СценарийВход, ПериодОтчетаВход,ПериодОтчетаОкончаниеВход, ЭтапВход, ВерсияРегламентаВход)
	ТаблицаФормируемыхДокументов = МодульУправленияПроцессамиУХ.ПолучитьТаблицуФормируемыхДокументовПоЭтапу(ЭтапВход, ВерсияРегламентаВход);
	Для Каждого ТекТаблицаФормируемыхДокументов Из ТаблицаФормируемыхДокументов Цикл
		СоздатьОбъекты_Сервер(СценарийВход, ТекТаблицаФормируемыхДокументов.ОрганизационнаяЕдиница, ТекТаблицаФормируемыхДокументов.ШаблонДокумента, ПериодОтчетаВход, ПериодОтчетаОкончаниеВход, ВерсияРегламентаВход);
	КонецЦикла;
КонецПроцедуры		// СоздатьДокументыЭтапа_Сервер()

&НаСервере
Процедура ОткрытьЭтапСервер(ОрганизацииАдрес, ОбрабатыватьДокументы) 
	МассивОрганизаций = ПолучитьИЗВременногоХранилища(ОрганизацииАдрес).ВыгрузитьКолонку("Организация");
	
	МодульУправленияПроцессамиУХ.УстановитьСостояниеЭтапаПроцессаОтчетности(
		Объект.СостоянияВыполненияПроцесса
		,мПредшественникиСтрок	
		,мПоследователиСтрок
		,ВерсияРегламента
		,ПериодОтчета
		,Сценарий
		,ТекущийЭтап
		,МассивОрганизаций
		,"Выполняется"
		,
		,
		,ОбрабатыватьДокументы
		,ЭкземплярПроцесса);
	ВывестиОтчетНаСервере();
КонецПроцедуры			// ОткрытьЭтапСервер()

&НаСервере
Процедура ОтменитьОбработкуЭтапаСервер(ОрганизацииАдрес, ОбрабатыватьДокументы) 
	МассивОрганизаций = ПолучитьИЗВременногоХранилища(ОрганизацииАдрес).ВыгрузитьКолонку("Организация");
	
	МодульУправленияПроцессамиУХ.УстановитьСостояниеЭтапаПроцессаОтчетности(
		Объект.СостоянияВыполненияПроцесса
		,мПредшественникиСтрок	
		,мПоследователиСтрок
		,ВерсияРегламента
		,ПериодОтчета
		,Сценарий
		,ТекущийЭтап
		,МассивОрганизаций
		,"Запланирован"
		,
		,
		,ОбрабатыватьДокументы
		,ЭкземплярПроцесса);
	
	ВывестиОтчетНаСервере();
КонецПроцедуры			// ОтменитьОбработкуЭтапаСервер()

&НаСервере
Процедура ЗакрытьЭтапСервер(ОрганизацииАдрес,ОбрабатыватьДокументы) 
	
	МассивОрганизаций = Новый Массив;
	Если ЭтоАдресВременногоХранилища(ОрганизацииАдрес) Тогда
		МассивОрганизаций = ПолучитьИЗВременногоХранилища(ОрганизацииАдрес).ВыгрузитьКолонку("Организация");
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить адрес таблицы организаций для обработки отчета'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		МассивОрганизаций = Новый Массив;
	КонецЕсли;
	МодульУправленияПроцессамиУХ.УстановитьСостояниеЭтапаПроцессаОтчетности(
	Объект.СостоянияВыполненияПроцесса
	,мПредшественникиСтрок	
	,мПоследователиСтрок
	,ВерсияРегламента
	,ПериодОтчета
	,Сценарий
	,ТекущийЭтап
	,МассивОрганизаций
	,"Утвержден"
	,
	,
	,ОбрабатыватьДокументы
	,ЭкземплярПроцесса);
	ВывестиОтчетНаСервере();
КонецПроцедуры		// ЗакрытьЭтапСервер()

&НаСервере
Функция ВернутьОсновныеРеквизитыОбъекта()
	
	СтруктураВрем = Новый Структура;
	СтруктураВрем.Вставить("ПериодСценария", ПериодОтчета);
	СтруктураВрем.Вставить("Сценарий", Сценарий);
	СтруктураВрем.Вставить("ШаблонПроцесса", ВерсияРегламента.ШаблонПроцесса);
	РезультатФункции = Новый ФиксированнаяСтруктура(СтруктураВрем);
	Возврат РезультатФункции;
	
КонецФункции		// ВернутьОсновныеРеквизитыОбъекта()

&НаСервере
Процедура ВыполнитьПроцессДоТекущегоЭтапа_Сервер(ЭтапПроцесса)
	УправлениеПроцессамиСогласованияУХ.ВыполнитьПроцессДоЭтапа(ЭтапПроцесса, ВерсияРегламента, Объект.СостоянияВыполненияПроцесса, ПериодОтчета, Сценарий, ЭкземплярПроцесса, мПредшественникиСтрок, мПоследователиСтрок);
КонецПроцедуры		// ВыполнитьПроцессДоТекущегоЭтапа_Сервер()

&НаСервере
Процедура СформироватьПробнуюОтчетность_Сервер(ЭтапПроцесса, Организация = Неопределено)

	СтруктураПараметров = УправлениеПроцессамиСогласованияУХ.СформироватьСтруктуруПараметровПроцессаПодготовки();
	СтруктураПараметров.Вставить("ВерсияРегламента", ВерсияРегламента);
	СтруктураПараметров.Вставить("ПериодОтчета", ПериодОтчета);
	СтруктураПараметров.Вставить("Сценарий", Сценарий);
	СтруктураПараметров.Вставить("ЭкземплярПроцесса", Документы.ЭкземплярПроцесса.ПустаяСсылка());
	УправлениеПроцессамиСогласованияУХ.СформироватьПробнуюОтчетностьДоЭтапа(ЭтапПроцесса, Объект.СостоянияВыполненияПроцесса, мПоследователиСтрок, СтруктураПараметров);
	
КонецПроцедуры		// СформироватьПробнуюОтчетность_Сервер()

// Серверная обёртка для кода при изменении поля Управление периодом сценария.
&НаСервере
Процедура ПриИзмененииУОП_Сервер()
	ВерсияРегламента 		= УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры;
	ПериодОтчета 			= УправлениеПериодомСценария.ПериодСценария;
	ПериодОтчетаОкончание   = УправлениеПериодомСценария.ПериодСценарияОкончание;
	Сценарий = УправлениеПериодомСценария.Сценарий;
КонецПроцедуры		// ПриИзмененииУОП_Сервер()

// Запускает процесс по документу Управление отчетным периодом УправлениеПериодомВход.
// Возвращает успешность операции.
&НаСервереБезКонтекста
Функция ЗапуститьПроцесс_Сервер(УправлениеПериодомВход)
	РезультатФункции = Истина;
	Попытка
		УправлениеПериодомОбъект = УправлениеПериодомВход.ПолучитьОбъект();
		РезультатФункции = Документы.УправлениеПериодомСценария.ЗапуститьПроцесс(УправлениеПериодомОбъект);
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось запустить процесс по документу %ДокументПроцесса%: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументПроцесса%", Строка(УправлениеПериодомВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Ложь;
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции

// По списку экземпляров отчетов СписокВход возвращает соответствие
// согласующего каждому документу.
&НаСервереБезКонтекста
Функция ПолучитьСоответствиеСогласованияДокументов(СписокВход)
	РезультатФункции = Новый Соответствие;
	Для Каждого ТекСписокВход Из СписокВход Цикл
		ТекДокумент = ТекСписокВход.Значение;
		Согласующий = МодульУправленияПроцессамиУХ.ПолучитьОтветственногоЗаТипОбъекта(ТекДокумент, , , , "Согласующий");
		РезультатФункции.Вставить(ТекДокумент, Согласующий);
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьСоответствиеСогласованияДокументов()

// Серверная обертка для команды ПринятьКСогласованию.
&НаСервереБезКонтекста
Процедура ПринятьКСогласованию_Сервер(СписокДокументовВход)
	// Инициализация.
	СостояниеУтвержден = ПредопределенноеЗначение("Перечисление.СостоянияОтчетов.Утвержден");
	СписокУтвержден = Новый СписокЗначений;
	// Получение соответствие согласующих.
	СоответствиеСогласования = ПолучитьСоответствиеСогласованияДокументов(СписокДокументовВход);
	// Обход полученного списка документов.
	Для Каждого ТекСписокДокументовВход Из СписокДокументовВход Цикл
		ТекДокумент = ТекСписокДокументовВход.Значение;
		// Проверим, можно ли отправить документ на согласование.
		Согласующий = СоответствиеСогласования[ТекДокумент];
		Если ЗначениеЗаполнено(Согласующий) Тогда
			// Есть согласующий. Отправим на согласование.
			Попытка
				// Проверим, что экземпляр отчета проведен.
				Если ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
					Если НЕ ТекДокумент.Проведен Тогда
						ДокументОбъект = ТекДокумент.ПолучитьОбъект();
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					Иначе
						// Уже проведен.
					КонецЕсли;
				Иначе
					// Для прочих вариантов не проверяем проведение.
				КонецЕсли;
				// Непосредственная отправка на согласование.
				МодульУправленияПроцессамиУХ.ПринятьКОбработке(, ТекДокумент);			
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось отправить на согласование документ %Документ% : %ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Строка(ТекДокумент));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецПопытки;
		Иначе
			// Нет согласующего. Добавим в список для утверждения вручную.
			СписокУтвержден.Добавить(ТекДокумент);
		КонецЕсли;
	КонецЦикла;
	// Установим состояние Утвержден для всех документов из списка Утверджен. 
	СтруктураОбработки = Новый Структура;
	СтруктураОбработки.Вставить("Состояние", СостояниеУтвержден);
	МодульУправленияПроцессамиУХ.ИзменитьСостояниеОбъектовПроцесса(СписокУтвержден, СтруктураОбработки);
КонецПроцедуры		// ПринятьКСогласованию_Сервер()

// Проверяет, есть ли в текущем процессе подготовки отчетности этапы-последователи
// по организации ОрганизацииВход в состоянии отличном от неактивного.
&НаСервере
Функция ЕстьЭтапыПоследователиДляСнятия(ОрганизацииВход)
	РезультатФункции = МодульУправленияПроцессамиУХ.ЕстьЭтапыПоследователиДляСнятия(ОрганизацииВход, ТекущийЭтап, Объект.СостоянияВыполненияПроцесса, мПоследователиСтрок, ПериодОтчета, Сценарий);
	Возврат РезультатФункции;
КонецФункции		// ЕстьЭтапыПоследователиДляСнятия()

// Отменяет проведение документа ДокументВход.
&НаСервереБезКонтекста
Процедура ОтменитьПроведение_Сервер(ДокументВход)
	ДокументОбъект = ДокументВход.ПолучитьОбъект();
	ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
КонецПроцедуры		// ОтменитьПроведение_Сервер()

// Определяет проведённость документа СсылкаВход.
&НаСервереБезКонтекста
Функция ДокументПроведен(СсылкаВход)
	РезультатФункции = Ложь;
	Если ЗначениеЗаполнено(СсылкаВход) Тогда
		РезультатФункции = СсылкаВход.Проведен;
	Иначе
		РезультатФункции = Ложь;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ДокументПроведен

// Разворачивает дерево операций со всеми подчинёнными узлами.
&НаКлиенте
Процедура РазвернутьДеревоОпераций()
	ЭлементыОперации = ДеревоОперации.ПолучитьЭлементы();
	Для каждого ТекЭлементыОперации Из ЭлементыОперации Цикл
		ТекИдентификаторСтроки = ТекЭлементыОперации.ПолучитьИдентификатор();
		Элементы.ДеревоОперации.Развернуть(ТекИдентификаторСтроки, Истина);
	КонецЦикла;
КонецПроцедуры		// РазвернутьДеревоОпераций()

&НаКлиенте
Процедура ОбрабатыватьОтчетыЭтапаПриИзмененииСостоянияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	ИмяСобытия = ДополнительныеПараметры.ИмяСобытия;
	Параметр =   ДополнительныеПараметры.Параметр;
	ОбрабатыватьОтчеты = Ложь;
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ОбрабатыватьОтчеты = Ложь;
	Иначе
		ОбрабатыватьОтчеты = Истина;
	КонецЕсли; 
	Если ИмяСобытия = "Закрыть этап"  Тогда
		КартинкаОповещения = БиблиотекаКартинок.УправлениеПериодомСценария_32;
		ТекстОповещения = НСтр("ru = 'Закрытие этапа'");
		ПояснениеОповещения = НСтр("ru = 'Закрывается этап %Этап%'");
		ПояснениеОповещения = СтрЗаменить(ПояснениеОповещения, "%Этап%", Строка(ТекущийЭтап));
		ПоказатьОповещениеПользователя(ТекстОповещения, , ПояснениеОповещения, КартинкаОповещения);
		ЗакрытьЭтапСервер(Параметр, ДополнительныеПараметры);
	ИначеЕсли ИмяСобытия = "Открыть этап"  Тогда
		КартинкаОповещения = БиблиотекаКартинок.УправлениеПериодомСценария_32;
		ТекстОповещения = НСтр("ru = 'Открытие этапа'");
		ПояснениеОповещения = НСтр("ru = 'Начата обработка этапа %Этап%'");
		ПояснениеОповещения = СтрЗаменить(ПояснениеОповещения, "%Этап%", Строка(ТекущийЭтап));
		ПоказатьОповещениеПользователя(ТекстОповещения, , ПояснениеОповещения, КартинкаОповещения);
		ОткрытьЭтапСервер(Параметр, ДополнительныеПараметры);
	ИначеЕсли ИмяСобытия = "Отменить обработку этапа"  Тогда	
		КартинкаОповещения = БиблиотекаКартинок.УправлениеПериодомСценария_32;
		ТекстОповещения = НСтр("ru = 'Отмена обработки'");
		ПояснениеОповещения = НСтр("ru = 'Запущена отмена обработки этапа %Этап%'");
		ПояснениеОповещения = СтрЗаменить(ПояснениеОповещения, "%Этап%", Строка(ТекущийЭтап));
		ПоказатьОповещениеПользователя(ТекстОповещения, , ПояснениеОповещения, КартинкаОповещения);
		ОтменитьОбработкуЭтапаСервер(Параметр, ДополнительныеПараметры);
	КонецЕсли;
	КартинкаОповещения = БиблиотекаКартинок.Успешно32;
	ТекстОповещения = НСтр("ru = 'Обработка этапа'");
	ПояснениеОповещения = НСтр("ru = 'Обработка этапа %Этап% завершена'");
	ПояснениеОповещения = СтрЗаменить(ПояснениеОповещения, "%Этап%", Строка(ТекущийЭтап));
	ПоказатьОповещениеПользователя(ТекстОповещения, , ПояснениеОповещения, КартинкаОповещения);
КонецПроцедуры		// ОбрабатыватьОтчетыЭтапаПриИзмененииСостоянияЗавершение()

// Функция задает вопрос пользователю о необходимости обработки отчетов этапа
//
&НаКлиенте
Функция ОбрабатыватьОтчетыЭтапаПриИзмененииСостояния(ИмяСобытия,Параметр)
	Если ИмяСобытия = "Закрыть этап"  Тогда
		ТекстВопроса = НСтр("ru = 'Выполнять обработку настраиваемых отчетов этапа:
                            |		- загрузку отчетов из хранилища файлов, в случае их наличия;
                            |		- автозаполнение отчетов;
                            |		- автоутверждение отчетов'");
	ИначеЕсли ИмяСобытия = "Открыть этап"  Тогда
		ТекстВопроса = НСтр("ru = 'Выполнять обработку настраиваемых отчетов этапа:
                            |		- загрузку отчетов из хранилища файлов, в случае их наличия;
                            |		- перевод запланированных отчетов в состояние """"Выполняется"""";
                            |		- автозаполнение отчетов'");	
	Иначе
		Возврат Ложь;
	КонецЕсли;
	СтруктураПараметровОповещения = Новый Структура;
	СтруктураПараметровОповещения.Вставить("ИмяСобытия", ИмяСобытия);
	СтруктураПараметровОповещения.Вставить("Параметр", Параметр);
	Оповещение = Новый ОписаниеОповещения("ОбрабатыватьОтчетыЭтапаПриИзмененииСостоянияЗавершение", ЭтотОбъект, СтруктураПараметровОповещения);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
КонецФункции		// ОбрабатыватьОтчетыЭтапаПриИзмененииСостояния()

// Рекурсивно добавляет в массив ВыходнойМассив зависимые
// строки дерева строки СтрокаДереваВход. Параметр ГлубинаРекурсииВход
// защищает от бесконечной рекурсии.
&НаКлиенте
Процедура ДобавитьПодчиненныеСтрокиВМассив(СтрокаДереваВход, ВыходнойМассив, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 10000 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ТекСтрокаДереваВход Из СтрокаДереваВход.ПолучитьЭлементы() Цикл
		ВыходнойМассив.Добавить(ТекСтрокаДереваВход);
		ДобавитьПодчиненныеСтрокиВМассив(ТекСтрокаДереваВход, ВыходнойМассив, ГлубинаРекурсииВход + 1);
	КонецЦикла;	
КонецПроцедуры		// ДобавитьПодчиненныеСтрокиВМассив()

// Возвращает копию массива строк МассивСтрокВход, куда добавлены также 
// все подчинённые строки.
&НаКлиенте
Функция ДополнитьПодчиненнымиСтроками(МассивСтрокВход)
	РезультатФункции = Новый Массив;
	Для Каждого ТекМассивВход Из МассивСтрокВход Цикл	
		РезультатФункции.Добавить(ТекМассивВход);
		ДобавитьПодчиненныеСтрокиВМассив(ТекМассивВход, РезультатФункции);
	КонецЦикла;
	РезультатФункции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатФункции);
	Возврат РезультатФункции;
КонецФункции		// ДополнитьПодчиненнымиСтроками()

// Возвращает список значений документов, выбранных в дереве Операции.
&НаКлиенте
Функция ПолучитьСписокВыбранныхДокументов()
	// Инициализация.
	РезультатФункции = Новый СписокЗначений;
	ВыделенныеСтрокиДерева = Элементы.ДеревоОперации.ВыделенныеСтроки;
	// Получим все выделенные строки, включая подчинённые.
	МассивСтрок = Новый Массив;
	Для Каждого ТекВыделенныеСтрокиДерева Из ВыделенныеСтрокиДерева Цикл
		СтрокаДерева = ДеревоОперации.НайтиПоИдентификатору(ТекВыделенныеСтрокиДерева);
		МассивСтрок.Добавить(СтрокаДерева);
		СохранитьПоложениеСтрокиОперации(СтрокаДерева.Организация, СтрокаДерева.ВидОтчета);
	КонецЦикла;
	МассивСтрок = ДополнитьПодчиненнымиСтроками(МассивСтрок);
	// Получим список документов.
	Для Каждого ТекМассивСтрок Из МассивСтрок Цикл
		Если ТипЗнч(ТекМассивСтрок.Ссылка) = Тип("ДокументСсылка.Элиминация") Тогда
			// Обрабоатываем отдельно, т.к. Элиминация всегда имеет пустой вид отчета.
			Если ЗначениеЗаполнено(ТекМассивСтрок.Ссылка) Тогда
				РезультатФункции.Добавить(ТекМассивСтрок.Ссылка);
			Иначе
				Продолжить;				// Группирующая строка. Пропускаем.
			КонецЕсли;
		Иначе	
			// Прочие документы. Проверим вид отчета и организацию.
			Если ЗначениеЗаполнено(ТекМассивСтрок.ВидОтчета) И ЗначениеЗаполнено(ТекМассивСтрок.Организация) Тогда
				Если ЗначениеЗаполнено(ТекМассивСтрок.Ссылка) Тогда
					РезультатФункции.Добавить(ТекМассивСтрок.Ссылка);
				Иначе
					ТекстСообщения = НСтр("ru = 'Отчёт %ВидОтчета% для %Организация% не создан. Операция отменена.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидОтчета%", Строка(ТекМассивСтрок.ВидОтчета));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(ТекМассивСтрок.Организация));
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				КонецЕсли;	
			Иначе
				Продолжить;				// Группирующая строка. Пропускаем.
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьСписокВыбранныхДокументов()

// Для выбранного документа в дереве операций устанавливает состояние СостояниеВход.
&НаКлиенте
Процедура УстановитьСостояниеТекущемуДокументу(СостояниеВход) 
	// Инициализация.
	СтруктураОбработки = Новый Структура;
	СтруктураОбработки.Вставить("Состояние", СостояниеВход);
	// Изменим состояния выбранных документов и обновим список.
	СписокДокументов = ПолучитьСписокВыбранныхДокументов();
	МодульУправленияПроцессамиУХ.ИзменитьСостояниеОбъектовПроцесса(СписокДокументов, СтруктураОбработки);
	ИдентификаторСтроки = Неопределено;	
	ТекДанные = Элементы.ДеревоЭтапы.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ИдентификаторСтроки = ТекДанные.ПолучитьИдентификатор();
	Иначе
		ИдентификаторСтроки = Неопределено;
	КонецЕсли;
	ВывестиОтчетПоОперациям(Истина, ИдентификаторСтроки);
КонецПроцедуры		// УстановитьСостояниеТекущемуДокументу()

// Разворачивает дерево на форме.
&НаКлиенте
Процедура РазвернутьДерево()
	ЭлементыДереваОрганизаций = ДеревоЭтапы.ПолучитьЭлементы();
	Для Каждого ТекЭлементыДереваОрганизаций Из ЭлементыДереваОрганизаций Цикл 
		ТекИдентификатор = ТекЭлементыДереваОрганизаций.ПолучитьИдентификатор();
		Элементы.ДеревоЭтапы.Развернуть(ТекИдентификатор, Истина);
	КонецЦикла;
КонецПроцедуры		// РазвернутьДерево()

// Сворачивает дерево этапов на форме.
&НаКлиенте
Процедура СвернутьДерево()
	ЭлементыДереваОрганизаций = ДеревоЭтапы.ПолучитьЭлементы();
	Для Каждого ТекЭлементыДереваОрганизаций Из ЭлементыДереваОрганизаций Цикл 
		ТекИдентификатор = ТекЭлементыДереваОрганизаций.ПолучитьИдентификатор();
		Элементы.ДеревоЭтапы.Свернуть(ТекИдентификатор);
	КонецЦикла;
КонецПроцедуры		// СвернутьДерево()

// Сворачивает дерево Операций на форме.
&НаКлиенте
Процедура СвернутьДеревоОпераций()
	ЭлементыДеревоОперации = ДеревоОперации.ПолучитьЭлементы();
	Для Каждого ТекЭлементыДеревоОперации Из ЭлементыДеревоОперации Цикл 
		ТекИдентификатор = ТекЭлементыДеревоОперации.ПолучитьИдентификатор();
		Элементы.ДеревоОперации.Свернуть(ТекИдентификатор);
	КонецЦикла;
КонецПроцедуры		// СвернутьДеревоОпераций()

// Устанавливает положение курсора дерева этапов на последнюю позицию.
&НаСервере
Процедура ВосстановитьПоложениеСтрокиЭтапа()
	ЕстьТекЭтап = ЗначениеЗаполнено(ТекущийЭтап);
	ЕстьТекОрганизация = ЗначениеЗаполнено(ВыбраннаяОрганизация);
	Если ЕстьТекЭтап ИЛИ ЕстьТекОрганизация Тогда
		// Поиск строк.
		СтруктураПоиска = Новый Структура;
		Если ЕстьТекОрганизация Тогда
			СтруктураПоиска.Вставить("Организация", ВыбраннаяОрганизация);
		Иначе	
			СтруктураПоиска.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
		КонецЕсли;
		Если ЕстьТекЭтап Тогда
			СтруктураПоиска.Вставить("ЭтапПроцесса", ТекущийЭтап);
		Иначе	
			СтруктураПоиска.Вставить("ЭтапПроцесса", Справочники.ЭтапыУниверсальныхПроцессов.ПустаяСсылка());
		КонецЕсли;
		НайденныеСтроки = Новый Массив;
		НайтиСтрокуДереваЭтап(ДеревоЭтапы, СтруктураПоиска, НайденныеСтроки);
		// Позиционирование.
		Если НайденныеСтроки.Количество() > 0 Тогда
			ПерваяСтрока = НайденныеСтроки[0];
			ИдентификаторСтроки = ПерваяСтрока.ПолучитьИдентификатор();
			Элементы.ДеревоЭтапы.ТекущаяСтрока = ИдентификаторСтроки;
		Иначе	
			// Строка не найдена. Не позиционируемся.
		КонецЕсли; 
	Иначе
		// Нет данных о сохранённой строке.
	КонецЕсли;
КонецПроцедуры		// ВосстановитьПоложениеСтрокиЭтапа()

// Запоминает выбранный этап и выбранную организацию в дереве этапов.
&НаКлиенте
Процедура СохранитьПоложениеСтрокиЭтапа(ОрганизацияВход = Неопределено, ЭтапВход = Неопределено)
	Если (ОрганизацияВход = Неопределено) И (ЭтапВход = Неопределено) Тогда
		// Нет входных данных. Сохраним текущую строку.
		ТекДанные = Элементы.ДеревоЭтапы.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			ВыбраннаяОрганизация	 = ТекДанные.Организация;
			ТекущийЭтап				 = ТекДанные.ЭтапПроцесса;
		Иначе
			ВыбраннаяОрганизация	 = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
			ТекущийЭтап				 = ПредопределенноеЗначение("Справочник.ЭтапыУниверсальныхПроцессов.ПустаяСсылка");
		КонецЕсли;
	Иначе	
		// Этап и организация заданы явно. Сохрани их.
		ВыбраннаяОрганизация	 = ОрганизацияВход;
		ТекущийЭтап				 = ЭтапВход;
	КонецЕсли;
КонецПроцедуры		// СохранитьПоложениеСтрокиЭтапа()

// Запоминает выбранную организацию и выбранный вид отчета в дереве операций.
&НаКлиенте
Процедура СохранитьПоложениеСтрокиОперации(ОрганизацияВход = Неопределено, ВидОтчетаВход = Неопределено)
	Если (ОрганизацияВход = Неопределено) И (ВидОтчетаВход = Неопределено)  		Тогда
		// Нет входных данных. Сохраним текущую строку.
		ТекДанные = Элементы.ДеревоОперации.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			ВыбраннаяОрганизацияОперации	 = ТекДанные.Организация;
			ВыбранныйВидОтчета				 = ТекДанные.ВидОтчета;
		Иначе
			ВыбраннаяОрганизацияОперации	 = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
			ВыбранныйВидОтчета				 = ПредопределенноеЗначение("Справочник.ВидыОтчетов.ПустаяСсылка");
		КонецЕсли;
	Иначе	
		// Вид отчета и организации заданы явно. Сохрани их.
		ВыбраннаяОрганизацияОперации	 = ОрганизацияВход;
		ВыбранныйВидОтчета				 = ВидОтчетаВход;
	КонецЕсли;
КонецПроцедуры		// СохранитьПоложениеСтрокиОперации()

// Устанавливает заголовок для диаграммы операций в зависимости от 
// выбранного пользователем объекта.
&НаКлиенте
Процедура ОбновитьЗаголовокДиаграммыОпераций()
	НовыйЗаголовокДиаграммаОперации = НСтр("ru = 'Утверждение документов'");
	ТекДанные = Элементы.ДеревоЭтапы.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекДанные.ЭтапОрганизация) Тогда
			НовыйЗаголовокДиаграммаОперации = НСтр("ru = 'Утверждение документов по %ВыбранныйОбъект%'");
			НовыйЗаголовокДиаграммаОперации = СтрЗаменить(НовыйЗаголовокДиаграммаОперации, "%ВыбранныйОбъект%", Строка(ТекДанные.ЭтапОрганизация));
		Иначе
			НовыйЗаголовокДиаграммаОперации = НСтр("ru = 'Утверждение документов'");
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
	ЗаголовокДиаграммы = НовыйЗаголовокДиаграммаОперации;			// Выводим в реквизит формы взамен заголовка диаграммы, чтобы избежать серверных вызовов.
КонецПроцедуры		// ОбновитьЗаголовокДиаграммыОпераций()

// Рекурсивно добавляет в массив ВыходнойМассив организации из строки
// дерева СтрокаДереваВход. Параметр ГлубинаРекурсииВход защищает от 
// бесконечной рекурсии.
&НаКлиенте
Процедура ДополнитьМассивОрганизаций(СтрокаДереваВход, ВыходнойМассив, БезУтвержденныхВход = Ложь, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 10000 Тогда
		Возврат;
	КонецЕсли;
	СостояниеЭтапаУтвержден = ПредопределенноеЗначение("Перечисление.СостоянияЭтаповПроцессов.Утвержден");
	СостояниеУниверсальногоЭтапаУтвержден = ПредопределенноеЗначение("Перечисление.СостоянияЭтаповУниверсальныхПроцессов.Завершен");
	Для Каждого ТекЭлементы Из СтрокаДереваВход.ПолучитьЭлементы() Цикл
		ТекОрганизация = ТекЭлементы.Организация;
		Если ЗначениеЗаполнено(ТекОрганизация) Тогда
			ЭтапУтвержден = (ТекЭлементы.СостояниеЭтапа = СостояниеЭтапаУтвержден ИЛИ ТекЭлементы.СостояниеЭтапа = СостояниеУниверсальногоЭтапаУтвержден);
			Если (НЕ ЭтапУтвержден) ИЛИ (НЕ БезУтвержденныхВход) Тогда
				ВыходнойМассив.Добавить(ТекОрганизация);
			Иначе
				// Пропускаем утвержденный этап.
			КонецЕсли;
		Иначе
			// Не добавляем пустую организацию.
		КонецЕсли;
		ДополнитьМассивОрганизаций(ТекЭлементы, ВыходнойМассив, БезУтвержденныхВход, ГлубинаРекурсииВход + 1);
	КонецЦикла;	
КонецПроцедуры		// ДополнитьМассивОрганизаций()

// Возращает массив организаций, находящиеся в зависимых строках
// строки дерева СтрокаЭлементаДереваВход.
&НаКлиенте
Функция ПолучитьЗависимыеОрганизации(СтрокаЭлементаДереваВход, БезУтвержденныхВход = Ложь)
	РезультатФункции = Новый Массив;
	СостояниеЭтапаУтвержден = ПредопределенноеЗначение("Перечисление.СостоянияЭтаповПроцессов.Утвержден");
	СостояниеУниверсальногоЭтапаУтвержден = ПредопределенноеЗначение("Перечисление.СостоянияЭтаповУниверсальныхПроцессов.Завершен");
	ИдентификаторСтроки = СтрокаЭлементаДереваВход.ПолучитьИдентификатор();
	СтрокаДерева = ДеревоЭтапы.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ЗначениеЗаполнено(СтрокаДерева.Организация) Тогда
		ЭтапУтвержден = (СтрокаДерева.СостояниеЭтапа = СостояниеЭтапаУтвержден ИЛИ СтрокаДерева.СостояниеЭтапа = СостояниеУниверсальногоЭтапаУтвержден);
		Если (НЕ ЭтапУтвержден) ИЛИ (НЕ БезУтвержденныхВход) Тогда
			РезультатФункции.Добавить(СтрокаДерева.Организация);
		Иначе
			// Пропускаем утвержденный этап.
		КонецЕсли;
	Иначе
		// Не добавляем пустую организацию.
	КонецЕсли;
    ДополнитьМассивОрганизаций(СтрокаДерева, РезультатФункции, БезУтвержденныхВход);
	РезультатФункции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатФункции);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьЗависимыеОрганизации()

// Для строки дерева операций СтрокаВход определяет, требуется
// ли устанавливать состояние объекта вручную.
&НаКлиенте
Функция СостояниеУстанавливаетсяВручную(СтрокаВход, ПолеВход)
	РезультатФункции = Истина;
	Если (ПолеВход.Имя <> "ДеревоОперацииСостояние") Тогда
		РезультатФункции = Ложь;		// Не поле Состояние.
	Иначе	
		Если НЕ (ЗначениеЗаполнено(СтрокаВход.Организация) ИЛИ ЗначениеЗаполнено(СтрокаВход.ВидОтчета)) Тогда
			РезультатФункции = Ложь;		// Группирующая строка.
		Иначе	
			Если ЗначениеЗаполнено(СтрокаВход.Согласование) Тогда
				РезультатФункции = Ложь;		// Задан маршрут согласования.
			Иначе	
				ТекПодчиненныеЭлементы = СтрокаВход.ПолучитьЭлементы();
				РезультатФункции = (ТекПодчиненныеЭлементы.Количество() = 0);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// СостояниеУстанавливаетсяВручную()

// Возвращает массив организаций, выделенных пользователем в дереве
// этапов, включая подчинённые.
&НаКлиенте
Функция ПолучитьМассивВыбранныхОрганизацийДереваЭтапов()
	РезультатФункции = Новый Массив;
	ВыделенныеСтрокиДерева = Элементы.ДеревоЭтапы.ВыделенныеСтроки;
	Для Каждого ТекВыделенныеСтрокиДерева Из ВыделенныеСтрокиДерева Цикл
		СтрокаДерева = ДеревоЭтапы.НайтиПоИдентификатору(ТекВыделенныеСтрокиДерева);
		МассивЗависимыхОрганизаций = ПолучитьЗависимыеОрганизации(СтрокаДерева);
		Для Каждого ТекМассивЗависимыхОрганизаций Из МассивЗависимыхОрганизаций Цикл
			РезультатФункции.Добавить(ТекМассивЗависимыхОрганизаций);
		КонецЦикла;
	КонецЦикла;
	РезультатФункции = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(РезультатФункции);
	РезультатФункции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатФункции);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьМассивВыбранныхОрганизацийДереваЭтапов()

// Возвращает массив этапов, выбранных пользователем в дереве этапов.
&НаКлиенте
Функция ПолучитьМассивВыбранныхЭтапов()
	РезультатФункции = Новый Массив;
	ВыделенныеСтрокиДерева = Элементы.ДеревоЭтапы.ВыделенныеСтроки;
	Для Каждого ТекВыделенныеСтрокиДерева Из ВыделенныеСтрокиДерева Цикл
		СтрокаДерева = ДеревоЭтапы.НайтиПоИдентификатору(ТекВыделенныеСтрокиДерева);
		РезультатФункции.Добавить(СтрокаДерева.ЭтапПроцесса);
	КонецЦикла;
	РезультатФункции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатФункции);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьМассивВыбранныхЭтапов()

// Определяет, что в дереве этапов выбран только один непустой этап.
&НаКлиенте
Функция ВыбранТолькоОдинЭтап()
	// Инициализация.
	РезультатФункции = Истина;
	ПустойЭтап = ПредопределенноеЗначение("Справочник.ЭтапыУниверсальныхПроцессов.ПустаяСсылка");
	// Получение данных о выборе пользователе.
	МассивВыбранныхЭтапов = ПолучитьМассивВыбранныхЭтапов();
	// Анализ выбранных этапов и возврат результата.
	ПозицияПустогоЭтапа = МассивВыбранныхЭтапов.Найти(ПустойЭтап);
	НетПустыхЭтапов = (ПозицияПустогоЭтапа = Неопределено);
	ВыбранЕдинственныйЭтап = (МассивВыбранныхЭтапов.Количество() = 1);
	РезультатФункции = (НетПустыхЭтапов И ВыбранЕдинственныйЭтап);
	Возврат РезультатФункции;
КонецФункции		// ВыбранТолькоОдинЭтап()

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ПриИзмененииУОП_Сервер();
	ВывестиОтчетНаСервере();
	УправлениеВидимостью();
	ОтчетФормировался = Истина;
КонецПроцедуры		// ПриЗагрузкеДанныхИзНастроекНаСервере()

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	ЕстьВерсияРегламента	 = ЗначениеЗаполнено(ВерсияРегламента);
	ЕстьСценарий			 = ЗначениеЗаполнено(Сценарий);
	ЕстьПериодОтчета		 = ЗначениеЗаполнено(ПериодОтчета);
	ЕстьУстановленныеПараметры = ЕстьВерсияРегламента ИЛИ ЕстьПериодОтчета ИЛИ ЕстьСценарий;
	Если ЕстьУстановленныеПараметры Тогда
		Настройки.Удалить("УправлениеПериодомСценария");
	Иначе
		// Загружаем сохранённые настройки.
	КонецЕсли;
	Если ЗначениеЗаполнено(СпособОтображенияДереваЭтапов) Тогда
		Настройки.Удалить("СпособОтображенияДереваЭтапов");
	Иначе
		// Загружаем сохранённые настройки.
	КонецЕсли;
КонецПроцедуры		// ПередЗагрузкойДанныхИзНастроекНаСервере()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Инициализация.
	ОтчетФормировался = Ложь;
	// Считывание параметров.
	Сценарий			 = Параметры.Сценарий;
	ПериодОтчета		 = Параметры.ПериодОтчета;
	ВерсияРегламента	 = Параметры.ВерсияРегламента;
	Если ЗначениеЗаполнено(Параметры.УправлениеПериодомСценария) Тогда
		УправлениеПериодомСценария = Параметры.УправлениеПериодомСценария;
	Иначе	
		УправлениеПериодомСценария = ПолучитьУправлениеОтчетнымПериодом(ВерсияРегламента, ПериодОтчета, Сценарий)
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.СпособОтображенияДереваЭтапов) Тогда
		СпособОтображенияДереваЭтапов = Параметры.СпособОтображенияДереваЭтапов;
	Иначе
		// Не изменяем.
	КонецЕсли;
	ТекущийЭтап = Параметры.ЭтапПроцесса;
	ПериодОтчетаОкончание   = УправлениеПериодомСценария.ПериодСценарияОкончание;
КонецПроцедуры		// ПриСозданииНаСервере()

&НаКлиенте
Процедура ПодтверждениеОткрытиеЭтапов_Завершение(Результат, ДополнительныеПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        // Пользователь отказался.
    Иначе       
		ОбрабатыватьОтчетыЭтапаПриИзмененииСостояния(ДополнительныеПараметры.Действие, ДополнительныеПараметры.ВыбОрганизацииАдрес);	
    КонецЕсли;
КонецПроцедуры		// ПодтверждениеСбросаЭтапов_Завершение()

&НаКлиенте
Процедура ПодтверждениеСбрасываниеЭтапов_Завершение(Результат, ДополнительныеПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        // Пользователь отказался.
    Иначе       
		ОбрабатыватьОтчетыЭтапаПриИзмененииСостоянияЗавершение(КодВозвратаДиалога.Нет, ДополнительныеПараметры.СтруктураПараметровОповещения);	
    КонецЕсли;
КонецПроцедуры		// ПодтверждениеСбросаЭтапов_Завершение()

&НаКлиенте
Процедура ОрганизацииВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если (Результат = Неопределено) ИЛИ (Результат = КодВозвратаДиалога.Отмена) Тогда
		Возврат;			// Пользователь не выбрал организации.
	Иначе
		СтруктураПараметровОповещения = Новый Структура;
		СтруктураПараметровОповещения.Вставить("ЗаполнятьДокументы",			 Результат.ЗаполнятьДокументы);
		СтруктураПараметровОповещения.Вставить("ИмяСобытия",					 Результат.Действие);
		СтруктураПараметровОповещения.Вставить("Параметр",						 Результат.ВыбОрганизацииАдрес);
		СтруктураПараметровОповещения.Вставить("УстанавливатьСтатусОтчетов",	 Результат.УстанавливатьСтатусОтчетов);
		Если Результат.Действие = "Открыть этап" Тогда
			// Открытие этапа.
			Если Результат.ОбрабатыватьДокументы Тогда
				ОбрабатыватьОтчетыЭтапаПриИзмененииСостоянияЗавершение(КодВозвратаДиалога.Да, СтруктураПараметровОповещения); 
			Иначе
				ОбрабатыватьОтчетыЭтапаПриИзмененииСостоянияЗавершение(КодВозвратаДиалога.Нет, СтруктураПараметровОповещения); 
			КонецЕсли;	
		ИначеЕсли Результат.Действие = "Закрыть этап" Тогда
			// Закрытие этапа.
			Если Результат.ОбрабатыватьДокументы Тогда
				ОбрабатыватьОтчетыЭтапаПриИзмененииСостоянияЗавершение(КодВозвратаДиалога.Да, СтруктураПараметровОповещения); 
			Иначе
				ОбрабатыватьОтчетыЭтапаПриИзмененииСостоянияЗавершение(КодВозвратаДиалога.Нет, СтруктураПараметровОповещения); 
			КонецЕсли;	
		ИначеЕсли Результат.Действие = "Отменить обработку этапа" Тогда
			// Сбрасывание выполнение этапа.
			ОбрабатыватьОтчетыЭтапаПриИзмененииСостоянияЗавершение(КодВозвратаДиалога.Нет, СтруктураПараметровОповещения);	
		КонецЕсли;
	КонецЕсли;  
КонецПроцедуры		// ОрганизацииВыборЗавершение()

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	ВывестиОтчетНаСервере();
	РазвернутьДеревоОпераций();
КонецПроцедуры		// СформироватьОтчет()

&НаКлиенте
Процедура РезультатЭтапыОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Расшифровка_Сервер(Расшифровка);
КонецПроцедуры		// РезультатЭтапыОбработкаРасшифровки()

&НаКлиенте
Процедура ДеревоЭтапыПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.ДеревоЭтапы.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ИдентификаторСтроки = ТекДанные.ПолучитьИдентификатор();
		Организация = ТекДанные.Организация;
		СохранитьПоложениеСтрокиЭтапа();
		ВывестиОтчетПоОперациям(, ИдентификаторСтроки);
		РазвернутьДеревоОпераций();
		ОбновитьЗаголовокДиаграммыОпераций();
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры		// ДеревоЭтапыПриАктивизацииСтроки()

&НаКлиенте
Процедура ЗапускПроцесса_Завершение(Результат, ДополнительныеПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        // Пользователь отказался.
    Иначе       
		РезультатЗапуска = ЗапуститьПроцесс_Сервер(УправлениеПериодомСценария);
		// Обработка результата запуска процесса.
		Если РезультатЗапуска Тогда
			КартинкаОповещения = БиблиотекаКартинок.ЭтапыПроцессов_32;
			ТекстОповещения = НСтр("ru = 'Процесс запущен'");
			ПояснениеОповещения = НСтр("ru = 'Процесс по сценарию %Сценарий% и периоду %Период% запущен'");
			ПояснениеОповещения = СтрЗаменить(ПояснениеОповещения, "%Сценарий%", Строка(Сценарий));
			ПояснениеОповещения = СтрЗаменить(ПояснениеОповещения, "%Период%", Строка(ПериодОтчета));
			ПоказатьОповещениеПользователя(ТекстОповещения, , ПояснениеОповещения, КартинкаОповещения);
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось запустить процесс'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
		// Обновление элементов формы.
		ВывестиОтчетНаСервере();
		РазвернутьДеревоОпераций();
	КонецЕсли;
КонецПроцедуры		// ЗапускПроцесса_Завершение()

&НаКлиенте
Процедура УстановитьСостояниеЭтапаОткрыт(Команда)
	ТекДанные = Элементы.ДеревоЭтапы.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		// Проверим выбор этапов.
		Если ВыбранТолькоОдинЭтап() Тогда
			СохранитьПоложениеСтрокиЭтапа();
			ТекущийЭтап = ТекДанные.ЭтапПроцесса;
			// Проверим состояние процесса.
			ЭкземплярПроцесса = УправлениеПроцессамиСогласованияУХ.ПолучитьЭкземплярПроцессаСценария(ВерсияРегламента, ПериодОтчета, Сценарий);
			СостояниеЗаявки = УправлениеПроцессамиСогласованияУХ.ВернутьТекущееСостояние(УправлениеПериодомСценария);
			СостояниеПроцессаЧерновик = ПредопределенноеЗначение("Перечисление.СостоянияПроцесса.Черновик");
			СостояниеПроцессаОстановлен = ПредопределенноеЗначение("Перечисление.СостоянияПроцесса.Остановлен");
			ПроцессЗапущен = ((ЗначениеЗаполнено(СостояниеЗаявки)) И (СостояниеЗаявки <> СостояниеПроцессаЧерновик) И (СостояниеЗаявки <> СостояниеПроцессаОстановлен));
			Если ПроцессЗапущен Тогда
				// Процесс запущен. Установим состояние этапа.
				ТипТекущегоЭтапа = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ТекущийЭтап, "ТипЭтапа");
				ОрганизацииЭтапаАдрес = ПолучитьАдресТаблицыОрганизацийЭтапа(ТекущийЭтап, ВерсияРегламента);
				Если ТипТекущегоЭтапа = ПредопределенноеЗначение("Перечисление.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности") Тогда
					// Получим все выделенные строки, включая подчинённые.
					МассивВыбранныхОрганизаций = ПолучитьМассивВыбранныхОрганизацийДереваЭтапов();
					// Загрузим в список выбранных все полученнные организации.
					СписокВыбранных = Новый СписокЗначений;
					СписокВыбранных.ЗагрузитьЗначения(МассивВыбранныхОрганизаций);
					// Откроем форму выбора организаций.
					ЕстьЭтапыПоследователиДляСнятия = ЕстьЭтапыПоследователиДляСнятия(ОрганизацииЭтапаАдрес);
					ПараметрыФормы = Новый Структура();
					ПараметрыФормы.Вставить("АдресТЗОрганизаций", ОрганизацииЭтапаАдрес);
					ПараметрыФормы.Вставить("Действие", "Открыть этап");
					ПараметрыФормы.Вставить("ВыбранныеОрганизации", СписокВыбранных);
					ПараметрыФормы.Вставить("ОтображатьПредупреждениеЭтапы", ЕстьЭтапыПоследователиДляСнятия);
					ПараметрыФормы.Вставить("ОтображатьФлагЗаполненияОтчетов", Истина);
					ПараметрыФормы.Вставить("ОтображатьФлагУстановкиСтатусовОтчетов", Истина);
					Оповещение = Новый ОписаниеОповещения("ОрганизацииВыборЗавершение", ЭтаФорма);
					ОткрытьФорму("Обработка.МатрицаУправленияУниверсальнымПроцессом.Форма.ФормаОрганизацийПроцесса", ПараметрыФормы, , , , , Оповещение);
				ИначеЕсли ТипТекущегоЭтапа = ПредопределенноеЗначение("Перечисление.ТипыЭтаповУниверсальныхПроцессов.Оповещение")  Тогда
					ОткрытьЭтапСервер(ОрганизацииЭтапаАдрес, Ложь);
				ИначеЕсли ТипТекущегоЭтапа = ПредопределенноеЗначение("Перечисление.ТипыЭтаповУниверсальныхПроцессов.Обработка")  Тогда
					ОткрытьЭтапСервер(ОрганизацииЭтапаАдрес, Ложь);
				Иначе
					ОткрытьЭтапСервер(ОрганизацииЭтапаАдрес, Ложь);
				КонецЕсли;
			Иначе
				// Процесс не запущен. Предложим запустить.
				ТекстВопроса = НСтр("ru = 'Продолжение операции невозможно, так как процесс не запущен. Запустить процесс?'");
				Режим = РежимДиалогаВопрос.ДаНет;
				СтруктураПараметров = Новый Структура;
				Оповещение = Новый ОписаниеОповещения("ЗапускПроцесса_Завершение", ЭтаФорма, СтруктураПараметров);
				ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Невозможно изменение состояния нескольких этапов одновременно. Операция отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры		// УстановитьСостояниеЭтапаОткрыт()

&НаКлиенте
Процедура СоздатьОбъекты(Команда)
	// Получение данных с формы.
	СохранитьПоложениеСтрокиОперации();
	ВыделенныеСтрокиДерева = Элементы.ДеревоОперации.ВыделенныеСтроки;
	// Формирование параметров создания.
	СтруктураСоздания = Новый Структура;
	СтруктураСоздания.Вставить("ВерсияРегламента", ВерсияРегламента);
	СтруктураСоздания.Вставить("ПериодОтчета", ПериодОтчета);
	СтруктураСоздания.Вставить("ПериодОтчетаОкончание", ПериодОтчетаОкончание);
	СтруктураСоздания.Вставить("Сценарий", Сценарий);
	СтруктураСоздания.Вставить("УправлениеПериодомСценария", УправлениеПериодомСценария);
	// Непосредственное создание.
	СоздатьОбъектыПоВыделеннымСтрокам(ВыделенныеСтрокиДерева, СтруктураСоздания);
	// Обновление дерева.
	ИдентификаторСтроки = Неопределено;	
	ТекДанные = Элементы.ДеревоЭтапы.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ИдентификаторСтроки = ТекДанные.ПолучитьИдентификатор();
	Иначе
		ИдентификаторСтроки = Неопределено;
	КонецЕсли;
	ВывестиОтчетПоОперациям(Истина, ИдентификаторСтроки);
КонецПроцедуры		// СоздатьОбъекты()

&НаКлиенте
Процедура Заполнить(Команда)
	СохранитьПоложениеСтрокиОперации();
	ВыделенныеСтрокиДерева = Элементы.ДеревоОперации.ВыделенныеСтроки;
	СтруктураСоздания = Новый Структура;
	СтруктураСоздания.Вставить("Сценарий", Сценарий);
	СтруктураСоздания.Вставить("ПериодОтчета", ПериодОтчета);
	СтруктураСоздания.Вставить("ВерсияРегламента", ВерсияРегламента);
	ЗаполнитьОбъектыПоВыделеннымСтрокам(ВыделенныеСтрокиДерева, СтруктураСоздания);
	ИдентификаторСтроки = Неопределено;	
	ТекДанные = Элементы.ДеревоЭтапы.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ИдентификаторСтроки = ТекДанные.ПолучитьИдентификатор();
	Иначе
		ИдентификаторСтроки = Неопределено;
	КонецЕсли;
	ВывестиОтчетПоОперациям(Истина, ИдентификаторСтроки);
КонецПроцедуры		// Заполнить()

&НаКлиенте
Процедура ВыборСостоянияОтчета_Завершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ВыбранноеЗначение <> Неопределено Тогда
		ПустойОтчет = ПредопределенноеЗначение("Документ.НастраиваемыйОтчет.ПустаяСсылка");
		ТекОтчет = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Ссылка", ПустойОтчет);
		Если ЗначениеЗаполнено(ТекОтчет) Тогда
			УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(ТекОтчет, ВыбранноеЗначение);
			ВывестиОтчетНаСервере();
			РазвернутьДеревоОпераций();
			ВосстановитьПоложениеСтрокиЭтапа();
			ВосстановитьПоложениеСтрокиОпераций();
		Иначе
			ТекстСообщения = НСтр("ru = 'Отчет не задан. Не удалось изменить состояние.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;	
	Иначе
		// Значение не выбрано. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры		// ВыборСостоянияОтчета_Завершение()

&НаКлиенте
Процедура ПодтверждениеПроведениеДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        // Пользователь отказался.
    Иначе       
    	ТекДокумент = ДополнительныеПараметры.Документ;
        Если ЗначениеЗаполнено(ТекДокумент) Тогда
			Если ДополнительныеПараметры.Провести Тогда
				СписокДокументов = Новый СписокЗначений;
				СписокДокументов.Добавить(ТекДокумент);
				ПринятьКСогласованию_Сервер(СписокДокументов);
			Иначе
				ОтменитьПроведение_Сервер(ТекДокумент);
			КонецЕсли;
			ВывестиОтчетПоОперациям(Истина);
        Иначе
        	ТекстСообщения = НСтр("ru = 'Документ не создан. Операция отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
        КонецЕсли;
    КонецЕсли;
КонецПроцедуры		// ПодтверждениеПроведениеДокументаЗавершение()

&НаКлиенте
Процедура ДеревоОперацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.ДеревоОперации.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекСсылка = ТекДанные.Ссылка;
		Если СостояниеУстанавливаетсяВручную(ТекДанные, Поле) Тогда
			Если ТипЗнч(ТекСсылка) = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
				// Используем выбор из списка.
				СохранитьПоложениеСтрокиЭтапа();
				СохранитьПоложениеСтрокиОперации();
				СтруктураДопПараметров = Новый Структура;
				СтруктураДопПараметров.Вставить("Ссылка", ТекСсылка);
				ОписаниеОЗакрытии = Новый ОписаниеОповещения("ВыборСостоянияОтчета_Завершение", ЭтотОбъект, СтруктураДопПараметров);
				ОткрытьФорму("Перечисление.СостоянияОтчетов.ФормаВыбора", , , , , , ОписаниеОЗакрытии);
			Иначе
				// Предлагаем перепровести документ.
				СохранитьПоложениеСтрокиЭтапа();
				СохранитьПоложениеСтрокиОперации();
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Документ", ТекСсылка);
				Если ДокументПроведен(ТекСсылка) Тогда
					СтруктураПараметров.Вставить("Провести", Ложь);
					ТекстВопроса = НСтр("ru = 'Отменить проведение документа %Документ% ?'");
				Иначе
					СтруктураПараметров.Вставить("Провести", Истина);
					ТекстВопроса = НСтр("ru = 'Провести документ %Документ% ?'");
				КонецЕсли;
				ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Документ%", Строка(ТекСсылка));
				Режим = РежимДиалогаВопрос.ДаНет;
				Оповещение = Новый ОписаниеОповещения("ПодтверждениеПроведениеДокументаЗавершение", ЭтаФорма, СтруктураПараметров);
				ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
			КонецЕсли;
		Иначе	
			// Открываем отчет, если он создан.
			Если ЗначениеЗаполнено(ТекСсылка) Тогда
				ПоказатьЗначение(, ТекСсылка);
			Иначе
				ТекстСообщения = НСтр("ru = 'Документ не создан. Операция отменена.'");
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры		// ДеревоОперацииВыбор()

&НаКлиенте
Процедура УстановитьСостояниеЗапланирован(Команда)
	УстановитьСостояниеТекущемуДокументу(ПредопределенноеЗначение("Перечисление.СостоянияОтчетов.Запланирован"));
КонецПроцедуры		// УстановитьСостояниеЗапланирован()

&НаКлиенте
Процедура УстановитьСостояниеВыполняется(Команда)
	УстановитьСостояниеТекущемуДокументу(ПредопределенноеЗначение("Перечисление.СостоянияОтчетов.Выполняется"));
КонецПроцедуры		// УстановитьСостояниеВыполняется()

&НаКлиенте
Процедура УстановитьСостояниеПодготовлен(Команда)
	УстановитьСостояниеТекущемуДокументу(ПредопределенноеЗначение("Перечисление.СостоянияОтчетов.Подготовлен"));
КонецПроцедуры		// УстановитьСостояниеПодготовлен()

&НаКлиенте
Процедура УстановитьСостояниеВозвращен(Команда)
	УстановитьСостояниеТекущемуДокументу(ПредопределенноеЗначение("Перечисление.СостоянияОтчетов.Возвращен"));
КонецПроцедуры		// УстановитьСостояниеВозвращен()

&НаКлиенте
Процедура УстановитьСостояниеЗаписанСОшибкой(Команда)
	УстановитьСостояниеТекущемуДокументу(ПредопределенноеЗначение("Перечисление.СостоянияОтчетов.ЗаписанСОшибкой"));
КонецПроцедуры		// УстановитьСостояниеЗаписанСОшибкой()

&НаКлиенте
Процедура УстановитьСостояниеУтвержден(Команда)
	УстановитьСостояниеТекущемуДокументу(ПредопределенноеЗначение("Перечисление.СостоянияОтчетов.Утвержден"));
КонецПроцедуры		// УстановитьСостояниеУтвержден()

&НаКлиенте
Процедура УстановитьСостояниеЭтапаЗакрыт(Команда)
	ТекДанные = Элементы.ДеревоЭтапы.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		// Проверим выбор этапов.
		Если ВыбранТолькоОдинЭтап() Тогда
			// Проверим состояние процесса.
			СохранитьПоложениеСтрокиЭтапа();
			ТекущийЭтап = ТекДанные.ЭтапПроцесса;
			ЭкземплярПроцесса = УправлениеПроцессамиСогласованияУХ.ПолучитьЭкземплярПроцессаСценария(ВерсияРегламента, ПериодОтчета, Сценарий);
			СостояниеЗаявки = УправлениеПроцессамиСогласованияУХ.ВернутьТекущееСостояние(УправлениеПериодомСценария);
			СостояниеПроцессаЧерновик = ПредопределенноеЗначение("Перечисление.СостоянияПроцесса.Черновик");
			СостояниеПроцессаОстановлен = ПредопределенноеЗначение("Перечисление.СостоянияПроцесса.Остановлен");
			ПроцессЗапущен = ((ЗначениеЗаполнено(СостояниеЗаявки)) И (СостояниеЗаявки <> СостояниеПроцессаЧерновик) И (СостояниеЗаявки <> СостояниеПроцессаОстановлен));
			Если ПроцессЗапущен Тогда
				// Процесс запущен. Установим состояние этапа.
				ТипТекущегоЭтапа = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ТекущийЭтап, "ТипЭтапа");
				ОрганизацииЭтапаАдрес = ПолучитьАдресТаблицыОрганизацийЭтапа(ТекущийЭтап, ВерсияРегламента);
				Если ТипТекущегоЭтапа = ПредопределенноеЗначение("Перечисление.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности") Тогда
					// Получим все выделенные строки, включая подчинённые.
					МассивВыбранныхОрганизаций = ПолучитьМассивВыбранныхОрганизацийДереваЭтапов();
					// Загрузим в список выбранных все полученнные организации.
					СписокВыбранных = Новый СписокЗначений;
					СписокВыбранных.ЗагрузитьЗначения(МассивВыбранныхОрганизаций);
					// Откроем форму выбора организаций.
					ПараметрыФормы = Новый Структура();
					ПараметрыФормы.Вставить("АдресТЗОрганизаций", ОрганизацииЭтапаАдрес);
					ПараметрыФормы.Вставить("Действие", "Закрыть этап");
					ПараметрыФормы.Вставить("ВыбранныеОрганизации", СписокВыбранных);
					ПараметрыФормы.Вставить("ОтображатьПредупреждениеЭтапы", Ложь);
					ПараметрыФормы.Вставить("ОтображатьФлагЗаполненияОтчетов", Истина);
					ПараметрыФормы.Вставить("ОтображатьФлагУстановкиСтатусовОтчетов", Истина);
					Оповещение = Новый ОписаниеОповещения("ОрганизацииВыборЗавершение", ЭтаФорма);
					ОткрытьФорму("Обработка.МатрицаУправленияУниверсальнымПроцессом.Форма.ФормаОрганизацийПроцесса", ПараметрыФормы, , , , , Оповещение);
				ИначеЕсли ТипТекущегоЭтапа = ПредопределенноеЗначение("Перечисление.ТипыЭтаповУниверсальныхПроцессов.Оповещение")  Тогда
					ЗакрытьЭтапСервер(ОрганизацииЭтапаАдрес, Ложь);
				ИначеЕсли ТипТекущегоЭтапа = ПредопределенноеЗначение("Перечисление.ТипыЭтаповУниверсальныхПроцессов.Обработка")  Тогда
					ЗакрытьЭтапСервер(ОрганизацииЭтапаАдрес, Ложь);
				Иначе
					ЗакрытьЭтапСервер(ОрганизацииЭтапаАдрес, Ложь);
				КонецЕсли;
			Иначе
				// Процесс не запущен. Предложим запустить.
				ТекстВопроса = НСтр("ru = 'Продолжение операции невозможно, так как процесс не запущен. Запустить процесс?'");
				Режим = РежимДиалогаВопрос.ДаНет;
				СтруктураПараметров = Новый Структура;
				Оповещение = Новый ОписаниеОповещения("ЗапускПроцесса_Завершение", ЭтаФорма, СтруктураПараметров);
				ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Невозможно изменение состояния нескольких этапов одновременно. Операция отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры		// УстановитьСостояниеЭтапаЗакрыт()

&НаКлиенте
Процедура ВыполнитьПроцессДоТекущегоЭтапа(Команда)
	ТекДанные = Элементы.ДеревоЭтапы.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		// Проверим состояние процесса.
		СохранитьПоложениеСтрокиЭтапа();
		ТекущийЭтап = ТекДанные.ЭтапПроцесса;
		ЭкземплярПроцесса = УправлениеПроцессамиСогласованияУХ.ПолучитьЭкземплярПроцессаСценария(ВерсияРегламента, ПериодОтчета, Сценарий);
		СостояниеЗаявки = УправлениеПроцессамиСогласованияУХ.ВернутьТекущееСостояние(УправлениеПериодомСценария);
		СостояниеПроцессаЧерновик = ПредопределенноеЗначение("Перечисление.СостоянияПроцесса.Черновик");
		СостояниеПроцессаОстановлен = ПредопределенноеЗначение("Перечисление.СостоянияПроцесса.Остановлен");
		ПроцессЗапущен = ((ЗначениеЗаполнено(СостояниеЗаявки)) И (СостояниеЗаявки <> СостояниеПроцессаЧерновик) И (СостояниеЗаявки <> СостояниеПроцессаОстановлен));
		Если ПроцессЗапущен Тогда
			ВыполнитьПроцессДоТекущегоЭтапа_Сервер(ТекДанные.ЭтапПроцесса);
			ВывестиОтчетНаСервере();
			РазвернутьДеревоОпераций();
		Иначе
			// Процесс не запущен. Предложим запустить.
			ТекстВопроса = НСтр("ru = 'Продолжение операции невозможно, так как процесс не запущен. Запустить процесс?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			СтруктураПараметров = Новый Структура;
			Оповещение = Новый ОписаниеОповещения("ЗапускПроцесса_Завершение", ЭтаФорма, СтруктураПараметров);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры		// ВыполнитьПроцессДоТекущегоЭтапа()

&НаКлиенте
Процедура СвернутьВсе(Команда)
	СвернутьДерево();
КонецПроцедуры		// СвернутьВсе()

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	РазвернутьДерево();
КонецПроцедуры		// РазвернутьВсе()

&НаКлиенте
Процедура ОтобразитьДиаграмму(Команда)
	Элементы.ФормаОтобразитьДиаграмму.Пометка = НЕ Элементы.ФормаОтобразитьДиаграмму.Пометка;
	УправлениеВидимостью();
КонецПроцедуры		// ОтобразитьДиаграмму()

&НаКлиенте
Процедура ОткрытьДиаграммуПроцесса(Команда)
	ТекУправлениеОтчетнымПериодом = ПолучитьУправлениеОтчетнымПериодом(ВерсияРегламента, ПериодОтчета, Сценарий);
	Если ЗначениеЗаполнено(ТекУправлениеОтчетнымПериодом) Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДокументУправленияПериодомСценария", ТекУправлениеОтчетнымПериодом);
		СтруктураПараметров.Вставить("РежимОткрытия", "ДиаграммаПроцессов");
		СтруктураПараметров.Вставить("ФормироватьПриОткрытии", Истина);
		ОткрытьФорму("Обработка.МатрицаУправленияУниверсальнымПроцессом.Форма.ФормаУправляемая", СтруктураПараметров);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить экземпляр процесса по сценарию %Сценарий% в периоде %ПериодОтчета% по регламенту %ВерсияРегламента%. Операция отменена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сценарий%", Строка(Сценарий));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПериодОтчета%", Строка(ПериодОтчета));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВерсияРегламента%", Строка(ВерсияРегламента));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры		// ОткрытьДиаграммуПроцесса()

&НаКлиенте
Процедура РезультатДиаграммаЭтапыОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры		// РезультатДиаграммаЭтапыОбработкаРасшифровки()

&НаКлиенте
Процедура РезультатДиаграммаОперацииОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры		// РезультатДиаграммаОперацииОбработкаРасшифровки()

&НаКлиенте
Процедура СвернутьВсеОперации(Команда)
	СвернутьДеревоОпераций();
КонецПроцедуры		// СвернутьВсеОперации()

&НаКлиенте
Процедура РазвернутьВсеОперации(Команда)
	РазвернутьДеревоОпераций();
КонецПроцедуры		// РазвернутьВсеОперации()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если НЕ ОтчетФормировался Тогда
		ВывестиОтчетНаСервере();
		УправлениеВидимостью();
	Иначе
		// Отчет был сформирвоан ранее. Не осуществляем повторное формирование.
	КонецЕсли;
	ОбновитьЗаголовокДиаграммыОпераций();
КонецПроцедуры		// ПриОткрытии()

&НаКлиенте
Процедура ДеревоОперацииПриАктивизацииСтроки(Элемент)
	// Скроем пункты контекстного меню с установкой статусов для документа Трансормационная корректировка.
	ТекДанные = Элементы.ДеревоОперации.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ЭтоТрансформационнаяКорректировка	 = (ТипЗнч(ТекДанные.ВидОтчета) = Тип("СправочникСсылка.ШаблоныТрансформационныхКорректировок"));
		ЭтоТрансляция						 = (ТипЗнч(ТекДанные.ВидОтчета) = Тип("СправочникСсылка.ШаблоныТрансляций"));
		ОтображениеИзмененияСтатуса = ((НЕ ЭтоТрансформационнаяКорректировка) И (НЕ ЭтоТрансляция));
		Элементы.ДеревоОперацииКонтекстноеМенюУстановитьСостояниеЗапланирован.Доступность		 = ОтображениеИзмененияСтатуса;
		Элементы.ДеревоОперацииКонтекстноеМенюУстановитьСостояниеПодготовлен.Доступность		 = ОтображениеИзмененияСтатуса;
		Элементы.ДеревоОперацииКонтекстноеМенюУстановитьСостояниеВозвращен.Доступность			 = ОтображениеИзмененияСтатуса;
		Элементы.ДеревоОперацииКонтекстноеМенюУстановитьСостояниеЗаписанСОшибкой.Доступность	 = ОтображениеИзмененияСтатуса;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры		// ДеревоОперацииПриАктивизацииСтроки()

&НаКлиенте
Процедура ПериодОтчетаПриИзменении(Элемент)
	НовыйРегламент = УправлениеОтчетамиУХ.ПолучитьВерсиюРегламентаПоПериодуИСценарию(Сценарий, ПериодОтчета);
	Если ЗначениеЗаполнено(НовыйРегламент) Тогда
		ВерсияРегламента = НовыйРегламент;
	Иначе
		// Получить регламент не удалось. Не изменяем его.
	КонецЕсли;
КонецПроцедуры		// ПериодОтчетаПриИзменении()

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	НовыйРегламент = УправлениеОтчетамиУХ.ПолучитьВерсиюРегламентаПоПериодуИСценарию(Сценарий, ПериодОтчета);
	Если ЗначениеЗаполнено(НовыйРегламент) Тогда
		ВерсияРегламента = НовыйРегламент;
	Иначе
		// Получить регламент не удалось. Не изменяем его.
	КонецЕсли;
КонецПроцедуры		// СценарийПриИзменении()

&НаКлиенте
Процедура УправлениеПериодомСценарияПриИзменении(Элемент)
	ПриИзмененииУОП_Сервер();
	ВывестиОтчетНаСервере();
	РазвернутьДеревоОпераций();
КонецПроцедуры		// УправлениеПериодомСценарияПриИзменении()

&НаКлиенте
Процедура ПринятьКСогласованию(Команда)
	СписокДокументов = ПолучитьСписокВыбранныхДокументов();
	ПринятьКСогласованию_Сервер(СписокДокументов);
	ВывестиОтчетНаСервере();
КонецПроцедуры		// ПринятьКСогласованию()

&НаКлиенте
Процедура ОтменитьСогласование(Команда)
	СписокДокументов = ПолучитьСписокВыбранныхДокументов();
	Для Каждого ТекСписокДокументов Из СписокДокументов Цикл
		ТекДокумент = ТекСписокДокументов.Значение;
		Попытка
			Если ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
				МодульУправленияПроцессамиУХ.ОтменитьСогласование(, ТекДокумент);	
			ИначеЕсли ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.Трансляция") Тогда
				ОтменитьПроведение_Сервер(ТекДокумент);
			ИначеЕсли ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.ТрансформационнаяКорректировка") Тогда
				ОтменитьПроведение_Сервер(ТекДокумент);
			ИначеЕсли ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.Элиминация") Тогда
				ОтменитьПроведение_Сервер(ТекДокумент);
			Иначе
				МодульУправленияПроцессамиУХ.ОтменитьСогласование(, ТекДокумент);	
			КонецЕсли;
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось отменить согласование документа %Документ% : %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Строка(ТекДокумент));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	ВывестиОтчетНаСервере();
КонецПроцедуры		// ОтменитьСогласование()

&НаКлиенте
Процедура МаршрутСогласования(Команда)
	ТекДанные = Элементы.ДеревоОперации.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		СтруктураПараметровФормы = Новый Структура;
		СтруктураПараметровФормы.Вставить("СогласуемыйОбъект", ТекДанные.Ссылка);
		СтруктураПараметровФормы.Вставить("ШаблонПроцесса", ТекДанные.Согласование);
		СтруктураПараметровФормы.Вставить("Режим", "УправлениеСогласованием");
		ОткрытьФорму("Обработка.КонсольУправленияПроцессом.Форма.Форма", СтруктураПараметровФормы);
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры		// МаршрутСогласования()

&НаКлиенте
Процедура ИсторияСогласования(Команда)
	ТекДанные = Элементы.ДеревоОперации.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		СтруктураПараметровФормы = Новый Структура;
		СтруктураПараметровФормы.Вставить("КлючевойОбъектПроцесса", ТекДанные.Ссылка);
		ОткрытьФорму("Отчет.ИсторияСогласования.Форма.ФормаОтчета", СтруктураПараметровФормы);		
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры		// ИсторияСогласования()

&НаКлиенте
Процедура СогласоватьДокумент_Завершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ВыбранноеЗначение <> Неопределено Тогда
		ВывестиОтчетНаСервере();
	Иначе
		// Пользователь отказался от выполнения операции. Обновление дерева не требуется.
	КонецЕсли;
КонецПроцедуры		// СогласоватьДокумент_Завершение()

&НаКлиенте
Процедура СогласоватьДокумент(Команда)
	СписокДокументов = ПолучитьСписокВыбранныхДокументов();
	Если СписокДокументов.Количество() = 1 Тогда
		ОписаниеОЗакрытии = Новый ОписаниеОповещения("СогласоватьДокумент_Завершение", ЭтаФорма);
		ПервыйЭлемент = СписокДокументов[0];
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("СогласовываемыйДокумент", ПервыйЭлемент.Значение);
		ОткрытьФорму("ОбщаяФорма.КомментарийИСогласование", СтруктураПараметров, ЭтаФорма, , , , ОписаниеОЗакрытии);
	ИначеЕсли СписокДокументов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не выбраны документы для согласования. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	Иначе	
		ОписаниеОЗакрытии = Новый ОписаниеОповещения("СогласоватьДокумент_Завершение", ЭтаФорма);
		СтруктураПараметров = УправлениеПроцессамиСогласованияУХ.СформироватьСтруктуруОткрытияФормыВизированияПакетаДокументов(СписокДокументов);
		ОткрытьФорму("ОбщаяФорма.КомментарийИСогласование", СтруктураПараметров, ЭтаФорма, , , , ОписаниеОЗакрытии);
	КонецЕсли;
КонецПроцедуры		// СогласоватьДокумент()

&НаКлиенте
Процедура ЗаполнитьЭтапПоРегламенту(Команда)
	ЗаполнитьЭтапПоРегламенту_Сервер(Организация, Сценарий, ПериодОтчета, ТекущийЭтап);
	ВывестиОтчетНаСервере();
	РазвернутьДеревоОпераций();
КонецПроцедуры		// ЗаполнитьЭтапПоРегламенту()

&НаКлиенте
Процедура СпособОтображенияДереваЭтаповПриИзменении(Элемент)
	ВывестиОтчетНаСервере();
	РазвернутьДеревоОпераций();
КонецПроцедуры		// СпособОтображенияДереваЭтаповПриИзменении()

&НаКлиенте
Процедура ЗаполнитьДоТекущегоЭтапа(Команда)
	ТекДанные = Элементы.ДеревоЭтапы.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		СохранитьПоложениеСтрокиЭтапа();
		ТекущийЭтап = ТекДанные.ЭтапПроцесса;
		// Проверим состояние процесса.
		ЭкземплярПроцесса = УправлениеПроцессамиСогласованияУХ.ПолучитьЭкземплярПроцессаСценария(ВерсияРегламента, ПериодОтчета, Сценарий);
		СостояниеЗаявки = УправлениеПроцессамиСогласованияУХ.ВернутьТекущееСостояние(УправлениеПериодомСценария);
		СостояниеПроцессаЧерновик = ПредопределенноеЗначение("Перечисление.СостоянияПроцесса.Черновик");
		СостояниеПроцессаОстановлен = ПредопределенноеЗначение("Перечисление.СостоянияПроцесса.Остановлен");
		ПроцессЗапущен = ((ЗначениеЗаполнено(СостояниеЗаявки)) И (СостояниеЗаявки <> СостояниеПроцессаЧерновик) И (СостояниеЗаявки <> СостояниеПроцессаОстановлен));
		Если ПроцессЗапущен Тогда
			СформироватьПробнуюОтчетность_Сервер(ТекущийЭтап);
			ВывестиОтчетНаСервере();
			РазвернутьДеревоОпераций();
		Иначе
			// Процесс не запущен. Предложим запустить.
            ТекстВопроса = НСтр("ru = 'Продолжение операции невозможно, так как процесс не запущен. Запустить процесс?'");
            Режим = РежимДиалогаВопрос.ДаНет;
            СтруктураПараметров = Новый Структура;
            Оповещение = Новый ОписаниеОповещения("ЗапускПроцесса_Завершение", ЭтаФорма, СтруктураПараметров);
            ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры		// ЗаполнитьДоТекущегоЭтапа()

&НаКлиенте
Процедура УстановитьСпособПоАлфавиту(Команда)
	СпособСортировкиЭтапов = СпособСортировкиПоАлфавитуПредставление();
	ВывестиОтчетНаСервере();
	РазвернутьДеревоОпераций();
КонецПроцедуры		// УстановитьСпособПоАлфавиту()

&НаКлиенте
Процедура УстановитьСпособПоУмолчанию(Команда)
	СпособСортировкиЭтапов = СпособСортировкиПоУмолчаниюПредставление();
	ВывестиОтчетНаСервере();
	РазвернутьДеревоОпераций();
КонецПроцедуры		// УстановитьСпособПоУмолчанию()

&НаКлиенте
Процедура ОтобразитьТолькоАктуальные(Команда)
	Элементы.ДеревоЭтапыОтобразитьТолькоАктуальные.Пометка = Не Элементы.ДеревоЭтапыОтобразитьТолькоАктуальные.Пометка;
	ВывестиОтчетНаСервере();
	РазвернутьДеревоОпераций();
КонецПроцедуры		// ОтобразитьТолькоАктуальные()

&НаКлиенте
Процедура ОтменитьОбработкуЭтапа(Команда)
	ТекДанные = Элементы.ДеревоЭтапы.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		// Проверим выбор этапов.
		Если ВыбранТолькоОдинЭтап() Тогда
			СохранитьПоложениеСтрокиЭтапа();
			ТекущийЭтап = ТекДанные.ЭтапПроцесса;
			// Проверим состояние процесса.
			ЭкземплярПроцесса = УправлениеПроцессамиСогласованияУХ.ПолучитьЭкземплярПроцессаСценария(ВерсияРегламента, ПериодОтчета, Сценарий);
			СостояниеЗаявки = УправлениеПроцессамиСогласованияУХ.ВернутьТекущееСостояние(УправлениеПериодомСценария);
			СостояниеПроцессаЧерновик = ПредопределенноеЗначение("Перечисление.СостоянияПроцесса.Черновик");
			СостояниеПроцессаОстановлен = ПредопределенноеЗначение("Перечисление.СостоянияПроцесса.Остановлен");
			ПроцессЗапущен = ((ЗначениеЗаполнено(СостояниеЗаявки)) И (СостояниеЗаявки <> СостояниеПроцессаЧерновик) И (СостояниеЗаявки <> СостояниеПроцессаОстановлен));
			Если ПроцессЗапущен Тогда
				// Процесс запущен. Установим состояние этапа.
				ТипТекущегоЭтапа = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ТекущийЭтап, "ТипЭтапа");
				ОрганизацииЭтапаАдрес = ПолучитьАдресТаблицыОрганизацийЭтапа(ТекущийЭтап, ВерсияРегламента);
				Если ТипТекущегоЭтапа = ПредопределенноеЗначение("Перечисление.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности") Тогда
					// Получим все выделенные строки, включая подчинённые.
					МассивВыбранныхОрганизаций = ПолучитьМассивВыбранныхОрганизацийДереваЭтапов();
					// Загрузим в список выбранных все полученнные организации.
					СписокВыбранных = Новый СписокЗначений;
					СписокВыбранных.ЗагрузитьЗначения(МассивВыбранныхОрганизаций);
					// Откроем форму выбора организаций.
					ЕстьЭтапыПоследователиДляСнятия = ЕстьЭтапыПоследователиДляСнятия(ОрганизацииЭтапаАдрес);
					ПараметрыФормы = Новый Структура();
					ПараметрыФормы.Вставить("АдресТЗОрганизаций", ОрганизацииЭтапаАдрес);
					ПараметрыФормы.Вставить("Действие", "Отменить обработку этапа");
					ПараметрыФормы.Вставить("ВыбранныеОрганизации", СписокВыбранных);
					ПараметрыФормы.Вставить("ОтображатьПредупреждениеЭтапы", ЕстьЭтапыПоследователиДляСнятия);
					ПараметрыФормы.Вставить("ОтображатьФлагЗаполненияОтчетов", Ложь);
					ПараметрыФормы.Вставить("ОтображатьФлагУстановкиСтатусовОтчетов", Истина);
					Оповещение = Новый ОписаниеОповещения("ОрганизацииВыборЗавершение", ЭтаФорма);
					ОткрытьФорму("Обработка.МатрицаУправленияУниверсальнымПроцессом.Форма.ФормаОрганизацийПроцесса", ПараметрыФормы, , , , , Оповещение);
				ИначеЕсли ТипТекущегоЭтапа = ПредопределенноеЗначение("Перечисление.ТипыЭтаповУниверсальныхПроцессов.Оповещение")  Тогда
					ОтменитьОбработкуЭтапаСервер(ОрганизацииЭтапаАдрес, Ложь);
				ИначеЕсли ТипТекущегоЭтапа = ПредопределенноеЗначение("Перечисление.ТипыЭтаповУниверсальныхПроцессов.Обработка")  Тогда
					ОтменитьОбработкуЭтапаСервер(ОрганизацииЭтапаАдрес, Ложь);
				Иначе
					ОтменитьОбработкуЭтапаСервер(ОрганизацииЭтапаАдрес, Ложь);
				КонецЕсли;
			Иначе
				ТекстСообщения = НСтр("ru = 'Процесс не запущен. Отмена обработки этапа %Этап% невозможна.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(ТекущийЭтап));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Невозможно изменение состояния нескольких этапов одновременно. Операция отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьУправлениеПроцессомПодготовкиОтчетности" Тогда
		// Считывание дополнительных параметров.
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			НовыйЭтап = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметр, "ЭтапПроцесса", ПредопределенноеЗначение("Справочник.ЭтапыУниверсальныхПроцессов.ПустаяСсылка"));
			Если ЗначениеЗаполнено(НовыйЭтап) Тогда
				ТекущийЭтап = НовыйЭтап;
			Иначе
				// Не удалось получить значение нового этапа. Не изменяем текущий.
			КонецЕсли;	
			НовыйСпособОтображения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметр, "СпособОтображенияДереваЭтапов", "");
			Если ЗначениеЗаполнено(НовыйСпособОтображения) Тогда
				СпособОтображенияДереваЭтапов = НовыйСпособОтображения;
			Иначе
				// Новый способ отображения не задан. Не изменяем текущий.
			КонецЕсли;
		Иначе
			// Параметры не были переданы.
		КонецЕсли;	
		// Обновление отображения отчета.
		ВывестиОтчетНаСервере();	
	Иначе
		// Неизвестное оповещение. Ничего не делаем.
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыЭтапа(Команда)
	СоздатьДокументыЭтапа_Сервер(Организация, Сценарий, ПериодОтчета,ПериодОтчетаОкончание, ТекущийЭтап, ВерсияРегламента);
	ВывестиОтчетНаСервере();
	РазвернутьДеревоОпераций();
КонецПроцедуры		// СоздатьДокументыЭтапа()
