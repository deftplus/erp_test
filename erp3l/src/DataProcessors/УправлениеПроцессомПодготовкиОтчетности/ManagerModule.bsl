// Выполняет процесс до этапа ЭтапПроцесса.
Процедура ВыполнитьПроцессДоТекущегоЭтапа(ЭтапПроцесса, мПредшественникиСтрок, мПоследователиСтрок, ОсновныеРеквизитыОбъекта, ТаблицаСостоянияВыполнения) Экспорт
	
	ТекущиеСтроки = ТаблицаСостоянияВыполнения.НайтиСтроки(Новый Структура("Этап", ЭтапПроцесса));
	Сценарий = ОсновныеРеквизитыОбъекта.Сценарий;
	ПериодОтчета = ОсновныеРеквизитыОбъекта.ПериодСценария;	
	Если ТекущиеСтроки.Количество() > 0 Тогда
		
		МассивИдентификаторов = Новый Массив;
		Для Каждого Элемент Из ТекущиеСтроки Цикл
			Если ТипЗнч(ТаблицаСостоянияВыполнения) = Тип("ТаблицаЗначений") Тогда
				НовыйИдентификатор = ТаблицаСостоянияВыполнения.Индекс(Элемент);
			Иначе
				НовыйИдентификатор = Элемент.ПолучитьИдентификатор();
			КонецЕсли;  
			МассивИдентификаторов.Добавить(НовыйИдентификатор);
		КонецЦикла;
			
		Для Каждого Стр Из ТаблицаСостоянияВыполнения Цикл
			Если Стр.МодификацияСтроки = 1 Тогда
				
				УправлениеРабочимиПроцессамиУХ.ИнициализироватьПроцесс(ПериодОтчета, Сценарий, ТекущаяДатаСеанса(), ТаблицаСостоянияВыполнения, мПоследователиСтрок, мПредшественникиСтрок);
				Прервать;
				
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует пробную отчетность на этапе ЭтапПроцесса.
Процедура СформироватьПробнуюОтчетность(ЭтапПроцесса, мПредшественникиСтрок, мПоследователиСтрок, ОсновныеРеквизитыОбъекта, ТаблицаСостоянияВыполнения, ЭкземплярПроцессаВход) Экспорт
	          	
	ТекущиеСтроки = ТаблицаСостоянияВыполнения.НайтиСтроки(Новый Структура("Этап", ЭтапПроцесса));
	Сценарий = ОсновныеРеквизитыОбъекта.Сценарий;
	ПериодОтчета = ОсновныеРеквизитыОбъекта.ПериодСценария;	

	Если ТекущиеСтроки.Количество() > 0 Тогда
		МассивИдентификаторов = Новый Массив;
		Для Каждого Элемент Из ТекущиеСтроки Цикл	
			Если ТипЗнч(ТаблицаСостоянияВыполнения) = Тип("ТаблицаЗначений") Тогда
				НовыйИдентификатор = ТаблицаСостоянияВыполнения.Индекс(Элемент);
			Иначе
				МассивИдентификаторов.Добавить(Элемент.ПолучитьИдентификатор());	
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Строка Из ТекущиеСтроки Цикл
			Если НЕ УправлениеПроцессамиСогласованияУХ.ЗапуститьПробныйПроцессДоТекущегоЭтапа(Строка, мПредшественникиСтрок, мПоследователиСтрок, ОсновныеРеквизитыОбъекта, ТаблицаСостоянияВыполнения) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Стр Из ТаблицаСостоянияВыполнения Цикл
			Если Стр.МодификацияСтроки = 1 Тогда
				МодульУправленияПроцессамиУХ.ИзменитьСостояниеЭтапаПроцесса(ПериодОтчета, Сценарий, Стр.Организация, Стр.Этап, Перечисления.СостоянияЭтаповПроцессов.Выполняется);	
				МодульУправленияПроцессамиУХ.УстановитьСостояниеТекущегоЭтапаВОбработке(Стр.Этап, ЭкземплярПроцессаВход);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия, заданные для этапа ЭтапПроцесса.
Процедура ВыполнитьДействияЭтапа(ЭтапПроцесса, ОсновныеРеквизитыОбъекта, ТаблицаСостоянияВыполнения, ЭкземплярПроцессаВход) Экспорт
	// Получение параметров для передачи обработке этапа.
	КлючевойОбъект = ЭкземплярПроцессаВход.КлючевойОбъектПроцесса;
	Если ТипЗнч(КлючевойОбъект) = Тип("ДокументСсылка.УправлениеПериодомСценария") Тогда
		ВерсияРегламента = КлючевойОбъект.ВерсияОрганизационнойСтруктуры;
	Иначе
		ВерсияРегламента = Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка();
	КонецЕсли;
	Сценарий = ОсновныеРеквизитыОбъекта.Сценарий;
	ПериодОтчета = ОсновныеРеквизитыОбъекта.ПериодСценария;	
	УтвердитьПараметр = Истина;
	ОбрабатыватьДокументыПараметр = Истина;
	ОстанавливатьсяПриОшибкеПараметр = Ложь;
	// Поиск данных этапа и выполнение назначенных действий.
	КопияСостояния = ТаблицаСостоянияВыполнения.Скопировать();
	КопияСостояния.Свернуть("Этап, Организация, ДатаНачала");
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("Этап", ЭтапПроцесса);
	НайденныеСтроки = КопияСостояния.НайтиСтроки(СтруктураПоиска);
	Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
		МодульУправленияПроцессамиУХ.ОбработатьДокументыЭтапаПоОрганизации(ВерсияРегламента, ПериодОтчета, Сценарий, ЭтапПроцесса, ТекНайденныеСтроки.Организация, УтвердитьПараметр, ОбрабатыватьДокументыПараметр, ОстанавливатьсяПриОшибкеПараметр);
	КонецЦикла;
КонецПроцедуры

