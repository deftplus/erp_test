
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораТиповОбъектовРасчетов();
	
	УстановитьУсловноеОформление();
	
	ОтображатьНачисления	= Ложь;
	ОтображатьОплату		= Истина;
	ОтображатьДетализацию	= Истина;
	
	ОтображатьДатуВДетализацииЗаявки	= Истина;
	ОтображатьСтатьюВДетализацииЗаявки	= Истина;
	ОтображатьЭлементВДетализацииЗаявки	= Истина;
	
	ОтображатьДатуВДетализацииФакт		= Истина;
	ОтображатьСтатьюВДетализацииФакт	= Истина;
	ОтображатьЭлементВДетализацииФакт	= Истина;
	
	ГоризонтПланирования = ТекущаяДатаСеанса() + 86400 * Константы.ГоризонтФормированияЗаявокПоГрафикам.Получить();
	
	Если ХранилищеСистемныхНастроек.ПолучитьОписание(ИмяФормы + "/ТекущиеДанные") = Неопределено Тогда
		ТипОбъектовРасчетов = ТипОбъектаРасчетовПривлечениеСредств();
		Ответственный = Пользователи.ТекущийПользователь();
		УправлениеФормой(ЭтотОбъект);
		ЗаполнитьТаблицуПланФакт();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	УправлениеФормой(ЭтотОбъект);
	ЗаполнитьТаблицуПланФакт();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипОбъектовРасчетовПриИзменении(Элемент)
	ПриИзмененииТипаОбъектовРасчетовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ЗаполнитьТаблицуПланФакт();	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ЗаполнитьТаблицуПланФакт();
КонецПроцедуры

&НаКлиенте
Процедура ГоризонтПланированияПриИзменении(Элемент)
	ЗаполнитьТаблицуПланФакт();
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	ЗаполнитьТаблицуПланФакт();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПланФакт

&НаКлиенте
Процедура ТаблицаПланФактВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	РедактироватьГрафик(ТекущиеДанные.ОбъектРасчетов, ТекущиеДанные.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	РедактироватьГрафик(ТекущиеДанные.ОбъектРасчетов, ТекущиеДанные.Организация);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланФактПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		НовыйОбъектРасчетовФакт = Неопределено;
	Иначе
		НовыйОбъектРасчетовФакт = ТекДанные.ОбъектРасчетов;
	КонецЕсли;
	
	Если НовыйОбъектРасчетовФакт <> ТекОбъектРасчетовФакт Тогда
		ТекОбъектРасчетовФакт 	= НовыйОбъектРасчетовФакт;
		ТекОрганизацияФакт 		= ?(ТекДанные = Неопределено, Неопределено, ТекДанные.Организация);
		ПодключитьОбработчикОжидания("ОбновитьИтогиРасхождениеСФактом",0.1,Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПросроченнаяЗадолженность

&НаКлиенте
Процедура ПросроченнаяЗадолженностьПометкаПриИзменении(Элемент)
	
	ВыбранаПросроченнаяКредиторскаяЗадолженность = 0;
	ВыбранныеСтроки = Объект.ПросроченнаяЗадолженность.НайтиСтроки(Новый Структура("Пометка",Истина));
	Для Каждого ТекВыделеннаяСтрока Из ВыбранныеСтроки Цикл
		ВыбранаПросроченнаяКредиторскаяЗадолженность = ВыбранаПросроченнаяКредиторскаяЗадолженность + ТекВыделеннаяСтрока.КредиторскаяЗадолженностьПросрочено;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросроченнаяЗадолженностьПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Элементы.ПросроченнаяЗадолженностьСтруктура.ОтборСтрок = Неопределено;
		ТекОбъектРасчетовЗадолженность = Неопределено;
	Иначе
		Элементы.ПросроченнаяЗадолженностьСтруктура.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРасчетов", ТекДанные.ОбъектРасчетов);
		ТекОбъектРасчетовЗадолженность = ТекДанные.ОбъектРасчетов;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПросроченнаяЗадолженностьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(,Элемент.ТекущиеДанные.ОбъектРасчетов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПлан

&НаКлиенте
Процедура ТаблицаПланПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		НовыйОбъектРасчетовЗаявки = Неопределено;
	Иначе
		НовыйОбъектРасчетовЗаявки = ТекДанные.ОбъектРасчетов;
	КонецЕсли;
	
	Если НовыйОбъектРасчетовЗаявки <> ТекОбъектРасчетовЗаявки Тогда
		ТекОбъектРасчетовЗаявки = НовыйОбъектРасчетовЗаявки;
		ТекОрганизацияЗаявки 	= ?(ТекДанные = Неопределено, Неопределено, ТекДанные.Организация);
		ПодключитьОбработчикОжидания("ОбновитьИтогиРасхождениеСЗаявками", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланЗаявкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РедактироватьГрафик(ТекОбъектРасчетовЗаявки, ТекОрганизацияЗаявки);

КонецПроцедуры

&НаКлиенте
Процедура ФактДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	РедактироватьГрафик(ТекОбъектРасчетовФакт, ТекОрганизацияФакт);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьПланФакт(Команда)
	ЗаполнитьТаблицуПланФакт();
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьГрафикПоДоговору(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПлан Тогда
		ОбъектРасчетов 		= ТекОбъектРасчетовЗаявки;
		ОрганизацияОтбор 	= ТекОрганизацияЗаявки;
	Иначе
		ОбъектРасчетов 		= ТекОбъектРасчетовФакт;
		ОрганизацияОтбор 	= ТекОрганизацияФакт;
	КонецЕсли;

	Если ОбъектРасчетов <> Неопределено Тогда
		
		РедактироватьГрафик(ОбъектРасчетов, ОрганизацияОтбор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаявки(Команда)
	ОбновитьЗаявкиНаСервере(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаявкиПоВыбраннымПозициям(Команда)
	ОбновитьЗаявкиНаСервере(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПогаситьВсюЗадолженность(Команда)
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СуммаПогашения", 	Объект.ПросроченнаяЗадолженность.Итог("КредиторскаяЗадолженностьПросрочено"));
	СтруктураПараметров.Вставить("ВводитьСумму", 	Ложь);
	
	ПараметрыОповещения = Новый Структура("РежимПогашения", "Целиком");
	ОписаниеОповещения 	= Новый ОписаниеОповещения("ПогаситьЗадолженностьПродолжение", ЭтотОбъект,ПараметрыОповещения);
	
	ОткрытьФорму("Обработка.УправлениеОтклонениями.Форма.ФормаПараметровПогашения",СтруктураПараметров,ЭтотОбъект,,,,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПогаситьЗадолженностьПоВыбраннымПозициям(Команда)
	
	
	Если ВыбранаПросроченнаяКредиторскаяЗадолженность = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите хотя бы одну позицию для погашения'"));
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СуммаПогашения", ВыбранаПросроченнаяКредиторскаяЗадолженность);
	СтруктураПараметров.Вставить("ВводитьСумму", Ложь);
	
	ПараметрыОповещения = Новый Структура("РежимПогашения", "ПоВыбраннымПозициям");
	ОписаниеОповещения 	= Новый ОписаниеОповещения("ПогаситьЗадолженностьПродолжение", ЭтотОбъект,ПараметрыОповещения);
	
	ОткрытьФорму("Обработка.УправлениеОтклонениями.Форма.ФормаПараметровПогашения",СтруктураПараметров,ЭтотОбъект,,,,ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДетализацию(Команда)
	
	ОтображатьДетализацию = Не Элементы.ОтображатьДетализацию.Пометка;
	
	Элементы.ОтображатьДетализацию.Пометка = ОтображатьДетализацию;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОплату(Команда)
	
	ОтображатьОплату = Не Элементы.ОтображатьОплату.Пометка;
	
	Элементы.ОтображатьОплату.Пометка = ОтображатьОплату;
	
	УправлениеФормой(ЭтотОбъект);
	ЗаполнитьТаблицуПланФакт();	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьНачисления(Команда)
	
	ОтображатьНачисления = Не Элементы.ОтображатьНачисления.Пометка;
	
	Элементы.ОтображатьНачисления.Пометка = ОтображатьНачисления;
	
	УправлениеФормой(ЭтотОбъект);
	ЗаполнитьТаблицуПланФакт();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаявку(Команда)
	
	ТекДанные = Элементы.ПланЗаявки.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("ОбъектРасчетов", ТекОбъектРасчетовЗаявки);
	
	Если ОтображатьДатуВДетализацииЗаявки Тогда
		СтруктураОтбора.Вставить("Дата");
	КонецЕсли;
	
	Если ОтображатьСтатьюВДетализацииЗаявки Тогда
		СтруктураОтбора.Вставить("СтатьяБюджета");
	КонецЕсли;	

	Если ОтображатьЭлементВДетализацииЗаявки Тогда
		СтруктураОтбора.Вставить("ЭлементСтруктурыЗадолженности");
	КонецЕсли;	

	ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекДанные);
	
	ПодходящиеДанные = ПолучитьПодходящиеЗаявкиПоОтбору(СтруктураОтбора);
	Если ЭтоАдресВременногоХранилища(ПодходящиеДанные) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВыбранныйДокумент", ЭтотОбъект);
		ОткрытьФорму("Обработка.УправлениеОтклонениями.Форма.ФормаВыборДокумента", Новый Структура("АдресТаблицы", ПодходящиеДанные), ЭтаФорма,,,,ОписаниеОповещения);
	ИначеЕсли ПодходящиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, ПодходящиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументФакт(Команда)
	
	ТекДанные = Элементы.РасхождениеСФактомДетализация.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("ОбъектРасчетов", ТекОбъектРасчетовФакт);
	
	Если ОтображатьДатуВДетализацииФакт Тогда
		СтруктураОтбора.Вставить("Дата");
	КонецЕсли;
	
	Если ОтображатьСтатьюВДетализацииФакт Тогда
		СтруктураОтбора.Вставить("СтатьяБюджета");
	КонецЕсли;	

	Если ОтображатьЭлементВДетализацииФакт Тогда
		СтруктураОтбора.Вставить("ЭлементСтруктурыЗадолженности");
	КонецЕсли;	

	ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекДанные);
	
	ПодходящиеДанные = ПолучитьПодходящиеДокументыФактаПоОтбору(СтруктураОтбора);
	Если ЭтоАдресВременногоХранилища(ПодходящиеДанные) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВыбранныйДокумент", ЭтотОбъект);
		ОткрытьФорму("Обработка.УправлениеОтклонениями.Форма.ФормаВыборДокумента", Новый Структура("АдресТаблицы", ПодходящиеДанные), ЭтаФорма,,,,ОписаниеОповещения);
	ИначеЕсли ПодходящиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, ПодходящиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДатуЗаявки(Команда)
	
	ОтображатьДатуВДетализацииЗаявки = Не Элементы.ТаблицаПланОтображатьДатуЗаявки.Пометка;
	Элементы.ТаблицаПланОтображатьДатуЗаявки.Пометка = ОтображатьДатуВДетализацииЗаявки;
	УправлениеФормой(ЭтаФорма);
	ОбновитьРасхождениеСЗаявкамиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьСтатьюЗаявки(Команда)
	
	ОтображатьСтатьюВДетализацииЗаявки = Не Элементы.ТаблицаПланОтображатьСтатьюЗаявки.Пометка;
	Элементы.ТаблицаПланОтображатьСтатьюЗаявки.Пометка = ОтображатьСтатьюВДетализацииЗаявки;
	УправлениеФормой(ЭтаФорма);
	ОбновитьРасхождениеСЗаявкамиСервер();

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЭлементЗаявки(Команда)
	
	ОтображатьЭлементВДетализацииЗаявки = Не Элементы.ТаблицаПланОтображатьЭлементЗаявки.Пометка;
	Элементы.ТаблицаПланОтображатьЭлементЗаявки.Пометка = ОтображатьЭлементВДетализацииЗаявки;
	УправлениеФормой(ЭтаФорма);
	ОбновитьРасхождениеСЗаявкамиСервер();

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДатуФакт(Команда)
	
	ОтображатьДатуВДетализацииФакт = Не Элементы.РасхождениеСФактомДетализацияОтображатьДатуФакт.Пометка;
	Элементы.РасхождениеСФактомДетализацияОтображатьДатуФакт.Пометка = ОтображатьДатуВДетализацииФакт;
	УправлениеФормой(ЭтаФорма);
	ОбновитьРасхождениеСЗаявкамиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьСтатьюФакт(Команда)
	
	ОтображатьСтатьюВДетализацииФакт = Не Элементы.РасхождениеСФактомДетализацияОтображатьСтатьюФакт.Пометка;
	Элементы.РасхождениеСФактомДетализацияОтображатьСтатьюФакт.Пометка = ОтображатьСтатьюВДетализацииФакт;
	УправлениеФормой(ЭтаФорма);
	ОбновитьРасхождениеСЗаявкамиСервер();

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЭлементФакт(Команда)
	
	ОтображатьЭлементВДетализацииФакт = Не Элементы.РасхождениеСФактомДетализацияОтображатьЭлементФакт.Пометка;
	Элементы.РасхождениеСФактомДетализацияОтображатьЭлементФакт.Пометка = ОтображатьЭлементВДетализацииФакт;
	УправлениеФормой(ЭтаФорма);
	ОбновитьРасхождениеСЗаявкамиСервер();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПросроченныеЗаявки(Команда)
	
	Если ПросроченныеЗаявкиПоОбъектуФакт.Количество() = 1 Тогда
		ПоказатьЗначение(, ПросроченныеЗаявкиПоОбъектуФакт[0].Документ);
	Иначе
		ПодходящиеДанные = ПоместитьПросроченныеЗаявкиФактВоВременноеХранилище();
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВыбранныйДокумент", ЭтотОбъект);
		ОткрытьФорму("Обработка.УправлениеОтклонениями.Форма.ФормаВыборДокумента", Новый Структура("АдресТаблицы", ПодходящиеДанные), ЭтаФорма,,,,ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПросроченныеЗаявкиПоОбъектуПлан(Команда)
	Если ПросроченныеЗаявкиПоОбъектуЗаявки.Количество() = 1 Тогда
		ПоказатьЗначение(, ПросроченныеЗаявкиПоОбъектуЗаявки[0].Документ);
	Иначе
		ПодходящиеДанные = ПоместитьПросроченныеЗаявкиПланВоВременноеХранилище();
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВыбранныйДокумент", ЭтотОбъект);
		ОткрытьФорму("Обработка.УправлениеОтклонениями.Форма.ФормаВыборДокумента", Новый Структура("АдресТаблицы", ПодходящиеДанные), ЭтаФорма,,,,ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьПросроченныеЗаявкиФактВоВременноеХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(ПросроченныеЗаявкиПоОбъектуФакт.Выгрузить());
КонецФункции

&НаСервере
Функция ПоместитьПросроченныеЗаявкиПланВоВременноеХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(ПросроченныеЗаявкиПоОбъектуЗаявки.Выгрузить());
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТаблицуПланФакт()
	
	ДатаОбновления 			= ТекущаяДатаСеанса();
	СтруктураТекОбъектов 	= Новый Структура("ОбъектРасчетовФакт,ОбъектРасчетовЗаявки,ОбъектРасчетовЗадолженность",
											   ТекОбъектРасчетовФакт,ТекОбъектРасчетовЗаявки,ТекОбъектРасчетовЗадолженность);
	
	ТекОбъектРасчетовЗаявки 		= Неопределено;
	ТекОбъектРасчетовФакт 			= Неопределено;
	ТекОбъектРасчетовЗадолженность 	= Неопределено;
	
	Объект.РасхождениеСФактомДетализация.Очистить();
	ПросроченныеЗаявкиПоОбъектуФакт.Очистить();
	Объект.РасхождениеСЗаявкамиДетализация.Очистить();
	ПросроченныеЗаявкиПоОбъектуЗаявки.Очистить();
	
	ОбновитьДанные();
	УстановитьТекущуюСтрокуВсеТЧ(СтруктураТекОбъектов);
	УстановитьЗаголовокФормы(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаГрафики()
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСКонтрагентамиГрафики.Организация КАК Организация,
	|	РасчетыСКонтрагентамиГрафики.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА РасчетыСКонтрагентамиГрафики.ПредметГрафика ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафики.ПредметГрафика КАК Справочник.ДоговорыКонтрагентов)
	|		КОГДА РасчетыСКонтрагентамиГрафики.ПредметГрафика ССЫЛКА Справочник.ДоговорыКредитовИДепозитов
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафики.ПредметГрафика КАК Справочник.ДоговорыКредитовИДепозитов)
	|	   	КОГДА РасчетыСКонтрагентамиГрафики.ПредметГрафика ССЫЛКА Справочник.ДоговорыАренды
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафики.ПредметГрафика КАК Справочник.ДоговорыАренды)
	|		КОГДА РасчетыСКонтрагентамиГрафики.ПредметГрафика ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафики.ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
	|		КОГДА РасчетыСКонтрагентамиГрафики.ПредметГрафика ССЫЛКА Документ.ЗаказПоставщику
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафики.ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
	|		КОГДА РасчетыСКонтрагентамиГрафики.ПредметГрафика ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафики.ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
	|		КОГДА РасчетыСКонтрагентамиГрафики.ПредметГрафика ССЫЛКА Документ.РеестрУступленныхДенежныхТребований
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафики.ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК ДоговорКонтрагента,
	|	РасчетыСКонтрагентамиГрафики.ПредметГрафика КАК ОбъектРасчетов,
	|	РасчетыСКонтрагентамиГрафики.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности,
	|	РасчетыСКонтрагентамиГрафики.Валюта КАК Валюта,
	|	РасчетыСКонтрагентамиГрафики.СтатьяБюджета КАК СтатьяБюджета,
	|	РасчетыСКонтрагентамиГрафики.ПриходРасход КАК ПриходРасход,
	|	НАЧАЛОПЕРИОДА(РасчетыСКонтрагентамиГрафики.Период, ДЕНЬ) КАК Дата,
	|	ЕСТЬNULL(РасчетыСКонтрагентамиГрафики.ПредметГрафика.Ответственный, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Ответственный,
	|	ВЫБОР
	|		КОГДА &ОтображатьНачисления
	|			И РасчетыСКонтрагентамиГрафики.Период 		< &ДатаОперации
	|			И РасчетыСКонтрагентамиГрафики.ВидБюджета 	<> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств)
	|		ТОГДА РасчетыСКонтрагентамиГрафики.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачислениеГрафикФакт,
	|	ВЫБОР
	|		КОГДА &ОтображатьОплату
	|				И РасчетыСКонтрагентамиГрафики.Период < &ДатаОперации
	|				И РасчетыСКонтрагентамиГрафики.ВидБюджета = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств)
	|			ТОГДА РасчетыСКонтрагентамиГрафики.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОплатаГрафикФакт,
	|	ВЫБОР
	|		КОГДА &ОтображатьНачисления
	|			И РасчетыСКонтрагентамиГрафики.Период >= &ДатаОперации
	|			И РасчетыСКонтрагентамиГрафики.ВидБюджета <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств)
	|		ТОГДА РасчетыСКонтрагентамиГрафики.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачислениеГрафикПлан,
	|	ВЫБОР
	|		КОГДА &ОтображатьОплату
	|				И РасчетыСКонтрагентамиГрафики.Период >= &ДатаОперации
	|				И РасчетыСКонтрагентамиГрафики.ВидБюджета = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств)
	|			ТОГДА РасчетыСКонтрагентамиГрафики.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОплатаГрафикПлан,
	|	0 КАК НачислениеЗаявлено,
	|	0 КАК ОплатаЗаявлено,
	|	0 КАК НачислениеФакт,
	|	0 КАК ОплатаФакт,
	|	0 КАК НачислениеПросроченныеЗаявки,
	|	0 КАК ОплатаПросроченныеЗаявки,
	|	РасчетыСКонтрагентамиГрафики.Регистратор КАК Документ
	|ПОМЕСТИТЬ ВТ_ИсходныеДанные
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентамиГрафики КАК РасчетыСКонтрагентамиГрафики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВерсииРасчетов.СрезПоследних КАК ВерсииРасчетовСрезПоследних
	|		ПО РасчетыСКонтрагентамиГрафики.ВерсияГрафика = ВерсииРасчетовСрезПоследних.Регистратор
	|			И РасчетыСКонтрагентамиГрафики.Организация = ВерсииРасчетовСрезПоследних.Организация
	|			И (&ДополнительноеУсловиеСвязиЦенныеБумаги)
	|ГДЕ
	|	&ОтборТипОбъектаРасчетовГрафик
	|	И &ОтборОрганизацияГрафик
	|	И &ОтборКонтрагентГрафик
	|	И &ОтборОтветственныйГрафик
	|	И &ОтборГоризонтПланированияГрафик
    |
	|";

	
	Если ТипОбъектовРасчетов = ТипОбъектаРасчетовДоговорыСПоставщиками() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовГрафик", 
		" РасчетыСКонтрагентамиГрафики.ВидДоговораУХ В (&ВидыДоговоровСПоставщиком)");
		
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовДоговорыСПокупателями() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовГрафик", 
		" РасчетыСКонтрагентамиГрафики.ВидДоговораУХ В (&ВидыДоговоровСПокупателем)");
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовДоговорыЛизинг() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовГрафик", 
		" РасчетыСКонтрагентамиГрафики.ВидДоговораУХ В (&ВидыДоговоровЛизинг)");
	
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовАккредитивыБанковскиеГарантии() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовГрафик", 
		" РасчетыСКонтрагентамиГрафики.ВидДоговораУХ В (&ВидыДоговоровАккредитивыБанковскиеГарантии)");
		
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовПроизводныеИструменты() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовГрафик", 
		"РасчетыСКонтрагентамиГрафики.ВидДоговораУХ В (&ВидыДоговоровПроизводныеИструменты)");
	 		
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовПривлечениеСредств() Тогда
		
		ОтборТипОбъектаРасчетовГрафик = "РасчетыСКонтрагентамиГрафики.ВидДоговораУХ В ИЕРАРХИИ (Значение(Справочник.ВидыДоговоровКонтрагентовУХ.ПривлечениеСредств))";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовГрафик", ОтборТипОбъектаРасчетовГрафик);
		
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовРазмещениеСредств() Тогда
		
		ОтборТипОбъектаРасчетовГрафик = "РасчетыСКонтрагентамиГрафики.ВидДоговораУХ В ИЕРАРХИИ (Значение(Справочник.ВидыДоговоровКонтрагентовУХ.РазмещениеСредств))";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовГрафик", ОтборТипОбъектаРасчетовГрафик);
		
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовЦенныеБумагиСобственные() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительноеУсловиеСвязиЦенныеБумаги", 
		"(РасчетыСКонтрагентамиГрафики.Организация = ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафики.ПредметГрафика КАК Справочник.ЦенныеБумаги).Эмитент)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовГрафик", 
		"РасчетыСКонтрагентамиГрафики.ПредметГрафика ССЫЛКА Справочник.ЦенныеБумаги");
		
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовЦенныеБумагиСторонние() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительноеУсловиеСвязиЦенныеБумаги", 
		"(РасчетыСКонтрагентамиГрафики.Организация <> ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафики.ПредметГрафика КАК Справочник.ЦенныеБумаги).Эмитент)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовГрафик", 
		"РасчетыСКонтрагентамиГрафики.ПредметГрафика ССЫЛКА Справочник.ЦенныеБумаги");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборОрганизацияГрафик", "РасчетыСКонтрагентамиГрафики.Организация = &Организация");
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Ответственный)
		И Не (ТипОбъектовРасчетов = ТипОбъектаРасчетовЦенныеБумагиСобственные() Или ТипОбъектовРасчетов = ТипОбъектаРасчетовЦенныеБумагиСторонние())Тогда
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборОтветственныйГрафик", 	"ЕСТЬNULL(РасчетыСКонтрагентамиГрафики.ПредметГрафика.Ответственный, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) = &Ответственный");
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборКонтрагентГрафик", 		"РасчетыСКонтрагентамиГрафики.Контрагент = &Контрагент");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГоризонтПланирования) Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборГоризонтПланированияГрафик", "НАЧАЛОПЕРИОДА(РасчетыСКонтрагентамиГрафики.Период, ДЕНЬ) <= &ГоризонтПланирования");
		
	КонецЕсли;	
	
	
	Возврат ТекстЗапроса;

КонецФункции

&НаСервере
Функция ТекстЗапросаЗаявки()
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ
	|	РазмещениеЗаявок.Организация,
	|	РазмещениеЗаявок.Контрагент,
	|	ВЫБОР
	|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорКредитаДепозита <> Значение(Справочник.ДоговорыКредитовИДепозитов.ПустаяСсылка)
	|			ТОГДА ДвиженияБюджетированияПоПозициям.ДоговорКредитаДепозита
	|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорАренды <> Значение(Справочник.ДоговорыАренды.ПустаяСсылка)
	|			ТОГДА ДвиженияБюджетированияПоПозициям.ДоговорАренды
	|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорКонтрагента <> Значение(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ДвиженияБюджетированияПоПозициям.ДоговорКонтрагента
	|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорЗаймаСотруднику <> Значение(Документ.ДоговорЗаймаСотруднику.ПустаяСсылка)
	|			ТОГДА ДвиженияБюджетированияПоПозициям.ДоговорЗаймаСотруднику
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ (ДвиженияБюджетированияПоПозициям.ОбъектРасчетов = Значение(Справочник.ОбъектыРасчетов.ПустаяСсылка))
	|			ТОГДА ДвиженияБюджетированияПоПозициям.ОбъектРасчетов
	|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорКредитаДепозита <> Значение(Справочник.ДоговорыКредитовИДепозитов.ПустаяСсылка)
	|			ТОГДА ДвиженияБюджетированияПоПозициям.ДоговорКредитаДепозита
	|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорКонтрагента <> Значение(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ДвиженияБюджетированияПоПозициям.ДоговорКонтрагента
	|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорАренды <> Значение(Справочник.ДоговорыАренды.ПустаяСсылка)
	|			ТОГДА ДвиженияБюджетированияПоПозициям.ДоговорАренды
	|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорЗаймаСотруднику <> Значение(Документ.ДоговорЗаймаСотруднику.ПустаяСсылка)
	|			ТОГДА ДвиженияБюджетированияПоПозициям.ДоговорЗаймаСотруднику
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ,
	|	ДвиженияБюджетированияПоПозициям.ЭлементСтруктурыЗадолженности,
	|	РазмещениеЗаявок.ВалютаВзаиморасчетов,
	|	ДвиженияБюджетированияПоПозициям.СтатьяДвиженияДенежныхСредств,
	|	РазмещениеЗаявок.ПриходРасход,
	|	РазмещениеЗаявок.ДатаИсполнения,
	|	ЕСТЬNULL(ДвиженияБюджетированияПоПозициям.ОбъектРасчетов.Менеджер, РазмещениеЗаявок.ЗаявкаНаОперацию.КтоЗаявил),
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА РазмещениеЗаявок.ДатаИсполнения >= &ДатаОперации
	|			ТОГДА ДвиженияБюджетированияПоПозициям.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА РазмещениеЗаявок.ДатаИсполнения < &ДатаОперации
	|			ТОГДА ДвиженияБюджетированияПоПозициям.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	РазмещениеЗаявок.ЗаявкаНаОперацию
	|ИЗ
	|	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДвиженияБюджетированияПоПозициям КАК ДвиженияБюджетированияПоПозициям
	|		ПО РазмещениеЗаявок.ИдентификаторПозиции = ДвиженияБюджетированияПоПозициям.ИдентификаторПозиции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполненияДокументовПланированияСрезПоследних
	|		ПО РазмещениеЗаявок.ИдентификаторПозиции = СостоянияИсполненияДокументовПланированияСрезПоследних.ИдентификаторПозиции
	|ГДЕ
	|	ВЫБОР
	|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорКредитаДепозита <> Значение(Справочник.ДоговорыКредитовИДепозитов.ПустаяСсылка)
	|			ТОГДА Истина
	|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорАренды <> Значение(Справочник.ДоговорыАренды.ПустаяСсылка)
	|			ТОГДА Истина
	|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорКонтрагента <> Значение(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА Истина
	|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорЗаймаСотруднику <> Значение(Документ.ДоговорЗаймаСотруднику.ПустаяСсылка)
	|			ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ 
	|	И ЕСТЬNULL(СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения, ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НеОбработана)) В (ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НеОбработана), ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.ВключенаВРеестрПлатежей), ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НаИсполнении))
	|	И &ОтображатьОплату
	|	И РазмещениеЗаявок.Проведен
	|	И &ОтборТипОбъектаРасчетовЗаявки
	|	И &ОтборОрганизацияЗаявки
	|	И &ОтборКонтрагентЗаявки
	|	И &ОтборОтветственныйЗаявки
	|	И &ОтборГоризонтПланированияЗаявки
	|
	|";

	
	Если ТипОбъектовРасчетов = ТипОбъектаРасчетовДоговорыСПоставщиками() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗаявки", 
		"	ВЫБОР
		|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорКредитаДепозита <> Значение(Справочник.ДоговорыКредитовИДепозитов.ПустаяСсылка)
		|			ТОГДА ДвиженияБюджетированияПоПозициям.ДоговорКредитаДепозита.ВидДоговораУХ
		|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорАренды <> Значение(Справочник.ДоговорыАренды.ПустаяСсылка)
		|			ТОГДА ДвиженияБюджетированияПоПозициям.ДоговорАренды.ВидДоговораУХ
		|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорКонтрагента <> Значение(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА ДвиженияБюджетированияПоПозициям.ДоговорКонтрагента.ВидДоговораУХ
		|	КОНЕЦ  В ИЕРАРХИИ  (&ВидыДоговоровСПоставщиком)");
		
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовДоговорыСПокупателями() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗаявки", 
		"	ВЫБОР
		|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорКредитаДепозита <> Значение(Справочник.ДоговорыКредитовИДепозитов.ПустаяСсылка)
		|			ТОГДА ДвиженияБюджетированияПоПозициям.ДоговорКредитаДепозита.ВидДоговораУХ
		|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорАренды <> Значение(Справочник.ДоговорыАренды.ПустаяСсылка)
		|			ТОГДА ДвиженияБюджетированияПоПозициям.ДоговорАренды.ВидДоговораУХ
		|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорКонтрагента <> Значение(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА ДвиженияБюджетированияПоПозициям.ДоговорКонтрагента.ВидДоговораУХ
		|	КОНЕЦ  В ИЕРАРХИИ  (&ВидыДоговоровСПокупателем)");
			
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовДоговорыЛизинг() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗаявки",
		"	ВЫБОР
		|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорКредитаДепозита <> Значение(Справочник.ДоговорыКредитовИДепозитов.ПустаяСсылка)
		|			ТОГДА ДвиженияБюджетированияПоПозициям.ДоговорКредитаДепозита.ВидДоговораУХ
		|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорАренды <> Значение(Справочник.ДоговорыАренды.ПустаяСсылка)
		|			ТОГДА ДвиженияБюджетированияПоПозициям.ДоговорАренды.ВидДоговораУХ
		|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорКонтрагента <> Значение(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА ДвиженияБюджетированияПоПозициям.ДоговорКонтрагента.ВидДоговораУХ
		|	КОНЕЦ  В ИЕРАРХИИ  (&ВидыДоговоровЛизинг)");
		
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовАккредитивыБанковскиеГарантии() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗаявки",
		"	ВЫБОР
		|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорКредитаДепозита <> Значение(Справочник.ДоговорыКредитовИДепозитов.ПустаяСсылка)
		|			ТОГДА ДвиженияБюджетированияПоПозициям.ДоговорКредитаДепозита.ВидДоговораУХ
		|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорАренды <> Значение(Справочник.ДоговорыАренды.ПустаяСсылка)
		|			ТОГДА ДвиженияБюджетированияПоПозициям.ДоговорАренды.ВидДоговораУХ
		|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорКонтрагента <> Значение(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА ДвиженияБюджетированияПоПозициям.ДоговорКонтрагента.ВидДоговораУХ
		|	КОНЕЦ  В ИЕРАРХИИ  (&ВидыДоговоровАккредитивыБанковскиеГарантии)");
		
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовПроизводныеИструменты() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗаявки", 
		"	ВЫБОР
		|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорКредитаДепозита <> Значение(Справочник.ДоговорыКредитовИДепозитов.ПустаяСсылка)
		|			ТОГДА ДвиженияБюджетированияПоПозициям.ДоговорКредитаДепозита.ВидДоговораУХ
		|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорАренды <> Значение(Справочник.ДоговорыАренды.ПустаяСсылка)
		|			ТОГДА ДвиженияБюджетированияПоПозициям.ДоговорАренды.ВидДоговораУХ
		|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорКонтрагента <> Значение(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА ДвиженияБюджетированияПоПозициям.ДоговорКонтрагента.ВидДоговораУХ
		|	КОНЕЦ  В ИЕРАРХИИ  (&ВидыДоговоровПроизводныеИструменты)");
		
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовПривлечениеСредств() Тогда
		
		ИмяСправочникаДоговоры = ДоговорыКонтрагентовВстраиваниеУХКлиентСервер.ИмяСправочникаДоговорыКредитовДепозитов();
		
		ОтборТипОбъектаРасчетовЗаявки = "ДвиженияБюджетированияПоПозициям.ДоговорКредитаДепозита <> Значение(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|И ДвиженияБюджетированияПоПозициям.ДоговорКредитаДепозита.ВидДоговораУХ В ИЕРАРХИИ (Значение(Справочник.ВидыДоговоровКонтрагентовУХ.ПривлечениеСредств))";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗаявки", 	ОтборТипОбъектаРасчетовЗаявки);
		
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовРазмещениеСредств() Тогда
		
		ИмяСправочникаДоговоры 			= ДоговорыКонтрагентовВстраиваниеУХКлиентСервер.ИмяСправочникаДоговорыКредитовДепозитов();
		
		ОтборТипОбъектаРасчетовЗаявки 	= 
		"	ВЫБОР
		|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорКредитаДепозита <> Значение(Справочник.ДоговорыКредитовИДепозитов.ПустаяСсылка)
		|			ТОГДА ДвиженияБюджетированияПоПозициям.ДоговорКредитаДепозита.ВидДоговораУХ
		|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорАренды <> Значение(Справочник.ДоговорыАренды.ПустаяСсылка)
		|			ТОГДА ДвиженияБюджетированияПоПозициям.ДоговорАренды.ВидДоговораУХ
		|		КОГДА ДвиженияБюджетированияПоПозициям.ДоговорКонтрагента <> Значение(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА ДвиженияБюджетированияПоПозициям.ДоговорКонтрагента.ВидДоговораУХ
		|	КОНЕЦ   В ИЕРАРХИИ (Значение(Справочник.ВидыДоговоровКонтрагентовУХ.РазмещениеСредств))";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗаявки", ОтборТипОбъектаРасчетовЗаявки);
	
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовЦенныеБумагиСобственные() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗаявки", 
		"ДвиженияБюджетированияПоПозициям.ЦеннаяБумага <> Значение(Справочник.ЦенныеБумаги.ПустаяСсылка)
		|И ДвиженияБюджетированияПоПозициям.ЦеннаяБумага.Эмитент = РазмещениеЗаявок.Организация");

		
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовЦенныеБумагиСторонние() Тогда
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗаявки", 
		"ДвиженияБюджетированияПоПозициям.ЦеннаяБумага <> Значение(Справочник.ЦенныеБумаги.ПустаяСсылка)
		|И ДвиженияБюджетированияПоПозициям.ЦеннаяБумага.Эмитент <> РазмещениеЗаявок.Организация");
		
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ответственный)
		И Не (ТипОбъектовРасчетов = ТипОбъектаРасчетовЦенныеБумагиСобственные() Или ТипОбъектовРасчетов = ТипОбъектаРасчетовЦенныеБумагиСторонние())Тогда
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборОтветственныйЗаявки", 	"ЕСТЬNULL(ДвиженияБюджетированияПоПозициям.ОбъектРасчетов.Менеджер, РазмещениеЗаявок.ЗаявкаНаОперацию.КтоЗаявил) = &Ответственный");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборОрганизацияЗаявки", 	"РазмещениеЗаявок.Организация = &Организация");

	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборКонтрагентЗаявки", 		"РазмещениеЗаявок.Контрагент = &Контрагент");
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ГоризонтПланирования) Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборГоризонтПланированияЗаявки", "РазмещениеЗаявок.ДатаИсполнения <= &ГоризонтПланирования");

	КонецЕсли;		
	
	
	Возврат ТекстЗапроса;
КонецФункции

&НаСервере
Функция ТекстЗапросаРасчетФакт()
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ
	|	РасчетыСКонтрагентамиФакт.Организация,
	|	РасчетыСКонтрагентамиФакт.Контрагент,
	|	РасчетыСКонтрагентамиФакт.ДоговорКонтрагента,
	|	РасчетыСКонтрагентамиФакт.ОбъектРасчетов,
	|	РасчетыСКонтрагентамиФакт.ЭлементСтруктурыЗадолженности,
	|	РасчетыСКонтрагентамиФакт.Валюта,
	|	РасчетыСКонтрагентамиФакт.СтатьяБюджета,
	|	РасчетыСКонтрагентамиФакт.ПриходРасход,
	|	НАЧАЛОПЕРИОДА(РасчетыСКонтрагентамиФакт.Период, ДЕНЬ),
	|	ЕСТЬNULL(РасчетыСКонтрагентамиФакт.ОбъектРасчетов.Ответственный, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)),
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		Когда &ОтображатьНачисления 
	|				И РасчетыСКонтрагентамиФакт.ВидБюджета <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств)
	|			ТОГДА РасчетыСКонтрагентамиФакт.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ОтображатьОплату
	|				И РасчетыСКонтрагентамиФакт.ВидБюджета = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств)
	|			ТОГДА РасчетыСКонтрагентамиФакт.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	0,
	|	РасчетыСКонтрагентамиФакт.Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентамиФакт КАК РасчетыСКонтрагентамиФакт
	|ГДЕ
	|	РасчетыСКонтрагентамиФакт.Период < &ДатаОперации
	|	И &ОтборТипОбъектаРасчетовФакт
	|	И &ОтборОрганизацияФакт
	|	И &ОтборКонтрагентФакт
	|	И &ОтборОтветственныйФакт 
	|
	| ";
	
	
	Если ТипОбъектовРасчетов = ТипОбъектаРасчетовДоговорыСПоставщиками() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовФакт", 
		"РасчетыСКонтрагентамиФакт.ВидДоговораУХ  В (&ВидыДоговоровСПоставщиком)");
	
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовДоговорыСПокупателями() Тогда
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовФакт", 
		"РасчетыСКонтрагентамиФакт.ВидДоговораУХ  В (&ВидыДоговоровСПокупателем)");
		
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовДоговорыЛизинг() Тогда
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовФакт", 
		"РасчетыСКонтрагентамиФакт.ВидДоговораУХ  В (&ВидыДоговоровЛизинг)");
			
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовАккредитивыБанковскиеГарантии() Тогда
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовФакт", 
		"РасчетыСКонтрагентамиФакт.ВидДоговораУХ  В (&ВидыДоговоровАккредитивыБанковскиеГарантии)");
		
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовПроизводныеИструменты() Тогда
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовФакт", 
		"РасчетыСКонтрагентамиФакт.ВидДоговораУХ  В (&ВидыДоговоровПроизводныеИструменты)");
		 	
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовПривлечениеСредств() Тогда
		
		ОтборТипОбъектаРасчетовФакт = "РасчетыСКонтрагентамиФакт.ВидДоговораУХ В ИЕРАРХИИ (Значение(Справочник.ВидыДоговоровКонтрагентовУХ.ПривлечениеСредств))";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовФакт", ОтборТипОбъектаРасчетовФакт);
		
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовРазмещениеСредств() Тогда
		
		ОтборТипОбъектаРасчетовФакт = "РасчетыСКонтрагентамиФакт.ВидДоговораУХ В ИЕРАРХИИ (Значение(Справочник.ВидыДоговоровКонтрагентовУХ.РазмещениеСредств))";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовФакт", ОтборТипОбъектаРасчетовФакт);
		
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовЦенныеБумагиСобственные() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовФакт", 
		"РасчетыСКонтрагентамиФакт.ОбъектРасчетов ССЫЛКА Справочник.ЦенныеБумаги
		|И РасчетыСКонтрагентамиФакт.ОбъектРасчетов.Эмитент = РасчетыСКонтрагентамиФакт.Организация");
	
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовЦенныеБумагиСторонние() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовФакт", 
		"РасчетыСКонтрагентамиФакт.ОбъектРасчетов ССЫЛКА Справочник.ЦенныеБумаги
		|И РасчетыСКонтрагентамиФакт.ОбъектРасчетов.Эмитент <> РасчетыСКонтрагентамиФакт.Организация");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ответственный)
		И Не (ТипОбъектовРасчетов = ТипОбъектаРасчетовЦенныеБумагиСобственные() Или ТипОбъектовРасчетов = ТипОбъектаРасчетовЦенныеБумагиСторонние())Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборОтветственныйФакт", 	"ЕСТЬNULL(РасчетыСКонтрагентамиФакт.ОбъектРасчетов.Ответственный, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) = &Ответственный");
		
	КОнецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборОрганизацияФакт", 		"РасчетыСКонтрагентамиФакт.Организация = &Организация");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборКонтрагентФакт", 	"РасчетыСКонтрагентамиФакт.Контрагент = &Контрагент");

	КонецЕсли;	
	
	Возврат ТекстЗапроса;
КонецФункции

&НаСервере
Функция ТекстЗапросаОперативныйПлан()
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ
	|	ОперативныйПланПоБюджетам.Организация,
	|	ОперативныйПланПоБюджетам.Контрагент,
	|	ОперативныйПланПоБюджетам.ДоговорКонтрагента,
	|	ВЫБОР КОГДА ОперативныйПланПоБюджетам.ДокументПланирования ССЫЛКА Документ.ЗаявкаНаРасход  
	|		  ТОГДА Выразить(ОперативныйПланПоБюджетам.ДокументПланирования КАК Документ.ЗаявкаНаРасход).ОбъектРасчетов
	|		  ИНАЧЕ Выразить(ОперативныйПланПоБюджетам.ДокументПланирования КАК Документ.ПланируемыйДоход).ОбъектРасчетов
	|	КОНЕЦ,
	|	Значение(Перечисление.ЭлементыСтруктурыЗадолженности.ОсновнойДолг),
	|	ОперативныйПланПоБюджетам.Валюта,
	|	ОперативныйПланПоБюджетам.СтатьяБюджета,
	|	ОперативныйПланПоБюджетам.ПриходРасход,
	|	ОперативныйПланПоБюджетам.Период, 
	|	ЕСТЬNULL(ОперативныйПланПоБюджетам.ДоговорКонтрагента.Ответственный, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)),
	|	0,
	|	0,
	|	0,
	|	0,
	|	ОперативныйПланПоБюджетам.ЗаявленоОборот,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ОперативныйПланПоБюджетам.ДокументПланирования
	|ИЗ
	|	РегистрНакопления.ОперативныйПланПоБюджетам.Обороты(&ДатаОперации,&ГоризонтПланирования,День , 
	|	(ДокументПланирования  ССЫЛКА Документ.ЗаявкаНаРасход 
	|		ИЛИ ДокументПланирования ССЫЛКА Документ.ПланируемыйДоход)
	|	И Предназначение = Значение(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов)
	|		) КАК ОперативныйПланПоБюджетам
	|ГДЕ
	|	 &ОтображатьНачисления
	|	И &ОтборТипОбъектаОперативныйПлан   
	|	И &ОтборОрганизацияОперативныйПлан
	|	И &ОтборКонтрагентОперативныйПлан
	|	И &ОтборОтветственныйОперативныйПлан
	|
	| ИНДЕКСИРОВАТЬ ПО Дата
	|	 ";
	
	
	Если ТипОбъектовРасчетов = ТипОбъектаРасчетовДоговорыСПоставщиками() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаОперативныйПлан", 
		"ОперативныйПланПоБюджетам.ДоговорКонтрагента.ВидДоговораУХ  В (&ВидыДоговоровСПоставщиком)");
	
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовДоговорыСПокупателями() Тогда
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаОперативныйПлан", 
		"ОперативныйПланПоБюджетам.ДоговорКонтрагента.ВидДоговораУХ  В (&ВидыДоговоровСПокупателем)");
		
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовДоговорыЛизинг() Тогда
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаОперативныйПлан", 
		"ОперативныйПланПоБюджетам.ДоговорКонтрагента.ВидДоговораУХ  В (&ВидыДоговоровЛизинг)");
			
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовАккредитивыБанковскиеГарантии() Тогда
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаОперативныйПлан", 
		"ОперативныйПланПоБюджетам.ДоговорКонтрагента.ВидДоговораУХ  В (&ВидыДоговоровАккредитивыБанковскиеГарантии)");
		
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовПроизводныеИструменты() Тогда
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаОперативныйПлан", 
		"ОперативныйПланПоБюджетам.ДоговорКонтрагента.ВидДоговораУХ  В (&ВидыДоговоровПроизводныеИструменты)");
		 	
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовПривлечениеСредств() Тогда
		
		ОтборТипОбъектаРасчетовФакт = "ОперативныйПланПоБюджетам.ДоговорКонтрагента.ВидДоговораУХ В ИЕРАРХИИ (Значение(Справочник.ВидыДоговоровКонтрагентовУХ.ПривлечениеСредств))";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаОперативныйПлан", ОтборТипОбъектаРасчетовФакт);
		
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовРазмещениеСредств() Тогда
		
		ОтборТипОбъектаРасчетовФакт = "ОперативныйПланПоБюджетам.ДоговорКонтрагента.ВидДоговораУХ В ИЕРАРХИИ (Значение(Справочник.ВидыДоговоровКонтрагентовУХ.РазмещениеСредств))";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаОперативныйПлан", ОтборТипОбъектаРасчетовФакт);
		
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовЦенныеБумагиСобственные() Тогда
		
	    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаОперативныйПлан", "ИСТИНА");

	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовЦенныеБумагиСторонние() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаОперативныйПлан", "ИСТИНА");
		
	КонецЕсли;
	
	// Отбор по ответственному
	Если ЗначениеЗаполнено(Ответственный)
		И Не (ТипОбъектовРасчетов = ТипОбъектаРасчетовЦенныеБумагиСобственные() Или ТипОбъектовРасчетов = ТипОбъектаРасчетовЦенныеБумагиСторонние())Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборОтветственныйОперативныйПлан", 	"ЕСТЬNULL(ОперативныйПланПоБюджетам.ДоговорКонтрагента.Ответственный, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) = &Ответственный");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборОрганизацияОперативныйПлан", 	"ОперативныйПланПоБюджетам.Организация = &Организация");

	КонецЕсли;	

	Если ЗначениеЗаполнено(Контрагент) Тогда
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборКонтрагентОперативныйПлан", 	"ОперативныйПланПоБюджетам.Контрагент = &Контрагент");
		
	КонецЕсли;	
	
	Возврат ТекстЗапроса;
КонецФункции

&НаСервере
Функция ТекстЗапросаЗадолженности()
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСКонтрагентамиФактОстатки.Организация КАК Организация,
	|	РасчетыСКонтрагентамиФактОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РасчетыСКонтрагентамиФактОстатки.Контрагент КАК Контрагент,
	|	РасчетыСКонтрагентамиФактОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСКонтрагентамиФактОстатки.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности,
	|	0 КАК КредиторскаяЗадолженностьГрафик,
	|	-РасчетыСКонтрагентамиФактОстатки.СуммаОстаток КАК КредиторскаяЗадолженностьФакт,
	|	РасчетыСКонтрагентамиФактОстатки.Валюта КАК Валюта
	|ПОМЕСТИТЬ ВТ_ЗадолженностьНесгруппированная
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентамиФакт.Остатки(
	|			&ДатаОперации,
	|			&ОтборТипОбъектаРасчетовЗадолженностьФакт
	|				И &ОтборОрганизацияЗадолженность
	|				И &ОтборКонтрагентЗадолженность
	|				И &ОтборОтветственныйЗадолженностьФакт) КАК РасчетыСКонтрагентамиФактОстатки
	|ГДЕ
	|	РасчетыСКонтрагентамиФактОстатки.СуммаОстаток < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыПоФинансовымИнструментамГрафикиОстатки.Организация,
	|	РасчетыПоФинансовымИнструментамГрафикиОстатки.Контрагент,
	|	ВЫБОР
	|		КОГДА РасчетыПоФинансовымИнструментамГрафикиОстатки.ПредметГрафика ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(РасчетыПоФинансовымИнструментамГрафикиОстатки.ПредметГрафика КАК Справочник.ДоговорыКонтрагентов)
	|		КОГДА РасчетыПоФинансовымИнструментамГрафикиОстатки.ПредметГрафика ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(РасчетыПоФинансовымИнструментамГрафикиОстатки.ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
	|		КОГДА РасчетыПоФинансовымИнструментамГрафикиОстатки.ПредметГрафика ССЫЛКА Документ.ЗаказПоставщику
	|			ТОГДА ВЫРАЗИТЬ(РасчетыПоФинансовымИнструментамГрафикиОстатки.ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
	|		КОГДА РасчетыПоФинансовымИнструментамГрафикиОстатки.ПредметГрафика ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(РасчетыПоФинансовымИнструментамГрафикиОстатки.ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
	|		КОГДА РасчетыПоФинансовымИнструментамГрафикиОстатки.ПредметГрафика ССЫЛКА Документ.РеестрУступленныхДенежныхТребований
	|			ТОГДА ВЫРАЗИТЬ(РасчетыПоФинансовымИнструментамГрафикиОстатки.ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ,
	|	РасчетыПоФинансовымИнструментамГрафикиОстатки.ПредметГрафика,
	|	РасчетыПоФинансовымИнструментамГрафикиОстатки.ЭлементСтруктурыЗадолженности,
	|	-РасчетыПоФинансовымИнструментамГрафикиОстатки.СуммаОстаток,
	|	0,
	|	РасчетыПоФинансовымИнструментамГрафикиОстатки.Валюта
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентамиГрафики.Остатки(
	|			&ДатаОперации,
	|			&ОтборТипОбъектаРасчетовЗадолженностьГрафики
	|				И &ОтборОрганизацияЗадолженность
	|				И &ОтборКонтрагентЗадолженность
	|				И &ОтборОтветственныйЗадолженностьГрафики) КАК РасчетыПоФинансовымИнструментамГрафикиОстатки
	|ГДЕ
	|	РасчетыПоФинансовымИнструментамГрафикиОстатки.СуммаОстаток < 0
	| ";

	
	Если ТипОбъектовРасчетов = ТипОбъектаРасчетовДоговорыСПоставщиками() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗадолженностьФакт",
		"ДоговорКонтрагента.ВидДоговораУХ  В (&ВидыДоговоровСПоставщиком)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗадолженностьГрафики", 
		"(ВЫБОР
		|	КОГДА ПредметГрафика ССЫЛКА Справочник.ДоговорыКонтрагентов
		|		ТОГДА ВЫРАЗИТЬ(ПредметГрафика КАК Справочник.ДоговорыКонтрагентов)
		|	КОГДА ПредметГрафика ССЫЛКА Документ.ПриобретениеТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
		|	КОГДА ПредметГрафика ССЫЛКА Документ.ЗаказПоставщику
		|		ТОГДА ВЫРАЗИТЬ(ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
		|	КОГДА ПредметГрафика ССЫЛКА Документ.РеализацияТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
		|	КОГДА ПредметГрафика ССЫЛКА Документ.РеестрУступленныхДенежныхТребований
		|		ТОГДА ВЫРАЗИТЬ(ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
		|	ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|КОНЕЦ).ВидДоговораУХ  В (&ВидыДоговоровСПоставщиком)");
		
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовДоговорыСПокупателями() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗадолженностьФакт",
		"ДоговорКонтрагента.ВидДоговораУХ  В (&ВидыДоговоровСПокупателем)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗадолженностьГрафики", 
		"(ВЫБОР
		|	КОГДА ПредметГрафика ССЫЛКА Справочник.ДоговорыКонтрагентов
		|		ТОГДА ВЫРАЗИТЬ(ПредметГрафика КАК Справочник.ДоговорыКонтрагентов)
		|	КОГДА ПредметГрафика ССЫЛКА Документ.ПриобретениеТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
		|	КОГДА ПредметГрафика ССЫЛКА Документ.ЗаказПоставщику
		|		ТОГДА ВЫРАЗИТЬ(ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
		|	КОГДА ПредметГрафика ССЫЛКА Документ.РеализацияТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
		|	КОГДА ПредметГрафика ССЫЛКА Документ.РеестрУступленныхДенежныхТребований
		|		ТОГДА ВЫРАЗИТЬ(ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
		|	ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|КОНЕЦ).ВидДоговораУХ  В (&ВидыДоговоровСПокупателем)");
			
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовДоговорыЛизинг() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗадолженностьФакт",
		"ДоговорКонтрагента.ВидДоговораУХ  В (&ВидыДоговоровЛизинг)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗадолженностьГрафики", 
		"(ВЫБОР
		|	КОГДА ПредметГрафика ССЫЛКА Справочник.ДоговорыКонтрагентов
		|		ТОГДА ВЫРАЗИТЬ(ПредметГрафика КАК Справочник.ДоговорыКонтрагентов)
		|	КОГДА ПредметГрафика ССЫЛКА Документ.ПриобретениеТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
		|	КОГДА ПредметГрафика ССЫЛКА Документ.ЗаказПоставщику
		|		ТОГДА ВЫРАЗИТЬ(ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
		|	КОГДА ПредметГрафика ССЫЛКА Документ.РеализацияТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
		|	КОГДА ПредметГрафика ССЫЛКА Документ.РеестрУступленныхДенежныхТребований
		|		ТОГДА ВЫРАЗИТЬ(ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
		|	ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|КОНЕЦ).ВидДоговораУХ  В (&ВидыДоговоровЛизинг)");
		
				
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовАккредитивыБанковскиеГарантии() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗадолженностьФакт",
		"ДоговорКонтрагента.ВидДоговораУХ  В (&ВидыДоговоровАккредитивыБанковскиеГарантии)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗадолженностьГрафики", 
		"(ВЫБОР
		|	КОГДА ПредметГрафика ССЫЛКА Справочник.ДоговорыКонтрагентов
		|		ТОГДА ВЫРАЗИТЬ(ПредметГрафика КАК Справочник.ДоговорыКонтрагентов)
		|	КОГДА ПредметГрафика ССЫЛКА Документ.ПриобретениеТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
		|	КОГДА ПредметГрафика ССЫЛКА Документ.ЗаказПоставщику
		|		ТОГДА ВЫРАЗИТЬ(ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
		|	КОГДА ПредметГрафика ССЫЛКА Документ.РеализацияТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
		|	КОГДА ПредметГрафика ССЫЛКА Документ.РеестрУступленныхДенежныхТребований
		|		ТОГДА ВЫРАЗИТЬ(ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
		|	ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|КОНЕЦ).ВидДоговораУХ  В (&ВидыДоговоровАккредитивыБанковскиеГарантии)");	
		
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовПроизводныеИструменты() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗадолженностьФакт",
		"ДоговорКонтрагента.ВидДоговораУХ  В (&ВидыДоговоровПроизводныеИструменты)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗадолженностьГрафики", 
		"(ВЫБОР
		|	КОГДА ПредметГрафика ССЫЛКА Справочник.ДоговорыКонтрагентов
		|		ТОГДА ВЫРАЗИТЬ(ПредметГрафика КАК Справочник.ДоговорыКонтрагентов)
		|	КОГДА ПредметГрафика ССЫЛКА Документ.ПриобретениеТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
		|	КОГДА ПредметГрафика ССЫЛКА Документ.ЗаказПоставщику
		|		ТОГДА ВЫРАЗИТЬ(ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
		|	КОГДА ПредметГрафика ССЫЛКА Документ.РеализацияТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
		|	КОГДА ПредметГрафика ССЫЛКА Документ.РеестрУступленныхДенежныхТребований
		|		ТОГДА ВЫРАЗИТЬ(ПредметГрафика.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов)
		|	ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|КОНЕЦ).ВидДоговораУХ  В (&ВидыДоговоровПроизводныеИструменты)");		
		
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовПривлечениеСредств() Тогда
		
		ИмяСправочникаДоговоры 		= ДоговорыКонтрагентовВстраиваниеУХКлиентСервер.ИмяСправочникаДоговорыКредитовДепозитов();
		
		ОтборТипОбъектаРасчетовФакт = СтрЗаменить(
		"РасчетыСКонтрагентамиФакт.ОбъектРасчетов ССЫЛКА Справочник.ДоговорыКонтрагентов
		|И РасчетыСКонтрагентамиФакт.ОбъектРасчетов.ВидДоговораУХ В ИЕРАРХИИ (Значение(Справочник.ВидыДоговоровКонтрагентовУХ.ПривлечениеСредств))",		
		"Справочник.ДоговорыКонтрагентов",
		"Справочник." + ИмяСправочникаДоговоры);
		ОтборТипОбъектаРасчетовЗадолженностьФакт = СтрЗаменить(
		"ОбъектРасчетов ССЫЛКА Справочник.ДоговорыКонтрагентов
		|И ОбъектРасчетов.ВидДоговораУХ В ИЕРАРХИИ (Значение(Справочник.ВидыДоговоровКонтрагентовУХ.ПривлечениеСредств))",
		"Справочник.ДоговорыКонтрагентов",
		"Справочник." + ИмяСправочникаДоговоры);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗадолженностьФакт", ОтборТипОбъектаРасчетовЗадолженностьФакт);
		
		ОтборТипОбъектаРасчетовЗадолженностьГрафики = СтрЗаменить(
		"ПредметГрафика ССЫЛКА Справочник.ДоговорыКонтрагентов
		|И ПредметГрафика.ВидДоговораУХ В ИЕРАРХИИ (Значение(Справочник.ВидыДоговоровКонтрагентовУХ.ПривлечениеСредств))",
		"Справочник.ДоговорыКонтрагентов",
		"Справочник." + ИмяСправочникаДоговоры);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗадолженностьГрафики", ОтборТипОбъектаРасчетовЗадолженностьГрафики);
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовРазмещениеСредств() Тогда
		
		ИмяСправочникаДоговоры 		= ДоговорыКонтрагентовВстраиваниеУХКлиентСервер.ИмяСправочникаДоговорыКредитовДепозитов();
		ОтборТипОбъектаРасчетовФакт = СтрЗаменить(
		"РасчетыСКонтрагентамиФакт.ОбъектРасчетов ССЫЛКА Справочник.ДоговорыКонтрагентов
		|И РасчетыСКонтрагентамиФакт.ОбъектРасчетов.ВидДоговораУХ В ИЕРАРХИИ (Значение(Справочник.ВидыДоговоровКонтрагентовУХ.РазмещениеСредств))",		
		"Справочник.ДоговорыКонтрагентов",
		"Справочник." + ИмяСправочникаДоговоры);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовФакт", ОтборТипОбъектаРасчетовФакт);
			
		ОтборТипОбъектаРасчетовЗадолженностьФакт = СтрЗаменить(
		"ОбъектРасчетов ССЫЛКА Справочник.ДоговорыКонтрагентов
		|И ОбъектРасчетов.ВидДоговораУХ В ИЕРАРХИИ (Значение(Справочник.ВидыДоговоровКонтрагентовУХ.РазмещениеСредств))",
		"Справочник.ДоговорыКонтрагентов",
		"Справочник." + ИмяСправочникаДоговоры);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗадолженностьФакт", ОтборТипОбъектаРасчетовЗадолженностьФакт);
		
		ОтборТипОбъектаРасчетовЗадолженностьГрафики = СтрЗаменить(
		"ПредметГрафика ССЫЛКА Справочник.ДоговорыКонтрагентов
		|И ПредметГрафика.ВидДоговораУХ В ИЕРАРХИИ (Значение(Справочник.ВидыДоговоровКонтрагентовУХ.РазмещениеСредств))",
		"Справочник.ДоговорыКонтрагентов",
		"Справочник." + ИмяСправочникаДоговоры);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗадолженностьГрафики", ОтборТипОбъектаРасчетовЗадолженностьГрафики);
			
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовЦенныеБумагиСобственные() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовФакт", 
		"РасчетыСКонтрагентамиФакт.ОбъектРасчетов ССЫЛКА Справочник.ЦенныеБумаги
		|И РасчетыСКонтрагентамиФакт.ОбъектРасчетов.Эмитент = РасчетыСКонтрагентамиФакт.Организация");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗадолженностьФакт", 
		"ОбъектРасчетов ССЫЛКА Справочник.ЦенныеБумаги
		|И ОбъектРасчетов.Эмитент = Организация");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗадолженностьГрафики", 
		"ПредметГрафика ССЫЛКА Справочник.ЦенныеБумаги
		|И ПредметГрафика.Эмитент = Организация");
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовЦенныеБумагиСторонние() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовФакт", 
		"РасчетыСКонтрагентамиФакт.ОбъектРасчетов ССЫЛКА Справочник.ЦенныеБумаги
		|И РасчетыСКонтрагентамиФакт.ОбъектРасчетов.Эмитент <> РасчетыСКонтрагентамиФакт.Организация");
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗадолженностьФакт", 
		"ОбъектРасчетов ССЫЛКА Справочник.ЦенныеБумаги
		|И ОбъектРасчетов.Эмитент <> Организация");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТипОбъектаРасчетовЗадолженностьГрафики", 
		"ПредметГрафика ССЫЛКА Справочник.ЦенныеБумаги
		|И ПредметГрафика.Эмитент <> Организация");
	КонецЕсли;

	Если ЗначениеЗаполнено(Ответственный)
		И Не (ТипОбъектовРасчетов = ТипОбъектаРасчетовЦенныеБумагиСобственные() Или ТипОбъектовРасчетов = ТипОбъектаРасчетовЦенныеБумагиСторонние())Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборОтветственныйЗадолженностьГрафики", "ЕСТЬNULL(ПредметГрафика.Ответственный, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) = &Ответственный");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборОтветственныйЗадолженностьФакт", 	"ЕСТЬNULL(ОбъектРасчетов.Ответственный, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) = &Ответственный");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборОрганизацияЗадолженность", 			"Организация = &Организация");
		
	КонецЕсли;

	Если ЗначениеЗаполнено(Контрагент) Тогда
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборКонтрагентЗадолженность", 			"Контрагент = &Контрагент");

	КонецЕсли;	
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаОбщий()
	Возврат " ВЫБРАТЬ
	|	ВТ_ЗадолженностьНесгруппированная.Организация КАК Организация,
	|	ВТ_ЗадолженностьНесгруппированная.Контрагент КАК Контрагент,
	|	ВТ_ЗадолженностьНесгруппированная.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ЗадолженностьНесгруппированная.ОбъектРасчетов КАК ОбъектРасчетов,
	|	СУММА(ВТ_ЗадолженностьНесгруппированная.КредиторскаяЗадолженностьГрафик) КАК КредиторскаяЗадолженностьГрафик,
	|	СУММА(ВТ_ЗадолженностьНесгруппированная.КредиторскаяЗадолженностьФакт) КАК КредиторскаяЗадолженностьФакт,
	|	СУММА(ВТ_ЗадолженностьНесгруппированная.КредиторскаяЗадолженностьФакт) - СУММА(ВТ_ЗадолженностьНесгруппированная.КредиторскаяЗадолженностьГрафик) КАК КредиторскаяЗадолженностьПросрочено,
	|	ВТ_ЗадолженностьНесгруппированная.Валюта КАК Валюта
	|ПОМЕСТИТЬ ВТ_ПросроченнаяЗадолженность
	|ИЗ
	|	ВТ_ЗадолженностьНесгруппированная КАК ВТ_ЗадолженностьНесгруппированная
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ЗадолженностьНесгруппированная.Организация,
	|	ВТ_ЗадолженностьНесгруппированная.Контрагент,
	|	ВТ_ЗадолженностьНесгруппированная.ДоговорКонтрагента,
	|	ВТ_ЗадолженностьНесгруппированная.ОбъектРасчетов,
	|	ВТ_ЗадолженностьНесгруппированная.Валюта
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТ_ЗадолженностьНесгруппированная.КредиторскаяЗадолженностьФакт) - СУММА(ВТ_ЗадолженностьНесгруппированная.КредиторскаяЗадолженностьГрафик) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗадолженностьНесгруппированная.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ЗадолженностьНесгруппированная.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВТ_ЗадолженностьНесгруппированная.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности,
	|	СУММА(ВТ_ЗадолженностьНесгруппированная.КредиторскаяЗадолженностьГрафик) КАК КредиторскаяЗадолженностьГрафик,
	|	СУММА(ВТ_ЗадолженностьНесгруппированная.КредиторскаяЗадолженностьФакт) КАК КредиторскаяЗадолженностьФакт,
	|	СУММА(ВТ_ЗадолженностьНесгруппированная.КредиторскаяЗадолженностьФакт) - СУММА(ВТ_ЗадолженностьНесгруппированная.КредиторскаяЗадолженностьГрафик) КАК КредиторскаяЗадолженностьПросрочено,
	|	СУММА(ВТ_ЗадолженностьНесгруппированная.КредиторскаяЗадолженностьФакт) - СУММА(ВТ_ЗадолженностьНесгруппированная.КредиторскаяЗадолженностьГрафик) > 0 КАК ЕстьПросрочка,
	|	ВТ_ЗадолженностьНесгруппированная.Валюта КАК Валюта
	|ИЗ
	|	ВТ_ЗадолженностьНесгруппированная КАК ВТ_ЗадолженностьНесгруппированная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПросроченнаяЗадолженность КАК ВТ_ПросроченнаяЗадолженность
	|		ПО ВТ_ЗадолженностьНесгруппированная.ОбъектРасчетов = ВТ_ПросроченнаяЗадолженность.ОбъектРасчетов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ЗадолженностьНесгруппированная.ДоговорКонтрагента,
	|	ВТ_ЗадолженностьНесгруппированная.ОбъектРасчетов,
	|	ВТ_ЗадолженностьНесгруппированная.ЭлементСтруктурыЗадолженности,
	|	ВТ_ЗадолженностьНесгруппированная.Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ЗадолженностьНесгруппированная.ЭлементСтруктурыЗадолженности.Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПросроченнаяЗадолженность.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ПросроченнаяЗадолженность.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВТ_ПросроченнаяЗадолженность.Валюта КАК Валюта,
	|	ВТ_ПросроченнаяЗадолженность.ОбъектРасчетов.ВидФинансовогоИнструмента КАК ВидФинансовогоИнструмента,
	|	ВТ_ПросроченнаяЗадолженность.Контрагент КАК Контрагент,
	|	ВТ_ПросроченнаяЗадолженность.Организация КАК Организация,
	|	ВТ_ПросроченнаяЗадолженность.КредиторскаяЗадолженностьГрафик КАК КредиторскаяЗадолженностьГрафик,
	|	ВТ_ПросроченнаяЗадолженность.КредиторскаяЗадолженностьФакт КАК КредиторскаяЗадолженностьФакт,
	|	ВТ_ПросроченнаяЗадолженность.КредиторскаяЗадолженностьПросрочено КАК КредиторскаяЗадолженностьПросрочено
	|ИЗ
	|	ВТ_ПросроченнаяЗадолженность КАК ВТ_ПросроченнаяЗадолженность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыРасчетаРасхождение.Организация КАК Организация,
	|	ОбъектыРасчетаРасхождение.Контрагент КАК Контрагент,
	|	ОбъектыРасчетаРасхождение.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ОбъектыРасчетаРасхождение.ОбъектРасчетов КАК ОбъектРасчетов,
	|	СУММА(ОбъектыРасчетаРасхождение.ФактЕстьОтклонениеПоДатамНачисление)  КАК ФактЕстьОтклонениеПоДатамНачисление,
	|	СУММА(ОбъектыРасчетаРасхождение.ФактЕстьОтклонениеПоДатамОплата)  КАК ФактЕстьОтклонениеПоДатамОплата,
	|	СУММА(ОбъектыРасчетаРасхождение.ФактЕстьОтклонениеПоСтатьямНачисление) КАК ФактЕстьОтклонениеПоСтатьямНачисление,
	|	СУММА(ОбъектыРасчетаРасхождение.ФактЕстьОтклонениеПоСтатьямОплата)  КАК ФактЕстьОтклонениеПоСтатьямОплата,
	|	СУММА(ОбъектыРасчетаРасхождение.ФактЕстьОтклонениеПоЭлементамНачисление) КАК ФактЕстьОтклонениеПоЭлементамНачисление,
	|	СУММА(ОбъектыРасчетаРасхождение.ФактЕстьОтклонениеПоЭлементамОплата)  КАК ФактЕстьОтклонениеПоЭлементамОплата,
	|	СУММА(ОбъектыРасчетаРасхождение.ФактЕстьОтклонениеСуммаНачисление) КАК ФактЕстьОтклонениеСуммаНачисление,
	|	СУММА(ОбъектыРасчетаРасхождение.ФактЕстьОтклонениеСуммаОплата) КАК ФактЕстьОтклонениеСуммаОплата,
	|	СУММА(ОбъектыРасчетаРасхождение.ПланЕстьОтклонениеПоДатамНачисление) - СУММА(ОбъектыРасчетаРасхождение.ПланЕстьОтклонениеСуммаНачисление) КАК ПланЕстьОтклонениеПоДатамНачисление,
	|	СУММА(ОбъектыРасчетаРасхождение.ПланЕстьОтклонениеПоДатамОплата) - СУММА(ОбъектыРасчетаРасхождение.ПланЕстьОтклонениеСуммаОплата) КАК ПланЕстьОтклонениеПоДатамОплата,
	|	СУММА(ОбъектыРасчетаРасхождение.ПланЕстьОтклонениеПоСтатьямНачисление) - СУММА(ОбъектыРасчетаРасхождение.ПланЕстьОтклонениеСуммаНачисление) КАК ПланЕстьОтклонениеПоСтатьямНачисление,
	|	СУММА(ОбъектыРасчетаРасхождение.ПланЕстьОтклонениеПоСтатьямОплата) - СУММА(ОбъектыРасчетаРасхождение.ПланЕстьОтклонениеСуммаОплата) КАК ПланЕстьОтклонениеПоСтатьямОплата,
	|	СУММА(ОбъектыРасчетаРасхождение.ПланЕстьОтклонениеПоЭлементамНачисление) - СУММА(ОбъектыРасчетаРасхождение.ПланЕстьОтклонениеСуммаНачисление) КАК ПланЕстьОтклонениеПоЭлементамНачисление,
	|	СУММА(ОбъектыРасчетаРасхождение.ПланЕстьОтклонениеПоЭлементамОплата) - СУММА(ОбъектыРасчетаРасхождение.ПланЕстьОтклонениеСуммаОплата) КАК ПланЕстьОтклонениеПоЭлементамОплата,
	|	СУММА(ОбъектыРасчетаРасхождение.ПланЕстьОтклонениеСуммаНачисление) КАК ПланЕстьОтклонениеСуммаНачисление,
	|	СУММА(ОбъектыРасчетаРасхождение.ПланЕстьОтклонениеСуммаОплата) КАК ПланЕстьОтклонениеСуммаОплата
	|ПОМЕСТИТЬ ВТ_РасхожденияОбщая
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ИсходныеДанные.Организация КАК Организация,
	|		ВТ_ИсходныеДанные.Контрагент КАК Контрагент,
	|		ВТ_ИсходныеДанные.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		ВТ_ИсходныеДанные.ОбъектРасчетов КАК ОбъектРасчетов,
	|		ВЫБОР
	|			КОГДА СУММА(ВТ_ИсходныеДанные.НачислениеГрафикФакт) > СУММА(ВТ_ИсходныеДанные.НачислениеФакт)
	|				ТОГДА СУММА(ВТ_ИсходныеДанные.НачислениеГрафикФакт) - СУММА(ВТ_ИсходныеДанные.НачислениеФакт)
	|			ИНАЧЕ СУММА(ВТ_ИсходныеДанные.НачислениеФакт) - СУММА(ВТ_ИсходныеДанные.НачислениеГрафикФакт)
	|		КОНЕЦ КАК ФактЕстьОтклонениеПоДатамНачисление,
	|		ВЫБОР
	|			КОГДА СУММА(ВТ_ИсходныеДанные.ОплатаГрафикФакт) > СУММА(ВТ_ИсходныеДанные.ОплатаФакт)
	|				ТОГДА СУММА(ВТ_ИсходныеДанные.ОплатаГрафикФакт) - СУММА(ВТ_ИсходныеДанные.ОплатаФакт)
	|			ИНАЧЕ СУММА(ВТ_ИсходныеДанные.ОплатаФакт) - СУММА(ВТ_ИсходныеДанные.ОплатаГрафикФакт)
	|		КОНЕЦ КАК ФактЕстьОтклонениеПоДатамОплата,
	|		0 КАК ФактЕстьОтклонениеПоСтатьямНачисление,
	|		0 КАК ФактЕстьОтклонениеПоСтатьямОплата,
	|		0 КАК ФактЕстьОтклонениеПоЭлементамНачисление,
	|		0 КАК ФактЕстьОтклонениеПоЭлементамОплата,
	|		0 КАК ФактЕстьОтклонениеСуммаНачисление,
	|		0 КАК ФактЕстьОтклонениеСуммаОплата,
	|		ВЫБОР
	|			КОГДА СУММА(ВТ_ИсходныеДанные.НачислениеГрафикПлан) > СУММА(ВТ_ИсходныеДанные.НачислениеЗаявлено)
	|				ТОГДА СУММА(ВТ_ИсходныеДанные.НачислениеГрафикПлан) - СУММА(ВТ_ИсходныеДанные.НачислениеЗаявлено)
	|			ИНАЧЕ СУММА(ВТ_ИсходныеДанные.НачислениеЗаявлено) - СУММА(ВТ_ИсходныеДанные.НачислениеГрафикПлан)
	|		КОНЕЦ КАК ПланЕстьОтклонениеПоДатамНачисление,
	|		ВЫБОР
	|			КОГДА СУММА(ВТ_ИсходныеДанные.ОплатаГрафикПлан) > СУММА(ВТ_ИсходныеДанные.ОплатаЗаявлено)
	|				ТОГДА СУММА(ВТ_ИсходныеДанные.ОплатаГрафикПлан) - СУММА(ВТ_ИсходныеДанные.ОплатаЗаявлено)
	|			ИНАЧЕ СУММА(ВТ_ИсходныеДанные.ОплатаЗаявлено) - СУММА(ВТ_ИсходныеДанные.ОплатаГрафикПлан)
	|		КОНЕЦ КАК ПланЕстьОтклонениеПоДатамОплата,
	|		0 КАК ПланЕстьОтклонениеПоСтатьямНачисление,
	|		0 КАК ПланЕстьОтклонениеПоСтатьямОплата,
	|		0 КАК ПланЕстьОтклонениеПоЭлементамНачисление,
	|		0 КАК ПланЕстьОтклонениеПоЭлементамОплата,
	|		0 КАК ПланЕстьОтклонениеСуммаНачисление,
	|		0 КАК ПланЕстьОтклонениеСуммаОплата
	|	ИЗ
	|		ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ_ИсходныеДанные.Дата,
	|		ВТ_ИсходныеДанные.ДоговорКонтрагента,
	|		ВТ_ИсходныеДанные.ОбъектРасчетов,
	|		ВТ_ИсходныеДанные.Организация,
	|		ВТ_ИсходныеДанные.Контрагент
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ВТ_ИсходныеДанные.НачислениеГрафикФакт) <> СУММА(ВТ_ИсходныеДанные.НачислениеФакт)
	|			ИЛИ СУММА(ВТ_ИсходныеДанные.ОплатаГрафикФакт) <> СУММА(ВТ_ИсходныеДанные.ОплатаФакт)
	|			ИЛИ СУММА(ВТ_ИсходныеДанные.НачислениеГрафикПлан) <> СУММА(ВТ_ИсходныеДанные.НачислениеЗаявлено)
	|			ИЛИ СУММА(ВТ_ИсходныеДанные.ОплатаЗаявлено) <> СУММА(ВТ_ИсходныеДанные.ОплатаГрафикПлан))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_ИсходныеДанные.Организация,
	|		ВТ_ИсходныеДанные.Контрагент,
	|		ВТ_ИсходныеДанные.ДоговорКонтрагента,
	|		ВТ_ИсходныеДанные.ОбъектРасчетов,
	|		0,
	|		0,
	|		ВЫБОР
	|			КОГДА СУММА(ВТ_ИсходныеДанные.НачислениеГрафикФакт) > СУММА(ВТ_ИсходныеДанные.НачислениеФакт)
	|				ТОГДА СУММА(ВТ_ИсходныеДанные.НачислениеГрафикФакт) - СУММА(ВТ_ИсходныеДанные.НачислениеФакт)
	|			ИНАЧЕ СУММА(ВТ_ИсходныеДанные.НачислениеФакт) - СУММА(ВТ_ИсходныеДанные.НачислениеГрафикФакт)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВТ_ИсходныеДанные.ОплатаГрафикФакт) > СУММА(ВТ_ИсходныеДанные.ОплатаФакт)
	|				ТОГДА СУММА(ВТ_ИсходныеДанные.ОплатаГрафикФакт) - СУММА(ВТ_ИсходныеДанные.ОплатаФакт)
	|			ИНАЧЕ СУММА(ВТ_ИсходныеДанные.ОплатаФакт) - СУММА(ВТ_ИсходныеДанные.ОплатаГрафикФакт)
	|		КОНЕЦ,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ВЫБОР
	|			КОГДА СУММА(ВТ_ИсходныеДанные.НачислениеГрафикПлан) > СУММА(ВТ_ИсходныеДанные.НачислениеЗаявлено)
	|				ТОГДА СУММА(ВТ_ИсходныеДанные.НачислениеГрафикПлан) - СУММА(ВТ_ИсходныеДанные.НачислениеЗаявлено)
	|			ИНАЧЕ СУММА(ВТ_ИсходныеДанные.НачислениеЗаявлено) - СУММА(ВТ_ИсходныеДанные.НачислениеГрафикПлан)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВТ_ИсходныеДанные.ОплатаГрафикПлан) > СУММА(ВТ_ИсходныеДанные.ОплатаЗаявлено)
	|				ТОГДА СУММА(ВТ_ИсходныеДанные.ОплатаГрафикПлан) - СУММА(ВТ_ИсходныеДанные.ОплатаЗаявлено)
	|			ИНАЧЕ СУММА(ВТ_ИсходныеДанные.ОплатаЗаявлено) - СУММА(ВТ_ИсходныеДанные.ОплатаГрафикПлан)
	|		КОНЕЦ,
	|		0,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ_ИсходныеДанные.СтатьяБюджета,
	|		ВТ_ИсходныеДанные.ОбъектРасчетов,
	|		ВТ_ИсходныеДанные.Организация,
	|		ВТ_ИсходныеДанные.Контрагент,
	|		ВТ_ИсходныеДанные.ДоговорКонтрагента
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ВТ_ИсходныеДанные.НачислениеГрафикФакт) <> СУММА(ВТ_ИсходныеДанные.НачислениеФакт)
	|			ИЛИ СУММА(ВТ_ИсходныеДанные.ОплатаГрафикФакт) <> СУММА(ВТ_ИсходныеДанные.ОплатаФакт)
	|			ИЛИ СУММА(ВТ_ИсходныеДанные.НачислениеГрафикПлан) <> СУММА(ВТ_ИсходныеДанные.НачислениеЗаявлено)
	|			ИЛИ СУММА(ВТ_ИсходныеДанные.ОплатаЗаявлено) <> СУММА(ВТ_ИсходныеДанные.ОплатаГрафикПлан))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_ИсходныеДанные.Организация,
	|		ВТ_ИсходныеДанные.Контрагент,
	|		ВТ_ИсходныеДанные.ДоговорКонтрагента,
	|		ВТ_ИсходныеДанные.ОбъектРасчетов,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ВЫБОР
	|			КОГДА СУММА(ВТ_ИсходныеДанные.НачислениеГрафикФакт) > СУММА(ВТ_ИсходныеДанные.НачислениеФакт)
	|				ТОГДА СУММА(ВТ_ИсходныеДанные.НачислениеГрафикФакт) - СУММА(ВТ_ИсходныеДанные.НачислениеФакт)
	|			ИНАЧЕ СУММА(ВТ_ИсходныеДанные.НачислениеФакт) - СУММА(ВТ_ИсходныеДанные.НачислениеГрафикФакт)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВТ_ИсходныеДанные.ОплатаГрафикФакт) > СУММА(ВТ_ИсходныеДанные.ОплатаФакт)
	|				ТОГДА СУММА(ВТ_ИсходныеДанные.ОплатаГрафикФакт) - СУММА(ВТ_ИсходныеДанные.ОплатаФакт)
	|			ИНАЧЕ СУММА(ВТ_ИсходныеДанные.ОплатаФакт) - СУММА(ВТ_ИсходныеДанные.ОплатаГрафикФакт)
	|		КОНЕЦ,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ВЫБОР
	|			КОГДА СУММА(ВТ_ИсходныеДанные.НачислениеГрафикПлан) > СУММА(ВТ_ИсходныеДанные.НачислениеЗаявлено)
	|				ТОГДА СУММА(ВТ_ИсходныеДанные.НачислениеГрафикПлан) - СУММА(ВТ_ИсходныеДанные.НачислениеЗаявлено)
	|			ИНАЧЕ СУММА(ВТ_ИсходныеДанные.НачислениеЗаявлено) - СУММА(ВТ_ИсходныеДанные.НачислениеГрафикПлан)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВТ_ИсходныеДанные.ОплатаГрафикПлан) > СУММА(ВТ_ИсходныеДанные.ОплатаЗаявлено)
	|				ТОГДА СУММА(ВТ_ИсходныеДанные.ОплатаГрафикПлан) - СУММА(ВТ_ИсходныеДанные.ОплатаЗаявлено)
	|			ИНАЧЕ СУММА(ВТ_ИсходныеДанные.ОплатаЗаявлено) - СУММА(ВТ_ИсходныеДанные.ОплатаГрафикПлан)
	|		КОНЕЦ,
	|		0,
	|		0
	|	ИЗ
	|		ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ_ИсходныеДанные.ЭлементСтруктурыЗадолженности,
	|		ВТ_ИсходныеДанные.ОбъектРасчетов,
	|		ВТ_ИсходныеДанные.Организация,
	|		ВТ_ИсходныеДанные.Контрагент,
	|		ВТ_ИсходныеДанные.ДоговорКонтрагента
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ВТ_ИсходныеДанные.НачислениеГрафикФакт) <> СУММА(ВТ_ИсходныеДанные.НачислениеФакт)
	|			ИЛИ СУММА(ВТ_ИсходныеДанные.ОплатаГрафикФакт) <> СУММА(ВТ_ИсходныеДанные.ОплатаФакт)
	|			ИЛИ СУММА(ВТ_ИсходныеДанные.НачислениеГрафикПлан) <> СУММА(ВТ_ИсходныеДанные.НачислениеЗаявлено)
	|			ИЛИ СУММА(ВТ_ИсходныеДанные.ОплатаГрафикПлан) <> СУММА(ВТ_ИсходныеДанные.ОплатаЗаявлено))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_ИсходныеДанные.Организация,
	|		ВТ_ИсходныеДанные.Контрагент,
	|		ВТ_ИсходныеДанные.ДоговорКонтрагента,
	|		ВТ_ИсходныеДанные.ОбъектРасчетов,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ВЫБОР
	|			КОГДА СУММА(ВТ_ИсходныеДанные.НачислениеГрафикФакт) > СУММА(ВТ_ИсходныеДанные.НачислениеФакт)
	|				ТОГДА СУММА(ВТ_ИсходныеДанные.НачислениеГрафикФакт) - СУММА(ВТ_ИсходныеДанные.НачислениеФакт)
	|			ИНАЧЕ СУММА(ВТ_ИсходныеДанные.НачислениеФакт) - СУММА(ВТ_ИсходныеДанные.НачислениеГрафикФакт)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВТ_ИсходныеДанные.ОплатаГрафикФакт) > СУММА(ВТ_ИсходныеДанные.ОплатаФакт)
	|				ТОГДА СУММА(ВТ_ИсходныеДанные.ОплатаГрафикФакт) - СУММА(ВТ_ИсходныеДанные.ОплатаФакт)
	|			ИНАЧЕ СУММА(ВТ_ИсходныеДанные.ОплатаФакт) - СУММА(ВТ_ИсходныеДанные.ОплатаГрафикФакт)
	|		КОНЕЦ,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ВЫБОР
	|			КОГДА СУММА(ВТ_ИсходныеДанные.НачислениеГрафикПлан) > СУММА(ВТ_ИсходныеДанные.НачислениеЗаявлено)
	|				ТОГДА СУММА(ВТ_ИсходныеДанные.НачислениеГрафикПлан) - СУММА(ВТ_ИсходныеДанные.НачислениеЗаявлено)
	|			ИНАЧЕ СУММА(ВТ_ИсходныеДанные.НачислениеЗаявлено) - СУММА(ВТ_ИсходныеДанные.НачислениеГрафикПлан)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВТ_ИсходныеДанные.ОплатаГрафикПлан) > СУММА(ВТ_ИсходныеДанные.ОплатаЗаявлено)
	|				ТОГДА СУММА(ВТ_ИсходныеДанные.ОплатаГрафикПлан) - СУММА(ВТ_ИсходныеДанные.ОплатаЗаявлено)
	|			ИНАЧЕ СУММА(ВТ_ИсходныеДанные.ОплатаЗаявлено) - СУММА(ВТ_ИсходныеДанные.ОплатаГрафикПлан)
	|		КОНЕЦ
	|	ИЗ
	|		ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ_ИсходныеДанные.ОбъектРасчетов,
	|		ВТ_ИсходныеДанные.Организация,
	|		ВТ_ИсходныеДанные.Контрагент,
	|		ВТ_ИсходныеДанные.ДоговорКонтрагента
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ВТ_ИсходныеДанные.НачислениеГрафикФакт) <> СУММА(ВТ_ИсходныеДанные.НачислениеФакт)
	|			ИЛИ СУММА(ВТ_ИсходныеДанные.ОплатаГрафикФакт) <> СУММА(ВТ_ИсходныеДанные.ОплатаФакт)
	|			ИЛИ СУММА(ВТ_ИсходныеДанные.НачислениеГрафикПлан) <> СУММА(ВТ_ИсходныеДанные.НачислениеЗаявлено)
	|			ИЛИ СУММА(ВТ_ИсходныеДанные.ОплатаЗаявлено) <> СУММА(ВТ_ИсходныеДанные.ОплатаГрафикПлан))) КАК ОбъектыРасчетаРасхождение
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыРасчетаРасхождение.Организация,
	|	ОбъектыРасчетаРасхождение.Контрагент,
	|	ОбъектыРасчетаРасхождение.ДоговорКонтрагента,
	|	ОбъектыРасчетаРасхождение.ОбъектРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РасхожденияОбщая.Организация КАК Организация,
	|	ВТ_РасхожденияОбщая.Контрагент КАК Контрагент,
	|	ВТ_РасхожденияОбщая.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_РасхожденияОбщая.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВТ_РасхожденияОбщая.ФактЕстьОтклонениеПоДатамНачисление КАК ФактЕстьОтклонениеПоДатамНачисление,
	|	ВТ_РасхожденияОбщая.ФактЕстьОтклонениеПоДатамОплата КАК ФактЕстьОтклонениеПоДатамОплата,
	|	ВТ_РасхожденияОбщая.ФактЕстьОтклонениеПоСтатьямНачисление КАК ФактЕстьОтклонениеПоСтатьямНачисление,
	|	ВТ_РасхожденияОбщая.ФактЕстьОтклонениеПоСтатьямОплата КАК ФактЕстьОтклонениеПоСтатьямОплата,
	|	ВТ_РасхожденияОбщая.ФактЕстьОтклонениеПоЭлементамНачисление КАК ФактЕстьОтклонениеПоЭлементамНачисление,
	|	ВТ_РасхожденияОбщая.ФактЕстьОтклонениеПоЭлементамОплата КАК ФактЕстьОтклонениеПоЭлементамОплата,
	|	ВТ_РасхожденияОбщая.ФактЕстьОтклонениеСуммаНачисление КАК ФактЕстьОтклонениеСуммаНачисление,
	|	ВТ_РасхожденияОбщая.ФактЕстьОтклонениеСуммаОплата КАК ФактЕстьОтклонениеСуммаОплата
	|ПОМЕСТИТЬ ВТ_РасхожденияСФактом
	|ИЗ
	|	ВТ_РасхожденияОбщая КАК ВТ_РасхожденияОбщая
	|ГДЕ
	|	(ВТ_РасхожденияОбщая.ФактЕстьОтклонениеПоДатамНачисление <> 0
	|			ИЛИ ВТ_РасхожденияОбщая.ФактЕстьОтклонениеПоДатамОплата <> 0
	|			ИЛИ ВТ_РасхожденияОбщая.ФактЕстьОтклонениеПоСтатьямНачисление <> 0
	|			ИЛИ ВТ_РасхожденияОбщая.ФактЕстьОтклонениеПоСтатьямОплата <> 0
	|			ИЛИ ВТ_РасхожденияОбщая.ФактЕстьОтклонениеПоЭлементамНачисление <> 0
	|			ИЛИ ВТ_РасхожденияОбщая.ФактЕстьОтклонениеПоЭлементамОплата <> 0
	|			ИЛИ ВТ_РасхожденияОбщая.ФактЕстьОтклонениеСуммаНачисление <> 0
	|			ИЛИ ВТ_РасхожденияОбщая.ФактЕстьОтклонениеСуммаОплата <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИсходныеДанные.Организация КАК Организация,
	|	ВТ_ИсходныеДанные.Контрагент КАК Контрагент,
	|	ВТ_ИсходныеДанные.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ИсходныеДанные.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВТ_ИсходныеДанные.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности,
	|	ВТ_ИсходныеДанные.Валюта КАК Валюта,
	|	ВТ_ИсходныеДанные.СтатьяБюджета КАК СтатьяБюджета,
	|	ВТ_ИсходныеДанные.ПриходРасход КАК ПриходРасход,
	|	ВТ_ИсходныеДанные.Дата КАК Дата,
	|	ВТ_ИсходныеДанные.Ответственный КАК Ответственный,
	|	СУММА(ВТ_ИсходныеДанные.НачислениеГрафикФакт) КАК НачислениеГрафик,
	|	СУММА(ВТ_ИсходныеДанные.ОплатаГрафикФакт) КАК ОплатаГрафик,
	|	СУММА(ВТ_ИсходныеДанные.НачислениеФакт) КАК НачислениеФакт,
	|	СУММА(ВТ_ИсходныеДанные.ОплатаФакт) КАК ОплатаФакт,
	|	ВТ_ИсходныеДанные.Документ КАК Документ
	|ИЗ
	|	ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РасхожденияСФактом КАК ВТ_РасхожденияСФактом
	|		ПО ВТ_ИсходныеДанные.Организация = ВТ_РасхожденияСФактом.Организация
	|			И ВТ_ИсходныеДанные.Контрагент = ВТ_РасхожденияСФактом.Контрагент
	|			И ВТ_ИсходныеДанные.ДоговорКонтрагента = ВТ_РасхожденияСФактом.ДоговорКонтрагента
	|			И ВТ_ИсходныеДанные.ОбъектРасчетов = ВТ_РасхожденияСФактом.ОбъектРасчетов
	|			И (ВТ_ИсходныеДанные.НачислениеГрафикФакт <> 0
	|				ИЛИ ВТ_ИсходныеДанные.ОплатаГрафикФакт <> 0
	|				ИЛИ ВТ_ИсходныеДанные.НачислениеФакт <> 0
	|				ИЛИ ВТ_ИсходныеДанные.ОплатаФакт <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ИсходныеДанные.Ответственный,
	|	ВТ_ИсходныеДанные.Организация,
	|	ВТ_ИсходныеДанные.Документ,
	|	ВТ_ИсходныеДанные.Контрагент,
	|	ВТ_ИсходныеДанные.ДоговорКонтрагента,
	|	ВТ_ИсходныеДанные.ОбъектРасчетов,
	|	ВТ_ИсходныеДанные.Дата,
	|	ВТ_ИсходныеДанные.Валюта,
	|	ВТ_ИсходныеДанные.ПриходРасход,
	|	ВТ_ИсходныеДанные.ЭлементСтруктурыЗадолженности,
	|	ВТ_ИсходныеДанные.СтатьяБюджета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РасхожденияСФактом.Организация КАК Организация,
	|	ВТ_РасхожденияСФактом.Контрагент КАК Контрагент,
	|	ВТ_РасхожденияСФактом.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_РасхожденияСФактом.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВТ_РасхожденияСФактом.ФактЕстьОтклонениеПоДатамНачисление КАК ОтклонениеПоДатамНачисление,
	|	ВТ_РасхожденияСФактом.ФактЕстьОтклонениеПоДатамОплата КАК ОтклонениеПоДатамОплата,
	|	ВТ_РасхожденияСФактом.ФактЕстьОтклонениеПоСтатьямНачисление КАК ОтклонениеПоСтатьямНачисление,
	|	ВТ_РасхожденияСФактом.ФактЕстьОтклонениеПоСтатьямОплата КАК ОтклонениеПоСтатьямОплата,
	|	ВТ_РасхожденияСФактом.ФактЕстьОтклонениеПоЭлементамНачисление КАК ОтклонениеПоЭлементамНачисление,
	|	ВТ_РасхожденияСФактом.ФактЕстьОтклонениеПоЭлементамОплата КАК ОтклонениеПоЭлементамОплата,
	|	ВТ_РасхожденияСФактом.ФактЕстьОтклонениеСуммаНачисление КАК ОтклонениеСуммаНачисление,
	|	ВТ_РасхожденияСФактом.ФактЕстьОтклонениеСуммаОплата КАК ОтклонениеСуммаОплата
	|ИЗ
	|	ВТ_РасхожденияСФактом КАК ВТ_РасхожденияСФактом
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РасхожденияОбщая.Организация КАК Организация,
	|	ВТ_РасхожденияОбщая.Контрагент КАК Контрагент,
	|	ВТ_РасхожденияОбщая.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_РасхожденияОбщая.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВТ_РасхожденияОбщая.ПланЕстьОтклонениеПоДатамНачисление КАК ПланЕстьОтклонениеПоДатамНачисление,
	|	ВТ_РасхожденияОбщая.ПланЕстьОтклонениеПоДатамОплата КАК ПланЕстьОтклонениеПоДатамОплата,
	|	ВТ_РасхожденияОбщая.ПланЕстьОтклонениеПоСтатьямНачисление КАК ПланЕстьОтклонениеПоСтатьямНачисление,
	|	ВТ_РасхожденияОбщая.ПланЕстьОтклонениеПоСтатьямОплата КАК ПланЕстьОтклонениеПоСтатьямОплата,
	|	ВТ_РасхожденияОбщая.ПланЕстьОтклонениеПоЭлементамНачисление КАК ПланЕстьОтклонениеПоЭлементамНачисление,
	|	ВТ_РасхожденияОбщая.ПланЕстьОтклонениеПоЭлементамОплата КАК ПланЕстьОтклонениеПоЭлементамОплата,
	|	ВТ_РасхожденияОбщая.ПланЕстьОтклонениеСуммаНачисление КАК ПланЕстьОтклонениеСуммаНачисление,
	|	ВТ_РасхожденияОбщая.ПланЕстьОтклонениеСуммаОплата КАК ПланЕстьОтклонениеСуммаОплата
	|ПОМЕСТИТЬ ВТ_РасхожденияСЗаявками
	|ИЗ
	|	ВТ_РасхожденияОбщая КАК ВТ_РасхожденияОбщая
	|ГДЕ
	|	(ВТ_РасхожденияОбщая.ПланЕстьОтклонениеПоДатамНачисление <> 0
	|			ИЛИ ВТ_РасхожденияОбщая.ПланЕстьОтклонениеПоДатамОплата <> 0
	|			ИЛИ ВТ_РасхожденияОбщая.ПланЕстьОтклонениеПоСтатьямНачисление <> 0
	|			ИЛИ ВТ_РасхожденияОбщая.ПланЕстьОтклонениеПоСтатьямОплата <> 0
	|			ИЛИ ВТ_РасхожденияОбщая.ПланЕстьОтклонениеПоЭлементамНачисление <> 0
	|			ИЛИ ВТ_РасхожденияОбщая.ПланЕстьОтклонениеПоЭлементамОплата <> 0
	|			ИЛИ ВТ_РасхожденияОбщая.ПланЕстьОтклонениеСуммаНачисление <> 0
	|			ИЛИ ВТ_РасхожденияОбщая.ПланЕстьОтклонениеСуммаОплата <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИсходныеДанные.Организация КАК Организация,
	|	ВТ_ИсходныеДанные.Контрагент КАК Контрагент,
	|	ВТ_ИсходныеДанные.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ИсходныеДанные.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВТ_ИсходныеДанные.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности,
	|	ВТ_ИсходныеДанные.Валюта КАК Валюта,
	|	ВТ_ИсходныеДанные.СтатьяБюджета КАК СтатьяБюджета,
	|	ВТ_ИсходныеДанные.ПриходРасход КАК ПриходРасход,
	|	ВТ_ИсходныеДанные.Дата КАК Дата,
	|	ВТ_ИсходныеДанные.Ответственный КАК Ответственный,
	|	СУММА(ВТ_ИсходныеДанные.НачислениеГрафикПлан) КАК НачислениеГрафик,
	|	СУММА(ВТ_ИсходныеДанные.ОплатаГрафикПлан) КАК ОплатаГрафик,
	|	СУММА(ВТ_ИсходныеДанные.НачислениеЗаявлено) КАК НачислениеЗаявлено,
	|	СУММА(ВТ_ИсходныеДанные.ОплатаЗаявлено) КАК ОплатаЗаявлено,
	|	ВТ_ИсходныеДанные.Документ КАК Документ
	|ИЗ
	|	ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РасхожденияСЗаявками КАК ВТ_РасхожденияСЗаявками
	|		ПО ВТ_ИсходныеДанные.Организация = ВТ_РасхожденияСЗаявками.Организация
	|			И ВТ_ИсходныеДанные.Контрагент = ВТ_РасхожденияСЗаявками.Контрагент
	|			И ВТ_ИсходныеДанные.ДоговорКонтрагента = ВТ_РасхожденияСЗаявками.ДоговорКонтрагента
	|			И ВТ_ИсходныеДанные.ОбъектРасчетов = ВТ_РасхожденияСЗаявками.ОбъектРасчетов
	|			И (ВТ_ИсходныеДанные.НачислениеГрафикПлан <> 0
	|				ИЛИ ВТ_ИсходныеДанные.ОплатаГрафикПлан <> 0
	|				ИЛИ ВТ_ИсходныеДанные.НачислениеЗаявлено <> 0
	|				ИЛИ ВТ_ИсходныеДанные.ОплатаЗаявлено <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ИсходныеДанные.Организация,
	|	ВТ_ИсходныеДанные.Документ,
	|	ВТ_ИсходныеДанные.Ответственный,
	|	ВТ_ИсходныеДанные.ОбъектРасчетов,
	|	ВТ_ИсходныеДанные.СтатьяБюджета,
	|	ВТ_ИсходныеДанные.Валюта,
	|	ВТ_ИсходныеДанные.Контрагент,
	|	ВТ_ИсходныеДанные.ДоговорКонтрагента,
	|	ВТ_ИсходныеДанные.ЭлементСтруктурыЗадолженности,
	|	ВТ_ИсходныеДанные.Дата,
	|	ВТ_ИсходныеДанные.ПриходРасход
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РасхожденияСЗаявками.Организация КАК Организация,
	|	ВТ_РасхожденияСЗаявками.Контрагент КАК Контрагент,
	|	ВТ_РасхожденияСЗаявками.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_РасхожденияСЗаявками.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВТ_РасхожденияСЗаявками.ПланЕстьОтклонениеПоДатамНачисление КАК ОтклонениеПоДатамНачисление,
	|	ВТ_РасхожденияСЗаявками.ПланЕстьОтклонениеПоДатамОплата КАК ОтклонениеПоДатамОплата,
	|	ВТ_РасхожденияСЗаявками.ПланЕстьОтклонениеПоСтатьямНачисление КАК ОтклонениеПоСтатьямНачисление,
	|	ВТ_РасхожденияСЗаявками.ПланЕстьОтклонениеПоСтатьямОплата КАК ОтклонениеПоСтатьямОплата,
	|	ВТ_РасхожденияСЗаявками.ПланЕстьОтклонениеПоЭлементамНачисление КАК ОтклонениеПоЭлементамНачисление,
	|	ВТ_РасхожденияСЗаявками.ПланЕстьОтклонениеПоЭлементамОплата КАК ОтклонениеПоЭлементамОплата,
	|	ВТ_РасхожденияСЗаявками.ПланЕстьОтклонениеСуммаНачисление КАК ОтклонениеСуммаНачисление,
	|	ВТ_РасхожденияСЗаявками.ПланЕстьОтклонениеСуммаОплата КАК ОтклонениеСуммаОплата
	|ИЗ
	|	ВТ_РасхожденияСЗаявками КАК ВТ_РасхожденияСЗаявками
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИсходныеДанные.Организация КАК Организация,
	|	ВТ_ИсходныеДанные.Контрагент КАК Контрагент,
	|	ВТ_ИсходныеДанные.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ИсходныеДанные.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВТ_ИсходныеДанные.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности,
	|	ВТ_ИсходныеДанные.Валюта КАК Валюта,
	|	ВТ_ИсходныеДанные.СтатьяБюджета КАК СтатьяБюджета,
	|	ВТ_ИсходныеДанные.ПриходРасход КАК ПриходРасход,
	|	ВТ_ИсходныеДанные.Дата КАК Дата,
	|	ВТ_ИсходныеДанные.Ответственный КАК Ответственный,
	|	ВТ_ИсходныеДанные.НачислениеПросроченныеЗаявки КАК СуммаНачисление,
	|	ВТ_ИсходныеДанные.ОплатаПросроченныеЗаявки КАК СуммаОплата,
	|	ВТ_ИсходныеДанные.Документ КАК Документ
	|ИЗ
	|	ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	|ГДЕ
	|	(ВТ_ИсходныеДанные.НачислениеПросроченныеЗаявки <> 0
	|			ИЛИ ВТ_ИсходныеДанные.ОплатаПросроченныеЗаявки <> 0)
	|	И ВТ_ИсходныеДанные.Организация <> Значение(Справочник.Организации.ПустаяСсылка)";
	
	
КонецФункции

&НаСервере
Функция ТекстРазделителяОбъединения()
	 
	Возврат Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;

КонецФункции // ()


&НаСервере
Процедура ОбновитьДанные()
	
	Запрос 					= Новый Запрос;
	МассивЗапросовИсходный 	= Новый Массив;
	МассивЗапросовИсходный.Добавить(ТекстЗапросаГрафики());
	МассивЗапросовИсходный.Добавить(ТекстЗапросаЗаявки());
	МассивЗапросовИсходный.Добавить(ТекстЗапросаРасчетФакт());
	МассивЗапросовИсходный.Добавить(ТекстЗапросаОперативныйПлан());
	СтрокаЗапросаИсходная = СтрСоединить(МассивЗапросовИсходный,ТекстРазделителяОбъединения());
	
	ТекстЗапросов = Новый Массив;
	ТекстЗапросов.Добавить(СтрокаЗапросаИсходная);
	ТекстЗапросов.Добавить(ТекстЗапросаЗадолженности());
	ТекстЗапросов.Добавить(ТекстЗапросаОбщий());
	
	Запрос.Текст	= СтрСоединить(ТекстЗапросов, ОбщегоНазначенияОПК.ТекстРазделителяЗапросовПакета());

	ИмяРеквизитаВалютаЗаявки = ЗаявкиНаОперации.ИмяРеквизитаВалютаДокумента(
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка());
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаявкаНаОперацию.ВалютаДокумента", "ЗаявкаНаОперацию." + ИмяРеквизитаВалютаЗаявки);
	
	ОписаниеТаблицЗапроса = Новый Массив;
	ОписаниеТаблицЗапроса.Добавить("ВТ_ИсходныеДанные");
	ОписаниеТаблицЗапроса.Добавить("ВТ_ЗадолженностьНесгруппированная");
	ОписаниеТаблицЗапроса.Добавить("ВТ_ПросроченнаяЗадолженность");
	ОписаниеТаблицЗапроса.Добавить(Объект.ПросроченнаяЗадолженностьСтруктура);
	ОписаниеТаблицЗапроса.Добавить(Объект.ПросроченнаяЗадолженность);
	ОписаниеТаблицЗапроса.Добавить("ВТ_РасхожденияОбщая");
	ОписаниеТаблицЗапроса.Добавить("ВТ_РасхожденияСФактом");
	ОписаниеТаблицЗапроса.Добавить(РасхождениеСФактомДетализацияПолная);
	ОписаниеТаблицЗапроса.Добавить(Объект.РасхождениеСФактом);
	ОписаниеТаблицЗапроса.Добавить("ВТ_РасхожденияСЗаявками");
	ОписаниеТаблицЗапроса.Добавить(РасхождениеСЗаявкамиДетализацияПолная);
	ОписаниеТаблицЗапроса.Добавить(Объект.РасхождениеСЗаявками);
	ОписаниеТаблицЗапроса.Добавить(ПросроченныеЗаявки);
	
	Запрос.УстановитьПараметр("ДатаОперации", 			НачалоДня(ДатаОбновления));
	Запрос.УстановитьПараметр("ОтображатьНачисления", 	ОтображатьНачисления);
	Запрос.УстановитьПараметр("ОтображатьОплату", 		ОтображатьОплату);
	Запрос.УстановитьПараметр("ДополнительноеУсловиеСвязиЦенныеБумаги", Истина);
	
	// Отбор по типу объекта расчетов
	Если ТипОбъектовРасчетов = ТипОбъектаРасчетовДоговорыСПоставщиками() Тогда
		
		Запрос.УстановитьПараметр("ВидыДоговоровСПоставщиком", 	РаботаСДоговорамиКонтрагентовУХКлиентСервер.ВидыДоговоровСПоставщиком());
			
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовДоговорыСПокупателями() Тогда
		
		Запрос.УстановитьПараметр("ВидыДоговоровСПокупателем", 	РаботаСДоговорамиКонтрагентовУХКлиентСервер.ВидыДоговоровСПокупателем());
		
	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовДоговорыЛизинг() Тогда
	 
		Запрос.УстановитьПараметр("ВидыДоговоровЛизинг", 		РаботаСДоговорамиКонтрагентовУХКлиентСервер.ВидыДоговоровЛизинг());

	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовАккредитивыБанковскиеГарантии() Тогда
		
		Запрос.УстановитьПараметр("ВидыДоговоровАккредитивыБанковскиеГарантии", 	РаботаСДоговорамиКонтрагентовУХКлиентСервер.ВидыДоговоровЛизинг());

	ИначеЕсли ТипОбъектовРасчетов = ТипОбъектаРасчетовПроизводныеИструменты() Тогда
	 
		Запрос.УстановитьПараметр("ВидыДоговоровПроизводныеИструменты", 			РаботаСДоговорамиКонтрагентовУХКлиентСервер.ВидыДоговоровПроизводныеИструменты());
		
	КонецЕсли;
	
	// Отбор по ответственному
	Если ЗначениеЗаполнено(Ответственный)
		И Не (ТипОбъектовРасчетов = ТипОбъектаРасчетовЦенныеБумагиСобственные() Или ТипОбъектовРасчетов = ТипОбъектаРасчетовЦенныеБумагиСторонние())Тогда
		Запрос.УстановитьПараметр("Ответственный", Ответственный);
	Иначе
		Запрос.УстановитьПараметр("ОтборОтветственныйГрафик", 					Истина);	
		Запрос.УстановитьПараметр("ОтборОтветственныйФакт", 					Истина);	
		Запрос.УстановитьПараметр("ОтборОтветственныйЗаявки", 					Истина);	
		Запрос.УстановитьПараметр("ОтборОтветственныйЗадолженностьГрафики", 	Истина);	
		Запрос.УстановитьПараметр("ОтборОтветственныйЗадолженностьФакт", 		Истина);	
		Запрос.УстановитьПараметр("ОтборОтветственныйОперативныйПлан",	 		Истина);
		
	КонецЕсли;
	
	// Отбор по организации
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Запрос.УстановитьПараметр("Организация", Организация);
			
	Иначе
		Запрос.УстановитьПараметр("ОтборОрганизацияГрафик", 		Истина);	
		Запрос.УстановитьПараметр("ОтборОрганизацияФакт", 			Истина);	
		Запрос.УстановитьПараметр("ОтборОрганизацияЗаявки", 		Истина);	
		Запрос.УстановитьПараметр("ОтборОрганизацияЗадолженность", 	Истина);	
		Запрос.УстановитьПараметр("ОтборОрганизацияОперативныйПлан",Истина);
	КонецЕсли;
	
	// Отбор по контрагенту
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Запрос.УстановитьПараметр("Контрагент", 			Контрагент);
	Иначе
		Запрос.УстановитьПараметр("ОтборКонтрагентГрафик", 			Истина);		
		Запрос.УстановитьПараметр("ОтборКонтрагентФакт", 			Истина);		
		Запрос.УстановитьПараметр("ОтборКонтрагентЗаявки", 			Истина);		
		Запрос.УстановитьПараметр("ОтборКонтрагентЗадолженность", 	Истина);		
		Запрос.УстановитьПараметр("ОтборКонтрагентОперативныйПлан",	Истина);		
	КонецЕсли;
	
	// Отбор по горизонту планирования
	Если ЗначениеЗаполнено(ГоризонтПланирования) Тогда
		Запрос.УстановитьПараметр("ГоризонтПланирования", ГоризонтПланирования);
	Иначе
		Запрос.УстановитьПараметр("ОтборГоризонтПланированияГрафик", Истина);
		Запрос.УстановитьПараметр("ОтборГоризонтПланированияЗаявки", Истина);
	КонецЕсли;
	
	ПакетЗапросов 		= Запрос.ВыполнитьПакет();
	КоличествоЗапросов 	= ПакетЗапросов.Количество();
	
	Для Сч = 0 По КоличествоЗапросов-1  Цикл
		Таблица = ОписаниеТаблицЗапроса[Сч];
		Если Не СтрНачинаетсяС(Таблица, "ВТ_") Тогда
			Таблица.Загрузить(ПакетЗапросов[Сч].Выгрузить());
		КонецЕсли;
	КонецЦикла;
	
	ВыбранаПросроченнаяКредиторскаяЗадолженность = 0;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект 		= Форма.Объект;
	Элементы 	= Форма.Элементы;
	
	Элементы.Ответственный.Видимость = НЕ (Форма.ТипОбъектовРасчетов = ТипОбъектаРасчетовЦенныеБумагиСобственные() ИЛИ Форма.ТипОбъектовРасчетов = ТипОбъектаРасчетовЦенныеБумагиСторонние());
	
	Элементы.ТаблицаПланФактОрганизация.Видимость 			= НЕ ЗначениеЗаполнено(Форма.Организация);
	Элементы.ПросроченнаяЗадолженностьОрганизация.Видимость = НЕ ЗначениеЗаполнено(Форма.Организация);
	Элементы.ТаблицаПланОрганизация.Видимость 				= НЕ ЗначениеЗаполнено(Форма.Организация);
	
	Элементы.ТаблицаПланФактКонтрагент.Видимость 			= НЕ ЗначениеЗаполнено(Форма.Контрагент);
	Элементы.ПросроченнаяЗадолженностьКонтрагент.Видимость 	= НЕ ЗначениеЗаполнено(Форма.Контрагент);
	Элементы.ТаблицаПланКонтрагент.Видимость 				= НЕ ЗначениеЗаполнено(Форма.Контрагент);
	
	ИтогоПросроченнаяЗадолженность = Объект.ПросроченнаяЗадолженность.Итог("КредиторскаяЗадолженностьПросрочено");
	Элементы.ПодменюПогаситьЗадолженность.Доступность = (ИтогоПросроченнаяЗадолженность > 0);
	
	ВидимостьЭлементаСтруктурыЗадолженности = (Форма.ТипОбъектовРасчетов = ТипОбъектаРасчетовРазмещениеСредств() ИЛИ Форма.ТипОбъектовРасчетов = ТипОбъектаРасчетовПривлечениеСредств());
	
	Элементы.РасхождениеСФактомДетализацияОтображатьЭлементФакт.Видимость = ВидимостьЭлементаСтруктурыЗадолженности;
	Элементы.ТаблицаПланОтображатьЭлементЗаявки.Видимость = ВидимостьЭлементаСтруктурыЗадолженности;
	
	Элементы.ПланЗаявкиДата.Видимость							= Форма.ОтображатьДатуВДетализацииЗаявки;
	Элементы.ПланЗаявкиЭлементСтруктурыЗадолженности.Видимость	= Форма.ОтображатьЭлементВДетализацииЗаявки И ВидимостьЭлементаСтруктурыЗадолженности;
	Элементы.ПланЗаявкиСтатьяБюджета.Видимость					= Форма.ОтображатьСтатьюВДетализацииЗаявки;

	Элементы.РасхождениеСФактомДетализацияДата.Видимость							= Форма.ОтображатьДатуВДетализацииФакт;
	Элементы.РасхождениеСФактомДетализацияЭлементСтруктурыЗадолженности.Видимость	= Форма.ОтображатьЭлементВДетализацииФакт И ВидимостьЭлементаСтруктурыЗадолженности;
	Элементы.РасхождениеСФактомДетализацияСтатьяБюджета.Видимость					= Форма.ОтображатьСтатьюВДетализацииФакт;

	Элементы.ТаблицаПланГруппаНачисление.Видимость						=  Форма.ОтображатьНачисления;
	Элементы.ПланЗаявкиГруппаНачисление.Видимость						=  Форма.ОтображатьНачисления;
	Элементы.РасхождениеСФактомГруппаНачисление.Видимость				=  Форма.ОтображатьНачисления;
	Элементы.РасхождениеСФактомДетализацияГруппаНачисление.Видимость	=  Форма.ОтображатьНачисления;
	
	Элементы.ТаблицаПланГруппаОплата.Видимость						=  Форма.ОтображатьОплату;
	Элементы.ПланЗаявкиГруппаОплата.Видимость						=  Форма.ОтображатьОплату;
	Элементы.РасхождениеСФактомГруппаОплата.Видимость				=  Форма.ОтображатьОплату;
	Элементы.РасхождениеСФактомДетализацияГруппаОплата.Видимость	=  Форма.ОтображатьОплату;
	
	Элементы.РасхождениеСФактомДетализация.Видимость 		= Форма.ОтображатьДетализацию;
	Элементы.ПланЗаявки.Видимость 							= Форма.ОтображатьДетализацию;
	Элементы.ПросроченнаяЗадолженностьСтруктура.Видимость 	= Форма.ОтображатьДетализацию И ВидимостьЭлементаСтруктурыЗадолженности;
	
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьГрафик(Знач ОбъектРасчетов, Организация)
	
	Если Не ЗначениеЗаполнено(ОбъектРасчетов) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОткрытия = ПолучитьДанныеОткрытияГрафика(ОбъектРасчетов, Организация);
	Если ЗначениеЗаполнено(ДанныеОткрытия) Тогда
		ОткрытьФорму(ДанныеОткрытия.ИмяФормы, ДанныеОткрытия, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеОткрытияГрафика(ОбъектРасчетов, Организация)
	
	Результат = Новый Структура;
	ДействующийГрафик = РаботаСДоговорамиКонтрагентовУХВызовСервера.ДействующийГрафик(ОбъектРасчетов,,Организация);
	
	Если ДействующийГрафик <> Неопределено Тогда
		Результат.Вставить("ИмяФормы", ДействующийГрафик.Метаданные().ОсновнаяФормаОбъекта.ПолноеИмя());
		Результат.Вставить("Ключ", ДействующийГрафик);
		Результат.Вставить("ОткрыватьСтраницуГрафик", Истина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


&НаСервере
Процедура ОбновитьЗаявкиНаСервере(ТолькоВыделенныеПозиции = Ложь)
	
	ОбъектыРасчетов = Новый Массив;
	
	Если ТолькоВыделенныеПозиции Тогда
		СтруктураОтбора = Новый Структура("Пометка", Истина);
		КоллекцияПоиска = Объект.РасхождениеСЗаявками.НайтиСтроки(СтруктураОтбора);
	Иначе
		КоллекцияПоиска = Объект.РасхождениеСЗаявками;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из КоллекцияПоиска Цикл
		ОбъектыРасчетов.Добавить(ТекСтрока.ОбъектРасчетов);
	КонецЦикла;
	
	РасчетГрафиковОперацийУХ.СформироватьЗаявкиПоГрафикуОплаты(
		ОбъектыРасчетов, 
		НачалоДня(ДатаОбновления), 
		?(ЗначениеЗаполнено(ГоризонтПланирования), ГоризонтПланирования, Дата(3999,12,31,23,59,59)), ОтображатьНачисления);
	ЗаполнитьТаблицуПланФакт();	
	ОбновитьРасхождениеСЗаявкамиСервер();
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ПросроченнаяЗадолженностьПометка.Имя);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	"Объект.ПросроченнаяЗадолженность.КредиторскаяЗадолженностьПросрочено", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,0,,Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.РасхождениеСФактомДетализацияДата.Имя);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	"Объект.ПросроченнаяЗадолженность.КредиторскаяЗадолженностьПросрочено", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,0,,Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	
КонецПроцедуры

&НаКлиенте
Процедура ПогаситьЗадолженностьПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПогаситьЗадолженностьНаСервере(ДополнительныеПараметры.РежимПогашения, Результат);
	
КонецПроцедуры

&НаСервере
Процедура ПогаситьЗадолженностьНаСервере(РежимПогашения, ПараметрыПогашения)
	
	//
	СформированныеЗаявки = Новый ТаблицаЗначений;
	СформированныеЗаявки.Колонки.Добавить("Ссылка", 	Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств"));
	СформированныеЗаявки.Колонки.Добавить("Проведен", 	Новый ОписаниеТипов("Булево"));
	
	//
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиФинансовыхИнструментов.СтатьяБюджета КАК СтатьяБюджета,
	|	НастройкиФинансовыхИнструментов.Операция.ВидОперацииУХ КАК ВидОперацииУХ,
	|	НастройкиФинансовыхИнструментов.Операция.ВидФинансовогоИнструмента КАК ВидФинансовогоИнструмента,
	|	НастройкиФинансовыхИнструментов.Операция.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности
	|ИЗ
	|	РегистрСведений.НастройкиФинансовыхИнструментов КАК НастройкиФинансовыхИнструментов
	|ГДЕ
	|	НастройкиФинансовыхИнструментов.Операция.ВидБюджета = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств)
	|	И НастройкиФинансовыхИнструментов.Операция.НаправлениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВидыДВиженийПриходРасход.Расход)";
	
	ТаблицаПараметрыОперации = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекПозицияПросроченнойЗадолженности Из Объект.ПросроченнаяЗадолженность Цикл
		Если РежимПогашения <> "Целиком" И Не ТекПозицияПросроченнойЗадолженности.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработатьПозициюКПогашению(ТекПозицияПросроченнойЗадолженности, ПараметрыПогашения.ДатаПогашения, ТаблицаПараметрыОперации, СформированныеЗаявки);
		
	КонецЦикла;
	
	ЗаполнитьТаблицуПланФакт();
	
	НепроведенныеДокументы = СформированныеЗаявки.НайтиСтроки(Новый Структура("Проведен", Ложь));
	
	Если НепроведенныеДокументы.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Из-за ошибок, некоторые созданные заявки не были проведены:'"));
		Для Каждого Строка Из НепроведенныеДокументы Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '	- %1'"),
				Строка.Ссылка);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Строка.Ссылка);
			
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПозициюКПогашению(Позиция, Знач ДатаПогашения, Знач ТаблицаНастроекОпераций, ТаблицаСформированныхЗаявок)
	
	СтруктураПросроченнойЗадолженности = Объект.ПросроченнаяЗадолженностьСтруктура.НайтиСтроки(Новый Структура("ОбъектРасчетов,ЕстьПросрочка",Позиция.ОбъектРасчетов, Истина));

	ПараметрыОперации = ТаблицаНастроекОпераций.НайтиСтроки(
		Новый Структура("ВидФинансовогоИнструмента,ЭлементСтруктурыЗадолженности", 
		СтруктураПросроченнойЗадолженности[0].ВидФинансовогоИнструмента,
		СтруктураПросроченнойЗадолженности[0].ЭлементСтруктурыЗадолженности));
	
	СтруктураПараметровЗаявки = Новый Структура;
	СтруктураПараметровЗаявки.Вставить("ОбъектРасчетов", 	Позиция.ОбъектРасчетов);
	СтруктураПараметровЗаявки.Вставить("СуммаДокумента", 	Позиция.КредиторскаяЗадолженностьПросрочено);
	СтруктураПараметровЗаявки.Вставить("Организация", 		Позиция.Организация);
	СтруктураПараметровЗаявки.Вставить("Контрагент", 		Позиция.Контрагент);
	СтруктураПараметровЗаявки.Вставить("ВидБюджета", 		Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств);
	СтруктураПараметровЗаявки.Вставить("ДатаНачала", 		ДатаПогашения);
	
	Если ПараметрыОперации.Количество() Тогда
		СтруктураПараметровЗаявки.Вставить("ВидОперацииУХ", ПараметрыОперации[0].ВидОперацииУХ);
	КонецЕсли;
	
	НоваяЗаявка = Документы.ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент();
	НоваяЗаявка.Заполнить(СтруктураПараметровЗаявки);
	
	Если НоваяЗаявка.ПроверитьЗаполнение() Тогда
		НоваяЗаявка.Записать(РежимЗаписиДокумента.Проведение);

		
		Строка = ТаблицаСформированныхЗаявок.Добавить();
		Строка.Ссылка = НоваяЗаявка.Ссылка;
		
		Строка.Проведен = Истина;
	КонецЕсли;

	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораТиповОбъектовРасчетов()
	
	СписокВыбора = Элементы.ТипОбъектовРасчетов.СписокВыбора;
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить(ТипОбъектаРасчетовДоговорыСПоставщиками(), 			НСтр("ru = 'С поставщиками (подрядчиками, исполнителями)'"));
	СписокВыбора.Добавить(ТипОбъектаРасчетовДоговорыСПокупателями(), 			НСтр("ru = 'С покупателями (заказчиками)'"));
	СписокВыбора.Добавить(ТипОбъектаРасчетовПривлечениеСредств(), 				НСтр("ru = 'По договорам привлечения средств'"));
	СписокВыбора.Добавить(ТипОбъектаРасчетовРазмещениеСредств(), 				НСтр("ru = 'По договорам размещения средств'"));
	СписокВыбора.Добавить(ТипОбъектаРасчетовДоговорыЛизинг(), 					НСтр("ru = 'По договорам лизинга'"));
	СписокВыбора.Добавить(ТипОбъектаРасчетовЦенныеБумагиСобственные(), 			НСтр("ru = 'По собственным ценным бумагам'"));
	СписокВыбора.Добавить(ТипОбъектаРасчетовЦенныеБумагиСторонние(), 			НСтр("ru = 'По сторонним ценным бумагам'"));
	СписокВыбора.Добавить(ТипОбъектаРасчетовПроизводныеИструменты(),		 	НСтр("ru = 'По производным финансовым инструментам'"));
	СписокВыбора.Добавить(ТипОбъектаРасчетовАккредитивыБанковскиеГарантии(), 	НСтр("ru = 'По аккредитивам и банковским гарантиям'"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТипОбъектаРасчетовАккредитивыБанковскиеГарантии()
	Возврат "АккредитивыБанковскиеГарантии";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипОбъектаРасчетовПроизводныеИструменты()
	Возврат "ПроизводныеФинансовыеИструменты";
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Функция ТипОбъектаРасчетовДоговорыЛизинг()
	Возврат "ДоговорыЛизинг";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипОбъектаРасчетовЦенныеБумагиСобственные()
	Возврат "ЦенныеБумагиСобственные";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипОбъектаРасчетовЦенныеБумагиСторонние()
	Возврат "ЦенныеБумагиСторонние";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипОбъектаРасчетовПривлечениеСредств()
	Возврат "ПривлечениеСредств";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипОбъектаРасчетовРазмещениеСредств()
	Возврат "РазмещениеСредств";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипОбъектаРасчетовДоговорыСПоставщиками()
	Возврат "ДоговорыСПоставщиками";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипОбъектаРасчетовДоговорыСПокупателями()
	Возврат "ДоговорыСПокупателями";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма)
	Форма.Заголовок = СтрШаблон(НСтр("ru = 'Управление отклонениями (обновлено %1)'"), Форма.ДатаОбновления);
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииТипаОбъектовРасчетовНаСервере()
	УправлениеФормой(ЭтотОбъект);
	ЗаполнитьТаблицуПланФакт();
КонецПроцедуры

&НаСервере
Функция ПолучитьПодходящиеЗаявкиПоОтбору(СтруктураОтбора)
	
	ТекСтрокиГрафика = РасхождениеСЗаявкамиДетализацияПолная.НайтиСтроки(СтруктураОтбора);
	
	ТабРезультат = Новый ТаблицаЗначений;
	ТабРезультат.Колонки.Добавить("Документ");
	ТабРезультат.Колонки.Добавить("Дата");
	ТабРезультат.Колонки.Добавить("ЭлементСтруктурыЗадолженности");
	ТабРезультат.Колонки.Добавить("СтатьяБюджета");
	ТабРезультат.Колонки.Добавить("СуммаНачисление");
	ТабРезультат.Колонки.Добавить("СуммаОплата");
	
	Для Каждого ТекСтрокаГрафика Из ТекСтрокиГрафика Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрокаГрафика.Документ) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТабРезультат.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаГрафика);
		НоваяСтрока.СуммаНачисление = ТекСтрокаГрафика.НачислениеЗаявлено;
		НоваяСтрока.СуммаОплата = ТекСтрокаГрафика.ОплатаЗаявлено;
		
	КонецЦикла;
	
	КоличествоСтрок = ТабРезультат.Количество();
	
	Если КоличествоСтрок = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли КоличествоСтрок = 1 Тогда
		Возврат ТабРезультат[0].Документ;
	Иначе
		Возврат ПоместитьВоВременноеХранилище(ТабРезультат);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПодходящиеДокументыФактаПоОтбору(СтруктураОтбора)
	
	ТекСтрокиГрафика = РасхождениеСФактомДетализацияПолная.НайтиСтроки(СтруктураОтбора);
	
	ТабРезультат = Новый ТаблицаЗначений;
	ТабРезультат.Колонки.Добавить("Документ");
	ТабРезультат.Колонки.Добавить("Дата");
	ТабРезультат.Колонки.Добавить("ЭлементСтруктурыЗадолженности");
	ТабРезультат.Колонки.Добавить("СтатьяБюджета");
	ТабРезультат.Колонки.Добавить("СуммаНачисление");
	ТабРезультат.Колонки.Добавить("СуммаОплата");
	
	Для Каждого ТекСтрокаГрафика Из ТекСтрокиГрафика Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрокаГрафика.Документ) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТабРезультат.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаГрафика);
		НоваяСтрока.СуммаНачисление = ТекСтрокаГрафика.НачислениеФакт;
		НоваяСтрока.СуммаОплата = ТекСтрокаГрафика.ОплатаФакт;
		
	КонецЦикла;
	
	КоличествоСтрок = ТабРезультат.Количество();
	
	Если КоличествоСтрок = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли КоличествоСтрок = 1 Тогда
		Возврат ТабРезультат[0].Документ;
	Иначе
		Возврат ПоместитьВоВременноеХранилище(ТабРезультат);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьВыбранныйДокумент(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена
		ИЛИ Результат = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПоказатьЗначение(,Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтогиРасхождениеСЗаявками()
	ОбновитьРасхождениеСЗаявкамиСервер();
КонецПроцедуры

&НаСервере
Процедура ОбновитьРасхождениеСЗаявкамиСервер()
	
	Если ТекОбъектРасчетовЗаявки = Неопределено Тогда
		
		Объект.РасхождениеСЗаявкамиДетализация.Очистить();
		ПросроченныеЗаявкиПоОбъектуЗаявки.Очистить();
	Иначе
		
		ТаблицаДетализация 	= РасхождениеСЗаявкамиДетализацияПолная.Выгрузить(Новый Структура("ОбъектРасчетов", ТекОбъектРасчетовЗаявки));
		КолонкиСвертки 		= Новый Массив;
		
		КолонкиСвертки.Добавить("Валюта");
		КолонкиСвертки.Добавить("ПриходРасход");

		Если ОтображатьДатуВДетализацииЗаявки Тогда
			КолонкиСвертки.Добавить("Дата");
		КонецЕсли;
		
		Если ОтображатьСтатьюВДетализацииЗаявки Тогда
			КолонкиСвертки.Добавить("СтатьяБюджета");
		КонецЕсли;	

		Если ОтображатьЭлементВДетализацииЗаявки Тогда
			КолонкиСвертки.Добавить("ЭлементСтруктурыЗадолженности");
		КонецЕсли;	
		
		ТаблицаДетализация.Свернуть(СтрСоединить(КолонкиСвертки,","), "НачислениеГрафик,НачислениеЗаявлено,ОплатаГрафик,ОплатаЗаявлено");
		ТаблицаДетализация.Колонки.Добавить("НачислениеОтклонение", РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
		ТаблицаДетализация.Колонки.Добавить("ОплатаОтклонение", 	РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
		
		КоличествоСтрок = ТаблицаДетализация.Количество();
		
		Для Сч = 1 По КоличествоСтрок Цикл
			
			СтрокаТаблицы = ТаблицаДетализация[КоличествоСтрок - Сч];
			Если СтрокаТаблицы.НачислениеГрафик = СтрокаТаблицы.НачислениеЗаявлено
				И СтрокаТаблицы.ОплатаГрафик 	= СтрокаТаблицы.ОплатаЗаявлено Тогда
				
				ТаблицаДетализация.Удалить(СтрокаТаблицы);
			Иначе
				Если  СтрокаТаблицы.НачислениеЗаявлено > СтрокаТаблицы.НачислениеГрафик Тогда
					СтрокаТаблицы.НачислениеОтклонение 	= СтрокаТаблицы.НачислениеЗаявлено 	- СтрокаТаблицы.НачислениеГрафик;
				Иначе
				    СтрокаТаблицы.НачислениеОтклонение 	= СтрокаТаблицы.НачислениеГрафик 	- СтрокаТаблицы.НачислениеЗаявлено;
				КонецЕсли; 
				
				Если  СтрокаТаблицы.ОплатаЗаявлено > СтрокаТаблицы.ОплатаГрафик Тогда
					СтрокаТаблицы.ОплатаОтклонение 		= СтрокаТаблицы.ОплатаЗаявлено 	- СтрокаТаблицы.ОплатаГрафик;
				Иначе
				    СтрокаТаблицы.ОплатаОтклонение 		= СтрокаТаблицы.ОплатаГрафик 	- СтрокаТаблицы.ОплатаЗаявлено;
				КонецЕсли; 
				
				
			КонецЕсли;
			
		КонецЦикла;
		
		Объект.РасхождениеСЗаявкамиДетализация.Загрузить(ТаблицаДетализация);
		
		ПросроченныеЗаявкиПоОбъектуЗаявки.Загрузить(ПросроченныеЗаявки.Выгрузить(Новый Структура("ОбъектРасчетов", ТекОбъектРасчетовЗаявки)));
		
	КонецЕсли;
	
	ЭлементОткрытияПросроченныхЗаявок = Элементы.ПланЗаявкиОткрытьПросроченныеЗаявкиПоОбъектуПлан;
	КоличествоПросроченныхЗаявок = ПросроченныеЗаявкиПоОбъектуЗаявки.Количество();
	
	Если КоличествоПросроченныхЗаявок > 0 Тогда
		ЭлементОткрытияПросроченныхЗаявок.Видимость = Истина;
		ЭлементОткрытияПросроченныхЗаявок.Заголовок = СтрШаблон(НСтр("ru = 'Открыть просроченные заявки (%1)'"), КоличествоПросроченныхЗаявок);
	Иначе
		ЭлементОткрытияПросроченныхЗаявок.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтогиРасхождениеСФактом()
	ОбновитьИтогиРасхождениеСФактомСервер();
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиРасхождениеСФактомСервер()
	
	Если ТекОбъектРасчетовФакт = Неопределено Тогда
		
		Объект.РасхождениеСФактомДетализация.Очистить();
		ПросроченныеЗаявкиПоОбъектуФакт.Очистить();
	Иначе
		
		ТаблицаДетализация = РасхождениеСФактомДетализацияПолная.Выгрузить(Новый Структура("ОбъектРасчетов", ТекОбъектРасчетовФакт));
		
		КолонкиСвертки = Новый Массив;
		КолонкиСвертки.Добавить("Валюта");
		КолонкиСвертки.Добавить("ПриходРасход");
		
		Если ОтображатьДатуВДетализацииФакт Тогда
			КолонкиСвертки.Добавить("Дата");
		КонецЕсли;
		
		Если ОтображатьСтатьюВДетализацииФакт Тогда
			КолонкиСвертки.Добавить("СтатьяБюджета");
		КонецЕсли;	

		Если ОтображатьЭлементВДетализацииФакт Тогда
			КолонкиСвертки.Добавить("ЭлементСтруктурыЗадолженности");
		КонецЕсли;	

		ТаблицаДетализация.Свернуть(СтрСоединить(КолонкиСвертки,","), 	"НачислениеГрафик,НачислениеФакт,ОплатаГрафик,ОплатаФакт");
		ТаблицаДетализация.Колонки.Добавить("НачислениеОтклонение", 	РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
		ТаблицаДетализация.Колонки.Добавить("ОплатаОтклонение", 		РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
		
		КоличествоСтрок = ТаблицаДетализация.Количество();
		
		Для Сч = 1 По КоличествоСтрок Цикл
			
			СтрокаТаблицы = ТаблицаДетализация[КоличествоСтрок - Сч];
			Если СтрокаТаблицы.НачислениеГрафик = СтрокаТаблицы.НачислениеФакт
				И СтрокаТаблицы.ОплатаГрафик = СтрокаТаблицы.ОплатаФакт Тогда
				
				ТаблицаДетализация.Удалить(СтрокаТаблицы);
			Иначе
				Если  СтрокаТаблицы.НачислениеФакт > СтрокаТаблицы.НачислениеГрафик Тогда
					СтрокаТаблицы.НачислениеОтклонение 	= СтрокаТаблицы.НачислениеФакт 		- СтрокаТаблицы.НачислениеГрафик;
				Иначе
				    СтрокаТаблицы.НачислениеОтклонение 	= СтрокаТаблицы.НачислениеГрафик 	- СтрокаТаблицы.НачислениеФакт;
				КонецЕсли; 
				
				Если  СтрокаТаблицы.ОплатаФакт > СтрокаТаблицы.ОплатаГрафик Тогда
					СтрокаТаблицы.ОплатаОтклонение 	= СтрокаТаблицы.ОплатаФакт 		- СтрокаТаблицы.ОплатаГрафик;
				Иначе
				    СтрокаТаблицы.ОплатаОтклонение 	= СтрокаТаблицы.ОплатаГрафик 	- СтрокаТаблицы.ОплатаФакт;
				КонецЕсли; 

			КонецЕсли;
			
		КонецЦикла;
		
		Объект.РасхождениеСФактомДетализация.Загрузить(ТаблицаДетализация);
		
		ПросроченныеЗаявкиПоОбъектуФакт.Загрузить(ПросроченныеЗаявки.Выгрузить(Новый Структура("ОбъектРасчетов", ТекОбъектРасчетовФакт)));
		
	КонецЕсли;
	
	ЭлементОткрытияПросроченныхЗаявок 	= Элементы.РасхождениеСФактомДетализацияОткрытьПросроченныеЗаявки;
	КоличествоПросроченныхЗаявок 		= ПросроченныеЗаявкиПоОбъектуФакт.Количество();
	
	Если КоличествоПросроченныхЗаявок > 0 Тогда
		ЭлементОткрытияПросроченныхЗаявок.Видимость = Истина;
		ЭлементОткрытияПросроченныхЗаявок.Заголовок = СтрШаблон(НСтр("ru = 'Открыть просроченные заявки (%1)'"), КоличествоПросроченныхЗаявок);
	Иначе
		ЭлементОткрытияПросроченныхЗаявок.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура  УстановитьТекущуюСтрокуВсеТЧ(СтруктураТекОбъектов)
	Если СтруктураТекОбъектов = Неопределено Тогда
		Возврат; 
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(СтруктураТекОбъектов.ОбъектРасчетовФакт) Тогда
		СтруктураДляПоиска 	= Новый Структура;
		СтруктураДляПоиска.Вставить("ОбъектРасчетов", СтруктураТекОбъектов.ОбъектРасчетовФакт);
		ВыбранныеСтроки 	= Объект.РасхождениеСФактом.НайтиСтроки(СтруктураДляПоиска);	
		
		Если ВыбранныеСтроки.Количество()>0  Тогда
			ИдентификаторСтрокаТЧ = ВыбранныеСтроки[0].ПолучитьИдентификатор();
			Элементы.РасхождениеСФактом.ТекущаяСтрока = ИдентификаторСтрокаТЧ;
		КонецЕсли; 
	КонецЕсли; 

	Если ЗначениеЗаполнено(СтруктураТекОбъектов.ОбъектРасчетовЗаявки) Тогда
		СтруктураДляПоиска 	= Новый Структура;
		СтруктураДляПоиска.Вставить("ОбъектРасчетов", СтруктураТекОбъектов.ОбъектРасчетовЗаявки);
		ВыбранныеСтроки 	= Объект.РасхождениеСЗаявками.НайтиСтроки(СтруктураДляПоиска);	
		
		Если ВыбранныеСтроки.Количество()>0  Тогда
			ИдентификаторСтрокаТЧ = ВыбранныеСтроки[0].ПолучитьИдентификатор();
			Элементы.РасхождениеСЗаявками.ТекущаяСтрока = ИдентификаторСтрокаТЧ;
		КонецЕсли; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураТекОбъектов.ОбъектРасчетовЗадолженность) Тогда
		СтруктураДляПоиска 	= Новый Структура;
		СтруктураДляПоиска.Вставить("ОбъектРасчетов", СтруктураТекОбъектов.ОбъектРасчетовЗадолженность);
		ВыбранныеСтроки 	= Объект.ПросроченнаяЗадолженность.НайтиСтроки(СтруктураДляПоиска);	
		
		Если ВыбранныеСтроки.Количество()>0  Тогда
			ИдентификаторСтрокаТЧ = ВыбранныеСтроки[0].ПолучитьИдентификатор();
			Элементы.ПросроченнаяЗадолженность.ТекущаяСтрока = ИдентификаторСтрокаТЧ;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры;

#КонецОбласти
