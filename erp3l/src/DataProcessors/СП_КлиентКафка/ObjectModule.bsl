#Область ОписаниеПеременных

// Соединение Кафка.
Перем Соединение;

// Вариант выполнения отправки.
Перем ВариантВыполнения;

// Признак заполнения настроек соединения.
Перем ПараметрыНастроены;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Создает отправителя сообщений Kafka.
//
Процедура СоздатьОтправителя() Экспорт
	
	ПроверитьОбязательныеПараметрыЗаполнены();
	
	Соединение = Новый("AddIn.V8KafkaClient.KafkaProducer");
	Соединение.Таймаут = Таймаут;
	
	СоответствиеПараметровСервера = ПолучитьПараметрыИзТаблицы(Брокеры);
	СоответствиеПараметровСоединения = ПолучитьПараметрыИзТаблицы(ПараметрыКонфигурации);
	
	УстановитьПараметры(СоответствиеПараметровСервера);
	УстановитьПараметры(СоответствиеПараметровСоединения);
		
	ПараметрыНастроены = Истина;
	
КонецПроцедуры

// Создает получателя сообщений Kafka.
//
Процедура СоздатьПолучателя() Экспорт
	
	ПроверитьОбязательныеПараметрыЗаполнены();
	
	Соединение = Новый("AddIn.V8KafkaClient.KafkaConsumer");
	Соединение.Таймаут = Таймаут;
	
	СоответствиеПараметровСервера = ПолучитьПараметрыИзТаблицы(Брокеры);
	СоответствиеПараметровСоединения = ПолучитьПараметрыИзТаблицы(ПараметрыКонфигурации);
	
	УстановитьПараметры(СоответствиеПараметровСервера);
	УстановитьПараметры(СоответствиеПараметровСоединения);
	
	ПараметрыНастроены = Истина;
	
КонецПроцедуры

// Устанавливает переданные параметры подключения.
// 
// Параметры:
//  СтруктураПараметров - Структура - структура параметров для установки.
//
Процедура УстановитьПараметры(СтруктураПараметров) Экспорт
	
	Для каждого Параметр Из СтруктураПараметров Цикл
		УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает переданный параметр соединения соединения Kafka.
// 
// Параметры:
//  ИмяПараметра 		- Строка - имя параметра.
//  ЗначениеПараметра 	- Строка - значение параметра.
//
Процедура УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) Экспорт
	
	ПроверитьСоединениеУстановлено();
	
	Попытка
		Соединение.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра);
		
	Исключение
		ВызватьИсключение ТекстТочнойОшибкиОбъекта(Соединение, ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

// Получает параметр соединения Kafka по имени.
// 
// Параметры:
//  ИмяПараметра - Строка - имя параметра Kafka.
// 
// Возвращаемое значение:
// 	Строка, Число - значение установленного параметра Kafka, Неопределено - если значение не установлено.
//  
Функция ПолучитьПараметр(ИмяПараметра) Экспорт
	
	ПроверитьСоединениеУстановлено();
	
	ЗначениеПараметра = "";
	
	Попытка
		Успех = Соединение.ПолучитьПараметр(ИмяПараметра, ЗначениеПараметра);
		
	Исключение
		ВызватьИсключение ТекстТочнойОшибкиОбъекта(Соединение, ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Если Не Успех Тогда
		ТекстИсключения = СтрШаблон("Не удалось получить параметр по имени %1!", ИмяПараметра);
		ВызватьИсключение НСтр(СтрШаблон("ru = '%1'", ТекстИсключения));
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Возвращает версию библиотеки по ее имени.
// 
// Параметры:
//  ИмяБиблиотеки - Строка - имя библиотеки: V8Kafka, RDKafka.
// 
// Возвращаемое значение:
//  Строка - версия библиотеки.
//
Функция ВерсияБиблиотеки(ИмяБиблиотеки = "V8Kafka") Экспорт
	
	ПроверитьСоединениеУстановлено();
	
	Если ИмяБиблиотеки = "V8Kafka" Тогда
		Версия = Соединение.ВерсияБиблиотекиV8Kafka();
		
	ИначеЕсли ИмяБиблиотеки = "RDKafka" Тогда
		Версия = Соединение.ВерсияБиблиотекиRDKafka();
		
	Иначе
		Версия = "<неизвестное имя библиотеки>";
		
	КонецЕсли;
	
	Возврат Версия;
	
КонецФункции

// Устанавливает заголовки текущего соединения.
// 
// Параметры:
//  Заголовки - Соответствие - соответствие для установки заголовков.
//
Процедура УстановитьЗаголовки(Заголовки) Экспорт
		
	Для каждого Заголовок Из Заголовки Цикл
		ДобавитьЗаголовок(Заголовок.Ключ, Заголовок.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Добавляет заголовок к текущему соединению.
// 
// Параметры:
//  Ключ 		- Произвольный - ключ устанавливаемого заголовка.
//  Значение 	- Произвольный - значение устанавливаемого заголовка.
//
Процедура ДобавитьЗаголовок(Ключ, Значение) Экспорт
	
	ПроверитьСоединениеУстановлено();
	
	Попытка
		Успех = Соединение.ДобавитьЗаголовок(Ключ, Значение);
				
	Исключение
		ВызватьИсключение ТекстТочнойОшибкиОбъекта(Соединение, ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Если Не Успех Тогда
		ТекстИсключения = СтрШаблон("Не удалось установить заголовок сообщения: %1:%2!", Ключ, Значение);
		ТекстИсключения = НСтр(СтрШаблон("ru = '%1'", ТекстИсключения));
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
		
КонецПроцедуры

// Получает заголовки сообщения в виде соответствия.
//
// Возвращаемое значение:
//   Соответствие - заголовки сообщения в формате ключ-значение.
//
Функция ПолучитьЗаголовки() Экспорт
	
	ПроверитьСоединениеУстановлено();
	
	ЗаголовкиКафка = Новый Соответствие;
	
	Попытка
		Ключи = Соединение.ПолучитьКлючиЗаголовков();
	Исключение
		ВызватьИсключение ТекстТочнойОшибкиОбъекта(Соединение, ИнформацияОбОшибке());
	КонецПопытки;
	
	Пока Не ПустаяСтрока(Ключи) Цикл
		
		Поз = СтрНайти(Ключи, "|");
		Если Поз = 0 Тогда
			Ключ = Ключи;
			Ключи = "";
		Иначе
			Ключ = Лев(Ключи, Поз - 1);
			Ключи = Сред(Ключи, Поз + 1);
		КонецЕсли;
		
		Попытка
			Значение = "";
			Успех = Соединение.ПолучитьЗначенияЗаголовка(Ключ, Значение);
			Если Успех Тогда
				ЗаголовкиКафка.Вставить(Ключ, Значение);
			КонецЕсли;
			
		Исключение
			ВызватьИсключение ТекстТочнойОшибкиОбъекта(Соединение, ИнформацияОбОшибке());
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ЗаголовкиКафка;
	
КонецФункции

// Очищает заголовки текущего соединения.
//
Процедура ОчиститьЗаголовки() Экспорт
	
	ПроверитьСоединениеУстановлено();
	
	Попытка
		Успех = Соединение.ОчиститьЗаголовки();
		
	Исключение
		ВызватьИсключение ТекстТочнойОшибкиОбъекта(Соединение, ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Если Не Успех Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось выполнить очистку заголовков!'");
	КонецЕсли;
		
КонецПроцедуры

// Удаляет заголовок по переданному ключу.
// 
// Параметры:
//  Ключ - Произвольный - ключ удаляемого заголовка.
//
Процедура УдалитьЗаголовок(Ключ) Экспорт
	
	ПроверитьСоединениеУстановлено();
	
	Попытка
		Успех = Соединение.УдалитьЗаголовок(Ключ);
				
	Исключение
		ВызватьИсключение ТекстТочнойОшибкиОбъекта(Соединение, ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Если Не Успех Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось удалить заголовок сообщения!'");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет подписку соединения Кафка на указанную тему.
// 
// Параметры:
//  Тема - Строка - имя темы для подписки. 
//
Процедура Подписаться(Тема) Экспорт
	
	ПроверитьСоединениеУстановлено();
	
	Попытка
		Соединение.Подписаться(Тема);
		
	Исключение
		ВызватьИсключение ТекстТочнойОшибкиОбъекта(Соединение, ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет отправку сообщения в текущем соединении.
// 
// Параметры:
//  Сообщение 		- Строка, ДвоичныеДанные - отправляемое сообщение.
//  Тема 			- Строка 		- имя темы для отправки сообщения.
//  Раздел 			- Число 		- номер раздела для отправки сообщения.
//  Ключ 			- Число, Строка - ключ сообщения.
//  МеткаВремени 	- Число 		- метка времени.
//
// Возвращаемое значение:
//  Булево - итог выполнения отправки.
//
Функция ОтправитьСообщение(Сообщение, Тема, Раздел = 0, Ключ = 0, МеткаВремени = 0) Экспорт
	
	ПроверитьСоединениеУстановлено();
	
	Если ТипЗнч(Сообщение) = Тип("ДвоичныеДанные") Тогда
		Соединение.ДвоичныйКанал = Истина;
	КонецЕсли;
	
	Попытка
		Успех = ОтправитьСообщениеВыполнениеПоВарианту(Сообщение, Тема, Раздел, Ключ, МеткаВремени);
		
	Исключение
		Успех = Ложь;
		ВызватьИсключение ТекстТочнойОшибкиОбъекта(Соединение, ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Если Не Успех Тогда
		ВызватьИсключение ТекстТочнойОшибкиОбъекта(Соединение, НСтр("ru = 'Не удалось отправить сообщение!'"));
	КонецЕсли;
	
	Возврат Успех;
	
КонецФункции

// Выполняет получение сообщений в текущем соединении.
// 
// Параметры:
//  Сообщение    - Строка, ДвоичныеДанные - полученное сообщение.
//  Ключ         - Строка - ключ сообщения.
//  МеткаВремени - Число - метка времени сообщения.
// 
// Возвращаемое значение:
// 	Булево - Истина, если сообщение получено, Ложь если достигнут таймаут.
//  
Функция ПолучитьСообщение(Сообщение, Ключ = "", МеткаВремени = 0) Экспорт
	
	ПроверитьСоединениеУстановлено();
	
	Попытка
		Результат = Соединение.ПолучитьСообщение(Сообщение, Ключ, МеткаВремени);
		
	Исключение
		Результат = Ложь;
		СгенерироватьТочнуюОшибку(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Явно фиксирует смещение у прочитанного сообщения.
// Имеет смысл только при параметре enable.auto.commit=false.
//
Процедура ЗафиксироватьСмещение() Экспорт
	
	ПроверитьСоединениеУстановлено();
	
	АвтоКоммит = ПолучитьПараметр("enable.auto.commit");
	Если Не АвтоКоммит = Неопределено И АвтоКоммит Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Результат = Соединение.ЗафиксироватьСмещение();
		
	Исключение
		Результат = Ложь;
		СгенерироватьТочнуюОшибку(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Если Не Результат Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось зафиксировать смещение сообщения.'");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку соединения с сервером Kafka.
// 
// Параметры:
// 	ТемаДляПроверки - Строка - имя темы для проверки соединения.
//
Процедура ПроверитьСоединение(ТемаДляПроверки = "Test") Экспорт
	
	ПолучаемоеСообщение = "";
	ТекстСообщения = XMLСтрока(Новый УникальныйИдентификатор());
	ДатаСообщения = ТекущаяДатаСеанса(); 
	ОтправляемоеСообщение = СтрШаблон("Тестовое Сообщение - %1 от %2 ", ТекстСообщения, ДатаСообщения);
	
	Попытка
		СоздатьОтправителя();
		ОтправитьСообщение(ОтправляемоеСообщение, ТемаДляПроверки);
		
		СоздатьПолучателя();
		Подписаться(ТемаДляПроверки);
		ПолучитьСообщение(ПолучаемоеСообщение, ТемаДляПроверки);
		
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СгенерироватьТочнуюОшибку(ТекстОшибки);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет инициализацию при создании нового объекта.
//
Процедура Инициализация()
	
	ПодготовитьВозможныеВарианты();
	ПодключитьКомпоненту();
	
	ПараметрыНастроены = Ложь;
	
КонецПроцедуры

// Выполняет подключение внешней компоненты.
//
Процедура ПодключитьКомпоненту()
	
	УспешноПодключили = 
		ПодключитьВнешнююКомпоненту(
			"Обработка.СП_КлиентКафка.Макет.V8KafkaClient", 
			"V8KafkaClient", 
			ТипВнешнейКомпоненты.Native);
	
	Если Не УспешноПодключили Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось подключить внешнюю компоненту V8KafkaClient'");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает точный текст ошибки исполнения.
//
Функция ТекстТочнойОшибки(Знач ИнформацияОбОшибке)
	
	Возврат ТекстТочнойОшибкиОбъекта(Соединение, ИнформацияОбОшибке);
	
КонецФункции

// Возвращает точный текст ошибки объекта.
// 
// Параметры:
//  Объект 				- V8KafkaClient - объект внешней компоненты.
//  ИнформацияОбОшибке 	- ИнформацияОбОшибке - структурированная информация об ошибке.
// 
// Возвращаемое значение:
//  Строка - текст точной ошибки объекта
//
Функция ТекстТочнойОшибкиОбъекта(Знач Объект, Знач ИнформацияОбОшибке)
	
	Если Объект = Неопределено Тогда
		Разделитель = "";
		ОшибкаКомпоненты = "";
	Иначе
		Разделитель = Символы.ПС;
		ОшибкаКомпоненты = Объект.LastErrorDesc;
	КонецЕсли;
	
	ТекстОшибки = ИнформацияОбОшибке;
	Если Тип("ИнформацияОбОшибке") = ТипЗнч(ИнформацияОбОшибке) Тогда
		ТекстОшибки = ИнформацияОбОшибке.Описание;
	КонецЕсли;
	
	Возврат СтрШаблон("%1%2%3", ТекстОшибки, Разделитель, ОшибкаКомпоненты);
	
КонецФункции

// Генерирует точную ошибку исполнения.
//  
// Из-за несовершенства NativeAPI неудобно получать текст ошибок компоненты
// Метод позволяет выбросить исключение с новым текстом ошибки.
//  Недостатки: теряется стек вызовов
//
// Параметры:
//  ИнформацияОбОшибке - ИнформацияОбОшибке - исходное исключение 1С.
//
Процедура СгенерироватьТочнуюОшибку(Знач ИнформацияОбОшибке)
	
	ВызватьИсключение ТекстТочнойОшибки(ИнформацияОбОшибке);
	
КонецПроцедуры

// Получает параметры соединения из табличной части обработки.
// 
// Параметры:
//  Таблица - ТабличнаяЧасть - таблица параметров.
// 
// Возвращаемое значение:
// 	Структура - параметры для установки.
//  
Функция ПолучитьПараметрыИзТаблицы(Таблица)
	
	Коллекция = Новый Соответствие;
	
	Если Таблица = Брокеры Тогда
		ТекстАдресКластера = "";
		Для каждого Строка Из Таблица Цикл
			ТекстАдресКластера = СтрШаблон("%1%2:%3,", ТекстАдресКластера, Строка.Сервер, Строка.Порт);
		КонецЦикла;
		ТекстАдресКластера = Лев(ТекстАдресКластера, СтрДлина(ТекстАдресКластера) - 1);
		
		Коллекция.Вставить(КлючАдресКластера(), ТекстАдресКластера);
		
	Иначе
		Для каждого Строка Из Таблица Цикл
			Коллекция.Вставить(Строка.Ключ, Строка.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Коллекция;
	
КонецФункции

// Возвращает значение ключа адреса кластера.
// 
// Возвращаемое значение:
//  Строка - ключ адреса кластера.
//
Функция КлючАдресКластера()
	
	Возврат "metadata.broker.list";
	
КонецФункции

// Отправляет сообщение по выбранному варианту.
// 
// Параметры:
//  Тема 			- Строка - название темы для отправки.
//  Сообщение 		- ДвоичныеДанные, Строка - сообщение для отправки.
//  Раздел 			- Число - номер раздела.
//  Ключ 			- Число, Строка - ключ сообщения.
//  МеткаВремени 	- Число - метка времени.
// 
// Возвращаемое значение:
// 	Булево - результат выполнения отправки.
//  
Функция ОтправитьСообщениеВыполнениеПоВарианту(Сообщение, Тема, Раздел, Ключ, МеткаВремени)
	
	Вариант = ОпределитьВариантОтправки(Раздел, Ключ, МеткаВремени);
	
	Если Вариант = ВариантВыполнения.ВТему Тогда
		Результат = Соединение.Опубликовать(Сообщение, Тема);
		
	ИначеЕсли Вариант = ВариантВыполнения.ВТемуСМеткой Тогда
		Результат = Соединение.Опубликовать(Сообщение, Тема, , , МеткаВремени);
		
	ИначеЕсли Вариант = ВариантВыполнения.ВТемуСКлючем Тогда
		Результат = Соединение.Опубликовать(Сообщение, Тема, , Ключ);
		
	ИначеЕсли Вариант = ВариантВыполнения.ВТемуСКлючемМеткой Тогда
		Результат = Соединение.Опубликовать(Сообщение, Тема, , Ключ, МеткаВремени);
		
	ИначеЕсли Вариант = ВариантВыполнения.ВРаздел Тогда
		Результат = Соединение.Опубликовать(Сообщение, Тема, Раздел);
		
	ИначеЕсли Вариант = ВариантВыполнения.ВРазделСМеткой Тогда
		Результат = Соединение.Опубликовать(Сообщение, Тема, Раздел, , МеткаВремени);
		
	ИначеЕсли Вариант = ВариантВыполнения.ВРазделСКлючем Тогда
		Результат = Соединение.Опубликовать(Сообщение, Тема, Раздел, Ключ);
		
	Иначе
		Результат = Соединение.Опубликовать(Сообщение, Тема, Раздел, Ключ, МеткаВремени);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОпределитьВариантОтправки(Раздел, Ключ, МеткаВремени)
	
	Вариант = 0;
	ВариантРаздел = 4;
	ВариантКлюч = 2;
	ВариантМетка = 1;
	
	Если ЗначениеЗаполнено(Раздел) Тогда
		Вариант = Вариант + ВариантРаздел;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ключ) Тогда
		Вариант = Вариант + ВариантКлюч;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МеткаВремени) Тогда
		Вариант = Вариант + ВариантМетка;
	КонецЕсли;
	
	Возврат Вариант;
	
КонецФункции

// Устанавливает возможные варианты выполнения отправки.
// 
Процедура ПодготовитьВозможныеВарианты()
	
	ВозможныеВарианты = Новый Структура;
	ВозможныеВарианты.Вставить("ВТему", 0);
	ВозможныеВарианты.Вставить("ВТемуСМеткой", 1);
	ВозможныеВарианты.Вставить("ВТемуСКлючем", 2);
	ВозможныеВарианты.Вставить("ВТемуСКлючемМеткой", 3);
	ВозможныеВарианты.Вставить("ВРаздел", 4);
	ВозможныеВарианты.Вставить("ВРазделСМеткой", 5);
	ВозможныеВарианты.Вставить("ВРазделСКлючем", 6);
	
	ВариантВыполнения = Новый ФиксированнаяСтруктура(ВозможныеВарианты);
	
КонецПроцедуры

// Выполняет проверку заполнения обязательных параметров клиента Kafka.
// Если заполнены не все параметры - вызывает исключение.
//
Процедура ПроверитьОбязательныеПараметрыЗаполнены()
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	
	Если Не ЗначениеЗаполнено(Брокеры) Тогда
		ТекстОшибки = "Для клиента Кафка не заполнены серверы кластера!"; 
		ТекстОшибки = СтрШаблон("%1%2", Символы.ПС, ТекстОшибки);
		
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыКонфигурации) Тогда
		ТекстОшибки = "Для клиента Кафка не заполнены параметры соединения!"; 
		ТекстОшибки = СтрШаблон("%1%2", Символы.ПС, ТекстОшибки);
		
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку установки соединения через ВК.
// Если соединение не установлено - вызывает исключение.
//
Процедура ПроверитьСоединениеУстановлено()
	
	Если Соединение = Неопределено Тогда
		ТекстОшибки = "ru = 'Не установлено соединение с компонентой V8KafkaClient.
					  |Для продожения работы необходимо создать Отправителя или Получателя.'";
		
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

Инициализация();

#КонецОбласти