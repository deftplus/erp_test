
// Рабочие переменные для заполнения и отображения данных

Перем СчетСсылкаБД;
Перем КоррСчетСсылкаБД;
Перем ДокументРезультат;
Перем ЕстьПериод;
Перем ЗаголовокОтчета;
Перем Линия;
Перем ЛинияЖирная;
Перем ОбъектЗапрос;
Перем МассивПоказателей;

Перем ЦветФонаРеквизита;
Перем ЦветФонаЗначения;
Перем ЦветФонаТабличнойЧасти;
Перем ЦветРамкиРеквизита;
Перем ЦветРамкиТабличнойЧасти;
Перем ЦветаТабличнойЧасти;

// Переменные настройки формирования отчетов

Перем ТекСоединениеВИБ Экспорт;

Перем ТаблицаГруппировок Экспорт;
Перем МассивДопИзмерений Экспорт;
Перем МассивВыводимыхРесурсов Экспорт;
Перем ТаблицаДопИзмерений Экспорт;

Перем ИспользуемыеПараметры Экспорт;
Перем ИспользуемыеПоляДетализации Экспорт;

Перем ДанныеДляЗаголовка Экспорт;

Перем ДанныеРегистра Экспорт;
Перем ДанныеСчета Экспорт;
Перем ДанныеКоррСчета Экспорт;
Перем ПравилаИтоги Экспорт;
Перем ПравилаСальдо Экспорт;

Перем МассивБалансовыеБезИзмерений Экспорт;
Перем МассивБалансовыеСИзмерениями Экспорт;
Перем МассивНебалансовыеБезИзмерений Экспорт;
Перем МассивНебалансовыеСИзмерениями Экспорт;

Перем ВнешняяИБ Экспорт;

Перем ТекстОшибки Экспорт;
Перем СтрокаОтборов Экспорт;

Перем ДеревоПоказателей Экспорт;

Перем ДанныеДляЗапроса Экспорт;

#Область ОтчетПоРегиструБухгалтерииБД

// Формирует строку ограничений по датам отчета для показа в заголовке формы
//
// Параметры:
//	ДатаНач
//  ДатаКон
Функция СформироватьСтрокуВыводаПараметровПоДатам() Экспорт

	Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда		
		ОписаниеПериода     = НСтр("ru = 'Период: без ограничения.'");
	Иначе		
		Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда			
			ОписаниеПериода = НСтр("ru = 'Период: '") + Формат(ДатаНач, "Л=ru_RU; ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""") 
							+ " - "      + Формат(ДатаКон, "Л=ru_RU; ДФ=дд.ММ.гггг; ДП='без ограничения'");			
		Иначе
			Если ДатаНач > ДатаКон Тогда
				ОписаниеПериода = "";
			Иначе				
				ОписаниеПериода = НСтр("ru = 'Период: '") + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;

	Возврат ОписаниеПериода;

КонецФункции

//Функция возвращает соответствие счетов предков
Функция ВернутьСоответствиеСчетовПредков() 
	
	ЗапросСчета =?(ВнешняяИБ=0,Новый Запрос,ТекСоединениеВИБ.NewObject("Запрос"));
	ЗапросСчета.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПланСчетовРегистра.Ссылка КАК Ссылка
		|ИЗ
		|	ПланСчетов."+ДанныеРегистра.ПланСчетовРегистр+" КАК ПланСчетовРегистра
		|
		|ГДЕ
		|	ПланСчетовРегистра.Ссылка = &Ссылка
		|
		|ИТОГИ ПО
		|	Ссылка ИЕРАРХИЯ";
	
	ЗапросСчета.УстановитьПараметр("Ссылка", СчетСсылкаБД);
	
	ВыборкаСчета = ЗапросСчета.Выполнить().Выбрать();
	
	СоответствиеСчетов = ?(ВнешняяИБ=0,Новый Соответствие,ТекСоединениеВИБ.NewObject("Соответствие"));
	Пока ВыборкаСчета.Следующий() Цикл
		СоответствиеСчетов.Вставить(ВыборкаСчета.Ссылка, ВыборкаСчета.Ссылка);
	КонецЦикла;

	Возврат СоответствиеСчетов;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция СформироватьСтрокуИзмерений()
	
	ТекстДетализация="";
	
	Для Каждого СтрДетализация ИЗ ИспользуемыеПоляДетализации Цикл
		
		ТекстДетализация=ТекстДетализация+", "+?(ПустаяСтрока(СтрДетализация.ПсевдонимПоля),СтрДетализация.ИмяПоля,СтрДетализация.ПсевдонимПоля);
		
	КонецЦикла;
	
	Возврат Сред(ТекстДетализация,2);
	 	
 КонецФункции // СформироватьСтрокуИзмерений() 
 
 Функция ЗаголовокОтчета() Экспорт
	 
	 Если ВидОтчета="ОборотноСальдоваяВедомостьПоСчету" Тогда
		 
		 Возврат СтрШаблон(НСтр("ru = 'Оборотно-сальдовая ведомость по счету %1'"), ?(ЗначениеЗаполнено(ДанныеСчета.Код), ДанныеСчета.Код, НСтр("ru = ' не выбран счет'")));
		 
	 ИначеЕсли ВидОтчета="КарточкаСчета" Тогда
		 
		 Возврат СтрШаблон(НСтр("ru = 'Карточка счета %1'"), ?(ЗначениеЗаполнено(ДанныеСчета.Код), ДанныеСчета.Код, НСтр("ru = ' не выбран счет'")));
		 
	ИначеЕсли ВидОтчета="ОтчетПоПроводкам" Тогда
		 
		 Возврат СтрШаблон(НСтр("ru = 'Отчет по проводкам между счетами %1 и %2'"), ДанныеСчета.Код, ДанныеКоррСчета.Код);
		 
	 ИначеЕсли ВидОтчета = "АнализСчета" Тогда
		 		 
		 Возврат СтрШаблон(НСтр("ru = 'Анализ счета %1'"), ?(ЗначениеЗаполнено(ДанныеСчета.Код), ДанныеСчета.Код, НСтр("ru = ' не выбран счет'")));
		 
	 ИначеЕсли ВидОтчета = "ОборотноСальдоваяВедомость" Тогда
		 
		 Возврат НСтр("ru = 'Оборотно - сальдовая ведомость'");
		 
	 ИначеЕсли ВидОтчета = "ОстаткиИОбороты" Тогда
		 
		 Если ДанныеРегистра.ВидРегистра="Обороты" Тогда
			 
			 Возврат НСтр("ru = 'Обороты'");
			 
		 Иначе
			 
			 Возврат НСтр("ru = 'Остатки и обороты'");
			 
		 КонецЕсли;
		 
	 КонецЕсли;

КонецФункции // ЗаголовокОтчета()
 
// Выводит заголовок отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовокОСВПоСчету() 

	ОписаниеПериода = СформироватьСтрокуВыводаПараметровПоДатам();
	
	Макет = ПолучитьМакет("ОборотноСальдоваяВедомостьПоСчету");
	Итоги = Макет.ПолучитьОбласть("Итоги");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");
	
	Если ДанныеДляЗаголовка.Свойство("Организация") Тогда
		ЗаголовокОтчета.Параметры.НазваниеОрганизации = СтрШаблон(Нстр("ru = 'Организация: %1'"), ДанныеДляЗаголовка.Организация);
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;

	ТекстПроСписокПоказателей = "";
	
	Для Каждого СтрРесурс Из МассивВыводимыхРесурсов Цикл
				
		ТекстПроСписокПоказателей=ТекстПроСписокПоказателей+", "+СтрРесурс.ИмяПоля;
		
	КонецЦикла;
			
	ТекстПроИтоги = "";
	Если ПоСубсчетам Тогда
		ТекстПроИтоги = СтрШаблон(Нстр("ru = '%1субсчетам, '"), ТекстПроИтоги)КонецЕсли;

	ТекстДетализация=СформироватьСтрокуИзмерений();
	
	Если Не ПустаяСтрока(ТекстДетализация) Тогда
		ТекстПроИтоги = СтрШаблон(Нстр("ru = '%1субконто: %2'"), ТекстПроИтоги, ТекстДетализация);
	КонецЕсли;

	ЗаголовокОтчета.Параметры.ТекстПроСписокПоказателей = Сред(ТекстПроСписокПоказателей,2);
	Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
		ЗаголовокОтчета.Параметры.ТекстПроИтоги = СтрШаблон(Нстр("ru = 'Детализация по %1'"), ТекстПроИтоги);
	КонецЕсли;

	ЗаголовокОтчета.Параметры.Заголовок = ЗаголовокОтчета();
	
	Если ВнешняяИБ=1 Тогда 
		ЗаголовокОтчета.Параметры.ВнешняяИБ = НСтр("ru = 'Внешняя информационная база: '") + ДанныеДляЗаголовка.ИспользуемаяИБ;
	КонецЕсли;
	
	Если ДанныеРегистра.Свойство("ПолеПланСчетов") Тогда
		
		ЗаголовокОтчета.Параметры.РегистрБухгалтерии = СтрШаблон(Нстр("ru = 'Регистр бухгалтерии: %1, план счетов: %2'"), 
	                                               	ДанныеРегистра.НаименованиеРегистра,ДанныеРегистра.ПланСчетов);
		
	Иначе
	
	ЗаголовокОтчета.Параметры.РегистрБухгалтерии = СтрШаблон(Нстр("ru = 'Регистр бухгалтерии: %1'"), 
	                                               	ДанныеРегистра.НаименованиеРегистра);
													
	КонецЕсли;

	// Вывод списка фильтров:
	СтрОтбор =СтрокаОтборов;

	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = СтрШаблон(Нстр("ru = 'Отбор: %1'"), СтрОтбор);
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()

Функция СформироватьЗаголовокОборотноСальдоваяВедомость()
	
	ОписаниеПериода = СформироватьСтрокуВыводаПараметровПоДатам();
	
	Макет = ПолучитьМакет("ОборотноСальдоваяВедомость");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	Если ДанныеДляЗаголовка.Свойство("Организация") Тогда
		ЗаголовокОтчета.Параметры.НазваниеОрганизации = СтрШаблон(Нстр("ru = 'Организация: %1'"), ДанныеДляЗаголовка.Организация);
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;

	ТекстПроСписокПоказателей = "";
	
	Для Каждого СтрРесурс Из МассивВыводимыхРесурсов Цикл
				
		ТекстПроСписокПоказателей=ТекстПроСписокПоказателей+", "+СтрРесурс.ПредставлениеПоля;
		
	КонецЦикла;
	
	ЗаголовокОтчета.Параметры.СписокПоказателей = Сред(ТекстПроСписокПоказателей,2);
	
	Если ВнешняяИБ=1 Тогда 
		ЗаголовокОтчета.Параметры.ВнешняяИБ = НСтр("ru = 'Внешняя информационная база: '") + ДанныеДляЗаголовка.ИспользуемаяИБ;
	КонецЕсли;
	
	Если ДанныеРегистра.Свойство("ПолеПланСчетов") Тогда
		
		ЗаголовокОтчета.Параметры.РегистрБухгалтерии = СтрШаблон(Нстр("ru = 'Регистр бухгалтерии: %1, план счетов: %2'"), 
	                                               	ДанныеРегистра.НаименованиеРегистра,ДанныеРегистра.ПланСчетов);
		
	Иначе
	
	ЗаголовокОтчета.Параметры.РегистрБухгалтерии = СтрШаблон(Нстр("ru = 'Регистр бухгалтерии: %1'"), 
	                                               	ДанныеРегистра.НаименованиеРегистра);
													
	КонецЕсли;

	
	Возврат ЗаголовокОтчета;	
	
КонецФункции // СформироватьЗаголовокОборотноСальдоваяВедомость()

Функция СформироватьЗаголовокКарточкаСчета() Экспорт

	ОписаниеПериода = СформироватьСтрокуВыводаПараметровПоДатам();
		
	Макет = ПолучитьМакет("КарточкаСчета");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	Если ДанныеДляЗаголовка.Свойство("Организация") Тогда
		ЗаголовокОтчета.Параметры.НазваниеОрганизации = СтрШаблон(Нстр("ru = 'Организация: %1'"), ДанныеДляЗаголовка.Организация);
	КонецЕсли;

	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;

	ЗаголовокОтчета.Параметры.Заголовок = ЗаголовокОтчета();
    
	Если ВнешняяИБ=1 Тогда 
		ЗаголовокОтчета.Параметры.ВнешняяИБ = НСтр("ru = 'Внешняя информационная база: '") + ДанныеДляЗаголовка.ИспользуемаяИБ;
	КонецЕсли;
	
	Если ДанныеРегистра.Свойство("ПолеПланСчетов") Тогда
		
		ЗаголовокОтчета.Параметры.РегистрБухгалтерии = СтрШаблон(Нстр("ru = 'Регистр бухгалтерии: %1, план счетов: %2'"), 
	                                               	ДанныеРегистра.НаименованиеРегистра,ДанныеРегистра.ПланСчетов);
		
	Иначе
	
	ЗаголовокОтчета.Параметры.РегистрБухгалтерии = СтрШаблон(Нстр("ru = 'Регистр бухгалтерии: %1'"), 
	                                               	ДанныеРегистра.НаименованиеРегистра);
													
	КонецЕсли;

	

	// Вывод списка фильтров:
	СтрОтбор =СтрокаОтборов;
		
	ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");

	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор.Параметры.ТекстПроОтбор = СтрШаблон(Нстр("ru = 'Отбор: %1'"), СтрОтбор);
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()

Функция СформироватьЗаголовокАнализСчета()
	
	ОписаниеПериода = СформироватьСтрокуВыводаПараметровПоДатам();
	
	Макет = ПолучитьМакет("АнализСчета");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	Если ДанныеДляЗаголовка.Свойство("Организация") Тогда
		ЗаголовокОтчета.Параметры.НазваниеОрганизации = СтрШаблон(Нстр("ru = 'Организация: %1'"), ДанныеДляЗаголовка.Организация);
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;

	ТекстПроСписокПоказателей = "";
	
	Для Каждого СтрРесурс Из МассивВыводимыхРесурсов Цикл
				
		ТекстПроСписокПоказателей=ТекстПроСписокПоказателей+", "+СтрРесурс.ИмяПоля;
		
	КонецЦикла;
			
	ТекстПроИтоги = "";
	Если ПоСубсчетам Тогда
		ТекстПроИтоги = СтрШаблон(Нстр("ru = '%1субсчетам, '"), ТекстПроИтоги)КонецЕсли;
	
	Если ПоКорСубсчетамИСубконто Тогда
		ТекстПроИтоги = СтрШаблон(Нстр("ru = '%1, кор.субсчетам и субконто'"), ТекстПроИтоги)КонецЕсли;

	ТекстДетализация=СформироватьСтрокуИзмерений();
	
	Если Не ПустаяСтрока(ТекстДетализация) Тогда
		ТекстПроИтоги = СтрШаблон(Нстр("ru = '%1субконто: %2'"), ТекстПроИтоги, ТекстДетализация);
	КонецЕсли;

	ЗаголовокОтчета.Параметры.ТекстПроСписокПоказателей = Сред(ТекстПроСписокПоказателей,2);
	Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
		ЗаголовокОтчета.Параметры.ТекстПроИтоги = СтрШаблон(Нстр("ru = 'Детализация по %1'"), ТекстПроИтоги);
	КонецЕсли;

	ЗаголовокОтчета.Параметры.Заголовок = ЗаголовокОтчета();
	
	Если ВнешняяИБ=1 Тогда 
		ЗаголовокОтчета.Параметры.ВнешняяИБ = НСтр("ru = 'Внешняя информационная база: '") + ДанныеДляЗаголовка.ИспользуемаяИБ;
	КонецЕсли;
	
	Если ДанныеРегистра.Свойство("ПолеПланСчетов") Тогда
		
		ЗаголовокОтчета.Параметры.РегистрБухгалтерии = СтрШаблон(Нстр("ru = 'Регистр бухгалтерии: %1, план счетов: %2'"), 
	                                               	ДанныеРегистра.НаименованиеРегистра,ДанныеРегистра.ПланСчетов);
		
	Иначе
	
	ЗаголовокОтчета.Параметры.РегистрБухгалтерии = СтрШаблон(Нстр("ru = 'Регистр бухгалтерии: %1'"), 
	                                               	ДанныеРегистра.НаименованиеРегистра);
													
	КонецЕсли;


	// Вывод списка фильтров:
	СтрОтбор =СтрокаОтборов;

	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = СтрШаблон(Нстр("ru = 'Отбор: %1'"), СтрОтбор);
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);
	
КонецФункции // СформироватьЗаголовокАнализСчета() 

Процедура СформироватьИВывестиЗаголовокОтчета(ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок)	
	
	Если ВидОтчета="ОборотноСальдоваяВедомостьПоСчету" Тогда
		ОбластьЗаголовка = СформироватьЗаголовокОСВПоСчету();
	ИначеЕсли ВидОтчета="КарточкаСчета" Тогда
		ОбластьЗаголовка = СформироватьЗаголовокКарточкаСчета();
	ИначеЕсли ВидОтчета="ОтчетПоПроводкам" Тогда
		ОбластьЗаголовка = СформироватьЗаголовокОтчетПоПроводкам();
	ИначеЕсли ВидОтчета="АнализСчета" Тогда
		ОбластьЗаголовка = СформироватьЗаголовокАнализСчета();
	ИначеЕсли ВидОтчета="ОборотноСальдоваяВедомость" Тогда
		ОбластьЗаголовка = СформироватьЗаголовокОборотноСальдоваяВедомость();
	ИначеЕсли ВидОтчета="ОстаткиИОбороты" Тогда
		ОбластьЗаголовка = СформироватьЗаголовокОстаткиИОбороты();
	КонецЕсли;

	ВысотаЗаголовка = ОбластьЗаголовка.ВысотаТаблицы;
	ДокументРезультат.Вывести(ОбластьЗаголовка, 1);
	
	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;
	
КонецПроцедуры

//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовокОстаткиИОбороты() 

	ОписаниеПериода = СформироватьСтрокуВыводаПараметровПоДатам();
	
	Макет = ПолучитьМакет("ОстаткиИОбороты");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");
		
	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;
			
	ТекстПроИтоги = "";
	
	ТекстДетализация=СформироватьСтрокуИзмерений();
	
	Если Не ПустаяСтрока(ТекстДетализация) Тогда
		ТекстПроИтоги = ТекстДетализация;
	КонецЕсли;

	Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
		ЗаголовокОтчета.Параметры.ТекстПроИтоги = НСтр("ru = 'Детализация по '") + ТекстПроИтоги;
	КонецЕсли;

	ЗаголовокОтчета.Параметры.Заголовок = НСтр("ru = 'Отчет по регистру накопления '") + ДанныеРегистра.Наименование;
	
	Если ВнешняяИБ=1 Тогда 
		ЗаголовокОтчета.Параметры.ВнешняяИБ = НСтр("ru = 'Внешняя информационная база: '") + ДанныеДляЗаголовка.ИспользуемаяИБ;
	КонецЕсли;
	
	// Вывод списка фильтров:

	Если Не ПустаяСтрока(СтрокаОтборов) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = НСтр("ru = 'Отбор: '") + СтрокаОтборов;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()

Функция НастроитьОбъектЗапрос()
	
	ОбъектЗапрос=ТекСоединениеВИБ.NewObject("Запрос");
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Определим параметры запроса
	
	ОбъектЗапрос.SetParameter("ДатаНач",ДатаНач);
	
	Если ДатаКон <> '00010101000000' Тогда
		ОбъектЗапрос.SetParameter("ДатаКон", КонецДня(ДатаКон));
	Иначе
		ОбъектЗапрос.SetParameter("ДатаКон", ДатаКон);
	КонецЕсли;
	
	Если ИспользуетсяПараметрСчет() Тогда
		
		Если СчетСсылкаБД=Неопределено Тогда
			Возврат Неопределено;
		Иначе
			ОбъектЗапрос.SetParameter("Счет", СчетСсылкаБД);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВнешняяИБ=0 Тогда
		
		УстановитьПараметрыЗапросаТек(ОбъектЗапрос);

	Иначе
		
		РаботаСОбъектамиМетаданныхВнешнийУХ.УстановитьПараметрыЗапроса(ТекСоединениеВИБ,ОбъектЗапрос,ИспользуемыеПараметры);
		
	КонецЕсли;
		
	Возврат ОбъектЗапрос;	
			
КонецФункции // НастроитьОбъектЗапрос()
		
Процедура УстановитьПараметрыЗапросаТек(ОбъектЗапрос)
		
	Для Каждого СтрокаПараметр ИЗ ИспользуемыеПараметры Цикл
		
		ОбъектЗапрос.SetParameter(СтрокаПараметр.ИмяПараметра,СтрокаПараметр.ЗначениеПараметра);
		
	КонецЦикла;
		
КонецПроцедуры // УстановитьПараметрыЗапросаВИБ()

// Выводит группировку при развороте счета по субсчетам и/или субконто для оборотно сальдовой ведомости по счету
Процедура ВывестиГруппировкуОборотноСальдовойВедомостиПоСчету(Выборка, Знач ИндексТекущейГруппировки, СтруктураПараметров) Экспорт

	Пока Выборка.Следующий() Цикл
		
		ИмяГруппировки = Выборка.Группировка();
		
		Если ИмяГруппировки = "Счет" Тогда
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаСчет;
			
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, СтруктураПараметров);
			
		ИначеЕсли Лев(ИмяГруппировки, 8) = "Субконто" Тогда
			
			Если Выборка[ИмяГруппировки] = Null Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеГруппировки=ТаблицаГруппировок.Найти(ИмяГруппировки,"ПсевдонимПоля");
			ЕстьПолеПредставление=(НЕ (ДанныеГруппировки=Неопределено ИЛИ ДанныеГруппировки.ТипМетаДанных="Простой"));
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаПоказателяСчет;
			
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			
			ВыводимаяОбласть.Параметры.СубконтоПредставление = Выборка[ИмяГруппировки + ?(ЕстьПолеПредставление,"Представление","")];
			
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, СтруктураПараметров)
			
		Иначе
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаПоказателяСчет;
			
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			ВыводимаяОбласть.Параметры.СубконтоПредставление = Выборка[ИмяГруппировки];
			
		КонецЕсли;
		
		// При выводе субсчетов не делаем отступы
		Отступ = РаботаСОбъектамиМетаданныхВнешнийУХ.ВернутьИндексВМассиве(СтруктураПараметров.МассивГруппировок, ИмяГруппировки);
						
		// Не выводим счета более высокого уровня
		Если ИмяГруппировки = "Счет" 
			И СтруктураПараметров.СоответствиеСчетовПредков.Get(Выборка.Счет) <> Неопределено Тогда
				
			ВывестиВложеннуюГруппировкуОборотноСальдовойВедомостиПоСчету(Выборка, ИндексТекущейГруппировки, СтруктураПараметров);
			Продолжить;
			
		КонецЕсли;
		
		ДокументРезультат = СтруктураПараметров.ДокументРезультат;
		
		ВыводимаяОбласть.Область("R1C2").Отступ = Отступ;
		
		ДокументРезультат.Вывести(ВыводимаяОбласть, Выборка.Уровень() );
		
		Если Выборка.ТипЗаписи() = QueryRecordType.TotalByHierarchy 
		   И ИмяГруппировки <> "Счет" Тогда
			
			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2).Шрифт = СтруктураПараметров.ШрифтГрупп;
			
		КонецЕсли;
		
		ВывестиПоказателиОборотноСальдовойВедомостиПоСчету(Выборка, СтруктураПараметров,?(ПустаяСтрока(Выборка.СчетКод),ПолучитьДанныеСчетаПС(ДанныеСчета.Код), ПолучитьДанныеСчетаПС(Выборка.СчетКод)));
		
		Если МассивДопИзмерений.Количество()>0 Тогда
			
			Для Каждого Измерение ИЗ МассивДопИзмерений Цикл
				
				ВыборкаПоИзмерениям = Выборка.Выбрать(?(ВнешняяИБ=0,QueryResultIteration.ByGroups,ТекСоединениеВИБ.QueryResultIteration.ByGroups),Измерение);
				
				Пока ВыборкаПоИзмерениям.Следующий() Цикл
					
					ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаПоказателяСчет;
					
					ВыводимаяОбласть.Параметры.Заполнить(Выборка);
					ВыводимаяОбласть.Параметры.СубконтоПредставление = Измерение+" " + ВыборкаПоИзмерениям[Измерение+"Представление"];
					
					ВыводимаяОбласть.Область("R1C2").Отступ = Отступ + 1;
					
					// Заполнение параметров расшифровки
					ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, СтруктураПараметров);
					
					ДокументРезультат.Вывести(ВыводимаяОбласть, Выборка.Уровень());
					
					ВывестиПоказателиОборотноСальдовойВедомостиПоСчету(ВыборкаПоИзмерениям, СтруктураПараметров, ?(ПустаяСтрока(Выборка.СчетКод),ПолучитьДанныеСчетаПС(ДанныеСчета.Код), ПолучитьДанныеСчетаПС(Выборка.СчетКод)));
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;

        // Если есть следующая группировка, то выбираем ее
		ВывестиВложеннуюГруппировкуОборотноСальдовойВедомостиПоСчету(Выборка, ИндексТекущейГруппировки, СтруктураПараметров);
			
	КонецЦикла;

КонецПроцедуры

// процедура выводит текущие показатели оборотно сальдовой ведомости по счету
Процедура ВывестиПоказателиОборотноСальдовойВедомостиПоСчету(Выборка, СтруктураПараметров, Знач СчетВыборки, 
	Знач СтруктураЗамещающихДанных = Неопределено) Экспорт

	ВыведеноПоказателей = 0; // количество выведенных показателей
	Для Каждого Ресурс Из МассивВыводимыхРесурсов Цикл
		
		СтрДопИзмерения=СтруктураПараметров.ТаблицаДопИзмерений.Найти(Ресурс.ИмяПоля,"ИмяРесурса");
		
		Если (НЕ СтрДопИзмерения=Неопределено) 
			И СтрДопИзмерения.ИзмеренияРесурса.Количество()>0
			И СтрДопИзмерения.ИзмеренияРесурса.НайтиПоЗначению(Выборка.Группировка())=Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ИмяПоказателя=Ресурс.ИмяПоля;
			
		Если ВыведеноПоказателей > 0 Тогда
			Область = СтруктураПараметров.ОбластьСтрокаПоказателяЧисла;
		Иначе
			Область = СтруктураПараметров.ОбластьСтрокаЧисла;
		КонецЕсли;
		
		ФорматПоказателя = "";
		СтруктураПараметров.ФорматПоказателей.Свойство(ИмяПоказателя, ФорматПоказателя);
		
		Если СтруктураЗамещающихДанных = Неопределено Тогда
			
			СальдоНачДт = Выборка[ИмяПоказателя + "НачальныйОстатокДт"];
			СальдоНачКт = Выборка[ИмяПоказателя + "НачальныйОстатокКт"];
			СальдоКонДт = Выборка[ИмяПоказателя + "КонечныйОстатокДт"];
			СальдоКонКт = Выборка[ИмяПоказателя + "КонечныйОстатокКт"];
			ОборотДт = Выборка[ИмяПоказателя + "ОборотДт"];
			ОборотКт = Выборка[ИмяПоказателя + "ОборотКт"];
			
		Иначе
			
			СальдоНачДт = СтруктураЗамещающихДанных[ИмяПоказателя + "НачальныйОстатокДт"];
			СальдоНачКт = СтруктураЗамещающихДанных[ИмяПоказателя + "НачальныйОстатокКт"];
			СальдоКонДт = СтруктураЗамещающихДанных[ИмяПоказателя + "КонечныйОстатокДт"];
			СальдоКонКт = СтруктураЗамещающихДанных[ИмяПоказателя + "КонечныйОстатокКт"];
			ОборотДт = СтруктураЗамещающихДанных[ИмяПоказателя + "ОборотДт"];
			ОборотКт = СтруктураЗамещающихДанных[ИмяПоказателя + "ОборотКт"];			
			
	    КонецЕсли;
		
		// Сальдо по счетам нужно привести к традиционному виду, в зависимости от вида выбранного счета:
		// если группировки Счет еще не было, сальдо в выборке рассчитаны как для активно-пассивного счета.
		Если СчетВыборки.Вид = "Активный" Тогда
			
			СальдоНачДт = СальдоНачДт - СальдоНачКт;
			СальдоНачКт = 0;
			
			СальдоКонДт = СальдоКонДт - СальдоКонКт;
			СальдоКонКт = 0;
			
		ИначеЕсли СчетВыборки.Вид = "Пассивный" Тогда
			
			СальдоНачКт = СальдоНачКт - СальдоНачДт;
			СальдоНачДт = 0;
			
			СальдоКонКт = СальдоКонКт - СальдоКонДт;
			СальдоКонДт = 0;
			
		КонецЕсли;
		
		Область.Параметры.НачальныйОстатокДт = Формат(СальдоНачДт, ФорматПоказателя);
		Область.Параметры.НачальныйОстатокКт = Формат(СальдоНачКт, ФорматПоказателя);
		Область.Параметры.ОборотДт           = Формат(ОборотДт,    ФорматПоказателя);
		Область.Параметры.ОборотКт           = Формат(ОборотКт,    ФорматПоказателя);
		Область.Параметры.КонечныйОстатокДт  = Формат(СальдоКонДт, ФорматПоказателя);
		Область.Параметры.КонечныйОстатокКт  = Формат(СальдоКонКт, ФорматПоказателя);

		ДокументРезультат = СтруктураПараметров.ДокументРезультат;

		Если ВыведеноПоказателей > 0 Тогда
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаПоказателяСчет;
			
			Если ИмяПоказателя = "ВалютнаяСумма" Тогда
				ВыводимаяОбласть.Параметры.СубконтоПредставление = Нстр("ru = 'Валютная сумма'");
			Иначе
				ВыводимаяОбласть.Параметры.СубконтоПредставление = "";
			КонецЕсли;

			ВыведеннаяОбласть = ДокументРезультат.Вывести(ВыводимаяОбласть);

			ВыведеннаяОбласть.ГраницаСверху = СтруктураПараметров.НетЛинии;
						
		КонецЕсли;

		ДокументРезультат.Присоединить(Область);
		
		ВыведеноПоказателей = ВыведеноПоказателей+1;
				
	КонецЦикла;

КонецПроцедуры

//процедура выводит вложенную группировку оборотно сальдовой ведомости оп счету
Процедура ВывестиВложеннуюГруппировкуОборотноСальдовойВедомостиПоСчету(Выборка, Знач ИндексТекущейГруппировки, 
	СтруктураПараметров)
	
	Если ИндексТекущейГруппировки + 1 >= СтруктураПараметров.МассивГруппировок.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиГруппировкуОборотноСальдовойВедомостиПоСчету(Выборка.Выбрать(?(ВнешняяИБ=0,QueryResultIteration.ByGroups,ТекСоединениеВИБ.QueryResultIteration.ByGroups), СтруктураПараметров.МассивГруппировок[ИндексТекущейГруппировки + 1]), 
		ИндексТекущейГруппировки + 1, СтруктураПараметров);
		
КонецПроцедуры
	
// Заполняет параметры расшифровки
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПараметрыРасшифровки(Область, Выборка, СтруктураПараметров) Экспорт

	// Если итоги по счету не анализируются, берем общий
	Если Выборка.Счет = NULL Тогда
		
		РасшифровываемыйСчет = СчетСсылкаБД;
		РасшифровываемыйСчетПредставление = ДанныеСчета.Код;
		
	Иначе
		
		РасшифровываемыйСчет = Выборка.Счет;
		РасшифровываемыйСчетПредставление = Выборка.СчетПредставление;
		
	КонецЕсли;
	
	ЗаполнитьРасшифровкуДляСчета(Область, Выборка, СтруктураПараметров, РасшифровываемыйСчет, РасшифровываемыйСчетПредставление);
    
КонецПроцедуры

Процедура ЗаполнитьРасшифровкуДляСчета(Область, Выборка, СтруктураПараметров, Знач РасшифровываемыйСчет, Знач РасшифровываемыйСчетПредставление) Экспорт
		
	ПараметрыКарточкиСчета = Новый Соответствие;
	
	ПараметрыКарточкиСчета.Вставить("ИмяОбъекта", "КарточкаСчета" + ДанныеРегистра.НаименованиеРегистра);

	ПараметрыКарточкиСчета.Вставить("Счет", РасшифровываемыйСчет.Код);

	ИмяГруппировки = Выборка.Группировка();
	
	Если Лев(ИмяГруппировки, 8) = "Субконто" Тогда

		// надо в структуру доп ограничений поместить все группировки более высокого уровня
		ДополнительныеОтборы = СоздатьСтруктуруДопОграниченийДляОборотноСальдовойВедомостиПоСчету(Выборка, СтруктураПараметров.МассивГруппировок);
				
		ПараметрыКарточкиСчета.Вставить("ДополнительныеОтборы", ДополнительныеОтборы);
		
		СписокРасшифровки = Новый СписокЗначений;

		СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, СтрШаблон(Нстр("ru = 'Карточка счета %1'"), 
		                                                   	РасшифровываемыйСчетПредставление));
		Область.Параметры.Расшифровка = СписокРасшифровки;
		
	ИначеЕсли ИмяГруппировки = "Счет" ИЛИ (НЕ МассивДопИзмерений.Найти(ИмяГруппировки)=Неопределено) Тогда

		СписокРасшифровки = Новый СписокЗначений;
        СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, СтрШаблон(Нстр("ru = 'Карточка счета %1'"), 
                                                           	РасшифровываемыйСчетПредставление));	
		Область.Параметры.Расшифровка = СписокРасшифровки;
		
	ИначеЕсли ИмяГруппировки = "КорСчет" Тогда
		
		Если ПустаяСтрока(Выборка.СчетКод) Тогда
			СчетКод=СчетКод;
		Иначе
			СчетКод=Выборка.СчетКод;
		КонецЕсли;
		
		Если ВнешняяИБ=1 Тогда
			
			ДополнительныеОтборы = Новый Массив;
			
		Иначе
			
			ДополнительныеОтборы = СоздатьСтруктуруДопОграниченийДляОборотноСальдовойВедомостиПоСчету(Выборка, СтруктураПараметров.МассивГруппировок);
			
		КонецЕсли;	
	
		ПараметрыКарточкиСчета = Новый Соответствие;
		ПараметрыКарточкиСчета.Вставить("Счет",РасшифровываемыйСчет.Код);
		ПараметрыКарточкиСчета.Вставить("КоррСчет",Выборка.КорСчетКод);
		ПараметрыКарточкиСчета.Вставить("ДополнительныеОтборы", ДополнительныеОтборы);

		СписокРасшифровки = Новый СписокЗначений;
        СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, СтрШаблон(Нстр("ru = 'Карточка счета %1'"), 
                                                           	РасшифровываемыйСчетПредставление));
		Область.Параметры.РасшифровкаДт = СписокРасшифровки;
		
		ПараметрыКарточкиСчета = Новый Соответствие;
		ПараметрыКарточкиСчета.Вставить("Счет",Выборка.КорСчетКод);
		ПараметрыКарточкиСчета.Вставить("КоррСчет",РасшифровываемыйСчет.Код);
		ПараметрыКарточкиСчета.Вставить("ДополнительныеОтборы", ДополнительныеОтборы);

		СписокРасшифровки = Новый СписокЗначений;
        СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, СтрШаблон(Нстр("ru = 'Карточка счета %1'"), 
                                                           	РасшифровываемыйСчетПредставление));
		Область.Параметры.РасшифровкаКт = СписокРасшифровки;
		
	Иначе
		
		СписокРасшифровки = Неопределено;
		Область.Параметры.Расшифровка = СписокРасшифровки;
		
	КонецЕсли;	
	
КонецПроцедуры


//Функция создает структуру дополнительных ограничений для расшифровки отчета
Функция СоздатьСтруктуруДопОграниченийДляОборотноСальдовойВедомостиПоСчету(Выборка, МассивГруппировок, 
	Знач ВыводитьВсеГруппировки = Ложь) Экспорт
	
	ДополнительныеОтборы = Новый Массив;
	
	ИмяГруппировки = Выборка.Группировка();
	Если ВыводитьВсеГруппировки Тогда
		НомерГруппировкиВМассиве = МассивГруппировок.Количество() - 1;
	Иначе	
		НомерГруппировкиВМассиве = РаботаСОбъектамиМетаданныхВнешнийУХ.ВернутьИндексВМассиве(МассивГруппировок, ИмяГруппировки);
	КонецЕсли;
	
	Для Сч = 0 По НомерГруппировкиВМассиве Цикл 
		
		ТекущееИмяГруппировки = МассивГруппировок[Сч];
		
		Если Врег(ТекущееИмяГруппировки) = "СЧЕТ"
			ИЛИ Врег(ТекущееИмяГруппировки) = "ОБЩИЕ" Тогда         
			
			Продолжить;
			
		КонецЕсли;
		
		ЗначениеОтбора=Выборка[ТекущееИмяГруппировки];
		ИмяГруппировкиДляРасшифровки=ТекущееИмяГруппировки;
		
		СтруктураОтбора=Новый Структура;
		СтруктураОтбора.Вставить("ИмяПараметра",ИмяГруппировкиДляРасшифровки);
		СтруктураОтбора.Вставить("ЗначениеОтбора",ИмяГруппировкиДляРасшифровки);
		СтруктураОтбора.Вставить("УточнениеСпособаОпределения",ПолучитьДанныеОбъектаCOM(Выборка,ТекущееИмяГруппировки));
		
		ДополнительныеОтборы.Добавить(СтруктураОтбора);
	 			
	КонецЦикла;

	Возврат ДополнительныеОтборы;
	
КонецФункции


Функция ПолучитьДанныеОбъектаCOM(Выборка,ИмяГруппировки)
	
	Если ВнешняяИБ=0 Тогда
		
		Возврат Выборка[ИмяГруппировки];
		
	КонецЕсли;
	
	ЗначениеCOM=Выборка[ИмяГруппировки];
	ТипДанных=РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLTypeOf(ТекСоединениеВИБ,ЗначениеCOM);
	
	ДанныеОбъекта=Новый Структура;
	
	Если ТипДанных=Неопределено Тогда
		
		ДанныеОбъекта.Вставить("ТипОбъектаМетаданных","Простой");
		ДанныеОбъекта.Вставить("ДанныеДляПоиска",Неопределено);
		Возврат ДанныеОбъекта;

	КонецЕсли;
	
	СтрокаТипа=РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLTypeOf(ТекСоединениеВИБ,ЗначениеCOM).TypeName;
	
	Если СтрНайти(СтрокаТипа,"EnumRef")>0 Тогда
		
		ТекстПеречисления=РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLString(ТекСоединениеВИБ,ЗначениеCOM);
		
		ДанныеДляПоиска=Новый СписокЗначений;
		ДанныеДляПоиска.Добавить(СтрЗаменить(СтрокаТипа,"EnumRef","Перечисление")+"."+ТекстПеречисления,ТекстПеречисления,Истина);
		
		ДанныеОбъекта.Вставить("ТипОбъектаМетаданных","Перечисление");
		ДанныеОбъекта.Вставить("ИмяОбъектаМетаданных",СтрЗаменить(СтрокаТипа,"EnumRef.",""));
		ДанныеОбъекта.Вставить("ДанныеДляПоиска",ДанныеДляПоиска);
			
	ИначеЕсли СтрНайти(СтрокаТипа,"DocumentRef")>0 Тогда
				
		ДанныеОбъекта.Вставить("ТипОбъектаМетаданных","Документ");
		ДанныеОбъекта.Вставить("ИмяОбъектаМетаданных",СтрЗаменить(СтрокаТипа,"DocumentRef.",""));
		ДанныеОбъекта.Вставить("Ссылка",РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLString(ТекСоединениеВИБ,ЗначениеCOM.UUID()));
		
	ИначеЕсли СтрНайти(СтрокаТипа,"CatalogRef")>0 Тогда
		
		ДанныеОбъекта.Вставить("ТипОбъектаМетаданных","Справочник");
		ДанныеОбъекта.Вставить("ИмяОбъектаМетаданных",СтрЗаменить(СтрокаТипа,"CatalogRef.",""));
		ДанныеОбъекта.Вставить("Ссылка",РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLString(ТекСоединениеВИБ,ЗначениеCOM.UUID()));	
		
		ДанныеДляПоиска=Новый СписокЗначений;
		
		СправочникБД     = ТекСоединениеВИБ.Metadata.Catalogs[ДанныеОбъекта.ИмяОбъектаМетаданных];
		КодНеИспользуется = СправочникБД.ДлинаКода = 0;
		
		Если КодНеИспользуется Тогда
			
			ДанныеДляПоиска.Добавить(Выборка[ИмяГруппировки+"Наименование"],Выборка[ИмяГруппировки+"Наименование"],Ложь);
			
		Иначе
			
			ДанныеДляПоиска.Добавить(Выборка[ИмяГруппировки+"Код"],Выборка[ИмяГруппировки+"Наименование"],Истина);
			
		КонецЕсли;
		
		ДанныеОбъекта.Вставить("ДанныеДляПоиска",ДанныеДляПоиска);
				
	ИначеЕсли СтрНайти(СтрокаТипа,"ChartOfCharacteristicTypesRef")>0 Тогда
		
		ДанныеОбъекта.Вставить("ТипОбъектаМетаданных","ПланВидовХарактеристик");
		ДанныеОбъекта.Вставить("ИмяОбъектаМетаданных",СтрЗаменить(СтрокаТипа,"ChartOfCharacteristicTypesRef.",""));
		ДанныеОбъекта.Вставить("Ссылка",РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLString(ТекСоединениеВИБ,ЗначениеCOM.UUID()));	
		
		ДанныеДляПоиска=Новый СписокЗначений;
		
		СправочникБД     = ТекСоединениеВИБ.Metadata.ChartsOfCharacteristicTypes[ДанныеОбъекта.ИмяОбъектаМетаданных];
		КодНеИспользуется = СправочникБД.ДлинаКода = 0;
		
		Если КодНеИспользуется Тогда
			
			ДанныеДляПоиска.Добавить(Выборка[ИмяГруппировки+"Наименование"],Выборка[ИмяГруппировки+"Наименование"],Ложь);
			
		Иначе
			
			ДанныеДляПоиска.Добавить(Выборка[ИмяГруппировки+"Код"],Выборка[ИмяГруппировки+"Наименование"],Истина);
			
		КонецЕсли;
		
		ДанныеОбъекта.Вставить("ДанныеДляПоиска",ДанныеДляПоиска);
		
	Иначе
		
		ДанныеОбъекта.Вставить("ТипОбъектаМетаданных","Простой");
		ДанныеОбъекта.Вставить("ДанныеДляПоиска",ЗначениеCOM);
		
	КонецЕсли;
	
	Возврат ДанныеОбъекта;
		
КонецФункции // ПолучитьДанныеОбъъектаCOM()

Функция ПривестиКЧислу(Значение) Экспорт
	
	Если Значение = NULL Тогда
		Возврат 0;
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции


// Функция возвращает представление периода строкой
//
// Параметры:
//  ДатаПериода - Дата в интревале опредеяемого периода
//
// Возвращаемое значение:
//  Строковое представление интервала
//
Функция ПолучитьПериодДатСтрокой(Знач Период, Знач ДатаПериода)

	ПериодСтр = Период;
	Если ПериодСтр = "ДЕНЬ" тогда
		ДатаНачала    = НачалоДня(ДатаПериода);
		ДатаОкончания = КонецДня(ДатаПериода);
	ИначеЕсли ПериодСтр = "НЕДЕЛЯ" тогда
		ДатаНачала    = НачалоНедели(ДатаПериода);
		ДатаОкончания = КонецНедели (ДатаПериода);
	ИначеЕсли ПериодСтр = "МЕСЯЦ" тогда
		ДатаНачала    = НачалоМесяца(ДатаПериода);
		ДатаОкончания = КонецМесяца (ДатаПериода);
	ИначеЕсли ПериодСтр = "КВАРТАЛ" тогда
		ДатаНачала    = НачалоКвартала(ДатаПериода);
		ДатаОкончания = КонецКвартала (ДатаПериода);
	ИначеЕсли ПериодСтр = "ГОД" тогда
		ДатаНачала    = НачалоГода(ДатаПериода);
		ДатаОкончания = КонецГода (ДатаПериода);
	КонецЕсли;

	Возврат ПредставлениеПериода(ДатаНачала, ДатаОкончания, "ФП=Истина")

КонецФункции


////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОСВ ПО СЧЕТУ

// процедура выводит итоги отчета оборотно сальдовая ведомость по счету
Процедура ВывестиИтогиОборотноСальдовойВедомостиПоСчету(Выборка,ФорматПоказателей,ОбластьИтогиСтрокаЧисла,ОбластьИтогиЧислаМакет,ОбластьИтогиСтрокаСчет,ДокументРезультат, ВыводитьРазвернутоеСальдо = Ложь)
	
	ЭтоПерваяСтрока = Ложь;
	
	ДанныеРасшифровки=Новый Соответствие;
	ДанныеРасшифровки.Вставить("Счет",ДанныеСчета.Код);
	
	СписокРасшифровки=Новый СписокЗначений;
	СписокРасшифровки.Добавить(ДанныеРасшифровки);

	Для Каждого СтрРесурс Из МассивВыводимыхРесурсов Цикл
		
		Если НЕ ПустаяСтрока(СтрРесурс.ПризнакУчета) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоказателя=СтрРесурс.ИмяПоля;

		Если ЭтоПерваяСтрока = Истина Тогда
			Область = ОбластьИтогиСтрокаЧисла;
		Иначе
			Область = ОбластьИтогиЧислаМакет;
		КонецЕсли;

		ФорматПоказателя = "";
		ФорматПоказателей.Свойство(ИмяПоказателя, ФорматПоказателя);

		НачальныйОстатокДт = Выборка[ИмяПоказателя + "НачальныйОстатокДт"];
		НачальныйОстатокКт = Выборка[ИмяПоказателя + "НачальныйОстатокКт"];
		ОборотДт           = Выборка[ИмяПоказателя + "ОборотДт"];
		ОборотКт           = Выборка[ИмяПоказателя + "ОборотКт"];
		КонечныйОстатокДт  = Выборка[ИмяПоказателя + "КонечныйОстатокДт"];
		КонечныйОстатокКт  = Выборка[ИмяПоказателя + "КонечныйОстатокКт"];
		
		Если ДанныеСчета.Вид = "Активный" Тогда 
			
			Если НачальныйОстатокДт = 0 Тогда
				НачальныйОстатокДт = -НачальныйОстатокКт;
				НачальныйОстатокКт = 0;
			КонецЕсли;
			
			Если КонечныйОстатокДт = 0 Тогда
				КонечныйОстатокДт = -КонечныйОстатокКт;
				КонечныйОстатокКт = 0;
			КонецЕсли;
			
		ИначеЕсли ДанныеСчета.Вид = "Пассивный" Тогда
			
			Если НачальныйОстатокКт = 0 Тогда
				НачальныйОстатокКт = -НачальныйОстатокДт;
				НачальныйОстатокДт = 0;
			КонецЕсли;
			
			Если КонечныйОстатокКт = 0 Тогда
				КонечныйОстатокКт = -КонечныйОстатокДт;
				КонечныйОстатокДт = 0;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыводитьРазвернутоеСальдо И НачальныйОстатокДт <> Неопределено Тогда
			
			НачальныйОстаток = НачальныйОстатокДт - НачальныйОстатокКт;
			Если НачальныйОстаток > 0 Тогда
				НачальныйСвернутыйОстатокДт = НачальныйОстаток;
				НачальныйСвернутыйОстатокКт = 0;
			Иначе
				НачальныйСвернутыйОстатокДт = 0;
				НачальныйСвернутыйОстатокКт = - НачальныйОстаток;
			КонецЕсли;
			
			КонечныйОстаток = КонечныйОстатокДт - КонечныйОстатокКт;
			Если КонечныйОстаток > 0 Тогда
				КонечныйСвернутыйОстатокДт = КонечныйОстаток;
				КонечныйСвернутыйОстатокКт = 0;
			Иначе
				КонечныйСвернутыйОстатокДт = 0;
				КонечныйСвернутыйОстатокКт = - КонечныйОстаток;
			КонецЕсли;
			
			Область.Параметры.НачальныйРазвернутыйОстатокДт = Формат(НачальныйОстатокДт, ФорматПоказателя);
			Область.Параметры.НачальныйРазвернутыйОстатокКт = Формат(НачальныйОстатокКт, ФорматПоказателя);
			Область.Параметры.НачальныйОстатокДт = Формат(НачальныйСвернутыйОстатокДт, ФорматПоказателя);
			Область.Параметры.НачальныйОстатокКт = Формат(НачальныйСвернутыйОстатокКт, ФорматПоказателя);
			Область.Параметры.ОборотДт           = Формат(ОборотДт, ФорматПоказателя);
			Область.Параметры.ОборотКт           = Формат(ОборотКт, ФорматПоказателя);
			Область.Параметры.КонечныйРазвернутыйОстатокДт  = Формат(КонечныйОстатокДт, ФорматПоказателя);
			Область.Параметры.КонечныйРазвернутыйОстатокКт  = Формат(КонечныйОстатокКт, ФорматПоказателя);
			Область.Параметры.КонечныйОстатокДт  = Формат(КонечныйСвернутыйОстатокДт, ФорматПоказателя);
			Область.Параметры.КонечныйОстатокКт  = Формат(КонечныйСвернутыйОстатокКт, ФорматПоказателя);
			Область.Параметры.РасшифровкаИтого	 = СписокРасшифровки;	
			
		Иначе
			
			Область.Параметры.НачальныйОстатокДт = Формат(НачальныйОстатокДт, ФорматПоказателя);
			Область.Параметры.НачальныйОстатокКт = Формат(НачальныйОстатокКт, ФорматПоказателя);
			Область.Параметры.ОборотДт           = Формат(ОборотДт, ФорматПоказателя);
			Область.Параметры.ОборотКт           = Формат(ОборотКт, ФорматПоказателя);
			Область.Параметры.КонечныйОстатокДт  = Формат(КонечныйОстатокДт, ФорматПоказателя);
			Область.Параметры.КонечныйОстатокКт  = Формат(КонечныйОстатокКт, ФорматПоказателя);
			Область.Параметры.РасшифровкаИтого	 = СписокРасшифровки;
			
		КонецЕсли;

		Если ЭтоПерваяСтрока = Истина Тогда
			ДокументРезультат.Вывести(ОбластьИтогиСтрокаСчет, 1);
		КонецЕсли;

		ДокументРезультат.Присоединить(Область);
		
		ЭтоПерваяСтрока = Истина;

	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьТекстЗапросаОСВ(СтруктураПараметров,ПолнаяОСВ=Ложь)
	
	Если ПолнаяОСВ Тогда
		
		Текст=
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиИОбороты.Счет КАК Счет,
		|	ОстаткиИОбороты.Счет.Код КАК СчетКод,
		|	ОстаткиИОбороты.Счет.Наименование КАК СчетНаименование,
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Счет)КАК СчетПредставление,
		|	ОстаткиИОбороты.Счет.Забалансовый КАК СчетЗабалансовый";
			
	Иначе
		
		Если ПоСубсчетам Тогда
			Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОстаткиИОбороты.Счет КАК Счет,
			|	ОстаткиИОбороты.Счет.Код КАК СчетКод,
			|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Счет) КАК СчетПредставление";
		Иначе
			Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	&Счет КАК Счет,
			|	&СчетКод КАК СчетКод,
			|	ПРЕДСТАВЛЕНИЕ(&Счет) КАК СчетПредставление";
			
			ОбъектЗапрос.УстановитьПараметр("СчетКод",ДанныеСчета.Код);
			
		КонецЕсли;
		
	КонецЕсли;
			
	Если МассивДопИзмерений.Количество()>0 Тогда 
		
		Для Каждого Измерение ИЗ МассивДопИзмерений Цикл
			
			Текст = Текст + ",
			|	ОстаткиИОбороты."+Измерение+" КАК "+Измерение+",
			|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты."+Измерение+") КАК "+Измерение+"Представление";
				
		КонецЦикла;
		
	КонецЕсли;
	
	Текст = Текст + ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(Истина, 
		Истина, Истина, РазвернутоеСальдо);
		
    ТекстПоля = "";
	ТекстИтоги = "";
	ТекстПорядок = "";
	ТекстОтбор= "";
	
	ТаблицаГруппировок=ИспользуемыеПоляДетализации.Скопировать();
	ТаблицаГруппировок.Индексы.Добавить("ПсевдонимПоля");
	
	Если НЕ ПолнаяОСВ Тогда
		
		Для каждого СтрИзмерение Из ИспользуемыеПоляДетализации Цикл
			
			ПолеЗапроса=СтрИзмерение.ПолеЗапроса;
			
			ТекстПоля = ТекстПоля + ", " + ПолеЗапроса + " КАК " + СтрИзмерение.ПсевдонимПоля;
			
			Если НЕ СтрИзмерение.ТипМетаДанных="Простой" Тогда
				ТекстПоля = ТекстПоля + ", ПРЕДСТАВЛЕНИЕ(" + ПолеЗапроса + ") КАК " + СтрИзмерение.ПсевдонимПоля + "Представление";
			КонецЕсли;
			
			Если СтрИзмерение.ТипМетаДанных="Справочник" Тогда
								
				Если СтрИзмерение.ЕстьКод Тогда
					ТекстПоля = ТекстПоля + ", "+ПолеЗапроса+".Код КАК "+СтрИзмерение.ПсевдонимПоля+"Код";
				КонецЕсли;
				
				Если СтрИзмерение.ЕстьНаименование Тогда
					ТекстПоля = ТекстПоля + ", "+ПолеЗапроса+".Наименование КАК "+СтрИзмерение.ПсевдонимПоля+"Наименование";
				КонецЕсли;
				
			КонецЕсли;
			
			ТекстИтоги = ТекстИтоги + ", " + СтрИзмерение.ПсевдонимПоля;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Для Каждого СтрПараметр ИЗ ИспользуемыеПараметры Цикл
				
		ТекстОтбор=ТекстОтбор+" И "+СтрПараметр.КонструкцияОтбора;
		
	КонецЦикла;
 	
	Текст = Текст + 
			ТекстПоля + " 
	|
	|ИЗ
	|	РегистрБухгалтерии."+ДанныеРегистра.НаименованиеРегистра+".ОстаткиИОбороты(&ДатаНач, &ДатаКон, , ,";
	
	Если ПолнаяОСВ Тогда
		
		Если НЕ ПоЗабалансовымСчетам Тогда
			Текст=Текст+"НЕ Счет.Забалансовый,";
		Иначе
			Текст=Текст+",";
		КонецЕсли;
		
	Иначе
		
		Текст=Текст+"Счет В ИЕРАРХИИ (&Счет),";
		
	КонецЕсли;
	
	Текст=Текст+"
	|"+?(ДанныеРегистра.МаксимальноеКоличествоСубконто>0,", ","") + Сред(ТекстОтбор,3) + ") КАК ОстаткиИОбороты
	|";
	
	ТекстИтогов = ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(Ложь,,, РазвернутоеСальдо);
	
	Текст = Текст + Символы.ПС + "ИТОГИ" + Символы.ПС + Сред(ТекстИтогов, 2);
				
	Текст = Текст + "
	|	ПО ОБЩИЕ";
	
	Если ПоСубсчетам ИЛИ ПолнаяОСВ Тогда
		
		Текст = Текст + ",
		|	Счет ИЕРАРХИЯ КАК Счет ";
		
	КонецЕсли;
	
	Если МассивДопИзмерений.Количество()>0 Тогда
		
		Для Каждого ДопИзмерение ИЗ МассивДопИзмерений Цикл 
			
			Текст = Текст + ",
			|"+ДопИзмерение;
			
		КонецЦикла;
		
	КонецЕсли;

	Текст = Текст + ТекстИтоги + "
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ОбъектЗапрос.Текст = Текст;
	
КонецПроцедуры // СформироватьТекстЗапросаОСВ() 

Функция ПолучитьОСВПоСчету()
	
	ДокументРезультат=Новый ТабличныйДокумент;
	
    Если Не ЗначениеЗаполнено(ДанныеСчета.Код) Тогда
		
		ТекстОшибки= Нстр("ru = 'Не выбран счет!'");
		Возврат ДокументРезультат;
		
	КонецЕсли;
	
	МассивГруппировок 		= СформироватьМассивГруппировок();   
		
	Макет       = ПолучитьМакет("ОборотноСальдоваяВедомостьПоСчету");
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	// Наклонный шрифт групп
	ШрифтГрупп = Новый Шрифт(Макет.Область("СтрокаПоказателя|Счет").Шрифт,,,,Истина);

	ВысотаЗаголовка=0;
	СформироватьИВывестиЗаголовокОтчета(ДокументРезультат, ВысотаЗаголовка, Истина);
			
	// Формат показателей
	СтруктураФорматовПоказателей = Новый Структура;
	
	Для Каждого Ресурс Из МассивВыводимыхРесурсов Цикл
			
		СтруктураФорматовПоказателей.Вставить(Ресурс.ИмяПоля ,"ЧЦ = 15 ; ЧДЦ = 2");
					
	КонецЦикла;
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("ЗаголовокОтчета");	
	ДокументРезультат.Вывести(ЗаголовокОтчета, 1);
	
	ТекстРазвернутоеСальдо = ?(РазвернутоеСальдо, "РазвернутоеСальдо", "");
	ОбластьИтогиСтрокаЧисла = Макет.ПолучитьОбласть("ИтогиСтрока" + ТекстРазвернутоеСальдо + "|Числа");
	ОбластьИтогиЧислаМакет  = Макет.ПолучитьОбласть("Итоги"       + ТекстРазвернутоеСальдо + "|Числа");
	ОбластьИтогиСтрокаСчет  = Макет.ПолучитьОбласть("ИтогиСтрока" + ТекстРазвернутоеСальдо + "|Счет");
	ОбластьИтогиСчет        = Макет.ПолучитьОбласть("Итоги"       + ТекстРазвернутоеСальдо + "|Счет");
	ОбластьСтрокаСчет       = Макет.ПолучитьОбласть("Строка|Счет");
	ОбластьСтрокаЧисла      = Макет.ПолучитьОбласть("Строка|Числа");
	ОбластьСтрокаПоказателяСчет  = Макет.ПолучитьОбласть("СтрокаПоказателя|Счет");
	ОбластьСтрокаПоказателяЧисла = Макет.ПолучитьОбласть("СтрокаПоказателя|Числа");

	СоответствиеСчетовПредков = ВернутьСоответствиеСчетовПредков();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбластьСтрокаСчет", ОбластьСтрокаСчет);
	СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяСчет",ОбластьСтрокаПоказателяСчет);
	СтруктураПараметров.Вставить("ДокументРезультат", ДокументРезультат);
	СтруктураПараметров.Вставить("ШрифтГрупп", ШрифтГрупп);
	СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяЧисла", ОбластьСтрокаПоказателяЧисла);
	СтруктураПараметров.Вставить("ОбластьСтрокаЧисла", ОбластьСтрокаЧисла);
	СтруктураПараметров.Вставить("ФорматПоказателей", СтруктураФорматовПоказателей);
	СтруктураПараметров.Вставить("НетЛинии", Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 1));
	СтруктураПараметров.Вставить("МассивГруппировок", МассивГруппировок);
	СтруктураПараметров.Вставить("СоответствиеСчетовПредков", СоответствиеСчетовПредков);
	СтруктураПараметров.Вставить("ТаблицаДопИзмерений", ТаблицаДопИзмерений);
	
	//Формирование запроса
	СформироватьТекстЗапросаОСВ(СтруктураПараметров);
	РезультатЗапроса = ОбъектЗапрос.Выполнить();

	Если РезультатЗапроса.IsEmpty() Тогда
		Возврат ДокументРезультат;
	КонецЕсли;
	
	ДокументРезультат.НачатьАвтогруппировкуСтрок();

	Если МассивГруппировок.Количество() > 0 Тогда
		
		ВывестиГруппировкуОборотноСальдовойВедомостиПоСчету(РезультатЗапроса.Выбрать(?(ВнешняяИБ=0,QueryResultIteration.ByGroups,ТекСоединениеВИБ.QueryResultIteration.ByGroups), МассивГруппировок[0]), 
							0, СтруктураПараметров);
	КонецЕсли;

	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();

	ИтогиПодвал = Макет.ПолучитьОбласть("ИтогиПодвал");

	// Выведем общие итоги
	Выборка = РезультатЗапроса.Выбрать(?(ВнешняяИБ=0,QueryResultIteration.ByGroups,ТекСоединениеВИБ.QueryResultIteration.ByGroups), "ОБЩИЕ");
	Выборка.Следующий();
	ВыводимаяОбласть = ОбластьИтогиСчет;
	ДокументРезультат.Вывести(ВыводимаяОбласть, 1);
	
	ВывестиИтогиОборотноСальдовойВедомостиПоСчету(Выборка, СтруктураФорматовПоказателей, ОбластьИтогиСтрокаЧисла, ОбластьИтогиЧислаМакет, ОбластьИтогиСтрокаСчет, ДокументРезультат, РазвернутоеСальдо);

	ДокументРезультат.Вывести(ИтогиПодвал, 1);
	
	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 3;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "ОборотноСальдоваяВедомостьПоСчету " + ДанныеРегистра.НаименованиеРегистра;

	Возврат ДокументРезультат;
		
КонецФункции // ПолучитьОСВПоСчету() 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ АНАЛИЗА СЧЕТА

Функция ПолучитьАнализСчета()
	
	ДокументРезультат=Новый ТабличныйДокумент;
	
    Если НЕ ЗначениеЗаполнено(ДанныеСчета.Код) Тогда
		
		ТекстОшибки=Нстр("ru = 'Не выбран счет!'");
		Возврат ДокументРезультат;
		
	КонецЕсли;
	
	ЗапросОстатки	= НастроитьОбъектЗапрос();
	ЗапросОбороты 	= НастроитьОбъектЗапрос();
	
	Периодичность = Период;
	
	ТекстСубконто = "";
	ТекстСубконтоИзмерения = "";
	
	ТекстОтбор = "";
	
	МассивСубконто = Новый Массив;
	ЕстьПериод = (Не ПустаяСтрока(Период)) И (Не ВРег(Период) = "ПЕРИОД");
	МассивГруппировок=Новый Массив;
	МассивГруппировок.Добавить("Счет");
	
	Если МассивДопИзмерений.Количество()>0 Тогда 
		
		Для Каждого Измерение ИЗ МассивДопИзмерений Цикл
			
			ТекстСубконтоИзмерения = ТекстСубконтоИзмерения + ",
			|	"+Измерение+" КАК "+Измерение+",
			|	ПРЕДСТАВЛЕНИЕ("+Измерение+") КАК "+Измерение+"Представление";
			
			МассивГруппировок.Добавить(Измерение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого СтрИзмерение Из ИспользуемыеПоляДетализации Цикл
		
		ПолеЗапроса=СтрИзмерение.ПолеЗапроса;
		
		ТекстСубконто = ТекстСубконто + ", " + ПолеЗапроса + " КАК " + СтрИзмерение.ПсевдонимПоля;
		ТекстСубконтоИзмерения = ТекстСубконтоИзмерения + ", " + ПолеЗапроса + " КАК " + СтрИзмерение.ПсевдонимПоля;
		
		МассивГруппировок.Добавить(СтрИзмерение.ПсевдонимПоля);
	
		Если НЕ СтрИзмерение.ТипМетаДанных="Простой" Тогда
			ТекстСубконто = ТекстСубконто + ", ПРЕДСТАВЛЕНИЕ(" + ПолеЗапроса + ") КАК " + СтрИзмерение.ПсевдонимПоля + "Представление";
		Иначе
			ТекстСубконто = ТекстСубконто +  ПолеЗапроса + " КАК " + СтрИзмерение.ПсевдонимПоля + "Представление"
		КонецЕсли;
		
		Если СтрИзмерение.ТипМетаДанных="Справочник" Тогда
						
			Если СтрИзмерение.ЕстьКод Тогда
				ТекстСубконто = ТекстСубконто + ", "+ПолеЗапроса+".Код КАК "+СтрИзмерение.ПсевдонимПоля+"Код";
			КонецЕсли;
			
			Если СтрИзмерение.ЕстьНаименование Тогда
				ТекстСубконто = ТекстСубконто + ", "+ПолеЗапроса+".Наименование КАК "+СтрИзмерение.ПсевдонимПоля+"Наименование";
			КонецЕсли;
			
		КонецЕсли;
		
		МассивСубконто.Добавить(СтрИзмерение.ПсевдонимПоля);
	 				
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстСубконто) Тогда
		ТекстСубконто=Сред(ТекстСубконто,2)+",";
	КонецЕсли;
	
	Для Каждого СтрПараметр ИЗ ИспользуемыеПараметры Цикл
			
		ТекстОтбор=ТекстОтбор+" И "+СтрПараметр.КонструкцияОтбора;
		
	КонецЦикла;
	
	СоответствиеКорСубконто = Новый Соответствие;
	
	Если ПоКорСубсчетамИСубконто Тогда
		
		Для Каждого Строка Из ПравилаИтоги Цикл
			
			Инд=1;
			
			Для Каждого СтрокаСубконто Из Строка.Субконто Цикл
				
				Если СтрокаСубконто.Пометка Тогда
					
					СоответствиеКорСубконто.Вставить("Субконто"+Инд, "Субконто"+Инд);
					Инд=Инд+1;
					
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстКорСубконто = "";
	ТекстКорСубконтоИтоги = "";
	
	МассивГруппировок.Добавить("КорСчет");
	
	Для Каждого Элемент Из СоответствиеКорСубконто Цикл
		
		ТекстКорСубконто      = ТекстКорСубконто             + "Кор" +Элемент.Ключ          + " КАК " + "Кор" +Элемент.Ключ + ",
		|ПРЕДСТАВЛЕНИЕ(Кор"+Элемент.Ключ+") КАК Кор"+Элемент.Ключ+"Представление,";
		ТекстКорСубконтоИтоги = ТекстКорСубконтоИтоги + ", " + "Кор" +Элемент.Ключ + " ИЕРАРХИЯ КАК " + "Кор" +Элемент.Ключ;
		
		МассивГруппировок.Добавить(Элемент.Ключ);
		
	КонецЦикла;
	
	Если ПоСубсчетамИСубконто Тогда
		
		ТекстСчет = 
		"	Счет КАК Счет, 
		|	Счет.Вид КАК ВидСчета,
		|	Счет.Код КАК СчетКод,
		|	Счет.Порядок КАК СчетПорядок, 
		|	Счет.Представление КАК СчетПредставление,";
		
	Иначе
		
		ТекстСчет = 
		"	&Счет КАК Счет,
		|	&СчетКод КАК СчетКод,";
		
		ЗапросОбороты.УстановитьПараметр("Счет",СчетСсылкаБД);
		ЗапросОстатки.УстановитьПараметр("Счет",СчетСсылкаБД);
		
		ЗапросОбороты.УстановитьПараметр("СчетКод",СчетСсылкаБД.Код);
		ЗапросОстатки.УстановитьПараметр("СчетКод",СчетСсылкаБД.Код);
		
	КонецЕсли;
		
	ТекстОбороты = "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ТекстСчет + ТекстСубконто + "
	|	КорСчет.Ссылка КАК КорСчет,
	|	КорСчет.Код КАК КорСчетКод, 
	|	КорСчет.Порядок КАК КорСчетПорядок, 
	|	КорСчет.Представление КАК КорСчетПредставление," + ТекстКорСубконто + "";
	
	ТекстОстатки = "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ТекстСчет +  ТекстСубконто + "";
	
	ТекстИзмерения="";
	
	Для Каждого Измерение ИЗ МассивДопИзмерений Цикл
		
		ТекстИзмерение = " Таблица."+Измерение+" КАК "+Измерение+", Таблица."+Измерение+".Представление КАК "+Измерение+"Представление,";
		ТекстОбороты = ТекстОбороты + ТекстИзмерение;
		ТекстОстатки = ТекстОстатки + ТекстИзмерение;
		
	КонецЦикла;
	
	Если ЕстьПериод Тогда
		
		ТекстОбороты = ТекстОбороты + " Период,";
		ТекстОстатки = ТекстОстатки + " Период,";
		
	КонецЕсли;
	
	Для каждого СтрРесурс Из МассивВыводимыхРесурсов Цикл
		
		ИмяРесурса=СтрРесурс.ИмяПоля;
		
		ТекстОбороты = ТекстОбороты + "
		|	" +ИмяРесурса+ "ОборотДт КАК " +ИмяРесурса+ "ОборотДт,
		|	" +ИмяРесурса+ "ОборотКт КАК " +ИмяРесурса+ "ОборотКт,";
		ТекстРазвернутоеСальдо = ?(РазвернутоеСальдо, "Развернутый", "");
		ТекстОстатки = ТекстОстатки + "
		|	" +ИмяРесурса+ "Начальный" + ТекстРазвернутоеСальдо + "ОстатокДт КАК " +ИмяРесурса+ "НачДт,
		|	" +ИмяРесурса+ "Начальный" + ТекстРазвернутоеСальдо + "ОстатокКт КАК " +ИмяРесурса+ "НачКт,
		|	" +ИмяРесурса+ "Конечный"  + ТекстРазвернутоеСальдо + "ОстатокДт КАК " +ИмяРесурса+ "КонДт,
		|	" +ИмяРесурса+ "Конечный"  + ТекстРазвернутоеСальдо + "ОстатокКт КАК " +ИмяРесурса+ "КонКт,
		|	" +ИмяРесурса+ "ОборотДт КАК " +ИмяРесурса+ "ЕстьОборотДт,
		|	" +ИмяРесурса+ "ОборотКт КАК " +ИмяРесурса+ "ЕстьОборотКт,";
		
	КонецЦикла;
	
	ТекстОстатки = Лев(ТекстОстатки, СтрДлина(ТекстОстатки) - 1);
	ТекстОбороты = Лев(ТекстОбороты, СтрДлина(ТекстОбороты) - 1);
	
	ТекстОбороты = ТекстОбороты + "
	|ИЗ
	|	РегистрБухгалтерии."+ДанныеРегистра.НаименованиеРегистра+".Обороты(&ДатаНач, &ДатаКон, "+Периодичность+", Счет В ИЕРАРХИИ (&Счет), , " + Сред(ТекстОтбор, 3) + ") КАК Таблица
	|";
	
	ТекстОстатки = ТекстОстатки + "
	|ИЗ
	|	РегистрБухгалтерии."+ДанныеРегистра.НаименованиеРегистра+".ОстаткиИОбороты(&ДатаНач, &ДатаКон, "+Периодичность+", ДвиженияИГраницыПериода, счет В ИЕРАРХИИ (&счет),"+?(ДанныеРегистра.МаксимальноеКоличествоСубконто>0,", ","") + Сред(ТекстОтбор, 3) + ") КАК Таблица
	|";
	
	ТекстИтогиОбороты = "";
	ТекстИтогиОстатки = "";
	ТекстПорядок = "";
	
	Если ПоСубсчетамИСубконто Тогда
		
		ТекстПорядок = ТекстПорядок + ", СчетПорядок";
		
	КонецЕсли;
	
	Для каждого СтрИзмерение Из ИспользуемыеПоляДетализации Цикл
		
		ТекстПорядок = ТекстПорядок + ", " + СтрЗаменить(СтрИзмерение.ИмяПоля,"Дт","");

	КонецЦикла;
	
	Для каждого Измерение Из МассивДопИзмерений Цикл
		
		ТекстПорядок = ТекстПорядок + ", " + Измерение;

	КонецЦикла;
	
	Если ЕстьПериод Тогда
		
		ТекстПорядок = ТекстПорядок + ", Период";
		
	КонецЕсли;
	
	ТекстОбороты = ТекстОбороты + "
	|УПОРЯДОЧИТЬ ПО " + Сред(ТекстПорядок + ", КорСчетПорядок", 2);
	
	Если Не ПустаяСтрока(ТекстПорядок) Тогда
		
		ТекстОстатки = ТекстОстатки + "
		|УПОРЯДОЧИТЬ ПО " + Сред(ТекстПорядок, 2);
		
	КонецЕсли;
	
	Для каждого СтрРесурс Из МассивВыводимыхРесурсов Цикл
		
		ИмяРесурса=СтрРесурс.ИмяПоля;
		
		ТекстИтогиОбороты = ТекстИтогиОбороты + ",
		|	СУММА(" +ИмяРесурса+ "ОборотДт),
		|	СУММА(" +ИмяРесурса+ "ОборотКт)";

		ТекстИтогиОстатки = ТекстИтогиОстатки + ",
		|	СУММА(" +ИмяРесурса+ "НачДт),
		|	СУММА(" +ИмяРесурса+ "НачКт),
		|	СУММА(" +ИмяРесурса+ "КонДт),
		|	СУММА(" +ИмяРесурса+ "КонКт),
		|	СУММА(" +ИмяРесурса+ "ЕстьОборотДт),
		|	СУММА(" +ИмяРесурса+ "ЕстьОборотКт)";

	КонецЦикла;
	
	ТекстОбороты = ТекстОбороты + "
	|ИТОГИ " + Сред(ТекстИтогиОбороты, 2)+ "
	|	ПО ОБЩИЕ";
	
	ТекстОстатки = ТекстОстатки + "
	|ИТОГИ " + Сред(ТекстИтогиОстатки, 2)+ "
	|	ПО ОБЩИЕ";
	
	Если ПоСубсчетамИСубконто Тогда
		
		ТекстОбороты = ТекстОбороты +	",
		|	Счет ИЕРАРХИЯ КАК Счет";
		ТекстОстатки = ТекстОстатки +	",
		|	Счет ИЕРАРХИЯ КАК Счет";
		
	КонецЕсли;
	
	// добавим итоги по субконто
	ТекстОбороты = ТекстОбороты + ТекстСубконтоИзмерения;
	ТекстОстатки = ТекстОстатки + ТекстСубконтоИзмерения;
	
	Если ЕстьПериод Тогда
		
		ТекстОбороты = ТекстОбороты + ", Период КАК Период";
		ТекстОстатки = ТекстОстатки + ", Период КАК Период";
		
	КонецЕсли;
	
	ТекстОбороты = ТекстОбороты + ", КорСчет ИЕРАРХИЯ КАК КорСчет";
	
	ТекстОбороты = ТекстОбороты + ТекстКорСубконтоИтоги;
		
	ТекстОбороты = ТекстОбороты + "
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ТекстОстатки = ТекстОстатки + "
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ЗапросОбороты.Текст = ТекстОбороты;
	ЗапросОстатки.Текст = ТекстОстатки;
	
	РезультатОбороты = ЗапросОбороты.Выполнить();
	РезультатОстатки = ЗапросОстатки.Выполнить();
	
	ВысотаЗаголовка=0;
	СформироватьИВывестиЗаголовокОтчета(ДокументРезультат, ВысотаЗаголовка, Истина);
	Макет=ПолучитьМакет("АнализСчета");

	ОбластьОсновногоЗаголовка= Макет.ПолучитьОбласть("ЗаголовокТаблицы|ОсновныеКолонки");
	ОбластьОсновногоЗаголовка.Параметры.Д="Д";
	ОбластьОсновногоЗаголовка.Параметры.К="К";
	ДокументРезультат.Вывести(ОбластьОсновногоЗаголовка);
		
	ЗаголовокДопКолонок=Макет.ПолучитьОбласть("ЗаголовокТаблицы|ДополнительныеКолонки");
	
	Для Инд=1 По МассивБалансовыеБезИзмерений.Количество()-1 Цикл
		
		СтрРесурс=ТабВыводимыеРесурсы.Найти(МассивБалансовыеБезИзмерений[Инд],"ИмяПоля");
		
		ЗаголовокДопКолонок.Параметры.ИмяКолонки=СтрРесурс.ПредставлениеПоля;
		ДокументРезультат.Присоединить(ЗаголовокДопКолонок);
		
	КонецЦикла;
	
	Для Инд=0 По МассивБалансовыеСИзмерениями.Количество()-1 Цикл
		
		СтрРесурс=ТабВыводимыеРесурсы.Найти(МассивБалансовыеСИзмерениями[Инд],"ИмяПоля");
		
		ЗаголовокДопКолонок.Параметры.ИмяКолонки=СтрРесурс.ПредставлениеПоля;
		ДокументРезультат.Присоединить(ЗаголовокДопКолонок);
		
	КонецЦикла;
	
	Для Инд=0 По МассивНебалансовыеСИзмерениями.Количество()-1 Цикл
		
		СтрРесурс=ТабВыводимыеРесурсы.Найти(МассивНебалансовыеСИзмерениями[Инд],"ИмяПоля");
		
		ЗаголовокДопКолонок.Параметры.ИмяКолонки=СтрРесурс.ПредставлениеПоля;
		ДокументРезультат.Присоединить(ЗаголовокДопКолонок);
		
	КонецЦикла;
	
	// Счет
	ОбластьСтрокаСчет       	= Макет.ПолучитьОбласть("СтрокаСчет|ОсновныеКолонки");
	ОбластьИтогСчет         	= Макет.ПолучитьОбласть("ИтогСчет|ОсновныеКолонки");
	
	// Измерения
	ОбластьСтрокаИзмерение      = Макет.ПолучитьОбласть("СтрокаИзмерение|ОсновныеКолонки");
	ОбластьИтогИзмерение        = Макет.ПолучитьОбласть("ИтогИзмерение|ОсновныеКолонки");
	
	// Субконто
	ОбластьСтрокаСубконто  		= Макет.ПолучитьОбласть("СтрокаСубконто|ОсновныеКолонки");
	ОбластьИтогСубконто    		= Макет.ПолучитьОбласть("ИтогСубконто|ОсновныеКолонки");
	
	//Периоды
	ОбластьСтрокаПериод  		= Макет.ПолучитьОбласть("СтрокаПериод|ОсновныеКолонки");
	ОбластьИтогПериод    		= Макет.ПолучитьОбласть("ИтогПериод|ОсновныеКолонки");
	
	// КорСчет
	ОбластьСтрокаКорСчет       	= Макет.ПолучитьОбласть("СтрокаКорСчет|ОсновныеКолонки");
	
	// КорСубконто
	ОбластьСтрокаКорСубконто  	= Макет.ПолучитьОбласть("СтрокаКорСубконто|ОсновныеКолонки");
	
	//Дополнительные строуки и колонки	
	ОбластьРесурс				= Макет.ПолучитьОбласть("СтрокаРесурсНач|ОсновныеКолонки");
	ОбластьДопРесурс			= Макет.ПолучитьОбласть("СтрокаРесурсНач|ДополнительныеКолонки");
	ОбластьРесурсОборот			= Макет.ПолучитьОбласть("СтрокаКорСчетРесурс|ОсновныеКолонки");
	ОбластьДопРесурсОборот		= Макет.ПолучитьОбласть("СтрокаКорСчетРесурс|ДополнительныеКолонки");
	ОбластьДопРесурсИтог		= Макет.ПолучитьОбласть("ИтогСчет|ДополнительныеКолонки");
	ОбластьДопРесурсПустая		= Макет.ПолучитьОбласть("СтрокаПериод|ДополнительныеКолонки");
	ОбластьДопРесурсИтогПустая	= Макет.ПолучитьОбласть("ИтогПериод|ДополнительныеКолонки");
	
	Если ЗначениеЗаполнено(Период) Тогда
		ФорматПериода = "";
		Если Врег(Период) = "ГОД" Тогда
			ФорматПериода = Нстр("ru = 'ДФ = ""гггг """"г.""""""'");
		ИначеЕсли Врег(Период) = "КВАРТАЛ" Тогда
			ФорматПериода = Нстр("ru = 'ДФ = ""к"""" квартал"""" гггг """"г.""""""'");
		ИначеЕсли Врег(Период) = "МЕСЯЦ" Тогда
			ФорматПериода = Нстр("ru = 'ДФ = ""ММММ гггг """"г.""""""'");
		ИначеЕсли Врег(Период) = "НЕДЕЛЯ" Тогда
			ФорматПериода = Нстр("ru = 'ДФ = """"""Неделя с"""" дд.ММ.гггг """"""'");
		ИначеЕсли Врег(Период) = "ДЕНЬ" Тогда
			ФорматПериода = "ДЛФ = D";
		КонецЕсли;
		ОбластьСтрокаПериод.Область(1,2).Формат = ФорматПериода;
	КонецЕсли;

	// Сдвиг уровня выводимой группировки отчета относительно группировки запроса
	СдвигУровня = 0;
	
	// Флаг сброса сдвига уровня при выводе группировки по счету
	СброситьСдвигУровня = Истина;

	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ОбластьСтрокаСчет", 		ОбластьСтрокаСчет);
	СтруктураПараметров.Вставить("ОбластьИтогСчет", 		ОбластьИтогСчет);
	СтруктураПараметров.Вставить("ОбластьСтрокаИзмерение", 	ОбластьСтрокаИзмерение);
	СтруктураПараметров.Вставить("ОбластьИтогИзмерение", 	ОбластьИтогИзмерение);
		
	СтруктураПараметров.Вставить("ОбластьСтрокаКорСчет", 	ОбластьСтрокаКорСчет);
	
	СтруктураПараметров.Вставить("ОбластьСтрокаПериод",		ОбластьСтрокаПериод);
	СтруктураПараметров.Вставить("ОбластьИтогПериод",		ОбластьИтогПериод);
	
	СтруктураПараметров.Вставить("ОбластьСтрокаСубконто", 	ОбластьСтрокаСубконто);
	СтруктураПараметров.Вставить("ОбластьИтогСубконто", 	ОбластьИтогСубконто);
	
	СтруктураПараметров.Вставить("ОбластьРесурс", 			ОбластьРесурс);
	СтруктураПараметров.Вставить("ОбластьДопРесурс", 		ОбластьДопРесурс);
	СтруктураПараметров.Вставить("ОбластьРесурсОборот", 	ОбластьРесурсОборот);
	СтруктураПараметров.Вставить("ОбластьДопРесурсОборот", 	ОбластьДопРесурсОборот);
	СтруктураПараметров.Вставить("ОбластьДопРесурсИтог", 	ОбластьДопРесурсИтог);
	СтруктураПараметров.Вставить("ОбластьДопРесурсПустая", 	ОбластьДопРесурсПустая);
	СтруктураПараметров.Вставить("ОбластьДопРесурсИтогПустая",ОбластьДопРесурсИтогПустая);
	
	СтруктураПараметров.Вставить("ДокументРезультат", 		ДокументРезультат);
	
	СтруктураПараметров.Вставить("ОбластьСтрокаКорСубконто",ОбластьСтрокаКорСубконто);
	
	СтруктураПараметров.Вставить("МассивСубконто", 			МассивСубконто);
	СтруктураПараметров.Вставить("МассивГруппировок", 		МассивГруппировок);

	// Вывод отчета
	ОбщийИтогОбороты = РезультатОбороты.Выбрать(?(ВнешняяИБ=0,QueryResultIteration.ByGroups,ТекСоединениеВИБ.QueryResultIteration.ByGroups), "Общие");
	ОбщийИтогОстатки = РезультатОстатки.Выбрать(?(ВнешняяИБ=0,QueryResultIteration.ByGroups,ТекСоединениеВИБ.QueryResultIteration.ByGroups), "Общие");
	ЕстьИтог = ОбщийИтогОстатки.Следующий();
	ОбщийИтогОбороты.Следующий();
	
	/// Настройка правил вывода ресурсов /////////////////////////////////////
	
	ПравилаВывода=Новый Структура;
	ПравилаВывода.Вставить("ОсновнаяОбласть",Макет.ПолучитьОбласть("НачалоОтчет|ОсновныеКолонки"));
	ПравилаВывода.Вставить("Уровень",0);
	
    МассивПрефиксов=Новый Массив;
	МассивПрефиксов.Добавить("НачДт");
	МассивПрефиксов.Добавить("НачКт");
	
	НаборВыборок=Новый Соответствие;
	НаборВыборок.Вставить(МассивПрефиксов,ОбщийИтогОстатки);
	
	ПравилаВывода.Вставить("НаборВыборок",НаборВыборок);
	ПравилаВывода.Вставить("ДополнительнаяОбласть",ОбластьДопРесурс);
	ПравилаВывода.Вставить("ПустаяОбласть",ОбластьДопРесурсПустая);
	
	ВывестиРесурсыВОтчет(ПравилаВывода);
	
	//////////////////////////////////////////////////////////////////
		
	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	
	ВывестиСчета(РезультатОбороты, РезультатОстатки, СтруктураПараметров);
	
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	// Итого по отчету
	ОбластьИтог = Макет.ПолучитьОбласть("ИтогОтчет|ОсновныеКолонки");
	
	/// Настройка правил вывода ресурсов /////////////////////////////////////
	
	ПравилаВывода=Новый Структура;
	ПравилаВывода.Вставить("ОсновнаяОбласть",ОбластьИтог);
	ПравилаВывода.Вставить("Уровень",0);
	
	НаборВыборок=Новый Соответствие;
	
	
	МассивПрефиксовОбороты=Новый Массив;
	МассивПрефиксовОбороты.Добавить("ОборотДт");
	МассивПрефиксовОбороты.Добавить("ОборотКт");
	НаборВыборок.Вставить(МассивПрефиксовОбороты,ОбщийИтогОбороты);
	
	Если ЕстьИтог Тогда
		
		МассивПрефиксовОстатки=Новый Массив;
		МассивПрефиксовОстатки.Добавить("КонДт");
		МассивПрефиксовОстатки.Добавить("КонКт");
		НаборВыборок.Вставить(МассивПрефиксовОстатки,ОбщийИтогОстатки);
		
	КонецЕсли;
	
	ПравилаВывода.Вставить("НаборВыборок",НаборВыборок);
	ПравилаВывода.Вставить("ДополнительнаяОбласть",СтруктураПараметров.ОбластьДопРесурсИтог);
	ПравилаВывода.Вставить("ПустаяОбласть",СтруктураПараметров.ОбластьДопРесурсИтогПустая);
	
	ВывестиРесурсыВОтчет(ПравилаВывода);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	
	Возврат ДокументРезультат;
	
КонецФункции // ПолучитьАнализСчета() 
  
  // Функция формирует выборку вложенных записей, если текущая запись не Неопределено
Функция СформироватьВыборку(Выборка, ОбходРезультатаЗапроса, Измерение, ГруппировкиДляЗначенийГруппировок = Неопределено) Экспорт
	
	Если Выборка <> Неопределено Тогда
		Если ГруппировкиДляЗначенийГруппировок = Неопределено Тогда
			Выборка = Выборка.Выбрать(ОбходРезультатаЗапроса, Измерение);
		Иначе
			Выборка = Выборка.Выбрать(ОбходРезультатаЗапроса, Измерение, ГруппировкиДляЗначенийГруппировок);
		КонецЕсли;
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// Функция проверяет выборку на наличие ненулевых оборотов
Функция ЭтоНулевойОборот(Выборка) Экспорт
	
	Для Каждого СтрРесурс ИЗ МассивВыводимыхРесурсов Цикл
		
		Если МассивБалансовыеБезИзмерений.Найти(СтрРесурс.ИмяПоля)=Неопределено 
			И МассивНеБалансовыеБезИзмерений.Найти(СтрРесурс.ИмяПоля)=Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ (Выборка[СтрРесурс.ИмяПоля+"ОборотДт"]=0 И Выборка[СтрРесурс.ИмяПоля+"ОборотКт"]=0) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ОчиститьПараметрыОбласти(Область)
	
	Для Индекс = 0 По Область.Параметры.Количество() - 1 Цикл
		Область.Параметры.Установить(Индекс, Неопределено);
	КонецЦикла;
	
КонецПроцедуры
 
  // Вывод счетов
Процедура ВывестиСчета(Знач ВыборкаОбороты, Знач ВыборкаОстатки, СтруктураПараметров)

	Если Не ПоСубсчетамИСубконто Тогда
		ВывестиСубконто(ВыборкаОбороты, ВыборкаОстатки, СтруктураПараметров);
		Возврат;
	КонецЕсли;
		
	Измерение = "Счет";
	
	ОборотИспользован  = СформироватьВыборку(ВыборкаОбороты,?(ВнешняяИБ=0,QueryResultIteration.ByGroupsWithHierarchy,ТекСоединениеВИБ.QueryResultIteration.ByGroupsWithHierarchy), Измерение);
	ОстатокИспользован = СформироватьВыборку(ВыборкаОстатки,?(ВнешняяИБ=0,QueryResultIteration.ByGroupsWithHierarchy,ТекСоединениеВИБ.QueryResultIteration.ByGroupsWithHierarchy), Измерение);
	
	ОстатокПрочитан = Ложь;
	ОборотПрочитан = Ложь;
		
	Пока Истина Цикл
				
		Если ОстатокИспользован Тогда
			ОстатокПрочитан = ВыборкаОстатки.Следующий();
			ОстатокИспользован = Ложь;
		КонецЕсли;
		
		Если ОборотИспользован Тогда
			ОборотПрочитан = ВыборкаОбороты.Следующий();
			ОборотИспользован = Ложь;
		КонецЕсли;
		
		// Оборот сопоставляется с остатком
		Если ОборотПрочитан И ОстатокПрочитан
			И ВыборкаОстатки[Измерение+"Представление"] = ВыборкаОбороты[Измерение+"Представление"] Тогда
			
			ОборотИспользован = Истина;
			ОстатокИспользован = Истина;
			
		ИначеЕсли ОборотПрочитан И ЭтоНулевойОборот(ВыборкаОбороты) Тогда
			
			ОборотИспользован = Истина;
			
		ИначеЕсли ОстатокПрочитан Тогда
			ОстатокИспользован = Истина;
		КонецЕсли;
		
		Если Не ОстатокИспользован И Не ОборотИспользован Тогда
			Прервать;
		КонецЕсли;
		
		Выборка = ?(ОстатокИспользован, ВыборкаОстатки, ВыборкаОбороты);
		ВыборкаОборотыПараметр = ?(ОборотИспользован,  ВыборкаОбороты, Неопределено);
		ВыборкаОстаткиПараметр = ?(ОстатокИспользован, ВыборкаОстатки, Неопределено);
		
		// Вывод начального сальдо
		ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаСчет;
		ОчиститьПараметрыОбласти(ВыводимаяОбласть);
		
		ВыводимаяОбласть.Параметры.СчетПредставление=Выборка.СчетПредставление;
		ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, СтруктураПараметров);
		
		/// Настройка правил вывода ресурсов /////////////////////////////////////
		
		ПравилаВывода=Новый Структура;
		ПравилаВывода.Вставить("ОсновнаяОбласть",ВыводимаяОбласть);
		ПравилаВывода.Вставить("Уровень",Выборка.Уровень());
		
		МассивПрефиксов=Новый Массив;
		МассивПрефиксов.Добавить("НачДт");
		МассивПрефиксов.Добавить("НачКт");
		
		НаборВыборок=Новый Соответствие;
		НаборВыборок.Вставить(МассивПрефиксов,Выборка);
		
		ПравилаВывода.Вставить("НаборВыборок",НаборВыборок);
		
		ПравилаВывода.Вставить("ДополнительнаяОбласть",СтруктураПараметров.ОбластьДопРесурс);
		ПравилаВывода.Вставить("ПустаяОбласть",СтруктураПараметров.ОбластьДопРесурсПустая);
		
		ВывестиРесурсыВОтчет(ПравилаВывода);
		
		//////////////////////////////////////////////////////////////////
					
		// Вывод вложенных итогов
		ВывестиСубконто(ВыборкаОборотыПараметр, ВыборкаОстаткиПараметр, СтруктураПараметров);
		ВывестиСчета(ВыборкаОборотыПараметр, ВыборкаОстаткиПараметр, СтруктураПараметров);
		
		// Вывод оборота и кон сальдо
		ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогСчет;
		ОчиститьПараметрыОбласти(ВыводимаяОбласть);
		ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, СтруктураПараметров);
		
		/// Настройка правил вывода ресурсов /////////////////////////////////////
		
		ПравилаВывода=Новый Структура;
		ПравилаВывода.Вставить("ОсновнаяОбласть",ВыводимаяОбласть);
		ПравилаВывода.Вставить("Уровень",Выборка.Уровень());
		
		НаборВыборок=Новый Соответствие;
		
		Если ОборотИспользован Тогда
			
			МассивПрефиксовОбороты=Новый Массив;
			МассивПрефиксовОбороты.Добавить("ОборотДт");
			МассивПрефиксовОбороты.Добавить("ОборотКт");
			НаборВыборок.Вставить(МассивПрефиксовОбороты,ВыборкаОбороты);
			
		КонецЕсли;
		
		Если ОстатокИспользован Тогда
			
			МассивПрефиксовОстатки=Новый Массив;
			МассивПрефиксовОстатки.Добавить("КонДт");
			МассивПрефиксовОстатки.Добавить("КонКт");
			НаборВыборок.Вставить(МассивПрефиксовОстатки,ВыборкаОстатки);
			
		КонецЕсли;
		
		ПравилаВывода.Вставить("НаборВыборок",НаборВыборок);
		ПравилаВывода.Вставить("ДополнительнаяОбласть",СтруктураПараметров.ОбластьДопРесурсИтог);
		ПравилаВывода.Вставить("ПустаяОбласть",СтруктураПараметров.ОбластьДопРесурсИтогПустая);
		
		ВывестиРесурсыВОтчет(ПравилаВывода);
						
	КонецЦикла;
	
КонецПроцедуры

// Вывод субконто определенного номера
Процедура ВыводСубконто(Знач ВыборкаОбороты,Знач ВыборкаОстатки, Знач Инд, СтруктураПараметров)
	
	Если Инд < СтруктураПараметров.МассивСубконто.Количество() Тогда
		
		Измерение = СтруктураПараметров.МассивСубконто[Инд];
		
		ОборотИспользован = СформироватьВыборку(ВыборкаОбороты, ?(ВнешняяИБ=0,QueryResultIteration.ByGroups,ТекСоединениеВИБ.QueryResultIteration.ByGroups), Измерение);
		ОстатокИспользован = СформироватьВыборку(ВыборкаОстатки,?(ВнешняяИБ=0,QueryResultIteration.ByGroups,ТекСоединениеВИБ.QueryResultIteration.ByGroups), Измерение);
		
		ОстатокПрочитан = Ложь;
		ОборотПрочитан = Ложь;
		
		Пока Истина Цикл
			
			Если ОстатокИспользован Тогда
				ОстатокПрочитан = ВыборкаОстатки.Следующий();
				ОстатокИспользован = Ложь;
			КонецЕсли;
			
			Если ОборотИспользован Тогда
				ОборотПрочитан = ВыборкаОбороты.Следующий();
				ОборотИспользован = Ложь;
			КонецЕсли;
			
			// Оборот сопоставляется с остатком
			Если ОборотПрочитан И ОстатокПрочитан
			   И ВыборкаОстатки[Измерение+"Представление"] = ВыборкаОбороты[Измерение+"Представление"] Тогда
			   
				ОборотИспользован = Истина;
				ОстатокИспользован = Истина;
				
			ИначеЕсли ОборотПрочитан И ЭтоНулевойОборот(ВыборкаОбороты) Тогда
				
				ОборотИспользован = Истина;
				
			ИначеЕсли ОстатокПрочитан Тогда
				ОстатокИспользован = Истина;
			КонецЕсли;
			
			Если Не ОстатокИспользован И Не ОборотИспользован Тогда
				Прервать;
			КонецЕсли;
			
			Выборка = ?(ОстатокИспользован, ВыборкаОстатки, ВыборкаОбороты);
			ВыборкаОборотыПараметр = ?(ОборотИспользован, ВыборкаОбороты, Неопределено);
			ВыборкаОстаткиПараметр = ?(ОстатокИспользован, ВыборкаОстатки, Неопределено);
						
			// Вывод нач сальдо
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаСубконто;
			ОчиститьПараметрыОбласти(ВыводимаяОбласть);
			ВыводимаяОбласть.Параметры.СубконтоПредставление = Выборка[Измерение + "Представление"];
			Уровень = Выборка.Уровень();
			
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, СтруктураПараметров);
			
			/// Настройка правил вывода ресурсов /////////////////////////////////////
			
			ПравилаВывода=Новый Структура;
			ПравилаВывода.Вставить("ОсновнаяОбласть",ВыводимаяОбласть);
			ПравилаВывода.Вставить("Уровень",Уровень);
			
			Если ОстатокИспользован Тогда
				
				МассивПрефиксов=Новый Массив;
				МассивПрефиксов.Добавить("НачДт");
				МассивПрефиксов.Добавить("НачКт");
				
				НаборВыборок=Новый Соответствие;
				НаборВыборок.Вставить(МассивПрефиксов,Выборка);
				
				
				ПравилаВывода.Вставить("НаборВыборок",НаборВыборок);
				ПравилаВывода.Вставить("ДополнительнаяОбласть",СтруктураПараметров.ОбластьДопРесурс);
				ПравилаВывода.Вставить("ОбластьНебалансовых",СтруктураПараметров.ОбластьРесурс);
				ПравилаВывода.Вставить("ПустаяОбласть",СтруктураПараметров.ОбластьДопРесурсПустая);
				ПравилаВывода.Вставить("ВыводитьИмяРесурса");
				
				ВывестиРесурсыВОтчет(ПравилаВывода);
				
			КонецЕсли;
						
			// Вывод вложенных итогов
			ВыводСубконто(ВыборкаОборотыПараметр, ВыборкаОстаткиПараметр, Инд+1, СтруктураПараметров);
						
			// Вывод оборота и кон сальдо
			ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогСубконто;
			ОчиститьПараметрыОбласти(ВыводимаяОбласть);
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, СтруктураПараметров);
			
			/// Настройка правил вывода ресурсов /////////////////////////////////////
			
			ПравилаВывода=Новый Структура;
			ПравилаВывода.Вставить("ОсновнаяОбласть",ВыводимаяОбласть);
			ПравилаВывода.Вставить("Уровень",Уровень);
			
			НаборВыборок=Новый Соответствие;
			
			Если ОборотИспользован Тогда
				
				МассивПрефиксовОбороты=Новый Массив;
				МассивПрефиксовОбороты.Добавить("ОборотДт");
				МассивПрефиксовОбороты.Добавить("ОборотКт");
				НаборВыборок.Вставить(МассивПрефиксовОбороты,ВыборкаОбороты);
				
			КонецЕсли;
			
			Если ОстатокИспользован Тогда
				
				МассивПрефиксовОстатки=Новый Массив;
				МассивПрефиксовОстатки.Добавить("КонДт");
				МассивПрефиксовОстатки.Добавить("КонКт");
				НаборВыборок.Вставить(МассивПрефиксовОстатки,ВыборкаОстатки);
				
			КонецЕсли;
			
			ПравилаВывода.Вставить("НаборВыборок",НаборВыборок);
			ПравилаВывода.Вставить("ДополнительнаяОбласть",СтруктураПараметров.ОбластьДопРесурсИтог);
			ПравилаВывода.Вставить("ОбластьНебалансовых",СтруктураПараметров.ОбластьИтогСубконто);
			ПравилаВывода.Вставить("ПустаяОбласть",СтруктураПараметров.ОбластьДопРесурсИтогПустая);
			ПравилаВывода.Вставить("ВыводитьИмяРесурса");
			
			ВывестиРесурсыВОтчет(ПравилаВывода);
			
			//////////////////////////////////////////////////////////////////////////////////////////////////////
			
		КонецЦикла;
		
	ИначеЕсли ВыборкаОбороты <> Неопределено Тогда
		
		ВывестиПериоды(ВыборкаОбороты, ВыборкаОстатки, СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

// Вывод периодов
Процедура ВывестиПериоды(Знач ВыборкаОбороты, Знач ВыборкаОстатки, СтруктураПараметров)
	
	Если ЕстьПериод Тогда
		
		Измерение = "Период";
		
		ОборотИспользован  = СформироватьВыборку(ВыборкаОбороты, ?(ВнешняяИБ=0,QueryResultIteration.ByGroups,ТекСоединениеВИБ.QueryResultIteration.ByGroups), Измерение);
		ОстатокИспользован = СформироватьВыборку(ВыборкаОстатки, ?(ВнешняяИБ=0,QueryResultIteration.ByGroups,ТекСоединениеВИБ.QueryResultIteration.ByGroups), Измерение);
		
		ОстатокПрочитан = Ложь;
		ОборотПрочитан = Ложь;
		
		Пока Истина Цикл
			
			Если ОстатокИспользован Тогда
				ОстатокПрочитан = ВыборкаОстатки.Следующий();
				ОстатокИспользован = Ложь;
			КонецЕсли;
			
			Если ОборотИспользован Тогда
				ОборотПрочитан = ВыборкаОбороты.Следующий();
				ОборотИспользован = Ложь;
			КонецЕсли;
			
			// Оборот сопоставляется с остатком
			Если ОборотПрочитан И ОстатокПрочитан
			   И ВыборкаОстатки[Измерение] = ВыборкаОбороты[Измерение] Тогда
			   
				ОборотИспользован = Истина;
				ОстатокИспользован = Истина;
				
			ИначеЕсли ОборотПрочитан И ЭтоНулевойОборот(ВыборкаОбороты) Тогда
				
				ОборотИспользован = Истина;
				
			ИначеЕсли ОстатокПрочитан Тогда
				ОстатокИспользован = Истина;
			КонецЕсли;
			
			Если Не ОстатокИспользован И Не ОборотИспользован Тогда
				Прервать;
			КонецЕсли;
			
			Если Не ОборотИспользован Тогда
				Продолжить;
			КонецЕсли;
			
			Выборка = ?(ОстатокИспользован, ВыборкаОстатки, ВыборкаОбороты);
			ВыборкаОборотыПараметр = ?(ОборотИспользован, ВыборкаОбороты, Неопределено);
			ВыборкаОстаткиПараметр = ?(ОстатокИспользован, ВыборкаОстатки, Неопределено);
				
			// Вывод начального сальдо
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаПериод;
			ОчиститьПараметрыОбласти(ВыводимаяОбласть);
			ВыводимаяОбласть.Параметры.Период=Выборка.Период;
			Уровень = Выборка.Уровень();
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, СтруктураПараметров);
			
			/// Настройка правил вывода ресурсов /////////////////////////////////////
			
			ПравилаВывода=Новый Структура;
			ПравилаВывода.Вставить("ОсновнаяОбласть",ВыводимаяОбласть);
			ПравилаВывода.Вставить("Уровень",Уровень);
			
			МассивПрефиксов=Новый Массив;
			МассивПрефиксов.Добавить("НачДт");
			МассивПрефиксов.Добавить("НачКт");
			
			НаборВыборок=Новый Соответствие;
			НаборВыборок.Вставить(МассивПрефиксов,Выборка);
			
			ПравилаВывода.Вставить("НаборВыборок",НаборВыборок);
			ПравилаВывода.Вставить("ДополнительнаяОбласть",СтруктураПараметров.ОбластьДопРесурс);
			ПравилаВывода.Вставить("ОбластьНебалансовых",СтруктураПараметров.ОбластьРесурс);
			ПравилаВывода.Вставить("ПустаяОбласть",СтруктураПараметров.ОбластьДопРесурсПустая);
			ПравилаВывода.Вставить("ВыводитьИмяРесурса");
			
			ВывестиРесурсыВОтчет(ПравилаВывода);
			
			// Вывод вложенных итогов
			Если МассивДопИзмерений.Количество()>0 Тогда
				ВывестиИзмерения(ВыборкаОборотыПараметр, ВыборкаОстаткиПараметр,0,СтруктураПараметров);
			Иначе
				ВывестиКорСчета(ВыборкаОборотыПараметр, СтруктураПараметров);
			КонецЕсли;
			
			// Вывод оборота и кон сальдо
			ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогПериод;
			ОчиститьПараметрыОбласти(ВыводимаяОбласть);
			
			/// Настройка правил вывода ресурсов /////////////////////////////////////
			
			ПравилаВывода=Новый Структура;
			ПравилаВывода.Вставить("ОсновнаяОбласть",ВыводимаяОбласть);
			ПравилаВывода.Вставить("Уровень",Уровень);
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, СтруктураПараметров);
			
			НаборВыборок=Новый Соответствие;
			
			Если ОборотИспользован Тогда
				
				МассивПрефиксовОбороты=Новый Массив;
				МассивПрефиксовОбороты.Добавить("ОборотДт");
				МассивПрефиксовОбороты.Добавить("ОборотКт");
				НаборВыборок.Вставить(МассивПрефиксовОбороты,ВыборкаОбороты);
				
			КонецЕсли;
			
			Если ОстатокИспользован Тогда
				
				МассивПрефиксовОстатки=Новый Массив;
				МассивПрефиксовОстатки.Добавить("КонДт");
				МассивПрефиксовОстатки.Добавить("КонКт");
				НаборВыборок.Вставить(МассивПрефиксовОстатки,ВыборкаОстатки);
				
			КонецЕсли;
			
			ПравилаВывода.Вставить("НаборВыборок",НаборВыборок);
			ПравилаВывода.Вставить("ДополнительнаяОбласть",СтруктураПараметров.ОбластьДопРесурсИтог);
			ПравилаВывода.Вставить("ОбластьНебалансовых",СтруктураПараметров.ОбластьИтогСубконто);
			ПравилаВывода.Вставить("ПустаяОбласть",СтруктураПараметров.ОбластьДопРесурсИтогПустая);
			ПравилаВывода.Вставить("ВыводитьИмяРесурса");
			
			ВывестиРесурсыВОтчет(ПравилаВывода);
								
		КонецЦикла;
		
	Иначе
		
		Если МассивДопИзмерений.Количество()>0 Тогда
			ВывестиИзмерения(ВыборкаОбороты, ВыборкаОстатки, 0, СтруктураПараметров);
		Иначе
			ВывестиКорСчета(ВыборкаОбороты, СтруктураПараметров);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Вывод валют
Процедура ВывестиИзмерения(Знач ВыборкаОбороты, Знач ВыборкаОстатки, Знач Инд, СтруктураПараметров)
	
	Если Инд < МассивДопИзмерений.Количество() Тогда
		
		Измерение = МассивДопИзмерений[Инд];
		
		ОстатокПрочитан = Ложь;
		ОборотПрочитан = Ложь;
		
		ОборотИспользован  = СформироватьВыборку(ВыборкаОбороты, ?(ВнешняяИБ=0,QueryResultIteration.ByGroups,ТекСоединениеВИБ.QueryResultIteration.ByGroups), Измерение);
		ОстатокИспользован = СформироватьВыборку(ВыборкаОстатки, ?(ВнешняяИБ=0,QueryResultIteration.ByGroups,ТекСоединениеВИБ.QueryResultIteration.ByGroups), Измерение);
		
		Пока Истина Цикл
			
			Если ОстатокИспользован Тогда
				ОстатокПрочитан = ВыборкаОстатки.Следующий();
				ОстатокИспользован = Ложь;
			КонецЕсли;
			
			Если ОборотИспользован Тогда
				ОборотПрочитан = ВыборкаОбороты.Следующий();
				ОборотИспользован = Ложь;
			КонецЕсли;
			
			// Оборот сопоставляется с остатком
			Если ОборотПрочитан И ОстатокПрочитан
				И ВыборкаОстатки[Измерение+"Представление"] = ВыборкаОбороты[Измерение+"Представление"] Тогда
				
				ОборотИспользован = Истина;
				ОстатокИспользован = Истина;
				
			ИначеЕсли ОборотПрочитан И ЭтоНулевойОборот(ВыборкаОбороты) Тогда
				
				ОборотИспользован = Истина;
				
			ИначеЕсли ОстатокПрочитан Тогда
				ОстатокИспользован = Истина;
			КонецЕсли;
			
			Если Не ОстатокИспользован И Не ОборотИспользован Тогда
				Прервать;
			КонецЕсли;
			
			//Если Не ОборотИспользован Тогда
			//	Продолжить;
			//КонецЕсли;
			
			Выборка = ?(ОстатокИспользован, ВыборкаОстатки, ВыборкаОбороты);
			ВыборкаОборотыПараметр = ?(ОборотИспользован, ВыборкаОбороты, Неопределено);
			ВыборкаОстаткиПараметр = ?(ОстатокИспользован, ВыборкаОстатки, Неопределено);
			
			// Вывод начального сальдо
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаИзмерение;
			ОчиститьПараметрыОбласти(ВыводимаяОбласть);
			ВыводимаяОбласть.Параметры.ИзмерениеПредставление=Выборка[Измерение+"Представление"];
			Уровень = Выборка.Уровень();
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, СтруктураПараметров);
			
			/// Настройка правил вывода ресурсов /////////////////////////////////////
			
			ПравилаВывода=Новый Структура;
			ПравилаВывода.Вставить("ОсновнаяОбласть",ВыводимаяОбласть);
			ПравилаВывода.Вставить("Уровень",Уровень);
			
			МассивПрефиксов=Новый Массив;
			МассивПрефиксов.Добавить("НачДт");
			МассивПрефиксов.Добавить("НачКт");
			
			НаборВыборок=Новый Соответствие;
			НаборВыборок.Вставить(МассивПрефиксов,Выборка);
			
			ПравилаВывода.Вставить("НаборВыборок",НаборВыборок);
			ПравилаВывода.Вставить("ДополнительнаяОбласть",СтруктураПараметров.ОбластьДопРесурс);
			ПравилаВывода.Вставить("ПустаяОбласть",СтруктураПараметров.ОбластьДопРесурсПустая);
			Правилавывода.Вставить("ВыводитьПоИзмерениям");
			
			ВывестиРесурсыВОтчет(ПравилаВывода);
			
			//////////////////////////////////////////////////////////////////
			
			// Вывод вложенных итогов
			ВывестиИзмерения(ВыборкаОборотыПараметр, ВыборкаОстаткиПараметр, Инд+1, СтруктураПараметров);		
			
			Если ОборотИспользован Тогда
				ВывестиКорСчета(ВыборкаОборотыПараметр, СтруктураПараметров);
			КонецЕсли;
			
			// Вывод оборота и кон сальдо
			ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогИзмерение;
			ОчиститьПараметрыОбласти(ВыводимаяОбласть);
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, СтруктураПараметров);
			
			/// Настройка правил вывода ресурсов /////////////////////////////////////
			
			ПравилаВывода=Новый Структура;
			ПравилаВывода.Вставить("ОсновнаяОбласть",ВыводимаяОбласть);
			ПравилаВывода.Вставить("Уровень",Уровень);
			
			НаборВыборок=Новый Соответствие;
			
			Если ОборотИспользован Тогда
				
				МассивПрефиксовОбороты=Новый Массив;
				МассивПрефиксовОбороты.Добавить("ОборотДт");
				МассивПрефиксовОбороты.Добавить("ОборотКт");
				НаборВыборок.Вставить(МассивПрефиксовОбороты,ВыборкаОбороты);
				
			КонецЕсли;
			
			Если ОстатокИспользован Тогда
				
				МассивПрефиксовОстатки=Новый Массив;
				МассивПрефиксовОстатки.Добавить("КонДт");
				МассивПрефиксовОстатки.Добавить("КонКт");
				НаборВыборок.Вставить(МассивПрефиксовОстатки,ВыборкаОстатки);
				
			КонецЕсли;
			
			ПравилаВывода.Вставить("НаборВыборок",НаборВыборок);
			ПравилаВывода.Вставить("ДополнительнаяОбласть",СтруктураПараметров.ОбластьДопРесурсИтог);
			ПравилаВывода.Вставить("ПустаяОбласть",СтруктураПараметров.ОбластьДопРесурсИтогПустая);
			ПравилаВывода.Вставить("ВыводитьПоИзмерениям");
			
			ВывестиРесурсыВОтчет(ПравилаВывода);
			
			//////////////////////////////////////////////////////////////////////////////////////////////////////
						
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПравилоКорСчета(КорСчет)
	
	ПравилоКорСчета = ПравилаИтоги.Найти(КорСчет.Код, "СчетКод");
	Если ПравилоКорСчета <> Неопределено Тогда
		Возврат ПравилоКорСчета; 
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Вывод кор счетов
Процедура ВывестиКорСчета(Знач Выборка, СтруктураПараметров)

	// Кор счета выводятся всегда
	ВыборкаОбороты = Выборка.Выбрать(?(ВнешняяИБ=0,QueryResultIteration.ByGroups,ТекСоединениеВИБ.QueryResultIteration.ByGroups), "КорСчет");
	
	ВерхнийУровень = 1000;
	
	Пока ВыборкаОбороты.Следующий() Цикл
		
		ПравилоКорСчета = ПолучитьПравилоКорСчета(ВыборкаОбороты.КорСчет);
		
		Если НЕ ПоКорСубсчетамИСубконто Тогда
			
			// Выводим только верхний уровень
			Если ВерхнийУровень < ВыборкаОбороты.Уровень() Тогда
				Продолжить;
			Иначе
				ВерхнийУровень = ВыборкаОбороты.Уровень();
			КонецЕсли;
			
		КонецЕсли;
		
		// Вывод оборота или кон сальдо
		ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаКорСчет;
		ОчиститьПараметрыОбласти(ВыводимаяОбласть);
		ВыводимаяОбласть.Параметры.КорСчетПредставление=ВыборкаОбороты.КорСчетПредставление;
		ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаОбороты, СтруктураПараметров);
		
		/// Настройка правил вывода ресурсов /////////////////////////////////////
		
		ПравилаВывода=Новый Структура;
		ПравилаВывода.Вставить("ОсновнаяОбласть",ВыводимаяОбласть);
		ПравилаВывода.Вставить("Уровень",ВыборкаОбороты.Уровень());
		
		МассивПрефиксов=Новый Массив;
		МассивПрефиксов.Добавить("ОборотДт");
		МассивПрефиксов.Добавить("ОборотКт");
		
		НаборВыборок=Новый Соответствие;
		НаборВыборок.Вставить(МассивПрефиксов,ВыборкаОбороты);
		
		ПравилаВывода.Вставить("НаборВыборок",НаборВыборок);
		
		ПравилаВывода.Вставить("ДополнительнаяОбласть",СтруктураПараметров.ОбластьДопРесурсОборот);
		ПравилаВывода.Вставить("ПустаяОбласть",СтруктураПараметров.ОбластьДопРесурсПустая);
		
		Если МассивДопИзмерений.Количество()>0 Тогда
			ПравилаВывода.Вставить("ВыводитьПоИзмерениям");
		КонецЕсли;
	
		ВывестиРесурсыВОтчет(ПравилаВывода);
		
		//////////////////////////////////////////////////////////////////
		
		Если ПоКорСубсчетамИСубконто Тогда
			
			ВывестиКорСубконто(ВыборкаОбороты, ПравилоКорСчета, СтруктураПараметров);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Вывод кор субконто: общая процедура
Процедура ВывестиКорСубконто(Знач ВыборкаОбороты, ПравилоКорСчета, СтруктураПараметров)

	Если ПравилоКорСчета <> Неопределено И ПравилоКорСчета.Субконто.Количество() > 0 Тогда
		
		МассивКорСубконто=Новый Массив;
		
		Для Каждого Субконто ИЗ ПравилоКорСчета.Субконто Цикл
			
			Инд=1;
			
			Если Субконто.Пометка Тогда
				
				МассивКорСубконто.Добавить("Субконто"+Инд);
				Инд=Инд+1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивКорСубконто.Количество() > 0 Тогда
			
			 ВыводКорСубконто(ВыборкаОбороты, МассивКорСубконто, 0, СтруктураПараметров);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Вывод кор субконто определенного номера
Процедура ВыводКорСубконто(Знач ВыборкаОбороты, МассивКорСубконто, Знач Инд, СтруктураПараметров)

	Если Инд >= МассивКорСубконто.Количество() Тогда
		Возврат;
	КонецЕсли;
		
	ВыборкаОбороты = ВыборкаОбороты.Выбрать(?(ВнешняяИБ=0,QueryResultIteration.ByGroups,ТекСоединениеВИБ.QueryResultIteration.ByGroups), "Кор" + МассивКорСубконто[Инд]);
		
	Пока ВыборкаОбороты.Следующий() Цикл
			
		// Вывод оборота                       
		ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаКорСубконто;
		ОчиститьПараметрыОбласти(ВыводимаяОбласть);	
		ВыводимаяОбласть.Параметры.КорСубконтоПредставление = ВыборкаОбороты["Кор" + МассивКорСубконто[Инд]+"Представление"];
		Уровень = ВыборкаОбороты.Уровень();
		ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаОбороты, СтруктураПараметров);
		
		/// Настройка правил вывода ресурсов /////////////////////////////////////
		
		ПравилаВывода=Новый Структура;
		ПравилаВывода.Вставить("ОсновнаяОбласть",ВыводимаяОбласть);
		ПравилаВывода.Вставить("Уровень",Уровень);
		
		МассивПрефиксов=Новый Массив;
		МассивПрефиксов.Добавить("ОборотДт");
		МассивПрефиксов.Добавить("ОборотКт");
		
		НаборВыборок=Новый Соответствие;
		НаборВыборок.Вставить(МассивПрефиксов,ВыборкаОбороты);
		
		ПравилаВывода.Вставить("НаборВыборок",НаборВыборок);
		ПравилаВывода.Вставить("ДополнительнаяОбласть",СтруктураПараметров.ОбластьДопРесурсОборот);
		ПравилаВывода.Вставить("ОбластьНебалансовых",СтруктураПараметров.ОбластьРесурсОборот);
		ПравилаВывода.Вставить("ПустаяОбласть",СтруктураПараметров.ОбластьДопРесурсПустая);
		ПравилаВывода.Вставить("ВыводитьИмяРесурса");
		
		Если МассивДопИзмерений.Количество() Тогда
			ПравилаВывода.Вставить("ВыводитьПоИзмерениям");
		КонецЕсли;
		
		ВывестиРесурсыВОтчет(ПравилаВывода);
		
		//////////////////////////////////////////////////////////////////
					
		ВыводКорСубконто(ВыборкаОбороты, МассивКорСубконто, Инд + 1, СтруктураПараметров);
			
	КонецЦикла;
		                                            
КонецПроцедуры

Процедура ВывестиРесурсыВОтчет(ПравилаВывода)
				
	Уровень = ПравилаВывода.Уровень;	
	ВыводимаяОбласть=ПравилаВывода.ОсновнаяОбласть;
	НаборВыборок=ПравилаВывода.НаборВыборок;
	
	Если МассивБалансовыеБезИзмерений.Количество()>0 Тогда
		
		ПервыйРесурс=МассивБалансовыеБезИзмерений[0];
		
		Если ПравилаВывода.Свойство("ВыводитьИмяРесурса") Тогда
			СтрРесурс=ТабВыводимыеРесурсы.Найти(ПервыйРесурс,"ИмяПоля");
			ВыводимаяОбласть.Параметры.ИмяРесурса=СтрРесурс.ПредставлениеПоля;
		КонецЕсли;
		
		Для Каждого ТекВыборка ИЗ НаборВыборок Цикл
			
			Для Каждого Префикс ИЗ ТекВыборка.Ключ Цикл
				ВыводимаяОбласть.Параметры["Ресурс"+Префикс]=ТекВыборка.Значение[ПервыйРесурс+Префикс];
			КонецЦикла;
			
		КонецЦикла;
		
		ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
		
		Для Индекс=1 По МассивБалансовыеБезИзмерений.Количество()-1 Цикл
			
			ВыводимаяОбласть=ПравилаВывода.ДополнительнаяОбласть;
			ОчиститьПараметрыОбласти(ВыводимаяОбласть);
			
			ИмяРесурса=МассивБалансовыеБезИзмерений[Индекс];
			
			Для Каждого ТекВыборка ИЗ НаборВыборок Цикл
				
				Для Каждого Префикс ИЗ ТекВыборка.Ключ Цикл
					
					ВыводимаяОбласть.Параметры["Ресурс"+Префикс]=ТекВыборка.Значение[ИмяРесурса+Префикс];
									
				КонецЦикла;
				
			КонецЦикла;
			
			ДокументРезультат.Присоединить(ВыводимаяОбласть);
			
		КонецЦикла;
		
		Если ПравилаВывода.Свойство("ВыводитьПоИзмерениям") Тогда
			
			Для Индекс=0 По МассивБалансовыеСИзмерениями.Количество()-1 Цикл
				
				ВыводимаяОбласть=ПравилаВывода.ДополнительнаяОбласть;
				ОчиститьПараметрыОбласти(ВыводимаяОбласть);
				
				ИмяРесурса=МассивБалансовыеСИзмерениями[Индекс];
				
				Для Каждого ТекВыборка ИЗ НаборВыборок Цикл
					
					Для Каждого Префикс ИЗ ТекВыборка.Ключ Цикл
						
						ВыводимаяОбласть.Параметры["Ресурс"+Префикс]=ТекВыборка.Значение[ИмяРесурса+Префикс];
												
					КонецЦикла;
					
				КонецЦикла;
				
				ДокументРезультат.Присоединить(ВыводимаяОбласть);
				
			КонецЦикла;
			
			Для Индекс=0 По МассивНеБалансовыеСИзмерениями.Количество()-1 Цикл
				
				ВыводимаяОбласть=ПравилаВывода.ДополнительнаяОбласть;
				ОчиститьПараметрыОбласти(ВыводимаяОбласть);
				
				ИмяРесурса=МассивНеБалансовыеСИзмерениями[Индекс];
				
				Для Каждого ТекВыборка ИЗ НаборВыборок Цикл
					
					Для Каждого Префикс ИЗ ТекВыборка.Ключ Цикл
						
						ВыводимаяОбласть.Параметры["Ресурс"+Префикс]=ТекВыборка.Значение[ИмяРесурса+Префикс];
												
					КонецЦикла;
					
				КонецЦикла;
				
				ДокументРезультат.Присоединить(ВыводимаяОбласть);
				
			КонецЦикла;
	
		Иначе
			
			ДополнитьПустымиЯчейками(ПравилаВывода.ПустаяОбласть);
			
		КонецЕсли;
		
		Если ПравилаВывода.Свойство("ОбластьНебалансовых") Тогда 
			
			// Вывндем дополнительные ресурсы
			Для Каждого Ресурс ИЗ МассивНебалансовыеБезИзмерений Цикл
				
				ВыводимаяОбласть=ПравилаВывода.ОбластьНебалансовых;
				ОчиститьПараметрыОбласти(ВыводимаяОбласть);
				
				Если ПравилаВывода.Свойство("ВыводитьИмяРесурса") Тогда
					СтрРесурс=ТабВыводимыеРесурсы.Найти(Ресурс,"ИмяПоля");
					ВыводимаяОбласть.Параметры.ИмяРесурса=СтрРесурс.ПредставлениеПоля;
				КонецЕсли;
				
				Для Каждого ТекВыборка ИЗ НаборВыборок Цикл
					
					Для Каждого Префикс ИЗ ТекВыборка.Ключ Цикл
						
						ВыводимаяОбласть.Параметры["Ресурс"+Префикс]=ТекВыборка.Значение[Ресурс+Префикс];
						
						Если СтрНайти(Префикс,"ОборотДт")>0 Тогда
							
							ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ТекВыборка.Значение, Новый Структура);
							
						КонецЕсли;
				
					КонецЦикла;
					
				КонецЦикла;
				
				ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
				
				ДополнитьПустымиЯчейками(ПравилаВывода.ПустаяОбласть,Истина);	
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли МассивНебалансовыеБезИзмерений.Количество()>0 И ПравилаВывода.Свойство("ОбластьНебалансовых") Тогда
		
		ПервыйРесурс=МассивНебалансовыеБезИзмерений[0];
		
		Если ПравилаВывода.Свойство("ВыводитьИмяРесурса") Тогда
			
			СтрРесурс=ТабВыводимыеРесурсы.Найти(ПервыйРесурс,"ИмяПоля");
			ВыводимаяОбласть.Параметры.ИмяРесурса=СтрРесурс.ПредставлениеПоля;
			
		КонецЕсли;
		
		Для Каждого ТекВыборка ИЗ НаборВыборок Цикл
			
			Для Каждого Префикс ИЗ ТекВыборка.Ключ Цикл
				ВыводимаяОбласть.Параметры["Ресурс"+Префикс]=ТекВыборка.Значение[ПервыйРесурс+Префикс];
			КонецЦикла;
			
		КонецЦикла;
		
		ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);	
		ДополнитьПустымиЯчейками(ПравилаВывода.ПустаяОбласть,Истина);
		
		Для Индекс=1 По МассивНебалансовыеБезИзмерений.Количество()-1 Цикл
			
			Ресурс=МассивНебалансовыеБезИзмерений[Индекс];
			
			ВыводимаяОбласть=ПравилаВывода.ОбластьНебалансовых;
			ОчиститьПараметрыОбласти(ВыводимаяОбласть);
			
			Если ПравилаВывода.Свойство("ВыводитьИмяРесурса") Тогда
				СтрРесурс=ТабВыводимыеРесурсы.Найти(Ресурс,"ИмяПоля");
				ВыводимаяОбласть.Параметры.ИмяРесурса=СтрРесурс.ПредставлениеПоля;
			КонецЕсли;
			
			Для Каждого ТекВыборка ИЗ НаборВыборок Цикл
				
				Для Каждого Префикс ИЗ ТекВыборка.Ключ Цикл
					
					ВыводимаяОбласть.Параметры["Ресурс"+Префикс]=ТекВыборка.Значение[ИмяРесурса+Префикс];
					
					Если СтрНайти(Префикс,"ОборотДт")>0 Тогда
						
						ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ТекВыборка.Значение, Новый Структура);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
			
			ДополнитьПустымиЯчейками(ПравилаВывода.ПустаяОбласть,Истина);	
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры // ВывестиРесурсыВОтчет() 

Процедура ДополнитьПустымиЯчейками(ОбластьДопРесурсПустая,БалансовыеБезИзмерений=Ложь, БалансовыеСИзмерениями=Истина,НебалансовыеСИзмерениями=Истина);
	
	Если БалансовыеБезИзмерений Тогда
		
		Для Инд=1 По МассивБалансовыеСИзмерениями.Количество()-1 Цикл
			
			ДокументРезультат.Присоединить(ОбластьДопРесурсПустая);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если БалансовыеСИзмерениями Тогда
		
		Для Инд=0 По МассивБалансовыеСИзмерениями.Количество()-1 Цикл
			
			ДокументРезультат.Присоединить(ОбластьДопРесурсПустая);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НеБалансовыеСИзмерениями Тогда
		
		Для Инд=0 По МассивНеБалансовыеСИзмерениями.Количество()-1 Цикл
			
			ДокументРезультат.Присоединить(ОбластьДопРесурсПустая);
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры //


// Вывод субконто: общая процедура
Процедура ВывестиСубконто(Знач ВыборкаОбороты, Знач ВыборкаОстатки, СтруктураПараметров)

	Если СтруктураПараметров.МассивСубконто.Количество() > 0 Тогда
		ВыводСубконто(ВыборкаОбороты, ВыборкаОстатки, 0, СтруктураПараметров);
	ИначеЕсли ВыборкаОбороты <> Неопределено Тогда
		ВывестиПериоды(ВыборкаОбороты, ВыборкаОстатки, СтруктураПараметров);
	КонецЕсли;

КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОБОРОТНО - САЛЬДОВОЙ ВЕДОМОСТИ
//
Функция ПолучитьОборотноСальдовуюВедомость() 
		
	Макет       = ПолучитьМакет("ОборотноСальдоваяВедомость");
	
	ДокументРезультат=Новый ТабличныйДокумент;
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	// Наклонный шрифт групп
	ШрифтГрупп = Новый Шрифт(Макет.Область("СтрокаПоказателя|Счет").Шрифт,,,,Истина);

	ВысотаЗаголовка=0;
	СформироватьИВывестиЗаголовокОтчета(ДокументРезультат, ВысотаЗаголовка, Истина);
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("ЗаголовокОтчета");
	
	ДокументРезультат.Вывести(ЗаголовокОтчета, 1);

	ДокументРезультат.НачатьАвтогруппировкуСтрок();

	// Используемые области макета
	ОбластьСтрокаСчет           = Макет.ПолучитьОбласть("Строка|Счет");
	ОбластьСтрокаПоказателяСчет = Макет.ПолучитьОбласть("СтрокаПоказателя|Счет");;
	ОбластьСтрокаРесурсаСчет 	= Макет.ПолучитьОбласть("СтрокаРесурс|Счет");
	
	// Формат показателей
	СтруктураФорматовПоказателей = Новый Структура;
	
	Для Каждого Ресурс Из МассивВыводимыхРесурсов Цикл
			
		СтруктураФорматовПоказателей.Вставить(Ресурс.ИмяПоля ,"ЧЦ = 15 ; ЧДЦ = 2");
					
	КонецЦикла;
	
	МассивГруппировок=Новый Массив;
	
	СтруктураПараметров = Новый Структура;
	
	// Области для вывода показателей
	СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяЧисла",Макет.ПолучитьОбласть("СтрокаПоказателя|Числа"));
	СтруктураПараметров.Вставить("ОбластьСтрокаЧисла",          Макет.ПолучитьОбласть("Строка|Числа"));
	СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяСчет", ОбластьСтрокаПоказателяСчет);
	СтруктураПараметров.Вставить("ФорматПоказателей", 			СтруктураФорматовПоказателей);
	СтруктураПараметров.Вставить("МассивГруппировок", 			МассивГруппировок);
	
	// Линии, используемые при выводе
	СтруктураПараметров.Вставить("НетЛинии",    Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 1));

	СтруктураОбщийИтог = Новый Структура;
	
	Для Каждого СтрРесурс ИЗ МассивВыводимыхРесурсов Цикл
		
		СтруктураОбщийИтог.Вставить(СтрРесурс.ИмяПоля + "НачальныйОстатокДт", 0);
		СтруктураОбщийИтог.Вставить(СтрРесурс.ИмяПоля + "НачальныйОстатокКт", 0);
		СтруктураОбщийИтог.Вставить(СтрРесурс.ИмяПоля + "КонечныйОстатокДт", 0);
		СтруктураОбщийИтог.Вставить(СтрРесурс.ИмяПоля + "КонечныйОстатокКт", 0);
		СтруктураОбщийИтог.Вставить(СтрРесурс.ИмяПоля + "ОборотДт", 0);
		СтруктураОбщийИтог.Вставить(СтрРесурс.ИмяПоля + "ОборотКт", 0);
						
	КонецЦикла;
	
	СоотвПодчСчета = Новый Соответствие;
	
	СформироватьТекстЗапросаОСВ(СтруктураПараметров,Истина);
	
	// Рассчитаем итоги по счетам, заданным в таблице вывода итогов по счетам
	ТаблицаРазворотаСчетов = СформироватьТаблицуДанныхРазворотаСчетов(СтруктураПараметров,ПравилаИтоги);
	ТаблицаРазворотаСчетов.Индексы.Добавить("Счет");
		
	// Рассчитаем итоги по счетам, заданным в таблице развернутого сальдо
	ТаблицаРазвернутогоСальдо = СформироватьТаблицуДанныхРазвернутогоСальдо(СтруктураПараметров,ПравилаСальдо); 
	ТаблицаРазвернутогоСальдо.Индексы.Добавить("Счет");
	
	РезультатЗапроса = ОбъектЗапрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать(?(ВнешняяИБ=0,QueryResultIteration.ByGroups,ТекСоединениеВИБ.QueryResultIteration.ByGroups), "Счет");

	Пока Выборка.Следующий() Цикл
		
		Уровень = Выборка.Уровень();
		
		Если НЕ ПоСубсчетамИСубконто
			И Уровень > 0 Тогда
						
			Продолжить;
			
		КонецЕсли;
		
		// Пропускаем подчиненные счета разворачиваемого счета
		Если СоотвПодчСчета.Get(Выборка.Счет) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьСтрокаСчет.Параметры.Заполнить(Выборка);
		
		//// Заполнение параметров расшифровки
		ЗаполнитьПараметрыРасшифровки(ОбластьСтрокаСчет, Выборка, СтруктураПараметров);
		
		// выводим текущую строку отчета
		ДокументРезультат.Вывести(ОбластьСтрокаСчет, Уровень);
		
		// Определим, нужно ли выводить развернутое сальдо по счету и
		// разворачивать счет по субконто
		Если РазвернутоеСальдо Тогда
			СтрокаРазвернутогоСальдо = ТаблицаРазвернутогоСальдо.Найти(Выборка.СчетКод, "Счет");
		Иначе	
			СтрокаРазвернутогоСальдо = Неопределено;
		КонецЕсли;
		
		Если ПоСубсчетамИСубконто Тогда
			СтрокаРазворотаСчета = ТаблицаРазворотаСчетов.Найти(Выборка.СчетКод, "Счет");
		Иначе
			СтрокаРазворотаСчета = Неопределено;
		КонецЕсли;
		
		ВывестиПоказателиОборотноСальдовойВедомости(ДокументРезультат, Выборка, СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураПараметров);
		
		ВывестиДанныеПоИзмерениямОборотноСальдовойВедомости(СтруктураПараметров, ОбластьСтрокаПоказателяСчет, Выборка, ДокументРезультат, СтрокаРазвернутогоСальдо, 
			СтруктураОбщийИтог, -1);
						
		// Вывод разворота счета по субконто
		Если СтрокаРазворотаСчета <> Неопределено Тогда
			
			СтрокаРазвернутогоСальдо = Неопределено;
			СоотвПодчСчета = СтрокаРазворотаСчета.СоответствиеСчетов;
			
			// Сдвиг уровня выводимой группировки отчета относительно группировки запроса
			СдвигУровня = 0;
			
			// Флаг сброса сдвига уровня при выводе группировки по счету
			СброситьСдвигУровня = Истина;
			
			ВыборкаПоСчету = СтрокаРазворотаСчета.Результат.Выбрать(?(ВнешняяИБ=0,QueryResultIteration.ByGroups,ТекСоединениеВИБ.QueryResultIteration.ByGroups), СтрокаРазворотаСчета.МассивГруппировок[0]);
			
			СтруктураПараметров.Вставить("ОбластьСтрокаСчет",           ОбластьСтрокаСчет);
			СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяСчет", ОбластьСтрокаПоказателяСчет);
			СтруктураПараметров.Вставить("ДокументРезультат", ДокументРезультат);
			
			//вывод детализированных данных
			ВывестиГруппировкуОборотноСальдовойВедомости(ВыборкаПоСчету, 0, СтрокаРазворотаСчета.МассивГруппировок, 
				Уровень, СдвигУровня, СброситьСдвигУровня, 
				Выборка.Счет, СтрокаРазвернутогоСальдо, 
				СтруктураОбщийИтог, СтруктураПараметров, Новый Соответствие);
			
		КонецЕсли;

	КонецЦикла;

	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();

	// Выведем итоговую строку
	ОбластьИтогиСчет = Макет.ПолучитьОбласть("Итоги|Счет");
	ДокументРезультат.Вывести(ОбластьИтогиСчет, 0);
	
	ОбластьИтогиСтрокаЧисла = Макет.ПолучитьОбласть("ИтогиСтрока|Числа");
	ОбластьИтогиЧисла       = Макет.ПолучитьОбласть("Итоги|Числа");
	ОбластьИтогиСтрокаСчет  = Макет.ПолучитьОбласть("ИтогиСтрока|Счет");
	
	НомерТекущейСтрокиИтога = 0;	
	Для Каждого ИмяПоказателя Из МассивБалансовыеБезИзмерений Цикл
		
		Если НомерТекущейСтрокиИтога > 0 Тогда
			Область = ОбластьИтогиСтрокаЧисла
		Иначе
			Область = ОбластьИтогиЧисла;
		КонецЕсли;

		ФорматПоказателя = "";
		СтруктураПараметров.ФорматПоказателей.Свойство(ИмяПоказателя, ФорматПоказателя);

		ЗаполнитьДаннымОбластьВыводаОборотка(Область, ФорматПоказателя, 
			СтруктураОбщийИтог[ИмяПоказателя + "НачальныйОстатокДт"], СтруктураОбщийИтог[ИмяПоказателя + "НачальныйОстатокКт"], 
			СтруктураОбщийИтог[ИмяПоказателя + "КонечныйОстатокДт"], СтруктураОбщийИтог[ИмяПоказателя + "КонечныйОстатокКт"], 
			СтруктураОбщийИтог[ИмяПоказателя + "ОборотДт"], СтруктураОбщийИтог[ИмяПоказателя + "ОборотКт"]);
		
		Если НомерТекущейСтрокиИтога > 0 Тогда
			ДокументРезультат.Вывести(ОбластьИтогиСтрокаСчет, 0);
		КонецЕсли;

		ДокументРезультат.Присоединить(Область);
		
		НомерТекущейСтрокиИтога = НомерТекущейСтрокиИтога + 1;

	КонецЦикла;

	ИтогиПодвал = Макет.ПолучитьОбласть("ИтогиПодвал");
   	ДокументРезультат.Вывести(ИтогиПодвал, 0);

    Возврат ДокументРезультат
	
КонецФункции // ПолучитьОборотноСальдовуюВедомость()

// процедура выводит текущие данные оборотки в область вывода
Процедура ЗаполнитьДаннымОбластьВыводаОборотка(Область, Знач ФорматПоказателя, 
	Знач НачальныйОстатокДт, Знач НачальныйОстатокКт, 
	Знач КонечныйОстатокДт, Знач КонечныйОстатокКт, 
	Знач ОборотДт, Знач ОборотКт)
	
	Область.Параметры.НачальныйОстатокДт = Формат(НачальныйОстатокДт, ФорматПоказателя);
	Область.Параметры.НачальныйОстатокКт = Формат(НачальныйОстатокКт, ФорматПоказателя);
	Область.Параметры.КонечныйОстатокДт  = Формат(КонечныйОстатокДт,  ФорматПоказателя);
	Область.Параметры.КонечныйОстатокКт  = Формат(КонечныйОстатокКт,  ФорматПоказателя);
	Область.Параметры.ОборотДт           = Формат(ОборотДт,           ФорматПоказателя);
	Область.Параметры.ОборотКт           = Формат(ОборотКт,           ФорматПоказателя);
	
КонецПроцедуры

// процедура добавляет в итоговое хранилище сумм текущие данных
Процедура ДополнитьСтруктуруХраненияИтоговОборотка(Знач ИмяПоказателя, СтруктураОбщийИтог,
	Знач НачальныйОстатокДт, Знач НачальныйОстатокКт, Знач КонечныйОстатокДт, Знач КонечныйОстатокКт,
	Знач ОборотДт, Знач ОборотКт)
	
	СтруктураОбщийИтог[ИмяПоказателя + "НачальныйОстатокДт"] = СтруктураОбщийИтог[ИмяПоказателя + "НачальныйОстатокДт"] + НачальныйОстатокДт;
	СтруктураОбщийИтог[ИмяПоказателя + "НачальныйОстатокКт"] = СтруктураОбщийИтог[ИмяПоказателя + "НачальныйОстатокКт"] + НачальныйОстатокКт;
	СтруктураОбщийИтог[ИмяПоказателя + "КонечныйОстатокДт"] =  СтруктураОбщийИтог[ИмяПоказателя + "КонечныйОстатокДт" ] + КонечныйОстатокДт;
	СтруктураОбщийИтог[ИмяПоказателя + "КонечныйОстатокКт"] =  СтруктураОбщийИтог[ИмяПоказателя + "КонечныйОстатокКт" ] + КонечныйОстатокКт;
	СтруктураОбщийИтог[ИмяПоказателя + "ОборотДт"] =           СтруктураОбщийИтог[ИмяПоказателя + "ОборотДт"]           + ОборотДт;
	СтруктураОбщийИтог[ИмяПоказателя + "ОборотКт"] =           СтруктураОбщийИтог[ИмяПоказателя + "ОборотКт"]           + ОборотКт;
	
КонецПроцедуры

// Создание копии структуры или соответствия
//
// Параментры:
//   СоотвИсх - Структура/Соответствие - Исходная структура, с которой будет создаваться копия.
//
// Возвращаемое значение:
//   Структура/Соответствие - Копия исходной структуры. Тип данных повторяет тип исходной структуры.
Функция СоздатьКопиюСоответствияСтруктуры(Знач СоответствиеИсточник) Экспорт
	
	Если СоответствиеИсточник = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	КопияСоответствия = Новый (ТипЗнч(СоответствиеИсточник));
		
	Для Каждого ЭлементОтбора Из СоответствиеИсточник Цикл
				
		КопияСоответствия.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				
	КонецЦикла;
	
	Возврат КопияСоответствия;
	
КонецФункции

// Выводит группировку при развороте счета по субсчетам и/или субконто
//
// Параметры:
//	Выборка         - выборка из результата запроса по выводимой группировке,
//	ИндексТекущейГруппировки - индекс выводимой группировки в массиве группировок,
//	МассивГруппировок - массив, содержащий имена группировок, по которым строится разворот счета,
//	Уровень 		- уровень  группировки верхнего уровня
//	СдвигУровня     - сдвиг уровня группировки отчета относительно уровня группировки запроса,
//	СброситьСдвигУровня - признак сброса сдвига уровня,
//	СтрокаРазвернутогоСальдо - строка таблицы значений с развернутым сальдо по текущему счету.
//	СтруктураОбщийИтог - структура, в которой накапливаются общие итоги,
//	ПоследнийВыведенныйСчет - последний выведенный счет,
//	СтруктураПараметров - структура, содержащая неизменные для разворота счета параметры:
//	                      Области макета табличного документа, линии, уровень группировки, 
//	                      с которой начался вывод отчета.
//
Процедура ВывестиГруппировкуОборотноСальдовойВедомости(Выборка, Знач ИндексТекущейГруппировки, МассивГруппировок, Уровень, СдвигУровня, 
	СброситьСдвигУровня, ПоследнийВыведенныйСчет, СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураПараметров, 
	ОтборСубконто)

	СтруктураПараметров.Вставить("МассивГруппировок",МассивГруппировок);
	
	Пока Выборка.Следующий() Цикл

		ИмяГруппировки = Выборка.Группировка();
		
		// Итоги более высокого уровня по счету - пропускаем (он уже выведен)
		Если ИмяГруппировки = "Счет" Тогда

			// При выводе субсчетов не делаем отступы
			Если СброситьСдвигУровня Тогда
				
				СброситьСдвигУровня = Ложь;
				СдвигУровня = 0;
				
			КонецЕсли;
			
			Отступ = 0;
			СдвигУровня = СдвигУровня + 1;

			// Уже выведенные счета не выводим
			Если ПоследнийВыведенныйСчет.Код = Выборка.Счет.Код 
				ИЛИ ПоследнийВыведенныйСчет.ПринадлежитЭлементу(Выборка.Счет) Тогда
				
				ВывестиВложеннуюГруппировкуОборотноСальдовойВедомости(Выборка, ИндексТекущейГруппировки, МассивГруппировок, Уровень, СдвигУровня, 
					СброситьСдвигУровня, ПоследнийВыведенныйСчет, СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураПараметров, ОтборСубконто);
					
				Продолжить;
				
			КонецЕсли;
			
		Иначе
			
			Отступ = Макс(Выборка.Уровень() - СдвигУровня, 0);
			СброситьСдвигУровня = Истина;
			
		КонецЕсли;
		
		ОбластьСтрокаСчет = СтруктураПараметров.ОбластьСтрокаСчет;
		ОбластьСтрокаСчет.Параметры.Заполнить(Выборка);
		
		ВыводимаяОбласть = ОбластьСтрокаСчет;

		// Заполнение параметров расшифровки
		Если ИмяГруппировки = "Счет" Тогда
			
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, СтруктураПараметров);
				
		КонецЕсли;

		Если Лев(ИмяГруппировки, СтрДлина(ИмяГруппировки) - 1) = "Субконто" тогда

			// Субконто, которых нет, равны NULL
			Если Выборка[ИмяГруппировки] = NULL Тогда
				Продолжить;
			КонецЕсли;

			ОбластьСтрокаПоказателяСчет = СтруктураПараметров.ОбластьСтрокаПоказателяСчет;

			ОбластьСтрокаПоказателяСчет.Параметры.Заполнить(Выборка);

			ОбластьСтрокаПоказателяСчет.Параметры.СубконтоПредставление = Выборка[ИмяГруппировки + "Представление"];
			
			ВыводимаяОбласть = ОбластьСтрокаПоказателяСчет;

			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, СтруктураПараметров);

			ВыводимаяОбласть.Область(1, 4).Отступ = Отступ;
			
			Если Выборка.ТипЗаписи() = QueryRecordType.TotalByHierarchy Тогда
				ВыводимаяОбласть.Область(1, 4).Шрифт = Новый Шрифт(ВыводимаяОбласть.Область(1, 4).Шрифт,,,,Истина);
			Иначе
				ВыводимаяОбласть.Область(1, 4).Шрифт = Новый Шрифт(ВыводимаяОбласть.Область(1, 4).Шрифт,,,,Ложь);
			КонецЕсли;

		КонецЕсли;

		ДокументРезультат = СтруктураПараметров.ДокументРезультат;
		ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень + Выборка.Уровень());
		
		ВывестиПоказателиОборотноСальдовойВедомости(ДокументРезультат, Выборка, СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураПараметров);

		// вывод данных по валютам
		ОбластьСтрокаПоказателяСчет = СтруктураПараметров.ОбластьСтрокаПоказателяСчет;
		ВывестиДанныеПоИзмерениямОборотноСальдовойВедомости(СтруктураПараметров, ОбластьСтрокаПоказателяСчет, Выборка, ДокументРезультат, 
			СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, Отступ);
		
		ВывестиВложеннуюГруппировкуОборотноСальдовойВедомости(Выборка, ИндексТекущейГруппировки, МассивГруппировок, Уровень, СдвигУровня, 
			СброситьСдвигУровня, ПоследнийВыведенныйСчет, СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураПараметров, ОтборСубконто);
											
	КонецЦикла;

КонецПроцедуры

//процедура выводит вложенную группировку
Процедура ВывестиВложеннуюГруппировкуОборотноСальдовойВедомости(Выборка, Знач ИндексТекущейГруппировки, МассивГруппировок, Уровень, СдвигУровня, 
	СброситьСдвигУровня, ПоследнийВыведенныйСчет, СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураПараметров, ОтборСубконто)
	
	Если ИндексТекущейГруппировки + 1 >= МассивГруппировок.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиГруппировкуОборотноСальдовойВедомости(Выборка.Выбрать(?(ВнешняяИБ=0,QueryResultIteration.ByGroups,ТекСоединениеВИБ.QueryResultIteration.ByGroups), МассивГруппировок[ИндексТекущейГруппировки + 1]), 
						ИндексТекущейГруппировки + 1, МассивГруппировок, Уровень, 
						СдвигУровня, СброситьСдвигУровня, ПоследнийВыведенныйСчет, 
						СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураПараметров, СоздатьКопиюСоответствияСтруктуры(ОтборСубконто));
		
КонецПроцедуры	


// процедура Выводит данные по валютам
Процедура ВывестиДанныеПоИзмерениямОборотноСальдовойВедомости(СтруктураПараметров, ОбластьСтрокаПоказателяСчет, Выборка, 
	ДокументРезультат, СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, Знач Отступ)
	
	Для Каждого Измерение ИЗ МассивДопИзмерений Цикл
		
		ВыборкаПоИзмерению = Выборка.Выбрать(?(ВнешняяИБ=0,QueryResultIteration.ByGroups,ТекСоединениеВИБ.QueryResultIteration.ByGroups), Измерение);
			
		Пока ВыборкаПоИзмерению.Следующий() Цикл

			ОбластьСтрокаПоказателяСчет.Параметры.Заполнить(Выборка);
			ОбластьСтрокаПоказателяСчет.Параметры.СубконтоПредставление = Измерение+": " + ВыборкаПоИзмерению[Измерение+"Представление"];

			ЗаполнитьПараметрыРасшифровки(ОбластьСтрокаПоказателяСчет, Выборка, СтруктураПараметров);

			ОбластьСтрокаПоказателяСчет.Область(1, 4).Отступ = Отступ + 1;

			ДокументРезультат.Вывести(ОбластьСтрокаПоказателяСчет, Выборка.Уровень());
				
			ВывестиПоказателиОборотноСальдовойВедомости(ДокументРезультат, ВыборкаПоИзмерению, СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураПараметров);

		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры

// Выводит показатели
//
// Параметры:
//	ДокументРезультат - таблица отчета
//	Макет - используемый макет
//	Результат - выборка
//	Счет - счет выборки
//	ЭтоПерваяСтрока - признак вывода отступов перед субконто
//	СтрокаРазвернутогоСальдо - строка с выборкой - развернутым сальдо по счету
//	СтруктураОбщийИтог - структура, в которой накапливается общий итог.
//
Процедура ВывестиПоказателиОборотноСальдовойВедомости(ДокументРезультат, Выборка, СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураПараметров)

	ВыведеноПоказателей = 0;	
	
	ИмяГруппировки = Выборка.Группировка();
	
	Для Каждого Ресурс Из МассивВыводимыхРесурсов Цикл
		
		СтрДопИзмерения=ТаблицаДопИзмерений.Найти(Ресурс.ИмяПоля,"ИмяРесурса");
		
		Если (НЕ СтрДопИзмерения=Неопределено) 
			И СтрДопИзмерения.ИзмеренияРесурса.Количество()>0
			И СтрДопИзмерения.ИзмеренияРесурса.НайтиПоЗначению(ИмяГруппировки)=Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ИмяПоказателя=Ресурс.ИмяПоля;

		ФорматПоказателя = "";
		СтруктураПараметров.ФорматПоказателей.Свойство(ИмяПоказателя, ФорматПоказателя);

		ВыведеноПоказателей = ВыведеноПоказателей + 1;
		
		Если ВыведеноПоказателей > 1 Тогда
			// без подчеркивания вверху
			Область = СтруктураПараметров.ОбластьСтрокаПоказателяЧисла;
		Иначе
			// есть подчеркивание вверху
			Область = СтруктураПараметров.ОбластьСтрокаЧисла;
		КонецЕсли;

		ОборотДт = Выборка[ИмяПоказателя + "ОборотДт"];
		ОборотКт = Выборка[ИмяПоказателя + "ОборотКт"];

		Если СтрокаРазвернутогоСальдо = Неопределено Тогда

			НачальныйОстатокДт = Выборка[ИмяПоказателя + "НачальныйОстатокДт"];
			НачальныйОстатокКт = Выборка[ИмяПоказателя + "НачальныйОстатокКт"];
			КонечныйОстатокДт  = Выборка[ИмяПоказателя + "КонечныйОстатокДт"];
			КонечныйОстатокКт  = Выборка[ИмяПоказателя + "КонечныйОстатокКт"];

		Иначе

			// Спозиционируемся на самом верхнем итоге
			ВыборкаОбщиеИтоги = СтрокаРазвернутогоСальдо.Результат.Выбрать(?(ВнешняяИБ=0,QueryResultIteration.ByGroups,ТекСоединениеВИБ.QueryResultIteration.ByGroups));
			
			Если ВыборкаОбщиеИтоги.Следующий() Тогда
				НачальныйОстатокДт = ВыборкаОбщиеИтоги[ИмяПоказателя + "НачальныйРазвернутыйОстатокДт"];
				НачальныйОстатокКт = ВыборкаОбщиеИтоги[ИмяПоказателя + "НачальныйРазвернутыйОстатокКт"];
				КонечныйОстатокДт  = ВыборкаОбщиеИтоги[ИмяПоказателя + "КонечныйРазвернутыйОстатокДт"];
				КонечныйОстатокКт  = ВыборкаОбщиеИтоги[ИмяПоказателя + "КонечныйРазвернутыйОстатокКт"];
			Иначе
				НачальныйОстатокДт = 0;
				НачальныйОстатокКт = 0;
				КонечныйОстатокДт  = 0;
				КонечныйОстатокКт  = 0;
			КонецЕсли;

		КонецЕсли;

		// Накопление итогов по счетам
		НужноДополнятьИтоги = (ИмяГруппировки = "Счет") И (Выборка.Уровень() = 0);
		Если НЕ ПоЗабалансовымСчетам Тогда 			
			
			НужноДополнятьИтоги = НужноДополнятьИтоги И	НЕ Выборка.СчетЗабалансовый;
			
		КонецЕсли;
			
		Если НужноДополнятьИтоги Тогда

			ДополнитьСтруктуруХраненияИтоговОборотка(ИмяПоказателя, СтруктураОбщийИтог,
				НачальныйОстатокДт, НачальныйОстатокКт, КонечныйОстатокДт, КонечныйОстатокКт,
				ОборотДт, ОборотКт);
				
		КонецЕсли;

		// заполняет данными область вывода
		ЗаполнитьДаннымОбластьВыводаОборотка(Область, ФорматПоказателя, 
			НачальныйОстатокДт, НачальныйОстатокКт, КонечныйОстатокДт,
			КонечныйОстатокКт, ОборотДт, ОборотКт);
			
		Если ВыведеноПоказателей > 1 Тогда

			ОбластьСтрокаПоказателяСчет = СтруктураПараметров.ОбластьСтрокаПоказателяСчет;
			
			Если ИмяПоказателя = "ВалютнаяСумма" Тогда
				ОбластьСтрокаПоказателяСчет.Параметры.СубконтоПредставление = Нстр("ru = 'Валютная сумма'");
			Иначе
				ОбластьСтрокаПоказателяСчет.Параметры.СубконтоПредставление = "";
			КонецЕсли;
				
            ВыведеннаяОбласть = ДокументРезультат.Вывести(ОбластьСтрокаПоказателяСчет);
			
			ВыведеннаяОбласть.ГраницаСверху = СтруктураПараметров.НетЛинии;
			
		КонецЕсли;

		ДокументРезультат.Присоединить(Область);
				
	КонецЦикла;

КонецПроцедуры

// Формирует запросы по каждому счету, указанному в таблице вывода итогов
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Таблица запросов
//
Функция СформироватьТаблицуДанныхРазворотаСчетов(СтруктураПараметров, Знач ПравилаИтоги)

	// Результат функции будут укладываться в таблицу
	ТаблицаРазворотаСчетов = Новый ТаблицаЗначений;
	ТаблицаРазворотаСчетов.Колонки.Добавить("Счет");
	ТаблицаРазворотаСчетов.Колонки.Добавить("Результат");
	ТаблицаРазворотаСчетов.Колонки.Добавить("МассивГруппировок");
	ТаблицаРазворотаСчетов.Колонки.Добавить("СоответствиеСчетов");

	Если (НЕ ПоСубсчетамИСубконто)
		ИЛИ ПравилаИтоги.Количество() = 0 Тогда
		
		Возврат ТаблицаРазворотаСчетов;
		
	КонецЕсли;
			
	// Сформируем текст запроса
	Для Каждого ПравилаСчета из ПравилаИтоги Цикл
		
		Если ПустаяСтрока(ПравилаСчета.СчетКод)
			ИЛИ (НЕ ПравилаСчета.Субсчета
				И ПравилаСчета.Субконто.Количество() = 0) Тогда
				
			Продолжить; // неправильно заполненная строка, не обрабатываем
				
		КонецЕсли;
		
		ЗапросРазворот = НастроитьОбъектЗапрос();
		
		ТекстЗапроса = "";
		ТекстИтогов  = "";
		ТекстВыбранныеПоля = "";
		ТекстИтогиПо = "";
					
		МассивГруппировок = Новый Массив;
			
		ЗапросРазворот.УстановитьПараметр("Счет", ПолучитьСчетБД(ПравилаСчета.СчетКод));

		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Счет КАК Счет";
		
		ТекстВнеш = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Счет КАК Счет,
		|	Счет.Код КАК СчетКод,
		|	Счет.Наименование КАК СчетНаименование,
		|	Счет.Представление КАК СчетПредставление,
		|	Счет.Забалансовый КАК СчетЗабалансовый";
		
		
		Если МассивДопИзмерений.Количество()>0 Тогда 
			
			Для Каждого Измерение ИЗ МассивДопИзмерений Цикл
				
				ТекстЗапроса = ТекстЗапроса + ",
				|"+Измерение+" КАК "+Измерение;
				
				ТекстВнеш = ТекстВнеш + ",
				|"+Измерение+" КАК "+Измерение+",
				|ПРЕДСТАВЛЕНИЕ("+Измерение+") КАК "+Измерение+"Представление ";
				
			КонецЦикла;
			
		КонецЕсли;
					
		МассивГруппировок.Добавить("Счет");
		Если ПравилаСчета.Субсчета Тогда
			
			ТекстИтогиПо = ТекстИтогиПо + ", Счет ИЕРАРХИЯ";
						
		Иначе
				
			ТекстИтогиПо = ТекстИтогиПо + ", Счет ";
							
		КонецЕсли;				
				
		// признак того, что можно использовать вложенный запрос 
		МожноИспользоватьСоставнойЗапрос = ОпределитьМожноИспользоватьСоставнойЗапросПоСубконто(ПравилаСчета);
		
		Инд=1;
		
		Для Каждого СтрокаПоСубконто Из ПравилаСчета.Субконто Цикл
			
			Если НЕ СтрокаПоСубконто.Пометка Тогда
				
				Инд=Инд+1;
				Продолжить;
				
			КонецЕсли;
				
			ДанныеСубконто = ВернутьСубконтоПоИмени(ПравилаСчета.ВидыСубконто, СтрокаПоСубконто.Значение);
			ИмяСубконто="СубконтоДт"+Инд;
			
			Если ДанныеСубконто = Неопределено Тогда
				Продолжить;
			КонецЕсли;
				
			Сч = ДанныеСубконто.ВидСубконто.НомерСтроки;
				
			Выб = "";
			ВыбИначе = "";
			
			ЕстьПредставление = Истина;
			ЕстьСправочник=Ложь;
			
			Для Каждого Тип Из ДанныеСубконто.МассивТипов Цикл
								
				Если Не РаботаСОбъектамиМетаданныхВнешнийУХ.ПримитивныйТипСтрока(Тип) Тогда
					
					Выб = Выб + "КОГДА #Поле ССЫЛКА " + Тип + " ТОГДА ВЫРАЗИТЬ( #Поле КАК (" + Тип + "))";
						
					Если СтрНайти(Тип,"Перечисление.")>0 Тогда
						ЕстьПредставление = Ложь;
					КонецЕсли;
					
					Если СтрНайти(Тип,"Справочник.")>0 Тогда
						ЕстьСправочник = Истина;
					КонецЕсли;
						
				Иначе
					// Для примитивных типов придется добавлять само значение
					ВыбИначе = " #Поле ";
					ЕстьПредставление = Ложь;
					
				КонецЕсли;
					
			КонецЦикла;
			
			// окончательное формирование строки выбора поля
			Если НЕ ПустаяСтрока(Выб) Тогда
				
				Если НЕ ПустаяСтрока(ВыбИначе) Тогда
					СтрПоле = "
					|	ВЫБОР " + Выб + " ИНАЧЕ " + ВыбИначе + " КОНЕЦ";
				Иначе
					СтрПоле = "
					|	ВЫБОР " + Выб + " КОНЕЦ";
				КонецЕсли;
				
			Иначе
				
				СтрПоле = ВыбИначе;
				
			КонецЕсли;
				
			ТекстВыбранныеПоля = ТекстВыбранныеПоля + ", " + СтрЗаменить(СтрПоле, "#Поле", " ОстаткиИОбороты.Субконто"  + Сч) + " КАК Субконто" + Сч;
			
			ТекстИтогиПо = ТекстИтогиПо + ", Субконто" + Сч;
			
			// само поле
			ТекстВнеш  = ТекстВнеш + ", Субконто" + Сч;
			// поле представления
			ТекстВнеш  = ТекстВнеш + ", Субконто" + Сч;
			
			Если ЕстьПредставление 
				И МожноИспользоватьСоставнойЗапрос Тогда
				
				ТекстВнеш  = ТекстВнеш + ".Представление ";
				
			КонецЕсли;
							
			ТекстВнеш  = ТекстВнеш + " КАК Субконто" + Сч + "Представление";
			
			Если ЕстьСправочник Тогда
				
				ТекстВнеш  = ТекстВнеш + ", Субконто" + Сч+".Код КАК Субконто"+ Сч+"Код,Субконто" + Сч+".Наименование КАК Субконто"+ Сч+"Наименование"; 
				
			КонецЕсли;
				
			МассивГруппировок.Добавить("Субконто" + Сч);
				
		КонецЦикла; 

		ТекстЗапроса = ТекстЗапроса + ТекстВыбранныеПоля;
	
		// Добавим в текст запроса все выбранные ресурсы 
			
		ТекстЗапроса = ТекстЗапроса + ВернутьЧастьЗапросаПоВыборкеПолейОборотносальдоваяВедомость(Истина, 
				Истина, Истина);
			
		ТекстВнеш = ТекстВнеш + ВернутьЧастьЗапросаПоВыборкеПолейОборотносальдоваяВедомость(Истина);
			
		ТекстИтогов = ТекстИтогов + ВернутьЧастьЗапросаПоВыборкеПолейОборотносальдоваяВедомость(Ложь);	
		
		ТекстОтбор="";
		
		Для Каждого СтрПараметр ИЗ ИспользуемыеПараметры Цикл
						
			ТекстОтбор=ТекстОтбор+" И "++СтрПараметр.КонструкцияОтбора;
			
		КонецЦикла;
		
		СтрокаТекстаВыборкиИзТаблицы=" 
		|
		|ИЗ
		|	РегистрБухгалтерии."+ДанныеРегистра.НаименованиеРегистра+".ОстаткиИОбороты(&ДатаНач, &ДатаКон, , ,Счет В ИЕРАРХИИ (&Счет),"+?(ДанныеРегистра.МаксимальноеКоличествоСубконто>0,", ","") + Сред(ТекстОтбор,3) + ") КАК ОстаткиИОбороты";
				
		Если МожноИспользоватьСоставнойЗапрос Тогда
			
			ТекстЗапроса = ТекстЗапроса + СтрокаТекстаВыборкиИзТаблицы;
							
			ТекстЗапроса = ТекстВнеш + " ИЗ (" + ТекстЗапроса + " ) КАК Подзапрос 
			|	АВТОУПОРЯДОЧИВАНИЕ";
			
		Иначе
				
			ТекстЗапроса = ТекстВнеш + СтрокаТекстаВыборкиИзТаблицы + "
			|	АВТОУПОРЯДОЧИВАНИЕ";
				
		КонецЕсли;

		Если Не ПустаяСтрока(ТекстИтогиПо) Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|ИТОГИ ";

			ТекстЗапроса = ТекстЗапроса + Сред(ТекстИтогов, 2);

			ТекстЗапроса = ТекстЗапроса + "
			|ПО " + Сред(ТекстИтогиПо, 2);
			
			Для Каждого Измерение ИЗ МассивДопИзмерений Цикл
				
				ТекстЗапроса = ТекстЗапроса + ",
				|"+Измерение+" КАК "+Измерение;

			КонецЦикла;	

		КонецЕсли;
			
		ЗапросРазворот.Текст = ТекстЗапроса;

		НоваяСтрока = ТаблицаРазворотаСчетов.Добавить();
		НоваяСтрока.Счет      = ПравилаСчета.СчетКод;
		НоваяСтрока.Результат = ЗапросРазворот.Выполнить(); // в таблицу помещается выполненный запрос
		НоваяСтрока.МассивГруппировок = МассивГруппировок;
				
		СоответствиеСчетов = ВернутьСоответвиеПодчиненныхСчетов(ПолучитьСчетБД(ПравилаСчета.СчетКод));
		НоваяСтрока.СоответствиеСчетов = СоответствиеСчетов;
							
	КонецЦикла;

	Возврат ТаблицаРазворотаСчетов;
	
КонецФункции

Функция ВернутьСубконтоПоИмени(ВидыСубконто,ИмяСубконто)
	
	СтрСубконто=ВидыСубконто.Найти(ИмяСубконто,"ВидСубконто");
	
	ДанныеСубконто=Новый Структура;
	ДанныеСубконто.Вставить("ВидСубконто",СтрСубконто);
	ДанныеСубконто.Вставить("МассивТипов",СтрРазделить(СтрСубконто.ТипДанных,";",Истина));
	
	Возврат ДанныеСубконто;
		
КонецФункции // ВернутьСубконтоПоИмени() 

//Функция возвращает можно ил использовать составной запрос для детализации по субконто
Функция ОпределитьМожноИспользоватьСоставнойЗапросПоСубконто(ПравилаСчета)
	
	// Определим признак использования составного запроса
	Для Каждого СтрокаПоСубконто Из ПравилаСчета.Субконто Цикл
		
		ДанныеСубконто = ВернутьСубконтоПоИмени(ПравилаСчета.ВидыСубконто, СтрокаПоСубконто.Значение);
		
		Если (ДанныеСубконто <> Неопределено)
			 И (ДанныеСубконто.МассивТипов.Количество() > 10) Тогда
			 
			Возврат Ложь;
			
		КонецЕсли;
								
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

// Формирует запросы по каждому из счетов, указанному в таблице развернутого сальдо
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Таблица запросов
//
Функция СформироватьТаблицуДанныхРазвернутогоСальдо(СтруктураПараметров, ПравилаСальдо)

	// Результат Каждого запроса будет укладываться в специальную таблицу
	ТаблицаРазвернутогоСальдо = Новый ТаблицаЗначений;
	ТаблицаРазвернутогоСальдо.Колонки.Добавить("Счет");
	ТаблицаРазвернутогоСальдо.Колонки.Добавить("Результат");
	
	Если НЕ РазвернутоеСальдо
		ИЛИ (ПравилаСальдо.Количество() = 0) Тогда
		
		Возврат ТаблицаРазвернутогоСальдо;
		
	КонецЕсли;
		
	// Сформируем текст запроса
	Для Каждого ПравилаСчета из ПравилаСальдо Цикл
		
		Если ПустаяСтрока(ПравилаСчета.СчетКод)
			ИЛИ (НЕ ПравилаСчета.Субсчета
				И ПравилаСчета.Субконто.Количество() = 0) Тогда
				
			Продолжить; // неправильно заполненная строка, не обрабатываем
				
		КонецЕсли;
		
		ЗапросСальдо = НастроитьОбъектЗапрос();
		
		ТекстЗапроса = "";
		ТекстИтогов  = "";
		ТекстВыбранныеПоля = "";
			
		ТекстИтогиПо = "";
			
		МассивГруппировок = Новый Массив;
							
		МассивГруппировок.Добавить("Общие"); // всегда есть общий итог
			
		ЗапросСальдо.УстановитьПараметр("Счет", ПолучитьСчетБД(ПравилаСчета.СчетКод));
			
		ТекстЗапроса =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Счет КАК Счет ";
		
		Если МассивДопИзмерений.Количество()>0 Тогда 
			
			Для Каждого Измерение ИЗ МассивДопИзмерений Цикл
								
				ТекстЗапроса = ТекстЗапроса + ",
				|"+Измерение+" КАК "+Измерение+",
				|ПРЕДСТАВЛЕНИЕ("+Измерение+") КАК "+Измерение+"Представление ";
				
			КонецЦикла;
			
		КонецЕсли;
					
		// Развернутое сальдо может быть подсчитано либо по субсчетам, либо по субконто
		Если ПравилаСчета.Субсчета Тогда
				
			ТекстИтогиПо = ТекстИтогиПо + ", Счет ТОЛЬКО ИЕРАРХИЯ";
				
			МассивГруппировок.Добавить("Счет");
			
		Иначе
			
			Индекс=1;
			
			Для Каждого СтрокаПоСубконто Из ПравилаСчета.Субконто Цикл
				
				Если СтрокаПоСубконто.Пометка Тогда
					
					ИмяСубконто="Субконто"+Индекс;
					
					ТекстВыбранныеПоля = ТекстВыбранныеПоля + ",
					|	" + ИмяСубконто + " КАК " + ИмяСубконто;
					
					ТекстИтогиПо = ТекстИтогиПо + ", " + ИмяСубконто;
					
					МассивГруппировок.Добавить(ИмяСубконто);
					
				КонецЕсли;
				
			КонецЦикла; 
				
			ТекстЗапроса = ТекстЗапроса + ТекстВыбранныеПоля;
				
		КонецЕсли;

		// Добавим в текст запроса все выбранные ресурсы 
		Для Каждого СтрРесурс ИЗ МассивВыводимыхРесурсов Цикл
			
			ИмяПоказателя=СтрРесурс.ИмяПоля;
			
			ТекстЗапроса = ТекстЗапроса + ",
			|	" + ИмяПоказателя + "НачальныйРазвернутыйОстатокДт КАК " + ИмяПоказателя + "НачальныйРазвернутыйОстатокДт,
			|	" + ИмяПоказателя + "НачальныйРазвернутыйОстатокКт КАК " + ИмяПоказателя + "НачальныйРазвернутыйОстатокКт,
			|	" + ИмяПоказателя + "КонечныйРазвернутыйОстатокДт КАК "  + ИмяПоказателя + "КонечныйРазвернутыйОстатокДт,
			|	" + ИмяПоказателя + "КонечныйРазвернутыйОстатокКт КАК "  + ИмяПоказателя + "КонечныйРазвернутыйОстатокКт";
				
			ТекстИтогов = ТекстИтогов + ",
			|	СУММА(" + ИмяПоказателя + "НачальныйРазвернутыйОстатокДт),
			|	СУММА(" + ИмяПоказателя + "НачальныйРазвернутыйОстатокКт),
			|	СУММА(" + ИмяПоказателя + "КонечныйРазвернутыйОстатокДт),
			|	СУММА(" + ИмяПоказателя + "КонечныйРазвернутыйОстатокКт)";
				
		КонецЦикла;
		
		ТекстОтбор="";
		Для Каждого СтрПараметр ИЗ ИспользуемыеПараметры Цикл
						
			ТекстОтбор=ТекстОтбор+" И "+СтрПараметр.КонструкцияОтбора;
			
		КонецЦикла;
			
		СтрокаТекстаВыборкиИзТаблицы=" 
		|
		|ИЗ
		|	РегистрБухгалтерии."+ДанныеРегистра.НаименованиеРегистра+".ОстаткиИОбороты(&ДатаНач, &ДатаКон, , ,Счет В ИЕРАРХИИ (&Счет),"+?(ДанныеРегистра.МаксимальноеКоличествоСубконто>0,", ","") + Сред(ТекстОтбор,3) + ") КАК ОстаткиИОбороты";

			
		ТекстЗапроса = ТекстЗапроса + СтрокаТекстаВыборкиИзТаблицы;
 			
		Если Не ПустаяСтрока(ТекстИтогиПо) Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|ИТОГИ ";

			ТекстЗапроса = ТекстЗапроса + Сред(ТекстИтогов, 2);

			ТекстЗапроса = ТекстЗапроса + "
			|ПО ОБЩИЕ " + ТекстИтогиПо;

			Для Каждого Измерение ИЗ МассивДопИзмерений Цикл
				
				ТекстЗапроса = ТекстЗапроса + ",
				|"+Измерение+" КАК "+Измерение;

			КонецЦикла;	

		КонецЕсли;

		ЗапросСальдо.Текст = ТекстЗапроса;

		НоваяСтрока = ТаблицаРазвернутогоСальдо.Добавить();
		НоваяСтрока.Счет      = ПравилаСчета.СчетКод;
		НоваяСтрока.Результат = ЗапросСальдо.Выполнить(); // в таблицу помещается выполненный запрос
			
	КонецЦикла;

	Возврат ТаблицаРазвернутогоСальдо;

КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ КАРТОЧКИ СЧЕТА

Функция ВернутьСоответвиеПодчиненныхСчетов(ДобавлятьСамСчетВСоответсвие = Ложь,РабочийСчет=Неопределено) Экспорт
	
	Если РабочийСчет=Неопределено Тогда
		РабочийСчет=СчетСсылкаБД;
	КонецЕсли;
	
	СоответствиеСчетов = ?(ВнешняяИБ=0,Новый Соответствие,ТекСоединениеВИБ.NewObject("Соответствие"));
	
	Запрос = ?(ВнешняяИБ=0,Новый Запрос,ТекСоединениеВИБ.NewObject("Запрос"));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПланСчетовРегистра.Ссылка КАК Ссылка
		|ИЗ	ПланСчетов." + ДанныеРегистра.ПланСчетовРегистр + " КАК ПланСчетовРегистра
		|ГДЕ	ПланСчетовРегистра.Ссылка В Иерархии(&Ссылка)";
		
	Запрос.УстановитьПараметр("Ссылка", РабочийСчет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если (НЕ ДобавлятьСамСчетВСоответсвие)
			И (Выборка.Ссылка = РабочийСчет) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СоответствиеСчетов.Вставить(Выборка.Ссылка, -1);
		
	КонецЦикла;

	Возврат СоответствиеСчетов;
	
КонецФункции

// процедура выводит данные остатков по оборотам в макет
Процедура ВывестиДанныеОстатковКарточкиСчетаВМакет(ЗапросПоОстаткам, Знач ОбластьМакет, Знач ЗапросНаНачало,СтруктураСальдо) Экспорт
	
	Остатки = ЗапросПоОстаткам.Выполнить().Выбрать();
	Остатки.Следующий();
	
	Для Каждого СтрРесурс ИЗ МассивВыводимыхРесурсов Цикл
		
		Если НЕ СтруктураСальдо.Свойство(СтрРесурс.ИмяПоля+"_ТекущееСальдо") Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ЗапросНаНачало Тогда
			
			ОбластьМакет.Параметры.ОписательСальдо = СтрШаблон(Нстр("ru = '%1: сальдо на начало'"), СтрРесурс.ПредставлениеПоля);
			
		Иначе
			
			ОбластьМакет.Параметры.ОписательСальдо = СтрШаблон(Нстр("ru = '%1: сальдо на конец'"), СтрРесурс.ПредставлениеПоля);
			
		КонецЕсли;
		
		РесурсОстатокДт = ПривестиКЧислу(Остатки[СтрРесурс.ИмяПоля+"ОстатокДт"]);
		РесурсОстатокКт = ПривестиКЧислу(Остатки[СтрРесурс.ИмяПоля+"ОстатокКт"]);
		
		ТекущееСальдо = РесурсОстатокДт - РесурсОстатокКт;
		СтруктураСальдо.Вставить(СтрРесурс.ИмяПоля+"_ТекущееСальдо",ТекущееСальдо);
		
		Если ДанныеСчета.Вид = "АктивноПассивный" Тогда
			
			Если РесурсОстатокДт > РесурсОстатокКт Тогда
				
				ОбластьМакет.Параметры.РесурсСальдоДт   = ТекущееСальдо;
				ОбластьМакет.Параметры.РесурсСальдоКт   = 0;
				
			Иначе
				
				ОбластьМакет.Параметры.РесурсСальдоДт   = 0;
				ОбластьМакет.Параметры.РесурсСальдоКт   = -ТекущееСальдо;
				
			КонецЕсли;
			
		Иначе
			
			ОбластьМакет.Параметры.РесурсСальдоДт  = РесурсОстатокДт;
			ОбластьМакет.Параметры.РесурсСальдоКт  = РесурсОстатокКт;
			
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьМакет);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеЯвляетсяСписком(Значение)
	
	Возврат РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLTypeOf(ТекСоединениеВИБ,Значение)=РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLTypeOf(ТекСоединениеВИБ,ТекСоединениеВИБ.NewObject("СписокЗначений"));	
			
КонецФункции 

// Проверка соответствия половины проводки установленным отборам пользователя
//
// Параметры
//  Выборка  – ВыборкаИзРезультатаЗапроса – Выборка из результата запроса
//  Сторона  – Строка                     – Дт/Кт
//
// Возвращаемое значение:
//   Булево   – Соответствует или нет сторона проводки установленным отборам
//
Функция ЗначениеПоляСоответствуетОтбору(Выборка, Знач СторонаПроводки) Экспорт

	Результат = Истина;
	
	Для Каждого ЭлементОтбора Из ИспользуемыеПараметры Цикл
		
		Если (СтрНайти(ВРЕГ(ЭлементОтбора.ИмяПараметра),"СУБКОНТО")=0 И СтрНайти(ВРЕГ(ЭлементОтбора.ИмяПараметра),"ВАЛЮТА")=0)
			ИЛИ СтрНайти(ЭлементОтбора.ИмяПараметра,".")>0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПолеПараметра=?(ЗначениеЗаполнено(ДанныеКоррСчета.Код),ЭлементОтбора.ПолеБД,СтрЗаменить(ЭлементОтбора.ПолеБД,"Дт",""));
		
		ИмяПоля = СтрЗаменить(ПолеПараметра, "Субконто", "Субконто"+СторонаПроводки);
		
		Если ВРЕГ(Лев(ПолеПараметра, 8)) = "СУБКОНТО" Тогда
			ИмяПоля = "Субконто" + СторонаПроводки + Сред(ПолеПараметра,9);
		КонецЕсли;
		Если ВРЕГ(Лев(ПолеПараметра, 6)) = "ВАЛЮТА" Тогда
			ИмяПоля = "Валюта" + СторонаПроводки + Сред(ПолеПараметра,7);
		КонецЕсли;
		
		ЗначениеПоля = Выборка[ИмяПоля];
		ЗначениеОтбора=ОбъектЗапрос.Параметры[ПолеПараметра];
		
		Если ЭлементОтбора.СпособВычисленияПараметра="ФиксированноеЗначение" Тогда
					
			Если ЗначениеЯвляетсяСписком(ЗначениеОтбора) Тогда
				
				 Результат = ЗначениеОтбора.НайтиПоЗначению(ЗначениеПоля) <> Неопределено;
				 
			 Иначе
				 
				 Результат=РаботаСОбъектамиМетаданныхВнешнийУХ.СравнитьЗначения(ТекСоединениеВИБ,ЗначениеПоля,ЗначениеОтбора);
				 
			КонецЕсли;
				 	
		ИначеЕсли ЭлементОтбора.СпособВычисленияПараметра="СписокФиксированныхЗначений" Тогда
			
			Если ЗначениеЯвляетсяСписком(ЗначениеОтбора) Тогда
				
				 Результат = ЗначениеОтбора.НайтиПоЗначению(ЗначениеПоля) <> Неопределено;
				 
			 Иначе
				 
				 Результат=РаботаСОбъектамиМетаданныхВнешнийУХ.СравнитьЗначения(ТекСоединениеВИБ,ЗначениеПоля,ЗначениеОтбора);
				 
			КонецЕсли;
							
		ИначеЕсли ЭлементОтбора.СпособВычисленияПараметра="СписокПоИерархии" Тогда
			
			ПромРезультат = Ложь;
			
			Если ЗначениеЯвляетсяСписком(ЗначениеОтбора) Тогда	
				
				Для Каждого Элемент Из ЗначениеОтбора Цикл
					
					Если ВИерархии(ЗначениеПоля, Элемент.Значение) Тогда
						ПромРезультат = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				ПромРезультат=ВИерархии(ЗначениеПоля, ЗначениеОтбора);
				
			КонецЕсли;
			
			Результат = ПромРезультат;
			
		ИначеЕсли ЭлементОтбора.СпособВычисленияПараметра="НеВСпискеПоИерархии" Тогда
			
			ПромРезультат = Ложь;
			
			Если ЗначениеЯвляетсяСписком(ЗначениеОтбора) Тогда	
				
				Для Каждого Элемент Из ЗначениеОтбора Цикл
					
					Если ВИерархии(ЗначениеПоля, Элемент.Значение) Тогда
						ПромРезультат = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				ПромРезультат=ВИерархии(ЗначениеПоля, ЗначениеОтбора);
				
			КонецЕсли;
			
			Результат = НЕ ПромРезультат;
			
		ИначеЕсли ЭлементОтбора.СпособВычисленияПараметра="НеРавноФиксированномуЗначению" Тогда
			
			Если ЗначениеЯвляетсяСписком(ЗначениеОтбора) Тогда
				
				 Результат = ЗначениеОтбора.НайтиПоЗначению(ЗначениеПоля) = Неопределено;
				 
			 Иначе
				 
				 Результат=НЕ РаботаСОбъектамиМетаданныхВнешнийУХ.СравнитьЗначения(ТекСоединениеВИБ,ЗначениеПоля,ЗначениеОтбора);;
				 
			КонецЕсли;
			
		ИначеЕсли ЭлементОтбора.СпособВычисленияПараметра="НеВСпискеФиксированныхЗначений" Тогда
			
			Если ЗначениеЯвляетсяСписком(ЗначениеОтбора) Тогда
				
				 Результат = ЗначениеОтбора.НайтиПоЗначению(ЗначениеПоля) = Неопределено;
				 
			 Иначе
				 
				 Результат=НЕ РаботаСОбъектамиМетаданныхВнешнийУХ.СравнитьЗначения(ТекСоединениеВИБ,ЗначениеПоля,ЗначениеОтбора);
				 
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // СоответствуетОтбору()

Функция ВИерархии(ЛевоеЗначение, ПравоеЗначение)
	
	Попытка
		
		Если ТипЗнч(ЛевоеЗначение) <> ТипЗнч(ПравоеЗначение) Тогда
			Возврат Ложь;    	
		ИначеЕсли ЛевоеЗначение = ПравоеЗначение Тогда
			Возврат Истина;
		ИначеЕсли ЛевоеЗначение.Пустая() ИЛИ ПравоеЗначение.Пустая() Тогда
			Возврат Ложь;
		ИначеЕсли ЛевоеЗначение.ПринадлежитЭлементу(ПравоеЗначение) Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;

КонецФункции

//Функция для счета возвращает количество субконто для него
Функция ОпределитьДляСчетаПоСоответсвиеКоличествоСубконто(СчетПроводки, СоответствиеСчетов)
	
	Если ДанныеРегистра.МаксимальноеКоличествоСубконто=0 Тогда
		
		Возврат 0;
		
	КонецЕсли;
	
	СоответствиеСчетов = Новый Соответствие;
	
	КоличествоСубконтоСчета = СоответствиеСчетов[СчетПроводки];
	Если КоличествоСубконтоСчета = -1
		ИЛИ КоличествоСубконтоСчета = Неопределено Тогда
		
		КоличествоСубконтоСчета = СчетПроводки.ВидыСубконто.Количество();
		СоответствиеСчетов[СчетПроводки] = КоличествоСубконтоСчета;
		
	КонецЕсли;

	Возврат КоличествоСубконтоСчета;
	
КонецФункции

// процедура выводит представления субконто для текущей строки отчета в макет
Процедура ВывестиПредставленияСубконтоТекущейСтрокиВМакет(Знач ПрефиксНаименованияКолонки, Проводки, Знач КоличествоСубконтоСчета, 
	ОбластьМакет, ДокументРезультат, СтруктураРасшифровки) Экспорт
	
	Для Индекс = 0 По КоличествоСубконтоСчета - 1 Цикл

		ОбластьМакет.Параметры.Содержание = ?(НЕ РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьЗначениеЗаполнено(ТекСоединениеВИБ,Проводки[ПрефиксНаименованияКолонки + Строка(Индекс + 1)])
			, "<...>"
			, Проводки[ПрефиксНаименованияКолонки + Строка(Индекс + 1) + "Представление"]);

		ОбластьМакет.Параметры.Расшифровка = СтруктураРасшифровки;
		ДокументРезультат.Вывести(ОбластьМакет);

	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьКарточкуСчета(ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	// Выберем в соответствие все подчиненные счета (для определения принадлежности выводимого счета деьбета, кредита):
	СоответствиеПодчиненныеСчета = ВернутьСоответвиеПодчиненныхСчетов(Истина);
		
	СоответствиеСчетовКэш = Новый Соответствие; 
	
	ДокументРезультат=Новый ТабличныйДокумент;

	// Вывод заголовка отчета
	СформироватьИВывестиЗаголовокОтчета( ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок);
	
	Макет = ПолучитьМакет("КарточкаСчета");

	ЗапросПоОстаткам = НастроитьОбъектЗапрос();
	
	Если ЗапросПоОстаткам=Неопределено Тогда
		Возврат ДокументРезультат;
	КонецЕсли;
	
	ОбъектЗапрос=ЗапросПоОстаткам;
	
	ЗапросПоОстаткам.УстановитьПараметр("СчетАнализа", СчетСсылкаБД);
	ЗапросПоОстаткам.УстановитьПараметр("Период",      ?(Не ЗначениеЗаполнено(ДатаНач), (ДатаНач + 1), НачалоДня(ДатаНач)));

	ТекстОтбор= "";
	Для Каждого СтрПараметр ИЗ ИспользуемыеПараметры Цикл
				
		ТекстОтбор=ТекстОтбор+" И "+СтрПараметр.КонструкцияОтбора;
		
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ";
	
	ТекстРесурсы="";
	
	Для Каждого СтрРесурс ИЗ МассивВыводимыхРесурсов Цикл
				
		ТекстРесурсы=ТекстРесурсы+",
	    |СУММА(Выборка."+СтрРесурс.ИмяПоля+"ОстатокДт) КАК "+СтрРесурс.ИмяПоля+"ОстатокДт,
		|СУММА(Выборка."+СтрРесурс.ИмяПоля+"ОстатокКт) КАК "+СтрРесурс.ИмяПоля+"ОстатокКт";
		
		Если СтрРесурс.Балансовый Тогда
			ТекстРесурсы=ТекстРесурсы+",
			|СУММА(Выборка."+СтрРесурс.ИмяПоля+"Остаток) КАК "+СтрРесурс.ИмяПоля+"Остаток";
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса=ТекстЗапроса+Сред(ТекстРесурсы,2)+"	
	|ИЗ
	|(ВЫБРАТЬ
	|	Счет,";
	
	ТекстРесурсы="";
	
	Для Каждого СтрРесурс ИЗ МассивВыводимыхРесурсов Цикл
				
		ТекстРесурсы=ТекстРесурсы+",
	    |"+СтрРесурс.ИмяПоля+"ОстатокДт КАК "+СтрРесурс.ИмяПоля+"ОстатокДт,
		|"+СтрРесурс.ИмяПоля+"ОстатокКт КАК "+СтрРесурс.ИмяПоля+"ОстатокКт";
		
		Если СтрРесурс.Балансовый Тогда
			ТекстРесурсы=ТекстРесурсы+",
			|"+СтрРесурс.ИмяПоля+"Остаток КАК "+СтрРесурс.ИмяПоля+"Остаток";
		КонецЕсли;
		
	КонецЦикла;
	ТекстЗапроса=ТекстЗапроса+Сред(ТекстРесурсы,2)+"
	|ИЗ
	|	РегистрБухгалтерии."+ ДанныеРегистра.НаименованиеРегистра + ".Остатки(&Период, Счет В ИЕРАРХИИ (&СчетАнализа),"+?(ДанныеРегистра.МаксимальноеКоличествоСубконто>0,", ","") 
	+ Сред(ТекстОтбор,3) + ") КАК ОсновнойОстатки 	
	|
	|) КАК Выборка";
	
	ЗапросПоОстаткам.Текст = ТекстЗапроса;
	
	//нужно ли делать пвомежуточные итоги по периоду или нет
	НужныПромежуточныеИтогиПоПериоду = (Не ПустаяСтрока(Период)) И (Не ВРег(Период) = "ПЕРИОД");

	ЗапросПоПроводкам = НастроитьОбъектЗапрос();
	
	Если ЗапросПоПроводкам=Неопределено Тогда
		Возврат ДокументРезультат;
	КонецЕсли;
	
	ЗапросПоПроводкам.УстановитьПараметр("СчетАнализа", СчетСсылкаБД);
	ЗапросПоПроводкам.УстановитьПараметр("НачПериода",  ?(Не ЗначениеЗаполнено(ДатаНач), ДатаНач, НачалоДня(ДатаНач)));
	ЗапросПоПроводкам.УстановитьПараметр("КонПериода",  ?(Не ЗначениеЗаполнено(ДатаКон), ДатаКон, КонецДня(ДатаКон)));
	ЗапросПоПроводкам.УстановитьПараметр("Дебет",       ?(ВнешняяИБ=0,AccountingRecordType.Debit,ТекСоединениеВИБ.AccountingRecordType.Debit));
	ЗапросПоПроводкам.УстановитьПараметр("Кредит",      ?(ВнешняяИБ=0,AccountingRecordType.Credit,ТекСоединениеВИБ.AccountingRecordType.Credit));
	ЗапросПоПроводкам.УстановитьПараметр("ПустойСчет",  ?(ВнешняяИБ=0,ПланыСчетов[ДанныеРегистра.ПланСчетовРегистр].ПустаяСсылка(),ТекСоединениеВИБ.ChartsOfAccounts[ДанныеРегистра.ПланСчетовРегистр].ПустаяСсылка()));
	
	СтруктураСальдо=Новый Структура;
	РесурсовБезИзмерений=0;
	
	Для Каждого СтрРесурс ИЗ МассивВыводимыхРесурсов Цикл
				
		Если НЕ ПустаяСтрока(СтрРесурс.ПризнакУчета) Тогда
			
			СтрИзмерение=ТаблицаДопИзмерений.Найти(СтрРесурс.ИмяПоля,"ИмяРесурса");
			
			Если (НЕ СтрИзмерение=Неопределено) И СтрИзмерение.ИзмеренияРесурса.Количество()>0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураСальдо.Вставить(СтрРесурс.ИмяПоля+"_ТекущееСальдо",0);
		
		Если СтрРесурс.Балансовый И ПустаяСтрока(СтрРесурс.ПризнакУчета) Тогда
			СтруктураСальдо.Вставить(СтрРесурс.ИмяПоля+"_ОборотДт",0);
			СтруктураСальдо.Вставить(СтрРесурс.ИмяПоля+"_ОборотКт",0);
		КонецЕсли;
		
		СтруктураСальдо.Вставить(СтрРесурс.ИмяПоля+"_ИтогоОборотДт",0);
		СтруктураСальдо.Вставить(СтрРесурс.ИмяПоля+"_ИтогоОборотКт",0);
		
		РесурсовБезИзмерений=РесурсовБезИзмерений+1;
		
	КонецЦикла;
	
	Если ДанныеРегистра.Корреспонденция тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетДт,
		|	СчетКт,
		|	СчетДт.Представление КАК СчетДтПредставление,
		|	СчетКт.Представление КАК СчетКтПредставление,";
		
		Для Каждого Измерение ИЗ МассивДопИзмерений Цикл
			
			ТекстЗапроса=ТекстЗапроса+"
			|"+Измерение+"Дт,
			|"+Измерение+"Кт,
			|ПРЕДСТАВЛЕНИЕ("+Измерение+"Дт) КАК "+Измерение+"ДтПредставление,
			|ПРЕДСТАВЛЕНИЕ("+Измерение+"Кт) КАК "+Измерение+"КтПредставление,";
			
		КонецЦикла;
		
		Для Каждого СтрРесурс ИЗ МассивВыводимыхРесурсов Цикл
						
			Если СтрРесурс.Балансовый Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|"+СтрРесурс.ИмяПоля+",";
			Иначе
				ТекстЗапроса=ТекстЗапроса+"
				|"+СтрРесурс.ИмяПоля+"Дт,
				|"+СтрРесурс.ИмяПоля+"Кт,";
			КонецЕсли;
			
		КонецЦикла;
		
		Для Индекс = 1 По ДанныеРегистра.МаксимальноеКоличествоСубконто Цикл
			
			ТекстЗапроса = ТекстЗапроса + "
			|	СубконтоДт"+ Строка(Индекс) + "," + Символы.ПС + "
			|	ПРЕДСТАВЛЕНИЕ(СубконтоДт"+ Строка(Индекс) + ") КАК СубконтоДт" + Строка(Индекс) + "Представление, 
			|	СубконтоКт"+ Строка(Индекс) + "," + Символы.ПС + " 
			|	ПРЕДСТАВЛЕНИЕ(СубконтоКт"+ Строка(Индекс) + ") КАК СубконтоКт" + Строка(Индекс) + "Представление,";
			
		КонецЦикла;

	Иначе
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидДвижения,
		|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Счет ИНАЧЕ &ПустойСчет КОНЕЦ КАК СчетДт,
		|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Счет ИНАЧЕ &ПустойСчет КОНЕЦ КАК СчетКт,
		|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Счет.Представление ИНАЧЕ NULL КОНЕЦ КАК СчетДтПредставление,
		|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Счет.Представление ИНАЧЕ NULL КОНЕЦ КАК СчетКтПредставление,";
		
		Для Каждого Измерение ИЗ МассивДопИзмерений Цикл
			ТекстЗапроса = ТекстЗапроса + "	
			|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА "+Измерение+" ИНАЧЕ NULL КОНЕЦ КАК "+Измерение+"Дт,
			|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА "+Измерение+" ИНАЧЕ NULL КОНЕЦ КАК "+Измерение+"Кт,
			|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА "+Измерение+".Представление ИНАЧЕ NULL КОНЕЦ КАК "+Измерение+"ДтПредставление,
			|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА "+Измерение+".Представление ИНАЧЕ NULL КОНЕЦ КАК "+Измерение+"КтПредставление,";
		КонецЦикла;
		
		Для Каждого СтрРесурс ИЗ МассивВыводимыхРесурсов Цикл
						
			Если СтрРесурс.Балансовый Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|"+СтрРесурс.ИмяПоля+",";
			Иначе
				ТекстЗапроса=ТекстЗапроса+"
				|ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА "+СтрРесурс.ИмяПоля+" ИНАЧЕ 0 КОНЕЦ КАК "+СтрРесурс.ИмяПоля+"Дт,
				|ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА "+СтрРесурс.ИмяПоля+" ИНАЧЕ 0 КОНЕЦ КАК "+СтрРесурс.ИмяПоля+"Кт,";
			КонецЕсли;
			
		КонецЦикла;
		
		Для Индекс = 1 По ДанныеРегистра.МаксимальноеКоличествоСубконто Цикл
			
			ТекстЗапроса = ТекстЗапроса + "
			|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Субконто"+ Строка(Индекс) + " ИНАЧЕ NULL КОНЕЦ КАК СубконтоДт"+ Строка(Индекс)+",
			|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА ПРЕДСТАВЛЕНИЕ(Субконто"+ Строка(Индекс) + ") ИНАЧЕ NULL КОНЕЦ КАК СубконтоДт"+ Строка(Индекс)+"Представление,
			|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Субконто"+ Строка(Индекс) + " ИНАЧЕ NULL КОНЕЦ КАК СубконтоКт"+ Строка(Индекс)+",
			|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА ПРЕДСТАВЛЕНИЕ(Субконто"+ Строка(Индекс) + ") ИНАЧЕ NULL КОНЕЦ КАК СубконтоКт"+ Строка(Индекс)+"Представление,";
			
		КонецЦикла;

	КонецЕсли;
 		
	Если НужныПромежуточныеИтогиПоПериоду Тогда
			
		ТекстЗапроса = ТекстЗапроса + "
			|	НАЧАЛОПЕРИОДА(Период, " + Период + ") КАК Период,";
			
	КонецЕсли;
		
	ТекстЗапроса = ТекстЗапроса + "
	|	ПРЕДСТАВЛЕНИЕ(Регистратор)КАК ПредставлениеОперации,";
	
	Если НЕ ДанныеРегистра.РеквизитыРегистра.Найти("Содержание","Имя")=Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	Содержание       КАК Операция,";
		
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + "
	|	Регистратор      КАК ДокументОперации,
	|	Период           КАК ДатаОперации,
	|	НомерСтроки      КАК НомерСтроки	
	|
	|ИЗ
	|	РегистрБухгалтерии." + ДанныеРегистра.НаименованиеРегистра + ".ДвиженияССубконто(
	|		&НачПериода,
	|		&КонПериода,
	| (Активность = ИСТИНА) И (Счет В ИЕРАРХИИ (&СчетАнализа))"+?(ПустаяСтрока(ТекстОтбор),""," И "+Сред(ТекстОтбор,4))+") КАК ОсновнойДвиженияССубконто
	|
	|УПОРЯДОЧИТЬ ПО ДатаОперации, Регистратор ";
	
	Если НужныПромежуточныеИтогиПоПериоду Тогда
		
		ТекстРесурсы="";
		
		Для Каждого СтрРесурс ИЗ МассивВыводимыхРесурсов Цикл
			
			Если НЕ СтруктураСальдо.Свойство(СтрРесурс.ИмяПоля+"_ОборотДт") Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ТекстРесурсы=ТекстРесурсы+",
			|СУММА("+СтрРесурс.ИмяПоля+")";
			
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ИТОГИ 
		|"+Сред(ТекстРесурсы,2)+"
		|ПО
		|	Период";
		
	КонецЕсли;
		
	ЗапросПоПроводкам.Текст = ТекстЗапроса;
	Проводки = ЗапросПоПроводкам.Выполнить().Выбрать();

	ОбластьМакет = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ДокументРезультат.Вывести(ОбластьМакет);
	
	// на начало периода
	
	ОбластьМакет = Макет.ПолучитьОбласть("Сальдо");		
	
	ВывестиДанныеОстатковКарточкиСчетаВМакет(ЗапросПоОстаткам, ОбластьМакет, Истина,СтруктураСальдо);
	
	Для Индекс=2 По ДокументРезультат.ШиринаТаблицы Цикл
		
		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы,Индекс,ДокументРезультат.ВысотаТаблицы,Индекс).ГраницаСнизу = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная,2);
		
	КонецЦикла;
	
	ОбластьОборота = Макет.ПолучитьОбласть("Обороты");
	ОбластьПериод=Неопределено;

	Пока Проводки.Следующий() Цикл

		Если Проводки.ТипЗаписи() = ?(ВнешняяИБ=0,QueryRecordType.GroupTotal,ТекСоединениеВИБ.QueryRecordType.GroupTotal) Тогда

			Если ОбластьПериод=Неопределено Тогда
				
				ОбластьПериод = Макет.ПолучитьОбласть("ОписаниеПериода");
				ОбластьПериод.Параметры.ОписательПериода = СтрШаблон(Нстр("ru = 'Обороты за %1'"), ПолучитьПериодДатСтрокой(Период, Проводки.Период));
				
			Иначе
				
				ДокументРезультат.Вывести(ОбластьПериод);
				
				Для Каждого СтрРесурс ИЗ МассивВыводимыхРесурсов Цикл
					
					Если НЕ СтруктураСальдо.Свойство(СтрРесурс.ИмяПоля+"_ОборотДт") Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					ОбластьОборота.Параметры.Ресурс		= СтрРесурс.ПредставлениеПоля;
					ОбластьОборота.Параметры.РесурсДт	= СтруктураСальдо[СтрРесурс.ИмяПоля+"_ОборотДт"];
					ОбластьОборота.Параметры.РесурсКт	= СтруктураСальдо[СтрРесурс.ИмяПоля+"_ОборотКт"];
					
					СтруктураСальдо.Вставить(СтрРесурс.ИмяПоля+"_ОборотДт",0);
					СтруктураСальдо.Вставить(СтрРесурс.ИмяПоля+"_ОборотКт",0);
					
					ДокументРезультат.Вывести(ОбластьОборота);
					
				КонецЦикла;
				
				ОбластьПериод.Параметры.ОписательПериода = СтрШаблон(Нстр("ru = 'Обороты за %1'"), ПолучитьПериодДатСтрокой(Период, Проводки.Период));
				
				Для Индекс=2 По ДокументРезультат.ШиринаТаблицы Цикл
					
					ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы,Индекс,ДокументРезультат.ВысотаТаблицы,Индекс).ГраницаСнизу = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная,2);
					
				КонецЦикла;
				
			КонецЕсли;
				
		Иначе
			
			// это реальная строка оборотов
			НачалоСтроки = ДокументРезультат.ВысотаТаблицы + 1;
			ВыведеноСтрок=0;

			// детальные проводки 
			ОбластьМакет = Макет.ПолучитьОбласть("ЗаголовокПроводки");
			ОбластьМакет.Параметры.Заполнить(Проводки);
			
			ОбластьРесурс=Макет.ПолучитьОбласть("РесурсБезИзмерения");

			Для Индекс=0 ПО МассивВыводимыхРесурсов.Количество()-1 Цикл
				
				ТекущийМакет=?(Индекс=0,ОбластьМакет,ОбластьРесурс);
				СтрРесурс=МассивВыводимыхРесурсов[Индекс];
				ВыводитьСтроку=Ложь;
				
				Если СоответствиеПодчиненныеСчета.Get(Проводки.СчетДт) <> Неопределено Тогда
					
					Если ЗначениеПоляСоответствуетОтбору(Проводки, "Дт") Тогда
						
						Если СтруктураСальдо.Свойство(СтрРесурс.ИмяПоля+"_ОборотДт") Тогда
							
							ВыводитьСтроку=Истина;
							ТекущийМакет.Параметры.РесурсДт=Проводки[СтрРесурс.ИмяПоля];
							СтруктураСальдо.Вставить(СтрРесурс.ИмяПоля+"_ОборотДт"		,СтруктураСальдо[СтрРесурс.ИмяПоля+"_ОборотДт"]		+Проводки[СтрРесурс.ИмяПоля]);
							СтруктураСальдо.Вставить(СтрРесурс.ИмяПоля+"_ИтогоОборотДт"	,СтруктураСальдо[СтрРесурс.ИмяПоля+"_ИтогоОборотДт"]+Проводки[СтрРесурс.ИмяПоля]);
							СтруктураСальдо.Вставить(СтрРесурс.ИмяПоля+"_ТекущееСальдо"	,СтруктураСальдо[СтрРесурс.ИмяПоля+"_ТекущееСальдо"]+Проводки[СтрРесурс.ИмяПоля]);
							
						ИначеЕсли СтруктураСальдо.Свойство(СтрРесурс.ИмяПоля+"_ИтогоОборотДт") Тогда
							
							ЗначениеРесурса=ПривестиКЧислу(Проводки[СтрРесурс.ИмяПоля+"Дт"]);
							
							СтруктураСальдо.Вставить(СтрРесурс.ИмяПоля+"_ИтогоОборотДт"	,СтруктураСальдо[СтрРесурс.ИмяПоля+"_ИтогоОборотДт"]+ЗначениеРесурса);
							СтруктураСальдо.Вставить(СтрРесурс.ИмяПоля+"_ТекущееСальдо"	,СтруктураСальдо[СтрРесурс.ИмяПоля+"_ТекущееСальдо"]+ЗначениеРесурса);	
							
						КонецЕсли;
												
					КонецЕсли;
					
				КонецЕсли;
				
				Если СоответствиеПодчиненныеСчета.Get(Проводки.СчетКт) <> Неопределено Тогда
					
					Если ЗначениеПоляСоответствуетОтбору(Проводки, "Кт") Тогда
						
						Если СтруктураСальдо.Свойство(СтрРесурс.ИмяПоля+"_ОборотКт") Тогда
							
							ВыводитьСтроку=Истина;
							ТекущийМакет.Параметры.РесурсКт=Проводки[СтрРесурс.ИмяПоля];
							СтруктураСальдо.Вставить(СтрРесурс.ИмяПоля+"_ОборотКт"		,СтруктураСальдо[СтрРесурс.ИмяПоля+"_ОборотКт"]		+Проводки[СтрРесурс.ИмяПоля]);
							СтруктураСальдо.Вставить(СтрРесурс.ИмяПоля+"_ИтогоОборотКт"	,СтруктураСальдо[СтрРесурс.ИмяПоля+"_ИтогоОборотКт"]+Проводки[СтрРесурс.ИмяПоля]);
							СтруктураСальдо.Вставить(СтрРесурс.ИмяПоля+"_ТекущееСальдо"	,СтруктураСальдо[СтрРесурс.ИмяПоля+"_ТекущееСальдо"]-Проводки[СтрРесурс.ИмяПоля]);
							
						ИначеЕсли СтруктураСальдо.Свойство(СтрРесурс.ИмяПоля+"_ИтогоОборотКт") Тогда
							
							ЗначениеРесурса=ПривестиКЧислу(Проводки[СтрРесурс.ИмяПоля+"Кт"]);
							
							СтруктураСальдо.Вставить(СтрРесурс.ИмяПоля+"_ИтогоОборотКт"	,СтруктураСальдо[СтрРесурс.ИмяПоля+"_ИтогоОборотКт"]+ЗначениеРесурса);
							СтруктураСальдо.Вставить(СтрРесурс.ИмяПоля+"_ТекущееСальдо"	,СтруктураСальдо[СтрРесурс.ИмяПоля+"_ТекущееСальдо"]-ЗначениеРесурса);	
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ВыводитьСтроку Тогда
					
					ТекущееСальдо=СтруктураСальдо[СтрРесурс.ИмяПоля+"_ТекущееСальдо"];
					
					ТекущийМакет.Параметры.Флаг   		= ?(ТекущееСальдо = 0, "", ?(ТекущееСальдо < 0, "К", "Д"));
					ТекущийМакет.Параметры.СальдоРесурс = ?(ТекущееСальдо > 0, ТекущееСальдо, - ТекущееСальдо);
					
					ТекущийМакет.Параметры.Ресурс		= СтрРесурс.ПредставлениеПоля;
								
					ДокументРезультат.Вывести(ТекущийМакет);
					ВыведеноСтрок=ВыведеноСтрок+1;
						
				КонецЕсли;
				
			КонецЦикла;

			СтруктураРасшифровки = Новый Структура;
			
			Если ВнешняяИБ=0 Тогда
				
				СтруктураРасшифровки.Вставить("ДокументОперации",Проводки.ДокументОперации);
				СтруктураРасшифровки.Вставить("НомерСтроки", Проводки.НомерСтроки);
				
			Иначе
				
				СтрокаТипа=РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLTypeOf(ТекСоединениеВИБ,Проводки.ДокументОперации).TypeName;
				
				СтруктураРасшифровки.Вставить("ВидДокумента",СтрЗаменить(СтрокаТипа,"DocumentRef.",""));
				СтруктураРасшифровки.Вставить("ДокументОперации",РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLString(ТекСоединениеВИБ,Проводки.ДокументОперации.UUID()));
				СтруктураРасшифровки.Вставить("НомерСтроки", Проводки.НомерСтроки);
				
			КонецЕсли;

			// Вывод Всех субконто операции
			ОбластьМакет = Макет.ПолучитьОбласть("СтрокаПроводки");

			КоличествоСубконтоСчета = ОпределитьДляСчетаПоСоответсвиеКоличествоСубконто(Проводки.СчетДт, СоответствиеСчетовКэш);
			
			ВывестиПредставленияСубконтоТекущейСтрокиВМакет("СубконтоДт", Проводки, КоличествоСубконтоСчета, 
				ОбластьМакет, ДокументРезультат, СтруктураРасшифровки);
			
			
			КоличествоСубконтоСчета = ОпределитьДляСчетаПоСоответсвиеКоличествоСубконто(Проводки.СчетКт, СоответствиеСчетовКэш);
			ВывестиПредставленияСубконтоТекущейСтрокиВМакет("СубконтоКт", Проводки, КоличествоСубконтоСчета, 
				ОбластьМакет, ДокументРезультат, СтруктураРасшифровки);

			Для Каждого СтрРесурс ИЗ МассивВыводимыхРесурсов Цикл
				
				Если СтруктураСальдо.Свойство(СтрРесурс.ИмяПоля+"_ОборотКт") Тогда
					Продолжить;
				КонецЕсли;
				
				СтрИзмерение=ТаблицаДопИзмерений.Найти(СтрРесурс.ИмяПоля,"ИмяРесурса");
				
				Если (СтрИзмерение=Неопределено ИЛИ СтрИзмерение.ИзмеренияРесурса.Количество()=0)
					И СтруктураСальдо.Свойство(СтрРесурс.ИмяПоля+"_ТекущееСальдо") Тогда
					
					ОбластьМакет=Макет.ПолучитьОбласть("РесурсБезИзмерения");
					ОбластьМакет.Параметры.Ресурс			= СтрРесурс.ПредставлениеПоля;
					ОбластьМакет.Параметры.РесурсДт			= Проводки[СтрРесурс.ИмяПоля+"Дт"];
					ОбластьМакет.Параметры.РесурсКт			= Проводки[СтрРесурс.ИмяПоля+"Кт"];
					ОбластьМакет.Параметры.СальдоРесурс		= СтруктураСальдо[СтрРесурс.ИмяПоля+"_ТекущееСальдо"];
					ОбластьМакет.Параметры.Расшифровка 		= СтруктураРасшифровки;
					ДокументРезультат.Вывести(ОбластьМакет);
					
					ВыведеноСтрок=ВыведеноСтрок+1;
					
				ИначеЕсли (НЕ СтрИзмерение=Неопределено) И СтрИзмерение.ИзмеренияРесурса.Количество()>0 Тогда
					
					ОбластьМакет=Макет.ПолучитьОбласть("РесурсСИзмерением");
					
					Для Каждого Измерение ИЗ СтрИзмерение.ИзмеренияРесурса Цикл
						
						ОбластьМакет.Параметры.Измерение				= Измерение.Значение;
						
						ОбластьМакет.Параметры.ИзмерениеДтПредставление = Проводки[Измерение.Значение+"ДтПредставление"];
						ОбластьМакет.Параметры.ИзмерениеКтПредставление = Проводки[Измерение.Значение+"КтПредставление"];
						
						ОбластьМакет.Параметры.РесурсДт			= Проводки[СтрРесурс.ИмяПоля+"Дт"];
						ОбластьМакет.Параметры.РесурсКт			= Проводки[СтрРесурс.ИмяПоля+"Кт"];
						
						ОбластьМакет.Параметры.Расшифровка 		= СтруктураРасшифровки;
						ДокументРезультат.Вывести(ОбластьМакет);
						
						ВыведеноСтрок=ВыведеноСтрок+1;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
				
			КонецСтроки = ДокументРезультат.ВысотаТаблицы;

			Область = ДокументРезультат.Область(НачалоСтроки, 3, КонецСтроки, 3);
			Область.Объединить();
			Область.Текст       = Проводки.ПредставлениеОперации;
			Область.Расшифровка = СтруктураРасшифровки;
			Область.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Строка;
			Область.РазмещениеТекста         = ТипРазмещенияТекстаТабличногоДокумента.Переносить;

		КонецЕсли;

	КонецЦикла;

	// по периоду
	Если НужныПромежуточныеИтогиПоПериоду
		И Проводки.Количество() > 0 Тогда
		
		ДокументРезультат.Вывести(ОбластьПериод);
		
		Для Каждого СтрРесурс ИЗ МассивВыводимыхРесурсов Цикл
			
			Если СтруктураСальдо.Свойство(СтрРесурс.ИмяПоля+"_ОборотДт") Тогда
				
				ОбластьОборота.Параметры.Ресурс=СтрРесурс.ПредставлениеПоля;
				ОбластьОборота.Параметры.РесурсДт = СтруктураСальдо[СтрРесурс.ИмяПоля+"_ОборотДт"];
				ОбластьОборота.Параметры.РесурсКт = СтруктураСальдо[СтрРесурс.ИмяПоля+"_ОборотКт"];
				ДокументРезультат.Вывести(ОбластьОборота);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Индекс=2 По ДокументРезультат.ШиринаТаблицы Цикл
			
			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы,Индекс,ДокументРезультат.ВысотаТаблицы,Индекс).ГраницаСнизу = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная,2);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОписательОборотов=Макет.ПолучитьОбласть("ОборотыЗаПериод");
	ОписательОборотов.Параметры.ОписательПериода = Нстр("ru = 'Обороты за период'");
	ДокументРезультат.Вывести(ОписательОборотов);
	
	Для Каждого СтрРесурс ИЗ МассивВыводимыхРесурсов Цикл
		
		Если СтруктураСальдо.Свойство(СтрРесурс.ИмяПоля+"_ИтогоОборотДт") Тогда
			
			ОбластьОборота.Параметры.Ресурс=СтрРесурс.ПредставлениеПоля;
			ОбластьОборота.Параметры.РесурсДт = СтруктураСальдо[СтрРесурс.ИмяПоля+"_ИтогоОборотДт"];
			ОбластьОборота.Параметры.РесурсКт = СтруктураСальдо[СтрРесурс.ИмяПоля+"_ИтогоОборотКт"];
			ДокументРезультат.Вывести(ОбластьОборота);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Индекс=2 По ДокументРезультат.ШиринаТаблицы Цикл
		
		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы,Индекс,ДокументРезультат.ВысотаТаблицы,Индекс).ГраницаСнизу = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная,2);
		
	КонецЦикла;

	// на конец периода
	ОбластьМакет = Макет.ПолучитьОбласть("Сальдо");

	ЗапросПоОстаткам.УстановитьПараметр("Период", ?(Не ЗначениеЗаполнено(ДатаКон), ДатаКон, ?(ВнешняяИБ=0,Новый Граница(КонецДня(ДатаКон),BoundaryType.Including),ТекСоединениеВИБ.NewObject("Граница",КонецДня(ДатаКон), ТекСоединениеВИБ.BoundaryType.Including))));
	ВывестиДанныеОстатковКарточкиСчетаВМакет(ЗапросПоОстаткам, ОбластьМакет, Ложь, СтруктураСальдо);

	Для Индекс=2 По ДокументРезультат.ШиринаТаблицы Цикл
		
		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы,Индекс,ДокументРезультат.ВысотаТаблицы,Индекс).ГраницаСнизу = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная,2);
		
	КонецЦикла;
	
	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 3;

	ДокументРезультат.ПовторятьПриПечатиСтроки = ДокументРезультат.Область(ВысотаЗаголовка+2,,ВысотаЗаголовка+3,);
	
	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1, 2, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "КарточкаСчета " + ДанныеРегистра.НаименованиеРегистра;
	
	Возврат ДокументРезультат;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА ПО ПРОВОДКАМ

// Выводит заголовок отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовокОтчетПоПроводкам() Экспорт

	ОписаниеПериода = СформироватьСтрокуВыводаПараметровПоДатам();
		
	Макет = ПолучитьМакет("ОтчетПоПроводкам");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	Если ДанныеДляЗаголовка.Свойство("Организация") Тогда
		ЗаголовокОтчета.Параметры.НазваниеОрганизации = СтрШаблон(Нстр("ru = 'Организация: %1'"), ДанныеДляЗаголовка.Организация);
	КонецЕсли;

	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;

	ЗаголовокОтчета.Параметры.Заголовок = ЗаголовокОтчета();
	
	Если ВнешняяИБ=1 Тогда 
		ЗаголовокОтчета.Параметры.ВнешняяИБ = НСтр("ru = 'Внешняя информационная база: '") + ДанныеДляЗаголовка.ИспользуемаяИБ;
	КонецЕсли;
	
	Если ДанныеРегистра.Свойство("ПолеПланСчетов") Тогда
		
		ЗаголовокОтчета.Параметры.РегистрБухгалтерии = СтрШаблон(Нстр("ru = 'Регистр бухгалтерии: %1, план счетов: %2'"), 
	                                               	ДанныеРегистра.НаименованиеРегистра,ДанныеРегистра.ПланСчетов);
		
	Иначе
	
	ЗаголовокОтчета.Параметры.РегистрБухгалтерии = СтрШаблон(Нстр("ru = 'Регистр бухгалтерии: %1'"), 
	                                               	ДанныеРегистра.НаименованиеРегистра);
													
	КонецЕсли;


	ОбластьДопИзмерения=Макет.ПолучитьОбласть("СтрокаОтборДопИзмерения");
	
	Для Каждого КлючИЗначение ИЗ ДанныеДляЗаголовка Цикл
		
		Если НЕ (КлючИЗначение.Ключ="Организация" ИЛИ КлючИЗначение.Ключ="ИспользуемаяИБ") Тогда
			
			ОбластьДопИзмерения.Параметры.ИмяИзмерения=КлючИЗначение.Ключ+":";
			ОбластьДопИзмерения.Параметры.ЗначениеОтбора=КлючИЗначение.Значение;
			ЗаголовокОтчета.Вывести(ОбластьДопИзмерения);
			
		КонецЕсли;
		
	КонецЦикла;														
	// Вывод списка фильтров:
	СтрОтбор =СтрокаОтборов;
		
	ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");

	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор.Параметры.ТекстПроОтбор = СтрШаблон(Нстр("ru = 'Отбор: %1'"), СтрОтбор);
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()

// Формирование текста запроса для выборки проводок
//
// Параметры
//
// Возвращаемое значение:
//   Строка   – Сформированный текст запроса
//
Функция ПолучитьТекстЗапроса()
		
	МаксКоличествоСубконто=Макс(ДанныеСчета.ВидыСубконто.Количество(),ДанныеКоррСчета.ВидыСубконто.Количество());
	
	ТекстПолей = 
	"
	|	Проводки.Период,
	|	Проводки.НомерСтроки,
	|	Проводки.Регистратор,";
	
	ТекстИзмерения="";
	ТекстРесурсы="";
	
	Для Каждого Измерение ИЗ МассивДопИзмерений Цикл
		
		ТекстИзмерения=ТекстИзмерения+"
		|Проводки."+Измерение+"Дт,
		|Проводки."+Измерение+"Кт,
		|ПРЕДСТАВЛЕНИЕ(Проводки."+Измерение+"Дт) КАК "+Измерение+"ДтПредставление,
		|ПРЕДСТАВЛЕНИЕ(Проводки."+Измерение+"Кт) КАК "+Измерение+"КтПредставление,";
		
	КонецЦикла;
	
	Для Каждого СтрРесурс ИЗ МассивВыводимыхРесурсов Цикл
		
		Если СтрРесурс.Балансовый Тогда
			ТекстРесурсы=ТекстРесурсы+"
			|Проводки."+СтрРесурс.ИмяПоля+",";
		Иначе
			ТекстРесурсы=ТекстРесурсы+"
			|Проводки."+СтрРесурс.ИмяПоля+"Дт,
			|Проводки."+СтрРесурс.ИмяПоля+"Кт,";
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстПолей=ТекстПолей+ТекстИзмерения+ТекстРесурсы;
	
	Если НЕ ДанныеРегистра.РеквизитыРегистра.Найти("Содержание","Имя")=Неопределено Тогда
		
		ТекстПолей=ТекстПолей+"	
		|	Проводки.Содержание,";
		
	КонецЕсли;

	ТекстПолей=ТекстПолей+"	
	|	Проводки.СчетДт,
	|	Проводки.СчетКт";
	
	Для н=1 По МаксКоличествоСубконто Цикл
		ТекстПолей = ТекстПолей+","+Символы.ПС+"	Проводки.СубконтоДт"+н+" КАК СубконтоДт"+н;
		ТекстПолей = ТекстПолей+","+Символы.ПС+"	Проводки.СубконтоКт"+н+" КАК СубконтоКт"+н;
	КонецЦикла;
	
	ТекстОтбор = "Активность = ИСТИНА И СчетДт В ИЕРАРХИИ(&Счет) И СчетКт В ИЕРАРХИИ(&КоррСчет)";
	
	Для Каждого СтрПараметр ИЗ ИспользуемыеПараметры Цикл
				
		КонструкцияОтбора=СтрПараметр.КонструкцияОтбора;
		
		Если НЕ ПустаяСтрока(КонструкцияОтбора) Тогда
			
			ТекстОтбор=ТекстОтбор+" И "+КонструкцияОтбора;
			
		КонецЕсли;
		
	КонецЦикла;
			
	ТекстИсточника = "РегистрБухгалтерии."+ДанныеРегистра.НаименованиеРегистра+".ДвиженияССубконто(&ДатаНач, &ДатаКон, "+ТекстОтбор+") КАК Проводки";
		
	ТекстЗапроса = 
	"ВЫБРАТЬ 
	|"+ТекстПолей+"
	|ИЗ
	|	"+ТекстИсточника;
		
	// обернем наш запрос еще одним и добавим свойства счетов
	ТекстПолейВнеш = 
	"
	|	Проводки.Период,
	|	Проводки.НомерСтроки,
	|	Проводки.Регистратор,
	|	ПРЕДСТАВЛЕНИЕ(Проводки.Регистратор) КАК РегистраторПредставление,";
	
	ТекстПолейВнеш=ТекстПолейВнеш+ТекстИзмерения+ТекстРесурсы;
	
	Если НЕ ДанныеРегистра.РеквизитыРегистра.Найти("Содержание","Имя")=Неопределено Тогда
		
		ТекстПолейВнеш=ТекстПолейВнеш+"	
		|	Проводки.Содержание,";
		
	КонецЕсли;

	Если ДанныеРегистра.МаксимальноеКоличествоСубконто>0 Тогда
		
		ТекстПолейВнеш=ТекстПолейВнеш+"
		|	ЕСТЬNULL(СчетаДт.КолвоСубконто, 0) КАК КолвоСубконтоДт,
		|	ЕСТЬNULL(СчетаКт.КолвоСубконто, 0) КАК КолвоСубконтоКт,";
		
	Иначе
		
		ТекстПолейВнеш=ТекстПолейВнеш+"
		|	0 КАК КолвоСубконтоДт,
		|	0 КАК КолвоСубконтоКт,";
		
	КонецЕсли;
	
	ТекстПолейВнеш=ТекстПолейВнеш+"
	|	Проводки.СчетДт,
	|	ПРЕДСТАВЛЕНИЕ(Проводки.СчетДт) КАК СчетДтПредставление,
	|	Проводки.СчетКт,
	|	ПРЕДСТАВЛЕНИЕ(Проводки.СчетКт) КАК СчетКтПредставление";
	
	ТекстСубконтоВнеш = "";
	
	Для н=1 По МаксКоличествоСубконто Цикл
		
		ТекстСубконтоВнеш = ТекстСубконтоВнеш + "," + Символы.ПС + "	ПРЕДСТАВЛЕНИЕ(Проводки.СубконтоДт"+н+") КАК СубконтоДт"+н;
		ТекстСубконтоВнеш = ТекстСубконтоВнеш + "," + Символы.ПС + "	ПРЕДСТАВЛЕНИЕ(Проводки.СубконтоКт"+н+") КАК СубконтоКт"+н;
		
	КонецЦикла;
	
	ТекстВыбораСчетов = 
	"	ВЫБРАТЬ
	|		Счета.Ссылка КАК ССЫЛКА,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Субконто.ВидСубконто) КАК КолвоСубконто
	|	ИЗ
	|		ПланСчетов." + ДанныеРегистра.ПланСчетовРегистр + " КАК Счета
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов." + ДанныеРегистра.ПланСчетовРегистр + ".ВидыСубконто КАК Субконто
	|			ПО Субконто.Ссылка = Счета.Ссылка";
	
	Если ДанныеРегистра.Свойство("ПолеПланСчетов") Тогда
		
		ТекстВыбораСчетов=ТекстВыбораСчетов+"
		|ГДЕ Счета."+ДанныеРегистра.ПолеПланСчетов+".Наименование="""+ДанныеРегистра.ПланСчетов+"""";
		
	КонецЕсли;
				
	ТекстВыбораСчетов=ТекстВыбораСчетов+"
	|
	|СГРУППИРОВАТЬ ПО
	|	Счета.Ссылка";
	
	ТекстЗапросаВнеш = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|"+ТекстПолейВнеш+ТекстСубконтоВнеш+"
	|ИЗ
	|	("+ТекстЗапроса+") КАК Проводки";
	
	Если ДанныеРегистра.МаксимальноеКоличествоСубконто>0 Тогда 
		
		ТекстЗапросаВнеш = ТекстЗапросаВнеш+"
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (
		|" + ТекстВыбораСчетов + "
		|) КАК СчетаДт
		|	ПО Проводки.СчетДт = СчетаДт.Ссылка
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (
		|" + ТекстВыбораСчетов + "
		|) КАК СчетаКт
		|	ПО Проводки.СчетКт = СчетаКт.Ссылка
		|";
		
	КонецЕсли;
		
	ТекстЗапросаВнеш = ТекстЗапросаВнеш+"
	|Упорядочить По Период, Регистратор";
	
	Возврат ТекстЗапросаВнеш;
	
КонецФункции // ПолучитьТекстЗапроса()

Процедура ОбвестиОбластиОтчета(ДокументРезультат, НачалоСекции = 0, Линия, ЛинияЖирная) Экспорт
	
	КонСтр = ДокументРезультат.ВысотаТаблицы;

	ДокументРезультат.Область(КонСтр,2,КонСтр,4).ГраницаСнизу = Линия;
	ДокументРезультат.Область(КонСтр,5,КонСтр,8).ГраницаСнизу = ЛинияЖирная;
	ДокументРезультат.Область(КонСтр,9,КонСтр,11).ГраницаСнизу = Линия;
	
	ДокументРезультат.Область(НачалоСекции,2,КонСтр,2).Объединить();
	ДокументРезультат.Область(НачалоСекции,3,КонСтр,3).Объединить();
	ДокументРезультат.Область(НачалоСекции,2,КонСтр,3).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
КонецПроцедуры

Функция ПолучитьОтчетПоПроводкам(ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	ДокументРезультат=Новый ТабличныйДокумент;
	
	ОбъектЗапрос.Текст = ПолучитьТекстЗапроса();
	
	#Если Клиент Тогда
	Состояние(Нстр("ru = 'Выполнение запроса'"));
	#КонецЕсли
	Результат = ОбъектЗапрос.Выполнить();
	
	Макет = ПолучитьМакет("ОтчетПоПроводкам");

	// Вывод заголовка отчета
	СформироватьИВывестиЗаголовокОтчета(ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок);
	
	ОбластьШапки = Макет.ПолучитьОбласть("Шапка");
	ДокументРезультат.Вывести(ОбластьШапки, 1);
	
	ОблСтрока           	= Макет.ПолучитьОбласть("Строка");
	ОблСтрокаСубконто   	= Макет.ПолучитьОбласть("СтрокаСубконто");
	ОблРесурсБезИзмерений 	= Макет.ПолучитьОбласть("РесурсБезИзмерения");
	ОблРесурсСИзмерением    = Макет.ПолучитьОбласть("РесурсСИзмерением");
	ОблИтого            	= Макет.ПолучитьОбласть("Итого");
	
	СуммаИтого = 0;
	
	СтруктураСальдо=Новый Структура;
	РесурсовБезИзмерений=0;
	
	Для Каждого СтрРесурс ИЗ МассивВыводимыхРесурсов Цикл
						
		Если СтрРесурс.Балансовый И ПустаяСтрока(СтрРесурс.ПризнакУчета) Тогда
			СтруктураСальдо.Вставить(СтрРесурс.ИмяПоля+"_Итого",0);
		КонецЕсли;
				
	КонецЦикла;
	
	Выборка = Результат.Выбрать();
	
	МассивБалансовые=ТабВыводимыеРесурсы.НайтиСтроки(Новый Структура("Выводить,Балансовый",Истина,Истина));
	
	Пока Выборка.Следующий() Цикл
		
		УжеВыведено=0;
		
		Расшифровка = Новый Структура;
		
		Если ВнешняяИБ=0 Тогда
			
			Расшифровка.Вставить("ДокументОперации",Выборка.Регистратор);
			Расшифровка.Вставить("НомерСтроки", Выборка.НомерСтроки);

		Иначе
			
			СтрокаТипа=РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLTypeOf(ТекСоединениеВИБ,Выборка.Регистратор).TypeName;
			
			Расшифровка.Вставить("ВидДокумента",СтрЗаменить(СтрокаТипа,"DocumentRef.",""));
			Расшифровка.Вставить("ДокументОперации",РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLString(ТекСоединениеВИБ,Выборка.Регистратор.UUID()));
			Расшифровка.Вставить("НомерСтроки", Выборка.НомерСтроки);
			
		КонецЕсли;
			
		ОблСтрока.Параметры.Заполнить(Выборка);
		
		КолвоСубконтоДт = ?(Выборка.КолвоСубконтоДт <> NULL, Выборка.КолвоСубконтоДт, 0);
		КолвоСубконтоКт = ?(Выборка.КолвоСубконтоКт <> NULL, Выборка.КолвоСубконтоКт, 0);
		
		Если КолвоСубконтоДт>0 Тогда
			ОблСтрока.Параметры.СубконтоДт = Выборка.СубконтоДт1;
		КонецЕсли;
		
		Если КолвоСубконтоКт>0 Тогда 
			ОблСтрока.Параметры.СубконтоКт = Выборка.СубконтоКт1;
		КонецЕсли;
		
		ОблСтрока.Параметры.Расшифровка = Расшифровка;
			
		КолвоСтрокСубконто = Макс(КолвоСубконтоДт, КолвоСубконтоКт);
		КолвоСтрокРесурсов = МассивВыводимыхРесурсов.Количество();
		
		ВыводитьСтрокСубконто = КолвоСтрокСубконто - КолвоСтрокРесурсов;
        ВсегоСтрок = Макс(КолвоСтрокСубконто, КолвоСтрокРесурсов);

		Для Каждого СтрРесурс ИЗ МассивБалансовые Цикл
			
			Если ПустаяСтрока(СтрРесурс.ПризнакУчета) Тогда
				
				Если УжеВыведено>0 Тогда
					
					ОблРесурсБезИзмерений.Параметры.ИмяРесурса 	= СтрРесурс.ПредставлениеПоля;
					ОблРесурсБезИзмерений.Параметры.Ресурс 		= Выборка[СтрРесурс.ИмяПоля];
					ОблРесурсБезИзмерений.Параметры.Расшифровка = Расшифровка;
					
					Если (УжеВыведено+1)<=КолвоСтрокСубконто Тогда
						
						ОблРесурсБезИзмерений.Параметры.СубконтоДт=Выборка["СубконтоДт"+(УжеВыведено+1)];
						ОблРесурсБезИзмерений.Параметры.СубконтоКт=Выборка["СубконтоКт"+(УжеВыведено+1)];
						
					КонецЕсли;
						
					ДокументРезультат.Вывести(ОблРесурсБезИзмерений, 1);
					УжеВыведено = УжеВыведено+1;
					
					Если УжеВыведено < ВсегоСтрок Тогда
						ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы,,ДокументРезультат.ВысотаТаблицы).ВместеСоСледующим = Истина;
					КонецЕсли;
					
				Иначе
					
					ОблСтрока.Параметры.ИмяРесурса 	= СтрРесурс.ПредставлениеПоля;
					ОблСтрока.Параметры.Ресурс=Выборка[СтрРесурс.ИмяПоля];
					ДокументРезультат.Вывести(ОблСтрока, 1);
					УжеВыведено = 1;
					
					НачалоСекции = ДокументРезультат.ВысотаТаблицы;
					
					Если УжеВыведено < ВсегоСтрок Тогда
						ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы,,ДокументРезультат.ВысотаТаблицы).ВместеСоСледующим = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
				СтруктураСальдо.Вставить(СтрРесурс.ИмяПоля+"_Итого",СтруктураСальдо[СтрРесурс.ИмяПоля+"_Итого"]+Выборка[СтрРесурс.ИмяПоля]);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрРесурс ИЗ ТаблицаДопИзмерений Цикл
			
			Если СтрРесурс.ИзмеренияРесурса.Количество()=0 Тогда
				
				ОблРесурсБезИзмерений.Параметры.ИмяРесурса 	= СтрРесурс.ИмяРесурса;
				ОблРесурсБезИзмерений.Параметры.РесурсДт 		= Выборка[СтрРесурс.ИмяРесурса+"Дт"];
				ОблРесурсБезИзмерений.Параметры.РесурсКт 		= Выборка[СтрРесурс.ИмяРесурса+"Кт"];
				ОблРесурсБезИзмерений.Параметры.Расшифровка = Расшифровка;
				
				Если (УжеВыведено+1)<=КолвоСтрокСубконто Тогда
					
					ОблРесурсБезИзмерений.Параметры.СубконтоДт=Выборка["СубконтоДт"+(УжеВыведено+1)];
					ОблРесурсБезИзмерений.Параметры.СубконтоКт=Выборка["СубконтоКт"+(УжеВыведено+1)];
					
				КонецЕсли;
				
				ДокументРезультат.Вывести(ОблРесурсБезИзмерений, 1);
				УжеВыведено = УжеВыведено+1;
				
				НачалоСекции = ДокументРезультат.ВысотаТаблицы;
				
				Если УжеВыведено < ВсегоСтрок Тогда
					ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы,,ДокументРезультат.ВысотаТаблицы).ВместеСоСледующим = Истина;
				КонецЕсли;
				
			Иначе
				
				Для Каждого СтрИзмерение ИЗ СтрРесурс.ИзмеренияРесурса Цикл
					
					ОблРесурсСИзмерением.Параметры.Измерение=СтрИзмерение.Значение;
					ОблРесурсСИзмерением.Параметры.ИзмерениеДтПредставление=Выборка[СтрИзмерение.Значение+"ДтПредставление"];
					ОблРесурсСИзмерением.Параметры.ИзмерениеКтПредставление=Выборка[СтрИзмерение.Значение+"КтПредставление"];
					
					ОблРесурсСИзмерением.Параметры.РесурсДт 		= Выборка[СтрРесурс.ИмяРесурса+"Дт"];
					ОблРесурсСИзмерением.Параметры.РесурсКт 		= Выборка[СтрРесурс.ИмяРесурса+"Кт"];
					ОблРесурсСИзмерением.Параметры.Расшифровка 		= Расшифровка;
					
					Если (УжеВыведено+1)<=КолвоСтрокСубконто Тогда
						
						ОблРесурсСИзмерением.Параметры.СубконтоДт=Выборка["СубконтоДт"+(УжеВыведено+1)];
						ОблРесурсСИзмерением.Параметры.СубконтоКт=Выборка["СубконтоКт"+(УжеВыведено+1)];
						
					КонецЕсли;
					
					ДокументРезультат.Вывести(ОблРесурсСИзмерением, 1);
					УжеВыведено = УжеВыведено+1;
					
					НачалоСекции = ДокументРезультат.ВысотаТаблицы;
					
					Если УжеВыведено < ВсегоСтрок Тогда
						ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы,,ДокументРезультат.ВысотаТаблицы).ВместеСоСледующим = Истина;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Для н=1 По ВыводитьСтрокСубконто Цикл
				
				ОблСтрокаСубконто.Параметры.СубконтоДт  = Выборка["СубконтоДт"+Строка(1+н)];
				ОблСтрокаСубконто.Параметры.СубконтоКт  = Выборка["СубконтоКт"+Строка(1+н)];
				
				ОблСтрокаСубконто.Параметры.Расшифровка = Расшифровка;
				
				ДокументРезультат.Вывести(ОблСтрокаСубконто, 1);
				
				УжеВыведено = УжеВыведено + 1;
				
				Если УжеВыведено<ВсегоСтрок Тогда
					ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы,,ДокументРезультат.ВысотаТаблицы).ВместеСоСледующим = Истина;
				КонецЕсли;
				
			КонецЦикла;
				
		КонецЦикла;
						
		ОбвестиОбластиОтчета(ДокументРезультат, НачалоСекции, Линия, ЛинияЖирная);
		
	КонецЦикла;

	Для Каждого СтрРесурс ИЗ МассивВыводимыхРесурсов Цикл
		
		Если СтруктураСальдо.Свойство(СтрРесурс.ИмяПоля+"_Итого") Тогда
			
			ОблИтого.Параметры.ИмяРесурса=СтрРесурс.ПредставлениеПоля;
			ОблИтого.Параметры.Ресурс=СтруктураСальдо[СтрРесурс.ИмяПоля+"_Итого"];
			ДокументРезультат.Вывести(ОблИтого);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 1;

	// Шапку таблицы печатаем на всех страницах
	ДокументРезультат.ПовторятьПриПечатиСтроки = ДокументРезультат.Область(ВысотаЗаголовка + 1,,ВысотаЗаголовка + 1);
	
	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы+1,ДокументРезультат.ШиринаТаблицы);
	
	// Печатать отчет будем ландшафтом
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "ОтчетПоПроводкам " + ДанныеРегистра.НаименованиеРегистра;
	
	Возврат ДокументРезультат;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////


Функция ПолучитьСчетБД(ТекСчет)
	
	Запрос=ТекСоединениеВИБ.NewObject("Запрос");
	Запрос.Текст="ВЫБРАТЬ
	|Ссылка
	|ИЗ
	|ПланСчетов."+ДанныеРегистра.ПланСчетовРегистр+" КАК РабочийПланСчетов
	|ГДЕ
	|РабочийПланСчетов.Код =&Код"; 
	
	Если ДанныеРегистра.Свойство("ПолеПланСчетов") Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И РабочийПланСчетов."+ДанныеРегистра.ПолеПланСчетов+".Наименование="""+ДанныеРегистра.ПланСчетов+"""";
		
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Код",ТекСчет);
	
	Результат=Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	Иначе
		ТекстОшибки=ТекстОшибки+Символы.ПС+СтрШаблон(НСтр("ru = 'В информационной базе %1 на плане счетов %2 не найден счет с кодом %3'"), 
				ДанныеДляЗаголовка.ИспользуемаяИБ, ДанныеРегистра.ПланСчетовРегистр, ТекСчет);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьСчетВИБ()

Функция ПолучитьДанныеСчетаПС(КодСчетаПС)
	
	Запрос=ТекСоединениеВИБ.NewObject("Запрос");
	Запрос.Текст="ВЫБРАТЬ
	|Ссылка,
	|ВЫБОР
	|КОГДА РабочийПланСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|	ТОГДА 1
	|КОГДА РабочийПланСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|	ТОГДА 2
	|ИНАЧЕ 3
	|КОНЕЦ КАК Активность
	|ИЗ
	|ПланСчетов."+ДанныеРегистра.ПланСчетовРегистр+" КАК РабочийПланСчетов
	|ГДЕ
	|РабочийПланСчетов.Код =&Код";
	
	Если ДанныеРегистра.Свойство("ПолеПланСчетов") Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И РабочийПланСчетов."+ДанныеРегистра.ПолеПланСчетов+".Наименование="""+ДанныеРегистра.ПланСчетов+"""";
		
	КонецЕсли;
			
	Запрос.УстановитьПараметр("Код",КодСчетаПС);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		ОписаниеСчета=ТекСоединениеВИБ.NewObject("Структура");
		ОписаниеСчета.Вставить("Счет",Результат.Ссылка);
		
		Если Результат.Активность=1 Тогда
			ОписаниеСчета.Вставить("Вид","Активный") ;
		ИначеЕсли Результат.Активность=2 Тогда
			ОписаниеСчета.Вставить("Вид","Пассивный");
		ИначеЕсли Результат.Активность=3 Тогда
			ОписаниеСчета.Вставить("Вид","АктивноПассивный");
		КонецЕсли;
		
		Возврат ОписаниеСчета;
		
	Иначе
		
		ТекстОшибки=ТекстОшибки+Символы.ПС+СтрШаблон(НСтр("ru = 'На плане счетов %1 не найден счет с кодом %2'"), 
		ДанныеРегистра.ПланСчетовРегистр, КодСчетаПС);
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // ПолучитьДанныеСчетаБД() 

//Функция дополняет текст часть сформированного запроса по определенным полям
Функция ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(Знач ПоляДляВыборки = Истина, 
		Знач ИспользоватьАлиасыПолей = Ложь, Знач ИспользоватьВКачествеПрефиксаАлиасаИмяПоказателя = Ложь, ПолучатьРазвернутыйОстаток = Ложь) Экспорт
		
	СтрокаЗапроса = "";	
	РазвернутыйОстаток = ?(ПолучатьРазвернутыйОстаток, "Развернутый", "");
			
	Если ПоляДляВыборки Тогда
		
		Если ИспользоватьАлиасыПолей Тогда
			// выборка с алиасами
			Для Каждого СтрРесурс Из МассивВыводимыхРесурсов Цикл
								
				ИмяПоказателя=СтрРесурс.ИмяПоля;
				
				СтрокаПрефикса = ?(ИспользоватьВКачествеПрефиксаАлиасаИмяПоказателя, ИмяПоказателя, ""); 
							
				СтрокаЗапроса =  СтрокаЗапроса + ",
				|	" + ИмяПоказателя + "Начальный" + РазвернутыйОстаток + "ОстатокДт КАК " + СтрокаПрефикса + "НачальныйОстатокДт,
				|	" + ИмяПоказателя + "Начальный" + РазвернутыйОстаток + "ОстатокКт КАК " + СтрокаПрефикса + "НачальныйОстатокКт,
				|	" + ИмяПоказателя + "ОборотДт КАК "                                     + СтрокаПрефикса + "ОборотДт,
				|	" + ИмяПоказателя + "ОборотКт КАК "                                     + СтрокаПрефикса + "ОборотКт,
				|	" + ИмяПоказателя + "Конечный" + РазвернутыйОстаток + "ОстатокДт КАК "  + СтрокаПрефикса + "КонечныйОстатокДт,
				|	" + ИмяПоказателя + "Конечный" + РазвернутыйОстаток + "ОстатокКт КАК "  + СтрокаПрефикса + "КонечныйОстатокКт";
					
			КонецЦикла;
			
		Иначе	
			// выборка без алиасов
			Для Каждого СтрРесурс Из МассивВыводимыхРесурсов Цикл
								
				ИмяПоказателя=СтрРесурс.ИмяПоля;
				
				СтрокаЗапроса =  СтрокаЗапроса + ",
				|	" + ИмяПоказателя + "Начальный" + РазвернутыйОстаток + "ОстатокДт,
				|	" + ИмяПоказателя + "Начальный" + РазвернутыйОстаток + "ОстатокКт,
				|	" + ИмяПоказателя + "ОборотДт,
				|	" + ИмяПоказателя + "ОборотКт,
				|	" + ИмяПоказателя + "Конечный" + РазвернутыйОстаток + "ОстатокДт,
				|	" + ИмяПоказателя + "Конечный" + РазвернутыйОстаток + "ОстатокКт";
								
			КонецЦикла;
            	

		КонецЕсли;	
		
	Иначе
		// выборка для суммирования
		Для Каждого СтрРесурс Из МассивВыводимыхРесурсов Цикл
								
			ИмяПоказателя=СтрРесурс.ИмяПоля;
						
			СтрокаЗапроса = СтрокаЗапроса + ",
			|	СУММА(" + ИмяПоказателя + "Начальный" + РазвернутыйОстаток + "ОстатокДт),
			|	СУММА(" + ИмяПоказателя + "Начальный" + РазвернутыйОстаток + "ОстатокКт),
			|	СУММА(" + ИмяПоказателя + "ОборотДт),
			|	СУММА(" + ИмяПоказателя + "ОборотКт),
			|	СУММА(" + ИмяПоказателя + "Конечный" + РазвернутыйОстаток + "ОстатокДт),
			|	СУММА(" + ИмяПоказателя + "Конечный" + РазвернутыйОстаток + "ОстатокКт)";

					
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтрокаЗапроса;
	
КонецФункции

//Функция возвращает массив группировок для отчета
Функция СформироватьМассивГруппировок() Экспорт
	
	МассивГруппировок = Новый Массив;

	Если ПоСубСчетам Тогда
		МассивГруппировок.Добавить("Счет");
	КонецЕсли;
	
	Для Каждого Строка ИЗ ИспользуемыеПоляДетализации Цикл
		
		МассивГруппировок.Добавить(Строка.ПсевдонимПоля);
		
	КонецЦикла;

	Возврат МассивГруппировок;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////
// Формирование отчета

Функция ИспользуетсяПараметрСчет()
	
	Возврат НЕ (ВидОтчета="ОборотноСальдоваяВедомость" 
		ИЛИ ВидОтчета="ОстаткиИОбороты"
		ИЛИ ВидОтчета="ПроизвольныйЗапрос");
		
КонецФункции // ИспользуетсяПараметрСчет()

Функция СформироватьОтчет() Экспорт
	
	ДанныеДляЗаполнения=ПараметрыОтчета.Получить();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ДанныеДляЗаполнения);
		
	Если ИспользуетсяПараметрСчет() Тогда
		СчетСсылкаБД=ПолучитьСчетБД(ДанныеСчета.Код);
	КонецЕсли;
	
	РезультатЗаполнения=Неопределено;
	
	Если ВидОтчета="ОборотноСальдоваяВедомостьПоСчету" Тогда
		
		ОбъектЗапрос=НастроитьОбъектЗапрос();
		
		Если НЕ ОбъектЗапрос=Неопределено Тогда
			
			РезультатЗаполнения=ПолучитьОСВПоСчету();
			
		КонецЕсли;
		
	ИначеЕсли ВидОтчета="АнализСчета" Тогда
		
		ОбъектЗапрос=НастроитьОбъектЗапрос();
		
		Если НЕ ОбъектЗапрос=Неопределено Тогда
			
			РезультатЗаполнения=ПолучитьАнализСчета();
			
		КонецЕсли;
		
	ИначеЕсли ВидОтчета="КарточкаСчета" Тогда
		
		РезультатЗаполнения=ПолучитьКарточкуСчета();
		
	ИначеЕсли ВидОтчета="ОборотноСальдоваяВедомость" Тогда
		
		ОбъектЗапрос=НастроитьОбъектЗапрос();
		
		РезультатЗаполнения=ПолучитьОборотноСальдовуюВедомость();
		
	ИначеЕсли ВидОтчета="ОтчетПоПроводкам" Тогда
		
		КоррСчетСсылкаБД=ПолучитьСчетБД(ДанныеКоррСчета.Код);
		
		Если КоррСчетСсылкаБД=Неопределено Тогда
			РезультатЗаполнения=Новый ТабличныйДокумент;
		КонецЕсли;
		
		ОбъектЗапрос=НастроитьОбъектЗапрос();
		ОбъектЗапрос.SetParameter("КоррСчет", КоррСчетСсылкаБД);	
		
		РезультатЗаполнения=ПолучитьОтчетПоПроводкам();
		
	ИначеЕсли ВидОтчета="ОстаткиИОбороты" Тогда
		
		РезультатЗаполнения=ПолучитьОтчетПоРегиструНакопления();
		
	ИначеЕсли ВидОтчета="ПроизвольныйЗапрос" Тогда
		
		Возврат ПолучитьТаблицуПоЗапросу();
	
	КонецЕсли;
	
	Возврат Новый Структура("РезультатЗаполнения,ТекстОшибки,ЗаголовокОтчета",
				?(РезультатЗаполнения=Неопределено,Новый ТабличныйДокумент,РезультатЗаполнения),
				ТекстОшибки,ЗаголовокОтчета()+?(ЗначениеЗаполнено(ДанныеДляЗаголовка.ИспользуемаяИБ),", "+ДанныеДляЗаголовка.ИспользуемаяИБ,""));
		
КонецФункции // СформироватьОтчет() 


#КонецОбласти

#Область ОтображениеОбъекта

Функция ПолучитьОтображениеОбъектаБД() Экспорт
	
	СтроковоеПредставление=ПараметрыОбъектаДляОтображения.Получить();
	
	ТабличныйДокумент = Новый Табличныйдокумент;
	
	ТипСсылки=ТекСоединениеВИБ.NewObject("ОписаниеТипов", СтроковоеПредставление.ТипЗначения).Types().Get(0);
	ТипМетаданных=РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьНаименованиеСсылочногоТипаБД(ТекСоединениеВИБ, ТипСсылки);
	
	Если ТипМетаданных="НеПоддерживается" Тогда
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	ТекСсылка = РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLValue(ТекСоединениеВИБ,ТипСсылки, СтроковоеПредставление.Значение);
	
	Если ТЕкСсылка = Неопределено Тогда
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	НаименованиеМетаданных = РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьРабочееПредставлениеТипа(ТекСсылка.Метаданные().ПолноеИмя());
	
	ТипМетаданных = Лев(НаименованиеМетаданных, СтрНайти(НаименованиеМетаданных, ".") - 1);
	ТекМетаданные = РаботаСОбъектамиМетаданныхВнешнийУХ.МетаданныеНайтиПоПолномуИмени(ТекСоединениеВИБ,НаименованиеМетаданных);
	
	Если ТипМетаданных="Перечисление" Тогда
		
		Возврат Новый Структура("ТабличныйДокумент,НаименованиеФормы",Новый ТабличныйДокумент,"");
		
	КонецЕсли;
	
	ЦветФонаРеквизита         = Новый Цвет(255, 233, 188);
	ЦветФонаЗначения          = Новый Цвет(255, 247, 229);
	ЦветФонаТабличнойЧасти    = Новый Цвет(230, 230, 240);
	ЦветРамкиРеквизита        = Новый Цвет(128, 0, 0);
	ЦветРамкиТабличнойЧасти   = Новый Цвет(100, 100, 150);
	ЦветаТабличнойЧасти = Новый Массив;
	ЦветаТабличнойЧасти.Добавить(Новый Цвет(230, 230, 250));
	ЦветаТабличнойЧасти.Добавить(Новый Цвет(245, 245, 250));
	
	СоответствиеШиринКолонок = Новый Соответствие;
	
	ОписаниеПримитивныхТипов = Новый ОписаниеТИпов("Строка, Число, Булево, Дата");
	
	ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,1, 1, ТипМетаданных, СоответствиеШиринКолонок, 12, Истина);
	ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,2, 1, ТекМетаданные.Синоним, СоответствиеШиринКолонок, 12, Истина);
	
	Если ТипМетаданных = "Документ" Тогда
		
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,3, 1, Нстр("ru = 'Номер '"), СоответствиеШиринКолонок, 10, Истина);
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,3, 2, ТекСсылка.Номер, СоответствиеШиринКолонок, 10, Истина);
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,4, 1, Нстр("ru = ' от '"), СоответствиеШиринКолонок, 10, Истина);
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,4, 2, ТекСсылка.Дата, СоответствиеШиринКолонок, 10, Истина);
		
		НаименованиеФормы      = СтрШаблон(Нстр("ru = 'Документ %1 №%2 от %3'"), ТекМетаданные.Синоним, 
		                         	ТекСсылка.Номер, ТекСсылка.Дата); 
		
	Иначе
		
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,3, 1, Нстр("ru = 'Код '"), СоответствиеШиринКолонок, 10, Истина);
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,3, 2, ТекСсылка.Код, СоответствиеШиринКолонок, 10, Истина);
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,4, 1, "Наименование", СоответствиеШиринКолонок, 10, Истина);
		ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,4, 2, ТекСсылка.Наименование, СоответствиеШиринКолонок, 10, Истина);
		
		НаименованиеФормы      = СтрШаблон(Нстр("ru = 'Справочник %1: %2'"), ТекМетаданные.Синоним, ТекСсылка.Наименование);
		
	КонецЕсли;
	
	ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,6, 1, Нстр("ru = 'Реквизиты:  '"), СоответствиеШиринКолонок, 10, Истина);
	
	ТекСтрока = 7;
	
	ТекстЗапроса = "";
	
	Для Каждого Реквизит ИЗ ТекМетаданные.Реквизиты Цикл
		
		ТекстЗапроса = ТекстЗапроса + ",
		|" + Реквизит.Имя + " КАК " + Реквизит.Имя + "
		|, ПРЕДСТАВЛЕНИЕ(" + Реквизит.Имя + ") КАК " + Реквизит.Имя + "_Представление";
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ " + Сред(ТекстЗапроса, 2) + " 
		|ИЗ " + НаименованиеМетаданных + " ГДЕ Ссылка = &Ссылка";
		Запрос = ТекСоединениеВИБ.NewObject("Запрос", ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", ТекСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Для Каждого Реквизит Из ТекМетаданные.Реквизиты Цикл
				Если Выборка[Реквизит.Имя] <> Неопределено Тогда
					ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,ТекСтрока, 1, Реквизит.Синоним, СоответствиеШиринКолонок, , Истина, Истина, ЦветФонаРеквизита, ЦветРамкиРеквизита);
					Если НЕ ОписаниеПримитивныхТипов.СодержитТип(ТипЗнч(Выборка[Реквизит.Имя])) Тогда
						Расшифровка = ВернутьРасшифровку(Выборка[Реквизит.Имя]);
					Иначе
						Расшифровка = Неопределено;
					КонецЕсли;
					ВывестиПоКоординатам(ОписаниеПримитивныхТипов, ТабличныйДокумент,ТекСтрока, 2, Выборка[Реквизит.Имя + "_Представление"], СоответствиеШиринКолонок, , , Истина, ЦветФонаЗначения, ЦветРамкиРеквизита, Расшифровка);
					ТекСтрока = ТекСтрока + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

	Для Каждого ТабличнаяЧасть Из ТекМетаданные.ТабличныеЧасти Цикл
		
		ТекСтрока = ТекСтрока + 1;
			ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,ТекСтрока, 1, ТабличнаяЧасть.Синоним, , 10, Истина,);
			МассивРеквизитов = Новый Массив;
			ТекСтрока = ТекСтрока + 1;
			ТекКолонка = 1;
			НачалоСтрок = ТекСтрока;
			
			ТекстЗапроса = "";
			
			Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
				
				ТекстЗапроса = ТекстЗапроса + ",
				|" + Реквизит.Имя + " КАК " + Реквизит.Имя + "
				|, ПРЕДСТАВЛЕНИЕ(" + Реквизит.Имя + ") КАК " + Реквизит.Имя + "_Представление";
				
				МассивРеквизитов.Добавить(Реквизит.Имя);
				ВывестиПоКоординатам(Неопределено, ТабличныйДокумент,ТекСтрока, ТекКолонка, Реквизит.Синоним, , ,Истина, Истина, ЦветФонаТабличнойЧасти, ЦветРамкиТабличнойЧасти);
				ТекКолонка = ТекКолонка + 1;
				
			КонецЦикла;
			
			Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
				
				ТекстЗапроса = "ВЫБРАТЬ " + Сред(ТекстЗапроса, 2) + " 
				|ИЗ " + НаименованиеМетаданных + "." + ТабличнаяЧасть.Имя + " ГДЕ Ссылка = &Ссылка";
				Запрос = ТекСоединениеВИБ.NewObject("Запрос", ТекстЗапроса);
				Запрос.УстановитьПараметр("Ссылка", ТекСсылка);
				
				ТекСтрока = ТекСтрока + 1;
				
				ТекИнд = 0;
				
				ТекТаблЧасть = Запрос.Выполнить().Выгрузить();
				
				Для Каждого Строка Из ТекТаблЧасть Цикл
					ТекКолонка = 1;
					Для Каждого Реквизит Из МассивРеквизитов Цикл
						
						Если НЕ ОписаниеПримитивныхТипов.СодержитТип(ТипЗнч(Строка[Реквизит])) Тогда
							Расшифровка = ВернутьРасшифровку(Строка[Реквизит]);
						Иначе
							Расшифровка = Неопределено;
						КонецЕсли;

						ВывестиПоКоординатам(ОписаниеПримитивныхТипов, ТабличныйДокумент,ТекСтрока, ТекКолонка, Строка[Реквизит + "_Представление"], СоответствиеШиринКолонок, , , Истина, ЦветаТабличнойЧасти[ТекИнд], ЦветРамкиТабличнойЧасти, Расшифровка);
						ТекКолонка = ТекКолонка + 1;
					КонецЦикла;
					ТекИнд = ?(ТекИнд = 0, 1, 0);
					ТекСтрока = ТекСтрока + 1;
				КонецЦикла;
				
			КонецЕсли;
			
			ТабличныйДокумент.Область(НачалоСтрок, , ТекСтрока).Сгруппировать();
		
	КонецЦикла;
	
	Для Каждого Запись Из СоответствиеШиринКолонок Цикл
		ТабличныйДокумент.Область(1, Запись.Ключ, ТекСтрока).ШиринаКолонки = ?(Запись.Значение < 8, 8, ?(Запись.Значение > 40, 40, Запись.Значение));
	КонецЦикла;

	Возврат Новый Структура("ТабличныйДокумент,НаименованиеФормы",ТабличныйДокумент,НаименованиеФормы);
	
КонецФункции // ПолучитьОтображениеОбъектаCOM()

Процедура ВывестиПоКоординатам(ОписаниеПримитивныхТипов, ТабличныйДокумент, Строка, Столбец, Значение, СоответствиеШиринКолонок = Неопределено, Размер = 8, Жирный = Ложь, Обвести = Ложь, ЦветФона = Неопределено, ЦветРамки = Неопределено, Расшифровка = Неопределено)
	
	Если ЦветФона = Неопределено Тогда
		ЦветФона = Новый Цвет;
	КонецЕсли;
	
	Если ЦветРамки = Неопределено Тогда
		ЦветРамки = Новый Цвет;
	КонецЕсли;
	
	ТекОбласть       = ТабличныйДокумент.Область(Строка, Столбец);
	ТекОБласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
	ТекОбласть.ЦветФона  = ЦветФона;
	ТекОбласть.ЦветРамки = ЦветРамки;
	ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ТекОбласть.Шрифт = Новый Шрифт(ТекОбласть.Шрифт, , Размер, Жирный);
	
	Если ТипЗнч(Значение) = Тип("Булево") Тогда
		Если Значение Тогда
			ТекОбласть.Текст = Нстр("ru = 'да'");
			ТекОбласть.ЦветТекста = WebЦвета.Зеленый;
		Иначе
			ТекОбласть.Текст = Нстр("ru = 'нет'");
			ТекОбласть.ЦветТекста = WebЦвета.Красный;
		КонецЕсли;
		
		ТекОБласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		
	Иначе
		
		ТекОбласть.Текст = Значение;
		
	КонецЕсли;
	
	ТекОбласть.Расшифровка = Расшифровка;
	
	Если Обвести Тогда
		Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		ТекОбласть.Обвести(Линия, Линия, Линия, Линия);
	КонецЕсли;
	
	ДлинаСтроки = СтрДлина(СокрЛП(ТабличныйДокумент.Область(Строка, Столбец).текст));
	
	Если СоответствиеШиринКолонок <> Неопределено Тогда
		Если СоответствиеШиринКолонок[Столбец] = Неопределено ИЛИ СоответствиеШиринКолонок[Столбец] <= ДлинаСтроки Тогда
			СоответствиеШиринКолонок.Вставить(Столбец, ДлинаСтроки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ВернутьРасшифровку(ЗначениеПоказателя)
	
	ТипЗначения = РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLTypeOf(ТекСоединениеВИБ,ЗначениеПоказателя).TypeName;
	Возврат Новый Структура("ТипЗначения, Значение", ТипЗначения, РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLString(ТекСоединениеВИБ,ЗначениеПоказателя));
	
КонецФункции



#КонецОбласти

#Область ОтчетПоРегиструНакопления

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом,
//	ЕстьОшибки - флаг того, что при формировании произошли ошибки
//
//Процедура СформироватьОтчет(ДокументРезультат, ЕстьОшибки = Ложь) Экспорт
Функция ПолучитьОтчетПоРегиструНакопления()
	
	ДокументРезультат=Новый ТабличныйДокумент;
		
	ОбъектЗапрос=НастроитьОбъектЗапрос();
	
	Если ОбъектЗапрос=Неопределено Тогда
		Возврат ДокументРезультат;
	КонецЕсли;
	
	Макет       		= ПолучитьМакет("ОстаткиИОбороты");
	ЗаголовокОтчета 	= Макет.ПолучитьОбласть("Заголовок");
	КолонкиПоказателей	= Новый Структура;
	
	ВысотаЗаголовка=0;
	СформироватьИВывестиЗаголовокОтчета(ДокументРезультат, ВысотаЗаголовка, Истина);

	///////////////////////////////////////////////////////////////////////////////
	// ВЫВОДИМ ШАПКУ ОТЧЕТА
	
	НачалоШапки=ДокументРезультат.ВысотаТаблицы+1;
	МассивПоказателей=Новый Массив;
	
	Если ДанныеРегистра.ВидРегистра="Обороты" Тогда
		
		ОбластьПоказатель=Макет.ПолучитьОбласть("ОбластьШапкаОбороты|ГруппировкаПоказатель");
		ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбластьШапкаОбороты|Отступ"));
		ДокументРезультат.Присоединить(Макет.ПолучитьОбласть("ОбластьШапкаОбороты|ГруппировкаСтрока"));
		
		ПоказателиДляВывода=ДеревоПоказателей.Строки.НайтиСтроки(Новый Структура("Выводить",Истина),Истина);
		
		Если ПоказателиДляВывода.Количество()=0 Тогда
			
			Возврат ДокументРезультат;
			
		Иначе
			
			НомерКолонки=3;
			
			Для Каждого СтрПоказатель ИЗ ПоказателиДляВывода Цикл
				
				Если СтрПоказатель.Родитель=Неопределено И (НЕ ОсновнаяТаблицаРегистра) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ОбластьПоказатель.Параметры.ИмяПоказателя=СтрПоказатель.Представление;
				ДокументРезультат.Присоединить(ОбластьПоказатель);
				КолонкиПоказателей.Вставить(СтрПоказатель.Имя,НомерКолонки);
				НомерКолонки=НомерКолонки+1;
				
				МассивПоказателей.Добавить(СтрПоказатель.Имя);
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		ОбластьПоказатель=Макет.ПолучитьОбласть("ОбластьШапкаОстаткиИОбороты|ГруппировкаПоказатель");
		ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбластьШапкаОстаткиИОбороты|Отступ"));
		ДокументРезультат.Присоединить(Макет.ПолучитьОбласть("ОбластьШапкаОстаткиИОбороты|ГруппировкаСтрока"));
		
		НомерКолонки=2;
		
		Для Каждого Строка ИЗ ДеревоПоказателей.Строки Цикл
			
			Если ОсновнаяТаблицаРегистра И Строка.Выводить Тогда
				
				ПоказателиДляВывода=Новый Массив;
				ПоказателиДляВывода.Добавить(Строка);
				
			Иначе
				
				ПоказателиДляВывода=Строка.Строки.НайтиСтроки(Новый Структура("Выводить",Истина));
				
			КонецЕсли;
			
			НачалоГруппыПоказателей=НомерКолонки+1;
			
			Если ПоказателиДляВывода.Количество()>0 Тогда
				
				Для Каждого СтрПоказатель ИЗ ПоказателиДляВывода Цикл
					
					ОбластьПоказатель.Параметры.ИмяПоказателя=Строка.Представление;
					ОбластьПоказатель.Параметры.ВидИтога=СтрПоказатель.Представление;
					
					НомерКолонки=НомерКолонки+1;
					ДокументРезультат.Присоединить(ОбластьПоказатель);
					КолонкиПоказателей.Вставить(СтрПоказатель.Имя,НомерКолонки);
					
					МассивПоказателей.Добавить(СтрПоказатель.Имя);
										
				КонецЦикла;
				
				ДокументРезультат.Область(НачалоШапки,НачалоГруппыПоказателей,НачалоШапки,НомерКолонки).Объединить();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	// ФОРМИРУЕМ ТЕКСТ ЗАПРОСА
	
	ТекстЗапроса="ВЫБРАТЬ
	|";
	
	ТекстПоля="";
	ТекстИтогиИзмерения="";
	ТекстИтогиПоказатели="";
	ТекстОтбор="";
	ТекстПорядок="";
	
	ТаблицаГруппировок=ИспользуемыеПоляДетализации.Скопировать();
	ТаблицаГруппировок.Индексы.Добавить("ПсевдонимПоля");
	
	СтруктураВыводГруппировок = Новый Структура;
 	СтруктураСдвигУровняГруппировок = Новый Структура;
		
	Для каждого СтрИзмерение Из ИспользуемыеПоляДетализации Цикл
		
		ТекстПоля = ТекстПоля + ", " + СтрИзмерение.ИмяПоля + " КАК " + СтрИзмерение.ПсевдонимПоля;
		
		Если НЕ СтрИзмерение.ТипМетаДанных="Простой" Тогда
			ТекстПоля = ТекстПоля + ", ПРЕДСТАВЛЕНИЕ(" + СтрИзмерение.ИмяПоля + ") КАК " + СтрИзмерение.ПсевдонимПоля + "Представление";
		КонецЕсли;
			
		Если СтрИзмерение.ТипМетаДанных="Справочник" Тогда
			
			Если СтрИзмерение.ЕстьКод Тогда
				
				ТекстПоля = ТекстПоля + ", "+СтрИзмерение.ИмяПоля+".Код КАК "+СтрИзмерение.ПсевдонимПоля+"Код";
				
			КонецЕсли;
			
			Если СтрИзмерение.ЕстьНаименование Тогда
				
				ТекстПоля = ТекстПоля + ", "+СтрИзмерение.ИмяПоля+".Наименование КАК "+СтрИзмерение.ПсевдонимПоля+"Наименование";
				ТекстПорядок=ТекстПорядок+", "+СтрИзмерение.ИмяПоля+".Наименование";
				
			КонецЕсли;
			
		ИначеЕсли СтрИзмерение.ТипМетаДанных="Документ" Тогда
			
			ТекстПорядок=ТекстПорядок+", "+СтрИзмерение.ИмяПоля+".Дата";	
			
		КонецЕсли;
						
		ТекстИтогиИзмерения = ТекстИтогиИзмерения + ", " + СтрИзмерение.ПсевдонимПоля;
		
		СтруктураСдвигУровняГруппировок.Вставить(СтрИзмерение.ПсевдонимПоля, 0);
		СтруктураВыводГруппировок.Вставить(СтрИзмерение.ПсевдонимПоля, Новый Массив);
		
	КонецЦикла;
		
	Для Каждого СтрПараметр ИЗ ИспользуемыеПараметры Цикл
			
		ТекстОтбор=ТекстОтбор+" И "+СтрПараметр.КонструкцияОтбора;
				
	КонецЦикла;
		
	Если ПоДокументамДвижения И ИспользуемыеПоляДетализации.Найти("Регистратор","ИмяПоля")=Неопределено Тогда
		
		ТекстПоля = ТекстПоля + ", " + "Регистратор" + " КАК " + "Регистратор";
		ТекстПоля = ТекстПоля + ", ПРЕДСТАВЛЕНИЕ(Регистратор) КАК РегистраторПредставление";
		
		ТекстИтогиИзмерения = ТекстИтогиИзмерения + ", Регистратор";
		
		ТекстПорядок=ТекстПорядок+", Регистратор.Дата";
		
		НоваяСтрока=ТаблицаГруппировок.Добавить();
		НоваяСтрока.ИмяПоля="Регистратор";
		НоваяСтрока.ПсевдонимПоля="Регистратор";
		НоваяСтрока.ТипМетаДанных="Документ";
		
		СтруктураСдвигУровняГруппировок.Вставить("Регистратор", 0);
		СтруктураВыводГруппировок.Вставить("Регистратор", Новый Массив);
	
	КонецЕсли;
	
	Для Каждого СтрПоказатель ИЗ МассивПоказателей Цикл
		
		 ТекстПоля=ТекстПоля+", "+СтрПоказатель+" КАК "+СтрПоказатель;
		 ТекстИтогиПоказатели=ТекстИтогиПоказатели+", СУММА("+СтрПоказатель+")";
		 
	 КонецЦикла;
	 
	 Если ТекстПоля="" Тогда
		 
		 ТекстОшибки=Нстр("ru = 'Не выбрано ни одного поля отчета.'");
		 Возврат ДокументРезультат;
		 
	КонецЕсли;
	 
	ТекстЗапроса=ТекстЗапроса+Сред(ТекстПоля,2);
	
	Если ОсновнаяТаблицаРегистра Тогда
		
		ТекстЗапроса=ТекстЗапроса+"
		|ИЗ РегистрНакопления."+ДанныеРегистра.Наименование;

		Если ЗначениеЗаполнено(ВидДвижения) И ДанныеРегистра.ВидРегистра="Остатки" Тогда
			
			ТекстОтбор=ТекстОтбор+" И ВидДвижения=ЗНАЧЕНИЕ(ВидДвиженияНакопления."+ВидДвижения+")";
			
		КонецЕсли;		

		ТекстОтбор=Сред(ТекстОтбор,3);
				
		Если НЕ ПустаяСтрока(ТекстОтбор) Тогда
			
			ТекстЗапроса=ТекстЗапроса+"
			|ГДЕ "+ТекстОтбор;
			
		КонецЕсли;
		
	ИначеЕсли ДанныеРегистра.ВидРегистра="Обороты" Тогда
		
		ТекстЗапроса=ТекстЗапроса+"
		|ИЗ РегистрНакопления."+ДанныеРегистра.Наименование+".Обороты(&ДатаНач,&ДатаКон,"+?(ПоДокументамДвижения,"Регистратор","")+","+Сред(ТекстОтбор,3) + ") КАК "+ДанныеРегистра.Наименование+"Обороты";
		
	Иначе
		
		ТекстЗапроса=ТекстЗапроса+"
		|ИЗ РегистрНакопления."+ДанныеРегистра.Наименование+".ОстаткиИОбороты(&ДатаНач,&ДатаКон,"+?(ПоДокументамДвижения,"Регистратор","")+",,"+Сред(ТекстОтбор,3) + ") КАК "+ДанныеРегистра.Наименование+"ОстаткиИОбороты";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстПорядок) Тогда
		ТекстЗапроса=ТекстЗапроса+" Упорядочить ПО "+Сред(ТекстПорядок,2);
	КонецЕсли;
	
	ТекстЗапроса=ТекстЗапроса+"
	| ИТОГИ "+Сред(ТекстИтогиПоказатели,2)+" ПО ОБЩИЕ"+ТекстИтогиИзмерения;
	
	ОбъектЗапрос.Текст=ТекстЗапроса;
	
	Результат=ОбъектЗапрос.Выполнить();
	
	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	
	// Инициируем структуру значений показателей
	СтруктураЗначенийПоказателей=Новый Структура;
	Для каждого Показатель Из МассивПоказателей Цикл
	
		СтруктураЗначенийПоказателей.Вставить(Показатель,0);
	
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура;

	// Области строки отчета - табличные документы из макета отчета
	СтруктураПараметров.Вставить("ОбщийОтступ", Макет.ПолучитьОбласть("Отступ|Строка"));
	СтруктураПараметров.Вставить("ЗначениеГруппировки",   Макет.ПолучитьОбласть("ГруппировкаСтрока|Строка"));
	СтруктураПараметров.Вставить("ОбластьПоказатель",   Макет.ПолучитьОбласть("ГруппировкаПоказатель|Строка"));
  
	// Табличный документ - результат отчета
	СтруктураПараметров.Вставить("ТабДок",    ДокументРезультат);

	// Массив выводимых показателей отчета
	СтруктураПараметров.Вставить("МассивПоказатели", МассивПоказателей);

	// Общее количество группировок запроса, т.е. как выводимых, так и пропускаемых
	СтруктураПараметров.Вставить("ВсегоГруппировок", ТаблицаГруппировок.Количество()+1);

	// Заполненная структура вывода группировок
	СтруктураПараметров.Вставить("СтруктураВыводГруппировок", 	СтруктураВыводГруппировок);

	// Массив всех группировок запроса, т.е. как выводимых, так и пропускаемых
	СтруктураПараметров.Вставить("ТаблицаГруппировок", 	ТаблицаГруппировок);

	// Заполненная структура "поправки" сдвига группировок вправо
	СтруктураПараметров.Вставить("СтруктураСдвигУровняГруппировок", СтруктураСдвигУровняГруппировок);

	// Наклонный шрифт для групп
	СтруктураПараметров.Вставить("ШрифтГрупп", Новый Шрифт(Макет.Область("ГруппировкаПоказатель|Строка").Шрифт,,,,Истина));

	// Форматная строка для вывода показателей
	СтруктураПараметров.Вставить("ФорматПоказателей", 			Новый Структура);
	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
		
		СтруктураПараметров.ФорматПоказателей.Вставить(ИмяПоказателя ,"ЧЦ = 15 ; ЧДЦ = 2");
					
	КонецЦикла;

	// Вывод строк отчета
	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	
	ВывестиВыборку(Результат.Выбрать(?(ВнешняяИБ=0,QueryResultIteration.ByGroups,ТекСоединениеВИБ.QueryResultIteration.ByGroups)), СтруктураПараметров, 0, Новый Массив, СтруктураЗначенийПоказателей);
	
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	// Вывод подвала отчета
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("Отступ|Подвал"));

	ОбластьЗначение   = Макет.ПолучитьОбласть("ГруппировкаСтрока|Подвал");

	ДокументРезультат.Присоединить(ОбластьЗначение);
	
	ОбластьПоказатель= Макет.ПолучитьОбласть("ГруппировкаПоказатель|Подвал");
	
	Для каждого Показатель Из МассивПоказателей Цикл

		ДокументРезультат.Присоединить(ОбластьПоказатель); 
	
	КонецЦикла; 
		
	Возврат ДокументРезультат;

КонецФункции // СформироватьОтчет()

// / Обход выборки из результата запроса по группировкам для вывода строк отчета
//
// Параметры:
//
//	Выборка       - выборка из результата отчета, которая обходится в процедуре,
//	СтруктураПараметров - структура параметров, передеваемых в процедуру вывода
//	                строки отчета,
//	Номер         - число, номер обходимой группировки
//	МассивРасшифровки: массив, содержащий список группировок текущей строки
//
Процедура ВывестиВыборку(Выборка, СтруктураПараметров, Номер, МассивРасшифровки, СтруктураЗначенийПоказателей)

	ВсегоГруппировок = СтруктураПараметров.ВсегоГруппировок;
	
	// Берутся группировки все подряд, 
	Пока Выборка.Следующий() Цикл

		ВывестиСтроку(Выборка, СтруктураПараметров, Номер, МассивРасшифровки, СтруктураЗначенийПоказателей);

		// Детальные записи не нужны: для последней группировки после итогов оп группировке идут 
		// детальные записи
		Если Номер = ВсегоГруппировок - 1
			И Выборка.ТипЗаписи() =  ?(ВнешняяИБ=0,QueryRecordType.GroupTotal,ТекСоединениеВИБ.QueryRecordType.GroupTotal) Тогда 
			Продолжить;
		КонецЕсли;

		// На каждом уровне используется своя копия структуры расшифровок
		КопияМассивРасшифровки = Новый Массив;
		Для Каждого Элемент Из МассивРасшифровки Цикл
			КопияМассивРасшифровки.Добавить(Элемент);
		КонецЦикла;

		ВывестиВыборку(Выборка.Выбрать(?(ВнешняяИБ=0,QueryResultIteration.ByGroups,ТекСоединениеВИБ.QueryResultIteration.ByGroups),,?(Выборка.Группировка()="Период","ВСЕ","")), СтруктураПараметров, Номер + 1, КопияМассивРасшифровки, СтруктураЗначенийПоказателей);
		
	КонецЦикла;

КонецПроцедуры // ВывестиВыборку()


// Вывод строки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	Выборка       - выборка из результата отчета, которая обходится в процедуре
//	СтруктураПараметров - структура параметров, необходимых для вывода строки
//	Номер         - число, номер обходимой группировки
//
Процедура ВывестиСтроку(Выборка, СтруктураПараметров, Номер,МассивРасшифровки,СтруктураЗначенийПоказателей)

	ОбластьОбщийОтступ = СтруктураПараметров.ОбщийОтступ;
	ОбластьЗначениеГруппировки   = СтруктураПараметров.ЗначениеГруппировки;
	ОбластьПоказатель   = СтруктураПараметров.ОбластьПоказатель;

	СтруктураВыводГруппировок = СтруктураПараметров.СтруктураВыводГруппировок;

	УровеньЗаписи   = Выборка.Уровень();
	СдвигУровня     = 0;

	ИмяГруппировки  = Выборка.Группировка();
	
	Если ИмяГруппировки="" Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеГруппировки=СтруктураПараметров.ТаблицаГруппировок.Найти(ИмяГруппировки,"ПсевдонимПоля");
	ЕстьПолеПредставление=(НЕ (ДанныеГруппировки=Неопределено ИЛИ ДанныеГруппировки.ТипМетаДанных="Простой")); 

	ТабДок = СтруктураПараметров.ТабДок;

	ЗначениеГруппировки = "";

	ЗначениеРасшифровки = Неопределено;

	ТипЗаписиВыборки = Выборка.ТипЗаписи();

	МассивВыводГруппировок = Новый Массив;

	Если ТипЗаписиВыборки = ?(ВнешняяИБ=0,QueryRecordType.TotalByHierarchy,ТекСоединениеВИБ.QueryRecordType.TotalByHierarchy) Тогда

		ЗначениеТекущейГруппировки = "" + Выборка[ИмяГруппировки];
		Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда

			ЗначениеТекущейГруппировки = "<...>";
		КонецЕсли;

		ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки;

	ИначеЕсли ТипЗаписиВыборки = ?(ВнешняяИБ=0,QueryRecordType.GroupTotal,ТекСоединениеВИБ.QueryRecordType.GroupTotal) Тогда
		
		Если СтруктураВыводГруппировок.Свойство(ИмяГруппировки, МассивВыводГруппировок) Тогда
			
			ЗначениеТекущейГруппировки = Выборка[ИмяГруппировки+?(ЕстьПолеПредставление,"Представление","")];
			
			Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда
				ЗначениеТекущейГруппировки = "<...>";
			КонецЕсли;
			
			ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки;
			
			Если ЗначениеРасшифровки = Неопределено Тогда 
				ЗначениеРасшифровки = ПолучитьДанныеОбъектаCOM(Выборка,ИмяГруппировки);
			КонецЕсли;
			
		КонецЕсли;

	ИначеЕсли ТипЗаписиВыборки = ?(ВнешняяИБ=0,QueryRecordType.Overall,ТекСоединениеВИБ.QueryRecordType.Overall) Тогда
		
		ЗначениеТекущейГруппировки=Нстр("ru = 'ИТОГО:'");
		ЗначениеРасшифровкиСтрока=Новый Структура("Итого");
		
	КонецЕсли;

	// Для итогов по группировке сдвиг нужно уменьшить на количество пропущенных группировок, 
	// заранее рассчитанное для каждой группировки
	Если ТипЗаписиВыборки = ?(ВнешняяИБ=0,QueryRecordType.GroupTotal,ТекСоединениеВИБ.QueryRecordType.GroupTotal) Тогда

		МассивРасшифровки.Добавить(ИмяГруппировки);

		ЗначениеРасшифровкиСтрока = Новый Структура;
		Для Каждого Элемент Из МассивРасшифровки Цикл
			ЗначениеРасшифровкиСтрока.Вставить(Элемент, ПолучитьДанныеОбъектаCOM(Выборка,Элемент))
		КонецЦикла;

		СдвигУровня = СтруктураПараметров.СтруктураСдвигУровняГруппировок[ИмяГруппировки]+1;

		// Для итогов по иерархии сдвиг нужно уменьшить на количество пропущенных группировок для предыдущей группировки
		// заранее рассчитанное для каждой группировки
	ИначеЕсли ТипЗаписиВыборки = ?(ВнешняяИБ=0,QueryRecordType.TotalByHierarchy,ТекСоединениеВИБ.QueryRecordType.TotalByHierarchy) Тогда
		СдвигУровня = СтруктураПараметров.СтруктураСдвигУровняГруппировок[СтруктураПараметров.ТаблицаГруппировок[Номер - 1].ПсевдонимПоля]+1;
	КонецЕсли;
	
	УровеньЗаписи = УровеньЗаписи - СдвигУровня;
	
	ТабДок.Вывести(ОбластьОбщийОтступ, УровеньЗаписи);
	ТабДок.Область(ТабДок.ВысотаТаблицы,1).Расшифровка = ЗначениеРасшифровкиСтрока;
	
	ОбластьЗначениеГруппировки.Параметры.ЗначениеГруппировки = ЗначениеТекущейГруппировки;
	ОбластьЗначениеГруппировки.Область().Отступ = УровеньЗаписи;
	
	ТабДок.Присоединить(ОбластьЗначениеГруппировки);
	
	// Заполняем значений показателей для расчета
	Для каждого Показатель Из МассивПоказателей Цикл
	
		СтруктураЗначенийПоказателей.Вставить(Показатель,Выборка[Показатель]);

	КонецЦикла;
	
	// Выводим показатели в отчет
	Для каждого Показатель Из МассивПоказателей Цикл
		
		ОбластьПоказатель.Параметры.Показатель=СтруктураЗначенийПоказателей[Показатель];			
		ТабДок.Присоединить(ОбластьПоказатель);
		
	КонецЦикла; 
		
КонецПроцедуры // ВывестиСтроку()

#КонецОбласти


#Область ПроизвольныйЗапрос

Функция ПолучитьТаблицуПоЗапросу()
	
	ОбъектЗапрос=РаботаСОбъектамиМетаданныхВнешнийУХ.ПодготовитьЗапросДляПолученияДанных(ТекСоединениеВИБ,ДанныеДляЗапроса);
	
	ПостроительОтчетаВИБ=ТекСоединениеВИБ.NewObject("ПостроительОтчета");
	
	ПостроительОтчетаВИБ.Text=ДанныеДляЗапроса.ТекстЗапроса;
	ПостроительОтчетаВИБ.FillSettings();
	
	Для Каждого Параметр ИЗ ОбъектЗапрос.Parameters Цикл
		
		ПостроительОтчетаВИБ.Parameters.Insert(Параметр.Key, Параметр.Value);
		
	КонецЦикла;
	
	Для Каждого Элемент ИЗ ОбъектЗапрос.Filter Цикл
		
		ТекОтбор = ПостроительОтчетаВИБ.Filter.Add(Элемент.DataPath);
		ТекОтбор.ComparisonType = Элемент.ComparisonType;
		ТекОтбор.Value          = Элемент.Value;
		ТекОтбор.Use            = Истина;
		
	КонецЦикла;
	
	ПостроительОтчетаВИБ.PresentationAdding=ТекСоединениеВИБ.PresentationAdditionType.DontAdd;

	ПостроительОтчетаВИБ.Execute();
	ТаблицаCOM                  = ПостроительОтчетаВИБ.Result.Unload();
	
	ТабДокумент=Новый ТабличныйДокумент;
	
	РабочийМакет=ПолучитьМакет("ПроизвольныйЗапросВИБ");
	
	ОбластьОтступ		= РабочийМакет.ПолучитьОбласть("Отступ|ОбластьШапка");
	ОбластьЗаголовок	= РабочийМакет.ПолучитьОбласть("Поле|ОбластьШапка");
	ОбластьСтрока		= РабочийМакет.ПолучитьОбласть("Поле|Строка");
	ОбластьПодвал		= РабочийМакет.ПолучитьОбласть("Поле|Подвал");
	
	ТабДокумент.Вывести(ОбластьОтступ);
	
	МассивКолонок=Новый Массив;
	
	СтруктураКолонок=Новый Структура;
	
	Для Каждого Колонка ИЗ ТаблицаCOM.Columns Цикл
		
		ОбластьЗаголовок.Параметры.ИмяПоля=Колонка.Name;
		МассивКолонок.Добавить(Колонка.Name);
		
		ТабДокумент.Присоединить(ОбластьЗаголовок);
		
	КонецЦикла;
	
	Для Каждого СтрокаCOM Из ТаблицаCOM Цикл
		
		ТабДокумент.Вывести(ОбластьОтступ);
		
		Для Каждого Колонка ИЗ МассивКолонок Цикл
			
			ДанныеОбъекта=ПолучитьПредставлениеОбъектаCOM(СтрокаCOM,Колонка);
			
			ОбластьСтрока.Параметры.ЗначениеПоля=ДанныеОбъекта.ПредставлениеДанных;				
			ОбластьСтрока.Параметры.Расшифровка=ДанныеОбъекта;
			
			ТабДокумент.Присоединить(ОбластьСтрока);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТабДокумент.Вывести(ОбластьОтступ);
	
	Для Каждого Колонка ИЗ МассивКолонок Цикл
				
		ТабДокумент.Присоединить(ОбластьПодвал);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
		
КонецФункции // ПолучитьТаблицуПоЗапросу() 

Функция ПолучитьПредставлениеОбъектаCOM(СтрокаCOM,ИмяПоля)
	
	ЗначениеCOM			= СтрокаCOM[ИмяПоля];
	ТипДанных			= РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLTypeOf(ТекСоединениеВИБ,ЗначениеCOM);
	
	ДанныеОбъекта=Новый Структура("ПредставлениеДанных",РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьString(ТекСоединениеВИБ,ЗначениеCOM));
	
	Если ТипДанных=Неопределено Тогда
		Возврат ДанныеОбъекта;
	КонецЕсли;
	
	СтрокаТипа=РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLTypeOf(ТекСоединениеВИБ,ЗначениеCOM).TypeName;
	
	Если СтрНайти(СтрокаТипа,"EnumRef")>0 Тогда
		
		ТекстПеречисления=РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLString(ТекСоединениеВИБ,ЗначениеCOM);
		
		ДанныеДляПоиска=Новый СписокЗначений;
		ДанныеДляПоиска.Добавить(СтрЗаменить(СтрокаТипа,"EnumRef","Перечисление")+"."+ТекстПеречисления,ТекстПеречисления,Истина);
		
		ДанныеОбъекта.Вставить("ТипОбъектаМетаданных","Перечисление");
		ДанныеОбъекта.Вставить("ИмяОбъектаМетаданных",СтрЗаменить(СтрокаТипа,"EnumRef.",""));
		ДанныеОбъекта.Вставить("ДанныеДляПоиска",ДанныеДляПоиска);
			
	ИначеЕсли СтрНайти(СтрокаТипа,"DocumentRef")>0 Тогда
				
		ДанныеОбъекта.Вставить("ТипОбъектаМетаданных","Документ");
		ДанныеОбъекта.Вставить("ИмяОбъектаМетаданных",СтрЗаменить(СтрокаТипа,"DocumentRef.",""));
		ДанныеОбъекта.Вставить("Ссылка",РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLString(ТекСоединениеВИБ,ЗначениеCOM.UUID()));
		
	ИначеЕсли СтрНайти(СтрокаТипа,"CatalogRef")>0 Тогда
		
		ДанныеОбъекта.Вставить("ТипОбъектаМетаданных","Справочник");
		ДанныеОбъекта.Вставить("ИмяОбъектаМетаданных",СтрЗаменить(СтрокаТипа,"CatalogRef.",""));
		ДанныеОбъекта.Вставить("Ссылка",РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLString(ТекСоединениеВИБ,ЗначениеCOM.UUID()));	
						
	ИначеЕсли СтрНайти(СтрокаТипа,"ChartOfCharacteristicTypesRef")>0 Тогда
		
		ДанныеОбъекта.Вставить("ТипОбъектаМетаданных","ПланВидовХарактеристик");
		ДанныеОбъекта.Вставить("ИмяОбъектаМетаданных",СтрЗаменить(СтрокаТипа,"ChartOfCharacteristicTypesRef.",""));
		ДанныеОбъекта.Вставить("Ссылка",РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLString(ТекСоединениеВИБ,ЗначениеCOM.UUID()));	
				
	Иначе
		
		ДанныеОбъекта.Вставить("ТипОбъектаМетаданных","Простой");
		ДанныеОбъекта.Вставить("ДанныеДляПоиска",ЗначениеCOM);
		
	КонецЕсли;
	
	Возврат ДанныеОбъекта;
		
КонецФункции // ПолучитьДанныеОбъъектаCOM()


#КонецОбласти


Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
ЛинияЖирная = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
