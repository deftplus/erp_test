
&НаКлиенте
Процедура Применить(Команда)
	
	ОбновитьРеквизитыУОП();
	ОбновитьНастройкиИтоговПоПериодамНаСервере();
	Закрыть(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УправлениеОтчетнымПериодом 				 	 = Параметры.УправлениеПериодом;
	
	СтруктураФильтровИтог 						 = ПолучитьИзВременногоХранилища(Параметры.АдресСтруктураФильтров);	
	
	АдресТаблицИнтерфейса                        = Параметры.АдресТаблицИнтерфейса;
	ТаблицыИнтерфейса 							 = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
	
	Если СтруктураФильтровИтог.Свойство("Фильтр_Организации") Тогда
		 Организация = СтруктураФильтровИтог.Фильтр_Организации;
	КонецЕсли;	
	
	Если ТаблицыИнтерфейса.Свойство("НастройкиСкользящегоПланирования") Тогда
		 ИспользоватьГруппировкуПериодовСреднесрочную = ТаблицыИнтерфейса.НастройкиСкользящегоПланирования.ИспользоватьГруппировкуПериодовСреднесрочную;
		 ГраницаСреднесрочнойГруппировки 			  = ТаблицыИнтерфейса.НастройкиСкользящегоПланирования.ГраницаСреднесрочнойГруппировки;
		 ПериодичностьСреднесрочнойГруппировки        = ТаблицыИнтерфейса.НастройкиСкользящегоПланирования.ПериодичностьСреднесрочнойГруппировки;
	КонецЕсли;	
	
	Если ГраницаСреднесрочнойГруппировки = 0 Тогда
		 ГраницаСреднесрочнойГруппировки = 1;
	КонецЕсли;	
	
	ОбновитьТекущийГоризонт();	
	
	ТекущаяПериодичность =  УправлениеОтчетнымПериодом.ТекущаяПериодичность;
	
	УстановитьПараметрыПериодовДляГруппировки();
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьСледующийПериод(Команда)
	
	ВыполнитьАктуализацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАктуализацию()
	
	СтруктураПараметров = ПодготовитьПараметрыАктуализацииБюджетов();
		
	ОткрытьФорму("Обработка.УправлениеПериодомСценарияВГрафическомВиде.Форма.ФормаАктуализацииБюджетов",СтруктураПараметров,,,,,);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыАктуализацииБюджетов()
	
	ОрганизацииДляАктуализации = Новый ТаблицаЗначений;
    ОрганизацииДляАктуализации.Колонки.Добавить("Организация");	
	ОрганизацииДляАктуализации.Колонки.Добавить("ПериодФакт");
	ОрганизацииДляАктуализации.Колонки.Добавить("ПериодПлан");
	ОрганизацииДляАктуализации.Колонки.Добавить("ПризнакИспользования");
	
	нСтр = ОрганизацииДляАктуализации.Добавить();
	нСтр.Организация 			= Организация;
	нСтр.ПериодФакт 			= ГраницаАктуализации;
	нСтр.ПериодПлан 			= ПериодСценарияОкончание;
	нСтр.ПризнакИспользования 	= Истина;
	
	ОрганизацииДляАктуализацииАдрес = ПоместитьВоВременноеХранилище(ОрганизацииДляАктуализации,ЭтаФорма.УникальныйИдентификатор);
	
	СтруктураПолей = Новый Структура;	
	СтруктураПолей.Вставить("ПериодОкончания", ПериодСценарияОкончание);
	СтруктураПолей.Вставить("ОрганизацииДляАктуализацииАдрес",ОрганизацииДляАктуализацииАдрес);
	СтруктураПолей.Вставить("Сценарий",Сценарий);
	СтруктураПолей.Вставить("ТекущийДокументУправленияПериодом",УправлениеОтчетнымПериодом);
	СтруктураПолей.Вставить("ГраницаАктуализации",УправлениеОтчетнымПериодом.ГраницаАктуализации);
	
	ДоступныеПериоды = Новый СписокЗначений;
	
	ДоступныеПериоды.ЗагрузитьЗначения(ПериодыУХ.ПолучитьПодчиненныеПериоды(ГраницаАктуализации,ГраницаАктуализации));
	СтруктураПолей.Вставить("ДоступныеПериоды",ДоступныеПериоды);
	СтруктураПолей.Вставить("ВыбранныеПериоды",ДоступныеПериоды.ВыгрузитьЗначения());
    СтруктураПолей.Вставить("ПериодАктуализацииДанныхНовыйПо",ГраницаАктуализации);
	
	Возврат СтруктураПолей;
	
КонецФункции


&НаСервере
Процедура ОткрытиеСледующегоПериодаСервер() 

	УОПОбъект = УправлениеОтчетнымПериодом.ПолучитьОбъект();
	УОПОбъект.ОткрытьСледующийПериод();
	ОбновитьТекущийГоризонт();
	
КонецПроцедуры


Процедура ОбновитьРеквизитыУОП()
	
	
	ТаблицыИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
	
	НастройкиСкользящегоПланирования  = Новый Структура;
	НастройкиСкользящегоПланирования.Вставить("ИспользоватьГруппировкуПериодовСреднесрочную",ИспользоватьГруппировкуПериодовСреднесрочную);
	НастройкиСкользящегоПланирования.Вставить("ГраницаСреднесрочнойГруппировки",ГраницаСреднесрочнойГруппировки);
    НастройкиСкользящегоПланирования.Вставить("ПериодичностьСреднесрочнойГруппировки",ПериодичностьСреднесрочнойГруппировки);
	НастройкиСкользящегоПланирования.Вставить("ГраницаАктуализации",ГраницаАктуализации);
	НастройкиСкользящегоПланирования.Вставить("ТекущаяПериодичность",УправлениеОтчетнымПериодом.ТекущаяПериодичность);

	ТаблицыИнтерфейса.Вставить("НастройкиСкользящегоПланирования",НастройкиСкользящегоПланирования);	
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытиеПредыдущегоПериода(Команда)
	ОткрытиеПредыдущегоПериодаСервер(); 
	Оповестить("ОбновитьТаблицу");
КонецПроцедуры


&НаСервере
Процедура ОткрытиеПредыдущегоПериодаСервер() 

	УОПОбъект = УправлениеОтчетнымПериодом.ПолучитьОбъект();
	УОПОбъект.ОткрытьПредыдущийПериод();
	ОбновитьТекущийГоризонт();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьГруппировкуПериодовСреднесрочнуюПриИзменении(Элемент)
	Элементы.НастройкиГруппировкиПериодовСреднесрочной.Доступность = ИспользоватьГруппировкуПериодовСреднесрочную;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИспользоватьГруппировкуПериодовСреднесрочнуюПриИзменении(Неопределено);
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыПериодовДляГруппировки()
	
	
	Если ТекущаяПериодичность = Перечисления.Периодичность.День Тогда
		
		Элементы.ДекорацияПредставлениеПериода.Заголовок = Нстр("ru = 'дня'");
		
		ДоступныеПериоды = Новый Массив;
		ДоступныеПериоды.Добавить(Перечисления.Периодичность.Неделя);
		ДоступныеПериоды.Добавить(Перечисления.Периодичность.Декада);
        ДоступныеПериоды.Добавить(Перечисления.Периодичность.Месяц);
        ДоступныеПериоды.Добавить(Перечисления.Периодичность.Квартал);
        ДоступныеПериоды.Добавить(Перечисления.Периодичность.Полугодие);
        ДоступныеПериоды.Добавить(Перечисления.Периодичность.Год);
		
		МассивЗнченийПараметров  = Новый ФиксированныйМассив(ДоступныеПериоды);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", МассивЗнченийПараметров);	
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ПериодичностьСреднесрочнойГруппировки.ПараметрыВыбора 	= НовыеПараметры;			
		
	ИначеЕсли ТекущаяПериодичность = Перечисления.Периодичность.Неделя Тогда	
		
		Элементы.ДекорацияПредставлениеПериода.Заголовок = Нстр("ru = 'недели'");
		 
		ДоступныеПериоды = Новый Массив;
		ДоступныеПериоды.Добавить(Перечисления.Периодичность.Декада);
        ДоступныеПериоды.Добавить(Перечисления.Периодичность.Месяц);
        ДоступныеПериоды.Добавить(Перечисления.Периодичность.Квартал);
        ДоступныеПериоды.Добавить(Перечисления.Периодичность.Полугодие);
        ДоступныеПериоды.Добавить(Перечисления.Периодичность.Год);
		
		МассивЗнченийПараметров  = Новый ФиксированныйМассив(ДоступныеПериоды);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", МассивЗнченийПараметров);	
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ПериодичностьСреднесрочнойГруппировки.ПараметрыВыбора 	= НовыеПараметры;
		 	 
	ИначеЕсли ТекущаяПериодичность = Перечисления.Периодичность.Декада Тогда
		
		Элементы.ДекорацияПредставлениеПериода.Заголовок = Нстр("ru = 'декады'");
		 
		ДоступныеПериоды = Новый Массив;
        ДоступныеПериоды.Добавить(Перечисления.Периодичность.Месяц);
        ДоступныеПериоды.Добавить(Перечисления.Периодичность.Квартал);
        ДоступныеПериоды.Добавить(Перечисления.Периодичность.Полугодие);
        ДоступныеПериоды.Добавить(Перечисления.Периодичность.Год);
		
		МассивЗнченийПараметров  = Новый ФиксированныйМассив(ДоступныеПериоды);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", МассивЗнченийПараметров);	
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ПериодичностьСреднесрочнойГруппировки.ПараметрыВыбора 	= НовыеПараметры;

		 
	ИначеЕсли ТекущаяПериодичность = Перечисления.Периодичность.Месяц Тогда
		
		Элементы.ДекорацияПредставлениеПериода.Заголовок = Нстр("ru = 'месяца'");
		 
		ДоступныеПериоды = Новый Массив;
        ДоступныеПериоды.Добавить(Перечисления.Периодичность.Квартал);
        ДоступныеПериоды.Добавить(Перечисления.Периодичность.Полугодие);
        ДоступныеПериоды.Добавить(Перечисления.Периодичность.Год);
		
		МассивЗнченийПараметров  = Новый ФиксированныйМассив(ДоступныеПериоды);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", МассивЗнченийПараметров);	
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ПериодичностьСреднесрочнойГруппировки.ПараметрыВыбора 	= НовыеПараметры;
		 
	ИначеЕсли ТекущаяПериодичность = Перечисления.Периодичность.Квартал Тогда	
		
		Элементы.ДекорацияПредставлениеПериода.Заголовок = Нстр("ru = 'квартала'");
		
		ДоступныеПериоды = Новый Массив;
		ДоступныеПериоды.Добавить(Перечисления.Периодичность.Полугодие);
		ДоступныеПериоды.Добавить(Перечисления.Периодичность.Год);
		
		МассивЗнченийПараметров  = Новый ФиксированныйМассив(ДоступныеПериоды);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", МассивЗнченийПараметров);	
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ПериодичностьСреднесрочнойГруппировки.ПараметрыВыбора 	= НовыеПараметры;
		
		
	ИначеЕсли ТекущаяПериодичность = Перечисления.Периодичность.Полугодие Тогда	
		
		Элементы.ДекорацияПредставлениеПериода.Заголовок = Нстр("ru = 'полугодия'");
		 
		ДоступныеПериоды = Новый Массив;
		ДоступныеПериоды.Добавить(Перечисления.Периодичность.Год);
		
		МассивЗнченийПараметров  = Новый ФиксированныйМассив(ДоступныеПериоды);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", МассивЗнченийПараметров);	
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ПериодичностьСреднесрочнойГруппировки.ПараметрыВыбора 	= НовыеПараметры; 
		 
		 
	 КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьНастройкиИтоговПоПериодамНаСервере()
	
	НастройкаШкалыВремени = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса).НастройкаШкалыВремени; 
	
	Для Каждого Стр Из НастройкаШкалыВремени Цикл
		
		Стр.ДетализацияДни 			= Ложь;
		Стр.ДетализацияМесяцы 		= Ложь;
		Стр.ДетализацияКварталы 	= Ложь;
		Стр.ДетализацияПолугодия 	= Ложь;
		Стр.ДетализацияГоды 		= Ложь;

		Если  ТекущаяПериодичность = Перечисления.Периодичность.Год Тогда
			Стр.ДетализацияГоды 	= Истина;
		ИначеЕсли ТекущаяПериодичность = Перечисления.Периодичность.Квартал Тогда
			Стр.ДетализацияКварталы 	= Истина;
		ИначеЕсли ТекущаяПериодичность = Перечисления.Периодичность.Полугодие Тогда
			Стр.ДетализацияПолугодия = Истина;
		ИначеЕсли ТекущаяПериодичность = Перечисления.Периодичность.Месяц Тогда
			Стр.ДетализацияМесяцы = Истина;			
		ИначеЕсли ТекущаяПериодичность = Перечисления.Периодичность.День Тогда
			Стр.ДетализацияДни = Истина;		
		КонецЕсли;

		Если ИспользоватьГруппировкуПериодовСреднесрочную Тогда
			Если  ПериодичностьСреднесрочнойГруппировки = Перечисления.Периодичность.Год Тогда
				Стр.ДетализацияГоды 	= Истина;
			ИначеЕсли ПериодичностьСреднесрочнойГруппировки = Перечисления.Периодичность.Квартал Тогда
				Стр.ДетализацияКварталы 	= Истина;
			ИначеЕсли ПериодичностьСреднесрочнойГруппировки = Перечисления.Периодичность.Полугодие Тогда
				Стр.ДетализацияПолугодия = Истина;
			ИначеЕсли ПериодичностьСреднесрочнойГруппировки = Перечисления.Периодичность.Месяц Тогда
				Стр.ДетализацияМесяцы = Истина;			
			ИначеЕсли ПериодичностьСреднесрочнойГруппировки = Перечисления.Периодичность.День Тогда
				Стр.ДетализацияДни = Истина;		
			КонецЕсли;
		КонецЕсли;			
	КонецЦикла;	
	
	
	Параметры_ = Новый Структура();
	Параметры_.Вставить("Периодичность",ТекущаяПериодичность);
	Параметры_.Вставить("ИтогиПоКварталам"			,Стр.ДетализацияКварталы);
	Параметры_.Вставить("ИтогиПоГодам"				,Стр.ДетализацияГоды);
	Параметры_.Вставить("ИтогиПоМесяцам"			,Стр.ДетализацияМесяцы);
	Параметры_.Вставить("ИтогиПоПолугодиям"			,Стр.ДетализацияПолугодия);
	Параметры_.Вставить("ИтогиПоНеделям"			,Ложь);
	Параметры_.Вставить("ИтогиПоДням"				,Стр.ДетализацияДни);
	Параметры_.Вставить("Сдвиг",0);
	
	КлючШкалы = Справочники.КлючиШкалы.ПроверитьКлючПериода(Параметры_);
	Стр.КлючПериода 	= КлючШкалы;
	Стр.Ссылка 			= КлючШкалы;
	Стр.НачалоПериода 	= КлючШкалы.НачалоПериода;
	Стр.КонецПериода  	= КлючШкалы.КонецПериода;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьДанныеПослеАктуализации" Тогда
		ОткрытиеСледующегоПериодаСервер(); 
		ОбновитьТекущийГоризонт();
		Оповестить("ОбновитьТаблицу");
	КонецЕсли;	

	Если ИмяСобытия = "ОбновитьПанельПериодов" Тогда
		 ОбновитьТекущийГоризонт();
		 Оповестить("ОбновитьТаблицу");
	КонецЕсли;	

КонецПроцедуры

Процедура ОбновитьТекущийГоризонт()
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма,УправлениеОтчетнымПериодом);
	
	Если Не ЗначениеЗаполнено(ГраницаАктуализации) Тогда
		ГраницаАктуализации = УправлениеОтчетнымПериодом.ПериодСценария; 
	Иначе	 
		ГраницаАктуализации = УправлениеОтчетамиУХ.ПолучитьСледующийПериод(УправлениеОтчетнымПериодом.ГраницаАктуализации,1);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьУправлениеПериодами(Команда)
	
	ПараметрыФормы = Новый Структура("ДокументУправленияПериодомСценария,Режим", УправлениеОтчетнымПериодом,"Периоды");
	Имя = "Обработка.УправлениеПериодомСценарияВГрафическомВиде.Форма.Форма";
	ОткрытьФорму(Имя, ПараметрыФормы);

КонецПроцедуры





