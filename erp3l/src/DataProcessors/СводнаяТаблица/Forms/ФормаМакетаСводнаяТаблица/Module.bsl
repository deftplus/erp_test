

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Бланк = Параметры.Бланк;
	РежимРасшифровки = Параметры.РежимРасшифровки;
	Параметры.Свойство("Ключ", РакурсДанных);
		
	Если Не ЗначениеЗаполнено(Параметры.ВидОтчета) Тогда
		ВидОтчетаОтбор = Параметры.Бланк.Владелец;
	Иначе	
		ВидОтчетаОтбор = Параметры.ВидОтчета;
	КонецЕсли;
	
	ОбновитьСтруктуру = Истина;
		
	Если ЗначениеЗаполнено(Параметры.Проект) Тогда
		Если НЕ Параметры.Проект.Проект Тогда
			ВызватьИсключение(НСтр("ru = 'По этапу проекта формирование показателей эффективности не поддерживается. Необходимо выбрать проект.'"));
			Отказ = Истина;
			Возврат;	
		КонецЕсли;	
		ОтборПроект 	= Параметры.Проект;
	КонецЕсли;
			
	Если ЗначениеЗаполнено(Параметры.ВидБюджета) Тогда
		 ПолучитьПараметрыПоПроекту(Параметры.Проект,Параметры.Сценарий,Параметры.ВидБюджета,СтандартнаяОбработка);
	КонецЕсли;
			
	ВалютаПоУмолчанию = Константы.ВалютаУправленческогоУчета.Получить();	
		
	ОтборСценарий 	= Параметры.Сценарий;
	ОтборОрганизация = Параметры.Организация;
	
	Если Не ЗначениеЗаполнено(Бланк) Тогда
		Элементы.Бланк.Видимость = Истина;
		СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет, НСтр("ru = 'Не выбран бланк сводной таблицы'"));
		ЭтаФорма.Заголовок = НСтр("ru = 'Сводная таблица: бланк не выбран'");
		Возврат;
	КонецЕсли;	
				
	Точность = Бланк.УровеньТочностиПоУмолчанию;
	
	Если  Бланк.ЕдиницаИзмеренияПоУмолчанию=Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		ЕдиницаИзмерения = "Ед"
	ИначеЕсли Бланк.ЕдиницаИзмеренияПоУмолчанию=Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		ЕдиницаИзмерения = "Тыс"
	ИначеЕсли Бланк.ЕдиницаИзмеренияПоУмолчанию=Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		ЕдиницаИзмерения = "Миллионы"
	КонецЕсли;	 

	ТаблицаЯзыков = Константы.ДополнительныеЯзыкиВыводаОтчета.Получить().Получить();
		
	СТ = Обработки.СводнаяТаблица.Создать();
	СТ.РежимРаботы 	  = Перечисления.РежимыРаботыСводнойТаблицы.Основной;
	СТ.РежимДиаграммы = Ложь;
	СТ.ВариантОтображенияРесурсов = "ОбычныйИтог";
	СТ.ОтборПроект = ОтборПроект;
	СТ.ОтборСценарий = ОтборСценарий;
	СТ.ОтборОрганизация = ОтборОрганизация;
	СТ.ВидОтчета = ВидОтчетаОтбор;
	СТ.НазначениеТаблицы = Перечисления.НазначенияИспользованияСводнойТаблицы.Данные;	
	СТ.ИнициализироватьКонтекст(Бланк);
	
	Если НЕ ЗначениеЗаполнено(СТ.АдресТаблицИнтерфейса) Тогда	
		ВызватьИсключение(НСтр("ru = 'Ошибка настройки состава бланка сводной таблицы. Возможно не выбраны строки или показатели.'"));
		СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет, НСтр("ru = 'Ошибка настройки состава бланка сводной таблицы. Возможно не выбраны строки или показатели.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	ТаблицыИнтерфейса =  ПолучитьИзВременногоХранилища(СТ.АдресТаблицИнтерфейса);
    СтруктураДопФильтров = ПолучитьИзВременногоХранилища(СТ.АдресСтруктураФильтров);
		
	Если  Параметры.Свойство("Измерения") Тогда
		Измерения_ = ПолучитьИзВременногоХранилища(Параметры.Измерения);		
		ТаблицыИнтерфейса.Вставить("ТаблицаСтроки",Измерения_.ТаблицаСтроки);
		ТаблицыИнтерфейса.Вставить("ТаблицаСтраницы",Измерения_.ТаблицаСтраницы);
		ТаблицыИнтерфейса.Вставить("ТаблицаКолонки",Измерения_.ТаблицаКолонки);
		ТаблицыИнтерфейса.Вставить("ТаблицаДоступныеПоля",Измерения_.ТаблицаДоступныеПоля);
	    СтруктураДопФильтров = Измерения_.СтруктураДопФильтров;
		//Измерения.Вставить("СтруктураДопФильтров",СтруктураДопФильтров);
	КонецЕсли;
	
	СоздатьРеквизитыФильтры(СТ.АдресТаблицИнтерфейса);
		
	СТ.СоздатьПоляФильтров(ЭтаФорма,Бланк);	
	ОбновитьДанные = Ложь;
	ЗначениеВреквизитФормы(СТ,"Объект");
	
	РасчетПоказателей_ = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
	РасчетПоказателей_.ВидОтчета = ВидОтчетаОтбор;
	РасчетПоказателей_.ВалютаОтображения = Константы.ВалютаУправленческогоУчета.Получить();
	РасчетПоказателей_.РассчитыватьЗависимые = Истина;	

	ЗначениеВреквизитФормы(РасчетПоказателей_,"РасчетПоказателей");

	ЕстьРедактируемыеАналитики = Ложь;
	Для Каждого Стр Из ТаблицыИнтерфейса.ТаблицаСтроки Цикл
		Если Стр.Редактируется Тогда
			ЕстьРедактируемыеАналитики = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Элементы.КомандыРаботыСРедактированиемСтрок.Доступность = ЕстьРедактируемыеАналитики;
	Элементы.кмКомандыРаботыСРедактированиемСтрок.Доступность = ЕстьРедактируемыеАналитики;
		
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Периодичность", Бланк.Периодичность);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.ПериодПланированияОтборНачало.ПараметрыВыбора = НовыеПараметры;
	Элементы.ПериодПланированияОтборОкончание.ПараметрыВыбора = НовыеПараметры;
	
	ИерархияГруппировокКолонок = Бланк.ИерархияГруппировокКолонок;
	ИерархияГруппировокСтрок   = Бланк.ИерархияГруппировокСтрок;
	
	ОпределитьТекущийРежимРаботы(Бланк);
	
	Если НЕ РежимРасшифровки Тогда 
		ПрочитатьСохраненныеНастройки();	
	Иначе	
		Элементы.ВариантыТаблицы.Видимость = Ложь;
	КонецЕсли;
		
	Если  ЗначениеЗаполнено(Параметры.ПериодПланированияОтборОкончание) Тогда	
		 ПолучитьРабочийГоризонт(Параметры.ПериодПланированияОтборНачало,Параметры.ПериодПланированияОтборОкончание);
	Иначе	
		 ПериодПланированияОтбор = СводнаяТаблицаУХ.ПолучитьТекущийПериод();
	КонецЕсли;
	
	Если Параметры.Свойство("АналитикиОтбораИсточник") Тогда
		УстановитьОтборыПоПараметрам(Параметры.АналитикиОтбораИсточник,ТаблицыИнтерфейса)		
	КонецЕсли;

	НеявноеИзменениеСодержимого = Истина;
	ЗаполнитьВариантыДиаграммы();		
	ЗаполнитьРежимыРаботы();
	
	СформироватьЗаголовокФормы();
	
	ОбновитьСтрокуКлючевыхПараметров();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
			
	РежимРаботыСтруктура = Ложь;
	
	Элементы.ПолеТабличногоДокументаМакет.ТолькоПросмотр = РежимРаботыСтруктура;
	
	Если ЗначениеЗаполнено(Бланк) Тогда
		СоздатьСводнуюТаблицуСКД(Истина,Истина);
	КонецЕсли;
	
	Элементы.Команды.Доступность = ЗначениеЗаполнено(Бланк);
	
	ОбновитьСтрокуКлючевыхПараметров();
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиОповещенийФормы

&НаКлиенте
Процедура НастрйкаОсейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если  Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
		
	ИзменитьСтруктуруТаблицы(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеКомментарияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если  Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
		
	Обл=Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	ЗаписатьКомментарий(ПолеТабличногоДокументаМакет,Обл.Имя,Результат);	
	Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Примечание.Текст = Результат;
		
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеАналитикЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИзменитьАналитики(Результат);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОтменитьИзменения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда	
		Если РежимОбратноеРаспределение Тогда	
			ОчиститьИзмененные();
			СоздатьСводнуюТаблицуСКД(Истина,Истина);	
			УстановитьРежимРедактированияДанных(Ложь);	
		Иначе			
			ОчиститьИзмененные();
			РасчетПоказателей.ТаблицаИзмененныхПоказателей.Очистить();
			СоздатьСводнуюТаблицуСКД(Истина,Истина);		
			УстановитьРежимРедактированияДанных(Ложь);				
		КонецЕсли;		
	КонецЕсли;	
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ПолеТабличногоДокументаМакет;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Элементы.ГруппаПрименитьОтменить.Доступность = Ложь;
		ЭтаФорма.Закрыть();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьНастройкиПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранятьВариантСтруктуры = Истина;
		ИзмененаСтруктура = Ложь;
		ЭтаФорма.Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда	
		Возврат;
	Иначе	
		СохранятьВариантСтруктуры = Ложь;
		ИзмененаСтруктура = Ложь;
		ЭтаФорма.Закрыть();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеПоказателейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если  Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	

	Для Каждого Область Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл
		ИзменитьПоказателиСервер(Область.Имя,Результат);
	КонецЦикла;

	Если НЕ Результат.Режим = "Актуализация" Тогда
		УстановитьРежимРедактированияДанных(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРаспределенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если  Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	ПрименитьИзменения(Результат);	
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ПолеТабличногоДокументаМакет;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВЕксельЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если  Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	

	Попытка
		#Если НЕ ВебКлиент Тогда
						
			Если Результат.СохранятьВФорматеИсточника тогда
				ПолеТабличногоДокументаКопия = ПолеТабличногоДокументаМакет;
			Иначе
				ПолеТабличногоДокументаКопия = Новый ТабличныйДокумент;
				СоздатьСводнуюТаблицуСКД(Ложь, Ложь, Ложь, ПолеТабличногоДокументаКопия);
			КонецЕсли;
						
			Если Результат.ВыриантСохранения = "НовыйФайл" Тогда
				ПолеТабличногоДокументаКопия.Записать(Результат.Каталог+"\"+Результат.СуществующийФайл+".xlsx",ТипФайлаТабличногоДокумента.XLSX);
			ИначеЕсли 	Результат.ВыриантСохранения = "СуществующийФайл" Тогда
				
				ВремФайл = ПолучитьИмяВременногоФайла("xlsx");
				ПолеТабличногоДокументаКопия.Записать(ВремФайл,ТипФайлаТабличногоДокумента.XLSX);				
				СкопироватьЛист(ВремФайл,Результат.ИмяЛиста,Результат.СуществующийФайл,Результат.ИмяЛиста);	
				
			ИначеЕсли 	Результат.ВыриантСохранения = "СуществующийСеанс" Тогда
				
				Excel = ПолучитьCOMОбъект(Результат.Каталог+"\"+Результат.СуществующийФайл+".xlsx", "Excel.Application"); 
				
			КонецЕсли;
			
			СтрокаШаблона = Нстр("ru = 'Файл %1 успешно записан'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда		
				Сообщить(СтрШаблон(СтрокаШаблона, Результат.Каталог + "\" + Результат.СуществующийФайл));
			КонецЕсли;
			
		#Иначе
			//В режиме ВебКлиент файл на клиенте не сохраняем.
		#КонецЕсли
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ОписаниеОшибки());	
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзЕкселяЗавершение(Результат, ДополнительныеПараметры) Экспорт      
	
	Если  Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	Попытка	
		СТ_ЗагрузитьИзЕкселя(Результат.ИмяКниги,Результат.ИмяЛиста);		
		ПрименитьИзменения(Результат);		
		СоздатьСводнуюТаблицуСКД(Истина,Истина);	 
		Элементы.ГруппаПрименитьОтменить.Доступность = Ложь;
		Элементы.ОбновитьДанныеТаблицы.Доступность = Истина;			
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ОписаниеОшибки());	
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоПравилуЗавершение(Результат, ДополнительныеПараметры) Экспорт      
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	АдресТаблицыСобытий = "";
	
	РассчитатьПоправилуСервер(Результат.ПравилоОбработки);
	
	Если Не ПустаяСтрока(АдресТаблицыСобытий) Тогда
		// Были ошибки, отобразим протокол
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("АдресТаблицыСобытий",АдресТаблицыСобытий);
		ОткрытьФорму("Обработка.ОтображениеПротоколируемыхСобытий.Форма.Форма",СтруктураПараметров);
	КонецЕсли;
		
	Если Объект.РежимТрассировки Тогда
		ОткрытьФорму("Обработка.ЗаписьПоказателяСРасчетомЗависимых.Форма.ФормаАнализРасчетов",
		Новый Структура("ВидОтчета,АдресХранилищаДанныхТрассировки",ВидОтчетаОтбор,АдресХранилищаДанныхТрассировки),,Новый УникальныйИдентификатор); 
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КопированиеИПереносЗавершение(Результат, ДополнительныеПараметры) Экспорт      
	
	Если Результат = Неопределено ИЛИ Результат = Ложь Тогда
		Возврат;
	КонецЕсли;	
			
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОтклоненийЗавершение(Результат, ДополнительныеПараметры) Экспорт      
	
	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	СоздатьСводнуюТаблицуСКД(Истина,Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеВариантаНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт      
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	Если Результат.Свойство("ОбновитьВарианты") Тогда
		ПрочитатьСохраненныеВариантыИзХранилища();
	Иначе
		ДобавитьВариантБланка(Результат.Вариант);
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура УдалениеВариантаНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт      
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УдалитьВариантыНастроек(Результат.Варианты);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьЛист(ФайлИсточник,ЛистИсточник,ФайлПриемник,ЛистПриемник)
	
	Excel_Настройки = Неопределено;
	ЕкселПриемник = ОбщегоНазначенияMicrosoftExcelКлиентСерверУХ.Создать(Excel_Настройки);
	Если ЕкселПриемник = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось создать COM-объект Microsoft Excel.'");
	КонецЕсли;
	
	РабочаяКнигаПриемник = ЕкселПриемник.Workbooks.Open(ФайлПриемник);	
	ЕкселПриемник.Visible = Ложь;

	Excel_Настройки = Неопределено;
	ЕкселИсточник = ОбщегоНазначенияMicrosoftExcelКлиентСерверУХ.Создать(Excel_Настройки);
    РабочаяКнигаИсточник = ЕкселПриемник.Workbooks.Open(ФайлИсточник);
	
	
	ЛистШаблона = РабочаяКнигаИсточник.WorkSheets(1); 
	ЛистШаблона.Name =  ЛистПриемник;
	ЛистШаблона.Copy(РабочаяКнигаПриемник.Sheets(1));
	
	РабочаяКнигаПриемник.Save();
	РабочаяКнигаПриемник.Close(-1);
	РабочаяКнигаИсточник.Close(-1);

	
	ЕкселПриемник = Неопределено;
	ЕкселИсточник =Неопределено;
	
КонецПроцедуры	

&НаКлиенте
Процедура СТ_ЗагрузитьИзЕкселя(ИмяКниги,ИмяЛиста)
	
	Excel_Настройки = Неопределено;
	ЕкселПриемник = ОбщегоНазначенияMicrosoftExcelКлиентСерверУХ.Создать(Excel_Настройки);
	Если ЕкселПриемник = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось создать COM-объект Microsoft Excel.'");
	КонецЕсли;
	
	РабочаяКнигаПриемник = ЕкселПриемник.Workbooks.Open(ИмяКниги);	
	ЛистШаблона = РабочаяКнигаПриемник.WorkSheets(ИмяЛиста); 
	
	МассивСтрок = Новый Массив;
	
	#Если ВебКлиент Тогда
		ЦветКнопки = WebЦвета.Бежевый;
	#Иначе	
		ЦветКнопки = WindowsЦвета.Кнопка; 
	#КонецЕсли	
	
	Для мСтрока = ПолеТабличногоДокументаМакет.ФиксацияСверху+1 По ПолеТабличногоДокументаМакет.ВысотаТаблицы Цикл
		МассивЗначений = Новый Массив;
		Для мКолонка = ПолеТабличногоДокументаМакет.ФиксацияСлева+1 По ПолеТабличногоДокументаМакет.ШиринаТаблицы Цикл
			ТекОбластьСТ = ПолеТабличногоДокументаМакет.Область(мСтрока,мКолонка,мСтрока,мКолонка);
			
			
			Если  ТекОбластьСТ.ЦветФона = Новый Цвет(230,255,230) ИЛИ  ТекОбластьСТ.ЦветФона = ЦветКнопки Тогда
				МассивЗначений.Добавить(ТекОбластьСТ.Text);
				Продолжить;
			Иначе	
				
				Если ТипЗнч(ТекОбластьСТ.Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
				
					ТекЗначениеЕкскль = ЛистШаблона.Cells(мСтрока,мКолонка);
					Если СокрЛП(ТекЗначениеЕкскль.Text)<> ТекОбластьСТ.Текст Тогда 
						 МассивЗначений.Добавить(ТекЗначениеЕкскль.Text);
					Иначе	 
						 МассивЗначений.Добавить(ТекОбластьСТ.Text);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		МассивСтрок.Добавить(МассивЗначений);
	КонецЦикла;
	
	
	РабочаяКнигаПриемник.Close(-1);
	РабочаяОбласть = ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ФиксацияСверху+1, ПолеТабличногоДокументаМакет.ФиксацияСлева+1,
	ПолеТабличногоДокументаМакет.ВысотаТаблицы,ПолеТабличногоДокументаМакет.ШиринаТаблицы);
		
	ВставитьЗначенияСервер(РабочаяОбласть.Имя,МассивСтрок,МассивСтрок);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОжиданиеОбновленияДанных()
		
	СтатусВыполнения = ПроверитьСтатусПроцесса();

	//Если РасчетВыполнен Тогда
	//	
	//	СоздатьСводнуюТаблицуСКД(Ложь,Истина);	 		
	//	УстановитьРежимРедактированияДанных(Ложь);
	//	Элементы.ПолеТабличногоДокументаМакет.Доступность =Истина;
	//	ОтключитьОбработчикОжидания("ОжиданиеОбновленияДанных");
	//	Возврат;
	//	
	//КонецЕсли;	
	
	
	Если  СтатусВыполнения=0  Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Возникли ошибки при попытке записи! Подробнее см. журнал регистрации'"));	
		ОтключитьОбработчикОжидания("ОжиданиеОбновленияДанных");
	ИначеЕсли СтатусВыполнения=1 Тогда			
		СоздатьСводнуюТаблицуСКД(Ложь,Истина);	 		
		УстановитьРежимРедактированияДанных(Ложь);
		Элементы.ПолеТабличногоДокументаМакет.Доступность =Истина;
		ОтключитьОбработчикОжидания("ОжиданиеОбновленияДанных");
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура УправлениеСогласованиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = Ложь Тогда
		Возврат;
	КонецЕсли;	
	
	СоздатьСводнуюТаблицуСКД(Ложь,Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ПодборАналитикЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДобавитьАналитикиМассив(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросУдалениеСВложеннымиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеЗаблокированные = Новый ОписаниеОповещения("ВопросУдалениеСЗаблокированнымиЗавершение",ЭтаФорма,ДополнительныеПараметры);
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если ПроверитьЗаблокированныеЯчейки(ДополнительныеПараметры) Тогда
			ПоказатьВопрос(ОповещениеЗаблокированные, НСтр("ru = 'Удаляемая область содержит заблокированные ячейки. Строки с заблокированными ячейками не будут удалены,доступные значения будут очищены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Иначе	
			УдалитьСтрокуАналитикиСервер(ДополнительныеПараметры);
			УстановитьРежимРедактированияДанных(Истина);		
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросУдалениеСзаблокированнымиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УдалитьСтрокуАналитикиСервер(ДополнительныеПараметры);
		УстановитьРежимРедактированияДанных(Истина);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросИзменениеСВложеннымиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		//УдалитьСтрокуАналитикиСервер(ДополнительныеПараметры);
		УстановитьРежимРедактированияДанных(Истина);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеБланкаЗавершение(Результат, ДополнительныеПараметры) Экспорт      
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
			
КонецПроцедуры


#КонецОбласти

&НаКлиенте
Процедура ДобавлениеАналитикиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	
	Если  Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Область = ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	                                                         
	Если ЗначениеЗАполнено(Результат) Тогда
		Область.Значение = Результат;	
		ПолеТабличногоДокументаМакетПриИзмененииСодержимогоОбласти(Элементы.ПолеТабличногоДокументаМакет, Область,Результат);
	КонецЕсли;
	
	
КонецПроцедуры

#Область ОбработчикиКомандРежимаРаботыСДанными

&НаКлиенте
Процедура ОткрытьФакторныйАнализ(Команда)
	
	ВызватьОтчетСценарныйАнализ(,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФакторныйАнализМоделирование(Команда)
	
	ВызватьОтчетСценарныйАнализ(,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОтчетСценарныйАнализ(МассивПоказателей=Неопределено,Моделирование=Ложь) Экспорт
		
	
	ТекущаяОбластьРасшифровка  = ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0];
	Если ТипЗнч(ТекущаяОбластьРасшифровка.Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		Сообщить(НСтр("ru = 'Необходимо выделить область показателя!'"));
		Возврат;	
	КонецЕсли;
	
	Попытка
		ЗначениеЧисло = Число(СтрЗаменить(ТекущаяОбластьРасшифровка.Текст," ",""));
	Исключение	  
		Сообщить(НСтр("ru = 'Необходимо выбрать числовое значение'"));
		Возврат; 
	КонецПопытки;	  
	
	СтруктураПараметров = ПодготовитьПараметрыСценарногоАнализа(ТекущаяОбластьРасшифровка.Расшифровка,ЗначениеЧисло,Моделирование);

	Если СтруктураПараметров = Неопределено Тогда
		
		Сообщить(НСтр("ru = 'Недостаточно параметров для вызова факторного анализа!'"));
		Возврат; 
		
	КонецЕсли;	
	
	ФормаОтчета  = ПолучитьФорму("Отчет.СценарныйАнализ.Форма.ФормаОтчетаУправляемая", СтруктураПараметров);		
			             	
	Если Моделирование Тогда
		
		ФормаОтчета.Заголовок = НСтр("ru = 'Факторный анализ и моделирование'");
		//Оповещение = Новый ОписаниеОповещения("", ЭтотОбъект);
		ФормаОтчета.Открыть();
									
	Иначе
		
		ФормаОтчета.Заголовок = НСтр("ru = 'Сравнительный факторный анализ'");
		ФормаОтчета.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоказатели(Режим)
		
	МассивКодов = Новый Массив;
		
	Для Каждого Область Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл
		
		Если ТипЗнч(Область) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Таблица Тогда
			
			Для ИндС = ПолеТабличногоДокументаМакет.ФиксацияСверху+1 По ПолеТабличногоДокументаМакет.ВысотаТаблицы Цикл
				Для ИндК = ПолеТабличногоДокументаМакет.ФиксацияСлева+1 По ПолеТабличногоДокументаМакет.ШиринаТаблицы Цикл
					ТекОбласть =ПолеТабличногоДокументаМакет.Область(ИндС, ИндК);
					
					Если ТекОбласть.Лево <> ИндК ИЛИ ТекОбласть.Верх <> ИндС Тогда
						Продолжить;
					КонецЕсли; // проверка на корректную отработку объединенных ячеек для исключения дублирования.
					
					Если  ТекОбласть.ЦветФона = Новый Цвет(255,204,0) ИЛИ ТекОбласть.ЦветФона = Новый Цвет(230,255,230)  Тогда //Агрегат			
						Продолжить;
					КонецЕсли;	
					
					МассивКодов.Добавить(ТекОбласть.Расшифровка);					
			
				КонецЦикла;
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		
		Для ИндС = Область.Верх По Область.Низ Цикл
			Для ИндК = Область.Лево По Область.Право Цикл
				ТекОбласть =ПолеТабличногоДокументаМакет.Область(ИндС, ИндК);
				
				Если ТекОбласть.Лево <> ИндК ИЛИ ТекОбласть.Верх <> ИндС Тогда
					Продолжить;
				КонецЕсли; // проверка на корректную отработку объединенных ячеек для исключения дублирования.
				
				Если  ТекОбласть.ЦветФона = Новый Цвет(255,204,0) ИЛИ ТекОбласть.ЦветФона = Новый Цвет(230,255,230) Тогда //Агрегат			
					Продолжить;
				КонецЕсли;	
				
				МассивКодов.Добавить(ТекОбласть.Расшифровка);					
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ИзменениеПоказателейЗавершение", ЭтаФорма);

	Если МассивКодов.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Не выделены ячейки с детальными записями.'"));
		Возврат;
	КонецЕсли;

	СтруктураПараметров = ПодготовитьСтруктуруПараметровОбработкиПоказателей(Режим,МассивКодов);
		
	СтруктураПараметров.Вставить("ВидОтчета",ВидОтчетаОтбор);
	СтруктураПараметров.Вставить("АдресСтруктураФильтров",Объект.АдресСтруктураФильтров);
	СтруктураПараметров.Вставить("ТЗКолонокАдрес",Объект.ТЗКолонокАдрес);
    СтруктураПараметров.Вставить("тзДанныеАдрес",Объект.тзДанныеАдрес);
	
	ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаИзмененияПоказателейСводнойТаблицы",СтруктураПараметров 
	, ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьСтруктуруПараметровОбработкиПоказателей(Режим,МассивРасшифровок) 
	
	РабочийОбъект 		= РеквизитФормыВЗначение("Объект");
	СтруктураПараметров = РабочийОбъект.ПодготовитьСтруктуруПараметровОбработкиПоказателей(Режим,МассивРасшифровок);
	
	Возврат СтруктураПараметров;
	
КонецФункции	


&НаКлиенте
Процедура СкопироватьДанныеПоСтроке(Команда)
	
	ВыдОбласть =ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0];
	
	Если ВыдОбласть.Право - ВыдОбласть.Лево<>0 Тогда
		ГраницаОбласти =   ВыдОбласть.Право;
	Иначе	
		ГраницаОбласти =  ПолеТабличногоДокументаМакет.ШиринаТаблицы;
	КонецЕсли;
	
	МассивСтрок = Новый Массив();
	НачальныйИндексКолонки = ВыдОбласть.Лево;
 
	ОбластьДляВставки = ПолеТабличногоДокументаМакет.Область(ВыдОбласть.Верх,ВыдОбласть.Лево,ВыдОбласть.Низ,ГраницаОбласти);
	КодРесурса = "";
	Расшифровка = ПолеТабличногоДокументаМакет.Область(ВыдОбласть.Верх,ВыдОбласть.Лево,ВыдОбласть.Верх,ВыдОбласть.Лево).Расшифровка;
	Если НЕ Расшифровка  = Неопределено Тогда
		СтруктураРасшифровки = ПолучитьРасшифровкуЯчейки(Расшифровка);
		Если СтруктураРасшифровки.Свойство("КодРесурса") Тогда
			 КодРесурса = СтруктураРасшифровки.КодРесурса;
		КонецЕсли;	
		
	КонецЕсли;
	
	
	Для  СтрУ=ВыдОбласть.Верх По ВыдОбласть.Низ Цикл 
		Если  НЕ ПолеТабличногоДокументаМакет.Область(СтрУ,ВыдОбласть.Право,СтрУ,ВыдОбласть.Право).Расшифровка= Неопределено Тогда
			МассивЗначений = Новый Массив();
			Значение = ПолеТабличногоДокументаМакет.Область(СтрУ,ВыдОбласть.Лево,СтрУ,ВыдОбласть.Лево).Текст;
						
			Для ИндК = НачальныйИндексКолонки По ГраницаОбласти Цикл
				
				Область = ПолеТабличногоДокументаМакет.Область(СтрУ,ИндК,СтрУ,ИндК);
				Если  НЕ Область.Расшифровка = Неопределено  Тогда
					МассивЗначений.Добавить(Значение);
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;	
		
		МассивСтрок.Добавить(МассивЗначений);
		
	КонецЦикла;
	
	СкопироватьЗначениеПоКолонкам(ОбластьДляВставки.Имя,МассивСтрок,КодРесурса);
	УстановитьРежимРедактированияДанных(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьДанныеПоКолонке(Команда)
	
	ВыдОбласть =ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0];
	
	Если ВыдОбласть.Низ - ВыдОбласть.Верх<>0 Тогда
		ГраницаОбласти =   ВыдОбласть.Низ;
	Иначе	
		ГраницаОбласти =   ПолеТабличногоДокументаМакет.ВысотаТаблицы;	
	КонецЕсли;
	МассивСтрок = Новый Массив();
	НачальныйИндексСтроки = ВыдОбласть.Верх;	
	
	ОбластьДляВставки = ПолеТабличногоДокументаМакет.Область(ВыдОбласть.Верх,ВыдОбласть.Лево,ГраницаОбласти,ВыдОбласть.Право);
	
	Для  СтрУ=ВыдОбласть.Верх По ГраницаОбласти Цикл 
		Если  НЕ (ПолеТабличногоДокументаМакет.Область(СтрУ,ВыдОбласть.Право,СтрУ,ВыдОбласть.Право).Расшифровка)= Неопределено Тогда
			МассивЗначений = Новый Массив();
			
			Для ИндК =  ВыдОбласть.Лево По ВыдОбласть.Право Цикл
				Значение = ПолеТабличногоДокументаМакет.Область(ВыдОбласть.Верх,ИндК,ВыдОбласть.Верх,ИндК).Текст;
				Область = ПолеТабличногоДокументаМакет.Область(СтрУ,ИндК,СтрУ,ИндК);
				Если  НЕ Область.Расшифровка = Неопределено  Тогда
					МассивЗначений.Добавить(Значение);
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;	
		
		МассивСтрок.Добавить(МассивЗначений);
		
	КонецЦикла;
	
	СкопироватьЗначениеПоКолонкам(ОбластьДляВставки.Имя,МассивСтрок);	
	УстановитьРежимРедактированияДанных(Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура ВставитьИзБуфера(Команда)	
	
	ОбъектКопирования = Новый COMОбъект("htmlfile");
	ДанныеБуфера =ОбъектКопирования.ParentWindow.ClipboardData.GETdata("Text");
	МассивСтрок = Новый Массив;
    МассивЗначений = Новый Массив;		
	Если КодСимвола(Прав(ДанныеБуфера,1)) = 10 И КодСимвола(Прав(ДанныеБуфера,2)) = 13 Тогда	
		 ДанныеБуфера = Лев(ДанныеБуфера,СтрДлина(ДанныеБуфера)-2);	
	КонецЕсли;	
	РазобратьДанныеБУфера(ДанныеБуфера,МассивСтрок,МассивЗначений);
	Для Каждого Область Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл
		ВставитьЗначенияСервер(Область.Имя,МассивСтрок,МассивЗначений);
	КонецЦикла;
	
	УстановитьРежимРедактированияДанных(Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура ПолеТабличногоДокументаМакетПриАктивизацииОбласти(Элемент)

	СтатусЯчейки = "";
	
	Если НЕ ТипЗнч(ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущаяОбласть.Имя ="T" Тогда
		Элементы.ПолеТабличногоДокументаМакет.Редактирование = Ложь;
		Элементы.КомандыРежимаРаботыСДанными.Доступность = Ложь;
		Элементы.КомандыРаботыСРедактированиемЗначений.Доступность = Ложь;
		Элементы.КомандыРаботыСРедактированиемСтрок.Доступность = Ложь;	  
		Элементы.кмДополнительныеКоманды.Доступность =Ложь;
		Возврат;
	КонецЕсли;	
		
	Если ТипЗнч(ПолеТабличногоДокументаМакет.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда			
		Если ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0].Верх <= ПолеТабличногоДокументаМакет.ФиксацияСверху Тогда
			Элементы.ПолеТабличногоДокументаМакет.Редактирование = Ложь;
			Элементы.КомандыРежимаРаботыСДанными.Доступность = Ложь;
		ИначеЕсли ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0].Лево <= ПолеТабличногоДокументаМакет.ФиксацияСлева Тогда	
			Если  ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0].Низ<= ПолеТабличногоДокументаМакет.ВысотаТаблицы Тогда
				Элементы.ПолеТабличногоДокументаМакет.Редактирование = РедактированиеВозможно;
				Элементы.КомандыРежимаРаботыСДанными.Доступность = РедактированиеВозможно;
				Элементы.КомандыРаботыСРедактированиемЗначений.Доступность = Ложь;
				Элементы.КомандыРаботыСРедактированиемСтрок.Доступность = НЕ РежимОбратноеРаспределение И РедактированиеВозможно;	
				Элементы.СкопироватьАналитику.Доступность 	= РедактированиеВозможно;
				Элементы.УдалитьАналитику.Доступность 		= РедактированиеВозможно;
			Иначе	
				Элементы.ПолеТабличногоДокументаМакет.Редактирование = РедактированиеВозможно;
				Элементы.КомандыРежимаРаботыСДанными.Доступность = РедактированиеВозможно;
				Элементы.КомандыРаботыСРедактированиемЗначений.Доступность = Ложь;
				Элементы.КомандыРаботыСРедактированиемСтрок.Доступность = НЕ РежимОбратноеРаспределение И РедактированиеВозможно;
				Элементы.СкопироватьАналитику.Доступность 	= Ложь;
				Элементы.УдалитьАналитику.Доступность 		= Ложь;
			КонецЕсли;		
		ИначеЕсли ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0].Право > ПолеТабличногоДокументаМакет.ШиринаТаблицы 
			ИЛИ  ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0].Низ > ПолеТабличногоДокументаМакет.ВысотаТаблицы Тогда		
			Элементы.ПолеТабличногоДокументаМакет.Редактирование = Ложь;
			Элементы.КомандыРежимаРаботыСДанными.Доступность = Ложь;
			Элементы.КомандыРаботыСРедактированиемЗначений.Доступность = Ложь;
			Элементы.КомандыРаботыСРедактированиемСтрок.Доступность = Ложь;	  
			Элементы.кмДополнительныеКоманды.Доступность =Ложь;
		Иначе	  
			Элементы.ПолеТабличногоДокументаМакет.Редактирование = РедактированиеВозможно;
			Элементы.КомандыРежимаРаботыСДанными.Доступность = РедактированиеВозможно;
			Элементы.КомандыРаботыСРедактированиемЗначений.Доступность = РедактированиеВозможно;
			Элементы.КомандыРаботыСРедактированиемСтрок.Доступность = Ложь;
			Элементы.кмДополнительныеКоманды.Доступность =Истина;		
			Если ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0].Верх= ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0].Низ И 
				ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0].Лево= ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0].Право Тогда
				ТекущаяОбластьТекст = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Текст;		
			Иначе	
				ТекущаяОбластьТекст = Неопределено;
			КонецЕсли;	
		КонецЕсли;	
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.1);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
						
	Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюВставитьПримечание.Доступность = Ложь;
	Если ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0].Верх - ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0].Низ = 0 И 
		ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0].Лево - ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0].Право = 0  Тогда
		Если НЕ ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0].ЦветФона = Новый Цвет(230,255,230) Тогда
			 Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюВставитьПримечание.Доступность = Истина;
		КонецЕсли;				
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРаскрытие(Команда)
		
	СтруктураПараметров = Новый Структура();
	СтруктураАналитикРасшифровок = Новый Структура();	
		
	Область = ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	Если  ТипЗнч(Область.Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		СтруктураПараметров = ПодготовитьСтруктуруПараметров(ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0].Расшифровка);
	Иначе	
		Возврат;
	КонецЕсли;
	ЕстьАналитикиДляРасшифровки = Ложь;
	
	Если СтруктураПараметров = Неопределено Тогда
		 Возврат;
	КонецЕсли;	
	
	СтруктураПараметров.Вставить("ВидОтчета", ВидОтчетаОтбор);
	
	Оповещение = Новый ОписаниеОповещения("НастрйкаШкалыВремениЗавершение", ЭтаФорма);
	
	Если Не СтруктураПараметров = Неопределено Тогда 
		ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаМакетаСводнаяТаблица",СтруктураПараметров,ЭтаФорма,Истина,,,,РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьСтруктуруПараметров(Расшифровка)
	
	РабочийОбъект = РеквизитФормыВЗначение("Объект");
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(Объект.АдресХранилищаДанныеРасшифровки);
	СтруктураАналитик = Новый Структура;
	РабочийОбъект.ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,Расшифровка,,,СтруктураАналитик);	
		
	ТаблицыИнтерфейса =  ПолучитьИзВременногоХранилища(Объект.АдресТаблицИнтерфейса);
	СтруктураФильтров =  ПолучитьИзВременногоХранилища(Объект.АдресСтруктураФильтров);
	ДобавляемыеАналитики = РабочийОбъект.ПолучитьСтруктуруНеобходимыхАналитик(СтруктураАналитик,ТаблицыИнтерфейса);
	
	СтруктураДопФильтров = Новый Структура;
	
	Если ДобавляемыеАналитики.СтруктураНеЗаполненныхСкрытыхАналитик.Количество()=0 Тогда
		 ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Нет доступных аналитик для расшифровки!'"));
		 Возврат Неопределено;
	КонецЕсли;	
	
    Измерения = Новый Структура;
	ТаблицаСтроки = ТаблицыИнтерфейса.ТаблицаСтроки.СкопироватьКолонки();
	ТаблицаКолонки = ТаблицыИнтерфейса.ТаблицаКолонки.Скопировать();
	ТаблицаСтраницы = ТаблицыИнтерфейса.ТаблицаСтраницы.Скопировать();
    ТаблицаДоступныеПоля =  ТаблицыИнтерфейса.ТаблицаДоступныеПоля.Скопировать();
	
	МассивУдаляемыхАналитик = Новый Массив;
	Для Каждого СтрАналитика Из ДобавляемыеАналитики.СтруктураНеЗаполненныхСкрытыхАналитик Цикл	
		НужнаяАналитикаСтрока = ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код","Фильтр_"+СтрАналитика.Ключ))[0];
		Нстр = ТаблицаСтроки.Добавить();
		МассивУдаляемыхАналитик.Добавить(НужнаяАналитикаСтрока);
		ЗаполнитьЗначенияСвойств(Нстр,НужнаяАналитикаСтрока);	
	КонецЦикла;
	
	Для Каждого СтрАналитика Из МассивУдаляемыхАналитик Цикл
		ТаблицаДоступныеПоля.Удалить(СтрАналитика);	
	КонецЦикла;

	Для Каждого Стр Из ТаблицыИнтерфейса.ТаблицаСтроки Цикл 
		Если Стр.Код = "Фильтр_Периоды" Тогда
			 Продолжить;
		КонецЕсли;
		Если СтруктураАналитик.Свойство(СтрЗаменить(Стр.Код,"Фильтр_","")) Тогда
			Если СтруктураАналитик[СтрЗаменить(Стр.Код,"Фильтр_","")]<>Неопределено Тогда
				Нстр = ТаблицаСтраницы.Добавить();
				ЗаполнитьЗначенияСвойств(Нстр,Стр);
				СтруктураДопФильтров.Вставить(Стр.Код, СтруктураАналитик[СтрЗаменить(Стр.Код,"Фильтр_","")]);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	Для Каждого Стр Из ТаблицыИнтерфейса.ТаблицаКолонки Цикл 
		Если Стр.Код = "Фильтр_Периоды" Тогда
			 Продолжить;
		КонецЕсли;
		
		Если СтруктураАналитик.Свойство(СтрЗаменить(Стр.Код,"Фильтр_","")) Тогда
			Если СтруктураАналитик[СтрЗаменить(Стр.Код,"Фильтр_","")]<>Неопределено Тогда
				Нстр = ТаблицаСтраницы.Добавить();
				ЗаполнитьЗначенияСвойств(Нстр,Стр);
				СтруктураДопФильтров.Вставить(Стр.Код, СтруктураАналитик[СтрЗаменить(Стр.Код,"Фильтр_","")]);
				УдСтрока = ТаблицаКолонки.НайтиСтроки(Новый Структура("Код",Стр.Код))[0];
				ТаблицаКолонки.Удалить(УдСтрока);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	
	Для Каждого Стр Из ТаблицыИнтерфейса.ТаблицаСтраницы Цикл 
		Если СтруктураАналитик.Свойство(СтрЗаменить(Стр.Код,"Фильтр_","")) Тогда
			Если СтруктураАналитик[СтрЗаменить(Стр.Код,"Фильтр_","")]<>Неопределено Тогда
				СтруктураДопФильтров.Вставить(Стр.Код, СтруктураАналитик[СтрЗаменить(Стр.Код,"Фильтр_","")]);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	

	Измерения.Вставить("ТаблицаСтроки",ТаблицаСтроки);
	Измерения.Вставить("ТаблицаСтраницы",ТаблицаСтраницы);
	Измерения.Вставить("ТаблицаКолонки",ТаблицаКолонки);
	Измерения.Вставить("ТаблицаДоступныеПоля",ТаблицаДоступныеПоля);
    Измерения.Вставить("СтруктураДопФильтров",СтруктураДопФильтров);
	
	СтруктураПараметров=Новый Структура();
    СтруктураПараметров.Вставить("Бланк",Бланк);	
    СтруктураПараметров.Вставить("ПериодПланированияОтборНачало",ПериодПланированияОтборНачало);	
	СтруктураПараметров.Вставить("ПериодПланированияОтборОкончание",ПериодПланированияОтборОкончание);
	СтруктураПараметров.Вставить("АналитикиОтбораИсточник",ПоместитьВоВременноеХранилище(СтруктураАналитик,Новый УникальныйИдентификатор()));
	СтруктураПараметров.Вставить("Измерения",ПоместитьВоВременноеХранилище(Измерения,Новый УникальныйИдентификатор()));

	СтруктураПараметров.Вставить("РежимРасшифровки",  Истина);
    Если ЗначениеЗаполнено(СтруктураАналитик.Периоды) Тогда
		Если ЗначениеЗаполнено(СтруктураАналитик.ПериодыСвязанныйПериод) Тогда
			СтруктураПараметров.Вставить("ПериодПланированияОтборНачало",СтруктураАналитик.ПериодыСвязанныйПериод);
			СтруктураПараметров.Вставить("ПериодПланированияОтборОкончание",СтруктураАналитик.ПериодыСвязанныйПериод);
		Иначе  	
			ГраничныеПериоды = ПолучитьСвязанныйПериод(СтруктураАналитик.Периоды.СвязанныйПериод);
			СтруктураПараметров.Вставить("ПериодПланированияОтборНачало",ГраничныеПериоды[0].Ссылка);
			СтруктураПараметров.Вставить("ПериодПланированияОтборОкончание",ГраничныеПериоды[1].Ссылка);
		КонецЕсли;  
	КонецЕсли;
	
	Возврат СтруктураПараметров;
		
КонецФункции

&НаКлиенте
Процедура МасштабПриИзменении(Элемент)
	
	ИзмененаСтруктура = Истина;
	СоздатьСводнуюТаблицуСКД(Ложь,Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДиапазон(Команда)
	
	Для Каждого Область Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл
		ОчиститьСодержимоеРаскрытияСервер(Область.Имя);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВДиаграмме(Команда)
	
	РежимДиаграммы = Истина;
	СоздатьСводнуюТаблицуСКД(Ложь,ОбновитьДанные);
    Элементы.КомандыРежимаРаботыСДанными.Видимость = Ложь;
	Элементы.КомандыРежимаДиаграммы.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыДиаграммыПриИзменении(Элемент)
	
	СоздатьСводнуюТаблицуСКД(Ложь,ОбновитьДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВТаблице(Команда)
	
	РежимДиаграммы = Ложь;
	СоздатьСводнуюТаблицуСКД(Истина,ОбновитьДанные);
    Элементы.КомандыРежимаРаботыСДанными.Видимость = Истина;
	Элементы.КомандыРежимаДиаграммы.Видимость = Ложь;

КонецПроцедуры
 
&НаКлиенте
Процедура БланкПриИзменении(Элемент)	
	Если ЗначениеЗаполнено(Бланк)  Тогда
		Если НЕ Бланк = Объект.Бланк Тогда 
			//ЗаписатьПоследниеНастройкиДляСводнойТаблицы();
			ИнициализироватьОбъект();
			УстановитьСостояниеНеИспользовать();
		Иначе	
			ИнициализироватьОбъект();
			УстановитьСостояниеНеИспользовать();
		КонецЕсли;
	Иначе
		ИнициализироватьОбъект();	
	КонецЕсли;
	
	Элементы.Команды.Доступность = ЗначениеЗаполнено(Бланк);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭкземплярОтчета(Команда)
	
	РежимМногопериодныхУоп = Ложь;
	
	Расшифровка = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка;
	Экземпляр = ПолучитьЭкземплярОтчета(Расшифровка,РежимМногопериодныхУоп);
	Если Экземпляр = Неопределено Тогда
		Сообщить(НСтр("ru = 'Не удалось определить экземпляр отчета'"));
	Иначе	 
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Ключ", Экземпляр);
		СтруктураПараметров.Вставить("мТекущаяВалюта", ЭтаФорма["Фильтр_Валюты"]);

		Если РежимМногопериодныхУоп Тогда
			ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаАналитическойТаблицы",СтруктураПараметров); 
		Иначе
			ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаДокументаУправляемая",СтруктураПараметров); 
		КонецЕсли;	
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура РежимНастроекТаблицы(Команда)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Ключ", Бланк);
	ОткрытьФорму("Справочник.БланкиОтчетов.Форма.ФормаМакетаСводнаяТаблица", 
	СтруктураПараметров,,,,,, РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройкиТаблицы(Команда)
		
	Параметры_ = Новый Структура("Бланк,АдресТекущихНастроек,РежимРедактированияСвойств,ИерархияСтрок,ИерархияКолонок,РежимСравненияСБазой", 
	Бланк,Объект.АдресТаблицИнтерфейса,Ложь,Объект.ИерархияГруппировокСтрок,Объект.ИерархияГруппировокКолонок,Объект.РежимСравненияСБазой);
	
	ИзмененыДанные = Истина;
	Оповещение = Новый ОписаниеОповещения("НастрйкаОсейЗавершение", ЭтаФорма);
	
	ОткрытьФорму("ОбщаяФорма.ФормаНастроекСтруктурыСводнойТаблицы", 
	Параметры_,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
	
КонецПроцедуры

&НаКлиенте
Процедура НарисоватьТаблицу(Команда)
		
	Элементы.ФильтрПериод.Скрыть();
	Элементы.ФильтрПериод.Видимость = Ложь;
	Элементы.ФильтрПериод.Заголовок = "";

	СоздатьСводнуюТаблицуСКД(Истина,Истина);	
	СброситьСостояниеНеИспользовать();
	
	ВосстановитьСверткуСтрокКолонок(ПолеТабличногоДокументаМакет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПоляОтбора(Команда)
	
	ИзмененОтбор = Истина;
	УстановитьСостояниеНеИспользовать();	
	ИзмененРакурсДанных = НЕ РакурсДанных.Пустая();
		
КонецПроцедуры

&НаКлиенте
Процедура НепустыеСтроки(Команда)
	
	Элементы.ФормаНепустыеСтроки.Пометка = НЕ Элементы.ФормаНепустыеСтроки.Пометка;
	УправлениеВидимостьюПустыхСтрок(ПолеТабличногоДокументаМакет);
		
КонецПроцедуры

&НаКлиенте
Процедура НепустыеКолонки(Команда)
		
	Элементы.ФормаНепустыеКолонки.Пометка = НЕ Элементы.ФормаНепустыеКолонки.Пометка;
	УправлениеВидимостьюПустыхКолонок(ПолеТабличногоДокументаМакет);
		
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРакурсДанныхНаСервере() 
	
	МаксАналитикОтчета = ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(Объект.ВидОтчета);
	РакурсДанныхОбъект = РакурсДанных.ПолучитьОбъект();
	
	Попытка
		ТаблицаСтраницы = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса).ТаблицаСтраницы;
	Исключение
		Возврат;  
	КонецПопытки;
	
	Для ИндексАналитики = 1 По МаксАналитикОтчета Цикл
		ИндАналитики = Строка(ИндексАналитики);
		
		Если ТаблицаСтраницы.Найти("Фильтр_" + Объект.ВидОтчета["ВидАналитики" + ИндАналитики].Код, "Код") <> неопределено тогда
			РакурсДанныхОбъект["Аналитика" + ИндАналитики] = ЭтаФорма["Фильтр_" + Объект.ВидОтчета["ВидАналитики" + ИндАналитики].Код];
		Иначе
			РакурсДанныхОбъект["Аналитика" + ИндАналитики] = неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		РакурсДанныхОбъект.Записать();
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не удалось записать документ " + РакурсДанных + ": %1'"), ОписаниеОшибки()));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПоляТабличногоДокумента 

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетВыбор(Элемент, Область, СтандартнаяОбработка)
		
	ИнтерактивноеИзменениеСодержимого = Истина;
	
	Если РежимДиаграммы Тогда	
		
		СтандартнаяОбработка = Истина;
		Возврат;
		
	ИначеЕсли РежимОбратноеРаспределение Тогда
		
		Если НЕ Область.ЦветФона = Новый Цвет(255,204,0) Тогда //Агрегат			
			СтандартнаяОбработка = Ложь;		
			Возврат;	
		Иначе	
			Если НЕ ТипЗнч(Область.Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
				СтандартнаяОбработка = Ложь;
				Возврат;			
			КонецЕсли;	  
		КонецЕсли;	
		
	Иначе
		
		Если  НЕ ТипЗнч(Область.Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") И  НЕ ТипЗнч(Область.Расшифровка)=Тип("Структура") Тогда  	
			Если НЕ Область.СодержитЗначение Тогда
				СтандартнаяОбработка = Ложь;
				Возврат;
			КонецЕсли;	
			
		Иначе	
			
			Если Область.Лево <= ПолеТабличногоДокументаМакет.ФиксацияСлева Тогда //Заголовки
				ТипОбласти = Неопределено;
				Редактируется = Ложь;
				ЭтоЭтапПроекта = Ложь;
				КолонкаИмяТипа = "";
				Владелец = Неопределено;
				АдресТЗРасшифровок = "";
				ТекЗначение = РасшифроватьЗаголовок(Область.Расшифровка,ТипОбласти,Редактируется,ЭтоЭтапПроекта,Владелец,КолонкаИмяТипа);
							
				Если Редактируется  Тогда
					СтандартнаяОбработка = Ложь;
					СтруктураАналитик=ПолучитьАналитикиЯчейки(Область.Расшифровка);	
					Оповещение = Новый ОписаниеОповещения("ДобавлениеАналитикиЗавершение", ЭтаФорма);
					Если ЭтоЭтапПроекта Тогда
						Область.СодержитЗначение = Истина;				
						//Область.ТипЗначения = Новый ОписаниеТипов(ТипОбласти);
						СтруктураОтбора = Новый Структура("ПроектЭтапа",СтруктураАналитик.Проекты);
						ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе,МножественныйВыбор,ВыборТолькоЭтапов,Отбор,ТекущаяСтрока,РежимВыбора", Истина, Ложь,Истина,СтруктураОтбора,ТекЗначение,Истина);
						ОткрытьФорму("Справочник.Проекты.ФормаВыбора", ПараметрыФормы,,,,,Оповещение);
						Возврат;
					ИначеЕсли ТипЗнч(ТекЗначение) = Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ") Тогда	
						Область.СодержитЗначение = Истина;				
						//Область.ТипЗначения = Новый ОписаниеТипов(ТипОбласти);
						СтруктураОтбора = Новый Структура("Владелец",Владелец);
						ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе,МножественныйВыбор,ВыборТолькоЭтапов,Отбор,ТекущаяСтрока,РежимВыбора", Истина, Ложь,Истина,СтруктураОтбора,ТекЗначение,Истина);
						ОткрытьФорму("Справочник.ПроизвольныйКлассификаторУХ.ФормаВыбора", ПараметрыФормы,,,,,Оповещение);
						Возврат;	
					Иначе		
						Если СтруктураАналитик.КодРесурса = "Проекты" Тогда		
							ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе,МножественныйВыбор,ВыборТолькоПроектов,Отбор,ТекущаяСтрока,РежимВыбора", Истина, Ложь,Истина,СтруктураОтбора,ТекЗначение,Истина);
							ОткрытьФорму(СтрЗаменить(КолонкаИмяТипа,"Ссылка","")+".ФормаВыбора",ПараметрыФормы,,,,,Оповещение);
							Область.СодержитЗначение = Истина;				
						Иначе
							ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе,МножественныйВыбор,ВыборТолькоПроектов,Отбор,ТекущаяСтрока,РежимВыбора", Истина, Ложь,Ложь,СтруктураОтбора,ТекЗначение,Истина);
							ОткрытьФорму(СтрЗаменить(КолонкаИмяТипа,"Ссылка","")+".ФормаВыбора",ПараметрыФормы,,,,,Оповещение);
							Область.СодержитЗначение = Истина;			
						КонецЕсли;	
					КонецЕсли;	
				Иначе
					
					Если Не ТекЗначение = Неопределено Тогда
						ПоказатьЗначение(,ТекЗначение);			
					КонецЕсли;
					СтандартнаяОбработка = Ложь;
					Возврат;
				КонецЕсли;		
			КонецЕсли;
			
			Если Область.Верх <= ПолеТабличногоДокументаМакет.ФиксацияСверху Тогда //Шапка	
				ТипОбласти = Неопределено;
				Редактируется = Ложь;
				ТекЗначение = РасшифроватьЗаголовок(Область.Расшифровка,ТипОбласти,Редактируется);
				Если Не ТекЗначение = Неопределено Тогда
					ПоказатьЗначение(,ТекЗначение);			
				КонецЕсли;
				СтандартнаяОбработка = Ложь;
				Возврат;			
			КонецЕсли;		
			
			Если Область.ЦветФона = Новый Цвет(230,255,230) Тогда //Вычисляемый
				СтандартнаяОбработка = Ложь;
				//Проверяем на расшифровку по аналиткам
				ПоказатьРаскрытие(Неопределено);	
			КонецЕсли;
			
			#Если ВебКлиент Тогда
				ЦветКнопки = WebЦвета.Бежевый;
			#Иначе	
				ЦветКнопки = WindowsЦвета.Кнопка; 
			#КонецЕсли	
			Если Область.ЦветФона = ЦветКнопки Тогда //Недоступный
				СтандартнаяОбработка = Ложь;
				Возврат;	
			КонецЕсли;
			
			Если НЕ Элементы.ПолеТабличногоДокументаМакет.Редактирование Тогда
				СтандартнаяОбработка = Ложь;
				Возврат;	
			КонецЕсли;	
	
		КонецЕсли;			
	КонецЕсли;	  
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетПриИзмененииСодержимогоОбласти(Элемент, Область,Результат = Неопределено)		
	
	Если  ИнтерактивноеИзменениеСодержимого Тогда		
		Если Область.Лево <= ПолеТабличногоДокументаМакет.ФиксацияСлева  Тогда //Заголовки
			ЗаменитьАналитику(Результат,Область.Верх,Область.Низ,Область.Лево,Область.Право);
			УстановитьРежимРедактированияДанных(Истина);
			ИнтерактивноеИзменениеСодержимого = Ложь;
			Возврат;			
		КонецЕсли;
		
		Если  ТипЗнч(Область.Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных")
			ИЛИ  ТипЗнч(Область.Расшифровка)=Тип("Структура") Тогда
			//Выделена одна ячейка
			Если Область.Лево - Область.Право = 0 И Область.Верх - Область.Низ = 0 Тогда
				ТекстОбласти = Область.Текст;
				СтандартнаяОбработка = Ложь;
				Если ТекстОбласти<>СокрЛП(СтрЗаменить(ТекущаяОбластьТекст," ","")) Тогда
					ВставитьЗначениеПоказателя(Область.Имя,ТекстОбласти);	
				Иначе	
					Возврат;
				КонецЕсли;
	
			Иначе					
				СтандартнаяОбработка = Ложь;
				Возврат;
			КонецЕсли;		
			УстановитьРежимРедактированияДанных(Истина);				
		КонецЕсли;
	
		ИнтерактивноеИзменениеСодержимого = Ложь;
		
	Иначе	//Для обработки нажатия клавиши Del.	
		
		Если Область.Лево <= ПолеТабличногоДокументаМакет.ФиксацияСлева  Тогда //Заголовки
			ЗаменитьОбластьКопией(ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0].Верх,ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0].Лево,
			ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0].Низ,ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0].Право);
			УдалитьСтрокуАналитики(Неопределено);
			Возврат;
		Иначе		
			СтандартнаяОбработка = Ложь;
			ОчиститьСодержимоеРаскрытияСервер(Область.Имя);
			Возврат;
		КонецЕсли;		
	КонецЕсли;	
	
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	Если НЕ ТипЗнч(ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПолеТабличногоДокументаМакет.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		Если ТипЗнч(ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда	
			Если ПолеТабличногоДокументаМакет.ВыделенныеОбласти.Количество() = 1 Тогда
				Если ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0].Верх= ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0].Низ И 
					ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0].Лево= ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0].Право Тогда
					ПолучитьСтатусЯчейки(ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка);		
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЕсли;
	КонецЕсли;
	
	ДанныеРасчета = ОбщегоНазначенияКлиентСерверУХ.РасчетныеПоказателиЯчеек(ПолеТабличногоДокументаМакет, ПолеТабличногоДокументаМакет.ВыделенныеОбласти);
	
	СуммаВыделенныхЯчеек 		= ДанныеРасчета.Сумма;                        
	КоличествоВыделенныхЯчеек 	= ДанныеРасчета.Количество;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура НастрйкаШкалыВремениЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СоздатьСводнуюТаблицуСКД(Истина,ОбновитьДанные);
	
КонецПроцедуры
   
&НаКлиенте
Процедура ПериодПланированияОтборПриИзменении(Элемент)
		
	ИзмененПериод = Истина;
	ПолучитьИнформациюПоСдвигуПериодов();
	УстановитьСостояниеНеИспользовать();
			
КонецПроцедуры

&НаКлиенте
Процедура ТочностьПриИзменении(Элемент)
	
	ИзмененаСтруктура = Истина;
	СоздатьСводнуюТаблицуСКД(Ложь,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеСогласованием(Команда)
	
	Если Не ПроверитьСогласованиеПоРакурсам() Тогда
		
		СтрокаШаблона = Нстр("ru = 'Вид отчета %1 согласуется через экземпляры отчетов'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда				
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Строка(ВидОтчетаОтбор)));
		КонецЕсли;
		
		Возврат;
	КонецЕсли;	
	
	Параметры_ = Новый Структура("Бланк,ПериодПланированияОтборНачало,ПериодПланированияОтборОкончание,Сценарии", 
	Бланк,ПериодПланированияОтборНачало,ПериодПланированияОтборОкончание,ЭтаФорма.Фильтр_Сценарии);

	Оповещение = Новый ОписаниеОповещения("УправлениеСогласованиемЗавершение", ЭтаФорма);
	
	Если ИзмененРакурсДанных тогда
		ЗаписатьРакурсДанныхНаСервере();
		ИзмененРакурсДанных = Ложь;
	КонецЕсли;
		
	ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаУправленияСогласованием", 
	ПодготовитьПараметрыДляВызоваСогласования(),,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура СохраненнаяНастройкаПриИзменении(Элемент)
		
	ПрочитатьНастройкиВарианта(СохраненнаяНастройка);
	
КонецПроцедуры

&НаКлиенте
Процедура СохраненнаяНастройкаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("УдалениеВариантаНастройкиЗавершение", ЭтаФорма);
	Параметры_ = Новый Структура("Режим,ВыбранныеЭлементы","Список",Элементы.СохраненнаяНастройка.СписокВыбора.ВыгрузитьЗначения());
	ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаДиалогаСохраненияНастройки",Параметры_,ЭтаФорма,Истина,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВДопВалютах(Команда)
	
	Элементы.ДопВалюты.Пометка = НЕ ОтображатьСуммыВДопВалютах;
	ОтображатьСуммыВДопВалютах = Элементы.ДопВалюты.Пометка;
	ИзмененаСтруктура = Истина;
	СоздатьСводнуюТаблицуСКД(Истина,Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВставитьПримечание(Команда)
		
	Параметры_ = Новый Структура("ТекстКомментария",ПолеТабличногоДокументаМакет.ТекущаяОбласть.Примечание.Текст);
	Оповещение = Новый ОписаниеОповещения("РедактированиеКомментарияЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаКомментариевУправляемая", 
	Параметры_,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 

КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	
	Если  РежимОбратноеРаспределение Тогда 
		Параметры_ = Новый Структура("Бланк", Бланк);
		Оповещение = Новый ОписаниеОповещения("НастройкаРаспределенияЗавершение", ЭтаФорма);
		ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаВыбораСпособаРаспределения", 
		Параметры_,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 	
	Иначе
		Попытка			
			ЗапуститьВычислениеВФоне();
			УстановитьРежимРедактированияДанных(Ложь);
			Если Объект.РежимТрассировки Тогда
				 ОткрытьФорму("Обработка.ЗаписьПоказателяСРасчетомЗависимых.Форма.ФормаАнализРасчетов",
				 Новый Структура("ВидОтчета,АдресХранилищаДанныхТрассировки",ВидОтчетаОтбор,АдресХранилищаДанныхТрассировки),,Новый УникальныйИдентификатор); 
			КонецЕсли;				
		Исключение
			ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Возникли ошибки при попытке записи! Подробнее см. журнал регистрации'"));
		КонецПопытки;		
	КонецЕсли;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ПолеТабличногоДокументаМакет;
	
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОтменитьИзменения",ЭтаФорма);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'При отмене все несохраненные данные будут потеряны, отменить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВРежимОбратногоРаспределения(Команда)
	
	Если  НЕ РежимОбратноеРаспределение Тогда
		
		РежимОбратноеРаспределение = Истина;	
		Элементы.ПерейтиВРежимОбратногоРаспределения.Заголовок = НСтр("ru = 'Выйти из режима распределения по аналитикам'");
		Элементы.Режим.Заголовок = НСтр("ru = 'Режим: распределение'");
        Элементы.КомандыРаботыСРедактированиемСтрок.Доступность = НЕ РежимОбратноеРаспределение;
		Элементы.СкопироватьДанныеПоСтроке.Доступность = НЕ РежимОбратноеРаспределение;
		Элементы.СкопироватьДанныеПоКолонке.Доступность = НЕ РежимОбратноеРаспределение;
        Элементы.ФильтрПериод.Доступность = НЕ РежимОбратноеРаспределение;
		Элементы.КомандыРаботыСРедактированиемЗначений.Доступность = НЕ РежимОбратноеРаспределение;
		Элементы.РежимУправленияСтатусами.Доступность = НЕ РежимОбратноеРаспределение;
		Элементы.ГруппаДополнительныеКоманды.Доступность = НЕ РежимОбратноеРаспределение;
		
	Иначе	
		
		РежимОбратноеРаспределение = Ложь;	
		Элементы.ПерейтиВРежимОбратногоРаспределения.Заголовок = НСтр("ru = 'Перейти в режим распределения по аналитикам'");
		Элементы.КомандыРаботыСРедактированиемСтрок.Доступность = НЕ РежимОбратноеРаспределение;
		Элементы.СкопироватьДанныеПоСтроке.Доступность = НЕ РежимОбратноеРаспределение;
		Элементы.СкопироватьДанныеПоКолонке.Доступность = НЕ РежимОбратноеРаспределение;
		Элементы.ФильтрПериод.Доступность = НЕ РежимОбратноеРаспределение;
		Элементы.КомандыРаботыСРедактированиемЗначений.Доступность = НЕ РежимОбратноеРаспределение;
		Элементы.РежимУправленияСтатусами.Доступность = НЕ РежимОбратноеРаспределение;
		Элементы.ГруппаДополнительныеКоманды.Доступность = НЕ РежимОбратноеРаспределение;
		
		ОпределитьТекущийРежимРаботы(Бланк);
	КонецЕсли;  
	
	СоздатьСводнуюТаблицуСКД(Истина,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьОперанд(Команда)
	
	ТекущаяОбластьРасшифровка  = ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0];
	ТекстОбласти = ТекущаяОбластьРасшифровка.Текст;
	СтруктураПараметровДляВызоваРасшифровки = РасшифроватьОперандНаСервере(ТекущаяОбластьРасшифровка.Расшифровка,ТекстОбласти);	
	Если СтруктураПараметровДляВызоваРасшифровки = Неопределено Тогда
		 Возврат;
	КонецЕсли;		
	СтруктураПараметровДляВызоваРасшифровки.Вставить("ВсегдаПоказыватьБланкРасшифровки",Истина);
	Если НЕ СтруктураПараметровДляВызоваРасшифровки = Неопределено  Тогда
		ОткрытьФорму("Обработка.РасшифровкаРассчитанныхЗначений.Форма", 
		СтруктураПараметровДляВызоваРасшифровки,ЭтаФорма,,,,, РежимОткрытияОкнаФормы.Независимый); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимУправленияСтатусами(Команда)
	
	РежимСтатусы = Не РежимСтатусы;
	Элементы.ГруппаРежимСтатусы.Видимость = РежимСтатусы;
	
	Элементы.РежимУправленияСтатусами.Пометка = РежимСтатусы;	
	Элементы.ГруппаНастройкиОтображения.Доступность = НЕ РежимСтатусы;
	
	Если РежимСтатусы Тогда
		 УстановитьРежимТолькоЧтение();
	Иначе	
		 ОпределитьТекущийРежимРаботы(Бланк);
	КонецЕсли;	
			
	СоздатьСводнуюТаблицуСКД(Истина,Истина);
				
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВЕксель(Команда)
	
	Параметры_ = Новый Структура("ИмяФайла,ИмяЛиста",ВидОтчетаОтбор,Бланк);	
	Оповещение = Новый ОписаниеОповещения("СохранитьВЕксельЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ДиалогСохраненияВExcel", 
	Параметры_,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзЕкселя(Команда)
	
	Параметры_ = Новый Структура("ИмяФайла,ИмяЛиста",ВидОтчетаОтбор,Бланк);	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзЕкселяЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ДиалогИмпортаИзExcel", 
	Параметры_,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 

КонецПроцедуры

&НаКлиенте
Процедура НастройкаШкалыВремени(Команда)
	
	Параметры_ = Новый Структура("УправлениеПериодом,АдресСтруктураФильтров,АдресТаблицИнтерфейса"
	,ПолучитьТекущийУОП()
	,Объект.АдресСтруктураФильтров
	,Объект.АдресТаблицИнтерфейса);
	
	ИзмененаСтруктура = Истина;
	
	ИзмененыДанные = Истина;
	
	Оповещение = Новый ОписаниеОповещения("НастрйкаШкалыВремениЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаНастройкиШкалыСкользящегоПланирования", 
	Параметры_,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьПоПравилу(Команда)
	
	Параметры_ = Новый Структура("ВидОтчетаОтбор",ВидОтчетаОтбор);	
	Оповещение = Новый ОписаниеОповещения("РассчитатьПоПравилуЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаВыбораПравилаОбработки", 
	Параметры_,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура КопированиеПеренос(Команда)
	
	Параметры_ = Новый Структура;	
	Параметры_.Вставить("ВидОтчета",ВидОтчетаОтбор);
	Параметры_.Вставить("Бланк",Бланк);
	Параметры_.Вставить("ПериодПланированияОтборНачало",ПериодПланированияОтборНачало);
	Параметры_.Вставить("ПериодПланированияОтборОкончание",ПериодПланированияОтборОкончание);
	Параметры_.Вставить("АдресТаблицИнтерфейса",Объект.АдресТаблицИнтерфейса);
    Параметры_.Вставить("АдресСтруктураФильтров",Объект.АдресСтруктураФильтров);
	
	Оповещение = Новый ОписаниеОповещения("КопированиеИПереносЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.КопированиеПоСрезам.Форма.Форма", 
	Параметры_,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура Отклонения(Команда)
	
	Оповещение = Новый ОписаниеОповещения("НастройкаОтклоненийЗавершение", ЭтаФорма);
	СтруктураПараметров = Новый Структура("АдресТаблицИнтерфейса,Бланк,ВидОтчета",Объект.АдресТаблицИнтерфейса,Объект.Бланк,Объект.ВидОтчета);
	ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаВыбораБазыСравнения",СтруктураПараметров,ЭтаФорма,Истина,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьОбщийИтогПоСтрокам(Команда)
	
	Элементы.ВыводитьОбщийИтогПоСтрокам.Пометка = НЕ ВыводитьОбщийИтогПострокам;
	ВыводитьОбщийИтогПострокам = Элементы.ВыводитьОбщийИтогПоСтрокам.Пометка;
	ИзмененаСтруктура = Истина;
	СоздатьСводнуюТаблицуСКД(Ложь,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьОбщийИтогПоКолонкам(Команда)
	
	Элементы.ВыводитьОбщийИтогПоКолонкам.Пометка = НЕ ВыводитьОбщийИтогПоКолонкам;
	ВыводитьОбщийИтогПоКолонкам = Элементы.ВыводитьОбщийИтогПоКолонкам.Пометка;
    СоздатьСводнуюТаблицуСКД(Ложь,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПанельОтборов(Команда)
	
	Элементы.ПанельНастроекСводнойТаблицы.Видимость = Ложь;
	Элементы.УстановитьФильтры.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФильтры(Команда)
	
	Элементы.ПанельНастроекСводнойТаблицы.Видимость = Истина;
	Элементы.УстановитьФильтры.Видимость = Ложь;	 
	
КонецПроцедуры

&НаКлиенте
Процедура РучнойПересчет(Команда)
	 
	 ОбновитьДанные = Ложь;
	 Элементы.РучнойПересчет.Пометка = Истина;
	 Элементы.ВычислятьАвтоматически.Пометка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура СТ_ДополнительныеНастройкиНастройкиОтборПриИзменении(Элемент)
	
	 УстановитьСостояниеНеИспользовать();	 
	 
КонецПроцедуры

Процедура УстановитьСостояниеНеИспользовать()
	
	ОтображениеСостояния = Элементы.ПолеТабличногоДокументаМакет.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'");
	
	Элементы.ПолеТабличногоДокументаМакет.Доступность = Ложь;
	Элементы.КомандыРаботыСРедактированиемЗначений.Доступность = Ложь;
	Элементы.ГруппаДополнительно.Доступность =Ложь;
	Элементы.КомандыРаботыСРедактированиемСтрок.Доступность = Ложь;
	Элементы.ГруппаСтатусы.Видимость = Ложь;
	
	ОбновитьСтрокуКлючевыхПараметров();
	
КонецПроцедуры	

Процедура СброситьСостояниеНеИспользовать()
	
	ОтображениеСостояния = Элементы.ПолеТабличногоДокументаМакет.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Ложь;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = "";
	
	Элементы.ПолеТабличногоДокументаМакет.Доступность = Истина;
	Элементы.КомандыРаботыСРедактированиемЗначений.Доступность = Истина;
	Элементы.ГруппаДополнительно.Доступность =Истина;
	Элементы.КомандыРаботыСРедактированиемСтрок.Доступность = Истина;
	Элементы.ГруппаСтатусы.Видимость = Истина;
	
КонецПроцедуры



#КонецОбласти

#Область РедактированиеСоставаАналитик 

&НаКлиенте
Процедура ДобавитьСтрокуАналитики(Команда)
			
	Область = ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	
	ДобавленнаяОбластьНиз =0;
	
	Результат = "";
	
	ДобавитьСтрокуАналитикиСервер(Область.Расшифровка,Область.Низ,ДобавленнаяОбластьНиз,Ложь,,Результат);
		
	Если Результат = "стСтрокаНеВыбрана" Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Строка отчета не определена. Добавление на текущем уровне недоступно.'"));
		Возврат;	
	КонецЕсли;
	
	Если Результат = "стПустойМакет" Тогда
		Возврат;	
	КонецЕсли;

	Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть = ПолеТабличногоДокументаМакет.Область(ДобавленнаяОбластьНиз,1,ДобавленнаяОбластьНиз,1);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуАналитики(Команда)
			
	МассивУдаляемых = Новый Массив;
	ТекущийУровень 	=  ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ТекущаяОбласть.Верх,1,ПолеТабличногоДокументаМакет.ТекущаяОбласть.Верх,1).Отступ;
	Для Инд=ПолеТабличногоДокументаМакет.ТекущаяОбласть.Верх  По ПолеТабличногоДокументаМакет.ТекущаяОбласть.Низ Цикл
		Уровень = ПолеТабличногоДокументаМакет.Область(Инд,1,Инд,1).Отступ;
		Если Уровень <> ТекущийУровень Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выделить строки одного уровня'"), 10);
			Возврат;
		КонецЕсли;	
		МассивУдаляемых.Добавить(Инд);
	КонецЦикла;	
	
	ОповещениеЗаблокированные = Новый ОписаниеОповещения("ВопросУдалениеСЗаблокированнымиЗавершение",ЭтаФорма,МассивУдаляемых);

	
	Если ПроверитьВложенныеСтроки(МассивУдаляемых[0]) Тогда	
		ОповещениеВложенные = Новый ОписаниеОповещения("ВопросУдалениеСВложеннымиЗавершение",ЭтаФорма,МассивУдаляемых);
		ПоказатьВопрос(ОповещениеВложенные, НСтр("ru = 'Строка содержит подчиненные элементы, удалить все?'"), РежимДиалогаВопрос.ДаНет);	
	Иначе	
		
		Если ПроверитьЗаблокированныеЯчейки(МассивУдаляемых) Тогда
			ПоказатьВопрос(ОповещениеЗаблокированные, НСтр("ru = 'Удаляемая область содержит заблокированные ячейки. Строки с заблокированными ячейками не будут удалены,доступные значения будут очищены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Иначе	
			УдалитьСтрокуАналитикиСервер(МассивУдаляемых);
			УстановитьРежимРедактированияДанных(Истина);	
		КонецЕсли;
			
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьАналитику(Команда)
	
	Область = ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	
	ТекущийУровень 	=  ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ТекущаяОбласть.Верх,1,ПолеТабличногоДокументаМакет.ТекущаяОбласть.Верх,1).Отступ;
	Для Инд=ПолеТабличногоДокументаМакет.ТекущаяОбласть.Верх  По ПолеТабличногоДокументаМакет.ТекущаяОбласть.Низ Цикл
		Уровень = ПолеТабличногоДокументаМакет.Область(Инд,1,Инд,1).Отступ;
		Если Уровень <> ТекущийУровень Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выделить строки одного уровня'"), 10);
			Возврат;
		КонецЕсли;	
	КонецЦикла;	

	ДобавленнаяОбластьНиз =0;
	ДобавитьСтрокуАналитикиСервер(Область.Расшифровка,Область.Низ,ДобавленнаяОбластьНиз,Истина);
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ПолеТабличногоДокументаМакет;
    
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьАналитики(Команда)
			
	Область = ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	
	Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки ИЛИ Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда		
		Возврат;	
	КонецЕсли;	
	
	СтруктураАналитик=ПолучитьАналитикиЯчейки(Область.Расшифровка);	
		
	Если НЕ ЗначениеЗаполнено(СтруктураАналитик.ПоказателиСтрокаОтчета) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Строка отчета не определена. Добавление на текущем уровне недоступно.'"));
        Возврат;
	КонецЕсли;	

	ЕстьАналитикиДляРасшифровки = Ложь;
	
	СписокАналитик = Новый СписокЗначений;
	АдресТЗРасшифровок = "";
	
	КолонкаИмя 	   = "";
	КолонкаИмяТипа = "";
    ЭтоЭтапПроекта = Ложь;
	Владелец = Неопределено;
	
	ПолучитьСтруктуруТЗРасшифровокДляИерархииСтрок(СтруктураАналитик,СписокАналитик,АдресТЗРасшифровок,КолонкаИмя,КолонкаИмяТипа,ЭтоЭтапПроекта,Владелец);	
		
	Если СписокАналитик.Количество() = 0 Тогда
		 Возврат;
	КонецЕсли;
	 		
	Оповещение = Новый ОписаниеОповещения("ПодборАналитикЗавершение", ЭтаФорма);
	   
	Если ЭтоЭтапПроекта Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ПроектЭтапа",СтруктураАналитик.Проекты);
		ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор,ВыборТолькоЭтапов,Отбор", Истина, Истина,Истина,СтруктураОтбора);
	ИначеЕсли КолонкаИмяТипа = "СправочникСсылка.ПроизвольныйКлассификаторУХ" Тогда		
		СтруктураОтбора = Новый Структура("Владелец",Владелец);
		ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе,МножественныйВыбор,РежимВыбора,Отбор", Истина, Истина,Истина,СтруктураОтбора);		
	Иначе	
		ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор,РежимВыбора", Истина, Истина,Истина);
	КонецЕсли;	
	
	
	ОткрытьФорму( СтрЗаменить(КолонкаИмяТипа,"Ссылка","")+".ФормаВыбора", ПараметрыФормы,,,,,Оповещение);

КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуАналитикиСервер(Расшифровка,КоординатаНиз,ДобавленнаяОбластьНиз,Копирование,ВыбранноеЗначение = Неопределено,Результат=Неопределено)
		   		
	РабочийОбъект 		= РеквизитФормыВЗначение("Объект");	
	
	Если Копирование Тогда
		ТекущийМакетОбласти = РабочийОбъект.СкопироватьШаблонНовойОбласти(ПолеТабличногоДокументаМакет,Расшифровка,КоординатаНиз,ДобавленнаяОбластьНиз);
	Иначе	
		ТекущийМакетОбласти = РабочийОбъект.ДобавитьШаблонНовойОбласти(ПолеТабличногоДокументаМакет,Расшифровка,КоординатаНиз,ДобавленнаяОбластьНиз,ВыбранноеЗначение);	
	КонецЕсли;
	
	Если ТекущийМакетОбласти = "стСтрокаНеВыбрана" Тогда
		Результат = ТекущийМакетОбласти;
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекущийМакетОбласти) Тогда
		УстановитьРежимРедактированияДанных(Истина);
	Иначе	
		Результат = "стПустойМакет";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуАналитикиСервер(МассивУдаляемых)
		
	РабочийОбъект = РеквизитФормыВЗначение("Объект");
    РабочийОбъект.УдалитьСтрокиАналитик(ПолеТабличногоДокументаМакет,МассивУдаляемых);		
	
КонецПроцедуры


&НаСервере
Процедура ПолучитьСтруктуруТЗРасшифровокДляИерархииСтрок(СтруктураАналитик,СписокВыбораАналитик,АдресТЗРасшифровок,КолонкаИмя,КолонкаИмяТипа,ЭтоЭтапПроекта=Ложь,Владелец = Неопределено)
		
	РабочийОбъект = РеквизитФормыВЗначение("Объект");
	ТаблицыИнтерфейса = ПолучитьИзВременногоХранилища(Объект.АдресТаблицИнтерфейса);	
	СтруктураАналитикРасшифровок =  ТаблицыИнтерфейса.ТаблицаСтроки.СкопироватьКолонки();
	ДобавляемыеАналитики = РабочийОбъект.ПолучитьСтруктуруНеобходимыхАналитик(СтруктураАналитик,ТаблицыИнтерфейса);
	
	//Расшифровок нет - добавляем текущуюю+все незаполненные.
	СписокВыбораАналитик = Новый СписокЗначений;
	ДобавляемаяТекущаяАналитика = Неопределено;
	
	Если ДобавляемыеАналитики.СтруктураНеЗаполненныхСкрытыхАналитик.Количество() >0 Тогда		
		СписокВыбораАналитик = СтруктураАналитикРасшифровок.ВыгрузитьКолонку("Наименование");
		АдресТЗРасшифровок = ПоместитьВоВременноеХранилище(СтруктураАналитикРасшифровок,Новый УникальныйИдентификатор);	
		Возврат;
	КонецЕсли;

	//Находимся на последнем уровне - смотрим можно ли редактирвать текущую аналитику
	Если ДобавляемыеАналитики.НеиспользованныеОбязательныеАналитики.Количество() = 0 Тогда
		
		СтрокаТекущейАналитики = ТаблицыИнтерфейса.ТаблицаСтроки.НайтиСтроки(Новый Структура("Код","Фильтр_"+СтруктураАналитик.КодРесурса));
		Если СтрокаТекущейАналитики.Количество()=1 Тогда
			Если  СтрокаТекущейАналитики[0].Редактируется Тогда
				нАналитика = СтруктураАналитикРасшифровок.Добавить();
				ЗаполнитьЗначенияСвойств(нАналитика,СтрокаТекущейАналитики[0]);	
				КолонкаИмя = СтрЗаменить(СтруктураАналитикРасшифровок[0].Код,"Фильтр_","");
				КолонкаИмяТипа = СтруктураАналитикРасшифровок[0].ТипСтрока;
				ЭтоЭтапПроекта = СтрокаТекущейАналитики[0].ЭтоЭтапПроекта;
				Владелец       = СтруктураАналитикРасшифровок[0].ТипСубконто;
			КонецЕсли;			
			СписокВыбораАналитик = СтруктураАналитикРасшифровок.ВыгрузитьКолонку("Наименование");
			АдресТЗРасшифровок = ПоместитьВоВременноеХранилище(СтруктураАналитикРасшифровок,Новый УникальныйИдентификатор);	
			Возврат;	
		КонецЕсли;		
	КонецЕсли;	
		
	Для Каждого СтрАналитика Из ТаблицыИнтерфейса.ТаблицаСтроки Цикл
		Если ДобавляемыеАналитики.НеиспользованныеОбязательныеАналитики.Свойство(СтрЗаменить(СтрАналитика.Код,"Фильтр_","")) Тогда
			Если  СтрАналитика.Редактируется Тогда
				нАналитика = СтруктураАналитикРасшифровок.Добавить();
				ЗаполнитьЗначенияСвойств(нАналитика,СтрАналитика);
				СписокВыбораАналитик.Добавить(СтрЗаменить(СтрАналитика.Код,"Фильтр_",""));
				КолонкаИмя = СтрЗаменить(СтруктураАналитикРасшифровок[0].Код,"Фильтр_","");
				КолонкаИмяТипа = СтруктураАналитикРасшифровок[0].ТипСтрока;
                ЭтоЭтапПроекта = СтруктураАналитикРасшифровок[0].ЭтоЭтапПроекта;
				Владелец       = СтруктураАналитикРасшифровок[0].ТипСубконто;
			КонецЕсли;
		КонецЕсли;
		Если НЕ СтруктураАналитик[СтрЗаменить(СтрАналитика.Код,"Фильтр_","")] = Неопределено Тогда
			Если  СтрАналитика.Редактируется Тогда
				ДобавляемаяТекущаяАналитика = СтрАналитика;
				
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;				
	
	
	СписокВыбораАналитик 	= СтруктураАналитикРасшифровок.ВыгрузитьКолонку("Наименование");
	АдресТЗРасшифровок 		= ПоместитьВоВременноеХранилище(СтруктураАналитикРасшифровок,Новый УникальныйИдентификатор);

		
КонецПроцедуры

&НаСервере
Функция ПроверитьВложенныеСтроки(иСтрока)
		
	РабочийОбъект = РеквизитФормыВЗначение("Объект");
	Возврат РабочийОбъект.ПроверитьВложенныеАналитики(ПолеТабличногоДокументаМакет,иСтрока);		
			
КонецФункции

&НаСервере
Функция ПроверитьЗаблокированныеЯчейки(МассивУдаляемых)
		
	РабочийОбъект = РеквизитФормыВЗначение("Объект");
	ЕстьЗаблокированные = Ложь;
	
	Для Каждого Инд Из МассивУдаляемых Цикл
		ЕстьЗаблокированные = РабочийОбъект.ПроверитьЗаблокированныеЯчейки(ПолеТабличногоДокументаМакет,Инд);		
		Если ЕстьЗаблокированные Тогда
			 Возврат ЕстьЗаблокированные;
		КонецЕсли;		
	КонецЦикла;	
		
	Возврат ЕстьЗаблокированные;	
	
КонецФункции

&НаСервере
Процедура ДобавитьАналитикиМассив(Результат)
	
	Область = Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	
	ДобавленнаяОбластьНиз =0;
			
	Если НЕ Результат = НЕопределено Тогда
		
		Для Каждого Стр Из Результат Цикл
			
			КоординатаНиз =  Область.Низ;
			ДобавитьСтрокуАналитикиСервер(Область.Расшифровка,КоординатаНиз,ДобавленнаяОбластьНиз,Ложь,Стр);
				
		КонецЦикла;	
		
	КонецЕсли;	
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ПолеТабличногоДокументаМакет;
	
КонецПроцедуры

#КонецОбласти



#Область СервисныеПроцедурыИФункции 

&НаСервере
Процедура ПрименитьИзменения(Параметры=Неопределено)
	
	Если РежимОбратноеРаспределение Тогда
		РабочийОбъект = РеквизитФормыВЗначение("Объект");
		РабочийОбъект.ЗаполнитьРаспределение(Параметры);		
		ТабИзмененныхДанных = ПолучитьИзВременногоХранилища(Объект.логИзмененныхДанныхАдрес);
		ТабИзмененныхДанных.Очистить();
		УстановитьРежимРедактированияДанных(Ложь);
		СоздатьСводнуюТаблицуСКД(Истина,Истина);	
	Иначе	
		
		ТабИзмененныхДанных = ПолучитьИзВременногоХранилища(Объект.логИзмененныхДанныхАдрес);
		
		РасчетПоказателейОбъект = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
		РасчетПоказателейОбъект.ВидОтчета = Бланк.Владелец;
		РасчетПоказателейОбъект.ВалютаОтображения = ЭтаФорма["Фильтр_Валюты"];
		РасчетПоказателейОбъект.РассчитыватьЗависимые = Истина;	
		РасчетПоказателейОбъект.ТаблицаИзмененныхПоказателей.Загрузить(ТабИзмененныхДанных);
		СводнаяТаблицаУХ.ЗаполнитьВалютыПоРегламенту(РасчетПоказателейОбъект,ТабИзмененныхДанных.Скопировать());
		
		РасчетПоказателейОбъект.ИзменениеСостояний = РежимСтатусы;
		РасчетПоказателейОбъект.ЗаписатьЗначенияТаблицыПоказателей();	
		ТабИзмененныхДанных.Очистить();
	КонецЕсли;
	
	РасчетПоказателей_ = РеквизитФормыВЗначение("РасчетПоказателей");
	РасчетПоказателей_.ТаблицаИзмененныхПоказателей.Очистить();
	ЗначениеВРеквизитФормы(РасчетПоказателей_,"РасчетПоказателей");
	
КонецПроцедуры	

&НаСервере
Процедура ПолучитьСтруктуруТЗРасшифровок(СтруктураАналитик,СписокВыбораАналитик,АдресТЗРасшифровок)
	
	РабочийОбъект = РеквизитФормыВЗначение("Объект");	
	ТаблицыИнтерфейса = ПолучитьИзВременногоХранилища(Объект.АдресТаблицИнтерфейса);		
	СтруктураАналитикРасшифровок =  ТаблицыИнтерфейса.ТаблицаСтроки.СкопироватьКолонки();
	ДобавляемыеАналитики = РабочийОбъект.ПолучитьСтруктуруНеобходимыхАналитик(СтруктураАналитик,ТаблицыИнтерфейса);
	//Расшифровок нет - добавляем текущуюю+все незаполненные.
	СписокВыбораАналитик = Новый СписокЗначений;
	ДобавляемаяТекущаяАналитика = Неопределено;
	
	Если ДобавляемыеАналитики.СтруктураНеЗаполненныхСкрытыхАналитик.Количество() >0 Тогда		
		СписокВыбораАналитик = СтруктураАналитикРасшифровок.ВыгрузитьКолонку("Наименование");
		АдресТЗРасшифровок = ПоместитьВоВременноеХранилище(СтруктураАналитикРасшифровок,Новый УникальныйИдентификатор);	
		Возврат;
	КонецЕсли;
	
	СтрокаТекущейАналитики = ТаблицыИнтерфейса.ТаблицаСтроки.НайтиСтроки(Новый Структура("Код","Фильтр_"+СтруктураАналитик.КодРесурса));
	Если СтрокаТекущейАналитики.Количество()=1 Тогда
		Если  СтрокаТекущейАналитики[0].Редактируется Тогда
			нАналитика = СтруктураАналитикРасшифровок.Добавить();
			ЗаполнитьЗначенияСвойств(нАналитика,СтрокаТекущейАналитики[0]);	
		КонецЕсли;		
		
		СписокВыбораАналитик = СтруктураАналитикРасшифровок.ВыгрузитьКолонку("Наименование");
		АдресТЗРасшифровок = ПоместитьВоВременноеХранилище(СтруктураАналитикРасшифровок,Новый УникальныйИдентификатор);
		Возврат;	
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыФильтры(АдресТаблицИнтерфейса);

    ИнтерфейсСТ = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
	
	МассивНовыхРеквизитов = Новый Массив;
	
	Для Каждого нПоле Из ИнтерфейсСТ.ТаблицаДоступныеПоля Цикл
		Если МассивДобавленныхРеквизитов.НайтиПоЗначению(нПоле.Код)=Неопределено Тогда
			НовыйРеквизит  = Новый РеквизитФормы(нПоле.Код, Новый ОписаниеТипов(нПоле.ТипСтрока), , нПоле.Наименование);
			МассивНовыхРеквизитов.Добавить(НовыйРеквизит);
			МассивДобавленныхРеквизитов.Добавить(нПоле.Код);
		КонецЕсли;	
	КонецЦикла;
	Для Каждого нПоле Из ИнтерфейсСТ.ТаблицаСтроки Цикл
		Если МассивДобавленныхРеквизитов.НайтиПоЗначению(нПоле.Код)=Неопределено Тогда
			НовыйРеквизит  = Новый РеквизитФормы(нПоле.Код, Новый ОписаниеТипов(нПоле.ТипСтрока), , нПоле.Наименование);
			МассивНовыхРеквизитов.Добавить(НовыйРеквизит);
			МассивДобавленныхРеквизитов.Добавить(нПоле.Код);
		КонецЕсли;	
	КонецЦикла;
    Для Каждого нПоле Из ИнтерфейсСТ.ТаблицаКолонки Цикл
		Если МассивДобавленныхРеквизитов.НайтиПоЗначению(нПоле.Код)=Неопределено Тогда
			НовыйРеквизит  = Новый РеквизитФормы(нПоле.Код, Новый ОписаниеТипов(нПоле.ТипСтрока), , нПоле.Наименование);
			МассивНовыхРеквизитов.Добавить(НовыйРеквизит);
			МассивДобавленныхРеквизитов.Добавить(нПоле.Код);
		КонецЕсли;	
	КонецЦикла;
    Для Каждого нПоле Из ИнтерфейсСТ.ТаблицаСтраницы Цикл
		Если нПоле.Код = "Фильтр_Валюты" Тогда
			 Продолжить;
		КонецЕсли;	
		Если МассивДобавленныхРеквизитов.НайтиПоЗначению(нПоле.Код)=Неопределено Тогда
			НовыйРеквизит  = Новый РеквизитФормы(нПоле.Код, Новый ОписаниеТипов(нПоле.ТипСтрока), , нПоле.Наименование);
			МассивНовыхРеквизитов.Добавить(НовыйРеквизит);
			МассивДобавленныхРеквизитов.Добавить(нПоле.Код);
		КонецЕсли;	
	КонецЦикла;

	ИзменитьРеквизиты(МассивНовыхРеквизитов);
    
КонецПроцедуры

&НаСервере
Функция ВставитьЗначениеПоказателя(ИмяОбласти,Значение)
	
	Если РежимОбратноеРаспределение Тогда
		СтруктураРасшифровки = Новый Структура;
		СТ_ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		СТ_ОбработкаОбъект.ВставитьЗначениеВОбласть(ПолеТабличногоДокументаМакет,ИмяОбласти,Значение,ТекущаяОбластьТекст);
		Возврат СтруктураРасшифровки;

	Иначе
		СтруктураРасшифровки = Новый Структура;
		СТ_ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		СТ_ОбработкаОбъект.ВставитьЗначениеВОбласть(ПолеТабличногоДокументаМакет,ИмяОбласти,Значение,ТекущаяОбластьТекст);
		Возврат СтруктураРасшифровки;
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция ПолучитьАналитикиЯчейки(Расшифровка)
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровки);
	СтруктураРасшифровки = Новый Структура;
	РабочийОбъект = РеквизитФормыВЗначение("Объект");
	РабочийОбъект.ПолучитьАналитикиЯчейкиСОтборами(,Расшифровка,,,СтруктураРасшифровки);
	Возврат СтруктураРасшифровки;
	
КонецФункции

&НаСервере
Функция ПолучитьСтатусыЯчейки(Расшифровка)
	
	Если Не ЗначениеЗаполнено(АдресХранилищаДанныеРасшифровки) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Если  НЕ (ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") ИЛИ  ТипЗнч(Расшифровка) = Тип("Структура"))  Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если РежимТолькоЧтение Тогда	
		СтатусЯчейки = Нстр("ru = 'Режим бланка: только чтение;'");	
	КонецЕсли;
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровки);
	СтруктураРасшифровки  = Новый Структура;
	СтруктураОтбораДанных = Новый Структура;
	РабочийОбъект = РеквизитФормыВЗначение("Объект");
	РабочийОбъект.ПолучитьАналитикиЯчейкиСОтборами(,Расшифровка,,,СтруктураРасшифровки);
	
	ТЗДанные  = ПолучитьИзВременногоХранилища(РабочийОбъект.тзДанныеАдрес);
	НарастающийИтог = РабочийОбъект.НарастающийИтог;	
	
	Если НарастающийИтог Тогда
		СтатусЯчейки = СтатусЯчейки + Нстр("ru = 'Нарастающий итог;'");
	КонецЕсли;
	
	Для Каждого сСвойство Из СтруктураРасшифровки Цикл	
		Если НЕ ТзДанные.Колонки.Найти(сСвойство.Ключ)=Неопределено Тогда
			Если сСвойство.Ключ = "Периоды" ИЛИ  сСвойство.Ключ = "ПоказательСсылка" 
				ИЛИ сСвойство.Ключ = "Сценарии" ИЛИ сСвойство.Ключ = "Организации"  ИЛИ сСвойство.Ключ = "Проекты" Тогда
				СтруктураОтбораДанных.Вставить(сСвойство.Ключ,сСвойство.Значение);
			КонецЕсли;		
		КонецЕсли;	
	КонецЦикла;		
	НайденныеСтроки = ТЗДанные.НайтиСтроки(СтруктураОтбораДанных);
    Если НайденныеСтроки.Количество()>0 Тогда
		ТекущееЗначение = НайденныеСтроки[0];
		Если  ТекущееЗначение.ИндексСостояния = 3 Тогда
			СтатусЯчейки = СтатусЯчейки+Нстр("ru = 'Утверждено;'");	
		КонецЕсли;
		Если  ТекущееЗначение.ЗначениеЗаблокировано = 1 Тогда
			СтатусЯчейки = СтатусЯчейки+Нстр("ru = 'Заблокировано;'");
		КонецЕсли;
		Если ТекущееЗначение.Блокировка_Периоды > 0 Тогда
			 СтатусЯчейки = СтатусЯчейки+Нстр("ru = 'Период закрыт;'");
		КонецЕсли;	
	КонецЕсли;
		
	СтатусЯчейки = Лев(СтатусЯчейки,СтрДлина(СтатусЯчейки)-1);
	
	Возврат СтруктураРасшифровки;
			
КонецФункции

//Генерация сводной таблицы по описанию   
&НаСервере  
Процедура СоздатьСводнуюТаблицуСКД(ОбновитьСтруктуру = Истина, Обновить = Истина, СохранятьФормат = Истина, ПолеТабличногоДокументаКопия = Неопределено)
		
	Если ПолеТабличногоДокументаКопия = Неопределено тогда
		ПолеТабличногоДокументаРезультат = ПолеТабличногоДокументаМакет;
	Иначе
		ПолеТабличногоДокументаРезультат = ПолеТабличногоДокументаКопия;
	КонецЕсли;
	
	Если РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.СравнениеСБазой Тогда
		Если ОрганизацииБазаИспользовать И НЕ ЗначениеЗаполнено(ОрганизацияБаза) Тогда
			СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаРезультат, НСтр("ru = 'Не заполнена база по организации!'"));
			Возврат;	
		КонецЕсли;		
		Если СценарииБазаИспользовать И НЕ ЗначениеЗаполнено(СценарииБаза) Тогда
			СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаРезультат, НСтр("ru = 'Не заполнена база по сценарию!'"));
			Возврат;	
		КонецЕсли;	
		Если ПроектыБазаИспользовать И НЕ ЗначениеЗаполнено(ПроектыБаза) Тогда
			СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаРезультат, НСтр("ru = 'Не заполнена база по проекту!'"));
			Возврат;	
		КонецЕсли;		
		Если ПериодыБазаИспользовать И НЕ ЗначениеЗаполнено(ПериодБаза) Тогда
			СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаРезультат, НСтр("ru = 'Не заполнена база по периоду!'"));
			Возврат;	
		КонецЕсли;	
		
	КонецЕсли;
		
	СТ = РеквизитФормыВЗначение("Объект");
	ПрочитатьОтборы();	
	Если НЕ ЗначениеЗаполнено(СТ.АдресТаблицИнтерфейса) Тогда	
		СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаРезультат, НСтр("ru = 'Ошибка настройки состава бланка сводной таблицы. Возможно не выбраны строки или показатели.'"));
		Возврат;
	КонецЕсли;
		
	ОбновитьСтрокуКлючевыхПараметров();
	
	Если  ЕдиницаИзмерения = "" Тогда
		Если  Бланк.ЕдиницаИзмеренияПоУмолчанию = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
			ЕдиницаИзмерения = "Ед";
		ИначеЕсли Бланк.ЕдиницаИзмеренияПоУмолчанию = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
			ЕдиницаИзмерения = "Тыс";	
		ИначеЕсли Бланк.ЕдиницаИзмеренияПоУмолчанию = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
			ЕдиницаИзмерения = "Миллионы";	  
		КонецЕсли;	
	КонецЕсли;   
	
	ТаблицыИнтерфейса = ПолучитьИзВременногоХранилища(Объект.АдресТаблицИнтерфейса);
    СтруктураФильтровИтог = ПолучитьИзВременногоХранилища(Объект.АдресСтруктураФильтров);	
	
	ТаблицыИнтерфейса.ДополнительныеПараметры.Вставить("ВыводитьОбщийИтогПоКолонкам",ВыводитьОбщийИтогПоКолонкам);
	ТаблицыИнтерфейса.ДополнительныеПараметры.Вставить("ВыводитьОбщийИтогПоСтрокам",ВыводитьОбщийИтогПоСтрокам);

		
	ЕстьОтбор = Ложь;
	Для Каждого СтрОтбор Из СТ_ДополнительныеНастройки.Настройки.Отбор.Элементы Цикл
		Если СтрОтбор.Использование Тогда
			ЕстьОтбор = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
		
	СтруктураФильтровИтог.Очистить();
	Для Каждого Страница ИЗ ТаблицыИнтерфейса.ТаблицаСтраницы Цикл	
		СтруктураФильтровИтог.Вставить(Страница.Код,ЭтаФорма[Страница.Код]);
	КонецЦикла;
		
	Элементы.Команды.Доступность = Истина;
	Элементы.ПолеТабличногоДокументаМакет.Доступность = Истина;
	Элементы.ГруппаСтатусы.Доступность = Истина; 
	
	СтруктураФильтровИтог.Вставить("ГоризонтДатаНачала",ПериодПланированияОтборНачало.ДатаНачала);
	СтруктураФильтровИтог.Вставить("ГоризонтДатаОкончания",ПериодПланированияОтборОкончание.ДатаНачала);
		
	Если СохранятьФормат = Истина тогда
		СТ.Масштаб = ЕдиницаИзмерения;
		СТ.Точность = Точность;
	Иначе
		СТ.Масштаб = "Ед";
		СТ.Точность = 5;
	КонецЕсли; 
		
	СТ.РежимДиаграммы = РежимДиаграммы;
	СТ.РежимСтатусы = РежимСтатусы;
	СТ.ВариантыДиаграммы = ?(ВариантыДиаграммы=Неопределено,ТипДиаграммы.ГистограммаОбъемная,ВариантыДиаграммы);
	СТ.ВыбранныйГоризонт = ПериодПланированияОтборНачало;
	СТ.ВариантОтображенияРесурсов = ВариантОтображенияРесурсов;
	СТ.Периодичность = Бланк.Периодичность;
	СТ.РежимОбратногоРаспределения = РежимОбратноеРаспределение;
	СТ.ВидОтчета = ВидОтчетаОтбор;
	СТ.ИзмененОтбор = ИзмененОтбор ;
	СТ.ОтображатьСуммыВДопВалютах = ОтображатьСуммыВДопВалютах;
	СТ.ИерархияГруппировокСтрок = ИерархияГруппировокСтрок;
	СТ.ИерархияГруппировокКолонок = ИерархияГруппировокКолонок;
		
	Попытка
		СТ.ПолучитьИтоговыйМакет(ПолеТабличногоДокументаРезультат,Бланк,ПериодПланированияОтбор,СтруктураФильтровИтог,ОбновитьСтруктуру,,Обновить,СТ_ДополнительныеНастройки);
	Исключение
		
		СтрокаШаблона = Нстр("ru = 'Ошибка формирования таблицы: %1'");
		
		ТекстОшибки = "";
		Если Не ПустаяСтрока(СтрокаШаблона) тогда								
			ТекстОшибки = СтрШаблон(СтрокаШаблона, ОписаниеОшибки());
		КонецЕсли;
		
		СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаРезультат, ТекстОшибки);
		Возврат;		
	КонецПопытки;
		
	АдресХранилищаДанныеРасшифровки =  СТ.АдресХранилищаДанныеРасшифровки;
	
	АдресТаблицИнтерфейса =   Объект.АдресТаблицИнтерфейса;
	АдресСхемыНабораКолонок = Объект.ТЗКолонокАдрес;
	АдресСхемыНабораСтрок =   Объект.ТЗСтрокАдрес;
 	
	ОбновитьСтруктуру = Ложь;
	ИзмененыДанные = Ложь;
	ИзмененПериод = Ложь;
	ИзмененОтбор = Ложь;
   	
	Элементы.КомандыРежимаРаботыСДанными.Доступность = Истина;
	Элементы.ОбновитьДанныеТаблицы.Доступность = НЕ Элементы.ГруппаПрименитьОтменить.Доступность;	
	ЗначениеВРеквизитФормы(СТ,"Объект");
	
	Если РежимСтатусы Тогда
		 Элементы.ПолеТабличногоДокументаМакет.Редактирование = Ложь;
	КонецЕсли;	
		
	ПоследняяСохраненнаяНастройка = СохраненнаяНастройка;
	
КонецПроцедуры

&НаСервере
Процедура РазобратьДанныеБуфера(ДанныеБуфера,МассивСтрок,МассивЗначений)
		     	
	МассивСтрок = СтроковыеФункцииКлиентСерверУХ.РазложитьСтрокуВМассивПодстрок(ДанныеБуфера,Символ(13));	
	Для Каждого Стр Из МассивСтрок Цикл
		Если Лев(Стр,1) = Символ(10) Тогда
			МассивЗначенийСтроки =  СтроковыеФункцииКлиентСерверУХ.РазложитьСтрокуВМассивПодстрок(Прав(Стр,СтрДлина(Стр)-1),"	");
		Иначе
			МассивЗначенийСтроки =  СтроковыеФункцииКлиентСерверУХ.РазложитьСтрокуВМассивПодстрок(Стр,"	");
		КонецЕсли;
		МассивЗначений.Добавить(МассивЗначенийСтроки);
	КонецЦикла;
		 		
КонецПроцедуры	

&НаСервере
Процедура ОчиститьСодержимоеРаскрытияСервер(ИмяОбласти)
	
	РабочийОбъект = РеквизитФормыВЗначение("Объект");
	ФлИзменений = Ложь;
	РабочийОбъект.ВставитьЗначениеВОбласть(ПолеТабличногоДокументаМакет,ИмяОбласти,Неопределено,ТекущаяОбластьТекст,,,,ФлИзменений);
		
	Если ФлИзменений Тогда
		УстановитьРежимРедактированияДанных(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПоказателиСервер(ИмяОбласти,Параметры)
	
	РабочийОбъект = РеквизитФормыВЗначение("Объект");
	Если Параметры.Режим = "Актуализация" Тогда
		Параметры.Вставить("ПериодДействия",ПериодПланированияОтборОкончание);
		РабочийОбъект.СоздатьКорректировку_Актуализаци(ПолеТабличногоДокументаМакет,ИмяОбласти,Параметры); 
		СоздатьСводнуюТаблицуСКД(Истина,Истина);
	Иначе 	 
		РабочийОбъект.ИзменитьЗначенияВОбласти(ПолеТабличногоДокументаМакет,ИмяОбласти,Параметры);
	КонецЕсли;	
			
КонецПроцедуры


&НаСервере
Процедура ВставитьЗначенияСервер(ИмяОбласти,МассивСтрок,МассивЗначений)
	
	РабочийОбъект = РеквизитФормыВЗначение("Объект");
	РабочийОбъект.ВставитьЗначениеВОбласть(ПолеТабличногоДокументаМакет,ИмяОбласти,МассивЗначений);
	
КонецПроцедуры


&НаСервере
Процедура СкопироватьЗначениеПоКолонкам(ИмяОбласти,МассивЗначений,КодРесурса="")
	
	РабочийОбъект = РеквизитФормыВЗначение("Объект");
	РабочийОбъект.ВставитьЗначениеВОбласть(ПолеТабличногоДокументаМакет,ИмяОбласти,МассивЗначений,,,,КодРесурса);
	   
КонецПроцедуры
      
&НаСервере
Процедура ПолучитьПараметрыПоПроекту(Проект,Сценарий,ВидБюджета,СтандартнаяОбработка)
	
	
	Если ВидБюджета = "БДР" Тогда
		ВидОтчетаОтбор = Константы.ИтоговыйВидОтчетаБДР.Получить();
		Бланк = Константы.ФормаДляПроектовБДР.Получить();
	ИначеЕсли ВидБюджета = "БДДС" Тогда
		ВидОтчетаОтбор = Константы.ИтоговыйВидОтчетаБДДС.Получить();
		Бланк = Константы.ФормаДляПроектовБДДС.Получить();	
	ИначеЕсли ВидБюджета = "БюджетРесурсов" Тогда
        ВидОтчетаОтбор = Константы.ИтоговыйВидОтчетаРесурсы.Получить();
		Бланк = Константы.ФормаДляПроектовРесурсы.Получить();	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Бланк) Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Не удалось определить форму отображения по умолчанию.'"));
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;

	
	Если ЗначениеЗаполнено(Сценарий) Тогда
		Если Сценарий.Периодичность <>Бланк.Периодичность Тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Периодичность бланка не совпадает с периодичностью сценария!'"));
			СтандартнаяОбработка = Ложь;
			Возврат;
			
		КонецЕсли;	 
	КонецЕсли;
	
	ОтборПроект = Проект;
	АтрибутыПроекта = Справочники.Проекты.АтрибутыПроекта(Проект,Справочники.Сценарии.План);  
	ОтборДатаНачалаПериода = АтрибутыПроекта.ДатаНачала;
	ОтборДатаОкончанияПериода = АтрибутыПроекта.ДатаОкончания;
	Если ОтборДатаНачалаПериода = Дата(1,1,1) ИЛИ ОтборДатаОкончанияПериода= Дата(1,1,1) Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Не удалось определить плановую длительность проекта'"));
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;	  
	
		
	//Элементы.ФильтрПериод.Видимость = Ложь;
    Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Периоды.Ссылка Как ПериодПланированияОтборНачало,
	|   NULL КАК ПериодПланированияОтборОкончание
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	Периоды.ДатаНачала = &ДатаНачала
	|	И Периоды.Периодичность = &Периодичность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|   NULL,
	|	Периоды.Ссылка
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	Периоды.Периодичность = &Периодичность
	|	И Периоды.ДатаНачала = &ДатаОкончания";
	
	Если Бланк.Периодичность = Перечисления.Периодичность.Месяц Тогда
		Запрос.УстановитьПараметр("ДатаНачала",НачалоМесяца(ОтборДатаНачалаПериода));
		Запрос.УстановитьПараметр("ДатаОкончания",НачалоМесяца(ОтборДатаОкончанияПериода));
	ИначеЕсли Бланк.Периодичность = Перечисления.Периодичность.Квартал Тогда
		Запрос.УстановитьПараметр("ДатаНачала",НачалоКвартала(ОтборДатаНачалаПериода));
		Запрос.УстановитьПараметр("ДатаОкончания",НачалоКвартала(ОтборДатаОкончанияПериода));	
	ИначеЕсли  Бланк.Периодичность = Перечисления.Периодичность.год Тогда
		Запрос.УстановитьПараметр("ДатаНачала",НачалоГода(ОтборДатаНачалаПериода));
		Запрос.УстановитьПараметр("ДатаОкончания",НачалоГода(ОтборДатаОкончанияПериода));	
	Иначе	
		Запрос.УстановитьПараметр("ДатаНачала",(ОтборДатаНачалаПериода));
		Запрос.УстановитьПараметр("ДатаОкончания",(ОтборДатаОкончанияПериода));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Периодичность",Бланк.Периодичность);
    
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ПериодПланированияОтборНачало) Тогда
			 ПериодПланированияОтборНачало =  Выборка.ПериодПланированияОтборНачало
		КонецЕсли;
	    Если ЗначениеЗаполнено(Выборка.ПериодПланированияОтборОкончание) Тогда
			 ПериодПланированияОтборОкончание =  Выборка.ПериодПланированияОтборОкончание
		КонецЕсли;

	КонецЦикла;
		
	//ПериодПланированияОтбор = Справочники.Периоды.ПустаяСсылка();
		
КонецПроцедуры	

&НаСервере
Процедура УстановитьПустойБланк()	
	
	Бланк = Справочники.БланкиОтчетов.ПустаяСсылка();
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьЭкземплярОтчета(Расшифровка,РежимМногопериодныхУоп)
		
	РабочийОбъект = РеквизитФормыВЗначение("Объект");
	ЭкземплярСсылка = РабочийОбъект.ПолучитьЭкземплярОтчета(Расшифровка,ВидОтчетаОтбор,РежимМногопериодныхУоп);
	
	Возврат ЭкземплярСсылка;
	
КонецФункции

&НаСервере
Функция ПолучитьРасшифровкуЯчейки(Расшифровка)
		
	РабочийОбъект = РеквизитФормыВЗначение("Объект");
	//АналитикиОтбораИсточник = РабочийОбъект.ПолучитьРасшифровкуТаблицы(Расшифровка);
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(РабочийОбъект.АдресТаблицИнтерфейса);
	АналитикиОтбораИсточник = Новый Структура;
	//РабочийОбъект.СоздатьОписаниеСтруктурыПолей(АналитикиОтбораИсточник,СтруктураТаблицИнтерфейса.ДоступныеАналитики);
	РабочийОбъект.ПолучитьАналитикиЯчейкиСОтборами(,Расшифровка,,,АналитикиОтбораИсточник);	
		
	Возврат АналитикиОтбораИсточник;
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыСценарногоАнализа(Расшифровка,ИсходноеЗначение,Моделирование)
		
	ТекущееПравилоОбработки = Неопределено;
	СоответствиеНастроек = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(ВидОтчетаОтбор);	
	СоответствиеНастроек.Свойство("ПравилоОбработки", ТекущееПравилоОбработки);

	РабочийОбъект = РеквизитФормыВЗначение("Объект");
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(РабочийОбъект.АдресТаблицИнтерфейса);
	
	АналитикиОтбораИсточник = Новый Структура;
	РабочийОбъект.ПолучитьАналитикиЯчейкиСОтборами(,Расшифровка,,,АналитикиОтбораИсточник);
	
	ПоказательСсылка = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.НайтиСтроки(Новый Структура("КолонкаФорматированныйКод,Строка",АналитикиОтбораИсточник.КодРесурса,АналитикиОтбораИсточник.ПоказателиСтрокаОтчета));
	
	ИсходныйПоказатель = Неопределено;
	Если ПоказательСсылка.Количество()=1 Тогда
		 ИсходныйПоказатель = ПоказательСсылка[0].Показатель;
	КонецЕсли;	
	
	ЭкземплярСсылка = РабочийОбъект.ПолучитьЭкземплярОтчета(Расшифровка,ВидОтчетаОтбор);
	Если ЭкземплярСсылка = Неопределено Тогда
		 Возврат Неопределено;
	КонецЕсли;
	
	ЭкземплярОбъект=ЭкземплярСсылка.ПолучитьОбъект();
	ЭкземплярОбъект.ПравилоОбработки =  ТекущееПравилоОбработки;
	
	Если НЕ ЭкземплярОбъект.ДанныеПараметрикиАктуальны Тогда
		УправлениеОтчетамиУХ.ПодготовитьДанныеПараметрическойНастройки(ЭкземплярОбъект);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	Если НЕ АналитикиОтбораИсточник.Свойство("Показатели") 
		ИЛИ НЕ АналитикиОтбораИсточник.Свойство("Сценарии") 
		ИЛИ НЕ АналитикиОтбораИсточник.Свойство("Валюты")
		ИЛИ НЕ АналитикиОтбораИсточник.Свойство("Организации")
		ИЛИ НЕ АналитикиОтбораИсточник.Свойство("Периоды")
		ИЛИ НЕ АналитикиОтбораИсточник.Свойство("Проекты")
		Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ВидОтчета", ВидОтчетаОтбор);
	СтруктураПараметров.Вставить("Сценарий", АналитикиОтбораИсточник.Сценарии);
	СтруктураПараметров.Вставить("ПериодОтчета", АналитикиОтбораИсточник.ПериодыСвязанныйПериод);
	СтруктураПараметров.Вставить("ОсновнаяВалюта", АналитикиОтбораИсточник.Валюты);
	СтруктураПараметров.Вставить("Организация", АналитикиОтбораИсточник.Организации);
	СтруктураПараметров.Вставить("Проект", АналитикиОтбораИсточник.Проекты);
	СтруктураПараметров.Вставить("ДокументСсылка", ЭкземплярСсылка);
	СтруктураПараметров.Вставить("ИсходныйПоказатель",ИсходныйПоказатель);
	СтруктураПараметров.Вставить("РежимАнализаЧувствительности", Моделирование);
	СтруктураПараметров.Вставить("ИсходноеЗначениеЦелевого", ИсходноеЗначение);
	СтруктураПараметров.Вставить("МаксАналитикОтчета", 0);
	
	Для Индекс=1 По 5 Цикл		
		Если   ЗначениеЗаполнено(ЭкземплярСсылка["Аналитика"+Индекс]) Тогда	
			СтруктураПараметров.Вставить("Аналитика"+Индекс, ЭкземплярСсылка["Аналитика"+Индекс]);	
		КонецЕсли;	
	КонецЦикла;

	тСтруктураРасчета = УправлениеОтчетамиУХ.ПолучитьПараметрыРасчетаПоказателя(СтруктураПараметров,ИсходныйПоказатель);
	
	ЭкземплярОбъект.ПравилоОбработки =  тСтруктураРасчета.ПравилоОбработки;
	
	ЭкземплярОбъект.ИнициализироватьКонтекст();

	ЭкземплярОбъект.СформироватьСтруктуруПараметров();

	АдресВременногоХранилища=ПоместитьВоВременноеХранилище(ЭкземплярОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),Новый УникальныйИдентификатор);
	СтруктураПараметров.Вставить("ИсходныйДокумент", АдресВременногоХранилища);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура ИзменитьСтруктуруТаблицы(Параметр)
	
	Если Не ЗначениеЗаполнено(Параметр) Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураТаблиц = ПолучитьИзВременногоХранилища(Параметр.СтруктураТаблиц);
	РабочийОбъект = РеквизитФормыВЗначение("Объект");
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(РабочийОбъект.АдресТаблицИнтерфейса);
	СтруктураТаблицИнтерфейса.ТаблицаСтроки   = СтруктураТаблиц.ТаблицаСтроки.Скопировать();
	СтруктураТаблицИнтерфейса.ТаблицаКолонки  = СтруктураТаблиц.ТаблицаКолонки.Скопировать();
	СтруктураТаблицИнтерфейса.ТаблицаСтраницы = СтруктураТаблиц.ТаблицаСтраницы.Скопировать();
	СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля = СтруктураТаблиц.ТаблицаДоступныеПоля.Скопировать();
	
	ИерархияГруппировокСтрок 	= Параметр.ИерархияСтрок;
	ИерархияГруппировокКолонок 	= Параметр.ИерархияКолонок;
	
	РабочийОбъект.АдресТаблицИнтерфейса = ПоместитьВоВременноеХранилище(СтруктураТаблицИнтерфейса,новый УникальныйИдентификатор);		
	РабочийОбъект.СоздатьПоляФильтров(ЭтаФорма,Бланк);
	
	ЗначениеВРеквизитФормы(РабочийОбъект,"Объект");
	СоздатьСводнуюТаблицуСКД(Истина,Истина);
	
	ЕстьРедактируемыеАналитики = Ложь;
	Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаСтроки Цикл
		Если Стр.Редактируется Тогда
			ЕстьРедактируемыеАналитики = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	Элементы.КомандыРаботыСРедактированиемСтрок.Доступность = ЕстьРедактируемыеАналитики;
	Элементы.кмКомандыРаботыСРедактированиемСтрок.Доступность = ЕстьРедактируемыеАналитики;

	ОпределитьТекущийРежимРаботы(Бланк);
		
	ИзмененаСтруктура = Истина;
	
КонецПроцедуры	

&НаСервере
Процедура ИнициализироватьОбъект(СтандартныеНастройки=Ложь)
	
	Если ЗначениеЗаполнено(Бланк) Тогда
		
		ВидОтчетаОтбор = Бланк.Владелец;
		
		Точность = Бланк.УровеньТочностиПоУмолчанию;
		Если  Бланк.ЕдиницаИзмеренияПоУмолчанию=Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
			ЕдиницаИзмерения = "Ед"
		ИначеЕсли Бланк.ЕдиницаИзмеренияПоУмолчанию=Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
			ЕдиницаИзмерения = "Тыс"
		ИначеЕсли Бланк.ЕдиницаИзмеренияПоУмолчанию=Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
			ЕдиницаИзмерения = "Миллионы"
		КонецЕсли;	 
		
		СТ = Обработки.СводнаяТаблица.Создать();		
		СТ.РежимДиаграммы = ?(СтандартныеНастройки,Ложь,РежимДиаграммы);
		СТ.РежимСтатусы = ?(СтандартныеНастройки,Ложь,РежимСтатусы);
		СТ.РежимОбратногоРаспределения = ?(СтандартныеНастройки,Ложь,РежимОбратноеРаспределение);
		СТ.ВариантОтображенияРесурсов = "ОбычныйИтог";
		СТ.ОтборПроект = ОтборПроект;
		СТ.ОтборСценарий = ОтборСценарий;
		СТ.НазначениеТаблицы = Перечисления.НазначенияИспользованияСводнойТаблицы.Данные;	
		СТ.ИнициализироватьКонтекст(Бланк);
		СТ.ВидОтчета = ВидОтчетаОтбор;
		
		ИерархияГруппировокКолонок = Бланк.ИерархияГруппировокКолонок;
		ИерархияГруппировокСтрок = Бланк.ИерархияГруппировокСтрок;
		
		Если НЕ ЗначениеЗаполнено(СТ.АдресТаблицИнтерфейса) Тогда	
			ЗначениеВреквизитФормы(СТ,"Объект");
			Возврат;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(РежимРаботы) Тогда	
			Объект.РежимРаботы 	  = Перечисления.РежимыРаботыСводнойТаблицы.Основной;
			ЗаполнитьРежимыРаботы();	
		КонецЕсли;
		Если СтандартныеНастройки Тогда
			РежимРаботы =    Перечисления.РежимыРаботыСводнойТаблицы.Основной;
			Объект.РежимРаботы 	  = Перечисления.РежимыРаботыСводнойТаблицы.Основной; 
			РежимРаботыПриИзмененииСервер();
			ВыводитьОбщийИтогПоСтрокам = Ложь;
			Элементы.ВыводитьОбщийИтогПоСтрокам.Пометка = Ложь;
		КонецЕсли;	
		
		СТ.РежимРаботы = Объект.РежимРаботы;
		
		ТаблицыИнтерфейса =  ПолучитьИзВременногоХранилища(СТ.АдресТаблицИнтерфейса);
		СтруктураДопФильтров = ПолучитьИзВременногоХранилища(СТ.АдресСтруктураФильтров);
		
		Если  Параметры.Свойство("Измерения") Тогда
			Измерения_ = ПолучитьИзВременногоХранилища(Параметры.Измерения);		
			ТаблицыИнтерфейса.Вставить("ТаблицаСтроки",Измерения_.ТаблицаСтроки);
			ТаблицыИнтерфейса.Вставить("ТаблицаСтраницы",Измерения_.ТаблицаСтраницы);
			ТаблицыИнтерфейса.Вставить("ТаблицаКолонки",Измерения_.ТаблицаКолонки);
			ТаблицыИнтерфейса.Вставить("ТаблицаДоступныеПоля",Измерения_.ТаблицаДоступныеПоля);
			СтруктураДопФильтров = СтруктураДопФильтров;
			//Измерения.Вставить("СтруктураДопФильтров",СтруктураДопФильтров);
		КонецЕсли;
		
		ТаблицаСтраницы = ТаблицыИнтерфейса.ТаблицаСтраницы;
		
		СоздатьРеквизитыФильтры(СТ.АдресТаблицИнтерфейса);
		СТ.СоздатьПоляФильтров(ЭтаФорма,Бланк);
		ЗначениеВреквизитФормы(СТ,"Объект");
		
		РасчетПоказателей_ = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
		РасчетПоказателей_.ВидОтчета = ВидОтчетаОтбор;
		РасчетПоказателей_.ВалютаОтображения = Константы.ВалютаУправленческогоУчета.Получить();
		РасчетПоказателей_.РассчитыватьЗависимые = Истина;	
		
		ЗначениеВреквизитФормы(РасчетПоказателей_,"РасчетПоказателей");
		
		ЕстьРедактируемыеАналитики = Ложь;
		Для Каждого Стр Из ТаблицыИнтерфейса.ТаблицаСтроки Цикл
			Если Стр.Редактируется Тогда
				ЕстьРедактируемыеАналитики = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		Элементы.КомандыРаботыСРедактированиемСтрок.Доступность = ЕстьРедактируемыеАналитики;
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Периодичность", Бланк.Периодичность);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		
		Элементы.ПериодПланированияОтборНачало.ПараметрыВыбора = НовыеПараметры;
		Элементы.ПериодПланированияОтборОкончание.ПараметрыВыбора = НовыеПараметры;
			
		Если Не СтандартныеНастройки Тогда
			ПрочитатьСохраненныеНастройки(Ложь);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СохраненнаяНастройка) Тогда
			 СохраненнаяНастройка = "ПоУмолчанию";
		КонецЕсли;	
        ОпределитьТекущийРежимРаботы(Бланк);	
	Иначе
		СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет, НСтр("ru = 'Не выбран бланк сводной таблицы!'"));
	КонецЕсли;
	
	СформироватьЗаголовокФормы();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьАналитики(Параметр)
	
	Если Не ЗначениеЗаполнено(Параметр) Тогда
		Возврат;
	КонецЕсли;	
	
	
	РабочийОбъект = РеквизитФормыВЗначение("Объект");
	ТЗДанные = ПолучитьИзВременногоХранилища(РабочийОбъект.ТЗДанныеАдрес);
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(Объект.АдресТаблицИнтерфейса);
	ДобавленныеАналитики = ПолучитьИзВременногоХранилища(Параметр.ДобавленныеАналитики);
	СтруктураАналитик =     ПолучитьИзВременногоХранилища(Параметр.СтруктураАналитикАдрес);
	ТзДобавленныхАналитик = ПолучитьИзВременногоХранилища(Объект.ТзДобавленныхАналитикАдрес);
			
	//Для Каждого Стр Из  СтруктураТаблицИнтерфейса.ДоступныеАналитики Цикл
	//	Если СтруктураАналитик.Свойство(Стр.НазначениеАналитикиКод) И СтруктураАналитик[Стр.НазначениеАналитикиКод] = Неопределено Тогда
	//		 СтруктураАналитик[Стр.НазначениеАналитикиКод] = Стр.ТипСубконто;
	//	КонецЕсли;	
	//Конеццикла;	
	СтруктураОтбораСтроки = Новый Структура;
	ДобавляемаяАналитикаКод = ДобавленныеАналитики.Колонки[0].Имя;
	ТекстСвертки = "Блокировка_Периоды,";
	Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаКолонки Цикл
		Если НЕ Стр.Код = "Фильтр_Показатели_Колонки" Тогда
			 ТекстСвертки = ТекстСвертки+СтрЗаменить(стр.Код,"Фильтр_","")+",";
		КонецЕсли;	
		Если Стр.Код = "Фильтр_Периоды" Тогда
			  ТекстСвертки = ТекстСвертки+"ПериодыСвязанныйПериод"+",";
		КонецЕсли;	
		
	КонецЦикла;	
	
	Для Каждого стр Из СтруктураАналитик Цикл
		Если стр.Ключ = "ID" ИЛИ стр.Ключ = "КодРесурса" ИЛИ стр.Ключ = "ТекущееЗначениеРесурса" Тогда
			 Продолжить;
		КонецЕсли;	
		
		Если НЕ (стр.Значение)=Неопределено И НЕ ДобавляемаяАналитикаКод =стр.Ключ  Тогда
			 СтруктураОтбораСтроки.Вставить(стр.Ключ,стр.Значение);
			 ТекстСвертки = ТекстСвертки+стр.Ключ+",";
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого СтрДобавленныеАналитики Из  ДобавленныеАналитики Цикл
		  Нстр =  ТзДобавленныхАналитик.Добавить();
		  Нстр.ПоказательСтрока = СтруктураАналитик.ПоказателиСтрокаОтчета;	  
		  ЗаполнитьЗначенияСвойств(Нстр,СтруктураАналитик);	
		  ЗаполнитьЗначенияСвойств(Нстр,СтрДобавленныеАналитики);
		  Нстр.ДобавляемаяАналитикаКод = ДобавляемаяАналитикаКод;
		  Нстр.СтруктураОтбораСтроки = СтруктураОтбораСтроки;
          Нстр.ТекстСвертки = ЛЕВ(ТекстСвертки,СтрДлина(ТекстСвертки)-1);
	КонецЦикла;	
	
	Объект.ТзДобавленныхАналитикАдрес = ПоместитьВоВременноеХранилище(ТзДобавленныхАналитик,Новый УникальныйИдентификатор);  
	ЗначениеВРеквизитФормы(РабочийОбъект,"Объект");
	СоздатьСводнуюТаблицуСКД(Ложь,Ложь);

КонецПроцедуры	

&НаСервере
Процедура ЗаменитьАналитику(НовоеЗначение,Верх,Низ,Лево,Право) 
	
	РабочийОбъект = РеквизитФормыВЗначение("Объект");
	РабочийОбъект.ЗаменитьСтрокиАналитик(НовоеЗначение,ПолеТабличногоДокументаМакет,Низ);	
	
КонецПроцедуры	

#КонецОбласти


&НаКлиенте
Процедура ВычислятьАвтоматически(Команда)
	
	ОбновитьДанные = Истина;
	Элементы.РучнойПересчет.Пометка = Ложь;
	Элементы.ВычислятьАвтоматически.Пометка = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимТолькоЧтение()
	
	РежимТолькоЧтение = Истина;
	Элементы.Режим.Заголовок = НСтр("ru = 'Режим: чтение'");
	
	Элементы.ПолеТабличногоДокументаМакет.Редактирование = Ложь;		
	
	//Основное меню формы	
	Элементы.КомандыРаботыСРедактированиемСтрок.Доступность = Ложь;
	Элементы.КомандыРаботыСРедактированиемЗначений.Доступность = Ложь;
	
	//Контекстное меню формы
	Элементы.кмКомандыРаботыСРедактированиемСтрок.Доступность = Ложь;
	Элементы.кмКомандыРаботыСРедактированиемЗначений.Доступность = Ложь;

	//Группа дополнительно
    Элементы.ГруппаДополнительныеКоманды.Доступность = Ложь;	
	Элементы.ЗагрузитьИзЕкселя.Доступность = Ложь;
  	
	РедактированиеВозможно = Ложь;
	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимЧтениеЗапись()
	
	Элементы.ПолеТабличногоДокументаМакет.Редактирование = Истина;
		
	//Основное меню формы	
	Элементы.КомандыРаботыСРедактированиемСтрок.Доступность = ЕстьРедактируемыеАналитики;
	Элементы.КомандыРаботыСРедактированиемЗначений.Доступность = Истина;
	
	//Контекстное меню формы
	Элементы.кмКомандыРаботыСРедактированиемСтрок.Доступность = ЕстьРедактируемыеАналитики;
	Элементы.кмКомандыРаботыСРедактированиемЗначений.Доступность = Истина;

	//Группа дополнительно
    Элементы.ГруппаДополнительныеКоманды.Доступность = Истина;	
	Элементы.ЗагрузитьИзЕкселя.Доступность = Истина;

	РедактированиеВозможно = Истина;
	РежимТолькоЧтение = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимНастройки()
	
	//РежимТолькоЧтение = Истина;
	Элементы.ПоказатьНастройкиТаблицы.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьТекущийРежимРаботы(тБланк)
		
	
	УстановитьРежимТолькоЧтение();
   	
	Элементы.Режим.Заголовок = Нстр("ru = 'Режим: чтен.'");
    Элементы.Режим.ЦветТекста = Новый Цвет(0,0,0);
	
	
	Если ЗначениеЗаполнено(Объект.АдресТаблицИнтерфейса) Тогда 
		ТаблицыИнтерфейса =  ПолучитьИзВременногоХранилища(Объект.АдресТаблицИнтерфейса);
		Если  ТаблицыИнтерфейса.ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код","Фильтр_Проекты")).Количество()=1 Тогда		
			Возврат;		
		КонецЕсли;	
		
		Если  ТаблицыИнтерфейса.ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код","Фильтр_Организации")).Количество()=1 Тогда		
			Возврат;	
		КонецЕсли;	
	КонецЕсли;
	
	
	Если Пользователи.ЭтоПолноправныйПользователь(ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь")) Тогда	
		УстановитьРежимЧтениеЗапись();	 
		Элементы.Режим.Заголовок =  Элементы.Режим.Заголовок + НСтр("ru = ',ред.'");		
		УстановитьРежимНастройки();	 
		Элементы.Режим.Заголовок =  Элементы.Режим.Заголовок + НСтр("ru = ',настр.'");		
		Возврат;	
	КонецЕсли;

	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиПравДоступаПользователейБланкиРазвернутые.Чтение,
	|	НастройкиПравДоступаПользователейБланкиРазвернутые.Запись,
	|	НастройкиПравДоступаПользователейБланкиРазвернутые.ИзменениеСтруктуры
	|ИЗ
	|	РегистрСведений.НастройкиПравДоступаПользователейБланкиРазвернутые КАК НастройкиПравДоступаПользователейБланкиРазвернутые
	|ГДЕ
	|	НастройкиПравДоступаПользователейБланкиРазвернутые.Пользователь = &Пользователь
	|	И НастройкиПравДоступаПользователейБланкиРазвернутые.Бланк = &Бланк";
	
	Запрос.УстановитьПараметр("Пользователь",ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
	Запрос.УстановитьПараметр("Бланк",тБланк);

	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
		
	Если Выборка.Количество() = 0 Тогда
		 ВызватьИсключение(НСтр("ru = 'У текущего пользователя нет прав на работу с бланком '") + Строка(тБланк));
	КонецЕсли;	
	
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.Чтение Тогда
			ВызватьИсключение(НСтр("ru = 'У текущего пользователя нет прав на работу с бланком '") + Строка(тБланк));
		КонецЕсли;	
		
		Если Выборка.Запись Тогда 
			УстановитьРежимЧтениеЗапись();	 
			Элементы.Режим.Заголовок =  Элементы.Режим.Заголовок + НСтр("ru = ',ред.'");
		КонецЕсли;
		
		Если Выборка.ИзменениеСтруктуры Тогда 
			УстановитьРежимНастройки();	 
			Элементы.Режим.Заголовок =  Элементы.Режим.Заголовок + НСтр("ru = ',настр.'");
		КонецЕсли;	
	КонецЦикла;
		
КонецПроцедуры	

&НаСервере
Процедура ЗаписатьПоследниеНастройкиДляСводнойТаблицы()

	Если  РежимРасшифровки Тогда
		  Возврат;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим (Истина);
	
	Если Не ЗначениеЗаполнено(Объект.АдресТаблицИнтерфейса) Тогда
		 Возврат;
	КонецЕсли;	
	
	ЗначениеСохраняемойНастройки = Новый Структура;

	Настройка = Строка(Бланк.УникальныйИдентификатор());
	ЗначениеТекСохраняемойНастройки = ХранилищеОбщихНастроек.Загрузить(Настройка,ИмяТекущегоВариантаНастройки,, ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
	
	
	//Запишем имя настройки варианта 	
	ЗначениеСохраняемойНастройкиПоУмолчанию = Новый Структура;
	ЗначениеСохраняемойНастройкиПоУмолчанию.Вставить("ИмяТекущегоВарианта",ИмяТекущегоВариантаНастройки);	
	Настройка = Строка(Объект.Бланк.УникальныйИдентификатор());
	ХранилищеОбщихНастроек.Сохранить((Настройка),"#ПоследнийВариантНастроек#", ЗначениеСохраняемойНастройкиПоУмолчанию,, ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
		
	ЗначениеСохраняемойНастройки.Вставить("ОтборПоПериоду",Новый Структура("ПериодПланированияОтборНачало,ПериодПланированияОтборОкончание",ПериодПланированияОтборНачало,ПериодПланированияОтборОкончание));	
	
	СтруктураОтбораПоФильтрам = Новый Структура();
	ИнтерфейсСТ = ПолучитьИзВременногоХранилища(Объект.АдресТаблицИнтерфейса);
	Для Каждого нПоле Из ИнтерфейсСТ.ТаблицаДоступныеПоля Цикл
		СтруктураОтбораПоФильтрам.Вставить(нПоле.Код,ЭтаФорма[нПоле.Код]);
	КонецЦикла;
	Для Каждого нПоле Из ИнтерфейсСТ.ТаблицаСтроки Цикл
		СтруктураОтбораПоФильтрам.Вставить(нПоле.Код,ЭтаФорма[нПоле.Код]);	
	КонецЦикла;
	Для Каждого нПоле Из ИнтерфейсСТ.ТаблицаКолонки Цикл
		СтруктураОтбораПоФильтрам.Вставить(нПоле.Код,ЭтаФорма[нПоле.Код]);	
	КонецЦикла;
	Для Каждого нПоле Из ИнтерфейсСТ.ТаблицаСтраницы Цикл
		СтруктураОтбораПоФильтрам.Вставить(нПоле.Код,ЭтаФорма[нПоле.Код]);	
	КонецЦикла;
	
	Если СохранятьВариантСтруктуры Тогда
		ЗначениеСохраняемойНастройки.Вставить("ТаблицаСтроки",			ИнтерфейсСТ.ТаблицаСтроки);
		ЗначениеСохраняемойНастройки.Вставить("ТаблицаКолонки",			ИнтерфейсСТ.ТаблицаКолонки);
		ЗначениеСохраняемойНастройки.Вставить("ТаблицаСтраницы",		ИнтерфейсСТ.ТаблицаСтраницы);
		ЗначениеСохраняемойНастройки.Вставить("ТаблицаДоступныеПоля",	ИнтерфейсСТ.ТаблицаДоступныеПоля);
		ЗначениеСохраняемойНастройки.Вставить("НастройкаШкалыВремени", ИнтерфейсСТ.НастройкаШкалыВремени);
		Если ИнтерфейсСТ.Свойство("НастройкиСкользящегоПланирования") Тогда
			ЗначениеСохраняемойНастройки.Вставить("НастройкиСкользящегоПланирования", ИнтерфейсСТ.НастройкиСкользящегоПланирования);
		КонецЕсли;
		ЗначениеСохраняемойНастройки.Вставить("Режим", РежимРаботы);
		ЗначениеСохраняемойНастройки.Вставить("ВариантыДиаграммы", ВариантыДиаграммы);	
	Иначе	
		
		Если НЕ ЗначениеТекСохраняемойНастройки = Неопределено Тогда
			Если ЗначениеТекСохраняемойНастройки.Свойство("ТаблицаДоступныеПоля") Тогда	
				ЗначениеСохраняемойНастройки.Вставить("ТаблицаСтроки",			ЗначениеТекСохраняемойНастройки.ТаблицаСтроки);
				ЗначениеСохраняемойНастройки.Вставить("ТаблицаКолонки",			ЗначениеТекСохраняемойНастройки.ТаблицаКолонки);
				ЗначениеСохраняемойНастройки.Вставить("ТаблицаСтраницы",		ЗначениеТекСохраняемойНастройки.ТаблицаСтраницы);
				ЗначениеСохраняемойНастройки.Вставить("ТаблицаДоступныеПоля",	ЗначениеТекСохраняемойНастройки.ТаблицаДоступныеПоля);
			КонецЕсли;	
			ЗначениеСохраняемойНастройки.Вставить("НастройкаШкалыВремени", ИнтерфейсСТ.НастройкаШкалыВремени);
			Если ИнтерфейсСТ.Свойство("НастройкиСкользящегоПланирования") Тогда
				ЗначениеСохраняемойНастройки.Вставить("НастройкиСкользящегоПланирования", ИнтерфейсСТ.НастройкиСкользящегоПланирования);
			КонецЕсли;
			
			Если ЗначениеТекСохраняемойНастройки.Свойство("Режим") Тогда	
				ЗначениеСохраняемойНастройки.Вставить("Режим", ЗначениеТекСохраняемойНастройки.Режим);
			КонецЕсли;
			Если ЗначениеТекСохраняемойНастройки.Свойство("ВариантыДиаграммы") Тогда	
				ЗначениеСохраняемойНастройки.Вставить("ВариантыДиаграммы",ЗначениеТекСохраняемойНастройки.ВариантыДиаграммы);
			КонецЕсли;	
			
		КонецЕсли;
	КонецЕсли;	
	
	ЗначениеСохраняемойНастройки.Вставить("ОтборПоФильтрам",		СтруктураОтбораПоФильтрам);
	ЗначениеСохраняемойНастройки.Вставить("ДопОтборы", СТ_ДополнительныеНастройки.Настройки.Отбор);
	ЗначениеСохраняемойНастройки.Вставить("ОтображатьСуммыВДопВалютах",ОтображатьСуммыВДопВалютах);	
	ЗначениеСохраняемойНастройки.Вставить("ВыводитьОбщийИтогПострокам",ВыводитьОбщийИтогПострокам);
	ЗначениеСохраняемойНастройки.Вставить("Масштаб",ЕдиницаИзмерения);	
	ЗначениеСохраняемойНастройки.Вставить("Точность",Точность);
	ЗначениеСохраняемойНастройки.Вставить("ДополнительныеПоля",ИнтерфейсСТ.ДополнительныеПоля);	
	ЗначениеСохраняемойНастройки.Вставить("БазаДляОтклонений",ИнтерфейсСТ.БазаДляОтклонений);
	
	ХранилищеОбщихНастроек.Сохранить((Настройка),ИмяТекущегоВариантаНастройки, ЗначениеСохраняемойНастройки,, ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));	
	УстановитьПривилегированныйРежим (Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСохраненныеНастройки(ЗаменитьКлючевыеОтборы = Истина)
	
	УстановитьПривилегированныйРежим (Истина);
		
	//1.Смотрим - какой вариант настроек использовался последний раз... 
	Настройка = Строка(Бланк.УникальныйИдентификатор());
	ЗначениеСохраняемойНастройкиВариант = ХранилищеОбщихНастроек.Загрузить(Настройка,"#ПоследнийВариантНастроек#",, ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
	
	Если ЗначениеСохраняемойНастройкиВариант = Неопределено Тогда  //Никаких сохраненных настроек нет - работаем в варианте по умолчанию
		ИмяТекущегоВариантаНастройки = "";
		СводнаяТаблицаУХ.ЗаполнитьПодменюСохраненныхВариантов(ЭтаФорма,Элементы.СохраненныеВарианты,СоответствиеВариантовНастроекТаблицы);		
	Иначе	
		ИмяТекущегоВариантаНастройки = ЗначениеСохраняемойНастройкиВариант.ИмяТекущегоВарианта;
	КонецЕсли;	
			
	//2. Прочитаем имя варианта
	ЗначениеСохраняемойНастройки = ХранилищеОбщихНастроек.Загрузить(Настройка,ИмяТекущегоВариантаНастройки,, ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
	Если НЕ ЗначениеСохраняемойНастройки = Неопределено Тогда
		
		ФлУдалитьВарианты = Ложь;
		
		//Проверка на то, что в бланке не изменился состав ресурсов.
		Для Каждого СтрПоле Из ЗначениеСохраняемойНастройки.ДополнительныеПоля Цикл
			
			Если Не ЗначениеЗаполнено(СтрПоле.Ссылка) Тогда
				ФлУдалитьВарианты = Истина;
				Прервать;
			КонецЕсли;	
			
			Если СтрПоле.Ссылка.ПолучитьОбъект() = Неопределено Тогда
				ФлУдалитьВарианты = Истина;
				Прервать;
			КонецЕсли;	
			
		КонецЦикла;	
		
		//Применим настройки варианта общих отборов перед удалением настройки
		ПериодПланированияОтборНачало =  ЗначениеСохраняемойНастройки.ОтборПоПериоду.ПериодПланированияОтборНачало;
		ПериодПланированияОтборОкончание =  ЗначениеСохраняемойНастройки.ОтборПоПериоду.ПериодПланированияОтборОкончание;
		
		Если НЕ ЗначениеСохраняемойНастройки.Свойство("ОтборПоФильтрам") Тогда
			Возврат;
		КонецЕсли;	
		
		Для Каждого СтрФильтр Из ЗначениеСохраняемойНастройки.ОтборПоФильтрам Цикл	
			Попытка			
				ЭтаФорма[СтрФильтр.Ключ] = СтрФильтр.Значение;	
			Исключение
			КонецПопытки;	
		КонецЦикла;	
		
		Если ЗначениеСохраняемойНастройки.Свойство("ДопОтборы") Тогда
			ЗагрузитьНастройкиДопОтборов(ЗначениеСохраняемойНастройки);
		КонецЕсли;
		
		Если ЗначениеСохраняемойНастройки.Свойство("Режим") Тогда		
			РежимРаботы = ЗначениеСохраняемойНастройки.Режим;
			Если ЗначениеСохраняемойНастройки.Свойство("ВариантыДиаграммы") Тогда
				ВариантыДиаграммы = ЗначениеСохраняемойНастройки.ВариантыДиаграммы;
			КонецЕсли;	
			РежимРаботыПриИзмененииСервер();
		КонецЕсли;
		
		СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(Объект.АдресТаблицИнтерфейса);
		
		Если ЗначениеСохраняемойНастройки.Свойство("ТаблицаДоступныеПоля") Тогда
			//Удаляем - Добавляем измененные аналитики
			ЗагрузитьНастройкиИзмерений(СтруктураТаблицИнтерфейса,ЗначениеСохраняемойНастройки);	
		КонецЕсли;
		
		Если ЗначениеСохраняемойНастройки.Свойство("Масштаб") Тогда	
			ЕдиницаИзмерения = ЗначениеСохраняемойНастройки.Масштаб;
		КонецЕсли;

		Если ЗначениеСохраняемойНастройки.Свойство("НастройкиСкользящегоПланирования") Тогда	
			СтруктураТаблицИнтерфейса.Вставить("НастройкиСкользящегоПланирования", ЗначениеСохраняемойНастройки.НастройкиСкользящегоПланирования);
			Если ЗначениеСохраняемойНастройки.Свойство("НастройкаШкалыВремени") Тогда 
				СтруктураТаблицИнтерфейса.Вставить("НастройкаШкалыВремени", ЗначениеСохраняемойНастройки.НастройкаШкалыВремени);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеСохраняемойНастройки.Свойство("Точность") Тогда	
			Точность = ЗначениеСохраняемойНастройки.Точность;
		КонецЕсли;
		
		Если ЗначениеСохраняемойНастройки.Свойство("ОтображатьСуммыВДопВалютах") Тогда	
			ОтображатьСуммыВДопВалютах = ЗначениеСохраняемойНастройки.ОтображатьСуммыВДопВалютах;
			Элементы.ДопВалюты.Пометка = ОтображатьСуммыВДопВалютах;
		КонецЕсли;
		
		Если ЗначениеСохраняемойНастройки.Свойство("ВыводитьОбщийИтогПострокам") Тогда	
			ВыводитьОбщийИтогПострокам = ЗначениеСохраняемойНастройки.ВыводитьОбщийИтогПострокам;
			Элементы.ВыводитьОбщийИтогПострокам.Пометка = ВыводитьОбщийИтогПострокам;
		КонецЕсли;
			
		Если ФлУдалитьВарианты Тогда
			ХранилищеОбщихНастроек.Удалить(Настройка,,ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
			ИмяТекущегоВариантаНастройки = "";
			нВарианты = РегистрыСведений.ВариантыНастроекБланковСТ.СоздатьНаборЗаписей();
			нВарианты.Отбор.Бланк.Установить(Бланк);
			нВарианты.Отбор.Пользователь.Установить(ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
			нВарианты.Записать(Истина);
			
			СводнаяТаблицаУХ.ЗаполнитьПодменюСохраненныхВариантов(ЭтаФорма,Элементы.СохраненныеВарианты,СоответствиеВариантовНастроекТаблицы);
			ТекстСообщения = НСтр("ru = 'Состав показателей бланка был изменен. Список вариантов текущей таблицы очищен'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			
			Возврат;
		КонецЕсли;	
		
		
		СводнаяТаблицаУХ.ЗаполнитьПодменюСохраненныхВариантов(ЭтаФорма,Элементы.СохраненныеВарианты,СоответствиеВариантовНастроекТаблицы,ИмяТекущегоВариантаНастройки);
	Иначе	
		Возврат;
	КонецЕсли;	
	 
	Если ЗаменитьКлючевыеОтборы Тогда
		//3.Применим настройки варианта
		ПериодПланированияОтборНачало =  ЗначениеСохраняемойНастройки.ОтборПоПериоду.ПериодПланированияОтборНачало;
		ПериодПланированияОтборОкончание =  ЗначениеСохраняемойНастройки.ОтборПоПериоду.ПериодПланированияОтборОкончание;
		
		Если НЕ ЗначениеСохраняемойНастройки.Свойство("ОтборПоФильтрам") Тогда
			Возврат;
		КонецЕсли;	
		
		Для Каждого СтрФильтр Из ЗначениеСохраняемойНастройки.ОтборПоФильтрам Цикл	
			Попытка			
				ЭтаФорма[СтрФильтр.Ключ] = СтрФильтр.Значение;	
			Исключение
			КонецПопытки;	
		КонецЦикла;	
				
		Если ЗначениеСохраняемойНастройки.Свойство("ДопОтборы") Тогда
			ЗагрузитьНастройкиДопОтборов(ЗначениеСохраняемойНастройки);
		КонецЕсли;

		
	Иначе	
		ПериодПланированияОтборНачало =  ?(ЗначениеЗаполнено(ПериодПланированияОтборНачало),ПериодПланированияОтборНачало,ЗначениеСохраняемойНастройки.ОтборПоПериоду.ПериодПланированияОтборНачало);
		ПериодПланированияОтборОкончание =  ?(ЗначениеЗаполнено(ПериодПланированияОтборОкончание),ПериодПланированияОтборОкончание,ЗначениеСохраняемойНастройки.ОтборПоПериоду.ПериодПланированияОтборОкончание);
		
		Если НЕ ЗначениеСохраняемойНастройки.Свойство("ОтборПоФильтрам") Тогда
			Возврат;
		КонецЕсли;	
		
		Для Каждого СтрФильтр Из ЗначениеСохраняемойНастройки.ОтборПоФильтрам Цикл	
			Попытка			
				ЭтаФорма[СтрФильтр.Ключ] = ?(ЗначениеЗаполнено(ЭтаФорма[СтрФильтр.Ключ]),ЭтаФорма[СтрФильтр.Ключ],СтрФильтр.Значение);	
			Исключение
			КонецПопытки;	
		КонецЦикла;	
					
	КонецЕсли;
	
	Если Не РакурсДанных.Пустая() тогда
		МаксАналитикОтчета = ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(Объект.ВидОтчета);
		
		Для ИндексАналитики = 1 По МаксАналитикОтчета Цикл
			ИндАналитики = Строка(ИндексАналитики);
			ЭтаФорма["Фильтр_" + Объект.ВидОтчета["ВидАналитики" + ИндАналитики].Код] = РакурсДанных["Аналитика" + ИндАналитики];	
		КонецЦикла;
	КонецЕсли;
		
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(Объект.АдресТаблицИнтерфейса);
	
	Если  ЗначениеСохраняемойНастройки.Свойство("БазаДляОтклонений") Тогда		
		СтруктураТаблицИнтерфейса.БазаДляОтклонений = ЗначениеСохраняемойНастройки.БазаДляОтклонений.Скопировать();
	КонецЕсли;
	
	Если ЗначениеСохраняемойНастройки.Свойство("Режим") Тогда		
		РежимРаботы = ЗначениеСохраняемойНастройки.Режим;
		Если ЗначениеСохраняемойНастройки.Свойство("ВариантыДиаграммы") Тогда
			ВариантыДиаграммы = ЗначениеСохраняемойНастройки.ВариантыДиаграммы;
		КонецЕсли;	
		РежимРаботыПриИзмененииСервер();
	КонецЕсли;

	Если ЗначениеСохраняемойНастройки.Свойство("ТаблицаДоступныеПоля") Тогда
		//Удаляем - Добавляем измененные аналитики
		ЗагрузитьНастройкиИзмерений(СтруктураТаблицИнтерфейса,ЗначениеСохраняемойНастройки);	
	КонецЕсли;
		
	Если ЗначениеСохраняемойНастройки.Свойство("Масштаб") Тогда	
		ЕдиницаИзмерения = ЗначениеСохраняемойНастройки.Масштаб;
	КонецЕсли;
	
	Если ЗначениеСохраняемойНастройки.Свойство("НастройкиСкользящегоПланирования") Тогда	
		СтруктураТаблицИнтерфейса.Вставить("НастройкиСкользящегоПланирования", ЗначениеСохраняемойНастройки.НастройкиСкользящегоПланирования);
		Если ЗначениеСохраняемойНастройки.Свойство("НастройкаШкалыВремени") Тогда 
			СтруктураТаблицИнтерфейса.Вставить("НастройкаШкалыВремени", ЗначениеСохраняемойНастройки.НастройкаШкалыВремени);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеСохраняемойНастройки.Свойство("Точность") Тогда	
		 Точность = ЗначениеСохраняемойНастройки.Точность;
	КонецЕсли;
		
	Если ЗначениеСохраняемойНастройки.Свойство("ОтображатьСуммыВДопВалютах") Тогда	
		ОтображатьСуммыВДопВалютах = ЗначениеСохраняемойНастройки.ОтображатьСуммыВДопВалютах;
		Элементы.ДопВалюты.Пометка = ОтображатьСуммыВДопВалютах;
	КонецЕсли;

	Если ЗначениеСохраняемойНастройки.Свойство("ВыводитьОбщийИтогПострокам") Тогда	
		ВыводитьОбщийИтогПострокам = ЗначениеСохраняемойНастройки.ВыводитьОбщийИтогПострокам;
		Элементы.ВыводитьОбщийИтогПострокам.Пометка = ВыводитьОбщийИтогПострокам;
	КонецЕсли;
	
	Если  ЗначениеСохраняемойНастройки.Свойство("ДополнительныеПоля") Тогда		
		СтруктураТаблицИнтерфейса.ДополнительныеПоля = ЗначениеСохраняемойНастройки.ДополнительныеПоля.Скопировать();
	КонецЕсли;
	
		
	РабочийОбъект = РеквизитФормыВЗначение("Объект");
	РабочийОбъект.СоздатьПоляФильтров(ЭтаФорма,Бланк);

	УстановитьПривилегированныйРежим (Ложь);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПоправилуСервер(ПравилоОбработки)
	
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(Объект.АдресТаблицИнтерфейса);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ТаблицаИсходныхПоказателей",СтруктураТаблицИнтерфейса.ТаблицаИсходныхПоказателей);
	ПараметрыЗадания.Вставить("ТаблицаТрассировкиРасчета", СтруктураТаблицИнтерфейса.ТаблицаТрассировкиРасчета);
	
	ПротоколируемыеСобытияУХ.Начать();
	
	РабочийОбъект = РеквизитФормыВЗначение("Объект");
	РабочийОбъект.РасчитатьПоПравилуОбработки(ПравилоОбработки,ПараметрыЗадания);
	
	ТаблицаСобытийЗагрузки = ПротоколируемыеСобытияУХ.Завершить("РассчитатьЗначенияПоказателей",,,,Ложь,,,);
	Если ТаблицаСобытийЗагрузки.Количество() > 0 Тогда
		АдресТаблицыСобытий = ПоместитьВоВременноеХранилище(ТаблицаСобытийЗагрузки);
	КонецЕсли;
	
	СоздатьСводнуюТаблицуСКД(Истина,Истина);
	
	АдресХранилищаДанныхТрассировки=ПоместитьВоВременноеХранилище(Новый Структура("ТаблицаИсходныхПоказателей,ТаблицаТрассировкиРасчета",
	ПараметрыЗадания.ТаблицаИсходныхПоказателей,ПараметрыЗадания.ТаблицаТрассировкиРасчета),Новый УникальныйИдентификатор);
	
КонецПроцедуры	

Процедура ЗапуститьВычислениеВФоне()
		
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(Объект.АдресТаблицИнтерфейса);

	
	//ПараметрыЗадания = Новый Структура;
	//ПараметрыЗадания.Вставить("Бланк",Бланк);	
	//ПараметрыЗадания.Вставить("ТаблицаИзмененныхПоказателейАдрес",РасчетПоказателей.ТаблицаИзмененныхПоказателей.Выгрузить());	
	//ПараметрыЗадания.Вставить("Валюта",ЭтаФорма["Фильтр_Валюты"]);
	//
	//РасчетВыполнен = Ложь;
	//
	//Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
	//УникальныйИдентификатор, "СводнаяТаблицаУХ.ПрименитьИзменения",
	//ПараметрыЗадания, НСтр("ru = 'обновление и расчет данных '"), Истина);
	//
	//АдресХранилища               = Результат.АдресХранилища;
	//ИдентификаторЗадания         = Результат.ИдентификаторЗадания;
	//РасчетВыполнен             = Результат.ЗаданиеВыполнено;
	//АдресХранилищаДополнительный = Результат.АдресХранилищаДополнительный;
	//
	//РасчетПоказателей.ТаблицаИзмененныхПоказателей.Очистить();
	ТабИзмененныхДанных = ПолучитьИзВременногоХранилища(Объект.логИзмененныхДанныхАдрес);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Бланк",Бланк);		
	ПараметрыЗадания.Вставить("Валюта",ЭтаФорма["Фильтр_Валюты"]);
	ПараметрыЗадания.Вставить("логИзмененныхДанныхАдрес",Объект.логИзмененныхДанныхАдрес);
    ПараметрыЗадания.Вставить("РежимТрассировки",Объект.РежимТрассировки);
	ПараметрыЗадания.Вставить("ТаблицаИсходныхПоказателей",СтруктураТаблицИнтерфейса.ТаблицаИсходныхПоказателей);
	ПараметрыЗадания.Вставить("ТаблицаТрассировкиРасчета", СтруктураТаблицИнтерфейса.ТаблицаТрассировкиРасчета);
	
	АдресХранилища               = "";
	АдресХранилищаДополнительный = "";	
	СводнаяТаблицаУХ.ПрименитьИзменения(ПараметрыЗадания,АдресХранилища,АдресХранилищаДополнительный);
	ТабИзмененныхДанных.Очистить();
	СоздатьСводнуюТаблицуСКД(Истина,Истина);
		
	АдресХранилищаДанныхТрассировки=ПоместитьВоВременноеХранилище(Новый Структура("ТаблицаИсходныхПоказателей,ТаблицаТрассировкиРасчета",
	ПараметрыЗадания.ТаблицаИсходныхПоказателей,ПараметрыЗадания.ТаблицаТрассировкиРасчета),Новый УникальныйИдентификатор);
	
КонецПроцедуры	



&НаСервере
Функция РасшифроватьОперандНаСервере(Расшифровка,Текст)
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		ТекстСообщения = НСтр("ru = 'Не выборан показатель'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат Неопределено;		
	КонецЕсли;
	
	СтруктураНезаполненыхАналитик = Новый Структура;

	РабочийОбъект = РеквизитФормыВЗначение("Объект");
	СтруктураПараметровДляВызоваРасшифровки = РабочийОбъект.ПолучитьПараметрыРасшифровкиОперанда(Расшифровка,Текст);
	
	Если НЕ СтруктураПараметровДляВызоваРасшифровки.СтруктураОтбора = Неопределено Тогда
		Для Каждого Стр Из СтруктураПараметровДляВызоваРасшифровки.СтруктураОтбора Цикл
			Если Стр.Значение = Неопределено Тогда
				СтруктураНезаполненыхАналитик.Вставить(Стр.Ключ,Стр.Значение);
				Прервать;
			КонецЕсли;	
		КонецЦикла;			
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(СтруктураПараметровДляВызоваРасшифровки.ОбъектРасчета.ПериодОтчета) Тогда
		ТекстСообщения = НСтр("ru = 'В данной ячейке отображается итоговое значение. Расшифровку можно получить только по детальной ячейке'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;	

	Если НЕ СтруктураПараметровДляВызоваРасшифровки = Неопределено Тогда
		
		Если СтруктураПараметровДляВызоваРасшифровки.СтруктураОтбора = Неопределено ИЛИ СтруктураНезаполненыхАналитик.Количество()=0 Тогда
			
			СтруктураПараметровДляВызоваРасшифровки.Вставить("АдресХранилищаПеременныхДляРасчета", ПоместитьВоВременноеХранилище(СтруктураПараметровДляВызоваРасшифровки.ОбъектРасчета,ЭтаФорма.УникальныйИдентификатор));
			
			Если ЕдиницаИзмерения = "Тыс" Тогда
				СтруктураПараметровДляВызоваРасшифровки.ОбъектРасчета.Вставить("ЕдиницаИзмеренияОтображения",Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
			ИначеЕсли ЕдиницаИзмерения = "Миллионы" Тогда
				СтруктураПараметровДляВызоваРасшифровки.ОбъектРасчета.Вставить("ЕдиницаИзмеренияОтображения",Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
			Иначе
				СтруктураПараметровДляВызоваРасшифровки.ОбъектРасчета.Вставить("ЕдиницаИзмеренияОтображения",Перечисления.ПорядкиОкругленияОтчетности.Окр1);
			КонецЕсли;
			
			СтруктураПараметровДляВызоваРасшифровки.ОбъектРасчета.Вставить("УровеньТочности",Точность);
			СтруктураПараметровДляВызоваРасшифровки.Удалить("ОбъектРасчета");
			
			Возврат СтруктураПараметровДляВызоваРасшифровки;
			
		Иначе	
			
			ТекстСообщения = НСтр("ru = 'В данной ячейке отображается итоговое значение. Расшифровку можно получить только по детальной ячейке'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Возврат Неопределено;
			
		КонецЕсли;
			
	КонецЕсли;	
	
	Возврат Неопределено;
		
КонецФункции

&НаСервере
Процедура ВыделитьОбластиПоказателей(Расшифровка) Экспорт
	
	

КонецПроцедуры
	
&НаСервере
Процедура УстановитьРежимРедактированияДанных(Режим)
	
	Элементы.ГруппаПрименитьОтменить.Доступность 		= Режим;	
	Элементы.ФильтрПериод.ТолькоПросмотр 			= Элементы.ГруппаПрименитьОтменить.Доступность;
	Элементы.ГруппаДополнительно.Доступность 		= НЕ Элементы.ГруппаПрименитьОтменить.Доступность;
	Элементы.ОбновитьДанныеТаблицы.Доступность 		= НЕ Режим;	
	Элементы.ГруппаНастройки.Доступность 			= НЕ Режим;
	Элементы.ГруппаОсновныеКоманды.Доступность 				= НЕ Режим;
		
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСохраненныеВариантыИзХранилища()  
	
	     СводнаяТаблицаУХ.ЗаполнитьПодменюСохраненныхВариантов(ЭтаФорма,Элементы.СохраненныеВарианты,СоответствиеВариантовНастроекТаблицы,ИмяТекущегоВариантаНастройки);
				
КонецПроцедуры
	
&НаСервере
Процедура ДобавитьВариантБланка(ИмяНастройки)
	
	СохраненнаяСтруктура = РегистрыСведений.ВариантыНастроекБланковСТ.СоздатьНаборЗаписей();
	СохраненнаяСтруктура.Отбор.Бланк.Установить(Бланк);
	СохраненнаяСтруктура.Отбор.Пользователь.Установить(ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
	СохраненнаяСтруктура.Прочитать();
	ТзНастроек = СохраненнаяСтруктура.Выгрузить();
	
	НайденнаяСтрока = ТзНастроек.НайтиСтроки(Новый Структура("ИмяНастройки",ИмяНастройки));
	
	Если НайденнаяСтрока.Количество()=1 Тогда
		 ВариантНастройки = НайденнаяСтрока[0];	 
	 Иначе	
		 ВариантНастройки = ТзНастроек.Добавить();
		 ВариантНастройки.Бланк = Бланк;
		 ВариантНастройки.Пользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
		 ВариантНастройки.ИмяНастройки = ИмяНастройки;
	КонецЕсли;	
		
	СохранитьНастройкиВарианта(ИмяНастройки);
	СохраненнаяСтруктура.Загрузить(ТзНастроек);
	СохраненнаяСтруктура.Записать(Истина);	
	
	ИмяТекущегоВариантаНастройки = ИмяНастройки;
	
	ПрочитатьСохраненныеВариантыИзХранилища();
	СформироватьЗаголовокФормы();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиВарианта(ИмяНастройки)
	
	ЗначениеСохраняемойНастройки = Новый Структура;
	ТаблицыИнтерфейса = ПолучитьИзВременногоХранилища(Объект.АдресТаблицИнтерфейса);	
	
	ЗначениеСохраняемойНастройки.Вставить("ОтборПоПериоду",Новый Структура("ПериодПланированияОтборНачало,ПериодПланированияОтборОкончание",ПериодПланированияОтборНачало,ПериодПланированияОтборОкончание));
	СтруктураОтбораПоФильтрам = Новый Структура();
	
	Для Каждого нПоле Из ТаблицыИнтерфейса.ТаблицаДоступныеПоля Цикл
		СтруктураОтбораПоФильтрам.Вставить(нПоле.Код,ЭтаФорма[нПоле.Код]);
	КонецЦикла;
	Для Каждого нПоле Из ТаблицыИнтерфейса.ТаблицаСтроки Цикл
		СтруктураОтбораПоФильтрам.Вставить(нПоле.Код,ЭтаФорма[нПоле.Код]);	
	КонецЦикла;
	Для Каждого нПоле Из ТаблицыИнтерфейса.ТаблицаКолонки Цикл
		СтруктураОтбораПоФильтрам.Вставить(нПоле.Код,ЭтаФорма[нПоле.Код]);	
	КонецЦикла;
	Для Каждого нПоле Из ТаблицыИнтерфейса.ТаблицаСтраницы Цикл
		СтруктураОтбораПоФильтрам.Вставить(нПоле.Код,ЭтаФорма[нПоле.Код]);	
	КонецЦикла;

	ЗначениеСохраняемойНастройки.Вставить("ОтборПоФильтрам",		СтруктураОтбораПоФильтрам);
	ЗначениеСохраняемойНастройки.Вставить("НастройкаШкалыПериодов", ТаблицыИнтерфейса.НастройкаШкалыВремени);

	ЗначениеСохраняемойНастройки.Вставить("ТаблицаСтроки",ТаблицыИнтерфейса.ТаблицаСтроки);	
	ЗначениеСохраняемойНастройки.Вставить("ТаблицаКолонки",ТаблицыИнтерфейса.ТаблицаКолонки);	
    ЗначениеСохраняемойНастройки.Вставить("ТаблицаСтраницы",ТаблицыИнтерфейса.ТаблицаСтраницы);	
    ЗначениеСохраняемойНастройки.Вставить("ТаблицаДоступныеПоля",ТаблицыИнтерфейса.ТаблицаДоступныеПоля);	

	СохраняемаяТаблица = ТаблицыИнтерфейса.ДополнительныеПоля.Скопировать();
	
	ЗначениеСохраняемойНастройки.Вставить("ДополнительныеПоля",СохраняемаяТаблица);	
    ЗначениеСохраняемойНастройки.Вставить("ОтображатьСуммыВДопВалютах",ОтображатьСуммыВДопВалютах);	
	ЗначениеСохраняемойНастройки.Вставить("ВыводитьОбщийИтогПострокам",ВыводитьОбщийИтогПострокам);
	ЗначениеСохраняемойНастройки.Вставить("Масштаб",ЕдиницаИзмерения);	
	ЗначениеСохраняемойНастройки.Вставить("Точность",Точность);
	ЗначениеСохраняемойНастройки.Вставить("Режим",РежимРаботы);	
	ЗначениеСохраняемойНастройки.Вставить("ВариантыДиаграммы",ВариантыДиаграммы);	
	ЗначениеСохраняемойНастройки.Вставить("ДопОтборы",СТ_ДополнительныеНастройки.Настройки.Отбор);
	ЗначениеСохраняемойНастройки.Вставить("БазаДляОтклонений",ТаблицыИнтерфейса.БазаДляОтклонений);
	
	Настройка = Строка(Объект.Бланк.УникальныйИдентификатор());
	УстановитьПривилегированныйРежим(Истина);
	ХранилищеОбщихНастроек.Сохранить((Настройка),ИмяНастройки, ЗначениеСохраняемойНастройки,, ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиВарианта(ИмяНастройки)
	
	СТ = РеквизитФормыВЗначение("Объект");
		
	Настройка = Строка(Бланк.УникальныйИдентификатор());
	ЗначениеСохраняемойНастройки = ХранилищеОбщихНастроек.Загрузить(Настройка,ИмяНастройки,, ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
	
	Если ЗначениеСохраняемойНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;		
	
	Попытка
		ТаблицыИнтерфейса = ПолучитьИзВременногоХранилища(Объект.АдресТаблицИнтерфейса);                          
		ПериодПланированияОтборНачало =  ЗначениеСохраняемойНастройки.ОтборПоПериоду.ПериодПланированияОтборНачало;
		ПериодПланированияОтборОкончание =  ЗначениеСохраняемойНастройки.ОтборПоПериоду.ПериодПланированияОтборОкончание;
		
		Если НЕ ЗначениеСохраняемойНастройки.Свойство("ОтборПоФильтрам") Тогда
			Возврат;
		КонецЕсли;	
		
		Для Каждого СтрФильтр Из ЗначениеСохраняемойНастройки.ОтборПоФильтрам Цикл	
			Попытка			
				ЭтаФорма[СтрФильтр.Ключ] = СтрФильтр.Значение;	
			Исключение
			КонецПопытки;	
		КонецЦикла;	
		
		Если  ЗначениеСохраняемойНастройки.Свойство("ТаблицаСтроки") Тогда		
			ЗагрузитьНастройкиИзмерений(ТаблицыИнтерфейса,ЗначениеСохраняемойНастройки);
		КонецЕсли;	
		
		Если ЗначениеСохраняемойНастройки.Свойство("ДопОтборы") Тогда
			ЗагрузитьНастройкиДопОтборов(ЗначениеСохраняемойНастройки);
		КонецЕсли;
		
		Если ЗначениеСохраняемойНастройки.Свойство("Масштаб") Тогда	
			ЕдиницаИзмерения = ЗначениеСохраняемойНастройки.Масштаб;
		КонецЕсли;
		
		Если ЗначениеСохраняемойНастройки.Свойство("Точность") Тогда	
			Точность = ЗначениеСохраняемойНастройки.Точность;
		КонецЕсли;
		
		Если ЗначениеСохраняемойНастройки.Свойство("ОтображатьСуммыВДопВалютах") Тогда	
			ОтображатьСуммыВДопВалютах = ЗначениеСохраняемойНастройки.ОтображатьСуммыВДопВалютах;
			Элементы.ДопВалюты.Пометка = ОтображатьСуммыВДопВалютах;
		КонецЕсли;
		
		Если ЗначениеСохраняемойНастройки.Свойство("ВыводитьОбщийИтогПострокам") Тогда	
			ВыводитьОбщийИтогПострокам = ЗначениеСохраняемойНастройки.ВыводитьОбщийИтогПострокам;
			Элементы.ВыводитьОбщийИтогПоСтрокам.Пометка = ВыводитьОбщийИтогПострокам;
		КонецЕсли;
		
		Если  ЗначениеСохраняемойНастройки.Свойство("ДополнительныеПоля") Тогда		
			ТаблицыИнтерфейса.ДополнительныеПоля = ЗначениеСохраняемойНастройки.ДополнительныеПоля.Скопировать();
		КонецЕсли;
		
		Если  ЗначениеСохраняемойНастройки.Свойство("БазаДляОтклонений") Тогда		
			ТаблицыИнтерфейса.БазаДляОтклонений = ЗначениеСохраняемойНастройки.БазаДляОтклонений.Скопировать();
		КонецЕсли;

		
		
		СТ.СоздатьПоляФильтров(ЭтаФорма,Бланк);
		СоздатьСводнуюТаблицуСКД(Истина,Истина);	
	Исключение
		
		СтрокаШаблона = Нстр("ru = 'Не удалось прмиенить сохраненную настройку! %1'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ОписаниеОшибки()));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПоследняяСохраненнаяНастройка) Тогда
			СохраненнаяНастройка = ПоследняяСохраненнаяНастройка;
		Иначе
			СохраненнаяНастройка = "ПоУмолчанию";
		КонецЕсли;		
	КонецПопытки;	
		
КонецПроцедуры	

&НаСервере
Процедура УдалитьВариантыНастроек(Варианты)
	
	
	СохраненнаяСтруктура = РегистрыСведений.ВариантыНастроекБланковСТ.СоздатьНаборЗаписей();
	СохраненнаяСтруктура.Отбор.Бланк.Установить(Бланк);
	СохраненнаяСтруктура.Отбор.Пользователь.Установить(ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
	СохраненнаяСтруктура.Прочитать();
	ТзНастроек = СохраненнаяСтруктура.Выгрузить();
	
	Для Каждого ИмяНастройки Из Варианты Цикл
		
		НайденнаяСтрока = ТзНастроек.НайтиСтроки(Новый Структура("ИмяНастройки",ИмяНастройки));
		Если НайденнаяСтрока.Количество()=1 Тогда
			ВариантНастройки = НайденнаяСтрока[0];
			ТзНастроек.Удалить(ВариантНастройки);
			
			Настройка = Строка(Объект.Бланк.УникальныйИдентификатор());
			ХранилищеОбщихНастроек.Удалить(Настройка,ИмяНастройки,ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
				
		КонецЕсли;
		
	КонецЦикла;	
	
	СохраненнаяСтруктура.Загрузить(ТзНастроек);
	СохраненнаяСтруктура.Записать(Истина);	
	
	ПрочитатьСохраненныеВариантыИзХранилища();

	
КонецПроцедуры	

&НаСервере
Функция РасшифроватьЗаголовок(Расшифровка,ТипОбласти,Редактируется,ЭтоЭтапПроекта=Ложь,Владелец = Неопределено,КолонкаИмяТипа=Неопределено)
	
	
	ДанныеРасшифровки          = ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровки);
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		ИмяТекущегоРесурса = Расшифровка[Расшифровка.КодРесурса];
	Иначе
		ИмяТекущегоРесурса = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Значение;
	КонецЕсли;
	
	Если НЕ ТипОбласти = Неопределено Тогда	
		ТипОбласти =ОбщегоНазначенияУХ.ПолучитьСтроковоеПредставлениеТипа(ТипЗнч(ИмяТекущегоРесурса));
	Иначе
		ТипОбласти = "Неопределено";
	КонецЕсли;
	
	
	Если ТипОбласти = "СправочникСсылка.НастройкиСтруктурыБланка" Тогда
		 ТипОбласти = "СправочникСсылка.СтрокиОтчетов";	 
		 Редактируется = Ложь;
		 Возврат ИмяТекущегоРесурса.СтрокаОтчета;

	ИначеЕсли ТипОбласти = "СправочникСсылка.ШкалыПериодов" Тогда
		 ТипОбласти = "Неопределено";	 	
		 Редактируется = Ложь;
		 Возврат Неопределено;

	 КонецЕсли;	
	
	СтруктураАналитик=ПолучитьАналитикиЯчейки(Расшифровка);
	СписокАналитик = Новый СписокЗначений;
	АдресТЗРасшифровок = "";
	ПолучитьСтруктуруТЗРасшифровок(СтруктураАналитик,СписокАналитик,АдресТЗРасшифровок);	
		
	Если СписокАналитик.Количество() = 0 Тогда
		
		Редактируется = Ложь;
		Возврат ИмяТекущегоРесурса;	
		
	Иначе  		
		
		ТзАналитик = ПолучитьИзВременногоХранилища(АдресТЗРасшифровок);
		Редактируется  = ТзАналитик[0].Редактируется;
		ЭтоЭтапПроекта = ТзАналитик[0].ЭтоЭтапПроекта;
		Владелец       = ТзАналитик[0].ТипСубконто;
		КолонкаИмяТипа = ТзАналитик[0].ТипСтрока;
		
		Если ЗначениеЗаполнено(ИмяТекущегоРесурса) ИЛИ (НЕ ЗначениеЗаполнено(Владелец)) Тогда
			
			Возврат ИмяТекущегоРесурса;
			
		Иначе
			
			Возврат Владелец.ТипЗначения.ПривестиЗначение();
					
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции	
	
&НаСервере
Функция ПроверитьСтатусПроцесса()
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания)  Тогда
		Возврат 0; 
	КонецЕсли;
	
	Попытка
		Если ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			Возврат 1;//Задание успешно выполнено
		Иначе	 
			Возврат 2;//Задание выполняется
		КонецЕсли;	
	Исключение
		Возврат 0; //Были ошибки
	КонецПопытки;	
		
КонецФункции

&НаСервере
Процедура ЗаписатьКомментарий(ПолеТабличногоДокументаМакет,ИмяОбласти,Значение)
	
	СТ_ОбработкаОбъект = РеквизитФормыВЗначение("Объект");

	РасчетПоказателей_ = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
	РасчетПоказателей_.ВидОтчета = ВидОтчетаОтбор;
	РасчетПоказателей_.ВалютаОтображения = Константы.ВалютаУправленческогоУчета.Получить();
		
	СТ_ОбработкаОбъект.ВставитьКомментраийВОбласть(РасчетПоказателей_.ТаблицаИзмененныхПоказателей,ПолеТабличногоДокументаМакет,ИмяОбласти,Значение);
	
	
КонецПроцедуры	

&НаСервере
Процедура ПолучитьРабочийГоризонт(ОтборДатаНачалаПериода,ОтборДатаОкончанияПериода);

	Если ТипЗнч(ОтборДатаНачалаПериода) = Тип("Дата") Тогда
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Периоды.Ссылка КАК ПериодПланированияОтборНачало,
		               |	NULL КАК ПериодПланированияОтборОкончание
		               |ИЗ
		               |	Справочник.Периоды КАК Периоды
		               |ГДЕ
		               |	Периоды.ДатаНачала = &ДатаНачала
		               |	И Периоды.Периодичность = &Периодичность
		               |	И Периоды.Произвольный = ЛОЖЬ
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	NULL,
		               |	Периоды.Ссылка
		               |ИЗ
		               |	Справочник.Периоды КАК Периоды
		               |ГДЕ
		               |	Периоды.Периодичность = &Периодичность
		               |	И Периоды.ДатаНачала = &ДатаОкончания
		               |	И Периоды.Произвольный = ЛОЖЬ";
		
		Если Бланк.Периодичность = Перечисления.Периодичность.Месяц Тогда
			Запрос.УстановитьПараметр("ДатаНачала",НачалоМесяца(ОтборДатаНачалаПериода));
			Запрос.УстановитьПараметр("ДатаОкончания",НачалоМесяца(ОтборДатаОкончанияПериода));
		ИначеЕсли Бланк.Периодичность = Перечисления.Периодичность.Квартал Тогда
			Запрос.УстановитьПараметр("ДатаНачала",НачалоКвартала(ОтборДатаНачалаПериода));
			Запрос.УстановитьПараметр("ДатаОкончания",НачалоКвартала(ОтборДатаОкончанияПериода));	
		ИначеЕсли  Бланк.Периодичность = Перечисления.Периодичность.год Тогда
			Запрос.УстановитьПараметр("ДатаНачала",НачалоГода(ОтборДатаНачалаПериода));
			Запрос.УстановитьПараметр("ДатаОкончания",НачалоГода(ОтборДатаОкончанияПериода));	
		Иначе	
			Запрос.УстановитьПараметр("ДатаНачала",(ОтборДатаНачалаПериода));
			Запрос.УстановитьПараметр("ДатаОкончания",(ОтборДатаОкончанияПериода));
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Периодичность",Бланк.Периодичность);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ПериодПланированияОтборНачало) Тогда
				ПериодПланированияОтборНачало =  Выборка.ПериодПланированияОтборНачало
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.ПериодПланированияОтборОкончание) Тогда
				ПериодПланированияОтборОкончание =  Выборка.ПериодПланированияОтборОкончание
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе	
		
		ПериодПланированияОтборОкончание 	= ОтборДатаОкончанияПериода ;
		ПериодПланированияОтборНачало 		= ОтборДатаНачалаПериода;
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Функция ПодготовитьПараметрыДляВызоваСогласования()
	
	  СтруктураПараметров = Новый Структура;
	  СтруктураПараметров.Вставить("Бланк",Бланк);
	  СтруктураПараметров.Вставить("ПериодПланированияОтборНачало",ПериодПланированияОтборНачало);
	  СтруктураПараметров.Вставить("ПериодПланированияОтборОкончание",ПериодПланированияОтборОкончание);
	
	  РабочийОбъект = РеквизитФормыВЗначение("Объект");
	 	  
	  ТЗданные = ПолучитьИзВременногоХранилища(Объект.тзДанныеАдрес);
	  
	  ЕдинственноеЧисло = Ложь;
	  МножественноеЧисло = Ложь;
	  ТекстПоля = "";
	  
	  Если ТЗданные.Колонки.Найти("Организации") = Неопределено тогда
		  ТекстПоля = ", ""Организации""";
		  ЕдинственноеЧисло = Истина;
	  КонецЕсли;
	  Если ТЗданные.Колонки.Найти("Сценарии") = Неопределено тогда
		  МножественноеЧисло = Макс(ЕдинственноеЧисло, Ложь);
		  ТекстПоля = ТекстПоля + ", ""Сценарии""";
		  ЕдинственноеЧисло = Истина;
	  КонецЕсли;
	  Если ТЗданные.Колонки.Найти("Проекты") = Неопределено тогда
		  МножественноеЧисло = Макс(ЕдинственноеЧисло, Ложь);
		  ТекстПоля = ТекстПоля + ", ""Проекты""";
		  ЕдинственноеЧисло = Истина;
	  КонецЕсли;
	  
	  МаксАналитикОтчета = ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(Объект.ВидОтчета);
	  
	  Для ИндексАналитики = 1 По МаксАналитикОтчета Цикл
		  ИндАналитики = Строка(ИндексАналитики);
		  ВидАналитики = Объект.ВидОтчета["ВидАналитики" + ИндАналитики];
		  
		  Если ТЗданные.Колонки.Найти(ВидАналитики.Код) = Неопределено тогда
			  МножественноеЧисло = Макс(ЕдинственноеЧисло, Ложь);
			  ТекстПоля = ТекстПоля + ", """ + ВидАналитики.Наименование + """";
			  ЕдинственноеЧисло = Истина;
		  КонецЕсли;
	  КонецЦикла;
	  
	  Если МножественноеЧисло тогда
		  
		  ТекстСообщения = НСтр("ru = 'В настройках сводной таблицы поля %1 должны быть включены в Отборы, Строки или Колонки'");
		  ТекстСообщения = СтрШаблон(ТекстСообщения, Сред(ТекстПоля, 3));
		  ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		  
		  СтруктураПараметров.Вставить("ОтказАналитика", Истина);
		  Возврат СтруктураПараметров;
		  
	  ИначеЕсли ЕдинственноеЧисло тогда
		  
		  ТекстСообщения = НСтр("ru = 'В настройках сводной таблицы поле %1 должно быть включено в Отборы, Строки или Колонки'");
		  ТекстСообщения = СтрШаблон(ТекстСообщения, Сред(ТекстПоля, 3));
		  ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		  
		  СтруктураПараметров.Вставить("ОтказАналитика", Истина);
		  Возврат СтруктураПараметров;
		  
	  КонецЕсли;
	  	  
	  ТЗданныеКопия = ТЗданные.Скопировать();
	  ТЗданныеКопия.Свернуть("Организации");
	  СтруктураПараметров.Вставить("Организации",ТЗданныеКопия.ВыгрузитьКолонку("Организации"));
	  
	  ТЗданныеКопия = ТЗданные.Скопировать();
	  ТЗданныеКопия.Свернуть("Сценарии");
	  СтруктураПараметров.Вставить("Сценарии",ТЗданныеКопия.ВыгрузитьКолонку("Сценарии"));

	  ТЗданныеКопия = ТЗданные.Скопировать();
	  ТЗданныеКопия.Свернуть("Проекты");
	  СтруктураПараметров.Вставить("Проекты",ТЗданныеКопия.ВыгрузитьКолонку("Проекты"));
	  
	  СтруктураФильтров = Новый Структура;
	  Для ИндексАналитики = 1 По МаксАналитикОтчета Цикл
		  ИндАналитики = Строка(ИндексАналитики);
	      СтруктураФильтров.Вставить("Фильтр_" + Объект.ВидОтчета["ВидАналитики" + ИндАналитики].Код, ЭтаФорма["Фильтр_" + Объект.ВидОтчета["ВидАналитики" + ИндАналитики].Код]);
	  КонецЦикла;
	  
	  ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	  ОбработкаОбъект.ДополнитьПараметрыАналитикой(СтруктураФильтров, СтруктураПараметров);
	  	  
	  Возврат СтруктураПараметров;
	  	
КонецФункции	

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если Не ЗавершениеРаботы Тогда	
		Если Элементы.ГруппаПрименитьОтменить.Доступность Тогда
			Отказ = Истина;
			Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение",ЭтаФорма);
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Все несохраненные данные будут потеряны, закрыть форму?'"), РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;			
		
		Если ИзмененаСтруктура И НЕ РежимРасшифровки Тогда
			Отказ = Истина;
			Оповещение = Новый ОписаниеОповещения("ВопросСохранитьНастройкиПередЗакрытиемЗавершение",ЭтаФорма);
			
			СтрокаШаблона = Нстр("ru = 'Вариант %1 был изменен. Сохранить измененный вариант?'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ПоказатьВопрос(Оповещение, СтрШаблон(СтрокаШаблона, ТекущийВариантНастроек), РежимДиалогаВопрос.ДаНетОтмена);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИзмененРакурсДанных тогда			
			ЗаписатьРакурсДанныхНаСервере();
			ИзмененРакурсДанных = Ложь;
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьИзмененные()
	
	логИзмененныхПоказателей = ПолучитьИзВременногоХранилища(Объект.логИзмененныхДанныхАдрес);
    логИзмененныхПоказателей.Очистить();
	
КонецПроцедуры	
	
Процедура ЗаполнитьВариантыДиаграммы()
	
	Элементы.ВариантыДиаграммы.СписокВыбора.Очистить();
	
	Для Каждого СтрВариант Из ТипДиаграммы Цикл   
		Элементы.ВариантыДиаграммы.СписокВыбора.Добавить(СтрВариант,СтрВариант);   
	КонецЦикла;	   
	
	ВариантыДиаграммы =  ?(ЗначениеЗаполнено(ВариантыДиаграммы),ВариантыДиаграммы,ТипДиаграммы.ГистограммаОбъемная);
	
КонецПроцедуры	
	
Процедура ЗаполнитьРежимыРаботы()
	
	Элементы.РежимРаботы.СписокВыбора.Очистить();
	
	Элементы.РежимРаботы.СписокВыбора.Добавить(Перечисления.РежимыРаботыСводнойТаблицы.Основной, Нстр("ru = 'Основной'"),,БиблиотекаКартинок.Сформировать_Мастер);
	Элементы.РежимРаботы.СписокВыбора.Добавить(Перечисления.РежимыРаботыСводнойТаблицы.ОбратноеРаспределение, Нстр("ru = 'Обратное распределение'"),,БиблиотекаКартинок.Иерархия);
	Элементы.РежимРаботы.СписокВыбора.Добавить(Перечисления.РежимыРаботыСводнойТаблицы.СогласованиеДанных, Нстр("ru = 'Статусы и согласование'"),,БиблиотекаКартинок.НастроитьИсполняющего);
	Элементы.РежимРаботы.СписокВыбора.Добавить(Перечисления.РежимыРаботыСводнойТаблицы.СравнениеСБазой, Нстр("ru = 'Сравнение с базой'"),,БиблиотекаКартинок.ТреугольникиВверхВниз);
	Элементы.РежимРаботы.СписокВыбора.Добавить(Перечисления.РежимыРаботыСводнойТаблицы.Диаграмма, Нстр("ru = 'Диаграмма'"),,БиблиотекаКартинок.ЗначокОтчет);
	
	РежимРаботы =  Объект.РежимРаботы;
	
КонецПроцедуры	
 
  
Функция ПроверитьСогласованиеПоРакурсам()
	
	Возврат ВидотчетаОтбор.ОбъектДляСогласованияЗначений = Перечисления.ОбъектыСогласованияЗначенийПоказателейОтчетов.Ракурс;
	
КонецФункции	 

&НаКлиенте
Процедура ПериодПланированияОтборНачалоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) И ЗначениеЗаполнено(ПериодПланированияОтборОкончание) Тогда
		
		Если Не ПроверитьПериоды(ВыбранноеЗначение,ПериодПланированияОтборОкончание) Тогда
			
			ПериодПланированияОтборОкончание = ВыбранноеЗначение;
			
		КонецЕсли;	
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПериодПланированияОтборОкончаниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) И ЗначениеЗаполнено(ПериодПланированияОтборНачало) Тогда
		
		Если Не ПроверитьПериоды(ПериодПланированияОтборНачало,ВыбранноеЗначение) Тогда
			
			ПериодПланированияОтборНачало = ВыбранноеЗначение;
						
		КонецЕсли;	
		
	КонецЕсли;	

КонецПроцедуры
	 
&НаСервере
Функция ПроверитьПериоды(ПериодНачало,ПериодОкончание)	
	
	Если Не ЗначениеЗаполнено(ПериодНачало) ИЛИ НЕ  ЗначениеЗаполнено(ПериодОкончание) Тогда
	     Возврат Истина;
   	КонецЕсли;	
	
	Если ПериодНачало.ДатаНачала > ПериодОкончание.ДатаНачала Тогда
		 Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина
	
КонецФункции

&НаСервере
Процедура УстановитьОтборыПоПараметрам(АналитикиОтбораИсточникСтрока,ТаблицыИнтерфейса)
	
	АналитикиОтбораИсточник = ПолучитьИзВременногоХранилища(АналитикиОтбораИсточникСтрока);
	Для Каждого СтрОтбор Из АналитикиОтбораИсточник Цикл	
		Если  СтрОтбор.Ключ = "ПоказателиСтрокаОтчета" Тогда
			КодПоиска = "Фильтр_Показатели";	
		Иначе
			КодПоиска = "Фильтр_"+СтрОтбор.Ключ;
		КонецЕсли;
		Если ТаблицыИнтерфейса.ТаблицаСтраницы.НайтиСтроки(Новый Структура("Код",КодПоиска)).Количество()>0 Тогда 
			ЭтаФорма[КодПоиска] = СтрОтбор.Значение;	
		КонецЕсли;			
		
		Если РежимРасшифровки Тогда
			 Продолжить;
		КонецЕсли;	
		
		Если ТаблицыИнтерфейса.ТаблицаКолонки.НайтиСтроки(Новый Структура("Код",КодПоиска)).Количество()>0 Тогда 
			Нотбор = СТ_ДополнительныеНастройки.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
			Нотбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрЗаменить(КодПоиска,"Фильтр_",""));
			Если ТипЗнч(СтрОтбор.Значение) = Тип("Массив") Тогда
				СписокДляОтбора = Новый СписокЗначений;
				СписокДляОтбора.ЗагрузитьЗначения(СтрОтбор.Значение);	 
				Нотбор.ПравоеЗначение = СписокДляОтбора;
				Нотбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ИначеЕсли ТипЗнч(СтрОтбор.Значение) = Тип("СписокЗначений") Тогда	 
				Нотбор.ПравоеЗначение = СтрОтбор.Значение;
				Нотбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе	 
				Нотбор.ПравоеЗначение = СтрОтбор.Значение;
				Нотбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;	 		 
		КонецЕсли;	
		
		Если ТаблицыИнтерфейса.ТаблицаСтроки.НайтиСтроки(Новый Структура("Код",КодПоиска)).Количество()>0 Тогда 
			Нотбор = СТ_ДополнительныеНастройки.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
			Нотбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрЗаменить(КодПоиска,"Фильтр_",""));
			Если ТипЗнч(СтрОтбор.Значение) = Тип("Массив") Тогда
				СписокДляОтбора = Новый СписокЗначений;
				СписокДляОтбора.ЗагрузитьЗначения(СтрОтбор.Значение);	 
				Нотбор.ПравоеЗначение = СписокДляОтбора;
				Нотбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ИначеЕсли ТипЗнч(СтрОтбор.Значение) = Тип("СписокЗначений") Тогда	 
				Нотбор.ПравоеЗначение = СтрОтбор.Значение;
				Нотбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе	 
				Нотбор.ПравоеЗначение = СтрОтбор.Значение;
				Нотбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;	 		 
		КонецЕсли;		
	КонецЦикла;	
	
	
КонецПроцедуры	


&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
		
	ЗаписатьПоследниеНастройкиДляСводнойТаблицы()
				
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботыПриИзменении(Элемент)
	
	Если НЕ Элементы.ГруппаПрименитьОтменить.Доступность Тогда
		РежимРаботыПриИзмененииСервер();
	КонецЕсли;
	
	ИзмененаСтруктура = Истина;
	УстановитьСостояниеНеИспользовать();
	
КонецПроцедуры

&НаСервере
Процедура РежимРаботыПриИзмененииСервер()
	
	Если Не ЗначениеЗаполнено(РежимРаботы) Тогда
		 РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.Основной;
	КонецЕсли;	
	
	Объект.РежимРаботы = РежимРаботы;
	
	Если Объект.РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.Диаграмма Тогда
		
		РежимДиаграммы = Истина;
		РежимОбратноеРаспределение = Ложь;
		Элементы.КомандыРежимаРаботыСДанными.Видимость = Ложь;
		Элементы.КомандыРежимаДиаграммы.Видимость = Истина;
		Элементы.ГруппаПоляСравненияСБазой.Видимость = Ложь;
		Элементы.ГруппаРежимСтатусы.Видимость = Ложь;
      	
	ИначеЕсли Объект.РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.СогласованиеДанных Тогда 	
		
		РежимДиаграммы = Ложь;
		РежимОбратноеРаспределение = Ложь;
		Элементы.КомандыРежимаРаботыСДанными.Видимость = Ложь;
		Элементы.КомандыРежимаДиаграммы.Видимость = Ложь;
		Элементы.ГруппаПоляСравненияСБазой.Видимость = Ложь;
        Элементы.ГруппаРежимСтатусы.Видимость = Истина;
      		
	ИначеЕсли Объект.РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.ОбратноеРаспределение Тогда 	
		
		РежимОбратноеРаспределение = Истина;
		РежимДиаграммы = Ложь;
		Элементы.КомандыРежимаРаботыСДанными.Видимость = Истина;
		Элементы.КомандыРежимаДиаграммы.Видимость = Ложь;
		Элементы.ГруппаПоляСравненияСБазой.Видимость = Ложь;
		Элементы.ГруппаРежимСтатусы.Видимость = Ложь;
		
		
	ИначеЕсли Объект.РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.СравнениеСБазой Тогда	
		
		РежимДиаграммы = Ложь;
		РежимОбратноеРаспределение = Ложь;
		Элементы.КомандыРежимаРаботыСДанными.Видимость = Истина;
		Элементы.КомандыРежимаДиаграммы.Видимость = Ложь;
		Элементы.ГруппаПоляСравненияСБазой.Видимость = Истина;
	    Элементы.ГруппаРежимСтатусы.Видимость = Ложь;
		Элементы.ГруппаПроектыБаза.Видимость = ВидОтчетаОтбор.РазделениеПоПроектам;
		
		ЗаполнитьРеквизитыБазы();
		
		
	ИначеЕсли Объект.РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.Основной Тогда	
		
		РежимДиаграммы = Ложь;
		РежимОбратноеРаспределение = Ложь;
		Элементы.КомандыРежимаРаботыСДанными.Видимость = Истина;
		Элементы.КомандыРежимаДиаграммы.Видимость = Ложь;
		Элементы.ГруппаПоляСравненияСБазой.Видимость = Ложь;
		Элементы.ГруппаРежимСтатусы.Видимость = Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыБазы()
	
	ТаблицыИнтерфейса = ПолучитьИзВременногоХранилища(Объект.АдресТаблицИнтерфейса);
	
	ТекущаяБаза = ТаблицыИнтерфейса.БазаДляОтклонений;
	
	Если НЕ ТекущаяБаза.Количество() = 0 Тогда
		Для Каждого База  Из ТекущаяБаза Цикл
			
			Если НЕ База.Сценарии = "Значение источника" Тогда
				СценарииБазаИспользовать = Истина;
				СценарииБаза = База.Сценарии;
			КонецЕсли;	
			Если НЕ База.Организации = "Значение источника" Тогда
				ОрганизацииБазаИспользовать = Истина;
				ОрганизацииБаза = База.Организации;	
			КонецЕсли;	
			Если НЕ База.Проекты = "Значение источника" Тогда
				ПроектыБазаИспользовать = Истина;
				ПроектыБаза = База.Проекты;
				
			КонецЕсли;	
			Если  ТипЗнч(База.Периоды) = Тип("СправочникСсылка.Периоды") Тогда
				ПериодыБазаИспользовать = Истина;
				ПериодБаза = База.Периоды;
			КонецЕсли;
			
			Если  СтрНайти(База.Периоды,"Сдвиг")>0 Тогда
				ПериодыБазаИспользовать = Ложь;
				СдвигПоПериоду = Число(СтрЗаменить(База.Периоды, Нстр("ru = 'Сдвиг по периоду: '"), ""));
			КонецЕсли;
			
			Прервать;
			
		КонецЦикла; 	
	КонецЕсли;	
		
	УстановитьВидимостьЭлементовСравненияСБазой();
	ПолучитьИнформациюПоСдвигуПериодов();
	
КонецПроцедуры	



&НаКлиенте
Процедура РежимРаботыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ВыбранноеЗначение =  Объект.РежимРаботы Тогда
		Если Элементы.ГруппаПрименитьОтменить.Доступность Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Перед изменением режима необходимо применить или отменить сделанные изменения'"), 10);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДополнительныеОтборы(Команда)
	
	Элементы.ПоказатьДополнительныеОтборы.Пометка   = НЕ Элементы.ПоказатьДополнительныеОтборы.Пометка;	
	Элементы.ПанельНастроекСводнойТаблицы.Видимость = Элементы.ПоказатьДополнительныеОтборы.Пометка;

КонецПроцедуры

&НаСервере
Процедура ПолучитьСтатусЯчейки(Расшифровка)
	
	ТекРасшифровка =ПолучитьСтатусыЯчейки(Расшифровка);	
		
КонецПроцедуры


&НаСервере
Процедура ЗаменитьОбластьКопией(Верх,Лево,Низ,Право)
		
	Приемник = ПолеТабличногоДокументаМакет.Область(Верх,Лево,Низ,Право);
	Источник = КопияТекущейОбласти.Область(Верх,Лево,Низ,Право);
	
	ПолеТабличногоДокументаМакет.ВставитьОбласть(Источник,Приемник,ТипСмещенияТабличногоДокумента.БезСмещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьТрассировку(Команда)
	
	Элементы.ВыводитьТрассировку.Пометка = НЕ Элементы.ВыводитьТрассировку.Пометка;
	Объект.РежимТрассировки =  Элементы.ВыводитьТрассировку.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура БланкОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	 ОпределитьТекущийРежимРаботы(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВариантТаблицы(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ДобавлениеВариантаНастройкиЗавершение", ЭтаФорма);
	Параметры_ = Новый Структура("Бланк,ИмяТекущейНастройки,СписокДоступныхНастроекАдрес",Бланк,ИмяТекущегоВариантаНастройки,ПометитьВХранилище("СоответствиеВариантовНастроекТаблицы"));
	ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаДиалогаСохраненияНастройки",Параметры_,ЭтаФорма,Истина,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВариантТаблицы(Команда)
	
	СтрокаНастройки = СоответствиеВариантовНастроекТаблицы.НайтиСтроки(Новый Структура("ИдентификаторВарианта",Команда.Имя))[0];	
	
	Если СтрокаНастройки.ОсновнаяНастройка Тогда
		 ИмяНастройки = "";
	Иначе	
		 ИмяНастройки = СтрокаНастройки.ИмяВарианта;
	КонецЕсли;	
	
	ПрочитатьНастройкиВарианта(ИмяНастройки);
	
	Для Каждого Эл Из Элементы.СохраненныеВарианты.ПодчиненныеЭлементы Цикл
		 Эл.Пометка = Ложь;
	КонецЦикла;	
	
	Элементы[Команда.Имя].Пометка = Истина;	
	ИмяТекущегоВариантаНастройки = ИмяНастройки;
	СформироватьЗаголовокФормы();
	
КонецПроцедуры

Функция ПометитьВХранилище(Реквизит)
	
	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение(Реквизит),ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции	

&НаКлиенте
Процедура СброситьНастройки(Команда)
	
	ИзмененаСтруктура = Истина;
	ИнициализироватьОбъект(Истина);
	НарисоватьТаблицу(Неопределено);

КонецПроцедуры

&НаСервере
Процедура ОбновитьВарианты();
	СводнаяТаблицаУХ.ЗаполнитьПодменюСохраненныхВариантов(ЭтаФорма,Элементы.СохраненныеВарианты,СоответствиеВариантовНастроекТаблицы);
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокФормы()
	
    ЭтаФорма.Заголовок = НСтр("ru = 'Сводная таблица: '");
	
	Если ИмяТекущегоВариантаНастройки = "" Тогда
		Если ЗначениеЗаполнено(Бланк) Тогда
			ЭтаФорма.Заголовок = ЭтаФорма.Заголовок+Бланк.Наименование;	
		Иначе	
			ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + НСтр("ru = 'Бланк не выбран'");
		КонецЕсли;		
	Иначе	 
		 ЭтаФорма.Заголовок = ЭтаФорма.Заголовок+ИмяТекущегоВариантаНастройки;
	КонецЕсли;	
		
	Если РежимРасшифровки Тогда
		 ЭтаФорма.Заголовок = СтрЗаменить(ЭтаФорма.Заголовок, НСтр("ru = 'Сводная таблица'"), НСтр("ru = 'Расшифровка'"));
	КонецЕсли;	
	
КонецПроцедуры	
	
&НаСервере
Процедура ЗагрузитьНастройкиИзмерений(СтруктураТаблицИнтерфейса,ЗначениеСохраняемойНастройки)
	
	ТаблицаДоступныеПоля   = ЗначениеСохраняемойНастройки.ТаблицаДоступныеПоля.СкопироватьКолонки();
	ТаблицаСтроки		   = ЗначениеСохраняемойНастройки.ТаблицаСтроки.СкопироватьКолонки();
	ТаблицаКолонки         = ЗначениеСохраняемойНастройки.ТаблицаКолонки.СкопироватьКолонки();
	ТаблицаСтраницы        = ЗначениеСохраняемойНастройки.ТаблицаСтраницы.СкопироватьКолонки();
	РазделениеПоПроектам   = ВидОтчетаОтбор.РазделениеПоПроектам;
	
	Для Каждого Стр Из ЗначениеСохраняемойНастройки.ТаблицаДоступныеПоля Цикл	
		
		АналитикаНайдена = Ложь;
		ЭталонноеЗначениеАналитики = СтруктураТаблицИнтерфейса.ДоступныеАналитики.НайтиСтроки(Новый Структура("КодАналитики",СтрЗаменить(Стр.Код,"Фильтр_","")));
		Если ЭталонноеЗначениеАналитики.Количество() = 1 Тогда
			АналитикаРедактируется  = ЭталонноеЗначениеАналитики[0].Редактируется;
			АналитикаИндексКартинки = ЭталонноеЗначениеАналитики[0].ИндексКартинки;
			АналитикаИерархия       = ЭталонноеЗначениеАналитики[0].ПоддерживатьИерархию;
			АналитикаНайдена = Истина;
		КонецЕсли;	
		
		Если ТипЗнч(Стр.ТипСубконто) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные") Тогда	
			Если СтруктураТаблицИнтерфейса.ДоступныеАналитики.НайтиСтроки(Новый Структура("КодАналитики",СтрЗаменить(Стр.Код,"Фильтр_",""))).Количество()=0 Тогда
				Продолжить;
			КонецЕсли;			
		КонецЕсли;	
		
		Если Стр.Код  = "Фильтр_Проекты" И Не РазделениеПоПроектам Тогда
			нИзмерение = ТаблицаСтраницы.Добавить();
			ЗаполнитьЗначенияСвойств(нИзмерение,Стр);	
			Если АналитикаНайдена Тогда
				нИзмерение.Редактируется = АналитикаРедактируется;
				нИзмерение.ИндексКартинки = АналитикаИндексКартинки;
				нИзмерение.ПоддерживатьИерархию = АналитикаИерархия;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;	
		
		нИзмерение = ТаблицаДоступныеПоля.Добавить();
		ЗаполнитьЗначенияСвойств(нИзмерение,Стр);	
		Если АналитикаНайдена Тогда
			нИзмерение.Редактируется = АналитикаРедактируется;
			нИзмерение.ИндексКартинки = АналитикаИндексКартинки;
			нИзмерение.ПоддерживатьИерархию = АналитикаИерархия;
		КонецЕсли;
		
	КонецЦикла;	
	
	Для Каждого Стр Из ЗначениеСохраняемойНастройки.ТаблицаСтроки Цикл	
		
		АналитикаНайдена = Ложь;
		ЭталонноеЗначениеАналитики = СтруктураТаблицИнтерфейса.ДоступныеАналитики.НайтиСтроки(Новый Структура("КодАналитики",СтрЗаменить(Стр.Код,"Фильтр_","")));
		Если ЭталонноеЗначениеАналитики.Количество() = 1 Тогда
			АналитикаРедактируется  = ЭталонноеЗначениеАналитики[0].Редактируется;
			АналитикаИндексКартинки = ЭталонноеЗначениеАналитики[0].ИндексКартинки;
			АналитикаИерархия       = ЭталонноеЗначениеАналитики[0].ПоддерживатьИерархию;
			АналитикаНайдена = Истина;
		КонецЕсли;	
		
		Если ТипЗнч(Стр.ТипСубконто) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные") Тогда	
			Если СтруктураТаблицИнтерфейса.ДоступныеАналитики.НайтиСтроки(Новый Структура("КодАналитики",СтрЗаменить(Стр.Код,"Фильтр_",""))).Количество()=0 Тогда
				Продолжить;
			КонецЕсли;			
		КонецЕсли;	
		
		Если Стр.Код  = "Фильтр_Проекты" И Не РазделениеПоПроектам Тогда
			нИзмерение = ТаблицаСтраницы.Добавить();
			ЗаполнитьЗначенияСвойств(нИзмерение,Стр);	
			Если АналитикаНайдена Тогда
				нИзмерение.Редактируется = АналитикаРедактируется;
				нИзмерение.ИндексКартинки = АналитикаИндексКартинки;
				нИзмерение.ПоддерживатьИерархию = АналитикаИерархия;
			КонецЕсли;
			Продолжить;
		КонецЕсли;	
		
		нИзмерение = ТаблицаСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(нИзмерение,Стр);	
		Если АналитикаНайдена Тогда
			нИзмерение.Редактируется = АналитикаРедактируется;
			нИзмерение.ИндексКартинки = АналитикаИндексКартинки;
			нИзмерение.ПоддерживатьИерархию = АналитикаИерархия;
		КонецЕсли;
		
		
	КонецЦикла;	
	
	Для Каждого Стр Из ЗначениеСохраняемойНастройки.ТаблицаКолонки Цикл	
		АналитикаНайдена = Ложь;
		ЭталонноеЗначениеАналитики = СтруктураТаблицИнтерфейса.ДоступныеАналитики.НайтиСтроки(Новый Структура("КодАналитики",СтрЗаменить(Стр.Код,"Фильтр_","")));
		Если ЭталонноеЗначениеАналитики.Количество() = 1 Тогда
			АналитикаРедактируется  = ЭталонноеЗначениеАналитики[0].Редактируется;
			АналитикаИндексКартинки = ЭталонноеЗначениеАналитики[0].ИндексКартинки;
			АналитикаИерархия       = ЭталонноеЗначениеАналитики[0].ПоддерживатьИерархию;
			АналитикаНайдена = Истина;
		КонецЕсли;	
		
		Если ТипЗнч(Стр.ТипСубконто) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные") Тогда	
			Если СтруктураТаблицИнтерфейса.ДоступныеАналитики.НайтиСтроки(Новый Структура("КодАналитики",СтрЗаменить(Стр.Код,"Фильтр_",""))).Количество()=0 Тогда
				Продолжить;
			КонецЕсли;			
		КонецЕсли;	
		Если Стр.Код  = "Фильтр_Проекты" И Не РазделениеПоПроектам Тогда
			нИзмерение = ТаблицаСтраницы.Добавить();
			ЗаполнитьЗначенияСвойств(нИзмерение,Стр);	
			Если АналитикаНайдена Тогда
				нИзмерение.Редактируется = АналитикаРедактируется;
				нИзмерение.ИндексКартинки = АналитикаИндексКартинки;
				нИзмерение.ПоддерживатьИерархию = АналитикаИерархия;
			КонецЕсли;
			
			
			Продолжить;
		КонецЕсли;	
		
		нИзмерение = ТаблицаКолонки.Добавить();
		ЗаполнитьЗначенияСвойств(нИзмерение,Стр);	
		Если АналитикаНайдена Тогда
			нИзмерение.Редактируется = АналитикаРедактируется;
			нИзмерение.ИндексКартинки = АналитикаИндексКартинки;
			нИзмерение.ПоддерживатьИерархию = АналитикаИерархия;
		КонецЕсли;
		
		
	КонецЦикла;	
	
	Для Каждого Стр Из ЗначениеСохраняемойНастройки.ТаблицаСтраницы Цикл	
		
		АналитикаНайдена = Ложь;
		ЭталонноеЗначениеАналитики = СтруктураТаблицИнтерфейса.ДоступныеАналитики.НайтиСтроки(Новый Структура("КодАналитики",СтрЗаменить(Стр.Код,"Фильтр_","")));
		Если ЭталонноеЗначениеАналитики.Количество() = 1 Тогда
			АналитикаРедактируется  = ЭталонноеЗначениеАналитики[0].Редактируется;
			АналитикаИндексКартинки = ЭталонноеЗначениеАналитики[0].ИндексКартинки;
			АналитикаИерархия       = ЭталонноеЗначениеАналитики[0].ПоддерживатьИерархию;
			АналитикаНайдена = Истина;
		КонецЕсли;	
		
		Если ТипЗнч(Стр.ТипСубконто) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные") Тогда	
			Если СтруктураТаблицИнтерфейса.ДоступныеАналитики.НайтиСтроки(Новый Структура("КодАналитики",СтрЗаменить(Стр.Код,"Фильтр_",""))).Количество()=0 Тогда
				Продолжить;
			КонецЕсли;			
		КонецЕсли;			
		нИзмерение = ТаблицаСтраницы.Добавить();
		ЗаполнитьЗначенияСвойств(нИзмерение,Стр);	
		Если АналитикаНайдена Тогда
			нИзмерение.Редактируется = АналитикаРедактируется;
			нИзмерение.ИндексКартинки = АналитикаИндексКартинки;
			нИзмерение.ПоддерживатьИерархию = АналитикаИерархия;
		КонецЕсли;
		
		
	КонецЦикла;	
	
	СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля   = ТаблицаДоступныеПоля.Скопировать();
	СтруктураТаблицИнтерфейса.ТаблицаСтроки		     = ТаблицаСтроки.Скопировать();
	СтруктураТаблицИнтерфейса.ТаблицаКолонки         = ТаблицаКолонки.Скопировать();
	СтруктураТаблицИнтерфейса.ТаблицаСтраницы        = ТаблицаСтраницы.Скопировать();
	
КонецПроцедуры	

&НаСервере
Процедура ЗагрузитьНастройкиДопОтборов(ЗначениеСохраняемойНастройки)
	
	СохраненныеОтборы   = ЗначениеСохраняемойНастройки.ДопОтборы;
	
	Если  СТ_ДополнительныеНастройки.Настройки.Отбор.Элементы.Количество() = 0 Тогда
		
		Для Каждого сохрОтбор Из  СохраненныеОтборы.Элементы Цикл
			
			//Для Каждого стрТекОтбор Из СТ_ДополнительныеНастройки.Настройки.Отбор.Элементы Цикл		
			стрТекОтбор = СТ_ДополнительныеНастройки.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			стрТекОтбор.ЛевоеЗначение	 =  сохрОтбор.ЛевоеЗначение; 
			стрТекОтбор.Использование 	 = 	сохрОтбор.Использование;
			стрТекОтбор.ПравоеЗначение	 = 	сохрОтбор.ПравоеЗначение;
			стрТекОтбор.ВидСравнения 	 = 	сохрОтбор.ВидСравнения;
			//КонецЕсли;			
		КонецЦикла;		
		
	Иначе	
		
		Для Каждого сохрОтбор Из  СохраненныеОтборы.Элементы Цикл		
			Для Каждого стрТекОтбор Из СТ_ДополнительныеНастройки.Настройки.Отбор.Элементы Цикл		
				Если стрТекОтбор.ЛевоеЗначение	 =  сохрОтбор.ЛевоеЗначение Тогда		
					стрТекОтбор.Использование 	 = 	сохрОтбор.Использование;
					стрТекОтбор.ПравоеЗначение	 = 	сохрОтбор.ПравоеЗначение;
					стрТекОтбор.ВидСравнения 	 = 	сохрОтбор.ВидСравнения;
				КонецЕсли;			
			КонецЦикла;		
		КонецЦикла;		
			
	КонецЕсли;
	

КонецПроцедуры	

&НаСервере
Функция ПолучитьСвязанныйПериод(ИтоговыйПериод)
	
	
	Запрос  = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Периоды.Ссылка,
	|	Периоды.ДатаНачала КАК ДатаНачала
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	Периоды.ДатаНачала = &ДатаНачала
	|	И Периоды.Произвольный = ЛОЖЬ
	|	И Периоды.Периодичность = &Периодичность
	|	И Периоды.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Периоды.Ссылка,
	|	Периоды.ДатаНачала
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	Периоды.ДатаОкончания = &ДатаОкончания
	|	И Периоды.Произвольный = ЛОЖЬ
	|	И Периоды.Периодичность = &Периодичность
	|	И Периоды.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала";
	
	Запрос.УстановитьПараметр("ДатаНачала"   ,ИтоговыйПериод.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",ИтоговыйПериод.ДатаОкончания);
	Запрос.УстановитьПараметр("Периодичность",Объект.Периодичность);

	Возврат Запрос.Выполнить().Выгрузить();
	 
КонецФункции	

&НаКлиенте
Процедура БланкНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//
	//ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор,РежимВыбора", Истина, Ложь,Истина);
	//Оповещение = Новый ОписаниеОповещения("ИзменениеБланкаЗавершение", ЭтаФорма);
	//
	//ОткрытьФорму( "Справочник.БланкиОтчетов.ФормаВыбораСВидамиОтчетов", ПараметрыФормы,,,,,Оповещение);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьОтборы()
	
	ЕстьДопОтбор = Ложь;
	
	Для Каждого Стр Из СТ_ДополнительныеНастройки.Настройки.Отбор.Элементы Цикл	
		Если Стр.Использование Тогда	
			ЕстьДопОтбор = Истина;				
			Прервать;
		КонецЕсли;			
	КонецЦикла;	
		
	Если ЕстьДопОтбор Тогда
		Элементы.ПоказатьДополнительныеОтборы.ЦветФона = ОбщегоНазначенияВызовСервера.ЦветСтиля("ВыборСтандартногоПериодаФонКнопки");
		Элементы.ПоказатьДополнительныеОтборы.Картинка = БиблиотекаКартинок.НастроитьСписок;	
	Иначе	
		Элементы.ПоказатьДополнительныеОтборы.ЦветФона = ОбщегоНазначенияВызовСервера.ЦветСтиля("ЦветФонаФормы");
		Элементы.ПоказатьДополнительныеОтборы.Картинка = БиблиотекаКартинок.Отбор;
	КонецЕсли;	
		
КонецПроцедуры	

&НаКлиенте
Процедура ОрганизацииБазаИспользоватьПриИзменении(Элемент)
	
		
	УстановитьСостояниеНеИспользовать();
	УстановитьВидимостьЭлементовСравненияСБазой();

	
КонецПроцедуры

&НаКлиенте
Процедура СценарииБазаИспользоватьПриИзменении(Элемент)
	
	
	УстановитьСостояниеНеИспользовать();
	УстановитьВидимостьЭлементовСравненияСБазой()

	
КонецПроцедуры

&НаКлиенте
Процедура ПроектыБазаИспользоватьПриИзменении(Элемент)
	
		
	УстановитьСостояниеНеИспользовать();
	УстановитьВидимостьЭлементовСравненияСБазой()

	
КонецПроцедуры

&НаКлиенте
Процедура ПериодыБазаИспользоватьПриИзменении(Элемент)
		
	УстановитьСостояниеНеИспользовать();
	УстановитьВидимостьЭлементовСравненияСБазой();

КонецПроцедуры

&НаКлиенте
Процедура СдвигПоПериодуПриИзменении(Элемент)
	УстановитьСостояниеНеИспользовать();
	ПолучитьИнформациюПоСдвигуПериодов();
	ОбновитьТаблицуБазы();
КонецПроцедуры

&НаКлиенте
Процедура ПериодБазаПриИзменении(Элемент)
	УстановитьСостояниеНеИспользовать();
	ОбновитьТаблицуБазы();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияБазаПриИзменении(Элемент)
	УстановитьСостояниеНеИспользовать();
	ОбновитьТаблицуБазы();
КонецПроцедуры

&НаКлиенте
Процедура СценарииБазаПриИзменении(Элемент)
	УстановитьСостояниеНеИспользовать();
	ОбновитьТаблицуБазы();
КонецПроцедуры

&НаКлиенте
Процедура ПроектыБазаПриИзменении(Элемент)
	УстановитьСостояниеНеИспользовать();
	ОбновитьТаблицуБазы();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСравненияСБазой()
	
	Если ОрганизацииБазаИспользовать Тогда
		Элементы.ОрганизацияБаза.АвтоОтметкаНезаполненного = Истина;
		Элементы.ОрганизацияБаза.ПодсказкаВвода = "";
        Элементы.ОрганизацияБаза.Доступность = Истина;
	Иначе	
		Элементы.ОрганизацияБаза.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ОрганизацияБаза.ПодсказкаВвода = НСтр("ru = 'текущие данные'");
        Элементы.ОрганизацияБаза.Доступность = Ложь;
		ОрганизацияБаза = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	КонецЕсли;	

	Если ПроектыБазаИспользовать Тогда
		Элементы.ПроектыБаза.АвтоОтметкаНезаполненного = Истина;
		Элементы.ПроектыБаза.ПодсказкаВвода = "";
        Элементы.ПроектыБаза.Доступность = Истина;
	Иначе	
		Элементы.ПроектыБаза.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ПроектыБаза.ПодсказкаВвода = НСтр("ru = 'текущие данные'");
        Элементы.ПроектыБаза.Доступность = Ложь;
		ПроектыБаза = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
	КонецЕсли;	
	Если СценарииБазаИспользовать Тогда
		Элементы.СценарииБаза.АвтоОтметкаНезаполненного = Истина;
		Элементы.СценарииБаза.ПодсказкаВвода = "";
        Элементы.СценарииБаза.Доступность = Истина;
	Иначе	
		Элементы.СценарииБаза.АвтоОтметкаНезаполненного = Ложь;
		Элементы.СценарииБаза.ПодсказкаВвода = НСтр("ru = 'текущие данные'");
        Элементы.СценарииБаза.Доступность = Ложь;
		СценарииБаза = ПредопределенноеЗначение("Справочник.Сценарии.ПустаяСсылка");
	КонецЕсли;	

	Элементы.ГруппаСдвигБаза.Видимость 	= НЕ ПериодыБазаИспользовать;
	Элементы.ПериодБаза.Видимость 		= ПериодыБазаИспользовать;
	
	ОбновитьТаблицуБазы();
	
	
КонецПроцедуры	
	
&НаСервере
Процедура ОбновитьТаблицуБазы();
	
	ТаблицыИнтерфейса = ПолучитьИзВременногоХранилища(Объект.АдресТаблицИнтерфейса);

	ТекущаяБаза = ТаблицыИнтерфейса.БазаДляОтклонений;
	ТекущаяБаза.Очистить();
	
	ТаблицыИнтерфейса.БазаДляОтклонений  = ТаблицыИнтерфейса.ДополнительныеПоля.Скопировать(Новый Структура("Использовать,Расчетный",Истина,Ложь));
	
	Для Каждого База Из ТаблицыИнтерфейса.БазаДляОтклонений  Цикл
		
		База.ИндексПоказателя = СтрЗаменить(Строка(Новый УникальныйИдентификатор()) ,"-","") ;
		База.КодПоказателя = База.ИндексПоказателя+"_"+База.КодПоказателя;
		
		Если СценарииБазаИспользовать  Тогда
			База.Сценарии = СценарииБаза;
		КонецЕсли;	
		Если ОрганизацииБазаИспользовать Тогда
			База.Организации = ОрганизацияБаза;
		КонецЕсли;	
		Если ПроектыБазаИспользовать Тогда
			База.Проекты = ПроектыБаза;
		КонецЕсли;	
		Если ПериодыБазаИспользовать  Тогда
			База.Периоды = ПериодБаза;
		ИначеЕсли СдвигПоПериоду<>0 Тогда	
			 База.Периоды = Нстр("ru = 'Сдвиг по периоду: '") + Строка(СдвигПоПериоду);
		КонецЕсли;	

		База.Расчетный  = Истина;
		База.ВидОтклонения  = "АбсОтклонение";
	
	КонецЦикла; 

	Для каждого дПоле Из ТаблицыИнтерфейса.ДополнительныеПоля Цикл
	
		Если дПоле.Расчетный И дПоле.Использовать Тогда		
			 дПоле.Использовать = Ложь;	
		КонецЕсли; 
	
	КонецЦикла;  

	
КонецПроцедуры	

&НаСервере
Процедура ПолучитьИнформациюПоСдвигуПериодов()
	
	ТзПериодовСоСдвигом = Новый ТаблицаЗначений;
	ТзПериодовСоСдвигом.Колонки.Добавить("ИндексБазы",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(2));	
	ТзПериодовСоСдвигом.Колонки.Добавить("ИсходныйПериод",Новый ОписаниеТипов("СправочникСсылка.Периоды"));	
	ТзПериодовСоСдвигом.Колонки.Добавить("БазовыйПериод",Новый ОписаниеТипов("СправочникСсылка.Периоды"));	
	ТзПериодовСоСдвигом.Колонки.Добавить("БазовыйПериодДатаНачала",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТзПериодовСоСдвигом.Колонки.Добавить("Периодичность",Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
	
	СписокПериодов = Новый Массив;
	Если ЗначениеЗАполнено(ПериодПланированияОтборНачало) Тогда
		СписокПериодов.Добавить(ПериодПланированияОтборНачало);
	КонецЕсли;
	Если ЗначениеЗАполнено(ПериодПланированияОтборОкончание) Тогда
		СписокПериодов.Добавить(ПериодПланированияОтборОкончание);
	КонецЕсли;
	
	СводнаяТаблицаУХ.ЗаполнитьТаблицуПериодов(0,ТзПериодовСоСдвигом,СдвигПоПериоду,СписокПериодов,Бланк.Периодичность);
	
	Если ТзПериодовСоСдвигом.Количество()>0 Тогда
		ПериодБазаС = ТзПериодовСоСдвигом[0].БазовыйПериод;
	КонецЕсли;
	
	Если ТзПериодовСоСдвигом.Количество()>1 Тогда
		ПериодБазаПо = ТзПериодовСоСдвигом[1].БазовыйПериод;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура СТ_ДополнительныеНастройкиНастройкиОтборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СТ_ДополнительныеНастройкиНастройкиОтборЛевоеЗначение" Тогда
		
		 СтандартнаяОбработка = Ложь;
		 Возврат;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	Если ТипЗнч(РезультатВыбора) = Тип("СтандартныйПериод") Тогда
		ВыбраннаяПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц");
		Если ЗначениеЗаполнено(Бланк) Тогда
			ВыбраннаяПериодичность = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Бланк, "Периодичность");
		Иначе
			ВыбраннаяПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц");
		КонецЕсли;
		РезультатДатаНачала = РезультатВыбора.ДатаНачала;
		РезультатДатаОкончания = РезультатВыбора.ДатаОкончания;
		Если (ЗначениеЗаполнено(РезультатДатаНачала)) И (ЗначениеЗаполнено(РезультатДатаОкончания)) Тогда
			ПериодыУХПовтИсп.ПроверитьИнтервалПериодов(РезультатДатаНачала, РезультатДатаОкончания);
			ПериодПланированияОтборНачало		 = ОбщегоНазначенияУХ.ПолучитьПериодПоДате(РезультатДатаНачала, ВыбраннаяПериодичность);
			ПериодПланированияОтборОкончание	 = ОбщегоНазначенияУХ.ПолучитьПериодПоДате(РезультатДатаОкончания, ВыбраннаяПериодичность);
			ИзмененПериод = Истина;
			ПолучитьИнформациюПоСдвигуПериодов();
			УстановитьСостояниеНеИспользовать();
		Иначе
			// Не изменяем периоды.
		КонецЕсли;
	ИначеЕсли РезультатВыбора = Неопределено Тогда	
		// Пользователь отказался. Не изменяем периоды.
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный вариант периода ""%Период%"". Операция отменена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%", Строка(РезультатВыбора));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериод(Команда)
	ПустаяДата = Дата(1, 1, 1);
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Если ЗначениеЗаполнено(ПериодПланированияОтборНачало) Тогда
		Диалог.Период.ДатаНачала	 = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ПериодПланированияОтборНачало, "ДатаНачала");
	Иначе
		Диалог.Период.ДатаНачала	 = ПустаяДата;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПериодПланированияОтборОкончание) Тогда
		Диалог.Период.ДатаОкончания	 = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ПериодПланированияОтборОкончание, "ДатаОкончания");
	Иначе
		Диалог.Период.ДатаНачала	 = ПустаяДата;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьПериодЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаСервере
Функция ПолучитьТекущийУОП()
		
	СтруктураФильтровИтог = ПолучитьИзВременногоХранилища(Объект.АдресСтруктураФильтров);
	
	Если СтруктураФильтровИтог.Свойство("Фильтр_Сценарии") Тогда
		 Запрос = Новый Запрос;
		 Запрос.Текст = "ВЫБРАТЬ
		                |	СтатусыПериодовСценариев.УправлениеПериодомСценария КАК УправлениеПериодомСценария
		                |ИЗ
		                |	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
		                |ГДЕ
		                |	СтатусыПериодовСценариев.Периоды.ДатаНачала >= &ДатаНачала
		                |	И СтатусыПериодовСценариев.Периоды.ДатаОкончания <= &ДатаОкончания
		                |	И СтатусыПериодовСценариев.Сценарии = &Сценарии
		                |
		                |СГРУППИРОВАТЬ ПО
		                |	СтатусыПериодовСценариев.УправлениеПериодомСценария";
		 
		 Запрос.УстановитьПараметр("Сценарии",СтруктураФильтровИтог["Фильтр_Сценарии"]);
		 Запрос.УстановитьПараметр("ДатаНачала",СтруктураФильтровИтог.ГоризонтДатаНачала);
         Запрос.УстановитьПараметр("ДатаОкончания",СтруктураФильтровИтог.ГоризонтДатаОкончания);

		 
		 Результат = Запрос.Выполнить().Выгрузить();
		 
		 Если Результат.Количество() = 1 Тогда	 
			  Возврат Результат[0].УправлениеПериодомСценария;
		 Иначе	  
			  Возврат Неопределено;
		 КонецЕсли;	 
		 
	Иначе	
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура ОтборыЗаголовокНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ Элементы.ФильтрПериод.Видимость Тогда	
		Элементы.ФильтрПериод.Видимость = Истина;
		Элементы.ФильтрПериод.Заголовок = Нстр("ru = 'Ключевые параметры:'");	
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриРаскрытииФильтров", 0.2, Истина);
	Иначе		
		Элементы.ФильтрПериод.Видимость = Ложь;
		Элементы.ФильтрПериод.Заголовок = "";
		Элементы.ФильтрПериод.Скрыть();	
		ОбновитьСтрокуКлючевыхПараметров();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриРаскрытииФильтров()
	
	Если  Элементы.ФильтрПериод.Скрыта() Тогда	
		Элементы.ФильтрПериод.Показать();	
		ОтключитьОбработчикОжидания("Подключаемый_РезультатПриРаскрытииФильтров");
		ПодключитьОбработчикОжидания("Подключаемый_РезультатОчисткаЗаголовкаПриЗакрытии", 1, Ложь);
	КонецЕсли;	
		
КонецПроцедуры
	
&НаКлиенте
Процедура Подключаемый_РезультатОчисткаЗаголовкаПриЗакрытии()
	
	Если  Элементы.ФильтрПериод.Скрыта() Тогда	
		Элементы.ФильтрПериод.Видимость = Ложь;
		Элементы.ФильтрПериод.Заголовок = "";
		Элементы.ФильтрПериод.Скрыть();	
		ОтключитьОбработчикОжидания("Подключаемый_РезультатОчисткаЗаголовкаПриЗакрытии");
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтрокуКлючевыхПараметров()
			
	ТекстУстановленногоФильтра = "";
	
	Элементы.НастройкаСкользящегоПлана.Видимость = Ложь;
	
	Если Не ЗначениеЗаполнено(Бланк) Тогда
		 ОтборыЗаголовок = Новый ФорматированнаяСтрока(Нстр("ru = 'Нажмите для установки ключевых параметров сводной таблицы'"));
		 Возврат;
	КонецЕсли;	
	
	МассивСтрок = Новый Массив;
	
	ЖирыйШрифт =  Новый Шрифт(Элементы.ОтборыЗаголовок.Шрифт,,,Истина);
	
	//МассивСтрок.Добавить(Новый ФорматированнаяСтрока("Бланк: ",,Новый Цвет(0,0,255)));
	//МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(Бланк),ЖирыйШрифт,Новый Цвет(0,0,255)));	
	//МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Нстр("ru = 'Режим: '"),, Новый Цвет(0,0,255)));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(РежимРаботы),ЖирыйШрифт,Новый Цвет(0,0,255)));
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Нстр("ru = 'Период с: '"),, Новый Цвет(0,0,255)));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(ЭтаФорма.ПериодПланированияОтборНачало),ЖирыйШрифт,Новый Цвет(0,0,255)));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Нстр("ru = 'по: '"),, Новый Цвет(0,0,255)));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(ЭтаФорма.ПериодПланированияОтборОкончание),ЖирыйШрифт,Новый Цвет(0,0,255)));
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Нстр("ru = 'Валюта: '"),, Новый Цвет(0,0,255)));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(ЭтаФорма.Фильтр_Валюты),ЖирыйШрифт,Новый Цвет(0,0,255)));
	
	Если НЕ ЗначениеЗаполнено(Объект.АдресТаблицИнтерфейса) Тогда	
		ОтборыЗаголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		Возврат;
	КонецЕсли;	
	
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(Объект.АдресТаблицИнтерфейса);
			
	Для Каждого СтрПоле из СтруктураТаблицИнтерфейса.ТаблицаСтраницы Цикл
		
		
		Если СтрПоле.Код = "Фильтр_Проекты" ИЛИ  СтрПоле.Код = "Фильтр_Сценарии" ИЛИ СтрПоле.Код = "Фильтр_Валюты"
			ИЛИ СтрПоле.Код = "Фильтр_Показатели" ИЛИ СтрПоле.Код = "Фильтр_Организации" Тогда
			
		Иначе	
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(СтрПоле.ТипСубконто)+": ",,Новый Цвет(0,0,255)));
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(ЭтаФорма[СтрПоле.Код]),ЖирыйШрифт,Новый Цвет(0,0,255)));
			
		КонецЕсли;	
		
		Если СтрПоле.Код = "Фильтр_Проекты" Тогда
			Если ВидОтчетаОтбор.РазделениеПоПроектам Тогда	
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока("Проект: ",,Новый Цвет(0,0,255)));
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(ЭтаФорма["Фильтр_Проекты"]),ЖирыйШрифт,Новый Цвет(0,0,255)));		
			КонецЕсли;		
		КонецЕсли;
		
		Если СтрПоле.Код = "Фильтр_Сценарии" Тогда			
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока("Сценарий: ",,Новый Цвет(0,0,255)));
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(ЭтаФорма["Фильтр_Сценарии"]),ЖирыйШрифт,Новый Цвет(0,0,255)));
			
			Если ЗначениеЗаполнено(ЭтаФорма["Фильтр_Сценарии"]) И ЭтаФорма["Фильтр_Сценарии"].РежимПланирования = Перечисления.РежимыПланирования.СкользящееПланирование Тогда
				 Элементы.НастройкаСкользящегоПлана.Видимость = Истина;
			КонецЕсли;	
			
		КонецЕсли;
		
		Если СтрПоле.Код = "Фильтр_Показатели" Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока("Строка: ",,Новый Цвет(0,0,255)));
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(ЭтаФорма["Фильтр_Показатели"]),ЖирыйШрифт,Новый Цвет(0,0,255)));
		КонецЕсли;	
		
		Если СтрПоле.Код = "Фильтр_Организации" Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока("Организация: ",,Новый Цвет(0,0,255)));
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(ЭтаФорма["Фильтр_Организации"]),ЖирыйШрифт,Новый Цвет(0,0,255)));	
		КонецЕсли;
		
	КонецЦикла;

	ОтборыЗаголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры	

&НаКлиенте
Процедура ИзменитьПоказателиАктуализация(Команда)
	ИзменитьПоказатели("Актуализация");
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоказателиИндексация(Команда)
	ИзменитьПоказатели("Дефлятор");
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоказателиСуммаПроцент(Команда)
	ИзменитьПоказатели("ЗначениеПроцент");
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьДанныеПослеАктуализации" Тогда
		НарисоватьТаблицу(Неопределено);
	КонецЕсли;	

КонецПроцедуры
	
&НаКлиенте
Процедура РаботаСВерсиями(Команда)
	
	СтруктураПараметров = ПодготовитьПараметрыДляРаботыСВерсиями();	
	
	ОткрытьФорму("Обработка.СверткаВерсий.Форма.ФормаУправляемая", 
	СтруктураПараметров, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыДляРаботыСВерсиями()
	
	СтруктураФильтровИтог = ПолучитьИзВременногоХранилища(Объект.АдресСтруктураФильтров);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МногопериодныйРежим", Ложь);
	СтруктураПараметров.Вставить("РежимСводнойТаблицы", Истина);
	СтруктураПараметров.Вставить("ТекущийБланк", 	Бланк);		
	СтруктураПараметров.Вставить("ВидОтчета"		,ВидОтчетаОтбор);		
	СтруктураПараметров.Вставить("Сценарий",		ЭтаФорма.Фильтр_Сценарии);	
	
	Если СтруктураФильтровИтог.Свойство("Фильтр_Организации") Тогда   
		СтруктураПараметров.Вставить("Организация"		,ЭтаФорма.Фильтр_Организации);
	Иначе	
		СтруктураПараметров.Вставить("Организация"		,Неопределено);
	КонецЕсли;
	
	Если СтруктураФильтровИтог.Свойство("Фильтр_Проекты") Тогда   
		СтруктураПараметров.Вставить("Проект"		,ЭтаФорма.Фильтр_Проекты);
	Иначе	
		СтруктураПараметров.Вставить("Проект"		,Неопределено);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ПериодОтчета",	ПериодПланированияОтборНачало);
	СтруктураПараметров.Вставить("ПериодОкончания",	ПериодПланированияОтборОкончание);
	
	Для Инд =1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		СтруктураПараметров.Вставить("Аналитика"+Инд,Неопределено);
		
		Если ЗначениеЗаполнено(ВидОтчетаОтбор["ВидАналитики"+Строка(Инд)]) Тогда
			
			ВидАналитикиКод = СокрЛП(ВидОтчетаОтбор["ВидАналитики"+Строка(Инд)].Код);
			
			Если  СтруктураФильтровИтог.Свойство("Фильтр_"+ВидАналитикиКод) Тогда
				
				СтруктураПараметров.Вставить("Аналитика"+Инд,СтруктураФильтровИтог["Фильтр_"+ВидАналитикиКод]);
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;	

	Возврат СтруктураПараметров;
	
КонецФункции	

// Скрывает в макете колонки, содержащие области со значеними,
// если такие области не содержат значений в пределах колонки.
//
&НаКлиенте
Процедура УправлениеВидимостьюПустыхСтрок(Макет = Неопределено)
	
	Если Макет = Неопределено Тогда
		Макет = Элементы.ПолеТабличногоДокументаМакет;
	КонецЕсли;
		
	ИндексПервойСтроки = Макет.ВысотаТаблицы + 1;
	ИндексПервойКолонки = Макет.ШиринаТаблицы + 1;
	
	Для НомСтр = 1 по Макет.ВысотаТаблицы Цикл
		Для НомКол = 1 по Макет.ШиринаТаблицы Цикл
			
			ТекОбласть = Макет.Область(НомСтр, НомКол, НомСтр, НомКол);
			
			Попытка
				ЗначениеЧисло = Число(ТекОбласть.Текст);
				ИндексПервойСтроки = Мин(ИндексПервойСтроки, НомСтр);
				ИндексПервойКолонки = Мин(ИндексПервойКолонки, НомКол);
			Исключение
			КонецПопытки;			
		КонецЦикла;
	КонецЦикла;
	
	Если Элементы.ФормаНепустыеСтроки.Пометка Тогда
		
		СписокНеЗаполненных = Новый СписокЗначений;
		СписокЗаполненных = Новый СписокЗначений;
				
		Для НомСтр = ИндексПервойСтроки по Макет.ВысотаТаблицы Цикл
			Для НомКол = ИндексПервойКолонки по Макет.ШиринаТаблицы Цикл
				
				ТекОбласть = Макет.Область(НомСтр, НомКол, НомСтр, НомКол);
				
				Если ЗначениеЗаполнено(ТекОбласть.Текст) И ТекОбласть.Текст <> "0" Тогда
					Если СписокЗаполненных.НайтиПоЗначению(НомСтр) = Неопределено Тогда
						СписокЗаполненных.Добавить(НомСтр);
					КонецЕсли;
				Иначе
					Если СписокНеЗаполненных.НайтиПоЗначению(НомСтр) = Неопределено Тогда
						СписокНеЗаполненных.Добавить(НомСтр);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
				
		Для НомСтр = 1 По Макет.ВысотаТаблицы Цикл
			Если СписокНеЗаполненных.НайтиПоЗначению(НомСтр) <> Неопределено И СписокЗаполненных.НайтиПоЗначению(НомСтр) = Неопределено Тогда
				Макет.Область(НомСтр, 0, НомСтр, 0).Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для НомСтр = 1 По Макет.ВысотаТаблицы Цикл
			Макет.Область(НомСтр, 0, НомСтр, 0).Видимость = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Скрывает в макете колонки, содержащие области со значеними,
// если такие области не содержат значений в пределах колонки.
//
&НаКлиенте
Процедура УправлениеВидимостьюПустыхКолонок(Макет = Неопределено)
	
	Если Макет = Неопределено Тогда
		Макет = Элементы.ПолеТабличногоДокументаМакет;
	КонецЕсли;
		
	ИндексПервойСтроки = Макет.ВысотаТаблицы + 1;
	ИндексПервойКолонки = Макет.ШиринаТаблицы + 1;
	
	Для НомСтр = 1 по Макет.ВысотаТаблицы Цикл
		Для НомКол = 1 по Макет.ШиринаТаблицы Цикл
			
			ТекОбласть = Макет.Область(НомСтр, НомКол, НомСтр, НомКол);
			
			Попытка
				ЗначениеЧисло = Число(ТекОбласть.Текст);
				ИндексПервойСтроки = Мин(ИндексПервойСтроки, НомСтр);
				ИндексПервойКолонки = Мин(ИндексПервойКолонки, НомКол);
			Исключение
			КонецПопытки;			
		КонецЦикла;
	КонецЦикла;
		
	Если Элементы.ФормаНепустыеКолонки.Пометка Тогда
		
		СписокНеЗаполненных = Новый СписокЗначений;
		СписокЗаполненных = Новый СписокЗначений;
				
		Для НомКол = ИндексПервойКолонки по Макет.ШиринаТаблицы Цикл
			Для НомСтр = ИндексПервойСтроки по Макет.ВысотаТаблицы Цикл
						
				ТекОбласть = Макет.Область(НомСтр, НомКол, НомСтр, НомКол);
				
				Если ЗначениеЗаполнено(ТекОбласть.Текст) И ТекОбласть.Текст <> "0" Тогда
					Если СписокЗаполненных.НайтиПоЗначению(НомКол) = Неопределено Тогда
						СписокЗаполненных.Добавить(НомКол);
					КонецЕсли;
				Иначе
					Если СписокНеЗаполненных.НайтиПоЗначению(НомКол) = Неопределено Тогда
						СписокНеЗаполненных.Добавить(НомКол);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
				
		Для НомКол = 1 По Макет.ШиринаТаблицы Цикл
			Если СписокНеЗаполненных.НайтиПоЗначению(НомКол) <> Неопределено И СписокЗаполненных.НайтиПоЗначению(НомКол) = Неопределено Тогда
				Макет.Область(0, НомКол, 0, НомКол).Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для НомКол = 1 По Макет.ШиринаТаблицы Цикл
			Макет.Область(0, НомКол, 0, НомКол).Видимость = Истина;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетПриИзменении(Элемент)
	
	ВосстановитьСверткуСтрокКолонок(ЭтаФорма[Элемент.Имя]);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьСверткуСтрокКолонок(ТабДокумент)
	
	Если Элементы.ФормаНепустыеСтроки.Пометка тогда
		УправлениеВидимостьюПустыхСтрок(ТабДокумент);
	КонецЕсли;
	
	Если Элементы.ФормаНепустыеКолонки.Пометка тогда
		УправлениеВидимостьюПустыхКолонок(ТабДокумент);
	КонецЕсли;
	
КонецПроцедуры
