
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем ТЗДанные Экспорт;
Перем стЛогИзмененийПоказателей Экспорт;
Перем ОсновнойЗапрос Экспорт;

Процедура ЗаполнитьПеременныеОбъекта(СохраненныеНастройки,СтруктураТаблицИнтерфейса) Экспорт
	
	ТЗСтрокАдрес = 					ПоместитьВоВременноеХранилище(СохраненныеНастройки.СхемаНабораСтрок,Новый УникальныйИдентификатор);
	ТЗКолонокАдрес = 				ПоместитьВоВременноеХранилище(СохраненныеНастройки.СхемаНабораКолонок,Новый УникальныйИдентификатор);	
	ОкончательнаяСКДАдрес = 				ПоместитьВоВременноеХранилище(СохраненныеНастройки.ОкончательнаяСКД,Новый УникальныйИдентификатор);
	ОкончательнаяСКДНастройкиАдрес =     ПоместитьВоВременноеХранилище(СохраненныеНастройки.ОкончательнаяСКДНастройки,Новый УникальныйИдентификатор);
	АдресТаблицИнтерфейса =         ПоместитьВоВременноеХранилище(СтруктураТаблицИнтерфейса,Новый УникальныйИдентификатор);
	АдресСтруктураФильтров = ПоместитьВоВременноеХранилище(Новый Структура,Новый УникальныйИдентификатор);

	
КонецПроцедуры
     
Функция СформироватьФинальнуюТаблицу(Запрос,ВыбранныеРесурсы,ТзСтрок,ТзКолонок) Экспорт
			
	ТЗДобавленные = ПолучитьИзВременногоХранилища(ТзДобавленныхАналитикАдрес);
	Для Каждого Стр ИЗ ТЗДобавленные Цикл
		  нСтр =  ТЗДанные.Добавить();
		  ЗаполнитьЗначенияСвойств(нСтр,Стр);
		  нСтр.Показатели = Стр.ПоказательСтрока;
		  нстр.Периоды = ВыбранныйГоризонт;
	 КонецЦикла;	
	ТЗДобавленные.Очистить();
	
	ТЗИзмененные = ПолучитьИзВременногоХранилища(логИзмененныхПоказателейАдрес);
		
	Для Каждого Стр ИЗ ТЗИзмененные Цикл
		
		СтруктураОтбораАналитик = Новый Структура;
		Для Каждого Кол Из ТЗДанные.Колонки Цикл
			
			Если Кол.Имя = "КУдалению" Тогда
				 Продолжить;
			КонецЕсли;	
			
			Если НЕ ВыбранныеРесурсы.Свойство(Кол.Имя) Тогда
				Если Кол.Имя = "Показатели" Тогда
					СтруктураОтбораАналитик.Вставить("Показатели",Стр["ПоказательСтрока"]);
				Иначе	
					Если НЕ ТЗИзмененные.Колонки.Найти(Кол.Имя) = Неопределено Тогда	
						Если НЕ Стр[Кол.Имя]=Неопределено Тогда
							СтруктураОтбораАналитик.Вставить(Кол.Имя,Стр[Кол.Имя]);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		НайденныеСтроки = ТЗДанные.НайтиСтроки(СтруктураОтбораАналитик);
		
		ТекстОтбораАналитик = "";
		
		
		Если НайденныеСтроки.Количество()=1 Тогда
			НайденныеСтроки[0][Стр.ТекущийПоказательКод] =  Стр[Стр.ТекущийПоказательКод];
			НайденныеСтроки[0].Показатели = Стр.ПоказательСтрока;

		Иначе	  
			нСтр =  ТЗДанные.Добавить();
			ЗаполнитьЗначенияСвойств(нСтр,Стр);
			нСтр.Показатели = Стр.ПоказательСтрока;
			
		КонецЕсли;
		
	КонецЦикла;	
	ТЗИзмененные.Очистить();
	
	Запрос.УстановитьПараметр("ТЗСтрок",ТзСтрок);
	Запрос.УстановитьПараметр("ТЗКолонок",ТзКолонок);
	Запрос.УстановитьПараметр("ТЗДанные",ТЗДанные);
	Запрос.УстановитьПараметр("Неопределено",Неопределено);
		
	Результат = Запрос.Выполнить().Выгрузить();	
	
	тзДанныеАдрес = ПоместитьВоВременноеХранилище(ТЗДанные,Новый УникальныйИдентификатор);
	
	Возврат Результат;
	
КонецФункции

Функция ДополнитьТаблицуИзмененнымиДанными(ТЗДанные,ВыбранныеРесурсы,НастройкиИспользуемыхРесурсов) Экспорт
			
	ТЗДобавленные = ПолучитьИзВременногоХранилища(ТзДобавленныхАналитикАдрес);
	Для Каждого Стр ИЗ ТЗДобавленные Цикл
		
		Нужныестроки = ТЗДанные.НайтиСтроки(Стр.СтруктураОтбораСтроки);
		КопияТЗ = ТЗДанные.Скопировать(Нужныестроки);
		КопияТЗ.Свернуть(Стр.ТекстСвертки);
		
		Для Каждого дСтрока ИЗ КопияТЗ Цикл
			нСтр =  ТЗДанные.Добавить();
			ЗаполнитьЗначенияСвойств(нСтр,дСтрока);
			нСтр[Стр.ДобавляемаяАналитикаКод]=Стр[Стр.ДобавляемаяАналитикаКод];
			
			Для Каждого Ресурс Из НастройкиИспользуемыхРесурсов Цикл
				
				Если Ресурс.ВидОтклонения = "" ИЛИ Ресурс.ВидОтклонения = "ТекущееЗначение" Тогда
					нСтр[Ресурс.КодПоказателя]=0;
					
				Иначе	
					нСтр["БАЗА_"+Ресурс.КодПоказателя]=0;
				КонецЕсли;
				
			КонецЦикла;	
		КонецЦикла;		
	КонецЦикла;	
	
	ТЗДобавленные.Очистить(); 
	
	ТЗИзмененные = ПолучитьИзВременногоХранилища(логИзмененныхПоказателейАдрес);
		
	Для Каждого Стр ИЗ ТЗИзмененные Цикл
		
		СтруктураОтбораАналитик = Новый Структура;
		Для Каждого Кол Из ТЗДанные.Колонки Цикл
			
			Если Кол.Имя = "КУдалению" ИЛИ Найти(Кол.Имя,"_ЗначениеВалюта")>0 Тогда
				 Продолжить;
			КонецЕсли;	
			
			Если НЕ ВыбранныеРесурсы.Свойство(Кол.Имя) Тогда
				Если Кол.Имя = "Периоды" Тогда
					СтруктураОтбораАналитик.Вставить("ПериодыСвязанныйПериод",Стр["Периоды"]);
				Иначе	
					Если НЕ ТЗИзмененные.Колонки.Найти(Кол.Имя) = Неопределено Тогда		
						Если НЕ Стр[Кол.Имя]=Неопределено Тогда
							СтруктураОтбораАналитик.Вставить(Кол.Имя,Стр[Кол.Имя]);
						КонецЕсли;		
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		Если СтруктураОтбораАналитик.Свойство("Показатели") И Не ЗначениеЗаполнено(СтруктураОтбораАналитик.Показатели) Тогда
			  СтруктураОтбораАналитик.Удалить("Показатели");
		КонецЕсли;	
		
		НайденныеСтроки = ТЗДанные.НайтиСтроки(СтруктураОтбораАналитик);
		
		ТекстОтбораАналитик = "";
		
		Если НайденныеСтроки.Количество()=1 Тогда	
			НайденныеСтроки[0][Стр.ТекущийПоказательКод] =  Стр[Стр.ТекущийПоказательКод];
			НайденныеСтроки[0].КУдалению = Стр.КУдалению;
		Иначе	  
			нСтр =  ТЗДанные.Добавить();
			ЗаполнитьЗначенияСвойств(нСтр,Стр);
			нСтр.ПоказателиСтрокаОтчета =Стр.ПоказательСтрока;		
		КонецЕсли;
		
	КонецЦикла;	
	
	ТЗИзмененные.Очистить();
	
	Возврат ТЗДанные;
	
КонецФункции

Функция ПолучитьИтоговыйМакет(ПолеТабличногоДокументаМакет,ВыбранныйБланк,Горизонт,СтруктураФильтров,
	ИзмененаСтруктура=Ложь,ВыбранныеРесурсы = Неопределено,ОбновитьДанные=Истина,СТ_ДополнительныеНастройки) Экспорт
	
	Если Бланк<>ВыбранныйБланк Тогда
		 ИнициализироватьКонтекст(ВыбранныйБланк);		 
		 ТзДобавленныхАналитикАдрес = "";
	КонецЕсли;	
		
	Если НЕ ЗначениеЗаполнено(ВыбранныйБланк) Тогда	
		 СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет,Нстр("ru ='Не заполнен вид отчета'"));
		 Возврат "стОшибкаИнициализацииКлючевыхРеквизитов";
	КонецЕсли;			
		
	ОбновитьГоризонт = Истина;
		
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
	КэшАналитикПоказателейСТ = ПолучитьИзВременногоХранилища(КэшАналитикПоказателейСТАдрес);
	СтруктураТаблицИнтерфейса.Вставить("КэшАналитикПоказателейСТ",КэшАналитикПоказателейСТ);

	Если СтруктураТаблицИнтерфейса.ТаблицаВыбранныеРесурсы.Количество() = 0 Тогда
		 СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет,Нстр("ru ='Не заполнен состав показателей в настройках бланка'"));
		 Возврат "стОшибкаИнициализацииКлючевыхРеквизитов";
	КонецЕсли;

	Если СтруктураТаблицИнтерфейса.КэшАналитикПоказателей.Количество() = 0 Тогда
		 СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет,Нстр("ru ='Не заполнен состав строк в настройках'"));
		  Возврат "стОшибкаИнициализацииКлючевыхРеквизитов";
	КонецЕсли;
	
	РежимСравненияСБазой 			  = РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.СравнениеСБазой;
	РежимДиаграммы       			  = РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.Диаграмма;
	РежимОбратногоРаспределения       = РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.ОбратноеРаспределение;
    РежимСтатусы                      = РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.СогласованиеДанных;
	
	ИнициализироватьДопТаблицы(СтруктураТаблицИнтерфейса);

	СтруктураФильтровИтог = ПолучитьИзВременногоХранилища(АдресСтруктураФильтров);	
		
	СтруктураФильтровИтог.Вставить("ВидОтчета",СводнаяТаблицаУХ.ПолучитьИспользуемыеВидыОтчетов(ВыбранныйБланк));
	
	Если  РежимСравненияСБазой И СтруктураТаблицИнтерфейса.БазаДляОтклонений.Количество()=0 Тогда
			СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет,Нстр("ru ='Не выбрана база для отклонений'"));
			Возврат "стОшибкаИнициализацииКлючевыхРеквизитов";	
	КонецЕсли;

	
	Если  НЕ СтруктураТаблицИнтерфейса.ТаблицаСтраницы.Найти("Фильтр_Сценарии","Код")=Неопределено Тогда
		Если НЕ СтруктураФильтровИтог.Свойство("Фильтр_Сценарии") ИЛИ НЕ ЗначениеЗаполнено(СтруктураФильтровИтог["Фильтр_Сценарии"]) Тогда	
			СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет,Нстр("ru ='Не заполнен сценарий'"));
			Возврат "стОшибкаИнициализацииКлючевыхРеквизитов";
		КонецЕсли;
	КонецЕсли;
	
	Если  НЕ СтруктураТаблицИнтерфейса.ТаблицаСтраницы.Найти("Фильтр_Организации","Код")=Неопределено И НЕ СтруктураТаблицИнтерфейса.ТаблицаСтраницы.Найти("Фильтр_Проекты","Код")=Неопределено Тогда
		Если  НЕ ЗначениеЗаполнено(СтруктураФильтровИтог["Фильтр_Проекты"]) И НЕ ЗначениеЗаполнено(СтруктураФильтровИтог["Фильтр_Организации"]) Тогда	
			СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет,Нстр("ru ='Одно из ключевых измерений: проект или организация должно быть выбрано'"));
			Возврат "стОшибкаИнициализацииКлючевыхРеквизитов";
		КонецЕсли;
	КонецЕсли;

    Если  НЕ СтруктураТаблицИнтерфейса.ТаблицаСтраницы.Найти("Фильтр_Показатели","Код")=Неопределено Тогда
		Если НЕ СтруктураФильтровИтог.Свойство("Фильтр_Показатели") ИЛИ НЕ ЗначениеЗаполнено(СтруктураФильтровИтог["Фильтр_Показатели"]) Тогда	
			СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет,Нстр("ru ='Не выбрана строка отчета'"));
			Возврат "стОшибкаИнициализацииКлючевыхРеквизитов";
		КонецЕсли;
	КонецЕсли;

	Если  НЕ СтруктураТаблицИнтерфейса.ТаблицаСтраницы.Найти("Фильтр_Валюты","Код")=Неопределено Тогда
		Если НЕ СтруктураФильтровИтог.Свойство("Фильтр_Валюты") ИЛИ НЕ ЗначениеЗаполнено(СтруктураФильтровИтог["Фильтр_Валюты"]) Тогда	
			СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет,Нстр("ru ='Не выбрана валюта представления данных'"));
			Возврат "стОшибкаИнициализацииКлючевыхРеквизитов";
		КонецЕсли;
	КонецЕсли;

	Если НЕ ВидОтчета.РазделениеПоПроектам Тогда	
		Если  НЕ СтруктураТаблицИнтерфейса.ТаблицаСтраницы.Найти("Фильтр_Проекты","Код")=Неопределено Тогда
			  СтруктураФильтровИтог.Фильтр_Проекты = Справочники.Проекты.ПустаяСсылка();
		КонецЕсли;		
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(СтруктураФильтровИтог.ГоризонтДатаНачала) Тогда	
		 СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет,Нстр("ru ='Не заполнен период начала отбора данных'"));
		 Возврат "стОшибкаИнициализацииКлючевыхРеквизитов";
	КонецЕсли;		
	
	Если НЕ ЗначениеЗаполнено(СтруктураФильтровИтог.ГоризонтДатаОкончания) Тогда	
		 СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет,Нстр("ru ='Не заполнен период окончания отбора данных'"));
		 Возврат "стОшибкаИнициализацииКлючевыхРеквизитов";
	КонецЕсли;	
	
	РежимСводаПоКлючевымАналитикам = Ложь;
	
	Если НЕ СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля.Найти("Фильтр_Организации","Код")=Неопределено Тогда
		 РежимСводаПоКлючевымАналитикам = Истина;
	КонецЕсли;	
	
	Если НЕ СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля.Найти("Фильтр_Проекты","Код")=Неопределено Тогда
		 РежимСводаПоКлючевымАналитикам = Истина;
	КонецЕсли;	
	
	ДоступныеАналитики = 		СтруктураТаблицИнтерфейса.ДоступныеАналитики;
	КэшАналитикПоказателей = 	СтруктураТаблицИнтерфейса.КэшАналитикПоказателей;;
	ВыбранныеПоказатели =  		СтруктураТаблицИнтерфейса.ВыбранныеПоказатели;
	НастройкиПолейД =   		СтруктураТаблицИнтерфейса.ДоступныеПоля;
	НастройкиРасчетаОтклонений = Неопределено;
		
	Если НЕ ВыбранныйБланк.РежимБланка = 1 Тогда
		
		СтрокаШаблона = Нстр("ru = 'Бланк %1 не является бланком сводной таблицы '");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, СокрЛП(Бланк.Наименование)));
		КонецЕсли;
		
		Возврат 0;
	КонецЕсли;
		
	//Инициализация настроек периодов, если не было
	Если СтруктураТаблицИнтерфейса.НастройкаШкалыВремени.Количество()=0 Тогда	
		СтруктураТаблицИнтерфейса.НастройкаШкалыВремени = СводнаяТаблицаУХ.ПолучитьНастройкиШкалыПериодовПоУмолчанию(Бланк).Скопировать();	
	КонецЕсли;	
		
	РежимНарастающегоИтога = СтруктураТаблицИнтерфейса.НастройкаШкалыВремени[0].НарастающийИтог;
		
	ОбновитьСтруктуру = ИзмененаСтруктура;
	Если ГоризонтДатаНачала = СтруктураФильтровИтог.ГоризонтДатаНачала И ГоризонтДатаОкончания = СтруктураФильтровИтог.ГоризонтДатаОкончания Тогда
		ОбновитьГоризонт = Истина;
	Иначе	    
		ОбновитьСтруктуру = Истина;
		ОбновитьГоризонт = Истина;			
	КонецЕсли;
	
	ТаблицаСтроки =    СтруктураТаблицИнтерфейса.ТаблицаСтроки;
	ТаблицаКолонки =   СтруктураТаблицИнтерфейса.ТаблицаКолонки;
	ТаблицаСтраницы =  СтруктураТаблицИнтерфейса.ТаблицаСтраницы;		
		
	Для Каждого Стр ИЗ  ТаблицаСтраницы Цикл
		Если СтруктураФильтровИтог.Свойство(СтрЗаменить(Стр.Код,"Фильтр_","")) Тогда
			СтруктураФильтровИтог.Вставить(Стр.Код,СтруктураФильтров[СтрЗаменить(Стр.Код,"Фильтр_","")]);	
		ИначеЕсли  НЕ СтруктураФильтровИтог.Свойство(Стр.Код) Тогда
			ТипЗ = Новый ОписаниеТипов(Стр.ТипСтрока);
			СтруктураФильтровИтог.Вставить(Стр.Код,ТипЗ.ПривестиЗначение());
		КонецЕсли;
	КонецЦикла;
	
	ДополнитьОтклонениями = Ложь;	
	СхемаСКДЭталон=ПолучитьИзВременногоХранилища(ОкончательнаяСКДАдрес);
	Для Каждого СтрПоле ИЗ СхемаСКДЭталон.НаборыДанных[0].Поля Цикл
		Если  СтрПоле.ПутьКДанным = "Показатели" Тогда
			ПараметрВыбора = СтрПоле.ПараметрыРедактирования.Элементы.Найти("ПараметрыВыбора");
			ПараметрВыбора.Использование = Ложь;	
			НовыйОтбор=ПараметрВыбора.Значение.Добавить();
			НовыйОтбор.Имя = "Отбор.Владелец";
			НовыйОтбор.Значение = Бланк;
			НовыйОтбор=ПараметрВыбора.Значение.Добавить();
			НовыйОтбор.Имя = "Отбор.ИндексЭлемента";
			НовыйОтбор.Значение = 2;
			ПараметрВыбора.Использование = Истина; 		
		КонецЕсли;	
	КонецЦикла;	
	
	СхемаСКД=Новый СхемаКомпоновкиДанных;
	НовыйИстчник=СхемаСКД.ИсточникиДанных.Добавить();
	НовыйИстчник.Имя="Источник1";
	НовыйИстчник.ТипИсточникаДанных="Local";
   
	ВыбранныеРесурсы = СтруктураТаблицИнтерфейса.ДополнительныеПоля.Скопировать(Новый Структура("Расчетный,Использовать",Ложь,Истина));	
	ВыбранныеРесурсы_Структура = Новый Структура;
	
	НастройкиИспользуемыхРесурсов = СтруктураТаблицИнтерфейса.ДополнительныеПоля.Скопировать(Новый Структура("Использовать",Истина));
	
	Если РежимСравненияСБАзой Тогда
	    СводнаяТаблицаУХ.СоздатьОписаниеПолейРесурсов(СтруктураТаблицИнтерфейса,ВыбранныеРесурсы_Структура,СхемаСКД,СхемаСКДЭталон,ОтображатьСуммыВДопВалютах);
	Иначе	
	    СводнаяТаблицаУХ.СоздатьОписаниеПолейРесурсов(СтруктураТаблицИнтерфейса,ВыбранныеРесурсы_Структура,СхемаСКД,СхемаСКДЭталон,ОтображатьСуммыВДопВалютах);
	КонецЕсли; 

	Если ОбновитьСтруктуру Тогда	
		ТаблицаКолонкиИСтроки = ТаблицаСтроки.СкопироватьКолонки();
		ТЗСтрок_= СводнаяТаблицаУХ.ПолучитьСоставСтрок(Бланк,ТаблицаСтроки,ТаблицаКолонки,ТаблицаСтраницы,ТаблицаКолонкиИСтроки,ДоступныеАналитики,КэшАналитикПоказателей);;
		ТзСтрок = СводнаяТаблицаУХ.ОтобратьДанныеПоСтруктуреФильтров(ТзСтрок_,СтруктураФильтровИтог);
		ТЗСтрокСОтборомАдрес = ПоместитьВоВременноеХранилище(ТЗСтрок,Новый УникальныйИдентификатор);
		ТЗСтрокАдрес = ПоместитьВоВременноеХранилище(ТЗСтрок_,Новый УникальныйИдентификатор);
	Иначе	
		
		Если ИзмененОтбор Тогда	
			ТЗСтрок_ = ПолучитьИзВременногоХранилища(ТЗСтрокАдрес);
			ТзСтрок = СводнаяТаблицаУХ.ОтобратьДанныеПоСтруктуреФильтров(ТзСтрок_,СтруктураФильтровИтог);
		Иначе	
			ТЗСтрок = ПолучитьИзВременногоХранилища(ТЗСтрокСОтборомАдрес);	
		КонецЕсли;	                                                          		
	КонецЕсли;
		
	Если ОбновитьГоризонт Тогда
		ТЗКолонок=СводнаяТаблицаУХ.ПолучитьШкалуПериодов(Бланк,ОтображатьТолькоИтогиПоПериодам,СтруктураФильтровИтог.ГоризонтДатаНачала,СтруктураФильтровИтог.ГоризонтДатаОкончания,,СтруктураТаблицИнтерфейса.НастройкаШкалыВремени);		
		ТЗКолонокАдрес = ПоместитьВоВременноеХранилище(ТЗКолонок,Новый УникальныйИдентификатор);
	Иначе	
		ТЗКолонок = ПолучитьИзВременногоХранилища(ТЗКолонокАдрес);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктураФильтровИтог",СтруктураФильтровИтог);
	СтруктураПараметров.Вставить("СтруктураТаблицИнтерфейса",СтруктураТаблицИнтерфейса);
	СтруктураПараметров.Вставить("ВыбранныеРесурсы",ВыбранныеРесурсы);
	СтруктураПараметров.Вставить("ТЗСтрок",ТЗСтрок);
    СтруктураПараметров.Вставить("ТЗКолонок",ТЗКолонок);
    СтруктураПараметров.Вставить("ОтображатьСуммыВДопВалютах",ОтображатьСуммыВДопВалютах);
    СтруктураПараметров.Вставить("Периодичность",Периодичность);
    СтруктураПараметров.Вставить("РежимСравненияСБазой",РежимСравненияСБазой);
    СтруктураПараметров.Вставить("ЧерноваяВерсия",Не ОбновитьДанные);
	СтруктураПараметров.Вставить("ИдентификаторСеанса",ИдентификаторСеанса);	
	ТЗДанные = СводнаяТаблицаУХ.ПолучитьСводныеДанные(СтруктураПараметров);
	
	тзДанныеАдрес = ПоместитьВоВременноеХранилище(ТЗДанные,Новый УникальныйИдентификатор);	
	
	Если ТЗДанные.Колонки.Найти("КУдалению")=Неопределено Тогда
		ТЗДанные.Колонки.Добавить("КУдалению",ОбщегоНазначенияУх.ПолучитьОписаниеТиповБулево());
	КонецЕсли;
		
	Результат = ТЗДанные;	
	
	Если ТипВыгрузки = "ТаблицаЗначений" Тогда
		 Возврат Результат;
	КонецЕсли;	
	
	// 3 выводим предварительный макет...
	ВнешниеНаборыДанных=Новый Структура;
	ВнешниеНаборыДанных.Вставить("мПоказателиРаскрытия",Результат);
    НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[0].Значение=Неопределено;
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[0].Использование=Истина;

	//В Диаграмме
	Если РежимДиаграммы  Тогда
		ТипОбъекта = "Диаграмма";	
	Иначе	
		ТипОбъекта = "Таблица";
	КонецЕсли;
			
	НастройкиФинальнойСхемы = ПолучитьИзВременногоХранилища(ОкончательнаяСКДНастройкиАдрес);
		 
	СтруктураТаблицИнтерфейса.ДополнительныеПараметры.Вставить("Бланк",Бланк);
	
	РежимСкользящегоПланирования = Ложь;
	Если СтруктураФильтровИтог.Свойство("Фильтр_Сценарии") И СтруктураФильтровИтог.Фильтр_Сценарии.РежимПланирования = Перечисления.РежимыПланирования.СкользящееПланирование Тогда
		РежимСкользящегоПланирования = Истина;
	КонецЕсли;	
		
	Если ОбновитьСтруктуру И НЕ РежимДиаграммы Тогда
		
		НастройкиФинальнойСхемы.УсловноеОформление.Элементы.Очистить();
		
		//Дополним условное оформление для статусов
		Если РежимСтатусы Тогда
			СводнаяТаблицаУХ.УстановитьОформлениеСтатусы(НастройкиСхемыСводнойТаблицы,ВыбранныеРесурсы_Структура,Периодичность);
		КонецЕсли;
		
		////////////// Установим  стандартное оформление для показателей и группировок
		Если РежимСводаПоКлючевымАналитикам Тогда
			СводнаяТаблицаУХ.УстановитьОформлениеГруппировокСТ(НастройкиФинальнойСхемы,ТаблицаСтроки,Периодичность
			,РежимОбратногоРаспределения
			,
			,РежимСтатусы
			,РежимНарастающегоИтога
			,РежимСкользящегоПланирования);
		Иначе
			СводнаяТаблицаУХ.УстановитьОформлениеГруппировокСТ(НастройкиФинальнойСхемы,ТаблицаСтроки,Периодичность
			,РежимОбратногоРаспределения
			,НастройкиИспользуемыхРесурсов
			,РежимСтатусы
			,РежимНарастающегоИтога
			,РежимСкользящегоПланирования);	
		КонецЕсли;

		
		ПоляБаза = Неопределено;
		Если РежимСравненияСБазой Тогда
			 ПоляБаза = СтруктураТаблицИнтерфейса.БазаДляОтклонений;	
		КонецЕсли; 

		//Вычисляемые для правила обработки по умолчанию пометить зеленым
		Если РежимСравненияСБазой Тогда
			иРесурсы = СтруктураТаблицИнтерфейса.БазаДляОтклонений;
		Иначе
			иРесурсы = НастройкиИспользуемыхРесурсов;
		КонецЕсли;	
		
		Если НЕ РежимСводаПоКлючевымАналитикам Тогда
			Если СтруктураФильтровИтог.Свойство("Фильтр_Показатели")   Тогда
				СводнаяТаблицаУХ.ОформитьВычисляемые(ВидОтчета,НастройкиФинальнойСхемы,иРесурсы,СтруктураФильтровИтог.Фильтр_Показатели,РежимСравненияСБазой);
			Иначе
				СводнаяТаблицаУХ.ОформитьВычисляемые(ВидОтчета,НастройкиФинальнойСхемы,иРесурсы,,РежимСравненияСБазой);
			КонецЕсли;	
		КонецЕсли;

		//Несуществующие показатели пометить как [Х]
		Если СтруктураФильтровИтог.Свойство("Фильтр_Показатели") Тогда
			СводнаяТаблицаУХ.ОформитьНедоступные(ВидОтчета,НастройкиФинальнойСхемы,НастройкиИспользуемыхРесурсов,КэшАналитикПоказателей,СтруктураФильтровИтог.Фильтр_Показатели);	
		Иначе	
			СводнаяТаблицаУХ.ОформитьНедоступные(ВидОтчета,НастройкиФинальнойСхемы,НастройкиИспользуемыхРесурсов,КэшАналитикПоказателей);
		КонецЕсли;
		//Форматируем нечисловые
		Если СтруктураФильтровИтог.Свойство("Фильтр_Показатели") Тогда
			СводнаяТаблицаУХ.ОформитьНеЧисловые(ВидОтчета,НастройкиФинальнойСхемы,НастройкиИспользуемыхРесурсов,КэшАналитикПоказателей,СтруктураФильтровИтог.Фильтр_Показатели);	
		Иначе	
			СводнаяТаблицаУХ.ОформитьНеЧисловые(ВидОтчета,НастройкиФинальнойСхемы,НастройкиИспользуемыхРесурсов,КэшАналитикПоказателей);
		КонецЕсли;

		Если НЕ РежимСводаПоКлючевымАналитикам Тогда
			СводнаяТаблицаУХ.УстановитьУОДляЯчеекСКомментариями(НастройкиИспользуемыхРесурсов,НастройкиФинальнойСхемы);
		КонецЕсли;

	
		НастройкиСхемыСводнойТаблицы.ЗагрузитьНастройки(НастройкиФинальнойСхемы);
		
		//Добавить сортировки по всем полям таблицы
		НастройкиСхемыСводнойТаблицы.Настройки.Порядок.Элементы.Очистить();
		СводнаяТаблицаУХ.УстановитьПредставлениеГруппировокСТ(СхемаСКДЭталон,НастройкиСхемыСводнойТаблицы,ТаблицаСтроки,ТаблицаКолонки);
		
		
		Если  СтруктураТаблицИнтерфейса.ДополнительныеПараметры.Свойство("ВыводитьОбщийИтогПоКолонкам") И СтруктураТаблицИнтерфейса.ДополнительныеПараметры["ВыводитьОбщийИтогПоКолонкам"] Тогда
			НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[6].Использование=Истина;
			НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[6].Значение=РасположениеИтоговКомпоновкиДанных.Начало;
		Иначе
			НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[6].Использование=Истина;
			НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[6].Значение=РасположениеИтоговКомпоновкиДанных.Нет;
		КонецЕсли;
		
		Если  СтруктураТаблицИнтерфейса.ДополнительныеПараметры.Свойство("ВыводитьОбщийИтогПоСтрокам") И СтруктураТаблицИнтерфейса.ДополнительныеПараметры["ВыводитьОбщийИтогПоСтрокам"] Тогда
			
			НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[7].Использование=Истина;
			НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[7].Значение=РасположениеИтоговКомпоновкиДанных.Начало;
		Иначе
			НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[7].Использование=Истина;
			НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[7].Значение=РасположениеИтоговКомпоновкиДанных.Нет;
			
		КонецЕсли;

		////////////// Обновим структуру группировок 
		Если РежимСравненияСБазой Тогда
			СводнаяТаблицаУХ.ПреобразоватьНастройкиКонечнойСхемы(ТипОбъекта,ВыбранныеРесурсы,НастройкиСхемыСводнойТаблицы.Настройки,ТаблицаСтроки,ТаблицаКолонки,ИерархияГруппировокСтрок,ИерархияГруппировокКолонок,НастройкиИспользуемыхРесурсов,ОтображатьСуммыВДопВалютах,
			ОтображатьТолькоИтогиПоПериодам,Периодичность,,СтруктураТаблицИнтерфейса.БазаДляОтклонений);
		Иначе	
			СводнаяТаблицаУХ.ПреобразоватьНастройкиКонечнойСхемы(ТипОбъекта,ВыбранныеРесурсы,НастройкиСхемыСводнойТаблицы.Настройки,ТаблицаСтроки,ТаблицаКолонки,ИерархияГруппировокСтрок,ИерархияГруппировокКолонок,НастройкиИспользуемыхРесурсов,ОтображатьСуммыВДопВалютах,
			ОтображатьТолькоИтогиПоПериодам,Периодичность);	
		КонецЕсли;
				////////////// Установим  оформление для агрегированных  группировок	
		Если СтруктураФильтров.Свойство("Фильтр_Показатели") Тогда
			ПоказательОтбор = СтруктураФильтров.Фильтр_Показатели;
		КонецЕсли;
		СводнаяТаблицаУХ.ОформитьУровниГруппировокПоказателией(КэшАналитикПоказателейСТ,НастройкиИспользуемыхРесурсов,НастройкиСхемыСводнойТаблицы.Настройки,СтруктураТаблицИнтерфейса,ПоказательОтбор,РежимОбратногоРаспределения,Периодичность);
		
		НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[1].Значение=РасположениеИтоговКомпоновкиДанных.Авто;
		
		НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[13].Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[13].Использование=Истина;
					
	ИначеЕсли 	РежимДиаграммы Тогда
		
		////////////// Обновим структуру группировок 
		НастройкиФинальнойСхемы.УсловноеОформление.Элементы.Очистить();
		
		НастройкиСхемыСводнойТаблицы.ЗагрузитьНастройки(НастройкиФинальнойСхемы);
		
		СводнаяТаблицаУХ.ПреобразоватьНастройкиКонечнойСхемы(ТипОбъекта,ВыбранныеРесурсы,НастройкиСхемыСводнойТаблицы.Настройки,ТаблицаСтроки,ТаблицаКолонки,ИерархияГруппировокСтрок,ИерархияГруппировокКолонок,НастройкиИспользуемыхРесурсов,
		Ложь,ОтображатьТолькоИтогиПоПериодам,Периодичность);
		
	Иначе 	
		НастройкиСхемыСводнойТаблицы.ЗагрузитьНастройки(НастройкиФинальнойСхемы);
		Если  СтруктураТаблицИнтерфейса.ДополнительныеПараметры.Свойство("ВыводитьОбщийИтогПоКолонкам") И СтруктураТаблицИнтерфейса.ДополнительныеПараметры["ВыводитьОбщийИтогПоКолонкам"] Тогда
			НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[6].Использование=Истина;
			НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[6].Значение=РасположениеИтоговКомпоновкиДанных.Начало;
		Иначе
			НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[6].Использование=Истина;
			НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[6].Значение=РасположениеИтоговКомпоновкиДанных.Нет;
		КонецЕсли;
		
		Если  СтруктураТаблицИнтерфейса.ДополнительныеПараметры.Свойство("ВыводитьОбщийИтогПоСтрокам") И СтруктураТаблицИнтерфейса.ДополнительныеПараметры["ВыводитьОбщийИтогПоСтрокам"] Тогда	
			НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[7].Использование=Истина;
			НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[7].Значение=РасположениеИтоговКомпоновкиДанных.Начало;
		Иначе
			НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[7].Использование=Истина;
			НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[7].Значение=РасположениеИтоговКомпоновкиДанных.Нет;	
		КонецЕсли;
		
	КонецЕсли;
	
	ПредставлениеОтборов = "";
		
	Если НЕ СТ_ДополнительныеНастройки = Неопределено Тогда
		СводнаяТаблицаУХ.ЗаполнитьНстройкиДополнительныхОтборов(ОкончательнаяСКДАдрес,НастройкиСхемыСводнойТаблицы,СТ_ДополнительныеНастройки,СтруктураТаблицИнтерфейса,ПредставлениеОтборов);
	КонецЕсли;	
	
	Если СтруктураФильтровИтог.Свойство("Фильтр_Показатели") Тогда
		Если СтруктураФильтровИтог.Фильтр_Показатели.ПодавлятьИерархиюПоПериодам Тогда
			ЭлементУсловногоОформления =НастройкиСхемыСводнойТаблицы.Настройки.УсловноеОформление.Элементы.Добавить();
			
			ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ПолеОтбора.ЛевоеЗначение =Новый ПолеКомпоновкиДанных("Периоды.Периодичность");
			ПолеОтбора.ПравоеЗначение =Периодичность;
			ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
			
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", " ");
			Для Каждого Ресурс ИЗ ВыбранныеРесурсы Цикл	
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Ресурс.КодПоказателя);
				ОформляемоеПоле.Использование = Истина;	
			КонецЦикла;
			
		КонецЕсли;	
	Иначе	
		
		Для Каждого Ресурс ИЗ ВыбранныеРесурсы Цикл		
			ЭлементУсловногоОформления =НастройкиСхемыСводнойТаблицы.Настройки.УсловноеОформление.Элементы.Добавить();
            ЭлементУсловногоОформления.ИспользоватьВЗаголовке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
			ЭлементУсловногоОформления.ИспользоватьВЗаголовкеПолей = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;

			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Ресурс.КодПоказателя);
			ОформляемоеПоле.Использование = Истина;
				
			ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ПолеОтбора.ЛевоеЗначение =Новый ПолеКомпоновкиДанных("СпособРасчетаИтогаПоПериоду_"+Ресурс.КодПоказателя);
			ПолеОтбора.ПравоеЗначение =Перечисления.ВидыИтоговПоказателяПоПериоду.НеРассчитывать;
			ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			
			ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ПолеОтбора.ЛевоеЗначение =Новый ПолеКомпоновкиДанных("Периоды.Периодичность");
			ПолеОтбора.ПравоеЗначение =Периодичность;
			ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", " ");	
		КонецЦикла;
		
	КонецЕсли;	
				
	//Выводим окончательный макет
	Если РежимДиаграммы  Тогда
		ВывестиВДиаграмму(ПолеТабличногоДокументаМакет,СхемаСКДЭталон,ВнешниеНаборыДанных,НастройкиСхемыСводнойТаблицы,НастройкиИспользуемыхРесурсов)	
	Иначе
		ДокументРезультат=Новый ТабличныйДокумент;
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

		
		ВывестиВТаблицу(ДокументРезультат,СхемаСКДЭталон,ВнешниеНаборыДанных,НастройкиСхемыСводнойТаблицы,ВыбранныеРесурсы,НастройкиИспользуемыхРесурсов,ДанныеРасшифровки);
		
		ВывестиКомментарии(ДокументРезультат,Тзданные,СтруктураТаблицИнтерфейса,ДанныеРасшифровки);
		
		Если ИерархияГруппировокСтрок Тогда
			СводнаяТаблицаУХ.ФорматироватьЗаголовкиИерархии(ВыбранныйБланк.ИерархияГруппировокСтрок,ВыбранныйБланк.ИерархияГруппировокКолонок,
			ПолеТабличногоДокументаМакет,ДокументРезультат,ВыбранныеРесурсы, СтруктураТаблицИнтерфейса.ДополнительныеПараметры,ТЗДанные,ПредставлениеОтборов);
		Иначе
			СводнаяТаблицаУХ.ФорматироватьЗаголовкиБезИерархии(ВыбранныйБланк.ИерархияГруппировокСтрок,ВыбранныйБланк.ИерархияГруппировокКолонок,
			ПолеТабличногоДокументаМакет,ДокументРезультат,ВыбранныеРесурсы, СтруктураТаблицИнтерфейса.ДополнительныеПараметры,ТЗДанные);
		КонецЕсли;
		
		Если ДокументРезультат.ВысотаТаблицы = 0 ИЛИ ДокументРезультат.ВысотаТаблицы = ДокументРезультат.ФиксацияСверху Тогда			
			Если НЕ СтруктураФильтровИтог.Свойство("Фильтр_Показатели") Тогда
				СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет,Нстр("ru = 'Нет данных, удовлетворяющих текущим отборам'"));
			КонецЕсли;
		КонецЕсли;	
		
		
		
	КонецЕсли;
	
	АдресСтруктураФильтров = ПоместитьВоВременноеХранилище(СтруктураФильтровИтог,Новый УникальныйИдентификатор);
	ОкончательнаяСКДНастройкиАдрес = ПоместитьВоВременноеХранилище(НастройкиСхемыСводнойТаблицы.Настройки,Новый УникальныйИдентификатор);
	
	ГоризонтДатаНачала = СтруктураФильтровИтог.ГоризонтДатаНачала; 
	ГоризонтДатаОкончания = СтруктураФильтровИтог.ГоризонтДатаОкончания; 
	
	Если логИзмененныхДанныхАдрес = "" Тогда
		оТзИзмененныхПоказателей  = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
		ТзИзмененныхПоказателей   = оТзИзмененныхПоказателей.ТаблицаИзмененныхПоказателей.ВыгрузитьКолонки();
		ТзИзмененныхПоказателей.Колонки.Добавить("ID",Новый ОписаниеТипов("УникальныйИдентификатор"));
		логИзмененныхДанныхАдрес  = ПоместитьВоВременноеХранилище(ТзИзмененныхПоказателей,Новый УникальныйИдентификатор);
	КонецЕсли;	
	
	Возврат  ПолеТабличногоДокументаМакет;
	
КонецФункции	
	
Функция ИнициализироватьКонтекст(ВыбранныйБланк = Неопределено) Экспорт
	
	Если НазначениеТаблицы = Перечисления.НазначенияИспользованияСводнойТаблицы.Данные Тогда
		ИнициализироватьКонтекстДанные(ВыбранныйБланк);	
	ИначеЕсли НазначениеТаблицы = Перечисления.НазначенияИспользованияСводнойТаблицы.УправлениеДоступностьюПоказателей Тогда
		ИнициализироватьКонтекстДоступность();	
	ИначеЕсли НазначениеТаблицы = Перечисления.НазначенияИспользованияСводнойТаблицы.МатрицаПолномочий Тогда	
		ИнициализироватьКонтекстПолномочия();
	КонецЕсли;
			
КонецФункции

Функция  ИнициализироватьКонтекстДанные(ВыбранныйБланк = Неопределено)		
		
	Если НЕ ВыбранныйБланк = Неопределено  Тогда
		 Бланк = ВыбранныйБланк;
	КонецЕсли;	
		
	СохраненнаяСтруктура = РегистрыСведений.СохраненныеМакетыБланков.СоздатьНаборЗаписей();
	СохраненнаяСтруктура.Отбор.Бланк.Установить(Бланк);
	СохраненнаяСтруктура.Прочитать();
	Если СохраненнаяСтруктура.Количество()=0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СохраненныеНастройки = СохраненнаяСтруктура[0].СохраненныйМакет.Получить();
	
	СтруктураТаблицИнтерфейса = СводнаяТаблицаУХ.ПолучитьОписаниеТаблицИнтерфейса();
	ТаблицаДоступныеПоля =    СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля;
	ТаблицаВыбранныеРесурсы = СтруктураТаблицИнтерфейса.ТаблицаВыбранныеРесурсы;
	ТаблицаСтраницы = СтруктураТаблицИнтерфейса.ТаблицаСтраницы;
	ТаблицаКолонки = СтруктураТаблицИнтерфейса.ТаблицаКолонки;
    ТаблицаСтроки = СтруктураТаблицИнтерфейса.ТаблицаСтроки;
	КэшАналитикПоказателей = СтруктураТаблицИнтерфейса.КэшАналитикПоказателей;
	ДоступныеАналитики =     СтруктураТаблицИнтерфейса.ДоступныеАналитики;
	ВыбранныеПоказатели =    СтруктураТаблицИнтерфейса.ВыбранныеПоказатели;
	ДоступныеПоля =          СтруктураТаблицИнтерфейса.ДоступныеПоля;
	
	КэшАналитикПоказателейСТ = Новый ТаблицаЗначений;
	СводнаяТаблицаУХ.ЗаполнитьДоступныеПоля(ТаблицаДоступныеПоля,Бланк.Владелец,Бланк,КэшАналитикПоказателей,ДоступныеАналитики,СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели,КэшАналитикПоказателейСТ);
	
	КэшАналитикПоказателейСТАдрес = ПоместитьВоВременноеХранилище(КэшАналитикПоказателейСТ,Новый УникальныйИдентификатор);
	
	Нполе = ДоступныеПоля.Строки.Добавить();	
	Нполе.Поле = "";
	Для Каждого дПоле из ТаблицаДоступныеПоля Цикл
		нНполе =  Нполе.Строки.Добавить();
		нНполе.ПолеСиноним = СтрЗаменить(дПоле.Код,"Фильтр_","");
	КонецЦикла;
	
	СводнаяТаблицаУХ.ПолучитьТаблицуВыбранныхПоказателей(Бланк,АдресТаблицИнтерфейса,СтруктураТаблицИнтерфейса);
		
	СводнаяТаблицаУХ.ЗаполнитьРесурсы(Бланк,ТаблицаВыбранныеРесурсы);
	СводнаяТаблицаУХ.ЗаполнитьЗначенияОсей(Бланк,ТаблицаДоступныеПоля,ТаблицаСтраницы,ТаблицаКолонки,ТаблицаСтроки);
		
	ВыбранныеСтроки =  КэшАналитикПоказателей.ВыгрузитьКолонку("Строка");
	ВыбранныеКолонки = ТаблицаВыбранныеРесурсы.ВыгрузитьКолонку("Ресурс");

	ВыбранныеПоказатели.ЗагрузитьЗначения(СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.ВыгрузитьКолонку("Показатель"));	
	
	ЗаполнитьПеременныеОбъекта(СохраненныеНастройки,СтруктураТаблицИнтерфейса);
		
КонецФункции

Функция  ИнициализироватьКонтекстДоступность()		
					
	СтруктураТаблицИнтерфейса = СводнаяТаблицаУХ.ПолучитьОписаниеТаблицИнтерфейса();
	ТаблицаДоступныеПоля =    СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля;
	ТаблицаВыбранныеРесурсы = СтруктураТаблицИнтерфейса.ТаблицаВыбранныеРесурсы;
	ТаблицаСтраницы = СтруктураТаблицИнтерфейса.ТаблицаСтраницы;
	ТаблицаКолонки = СтруктураТаблицИнтерфейса.ТаблицаКолонки;
    ТаблицаСтроки = СтруктураТаблицИнтерфейса.ТаблицаСтроки;
	КэшАналитикПоказателей = СтруктураТаблицИнтерфейса.КэшАналитикПоказателей;
	ДоступныеАналитики =     СтруктураТаблицИнтерфейса.ДоступныеАналитики;
	ВыбранныеПоказатели =    СтруктураТаблицИнтерфейса.ВыбранныеПоказатели;
	ДоступныеПоля =          СтруктураТаблицИнтерфейса.ДоступныеПоля;
	
	СводнаяТаблицаУХ.ЗаполнитьДоступныеПоляУправленияДоступностью(ТаблицаДоступныеПоля,ДоступныеАналитики);	
	СводнаяТаблицаУХ.ЗаполнитьРесурсы(Константы.ИтоговыйВидОтчетаБДР.Получить(),ТаблицаВыбранныеРесурсы);	
	
	Нполе = ДоступныеПоля.Строки.Добавить();	
	Нполе.Поле = "";
	Для Каждого дПоле из ТаблицаДоступныеПоля Цикл
		нНполе =  Нполе.Строки.Добавить();
		нНполе.ПолеСиноним = СтрЗаменить(дПоле.Код,"Фильтр_","");
	КонецЦикла;
	
	МассивУдаляемыхПолей = Новый Массив;
	Для Каждого СтрИзмерение Из  ТаблицаДоступныеПоля Цикл
		ЕстьСохраненныеЭлементы = Истина;
		Если СтрИзмерение.Код = "Фильтр_Периоды" Тогда
			нЭлемент = ТаблицаКолонки.Добавить();
			ЗаполнитьЗначенияСвойств(нЭлемент,СтрИзмерение);
		ИначеЕсли СтрИзмерение.Код = "Фильтр_Организации" Тогда 
			нЭлемент = ТаблицаСтроки.Добавить();
			ЗаполнитьЗначенияСвойств(нЭлемент,СтрИзмерение);
		ИначеЕсли   СтрИзмерение.Код = "Фильтр_Сценарии" Тогда 
			нЭлемент = ТаблицаСтраницы.Добавить();
			ЗаполнитьЗначенияСвойств(нЭлемент,СтрИзмерение);
		КонецЕсли;
		ИсключаемыйЭлемент = ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код",СтрИзмерение.Код));
		Если ИсключаемыйЭлемент.Количество() = 1 Тогда
			МассивУдаляемыхПолей.Добавить(ИсключаемыйЭлемент[0]);	 
		КонецЕсли;	
	КонецЦикла;

	Для Каждого уЭлемент Из МассивУдаляемыхПолей Цикл
		  ТаблицаДоступныеПоля.Удалить(уЭлемент);
	КонецЦикла;	
	
	ВыбранныеСтроки =  КэшАналитикПоказателей.ВыгрузитьКолонку("Строка");
	ВыбранныеКолонки = ТаблицаВыбранныеРесурсы.ВыгрузитьКолонку("Ресурс");

	СводнаяТаблицаУХ.ЗаполнитьВыбранныеПоказатели(ВыбранныеСтроки,ВыбранныеКолонки,ВыбранныеПоказатели);

	СохраненныеНастройки = Новый Структура();
	
	ТЗСтрокАдрес = 					ПоместитьВоВременноеХранилище(Неопределено,Новый УникальныйИдентификатор);
	ТЗКолонокАдрес = 				ПоместитьВоВременноеХранилище(Неопределено,Новый УникальныйИдентификатор);	
	ОкончательнаяСКДАдрес = 		ПоместитьВоВременноеХранилище(ПолучитьОбщийМакет("ШаблонТаблицыУправленияДанными"),Новый УникальныйИдентификатор);
	ОкончательнаяСКДНастройкиАдрес =     ПоместитьВоВременноеХранилище(ПолучитьОбщийМакет("ШаблонТаблицыУправленияДанными").НастройкиПоУмолчанию,Новый УникальныйИдентификатор);
	АдресТаблицИнтерфейса =         ПоместитьВоВременноеХранилище(СтруктураТаблицИнтерфейса,Новый УникальныйИдентификатор);
	АдресСтруктураФильтров = ПоместитьВоВременноеХранилище(Новый Структура,Новый УникальныйИдентификатор);

	   	
КонецФункции

Функция  ИнициализироватьКонтекстПолномочия()		
					
	СтруктураТаблицИнтерфейса = СводнаяТаблицаУХ.ПолучитьОписаниеТаблицИнтерфейса();
	ТаблицаДоступныеПоля =    СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля;
	ТаблицаВыбранныеРесурсы = СтруктураТаблицИнтерфейса.ТаблицаВыбранныеРесурсы;
	ТаблицаСтраницы = СтруктураТаблицИнтерфейса.ТаблицаСтраницы;
	ТаблицаКолонки = СтруктураТаблицИнтерфейса.ТаблицаКолонки;
    ТаблицаСтроки = СтруктураТаблицИнтерфейса.ТаблицаСтроки;
	КэшАналитикПоказателей = СтруктураТаблицИнтерфейса.КэшАналитикПоказателей;
	ДоступныеАналитики =     СтруктураТаблицИнтерфейса.ДоступныеАналитики;
	ВыбранныеПоказатели =    СтруктураТаблицИнтерфейса.ВыбранныеПоказатели;
	ДоступныеПоля =          СтруктураТаблицИнтерфейса.ДоступныеПоля;
	
	СводнаяТаблицаУХ.ЗаполнитьДоступныеПоляМатрицаПолномочий(ТаблицаДоступныеПоля);	
	
	Нстр = ТаблицаВыбранныеРесурсы.Добавить();
	Нстр.ПредставлениеРесурса = "Согласование";
	Нстр.Ресурс = "Согласование";

	Нстр = ТаблицаВыбранныеРесурсы.Добавить();
	Нстр.ПредставлениеРесурса = "Исполняющий";
	Нстр.Ресурс = "Исполняющий";

	
	Нполе = ДоступныеПоля.Строки.Добавить();	
	Нполе.Поле = "";
	Для Каждого дПоле из ТаблицаДоступныеПоля Цикл
		нНполе =  Нполе.Строки.Добавить();
		нНполе.ПолеСиноним = СтрЗаменить(дПоле.Код,"Фильтр_","");
	КонецЦикла;
	
	МассивУдаляемыхПолей = Новый Массив;
	Для Каждого СтрИзмерение Из  ТаблицаДоступныеПоля Цикл
		ЕстьСохраненныеЭлементы = Истина;
		Если  СтрИзмерение.Код = "Фильтр_ШаблонДокументаБД"  Тогда
			нЭлемент = ТаблицаСтраницы.Добавить();
			ЗаполнитьЗначенияСвойств(нЭлемент,СтрИзмерение);
			ИсключаемыйЭлемент = ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код",СтрИзмерение.Код));
			Если ИсключаемыйЭлемент.Количество() = 1 Тогда
				МассивУдаляемыхПолей.Добавить(ИсключаемыйЭлемент[0]);	 
			КонецЕсли;	
		ИначеЕсли  СтрИзмерение.Код = "Фильтр_Организация" Тогда
			нЭлемент = ТаблицаСтроки.Добавить();
			ЗаполнитьЗначенияСвойств(нЭлемент,СтрИзмерение);
			ИсключаемыйЭлемент = ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код",СтрИзмерение.Код));
			Если ИсключаемыйЭлемент.Количество() = 1 Тогда
				МассивУдаляемыхПолей.Добавить(ИсключаемыйЭлемент[0]);	 
			КонецЕсли;	
		ИначеЕсли СтрИзмерение.Код = "Фильтр_Проект" Тогда	
			нЭлемент = ТаблицаКолонки.Добавить();
			ЗаполнитьЗначенияСвойств(нЭлемент,СтрИзмерение);
			ИсключаемыйЭлемент = ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код",СтрИзмерение.Код));
			Если ИсключаемыйЭлемент.Количество() = 1 Тогда
				МассивУдаляемыхПолей.Добавить(ИсключаемыйЭлемент[0]);	 
			КонецЕсли;	

		КонецЕсли;
		
	КонецЦикла;

	Для Каждого уЭлемент Из МассивУдаляемыхПолей Цикл
		  ТаблицаДоступныеПоля.Удалить(уЭлемент);
	КонецЦикла;	
	
	ВыбранныеСтроки =  КэшАналитикПоказателей.ВыгрузитьКолонку("Строка");
	ВыбранныеКолонки = ТаблицаВыбранныеРесурсы.ВыгрузитьКолонку("Ресурс");

	СводнаяТаблицаУХ.ЗаполнитьВыбранныеПоказатели(ВыбранныеСтроки,ВыбранныеКолонки,ВыбранныеПоказатели);

	СохраненныеНастройки = Новый Структура();
	
	ТЗСтрокАдрес = 					ПоместитьВоВременноеХранилище(Неопределено,Новый УникальныйИдентификатор);
	ТЗКолонокАдрес = 				ПоместитьВоВременноеХранилище(Неопределено,Новый УникальныйИдентификатор);	
	ОкончательнаяСКДАдрес = 		ПоместитьВоВременноеХранилище(Обработки.СводнаяТаблица.ПолучитьМакет("ШаблонТаблицыМатрицаПолномочий"),Новый УникальныйИдентификатор);
	ОкончательнаяСКДНастройкиАдрес =     ПоместитьВоВременноеХранилище(Обработки.СводнаяТаблица.ПолучитьМакет("ШаблонТаблицыМатрицаПолномочий").НастройкиПоУмолчанию,Новый УникальныйИдентификатор);
	АдресТаблицИнтерфейса =         ПоместитьВоВременноеХранилище(СтруктураТаблицИнтерфейса,Новый УникальныйИдентификатор);
	АдресСтруктураФильтров = ПоместитьВоВременноеХранилище(Новый Структура,Новый УникальныйИдентификатор);

	   	
КонецФункции

Процедура ВывестиВДиаграмму(ПолеТабличногоДокументаМакет,СхемаСКДЭталон,ВнешниеНаборыДанных,НастройкиСхемыСводнойТаблицы,НастройкиИспользуемыхРесурсов)
	
	КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	ПолеТабличногоДокументаМакет.Очистить();
	
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[9].Значение = ВариантыДиаграммы;

	СхемаСКДЭталон.ПоляИтога.Очистить();
	
	Для Каждого ПолеРесурса ИЗ НастройкиИспользуемыхРесурсов Цикл
		
		ПолеИтога=СхемаСКДЭталон.ПоляИтога.Добавить();	
		ПолеИтога.ПутьКДанным=ПолеРесурса.КодПоказателя;
        ПолеИтога.Выражение="Сумма("+ПолеРесурса.КодПоказателя+")";
		
		Если Не ПолеРесурса.Расчетный Тогда
			Нпл = НастройкиСхемыСводнойТаблицы.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			Нпл.Поле=Новый ПолеКомпоновкиДанных(ПолеРесурса.КодПоказателя);
		КонецЕсли;
		
	КонецЦикла;
		
	МакетКомпоновки=КомпоновщикМакета.Выполнить(СхемаСКДЭталон,НастройкиСхемыСводнойТаблицы.Настройки,ДанныеРасшифровки);
	ПроцессорКомпоновкиДанных=Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных,ДанныеРасшифровки);
	
	ПроцессорВывода=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ПолеТабличногоДокументаМакет);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	АдресХранилищаДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки,Новый УникальныйИдентификатор);
		
КонецПроцедуры

Процедура ВывестиВТаблицу(ДокументРезультат,СхемаСКДЭталон,ВнешниеНаборыДанных,НастройкиСхемыСводнойТаблицы,ПоляРесурсов,НастройкиРасчетаПоказателей,ДанныеРасшифровки=Неопределено,ТекущийУОП=Неопределено)
	
	КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;
	Если ДанныеРасшифровки=Неопределено Тогда
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КонецЕсли;
	
	Если НЕ КраткоеПредставлениеПериода Тогда
		СхемаСКДЭталон.НаборыДанных.НаборРаскрытие.Поля[0].ВыражениеПредставления = "Периоды.Наименование";
	КонецЕсли;	
	
	Если  Масштаб = "" Тогда
		Если  Бланк.ЕдиницаИзмеренияПоУмолчанию = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
			Масштаб = "Ед";
		ИначеЕсли Бланк.ЕдиницаИзмеренияПоУмолчанию = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
			Масштаб = "Тыс";	
		ИначеЕсли Бланк.ЕдиницаИзмеренияПоУмолчанию = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
			Масштаб = "Миллионы";	  
		КонецЕсли;	
	КонецЕсли;       
	
	
	Если РежимСравненияСБазой Тогда	
		СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
		СводнаяТаблицаУХ.УстановитьФорматВывода(НастройкиСхемыСводнойТаблицы.Настройки,Масштаб,Точность,ПоляРесурсов,СтруктураТаблицИнтерфейса.БазаДляОтклонений,ОтображатьСуммыВДопВалютах);		 
	Иначе	 
		СводнаяТаблицаУХ.УстановитьФорматВывода(НастройкиСхемыСводнойТаблицы.Настройки,Масштаб,Точность,ПоляРесурсов,НастройкиРасчетаПоказателей,ОтображатьСуммыВДопВалютах);
	КонецЕсли; 
		
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
	КэшАналитикПоказателей = 	СтруктураТаблицИнтерфейса.КэшАналитикПоказателей;
	СтруктураФильтровИтог = ПолучитьИзВременногоХранилища(АдресСтруктураФильтров);
	
	Если СтруктураФильтровИтог.Свойство("Фильтр_Показатели") Тогда
		СводнаяТаблицаУХ.ОформитьНемасштабируемые(ВидОтчета,НастройкиСхемыСводнойТаблицы.Настройки,НастройкиРасчетаПоказателей,КэшАналитикПоказателей,СтруктураФильтровИтог.Фильтр_Показатели,Точность);	
	Иначе	
		СводнаяТаблицаУХ.ОформитьНемасштабируемые(ВидОтчета,НастройкиСхемыСводнойТаблицы.Настройки,НастройкиРасчетаПоказателей,КэшАналитикПоказателей,,Точность);
	КонецЕсли;

	Нпорядок = НастройкиСхемыСводнойТаблицы.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	Нпорядок.Использование = Истина;
	Нпорядок.Поле = Новый ПолеКомпоновкиДанных("Показатель.Код");
	
    УстановитьУсловноеОформлениеГруппировокСкользящегоПланирования(СтруктураФильтровИтог,СтруктураТаблицИнтерфейса,НастройкиСхемыСводнойТаблицы);	
	
	Если Не ЗначениеЗаполнено(СхемаСКДЭталон.НаборыДанных.НаборРаскрытие.Поля[2].ВыражениеПредставления) Тогда
		СхемаСКДЭталон.НаборыДанных.НаборРаскрытие.Поля[2].ВыражениеПредставления = "Показатели.СтрокаОтчета";
	КонецЕсли;
	
	ОтборыКУдалению = Новый Массив;
	ТаблицыИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
	ТаблицаДоступныеПоля = неопределено;
	
	Если ТипЗнч(ТаблицыИнтерфейса) = Тип("Структура") тогда
		ТаблицыИнтерфейса.Свойство("ТаблицаДоступныеПоля", ТаблицаДоступныеПоля);
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаДоступныеПоля) = Тип("ТаблицаЗначений")
		И ТаблицаДоступныеПоля.Количество() > 0 тогда
		
		Для Каждого ПолеОтбора Из НастройкиСхемыСводнойТаблицы.Настройки.Отбор.Элементы Цикл
			
			ЛевоеЗначениеСтрока = СокрЛП(Строка(ПолеОтбора.ЛевоеЗначение));
			ПозицияТочки = СтрНайти(ЛевоеЗначениеСтрока, ".");
			ЛевоеЗначениеСтрока = ?(ПозицияТочки > 0, Лев(ЛевоеЗначениеСтрока, ПозицияТочки - 1), ЛевоеЗначениеСтрока);
			
			ПредставлениеКода = "Фильтр_" + СтрЗаменить(ЛевоеЗначениеСтрока, "_ЭтоГруппа", "");
			
			Если ТаблицаДоступныеПоля.Найти(ПредставлениеКода, "Код") <> неопределено тогда
				ОтборыКУдалению.Добавить(ПолеОтбора);
				Продолжить;
			КонецЕсли;
			
			Если Найти(ЛевоеЗначениеСтрока, "_ЭтоГруппа") = 0 тогда
				Продолжить;
			КонецЕсли;
			
			Если СхемаСКДЭталон.НаборыДанных.НаборРаскрытие.Поля.Найти(ПолеОтбора.ЛевоеЗначение) = неопределено тогда
				ОтборыКУдалению.Добавить(ПолеОтбора);
			КонецЕсли;
						
		КонецЦикла;
		
	Иначе
		
		Для Каждого ПолеОтбора Из НастройкиСхемыСводнойТаблицы.Настройки.Отбор.Элементы Цикл
			
			Если Найти(Строка(ПолеОтбора.ЛевоеЗначение), "_ЭтоГруппа") = 0 тогда
				Продолжить;
			КонецЕсли;
			
			Если СхемаСКДЭталон.НаборыДанных.НаборРаскрытие.Поля.Найти(ПолеОтбора.ЛевоеЗначение) = неопределено тогда
				ОтборыКУдалению.Добавить(ПолеОтбора);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ОтборУдалить Из ОтборыКУдалению Цикл
		НастройкиСхемыСводнойТаблицы.Настройки.Отбор.Элементы.Удалить(ОтборУдалить);
	КонецЦикла;
	
	МакетКомпоновки=КомпоновщикМакета.Выполнить(СхемаСКДЭталон,НастройкиСхемыСводнойТаблицы.Настройки,ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных=Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных,ДанныеРасшифровки);
		
	ПроцессорВывода=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	АдресХранилищаДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки,Новый УникальныйИдентификатор);
		
КонецПроцедуры

Процедура СоздатьПоляФильтров(Форма, ВыбранныйБланк) Экспорт
		   
	Если Не ЗначениеЗаполнено(АдресТаблицИнтерфейса) Тогда
		ИнициализироватьКонтекст(ВыбранныйБланк);	
		Бланк = ВыбранныйБланк;	
	КонецЕсли;
		
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
		
	ОновнаяПодгруппа = Форма.Элементы.ГруппаДополнительныеФильтры;
	
	МассивУдаляемых = Новый Массив;
	
	Для Каждого Поле_ ИЗ ОновнаяПодгруппа.ПодчиненныеЭлементы Цикл
		МассивУдаляемых.Добавить(Поле_);
	КонецЦикла;
	
	Для Каждого уЭлемент Из МассивУдаляемых Цикл
		Форма.Элементы.Удалить(уЭлемент);
	КонецЦикла;
			
	Для Каждого СтрПоле из СтруктураТаблицИнтерфейса.ТаблицаСтраницы Цикл
				
		КодПоля = СтрПоле.Код;
		ЭлементТаблицаДанных =  Форма.Элементы.Найти("Элемент_"+КодПоля);	
		Если  ЭлементТаблицаДанных = Неопределено Тогда
			ЭлементТаблицаДанных  = Форма.Элементы.Добавить("Элемент_"+КодПоля, Тип("ПолеФормы"), ОновнаяПодгруппа);
			ЭлементТаблицаДанных.ПутьКДанным  = КодПоля;
			ЭлементТаблицаДанных.Вид = ВидПоляФормы.ПолеВвода;
			ЭлементТаблицаДанных.УстановитьДействие("ПриИзменении","ПриИзмененииПоляОтбора");
			ЭлементТаблицаДанных.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
			ЭлементТаблицаДанных.Ширина = 30;
			ЭлементТаблицаДанных.МаксимальнаяШирина = 30;
			ЭлементТаблицаДанных.АвтоМаксимальнаяШирина = Ложь;
			ЭлементТаблицаДанных.РастягиватьПоГоризонтали = Истина;
			ЭлементТаблицаДанных.КнопкаОткрытия = Истина;
			ЭлементТаблицаДанных.КнопкаВыпадающегоСписка = Истина;				
		КонецЕсли;
		
		Если СтрПоле.Код = "Фильтр_Проекты" Тогда
			Если ВидОтчета.РазделениеПоПроектам Тогда
				
				Если ЗначениеЗаполнено(ОтборПроект) Тогда
					Форма["Фильтр_Проекты"] = ОтборПроект;
				КонецЕсли;		
				НовыйПараметр = Новый ПараметрВыбора("Отбор.Проект", Истина);
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НовыйПараметр);
				НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
				Форма.Элементы.Элемент_Фильтр_Проекты.ПараметрыВыбора = НовыеПараметры;	
				Форма.Элементы.Элемент_Фильтр_Проекты.АвтоОтметкаНезаполненного = Истина;				
			Иначе	
				 Форма.Элементы.Элемент_Фильтр_Проекты.Видимость = Ложь;	
				 Форма["Фильтр_Проекты"] = Справочники.Проекты.ПустаяСсылка();
			КонецЕсли;		
			
						
		КонецЕсли;
		
		Если СтрПоле.Код = "Фильтр_Сценарии" Тогда
			Если ЗначениеЗаполнено(Бланк.Периодичность) Тогда	
				НовыйМассив = Новый Массив;
				НовыйМассив.Добавить(Бланк.Периодичность);
				НовыйМассив.Добавить(Перечисления.Периодичность.ПустаяСсылка());
				
				МассивЗнченийПараметров  = Новый ФиксированныйМассив(НовыйМассив);
				НовыйПараметр = Новый ПараметрВыбора("Отбор.Периодичность", МассивЗнченийПараметров);
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НовыйПараметр);
				НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		
				Форма.Элементы.Элемент_Фильтр_Сценарии.ПараметрыВыбора = НовыеПараметры;
				Форма.Элементы.Элемент_Фильтр_Сценарии.АвтоОтметкаНезаполненного = Истина;	
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОтборСценарий) Тогда
				Форма["Фильтр_Сценарии"] = ОтборСценарий;
			КонецЕсли;	
		КонецЕсли;
		
		Если СтрПоле.Код = "Фильтр_Валюты" Тогда	
			Форма.Элементы.Элемент_Фильтр_Валюты.АвтоОтметкаНезаполненного = Истина;
			Если Не ЗначениеЗаполнено(Форма["Фильтр_Валюты"]) Тогда
				Форма["Фильтр_Валюты"] = Константы.ВалютаУправленческогоУчета.Получить();
			КонецЕсли;
		КонецЕсли;	
		
		Если СтрПоле.Код = "Фильтр_Показатели" Тогда
						
			Форма.Элементы.Элемент_Фильтр_Показатели.АвтоОтметкаНезаполненного = Истина;
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	НастройкиСтруктурыБланка.СтрокаОтчета КАК Ссылка
			|ИЗ
			|	Справочник.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
			|ГДЕ
			|	НастройкиСтруктурыБланка.Владелец = &Владелец
			|	И НастройкиСтруктурыБланка.ИндексЭлемента = 2";
			
			Запрос.УстановитьПараметр("Владелец",ВыбранныйБланк);
			
			НовыйМассив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
									
			МассивЗнченийПараметров  = Новый ФиксированныйМассив(НовыйМассив);
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", МассивЗнченийПараметров);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Форма.Элементы.Элемент_Фильтр_Показатели.ПараметрыВыбора = НовыеПараметры;
		
		КонецЕсли;	

		Если СтрПоле.Код = "Фильтр_Организации" Тогда
			Форма.Элементы.Элемент_Фильтр_Организации.АвтоОтметкаНезаполненного = Истина;
			Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
				Форма["Фильтр_Организации"] = ОтборОрганизация;
			КонецЕсли;				
			
		КонецЕсли;
			
	КонецЦикла;

	
КонецПроцедуры	

Процедура УстановитьУсловноеОформлениеГруппировокСкользящегоПланирования(СтруктураФильтровИтог,СтруктураТаблицИнтерфейса,НастройкиСхемыСводнойТаблицы);
	
	Если НЕ СтруктураТаблицИнтерфейса.Свойство("НастройкиСкользящегоПланирования") Тогда
		Возврат;
	КонецЕсли;	
	
	НастройкиСкользящегоПланирования = СтруктураТаблицИнтерфейса.НастройкиСкользящегоПланирования;
	
	ЭлементУсловногоОформления = НастройкиСхемыСводнойТаблицы.Настройки.УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("МаксимальнаяШирина", 1);
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Периоды");
	ОформляемоеПоле.Использование = Истина;			
	
	
	НгруппировкаОтбор = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НгруппировкаОтбор.Использование 	= Истина;
	НгруппировкаОтбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Периоды.Ссылка");
	НгруппировкаОтбор.ВидСравнения  	= ВидСравненияКомпоновкиДанных.ВСписке; 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаНачалаДиапазона"			,СтруктураФильтровИтог.ГоризонтДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончанияДиапазона"		,СтруктураФильтровИтог.ГоризонтДатаОкончания);
	СтруктураПараметров.Вставить("ДатаГраницыОткрытогоПериода"	,НастройкиСкользящегоПланирования.ГраницаАктуализации.ДатаНачала);
	СтруктураПараметров.Вставить("ПериодичностьОсновная"		,НастройкиСкользящегоПланирования.ТекущаяПериодичность);
	СтруктураПараметров.Вставить("ГраницаОткрытогоПериода"		,НастройкиСкользящегоПланирования.ГраницаАктуализации);
	
	
	Если  НастройкиСкользящегоПланирования.ИспользоватьГруппировкуПериодовСреднесрочную Тогда
		СтруктураПараметров.Вставить("ГраницаСреднесрочнойГруппировки"			,НастройкиСкользящегоПланирования.ГраницаСреднесрочнойГруппировки);
		СтруктураПараметров.Вставить("ПериодичностьСреднесрочнойГруппировки"	,НастройкиСкользящегоПланирования.ПериодичностьСреднесрочнойГруппировки);
	Иначе		
		СтруктураПараметров.Вставить("ГраницаСреднесрочнойГруппировки",Неопределено);
		СтруктураПараметров.Вставить("ПериодичностьСреднесрочнойГруппировки",Неопределено);		
	КонецЕсли;
		
	СтруктураПараметров.Вставить("ТекущаяШкалаПериодов",СтруктураТаблицИнтерфейса.НастройкаШкалыВремени[0].Ссылка);
	
	НгруппировкаОтбор.ПравоеЗначение 	= СводнаяТаблицаУХ.ПолучитьИсключаемыеПериоды(СтруктураПараметров);
	НгруппировкаОтбор.Применение	 	= ТипПримененияОтбораКомпоновкиДанных.Иерархия; 
	
КонецПроцедуры	



#Область РаботаСКомандамиСводнойТаблицыДанные

Функция ПолучитьАналитикиЯчейкиСУчетомОтборов(Расшифровка,ДанныеРасшифровки=Неопределено) Экспорт
	
	Если ДанныеРасшифровки=Неопределено Тогда
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровки);
	КонецЕсли;	
	
	СтруктураПолей = Новый Структура;
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);

	ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,Расшифровка,,,СтруктураПолей);
				
	ДоступныеАналитики = 		СтруктураТаблицИнтерфейса.ДоступныеАналитики;
	КэшАналитикПоказателей = 	СтруктураТаблицИнтерфейса.КэшАналитикПоказателей;;
	ВыбранныеПоказатели =  		СтруктураТаблицИнтерфейса.ВыбранныеПоказатели;
	НастройкиПолейД =   		СтруктураТаблицИнтерфейса.ДоступныеПоля;
    ТаблицаСтраницы =           СтруктураТаблицИнтерфейса.ТаблицаСтраницы;
	СтруктураФильтровИтог = ПолучитьИзВременногоХранилища(АдресСтруктураФильтров);
	
	Возврат СтруктураПолей;
	
КонецФункции

Функция ПолучитьЭкземплярОтчета(Расшифровка, ВидОтчетаОтбор,РежимМногоПериодныхУОП=Ложь) Экспорт;
	
	СтруктураОтбораЭкземпляра = Новый Структура;	
	СписокАналитик=ПолучитьАналитикиЯчейкиСУчетомОтборов(Расшифровка);	
		
	ДанныеРасшифровки          				= ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровки);
	СтруктураТаблицИнтерфейса               = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);	
	ИмяТекущегоРесурса = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Поле;

	Если СтрНайти(ИмяТекущегоРесурса,"БАЗА_АБС_")>0 Тогда	
		ИмяТекущегоРесурса 	= СтрЗаменить(ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Поле,"БАЗА_АБС_","");
		ИндексТекущегоРесурса  = СтруктураТаблицИнтерфейса.ДополнительныеПоля.НайтиСтроки(Новый Структура("КодПоказателя",ИмяТекущегоРесурса))[0];	
		
		НастройкиРасчетаОтклоненийВыбранные 				= СтруктураТаблицИнтерфейса.ДополнительныеПоля.НайтиСтроки(Новый Структура("Использовать",Истина));
		ПолучитьСтруктуруРасшифровкиДинамическогоПоля(СписокАналитик,НастройкиРасчетаОтклоненийВыбранные,ИндексТекущегоРесурса);
			
		ИмяТекущегоРесурса = СокрЛП(ИндексТекущегоРесурса.Колонки[0].Значение.Код);
		
	ИначеЕсли СтрНайти(ИмяТекущегоРесурса,"БАЗА_ОТН_")>0 Тогда			
		ИмяТекущегоРесурса 	= СтрЗаменить(ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Поле,"БАЗА_ОТН_","");
		ИндексТекущегоРесурса  = СтруктураТаблицИнтерфейса.ДополнительныеПоля.НайтиСтроки(Новый Структура("КодПоказателя",ИмяТекущегоРесурса))[0];	
		
		НастройкиРасчетаОтклоненийВыбранные 				= СтруктураТаблицИнтерфейса.ДополнительныеПоля.НайтиСтроки(Новый Структура("Использовать",Истина));
		ПолучитьСтруктуруРасшифровкиДинамическогоПоля(СписокАналитик,НастройкиРасчетаОтклоненийВыбранные,ИндексТекущегоРесурса);		
		
		ИмяТекущегоРесурса = СокрЛП(ИндексТекущегоРесурса.Колонки[0].Значение.Код);
		
	ИначеЕсли СтрНайти(ИмяТекущегоРесурса,"БАЗА_")>0 Тогда	 
		ИмяТекущегоРесурса 	= СтрЗаменить(ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Поле,"БАЗА_","");
		ИндексТекущегоРесурса  = СтруктураТаблицИнтерфейса.ДополнительныеПоля.НайтиСтроки(Новый Структура("КодПоказателя",ИмяТекущегоРесурса))[0];
		
		НастройкиРасчетаОтклоненийВыбранные 				= СтруктураТаблицИнтерфейса.ДополнительныеПоля.НайтиСтроки(Новый Структура("Использовать",Истина));
		ПолучитьСтруктуруРасшифровкиДинамическогоПоля(СписокАналитик,НастройкиРасчетаОтклоненийВыбранные,ИндексТекущегоРесурса);		
		
		ИмяТекущегоРесурса = СокрЛП(ИндексТекущегоРесурса.Колонки[0].Значение.Код);	
	КонецЕсли;	

	СтруктураКлючевыханалитик = Новый Структура;
	Для Инд = 1 по ПараметрыСеанса.ЧислоДопАналитик - 1 Цикл
		СтруктураКлючевыханалитик.Вставить("Аналитика"+Инд,Неопределено);
	КонецЦикла;	
	
	СтруктураКлючевыханалитик.Вставить("Аналитика"+ПараметрыСеанса.ЧислоДопАналитик,Неопределено);
	
	Для Каждого Пл из  СписокАналитик Цикл
		Если Пл.Ключ="Сценарии" Тогда
			СтруктураОтбораЭкземпляра.Вставить(Пл.Ключ,Пл.Значение);
		ИначеЕсли Пл.Ключ="Валюты" Тогда
			СтруктураОтбораЭкземпляра.Вставить(Пл.Ключ,Пл.Значение);
		ИначеЕсли Пл.Ключ="Организации" Тогда	
			СтруктураОтбораЭкземпляра.Вставить(Пл.Ключ,Пл.Значение);
		ИначеЕсли Пл.Ключ="ПериодыСвязанныйПериод" Тогда	
			СтруктураОтбораЭкземпляра.Вставить("Периоды",Пл.Значение);
		ИначеЕсли Пл.Ключ="Проекты" Тогда	
			СтруктураОтбораЭкземпляра.Вставить(Пл.Ключ,Пл.Значение);		
		КонецЕсли;	
	КонецЦикла;
	
	Если НЕ СтруктураОтбораЭкземпляра.Свойство("Периоды") ИЛИ НЕ СтруктураОтбораЭкземпляра.Свойство("Сценарии") ИЛИ НЕ СтруктураОтбораЭкземпляра.Свойство("Организации") ИЛИ
		НЕ СтруктураОтбораЭкземпляра.Свойство("Валюты") Тогда
		    Возврат Неопределено;
	КонецЕсли;
	
	//Определяем УОП и версию регламента
	РежимМногоПериодныхУОП 	= Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатусыПериодовСценариев.УправлениеПериодомСценария КАК УправлениеПериодомСценария,
	               |	СтатусыПериодовСценариев.УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры КАК УправлениеПериодомСценарияВерсияОрганизационнойСтруктуры,
	               |	СтатусыПериодовСценариев.УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры.РежимМногопериодныхУОП КАК РежимМногопериодныхУОП,
	               |	СтатусыПериодовСценариев.УправлениеПериодомСценария.ПериодСценарияОкончание КАК ПериодСценарияОкончание
	               |ИЗ
	               |	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	               |ГДЕ
	               |	СтатусыПериодовСценариев.Периоды = &ПериодОтчета
	               |	И СтатусыПериодовСценариев.Организации = &Организация
	               |	И СтатусыПериодовСценариев.Сценарии = &Сценарий";
	
	Запрос.УстановитьПараметр("Сценарий",СтруктураОтбораЭкземпляра.Сценарии);
    Запрос.УстановитьПараметр("ПериодОтчета",СтруктураОтбораЭкземпляра.Периоды);
    Запрос.УстановитьПараметр("Организация",СтруктураОтбораЭкземпляра.Организации);

	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл	
		 РежимМногоПериодныхУОП 		= Выборка.РежимМногоПериодныхУОП;	
		 ПериодСценарияОкончание 		= Выборка.ПериодСценарияОкончание;
	КонецЦикла;
	
	Если Не РежимМногоПериодныхУОП Тогда
		ПериодСценарияОкончание = СтруктураОтбораЭкземпляра.Периоды;
	КонецЕсли;	
	
	
	ТекстАналитик = "";
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		ТекстАналитик = ТекстАналитик + "
		|	И НастраиваемыйОтчет.Аналитика"+Инд+" = &Аналитика"+Инд;
	КонецЦикла;	
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастраиваемыйОтчет.Ссылка
	               |ИЗ
	               |	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	               |ГДЕ
	               |	НастраиваемыйОтчет.Сценарий = &Сценарий
	               |	И НастраиваемыйОтчет.ВидОтчета = &ВидОтчета
	               |	И НастраиваемыйОтчет.ПериодОтчета = &ПериодОтчета
				   |	И НастраиваемыйОтчет.ПериодОкончания = &ПериодСценарияОкончание
				   |	И НастраиваемыйОтчет.Организация = &Организация
	               |	И НастраиваемыйОтчет.Проект = &Проект
	               |	И НастраиваемыйОтчет.ОсновнаяВалюта = &ОсновнаяВалюта"+ТекстАналитик;
	
	Запрос.УстановитьПараметр("Сценарий",СтруктураОтбораЭкземпляра.Сценарии);
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчетаОтбор);
    Запрос.УстановитьПараметр("ПериодОтчета",СтруктураОтбораЭкземпляра.Периоды);
	Запрос.УстановитьПараметр("ПериодСценарияОкончание",ПериодСценарияОкончание);
	Запрос.УстановитьПараметр("Проект",СтруктураОтбораЭкземпляра.Проекты);
    Запрос.УстановитьПараметр("ОсновнаяВалюта",СтруктураОтбораЭкземпляра.Валюты);
    Запрос.УстановитьПараметр("Организация",СтруктураОтбораЭкземпляра.Организации);
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ЗначениеЗаполнено(ВидОтчета["ВидАналитики"+Инд]) Тогда
			Для ИндА = 1 По Инд Цикл
				СтруктураКлючевыханалитик.Вставить("Аналитика"+ИндА,СписокАналитик[ВидОтчета["ВидАналитики"+ИндА].Код]);
			КонецЦикла;	
		КонецЕсли;		
		Запрос.УстановитьПараметр("Аналитика"+Инд,СтруктураКлючевыханалитик["Аналитика"+Инд]);	
	КонецЦикла;
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		  Возврат Выборка.Ссылка;
	КонецЦикла;
	
	НоСсылка = Документы.НастраиваемыйОтчет.ПолучитьЭкземплярОтчета(СтруктураОтбораЭкземпляра.Организации,
	СтруктураОтбораЭкземпляра.Периоды,
	СтруктураОтбораЭкземпляра.Сценарии,ВидОтчетаОтбор,
	,Истина,Истина,,СтруктураОтбораЭкземпляра.Проекты,,СтруктураКлючевыханалитик);
	// Переведём новый документ в статус Черновик.
	СтатусЧерновик = МодульУправленияПроцессамиУХ.ПолучитьСоответствиеСостоянийОбъекта(НоСсылка)["Черновик"];
	УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(НоСсылка, СтатусЧерновик);
	Возврат НоСсылка;
	
КонецФункции

#КонецОбласти
	
#Область РаботаСКомандамиСводнойТаблицыУправлениеДанными

Функция ПолучитьИтоговыйМакетУправлениеДанными(ПолеТабличногоДокументаМакет,ВыбранныйБланк,Горизонт,СТ_ДополнительныеНастройки,СтруктураФильтров,СтруктураОсей=Неопределено,ВыбранныеРесурсы = Неопределено,Периодичность = Неопределено) Экспорт
			
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
    СтруктураФильтровИтог = ПолучитьИзВременногоХранилища(АдресСтруктураФильтров);

	Если НЕ ЗначениеЗаполнено(ГоризонтДатаНачала) Тогда	
		 СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет,Нстр("ru = 'Не заполнен период начала отбора данных'"));
		 Возврат "стОшибкаИнициализацииКлючевыхРеквизитов";
	КонецЕсли;		
	Если НЕ ЗначениеЗаполнено(ГоризонтДатаОкончания) Тогда	
		 СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет,Нстр("ru = 'Не заполнен период окончания отбора данных'"));
		 Возврат "стОшибкаИнициализацииКлючевыхРеквизитов";
	КонецЕсли;	
	Если  НЕ СтруктураТаблицИнтерфейса.ТаблицаСтраницы.Найти("Фильтр_Сценарии","Код")=Неопределено Тогда
		Если НЕ СтруктураФильтровИтог.Свойство("Сценарии") ИЛИ НЕ ЗначениеЗаполнено(СтруктураФильтровИтог["Сценарии"]) Тогда	
			СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет,Нстр("ru = 'Не заполнен сценарий'"));
			Возврат "стОшибкаИнициализацииКлючевыхРеквизитов";
		Иначе	
			Если Не ЗначениеЗаполнено(Периодичность) Тогда
				Периодичность = СтруктураФильтровИтог.Сценарии.Периодичность;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Периодичность) Тогда	
		СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет,Нстр("ru = 'Не удалось определить периодичность сценария'"));
		Возврат "стОшибкаИнициализацииКлючевыхРеквизитов";
	КонецЕсли;
		
	ОбновитьГоризонт = Ложь;	
	ДоступныеАналитики = 		СтруктураТаблицИнтерфейса.ДоступныеАналитики;
	КэшАналитикПоказателей = 	СтруктураТаблицИнтерфейса.КэшАналитикПоказателей;;
	ВыбранныеПоказатели =  		СтруктураТаблицИнтерфейса.ВыбранныеПоказатели;
	НастройкиПолейД =   		СтруктураТаблицИнтерфейса.ДоступныеПоля;

	НастройкиСреза_ = Новый ДеревоЗначений;
    НастройкиСреза_.Колонки.Добавить("Аналитика");
	НастройкиСреза_.Колонки.Добавить("Отбор");
    НастройкиСреза_.Колонки.Добавить("ТипРеквизита");
    НастройкиСреза_.Колонки.Добавить("СтрокаОтбор",Новый ОписаниеТипов("ОтборКомпоновкиДанных"));
    НастройкиСреза_.Колонки.Добавить("ИмяГруппировки");
	НастройкиСреза_.Колонки.Добавить("ПолеИерархии");

	НастройкиРасчетаОтклонений = Неопределено;
		
	ОбновитьСтруктуру = Ложь;
	Если ЗначениеЗаполнено(ГоризонтДатаНачала) И  ЗначениеЗаполнено(ГоризонтДатаНачала) Тогда
		ОтборДатаНачалаПериода =ГоризонтДатаНачала;
		ОтборДатаОкончанияПериода = ГоризонтДатаОкончания;		
		ОбновитьСтруктуру = Истина;
		ОбновитьГоризонт = Истина;
	КонецЕсли;
	
	Если Горизонт = ВыбранныйГоризонт Тогда
		ОбновитьСтруктуру = Ложь;
		ОбновитьГоризонт = Ложь;
	Иначе	    
		
		Если ЗначениеЗаполнено(Горизонт) Тогда
			ОтборДатаНачалаПериода =Горизонт.ДатаНачала;
			ОтборДатаОкончанияПериода = Горизонт.ДатаОкончания;
		КонецЕсли;	
	КонецЕсли;

	Если НЕ СтруктураОсей=Неопределено Тогда
		ОбновитьСтруктуру = Истина;
		ТаблицаСтроки =    СтруктураТаблицИнтерфейса.ТаблицаСтроки;
		ТаблицаКолонки =   СтруктураТаблицИнтерфейса.ТаблицаКолонки;
		ТаблицаСтраницы =  СтруктураТаблицИнтерфейса.ТаблицаСтраницы;
	Иначе	
		ТаблицаСтроки =    СтруктураТаблицИнтерфейса.ТаблицаСтроки;
		ТаблицаКолонки =   СтруктураТаблицИнтерфейса.ТаблицаКолонки;
		ТаблицаСтраницы =  СтруктураТаблицИнтерфейса.ТаблицаСтраницы;		
	КонецЕсли;
	
	
	Если  ОбновитьСтруктуру Тогда     
		ТаблицаКолонкиИСтроки = ТаблицаСтроки.СкопироватьКолонки();				
	КонецЕсли;
			
	Для Каждого Стр ИЗ  ТаблицаСтраницы Цикл
		Если СтруктураФильтров.Свойство(СтрЗаменить(Стр.Код,"Фильтр_","")) Тогда
			СтруктураФильтровИтог.Вставить(Стр.Код,СтруктураФильтров[СтрЗаменить(Стр.Код,"Фильтр_","")]);	
		ИначеЕсли  НЕ СтруктураФильтровИтог.Свойство(Стр.Код) Тогда
			ТипЗ = Новый ОписаниеТипов(Стр.ТипСтрока);
			СтруктураФильтровИтог.Вставить(Стр.Код,ТипЗ.ПривестиЗначение());
		КонецЕсли;
	КонецЦикла;
	
	ДополнитьОтклонениями = Ложь;
	
	СхемаСКДЭталон=ПолучитьИзВременногоХранилища(ОкончательнаяСКДАдрес);
	ТекущиеНастройки=СхемаСКДЭталон.НастройкиПоУмолчанию;
	НастройкиСхемыСводнойТаблицы.ЗагрузитьНастройки(ТекущиеНастройки);
			
	ВыбранныеРесурсы = Новый ТаблицаЗначений;
	ВыбранныеРесурсы.Колонки.Добавить("Код",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	ВыбранныеРесурсы.Колонки.Добавить("Наименование",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	ВыбранныеРесурсы.Колонки.Добавить("НеФинансовый",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ВыбранныеРесурсы.Колонки.Добавить("КодПоказателя",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));

	
	Для Каждого Стр Из НастройкиСхемыСводнойТаблицы.Настройки.Выбор.Элементы Цикл
		Если  Стр.Использование Тогда 
			Нстр =  ВыбранныеРесурсы.Добавить();
			Нстр.Код = Строка(Стр.Поле);
			Нстр.КодПоказателя = Строка(Стр.Поле);
			Нстр.Наименование = Строка(Стр.Поле);
		КонецЕсли;
	КонецЦикла;
	
    ТипОбъекта = "Таблица";
	
	НастройкиФинальнойСхемы = Неопределено;
	НастройкиРасчетаОтклонений = Новый ТаблицаЗначений;
	СводнаяТаблицаУХ.ПреобразоватьНастройкиКонечнойСхемы(ТипОбъекта,ВыбранныеРесурсы,НастройкиСхемыСводнойТаблицы.Настройки,ТаблицаСтроки,ТаблицаКолонки,Истина,Ложь,НастройкиРасчетаОтклонений);		
	
	//	
	СводнаяТаблицаУХ.ОформитьУровниГруппировокУправленияПС(НастройкиСхемыСводнойТаблицы.Настройки,СтруктураТаблицИнтерфейса);

	
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[1].Значение=РасположениеИтоговКомпоновкиДанных.Авто;
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[6].Использование=Истина;
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[6].Значение=РасположениеИтоговКомпоновкиДанных.Нет;
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[7].Использование=Истина;
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[7].Значение=РасположениеИтоговКомпоновкиДанных.Нет;
	
	НастройкиСхемыСводнойТаблицы.Настройки.Структура[0].Колонки[0].ПоляГруппировки.Элементы[0].ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		
	ВыбранныйГоризонт =Горизонт; 
	
	СтруктураФильтровИтог.Вставить("ГоризонтДатаНачала"   ,ГоризонтДатаНачала);
	СтруктураФильтровИтог.Вставить("ГоризонтДатаОкончания",ГоризонтДатаОкончания);
	
	ИнициализироватьЗапросПоСтатусамДанных(СхемаСКДЭталон,СтруктураФильтровИтог,ТаблицаСтраницы,Периодичность);
	
	ДокументРезультат=Новый ТабличныйДокумент;
	
	МассивУдаляемыхОтборов = Новый Массив;
		
	ВывестиВТаблицуУправлениеДанными(ДокументРезультат,СхемаСКДЭталон,ВыбранныеРесурсы);
	
	Если  ДокументРезультат.ВысотаТаблицы = 2 Тогда	
		 СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет,Нстр("ru = 'Нет данных по текущим отборам'"));
		 Возврат "стОшибкаПустойМакет";
	КонецЕсли;	
	
	СводнаяТаблицаУХ.ФорматироватьЗаголовкиУправлениеПериодом(Истина,Ложь,ПолеТабличногоДокументаМакет,ДокументРезультат,ВыбранныеРесурсы);
				
	АдресСтруктураФильтров = ПоместитьВоВременноеХранилище(СтруктураФильтровИтог,Новый УникальныйИдентификатор);
	
КонецФункции	

Процедура ВывестиВТаблицуУправлениеДанными(ДокументРезультат,СхемаСКДЭталон,ПоляРесурсов)
	
	КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
			
	СхемаСКДЭталон.ВычисляемыеПоля.Очистить();
	
	НастройкиСхемыСводнойТаблицы.Настройки.Порядок.Элементы.Очистить();
	
	Нпорядок = НастройкиСхемыСводнойТаблицы.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	Нпорядок.Использование = Истина;
	Нпорядок.Поле = Новый ПолеКомпоновкиДанных("Организация");

	Нпорядок = НастройкиСхемыСводнойТаблицы.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	Нпорядок.Использование = Истина;
	Нпорядок.Поле = Новый ПолеКомпоновкиДанных("Проект");

	
	МакетКомпоновки=КомпоновщикМакета.Выполнить(СхемаСКДЭталон,НастройкиСхемыСводнойТаблицы.Настройки,ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных=Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки);

	ПроцессорВывода=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	АдресХранилищаДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки,Новый УникальныйИдентификатор);
		
КонецПроцедуры


Процедура ИнициализироватьЗапросПоСтатусамДанных(СхемаСКДЭталон,СтруктураФильтровИтог,ТаблицаСтраницы,ТекущаяПериодичность);
	
			
		ТекстЗапроса = "ВЫБРАТЬ
		               |	СтатусыПериодовСценариев.СтатусПоказателя,
		               |	СтатусыПериодовСценариев.Сценарии КАК Сценарии,
		               |	СтатусыПериодовСценариев.Периоды КАК Периоды,
		               |	СтатусыПериодовСценариев.Периоды КАК ПериодыСвязанныйПериод,
		               |	СтатусыПериодовСценариев.Организации КАК Организации,
		               |	СтатусыПериодовСценариев.СтатусБлокировки
		               |ИЗ
		               |	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
		               |ГДЕ
		               |	СтатусыПериодовСценариев.Периоды.ДатаНачала >= &ДатаНачала
		               |	И СтатусыПериодовСценариев.Периоды.ДатаНачала <= &ДатаОкончания
		               |	И СтатусыПериодовСценариев.Периоды.Периодичность = &ТекущаяПериодичность";
		
		ТекстЗапроса = ТекстЗапроса+" И ";
		Для Каждого Стр Из ТаблицаСтраницы Цикл
			
			СтрКод = СтрЗАменить(Стр.Код,"Фильтр_","");
			ТекстЗапроса = ТекстЗапроса+ " 
			|СтатусыПериодовСценариев."+СтрКод +"=&Параметр_"+СтрКод+" И "; 	
				
		КонецЦикла;
		
		ТекстЗапроса = Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-2);

		СхемаСКДЭталон.НаборыДанных[0].Запрос = ТекстЗапроса;
		
		НовыйИсточник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаСКДЭталон); 
		НастройкиСхемыСводнойТаблицы.Инициализировать(НовыйИсточник);
		
		Для Каждого Стр Из ТаблицаСтраницы Цикл
			СтрКод = СтрЗАменить(Стр.Код,"Фильтр_","");
			НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Параметр_"+СтрКод,СтруктураФильтровИтог[Стр.Код]);
		КонецЦикла;
		
		НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаНачала",СтруктураФильтровИтог["ГоризонтДатаНачала"]); 
		НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаОкончания",СтруктураФильтровИтог["ГоризонтДатаОкончания"]);
		НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекущаяПериодичность",ТекущаяПериодичность); 
		
КонецПроцедуры

Функция ПолучитьАналитикиЯчейкиСУчетомОтборовСтатусы(Расшифровка,ДанныеРасшифровки=Неопределено) Экспорт
	
	Если ДанныеРасшифровки=Неопределено Тогда
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровки);
	КонецЕсли;	
	
	СтруктураПолей = Новый Структура;
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);

	ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,Расшифровка,,,СтруктураПолей);
	
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
		
	ДоступныеАналитики = 		СтруктураТаблицИнтерфейса.ДоступныеАналитики;
	КэшАналитикПоказателей = 	СтруктураТаблицИнтерфейса.КэшАналитикПоказателей;;
	ВыбранныеПоказатели =  		СтруктураТаблицИнтерфейса.ВыбранныеПоказатели;
	НастройкиПолейД =   		СтруктураТаблицИнтерфейса.ДоступныеПоля;
    ТаблицаСтраницы =           СтруктураТаблицИнтерфейса.ТаблицаСтраницы;
	СтруктураФильтровИтог = ПолучитьИзВременногоХранилища(АдресСтруктураФильтров);
	
	Возврат СтруктураПолей;
	
КонецФункции

#КонецОбласти


Функция ПолучитьИтоговыйМакетОтбораПоказателей(ПолеТабличногоДокументаМакет,СтруктураПараметров) Экспорт
	
	Возврат 0;
	
	Если НЕ ЗначениеЗаполнено(ВидОтчета) Тогда	
		 СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет,Нстр("ru = 'Не заполнен вид отчета'"));
		 Возврат "стОшибкаИнициализацииКлючевыхРеквизитов";
	КонецЕсли;		
			
		
	
	СхемаСКДЭталон=Обработки.СводнаяТаблица.ПолучитьМакет("ШаблонТаблицыВыбранныхПоказателей");
	ТекущиеНастройки=СхемаСКДЭталон.НастройкиПоУмолчанию;
	НастройкиСхемыСводнойТаблицы.ЗагрузитьНастройки(ТекущиеНастройки);
			
		
	НастройкиФинальнойСхемы = Неопределено;
	НастройкиРасчетаОтклонений = Новый ТаблицаЗначений;
	
	
	ДокументРезультат=Новый ТабличныйДокумент;
	
	МассивУдаляемыхОтборов = Новый Массив;
	
	
	СхемаСКДЭталон.Параметры[0].Значение = ВидОтчета;
	СхемаСКДЭталон.Параметры[1].Значение = "";
    СхемаСКДЭталон.Параметры[2].Значение = СтруктураПараметров.Область;
	
	ВывестиВТаблицуОтбораПоказателей(ДокументРезультат,СхемаСКДЭталон);
	
	Если  ДокументРезультат.ВысотаТаблицы = 2 Тогда	
		 СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет,Нстр("ru = 'Нет данных по текущим отборам'"));
		 Возврат "стОшибкаПустойМакет";
	КонецЕсли;	
	
	КоличествоУдаляемыхСтрок = 0;
	
	Для Стр=1 По ДокументРезультат.ФиксацияСверху Цикл
	    Для Кол=1 По ДокументРезультат.ШиринаТаблицы Цикл
		      ДокументРезультат.Область(Стр,Кол,Стр,Кол).ВертикальноеПоложение=ВертикальноеПоложение.Центр;
			  ДокументРезультат.Область(Стр,Кол,Стр,Кол).ГоризонтальноеПоложение=ГоризонтальноеПоложение.Центр;	  
		  КонецЦикла;
	КонецЦикла; 
		
	//Фиксация    
	ДокументРезультат.ФиксацияСверху = 1;
	ФиксацияСлева=1;
	ФиксацияСверху=ДокументРезультат.ФиксацияСверху;
    ДокументРезультат.ФиксацияСлева = 1;
	
	//Удаляем пустые строки,если есть	
	ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(2,0,2,0),ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	МассивУдаляемыхСтрок = Новый Массив;
	Сч = 0;
	Для  СтрокаТаблицы =ДокументРезультат.ФиксацияСверху  По ДокументРезультат.ВысотаТаблицы Цикл 
		
		ОблКУдалению = ДокументРезультат.Область(СтрокаТаблицы,0,СтрокаТаблицы,0);
		Если ОблКУдалению.ВысотаСтроки = 1 Тогда		
			МассивУдаляемыхСтрок.Добавить(ОблКУдалению);
			ОблКУдалению.Имя = "Удалить"+Сч;
			Сч = Сч+1;
		КонецЕсли;	
		
	КонецЦикла;
	
	Для Сч=0 По  МассивУдаляемыхСтрок.Количество()-1 Цикл	
		ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область("Удалить"+Сч),ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЦикла;
	
	КоличествоДопФиксируемыхСтрок =ДокументРезультат.ФиксацияСверху;
		
	//Уголок шапки с заголовком
	Для Стр=1 По ДокументРезультат.ФиксацияСлева Цикл
		ДокументРезультат.Область(Стр,1,Стр,1).Текст = Нстр("ru = 'Строки отчета/колонки отчета'");
	КонецЦикла;
		
	ПолеТабличногоДокументаМакет.Очистить();
	ПолеТабличногоДокументаМакет.Вывести(ДокументРезультат);
	
	//Фиксируем 
	ПолеТабличногоДокументаМакет.ФиксацияСверху=ФиксацияСверху;
	ПолеТабличногоДокументаМакет.ФиксацияСлева=ФиксацияСлева;
	
	//Форматируем шапку...
	ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ПолеТабличногоДокументаМакет.ШиринаТаблицы).ЦветФона=Новый Цвет(155,194,230);
    ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ПолеТабличногоДокументаМакет.ШиринаТаблицы).ЦветТекста=Новый Цвет(255,255,255);
	ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ПолеТабличногоДокументаМакет.ШиринаТаблицы).Шрифт=Новый Шрифт("Arial",8,Истина);

	//Уголок шапки с заголовком
	ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ФиксацияСлева).Объединить();
		
	//Линии таблицы
	ПолеТабличногоДокументаМакет.Область(2,2,ПолеТабличногоДокументаМакет.ВысотаТаблицы,
	ПолеТабличногоДокументаМакет.ШиринаТаблицы+1).ЦветРамки = Новый Цвет(230,230,250);	
	ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ФиксацияСверху+1,1,ПолеТабличногоДокументаМакет.ВысотаТаблицы,
	ПолеТабличногоДокументаМакет.ФиксацияСлева).ЦветФона = Новый Цвет(255,255,255);
				
	ПолеТабличногоДокументаМакет.Область(ФиксацияСверху,0,ФиксацияСверху,0).ВысотаСтроки=33; 
	
КонецФункции	

Процедура ВывестиВТаблицуОтбораПоказателей(ДокументРезультат,СхемаСКДЭталон)
	
	КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
			
	МакетКомпоновки=КомпоновщикМакета.Выполнить(СхемаСКДЭталон,НастройкиСхемыСводнойТаблицы.Настройки,ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных=Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки);

	ПроцессорВывода=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	АдресХранилищаДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки,Новый УникальныйИдентификатор);
			
КонецПроцедуры	


#Область РаботаСПоказателями 

Процедура ЗаписатьЗначениеВПоказатель(логИзмененныхПоказателей=Неопределено,Значение,СписокАналитик,ТабИзмененныхДанных,КэшАналитикПоказателей,ФлагОшибки=Ложь) Экспорт 
	
	СтруктураОтбораЭкземпляра = Новый Структура;
    ФлОшибки = Ложь;
	АналитикаПоказатель = Неопределено;
	 
	Если СписокАналитик.ПоказательТипЗнчения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			
		НеМасштабируется = Ложь;
		Если СписокАналитик.Свойство("НеМасштабируется") Тогда
			 НеМасштабируется = СписокАналитик.НеМасштабируется;
		КонецЕсли;	
		
		Попытка 	
			Если СокрЛП(Значение) = "" ИЛИ Значение = Неопределено Тогда Значение = "0" КонецЕсли;
			Значение = СтрЗаменить(Значение," ","");
			ЗначениеЧисло = Число(Значение);
			Если Не НеМасштабируется Тогда
				Если  Масштаб = "Тыс" Тогда
					ЗначениеЧисло = ЗначениеЧисло*1000;	
				ИначеЕсли  Масштаб = "Миллионы" Тогда
					ЗначениеЧисло = ЗначениеЧисло*1000000;	
				КонецЕсли;	
			КонецЕсли;
		Исключение                                                                                                
			ОбщегоНазначенияУх.СообщитьОбОшибке(Нстр("ru = 'Некорректное значение'"));
			ФлагОшибки = Истина;
			Возврат;
		КонецПопытки;
		
	ИначеЕсли СписокАналитик.ПоказательТипЗнчения = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда	
		
		Если ВРЕГ(Значение) = "ИСТИНА" ИЛИ ВРЕГ(Значение) = "TRUE" ИЛИ   Значение = "1" ИЛИ Значение = 1 ИЛИ ВРЕГ(Значение) = "ДА" Тогда
			ЗначениеНЕЧисло = Истина;	 	
		ИначеЕсли ВРЕГ(Значение) = "ЛОЖЬ" ИЛИ ВРЕГ(Значение) = "FALSE" ИЛИ   Значение = "0" ИЛИ Значение = 0 ИЛИ ВРЕГ(Значение) = "НЕТ" Тогда
			ЗначениеНЕЧисло = Ложь;	 
		ИначеЕсли Значение = Неопределено ИЛИ СокрЛП(Значение) = "" Тогда
			ЗначениеНЕЧисло = Неопределено;	 
		Иначе	 
			ОбщегоНазначенияУх.СообщитьОбОшибке(Нстр("ru = 'Некорректное значение'"));
			ФлагОшибки = Истина;
			Возврат;	
		КонецЕсли;	
		
	КонецЕсли;	

    АналитикаПоказатель = СписокАналитик.ПоказательСсылка;	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Проект",СписокАналитик.Проекты);
	СтруктураПоиска.Вставить("Сценарий",СписокАналитик.Сценарии);
	Если Не ЗначениеЗАполнено(СписокАналитик.ПериодыСвязанныйПериод) Тогда	
		СписокАналитик.ПериодыСвязанныйПериод = ПолучитьПоследнийПериодПоАгрегату(СписокАналитик.Периоды);	
	КонецЕсли;	
	СтруктураПоиска.Вставить("ПериодОтчета",СписокАналитик.ПериодыСвязанныйПериод);
	СтруктураПоиска.Вставить("Организация",СписокАналитик.Организации);
	СтруктураПоиска.Вставить("ПоказательОтчета",АналитикаПоказатель);
	Если НЕ ТабИзмененныхДанных.Колонки.Найти("ID") = Неопределено Тогда
		СтруктураПоиска.Вставить("ID",СписокАналитик.ID);
	КонецЕсли;	
				
	ГруппаПоказателя = КэшАналитикПоказателей.НайтиСтроки(Новый Структура("Строка",СписокАналитик.ПоказателиСтрокаОтчета))[0];
	Для ИндА=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ГруппаПоказателя["Аналитика"+ИндА] = "" Тогда 
			Прервать;
		КонецЕсли;
		Если СписокАналитик.Свойство(ГруппаПоказателя["Аналитика"+ИндА]) Тогда
			СтруктураПоиска.Вставить( "Аналитика"+ИндА, СписокАналитик[ГруппаПоказателя["Аналитика"+ИндА]]);	
		КонецЕсли;
	КонецЦикла;		
	
	Если СписокАналитик.Свойство("ДопВалюты") Тогда
		 СтруктураПоиска.Вставить("АналитикаВалюта",?(СписокАналитик["ДопВалюты"]=Неопределено,Справочники.Валюты.ПустаяСсылка(),СписокАналитик["ДопВалюты"]));
	КонецЕсли;	
		
	Если НЕ  логИзмененныхПоказателей = Неопределено Тогда
		Нстр = логИзмененныхПоказателей.Добавить(); 
		ЗаполнитьЗначенияСвойств(Нстр,СписокАналитик);
		Нстр.ПоказательСтрока =  СписокАналитик.ПоказателиСтрокаОтчета;
		Нстр[СписокАналитик.КодРесурса] = ЗначениеЧисло;
		Нстр.ТекущийПоказательКод = СписокАналитик.КодРесурса;	
	КонецЕсли;
	
	Если ФлагОшибки Тогда
		 Возврат;
	КонецЕсли;	
			
	НайденныеСтроки = ТабИзмененныхДанных.НайтиСтроки(СтруктураПоиска);
	Если  НайденныеСтроки.Количество() = 0 Тогда
		НП = ТабИзмененныхДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НП,СтруктураПоиска);
	Иначе	
		НП = НайденныеСтроки[0];
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ГруппаПоказателя.ГруппаРаскрытия) Тогда
		НП.СинтетическоеЗначение = Истина;
	КонецЕсли;	
	
	Если ОтображатьСуммыВДопВалютах Тогда
		Если Найти(СписокАналитик.КодРесурса,"_ЗначениеВалюта")>0 Тогда
			НП.ЗначениеВалюта = ЗначениеЧисло;
		ИначеЕсли СписокАналитик.ПоказательТипЗнчения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда	
			НП.Значение = ЗначениеЧисло;
		Иначе	
			НП.ЗначениеНечисловое = ЗначениеНЕЧисло;
		КонецЕсли;	
	Иначе	
		Если СписокАналитик.ПоказательТипЗнчения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда	
			НП.Значение = ЗначениеЧисло;
		Иначе	
			НП.ЗначениеНечисловое = ЗначениеНЕЧисло;
		КонецЕсли;		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗаписатьСтатусВПоказатель(логИзмененныхПоказателей,Статус,СписокАналитик,ТабИзмененныхДанных,КэшАналитикПоказателей) Экспорт 
	
	СтруктураОтбораЭкземпляра = Новый Структура;
    ФлОшибки = Ложь;
	АналитикаПоказатель = Неопределено;
	 
    АналитикаПоказатель = СписокАналитик.ПоказательСсылка;	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Проект",СписокАналитик.Проекты);
	СтруктураПоиска.Вставить("Сценарий",СписокАналитик.Сценарии);
	СтруктураПоиска.Вставить("ПериодОтчета",СписокАналитик.ПериодыСвязанныйПериод);
	СтруктураПоиска.Вставить("Организация",СписокАналитик.Организации);
	СтруктураПоиска.Вставить("ПоказательОтчета",АналитикаПоказатель);
			
	ГруппаПоказателя = КэшАналитикПоказателей.НайтиСтроки(Новый Структура("Строка",СписокАналитик.ПоказателиСтрокаОтчета))[0];
	Для ИндА=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ГруппаПоказателя["Аналитика"+ИндА] = "" Тогда 
			Прервать;
		КонецЕсли;
		СтруктураПоиска.Вставить( "Аналитика"+ИндА, СписокАналитик[ГруппаПоказателя["Аналитика"+ИндА]]);	
	КонецЦикла;		
	
	Если НЕ  логИзмененныхПоказателей = Неопределено Тогда
		Нстр = логИзмененныхПоказателей.Добавить(); 
		ЗаполнитьЗначенияСвойств(Нстр,СписокАналитик);
		Нстр.Периоды = СписокАналитик.ПериодыСвязанныйПериод;
		Если СписокАналитик.ПериодыСвязанныйПериод = Null Тогда
			Нстр.Периоды = СписокАналитик.Периоды.СвязанныйПериод;
		КонецЕсли;	
		Нстр.ПоказательСтрока =  СписокАналитик.ПоказателиСтрокаОтчета;
		Нстр[СписокАналитик.КодРесурса] = Статус;
		Нстр.ТекущийПоказательКод = СписокАналитик.КодРесурса;	
	КонецЕсли;
	
	Если ФлОшибки Тогда
		 Возврат;
	КонецЕсли;	
		
	НайденныеСтроки = ТабИзмененныхДанных.НайтиСтроки(СтруктураПоиска);
	Если  НайденныеСтроки.Количество() = 0 Тогда
		НП = ТабИзмененныхДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НП,СтруктураПоиска);
	Иначе	
		НП = НайденныеСтроки[0];
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ГруппаПоказателя.ГруппаРаскрытия) Тогда
		НП.СинтетическоеЗначение = Истина;
	КонецЕсли;	
	НП.ИндексСостояния = Статус;
	
	
КонецПроцедуры

Процедура ЗаписатьКомментарийВПоказатель(логИзмененныхПоказателей,Комментарий,СписокАналитик,ТабИзмененныхДанных,КэшАналитикПоказателей) Экспорт 
	
	СтруктураОтбораЭкземпляра = Новый Структура;
    ФлОшибки = Ложь;
	АналитикаПоказатель = Неопределено;
	 
    АналитикаПоказатель = СписокАналитик.ПоказательСсылка;	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Проект",СписокАналитик.Проекты);
	СтруктураПоиска.Вставить("Сценарий",СписокАналитик.Сценарии);
	СтруктураПоиска.Вставить("ПериодОтчета",СписокАналитик.ПериодыСвязанныйПериод);
	СтруктураПоиска.Вставить("Организация",СписокАналитик.Организации);
	СтруктураПоиска.Вставить("ПоказательОтчета",АналитикаПоказатель);
			
	ГруппаПоказателя = КэшАналитикПоказателей.НайтиСтроки(Новый Структура("Строка",СписокАналитик.ПоказателиСтрокаОтчета))[0];
	Для ИндА=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл 
		Если ГруппаПоказателя["Аналитика"+ИндА] = "" Тогда 
			Прервать;
		КонецЕсли;	
		СтруктураПоиска.Вставить( "Аналитика"+ИндА, СписокАналитик[ГруппаПоказателя["Аналитика"+ИндА]]);	
	КонецЦикла;		
	
	Если ФлОшибки Тогда
		Возврат;
	КонецЕсли;	
		
	НайденныеСтроки = ТабИзмененныхДанных.НайтиСтроки(СтруктураПоиска);
	Если  НайденныеСтроки.Количество() = 0 Тогда
		НП = ТабИзмененныхДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НП,СтруктураПоиска);
	Иначе	
		НП = НайденныеСтроки[0];
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ГруппаПоказателя.ГруппаРаскрытия) Тогда
		НП.СинтетическоеЗначение = Истина;
	КонецЕсли;	
	НП.ТекстКомментария = Комментарий;
	
	РасчетПоказателейОбъект = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
	РасчетПоказателейОбъект.ВидОтчета = Бланк.Владелец;
	РасчетПоказателейОбъект.ВалютаОтображения = СписокАналитик.Валюты;
	РасчетПоказателейОбъект.РассчитыватьЗависимые = Ложь;	
	РасчетПоказателейОбъект.ТаблицаИзмененныхПоказателей.Загрузить(ТабИзмененныхДанных.Выгрузить());
	
	РасчетПоказателейОбъект.ЗаписьКомментариев = Истина;
	РасчетПоказателейОбъект.ЗаписатьЗначенияТаблицыПоказателей();
	
	ТабИзмененныхДанных.Очистить();
	
КонецПроцедуры

Процедура ЗаписатьНастройкуМатрицыПолномочий(Значение,СписокАналитик,ТабИзмененныхДанных,ИмяТекущегоРесурса) Экспорт 
	
	НаборПолномочия = РегистрыСведений.РегистрМатрицыПолномочий.СоздатьНаборЗаписей();
	НаборПолномочия.Отбор.ДокументБД.Установить(СписокАналитик.ДокументБД);
	НаборПолномочия.Отбор.ШаблонДокументаБД.Установить(СписокАналитик.ШаблонДокументаБД); 
	НаборПолномочия.Отбор.ВерсияРегламентаПодготовкиОтчетности.Установить(СписокАналитик.ВерсияРегламентаПодготовкиОтчетности);
	Если Не СписокАналитик.Бланк = Неопределено Тогда
		НаборПолномочия.Отбор.Бланк.Установить(СписокАналитик.Бланк);
	КонецЕсли;
	Если Не СписокАналитик.Проект = Неопределено Тогда
		НаборПолномочия.Отбор.Проект.Установить(СписокАналитик.Проект);
	КонецЕсли;
	Если Не СписокАналитик.Организация = Неопределено Тогда
		НаборПолномочия.Отбор.Организация.Установить(СписокАналитик.Организация);
	КонецЕсли;

	НаборПолномочия.Прочитать();
	Если НаборПолномочия.Количество() =0 Тогда
		Нзп = НаборПолномочия.Добавить();
	Иначе
		Нзп = НаборПолномочия[0];	
		Исполняющий = Нзп.Исполняющий;
		Согласование =  Нзп.Согласование;

	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Нзп,СписокАналитик);
	Нзп.Исполняющий = Исполняющий;
	Нзп.Согласование = Согласование;
	
	Если ИмяТекущегоРесурса = "Исполняющий" Тогда
		Нзп.Исполняющий = Значение;
	ИначеЕсли ИмяТекущегоРесурса = "Согласование" Тогда	
		Нзп.Согласование = Значение;
	КонецЕсли;
	НаборПолномочия.Записать(Истина);

	
КонецПроцедуры

Процедура ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки=Неопределено,Расшифровка,СтруктураТаблицИнтерфейса=Неопределено,СтруктураФильтров=Неопределено,СтруктураПолей) Экспорт
	
	Если ДанныеРасшифровки=Неопределено Тогда
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровки);
	КонецЕсли;
	Если СтруктураТаблицИнтерфейса=Неопределено Тогда
		СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);;
		ТаблицаСтраницы = СтруктураТаблицИнтерфейса.ТаблицаСтраницы;
	Иначе	
		ТаблицаСтраницы = СтруктураТаблицИнтерфейса.ТаблицаСтраницы;
	КонецЕсли;
	Если СтруктураФильтров=Неопределено Тогда
		СтруктураФильтров = ПолучитьИзВременногоХранилища(АдресСтруктураФильтров);;
	КонецЕсли;
	
	Если СтруктураПолей.Количество() = 0 Тогда
		СоздатьОписаниеСтруктурыПолей(СтруктураПолей,СтруктураТаблицИнтерфейса);
	КонецЕсли;	
		
	Если  ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		СводнаяТаблицаУХ.ПолучитьРасшифровкуГруппировок(ДанныеРасшифровки.Элементы[Расшифровка],СтруктураПолей);	
		СтруктураПолей.Вставить("КодРесурса",ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Поле);
		СтруктураПолей.Вставить("ТекущееЗначениеРесурса",ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Значение);
		СтруктураПолей.Вставить("ID",Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
		СтруктураПолей.Вставить("ПоказательСсылка");
		СтруктураПолей.Вставить("ПоказательТипЗнчения");		
		СтруктураПолей.Вставить("НеМасштабируется");

		
		Если СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.Количество()>0 Тогда
			ТекущийРесурс = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.НайтиСтроки(Новый Структура("КолонкаФорматированныйКод,Строка",СтруктураПолей.КодРесурса,СтруктураПолей.ПоказателиСтрокаОтчета));
			
			Если ТекущийРесурс.Количество() > 0 Тогда	
				СтруктураПолей.Вставить("ПоказательСсылка",ТекущийРесурс[0].Показатель);
				СтруктураПолей.Вставить("ПоказательТипЗнчения",ТекущийРесурс[0].ТипЗначения);
				СтруктураПолей.Вставить("НеМасштабируется",ТекущийРесурс[0].НеМасштабируется);
				СтруктураПолей.Вставить("РедактированиеВозможно",ТекущийРесурс[0].РедактированиеВозможно);
			Иначе 	
				кРесурсаФорматированный  = Прав(СтруктураПолей.КодРесурса,СтрДлина(СтруктураПолей.КодРесурса)-42);
				ТекущийРесурс = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.НайтиСтроки(Новый Структура("КолонкаФорматированныйКод,Строка",кРесурсаФорматированный,СтруктураПолей.ПоказателиСтрокаОтчета));
				Если ТекущийРесурс.Количество() > 0 Тогда
					СтруктураПолей.Вставить("ПоказательСсылка",ТекущийРесурс[0].Показатель);
					СтруктураПолей.Вставить("ПоказательТипЗнчения",ТекущийРесурс[0].ТипЗначения);	
					СтруктураПолей.Вставить("НеМасштабируется",ТекущийРесурс[0].НеМасштабируется);
					СтруктураПолей.Вставить("РедактированиеВозможно",ТекущийРесурс[0].РедактированиеВозможно);
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
		Если СтруктураПолей.ТекущееЗначениеРесурса = NULL Тогда
			ТекПоле = СтруктураТаблицИнтерфейса.ТаблицаСтроки.НайтиСтроки(Новый Структура("Код","Фильтр_"+СтруктураПолей.КодРесурса));
			Если ТекПоле.Количество() = 1 Тогда
				ТипПоля = Новый ОписаниеТипов(ТекПоле[0].ТипСтрока);
				ТипПоляСсылка = ТипПоля.ПривестиЗначение();
				СтруктураПолей.Вставить("ТекущееЗначениеРесурса",ТипПоляСсылка);		
			КонецЕсли;	 		 
		КонецЕсли;	
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		фСтруктра =   Новый ФиксированнаяСтруктура(Расшифровка);
		СтруктураПолей = Новый Структура(фСтруктра);	
	КонецЕсли; 	
					
	Для Каждого Страница Из ТаблицаСтраницы Цикл
		КодПоля = СтрЗаменить(Страница.Код,"Фильтр_","");
		СтруктураПолей.Вставить(КодПоля,СтруктураФильтров[Страница.Код]);	
		Если КодПоля = "Показатели" Тогда
			СтруктураПолей.Вставить("ПоказателиСтрокаОтчета",СтруктураФильтров[Страница.Код]);
			
			Если СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.Количество()>0 Тогда
				ТекущийРесурс = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.НайтиСтроки(Новый Структура("КолонкаФорматированныйКод,Строка",СтруктураПолей.КодРесурса,СтруктураПолей.ПоказателиСтрокаОтчета));
				
				Если ТекущийРесурс.Количество() = 1 Тогда	
					СтруктураПолей.Вставить("ПоказательСсылка",ТекущийРесурс[0].Показатель);
					СтруктураПолей.Вставить("ПоказательТипЗнчения",ТекущийРесурс[0].ТипЗначения);
					СтруктураПолей.Вставить("НеМасштабируется",ТекущийРесурс[0].НеМасштабируется);
					СтруктураПолей.Вставить("РедактированиеВозможно",ТекущийРесурс[0].РедактированиеВозможно);
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;

	
	
КонецПроцедуры

Процедура ПолучитьСтатусыЯчейкиСОтборами(ДанныеРасшифровки=Неопределено,Расшифровка,СтруктураТаблицИнтерфейса=Неопределено,СтруктураФильтров=Неопределено,СтруктураПолей) Экспорт
	
	Если ДанныеРасшифровки=Неопределено Тогда
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровки);
	КонецЕсли;
	Если СтруктураТаблицИнтерфейса=Неопределено Тогда
		СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);;
		ТаблицаСтраницы = СтруктураТаблицИнтерфейса.ТаблицаСтраницы;
	Иначе	
		ТаблицаСтраницы = СтруктураТаблицИнтерфейса.ТаблицаСтраницы;
	КонецЕсли;
	Если СтруктураФильтров=Неопределено Тогда
		СтруктураФильтров = ПолучитьИзВременногоХранилища(АдресСтруктураФильтров);;
	КонецЕсли;
	
	Если СтруктураПолей.Количество() = 0 Тогда
		СоздатьОписаниеСтруктурыПолей(СтруктураПолей,СтруктураТаблицИнтерфейса);
	КонецЕсли;	
		
	Если  ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		СводнаяТаблицаУХ.ПолучитьРасшифровкуГруппировок(ДанныеРасшифровки.Элементы[Расшифровка],СтруктураПолей);	
		СтруктураПолей.Вставить("КодРесурса",ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Поле);
		СтруктураПолей.Вставить("ТекущееЗначениеРесурса",ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Значение);
		СтруктураПолей.Вставить("ID",Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
		СтруктураПолей.Вставить("ПоказательСсылка");
		СтруктураПолей.Вставить("ПоказательТипЗнчения");		
		
		Если СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.Количество()>0 Тогда
			ТекущийРесурс = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.НайтиСтроки(Новый Структура("КолонкаФорматированныйКод,Строка",СтруктураПолей.КодРесурса,СтруктураПолей.ПоказателиСтрокаОтчета));	
			Если ТекущийРесурс.Количество() = 1 Тогда	
				СтруктураПолей.Вставить("ПоказательСсылка",ТекущийРесурс[0].Показатель);
				СтруктураПолей.Вставить("ПоказательТипЗнчения",ТекущийРесурс[0].ТипЗначения);
			КонецЕсли;	
		КонецЕсли;
		
		Если СтруктураПолей.ТекущееЗначениеРесурса = NULL Тогда
			ТекПоле = СтруктураТаблицИнтерфейса.ТаблицаСтроки.НайтиСтроки(Новый Структура("Код","Фильтр_"+СтруктураПолей.КодРесурса));
			Если ТекПоле.Количество() = 1 Тогда
				ТипПоля = Новый ОписаниеТипов(ТекПоле[0].ТипСтрока);
				ТипПоляСсылка = ТипПоля.ПривестиЗначение();
				СтруктураПолей.Вставить("ТекущееЗначениеРесурса",ТипПоляСсылка);		
			КонецЕсли;	 		 
		КонецЕсли;	
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		фСтруктра =   Новый ФиксированнаяСтруктура(Расшифровка);
		СтруктураПолей = Новый Структура(фСтруктра);	
	КонецЕсли; 	
					
	Для Каждого Страница Из ТаблицаСтраницы Цикл
		КодПоля = СтрЗаменить(Страница.Код,"Фильтр_","");
		СтруктураПолей.Вставить(КодПоля,СтруктураФильтров[Страница.Код]);	
		Если КодПоля = "Показатели" Тогда
			СтруктураПолей.Вставить("ПоказателиСтрокаОтчета",СтруктураФильтров[Страница.Код]);	
			Если СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.Количество()>0 Тогда
				ТекущийРесурс = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.НайтиСтроки(Новый Структура("КолонкаФорматированныйКод,Строка",СтруктураПолей.КодРесурса,СтруктураПолей.ПоказателиСтрокаОтчета));
				
				Если ТекущийРесурс.Количество() = 1 Тогда	
					СтруктураПолей.Вставить("ПоказательСсылка",ТекущийРесурс[0].Показатель);
					СтруктураПолей.Вставить("ПоказательТипЗнчения",ТекущийРесурс[0].ТипЗначения);
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьОписаниеСтруктурыПолей(СтруктураРасшифровки,СтруктураТаблицИнтерфейса)
	
	Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаСтроки Цикл
		СтруктураРасшифровки.Вставить(Прав(Стр.Код,СтрДлина(Стр.Код)-7));
	КонецЦикла;	
	Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаКолонки Цикл
		Если Стр.Код = "Фильтр_ПоказателиКолонки" Тогда
			Продолжить;
		КонецЕсли;		
		СтруктураРасшифровки.Вставить(Прав(Стр.Код,СтрДлина(Стр.Код)-7));
	КонецЦикла;
	
	СтруктураРасшифровки.Вставить("ПериодыСвязанныйПериод");
	СтруктураРасшифровки.Вставить("ПоказателиСтрокаОтчета"); 	
	СтруктураРасшифровки.Вставить("КодРесурса");
	СтруктураРасшифровки.Вставить("ДопВалюты",Неопределено);
	
КонецПроцедуры

Процедура СоздатьОписаниеСтруктурыПолейМП(СтруктураРасшифровки,ДоступныеАналитики)
	
	Если СтруктураРасшифровки = Неопределено Тогда 
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ДокументБД");
		СтруктураРасшифровки.Вставить("ВерсияРегламентаПодготовкиОтчетности");
		СтруктураРасшифровки.Вставить("Организация");
		СтруктураРасшифровки.Вставить("Проект");
		СтруктураРасшифровки.Вставить("Бланк");
		СтруктураРасшифровки.Вставить("ШаблонДокументаБД");
		СтруктураРасшифровки.Вставить("Исполняющий");
		СтруктураРасшифровки.Вставить("Согласование");	
	Иначе	
		СтруктураРасшифровки.Вставить("Организация");
		СтруктураРасшифровки.Вставить("Проект");
		СтруктураРасшифровки.Вставить("Бланк");
		СтруктураРасшифровки.Вставить("ШаблонДокументаБД");
		СтруктураРасшифровки.Вставить("Исполняющий");
		СтруктураРасшифровки.Вставить("Согласование");	
	КонецЕсли;
	
КонецПроцедуры

Процедура ВставитьЗначениеВОбласть(ПолеТабличногоДокументаМакет,ИмяОбласти,Значение,ТекущаяОбластьТекст=Неопределено,Режим=Неопределено,СтруктураРасшифровки=Неопределено,КодРесурса="",ФлИзменений=Ложь) Экспорт;
		
	ТабИзмененныхДанных = Неопределено;
	
	Если ЗначениеЗаполнено(логИзмененныхДанныхАдрес) Тогда
		ТабИзмененныхДанных = ПолучитьИзВременногоХранилища(логИзмененныхДанныхАдрес);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(логИзмененныхПоказателейАдрес) Тогда
		логИзмененныхПоказателей   = ПолучитьИзВременногоХранилища(логИзмененныхПоказателейАдрес);
	КонецЕсли;
	
	ДанныеРасшифровки          = ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровки);
	СтруктураТаблицИнтерфейса  = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
	СтруктураФильтров          = ПолучитьИзВременногоХранилища(АдресСтруктураФильтров);
	
	Если СтруктураРасшифровки = Неопределено Тогда
		СтруктураРасшифровки = Новый Структура;	
		СоздатьОписаниеСтруктурыПолей(СтруктураРасшифровки,СтруктураТаблицИнтерфейса);
	КонецЕсли;
	
	ОблДляВставки=ПолеТабличногоДокументаМакет.Область(ИмяОбласти);
	ОС=ПолеТабличногоДокументаМакет.ПолучитьОбласть(ИмяОбласти);
		
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		МассивДляВставки = Значение; 
	Иначе
		МассивДляВставки = Новый Массив;
		МассивДляВставкиЗначения = Новый Массив();
		МассивДляВставкиЗначения.Добавить(Значение);
		МассивДляВставки.Добавить(МассивДляВставкиЗначения);
	КонецЕсли;
	//
	
	//Нечего вставлять - возвращаемся
	Если МассивДляВставки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;	
	
	ОднаЯчейка = Ложь;
		
	//Выделяли одну ячейку и вставлем одно значение в нее
	Если МассивДляВставки.Количество()=1 И МассивДляВставки[0].Количество()=1 И ОблДляВставки.Лево=ОблДляВставки.Право И ОблДляВставки.Верх=ОблДляВставки.Низ тогда
	    ОднаЯчейка=Истина;
	    ЗначениеДляВставки=МассивДляВставки[0][0];
	КонецЕсли;
	
	//Определим размер вставляемой области
	МаксКоличествоХ = 0;
	МаксКоличествоУ = МассивДляВставки.Количество();

	Для Каждого Элстроки Из МассивДляВставки Цикл
		Если Элстроки.Количество()>МаксКоличествоХ Тогда
			 МаксКоличествоХ =Элстроки.Количество(); 
		КонецЕсли;		
	КонецЦикла;
	
	//Видимо вставляем только пустые значения по Х или 0, если число
	Если МаксКоличествоХ = 0 Тогда
		 ЗначениеДляВставки = "";
	КонецЕсли;
		
	ОднаКолонка = Ложь;
	ОднаСтрока=Ложь;
	
	Если МаксКоличествоУ=1 И МаксКоличествоХ>1 тогда
		ОднаСтрока=Истина;
	КонецЕсли;
	Если МаксКоличествоУ>1 И МаксКоличествоХ=1 тогда
		ОднаКолонка=Истина;
	КонецЕсли;
	
	Если ОднаЯчейка Тогда
		
		Если ТекущаяОбластьТекст = ЗначениеДляВставки Тогда  //Не пишем
			Если ЗначениеДляВставки = "0" Тогда
				 ОблДляВставки.Текст = ЗначениеДляВставки;
			КонецЕсли;	
			Возврат;	
		КонецЕсли;
		
		ТекОбласть = ОблДляВставки.Текст;
		Если ОблДляВставки.Расшифровка = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		Если ОблДляВставки.ЦветФона = Новый Цвет(230,255,230) Тогда //Вычисляемый
			Возврат;		
		КонецЕсли;
		
		Если  РежимОбратногоРаспределения Тогда
			Если НЕ ОблДляВставки.ЦветФона = Новый Цвет(255,204,0) Тогда //Агрегат
				Возврат;
			КонецЕсли;	
		КонецЕсли;
		#Если ВебКлиент Тогда
			ЦветКнопки = WebЦвета.Бежевый;
		#Иначе	
			ЦветКнопки = windowsЦвета.Кнопка;
		#КонецЕсли
	
		Если ОблДляВставки.ЦветФона = ЦветКнопки Тогда //Недоступный
			Возврат;		
		КонецЕсли;

		Если ТипЗнч(ОблДляВставки.Расшифровка) = Тип("Структура") Тогда
		     ИмяТекущегоРесурса = ОблДляВставки.Расшифровка.КодРесурса;
		Иначе
		     ИмяТекущегоРесурса = ДанныеРасшифровки.Элементы[ОблДляВставки.Расшифровка].ПолучитьПоля()[0].Поле;
	    КонецЕсли;
		
		Если ЗначениеЗаполнено(КодРесурса) Тогда
			Если КодРесурса = ИмяТекущегоРесурса Тогда
				ФлИзменений = Истина;
				ВставитьЗначения(ЗначениеДляВставки,Режим,СтруктураТаблицИнтерфейса,СтруктураРасшифровки,СтруктураФильтров,ИмяТекущегоРесурса,ДанныеРасшифровки,
				ОблДляВставки,логИзмененныхПоказателей,ТабИзмененныхДанных,ТекущаяОбластьТекст);	
			КонецЕсли;	
		Иначе	
			ФлИзменений = Истина;
			ВставитьЗначения(ЗначениеДляВставки,Режим,СтруктураТаблицИнтерфейса,СтруктураРасшифровки,СтруктураФильтров,ИмяТекущегоРесурса,ДанныеРасшифровки,
			ОблДляВставки,логИзмененныхПоказателей,ТабИзмененныхДанных,ТекущаяОбластьТекст);	
		КонецЕсли;
				
		Возврат;
	КонецЕсли;
	
	
	//Если выделено много ячеек, а вставляется одно значение - то копируем его  во все
	Если МаксКоличествоУ=1 И  МаксКоличествоХ=1 Тогда
		#Если ВебКлиент Тогда
			ЦветКнопки = WebЦвета.Бежевый;
		#Иначе	
			ЦветКнопки = windowsЦвета.Кнопка;
		#КонецЕсли

		Для ИндексСтрока = ОблДляВставки.Верх По ОблДляВставки.Низ Цикл
			Для ИндексКолонка = ОблДляВставки.Лево По ОблДляВставки.Право Цикл
				НужноеЗначение = МассивДляВставки[0][0];
				ТекОбласть = ПолеТабличногоДокументаМакет.Область(ИндексСтрока,ИндексКолонка,ИндексСтрока,ИндексКолонка);
				
				Если ТекОбласть.ЦветФона = Новый Цвет(230,255,230) Тогда //Вычисляемый
					Продолжить;		
				КонецЕсли;
				
				Если ТекОбласть.ЦветФона = ЦветКнопки Тогда //Недоступный
					Продолжить;		
				КонецЕсли;
				Если  РежимОбратногоРаспределения Тогда
					Если НЕ ТекОбласть.ЦветФона = Новый Цвет(255,204,0) Тогда //Агрегат
						Продолжить;
					КонецЕсли;	
				КонецЕсли;
					
				Если ТекОбласть.Текст = НужноеЗначение Тогда  //Не пишем
					Если НужноеЗначение = "0" Тогда
						ТекОбласть.Текст = НужноеЗначение;
					КонецЕсли;	
					Продолжить;	
				КонецЕсли;
				Если ТекОбласть.Расшифровка = Неопределено Тогда
					Продолжить;
				КонецЕсли;	
								
				Если ТипЗнч(ТекОбласть.Расшифровка) = Тип("Структура") Тогда
					ИмяТекущегоРесурса = ТекОбласть.Расшифровка.КодРесурса;
				Иначе
					ИмяТекущегоРесурса = ДанныеРасшифровки.Элементы[ТекОбласть.Расшифровка].ПолучитьПоля()[0].Поле;
				КонецЕсли;

				Если ЗначениеЗаполнено(КодРесурса) Тогда
					Если КодРесурса = ИмяТекущегоРесурса Тогда
						ФлИзменений = Истина;
						ВставитьЗначения(НужноеЗначение,Режим,СтруктураТаблицИнтерфейса,СтруктураРасшифровки,СтруктураФильтров,ИмяТекущегоРесурса,ДанныеРасшифровки,
						ТекОбласть,логИзмененныхПоказателей,ТабИзмененныхДанных,ТекущаяОбластьТекст);	
					КонецЕсли;	
				Иначе	
					ФлИзменений = Истина;
					ВставитьЗначения(НужноеЗначение,Режим,СтруктураТаблицИнтерфейса,СтруктураРасшифровки,СтруктураФильтров,ИмяТекущегоРесурса,ДанныеРасшифровки,
					ТекОбласть,логИзмененныхПоказателей,ТабИзмененныхДанных,ТекущаяОбластьТекст);
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ИндХ = 1;
	ИндУ = 1;

	 //Границы области = границы вставки
	//Во всех остальных случаях размер области вставки корректируется  автоматически по размеру буфера	
	#Если ВебКлиент Тогда
		ЦветКнопки = WebЦвета.Бежевый;
	#Иначе	
		ЦветКнопки = windowsЦвета.Кнопка;
	#КонецЕсли	
	Для ИндексСтрока = ОблДляВставки.Верх По ОблДляВставки.Верх+МаксКоличествоУ-1 Цикл
		
		Если ИндХ>МаксКоличествоУ Тогда
			ИндХ = 1;		
		КонецЕсли;

		Для ИндексКолонка = ОблДляВставки.Лево По ОблДляВставки.Лево+МаксКоличествоХ-1 Цикл
			
			Если ИндУ>МаксКоличествоХ Тогда
				ИндУ = 1;
			КонецЕсли;
			
			Если МассивДляВставки[ИндХ-1].Количество()<ИндУ Тогда
				НужноеЗначение = "";
			Иначе	
				НужноеЗначение = МассивДляВставки[ИндХ-1][ИндУ-1];
			КонецЕсли;			
			
			ТекОбласть = ПолеТабличногоДокументаМакет.Область(ИндексСтрока,ИндексКолонка,ИндексСтрока,ИндексКолонка);
			
			Если ТекОбласть.ЦветФона = Новый Цвет(230,255,230) Тогда //Вычисляемый
				ИндУ = ИндУ+1;
				Продолжить;		
			КонецЕсли;
			
			Если  РежимОбратногоРаспределения Тогда
				Если НЕ ТекОбласть.ЦветФона = Новый Цвет(255,204,0) Тогда //Агрегат
					Продолжить;
				КонецЕсли;	
			КонецЕсли;
			
			Если ТекОбласть.ЦветФона = ЦветКнопки Тогда //Недоступный
				ИндУ = ИндУ+1;
				Продолжить;		
			КонецЕсли;
			
			Если ТекОбласть.Текст = НужноеЗначение Тогда  //Не пишем
				Если НужноеЗначение = "0" Тогда
					ТекОбласть.Текст = НужноеЗначение;
				КонецЕсли;	
				ИндУ = ИндУ+1;
				Продолжить;	
			КонецЕсли;
			
			Если ТекОбласть.Расшифровка = Неопределено Тогда
				Прервать;
			КонецЕсли;	
			
			Если ТипЗнч(ТекОбласть.Расшифровка) = Тип("Структура") Тогда
				ИмяТекущегоРесурса = ТекОбласть.Расшифровка.КодРесурса;
			Иначе
				ИмяТекущегоРесурса = ДанныеРасшифровки.Элементы[ТекОбласть.Расшифровка].ПолучитьПоля()[0].Поле;
			КонецЕсли;
			
			
			Если ЗначениеЗаполнено(КодРесурса) Тогда
				Если КодРесурса = ИмяТекущегоРесурса Тогда
					ФлИзменений = Истина;
					ВставитьЗначения(НужноеЗначение,Режим,СтруктураТаблицИнтерфейса,СтруктураРасшифровки,СтруктураФильтров,ИмяТекущегоРесурса,ДанныеРасшифровки,
					ТекОбласть,логИзмененныхПоказателей,ТабИзмененныхДанных,ТекущаяОбластьТекст);	
				КонецЕсли;	
			Иначе	
				ФлИзменений = Истина;
				ВставитьЗначения(НужноеЗначение,Режим,СтруктураТаблицИнтерфейса,СтруктураРасшифровки,СтруктураФильтров,ИмяТекущегоРесурса,ДанныеРасшифровки,
				ТекОбласть,логИзмененныхПоказателей,ТабИзмененныхДанных,ТекущаяОбластьТекст);		
			КонецЕсли;
				
			ИндУ = ИндУ+1;

		КонецЦикла;
		
		ИндХ = ИндХ+1;
		
	КонецЦикла;
		
КонецПроцедуры
	
Функция ПолучитьСтруктуруНеобходимыхАналитик(АналитикиРасшифровки,СтруктураТаблицИнтерфейса) Экспорт
	
	НеиспользованныеОбязательныеАналитики = Новый Структура;  //Аналитики, используемые текущеим показателем, не попавщие в тек расшифровку
	СтруктураНеЗаполненныхСкрытыхАналитик = Новый Структура;  //Аналитики, используемые текущим показателем, скрытые в невыбранных полях
	ДоступныеПоля  = СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля;
	
	Если АналитикиРасшифровки["Сценарии"] = Неопределено Тогда
		
		Если СтруктураТаблицИнтерфейса.ТаблицаКолонки.НайтиСтроки(Новый Структура("Код","Фильтр_Сценарии")).Количество()=0 Тогда	
			НеиспользованныеОбязательныеАналитики.Вставить("Сценарии");		
		КонецЕсли; 
		 
		 Для Каждого Поле Из ДоступныеПоля Цикл
			 Если СтрЗаменить(Поле.Код,"Фильтр_","") = "Сценарии" Тогда
			 СтруктураНеЗаполненныхСкрытыхАналитик.Вставить("Сценарии");
			 Прервать;
		    КонецЕсли;
		 КонецЦикла;	 
	 КонецЕсли;	
	 
	 Если НЕ АналитикиРасшифровки.Свойство("Организации") Тогда
		 НеиспользованныеОбязательныеАналитики.Вставить("Организации");
		 СтруктураНеЗаполненныхСкрытыхАналитик.Вставить("Организации");	 
	 Иначе	 
		 Если АналитикиРасшифровки["Организации"] = Неопределено Тогда	 
			 Если СтруктураТаблицИнтерфейса.ТаблицаКолонки.НайтиСтроки(Новый Структура("Код","Фильтр_Организации")).Количество()=0 Тогда	
				 НеиспользованныеОбязательныеАналитики.Вставить("Организации");		
			 КонецЕсли; 
			 
			 Для Каждого Поле Из ДоступныеПоля Цикл
				 Если СтрЗаменить(Поле.Код,"Фильтр_","") = "Организации" Тогда
					 СтруктураНеЗаполненныхСкрытыхАналитик.Вставить("Организации");
					 Прервать;
				 КонецЕсли;
			 КонецЦикла;	 
		 КонецЕсли;	
	 КонецЕсли;
	 
	 
	 Если НЕ АналитикиРасшифровки.Свойство("Проекты") Тогда
		 НеиспользованныеОбязательныеАналитики.Вставить("Проекты");
		 СтруктураНеЗаполненныхСкрытыхАналитик.Вставить("Проекты");
	 Иначе	 
		 Если АналитикиРасшифровки["Проекты"] = Неопределено Тогда	 
			 Если СтруктураТаблицИнтерфейса.ТаблицаКолонки.НайтиСтроки(Новый Структура("Код","Фильтр_Проекты")).Количество()=0 Тогда	
				 НеиспользованныеОбязательныеАналитики.Вставить("Проекты");			 
			 КонецЕсли; 
			 
			 Для Каждого Поле Из ДоступныеПоля Цикл
				 Если СтрЗаменить(Поле.Код,"Фильтр_","") = "Проекты" Тогда
					 СтруктураНеЗаполненныхСкрытыхАналитик.Вставить("Проекты");
					 Прервать;
				 КонецЕсли;
			 КонецЦикла;	 
		 КонецЕсли;	
	 КонецЕсли;
	 
	 Если  ЗначениеЗаполнено(АналитикиРасшифровки.ПоказателиСтрокаОтчета) Тогда
		 ГруппаПоказателя = СтруктураТаблицИнтерфейса.КэшАналитикПоказателей.НайтиСтроки(Новый Структура("Строка",АналитикиРасшифровки.ПоказателиСтрокаОтчета))[0]; 
		Для ИндА=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			 Если ГруппаПоказателя["Аналитика"+ИндА] = "" Тогда 
				 Прервать;
			 КонецЕсли;
			 
			 Если  НЕ АналитикиРасшифровки.Свойство(ГруппаПоказателя["Аналитика"+ИндА])  Тогда
				 НеиспользованныеОбязательныеАналитики.Вставить(ГруппаПоказателя["Аналитика"+ИндА]);	
				 Для Каждого Поле Из ДоступныеПоля Цикл
					 Если СтрЗаменить(Поле.Код,"Фильтр_","") = ГруппаПоказателя["Аналитика"+ИндА] Тогда
						 СтруктураНеЗаполненныхСкрытыхАналитик.Вставить(ГруппаПоказателя["Аналитика"+ИндА]);
						 Прервать;
					 КонецЕсли;
				 КонецЦикла;	 
			 ИначеЕсли АналитикиРасшифровки[ГруппаПоказателя["Аналитика"+ИндА]] = Неопределено Тогда	 
				   НеиспользованныеОбязательныеАналитики.Вставить(ГруппаПоказателя["Аналитика"+ИндА]);
			 КонецЕсли;	 
		 КонецЦикла;		
		 Если ЗначениеЗаполнено(ГруппаПоказателя.АналитикаВалюта) Тогда	 
			  Если   АналитикиРасшифровки["ДопВалюты"] = Неопределено Тогда
				 НеиспользованныеОбязательныеАналитики.Вставить("ДопВалюты");	
				 Для Каждого Поле Из ДоступныеПоля Цикл
					 Если Поле.Код = "Фильтр_ДопВалюты" Тогда
						 СтруктураНеЗаполненныхСкрытыхАналитик.Вставить("ДопВалюты");
						 Прервать;
					 КонецЕсли;
				 КонецЦикла;	 
			 КонецЕсли;	 
		 КонецЕсли;	 	 
	 КонецЕсли;
	 СтруктураВозврата = Новый Структура;
	 СтруктураВозврата.Вставить("НеиспользованныеОбязательныеАналитики",НеиспользованныеОбязательныеАналитики);
	 СтруктураВозврата.Вставить("СтруктураНеЗаполненныхСкрытыхАналитик",СтруктураНеЗаполненныхСкрытыхАналитик);	
	 
	 Возврат СтруктураВозврата; 
	 
КонецФункции 
 
Процедура ИнициализироватьДопТаблицы(ТаблицыИнтерфейса)
	Если НЕ ЗначениеЗаполнено(ТзДобавленныхАналитикАдрес) Тогда
		
		ТзДобавленныхАналитик = Новый ТаблицаЗначений;
		
		НК = ТзДобавленныхАналитик.Колонки.Добавить("Показатели",Новый ОписаниеТипов("СправочникСсылка.НастройкиСтруктурыБланка")); 
		НК = ТзДобавленныхАналитик.Колонки.Добавить("ПоказательСсылка",Новый ОписаниеТипов("СправочникСсылка.ПоказателиОтчетов")); 
		НК = ТзДобавленныхАналитик.Колонки.Добавить("ПоказательСтрока",Новый ОписаниеТипов("СправочникСсылка.СтрокиОтчетов"));
		НК = ТзДобавленныхАналитик.Колонки.Добавить("СтруктураОтбораСтроки");
        НК = ТзДобавленныхАналитик.Колонки.Добавить("ДобавляемаяАналитикаКод");
		НК = ТзДобавленныхАналитик.Колонки.Добавить("ТекстСвертки");
		
		Для Каждого Стр ИЗ ТаблицыИнтерфейса.ТаблицаСтроки Цикл
			Если Стр.Код = "Фильтр_Показатели" Тогда
				Продолжить;
			КонецЕсли;	 
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Неопределено"));
			МассивТипов.Добавить(Тип(Стр.ТипСтрока));
			ТипыКолонки = Новый ОписаниеТипов(МассивТипов);
			
			НК = ТзДобавленныхАналитик.Колонки.Добавить(СтрЗаменить(Стр.Код,"Фильтр_",""));
		КонецЦикла;	
		Для Каждого Стр ИЗ ТаблицыИнтерфейса.ТаблицаКолонки Цикл
			Если Стр.Код = "Фильтр_Показатели" Тогда
				Продолжить;
			КонецЕсли;	 
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Неопределено"));
			МассивТипов.Добавить(Тип(Стр.ТипСтрока));
			ТипыКолонки = Новый ОписаниеТипов(МассивТипов);
			
			НК = ТзДобавленныхАналитик.Колонки.Добавить(СтрЗаменить(Стр.Код,"Фильтр_",""));
		КонецЦикла;	
		Для Каждого Стр ИЗ ТаблицыИнтерфейса.ТаблицаСтраницы Цикл
			Если Стр.Код = "Фильтр_Показатели" Тогда
				Продолжить;
			КонецЕсли;	 
			Если Стр.Код = "Фильтр_Периоды" Тогда
				 Продолжить;
			КонецЕсли;			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Неопределено"));
			МассивТипов.Добавить(Тип(Стр.ТипСтрока));
			ТипыКолонки = Новый ОписаниеТипов(МассивТипов);
			
			НК = ТзДобавленныхАналитик.Колонки.Добавить(СтрЗаменить(Стр.Код,"Фильтр_",""));
		КонецЦикла;	
		Для Каждого Стр ИЗ ТаблицыИнтерфейса.ТаблицаДоступныеПоля Цикл
			Если Стр.Код = "Фильтр_Показатели" Тогда
				Продолжить;
			КонецЕсли;	 
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Неопределено"));
			МассивТипов.Добавить(Тип(Стр.ТипСтрока));
			ТипыКолонки = Новый ОписаниеТипов(МассивТипов);
			
			НК = ТзДобавленныхАналитик.Колонки.Добавить(СтрЗаменить(Стр.Код,"Фильтр_",""));
		КонецЦикла;			
		
		ТзДобавленныхАналитикАдрес = ПоместитьВоВременноеХранилище(ТзДобавленныхАналитик,Новый УникальныйИдентификатор);
		логИзмененныхПоказателей = ТзДобавленныхАналитик.СкопироватьКолонки();
		
		Для Каждого Ресурс Из ТаблицыИнтерфейса.ДополнительныеПоля Цикл
			Если Ресурс.Расчетный Тогда
				 Продолжить;
			КонецЕсли;		
			НК = логИзмененныхПоказателей.Колонки.Добавить(СокрЛП(Ресурс.КодПоказателя),ОбщегоназначенияУх.ПолучитьОписаниеТиповЧисла(15,4));
			НК = логИзмененныхПоказателей.Колонки.Добавить(СокрЛП(Ресурс.КодПоказателя)+"_ЗначениеВалюта",ОбщегоназначенияУх.ПолучитьОписаниеТиповЧисла(15,4));
		КонецЦикла;
	
		логИзмененныхПоказателейАдрес = ПоместитьВоВременноеХранилище(логИзмененныхПоказателей,Новый УникальныйИдентификатор);
		логИзмененныхПоказателей.Колонки.Добавить("КУдалению",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		логИзмененныхПоказателей.Колонки.Добавить("ПериодыСвязанныйПериод");
		логИзмененныхПоказателей.Колонки.Добавить("ТекущийПоказательКод",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(150));

        ГлЛогИзмененныхПоказателей = логИзмененныхПоказателей.СкопироватьКолонки();
		ГлЛогИзмененныхПоказателей.Колонки.Добавить("НомерТранзакции");
		ГлЛогИзмененныхПоказателей.Колонки.Добавить("ОписаниеТранзакции");
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВставитьЗначения(НужноеЗначение,Режим,СтруктураТаблицИнтерфейса,СтруктураРасшифровки,СтруктураФильтров,ИмяТекущегоРесурса,ДанныеРасшифровки,
	ТекОбласть,логИзмененныхПоказателей=Неопределено,ТабИзмененныхДанных=Неопределено,ТекущаяОбластьТекст);
	
	ИмяТекущегоРесурсаПолное = ИмяТекущегоРесурса;
	
	Если ТипЗнч(НужноеЗначение) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		 НужноеЗначение_ =   ДанныеРасшифровки.Элементы[НужноеЗначение].ПолучитьПоля()[0].Значение;
	Иначе	 
		 НужноеЗначение_ =   НужноеЗначение;
	КонецЕсли;
	
	
	Если  Режим = "МатрицаПолномочий" Тогда 
		СоздатьОписаниеСтруктурыПолейМП(СтруктураРасшифровки,СтруктураТаблицИнтерфейса);
		ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,ТекОбласть.Расшифровка,
		СтруктураТаблицИнтерфейса,СтруктураФильтров,СтруктураРасшифровки);
		
		ЗаписатьНастройкуМатрицыПолномочий(НужноеЗначение_,СтруктураРасшифровки,ТабИзмененныхДанных,ИмяТекущегоРесурса);	
		
	ИначеЕсли Режим = "Статусы" Тогда 	  
		
		СтруктураРасшифровки = Новый Структура;
		СоздатьОписаниеСтруктурыПолей(СтруктураРасшифровки,СтруктураТаблицИнтерфейса);
		ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,ТекОбласть.Расшифровка,
		СтруктураТаблицИнтерфейса,СтруктураФильтров,СтруктураРасшифровки);
		ПоказательСсылка = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.НайтиСтроки(Новый Структура("КолонкаФорматированныйКод,Строка",ИмяТекущегоРесурса,СтруктураРасшифровки.ПоказателиСтрокаОтчета));
		Если ПоказательСсылка.Количество()=0 Тогда
			 Возврат;
		КонецЕсли;

		СтруктураРасшифровки.Вставить("ПоказательСсылка",ПоказательСсылка[0].Показатель);
		СтруктураРасшифровки.Вставить("ПоказательТипЗнчения",ПоказательСсылка[0].ТипЗначения);
		СтруктураРасшифровки.Вставить("НеМасштабируется",ПоказательСсылка[0].НеМасштабируется);
		СтруктураРасшифровки.Вставить("КодРесурса",ИмяТекущегоРесурса);	 
		
		ЗаписатьСтатусВПоказатель(логИзмененныхПоказателей,НужноеЗначение_,СтруктураРасшифровки,ТабИзмененныхДанных,СтруктураТаблицИнтерфейса.КэшАналитикПоказателей);
		
	ИначеЕсли Режим = "Комментарии" Тогда 	
		
		
		СтруктураРасшифровки = Новый Структура;
		СоздатьОписаниеСтруктурыПолей(СтруктураРасшифровки,СтруктураТаблицИнтерфейса);
		ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,ТекОбласть.Расшифровка,
		СтруктураТаблицИнтерфейса,СтруктураФильтров,СтруктураРасшифровки);
		ПоказательСсылка = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.НайтиСтроки(Новый Структура("КолонкаФорматированныйКод,Строка",ИмяТекущегоРесурса,СтруктураРасшифровки.ПоказателиСтрокаОтчета));
		Если ПоказательСсылка.Количество()=0 Тогда
			 Возврат;
		КонецЕсли;

		СтруктураРасшифровки.Вставить("ПоказательСсылка",ПоказательСсылка[0].Показатель);
		СтруктураРасшифровки.Вставить("ПоказательТипЗнчения",ПоказательСсылка[0].ТипЗначения);
		СтруктураРасшифровки.Вставить("НеМасштабируется",ПоказательСсылка[0].НеМасштабируется);
		СтруктураРасшифровки.Вставить("КодРесурса",ИмяТекущегоРесурса);	 

		ЗаписатьКомментарийВПоказатель(логИзмененныхПоказателей,НужноеЗначение_,СтруктураРасшифровки,ТабИзмененныхДанных,СтруктураТаблицИнтерфейса.КэшАналитикПоказателей);

		
	ИначеЕсли Режим = Неопределено Тогда	
		
		СтруктураРасшифровки = Новый Структура;
		СоздатьОписаниеСтруктурыПолей(СтруктураРасшифровки,СтруктураТаблицИнтерфейса);
		ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,ТекОбласть.Расшифровка,
		СтруктураТаблицИнтерфейса,СтруктураФильтров,СтруктураРасшифровки);
	
		Если СтруктураРасшифровки.Свойство("РедактированиеВозможно") И НЕ СтруктураРасшифровки.РедактированиеВозможно  Тогда	
			Если НЕ ТекущаяОбластьТекст = Неопределено Тогда
				ТекОбласть.Текст = ТекущаяОбластьТекст;
			КонецЕсли;	
			Возврат;	
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтруктураРасшифровки.ПоказателиСтрокаОтчета) Тогда
			
			Если НЕ СтруктураРасшифровки.ПоказателиСтрокаОтчета.Владелец = ВидОтчета Тогда	
				ИмяТекущегоРесурса_ =  СокрЛП(СтруктураРасшифровки.ПоказателиСтрокаОтчета.Владелец.Код)+"_"+ИмяТекущегоРесурса;
			Иначе	
				ИмяТекущегоРесурса_ =  ИмяТекущегоРесурса;
			КонецЕсли;	
			
		Иначе	
			ИмяТекущегоРесурса_ =  ИмяТекущегоРесурса;
		КонецЕсли;
		
		ПоказательСсылка = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.НайтиСтроки(Новый Структура("КолонкаФорматированныйКод,Строка",ИмяТекущегоРесурса_,СтруктураРасшифровки.ПоказателиСтрокаОтчета)); 

		Если ПоказательСсылка.Количество()=0 Тогда
			Если Найти(ИмяТекущегоРесурса_,"_ЗначениеВалюта")>0 Тогда
				ПоказательСсылка = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.НайтиСтроки(Новый Структура("КолонкаФорматированныйКод,Строка",СтрЗаменить(ИмяТекущегоРесурса_,"_ЗначениеВалюта",""),СтруктураРасшифровки.ПоказателиСтрокаОтчета));
				Если ПоказательСсылка.Количество()=0 Тогда 
					Возврат;
				КонецЕсли;	 	 
			ИначеЕсли Найти(ИмяТекущегоРесурса_,"БАЗА_АБС")>0 Тогда //Это абсолютное отклонение			
				НужноеЗначение_ = ЗаписатьПоказательЧерезОтклонение("АБС",ИмяТекущегоРесурса_,ПоказательСсылка,СтруктураТаблицИнтерфейса,СтруктураРасшифровки,НужноеЗначение);		
			ИначеЕсли Найти(ИмяТекущегоРесурса_,"БАЗА_ОТН")>0 Тогда //Это относительное отклонение		
				НужноеЗначение_ = ЗаписатьПоказательЧерезОтклонение("ОТН",ИмяТекущегоРесурса_,ПоказательСсылка,СтруктураТаблицИнтерфейса,СтруктураРасшифровки,НужноеЗначение);		
				
				ПоказательСсылка = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.НайтиСтроки(Новый Структура("КолонкаФорматированныйКод,Строка",СокрЛП(СтруктураРасшифровки.ПоказателиСтрокаОтчета.Владелец.Код)+"_"+ИмяТекущегоРесурса,СтруктураРасшифровки.ПоказателиСтрокаОтчета)); 
                				
			Иначе	
				Возврат;
			КонецЕсли;		
		КонецЕсли;
				
		СтруктураРасшифровки.Вставить("ПоказательСсылка",ПоказательСсылка[0].Показатель);
		СтруктураРасшифровки.Вставить("ПоказательТипЗнчения",ПоказательСсылка[0].ТипЗначения);
		СтруктураРасшифровки.Вставить("НеМасштабируется",ПоказательСсылка[0].НеМасштабируется);
		СтруктураРасшифровки.Вставить("КодРесурса",ИмяТекущегоРесурса_);	 
		ФлагОшибки = Ложь;
		
		//Ищем возможные значения области
		СтруктураОтбораДанных = Новый Структура;	
				
		Если НЕ ЗначениеЗаполнено(СтруктураРасшифровки.ID)  Тогда
			ЗаписатьЗначениеВПоказатель(логИзмененныхПоказателей,НужноеЗначение_,СтруктураРасшифровки,ТабИзмененныхДанных,СтруктураТаблицИнтерфейса.КэшАналитикПоказателей,ФлагОшибки);	
		Иначе
			
			ТЗДанные  = ПолучитьИзВременногоХранилища(тзДанныеАдрес);
			Для Каждого сСвойство Из СтруктураРасшифровки Цикл	
				Если НЕ ТзДанные.Колонки.Найти(сСвойство.Ключ)=Неопределено Тогда
					СтруктураОтбораДанных.Вставить(сСвойство.Ключ,сСвойство.Значение);
				КонецЕсли;		
			КонецЦикла;	
			
			НайденныеСтроки = ТЗДанные.НайтиСтроки(СтруктураОтбораДанных);
			
			Если НайденныеСтроки.Количество()=0 Тогда
				ЗаписатьЗначениеВПоказатель(логИзмененныхПоказателей,НужноеЗначение_,СтруктураРасшифровки,ТабИзмененныхДанных,СтруктураТаблицИнтерфейса.КэшАналитикПоказателей,ФлагОшибки);
			Иначе
				ТекущееЗначение = НайденныеСтроки[0]["Значение"];
				ЗаписатьЗначениеВПоказатель(логИзмененныхПоказателей,НужноеЗначение_,СтруктураРасшифровки,ТабИзмененныхДанных,СтруктураТаблицИнтерфейса.КэшАналитикПоказателей,ФлагОшибки);
				СтруктураРасшифровки.Вставить("ID",Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
				ЗаписатьЗначениеВПоказатель(логИзмененныхПоказателей,ТекущееЗначение,СтруктураРасшифровки,ТабИзмененныхДанных,СтруктураТаблицИнтерфейса.КэшАналитикПоказателей,ФлагОшибки);
			КонецЕсли;	
		КонецЕсли;	
		
		Если НЕ ФлагОшибки Тогда
			Если СтруктураРасшифровки.ПоказательТипЗнчения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
				Если Найти(ИмяТекущегоРесурсаПолное,"БАЗА_АБС")>0 Тогда //Это абсолютное отклонение			
					ТекОбласть.Текст =  Формат(ПреобразоватьТекстВЧисло(НужноеЗначение,ФлагОшибки,ПоказательСсылка[0].НеМасштабируется),ТекОбласть.Формат);		
				ИначеЕсли Найти(ИмяТекущегоРесурсаПолное,"БАЗА_ОТН")>0 Тогда //Это относительное отклонение		
					ТекОбласть.Текст =  Формат(ПреобразоватьТекстВЧисло(НужноеЗначение,ФлагОшибки,ПоказательСсылка[0].НеМасштабируется),ТекОбласть.Формат);		
				Иначе	
					ТекОбласть.Текст =  Формат(ПреобразоватьТекстВЧисло(НужноеЗначение_,ФлагОшибки,ПоказательСсылка[0].НеМасштабируется),ТекОбласть.Формат);
				КонецЕсли;	
			ИначеЕсли СтруктураРасшифровки.ПоказательТипЗнчения = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда			
				Если ВРЕГ(НужноеЗначение_) = "ИСТИНА" ИЛИ ВРЕГ(НужноеЗначение_) = "TRUE" ИЛИ   НужноеЗначение_ = "1" ИЛИ НужноеЗначение_ = 1 ИЛИ ВРЕГ(НужноеЗначение_) = "ДА" Тогда
					ТекОбласть.Текст = "Да";		 	
					ТекОбласть.ЦветТекста = Новый Цвет(0,128,0);
				ИначеЕсли ВРЕГ(НужноеЗначение_) = "ЛОЖЬ" ИЛИ ВРЕГ(НужноеЗначение_) = "FALSE" ИЛИ  НужноеЗначение_ = "0" ИЛИ НужноеЗначение_ = 0 ИЛИ ВРЕГ(НужноеЗначение_) = "НЕТ" Тогда
					ТекОбласть.Текст = "Нет"; 
					ТекОбласть.ЦветТекста = Новый Цвет(255,0,0);
				ИначеЕсли НужноеЗначение_ = Неопределено Тогда	
					ТекОбласть.Текст = "";
				КонецЕсли;			
			КонецЕсли;
			
		Иначе			
			Если СтруктураРасшифровки.ПоказательТипЗнчения = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда		
				ТекОбласть.Текст = ТекущаяОбластьТекст;	
				Если  ВРЕГ(ТекОбласть.Текст) = "ДА" Тогда		 	
					ТекОбласть.ЦветТекста = Новый Цвет(0,128,0);
				ИначеЕсли  ВРЕГ(ТекОбласть.Текст) = "НЕТ" Тогда
					ТекОбласть.ЦветТекста = Новый Цвет(255,0,0);
				КонецЕсли;
			КонецЕсли;		
		КонецЕсли;	
		
	КонецЕсли;	
		
КонецПроцедуры	

Функция ЗаписатьПоказательЧерезОтклонение(ВидОтклонения,ИмяТекущегоРесурса,ПоказательСсылка,СтруктураТаблицИнтерфейса,СтруктураРасшифровки,НужноеЗначение)
	
	уидТекущегоРесурса = Сред(ИмяТекущегоРесурса,10,32);
	ИмяТекущегоРесурса = Сред(ИмяТекущегоРесурса,43,200);
	ФлагОшибки = Ложь;
	
	НужноеЗначениеЧисло = ПреобразоватьТекстВЧисло(НужноеЗначение,ФлагОшибки);
	Если  ФлагОшибки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПоказательСсылка = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.НайтиСтроки(Новый Структура("КолонкаФорматированныйКод,Строка",ИмяТекущегоРесурса,СтруктураРасшифровки.ПоказателиСтрокаОтчета));
	
	ТЗданные = ПолучитьИзВременногоХранилища(ТзданныеАдрес);
	СтруктураПоиска = Новый Структура;
	Для Каждого Кол Из ТЗданные.Колонки Цикл
		Если СтруктураРасшифровки.Свойство(Кол.Имя) Тогда
			Если Кол.Имя = "Валюты" ИЛИ Кол.Имя = "Проекты" ИЛИ Кол.Имя = "Показатели" ИЛИ Кол.Имя = "Сценарии" ИЛИ Кол.Имя = "Организации" ИЛИ Кол.Имя = "Периоды" Тогда		
				СтруктураПоиска.Вставить(Кол.Имя,СтруктураРасшифровки[Кол.Имя]);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	СтруктураПоказателя = СтруктураТаблицИнтерфейса.КэшАналитикПоказателей.НайтиСтроки(Новый Структура("Строка",СтруктураРасшифровки.ПоказателиСтрокаОтчета));
	Для Каждого стПоказатель Из СтруктураПоказателя Цикл
		Для Инд=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			Если НЕ ЗначениеЗаполнено(стПоказатель["Аналитика"+Инд]) Тогда
				Прервать;
			КонецЕсли;	
			
			Если  СтруктураРасшифровки.Свойство(стПоказатель["Аналитика"+Инд]) Тогда
				СтруктураПоиска.Вставить(стПоказатель["Аналитика"+Инд],СтруктураРасшифровки[стПоказатель["Аналитика"+Инд]]);
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
	СтруктураПоиска.Вставить("ПоказательСсылка",СтруктураРасшифровки.ПоказательСсылка);
	
	БазовоеЗначение = ТЗданные.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрБазовоеЗначение Из БазовоеЗначение Цикл
		
		Если ВидОтклонения = "АБС" Тогда
			НужноеЗначение_ =СтрБазовоеЗначение["Значение_БАЗА_"+уидТекущегоРесурса]+(НужноеЗначениеЧисло);
		ИначеЕсли ВидОтклонения = "ОТН" Тогда
			Если СтрБазовоеЗначение["БАЗА_"+уидТекущегоРесурса+"_"+ИмяТекущегоРесурса] = 0 Тогда
				НужноеЗначение_ = Неопределено;
			Иначе	
				НужноеЗначение_ = (СтрБазовоеЗначение["Значение_БАЗА_"+уидТекущегоРесурса]*(100+(НужноеЗначениеЧисло)))/100;	
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НужноеЗначение_;
	
КонецФункции	

Процедура ИзменитьЗначенияВОбласти(ПолеТабличногоДокументаМакет,ИмяОбласти,СтруктураПараметров) Экспорт;
		
	ТабИзмененныхДанных = ПолучитьИзВременногоХранилища(логИзмененныхДанныхАдрес);
	
	Если ЗначениеЗаполнено(логИзмененныхПоказателейАдрес) Тогда
		логИзмененныхПоказателей   = ПолучитьИзВременногоХранилища(логИзмененныхПоказателейАдрес);
	КонецЕсли;
		
	ДанныеРасшифровки          = ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровки);
	СтруктураТаблицИнтерфейса  = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
	СтруктураФильтров          = ПолучитьИзВременногоХранилища(АдресСтруктураФильтров);
	СтруктураРасшифровки = Новый Структура;	
	СоздатьОписаниеСтруктурыПолей(СтруктураРасшифровки,СтруктураТаблицИнтерфейса);	
	ОблДляВставки=ПолеТабличногоДокументаМакет.Область(ИмяОбласти);
		
	Если ОблДляВставки.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Таблица Тогда
		оВерх 	=  ПолеТабличногоДокументаМакет.ФиксацияСверху+1;
		оНиз  	=  ПолеТабличногоДокументаМакет.ВысотаТаблицы;
		оЛево 	=  ПолеТабличногоДокументаМакет.ФиксацияСлева+1;
		оПраво 	=  ПолеТабличногоДокументаМакет.ШиринаТаблицы;	
	Иначе			
		оВерх 	=  ОблДляВставки.Верх;
		оНиз  	=  ОблДляВставки.Низ;
		оЛево 	=  ОблДляВставки.Лево;
		оПраво 	=  ОблДляВставки.Право;		
	КонецЕсли;
		
	ОС=ПолеТабличногоДокументаМакет.ПолучитьОбласть(ИмяОбласти);
			
	СтруктураПараметров_ = Новый Структура;
	СтруктураПараметров_.Вставить("ВидКорректировки",СтруктураПараметров.ВидКорректировки);
	СтруктураПараметров_.Вставить("ЗначениеКорректировки",СтруктураПараметров.ЗначениеКорректировки);
    СтруктураПараметров_.Вставить("СценарийПриемник",СтруктураПараметров.СценарийПриемник);
	
	ТаблицаСценарияДефлятора = Неопределено;
	// Границы области = границы вставки
	Если СтруктураПараметров.ВидКорректировки = "Значение" ИЛИ СтруктураПараметров.ВидКорректировки = "Процент" Тогда
		
	ИначеЕсли СтруктураПараметров.ВидКорректировки = "Дефлятор" Тогда	
		ТаблицаСценарияДефлятора = ПолучитьТаблицуДефлятора(ДанныеРасшифровки,СтруктураТаблицИнтерфейса,СтруктураФильтров,СтруктураПараметров.ЗначениеКорректировки);	
		Если ТаблицаСценарияДефлятора.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	СтруктураПараметров_.Вставить("ТаблицаСценарияДефлятора",ТаблицаСценарияДефлятора);
	
	Для ИндексСтрока = ОВерх По ОНиз Цикл	
		Для ИндексКолонка = ОЛево По ОПраво Цикл
			
			ТекОбласть = ПолеТабличногоДокументаМакет.Область(ИндексСтрока,ИндексКолонка,ИндексСтрока,ИндексКолонка);
			
			Если ТекОбласть.Расшифровка = Неопределено Тогда
				Продолжить;
			КонецЕсли;		
			Если ТекОбласть.ЦветФона = Новый Цвет(230,255,230) Тогда //Вычисляемый
				Продолжить;		
			КонецЕсли;	
			Если  РежимОбратногоРаспределения Тогда
				Если НЕ ТекОбласть.ЦветФона = Новый Цвет(255,204,0) Тогда //Агрегат
					Продолжить;
				КонецЕсли;	
			КонецЕсли;
			#Если ВебКлиент Тогда
				ЦветКнопки = WebЦвета.Бежевый;
			#Иначе	
				ЦветКнопки = windowsЦвета.Кнопка;
			#КонецЕсли
			
			Если ТекОбласть.ЦветФона = ЦветКнопки Тогда //Недоступный
				Продолжить;		
			КонецЕсли;
			
			Если ТипЗнч(ТекОбласть.Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
				ИмяТекущегоРесурса = ДанныеРасшифровки.Элементы[ТекОбласть.Расшифровка].ПолучитьПоля()[0].Поле;		
			Иначе	
				ИмяТекущегоРесурса =ТекОбласть.Расшифровка.КодРесурса;	
			КонецЕсли;
			
			ИзменитьЗначение(ТекОбласть.Текст,СтруктураПараметров_,СтруктураТаблицИнтерфейса,СтруктураРасшифровки,СтруктураФильтров,ИмяТекущегоРесурса,ДанныеРасшифровки,
			ТекОбласть,логИзмененныхПоказателей,ТабИзмененныхДанных);
			
		КонецЦикла;			
	КонецЦикла;
	
КонецПроцедуры

Процедура ИзменитьЗначение(ТекущееЗначение,Режим,СтруктураТаблицИнтерфейса,СтруктураРасшифровки,СтруктураФильтров,ИмяТекущегоРесурса,ДанныеРасшифровки,ТекОбласть,логИзмененныхПоказателей,ТабИзмененныхДанных)
	
	СтруктураРасшифровки = Новый Структура;
	СоздатьОписаниеСтруктурыПолей(СтруктураРасшифровки,СтруктураТаблицИнтерфейса);
	ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,ТекОбласть.Расшифровка,
	СтруктураТаблицИнтерфейса,СтруктураФильтров,СтруктураРасшифровки);
	ПоказательСсылка = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.НайтиСтроки(Новый Структура("КолонкаФорматированныйКод,Строка",ИмяТекущегоРесурса,СтруктураРасшифровки.ПоказателиСтрокаОтчета));
	
	Если ПоказательСсылка.Количество() = 0 Тогда
		 Возврат;
	КонецЕсли;	
	
	СтруктураРасшифровки.Вставить("ПоказательСсылка",ПоказательСсылка[0].Показатель);
	СтруктураРасшифровки.Вставить("ПоказательТипЗнчения",ПоказательСсылка[0].ТипЗначения);
	СтруктураРасшифровки.Вставить("НеМасштабируется",ПоказательСсылка[0].НеМасштабируется);
	СтруктураРасшифровки.Вставить("КодРесурса",ИмяТекущегоРесурса);	 
	
	Попытка 
		Если СокрЛП(ТекущееЗначение) = "" Тогда
			ЗначениеЧисло = 0;
		Иначе	
			ЗначениеЧисло = Число(СтрЗаменить(ТекущееЗначение," ",""));
		КонецЕсли;	 
	Исключение
		Возврат;		
	КонецПопытки;
	
	Если Режим.ВидКорректировки = "Процент" Тогда
		 ЗначениеЧислоИтог = ЗначениеЧисло*(1+Режим.ЗначениеКорректировки/100);
	ИначеЕсли Режим.ВидКорректировки = "Значение" Тогда	
		 ЗначениеЧислоИтог = ЗначениеЧисло+Режим.ЗначениеКорректировки;
	ИначеЕсли Режим.ВидКорректировки = "Дефлятор" Тогда
	     ТаблицаКоэффициентов = Режим.ТаблицаСценарияДефлятора;
		 СтруктураПоиска = Новый Структура();
		
		 Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаСтроки Цикл
			 Если Стр.Код = "Фильтр_Показатели" Тогда
				   СтруктураПоиска.Вставить("ПоказательОтчета",СтруктураРасшифровки.ПоказательСсылка);
			 ИначеЕсли 	 Стр.Код =  "Фильтр_Периоды" Тогда
                 СтруктураПоиска.Вставить("ПериодОтчета",СтруктураРасшифровки.ПериодыСвязанныйПериод);
			 ИначеЕсли 	 Стр.Код =  "Фильтр_Организации" Тогда
                 СтруктураПоиска.Вставить("Организация",СтруктураРасшифровки.Организации);
			 ИначеЕсли 	 Стр.Код =  "Фильтр_Проект" Тогда
				 СтруктураПоиска.Вставить("Проект",СтруктураРасшифровки.Проекты);	 	 
			 Иначе	   
				 СтруктураПоиска.Вставить(СтрЗаменить(Стр.Код,"Фильтр_",""),СтруктураРасшифровки[СтрЗаменить(Стр.Код,"Фильтр_","")]);
			 КонецЕсли;	 	 
		 КонецЦикла;
		 Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаКолонки Цикл
			 Если Стр.Код = "Фильтр_Показатели" Тогда
				 СтруктураПоиска.Вставить("ПоказательОтчета",СтруктураРасшифровки.ПоказательСсылка);
			 ИначеЕсли 	 Стр.Код =  "Фильтр_Периоды" Тогда
				 СтруктураПоиска.Вставить("ПериодОтчета",СтруктураРасшифровки.ПериодыСвязанныйПериод);	  
			 ИначеЕсли 	 Стр.Код =  "Фильтр_Организации" Тогда
				 СтруктураПоиска.Вставить("Организация",СтруктураРасшифровки.Организации);
			 ИначеЕсли 	 Стр.Код =  "Фильтр_Проект" Тогда
				 СтруктураПоиска.Вставить("Проект",СтруктураРасшифровки.Проекты);	  
			 ИначеЕсли Стр.Код =  "Фильтр_Показатели_Колонки" Тогда	  
				 Продолжить;
			 Иначе	   
				 СтруктураПоиска.Вставить(СтрЗаменить(Стр.Код,"Фильтр_",""),СтруктураРасшифровки[СтрЗаменить(Стр.Код,"Фильтр_","")]);
			 КонецЕсли;	 	 
		 КонецЦикла;
	 
		 НужныйКоэффициент = ТаблицаКоэффициентов.НайтиСтроки(СтруктураПоиска);
		 Если НужныйКоэффициент.Количество() = 1 Тогда 
			 ЗначениеЧислоИтог = ЗначениеЧисло*НужныйКоэффициент[0].Значение; 
		 Иначе
			 Возврат;
		 КонецЕсли;	 
		 
	 КонецЕсли;	
	
	 Если ЗначениеЗаполнено(Режим.СценарийПриемник) Тогда
		  СтруктураРасшифровки.Сценарии = Режим.СценарийПриемник;
	 КонецЕсли;	 
	 
	 ФлагОшибки = Ложь;
	 
	 ЗаписатьЗначениеВПоказатель(логИзмененныхПоказателей,ЗначениеЧислоИтог,СтруктураРасшифровки,ТабИзмененныхДанных,СтруктураТаблицИнтерфейса.КэшАналитикПоказателей,ФлагОшибки);
	 Если НЕ ФлагОшибки Тогда
		ТекОбласть.Текст =  ЗначениеЧислоИтог;
	 КонецЕсли;	
	
КонецПроцедуры
	
Функция ПолучитьТаблицуДефлятора(ДанныеРасшифровки,СтруктураТаблицИнтерфейса,СтруктураФильтровИтог,СценарийДефлятор)	
	
	ВыбранныеРесурсы = СтруктураТаблицИнтерфейса.ТаблицаВыбранныеРесурсы.ВыгрузитьКолонку("Ресурс");
    СтруктураФильтровИтог_ = Новый Структура;
	Для Каждого Стр Из СтруктураФильтровИтог Цикл
		 СтруктураФильтровИтог_.Вставить(Стр.Ключ,Стр.Значение);
	КонецЦикла;	
	СтруктураФильтровИтог_.Вставить("Фильтр_Сценарии",СценарийДефлятор);
	СтруктураФильтровИтог_.Вставить("РежимЗапроса","Дефлятор");
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Валюта",СтруктураФильтровИтог.Фильтр_Валюты);
	СтруктураПараметров.Вставить("ВидОтчета",СтруктураФильтровИтог.ВидОтчета);	
	СтруктураПараметров.Вставить("Сценарий",СценарийДефлятор);
		
	МассивПериодов = ПериодыУХ.ПолучитьПодчиненныеПериоды(СтруктураФильтровИтог.ГоризонтДатаНачала, СтруктураФильтровИтог.ГоризонтДатаОкончания, Периодичность);
	СтруктураПараметров.Вставить("ПериодОтчета",МассивПериодов);	
	Если СтруктураФильтровИтог.Свойство("Фильтр_Организации") Тогда
		СтруктураПараметров.Вставить("Организация",СтруктураФильтровИтог.Фильтр_Организации);	
	КонецЕсли;
	Если СтруктураФильтровИтог.Свойство("Фильтр_Проекты") Тогда
		СтруктураПараметров.Вставить("Проект",СтруктураФильтровИтог.Фильтр_Проекты);	
	КонецЕсли;

	РаскрываемыеАналитики = Новый Структура;
	
	Для Каждого Стр Из СтруктураТаблицИнтерфейса.ДоступныеАналитики Цикл
		Если  Стр.ИндексКартинки = 4 Тогда 	
			РаскрываемыеАналитики.Вставить(Стр.КодАналитики);
		КонецЕсли;
	КонецЦикла;
	
	ТЗДанныеДефляторов = СводнаяТаблицаУХ.ПолучитьЗначениеПоказателей(СтруктураПараметров,РаскрываемыеАналитики);	

	Возврат ТЗДанныеДефляторов;
	
КонецФункции

Процедура ВставитьКомментраийВОбласть(ТабИзмененныхДанных,ПолеТабличногоДокументаМакет,ИмяОбласти,Значение) Экспорт
	
	Если ЗначениеЗаполнено(логИзмененныхПоказателейАдрес) Тогда
		логИзмененныхПоказателей   = ПолучитьИзВременногоХранилища(логИзмененныхПоказателейАдрес);
	КонецЕсли;
		
	ДанныеРасшифровки          = ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровки);
	СтруктураТаблицИнтерфейса  = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
	СтруктураФильтров          = ПолучитьИзВременногоХранилища(АдресСтруктураФильтров);
	
	ОблДляВставки=ПолеТабличногоДокументаМакет.Область(ИмяОбласти);
	
	СтруктураРасшифровки = Новый Структура;	
	СоздатьОписаниеСтруктурыПолей(СтруктураРасшифровки,СтруктураТаблицИнтерфейса);
	
	
	ИмяТекущегоРесурса = ДанныеРасшифровки.Элементы[ОблДляВставки.Расшифровка].ПолучитьПоля()[0].Поле;

	Режим = "Комментарии";
	ВставитьЗначения(Значение,Режим,СтруктураТаблицИнтерфейса,СтруктураРасшифровки,СтруктураФильтров,ИмяТекущегоРесурса,ДанныеРасшифровки,
	            ОблДляВставки,логИзмененныхПоказателей,ТабИзмененныхДанных,"");

КонецПроцедуры	

Функция ПолучитьПоследнийПериодПоАгрегату(Период)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Периоды.СвязанныйПериод КАК ПериодыСвязанныйПериод
	|ИЗ
	|	Справочник.ШкалыПериодов КАК Периоды
	|ГДЕ
	|	Периоды.Периодичность = &Периодичность
	|	И Периоды.ДатаОкончания = &ДатаОкончания
	|	И Периоды.ПометкаУдаления = ЛОЖЬ
	|	И Периоды.Владелец = &Владелец	  ";
	
	Запрос.УстановитьПараметр("Периодичность"		,Периодичность);
	Запрос.УстановитьПараметр("ДатаОкончания"		,Период.ДатаОкончания);
	Запрос.УстановитьПараметр("Владелец"			,Период.Владелец);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		 Возврат  Выборка.ПериодыСвязанныйПериод;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура СоздатьКорректировку_Актуализаци(ПолеТабличногоДокументаМакет,ИмяОбласти,СтруктураПараметров) Экспорт;
				
	ДанныеРасшифровки          = ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровки);
	СтруктураТаблицИнтерфейса  = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
	СтруктураФильтров          = ПолучитьИзВременногоХранилища(АдресСтруктураФильтров);
	СтруктураРасшифровки = Новый Структура;	
	СоздатьОписаниеСтруктурыПолей(СтруктураРасшифровки,СтруктураТаблицИнтерфейса);	
	ОблДляВставки=ПолеТабличногоДокументаМакет.Область(ИмяОбласти);
		
	Если ОблДляВставки.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Таблица Тогда
		оВерх 	=  ПолеТабличногоДокументаМакет.ФиксацияСверху+1;
		оНиз  	=  ПолеТабличногоДокументаМакет.ВысотаТаблицы;
		оЛево 	=  ПолеТабличногоДокументаМакет.ФиксацияСлева+1;
		оПраво 	=  ПолеТабличногоДокументаМакет.ШиринаТаблицы;	
	Иначе			
		оВерх 	=  ОблДляВставки.Верх;
		оНиз  	=  ОблДляВставки.Низ;
		оЛево 	=  ОблДляВставки.Лево;
		оПраво 	=  ОблДляВставки.Право;		
	КонецЕсли;
		
	ОС=ПолеТабличногоДокументаМакет.ПолучитьОбласть(ИмяОбласти);
			
	СтруктураПараметров_ = Новый Структура;
	СтруктураПараметров_.Вставить("ВидКорректировки",СтруктураПараметров.ВидКорректировки);
	СтруктураПараметров_.Вставить("ЗначениеКорректировки",СтруктураПараметров.ЗначениеКорректировки);
    СтруктураПараметров_.Вставить("СценарийПриемник",СтруктураПараметров.СценарийПриемник);
	
	СписокОрганизаций 		= Новый СписокЗначений;
	СписокПоказателей 		= Новый СписокЗначений;
	
	Для ИндексСтрока = ОВерх По ОНиз Цикл	
		Для ИндексКолонка = ОЛево По ОПраво Цикл
			
			ТекОбласть = ПолеТабличногоДокументаМакет.Область(ИндексСтрока,ИндексКолонка,ИндексСтрока,ИндексКолонка);
			
			Если ТекОбласть.Расшифровка = Неопределено Тогда
				Продолжить;
			КонецЕсли;		
			Если ТекОбласть.ЦветФона = Новый Цвет(230,255,230) Тогда //Вычисляемый
				Продолжить;		
			КонецЕсли;	
			Если  РежимОбратногоРаспределения Тогда
				Если НЕ ТекОбласть.ЦветФона = Новый Цвет(255,204,0) Тогда //Агрегат
					Продолжить;
				КонецЕсли;	
			КонецЕсли;
			#Если ВебКлиент Тогда
				ЦветКнопки = WebЦвета.Бежевый;
			#Иначе	
				ЦветКнопки = windowsЦвета.Кнопка;
			#КонецЕсли
			
			Если ТекОбласть.ЦветФона = ЦветКнопки Тогда //Недоступный
				Продолжить;		
			КонецЕсли;
			
			Если ТипЗнч(ТекОбласть.Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда	
				СтруктураРасшифровки = Новый Структура;	
				СоздатьОписаниеСтруктурыПолей(СтруктураРасшифровки,СтруктураТаблицИнтерфейса);
				ИмяТекущегоРесурса = ДанныеРасшифровки.Элементы[ТекОбласть.Расшифровка].ПолучитьПоля()[0].Поле;		
				ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,ТекОбласть.Расшифровка,
				СтруктураТаблицИнтерфейса,СтруктураФильтров,СтруктураРасшифровки);	
				Если  СтруктураРасшифровки.Свойство("ПоказательСсылка") Тогда
					Если  СписокПоказателей.НайтиПоЗначению(СтруктураРасшифровки.ПоказательСсылка) = Неопределено Тогда
						СписокПоказателей.Добавить(СтруктураРасшифровки.ПоказательСсылка);
					КонецЕсли;  
				КонецЕсли;	
				Если  СтруктураРасшифровки.Свойство("Организации") Тогда
					Если  СписокОрганизаций.НайтиПоЗначению(СтруктураРасшифровки.Организации) = Неопределено Тогда
						СписокОрганизаций.Добавить(СтруктураРасшифровки.Организации);
					КонецЕсли;  
				КонецЕсли;		
			Иначе	
				ИмяТекущегоРесурса =ТекОбласть.Расшифровка.КодРесурса;	
			КонецЕсли;
						
		КонецЦикла;			
	КонецЦикла;
	
	
	Для Каждого Организация Из СписокОрганизаций Цикл
		
		ОбработкаАктуализации=Обработки.АктуализацияБюджетов.Создать();
		ОбработкаАктуализации.Актуализировать			=	Истина;
		ОбработкаАктуализации.ПеренестиОтклонения		=	Истина;
		ОбработкаАктуализации.Организация	= Организация.Значение;
		ОбработкаАктуализации.ПериодОтчета	= СтруктураПараметров.ПериодЗагрузкиФактическихДанных;
		ОбработкаАктуализации.СценарийПлан	= СтруктураФильтров.Фильтр_Сценарии;
		ОбработкаАктуализации.СценарийФакт  = СтруктураПараметров.СценарийДляАктуализации;
		
		СводнаяТаблицаУХ.ЗаполнитьТЧПериодыГоризонта(ОбработкаАктуализации,СтруктураПараметров.ПериодЗагрузкиФактическихДанных,СтруктураПараметров.ПериодДействия);
		
		Для Каждого СтрПоказатель Из СписокПоказателей Цикл
			нСтр =  ОбработкаАктуализации.ТаблицаДействийПриАктуализации.Добавить();
			нСтр.Показатель				 = СтрПоказатель.Значение;
			нСтр.ДействияПриАктуализации = СтруктураПараметров.ДействияПриАктуализации;
		КонецЦикла;	
		
		ОбработкаАктуализации.ВыполнитьАктуализациюБюджетов();
	КонецЦикла;
	
	
КонецПроцедуры

Функция ПодготовитьСтруктуруПараметровОбработкиПоказателей(Режим,МассивРасшифровок) Экспорт
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Режим",Режим);
	СтруктураПараметров.Вставить("АдресСтруктураФильтров",АдресСтруктураФильтров);
	
	
	ДанныеРасшифровки          = ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровки);
	СтруктураТаблицИнтерфейса  = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
	СтруктураФильтров          = ПолучитьИзВременногоХранилища(АдресСтруктураФильтров);
	СтруктураРасшифровки = Новый Структура;	
	СоздатьОписаниеСтруктурыПолей(СтруктураРасшифровки,СтруктураТаблицИнтерфейса);	
	
	СписокПоказателей 	= Новый СписокЗначений;
	СписокПериодов 		= Новый СписокЗначений;
    СписокОрганизаций   = Новый СписокЗначений;
	
	Для Каждого СтрРасшифровка Из МассивРасшифровок Цикл
		СтруктураРасшифровки = Новый Структура;	
		СоздатьОписаниеСтруктурыПолей(СтруктураРасшифровки,СтруктураТаблицИнтерфейса);
		ИмяТекущегоРесурса = ДанныеРасшифровки.Элементы[СтрРасшифровка].ПолучитьПоля()[0].Поле;		
		ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,СтрРасшифровка,
		СтруктураТаблицИнтерфейса,СтруктураФильтров,СтруктураРасшифровки);	
		Если  СтруктураРасшифровки.Свойство("ПоказательСсылка") Тогда
			
			Если  СписокПоказателей.НайтиПоЗначению(СтруктураРасшифровки.ПоказательСсылка) = Неопределено Тогда
				СписокПоказателей.Добавить(СтруктураРасшифровки.ПоказательСсылка);
			КонецЕсли;	
			
			Если  СписокОрганизаций.НайтиПоЗначению(СтруктураРасшифровки.Организации) = Неопределено Тогда
				СписокОрганизаций.Добавить(СтруктураРасшифровки.Организации);
			КонецЕсли;	
			
			Если  СписокПериодов.НайтиПоЗначению(СтруктураРасшифровки.ПериодыСвязанныйПериод) = Неопределено Тогда
				СписокПериодов.Добавить(СтруктураРасшифровки.ПериодыСвязанныйПериод);
			КонецЕсли;	

		КонецЕсли;	
	КонецЦикла;
	
	СтруктураПараметров.Вставить("СписокПоказателей",СписокПоказателей);
    СтруктураПараметров.Вставить("СписокПериодов",СводнаяТаблицаУХ.УпорядочитьПериоды(СписокПериодов));
    СтруктураПараметров.Вставить("СписокОрганизаций",СписокОрганизаций);
	
	Возврат СтруктураПараметров;
	
КонецФункции

//Ракурсы аналитика
Процедура ДополнитьПараметрыАналитикой(СтруктураФильтров, СтруктураПараметров = Неопределено) Экспорт
	
	Если СтруктураПараметров = Неопределено тогда
		СтруктураПараметров = Новый Структура;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ВидОтчета", ВидОтчета);	  
	
	Попытка
		ТаблицыИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
		ТЗданные = ПолучитьИзВременногоХранилища(тзДанныеАдрес);
	Исключение
		Возврат;  
	КонецПопытки;
	
	МаксАналитикОтчета = ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(ВидОтчета);
	
	Для ИндексАналитики = 1 По МаксАналитикОтчета Цикл
		ИндАналитики = Строка(ИндексАналитики);
		
		Если ТаблицыИнтерфейса.ТаблицаСтраницы.Найти("Фильтр_" + ВидОтчета["ВидАналитики" + ИндАналитики].Код, "Код") <> неопределено тогда
			СтруктураПараметров.Вставить("Аналитика" + ИндАналитики, СтруктураФильтров["Фильтр_" + ВидОтчета["ВидАналитики" + ИндАналитики].Код]);
		ИначеЕсли ТаблицыИнтерфейса.ТаблицаСтроки.Найти("Фильтр_" + ВидОтчета["ВидАналитики" + ИндАналитики].Код, "Код") <> неопределено тогда
			КодВидаАналитики = ВидОтчета["ВидАналитики" + ИндАналитики].Код;
			СтруктураПараметров.Вставить("АналитикаСтроки" + ИндАналитики, СтруктураФильтров["Фильтр_" + КодВидаАналитики]);
			
			ТЗданныеКопия = ТЗданные.Скопировать();
			
			ТипыАналитики = ВидОтчета["ВидАналитики" + ИндАналитики].ТипЗначения.Типы();
			Если ТипыАналитики.Количество() > 0 тогда
				ПустоеЗначениеАналитики = ОбщегоНазначенияУХ.ПустоеЗначениеТипа(ТипыАналитики[0]); 	  
			Иначе
				ПустоеЗначениеАналитики = Неопределено;	  
			КонецЕсли;
			
			Для Каждого СтрокаТЗКопия Из ТЗданныеКопия Цикл				
				Если СтрокаТЗКопия[КодВидаАналитики] = ПустоеЗначениеАналитики тогда
					СтрокаТЗКопия[КодВидаАналитики] = Неопределено;	  
				КонецЕсли;
			КонецЦикла;
			
			ТЗданныеКопия.Свернуть(КодВидаАналитики);
			МассивЗначенийАналитик = ТЗданныеКопия.ВыгрузитьКолонку(КодВидаАналитики);
			
			ИндексНУЛЛ = МассивЗначенийАналитик.Найти(NULL);
			Если ИндексНУЛЛ <> Неопределено тогда
				МассивЗначенийАналитик.Удалить(ИндексНУЛЛ);	  
			КонецЕсли;
			
			СтруктураПараметров.Вставить("ЗначенияАналитики" + ИндАналитики, МассивЗначенийАналитик);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область РаспределениеПоАгрегации
 
Процедура ЗаполнитьРаспределение(Параметры) Экспорт
	 
		СтруктураРасшифровки = Новый Структура;
		логИзмененныхПоказателей   = ПолучитьИзВременногоХранилища(логИзмененныхПоказателейАдрес);
		СтруктураТаблицИнтерфейса =   ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
		СоздатьОписаниеСтруктурыПолей(СтруктураРасшифровки,СтруктураТаблицИнтерфейса);
        ТабИзмененныхДанных = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать().ТаблицаИзмененныхПоказателей.ВыгрузитьКолонки();		
		ТабИзмененныхДанных.Колонки.Добавить("ID",Новый ОписаниеТипов("УникальныйИдентификатор"));
		СтруктураФильтров          = ПолучитьИзВременногоХранилища(АдресСтруктураФильтров);

		Для Каждого Страница Из СтруктураТаблицИнтерфейса.ТаблицаСтраницы Цикл
			КодПоля = СтрЗаменить(Страница.Код,"Фильтр_","");
			СтруктураРасшифровки.Вставить(КодПоля,СтруктураФильтров[Страница.Код]);	
			Если КодПоля = "Показатели" Тогда
				СтруктураРасшифровки.Вставить("ПоказателиСтрокаОтчета",СтруктураФильтров[Страница.Код]);
			КонецЕсли;	
		КонецЦикла;

		СоответствиеПериодичностей = Новый Соответствие;
		СоответствиеПериодичностей.Вставить(Перечисления.Периодичность.День,0);
		СоответствиеПериодичностей.Вставить(Перечисления.Периодичность.Неделя,1);
		СоответствиеПериодичностей.Вставить(Перечисления.Периодичность.Декада,2);
		СоответствиеПериодичностей.Вставить(Перечисления.Периодичность.Месяц,3);
        СоответствиеПериодичностей.Вставить(Перечисления.Периодичность.Квартал,4);
		СоответствиеПериодичностей.Вставить(Перечисления.Периодичность.Полугодие,5);
        СоответствиеПериодичностей.Вставить(Перечисления.Периодичность.Год,6);
		
		КэшАналитикПоказателей = СтруктураТаблицИнтерфейса.КэшАналитикПоказателей;
		
		ТзПоказателей =  логИзмененныхПоказателей.Скопировать();
		СтруктураРасшифровкиДляЗаписи =Новый Структура;
		СоздатьОписаниеСтруктурыПолей(СтруктураРасшифровкиДляЗаписи,СтруктураТаблицИнтерфейса);
		
		СтрокаСвертки = "";
		Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаСтраницы Цикл	
			ИмяАналитики = СтрЗаменить(Стр.Код,"Фильтр_","");
			СтруктураРасшифровкиДляЗаписи.Вставить(ИмяАналитики,СтруктураФильтров[Стр.Код]);
			Если Стр.Код = "Фильтр_Валюты" Тогда
				 Продолжить;
			КонецЕсли;	 
			СтрокаСвертки =  СтрокаСвертки+ИмяАналитики+",";	
		КонецЦикла;
		
		Для Каждого стр Из ТзПоказателей Цикл
			
			СтруктураОтбораЗначенийДляРаспределения = Новый Структура;
			СтруктураОтбораЗначенийДляРаспределения.Вставить("ПоказательСтрока",Стр.ПоказательСтрока);
		
			Для Каждого Поле Из ТзПоказателей.Колонки Цикл
				Если СтруктураРасшифровки.Свойство(Поле.Имя) И ЗначениеЗаполнено(Стр[Поле.Имя]) Тогда
					СтруктураОтбораЗначенийДляРаспределения.Вставить(Поле.Имя,Стр[Поле.Имя]);
					СтруктураРасшифровкиДляЗаписи.Вставить(Поле.Имя,Стр[Поле.Имя]);
				КонецЕсли;
			КонецЦикла;
			
			СтруктураРасшифровкиДляЗаписи.Вставить("ПоказательСсылка",стр.ПоказательСсылка);
			ЗаполнитьЗначенияСвойств(СтруктураРасшифровки,стр);
			СтруктураРасшифровки.Вставить("ПоказателиСтрокаОтчета",стр.ПоказательСтрока);
			ДобавляемыеАналитики = ПолучитьСтруктуруНеобходимыхАналитик(СтруктураРасшифровки,СтруктураТаблицИнтерфейса);
			
			МассивРаспределяемыхТекущегоПоказателя = логИзмененныхПоказателей.НайтиСтроки(СтруктураОтбораЗначенийДляРаспределения);  //Отберем показатели для распределения
			СценарийДляРаспределения =  МассивРаспределяемыхТекущегоПоказателя[0].Сценарии;
			ТекИндексПериодичности =  СоответствиеПериодичностей.Получить(Периодичность);
			Для Каждого СтрПоказатель Из МассивРаспределяемыхТекущегоПоказателя Цикл
				ИндексПериодичности = СоответствиеПериодичностей.Получить(СтрПоказатель.Периоды.Периодичность);
				Если  ИндексПериодичности>ТекИндексПериодичности Тогда
					ТекИндексПериодичности =ИндексПериодичности; 
					ТекущийПериодДляРаспределения = СтрПоказатель.Периоды; 
				КонецЕсли;		
				Для Каждого СтрАналитика ИЗ ДобавляемыеАналитики.НеиспользованныеОбязательныеАналитики Цикл
					СтруктураОтбораЗначенийДляРаспределения.Вставить(СтрАналитика.Ключ,Неопределено);
					ЕстьОтборы = логИзмененныхПоказателей.НайтиСтроки(СтруктураОтбораЗначенийДляРаспределения).Количество(); 
					Если ЕстьОтборы=0 Тогда
						СтруктураОтбораЗначенийДляРаспределения.Удалить(СтрАналитика.Значение);        //Если есть строки без отбора по аналитике - то их значения и будем распределять
					КонецЕсли;
				КонецЦикла;		
			КонецЦикла;	
			
			Если НЕ ИндексПериодичности =  ТекИндексПериодичности Тогда
				СтруктураОтбораЗначенийДляРаспределения.Вставить("Периоды",СтрПоказатель.Периоды);  //Выберем максимально длительный период
			КонецЕсли;
			
			СтрокиДляРаспределения =   логИзмененныхПоказателей.НайтиСтроки(СтруктураОтбораЗначенийДляРаспределения);  
				
			Для Каждого СтрокаКРаспределению Из СтрокиДляРаспределения Цикл
				
				СТ_Данные = Обработки.СводнаяТаблица.Создать();
				СТ_Данные.ТипВыгрузки = "ТаблицаЗначений";
				СТ_Данные.НазначениеТаблицы = Перечисления.НазначенияИспользованияСводнойТаблицы.Данные;	
				СТ_Данные.ВидОтчета = ВидОтчета;
				СТ_Данные.ИнициализироватьКонтекст(Бланк);
				
				ТаблицыИнтерфейса =  ПолучитьИзВременногоХранилища(СТ_Данные.АдресТаблицИнтерфейса);
                СтруктураФильтровИтог = ПолучитьИзВременногоХранилища(СТ_Данные.АдресСтруктураФильтров);
				СтруктураФильтровИтогЭталон = ПолучитьИзВременногоХранилища(АдресСтруктураФильтров);
				ТаблицыИнтерфейсаЭталон =   ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
				
				Для Каждого фСтр Из СтруктураФильтровИтогЭталон Цикл
					СтруктураФильтровИтог.Вставить(фСтр.Ключ,фСтр.Значение);
				КонецЦикла;	
				СтруктураФильтровИтог.Вставить("ГоризонтДатаНачала",СтрокаКРаспределению.Периоды.ДатаНачала);
	            СтруктураФильтровИтог.Вставить("ГоризонтДатаОкончания",СтрокаКРаспределению.Периоды.ДатаОкончания);
				СтруктураФильтровИтог.Вставить("ВидОтчета",ВидОтчета);
								
				ТаблицыИнтерфейса.ТаблицаСтроки.Очистить();
				ТаблицыИнтерфейса.ТаблицаСтраницы = ТаблицыИнтерфейсаЭталон.ТаблицаСтраницы.Скопировать();
				ТаблицыИнтерфейса.ТаблицаДоступныеПоля = ТаблицыИнтерфейсаЭталон.ТаблицаДоступныеПоля.Скопировать();

				//Перенесем показатели в отбор...
				Для Каждого Стр Из ТаблицыИнтерфейсаЭталон.ТаблицаСтроки Цикл 
					Если Стр.Код = "Фильтр_Показатели" Тогда
						  СтруктураФильтровИтог.Вставить("Фильтр_Показатели", СтруктураОтбораЗначенийДляРаспределения["ПоказательСтрока"]);
						  Нстр = ТаблицыИнтерфейса.ТаблицаСтраницы.Добавить();
						  ЗаполнитьЗначенияСвойств(Нстр,Стр);
                          Продолжить;
					КонецЕсли;			
					Если СтруктураОтбораЗначенийДляРаспределения.Свойство(СтрЗаменить(Стр.Код,"Фильтр_","")) Тогда
						Если СтруктураОтбораЗначенийДляРаспределения[СтрЗаменить(Стр.Код,"Фильтр_","")]<>Неопределено Тогда
							Нстр = ТаблицыИнтерфейса.ТаблицаСтраницы.Добавить();
							ЗаполнитьЗначенияСвойств(Нстр,Стр);
							СтруктураФильтровИтог.Вставить(Стр.Код, СтруктураОтбораЗначенийДляРаспределения[СтрЗаменить(Стр.Код,"Фильтр_","")]);
							Продолжить;
						КонецЕсли;	
					КонецЕсли;			
					Нстр =ТаблицыИнтерфейса.ТаблицаСтроки.Добавить();
					ЗаполнитьЗначенияСвойств(Нстр,Стр);
				КонецЦикла;	
				
				//Перенесем неиспользованные аналитики в строки, чтобы получить полную таблицу раскрытия
				МассивУдаляемыхАналитик = Новый Массив;
				Для Каждого СтрАналитика Из ДобавляемыеАналитики.СтруктураНеЗаполненныхСкрытыхАналитик Цикл		
					НужнаяАналитикаСтрока = ТаблицыИнтерфейсаЭталон.ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код","Фильтр_"+СтрАналитика.Ключ))[0];
					Нстр =ТаблицыИнтерфейса.ТаблицаСтроки.Добавить();
					МассивУдаляемыхАналитик.Добавить(НужнаяАналитикаСтрока);
					ЗаполнитьЗначенияСвойств(Нстр,НужнаяАналитикаСтрока);	
				КонецЦикла;
				
				Для Каждого СтрАналитика Из МассивУдаляемыхАналитик Цикл	
					УдаляемаяАналитика =  ТаблицыИнтерфейса.ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код",СтрАналитика.Код));
					Если УдаляемаяАналитика.Количество()=1 Тогда	
						ТаблицыИнтерфейса.ТаблицаДоступныеПоля.Удалить(УдаляемаяАналитика[0]);		
					КонецЕсли;		
				КонецЦикла;
				
				Для Каждого Стр Из ТаблицыИнтерфейсаЭталон.ТаблицаКолонки Цикл 
					Если Стр.Код = "Фильтр_Периоды" Тогда
						Продолжить;
					КонецЕсли;
					Если СтруктураОтбораЗначенийДляРаспределения.Свойство(СтрЗаменить(Стр.Код,"Фильтр_","")) Тогда
						Если СтруктураОтбораЗначенийДляРаспределения[СтрЗаменить(Стр.Код,"Фильтр_","")]<>Неопределено Тогда
							Нстр = ТаблицыИнтерфейса.ТаблицаСтраницы.Добавить();
							ЗаполнитьЗначенияСвойств(Нстр,Стр);
							СтруктураФильтровИтог.Вставить(Стр.Код, СтруктураОтбораЗначенийДляРаспределения[СтрЗаменить(Стр.Код,"Фильтр_","")]);
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;			
				
				ТЗДанные = СТ_Данные.ПолучитьИтоговыйМакет(Новый ТабличныйДокумент,Бланк,,СтруктураФильтровИтог,Истина,,Истина,Неопределено);	
				ТзДанныеПоПоказателю = ТЗДанные.Скопировать(Новый Структура("ПоказательСсылка",СтруктураРасшифровкиДляЗаписи.ПоказательСсылка));
				
				СтрокаСверткиПоАналитикам = "";
				МассивУдаляемыхКолонок = Новый Массив;
				Для Каждого стрКол Из ТзДанныеПоПоказателю.Колонки Цикл
					Если НЕ стрКол.Имя = "Значение" И НЕ стрКол.Имя = "ЗначениеЗаблокировано" И НЕ стрКол.Имя = "ИндексСостояния" И Не стрКол.Имя = "" Тогда 
						Если стрКол.ТипЗначения.Типы().Количество() > 0 Тогда
							СтрокаСверткиПоАналитикам = СтрокаСверткиПоАналитикам+стрКол.Имя+",";
						Иначе 	
							МассивУдаляемыхКолонок.Добавить(стрКол);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого Кол Из МассивУдаляемыхКолонок Цикл
					  ТзДанныеПоПоказателю.Колонки.Удалить(Кол);
				КонецЦикла;	
				
				ТзДанныеПоПоказателю = СводнаяТаблицаУХ.СвернутьТаблицуЗначений(ТзДанныеПоПоказателю,Лев(СтрокаСверткиПоАналитикам,СтрДлина(СтрокаСверткиПоАналитикам)-1),"Значение");
				
				ТабИзмененныхДанных.Очистить();
				
				ОбработатьТаблицуРаспределения(СтруктураРасшифровкиДляЗаписи,СтрокаКРаспределению,ТзДанныеПоПоказателю,
				Параметры.МетодРаспределения,Параметры.УточнениеМетодаРаспределения,ТабИзмененныхДанных,КэшАналитикПоказателей);		
				
				РасчетПоказателейОбъект 								= Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
				РасчетПоказателейОбъект.ВидОтчета 						= Бланк.Владелец;
				РасчетПоказателейОбъект.ВалютаОтображения 				= СтруктураФильтровИтогЭталон.Фильтр_Валюты;
				РасчетПоказателейОбъект.РассчитыватьЗависимые 			= Константы.АвтоматическийПересчетЗависимыхПоказателей.Получить();	
				РасчетПоказателейОбъект.МетодРаспределения  			= Параметры.МетодРаспределения;
				РасчетПоказателейОбъект.УточнениеМетодаРаспределения 	= Параметры.УточнениеМетодаРаспределения;
				РасчетПоказателейОбъект.ЗначениеДляРаспределения  		= СтрокаКРаспределению[СтрокаКРаспределению.ТекущийПоказательКод];
				
				ТабИзмененныхДанныхКопия = ТабИзмененныхДанных.Скопировать();
				
				РасчетПоказателейОбъект.ТаблицаИзмененныхПоказателей.Загрузить(ТабИзмененныхДанных);
				СводнаяТаблицаУХ.ЗаполнитьВалютыПоРегламенту(РасчетПоказателейОбъект,ТабИзмененныхДанныхКопия);
				РасчетПоказателейОбъект.ИзменениеСостояний 		= РежимСтатусы;
				РасчетПоказателейОбъект.ЗаписатьЗначенияТаблицыПоказателей();
				
				
			КонецЦикла;					
		КонецЦикла;	
		
				
		ТЗИзмененные = ПолучитьИзВременногоХранилища(логИзмененныхПоказателейАдрес);
		ТЗИзмененные.Очистить();
	 
 КонецПроцедуры

Процедура ОбработатьТаблицуРаспределения(СтруктураРасшифровкиДляЗаписи,СтрокаКРаспределению,ТЗДанные,МетодРаспределения,УточнениеМетодаРаспределения,ТабИзмененныхДанных,КэшАналитикПоказателей)
	 
	 РесурсКРаспределению = "Значение";
	 ЗначениеРесурса =  СтрокаКРаспределению[СтрокаКРаспределению.ТекущийПоказательКод];
	 
	 СтруктураРасшифровки = Новый Структура;	 
	 	 
	 //Если МетодРаспределения = Перечисления.МетодыОбратногоРаспределения.Равномерно Тогда
		 
		 Если ТЗДанные.Количество()=0 Тогда
			 Возврат;
		 КонецЕсли;	 
		    	 
		 Для Каждого Стр Из ТЗДанные Цикл
			  
			 Если Стр[РесурсКРаспределению]=NULL Тогда  
				Стр[РесурсКРаспределению]=0 
			 КонецЕсли;
	  
			ЗаполнитьЗначенияСвойств(СтруктураРасшифровкиДляЗаписи,Стр);
			СтруктураРасшифровкиДляЗаписи.Вставить("ПоказательТипЗнчения",Перечисления.ТипыЗначенийПоказателейОтчетов.Число);
			СтруктураРасшифровкиДляЗаписи.Вставить("ПоказательСсылка",СтрокаКРаспределению.ПоказательСсылка);
			СтруктураРасшифровкиДляЗаписи.Вставить("ID",Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));

			ЗаписатьЗначениеВПоказатель(,Стр[РесурсКРаспределению],СтруктураРасшифровкиДляЗаписи,ТабИзмененныхДанных,КэшАналитикПоказателей);	 
			
		КонецЦикла;	 
						 
	 //КонецЕсли;
		 
 КонецПроцедуры	 
 
#КонецОбласти


#Область РаботаСМатрицейПолномочий

Функция ПолучитьИтоговыйМакетМатрицаПолномочий(ОбъектБД,Регламент,ПолеТабличногоДокументаМакет,ВыбранныйБланк,ВидДокументаОтбор,СТ_ДополнительныеНастройки,СтруктураФильтров,СтруктураОсей=Неопределено,ВыбранныеРесурсы = Неопределено) Экспорт
			
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
    СтруктураФильтровИтог = ПолучитьИзВременногоХранилища(АдресСтруктураФильтров);

	Если НЕ ЗначениеЗаполнено(ВидДокументаОтбор) Тогда	
		 СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет, НСтр("ru = 'Не выбран вид справочника или документа!'"));
		 Возврат "стОшибкаИнициализацииКлючевыхРеквизитов";
	КонецЕсли;		
			
	Если  ОбъектБД.ИспользуетсяВНастройкахРеглмента И  НЕ ЗначениеЗаполнено(Регламент) Тогда	
		 СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет, НСтр("ru = 'Не выбран регламент!'"));
		 Возврат "стОшибкаИнициализацииКлючевыхРеквизитов";
	КонецЕсли;	
		
	Если СтруктураТаблицИнтерфейса.ТаблицаСтраницы.НайтиСтроки(Новый Структура("Код","Фильтр_ШаблонДокументаБД")).Количество()=1 Тогда
		 Если Не ЗначениеЗаполнено(СтруктураФильтровИтог.ШаблонДокументаБД) Тогда
		 СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет, НСтр("ru = 'Не выбран шаблон!'"));
		 Возврат "стОшибкаИнициализацииКлючевыхРеквизитов";
		 КонецЕсли;
	КонецЕсли;	
		
	ОбновитьГоризонт = Ложь;
		
	ДоступныеАналитики = 		СтруктураТаблицИнтерфейса.ДоступныеАналитики;
	КэшАналитикПоказателей = 	СтруктураТаблицИнтерфейса.КэшАналитикПоказателей;;
	ВыбранныеПоказатели =  		СтруктураТаблицИнтерфейса.ВыбранныеПоказатели;
	НастройкиПолейД =   		СтруктураТаблицИнтерфейса.ДоступныеПоля;

	НастройкиСреза_ = Новый ДеревоЗначений;
    НастройкиСреза_.Колонки.Добавить("Аналитика");
	НастройкиСреза_.Колонки.Добавить("Отбор");
    НастройкиСреза_.Колонки.Добавить("ТипРеквизита");
    НастройкиСреза_.Колонки.Добавить("СтрокаОтбор",Новый ОписаниеТипов("ОтборКомпоновкиДанных"));
    НастройкиСреза_.Колонки.Добавить("ИмяГруппировки");
	НастройкиСреза_.Колонки.Добавить("ПолеИерархии");

	НастройкиРасчетаОтклонений = Неопределено;
	
	
	ТаблицаСтроки =    СтруктураТаблицИнтерфейса.ТаблицаСтроки;
	ТаблицаКолонки =   СтруктураТаблицИнтерфейса.ТаблицаКолонки;
	ТаблицаСтраницы =  СтруктураТаблицИнтерфейса.ТаблицаСтраницы;
	
	Для Каждого Стр ИЗ  ТаблицаСтраницы Цикл
		Если СтруктураФильтров.Свойство(СтрЗаменить(Стр.Код,"Фильтр_","")) Тогда
			СтруктураФильтровИтог.Вставить(Стр.Код,СтруктураФильтров[СтрЗаменить(Стр.Код,"Фильтр_","")]);	
		ИначеЕсли  НЕ СтруктураФильтровИтог.Свойство(Стр.Код) Тогда
			ТипЗ = Новый ОписаниеТипов(Стр.ТипСтрока);
			СтруктураФильтровИтог.Вставить(Стр.Код,ТипЗ.ПривестиЗначение());
		КонецЕсли;
	КонецЦикла;

	
	СхемаСКДЭталон=ПолучитьИзВременногоХранилища(ОкончательнаяСКДАдрес);
	ТекущиеНастройки=СхемаСКДЭталон.НастройкиПоУмолчанию;
	НастройкиСхемыСводнойТаблицы.ЗагрузитьНастройки(ТекущиеНастройки);
			
	СтруктураТаблицИнтерфейса.ТаблицаВыбранныеРесурсы.Очистить();
	нРесурс = СтруктураТаблицИнтерфейса.ТаблицаВыбранныеРесурсы.Добавить();
	нРесурс.Ресурс = "Согласование";
	нРесурс.ПредставлениеРесурса = "Согласование";
	Если ОбъектБД.Наименование = "НастраиваемыйОтчет" ИЛИ ОбъектБД.Наименование = "РакурсДанных" Тогда
		нРесурс.Ресурс = "Исполняющий";
		нРесурс.ПредставлениеРесурса = "Исполняющий";
	Иначе	
		 НастройкиСхемыСводнойТаблицы.Настройки.Выбор.Элементы[0].Использование = Ложь;
	КонецЕсли;	
	
	ВыбранныеРесурсы = Новый ТаблицаЗначений;
	ВыбранныеРесурсы.Колонки.Добавить("Код",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	ВыбранныеРесурсы.Колонки.Добавить("Наименование",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	ВыбранныеРесурсы.Колонки.Добавить("НеФинансовый",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ВыбранныеРесурсы.Колонки.Добавить("КодПоказателя",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	
	Для Каждого Стр Из НастройкиСхемыСводнойТаблицы.Настройки.Выбор.Элементы Цикл
		Если  Стр.Использование Тогда 
			Нстр =  ВыбранныеРесурсы.Добавить();
			Нстр.Код = Строка(Стр.Поле);
			Нстр.КодПоказателя = Строка(Стр.Поле);
			Нстр.Наименование = Строка(Стр.Поле);
		КонецЕсли;
	КонецЦикла;

		
    ТипОбъекта = "Таблица";
	
	НастройкиФинальнойСхемы = Неопределено;
			
	ИнициализироватьЗапросМатрицаПолномочий(ОбъектБД,Регламент,СхемаСКДЭталон,СтруктураФильтровИтог,СтруктураТаблицИнтерфейса);
			
	НастройкиРасчетаОтклонений = Новый ТаблицаЗначений;
	
	СводнаяТаблицаУХ.ПреобразоватьНастройкиКонечнойСхемы(ТипОбъекта,ВыбранныеРесурсы,НастройкиСхемыСводнойТаблицы.Настройки,ТаблицаСтроки,ТаблицаКолонки,Истина,Ложь,НастройкиРасчетаОтклонений,,,,Ложь);			
	СводнаяТаблицаУХ.ОформитьУровниГруппировокМП(НастройкиСхемыСводнойТаблицы.Настройки,СтруктураТаблицИнтерфейса);
		
	//	
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[1].Значение=РасположениеИтоговКомпоновкиДанных.Авто;
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[6].Использование=Истина;
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[6].Значение=РасположениеИтоговКомпоновкиДанных.Нет;
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[7].Использование=Истина;
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[7].Значение=РасположениеИтоговКомпоновкиДанных.Нет;
		
	ДокументРезультат=Новый ТабличныйДокумент;
	
	МассивУдаляемыхОтборов = Новый Массив;
		
	НовыйИсточник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(ОкончательнаяСКДАдрес); 
	СТ_ДополнительныеНастройки.Инициализировать(НовыйИсточник);
		
	СводнаяТаблицаУХ.ЗаполнитьНстройкиДополнительныхОтборов(ОкончательнаяСКДАдрес,НастройкиСхемыСводнойТаблицы,СТ_ДополнительныеНастройки,СтруктураТаблицИнтерфейса);
	
	ВывестиВТаблицуУправлениеДанными(ДокументРезультат,СхемаСКДЭталон,ВыбранныеРесурсы);
	
	Если  ДокументРезультат.ВысотаТаблицы = 2 Тогда	
		 СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет, НСтр("ru = 'Нет данных по текущим отборам!'"));
		 Возврат "стОшибкаПустойМакет";
	КонецЕсли;	
	
	СводнаяТаблицаУХ.ФорматироватьЗаголовкиИерархииМП(ТаблицаКолонки,ТаблицаСтроки,ПолеТабличногоДокументаМакет,ДокументРезультат,Ложь,Истина,Ложь);
	АдресСтруктураФильтров = ПоместитьВоВременноеХранилище(СтруктураФильтровИтог,Новый УникальныйИдентификатор);
	
КонецФункции	

Процедура ИнициализироватьЗапросМатрицаПолномочий(ОбъектБД,Регламент,СхемаСКДЭталон,СтруктураФильтровИтог,СтруктураТаблицИнтерфейса);
	
	
	ОсновнойЗапрос = Новый Запрос;
	
	ЕстьПустаяОрганизация = Ложь;
	ЕстьПустойПроект = Ложь;
	ЕстьРегламент = Ложь;
	ЕстьПроцесс = Ложь;
	Процесс = Неопределено;
	ОтборВО = Неопределено;
	//Определим - нужно ли использовать настройки регламента...
	Если ЗначениеЗаполнено(Регламент) Тогда
		//Определим - есть ли связанный с регламентом универсальный процесс...
		
		СтрокаШаблона = Нстр("ru = ' Организации и проекты из регламента: %1'");
		
		ТекстПримечания = "";
		Если Не ПустаяСтрока(СтрокаШаблона) тогда								
			ТекстПримечания = СтрШаблон(СтрокаШаблона, Строка(Регламент));
		КонецЕсли;
				
		ЕстьРегламент  = Истина;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШаблоныУниверсальныхПроцессов.Ссылка
		|ИЗ
		|	Справочник.ШаблоныУниверсальныхПроцессов КАК ШаблоныУниверсальныхПроцессов
		|ГДЕ
		|	ШаблоныУниверсальныхПроцессов.СвязанныйРегламент = &СвязанныйРегламент";
		Запрос.УстановитьПараметр("СвязанныйРегламент", Регламент);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЕстьПроцесс = Истина;
			Процесс = Выборка.Ссылка;
			//ТекстПримечания = " Организации из процесса: "+Строка(Выборка.Сслыка)+" проекты из регламента "+Строка(Регламент);
		КонецЕсли;
		
		Если Не ЕстьПроцесс Тогда
			
			Если ЗначениеЗаполнено(Регламент.ВидОтчета) Тогда
				
				ОтборВО = Регламент.ВидОтчета;
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	РазделятьПоОрганизациям = Истина;
	РазделятьПоПроектам 	= Ложь;

	Если ОбъектБД.Наименование = "РакурсДанных" Тогда			
		ЕстьПроцесс = Ложь;
		Если СтруктураФильтровИтог.Свойство("ШаблонДокументаБД") Тогда
			Если ЗначениеЗаполнено(СтруктураФильтровИтог.ШаблонДокументаБД) Тогда
				РазделятьПоОрганизациям = СтруктураФильтровИтог.ШаблонДокументаБД.РазделятьПоОрганизациям;
				РазделятьПоПроектам = 	  СтруктураФильтровИтог.ШаблонДокументаБД.РазделятьПоПроектам;
			КонецЕсли;
			
		КонецЕсли;
	Иначе	
		РазделятьПоОрганизациям = ОбъектБД.РазделятьПоОрганизациям;
		РазделятьПоПроектам = ОбъектБД.РазделятьПоПроектам;
	КонецЕсли;
	
	ТекстЗапросаОрганизации = ПолучитьТекстПоОрганизациям(РазделятьПоОрганизациям,ЕстьРегламент,ЕстьПроцесс);
	ТекстЗапросаПроекты = ПолучитьТекстПоПроектам(РазделятьПоПроектам,ЕстьРегламент);
	ТекстЗапросаШаблоны =  ПолучитьТекстПоШаблонам(ОбъектБД,ЕстьПроцесс,ОтборВО);      //Шаблоны в контексте матрицы полномочий, это ,например, бланки настраиваемых отчетов.
		
	ТекстЗапросаФинал = ТекстЗапросаОрганизации+ТекстЗапросаПроекты+ТекстЗапросаШаблоны+"
	|ВЫБРАТЬ
	|	втОрганизацииПериметра.Ссылка КАК Организация,
	|	втОрганизацииПериметра.Наименование КАК ОрганизацияНаименование,
	|  втШаблоны.ШаблонДокументаБД КАК ШаблонДокументаБД
	|ПОМЕСТИТЬ втПериметр
	|ИЗ
	|	втОрганизацииПериметра КАК втОрганизацииПериметра
	|		ПОЛНОЕ СОЕДИНЕНИЕ втШаблоны КАК втШаблоны
	|		ПО (ИСТИНА)	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПериметр.Организация КАК Организация,
	|	ВЫБОР КОГДА РегистрМатрицыПолномочий.Проект IS NULL ТОГДА ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка) ИНАЧЕ РегистрМатрицыПолномочий.Проект КОНЕЦ КАК Проект,
	|	РегистрМатрицыПолномочий.Исполняющий,
	|	РегистрМатрицыПолномочий.Согласование,
	|	втПериметр.ШаблонДокументаБД
	|ИЗ
	|	втПериметр КАК втПериметр
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрМатрицыПолномочий КАК РегистрМатрицыПолномочий
	|		ПО втПериметр.Организация = РегистрМатрицыПолномочий.Организация
	|			И втПериметр.ШаблонДокументаБД = РегистрМатрицыПолномочий.ШаблонДокументаБД
	|			И (РегистрМатрицыПолномочий.ДокументБД = &ОбъектБД)
	|			И (РегистрМатрицыПолномочий.ВерсияРегламентаПодготовкиОтчетности = &Регламент)
	| ";
	
	
	
	ТекстЗапроса = ТекстЗапросаФинал;
	ТекстЗапросаОтборы = "  И ";
	Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаСтраницы Цикл
		
		Если НЕ ЗначениеЗаполнено(Регламент)   Тогда
			Если Стр.Код = "Фильтр_ШаблонДокументаБД" Тогда
				Если НЕ  ОбъектБД.Наименование = "ЗаявкаНаИзменениеНСИ" Тогда		
					Продолжить;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
		
		СтрКод = СтрЗАменить(Стр.Код,"Фильтр_","");
		ТекстЗапросаОтборы = ТекстЗапросаОтборы+ " 
		|РегистрМатрицыПолномочий."+СтрКод +"=&Параметр_"+СтрКод+" И "; 	
		
	КонецЦикла;
	
	Если СтруктураТаблицИнтерфейса.ТаблицаСтраницы.Количество()>0 Тогда
		ТекстЗапросаОтборы = Лев(ТекстЗапросаОтборы,СтрДлина(ТекстЗапросаОтборы)-2);
		ТекстЗапроса = ТекстЗапроса+ТекстЗапросаОтборы;
	КонецЕсли;
		
	//Если ОбъектБД.Наименование = "РакурсДанных"  ИЛИ ОбъектБД.Наименование = "НастраиваемыйОтчет" Тогда
	//	ТекстЗапроса = ТекстЗапроса+" 
	//	|, втПериметр.ШаблонДокументаБД.Наименование";	
	//КонецЕсли;
	
	СхемаСКДЭталон.НаборыДанных[0].Запрос = ТекстЗапроса;
	НовыйИсточник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаСКДЭталон); 
	НастройкиСхемыСводнойТаблицы.Инициализировать(НовыйИсточник);

	
	Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаСтраницы Цикл
		Если НЕ ЗначениеЗаполнено(Регламент)  Тогда
			Если Стр.Код = "Фильтр_ШаблонДокументаБД" Тогда
				Если НЕ  ОбъектБД.Наименование = "ЗаявкаНаИзменениеНСИ" Тогда
					Продолжить;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
		
		СтрКод = СтрЗАменить(Стр.Код,"Фильтр_","");
		НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Параметр_"+СтрКод,СтруктураФильтровИтог[Стр.Код]);
	КонецЦикла;
	
	Если НЕ НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыДанных.Элементы.Найти("ПустаяОрганизация") = НЕОПРЕДЕЛЕНО Тогда
		 НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПустаяОрганизация",Справочники.Организации.ПустаяСсылка());	 
	КонецЕсли;	 
	Если НЕ РазделятьПоПроектам Тогда
		 НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПустойПроект",Справочники.Проекты.ПустаяСсылка());
	КонецЕсли;	
	
	Если   ОбъектБД.Наименование = "НастраиваемыйОтчет"  И ЗначениеЗаполнено(ОтборВО) Тогда
		НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборВО",ОтборВО);	
	КонецЕсли;
	
	Если   ОбъектБД.Наименование = "РакурсДанных"  И ЗначениеЗаполнено(ОтборВО) Тогда
		НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборВО",ОтборВО);	
	КонецЕсли;

	
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОбъектБД",ОбъектБД);
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Регламент",Регламент);			
	
	Если ЕстьПроцесс Тогда
		 НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Процесс",Процесс);
	КонецЕсли;	
			

			
КонецПроцедуры

Функция ПолучитьТекстПоОрганизациям(РазделятьПоОрганизациям,ОрганизацииИзРегламента,ОрганизацииПроцесса)
      
	ШаблонТекста = "";
	
	Если РазделятьПоОрганизациям Тогда
		Если ОрганизацииИзРегламента Тогда
			Если   ОрганизацииПроцесса Тогда
				
				ШаблонТекста ="ВЫБРАТЬ
				|	ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница КАК Ссылка,
				|	ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница.Наименование КАК Наименование,
				|	ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса
				|ПОМЕСТИТЬ втОрганизацииПериметра
				|ИЗ
				|	РегистрСведений.ОрганизационныеЕдиницыЭтаповПроцессов КАК ОрганизационныеЕдиницыЭтаповПроцессов
				|ГДЕ
				|	ОрганизационныеЕдиницыЭтаповПроцессов.ВерсияРегламентаПодготовкиОтчетности = &Регламент
				|	;
				|	
				|	////////////////////////////////////////////////////////////////////////////////
				|	";
				
				
			Иначе	
				
				ШаблонТекста =" ВЫБРАТЬ
				|	ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ОрганизационнаяЕдиница КАК Ссылка,
				|	ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ОрганизационнаяЕдиница.Наименование КАК Наименование
				|ПОМЕСТИТЬ втОрганизацииПериметра
				|ИЗ
				|	Справочник.ВерсииРегламентовПодготовкиОтчетности.ОрганизационныеЕдиницы КАК ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы
				|ГДЕ
				|	ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.Ссылка = &Регламент
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|";
				
			КонецЕсли;	
			
		Иначе
			
			ШаблонТекста = "ВЫБРАТЬ
			|	Организации.Ссылка,
			|	Организации.Наименование КАК Наименование
			|ПОМЕСТИТЬ втОрганизацииПериметра
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ПометкаУдаления = ЛОЖЬ
			|ОБЪЕДИНИТЬ ВСЕ 
			|	ВЫБРАТЬ &ПустаяОрганизация КАК Ссылка,
			|	"""" КАК Наименование
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|";
			
			
		КонецЕсли; 
		
		
	Иначе	
		ШаблонТекста = " ВЫБРАТЬ
		|	&ПустаяОрганизация КАК Ссылка,
		|	"""" КАК Наименование
		|ПОМЕСТИТЬ втОрганизацииПериметра
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;	
	
	
	Возврат ШаблонТекста;
	
КонецФункции

Функция ПолучитьТекстПоПроектам(РазделятьПоПроектам,ПроектыИзРегламента,ПроектыПроцесса=Ложь)
      
	ШаблонТекста = "";
	
	Если РазделятьПоПроектам Тогда
		Если ПроектыИзРегламента Тогда
			Если   ПроектыПроцесса Тогда	
				//Зарезервировано - ждем когда в этапах процесса появятся проекты	
			Иначе	
				
				ШаблонТекста =" ВЫБРАТЬ
				|	ВерсииРегламентовПодготовкиОтчетностиПроекты.Проект КАК Ссылка,
				|	ВерсииРегламентовПодготовкиОтчетностиПроекты.Проект.Наименование КАК Наименование
				|ПОМЕСТИТЬ втПроекты
				|ИЗ
				|	
				|	Справочник.ВерсииРегламентовПодготовкиОтчетности.Проекты КАК ВерсииРегламентовПодготовкиОтчетностиПроекты
				|ГДЕ
				|	
				|	 ВерсииРегламентовПодготовкиОтчетностиПроекты.Ссылка = &Регламент;
				|////////////////////////////////////////////////////////////////////////////////
				|";
				
			КонецЕсли;	
			
		Иначе
			
			ШаблонТекста = " ВЫБРАТЬ
			|	Проекты.Ссылка,
			|	Проекты.Наименование КАК Наименование
			|ПОМЕСТИТЬ втПроекты
			|ИЗ
			|	Справочник.Проекты КАК Проекты
			|ГДЕ
			|	Проекты.ПометкаУдаления = ЛОЖЬ И Проекты.Проект = ИСТИНА
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|";
			
		КонецЕсли; 
		
		
	Иначе	
		ШаблонТекста = " ВЫБРАТЬ
		|	&ПустойПроект КАК Ссылка,
		|	"""" КАК Наименование
		|ПОМЕСТИТЬ втПроекты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;	
	
	
	Возврат ШаблонТекста;
	
КонецФункции

Функция ПолучитьТекстПоШаблонам(ОбъектБД,ШаблоныПроцесса,ОтборВО=Неопределено)
      
	ШаблонТекста = "";
	РазделятьПоШаблонам = Ложь;
	Если ТипЗнч(ОбъектБД) = Тип("СправочникСсылка.СправочникиБД") Тогда
		 РазделятьПоШаблонам = Ложь;		 
	ИначеЕсли ЗначениеЗаполнено(ОбъектБД.РеквизитШаблонаДокумета) Тогда 
		 РазделятьПоШаблонам = Истина;
	КонецЕсли;	
	
	
	Если РазделятьПоШаблонам Тогда
		
		Если   ШаблоныПроцесса Тогда
			
			ШаблонТекста  =  "ВЫБРАТЬ
			|	ЭтапыУниверсальныхПроцессовФормируемыеДокументы.Ссылка,
			|	ЭтапыУниверсальныхПроцессовФормируемыеДокументы.ШаблонДокумента КАК ШаблонДокументаБД
			|ПОМЕСТИТЬ втШаблоны
			|ИЗ
			|	Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыУниверсальныхПроцессовФормируемыеДокументы
			|ГДЕ
			|	ЭтапыУниверсальныхПроцессовФормируемыеДокументы.Ссылка.Владелец = &Процесс
			|	И ЭтапыУниверсальныхПроцессовФормируемыеДокументы.ДокументБД = &ОбъектБД
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";


		Иначе	
			
			ТипРеквизитаШаблона=Метаданные.НайтиПоТипу(Метаданные.Документы[ОбъектБД.Наименование].Реквизиты[ОбъектБД.РеквизитШаблонаДокумета].Тип.Типы()[0]);				
			ТекстОтборов = "";
			Если Метаданные.Справочники.Содержит(ТипРеквизитаШаблона) Тогда
				
				ТекстОтборов = Символы.ПС + "ГДЕ" + Символы.ПС + " Шаблон.ПометкаУдаления = Ложь ";
				Если ТипРеквизитаШаблона.Иерархический 
					И (ТипРеквизитаШаблона.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов) Тогда
					
					ТекстОтборов = ТекстОтборов + " И  Шаблон.ЭтоГруппа = Ложь";	
				КонецЕсли;					
				
			КонецЕсли;			
			
			Если  ОбъектБД.Наименование = "ЗаявкаНаИзменениеНСИ" Тогда
				
				ТекстОтборов = ТекстОтборов + " И  Шаблон.Контролируемый = Истина";
				
			КонецЕсли;	
			
			Если   ОбъектБД.Наименование = "НастраиваемыйОтчет"  И ЗначениеЗаполнено(ОтборВО) Тогда
				  ТекстОтборов = ТекстОтборов + " И  Шаблон.Ссылка В ИЕРАРХИИ (&ОтборВО)";
			КонецЕсли;	
			
			Если   ОбъектБД.Наименование = "РакурсДанных"  И ЗначениеЗаполнено(ОтборВО) Тогда
				  ТекстОтборов = ТекстОтборов + " И  Шаблон.Владелец.Ссылка В ИЕРАРХИИ (&ОтборВО)";
			КонецЕсли;	

			ШаблонТекста  =  "
			| ВЫБРАТЬ  
			|	Шаблон.Ссылка КАК ШаблонДокументаБД
			|ПОМЕСТИТЬ втШаблоны	
			|ИЗ
			|	" + ТипРеквизитаШаблона.ПолноеИмя() + " КАК Шаблон 
			|" + ТекстОтборов+";";
			
			ШаблонТекста = ШаблонТекста+"
			|////////////////////////////////////////////////////////////////////////////////
			|";
			
		КонецЕсли;	
		
	Иначе
		
		Если ТипЗнч(ОбъектБД) = Тип("СправочникСсылка.ДокументыБД") Тогда
			ТипРеквизитаШаблона = "Документ."+ОбъектБД.Наименование;
		Иначе
			ТипРеквизитаШаблона = "Справочник."+ОбъектБД.Наименование;
		КонецЕсли;	
		
		ШаблонТекста  =  "
		| ВЫБРАТЬ  
		|	&ОбъектБД КАК ШаблонДокументаБД
		|	
		|ПОМЕСТИТЬ втШаблоны	
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли; 
		
	Возврат ШаблонТекста;
	
КонецФункции

#КонецОбласти

Процедура РасчитатьПоПравилуОбработки(ПравилоОбработки,ПараметрыЗадания) Экспорт 
	
	Если ПравилоОбработки = Нстр("ru = 'Заполнить по регламенту'") Тогда	
		ВерсияРегламента = Неопределено;
		ЗаполнитьТаблицуНастроекПоРегламенту(ВерсияРегламента);
		ЗаполнитьПоРегламенту(Неопределено,ПараметрыЗадания);
		Возврат;	
	ИначеЕсли ПравилоОбработки = Нстр("ru = 'Консолидировать периметр'") Тогда
		ЗаполнитьТаблицуНастроекПоРегламенту(ВерсияРегламента);
		КонсолидироватьПериметр();
		Возврат;	
	Иначе	
		ВерсияРегламента = Неопределено;
		ЗаполнитьТаблицуНастроекПоРегламенту(ВерсияРегламента);	
	КонецЕсли;	
	
	ЗаполнениеВыполнено = Истина;
			
	Если ЗаполнениеВыполнено Тогда			
		ЗаполнитьПоРегламенту(ПравилоОбработки,ПараметрыЗадания);	 
	КонецЕсли;	
		
КонецПроцедуры

Процедура ЗаполнитьТаблицуНастроекПоРегламенту(ВерсияРегламента)
	
	СтруктураФильтров =ПолучитьИзВременногоХранилища(АдресСтруктураФильтров);
	ТзДанные = ПолучитьИзВременногоХранилища(тзДанныеАдрес);
	
	ТаблицаПериодовСценариевДоступныеДанные = ТзДанные.Скопировать();
	
	Если  ТаблицаПериодовСценариевДоступныеДанные.Количество() = 0 Тогда	
		ОбщегоНазначенияУх.СообщитьОбОшибке(Нстр("ru = 'В выбранном диапазоне периодов нет доступных для изменения данных'"));
		Возврат;
	КонецЕсли;	
	
	Если ТаблицаПериодовСценариевДоступныеДанные.Колонки.Найти("Сценарии")=Неопределено Тогда	
		Возврат;	 
	КонецЕсли;	
	
	
	Если ТаблицаПериодовСценариевДоступныеДанные.Колонки.Найти("Организации")=Неопределено Тогда	
		Возврат;	 
	КонецЕсли;	
	
	ТаблицаПериодовСценариевДоступныеДанные.Свернуть("Сценарии,Периоды");
	
	ВерсияРегламента =  ПолучитьРабочиеВерсииРегламента(ТаблицаПериодовСценариевДоступныеДанные);
	
	
КонецПроцедуры
		
Функция ПолучитьРабочиеВерсииРегламента(ТаблицаПериодовСценариев)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры КАК ВерсияРегламента,
	               |	УправлениеПериодомСценария.Ссылка КАК ДокументУП
	               |ИЗ
	               |	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	               |ГДЕ
	               |	УправлениеПериодомСценария.ПометкаУдаления = ЛОЖЬ
	               |	И УправлениеПериодомСценария.ПериодСценария.ДатаНачала >= &ДатаНачала
	               |	И УправлениеПериодомСценария.ПериодСценарияОкончание.ДатаНачала <= &ДатаОкончания
	               |	И УправлениеПериодомСценария.Сценарий В(&Сценарий)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры,
	               |	NULL
	               |ИЗ
	               |	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	               |ГДЕ
	               |	УправлениеПериодомСценария.ПометкаУдаления = ЛОЖЬ
	               |	И УправлениеПериодомСценария.ПериодСценария = &Период
	               |	И УправлениеПериодомСценария.Сценарий.Периодичность = &БезПериодичности
	               |	И УправлениеПериодомСценария.Сценарий В(&Сценарий)";
	
	
	Запрос.УстановитьПараметр("ДатаНачала",ГоризонтДатаНачала);
	Запрос.УстановитьПараметр("Период",ТаблицаПериодовСценариев[0].Периоды.СвязанныйПериод);

	Запрос.УстановитьПараметр("ДатаОкончания",ГоризонтДатаОкончания);
	Запрос.УстановитьПараметр("Сценарий",ТаблицаПериодовСценариев.ВыгрузитьКолонку("Сценарии"));
	Запрос.УстановитьПараметр("БезПериодичности",Перечисления.Периодичность.ПустаяСсылка());

	ТзОткрытыеПериодыСценарии =  Запрос.Выполнить().Выгрузить();
	
	ТзОткрытыеПериодыСценарииАдрес = ПоместитьВоВременноеХранилище(ТзОткрытыеПериодыСценарии,Новый УникальныйИдентификатор);
	
	Возврат ТзОткрытыеПериодыСценарии;
		
		
КонецФункции	
		
Функция ПолучитьПараметрыРасшифровкиОперанда(Расшифровка,ЗначениеПоказателя) Экспорт
		
	ДанныеРасшифровки          = ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровки);
	СтруктураТаблицИнтерфейса  = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
	СтруктураФильтров          = ПолучитьИзВременногоХранилища(АдресСтруктураФильтров);
	
	СтруктураРасшифровки = Новый Структура;	
	СоздатьОписаниеСтруктурыПолей(СтруктураРасшифровки,СтруктураТаблицИнтерфейса);
	
	ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,Расшифровка,
	СтруктураТаблицИнтерфейса,СтруктураФильтров,СтруктураРасшифровки);
	
	ИмяТекущегоРесурса = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Поле;
		
	Если СтрНайти(ИмяТекущегоРесурса,"БАЗА_АБС_")>0 Тогда	
		ИмяТекущегоРесурса 	= СтрЗаменить(ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Поле,"БАЗА_АБС_","");
		ИндексТекущегоРесурса  = СтруктураТаблицИнтерфейса.ДополнительныеПоля.НайтиСтроки(Новый Структура("КодПоказателя",ИмяТекущегоРесурса))[0];	
		
		НастройкиРасчетаОтклоненийВыбранные 				= СтруктураТаблицИнтерфейса.ДополнительныеПоля.НайтиСтроки(Новый Структура("Использовать",Истина));
		ПолучитьСтруктуруРасшифровкиДинамическогоПоля(СтруктураРасшифровки,НастройкиРасчетаОтклоненийВыбранные,ИндексТекущегоРесурса);
			
		ИмяТекущегоРесурса = СокрЛП(ИндексТекущегоРесурса.Колонки[0].Значение.Код);
		
	ИначеЕсли СтрНайти(ИмяТекущегоРесурса,"БАЗА_ОТН_")>0 Тогда			
		ИмяТекущегоРесурса 	= СтрЗаменить(ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Поле,"БАЗА_ОТН_","");
		ИндексТекущегоРесурса  = СтруктураТаблицИнтерфейса.ДополнительныеПоля.НайтиСтроки(Новый Структура("КодПоказателя",ИмяТекущегоРесурса))[0];	
		
		НастройкиРасчетаОтклоненийВыбранные 				= СтруктураТаблицИнтерфейса.ДополнительныеПоля.НайтиСтроки(Новый Структура("Использовать",Истина));
		ПолучитьСтруктуруРасшифровкиДинамическогоПоля(СтруктураРасшифровки,НастройкиРасчетаОтклоненийВыбранные,ИндексТекущегоРесурса);		
		
		ИмяТекущегоРесурса = СокрЛП(ИндексТекущегоРесурса.Колонки[0].Значение.Код);
		
	ИначеЕсли СтрНайти(ИмяТекущегоРесурса,"БАЗА_")>0 Тогда	 
		ИмяТекущегоРесурса 	= СтрЗаменить(ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Поле,"БАЗА_","");
		ИндексТекущегоРесурса  = СтруктураТаблицИнтерфейса.ДополнительныеПоля.НайтиСтроки(Новый Структура("КодПоказателя",ИмяТекущегоРесурса))[0];
		
		НастройкиРасчетаОтклоненийВыбранные 				= СтруктураТаблицИнтерфейса.ДополнительныеПоля.НайтиСтроки(Новый Структура("Использовать",Истина));
		ПолучитьСтруктуруРасшифровкиДинамическогоПоля(СтруктураРасшифровки,НастройкиРасчетаОтклоненийВыбранные,ИндексТекущегоРесурса);		
		
		ИмяТекущегоРесурса = СокрЛП(ИндексТекущегоРесурса.Колонки[0].Значение.Код);
		
	КонецЕсли;	
		
	Если Не ЗначениеЗаполнено(СтруктураРасшифровки.ПоказательСсылка) Тогда
	
		ПоказательСсылка = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.НайтиСтроки(Новый Структура("КолонкаФорматированныйКод,Строка",ИмяТекущегоРесурса,СтруктураРасшифровки.ПоказателиСтрокаОтчета));
		
		Если ПоказательСсылка.Количество()=0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СтруктураРасшифровки.Вставить("ПоказательСсылка",ПоказательСсылка[0].Показатель);
		СтруктураРасшифровки.Вставить("ПоказательТипЗнчения",ПоказательСсылка[0].ТипЗначения);
		СтруктураРасшифровки.Вставить("НеМасштабируется",ПоказательСсылка[0].НеМасштабируется);
		СтруктураРасшифровки.Вставить("КодРесурса",ИмяТекущегоРесурса);	 			
	КонецЕсли;	
		
	ФлагОшибки = Ложь;
	ОбработкаОбъект = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
	ОбработкаОбъект.ВидОтчета = ВидОтчета;
	ОбработкаОбъект.ВалютаОтображения = СтруктураРасшифровки.Валюты;
	оТаблицаИзмененныхПоказателей = ОбработкаОбъект.ТаблицаИзмененныхПоказателей.Выгрузить();
	оТаблицаИзмененныхПоказателей.Колонки.Добавить("ID");
	
	ЗаписатьЗначениеВПоказатель(,ЗначениеПоказателя,СтруктураРасшифровки,оТаблицаИзмененныхПоказателей,СтруктураТаблицИнтерфейса.КэшАналитикПоказателей,ФлагОшибки);
	
	Для Каждого Стр Из оТаблицаИзмененныхПоказателей Цикл	
		Если Стр.Аналитика1 = Неопределено И Стр.Аналитика2 = Неопределено И Стр.Аналитика3= Неопределено И Стр.Аналитика4  = Неопределено Тогда
			 Стр.СинтетическоеЗначение = Истина;
		КонецЕсли;		
	КонецЦикла;	
	
	ОбработкаОбъект.ТаблицаИзмененныхПоказателей.Загрузить(оТаблицаИзмененныхПоказателей);
	
	Если НЕ ФлагОшибки Тогда
		 Возврат ОбработкаОбъект.ПолучитьСтруктуруПараметровДляРасшифровки();
	Иначе	 
		 Возврат Неопределено;
	КонецЕсли;	
	
		
КонецФункции	

Процедура ПолучитьСтруктуруРасшифровкиДинамическогоПоля(СтруктураРасшифровки,ДополнительныеПоля,ИндексТекущегоРесурса)
	
	   ТекСтрока =  ИндексТекущегоРесурса;
	   Если Не ТекСтрока.Сценарии = "Значение источника" Тогда
		   Если СтруктураРасшифровки.Свойство("Сценарии") Тогда
			    СтруктураРасшифровки.Сценарии = ТекСтрока.Сценарии;
		   КонецЕсли;	      
	   КонецЕсли;	   
	   Если Не ТекСтрока.Организации = "Значение источника" Тогда
		   Если СтруктураРасшифровки.Свойство("Организации") Тогда
			    СтруктураРасшифровки.Сценарии = ТекСтрока.Организации;
		   КонецЕсли;	      
	   КонецЕсли;
	   Если Не ТекСтрока.Проекты = "Значение источника" Тогда
		   Если СтруктураРасшифровки.Свойство("Проекты") Тогда
			    СтруктураРасшифровки.Сценарии = ТекСтрока.Проекты;
		   КонецЕсли;	      
	   КонецЕсли;
	  Если ТипЗнч(ТекСтрока.Периоды) = Тип("СправочникСсылка.Периоды") Тогда
	       Если СтруктураРасшифровки.Свойство("ПериодыСвязанныйПериод") Тогда
	    	    СтруктураРасшифровки.ПериодыСвязанныйПериод = ТекСтрока.Периоды;
	       КонецЕсли;	      
	  ИначеЕсли  СтрНайти(ТекСтрока.Периоды,"Сдвиг")>0  Тогда	   
		   
		  ТзПериодовСоСдвигом = Новый ТаблицаЗначений;
		  ТзПериодовСоСдвигом.Колонки.Добавить("ИндексБазы",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(2));	
		  ТзПериодовСоСдвигом.Колонки.Добавить("ИсходныйПериод",Новый ОписаниеТипов("СправочникСсылка.Периоды"));	
		  ТзПериодовСоСдвигом.Колонки.Добавить("БазовыйПериод",Новый ОписаниеТипов("СправочникСсылка.Периоды"));	
		  ТзПериодовСоСдвигом.Колонки.Добавить("БазовыйПериодДатаНачала",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		  ТзПериодовСоСдвигом.Колонки.Добавить("Периодичность",Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
          Сдвиг = Число(СтрЗаменить(ТекСтрока.Периоды, Нстр("ru = 'Сдвиг по периоду: '"),""));
		  ИсходныеПериоды = Новый Массив();
		  ИсходныеПериоды.Добавить(СтруктураРасшифровки.ПериодыСвязанныйПериод);
		    
		  СводнаяТаблицаУХ.ЗаполнитьТаблицуПериодов(ИндексТекущегоРесурса,ТзПериодовСоСдвигом,Сдвиг,ИсходныеПериоды,Периодичность);
		  
		  Если НЕ ТзПериодовСоСдвигом.Количество()=0 Тогда
			    СтруктураРасшифровки.ПериодыСвязанныйПериод = ТзПериодовСоСдвигом[0].БазовыйПериод;
		  КонецЕсли;	  	  
		  
	  КонецЕсли;
	   	
КонецПроцедуры	

Процедура ВывестиКомментарии(ПолеТабличногоДокументаМакет,ТЗДанные,СтруктураТаблицИнтерфейса,ДанныеРасшифровки)
	
		
	АналитикиОтбораИсточник = Новый Структура;
	СоздатьОписаниеСтруктурыПолей(АналитикиОтбораИсточник,СтруктураТаблицИнтерфейса);	
	ТекстСКомментарием = ПолеТабличногоДокументаМакет.НайтиТекст(Нстр("ru = 'КОММ##'"));
		
	Пока ТекстСКомментарием<>Неопределено Цикл
		
		АналитикиОтбораИсточник = Новый Структура;
		ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,ТекстСКомментарием.Расшифровка,,,АналитикиОтбораИсточник);

		АналитикиОтбора = Новый Структура;		
		АналитикиОтбора.Вставить("Валюты",АналитикиОтбораИсточник["Валюты"]);
		АналитикиОтбора.Вставить("Сценарии",АналитикиОтбораИсточник["Сценарии"]);
		АналитикиОтбора.Вставить("ПериодыСвязанныйПериод",АналитикиОтбораИсточник["ПериодыСвязанныйПериод"]);
        АналитикиОтбора.Вставить("Организации",АналитикиОтбораИсточник["Организации"]);
        АналитикиОтбора.Вставить("Проекты",АналитикиОтбораИсточник["Проекты"]);
		АналитикиОтбора.Вставить("ПоказательСсылка",АналитикиОтбораИсточник["ПоказательСсылка"]);
		
		Для Каждого Кол Из ТЗДанные.Колонки Цикл	
			Если АналитикиОтбораИсточник.Свойство(Кол.Имя) Тогда		
				ГруппаРаскрытия = СтруктураТаблицИнтерфейса.КэшАналитикПоказателей.НайтиСтроки(Новый Структура("Строка",АналитикиОтбораИсточник.ПоказателиСтрокаОтчета))[0];	
				Для Инд=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл			
					Если ГруппаРаскрытия["Аналитика"+Инд]=Кол.Имя Тогда			
						АналитикиОтбора.Вставить(Кол.Имя,АналитикиОтбораИсточник[Кол.Имя]);		
					КонецЕсли;			
				КонецЦикла;			
			КонецЕсли;		
		КонецЦикла;	
		
		НайденноеЗначение = ТЗДанные.НайтиСтроки(АналитикиОтбора);
		Если НайденноеЗначение.Количество() > 0 Тогда
			
			ТекстСКомментарием.Текст = НайденноеЗначение[0].Значение;
			Если НЕ ТекстСКомментарием.ЦветФона = Новый Цвет(230,255,230) Тогда
				ТекстСКомментарием.Примечание.Текст =  НайденноеЗначение[0].Комментарий;
			КонецЕсли;
		Иначе	 
			
			ТекстСКомментарием.Текст = Нстр("ru = '#Ошибка чтения комментария#'");		
		КонецЕсли;	
		
		ТекстСКомментарием = ПолеТабличногоДокументаМакет.НайтиТекст(Нстр("ru = 'КОММ##'"));
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоРегламенту(ПравилоПересчетаЗависимых,ПараметрыЗадания)
	
	ТЗПериодов = ПолучитьИзВременногоХранилища(ТЗКолонокАдрес);	
	СтруктураФильтров = ПолучитьИзВременногоХранилища(АдресСтруктураФильтров);

	СтруктураОбязательныхАналитикДляПересчета = Новый Структура;
	СтруктураОбязательныхАналитикДляПересчета.Вставить("Организации", Нстр("ru = 'Организационная единица'"));
	СтруктураОбязательныхАналитикДляПересчета.Вставить("Проекты", Нстр("ru = 'Проект'"));
    СтруктураОбязательныхАналитикДляПересчета.Вставить("Сценарии", Нстр("ru = 'Сценарий'"));
	
	МаксАналитикОтчета = 0;
	Для аИнд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ЗначениеЗаполнено(ВидОтчета["ВидАналитики"+аИнд]) Тогда
			СтруктураОбязательныхАналитикДляПересчета.Вставить(ВидОтчета["ВидАналитики"+аИнд].Код,ВидОтчета["ВидАналитики"+аИнд].Наименование);
			МаксАналитикОтчета = МаксАналитикОтчета + 1;
		КонецЕсли;	
	КонецЦикла;
	ТЗДанныеДляПересчетаПоказателей = ПолучитьИзВременногоХранилища(тзДанныеАдрес).Скопировать();

	СтрокаСвертки = "";
	
	Для Каждого Кол Из СтруктураОбязательныхАналитикДляПересчета Цикл
		Если ТЗДанныеДляПересчетаПоказателей.Колонки.Найти(Кол.Ключ) = Неопределено Тогда
			
			СтрокаШаблона = Нстр("ru = 'Не выбрана ключевая аналитика вида отчета: %1'");
			
			ТекстОшибки = "";
			Если Не ПустаяСтрока(СтрокаШаблона) тогда								
				ТекстОшибки = СтрШаблон(СтрокаШаблона, Кол.Значение);
			КонецЕсли;

			ВызватьИсключение(ТекстОшибки);
			
		КонецЕсли;	
		СтрокаСвертки = СтрокаСвертки+Кол.Ключ+",";
	КонецЦикла;
	
	ТЗДанныеДляПересчетаПоказателей.Свернуть(СтрокаСвертки + "ПериодыСвязанныйПериод");
	
	ТЗДанныеДляПересчетаПоказателей.Колонки["Организации"].Имя = "Организация";
	ТЗДанныеДляПересчетаПоказателей.Колонки["Проекты"].Имя = "Проект";
	ТЗДанныеДляПересчетаПоказателей.Колонки["ПериодыСвязанныйПериод"].Имя = "ПериодОтчета";
	ТЗДанныеДляПересчетаПоказателей.Колонки["Сценарии"].Имя = "Сценарий";
	
	Для аИнд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ЗначениеЗаполнено(ВидОтчета["ВидАналитики"+аИнд]) Тогда			
			ТЗДанныеДляПересчетаПоказателей.Колонки[ВидОтчета["ВидАналитики"+аИнд].Код].Имя = "Аналитика"+аИнд;
		КонецЕсли;	
	КонецЦикла;
	
	ТЗДанныеДляПересчетаПоказателей.Сортировать("Сценарий");
	
	Если РасширениеБизнесЛогикиУХ.ИспользоватьРасширенныйРасчет()
		И Не ПараметрыЗадания.Свойство("НеИспользоватьРасширенныйРасчет") Тогда
		
		// Найдем соответствующие документы Управление отчетным периодом для каждого периода
		ТЗДанныеДляПересчетаПоказателей.Колонки.Добавить("УправлениеПериодом"); 
		КэшДокументовПериоды = Новый Соответствие;
		Для Каждого СтрокаДанных Из ТЗДанныеДляПересчетаПоказателей Цикл
			СтрКэш = Строка(СтрокаДанных.Сценарий.УникальныйИдентификатор()) + "-" + Строка(СтрокаДанных.ПериодОтчета.УникальныйИдентификатор());
			СтрокаДанных.УправлениеПериодом = КэшДокументовПериоды.Получить(СтрКэш);
			Если СтрокаДанных.УправлениеПериодом = Неопределено Тогда
				СтрокаДанных.УправлениеПериодом = 
					УправлениеРабочимиПроцессамиУХ.ПолучитьДокументУправленияПериодомСценария(СтрокаДанных.Сценарий,СтрокаДанных.ПериодОтчета);
				КэшДокументовПериоды.Вставить(СтрКэш,СтрокаДанных.УправлениеПериодом);
			КонецЕсли;
		КонецЦикла;
		
		КопияДанныеДляПересчетаПоказателей = ТЗДанныеДляПересчетаПоказателей.Скопировать();
		СтрокаСвертки = "";
		Для Каждого Колонка Из ТЗДанныеДляПересчетаПоказателей.Колонки Цикл
			Если Колонка.Имя <> "ПериодОтчета" Тогда
				СтрокаСвертки = СтрокаСвертки + Колонка.Имя + ",";
			КонецЕсли;
		КонецЦикла;
		ТЗДанныеДляПересчетаПоказателей.Свернуть(СтрокаСвертки);
		
		ОбработкаОбъект = Обработки.РасчетИЗаписьПоказателей.Создать();
				
		Для Каждого СтрокаДанных Из ТЗДанныеДляПересчетаПоказателей Цикл
			
			СтруктураПоискаПериодов = Новый Структура;
			СтруктураПоискаПериодов.Вставить("Организация",СтрокаДанных.Организация);
			СтруктураПоискаПериодов.Вставить("Сценарий",СтрокаДанных.Сценарий);
			СтруктураПоискаПериодов.Вставить("Проект",СтрокаДанных.Проект);
			СтруктураПоискаПериодов.Вставить("УправлениеПериодом",СтрокаДанных.УправлениеПериодом);
			Для Сч = 1 По МаксАналитикОтчета Цикл
				СтруктураПоискаПериодов.Вставить("Аналитика" + Сч,СтрокаДанных["Аналитика" + Сч]);
			КонецЦикла;
			
			ОбъектРасчета = ОбработкаОбъект.ИнициализироватьОбъектРасчета();
			ЗаполнитьЗначенияСвойств(ОбъектРасчета,СтруктураПоискаПериодов);
			ОбъектРасчета.Вставить("ВидОтчета",ВидОтчета);
			
			МассивПериодов = КопияДанныеДляПересчетаПоказателей.НайтиСтроки(СтруктураПоискаПериодов);
			Для Каждого СтрокаПериод Из МассивПериодов Цикл
				ПериодОтчета = СтрокаПериод.ПериодОтчета;
				Если Не ЗначениеЗаполнено(ОбъектРасчета.ПериодОтчета) Тогда
					ОбъектРасчета.Вставить("ПериодОтчета",ПериодОтчета);
				ИначеЕсли ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(ПериодОтчета,"ДатаНачала") < 
					ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(ОбъектРасчета.ПериодОтчета,"ДатаНачала") Тогда
					ОбъектРасчета.Вставить("ПериодОтчета",ПериодОтчета);
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ОбъектРасчета.ПериодОкончания) Тогда
					ОбъектРасчета.Вставить("ПериодОкончания",ПериодОтчета);
				ИначеЕсли ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(ПериодОтчета,"ДатаОкончания") > 
					ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(ОбъектРасчета.ПериодОтчета,"ДатаОкончания") Тогда
					ОбъектРасчета.Вставить("ПериодОкончания",ПериодОтчета);
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ПравилоПересчетаЗависимых) Тогда
				ОбъектРасчета.Вставить("ПравилоОбработки",ПравилоПересчетаЗависимых);
				ОбъектРасчета.Вставить("СпособФормированияОтчета",ПредопределенноеЗначение("Перечисление.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки"));
			Иначе		
				СоответствиеНастроек = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(ВидОтчета,ОбъектРасчета.Сценарий,ОбъектРасчета.Организация,ОбъектРасчета.ПериодОтчета);		
				Если СоответствиеНастроек.Свойство("ПравилоОбработки") Тогда
					ОбъектРасчета.Вставить("ПравилоОбработки",СоответствиеНастроек.ПравилоОбработки);
				КонецЕсли;
				Если СоответствиеНастроек.Свойство("СпособФормированияОтчета") Тогда
					ОбъектРасчета.Вставить("СпособФормированияОтчета",СоответствиеНастроек.СпособФормированияОтчета);
				ИначеЕсли ОбъектРасчета.Свойство("ПравилоОбработки") Тогда
					// Правило формирования не задано, но задано правило обработки
					ОбъектРасчета.Вставить("СпособФормированияОтчета",ПредопределенноеЗначение("Перечисление.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки"));
				КонецЕсли;
			КонецЕсли;
			Если ПараметрыЗадания.Свойство("СпособФормированияОтчета") Тогда
				ОбъектРасчета.Вставить("СпособФормированияОтчета",ПараметрыЗадания.СпособФормированияОтчета);
			КонецЕсли;
			
			Если ОбъектРасчета.СпособФормированияОтчета = ПредопределенноеЗначение("Перечисление.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки") Тогда				
				ОбработкаОбъект.ЗаполнитьДанныеПоПериодам(ОбъектРасчета, Истина);				
			Иначе
				// Выполняем заполнение классическим движком
				ПараметрыЗадания.Вставить("НеИспользоватьРасширенныйРасчет");
				ЗаполнитьПоРегламенту(ПравилоПересчетаЗависимых,ПараметрыЗадания);				
			КонецЕсли;
			
		КонецЦикла;

	Иначе 		
		
		// Классический движок расчета показателей
		РасчетПоказателейОбъект = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
		РасчетПоказателейОбъект.ВидОтчета = ВидОтчета;
		РасчетПоказателейОбъект.ВалютаОтображения = Константы.ВалютаУправленческогоУчета.Получить();
		РасчетПоказателейОбъект.РассчитыватьЗависимые = Константы.АвтоматическийПересчетЗависимыхПоказателей.Получить();	
		РасчетПоказателейОбъект.ТрассировкаРасчета = РежимТрассировки;
		РасчетПоказателейОбъект.ИзменениеСостояний = РежимСтатусы;			
		
		Для Каждого тПериод Из ТЗПериодов Цикл
			
			тТЗДанныеДляПересчетаПоказателей = ТЗДанныеДляПересчетаПоказателей.НайтиСтроки(Новый Структура("ПериодОтчета",тПериод.ПериодыСвязанныйПериод));
			
			Для Каждого стрРасчета Из тТЗДанныеДляПересчетаПоказателей Цикл	
				Нстрока = РасчетПоказателейОбъект.ДанныеДляПересчетаПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(Нстрока,стрРасчета);
				Нстрока.ОсновнаяВалюта = СтруктураФильтров["Фильтр_Валюты"];			
				Если ЗначениеЗаполнено(ПравилоПересчетаЗависимых) Тогда
					Нстрока.ПравилоОбработки 			= ПравилоПересчетаЗависимых;
					Нстрока.СпособФормированияОтчета 	= Перечисления.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки;
				Иначе		
					СоответствиеНастроек = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(ВидОтчета,стрРасчета.Сценарий,стрРасчета.Организация,стрРасчета.ПериодОтчета);		
					Если СоответствиеНастроек.Свойство("СпособФормированияОтчета") Тогда
						Нстрока.СпособФормированияОтчета = СоответствиеНастроек.СпособФормированияОтчета;
					КонецЕсли;
					Если СоответствиеНастроек.Свойство("ПравилоОбработки") Тогда
						Нстрока.ПравилоОбработки = СоответствиеНастроек.ПравилоОбработки;
					КонецЕсли;	
				КонецЕсли;		
			КонецЦикла;
		КонецЦикла;
	
		РасчетПоказателейОбъект.РассчитатьЗначенияПоказателей();
	
		Если РежимТрассировки Тогда
			ПараметрыЗадания.ТаблицаИсходныхПоказателей = РасчетПоказателейОбъект.ТаблицаИсходныхПоказателей.Выгрузить();
			ПараметрыЗадания.ТаблицаТрассировкиРасчета  = РасчетПоказателейОбъект.ТаблицаТрассировкиРасчета.Выгрузить();
		КонецЕсли;
		
	КонецЕсли;	
 	
КонецПроцедуры	

Процедура КонсолидироватьПериметр()
	
	РасчетПоказателейОбъект = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
	РасчетПоказателейОбъект.ВидОтчета = ВидОтчета;
	РасчетПоказателейОбъект.ВалютаОтображения = Константы.ВалютаУправленческогоУчета.Получить();
	РасчетПоказателейОбъект.РассчитыватьЗависимые = Константы.АвтоматическийПересчетЗависимыхПоказателей.Получить();	
    РасчетПоказателейОбъект.СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.АвтоматическиКонсолидация;	
			
	ТЗПериодов = ПолучитьИзВременногоХранилища(ТЗКолонокАдрес);
	СтруктураФильтров = ПолучитьИзВременногоХранилища(АдресСтруктураФильтров);
	
	Если Не СтруктураФильтров.Свойство("Фильтр_Организации") Тогда
		ТЗДанныеОрганизаций = ПолучитьИзВременногоХранилища(тзДанныеАдрес);
		Если НЕ ТЗДанныеОрганизаций.Колонки.Найти("Организации")=Неопределено Тогда
			ТЗДанныеОрганизаций.Свернуть("Организации");
		Иначе	  
			Возврат;
		КонецЕсли;		
	Иначе		 
		ТЗДанныеОрганизаций = Новый ТаблицаЗначений;
		ТЗДанныеОрганизаций.Колонки.Добавить("Организации");
		Нстр = ТЗДанныеОрганизаций.Добавить();
		Нстр.Организации =  СтруктураФильтров["Фильтр_Организации"];
	КонецЕсли;	
	
	Для Каждого ЦФО Из ТЗДанныеОрганизаций Цикл
		
		Для Каждого мПериод Из ТЗПериодов Цикл 
			
			Нстрока= РасчетПоказателейОбъект.ДанныеДляПересчетаПоказателей.Добавить();
			Нстрока.ПериодОтчета = мПериод.ПериодыСвязанныйПериод;
			Нстрока.Организация = ЦФО.Организации;
			
			Если СтруктураФильтров.Свойство("Фильтр_Сценарии") Тогда
				Нстрока.Сценарий = СтруктураФильтров["Фильтр_Сценарии"];
			КонецЕсли;	
			
			Если СтруктураФильтров.Свойство("Фильтр_Проекты") Тогда
				Нстрока.Проект = СтруктураФильтров["Фильтр_Проекты"];
			КонецЕсли;	
			
			Если СтруктураФильтров.Свойство("Фильтр_Валюты") Тогда
				Нстрока.ОсновнаяВалюта = СтруктураФильтров["Фильтр_Валюты"];
			КонецЕсли;					
			
			Нстрока.СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.АвтоматическиКонсолидация;
			
			СоответствиеНастроек = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(ВидОтчета,Нстрока.Сценарий,Нстрока.Организация,Нстрока.ПериодОтчета);		
			Если СоответствиеНастроек.Свойство("ПравилоОбработки") Тогда
			     Нстрока.ПравилоОбработки 	= СоответствиеНастроек.ПравилоОбработки;
			КонецЕсли;			
		КонецЦикла;	
	КонецЦикла;
	
	РасчетПоказателейОбъект.РассчитатьЗначенияПоказателей();	
	
КонецПроцедуры	


#Область ФункцииРасчетаПоПравилам

    
Процедура РассчитатьДДСПоУсловиямОплаты() Экспорт
	
		
	ТзОткрытыеПериодыСценарии = ПолучитьИзВременногоХранилища(ТзОткрытыеПериодыСценарииАдрес);
	
	Если ТзОткрытыеПериодыСценарии.Количество()=1 Тогда
		 УправлениеПериодом =  ТзОткрытыеПериодыСценарии[0].ДокументУП;
	Иначе	 
		 Возврат;
	КонецЕсли;
	
	ЗапосПоказатели  =  Новый Запрос;
	ЗапосПоказатели.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоказателиОтчетов.Ссылка
	|ИЗ
	|	РегистрСведений.НастройкиРасчетаСтатейДС КАК НастройкиРасчетаСтатейДС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ПО НастройкиРасчетаСтатейДС.СтатьяБДР = ПоказателиОтчетов.СтатьяДоходовИРасходов
	|ГДЕ
	|	НастройкиРасчетаСтатейДС.Сценарий = &Сценарий
	|	И ПоказателиОтчетов.ПометкаУдаления = ЛОЖЬ";
	
	ЗапосПоказатели.УстановитьПараметр("Сценарий",УправлениеПериодом.Сценарий);
	Показатели = ЗапосПоказатели.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	
	ЗапросПериоды = Новый Запрос;
	ЗапросПериоды.Текст = "ВЫБРАТЬ
	                      |	Периоды.Ссылка,
	                      |	Периоды.ДатаНачала
	                      |ИЗ
	                      |	Справочник.Периоды КАК Периоды
	                      |ГДЕ
	                      |	Периоды.ПометкаУдаления = ЛОЖЬ
	                      |	И Периоды.ДатаНачала >= &ДатаНачала
	                      |	И Периоды.ДатаОкончания <= &ДатаОкончания
	                      |	И Периоды.Произвольный = ЛОЖЬ
	                      |	И Периоды.Периодичность = &Периодичность";
	
	ЗапросПериоды.УстановитьПараметр("ДатаНачала",УправлениеПериодом.ПериодСценария.ДатаНачала);
	ЗапросПериоды.УстановитьПараметр("ДатаОкончания",УправлениеПериодом.ПериодСценарияОкончание.ДатаОкончания);
	ЗапросПериоды.УстановитьПараметр("Периодичность",УправлениеПериодом.Сценарий.Периодичность);
	
	
	
	ТаблицаПериодов =  ЗапросПериоды.Выполнить().Выгрузить();
	ВыбранныеПериоды =  ТаблицаПериодов.ВыгрузитьКолонку("Ссылка");
	
	
	
	ЗапросДанные = Новый Запрос;
	ЗапросДанные.Текст = "ВЫБРАТЬ
	                     |	ПоказателиОтчетов.Ссылка КАК ПоказательОтчета,
	                     |	ПоказателиОтчетов.Ссылка.Строка КАК ПоказательСтрокаОтчета,
	                     |	ПоказателиОтчетов.Колонка.Ссылка КАК ПоказательКолонка,
	                     |	ПоказателиОтчетов.Строка.Ссылка КАК ПоказательСтрока,
	                     |	ВЫБОР
	                     |		КОГДА &ПолучитьТолькоСинтетику = ИСТИНА
	                     |			ТОГДА 0
	                     |		КОГДА ПоказателиОтчетов.ГруппаРаскрытия = ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка)
	                     |			ТОГДА ВЫБОР
	                     |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	                     |						ТОГДА 0
	                     |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	                     |						ТОГДА 1
	                     |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	                     |						ТОГДА 2
	                     |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	                     |						ТОГДА 3
	                     |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	                     |						ТОГДА 4
	                     |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	                     |						ТОГДА 5
	                     |					ИНАЧЕ 6
	                     |				КОНЕЦ
	                     |		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	                     |			ТОГДА 0
	                     |		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	                     |			ТОГДА 1
	                     |		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	                     |			ТОГДА 2
	                     |		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	                     |			ТОГДА 3
	                     |		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	                     |			ТОГДА 4
	                     |		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	                     |			ТОГДА 5
	                     |		ИНАЧЕ 6
	                     |	КОНЕЦ КАК НомерАналитикиРаскрытия,
	                     |	ПоказателиОтчетов.Владелец КАК ВидОтчета,
	                     |	ПоказателиОтчетов.СтатьяДоходовИРасходов КАК СтатьяДоходовИРасходов
	                     |ПОМЕСТИТЬ втПоказателиОтчетов
	                     |ИЗ
	                     |	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	                     |ГДЕ
	                     |	ПоказателиОтчетов.Ссылка В(&ПоказательОтчета)
	                     |
	                     |ИНДЕКСИРОВАТЬ ПО
	                     |	ПоказательОтчета
	                     |;
	                     |
	                     |////////////////////////////////////////////////////////////////////////////////
	                     |ВЫБРАТЬ
	                     |	ВерсииЗначенийПоказателейБаза.Ссылка КАК Версия,
	                     |	ВерсииЗначенийПоказателейБаза.Сценарий КАК Сценарий,
	                     |	ВерсииЗначенийПоказателейБаза.Проект КАК Проект,
	                     |	ВерсииЗначенийПоказателейБаза.ПериодОтчета КАК ПериодОтчета,
	                     |	ВерсииЗначенийПоказателейБаза.ВидОтчета КАК ВидОтчета,
	                     |	ВерсииЗначенийПоказателейБаза.Валюта КАК Валюта,
	                     |	ВерсииЗначенийПоказателейБаза.Организация КАК Организация
	                     |ПОМЕСТИТЬ втВерсииБаза0
	                     |ИЗ
	                     |	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателейБаза
	                     |ГДЕ
	                     |	ВерсииЗначенийПоказателейБаза.Сценарий В(&СценарийБаза0)
	                     |	И ВерсииЗначенийПоказателейБаза.ПериодОтчета В(&ПериодОтчетаБаза0)
	                     |
	                     |ИНДЕКСИРОВАТЬ ПО
	                     |	ВерсииЗначенийПоказателейБаза.Ссылка
	                     |;
	                     |
	                     |////////////////////////////////////////////////////////////////////////////////
	                     |ВЫБРАТЬ
	                     |	втПоказателиОтчетов.ПоказательСтрока КАК ПоказательСтрока,
	                     |	ЗначенияПоказателейОтчетов6.Аналитика1 КАК Аналитика1,
	                     |	ЗначенияПоказателейОтчетов6.Аналитика2 КАК Аналитика2,
	                     |	ЗначенияПоказателейОтчетов6.Аналитика3 КАК Аналитика3,
	                     |	ЗначенияПоказателейОтчетов6.Аналитика4 КАК Аналитика4,
	                     |	ЗначенияПоказателейОтчетов6.Аналитика5 КАК Аналитика5,
	                     |	ЗначенияПоказателейОтчетов6.Аналитика6 КАК Аналитика6,
	                     |	ЗначенияПоказателейОтчетов6.Значение КАК Значение,
	                     |	втПоказателиОтчетов.СтатьяДоходовИРасходов КАК СтатьяДоходовИРасходов,
	                     |	втПоказателиОтчетов.ПоказательОтчета КАК ПоказательОтчета,
	                     |	втПоказателиОтчетов.ПоказательКолонка КАК ПоказательКолонка,
	                     |	втПоказателиОтчетов.НомерАналитикиРаскрытия КАК НомерАналитикиРаскрытия,
	                     |	втВерсииБаза.Версия КАК Версия,
	                     |	втВерсииБаза.Сценарий КАК ВерсияСценарий,
	                     |	втВерсииБаза.Проект КАК ВерсияПроект,
	                     |	втВерсииБаза.ПериодОтчета КАК ВерсияПериодОтчета,
	                     |	втВерсииБаза.Валюта КАК ВерсияВалюта,
	                     |	втВерсииБаза.Организация КАК ВерсияОрганизация,
	                     |	ЗначенияПоказателейОтчетов6.ЗначениеВалюта КАК ЗначениеВалюта,
	                     |	ЗначенияПоказателейОтчетов6.АналитикаВалюта КАК АналитикаВалюта
	                     |ПОМЕСТИТЬ втЗначения
	                     |ИЗ
	                     |	РегистрСведений.ЗначенияПоказателейОтчетов6 КАК ЗначенияПоказателейОтчетов6
	                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсииБаза0 КАК втВерсииБаза
	                     |		ПО ЗначенияПоказателейОтчетов6.Версия = втВерсииБаза.Версия
	                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчетов КАК втПоказателиОтчетов
	                     |		ПО ЗначенияПоказателейОтчетов6.Показатель = втПоказателиОтчетов.ПоказательОтчета
	                     |			И (втПоказателиОтчетов.НомерАналитикиРаскрытия = 6)
	                     |			И (ЗначенияПоказателейОтчетов6.Значение <> 0)
	                     |
	                     |ОБЪЕДИНИТЬ ВСЕ
	                     |
	                     |ВЫБРАТЬ
	                     |	втПоказателиОтчетов.ПоказательСтрока,
	                     |	ЗначенияПоказателейОтчетов5.Аналитика1,
	                     |	ЗначенияПоказателейОтчетов5.Аналитика2,
	                     |	ЗначенияПоказателейОтчетов5.Аналитика3,
	                     |	ЗначенияПоказателейОтчетов5.Аналитика4,
	                     |	ЗначенияПоказателейОтчетов5.Аналитика5,
	                     |	NULL,
	                     |	ЗначенияПоказателейОтчетов5.Значение,
	                     |	втПоказателиОтчетов.СтатьяДоходовИРасходов,
	                     |	втПоказателиОтчетов.ПоказательОтчета,
	                     |	втПоказателиОтчетов.ПоказательКолонка,
	                     |	втПоказателиОтчетов.НомерАналитикиРаскрытия,
	                     |	втВерсииБаза.Версия,
	                     |	втВерсииБаза.Сценарий,
	                     |	втВерсииБаза.Проект,
	                     |	втВерсииБаза.ПериодОтчета,
	                     |	втВерсииБаза.Валюта,
	                     |	втВерсииБаза.Организация,
	                     |	ЗначенияПоказателейОтчетов5.ЗначениеВалюта,
	                     |	ЗначенияПоказателейОтчетов5.АналитикаВалюта
	                     |ИЗ
	                     |	РегистрСведений.ЗначенияПоказателейОтчетов5 КАК ЗначенияПоказателейОтчетов5
	                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсииБаза0 КАК втВерсииБаза
	                     |		ПО ЗначенияПоказателейОтчетов5.Версия = втВерсииБаза.Версия
	                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчетов КАК втПоказателиОтчетов
	                     |		ПО ЗначенияПоказателейОтчетов5.Показатель = втПоказателиОтчетов.ПоказательОтчета
	                     |			И (втПоказателиОтчетов.НомерАналитикиРаскрытия = 5)
	                     |			И (ЗначенияПоказателейОтчетов5.Значение <> 0)
	                     |
	                     |ОБЪЕДИНИТЬ ВСЕ
	                     |
	                     |ВЫБРАТЬ
	                     |	втПоказателиОтчетов.ПоказательСтрока,
	                     |	ЗначенияПоказателейОтчетов4.Аналитика1,
	                     |	ЗначенияПоказателейОтчетов4.Аналитика2,
	                     |	ЗначенияПоказателейОтчетов4.Аналитика3,
	                     |	ЗначенияПоказателейОтчетов4.Аналитика4,
	                     |	NULL,
	                     |	NULL,
	                     |	ЗначенияПоказателейОтчетов4.Значение,
	                     |	втПоказателиОтчетов.СтатьяДоходовИРасходов,
	                     |	втПоказателиОтчетов.ПоказательОтчета,
	                     |	втПоказателиОтчетов.ПоказательКолонка,
	                     |	втПоказателиОтчетов.НомерАналитикиРаскрытия,
	                     |	втВерсииБаза.Версия,
	                     |	втВерсииБаза.Сценарий,
	                     |	втВерсииБаза.Проект,
	                     |	втВерсииБаза.ПериодОтчета,
	                     |	втВерсииБаза.Валюта,
	                     |	втВерсииБаза.Организация,
	                     |	ЗначенияПоказателейОтчетов4.ЗначениеВалюта,
	                     |	ЗначенияПоказателейОтчетов4.АналитикаВалюта
	                     |ИЗ
	                     |	РегистрСведений.ЗначенияПоказателейОтчетов4 КАК ЗначенияПоказателейОтчетов4
	                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсииБаза0 КАК втВерсииБаза
	                     |		ПО ЗначенияПоказателейОтчетов4.Версия = втВерсииБаза.Версия
	                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчетов КАК втПоказателиОтчетов
	                     |		ПО ЗначенияПоказателейОтчетов4.Показатель = втПоказателиОтчетов.ПоказательОтчета
	                     |			И (втПоказателиОтчетов.НомерАналитикиРаскрытия = 4)
	                     |			И (ЗначенияПоказателейОтчетов4.Значение <> 0)
	                     |
	                     |ОБЪЕДИНИТЬ ВСЕ
	                     |
	                     |ВЫБРАТЬ
	                     |	втПоказателиОтчетов.ПоказательСтрока,
	                     |	ЗначенияПоказателейОтчетов3.Аналитика1,
	                     |	ЗначенияПоказателейОтчетов3.Аналитика2,
	                     |	ЗначенияПоказателейОтчетов3.Аналитика3,
	                     |	NULL,
	                     |	NULL,
	                     |	NULL,
	                     |	ЗначенияПоказателейОтчетов3.Значение,
	                     |	втПоказателиОтчетов.СтатьяДоходовИРасходов,
	                     |	втПоказателиОтчетов.ПоказательОтчета,
	                     |	втПоказателиОтчетов.ПоказательКолонка,
	                     |	втПоказателиОтчетов.НомерАналитикиРаскрытия,
	                     |	втВерсииБаза.Версия,
	                     |	втВерсииБаза.Сценарий,
	                     |	втВерсииБаза.Проект,
	                     |	втВерсииБаза.ПериодОтчета,
	                     |	втВерсииБаза.Валюта,
	                     |	втВерсииБаза.Организация,
	                     |	ЗначенияПоказателейОтчетов3.ЗначениеВалюта,
	                     |	ЗначенияПоказателейОтчетов3.АналитикаВалюта
	                     |ИЗ
	                     |	РегистрСведений.ЗначенияПоказателейОтчетов3 КАК ЗначенияПоказателейОтчетов3
	                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсииБаза0 КАК втВерсииБаза
	                     |		ПО ЗначенияПоказателейОтчетов3.Версия = втВерсииБаза.Версия
	                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчетов КАК втПоказателиОтчетов
	                     |		ПО ЗначенияПоказателейОтчетов3.Показатель = втПоказателиОтчетов.ПоказательОтчета
	                     |			И (втПоказателиОтчетов.НомерАналитикиРаскрытия = 3)
	                     |			И (ЗначенияПоказателейОтчетов3.Значение <> 0)
	                     |
	                     |ОБЪЕДИНИТЬ ВСЕ
	                     |
	                     |ВЫБРАТЬ
	                     |	втПоказателиОтчетов.ПоказательСтрока,
	                     |	ЗначенияПоказателейОтчетов2.Аналитика1,
	                     |	ЗначенияПоказателейОтчетов2.Аналитика2,
	                     |	NULL,
	                     |	NULL,
	                     |	NULL,
	                     |	NULL,
	                     |	ЗначенияПоказателейОтчетов2.Значение,
	                     |	втПоказателиОтчетов.СтатьяДоходовИРасходов,
	                     |	втПоказателиОтчетов.ПоказательОтчета,
	                     |	втПоказателиОтчетов.ПоказательКолонка,
	                     |	втПоказателиОтчетов.НомерАналитикиРаскрытия,
	                     |	втВерсииБаза.Версия,
	                     |	втВерсииБаза.Сценарий,
	                     |	втВерсииБаза.Проект,
	                     |	втВерсииБаза.ПериодОтчета,
	                     |	втВерсииБаза.Валюта,
	                     |	втВерсииБаза.Организация,
	                     |	ЗначенияПоказателейОтчетов2.ЗначениеВалюта,
	                     |	ЗначенияПоказателейОтчетов2.АналитикаВалюта
	                     |ИЗ
	                     |	РегистрСведений.ЗначенияПоказателейОтчетов2 КАК ЗначенияПоказателейОтчетов2
	                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсииБаза0 КАК втВерсииБаза
	                     |		ПО ЗначенияПоказателейОтчетов2.Версия = втВерсииБаза.Версия
	                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчетов КАК втПоказателиОтчетов
	                     |		ПО ЗначенияПоказателейОтчетов2.Показатель = втПоказателиОтчетов.ПоказательОтчета
	                     |			И (втПоказателиОтчетов.НомерАналитикиРаскрытия = 2)
	                     |			И (ЗначенияПоказателейОтчетов2.Значение <> 0)
	                     |
	                     |ОБЪЕДИНИТЬ ВСЕ
	                     |
	                     |ВЫБРАТЬ
	                     |	втПоказателиОтчетов.ПоказательСтрока,
	                     |	ЗначенияПоказателейОтчетов1.Аналитика1,
	                     |	NULL,
	                     |	NULL,
	                     |	NULL,
	                     |	NULL,
	                     |	NULL,
	                     |	ЗначенияПоказателейОтчетов1.Значение,
	                     |	втПоказателиОтчетов.СтатьяДоходовИРасходов,
	                     |	втПоказателиОтчетов.ПоказательОтчета,
	                     |	втПоказателиОтчетов.ПоказательКолонка,
	                     |	втПоказателиОтчетов.НомерАналитикиРаскрытия,
	                     |	втВерсииБаза.Версия,
	                     |	втВерсииБаза.Сценарий,
	                     |	втВерсииБаза.Проект,
	                     |	втВерсииБаза.ПериодОтчета,
	                     |	втВерсииБаза.Валюта,
	                     |	втВерсииБаза.Организация,
	                     |	ЗначенияПоказателейОтчетов1.ЗначениеВалюта,
	                     |	ЗначенияПоказателейОтчетов1.АналитикаВалюта
	                     |ИЗ
	                     |	РегистрСведений.ЗначенияПоказателейОтчетов1 КАК ЗначенияПоказателейОтчетов1
	                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсииБаза0 КАК втВерсииБаза
	                     |		ПО ЗначенияПоказателейОтчетов1.Версия = втВерсииБаза.Версия
	                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчетов КАК втПоказателиОтчетов
	                     |		ПО ЗначенияПоказателейОтчетов1.Показатель = втПоказателиОтчетов.ПоказательОтчета
	                     |			И (втПоказателиОтчетов.НомерАналитикиРаскрытия = 1)
	                     |			И (ЗначенияПоказателейОтчетов1.Значение <> 0)
	                     |
	                     |ОБЪЕДИНИТЬ ВСЕ
	                     |
	                     |ВЫБРАТЬ
	                     |	втПоказателиОтчетов.ПоказательСтрока,
	                     |	NULL,
	                     |	NULL,
	                     |	NULL,
	                     |	NULL,
	                     |	NULL,
	                     |	NULL,
	                     |	ЗначенияПоказателейОтчетовСинтетика.Значение,
	                     |	втПоказателиОтчетов.СтатьяДоходовИРасходов,
	                     |	втПоказателиОтчетов.ПоказательОтчета,
	                     |	втПоказателиОтчетов.ПоказательКолонка,
	                     |	втПоказателиОтчетов.НомерАналитикиРаскрытия,
	                     |	втВерсииБаза.Версия,
	                     |	втВерсииБаза.Сценарий,
	                     |	втВерсииБаза.Проект,
	                     |	втВерсииБаза.ПериодОтчета,
	                     |	втВерсииБаза.Валюта,
	                     |	втВерсииБаза.Организация,
	                     |	NULL,
	                     |	NULL
	                     |ИЗ
	                     |	РегистрСведений.ЗначенияПоказателейОтчетовСинтетика КАК ЗначенияПоказателейОтчетовСинтетика
	                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсииБаза0 КАК втВерсииБаза
	                     |		ПО ЗначенияПоказателейОтчетовСинтетика.Версия = втВерсииБаза.Версия
	                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчетов КАК втПоказателиОтчетов
	                     |		ПО ЗначенияПоказателейОтчетовСинтетика.Показатель = втПоказателиОтчетов.ПоказательОтчета
	                     |			И (втПоказателиОтчетов.НомерАналитикиРаскрытия = 0
	                     |				ИЛИ &ПолучитьСинтетику)
	                     |			И (ЗначенияПоказателейОтчетовСинтетика.Значение <> 0)
	                     |
	                     |ОБЪЕДИНИТЬ ВСЕ
	                     |
	                     |ВЫБРАТЬ
	                     |	втПоказателиОтчетов.ПоказательСтрока,
	                     |	NULL,
	                     |	NULL,
	                     |	NULL,
	                     |	NULL,
	                     |	NULL,
	                     |	NULL,
	                     |	ЗначенияПоказателейОтчетовВалютные.Значение,
	                     |	втПоказателиОтчетов.СтатьяДоходовИРасходов,
	                     |	втПоказателиОтчетов.ПоказательОтчета,
	                     |	втПоказателиОтчетов.ПоказательКолонка,
	                     |	втПоказателиОтчетов.НомерАналитикиРаскрытия,
	                     |	втВерсииБаза.Версия,
	                     |	втВерсииБаза.Сценарий,
	                     |	втВерсииБаза.Проект,
	                     |	втВерсииБаза.ПериодОтчета,
	                     |	втВерсииБаза.Валюта,
	                     |	втВерсииБаза.Организация,
	                     |	ЗначенияПоказателейОтчетовВалютные.ЗначениеВалюта,
	                     |	ЗначенияПоказателейОтчетовВалютные.АналитикаВалюта
	                     |ИЗ
	                     |	РегистрСведений.ЗначенияПоказателейОтчетовВалютные КАК ЗначенияПоказателейОтчетовВалютные
	                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсииБаза0 КАК втВерсииБаза
	                     |		ПО ЗначенияПоказателейОтчетовВалютные.Версия = втВерсииБаза.Версия
	                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчетов КАК втПоказателиОтчетов
	                     |		ПО ЗначенияПоказателейОтчетовВалютные.Показатель = втПоказателиОтчетов.ПоказательОтчета
	                     |			И (ЗначенияПоказателейОтчетовВалютные.Значение <> 0)
	                     |;
	                     |
	                     |////////////////////////////////////////////////////////////////////////////////
	                     |ВЫБРАТЬ
	                     |	втЗначения.Аналитика1 КАК Аналитика1,
	                     |	втЗначения.Аналитика2 КАК Аналитика2,
	                     |	втЗначения.Аналитика3 КАК Аналитика3,
	                     |	втЗначения.ВерсияОрганизация КАК Организация,
	                     |	втЗначения.ВерсияСценарий КАК Сценарий,
	                     |	втЗначения.ВерсияПериодОтчета КАК Период,
	                     |	втЗначения.ВерсияПроект КАК Проект,
	                     |	втЗначения.ПоказательОтчета КАК ПоказательОтчета,
	                     |	втЗначения.СтатьяДоходовИРасходов КАК СтатьяДоходовИРасходов,
	                     |	втЗначения.Значение КАК Значение,
	                     |	втЗначения.ВерсияПериодОтчета.ДатаНачала КАК ДатаНачала,
	                     |	втЗначения.СтатьяДоходовИРасходов.РассчитыватьДДСПоАналитике1 КАК РасчитыватьДДСПоАналитике1,
	                     |	втЗначения.СтатьяДоходовИРасходов.РассчитыватьДДСПоАналитике2 КАК РасчитыватьДДСПоАналитике2,
	                     |	втЗначения.СтатьяДоходовИРасходов.РассчитыватьДДСПоАналитике3 КАК РасчитыватьДДСПоАналитике3
	                     |ИЗ
	                     |	втЗначения КАК втЗначения";
	
	ЗапросДанные.УстановитьПараметр("СценарийБаза0",УправлениеПериодом.Сценарий);
	ЗапросДанные.УстановитьПараметр("ПериодОтчетаБаза0",ВыбранныеПериоды);
	ЗапросДанные.УстановитьПараметр("ПоказательОтчета",Показатели);
	ЗапросДанные.УстановитьПараметр("ПолучитьТолькоСинтетику",Ложь);
	ЗапросДанные.УстановитьПараметр("ПолучитьСинтетику",Ложь);
	
	РезультатДанные = ЗапросДанные.Выполнить().Выгрузить();
	
	ЗапросНастройки = Новый Запрос;
	ЗапросНастройки.Текст = "ВЫБРАТЬ
	                        |	НастройкиРасчетаСтатейДС.СтатьяБДР,
	                        |	НастройкиРасчетаСтатейДС.Организация,
	                        |	НастройкиРасчетаСтатейДС.Аналитика1,
	                        |	НастройкиРасчетаСтатейДС.Аналитика2,
	                        |	НастройкиРасчетаСтатейДС.Аналитика3,
	                        |	НастройкиРасчетаСтатейДС.СтатьяДДС,
	                        |	НастройкиРасчетаСтатейДС.Сценарий,
	                        |	НастройкиРасчетаСтатейДС.УсловиеОплаты,
	                        |	НастройкиРасчетаСтатейДС.ПоказательБДДС,
	                        |	НастройкиРасчетаСтатейДС.ПоказательБДР,
	                        |	НастройкиРасчетаСтатейДС.ПоказательБДДС.Владелец КАК ВидОтчета,
	                        |	НастройкиРасчетаСтатейДС.ПоказательБДДС.ГруппаРаскрытия.ВидАналитики1 КАК ВидАналитики1,
	                        |	НастройкиРасчетаСтатейДС.ПоказательБДДС.ГруппаРаскрытия.ВидАналитики2 КАК ВидАналитики2,
	                        |	НастройкиРасчетаСтатейДС.ПоказательБДДС.ГруппаРаскрытия.ВидАналитики3 КАК ВидАналитики3,
	                        |	НастройкиРасчетаСтатейДС.ПоказательБДДС.ГруппаРаскрытия КАК ГруппаРаскрытия
	                        |ИЗ
	                        |	РегистрСведений.НастройкиРасчетаСтатейДС КАК НастройкиРасчетаСтатейДС
	                        |ГДЕ
	                        |	НастройкиРасчетаСтатейДС.Сценарий = &Сценарий";
							   
	ЗапросНастройки.УстановитьПараметр("Сценарий",УправлениеПериодом.Сценарий);
    РезультатНастройки = ЗапросНастройки.Выполнить().Выгрузить();
	
	
	РасчетПоказателейОбъект = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
	РасчетПоказателейОбъект.ВалютаОтображения = Константы.ВалютаУправленческогоУчета.Получить();
	РасчетПоказателейОбъект.РассчитыватьЗависимые = Константы.АвтоматическийПересчетЗависимыхПоказателей.Получить();	

	ПредварительнаяТаблица = РасчетПоказателейОбъект.ТаблицаИзмененныхПоказателей.Выгрузить();
	
	
	Для Каждого Стр Из  РезультатДанные Цикл
		
		СтруктураПоиска = Новый Структура;
		
		СтруктураПоиска.Вставить("СтатьяБДР",Стр.СтатьяДоходовИРасходов);
		СтруктураПоиска.Вставить("ПоказательБДР",Стр.ПоказательОтчета);

		
		Если Стр.РасчитыватьДДСПоАналитике1 Тогда
			СтруктураПоиска.Вставить("Аналитика1",Стр.Аналитика1);
		Иначе	
			СтруктураПоиска.Вставить("Аналитика1",Неопределено);
		КонецЕсли;
		
		Если Стр.РасчитыватьДДСПоАналитике2 Тогда
			СтруктураПоиска.Вставить("Аналитика2",Стр.Аналитика2);
		Иначе	
			СтруктураПоиска.Вставить("Аналитика2",Неопределено);
		КонецЕсли;

		Если Стр.РасчитыватьДДСПоАналитике3 Тогда
			СтруктураПоиска.Вставить("Аналитика3",Стр.Аналитика3);
		Иначе	
			СтруктураПоиска.Вставить("Аналитика3",Неопределено);
		КонецЕсли;

		Настройкирасчета = РезультатНастройки.НайтиСтроки(СтруктураПоиска);
		
		Если Настройкирасчета.Количество()=1 Тогда
			
			График =  РасчетГрафиковОперацийУХ.РассчитатьГрафикПоУсловиюОплаты(Настройкирасчета[0].УсловиеОплаты,Стр.ДатаНачала,Стр.Значение);
			
			Для Каждого стрГрафика Из График Цикл
				
				ПериодДляОплаты = ТаблицаПериодов.НайтиСтроки(Новый Структура("ДатаНачала",НачалоМесяца(стрГрафика.Дата)));
				
				Если ПериодДляОплаты.Количество() >0 Тогда
					
					РасчетПоказателейОбъект.ВидОтчета =Настройкирасчета[0].ВидОтчета;
					Нстр = ПредварительнаяТаблица.Добавить();
					
					
					Если  НЕ ЗначениеЗаполнено(Настройкирасчета[0].ГруппаРаскрытия) Тогда
						
						Нстр.Значение = стрГрафика.СуммаОплата;
						Нстр.Сценарий = УправлениеПериодом.Сценарий;
						Нстр.Организация = Стр.Организация;
						Нстр.ПериодОтчета = ПериодДляОплаты[0].Ссылка;
						Нстр.Проект = Стр.Проект;
						Нстр.ПоказательОтчета = Настройкирасчета[0].ПоказательБДДС;
						Нстр.СинтетическоеЗначение = Истина;
						
					Иначе
							
							Нстр.Значение = стрГрафика.СуммаОплата;
							Нстр.Сценарий = УправлениеПериодом.Сценарий;
							Нстр.Организация = Стр.Организация;
							Нстр.ПериодОтчета = ПериодДляОплаты[0].Ссылка;
							Нстр.Проект = Стр.Проект;
							Нстр.ПоказательОтчета = Настройкирасчета[0].ПоказательБДДС;
							Нстр.СинтетическоеЗначение = Ложь;
							                                                   	
							Если Не Настройкирасчета[0].ВидАналитики1.ТипЗначения = Неопределено Тогда
								Если ТипЗнч(Стр.Аналитика1) = ТипЗнч(Настройкирасчета[0].ВидАналитики1.ТипЗначения.ПривестиЗначение()) Тогда
									Нстр.Аналитика1 = Стр.Аналитика1;	
								ИначеЕсли ТипЗнч(Стр.Аналитика2) = ТипЗнч(Настройкирасчета[0].ВидАналитики1.ТипЗначения.ПривестиЗначение())  Тогда
									Нстр.Аналитика1 = Стр.Аналитика2;	
								ИначеЕсли ТипЗнч(Стр.Аналитика3) = ТипЗнч(Настройкирасчета[0].ВидАналитики1.ТипЗначения.ПривестиЗначение())  Тогда
									Нстр.Аналитика1 = Стр.Аналитика3;	
								КонецЕсли;	
							КонецЕсли;
							
							Если Не Настройкирасчета[0].ВидАналитики2.ТипЗначения = Неопределено Тогда
								Если ТипЗнч(Стр.Аналитика1)		 = ТипЗнч(Настройкирасчета[0].ВидАналитики2.ТипЗначения.ПривестиЗначение()) Тогда
									Нстр.Аналитика2 = Стр.Аналитика1;	
								ИначеЕсли ТипЗнч(Стр.Аналитика2) = ТипЗнч(Настройкирасчета[0].ВидАналитики2.ТипЗначения.ПривестиЗначение())  Тогда
									Нстр.Аналитика2 = Стр.Аналитика2;	
								ИначеЕсли ТипЗнч(Стр.Аналитика3) = ТипЗнч(Настройкирасчета[0].ВидАналитики2.ТипЗначения.ПривестиЗначение())  Тогда
									Нстр.Аналитика2 = Стр.Аналитика3;	
								КонецЕсли;	
							КонецЕсли;
							
							Если Не Настройкирасчета[0].ВидАналитики3.ТипЗначения = Неопределено Тогда
								
								Если ТипЗнч(Стр.Аналитика1) = ТипЗнч(Настройкирасчета[0].ВидАналитики3.ТипЗначения.ПривестиЗначение()) Тогда
									Нстр.Аналитика3 = Стр.Аналитика1;	
								ИначеЕсли ТипЗнч(Стр.Аналитика2) = ТипЗнч(Настройкирасчета[0].ВидАналитики3.ТипЗначения.ПривестиЗначение())  Тогда
									Нстр.Аналитика3 = Стр.Аналитика2;	
								ИначеЕсли ТипЗнч(Стр.Аналитика3) = ТипЗнч(Настройкирасчета[0].ВидАналитики3.ТипЗначения.ПривестиЗначение())  Тогда
									Нстр.Аналитика3 = Стр.Аналитика3;	
								КонецЕсли;	
							КонецЕсли;
							
						КонецЕсли;	 
						
					КонецЕсли;	 
					
			КонецЦикла;	 
					
		КонецЕсли;	
		
		
	КонецЦикла;	
		
	ПредварительнаяТаблица.Свернуть("Аналитика1,Аналитика2,Аналитика3,Аналитика4,Аналитика5,Аналитика6,Организация,Сценарий,Проект,ПериодОтчета,ПоказательОтчета,АналитикаВалюта","Значение");
	
	РасчетПоказателейОбъект.ТаблицаИзмененныхПоказателей.Загрузить(ПредварительнаяТаблица);
	РасчетПоказателейОбъект.ЗаписатьЗначенияТаблицыПоказателей();
			
КонецПроцедуры


#КонецОбласти

#Область РаботаСРедактированиемСтрок

Функция ДобавитьШаблонНовойОбласти(ПолеТабличногоДокументаМакет,Расшифровка,КоординатаНиз,ДобавленнаяОбластьНиз,ВыбранноеЗначение) Экспорт
	
	СтруктураТаблицИнтерфейса 		= ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
    СтруктураФильтров 				= ПолучитьИзВременногоХранилища(АдресСтруктураФильтров);
	КэшРедактируемыхОбластей        = СтруктураТаблицИнтерфейса.КэшРедактируемыхОбластей;
    ДанныеРасшифровки               = ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровки);
			
	//Расшифровка текущей строки
	СтруктураАналитикТекущейОбласти = Новый Структура;	
	СоздатьОписаниеСтруктурыПолей(СтруктураАналитикТекущейОбласти,СтруктураТаблицИнтерфейса);	
	ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,Расшифровка,СтруктураТаблицИнтерфейса,СтруктураФильтров,СтруктураАналитикТекущейОбласти);
	
	Если НЕ ЗначениеЗаполнено(СтруктураАналитикТекущейОбласти.ПоказателиСтрокаОтчета) Тогда
		 Возврат "стСтрокаНеВыбрана";
	КонецЕсли;	
	
	Если КоординатаНиз>ПолеТабличногоДокументаМакет.ВысотаТаблицы Тогда   //Добавляем ниже уровня последней строки
		 КоординатаНиз = ПолеТабличногоДокументаМакет.ВысотаТаблицы+1;
		 ОтступТекущейОбласти = -2;
	Иначе	 
		 ОтступТекущейОбласти = ПолеТабличногоДокументаМакет.Область(КоординатаНиз,1,КоординатаНиз,1).Отступ;
	КонецЕсли;	
			
	КодТекущейАналитики =  СтруктураАналитикТекущейОбласти.КодРесурса;
	
	//Относительно текущей структуры таблицы, получаем  добавляемые аналитики для текущей позиции
	ТабДобавляемыхАналитик = ПолучитьЗависимыеАналитики(СтруктураТаблицИнтерфейса,СтруктураАналитикТекущейОбласти);
	
	Если ТабДобавляемыхАналитик.Количество() = 0 Тогда
		 Возврат "";
	ИначеЕсли НЕ ТабДобавляемыхАналитик[0].Редактируется Тогда	 
		 Возврат "";
	КонецЕсли;	

	КодДобавляемойАналитики = СтрЗАменить(ТабДобавляемыхАналитик[0].Код,"Фильтр_",""); 
	
	ИзменятьШаблонВсегда = Ложь;
	Если КодДобавляемойАналитики = "Организации" ИЛИ КодДобавляемойАналитики = "Проекты" И ЗначениеЗАполнено(ВыбранноеЗначение) Тогда
		 ИзменятьШаблонВсегда = Истина;
	КонецЕсли;	
		
	Если КодДобавляемойАналитики = КодТекущейАналитики Тогда 
		//Добавляем шаблон новой строки в текущую группировку. Получаем ее имя,добавляем в конец группы, увеличиваем диапазон групп на +1 	
		ШаблонМакетаОбласти = Неопределено;
		ТзОбласти = ПолучитьОбластиВхождения(ПолеТабличногоДокументаМакет,КоординатаНиз);
		ТзОбласти.Сортировать("НизОбласти,ВерхОбласти Убыв");

		Если НЕ ИзменятьШаблонВсегда Тогда	
			КэшТекущегоШаблона = КэшРедактируемыхОбластей.НайтиСтроки(Новый Структура("ИмяОбласти",ТзОбласти[0].ИмяОбласти));	
			Если КэшТекущегоШаблона.Количество()=1 Тогда
				ШаблонМакетаОбласти = КэшТекущегоШаблона[0].ШаблонОбласти;
			КонецЕсли;			
		КонецЕсли;
		
		Если ШаблонМакетаОбласти = Неопределено Тогда	
			ШаблонМакетаОбласти = ПолучитьШаблонНовойОбласти(СтруктураАналитикТекущейОбласти,СтруктураТаблицИнтерфейса,СтруктураФильтров,ВыбранноеЗначение,ТабДобавляемыхАналитик,ОтступТекущейОбласти);	
			Нстр = КэшРедактируемыхОбластей.Добавить();
			Нстр.ИмяОбласти = ТзОбласти[0].ИмяОбласти;
			Нстр.ШаблонОбласти = ШаблонМакетаОбласти;	
		КонецЕсли;
		
		ВставитьШаблонОбласти(ПолеТабличногоДокументаМакет,ШаблонМакетаОбласти,КоординатаНиз,КэшРедактируемыхОбластей,ДобавленнаяОбластьНиз,ВыбранноеЗначение,КодТекущейАналитики);
		
	Иначе	
		//Добавляем шаблон новой строки в нижестоящую группировку. Получаем ее имя,добавляем в конец группы, увеличиваем диапазон групп на +1
		СтруктураАналитикСлудующейОбласти = Новый Структура;	
		СоздатьОписаниеСтруктурыПолей(СтруктураАналитикСлудующейОбласти,СтруктураТаблицИнтерфейса);	
		ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,ПолеТабличногоДокументаМакет.Область(КоординатаНиз+1,1,КоординатаНиз+1,1).Расшифровка,СтруктураТаблицИнтерфейса,СтруктураФильтров,СтруктураАналитикСлудующейОбласти);
	
		КодНижестоящейАналитики =  СтруктураАналитикСлудующейОбласти.КодРесурса;
		
		Если КодНижестоящейАналитики = КодДобавляемойАналитики Тогда  // Уже есть именованая область - добавляем в нее
			
			ШаблонМакетаОбласти = Неопределено;
			ТзОбласти = ПолучитьОбластиВхождения(ПолеТабличногоДокументаМакет,КоординатаНиз+1);
			ТзОбласти.Сортировать("НизОбласти,ВерхОбласти Убыв");
			
			Если НЕ ИзменятьШаблонВсегда Тогда
				КэшТекущегоШаблона = КэшРедактируемыхОбластей.НайтиСтроки(Новый Структура("ИмяОбласти",ТзОбласти[0].ИмяОбласти));
				Если КэшТекущегоШаблона.Количество()=1 Тогда
					ШаблонМакетаОбласти = КэшТекущегоШаблона[0].ШаблонОбласти;
				КонецЕсли;		
			КонецЕсли;
			
			Если ШаблонМакетаОбласти = Неопределено Тогда	
				ШаблонМакетаОбласти = ПолучитьШаблонНовойОбласти(СтруктураАналитикТекущейОбласти,СтруктураТаблицИнтерфейса,СтруктураФильтров,ВыбранноеЗначение,ТабДобавляемыхАналитик,ОтступТекущейОбласти+2);				
				Нстр = КэшРедактируемыхОбластей.Добавить();
				Нстр.ИмяОбласти = ТзОбласти[0].ИмяОбласти;
				Нстр.ШаблонОбласти = ШаблонМакетаОбласти;			
				ИмяНовойОбласти =  "ОбластьСтроки_"+Новый УникальныйИдентификатор;
			КонецЕсли;
			
			ВставитьШаблонОбласти(ПолеТабличногоДокументаМакет,ШаблонМакетаОбласти,КоординатаНиз+1,КэшРедактируемыхОбластей,ДобавленнаяОбластьНиз,ВыбранноеЗначение,КодНижестоящейАналитики);	
			ВысотаОбластиМакета = ШаблонМакетаОбласти.ВысотаТаблицы - ШаблонМакетаОбласти.ФиксацияСверху;
			
		Иначе	// Добавялем новую область	
			Если ШаблонМакетаОбласти = Неопределено Тогда		
				ШаблонМакетаОбласти = ПолучитьШаблонНовойОбласти(СтруктураАналитикТекущейОбласти,СтруктураТаблицИнтерфейса,СтруктураФильтров,ВыбранноеЗначение,ТабДобавляемыхАналитик,ОтступТекущейОбласти+2);				
				ИмяНовойОбласти =  "ОбластьСтроки_"+Новый УникальныйИдентификатор;
				Нстр = КэшРедактируемыхОбластей.Добавить();
				Нстр.ИмяОбласти = ИмяНовойОбласти;
				Нстр.ШаблонОбласти = ШаблонМакетаОбласти;	
			КонецЕсли;
			
			ВысотаОбластиМакета = ШаблонМакетаОбласти.ВысотаТаблицы - ШаблонМакетаОбласти.ФиксацияСверху;			
			ВставитьШаблонОбласти(ПолеТабличногоДокументаМакет,ШаблонМакетаОбласти,КоординатаНиз,КэшРедактируемыхОбластей,ДобавленнаяОбластьНиз,ВыбранноеЗначение,КодДобавляемойАналитики,Истина,ИмяНовойОбласти);
			
		КонецЕсли;			
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

Функция СкопироватьШаблонНовойОбласти(ПолеТабличногоДокументаМакет,Расшифровка,КоординатаНиз,ДобавленнаяОбластьНиз) Экспорт
	
	СтруктураТаблицИнтерфейса 		= ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
    СтруктураФильтров 				= ПолучитьИзВременногоХранилища(АдресСтруктураФильтров);
	КэшРедактируемыхОбластей        = СтруктураТаблицИнтерфейса.КэшРедактируемыхОбластей;
    ДанныеРасшифровки               = ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровки);
		
	Если Расшифровка = Неопределено Тогда
		  Возврат "стСтрокаНеВыбрана";
	КонецЕсли;	
	
	//Расшифровка текущей строки
	СтруктураАналитикТекущейОбласти = Новый Структура;	
	СоздатьОписаниеСтруктурыПолей(СтруктураАналитикТекущейОбласти,СтруктураТаблицИнтерфейса);	
	ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,Расшифровка,СтруктураТаблицИнтерфейса,СтруктураФильтров,СтруктураАналитикТекущейОбласти);
	
	Если НЕ ЗначениеЗаполнено(СтруктураАналитикТекущейОбласти.ПоказателиСтрокаОтчета) Тогда
		 Возврат "стСтрокаНеВыбрана";
	КонецЕсли;	
	
	ОтступТекущейОбласти = ПолеТабличногоДокументаМакет.Область(КоординатаНиз,1,КоординатаНиз,1).Отступ;
		
	КодТекущейАналитики =  СтруктураАналитикТекущейОбласти.КодРесурса;
	
	//Относительно текущей структуры таблицы, получаем  добавляемые аналитики для текущей позиции
	ТабДобавляемыхАналитик = ПолучитьЗависимыеАналитики(СтруктураТаблицИнтерфейса,СтруктураАналитикТекущейОбласти,Истина);
	
	Если ТабДобавляемыхАналитик.Количество() = 0 Тогда
		 Возврат "";
	КонецЕсли;	

	КодДобавляемойАналитики = СтрЗАменить(ТабДобавляемыхАналитик[0].Код,"Фильтр_",""); 
	
	Если НЕ ТабДобавляемыхАналитик[0].Редактируется Тогда
		  Возврат "";
	КонецЕсли;	
	
	Если КодДобавляемойАналитики = КодТекущейАналитики Тогда 
		//Добавляем шаблон новой строки в текущую группировку. Получаем ее имя,добавляем в конец группы, увеличиваем диапазон групп на +1 
				
		ШаблонМакетаОбласти = ПолеТабличногоДокументаМакет.ПолучитьОбласть(КоординатаНиз,1,КоординатаНиз,ПолеТабличногоДокументаМакет.ШиринаТаблицы);	
		//Форматируем расшифровки
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДокументРезультат",ШаблонМакетаОбласти);
		СтруктураПараметров.Вставить("СтруктураТаблицИнтерфейса",СтруктураТаблицИнтерфейса);
		СтруктураПараметров.Вставить("СтруктураФильтров",СтруктураФильтров);
		СтруктураПараметров.Вставить("СтруктураАналитикТекущейОбласти",СтруктураАналитикТекущейОбласти);
		СтруктураПараметров.Вставить("ДанныеРасшифровки",ДанныеРасшифровки);
		СтруктураПараметров.Вставить("Отступ",ОтступТекущейОбласти);
		СтруктураПараметров.Вставить("ТекущееЗначениеРесурса",Неопределено);
		СтруктураПараметров.Вставить("ПолеИмя",Неопределено);
			
		ПреобразоватьРасшифровкуСКДВСтруктуру(СтруктураПараметров,Истина);

		ВставитьШаблонОбласти(ПолеТабличногоДокументаМакет,ШаблонМакетаОбласти,КоординатаНиз,КэшРедактируемыхОбластей,ДобавленнаяОбластьНиз);	
	Иначе	
					
		ТзОбласти = ПолучитьОбластиВхождения(ПолеТабличногоДокументаМакет,КоординатаНиз+1);		
		ШаблонМакетаОбласти = ПолеТабличногоДокументаМакет.ПолучитьОбласть(КоординатаНиз,1,ТзОбласти[0].НизОбласти,ПолеТабличногоДокументаМакет.ШиринаТаблицы);
		
		//Форматируем расшифровки
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДокументРезультат",ШаблонМакетаОбласти);
		СтруктураПараметров.Вставить("СтруктураТаблицИнтерфейса",СтруктураТаблицИнтерфейса);
		СтруктураПараметров.Вставить("СтруктураФильтров",СтруктураФильтров);
		СтруктураПараметров.Вставить("СтруктураАналитикТекущейОбласти",СтруктураАналитикТекущейОбласти);
		СтруктураПараметров.Вставить("ДанныеРасшифровки",ДанныеРасшифровки);
		СтруктураПараметров.Вставить("Отступ",ОтступТекущейОбласти);
		СтруктураПараметров.Вставить("ТекущееЗначениеРесурса",Неопределено);
		СтруктураПараметров.Вставить("ПолеИмя",Неопределено);
			
		ПреобразоватьРасшифровкуСКДВСтруктуру(СтруктураПараметров,Истина);

		ВставитьШаблонОбласти(ПолеТабличногоДокументаМакет,ШаблонМакетаОбласти,КоординатаНиз,КэшРедактируемыхОбластей,ДобавленнаяОбластьНиз);			
	КонецЕсли;
	
	Возврат Истина;
				
КонецФункции

Функция ПолучитьОбластиВхождения(ПолеТабличногоДокументаМакет,ТекущаяКоордината)
	
	ТзОбласти = Новый ТаблицаЗначений;
	ТзОбласти.Колонки.Добавить("ИмяОбласти",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	ТзОбласти.Колонки.Добавить("НизОбласти",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));
	ТзОбласти.Колонки.Добавить("ВерхОбласти",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));
	
	Для Каждого Обл Из ПолеТабличногоДокументаМакет.Области Цикл
		
		Если Обл.Верх<=ТекущаяКоордината И Обл.Низ>=ТекущаяКоордината Тогда	
			нСтр = ТзОбласти.Добавить();
			нСтр.ИмяОбласти = Обл.Имя;
			нСтр.НизОбласти = Обл.Низ;
			нСтр.ВерхОбласти = Обл.Верх;
		КонецЕсли;	
		
	КонецЦикла;	
	
	ТзОбласти.Сортировать("НизОбласти,ВерхОбласти");
	
	Если ТзОбласти.Количество() =0 Тогда
		
		нСтр = ТзОбласти.Добавить();
		нСтр.ИмяОбласти = "ПолеТабличногоДокументаМакет";
		нСтр.НизОбласти = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
			
	КонецЕсли;	
	
	Возврат ТзОбласти;
	
КонецФункции	
		
Функция ПолучитьЗависимыеАналитики(ТаблицыИнтерфейса,СтруктураАналитик,ТолькоРедактируемые = Истина,ТекущаяАналитика = Неопределено)
		
	СтруктураАналитикРасшифровок =  ТаблицыИнтерфейса.ТаблицаСтроки.СкопироватьКолонки();
	ДобавляемыеАналитики = ПолучитьСтруктуруНеобходимыхАналитик(СтруктураАналитик,ТаблицыИнтерфейса);
	//Расшифровок нет - добавляем текущуюю+все незаполненные.
	
	ДобавляемаяТекущаяАналитика = Неопределено;
	АналитикаПолучена = Ложь;
	Если ДобавляемыеАналитики.СтруктураНеЗаполненныхСкрытыхАналитик.Количество() >0 Тогда		
		СписокВыбораАналитик = СтруктураАналитикРасшифровок.ВыгрузитьКолонку("Наименование");
		Возврат СтруктураАналитикРасшифровок;
	КонецЕсли;

	//Исключим аналитики в колонках
	МассивУдаляемых = Новый Массив();
	Для Каждого СтрАналитика Из ТаблицыИнтерфейса.ТаблицаКолонки Цикл
		Если ДобавляемыеАналитики.НеиспользованныеОбязательныеАналитики.Свойство(СтрЗаменить(СтрАналитика.Код,"Фильтр_",""))  Тогда
			МассивУдаляемых.Добавить(СтрЗаменить(СтрАналитика.Код,"Фильтр_",""));	
		КонецЕсли;
	КонецЦикла;			
	
	Для Каждого Стр Из МассивУдаляемых Цикл
		ДобавляемыеАналитики.НеиспользованныеОбязательныеАналитики.Удалить(Стр);
	КонецЦикла;		
		
	//Находимся на последнем уровне - смотрим можно ли редактирвать текущую аналитику
	Если ДобавляемыеАналитики.НеиспользованныеОбязательныеАналитики.Количество() = 0 Тогда
		
		СтрокаТекущейАналитики = ТаблицыИнтерфейса.ТаблицаСтроки.НайтиСтроки(Новый Структура("Код","Фильтр_"+СтруктураАналитик.КодРесурса));
		Если СтрокаТекущейАналитики.Количество()=1 Тогда
			Если  СтрокаТекущейАналитики[0].Редактируется Тогда
				нАналитика = СтруктураАналитикРасшифровок.Добавить();
				ЗаполнитьЗначенияСвойств(нАналитика,СтрокаТекущейАналитики[0]);					
			КонецЕсли;			
			Возврат СтруктураАналитикРасшифровок;	
		КонецЕсли;		
	КонецЕсли;	
	
	Для Каждого СтрАналитика Из ТаблицыИнтерфейса.ТаблицаСтроки Цикл
		Если ДобавляемыеАналитики.НеиспользованныеОбязательныеАналитики.Свойство(СтрЗаменить(СтрАналитика.Код,"Фильтр_","")) И НЕ АналитикаПолучена  Тогда
			
			Если  НЕ СтрАналитика.Код = ТекущаяАналитика Тогда
				нАналитика = СтруктураАналитикРасшифровок.Добавить();
				ЗаполнитьЗначенияСвойств(нАналитика,СтрАналитика);			
				АналитикаПолучена = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;				
	
	Возврат СтруктураАналитикРасшифровок;
	
КонецФункции	

Функция ПолучитьШаблонНовойОбласти(СтруктураАналитикТекущейОбласти,СтруктураТаблицИнтерфейса,СтруктураФильтров,ВыбранноеЗначение,СтруктураАналитикРасшифровок,Отступ)
	
	КэшРедактируемыхОбластей        = СтруктураТаблицИнтерфейса.КэшРедактируемыхОбластей;
	ПолеИмя = СтрЗаменить(СтруктураАналитикРасшифровок[0].Код,"Фильтр_","");
	ПолеПустоеЗначение = Новый ОписаниеТипов(СтруктураАналитикРасшифровок[0].ТипСтрока);
	ПолеПустоеЗначение = ПолеПустоеЗначение.ПривестиЗначение(Неопределено);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПоказателиСтрокаОтчета",СтруктураАналитикТекущейОбласти.ПоказателиСтрокаОтчета);
	
	Если ВыбранноеЗначение = Неопределено Тогда
		 ПолеЗначение = ПолеПустоеЗначение;
	Иначе	 
		 ПолеЗначение = ВыбранноеЗначение;
	КонецЕсли;	
	
	ИндексТекущейАналитики =  СтруктураТаблицИнтерфейса.ТаблицаСтроки.НайтиСтроки(Новый Структура("Код","Фильтр_"+ПолеИмя))[0];
	АналитикиРаскрытия 		= СтруктураТаблицИнтерфейса.КэшАналитикПоказателей.НайтиСтроки(Новый Структура("Строка",СтруктураАналитикТекущейОбласти.ПоказателиСтрокаОтчета))[0];
	
	НижестоящаяАналитика = Неопределено;
	ФлНижестоящей = Ложь;
	Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаСтроки Цикл		
		Если Стр  =  ИндексТекущейАналитики Тогда
			 ФлНижестоящей = Истина;
			 Продолжить;
		КонецЕсли;		
		Если ФлНижестоящей Тогда	
			Для Инд=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				Если "Фильтр_"+АналитикиРаскрытия["Аналитика"+Инд] = Стр.Код Тогда
					 НижестоящаяАналитика = Стр;
					 Прервать;
					 Прервать;
				КонецЕсли;				
			КонецЦикла;		
		КонецЕсли;		
	КонецЦикла;	
	
	Если НижестоящаяАналитика = Неопределено Тогда  //Эта аналитика последняя - состав группы определять не надо
		ТЗСтрок=  СводнаяТаблицаУХ.ПолучитьСоставСтрокиАналитики(Бланк,СтруктураАналитикТекущейОбласти,СтруктураТаблицИнтерфейса,СтруктураФильтров,Ложь); 
		Для Каждого сСтр Из ТЗСтрок Цикл
			сСтр[ПолеИмя] = ПолеПустоеЗначение;
		КонецЦикла;		
	ИначеЕсли НижестоящаяАналитика.Редактируется Тогда //Следующая аналитика - редактируемая - состав группы получать не надо
		ТЗСтрок=  СводнаяТаблицаУХ.ПолучитьСоставСтрокиАналитики(Бланк,СтруктураАналитикТекущейОбласти,СтруктураТаблицИнтерфейса,СтруктураФильтров,Ложь);
		Для Каждого сСтр Из ТЗСтрок Цикл
			сСтр[ПолеИмя] = ПолеПустоеЗначение;
		КонецЦикла;			
	Иначе
		СтруктураОтбора.Вставить(ПолеИмя,ПолеЗначение); //Получаем возможный состав группы
		ТЗСтрок=  СводнаяТаблицаУХ.ПолучитьСоставСтрокиАналитики(Бланк,СтруктураАналитикТекущейОбласти,СтруктураТаблицИнтерфейса,СтруктураФильтров,Истина).Скопировать(СтруктураОтбора);	
	КонецЕсли;	
			 		
	ТЗКолонок	= ПолучитьИзВременногоХранилища(ТЗКолонокАдрес);

	СтруктураФильтровИтог = ПолучитьИзВременногоХранилища(АдресСтруктураФильтров);	
		
	ДоступныеАналитики = 		СтруктураТаблицИнтерфейса.ДоступныеАналитики;
	КэшАналитикПоказателей = 	СтруктураТаблицИнтерфейса.КэшАналитикПоказателей;;
	ВыбранныеПоказатели =  		СтруктураТаблицИнтерфейса.ВыбранныеПоказатели;
	НастройкиПолейД =   		СтруктураТаблицИнтерфейса.ДоступныеПоля;
	НастройкиРасчетаОтклонений = Неопределено;
					
	ТаблицаСтроки =    СтруктураТаблицИнтерфейса.ТаблицаСтроки;
	ТаблицаКолонки =   СтруктураТаблицИнтерфейса.ТаблицаКолонки;
	ТаблицаСтраницы =  СтруктураТаблицИнтерфейса.ТаблицаСтраницы;		
			
	ДополнитьОтклонениями = Ложь;	
	СхемаСКДЭталон=ПолучитьИзВременногоХранилища(ОкончательнаяСКДАдрес);

	СхемаСКД=Новый СхемаКомпоновкиДанных;
	НовыйИстчник=СхемаСКД.ИсточникиДанных.Добавить();
	НовыйИстчник.Имя="Источник1";
	НовыйИстчник.ТипИсточникаДанных="Local";
   
	ВыбранныеРесурсы = СтруктураТаблицИнтерфейса.ДополнительныеПоля.Скопировать(Новый Структура("Расчетный,Использовать",Ложь,Истина));	
	ВыбранныеРесурсы_Структура = Новый Структура;
	
	НастройкиИспользуемыхРесурсов = СтруктураТаблицИнтерфейса.ДополнительныеПоля.Скопировать(Новый Структура("Использовать",Истина));
	
	////------------- Добавляем вычисляемые поля по ресурсам	
	СхемаСКДЭталон.ВычисляемыеПоля.Очистить();
    СхемаСКДЭталон.ПоляИтога.Очистить();
	СводнаяТаблицаУХ.СоздатьОписаниеПолейРесурсов(СтруктураТаблицИнтерфейса,ВыбранныеРесурсы_Структура,СхемаСКД,СхемаСКДЭталон,ОтображатьСуммыВДопВалютах);
		
	КоличествоЯчеек = 0;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктураФильтровИтог",СтруктураФильтровИтог);
	СтруктураПараметров.Вставить("СтруктураТаблицИнтерфейса",СтруктураТаблицИнтерфейса);
	СтруктураПараметров.Вставить("ВыбранныеРесурсы",ВыбранныеРесурсы);
	СтруктураПараметров.Вставить("ТЗСтрок",ТЗСтрок);
    СтруктураПараметров.Вставить("ТЗКолонок",ТЗКолонок);
    СтруктураПараметров.Вставить("ОтображатьСуммыВДопВалютах",ОтображатьСуммыВДопВалютах);
    СтруктураПараметров.Вставить("Периодичность",Периодичность);
    СтруктураПараметров.Вставить("РежимСравненияСБазой",РежимСравненияСБазой);
	СтруктураПараметров.Вставить("ТолькоМакет",Истина);
	СтруктураПараметров.Вставить("СтруктураАналитикТекущейОбласти",СтруктураАналитикТекущейОбласти);

	Результат = СводнаяТаблицаУХ.ПолучитьСводныеДанные(СтруктураПараметров);
	
	// 3 выводим предварительный макет...
	ВнешниеНаборыДанных=Новый Структура;
	ВнешниеНаборыДанных.Вставить("мПоказателиРаскрытия",Результат);
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[0].Значение=Неопределено;
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[0].Использование=Истина;
	
	НастройкиФинальнойСхемы = ПолучитьИзВременногоХранилища(ОкончательнаяСКДНастройкиАдрес);
	
	НастройкиСхемыСводнойТаблицы.Настройки.УсловноеОформление.Элементы.Очистить();
	НастройкиСхемыСводнойТаблицы.ЗагрузитьНастройки(НастройкиФинальнойСхемы);
		
	//Выводим окончательный макет
	ДокументРезультат=Новый ТабличныйДокумент;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
	кТаблицаСтроки = ТаблицаСтроки.СкопироватьКолонки();
	Для Каждого Стр Из ТаблицаСтроки Цикл	
		Если ТипЗнч(Стр.ТипСубконто) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные") Тогда		
			
			Если Стр.Код = "Фильтр_ДопВалюты" И ЗначениеЗаполнено(АналитикиРаскрытия.АналитикаВалюта)  Тогда
					нСтр = кТаблицаСтроки.Добавить();
					ЗаполнитьЗначенияСвойств(нСтр,Стр);	
					Продолжить;
			КонецЕсли;	
			Для Инд=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				Если "Фильтр_"+АналитикиРаскрытия["Аналитика"+Инд] = Стр.Код  Тогда
					нСтр = кТаблицаСтроки.Добавить();
					ЗаполнитьЗначенияСвойств(нСтр,Стр);	
				КонецЕсли;				
			КонецЦикла;	
		Иначе	
			нСтр = кТаблицаСтроки.Добавить();
			ЗаполнитьЗначенияСвойств(нСтр,Стр);	
		КонецЕсли;		
	КонецЦикла;	
		
	СводнаяТаблицаУХ.ПреобразоватьНастройкиКонечнойСхемы("Таблица",ВыбранныеРесурсы,НастройкиСхемыСводнойТаблицы.Настройки,кТаблицаСтроки,ТаблицаКолонки,ИерархияГруппировокСтрок,ИерархияГруппировокКолонок,НастройкиИспользуемыхРесурсов,ОтображатьСуммыВДопВалютах,
	ОтображатьТолькоИтогиПоПериодам,Периодичность);
	
	КэшАналитикПоказателейСТ = ПолучитьИзВременногоХранилища(КэшАналитикПоказателейСТАдрес);		
	Если СтруктураФильтров.Свойство("Фильтр_Показатели") Тогда
		ПоказательОтбор = СтруктураФильтров.Фильтр_Показатели;
	КонецЕсли;
	СводнаяТаблицаУХ.ОформитьУровниГруппировокПоказателией(КэшАналитикПоказателейСТ,НастройкиИспользуемыхРесурсов,НастройкиСхемыСводнойТаблицы.Настройки,СтруктураТаблицИнтерфейса,ПоказательОтбор,РежимОбратногоРаспределения,Периодичность);
		
	////////////// Установим  стандартное оформление для показателей и группировок
	СводнаяТаблицаУХ.УстановитьОформлениеГруппировокСТ(НастройкиСхемыСводнойТаблицы.Настройки,ТаблицаСтроки,Периодичность,РежимОбратногоРаспределения,НастройкиИспользуемыхРесурсов,РежимСтатусы);
	
	//Вычисляемые для правила обработки по умолчанию пометить зеленым
	Если СтруктураФильтровИтог.Свойство("Фильтр_Показатели") Тогда
		СводнаяТаблицаУХ.ОформитьВычисляемые(ВидОтчета,НастройкиСхемыСводнойТаблицы.Настройки,НастройкиИспользуемыхРесурсов,СтруктураФильтровИтог.Фильтр_Показатели);
	Иначе
		СводнаяТаблицаУХ.ОформитьВычисляемые(ВидОтчета,НастройкиСхемыСводнойТаблицы.Настройки,НастройкиИспользуемыхРесурсов);
	КонецЕсли;	
	
	//Несуществующие показатели пометить как [Х]
	Если СтруктураФильтровИтог.Свойство("Фильтр_Показатели") Тогда
		СводнаяТаблицаУХ.ОформитьНедоступные(ВидОтчета,НастройкиСхемыСводнойТаблицы.Настройки,НастройкиИспользуемыхРесурсов,КэшАналитикПоказателей,СтруктураФильтровИтог.Фильтр_Показатели);	
	Иначе	
		СводнаяТаблицаУХ.ОформитьНедоступные(ВидОтчета,НастройкиСхемыСводнойТаблицы.Настройки,НастройкиИспользуемыхРесурсов,КэшАналитикПоказателей);
	КонецЕсли;
	
	
	//Форматируем нечисловые
	Если СтруктураФильтровИтог.Свойство("Фильтр_Показатели") Тогда
		СводнаяТаблицаУХ.ОформитьНеЧисловые(ВидОтчета,НастройкиСхемыСводнойТаблицы.Настройки,НастройкиИспользуемыхРесурсов,КэшАналитикПоказателей,СтруктураФильтровИтог.Фильтр_Показатели);	
	Иначе	
		СводнаяТаблицаУХ.ОформитьНеЧисловые(ВидОтчета,НастройкиСхемыСводнойТаблицы.Настройки,НастройкиИспользуемыхРесурсов,КэшАналитикПоказателей);
	КонецЕсли;
		
	ВывестиВТаблицу(ДокументРезультат,СхемаСКДЭталон,ВнешниеНаборыДанных,НастройкиСхемыСводнойТаблицы,ВыбранныеРесурсы,НастройкиИспользуемыхРесурсов,ДанныеРасшифровки);
	
	//Форматируем расшифровки
	СтруктураПараметров = Новый Структура;
    СтруктураПараметров.Вставить("ДокументРезультат",ДокументРезультат);
	СтруктураПараметров.Вставить("СтруктураТаблицИнтерфейса",СтруктураТаблицИнтерфейса);
    СтруктураПараметров.Вставить("СтруктураФильтров",СтруктураФильтров);
    СтруктураПараметров.Вставить("СтруктураАналитикТекущейОбласти",СтруктураАналитикТекущейОбласти);
	СтруктураПараметров.Вставить("ДанныеРасшифровки",ДанныеРасшифровки);
	СтруктураПараметров.Вставить("Отступ",Отступ);
	СтруктураПараметров.Вставить("ТекущееЗначениеРесурса",ПолеЗначение);
    СтруктураПараметров.Вставить("ПолеИмя",ПолеИмя);
	
    ПреобразоватьРасшифровкуСКДВСтруктуру(СтруктураПараметров,Ложь);
	
	Возврат ДокументРезультат;
		
КонецФункции

Функция ВставитьШаблонОбласти(ПолеТабличногоДокументаМакет,ШаблонМакетаОбласти,КоординатаНачало,КэшРедактируемыхОбластей,ДобавленнаяОбластьНиз,ВыбранноеЗначение=Неопределено,КодТекущейАналитики=Неопределено,ЭтоНоваяОбласть=Ложь,ИмяНовойОбласти = "")
	
	ВысотаОбласти = (ШаблонМакетаОбласти.ВысотаТаблицы - ШаблонМакетаОбласти.ФиксацияСверху);
	ТзОбласти = ПолучитьОбластиВхождения(ПолеТабличногоДокументаМакет,КоординатаНачало);
	Если ЭтоНоваяОбласть Тогда	
		Если НЕ ТипЗнч(ПолеТабличногоДокументаМакет.Область(КоординатаНачало,1,КоординатаНачало,1).Расшифровка)= 
			Тип("ИдентификаторРасшифровкиКомпоновкиДанных")  Тогда
			Если ТзОбласти.Количество()>0 Тогда
				Если ТзОбласти[0].ВерхОбласти = 0 Тогда
					КоординатаНачалаОбласти = ПолеТабличногоДокументаМакет.ВысотаТаблицы+1;
				КонецЕсли;	
			Иначе	
				КоординатаНачалаОбласти = ПолеТабличногоДокументаМакет.ВысотаТаблицы+1;
			КонецЕсли;		
		Иначе	
			КоординатаНачалаОбласти = КоординатаНачало+1;			
		КонецЕсли;		
	Иначе	
		Если ТзОбласти.Количество()>0 Тогда
			КоординатаНачалаОбласти = ТзОбласти[0].НизОбласти+1;
		Иначе	
			КоординатаНачалаОбласти = ПолеТабличногоДокументаМакет.ВысотаТаблицы+1;
		КонецЕсли;
	КонецЕсли;
		
	ОбластьПриемник = ПолеТабличногоДокументаМакет.Область(КоординатаНачалаОбласти,0,КоординатаНачалаОбласти+(ВысотаОбласти-1),0); 
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Для Стр = ШаблонМакетаОбласти.ФиксацияСверху+1  По  ШаблонМакетаОбласти.ВысотаТаблицы Цикл
			ID = Новый УникальныйИдентификатор();
			Для Кол = 1 По  ШаблонМакетаОбласти.ШиринаТаблицы Цикл 	
				Если  ТипЗнч(ШаблонМакетаОбласти.Область(Стр,Кол,Стр,Кол).Расшифровка) = Тип("Структура") Тогда		  
					фСтруктра =   Новый ФиксированнаяСтруктура(ШаблонМакетаОбласти.Область(Стр,Кол,Стр,Кол).Расшифровка);
					СтруктураПолей = Новый Структура(фСтруктра);
					СтруктураПолей[КодТекущейАналитики] = ВыбранноеЗначение;
					Если Не ЗначениеЗаполнено(СтруктураПолей.ID) Тогда
						СтруктураПолей.ID = ID;
					КонецЕсли;
					ШаблонМакетаОбласти.Область(Стр,Кол,Стр,Кол).Расшифровка = СтруктураПолей;	
					Если  ШаблонМакетаОбласти.Область(Стр,Кол,Стр,Кол).Расшифровка["КодРесурса"] = КодТекущейАналитики Тогда
						ШаблонМакетаОбласти.Область(Стр,Кол,Стр,Кол).Текст = ВыбранноеЗначение;
					КонецЕсли;	  	  
				КонецЕсли;	 	
			КонецЦикла;
		КонецЦикла;		
	Иначе		
		Для Стр = ШаблонМакетаОбласти.ФиксацияСверху+1  По  ШаблонМакетаОбласти.ВысотаТаблицы Цикл
			ID = Новый УникальныйИдентификатор();
			Для Кол = 1 По  ШаблонМакетаОбласти.ШиринаТаблицы Цикл 	
				Если  ТипЗнч(ШаблонМакетаОбласти.Область(Стр,Кол,Стр,Кол).Расшифровка) = Тип("Структура") Тогда	  
					фСтруктра =   Новый ФиксированнаяСтруктура(ШаблонМакетаОбласти.Область(Стр,Кол,Стр,Кол).Расшифровка);
					СтруктураПолей = Новый Структура(фСтруктра);
					Если Не ЗначениеЗаполнено(СтруктураПолей.ID) Тогда
						СтруктураПолей.ID = ID;
					КонецЕсли;
					ШаблонМакетаОбласти.Область(Стр,Кол,Стр,Кол).Расшифровка = СтруктураПолей;	  	
				КонецЕсли;	 	
			КонецЦикла;
		КонецЦикла;		
	КонецЕсли;	 
	
	ОбластьИсточник = ШаблонМакетаОбласти.Область(ШаблонМакетаОбласти.ФиксацияСверху+1,0,ШаблонМакетаОбласти.ВысотаТаблицы,0);

	ПолеТабличногоДокументаМакет.ВставитьОбласть(ОбластьИсточник,ОбластьПриемник,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	ДобавленнаяОбластьНиз =  ОбластьПриемник.Низ;
	
	Если ЭтоНоваяОбласть Тогда
		 ОбластьПриемник.Имя = ИмяНовойОбласти;
		 ТзОбласти = ПолучитьОбластиВхождения(ПолеТабличногоДокументаМакет,КоординатаНачало);
	КонецЕсли;	
	
	//Перегруппируем области
	Для Каждого СтрОбл Из ТзОбласти Цикл
		Если СтрОбл.ИмяОбласти = "ПолеТабличногоДокументаМакет" Тогда
			 Продолжить;
		КонецЕсли;	
		Если СтрОбл.НизОбласти = ОбластьПриемник.Низ-ВысотаОбласти Тогда	
			Область = ПолеТабличногоДокументаМакет.Область(СтрОбл.ИмяОбласти);
			Область.Разгруппировать();
			Область.Имя = "";
			ПолеТабличногоДокументаМакет.Область(Область.Верх,0,Область.Низ+ВысотаОбласти,0).Сгруппировать();
			ПолеТабличногоДокументаМакет.Область(Область.Верх,0,Область.Низ+ВысотаОбласти,0).Имя = СтрОбл.ИмяОбласти;
			СтрОбл.НизОбласти = СтрОбл.НизОбласти+ВысотаОбласти;				
		КонецЕсли;	
	КонецЦикла;	
		
	//Отформатируем добавленную область
	ФорматироватьШаблонМакета(ПолеТабличногоДокументаМакет,ОбластьПриемник,ТзОбласти[0].НизОбласти);
	
КонецФункции

Функция ПолучитьТЗШаблонаОбласти(СтруктураТаблицИнтерфейса,ТЗСтрок,ТЗКолонок) Экспорт
		
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	&ПоляСтрок
	               |ПОМЕСТИТЬ втСтроки
	               |ИЗ
	               |	&ТЗСтрок КАК ТЗСТРОК
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&ПоляКолонок
	               |ПОМЕСТИТЬ втКолонки
	               |ИЗ
	               |	&ТЗКолонок КАК ТЗКолонок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&ПоляСреза
	               |ПОМЕСТИТЬ втСрез
	               |ИЗ
	               |	втСтроки КАК втСтроки
	               |		ПОЛНОЕ СОЕДИНЕНИЕ втКолонки КАК втКолонки
	               |		ПО (ИСТИНА)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	*
				   |ИЗ
	               |	втСрез КАК втОсновнойСрезДанных";

		
	ПоляСтрок = "";
	ПоляКолонок = "";
    ПоляСреза = "";
	
	Для Каждого имяКол Из ТЗСтрок.Колонки Цикл	
		ПоляСтрок = ПоляСтрок+"ТЗСТРОК."+имяКол.Имя+",";	
		ПоляСреза = ПоляСреза+"втСтроки."+имяКол.Имя+",";
	КонецЦикла;
	ПоляСтрок = ЛЕВ(ПоляСтрок,СтрДлина(ПоляСтрок)-1);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ПоляСтрок",ПоляСтрок);
	
	
	Для Каждого имяКол Из ТЗКолонок.Колонки Цикл	
		ПоляКолонок = ПоляКолонок+"ТЗКолонок."+имяКол.Имя+",";	
		ПоляСреза 	= ПоляСреза+"втКолонки."+имяКол.Имя+",";
	КонецЦикла;
	ПоляКолонок = ЛЕВ(ПоляКолонок,СтрДлина(ПоляКолонок)-1);		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ПоляКолонок",ПоляКолонок);	
	
	ПоляСреза	 = ЛЕВ(ПоляСреза,СтрДлина(ПоляСреза)-1);		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ПоляСреза",ПоляСреза);	


	СхемаЗапроса = Новый СхемаЗапроса;	
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);

	Для Каждого Пакет Из СхемаЗапроса.ПакетЗапросов Цикл		
		
		Если Пакет.ТаблицаДляПомещения = "" Тогда			
			
			НастройкиИспользуемыхРесурсов = СтруктураТаблицИнтерфейса.ДополнительныеПоля.Скопировать(Новый Структура("Использовать",Истина));
			
			Для Каждого СтрРесурс ИЗ НастройкиИспользуемыхРесурсов Цикл
				ПрефиксРесурса = "";
				Если СтрРесурс.Расчетный  Тогда 
					ПрефиксРесурса = "БАЗА_";		 
				ИначеЕсли НЕ СтрРесурс.Расчетный Тогда	 
					ПрефиксРесурса = "";
				КонецЕсли;
				
				ТекстДополнительныхПолей = "0";
				
				Пакет.Операторы[0].ВыбираемыеПоля.Добавить(ТекстДополнительныхПолей);		
				Пакет.Колонки[Пакет.Колонки.Количество()-1].Псевдоним = ПрефиксРесурса+СтрРесурс.КодПоказателя;	
				
				Если ПрефиксРесурса = "" И ОтображатьСуммыВДопВалютах Тогда
					Пакет.Операторы[0].ВыбираемыеПоля.Добавить(ТекстДополнительныхПолей);		
					Пакет.Колонки[Пакет.Колонки.Количество()-1].Псевдоним = ПрефиксРесурса+СтрРесурс.КодПоказателя+"_ЗначениеВалюта";	
				КонецЕсли;	
				
				
			КонецЦикла;	
			
			ИсточникБазаПериоды = Пакет.Операторы[0].Источники.Добавить("РегистрСведений.СтатусыПериодовСценариев","СтатусыПериодовСценариев");
			
			//Блокировка по периоду
			ТекстДополнительныхПолей ="
			| ВЫБОР КОГДА СтатусыПериодовСценариев.СтатусБлокировки IS NULL ТОГДА 10 ИНАЧЕ СтатусыПериодовСценариев.СтатусБлокировки КОНЕЦ";
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(ТекстДополнительныхПолей);
			Пакет.Колонки[Пакет.Колонки.Количество()-1].Псевдоним ="Блокировка_Периоды";

			
			СтрокаСоединенийПериоды = ПолучитьВыражениеСоединенияПоПериодам(СтруктураТаблицИнтерфейса);

			
			СтрокаСоединенийПериоды = СтрЗаменить(СтрокаСоединенийПериоды,"втОсновнойСрезДанных.Периоды","втОсновнойСрезДанных.ПериодыСвязанныйПериод");
			СтрокаСоединенийПериоды = Лев(СтрокаСоединенийПериоды,СтрДлина(СтрокаСоединенийПериоды)-2);

			Пакет.Операторы[0].Источники[0].Соединения.Добавить("СтатусыПериодовСценариев",СтрокаСоединенийПериоды);
		    Пакет.Операторы[0].Источники[0].Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
	
		КонецЕсли;	
		
	КонецЦикла;	

	
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	Запрос.УстановитьПараметр("ТЗСтрок",ТЗСтрок);
	Запрос.УстановитьПараметр("ТЗКолонок",ТЗКолонок);
	
	КоличествоЯчеек = ТЗСтрок.Количество()*ТЗКолонок.Количество();
				
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

Функция ПолучитьВыражениеСоединенияПоПериодам(СтруктураТаблицИнтерфейса)
	
	    СтрокаСоединенийПериоды = "";
	
		Для Каждого Аналитика Из СтруктураТаблицИнтерфейса.ТаблицаСтроки Цикл
			
			ИмяАналитики = СтрЗаменить(Аналитика.Код,"Фильтр_","");
			
			Если Аналитика.Код = "Фильтр_Отклонения"  Тогда
				Продолжить;
			КонецЕсли;
			Если Аналитика.Код = "Фильтр_Показатели_Колонки" Тогда
				Продолжить;
			КонецЕсли;
			Если Аналитика.Код = "Фильтр_Валюты" Тогда
				Продолжить;
			КонецЕсли;
			
			Если   Аналитика.Код = "Фильтр_Организации" ИЛИ Аналитика.Код = "Фильтр_Периоды"  ИЛИ Аналитика.Код = "Фильтр_Сценарии"  ТОГДА
				СтрокаСоединенийПериоды = СтрокаСоединенийПериоды + " (втОсновнойСрезДанных."+ИмяАналитики+
				" = "+"СтатусыПериодовСценариев."+ИмяАналитики+ 
				") И ";
			КонецЕсли;	
		КонецЦикла;
		
		Для Каждого Аналитика из СтруктураТаблицИнтерфейса.ТаблицаКолонки Цикл
			
			ИмяАналитики = СтрЗаменить(Аналитика.Код,"Фильтр_","");
			
			Если Аналитика.Код = "Фильтр_Отклонения"  Тогда
				Продолжить;
			КонецЕсли;
			Если Аналитика.Код = "Фильтр_Показатели_Колонки" Тогда
				Продолжить;
			КонецЕсли;
			Если Аналитика.Код = "Фильтр_Валюты" Тогда
				Продолжить;
			КонецЕсли;
			
			Если   Аналитика.Код = "Фильтр_Организации" ИЛИ Аналитика.Код = "Фильтр_Периоды"  ИЛИ Аналитика.Код = "Фильтр_Сценарии"  ТОГДА
				СтрокаСоединенийПериоды = СтрокаСоединенийПериоды + " (втОсновнойСрезДанных."+ИмяАналитики+
				" = "+"СтатусыПериодовСценариев."+ИмяАналитики+ 
				") И ";
			КОнецЕсли;
			
		КонецЦикла;
		
		Для Каждого Аналитика Из СтруктураТаблицИнтерфейса.ТаблицаСтраницы Цикл
			
			ИмяАналитики = СтрЗаменить(Аналитика.Код,"Фильтр_","");
			
			Если Аналитика.Код = "Фильтр_Отклонения"  Тогда
				Продолжить;
			КонецЕсли;
			Если Аналитика.Код = "Фильтр_Показатели_Колонки" Тогда
				Продолжить;
			КонецЕсли;
			Если Аналитика.Код = "Фильтр_Валюты" Тогда
				Продолжить;
			КонецЕсли;
			
			Если   Аналитика.Код = "Фильтр_Организации" ИЛИ Аналитика.Код = "Фильтр_Периоды"  ИЛИ Аналитика.Код = "Фильтр_Сценарии"  ТОГДА
				СтрокаСоединенийПериоды = СтрокаСоединенийПериоды + " (втОсновнойСрезДанных."+ИмяАналитики+
				" = "+"СтатусыПериодовСценариев."+ИмяАналитики+ 
				") И ";
			КонецЕсли;	
		КонецЦикла;

		Для Каждого Фильтр Из СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля Цикл 
			Если Найти(Фильтр.Код,"Фильтр_")>0  Тогда
				ИмяАналитики = СтрЗаменить(Фильтр.Код,"Фильтр_","");		
				Если Фильтр.Код = "Фильтр_Организации" ТОГДА  
					СтрокаСоединенийПериоды = СтрокаСоединенийПериоды + "(СтатусыПериодовСценариев.Организации IS NULL) И ";
				КонецЕсли;		
			КонецЕсли;							
		КонецЦикла;

		Возврат СтрокаСоединенийПериоды;
	
КонецФункции	

Процедура ЗаменитьСтрокиАналитик(НовоеЗначение,ПолеТабличногоДокументаМакет,ИзменяемаяОбластьНиз) Экспорт
	
	СтруктураТаблицИнтерфейса 	= ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
	СтруктураФильтров          	= ПолучитьИзВременногоХранилища(АдресСтруктураФильтров);
	ДанныеРасшифровки 			= ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровки);
	логИзмененныхПоказателей  	= ПолучитьИзВременногоХранилища(логИзмененныхПоказателейАдрес);
	
	ТекущаяЯчейкаЗаголовок = ПолеТабличногоДокументаМакет.Область(ИзменяемаяОбластьНиз,1,ИзменяемаяОбластьНиз,1);
	СтруктураАналитик = Новый Структура;
	СоздатьОписаниеСтруктурыПолей(СтруктураАналитик,СтруктураТаблицИнтерфейса);
	ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,ТекущаяЯчейкаЗаголовок.Расшифровка,СтруктураТаблицИнтерфейса,СтруктураФильтров,СтруктураАналитик);
	
	КодИзменяемойАналитики      = СтруктураАналитик.КодРесурса;
	
	ТабИзмененныхДанных = ПолучитьИзВременногоХранилища(логИзмененныхДанныхАдрес);
	
	//Проверим, является ли текущая аналитика редактируемой
	СвойстваАналитики = СтруктураТаблицИнтерфейса.ДоступныеАналитики.НайтиСтроки(Новый Структура("КодАналитики",СтруктураАналитик.КодРесурса));
	Если СвойстваАналитики.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли НЕ СвойстваАналитики[0].Редактируется Тогда	
		Возврат;
	КонецЕсли;	
	
	Если СтруктураАналитик[КодИзменяемойАналитики] = НовоеЗначение Тогда
		 Возврат;
	КонецЕсли;	
	
	//Относительно текущей структуры таблицы, получаем  вложенные аналитики для текущей позиции
	ТабВложенныхАналитик = ПолучитьЗависимыеАналитики(СтруктураТаблицИнтерфейса,СтруктураАналитик,,"Фильтр_"+СтруктураАналитик.КодРесурса);
	ЕстьВложенные = Ложь;
	Для Каждого СтрВложенные Из ТабВложенныхАналитик Цикл	
			Если НЕ СтрВложенные.Код =  "Фильтр_"+СтруктураАналитик.КодРесурса Тогда	
				ЕстьВложенные =  Истина;
			КонецЕсли;			
	КонецЦикла;
	
	//Получить имя и диапазон удаляемой области
	Если ЕстьВложенные Тогда
		
		//Смортим есть ли вложенные существующие аналитики 
		
		СлЯчейкаЗаголовок = ПолеТабличногоДокументаМакет.Область(ИзменяемаяОбластьНиз+1,1,ИзменяемаяОбластьНиз+1,1);
		СлСтруктураАналитик = Новый Структура;
		СоздатьОписаниеСтруктурыПолей(СлСтруктураАналитик,СтруктураТаблицИнтерфейса);
		ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,СлЯчейкаЗаголовок.Расшифровка,СтруктураТаблицИнтерфейса,СтруктураФильтров,СлСтруктураАналитик);
		
		Если НЕ ТабВложенныхАналитик[0].Код ="Фильтр_"+СлСтруктураАналитик.КодРесурса Тогда		
			КоординатаДиапазонаНачало = ИзменяемаяОбластьНиз;
			КоординатаДиапазонаОкончание = ИзменяемаяОбластьНиз;
		Иначе	
			ТзОбласти = ПолучитьОбластиВхождения(ПолеТабличногоДокументаМакет,ИзменяемаяОбластьНиз+1);
			ТзОбласти.Сортировать("НизОбласти,ВерхОбласти");		
			Если ТзОбласти.Количество()>0 Тогда
				КоординатаДиапазонаНачало = ИзменяемаяОбластьНиз+1;
				КоординатаДиапазонаОкончание = ТзОбласти[0].НизОбласти;	
			Иначе		
				Возврат;	
			КонецЕсли;		
		КонецЕсли;	 
				
	Иначе	
		КоординатаДиапазонаНачало = ИзменяемаяОбластьНиз;
		КоординатаДиапазонаОкончание = ИзменяемаяОбластьНиз;
	КонецЕсли;	

	ТЗДанные  = ПолучитьИзВременногоХранилища(тзДанныеАдрес);

	Для ИндексСтрока = КоординатаДиапазонаНачало По КоординатаДиапазонаОкончание Цикл
		УИД = Новый УникальныйИдентификатор();
		Для ИндексКолонка = 1 По  ПолеТабличногоДокументаМакет.ШиринаТаблицы Цикл
			ТекущаяЯчейка = ПолеТабличногоДокументаМакет.Область(ИндексСтрока,ИндексКолонка,ИндексСтрока,ИндексКолонка);
			Если ТекущаяЯчейка.Расшифровка = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			Если ТекущаяЯчейка.ЦветФона = Новый Цвет(230,255,230) Тогда //Вычисляемый
				Продолжить;		
			КонецЕсли;
			
			#Если ВебКлиент Тогда
				ЦветКнопки = WebЦвета.Бежевый;
			#Иначе	
				ЦветКнопки = windowsЦвета.Кнопка;
			#КонецЕсли
			
			Если ТекущаяЯчейка.ЦветФона = ЦветКнопки Тогда //Недоступный
				Продолжить;		
			КонецЕсли;
				
			СтруктураАналитик = Новый Структура;
			СоздатьОписаниеСтруктурыПолей(СтруктураАналитик,СтруктураТаблицИнтерфейса);
			ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,ТекущаяЯчейка.Расшифровка,СтруктураТаблицИнтерфейса,СтруктураФильтров,СтруктураАналитик);
			
			ТекущийРесурс = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.НайтиСтроки(Новый Структура("КолонкаФорматированныйКод,Строка",СтруктураАналитик.КодРесурса,СтруктураАналитик.ПоказателиСтрокаОтчета));
			
			Если ТекущийРесурс.Количество() = 1 Тогда				
				тТекст = ТекущаяЯчейка.Текст;
				ПустоеЗначениеПоказателя = ПроверитьНаПустоеЗначение(тТекст);	
				//Удаляем старое значение
				Если Не ПустоеЗначениеПоказателя Тогда
					Если СтруктураАналитик.ПоказательТипЗнчения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
						ЗаписатьЗначениеВПоказатель(,0,СтруктураАналитик,ТабИзмененныхДанных,СтруктураТаблицИнтерфейса.КэшАналитикПоказателей);
					Иначе
						ЗаписатьЗначениеВПоказатель(,Неопределено,СтруктураАналитик,ТабИзмененныхДанных,СтруктураТаблицИнтерфейса.КэшАналитикПоказателей);	
					КонецЕсли;
				КонецЕсли;
				//Пишем новое значение	
				СтруктураАналитик[КодИзменяемойАналитики] = НовоеЗначение;
				Если Не ЗначениеЗаполнено(СтруктураАналитик.ID) Тогда
					СтруктураАналитик.Вставить("ID",УИД);
				КонецЕсли;
				
				Если Не ПустоеЗначениеПоказателя Тогда
					
					СтруктураОтбораДанных = Новый Структура;
					Для Каждого сСвойство Из СтруктураАналитик Цикл	
						Если НЕ ТзДанные.Колонки.Найти(сСвойство.Ключ)=Неопределено Тогда
							СтруктураОтбораДанных.Вставить(сСвойство.Ключ,сСвойство.Значение);
						КонецЕсли;		
					КонецЦикла;	
					  	
						НайденныеСтроки = ТЗДанные.НайтиСтроки(СтруктураОтбораДанных);
						
						Если НайденныеСтроки.Количество()=0 Тогда
							ЗаписатьЗначениеВПоказатель(,тТекст,СтруктураАналитик,ТабИзмененныхДанных,СтруктураТаблицИнтерфейса.КэшАналитикПоказателей);
						Иначе	
							ЗаписатьЗначениеВПоказатель(,тТекст,СтруктураАналитик,ТабИзмененныхДанных,СтруктураТаблицИнтерфейса.КэшАналитикПоказателей);
							ТекущееЗначение = НайденныеСтроки[0]["Значение"];
							СтруктураАналитик.Вставить("ID",Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
							ЗаписатьЗначениеВПоказатель(,ТекущееЗначение,СтруктураАналитик,ТабИзмененныхДанных,СтруктураТаблицИнтерфейса.КэшАналитикПоказателей);
							СтруктураАналитик.Вставить("ID",УИД);
						КонецЕсли;	
				КонецЕсли;
				
			Иначе	 
				СтруктураАналитик[КодИзменяемойАналитики] = НовоеЗначение;					
			КонецЕсли;	
			
			фСтруктра =   Новый ФиксированнаяСтруктура(СтруктураАналитик);
		    нСтруктураПолей = Новый Структура(фСтруктра);

			ТекущаяЯчейка.Расшифровка = нСтруктураПолей;		
		КонецЦикла;		
	КонецЦикла;
		
	ТекущаяЯчейкаЗаголовок.СодержитЗначение = Истина;
	ТекущаяЯчейкаЗаголовок.Значение = НовоеЗначение;	
	
КонецПроцедуры	

Процедура УдалитьСтрокиАналитик(ПолеТабличногоДокументаМакет,МассивУдаляемых) Экспорт 
	
	СтруктураТаблицИнтерфейса 	= ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
	СтруктураФильтров          	= ПолучитьИзВременногоХранилища(АдресСтруктураФильтров);
	ДанныеРасшифровки 			= ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровки);
	логИзмененныхПоказателей  	= ПолучитьИзВременногоХранилища(логИзмененныхПоказателейАдрес);
	ТабИзмененныхДанных = ПолучитьИзВременногоХранилища(логИзмененныхДанныхАдрес);
	УдаляемыеСтроки 			  = Новый Массив;
	УдаляемыеГРуппировочныеСтроки = Новый Массив;
    Сч = 0;

	Для Каждого удСтрока Из МассивУдаляемых Цикл
		
		ИзменяемаяОбластьНиз = удСтрока;	
		ТекущаяЯчейкаЗаголовок = ПолеТабличногоДокументаМакет.Область(ИзменяемаяОбластьНиз,1,ИзменяемаяОбластьНиз,1);
		СтруктураАналитик = Новый Структура;
		СоздатьОписаниеСтруктурыПолей(СтруктураАналитик,СтруктураТаблицИнтерфейса);
		ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,ТекущаяЯчейкаЗаголовок.Расшифровка,СтруктураТаблицИнтерфейса,СтруктураФильтров,СтруктураАналитик);
		
		КодИзменяемойАналитики      = СтруктураАналитик.КодРесурса;
		
		//Относительно текущей структуры таблицы, получаем  вложенные аналитики для текущей позиции
		ТабВложенныхАналитик = ПолучитьЗависимыеАналитики(СтруктураТаблицИнтерфейса,СтруктураАналитик);
		ЕстьВложенные = Ложь;
		Если ТабВложенныхАналитик.Количество()=1 Тогда	
			Если ТабВложенныхАналитик[0].Код =  "Фильтр_"+СтруктураАналитик.КодРесурса Тогда	
				ЕстьВложенные =  Ложь;	 	
			Иначе
				ЕстьВложенные =  Истина;
			КонецЕсли;	
		КонецЕсли;	
		
		//Получить имя и диапазон удаляемой области
		Если ЕстьВложенные Тогда	
			ТзОбласти = ПолучитьОбластиВхождения(ПолеТабличногоДокументаМакет,ИзменяемаяОбластьНиз+1);
			ТзОбласти.Сортировать("НизОбласти,ВерхОбласти");	
			Если ТзОбласти.Количество()>0 Тогда
				КоординатаДиапазонаНачало = ИзменяемаяОбластьНиз+1;
				КоординатаДиапазонаОкончание = ТзОбласти[0].НизОбласти;	
			Иначе		
				Возврат;	
			КонецЕсли;	
		Иначе	
			КоординатаДиапазонаНачало = ИзменяемаяОбластьНиз;
			КоординатаДиапазонаОкончание = ИзменяемаяОбластьНиз;
		КонецЕсли;	
				
		Для ИндексСтрока = КоординатаДиапазонаНачало По КоординатаДиапазонаОкончание Цикл
			
			//Проверим, является ли текущая аналитика редактируемой
			
			ТекущаяЯчейка = ПолеТабличногоДокументаМакет.Область(ИндексСтрока,1,ИндексСтрока,1);
			СтруктураАналитик = Новый Структура;
			СоздатьОписаниеСтруктурыПолей(СтруктураАналитик,СтруктураТаблицИнтерфейса);
			ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,ТекущаяЯчейка.Расшифровка,СтруктураТаблицИнтерфейса,СтруктураФильтров,СтруктураАналитик);
			ТекущийРесурс = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.НайтиСтроки(Новый Структура("КолонкаФорматированныйКод,Строка",СтруктураАналитик.КодРесурса,СтруктураАналитик.ПоказателиСтрокаОтчета));
			СвойстваАналитики = СтруктураТаблицИнтерфейса.ТаблицаСтроки.НайтиСтроки(Новый Структура("Код","Фильтр_"+СтруктураАналитик.КодРесурса));
			
			Если НЕ СвойстваАналитики[0].Редактируется Тогда	
				УдаляемыеГруппировочныеСтроки.Добавить(ТекущаяЯчейка.Низ);
				Продолжить;	 
			КонецЕсли;	
			
			ЭтоУдаляемаяСтрока = Истина;
			
			Для ИндексКолонка = 1 По  ПолеТабличногоДокументаМакет.ШиринаТаблицы Цикл
				
				ТекущаяЯчейка = ПолеТабличногоДокументаМакет.Область(ИндексСтрока,ИндексКолонка,ИндексСтрока,ИндексКолонка);
				Если ТекущаяЯчейка.Расшифровка = Неопределено Тогда
					Продолжить;
				КонецЕсли;	
				
				Если ТекущаяЯчейка.ЦветФона = Новый Цвет(230,255,230) Тогда //Вычисляемый
					Если НЕ ПроверитьНаПустоеЗначение(ТекущаяЯчейка.Текст) Тогда
						 ЭтоУдаляемаяСтрока = Ложь;
					КонецЕсли;		
					Продолжить;		
				КонецЕсли;
				
				#Если ВебКлиент Тогда
					ЦветКнопки = WebЦвета.Бежевый;
				#Иначе	
					ЦветКнопки = windowsЦвета.Кнопка;
				#КонецЕсли
				
				Если НЕ ТипЗнч(ТекущаяЯчейка.Расшифровка) = Тип("Структура") Тогда
					Если ТекущаяЯчейка.ЦветФона = ЦветКнопки И НЕ ПроверитьНаПустоеЗначение(ТекущаяЯчейка.Текст) Тогда //Недоступный
						ЭтоУдаляемаяСтрока = Ложь;
						Продолжить;		
					КонецЕсли;
				КонецЕсли;
				
				СтруктураАналитик = Новый Структура;
				СоздатьОписаниеСтруктурыПолей(СтруктураАналитик,СтруктураТаблицИнтерфейса);
				ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,ТекущаяЯчейка.Расшифровка,СтруктураТаблицИнтерфейса,СтруктураФильтров,СтруктураАналитик);
				
				ТекущийРесурс = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.НайтиСтроки(Новый Структура("КолонкаФорматированныйКод,Строка",СтруктураАналитик.КодРесурса,СтруктураАналитик.ПоказателиСтрокаОтчета));
				
				Если ТекущийРесурс.Количество() = 1 Тогда		
					ПустоеЗначениеПоказателя = ПроверитьНаПустоеЗначение(ТекущаяЯчейка.Текст);	
					Если Не ПустоеЗначениеПоказателя Тогда
						ЗаписатьЗначениеВПоказатель(,Неопределено,СтруктураАналитик,ТабИзмененныхДанных,СтруктураТаблицИнтерфейса.КэшАналитикПоказателей);
						Если  СтруктураАналитик.ПоказательТипЗнчения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда 
							ТекущаяЯчейка.Текст = 0;	
						Иначе
							ТекущаяЯчейка.Текст = "";
						КонецЕсли;
						
					КонецЕсли;	
				КонецЕсли;			
			КонецЦикла;		
			
			Если ЭтоУдаляемаяСтрока Тогда
				УдаляемаяОбласть = ПолеТабличногоДокументаМакет.Область(ТекущаяЯчейка.Низ,0,ТекущаяЯчейка.Низ,0);
				УдаляемыеСтроки.Добавить(УдаляемаяОбласть);
				УдаляемаяОбласть.Имя = "Удалить"+Сч;
				Сч = Сч+1;	
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Сч=0 По  УдаляемыеСтроки.Количество()-1 Цикл	
		ПолеТабличногоДокументаМакет.УдалитьОбласть(ПолеТабличногоДокументаМакет.Область("Удалить"+Сч),ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЦикла;
		
КонецПроцедуры

Функция ПреобразоватьРасшифровкуСКДВСтруктуру(СтруктураПараметров,Копирование)
	
	ДокументРезультат 				= СтруктураПараметров.ДокументРезультат;
	СтруктураТаблицИнтерфейса   	= СтруктураПараметров.СтруктураТаблицИнтерфейса;
	СтруктураФильтров   			= СтруктураПараметров.СтруктураФильтров;
	СтруктураАналитикТекущейОбласти = СтруктураПараметров.СтруктураАналитикТекущейОбласти;
	ДанныеРасшифровки 				= СтруктураПараметров.ДанныеРасшифровки;
	Отступ                      	= СтруктураПараметров.Отступ;
	ТекущееЗначениеРесурса      	= СтруктураПараметров.ТекущееЗначениеРесурса;
	ПолеИмя                      	= СтруктураПараметров.ПолеИмя;
	МассивУдаляемыхСтрок = Новый Массив;	
	Сч = 0;
	#Если ВебКлиент Тогда
		ЦветКнопки = WebЦвета.Бежевый;
	#Иначе	
		ЦветКнопки = windowsЦвета.Кнопка;
	#КонецЕсли
	
	Если Копирование Тогда
		Для Стр =ДокументРезультат.ФиксацияСверху+1 По ДокументРезультат.ВысотаТаблицы Цикл		
			ИдентификаторСтроки = Новый УникальныйИдентификатор();	
			Для Кол =1 По ДокументРезультат.ШиринаТаблицы Цикл
				
				ТекОбласть = ДокументРезультат.Область(Стр,Кол,Стр,Кол);
				СтруктураРасшифровки = Новый Структура;
				СоздатьОписаниеСтруктурыПолей(СтруктураРасшифровки,СтруктураТаблицИнтерфейса);
				ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,ТекОбласть.Расшифровка,
				СтруктураТаблицИнтерфейса,СтруктураФильтров,СтруктураРасшифровки);
				СтруктураРасшифровки.Вставить("ID",ИдентификаторСтроки);		
				Если ТекОбласть.Лево = 1 Тогда //Заголовки					
					фСтруктра =   Новый ФиксированнаяСтруктура(СтруктураРасшифровки);
					СтруктураПолей = Новый Структура(фСтруктра);
					ТекОбласть.Расшифровка = СтруктураПолей;												
					Если СтруктураРасшифровки.КодРесурса = "Показатели" Тогда
						ОблКУдалению = ДокументРезультат.Область(Стр,0,Стр,0);
						МассивУдаляемыхСтрок.Добавить(ОблКУдалению);
						ОблКУдалению.Имя = "Удалить"+Сч;
						Сч = Сч+1;	
						Прервать;
					КонецЕсли;				
				Иначе							
					фСтруктра =   Новый ФиксированнаяСтруктура(СтруктураРасшифровки);
					СтруктураПолей = Новый Структура(фСтруктра);
					ТекОбласть.Расшифровка = СтруктураПолей;		
					Если ТекОбласть.ЦветФона =  Новый Цвет(230,255,230)   Тогда			
					ИначеЕсли ТекОбласть.ЦветФона = ЦветКнопки Тогда	
						ТекОбласть.Текст = 0;
					Иначе	
						ВставитьЗначениеВОбласть(ДокументРезультат,ТекОбласть.Имя,ТекОбласть.Текст,"0",,,);
					КонецЕсли;	
				КонецЕсли;		
			КонецЦикла;			
		КонецЦикла;	
		
		Для Сч=0 По  МассивУдаляемыхСтрок.Количество()-1 Цикл	
			ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область("Удалить"+Сч),ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЦикла;	
	Иначе	
		//Определяем начало области шаблона		
		ОбластьНачалаШаблона = 0;
		Для Стр =ДокументРезультат.ФиксацияСверху+1 По ДокументРезультат.ВысотаТаблицы Цикл			
			ТекОбласть = ДокументРезультат.Область(Стр,1,Стр,1);
			СтруктураРасшифровки = Новый Структура;
			СоздатьОписаниеСтруктурыПолей(СтруктураРасшифровки,СтруктураТаблицИнтерфейса);	
			ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,ТекОбласть.Расшифровка,
			СтруктураТаблицИнтерфейса,СтруктураФильтров,СтруктураРасшифровки);	
			
			СтруктураРасшифровки_ = Новый Структура;
			
			Для Каждого ЗначРасшифровки Из  СтруктураРасшифровки Цикл
				Если ЗначРасшифровки.Значение = NULL Тогда 
					СтруктураРасшифровки_.Вставить(ЗначРасшифровки.Ключ,Неопределено);
				Иначе	
					СтруктураРасшифровки_.Вставить(ЗначРасшифровки.Ключ,ЗначРасшифровки.Значение)
				КонецЕсли;	
			КонецЦикла;	
			
			
			ОблКУдалению = ДокументРезультат.Область(Стр,0,Стр,0);
			
			Если ОблКУдалению.ВысотаСтроки = 1  Тогда
				ОблКУдалению.ВысотаСтроки = 0;
			КонецЕсли;
			
			Если СтруктураРасшифровки_.КодРесурса = ПолеИмя Тогда	
				ОбластьНачалаШаблона = Стр;
			ИначеЕсли ОбластьНачалаШаблона = 0 Тогда	
				ОблКУдалению = ДокументРезультат.Область(Стр,0,Стр,0);
                МассивУдаляемыхСтрок.Добавить(ОблКУдалению);
                ОблКУдалению.Имя = "Удалить"+Сч;
			    Сч = Сч+1;
			КонецЕсли;				
		КонецЦикла;
		
		Для Сч=0 По  МассивУдаляемыхСтрок.Количество()-1 Цикл	
			ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область("Удалить"+Сч),ТипСмещенияТабличногоДокумента.ПоВертикали);
			ОбластьНачалаШаблона = ОбластьНачалаШаблона-1;
		КонецЦикла;
		Сч = 0;	
		Для Стр =ОбластьНачалаШаблона По ДокументРезультат.ВысотаТаблицы Цикл				
			ИдентификаторСтроки = Новый УникальныйИдентификатор();		
			Для Кол =1 По ДокументРезультат.ШиринаТаблицы Цикл				
				ТекОбласть = ДокументРезультат.Область(Стр,Кол,Стр,Кол);
				СтруктураРасшифровки = Новый Структура;
				СоздатьОписаниеСтруктурыПолей(СтруктураРасшифровки,СтруктураТаблицИнтерфейса);
				ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,ТекОбласть.Расшифровка,
				СтруктураТаблицИнтерфейса,СтруктураФильтров,СтруктураРасшифровки);				
				
				
				СтруктураРасшифровки_ = Новый Структура;
				
				Для Каждого ЗначРасшифровки Из  СтруктураРасшифровки Цикл
					Если ЗначРасшифровки.Значение = NULL Тогда 
						СтруктураРасшифровки_.Вставить(ЗначРасшифровки.Ключ,Неопределено);
					Иначе	
						СтруктураРасшифровки_.Вставить(ЗначРасшифровки.Ключ,ЗначРасшифровки.Значение)
					КонецЕсли;	
				КонецЦикла;	
				
				
				СтруктураРасшифровки_.Вставить("ID",ИдентификаторСтроки);	
				
				
				Если ТекОбласть.Лево <= ДокументРезультат.ФиксацияСлева Тогда //Заголовки
					ТекОбласть.ЦветФона = Новый Цвет(255,255,255);					
					фСтруктра =   Новый ФиксированнаяСтруктура(СтруктураРасшифровки_);
					СтруктураПолей = Новый Структура(фСтруктра);
					ТекОбласть.Расшифровка = СтруктураПолей;	
					Если Не ЗначениеЗаполнено(ТекОбласть.Текст) Тогда
						ТекОбласть.Текст  = "<...>";
					КонецЕсли;
					ТекОбласть.Отступ = Отступ+Сч*2;									
				Иначе	
					фСтруктра =   Новый ФиксированнаяСтруктура(СтруктураРасшифровки_);
					СтруктураПолей = Новый Структура(фСтруктра);
					ТекОбласть.Расшифровка = СтруктураПолей;		
					Если СтруктураПолей.ПоказательТипЗнчения = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда
						 ТекОбласть.Текст = "";
					КонецЕсли;	
					
				КонецЕсли;		
			КонецЦикла;		
		    Сч = Сч+1;
		КонецЦикла;			
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

Функция ПроверитьВложенныеАналитики(ПолеТабличногоДокументаМакет,ИзменяемаяОбластьНиз) Экспорт
	
	СтруктураТаблицИнтерфейса 	= ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
	СтруктураФильтров          	= ПолучитьИзВременногоХранилища(АдресСтруктураФильтров);
	ДанныеРасшифровки 			= ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровки);
	логИзмененныхПоказателей  	= ПолучитьИзВременногоХранилища(логИзмененныхПоказателейАдрес);
	
	ТекущаяЯчейкаЗаголовок = ПолеТабличногоДокументаМакет.Область(ИзменяемаяОбластьНиз,1,ИзменяемаяОбластьНиз,1);
	СтруктураАналитик = Новый Структура;
	СоздатьОписаниеСтруктурыПолей(СтруктураАналитик,СтруктураТаблицИнтерфейса);
	ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,ТекущаяЯчейкаЗаголовок.Расшифровка,СтруктураТаблицИнтерфейса,СтруктураФильтров,СтруктураАналитик);

	//Относительно текущей структуры таблицы, получаем  вложенные аналитики для текущей позиции
	ТабВложенныхАналитик = ПолучитьЗависимыеАналитики(СтруктураТаблицИнтерфейса,СтруктураАналитик);
	Если ТабВложенныхАналитик.Количество()=1 Тогда
		
		Если ТабВложенныхАналитик[0].Код =  "Фильтр_"+СтруктураАналитик.КодРесурса Тогда	
			Возврат Ложь;	 	
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции	

Процедура ФорматироватьШаблонМакета(ДокументРезультат,ОбластьПриемник=Неопределено,ВерхОбласти )
		
	ТЗГрупп = Новый ТаблицаЗначений;
	ТЗГрупп.Колонки.Добавить("ИндексНачалаСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));
	ТЗГрупп.Колонки.Добавить("ИндексОкончанияСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(3));
	ТЗГрупп.Колонки.Добавить("УровеньТекущейОбласти",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(3));
	ТЗГрупп.Колонки.Добавить("УровеньГруппировкиТекущейОбласти",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));	
	ТЗГрупп.Колонки.Добавить("ГруппаОткрыта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	Если ОбластьПриемник=Неопределено Тогда
		 ОбластьВерх = ДокументРезультат.ФиксацияСверху+1;
		 ОбластьНиз  = ДокументРезультат.ВысотаТаблицы;
	Иначе	
		 ОбластьВерх = ?(ВерхОбласти = 0,ДокументРезультат.ФиксацияСверху+1,ВерхОбласти-1);
		 ОбластьНиз  = ОбластьПриемник.Низ;
	КонецЕсли;	
			
	УровеньПоследнейСтроки = 0;
	
	МассивУдаляемыхСтрок = Новый Массив;
	Сч = 0;
	Для  СтрокаТаблицы =ОбластьВерх  По ОбластьНиз+1 Цикл 
				
		ТекущаяОбласть    =  ДокументРезультат.Область(СтрокаТаблицы,1,СтрокаТаблицы,1);
		СледующаяОбласть  =  ДокументРезультат.Область(СтрокаТаблицы+1,1,СтрокаТаблицы+1,1);
		ПредыдущаяОбласть =  ДокументРезультат.Область(СтрокаТаблицы-1,1,СтрокаТаблицы-1,1);
		
		Если  ТекущаяОбласть.Отступ<ПредыдущаяОбласть.Отступ Тогда //Закрываем все открытые группы с уровнем большим текущего  		
			ОткрытыеСтроки = ТЗГрупп.НайтиСтроки(Новый Структура("ГруппаОткрыта",Истина));
			Для Каждого оСтр Из ОткрытыеСтроки Цикл	
				Если  оСтр.УровеньГруппировкиТекущейОбласти > ТекущаяОбласть.Отступ Тогда
					оСтр.ГруппаОткрыта = Ложь;
					ДокументРезультат.Область(оСтр.ИндексНачалаСтроки,0,СтрокаТаблицы-1,0).Сгруппировать();
					Если ДокументРезультат.Область(оСтр.ИндексНачалаСтроки,0,СтрокаТаблицы-1,0).ВысотаСтроки<>1 Тогда 
						ДокументРезультат.Область(оСтр.ИндексНачалаСтроки,0,СтрокаТаблицы-1,0).Имя = "ОбластьСтроки_"+Строка(Новый УникальныйИдентификатор);
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	 	
		КонецЕсли;	
		
		Если СледующаяОбласть.Отступ > ТекущаяОбласть.Отступ Тогда //Открываем группу	
			Нгруппа = ТЗГрупп.Добавить();
			Нгруппа.УровеньТекущейОбласти = ДокументРезультат.Область(СтрокаТаблицы,1,СтрокаТаблицы,1).Отступ;
			Нгруппа.ИндексНачалаСтроки = СтрокаТаблицы+1;
			Нгруппа.ИндексОкончанияСтроки = СтрокаТаблицы;
			Нгруппа.УровеньГруппировкиТекущейОбласти = (ДокументРезультат.Область(СтрокаТаблицы,1,СтрокаТаблицы,1).Отступ)+2;
			Нгруппа.ГруппаОткрыта = Истина;		
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

Функция ПроверитьЗаблокированныеЯчейки(ПолеТабличногоДокументаМакет,ИзменяемаяОбластьНиз) Экспорт
	
	СтруктураТаблицИнтерфейса 	= ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
	СтруктураФильтров          	= ПолучитьИзВременногоХранилища(АдресСтруктураФильтров);
	ДанныеРасшифровки 			= ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровки);
	логИзмененныхПоказателей  	= ПолучитьИзВременногоХранилища(логИзмененныхПоказателейАдрес);
	
	ТекущаяЯчейкаЗаголовок = ПолеТабличногоДокументаМакет.Область(ИзменяемаяОбластьНиз,1,ИзменяемаяОбластьНиз,1);
	СтруктураАналитик = Новый Структура;
	СоздатьОписаниеСтруктурыПолей(СтруктураАналитик,СтруктураТаблицИнтерфейса);
	ПолучитьАналитикиЯчейкиСОтборами(ДанныеРасшифровки,ТекущаяЯчейкаЗаголовок.Расшифровка,СтруктураТаблицИнтерфейса,СтруктураФильтров,СтруктураАналитик);
	
	КодИзменяемойАналитики      = СтруктураАналитик.КодРесурса;
	
	ТабИзмененныхДанных = ПолучитьИзВременногоХранилища(логИзмененныхДанныхАдрес);
	
	//Относительно текущей структуры таблицы, получаем  вложенные аналитики для текущей позиции
	ТабВложенныхАналитик = ПолучитьЗависимыеАналитики(СтруктураТаблицИнтерфейса,СтруктураАналитик);
	ЕстьВложенные = Ложь;
	Если ТабВложенныхАналитик.Количество()=1 Тогда
		
		Если ТабВложенныхАналитик[0].Код =  "Фильтр_"+СтруктураАналитик.КодРесурса Тогда	
			ЕстьВложенные =  Ложь;	 	
		Иначе
			ЕстьВложенные =  Истина;
		КонецЕсли;
		
	КонецЕсли;	
	
	//Получить имя и диапазон удаляемой области
	Если ЕстьВложенные Тогда
		
		ТзОбласти = ПолучитьОбластиВхождения(ПолеТабличногоДокументаМакет,ИзменяемаяОбластьНиз+1);
		ТзОбласти.Сортировать("НизОбласти,ВерхОбласти");
		
		Если ТзОбласти.Количество()>0 Тогда
			КоординатаДиапазонаНачало = ИзменяемаяОбластьНиз+1;
			КоординатаДиапазонаОкончание = ТзОбласти[0].НизОбласти;	
		Иначе		
			Возврат Ложь;	
		КонецЕсли;
		
	Иначе	
		КоординатаДиапазонаНачало = ИзменяемаяОбластьНиз;
		КоординатаДиапазонаОкончание = ИзменяемаяОбластьНиз;
	КонецЕсли;	
		
	ЕстьЗаблокированныеЗначимыеЯчейки = Ложь;
	
	Для ИндексСтрока = КоординатаДиапазонаНачало По КоординатаДиапазонаОкончание Цикл
				
		Для ИндексКолонка = 1 По  ПолеТабличногоДокументаМакет.ШиринаТаблицы Цикл
	
			ТекущаяЯчейка = ПолеТабличногоДокументаМакет.Область(ИндексСтрока,ИндексКолонка,ИндексСтрока,ИндексКолонка);
			Если ТекущаяЯчейка.Расшифровка = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			Если ТипЗнч(ТекущаяЯчейка.Расшифровка) = Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекущаяЯчейка.ЦветФона = Новый Цвет(230,255,230) Тогда //Вычисляемый	
				Если НЕ ПроверитьНаПустоеЗначение(ТекущаяЯчейка.Текст) Тогда
					 ЕстьЗаблокированныеЗначимыеЯчейки = Истина;
					 Возврат ЕстьЗаблокированныеЗначимыеЯчейки;
				 КонецЕсли;	
			КонецЕсли;
			
			#Если ВебКлиент Тогда
				ЦветКнопки = WebЦвета.Бежевый;
			#Иначе	
				ЦветКнопки = windowsЦвета.Кнопка;
			#КонецЕсли
			
			Если ТекущаяЯчейка.ЦветФона = ЦветКнопки Тогда //Недоступный
				Если НЕ ПроверитьНаПустоеЗначение(ТекущаяЯчейка.Текст) Тогда
					 ЕстьЗаблокированныеЗначимыеЯчейки = Истина;
					 Возврат ЕстьЗаблокированныеЗначимыеЯчейки;
				 КонецЕсли;		
			КонецЕсли;
						
		КонецЦикла;		
			
	КонецЦикла;
	
	Возврат ЕстьЗаблокированныеЗначимыеЯчейки;
	
КонецФункции	

Функция ПроверитьНаПустоеЗначение(ТекстЯчейки)
	
	Попытка 	
		Если СокрЛП(ТекстЯчейки) = "" ИЛИ СокрЛП(ТекстЯчейки) = "Х" Тогда Значение = "0" КонецЕсли;
		Значение = СтрЗаменить(ТекстЯчейки," ","");
		ЗначениеЧисло = Число(Значение);
		Если  Масштаб = "Тыс" Тогда
			ЗначениеЧисло = ЗначениеЧисло*1000;	
		ИначеЕсли  Масштаб = "Миллионы" Тогда
			ЗначениеЧисло = ЗначениеЧисло*1000000;	
		КонецЕсли;	
	Исключение                                                                                                
		Возврат Ложь;
	КонецПопытки;
	
	Возврат ЗначениеЧисло = 0;
		
КонецФункции

Функция ПреобразоватьТекстВЧисло(ТекстЯчейки,ФлагОшибки,НеМасштабируется=Ложь)
	
	Попытка 
		Если СокрЛП(ТекстЯчейки) = "" Тогда Возврат 0 КонецЕсли;
		Значение = СтрЗаменить(ТекстЯчейки," ","");
		ЗначениеЧисло = Число(Значение);
		Если НЕ НеМасштабируется Тогда
			Если  Масштаб = "Тыс" Тогда
				ЗначениеЧисло = ЗначениеЧисло*1000;	
			ИначеЕсли  Масштаб = "Миллионы" Тогда
				ЗначениеЧисло = ЗначениеЧисло*1000000;	
			КонецЕсли;	
		КонецЕсли;
		Возврат ЗначениеЧисло;
	Исключение                                                                                                
		ОбщегоНазначенияУх.СообщитьОбОшибке(Нстр("ru = 'Некорректное значение'"));
		ФлагОшибки = Истина;
		Возврат Ложь;
	КонецПопытки;
		
КонецФункции

#КонецОбласти


стЛогИзмененийПоказателей = Новый ТаблицаЗначений;
Для Инд=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл	
	стЛогИзмененийПоказателей.Колонки.Добавить("Аналитика"+Инд);
КонецЦикла;
стЛогИзмененийПоказателей.Колонки.Добавить("ПоказательСсылка");
стЛогИзмененийПоказателей.Колонки.Добавить("Показатель");
стЛогИзмененийПоказателей.Колонки.Добавить("Периоды");
стЛогИзмененийПоказателей.Колонки.Добавить("Сценарии");
стЛогИзмененийПоказателей.Колонки.Добавить("Организации");
стЛогИзмененийПоказателей.Колонки.Добавить("Проекты");	


#КонецЕсли

