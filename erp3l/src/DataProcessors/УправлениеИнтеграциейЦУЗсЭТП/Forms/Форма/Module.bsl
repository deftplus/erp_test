
#Область ОбработкаОсновныхСобытийФормы


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбъектВыгрузки = Параметры.ОбъектВыгрузки;
	Организация = ПолучитьОрганизациюИзОбъекта(ОбъектВыгрузки);
	ЕИС = Справочники.ЭлектронныеТорговыеПлощадки.СсылкаНаЕИС();
	ТипПравилКонвертацииВXSD = Справочники.ПравилаКонвертацииXSD.Из1СВОбъектыЕИС;
	
	СписокТипов.Добавить(Тип("ДокументСсылка.ПрограммаЗакупок"));
	СписокТипов.Добавить(Тип("СправочникСсылка.ЗакупочныеПроцедуры"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПротоколВыбораПобедителей"));
	СписокТипов.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	СписокТипов.Добавить(Тип("ДокументСсылка.СведенияОбИсполненииДоговора"));
	СписокТипов.Добавить(Тип("ДокументСсылка.РегистрацияОбъемаЗакупокУМСП"));
	СписокТипов.Добавить(Тип("ДокументСсылка.РегистрацияОтчетаОЗаключенныхДоговорах"));
	
	ТипыПротоколов.Добавить(
		Тип("ДокументСсылка.ПротоколВыбораПобедителей"),
		"ОтправитьПротоколВыбораПобедителей");
	ТипыПротоколов.Добавить(
		Тип("ДокументСсылка.СведенияОбИсполненииДоговора"),
		"ОтправитьИсполнениеДоговора");
	ТипыПротоколов.Добавить(
		Тип("ДокументСсылка.РегистрацияОбъемаЗакупокУМСП"),
		"ОтправитьОбъемЗакупокУМCП");
	ТипыПротоколов.Добавить(
		Тип("ДокументСсылка.РегистрацияОтчетаОЗаключенныхДоговорах"),
		"ОтправитьОтчетОЗаключенныхДоговорах");
	
	ЭТП = ЕИС;
	
	ТекстОшибкиОбменаСЭТП_HTML = "";
	
	ОбновитьРеквизитыОбъектаВыгрузки();
	Если ЗначениеЗаполнено(ОбъектВыгрузки) Тогда
		ОбновитьСтатусОбменаСЭТП();
	КонецЕсли;
	ИнициализироватьОбменСЭТП();
	 //Установка полей для FTP.
	FTPХост = "ftp.zakupki.gov.ru";
	FTPПорт = 21;
	FTPПользователь = "fz223free";
	FTPПароль = "fz223free";
	FTPПериод = ТекущаяДата();
	FTPОкато = "45000000000";
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СтараяОрганизация = Организация;
КонецПроцедуры

&НаСервере
Функция ПроверкаПоСпособуЗакупок()
	Результат = РегистрыСведений.НомераСпособовЗакупокВЕИС.ПроверкаНаличияНомераСпособаЗакупокВЕИСПоПрограммеЗакупок(ОбъектВыгрузки);
	Если Не Результат.Пустой() Тогда 
		ТекстОшибки = "";
		РезультатПроверки = Результат.Выбрать();
		Пока РезультатПроверки.Следующий() Цикл
			ТекстОшибки = ТекстОшибки +" "+НСтр("ru = 'По строке плана закупок ""%НомерСтроки%"" отсутствет настройка номера для способа выбора поставщика ""%СпособВыбораПоставщика%"".'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Строка(РезультатПроверки.НомерСтроки));
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СпособВыбораПоставщика%", Строка(РезультатПроверки.СпособВыбораПоставщика));
		КонецЦикла;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
	КонецЕсли;	
	Возврат Истина; 
КонецФункции	
#КонецОбласти


#Область ОбработкаСобытийЭлементовФормы


&НаКлиенте
Процедура ОткрытьНастройкуОбменаСЭТП(Команда)
	Если НЕ ЗначениеЗаполнено(ТекущийСотрудникОбмена) ИЛИ НЕ ЗначениеЗаполнено(ЭТП) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура("ЭТП, Сотрудник, ПараметрыПодключенияКЭТП", ЭТП,
		ТекущийСотрудникОбмена, ПараметрыПодключенияКЭТП);
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
		"ОбновитьПараметрыПодключенияКЭТППослеИзменения",
		ЭтаФорма, Неопределено, "ОбработкаОбработкиОшибокСинхронизации", ЭтаФорма);
	ОткрытьФорму(
		"РегистрСведений.НастройкиОбменаСЭТП.Форма.ФормаРедактированияПараметровПодключенияСотрудника",
		ПараметрыФормы, ЭтаФорма, Истина,,, ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьСЭТП(Команда)
	Если НЕ ЗначениеЗаполнено(ЭТП) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не указана торговая площадка для размещения!'");
		Сообщение.Поле = "ЭТП";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не указана организация!'");
		Сообщение.Поле = "Организация";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектВыгрузки) = Тип("ДокументСсылка.ПрограммаЗакупок") И НЕ ПроверкаПоСпособуЗакупок()  Тогда
		Оповещение = Новый ОписаниеОповещения("ОткрытьФормуНастроекСпособовЗакупок",
		ЭтотОбъект);
		ПоказатьВопрос(Оповещение, "Настроить способ выбора поставщика?",
		РежимДиалогаВопрос.ДаНет,
		0, 
		КодВозвратаДиалога.Да, 
		"Открыть форму настройки"); 
		Возврат;
	КонецЕсли;	
	
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить(
		"ПрефиксОшибки",
		НСтр("ru='Ошибка подготовки к обмену:'") + Символы.ПС);
	ДопПараметры.Вставить(
		"КомандаОбмена",
		ПолучитьИмяКомандыОбмена(Команда.Имя));
	
	Если НЕ ИнтеграцияЦУЗсЭТПКлиентСерверУХ.КорректнаяКомандаОбмена(
									ДопПараметры.КомандаОбмена) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Некорректная команда обмена!'");
		Сообщение.Сообщить();
	Конецесли;
	
	ВвестиПараметрыПодключенияПередОтправкойНаЭТП(ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекСпособовЗакупок(Результат, Параметры) Экспорт
 
    Если Результат = КодВозвратаДиалога.Да Тогда
        Форма = ОткрытьФорму("РегистрСведений.НомераСпособовЗакупокВЕИС.Форма.ФормаСписка");
    КонецЕсли;	
 
КонецПроцедуры

&НаКлиенте
Процедура КомандаЖурналОбменаСЭТП(Команда)
	ПараметрыФормы = Новый Структура("ОбъектОбмена", ОбъектВыгрузки);
	ОткрытьФорму("РегистрСведений.ЖурналОбменаСЭТП.ФормаСписка", ПараметрыФормы, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура СпособПубликацииПриИзменении(Элемент)
	ПриИзмененииРеквизитовОбменаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущееЗначение", ОбъектВыгрузки);
	Если СписокТипов.Количество() = 1 Тогда
		ОбработатьВыборТипаОбъекта(СписокТипов[0], ДопПараметры);
	Иначе
		ОбработчикВыбораТипаОбъекта = Новый ОписаниеОповещения(
			"ОбработатьВыборТипаОбъекта", 
			ЭтаФорма, 
			ДопПараметры);
		СписокТипов.ПоказатьВыборЭлемента(
			ОбработчикВыбораТипаОбъекта, 
			НСтр("ru='Укажите тип объекта выгрузки '"), 
			ТипЗнч(ОбъектВыгрузки));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектВыгрузкиПриИзменении(Элемент)
	ОбъектВыгрузкиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТекстОшибкиОбменаСЭТППриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	ТекстСсылки = ДанныеСобытия.href;
	ЗначениеСсылкиОбъект = ОбщегоНазначенияУХ.СсылкаНаОбъектИзНавигационнойСсылки(
		СокрЛП(ТекстСсылки));
	Если ЗначениеСсылкиОбъект <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Попытка
			ПерейтиПоНавигационнойСсылке(ТекстСсылки);
		Исключение
			ПоказатьЗначение(, ЗначениеСсылкиОбъект);
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
    Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
        Если ВыбранноеЗначение.Количество() > 0 Тогда
			ПутьКФайлу = ВыбранноеЗначение[0];
        Иначе
            ТекстСообщения = НСтр("ru = 'Не удалось считать файл'");
            ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
        КонецЕсли;
    Иначе
        ТекстСообщения = НСтр("ru = 'Не удалось считать файл'");
        ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = НСтр("ru = 'XML (*.xml)|*.xml|Все файлы (*.*)|*.*'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтаФорма);
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьИзXML(Команда)
	ВыполнитьЧтениеКодовИзXML(ПутьКФайлу);
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьИзFTP(Команда)
	#Если НЕ ВебКлиент Тогда
		Успешно = Ложь;
		ЕстьОшибки = Ложь;
		Попытка
			//Установка соединения.
			Соединение = НовоеFTPСоединение();
			Если Соединение <> Неопределено Тогда
				// Установка каталога FTP.
				ПредставлениеРегионаFTP = ПолучитьПредставлениеРегионаНаFTP(FTPОкато);
				FTPКаталог = "/out/published/" + ПредставлениеРегионаFTP + "/purchasePlan/daily";
				Соединение.УстановитьТекущийКаталог(FTPКаталог);
				ВременныйКаталог = КаталогВременныхФайлов();
				// Поиск файла.
				МаскаПоиска = СформироватьМаскуПоискаFTP(ПредставлениеРегионаFTP, FTPПериод);
				НайденныеФайлыFTP = Соединение.НайтиФайлы("", МаскаПоиска);
				Для Каждого ТекНайденныеФайлыFTP Из НайденныеФайлыFTP Цикл
					// Скачивание файла с FTP.
					ПутьСохранения = ВременныйКаталог + ТекНайденныеФайлыFTP.Имя;
					Соединение.Получить(ТекНайденныеФайлыFTP.Имя, ПутьСохранения);
					// Распаковка ZIP.
					ПарольАрхивногоФайла = "";
					ЧтениеZIP = Новый ЧтениеZipФайла(ПутьСохранения, ПарольАрхивногоФайла);
					ИдентификаторПапки = Строка(Новый УникальныйИдентификатор);
					ПутьИзвлечения = ВременныйКаталог + "\" + ИдентификаторПапки;
					СоздатьКаталог(ПутьИзвлечения);
					ЧтениеZIP.ИзвлечьВсе(ПутьИзвлечения, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
					ЧтениеZIP.Закрыть();
					// Установка кодов из найденных файлов.
					НайденныеФайлыZIP = НайтиФайлы(ПутьИзвлечения, "*.xml", Ложь);
					Для Каждого ТекНайденныеФайлыZIP Из НайденныеФайлыZIP Цикл
						ПутьСохранения = ТекНайденныеФайлыZIP.ПолноеИмя;
						РезультатУстановки = ВыполнитьЧтениеКодовИзXML(ПутьСохранения, Истина);
						Если РезультатУстановки Тогда
							Успешно = Истина;
						Иначе
							// Установка не была произведена. Не изменяем флаг успешности.
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;	
			Иначе
				ТекстСообщения = НСтр("ru = 'FTP-соединение не было установлено. Операция отменена.'");
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		Исключение
			ТекстСообщения = НСтр("ru = 'При получении кодов ЕИС из FTP возникли ошибки: %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			ЕстьОшибки = Истина;
		КонецПопытки;
		// Уведомление пользователя.
		Если (Успешно) И (НЕ ЕстьОшибки) Тогда
			КартинкаОповещения = БиблиотекаКартинок.Успешно32;
			ТекстОповещения = НСтр("ru = 'Загрузка кодов'");
			ПояснениеОповещения = НСтр("ru = 'Коды ЕИС были успешно загружены'");
			ПоказатьОповещениеПользователя(ТекстОповещения, , ПояснениеОповещения, КартинкаОповещения);
		Иначе
			ТекстСообщения = НСтр("ru = 'Данные кодов ЕИС не были загружены'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	#Иначе
		ТекстСообщения = НСтр("ru = 'Функционал недоступен в веб-клиенте'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	#КонецЕсли
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыНаКлиенте


&НаКлиенте
Процедура ОбновитьПараметрыПодключенияКЭТППослеИзменения(РезультатЗакрытия, ДопПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПодключенияКЭТП = РезультатЗакрытия;
КонецПроцедуры

// Вызвается из процедуры обмена ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ВыполнитьКомандуОбмена.
// Параметры:
//	ОписаниеОбмена - Структура:
//		КомандаОбмена - Строка, имя команды обмена;
//		ЭТП - СправочникСсылка.ЭлектронныеТорговыеПлощадки.
// 		ОбъектВыгрузки - ОпределяемыйТип.ОбъектыЦУЗОбменаСЭТП_УХ. Объект для отправки.
//		ПараметрыПодключенияКЭТП - Структура. Состав полей соответствует значению возвращаемому функцией  ШаблонОписанияПараметровПодключенияКЭТП().
//			Можно получить функцией ПолучитьПараметрыПодключенияКЭТП(ЭТП, Сотрудник).
//		ПоляОписанияТранзакции - Структура. Состав полей соответствует значению возвращаемому функцией ШаблонОписанияТранзакцииОбмена().
//			Поля, обязательные к заполнению: Статус, Сотрудник.
//		флРезультатСинхронизации - Булево, Истина - обмен прошел успешно. Ложь - ошибки обмена.
//	ДополнительныеПараметры - не используется.
//
&НаКлиенте
Процедура ОбработатьРезультатОбмена(ОписаниеОбмена, ДополнительныеПараметры) Экспорт
	Если ОписаниеОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПослеОбменаНаСервере(ОписаниеОбмена);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВводНомераПротоколаОтменыПередОтправкойНаЭТП(НомерПротоколаОтмены, ДопПараметры) Экспорт
	Если НомерПротоколаОтмены = Неопределено ИЛИ ПустаяСтрока(НомерПротоколаОтмены) Тогда
		Возврат;
	КонецЕсли;
	
	НомерПротоколаОтменыПроцедурыНаЭТП = СокрЛП(НомерПротоколаОтмены);
	
	// Спрашиваем у пользователя номер протокола отмены
	ДопПараметры.ПрефиксОшибки = 
		НСтр("ru='Ошибка ввода причины отмены:'") + Символы.ПС;
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработатьВводПричиныОтменыПередОтправкойНаЭТП", ЭтаФорма, ДопПараметры, "ОбработкаОбработкиОшибокСинхронизации", ЭтаФорма);
	ПоказатьВводСтроки(
		ОписаниеОповещенияОЗакрытии, 
		ПричинаОтказаОтПроведения, 
		НСтр("ru='Укажите причину отмены'"), 
		500, 
		Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВводПричиныОтменыПередОтправкойНаЭТП(ПричинаОтмены, ДопПараметры) Экспорт
	Если ПричинаОтмены = Неопределено ИЛИ ПустаяСтрока(ПричинаОтмены) Тогда
		Возврат;
	КонецЕсли;
	
	ПричинаОтказаОтПроведения = СокрЛП(ПричинаОтмены);
	
	ВвестиПараметрыПодключенияПередОтправкойНаЭТП(ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПараметрыПодключенияПередОтправкойНаЭТП(ДопПараметры) Экспорт
	ОчиститьСообщения();
	
	ДопПараметры.ПрефиксОшибки = 
		НСтр("ru='Ошибка получения данных подключения сотрудника к ЭТП:'") + Символы.ПС;
	
	Если ПараметрыПодключенияКЭТП.НеСпрашиватьПараметрыПодключения Тогда
		ОбработатьИзменениеПараметровПодключенияКЭТП(ПараметрыПодключенияКЭТП, ДопПараметры);
	Иначе
		// Открываем форму редактирования параметров подключения к ЭТП
		ПараметрыФормы = Новый Структура("ЭТП, Сотрудник, ПараметрыПодключенияКЭТП",
			ЭТП, ТекущийСотрудникОбмена, ПараметрыПодключенияКЭТП);
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
			"ОбработатьИзменениеПараметровПодключенияКЭТП", ЭтаФорма, ДопПараметры,
			"ОбработкаОбработкиОшибокСинхронизации", ЭтаФорма);
		ОткрытьФорму(
			"РегистрСведений.НастройкиОбменаСЭТП.Форма.ФормаРедактированияПараметровПодключенияСотрудника",
			ПараметрыФормы, ЭтаФорма, Истина,,, ОписаниеОповещенияОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОбработкиОшибокСинхронизации(ИнформацияОбОшибке, СтандартнаяОбработка, ДопПараметры) Экспорт
	ПрефиксОшибки = "";
	
	Если ЗначениеЗаполнено(ДопПараметры) Тогда
		ДопПараметры.Свойство("ПрефиксОшибки", ПрефиксОшибки);
	КонецЕсли;
		
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ПрефиксОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	Сообщение.Сообщить();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПараметровПодключенияКЭТП(РезультатЗакрытия, ДопПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПодключенияКЭТП = РезультатЗакрытия;
	
	СинхронизироватьСЭТПНаКлиенте(ДопПараметры.КомандаОбмена, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьСЭТПНаКлиенте(КомандаОбмена, ОбновитьПараметрыПодключения)
	Элементы.КартинкаСтатусОбменаСЭТП.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
	ПоляОписанияТранзакции = ПодготовитьСинхронизациюНаСервере(ОбновитьПараметрыПодключения);
	ИнтеграцияЦУЗсЭТПКлиентУХ.ВыполнитьКомандуОбмена(КомандаОбмена,
		ЭТП,
		ОбъектВыгрузки,
		ПараметрыПодключенияКЭТП,
		ПоляОписанияТранзакции,
		Новый ОписаниеОповещения("ОбработатьРезультатОбмена", ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяКомандыОбмена(ИмяКомандыФормы)
	Если ИмяКомандыФормы = "ОтправитьПротокол" Тогда
		ЭлементСпискаПротоколов = 
			ТипыПротоколов.НайтиПоЗначению(ТипЗнч(ОбъектВыгрузки));
		Если ЭлементСпискаПротоколов <> Неопределено
				И НЕ ПустаяСтрока(ЭлементСпискаПротоколов.Представление) Тогда
			Возврат ЭлементСпискаПротоколов.Представление;
		КонецЕсли;
	КонецЕсли;
	Возврат ИмяКомандыФормы;
КонецФункции

// Осуществляет установку кодов ЕИС по данных XML-файла, заданным
// с помощью пути ПутьКФайлуВход.
&НаКлиенте
Функция ВыполнитьЧтениеКодовИзXML(ПутьКФайлуВход, ТихийРежимВход = Ложь)
	РезультатФункции = Ложь;
	Если ЗначениеЗаполнено(ПутьКФайлуВход) Тогда
		// Считаем текст из файла.
		ТекстДок = Новый ТекстовыйДокумент;
		ТекстДок.Прочитать(ПутьКФайлуВход, КодировкаТекста.UTF8);
		ТекстЗагрузки = ТекстДок.ПолучитьТекст();
		// Обновим коды по данным считанного текста.
		РезультатФункции = СчитатьКодыНаСервере(ТекстЗагрузки);
		// Обработка результата.
		Если Не ТихийРежимВход Тогда
			Если РезультатФункции Тогда
				КартинкаОповещения = БиблиотекаКартинок.Успешно32;
				ТекстОповещения = НСтр("ru = 'Загрузка кодов'");
				ПояснениеОповещения = НСтр("ru = 'Коды ЕИС были успешно загружены'");
				ПоказатьОповещениеПользователя(ТекстОповещения, , ПояснениеОповещения, КартинкаОповещения);
			Иначе
				ТекстСообщения = НСтр("ru = 'Данные кодов ЕИС не были загружены'");
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		Иначе
			// Не выводим диагностические сообщения.
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не указан путь к файлу. Загрузка отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ВыполнитьЧтениеКодовИзXML()

// Создаёт FTP-соединение по настройкам формы и вовзращает его.
// В случае неудачи возвращает Неопределено.
&НаКлиенте
Функция НовоеFTPСоединение()
	РезультатФункции = Неопределено;
	Попытка
		РезультатФункции = Новый FTPСоединение(
			FTPХост, 				
			FTPПорт, 				
			FTPПользователь, 		
			FTPПароль, 				
			Неопределено, 				// Без прокси.
			Истина, 					// Пассивный режим.
			0, 							// Таймаут не ограничен.
			Неопределено); 				// Не используем защищенное соединение.
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось созать FTP-соединение по причине: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Неопределено;
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции		// НовоеFTPСоединение()

// Формирует маску поиска FTP ежедневной выгрузки для даты ДатаВход
// в регионе ПредставлениеРегионаВход.
&НаКлиенте
Функция СформироватьМаскуПоискаFTP(ПредставлениеРегионаВход, ДатаВход)
	РезультатФункции = "";
	РезультатФункции = РезультатФункции + "purchasePlan_";
	РезультатФункции = РезультатФункции + ПредставлениеРегионаВход;
	РезультатФункции = РезультатФункции + "_";
	РезультатФункции = РезультатФункции + Формат(Год(ДатаВход), "ЧГ=");
	РезультатФункции = РезультатФункции + Формат(Месяц(ДатаВход), "ЧЦ=2; ЧВН=; ЧГ=");
	РезультатФункции = РезультатФункции + Формат(День(ДатаВход), "ЧЦ=2; ЧВН=; ЧГ=");
	РезультатФункции = РезультатФункции + "_??????_";
	РезультатФункции = РезультатФункции + Формат(Год(ДатаВход), "ЧГ=");
	РезультатФункции = РезультатФункции + Формат(Месяц(ДатаВход), "ЧЦ=2; ЧВН=; ЧГ=");
	РезультатФункции = РезультатФункции + Формат(День(ДатаВход), "ЧЦ=2; ЧВН=; ЧГ=");
	РезультатФункции = РезультатФункции + "_??????_daily_???.xml.zip";
	Возврат РезультатФункции;
КонецФункции		 // СформироватьМаскуПоискаFTP()

#КонецОбласти


#Область СлужебныеПроцедурыНаСервере


&НаСервере
Процедура ИнициализироватьОбменСЭТП()
	ТекущийСотрудникОбмена = ИнтеграцияЦУЗсЭТПСерверУХ.ТекущийСотрудникДляОбмена();
	мЭТП = ИнтеграцияЦУЗсЭТПСерверУХ.ЭТП_Сотрудника(ТекущийСотрудникОбмена);
	
	Если мЭТП.Найти(ЭТП) = Неопределено Тогда
		ВызватьИсключение НСтр(СтрШаблон(
			"ru = 'У сотрудника %1 отсутвует настройка обмена. Настройка выполняется"
				+ " для внешней системы по кнопке ""Настройки обмена""'",
			 ТекущийСотрудникОбмена));
	КонецЕсли;
	ОбновитьСтатусОбменаСЭТП();
	
	Если ЗначениеЗаполнено(ЭТП) Тогда
		Если мЭТП.Найти(ЭТП) = Неопределено Тогда
			мЭТП.Добавить(ЭТП);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПараметрыПодключенияКЭТП();
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыПодключенияКЭТП()
	Если НЕ ЗначениеЗаполнено(ТекущийСотрудникОбмена) ИЛИ НЕ ЗначениеЗаполнено(ЭТП) Тогда
		Возврат;
	КонецЕсли;
	
	// Получаем данные настроек подключения для сотрудника
	ПараметрыПодключенияКЭТП = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьПараметрыПодключенияКЭТП(ЭТП, ТекущийСотрудникОбмена);
КонецПроцедуры


&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусОбменаСЭТП()
	ОписаниеПоследнейТранзакции = ИнтеграцияЦУЗсЭТПСерверУХ.ОписаниеПоследнейТранзакции(ОбъектВыгрузки, ЭТП);
	ОбновитьРеквизитыФормыПоОписаниюСтатуса(ОписаниеПоследнейТранзакции);
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыФормыПоОписаниюСтатуса(ОписаниеПоследнейТранзакции)
	СтатусНаЭТП = ОписаниеПоследнейТранзакции.Статус;
	СотрудникПоследнегоОбменаСЭТП = ОписаниеПоследнейТранзакции.Сотрудник;
	ОшибкаОбменаСЭТП = ОписаниеПоследнейТранзакции.ОшибкаОбменаСЭТП;
	ОписаниеПоследнегоОбмена = ОписаниеПоследнейТранзакции.ОписаниеСобытия;
	ФДок = ПреобразоватьВФорматированныйДокумент(
		ОписаниеПоследнейТранзакции.ТекстОшибки);
	ФДок.ПолучитьHTML(
		ТекстОшибкиОбменаСЭТП, 
		Новый Структура);
	Элементы.НаправлениеПоследнегоОбмена.Заголовок = 
		?(ОписаниеПоследнейТранзакции.ОтЭТПК1С, 
		  НСтр("ru='Направление последнего обмена: к 1С'"), 
		  НСтр("ru='Направление последнего обмена: от 1С'"));
	Если ЗначениеЗаполнено(ЭТП) Тогда
		АдресНаЕИС = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьАдресЗакупкиНаСайтеЭТП(ЕИС, ОбъектВыгрузки);
		НомерНаЕИС = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьНомерЗакупкиНаЭТП(ЕИС, ОбъектВыгрузки);
		СтатусНаЕИС = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьСтатусОбъектаНаЭТП(ЕИС, ОбъектВыгрузки);
	иначе
		СтатусНаЕИС = "";
		НомерНаЕИС = "";
		АдресНаЕИС = "";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРеквизитовОбменаНаСервере()
	ОбновитьСтатусОбменаСЭТП();
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаСервере
Функция ПодготовитьСинхронизациюНаСервере(ОбновитьПараметрыПодключения) Экспорт
	ПоляОписанияТранзакции = ИнтеграцияЦУЗсЭТПСерверУХ.ШаблонОписанияТранзакцииОбмена();
	ПоляОписанияТранзакции.Сотрудник = ТекущийСотрудникОбмена;
	ПоляОписанияТранзакции.Организация = Организация;
	ПоляОписанияТранзакции.Статус = СтатусНаЭТП;
	ПоляОписанияТранзакции.ЭТП = ЭТП;
	Если ОбновитьПараметрыПодключения Тогда
		ОбновитьПараметрыПодключенияКЭТП();
	КонецЕсли;
	Возврат ПоляОписанияТранзакции;
КонецФункции

&НаСервере
Процедура ПослеОбменаНаСервере(ОписаниеОбмена)
	Если ОписаниеОбмена.флТранзакцияЗавершиласьУспешно Тогда
		// Обновить значения реквизитов обмена на форме
		ОбновитьРеквизитыФормыПоОписаниюСтатуса(ОписаниеОбмена.ПоляОписанияТранзакции);
	
		// Обновим объект если нужно
		Если ТипЗнч(ОбъектВыгрузки) = Тип("СправочникСсылка.Лоты") Тогда
			// Изменить статус лота по статусу обмена
			НовыйСтатус = ИнтеграцияЦУЗсЭТПСерверУХ.СтатусЗакупкиПоСтатусуПубликации(СтатусНаЭТП);
			флУстановитьЭТПЛота = НЕ ЗначениеЗаполнено(ОбъектВыгрузки.ЭТП);
			флОбновитьВыборАльтернатив = (ОписаниеОбмена.КомандаОбмена = "ПолучитьПротоколыВыбораПоставщиков");
			флОбновитьПротоколОтмены = Ложь; //(ОписаниеОбмена.КомандаОбмена = "ОтменитьЗакупку");
			
			Если флУстановитьЭТПЛота ИЛИ флОбновитьВыборАльтернатив ИЛИ флОбновитьПротоколОтмены Тогда
				ОбъектЛот = ОбъектВыгрузки.ПолучитьОбъект();
				
				Если флУстановитьЭТПЛота Тогда
					ОбъектЛот.ЭТП = ЭТП;
				КонецЕсли;
				
				Если флОбновитьВыборАльтернатив Тогда
					ОбъектЛот.ОбновитьСостояниеВыбораАльтернатив();
				КонецЕсли;
				
				Если флОбновитьПротоколОтмены Тогда
					ОбъектЛот.НомерПротоколаОтменыПроцедурыНаЭТП = НомерПротоколаОтменыПроцедурыНаЭТП;
					ОбъектЛот.ПричинаОтказаОтПроведения = ПричинаОтказаОтПроведения;
				КонецЕсли;
				
				ОбъектЛот.Записать();
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ОбъектВыгрузки) = Тип("ДокументСсылка.ПрограммаЗакупок") Тогда
			
		ИначеЕсли ТипЗнч(ОбъектВыгрузки) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			
		КонецЕсли;
		
	Иначе
		Если ОписаниеОбмена.ПоляОписанияТранзакции.ЗаписанаВЖурнал Тогда
			// Отображаем на форме в виде ошибки последней транзакции обмена.
			ОбновитьРеквизитыФормыПоОписаниюСтатуса(ОписаниеОбмена.ПоляОписанияТранзакции);
		Иначе
			// Ошибка проверки данных: выводим предупреждение.
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = 
				НСтр("ru='Обмен невозможен:'") + Символы.ПС + ОписаниеОбмена.ПоляОписанияТранзакции.ТекстОшибки;
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОформлениеФормы();

КонецПроцедуры

&НаСервере
Процедура ОбъектВыгрузкиПриИзмененииНаСервере()
	ОбновитьРеквизитыОбъектаВыгрузки();
	ПриИзмененииРеквизитовОбменаНаСервере();
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеФормы()
	флВыбранаОрганизация = ЗначениеЗаполнено(Организация);
	флВыбранОбъект = флВыбранаОрганизация
		И ЗначениеЗаполнено(ОбъектВыгрузки);
	флЕщеНебылоОбмена = НЕ ЗначениеЗаполнено(СтатусНаЭТП);
	
	Элементы.ОбъектВыгрузки.ТолькоПросмотр = НЕ флВыбранаОрганизация;
	Элементы.КомандаЖурналОбменаСЭТП.Доступность = флВыбранОбъект;
	Элементы.ГруппаПубликация.Видимость = флВыбранОбъект;
	Элементы.ГруппаКомандыОбменаСЭТП.Видимость = флВыбранОбъект;
	
	Если флВыбранОбъект Тогда
		флЭтоЗакупка = (ТипЗнч(ОбъектВыгрузки) = Тип("СправочникСсылка.ЗакупочныеПроцедуры"));
		флЭтоПрограммаЗакупки = (ТипЗнч(ОбъектВыгрузки) = Тип("ДокументСсылка.ПрограммаЗакупок"));
		флЭтоПротокол = ТипыПротоколов.НайтиПоЗначению(ТипЗнч(ОбъектВыгрузки)) <> Неопределено;
		флЭтоДоговор = (ТипЗнч(ОбъектВыгрузки) = Тип("СправочникСсылка.ДоговорыКонтрагентов"));
		флЭтоИсполнение = (ТипЗнч(ОбъектВыгрузки) = Тип("ДокументСсылка.СведенияОбИсполненииДоговора"));
		флУжеОпубликован = ЗначениеЗаполнено(НомерНаЕИС);
		флОтмененаПубликация = ЗначениеЗаполнено(ПротоколОтменыЗакупки);
		флЕстьПроектПрограммыЗакупки = флЭтоПрограммаЗакупки
			И ЗначениеЗаполнено(ОбъектВыгрузки.ОрганизацияДляЗаключенияДоговора)
			И ОбъектВыгрузки.ОрганизацияДляЗаключенияДоговора.ПредусмотренаПроверкаПроектаПланаЗакупок;
		
		// Команды обмена
		Элементы.ОтправитьПроектПланаЗакупки.Видимость = флЕстьПроектПрограммыЗакупки;
		Элементы.ОтправитьПроцедуруЗакупкиНаЭТП.Видимость = флЭтоЗакупка;
		Элементы.ОтменитьПубликациюНаЭТП.Видимость = флОтмененаПубликация;
		Элементы.ОтправитьПланЗакупки.Видимость = флЭтоПрограммаЗакупки;
		Элементы.ОтправитьДоговорНаЭТП.Видимость = флЭтоДоговор;
		Элементы.ОтправитьПротокол.Видимость = флЭтоПротокол;
			
		// Информация о статусах и данные с ЭТП
		Элементы.ГруппаСтатусыЕИС.Видимость = НЕ ПустаяСтрока(НомерНаЕИС);
		Элементы.ГруппаПротоколОтменыПроцедуры.Видимость = флОтмененаПубликация;
	
		// Описание последнего обмена
		Элементы.ГруппаСообщениеОбмена.Видимость = ЗначениеЗаполнено(СотрудникПоследнегоОбменаСЭТП);
		
		Если ОшибкаОбменаСЭТП Тогда
			Элементы.КартинкаСтатусОбменаСЭТП.Картинка = БиблиотекаКартинок.ИнтернетПоддержкаВнимание;
			ЭЛементы.ТекстОшибкиОбменаСЭТП.Видимость = Истина;
		Иначе
			Элементы.КартинкаСтатусОбменаСЭТП.Картинка = БиблиотекаКартинок.ИнтернетПоддержкаПользователей;
			ЭЛементы.ТекстОшибкиОбменаСЭТП.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	#Если НЕ ВебКлиент Тогда
		Элементы.КомандаЗагрузитьИзFTP.Доступность = Истина;
	#Иначе
		Элементы.КомандаЗагрузитьИзFTP.Доступность = Ложь;
	#КонецЕсли	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыОбъектаВыгрузки()
	ТипОбъектаВыгрузки = ТипЗнч(ОбъектВыгрузки);
	
	НовыйСтатус							= Неопределено;
	ПротоколОтменыЗакупки				= Неопределено;
	ПротоколВыбораПобедителей			= Неопределено;
	НомерПротоколаОтменыПроцедурыНаЭТП	= "";
	ПричинаОтказаОтПроведения			= "";
	
	Если ТипОбъектаВыгрузки = Тип("СправочникСсылка.ЗакупочныеПроцедуры") Тогда
		ПротоколОтменыЗакупки				= Документы.ПротоколОтменыЗакупочнойПроцедуры.ПолучитьДляЗакупки(ОбъектВыгрузки);
		ПротоколВыбораПобедителей			= Документы.ПротоколВыбораПобедителей.ПолучитьДляЗакупки(ОбъектВыгрузки);
		НомерПротоколаОтменыПроцедурыНаЭТП	= ПротоколОтменыЗакупки.НомерПротокола;
		ПричинаОтказаОтПроведения			= ПротоколОтменыЗакупки.ПричинаОтказаОтПроведения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПреобразоватьВФорматированныйДокумент(Текст)
	ФДок = Новый ФорматированныйДокумент;
	мТекстыИУИДы = РазбитьТекстПоУИДам(Текст);
	Для Каждого ТекстУИД Из мТекстыИУИДы Цикл
		ФДок.Добавить(ТекстУИД.Текст, Тип("ТекстФорматированногоДокумента"));
		Если ТекстУИД.УИД Тогда
			ВставитьСсылкиУИДВФорматированныйДокумент(
				ФДок,
				ТекстУИД.Текст);
		КонецЕсли;
	КонецЦикла;
	Возврат ФДок;
КонецФункции

// Формат: (Ссылка1, Ссылка2,..)
// Либо ничего не добавляем, если ссылок не найдено.
//
&НаСервереБезКонтекста
Процедура ВставитьСсылкиУИДВФорматированныйДокумент(ФДок,
													СтрокаУИД)
	ТЗСсылок = 
		ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьТаблицуСсылокПоУИД(
			СтрокаУИД);
	КолСсылок = ТЗСсылок.Количество();
	Если КолСсылок > 0 Тогда
		ФДок.Добавить(" (", Тип("ТекстФорматированногоДокумента"));
		Для Ном = 0 По КолСсылок-1 Цикл
			СтрокаССылки = ТЗСсылок[Ном];
			ВставитьТекстСсылкиДляУИД(
				ФДок,
				СтрокаССылки.Ссылка, 
				СтрокаССылки.НомерВерсии);
			Если Ном < КолСсылок-1 Тогда
				ФДок.Добавить(", ", Тип("ТекстФорматированногоДокумента"));
			КонецЕсли;
		КонецЦикла;
		ФДок.Добавить(")", Тип("ТекстФорматированногоДокумента"));
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура  ВставитьТекстСсылкиДляУИД(ФДок, Ссылка, НомерВерсии)
	ПредставлениеСсылки = Строка(Ссылка);
	Если НомерВерсии > 0 Тогда
		ПредставлениеВерсии = НСтр("ru = ' вер. №%НомерВерсии%  для ЕИС'");
		ПредставлениеВерсии = СтрЗаменить(ПредставлениеВерсии, "%НомерВерсии%", Строка(НомерВерсии));
		ПредставлениеСсылки = ПредставлениеСсылки + ПредставлениеВерсии;
	КонецЕсли;
	ФТекст = ФДок.Добавить(ПредставлениеСсылки, Тип("ТекстФорматированногоДокумента"));
	ФТекст.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Ссылка);
КонецПроцедуры

// Возвращает массив структур (УИД: Булево, Текст: Строка).
// Элемент массива - это описания последовательно расположенных 
// частей текста. Если в тексте встретился УИД, то он будет выделен
// в отдельный кусок, с флагом УИД == Истина.
// 
&НаСервереБезКонтекста
Функция РазбитьТекстПоУИДам(Текст)
	мТекст = Новый Массив;
	ТекПоз = 1;
	ТекстДлина = СтрДлина(Текст);
	Пока ТекПоз <= ТекстДлина Цикл
		Поз = НайтиУИДВСтроке(Текст, ТекПоз);
		Если Поз = 0 Тогда
			// УИД не найден
			мТекст.Добавить(
				ПолучитьОписаниеТекстаУИД(Сред(Текст, ТекПоз), Ложь));
			Прервать;
		КонецЕсли;
		Если ТекПоз < Поз Тогда
			мТекст.Добавить(
				ПолучитьОписаниеТекстаУИД(Сред(Текст, ТекПоз, Поз - ТекПоз), Ложь));
		КонецЕсли;
		мТекст.Добавить(
			ПолучитьОписаниеТекстаУИД(Сред(Текст, Поз, 36), Истина));
		ТекПоз = Поз + 36;
	КонецЦикла;
	Возврат мТекст;
КонецФункции

&НаСервереБезКонтекста
Функция НайтиУИДВСтроке(Текст, СПозиции)
	мТекст = Новый Массив;
	ТекПоз = СПозиции;
	ДлинаПоиска = СтрДлина(Текст) - 36 + 1;
	Пока ТекПоз <= ДлинаПоиска Цикл
		ТекСимвол = Сред(Текст, ТекПоз, 1);
		Если ЭтоСимволНачалаСтрокиУИД(ТекСимвол)
			 И ЭтоСтрокаУИД(Сред(Текст, ТекПоз, 36)) Тогда
			Возврат ТекПоз;
		КонецЕсли;
		ТекПоз = ТекПоз + 1;
	КонецЦикла;
	Возврат 0; // Не нашли
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСимволНачалаСтрокиУИД(Символ)
	Возврат СтрНайти("abc012345def6789", НРег(Символ)) > 0;
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСтрокаУИД(Текст)
	Если Сред(Текст, 9, 1) = "-"
			И Сред(Текст, 14, 1) = "-"
			И Сред(Текст, 19, 1) = "-"
			И Сред(Текст, 24, 1) = "-" Тогда
		Возврат НРег(Новый УникальныйИдентификатор(Текст)) = НРег(Текст);
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеТекстаУИД(Текст, УИД)
	Возврат Новый Структура("Текст, УИД", Текст, УИД);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОрганизациюИзОбъекта(Объект)
	ТипОбъекта = ТипЗнч(Объект);
	Если ТипОбъекта = Тип("ДокументСсылка.ПрограммаЗакупок") Тогда
		Возврат Объект.ОрганизацияДляЗаключенияДоговора;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ЗакупочныеПроцедуры") Тогда
		Возврат Объект.ОрганизаторЗакупки;
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ПротоколВыбораПобедителей") Тогда
		Возврат Объект.ЗакупочнаяПроцедура.ОрганизаторЗакупки;
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.СведенияОбИсполненииДоговора") Тогда
		Возврат Объект.ДоговорКонтрагента.Организация;
	ИначеЕсли Объект <> Неопределено
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
													Объект, "Организация") Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Организация");
	КонецЕсли;
	Возврат Справочники.Организации.ПустаяСсылка();
КонецФункции

// Записывает в документ ПрограммаЗакупок коды ЕИС из соответсвия СоответствиеКодовВход.
&НаСервереБезКонтекста
Функция УстановитьКодыЕисПрограммыЗакупок(СоответствиеКодовВход)
	// Инициализация.
	РезультатФункции = Истина;
	СтатусРазмещен = Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Размещен;
	Если ТипЗнч(СоответствиеКодовВход) = Тип("Соответствие") Тогда
		НачатьТранзакцию();
		ЕстьОшибки = Ложь;
		// Формирование массива кодов ЕИС для поиска.
		МассивКлючей = Новый Массив;
		Для Каждого ТекСоответствиеКодовВход Из СоответствиеКодовВход Цикл
			МассивКлючей.Добавить(ТекСоответствиеКодовВход.Ключ);
		КонецЦикла;	
		// Получение документов по заданным кодам.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПрограммаЗакупок.Ссылка КАК Ссылка,
		|	ПрограммаЗакупок.УИД_ЕИС КАК УИД_ЕИС,
		|	ПрограммаЗакупок.РегистрационныйНомер КАК РегистрационныйНомер
		|ИЗ
		|	Документ.ПрограммаЗакупок КАК ПрограммаЗакупок
		|ГДЕ
		|	ПрограммаЗакупок.УИД_ЕИС В(&УИД_ЕИС)
		|	И НЕ ПрограммаЗакупок.ПометкаУдаления";
		Запрос.УстановитьПараметр("УИД_ЕИС", МассивКлючей);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДокументСсылка = ВыборкаДетальныеЗаписи.Ссылка;
			Попытка
				// Поиск кода в соответсвии.
				ТекКлюч = ВыборкаДетальныеЗаписи.УИД_ЕИС;
				НовыйНомер = СоответствиеКодовВход.Получить(ТекКлюч);
				Если НовыйНомер <> Неопределено Тогда
					// Непосредственная перезапись документа.
					УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(ДокументСсылка, СтатусРазмещен);
					РегистрыСведений.ВерсииОбъектовДляЕИС.УстановитьФлагРазмещенияПоОбъекту(ДокументСсылка, Истина);
					// Установка состояния для подчинённых строк плана закупок.
					МассивСтрокПлана = Документы.ПрограммаЗакупок.ПолучитьСтрокиПлана(ДокументСсылка, Истина);
					Для Каждого ТекМассивСтрокПлана Из МассивСтрокПлана Цикл
						УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(ТекМассивСтрокПлана, СтатусРазмещен);
						РегистрыСведений.ВерсииОбъектовДляЕИС.УстановитьФлагРазмещенияПоОбъекту(ТекМассивСтрокПлана, Истина);
					КонецЦикла;	
				Иначе
					ЕстьОшибки = Истина;
					ТекстСообщения = НСтр("ru = 'Не найден регистрационный номер для кода ЕИС %Код%. Операция отменена.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Код%", Строка(ТекКлюч));
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				КонецЕсли;
			Исключение
				ЕстьОшибки = Истина;
				ТекстСообщения = НСтр("ru = 'При установке кодов ЕИС для программы закупок ""%ПрограммаЗакупок%"" произошли ошибки: %ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПрограммаЗакупок%", Строка(ДокументСсылка));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецПопытки;
		КонецЦикла;
		Если НЕ ЕстьОшибки Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
		РезультатФункции = Не ЕстьОшибки;
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный вариант входного соответствия для установки кодов ЕИС: %Значение%. Операция отменена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Значение%", Строка(СоответствиеКодовВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Ложь;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// УстановитьКодыЕисПрограммыЗакупок()

// Загружает коды ЕИС по тексту xml-выгрузки ТекстЗагрузкиВход.
&НаСервереБезКонтекста
Функция СчитатьКодыНаСервере(ТекстЗагрузкиВход)
	// Инициализация.
	РезультатФункции = Ложь;
	ЕстьОшибки = Ложь;
	Загружено = Ложь;
	Если ТипЗнч(ТекстЗагрузкиВход) = Тип("Строка") Тогда
		// Чтение XML-файла.
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстЗагрузкиВход);
		Попытка
			ОбработкаОбъект = Обработки.ИнтеграцияСЕИС_v40.Создать();
			ЕИСФабрикаXDTO = ОбработкаОбъект.ПолучитьФабрикуXDTO();
			ТипУзлаСодержимое = ЧтениеXML.ПерейтиКСодержимому();
			Если ТипУзлаСодержимое <> ТипУзлаXML.Ничего Тогда
				ЛокальноеИмя = НРег(СокрЛП(ЧтениеXML.ЛокальноеИмя));
				Если ЛокальноеИмя = "purchaseplan"  Тогда
					ПространствоИмен = "http://zakupki.gov.ru/223fz/purchasePlan/1";
					КорневыеОбъекты = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьКорневыеОбъектыПространстваИмен(
						ЕИСФабрикаXDTO,	ПространствоИмен);
					ТипЭкспорт = КорневыеОбъекты.Получить("purchasePlan").Тип;
					ОбъектXDTO = ЕИСФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипЭкспорт);
					Элемент_purchasePlanData = ОбъектXDTO.body.item.purchasePlanData;
					// Извлечение реквизитов.
					Свойства_purchasePlanData = Элемент_purchasePlanData.Свойства();
					УИД_ЕИС					 = "";
					Если Свойства_purchasePlanData.Получить("guid") <> Неопределено Тогда
						УИД_ЕИС					 = Элемент_purchasePlanData.guid;
					Иначе
						УИД_ЕИС					 = "";
					КонецЕсли;
					РегистрационныйНомер	 = "";
					Если Свойства_purchasePlanData.Получить("registrationNumber") <> Неопределено Тогда
						РегистрационныйНомер	 = Элемент_purchasePlanData.registrationNumber;
					Иначе                   
						РегистрационныйНомер	 = "";
					КонецЕсли;
					// Запись найденных реквизитов в документы.
					Если (ЗначениеЗаполнено(УИД_ЕИС)) И (ЗначениеЗаполнено(РегистрационныйНомер)) Тогда
						УИД_ЕИС					 = Элемент_purchasePlanData.guid;
						РегистрационныйНомер	 = Элемент_purchasePlanData.registrationNumber;
						СоответствиеКодов = Новый Соответствие;
						СоответствиеКодов.Вставить(УИД_ЕИС, РегистрационныйНомер);
						Загружено = УстановитьКодыЕисПрограммыЗакупок(СоответствиеКодов);
					Иначе
						// Не удалось получить реквизиты. Пропускаем.
					КонецЕсли;
				Иначе
					// Неизвестный вариант. Пропускаем.
				КонецЕсли;
			КонецЕсли;
		Исключение
			ТекстСообщения = НСтр("ru = 'При загрузке кодов ЕИС произошли ошибки: %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			ЕстьОшибки = Истина;
		КонецПопытки;
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный вариант входных данных для загрузки: %Тип%. Загрузка отменена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Тип%", Строка(Тип(ТекстЗагрузкиВход)));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		ЕстьОшибки = Истина;
	КонецЕсли;
	// Вывод итогового результата.
	РезультатФункции = ((Загружено) и (НЕ ЕстьОшибки));
	Возврат РезультатФункции;
КонецФункции		 // СчитатьКодыНаСервере()

// По коду ОКАТО КодПоОкатоВход получает представление региона на FTP госзакупок.
&НаСервереБезКонтекста
Функция ПолучитьПредставлениеРегионаНаFTP(КодПоОкатоВход)
	РезультатФункции = "";
	Макет = Обработки.УправлениеИнтеграциейЦУЗсЭТП.ПолучитьМакет("ОкатоРегионовРоссии");
	КоличествоСтрок = Макет.ВысотаТаблицы;
	Для НомерСтроки = 2 По КоличествоСтрок Цикл
		ОбластьПредставление	 = Макет.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C1");
		ОбластьОКАТО			 = Макет.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C2");
		РегионПредставлениеСтрока	 = СокрЛП(ОбластьПредставление.Текст);
		ОкатоПредставлениеСтрока	 = СокрЛП(ОбластьОКАТО.Текст);
		Если СокрЛП(КодПоОкатоВход) = ОкатоПредставлениеСтрока Тогда
			РезультатФункции = РегионПредставлениеСтрока;
			Прервать;
		Иначе
			// Выполняем поиск далее.
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьПредставлениеРегионаНаFTP()

#КонецОбласти


#Область ВыборОбъектовОбмена


&НаКлиенте
Процедура ОбработатьВыборТипаОбъекта(ВыбранныйТипОбъекта, ДопПараметры) Экспорт
	Если ВыбранныйТипОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("Ключ", ДопПараметры.ТекущееЗначение);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормыВыбора.Вставить("РежимВыбора", Истина);
	ПараметрыФормыВыбора.Вставить("Отбор",
		Новый Структура("Организация", Организация));
	ОбработчикВыбораОбъектаВыгрузки = 
		Новый ОписаниеОповещения(
			"ОбработатьВыборСсылкиНаОбъектВыгрузки", ЭтаФорма, ДопПараметры);
	Если ВыбранныйТипОбъекта.Значение = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ПутьФормыВыбора = "Справочник.Лоты.Форма.ФормаВыбораДоговораЛота";
	ИначеЕсли ВыбранныйТипОбъекта.Значение = Тип("СправочникСсылка.ЗакупочныеПроцедуры") Тогда
		ПутьФормыВыбора = "Справочник.ЗакупочныеПроцедуры.ФормаВыбора";
	ИначеЕсли ВыбранныйТипОбъекта.Значение = Тип("ДокументСсылка.ПротоколВыбораПобедителей") Тогда
		ПараметрыФормыВыбора.Отбор.Вставить("Проведен", Истина);
		ПараметрыФормыВыбора.Отбор.Вставить("СпособВыбораПоставщика",
			ПредопределенноеЗначение(
				"Перечисление.СпособыВыбораПоставщика.ЗакупкаУЕдинственногоПоставщика"));
		ПутьФормыВыбора = "Документ.ПротоколВыбораПобедителей.ФормаВыбора";
	ИначеЕсли ВыбранныйТипОбъекта.Значение = Тип("ДокументСсылка.СведенияОбИсполненииДоговора") Тогда
		ПараметрыФормыВыбора.Отбор.Вставить("Проведен", Истина);
		ПутьФормыВыбора = "Документ.СведенияОбИсполненииДоговора.ФормаВыбора";
	ИначеЕсли ВыбранныйТипОбъекта.Значение = Тип("ДокументСсылка.ПрограммаЗакупок") Тогда
		ПараметрыФормыВыбора.Вставить("ТолькоФЗ223", Истина);
		ПараметрыФормыВыбора.Отбор.Вставить("Проведен", Истина);
		ПараметрыФормыВыбора.Отбор.Вставить(
			"ОрганизацияДляЗаключенияДоговора", Организация);
		ПутьФормыВыбора = "Документ.ПрограммаЗакупок.ФормаВыбора";
	ИначеЕсли ВыбранныйТипОбъекта.Значение = Тип("ДокументСсылка.РегистрацияОбъемаЗакупокУМСП") Тогда
		ПараметрыФормыВыбора.Отбор.Вставить("Проведен", Истина);
		ПараметрыФормыВыбора.Отбор.Вставить("Организация", Организация);
		ПутьФормыВыбора = "Документ.РегистрацияОбъемаЗакупокУМСП.ФормаВыбора";
	ИначеЕсли ВыбранныйТипОбъекта.Значение = Тип("ДокументСсылка.РегистрацияОтчетаОЗаключенныхДоговорах") Тогда
		ПараметрыФормыВыбора.Отбор.Вставить("Проведен", Истина);
		ПараметрыФормыВыбора.Отбор.Вставить("Организация", Организация);
		ПутьФормыВыбора = "Документ.РегистрацияОтчетаОЗаключенныхДоговорах.ФормаВыбора";
	Иначе
		ВызватьИсключение 
			НСтр(СтрШаблон(
					"ru='Не предусмотрена отправка объектов типа ""%1""'", 
					ВыбранныйТипОбъекта.Значение));
	КонецЕсли;
	ОткрытьФорму(ПутьФормыВыбора,
		ПараметрыФормыВыбора, 
		ЭтаФорма,
		,
		,
		,
		ОбработчикВыбораОбъектаВыгрузки, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);			
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСсылкиНаОбъектВыгрузки(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектВыгрузки = Результат;
	ОбъектВыгрузкиПриИзменении(Элементы.ОбъектВыгрузки);
КонецПроцедуры


#КонецОбласти