Перем ОкноЕхс Экспорт;
Перем Ексел Экспорт;
Перем СкрытыеСтроки;
Перем СкрытыеКолонки;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает список значений объектов типа COMОбъект,
// представляющих собой листы исходного файла.
//
Функция ПолучитьСписокЛистовФайла() Экспорт
	
	Если НЕ ОткрытьФайлЕксель() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ТихийРежим Тогда
		#Если Клиент Тогда
		Состояние("Определение рабочей области ...");
		#КонецЕсли
	КонецЕсли;
	КоличествоЛистовДокумента = Ексел.ActiveWorkBook.Sheets.Count;
	СписокЛистов = Новый СписокЗначений;
	Для Инд = 1 По КоличествоЛистовДокумента Цикл
		ТекЛист = Ексел.Sheets.Item(Инд);
		СписокЛистов.Добавить(ТекЛист.Name);
	КонецЦикла;
	Возврат СписокЛистов;
	
КонецФункции

// Возврщает признак того, что файл не существует по его имени.
//
Функция ФайлНеСуществует(ИмяФайла) Экспорт
	
	ОбъектФайл = Новый Файл(ИмяФайла);
	Возврат (НЕ ОбъектФайл.Существует()) ИЛИ ОбъектФайл.ЭтоКаталог();
	
КонецФункции

Функция ОткрытьФайлЕксель()
	
	Попытка
		
		Если Ексел = Неопределено Тогда
	
			Excel_Настройки = Неопределено;
			Ексел = ОбщегоНазначенияMicrosoftExcelКлиентСерверУХ.Создать(Excel_Настройки);
			
			Если Ексел = Неопределено Тогда
				ВызватьИсключение "Не удалось создать COM-объект Microsoft Excel.";
			КонецЕсли;
						
		КонецЕсли;
		
		РабочаяКнига = Ексел.Workbooks.Open(ИмяФайла);	
		Ексел.Visible = Ложь;
		
	Исключение
		Если НЕ ТихийРежим Тогда
			#Если Клиент Тогда
			ПоказатьПредупреждение(, "Не удается открыть файл!");
			#Иначе
			ОбщегоНазначенияУХ.СообщитьОбОшибке("Ошибка открытия файла MS Excel: "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,,СтатусСообщения.Внимание);
			#КонецЕсли
		КонецЕсли;
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Импортирует информацию из таблицы Microsoft Excel в табличный документ.
// 
Функция Импортировать(СоответствиеИмпортируемыхОбластей = Неопределено, ДеревоКоординатРеквизитов = Неопределено) Экспорт
	
	ТаблицаРеквизитов.Очистить();
	ТаблицаТЧ.Очистить();
	
	Если (ПустаяСтрока(СокрЛП(ИмяФайла)) ИЛИ ФайлНеСуществует(СокрЛП(ИмяФайла))) Тогда
		#Если Клиент Тогда
		Если ТихийРежим ИЛИ НЕ ЗаполнитьЗначенияРеквизитов() Тогда
			Возврат Неопределено;
		КонецЕсли;
		#Иначе
			Возврат Неопределено;
		#КонецЕсли
	КонецЕсли;
	
	Если ИмяЛиста = Неопределено Тогда
		
		Если ТихийРежим Тогда
			#Если ВнешнееСоединение Тогда
				Возврат Неопределено;
			#Иначе
				ИмяЛиста = 1;
			#КонецЕсли
		Иначе
			ЛистыОтчета = ПолучитьСписокЛистовФайла();
			
			Если ЛистыОтчета = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			ВыбранныйЛист = Неопределено;
			
			#Если Клиент Тогда
				Если ЛистыОтчета.Количество() = 1 Тогда
					ВыбранныйЛист = ЛистыОтчета[0];
				Иначе
					ВыбранныйЛист = ЛистыОтчета.ВыбратьЭлемент("Выберите лист для импорта");
				КонецЕсли;
			#Иначе
				
				Если ЛистыОтчета.Количество() = 1 Тогда
					ВыбранныйЛист = ЛистыОтчета[0];
				КонецЕсли;
				
			#КонецЕсли
			
			Если ВыбранныйЛист = Неопределено Тогда
				Ексел.ActiveWorkbook.Close(Ложь);
				Возврат Неопределено;
			Иначе
				ИмяЛиста = ВыбранныйЛист.Значение;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Ексел = Неопределено Тогда
		ОткрытьФайлЕксель();
	КонецЕсли;
	
	Если ТипЗнч(ИмяЛиста) = Тип("Строка") Тогда
		ОкноЕхс = Ексел.Sheets(ИмяЛиста);
	ИначеЕсли ТипЗнч(ИмяЛиста) = Тип("Число") Тогда
		ОкноЕхс = Ексел.Sheets.Item(ИмяЛиста);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ОкноЕхс.Activate();
	
	Если СниматьЗащиту Тогда
		
		ОкноЕхс.Unprotect(Пароль);
		
	КонецЕсли;
	
	Попытка
		ОкноЕхс.Application.ActiveCell().SpecialCells(11).Select();  // Последняя ячейка.
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке("Ошибка при обращении к ячейкам файла Excel.
		|" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	
    Право	= Макс(1, ОкноЕхс.Application.ActiveCell().Column + ОкноЕхс.Application.Selection.Columns.Count - 1);
    Низ		= Макс(1, ОкноЕхс.Application.ActiveCell().Row + ОкноЕхс.Application.Selection.Rows.Count - 1);
	
	ТаблДок		= Новый ТабличныйДокумент;
		
	МасштабПоВертикали		= ?(МасштабПоВертикали = 0,		110,	МасштабПоВертикали);
	МасштабПоГоризонтали	= ?(МасштабПоГоризонтали = 0,	130,	МасштабПоГоризонтали);
	
	Если НЕ РежимИмпортаДанных Тогда
		Если НЕ ТихийРежим Тогда
			#Если Клиент Тогда
			Состояние("Установка ширины столбцов ...");
			#КонецЕсли
		КонецЕсли;
		Сдвиг = 0;
		Для Столб = 1 По Право Цикл
			Ячейка = ОкноЕхс.Cells(1, Столб);
			Если Ячейка.EntireColumn.Hidden() = 0 Тогда
				ТаблДок.Область("R1C" + Формат(Столб - Сдвиг, "ЧГ=0")).ШиринаКолонки = Ячейка.ColumnWidth() * МасштабПоГоризонтали / 100;
			Иначе
				Сдвиг = Сдвиг + 1;
			КонецЕсли;
		КонецЦикла;
			
		Если НЕ ТихийРежим Тогда
			#Если Клиент Тогда
			Состояние("Установка высоты строк ...");
			#КонецЕсли
		КонецЕсли;
		Сдвиг = 0;
		Для Стр = 1 По Низ Цикл
			Ячейка = ОкноЕхс.Cells(Стр, 1);
			Если Ячейка.EntireRow.Hidden() = 0 Тогда
				ТаблДок.Область("R" + Формат(Стр - Сдвиг, "ЧГ=0")+"C1").ВысотаСтроки = Ячейка.RowHeight() * МасштабПоВертикали / 100;
			Иначе
				Сдвиг = Сдвиг + 1;
			КонецЕсли;
		КонецЦикла;
	Иначе
		РасширенныйРежим = СоответствиеИмпортируемыхОбластей <> Неопределено;
	КонецЕсли;
	
	#Если Клиент Тогда
		// именование секций
		Если НЕ ТихийРежим Тогда
			Состояние("Именование горизонтальных секций ...");
		КонецЕсли;
	#КонецЕсли
	
	КоличествоИмен = Ексел.ActiveWorkbook.ActiveSheet.Names.Count;
	ИспользованиеГлобальныхИмен = КоличествоИмен = 0 И Ексел.ActiveWorkBook.Sheets.Count = 1;
	
	Если ИспользованиеГлобальныхИмен Тогда
		
		Если НЕ ТихийРежим Тогда
			#Если Клиент Тогда
			Состояние("Именование горизонтальных секций. Используются " + ?(ИспользованиеГлобальныхИмен, "глобальные", "локальные") + " имена ...");
			#КонецЕсли
		КонецЕсли;
		
		КоличествоИмен = Ексел.ActiveWorkbook.Names.Count;
		
	КонецЕсли;
	
	Если ДеревоКоординатРеквизитов = Неопределено Тогда
		// Определение именованных областей.
		Для Инд = 1 По КоличествоИмен Цикл
			
			ТекИмя      = ?(ИспользованиеГлобальныхИмен
							, Ексел.ActiveWorkbook.Names.Item(Инд)
							, Ексел.ActiveWorkbook.ActiveSheet.Names.Item(Инд)); //Обрабатывается только локальное именование областей.
		
			Попытка
				КоличествоКолонок = ТекИмя.RefersToRange.Columns.Count;
			Исключение
				Продолжить;
			КонецПопытки;
			Если КоличествоКолонок = 0 ИЛИ КоличествоКолонок = 256 Тогда // считаем такую область - секцией
				КоличествоСтрок = ТекИмя.RefersToRange.Rows.Count;
				КоординатаВерхнейСтроки = ТекИмя.RefersToRange.Rows.Item(1).Row;
				КоординатаНижнейСтроки = ТекИмя.RefersToRange.Rows.Item(КоличествоСтрок).Row;
				Имя = СтрЗаменить(ТекИмя.Name, Ексел.ActiveWorkBook.ActiveSheet.Name + "!", "");
				ТаблДок.Область(КоординатаВерхнейСтроки, 0, КоординатаНижнейСтроки, 0).Имя = Имя;
				
				// Сохранение именованных областей в таблицу
				Если РежимИмпортаДанных И РасширенныйРежим Тогда
					ТекМассив = ОкноЕхс.Range(ОкноЕхс.Cells(КоординатаВерхнейСтроки,1), ОкноЕхс.Cells(КоординатаНижнейСтроки, Право)).Value.Выгрузить();
					СоответствиеИмпортируемыхОбластей.Вставить(Имя, ТекМассив);
				КонецЕсли;
			КонецЕсли;
			
			
		КонецЦикла;
		
		Если РежимИмпортаДанных Тогда
			
			ОписаниеПримитивныхТипов = Новый ОписаниеТипов("Дата, Число, Булево");
			МассивДанныхОтчета = ОкноЕхс.Range(ОкноЕхс.Cells(1, 1), ОкноЕхс.Application.ActiveCell()).Value.Выгрузить();
			Для ИндКолонка = 0 По МассивДанныхОтчета.ВГраница() Цикл
				ДанныеКолонки = МассивДанныхОтчета[ИндКолонка];
				Для ИндСтрока = 0 По ДанныеКолонки.ВГраница() Цикл
					ТекЗначение = ДанныеКолонки[ИндСтрока];
					
					Если ТекЗначение = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ТипЗначения = ТипЗнч(ТекЗначение);
					ОбластьДокумента = ТаблДок.Область(ИндСтрока + 1, ИндКолонка + 1);
					Если ОписаниеПримитивныхТипов.СодержитТип(ТипЗначения) Тогда
						ОбластьДокумента.СодержитЗначение = Истина;
						Массив = Новый Массив;
						Массив.Добавить(ТипЗначения);
						ОбластьДокумента.ТипЗначения = Новый ОписаниеТипов(Массив);
						ОбластьДокумента.Значение = ТекЗначение;
					Иначе
						ОбластьДокумента.СодержитЗначение = Ложь;
						ОбластьДокумента.Текст = ТекЗначение;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			ОкноЕхс.Parent.Close(Ложь);
			ОкноЕхс = Неопределено;
			Возврат ТаблДок;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиРеквизитов = ДеревоКоординатРеквизитов.Строки.НайтиСтроки(Новый Структура("ТабличнаяЧасть", Ложь));
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		
		Для Каждого Строка Из СтрокиРеквизитов Цикл
			Попытка
				ТекМассив = ОкноЕхс.Rows(Строка.Строка).Value.Выгрузить();
				
				Если Строка.Строки.Количество() = 0 Тогда
					
					НоваяСтрока[Строка.Реквизит] = ТекМассив[Строка.Колонка - 1][0];
					
				Иначе
					Для Каждого ВнСтрока Из Строка.Строки Цикл
						ИмяКолонки = Строка.Реквизит + "_" + ВнСтрока.Реквизит;
						НоваяСтрока[ИмяКолонки] = ТекМассив[ВнСтрока.Колонка - 1][0];
					КонецЦикла;
				КонецЕсли;
				
			Исключение
				ОкноЕхс.Parent.Close(Ложь);
				ОкноЕхс = Неопределено;
				Возврат Неопределено;
			КонецПопытки;
		КонецЦикла;
		
		СтрокиТЧ  = ДеревоКоординатРеквизитов.Строки.Найти(Истина, "ТабличнаяЧасть");
		СтруктураРеквизитов = Новый Структура;
		ТекМассив = ОкноЕхс.Range(ОкноЕхс.Rows(СтрокиТЧ.Строка), ОкноЕхс.Rows(Низ)).Value.Выгрузить();
		
		ЧислоСтрокВТаблице = Низ - СтрокиТЧ.Строка + 1;
		
		Для Каждого Строка Из СтрокиТЧ.Строки Цикл
			
			Если Строка.Строки.Количество() = 0 Тогда
				СтруктураРеквизитов.Вставить(Строка.Реквизит, Строка.Колонка);
			Иначе
				Для Каждого ВнСтрока Из Строка.Строки Цикл
					ИмяКолонки = Строка.Реквизит + "_" + ВнСтрока.Реквизит;
					СтруктураРеквизитов.Вставить(Строка.Реквизит + "_" + ВнСтрока.Реквизит, ВнСтрока.Колонка);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Инд = 0 По ЧислоСтрокВТаблице - 1 Цикл
			НоваяСтрока = ТаблицаТЧ.Добавить();
			Для Каждого КиЗ Из СтруктураРеквизитов Цикл
				НоваяСтрока[Киз.Ключ] = ТекМассив[Киз.Значение - 1][Инд];
			КонецЦикла;
		КонецЦикла;
		
		ОкноЕхс.Parent.Close(Ложь);
		ОкноЕхс = Неопределено;
		
		Возврат Новый Структура("ТаблицаРеквизитов, ТаблицаТЧ", ТаблицаРеквизитов, ТаблицаТЧ);
		
	КонецЕсли;
	
	ОбъединенныеОбласти = Новый СписокЗначений;
	СписокИгнорируемых = Новый СписокЗначений;
		
	СкрытыеСтроки	= Новый Массив(Низ);
	СкрытыеКолонки	= Новый Массив(Право);
		
	// заполнение матрицы скрытых строк, колонок
	Для Стр = 1 По Низ Цикл
		СкрытыеСтроки[Стр - 1] = ОкноЕхс.Rows.Item(Стр).Hidden();
	КонецЦикла;
	Для Кол = 1 По Право Цикл
		СкрытыеКолонки[Кол - 1] = ОкноЕхс.Columns.Item(Кол).Hidden();
	КонецЦикла;
	
	ВсегоЯчеек = Низ * Право;
	СдвигПоВертикали = 0;
	Для Стр = 1 По Низ Цикл
		Ячейка = ОкноЕхс.Cells(Стр, 1);
		Если НЕ СкрытыеСтроки[Стр - 1] Тогда
			СдвигПоГоризонтали = 0;
			Для Столб = 1 По Право Цикл
					
				#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
				#КонецЕсли
				Если НЕ ТихийРежим Тогда
					#Если Клиент Тогда
					Состояние(Строка(Цел((((Стр - 1) * Право + Столб) / ВсегоЯчеек) * 100)) + "% завершено ...");
					#КонецЕсли
				КонецЕсли;
					
				Ячейка = ОкноЕхс.Cells(Стр, Столб);
				АдресЯчейки = Ячейка.Address;
					
				Если НЕ СкрытыеКолонки[Столб - 1] Тогда
							
					Если Ячейка.MergeCells Тогда
						СтрокВВыделенном = Ячейка.MergeArea.Rows.Count;
						СтолбцовВВыделенном = Ячейка.MergeArea.Columns.Count;
					Иначе
						СтрокВВыделенном = 1;
						СтолбцовВВыделенном = 1;
					КонецЕсли;
					НачАдр = "R" + Формат(Стр, "ЧГ=0") + "C" + Формат(Столб, "ЧГ=0");
					Если ((СтрокВвыделенном > 1) ИЛИ (СтолбцовВВыделенном > 1)) И (СписокИгнорируемых.НайтиПоЗначению(НачАдр) = Неопределено) Тогда
						СкрытоСтолбцов	= СкрытоКолонокВДиапазоне(Столб, Столб + СтолбцовВВыделенном - 1);
						СкрытоСтрок		= СкрытоСтрокВДиапазоне(Стр, Стр + СтрокВВыделенном - 1);
						КонСтр			= СокрЛП(Формат(Стр + СтрокВВыделенном - 1 - СкрытоСтрок, "ЧГ=0"));
						КонСтолб		= СокрЛП(Формат(Столб + СтолбцовВВыделенном - 1 - СкрытоСТолбцов, "ЧГ=0"));
									
						Диапазон = НачАдр + ":R" + КонСтр + "C" + КонСтолб;
						Если ОбъединенныеОбласти.НайтиПоЗначению(Диапазон) = Неопределено Тогда
							ОбъединенныеОбласти.Добавить(Диапазон);
						КонецЕсли;
									
						Для ИндСтр = 1 По СтрокВВыделенном Цикл
							Для ИндКол = 1 По СтолбцовВВыделенном Цикл
								СписокИгнорируемых.Добавить("R" + Формат(Стр + ИндСтр - 1, "ЧГ=0") + "C" + Формат(Столб + ИндКол - 1, "ЧГ=0"));
							КонецЦикла; 
						КонецЦикла; 
					КонецЕсли;
					ВыбОбласть = ТаблДок.Область("R" + Формат(Стр - СдвигПоВертикали, "ЧГ=0") + "C" + Формат(Столб - СдвигПоГоризонтали, "ЧГ=0"));
							
					//перенос значения
					ЗначениеОбласти = Ячейка.Value;
					Если ЗначениеЗаполнено(ЗначениеОбласти) Тогда
						ТипЗначенияЯчейки = ТипЗнч(ЗначениеОбласти);
						Если ТипЗначенияЯчейки = Тип("Число") ИЛИ ТипЗначенияЯчейки = Тип("Булево") ИЛИ ТипЗначенияЯчейки = Тип("Дата") Тогда
							ВыбОбласть.СодержитЗначение = Истина;
							МассивТипов = Новый Массив;
							МассивТипов.Добавить(ВыбОбласть);
							ВыбОбласть.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
							ВыбОбласть.Значение = ЗначениеОбласти;
						Иначе
							ВыбОбласть.Текст = Ячейка.Text;
						КонецЕсли;
					КонецЕсли;
						
					//// установка признака "по выделенным колонкам"
							
					//перенос параметров шрифта
					ШрифтЯчейки = Ячейка.Font;
					Попытка Полужирный		= Число(ШрифтЯчейки.Bold());			Исключение Полужирный = 0;		КонецПопытки;
					Попытка	Курсив			= Число(ШрифтЯчейки.Italic());			Исключение Курсив = 0;			КонецПопытки;
					Попытка	Подчеркнутый	= ?(ШрифтЯчейки.Underline() = 2, 1, 0);	Исключение Подчеркнутый = 0;	КонецПопытки;
					ВыбОбласть.Шрифт = Новый Шрифт(ВыбОбласть.Шрифт, СокрЛП(Строка(ШрифтЯчейки.Name())), ШрифтЯчейки.Size(), Полужирный, Курсив, Подчеркнутый);
								
					// перенос параметров положения внутри ячейки
					УстановитьВыравниванияИПараметрыРазмещенияТекста(ВыбОбласть, Ячейка);
								
					// перенос рамки	
					ВыбОбласть.ГраницаСверху	= Рамка(Ячейка.Borders(8).LineStyle());
					ВыбОбласть.ГраницаСлева		= Рамка(Ячейка.Borders(7).LineStyle());
					ВыбОбласть.ГраницаСправа	= Рамка(Ячейка.Borders(10).LineStyle());
					ВыбОбласть.ГраницаСнизу		= Рамка(Ячейка.Borders(9).LineStyle());
								
					// перенос цвета фона
					ЦветФона = Ячейка.Interior.Color;
					ВыбОбласть.ЦветФона = Новый Цвет(ЦветФона % 256, Цел(ЦветФона / 256) % 256, Цел(ЦветФона / 65536) % 256);
								
					// перенос цвета текста
					ЦветТекста = Ячейка.Font.Color;
					ВыбОбласть.ЦветТекста = Новый Цвет(ЦветТекста % 256, Цел(ЦветТекста / 256) % 256, Цел(ЦветТекста / 65536) % 256);
						
				Иначе
					СдвигПоГоризонтали = СдвигПоГоризонтали + 1;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СдвигПоВертикали = СдвигПоВертикали + 1;
		КонецЕсли;
	КонецЦикла;
			
	// объединяем ячейки
	Если НЕ ТихийРежим Тогда
		#Если Клиент Тогда
		Состояние("Объединение ячеек ...");
		#КонецЕсли
	КонецЕсли;
	Для Сч = 0 По ОбъединенныеОбласти.Количество() - 1  Цикл
		Диап = СокрЛП(ОбъединенныеОбласти.Получить(Сч)); 
		Обл = ТаблДок.Область(Диап);
		Обл.Объединить();
	КонецЦикла;
		
	ОкноЕхс.Parent.Close(Ложь);
	ОкноЕхс = Неопределено;
	Возврат ТаблДок;
	
КонецФункции

// Открывает форму указания реквизитов обработки импорта.
//
Функция ЗаполнитьЗначенияРеквизитов() Экспорт
	
	Если ПолучитьФорму().ОткрытьМодально() <> Истина Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает число скрытых колонок в указанном диапазоне исходной таблицы.
//
Функция СкрытоКолонокВДиапазоне(НачИнд, КонИнд)
	
	Скрытых = 0;
	Для Инд = НачИнд По КонИнд Цикл
		Если СкрытыеКолонки[Инд - 1] <> 0 Тогда
			Скрытых = Скрытых + 1;
		КонецЕсли;
	КонецЦикла; 
	Возврат Скрытых;
	
КонецФункции

// Возвращает число скрытых строк в указанном диапазоне исходной таблицы.
//
Функция СкрытоСтрокВДиапазоне(НачИнд, КонИнд)
	
	Скрытых = 0;
	Для Инд = НачИнд По КонИнд Цикл
		Если СкрытыеСтроки[Инд - 1] <> 0 Тогда
			Скрытых = Скрытых + 1;
		КонецЕсли;
	КонецЦикла; 
	Возврат Скрытых;
	
КонецФункции

// Возвращает объект типа Линия по заданному значению LineStyle() области
// исходной таблицы.
//
Функция Рамка(ЗначениеРамки)
	
	Если ЗначениеРамки = -4142 Тогда
		Возврат Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	ИначеЕсли ЗначениеРамки = -4118 Тогда
		Возврат Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.ЧастыйПунктир);
	ИначеЕсли ЗначениеРамки = -4119 Тогда
		Возврат Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Двойная);
	Иначе
		Возврат Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная); 
	КонецЕсли;
	
КонецФункции

// Устанавливает параметры выравнивания и свойства размещения текста для области
// по свойствам соответствующей области исходной таблицы.
//
Процедура УстановитьВыравниванияИПараметрыРазмещенияТекста(Область, Ячейка)
	
	ГоризонтальноеВыравнивание = Ячейка.HorizontalAlignment();
	Если ГоризонтальноеВыравнивание			= -4108 Тогда
		Область.ГоризонтальноеПоложение		= ГоризонтальноеПоложение.Центр;
	ИначеЕсли ГоризонтальноеВыравнивание	= -4131 Тогда
		Область.ГоризонтальноеПоложение		= ГоризонтальноеПоложение.Лево;
	ИначеЕсли ГоризонтальноеВыравнивание	= -4152 Тогда
		Область.ГоризонтальноеПоложение		= ГоризонтальноеПоложение.Право;
	ИначеЕсли ГоризонтальноеВыравнивание	= 7 Тогда
		Область.ГоризонтальноеПоложение		= ГоризонтальноеПоложение.Центр;
		Область.ПоВыделеннымКолонкам		= Истина;
	ИначеЕсли ГоризонтальноеВыравнивание	= 1 Тогда
		Область.ПоВыделеннымКолонкам		= Истина;
	КонецЕсли;
	
	ВертикальноеВыравнивание				= Ячейка.VerticalAlignment();
	Если ВертикальноеВыравнивание			= -4107 Тогда
		Область.ВертикальноеПоложение		= ВертикальноеПоложение.Верх;
	ИначеЕсли ВертикальноеВыравнивание		= -4160 Тогда
		Область.ВертикальноеПоложение		= ВертикальноеПоложение.Низ;
	ИначеЕсли ВертикальноеВыравнивание		= -4108 Тогда
		Область.ВертикальноеПоложение		= ВертикальноеПоложение.Центр;
	КонецЕсли;
	
	Если Ячейка.WrapText() Тогда
		Область.РазмещениеТекста			= ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	Иначе
		Область.РазмещениеТекста			= ТипРазмещенияТекстаТабличногоДокумента.Авто;
	КонецЕсли;
	
КонецПроцедуры

// определяем масштаб по вертикали и масштаб по горизонтали по умолчанию
МасштабПоГоризонтали	= 130;
МасштабПоВертикали		= 110;
