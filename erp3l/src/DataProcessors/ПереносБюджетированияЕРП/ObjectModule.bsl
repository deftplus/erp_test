
Перем ТабСоответствиеСтатьейИПоказателей;
Перем ВидОтчетаСтатьи Экспорт;
Перем ВидОтчетаПоказатели Экспорт;
Перем СоответствиеВидовСубконто;
Перем ТаблицаВерсий;
Перем ТаблицаОписанийВерсий;
Перем ОбъектРасчета;
Перем ПоследнийРедактировавший;
Перем ДатаИзмененияMs;
Перем ВалютаУпрУчета;
Перем ВалютаРеглУчета;

Процедура ВыполнитьПереносДанных() Экспорт
	
	Если НЕ ПроверитьНаличиеГруппыВидовОтчетов() Тогда
		
		СоздатьСтруктуруВидовОтчетов();
		
	КонецЕсли;
	
	СоответствиеВидовСубконто=Новый Соответствие;
	
	ОбновитьСправочникПериодов();
	
	ВалютаУпрУчета=Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРеглУчета=Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если ЗагрузитьОборотыБюджетов Тогда
		
		ПеренестиДанныеИзРегистра(ВидОтчетаСтатьи,"ОборотыБюджетов");
		ПеренестиДанныеИзРегистра(ВидОтчетаПоказатели,"ОборотыБюджетов");
		
	КонецЕсли;
	
	Если ЗагрузитьФакт Тогда
		
		ПеренестиДанныеИзРегистра(ВидОтчетаСтатьи,"ФактическиеДанныеБюджетирования");
		
	КонецЕсли;
			
КонецПроцедуры // ВыполнитьПереносДанных()

Процедура ОбновитьСправочникПериодов() Экспорт
	
	ЗапросПериоды=Новый Запрос;
	ЗапросПериоды.Текст="ВЫБРАТЬ
	|	МИНИМУМ(ДатыБюджетирования.ДатаНачала) КАК ОграничениеДатаНачала,
	|	МАКСИМУМ(ДатыБюджетирования.ДатаОкончания) КАК ОграничениеДатаОкончания
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ОборотыБюджетов.ПериодПланирования, ГОД) КАК ДатаНачала,
	|		КОНЕЦПЕРИОДА(ОборотыБюджетов.ПериодПланирования, ГОД) КАК ДатаОкончания
	|	ИЗ
	|		РегистрНакопления.ОборотыБюджетов КАК ОборотыБюджетов
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ФактическиеДанныеБюджетирования.Период, ГОД),
	|		КОНЕЦПЕРИОДА(ФактическиеДанныеБюджетирования.Период, ГОД)
	|	ИЗ
	|		РегистрНакопления.ФактическиеДанныеБюджетирования КАК ФактическиеДанныеБюджетирования) КАК ДатыБюджетирования";
	
	Результат=ЗапросПериоды.Выполнить().Выбрать();
	Результат.Следующий();
	
	Если ЗначениеЗаполнено(Результат.ОграничениеДатаНачала) И ЗначениеЗаполнено(Результат.ОграничениеДатаОкончания) Тогда
		
		ПериодыУХПовтИсп.ПроверитьИнтервалПериодов(Результат.ОграничениеДатаНачала, Результат.ОграничениеДатаОкончания);
		
	КонецЕсли;
	
КонецПроцедуры 

#Область СтруктураОтчета

Функция ПроверитьНаличиеГруппыВидовОтчетов() 
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ВидыОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыОтчетов КАК ВидыОтчетов
	|ГДЕ
	|	ВидыОтчетов.ЭтоГруппа
	|	И ВидыОтчетов.Наименование = &Наименование
	|	И НЕ ВидыОтчетов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Наименование","Статьи и показатели бюджетов ERP");
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		ВидОтчетаГруппа=Результат.Ссылка;
		
		ЗапросВидыОтчетов=Новый Запрос;
		ЗапросВидыОтчетов.Текст="ВЫБРАТЬ
		|	ВидыОтчетов.Ссылка КАК Ссылка,
		|	ВидыОтчетов.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ВидыОтчетов КАК ВидыОтчетов
		|ГДЕ
		|	ВидыОтчетов.Родитель = &Родитель";
		
		ЗапросВидыОтчетов.УстановитьПараметр("Родитель",ВидОтчетаГруппа);
		РезультатВидыОтчетов=ЗапросВидыОтчетов.Выполнить().Выбрать();
		
		Пока РезультатВидыОтчетов.Следующий() Цикл
			
			Если РезультатВидыОтчетов.Наименование="Статьи бюджетов ERP" Тогда
				
				ВидОтчетаСтатьи=РезультатВидыОтчетов.Ссылка;
				
			ИначеЕсли РезультатВидыОтчетов.Наименование="Показатели бюджетов ERP" Тогда
				
				ВидОтчетаПоказатели=РезультатВидыОтчетов.Ссылка;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
		
КонецФункции // ПроверитьНаличиеГруппыВидовОтчетов() 
	
Функция СоздатьВидОтчета(Наименование,Родитель=Неопределено,ЭтоГруппа=Ложь)
	
	Если ЭтоГруппа Тогда
		
		ОтчетОбъект=Справочники.ВидыОтчетов.СоздатьГруппу();
		ОтчетОбъект.Наименование=Наименование;
		
	Иначе ОтчетОбъект=Справочники.ВидыОтчетов.СоздатьЭлемент();
		
		ОтчетОбъект.Наименование=Наименование;
		ОтчетОбъект.Родитель=Родитель;
		
	КонецЕсли;
	
	ОтчетОбъект.Код=ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(Наименование,Метаданные.Справочники.ВидыОтчетов.ДлинаКода,"ВидыОтчетов");
	ОтчетОбъект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ПроизвольныеДанные;
	
	ОтчетОбъект.Записать();
	
	Если НЕ ЭтоГруппа Тогда
		
		УправлениеОтчетамиУХ.ПроверитьНаличиеЭлементовНастройки(ОтчетОбъект.Ссылка,Новый Структура("ПравилоОбработки,ПравилоПроверки,БланкОтчета"));
		
	КонецЕсли;
	
	Возврат ОтчетОбъект.Ссылка;
	
КонецФункции // СоздатьВидОтчета(Наименование,Родитель,ЭтоГруппа)

Процедура СоздатьСтруктуруВидовОтчетов()
	
	ВидОтчетаГруппа		= СоздатьВидОтчета("Статьи и показатели бюджетов ERP",,Истина);
	
	ВидОтчетаСтатьи		= СоздатьВидОтчета("Статьи бюджетов ERP",ВидОтчетаГруппа);
	ВидОтчетаПоказатели	= СоздатьВидОтчета("Показатели бюджетов ERP",ВидОтчетаГруппа);
	
	СоздатьНедостающиеПоказатели(ВидОтчетаСтатьи,		"СтатьиБюджетов");
	СоздатьНедостающиеПоказатели(ВидОтчетаПоказатели,	"ПоказателиБюджетов");
	
КонецПроцедуры // СоздатьСтруктуруВидаОтчета()

Процедура СоздатьКолонкиОтчета(ВидОтчета,СправочникБюджетирования)
	
	ЕстьКоличество=Ложь;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтатьиБюджетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник."+СправочникБюджетирования+" КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.УчитыватьПоКоличеству";
	
	Результат=Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		
		ЕстьКоличество=Истина;
		
	КонецЕсли;
	
	КолонкаСумма=Справочники.КолонкиОтчетов.СоздатьЭлемент();
	КолонкаСумма.Наименование="Сумма";
	КолонкаСумма.Владелец=ВидОтчета;
	КолонкаСумма.Код="Сумма";
	КолонкаСумма.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
	КолонкаСумма.ПорядковыйНомер=1;
	КолонкаСумма.ВидКурса=Перечисления.ВидыКурсов.КурсНаНачалоПериода;
	КолонкаСумма.Записать();
	
	Если ЕстьКоличество Тогда
		
		КолонкаКоличество=Справочники.КолонкиОтчетов.СоздатьЭлемент();
		КолонкаКоличество.Наименование="Количество";
		КолонкаКоличество.Владелец=ВидОтчета;
		КолонкаКоличество.Код="Количество";
		КолонкаКоличество.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
		КолонкаКоличество.НеФинансовый=Истина;
		КолонкаКоличество.ПорядковыйНомер=2;
		
		КолонкаКоличество.Записать();

		
	КонецЕсли;
	
	

КонецПроцедуры // СоздатьКолонкиОтчета(ВидОтчета,СправочникБюджетирования) 

Процедура СоздатьНедостающиеПоказатели(ВидОтчета,СправочникБюджетирования)
			
	МассивНовыхСтрок=Новый Массив;
	СоздатьКолонкиОтчета(ВидОтчета,СправочникБюджетирования);
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СправочникБД.Ссылка КАК Ссылка,
	|	СправочникБД.Наименование КАК Наименование,
	|	СправочникБД.ПометкаУдаления КАК ПометкаУдаления,
	|	СправочникБД.Родитель.Наименование КАК РодительНаименование,
	|	СправочникБД.Код КАК Код,
	|	СправочникБД.ЭтоГруппа КАК ЭтоГруппа,
	|	СправочникБД.УчитыватьПоКоличеству КАК УчитыватьПоКоличеству,
	|	СправочникБД.ВидАналитики1 КАК ВидАналитики1,
	|	СправочникБД.ВидАналитики2 КАК ВидАналитики2,
	|	СправочникБД.ВидАналитики3 КАК ВидАналитики3,
	|	СправочникБД.ВидАналитики4 КАК ВидАналитики4,
	|	СправочникБД.ВидАналитики5 КАК ВидАналитики5,
	|	СправочникБД.УчитыватьПоВалюте КАК Валютная,
	|	СправочникБД.ВидАналитики6 КАК ВидАналитики6
	|ИЗ
	|	Справочник."+СправочникБюджетирования+" КАК СправочникБД
	|
	|УПОРЯДОЧИТЬ ПО
	|	СправочникБД.Код ИЕРАРХИЯ";
				
	ТаблицаЭлементов=Запрос.Выполнить().Выгрузить();
	ТаблицаЭлементов.Колонки.Добавить("СтрокаСсылка");
	
	Для Каждого СтрЭлемент ИЗ ТаблицаЭлементов Цикл
		
		СформироватьСтрокуПоЭлементу(ВидОтчета,СтрЭлемент,ТаблицаЭлементов.Индекс(СтрЭлемент)+1);
		
	КонецЦикла;
	
	ЕстьИзменениеИерархии=Ложь;	
	ОбновитьИерархиюСтрокПоСправочнику(ВидОтчета,ТаблицаЭлементов);
			
	ТаблицаИзмененныхПоказателей=Новый ТаблицаЗначений;
	ТаблицаИзмененныхПоказателей.Колонки.Добавить("Ссылка");
	ТаблицаИзмененныхПоказателей.Колонки.Добавить("ОбъектДобавлен",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТаблицаИзмененныхПоказателей.Колонки.Добавить("ПометкаУдаления",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	ПравилоОбработки = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки, ВидОтчета);
	СформироватьПоказателиОтчета(ВидОтчета,ТаблицаЭлементов,,ПравилоОбработки,,2,Ложь,ТаблицаИзмененныхПоказателей);
	
	ОбновитьБланкОтчетаПоУмолчанию(ВидОтчета);
		 							
КонецПроцедуры // СформироватьПоказателиОСВ()

Процедура СформироватьСтрокуПоЭлементу(ВидОтчета,Элемент,НомерСтроки) Экспорт
		
	СтрокаОбъект=Справочники.СтрокиОтчетов.СоздатьЭлемент();
	СтрокаОбъект.Владелец=ВидОтчета;
	
	ПроектКода=?(ЗначениеЗаполнено(Элемент.Код),"С_"+Элемент.Код,Элемент.Наименование);
	
	СтрокаОбъект.Код=ОбщегоНазначенияУХ.ПолучитьВозможныйКодСправочника(ПроектКода, СтрокаОбъект.Метаданные().ДлинаКода,"СтрокиОтчетов", СтрокаОбъект.Владелец);	
	СтрокаОбъект.Наименование=Элемент.Наименование;
	СтрокаОбъект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ПроизвольныеДанные;
	
	Если НЕ Элемент.ЭтоГруппа Тогда
		
		СтрокаОбъект.ГруппаРаскрытия=ПолучитьГруппуРаскрытияДляСтатьиБюджета(ВидОтчета,Элемент);
		
		СтрокаОбъект.ВидИтога=Перечисления.ВидыИтоговПоказателя.Сумма;
		
		СтрокаОбъект.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
		
	КонецЕсли;
	
	СтрокаОбъект.ПорядковыйНомер=НомерСтроки;
	
	Попытка
				
		СтрокаОбъект.Записать();
		Элемент.СтрокаСсылка= СтрокаОбъект.Ссылка;
		
	Исключение
		
		СтрокаШаблона = НСтр("ru = 'Не удалось создать строку для вида отчета %1 по элементу %2: %3'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВидОтчета, Элемент.Ссылка, ОписаниеОшибки()),,, СтатусСообщения.Внимание);
		КонецЕсли;
				
	КонецПопытки;
	
КонецПроцедуры // СформироватьСтрокуПоСчету()

Функция ПолучитьВидАналитикиКорпоративные(ВидАналитики)
	
	Если НЕ ЗначениеЗаполнено(ВидАналитики) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ВидАналитикиКорпоративные=СоответствиеВидовСубконто.Получить(ВидАналитики);
	
	Если НЕ ВидАналитикиКорпоративные=Неопределено Тогда
		
		Возврат ВидАналитикиКорпоративные;
		
	КонецЕсли;
	
	ТипыИсходные = ВидАналитики.ТипЗначения.Типы();
	
	Если ТипыИсходные.Количество()=1 Тогда
		
		ВидАналитикиКорпоративные= НайтиСубконтоПоИсходномуТипу(ТипыИсходные[0]);
		
		Если ВидАналитикиКорпоративные=Неопределено Тогда
			
			ВидАналитикиКорпоративные=СоздатьВидАналитикКорпоративные(ВидАналитики,"ERP");
			
		КонецЕсли;
		
	Иначе
		
		ВидАналитикиКорпоративные=СоздатьВидАналитикКорпоративные(ВидАналитики,"ERP");
		
	КонецЕсли;
	
	Если НЕ ВидАналитикиКорпоративные=Неопределено Тогда
		
		СоответствиеВидовСубконто.Вставить(ВидАналитики,ВидАналитикиКорпоративные);
		Возврат ВидАналитикиКорпоративные;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // ПолучитьВидАналитикиКорпоративные()

Функция СоздатьВидАналитикКорпоративные(ВидАналитики,Префикс)
	
	ТекОбъект=ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.НайтиПоНаименованию("("+Префикс+") "+ВидАналитики.Наименование);
	
	Если ЗначениеЗаполнено(ТекОбъект) Тогда
		
		Возврат ТекОбъект;
		
	КонецЕсли;
	
	ВидАналитикиОбъект=ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СоздатьЭлемент();
	ВидАналитикиОбъект.Наименование="("+Префикс+") "+ВидАналитики.Наименование;
	ВидАналитикиОбъект.ТипЗначения=ВидАналитики.ТипЗначения;
	ВидАналитикиОбъект.Записать();
	
	Возврат ВидАналитикиОбъект.Ссылка;
		
КонецФункции // СоздатьВидАналитикКорпоративные() 

Функция НайтиСубконтоПоИсходномуТипу(ТипЗначения)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ВидыСубконтоКорпоративные.Ссылка КАК Ссылка,
	|	ВидыСубконтоКорпоративные.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.ВидыСубконтоКорпоративные КАК ВидыСубконтоКорпоративные
	|ГДЕ
	|	НЕ ВидыСубконтоКорпоративные.ПометкаУдаления
	|	И ВидыСубконтоКорпоративные.Предопределенный";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Если Результат.ТипЗначения.Типы().Количество()>1 Тогда
			
			Продолжить;
			
		ИначеЕсли Результат.ТипЗначения.Типы()[0]=ТипЗначения Тогда
			
			Возврат Результат.Ссылка;
			
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции		// НайтиСубконтоПоИсходнымТипам()

Функция ПолучитьГруппуРаскрытияДляСтатьиБюджета(ВидОтчета,Элемент) Экспорт
	
	ЗаполненоАналитикСтатьи = 0;
	ВидыАналитикСтрокой = Новый Массив;
	ВидыАналитик=Новый Структура;
	
	
	Для Сч = 1 По 6 Цикл
		ВидАналитики = ПолучитьВидАналитикиКорпоративные(Элемент["ВидАналитики"+Сч]);
		Если ЗначениеЗаполнено(ВидАналитики) Тогда
			
			ЗаполненоАналитикСтатьи = Сч;
			ВидыАналитикСтрокой.Добавить(Строка(ВидАналитики));
			ВидыАналитик.Вставить("ВидАналитики"+Сч,ВидАналитики);
			
		Иначе
			
			ВидыАналитик.Вставить("ВидАналитики"+Сч,Неопределено);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("Валютная", Элемент.Валютная);
	
	Корпоративные = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные;
		
	Если ЗаполненоАналитикСтатьи = 0 И НЕ Элемент.Валютная Тогда
		Возврат Справочники.ГруппыРаскрытия.ПустаяСсылка();
	КонецЕсли;
		
	Для Индекс=1 По 6 Цикл
		Если ЗначениеЗаполнено(ВидыАналитик["ВидАналитики"+Индекс]) Тогда
			СтруктураПараметров.Вставить("ВидАналитики"+Индекс,ВидыАналитик["ВидАналитики"+Индекс]);
		КонецЕсли;
	КонецЦикла;
		
	Если Элемент.Валютная Тогда
		СтруктураПараметров.Вставить("ВидАналитикиВалютаДт", Корпоративные.СправочникВалюты);
		ВидыАналитикСтрокой.Добавить(НСтр("ru = 'По валютам'"));
	Иначе
		СтруктураПараметров.Вставить("ВидАналитикиВалютаДт", Корпоративные.ПустаяСсылка());
	КонецЕсли;
	
	СправочникОбъект=Справочники.ГруппыРаскрытия.СоздатьЭлемент();
	
	СправочникОбъект.Владелец=ВидОтчета;
	СправочникОбъект.Наименование = СтрСоединить(ВидыАналитикСтрокой, ",");
	
	ПроектКода=ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(СправочникОбъект.Наименование,,"ВидыОтчетов");
	
	СправочникОбъект.Код=ОбщегоНазначенияУХ.ПолучитьВозможныйКодСправочника(ПроектКода,СправочникОбъект.Метаданные().ДлинаКода,"ГруппыРаскрытия",ВидОтчета);
	
	ЗаполнитьЗначенияСвойств(СправочникОбъект,СтруктураПараметров);
	
	Попытка
		СправочникОбъект.Записать();
		Возврат СправочникОбъект.Ссылка;
	Исключение
		
		СтрокаШаблона = НСтр("ru = 'Не удалось создать группу раскрытия для статьи %1: %2'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Элемент.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),,, СтатусСообщения.Внимание);
		КонецЕсли;
		
		Возврат Справочники.ГруппыРаскрытия.ПустаяСсылка();
	КонецПопытки;
КонецФункции // ПолучитьГруппуРаскрытияДляСтатьиБюджета()

Процедура СформироватьПоказателиОтчета(ВидОтчета,
										ТаблицаСтрок = Неопределено,
										МассивКолонок = Неопределено,
										ПравилоОбработки = Неопределено, 
										ОбновитьТР = Истина,
										Использование = 1,
										КонтролироватьЛимиты = Ложь,
										ТаблицаИзмененныхПоказателей = Неопределено) Экспорт
										
										
	Если ТаблицаИзмененныхПоказателей = Неопределено Тогда
	
		ТаблицаИзмененныхПоказателей = Новый ТаблицаЗначений;
		ТаблицаИзмененныхПоказателей.Колонки.Добавить("Ссылка");
		ТаблицаИзмененныхПоказателей.Колонки.Добавить("ОбъектДобавлен", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		ТаблицаИзмененныхПоказателей.Колонки.Добавить("ПометкаУдаления", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	КонецЕсли;									
											
	Если МассивКолонок=Неопределено Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	КолонкиОтчетов.Ссылка КАК КолонкаСсылка,
		             |	КолонкиОтчетов.ВидКурса КАК ВидКурса,
		             |	КолонкиОтчетов.НеФинансовый КАК НеФинансовый,
		             |	КолонкиОтчетов.Код КАК Код,
		             |	КолонкиОтчетов.Наименование КАК Наименование,
		             |	КолонкиОтчетов.ТипЗначения КАК ТипЗначения
		             |ИЗ
		             |	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
		             |ГДЕ
		             |	КолонкиОтчетов.Владелец = &Владелец
		             |	И НЕ КолонкиОтчетов.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Владелец",ВидОтчета);
		ТаблицаКолонок=Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
		
	МассивПоказателей=Новый Массив;
	
	Для Каждого Строка ИЗ ТаблицаСтрок Цикл
		
		Если (Не ЗначениеЗаполнено(Строка.СтрокаСсылка)) ИЛИ Строка.ЭтоГруппа Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Для Каждого Колонка ИЗ ТаблицаКолонок Цикл
			
			Если Колонка.Наименование="Количество" И (НЕ Строка.УчитыватьПоКоличеству) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ПоказательОСВ = СформироватьПоказатель(ВидОтчета,Строка, Колонка,Использование,,ПравилоОбработки, Ложь,КонтролироватьЛимиты,ТаблицаИзмененныхПоказателей);							
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьПоказателиОтчета()

Функция СформироватьПоказатель(ВидОтчета,СтрокаСтрок, СтрокаКолонок, Использование=1, ОписаниеНовогоПоказателя=Неопределено,ПравилоОбработки=Неопределено, ОбновитьТР = Истина,КонтролироватьЛимиты=Ложь,ТаблицаИзмененныхПоказателей=Неопределено) Экспорт
	
	
	ТекПредназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ПроизвольныеДанные;
	
	Показатель = Справочники.ПоказателиОтчетов.СоздатьЭлемент();
	Показатель.Владелец = ВидОтчета;
	Код = СокрЛП(СтрокаСтрок.СтрокаСсылка.Код) + "_" + СокрЛП(СтрокаКолонок.Код);
	Показатель.Код = ОбщегоНазначенияУХ.ПолучитьВозможныйКодСправочника(Код,Метаданные.Справочники.ПоказателиОтчетов.ДлинаКода,"ПоказателиОтчетов",ВидОтчета);
	Показатель.Наименование = СтрокаСтрок.СтрокаСсылка.Наименование + " " + нрег(СтрокаКолонок.Наименование);
	
	Показатель.Строка = СтрокаСтрок.СтрокаСсылка;
	Показатель.Колонка= СтрокаКолонок.КолонкаСсылка;							
		
	Показатель.ГруппаРаскрытия	= Показатель.Строка.ГруппаРаскрытия;
		
	Показатель.Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ПроизвольныеДанные;	
			
	Показатель.ТипЗначения	= СтрокаКолонок.ТипЗначения;
	Показатель.НеФинансовый	= СтрокаКолонок.НеФинансовый;
	Показатель.ВидКурса		= СтрокаКолонок.ВидКурса;
	Показатель.ЭлементБюджета=СтрокаСтрок.Ссылка;
						
	Попытка
		
		НоваяСтрока=ТаблицаИзмененныхПоказателей.Добавить();
		НоваяСтрока.ОбъектДобавлен=Показатель.ЭтоНовый();
		
		Показатель.Записать();
		
		НоваяСтрока.Ссылка=Показатель.Ссылка;
		
		Если ТипЗнч(ОписаниеНовогоПоказателя)=Тип("Структура") Тогда
			
			ОписаниеНовогоПоказателя.Вставить("ИмяСтроки",		"Строка_" + СокрЛП(СтрокаСтрок.СтрокаСсылка.Код));
			ОписаниеНовогоПоказателя.Вставить("ИмяКолонки",		"Колонка_" + СокрЛП(СтрокаКолонок.Код));
			ОписаниеНовогоПоказателя.Вставить("ИмяЯчейки",		Код);
			ОписаниеНовогоПоказателя.Вставить("ТипПоказателя",	ОбщегоНазначенияУХ.ПолучитьОписаниеТипаПоТипуПоказателя(Показатель.ТипЗначения));
			ОписаниеНовогоПоказателя.Вставить("ПоказательСсылка",		Показатель.Ссылка);
			ОписаниеНовогоПоказателя.Вставить("ВидОтчетаСсылка",		Показатель.Владелец);
			ОписаниеНовогоПоказателя.Вставить("ПоказательКод",			СокрЛП(Показатель.Код));
			ОписаниеНовогоПоказателя.Вставить("ВидОтчета",			СокрЛП(Показатель.Владелец.Код));
	
		КонецЕсли;
				
		Возврат Показатель.Ссылка;
		
	Исключение
		
		СтрокаШаблона = НСтр("ru = 'Не удалось записать показатель с кодом ""%1""!'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Код),,, СтатусСообщения.Важное);
		КонецЕсли;
	
		Возврат Неопределено;
		
	Конецпопытки;
	
КонецФункции // СформироватьПоказатель()

Процедура ОбновитьИерархиюСтрокПоСправочнику(ВидОтчета,ТаблицаСтрок) Экспорт 

	Для Каждого Строка ИЗ ТаблицаСтрок Цикл
		
		Если НЕ (ЗначениеЗаполнено(Строка.РодительНаименование) И ЗначениеЗаполнено(Строка.СтрокаСсылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаРодитель= ТаблицаСтрок.Найти(Строка.РодительНаименование,"Наименование");
		
		Если Не СтрокаРодитель=Неопределено Тогда
			
			СтрокаОбъект=Строка.СтрокаСсылка.ПолучитьОбъект();
			СтрокаОбъект.Родитель=СтрокаРодитель.СтрокаСсылка;
			СтрокаОбъект.ОбменДанными.Загрузка=Истина;
			СтрокаОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры // ОбновитьИерархиюСтрокПоСправочнику()

Процедура ОбновитьБланкОтчетаПоУмолчанию(ВидОтчета)
	
	БланкОтчета=УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображения,ВидОтчета);
	
	Если Не ЗначениеЗаполнено(БланкОтчета) Тогда
		
		СтрокаШаблона = НСтр("ru = 'Не удалось определить бланк по умолчанию для вида отчета %1.'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВидОтчета),,, СтатусСообщения.Важное);
		КонецЕсли;
				
		Возврат;
		
	КонецЕсли;
			
	УправлениеОтчетамиУХ.ОбновитьБланкОтчета(ВидОтчета,БланкОтчета);
	
КонецПроцедуры // ОбновитьБланкОтчетаПоУмолчанию()

Функция ПолучитьРабочиеТаблицыПлан(ВидОтчета)
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст="ВЫБРАТЬ
	             |	ОборотыБюджетов.ПериодПланирования КАК ДатаНачалаПериода,
	             |	ОборотыБюджетов.Сценарий КАК Сценарий,
	             |	ОборотыБюджетов.Сценарий.Валюта КАК ОсновнаяВалюта,
	             |	ВЫБОР
	             |		КОГДА ОборотыБюджетов.Регистратор ССЫЛКА Документ.ЭкземплярБюджета
	             |			ТОГДА ОборотыБюджетов.Регистратор.ВидБюджета.Периодичность
	             |		ИНАЧЕ ОборотыБюджетов.Регистратор.Периодичность
	             |	КОНЕЦ КАК Периодичность,
	             |	ОборотыБюджетов.СтатьяБюджетов КАК СтатьяБюджетов,
	             |	ВЫБОР
	             |		КОГДА ОборотыБюджетов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	             |				И ОборотыБюджетов.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	             |			ТОГДА &УправленческаяОрганизация
	             |		КОГДА НЕ ОборотыБюджетов.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	             |			ТОГДА ОборотыБюджетов.Подразделение.ЦФО
	             |		ИНАЧЕ ОборотыБюджетов.Организация
	             |	КОНЕЦ КАК ЦФО,
	             |	ОборотыБюджетов.Валюта КАК Валюта,
	             |	ОборотыБюджетов.Аналитика1 КАК Аналитика1,
	             |	ОборотыБюджетов.Аналитика2 КАК Аналитика2,
	             |	ОборотыБюджетов.Аналитика3 КАК Аналитика3,
	             |	ОборотыБюджетов.Аналитика4 КАК Аналитика4,
	             |	ОборотыБюджетов.Аналитика5 КАК Аналитика5,
	             |	ОборотыБюджетов.Аналитика6 КАК Аналитика6,
	             |	ОборотыБюджетов.Количество КАК КоличествоОборот,
	             |	ОборотыБюджетов.СуммаУпр КАК СуммаУпрОборот,
	             |	ОборотыБюджетов.СуммаСценария КАК СуммаСценарияОборот,
	             |	ОборотыБюджетов.СуммаРегл КАК СуммаРеглОборот,
	             |	ОборотыБюджетов.СуммаВВалюте КАК СуммаВВалютеОборот
	             |ПОМЕСТИТЬ ТаблицаОборотовНормализованная
				 |ИЗ
				 |	РегистрНакопления.ОборотыБюджетов КАК ОборотыБюджетов";
				 
				 Если ВидОтчета=ВидОтчетаСтатьи Тогда
					 
					 Запрос.Текст=Запрос.Текст+"
					 |ГДЕ ОборотыБюджетов.СтатьяБюджетов ССЫЛКА Справочник.СтатьиБюджетов"; 
					 
				 Иначе
					 
					 Запрос.Текст=Запрос.Текст+"
					 |ГДЕ ОборотыБюджетов.СтатьяБюджетов ССЫЛКА Справочник.ПоказателиБюджетов";
					 
				 КонецЕсли;
				 Запрос.Текст=Запрос.Текст+"
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ТаблицаОборотовНормализованная.Сценарий КАК Сценарий,
	             |	ТаблицаОборотовНормализованная.ОсновнаяВалюта КАК ОсновнаяВалюта,
	             |	ТаблицаОборотовНормализованная.СтатьяБюджетов КАК СтатьяБюджетов,
	             |	ТаблицаОборотовНормализованная.ЦФО КАК ЦФО,
	             |	ТаблицаОборотовНормализованная.Валюта КАК Валюта,
	             |	ТаблицаОборотовНормализованная.Аналитика1 КАК Аналитика1,
	             |	ТаблицаОборотовНормализованная.Аналитика2 КАК Аналитика2,
	             |	ТаблицаОборотовНормализованная.Аналитика3 КАК Аналитика3,
	             |	ТаблицаОборотовНормализованная.Аналитика4 КАК Аналитика4,
	             |	ТаблицаОборотовНормализованная.Аналитика5 КАК Аналитика5,
	             |	ТаблицаОборотовНормализованная.Аналитика6 КАК Аналитика6,
	             |	ТаблицаОборотовНормализованная.КоличествоОборот КАК КоличествоОборот,
	             |	ТаблицаОборотовНормализованная.СуммаУпрОборот КАК СуммаУпрОборот,
	             |	ТаблицаОборотовНормализованная.СуммаСценарияОборот КАК СуммаСценарияОборот,
	             |	ТаблицаОборотовНормализованная.СуммаРеглОборот КАК СуммаРеглОборот,
	             |	ТаблицаОборотовНормализованная.СуммаВВалютеОборот КАК СуммаВВалютеОборот,
	             |	Периоды.Ссылка КАК ПериодОтчета
	             |ПОМЕСТИТЬ ТаблицаКГруппировке
	             |ИЗ
	             |	ТаблицаОборотовНормализованная КАК ТаблицаОборотовНормализованная
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Периоды КАК Периоды
	             |		ПО ТаблицаОборотовНормализованная.Периодичность = Периоды.Периодичность
	             |			И ТаблицаОборотовНормализованная.ДатаНачалаПериода >= Периоды.ДатаНачала
	             |			И ТаблицаОборотовНормализованная.ДатаНачалаПериода <= Периоды.ДатаОкончания
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ТаблицаКГруппировке.Сценарий КАК Сценарий,
	             |	ТаблицаКГруппировке.ПериодОтчета КАК ПериодОтчета,
	             |	ТаблицаКГруппировке.ОсновнаяВалюта КАК ОсновнаяВалюта,
	             |	ТаблицаКГруппировке.СтатьяБюджетов КАК СтатьяБюджетов,
	             |	ТаблицаКГруппировке.ЦФО КАК ЦФО,
	             |	ТаблицаКГруппировке.Валюта КАК Валюта,
	             |	ТаблицаКГруппировке.Аналитика1 КАК Аналитика1,
	             |	ТаблицаКГруппировке.Аналитика2 КАК Аналитика2,
	             |	ТаблицаКГруппировке.Аналитика3 КАК Аналитика3,
	             |	ТаблицаКГруппировке.Аналитика4 КАК Аналитика4,
	             |	ТаблицаКГруппировке.Аналитика5 КАК Аналитика5,
	             |	ТаблицаКГруппировке.Аналитика6 КАК Аналитика6,
	             |	СУММА(ТаблицаКГруппировке.КоличествоОборот) КАК КоличествоОборот,
	             |	СУММА(ТаблицаКГруппировке.СуммаУпрОборот) КАК СуммаУпрОборот,
	             |	СУММА(ТаблицаКГруппировке.СуммаСценарияОборот) КАК СуммаСценарияОборот,
	             |	СУММА(ТаблицаКГруппировке.СуммаРеглОборот) КАК СуммаРеглОборот,
	             |	СУММА(ТаблицаКГруппировке.СуммаВВалютеОборот) КАК СуммаВВалютеОборот
	             |ПОМЕСТИТЬ ОборотыСгруппированные
	             |ИЗ
	             |	ТаблицаКГруппировке КАК ТаблицаКГруппировке
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ТаблицаКГруппировке.Сценарий,
	             |	ТаблицаКГруппировке.ПериодОтчета,
	             |	ТаблицаКГруппировке.ОсновнаяВалюта,
	             |	ТаблицаКГруппировке.СтатьяБюджетов,
	             |	ТаблицаКГруппировке.ЦФО,
	             |	ТаблицаКГруппировке.Валюта,
	             |	ТаблицаКГруппировке.Аналитика1,
	             |	ТаблицаКГруппировке.Аналитика2,
	             |	ТаблицаКГруппировке.Аналитика3,
	             |	ТаблицаКГруппировке.Аналитика4,
	             |	ТаблицаКГруппировке.Аналитика5,
	             |	ТаблицаКГруппировке.Аналитика6
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ПоказателиОтчетов.Ссылка КАК Ссылка,
	             |	ПоказателиОтчетов.ЭлементБюджета КАК ЭлементБюджета
	             |ПОМЕСТИТЬ ПоказателиСумма
	             |ИЗ
	             |	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	             |ГДЕ
	             |	ПоказателиОтчетов.Владелец = &ВидОтчета
	             |	И НЕ ПоказателиОтчетов.НеФинансовый
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ПоказателиОтчетов.Ссылка КАК Ссылка,
	             |	ПоказателиОтчетов.ЭлементБюджета КАК ЭлементБюджета
	             |ПОМЕСТИТЬ ПоказателиКоличество
	             |ИЗ
	             |	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	             |ГДЕ
	             |	ПоказателиОтчетов.Владелец = &ВидОтчета
	             |	И ПоказателиОтчетов.НеФинансовый
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ТаблицаОборотовНормализованная.Сценарий КАК Сценарий,
	             |	ТаблицаОборотовНормализованная.Периодичность КАК Периодичность,
	             |	МИНИМУМ(ТаблицаОборотовНормализованная.ДатаНачалаПериода) КАК ДатаНачалаПериодаНач,
	             |	МАКСИМУМ(ТаблицаОборотовНормализованная.ДатаНачалаПериода) КАК ДатаНачалаПериодаКон
	             |ПОМЕСТИТЬ ИнтервалПериодов
	             |ИЗ
	             |	ТаблицаОборотовНормализованная КАК ТаблицаОборотовНормализованная
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ТаблицаОборотовНормализованная.Сценарий,
	             |	ТаблицаОборотовНормализованная.Периодичность
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ОборотыСгруппированные.Сценарий КАК Сценарий,
	             |	ОборотыСгруппированные.ОсновнаяВалюта КАК ОсновнаяВалюта,
	             |	ОборотыСгруппированные.ЦФО КАК ЦФО,
	             |	ОборотыСгруппированные.Валюта КАК Валюта,
	             |	ОборотыСгруппированные.Аналитика1 КАК Аналитика1,
	             |	ОборотыСгруппированные.Аналитика2 КАК Аналитика2,
	             |	ОборотыСгруппированные.Аналитика3 КАК Аналитика3,
	             |	ОборотыСгруппированные.Аналитика4 КАК Аналитика4,
	             |	ОборотыСгруппированные.Аналитика5 КАК Аналитика5,
	             |	ОборотыСгруппированные.Аналитика6 КАК Аналитика6,
	             |	ОборотыСгруппированные.КоличествоОборот КАК КоличествоОборот,
	             |	ОборотыСгруппированные.СуммаУпрОборот КАК СуммаУпрОборот,
	             |	ОборотыСгруппированные.СуммаСценарияОборот КАК СуммаСценарияОборот,
	             |	ОборотыСгруппированные.СуммаРеглОборот КАК СуммаРеглОборот,
	             |	ОборотыСгруппированные.СуммаВВалютеОборот КАК СуммаВВалютеОборот,
	             |	ОборотыСгруппированные.ПериодОтчета КАК ПериодОтчета,
	             |	ПоказателиСумма.Ссылка КАК ПоказательСумма,
	             |	ПоказателиКоличество.Ссылка КАК ПоказательКоличество,
	             |	ОборотыСгруппированные.СтатьяБюджетов.УчитыватьПоВалюте КАК Валютная
	             |ПОМЕСТИТЬ РабочаяТаблицаПоказателей
	             |ИЗ
	             |	ОборотыСгруппированные КАК ОборотыСгруппированные
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ПоказателиСумма КАК ПоказателиСумма
	             |		ПО ОборотыСгруппированные.СтатьяБюджетов = ПоказателиСумма.ЭлементБюджета
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ПоказателиКоличество КАК ПоказателиКоличество
	             |		ПО ОборотыСгруппированные.СтатьяБюджетов = ПоказателиКоличество.ЭлементБюджета
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	РабочаяТаблицаПоказателей.Сценарий КАК Сценарий,
	             |	РабочаяТаблицаПоказателей.ОсновнаяВалюта КАК ОсновнаяВалюта,
	             |	РабочаяТаблицаПоказателей.ЦФО КАК ЦФО,
	             |	РабочаяТаблицаПоказателей.ПериодОтчета КАК ПериодОтчета,
	             |	РабочаяТаблицаПоказателей.ПоказательСумма КАК ПоказательСумма,
	             |	РабочаяТаблицаПоказателей.ПоказательКоличество КАК ПоказательКоличество,
	             |	СУММА(РабочаяТаблицаПоказателей.КоличествоОборот) КАК Количество,
	             |	СУММА(РабочаяТаблицаПоказателей.СуммаУпрОборот) КАК СуммаУпр,
	             |	СУММА(РабочаяТаблицаПоказателей.СуммаСценарияОборот) КАК Сумма,
	             |	СУММА(РабочаяТаблицаПоказателей.СуммаРеглОборот) КАК СуммаРегл
	             |ИЗ
	             |	РабочаяТаблицаПоказателей КАК РабочаяТаблицаПоказателей
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	РабочаяТаблицаПоказателей.Сценарий,
	             |	РабочаяТаблицаПоказателей.ОсновнаяВалюта,
	             |	РабочаяТаблицаПоказателей.ЦФО,
	             |	РабочаяТаблицаПоказателей.ПериодОтчета,
	             |	РабочаяТаблицаПоказателей.ПоказательСумма,
	             |	РабочаяТаблицаПоказателей.ПоказательКоличество
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	РабочаяТаблицаПоказателей.Сценарий КАК Сценарий,
	             |	РабочаяТаблицаПоказателей.ОсновнаяВалюта КАК ОсновнаяВалюта,
	             |	РабочаяТаблицаПоказателей.ЦФО КАК ЦФО,
	             |	РабочаяТаблицаПоказателей.Валюта КАК АналитикаВалюта,
	             |	РабочаяТаблицаПоказателей.Аналитика1 КАК Аналитика1,
	             |	РабочаяТаблицаПоказателей.Аналитика2 КАК Аналитика2,
	             |	РабочаяТаблицаПоказателей.Аналитика3 КАК Аналитика3,
	             |	РабочаяТаблицаПоказателей.Аналитика4 КАК Аналитика4,
	             |	РабочаяТаблицаПоказателей.Аналитика5 КАК Аналитика5,
	             |	РабочаяТаблицаПоказателей.Аналитика6 КАК Аналитика6,
	             |	РабочаяТаблицаПоказателей.КоличествоОборот КАК Количество,
	             |	РабочаяТаблицаПоказателей.СуммаУпрОборот КАК СуммаУпр,
	             |	РабочаяТаблицаПоказателей.СуммаСценарияОборот КАК Сумма,
	             |	РабочаяТаблицаПоказателей.СуммаРеглОборот КАК СуммаРегл,
	             |	РабочаяТаблицаПоказателей.СуммаВВалютеОборот КАК ЗначениеВалюта,
	             |	РабочаяТаблицаПоказателей.ПериодОтчета КАК ПериодОтчета,
	             |	РабочаяТаблицаПоказателей.ПоказательСумма КАК ПоказательСумма,
	             |	РабочаяТаблицаПоказателей.ПоказательСумма.ГруппаРаскрытия КАК ГруппаРаскрытия,
	             |	ЕСТЬNULL(РабочаяТаблицаПоказателей.ПоказательСумма.ГруппаРаскрытия.Валютная, ЛОЖЬ) КАК Валютный,
	             |	ЕСТЬNULL(РабочаяТаблицаПоказателей.ПоказательСумма.ГруппаРаскрытия.ЧислоАналитик, 0) КАК ЧислоАналитикГруппыРаскрытия,
	             |	РабочаяТаблицаПоказателей.ПоказательКоличество КАК ПоказательКоличество,
	             |	РабочаяТаблицаПоказателей.Валютная КАК Валютная
	             |ИЗ
	             |	РабочаяТаблицаПоказателей КАК РабочаяТаблицаПоказателей
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ИнтервалПериодов.Сценарий КАК Сценарий,
	             |	ИнтервалПериодов.Периодичность КАК Периодичность,
	             |	ПериодыКон.Ссылка КАК ПериодОкончание,
	             |	ПериодыНач.Ссылка КАК ПериодОтчета,
	             |	ИнтервалПериодов.Сценарий.Валюта КАК ОсновнаяВалюта
	             |ИЗ
	             |	ИнтервалПериодов КАК ИнтервалПериодов
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Периоды КАК ПериодыНач
	             |		ПО ИнтервалПериодов.Периодичность = ПериодыНач.Периодичность
	             |			И ИнтервалПериодов.ДатаНачалаПериодаНач >= ПериодыНач.ДатаНачала
	             |			И ИнтервалПериодов.ДатаНачалаПериодаНач <= ПериодыНач.ДатаОкончания
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Периоды КАК ПериодыКон
	             |		ПО ИнтервалПериодов.Периодичность = ПериодыКон.Периодичность
	             |			И ИнтервалПериодов.ДатаНачалаПериодаКон >= ПериодыКон.ДатаНачала
	             |			И ИнтервалПериодов.ДатаНачалаПериодаКон <= ПериодыКон.ДатаОкончания
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	ОборотыСгруппированные.ЦФО КАК ЦФО
	             |ИЗ
	             |	ОборотыСгруппированные КАК ОборотыСгруппированные";
	
	
	Запрос.УстановитьПараметр("УправленческаяОрганизация",Справочники.Организации.УправленческаяОрганизация);
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	
	Результат=Запрос.ВыполнитьПакет();
	
	СтруктураОтвета=Новый Структура;
	
	СтруктураОтвета.Вставить("ТаблицаСинтетики",		Результат[7].Выгрузить());
	СтруктураОтвета.Вставить("ТаблицаАналитики",		Результат[8].Выгрузить());
	СтруктураОтвета.Вставить("ТаблицаПериодыСценария",	Результат[9].Выгрузить());
	СтруктураОтвета.Вставить("ТаблицаЦФО",				Результат[10].Выгрузить());
	
	Возврат СтруктураОтвета;
	
	
	
КонецФункции // ПолучитьРабочиеТаблицыПлан()

Функция ПолучитьРабочиеТаблицыФакт(ВидОтчета)
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст="ВЫБРАТЬ
	|	ОборотыБюджетов.Период КАК ДатаНачалаПериода,
	|	ЗНАЧЕНИЕ(Справочник.Сценарии.Факт) КАК Сценарий,
	|	&ВалютаУпрУчета КАК ОсновнаяВалюта,
	|	&ПериодичностьФакта КАК Периодичность,
	|	ОборотыБюджетов.СтатьяБюджетов КАК СтатьяБюджетов,
	|	ВЫБОР
	|		КОГДА ОборотыБюджетов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				И ОборотыБюджетов.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА &УправленческаяОрганизация
	|		КОГДА НЕ ОборотыБюджетов.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ОборотыБюджетов.Подразделение.ЦФО
	|		ИНАЧЕ ОборотыБюджетов.Организация
	|	КОНЕЦ КАК ЦФО,
	|	ОборотыБюджетов.Валюта КАК Валюта,
	|	ОборотыБюджетов.Аналитика1 КАК Аналитика1,
	|	ОборотыБюджетов.Аналитика2 КАК Аналитика2,
	|	ОборотыБюджетов.Аналитика3 КАК Аналитика3,
	|	ОборотыБюджетов.Аналитика4 КАК Аналитика4,
	|	ОборотыБюджетов.Аналитика5 КАК Аналитика5,
	|	ОборотыБюджетов.Аналитика6 КАК Аналитика6,
	|	ОборотыБюджетов.Количество КАК КоличествоОборот,
	|	ОборотыБюджетов.СуммаУпр КАК СуммаУпрОборот,
	|	ОборотыБюджетов.СуммаУпр КАК СуммаСценарияОборот,
	|	ОборотыБюджетов.СуммаРегл КАК СуммаРеглОборот,
	|	ОборотыБюджетов.СуммаВВалюте КАК СуммаВВалютеОборот
	|ПОМЕСТИТЬ ТаблицаОборотовНормализованная
	|ИЗ
	|	РегистрНакопления.ФактическиеДанныеБюджетирования КАК ОборотыБюджетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОборотовНормализованная.Сценарий КАК Сценарий,
	|	ТаблицаОборотовНормализованная.ОсновнаяВалюта КАК ОсновнаяВалюта,
	|	ТаблицаОборотовНормализованная.СтатьяБюджетов КАК СтатьяБюджетов,
	|	ТаблицаОборотовНормализованная.ЦФО КАК ЦФО,
	|	ТаблицаОборотовНормализованная.Валюта КАК Валюта,
	|	ТаблицаОборотовНормализованная.Аналитика1 КАК Аналитика1,
	|	ТаблицаОборотовНормализованная.Аналитика2 КАК Аналитика2,
	|	ТаблицаОборотовНормализованная.Аналитика3 КАК Аналитика3,
	|	ТаблицаОборотовНормализованная.Аналитика4 КАК Аналитика4,
	|	ТаблицаОборотовНормализованная.Аналитика5 КАК Аналитика5,
	|	ТаблицаОборотовНормализованная.Аналитика6 КАК Аналитика6,
	|	ТаблицаОборотовНормализованная.КоличествоОборот КАК КоличествоОборот,
	|	ТаблицаОборотовНормализованная.СуммаУпрОборот КАК СуммаУпрОборот,
	|	ТаблицаОборотовНормализованная.СуммаСценарияОборот КАК СуммаСценарияОборот,
	|	ТаблицаОборотовНормализованная.СуммаРеглОборот КАК СуммаРеглОборот,
	|	ТаблицаОборотовНормализованная.СуммаВВалютеОборот КАК СуммаВВалютеОборот,
	|	Периоды.Ссылка КАК ПериодОтчета
	|ПОМЕСТИТЬ ТаблицаКГруппировке
	|ИЗ
	|	ТаблицаОборотовНормализованная КАК ТаблицаОборотовНормализованная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Периоды КАК Периоды
	|		ПО ТаблицаОборотовНормализованная.Периодичность = Периоды.Периодичность
	|			И ТаблицаОборотовНормализованная.ДатаНачалаПериода >= Периоды.ДатаНачала
	|			И ТаблицаОборотовНормализованная.ДатаНачалаПериода <= Периоды.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКГруппировке.Сценарий КАК Сценарий,
	|	ТаблицаКГруппировке.ПериодОтчета КАК ПериодОтчета,
	|	ТаблицаКГруппировке.ОсновнаяВалюта КАК ОсновнаяВалюта,
	|	ТаблицаКГруппировке.СтатьяБюджетов КАК СтатьяБюджетов,
	|	ТаблицаКГруппировке.ЦФО КАК ЦФО,
	|	ТаблицаКГруппировке.Валюта КАК Валюта,
	|	ТаблицаКГруппировке.Аналитика1 КАК Аналитика1,
	|	ТаблицаКГруппировке.Аналитика2 КАК Аналитика2,
	|	ТаблицаКГруппировке.Аналитика3 КАК Аналитика3,
	|	ТаблицаКГруппировке.Аналитика4 КАК Аналитика4,
	|	ТаблицаКГруппировке.Аналитика5 КАК Аналитика5,
	|	ТаблицаКГруппировке.Аналитика6 КАК Аналитика6,
	|	СУММА(ТаблицаКГруппировке.КоличествоОборот) КАК КоличествоОборот,
	|	СУММА(ТаблицаКГруппировке.СуммаУпрОборот) КАК СуммаУпрОборот,
	|	СУММА(ТаблицаКГруппировке.СуммаСценарияОборот) КАК СуммаСценарияОборот,
	|	СУММА(ТаблицаКГруппировке.СуммаРеглОборот) КАК СуммаРеглОборот,
	|	СУММА(ТаблицаКГруппировке.СуммаВВалютеОборот) КАК СуммаВВалютеОборот
	|ПОМЕСТИТЬ ОборотыСгруппированные
	|ИЗ
	|	ТаблицаКГруппировке КАК ТаблицаКГруппировке
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаКГруппировке.Сценарий,
	|	ТаблицаКГруппировке.ПериодОтчета,
	|	ТаблицаКГруппировке.ОсновнаяВалюта,
	|	ТаблицаКГруппировке.СтатьяБюджетов,
	|	ТаблицаКГруппировке.ЦФО,
	|	ТаблицаКГруппировке.Валюта,
	|	ТаблицаКГруппировке.Аналитика1,
	|	ТаблицаКГруппировке.Аналитика2,
	|	ТаблицаКГруппировке.Аналитика3,
	|	ТаблицаКГруппировке.Аналитика4,
	|	ТаблицаКГруппировке.Аналитика5,
	|	ТаблицаКГруппировке.Аналитика6
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Ссылка,
	|	ПоказателиОтчетов.ЭлементБюджета КАК ЭлементБюджета
	|ПОМЕСТИТЬ ПоказателиСумма
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &ВидОтчета
	|	И НЕ ПоказателиОтчетов.НеФинансовый
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Ссылка,
	|	ПоказателиОтчетов.ЭлементБюджета КАК ЭлементБюджета
	|ПОМЕСТИТЬ ПоказателиКоличество
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &ВидОтчета
	|	И ПоказателиОтчетов.НеФинансовый
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОборотовНормализованная.Сценарий КАК Сценарий,
	|	ТаблицаОборотовНормализованная.Периодичность КАК Периодичность,
	|	МИНИМУМ(ТаблицаОборотовНормализованная.ДатаНачалаПериода) КАК ДатаНачалаПериодаНач,
	|	МАКСИМУМ(ТаблицаОборотовНормализованная.ДатаНачалаПериода) КАК ДатаНачалаПериодаКон
	|ПОМЕСТИТЬ ИнтервалПериодов
	|ИЗ
	|	ТаблицаОборотовНормализованная КАК ТаблицаОборотовНормализованная
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОборотовНормализованная.Сценарий,
	|	ТаблицаОборотовНормализованная.Периодичность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыСгруппированные.Сценарий КАК Сценарий,
	|	ОборотыСгруппированные.ОсновнаяВалюта КАК ОсновнаяВалюта,
	|	ОборотыСгруппированные.ЦФО КАК ЦФО,
	|	ОборотыСгруппированные.Валюта КАК Валюта,
	|	ОборотыСгруппированные.Аналитика1 КАК Аналитика1,
	|	ОборотыСгруппированные.Аналитика2 КАК Аналитика2,
	|	ОборотыСгруппированные.Аналитика3 КАК Аналитика3,
	|	ОборотыСгруппированные.Аналитика4 КАК Аналитика4,
	|	ОборотыСгруппированные.Аналитика5 КАК Аналитика5,
	|	ОборотыСгруппированные.Аналитика6 КАК Аналитика6,
	|	ОборотыСгруппированные.КоличествоОборот КАК КоличествоОборот,
	|	ОборотыСгруппированные.СуммаУпрОборот КАК СуммаУпрОборот,
	|	ОборотыСгруппированные.СуммаСценарияОборот КАК СуммаСценарияОборот,
	|	ОборотыСгруппированные.СуммаРеглОборот КАК СуммаРеглОборот,
	|	ОборотыСгруппированные.СуммаВВалютеОборот КАК СуммаВВалютеОборот,
	|	ОборотыСгруппированные.ПериодОтчета КАК ПериодОтчета,
	|	ПоказателиСумма.Ссылка КАК ПоказательСумма,
	|	ПоказателиКоличество.Ссылка КАК ПоказательКоличество,
	|	ОборотыСгруппированные.СтатьяБюджетов.УчитыватьПоВалюте КАК Валютная
	|ПОМЕСТИТЬ РабочаяТаблицаПоказателей
	|ИЗ
	|	ОборотыСгруппированные КАК ОборотыСгруппированные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоказателиСумма КАК ПоказателиСумма
	|		ПО ОборотыСгруппированные.СтатьяБюджетов = ПоказателиСумма.ЭлементБюджета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоказателиКоличество КАК ПоказателиКоличество
	|		ПО ОборотыСгруппированные.СтатьяБюджетов = ПоказателиКоличество.ЭлементБюджета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РабочаяТаблицаПоказателей.Сценарий КАК Сценарий,
	|	РабочаяТаблицаПоказателей.ОсновнаяВалюта КАК ОсновнаяВалюта,
	|	РабочаяТаблицаПоказателей.ЦФО КАК ЦФО,
	|	РабочаяТаблицаПоказателей.ПериодОтчета КАК ПериодОтчета,
	|	РабочаяТаблицаПоказателей.ПоказательСумма КАК ПоказательСумма,
	|	РабочаяТаблицаПоказателей.ПоказательКоличество КАК ПоказательКоличество,
	|	СУММА(РабочаяТаблицаПоказателей.КоличествоОборот) КАК Количество,
	|	СУММА(РабочаяТаблицаПоказателей.СуммаУпрОборот) КАК СуммаУпр,
	|	СУММА(РабочаяТаблицаПоказателей.СуммаСценарияОборот) КАК Сумма,
	|	СУММА(РабочаяТаблицаПоказателей.СуммаРеглОборот) КАК СуммаРегл
	|ИЗ
	|	РабочаяТаблицаПоказателей КАК РабочаяТаблицаПоказателей
	|
	|СГРУППИРОВАТЬ ПО
	|	РабочаяТаблицаПоказателей.Сценарий,
	|	РабочаяТаблицаПоказателей.ОсновнаяВалюта,
	|	РабочаяТаблицаПоказателей.ЦФО,
	|	РабочаяТаблицаПоказателей.ПериодОтчета,
	|	РабочаяТаблицаПоказателей.ПоказательСумма,
	|	РабочаяТаблицаПоказателей.ПоказательКоличество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РабочаяТаблицаПоказателей.Сценарий КАК Сценарий,
	|	РабочаяТаблицаПоказателей.ОсновнаяВалюта КАК ОсновнаяВалюта,
	|	РабочаяТаблицаПоказателей.ЦФО КАК ЦФО,
	|	РабочаяТаблицаПоказателей.Валюта КАК АналитикаВалюта,
	|	РабочаяТаблицаПоказателей.Аналитика1 КАК Аналитика1,
	|	РабочаяТаблицаПоказателей.Аналитика2 КАК Аналитика2,
	|	РабочаяТаблицаПоказателей.Аналитика3 КАК Аналитика3,
	|	РабочаяТаблицаПоказателей.Аналитика4 КАК Аналитика4,
	|	РабочаяТаблицаПоказателей.Аналитика5 КАК Аналитика5,
	|	РабочаяТаблицаПоказателей.Аналитика6 КАК Аналитика6,
	|	РабочаяТаблицаПоказателей.КоличествоОборот КАК Количество,
	|	РабочаяТаблицаПоказателей.СуммаУпрОборот КАК СуммаУпр,
	|	РабочаяТаблицаПоказателей.СуммаСценарияОборот КАК Сумма,
	|	РабочаяТаблицаПоказателей.СуммаРеглОборот КАК СуммаРегл,
	|	РабочаяТаблицаПоказателей.СуммаВВалютеОборот КАК ЗначениеВалюта,
	|	РабочаяТаблицаПоказателей.ПериодОтчета КАК ПериодОтчета,
	|	РабочаяТаблицаПоказателей.ПоказательСумма КАК ПоказательСумма,
	|	РабочаяТаблицаПоказателей.ПоказательСумма.ГруппаРаскрытия КАК ГруппаРаскрытия,
	|	ЕСТЬNULL(РабочаяТаблицаПоказателей.ПоказательСумма.ГруппаРаскрытия.Валютная, ЛОЖЬ) КАК Валютный,
	|	ЕСТЬNULL(РабочаяТаблицаПоказателей.ПоказательСумма.ГруппаРаскрытия.ЧислоАналитик, 0) КАК ЧислоАналитикГруппыРаскрытия,
	|	РабочаяТаблицаПоказателей.ПоказательКоличество КАК ПоказательКоличество,
	|	РабочаяТаблицаПоказателей.Валютная КАК Валютная
	|ИЗ
	|	РабочаяТаблицаПоказателей КАК РабочаяТаблицаПоказателей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнтервалПериодов.Сценарий КАК Сценарий,
	|	ИнтервалПериодов.Периодичность КАК Периодичность,
	|	ПериодыКон.Ссылка КАК ПериодОкончание,
	|	ПериодыНач.Ссылка КАК ПериодОтчета,
	|	ИнтервалПериодов.Сценарий.Валюта КАК ОсновнаяВалюта
	|ИЗ
	|	ИнтервалПериодов КАК ИнтервалПериодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Периоды КАК ПериодыНач
	|		ПО ИнтервалПериодов.Периодичность = ПериодыНач.Периодичность
	|			И ИнтервалПериодов.ДатаНачалаПериодаНач >= ПериодыНач.ДатаНачала
	|			И ИнтервалПериодов.ДатаНачалаПериодаНач <= ПериодыНач.ДатаОкончания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Периоды КАК ПериодыКон
	|		ПО ИнтервалПериодов.Периодичность = ПериодыКон.Периодичность
	|			И ИнтервалПериодов.ДатаНачалаПериодаКон >= ПериодыКон.ДатаНачала
	|			И ИнтервалПериодов.ДатаНачалаПериодаКон <= ПериодыКон.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОборотыСгруппированные.ЦФО КАК ЦФО
	|ИЗ
	|	ОборотыСгруппированные КАК ОборотыСгруппированные";
	
	
	Запрос.УстановитьПараметр("УправленческаяОрганизация",Справочники.Организации.УправленческаяОрганизация);
	Запрос.УстановитьПараметр("ВидОтчета",			ВидОтчета);
	Запрос.УстановитьПараметр("ВалютаУпрУчета",		ВалютаУпрУчета);
	Запрос.УстановитьПараметр("ПериодичностьФакта",	ПериодичностьФакта);
	
	Результат=Запрос.ВыполнитьПакет();
	
	СтруктураОтвета=Новый Структура;
	
	СтруктураОтвета.Вставить("ТаблицаСинтетики",		Результат[7].Выгрузить());
	СтруктураОтвета.Вставить("ТаблицаАналитики",		Результат[8].Выгрузить());
	СтруктураОтвета.Вставить("ТаблицаПериодыСценария",	Результат[9].Выгрузить());
	СтруктураОтвета.Вставить("ТаблицаЦФО",				Результат[10].Выгрузить());
	
	Возврат СтруктураОтвета;
	
	
	
КонецФункции // ПолучитьРабочиеТаблицыФакт()

Процедура ПеренестиДанныеИзРегистра(ВидОтчета,ИмяРегистра)
	
	Если ИмяРегистра="ОборотыБюджетов" Тогда
		
		РабочиеТаблицы=ПолучитьРабочиеТаблицыПлан(ВидОтчета);
		
	Иначе
		
		РабочиеТаблицы=ПолучитьРабочиеТаблицыФакт(ВидОтчета);
		
	КонецЕсли;
	
	ТаблицаСинтетики		= РабочиеТаблицы.ТаблицаСинтетики;
	ТаблицаАналитики		= РабочиеТаблицы.ТаблицаАналитики;
	ТаблицаПериодыСценария	= РабочиеТаблицы.ТаблицаПериодыСценария;
	ТаблицаЦФО				= РабочиеТаблицы.ТаблицаЦФО;

	Отказ=Ложь;
	
	СформироватьДокументыУправленияПериодом(ТаблицаПериодыСценария,ТаблицаЦФО,Отказ);
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПоследнийРедактировавший= ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	ДатаИзмененияMs			= ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ОбъектРасчета=Новый Структура;
	
	ОбъектРасчета.Вставить("СохранятьИсториюИзменений",Ложь);
	ОбъектРасчета.Вставить("РазделениеПоПроектам",Ложь);
	ОбъектРасчета.Вставить("ПоследнийРедактировавший",ПоследнийРедактировавший);
	ОбъектРасчета.Вставить("ДатаИзмененияMs",ДатаИзмененияMs);
	ОбъектРасчета.Вставить("РучнаяОперация",Ложь);
	ОбъектРасчета.Вставить("РежимКорректировки",Ложь);
	ОбъектРасчета.Вставить("ВерсияХранимогоФайла",Неопределено);
	ОбъектРасчета.Вставить("Вариант",		Неопределено);
	ОбъектРасчета.Вставить("ВидОтчета",		ВидОтчета);
	ОбъектРасчета.Вставить("АктивностьДвижений",Истина);
	ОбъектРасчета.Вставить("СпособФормированияОтчета",Перечисления.СпособыФормированияОтчетов.ПустаяСсылка());
	
	ТаблицаСинтетики.Колонки.Добавить("Версия");
	ТаблицаАналитики.Колонки.Добавить("Версия");
	
	ТаблицаСинтетики.Колонки.Добавить("ВерсияУпр");
	ТаблицаАналитики.Колонки.Добавить("ВерсияУпр");
	
	ТаблицаСинтетики.Колонки.Добавить("ВерсияРегл");
	ТаблицаАналитики.Колонки.Добавить("ВерсияРегл");
	
	ТаблицаОписанийВерсий=Новый ТаблицаЗначений;
	ТаблицаОписанийВерсий.Колонки.Добавить("Сценарий");
	ТаблицаОписанийВерсий.Колонки.Добавить("ВидОтчета");
	ТаблицаОписанийВерсий.Колонки.Добавить("ПериодОтчета");
	ТаблицаОписанийВерсий.Колонки.Добавить("Организация");
	ТаблицаОписанийВерсий.Колонки.Добавить("ОписаниеВерсии");
	
	ТаблицаВерсий=ТаблицаОписанийВерсий.СкопироватьКолонки();
	ТаблицаВерсий.Колонки.Добавить("Валюта");
	ТаблицаВерсий.Колонки.Добавить("Версия");
	ТаблицаВерсий.Колонки.Добавить("ОсновнаяВалюта");

	ДополнитьКолонкуВерсий(ОбъектРасчета,ТаблицаСинтетики);
	ДополнитьКолонкуВерсий(ОбъектРасчета,ТаблицаАналитики);
	
	ИмяТаблицыСинтетики="ЗначенияПоказателейОтчетовСинтетика";
			
	СтруктураРеквизиты=Новый Структура;
	СтруктураРеквизиты.Вставить("ПравилоОбработки",			Справочники.ПравилаОбработки.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ИспользуемаяИБ",			Справочники.ВнешниеИнформационныеБазы.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ДатаИзменения",			ТекущаяДата());
	СтруктураРеквизиты.Вставить("ПоследнийРедактировавший",	ПоследнийРедактировавший);
	СтруктураРеквизиты.Вставить("ДатаИзмененияMs",			ДатаИзмененияMs);
	СтруктураРеквизиты.Вставить("СпособФормированияОтчета",	Перечисления.СпособыФормированияОтчетов.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("мНеЧисловыеПоказатели",	Новый Массив);
	СтруктураРеквизиты.Вставить("Регистратор",				Неопределено);
	
	ТабСоответствиеНаборовЗаписей=Новый ТаблицаЗначений;
	ТабСоответствиеНаборовЗаписей.Колонки.Добавить("Версия");
	ТабСоответствиеНаборовЗаписей.Колонки.Добавить("ИмяРегистра");
	ТабСоответствиеНаборовЗаписей.Колонки.Добавить("НаборЗаписей");

	Для Каждого СтрВерсия ИЗ ТаблицаВерсий Цикл
		
		ДобавитьЗаписиВНаборыСинтетика(СтрВерсия.Версия,
					ТаблицаСинтетики.НайтиСтроки(Новый Структура("Версия",СтрВерсия.Версия)),
					ТабСоответствиеНаборовЗаписей,
					"Сумма",
					СтруктураРеквизиты);
					
		ДобавитьЗаписиВНаборыСинтетика(СтрВерсия.Версия,
					ТаблицаСинтетики.НайтиСтроки(Новый Структура("ВерсияУпр",СтрВерсия.Версия)),
					ТабСоответствиеНаборовЗаписей,
					"СуммаУпр",
					СтруктураРеквизиты);
					
		ДобавитьЗаписиВНаборыСинтетика(СтрВерсия.Версия,
					ТаблицаСинтетики.НайтиСтроки(Новый Структура("ВерсияРегл",СтрВерсия.Версия)),
					ТабСоответствиеНаборовЗаписей,
					"СуммаРегл",
					СтруктураРеквизиты);
					
		ДобавитьЗаписиВНаборыАналитика(СтрВерсия.Версия,
					ТаблицаАналитики.НайтиСтроки(Новый Структура("Версия",СтрВерсия.Версия)),
					ТабСоответствиеНаборовЗаписей,
					"Сумма",
					СтруктураРеквизиты);
					
		ДобавитьЗаписиВНаборыАналитика(СтрВерсия.Версия,
					ТаблицаАналитики.НайтиСтроки(Новый Структура("ВерсияУпр",СтрВерсия.Версия)),
					ТабСоответствиеНаборовЗаписей,
					"СуммаУпр",
					СтруктураРеквизиты);
					
		ДобавитьЗаписиВНаборыАналитика(СтрВерсия.Версия,
					ТаблицаАналитики.НайтиСтроки(Новый Структура("ВерсияРегл",СтрВерсия.Версия)),
					ТабСоответствиеНаборовЗаписей,
					"СуммаРегл",
					СтруктураРеквизиты);
			
	КонецЦикла;
					
	Для Каждого СтрокаНабор ИЗ ТабСоответствиеНаборовЗаписей Цикл
		
		СтрокаНабор.НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры // ПеренестиДанныеИзРегистров()

Процедура ДобавитьЗаписиВНаборыСинтетика(Версия,
					МассивСтрок,
					ТабСоответствиеНаборовЗаписей,
					ИмяКолонкиЗначение,
					СтруктураРеквизиты)
					
	Если МассивСтрок.Количество()=0 Тогда
		
		Возврат;
		
	КонецЕсли;				
					
	Для Каждого СтрокаЧисловые ИЗ МассивСтрок Цикл
		
		ДобавитьЗаписьВНабор(Версия,
			"ЗначенияПоказателейОтчетовСинтетика",
			СтрокаЧисловые,
			ИмяКолонкиЗначение,
			СтруктураРеквизиты,
			ТабСоответствиеНаборовЗаписей);
		
		
	КонецЦикла;
										
КонецПроцедуры // ДобавитьЗаписиВНаборыСинтетика()

Процедура ДобавитьЗаписиВНаборыАналитика(Версия,
					МассивСтрок,
					ТабСоответствиеНаборовЗаписей,
					ИмяКолонкиЗначение,
					СтруктураРеквизиты)
					
	Если МассивСтрок.Количество()=0 Тогда
		
		Возврат;
		
	КонецЕсли;				
					
	Для Каждого СтрокаЧисловые ИЗ МассивСтрок Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаЧисловые.ГруппаРаскрытия) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрокаЧисловые.ЧислоАналитикГруппыРаскрытия>0 Тогда
			
			 ДобавитьЗаписьВНабор(Версия,
				"ЗначенияПоказателейОтчетов"+СтрокаЧисловые.ЧислоАналитикГруппыРаскрытия,
				СтрокаЧисловые,
				ИмяКолонкиЗначение,
				СтруктураРеквизиты,
				ТабСоответствиеНаборовЗаписей);
			
						
		Иначе
			
			ДобавитьЗаписьВНабор(Версия,
				"ЗначенияПоказателейОтчетовВалютные",
				СтрокаЧисловые,
				ИмяКолонкиЗначение,
				СтруктураРеквизиты,
				ТабСоответствиеНаборовЗаписей);
			
		КонецЕсли;	
		
	КонецЦикла;
										
КонецПроцедуры // ДобавитьЗаписиВНаборыЧисловые()

Процедура ДобавитьЗаписьВНабор(Версия,
				ИмяРегистра,
				СтрокаЗаписи,
				ИмяКолонкиЗначение,
				СтруктураРеквизиты,
				ТабСоответствиеНаборовЗаписей);
				
	МассивНабор=ТабСоответствиеНаборовЗаписей.НайтиСтроки(Новый Структура("Версия,ИмяРегистра",Версия,ИмяРегистра));
	
	Если МассивНабор.Количество()=0 Тогда
		
		СтрокаНабор=ТабСоответствиеНаборовЗаписей.Добавить();
		СтрокаНабор.Версия=Версия;
		СтрокаНабор.ИмяРегистра=ИмяРегистра;
		
		НаборЗаписей=РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Версия.Установить(Версия);
		СтрокаНабор.НаборЗаписей=НаборЗаписей;
		
	Иначе
		
		СтрокаНабор=МассивНабор[0];
		
	КонецЕсли;
	
	Движение=СтрокаНабор.НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение,СтрокаЗаписи);
	Движение.Показатель=СтрокаЗаписи.ПоказательСумма;
	Движение.Версия=Версия;
	Движение.Значение=СтрокаЗаписи[ИмяКолонкиЗначение];
	ЗаполнитьЗначенияСвойств(Движение,СтруктураРеквизиты);
	Движение.Активность=Истина;
	Движение.Регистратор=Версия;
	
	Если ЗначениеЗаполнено(СтрокаЗаписи.ПоказательКоличество) Тогда
		
		Движение=СтрокаНабор.НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Движение,СтрокаЗаписи);
		Движение.Показатель=СтрокаЗаписи.ПоказательКоличество;
		Движение.Значение=СтрокаЗаписи.Количество;
		Движение.Версия=Версия;
		ЗаполнитьЗначенияСвойств(Движение,СтруктураРеквизиты);
		Движение.Активность=Истина;
		Движение.Регистратор=Версия;
		
	КонецЕсли;
		
		
					
КонецПроцедуры // ДобавитьЗаписьВНабор()

Процедура ДополнитьКолонкуВерсий(ОбъектРасчета,РабочаяТаблица)
	
	Для Каждого Строка ИЗ РабочаяТаблица Цикл
		
		СтруктураПоиска=Новый Структура;
		СтруктураПоиска.Вставить("Сценарий",Строка.Сценарий);
		СтруктураПоиска.Вставить("ВидОтчета",ОбъектРасчета.ВидОтчета);
		СтруктураПоиска.Вставить("ПериодОтчета",Строка.ПериодОтчета);
		СтруктураПоиска.Вставить("Организация",Строка.ЦФО);
		
		МассивОписаний=ТаблицаОписанийВерсий.НайтиСтроки(СтруктураПоиска);
		
		Если МассивОписаний.Количество()=1 Тогда
			
			ОписаниеВерсии=МассивОписаний[0].ОписаниеВерсии;
			
		Иначе
			
			ОбъектРасчета.Вставить("Сценарий",Строка.Сценарий);
			ОбъектРасчета.Вставить("ПериодОтчета",Строка.ПериодОтчета);
			ОбъектРасчета.Вставить("Организация",Строка.ЦФО);
			
			ОписаниеВерсии=УправлениеОтчетамиУХ.ПолучитьОписаниеВерсии(ОбъектРасчета);
			
			НоваяСтрока=ТаблицаОписанийВерсий.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураПоиска);
			НоваяСтрока.ОписаниеВерсии=ОписаниеВерсии;
			
		КонецЕсли;
		
		СтруктураПоиска.Вставить("ОписаниеВерсии",ОписаниеВерсии);
		
		ДобавитьВерсиюВалюта(ОбъектРасчета,СтруктураПоиска,Строка,Строка.ОсновнаяВалюта,"Версия");
		
		Если НЕ Строка.ОсновнаяВалюта=ВалютаУпрУчета Тогда 
			
			ДобавитьВерсиюВалюта(ОбъектРасчета,СтруктураПоиска,Строка,ВалютаУпрУчета,"ВерсияУпр");
			
		КонецЕсли;
		
		Если НЕ Строка.ОсновнаяВалюта=ВалютаРеглУчета Тогда 
			
			ДобавитьВерсиюВалюта(ОбъектРасчета,СтруктураПоиска,Строка,ВалютаРеглУчета,"ВалютаРеглУчета");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДополнитьКолонкуВерсий()
	
Процедура ДобавитьВерсиюВалюта(ОбъектРасчета,СтруктураПоиска,Строка,Валюта,ИмяКолонки)
	
	СтруктураПоиска.Вставить("Валюта",Валюта);
	
	МассивВерсий=ТаблицаВерсий.НайтиСтроки(СтруктураПоиска);
	
	Если МассивВерсий.Количество()=1 Тогда
		
		Версия=МассивВерсий[0].Версия;
		
	Иначе
		
		Версия=УправлениеОтчетамиУХ.ПолучитьВерсию(ОбъектРасчета,
										Ложь,
										Валюта,
										СтруктураПоиска.ОписаниеВерсии,
										Истина,
										Ложь,
										(Валюта<>Строка.ОсновнаяВалюта));
										
			НоваяСтрока=ТаблицаВерсий.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураПоиска);
			НоваяСтрока.Версия=Версия;
			
	КонецЕсли;
		
	Строка[ИмяКолонки]=Версия;	
			
КонецПроцедуры // ДобавитьВерсиюВалюта() 

Процедура СформироватьДокументыУправленияПериодом(ТаблицаПериодыСценария,ТаблицаЦФО,Отказ)
	
	ТаблицаПериодыСценария.Колонки.Добавить("ВерсияРегламента");
	ТабШаблонДокумента=ТаблицаПериодыСценария.СкопироватьКолонки();
	
	// Создаем версии регламентов
	СоответствиеРегламентов=Новый Соответствие;
	
	Для Каждого Строка ИЗ ТаблицаПериодыСценария Цикл
		
		ТекВерсияРегламента=СоответствиеРегламентов.Получить(Строка.ОсновнаяВалюта);
		
		Если ТекВерсияРегламента=Неопределено Тогда
			
			ТекВерсияРегламента=ПолучитьВерсиюРегламента(Строка.ОсновнаяВалюта,ТаблицаЦФО);
			СоответствиеРегламентов.Вставить(Строка.ОсновнаяВалюта,ТекВерсияРегламента);
			
		КонецЕсли;
		
		Строка.ВерсияРегламента=ТекВерсияРегламента;
		
		СоздатьШаблоныДокументовУОП(ТабШаблонДокумента,Строка);
		
	КонецЦикла;
	
	СоздатьДокументыУОП(ТабШаблонДокумента,Отказ);
	
КонецПроцедуры // СформироватьДокументыУправленияПериодом()

Процедура СоздатьДокументыУОП(ТабШаблонДокумента,Отказ)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	УправлениеПериодомСценария.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	|ГДЕ
	|	УправлениеПериодомСценария.Сценарий = &Сценарий
	|	И УправлениеПериодомСценария.ПериодСценария = &ПериодСценария";
	
	Для Каждого Строка ИЗ ТабШаблонДокумента Цикл
		
		Запрос.УстановитьПараметр("Сценарий",Строка.Сценарий);
		Запрос.УстановитьПараметр("ПериодСценария",Строка.ПериодОтчета);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДокументУОП=Документы.УправлениеПериодомСценария.СоздатьДокумент();
		ДокументУОП.Дата=ТекущаяДата();
		ДокументУОП.УстановитьНовыйНомер();

		ДокументУОП.ВерсияОрганизационнойСтруктуры 	= Строка.ВерсияРегламента;
		ДокументУОП.ПериодСценария					= Строка.ПериодОтчета;
		ДокументУОП.ПериодСценарияОкончание			= Строка.ПериодОкончание;
		ДокументУОП.Сценарий						= Строка.Сценарий;
		ДокументУОП.ТекущаяПериодичность			= Строка.Периодичность;
		
		ОбновитьКурсыВалют(ДокументУОП,Отказ);
		
		Если Отказ Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Попытка	
			
			ДокументУОП.Записать(РежимЗаписиДокумента.Запись);	
			
		Исключение
			
			СтрокаШаблона = НСтр("ru = 'Не удалось создать документ ""Управление периодом сценария"" для периода %1 и сценария %2'");
			
			Если ЗначениеЗаполнено(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Строка.ПериодОтчета, Строка.Сценарий),,, СтатусСообщения.Внимание);
			КонецЕсли;
			
			Отказ=Истина;
			
			Возврат;	
			
		КонецПопытки;
		
	КонецЦикла;


		
	
	
КонецПроцедуры //  СоздатьДокументыУОП()

Процедура ОбновитьКурсыВалют(ДокументУОП,Отказ)
	
	МассивПериодов=ПериодыУХ.ПолучитьПодчиненныеПериодыТаблица(ДокументУОП.ПериодСценария, ДокументУОП.ПериодСценарияОкончание);
	
	Для Каждого СтрПериод Из МассивПериодов Цикл
		
		ТаблицаКурсов = ОбщегоНазначенияСерверУХ.ЗаполнитьПериодическиеКурсыВалют(СтрПериод.ПериодКурса, ДокументУОП.Сценарий, ДокументУОП.ПериодСценарияОкончание);
		
		Для Каждого Элемент ИЗ ТаблицаКурсов Цикл
			
			НаборЗаписей=РегистрыСведений.ПериодическиеКурсы.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сценарий.Установить(ДокументУОП.Сценарий);
			НаборЗаписей.Отбор.Валюта.Установить(Элемент.Валюта);
			НаборЗаписей.Отбор.ПериодКурса.Установить(СтрПериод.ПериодКурса);
			
			НоваяСтрока=НаборЗаписей.Добавить();
			
			НоваяСтрока.Валюта		= Элемент.Валюта;
			НоваяСтрока.ПериодКурса	= СтрПериод.ПериодКурса;
			НоваяСтрока.Сценарий	= ДокументУОП.Сценарий;
			НоваяСтрока.Кратность	= Элемент.Кратность;
			
			НоваяСтрока.СреднийКурсЗаПредыдущийПериод 	= Элемент.СреднийКурсЗаПредыдущийПериод;
			НоваяСтрока.КурсНаКонецПредыдущегоПериода 	= Элемент.КурсНаКонецПредыдущегоПериода;
			НоваяСтрока.СреднийКурсЗаПериод     		= Элемент.СреднийКурсЗаПериод;
			НоваяСтрока.СреднийКурсЗаПериодМСФО 		= Элемент.СреднийКурсЗаПериодМСФО;
			НоваяСтрока.КурсНаНачалоПериода     		= Элемент.КурсНаНачалоПериода;
			НоваяСтрока.КурсНаКонецПериода      		= Элемент.КурсНаКонецПериода;
			НоваяСтрока.СреднийКурсЗаПериодЦБ      		= Элемент.СреднийКурсЗаПериодЦБ;
			НоваяСтрока.СреднийКурсЗаПредыдущийПериодЦБ	= Элемент.СреднийКурсЗаПредыдущийПериодЦБ;
			
			Попытка
				
				НаборЗаписей.Записать(Истина);
				
			Исключение
				
				СтрокаШаблона = Нстр("ru = 'Не удалось сохранить курсы валют
				|%1'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда					
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
				КонецЕсли;
				
				Отказ=Истина;
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры // ОбновитьКурсыВалют() 

Процедура СоздатьШаблоныДокументовУОП(ТабШаблонДокумента,СтрокаПериодыСценарий)
	
	ПериодНачалаГод=ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(НачалоГода(СтрокаПериодыСценарий.ПериодОтчета.ДатаНачала),СтрокаПериодыСценарий.Периодичность,0);
	ПериодОкончанияГод=ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(КонецГода(СтрокаПериодыСценарий.ПериодОтчета.ДатаНачала),СтрокаПериодыСценарий.Периодичность,0);
	
	Если ПериодОкончанияГод.ДатаОкончания>=СтрокаПериодыСценарий.ПериодОкончание.ДатаОкончания Тогда
		
		НоваяСтрока=ТабШаблонДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаПериодыСценарий);
		НоваяСтрока.ПериодОтчета=ПериодНачалаГод;
		НоваяСтрока.ПериодОкончание=ПериодОкончанияГод;
		
	Иначе
		
		МассивПериодов = ПериодыУХ.ПолучитьПодчиненныеПериоды(СтрокаПериодыСценарий.ПериодОтчета,СтрокаПериодыСценарий.ПериодОкончание,СтрокаПериодыСценарий.Периодичность);
		
		НоваяСтрока=ТабШаблонДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаПериодыСценарий);
		НоваяСтрока.ПериодОтчета=ПериодНачалаГод;
		НоваяСтрока.ПериодОкончание=ПериодОкончанияГод;
		
		ПериодНачалаНов=ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(ПериодОкончанияГод.ДатаНачала,СтрокаПериодыСценарий.Периодичность,1);
		
		РазбитьПоГодам(СтрокаПериодыСценарий,ТабШаблонДокумента,ПериодНачалаНов);
		
	КонецЕсли;	
	
КонецПроцедуры // СоздатьДокументыУОП()

Процедура РазбитьПоГодам(СтрокаПериодыСценарий,ТабШаблонДокумента,ПериодНачалаНов)
	
	Пока Истина Цикл
		
		ПериодОкончанияГод=ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(КонецГода(ПериодНачалаНов.ДатаНачала),СтрокаПериодыСценарий.Периодичность,0);
		НоваяСтрока=ТабШаблонДокумента.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаПериодыСценарий);
		НоваяСтрока.ПериодОтчета=ПериодНачалаНов;
		НоваяСтрока.ПериодОкончание=ПериодОкончанияГод;
		
		Если ПериодОкончанияГод.ДатаОкончания>=СтрокаПериодыСценарий.ПериодОкончание.ДатаОкончания Тогда
			
			Прервать;
			
		Иначе
			
			ПериодНачалаНов=ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(ПериодОкончанияГод.ДатаНачала,СтрокаПериодыСценарий.Периодичность,1);
			
		КонецЕсли;
		
	КонецЦикла;
				
КонецПроцедуры // РазбитьПоГодам(СтрокаПериодыСценарий,ТабШаблонДокумента)

Функция ПолучитьВерсиюРегламента(Валюта,ТаблицаЦФО)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ВерсииРегламентовПодготовкиОтчетности.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВерсииРегламентовПодготовкиОтчетности КАК ВерсииРегламентовПодготовкиОтчетности
	|ГДЕ
	|	ВерсииРегламентовПодготовкиОтчетности.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование","Регламент (ERP): "+Валюта);
	
	Результат=Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		
		РегламентОбъект= Результат.Ссылка.ПолучитьОбъект();
		
	Иначе
		
		РегламентОбъект=Справочники.ВерсииРегламентовПодготовкиОтчетности.СоздатьЭлемент();
		РегламентОбъект.Наименование="Регламент (ERP): "+Валюта;
		РегламентОбъект.МеткаВремени = ТекущаяДата();
		
	КонецЕсли;
	
	РегламентОбъект.ОрганизационныеЕдиницы.Очистить();
	РегламентОбъект.ДополнительныеВалюты.Очистить();
	РегламентОбъект.СтруктураГруппы.Очистить();
	
	РегламентОбъект.РежимМногопериодныхУОП = Истина;
	
	Для Каждого Строка ИЗ ТаблицаЦФО Цикл
		
		НоваяСтрока=РегламентОбъект.ОрганизационныеЕдиницы.Добавить();
		НоваяСтрока.ОрганизационнаяЕдиница=Строка.ЦФО;
		НоваяСтрока.ОсновнаяВалюта=Валюта;
		НоваяСтрока.ЭффективнаяДоля=100;
		
		Если НЕ Валюта=ВалютаУпрУчета Тогда 
			
			СтрокаВалюта=РегламентОбъект.ДополнительныеВалюты.Добавить();
			Строкавалюта.ОрганизационнаяЕдиница=Строка.ЦФО;
			СтрокаВалюта.Валюта=ВалютаУпрУчета;
			
		КонецЕсли;
		
		Если НЕ Валюта=ВалютаРеглУчета Тогда	
			
			СтрокаВалюта=РегламентОбъект.ДополнительныеВалюты.Добавить();
			Строкавалюта.ОрганизационнаяЕдиница=Строка.ЦФО;
			СтрокаВалюта.Валюта=ВалютаРеглУчета;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Организации.Ссылка КАК ОрганизационнаяЕдиница,
	|	Организации.Родитель КАК ОрганизационнаяЕдиницаРодитель
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОрганизационнаяЕдиницаРодитель";
	
	РегламентОбъект.СтруктураГруппы.Загрузить(Запрос.Выполнить().Выгрузить());
	
	РегламентОбъект.Записать();
	Возврат РегламентОбъект.Ссылка;
			
КонецФункции // ПолучитьВерсиюРегламента()

#КонецОбласти