
#Область СобытияФормы
	
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.КлассA = Истина;
	Объект.КлассB = Истина;
	Объект.КлассC = Истина;
	
	Если Параметры.Свойство("Отбор") И ТипЗнч(Параметры.Отбор) = Тип("Структура") Тогда
		
		Параметры.Отбор.Свойство("Автор", Объект.Пользователь);
		Параметры.Отбор.Свойство("ПериодЗакупки", Объект.ПериодЗакупки);
		
	КонецЕсли;
	
	//Если Параметры.Свойство("СформироватьПриОткрытии") И Параметры.СформироватьПриОткрытии = Истина Тогда
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры.Свойство("Отбор") И ТипЗнч(Параметры.Отбор) = Тип("Структура") Тогда
		
		Если Параметры.Отбор.Свойство("Автор") Тогда
			Настройки["Объект.Пользователь"] = Параметры.Отбор.Автор;
		КонецЕсли;
		
		Если Параметры.Отбор.Свойство("ПериодЗакупки") Тогда
			Настройки["Объект.ПериодЗакупки"] = Параметры.Отбор.ПериодЗакупки;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьДеревоНаСервере(Объект.Пользователь, Объект.ПериодЗакупки);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
КонецПроцедуры



&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура ТаблицаАналоговВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ТаблицаАналоговАналогНоменклатура" Тогда
		ПроизвестиВыборАналога(ВыбраннаяСтрока);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДеревоНаСервере(Пользователь, ПериодЗакупки)
	
	Если НЕ ЗначениеЗаполнено(ПериодЗакупки) Тогда
		Объект.ТаблицаАналогов.Очистить();
		Возврат неопределено;
	ИначеЕсли НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Объект.ТаблицаАналогов.Очистить();
		Возврат неопределено;
	КонецЕсли;
	
	//Получаем схему из макета
	СхемаКомпоновкиДанных = Отчеты.ОтчетОПримененииАналогов.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	//
	ВариантНастройки = СхемаКомпоновкиДанных.ВариантыНастроек.Найти("Основной");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ВариантНастройки.Настройки);
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ПеренестиПоляВыбораНаВерхнийУровень(Настройки, Настройки.Выбор.Элементы, неопределено);
	
	// Параметры вывода
	Параметр = Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("РасположениеИтогов"));
	Параметр.Значение = РасположениеИтоговКомпоновкиДанных.Нет;
	Параметр.Использование = Истина;
	
	// Параметры данных
	Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Автор"));
	Параметр.Значение = Пользователь;
	Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодЗакупки"));
	Параметр.Значение = ПериодЗакупки;
	
	//Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	
	//Выводим результат в табличный документ
	Таблица = Новый ТаблицаЗначений;
	ПроцессорВыводаВТЗ = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаВТЗ.УстановитьОбъект(Таблица);
	
	ПроцессорВыводаВТЗ.Вывести(ПроцессорКомпоновкиДанных);
	
	Объект.ТаблицаАналогов.Загрузить(Таблица);
	
	Для Каждого Строка Из Объект.ТаблицаАналогов Цикл
		
		Строка.A = Строка.ABC = "A";
		Строка.B = Строка.ABC = "B";
		Строка.C = Строка.ABC = "C";
		
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаСервере
Процедура ПеренестиПоляВыбораНаВерхнийУровень(Настройки, ВыборЭлементы, Родитель)
	
	//
	Для Каждого ЭлементВыбора Из ВыборЭлементы Цикл
		Если ТипЗнч(ЭлементВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			ПеренестиПоляВыбораНаВерхнийУровень(Настройки, ЭлементВыбора.Элементы, ЭлементВыбора);
		ИначеЕсли ТипЗнч(ЭлементВыбора) = Тип("ВыбранноеПолеКомпоновкиДанных") И Родитель <> неопределено Тогда
			Поле = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(Поле, ЭлементВыбора,,"Родитель")
		КонецЕсли;
	КонецЦикла;
	
	
	Если Родитель = неопределено Тогда
		
		Поз = 0;
		Пока Поз < ВыборЭлементы.Количество() Цикл
			ЭлементВыбора = ВыборЭлементы[Поз];
			Если ТипЗнч(ЭлементВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда 
				
				ВыборЭлементы.Удалить(ЭлементВыбора);
				
			Иначе
				Поз = Поз + 1;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	ЗаполнитьДеревоНаСервере(Объект.Пользователь, Объект.ПериодЗакупки);
	УстановитьОтборПоСумме();
	УстановитьОтборПоКлассу();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимФормированияПриИзменении(Элемент)
	Сформировать(неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПроизвестиВыборАналога(ИдентификаторСтроки)
	
	ТД = Элементы.ТаблицаАналогов.ТекущиеДанные;
	Если ТД = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПараметров = "Номенклатура, Характеристика, ЕдиницаИзмерения, АналогНоменклатура, АналогХарактеристика, АналогЕдиницаИзмерения, Классификация, ЕстьАналоги, КоличествоПотребность, СуммаПотребность, Экономия, АналогКоличество, АналогСумма";
	ДопПараметры = Новый Структура(ИменаПараметров);
	ЗаполнитьЗначенияСвойств(ДопПараметры, ТД);
	ДопПараметры.Вставить("Автор", Объект.Пользователь);
	ДопПараметры.Вставить("ПериодЗакупки", Объект.ПериодЗакупки);
	
	ДополнительныеДействия = Новый СписокЗначений;
	Если ТД.ЕстьАналоги Тогда
		ДополнительныеДействия.Добавить("УстановитьАналог", НСтр("ru = 'Установить аналог'"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТД.АналогНоменклатура) Тогда
		ДополнительныеДействия.Добавить("ОчиститьАналог", НСтр("ru = 'Сбросить аналог'"));
	КонецЕсли;
	
	Если ДополнительныеДействия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьВыборИзСписка(
		Новый ОписаниеОповещения("ВыборДействияЗавершение", ЭтаФорма, ДопПараметры),
		ДополнительныеДействия, 
		Элементы.ТаблицаАналоговАналогНоменклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДействияЗавершение(Результат, ДопПараметры) экспорт
	
	Если Результат = неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Значение = "УстановитьАналог" Тогда
		ВыбратьАналог(ДопПараметры);
	ИначеЕсли Результат.Значение = "ОчиститьАналог" Тогда
		ОчиститьАналог(ДопПараметры);
		ОбновитьТаблицуАналогов();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьАналог(ДопПараметры)
	
	нз = РегистрыСведений.АналогиНоменклатуры.СоздатьНаборЗаписей();
	нз.Отбор.Автор.Установить(ДопПараметры.Автор);
	нз.Отбор.ПериодЗакупки.Установить(ДопПараметры.ПериодЗакупки);
	нз.Отбор.Номенклатура.Установить(ДопПараметры.Номенклатура);
	нз.Отбор.ЕдиницаИзмерения.Установить(ДопПараметры.ЕдиницаИзмерения);
	Если ДопПараметры.Свойство("Характеристика") Тогда
		нз.Отбор.Характеристика.Установить(ДопПараметры.Характеристика);
	Иначе
		нз.Отбор.Характеристика.Установить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	нз.Прочитать();
	нз.Очистить();
	нз.Записать(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьАналог(ДопПараметры)
	
	ПараметрыФормы = Новый Структура("СтрокаРасшифровки", Новый Структура("Поля", ДопПараметры));
	//
	Завершение = Новый ОписаниеОповещения("ВыборАналогаЗавершение", ЭтаФорма, ДопПараметры);
	
	ОткрытьФорму("РегистрСведений.НастройкаЗаменыНоменклатуры.Форма.ФормаВыбораАналога", ПараметрыФормы, ,,,,Завершение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборАналогаЗавершение(Результат, ДополнительныеПараметры) экспорт
	
	Если Результат =  неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановленныйАналог = ЗаписатьВыборАналогаНаСервере(Результат, ДополнительныеПараметры);
	ОбновитьТаблицуАналогов(УстановленныйАналог);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуАналогов(УстановленныйАналог = неопределено)
	
	// Расчет текущей строки
	ТД = Элементы.ТаблицаАналогов.ТекущиеДанные;
	
	Если УстановленныйАналог = неопределено Тогда
		УстановленныйАналог = Новый Структура("Коэффициент, Цена, АналогНоменклатура, АналогХарактеристика, АналогЕдиницаИзмерения", 0, 0);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ТД, УстановленныйАналог, "АналогНоменклатура, АналогХарактеристика, АналогЕдиницаИзмерения");
	
	
	ТД.АналогКоличество = Окр(ТД.КоличествоПотребность * УстановленныйАналог.Коэффициент, 3);
	ТД.АналогСумма = ТД.АналогКоличество * УстановленныйАналог.Цена;
	
	Если УстановленныйАналог.Цена <> 0 Тогда
		ТД.Экономия = ТД.АналогСумма - ТД.СуммаПотребность;
		//ТД.ЭкономияЦена = ТД.АналогСумма - ТД.СуммаПотребность;
	Иначе
		ТД.Экономия = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписатьВыборАналогаНаСервере(Результат, ДопПараметры)
	
	//
	мз = РегистрыСведений.НастройкаЗаменыНоменклатуры.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(мз, Результат);
	мз.Прочитать();
	
	// Заполнение результата
	ИменаРеквизитов = "Автор, ПериодЗакупки,Номенклатура,Характеристика,ЕдиницаИзмерения,АналогНоменклатура,АналогХарактеристика,АналогЕдиницаИзмерения,Коэффициент";
	УстановленныйАналог = Новый Структура(ИменаРеквизитов);
	
	УстановленныйАналог.Автор = ДопПараметры.Автор;
	УстановленныйАналог.ПериодЗакупки = ДопПараметры.ПериодЗакупки;
	УстановленныйАналог.Номенклатура = ДопПараметры.Номенклатура;
	Если ДопПараметры.Свойство("Характеристика") Тогда
		УстановленныйАналог.Характеристика = ДопПараметры.Характеристика;
	Иначе
		УстановленныйАналог.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	УстановленныйАналог.ЕдиницаИзмерения = ДопПараметры.ЕдиницаИзмерения;
	УстановленныйАналог.АналогНоменклатура = Результат.НоменклатураПриемник;
	УстановленныйАналог.АналогХарактеристика = Результат.ХарактеристикаПриемник;
	УстановленныйАналог.АналогЕдиницаИзмерения = Результат.ЕдиницаИзмеренияПриемник;
	УстановленныйАналог.Коэффициент = мз.Коэффициент;
	
	УстановленныйАналог.Вставить("Цена", ПолучитьЦенуЗакупки(УстановленныйАналог));
	
	//
	нз = РегистрыСведений.АналогиНоменклатуры.СоздатьНаборЗаписей();
	нз.Отбор.Автор.Установить(ДопПараметры.Автор);
	нз.Отбор.ПериодЗакупки.Установить(ДопПараметры.ПериодЗакупки);
	нз.Отбор.Номенклатура.Установить(ДопПараметры.Номенклатура);
	нз.Отбор.ЕдиницаИзмерения.Установить(ДопПараметры.ЕдиницаИзмерения);
	Если ДопПараметры.Свойство("Характеристика") Тогда
		нз.Отбор.Характеристика.Установить(ДопПараметры.Характеристика);
	Иначе
		нз.Отбор.Характеристика.Установить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	нз.Прочитать();
	нз.Очистить();
	ЗаполнитьЗначенияСвойств(нз.Добавить(), УстановленныйАналог);
	нз.Записать(Истина);
	
	Возврат УстановленныйАналог;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЦенуЗакупки(УстановленныйАналог)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", УстановленныйАналог.АналогНоменклатура);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦен,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Валюта КАК Валюта,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			ВидЦены В
	|					(ВЫБРАТЬ
	|						ТипЦенДляРасценкиЗаявокНаПотребность.Значение КАК Значение
	|					ИЗ
	|						Константа.ТипЦенДляРасценкиЗаявокНаПотребность КАК ТипЦенДляРасценкиЗаявокНаПотребность)
	|				И Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Цена;
	
КонецФункции

&НаКлиенте
Процедура СуммаНеМенееПриИзменении(Элемент)
	
	УстановитьОтборПоСумме();
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьОтборПоСумме()
	
	Если Объект.СуммаНеМенее = 0 Тогда
		СброситьОтборСтрок("СуммаСоответствуетОтбору");
	Иначе
		// Установить признак
		Для Каждого Строка Из Объект.ТаблицаАналогов Цикл
			Строка.СуммаСоответствуетОтбору = Объект.СуммаНеМенее <= Строка.СуммаПотребность;
		КонецЦикла;
		УстановтьОтборСтрок("СуммаСоответствуетОтбору", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановтьОтборСтрок(ИмяОтбора, ЗначениеОтбора)
	
	Если Элементы.ТаблицаАналогов.ОтборСтрок = неопределено Тогда
		ОтборСтрок = Новый Структура;
	Иначе
		ОтборСтрок = Новый Структура(Элементы.ТаблицаАналогов.ОтборСтрок);
	КонецЕсли;
	
	ОтборСтрок.Вставить(ИмяОтбора, ЗначениеОтбора);
	
	Элементы.ТаблицаАналогов.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОтборСтрок(ИмяОтбора)
	
	Если Элементы.ТаблицаАналогов.ОтборСтрок = неопределено 
		ИЛИ НЕ Элементы.ТаблицаАналогов.ОтборСтрок.Свойство(ИмяОтбора) Тогда
		Возврат;
	КонецЕсли;
	
	//
	ОтборСтрок = Новый Структура(Элементы.ТаблицаАналогов.ОтборСтрок);
	ОтборСтрок.Удалить(ИмяОтбора);
	Элементы.ТаблицаАналогов.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура КлассAПриИзменении(Элемент)
	
	УстановитьОтборПоКлассу();
	
КонецПроцедуры

&НаКлиенте
Процедура КлассBПриИзменении(Элемент)
	
	УстановитьОтборПоКлассу();
	
КонецПроцедуры

&НаКлиенте
Процедура КлассCПриИзменении(Элемент)
	
	УстановитьОтборПоКлассу();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоКлассу()
	
	СписокКлассов = Новый Структура("A, B, C", Объект.КлассA, Объект.КлассB, Объект.КлассC);
	СтруктураПоиска = Новый Структура("ABC");
	
	Для Каждого КлючЗначение Из СписокКлассов Цикл
		СтруктураПоиска.ABC = КлючЗначение.Ключ;
		Строки = Объект.ТаблицаАналогов.НайтиСтроки(СтруктураПоиска);
		ЗначениеОтбора = КлючЗначение.Значение;
		Для Каждого Строка Из Строки Цикл
			Строка.КлассСоответствуетОтбору = КлючЗначение.Значение;
		КонецЦикла;
	КонецЦикла;
	
	УстановтьОтборСтрок("КлассСоответствуетОтбору", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	ПереформироватьОтчет();
КонецПроцедуры

&НаКлиенте
Процедура ПериодЗакупкиПриИзменении(Элемент)
	ПереформироватьОтчет();
КонецПроцедуры

&НаКлиенте
Процедура ПереформироватьОтчет()
	ЗаполнитьДеревоНаСервере(Объект.Пользователь, Объект.ПериодЗакупки);
КонецПроцедуры
