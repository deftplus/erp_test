#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	//
	ПараметрыКурса = Новый ФиксированнаяСтруктура(Параметры.ПараметрыКурса);
	ПараметрыДокумента = Новый ФиксированнаяСтруктура(Параметры.ПараметрыДокумента);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры.ПараметрыДокумента);
	
	СформироватьДеревоПлатежныхПозиций(Параметры.ПлатежнаяПозиция.Выгрузить());
	Если НЕ ЗаполнитьОсновнуюОперациюПозиции() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ПлатежнаяПозиция Цикл
		ТекСтрока.СтрокаКурсПлатежа = ТекстовоеПредставлениеКурса(ТекСтрока.КурсПлатежа, ТекСтрока.КратностьПлатежа, ВалютаОплаты, ВалютаВзаиморасчетов);
	КонецЦикла;
	
	Если ПлатежнаяПозиция.Количество() > 0 Тогда
		СостояниеИсполненияПервойПозиции = ПлатежнаяПозиция[0].СостояниеИсполнения;
	Иначе
		СостояниеИсполненияПервойПозиции = Перечисления.СостоянияИсполненияЗаявки.ПустаяСсылка();
	КонецЕсли;
	
	РедактироватьБезРазбиения = (ПлатежнаяПозиция.Количество() = 1);
	ОбновитьИтогиРаспределения(ЭтаФорма);
	
	//
	Элементы.ГруппаСуммаВВалютеЦены.Видимость = ПлатежВУсловныхЕдиницах;
	Элементы.ГруппаКурс.Видимость = ПлатежВУсловныхЕдиницах;
	Элементы.ГруппаИтогоКОплате.Видимость = ПлатежВУсловныхЕдиницах;
	Элементы.РедактироватьБезРазбиения.ТолькоПросмотр = НЕ Параметры.УправлениеПозициямиДокумента;
	Элементы.БанковскийСчетКасса.ТолькоПросмотр = ФиксированныйСчетОрганизации ИЛИ (СостояниеИсполненияПервойПозиции <> Перечисления.СостоянияИсполненияЗаявки.НеОбработана);
	Элементы.ДатаИсполнения.ТолькоПросмотр = (СостояниеИсполненияПервойПозиции <> Перечисления.СостоянияИсполненияЗаявки.НеОбработана);
		
	Если НЕ Параметры.РедактироватьСоставПлатежныхПозиций Тогда
		 Элементы.РаспределениеДобавить.Видимость = Ложь;
		 Элементы.РаспределениеУдалить.Видимость = Ложь;
		 Элементы.ГруппаРазделитьПоровну.Видимость = Ложь;
		 Элементы.ГруппаРедактироватьБезРазбиения.Видимость = Ложь;
	КонецЕсли;
	 
	Если НЕ Параметры.РедактироватьСуммуПлатежныхПозиций Тогда
		 Элементы.ПлатежнаяПозицияГруппаСуммаВзаиморасчетов.ТолькоПросмотр = Истина;
		 Элементы.ПлатежнаяПозицияГруппаКолонокУсловныеЕдиницы.ТолькоПросмотр = Истина; 
	КонецЕсли;
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
		ЗаголовокБанковскийСчетКасса = НСтр("ru = 'Касса'");
	ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
		ЗаголовокБанковскийСчетКасса = НСтр("ru = 'Банковский счет'");
	Иначе
		ЗаголовокБанковскийСчетКасса = НСтр("ru = 'Банковский счет/Касса'");
	КонецЕсли;
	Элементы.БанковскийСчетКасса.Заголовок = ЗаголовокБанковскийСчетКасса;
	Элементы.ПлатежнаяПозицияБанковскийСчетКасса.Заголовок = ЗаголовокБанковскийСчетКасса;
	
	//
	ПлатежныеПозиции.УстановитьОграничениеТипаБанковскийСчетКасса(Элементы.БанковскийСчетКасса, ФормаОплаты);
	ПлатежныеПозиции.УстановитьОграничениеТипаБанковскийСчетКасса(Элементы.ПлатежнаяПозицияБанковскийСчетКасса, ФормаОплаты);
	
	Элементы.ПлатежнаяПозицияГруппаКолонокУсловныеЕдиницы.Видимость = ПлатежВУсловныхЕдиницах;
	
	УстановитьТекущуюСтраницу(ЭтаФорма);
	УстановитьУсловноеОформление();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РедактироватьБезРазбиенияПриИзменении(Элемент)
	
	УстановитьТекущуюСтраницу(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИсполненияПриИзменении(Элемент)
	
	ПриИзмененииДатыИсполненияНаСервере()
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПлатежнаяПозиция

&НаКлиенте
Процедура ПлатежнаяПозицияДатаПриИзменении(Элемент)
	
	ПриИзмененииДатыИсполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДатыИсполненияНаСервере()
	Если РедактироватьБезРазбиения Тогда
		ТекСтрока = ПлатежнаяПозиция[0];
	Иначе
		ТекСтрока = ПлатежнаяПозиция.НайтиПоИдентификатору(Элементы.ПлатежнаяПозиция.ТекущаяСтрока);	
	КонецЕсли;
	
	ПереоценитьОперацию(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяПозицияСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ТекДанные = Элементы.ПлатежнаяПозиция.ТекущиеДанные;
	Если ТекДанные.КратностьПлатежа = 0 Тогда
		ТекДанные.Сумма = 0;
	Иначе
		ТекДанные.Сумма = ТекДанные.СуммаВзаиморасчетов * ТекДанные.КурсПлатежа / ТекДанные.КратностьПлатежа;
	КонецЕсли;
	
	ОбновитьИтогиРаспределения(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяПозицияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекДанные = Элементы.ПлатежнаяПозиция.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ТекДанные.ИдентификаторПозиции = Новый УникальныйИдентификатор;
		ТекДанные.СостояниеИсполнения = ПредопределенноеЗначение("Перечисление.СостоянияИсполненияЗаявки.НеОбработана");
		ТекДанные.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
		ТекДанные.ВалютаОплаты = ВалютаОплаты;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяПозицияПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.ПлатежнаяПозиция.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеКомандойОтложить(Элементы.КомандаОтложитьТаблица, ТекДанные.СостояниеИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяПозицияПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элементы.ПлатежнаяПозиция.ТекущиеДанные;
	Если ТекДанные.СостояниеИсполнения <> ПредопределенноеЗначение("Перечисление.СостоянияИсполненияЗаявки.НеОбработана") Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если ПлатежнаяПозиция.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяПозицияПриИзменении(Элемент)
	ОбновитьИтогиРаспределения(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДетали(Команда)
	
	Элементы.КомандаДетали.Пометка = НЕ Элементы.КомандаДетали.Пометка;
	Элементы.ГруппаДетали.Видимость = Элементы.КомандаДетали.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОК(Команда)
	
	Если ОстатокКРаспределению <> 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо распределить всю сумму заявки.'"),,"ОстатокКРаспределению");
		Возврат;
	КонецЕсли;
	
	Закрыть(СформироватьРезультат());
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРаспределитьНа2(Команда)
	РаспределитьПропорционально(2);
КонецПроцедуры

&НаКлиенте
Процедура КомандаРаспределитьНа3(Команда)
	РаспределитьПропорционально(3);
КонецПроцедуры

&НаКлиенте
Процедура КомандаРаспределитьНаN(Команда)
	РаспределитьПропорционально(ПлатежнаяПозиция.Количество());
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтложитьВернуть(Команда)
	
	ТекСтрока = Элементы.ПлатежнаяПозиция.ТекущаяСтрока;
	КомандаОтложитьВернутьНаСервере(ТекСтрока);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция СформироватьРезультат()
	
	ПлатежнаяПозицияРезультат = СформироватьПлатежнуюПозициюРезультат();
	Результат = ПоместитьВоВременноеХранилище(ПлатежнаяПозицияРезультат);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюСтраницу(Форма)
	
	Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница = 
		Форма.Элементы[?(Форма.РедактироватьБезРазбиения,"СтраницаБезРазделения", "СтраницаЧастями")];
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстовоеПредставлениеКурса(КурсПлатежа, КратностьПлатежа, ВалютаОплаты, ВалютаВзаиморасчетов)
	
	Возврат СтрШаблон("%1 %2 за %3 %4", КурсПлатежа, ВалютаОплаты, КратностьПлатежа, ВалютаВзаиморасчетов);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтогиРаспределения(Форма)
	
	ТаблицаРаспределение = Форма.ПлатежнаяПозиция;
	
	Форма.Распределено = ТаблицаРаспределение.Итог("СуммаВзаиморасчетов");
	Форма.ОстатокКРаспределению = Форма.СуммаДокумента - Форма.Распределено;

	
	Если Форма.ОстатокКРаспределению <> 0 Тогда
		// Попытка автоматически скорректировать последнюю строку
		Если Не ТаблицаРаспределение.Количество() Тогда
			ДобавитьПозицию(Форма)
		КонецЕсли;
		
		ПоследняяСтрока = ТаблицаРаспределение[ТаблицаРаспределение.Количество() - 1];
		Если (Форма.ОстатокКРаспределению + ПоследняяСтрока.Сумма) > 0 Тогда
			ПоследняяСтрока.СуммаВзаиморасчетов = Форма.ОстатокКРаспределению + ПоследняяСтрока.СуммаВзаиморасчетов;
			ПоследняяСтрока.Сумма = ?( ПоследняяСтрока.КратностьПлатежа = 0, ПоследняяСтрока.СуммаВзаиморасчетов, ПоследняяСтрока.СуммаВзаиморасчетов * ПоследняяСтрока.КурсПлатежа / ПоследняяСтрока.КратностьПлатежа);
			Форма.Распределено = Форма.СуммаДокумента;
			Форма.ОстатокКРаспределению = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.СуммаКОплате = ТаблицаРаспределение.Итог("Сумма");
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьПропорционально(Знач КоличествоЧастей)
	
	Если КоличествоЧастей = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураТаблицы = СтруктураТаблицы(ЭтотОбъект);
	
	МассивКУдалению = Новый Массив;
	СуммаКРаспределению = ОстатокКРаспределению;
	
	Для Каждого ТекСтр Из ПлатежнаяПозиция Цикл
		
		Если ТекСтр.СостояниеИсполнения = Перечисления.СостоянияИсполненияЗаявки.НеОбработана Тогда
			МассивКУдалению.Добавить(ТекСтр);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекСтрокаКУдалению Из МассивКУдалению Цикл
		
		СуммаКРаспределению = СуммаКРаспределению + ТекСтрокаКУдалению.СуммаВзаиморасчетов;
		ПлатежнаяПозиция.Удалить(ТекСтрокаКУдалению);
		
	КонецЦикла;
	
	Если СуммаКРаспределению = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОднаЧасть = Окр(СуммаКРаспределению / КоличествоЧастей, 2);
	Остаток = СуммаКРаспределению - (ОднаЧасть * (КоличествоЧастей-1));
	
	Для Сч = 1 По КоличествоЧастей Цикл
		
		СуммаПозиции = ?(Сч = КоличествоЧастей, Остаток, ОднаЧасть);
		ДобавитьПозицию(ЭтотОбъект,СуммаПозиции, СтруктураТаблицы);
		
	КонецЦикла;
	
	ОбновитьИтогиРаспределения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПереоценитьОперацию(Операция)
	
	СтруктураПараметров = ВстраиваниеОПККлиентСерверПереопределяемый.СтруктураПараметровРасчетаКурса();
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ПараметрыКурса);
	СтруктураПараметров.ДатаПлатежа = Операция.ДатаИсполнения;
	
	Операция.КурсПлатежа = ВстраиваниеОПКПереопределяемый.ПолучитьАктуальныйКурсПоПараметрам(СтруктураПараметров);
	Операция.КратностьПлатежа = 1;
	Операция.Сумма = Операция.СуммаВзаиморасчетов * Операция.КурсПлатежа / Операция.КратностьПлатежа;
	Операция.СтрокаКурсПлатежа = ТекстовоеПредставлениеКурса(Операция.КурсПлатежа, Операция.КратностьПлатежа, ВалютаОплаты, ВалютаВзаиморасчетов);
	
	ОбновитьИтогиРаспределения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КомандаОтложитьВернутьНаСервере(Знач ИдСтроки)
	
	Если ИдСтроки = Неопределено Тогда
		ИдСтроки = 0;
	КонецЕсли;
	
	СтрокаДанные = ПлатежнаяПозиция.НайтиПоИдентификатору(ИдСтроки);
	Если СтрокаДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДанные.СостояниеИсполнения = ПредопределенноеЗначение("Перечисление.СостоянияИсполненияЗаявки.Отложена") Тогда
		СтрокаДанные.СостояниеИсполнения = ПредопределенноеЗначение("Перечисление.СостоянияИсполненияЗаявки.НеОбработана")
	Иначе
		СтрокаДанные.СостояниеИсполнения = ПредопределенноеЗначение("Перечисление.СостоянияИсполненияЗаявки.Отложена");
	КонецЕсли;
	СтрокаДанные.СтатусИзменен = Истина;
	Команда = ?(РедактироватьБезРазбиения, Элементы.КомандаОтложить, Элементы.КомандаОтложитьТаблица);
	УправлениеКомандойОтложить(Команда,СтрокаДанные.СостояниеИсполнения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеКомандойОтложить(Команда, СостояниеИсполнения)
	
	Если СостояниеИсполнения = ПредопределенноеЗначение("Перечисление.СостоянияИсполненияЗаявки.НеОбработана") Тогда
		Команда.Доступность = Истина;
	ИначеЕсли СостояниеИсполнения = ПредопределенноеЗначение("Перечисление.СостоянияИсполненияЗаявки.Отложена") Тогда
		Команда.Доступность = Истина;
	Иначе
		Команда.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ОНКС = ОбщегоНазначенияКлиентСервер;
	КДКС = ВстраиваниеОПККлиентСерверПереопределяемый;
	
	ПозицияНеОбработана = Перечисления.СостоянияИсполненияЗаявки.НеОбработана;
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КДКС.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ПлатежнаяПозицияДата.Имя);
	КДКС.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ПлатежнаяПозицияСуммаВзаиморасчетов.Имя);
	ОНКС.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,	"ПлатежнаяПозиция.СостояниеИсполнения", ВидСравненияКомпоновкиДанных.НеРавно, ПозицияНеОбработана, , Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// Банковский счет
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КДКС.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ПлатежнаяПозицияБанковскийСчетКасса.Имя);
	ГруппаИЛИ = ОНКС.СоздатьГруппуЭлементовОтбора(ЭлементУО.Отбор.Элементы,	"Группа ИЛИ", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ОНКС.ДобавитьЭлементКомпоновки(ГруппаИЛИ, "ФиксированныйСчетОрганизации", ВидСравненияКомпоновкиДанных.Равно, Истина, , Истина);
	ОНКС.ДобавитьЭлементКомпоновки(ГруппаИЛИ, "ПлатежнаяПозиция.СостояниеИсполнения", ВидСравненияКомпоновкиДанных.НеРавно, ПозицияНеОбработана, , Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьПозицию(Форма, СуммаПозиции = 0, СтруктураТаблицы = Неопределено)
	
	ТабПозиция = Форма.ПлатежнаяПозиция;
	
	Если СтруктураТаблицы = Неопределено Тогда
		СтруктураТаблицы = СтруктураТаблицы(Форма);
	КонецЕсли;
	
	НовСтрока = ТабПозиция.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтрока, СтруктураТаблицы);
	НовСтрока.СостояниеИсполнения = ПредопределенноеЗначение("Перечисление.СостоянияИсполненияЗаявки.НеОбработана");
	НовСтрока.СуммаВзаиморасчетов = СуммаПозиции;
	НовСтрока.ИдентификаторПозиции = Новый УникальныйИдентификатор;
	НовСтрока.Сумма = НовСтрока.СуммаВзаиморасчетов * НовСтрока.КурсПлатежа / НовСтрока.КратностьПлатежа;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураТаблицы(Форма)
	
	СтруктураТаблицы = Новый Структура;
	Для Каждого ТекРеквизит Из Форма.ПолучитьРеквизиты("ПлатежнаяПозиция") Цикл
		СтруктураТаблицы.Вставить(ТекРеквизит.Имя);
	КонецЦикла;
	
	Если  Форма.ПлатежнаяПозиция.Количество() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураТаблицы,  Форма.ПлатежнаяПозиция[0]);
		Если СтруктураТаблицы.КурсПлатежа = 0  Тогда
			СтруктураТаблицы.КурсПлатежа = 1;
		КонецЕсли;
		Если СтруктураТаблицы.КратностьПлатежа = 0  Тогда
			СтруктураТаблицы.КратностьПлатежа = 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураТаблицы;
	
КонецФункции

&НаСервере
Процедура СформироватьДеревоПлатежныхПозиций(ПлатежнаяПозицияДокумента);
	
	//
	ДобавляемыеРеквизиты = Новый Массив;
	ПлатежныеПозиции.ДобавитьКолонкиВРеквизитФормы(ДобавляемыеРеквизиты, "ДеревоПлатежныхПозиций");
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	//
	ДеревоПозиций = Новый ДеревоЗначений;
	ПлатежныеПозиции.ДобавитьКолонкиПлатежнойПозиции(ДеревоПозиций);
	
	ПараметрыПлатежнойПозиции = ПолучитьПараметрыПлатежнойПозиции(ДеревоПозиций);
	
	//
	КопияПлатежнойПозиции = ПлатежнаяПозицияДокумента.Скопировать();
	
	// Массив направлений
	Направления = Новый Массив;
	Направления.Добавить(Перечисления.ВидыДвиженийПриходРасход.Расход);
	Направления.Добавить(Перечисления.ВидыДвиженийПриходРасход.Приход);
	
	//
	НомерОперации = 0;
	ПоискНаправления = Новый Структура("ПриходРасход");
	Для Каждого Направление Из Направления Цикл
		
		ПоискНаправления.ПриходРасход = Направление;
		ОперацииНаправления = ПлатежнаяПозицияДокумента.Скопировать(ПоискНаправления);
		Если ОперацииНаправления.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНаправление = ДеревоПозиций.Строки.Добавить();
		СтрокаНаправление.ПриходРасход = Направление;
		
		ИменаРеквизитов = ПараметрыПлатежнойПозиции.ИменаРеквизитовОпераций[НомерОперации];
		ОперацииНаправления.Свернуть(ИменаРеквизитов.Постоянные, "Сумма, СуммаВзаиморасчетов");
		СтруктураПоиска = Новый Структура(ИменаРеквизитов.Постоянные);
		
		Для Каждого СтрокаОперация Из ОперацииНаправления Цикл
			
			СтрокаДерева = СтрокаНаправление.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаОперация);
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОперация);
			НайденныеСтроки = ПлатежнаяПозицияДокумента.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаПозицииДокумента Из НайденныеСтроки Цикл
				ЗаполнитьЗначенияСвойств(СтрокаДерева.Строки.Добавить(), СтрокаПозицииДокумента);
			КонецЦикла;
			
		КонецЦикла;
		
		НомерОперации = НомерОперации + 1;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоПозиций, "ДеревоПлатежныхПозиций");
	
КонецПроцедуры

&НаСервере
Функция СформироватьПлатежнуюПозициюРезультат()
	
	// Данные формы
	ДеревоПозиций = РеквизитФормыВЗначение("ДеревоПлатежныхПозиций");
	ТаблицаПлатежнойПозиции = ПлатежнаяПозиция.Выгрузить();
	
	// Сформировать таблицу-результат
	ПлатежныеПозицииРезультат = Новый ТаблицаЗначений;
	ПлатежныеПозиции.ДобавитьКолонкиПлатежнойПозиции(ПлатежныеПозицииРезультат);
	
	// Интегрировать позиции в основную операцию
	ОсновноеНаправление = ДеревоПозиций.Строки[0];
	ЕстьВстречныеОперации = ДеревоПозиций.Строки.Количество() = 2;
	Если ЕстьВстречныеОперации Тогда
		ВстречноеНаправление = ДеревоПозиций.Строки[1];
		ВстречнаяОперация	 = ВстречноеНаправление.Строки[0];
	КонецЕсли;
	
	Реквизиты1 = ПараметрыПлатежнойПозиции.ИменаРеквизитовОпераций[0];
	Реквизиты2 = ПараметрыПлатежнойПозиции.ИменаРеквизитовОпераций[1];
	
	СтруктураПоискаВстречной = Новый Структура("ИдентификаторВстречнойПозиции");
	
	Для Каждого СтрокаПозиции1 Из ТаблицаПлатежнойПозиции Цикл
		
		ОсновнаяОперация = ОсновноеНаправление.Строки.Найти(СтрокаПозиции1.ИдентификаторПозиции, "ИдентификаторПозиции");
		Если ОсновнаяОперация = Неопределено Тогда
			ОсновнаяОперация = ОсновноеНаправление.Строки[0];
		КонецЕсли;	
				
		П1 = ПлатежныеПозицииРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(П1, ОсновнаяОперация,, Реквизиты1.Редактирования);
		ЗаполнитьЗначенияСвойств(П1, СтрокаПозиции1, Реквизиты1.Редактирования);
		
		Если ЕстьВстречныеОперации Тогда
			
			П2 = ПлатежныеПозицииРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(П2, ВстречнаяОперация,, Реквизиты2.Редактирования);
			ЗаполнитьЗначенияСвойств(П2, СтрокаПозиции1, Реквизиты2.Редактирования);
			
			// Заполняем идентификаторы
			СтруктураПоискаВстречной.ИдентификаторВстречнойПозиции = СтрокаПозиции1.ИдентификаторПозиции;
			СтрокиПозиции2 = ВстречнаяОперация.Строки.НайтиСтроки(СтруктураПоискаВстречной);
			Если СтрокиПозиции2.Количество() > 0 Тогда
				П2.ИдентификаторПозиции = СтрокиПозиции2[0].ИдентификаторПозиции;
				П2.ИдентификаторВстречнойПозиции = СтрокиПозиции2[0].ИдентификаторВстречнойПозиции;
			Иначе
				П2.ИдентификаторПозиции = Новый УникальныйИдентификатор;
				П2.ИдентификаторВстречнойПозиции = П1.ИдентификаторПозиции;
				П1.ИдентификаторВстречнойПозиции = П2.ИдентификаторПозиции;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПлатежныеПозицииРезультат;
	
КонецФункции

&НаСервере
Функция ЗаполнитьОсновнуюОперациюПозиции()
	
	ПлатежнаяПозиция.Очистить();
	
	ДеревоПозиций = РеквизитФормыВЗначение("ДеревоПлатежныхПозиций");
	Если ДеревоПозиций.Строки.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаОсновнойОперации = ДеревоПозиций.Строки[0];
	Для Каждого Реквизиты Из СтрокаОсновнойОперации.Строки Цикл
		Для Каждого Позиция Из Реквизиты.Строки Цикл
			ЗаполнитьЗначенияСвойств(ПлатежнаяПозиция.Добавить(), Позиция);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыПлатежнойПозиции(ДеревоПозиций)
	
	Результат = Новый Структура("ИменаРеквизитовОпераций", Новый Массив);
	
	// Все колонки позиции
	МассивВсехКолонок = Новый Массив;
	Для Каждого Колонка Из ДеревоПозиций.Колонки Цикл
		МассивВсехКолонок.Добавить(Колонка.Имя);
	КонецЦикла;
	
	// Основная операция
	КолонкиРедактирования = Новый Массив;
	КолонкиРедактирования.Добавить("ИдентификаторПозиции");
	КолонкиРедактирования.Добавить("ИдентификаторВстречнойПозиции");
	КолонкиРедактирования.Добавить("БанковскийСчетКасса");
	КолонкиРедактирования.Добавить("ДатаИсполнения");
	КолонкиРедактирования.Добавить("Сумма");
	КолонкиРедактирования.Добавить("СуммаВзаиморасчетов");
	КолонкиРедактирования.Добавить("КурсПлатежа");
	КолонкиРедактирования.Добавить("КратностьПлатежа");
	КолонкиРедактирования.Добавить("Контрагент");
	
	// заявка может быть отложена. При этом изменяется состояние. Эти поля тоже редактируются
	КолонкиРедактирования.Добавить("СостояниеИсполнения");
	КолонкиРедактирования.Добавить("СтатусИзменен");
	
	Результат.ИменаРеквизитовОпераций.Добавить(ИменаРеквизитов(МассивВсехКолонок, КолонкиРедактирования));
	
	// Встречная операция: БанковскийСчетКасса убрать, так как он для встречной операции не меняется.
	Поз = КолонкиРедактирования.Найти("БанковскийСчетКасса");
	Если Поз <> неопределено Тогда
		КолонкиРедактирования.Удалить(Поз);
	КонецЕсли;
	
	Результат.ИменаРеквизитовОпераций.Добавить(ИменаРеквизитов(МассивВсехКолонок, КолонкиРедактирования));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИменаРеквизитов(МассивВсехКолонок, КолонкиРедактирования)
	
	Результат = Новый Структура("Редактирования, Постоянные");
	МассивКолонок = Новый Массив(Новый ФиксированныйМассив(МассивВсехКолонок));
	
	Для Каждого ИмяРеквизита Из КолонкиРедактирования Цикл
		Поз = МассивКолонок.Найти(ИмяРеквизита);
		Если Поз <> неопределено Тогда
			МассивКолонок.Удалить(Поз);
		КонецЕсли;
	КонецЦикла;
	
	МассивКолонок.Добавить("ИдентификаторПозиции");
	МассивКолонок.Добавить("ИдентификаторВстречнойПозиции");

	Результат.Редактирования = СтрСоединить(КолонкиРедактирования, ",");
	Результат.Постоянные = СтрСоединить(МассивКолонок, ",");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти