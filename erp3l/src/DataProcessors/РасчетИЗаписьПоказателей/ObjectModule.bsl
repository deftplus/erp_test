#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОписаниеПеременных

Перем ТаблицаСобытийЗагрузкиПериоды Экспорт; // Необходима для совместимости с классическим движком

Перем ОбъектРасчета, КэшДанных;

#КонецОбласти


#Область ПрограммныйИнтерфейс

// Для совместимости с классическим движком
// Рекомендуется использовать функцию РассчитатьЗначенияПоказателей
//
// Параметры:
//  мОбъектРасчета	 - Структура - Структура с данными для расчета показателей
// 
// Возвращаемое значение:
//	Булево - Истина - расчет выполнен, Ложь - были ошибки
//
Функция ЗаполнитьДанныеПоПериодам(мОбъектРасчета, ЗаписыватьДанныеВРегистры=Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВремяНачалаРасчетов = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РежимТрассировки = РежимТрассировки ИЛИ Константы.ИспользоватьРежимТрассировкиПересчетаПоказателей.Получить();
	
	// Получим кэш данных
	Если ЗначениеЗаполнено(АдресКэшаДанных) Тогда
		КэшДанных = ПолучитьИзВременногоХранилища(АдресКэшаДанных);
	Иначе
		КэшДанных = Новый Соответствие;
	КонецЕсли;
	
	// Сформируем параметры расчета
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("НомерТранзакции", 0);
	ПараметрыРасчета.Вставить("ЗаписыватьДанныеВРегистры", ЗаписыватьДанныеВРегистры);
	
	Если Не ЗначениеЗаполнено(УникальныйИдентификаторСеанса) Тогда
		УникальныйИдентификаторСеанса = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	// Выполним расчет
	Результат = ВыполнитьРасчет(мОбъектРасчета, ПараметрыРасчета);
	
	// Сохраним кэш данных
	АдресКэшаДанных = ПоместитьВоВременноеХранилище(КэшДанных, УникальныйИдентификаторСеанса);
	
	ВремяОкончанияРасчетов = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОбщееВремяРасчетов = ОбщееВремяРасчетов + ВремяОкончанияРасчетов - ВремяНачалаРасчетов;
	
	Если РежимТрассировки Тогда
		ТрассировкаРасчета = Новый Структура;
		ТрассировкаРасчета.Вставить("ОбщееВремяПолученияПараметрики", ОбщееВремяПолученияПараметрики);
		ТрассировкаРасчета.Вставить("ОбщееВремяРасчетов", ОбщееВремяРасчетов);
		ТрассировкаРасчета.Вставить("ОбщееВремяЗаписиВерсий", ОбщееВремяЗаписиВерсий);
		ТрассировкаРасчета.Вставить("тТрассировкаРасчета", ОбъектРасчета.тТрассировкаРасчета);
		АдресТрассировкиРасчета = ПоместитьВоВременноеХранилище(ТрассировкаРасчета, Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция - Рассчитать значения показателей по данным для пересчета
//
// Параметры:
//  НомерТранзакции				 - Число - Номер транзакции для добавления записей в лог измененных показателей
//  ЗаписыватьДанныеВРегистры	 - Булево - Признак, что необходимо записать в регистры значения рассчитанных показателей
// 
// Возвращаемое значение:
//   Булево - Истина - все операции выполнены без ошибок, Ложь - в противном случае
//
Функция РассчитатьПоДаннымДляПересчета(НомерТранзакции = 0, ЗаписыватьДанныеВРегистры = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьПротоколРасчета();
	
	ВремяНачалаРасчетов = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РежимТрассировки = РежимТрассировки ИЛИ Константы.ИспользоватьРежимТрассировкиПересчетаПоказателей.Получить();
	
	// Получим кэш данных
	Если ЗначениеЗаполнено(АдресКэшаДанных) Тогда
		КэшДанных = ПолучитьИзВременногоХранилища(АдресКэшаДанных);
	Иначе
		КэшДанных = Новый Соответствие;
	КонецЕсли;
	
	// Сформируем параметры расчета
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("НомерТранзакции", НомерТранзакции);
	ПараметрыРасчета.Вставить("ЗаписыватьДанныеВРегистры", ЗаписыватьДанныеВРегистры);

	// Выполним расчет 
	Результат = ВыполнитьРасчетПоДаннымДляПересчета(ПараметрыРасчета);
		
	// Сохраним кэш данных
	АдресКэшаДанных = ПоместитьВоВременноеХранилище(КэшДанных, УникальныйИдентификаторСеанса);
	
	ЗавершитьПротоколРасчета("РассчитатьПоДаннымДляПересчета");
	
	ВремяОкончанияРасчетов = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОбщееВремяРасчетов = ОбщееВремяРасчетов + ВремяОкончанияРасчетов - ВремяНачалаРасчетов;
	
	Возврат Результат; 
	
КонецФункции
	
// Выполняет расчет всех зависимых показателей по значениям измененных показателей
//
// Параметры:
//	НомерТранзакции					- Число - номер транзакции для записи в лог измененных показателей
//	ВалютаОтображения				- СправочникСсылка.Валюты - валюта версии в которой переданы значения показателей
//  РасчетПоСвязаннымВидамОтчетов	- Булево - При значении "Истина" будут пересчитаны все связанные показатели из других видов отчетов.
//  ЗаписыватьДанныеВРегистры		- Булево - При значении "Истина" будет выполнена запись рассчитанных значений показателей в регистры сведений. 
//
// 	Источник для расчета - таблица ЛогРассчитанныхПоказателей. Колонки таблицы:
//		- Показатель, Сценарий, Организация, Проект (при использовании), Аналитика1-Аналитика6, АналитикаВалюта (при использовании) - обязательные данные для расчета
//		- ПериодОтчета или УправлениеПериодомСценария - используются для вычисления массива периодов для расчета
//		- ВидОтчета (необязательный) - может передаваться для сокращения времени расчета, если присутствует в контексте вызова функции
//		- Значение или ЗначениеНечисловое - новое значение показателя
//
// 	Результат расчета сохраняется в таблице ЛогРассчитанныхПоказателей
// 
// Возвращаемое значение:
//   - Булево - Истина - расчет выполнен, Ложь - были ошибки
//
Функция РассчитатьПоЗначениямИзмененныхПоказателей(НомерТранзакции, РасчетПоСвязаннымВидамОтчетов = Ложь, РасчетПоТекущимВидамОтчетов = Истина, ЗаписыватьДанныеВРегистры = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьПротоколРасчета();
	
	ВремяНачалаРасчетов = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РежимТрассировки = РежимТрассировки ИЛИ Константы.ИспользоватьРежимТрассировкиПересчетаПоказателей.Получить();
	
	// Получим кэш данных
	Если ЗначениеЗаполнено(АдресКэшаДанных) Тогда
		КэшДанных = ПолучитьИзВременногоХранилища(АдресКэшаДанных);
	Иначе
		КэшДанных = Новый Соответствие;
	КонецЕсли;

	// Сформируем параметры расчета
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("НомерТранзакции", НомерТранзакции);
	ПараметрыРасчета.Вставить("РасчетПоСвязаннымВидамОтчетов", РасчетПоСвязаннымВидамОтчетов);
	ПараметрыРасчета.Вставить("РасчетПоТекущимВидамОтчетов", РасчетПоТекущимВидамОтчетов);
	ПараметрыРасчета.Вставить("ЗаписыватьДанныеВРегистры", ЗаписыватьДанныеВРегистры);
	ПараметрыРасчета.Вставить("ВидРасчета", "ПоИзмененным");

	// Выполним расчет
	АдресТаблицыРассчитанныхПоказателей = "";
	Результат = ВыполнитьРасчетЗависимыхПоказателей(ПараметрыРасчета);
	
	// Сохраним кэш данных
	АдресКэшаДанных = ПоместитьВоВременноеХранилище(КэшДанных, УникальныйИдентификаторСеанса);
	
	ЗавершитьПротоколРасчета("РассчитатьПоЗначениямИзмененныхПоказателей");
	
	ВремяОкончанияРасчетов = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОбщееВремяРасчетов = ОбщееВремяРасчетов + ВремяОкончанияРасчетов - ВремяНачалаРасчетов;
	
	Возврат Результат;
	
КонецФункции

Функция РассчитатьПоЗначениямЦелевыхПоказателей(ЦелевыеПоказатели, РасчетПоСвязаннымВидамОтчетов=Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьПротоколРасчета();
	
	ВремяНачалаРасчетов = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РежимТрассировки = РежимТрассировки ИЛИ Константы.ИспользоватьРежимТрассировкиПересчетаПоказателей.Получить();
	
	// Получим кэш данных
	Если ЗначениеЗаполнено(АдресКэшаДанных) Тогда
		КэшДанных = ПолучитьИзВременногоХранилища(АдресКэшаДанных);
	Иначе
		КэшДанных = Новый Соответствие;
	КонецЕсли;

	// Сформируем параметры расчета
	ПараметрыРасчета = Новый Структура; 
	ПараметрыРасчета.Вставить("РасчетПоСвязаннымВидамОтчетов", РасчетПоСвязаннымВидамОтчетов);	
	ПараметрыРасчета.Вставить("ЗаписыватьДанныеВРегистры", Ложь);
	ПараметрыРасчета.Вставить("ВидРасчета", "ПоЦелевым"); 
	
	// Выполним расчет
	Результат = ВыполнитьРасчетПоЗначениямЦелевыхПоказателей(ЦелевыеПоказатели, ПараметрыРасчета);
	
	// Сохраним кэш данных
	АдресКэшаДанных = ПоместитьВоВременноеХранилище(КэшДанных, УникальныйИдентификаторСеанса);
	
	ЗавершитьПротоколРасчета("РассчитатьПоЗначениямЦелевыхПоказателей");
	
	ВремяОкончанияРасчетов = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОбщееВремяРасчетов = ОбщееВремяРасчетов + ВремяОкончанияРасчетов - ВремяНачалаРасчетов;
	
	Возврат Результат;
	
КонецФункции	

Функция РассчитатьВлияниеФакторов(тЦелевыеПоказатели, тПоказателиФакторов, ВалютаОтображения, РасчетПоСвязаннымВидамОтчетов=Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьПротоколРасчета();
	
	ВремяНачалаРасчетов = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РежимТрассировки = РежимТрассировки ИЛИ Константы.ИспользоватьРежимТрассировкиПересчетаПоказателей.Получить();
	
	// Получим кэш данных
	Если ЗначениеЗаполнено(АдресКэшаДанных) Тогда
		КэшДанных = ПолучитьИзВременногоХранилища(АдресКэшаДанных);
	Иначе
		КэшДанных = Новый Соответствие;
	КонецЕсли;

	// Сформируем параметры расчета
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("НомерТранзакции", 0);
	ПараметрыРасчета.Вставить("ВалютаИзмененныхПоказателей", ВалютаОтображения);
	ПараметрыРасчета.Вставить("РасчетПоСвязаннымВидамОтчетов", РасчетПоСвязаннымВидамОтчетов);	
	ПараметрыРасчета.Вставить("ЗаписыватьДанныеВРегистры", Ложь);
	ПараметрыРасчета.Вставить("ВидРасчета", "ПоИзмененнымПоЦелевым");
	
	// Выполним расчет
	Результат = ВыполнитьРасчетВлиянияФакторов(тЦелевыеПоказатели, тПоказателиФакторов, ПараметрыРасчета);	
	
	// Сохраним кэш данных
	АдресКэшаДанных = ПоместитьВоВременноеХранилище(КэшДанных, УникальныйИдентификаторСеанса);
	
	ЗавершитьПротоколРасчета("РассчитатьВлияниеФакторов");
	
	ВремяОкончанияРасчетов = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОбщееВремяРасчетов = ОбщееВремяРасчетов + ВремяОкончанияРасчетов - ВремяНачалаРасчетов;
	
	Возврат Результат;
	
КонецФункции

Функция РассчитатьВлияниеФакторовПоДаннымДляПересчета(тЦелевыеПоказатели, тПоказателиФакторов, ВалютаОтображения) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	НачатьПротоколРасчета();
	
	ВремяНачалаРасчетов = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РежимТрассировки = РежимТрассировки ИЛИ Константы.ИспользоватьРежимТрассировкиПересчетаПоказателей.Получить();
	
	// Получим кэш данных
	Если ЗначениеЗаполнено(АдресКэшаДанных) Тогда
		КэшДанных = ПолучитьИзВременногоХранилища(АдресКэшаДанных);
	Иначе
		КэшДанных = Новый Соответствие;
	КонецЕсли;

	// Сформируем параметры расчета
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("НомерТранзакции", 0);
	ПараметрыРасчета.Вставить("ВалютаИзмененныхПоказателей", ВалютаОтображения);
	ПараметрыРасчета.Вставить("РасчетПоСвязаннымВидамОтчетов", Ложь);	
	ПараметрыРасчета.Вставить("ЗаписыватьДанныеВРегистры", Ложь);
	ПараметрыРасчета.Вставить("ВидРасчета", "ПоИзмененнымПоЦелевымПоДаннымДляПересчета");
	
	// Расчеты не привязаны к идентификатору расчета
	УникальныйИдентификаторСеансаСтарый = УникальныйИдентификаторСеанса;
	УникальныйИдентификаторСеанса = Новый УникальныйИдентификатор;
	
	// Выполним расчет
	Результат = ВыполнитьРасчетВлиянияФакторов(тЦелевыеПоказатели, тПоказателиФакторов, ПараметрыРасчета);
	
	// Вернем прошлый уникальный идентификатор сеанса
	УникальныйИдентификаторСеанса = УникальныйИдентификаторСеансаСтарый;
	
	// Сохраним кэш данных
	АдресКэшаДанных = ПоместитьВоВременноеХранилище(КэшДанных, УникальныйИдентификаторСеанса);
	
	ЗавершитьПротоколРасчета("РассчитатьВлияниеФакторовПоДаннымДляПересчета");
	
	ВремяОкончанияРасчетов = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОбщееВремяРасчетов = ОбщееВремяРасчетов + ВремяОкончанияРасчетов - ВремяНачалаРасчетов;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьОписаниеТаблицыФакторов() Экспорт

	ТаблицаФакторов = Новый ТаблицаЗначений;
	ТаблицаФакторов.Колонки.Добавить("ПравилоОбработки");
	ТаблицаФакторов.Колонки.Добавить("Показатель");
	ТаблицаФакторов.Колонки.Добавить("Сценарий");
	ТаблицаФакторов.Колонки.Добавить("Организация");
	ТаблицаФакторов.Колонки.Добавить("Проект");
	ТаблицаФакторов.Колонки.Добавить("ПериодОтчета");	
	Для Сч = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		ТаблицаФакторов.Колонки.Добавить("Аналитика" + Сч);
	КонецЦикла;
	ТаблицаФакторов.Колонки.Добавить("АналитикаВалюта");
	ТаблицаФакторов.Колонки.Добавить("Значение");
	ТаблицаФакторов.Колонки.Добавить("ЗначениеНечисловое");
	ТаблицаФакторов.Колонки.Добавить("Влияние", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5,2));
	ТаблицаФакторов.Колонки.Добавить("Градиент", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	
	Возврат ТаблицаФакторов;	
	
КонецФункции

// Функция - Записать лог измененных показателей
//
// Возвращаемое значение:
//   Булево - Истина - запись произведена без ошибок, Ложь - в противном случае
//
Функция ЗаписатьЛогИзмененныхПоказателей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьПротоколРасчета();
	
	ВремяНачалаЗаписиВерсий = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	// Выполним запись
	Результат = ВыполнитьЗаписьЛогаИзмененыхПоказателей();
	
	ЗавершитьПротоколРасчета("ЗаписатьЛогИзмененныхПоказателей");
	
	ВремяОкончанияЗаписиВерсии = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОбщееВремяЗаписиВерсий = ВремяОкончанияЗаписиВерсии - ВремяНачалаЗаписиВерсий;
	
	Возврат Результат;
	
КонецФункции
	
// Функция - Получить лог измененных показателей
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - Таблица со значениями измененных показателей
//
Функция ПолучитьЛогИзмененныхПоказателей(ПараметрыОтбора=Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УникальныйИдентификаторСеанса", УникальныйИдентификаторСеанса); 
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.ПравилоОбработки КАК ПравилоОбработки,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.Показатель КАК Показатель,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.Сценарий КАК Сценарий,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.Организация КАК Организация,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.Проект КАК Проект,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.Аналитика1 КАК Аналитика1,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.Аналитика2 КАК Аналитика2,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.Аналитика3 КАК Аналитика3,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.Аналитика4 КАК Аналитика4,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.Аналитика5 КАК Аналитика5,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.Аналитика6 КАК Аналитика6,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.АналитикаВалюта КАК АналитикаВалюта,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.ПериодОтчета КАК ПериодОтчета,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.Валюта КАК Валюта,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.Значение КАК Значение,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.ЗначениеНечисловое КАК ЗначениеНечисловое,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.ЗначениеВалюта КАК ЗначениеВалюта,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.НомерТранзакции КАК НомерТранзакции
		|ИЗ
		|	РегистрСведений.ЛогИзмененныхЗначенийПоказателейОтчетов КАК ЛогИзмененныхЗначенийПоказателейОтчетов
		|ГДЕ
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.УникальныйИдентификаторСеанса = &УникальныйИдентификаторСеанса";
	
	Если ПараметрыОтбора <> Неопределено Тогда
		Для Каждого КлючЗначение Из ПараметрыОтбора Цикл
			Запрос.Текст = Запрос.Текст + "
			|	И ЛогИзмененныхЗначенийПоказателейОтчетов." + КлючЗначение.Ключ + " = &" + КлючЗначение.Ключ;
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Очищает лог измененных показателей
// 
// Возвращаемое значение:
//   - Истина - ошибок не было, Ложь - были ошибки
//
Функция ОчиститьЛогИзмененныхПоказателей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		НаборЗаписей = РегистрыСведений.ЛогИзмененныхЗначенийПоказателейОтчетов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УникальныйИдентификаторСеанса.Установить(УникальныйИдентификаторСеанса);
		НаборЗаписей.Записать(Истина); 
		
		НаборЗаписей = РегистрыСведений.ЛогИзмененныхКомментариевПоказателейОтчетов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УникальныйИдентификаторСеанса.Установить(УникальныйИдентификаторСеанса);
		НаборЗаписей.Записать(Истина);
		
	Исключение 
		
		ИнформацияОбОшибке = ИнформацияОбОшибке(); 
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить очистку лога измененных показателей.'");
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ОчиститьЛогИзмененныхПоказателей", , , ТекстСообщения, ТекстОшибки);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Возвращает таблицу рассчитанных показателей
// 	Имеет смысл при расчете по измененным или целевым показателям
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - Таблица со значениями рассчитанных показателей
//
Функция ПолучитьТаблицуРассчитанныхПоказателей() Экспорт
	
	Если ЗначениеЗаполнено(АдресТаблицыРассчитанныхПоказателей) Тогда
		Возврат ПолучитьИзВременногоХранилища(АдресТаблицыРассчитанныхПоказателей);
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Инициализирует структуру, с необходимыми полями для расчета
// 
// Возвращаемое значение:
//	Структура - Структура для расчета показателей, заполнена пустыми значениями
//
Функция ИнициализироватьОбъектРасчета() Экспорт
	
	// Основные реквизиты, необходимые для расчета
	ОбъектРасчета = Новый Структура;	
	
	// Обязательные реквизиты - должны быть заполнены всегда
	ОбъектРасчета.Вставить("ВидОтчета",Справочники.ВидыОтчетов.ПустаяСсылка());
	ОбъектРасчета.Вставить("ПериодОтчета",Справочники.Периоды.ПустаяСсылка());
	ОбъектРасчета.Вставить("ПериодОкончания",Справочники.Периоды.ПустаяСсылка()); 
	ОбъектРасчета.Вставить("Сценарий",Справочники.Сценарии.ПустаяСсылка());
	ОбъектРасчета.Вставить("Организация",Справочники.Организации.ПустаяСсылка());
	
	// Опциональные реквизиты - обязательные для конкретных видов отчетов
	Для Сч = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		ОбъектРасчета.Вставить("Аналитика" + Сч,Неопределено);
	КонецЦикла;	
	ОбъектРасчета.Вставить("Проект",Справочники.Проекты.ПустаяСсылка());
	
	// Для работы с внешними источниками
	ОбъектРасчета.Вставить("ИспользуемаяИБ", Неопределено);
	ОбъектРасчета.Вставить("ПутьКФайлуADO", "");
	ОбъектРасчета.Вставить("СтрокаСоединения", "");
	ОбъектРасчета.Вставить("ФайлИмпорта", "");
	ОбъектРасчета.Вставить("ВерсияХранимогоФайла", "");
	ОбъектРасчета.Вставить("ФлагОшибкиИмпорта", Ложь);
	ОбъектРасчета.Вставить("ДополнительныеСвойства", Новый Структура);
	
	// Необязательные реквизиты - рассчитываются исходя из обязательных реквизитов
	ОбъектРасчета.Вставить("УправлениеПериодом",Документы.УправлениеПериодомСценария.ПустаяСсылка());
	ОбъектРасчета.Вставить("СпособФормированияОтчета",Неопределено);
	ОбъектРасчета.Вставить("ПравилоОбработки",Справочники.ПравилаОбработки.ПустаяСсылка());	
	ОбъектРасчета.Вставить("ОсновнаяВалюта",Справочники.Валюты.ПустаяСсылка());
	
	ДополнительныеВалюты = Новый ТаблицаЗначений;
	ДополнительныеВалюты.Колонки.Добавить("Валюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Валюты"));
	ОбъектРасчета.Вставить("ДополнительныеВалюты",ДополнительныеВалюты);
	
	// Необязательные реквизиты
	ОбъектРасчета.Вставить("Регистратор",Неопределено);
	ОбъектРасчета.Вставить("ИдентификаторСеанса","");
	
	// Данные для пересчета зависимых показателей
	ОбъектРасчета.Вставить("тИзмененныеПоказатели",Неопределено);
	ОбъектРасчета.Вставить("тЦелевыеПоказатели",Неопределено);
	ОбъектРасчета.Вставить("ВалютаИзмененныхПоказателей", Неопределено);
	
	// Служебные реквизиты - рассчитываются перед началом расчета
	ОбъектРасчета.Вставить("МаксАналитикОтчета", 0);
	ОбъектРасчета.Вставить("МаксАналитикПоказателя", 0);
	ОбъектРасчета.Вставить("МассивПериодов", Новый Массив);
	ОбъектРасчета.Вставить("Периодичность", Перечисления.Периодичность.ПустаяСсылка());
	ОбъектРасчета.Вставить("ДатаНачала", Неопределено);
	ОбъектРасчета.Вставить("тТрассировкаРасчета", ПолучитьОписаниеТаблицыТрассировкиРасчета());
	ОбъектРасчета.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц); 
	ОбъектРасчета.Вставить("ВидРасчета", "");
	ОбъектРасчета.Вставить("НомерТранзакции", 0);
	ОбъектРасчета.Вставить("ЗаписыватьДанныеВРегистры", Ложь);
	
	// Служебные реквизиты - используются для получения данных из внешних ИБ
	ОбъектРасчета.Вставить("ВсегдаЗаполнятьАналитики",Истина);
	ОбъектРасчета.Вставить("мЗначенияОперандов",Неопределено);
	ОбъектРасчета.Вставить("База",Неопределено);
	
	// Реквизиты для совместимости с классическим движком расчета
	ОбъектРасчета.Вставить("АнализЧувствительности", Ложь);
	
	Возврат ОбъектРасчета;
	
КонецФункции

// Функция - Проверить модуль
//
// Параметры:
//  ТекстМодуля		 		- Строка - Текст проверяемого модуля
//  ОписаниеОшибки	 		- Строка - Переменная, в которую будет передан текст ошибки
//	ВычисляемыйПоказатель 	- Булево - Признак того, что это текст отбора или формулы расчета показателя
//	ВидОтчетаПоказатель		- СправочникСсылка - Ссылка на текущий показатель или вид отчета
// 
// Возвращаемое значение:
//	Булево - Истина, если текст модуля не содержит ошибок, Ложь - в противном случае
//
Функция ПроверитьМодуль(Знач ТекстМодуля, ОписаниеОшибки, ВычисляемыйПоказатель = Ложь, ВидОтчетаПоказатель = Неопределено) Экспорт
	
	Если ТипЗнч(ОбъектРасчета) <> Тип("Структура") Тогда
		ОбъектРасчета = ИнициализироватьОбъектРасчета();
	КонецЕсли;
	
	ТекстМодуля = НРег(ТекстМодуля);
	
	Если ВычисляемыйПоказатель Тогда
		
		Если СтрНайти(ТекстМодуля,"результат =") = 0
			И СтрНайти(ТекстМодуля,"результат=") = 0 Тогда
			ОписаниеОшибки = НСтр("ru = 'Не присвоено значение переменной ""Результат""'");
			Возврат Ложь;
		КонецЕсли;
		
		Если ТипЗнч(ВидОтчетаПоказатель) = Тип("СправочникСсылка.ПоказателиОтчетов") Тогда
			
			ТипЗначенияПоказателя = ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(ВидОтчетаПоказатель,"ТипЗначения");
			Если ТипЗначенияПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка Тогда
				ПустоеЗначение = """""";
			ИначеЕсли ТипЗначенияПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда
				ПустоеЗначение = "ЛОЖЬ";
			ИначеЕсли ТипЗначенияПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда
				ПустоеЗначение = "ДАТА(1,1,1)";
			Иначе
				ПустоеЗначение = "0";
			КонецЕсли;
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ИсточникиДанныхДляРасчетов.Код КАК Код
			|ИЗ
			|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
			|ГДЕ
			|	ВЫРАЗИТЬ(ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК Справочник.ПоказателиОтчетов) = &ПотребительРасчета");
			Запрос.УстановитьПараметр("ПотребительРасчета", ВидОтчетаПоказатель);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ТекстМодуля = СтрЗаменить(ТекстМодуля, "[" + НРег(СокрЛП(Выборка.Код)) + "]", ПустоеЗначение);
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ВидОтчетаПоказатель) = Тип("СправочникСсылка.ВидыОтчетов") Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ИсточникиДанныхДляРасчетов.Код КАК Код,
			|	ВЫРАЗИТЬ(ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК Справочник.ПоказателиОтчетов).ТипЗначения КАК ТипЗначенияПоказателя
			|ИЗ
			|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
			|ГДЕ
			|	ВЫРАЗИТЬ(ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК Справочник.ПоказателиОтчетов).Владелец = &ВидОтчета");
			
			Запрос.УстановитьПараметр("ВидОтчета", ВидОтчетаПоказатель);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если ТипЗначенияПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка Тогда
					ПустоеЗначение = """""";
				ИначеЕсли ТипЗначенияПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда
					ПустоеЗначение = "ЛОЖЬ";
				ИначеЕсли ТипЗначенияПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда
					ПустоеЗначение = "ДАТА(1,1,1)";
				Иначе
					ПустоеЗначение = "0";
				КонецЕсли;
				
				ТекстМодуля = СтрЗаменить(ТекстМодуля, "[" + НРег(СокрЛП(Выборка.Код)) + "]", ПустоеЗначение);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;			
	
	ТекстМодуля = "Если Ложь Тогда " + ТекстМодуля + "
	|КонецЕсли;";
	
	Попытка
		// АПК:487-выкл Выполняется в контексте данной обработки
		ДанныеРасчета = Новый Структура;
		Выполнить(ТекстМодуля);
		// АПК:487-вкл
		Возврат Истина;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = ИнформацияОбОшибке.Причина.Описание;
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции
	
#КонецОбласти


#Область ПротоколРасчета 

Процедура НачатьПротоколРасчета()
	
	АдресТаблицыСобытий = "";
	ПротоколируемыеСобытияУХ.Начать();
	
КонецПроцедуры

Процедура ЗавершитьПротоколРасчета(ИмяСобытия)
	
	Протокол = ПротоколируемыеСобытияУХ.Завершить(ИмяСобытия,,,Ложь,Ложь,,Истина);
	Если Протокол <> Неопределено Тогда
		Если Протокол.Количество() Тогда
			АдресТаблицыСобытий = ПоместитьВоВременноеХранилище(Протокол, УникальныйИдентификаторСеанса);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область РасчетПоказателей

///////////////////////////////////////////////////////
// ОСНОВНОЙ РАСЧЕТ 

Функция ПолучитьПодчиненныеПериоды(ДатаНачала, ДатаОкончания, Периодичность)
	
	СтрКэш = "ПодчиненныеПериоды#" + 
		Строка(ДатаНачала) + "@" + 
		Строка(ДатаОкончания) + "@" + 
		Строка(Периодичность) + "@";
		
	ТекДанные = КэшДанных.Получить(СтрКэш);
	Если ТекДанные = Неопределено Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Периоды.Ссылка КАК Период
			|ИЗ
			|	Справочник.Периоды КАК Периоды
			|ГДЕ
			|	НЕ Периоды.ПометкаУдаления
			|	И НЕ Периоды.Произвольный
			|	И Периоды.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И Периоды.Периодичность = &Периодичность
			|
			|УПОРЯДОЧИТЬ ПО
			|	Периоды.ДатаНачала";

		Запрос.УстановитьПараметр("ДатаНачала",    ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
		Запрос.УстановитьПараметр("Периодичность", Периодичность);
	
		ТекДанные = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Период");
		
		КэшДанных.Вставить(СтрКэш, ТекДанные);
		
	КонецЕсли;	
	
	Возврат ТекДанные;	
	
КонецФункции

Функция ПолучитьДанныеПериода(ПериодОтчета)
	
	СтрКэш = "ДанныеПериода#" + Строка(ПериодОтчета.УникальныйИдентификатор());
	
	ТекДанные = КэшДанных.Получить(СтрКэш);
	Если ТекДанные = Неопределено Тогда
		ТекДанные = ОбщегоНазначенияУХ.ЗначенияРеквизитовОбъекта(ПериодОтчета, "ДатаНачала,ДатаОкончания,Периодичность");
		КэшДанных.Вставить(СтрКэш, ТекДанные);
	КонецЕсли;
	
	Возврат ТекДанные;
	
КонецФункции

Функция ПолучитьЗначениеРеквизитаОбъекта(ОбъектАнализа, ИмяРеквизита)
	
	СтрКэш = ИмяРеквизита + "#" + Строка(ОбъектАнализа.УникальныйИдентификатор());
	
	ТекДанные = КэшДанных.Получить(СтрКэш);
	Если ТекДанные = Неопределено Тогда
		ТекДанные = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектАнализа, ИмяРеквизита);
		КэшДанных.Вставить(СтрКэш, ТекДанные); 
	КонецЕсли;
	
	Возврат ТекДанные;
	
КонецФункции

Функция ПолучитьЗависимыеПравилаОбработки(ДанныеДляРасчетов)
	
	СтрКэш = "ЗависимыеПравилаОбработки#" + 
		Строка(ДанныеДляРасчетов.Показатель.УникальныйИдентификатор()) + "@" +
		Строка(ДанныеДляРасчетов.ПравилоОбработки.УникальныйИдентификатор()) + "@" +
		Строка(ДанныеДляРасчетов.ПравилаОбработкиУИД);
		
	ТекДанные = КэшДанных.Получить(СтрКэш);
	Если ТекДанные = Неопределено Тогда	
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПроцедурыРасчетов.ПотребительРасчета КАК ПотребительРасчета
			|ПОМЕСТИТЬ втПроцедурыРасчетов
			|ИЗ
			|	РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
			|ГДЕ
			|	ПроцедурыРасчетов.НазначениеРасчетов В(&ПравилаОбработки)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов КАК ПравилоРасчетов
			|ИЗ
			|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПроцедурыРасчетов КАК ПроцедурыРасчетов
			|		ПО ИсточникиДанныхДляРасчетов.ПотребительРасчета = ПроцедурыРасчетов.ПотребительРасчета
			|ГДЕ
			|	ИсточникиДанныхДляРасчетов.ПоказательОтбор = &Показатель
			|	И НЕ ИсточникиДанныхДляРасчетов.НеИспользуется
			|	И ИсточникиДанныхДляРасчетов.НазначениеРасчетов В(&ПравилаОбработки)
			|	И ИсточникиДанныхДляРасчетов.НазначениеРасчетов <> &ПравилоОбработки";
			
		Запрос.УстановитьПараметр("Показатель", ДанныеДляРасчетов.Показатель);
		Запрос.УстановитьПараметр("ПравилоОбработки", ДанныеДляРасчетов.ПравилоОбработки);
		Запрос.УстановитьПараметр("ПравилаОбработки", ДанныеДляРасчетов.ПравилаОбработки);
		
		ТекДанные = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПравилоРасчетов");
		
		КэшДанных.Вставить(СтрКэш, ТекДанные);
		
	КонецЕсли;
	
	Возврат ТекДанные;
	
КонецФункции

Функция ПолучитьИсходныеПравилаОбработки(ДанныеДляРасчетов)
	
	СтрКэш = "ИсходныеПравилаОбработки#" + 
		Строка(ДанныеДляРасчетов.Показатель.УникальныйИдентификатор()) + "@" + 
		Строка(ДанныеДляРасчетов.ПравилаОбработкиУИД);
		
	ТекДанные = КэшДанных.Получить(СтрКэш);
	Если ТекДанные = Неопределено Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПроцедурыРасчетов.ПотребительРасчета КАК ПотребительРасчета
			|ПОМЕСТИТЬ втПроцедурыРасчетов
			|ИЗ
			|	РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
			|ГДЕ
			|	ПроцедурыРасчетов.НазначениеРасчетов В(&ПравилаОбработки)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов КАК ПравилоРасчетов
			|ИЗ
			|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПроцедурыРасчетов КАК ПроцедурыРасчетов
			|		ПО ИсточникиДанныхДляРасчетов.ПотребительРасчета = ПроцедурыРасчетов.ПотребительРасчета
			|ГДЕ
			|	ИсточникиДанныхДляРасчетов.ПотребительРасчета = &Показатель
			|	И НЕ ИсточникиДанныхДляРасчетов.НеИспользуется
			|	И ИсточникиДанныхДляРасчетов.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета)
			|	И ИсточникиДанныхДляРасчетов.НазначениеРасчетов В(&ПравилаОбработки)";
			
		Запрос.УстановитьПараметр("Показатель", ДанныеДляРасчетов.Показатель);
		Запрос.УстановитьПараметр("ПравилаОбработки", ДанныеДляРасчетов.ПравилаОбработки);
	
		ТекДанные = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПравилоРасчетов");
		
		КэшДанных.Вставить(СтрКэш, ТекДанные);
		
	КонецЕсли;
	
	Возврат ТекДанные;
	
КонецФункции

Функция ПолучитьЭлементыНастройкиОбработкиОтчета(ДанныеДляРасчетов, ЭлементНастройкиОтчета, ИмяЭлементаНастройкиОтчета, ПоГруппеОтчетов=Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкаОбработкиОтчетов.ЗначениеЭлементаНастройкиОтчета КАК ЗначениеЭлементаНастройкиОтчета,
		|	ВидыОтчетов.Ссылка КАК ВидОтчета,
		|	ВЫБОР
		|		КОГДА НастройкаОбработкиОтчетов.Организация = &Организация
		|			ТОГДА 1000000
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА НастройкаОбработкиОтчетов.Сценарий = &Сценарий
		|			ТОГДА 100000
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА НастройкаОбработкиОтчетов.ВерсияОрганизационнойСтруктуры = &РегламентПодготовкиОтчетности
		|			ТОГДА 10000
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА НастройкаОбработкиОтчетов.ПериодОтчета = ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ ГОД(НастройкаОбработкиОтчетов.ПериодОтчета.ДатаОкончания) + ДЕНЬГОДА(НастройкаОбработкиОтчетов.ПериодОтчета.ДатаОкончания)
		|	КОНЕЦ КАК Вес
		|ПОМЕСТИТЬ втНастройкаОбработкиОтчетов
		|ИЗ
		|	РегистрСведений.НастройкаОбработкиОтчетов КАК НастройкаОбработкиОтчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОтчетов КАК ВидыОтчетов
		|		ПО НастройкаОбработкиОтчетов.ШаблонДокументаБД = ВидыОтчетов.Ссылка
		|ГДЕ
		|	ВидыОтчетов.Ссылка = &ВидОтчета
		|	И НастройкаОбработкиОтчетов.ЭлементНастройкиОтчета = &ЭлементНастройкиОтчета
		|	И НастройкаОбработкиОтчетов.Организация В (&Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|	И НастройкаОбработкиОтчетов.Сценарий В (&Сценарий, ЗНАЧЕНИЕ(Справочник.Сценарии.ПустаяСсылка))
		|	И НастройкаОбработкиОтчетов.ВерсияОрганизационнойСтруктуры В (&РегламентПодготовкиОтчетности, ЗНАЧЕНИЕ(Справочник.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка))
		|	И (НастройкаОбработкиОтчетов.ПериодОтчета = ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)
		|			ИЛИ НастройкаОбработкиОтчетов.ПериодОтчета.Периодичность = &Периодичность
		|				И НастройкаОбработкиОтчетов.ПериодОтчета.ДатаОкончания <= &ДатаОкончания)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкаОбработкиОтчетов.ВидОтчета КАК ВидОтчета,
		|	МАКСИМУМ(НастройкаОбработкиОтчетов.Вес) КАК Вес
		|ПОМЕСТИТЬ втМаксимальныеВеса
		|ИЗ
		|	втНастройкаОбработкиОтчетов КАК НастройкаОбработкиОтчетов
		|
		|СГРУППИРОВАТЬ ПО
		|	НастройкаОбработкиОтчетов.ВидОтчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкаОбработкиОтчетов.ЗначениеЭлементаНастройкиОтчета КАК " + ИмяЭлементаНастройкиОтчета + ",
		|	НастройкаОбработкиОтчетов.ВидОтчета КАК ВидОтчета
		|ИЗ
		|	втНастройкаОбработкиОтчетов КАК НастройкаОбработкиОтчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМаксимальныеВеса КАК МаксимальныеВеса
		|		ПО НастройкаОбработкиОтчетов.ВидОтчета = МаксимальныеВеса.ВидОтчета
		|			И НастройкаОбработкиОтчетов.Вес = МаксимальныеВеса.Вес";

	Запрос.УстановитьПараметр("ЭлементНастройкиОтчета", 		ЭлементНастройкиОтчета);
	Запрос.УстановитьПараметр("Организация", 					ДанныеДляРасчетов.Организация);
	Запрос.УстановитьПараметр("Сценарий", 						ДанныеДляРасчетов.Сценарий);
	Запрос.УстановитьПараметр("РегламентПодготовкиОтчетности", 	ДанныеДляРасчетов.ВерсияРегламентаПодготовкиОтчетности);
	Запрос.УстановитьПараметр("ДатаОкончания", 					ДанныеДляРасчетов.ДатаОкончания);
	Запрос.УстановитьПараметр("Периодичность", 					ДанныеДляРасчетов.Периодичность);	
	
	Если ПоГруппеОтчетов Тогда
		Запрос.УстановитьПараметр("ВидОтчета", ДанныеДляРасчетов.ГруппаВидовОтчетов);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВидыОтчетов.Ссылка = &ВидОтчета", "ВидыОтчетов.Ссылка В ИЕРАРХИИ(&ВидОтчета)");
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Неопределено;
		Иначе
			Возврат РезультатЗапроса.Выгрузить();
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ВидОтчета", ДанныеДляРасчетов.ВидОтчета);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Неопределено;
		Иначе
			Возврат РезультатЗапроса.Выгрузить().Получить(0)[ИмяЭлементаНастройкиОтчета];
		КонецЕсли
	КонецЕсли;

КонецФункции


Функция ДобавитьДанныеУправленияПериодомСценария(ДанныеДляРасчетов)
	
	ЕстьОшибкиПроверки = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ДанныеДляРасчетов.ПериодОтчета) Тогда
		ТекстСообщения = НСтр("ru = 'Не задан ""Период отчета"" в параметрах расчета'"); 
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ПолучитьДанныеУправленияПериодомСценария", , , ТекстСообщения); 
		ЕстьОшибкиПроверки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеДляРасчетов.Сценарий) Тогда
		ТекстСообщения = НСтр("ru = 'Не задан ""Сценарий"" в параметрах расчета'"); 
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ПолучитьДанныеУправленияПериодомСценария", , , ТекстСообщения); 
		ЕстьОшибкиПроверки = Истина;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДанныеДляРасчетов.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Не задана ""Организация"" в параметрах расчета'"); 
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ПолучитьДанныеУправленияПериодомСценария", , , ТекстСообщения); 
		ЕстьОшибкиПроверки = Истина;
	КонецЕсли;
	
	Если ЕстьОшибкиПроверки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрКэш = "ДанныеУправленияПериодомСценария#" + 
		Строка(ДанныеДляРасчетов.Сценарий.УникальныйИдентификатор()) + "@" + 
		Строка(ДанныеДляРасчетов.Организация.УникальныйИдентификатор()) + "@";
	СтрКэшПериод = Строка(ДанныеДляРасчетов.ПериодОтчета.УникальныйИдентификатор());
		
	ТекДанные = КэшДанных.Получить(СтрКэш+СтрКэшПериод);
	Если ТекДанные = Неопределено Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДокументУправлениеПериодомСценария.Ссылка КАК УправлениеПериодом,
			|	ДокументУправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры КАК ВерсияРегламентаПодготовкиОтчетности,
			|	ДокументУправлениеПериодомСценария.ПериодСценария КАК ПериодСценария,
			|	ДокументУправлениеПериодомСценария.ПериодСценарияОкончание КАК ПериодСценарияОкончание,
			|	ДокументУправлениеПериодомСценария.ПериодСценария.ДатаНачала КАК ДатаНачалаСценария,
			|	ДокументУправлениеПериодомСценария.ПериодСценарияОкончание.ДатаОкончания КАК ДатаСценарияОкончание,
			|	ДокументУправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры.ВидОтчета КАК ГруппаВидовОтчетов
			|ИЗ
			|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УправлениеПериодомСценария КАК ДокументУправлениеПериодомСценария
			|		ПО СтатусыПериодовСценариев.УправлениеПериодомСценария = ДокументУправлениеПериодомСценария.Ссылка
			|			И (СтатусыПериодовСценариев.Сценарии = &Сценарий)
			|			И (СтатусыПериодовСценариев.Организации = &Организация)
			|			И (СтатусыПериодовСценариев.Периоды = &ПериодОтчета)";
			
		Запрос.УстановитьПараметр("Сценарий", ДанныеДляРасчетов.Сценарий);
		Запрос.УстановитьПараметр("Организация", ДанныеДляРасчетов.Организация);
		Запрос.УстановитьПараметр("ПериодОтчета", ДанныеДляРасчетов.ПериодОтчета);

		ТекДанные = Запрос.Выполнить().Выбрать();
		ТекДанные.Следующий();
		
		Если НЕ ЗначениеЗаполнено(ТекДанные.УправлениеПериодом) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось определить документ управления отчетным периодом по параметрам:
			|	Сценарий: ""%1"",
			|	Организация: ""%2"",
			|	Период: ""%3""'"), 
			ДанныеДляРасчетов.Сценарий, ДанныеДляРасчетов.Организация, ДанныеДляРасчетов.ПериодОтчета);
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ПолучитьДанныеУправленияПериодомСценария", , , ТекстСообщения); 
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекДанные.ВерсияРегламентаПодготовкиОтчетности) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось определить регламент подготовки отчетности по параметрам:
			|	Сценарий: ""%1"",
			|	Организация: ""%2"",
			|	Период: ""%3""'"), 
			ДанныеДляРасчетов.Сценарий, ДанныеДляРасчетов.Организация, ДанныеДляРасчетов.ПериодОтчета);
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ПолучитьДанныеУправленияПериодомСценария", , , ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		КэшДанных.Вставить("ПериодСценария#"+Строка(ТекДанные.УправлениеПериодом.УникальныйИдентификатор()), ТекДанные.ПериодСценария);
		КэшДанных.Вставить("ПериодСценарияОкончание#"+Строка(ТекДанные.УправлениеПериодом.УникальныйИдентификатор()), ТекДанные.ПериодСценарияОкончание);
		
		// Закэшируем данные по всем периодам 	
		МассивПериодовСценария = ПолучитьПодчиненныеПериоды(ТекДанные.ДатаНачалаСценария, ТекДанные.ДатаСценарияОкончание, ДанныеДляРасчетов.Периодичность);
		Для Каждого Период Из МассивПериодовСценария Цикл
			СтрКэшПериод = Строка(Период.УникальныйИдентификатор());
			КэшДанных.Вставить(СтрКэш + СтрКэшПериод, ДанныеДляРасчетов);
		КонецЦикла;
		
	Иначе
		МассивПериодовСценария = ТекДанные.МассивПериодовСценария;
	КонецЕсли;		

	ДанныеДляРасчетов.Вставить("УправлениеПериодом", 					ТекДанные.УправлениеПериодом);
	ДанныеДляРасчетов.Вставить("ВерсияРегламентаПодготовкиОтчетности", 	ТекДанные.ВерсияРегламентаПодготовкиОтчетности);
	ДанныеДляРасчетов.Вставить("ПериодСценария", 						ТекДанные.ПериодСценария);
	ДанныеДляРасчетов.Вставить("ПериодСценарияОкончание",				ТекДанные.ПериодСценарияОкончание);	
	ДанныеДляРасчетов.Вставить("ГруппаВидовОтчетов", 					ТекДанные.ГруппаВидовОтчетов);
	ДанныеДляРасчетов.Вставить("МассивПериодовСценария",				МассивПериодовСценария);

	Возврат Истина; 
	
КонецФункции

Функция ДобавитьПравилаОбработки(ДанныеДляРасчетов)
	
	СтрКэш = "ПравилаОбработки#" + 
		Строка(ДанныеДляРасчетов.Сценарий.УникальныйИдентификатор()) + "@" + 
		Строка(ДанныеДляРасчетов.Организация.УникальныйИдентификатор()) + "@" + 
		Строка(ДанныеДляРасчетов.ВерсияРегламентаПодготовкиОтчетности.УникальныйИдентификатор()) + "@";
	СтрКэшПериод = Строка(ДанныеДляРасчетов.ПериодОтчета.УникальныйИдентификатор());	
	
	ТекДанные = КэшДанных.Получить(СтрКэш+СтрКэшПериод);
	Если ТекДанные = Неопределено Тогда
	
		ПравилаОбработки = ПолучитьЭлементыНастройкиОбработкиОтчета(ДанныеДляРасчетов, 
			Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки,
			"ПравилоОбработки",
			Истина);
		Если НЕ ЗначениеЗаполнено(ПравилаОбработки) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось определить правила обработки по параметрам:
			|	Сценарий: ""%1"",
			|	Организация: ""%2"",
			|	Период: ""%3"", 
			|	Регламент: ""%4"",
			|	Группа видов отчетов: ""%5""'"), 
			ДанныеДляРасчетов.Сценарий, ДанныеДляРасчетов.Организация, ДанныеДляРасчетов.ПериодОтчета,
			ДанныеДляРасчетов.ВерсияРегламентаПодготовкиОтчетности, ДанныеДляРасчетов.ГруппаВидовОтчетов);
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ПолучитьПравилаОбработки", , , ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		ТекДанные = Новый Структура;
		ТекДанные.Вставить("ПравилаОбработки", ПравилаОбработки);
		ТекДанные.Вставить("ПравилаОбработкиУИД", Строка(Новый УникальныйИдентификатор));
		
		// Закэшируем данные по всем периодам 	
		Для Каждого Период Из ДанныеДляРасчетов.МассивПериодовСценария Цикл
			СтрКэшПериод = Строка(Период.УникальныйИдентификатор());
			КэшДанных.Вставить(СтрКэш + СтрКэшПериод, ТекДанные);
		КонецЦикла;

	КонецЕсли;
	
	ДанныеДляРасчетов.Вставить("ПравилаОбработки", ТекДанные.ПравилаОбработки);
	ДанныеДляРасчетов.Вставить("ПравилаОбработкиУИД", ТекДанные.ПравилаОбработкиУИД);	
	
	Возврат Истина;
	
КонецФункции

Функция ДобавитьПравилоОбработки(ДанныеДляРасчетов)
	
	СтрКэш = "ПравилоОбработки#" + 
		Строка(ДанныеДляРасчетов.Сценарий.УникальныйИдентификатор()) + "@" + 
		Строка(ДанныеДляРасчетов.Организация.УникальныйИдентификатор()) + "@" + 
		Строка(ДанныеДляРасчетов.ВерсияРегламентаПодготовкиОтчетности.УникальныйИдентификатор()) + "@" +
		Строка(ДанныеДляРасчетов.ВидОтчета.УникальныйИдентификатор()) + "@";
	СтрКэшПериод = Строка(ДанныеДляРасчетов.ПериодОтчета.УникальныйИдентификатор());
	
	ТекДанные = КэшДанных.Получить(СтрКэш+СтрКэшПериод);
	Если ТекДанные = Неопределено Тогда
		
		ТекДанные = ПолучитьЭлементыНастройкиОбработкиОтчета(ДанныеДляРасчетов, 
			Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки,
			"ПравилоОбработки");
			
		Если НЕ ЗначениеЗаполнено(ТекДанные) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось определить правило обработки по параметрам:
			|	Сценарий: ""%1"",
			|	Организация: ""%2"",
			|	Период: ""%3"", 
			|	Регламент: ""%4"",
			|	Вид отчета: ""%5""'"), 
			ДанныеДляРасчетов.Сценарий, ДанныеДляРасчетов.Организация, ДанныеДляРасчетов.ПериодОтчета,
			ДанныеДляРасчетов.ВерсияРегламентаПодготовкиОтчетности, ДанныеДляРасчетов.ВидОтчета);
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ПолучитьПравилоОбработки", , , ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		// Закэшируем данные по всем периодам 	
		Для Каждого Период Из ДанныеДляРасчетов.МассивПериодовСценария Цикл
			СтрКэшПериод = Строка(Период.УникальныйИдентификатор());
			КэшДанных.Вставить(СтрКэш + СтрКэшПериод, ТекДанные);
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеДляРасчетов.Вставить("ПравилоОбработки", ТекДанные);
	
	Возврат Истина;		
		
КонецФункции
	
Функция ДобавитьСпособФормированияОтчета(ДанныеДляРасчетов)
	
	СтрКэш = "СпособФормированияОтчета#" + 
		Строка(ДанныеДляРасчетов.Сценарий.УникальныйИдентификатор()) + "@" + 
		Строка(ДанныеДляРасчетов.Организация.УникальныйИдентификатор()) + "@" + 
		Строка(ДанныеДляРасчетов.ВерсияРегламентаПодготовкиОтчетности.УникальныйИдентификатор()) + "@" + 
		Строка(ДанныеДляРасчетов.ВидОтчета.УникальныйИдентификатор()) + "@";
	СтрКэшПериод = Строка(ДанныеДляРасчетов.ПериодОтчета.УникальныйИдентификатор());
	
	ТекДанные = КэшДанных.Получить(СтрКэш+СтрКэшПериод);
	Если ТекДанные = Неопределено Тогда

		ТекДанные = ПолучитьЭлементыНастройкиОбработкиОтчета(ДанныеДляРасчетов, 
			Перечисления.ЭлементыНастройкиОтчета.СпособФормированияОтчета,
			"СпособФормированияОтчета");
			
		Если НЕ ЗначениеЗаполнено(ТекДанные) Тогда
			ТекДанные = Перечисления.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки;
		КонецЕсли;
		
		// Закэшируем данные по всем периодам 	
		Для Каждого Период Из ДанныеДляРасчетов.МассивПериодовСценария Цикл
			СтрКэшПериод = Строка(Период.УникальныйИдентификатор());
			КэшДанных.Вставить(СтрКэш + СтрКэшПериод, ТекДанные);
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеДляРасчетов.Вставить("СпособФормированияОтчета", ТекДанные);
	
	Возврат Истина;
		
КонецФункции

Функция ДобавитьВалютыОтчета(ДанныеДляРасчетов)
	
	ЕстьОшибкиПроверки = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ДанныеДляРасчетов.ВидОтчета) Тогда
		ТекстСообщения = НСтр("ru = 'Не задан ""Вид отчета"" в параметрах расчета'"); 
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ПолучитьДанныеУправленияПериодомСценария", , , ТекстСообщения); 
		ЕстьОшибкиПроверки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеДляРасчетов.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Не задана ""Организация"" в параметрах расчета'"); 
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ПолучитьДанныеУправленияПериодомСценария", , , ТекстСообщения); 
		ЕстьОшибкиПроверки = Истина;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ДанныеДляРасчетов.УправлениеПериодом) Тогда
		ТекстСообщения = НСтр("ru = 'Не задан документ ""Управление отчетным периодом"" в параметрах расчета'"); 
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ПолучитьДанныеУправленияПериодомСценария", , , ТекстСообщения); 
		ЕстьОшибкиПроверки = Истина;
	КонецЕсли;
	
	Если ЕстьОшибкиПроверки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрКэш = "ВалютыОтчета#" + 
		Строка(ДанныеДляРасчетов.ВидОтчета.УникальныйИдентификатор()) + "@" +
		Строка(ДанныеДляРасчетов.Организация.УникальныйИдентификатор()) + "@" + 
		Строка(ДанныеДляРасчетов.УправлениеПериодом.УникальныйИдентификатор());
		
	ТекДанные = КэшДанных.Получить(СтрКэш);
	Если ТекДанные = Неопределено Тогда	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВалютыОтчетностиСрезПоследних.ОсновнаяВалюта КАК ОсновнаяВалюта,
			|	ВалютыОтчетностиСрезПоследних.Валюта КАК Валюта
			|ИЗ
			|	РегистрСведений.ВалютыОтчетности.СрезПоследних(
			|			,
			|			Регламент В
			|					(ВЫБРАТЬ
			|						УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры КАК ВерсияОрганизационнойСтруктуры
			|					ИЗ
			|						Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
			|					ГДЕ
			|						УправлениеПериодомСценария.Ссылка = &УправлениеПериодом)
			|				И (ШаблонДокументаБД = &ШаблонДокументаБД
			|					ИЛИ ШаблонДокументаБД = НЕОПРЕДЕЛЕНО)
			|				И Организация = &Организация
			|				И Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютыОтчетностиСрезПоследних";
		
		Запрос.УстановитьПараметр("Организация", 		ДанныеДляРасчетов.Организация);
		Запрос.УстановитьПараметр("УправлениеПериодом", ДанныеДляРасчетов.УправлениеПериодом);
		Запрос.УстановитьПараметр("ШаблонДокументаБД", 	ДанныеДляРасчетов.ВидОтчета);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда		
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось определить валюты отчетности по параметрам:
				|	Вид отчета: ""%1"",
				|	Организация: ""%2"",
				|	Управление отчетным периодом: ""%3""'"), 
			ДанныеДляРасчетов.ВидОтчета, ДанныеДляРасчетов.Организация, ДанныеДляРасчетов.УправлениеПериодом);
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ДобавитьВалютыОтчета", , , ТекстСообщения); 
			Возврат Ложь;		
		КонецЕсли;
		
		ТекДанные = Новый Структура;
		ДополнительныеВалюты = Новый ТаблицаЗначений;
		ДополнительныеВалюты.Колонки.Добавить("Валюта");
			
		// Заполним валюты	
		ВыборкаВалюты = РезультатЗапроса.Выбрать();
		Пока ВыборкаВалюты.Следующий() Цикл
			Если ВыборкаВалюты.ОсновнаяВалюта Тогда
				ТекДанные.Вставить("ОсновнаяВалюта", ВыборкаВалюты.Валюта);
			Иначе
				НСтрока = ДополнительныеВалюты.Добавить();
				НСтрока.Валюта = ВыборкаВалюты.Валюта;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(ТекДанные.ОсновнаяВалюта) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось определить основную валюту отчета по параметрам:
				|	Вид отчета: ""%1"",
				|	Организация: ""%2"",
				|	Управление отчетным периодом: ""%3""'"), 
			ДанныеДляРасчетов.ВидОтчета, ДанныеДляРасчетов.Организация, ДанныеДляРасчетов.УправлениеПериодом);
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ДобавитьВалютыОтчета", , , ТекстСообщения); 
			Возврат Ложь;
		КонецЕсли;
		
		ТекДанные.Вставить("ДополнительныеВалюты", ДополнительныеВалюты);
		
		КэшДанных.Вставить(СтрКэш, ТекДанные);
		
	КонецЕсли;
	
	ДанныеДляРасчетов.Вставить("ОсновнаяВалюта", ТекДанные.ОсновнаяВалюта);
	ДанныеДляРасчетов.Вставить("ДополнительныеВалюты", ТекДанные.ДополнительныеВалюты);
	
	// Для режима измененных показателей дополнинтельные валюты определяются по другому алгоритму
	Если ЗначениеЗаполнено(ДанныеДляРасчетов.ВалютаИзмененныхПоказателей) Тогда
		ДанныеДляРасчетов.ДополнительныеВалюты.Очистить();
		Если ДанныеДляРасчетов.ВалютаИзмененныхПоказателей <> ДанныеДляРасчетов.ОсновнаяВалюта Тогда
			// В результирующей таблице нам нужны будут только данные в валюте измененных показателей		
			НСтрока = ДанныеДляРасчетов.ДополнительныеВалюты.Добавить();
			НСтрока.Валюта = ДанныеДляРасчетов.ОсновнаяВалюта;
			НСтрока = ДанныеДляРасчетов.ДополнительныеВалюты.Добавить();
			НСтрока.Валюта = ДанныеДляРасчетов.ВалютаИзмененныхПоказателей;
		КонецЕсли;
	КонецЕсли;	
		
	Возврат Истина;
		
КонецФункции

Функция ДобавитьДанныеВидаОтчета(ДанныеДляРасчетов)
	
	Если НЕ ЗначениеЗаполнено(ДанныеДляРасчетов.ВидОтчета) Тогда
		ТекстСообщения = НСтр("ru = 'Не задан ""Вид отчета"" в параметрах расчета'"); 
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ДобавитьДанныеВидаОтчета", , , ТекстСообщения); 
		Возврат Ложь;
	КонецЕсли;
	
	СтрКэш = "ДанныеВидаОтчета#" + 
		Строка(ДанныеДляРасчетов.ВидОтчета.УникальныйИдентификатор());
		
	ТекДанные = КэшДанных.Получить(СтрКэш);
	Если ТекДанные = Неопределено Тогда
	
		ТекДанные = УправлениеРасчетомПоказателей.ДанныеВидаОтчета(ДанныеДляРасчетов.ВидОтчета);
		
		КэшДанных.Вставить(СтрКэш, ТекДанные);
		
	КонецЕсли;
	
	ДанныеДляРасчетов.Вставить("ДанныеВидаОтчета", ТекДанные);
	ДанныеДляРасчетов.Вставить("МаксКлючевыхАналитик", ТекДанные.МаксКлючевыхАналитик);
	ДанныеДляРасчетов.Вставить("МаксАналитикОтчета", ТекДанные.МаксКлючевыхАналитик);
	ДанныеДляРасчетов.Вставить("СохранятьИсториюИзменений", ТекДанные.СохранятьИсториюИзменений);
	ДанныеДляРасчетов.Вставить("РазделениеПоПроектам", ТекДанные.РазделениеПоПроектам);
	
	Возврат Истина;
	
КонецФункции 

Функция ДобавитьДанныеАналитикПоказателей(ДанныеДляРасчетов)
	
	Если НЕ ЗначениеЗаполнено(ДанныеДляРасчетов.ВидОтчета) Тогда
		ТекстСообщения = НСтр("ru = 'Не задан ""Вид отчета"" в параметрах расчета'"); 
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ДобавитьДанныеВидаОтчета", , , ТекстСообщения); 
		Возврат Ложь;
	КонецЕсли;
	
	СтрКэш = "ДанныеАналитикПоказателей#" + 
		Строка(ДанныеДляРасчетов.ВидОтчета.УникальныйИдентификатор());
		
	ТекДанные = КэшДанных.Получить(СтрКэш);
	Если ТекДанные = Неопределено Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	МАКСИМУМ(ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.ЧислоАналитик, 0)) КАК МаксАналитикПоказателя,
			|	МАКСИМУМ(ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.Валютная, ЛОЖЬ)) КАК ЕстьАналитикаВалюта
			|ИЗ
			|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
			|ГДЕ
			|	ПоказателиОтчетов.Владелец = &ВидОтчета";
		
		Запрос.УстановитьПараметр("ВидОтчета", ДанныеДляРасчетов.ВидОтчета);	
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ТекДанные = РезультатЗапроса.Выгрузить().Получить(0);
		Иначе
			ТекДанные = Новый Структура;
			ТекДанные.Вставить("МаксАналитикПоказателя", 0);
			ТекДанные.Вставить("ЕстьАналитикаВалюта", Ложь);
		КонецЕсли;
		
		КэшДанных.Вставить(СтрКэш, ТекДанные);
		
	КонецЕсли;
	
	ДанныеДляРасчетов.Вставить("ЕстьАналитикаВалюта", ТекДанные.ЕстьАналитикаВалюта);
	ДанныеДляРасчетов.Вставить("МаксАналитикПоказателя", ТекДанные.МаксАналитикПоказателя + ДанныеДляРасчетов.МаксКлючевыхАналитик);
	
	Возврат Истина;

КонецФункции


Функция ПодготовитьОбъектРасчета(МенеджерВременныхТаблиц, Параметры1=Неопределено, Параметры2=Неопределено, Параметры3=Неопределено)

	// Заполним переданные настройки
	Если Параметры1 <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ОбъектРасчета, Параметры1);
	КонецЕсли;
	Если Параметры2 <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ОбъектРасчета, Параметры2);
	КонецЕсли;
	Если Параметры3 <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ОбъектРасчета, Параметры3);
	КонецЕсли;
	ОбъектРасчета.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОбъектРасчета.Вставить("ЧерноваяВерсия", ЗначениеЗаполнено(ОбъектРасчета.ИдентификаторСеанса));
	
	// Добавим данные вида отчета
	Если НЕ ДобавитьДанныеВидаОтчета(ОбъектРасчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ОбъектРасчета.ЧерноваяВерсия Тогда
		// Для черновых версий всегда считаем и записываем дельты значений показателей
		ОбъектРасчета.Вставить("СохранятьИсториюИзменений", Истина);
	КонецЕсли;
	
	// Добавим данные показателей
	Если НЕ ДобавитьДанныеАналитикПоказателей(ОбъектРасчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Определим документ управления периодом
	Если НЕ ДобавитьДанныеУправленияПериодомСценария(ОбъектРасчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Получим данные периода	
	ДанныеПериода = ПолучитьДанныеПериода(ОбъектРасчета.ПериодОтчета);
	ОбъектРасчета.Вставить("Периодичность", ДанныеПериода.Периодичность);
	ОбъектРасчета.Вставить("ДатаНачала", ДанныеПериода.ДатаНачала);
	Если НЕ ЗначениеЗаполнено(ОбъектРасчета.ПериодОкончания) Тогда
		ОбъектРасчета.ПериодОкончания = ОбъектРасчета.ПериодСценарияОкончание;
	КонецЕсли;
	ДанныеПериода = ПолучитьДанныеПериода(ОбъектРасчета.ПериодОкончания);
	ОбъектРасчета.Вставить("ДатаОкончания", ДанныеПериода.ДатаОкончания);
	
	// Подготовим массив периодов расчета
	МассивПериодов = ПолучитьПодчиненныеПериоды(ОбъектРасчета.ДатаНачала, ОбъектРасчета.ДатаОкончания, ОбъектРасчета.Периодичность);
	ОбъектРасчета.Вставить("МассивПериодов", МассивПериодов);
	
	// Определим правило обработки
	Если НЕ ЗначениеЗаполнено(ОбъектРасчета.ПравилоОбработки) Тогда
		Если Не ДобавитьПравилоОбработки(ОбъектРасчета) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Определим способ формирования отчета
	Если НЕ ЗначениеЗаполнено(ОбъектРасчета.СпособФормированияОтчета) Тогда
		Если НЕ ДобавитьСпособФормированияОтчета(ОбъектРасчета) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Заполним валюты отчета
	Если НЕ ЗначениеЗаполнено(ОбъектРасчета.ОсновнаяВалюта) Тогда
		Если НЕ ДобавитьВалютыОтчета(ОбъектРасчета) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;	

	Возврат Истина;
	
КонецФункции

Функция ПолучитьТаблицуПересчетаПоказателей()

	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если РежимТрассировки Тогда
		//Если ОбъектРасчета.ВидРасчета = "ПоИзмененнымПоЦелевымПоДаннымДляПересчета" Тогда
		//	глТаблицаПересчетаПоказателей = ПолучитьТаблицуРасчетаПоказателейПоДаннымДляПересчета(ОбъектРасчета.ПравилоОбработки);
		//Иначе
			глТаблицаПересчетаПоказателей = ПолучитьТаблицуРасчетаПоказателейПоПравилуРасчета(ОбъектРасчета.ПравилоОбработки);
		//КонецЕсли;
	Иначе
		//Если ОбъектРасчета.ВидРасчета = "ПоИзмененнымПоЦелевымПоДаннымДляПересчета" Тогда
		//	глТаблицаПересчетаПоказателей = УправлениеРасчетомПоказателей.ПолучитьТаблицуРасчетаПоказателейПоДаннымДляПересчета(ОбъектРасчета.ПравилоОбработки);
		//Иначе
			глТаблицаПересчетаПоказателей = УправлениеРасчетомПоказателей.ПолучитьТаблицуРасчетаПоказателейПоПравилуРасчета(ОбъектРасчета.ПравилоОбработки);
		//КонецЕсли;
	КонецЕсли;
	
	ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОбщееВремяПолученияПараметрики = ОбщееВремяПолученияПараметрики + ВремяОкончания - ВремяНачала;
	
	Возврат глТаблицаПересчетаПоказателей;
	
КонецФункции


Функция ВыполнитьРасчет(мОбъектРасчета, ПараметрыРасчета)
	
	// Добавим лог измененных показателей и инициализируем менеджер временных таблиц
	МенеджерВременныхТаблиц = ЗагрузитьЛогИзмененныхПоказателейВМенеджерВТ();
	
	// Заполним Объект расчета и проверим корректность данных
	ИнициализироватьОбъектРасчета();
	Если Не ПодготовитьОбъектРасчета(МенеджерВременныхТаблиц, мОбъектРасчета, ПараметрыРасчета) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	// Выполним расчет по правилу расчета
	Если Не РассчитатьПоПравилуРасчета() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыРасчета.ЗаписыватьДанныеВРегистры Тогда
		Если НЕ ВыполнитьЗаписьЛогаИзмененыхПоказателей(МенеджерВременныхТаблиц, ОбъектРасчета.ИдентификаторСеанса) Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Если НЕ СохранитьЛогИзмененныхПоказателей(МенеджерВременныхТаблиц, ПараметрыРасчета.НомерТранзакции) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина; 	
	
КонецФункции

Функция РассчитатьПоАвтоматическойКонсолидации()

	/////////////////////////////////////////////////////////////////
	// Сформируем массив организаций периметра	
	ТаблицаПериметр = УправлениеРабочимиПроцессамиУХ.ПолучитьДанныеРегламентаОтчета(ОбъектРасчета);
	
	Если ТаблицаПериметр.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'В документе ""%УправленияПериодомСценария%"", к области действия которого относится текущий отчет,
		|		не определен состав периметра для организационной единицы ""%Организация%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%УправленияПериодомСценария%", Строка(ОбъектРасчета.УправлениеПериодом));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(ОбъектРасчета.Организация));
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.РассчитатьПоАвтоматическойКонсолидации", , , ТекстСообщения);
		Возврат Ложь;
		
	КонецЕсли;
	
	// Отсортируем по организациям периметра для удобства восприятия пользователем диагностики
	ТаблицаПериметр.Сортировать("ИндивидуальнаяОрганизация");
	
	МассивОрганизаций = Новый Массив;
	Для Каждого стрПериметр Из ТаблицаПериметр Цикл
		Если стрПериметр.ВидОтношенияКГруппе = ПредопределенноеЗначение("Перечисление.ВидыОтношенийКГруппе.Материнское")
			ИЛИ стрПериметр.ВидОтношенияКГруппе = ПредопределенноеЗначение("Перечисление.ВидыОтношенийКГруппе.Дочернее") Тогда
			МассивОрганизаций.Добавить(стрПериметр.ИндивидуальнаяОрганизация);
		КонецЕсли;
	КонецЦикла;
	
	////////////////////////////////////////////////////////////
	// Получаем структуру расчета показателей	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Если РежимТрассировки Тогда
		глТаблицаПересчетаПоказателей = ПолучитьТаблицуРасчетаПоказателейПоАвтоматическойКонсолидации(ОбъектРасчета.ПравилоОбработки, МассивОрганизаций);
	Иначе		
		глТаблицаПересчетаПоказателей = УправлениеРасчетомПоказателей.ПолучитьТаблицуРасчетаПоказателейПоАвтоматическойКонсолидации(ОбъектРасчета.ПравилоОбработки, МассивОрганизаций);
	КонецЕсли;
	ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОбщееВремяПолученияПараметрики = ОбщееВремяПолученияПараметрики + ВремяОкончания - ВремяНачала;

	////////////////////////////////////////////////////////////
	// Выполним расчет
	ОтборОпераций = Новый Массив;
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ПолучениеТаблицыОперандов);
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ПолучениеДанныхТекущегоПериметра);
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.РасчетИтоговыхЗначенийПоказателей);
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ПолучениеЗначенийПотребителей);
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ИтоговаяТаблицаРасчетаПоказателей);
	
	Если НЕ ВыполнитьРасчетЗапросов(глТаблицаПересчетаПоказателей, ОтборОпераций) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Уничтожим временные таблицы
	УничтожитьВременныеТаблицыРасчета();
	
	Возврат Истина;
	
КонецФункции

Функция РассчитатьПоПравилуРасчета()
	
	// Если необходимо, сначала выполним расчет по консолидированным организациям
	Если ОбъектРасчета.СпособФормированияОтчета = ПредопределенноеЗначение("Перечисление.СпособыФормированияОтчетов.АвтоматическиКонсолидация") Тогда
		Если Не РассчитатьПоАвтоматическойКонсолидации() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////
	// Получаем структуру расчета показателей	
	глТаблицаПересчетаПоказателей = ПолучитьТаблицуПересчетаПоказателей();
	
	////////////////////////////////////////////////////////////
	// Вызываем процедуру ДоПересчетаПоПравилу
	Если Не ВыполнитьПроцедуруДоВычисления() Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	////////////////////////////////////////////////////////////
	// Выполним расчет по формулам	
	ОтборОпераций = Новый Массив;
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ПолучениеТаблицыОперандов);
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ВнешниеТаблицы);
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ПолучениеЗначенийОперандов);
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.РасчетВыраженийОперандов);
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ТрансформацияОперандов);
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.РасчетВыраженийОперандовЗависимыхПоПериоду);
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.РасчетИтоговыхЗначенийПоказателей);
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ПолучениеЗначенийПотребителей);
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ИтоговаяТаблицаРасчетаПоказателей);
	
	Если ОбъектРасчета.ДополнительныеВалюты.Количество() = 0 Тогда
		ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ЗаписьВЛогИзмененныхПоказателей);
	Иначе
		ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ЗаписьВЛогИзмененныхПоказателейСДопВалютами);
	КонецЕсли;

	Если НЕ ВыполнитьРасчетЗапросов(глТаблицаПересчетаПоказателей, ОтборОпераций) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	////////////////////////////////////////////////////////////
	// Вызываем процедуру ПослеПересчетаПоПравилу
	Если НЕ ВыполнитьПроцедуруПослеВычисления() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Уничтожим временные таблицы
	УничтожитьВременныеТаблицыРасчета();
	
	Возврат Истина;
	
КонецФункции


Функция ДобавитьИзмененныеПоказателиВЛог()
	
	////////////////////////////////////////////////////////////
	// Получим параметрику расчета	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Если РежимТрассировки Тогда
		глТаблицаПересчетаПоказателей = ПолучитьТаблицуУстановкиИзмененныхЗначенийПоказателей(ОбъектРасчета);
	Иначе		
		глТаблицаПересчетаПоказателей = УправлениеРасчетомПоказателей.ПолучитьТаблицуУстановкиИзмененныхЗначенийПоказателей(ОбъектРасчета);
	КонецЕсли;
	ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОбщееВремяПолученияПараметрики = ОбщееВремяПолученияПараметрики + ВремяОкончания - ВремяНачала;
	
	
	////////////////////////////////////////////////////////////
	// Добавим рассчитанные показатели в лог рассчитанных показателей, выполнив необходимые расчеты	
	ОтборОпераций = Новый Массив;
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ПолучениеИзмененныхПоказателей);
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ЗаписьВЛогИзмененныхПоказателей);
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ЗаписьВЛогИзмененныхПоказателейСДопВалютами);
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ПолучениеДанныхВалютнойАналитики);

	Если НЕ ВыполнитьРасчетЗапросов(глТаблицаПересчетаПоказателей, ОтборОпераций) Тогда
		Возврат Ложь;
	КонецЕсли;

	// Уничтожим временные таблицы
	УничтожитьВременныеТаблицыРасчета();
		
	Возврат Истина;
	
КонецФункции

Функция РассчитатьПоИзмененнымПоказателям(глТаблицаПересчетаПоказателей = Неопределено)

	////////////////////////////////////////////////////////////
	// Выполним расчет показателей	
	ОтборОпераций = Новый Массив;
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ПолучениеТаблицыОперандов);
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ПолучениеЗначенийОперандов);
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.РасчетВыраженийОперандов);
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ТрансформацияОперандов);	
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.РасчетИтоговыхЗначенийПоказателей);
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ПолучениеЗначенийПотребителей);
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ИтоговаяТаблицаРасчетаПоказателей);

	// Заменим периоды, если нет рекурсивных сдвигов по периоду
	Если глТаблицаПересчетаПоказателей.Найти(Перечисления.ВидыОперацийРасчетаПоказателей.РасчетВыраженийОперандовЗависимыхПоПериоду, "ВидОперацииРасчета") = Неопределено Тогда
		тВсеПериоды = Неопределено;
		Если ТипЗнч(ОбъектРасчета.тИзмененныеПоказатели) = Тип("ТаблицаЗначений") Тогда	
			тВсеПериоды = ОбъектРасчета.тИзмененныеПоказатели.Скопировать(,"ПериодОтчета");
		КонецЕсли;
		Если ТипЗнч(ОбъектРасчета.тЦелевыеПоказатели) = Тип("ТаблицаЗначений") Тогда
			Если тВсеПериоды = Неопределено Тогда
				тВсеПериоды = ОбъектРасчета.тЦелевыеПоказатели.Скопировать(,"ПериодОтчета");
			Иначе
				Для Каждого стрЦелевойПоказатель Из ОбъектРасчета.тЦелевыеПоказатели Цикл
					тВсеПериоды.Добавить(стрЦелевойПоказатель.ПериодОтчета);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		тВсеПериоды.Свернуть("ПериодОтчета");		
		ОбъектРасчета.МассивПериодов = тВсеПериоды.ВыгрузитьКолонку("ПериодОтчета");
	Иначе
		ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.РасчетВыраженийОперандовЗависимыхПоПериоду);
	КонецЕсли;	
	
	// Добавим записи из таблицы измененных показателей в лог измененных показателей
	Если ОбъектРасчета.ДополнительныеВалюты.Количество() = 0 Тогда
		ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ЗаписьВЛогИзмененныхПоказателей);
	Иначе
		ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ЗаписьВЛогИзмененныхПоказателейСДопВалютами);
	КонецЕсли;

	Если НЕ ВыполнитьРасчетЗапросов(глТаблицаПересчетаПоказателей, ОтборОпераций) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции


Процедура ИнициализироватьТаблицуУстановкиЗначенийПоказателей()
	
	Если ОбъектРасчета.Свойство("ТаблицаУстановкиЗначенийПоказателей") Тогда
		
		ОбъектРасчета.ТаблицаУстановкиЗначенийПоказателей.Очистить();
		
	Иначе
		
		СписокКолонок = "Показатель,КодВФормуле,ПериодОтчета,АналитикаВалюта,УровеньРасчета";
		Для Сч = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			СписокКолонок = СписокКолонок + ",Аналитика" + Сч;
		КонецЦикла;
		ТаблицаУстановкиЗначенийПоказателей = ЗначенияОперандов.ВыгрузитьКолонки(СписокКолонок);
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("Число"));
		Массив.Добавить(Тип("Дата"));
		Массив.Добавить(Тип("Булево"));
		Массив.Добавить(Тип("Строка"));
		ОписаниеТипа = Новый ОписаниеТипов(Массив,,,Новый КвалификаторыЧисла(18,5),Новый КвалификаторыСтроки(1000),Новый КвалификаторыДаты(ЧастиДаты.Дата));
		ТаблицаУстановкиЗначенийПоказателей.Колонки.Добавить("Значение",ОписаниеТипа);
		
		ОбъектРасчета.Вставить("ТаблицаУстановкиЗначенийПоказателей",ТаблицаУстановкиЗначенийПоказателей);
		
	КонецЕсли;

КонецПроцедуры

Функция ВыполнитьУстановкуЗначенийПоказателей()
	
	// Новые абсолютные значения показателей в таблице ТаблицаУстановкиЗначенийПоказателей
	// Необходимо теперь рассчитать дельты значений показателей
	// и добавить их в таблицу втЛогИзмененныхПоказателей
	
	Если Не ОбъектРасчета.Свойство("ТаблицаУстановкиЗначенийПоказателей") 
		ИЛИ ОбъектРасчета.ТаблицаУстановкиЗначенийПоказателей.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Подготовим структуру для установки новых значений показателей
	Если РежимТрассировки Тогда
		глТаблицаПересчетаПоказателей = ПолучитьТаблицуРасчетаПоказателейДляУстановкиНовыхЗначенийПоказателей(ОбъектРасчета,ОбъектРасчета.ТаблицаУстановкиЗначенийПоказателей);
	Иначе
		глТаблицаПересчетаПоказателей = УправлениеРасчетомПоказателей.ПолучитьТаблицуРасчетаПоказателейДляУстановкиНовыхЗначенийПоказателей(ОбъектРасчета,ОбъектРасчета.ТаблицаУстановкиЗначенийПоказателей);
	КонецЕсли;
	
	// Выполним расчет
	ОтборОпераций = Новый Массив;
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ПолучениеТаблицыОперандов);
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ПолучениеЗначенийПотребителей);
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.РасчетИтоговыхЗначенийПоказателей);
	ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ИтоговаяТаблицаРасчетаПоказателей);
	
	Если ОбъектРасчета.ДополнительныеВалюты.Количество() = 0 Тогда
		ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ЗаписьВЛогИзмененныхПоказателей);
	Иначе
		ОтборОпераций.Добавить(Перечисления.ВидыОперацийРасчетаПоказателей.ЗаписьВЛогИзмененныхПоказателейСДопВалютами);
	КонецЕсли;
	
	Если НЕ ВыполнитьРасчетЗапросов(глТаблицаПересчетаПоказателей, ОтборОпераций) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УничтожитьВременныеТаблицыРасчета();

	// Очистим таблицу с значениям показателей для установки
	ОбъектРасчета.ТаблицаУстановкиЗначенийПоказателей.Очистить();

	Возврат Истина;
	
КонецФункции

Функция ВыполнитьПроцедуруДоВычисления()
	
	ПроцедураВычисления = ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(ОбъектРасчета.ПравилоОбработки,"ПроцедураВычисления");
	Если ПустаяСтрока(ПроцедураВычисления) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УничтожитьВременныеТаблицыРасчета();
	ИнициализироватьТаблицуУстановкиЗначенийПоказателей();
	
	Попытка
		// АПК:487-выкл Выполняется в контексте данной обработки
		Выполнить(ПроцедураВычисления);
		// АПК:487-вкл
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить процедуру вычисления: %ПроцедураВычисления%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПроцедураВычисления%", ПроцедураВычисления);
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ВыполнитьПроцедуруДоВычисления", , , ТекстСообщения, ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;

	ВыполнитьУстановкуЗначенийПоказателей();
		
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьПроцедуруПослеВычисления()
	
	ПроцедураВычисления = ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(ОбъектРасчета.ПравилоОбработки,"ПроцедураПослеВычисления");
	Если ПустаяСтрока(ПроцедураВычисления) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УничтожитьВременныеТаблицыРасчета();
	ИнициализироватьТаблицуУстановкиЗначенийПоказателей();
		
	Попытка
		// АПК:487-выкл Выполняется в контексте данной обработки
		Выполнить(ПроцедураВычисления);
		// АПК:487-вкл
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить процедуру вычисления: %ПроцедураВычисления%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПроцедураВычисления%", ПроцедураВычисления);
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ВыполнитьПроцедуруДоВычисления", , , ТекстСообщения, ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	ВыполнитьУстановкуЗначенийПоказателей();
			
	Возврат Истина;
	
КонецФункции


Функция ВыполнитьРасчетЗапросов(глТаблицаПересчетаПоказателей, ОтборОпераций) 
	
	МенеджерВременныхТаблиц 					= ОбъектРасчета.МенеджерВременныхТаблиц;
	МассивПериодов 								= ОбъектРасчета.МассивПериодов;	
	тТрассировкаРасчета 						= ОбъектРасчета.тТрассировкаРасчета;
	Периодичность 								= ОбъектРасчета.Периодичность;
	
	ЗапросДанные = Новый Запрос;
	ЗапросДанные.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Для Каждого СтрТаблица Из глТаблицаПересчетаПоказателей Цикл
		
		Если ОтборОпераций.Найти(СтрТаблица.ВидОперацииРасчета) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстПодзапросов = СтрТаблица.ТекстПодзапросов;
		Если ТекстПодзапросов = "" Тогда
			Продолжить;
		КонецЕсли; 
		
		ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ЗапросДанные.Параметры.Очистить();
	
		// Установим параметры запроса				
		Если НЕ СтрТаблица.тПараметрыПакета = Неопределено Тогда
			Для Каждого ПараметрОтчета Из СтрТаблица.тПараметрыПакета Цикл
				
				ИмяОтбора = ПараметрОтчета.ИмяОтбора; 
				Если ПараметрОтчета.ТипОтбора = "РассчитанныеЗначения" Тогда
					
					ЗначениеПараметра = РассчитатьЗначенияВКоде(ПараметрОтчета.ЗначениеОтбора,тТрассировкаРасчета);
					ТекстПодзапросов = ТекстПодзапросов + Символы.ПС + ";" + Символы.ПС + Символы.ПС + "УНИЧТОЖИТЬ втРассчитанныеЗначения";
					
				ИначеЕсли ПараметрОтчета.ТипОтбора = "РассчитанныеЗначенияПоПериодам" Тогда
					
					ЗначениеПараметра = РассчитатьЗначенияПоПериодам(ПараметрОтчета.ЗначениеОтбора);
						
				ИначеЕсли ПараметрОтчета.ТипОтбора = "ПериодичностьОтчета" Тогда
					
					ЗначениеПараметра = Периодичность;
					ТекстПодзапросов = СтрЗаменить(ТекстПодзапросов,"%ПериодичностьОтчета%",Строка(Периодичность));
					
				ИначеЕсли ПараметрОтчета.ТипОтбора = "ДополнительныеВалюты" Тогда
					
					ЗначениеПараметра = ОбъектРасчета.ДополнительныеВалюты.ВыгрузитьКолонку("Валюта");
					ЗначениеПараметра.Добавить(ОбъектРасчета.ОсновнаяВалюта);
					
				ИначеЕсли ПараметрОтчета.ТипОтбора = "ДанныеВнешнийИсточник" Тогда
					
					ЗначениеПараметра = ПолучитьВнешниеДанные(ПараметрОтчета.ЗначениеОтбора,МассивПериодов);
					
				ИначеЕсли ПараметрОтчета.ТипОтбора = "ДанныеПроизвольныйЗапрос" Тогда
					
					ЗначениеПараметра = ВыполнитьПроизвольныеЗапросы(ПараметрОтчета.ЗначениеОтбора,МассивПериодов);
					
				ИначеЕсли ПараметрОтчета.ТипОтбора = "ДанныеПроизвольныйКод" Тогда
					
					ЗначениеПараметра = ВыполнитьПроизвольныйКод(ПараметрОтчета.ЗначениеОтбора,МассивПериодов);
					
				ИначеЕсли ПараметрОтчета.ТипОтбора = "СоответствиеПериодов" Тогда
					
					ЗначениеПараметра = ПолучитьСоответствиеПериодов(МассивПериодов,ПараметрОтчета.ЗначениеОтбора);
					
				ИначеЕсли ПараметрОтчета.ТипОтбора = "КонтекстВызоваЗаполнения" Тогда
					
					ЗначениеПараметра = ПолучитьЗначениеИзКонтекста(ПараметрОтчета.ЗначениеОтбора);
					
				ИначеЕсли ПараметрОтчета.ТипОтбора = "НомерТранзакции" Тогда
					
					ЗначениеПараметра = ОбъектРасчета.НомерТранзакции;
					
				ИначеЕсли ПараметрОтчета.ТипОтбора = "ПравилоОбработки" Тогда
					
					ЗначениеПараметра = ОбъектРасчета.ПравилоОбработки;
					
				ИначеЕсли ПараметрОтчета.ТипОтбора = "ВидОтчета" Тогда
					
					ЗначениеПараметра = ОбъектРасчета.ВидОтчета;	
					
				ИначеЕсли ПараметрОтчета.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчета
					Или ПараметрОтчета.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчетаСоСдвигом
					Или ПараметрОтчета.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ВышестоящийПериод
					Или ПараметрОтчета.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.АналогичныйПериодГодаСоСдвигом
					Или ПараметрОтчета.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.АналогичныйПериодПредыдущегоГода
					Тогда
					
					ЗначениеПараметра = Новый Массив;
					Для Каждого Период Из МассивПериодов Цикл
						СписокПериодов = РассчитатьПериодыПоОтбору(ПараметрОтчета,Период);
						Для Каждого нПериод Из СписокПериодов Цикл
							ЗначениеПараметра.Добавить(нПериод.Значение);
						КонецЦикла;
					КонецЦикла;
					
				ИначеЕсли ПараметрОтчета.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчета
					Или ПараметрОтчета.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчетаСоСдвигом
					Или ПараметрОтчета.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаВышестоящегоПериода
					Или ПараметрОтчета.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГода
					Или ПараметрОтчета.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГодаСоСдвигом
					Тогда
					ЗначениеПараметра = ПолучитьЗначениеПараметра(ПараметрОтчета,МассивПериодов.Получить(0));	
					
				ИначеЕсли ПараметрОтчета.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчета 
					Или ПараметрОтчета.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчетаСоСдвигом
					Или ПараметрОтчета.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаВышестоящегоПериода
					Или ПараметрОтчета.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГода
					Или ПараметрОтчета.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГодаСоСдвигом
					Тогда
					ЗначениеПараметра = ПолучитьЗначениеПараметра(ПараметрОтчета,МассивПериодов.Получить(МассивПериодов.Количество()-1));
					
				Иначе					
					ЗначениеПараметра = ПолучитьЗначениеПараметра(ПараметрОтчета,ОбъектРасчета);					
				КонецЕсли;
				
				ЗапросДанные.УстановитьПараметр(ИмяОтбора,ЗначениеПараметра)
				
			КонецЦикла;	
		КонецЕсли;
		
		ЗапросДанные.Текст = ТекстПодзапросов;
		
		тЗаписьЛогаВыполнения = тТрассировкаРасчета.Добавить();
		ЗаполнитьЗначенияСвойств(тЗаписьЛогаВыполнения,СтрТаблица);
		
		ИтоговаяТаблицаРасчетаПоказателей = СтрТаблица.ВидОперацииРасчета = Перечисления.ВидыОперацийРасчетаПоказателей.ИтоговаяТаблицаРасчетаПоказателей
			И НЕ ОбъектРасчета.ЗаписыватьДанныеВРегистры;
		
		// Выполним запросы
		Попытка
			Если СтрТаблица.ВыгружатьРезультатВТаблицу 
				ИЛИ РежимТрассировки
				ИЛИ ИтоговаяТаблицаРасчетаПоказателей Тогда	
				Если СтрНайти(ЗапросДанные.Текст,"ПОМЕСТИТЬ")>0 Тогда
					МассивРезультатов = ЗапросДанные.ВыполнитьПакетСПромежуточнымиДанными();
					// Выгрузим результат только последнего запроса с данными
					Сч = МассивРезультатов.Количество()-1;
					Пока Сч >=0 Цикл
						Если МассивРезультатов.Получить(Сч) <> Неопределено Тогда
							тЗаписьЛогаВыполнения.тРезультатВыполненияЗапроса = МассивРезультатов.Получить(Сч).Выгрузить();
							Прервать;
						Иначе
							Сч = Сч - 1;
						КонецЕсли;
					КонецЦикла;
				Иначе	
					тЗаписьЛогаВыполнения.тРезультатВыполненияЗапроса = ЗапросДанные.Выполнить().Выгрузить();
				КонецЕсли;
			Иначе
				ЗапросДанные.Выполнить();
			КонецЕсли;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = НСтр("ru = 'Не удалось выполнить запрос ""%ИмяЗапроса%"". %РасшифровкаОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяЗапроса%", СтрТаблица.КомментарийКПакету);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РасшифровкаОшибки%", СформироватьРасшифровкуОшибки(ИнформацияОбОшибке, СтрТаблица));
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ВыполнитьРасчетЗапросов", , , ТекстСообщения, ТекстОшибки);
			Возврат Ложь;
		КонецПопытки;
		
		// Сохраним измененные показатели, это это запрос помещения измененных показателей в лог
		Если ИтоговаяТаблицаРасчетаПоказателей Тогда
			ДобавитьВТаблицуРассчитанныхПоказателей(тЗаписьЛогаВыполнения.тРезультатВыполненияЗапроса);			
		КонецЕсли;
		
		ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		тЗаписьЛогаВыполнения.ВремяМс = ВремяОкончания - ВремяНачала;
	
	КонецЦикла;
	
	Возврат Истина;
		
КонецФункции

Функция СформироватьРасшифровкуОшибки(ИнформацияОбОшибке, СтрТаблица)
	
	РасшифровкаОшибки = "";	
	
	Если СтрНайти(ИнформацияОбОшибке, "деление на ноль") // Деление на ноль 
		ИЛИ СтрТаблица.ВидОперацииРасчета = Перечисления.ВидыОперацийРасчетаПоказателей.РасчетВыраженийОперандов // Несуществующий источник данных	
		Тогда
		
		// Попробуем вычислить показатель, расчет которого привел к ошибке
		Если НЕ СтрТаблица.тПараметрыПакета = Неопределено Тогда
			Для Каждого ПараметрОтчета Из СтрТаблица.тПараметрыПакета Цикл
				Если ТипЗнч(ПараметрОтчета.ЗначениеОтбора) = Тип("СправочникСсылка.ПоказателиОтчетов") Тогда
					Если РасшифровкаОшибки = "" Тогда
						РасшифровкаОшибки = НСтр("ru = '
						|Ошибка возникла при расчете одного из показателей: """ + ПараметрОтчета.ЗначениеОтбора + """'");
					Иначе
						РасшифровкаОшибки = РасшифровкаОшибки + ", """ + ПараметрОтчета.ЗначениеОтбора + """";
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РасшифровкаОшибки;
		
КонецФункции

Функция РассчитатьЗначенияПоПериодам(тЗависимыеПоПериодуПоказатели)
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	МассивПериодов 				= ОбъектРасчета.МассивПериодов;
	Периодичность               = ОбъектРасчета.Периодичность;
	тТрассировкаРасчета 		= ОбъектРасчета.тТрассировкаРасчета;
	
	тИтоговыхЗначенийОперандов	= ЗначенияОперандов.ВыгрузитьКолонки();
	тТекущихЗначенийОперандов 	= ЗначенияОперандов.ВыгрузитьКолонки();
	
	ПотребителиТекущегоУровня = тЗависимыеПоПериодуПоказатели.Скопировать(); 
	ПотребителиТекущегоУровня.Свернуть("Потребитель,ТипПотребителя,Процедура");
	
	Для Каждого СтрПериод Из МассивПериодов Цикл
		
		ОбъектРасчета.ПериодОтчета = СтрПериод;
		
		Для Каждого СтрокаПотребитель Из ПотребителиТекущегоУровня Цикл
			
			тТекущихЗначенийОперандов.Очистить();		
			
			ОперандыТекущейФормулы = тЗависимыеПоПериодуПоказатели.НайтиСтроки(Новый Структура("Потребитель", СтрокаПотребитель.Потребитель));			
			Для Каждого СтрОперанд Из ОперандыТекущейФормулы Цикл
				
				// Выполним расчет отбора по периоду
				СписокРасчетныхПериодов = Новый Массив;				
				тОтборПоПериоду = СтрОперанд.ОтборПоПериоду;
				Если тОтборПоПериоду.Количество() = 0 Тогда
					// Нет отбора по периоду
					СписокРасчетныхПериодов.Добавить(СтрПериод);
				Иначе
					Для Каждого СтрокаОтбор Из тОтборПоПериоду Цикл					
						СписокПериодов = РассчитатьПериодыПоОтбору(СтрокаОтбор,СтрПериод);
						Для Каждого РасчетныйПериод Из СписокПериодов Цикл
							СписокРасчетныхПериодов.Добавить(РасчетныйПериод.Значение);
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;				
				
				// Цикл по полученным периодам
				Для Каждого РасчетныйПериод Из СписокРасчетныхПериодов Цикл				
									
					Если МассивПериодов.Найти(РасчетныйПериод) = Неопределено
						ИЛИ (СтрОперанд.ЭтоОперандТекущегоПериода И СтрОперанд.УровеньРасчетаОперанда = 1) Тогда
						
						// Если период выходит за текущий срез - то данные брать из таблицы мЗначениеОперандов0
						тВременнаяТаблица = тТрассировкаРасчета.Найти("СГРУППИРОВАННЫЕ И ПРЕОБРАЗОВАННЫЕ ДАННЫЕ ОПЕРАНДОВ УРОВНЯ - 0","КомментарийКПакету");
						
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("КодВФормуле",СтрОперанд.КодВФормуле);
						СтруктураПоиска.Вставить("ПериодОтчета",РасчетныйПериод);						
						ЗначенияОперанда = тВременнаяТаблица.тРезультатВыполненияЗапроса.НайтиСтроки(СтруктураПоиска);		 
						 
					ИначеЕсли СтрОперанд.ЭтоОперандТекущегоПериода Тогда	
						
						// Если период не выходит за текущий срез, но операнд оборотный, то искать в таблице втЗначенияОперандов[ТекущийУровень]
						тВременнаяТаблица = тТрассировкаРасчета.Найти("СГРУППИРОВАННЫЕ И ПРЕОБРАЗОВАННЫЕ ДАННЫЕ ОПЕРАНДОВ УРОВНЯ - "
							+ Формат(СтрОперанд.УровеньРасчетаОперанда-1,"ЧГ=0;ЧН=0"),"КомментарийКПакету");
						
						Если тВременнаяТаблица = Неопределено Тогда
							ЗначенияОперанда = тИтоговыхЗначенийОперандов.НайтиСтроки(Новый Структура("Показатель,ПериодОтчета",СтрОперанд.ПоказательОперанд,РасчетныйПериод));
						Иначе
							СтруктураПоиска = Новый Структура;
							СтруктураПоиска.Вставить("Показатель",СтрОперанд.ПоказательОперанд);
							СтруктураПоиска.Вставить("УИДГруппыОтборов",СтрОперанд.УИДГруппыОтборов);
							СтруктураПоиска.Вставить("УИДГруппыТрансформации",СтрОперанд.УИДГруппыТрансформации);
							СтруктураПоиска.Вставить("ПериодОтчета",РасчетныйПериод);						
							ЗначенияОперанда = тВременнаяТаблица.тРезультатВыполненияЗапроса.НайтиСтроки(СтруктураПоиска);
						КонецЕсли;					
						
					Иначе
						// Иначе искать в  логе тРассчитанныеЗначенияПоПериодам с отбором по периоду и показателю. 
						ЗначенияОперанда = тИтоговыхЗначенийОперандов.НайтиСтроки(Новый Структура("Показатель,ПериодОтчета",СтрОперанд.ПоказательОперанд,РасчетныйПериод));						
					КонецЕсли;
					
					Если ЗначенияОперанда.Количество() = 0 Тогда
						НСтр = тТекущихЗначенийОперандов.Добавить();
						НСтр.КодВФормуле = СтрОперанд.КодВФормуле;
						НСтр.ПериодОтчета = СтрПериод;
					Иначе
						Для Каждого Стр Из ЗначенияОперанда Цикл
							НСтр = тТекущихЗначенийОперандов.Добавить();
							ЗаполнитьЗначенияСвойств(НСтр,Стр);
							НСтр.КодВФормуле = СтрОперанд.КодВФормуле;
							НСтр.ПериодОтчета = СтрПериод;
						КонецЦикла;	
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;	// По операндам
			
			тТекущихЗначенийОперандовТПН = ТранспонироватьТаблицуОперандов(тТекущихЗначенийОперандов,ОперандыТекущейФормулы);
			
			// Рассчитаем и запишем в таблицу новое значение показателя					
			Для Каждого СтрДляРасчета Из тТекущихЗначенийОперандовТПН Цикл
				
				ТекстФормулы = СтрокаПотребитель.Процедура;
				Для Каждого СтрОперандФормулы Из ОперандыТекущейФормулы Цикл
					Значение = СтрДляРасчета[СтрОперандФормулы.КодВФормуле];
					Если СтрОперандФормулы.ТипПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
						Значение = Формат(Значение,"ЧРД=.; ЧН=; ЧГ=0");
						Значение = СтрЗаменить(Значение,",",".");
					ИначеЕсли СтрОперандФормулы.ТипПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда
						Если Значение = ИСТИНА Тогда
							Значение = "ИСТИНА";
						Иначе
							Значение = "ЛОЖЬ";
						КонецЕсли;
					ИначеЕсли СтрОперандФормулы.ТипПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда
						Если ЗначениеЗаполнено(Значение) Тогда
							Значение = "ДАТА(" 
								+ Сред(Значение,7,4) + "," 
								+ Сред(Значение,4,2) + ","
								+ Лев(Значение,2) + ")";
						Иначе
							Значение = "ДАТА(1,1,1)";
						КонецЕсли;
					Иначе
						Значение = """" + Значение + """";
					КонецЕсли;
					ТекстФормулы = СтрЗаменить(ТекстФормулы,"["+СтрОперандФормулы.КодВФормуле+"]",Значение);
				КонецЦикла;	
				
				НоваяРасчетнаяСтрока = тИтоговыхЗначенийОперандов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяРасчетнаяСтрока,СтрДляРасчета);
				НоваяРасчетнаяСтрока.ПериодОтчета = СтрПериод;
				НоваяРасчетнаяСтрока.Показатель = СтрокаПотребитель.Потребитель;
				Если СтрокаПотребитель.ТипПотребителя = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
					НоваяРасчетнаяСтрока.Значение = ВычислитьВыражение(ТекстФормулы); 
				Иначе	
					НоваяРасчетнаяСтрока.ЗначениеНечисловое = ВычислитьВыражение(ТекстФормулы);
				КонецЕсли;				
				
			КонецЦикла;	
			
		КонецЦикла; // По потребителям
		
	КонецЦикла; // По периодам
	
	Возврат тИтоговыхЗначенийОперандов;
		
КонецФункции

Функция ТранспонироватьТаблицуОперандов(тТекущихЗначенийОперандовФормулы,ОперандыТекущейФормулы)
	
	Если тТекущихЗначенийОперандовФормулы.Количество()<1000 Тогда // Быстрее транспонировать кодом
		
		СтрокаРесурсов = "";
		тТаблицаТекущихЗначенийОперандовФормулы = тТекущихЗначенийОперандовФормулы.Скопировать();
		Для Каждого СтрОперанд Из ОперандыТекущейФормулы Цикл
			Если СтрОперанд.ТипПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда	
				тТаблицаТекущихЗначенийОперандовФормулы.Колонки.Добавить(СтрОперанд.КодВФормуле,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
			ИначеЕсли СтрОперанд.ТипПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда	                                         				                               
				тТаблицаТекущихЗначенийОперандовФормулы.Колонки.Добавить(СтрОперанд.КодВФормуле,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
            ИначеЕсли СтрОперанд.ТипПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда	                                         				                               
				тТаблицаТекущихЗначенийОперандовФормулы.Колонки.Добавить(СтрОперанд.КодВФормуле,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			ИначеЕсли СтрОперанд.ТипПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка Тогда	                                         				                               
				тТаблицаТекущихЗначенийОперандовФормулы.Колонки.Добавить(СтрОперанд.КодВФормуле,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(1024));
			КонецЕсли;
			СтрокаРесурсов = СтрокаРесурсов+СтрОперанд.КодВФормуле+",";
		КонецЦикла;	
		
		Для Каждого СтрЗначений Из тТаблицаТекущихЗначенийОперандовФормулы Цикл 			
			СтрЗначений[СтрЗначений.КодВФормуле] = СтрЗначений.Значение;			
		КонецЦикла;	
		
		тТаблицаТекущихЗначенийОперандовФормулы.Свернуть("ПериодОтчета,Аналитика1,Аналитика2,Аналитика3,Аналитика4,Аналитика5,Аналитика5,АналитикаВалюта",
			Лев(СтрокаРесурсов,СтрДлина(СтрокаРесурсов)-1));		
		
	Иначе
			
		ТекстПолейВыбора = "";
		ТекстПолейВыбораТранспонированный = "";
		
		Для Каждого СтрОперанд Из ОперандыТекущейФормулы Цикл
			Если СтрОперанд.ТипПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
				ТекстПолейВыбора = ТекстПолейВыбора+"ВЫБОР КОГДА ТаблицаТекущихЗначенийОперандовФормулы.КодВФормуле = "+""""+СтрОперанд.КодВФормуле+""""+"
				|	ТОГДА ТаблицаТекущихЗначенийОперандовФормулы.Значение ИНАЧЕ 0 КОНЕЦ КАК "+СтрОперанд.КодВФормуле+",";
			Иначе	
				ТекстПолейВыбора = ТекстПолейВыбора+"ВЫБОР КОГДА ТаблицаТекущихЗначенийОперандовФормулы.КодВФормуле = "+СтрОперанд.КодВФормуле+"
				|	ТОГДА ТаблицаТекущихЗначенийОперандовФормулы.ЗначениеНечисловое ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ КАК "+СтрОперанд.КодВФормуле+",";
			КонецЕсли;			
			ТекстПолейВыбораТранспонированный = ТекстПолейВыбораТранспонированный+"МАКСИМУМ(ТаблицаТекущихЗначенийОперандовФормулы."+СтрОперанд.КодВФормуле+") КАК "+СтрОперанд.КодВФормуле+",";			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ТаблицаТекущихЗначенийОперандовФормулы.КодВФормуле КАК КодВФормуле,
		|	ТаблицаТекущихЗначенийОперандовФормулы.ТипПоказателя КАК ТипПоказателя,
		|	ТаблицаТекущихЗначенийОперандовФормулы.Значение КАК Значение,
		|	ТаблицаТекущихЗначенийОперандовФормулы.ЗначениеНечисловое КАК ЗначениеНечисловое,
		|	ТаблицаТекущихЗначенийОперандовФормулы.ПериодОтчета КАК ПериодОтчета,
		|	ТаблицаТекущихЗначенийОперандовФормулы.Аналитика1 КАК Аналитика1,
		|	ТаблицаТекущихЗначенийОперандовФормулы.Аналитика2 КАК Аналитика2,
		|	ТаблицаТекущихЗначенийОперандовФормулы.Аналитика3 КАК Аналитика3,
		|	ТаблицаТекущихЗначенийОперандовФормулы.Аналитика4 КАК Аналитика4,
		|	ТаблицаТекущихЗначенийОперандовФормулы.Аналитика5 КАК Аналитика5,
		|	ТаблицаТекущихЗначенийОперандовФормулы.Аналитика6 КАК Аналитика6,
		|	ТаблицаТекущихЗначенийОперандовФормулы.АналитикаВалюта КАК АналитикаВалюта
		|ПОМЕСТИТЬ втТаблицаТекущихЗначенийОперандовФормулы
		|ИЗ
		|	&ТаблицаТекущихЗначенийОперандовФормулы КАК ТаблицаТекущихЗначенийОперандовФормулы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|"+ТекстПолейВыбора+"
		|	ТаблицаТекущихЗначенийОперандовФормулы.ПериодОтчета КАК ПериодОтчета,
		|	ТаблицаТекущихЗначенийОперандовФормулы.Аналитика1 КАК Аналитика1,
		|	ТаблицаТекущихЗначенийОперандовФормулы.Аналитика2 КАК Аналитика2,
		|	ТаблицаТекущихЗначенийОперандовФормулы.Аналитика3 КАК Аналитика3,
		|	ТаблицаТекущихЗначенийОперандовФормулы.Аналитика4 КАК Аналитика4,
		|	ТаблицаТекущихЗначенийОперандовФормулы.Аналитика5 КАК Аналитика5,
		|	ТаблицаТекущихЗначенийОперандовФормулы.Аналитика6 КАК Аналитика6,
		|	ТаблицаТекущихЗначенийОперандовФормулы.АналитикаВалюта КАК АналитикаВалюта
		|ПОМЕСТИТЬ втТаблицаТекущихЗначенийОперандовФормулыТранспонированная
		|ИЗ
		|	втТаблицаТекущихЗначенийОперандовФормулы КАК ТаблицаТекущихЗначенийОперандовФормулы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|"+ТекстПолейВыбораТранспонированный+"
		|	МАКСИМУМ(ТаблицаТекущихЗначенийОперандовФормулы.ПериодОтчета) КАК ПериодОтчета,
		|	ТаблицаТекущихЗначенийОперандовФормулы.Аналитика1 КАК Аналитика1,
		|	ТаблицаТекущихЗначенийОперандовФормулы.Аналитика2 КАК Аналитика2,
		|	ТаблицаТекущихЗначенийОперандовФормулы.Аналитика3 КАК Аналитика3,
		|	ТаблицаТекущихЗначенийОперандовФормулы.Аналитика4 КАК Аналитика4,
		|	ТаблицаТекущихЗначенийОперандовФормулы.Аналитика5 КАК Аналитика5,
		|	ТаблицаТекущихЗначенийОперандовФормулы.Аналитика6 КАК Аналитика6,
		|	ТаблицаТекущихЗначенийОперандовФормулы.АналитикаВалюта КАК АналитикаВалюта
		|ИЗ
		|	втТаблицаТекущихЗначенийОперандовФормулыТранспонированная КАК ТаблицаТекущихЗначенийОперандовФормулы
		|СГРУППИРОВАТЬ ПО
		|	ПериодОтчета,
		|	Аналитика1,
		|	Аналитика2,
		|	Аналитика3,
		|	Аналитика4,
		|	Аналитика5,
		|	Аналитика6,
		|	АналитикаВалюта";
		
		Запрос.УстановитьПараметр("ТаблицаТекущихЗначенийОперандовФормулы",тТекущихЗначенийОперандовФормулы);
		
		тТаблицаТекущихЗначенийОперандовФормулы = Запрос.Выполнить().Выгрузить();
			
	КонецЕсли;
	
	Возврат тТаблицаТекущихЗначенийОперандовФормулы;
	
КонецФункции	
	

Функция ПолучитьЗначениеПараметра(Отбор,Данные) 
	
	ЗначениеПараметра = Неопределено;
	
	// Отборы для даты или периода
	// В случае вызова для периодов, ТипЗнч(Данные) = Тип("СправочникСсылка.Периоды")
	
	Если Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчета Тогда
		
		ЗначениеПараметра = Данные;
		
	ИначеЕсли Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ВышестоящийПериод Тогда
		
		ЗначениеПараметра = ОбщегоНазначенияУХ.ПолучитьВышестоящийПериод(Данные,Отбор.ЗначениеОтбора);
		
	ИначеЕсли Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчета Тогда
			
		ЗначениеПараметра = КонецДня(Данные.ДатаОкончания);
		
	ИначеЕсли Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчета Тогда
			
		ЗначениеПараметра = Данные.ДатаНачала;
		
	ИначеЕсли Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчетаСоСдвигом Тогда
			
		ЗначениеПараметра = ОбщегоНазначенияУХ.глОтносительныйПериод(Данные,Отбор.ЗначениеОтбора);
			
	ИначеЕсли Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчетаСоСдвигом Тогда
		
		ОтносительныйПериод = ОбщегоНазначенияУХ.глОтносительныйПериод(Данные,Отбор.ЗначениеОтбора);
		ЗначениеПараметра = КонецДня(ОтносительныйПериод.ДатаОкончания);
		
	ИначеЕсли Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаВышестоящегоПериода Тогда
		
		ОтносительныйПериод = ОбщегоНазначенияУХ.ПолучитьВышестоящийПериод(Данные,Отбор.ЗначениеОтбора);
		ЗначениеПараметра = КонецДня(ОтносительныйПериод.ДатаОкончания);
	
	ИначеЕсли Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчетаСоСдвигом Тогда
		
		ОтносительныйПериод = ОбщегоНазначенияУХ.глОтносительныйПериод(Данные,Отбор.ЗначениеОтбора);
		ЗначениеПараметра = ОтносительныйПериод.ДатаНачала;
		
	ИначеЕсли Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаВышестоящегоПериода Тогда
		
		ОтносительныйПериод = ОбщегоНазначенияУХ.ПолучитьВышестоящийПериод(Данные,Отбор.ЗначениеОтбора);
		ЗначениеПараметра = ОтносительныйПериод.ДатаНачала;
		
	ИначеЕсли Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГода Тогда
		
		ЗначениеПараметра = НачалоГода(Данные.ДатаНачала);
		
	ИначеЕсли Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГода Тогда
				
		ЗначениеПараметра = КонецГода(Данные.ДатаОкончания);
		
	ИначеЕсли Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.АналогичныйПериодПредыдущегоГода Тогда
		
		ЗначениеПараметра = ОбщегоНазначенияУХ.глАналогичныйПериод(Данные, -1);
		
	ИначеЕсли Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.АналогичныйПериодГодаСоСдвигом Тогда
		
		ЗначениеПараметра = ОбщегоНазначенияУХ.глАналогичныйПериод(Данные,Отбор.ЗначениеОтбора);
		
	ИначеЕсли Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГодаСоСдвигом Тогда
		
		ОтносительныйПериод = ОбщегоНазначенияУХ.глАналогичныйПериод(Данные, Отбор.ЗначениеОтбора);
		ЗначениеПараметра = НачалоГода(ОтносительныйПериод.ДатаНачала);
		
	ИначеЕсли Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГодаСоСдвигом Тогда
		
		ОтносительныйПериод = ОбщегоНазначенияУХ.глАналогичныйПериод(Данные, Отбор.ЗначениеОтбора);
		ЗначениеПараметра = КонецГода(ОтносительныйПериод.ДатаНачала);
		
	ИначеЕсли Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ИнтервалПериодов Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Тип отборов %1 в настоящий момент не поддерживается.'"),Отбор.ТипОтбора);
		ВызватьИсключение(ТекстОшибки);
				
	// Отборы для даты или периода
	// В случае вызова НЕ для периодов, ТипЗнч(Данные) = Тип("Структура");
	
	ИначеЕсли Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.Булево
		ИЛИ Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.Дата
		ИЛИ Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.Строка
		ИЛИ Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.Число
		ИЛИ Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение 
		ИЛИ Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению 
		ИЛИ Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений
		ИЛИ Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии
		ИЛИ Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений
		ИЛИ Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии
		ИЛИ Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.Больше
		ИЛИ Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.БольшеИлиРавно
		ИЛИ Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.Меньше
		ИЛИ Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.МеньшеИлиРавно
		Тогда
		
		ЗначениеПараметра = Отбор.ЗначениеОтбора;	
		
	ИначеЕсли Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ВалютаОтчета Тогда
		
		ЗначениеПараметра = Данные.ОсновнаяВалюта;
		
	ИначеЕсли Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ОрганизацияОтчета Тогда
		
		ЗначениеПараметра = Данные.Организация;
		
	ИначеЕсли Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчета Тогда
		
		ЗначениеПараметра = Данные.Проект;
		
	ИначеЕсли Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчетаИерархия Тогда
		
		ЗначениеПараметра = Данные.Проект;	
		
	ИначеЕсли Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ИсходныйДокумент Тогда
		
		ЗначениеПараметра = Данные.Регистратор; 	
		
	ИначеЕсли Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.СценарийОтчета Тогда
			
		ЗначениеПараметра = Данные.Сценарий;
		
	ИначеЕсли Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.СценарийФакта Тогда
		
		ЗначениеПараметра = Данные.Сценарий.СценарийДляАктуализации;
		
	ИначеЕсли Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение
		ИЛИ Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений Тогда
		
		ЗначениеПараметра = ВычислитьВыражение(Отбор.ЗначениеОтбора);
			
	ИначеЕсли Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета
		ИЛИ Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда
		
		ТипыОрганизаций = Новый СписокЗначений;
		ТипыОрганизаций.Добавить(Перечисления.ТипыОрганизационныхЕдиниц.Консолидирующая);
		ТипыОрганизаций.Добавить(Перечисления.ТипыОрганизационныхЕдиниц.Обычная);
		ТипыОрганизаций.Добавить(Перечисления.ТипыОрганизационныхЕдиниц.Элиминирующая); 				
	
		ТекСоставПериметра = ОбщегоНазначенияУХ.глСоставПериметра(Данные,,,Отбор.ЗначениеОтбора,,,,ТипыОрганизаций);
			                                  	
		ЗначениеПараметра = Новый СписокЗначений; 		
		Для Каждого ЭлементМассива Из ТекСоставПериметра Цикл
			ЗначениеПараметра.Добавить(ЭлементМассива);
		КонецЦикла;
		
		ЗначениеПараметра.Добавить(Отбор.ЗначениеОтбора);			
		
	ИначеЕсли Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда
		
		СвойстваПараметра = Неопределено;
		
	ИначеЕсли Лев(Отбор.ТипОтбора,9) = "Аналитика" Тогда
		
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
			Если Отбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов["Аналитика"+Инд]
				И ЗначениеЗаполнено(Данные["Аналитика"+Инд]) Тогда			
				
				ЗначениеПараметра = Данные["Аналитика"+Инд];			
				
			КонецЕсли;
		
		КонецЦикла;		
			
	КонецЕсли; 
	
	Возврат ЗначениеПараметра;
	
КонецФункции 

Функция ПолучитьЗначениеИзКонтекста(ТекстВычисления)
	
	СтрКэш = "ЗначениеИзКонтекста#" + ТекстВычисления;
	
	ЗначениеЗаполнения = КэшДанных.Получить(СтрКэш);
	Если ЗначениеЗаполнения = Неопределено Тогда
		
		Попытка			
			ЗначениеЗаполнения = ОбщегоНазначения.ВычислитьВБезопасномРежиме("Параметры." + ТекстВычисления, ОбъектРасчета);
			КэшДанных.Вставить(СтрКэш, ЗначениеЗаполнения);			
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = НСтр("ru = 'Не удалось вычислить значение для заполнения аналитики %Поле%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Поле%", Строка(ТекстВычисления));
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ПолучитьЗначениеИзКонтекста", , , ТекстСообщения, ТекстОшибки);			
		КонецПопытки;

	КонецЕсли;
	
	Возврат ЗначениеЗаполнения;	
	
КонецФункции

Функция ПроверитьЗаполнениеКлючевыхРеквизитов()
	
	ТекстОшибки = "";
	
	// АПК:1299-выкл
	
	Если НЕ ЗначениеЗаполнено(ОбъектРасчета.ВидОтчета) Тогда
		
		ТекстОшибки=ТекстОшибки + НСтр("ru = '
		|Вид отчета'");
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектРасчета.ПериодОтчета) Тогда
		
		ТекстОшибки=ТекстОшибки + НСтр("ru = '
		|Начало периода'");
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектРасчета.ПериодОкончания) Тогда
		
		ТекстОшибки=ТекстОшибки + НСтр("ru = '
		|Окончание периода'");
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектРасчета.Сценарий) Тогда
		
		ТекстОшибки=ТекстОшибки + НСтр("ru = '
		|Сценарий'");
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектРасчета.Организация) Тогда
		
		ТекстОшибки=ТекстОшибки + НСтр("ru = '
		|Организация'");
		
	КонецЕсли;

	// ДОДЕЛАТЬ: Запрос в возможном цикле, нужно кэшировать
	Если ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(ОбъектРасчета.ВидОтчета,"РазделениеПоПроектам") И (НЕ ЗначениеЗаполнено(ОбъектРасчета.Проект)) Тогда
		
		ТекстОшибки=ТекстОшибки + НСтр("ru = '
		|Проект'");
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектРасчета.УправлениеПериодом) Тогда
		
		ТекстОшибки=ТекстОшибки + НСтр("ru = '
		|Управление отчетным периодом'");
		
	КонецЕсли;
	
	// АПК:1299-вкл
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не заполнены один или несколько ключевых реквизитов: %ТекстОшибки%
		|		Заполнение про правилу отменено'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстОшибки%", Строка(ТекстОшибки));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения,,,СтатусСообщения.Внимание);
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;	
	
КонецФункции // ПроверитьЗаполнениеКлючевыхРеквизитов()

Функция ПолучитьОписаниеТаблицыТрассировкиРасчета()
	
	тТрассировкаРасчета = Новый ТаблицаЗначений;
	тТрассировкаРасчета.Колонки.Добавить("тРезультатВыполненияЗапроса");
	тТрассировкаРасчета.Колонки.Добавить("КомментарийКПакету");	
	тТрассировкаРасчета.Колонки.Добавить("ТекстПодзапросов");
	тТрассировкаРасчета.Колонки.Добавить("тПараметрыПакета");
	тТрассировкаРасчета.Колонки.Добавить("ВидОперацииРасчета");
	тТрассировкаРасчета.Колонки.Добавить("ВыгружатьРезультатВТаблицу",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	тТрассировкаРасчета.Колонки.Добавить("ВремяМс");
	
	Возврат тТрассировкаРасчета;
	
КонецФункции


Процедура ДобавитьВТаблицуРассчитанныхПоказателей(тРассчитанныхПоказателей)
	
	СтрокаКлючевыхАналитик = "ПравилоОбработки,Сценарий,Организация,Проект";
	Для Сч = 1 По ОбъектРасчета.МаксАналитикОтчета Цикл
		СтрокаКлючевыхАналитик = СтрокаКлючевыхАналитик + ",Аналитика" + Сч;
	КонецЦикла;
	
	ТабРассчитанныхПоказателей = Неопределено;
	Если ЗначениеЗаполнено(АдресТаблицыРассчитанныхПоказателей) Тогда
		ТабРассчитанныхПоказателей = ПолучитьИзВременногоХранилища(АдресТаблицыРассчитанныхПоказателей);
	КонецЕсли;
	
	Если ТабРассчитанныхПоказателей = Неопределено Тогда
		АдресТаблицыРассчитанныхПоказателей = "";
		ТабРассчитанныхПоказателей = УправлениеРасчетомПоказателей.ПолучитьОписаниеТаблицыИзмененныхПоказателей();
	КонецЕсли;

	Для Каждого СтрокаРассчитанныхПоказателей Из тРассчитанныхПоказателей Цикл
		НСтрока = ТабРассчитанныхПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НСтрока, СтрокаРассчитанныхПоказателей);
		ЗаполнитьЗначенияСвойств(НСтрока, ОбъектРасчета, СтрокаКлючевыхАналитик);
		Если ОбъектРасчета.Свойство("ТабРассчитанныхПоказателей") Тогда
			НТекСтрока = ОбъектРасчета.ТабРассчитанныхПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НТекСтрока, НСтрока);
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(АдресТаблицыРассчитанныхПоказателей) Тогда
		ПоместитьВоВременноеХранилище(ТабРассчитанныхПоказателей, АдресТаблицыРассчитанныхПоказателей);
	Иначе
		АдресТаблицыРассчитанныхПоказателей = ПоместитьВоВременноеХранилище(ТабРассчитанныхПоказателей);
	КонецЕсли;
	
КонецПроцедуры

Функция СохранитьЛогИзмененныхПоказателей(МенеджерВременныхТаблиц, НомерТранзакции = 0)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Сохраним значения показателей в Лог
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("УникальныйИдентификаторСеанса", УникальныйИдентификаторСеанса);
	Запрос.УстановитьПараметр("НомерТранзакции", НомерТранзакции);
	Запрос.Текст = 
	  	"ВЫБРАТЬ
	  	|	&УникальныйИдентификаторСеанса КАК УникальныйИдентификаторСеанса,
	  	|	0 КАК НомерЗаписи,
	  	|	ЗначенияПоказателей.НомерТранзакции КАК НомерТранзакции,
	  	|	ЗначенияПоказателей.ПравилоОбработки КАК ПравилоОбработки,
	  	|	ЗначенияПоказателей.Показатель КАК Показатель,
	  	|	ЗначенияПоказателей.Сценарий КАК Сценарий,
	  	|	ЗначенияПоказателей.Организация КАК Организация,
	  	|	ЗначенияПоказателей.Проект КАК Проект,
	  	|	ЗначенияПоказателей.Аналитика1 КАК Аналитика1,
	  	|	ЗначенияПоказателей.Аналитика2 КАК Аналитика2,
	  	|	ЗначенияПоказателей.Аналитика3 КАК Аналитика3,
	  	|	ЗначенияПоказателей.Аналитика4 КАК Аналитика4,
	  	|	ЗначенияПоказателей.Аналитика5 КАК Аналитика5,
	  	|	ЗначенияПоказателей.Аналитика6 КАК Аналитика6,
	  	|	ЗначенияПоказателей.АналитикаВалюта КАК АналитикаВалюта,
	  	|	ЗначенияПоказателей.ПериодОтчета КАК ПериодОтчета,
	  	|	ЗначенияПоказателей.Валюта КАК Валюта,
	  	|	ЗначенияПоказателей.Значение КАК Значение,
	  	|	ЗначенияПоказателей.ЗначениеНечисловое КАК ЗначениеНечисловое,
	  	|	ЗначенияПоказателей.ЗначениеВалюта КАК ЗначениеВалюта
	  	|ИЗ
	  	|	втЛогИзмененныхПоказателей КАК ЗначенияПоказателей
	  	|ГДЕ
	  	|	ЗначенияПоказателей.НомерТранзакции = &НомерТранзакции";
	
	ТекЛогИзмененныхПоказателей = Запрос.Выполнить().Выгрузить();
	Сч = 0;
	Для Каждого ТекСтрЛог Из ТекЛогИзмененныхПоказателей Цикл
		ТекСтрЛог.НомерЗаписи = Сч;
		Сч = Сч + 1;
	КонецЦикла;

	НаборЗаписей = РегистрыСведений.ЛогИзмененныхЗначенийПоказателейОтчетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УникальныйИдентификаторСеанса.Установить(УникальныйИдентификаторСеанса);
	НаборЗаписей.Отбор.НомерТранзакции.Установить(НомерТранзакции);
	НаборЗаписей.Загрузить(ТекЛогИзмененныхПоказателей);
	
	Попытка
		НаборЗаписей.Записать(Истина);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить запись лога значений измененных показателей.'");
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.СохранитьЛогИзмененныхПоказателей", , , ТекстСообщения, ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

Функция ЗагрузитьЛогИзмененныхПоказателейВМенеджерВТ()	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос 							= Новый Запрос;
	Запрос.МенеджерВременныхТаблиц 	= Новый МенеджерВременныхТаблиц;		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.ПравилоОбработки КАК ПравилоОбработки,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.Показатель КАК Показатель,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.Сценарий КАК Сценарий,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.Организация КАК Организация,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.Проект КАК Проект,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.Аналитика1 КАК Аналитика1,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.Аналитика2 КАК Аналитика2,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.Аналитика3 КАК Аналитика3,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.Аналитика4 КАК Аналитика4,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.Аналитика5 КАК Аналитика5,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.Аналитика6 КАК Аналитика6,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.АналитикаВалюта КАК АналитикаВалюта,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.ПериодОтчета КАК ПериодОтчета,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.Валюта КАК Валюта,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.Значение КАК Значение,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.ЗначениеНечисловое КАК ЗначениеНечисловое,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.ЗначениеВалюта КАК ЗначениеВалюта,
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.НомерТранзакции КАК НомерТранзакции
		|ПОМЕСТИТЬ втЛогИзмененныхПоказателей
		|ИЗ
		|	РегистрСведений.ЛогИзмененныхЗначенийПоказателейОтчетов КАК ЛогИзмененныхЗначенийПоказателейОтчетов
		|ГДЕ
		|	ЛогИзмененныхЗначенийПоказателейОтчетов.УникальныйИдентификаторСеанса = &УникальныйИдентификаторСеанса";
	
	Запрос.УстановитьПараметр("УникальныйИдентификаторСеанса", УникальныйИдентификаторСеанса);	
	Запрос.Выполнить();
	
	Возврат Запрос.МенеджерВременныхТаблиц;
	
КонецФункции

Процедура УничтожитьВременныеТаблицыРасчета()

	ТекстЗапроса = "";
	
	Для Каждого Таблица Из ОбъектРасчета.МенеджерВременныхТаблиц.Таблицы Цикл
		
		ИмяТаблицы = Таблица.ПолноеИмя;
		
		Если ИмяТаблицы = "втЛогИзмененныхПоказателей"
			ИЛИ ИмяТаблицы = "втЛогИзмененныхПоказателейУровень0" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|УНИЧТОЖИТЬ " + ИмяТаблицы + ";";
		
	КонецЦикла;
	
	Если ТекстЗапроса = "" Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОбъектРасчета.МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();	
	
КонецПроцедуры


///////////////////////////////////////////////////////
// ПЕРИОДЫ

// Расчет значения периода с проверкой к кэше
Функция РассчитатьПериодыПоОтбору(ОтборПоПериоду, Период)
		
	ХешСтрока = "ПериодыПоОтбору#" + Строка(Период) + "@" + Строка(ОтборПоПериоду.ТипОтбора) + "@" + Строка(ОтборПоПериоду.ЗначениеОтбора);
	СписокПериодов = КэшДанных.Получить(ХешСтрока);
	
	Если СписокПериодов = Неопределено Тогда
	
		// Вычисляем периоды расчета
		Если ОтборПоПериоду.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
			
			СписокПериодов = КэшируемыеПроцедурыУХ.ПолучитьВсеПериоды(ОбъектРасчета.Периодичность,"И Периоды.Ссылка <> &ПараметрОтбора",ОтборПоПериоду.ЗначениеОтбора);
			
		ИначеЕсли ОтборПоПериоду.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений Тогда
			
			СписокПериодов = КэшируемыеПроцедурыУХ.ПолучитьВсеПериоды(ОбъектРасчета.Периодичность,"И Периоды.Ссылка НЕ В(&ПараметрОтбора)",ОтборПоПериоду.ЗначениеОтбора);
			
		ИначеЕсли ОтборПоПериоду.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии Тогда
			
			СписокПериодов = КэшируемыеПроцедурыУХ.ПолучитьВсеПериоды(ОбъектРасчета.Периодичность,"И Периоды.Ссылка В ИЕРАРХИИ(&ПараметрОтбора)",ОтборПоПериоду.ЗначениеОтбора);
			
		ИначеЕсли ОтборПоПериоду.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии Тогда
			
			СписокПериодов = КэшируемыеПроцедурыУХ.ПолучитьВсеПериоды(ОбъектРасчета.Периодичность,"И Периоды.Ссылка НЕ В ИЕРАРХИИ(&ПараметрОтбора)",ОтборПоПериоду.ЗначениеОтбора);
			
		ИначеЕсли ОтборПоПериоду.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда
			
			СписокПериодов = КэшируемыеПроцедурыУХ.ПолучитьВсеПериоды(ОбъектРасчета.Периодичность);
			
		ИначеЕсли ОтборПоПериоду.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений
			Или ОтборПоПериоду.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений Тогда
			
			СписокПериодов = ПолучитьЗначениеПараметра(ОтборПоПериоду,Период);
			
		Иначе
			
			СписокПериодов = Новый СписокЗначений;
			СписокПериодов.Добавить(ПолучитьЗначениеПараметра(ОтборПоПериоду,Период));
			
		КонецЕсли;
		
		КэшДанных.Вставить(ХешСтрока, СписокПериодов);
		
	КонецЕсли;
	
	Возврат СписокПериодов;
	
КонецФункции	

// Подготовка ВТ для соответствия периодов
Функция ПолучитьСоответствиеПериодов(МассивПериодов, тСложныеОтборыПоПериоду)
	
	тСоответствиеПериодов = Новый ТаблицаЗначений;
	тСоответствиеПериодов.Колонки.Добавить("ПериодОтчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Периоды"));
	тСоответствиеПериодов.Колонки.Добавить("ПериодИсточник",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Периоды"));
	
	Для Каждого Период Из МассивПериодов Цикл
		
		ОбъектРасчета.ПериодОтчета = Период;
		
		Для Каждого ОтборПоПериоду Из тСложныеОтборыПоПериоду Цикл
			
			СписокПериодов = РассчитатьПериодыПоОтбору(ОтборПоПериоду,Период);
			Для Каждого нПериод Из СписокПериодов Цикл
			
				нСтрокаПериоды = тСоответствиеПериодов.Добавить();
				нСтрокаПериоды.ПериодОтчета = Период;
				нСтрокаПериоды.ПериодИсточник = нПериод.Значение;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат тСоответствиеПериодов;
	
КонецФункции


///////////////////////////////////////////////////////
// РАСЧЕТ В КОДЕ

Функция ВыполнитьПроизвольныйКод(тПроизвольныйКод, МассивПериодов)
	
	тзДанныеПроизвольныйКод = ЗначенияОперандов.ВыгрузитьКолонки("Показатель,ПериодОтчета,Значение,ЗначениеНечисловое");
	
	Для Каждого СтрКод Из тПроизвольныйКод Цикл
		
		ЕстьОбращениеКПериодуОтчета = Ложь;
		Если СтрНайти(СтрКод.Процедура, "ПериодОтчета") Тогда
			// Есть обращение к периоду отчета
			ЕстьОбращениеКПериодуОтчета = Истина;
		Иначе
			Результат = ВычислитьВыражение(СтрКод.Процедура);
		КонецЕсли;
		
		Для Каждого ПериодОтчета Из МассивПериодов Цикл
			
			Если ЕстьОбращениеКПериодуОтчета Тогда
				ОбъектРасчета.ПериодОтчета = ПериодОтчета;			
				Результат = ВычислитьВыражение(СтрКод.Процедура);
			КонецЕсли;
			
			НСтрока = тзДанныеПроизвольныйКод.Добавить();
			НСтрока.Показатель = СтрКод.Показатель;
			НСтрока.ПериодОтчета = ПериодОтчета;
			Если СтрКод.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
				НСтрока.Значение = Результат;
			Иначе
				НСтрока.ЗначениеНечисловое = Результат;
			КонецЕсли;			
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат тзДанныеПроизвольныйКод;
	
КонецФункции

Функция РассчитатьЗначенияВКоде(СтруктураПараметров, тТрассировкаРасчета)
	
	тРассчитанныхЗначений 		= ЗначенияОперандов.ВыгрузитьКолонки();	
	тФормулыДляРасчетаВКоде 	= СтруктураПараметров.тФормулыДляРасчетаВКоде;
	МаксИспользуемыхАналитик 	= СтруктураПараметров.МаксИспользуемыхАналитик;
	МаксКлючевыхАналитик 		= СтруктураПараметров.МаксКлючевыхАналитик;
	
	тИтоговаяТаблица			= тТрассировкаРасчета.НайтиСтроки(Новый Структура("ВыгружатьРезультатВТаблицу", Истина));
	
	Для Каждого СтрФормула Из тФормулыДляРасчетаВКоде Цикл
		
		// Скопируем соответствие
		ПоказателиДляРасчета = СтрФормула.ПоказателиДляРасчета.Скопировать();
		
		// Обходим массив таблиц с конца, т. к. вероятнее, что показатель находится в предыдущей таблице
		Сч = тИтоговаяТаблица.Количество()-1;
		Пока Сч >=0 Цикл
			
			СтрокаТаблицыЗначений = тИтоговаяТаблица.Получить(Сч);
			тРезультатВыполненияЗапроса = СтрокаТаблицыЗначений.тРезультатВыполненияЗапроса;
			Сч = Сч - 1;
			
			Если тРезультатВыполненияЗапроса = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Найдем все строки с текущими показателями
			Для Каждого ПоказательДляРасчета Из СтрФормула.ПоказателиДляРасчета Цикл
				
				// Найдем значения с текущими аналитиками в запросе
				СтруктураДляОтбора = Новый Структура;
				СтруктураДляОтбора.Вставить("Показатель", ПоказательДляРасчета.Показатель);
				Если тРезультатВыполненияЗапроса.Колонки.Найти("КодВФормуле") = Неопределено Тогда
					СтруктураДляОтбора.Вставить("УИДГруппыОтборов", ПоказательДляРасчета.УИДГруппыОтборов);
					СтруктураДляОтбора.Вставить("УИДГруппыТрансформации", ПоказательДляРасчета.УИДГруппыТрансформации);
				Иначе
					СтруктураДляОтбора.Вставить("КодВФормуле", ПоказательДляРасчета.КодВФормуле);
				КонецЕсли;
				
				НайденныеСтрокиЗначенийПоказателей = тРезультатВыполненияЗапроса.НайтиСтроки(СтруктураДляОтбора);
				Если НайденныеСтрокиЗначенийПоказателей.Количество() = 0 Тогда
					// Значение показателя содержится в другой таблице
					Продолжить;
				КонецЕсли;
				
				Для Каждого СтрокаЗначенийПоказателей Из НайденныеСтрокиЗначенийПоказателей Цикл
					
					// Выполняем поиск в таблице рассчитанных значений
					СтруктураДляОтбора = Новый Структура;
					СтруктураДляОтбора.Вставить("Показатель",СтрФормула.Потребитель);
					СтруктураДляОтбора.Вставить("ПериодОтчета",СтрокаЗначенийПоказателей.ПериодОтчета);
					Для СчАналитик = МаксКлючевыхАналитик+1 По МаксИспользуемыхАналитик Цикл
						Если тРезультатВыполненияЗапроса.Колонки.Найти("Аналитика"+СчАналитик) = Неопределено Тогда
							СтруктураДляОтбора.Вставить("Аналитика"+СчАналитик,Неопределено);
						Иначе
							СтруктураДляОтбора.Вставить("Аналитика"+СчАналитик,СтрокаЗначенийПоказателей["Аналитика"+СчАналитик]);
						КонецЕсли;
					КонецЦикла;
					
					НайденныеСтрокиРассчитанныхЗначений = тРассчитанныхЗначений.НайтиСтроки(СтруктураДляОтбора);
					Если НайденныеСтрокиРассчитанныхЗначений.Количество() = 0 Тогда
						// Добавим строки в таблицу
						СтрокаРассчитанныхЗначений = тРассчитанныхЗначений.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаРассчитанныхЗначений,СтруктураДляОтбора);
						ЗаполнитьЗначенияСвойств(СтрокаРассчитанныхЗначений,СтрФормула);
						СтрокаРассчитанныхЗначений.ТипПоказателя = СтрФормула.ТипПотребителя;
						НайденныеСтрокиРассчитанныхЗначений = тРассчитанныхЗначений.НайтиСтроки(СтруктураДляОтбора);
					КонецЕсли;
					
					// Заполним код в формуле найденным значением
					Для Каждого СтрокаРассчитанныхЗначений Из НайденныеСтрокиРассчитанныхЗначений Цикл
						Если ПоказательДляРасчета.ТипПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
							Значение = Формат(СтрокаЗначенийПоказателей.Значение,"ЧРД=.; ЧН=; ЧГ=0");
							Значение = СтрЗаменить(Значение,",",".");
						ИначеЕсли ПоказательДляРасчета.ТипПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда
							Если СтрокаЗначенийПоказателей.ЗначениеНечисловое = ИСТИНА Тогда
								Значение = "ИСТИНА";
							Иначе
								Значение = "ЛОЖЬ";
							КонецЕсли;
						ИначеЕсли ПоказательДляРасчета.ТипПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда
							Если ЗначениеЗаполнено(СтрокаЗначенийПоказателей.ЗначениеНечисловое) Тогда
								Значение = "ДАТА(" 
									+ Сред(СтрокаЗначенийПоказателей.ЗначениеНечисловое,7,4) + "," 
									+ Сред(СтрокаЗначенийПоказателей.ЗначениеНечисловое,4,2) + ","
									+ Лев(СтрокаЗначенийПоказателей.ЗначениеНечисловое,2) + ")";
							Иначе
								Значение = "ДАТА(1,1,1)";
							КонецЕсли;
						Иначе
							Значение = """" + СтрокаЗначенийПоказателей.ЗначениеНечисловое + """";
						КонецЕсли;							
						СтрокаРассчитанныхЗначений.ФормулаРасчета = СтрЗаменить(ВРег(СтрокаРассчитанныхЗначений.ФормулаРасчета),"["+ВРег(ПоказательДляРасчета.КодВФормуле)+"]",Значение);
					КонецЦикла;
						
				КонецЦикла;
				
				// Удалим показатель, т. к. он уже рассчитан
				НайденныеСтроки = ПоказателиДляРасчета.НайтиСтроки(Новый Структура("Показатель,КодВФормуле",ПоказательДляРасчета.Показатель,ПоказательДляРасчета.КодВФормуле));
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					ПоказателиДляРасчета.Удалить(НайденнаяСтрока);
				КонецЦикла;
				
			КонецЦикла;
			
			Если ПоказателиДляРасчета.Количество() = 0 Тогда
				// Все показатели рассчитаны
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		// Для некоторых показателей значение может быть равно 0 или не задано
		Для Каждого ПоказательДляРасчета Из СтрФормула.ПоказателиДляРасчета Цикл
			Если ПоказательДляРасчета.ТипПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка Тогда
				ПустоеЗначение = """""";
			ИначеЕсли ПоказательДляРасчета.ТипПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда
				ПустоеЗначение = "ЛОЖЬ";
			ИначеЕсли ПоказательДляРасчета.ТипПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда
				ПустоеЗначение = "ДАТА(1,1,1)";
			Иначе
				ПустоеЗначение = "0";
			КонецЕсли;
			Для Каждого СтрокаРассчитанныхЗначений Из тРассчитанныхЗначений Цикл
				СтрокаРассчитанныхЗначений.ФормулаРасчета = СтрЗаменить(ВРег(СтрокаРассчитанныхЗначений.ФормулаРасчета),"["+ВРег(ПоказательДляРасчета.КодВФормуле)+"]",ПустоеЗначение);
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;	
	
	// Вычислим все значения
	Для Каждого СтрокаРассчитанныхЗначений Из тРассчитанныхЗначений Цикл
		
		ОбъектРасчета.ПериодОтчета = СтрокаРассчитанныхЗначений.ПериодОтчета;
		
		Если СтрокаРассчитанныхЗначений.ТипПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			СтрокаРассчитанныхЗначений.Значение = ВычислитьВыражение(СтрокаРассчитанныхЗначений.ФормулаРасчета, СтрокаРассчитанныхЗначений);
		Иначе
			СтрокаРассчитанныхЗначений.ЗначениеНечисловое = ВычислитьВыражение(СтрокаРассчитанныхЗначений.ФормулаРасчета, СтрокаРассчитанныхЗначений);
		КонецЕсли;
		
	КонецЦикла;

	Возврат тРассчитанныхЗначений;
	
КонецФункции

Функция ВычислитьВыражение(Знач ТекстМодуля, ДанныеРасчета = Неопределено)
	
	Результат = Неопределено;
	
	Если ПустаяСтрока(ТекстМодуля) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Для совместимости с классическим движком
	ТекстМодуля = СтрЗаменить(НРег(ТекстМодуля),НРег("ЗначениеПараметра"),"результат");
	ПериодОтчета = ОбъектРасчета.ПериодОтчета;
	
	Если СтрНайти(ТекстМодуля,"результат =") = 0
		И СтрНайти(ТекстМодуля,"результат=") = 0 Тогда		
		ТекстМодуля = "Результат = " + ТекстМодуля;
	КонецЕсли;
	
	Попытка
		// АПК:487-выкл Выполняется в контексте данной обработки
		Выполнить(ТекстМодуля);
		// АПК:487-вкл
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстСообщения = НСтр("ru = 'Ошибка вычисления формулы: ""%Формула%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Формула%", ?(СтрДлина(ТекстМодуля) > 200, Лев(ТекстМодуля, 200) + " ...", ТекстМодуля));
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ВычислитьВыражение", , , ТекстСообщения, ТекстОшибки);
	КонецПопытки;
	
	Возврат Результат;
		
КонецФункции


///////////////////////////////////////////////////////
// ПРОИЗВОЛЬНОЕ И ВНЕШНИЕ ДАННЫЕ

Функция ВыполнитьПроизвольныеЗапросы(ПоказателиПроизвольныйЗапрос, МассивПериодов)
	
	тВнешнихДанных = ЗначенияОперандов.ВыгрузитьКолонки();
	
	Для Каждого ПериодОтчета Из МассивПериодов Цикл
		
		ОбъектРасчета.ПериодОтчета = ПериодОтчета;
		
		Для Каждого СтрокаЗапрос Из ПоказателиПроизвольныйЗапрос Цикл
			
			ТаблицаДанных = УправлениеОтчетамиУХ.ПолучитьТаблицуПоИсточникуВнутрПроизвольный(ОбъектРасчета, СтрокаЗапрос);
			
			Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
				
				Для Каждого СтрокаОперанд Из СтрокаЗапрос.ТаблицаОперандов Цикл
			
					НСтр = тВнешнихДанных.Добавить();
					ЗаполнитьЗначенияСвойств(нСтр, СтрокаДанных, , "Значение");
					Если СтрокаОперанд.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
						НСтр.Значение = СтрокаДанных.Значение;
					Иначе
						НСтр.ЗначениеНечисловое = СтрокаДанных.Значение;
					КонецЕсли;
					НСтр.ПериодОтчета 	= ПериодОтчета;
					НСтр.Показатель 	= СтрокаОперанд.Показатель;
					НСтр.КодВФормуле 	= СтрокаОперанд.Код;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат тВнешнихДанных;
	
КонецФункции

Функция ПолучитьВнешниеДанные(ПоказателиВнешниеДанные, МассивПериодов)
	
	// Определим используемую ИБ
	Если НЕ ЗначениеЗаполнено(ОбъектРасчета.ИспользуемаяИБ) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПравилоОбработки",ОбъектРасчета.ПравилоОбработки);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТипыБазДанных.ВИБПоУмолчанию КАК ВИБПоУмолчанию
			|ИЗ
			|	Справочник.ПравилаОбработки КАК ПравилаОбработки
			|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ТипыБазДанных КАК ТипыБазДанных
			|		ПО ПравилаОбработки.ТипБД = ТипыБазДанных.Ссылка
			|ГДЕ
			|	ПравилаОбработки.Ссылка = &ПравилоОбработки";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось определить внешнюю информационную базу.'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		ОбъектРасчета.ИспользуемаяИБ = ВыборкаДетальныеЗаписи.ВИБПоУмолчанию;

	КонецЕсли;
	
	ОбъектРасчета.ВсегдаЗаполнятьАналитики = Истина;
	Если ОбъектРасчета.мЗначенияОперандов = Неопределено Тогда 	
		ОбъектРасчета.мЗначенияОперандов = КэшируемыеПроцедурыУХ.ИнициализироватьТаблицуОперандов(ОбъектРасчета.МаксАналитикОтчета + ОбъектРасчета.МаксАналитикПоказателя);
	КонецЕсли;
		
	тВнешнихДанных = ЗначенияОперандов.ВыгрузитьКолонки();
	
	Если Не ОбъектРасчета.ИспользуемаяИБ.ИспользоватьWS Тогда		
		РасширениеИнтеграцииУХ.ПолучитьСоединениеВИБ(ОбъектРасчета);		
		Если ОбъектРасчета.База=Неопределено Тогда			
			ТекстОшибки = НСтр("ru = 'Не удалось установить соединение с внешней информационной базой.'");
			ВызватьИсключение ТекстОшибки;			
		КонецЕсли;				
	КонецЕсли;
	
	ОбъектРасчета.Вставить("РасширенныйАлгоритмРасчетаПоказателей", Истина);
	
	Для Каждого ПериодОтчета Из МассивПериодов Цикл
		
		ОбъектРасчета.ПериодОтчета = ПериодОтчета;
		
		Для Каждого СтрПоказатель Из ПоказателиВнешниеДанные Цикл
		
			ОбъектРасчета.мЗначенияОперандов.Очистить();
			Если СтрПоказатель.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO Тогда 
				РасширениеИнтеграцииУХ.ПолучитьДанныеЗапросаПоADO(ОбъектРасчета,СтрПоказатель);
			ИначеЕсли СтрПоказатель.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии Тогда
				РасширениеИнтеграцииУХ.ПолучитьДанныеРегистраБухгалтерииВИБ(ОбъектРасчета,СтрПоказатель);
			Иначе
				РасширениеИнтеграцииУХ.ПолучитьДанныеРегистраНакопленияВИБ(ОбъектРасчета,СтрПоказатель);
			КонецЕсли;
	
			Для Каждого СтрОперанд Из ОбъектРасчета.мЗначенияОперандов Цикл
				
				Если СтрОперанд.ИтогПоПоказателю Тогда
					Продолжить;
				КонецЕсли;
				
				НайденныеСтроки = СтрПоказатель.ТаблицаОперандов.НайтиСтроки(Новый Структура("Код",СтрОперанд.КодОперанда));
				
				Для Каждого СтрокаОперанд Из НайденныеСтроки Цикл
					
					НСтр = тВнешнихДанных.Добавить();
					Если СтрокаОперанд.ТипЗначенияПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
						ЗаполнитьЗначенияСвойств(нСтр,СтрОперанд);
					Иначе
						ЗаполнитьЗначенияСвойств(нСтр,СтрОперанд,,"Значение");
						нСтр.ЗначениеНечисловое = СтрОперанд.Значение;
					КонецЕсли;
					НСтр.ПериодОтчета 	= ПериодОтчета;
					НСтр.Показатель 	= СтрокаОперанд.Показатель;
					НСтр.КодВФормуле 	= СтрокаОперанд.Код;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
	
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОбъектРасчета.ИспользуемаяИБ)
		И Не ОбъектРасчета.База=Неопределено
		И ОбъектРасчета.ИспользуемаяИБ.ТипБД.ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO 
		Тогда
		
		Попытка  
			
			ОбъектРасчета.База.Close();
			ОбъектРасчета.База=Неопределено;
			
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ТекстСообщения = НСтр("ru = 'Ошибка закрытия соединения с базой: ""%ИспользуемаяИБ%""'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИспользуемаяИБ%", ОбъектРасчета.ИспользуемаяИБ);
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ПолучитьВнешниеДанные", , , ТекстСообщения, ТекстОшибки);			
			
		КонецПопытки;
		
	КонецЕсли;
	
	ОбъектРасчета.ПериодОтчета = МассивПериодов.Получить(0);
	
	Возврат тВнешнихДанных;
	
КонецФункции

#КонецОбласти


#Область ЗаписьПоказателей

Функция ПолучитьОписаниеВерсии(СтруктураРасчета)
	
	Если НЕ СтруктураРасчета.СохранятьИсториюИзменений Тогда
		
		// Ищем существующий элемент описания версии
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ОписаниеВерсий.Ссылка
			|ИЗ
			|	Справочник.ОписаниеВерсий КАК ОписаниеВерсий
			|ГДЕ
			|	НЕ ОписаниеВерсий.ПометкаУдаления
			|	И ОписаниеВерсий.Организация = &Организация
			|	И ОписаниеВерсий.ВидОтчета = &ВидОтчета
			|	И ОписаниеВерсий.УправлениеПериодом = &УправлениеПериодом
			|	И ОписаниеВерсий.Проект = &Проект";
		
		Запрос.УстановитьПараметр("Организация",		СтруктураРасчета.Организация);
		Запрос.УстановитьПараметр("ВидОтчета",			СтруктураРасчета.ВидОтчета);
		Запрос.УстановитьПараметр("УправлениеПериодом",	СтруктураРасчета.УправлениеПериодом);
		Запрос.УстановитьПараметр("Проект",				СтруктураРасчета.Проект);
		
		Если ЗначениеЗаполнено(СтруктураРасчета.ИдентификаторСеанса) Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|	И ОписаниеВерсий.ЧерноваяВерсия
			|	И ОписаниеВерсий.ИдентификаторСеанса = &ИдентификаторСеанса";
			Запрос.УстановитьПараметр("ИдентификаторСеанса", СтруктураРасчета.ИдентификаторСеанса);
			
		Иначе
			
			Запрос.Текст = Запрос.Текст + "
			|	И НЕ ОписаниеВерсий.ЧерноваяВерсия";
			
		КонецЕсли;
	
		Для Индекс = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			Если СтруктураРасчета.Свойство("Аналитика" + Индекс) Тогда			
				Запрос.УстановитьПараметр("Аналитика" + Индекс, СтруктураРасчета["Аналитика" + Индекс]);			
			Иначе			
				Запрос.УстановитьПараметр("Аналитика" + Индекс, Неопределено)			
			КонецЕсли; 
			
			Запрос.Текст = Запрос.Текст + "
			|	И ОписаниеВерсий.Аналитика" + Индекс + " = &Аналитика" + Индекс;
			
		КонецЦикла;

		Результат = Запрос.Выполнить().Выбрать();	
		Если Результат.Следующий() Тогда		
			Возврат Результат.Ссылка;		
		КонецЕсли;
		
	КонецЕсли;
	
	// Создаем новый элемент описания версии
	ОписаниеВерсии = Справочники.ОписаниеВерсий.СоздатьЭлемент();		
	ОписаниеВерсии.ЭкземплярОтчета 		= СтруктураРасчета.Регистратор;
	ОписаниеВерсии.Регистратор 			= СтруктураРасчета.Регистратор;
	ОписаниеВерсии.ИдентификаторСеанса 	= СтруктураРасчета.ИдентификаторСеанса;
	ОписаниеВерсии.ЧерноваяВерсия 		= ЗначениеЗаполнено(СтруктураРасчета.ИдентификаторСеанса);
	ОписаниеВерсии.Организация     		= СтруктураРасчета.Организация;
	ОписаниеВерсии.ВидОтчета       		= СтруктураРасчета.ВидОтчета;
	ОписаниеВерсии.УправлениеПериодом   = СтруктураРасчета.УправлениеПериодом;
	ОписаниеВерсии.Проект        		= СтруктураРасчета.Проект;		
	ОписаниеВерсии.Автор 				= СтруктураРасчета.ПоследнийРедактировавший;
	ОписаниеВерсии.ДатаИзмененияMs		= СтруктураРасчета.ДатаИзмененияMs;
	ОписаниеВерсии.РучнаяОперация  		= ?(СтруктураРасчета.СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.РучноеЗаполнение, 0, 1);
	ОписаниеВерсии.Дата        			= ТекущаяДатаСеанса();
	Для Индекс = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл			
		СтруктураРасчета.Свойство("Аналитика"+Индекс, ОписаниеВерсии["Аналитика"+Индекс]);
	КонецЦикла; 
	ОписаниеВерсии.Записать();
	
	Возврат ОписаниеВерсии.Ссылка;
			
КонецФункции 

Функция ПолучитьВерсию(СтруктураРасчета, ОписаниеВерсии) Экспорт
	
	Если НЕ СтруктураРасчета.СохранятьИсториюИзменений Тогда
		
		// Ищем существующую основную версию
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВерсииЗначенийПоказателей.Ссылка КАК Ссылка,
			|	ВерсииЗначенийПоказателей.ЗаписьВДополнительнойВалюте КАК ЗаписьВДополнительнойВалюте
			|ИЗ
			|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
			|ГДЕ
			|	НЕ ВерсииЗначенийПоказателей.ПометкаУдаления
			|	И ВерсииЗначенийПоказателей.Владелец = &Владелец
			|	И ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета
			|	И ВерсииЗначенийПоказателей.Организация = &Организация			
			|	И ВерсииЗначенийПоказателей.ПериодОтчета = &ПериодОтчета
			|	И ВерсииЗначенийПоказателей.Сценарий = &Сценарий
			|	И ВерсииЗначенийПоказателей.ОсновнаяВерсия = &ОсновнаяВерсия
			|	И ВерсииЗначенийПоказателей.Валюта = &Валюта
			|	И ВерсииЗначенийПоказателей.Проект = &Проект
			|	И ВерсииЗначенийПоказателей.ЧерноваяВерсия = &ЧерноваяВерсия";
				
		Запрос.УстановитьПараметр("Владелец",		ОписаниеВерсии);
		Запрос.УстановитьПараметр("Валюта",			СтруктураРасчета.Валюта);
		Запрос.УстановитьПараметр("Организация",	СтруктураРасчета.Организация);
		Запрос.УстановитьПараметр("ВидОтчета",		СтруктураРасчета.ВидОтчета);
		Запрос.УстановитьПараметр("ПериодОтчета",	СтруктураРасчета.ПериодОтчета);
		Запрос.УстановитьПараметр("Сценарий",		СтруктураРасчета.Сценарий);
		Запрос.УстановитьПараметр("Проект",			СтруктураРасчета.Проект);
		Запрос.УстановитьПараметр("ЧерноваяВерсия",	ЗначениеЗаполнено(СтруктураРасчета.ИдентификаторСеанса));
		Запрос.УстановитьПараметр("ОсновнаяВерсия",	Истина);
		
		Для Индекс = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			Если СтруктураРасчета.Свойство("Аналитика" + Индекс) Тогда				
				Запрос.УстановитьПараметр("Аналитика" + Индекс, СтруктураРасчета["Аналитика" + Индекс]);				
			Иначе				
				Запрос.УстановитьПараметр("Аналитика" + Индекс,Неопределено);				
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + "
			|	И ВерсииЗначенийПоказателей.Аналитика" + Индекс + " = &Аналитика" + Индекс;
			
		КонецЦикла;		
		
		Результат = Запрос.Выполнить().Выбрать();		
		Если Результат.Следующий() Тогда			
			Возврат Результат.Ссылка;			
		КонецЕсли;
		
	КонецЕсли;
	
	// Создаем новую версию
	Версия = Справочники.ВерсииЗначенийПоказателей.СоздатьЭлемент();
	Версия.Владелец        		= ОписаниеВерсии;
	Версия.ЭкземплярОтчета 		= СтруктураРасчета.Регистратор;
	Версия.Регистратор 			= СтруктураРасчета.Регистратор;
	Версия.ЧерноваяВерсия		= ЗначениеЗаполнено(СтруктураРасчета.ИдентификаторСеанса);
	Версия.ИдентификаторСеанса	= СтруктураРасчета.ИдентификаторСеанса;
	Версия.Организация     		= СтруктураРасчета.Организация;
	Версия.ВидОтчета       		= СтруктураРасчета.ВидОтчета;
	Версия.Валюта          		= СтруктураРасчета.Валюта;	
	Версия.ПериодОтчета    		= СтруктураРасчета.ПериодОтчета;
	Версия.Сценарий        		= СтруктураРасчета.Сценарий;
	Версия.Проект        		= СтруктураРасчета.Проект;
	Версия.Активность      		= Истина;
	Версия.ВидОперации			= Справочники.ВидыОпераций.УчетныеОперации;
	Для Индекс = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		СтруктураРасчета.Свойство("Аналитика"+Индекс, Версия["Аналитика"+Индекс]);
	КонецЦикла; 
	Версия.Записать();
	
	Возврат Версия.Ссылка;
	
КонецФункции

Функция ПодготовитьСтруктуруРасчетаДляЗаписиВерсий(СтрокаРасчета)
	
	ТекОбъектРасчета = Новый Структура;
	
	// Ключевые срезы для поиска и создания версий
	ТекОбъектРасчета.Вставить("Сценарий");
	ТекОбъектРасчета.Вставить("Организация");
	ТекОбъектРасчета.Вставить("УправлениеПериодом");
	ТекОбъектРасчета.Вставить("Проект");
	ТекОбъектРасчета.Вставить("ПериодОтчета");
	ТекОбъектРасчета.Вставить("Валюта");
	
	// Данные регистратора для версий
	ТекОбъектРасчета.Вставить("Регистратор", Регистратор);
	
	// Для записи реквизитов регистров
	ТекОбъектРасчета.Вставить("ПравилоОбработки", СтрокаРасчета.ПравилоОбработки);
	ТекОбъектРасчета.Вставить("ИспользуемаяИБ", Неопределено);
	Если ЗначениеЗаполнено(СпособФормированияОтчета) Тогда
		ТекОбъектРасчета.Вставить("СпособФормированияОтчета", СпособФормированияОтчета);
	Иначе
		ТекОбъектРасчета.Вставить("СпособФормированияОтчета", Перечисления.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки);
	КонецЕсли;
	ТекОбъектРасчета.Вставить("ДатаИзменения", ТекущаяДатаСеанса());
	ТекОбъектРасчета.Вставить("ДатаИзмененияMs",ТекущаяУниверсальнаяДатаВМиллисекундах());
	ТекОбъектРасчета.Вставить("ПоследнийРедактировавший",ПараметрыСеанса.ТекущийПользователь);
	
	// Заполняются из запроса по правилу обработки
	ТекОбъектРасчета.Вставить("ВидОтчета", СтрокаРасчета.ВидОтчета);
	ТекОбъектРасчета.Вставить("СохранятьИсториюИзменений", СтрокаРасчета.СохранятьИсториюИзменений);
	ТекОбъектРасчета.Вставить("МаксАналитикОтчета", СтрокаРасчета.МаксАналитикОтчета);
	
	// Для совместимости с классическим движком
	ТекОбъектРасчета.Вставить("ИдентификаторСеанса", "");
	
	Возврат ТекОбъектРасчета;
	
КонецФункции

Функция ЗагрузитьЛогКомментариевПоказателейВМенеджерВТ(Запрос)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛогИзмененныхКомментариевПоказателейОтчетов.ПравилоОбработки КАК ПравилоОбработки,
		|	ЛогИзмененныхКомментариевПоказателейОтчетов.Показатель КАК Показатель,
		|	ЛогИзмененныхКомментариевПоказателейОтчетов.Сценарий КАК Сценарий,
		|	ЛогИзмененныхКомментариевПоказателейОтчетов.Организация КАК Организация,
		|	ЛогИзмененныхКомментариевПоказателейОтчетов.Проект КАК Проект,
		|	ЛогИзмененныхКомментариевПоказателейОтчетов.Аналитика1 КАК Аналитика1,
		|	ЛогИзмененныхКомментариевПоказателейОтчетов.Аналитика2 КАК Аналитика2,
		|	ЛогИзмененныхКомментариевПоказателейОтчетов.Аналитика3 КАК Аналитика3,
		|	ЛогИзмененныхКомментариевПоказателейОтчетов.Аналитика4 КАК Аналитика4,
		|	ЛогИзмененныхКомментариевПоказателейОтчетов.Аналитика5 КАК Аналитика5,
		|	ЛогИзмененныхКомментариевПоказателейОтчетов.Аналитика6 КАК Аналитика6,
		|	ЛогИзмененныхКомментариевПоказателейОтчетов.АналитикаВалюта КАК АналитикаВалюта,
		|	ЛогИзмененныхКомментариевПоказателейОтчетов.ПериодОтчета КАК ПериодОтчета,
		|	ЛогИзмененныхКомментариевПоказателейОтчетов.Валюта КАК Валюта,
		|	ЛогИзмененныхКомментариевПоказателейОтчетов.Комментарий КАК Комментарий,
		|	ЛогИзмененныхКомментариевПоказателейОтчетов.НомерТранзакции КАК НомерТранзакции
		|ПОМЕСТИТЬ втЛогКомментариевПоказателей
		|ИЗ
		|	РегистрСведений.ЛогИзмененныхКомментариевПоказателейОтчетов КАК ЛогИзмененныхКомментариевПоказателейОтчетов
		|ГДЕ
		|	ЛогИзмененныхКомментариевПоказателейОтчетов.УникальныйИдентификаторСеанса = &УникальныйИдентификаторСеанса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	втЛогКомментариевПоказателей.Показатель КАК Показатель
		|ИЗ
		|	втЛогКомментариевПоказателей КАК втЛогКомментариевПоказателей";
	
	Запрос.УстановитьПараметр("УникальныйИдентификаторСеанса", УникальныйИдентификаторСеанса);	
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ПодготовитьДанныеКомментариевПоказателейДляЗаписи(Запрос, ТекстЗапроса, ТекстИтоговогоЗапроса, ЕстьБлокировкаПоСтатусам)
	
	ТекстАналитики = "
		|	ЗначенияПоказателей.АналитикаВалюта,
		|	ЗначенияПоказателей.Аналитика1,
		|	ЗначенияПоказателей.Аналитика2,
		|	ЗначенияПоказателей.Аналитика3,
		|	ЗначенияПоказателей.Аналитика4,
		|	ЗначенияПоказателей.Аналитика5,
		|	ЗначенияПоказателей.Аналитика6";
	
	Запрос.Текст = "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеВидовОтчетов.СохранятьИсториюИзменений КАК СохранятьИсториюИзменений,
		|	ДанныеВидовОтчетов.МаксАналитикОтчета КАК МаксАналитикОтчета
		|ИЗ
		|	втДанныеВидовОтчетов КАК ДанныеВидовОтчетов
		|
		|ИТОГИ ПО
		|	СохранятьИсториюИзменений";
		
	ВыборкаСохранятьИсторию = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСохранятьИсторию.Следующий() Цикл			
		
		Если ВыборкаСохранятьИсторию.СохранятьИсториюИзменений Тогда
			
			ТекстЗапросаШаблон = "
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики%,
				|	ЗначенияПоказателей.Комментарий КАК Комментарий,
				|	ЗначенияПоказателей.НомерТранзакции КАК НомерТранзакции,
				|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
				|ПОМЕСТИТЬ втДанныеДляРасчета_Комментарии
				|ИЗ
				|	втЛогКомментариевПоказателей%ФильтрПоСтатусам% КАК ЗначенияПоказателей
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеВидовОтчетов КАК ДанныеВидовОтчетов
				|		ПО ЗначенияПоказателей.ПравилоОбработки = ДанныеВидовОтчетов.ПравилоОбработки
				|ГДЕ
				|	ДанныеВидовОтчетов.СохранятьИсториюИзменений = ИСТИНА
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики%,				
				|	МАКСИМУМ(ЗначенияПоказателей.НомерТранзакции) КАК НомерТранзакции,
				|	МАКСИМУМ(ЗначенияПоказателей.НомерЗаписи) КАК НомерЗаписи
				|ПОМЕСТИТЬ втМаксимальныеНомераЗаписей_Комментарии
				|ИЗ
				|	втДанныеДляРасчета_Комментарии КАК ЗначенияПоказателей
				|
				|СГРУППИРОВАТЬ ПО %ТекстПоля% %ТекстАналитики%
				|;
				|";
			
			Если ЕстьБлокировкаПоСтатусам Тогда
				ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "%ФильтрПоСтатусам%", "ФильтрПоСтатусам");
			Иначе
				ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "%ФильтрПоСтатусам%", "");
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстЗапросаШаблон, "%ТекстАналитики%", ТекстАналитики);
			
			ТекстИтоговогоЗапросаШаблон = "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики%,
				|	ДанныеУправленияПериодом.УправлениеПериодом КАК УправлениеПериодом,
				|	ЗначенияПоказателей.Комментарий КАК Значение,
				|	0 КАК ЗначениеВалюта,
				|	-3 КАК ИндексРегистраПоказателя,
				|	ЛОЖЬ КАК ИтоговоеЗначение
				|ИЗ
				|	втДанныеДляРасчета_Комментарии КАК ЗначенияПоказателей
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМаксимальныеНомераЗаписей_Комментарии КАК МаксимальныеНомераЗаписей
				|			ПО ЗначенияПоказателей.ПравилоОбработки = МаксимальныеНомераЗаписей.ПравилоОбработки
				|			И ЗначенияПоказателей.Показатель = МаксимальныеНомераЗаписей.Показатель
				|			И ЗначенияПоказателей.Сценарий = МаксимальныеНомераЗаписей.Сценарий
				|			И ЗначенияПоказателей.Организация = МаксимальныеНомераЗаписей.Организация
				|			И ЗначенияПоказателей.Проект = МаксимальныеНомераЗаписей.Проект
				|			И ЗначенияПоказателей.ПериодОтчета = МаксимальныеНомераЗаписей.ПериодОтчета
				|			И ЗначенияПоказателей.Валюта = МаксимальныеНомераЗаписей.Валюта			
				|			И ЗначенияПоказателей.АналитикаВалюта = МаксимальныеНомераЗаписей.АналитикаВалюта
				|			И ЗначенияПоказателей.Аналитика1 = МаксимальныеНомераЗаписей.Аналитика1
				|			И ЗначенияПоказателей.Аналитика2 = МаксимальныеНомераЗаписей.Аналитика2
				|			И ЗначенияПоказателей.Аналитика3 = МаксимальныеНомераЗаписей.Аналитика3
				|			И ЗначенияПоказателей.Аналитика4 = МаксимальныеНомераЗаписей.Аналитика4
				|			И ЗначенияПоказателей.Аналитика5 = МаксимальныеНомераЗаписей.Аналитика5
				|			И ЗначенияПоказателей.Аналитика6 = МаксимальныеНомераЗаписей.Аналитика6
				|			И ЗначенияПоказателей.НомерТранзакции = МаксимальныеНомераЗаписей.НомерТранзакции
				|			И ЗначенияПоказателей.НомерЗаписи = МаксимальныеНомераЗаписей.НомерЗаписи
				|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеУправленияПериодом КАК ДанныеУправленияПериодом
				|		ПО ЗначенияПоказателей.Сценарий = ДанныеУправленияПериодом.Сценарий
				|			И ЗначенияПоказателей.Организация = ДанныеУправленияПериодом.Организация
				|			И ЗначенияПоказателей.ПериодОтчета = ДанныеУправленияПериодом.ПериодОтчета
				|";
			
			ТекстИтоговогоЗапроса = ТекстИтоговогоЗапроса + СтрЗаменить(ТекстИтоговогоЗапросаШаблон, "%ТекстАналитики%", ТекстАналитики);
			
		Иначе
			
			// Если отчет без хранения истории необходимо поднять все текущие комментарии для всех аналитик
			ВыборкаКлючевыеАналитики = ВыборкаСохранятьИсторию.Выбрать();
			Пока ВыборкаКлючевыеАналитики.Следующий() Цикл
				
				МаксАналитикОтчета = ВыборкаКлючевыеАналитики.МаксАналитикОтчета;
				ТекстКлючевыеАналитикиСоединение = "";
				Для Сч = 1 По МаксАналитикОтчета Цикл
					ТекстКлючевыеАналитикиСоединение = ТекстКлючевыеАналитикиСоединение + "
					|		И ВерсииЗначенийПоказателей.Аналитика" + Сч + " = ЗначенияПоказателей.Аналитика" + Сч;
				КонецЦикла;
				
				ТекстЗапросаШаблон = "	
		            |////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики%,
					|	ЗначенияПоказателей.Комментарий КАК Комментарий,
					|	ЗначенияПоказателей.НомерТранзакции КАК НомерТранзакции,
					|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
					|ПОМЕСТИТЬ втДанныеДляРасчетаНеобработанные_Комментарии_%МаксАналитикОтчета%
					|ИЗ
					|	втЛогКомментариевПоказателей КАК ЗначенияПоказателей
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеВидовОтчетов КАК ДанныеВидовОтчетов
					|		ПО ЗначенияПоказателей.ПравилоОбработки = ДанныеВидовОтчетов.ПравилоОбработки
					|ГДЕ
					|	ДанныеВидовОтчетов.СохранятьИсториюИзменений = ЛОЖЬ
					|	И ДанныеВидовОтчетов.МаксАналитикОтчета = %МаксАналитикОтчета%
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики%,				
					|	МАКСИМУМ(ЗначенияПоказателей.НомерТранзакции) КАК НомерТранзакции,
					|	МАКСИМУМ(ЗначенияПоказателей.НомерЗаписи) КАК НомерЗаписи
					|ПОМЕСТИТЬ втМаксимальныеНомераЗаписейНеобработанные_Комментарии_%МаксАналитикОтчета%
					|ИЗ
					|	втДанныеДляРасчетаНеобработанные_Комментарии_%МаксАналитикОтчета% КАК ЗначенияПоказателей
					|
					|СГРУППИРОВАТЬ ПО %ТекстПоля% %ТекстАналитики%
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики%,
					|	ЗначенияПоказателей.Комментарий КАК Комментарий
					|ПОМЕСТИТЬ втДанныеДляРасчета_Комментарии_%МаксАналитикОтчета%
					|ИЗ
					|	втДанныеДляРасчетаНеобработанные_Комментарии_%МаксАналитикОтчета% КАК ЗначенияПоказателей
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМаксимальныеНомераЗаписейНеобработанные_Комментарии_%МаксАналитикОтчета% КАК МаксимальныеНомераЗаписей
					|			ПО ЗначенияПоказателей.ПравилоОбработки = МаксимальныеНомераЗаписей.ПравилоОбработки
					|			И ЗначенияПоказателей.Показатель = МаксимальныеНомераЗаписей.Показатель
					|			И ЗначенияПоказателей.Сценарий = МаксимальныеНомераЗаписей.Сценарий
					|			И ЗначенияПоказателей.Организация = МаксимальныеНомераЗаписей.Организация
					|			И ЗначенияПоказателей.Проект = МаксимальныеНомераЗаписей.Проект
					|			И ЗначенияПоказателей.ПериодОтчета = МаксимальныеНомераЗаписей.ПериодОтчета
					|			И ЗначенияПоказателей.Валюта = МаксимальныеНомераЗаписей.Валюта			
					|			И ЗначенияПоказателей.АналитикаВалюта = МаксимальныеНомераЗаписей.АналитикаВалюта
					|			И ЗначенияПоказателей.Аналитика1 = МаксимальныеНомераЗаписей.Аналитика1
					|			И ЗначенияПоказателей.Аналитика2 = МаксимальныеНомераЗаписей.Аналитика2
					|			И ЗначенияПоказателей.Аналитика3 = МаксимальныеНомераЗаписей.Аналитика3
					|			И ЗначенияПоказателей.Аналитика4 = МаксимальныеНомераЗаписей.Аналитика4
					|			И ЗначенияПоказателей.Аналитика5 = МаксимальныеНомераЗаписей.Аналитика5
					|			И ЗначенияПоказателей.Аналитика6 = МаксимальныеНомераЗаписей.Аналитика6
					|			И ЗначенияПоказателей.НомерТранзакции = МаксимальныеНомераЗаписей.НомерТранзакции
					|			И ЗначенияПоказателей.НомерЗаписи = МаксимальныеНомераЗаписей.НомерЗаписи
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики%,
					|	ЗначенияПоказателей.Комментарий КАК Комментарий,
					|	10000000000 КАК НомерЗаписи
					|ПОМЕСТИТЬ втДанныеДляРасчетаДополненные_Комментарии_%МаксАналитикОтчета%
					|ИЗ
					|	втДанныеДляРасчета_Комментарии_%МаксАналитикОтчета% КАК ЗначенияПоказателей
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ РАЗЛИЧНЫЕ %ТекстПоля%
					|	ЗначенияПоказателейОтчетов.АналитикаВалюта,
					|	ЗначенияПоказателейОтчетов.Аналитика1,
					|	ЗначенияПоказателейОтчетов.Аналитика2,
					|	ЗначенияПоказателейОтчетов.Аналитика3,
					|	ЗначенияПоказателейОтчетов.Аналитика4,
					|	ЗначенияПоказателейОтчетов.Аналитика5,
					|	ЗначенияПоказателейОтчетов.Аналитика6,		
					|	ЗначенияПоказателейОтчетов.Комментарий КАК Комментарий,
					|	ВерсииЗначенийПоказателей.Код КАК НомерЗаписи
					|ИЗ
					|	РегистрСведений.КомментарииЗначенийПоказателей КАК ЗначенияПоказателейОтчетов
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
					|		ПО ЗначенияПоказателейОтчетов.Версия = ВерсииЗначенийПоказателей.Ссылка
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеДляРасчета_Комментарии_%МаксАналитикОтчета% КАК ЗначенияПоказателей
					|		ПО ВерсииЗначенийПоказателей.ВидОтчета = ЗначенияПоказателей.ПравилоОбработки.Владелец
					|			И ВерсииЗначенийПоказателей.Сценарий = ЗначенияПоказателей.Сценарий
					|			И ВерсииЗначенийПоказателей.Организация = ЗначенияПоказателей.Организация
					|			И ВерсииЗначенийПоказателей.Проект = ЗначенияПоказателей.Проект
					|			И ВерсииЗначенийПоказателей.ПериодОтчета = ЗначенияПоказателей.ПериодОтчета
					|			И ВерсииЗначенийПоказателей.Валюта = ЗначенияПоказателей.Валюта %ТекстКлючевыеАналитикиСоединение% 
					|			И ЗначенияПоказателей.Показатель = ЗначенияПоказателейОтчетов.Показатель 
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики%,				
					|	МАКСИМУМ(ЗначенияПоказателей.НомерЗаписи) КАК НомерЗаписи
					|ПОМЕСТИТЬ втМаксимальныеНомераЗаписейДополненные_Комментарии_%МаксАналитикОтчета%
					|ИЗ
					|	втДанныеДляРасчетаДополненные_Комментарии_%МаксАналитикОтчета% КАК ЗначенияПоказателей
					|
					|СГРУППИРОВАТЬ ПО %ТекстПоля% %ТекстАналитики%
					|;
					|";
				
				ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "%МаксАналитикОтчета%", МаксАналитикОтчета);
				ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "%ТекстКлючевыеАналитикиСоединение%", ТекстКлючевыеАналитикиСоединение);
				ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстЗапросаШаблон, "%ТекстАналитики%", ТекстАналитики);
	
				ТекстИтоговогоЗапросаШаблон = "
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики%,
					|	ДанныеУправленияПериодом.УправлениеПериодом КАК УправлениеПериодом,
					|	ЗначенияПоказателей.Комментарий КАК Значение,
					|	0 КАК ЗначениеВалюта,
					|	-3 КАК ИндексРегистраПоказателя,
					|	ЛОЖЬ КАК ИтоговоеЗначение
					|ИЗ
					|	втДанныеДляРасчетаДополненные_Комментарии_%МаксАналитикОтчета% КАК ЗначенияПоказателей
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМаксимальныеНомераЗаписейДополненные_Комментарии_%МаксАналитикОтчета% КАК МаксимальныеНомераЗаписей
					|			ПО ЗначенияПоказателей.ПравилоОбработки = МаксимальныеНомераЗаписей.ПравилоОбработки
					|			И ЗначенияПоказателей.Показатель = МаксимальныеНомераЗаписей.Показатель
					|			И ЗначенияПоказателей.Сценарий = МаксимальныеНомераЗаписей.Сценарий
					|			И ЗначенияПоказателей.Организация = МаксимальныеНомераЗаписей.Организация
					|			И ЗначенияПоказателей.Проект = МаксимальныеНомераЗаписей.Проект
					|			И ЗначенияПоказателей.ПериодОтчета = МаксимальныеНомераЗаписей.ПериодОтчета
					|			И ЗначенияПоказателей.Валюта = МаксимальныеНомераЗаписей.Валюта			
					|			И ЗначенияПоказателей.АналитикаВалюта = МаксимальныеНомераЗаписей.АналитикаВалюта
					|			И ЗначенияПоказателей.Аналитика1 = МаксимальныеНомераЗаписей.Аналитика1
					|			И ЗначенияПоказателей.Аналитика2 = МаксимальныеНомераЗаписей.Аналитика2
					|			И ЗначенияПоказателей.Аналитика3 = МаксимальныеНомераЗаписей.Аналитика3
					|			И ЗначенияПоказателей.Аналитика4 = МаксимальныеНомераЗаписей.Аналитика4
					|			И ЗначенияПоказателей.Аналитика5 = МаксимальныеНомераЗаписей.Аналитика5
					|			И ЗначенияПоказателей.Аналитика6 = МаксимальныеНомераЗаписей.Аналитика6
					|			И ЗначенияПоказателей.НомерЗаписи = МаксимальныеНомераЗаписей.НомерЗаписи
					|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеУправленияПериодом КАК ДанныеУправленияПериодом
					|		ПО ЗначенияПоказателей.Сценарий = ДанныеУправленияПериодом.Сценарий
					|			И ЗначенияПоказателей.Организация = ДанныеУправленияПериодом.Организация
					|			И ЗначенияПоказателей.ПериодОтчета = ДанныеУправленияПериодом.ПериодОтчета
					|";
				
				ТекстИтоговогоЗапросаШаблон = СтрЗаменить(ТекстИтоговогоЗапросаШаблон, "%МаксАналитикОтчета%", МаксАналитикОтчета);
				ТекстИтоговогоЗапроса = ТекстИтоговогоЗапроса + СтрЗаменить(ТекстИтоговогоЗапросаШаблон, "%ТекстАналитики%", ТекстАналитики);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьДанныеНечисловыхИтоговыхПоказателейДляЗаписи(ТекстЗапроса, ТекстИтоговогоЗапроса, ЕстьБлокировкаПоСтатусам)
	
	ТекстАналитики = "
		|	ЗначенияПоказателей.АналитикаВалюта,
		|	ЗначенияПоказателей.Аналитика1,
		|	ЗначенияПоказателей.Аналитика2,
		|	ЗначенияПоказателей.Аналитика3,
		|	ЗначенияПоказателей.Аналитика4,
		|	ЗначенияПоказателей.Аналитика5,
		|	ЗначенияПоказателей.Аналитика6";
	
	////////////////////////////////////////////////////////////////////////////////
	// Запись нечисловых, необходимо агрегировать по номеру транзакции, чтобы не было дублирующих записей
	ТекстЗапросаШаблон = "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики%,				
		|	ЗначенияПоказателей.ЗначениеНечисловое КАК Значение,
		|	ЗначенияПоказателей.НомерТранзакции КАК НомерТранзакции,
		|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
		|ПОМЕСТИТЬ втПронумерованныеЗаписи_НечисловыеИтог
		|ИЗ
		|	втЛогИзмененныхПоказателей%ФильтрПоСтатусам% КАК ЗначенияПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеПоказателей КАК ДанныеПоказателей
		|		ПО ЗначенияПоказателей.ПравилоОбработки = ДанныеПоказателей.ПравилоОбработки
		|		И ЗначенияПоказателей.Показатель = ДанныеПоказателей.Показатель
		|ГДЕ
		|	ДанныеПоказателей.ИндексРегистраПоказателя = -11
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики%,				
		|	МАКСИМУМ(ЗначенияПоказателей.НомерТранзакции) КАК НомерТранзакции,
		|	МАКСИМУМ(ЗначенияПоказателей.НомерЗаписи) КАК НомерЗаписи
		|ПОМЕСТИТЬ втМаксимальныеНомераЗаписей_НечисловыеИтог
		|ИЗ
		|	втПронумерованныеЗаписи_НечисловыеИтог КАК ЗначенияПоказателей
		|
		|СГРУППИРОВАТЬ ПО %ТекстПоля% %ТекстАналитики%
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики%,
		|	ЗначенияПоказателей.Значение КАК Значение
		|ПОМЕСТИТЬ втДанныеДляРасчета_НечисловыеИтог
		|ИЗ
		|	втПронумерованныеЗаписи_НечисловыеИтог КАК ЗначенияПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМаксимальныеНомераЗаписей_НечисловыеИтог КАК МаксимальныеНомераЗаписей
		|			ПО ЗначенияПоказателей.ПравилоОбработки = МаксимальныеНомераЗаписей.ПравилоОбработки
		|			И ЗначенияПоказателей.Сценарий = МаксимальныеНомераЗаписей.Сценарий
		|			И ЗначенияПоказателей.Организация = МаксимальныеНомераЗаписей.Организация
		|			И ЗначенияПоказателей.Проект = МаксимальныеНомераЗаписей.Проект
		|			И ЗначенияПоказателей.ПериодОтчета = МаксимальныеНомераЗаписей.ПериодОтчета
		|			И ЗначенияПоказателей.Валюта = МаксимальныеНомераЗаписей.Валюта
		|			И ЗначенияПоказателей.Показатель = МаксимальныеНомераЗаписей.Показатель
		|			И ЗначенияПоказателей.АналитикаВалюта = МаксимальныеНомераЗаписей.АналитикаВалюта
		|			И ЗначенияПоказателей.Аналитика1 = МаксимальныеНомераЗаписей.Аналитика1
		|			И ЗначенияПоказателей.Аналитика2 = МаксимальныеНомераЗаписей.Аналитика2
		|			И ЗначенияПоказателей.Аналитика3 = МаксимальныеНомераЗаписей.Аналитика3
		|			И ЗначенияПоказателей.Аналитика4 = МаксимальныеНомераЗаписей.Аналитика4
		|			И ЗначенияПоказателей.Аналитика5 = МаксимальныеНомераЗаписей.Аналитика5
		|			И ЗначенияПоказателей.Аналитика6 = МаксимальныеНомераЗаписей.Аналитика6
		|			И ЗначенияПоказателей.НомерТранзакции = МаксимальныеНомераЗаписей.НомерТранзакции
		|			И ЗначенияПоказателей.НомерЗаписи = МаксимальныеНомераЗаписей.НомерЗаписи
		|;
		|";
	
	Если ЕстьБлокировкаПоСтатусам Тогда
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "%ФильтрПоСтатусам%", "ФильтрПоСтатусам");
	Иначе
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "%ФильтрПоСтатусам%", "");
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстЗапросаШаблон, "%ТекстАналитики%", ТекстАналитики);
	
	////////////////////////////////////////////////////////////////////////////////
	// Добавим получившиеся записи в итоговый запрос
	ТекстИтоговогоЗапросаШаблон = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики%,
		|	ДанныеУправленияПериодом.УправлениеПериодом КАК УправлениеПериодом,
		|	ЗначенияПоказателей.Значение КАК Значение,
		|	0 КАК ЗначениеВалюта,
		|	-1 КАК ИндексРегистраПоказателя,
		|	ИСТИНА КАК ИтоговоеЗначение
		|ИЗ
		|	втДанныеДляРасчета_НечисловыеИтог КАК ЗначенияПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеУправленияПериодом КАК ДанныеУправленияПериодом
		|		ПО ЗначенияПоказателей.Сценарий = ДанныеУправленияПериодом.Сценарий
		|			И ЗначенияПоказателей.Организация = ДанныеУправленияПериодом.Организация
		|			И ЗначенияПоказателей.ПериодОтчета = ДанныеУправленияПериодом.ПериодОтчета
		|";

	ТекстИтоговогоЗапроса = ТекстИтоговогоЗапроса + СтрЗаменить(ТекстИтоговогоЗапросаШаблон, "%ТекстАналитики%", ТекстАналитики);	
	
КонецПроцедуры

Процедура ПодготовитьДанныеНечисловыхПоказателейДляЗаписи(ВыборкаИндексы, ТекстЗапроса, ТекстИтоговогоЗапроса, ЕстьБлокировкаПоСтатусам)
	
	ТекстАналитики = "
		|	ЗначенияПоказателей.АналитикаВалюта,
		|	ЗначенияПоказателей.Аналитика1,
		|	ЗначенияПоказателей.Аналитика2,
		|	ЗначенияПоказателей.Аналитика3,
		|	ЗначенияПоказателей.Аналитика4,
		|	ЗначенияПоказателей.Аналитика5,
		|	ЗначенияПоказателей.Аналитика6";
	
	ТекстИтоговогоЗапросаШаблон = "";
	
	////////////////////////////////////////////////////////////////////////////////
	// Запись нечисловых, необходимо агрегировать по номеру транзакции, чтобы не было дублирующих записей
	ТекстЗапросаШаблон = "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики%,
		|	ДанныеВидовОтчетов.ВидОтчета КАК ВидОтчета,
		|	ДанныеВидовОтчетов.СохранятьИсториюИзменений КАК СохранятьИсториюИзменений,
		|	ДанныеВидовОтчетов.МаксАналитикОтчета КАК МаксАналитикОтчета,
		|	ДанныеПоказателей.ВидИтога КАК ВидИтога,
		|	ДанныеПоказателей.ТипЗначения КАК ТипЗначения,
		|	ЗначенияПоказателей.ЗначениеНечисловое КАК Значение,
		|	ЗначенияПоказателей.НомерТранзакции КАК НомерТранзакции,
		|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
		|ПОМЕСТИТЬ втДанныеДляРасчетаНеобработанные_Нечисловые
		|ИЗ
		|	втЛогИзмененныхПоказателей%ФильтрПоСтатусам% КАК ЗначенияПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеВидовОтчетов КАК ДанныеВидовОтчетов
		|		ПО ЗначенияПоказателей.ПравилоОбработки = ДанныеВидовОтчетов.ПравилоОбработки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеПоказателей КАК ДанныеПоказателей
		|		ПО ЗначенияПоказателей.ПравилоОбработки = ДанныеПоказателей.ПравилоОбработки
		|		И ЗначенияПоказателей.Показатель = ДанныеПоказателей.Показатель
		|ГДЕ
		|	ДанныеПоказателей.ИндексРегистраПоказателя = -1
		|	
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики%,				
		|	МАКСИМУМ(ЗначенияПоказателей.НомерТранзакции) КАК НомерТранзакции,
		|	МАКСИМУМ(ЗначенияПоказателей.НомерЗаписи) КАК НомерЗаписи
		|ПОМЕСТИТЬ втМаксимальныеНомераЗаписейНеобработанные_Нечисловые
		|ИЗ
		|	втДанныеДляРасчетаНеобработанные_Нечисловые КАК ЗначенияПоказателей
		|
		|СГРУППИРОВАТЬ ПО %ТекстПоля% %ТекстАналитики%
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики%,
		|	ЗначенияПоказателей.ВидОтчета КАК ВидОтчета,
		|	ЗначенияПоказателей.СохранятьИсториюИзменений КАК СохранятьИсториюИзменений,
		|	ЗначенияПоказателей.МаксАналитикОтчета КАК МаксАналитикОтчета,
		|	ЗначенияПоказателей.ВидИтога КАК ВидИтога,
		|	ЗначенияПоказателей.ТипЗначения КАК ТипЗначения,
		|	ЗначенияПоказателей.Значение КАК Значение
		|ПОМЕСТИТЬ втДанныеДляРасчета_Нечисловые
		|ИЗ
		|	втДанныеДляРасчетаНеобработанные_Нечисловые КАК ЗначенияПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМаксимальныеНомераЗаписейНеобработанные_Нечисловые КАК МаксимальныеНомераЗаписей
		|			ПО ЗначенияПоказателей.ПравилоОбработки = МаксимальныеНомераЗаписей.ПравилоОбработки
		|			И ЗначенияПоказателей.Сценарий = МаксимальныеНомераЗаписей.Сценарий
		|			И ЗначенияПоказателей.Организация = МаксимальныеНомераЗаписей.Организация
		|			И ЗначенияПоказателей.Проект = МаксимальныеНомераЗаписей.Проект
		|			И ЗначенияПоказателей.ПериодОтчета = МаксимальныеНомераЗаписей.ПериодОтчета
		|			И ЗначенияПоказателей.Валюта = МаксимальныеНомераЗаписей.Валюта
		|			И ЗначенияПоказателей.Показатель = МаксимальныеНомераЗаписей.Показатель
		|			И ЗначенияПоказателей.АналитикаВалюта = МаксимальныеНомераЗаписей.АналитикаВалюта
		|			И ЗначенияПоказателей.Аналитика1 = МаксимальныеНомераЗаписей.Аналитика1
		|			И ЗначенияПоказателей.Аналитика2 = МаксимальныеНомераЗаписей.Аналитика2
		|			И ЗначенияПоказателей.Аналитика3 = МаксимальныеНомераЗаписей.Аналитика3
		|			И ЗначенияПоказателей.Аналитика4 = МаксимальныеНомераЗаписей.Аналитика4
		|			И ЗначенияПоказателей.Аналитика5 = МаксимальныеНомераЗаписей.Аналитика5
		|			И ЗначенияПоказателей.Аналитика6 = МаксимальныеНомераЗаписей.Аналитика6
		|			И ЗначенияПоказателей.НомерТранзакции = МаксимальныеНомераЗаписей.НомерТранзакции
		|			И ЗначенияПоказателей.НомерЗаписи = МаксимальныеНомераЗаписей.НомерЗаписи
		|;
		|";
	
	Если ЕстьБлокировкаПоСтатусам Тогда
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "%ФильтрПоСтатусам%", "ФильтрПоСтатусам");
	Иначе
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "%ФильтрПоСтатусам%", "");
	КонецЕсли;
			
	ВыборкаКлючевыеАналитики = ВыборкаИндексы.Выбрать();
	Пока ВыборкаКлючевыеАналитики.Следующий() Цикл
		
		МаксАналитикОтчета = ВыборкаКлючевыеАналитики.МаксАналитикОтчета;
		
		ТекстКлючевыеАналитикиСоединение = "";
		ТекстАналитикиСинтетика = "";
		ТекстАналитикиСинтетикаНеопределено = "";
		
		Для Сч = 1 По МаксАналитикОтчета Цикл
			ТекстКлючевыеАналитикиСоединение = ТекстКлючевыеАналитикиСоединение + "
				|		И ВерсииЗначенийПоказателей.Аналитика" + Сч + " = ЗначенияПоказателей.Аналитика" + Сч;
			ТекстАналитикиСинтетика = ТекстАналитикиСинтетика + "
				|	ЗначенияПоказателей.Аналитика" + Сч + ",";
		КонецЦикла;
		Для Сч = МаксАналитикОтчета+1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			ТекстАналитикиСинтетикаНеопределено = ТекстАналитикиСинтетикаНеопределено + "
				|	НЕОПРЕДЕЛЕНО КАК Аналитика" + Сч + ",";
		КонецЦикла;	
	
	    ТекстЗапросаШаблон = ТекстЗапросаШаблон + "
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики%,
			|	ЗначенияПоказателей.СохранятьИсториюИзменений КАК СохранятьИсториюИзменений,
			|	ЗначенияПоказателей.ВидИтога КАК ВидИтога,
			|	ЗначенияПоказателей.ТипЗначения КАК ТипЗначения,
			|	ЗначенияПоказателей.Значение КАК Значение,
			|	10000000000 КАК НомерЗаписи
			|ПОМЕСТИТЬ втПронумерованныеЗаписи_Нечисловые_%МаксАналитикОтчета%
			|ИЗ
			|	втДанныеДляРасчета_Нечисловые КАК ЗначенияПоказателей
			|ГДЕ
			|	ЗначенияПоказателей.МаксАналитикОтчета = %МаксАналитикОтчета%
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ %ТекстПоля%
			|	ЗначенияПоказателейОтчетов.АналитикаВалюта,
			|	ЗначенияПоказателейОтчетов.Аналитика1,
			|	ЗначенияПоказателейОтчетов.Аналитика2,
			|	ЗначенияПоказателейОтчетов.Аналитика3,
			|	ЗначенияПоказателейОтчетов.Аналитика4,
			|	ЗначенияПоказателейОтчетов.Аналитика5,
			|	ЗначенияПоказателейОтчетов.Аналитика6,
			|	ЗначенияПоказателей.СохранятьИсториюИзменений КАК СохранятьИсториюИзменений,
			|	ЗначенияПоказателей.ВидИтога КАК ВидИтога,
			|	ЗначенияПоказателей.ТипЗначения КАК ТипЗначения,
			|	ЗначенияПоказателейОтчетов.Значение КАК Значение,
			|	ВерсииЗначенийПоказателей.Код КАК НомерЗаписи
			|ИЗ
			|	РегистрСведений.ЗначенияПоказателейОтчетовНечисловые КАК ЗначенияПоказателейОтчетов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
			|			ПО ЗначенияПоказателейОтчетов.Версия = ВерсииЗначенийПоказателей.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеДляРасчета_Нечисловые КАК ЗначенияПоказателей
			|			ПО ВерсииЗначенийПоказателей.ВидОтчета = ЗначенияПоказателей.ВидОтчета
			|			И ВерсииЗначенийПоказателей.Сценарий = ЗначенияПоказателей.Сценарий
			|			И ВерсииЗначенийПоказателей.Организация = ЗначенияПоказателей.Организация
			|			И ВерсииЗначенийПоказателей.Проект = ЗначенияПоказателей.Проект
			|			И ВерсииЗначенийПоказателей.ПериодОтчета = ЗначенияПоказателей.ПериодОтчета
			|			И ВерсииЗначенийПоказателей.Валюта = ЗначенияПоказателей.Валюта %ТекстКлючевыеАналитикиСоединение%  
			|			И ЗначенияПоказателей.Показатель = ЗначенияПоказателейОтчетов.Показатель
			|			И ЗначенияПоказателей.МаксАналитикОтчета = %МаксАналитикОтчета%
			|			И НЕ ЗначенияПоказателейОтчетов.ИтоговоеЗначение
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики%,				
			|	МАКСИМУМ(ЗначенияПоказателей.НомерЗаписи) КАК НомерЗаписи
			|ПОМЕСТИТЬ втМаксимальныеНомераЗаписей_Нечисловые_%МаксАналитикОтчета%
			|ИЗ
			|	втПронумерованныеЗаписи_Нечисловые_%МаксАналитикОтчета% КАК ЗначенияПоказателей
			|
			|СГРУППИРОВАТЬ ПО %ТекстПоля% %ТекстАналитики%
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики%,
			|	ЗначенияПоказателей.СохранятьИсториюИзменений КАК СохранятьИсториюИзменений,
			|	ЗначенияПоказателей.ВидИтога КАК ВидИтога,
			|	ЗначенияПоказателей.ТипЗначения КАК ТипЗначения,
			|	ЗначенияПоказателей.Значение КАК Значение
			|ПОМЕСТИТЬ втВсеЗначенияПоказателей_Нечисловые_%МаксАналитикОтчета%
			|ИЗ
			|	втПронумерованныеЗаписи_Нечисловые_%МаксАналитикОтчета% КАК ЗначенияПоказателей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМаксимальныеНомераЗаписей_Нечисловые_%МаксАналитикОтчета% КАК МаксимальныеНомераЗаписей
			|			ПО ЗначенияПоказателей.ПравилоОбработки = МаксимальныеНомераЗаписей.ПравилоОбработки
			|			И ЗначенияПоказателей.Сценарий = МаксимальныеНомераЗаписей.Сценарий
			|			И ЗначенияПоказателей.Организация = МаксимальныеНомераЗаписей.Организация
			|			И ЗначенияПоказателей.Проект = МаксимальныеНомераЗаписей.Проект
			|			И ЗначенияПоказателей.ПериодОтчета = МаксимальныеНомераЗаписей.ПериодОтчета
			|			И ЗначенияПоказателей.Валюта = МаксимальныеНомераЗаписей.Валюта
			|			И ЗначенияПоказателей.Показатель = МаксимальныеНомераЗаписей.Показатель
			|			И ЗначенияПоказателей.АналитикаВалюта = МаксимальныеНомераЗаписей.АналитикаВалюта
			|			И ЗначенияПоказателей.Аналитика1 = МаксимальныеНомераЗаписей.Аналитика1
			|			И ЗначенияПоказателей.Аналитика2 = МаксимальныеНомераЗаписей.Аналитика2
			|			И ЗначенияПоказателей.Аналитика3 = МаксимальныеНомераЗаписей.Аналитика3
			|			И ЗначенияПоказателей.Аналитика4 = МаксимальныеНомераЗаписей.Аналитика4
			|			И ЗначенияПоказателей.Аналитика5 = МаксимальныеНомераЗаписей.Аналитика5
			|			И ЗначенияПоказателей.Аналитика6 = МаксимальныеНомераЗаписей.Аналитика6
			|			И ЗначенияПоказателей.НомерЗаписи = МаксимальныеНомераЗаписей.НомерЗаписи
			|;
			|";
	
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "%МаксАналитикОтчета%", МаксАналитикОтчета);
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "%ТекстКлючевыеАналитикиСоединение%", ТекстКлючевыеАналитикиСоединение);		
	
		////////////////////////////////////////////////////////////////////////////////
		// Сделаем расчет синтетических итогов
					
		ТекстИтоговогоЗапросаШаблон = ТекстИтоговогоЗапросаШаблон + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ %ТекстПоля% 
			|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК АналитикаВалюта, %ТекстАналитикиСинтетика% %ТекстАналитикиСинтетикаНеопределено%
			|	ДанныеУправленияПериодом.УправлениеПериодом КАК УправлениеПериодом,
			|	ВЫБОР
			|		КОГДА ЗначенияПоказателей.ВидИтога = ЗНАЧЕНИЕ(Перечисление.ВидыИтоговПоказателя.НеРассчитывается)
			|			ТОГДА НЕОПРЕДЕЛЕНО
			|		КОГДА ЗначенияПоказателей.ВидИтога = ЗНАЧЕНИЕ(Перечисление.ВидыИтоговПоказателя.Максимум)
			|			ТОГДА МАКСИМУМ(ЗначенияПоказателей.Значение)
			|		КОГДА ЗначенияПоказателей.ВидИтога = ЗНАЧЕНИЕ(Перечисление.ВидыИтоговПоказателя.Минимум)
			|			ТОГДА МИНИМУМ(ЗначенияПоказателей.Значение)
			|		КОГДА ЗначенияПоказателей.ВидИтога = ЗНАЧЕНИЕ(Перечисление.ВидыИтоговПоказателя.Сумма)
			|			И ЗначенияПоказателей.ТипЗначения = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийПоказателейОтчетов.Дата)
			|			ТОГДА МИНИМУМ(ЗначенияПоказателей.Значение)
			|		КОГДА ЗначенияПоказателей.ТипЗначения = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийПоказателейОтчетов.Дата)
			|			ТОГДА МАКСИМУМ(ЗначенияПоказателей.Значение)
			|		КОГДА ЗначенияПоказателей.ТипЗначения = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийПоказателейОтчетов.Булево)
			|			ТОГДА МАКСИМУМ(ЗначенияПоказателей.Значение)
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ КАК Значение,
			|	0 КАК ЗначениеВалюта,
			|	-1 КАК ИндексРегистраПоказателя,
			|	ИСТИНА КАК ИтоговоеЗначение
			|ИЗ
			|	втВсеЗначенияПоказателей_Нечисловые_%МаксАналитикОтчета% КАК ЗначенияПоказателей
			|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеУправленияПериодом КАК ДанныеУправленияПериодом
			|		ПО ЗначенияПоказателей.Сценарий = ДанныеУправленияПериодом.Сценарий
			|			И ЗначенияПоказателей.Организация = ДанныеУправленияПериодом.Организация
			|			И ЗначенияПоказателей.ПериодОтчета = ДанныеУправленияПериодом.ПериодОтчета
			|
			|СГРУППИРОВАТЬ ПО %ТекстПоля% %ТекстАналитикиСинтетика%
			|	ЗначенияПоказателей.ВидИтога,
			|	ЗначенияПоказателей.ТипЗначения,
			|	ДанныеУправленияПериодом.УправлениеПериодом
			|";	
			
		Если НЕ ВыборкаИндексы.СохранятьИсториюИзменений Тогда
			// Есть виды отчетов без сохранения истории изменений
			// Добавим все значения показателей в результирующую таблицу
			ТекстИтоговогоЗапросаШаблон = ТекстИтоговогоЗапросаШаблон + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики%,
				|	ДанныеУправленияПериодом.УправлениеПериодом КАК УправленияПериодом,
				|	ЗначенияПоказателей.Значение КАК Значение,
				|	0 КАК ЗначениеВалюта,
				|	-1 КАК ИндексРегистраПоказателя,
				|	ЛОЖЬ КАК ИтоговоеЗначение
				|ИЗ
				|	втВсеЗначенияПоказателей_Нечисловые_%МаксАналитикОтчета% КАК ЗначенияПоказателей
				|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеУправленияПериодом КАК ДанныеУправленияПериодом
				|		ПО ЗначенияПоказателей.Сценарий = ДанныеУправленияПериодом.Сценарий
				|			И ЗначенияПоказателей.Организация = ДанныеУправленияПериодом.Организация
				|			И ЗначенияПоказателей.ПериодОтчета = ДанныеУправленияПериодом.ПериодОтчета
				|ГДЕ
				|	НЕ ЗначенияПоказателей.СохранятьИсториюИзменений
				|";
		КонецЕсли;
		
		ТекстИтоговогоЗапросаШаблон = СтрЗаменить(ТекстИтоговогоЗапросаШаблон, "%МаксАналитикОтчета%", МаксАналитикОтчета);
		ТекстИтоговогоЗапросаШаблон = СтрЗаменить(ТекстИтоговогоЗапросаШаблон, "%ТекстАналитикиСинтетика%", ТекстАналитикиСинтетика);
		ТекстИтоговогоЗапросаШаблон = СтрЗаменить(ТекстИтоговогоЗапросаШаблон, "%ТекстАналитикиСинтетикаНеопределено%", ТекстАналитикиСинтетикаНеопределено);		
		
	КонецЦикла;
	
	////////////////////////////////////////////////////////////////////////////////
	// Добавим получившиеся записи в итоговый запрос	
	ТекстИтоговогоЗапросаШаблон = ТекстИтоговогоЗапросаШаблон + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики%,
		|	ДанныеУправленияПериодом.УправлениеПериодом КАК УправлениеПериодом,
		|	ЗначенияПоказателей.Значение КАК Значение,
		|	0 КАК ЗначениеВалюта,
		|	-1 КАК ИндексРегистраПоказателя,
		|	ЛОЖЬ КАК ИтоговоеЗначение
		|ИЗ
		|	втДанныеДляРасчета_Нечисловые КАК ЗначенияПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеУправленияПериодом КАК ДанныеУправленияПериодом
		|		ПО ЗначенияПоказателей.Сценарий = ДанныеУправленияПериодом.Сценарий
		|			И ЗначенияПоказателей.Организация = ДанныеУправленияПериодом.Организация
		|			И ЗначенияПоказателей.ПериодОтчета = ДанныеУправленияПериодом.ПериодОтчета
		|ГДЕ
		|	ЗначенияПоказателей.СохранятьИсториюИзменений
		|";
	
	ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстЗапросаШаблон, "%ТекстАналитики%", ТекстАналитики);
	
	ТекстИтоговогоЗапроса = ТекстИтоговогоЗапроса + СтрЗаменить(ТекстИтоговогоЗапросаШаблон, "%ТекстАналитики%", ТекстАналитики);

КонецПроцедуры

Процедура ПодготовитьДанныеПоказателейДляЗаписи(ВыборкаИндексы, ТекстЗапроса, ТекстИтоговогоЗапроса, ЕстьБлокировкаПоСтатусам)
	
	ТекстАналитики = "";
	ТекстАналитикиНеопределено = "";
	
	ИндексРегистра = ВыборкаИндексы.ИндексРегистраПоказателя;
	Если ИндексРегистра = -2 Тогда				
		ПостфиксРегистра = "Валютные";
		ТекстАналитики = "
		|	ЗначенияПоказателей.АналитикаВалюта,";
	ИначеЕсли ИндексРегистра = 0 Тогда				
		ПостфиксРегистра = "Синтетика";
		ТекстАналитикиНеопределено = "
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК АналитикаВалюта,";
	Иначе
		ПостфиксРегистра = Строка(ВыборкаИндексы.ИндексРегистраПоказателя);
		ТекстАналитики = "
		|	ЗначенияПоказателей.АналитикаВалюта,";
	КонецЕсли;
	
	Для Сч = 1 По ИндексРегистра Цикл
		ТекстАналитики = ТекстАналитики + "
		|	ЗначенияПоказателей.Аналитика" + Сч + ",";
	КонецЦикла;
	Для Сч = Макс(ИндексРегистра,0)+1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		ТекстАналитикиНеопределено = ТекстАналитикиНеопределено + "
		|	НЕОПРЕДЕЛЕНО КАК Аналитика" + Сч + ",";
	КонецЦикла;
	
	////////////////////////////////////////////////////////////////////////////////
	// Сгруппируем значения показателей
	ТекстЗапросаШаблон = "
		|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики%
		|	ДанныеВидовОтчетов.ВидОтчета КАК ВидОтчета,
		|	ДанныеВидовОтчетов.МаксАналитикОтчета КАК МаксАналитикОтчета,
		|	ДанныеВидовОтчетов.СохранятьИсториюИзменений КАК СохранятьИсториюИзменений,
		|	ДанныеПоказателей.ВидИтога КАК ВидИтога,
		|	СУММА(ЗначенияПоказателей.Значение) КАК Значение,
		|	СУММА(ЗначенияПоказателей.ЗначениеВалюта) КАК ЗначениеВалюта
		|ПОМЕСТИТЬ втДанныеДляРасчета_%ПостфиксРегистра%
		|ИЗ
		|	втЛогИзмененныхПоказателей%ФильтрПоСтатусам% КАК ЗначенияПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеВидовОтчетов КАК ДанныеВидовОтчетов
		|		ПО ЗначенияПоказателей.ПравилоОбработки = ДанныеВидовОтчетов.ПравилоОбработки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеПоказателей КАК ДанныеПоказателей
		|		ПО ЗначенияПоказателей.ПравилоОбработки = ДанныеПоказателей.ПравилоОбработки
		|			И ЗначенияПоказателей.Показатель = ДанныеПоказателей.Показатель
		|ГДЕ
		|	ДанныеПоказателей.ИндексРегистраПоказателя = %ИндексРегистра%
		|	И ДанныеВидовОтчетов.СохранятьИсториюИзменений
		|
		|СГРУППИРОВАТЬ ПО %ТекстПоля% %ТекстАналитики%
		|	ДанныеВидовОтчетов.ВидОтчета,
		|	ДанныеВидовОтчетов.СохранятьИсториюИзменений,
		|	ДанныеВидовОтчетов.МаксАналитикОтчета,
		|	ДанныеПоказателей.ВидИтога
		|
		|ИМЕЮЩИЕ 
		|	НЕ(СУММА(ЗначенияПоказателей.Значение) = 0
		|		И СУММА(ЗначенияПоказателей.ЗначениеВалюта) = 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики%
		|	ДанныеВидовОтчетов.ВидОтчета КАК ВидОтчета,
		|	ДанныеВидовОтчетов.МаксАналитикОтчета КАК МаксАналитикОтчета,
		|	ДанныеВидовОтчетов.СохранятьИсториюИзменений КАК СохранятьИсториюИзменений,
		|	ДанныеПоказателей.ВидИтога КАК ВидИтога,
		|	СУММА(ЗначенияПоказателей.Значение) КАК Значение,
		|	СУММА(ЗначенияПоказателей.ЗначениеВалюта) КАК ЗначениеВалюта
		|ИЗ
		|	втЛогИзмененныхПоказателей%ФильтрПоСтатусам% КАК ЗначенияПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеВидовОтчетов КАК ДанныеВидовОтчетов
		|		ПО ЗначенияПоказателей.ПравилоОбработки = ДанныеВидовОтчетов.ПравилоОбработки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеПоказателей КАК ДанныеПоказателей
		|		ПО ЗначенияПоказателей.ПравилоОбработки = ДанныеПоказателей.ПравилоОбработки
		|			И ЗначенияПоказателей.Показатель = ДанныеПоказателей.Показатель
		|ГДЕ
		|	ДанныеПоказателей.ИндексРегистраПоказателя = %ИндексРегистра%
		|	И НЕ ДанныеВидовОтчетов.СохранятьИсториюИзменений
		|
		|СГРУППИРОВАТЬ ПО %ТекстПоля% %ТекстАналитики%
		|	ДанныеВидовОтчетов.ВидОтчета,
		|	ДанныеВидовОтчетов.СохранятьИсториюИзменений,
		|	ДанныеВидовОтчетов.МаксАналитикОтчета,
		|	ДанныеПоказателей.ВидИтога
		|;
		|";
	
	Если ЕстьБлокировкаПоСтатусам Тогда
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "%ФильтрПоСтатусам%", "ФильтрПоСтатусам");
	Иначе
		ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "%ФильтрПоСтатусам%", "");
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	// Добавим сгруппированные значения показателей в результирующую таблицу
	ТекстИтоговогоЗапросаШаблон = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики% %ТекстАналитикиНеопределено%
		|	ДанныеУправленияПериодом.УправлениеПериодом КАК УправлениеПериодом,
		|	ЗначенияПоказателей.Значение КАК Значение,
		|	ЗначенияПоказателей.ЗначениеВалюта КАК ЗначениеВалюта,
		|	%ИндексРегистра% КАК ИндексРегистраПоказателя,
		|	ЛОЖЬ КАК ИтоговоеЗначение
		|ИЗ
		|	втДанныеДляРасчета_%ПостфиксРегистра% КАК ЗначенияПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеУправленияПериодом КАК ДанныеУправленияПериодом
		|		ПО ЗначенияПоказателей.Сценарий = ДанныеУправленияПериодом.Сценарий
		|			И ЗначенияПоказателей.Организация = ДанныеУправленияПериодом.Организация
		|			И ЗначенияПоказателей.ПериодОтчета = ДанныеУправленияПериодом.ПериодОтчета
		|ГДЕ
		|	ЗначенияПоказателей.СохранятьИсториюИзменений";
	
	////////////////////////////////////////////////////////////////////////////////
	// Цикл по ключевым аналитикам
	ВыборкаКлючевыеАналитики = ВыборкаИндексы.Выбрать();
	Пока ВыборкаКлючевыеАналитики.Следующий() Цикл
		
		МаксАналитикОтчета = ВыборкаКлючевыеАналитики.МаксАналитикОтчета;
	
		////////////////////////////////////////////////////////////////////////////////
		// Получим абсолютные новые значения показателей
		Если (ИндексРегистра <> МаксАналитикОтчета И ВыборкаИндексы.ЕстьСложныеРасчетыСинтетики) ИЛИ НЕ ВыборкаИндексы.СохранятьИсториюИзменений Тогда		
			
			ТекстКлючевыеАналитикиСоединение = "";			
			Для Сч = 1 По МаксАналитикОтчета Цикл
				ТекстКлючевыеАналитикиСоединение = ТекстКлючевыеАналитикиСоединение + "
					|		И ВерсииЗначенийПоказателей.Аналитика" + Сч + " = ЗначенияПоказателей.Аналитика" + Сч;
			КонецЦикла;
									
	       	// Для сложных расчетов синтетики нужны абсолютные значения по всем значениям аналитик	
			// Для видов отчетов без хранения истории нужны абсолютные значения по всем значениям аналитик				
			ТекстЗапросаШаблон = ТекстЗапросаШаблон + "
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ %ТекстПоля%
				|	ЗначенияПоказателей.СохранятьИсториюИзменений КАК СохранятьИсториюИзменений,
				|	ЗначенияПоказателей.ВидИтога КАК ВидИтога,
				|	ВерсииЗначенийПоказателей.Ссылка КАК Версия
				|ПОМЕСТИТЬ втВерсииЗначенийПоказателей_%ПостфиксРегистра%_%МаксАналитикОтчета%
				|ИЗ
				|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеДляРасчета_%ПостфиксРегистра% КАК ЗначенияПоказателей
				|			ПО (ВерсииЗначенийПоказателей.ВидОтчета = ЗначенияПоказателей.ВидОтчета)
				|			И (ВерсииЗначенийПоказателей.Сценарий = ЗначенияПоказателей.Сценарий)
				|			И (ВерсииЗначенийПоказателей.Организация = ЗначенияПоказателей.Организация)
				|			И (ВерсииЗначенийПоказателей.Проект = ЗначенияПоказателей.Проект)
				|			И (ВерсииЗначенийПоказателей.ПериодОтчета = ЗначенияПоказателей.ПериодОтчета)
				|			И (ВерсииЗначенийПоказателей.Валюта = ЗначенияПоказателей.Валюта) %ТекстКлючевыеАналитикиСоединение%
				|			И ЗначенияПоказателей.МаксАналитикОтчета = %МаксАналитикОтчета%
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики%
				|	ЗначенияПоказателей.СохранятьИсториюИзменений КАК СохранятьИсториюИзменений,
				|	ЗначенияПоказателей.ВидИтога КАК ВидИтога,
				|	ЗначенияПоказателей.Значение КАК Значение,
				|	ЗначенияПоказателей.ЗначениеВалюта КАК ЗначениеВалюта
				|ПОМЕСТИТЬ втНовыеЗначенияПоказателейБезГруппировки_%ПостфиксРегистра%_%МаксАналитикОтчета%
				|ИЗ
				|	втДанныеДляРасчета_%ПостфиксРегистра% КАК ЗначенияПоказателей
				|ГДЕ
				|	ЗначенияПоказателей.МаксАналитикОтчета = %МаксАналитикОтчета%
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ %ТекстПоля% %ТекстАналитикиОтчетов%
				|	ЗначенияПоказателей.СохранятьИсториюИзменений КАК СохранятьИсториюИзменений,
				|	ЗначенияПоказателей.ВидИтога КАК ВидИтога,
				|	ЗначенияПоказателейОтчетов.Значение КАК Значение,
				|	ЗначенияПоказателейОтчетов.ЗначениеВалюта КАК ЗначениеВалюта
				|ИЗ
				|	РегистрСведений.ЗначенияПоказателейОтчетов%ПостфиксРегистра% КАК ЗначенияПоказателейОтчетов
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсииЗначенийПоказателей_%ПостфиксРегистра%_%МаксАналитикОтчета% КАК ЗначенияПоказателей
				|		ПО ЗначенияПоказателейОтчетов.Версия = ЗначенияПоказателей.Версия
				|		И ЗначенияПоказателейОтчетов.Показатель = ЗначенияПоказателей.Показатель
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики%
				|	ЗначенияПоказателей.СохранятьИсториюИзменений КАК СохранятьИсториюИзменений,
				|	ЗначенияПоказателей.ВидИтога КАК ВидИтога,
				|	СУММА(ЗначенияПоказателей.Значение) КАК Значение,
				|	СУММА(ЗначенияПоказателей.ЗначениеВалюта) КАК ЗначениеВалюта
				|ПОМЕСТИТЬ втНовыеЗначенияПоказателей_%ПостфиксРегистра%_%МаксАналитикОтчета%
				|ИЗ
				|	втНовыеЗначенияПоказателейБезГруппировки_%ПостфиксРегистра%_%МаксАналитикОтчета% КАК ЗначенияПоказателей
				|
				|СГРУППИРОВАТЬ ПО %ТекстПоля% %ТекстАналитики%
				|	ЗначенияПоказателей.СохранятьИсториюИзменений,
				|	ЗначенияПоказателей.ВидИтога
				|;
				|";
		
			Если ИндексРегистра = 0 Тогда
				ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "ЗначенияПоказателейОтчетов.ЗначениеВалюта", "0");
			КонецЕсли;
			
			Если НЕ ВыборкаИндексы.СохранятьИсториюИзменений Тогда				
			    // Есть виды отчетов без сохранения истории изменений
				// Добавим сгруппированные значения показателей в результирующую таблицу
				ТекстИтоговогоЗапросаШаблон = ТекстИтоговогоЗапросаШаблон + "
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ %ТекстПоля% %ТекстАналитики% %ТекстАналитикиНеопределено%
					|	ДанныеУправленияПериодом.УправлениеПериодом КАК УправлениеПериодом,
					|	ЗначенияПоказателей.Значение КАК Значение,
					|	ЗначенияПоказателей.ЗначениеВалюта КАК ЗначениеВалюта,
					|	%ИндексРегистра% КАК ИндексРегистраПоказателя,
					|	ЛОЖЬ КАК ИтоговоеЗначение
					|ИЗ
					|	втНовыеЗначенияПоказателей_%ПостфиксРегистра%_%МаксАналитикОтчета% КАК ЗначенияПоказателей
					|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеУправленияПериодом КАК ДанныеУправленияПериодом
					|		ПО ЗначенияПоказателей.Сценарий = ДанныеУправленияПериодом.Сценарий
					|			И ЗначенияПоказателей.Организация = ДанныеУправленияПериодом.Организация
					|			И ЗначенияПоказателей.ПериодОтчета = ДанныеУправленияПериодом.ПериодОтчета
					|ГДЕ
					|	НЕ ЗначенияПоказателей.СохранятьИсториюИзменений";				
			КонецЕсли;
		
		КонецЕсли;
	
		////////////////////////////////////////////////////////////////////////////////
		// Сформируем итоги по синтетике

		Если ИндексРегистра <> МаксАналитикОтчета Тогда
			
			// Нужны итоги по синтетике
			Если МаксАналитикОтчета = 0 Тогда
				ПостфиксРегистраСинтетика = "Синтетика";
				ТекстАналитикиСинтетика = "";
				ТекстАналитикиСинтетикаНеопределено = "
				|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК АналитикаВалюта,";
			Иначе
				ПостфиксРегистраСинтетика = Строка(МаксАналитикОтчета);
				ТекстАналитикиСинтетика = "
				|	ЗначенияПоказателей.АналитикаВалюта,";
				ТекстАналитикиСинтетикаНеопределено = "";
			КонецЕсли;
			
			Для Сч = 1 По МаксАналитикОтчета Цикл
				ТекстАналитикиСинтетика = ТекстАналитикиСинтетика + "
				|	ЗначенияПоказателей.Аналитика" + Сч + ",";
			КонецЦикла;
			Для Сч = МаксАналитикОтчета+1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				ТекстАналитикиСинтетикаНеопределено = ТекстАналитикиСинтетикаНеопределено + "
				|	НЕОПРЕДЕЛЕНО КАК Аналитика" + Сч + ",";
			КонецЦикла;
			
			// Сформируем данные для записи синтетических итогов
			Если ВыборкаИндексы.ЕстьСложныеРасчетыСинтетики ИЛИ НЕ ВыборкаИндексы.СохранятьИсториюИзменений Тогда
				
				ТекстЗапросаШаблон = ТекстЗапросаШаблон + "
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ %ТекстПоля% %ТекстАналитикиСинтетика%
					|	ВЫБОР
					|		КОГДА ЗначенияПоказателей.ВидИтога = ЗНАЧЕНИЕ(Перечисление.ВидыИтоговПоказателя.Максимум)
					|			ТОГДА МАКСИМУМ(ЗначенияПоказателей.Значение)
					|		КОГДА ЗначенияПоказателей.ВидИтога = ЗНАЧЕНИЕ(Перечисление.ВидыИтоговПоказателя.Минимум)
					|			ТОГДА МИНИМУМ(ЗначенияПоказателей.Значение)
					|		КОГДА ЗначенияПоказателей.ВидИтога = ЗНАЧЕНИЕ(Перечисление.ВидыИтоговПоказателя.Среднее)
					|			ТОГДА СРЕДНЕЕ(ЗначенияПоказателей.Значение)
					|		КОГДА ЗначенияПоказателей.ВидИтога = ЗНАЧЕНИЕ(Перечисление.ВидыИтоговПоказателя.НеРассчитывается)
					|			ТОГДА 0
					|		ИНАЧЕ СУММА(ЗначенияПоказателей.Значение)
					|	КОНЕЦ КАК Значение
					|ПОМЕСТИТЬ втНовыеЗначенияПоказателейСинтетикиБезГруппировки_%ПостфиксРегистра%_%МаксАналитикОтчета%
					|ИЗ
					|	втНовыеЗначенияПоказателей_%ПостфиксРегистра%_%МаксАналитикОтчета% КАК ЗначенияПоказателей
					|
					|СГРУППИРОВАТЬ ПО %ТекстПоля% %ТекстАналитикиСинтетика%
					|	ЗначенияПоказателей.ВидИтога
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ %ТекстПоля% %ТекстАналитикиОтчетовСинтетика%
					|	-1 * ЗначенияПоказателейОтчетов.Значение
					|ИЗ
					|	РегистрСведений.ЗначенияПоказателейОтчетов%ПостфиксРегистраСинтетика% КАК ЗначенияПоказателейОтчетов
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсииЗначенийПоказателей_%ПостфиксРегистра%_%МаксАналитикОтчета% КАК ЗначенияПоказателей
					|		ПО ЗначенияПоказателейОтчетов.Версия = ЗначенияПоказателей.Версия
					|		И ЗначенияПоказателейОтчетов.Показатель = ЗначенияПоказателей.Показатель
					|ГДЕ
					|	ЗначенияПоказателей.СохранятьИсториюИзменений
					|;
					|";
				
				// Добавим данные синтетических значений показателей в результирующую таблицу
				ТекстИтоговогоЗапросаШаблон = ТекстИтоговогоЗапросаШаблон + "
					|
				 	|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ %ТекстПоля% %ТекстАналитикиСинтетика% %ТекстАналитикиСинтетикаНеопределено%
					|	ДанныеУправленияПериодом.УправлениеПериодом КАК УправлениеПериодом,
					|	СУММА(ЗначенияПоказателей.Значение) КАК Значение,
					|	0 КАК ЗначениеВалюта,
					|	%МаксАналитикОтчета% КАК ИндексРегистраПоказателя,
					|	ЛОЖЬ КАК ИтоговоеЗначение
					|ИЗ
					|	втНовыеЗначенияПоказателейСинтетикиБезГруппировки_%ПостфиксРегистра%_%МаксАналитикОтчета% КАК ЗначенияПоказателей
					|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеУправленияПериодом КАК ДанныеУправленияПериодом
					|		ПО ЗначенияПоказателей.Сценарий = ДанныеУправленияПериодом.Сценарий
					|			И ЗначенияПоказателей.Организация = ДанныеУправленияПериодом.Организация
					|			И ЗначенияПоказателей.ПериодОтчета = ДанныеУправленияПериодом.ПериодОтчета
					|
					|СГРУППИРОВАТЬ ПО %ТекстПоля% %ТекстАналитикиСинтетика%
					|	ДанныеУправленияПериодом.УправлениеПериодом";
				
			Иначе
				
				// Добавим данные синтетических значений показателей в результирующую таблицу
				ТекстИтоговогоЗапросаШаблон = ТекстИтоговогоЗапросаШаблон + "
					|
				 	|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ %ТекстПоля% %ТекстАналитикиСинтетика% %ТекстАналитикиСинтетикаНеопределено%
					|	ДанныеУправленияПериодом.УправлениеПериодом КАК УправлениеПериодом,
					|	СУММА(ЗначенияПоказателей.Значение) КАК Значение,
					|	0 КАК ЗначениеВалюта,
					|	%МаксАналитикОтчета% КАК ИндексРегистраПоказателя,
					|	ЛОЖЬ КАК ИтоговоеЗначение
					|ИЗ
					|	втДанныеДляРасчета_%ПостфиксРегистра% КАК ЗначенияПоказателей
					|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеУправленияПериодом КАК ДанныеУправленияПериодом
					|		ПО ЗначенияПоказателей.Сценарий = ДанныеУправленияПериодом.Сценарий
					|			И ЗначенияПоказателей.Организация = ДанныеУправленияПериодом.Организация
					|			И ЗначенияПоказателей.ПериодОтчета = ДанныеУправленияПериодом.ПериодОтчета
					|ГДЕ
					|	ЗначенияПоказателей.МаксАналитикОтчета = %МаксАналитикОтчета%
					|
					|СГРУППИРОВАТЬ ПО %ТекстПоля% %ТекстАналитикиСинтетика% 
					|	ДанныеУправленияПериодом.УправлениеПериодом";
				
			КонецЕсли;			
												 										
		КонецЕсли;
		
		ТекстЗапросаШаблон			= СтрЗаменить(ТекстЗапросаШаблон,"%МаксАналитикОтчета%", МаксАналитикОтчета);
		ТекстЗапросаШаблон			= СтрЗаменить(ТекстЗапросаШаблон,"%ПостфиксРегистраСинтетика%", ПостфиксРегистраСинтетика);
		ТекстЗапросаШаблон			= СтрЗаменить(ТекстЗапросаШаблон,"%ТекстАналитикиСинтетика%", ТекстАналитикиСинтетика);
		ТекстЗапросаШаблон			= СтрЗаменить(ТекстЗапросаШаблон,"%ТекстАналитикиОтчетовСинтетика%",СтрЗаменить(ТекстАналитикиСинтетика,"ЗначенияПоказателей","ЗначенияПоказателейОтчетов"));
		ТекстЗапросаШаблон			= СтрЗаменить(ТекстЗапросаШаблон,"%ТекстКлючевыеАналитикиСоединение%", ТекстКлючевыеАналитикиСоединение);
					
		ТекстИтоговогоЗапросаШаблон = СтрЗаменить(ТекстИтоговогоЗапросаШаблон,"%МаксАналитикОтчета%",ВыборкаКлючевыеАналитики.МаксАналитикОтчета);
		ТекстИтоговогоЗапросаШаблон = СтрЗаменить(ТекстИтоговогоЗапросаШаблон,"%ТекстАналитикиСинтетика%",ТекстАналитикиСинтетика);
		ТекстИтоговогоЗапросаШаблон	= СтрЗаменить(ТекстИтоговогоЗапросаШаблон,"%ТекстАналитикиСинтетикаНеопределено%",ТекстАналитикиСинтетикаНеопределено);
			
	КонецЦикла;
	
	ТекстЗапросаШаблон			= СтрЗаменить(ТекстЗапросаШаблон,"%ПостфиксРегистра%",ПостфиксРегистра);
	ТекстЗапросаШаблон			= СтрЗаменить(ТекстЗапросаШаблон,"%ИндексРегистра%",ИндексРегистра);
	ТекстЗапросаШаблон			= СтрЗаменить(ТекстЗапросаШаблон,"%ТекстАналитики%",ТекстАналитики);
	ТекстЗапросаШаблон			= СтрЗаменить(ТекстЗапросаШаблон,"%ТекстАналитикиОтчетов%", СтрЗаменить(ТекстАналитики,"ЗначенияПоказателей","ЗначенияПоказателейОтчетов"));
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаШаблон;
	
	ТекстИтоговогоЗапросаШаблон = СтрЗаменить(ТекстИтоговогоЗапросаШаблон,"%ПостфиксРегистра%",ПостфиксРегистра);
	ТекстИтоговогоЗапросаШаблон = СтрЗаменить(ТекстИтоговогоЗапросаШаблон,"%ИндексРегистра%",ИндексРегистра);
	ТекстИтоговогоЗапросаШаблон	= СтрЗаменить(ТекстИтоговогоЗапросаШаблон,"%ТекстАналитики%",ТекстАналитики);
	ТекстИтоговогоЗапросаШаблон	= СтрЗаменить(ТекстИтоговогоЗапросаШаблон,"%ТекстАналитикиНеопределено%",ТекстАналитикиНеопределено);		
	ТекстИтоговогоЗапроса = ТекстИтоговогоЗапроса + ТекстИтоговогоЗапросаШаблон;
	
КонецПроцедуры

Функция ПроверитьВозможностьЗаписиПоказателей(Запрос, МаксАналитикОтчета, РазделениеПоПроектам, ЕстьКомментарии) 
	
	ТекстАналитики = "";
	ТекстАналитикиВыбор = "";
	ТекстАналитикиВыборГде = "";

	Если РазделениеПоПроектам Тогда
		ТекстСоединениеАналитики = "
		|	И ДанныеДляПроверки.Проект = ЗначенияСтатусовПоказателейСинтетика.Проект";
	Иначе
		ТекстСоединениеАналитики = "";	
	КонецЕсли;	
	
	Для Сч = 1 По МаксАналитикОтчета Цикл
		ТекстСоединениеАналитики = ТекстСоединениеАналитики + "
		|	И ДанныеДляПроверки.Аналитика" + Сч + " = ЗначенияСтатусовПоказателейСинтетика.Аналитика" + Сч;
		ТекстАналитикиВыбор = ТекстАналитикиВыбор + ",
		|	ВЫБОР
		|		КОГДА ДанныеВидовОтчетов.МаксАналитикОтчета > " + (Сч-1) + "
		|			ТОГДА ЗначенияПоказателей.Аналитика" + Сч + "
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Аналитика" + Сч;
		ТекстАналитикиВыборГде = ТекстАналитикиВыборГде + Символы.ПС + ?(ТекстАналитикиВыборГде="","ГДЕ","	И") + "
		|	ВЫБОР
		|		КОГДА ДанныеДляПроверки.МаксАналитикОтчета > " + (Сч-1) + "
		|			ТОГДА ЗначенияПоказателей.Аналитика" + Сч + " = ДанныеДляПроверки.Аналитика" + Сч + "
		|	КОНЕЦ";	
		ТекстАналитики = ТекстАналитики + ",
		|	ДанныеДляПроверки.Аналитика" + Сч + " КАК Аналитика" + Сч;
	КонецЦикла;		
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеВидовОтчетов.ВидОтчета КАК ВидОтчета,
		|	ДанныеВидовОтчетов.МаксАналитикОтчета КАК МаксАналитикОтчета,
		|	ДанныеВидовОтчетов.РазделениеПоПроектам КАК РазделениеПоПроектам,
		|	ДанныеВидовОтчетов.СохранятьИсториюИзменений КАК СохранятьИсториюИзменений,
		|	ЗначенияПоказателей.ПравилоОбработки КАК ПравилоОбработки,
		|	ЗначенияПоказателей.Показатель КАК Показатель,
		|	ЗначенияПоказателей.Сценарий КАК Сценарий,
		|	ЗначенияПоказателей.Организация КАК Организация,
		|	ЗначенияПоказателей.Проект КАК Проект,
		|	ЗначенияПоказателей.ПериодОтчета КАК ПериодОтчета %ТекстАналитикиВыбор%
		|ПОМЕСТИТЬ втДанныеДляПроверкиИсходные
		|ИЗ
		|	втЛогИзмененныхПоказателей КАК ЗначенияПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеВидовОтчетов КАК ДанныеВидовОтчетов
		|		ПО ЗначенияПоказателей.ПравилоОбработки = ДанныеВидовОтчетов.ПравилоОбработки
		|";
	
	Если ЕстьКомментарии Тогда
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеВидовОтчетов.ВидОтчета КАК ВидОтчета,
		|	ДанныеВидовОтчетов.МаксАналитикОтчета КАК МаксАналитикОтчета,
		|	ДанныеВидовОтчетов.РазделениеПоПроектам КАК РазделениеПоПроектам,
		|	ДанныеВидовОтчетов.СохранятьИсториюИзменений КАК СохранятьИсториюИзменений,
		|	ЗначенияПоказателей.ПравилоОбработки КАК ПравилоОбработки,
		|	ЗначенияПоказателей.Показатель КАК Показатель,
		|	ЗначенияПоказателей.Сценарий КАК Сценарий,
		|	ЗначенияПоказателей.Организация КАК Организация,
		|	ЗначенияПоказателей.Проект КАК Проект,
		|	ЗначенияПоказателей.ПериодОтчета КАК ПериодОтчета %ТекстАналитикиВыбор%
		|ИЗ
		|	втЛогКомментариевПоказателей КАК ЗначенияПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеВидовОтчетов КАК ДанныеВидовОтчетов
		|		ПО ЗначенияПоказателей.ПравилоОбработки = ДанныеВидовОтчетов.ПравилоОбработки";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляПроверки.ВидОтчета КАК ВидОтчета,
		|	ДанныеДляПроверки.МаксАналитикОтчета КАК МаксАналитикОтчета,
		|	ДанныеДляПроверки.РазделениеПоПроектам КАК РазделениеПоПроектам,
		|	ДанныеДляПроверки.СохранятьИсториюИзменений КАК СохранятьИсториюИзменений,
		|	ДанныеДляПроверки.ПравилоОбработки КАК ПравилоОбработки,
		|	ДанныеДляПроверки.Показатель КАК Показатель,
		|	ДанныеДляПроверки.Сценарий КАК Сценарий,
		|	ДанныеДляПроверки.Организация КАК Организация,
		|	ДанныеДляПроверки.Проект КАК Проект,
		|	ДанныеДляПроверки.ПериодОтчета КАК ПериодОтчета,
		|	СтатусыПериодовСценариев.УправлениеПериодомСценария КАК УправлениеПериодом,
		|	ЕСТЬNULL(СтатусыПериодовСценариев.СтатусБлокировки, -1) КАК СтатусБлокировки,
		|	ЕСТЬNULL(ЗначенияСтатусовПоказателейСинтетика.ЗначениеЗаблокировано, 0) КАК ЗначениеЗаблокировано,
		|	ЕСТЬNULL(ЗначенияСтатусовПоказателейСинтетика.ИндексСостояния, 0) КАК ИндексСостояния %ТекстАналитики%
		|ПОМЕСТИТЬ втДанныеДляПроверкиСоСтатусами
		|ИЗ
		|	втДанныеДляПроверкиИсходные КАК ДанныеДляПроверки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
		|		ПО ДанныеДляПроверки.Сценарий = СтатусыПериодовСценариев.Сценарии
		|			И ДанныеДляПроверки.ПериодОтчета = СтатусыПериодовСценариев.Периоды
		|			И ДанныеДляПроверки.Организация = СтатусыПериодовСценариев.Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСтатусовПоказателейСинтетика КАК ЗначенияСтатусовПоказателейСинтетика
		|		ПО ДанныеДляПроверки.Сценарий = ЗначенияСтатусовПоказателейСинтетика.Сценарий
		|			И ДанныеДляПроверки.ПериодОтчета = ЗначенияСтатусовПоказателейСинтетика.ПериодОтчета
		|			И ДанныеДляПроверки.Организация = ЗначенияСтатусовПоказателейСинтетика.ОрганизационнаяЕдиница
		|			И ДанныеДляПроверки.Показатель = ЗначенияСтатусовПоказателейСинтетика.Показатель %ТекстСоединениеАналитики%
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляПроверки.УправлениеПериодом КАК УправлениеПериодом,
		|	ДанныеДляПроверки.ВидОтчета КАК ВидОтчета,
		|	ДанныеДляПроверки.МаксАналитикОтчета КАК МаксАналитикОтчета,
		|	ДанныеДляПроверки.РазделениеПоПроектам КАК РазделениеПоПроектам,
		|	ДанныеДляПроверки.СохранятьИсториюИзменений КАК СохранятьИсториюИзменений,
		|	ДанныеДляПроверки.ПравилоОбработки КАК ПравилоОбработки,
		|	ДанныеДляПроверки.Показатель КАК Показатель,
		|	ДанныеДляПроверки.Сценарий КАК Сценарий,
		|	ДанныеДляПроверки.Организация КАК Организация,
		|	ДанныеДляПроверки.Проект КАК Проект,
		|	ДанныеДляПроверки.ПериодОтчета КАК ПериодОтчета %ТекстАналитики%
		|ПОМЕСТИТЬ втДанныеДляПроверки
		|ИЗ
		|	втДанныеДляПроверкиСоСтатусами КАК ДанныеДляПроверки
		|ГДЕ
		|	ДанныеДляПроверки.СтатусБлокировки = 0
		|	И ДанныеДляПроверки.ЗначениеЗаблокировано < 2 
		|	И ДанныеДляПроверки.ИндексСостояния <> 3
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДляПроверки.Сценарий КАК Сценарий,
		|	ДанныеДляПроверки.ПериодОтчета КАК ПериодОтчета,
		|	ДанныеДляПроверки.Организация КАК Организация
		|ИЗ
		|	втДанныеДляПроверкиСоСтатусами КАК ДанныеДляПроверки
		|ГДЕ
		|	ДанныеДляПроверки.СтатусБлокировки = -1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДляПроверки.Сценарий КАК Сценарий,
		|	ДанныеДляПроверки.ПериодОтчета КАК ПериодОтчета,
		|	ДанныеДляПроверки.Организация КАК Организация
		|ИЗ
		|	втДанныеДляПроверкиСоСтатусами КАК ДанныеДляПроверки
		|ГДЕ
		|	ДанныеДляПроверки.СтатусБлокировки = 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	ДанныеДляПроверки.МаксАналитикОтчета КАК МаксАналитикОтчета,
		|	ДанныеДляПроверки.РазделениеПоПроектам КАК РазделениеПоПроектам,
		|	ДанныеДляПроверки.Сценарий КАК Сценарий,
		|	ДанныеДляПроверки.ПериодОтчета КАК ПериодОтчета,
		|	ДанныеДляПроверки.Организация КАК Организация,
		|	ДанныеДляПроверки.Показатель КАК Показатель,
		|	ДанныеДляПроверки.Проект КАК Проект %ТекстАналитики%
		|ИЗ
		|	втДанныеДляПроверкиСоСтатусами КАК ДанныеДляПроверки
		|ГДЕ
		|	ДанныеДляПроверки.ЗначениеЗаблокировано >= 2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	ДанныеДляПроверки.МаксАналитикОтчета КАК МаксАналитикОтчета,
		|	ДанныеДляПроверки.РазделениеПоПроектам КАК РазделениеПоПроектам,
		|	ДанныеДляПроверки.Сценарий КАК Сценарий,
		|	ДанныеДляПроверки.ПериодОтчета КАК ПериодОтчета,
		|	ДанныеДляПроверки.Организация КАК Организация,
		|	ДанныеДляПроверки.Показатель КАК Показатель,
		|	ДанныеДляПроверки.Проект КАК Проект %ТекстАналитики%
		|ИЗ
		|	втДанныеДляПроверкиСоСтатусами КАК ДанныеДляПроверки
		|ГДЕ
		|	ДанныеДляПроверки.ИндексСостояния = 3
		|;";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТекстАналитикиВыбор%", ТекстАналитикиВыбор);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТекстСоединениеАналитики%", ТекстСоединениеАналитики);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТекстАналитики%", ТекстАналитики);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ЕстьБлокировкаПоСтатусам = Ложь;	
	
	// Найдем не открытие периоды
	Результат = МассивРезультатов.Получить(3);
	Если НЕ Результат.Пустой() Тогда
		ЕстьБлокировкаПоСтатусам = Истина;
		ВыборкаЗапроса = Результат.Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найден открытый период по параметрам:
				|	Сценарий: ""%1"",
				|	Организация: ""%2"",
				|	Период: ""%3""'"), 
			ВыборкаЗапроса.Сценарий, ВыборкаЗапроса.Организация, ВыборкаЗапроса.ПериодОтчета);
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ПроверитьВозможностьЗаписиПоказателей", , , ТекстСообщения);
		КонецЦикла;
	КонецЕсли;
	
	// Найдем заблокированные периоды 
	Результат = МассивРезультатов.Получить(4);
	Если НЕ Результат.Пустой() Тогда
		ЕстьБлокировкаПоСтатусам = Истина;
		ВыборкаЗапроса = Результат.Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Установлен запрет на изменение по параметрам:
				|	Сценарий: ""%1"",
				|	Организация: ""%2"",
				|	Период: ""%3""'"), 
			ВыборкаЗапроса.Сценарий, ВыборкаЗапроса.Организация, ВыборкаЗапроса.ПериодОтчета);
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ПроверитьВозможностьЗаписиПоказателей", , , ТекстСообщения);
		КонецЦикла;
	КонецЕсли;
	
	// Найдем заблокированные показатели
	Результат = МассивРезультатов.Получить(5);
	Если НЕ Результат.Пустой() Тогда
		ЕстьБлокировкаПоСтатусам = Истина;
		ВыборкаЗапроса = Результат.Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заблокировано значение по параметрам:
				|	Сценарий: ""%1"",
				|	Организация: ""%2"",
				|	Период: ""%3""'"),
			ВыборкаЗапроса.Сценарий, ВыборкаЗапроса.Организация, ВыборкаЗапроса.ПериодОтчета);
			Для Сч = 1 По ВыборкаЗапроса.МаксАналитикОтчета Цикл
				ТекстСообщения = ТекстСообщения + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ',
					|	Аналитика" + Сч + ": ""%1""'"),
				ВыборкаЗапроса["Аналитика" + Сч]);
			КонецЦикла;
			Если ВыборкаЗапроса.РазделениеПоПроектам Тогда
				ТекстСообщения = ТекстСообщения + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ',
					|	Проект: ""%1""'"),
				ВыборкаЗапроса.Проект);				
			КонецЕсли;
			ТекстСообщения = ТекстСообщения + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ',
				|	Показатель: ""%1""'"),
			ВыборкаЗапроса.Показатель);
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ПроверитьВозможностьЗаписиПоказателей", , , ТекстСообщения);
		КонецЦикла;
	КонецЕсли;

	// Найдем утвержденные показатели
	Результат = МассивРезультатов.Получить(6);
	Если НЕ Результат.Пустой() Тогда
		ЕстьБлокировкаПоСтатусам = Истина;
		ВыборкаЗапроса = Результат.Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Утверждено значение по параметрам:
				|	Сценарий: ""%1"",
				|	Организация: ""%2"",
				|	Период: ""%3""'"),
			ВыборкаЗапроса.Сценарий, ВыборкаЗапроса.Организация, ВыборкаЗапроса.ПериодОтчета);
			Для Сч = 1 По ВыборкаЗапроса.МаксАналитикОтчета Цикл
				ТекстСообщения = ТекстСообщения + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ',
					|	Аналитика" + Сч + ": ""%1""'"),
				ВыборкаЗапроса["Аналитика" + Сч]);
			КонецЦикла;
			Если ВыборкаЗапроса.РазделениеПоПроектам Тогда
				ТекстСообщения = ТекстСообщения + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ',
					|	Проект: ""%1""'"),
				ВыборкаЗапроса.Проект);				
			КонецЕсли;
			ТекстСообщения = ТекстСообщения + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ',
				|	Показатель: ""%1""'"),
			ВыборкаЗапроса.Показатель);
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ПроверитьВозможностьЗаписиПоказателей", , , ТекстСообщения);
		КонецЦикла;
	КонецЕсли;
	
	// Отфильтруем итоговые записи
	Если ЕстьБлокировкаПоСтатусам Тогда
		Запрос.Текст = 
			"УНИЧТОЖИТЬ втПоказателиПравилаОбработки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ втПравилаОбработки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ втДанныеВидовОтчетов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеДляПроверки.Показатель КАК Показатель,
			|	ДанныеДляПроверки.ПравилоОбработки КАК ПравилоОбработки
			|ПОМЕСТИТЬ втПоказателиПравилаОбработки
			|ИЗ
			|	втДанныеДляПроверки КАК ДанныеДляПроверки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДанныеДляПроверки.ПравилоОбработки КАК ПравилоОбработки,
			|	ДанныеДляПроверки.ВидОтчета КАК ВидОтчета,
			|	ДанныеДляПроверки.РазделениеПоПроектам КАК РазделениеПоПроектам,
			|	ДанныеДляПроверки.СохранятьИсториюИзменений КАК СохранятьИсториюИзменений,
			|	ДанныеДляПроверки.МаксАналитикОтчета КАК МаксАналитикОтчета
			|ПОМЕСТИТЬ втДанныеВидовОтчетов
			|ИЗ
			|	втДанныеДляПроверки КАК ДанныеДляПроверки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗначенияПоказателей.ПравилоОбработки КАК ПравилоОбработки,
			|	ЗначенияПоказателей.Показатель КАК Показатель,
			|	ЗначенияПоказателей.Сценарий КАК Сценарий,
			|	ЗначенияПоказателей.Организация КАК Организация,
			|	ЗначенияПоказателей.Проект КАК Проект,
			|	ЗначенияПоказателей.Аналитика1 КАК Аналитика1,
			|	ЗначенияПоказателей.Аналитика2 КАК Аналитика2,
			|	ЗначенияПоказателей.Аналитика3 КАК Аналитика3,
			|	ЗначенияПоказателей.Аналитика4 КАК Аналитика4,
			|	ЗначенияПоказателей.Аналитика5 КАК Аналитика5,
			|	ЗначенияПоказателей.Аналитика6 КАК Аналитика6,
			|	ЗначенияПоказателей.АналитикаВалюта КАК АналитикаВалюта,
			|	ЗначенияПоказателей.ПериодОтчета КАК ПериодОтчета,
			|	ЗначенияПоказателей.Валюта КАК Валюта,
			|	ЗначенияПоказателей.Значение КАК Значение,
			|	ЗначенияПоказателей.ЗначениеНечисловое КАК ЗначениеНечисловое,
			|	ЗначенияПоказателей.ЗначениеВалюта КАК ЗначениеВалюта,
			|	ЗначенияПоказателей.НомерТранзакции КАК НомерТранзакции
			|ПОМЕСТИТЬ втЛогИзмененныхПоказателейФильтрПоСтатусам
			|ИЗ
			|	втЛогИзмененныхПоказателей КАК ЗначенияПоказателей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеДляПроверки КАК ДанныеДляПроверки
			|		ПО ЗначенияПоказателей.ПравилоОбработки = ДанныеДляПроверки.ПравилоОбработки
			|			И ЗначенияПоказателей.Показатель = ДанныеДляПроверки.Показатель
			|			И ЗначенияПоказателей.Сценарий = ДанныеДляПроверки.Сценарий
			|			И ЗначенияПоказателей.Организация = ДанныеДляПроверки.Организация
			|			И ЗначенияПоказателей.Проект = ДанныеДляПроверки.Проект
			|			И ЗначенияПоказателей.ПериодОтчета = ДанныеДляПроверки.ПериодОтчета
			|%ТекстАналитикиВыборГде%";
		
		Если ЕстьКомментарии Тогда
			Запрос.Текст = Запрос.Текст + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗначенияПоказателей.ПравилоОбработки КАК ПравилоОбработки,
			|	ЗначенияПоказателей.Показатель КАК Показатель,
			|	ЗначенияПоказателей.Сценарий КАК Сценарий,
			|	ЗначенияПоказателей.Организация КАК Организация,
			|	ЗначенияПоказателей.Проект КАК Проект,
			|	ЗначенияПоказателей.Аналитика1 КАК Аналитика1,
			|	ЗначенияПоказателей.Аналитика2 КАК Аналитика2,
			|	ЗначенияПоказателей.Аналитика3 КАК Аналитика3,
			|	ЗначенияПоказателей.Аналитика4 КАК Аналитика4,
			|	ЗначенияПоказателей.Аналитика5 КАК Аналитика5,
			|	ЗначенияПоказателей.Аналитика6 КАК Аналитика6,
			|	ЗначенияПоказателей.АналитикаВалюта КАК АналитикаВалюта,
			|	ЗначенияПоказателей.ПериодОтчета КАК ПериодОтчета,
			|	ЗначенияПоказателей.Валюта КАК Валюта,
			|	ЗначенияПоказателей.Значение КАК Значение,
			|	ЗначенияПоказателей.ЗначениеНечисловое КАК ЗначениеНечисловое,
			|	ЗначенияПоказателей.ЗначениеВалюта КАК ЗначениеВалюта,
			|	ЗначенияПоказателей.НомерТранзакции КАК НомерТранзакции
			|ПОМЕСТИТЬ втЛогКомментариевПоказателейПоСтатусам
			|ИЗ
			|	втЛогКомментариевПоказателей КАК ЗначенияПоказателей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеДляПроверки КАК ДанныеДляПроверки
			|		ПО ЗначенияПоказателей.ПравилоОбработки = ДанныеДляПроверки.ПравилоОбработки
			|			И ЗначенияПоказателей.Показатель = ДанныеДляПроверки.Показатель
			|			И ЗначенияПоказателей.Сценарий = ДанныеДляПроверки.Сценарий
			|			И ЗначенияПоказателей.Организация = ДанныеДляПроверки.Организация
			|			И ЗначенияПоказателей.Проект = ДанныеДляПроверки.Проект
			|			И ЗначенияПоказателей.ПериодОтчета = ДанныеДляПроверки.ПериодОтчета
			|%ТекстАналитикиВыборГде%";
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТекстАналитикиВыборГде%", ТекстАналитикиВыборГде);		
		Запрос.Выполнить();
		
	КонецЕсли;
		
	Возврат ЕстьБлокировкаПоСтатусам;		
		
КонецФункции

Функция ПодготовитьДанныеЛогаИзмененныхПоказателейДляЗаписи(МенеджерВременныхТаблиц = Неопределено)
	
	// Получим таблицу лога измененных показателей
	Запрос = Новый Запрос;
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		// Таблица лога измененных показателей передана по адресу во временном хранилище
		Запрос.МенеджерВременныхТаблиц = ЗагрузитьЛогИзмененныхПоказателейВМенеджерВТ();		
	Иначе		
		// Таблица лога измененных показателей передана в менеджере временных таблиц
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;		
	КонецЕсли;
	
	// Получим таблицу лога комментариев показателей
	ЕстьКомментарии = ЗагрузитьЛогКомментариевПоказателейВМенеджерВТ(Запрос); 
		
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗначенияПоказателей.Показатель КАК Показатель,
		|	ЗначенияПоказателей.ПравилоОбработки КАК ПравилоОбработки
		|ПОМЕСТИТЬ втПоказателиПравилаОбработки
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ЗначенияПоказателей.Показатель КАК Показатель,
		|		ЗначенияПоказателей.ПравилоОбработки КАК ПравилоОбработки
		|	ИЗ
		|		втЛогИзмененныхПоказателей КАК ЗначенияПоказателей
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ЗначенияПоказателей.Показатель,
		|		ЗначенияПоказателей.ПравилоОбработки
		|	ИЗ
		|		втЛогКомментариевПоказателей КАК ЗначенияПоказателей) КАК ЗначенияПоказателей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛогИзмененныхПоказателей.ПравилоОбработки КАК ПравилоОбработки
		|ПОМЕСТИТЬ втПравилаОбработки
		|ИЗ
		|	втПоказателиПравилаОбработки КАК ЛогИзмененныхПоказателей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПравилаОбработки.Ссылка КАК ПравилоОбработки,
		|	ВидыОтчетов.Ссылка КАК ВидОтчета,
		|	ВидыОтчетов.РазделениеПоПроектам КАК РазделениеПоПроектам,
		|	ВидыОтчетов.СохранятьИсториюИзменений КАК СохранятьИсториюИзменений,
		|	ВЫБОР
		|		КОГДА ВидыОтчетов.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ВидыОтчетов.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ВидыОтчетов.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ВидыОтчетов.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ВидыОтчетов.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ВидыОтчетов.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК МаксАналитикОтчета
		|ПОМЕСТИТЬ втДанныеВидовОтчетов
		|ИЗ
		|	втПравилаОбработки КАК ЗначенияПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ПравилаОбработки
		|		ПО ЗначенияПоказателей.ПравилоОбработки = ПравилаОбработки.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтчетов КАК ВидыОтчетов
		|		ПО (ПравилаОбработки.Владелец = ВидыОтчетов.Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ДанныеВидовОтчетов.МаксАналитикОтчета) КАК МаксАналитикОтчета,
		|	МАКСИМУМ(ДанныеВидовОтчетов.РазделениеПоПроектам) КАК РазделениеПоПроектам
		|ИЗ
		|	втДанныеВидовОтчетов КАК ДанныеВидовОтчетов
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеВидовОтчетов.ПравилоОбработки";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда			
		
		// Проверим, что данные можно записывать
		ЕстьБлокировкаПоСтатусам = ПроверитьВозможностьЗаписиПоказателей(Запрос, ВыборкаЗапроса.МаксАналитикОтчета, ВыборкаЗапроса.РазделениеПоПроектам, ЕстьКомментарии); 
		
	Иначе
		// Таблица пустая
		Возврат Неопределено;	
		
	КонецЕсли;

	Запрос.Текст =	
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДляПроверки.Сценарий КАК Сценарий,
		|	ДанныеДляПроверки.ПериодОтчета КАК ПериодОтчета,
		|	ДанныеДляПроверки.Организация КАК Организация,
		|	ДанныеДляПроверки.УправлениеПериодом КАК УправлениеПериодом
		|ПОМЕСТИТЬ втДанныеУправленияПериодом
		|ИЗ
		|	втДанныеДляПроверки КАК ДанныеДляПроверки	
		|; 
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоказателиПравилаОбработки.ПравилоОбработки КАК ПравилоОбработки,
		|	ПоказателиПравилаОбработки.Показатель КАК Показатель,
		|	ВЫБОР
		|		КОГДА ПоказателиОтчетов.ТипЗначения = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийПоказателейОтчетов.Число)
		|			ТОГДА ВЫБОР
		|					КОГДА ДанныеВидовОтчетов.МаксАналитикОтчета = 0
		|							И ЕСТЬNULL(ГруппыРаскрытия.ЧислоАналитик, 0) = 0
		|							И НЕ(ГруппыРаскрытия.ВидАналитикиВалютаДт ЕСТЬ NULL
		|									ИЛИ ГруппыРаскрытия.ВидАналитикиВалютаДт = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка))
		|						ТОГДА -2
		|					ИНАЧЕ ЕСТЬNULL(ГруппыРаскрытия.ЧислоАналитик, 0) + ДанныеВидовОтчетов.МаксАналитикОтчета
		|				КОНЕЦ
		|		КОГДА ЕСТЬNULL(ГруппыРаскрытия.ЧислоАналитик, 0) = 0
		|			ТОГДА -11
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК ИндексРегистраПоказателя,
		|	ВЫБОР
		|		КОГДА ПоказателиОтчетов.ТипЗначения = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийПоказателейОтчетов.Число)
		|			ТОГДА ВЫБОР
		|					КОГДА ДанныеВидовОтчетов.МаксАналитикОтчета = 0
		|							И ЕСТЬNULL(ГруппыРаскрытия.ЧислоАналитик, 0) = 0
		|							И НЕ(ГруппыРаскрытия.ВидАналитикиВалютаДт ЕСТЬ NULL
		|									ИЛИ ГруппыРаскрытия.ВидАналитикиВалютаДт = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка))
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЕСТЬNULL(ГруппыРаскрытия.ЧислоАналитик, 0) <> ДанныеВидовОтчетов.МаксАналитикОтчета
		|				КОНЕЦ
		|		КОГДА ЕСТЬNULL(ГруппыРаскрытия.ЧислоАналитик, 0) = 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК НуженРасчетСинтетики,
		|	ПоказателиОтчетов.ВидИтога КАК ВидИтога,
		|	ПоказателиОтчетов.ТипЗначения КАК ТипЗначения
		|ПОМЕСТИТЬ втДанныеПоказателей
		|ИЗ
		|	втПоказателиПравилаОбработки КАК ПоказателиПравилаОбработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеВидовОтчетов КАК ДанныеВидовОтчетов
		|		ПО ПоказателиПравилаОбработки.ПравилоОбработки = ДанныеВидовОтчетов.ПравилоОбработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|		ПО ПоказателиПравилаОбработки.Показатель = ПоказателиОтчетов.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
		|		ПО (ПоказателиОтчетов.ГруппаРаскрытия = ГруппыРаскрытия.Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПоказателей.ИндексРегистраПоказателя КАК ИндексРегистраПоказателя,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДанныеПоказателей.НуженРасчетСинтетики
		|				ТОГДА ВЫБОР
		|						КОГДА ДанныеПоказателей.ВидИтога = ЗНАЧЕНИЕ(Перечисление.ВидыИтоговПоказателя.Максимум)
		|								ИЛИ ДанныеПоказателей.ВидИтога = ЗНАЧЕНИЕ(Перечисление.ВидыИтоговПоказателя.Минимум)
		|								ИЛИ ДанныеПоказателей.ВидИтога = ЗНАЧЕНИЕ(Перечисление.ВидыИтоговПоказателя.Среднее)
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ ЛОЖЬ
		|					КОНЕЦ
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ЕстьСложныеРасчетыСинтетики,
		|	МИНИМУМ(ДанныеВидовОтчетов.СохранятьИсториюИзменений) КАК СохранятьИсториюИзменений,
		|	ДанныеВидовОтчетов.МаксАналитикОтчета КАК МаксАналитикОтчета
		|ИЗ
		|	втДанныеПоказателей КАК ДанныеПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеВидовОтчетов КАК ДанныеВидовОтчетов
		|		ПО ДанныеПоказателей.ПравилоОбработки = ДанныеВидовОтчетов.ПравилоОбработки
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеПоказателей.ИндексРегистраПоказателя,
		|	ДанныеВидовОтчетов.МаксАналитикОтчета
		|ИТОГИ ПО
		|	ИндексРегистраПоказателя";	
	
	ТекстЗапроса = "";
	ТекстИтоговогоЗапроса = "";
	
	ВыборкаИндексы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИндексы.Следующий() Цикл 		
		Если ВыборкаИндексы.ИндексРегистраПоказателя = -11 Тогда			
			ПодготовитьДанныеНечисловыхИтоговыхПоказателейДляЗаписи(ТекстЗапроса, ТекстИтоговогоЗапроса, ЕстьБлокировкаПоСтатусам);			
		ИначеЕсли ВыборкаИндексы.ИндексРегистраПоказателя = -1 Тогда			
			ПодготовитьДанныеНечисловыхПоказателейДляЗаписи(ВыборкаИндексы, ТекстЗапроса, ТекстИтоговогоЗапроса, ЕстьБлокировкаПоСтатусам); 				
		Иначе			
			ПодготовитьДанныеПоказателейДляЗаписи(ВыборкаИндексы, ТекстЗапроса, ТекстИтоговогоЗапроса, ЕстьБлокировкаПоСтатусам);			
		КонецЕсли;	
	КонецЦикла;
	
	Если ЕстьКомментарии Тогда
		ПодготовитьДанныеКомментариевПоказателейДляЗаписи(Запрос, ТекстЗапроса, ТекстИтоговогоЗапроса, ЕстьБлокировкаПоСтатусам);
	КонецЕсли;
	
	Если ТекстИтоговогоЗапроса = "" Тогда
		// Не одно значение не прошло проверку по статусам
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстПоля = "
		|	ЗначенияПоказателей.ПравилоОбработки,
		|	ЗначенияПоказателей.Сценарий,
		|	ЗначенияПоказателей.Организация,
		|	ЗначенияПоказателей.Проект,
		|	ЗначенияПоказателей.ПериодОтчета,
		|	ЗначенияПоказателей.Валюта,
		|	ЗначенияПоказателей.Показатель,";
	
	ТекстИтоговогоЗапроса = ТекстЗапроса + Сред(ТекстИтоговогоЗапроса, 17);
	ТекстИтоговогоЗапроса = СтрЗаменить(ТекстИтоговогоЗапроса, "%ТекстПоля%", ТекстПоля);
	
	Запрос.Текст = ТекстИтоговогоЗапроса;	
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЛогИзмененныхПоказателей", Запрос.Выполнить().Выгрузить());
	СтруктураВозврата.Вставить("ДанныеВидовОтчетов", Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("втДанныеВидовОтчетов").ПолучитьДанные().Выгрузить());
	
	Возврат СтруктураВозврата;	
	
КонецФункции

Функция ВыполнитьЗаписьЛогаИзмененыхПоказателей(МенеджерВременныхТаблиц = Неопределено, ИдентификаторСеанса = "")	
		
	// Подготовим данные для записи значений показателей в регистры
	СтруктураДляЗаписи = ПодготовитьДанныеЛогаИзмененныхПоказателейДляЗаписи(МенеджерВременныхТаблиц);
	Если СтруктураДляЗаписи = Неопределено Тогда
		// Нет данных для записи
		Возврат ОчиститьЛогИзмененныхПоказателей();
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка

		тЛогИзмененныхПоказателей = СтруктураДляЗаписи.ЛогИзмененныхПоказателей;
		
		// Группировка по правилу обработки
		Для Каждого СтрПравилоОбработки Из СтруктураДляЗаписи.ДанныеВидовОтчетов Цикл
			
			СтруктураРасчета = ПодготовитьСтруктуруРасчетаДляЗаписиВерсий(СтрПравилоОбработки);
			
			Если НЕ ПустаяСтрока(ИдентификаторСеанса) Тогда
				// Запись черновых для совместимости с классическим движком расчета
				СтруктураРасчета.Вставить("ИдентификаторСеанса", ИдентификаторСеанса);
			КонецЕсли;
					
			СтрокаКлючевыхСрезов = "Сценарий,Организация,УправлениеПериодом,Проект";
			Для Сч = 1 По СтруктураРасчета.МаксАналитикОтчета Цикл
				СтрокаКлючевыхСрезов = СтрокаКлючевыхСрезов + ",Аналитика" + Сч;
				СтруктураРасчета.Вставить("Аналитика" + Сч);
			КонецЦикла;
			
			тЛог_ПравилоОбработки = тЛогИзмененныхПоказателей.Скопировать(Новый Структура("ПравилоОбработки",СтруктураРасчета.ПравилоОбработки));
			
			тОписаниеВерсии = тЛог_ПравилоОбработки.Скопировать(, СтрокаКлючевыхСрезов);
			тОписаниеВерсии.Свернуть(СтрокаКлючевыхСрезов);
			
			Для Каждого СтрОписаниеВерсии Из тОписаниеВерсии Цикл
				
				ЗаполнитьЗначенияСвойств(СтруктураРасчета, СтрОписаниеВерсии);
				ОписаниеВерсии = ПолучитьОписаниеВерсии(СтруктураРасчета);
				
				// Отберем строки для записи
				СтруктураОтбора = Новый Структура(СтрокаКлючевыхСрезов);
				ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрОписаниеВерсии);
				тЛог_КлючевыеСрезы = тЛог_ПравилоОбработки.Скопировать(СтруктураОтбора);
				
				тВерсии = тЛог_КлючевыеСрезы.Скопировать(,"ПериодОтчета,Валюта");
				тВерсии.Свернуть("ПериодОтчета,Валюта");
				
				Для Каждого СтрВерсия Из тВерсии Цикл
					
					// Найдем или создадим версию значений показателей
					ЗаполнитьЗначенияСвойств(СтруктураРасчета, СтрВерсия);
					Версия = ПолучитьВерсию(СтруктураРасчета, ОписаниеВерсии);
					
					СтруктураОтбора = Новый Структура("ПериодОтчета,Валюта");
					ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрВерсия);
					
					тЛог_ПериодыВалюты = тЛог_КлючевыеСрезы.Скопировать(СтруктураОтбора);
					
					тИндексыРегистров = тЛог_ПериодыВалюты.Скопировать(,"ИндексРегистраПоказателя");
					тИндексыРегистров.Свернуть("ИндексРегистраПоказателя");
					
					Для Каждого СтрИндексРегистра Из тИндексыРегистров Цикл
						
						ИндексРегистраПоказателя = СтрИндексРегистра.ИндексРегистраПоказателя;
				
						// Отберем строки для записи
						СтруктураОтбора = Новый Структура("ИндексРегистраПоказателя");
						ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрИндексРегистра);		
						тДляЗаписиТекущегоСреза = тЛог_ПериодыВалюты.Скопировать(СтруктураОтбора);		
				
						// Подготовим таблицу для записи
						Если ИндексРегистраПоказателя = -1 Тогда
							тРегистр = РегистрыСведений.ЗначенияПоказателейОтчетовНечисловые.СоздатьНаборЗаписей();
						ИначеЕсли ИндексРегистраПоказателя = -2 Тогда				
							тРегистр = РегистрыСведений.ЗначенияПоказателейОтчетовВалютные.СоздатьНаборЗаписей();
						ИначеЕсли ИндексРегистраПоказателя = -3 Тогда
							тДляЗаписиТекущегоСреза.Колонки.Найти("Значение").Имя = "Комментарий";
							тРегистр = РегистрыСведений.КомментарииЗначенийПоказателей.СоздатьНаборЗаписей();	
						ИначеЕсли ИндексРегистраПоказателя = 0 Тогда
							тРегистр = РегистрыСведений.ЗначенияПоказателейОтчетовСинтетика.СоздатьНаборЗаписей();
						Иначе
							тРегистр = РегистрыСведений["ЗначенияПоказателейОтчетов" + Строка(ИндексРегистраПоказателя)].СоздатьНаборЗаписей();
						КонецЕсли;	
				
						тДляЗаписиТекущегоСреза.Колонки.Добавить("Версия");
						тДляЗаписиТекущегоСреза.ЗаполнитьЗначения(Версия, "Версия");			
						тДляЗаписиТекущегоСреза.Колонки.Добавить("ИспользуемаяИБ");
						тДляЗаписиТекущегоСреза.ЗаполнитьЗначения(СтруктураРасчета.ИспользуемаяИБ,"ИспользуемаяИБ");
						тДляЗаписиТекущегоСреза.Колонки.Добавить("ДатаИзменения");
						тДляЗаписиТекущегоСреза.ЗаполнитьЗначения(СтруктураРасчета.ДатаИзменения,"ДатаИзменения");
						тДляЗаписиТекущегоСреза.Колонки.Добавить("ДатаИзмененияMs");
						тДляЗаписиТекущегоСреза.ЗаполнитьЗначения(СтруктураРасчета.ДатаИзмененияMs,"ДатаИзмененияMs");
						тДляЗаписиТекущегоСреза.Колонки.Добавить("ПоследнийРедактировавший");
						тДляЗаписиТекущегоСреза.ЗаполнитьЗначения(СтруктураРасчета.ПоследнийРедактировавший,"ПоследнийРедактировавший");
						тДляЗаписиТекущегоСреза.Колонки.Добавить("СпособФормированияОтчета");
						тДляЗаписиТекущегоСреза.ЗаполнитьЗначения(СтруктураРасчета.СпособФормированияОтчета,"СпособФормированияОтчета");			

						// Запишем данные в регистр
						тРегистр.Отбор.Версия.Установить(Версия);
						Если СтруктураРасчета.СохранятьИсториюИзменений И ИндексРегистраПоказателя <> -3 Тогда					
							тРегистр.Загрузить(тДляЗаписиТекущегоСреза);
							тРегистр.Записать(Истина);					
						Иначе					
							тРазличныеПоказатели = тДляЗаписиТекущегоСреза.Скопировать(,"Показатель");
							тРазличныеПоказатели.Свернуть("Показатель");
							Для Каждого стрПоказатель Из тРазличныеПоказатели Цикл						
								тРегистр.Отбор.Показатель.Установить(стрПоказатель.Показатель);
								тРегистр.Загрузить(тДляЗаписиТекущегоСреза.Скопировать(Новый Структура("Показатель",стрПоказатель.Показатель)));
								тРегистр.Записать(Истина);						
							КонецЦикла;					
						КонецЕсли;
							
					КонецЦикла;	 
		 
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		// Все новые значения показателей в регистрах, очищаем лог измененных показателей
		Если НЕ ОчиститьЛогИзмененныхПоказателей() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();		
	
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить запись показателей отчетов.'");		
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ВыполнитьЗаписьЛогаИзмененыхПоказателей", , , ТекстСообщения, ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции	

#КонецОбласти


#Область РасчетПоДаннымДляПересчета

Функция ВыполнитьРасчетПоДаннымДляПересчета(ПараметрыРасчета)
	
	// Подготовим данные для пересчета
   	ДанныеДляПересчета = ПолучитьДанныеДляПересчетаРазбитыеПоУправлениюПериодомСценарием();
	Если ДанныеДляПересчета = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Добавим лог измененных показателей и инициализируем менеджер временных таблиц
	МенеджерВременныхТаблиц = ЗагрузитьЛогИзмененныхПоказателейВМенеджерВТ();

	Для Каждого СтрокаТаблицы Из ДанныеДляПересчета Цикл
		
		ИнициализироватьОбъектРасчета();
		Если Не ПодготовитьОбъектРасчета(МенеджерВременныхТаблиц, СтрокаТаблицы, ПараметрыРасчета) Тогда
			Возврат Ложь;
		КонецЕсли;

		// Выполним расчет по правилу расчета
		Если Не РассчитатьПоПравилуРасчета() Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Обработаем данные расчета
	Если ПараметрыРасчета.ЗаписыватьДанныеВРегистры Тогда
		Если Не ВыполнитьЗаписьЛогаИзмененыхПоказателей(МенеджерВременныхТаблиц) Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Если Не СохранитьЛогИзмененныхПоказателей(МенеджерВременныхТаблиц, ПараметрыРасчета.НомерТранзакции) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьДанныеДляПересчетаРазбитыеПоУправлениюПериодомСценарием()

	// Определим документ "Управление периодом" для каждого из интервалов
	ДанныеДляПересчета = ДанныеДляПересчетаПоказателей.ВыгрузитьКолонки();
	ДанныеДляПересчета.Колонки.Добавить("УправлениеПериодом");	
	Для Каждого СтрокаТаблицы Из ДанныеДляПересчетаПоказателей Цикл
		
		ДанныеДляРасчетов = Новый Структура;
		ДанныеДляРасчетов.Вставить("Организация", 	СтрокаТаблицы.Организация);
		ДанныеДляРасчетов.Вставить("Сценарий", 		СтрокаТаблицы.Сценарий);
		ДанныеДляРасчетов.Вставить("ПериодОтчета", 	СтрокаТаблицы.ПериодОтчета);
		ДанныеДляРасчетов.Вставить("ВидОтчета", 	СтрокаТаблицы.ВидОтчета);
		
		// Получим данные периода
		ДанныеПериода = ПолучитьДанныеПериода(ДанныеДляРасчетов.ПериодОтчета);
		ДанныеДляРасчетов.Вставить("ДатаНачала", 	ДанныеПериода.ДатаНачала);
		ДанныеДляРасчетов.Вставить("ДатаОкончания", ДанныеПериода.ДатаОкончания);
		ДанныеДляРасчетов.Вставить("Периодичность", ДанныеПериода.Периодичность);
		
		ДанныеПериодаОкончания = ПолучитьДанныеПериода(СтрокаТаблицы.ПериодОкончания);
		
		// Получим массив периодов
		МассивПериодов = ПолучитьПодчиненныеПериоды(ДанныеДляРасчетов.ДатаНачала, ДанныеПериодаОкончания.ДатаОкончания, ДанныеДляРасчетов.Периодичность); 	
			
		// Найдем документ для каждого из периодов
		// Разобьем строки по периодам, если необходимо
		НСтрока = Неопределено;
		Для Каждого ТекущийПериод Из МассивПериодов Цикл
			
			// Добавим данные управления периодом
			Если НЕ ДобавитьДанныеУправленияПериодомСценария(ДанныеДляРасчетов) Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			// Добавим строку в итоговую таблицу, если это новая строка или новый документ управления периодом
			Если НСтрока = Неопределено ИЛИ НСтрока.УправлениеПериодом <> ДанныеДляРасчетов.УправлениеПериодом Тогда
				НСтрока = ДанныеДляПересчета.Добавить();
				ЗаполнитьЗначенияСвойств(НСтрока, СтрокаТаблицы);
				НСтрока.УправлениеПериодом = ДанныеДляРасчетов.УправлениеПериодом;
				НСтрока.ПериодОтчета = ТекущийПериод;
			КонецЕсли;
			
			// Найдем правило обработки
			Если НЕ ЗначениеЗаполнено(НСтрока.ПравилоОбработки) Тогда
				Если НЕ ДобавитьПравилоОбработки(ДанныеДляРасчетов) Тогда
					Возврат Неопределено;
				КонецЕсли;
				НСтрока.ПравилоОбработки = ДанныеДляРасчетов.ПравилоОбработки;
			КонецЕсли;
			
			// Найдем способ формирования отчета
			Если НЕ ЗначениеЗаполнено(НСтрока.СпособФормированияОтчета) Тогда
				Если НЕ ДобавитьСпособФормированияОтчета(ДанныеДляРасчетов) Тогда
					Возврат Неопределено;
				КонецЕсли;
				НСтрока.СпособФормированияОтчета = ДанныеДляРасчетов.СпособФормированияОтчета;	
			КонецЕсли;
			
			НСтрока.ПериодОкончания = ТекущийПериод;
		
		КонецЦикла;
			
	КонецЦикла;
	
	ДанныеДляПересчетаПоказателей.Очистить();
	
	Возврат ДанныеДляПересчета;	
	
КонецФункции

#КонецОбласти


#Область РасчетПоИзмененнымПоказателям

Функция ВыполнитьРасчетЗависимыхПоказателей(ПараметрыРасчета)
	
	// Добавим лог измененных показателей и инициализируем менеджер временных таблиц
	МенеджерВременныхТаблиц = ЗагрузитьЛогИзмененныхПоказателейВМенеджерВТ();
	
	// Получим таблицы для расчета
	ТабИзмененныхПоказателей = ПолучитьИзВременногоХранилища(АдресТаблицыИзмененныхПоказателей);
	ТабИзмененныхПоказателей.Колонки.Добавить("УправлениеПериодом", Новый ОписаниеТипов("ДокументСсылка.УправлениеПериодомСценария"));
	ТабИзмененныхПоказателей.Колонки.Добавить("ВидОтчета", Новый ОписаниеТипов("СправочникСсылка.ВидыОтчетов"));
	ТабИзмененныхПоказателей.Колонки.Добавить("ЗависимыйПоказатель", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	ПараметрыРасчета.Вставить("КэшОбработанныхСрезов", Новый Массив);
	ПараметрыРасчета.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	
	// Дополним таблицу
	Если Не ДополнитьДанныеИзмененныхПоказателей(
		ТабИзмененныхПоказателей, ТабИзмененныхПоказателей, ПараметрыРасчета) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	// Выполним рекурсивный пересчет показателей
	Если НЕ ВыполнитьРасчетЗависимыхПоказателейРекурсивно(ПараметрыРасчета, ТабИзмененныхПоказателей) Тогда
		Возврат Ложь;
	КонецЕсли;

	// Записываем изменения в лог измененных показателей
	Если ПараметрыРасчета.ВидРасчета = "ПоИзмененным" Тогда
		Если ПараметрыРасчета.ЗаписыватьДанныеВРегистры Тогда
			Возврат ВыполнитьЗаписьЛогаИзмененыхПоказателей(МенеджерВременныхТаблиц);
		Иначе
			Возврат СохранитьЛогИзмененныхПоказателей(МенеджерВременныхТаблиц, ПараметрыРасчета.НомерТранзакции);
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Истина;
		
КонецФункции

Функция ВыполнитьРасчетЗависимыхПоказателейРекурсивно(ПараметрыРасчета, ТабИзмененныхПоказателей)
	
	РасчетПоТекущимВидамОтчетов		= ПараметрыРасчета.РасчетПоТекущимВидамОтчетов;
	РасчетПоСвязаннымВидамОтчетов	= ПараметрыРасчета.РасчетПоСвязаннымВидамОтчетов;
	КэшОбработанныхСрезов			= ПараметрыРасчета.КэшОбработанныхСрезов;
	МенеджерВременныхТаблиц			= ПараметрыРасчета.МенеджерВременныхТаблиц;

	Если РасчетПоСвязаннымВидамОтчетов Тогда
		ТабРассчитанныхПоказателей 	= ТабИзмененныхПоказателей.СкопироватьКолонки();
	КонецЕсли;
		
	// Сгруппируем данные по правилам расчета
	тПравилаОбработки = ТабИзмененныхПоказателей.Скопировать(,"ВидОтчета,ПравилоОбработки,ЗависимыйПоказатель");
	тПравилаОбработки.Свернуть("ВидОтчета,ПравилоОбработки,ЗависимыйПоказатель");
	Для Каждого СтрПравилоОбработки Из тПравилаОбработки Цикл
		
		// Получим строки с ключевыми срезами
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ВидОтчета", СтрПравилоОбработки.ВидОтчета); 
		ДобавитьДанныеВидаОтчета(СтруктураВозврата);
		
		// Построим строку ключевых срезов
		СтрокаКлючевыхАналитик = "ВидОтчета,ПравилоОбработки,УправлениеПериодом,Сценарий,Организация,Проект";
		Для Сч = 1 По СтруктураВозврата.МаксКлючевыхАналитик Цикл
			СтрокаКлючевыхАналитик = СтрокаКлючевыхАналитик + ",Аналитика" + Сч;
		КонецЦикла;		
		
		// Цикл по строкам ключевого среза
		СтруктураОтбора = Новый Структура();
		Для Каждого Срез Из тПравилаОбработки.Колонки Цикл
			СтруктураОтбора.Вставить(Срез.Имя, СтрПравилоОбработки[Срез.Имя]);
		КонецЦикла;		
		тСтрокиРасчета = ТабИзмененныхПоказателей.Скопировать(СтруктураОтбора);
		тСтрокиРасчета.Свернуть(СтрокаКлючевыхАналитик);		
		Для Каждого СтрРасчета Из тСтрокиРасчета Цикл			
			
			// Проверим, обрабатывался ли уже данный набор ключевых срезов
			СтруктураОтбора = Новый Структура();
			СтрокаОбработанныхСрезов = "";
			Для Каждого Срез Из тСтрокиРасчета.Колонки Цикл
				ТекущийСрез = СтрРасчета[Срез.Имя];
				Если ТекущийСрез = Неопределено Тогда
					СтрокаОбработанныхСрезов = СтрокаОбработанныхСрезов + "НЕОПРЕДЕЛЕНО@";
				Иначе
					СтрокаОбработанныхСрезов = СтрокаОбработанныхСрезов + ТекущийСрез.УникальныйИдентификатор() + "@";
				КонецЕсли;
				СтруктураОтбора.Вставить(Срез.Имя, СтрРасчета[Срез.Имя]);
			КонецЦикла;
			Если КэшОбработанныхСрезов.Найти(СтрокаОбработанныхСрезов) = Неопределено Тогда
				КэшОбработанныхСрезов.Добавить(СтрокаОбработанныхСрезов);
			Иначе
				// ДОДЕЛАТЬ: Здесь надо добавить показатель
				//ТекстСообщения = НСтр("ru = 'Произошло зацикливание расчета по ключевым срезам:'");
				//Для Каждого Срез Из тСтрокиРасчета.Колонки Цикл
				//	ТекстСообщения = ТекстСообщения + СтрШаблон("
				//	|	%1: ""%2"";", Срез.Имя, СтрРасчета[Срез.Имя]);
				//КонецЦикла;
				//ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.РассчитатьПоЗначениямИзмененныхПоказателейРекурсивно", , , ТекстСообщения);
				//Возврат Ложь;
			КонецЕсли;				
			
			// Инициализируем данные объекта расчета
			ИнициализироватьОбъектРасчета();
			ОбъектРасчета.ПериодОтчета = ПолучитьЗначениеРеквизитаОбъекта(СтрРасчета.УправлениеПериодом, "ПериодСценария");
			ОбъектРасчета.ПериодОкончания = ПолучитьЗначениеРеквизитаОбъекта(СтрРасчета.УправлениеПериодом, "ПериодСценарияОкончание");
			
			// Подготовим остальные данные для расчета
			ОбъектРасчета.тИзмененныеПоказатели = ТабИзмененныхПоказателей.Скопировать(СтруктураОтбора);
			Если Не ПодготовитьОбъектРасчета(МенеджерВременныхТаблиц, СтрРасчета, ПараметрыРасчета) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			// Получим параметрику расчета
			Если РежимТрассировки Тогда
				глТаблицаПересчетаПоказателей = ПолучитьТаблицуРасчетаПоказателейПоИзмененнымПоказателям(ОбъектРасчета);
			Иначе		
				глТаблицаПересчетаПоказателей = УправлениеРасчетомПоказателей.ПолучитьТаблицуРасчетаПоказателейПоИзмененнымПоказателям(ОбъектРасчета);
			КонецЕсли;
			
			// Если это исходные показатели, добавим их в лог
			Если НЕ СтрПравилоОбработки.ЗависимыйПоказатель Тогда
				Если НЕ ДобавитьИзмененныеПоказателиВЛог() Тогда
					Возврат Ложь;
				КонецЕсли;
				мЛогРассчитанныхПоказателей = МенеджерВременныхТаблиц.Таблицы.Найти("втРассчитанныеПоказатели_ЗначениеВалюта");
				Если мЛогРассчитанныхПоказателей <> Неопределено Тогда
					ДобавитьВТаблицуРассчитанныхПоказателей(мЛогРассчитанныхПоказателей.ПолучитьДанные().Выгрузить());
				КонецЕсли;
			КонецЕсли;
			
			// Расчет по переданным измененным показателям
			Если РасчетПоСвязаннымВидамОтчетов Тогда
				ОбъектРасчета.Вставить("ТабРассчитанныхПоказателей", ТабРассчитанныхПоказателей);
			КонецЕсли;
			Если РасчетПоТекущимВидамОтчетов Тогда
				Если Не РассчитатьПоИзмененнымПоказателям(глТаблицаПересчетаПоказателей) Тогда
					Возврат Ложь;
				КонецЕсли;
				УничтожитьВременныеТаблицыРасчета();
			КонецЕсли;
					
		КонецЦикла;
		
	КонецЦикла;
	
	// Теперь выполним расчет для новых значений показателей
	Если РасчетПоСвязаннымВидамОтчетов И ТабРассчитанныхПоказателей.Количество() > 0 Тогда
	
		ТабИзмененныхПоказателей.Очистить();
		Если Не ДополнитьДанныеИзмененныхПоказателей(ТабРассчитанныхПоказателей, ТабИзмененныхПоказателей, ПараметрыРасчета) Тогда
			Возврат Ложь;
		КонецЕсли;
	   		
		Возврат ВыполнитьРасчетЗависимыхПоказателейРекурсивно(ПараметрыРасчета, ТабИзмененныхПоказателей);
			
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

Функция ДополнитьДанныеИзмененныхПоказателей(ИзмененныеПоказатели, СвязанныеПоказатели, ПараметрыРасчета)
	
	РасчетПоСвязаннымВидамОтчетов 	= ПараметрыРасчета.РасчетПоСвязаннымВидамОтчетов;
	ВидРасчета						= ПараметрыРасчета.ВидРасчета;
	//ЗаполнятьУП 					= ПараметрыРасчета.КэшОбработанныхСрезов.Количество() = 0;
	
	ВсегоСтрок = ИзмененныеПоказатели.Количество() - 1;	
	Для Сч = 0 По ВсегоСтрок Цикл
	
		СтрПоказатели = ИзмененныеПоказатели.Получить(Сч); 
		
		ДанныеДляРасчетов = Новый Структура;
		ДанныеДляРасчетов.Вставить("Организация", СтрПоказатели.Организация);
		ДанныеДляРасчетов.Вставить("Сценарий", СтрПоказатели.Сценарий);
		ДанныеДляРасчетов.Вставить("ПериодОтчета", СтрПоказатели.ПериодОтчета);

		// Добавим показатель
		Если НЕ ЗначениеЗаполнено(СтрПоказатели.Показатель) Тогда
			ТекстСообщения = НСтр("ru = 'Пустое значение ""Показатель"" в таблице измененных показателей'"); 
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ДополнитьДанныеИзмененныхПоказателей", , , ТекстСообщения); 
			Возврат Ложь;
		КонецЕсли;
		ДанныеДляРасчетов.Вставить("Показатель", СтрПоказатели.Показатель);
		
		// Получим вид отчета
		ВидОтчета = ПолучитьЗначениеРеквизитаОбъекта(СтрПоказатели.Показатель, "Владелец");
		ДанныеДляРасчетов.Вставить("ВидОтчета", ВидОтчета);
		СтрПоказатели.ВидОтчета = ВидОтчета;
		
		// Получим данные периода
		ДанныеПериода = ПолучитьДанныеПериода(СтрПоказатели.ПериодОтчета);
		ДанныеДляРасчетов.Вставить("ДатаНачала", ДанныеПериода.ДатаНачала);
		ДанныеДляРасчетов.Вставить("ДатаОкончания", ДанныеПериода.ДатаОкончания);
		ДанныеДляРасчетов.Вставить("Периодичность", ДанныеПериода.Периодичность);
		
		// Добавим данные управления периодом
		Если НЕ ДобавитьДанныеУправленияПериодомСценария(ДанныеДляРасчетов) Тогда
			Возврат Ложь;
		КонецЕсли;
		СтрПоказатели.УправлениеПериодом = ДанныеДляРасчетов.УправлениеПериодом;
		
		// Добавим правило обработки
		Если ЗначениеЗаполнено(СтрПоказатели.ПравилоОбработки) Тогда
			ДанныеДляРасчетов.Вставить("ПравилоОбработки", СтрПоказатели.ПравилоОбработки);
		Иначе
			Если НЕ ДобавитьПравилоОбработки(ДанныеДляРасчетов) Тогда
				Возврат Ложь;
			КонецЕсли;
			//Если ЗаполнятьУП Тогда
				СтрПоказатели.ПравилоОбработки = ДанныеДляРасчетов.ПравилоОбработки;
			//КонецЕсли;
		КонецЕсли;
		
		// Добавим в таблицу связанные правила расчетов
		Если РасчетПоСвязаннымВидамОтчетов Тогда
			
			Если НЕ ДобавитьПравилаОбработки(ДанныеДляРасчетов) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Если ВидРасчета = "ПоЦелевым" Тогда
			    МассивСвязанныхПравилОбработки = ПолучитьИсходныеПравилаОбработки(ДанныеДляРасчетов);
				// Сохраним последние правила обработки
				КэшДанных.Вставить("ПравилаОбработки#Последние", ДанныеДляРасчетов.ПравилаОбработки);
			Иначе
				МассивСвязанныхПравилОбработки = ПолучитьЗависимыеПравилаОбработки(ДанныеДляРасчетов);
			КонецЕсли;
			
			Для Каждого СвязанноеПравилоОбработки Из МассивСвязанныхПравилОбработки Цикл
				НСтрока = СвязанныеПоказатели.Добавить();
				ЗаполнитьЗначенияСвойств(НСтрока, СтрПоказатели);
				НСтрока.ПравилоОбработки = СвязанноеПравилоОбработки;
				НСтрока.УправлениеПериодом = ДанныеДляРасчетов.УправлениеПериодом;
				НСтрока.ЗависимыйПоказатель = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти


#Область РасчетПоЗначениямЦелевыхПоказателей

Функция ВыполнитьРасчетПоЗначениямЦелевыхПоказателей(ЦелевыеПоказатели, ПараметрыРасчета)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("БылиОшибки", Истина);
	
	// Добавим лог измененных показателей и инициализируем менеджер временных таблиц
	МенеджерВременныхТаблиц = ЗагрузитьЛогИзмененныхПоказателейВМенеджерВТ();
	
	// Создадим все таблицы и структуры для расчета
	ТабЦелевыхПоказателей = ЦелевыеПоказатели.Скопировать(); 
	ТабЦелевыхПоказателей.Колонки.Добавить("УправлениеПериодом", Новый ОписаниеТипов("ДокументСсылка.УправлениеПериодомСценария"));
	ТабЦелевыхПоказателей.Колонки.Добавить("ВидОтчета", Новый ОписаниеТипов("СправочникСсылка.ВидыОтчетов"));
	ТабЦелевыхПоказателей.Колонки.Добавить("ЗависимыйПоказатель", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	тПоказатели = Новый ТаблицаЗначений;
	тПоказатели.Колонки.Добавить("Показатель");
	тПоказатели.Колонки.Добавить("Представление");
	тПоказатели.Колонки.Добавить("Уровень");
	тПоказатели.Колонки.Добавить("Процедура");
	тПоказатели.Колонки.Добавить("ТипЗначения");
	тПоказатели.Колонки.Добавить("ЧислоАналитик");
	тПоказатели.Колонки.Добавить("ЕстьАналитикаВалюта");
	тПоказатели.Колонки.Добавить("ВидИтога"); 
	тПоказатели.Колонки.Добавить("ВидИтогаПоПериоду");
	тПоказатели.Колонки.Добавить("ТипРасчета");
	
	тСвязиПоказателей = Новый ТаблицаЗначений;
	тСвязиПоказателей.Колонки.Добавить("Потребитель");
	тСвязиПоказателей.Колонки.Добавить("Показатель");
	тСвязиПоказателей.Колонки.Добавить("Уровень");
	
	ПараметрыРасчета.Вставить("КэшОбработанныхСрезов", Новый Массив);
	ПараметрыРасчета.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ПараметрыРасчета.Вставить("тПоказатели", тПоказатели);
	ПараметрыРасчета.Вставить("тСвязиПоказателей", тСвязиПоказателей);
	
	// Дополним таблицу
	Если Не ДополнитьДанныеИзмененныхПоказателей(
		ТабЦелевыхПоказателей, ТабЦелевыхПоказателей, ПараметрыРасчета) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	// Создадим пустую таблицу значений показателей для нулевого уровня
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
		|ВЫБРАТЬ * 
		|ПОМЕСТИТЬ втЛогИзмененныхПоказателейУровень0
		|ИЗ втЛогИзмененныхПоказателей
		|ГДЕ ЛОЖЬ";	
	Запрос.Выполнить();
	
	// Выполним рекурсивный пересчет показателей
	Если НЕ РассчитатьПоЗначениямЦелевыхПоказателейРекурсивно(ТабЦелевыхПоказателей, ПараметрыРасчета) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	// Вычислим окончательные уровни в таблице связей
	МассивПоказателей = Новый Массив;
	Для Каждого СтрокаТаблицы ИЗ ЦелевыеПоказатели Цикл
		НайденныеСтроки = тСвязиПоказателей.НайтиСтроки(Новый Структура("Потребитель",СтрокаТаблицы.Показатель));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			// Для показателей из таблицы целевых установим максимальный уровень
			НайденнаяСтрока.Уровень = 1;
			МассивПоказателей.Добавить(НайденнаяСтрока.Показатель);
		КонецЦикла;
	КонецЦикла;
	
	УстановитьУровниРекурсивно(тСвязиПоказателей, МассивПоказателей, 2);	
	
	МассивПоказателей0Уровень = Новый Массив;
	Для Каждого СтрокаТаблицы Из тСвязиПоказателей Цикл
		Если тПоказатели.Найти(СтрокаТаблицы.Показатель, "Показатель") = Неопределено Тогда
			МассивПоказателей0Уровень.Добавить(СтрокаТаблицы.Показатель);
		КонецЕсли;
	КонецЦикла;
	
	тСвязиПоказателей.Сортировать("Уровень Убыв");	
	
	// Установим уровень в таблице показателей
	Для Каждого СтрокаТаблицы Из тПоказатели Цикл
		СтрокаТаблицы.Уровень = тСвязиПоказателей.Найти(СтрокаТаблицы.Показатель,"Потребитель").Уровень;
		СтрокаТаблицы.ТипРасчета = 1;
	КонецЦикла;
	
	// Добавим данные показателей 0-уровня
	тДанныеПокзазателей0Уровень = ПолучитьДанныеПоказателейУровень0(МассивПоказателей0Уровень, 
		КэшДанных.Получить("ПравилаОбработки#Последние"));
	Для Каждого СтрокаТаблицы Из тДанныеПокзазателей0Уровень Цикл
		НайденнаяСтрока = тПоказатели.Найти(СтрокаТаблицы.Показатель, "Показатель");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = тПоказатели.Добавить();
		КонецЕсли;
	   	ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокаТаблицы);
		НайденнаяСтрока.Представление = СтрокаТаблицы.ПоказательПредставление + " (" + СтрокаТаблицы.ВидОтчетаПредставление + ")";
		НайденнаяСтрока.ТипРасчета = ?(ЗначениеЗаполнено(СтрокаТаблицы.Процедура),2,3);		
		НайденнаяСтрока.Уровень = тСвязиПоказателей.Найти(СтрокаТаблицы.Показатель,"Показатель").Уровень+1;		
	КонецЦикла;
	тПоказатели.Сортировать("Уровень Убыв, Представление");	

	// Добавим в лог накопленные показатели нулевого уровня
	Запрос.Текст = "
		|ВЫБРАТЬ *
		|ПОМЕСТИТЬ втЛогИзмененныхПоказателейВременная
		|ИЗ
		|	втЛогИзмененныхПоказателей
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ *
		|ИЗ
		|	втЛогИзмененныхПоказателейУровень0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втЛогИзмененныхПоказателей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ *
		|ПОМЕСТИТЬ втЛогИзмененныхПоказателей
		|ИЗ
		|	втЛогИзмененныхПоказателейВременная КАК ЗначенияПоказателей";	
	Запрос.Выполнить();
	
	// Добавим рассчитанные показатели в лог изменных показателей
	Если НЕ СохранитьЛогИзмененныхПоказателей(МенеджерВременныхТаблиц) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;

	// Получим итоговую таблицу значений показателей
	тДанныеАналитик = ПолучитьДанныеАналитик(Запрос);
	тЗначенияПоказателей = ПолучитьЛогИзмененныхПоказателей();
	
	// Получим массив всех периодов
	тВсеПериоды = тЗначенияПоказателей.Скопировать(,"ПериодОтчета");
	Для Каждого СтрокаТаблицы Из ЦелевыеПоказатели Цикл
		НСтрока = тВсеПериоды.Добавить();
		НСтрока.ПериодОтчета = СтрокаТаблицы.ПериодОтчета;
	КонецЦикла;
	тВсеПериоды.Свернуть("ПериодОтчета");
	тВсеПериоды.Колонки.Добавить("ДатаНачала");
	Для Каждого СтрокаТаблицы Из тВсеПериоды Цикл
		ТекДанные = ПолучитьДанныеПериода(СтрокаТаблицы.ПериодОтчета);
		СтрокаТаблицы.ДатаНачала = ТекДанные.ДатаНачала;	
	КонецЦикла;		
	тВсеПериоды.Сортировать("ДатаНачала");
	МассивПериодов = тВсеПериоды.ВыгрузитьКолонку("ПериодОтчета");
	
	// Заполним результат
	СтруктураВозврата.БылиОшибки = Ложь;
	СтруктураВозврата.Вставить("ЗначенияПоказателей", тЗначенияПоказателей);
	СтруктураВозврата.Вставить("Показатели", тПоказатели);
	СтруктураВозврата.Вставить("СвязиПоказателей", тСвязиПоказателей); 
	СтруктураВозврата.Вставить("ДанныеАналитик", тДанныеАналитик);
	СтруктураВозврата.Вставить("МассивПериодов", МассивПериодов);
	
	Возврат СтруктураВозврата; 
	
КонецФункции

Функция РассчитатьПоЗначениямЦелевыхПоказателейРекурсивно(ТабЦелевыхПоказателей, ПараметрыРасчета)
	
	КэшОбработанныхСрезов			= ПараметрыРасчета.КэшОбработанныхСрезов;
	МенеджерВременныхТаблиц			= ПараметрыРасчета.МенеджерВременныхТаблиц;
	РасчетПоСвязаннымВидамОтчетов	= ПараметрыРасчета.РасчетПоСвязаннымВидамОтчетов;
	тПоказатели						= ПараметрыРасчета.тПоказатели;
	тСвязиПоказателей				= ПараметрыРасчета.тСвязиПоказателей;
	
	ЗначенияПоказателей0ТекущийРасчет = ТабЦелевыхПоказателей.СкопироватьКолонки();
	
	// Сгруппируем данные по правилам расчета
	тПравилаОбработки = ТабЦелевыхПоказателей.Скопировать(,"ПравилоОбработки");
	тПравилаОбработки.Свернуть("ПравилоОбработки");
	Для Каждого СтрПравилоОбработки Из тПравилаОбработки Цикл 
		
		ПравилоОбработки = СтрПравилоОбработки.ПравилоОбработки;
		
		// Получим вид отчета
		ТекВидОтчета = КэшДанных.Получить(ПравилоОбработки);
		Если ТекВидОтчета = Неопределено Тогда
			ТекВидОтчета = ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(ПравилоОбработки, "Владелец");
		КонецЕсли;
		
		// Получим строки с ключевыми срезами
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ВидОтчета", ТекВидОтчета);  
		ДобавитьДанныеВидаОтчета(СтруктураВозврата);
		
		// Построим строку ключевых срезов
		СтрокаКлючевыхАналитик = "Сценарий,Организация,Проект";
		Для Сч = 1 По СтруктураВозврата.МаксКлючевыхАналитик Цикл
			СтрокаКлючевыхАналитик = СтрокаКлючевыхАналитик + ",Аналитика" + Сч;
		КонецЦикла;		
		
		// Цикл по строкам ключевого среза
		тСтрокиРасчета = ТабЦелевыхПоказателей.Скопировать(Новый Структура("ПравилоОбработки",ПравилоОбработки));
		ДанныеПараметрики = ПолучитьТаблицуРасчетаПоказателейПоЦелевымПоказателям(ПравилоОбработки, тСтрокиРасчета);
		глТаблицаПересчетаПоказателей = ДанныеПараметрики.глТаблицаПересчетаПоказателей;
		тПоказателиОперанды = ДанныеПараметрики.тПоказателиОперанды;
		
		тСтрокиРасчета.Свернуть(СтрокаКлючевыхАналитик + ",ПравилоОбработки,УправлениеПериодом");		
		Для Каждого СтрРасчета Из тСтрокиРасчета Цикл			
			
			// Проверим, обрабатывался ли уже данный набор ключевых срезов
			СтруктураОтбора = Новый Структура();
			СтрокаОбработанныхСрезов = "";
			Для Каждого Срез Из тСтрокиРасчета.Колонки Цикл
				ТекущийСрез = СтрРасчета[Срез.Имя];
				Если ТекущийСрез = Неопределено Тогда
					СтрокаОбработанныхСрезов = СтрокаОбработанныхСрезов + "НЕОПРЕДЕЛЕНО@";
				Иначе
					СтрокаОбработанныхСрезов = СтрокаОбработанныхСрезов + ТекущийСрез.УникальныйИдентификатор() + "@";
				КонецЕсли;
				СтруктураОтбора.Вставить(Срез.Имя, СтрРасчета[Срез.Имя]);
			КонецЦикла;
			Если КэшОбработанныхСрезов.Найти(СтрокаОбработанныхСрезов) = Неопределено Тогда
				КэшОбработанныхСрезов.Добавить(СтрокаОбработанныхСрезов);
			Иначе
				ТекстСообщения = НСтр("ru = 'Произошло зацикливание расчета по ключевым срезам:'");
				Для Каждого Срез Из тСтрокиРасчета.Колонки Цикл
					ТекстСообщения = ТекстСообщения + СтрШаблон("
					|	%1: ""%2"";", Срез.Имя, СтрРасчета[Срез.Имя]);
				КонецЦикла;
				ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.РассчитатьПоЗначениямЦелевыхПоказателейРекурсивно", , , ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;				
			
			// Инициализируем данные объекта расчета
			ИнициализироватьОбъектРасчета();
			ОбъектРасчета.ВидОтчета = ТекВидОтчета; 							
			ОбъектРасчета.ПериодОтчета = ПолучитьЗначениеРеквизитаОбъекта(СтрРасчета.УправлениеПериодом, "ПериодСценария");
			ОбъектРасчета.ПериодОкончания = ПолучитьЗначениеРеквизитаОбъекта(СтрРасчета.УправлениеПериодом, "ПериодСценарияОкончание");
		
			// Подготовим остальные данные для расчета
			ОбъектРасчета.тЦелевыеПоказатели = ТабЦелевыхПоказателей.Скопировать(СтруктураОтбора);
			Если Не ПодготовитьОбъектРасчета(МенеджерВременныхТаблиц, СтрРасчета) Тогда
				Возврат Ложь;
			КонецЕсли; 		
			
			// НЕ пересчитываем в валюты
			ОбъектРасчета.ДополнительныеВалюты.Очистить();
			
			// Выполним расчет
			Если Не РассчитатьПоИзмененнымПоказателям(глТаблицаПересчетаПоказателей) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Если РасчетПоСвязаннымВидамОтчетов Тогда
				// Получим показатели 0-уровня для дальнейшего рекурсирвного расчета
				втЗначенияОперандов0 = МенеджерВременныхТаблиц.Таблицы.Найти("втЗначенияОперандов0");
				Если втЗначенияОперандов0 <> Неопределено Тогда
					ВыборкаЗапроса = втЗначенияОперандов0.ПолучитьДанные().Выбрать();
					Пока ВыборкаЗапроса.Следующий() Цикл
						НСтрока = ЗначенияПоказателей0ТекущийРасчет.Добавить();
						ЗаполнитьЗначенияСвойств(НСтрока, ВыборкаЗапроса);
						ЗаполнитьЗначенияСвойств(НСтрока, ОбъектРасчета, СтрокаКлючевыхАналитик);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			// Уничтожим временные таблицы расчета
			УничтожитьВременныеТаблицыРасчета();
			
		КонецЦикла;
			
		// Добавим показатели в дерево расчета			
		Для Каждого СтрокаТаблицы Из тПоказателиОперанды Цикл
			
			НСтрокаСвязи = тСвязиПоказателей.Добавить();
			НСтрокаСвязи.Потребитель = СтрокаТаблицы.Потребитель;
			НСтрокаСвязи.Показатель = СтрокаТаблицы.ПоказательОперанд;
			
			НайденнаяСтрока = тСвязиПоказателей.Найти(СтрокаТаблицы.Потребитель, "Показатель"); 
			Если НайденнаяСтрока = Неопределено Тогда
				// Это потребитель верхнего уровня
				НСтрокаСвязи.Уровень = 1;
			Иначе
				НСтрокаСвязи.Уровень = НайденнаяСтрока.Уровень + 1;
				//ПараметрыРасчета.МаксимальныйУровеньРасчета = Макс(ПараметрыРасчета.МаксимальныйУровеньРасчета, НСтрокаСвязи.Уровень);
			КонецЕсли;
		
			Если тПоказатели.Найти(СтрокаТаблицы.Потребитель,"Показатель") = Неопределено Тогда
					
				НСтрока = тПоказатели.Добавить();
				ЗаполнитьЗначенияСвойств(НСтрока, СтрокаТаблицы);
				НСтрока.Показатель = СтрокаТаблицы.Потребитель;
				НСтрока.Представление = СтрокаТаблицы.ПотребительПредставление + " (" + СтрокаТаблицы.ВидОтчетаПотребителяПредставление + ")";
				НСтрока.ТипЗначения = СтрокаТаблицы.ТипПотребителя;
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЦикла;
	
	// Теперь выполним расчет для новых значений показателей
	Если РасчетПоСвязаннымВидамОтчетов И ЗначенияПоказателей0ТекущийРасчет.Количество() > 0 Тогда
	
		ТабЦелевыхПоказателей.Очистить();
		Если Не ДополнитьДанныеИзмененныхПоказателей(ЗначенияПоказателей0ТекущийРасчет, ТабЦелевыхПоказателей, ПараметрыРасчета) Тогда
			Возврат Ложь;
		КонецЕсли;
	   		
		Возврат РассчитатьПоЗначениямЦелевыхПоказателейРекурсивно(ТабЦелевыхПоказателей, ПараметрыРасчета);
			
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура УстановитьУровниРекурсивно(тСвязиПоказателей, МассивПоказателей, Уровень)

	МассивПоказателейНовый = Новый Массив;
	Для Каждого Показатель Из МассивПоказателей Цикл
		НайденныеСтроки = тСвязиПоказателей.НайтиСтроки(Новый Структура("Потребитель", Показатель));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.Уровень = Уровень;
			МассивПоказателейНовый.Добавить(НайденнаяСтрока.Показатель);
		КонецЦикла;
	КонецЦикла;
	
	Если МассивПоказателейНовый.Количество() Тогда 
		УстановитьУровниРекурсивно(тСвязиПоказателей, МассивПоказателейНовый, Уровень+1);
	КонецЕсли;
	
КонецПроцедуры	

Функция ПолучитьДанныеАналитик(Запрос)
	
	Запрос.Параметры.Вставить("ПустаяАналитика", ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка());
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛогИзмененныхПоказателей.Показатель КАК Показатель
		|ПОМЕСТИТЬ втВсеПоказатели
		|ИЗ
		|	втЛогИзмененныхПоказателей КАК ЛогИзмененныхПоказателей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоказателиОтчетов.Ссылка КАК Показатель,
		|	ВЫБОР
		|		КОГДА ВидыОтчетов.ВидАналитики1 = &ПустаяАналитика
		|			ТОГДА ГруппыРаскрытия.ВидАналитики1
		|		ИНАЧЕ ЕСТЬNULL(ВидыОтчетов.ВидАналитики1, &ПустаяАналитика)
		|	КОНЕЦ КАК ВидАналитики1,
		|	ВЫБОР
		|		КОГДА ВидыОтчетов.ВидАналитики2 = &ПустаяАналитика
		|			ТОГДА ГруппыРаскрытия.ВидАналитики2
		|		ИНАЧЕ ЕСТЬNULL(ВидыОтчетов.ВидАналитики2, &ПустаяАналитика)
		|	КОНЕЦ КАК ВидАналитики2,
		|	ВЫБОР
		|		КОГДА ВидыОтчетов.ВидАналитики3 = &ПустаяАналитика
		|			ТОГДА ГруппыРаскрытия.ВидАналитики3
		|		ИНАЧЕ ЕСТЬNULL(ВидыОтчетов.ВидАналитики3, &ПустаяАналитика)
		|	КОНЕЦ КАК ВидАналитики3,
		|	ВЫБОР
		|		КОГДА ВидыОтчетов.ВидАналитики4 = &ПустаяАналитика
		|			ТОГДА ГруппыРаскрытия.ВидАналитики4
		|		ИНАЧЕ ЕСТЬNULL(ВидыОтчетов.ВидАналитики4, &ПустаяАналитика)
		|	КОНЕЦ КАК ВидАналитики4,
		|	ВЫБОР
		|		КОГДА ВидыОтчетов.ВидАналитики5 = &ПустаяАналитика
		|			ТОГДА ГруппыРаскрытия.ВидАналитики5
		|		ИНАЧЕ ЕСТЬNULL(ВидыОтчетов.ВидАналитики5, &ПустаяАналитика)
		|	КОНЕЦ КАК ВидАналитики5,
		|	ВЫБОР
		|		КОГДА ВидыОтчетов.ВидАналитики6 = &ПустаяАналитика
		|			ТОГДА ГруппыРаскрытия.ВидАналитики6
		|		ИНАЧЕ ЕСТЬNULL(ВидыОтчетов.ВидАналитики6, &ПустаяАналитика)
		|	КОНЕЦ КАК ВидАналитики6,
		|	ГруппыРаскрытия.Валютная КАК Валютная,
		|	ВидыОтчетов.РазделениеПоПроектам КАК РазделениеПоПроектам
		|ПОМЕСТИТЬ втДанныеПоказателей
		|ИЗ
		|	втВсеПоказатели КАК ВсеПоказатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|		ПО ВсеПоказатели.Показатель = ПоказателиОтчетов.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
		|		ПО (ПоказателиОтчетов.ГруппаРаскрытия = ГруппыРаскрытия.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтчетов КАК ВидыОтчетов
		|		ПО (ПоказателиОтчетов.Владелец = ВидыОтчетов.Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПоказателей.Показатель КАК Показатель,
		|	ЗНАЧЕНИЕ(Перечисление.ПостоянныеПоляСводнойТаблицы.Сценарий) КАК ВидАналитики,
		|	""Сценарий"" КАК ИмяАналитики
		|ПОМЕСТИТЬ втДанныеАналитик
		|ИЗ
		|	втДанныеПоказателей КАК ДанныеПоказателей
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПоказателей.Показатель,
		|	ЗНАЧЕНИЕ(Перечисление.ПостоянныеПоляСводнойТаблицы.Проект),
		|	""Проект""
		|ИЗ
		|	втДанныеПоказателей КАК ДанныеПоказателей
		|ГДЕ
		|	ДанныеПоказателей.РазделениеПоПроектам
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПоказателей.Показатель,
		|	ЗНАЧЕНИЕ(Перечисление.ПостоянныеПоляСводнойТаблицы.Организация),
		|	""Организация""
		|ИЗ
		|	втДанныеПоказателей КАК ДанныеПоказателей
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПоказателей.Показатель,
		|	ДанныеПоказателей.ВидАналитики1,
		|	""Аналитика1""
		|ИЗ
		|	втДанныеПоказателей КАК ДанныеПоказателей
		|ГДЕ
		|	ДанныеПоказателей.ВидАналитики1 <> &ПустаяАналитика
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПоказателей.Показатель,
		|	ДанныеПоказателей.ВидАналитики2,
		|	""Аналитика2""
		|ИЗ
		|	втДанныеПоказателей КАК ДанныеПоказателей
		|ГДЕ
		|	ДанныеПоказателей.ВидАналитики2 <> &ПустаяАналитика
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПоказателей.Показатель,
		|	ДанныеПоказателей.ВидАналитики3,
		|	""Аналитика3""
		|ИЗ
		|	втДанныеПоказателей КАК ДанныеПоказателей
		|ГДЕ
		|	ДанныеПоказателей.ВидАналитики3 <> &ПустаяАналитика
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПоказателей.Показатель,
		|	ДанныеПоказателей.ВидАналитики4,
		|	""Аналитика4""
		|ИЗ
		|	втДанныеПоказателей КАК ДанныеПоказателей
		|ГДЕ
		|	ДанныеПоказателей.ВидАналитики4 <> &ПустаяАналитика
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПоказателей.Показатель,
		|	ДанныеПоказателей.ВидАналитики5,
		|	""Аналитика5""
		|ИЗ
		|	втДанныеПоказателей КАК ДанныеПоказателей
		|ГДЕ
		|	ДанныеПоказателей.ВидАналитики5 <> &ПустаяАналитика
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПоказателей.Показатель,
		|	ДанныеПоказателей.ВидАналитики6,
		|	""Аналитика6""
		|ИЗ
		|	втДанныеПоказателей КАК ДанныеПоказателей
		|ГДЕ
		|	ДанныеПоказателей.ВидАналитики6 <> &ПустаяАналитика
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПоказателей.Показатель,
		|	""АналитикаВалюта"",
		|	""АналитикаВалюта""
		|ИЗ
		|	втДанныеПоказателей КАК ДанныеПоказателей
		|ГДЕ
		|	ДанныеПоказателей.Валютная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеАналитик.Показатель КАК Показатель,
		|	ДанныеАналитик.ВидАналитики КАК ВидАналитики,
		|	ДанныеАналитик.ИмяАналитики КАК ИмяАналитики,
		|	ЕСТЬNULL(ВидыСубконтоКорпоративные.Код, ДанныеАналитик.ИмяАналитики) КАК КодАналитики,
		|	ЕСТЬNULL(ВидыСубконтоКорпоративные.Представление, ДанныеАналитик.ИмяАналитики) КАК ПредставлениеАналитики,
		|	ВидыСубконтоКорпоративные.ТипЗначения КАК ТипЗначения,
		|	ВидыСубконтоКорпоративные.ПредставлениеТипа КАК ПредставлениеТипа
		|ИЗ
		|	втДанныеАналитик КАК ДанныеАналитик
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ВидыСубконтоКорпоративные КАК ВидыСубконтоКорпоративные
		|		ПО ДанныеАналитик.ВидАналитики = ВидыСубконтоКорпоративные.Ссылка";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьДанныеПоказателейУровень0(ПотребителиРасчета, ПравилаОбработки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПравилаОбработки", ПравилаОбработки);
	Запрос.УстановитьПараметр("ПотребителиРасчета", ПотребителиРасчета);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроцедурыРасчетов.ПотребительРасчета КАК ПотребительРасчета,
		|	ПроцедурыРасчетов.Процедура КАК Процедура
		|ПОМЕСТИТЬ втПроцедурыРасчетов
		|ИЗ
		|	РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
		|ГДЕ
		|	ПроцедурыРасчетов.НазначениеРасчетов В(&ПравилаОбработки)
		|	И ПроцедурыРасчетов.ПотребительРасчета В(&ПотребителиРасчета)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоказателиОтчетов.Ссылка КАК Показатель,
		|	ПоказателиОтчетов.Представление КАК ПоказательПредставление,
		|	ПоказателиОтчетов.Владелец.Представление КАК ВидОтчетаПредставление,
		|	ПоказателиОтчетов.ТипЗначения КАК ТипЗначения,
		|	ПоказателиОтчетов.ВидИтога КАК ВидИтога,
		|	ПоказателиОтчетов.СпособРасчетаИтогаПоПериоду КАК ВидИтогаПоПериоду,
		|	ПоказателиОтчетов.ГруппаРаскрытия.ЧислоАналитик КАК ЧислоАналитик,
		|	ПоказателиОтчетов.ГруппаРаскрытия.Валютная КАК ЕстьАналитикаВалюта,
		|	ЕСТЬNULL(ПроцедурыРасчетов.Процедура, """") КАК Процедура,
		|	0 КАК Уровень
		|ИЗ
		|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПроцедурыРасчетов КАК ПроцедурыРасчетов
		|		ПО ПоказателиОтчетов.Ссылка = ПроцедурыРасчетов.ПотребительРасчета
		|ГДЕ
		|	ПоказателиОтчетов.Ссылка В(&ПотребителиРасчета)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти


#Область ФакторныйАнализ

Функция ВыполнитьРасчетВлиянияФакторов(тЦелевыеПоказатели, тПоказателиФакторов, ПараметрыРасчета)
	
	Если ПараметрыРасчета.ВидРасчета = "ПоИзмененнымПоЦелевымПоДаннымДляПересчета" Тогда
		
		// Подготовим данные для пересчета
	   	ДанныеДляПересчета = ПолучитьДанныеДляПересчетаРазбитыеПоУправлениюПериодомСценарием();
		Если ДанныеДляПересчета = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		ДанныеДляПересчетаЧислоСтрок = ДанныеДляПересчета.Количество()-1;
		
		// Структура для раскрытия аналитик
		РаскрываемыеАналитики = Новый Структура;
		Для Сч = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			РаскрываемыеАналитики.Вставить("Аналитика" + Сч); 
		КонецЦикла;
		РаскрываемыеАналитики.Вставить("АналитикаВалюта");
		
	КонецЕсли;

	// Получим данные целевого показателя, он всегда должен быть один
	СтрокаЦелевыеПоказатели = тЦелевыеПоказатели.Получить(0); 
	СтруктураОтбораЦелевых = СтрокаТаблицыВСтруктуруДляОтбора(СтрокаЦелевыеПоказатели, тЦелевыеПоказатели.Колонки);
	ЦелевоеЗначение = СтрокаЦелевыеПоказатели.Значение;	
	
	// Выполняем расчет
	КоллекцияКолонокФакторов = тПоказателиФакторов.Колонки;
	Для Каждого СтрокаТаблицы Из тПоказателиФакторов Цикл
		
		ЗначениеИсходное = СтрокаТаблицы.Значение;
		Если ЗначениеИсходное = 0 Тогда
			// Нечисловой или нулевой показатель
			Продолжить;
		КонецЕсли;
		
		// Получим таблицу факторов в разрезе всех аналитик
		СтруктураПараметровОтбора = СтрокаТаблицыВСтруктуруДляОтбора(СтрокаТаблицы, КоллекцияКолонокФакторов);
		Если ПараметрыРасчета.ВидРасчета = "ПоИзмененнымПоЦелевымПоДаннымДляПересчета" Тогда
			СтруктураПараметровОтбора.Вставить("ПоказательОтчета", СтрокаТаблицы.Показатель);
			Если ЗначениеЗаполнено(ПараметрыРасчета.ВалютаИзмененныхПоказателей) Тогда
				СтруктураПараметровОтбора.Вставить("Валюта", ПараметрыРасчета.ВалютаИзмененныхПоказателей);
			КонецЕсли;
			тЗначенияФакторовПоАналитикам = СводнаяТаблицаУХ.ПолучитьЗначениеПоказателей(СтруктураПараметровОтбора, РаскрываемыеАналитики);
			Если тЗначенияФакторовПоАналитикам = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			тЗначенияФакторовПоАналитикам.Колонки.Удалить(тЗначенияФакторовПоАналитикам.Колонки.Найти("Показатель"));
			тЗначенияФакторовПоАналитикам.Колонки.Найти("ПоказательОтчета").Имя = "Показатель";
		Иначе
			тЗначенияФакторовПоАналитикам = ПолучитьЛогИзмененныхПоказателей(СтрокаТаблицыВСтруктуруДляОтбора(СтрокаТаблицы, КоллекцияКолонокФакторов));
		КонецЕсли;		
		
		// Получим общую сумму по всем аналитикам		
		тСуммаПоАналитикам = тЗначенияФакторовПоАналитикам.Скопировать(,"Значение"); 
		тСуммаПоАналитикам.Свернуть(,"Значение");
		Если тСуммаПоАналитикам.Количество() = 1 Тогда 
			СуммаПоАналитикам = тСуммаПоАналитикам.Получить(0).Значение;
		Иначе
			СуммаПоАналитикам = 0;
		КонецЕсли;
		
		// Проверим, что рассчитанные данные имеются
		Если СуммаПоАналитикам = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Обнаружено пустое значение в таблице факторов. Рассчитайте значения целевых показателей."); 
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("РасчетИЗаписьПоказателей.МодульОбъекта.ВыполнитьРасчетВлиянияФакторов", , , ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		// Увеличим значения на шаг расчета
		ШагРасчета = ЗначениеИсходное * 0.1;		
		Для Каждого СтрокаТаблицыПоАналитикам Из тЗначенияФакторовПоАналитикам Цикл
			СтрокаТаблицыПоАналитикам.Значение = СтрокаТаблицыПоАналитикам.Значение * ШагРасчета / СуммаПоАналитикам;
		КонецЦикла;
			
		// Выполним пересчет зависимых показателей
		Если ПараметрыРасчета.ВидРасчета = "ПоИзмененнымПоЦелевымПоДаннымДляПересчета" Тогда			
			
			// Инициируем менеджер временных таблиц
			МенеджерВременныхТаблиц = ЗагрузитьЛогИзмененныхПоказателейВМенеджерВТ();			
			
			///////////////////////////////////////////////////////
			// Поместим новые значения в лог измененных показателей
			ВидОтчета = ПолучитьЗначениеРеквизитаОбъекта(СтрокаТаблицы.Показатель, "Владелец");

			ИнициализироватьОбъектРасчета();
			ОбъектРасчета.ВидОтчета = ВидОтчета; 
			ОбъектРасчета.тИзмененныеПоказатели = тЗначенияФакторовПоАналитикам;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ПериодОтчета) Тогда
				Если ТипЗнч(СтрокаТаблицы.ПериодОтчета) = Тип("СправочникСсылка.Периоды") Тогда
					ОбъектРасчета.ПериодОтчета = СтрокаТаблицы.ПериодОтчета;
					ОбъектРасчета.ПериодОкончания = СтрокаТаблицы.ПериодОтчета;
				ИначеЕсли ТипЗнч(СтрокаТаблицы.ПериодОтчета) = Тип("Массив") Тогда
					ОбъектРасчета.ПериодОтчета = СтрокаТаблицы.ПериодОтчета.Получить(0);
					ОбъектРасчета.ПериодОкончания = СтрокаТаблицы.ПериодОтчета.Получить(СтрокаТаблицы.ПериодОтчета.Количество()-1);
				КонецЕсли;
			КонецЕсли;
			Если Не ПодготовитьОбъектРасчета(МенеджерВременныхТаблиц, СтрокаТаблицы, ПараметрыРасчета) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			// Добавим показатели в лог
			Если НЕ ДобавитьИзмененныеПоказателиВЛог() Тогда
				Возврат Ложь;
			КонецЕсли;			
			
			///////////////////////////////////////////////////////
			// Найдем номер первой строки для пересчета
			Для ДанныеДляПересчетаНачальнаяСтрока = 0 По ДанныеДляПересчетаЧислоСтрок Цикл
				Если ДанныеДляПересчета.Получить(ДанныеДляПересчетаНачальнаяСтрока).ВидОтчета = ВидОтчета Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;			
			
			///////////////////////////////////////////////////////
			// Выполним пересчет по данным для пересчета
			Для Сч = ДанныеДляПересчетаНачальнаяСтрока По ДанныеДляПересчетаЧислоСтрок Цикл
				
				ИнициализироватьОбъектРасчета();
				Если Не ПодготовитьОбъектРасчета(МенеджерВременныхТаблиц, ДанныеДляПересчета.Получить(Сч), ПараметрыРасчета) Тогда
					Возврат Ложь;
				КонецЕсли;				

				// Выполним расчет по правилу расчета
				Если Не РассчитатьПоПравилуРасчета() Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецЦикла;	
			
			тРассчитанныеПоказатели = МенеджерВременныхТаблиц.Таблицы.Найти("втЛогИзмененныхПоказателей").ПолучитьДанные().Выгрузить();
			
		Иначе
			АдресТаблицыИзмененныхПоказателей = ПоместитьВоВременноеХранилище(тЗначенияФакторовПоАналитикам);
			Если НЕ ВыполнитьРасчетЗависимыхПоказателей(ПараметрыРасчета) Тогда
				Возврат Ложь;
			КонецЕсли;
			тРассчитанныеПоказатели = ПолучитьИзВременногоХранилища(АдресТаблицыРассчитанныхПоказателей);
		КонецЕсли;
		
		// Обработаем результат		
		тРассчитанныеПоказателиОтборПоЦелевому = тРассчитанныеПоказатели.Скопировать(СтруктураОтбораЦелевых);		
		тРассчитанныеПоказателиОтборПоЦелевому.Свернуть(,"Значение");
		Если тРассчитанныеПоказателиОтборПоЦелевому.Количество() Тогда
			
			СтрокаРассчитанныеПоказатели = тРассчитанныеПоказателиОтборПоЦелевому.Получить(0);			
			ШагЦелевоеЗначение = СтрокаРассчитанныеПоказатели.Значение;			
			КоэффГрадиента = Pow(10,Окр(Log10(ШагРасчета),0,РежимОкругления.Окр15как10)); 
			
			СтрокаТаблицы.Градиент = ШагЦелевоеЗначение*КоэффГрадиента/ШагРасчета;
			СтрокаТаблицы.Влияние = ОбщегоНазначенияУХ.ЗначениеПоМодулю(Окр((ШагЦелевоеЗначение/ЦелевоеЗначение/0.1),2));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;	
	
КонецФункции

Функция СтрокаТаблицыВСтруктуруДляОтбора(СтрокаТаблицы, КоллекцияКолонок)

	СтруктураОтбора = Новый Структура;
	Для Каждого Колонка Из КоллекцияКолонок Цикл
		Если Колонка.Имя = "Значение"
			ИЛИ Колонка.Имя = "ЗначениеНечисловое"
			ИЛИ Колонка.Имя = "Валюта" 
			ИЛИ Колонка.Имя = "Влияние"
			ИЛИ Колонка.Имя = "Градиент"
			ИЛИ Колонка.Имя = "ПравилоОбработки" Тогда
			Продолжить;
		КонецЕсли;
		Значение = СтрокаТаблицы[Колонка.Имя];
		Если ЗначениеЗаполнено(Значение) Тогда
			СтруктураОтбора.Вставить(Колонка.Имя, Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураОтбора;
		
КонецФункции

#КонецОбласти


#Область ПроцедурыВычисления

///////////////////////////////////////////////////////
// ВЫПОЛНЕНИЕ ПРОИЗВОЛЬНЫХ ФУНКЦИЙ


// АПК:567-выкл функции и процедуры выполняются в методе "Выполнить"

// Очищает значения показателей и примечания к ним, раскрытия, а также реквизиты объекта, хранящие
// значения ссылки на импортируемый файл и его версию.
//
Процедура ОчиститьВсе() 
	
	ИнициализироватьТаблицуУстановкиЗначенийПоказателей();
	
	ТекстВыполнить = "УстановитьЗначениеПоказателя(СтрТаблицы.ПоказательОтчета,СтрТаблицы.Значение,СтрТаблицы.ПериодОтчета";
	
	СтруктураПараметровОтбора = Новый Структура;
	СтруктураПараметровОтбора.Вставить("ВидОтчета",ОбъектРасчета.ВидОтчета);
	СтруктураПараметровОтбора.Вставить("Организация",ОбъектРасчета.Организация);
	СтруктураПараметровОтбора.Вставить("Валюта",ОбъектРасчета.ОсновнаяВалюта);
	СтруктураПараметровОтбора.Вставить("Сценарий",ОбъектРасчета.Сценарий);
	СтруктураПараметровОтбора.Вставить("Проект",ОбъектРасчета.Проект);
	СтруктураПараметровОтбора.Вставить("ПериодОтчета",ОбъектРасчета.МассивПериодов);
	
	Для Сч = 1 По ОбъектРасчета.МаксАналитикОтчета Цикл
		ТекстВыполнить = ТекстВыполнить + ",";
		СтруктураПараметровОтбора.Вставить("Аналитика"+Сч,ОбъектРасчета["Аналитика"+Сч]);
	КонецЦикла;
	
	РаскрываемыеАналитики = Новый Структура;
	Для Сч = ОбъектРасчета.МаксАналитикОтчета+1 По ОбъектРасчета.МаксАналитикПоказателя Цикл
		ТекстВыполнить = ТекстВыполнить + ",СтрТаблицы.Аналитика"+Сч;
		РаскрываемыеАналитики.Вставить("Аналитика"+Сч);
	КонецЦикла;
	Если ОбъектРасчета.ЕстьАналитикаВалюта Тогда
		Для Сч = ОбъектРасчета.МаксАналитикПоказателя+1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			ТекстВыполнить = ТекстВыполнить + ",";
		КонецЦикла;
		ТекстВыполнить = ТекстВыполнить + ",СтрТаблицы.АналитикаВалюта";
	    РаскрываемыеАналитики.Вставить("АналитикаВалюта");
	КонецЕсли;
	
	ТекстВыполнить = ТекстВыполнить + ")";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РежимОчистки",Истина);
	
	ЗначенияПоказателей = ПолучитьЗначениеПоказателей(СтруктураПараметровОтбора,РаскрываемыеАналитики,ДополнительныеПараметры);
	Для Каждого СтрТаблицы Из ЗначенияПоказателей Цикл
		// АПК:487-выкл Выполняется в контексте данной обработки
		Выполнить(ТекстВыполнить);
		// АПК:487-вкл
	КонецЦикла;	
	
	ВыполнитьУстановкуЗначенийПоказателей();

КонецПроцедуры

// АПК:567-вкл

// АПК:568-выкл функции и процедуры выполняются в методе "Выполнить"
// АПК:134-выкл
// АПК:142-выкл 

// Устанавливает значение показателя раскрытия
Функция УстановитьЗначениеПоказателя(КодСсылкаПоказателя, Значение, лПериодОтчета = Неопределено,
	лАналитика1 = Неопределено, лАналитика2 = Неопределено, лАналитика3 = Неопределено,
	лАналитика4 = Неопределено, лАналитика5 = Неопределено, лАналитика6 = Неопределено,
	Знач лАналитикаВалюта = Неопределено)
	
	Если Не ЗначениеЗаполнено(лАналитикаВалюта) Тогда
		лАналитикаВалюта = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(лПериодОтчета) Тогда
		лМассивПериодов = Новый Массив;
		лМассивПериодов.Добавить(лПериодОтчета);
	Иначе
		лМассивПериодов = ОбъектРасчета.МассивПериодов;
	КонецЕсли;
	
	Для Каждого Период Из лМассивПериодов Цикл		
	
		нСтрока = ОбъектРасчета.ТаблицаУстановкиЗначенийПоказателей.Добавить();
		Если ТипЗнч(КодСсылкаПоказателя) = Тип("СправочникСсылка.ПоказателиОтчетов") Тогда
			нСтрока.Показатель 		= КодСсылкаПоказателя;
		Иначе
			нСтрока.КодВФормуле 	= КодСсылкаПоказателя;
		КонецЕсли;
		нСтрока.Значение 		= Значение;
		нСтрока.ПериодОтчета	= Период;
		нСтрока.Аналитика1		= лАналитика1;
		нСтрока.Аналитика2		= лАналитика2;
		нСтрока.Аналитика3		= лАналитика3;
		нСтрока.Аналитика4		= лАналитика4;
		нСтрока.Аналитика5		= лАналитика5;
		нСтрока.Аналитика6		= лАналитика6;
		нСтрока.АналитикаВалюта	= лАналитикаВалюта;
		нСтрока.УровеньРасчета	= ТекущаяУниверсальнаяДатаВМиллисекундах();
		
	КонецЦикла;
	
КонецФункции

// Получает срез значений показателей по заданным отборам в разрезе заданных аналитик
Функция ПолучитьЗначениеПоказателей(СтруктураПараметровОтбора,РаскрываемыеАналитики=Неопределено,ДополнительныеПараметры = Неопределено)
	
	Если НЕ ВыполнитьУстановкуЗначенийПоказателей() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПоказателиОтчетов = Неопределено;
	Если СтруктураПараметровОтбора.Свойство("ПоказателиОтчетов",ПоказателиОтчетов)
		И ТипЗнч(ПоказателиОтчетов) = Тип("Массив") Тогда
		
		СоответствиеВидовОтчетов = Новый Соответствие;		
		МассивПоказателей 		= Новый Массив;
		
		Для Каждого ПоказательТекст Из ПоказателиОтчетов Цикл
			
			НомерРазделителя = СтрНайти(ПоказательТекст,":");
			Если НомерРазделителя = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КодВидаОтчета = Лев(ПоказательТекст,НомерРазделителя-1);
			ТекущийВидОтчета = СоответствиеВидовОтчетов.Получить(КодВидаОтчета);
			Если ТекущийВидОтчета = Неопределено Тогда
				ТекущийВидОтчета = Справочники.ВидыОтчетов.НайтиПоКоду(КодВидаОтчета);
				СоответствиеВидовОтчетов.Вставить(КодВидаОтчета,ТекущийВидОтчета);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекущийВидОтчета) Тогда
				Продолжить;
			КонецЕсли;
			
			КодПоказателя = Сред(ПоказательТекст,НомерРазделителя+1);
			ТекущийПоказатель = Справочники.ПоказателиОтчетов.НайтиПоКоду(КодПоказателя,Истина,,ТекущийВидОтчета);
			Если Не ЗначениеЗаполнено(ТекущийПоказатель) Тогда
				Продолжить;
			КонецЕсли;
			
			МассивПоказателей.Добавить(ТекущийПоказатель);
			
		КонецЦикла;
		
		СтруктураПараметровОтбора.Вставить("ПоказательОтчета",МассивПоказателей);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	ДополнительныеПараметры.Вставить("МенеджерВременныхТаблиц",ОбъектРасчета.МенеджерВременныхТаблиц);
	Если ОбъектРасчета.ЧерноваяВерсия Тогда		
		ДополнительныеПараметры.Вставить("ИдентификаторСеанса",ОбъектРасчета.ИдентификаторСеанса);
	КонецЕсли;
	
	ЗначениеПоказателей = СводнаяТаблицаУХ.ПолучитьЗначениеПоказателей(СтруктураПараметровОтбора,РаскрываемыеАналитики,ДополнительныеПараметры);

	Возврат ЗначениеПоказателей;
	
КонецФункции

// Возвращает состав периметра организаций для элиминации.
//
// Возвращаемое значение:
//	Массив элементов типа СправочникСсылка.Организация.
//
Функция СоставПериметраДляЭлиминации() 

	Возврат УправлениеРабочимиПроцессамиУХ.ПолучитьСоставПериметраКонсолидации(
		ОбъектРасчета.Сценарий, 
		ОбъектРасчета.МассивПериодов.Получить(ОбъектРасчета.МассивПериодов.Количество()-1), 
		ОбъектРасчета.Организация, 
		Перечисления.МетодыКонсолидации.Полная, 
		, 
		, 
		Перечисления.ТипыОрганизационныхЕдиниц.Обычная).ВыгрузитьКолонку("ИндивидуальнаяОрганизация");
	
КонецФункции

// Возвращает состав периметра организаций по заданным периоду, сценарию с учетом дополнительных отборов.
//
// Параметры:
//	лСценарий - сценарий, для которого требуется получить периметр, СправочникСсылка.Сценарии;
//	лПериодОтчета - для которого требуется получить периметр, СправочникСсылка.Периоды;
//	лОрганизация - организация консолидирующая организация, СправочникСсылка.Организации;
//	лМетодКонсолидации - метод консолидации, ПеречислениеСсылка.МетодыКонсолидации;
//	лМинПолнаяДоляВладения - максимальная полная доля владения, число;
//	лМаксПолнаяДоляВладения - минимальная полная доля владения, число;
//	лТипыОрганизаций - типы организаций, для которых требуется получить периметр.
//
// Возвращаемое значение:
//	Массив элементов типа СправочникСсылка.Организация.
//
Функция СоставПериметра(лСценарий = Неопределено, лПериодОтчета = Неопределено, лОрганизация = Неопределено, 
	лМетодКонсолидации = Неопределено, лМинПолнаяДоляВладения = 0, лМаксПолнаяДоляВладения = 100, 
	лТипыОрганизаций = Неопределено, ВладелецПериметра = Неопределено)
	
	Возврат УправлениеРабочимиПроцессамиУХ.ПолучитьСоставПериметраКонсолидации(
		?(лСценарий		= Неопределено, ОбъектРасчета.Сценарий, лСценарий),
		?(лПериодОтчета	= Неопределено, ОбъектРасчета.МассивПериодов.Получить(ОбъектРасчета.МассивПериодов.Количество()-1),	лПериодОтчета),
		?(лОрганизация	= Неопределено, ОбъектРасчета.Организация, лОрганизация),
		лМетодКонсолидации,
		лМинПолнаяДоляВладения,
		лМаксПолнаяДоляВладения,
		лТипыОрганизаций,
		ВладелецПериметра).ВыгрузитьКолонку("ИндивидуальнаяОрганизация");
	
КонецФункции

// Функция, возвращающая массив организаций, осуществляющих контроль периода, к которому относится текущий отчет.
//
Функция ВернутьМассивОрганизацийОсуществляющихКонтрольПериметра()	
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПериодОтчета",ОбъектРасчета.МассивПериодов.Получить(ОбъектРасчета.МассивПериодов.Количество()-1));
	СтруктураПараметров.Вставить("Сценарий",ОбъектРасчета.Сценарий);
	СтруктураПараметров.Вставить("Организация",ОбъектРасчета.Организация);
	
	Возврат УправлениеРабочимиПроцессамиУХ.ПолучитьМатеринскиеОрганизации(СтруктураПараметров);
	
КонецФункции

// Функция возвращает период, смещенный относительно заданного на Смещение.
//
// Параметры:
//	лПериодОтчета - исходный период;
//	Смещение - число, смещение относительно исходного периода. Знак определяет направление смещения.
//
// Результат:
//	СправочникСсылка.Периоды - период, смещенный от исходного на Смещение.
//
Функция ОтносительныйПериод(лПериодОтчета, Смещение = 0)
	
	Если НЕ ЗначениеЗаполнено(лПериодОтчета) И ОбъектРасчета.МассивПериодов.Количество() > 0 Тогда
		лПериодОтчета = ОбъектРасчета.МассивПериодов.Получить(0);
	КонецЕсли;
	
	Возврат ОбщегоНазначенияУХ.глОтносительныйПериод(лПериодОтчета, Смещение)
	
КонецФункции

// Функция возвращает период год, смещенный относительно заданного на Смещение. 
//
// Параметры:
//	лПериодОтчета - исходный период;
//	Смещение - число, смещение в год относительно исходного периода. Знак определяет направление смещения.
//
// Результат:
//	СправочникСсылка.Периоды - период год, смещенный от исходного на Смещение.
//
Функция ОтносительныйПериодГод(лПериодОтчета, Смещение = 0) 
	
	Если НЕ ЗначениеЗаполнено(лПериодОтчета) И ОбъектРасчета.МассивПериодов.Количество() > 0 Тогда
		лПериодОтчета = ОбъектРасчета.МассивПериодов.Получить(0);
	КонецЕсли;
	
	Возврат ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(НачалоГода(лПериодОтчета.ДатаНачала), Перечисления.Периодичность.Год, Смещение);
	
КонецФункции

// Проверяет, принадлежит ли дата переданному периоду. Дата может передаваться в виде строки.
Функция ДатаПринадлежитПериоду(Знач СтрокаДата, Период) 
	
	Если ТипЗнч(СтрокаДата) = Тип("Строка") Тогда
		СтрокаДата = СтроковыеФункцииКлиентСервер.СтрокаВДату(СтрокаДата);
	КонецЕсли;
	
	Возврат (Период.ДатаНачала <= СтрокаДата И Период.ДатаОкончания >= СтрокаДата);
	
КонецФункции

// АПК:568-вкл
// АПК:134-вкл
// АПК:142-вкл

#КонецОбласти


#Область МОДУЛЬ

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции
//  
////////////////////////////////////////////////////////////////////////////////

#Область Трассировка

// Функция - ВТ - Возвращает структуру с таблицами запроса, в том числе и временными
//
// Параметры:
//  ЗапросМенеджер	 - Запрос, МенеджерВременныхТаблиц - Запрос или Менеджер временных таблиц
// 
// Возвращаемое значение:
//   - Структура - Структура с таблицами запроса
//
Функция ВТ(Знач ЗапросМенеджер) Экспорт
	
	Если ТипЗнч(ЗапросМенеджер) = Тип("Запрос") Тогда
		ЗапросМенеджер = ЗапросМенеджер.МенеджерВременныхТаблиц;
	КонецЕсли;
	Если ТипЗнч(ЗапросМенеджер) <> Тип("МенеджерВременныхТаблиц") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результаты = Новый Структура;
	
	Для Каждого Таблица Из ЗапросМенеджер.Таблицы Цикл		
		Результаты.Вставить(Таблица.ПолноеИмя,Таблица.ПолучитьДанные().Выгрузить());	
	КонецЦикла;
	
	Возврат Результаты;
	
КонецФункции

#КонецОбласти

// Процедура - Получить обработку расчета для текущего случая
//
// Параметры:
//  ОбработкаРасчета - ОбработкаОбъект - В данную переменную возвращается обработка, в которой будет производиться расчет
//  ОбъектРасчета	 - Структура - Структура с данными для расчета
//
Процедура ПолучитьОбработкуРасчета(ОбработкаРасчета, ОбъектРасчета) Экспорт
	
	Если Константы.ИспользоватьРасширенныйАлгоритмПересчетаПоказателей.Получить()
		И (ОбъектРасчета = Неопределено 			
		Или ОпределитьСпособФормированияОтчета(ОбъектРасчета) = ПредопределенноеЗначение("Перечисление.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки")) 
		Тогда
		ОбработкаРасчета = Обработки.РасчетИЗаписьПоказателей.Создать();
	Иначе
		ОбработкаРасчета = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
	КонецЕсли;
	
КонецПроцедуры	

// Процедура - Использовать расширенный расчет
//
// Параметры:
//  ПризнакРасширенногоРасчета	 - Булево - Истина - если используется расширенный расчет показателей, Ложь - в противном случае.
//
Процедура ИспользоватьРасширенныйРасчет(ПризнакРасширенногоРасчета) Экспорт
	
	ПризнакРасширенногоРасчета = Константы.ИспользоватьРасширенныйАлгоритмПересчетаПоказателей.Получить();
	
КонецПроцедуры

// Функция - Определить способ формирования отчета
//
// Параметры:
//  ОбъектРасчета	 - Структура - Структура с данными для расчета
// 
// Возвращаемое значение:
//   - ПеречислениеСсылка.СпособыФормированияОтчетов - способ формирования отчета с переданными данными для расчета
//
Функция ОпределитьСпособФормированияОтчета(ОбъектРасчета) Экспорт
	
	Если ЗначениеЗаполнено(ОбъектРасчета.СпособФормированияОтчета) Тогда			
		СпособФормированияОтчета = ОбъектРасчета.СпособФормированияОтчета; 		
	Иначе
		ВерсияРегламента = ПолныеПраваУХ.ВернутьВерсиюОрганизационнойСтруктурыПоПериодСценарию(ОбъектРасчета.ПериодОтчета,ОбъектРасчета.Сценарий);
		СпособФормированияОтчета = УправлениеОтчетамиУХ.НайтиПараметрОтчета(
			Перечисления.ЭлементыНастройкиОтчета.СпособФормированияОтчета, ОбъектРасчета.ВидОтчета, 
			ОбъектРасчета.Сценарий, ОбъектРасчета.Организация, ОбъектРасчета.ПериодОтчета, ВерсияРегламента);
		Если НЕ ЗначениеЗаполнено(СпособФормированияОтчета) Тогда
			СпособФормированияОтчета = ПредопределенноеЗначение("Перечисление.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки");
		КонецЕсли;
	КонецЕсли;

	Возврат СпособФормированияОтчета;
	
КонецФункции

// Процедура - Очищает версии и данные параметрики текущего отчета 
//
// Параметры:
//  ОбъектРасчета					 - Структура - Структура с данными для расчета 
//  УдалятьВерсии					 - Булево - Признак того, что необходимо удалить версии
//  УдалятьПараметрикуНовогоДвижка	 - Булево - Признак того, что необходимо очистить данные параметрики расширенного алгоритма пересчета показателей
//  УдалятьПараметрикуСтарогоДвижка	 - Булево - Признак того, что необходимо очистить данные параметрики классического алгоритма пересчета показателей 
//
Процедура ОчиститьСтарыеДанные(ОбъектРасчета,УдалятьВерсии=Истина,УдалятьПараметрикуНовогоДвижка=Истина,УдалятьПараметрикуСтарогоДвижка=Ложь) Экспорт
	
	Если УдалятьПараметрикуСтарогоДвижка Тогда
		УправлениеОтчетамиУХ.ОчиститьЗаписиРегистраПараметрическихНастроек(ОбъектРасчета.ПравилоОбработки);
	ИначеЕсли УдалятьПараметрикуНовогоДвижка Тогда
		НаборЗаписей = РегистрыСведений.ХранилищаПараметрическойНастройкиРасширенный.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПравилоОбработки.Установить(ОбъектРасчета.ПравилоОбработки);
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Если УдалятьВерсии Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВерсииЗначенийПоказателей.Владелец КАК Ссылка
			|ИЗ
			|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
			|ГДЕ
			|	ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета
			|	И ВерсииЗначенийПоказателей.Организация = &Организация
			|	И ВерсииЗначенийПоказателей.Сценарий = &Сценарий
			|	И ВерсииЗначенийПоказателей.Проект = &Проект
			|	И ВерсииЗначенийПоказателей.ПериодОтчета В(&МассивПериодов) %ТекстАналитики%";
		
		Запрос.УстановитьПараметр("ВидОтчета",ОбъектРасчета.ВидОтчета);   
		Запрос.УстановитьПараметр("Организация",ОбъектРасчета.Организация);
		Запрос.УстановитьПараметр("Сценарий",ОбъектРасчета.Сценарий);
		Запрос.УстановитьПараметр("Проект",ОбъектРасчета.Проект);
		
		Если ОбъектРасчета.МассивПериодов = Неопределено Тогда
			ОбъектРасчета.Вставить("МассивПериодов",УправлениеОтчетамиУХ.ПолучитьМассивПериодов(
				Новый Структура("ПериодОтчета,ПериодОкончания",ОбъектРасчета.ПериодОтчета,ОбъектРасчета.ПериодОкончания)));
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивПериодов",ОбъектРасчета.МассивПериодов);
		
		Если ОбъектРасчета.МаксАналитикОтчета = Неопределено Тогда
			ДанныеВидаОтчета = ДанныеВидаОтчета(ОбъектРасчета.ВидОтчета);
			ОбъектРасчета.МаксАналитикОтчета = ДанныеВидаОтчета.МаксКлючевыхАналитик;
		КонецЕсли;
		
		ТекстАналитики = "";
		Для Сч = 1 По ОбъектРасчета.МаксАналитикОтчета Цикл
		    ТекстАналитики = ТекстАналитики + "
			|	И ВерсииЗначенийПоказателей.Аналитика" + Сч + " = &Аналитика" + Сч;
			Запрос.УстановитьПараметр("Аналитика" + Сч, ОбъектРасчета["Аналитика" + Сч]);
		КонецЦикла;
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%ТекстАналитики%",ТекстАналитики);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			НачатьТранзакцию();
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.ОписаниеВерсий");
				ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
			
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл		
					СпрОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					СпрОбъект.Удалить();
				КонецЦикла;
			
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),,,СтатусСообщения.Внимание);
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

// Процедура - Очищает регистр сведений "ХранилищаПараметрическойНастройкиРасширенный" для связанных правил расчета
//
// Параметры:
//  ДанныеСсылка - СправочникСсылка - Ссылка на изменяемый объект
//
Процедура ОчиститьСтруктуруРасчетаПоказателейПоПравилуРасчета(ДанныеСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Если ТипЗнч(ДанныеСсылка) = Тип("СправочникСсылка.ПравилаОбработки") Тогда
		
		НаборЗаписей = РегистрыСведений.ХранилищаПараметрическойНастройкиРасширенный.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПравилоОбработки.Установить(ДанныеСсылка);
		НаборЗаписей.Записать();
		Возврат;
		
	ИначеЕсли ТипЗнч(ДанныеСсылка) = Тип("СправочникСсылка.ВидыОтчетов") Тогда		
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПравилаОбработки.Ссылка КАК ПравилоОбработки
		|ИЗ
		|	Справочник.ПравилаОбработки КАК ПравилаОбработки
		|ГДЕ
		|	ПравилаОбработки.Владелец = &Ссылка";
	
	ИначеЕсли ТипЗнч(ДанныеСсылка) = Тип("СправочникСсылка.ПоказателиОтчетов") Тогда
	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПравилаОбработки.Ссылка КАК ПравилоОбработки
		|ИЗ
		|	Справочник.ПравилаОбработки КАК ПравилаОбработки
		|ГДЕ
		|	ПравилаОбработки.Владелец В
		|			(ВЫБРАТЬ
		|				СправочникДанные.Владелец КАК Владелец
		|			ИЗ
		|				Справочник.ПоказателиОтчетов КАК СправочникДанные
		|			ГДЕ
		|				СправочникДанные.Ссылка = &Ссылка)";
		
	ИначеЕсли ТипЗнч(ДанныеСсылка) = Тип("СправочникСсылка.ГруппыРаскрытия") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПравилаОбработки.Ссылка КАК ПравилоОбработки
		|ИЗ
		|	Справочник.ПравилаОбработки КАК ПравилаОбработки
		|ГДЕ
		|	ПравилаОбработки.Владелец В
		|			(ВЫБРАТЬ
		|				СправочникДанные.Владелец КАК Владелец
		|			ИЗ
		|				Справочник.ГруппыРаскрытия КАК СправочникДанные
		|			ГДЕ
		|				СправочникДанные.Ссылка = &Ссылка)";
		
	ИначеЕсли ТипЗнч(ДанныеСсылка) = Тип("СправочникСсылка.КолонкиОтчетов") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПравилаОбработки.Ссылка КАК ПравилоОбработки
		|ИЗ
		|	Справочник.ПравилаОбработки КАК ПравилаОбработки
		|ГДЕ
		|	ПравилаОбработки.Владелец В
		|			(ВЫБРАТЬ
		|				СправочникДанные.Владелец КАК Владелец
		|			ИЗ
		|				Справочник.КолонкиОтчетов КАК СправочникДанные
		|			ГДЕ
		|				СправочникДанные.Ссылка = &Ссылка)";
		
	ИначеЕсли ТипЗнч(ДанныеСсылка) = Тип("СправочникСсылка.СтрокиОтчетов") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПравилаОбработки.Ссылка КАК ПравилоОбработки
		|ИЗ
		|	Справочник.ПравилаОбработки КАК ПравилаОбработки
		|ГДЕ
		|	ПравилаОбработки.Владелец В
		|			(ВЫБРАТЬ
		|				СправочникДанные.Владелец КАК Владелец
		|			ИЗ
		|				Справочник.СтрокиОтчетов КАК СправочникДанные
		|			ГДЕ
		|				СправочникДанные.Ссылка = &Ссылка)";
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ХранилищаПараметрическойНастройкиРасширенный.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПравилоОбработки.Установить(ВыборкаДетальныеЗаписи.ПравилоОбработки);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Возвращает данные вида отчета
//
// Параметры:
//  ВидОтчета	 - СправочникСсылка.ВидыОтчетов - Ссылка на вид отчета
// 
// Возвращаемое значение:
//   - Структура - Структура с данными вида отчета
//
Функция ДанныеВидаОтчета(ВидОтчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыОтчетов.Ссылка КАК ВидОтчета,
		|	ВидыОтчетов.РазделениеПоПроектам КАК РазделениеПоПроектам,
		|	ВидыОтчетов.СохранятьИсториюИзменений КАК СохранятьИсториюИзменений,
		|	ВЫБОР
		|		КОГДА ВидыОтчетов.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ВидыОтчетов.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ВидыОтчетов.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ВидыОтчетов.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ВидыОтчетов.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ВидыОтчетов.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК МаксКлючевыхАналитик
		|ИЗ
		|	Справочник.ВидыОтчетов КАК ВидыОтчетов
		|ГДЕ
		|	ВидыОтчетов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ВидОтчета);
	Возврат Запрос.Выполнить().Выгрузить().Получить(0);

КонецФункции

#Область ОписанияПроцедурРасчета

// Функция - Получить описание лога измененных показателей
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - пустая таблица для лога измененных показателей
//
Функция ПолучитьОписаниеЛогаИзмененныхПоказателей() Экспорт
	
	Возврат Обработки.РасчетИЗаписьПоказателей.Создать().ЛогИзмененныхПоказателей.ВыгрузитьКолонки();
	
КонецФункции

// Функция - Получить описание лога комментариев показателей
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - пустая таблица для лога комментариев показателей
//
Функция ПолучитьОписаниеЛогаКомментариевПоказателей() Экспорт
	
	КолонкиТаблицы = "ПравилоОбработки,Показатель,Сценарий,Организация,Проект,ПериодОтчета,Валюта,НомерТранзакции,АналитикаВалюта";
	Для Сч = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		КолонкиТаблицы = КолонкиТаблицы + ",Аналитика" + Сч;
	КонецЦикла;
	
	Таблица = Обработки.РасчетИЗаписьПоказателей.Создать().ЛогИзмененныхПоказателей.ВыгрузитьКолонки(КолонкиТаблицы);
	Таблица.Колонки.Добавить("Комментарий", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(1024));
	
	Возврат Таблица;
	
КонецФункции

// Функция - Получить описание таблицы измененных показателей
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - пустая таблица для таблицы измененных показателей
//
Функция ПолучитьОписаниеТаблицыИзмененныхПоказателей() Экспорт
	
	КолонкиТаблицы = "ПравилоОбработки,Показатель,Сценарий,Организация,Проект,ПериодОтчета,Значение,ЗначениеНечисловое,ЗначениеВалюта,АналитикаВалюта";
	Для Сч = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		КолонкиТаблицы = КолонкиТаблицы + ",Аналитика" + Сч;
	КонецЦикла;
	
	Возврат Обработки.РасчетИЗаписьПоказателей.Создать().ЛогИзмененныхПоказателей.ВыгрузитьКолонки(КолонкиТаблицы);
	
КонецФункции

#КонецОбласти

#Область ПроцедурыДляРасчета
 
// Функция - Получает из регистра сведений "ХранилищаПараметрическойНастройкиРасширенный" 
//	структуру для расчета показателей по правилу расчета.
//	Если в регистре сведений нет данных для переданного правила расчета, происходит расчет параметрики расчета
//
// Параметры:
//  ПравилоОбработки	 	- СправочникСсылка.ПравилаОбработки - Привило обработки для расчета
// 
// Возвращаемое значение:
//   - Структура - Структура для расчета показателей по правилу расчета
//
Функция ПолучитьТаблицуРасчетаПоказателейПоПравилуРасчета(ПравилоОбработки) Экспорт
	
	тПересчетаПоказателей = ПолучитьДанныеИзХранилищаПараметрическойНастройки(ПравилоОбработки, 1);
	Если тПересчетаПоказателей = Неопределено Тогда	
		
		// Сформируем данные для расчета запросов
		СтруктураРасчетаПоказателей = ПодготовитьТаблицыДляРасчетаПоказателейПоПравилуРасчета(ПравилоОбработки);
		
		Если СтруктураРасчетаПоказателей.тПоказателиОперанды.Количество() > 0 Тогда
		
			// Создадим таблицу показателей
			СоздатьТаблицуПоказателейОперандов(СтруктураРасчетаПоказателей);
			
			// Генерация таблицы запросов для получения независимых операндов (0 уровень расчета)
			ПодготовитьЗапросУровня0(СтруктураРасчетаПоказателей);
			
			// Генерация таблиц запросов для расчета операндов всех зависимых уровней расчета
			ПодготовитьЗапросыРекурсивныхУровней(СтруктураРасчетаПоказателей);

			// Получаем объединенную таблицу потребителей 
			ПодготовитьТаблицуНовыхЗначенийПотребителей(СтруктураРасчетаПоказателей);
			
			// Получаем исходные данные потребителей
			ПодготовитьТаблицуИсходныхЗначенийПотребителей(СтруктураРасчетаПоказателей);	
			
			// Получаем таблицы с дельтами, относительно исходных данных
			ПодготовитьТаблицуДляРасчетаОтклонений(СтруктураРасчетаПоказателей);
			
			// Запишем данные в лог измененных показателей
			ДобавитьВЛогТаблицуИзмененныхПоказателей(СтруктураРасчетаПоказателей);
			ДобавитьВЛогТаблицуИзмененныхПоказателей(СтруктураРасчетаПоказателей, Истина);
			
		КонецЕсли;
		
		тПересчетаПоказателей = СтруктураРасчетаПоказателей.глТаблицаПересчетаПоказателей;
		
		СохранитьДанныеВХранилищеПараметрическойНастройки(ПравилоОбработки, 1, тПересчетаПоказателей);
		
	КонецЕсли;
	
	Возврат тПересчетаПоказателей;
	
КонецФункции

// Функция - Рассчитывает параметрические данные для расчета целевых показателей переданных 
//		в таблице значений "ОбъектРасчета.тЦелевыеПоказатели" 
//
// Параметры:
//  ОбъектРасчета	 			- Структура - Структура с данным для расчета параметрики
// 
// Возвращаемое значение:
//   - Структура - Структура для расчета показателей по правилу расчета
//
Функция ПолучитьТаблицуРасчетаПоказателейПоДаннымДляПересчета(ПравилоОбработки) Экспорт
	// ДОДЕЛАТЬ: Нужна ли?
	тПересчетаПоказателей = ПолучитьДанныеИзХранилищаПараметрическойНастройки(ПравилоОбработки, 2);
	Если тПересчетаПоказателей = Неопределено Тогда		
		
		// Сформируем данные для расчета запросов
		СтруктураРасчетаПоказателей = ПодготовитьТаблицыДляРасчетаПоказателейПоПравилуРасчета(ПравилоОбработки);
		
		Если СтруктураРасчетаПоказателей.тПоказателиОперанды.Количество() > 0 Тогда
			
			// Не пересчитываем в валютные значения
			СтруктураРасчетаПоказателей.ЕстьАналитикаВалюта = Ложь;
		
			// Создадим таблицу показателей
			СоздатьТаблицуПоказателейОперандов(СтруктураРасчетаПоказателей);
			
			// Генерация таблицы запросов для получения независимых операндов (0 уровень расчета)
			ПодготовитьЗапросУровня0(СтруктураРасчетаПоказателей);
			
			// Генерация таблиц запросов для расчета операндов всех зависимых уровней расчета
			ПодготовитьЗапросыРекурсивныхУровней(СтруктураРасчетаПоказателей);

			// Получаем объединенную таблицу потребителей 
			ПодготовитьТаблицуНовыхЗначенийПотребителей(СтруктураРасчетаПоказателей);
			
			// Свернем таблицу новых значений потребителей
			СвернутьТаблицуНовыхЗначенийПотребителей(СтруктураРасчетаПоказателей); 
			
			// Сгруппируем таблицу новых значений потребителей
			ДобавитьВЛогТаблицуИзмененныхПоказателей(СтруктураРасчетаПоказателей);
			
		КонецЕсли;
		
		тПересчетаПоказателей = СтруктураРасчетаПоказателей.глТаблицаПересчетаПоказателей;
		
		СохранитьДанныеВХранилищеПараметрическойНастройки(ПравилоОбработки, 2, тПересчетаПоказателей);
		
	КонецЕсли; 
	
	Возврат тПересчетаПоказателей;
	
КонецФункции

// Функция - Получить структуру для установки новых значений показателей
//
// Параметры:
//  ОбъектРасчета						 - Структура - Структура с данными для расчета 
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - Таблица со строками этапов расчета показателей по правилу расчета
//
Функция ПолучитьТаблицуУстановкиИзмененныхЗначенийПоказателей(ОбъектРасчета) Экспорт 
	
	// Инициализируем служебные таблицы
	ОписаниеСлужебныхТаблиц = ПолучитьОписаниеСлужебныхТаблиц();
	глТаблицаПересчетаПоказателей = ОписаниеСлужебныхТаблиц.глТаблицаПересчетаПоказателей;
	тРасшифровкаГруппОтборов = ОписаниеСлужебныхТаблиц.тРасшифровкаГруппОтборов;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВсеПоказатели",ОбъектРасчета.тИзмененныеПоказатели.ВыгрузитьКолонку("Показатель"));
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(ЕСТЬNULL(ГруппыРаскрытия.ЧислоАналитик, 0)) КАК МаксАналитикПоказателя,
		|	МАКСИМУМ(ЕСТЬNULL(ГруппыРаскрытия.Валютная, ЛОЖЬ)) КАК ЕстьАналитикаВалюта,
		|	МАКСИМУМ(ПоказателиОтчетов.ПересчитыватьВалютнуюСумму) КАК ЕстьЗначениеВалюта,
		|	МАКСИМУМ(ПоказателиОтчетов.ТипЗначения = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийПоказателейОтчетов.Число)) КАК ЕстьЗначение,
		|	МАКСИМУМ(ПоказателиОтчетов.ТипЗначения <> ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийПоказателейОтчетов.Число)) КАК ЕстьЗначениеНечисловое,
		|	МАКСИМУМ(НЕ ПоказателиОтчетов.НеФинансовый
		|			И ПоказателиОтчетов.ВидКурса = ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.ЗначениеУказанноеВДокументе)) КАК ЕстьВидКурсаЗначениеУказанноеВДокументе,
		|	МАКСИМУМ(НЕ ПоказателиОтчетов.НеФинансовый
		|			И ПоказателиОтчетов.ВидКурса = ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.КурсНаМоментНачисления)) КАК ЕстьВидКурсаКурсНаМоментНачисления,
		|	МАКСИМУМ(НЕ ПоказателиОтчетов.НеФинансовый
		|			И ПоказателиОтчетов.ВидКурса <> ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.КурсНаМоментНачисления)
		|			И ПоказателиОтчетов.ВидКурса <> ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.ЗначениеУказанноеВДокументе)) КАК ЕстьВидКурсаПрочее
		|ИЗ
		|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
		|		ПО ПоказателиОтчетов.ГруппаРаскрытия = ГруппыРаскрытия.Ссылка
		|ГДЕ
		|	ПоказателиОтчетов.Ссылка В(&ВсеПоказатели)";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		
		СтруктураРасчетаПоказателей = ПолучитьСтруктуруРасчетаПоказателей();
		СтруктураРасчетаПоказателей.Вставить("глТаблицаПересчетаПоказателей", глТаблицаПересчетаПоказателей);
		СтруктураРасчетаПоказателей.Вставить("ДанныеВидаОтчета", ОбъектРасчета.ДанныеВидаОтчета);
		СтруктураРасчетаПоказателей.Вставить("тРасшифровкаГруппОтборов", тРасшифровкаГруппОтборов);
		СтруктураРасчетаПоказателей.Вставить("МаксКлючевыхАналитик",ОбъектРасчета.МаксАналитикОтчета);
		СтруктураРасчетаПоказателей.Вставить("МаксИспользуемыхАналитик",ВыборкаЗапроса.МаксАналитикПоказателя + ОбъектРасчета.МаксАналитикОтчета);
		СтруктураРасчетаПоказателей.Вставить("ЕстьАналитикаВалюта",ВыборкаЗапроса.ЕстьАналитикаВалюта);
		СтруктураРасчетаПоказателей.Вставить("ЕстьЗначение",ВыборкаЗапроса.ЕстьЗначение);
		СтруктураРасчетаПоказателей.Вставить("ЕстьЗначениеНечисловое",ВыборкаЗапроса.ЕстьЗначениеНечисловое);
		СтруктураРасчетаПоказателей.Вставить("ЕстьЗначениеВалюта",ВыборкаЗапроса.ЕстьАналитикаВалюта И ВыборкаЗапроса.ЕстьЗначениеВалюта);
		СтруктураРасчетаПоказателей.Вставить("ЕстьВидКурсаЗначениеУказанноеВДокументе",ВыборкаЗапроса.ЕстьВидКурсаЗначениеУказанноеВДокументе);
		СтруктураРасчетаПоказателей.Вставить("ЕстьВидКурсаКурсНаМоментНачисления",ВыборкаЗапроса.ЕстьВидКурсаКурсНаМоментНачисления);
		СтруктураРасчетаПоказателей.Вставить("ЕстьВидКурсаПрочее",ВыборкаЗапроса.ЕстьВидКурсаПрочее);
		
		// Добавим таблицу измененных показателей
		СоздатьТаблицуИзмененныхПоказателей(СтруктураРасчетаПоказателей, ОбъектРасчета.тИзмененныеПоказатели);
		
		// Запишем данные в лог измененных показателей
		ДобавитьВЛогТаблицуИзмененныхПоказателей(СтруктураРасчетаПоказателей, ОбъектРасчета.ДополнительныеВалюты.Количество() > 0);		
		
		// Получим таблицу только новых значений ЗначениеВалюта
		Если СтруктураРасчетаПоказателей.ЕстьЗначениеВалюта Тогда
			ПодготовитьИзмененияВалютныхПоказателей(СтруктураРасчетаПоказателей);
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат глТаблицаПересчетаПоказателей;
	
КонецФункции	

// Функция - Рассчитывает параметрические данные для расчета показателей для переданных 
//		в таблице значений "ОбъектРасчета.тИзмененныеПоказатели" измененных показателей
//
// Параметры:
//  ОбъектРасчета	 			- Структура - Структура с данным для расчета параметрики
// 
// Возвращаемое значение:
//   - Структура - Структура для расчета показателей по правилу расчета
//
Функция ПолучитьТаблицуРасчетаПоказателейПоИзмененнымПоказателям(ОбъектРасчета) Экспорт
	
	// Сформируем данные для расчета запросов
	СтруктураРасчетаПоказателей = ПодготовитьТаблицыДляРасчетаПоказателейПоПравилуРасчета(ОбъектРасчета.ПравилоОбработки, ОбъектРасчета.тИзмененныеПоказатели);
	
	Если СтруктураРасчетаПоказателей.тПоказателиОперанды.Количество() > 0 Тогда
		
		Если ОбъектРасчета.ВидРасчета = "ПоИзмененнымПоЦелевым" Тогда
			// Данные получаем только из лога рассчитанных показателей
			СтруктураРасчетаПоказателей.ПолучатьДанныеИзРегистров = Ложь;
			// Не делаем пересчеты в валюты
			СтруктураРасчетаПоказателей.ЕстьАналитикаВалюта = Ложь;
		КонецЕсли;
	
		// Создадим таблицу показателей
		СоздатьТаблицуПоказателейОперандов(СтруктураРасчетаПоказателей);
		
		// Генерация таблицы запросов для получения независимых операндов (0 уровень расчета)
		ПодготовитьЗапросУровня0(СтруктураРасчетаПоказателей);
		
		// Генерация таблиц запросов для расчета операндов всех зависимых уровней расчета
		ПодготовитьЗапросыРекурсивныхУровней(СтруктураРасчетаПоказателей);

		// Получим объединенную таблицу потребителей 
		ПодготовитьТаблицуНовыхЗначенийПотребителей(СтруктураРасчетаПоказателей);
		
		// Получим исходные данные потребителей
		ПодготовитьТаблицуИсходныхЗначенийПотребителей(СтруктураРасчетаПоказателей, , Истина);	
		
		// Получаем таблицы с дельтами, относительно исходных данных
		ПодготовитьТаблицуДляРасчетаОтклонений(СтруктураРасчетаПоказателей);
		
		// Запишем данные в лог измененных показателей
		ДобавитьВЛогТаблицуИзмененныхПоказателей(СтруктураРасчетаПоказателей, ОбъектРасчета.ДополнительныеВалюты.Количество() > 0);
		
	КонецЕсли;
		
	// Получаем итоговую таблицу пересчета показателей
	Возврат СтруктураРасчетаПоказателей.глТаблицаПересчетаПоказателей;
	
КонецФункции

// Функция - Рассчитывает параметрические данные для расчета целевых показателей переданных 
//		в таблице значений "ОбъектРасчета.тЦелевыеПоказатели" 
//
// Параметры:
//  ОбъектРасчета	 			- Структура - Структура с данным для расчета параметрики
// 
// Возвращаемое значение:
//   - Структура - Структура для расчета показателей по правилу расчета
//
Функция ПолучитьТаблицуРасчетаПоказателейПоЦелевымПоказателям(ПравилоОбработки, тЦелевыеПоказатели) Экспорт
	
	// Сформируем данные для расчета запросов
	СтруктураРасчетаПоказателей = ПодготовитьТаблицыДляРасчетаПоказателейПоПравилуРасчета(ПравилоОбработки, , тЦелевыеПоказатели);
	
	Если СтруктураРасчетаПоказателей.тПоказателиОперанды.Количество() > 0 Тогда
		
		// Не пересчитываем в валютные значения
		СтруктураРасчетаПоказателей.ЕстьАналитикаВалюта = Ложь;
	
		// Создадим таблицу показателей
		СоздатьТаблицуПоказателейОперандов(СтруктураРасчетаПоказателей);
		
		// Генерация таблицы запросов для получения независимых операндов (0 уровень расчета)
		ПодготовитьЗапросУровня0(СтруктураРасчетаПоказателей);
		
		// Генерация таблиц запросов для расчета операндов всех зависимых уровней расчета
		ПодготовитьЗапросыРекурсивныхУровней(СтруктураРасчетаПоказателей);

		// Получим объединенную таблицу потребителей 
		ПодготовитьТаблицуНовыхЗначенийПотребителей(СтруктураРасчетаПоказателей);
		
		// Свернем таблицу новых значений потребителей
		СвернутьТаблицуНовыхЗначенийПотребителей(СтруктураРасчетаПоказателей); 
		
		// Сгруппируем таблицу новых значений потребителей
		ДобавитьВЛогТаблицуИзмененныхПоказателей(СтруктураРасчетаПоказателей);
		
		// Запомним показатели нулевого уровня
		ДобавитьВЛогТаблицуИзмененныхПоказателейУровень0(СтруктураРасчетаПоказателей);
		
	КонецЕсли;
		
	// Получаем итоговую таблицу пересчета показателей
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("глТаблицаПересчетаПоказателей", СтруктураРасчетаПоказателей.глТаблицаПересчетаПоказателей);
	СтруктураВозврата.Вставить("тПоказателиОперанды", СтруктураРасчетаПоказателей.тПоказателиОперанды);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Функция - Получить структуру для установки новых значений показателей
//
// Параметры:
//  ОбъектРасчета						 - Структура - Структура с данными для расчета 
//  ТаблицаУстановкиЗначенийПоказателей	 - ТаблицаЗначений - Таблица с новыми значениями показателей 
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - Таблица со строками этапов расчета показателей по правилу расчета
//
Функция ПолучитьТаблицуРасчетаПоказателейДляУстановкиНовыхЗначенийПоказателей(ОбъектРасчета, ТаблицаУстановкиЗначенийПоказателей) Экспорт 
	
	ВидОтчета 						= ОбъектРасчета.ВидОтчета;
	МаксАналитикОтчета				= ОбъектРасчета.МаксАналитикОтчета;
	МаксАналитикПоказателя			= ОбъектРасчета.МаксАналитикПоказателя;
	МенеджерВременныхТаблиц 		= ОбъектРасчета.МенеджерВременныхТаблиц;
	ПравилоОбработки				= ОбъектРасчета.ПравилоОбработки;
	
	ТекстПоля = "
		|	ЗначенияПоказателей.ПериодОтчета,
		|	ЗначенияПоказателей.Аналитика1,
		|	ЗначенияПоказателей.Аналитика2,
		|	ЗначенияПоказателей.Аналитика3,
		|	ЗначенияПоказателей.Аналитика4,
		|	ЗначенияПоказателей.Аналитика5,
		|	ЗначенияПоказателей.Аналитика6,
		|	ЗначенияПоказателей.АналитикаВалюта,";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ЗначенияПоказателейДляУстановки",ТаблицаУстановкиЗначенийПоказателей);
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);	
	Запрос.УстановитьПараметр("МаксКлючевыхАналитик",МаксАналитикОтчета);	
	Запрос.Текст =
		"ВЫБРАТЬ %ТекстПоля%
		|	ЗначенияПоказателей.Показатель КАК Показатель,
		|	ЗначенияПоказателей.КодВФормуле КАК КодПоказателя,
		|	ЗначенияПоказателей.Значение КАК Значение,
		|	ЗначенияПоказателей.ПериодОтчета КАК ПериодОтчета,
		|	ЗначенияПоказателей.УровеньРасчета КАК Счетчик
		|ПОМЕСТИТЬ втЗначенияПоказателейДляУстановки
		|ИЗ
		|	&ЗначенияПоказателейДляУстановки КАК ЗначенияПоказателей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ %ТекстПоля%
		|	ЕСТЬNULL(ПоказателиОтчетов.Ссылка, ЗначенияПоказателей.Показатель) КАК Показатель,
		|	ЗначенияПоказателей.Значение КАК Значение,
		|	ЗначенияПоказателей.Счетчик КАК Счетчик
		|ПОМЕСТИТЬ втЗначенияПоказателейДляУстановкиСПоказателями
		|ИЗ
		|	втЗначенияПоказателейДляУстановки КАК ЗначенияПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|		ПО ЗначенияПоказателей.КодПоказателя = ПоказателиОтчетов.Код
		|			И (ПоказателиОтчетов.Владелец = &ВидОтчета)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ %ТекстПоля%
		|	ЗначенияПоказателей.Показатель КАК Показатель,
		|	МАКСИМУМ(ЗначенияПоказателей.Счетчик) КАК Счетчик
		|ПОМЕСТИТЬ втКрайниеЗначенияПоказателейПоказателейДляУстановки
		|ИЗ
		|	втЗначенияПоказателейДляУстановкиСПоказателями КАК ЗначенияПоказателей
		|
		|СГРУППИРОВАТЬ ПО %ТекстПоля%
		|	ЗначенияПоказателей.Показатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ %ТекстПоля%
		|	ЗначенияПоказателей.Показатель КАК Показатель,
		|	ЗначенияПоказателей.Значение КАК Значение
		|ПОМЕСТИТЬ втИтоговыеЗначенияПоказателейДляУстановки
		|ИЗ
		|	втЗначенияПоказателейДляУстановкиСПоказателями КАК ЗначенияПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКрайниеЗначенияПоказателейПоказателейДляУстановки КАК КрайниеЗначенияПоказателейПоказателейДляУстановки
		|		ПО ЗначенияПоказателей.Показатель = КрайниеЗначенияПоказателейПоказателейДляУстановки.Показатель
		|			И ЗначенияПоказателей.ПериодОтчета = КрайниеЗначенияПоказателейПоказателейДляУстановки.ПериодОтчета
		|			И ЗначенияПоказателей.Аналитика1 = КрайниеЗначенияПоказателейПоказателейДляУстановки.Аналитика1
		|			И ЗначенияПоказателей.Аналитика2 = КрайниеЗначенияПоказателейПоказателейДляУстановки.Аналитика2
		|			И ЗначенияПоказателей.Аналитика3 = КрайниеЗначенияПоказателейПоказателейДляУстановки.Аналитика3
		|			И ЗначенияПоказателей.Аналитика4 = КрайниеЗначенияПоказателейПоказателейДляУстановки.Аналитика4
		|			И ЗначенияПоказателей.Аналитика5 = КрайниеЗначенияПоказателейПоказателейДляУстановки.Аналитика5
		|			И ЗначенияПоказателей.Аналитика6 = КрайниеЗначенияПоказателейПоказателейДляУстановки.Аналитика6
		|			И ЗначенияПоказателей.АналитикаВалюта = КрайниеЗначенияПоказателейПоказателейДляУстановки.АналитикаВалюта
		|			И ЗначенияПоказателей.Счетчик = КрайниеЗначенияПоказателейПоказателейДляУстановки.Счетчик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ %ТекстПоля%
		|	ПоказателиОтчетов.Ссылка КАК Показатель,
		|	ЕСТЬNULL(ГруппыРаскрытия.ЧислоАналитик, 0) + &МаксКлючевыхАналитик КАК МаксИспользуемыхАналитик,
		|	ЕСТЬNULL(ГруппыРаскрытия.Валютная, ЛОЖЬ) КАК ЕстьАналитикаВалюта,
		|	ВЫБОР
		|		КОГДА ПоказателиОтчетов.ТипЗначения = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийПоказателейОтчетов.Число)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Числовой,
		|	ВЫБОР
		|		КОГДА ПоказателиОтчетов.ТипЗначения = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийПоказателейОтчетов.Число)
		|			ТОГДА ВЫРАЗИТЬ(ЗначенияПоказателей.Значение КАК ЧИСЛО(18, 5))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Значение,
		|	ВЫБОР
		|		КОГДА ПоказателиОтчетов.ТипЗначения <> ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийПоказателейОтчетов.Число)
		|			ТОГДА ЗначенияПоказателей.Значение
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ЗначениеНечисловое,
		|	ПоказателиОтчетов.НеФинансовый КАК НеФинансовый,
		|	ПоказателиОтчетов.ВидКурса КАК ВидКурса
		|ПОМЕСТИТЬ втЗначенияПотребителейРасчет
		|ИЗ
		|	втИтоговыеЗначенияПоказателейДляУстановки КАК ЗначенияПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|		ПО ЗначенияПоказателей.Показатель = ПоказателиОтчетов.Ссылка
		|		И (ПоказателиОтчетов.Владелец = &ВидОтчета)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
		|		ПО (ПоказателиОтчетов.ГруппаРаскрытия = ГруппыРаскрытия.Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ПоказателиОтчетов.МаксИспользуемыхАналитик) КАК МаксИспользуемыхАналитик,
		|	МАКСИМУМ(ПоказателиОтчетов.ЕстьАналитикаВалюта) КАК ЕстьАналитикаВалюта,
		|	МАКСИМУМ(ПоказателиОтчетов.Числовой) КАК ЕстьЧисловойПоказатель,
		|	НЕ МИНИМУМ(ПоказателиОтчетов.Числовой) КАК ЕстьНечисловойПоказатель,
		|	МАКСИМУМ(НЕ ПоказателиОтчетов.НеФинансовый
		|			И ПоказателиОтчетов.ВидКурса = ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.ЗначениеУказанноеВДокументе)) КАК ЕстьВидКурсаЗначениеУказанноеВДокументе,
		|	МАКСИМУМ(НЕ ПоказателиОтчетов.НеФинансовый
		|			И ПоказателиОтчетов.ВидКурса = ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.КурсНаМоментНачисления)) КАК ЕстьВидКурсаКурсНаМоментНачисления,
		|	МАКСИМУМ(НЕ ПоказателиОтчетов.НеФинансовый
		|			И ПоказателиОтчетов.ВидКурса <> ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.КурсНаМоментНачисления)
		|			И ПоказателиОтчетов.ВидКурса <> ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.ЗначениеУказанноеВДокументе)) КАК ЕстьВидКурсаПрочее
		|ИЗ
		|	втЗначенияПотребителейРасчет КАК ПоказателиОтчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗначенияПоказателей.Показатель КАК Потребитель,
		|	ВЫБОР
		|		КОГДА ЗначенияПоказателей.Числовой
		|			ТОГДА 
		|				ВЫБОР
		|					КОГДА ЗначенияПоказателей.МаксИспользуемыхАналитик = 0
		|						И ЗначенияПоказателей.ЕстьАналитикаВалюта ТОГДА -2
		|					ИНАЧЕ ЗначенияПоказателей.МаксИспользуемыхАналитик
		|				КОНЕЦ
		|		КОГДА ЗначенияПоказателей.МаксИспользуемыхАналитик = 0
		|			ТОГДА -11
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК ИндексРегистраПотребителя
		|ИЗ
		|	втЗначенияПотребителейРасчет КАК ЗначенияПоказателей";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТекстПоля%", ТекстПоля);
	
	// Инициализируем служебные таблицы		
	тСлужебныеТаблицы 					= ПолучитьОписаниеСлужебныхТаблиц();
	глТаблицаПересчетаПоказателей		= тСлужебныеТаблицы.глТаблицаПересчетаПоказателей;
	тПоказателиОперанды                 = тСлужебныеТаблицы.тПоказателиОперанды; 	
	тИспользуемыеРесурсы                = тСлужебныеТаблицы.тИспользуемыеРесурсы;  
	тИспользуемыеАналитики              = тСлужебныеТаблицы.тИспользуемыеАналитики; 
	тРасшифровкаГруппОтборов			= тСлужебныеТаблицы.тРасшифровкаГруппОтборов;
	
	// Добавим данные по аналитикам вида отчета
	СтруктураРасчетаПоказателей = ПолучитьСтруктуруРасчетаПоказателей();
	ДанныеВидаОтчета = ДанныеВидаОтчета(ВидОтчета);
	СтруктураРасчетаПоказателей.ДанныеВидаОтчета = ДанныеВидаОтчета;
	СтруктураРасчетаПоказателей.МаксКлючевыхАналитик = ДанныеВидаОтчета.МаксКлючевыхАналитик;
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	// Заполним показатели отчета
	РезультатОперанды = ПакетРезультатов.Получить(ПакетРезультатов.Количество()-1);
	Если РезультатОперанды.Пустой() Тогда
		Возврат глТаблицаПересчетаПоказателей;
	КонецЕсли;
	ВыборкаЗапроса = РезультатОперанды.Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		НСтр = тПоказателиОперанды.Добавить();
		ЗаполнитьЗначенияСвойств(НСтр,ВыборкаЗапроса);
	КонецЦикла;
	
	// Добавим аналитики и ресурсы
	МаксИспользуемыхАналитик = 0;
	ЕстьЗначение = Ложь;
	ЕстьЗначениеНечисловое = Ложь;
	ЕстьАналитикаВалюта = Ложь;
	ВыборкаЗапроса = ПакетРезультатов.Получить(ПакетРезультатов.Количество()-2).Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		МаксИспользуемыхАналитик = ВыборкаЗапроса.МаксИспользуемыхАналитик;
		Для Сч = СтруктураРасчетаПоказателей.МаксКлючевыхАналитик+1 По МаксИспользуемыхАналитик Цикл
			НСтр					= тИспользуемыеАналитики.Добавить();
			НСтр.УровеньРасчета		= 0;
			НСтр.Поле				= "Аналитика" + Сч;
		КонецЦикла;
		Если ВыборкаЗапроса.ЕстьАналитикаВалюта Тогда
			НСтр					= тИспользуемыеАналитики.Добавить();
			НСтр.УровеньРасчета		= 0;
			НСтр.Поле				= "АналитикаВалюта";
			ЕстьАналитикаВалюта		= Истина;
		КонецЕсли;
		Если ВыборкаЗапроса.ЕстьЧисловойПоказатель Тогда
			НСтр = тИспользуемыеРесурсы.Добавить();
			НСтр.УровеньРасчета 	= 0;
			НСтр.Поле 				= "Значение";
			НСтр.Суммируется 		= Истина;
			НСтр.ВыводитсяВОтчет 	= Истина;
			ЕстьЗначение			= Истина;
		КонецЕсли;
		Если ВыборкаЗапроса.ЕстьНечисловойПоказатель Тогда
			НСтр = тИспользуемыеРесурсы.Добавить();
			НСтр.УровеньРасчета 	= 0;
			НСтр.Поле 				= "ЗначениеНечисловое";
			НСтр.Суммируется 		= Ложь;
			НСтр.ВыводитсяВОтчет 	= Истина;
			ЕстьЗначениеНечисловое	= Истина;
		КонецЕсли;
		СтруктураРасчетаПоказателей.Вставить("ЕстьВидКурсаЗначениеУказанноеВДокументе",ВыборкаЗапроса.ЕстьВидКурсаЗначениеУказанноеВДокументе);
		СтруктураРасчетаПоказателей.Вставить("ЕстьВидКурсаКурсНаМоментНачисления",ВыборкаЗапроса.ЕстьВидКурсаКурсНаМоментНачисления);
		СтруктураРасчетаПоказателей.Вставить("ЕстьВидКурсаПрочее",ВыборкаЗапроса.ЕстьВидКурсаПрочее);
	КонецЕсли;
	
	// Получим данные для всех показателей
	ДанныеДляРасчета = ПолучитьОперандыПоПравилуОбработки(ПравилоОбработки);
	ДанныеВидаОтчета = ДанныеДляРасчета.ДанныеВидаОтчета.Получить(0);
	
	СтруктураРасчетаПоказателей.Вставить("глТаблицаПересчетаПоказателей",глТаблицаПересчетаПоказателей);
	СтруктураРасчетаПоказателей.Вставить("тПоказателиОперанды",тПоказателиОперанды);
	СтруктураРасчетаПоказателей.Вставить("тИспользуемыеРесурсы",тИспользуемыеРесурсы);
	СтруктураРасчетаПоказателей.Вставить("тИспользуемыеАналитики",тИспользуемыеАналитики);
	СтруктураРасчетаПоказателей.Вставить("тРасшифровкаГруппОтборов",тРасшифровкаГруппОтборов);
	СтруктураРасчетаПоказателей.Вставить("МаксИспользуемыхАналитик",ДанныеВидаОтчета.МаксАналитикПоказателя + ДанныеВидаОтчета.МаксКлючевыхАналитик);
	СтруктураРасчетаПоказателей.Вставить("ЕстьАналитикаВалюта",ДанныеВидаОтчета.ЕстьАналитикаВалюта);
	СтруктураРасчетаПоказателей.Вставить("ЕстьЗначение",ЕстьЗначение);
	СтруктураРасчетаПоказателей.Вставить("ЕстьЗначениеНечисловое",ЕстьЗначениеНечисловое);
	СтруктураРасчетаПоказателей.Вставить("ЕстьЗначениеВалюта",ДанныеВидаОтчета.ЕстьЗначениеВалюта);
	
	// Добавим таблицу измененных показателей
	СоздатьТаблицуПоказателейОперандов(СтруктураРасчетаПоказателей);
	
	// Получим исходные данные потребителей
	ПодготовитьТаблицуИсходныхЗначенийПотребителей(СтруктураРасчетаПоказателей, , Истина);
	
	// Получим таблицы с дельтами, относительно исходных данных
	ПодготовитьТаблицуДляРасчетаОтклонений(СтруктураРасчетаПоказателей);
	
	// Запишем данные в лог измененных показателей
 	ДобавитьВЛогТаблицуИзмененныхПоказателей(СтруктураРасчетаПоказателей, ОбъектРасчета.ДополнительныеВалюты.Количество() > 0);

	Возврат глТаблицаПересчетаПоказателей;
	
КонецФункции	

// Функция - Получить структуру расчета показателей по автоматической консолидации
//
// Параметры:
//  ОбъектРасчета		 - Структура - Структура с данными для расчета 
//  МассивОрганизаций	 - Массив - Массив организаций, участвующих в консолидации
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - Таблица со строками этапов расчета показателей по правилу расчета
//
Функция ПолучитьТаблицуРасчетаПоказателейПоАвтоматическойКонсолидации(ОбъектРасчета, МассивОрганизаций) Экспорт
	
	/////////////////////////////////////////////////////////////////
	// Сформируем структура расчета для построения текстов запросов
	
	СтруктураРасчетаПоказателей = ПолучитьСтруктуруРасчетаПоказателей();
	МаксИспользуемыхАналитик	= 0;
	ВидОтчета					= ОбъектРасчета.ВидОтчета;
	МаксАналитикПоказателя		= ОбъектРасчета.МаксАналитикПоказателя;
	ПравилоОбработки			= ОбъектРасчета.ПравилоОбработки;
	
	// Инициализируем служебные таблицы
	тСлужебныеТаблицы 					= ПолучитьОписаниеСлужебныхТаблиц();	
	глТаблицаПересчетаПоказателей       = тСлужебныеТаблицы.глТаблицаПересчетаПоказателей;  
	тПоказателиОперанды                 = тСлужебныеТаблицы.тПоказателиОперанды; 	
	тИспользуемыеРесурсы                = тСлужебныеТаблицы.тИспользуемыеРесурсы;  
	тИспользуемыеАналитики              = тСлужебныеТаблицы.тИспользуемыеАналитики; 
	тРасшифровкаГруппОтборов			= тСлужебныеТаблицы.тРасшифровкаГруппОтборов; 	
	
	// Добавим ресурс "Значение"
	НСтр = тИспользуемыеРесурсы.Добавить();
	НСтр.УровеньРасчета = 1;
	НСтр.Поле = "Значение";
	НСтр.Суммируется = Истина;
	НСтр.ВыводитсяВОтчет = Истина;
	
	// Добавим данные по аналитикам вида отчета	
	ДанныеВидаОтчета = ДанныеВидаОтчета(ВидОтчета);
	СтруктураРасчетаПоказателей.ДанныеВидаОтчета = ДанныеВидаОтчета;
	СтруктураРасчетаПоказателей.МаксКлючевыхАналитик = ДанныеВидаОтчета.МаксКлючевыхАналитик;
	
	// Получим показатели с индексами регистров
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	Запрос.УстановитьПараметр("МаксКлючевыхАналитик",СтруктураРасчетаПоказателей.МаксКлючевыхАналитик);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Потребитель,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.ЧислоАналитик, 0) + &МаксКлючевыхАналитик КАК ИндексРегистраПотребителя,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.Валютная, ЛОЖЬ) КАК ЕстьАналитикаВалюта
	|ПОМЕСТИТЬ втПоказателиОтчетов
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &ВидОтчета
	|	И ПоказателиОтчетов.ЧисловойПоказатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПоказателиОтчетов.ИндексРегистраПотребителя) КАК МаксИспользуемыхАналитик,
	|	МАКСИМУМ(ПоказателиОтчетов.ЕстьАналитикаВалюта) КАК ЕстьАналитикаВалюта
	|ИЗ
	|	втПоказателиОтчетов КАК ПоказателиОтчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПоказателиОтчетов.Потребитель КАК Потребитель,
	|	втПоказателиОтчетов.ИндексРегистраПотребителя КАК ИндексРегистраПотребителя
	|ИЗ
	|	втПоказателиОтчетов КАК втПоказателиОтчетов";
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаЗапроса = ПакетРезультатов.Получить(2).Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		НСтр = тПоказателиОперанды.Добавить();
		ЗаполнитьЗначенияСвойств(НСтр,ВыборкаЗапроса);
	КонецЦикла;
	
	// Добавим аналитики
	ЕстьАналитикаВалюта = Ложь;
	ВыборкаЗапроса = ПакетРезультатов.Получить(1).Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		МаксИспользуемыхАналитик = ВыборкаЗапроса.МаксИспользуемыхАналитик;
		Если ВыборкаЗапроса.ЕстьАналитикаВалюта Тогда
			НСтр				= тИспользуемыеАналитики.Добавить();
			НСтр.УровеньРасчета	= 1;
			НСтр.Поле			= "АналитикаВалюта";
			ЕстьАналитикаВалюта	= Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Получим данные для всех показателей
	ДанныеДляРасчета = ПолучитьОперандыПоПравилуОбработки(ПравилоОбработки);
	ДанныеВидаОтчета = ДанныеДляРасчета.ДанныеВидаОтчета.Получить(0);
	
	СтруктураРасчетаПоказателей.Вставить("глТаблицаПересчетаПоказателей",глТаблицаПересчетаПоказателей);
	СтруктураРасчетаПоказателей.Вставить("тПоказателиОперанды",тПоказателиОперанды);
	СтруктураРасчетаПоказателей.Вставить("тИспользуемыеРесурсы",тИспользуемыеРесурсы);
	СтруктураРасчетаПоказателей.Вставить("тИспользуемыеАналитики",тИспользуемыеАналитики);
	СтруктураРасчетаПоказателей.Вставить("тРасшифровкаГруппОтборов",тРасшифровкаГруппОтборов);
	СтруктураРасчетаПоказателей.Вставить("МаксАналитикПоказателя",МаксАналитикПоказателя);
	СтруктураРасчетаПоказателей.Вставить("МаксИспользуемыхАналитик",ДанныеВидаОтчета.МаксАналитикПоказателя + ДанныеВидаОтчета.МаксКлючевыхАналитик);
	СтруктураРасчетаПоказателей.Вставить("ЕстьАналитикаВалюта",ДанныеВидаОтчета.ЕстьАналитикаВалюта);
	СтруктураРасчетаПоказателей.Вставить("ЕстьЗначениеВалюта",ДанныеВидаОтчета.ЕстьЗначениеВалюта);
	СтруктураРасчетаПоказателей.Вставить("МаксУровеньРасчета",1);
	
	// Сформируем запрос подъема значений показателей
	СоздатьТаблицуПоказателейОперандов(СтруктураРасчетаПоказателей);
	ПодготовитьТаблицуИсходныхЗначенийПотребителей(СтруктураРасчетаПоказателей,МассивОрганизаций);
	ПодготовитьТаблицуИсходныхЗначенийПотребителей(СтруктураРасчетаПоказателей);
	ПодготовитьТаблицуДляРасчетаОтклонений(СтруктураРасчетаПоказателей);

	Возврат глТаблицаПересчетаПоказателей;
	
КонецФункции

#КонецОбласти

#КонецОбласти


#Область ХранилищаПараметрическойНайстройки

Функция ПолучитьДанныеИзХранилищаПараметрическойНастройки(ПравилоОбработки, Уровень)

	// Проверим, есть ли сохраненные рассчитанные показатели
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХранилищаПараметрическойНастройкиРасширенный.ДатаАктуальности КАК ДатаАктуальности
		|ИЗ
		|	РегистрСведений.ХранилищаПараметрическойНастройкиРасширенный КАК ХранилищаПараметрическойНастройкиРасширенный
		|ГДЕ
		|	ХранилищаПараметрическойНастройкиРасширенный.ПравилоОбработки = &ПравилоОбработки
		|	И ХранилищаПараметрическойНастройкиРасширенный.Уровень = &Уровень";
		
	Запрос.УстановитьПараметр("ПравилоОбработки", ПравилоОбработки);
	Запрос.УстановитьПараметр("Уровень", Уровень);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	// Получим сохраненные рассчитанные показатели
	ВыборкаИзЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзЗапроса.Следующий();
	
	Возврат КэшируемыеПроцедурыУХ.ПолучитьДанныеПараметрическойНастройкиРасширенный(ПравилоОбработки,Уровень,ВыборкаИзЗапроса.ДатаАктуальности);
	
КонецФункции

Процедура СохранитьДанныеВХранилищеПараметрическойНастройки(ПравилоОбработки, Уровень, тПересчетаПоказателей)

	// Сохраним сформированные правила расчета показателей в регистр сведений	
	НаборЗаписей = РегистрыСведений.ХранилищаПараметрическойНастройкиРасширенный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПравилоОбработки.Установить(ПравилоОбработки);
	НаборЗаписей.Отбор.Уровень.Установить(Уровень);
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.ПравилоОбработки 				= ПравилоОбработки;
	НоваяСтрока.Уровень							= Уровень;
	НоваяСтрока.ДанныеПараметрическойНастройки 	= Новый ХранилищеЗначения(тПересчетаПоказателей, Новый СжатиеДанных());
	НоваяСтрока.ДатаАктуальности 				= ТекущаяДатаСеанса();
	
	НаборЗаписей.Записать();	
		
КонецПроцедуры

#КонецОбласти


#Область ПодъемДанныхДляРасчетаПараметрики

////////////////////////////////////////////////////////////////////////////////
// Получение данных для расчета параметрики
//  
////////////////////////////////////////////////////////////////////////////////

Функция РассчитатьОперандыПоПравилуОбработки(ПравилоОбработки)
	
	// Получим данные источников
	#Область Запрос
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НазначениеРасчетов", ПравилоОбработки);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроцедурыРасчетов.ПотребительРасчета КАК ПотребительРасчета,
		|	ПроцедурыРасчетов.Процедура КАК Процедура,
		|	ПроцедурыРасчетов.ПроизвольныйКод КАК ПроизвольныйКод
		|ПОМЕСТИТЬ втПроцедурыРасчетов
		|ИЗ
		|	РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
		|ГДЕ
		|	ПроцедурыРасчетов.НазначениеРасчетов = &НазначениеРасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсточникиДанныхДляРасчетов.ПоказательТекущегоОтчета КАК ПоказательТекущегоОтчета,
		|	ВЫРАЗИТЬ(ИсточникиДанныхДляРасчетов.Код КАК СТРОКА(50)) КАК Код,
		|	ИсточникиДанныхДляРасчетов.Ссылка КАК Ссылка,
		|	ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК ПотребительРасчета,
		|	ИсточникиДанныхДляРасчетов.ПоказательОтбор КАК ПоказательОтбор,
		|	ИсточникиДанныхДляРасчетов.СпособПолучения КАК СпособПолучения,
		|	ИсточникиДанныхДляРасчетов.РегистрБД КАК РегистрБД,
		|	ИсточникиДанныхДляРасчетов.РесурсРегистра КАК РесурсРегистра,
		|	ИсточникиДанныхДляРасчетов.ОсновнаяТаблицаРегистра КАК ОсновнаяТаблицаРегистра,
		|	ИсточникиДанныхДляРасчетов.Счет.СчетСсылка КАК Счет,
		|	ИсточникиДанныхДляРасчетов.КоррСчет.СчетСсылка КАК КоррСчет,
		|	ИсточникиДанныхДляРасчетов.ВидСреза КАК ВидСреза,
		|	ИсточникиДанныхДляРасчетов.ОбъектБД КАК ОбъектБД,
		|	ИсточникиДанныхДляРасчетов.ТабличнаяЧастьБД КАК ТабличнаяЧастьБД,
		|	ИсточникиДанныхДляРасчетов.ТипЗначения КАК ТипЗначения,
		|	ИсточникиДанныхДляРасчетов.ИспользоватьМногопериодныйКонтекст КАК ИспользоватьМногопериодныйКонтекст,
		|	ВЫБОР
		|		КОГДА ИсточникиДанныхДляРасчетов.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос)
		|				ИЛИ ИсточникиДанныхДляРасчетов.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос)
		|			ТОГДА ИсточникиДанныхДляРасчетов.ТекстЗапросаМодуля
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ТекстЗапросаМодуля
		|ПОМЕСТИТЬ втИсточникиДанныхДляРасчетов
		|ИЗ
		|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПроцедурыРасчетов КАК ПроцедурыРасчетов
		|		ПО ИсточникиДанныхДляРасчетов.ПотребительРасчета = ПроцедурыРасчетов.ПотребительРасчета
		|ГДЕ
		|	НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления
		|	И НЕ ИсточникиДанныхДляРасчетов.НеИспользуется
		|	И ИсточникиДанныхДляРасчетов.СпособИспользования = ЗНАЧЕНИЕ(Перечисление.СпособыИспользованияОперандов.ДляФормулРасчета)
		|	И ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &НазначениеРасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПотребителиРасчета.Ссылка КАК ПотребительРасчета,
		|	ПотребителиРасчета.Ссылка.Представление КАК ПотребительПредставление,
		|	ПотребителиРасчета.ТипЗначения КАК ТипЗначения,
		|	ПотребителиРасчета.Владелец КАК ВидОтчетаПотребителя,
		|	ПотребителиРасчета.Владелец.Представление КАК ВидОтчетаПотребителяПредставление,
		|	ПотребителиРасчета.ПересчитыватьВалютнуюСумму КАК ПересчитыватьВалютнуюСумму,
		|	ПотребителиРасчета.ВидИтога КАК ВидИтога,
		|	ПотребителиРасчета.СпособРасчетаИтогаПоПериоду КАК ВидИтогаПоПериоду,
		|	ПотребителиРасчета.ВидКурса КАК ВидКурса,
		|	ПотребителиРасчета.НеФинансовый КАК НеФинансовый,
		|	ЕСТЬNULL(ПотребителиРасчета.ГруппаРаскрытия.ЧислоАналитик, 0) КАК ЧислоАналитик,
		|	ВЫБОР
		|		КОГДА ПотребителиРасчета.ГруппаРаскрытия.ВидАналитикиВалютаДт ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		КОГДА ПотребителиРасчета.ГруппаРаскрытия.ВидАналитикиВалютаДт = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьАналитикаВалюта,
		|	ИсточникиДанныхДляРасчетов.ПоказательТекущегоОтчета КАК ПоказательТекущегоОтчета,
		|	ИсточникиДанныхДляРасчетов.Код КАК Код,
		|	ИсточникиДанныхДляРасчетов.Ссылка КАК Ссылка,
		|	ИсточникиДанныхДляРасчетов.ПоказательОтбор КАК ПоказательОтбор,
		|	ИсточникиДанныхДляРасчетов.СпособПолучения КАК СпособПолучения,
		|	ИсточникиДанныхДляРасчетов.РегистрБД КАК РегистрБД,
		|	ИсточникиДанныхДляРасчетов.РесурсРегистра КАК РесурсРегистра,
		|	ИсточникиДанныхДляРасчетов.ОсновнаяТаблицаРегистра КАК ОсновнаяТаблицаРегистра,
		|	ИсточникиДанныхДляРасчетов.Счет КАК Счет,
		|	ИсточникиДанныхДляРасчетов.КоррСчет КАК КоррСчет,
		|	ИсточникиДанныхДляРасчетов.ВидСреза КАК ВидСреза,
		|	ИсточникиДанныхДляРасчетов.ОбъектБД КАК ОбъектБД,
		|	ИсточникиДанныхДляРасчетов.ТабличнаяЧастьБД КАК ТабличнаяЧастьБД,
		|	ИсточникиДанныхДляРасчетов.ИспользоватьМногопериодныйКонтекст КАК ИспользоватьМногопериодныйКонтекст,
		|	ИсточникиДанныхДляРасчетов.ТекстЗапросаМодуля КАК ТекстЗапросаМодуля,
		|	ИсточникиДанныхДляРасчетов.ПоказательОтбор.Владелец КАК ВидОтчетаПоказателя,
		|	ВЫБОР 
		|		КОГДА ИсточникиДанныхДляРасчетов.ПоказательОтбор = ЗНАЧЕНИЕ(Справочник.ПоказателиОтчетов.ПустаяСсылка) ТОГДА
		|			ИсточникиДанныхДляРасчетов.ТипЗначения
		|		ИНАЧЕ
		|			ИсточникиДанныхДляРасчетов.ПоказательОтбор.ТипЗначения
		|	КОНЕЦ КАК ТипЗначенияПоказателя,
		|	ЕСТЬNULL(ИсточникиДанныхДляРасчетов.ПоказательОтбор.ГруппаРаскрытия.ЧислоАналитик, 0) КАК ЧислоАналитикПоказателя,
		|	ВЫБОР
		|		КОГДА ИсточникиДанныхДляРасчетов.ПоказательОтбор.ГруппаРаскрытия.ВидАналитикиВалютаДт ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		КОГДА ИсточникиДанныхДляРасчетов.ПоказательОтбор.ГруппаРаскрытия.ВидАналитикиВалютаДт = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьАналитикаВалютаПоказателя,
		|	ВЫБОР
		|		КОГДА ИсточникиДанныхДляРасчетов.ПоказательОтбор.Владелец.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ИсточникиДанныхДляРасчетов.ПоказательОтбор.Владелец.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ИсточникиДанныхДляРасчетов.ПоказательОтбор.Владелец.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ИсточникиДанныхДляРасчетов.ПоказательОтбор.Владелец.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ИсточникиДанныхДляРасчетов.ПоказательОтбор.Владелец.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ИсточникиДанныхДляРасчетов.ПоказательОтбор.Владелец.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК МаксКлючевыхАналитикПоказателя
		|ПОМЕСТИТЬ втДанныеДляРасчета
		|ИЗ
		|	Справочник.ПоказателиОтчетов КАК ПотребителиРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПроцедурыРасчетов КАК ПроцедурыРасчетов
		|		ПО (ПроцедурыРасчетов.ПотребительРасчета = ПотребителиРасчета.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ втИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
		|		ПО (ИсточникиДанныхДляРасчетов.ПотребительРасчета = ПотребителиРасчета.Ссылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДляРасчета.Счет КАК Счет
		|ПОМЕСТИТЬ втВсеСчета
		|ИЗ
		|	втДанныеДляРасчета КАК ДанныеДляРасчета
		|ГДЕ
		|	НЕ ДанныеДляРасчета.Счет ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДляРасчета.КоррСчет
		|ИЗ
		|	втДанныеДляРасчета КАК ДанныеДляРасчета
		|ГДЕ
		|	НЕ ДанныеДляРасчета.КоррСчет ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка КАК Ссылка,
		|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Поле КАК Поле,
		|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Синоним КАК Синоним,
		|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.КодАналитики КАК КодАналитики,
		|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.СпособЗаполнения КАК СпособЗаполнения,
		|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.ФиксированноеЗначение КАК ФиксированноеЗначение,
		|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.НастройкаСоответствия КАК НастройкаСоответствия
		|ПОМЕСТИТЬ втПравилаИспользованияПолейЗапроса
		|ИЗ
		|	втИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса КАК ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса
		|		ПО ИсточникиДанныхДляРасчетов.Ссылка = ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсточникиДанныхДляРасчетов.ПоказательОтбор КАК ПоказательОперанд,
		|	ИсточникиДанныхДляРасчетов.Код КАК КодВФормуле,
		|	ИсточникиДанныхДляРасчетовТаблицаПараметровОтбораБД.Ссылка КАК Ссылка,
		|	ИсточникиДанныхДляРасчетовТаблицаПараметровОтбораБД.ПолеБД КАК ПолеБД,
		|	ИсточникиДанныхДляРасчетовТаблицаПараметровОтбораБД.ИмяПараметра КАК ИмяПараметра,
		|	ИсточникиДанныхДляРасчетовТаблицаПараметровОтбораБД.СпособВычисленияПараметра КАК СпособВычисленияПараметра,
		|	ИсточникиДанныхДляРасчетовТаблицаПараметровОтбораБД.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ИсточникиДанныхДляРасчетовТаблицаПараметровОтбораБД.ИдентификаторРодителя КАК ИдентификаторРодителя,
		|	ИсточникиДанныхДляРасчетовТаблицаПараметровОтбораБД.ТекстМодуля КАК ТекстМодуля,
		|	ИсточникиДанныхДляРасчетовТаблицаПараметровОтбораБД.ТипЗначенияАналитики КАК ТипЗначенияАналитики
		|ПОМЕСТИТЬ втПараметрыОтбораБД
		|ИЗ
		|	втИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсточникиДанныхДляРасчетов.ТаблицаПараметровОтбораБД КАК ИсточникиДанныхДляРасчетовТаблицаПараметровОтбораБД
		|		ПО ИсточникиДанныхДляРасчетов.Ссылка = ИсточникиДанныхДляРасчетовТаблицаПараметровОтбораБД.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсточникиДанныхДляРасчетовУточненияСпособовОпределения.Ссылка КАК Ссылка,
		|	ИсточникиДанныхДляРасчетовУточненияСпособовОпределения.ПолеБД КАК ПолеБД,
		|	ИсточникиДанныхДляРасчетовУточненияСпособовОпределения.ИмяПараметра КАК ИмяПараметра,
		|	ИсточникиДанныхДляРасчетовУточненияСпособовОпределения.Тип КАК Тип,
		|	ИсточникиДанныхДляРасчетовУточненияСпособовОпределения.Представление КАК Представление,
		|	ИсточникиДанныхДляРасчетовУточненияСпособовОпределения.Значение КАК Значение
		|ПОМЕСТИТЬ втУточненияСпособовОпределения
		|ИЗ
		|	втИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсточникиДанныхДляРасчетов.УточненияСпособовОпределения КАК ИсточникиДанныхДляРасчетовУточненияСпособовОпределения
		|		ПО ИсточникиДанныхДляРасчетов.Ссылка = ИсточникиДанныхДляРасчетовУточненияСпособовОпределения.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втУточненияСпособовОпределения.Ссылка КАК Ссылка,
		|	втУточненияСпособовОпределения.ПолеБД КАК ПолеБД,
		|	втУточненияСпособовОпределения.ИмяПараметра КАК ИмяПараметра,
		|	втУточненияСпособовОпределения.Тип КАК Тип
		|ИЗ
		|	втУточненияСпособовОпределения КАК втУточненияСпособовОпределения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляРасчета.ПотребительРасчета КАК ПотребительРасчета
		|ИЗ
		|	втДанныеДляРасчета КАК ДанныеДляРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПараметрыОтбораБД КАК втПараметрыОтбораБД
		|		ПО ДанныеДляРасчета.Ссылка = втПараметрыОтбораБД.Ссылка
		|			И (втПараметрыОтбораБД.ПолеБД = ""Версия.ПериодОтчета"")
		|ГДЕ
		|	ДанныеДляРасчета.ВидОтчетаПоказателя = ДанныеДляРасчета.ВидОтчетаПотребителя
		|	И втПараметрыОтбораБД.СпособВычисленияПараметра <> ЗНАЧЕНИЕ(Перечисление.СпособыВычисленияПараметровОперандов.ПериодОтчета)
		|	И втПараметрыОтбораБД.СпособВычисленияПараметра <> ЗНАЧЕНИЕ(Перечисление.СпособыВычисленияПараметровОперандов.ВышестоящийПериод)
		|	И втПараметрыОтбораБД.СпособВычисленияПараметра <> ЗНАЧЕНИЕ(Перечисление.СпособыВычисленияПараметровОперандов.АналогичныйПериодПредыдущегоГода)
		|	И втПараметрыОтбораБД.СпособВычисленияПараметра <> ЗНАЧЕНИЕ(Перечисление.СпособыВычисленияПараметровОперандов.АналогичныйПериодГодаСоСдвигом)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПравилаИспользованияПолейЗапроса.Ссылка КАК Ссылка
		|ИЗ
		|	втПравилаИспользованияПолейЗапроса КАК втПравилаИспользованияПолейЗапроса
		|ГДЕ
		|	втПравилаИспользованияПолейЗапроса.СпособЗаполнения = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияПолейИсточника.ПолеДругогоИсточникаДанных)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыОтчетов.Ссылка КАК ВидОтчета,
		|	ВидыОтчетов.РазделениеПоПроектам КАК РазделениеПоПроектам,
		|	ВидыОтчетов.СохранятьИсториюИзменений КАК СохранятьИсториюИзменений,
		|	ВЫБОР
		|		КОГДА ВидыОтчетов.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ВидыОтчетов.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ВидыОтчетов.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ВидыОтчетов.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ВидыОтчетов.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ВидыОтчетов.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК МаксКлючевыхАналитик,
		|	ЕСТЬNULL(ВложенныйЗапрос.МаксАналитикПоказателя, 0) КАК МаксАналитикПоказателя,
		|	ЕСТЬNULL(ВложенныйЗапрос.ЕстьАналитикаВалюта, 0) КАК ЕстьАналитикаВалюта,
		|	ЕСТЬNULL(ВложенныйЗапрос.ЕстьЗначениеВалюта, 0) КАК ЕстьЗначениеВалюта
		|ИЗ
		|	Справочник.ВидыОтчетов КАК ВидыОтчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ПравилаОбработки
		|		ПО (ПравилаОбработки.Владелец = ВидыОтчетов.Ссылка)
		|			И (ПравилаОбработки.Ссылка = &НазначениеРасчетов)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(ДанныеДляРасчета.ЧислоАналитик) КАК МаксАналитикПоказателя,
		|			МАКСИМУМ(ДанныеДляРасчета.ЕстьАналитикаВалюта) КАК ЕстьАналитикаВалюта,
		|			МАКСИМУМ(ДанныеДляРасчета.ПересчитыватьВалютнуюСумму) КАК ЕстьЗначениеВалюта
		|		ИЗ
		|			втДанныеДляРасчета КАК ДанныеДляРасчета) КАК ВложенныйЗапрос
		|		ПО (ИСТИНА)";
	#КонецОбласти	
		
	РезультатЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	СтруктураВозврата = Новый Структура();
	
	// Данные вида отчета
	ДанныеВидаОтчета = РезультатЗапроса.Получить(РезультатЗапроса.Количество()-1).Выгрузить();
	МаксКлючевыхАналитик = ДанныеВидаОтчета.Получить(0).МаксКлючевыхАналитик;
	СтруктураВозврата.Вставить("ДанныеВидаОтчета",ДанныеВидаОтчета);
	
	// Формулы расчета с обработкой
	тПроцедурыРасчетов = РезультатЗапроса.Получить(0).Выгрузить();
	тПроцедурыРасчетов.Индексы.Добавить("ПотребительРасчета");
	
	// Данные источников для расчетов
	тДанныеДляРасчетов = РезультатЗапроса.Получить(2).Выгрузить();
	тДанныеДляРасчетов.Индексы.Добавить("ПотребительРасчета");
	тДанныеДляРасчетов.Колонки.Добавить("УровеньОперанда");
	тДанныеДляРасчетов.Колонки.Добавить("ИндексРегистраОперанда");
	тДанныеДляРасчетов.Колонки.Добавить("ИндексРегистраПотребителя");
	тДанныеДляРасчетов.Колонки.Добавить("ВариантРасчета");
	тДанныеДляРасчетов.Колонки.Добавить("Процедура");
	Для Каждого СтрокаТаблицы Из тДанныеДляРасчетов Цикл
		
		// Код без пробелов
		СтрокаТаблицы.Код = СокрЛП(СтрокаТаблицы.Код);
		
		// Индекс регистра операнда
		Если СтрокаТаблицы.ТипЗначенияПоказателя <> Перечисления.ТипыЗначенийПоказателейОтчетов.Число  Тогда
			// -11 - это нечисловая синтетика (Итоговое значение = ИСТИНА), -1  - нечисловая аналитика (Итоговое значение = ЛОЖЬ)
			СтрокаТаблицы.ИндексРегистраОперанда = ?(СтрокаТаблицы.ЧислоАналитикПоказателя > 0,-1,-11);		
		ИначеЕсли СтрокаТаблицы.ЧислоАналитикПоказателя = 0 И СтрокаТаблицы.МаксКлючевыхАналитикПоказателя = 0 И СтрокаТаблицы.ЕстьАналитикаВалютаПоказателя Тогда
			СтрокаТаблицы.ИндексРегистраОперанда = -2;
		Иначе	
			СтрокаТаблицы.ИндексРегистраОперанда = СтрокаТаблицы.ЧислоАналитикПоказателя + СтрокаТаблицы.МаксКлючевыхАналитикПоказателя;
		КонецЕсли;
		
		// Индекс регистра потребителя
		Если СтрокаТаблицы.ТипЗначения <> Перечисления.ТипыЗначенийПоказателейОтчетов.Число  Тогда
			// -11 - это нечисловая синтетика (Итоговое значение = ИСТИНА), -1  - нечисловая аналитика (Итоговое значение = ЛОЖЬ)
			СтрокаТаблицы.ИндексРегистраПотребителя = ?(СтрокаТаблицы.ЧислоАналитик > 0,-1,-11);		
		ИначеЕсли СтрокаТаблицы.ЧислоАналитик = 0 И МаксКлючевыхАналитик = 0 И СтрокаТаблицы.ЕстьАналитикаВалюта Тогда
			СтрокаТаблицы.ИндексРегистраПотребителя = -2;
		Иначе	
			СтрокаТаблицы.ИндексРегистраПотребителя = СтрокаТаблицы.ЧислоАналитик + МаксКлючевыхАналитик;
		КонецЕсли;
		
		// Вариант расчета
		текФормула = тПроцедурыРасчетов.Найти(СтрокаТаблицы.ПотребительРасчета,"ПотребительРасчета");
		Если ЗначениеЗаполнено(СтрокаТаблицы.Ссылка) Тогда
			// Есть источник данных для расчетов
			СтрокаТаблицы.ВариантРасчета = ПолучитьВариантРасчетаПоказателя(текФормула, тДанныеДляРасчетов);
		Иначе
			// Произвольный код без источников данных
			СтрокаТаблицы.ВариантРасчета = 2;
			СтрокаТаблицы.Код = СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
		КонецЕсли;
		СтрокаТаблицы.Процедура = СокрЛП(текФормула.Процедура);
		
	КонецЦикла;
	СтруктураВозврата.Вставить("тДанныеДляРасчетов",тДанныеДляРасчетов);
	
	// Найдем группы счетов, если такие имеются
	Если РезультатЗапроса.Получить(3).Пустой() Тогда
		тСчетаСИерархией = Новый ТаблицаЗначений;
		тСчетаСИерархией.Колонки.Добавить("Счет");
	Иначе
		тСчетаСИерархией = ПолучитьТаблицуСчетовСИерархией(Запрос.МенеджерВременныхТаблиц);
	КонецЕсли;
	СтруктураВозврата.Вставить("тСчетаСИерархией", тСчетаСИерархией);
	
	// Правила вычисления полей запроса
	тПравилаИспользованияПолейЗапроса = РезультатЗапроса.Получить(4).Выгрузить();
	тПравилаИспользованияПолейЗапроса.Индексы.Добавить("Ссылка");
	СтруктураВозврата.Вставить("тПравилаИспользованияПолейЗапроса",тПравилаИспользованияПолейЗапроса);	
	
	// Заполним уточнения способов определения, если необходимо
	тПараметрыОтбораБД = РезультатЗапроса.Получить(5).Выгрузить();
	тПараметрыОтбораБД.Индексы.Добавить("Ссылка");
	тПараметрыОтбораБД.Колонки.Добавить("УточнениеСпособаОпределения");
	тУточненияСпособовОпределения = РезультатЗапроса.Получить(6).Выгрузить();	
	ВыборкаУСО = РезультатЗапроса.Получить(7).Выбрать();
	Пока ВыборкаУСО.Следующий() Цикл
		
		СтруктураОтбора = Новый Структура("Ссылка, ПолеБД, ИмяПараметра", 
			ВыборкаУСО.Ссылка, ВыборкаУСО.ПолеБД, ВыборкаУСО.ИмяПараметра);			
		СтрокиЗначений = тУточненияСпособовОпределения.НайтиСтроки(СтруктураОтбора);			
		
		Если ВыборкаУСО.Тип = "СписокЗначений" Тогда		
			УточнениеСпособаОпределения = Новый СписокЗначений;			
			Для Каждого Строка Из СтрокиЗначений Цикл				
				УточнениеСпособаОпределения.Добавить(Строка.Значение); 				
			КонецЦикла;			
		ИначеЕсли ВыборкаУСО.Тип="Массив" Тогда
			УточнениеСпособаОпределения=Новый Массив;			
			Для Каждого Строка Из СтрокиЗначений Цикл				
				УточнениеСпособаОпределения.Добавить(Строка.Значение);				
			КонецЦикла;			
		ИначеЕсли ВыборкаУСО.Тип="Структура" Тогда
			УточнениеСпособаОпределения=Новый Структура;			
			Для Каждого Строка Из СтрокиЗначений Цикл 				
				УточнениеСпособаОпределения.Вставить(Строка.Представление,Строка.Значение);				
			КонецЦикла;			
		Иначе			
			УточнениеСпособаОпределения=СтрокиЗначений[0].Значение;			
		КонецЕсли;

		СтрокиОтбора = тПараметрыОтбораБД.НайтиСтроки(СтруктураОтбора);
		Если СтрокиОтбора.Количество() = 0 Тогда 			
			СтрокиОтбора = тПараметрыОтбораБД.НайтиСтроки(
				Новый Структура("Ссылка, ИмяПараметра", ВыборкаУСО.Ссылка, ВыборкаУСО.ИмяПараметра));
			Если СтрокиОтбора.Количество() = 0 Тогда				
				СтрокиОтбора = тПараметрыОтбораБД.НайтиСтроки(
					Новый Структура("Ссылка, ПолеБД", ВыборкаУСО.Ссылка, ВыборкаУСО.ПолеБД));				
			КонецЕсли;			
		КонецЕсли;
				
		Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
			СтрокаОтбора.УточнениеСпособаОпределения = УточнениеСпособаОпределения;
		КонецЦикла;
			
	КонецЦикла;
	
	// Параметры отбора
	Для Каждого СтрокаТаблицы Из тПараметрыОтбораБД Цикл
		СтрокаТаблицы.ПолеБД = СтрЗаменить(СтрокаТаблицы.ПолеБД,"Версия.","");
		СтрокаТаблицы.КодВФормуле = СокрЛП(СтрокаТаблицы.КодВФормуле);
	КонецЦикла;
	СтруктураВозврата.Вставить("тПараметрыОтбораБД",тПараметрыОтбораБД);	
	
	// Показатели со сдвигом по периоду
	СтруктураВозврата.Вставить("мПоказателиСоСдвигомПоПериоду",РезультатЗапроса.Получить(8).Выгрузить().ВыгрузитьКолонку("ПотребительРасчета"));
	СтруктураВозврата.Вставить("мИсточникиСДополнениемАналитик",РезультатЗапроса.Получить(9).Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПолучитьВариантРасчетаПоказателя(текФормула, тДанныеДляРасчетов)
	
	// 1 - Ручной расчет в коде
	// 2 - Без формул, только перенос значения показателя
	// 3 - Суммирование значений показателей
	// 4 - Расчет в запросе по значениям показателей
	
	Если текФормула.ПроизвольныйКод Тогда
		// Ручной расчет в коде
		Возврат 1;
	КонецЕсли;
	
	тОперандыТекущегоПоказателя = тДанныеДляРасчетов.НайтиСтроки(Новый Структура("ПотребительРасчета",текФормула.ПотребительРасчета));
	Если тОперандыТекущегоПоказателя.Количество() > 50 Тогда
		// Слишком много операндов для вычисления в запросе
		Возврат 1;	 
	КонецЕсли;
	
	// Получим текст процедуры без пробелов
	ТекстПроцедуры = СокрЛП(текФормула.Процедура);
	Пока СтрНайти(ТекстПроцедуры," ") > 0 Цикл
		ТекстПроцедуры = СтрЗаменить(ТекстПроцедуры, " ", "");
	КонецЦикла;
	
	// Проверим число условных операторов
	ЧислоВхождений = СтрЧислоВхождений(ТекстПроцедуры,"?");
	Если ЧислоВхождений > 10 Тогда
		// Максимальное число вложенных условных операторов превышено, используем ручной расчет в коде
		Возврат 1;
	КонецЕсли;
	
	Если тОперандыТекущегоПоказателя.Количество() = 1
		И ТекстПроцедуры = "[" + СокрЛП(тОперандыТекущегоПоказателя.Получить(0).Код) + "]" Тогда
		// Без формул, только перенос значения показателя
		Возврат 2;
	КонецЕсли;
	
	// Проверим наличие формул с нечисловыми показателями
	Для Каждого СтрОперанда Из тОперандыТекущегоПоказателя Цикл		
		Если СтрОперанда.ТипЗначенияПоказателя <> Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			// Формула с датами или со строками, скорее всего в запросе вычислить не получится
			Возврат 1;
		КонецЕсли;		
	КонецЦикла;
		
	// Удалим операнды из формулы
	Для Каждого СтрОперанда Из тОперандыТекущегоПоказателя Цикл
		
		КодОперанда = "[" + СокрЛП(СтрОперанда.Код) + "]";
		
		Если СтрНайти(ТекстПроцедуры, КодОперанда, , , 2) > 0 Тогда
			// Операнд используется в формуле более 1 раза, вычисляем в запросе
			Возврат 4;
		КонецЕсли;
		
		ТекстПроцедуры = СтрЗаменить(ТекстПроцедуры,КодОперанда,"");
		
	КонецЦикла;

	ТекстПроцедуры  = СтрЗаменить(ТекстПроцедуры,"+","");
	ТекстПроцедуры  = СтрЗаменить(ТекстПроцедуры,")","");
	ТекстПроцедуры  = СтрЗаменить(ТекстПроцедуры,"(","");
	Если ПустаяСтрока(ТекстПроцедуры) Тогда
		// В формуле только операции сложения
		Возврат 3;
	КонецЕсли;
	
	// Показатель рассчитывается в запросе по значениям других показателей
	Возврат 4;
	
КонецФункции

Функция ПолучитьСчетаСИерархией(Счет)
	
	Если Не ЗначениеЗаполнено(Счет) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Ссылка
		|ИЗ
		|	ПланСчетов." + Счет.Метаданные().Имя + " КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет)";
	
	Запрос.УстановитьПараметр("Счет", Счет);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьТаблицуСчетовСИерархией(МенеджерВременныхТаблиц)
	
	ТекстЗапроса = "";
	Для Каждого ПланСчетов Из Метаданные.ПланыСчетов Цикл
		
		Если ТекстЗапроса <> "" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + СтрЗаменить( 
		"ВЫБРАТЬ
		|	ВсеСчета.Счет КАК Счет,
		|	НЕОПРЕДЕЛЕНО КАК МассивПодчиненныхСчетов
		|ИЗ
		|	втВсеСчета КАК ВсеСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.%ИмяПланаСчетов% КАК ПланСчетов%ИмяПланаСчетов%
		|		ПО ВсеСчета.Счет = ПланСчетов%ИмяПланаСчетов%.Родитель
		|ГДЕ
		|	НЕ ПланСчетов%ИмяПланаСчетов%.Ссылка ЕСТЬ NULL", "%ИмяПланаСчетов%", ПланСчетов.Имя);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	тСчетаСИерархией = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрСчет Из тСчетаСИерархией Цикл		
		СтрСчет.МассивПодчиненныхСчетов = ПолучитьСчетаСИерархией(СтрСчет.Счет);		
	КонецЦикла;
	
	Возврат тСчетаСИерархией;
	
КонецФункции

Функция ПолучитьОперандыПоПравилуОбработки(ПравилоОбработки)
	
	ДанныеДляРасчета = ПолучитьДанныеИзХранилищаПараметрическойНастройки(ПравилоОбработки, 0);
	Если ДанныеДляРасчета = Неопределено Тогда
		
		ДанныеДляРасчета = РассчитатьОперандыПоПравилуОбработки(ПравилоОбработки);
		
		СохранитьДанныеВХранилищеПараметрическойНастройки(ПравилоОбработки, 0, ДанныеДляРасчета);
		
	КонецЕсли;
		
	Возврат ДанныеДляРасчета;
	
КонецФункции

#КонецОбласти


#Область ПроцедурыФормированияДополненнойПараметрики

////////////////////////////////////////////////////////////////////////////////
// Процедуры расчета итоговой параметрики
//  
////////////////////////////////////////////////////////////////////////////////

Функция ПодготовитьТаблицыДляРасчетаПоказателейПоПравилуРасчета(ПравилоОбработки, тИзмененныеПоказатели=Неопределено, тЦелевыеПоказатели=Неопределено)
	
	// Данные для расчета
	ДанныеДляРасчета = ПолучитьОперандыПоПравилуОбработки(ПравилоОбработки);
	
	// Отфильтруем данные по таблице измененных показателей
	Если ТипЗнч(тИзмененныеПоказатели) = Тип("ТаблицаЗначений") Тогда
		ОтфильтроватьПоИзмененнымПоказателям(ДанныеДляРасчета, тИзмененныеПоказатели); 
	КонецЕсли;
	
	// Отфильтруем данные по таблице целевых показателей
	Если ТипЗнч(тЦелевыеПоказатели) = Тип("ТаблицаЗначений") Тогда
		ОтфильтроватьПоЦелевымПоказателям(ДанныеДляРасчета, тЦелевыеПоказатели); 
	КонецЕсли;
	
	// Получим таблицы
	тДанныеДляРасчетов 					= ДанныеДляРасчета.тДанныеДляРасчетов;
	тСчетаСИерархией					= ДанныеДляРасчета.тСчетаСИерархией;
	тПараметрыОтбораБД					= ДанныеДляРасчета.тПараметрыОтбораБД;
	тПравилаИспользованияПолейЗапроса	= ДанныеДляРасчета.тПравилаИспользованияПолейЗапроса;
	мПоказателиСоСдвигомПоПериоду 		= ДанныеДляРасчета.мПоказателиСоСдвигомПоПериоду;
	мИсточникиСДополнениемАналитик		= ДанныеДляРасчета.мИсточникиСДополнениемАналитик;
	ДанныеВидаОтчета 					= ДанныеДляРасчета.ДанныеВидаОтчета.Получить(0);
	
	// Получим описание служебных таблиц, используемых при расчете:
	СлужебныеТаблицы 								= ПолучитьОписаниеСлужебныхТаблиц();
	глТаблицаПересчетаПоказателей	 				= СлужебныеТаблицы.глТаблицаПересчетаПоказателей;
	тРасшифровкаГруппОтборов						= СлужебныеТаблицы.тРасшифровкаГруппОтборов;
	тПоказателиОперанды              				= СлужебныеТаблицы.тПоказателиОперанды;	
	тКэшИменПоказателей		            			= СлужебныеТаблицы.тКэшИменПоказателей;
	тКэшГруппОтборовПоказателей         			= СлужебныеТаблицы.тКэшГруппОтборовПоказателей;
	тИспользуемыеАналитики							= СлужебныеТаблицы.тИспользуемыеАналитики;
	тИспользуемыеРесурсы							= СлужебныеТаблицы.тИспользуемыеРесурсы;
	тВнутренниеДанные								= СлужебныеТаблицы.тВнутренниеДанные;
	тВнешниеДанные 									= СлужебныеТаблицы.тВнешниеДанные;
	тПроизвольныйКод								= СлужебныеТаблицы.тПроизвольныйКод;
	тПроизвольныеЗапросы 							= тВнешниеДанные.СкопироватьКолонки();
	мУровниСВременнымРасчетом						= Новый Массив;
	МаксУИДГруппыОтборов 							= 0;
	МаксУровеньРасчетаПоказателей 					= 0;
	МаксУровеньРучныхРасчетов						= 0;
	ЕстьИспользованиеВнешнихДанных					= Ложь;
	ЕстьВидКурсаПрочее								= Ложь;
	ЕстьВидКурсаЗначениеУказанноеВДокументе			= Ложь;
	ЕстьВидКурсаКурсНаМоментНачисления 				= Ложь;
		
	// Построим дерево расчета
	тРазличныеПоказатели = тДанныеДляРасчетов.Скопировать();
	тРазличныеПоказатели.Свернуть("ПотребительРасчета");
	Для Каждого СтрПоказателя Из тРазличныеПоказатели Цикл
	
		тОперандыТекущегоПоказателя = тДанныеДляРасчетов.НайтиСтроки(Новый Структура("ПотребительРасчета",СтрПоказателя.ПотребительРасчета));
		
		// Определяем максимальный уровень расчета показателя и уровень расчета каждого операнда
		МаксУровеньРасчета = 1;
		ЕстьДополненияАналитик = Ложь;
		ЕстьПоказательНеТекущегоОтчета = Ложь;
				
		Для Каждого СтрОперанд Из тОперандыТекущегоПоказателя Цикл
			
			Если мИсточникиСДополнениемАналитик.Найти(СтрОперанд.Ссылка) <> Неопределено Тогда
				ЕстьДополненияАналитик = Истина;
			КонецЕсли;
			
			СтрОперанд.УровеньОперанда = 0;
			
			тМаксимальныйУровень = Новый ТаблицаЗначений;
			тМаксимальныйУровень.Колонки.Добавить("тУровень");
			
			ПолучитьУровеньРасчетаОперандаРекурсивно(
				Новый ДеревоЗначений,
				СтрОперанд,
				тДанныеДляРасчетов,
				мПоказателиСоСдвигомПоПериоду,
				СтрОперанд,
				тМаксимальныйУровень);
					
			Если НЕ СтрОперанд.ПоказательТекущегоОтчета
				И НЕ (ЗначениеЗаполнено(СтрОперанд.ПоказательОтбор)
				И мПоказателиСоСдвигомПоПериоду.Найти(СтрОперанд.ПоказательОтбор) = Неопределено) 
				Тогда
				
				ЕстьПоказательНеТекущегоОтчета = Истина;
				СтрОперанд.УровеньОперанда = 1;
				
			Иначе							
				
				тМаксимальныйУровень.Сортировать("тУровень УБЫВ");
				УровеньРасчета = тМаксимальныйУровень[0].тУровень;
				
				Если УровеньРасчета > МаксУровеньРасчета Тогда
					МаксУровеньРасчета = УровеньРасчета;
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекущийПериод = мПоказателиСоСдвигомПоПериоду.Найти(СтрПоказателя.ПотребительРасчета) = Неопределено;
		
		// Запоминаем максимальный уровень расчета
		МаксУровеньРасчетаПоказателей = Макс(МаксУровеньРасчета,МаксУровеньРасчетаПоказателей);
		
		Для Каждого СтрОперанд Из тОперандыТекущегоПоказателя Цикл
			
			// Запоминаем максимальный уровень ручных расчетов
			Если Не ТекущийПериод ИЛИ СтрОперанд.ВариантРасчета = 1 Тогда
				МаксУровеньРучныхРасчетов = Макс(МаксУровеньРасчета, МаксУровеньРучныхРасчетов);
			КонецЕсли;
			
			// Добавляем в таблицу операндов
			нСтр 							= тПоказателиОперанды.Добавить();
			ЗаполнитьЗначенияСвойств(нСтр, СтрОперанд);
			нСтр.ИсточникДанныхДляРасчетов	= СтрОперанд.Ссылка;
			нСтр.Потребитель 				= СтрОперанд.ПотребительРасчета;
			нСтр.ПоказательОперанд  		= СтрОперанд.ПоказательОтбор;
			нСтр.УровеньРасчетаПотребителя 	= МаксУровеньРасчета;
			нСтр.УровеньРасчетаОперанда 	= СтрОперанд.УровеньОперанда;
			нСтр.КодВФормуле         		= СтрОперанд.Код;
			нСтр.ТекущийПериод				= ТекущийПериод;
			нСтр.ТипПотребителя				= СтрОперанд.ТипЗначения;
			нСтр.ТипПоказателя				= СтрОперанд.ТипЗначенияПоказателя;
			
			нСтр.ЭтоОперандТекущегоПериода 	= мПоказателиСоСдвигомПоПериоду.Найти(нСтр.ПоказательОперанд) = Неопределено;
			
			Если ЕстьДополненияАналитик Тогда
				Если СтрНайти(нСтр.Процедура, нСтр.КодВФормуле) = 0 Тогда
					// Операнд только для дополнения аналитик
					нСтр.ДляДополненияАналитик = Истина;
				КонецЕсли;
			КонецЕсли; 
			
			// Заполним данные для пересчета значений в валюты
			Если Не СтрОперанд.НеФинансовый Тогда
				Если СтрОперанд.ВидКурса = Перечисления.ВидыКурсов.ЗначениеУказанноеВДокументе Тогда
					ЕстьВидКурсаЗначениеУказанноеВДокументе = Истина;
				ИначеЕсли СтрОперанд.ВидКурса = Перечисления.ВидыКурсов.КурсНаМоментНачисления Тогда
					ЕстьВидКурсаКурсНаМоментНачисления = Истина;
				Иначе
					ЕстьВидКурсаПрочее = Истина;
				КонецЕсли;
			КонецЕсли;
			
			// Строим таблицу отбора показателей, с учетом хеша
			тТекущихПараметровОтбораБД = тПараметрыОтбораБД.Скопировать(Новый Структура("Ссылка",СтрОперанд.Ссылка));
		
			Если СтрОперанд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления 
			    Или СтрОперанд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии 
			    Или СтрОперанд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений 
				Или СтрОперанд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеСправочники
				Или СтрОперанд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос Тогда
				
				// Данные из внутренних источников
				МаксУИДГруппыОтборов = МаксУИДГруппыОтборов + 1;
				нСтр.УИДГруппыОтборов = МаксУИДГруппыОтборов;
				
				тТекущихПравилИспользованияПолейЗапроса = тПравилаИспользованияПолейЗапроса.Скопировать(Новый Структура("Ссылка",СтрОперанд.Ссылка));

				ТекстЗапроса = "";
				Если СтрОперанд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос Тогда
					Если СтрОперанд.ИспользоватьМногопериодныйКонтекст Тогда
						// Режим использования многопериодного контекста
						ТекстЗапроса = СтрОперанд.ТекстЗапросаМодуля;
					Иначе
						// Режим выполнения запросов в цикле
						СформироватьДанныеДляРасчетаКлассическимДвижкомРасчета(
							тПроизвольныеЗапросы,
							СтрОперанд,
							тТекущихПравилИспользованияПолейЗапроса,
							тТекущихПараметровОтбораБД,
							ДанныеВидаОтчета.МаксКлючевыхАналитик);
						Продолжить;
					КонецЕсли;
				ИначеЕсли СтрОперанд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
					Если Не ЗначениеЗаполнено(СтрОперанд.Счет) Тогда
						// Не указан счет-ссылка
						Продолжить;
					КонецЕсли;
				КонецЕсли;
					
				нСтрокаТаблицы = тВнутренниеДанные.Добавить();
				ЗаполнитьЗначенияСвойств(нСтрокаТаблицы, СтрОперанд);
				нСтрокаТаблицы.ХешОтбораПоказателей = ПолучитьХешПоОтборам(тТекущихПараметровОтбораБД);
				нСтрокаТаблицы.ТекстЗапроса = ТекстЗапроса;				
				нСтрокаТаблицы.Показатель = СтрОперанд.ПотребительРасчета;
				нСтрокаТаблицы.КорреспонденцияСчетов = ЗначениеЗаполнено(нСтрокаТаблицы.КоррСчет);
				нСтрокаТаблицы.ТаблицаПараметровОтбораБД = тТекущихПараметровОтбораБД;
				нСтрокаТаблицы.ПравилаИспользованияПолейЗапроса = тТекущихПравилИспользованияПолейЗапроса; 
				нСтрокаТаблицы.ТипЗначения = СтрОперанд.ТипЗначенияПоказателя;
				
			ИначеЕсли СтрОперанд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
				Или СтрОперанд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
				Или СтрОперанд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений
				Или СтрОперанд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники
				Или СтрОперанд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос
				Или СтрОперанд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO Тогда
				
				// Данные из внешних источников
				МаксУИДГруппыОтборов = МаксУИДГруппыОтборов + 1;
				нСтр.УИДГруппыОтборов = МаксУИДГруппыОтборов;
				
				ЕстьИспользованиеВнешнихДанных = Истина;
		
			ИначеЕсли СтрОперанд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ПустаяСсылка() Тогда
				
				// Это операнд с произвольным кодом без источников данных для расчета
				
				МаксУИДГруппыОтборов = МаксУИДГруппыОтборов + 1;
				нСтр.УИДГруппыОтборов = МаксУИДГруппыОтборов;
				
				нСтрокаТаблицы = тПроизвольныйКод.Добавить();				
				нСтрокаТаблицы.Показатель = СтрОперанд.ПотребительРасчета;
				нСтрокаТаблицы.Процедура = СтрОперанд.Процедура;
				нСтрокаТаблицы.ТипЗначения = СтрОперанд.ТипЗначения;
				
			Иначе	
				
				// Данные из значений показателей других отчетов
				
				нСтрКэш 				= тКэшИменПоказателей.Добавить();
				нСтрКэш.КодВФормуле 	= СтрОперанд.Код;
				нСтрКэш.Показатель 		= СтрОперанд.ПоказательОтбор;
		        нСтрКэш.УровеньРасчета  = СтрОперанд.УровеньОперанда;
				нСтрКэш.ВидОтчета       = СтрОперанд.ВидОтчетаПоказателя;
				
				нСтрКэш.УИДГруппыОтборов = ПолучитьУИДДляПоказателя(тТекущихПараметровОтбораБД,
					СтрОперанд.ИндексРегистраОперанда,
					тКэшГруппОтборовПоказателей,
					МаксУИДГруппыОтборов,
					тРасшифровкаГруппОтборов,
					ТекущийПериод);
					
				нСтр.УИДГруппыОтборов = нСтрКэш.УИДГруппыОтборов;
				
				// Добавим еще раз операнд в первый уровень для расчета рекурсивно-зависимых по периоду показателей
				// Если потребитель со смещением периода, а показатель - нет. 
				Если НЕ СтрОперанд.ПоказательТекущегоОтчета
					И НЕ ТекущийПериод
					И НЕ ЕстьПоказательНеТекущегоОтчета
					И МаксУровеньРасчета > 1
					И мПоказателиСоСдвигомПоПериоду.Найти(СтрОперанд.ПоказательОтбор) = Неопределено Тогда
					
					ДопСтрока = тПоказателиОперанды.Добавить();
					ЗаполнитьЗначенияСвойств(ДопСтрока, нСтр);
					ДопСтрока.УровеньРасчетаПотребителя = 1;
					ДопСтрока.УровеньРасчетаОперанда = 1;
					ДопСтрока.ТекущийПериод = Истина;
					ДопСтрока.ВременныйРасчет = Истина;
					ДопСтрока.Процедура = ДопСтрока.КодВФормуле;
					ДопСтрока.ВариантРасчета = 2;	
					мУровниСВременнымРасчетом.Добавить(1);
						
					ДопСтрКэш = тКэшИменПоказателей.Добавить();
					ЗаполнитьЗначенияСвойств(ДопСтрКэш, нСтрКэш);
			        ДопСтрКэш.УровеньРасчета = 1; 
			
				КонецЕсли;
					
			КонецЕсли;
				
		КонецЦикла;	
	
	КонецЦикла;
	
	Если ЕстьИспользованиеВнешнихДанных Тогда
		// Добавим параметры для получения значений из внешних данных
		ЗаполнитьТаблицуВнешнихДанных(тВнешниеДанные, ПравилоОбработки);
	КонецЕсли;

	// Зададим текст трансформации полей
	ОпределитьПравилаТрансформацииПолей(
		тПоказателиОперанды,
		тПравилаИспользованияПолейЗапроса,
		тИспользуемыеАналитики,
		ДанныеВидаОтчета.МаксКлючевыхАналитик,
		мУровниСВременнымРасчетом,
		МаксУровеньРасчетаПоказателей);
		
	// Подготовим структуру для дальнейшего построения текстов запросов
	СтруктураРасчетаПоказателей = ПолучитьСтруктуруРасчетаПоказателей();
	СтруктураРасчетаПоказателей.Вставить("глТаблицаПересчетаПоказателей", глТаблицаПересчетаПоказателей);
	
	СтруктураРасчетаПоказателей.Вставить("тВнутренниеДанные", тВнутренниеДанные);
	СтруктураРасчетаПоказателей.Вставить("тСчетаСИерархией", тСчетаСИерархией);
	СтруктураРасчетаПоказателей.Вставить("тПроизвольныйКод", тПроизвольныйКод);
	СтруктураРасчетаПоказателей.Вставить("тПроизвольныеЗапросы", тПроизвольныеЗапросы);
	СтруктураРасчетаПоказателей.Вставить("тВнешниеДанные", тВнешниеДанные);
	
	СтруктураРасчетаПоказателей.Вставить("тПоказателиОперанды", тПоказателиОперанды);
	СтруктураРасчетаПоказателей.Вставить("тИспользуемыеАналитики", тИспользуемыеАналитики);
	СтруктураРасчетаПоказателей.Вставить("тИспользуемыеРесурсы", тИспользуемыеРесурсы);
	
	СтруктураРасчетаПоказателей.Вставить("тРасшифровкаГруппОтборов", тРасшифровкаГруппОтборов);
	СтруктураРасчетаПоказателей.Вставить("тКэшИменПоказателей", тКэшИменПоказателей);
	СтруктураРасчетаПоказателей.Вставить("тКэшГруппОтборовПоказателей", тКэшГруппОтборовПоказателей);		
	
	СтруктураРасчетаПоказателей.Вставить("ДанныеВидаОтчета", ДанныеВидаОтчета);
	СтруктураРасчетаПоказателей.Вставить("МаксКлючевыхАналитик", ДанныеВидаОтчета.МаксКлючевыхАналитик); 
	СтруктураРасчетаПоказателей.Вставить("МаксИспользуемыхАналитик", ДанныеВидаОтчета.МаксАналитикПоказателя + ДанныеВидаОтчета.МаксКлючевыхАналитик);
	СтруктураРасчетаПоказателей.Вставить("МаксУровеньРасчета", МаксУровеньРасчетаПоказателей);
	СтруктураРасчетаПоказателей.Вставить("МаксУровеньРучныхРасчетов", МаксУровеньРучныхРасчетов);
	СтруктураРасчетаПоказателей.Вставить("УровниСВременнымРасчетом", мУровниСВременнымРасчетом);
	СтруктураРасчетаПоказателей.Вставить("ЕстьДополненияАналитик", мИсточникиСДополнениемАналитик.Количество()>0);
	
	// Определим настройки валютной аналитики
	тАналитикиВалюта = тИспользуемыеАналитики.НайтиСтроки(Новый Структура("Поле","АналитикаВалюта"));
	Для Каждого СтрокаТаблицы ИЗ тАналитикиВалюта Цикл
		Если СтрокаТаблицы.УровеньРасчета <> 0 Тогда
			СтруктураРасчетаПоказателей.Вставить("ЕстьАналитикаВалюта", Истина); 	
			СтруктураРасчетаПоказателей.Вставить("ЕстьЗначениеВалюта", тПоказателиОперанды.НайтиСтроки(Новый Структура("ПересчитыватьВалютнуюСумму", Истина)).Количество() > 0);
			Прервать;
		КонецЕсли;
	КонецЦикла;

	СтруктураРасчетаПоказателей.Вставить("ЕстьВидКурсаЗначениеУказанноеВДокументе", ЕстьВидКурсаЗначениеУказанноеВДокументе);
	СтруктураРасчетаПоказателей.Вставить("ЕстьВидКурсаКурсНаМоментНачисления", ЕстьВидКурсаКурсНаМоментНачисления);
	СтруктураРасчетаПоказателей.Вставить("ЕстьВидКурсаПрочее", ЕстьВидКурсаПрочее);
	
	// Подготовим поля и ресурсы исходных таблиц для каждого уровня расчета
	ПодготовитьПоляВыборкиЗапроса(СтруктураРасчетаПоказателей);
	
	ИтоговыеРесурсы = тИспользуемыеРесурсы.Скопировать(Новый Структура("ВыводитсяВОтчет",Истина));
	СтруктураРасчетаПоказателей.Вставить("ЕстьЗначение", ИтоговыеРесурсы.Найти("Значение","Поле") <> Неопределено);
	СтруктураРасчетаПоказателей.Вставить("ЕстьЗначениеНечисловое", ИтоговыеРесурсы.Найти("ЗначениеНечисловое","Поле") <> Неопределено);
	
	Возврат СтруктураРасчетаПоказателей;
		
КонецФункции

Функция ПолучитьОписаниеСлужебныхТаблиц()
	
	ОписаниеТиповБулево 	= ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево();
	ОписаниеТиповЧисло5Н 	= ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5,0,ДопустимыйЗнак.Неотрицательный);
	ОписаниеТиповЧисло2     = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(2,0,ДопустимыйЗнак.Любой);
	
	глТаблицаПересчетаПоказателей = Новый ТаблицаЗначений;
	глТаблицаПересчетаПоказателей.Колонки.Добавить("КомментарийКПакету");
	глТаблицаПересчетаПоказателей.Колонки.Добавить("ВидОперацииРасчета");
	глТаблицаПересчетаПоказателей.Колонки.Добавить("ТекстПодзапросов");
	глТаблицаПересчетаПоказателей.Колонки.Добавить("тПараметрыПакета");
	глТаблицаПересчетаПоказателей.Колонки.Добавить("ВыгружатьРезультатВТаблицу",ОписаниеТиповБулево);
	глТаблицаПересчетаПоказателей.Колонки.Добавить("УровеньРасчета",ОписаниеТиповЧисло5Н);
	
	тРасшифровкаГруппОтборов = Новый ТаблицаЗначений;
	тРасшифровкаГруппОтборов.Колонки.Добавить("ПоказательОперанд");
	тРасшифровкаГруппОтборов.Колонки.Добавить("КодВФормуле");
	тРасшифровкаГруппОтборов.Колонки.Добавить("ПолеБД");
	тРасшифровкаГруппОтборов.Колонки.Добавить("СпособВычисленияПараметра");
	тРасшифровкаГруппОтборов.Колонки.Добавить("УточнениеСпособаОпределения");
	тРасшифровкаГруппОтборов.Колонки.Добавить("ИдентификаторСтроки");
	тРасшифровкаГруппОтборов.Колонки.Добавить("ИдентификаторРодителя");
	тРасшифровкаГруппОтборов.Колонки.Добавить("ТекстМодуля");
	тРасшифровкаГруппОтборов.Колонки.Добавить("УИДГруппыОтборов",ОписаниеТиповЧисло5Н);
	тРасшифровкаГруппОтборов.Колонки.Добавить("ВключаетсяВПоля",ОписаниеТиповБулево);
	тРасшифровкаГруппОтборов.Колонки.Добавить("УровеньРасчета",ОписаниеТиповЧисло5Н);
	тРасшифровкаГруппОтборов.Колонки.Добавить("ТипЗначенияАналитики");
	
	тВнешниеДанные = Новый ТаблицаЗначений;
	тВнешниеДанные.Колонки.Добавить("ТаблицаОперандов");
	тВнешниеДанные.Колонки.Добавить("ПоказательОтбор");
	тВнешниеДанные.Колонки.Добавить("ГруппаРаскрытияОтбор");
	тВнешниеДанные.Колонки.Добавить("ГруппаРаскрытия", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ГруппыРаскрытия"));
	тВнешниеДанные.Колонки.Добавить("ПравилаВычисленияПараметров");
	тВнешниеДанные.Колонки.Добавить("ТабПравилаИспользованияПолей");
	тВнешниеДанные.Колонки.Добавить("ТекстЗапроса");
	тВнешниеДанные.Колонки.Добавить("РегистрБД");
	тВнешниеДанные.Колонки.Добавить("ТаблицаADO");
	тВнешниеДанные.Колонки.Добавить("ТипБД");
	тВнешниеДанные.Колонки.Добавить("ПланСчетов");
	тВнешниеДанные.Колонки.Добавить("СпособПолучения");
	тВнешниеДанные.Колонки.Добавить("ТолькоАналитическиеЗначения", ОписаниеТиповБулево);
	тВнешниеДанные.Колонки.Добавить("ПроизвольныйЗапрос", ОписаниеТиповБулево);
	тВнешниеДанные.Колонки.Добавить("ПоказательТекущегоОтчета", ОписаниеТиповБулево);
	тВнешниеДанные.Колонки.Добавить("СтруктураПараметров");
	тВнешниеДанные.Колонки.Добавить("СтруктураЗапроса");
	тВнешниеДанные.Колонки.Добавить("ВалютнаяСумма", ОписаниеТиповБулево);
	тВнешниеДанные.Колонки.Добавить("АналитикВидаОтчета", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1,0));
	
	тВнутренниеДанные = Новый ТаблицаЗначений;
	тВнутренниеДанные.Колонки.Добавить("СпособПолучения");
	тВнутренниеДанные.Колонки.Добавить("РегистрБД");
	тВнутренниеДанные.Колонки.Добавить("ОсновнаяТаблицаРегистра");
	тВнутренниеДанные.Колонки.Добавить("ВидСреза");
	тВнутренниеДанные.Колонки.Добавить("КорреспонденцияСчетов");
	тВнутренниеДанные.Колонки.Добавить("ХешОтбораПоказателей");
	тВнутренниеДанные.Колонки.Добавить("ОбъектБД");
	тВнутренниеДанные.Колонки.Добавить("ТабличнаяЧастьБД");
	тВнутренниеДанные.Колонки.Добавить("ТекстЗапроса");
	тВнутренниеДанные.Колонки.Добавить("ТаблицаПараметровОтбораБД");
	тВнутренниеДанные.Колонки.Добавить("Показатель");
	тВнутренниеДанные.Колонки.Добавить("Код");	
	тВнутренниеДанные.Колонки.Добавить("ТипЗначения");
	тВнутренниеДанные.Колонки.Добавить("ПравилаИспользованияПолейЗапроса"); 
	тВнутренниеДанные.Колонки.Добавить("РесурсРегистра");		 
	тВнутренниеДанные.Колонки.Добавить("Счет");				 
	тВнутренниеДанные.Колонки.Добавить("КоррСчет");
	
	тПроизвольныйКод = Новый ТаблицаЗначений;
	тПроизвольныйКод.Колонки.Добавить("Показатель");
	тПроизвольныйКод.Колонки.Добавить("ТипЗначения");
	тПроизвольныйКод.Колонки.Добавить("Процедура");
	
	тПоказателиОперанды = Новый ТаблицаЗначений;
	тПоказателиОперанды.Колонки.Добавить("ИсточникДанныхДляРасчетов",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ИсточникиДанныхДляРасчетов"));
	тПоказателиОперанды.Колонки.Добавить("Потребитель",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОтчетов"));
	тПоказателиОперанды.Колонки.Добавить("ПоказательОперанд",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОтчетов"));
	тПоказателиОперанды.Колонки.Добавить("УровеньРасчетаПотребителя",ОписаниеТиповЧисло5Н);
	тПоказателиОперанды.Колонки.Добавить("УровеньРасчетаОперанда",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(4,0));
	тПоказателиОперанды.Колонки.Добавить("КодВФормуле",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(1024));
	тПоказателиОперанды.Колонки.Добавить("ТекущийПериод",ОписаниеТиповБулево);
	тПоказателиОперанды.Колонки.Добавить("ТипПотребителя",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ТипыЗначенийПоказателейОтчетов"));
	тПоказателиОперанды.Колонки.Добавить("ТипПоказателя",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ТипыЗначенийПоказателейОтчетов"));
	тПоказателиОперанды.Колонки.Добавить("УИДГруппыОтборов",ОписаниеТиповЧисло5Н);
	тПоказателиОперанды.Колонки.Добавить("ТрансформацияПолей",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
	тПоказателиОперанды.Колонки.Добавить("ИндексРегистраОперанда",ОписаниеТиповЧисло2);
	тПоказателиОперанды.Колонки.Добавить("ИндексРегистраПотребителя",ОписаниеТиповЧисло2);
	тПоказателиОперанды.Колонки.Добавить("ВариантРасчета",ОписаниеТиповЧисло5Н);
	тПоказателиОперанды.Колонки.Добавить("УИДГруппыТрансформации",ОписаниеТиповЧисло5Н);
	тПоказателиОперанды.Колонки.Добавить("ЭтоОперандТекущегоПериода",ОписаниеТиповБулево);
	тПоказателиОперанды.Колонки.Добавить("ДляДополненияАналитик",ОписаниеТиповБулево);
	тПоказателиОперанды.Колонки.Добавить("ВременныйРасчет",ОписаниеТиповБулево);
	тПоказателиОперанды.Колонки.Добавить("ВидОтчетаПоказателя",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ВидыОтчетов"));
	тПоказателиОперанды.Колонки.Добавить("СпособПолучения");
	тПоказателиОперанды.Колонки.Добавить("Процедура");
	тПоказателиОперанды.Колонки.Добавить("ПересчитыватьВалютнуюСумму",ОписаниеТиповБулево);
	тПоказателиОперанды.Колонки.Добавить("ЧислоАналитик",ОписаниеТиповЧисло2);
	тПоказателиОперанды.Колонки.Добавить("ЕстьАналитикаВалюта",ОписаниеТиповБулево);
	тПоказателиОперанды.Колонки.Добавить("ВидИтога",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ВидыИтоговПоказателя"));
	тПоказателиОперанды.Колонки.Добавить("ВидИтогаПоПериоду",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ВидыИтоговПоказателяПоПериоду"));
	тПоказателиОперанды.Колонки.Добавить("ПотребительПредставление");
	тПоказателиОперанды.Колонки.Добавить("ВидОтчетаПотребителя");
	тПоказателиОперанды.Колонки.Добавить("ВидОтчетаПотребителяПредставление");
	
	тКэшИменПоказателей = Новый ТаблицаЗначений;
	тКэшИменПоказателей.Колонки.Добавить("Показатель",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОтчетов"));
	тКэшИменПоказателей.Колонки.Добавить("ВидОтчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ВидыОтчетов"));
	тКэшИменПоказателей.Колонки.Добавить("УровеньРасчета",ОписаниеТиповЧисло5Н);
	тКэшИменПоказателей.Колонки.Добавить("КодВФормуле",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(1024));
	тКэшИменПоказателей.Колонки.Добавить("УИДГруппыОтборов",ОписаниеТиповЧисло5Н);
	
	тКэшГруппОтборовПоказателей = Новый ТаблицаЗначений;
	тКэшГруппОтборовПоказателей.Колонки.Добавить("ХешГруппыОтборов");
	тКэшГруппОтборовПоказателей.Колонки.Добавить("ИндексРегистра",ОписаниеТиповЧисло2);
	тКэшГруппОтборовПоказателей.Колонки.Добавить("УИДГруппыОтборов",ОписаниеТиповЧисло5Н);
	тКэшГруппОтборовПоказателей.Колонки.Добавить("ЭтоАналитикаВерсии",ОписаниеТиповБулево);
	тКэшГруппОтборовПоказателей.Колонки.Добавить("ТекущийПериод",ОписаниеТиповБулево);
	
	тИспользуемыеАналитики = Новый ТаблицаЗначений;
	тИспользуемыеАналитики.Колонки.Добавить("УровеньРасчета",ОписаниеТиповЧисло5Н);
	тИспользуемыеАналитики.Колонки.Добавить("Поле",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	тИспользуемыеАналитики.Колонки.Добавить("ПолеТрансформации",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	тИспользуемыеАналитики.Колонки.Добавить("ПолеВерсии",ОписаниеТиповБулево);
	тИспользуемыеАналитики.Колонки.Добавить("Операнды");
	
	тИспользуемыеРесурсы = Новый ТаблицаЗначений;
	тИспользуемыеРесурсы.Колонки.Добавить("УровеньРасчета",ОписаниеТиповЧисло5Н);
	тИспользуемыеРесурсы.Колонки.Добавить("Поле",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	тИспользуемыеРесурсы.Колонки.Добавить("Суммируется",ОписаниеТиповБулево); 
	тИспользуемыеРесурсы.Колонки.Добавить("ВыводитсяВОтчет",ОписаниеТиповБулево);
	
	тСлужебныеТаблицы = Новый Структура;
	тСлужебныеТаблицы.Вставить("глТаблицаПересчетаПоказателей",глТаблицаПересчетаПоказателей);
	тСлужебныеТаблицы.Вставить("тРасшифровкаГруппОтборов",тРасшифровкаГруппОтборов);
	тСлужебныеТаблицы.Вставить("тВнешниеДанные",тВнешниеДанные);
	тСлужебныеТаблицы.Вставить("тВнутренниеДанные",тВнутренниеДанные);
	тСлужебныеТаблицы.Вставить("тПроизвольныйКод",тПроизвольныйКод);
	тСлужебныеТаблицы.Вставить("тПоказателиОперанды",тПоказателиОперанды);
    тСлужебныеТаблицы.Вставить("тКэшИменПоказателей",тКэшИменПоказателей);
    тСлужебныеТаблицы.Вставить("тКэшГруппОтборовПоказателей",тКэшГруппОтборовПоказателей);
	тСлужебныеТаблицы.Вставить("тИспользуемыеАналитики",тИспользуемыеАналитики);
	тСлужебныеТаблицы.Вставить("тИспользуемыеРесурсы",тИспользуемыеРесурсы);	
		
	Возврат тСлужебныеТаблицы; 
	
КонецФункции	

Функция ПолучитьСтруктуруРасчетаПоказателей()

	СтруктураРасчетаПоказателей = Новый Структура;
	СтруктураРасчетаПоказателей.Вставить("глТаблицаПересчетаПоказателей", Неопределено);
	
	СтруктураРасчетаПоказателей.Вставить("тВнутренниеДанные", Неопределено);
	СтруктураРасчетаПоказателей.Вставить("тСчетаСИерархией", Неопределено);
	СтруктураРасчетаПоказателей.Вставить("тПроизвольныйКод", Неопределено);
	СтруктураРасчетаПоказателей.Вставить("тПроизвольныеЗапросы", Неопределено);
	СтруктураРасчетаПоказателей.Вставить("тВнешниеДанные", Неопределено);
	
	СтруктураРасчетаПоказателей.Вставить("тПоказателиОперанды", Неопределено);
	СтруктураРасчетаПоказателей.Вставить("тИспользуемыеАналитики", Неопределено);
	СтруктураРасчетаПоказателей.Вставить("тИспользуемыеРесурсы", Неопределено);
	
	СтруктураРасчетаПоказателей.Вставить("тРасшифровкаГруппОтборов", Неопределено);
	СтруктураРасчетаПоказателей.Вставить("тКэшИменПоказателей", Неопределено);
	СтруктураРасчетаПоказателей.Вставить("тКэшГруппОтборовПоказателей", Неопределено);		
	
	СтруктураРасчетаПоказателей.Вставить("ДанныеВидаОтчета", Новый Структура);
	СтруктураРасчетаПоказателей.Вставить("МаксКлючевыхАналитик", 0); 
	СтруктураРасчетаПоказателей.Вставить("МаксИспользуемыхАналитик", 0);
	СтруктураРасчетаПоказателей.Вставить("МаксУровеньРасчета", 0);
	СтруктураРасчетаПоказателей.Вставить("МаксУровеньРучныхРасчетов", 0);
	
	СтруктураРасчетаПоказателей.Вставить("УровниСВременнымРасчетом", Новый Массив);
	СтруктураРасчетаПоказателей.Вставить("ЕстьДополненияАналитик", Ложь);
	
	СтруктураРасчетаПоказателей.Вставить("ЕстьДополненияАналитик", Ложь);
	
	СтруктураРасчетаПоказателей.Вставить("ЕстьАналитикаВалюта", Ложь);
	СтруктураРасчетаПоказателей.Вставить("ЕстьЗначениеВалюта", Ложь);

	СтруктураРасчетаПоказателей.Вставить("ЕстьВидКурсаЗначениеУказанноеВДокументе", Ложь);
	СтруктураРасчетаПоказателей.Вставить("ЕстьВидКурсаКурсНаМоментНачисления", Ложь);
	СтруктураРасчетаПоказателей.Вставить("ЕстьВидКурсаПрочее", Ложь);
	
	СтруктураРасчетаПоказателей.Вставить("ЕстьЗначение", Ложь);
	СтруктураРасчетаПоказателей.Вставить("ЕстьЗначениеНечисловое", Ложь);
	
	СтруктураРасчетаПоказателей.Вставить("РасчетПоИзмененнымПоказателям", Ложь);
	СтруктураРасчетаПоказателей.Вставить("ПолучатьДанныеИзРегистров", Истина);
	
	Возврат СтруктураРасчетаПоказателей;
			
КонецФункции

Процедура ДобавитьЗависимыеПоказателиРекурсивно(тПотребители, тДанныеДляРасчетов, стрПоказатель, ПоказательДляПоиска)
	
	НайденныеСтроки = тДанныеДляРасчетов.НайтиСтроки(Новый Структура("ПоказательОтбор", ПоказательДляПоиска));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Показатель",НайденнаяСтрока.ПотребительРасчета);
		Для Сч = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			СтруктураПоиска.Вставить("Аналитика" + Сч, стрПоказатель["Аналитика" + Сч]);
		КонецЦикла;	
		Если тПотребители.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			НСтрокаТаблицы = тПотребители.Добавить();
			ЗаполнитьЗначенияСвойств(НСтрокаТаблицы, стрПоказатель);
			НСтрокаТаблицы.Показатель = НайденнаяСтрока.ПотребительРасчета;
			ДобавитьЗависимыеПоказателиРекурсивно(тПотребители, тДанныеДляРасчетов, стрПоказатель, НайденнаяСтрока.ПотребительРасчета);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтфильтроватьПоИзмененнымПоказателям(ДанныеДляРасчета, тИзмененныеПоказатели)	
	
	Если тИзмененныеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	тДанныеДляРасчетов = ДанныеДляРасчета.тДанныеДляРасчетов;
	тДанныеДляРасчетовНовая = тДанныеДляРасчетов.СкопироватьКолонки();
	тПараметрыОтбораБДНовая = ДанныеДляРасчета.тПараметрыОтбораБД.Скопировать();
	тПравилаИспользованияПолейЗапроса = ДанныеДляРасчета.тПравилаИспользованияПолейЗапроса;
	
	СтруктураСложныхОтборов = Новый Структура;
	
	тПотребители = Новый ТаблицаЗначений;
	тПотребители.Колонки.Добавить("Показатель");
	тПотребители.Колонки.Добавить("АналитикаВалюта");
	Для Сч = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		тПотребители.Колонки.Добавить("Аналитика" + Сч);
	КонецЦикла;
	Для Каждого стрПоказатель Из тИзмененныеПоказатели Цикл
		ДобавитьЗависимыеПоказателиРекурсивно(тПотребители, тДанныеДляРасчетов, стрПоказатель, стрПоказатель.Показатель);
	КонецЦикла;
	
	тРазличныеПотребители = тПотребители.Скопировать(,"Показатель");
	тРазличныеПотребители.Свернуть("Показатель");
	
	// Оставим только полученных потребителей	
	Для Каждого стрПотребитель Из тРазличныеПотребители Цикл
		НайденныеПотребители = тДанныеДляРасчетов.НайтиСтроки(Новый Структура("ПотребительРасчета", стрПотребитель.Показатель));
		Для Каждого СтрНайденныйПотребитель Из НайденныеПотребители Цикл
			
			//	Добавляем строку потребителя в таблицу для расчета
			НСтрока = тДанныеДляРасчетовНовая.Добавить();
			ЗаполнитьЗначенияСвойств(НСтрока, СтрНайденныйПотребитель);
			
			// Добавим в таблицу потребителей для формирования отборов
			НайденныеСтроки = тПотребители.НайтиСтроки(Новый Структура("Показатель",стрПотребитель.Показатель));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НСтрока = тПотребители.Добавить();
				ЗаполнитьЗначенияСвойств(НСтрока, НайденнаяСтрока);
				НСтрока.Показатель = СтрНайденныйПотребитель.ПоказательОтбор;
			КонецЦикла;
		
			// Проверим наличие сложных отборов по аналитикам
			Для Сч = 0 По СтрНайденныйПотребитель.ЧислоАналитикПоказателя Цикл
				
				Если Сч = 0 Тогда
					Если СтрНайденныйПотребитель.ЕстьАналитикаВалютаПоказателя Тогда
						ИмяОтбора = "АналитикаВалюта";
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					ИмяОтбора = "Аналитика" + Строка(Сч + СтрНайденныйПотребитель.МаксКлючевыхАналитикПоказателя);
				КонецЕсли;
				
				Если СтруктураСложныхОтборов.Свойство(ИмяОтбора) Тогда
					// Отбор уже определен, как сложный
					Продолжить;
				КонецЕсли;
				
				Если СтрНайденныйПотребитель.ЧислоАналитикПоказателя <> СтрНайденныйПотребитель.ЧислоАналитик Тогда
					// Есть трансформация аналитик, отборы не устанавливаем
					СтруктураСложныхОтборов.Вставить(ИмяОтбора);
					Продолжить;
				КонецЕсли;
				
				// Найдем правила заполнения аналитик
				ПравилаТрансформации = тПравилаИспользованияПолейЗапроса.НайтиСтроки(Новый Структура("Ссылка,Поле", СтрНайденныйПотребитель.Ссылка, ИмяОтбора));
				Если ПравилаТрансформации.Количество() <> 1 Тогда
					// Нет правил трансформации
					СтруктураСложныхОтборов.Вставить(ИмяОтбора);
					Продолжить;
				КонецЕсли;
				
				ПравилоТрансформации = ПравилаТрансформации.Получить(0);
				Если ПравилоТрансформации.СпособЗаполнения <> Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы
					ИЛИ ПравилоТрансформации.КодАналитики <> ИмяОтбора Тогда
					// Нестандартные правила трансформации
					СтруктураСложныхОтборов.Вставить(ИмяОтбора);
					Продолжить;
				КонецЕсли;				
								
				// Ищем отборы по аналитикам 
				СтрокиОтбора = тПараметрыОтбораБДНовая.НайтиСтроки(Новый Структура("Ссылка,ПолеБД", СтрНайденныйПотребитель.Ссылка, ИмяОтбора));
				Если СтрокиОтбора.Количество() <> 0 Тогда
					// Уже задан отбор по аналитике
					СтруктураСложныхОтборов.Вставить(ИмяОтбора);
				КонецЕсли;

			КонецЦикла;
	
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрПотребитель Из тДанныеДляРасчетовНовая Цикл

		// Добавим отборы по аналитикам, если в дереве расчета нет сложных отборов
		Для Сч = 0 По СтрПотребитель.ЧислоАналитикПоказателя Цикл
			
			Если Сч = 0 Тогда
				Если СтрПотребитель.ЕстьАналитикаВалютаПоказателя Тогда
					ИмяОтбора = "АналитикаВалюта";
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				ИмяОтбора = "Аналитика" + Строка(Сч + СтрПотребитель.МаксКлючевыхАналитикПоказателя);
			КонецЕсли;
			
			Если СтруктураСложныхОтборов.Свойство(ИмяОтбора) Тогда
				// По этой аналитике есть сложный отбор
				Продолжить;
			КонецЕсли;
			
			// Установим отбор по аналитике
			стрОтбор = тПараметрыОтбораБДНовая.Добавить();
			стрОтбор.ИдентификаторРодителя 			= 0;
			стрОтбор.ИдентификаторСтроки 			= 1000 + Сч;
			стрОтбор.ИмяПараметра					= 1000 + Сч;
			стрОтбор.КодВФормуле 					= СтрПотребитель.Код;
			стрОтбор.ПоказательОперанд              = СтрПотребитель.ПоказательОтбор;
			стрОтбор.ПолеБД                         = ИмяОтбора;
			стрОтбор.Ссылка                         = СтрПотребитель.Ссылка;
			стрОтбор.ТекстМодуля                    = "";
			тТекущиеПотребители = тПотребители.Скопировать(Новый Структура("Показатель",СтрПотребитель.ПотребительРасчета));
			тТекущиеПотребители.Свернуть(ИмяОтбора);
			Если тТекущиеПотребители.Количество() = 1 Тогда 
				стрОтбор.СпособВычисленияПараметра 		= Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
				стрОтбор.УточнениеСпособаОпределения 	= тТекущиеПотребители[0][ИмяОтбора];
			Иначе				
				стрОтбор.СпособВычисленияПараметра 		= Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений;
				стрОтбор.УточнениеСпособаОпределения 	= тТекущиеПотребители.ВыгрузитьКолонку(ИмяОтбора);
			КонецЕсли;
	
		КонецЦикла;
		
	КонецЦикла;
	
	ДанныеДляРасчетаНовые = Новый Структура;
	Для Каждого КлючЗначение Из ДанныеДляРасчета Цикл
		Если КлючЗначение.Ключ = "тПараметрыОтбораБД" Тогда
			Значение = тПараметрыОтбораБДНовая;
		ИначеЕсли КлючЗначение.Ключ = "тДанныеДляРасчетов" Тогда
			Значение = тДанныеДляРасчетовНовая;
		Иначе
			Значение = КлючЗначение.Значение;
		КонецЕсли;
		ДанныеДляРасчетаНовые.Вставить(КлючЗначение.Ключ, Значение);	
	КонецЦикла;
	
	ДанныеДляРасчета = ДанныеДляРасчетаНовые;
	
КонецПроцедуры


Процедура ДобавитьВлияющиеПоказателиРекурсивно(тПотребители, тДанныеДляРасчетов, стрПоказатель, ПоказательДляПоиска)
	
	НайденныеСтроки = тДанныеДляРасчетов.НайтиСтроки(Новый Структура("ПотребительРасчета", ПоказательДляПоиска));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.ВидОтчетаПотребителя = НайденнаяСтрока.ВидОтчетаПоказателя Тогда
			// Оставляем показатели только текущего вида отчета
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Показатель",НайденнаяСтрока.ПоказательОтбор);
			Для Сч = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				СтруктураПоиска.Вставить("Аналитика" + Сч, стрПоказатель["Аналитика" + Сч]);
			КонецЦикла;	
			Если тПотребители.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				НСтрокаТаблицы = тПотребители.Добавить();
				ЗаполнитьЗначенияСвойств(НСтрокаТаблицы, стрПоказатель);
				НСтрокаТаблицы.Показатель = НайденнаяСтрока.ПоказательОтбор;
				ДобавитьВлияющиеПоказателиРекурсивно(тПотребители, тДанныеДляРасчетов, стрПоказатель, НайденнаяСтрока.ПоказательОтбор);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтфильтроватьПоЦелевымПоказателям(ДанныеДляРасчета, тЦелевыеПоказатели)	
	
	Если тЦелевыеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	тДанныеДляРасчетов = ДанныеДляРасчета.тДанныеДляРасчетов;
	тДанныеДляРасчетовНовая = тДанныеДляРасчетов.СкопироватьКолонки();
	тПараметрыОтбораБДНовая = ДанныеДляРасчета.тПараметрыОтбораБД.Скопировать();
	тПравилаИспользованияПолейЗапроса = ДанныеДляРасчета.тПравилаИспользованияПолейЗапроса;
	
	СтруктураСложныхОтборов = Новый Структура;
	
	тПотребители = Новый ТаблицаЗначений;
	тПотребители.Колонки.Добавить("Показатель");
	тПотребители.Колонки.Добавить("АналитикаВалюта");
	Для Сч = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		тПотребители.Колонки.Добавить("Аналитика" + Сч);
	КонецЦикла;
	Для Каждого стрПоказатель Из тЦелевыеПоказатели Цикл
		НСтрокаТаблицы = тПотребители.Добавить();
		ЗаполнитьЗначенияСвойств(НСтрокаТаблицы, стрПоказатель);
		ДобавитьВлияющиеПоказателиРекурсивно(тПотребители, тДанныеДляРасчетов, стрПоказатель, стрПоказатель.Показатель);
	КонецЦикла;
	
	тРазличныеПотребители = тПотребители.Скопировать(,"Показатель");
	тРазличныеПотребители.Свернуть("Показатель");
	
	// Оставим только полученных потребителей	
	Для Каждого стрПотребитель Из тРазличныеПотребители Цикл
		НайденныеПотребители = тДанныеДляРасчетов.НайтиСтроки(
			Новый Структура("ПотребительРасчета, СпособПолучения", стрПотребитель.Показатель, Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета));  // Здесь отличие
		Для Каждого СтрНайденныйПотребитель Из НайденныеПотребители Цикл
			
			//	Добавляем строку потребителя в таблицу для расчета
			НСтрока = тДанныеДляРасчетовНовая.Добавить();
			ЗаполнитьЗначенияСвойств(НСтрока, СтрНайденныйПотребитель);
			
			// Добавим в таблицу потребителей для формирования отборов
			НайденныеСтроки = тПотребители.НайтиСтроки(Новый Структура("Показатель",стрПотребитель.Показатель));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НСтрока = тПотребители.Добавить();
				ЗаполнитьЗначенияСвойств(НСтрока, НайденнаяСтрока);
				НСтрока.Показатель = СтрНайденныйПотребитель.ПоказательОтбор;
			КонецЦикла;
		
			// Проверим наличие сложных отборов по аналитикам
			Для Сч = 0 По СтрНайденныйПотребитель.ЧислоАналитикПоказателя Цикл
				
				Если Сч = 0 Тогда
					Если СтрНайденныйПотребитель.ЕстьАналитикаВалютаПоказателя Тогда
						ИмяОтбора = "АналитикаВалюта";
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					ИмяОтбора = "Аналитика" + Строка(Сч + СтрНайденныйПотребитель.МаксКлючевыхАналитикПоказателя);
				КонецЕсли;
				
				Если СтруктураСложныхОтборов.Свойство(ИмяОтбора) Тогда
					// Отбор уже определен, как сложный
					Продолжить;
				КонецЕсли;
				
				Если СтрНайденныйПотребитель.ЧислоАналитикПоказателя <> СтрНайденныйПотребитель.ЧислоАналитик Тогда
					// Есть трансформация аналитик, отборы не устанавливаем
					СтруктураСложныхОтборов.Вставить(ИмяОтбора);
					Продолжить;
				КонецЕсли;
				
				// Найдем правила заполнения аналитик
				ПравилаТрансформации = тПравилаИспользованияПолейЗапроса.НайтиСтроки(Новый Структура("Ссылка,Поле", СтрНайденныйПотребитель.Ссылка, ИмяОтбора));
				Если ПравилаТрансформации.Количество() <> 1 Тогда
					// Нет правил трансформации
					СтруктураСложныхОтборов.Вставить(ИмяОтбора);
					Продолжить;
				КонецЕсли;
				
				ПравилоТрансформации = ПравилаТрансформации.Получить(0);
				Если ПравилоТрансформации.СпособЗаполнения <> Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы
					ИЛИ ПравилоТрансформации.КодАналитики <> ИмяОтбора Тогда
					// Нестандартные правила трансформации
					СтруктураСложныхОтборов.Вставить(ИмяОтбора);
					Продолжить;
				КонецЕсли;				
								
				// Ищем отборы по аналитикам 
				СтрокиОтбора = тПараметрыОтбораБДНовая.НайтиСтроки(Новый Структура("Ссылка,ПолеБД", СтрНайденныйПотребитель.Ссылка, ИмяОтбора));
				Если СтрокиОтбора.Количество() <> 0 Тогда
					// Уже задан отбор по аналитике
					СтруктураСложныхОтборов.Вставить(ИмяОтбора);
				КонецЕсли;

			КонецЦикла;
	
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрПотребитель Из тДанныеДляРасчетовНовая Цикл

		// Добавим отборы по аналитикам, если в дереве расчета нет сложных отборов
		Для Сч = 0 По СтрПотребитель.ЧислоАналитикПоказателя Цикл
			
			Если Сч = 0 Тогда
				Если СтрПотребитель.ЕстьАналитикаВалютаПоказателя Тогда
					ИмяОтбора = "АналитикаВалюта";
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				ИмяОтбора = "Аналитика" + Строка(Сч + СтрПотребитель.МаксКлючевыхАналитикПоказателя);
			КонецЕсли;
			
			Если СтруктураСложныхОтборов.Свойство(ИмяОтбора) Тогда
				// По этой аналитике есть сложный отбор
				Продолжить;
			КонецЕсли;
			
			// Установим отбор по аналитике
			стрОтбор = тПараметрыОтбораБДНовая.Добавить();
			стрОтбор.ИдентификаторРодителя 			= 0;
			стрОтбор.ИдентификаторСтроки 			= 1000 + Сч;
			стрОтбор.ИмяПараметра					= 1000 + Сч;
			стрОтбор.КодВФормуле 					= СтрПотребитель.Код;
			стрОтбор.ПоказательОперанд              = СтрПотребитель.ПоказательОтбор;
			стрОтбор.ПолеБД                         = ИмяОтбора;
			стрОтбор.Ссылка                         = СтрПотребитель.Ссылка;
			стрОтбор.ТекстМодуля                    = "";
			тТекущиеПотребители = тПотребители.Скопировать(Новый Структура("Показатель",СтрПотребитель.ПотребительРасчета));
			тТекущиеПотребители.Свернуть(ИмяОтбора);
			Если тТекущиеПотребители.Количество() = 1 Тогда 
				стрОтбор.СпособВычисленияПараметра 		= Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
				стрОтбор.УточнениеСпособаОпределения 	= тТекущиеПотребители[0][ИмяОтбора];
			Иначе				
				стрОтбор.СпособВычисленияПараметра 		= Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений;
				стрОтбор.УточнениеСпособаОпределения 	= тТекущиеПотребители.ВыгрузитьКолонку(ИмяОтбора);
			КонецЕсли;
	
		КонецЦикла;
		
	КонецЦикла;
	
	ДанныеДляРасчетаНовые = Новый Структура;
	Для Каждого КлючЗначение Из ДанныеДляРасчета Цикл
		Если КлючЗначение.Ключ = "тПараметрыОтбораБД" Тогда
			Значение = тПараметрыОтбораБДНовая;
		ИначеЕсли КлючЗначение.Ключ = "тДанныеДляРасчетов" Тогда
			Значение = тДанныеДляРасчетовНовая;
		Иначе
			Значение = КлючЗначение.Значение;
		КонецЕсли;
		ДанныеДляРасчетаНовые.Вставить(КлючЗначение.Ключ, Значение);	
	КонецЦикла;
	
	ДанныеДляРасчета = ДанныеДляРасчетаНовые;
	
КонецПроцедуры


Процедура ПолучитьУровеньРасчетаОперандаРекурсивно(
	дУровни,
	СтрокаОперанда,
	тДанныеДляРасчетов,
	мПоказателиСоСдвигомПоПериоду,
	СтрокаОперандаИсходная,
	тМаксимальныйУровень)
		
	тСтрокаДерева = дУровни.Строки.Добавить();	
	нУровень = тМаксимальныйУровень.Добавить();
	нУровень.тУровень = тСтрокаДерева.Уровень() + 1;

	Если СтрокаОперанда.ПоказательОтбор = СтрокаОперанда.ПотребительРасчета
		И мПоказателиСоСдвигомПоПериоду.Найти(СтрокаОперанда.ПоказательОтбор) = Неопределено Тогда
		СтрокаОперандаИсходная.УровеньОперанда = нУровень.тУровень;
		// Показатель ссылается сам на себя с отбором по ключевым аналитикам, но не по периоду
		Возврат;
	КонецЕсли;
	
	ЕстьПоказательТекущегоОтчета = Ложь;	
	тРекурсивныеОперанды = тДанныеДляРасчетов.НайтиСтроки(Новый Структура("ПотребительРасчета",СтрокаОперанда.ПоказательОтбор,Истина));
	Для Каждого Стр Из тРекурсивныеОперанды Цикл
		Если Стр.ПоказательТекущегоОтчета Тогда
			ЕстьПоказательТекущегоОтчета = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не ЕстьПоказательТекущегоОтчета И тРекурсивныеОперанды.Количество() > 0 Тогда
		нУровень.тУровень = нУровень.тУровень + 1;
	КонецЕсли;
	
	Если СтрокаОперандаИсходная.УровеньОперанда <> Неопределено Тогда
		Если СтрокаОперандаИсходная.УровеньОперанда < нУровень.тУровень Тогда
			СтрокаОперандаИсходная.УровеньОперанда = нУровень.тУровень;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Стр Из тРекурсивныеОперанды Цикл
		
		Если Стр.ПоказательТекущегоОтчета Тогда
			ПолучитьУровеньРасчетаОперандаРекурсивно(
				тСтрокаДерева,
				Стр,
				тДанныеДляРасчетов,
				мПоказателиСоСдвигомПоПериоду,
				СтрокаОперандаИсходная,
				тМаксимальныйУровень);
		КонецЕсли;
		
	КонецЦикла;
	
	Если мПоказателиСоСдвигомПоПериоду.Найти(СтрокаОперанда.ПоказательОтбор) <> Неопределено Тогда
		мПоказателиСоСдвигомПоПериоду.Добавить(СтрокаОперанда.ПотребительРасчета);
	КонецЕсли;
		
КонецПроцедуры	

Функция ПолучитьУИДДляПоказателя(ТЗРасшифровкаОтборовГруппРаскрытия,
	ИндексРегистраОперанда,КэшГруппОтборовПоказателей,МаксУИД,тРасшифровкаГруппОтборов,ТекущийПериод)
	
	Если ТЗРасшифровкаОтборовГруппРаскрытия.Количество() = 0 Тогда
		тХешГруппыОтборов = "";	
	Иначе
		тХешГруппыОтборов = ПолучитьХешПоОтборам(ТЗРасшифровкаОтборовГруппРаскрытия);
	КонецЕсли;
	
	СтруктураПоискаПоУмолчанию = Новый Структура;
	СтруктураПоискаПоУмолчанию.Вставить("ИндексРегистра",ИндексРегистраОперанда);
	СтруктураПоискаПоУмолчанию.Вставить("ХешГруппыОтборов",тХешГруппыОтборов);
	СтруктураПоискаПоУмолчанию.Вставить("ТекущийПериод",ТекущийПериод);
	
	НайденнаяСтрокаКэша = КэшГруппОтборовПоказателей.НайтиСтроки(СтруктураПоискаПоУмолчанию);
	
	Если НайденнаяСтрокаКэша.Количество() = 0 Тогда
		НСтр = КэшГруппОтборовПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НСтр,СтруктураПоискаПоУмолчанию);
		
		МаксУИД = МаксУИД + 1;
		НСтр.УИДГруппыОтборов = МаксУИД;	   		
		
		Для Каждого СтрРасшифровка Из ТЗРасшифровкаОтборовГруппРаскрытия Цикл
			НСтрРасшифровка = тРасшифровкаГруппОтборов.Добавить();
			ЗаполнитьЗначенияСвойств(НСтрРасшифровка,СтрРасшифровка);
			Если СтрРасшифровка.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение
				Или СтрРасшифровка.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений Тогда
				НСтрРасшифровка.УточнениеСпособаОпределения = СтрРасшифровка.ТекстМодуля;
			КонецЕсли;
			НСтрРасшифровка.УИДГруппыОтборов = МаксУИД;
		КонецЦикла;	
		
	Иначе	  
		НСтр = НайденнаяСтрокаКэша[0];	   
	КонецЕсли; 
	
	Возврат НСтр.УИДГруппыОтборов;
	
КонецФункции

Функция ПолучитьХешПоОтборам(Знач ПараметрыОтбора)
	
	СтрокаХешаОтборов = "";
	
	ПараметрыОтбора.Сортировать("ПолеБД");
	
	Для Каждого Стр Из ПараметрыОтбора Цикл
		
		ЗначениеОтбора = Стр.УточнениеСпособаОпределения;		
		Если ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") Тогда
			СтрЗначениеОтбора = ЗначениеВСтрокуВнутр(ЗначениеОтбора.ВыгрузитьЗначения());
		ИначеЕсли ЗначениеОтбора = "" Тогда
			СтрЗначениеОтбора = "";
		ИначеЕсли ЗначениеОтбора = Неопределено 
			И (Стр.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение 
			Или Стр.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений) Тогда
			СтрЗначениеОтбора = Стр.ТекстМодуля;
		Иначе	
			СтрЗначениеОтбора = ЗначениеВСтрокуВнутр(ЗначениеОтбора);
		КонецЕсли;
		
		СтрокаХешаОтборов = СтрокаХешаОтборов+Стр.ПолеБД+"@"+Стр.СпособВычисленияПараметра+"@"+СтрЗначениеОтбора;
				
	КонецЦикла;	   
	
	Возврат СтрокаХешаОтборов;
	
КонецФункции	

Процедура ЗаполнитьТаблицуВнешнихДанных(тВнешниеДанные, ПравилоОбработки)
	
	ДанныеПараметрическойНастройки 	= УправлениеОтчетамиУХ.ПолучитьДанныеПараметрическойНастройки(ПравилоОбработки);
	Если ДанныеПараметрическойНастройки = Неопределено Тогда
		ТекОбъектРасчета = Документы.НастраиваемыйОтчет.СоздатьДокумент();
		ТекОбъектРасчета.ПравилоОбработки = ПравилоОбработки;
		ТекОбъектРасчета.СформироватьСтруктуруПараметров();
		ТекОбъектРасчета.ИнициализироватьКонтекст();
		УправлениеОтчетамиУХ.ПодготовитьДанныеПараметрическойНастройки(ТекОбъектРасчета);
		ДанныеПараметрическойНастройки 	= УправлениеОтчетамиУХ.ПолучитьДанныеПараметрическойНастройки(ПравилоОбработки);
	КонецЕсли;
	мТабПоказателиЗапросы = ДанныеПараметрическойНастройки.мТабПоказателиЗапросы;
	
	Для Каждого ПоказательЗапрос Из мТабПоказателиЗапросы Цикл
		
		Если ПоказательЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
			Или ПоказательЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
			Или ПоказательЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений
			Или ПоказательЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники
			Или ПоказательЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос
			Или ПоказательЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO Тогда
			нСтрокаТаблицы = тВнешниеДанные.Добавить();
			ЗаполнитьЗначенияСвойств(нСтрокаТаблицы, ПоказательЗапрос);
			Если ПоказательЗапрос.СтруктураЗапроса.Свойство("ОбъектЗапрос") Тогда
				ПоказательЗапрос.СтруктураЗапроса.ОбъектЗапрос = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;		

КонецПроцедуры

Процедура СформироватьДанныеДляРасчетаКлассическимДвижкомРасчета(
	тТаблицаДанных,
	СтрокаОперанд,
	тТекущихПравилИспользованияПолейЗапроса,
	тТекущихПараметровОтбораБД,
	МаксКлючевыхАналитик)
	
	// Заполним таблицу операндов
	ТаблицаОперандов = Новый ТаблицаЗначений;
	ТаблицаОперандов.Колонки.Добавить("АналитикВидаОтчета");
	ТаблицаОперандов.Колонки.Добавить("ВидИтогаПоказателя");
	ТаблицаОперандов.Колонки.Добавить("Код");
	ТаблицаОперандов.Колонки.Добавить("КоррСчет");
	ТаблицаОперандов.Колонки.Добавить("Наименование");
	ТаблицаОперандов.Колонки.Добавить("Показатель");
	ТаблицаОперандов.Колонки.Добавить("ПоказательОтбор");
	ТаблицаОперандов.Колонки.Добавить("ПравилаИспользованияПолейЗапроса");
	ТаблицаОперандов.Колонки.Добавить("Ресурс");
	ТаблицаОперандов.Колонки.Добавить("Ссылка");
	ТаблицаОперандов.Колонки.Добавить("Счет");
	ТаблицаОперандов.Колонки.Добавить("ТипЗначения");
	ТаблицаОперандов.Колонки.Добавить("ТипЗначенияПоказателя");
	ТаблицаОперандов.Колонки.Добавить("ТолькоАналитическиеЗначения");
	ТаблицаОперандов.Колонки.Добавить("ЧислоАналитикГруппыРаскрытия");
	
	нСтрокаТаблицыОперандов = ТаблицаОперандов.Добавить();
	ЗаполнитьЗначенияСвойств(нСтрокаТаблицыОперандов, СтрокаОперанд);
	нСтрокаТаблицыОперандов.АналитикВидаОтчета = МаксКлючевыхАналитик;
	нСтрокаТаблицыОперандов.Показатель = СтрокаОперанд.ПотребительРасчета;
	нСтрокаТаблицыОперандов.ПравилаИспользованияПолейЗапроса = тТекущихПравилИспользованияПолейЗапроса;
	нСтрокаТаблицыОперандов.Ресурс = СтрокаОперанд.РесурсРегистра;
	нСтрокаТаблицыОперандов.ЧислоАналитикГруппыРаскрытия = СтрокаОперанд.ЧислоАналитик;
	
	// Добавим строку в таблицу данных
	нСтрокаТаблицы = тТаблицаДанных.Добавить();
	нСтрокаТаблицы.ТаблицаОперандов = ТаблицаОперандов;
	нСтрокаТаблицы.СпособПолучения = СтрокаОперанд.СпособПолучения;
	нСтрокаТаблицы.ТекстЗапроса = СтрокаОперанд.ТекстЗапросаМодуля;
	
	нСтрокаТаблицы.СтруктураЗапроса = Новый Структура;
	
	тТекущихПараметровОтбораБД.Колонки.Добавить("ЗначениеДляПроверки");
	нСтрокаТаблицы.ПравилаВычисленияПараметров = тТекущихПараметровОтбораБД;	
	
КонецПроцедуры	

Процедура ОпределитьПравилаТрансформацииПолей(
	тПоказателиОперанды, 
	тПравилаИспользованияПолейЗапроса, 
	тИспользуемыеАналитики, 
	МаксКлючевыхАналитик, 
	УровниСВременнымРасчетом, 
	МаксУровеньРасчетаПоказателей)
	
	тИспользуемыеКлючевыеАналитики 	= Новый Структура;
	Для Сч = 1 По МаксКлючевыхАналитик Цикл
		тИспользуемыеКлючевыеАналитики.Вставить("Аналитика" + Сч);
	КонецЦикла;	
	ИндексГруппыТрансформации = 1;
	РазличныеГруппыТрансформации = Новый Соответствие;
	
	Для Каждого СтрОперанд Из тПоказателиОперанды Цикл		
		
		ПравилаИспользованияПолейЗапроса = тПравилаИспользованияПолейЗапроса.НайтиСтроки(
			Новый Структура("Ссылка",стрОперанд.ИсточникДанныхДляРасчетов));
		
		МаксимальныйУровеньДополненияАналитик = 0;
		ТекстТрансформацииДополненияАналитик = "";
		ТекстТрансформации = "";			
		
		Для Каждого Поле Из ПравилаИспользованияПолейЗапроса Цикл
			
			Если СтрОперанд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO
				И (Поле.КодАналитики <> "Значение") Тогда
				
				ТекстТрансформации = ТекстТрансформации+Строка(Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы)+"@"+Поле.КодАналитики+"@"+Поле.КодАналитики+";";
				Если стрОперанд.УровеньРасчетаОперанда = 1 Тогда
					Если тИспользуемыеАналитики.НайтиСтроки(Новый Структура("УровеньРасчета,Поле",0,Поле.КодАналитики)).Количество() = 0 Тогда						
						нСтр 						= тИспользуемыеАналитики.Добавить();
						нСтр.УровеньРасчета  		= 0;
						нСтр.Поле 					= Поле.КодАналитики;
						нСтр.ПолеВерсии 			= Ложь;
						нСтр.ПолеТрансформации		= Поле.КодАналитики;
					КонецЕсли;
				КонецЕсли;
				Если тИспользуемыеАналитики.НайтиСтроки(Новый Структура("УровеньРасчета,Поле",стрОперанд.УровеньРасчетаОперанда,Поле.КодАналитики)).Количество() = 0 Тогда					
					нСтр 						= тИспользуемыеАналитики.Добавить();
					нСтр.УровеньРасчета  		= стрОперанд.УровеньРасчетаОперанда;
					нСтр.Поле 					= Поле.КодАналитики;
					нСтр.ПолеВерсии 			= Ложь;				
				КонецЕсли;
			
			ИначеЕсли Поле.СпособЗаполнения = Перечисления.СпособыЗаполненияПолейИсточника.ПустаяСсылка() Тогда
				Продолжить;
				
			ИначеЕсли (Поле.КодАналитики = "Период" ИЛИ Поле.КодАналитики = "Значение")
				И СтрОперанд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос Тогда
				Продолжить;
				
			ИначеЕсли Поле.СпособЗаполнения = Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы И ЗначениеЗаполнено(Поле.Поле) Тогда
				
				Если ЗначениеЗаполнено(СтрОперанд.ПоказательОперанд) Тогда
					// Поле из другого отчета
					ПолеИмя = Поле.Поле;
				Иначе
					// Поле из внешних источников
					ПолеИмя = Поле.КодАналитики;
					Если ПолеИмя = "Значение" Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ПолеВерсии = тИспользуемыеКлючевыеАналитики.Свойство(Поле.Синоним) ИЛИ СтрНайти(ПолеИмя,"Версия.");
				ПолеИмя = СтрЗаменить(ПолеИмя,"Версия.","");
				
				Если ПолеИмя <> Поле.КодАналитики Тогда				
					// Это трансформация полей
					Если тИспользуемыеАналитики.НайтиСтроки(Новый Структура("УровеньРасчета,Поле",стрОперанд.УровеньРасчетаОперанда,Поле.КодАналитики)).Количество() = 0 Тогда					
						нСтр 						= тИспользуемыеАналитики.Добавить();
						нСтр.УровеньРасчета  		= стрОперанд.УровеньРасчетаОперанда;
						нСтр.Поле 					= Поле.КодАналитики;
						нСтр.ПолеВерсии 			= Ложь;					
					КонецЕсли;				
				Иначе				
					Если тИспользуемыеАналитики.НайтиСтроки(Новый Структура("УровеньРасчета,Поле",стрОперанд.УровеньРасчетаОперанда,ПолеИмя)).Количество() = 0 Тогда						
						нСтр 						= тИспользуемыеАналитики.Добавить();
						нСтр.УровеньРасчета  		= стрОперанд.УровеньРасчетаОперанда;
						нСтр.Поле 					= ПолеИмя;
						нСтр.ПолеВерсии 			= ПолеВерсии;
						нСтр.ПолеТрансформации		= Поле.КодАналитики;
					КонецЕсли;				
				КонецЕсли;
				
				Если стрОперанд.УровеньРасчетаОперанда = 1 Тогда
					Если тИспользуемыеАналитики.НайтиСтроки(Новый Структура("УровеньРасчета,Поле",0,ПолеИмя)).Количество() = 0 Тогда						
						нСтр 						= тИспользуемыеАналитики.Добавить();
						нСтр.УровеньРасчета  		= 0;
						нСтр.Поле 					= ПолеИмя;
						нСтр.ПолеВерсии 			= ПолеВерсии;
						нСтр.ПолеТрансформации		= Поле.КодАналитики;
					КонецЕсли;
				КонецЕсли;
				
				ТекстТрансформации = ТекстТрансформации+Строка(Поле.СпособЗаполнения)+"@"+ПолеИмя+"@"+Поле.КодАналитики+";"
				
			ИначеЕсли Поле.СпособЗаполнения = Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение Тогда	   
				
				ТекстТрансформации = ТекстТрансформации+Строка(Поле.СпособЗаполнения)+"@"+ЗначениеВСтрокуВнутр(Поле.ФиксированноеЗначение)+"@"+Поле.КодАналитики+";";
				
				Если тИспользуемыеАналитики.НайтиСтроки(Новый Структура("УровеньРасчета,Поле",стрОперанд.УровеньРасчетаОперанда,Поле.КодАналитики)).Количество() = 0 Тогда					
					нСтр 						= тИспользуемыеАналитики.Добавить();
					нСтр.УровеньРасчета  		= стрОперанд.УровеньРасчетаОперанда;
					нСтр.Поле 					= Поле.КодАналитики;
					нСтр.ПолеВерсии 			= Ложь;				
				КонецЕсли;
				
			ИначеЕсли Поле.СпособЗаполнения = Перечисления.СпособыЗаполненияПолейИсточника.КонтекстОбъектаЗагрузки Тогда
				
				ТекстТрансформации = ТекстТрансформации+Строка(Поле.СпособЗаполнения)+"@"+Строка(Поле.Поле)+"@"+Поле.КодАналитики+";";
				
				Если тИспользуемыеАналитики.НайтиСтроки(Новый Структура("УровеньРасчета,Поле",стрОперанд.УровеньРасчетаОперанда,Поле.КодАналитики)).Количество() = 0 Тогда					
					нСтр 						= тИспользуемыеАналитики.Добавить();
					нСтр.УровеньРасчета  		= стрОперанд.УровеньРасчетаОперанда;
					нСтр.Поле 					= Поле.КодАналитики;
					нСтр.ПолеВерсии 			= Ложь;				
				КонецЕсли;
				
			ИначеЕсли Поле.СпособЗаполнения = Перечисления.СпособыЗаполненияПолейИсточника.ПолеДругогоИсточникаДанных Тогда
				
				ДанныеПоказателя = ОбщегоНазначенияУХ.ЗначенияРеквизитовОбъекта(Поле.ФиксированноеЗначение,"ПоказательОтбор,Код");
				СтрокаПоказателя = тПоказателиОперанды.НайтиСтроки(
				Новый Структура("ПоказательОперанд,КодВФормуле",ДанныеПоказателя.ПоказательОтбор,СокрЛП(ДанныеПоказателя.Код))).Получить(0);
				
				ТекстТрансформацииДополненияАналитик = ТекстТрансформацииДополненияАналитик+Строка(Поле.СпособЗаполнения)
				+"@"+ЗначениеВСтрокуВнутр(СтрокаПоказателя.ПоказательОперанд)
				+"@"+Поле.КодАналитики
				+"@"+СтрокаПоказателя.УровеньРасчетаОперанда+";";
				
				МаксимальныйУровеньДополненияАналитик = Макс(МаксимальныйУровеньДополненияАналитик,СтрокаПоказателя.УровеньРасчетаОперанда);	
				
				Если тИспользуемыеАналитики.НайтиСтроки(Новый Структура("УровеньРасчета,Поле",стрОперанд.УровеньРасчетаОперанда,Поле.КодАналитики)).Количество() = 0 Тогда					
					нСтр 						= тИспользуемыеАналитики.Добавить();
					нСтр.УровеньРасчета  		= стрОперанд.УровеньРасчетаОперанда;
					нСтр.Поле 					= Поле.КодАналитики;
					нСтр.ПолеВерсии 			= Ложь;				
				КонецЕсли;			
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МаксимальныйУровеньДополненияАналитик > стрОперанд.УровеньРасчетаОперанда Тогда
			
			// Есть дополнения аналитик вышестоящего уровня. Добавим еще один операнд в таблицу.
			НСтрока = тПоказателиОперанды.Добавить();
			ЗаполнитьЗначенияСвойств(НСтрока, стрОперанд); 
			НСтрока.УровеньРасчетаОперанда = МаксимальныйУровеньДополненияАналитик+1;				
			НСтрока.УровеньРасчетаПотребителя = МаксимальныйУровеньДополненияАналитик+1;
			НСтрока.ВариантРасчета = 2;
			
			МаксУровеньРасчетаПоказателей = Макс(МаксУровеньРасчетаПоказателей, НСтрока.УровеньРасчетаПотребителя);
			
			УровниСВременнымРасчетом.Добавить(МаксимальныйУровеньДополненияАналитик);				
			
			стрОперанд.ВременныйРасчет = Истина;
			стрОперанд.ТрансформацияПолей = ТекстТрансформации;
			
		Иначе
			стрОперанд.ТрансформацияПолей = ТекстТрансформации + ТекстТрансформацииДополненияАналитик;
		КонецЕсли;
		
		ГруппаТрансформации = РазличныеГруппыТрансформации.Получить(стрОперанд.ТрансформацияПолей);
		Если ГруппаТрансформации = Неопределено Тогда
			ИндексГруппыТрансформации = ИндексГруппыТрансформации + 1;
			РазличныеГруппыТрансформации.Вставить(стрОперанд.ТрансформацияПолей,ИндексГруппыТрансформации);
			СтрОперанд.УИДГруппыТрансформации = ИндексГруппыТрансформации;
		Иначе
			СтрОперанд.УИДГруппыТрансформации = ГруппаТрансформации;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ПодготовитьПоляВыборкиЗапроса(СтруктураВозврата)
	
	ДанныеВидаОтчета 				= СтруктураВозврата.ДанныеВидаОтчета;
	тРасшифровкаГруппОтборов		= СтруктураВозврата.тРасшифровкаГруппОтборов;
	МаксКлючевыхАналитик			= СтруктураВозврата.МаксКлючевыхАналитик;
	тПоказателиОперанды 			= СтруктураВозврата.тПоказателиОперанды;
	тИспользуемыеАналитики			= СтруктураВозврата.тИспользуемыеАналитики;
	тИспользуемыеРесурсы			= СтруктураВозврата.тИспользуемыеРесурсы;
	
	// Подготовим соответствие "стандартных" отборов
	СтандартныеОтборы = Новый Соответствие;
	СтандартныеОтборы.Вставить("Валюта",Перечисления.СпособыВычисленияПараметровОперандов.ВалютаОтчета);
	СтандартныеОтборы.Вставить("Организация",Перечисления.СпособыВычисленияПараметровОперандов.ОрганизацияОтчета);
	СтандартныеОтборы.Вставить("Сценарий",Перечисления.СпособыВычисленияПараметровОперандов.СценарийОтчета);
	СтандартныеОтборы.Вставить("ПериодОтчета",Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчета);
	Если ДанныеВидаОтчета.РазделениеПоПроектам Тогда
		СтандартныеОтборы.Вставить("Проект",Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчета);
	КонецЕсли;	
	Для ИндПоля = 1 По МаксКлючевыхАналитик Цикл
		СтандартныеОтборы.Вставить("Аналитика" + ИндПоля,Перечисления.СпособыВычисленияПараметровОперандов["Аналитика" + ИндПоля]);
	КонецЦикла;
	
	ИспользуемыеАналитики = Новый Массив;
	Для Каждого СтрПолей Из тИспользуемыеАналитики Цикл
		Если СтрПолей.ПолеТрансформации = "" Тогда
			ИспользуемыеАналитики.Добавить(СтрПолей.Поле);
		Иначе
			ИспользуемыеАналитики.Добавить(СтрПолей.ПолеТрансформации);
		КонецЕсли;
	КонецЦикла;
	
	// Определим уровень расчета для каждого операнда
	Для Каждого СтрОтбор Из тРасшифровкаГруппОтборов Цикл
		
		НайденныеСтроки = тПоказателиОперанды.НайтиСтроки(Новый Структура("ПоказательОперанд,УИДГруппыОтборов",СтрОтбор.ПоказательОперанд,СтрОтбор.УИДГруппыОтборов));
		МинУровень = 999999;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			МинУровень = Мин(МинУровень,НайденнаяСтрока.УровеньРасчетаОперанда,НайденнаяСтрока.УровеньРасчетаПотребителя);			
		КонецЦикла;
		СтрОтбор.УровеньРасчета = МинУровень;
		
	КонецЦикла;

	// Рекурсивно вычислим поля, которые будут участвовать в отборах таблиц
	УИДОтборов = тРасшифровкаГруппОтборов.Скопировать(,"УИДГруппыОтборов");
	УИДОтборов.Свернуть("УИДГруппыОтборов");	
	Для Каждого СтрУИДГруппыОтборов Из УИДОтборов Цикл
		РассчитатьПоляОтборовРекурсивно(тРасшифровкаГруппОтборов,ИспользуемыеАналитики,СтандартныеОтборы,СтрУИДГруппыОтборов.УИДГруппыОтборов);			
	КонецЦикла;
	
	// Добавим поля, которые участвуют в отборах будущих уровней
	СтрокиПолей = тРасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("ВключаетсяВПоля",Истина));
	Для Каждого СтрОтбор Из СтрокиПолей Цикл
		
		Если СтрОтбор.ПолеБД = "" Тогда
			Продолжить;
		КонецЕсли;
		
		ПерваяТочка = СтрНайти(СтрОтбор.ПолеБД,".");
		Если ПерваяТочка > 0 Тогда
			ПолеБД = Лев(СтрОтбор.ПолеБД,ПерваяТочка-1);
		Иначе
			ПолеБД = СтрОтбор.ПолеБД;
		КонецЕсли;

		Для Сч = 0 По СтрОтбор.УровеньРасчета-1 Цикл
			НайденныеСтроки = тИспользуемыеАналитики.НайтиСтроки(Новый Структура("Поле,УровеньРасчета",ПолеБД,Сч));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НПоле = тИспользуемыеАналитики.Добавить();
				НПоле.Поле = ПолеБД;
				НПоле.ПолеТрансформации = ПолеБД;
				НПоле.УровеньРасчета = Сч;
				НПоле.ПолеВерсии = СтандартныеОтборы.Получить(ПолеБД) <> Неопределено;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// Добавим числовые и нечисловые показатели
	Для Каждого СтрПолей Из тПоказателиОперанды Цикл
		
		Если СтрПолей.ТипПотребителя = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			Поле = "Значение";
			Суммируется = Истина;
		Иначе
			Поле = "ЗначениеНечисловое";
			Суммируется = Ложь;
		КонецЕсли;
		
		// Добавим текущий уровень потребителя
		Для СчУровень = 1 По СтрПолей.УровеньРасчетаПотребителя Цикл
			НайденныеСтроки = тИспользуемыеРесурсы.НайтиСтроки(Новый Структура("Поле,УровеньРасчета",Поле,СчУровень));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НПоле = тИспользуемыеРесурсы.Добавить();
				НПоле.Поле 				= Поле;			
				НПоле.УровеньРасчета 	= СчУровень;
				НПоле.Суммируется 		= Суммируется;
				НПоле.ВыводитсяВОтчет	= Истина;
			Иначе
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если Не НайденнаяСтрока.ВыводитсяВОтчет Тогда
						НайденнаяСтрока.ВыводитсяВОтчет	= Истина;
					КонецЕсли;
				КонецЦикла;					
			КонецЕсли;
		КонецЦикла;
		
		Если СтрПолей.ТипПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			Поле = "Значение";
			Суммируется = Истина;
		Иначе
			Поле = "ЗначениеНечисловое";
			Суммируется = Ложь;
		КонецЕсли;
		
		Для СчУровень = 1 По СтрПолей.УровеньРасчетаОперанда Цикл
			НайденныеСтроки = тИспользуемыеРесурсы.НайтиСтроки(Новый Структура("Поле,УровеньРасчета",Поле,СчУровень-1));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НПоле = тИспользуемыеРесурсы.Добавить();
				НПоле.Поле 				= Поле;			
				НПоле.УровеньРасчета 	= СчУровень-1;
				НПоле.Суммируется 		= Суммируется;
				НПоле.ВыводитсяВОтчет	= Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(СтрПолей.ПоказательОперанд) Тогда
			СтрПолей.ПоказательОперанд = СтрПолей.Потребитель;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РассчитатьПоляОтборовРекурсивно(тРасшифровкаГруппОтборов,ИспользуемыеАналитики,СтандартныеОтборы,УИДГруппыОтборов,
	ИдентификаторРодителя=0,Знач ВключаетсяВПоля=Ложь)
	
	ОтборГруппОтборов = тРасшифровкаГруппОтборов.НайтиСтроки(
		Новый Структура("УИДГруппыОтборов,ИдентификаторРодителя",УИДГруппыОтборов,ИдентификаторРодителя));
		
	Для Каждого СтрОтбор Из ОтборГруппОтборов Цикл
		
		Если СтрОтбор.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ГруппаИ
			ИЛИ СтрОтбор.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ГруппаИЛИ
			ИЛИ СтрОтбор.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ГруппаНЕ Тогда			
			
			СтрОтбор.ВключаетсяВПоля = РассчитатьПоляОтборовРекурсивно(тРасшифровкаГруппОтборов,ИспользуемыеАналитики,СтандартныеОтборы,УИДГруппыОтборов,СтрОтбор.ИдентификаторСтроки,ВключаетсяВПоля);
				
		Иначе
			
			Если СтрОтбор.УровеньРасчета = 1 Тогда
				Если ИспользуемыеАналитики.Найти(СтрОтбор.ПолеБД) <> Неопределено Тогда
					СтрОтбор.ВключаетсяВПоля = Истина;
				ИначеЕсли Лев(СтрОтбор.ПолеБД,9) = "Аналитика" И СтандартныеОтборы.Получить(СтрОтбор.ПолеБД) = Неопределено Тогда
					// Может быть отбором на показатель с аналитиками
					СтрОтбор.ВключаетсяВПоля = Истина;
				КонецЕсли;
			Иначе
				Если СтандартныеОтборы.Получить(СтрОтбор.ПолеБД) <> СтрОтбор.СпособВычисленияПараметра Тогда
					СтрОтбор.ВключаетсяВПоля = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИдентификаторРодителя > 0 Тогда
			ВключаетсяВПоля = Макс(СтрОтбор.ВключаетсяВПоля,ВключаетсяВПоля);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИдентификаторРодителя > 0 Тогда
		Для Каждого СтрОтбор Из ОтборГруппОтборов Цикл
			
			Если СтрОтбор.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ГруппаИ
				ИЛИ СтрОтбор.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ГруппаИЛИ
				ИЛИ СтрОтбор.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ГруппаНЕ Тогда
				
				СтрОтбор.ВключаетсяВПоля = РассчитатьПоляОтборовРекурсивно(тРасшифровкаГруппОтборов,ИспользуемыеАналитики,СтандартныеОтборы,УИДГруппыОтборов,СтрОтбор.ИдентификаторСтроки,ВключаетсяВПоля);
				
			Иначе
				
				СтрОтбор.ВключаетсяВПоля = ВключаетсяВПоля;
				
			КонецЕсли;
				
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВключаетсяВПоля;
	
КонецФункции

#КонецОбласти


#Область ПроцедурыДляГенерацииЗапросаОперандов0Уровня

////////////////////////////////////////////////////////////////////////////////
// Процедуры для генерации текста запроса по операндам 0-го уровня выборки
//  
////////////////////////////////////////////////////////////////////////////////

Процедура СоздатьТаблицуПоказателейОперандов(СтруктураРасчетаПоказателей)
	 
	глТаблицаПересчетаПоказателей 	= СтруктураРасчетаПоказателей.глТаблицаПересчетаПоказателей;
	тПоказателиОперанды				= СтруктураРасчетаПоказателей.тПоказателиОперанды;
	ЕстьДополненияАналитик			= СтруктураРасчетаПоказателей.ЕстьДополненияАналитик;
	ЕстьЗначениеВалюта				= СтруктураРасчетаПоказателей.ЕстьЗначениеВалюта;
	ЕстьВременныйРасчет				= СтруктураРасчетаПоказателей.УровниСВременнымРасчетом.Количество() > 0;
	
	тПараметрыПакета = ПолучитьОписаниеТаблицыПараметров();
	
	НОтбор 					= тПараметрыПакета.Добавить();
	НОтбор.ИмяОтбора 		= "тПоказателиОперанды";
	НОтбор.ТипОтбора		= Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
	НОтбор.ЗначениеОтбора	= тПоказателиОперанды;

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПоказателиОперанды.Потребитель КАК Потребитель,
		|	ПоказателиОперанды.ПоказательОперанд КАК ПоказательОперанд,
		|	ПоказателиОперанды.УровеньРасчетаПотребителя КАК УровеньРасчетаПотребителя,
		|	ПоказателиОперанды.УровеньРасчетаОперанда КАК УровеньРасчетаОперанда,
		|	ПоказателиОперанды.КодВФормуле КАК КодВФормуле,
		|	ПоказателиОперанды.ТипПотребителя КАК ТипПотребителя,
		|	ПоказателиОперанды.ТипПоказателя КАК ТипПоказателя,
		|	ПоказателиОперанды.ТекущийПериод КАК ТекущийПериод,
		|	ПоказателиОперанды.ИндексРегистраПотребителя КАК ИндексРегистраПотребителя,
		|	ПоказателиОперанды.УИДГруппыОтборов КАК УИДГруппыОтборов,
		|	ПоказателиОперанды.УИДГруппыТрансформации КАК УИДГруппыТрансформации,
		|	ПоказателиОперанды.ВидИтога КАК ВидИтога,
		|	ПоказателиОперанды.ВариантРасчета КАК ВариантРасчета %ПоляДополненияАналитик% %ВременныйРасчет% %ПоляЗначенияВалюта%
		|ПОМЕСТИТЬ втПоказателиОперанды
		|ИЗ
		|	&тПоказателиОперанды КАК ПоказателиОперанды
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТекущийПериод,
		|	УровеньРасчетаПотребителя,
		|	ВариантРасчета,
		|	ПоказательОперанд,
		|	УИДГруппыОтборов,
		|	УИДГруппыТрансформации		
		|;
		|
		|//////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	ПоказателиОперанды.ПоказательОперанд,
		|	ПоказателиОперанды.УИДГруппыОтборов,
		|	ПоказателиОперанды.КодВФормуле %ПоляДополненияАналитик%
		|ПОМЕСТИТЬ втПоказателиОперанды0
		|ИЗ
		|	втПоказателиОперанды КАК ПоказателиОперанды
		|ГДЕ
		|	ПоказателиОперанды.УровеньРасчетаОперанда = 1";
	
	Если ЕстьДополненияАналитик Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПоляДополненияАналитик%", ",
			|	ПоказателиОперанды.ДляДополненияАналитик КАК ДляДополненияАналитик");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПоляДополненияАналитик%", "");
	КонецЕсли;
	
	Если ЕстьВременныйРасчет Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВременныйРасчет%", ",
			|	ПоказателиОперанды.ВременныйРасчет КАК ВременныйРасчет");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВременныйРасчет%", "");
	КонецЕсли;	
	
	Если ЕстьЗначениеВалюта Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПоляЗначенияВалюта%", ",
			|	ПоказателиОперанды.ПересчитыватьВалютнуюСумму КАК ПересчитыватьВалютнуюСумму");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПоляЗначенияВалюта%", "");
	КонецЕсли;

	нСтрокаТаблицыЗапросов 								= глТаблицаПересчетаПоказателей.Добавить();
	нСтрокаТаблицыЗапросов.ТекстПодзапросов      		= ТекстЗапроса;
	нСтрокаТаблицыЗапросов.КомментарийКПакету      		= "ТАБЛИЦА ВСЕХ ОПЕРАНДОВ ТЕКУЩЕГО РАСЧЕТА";
	нСтрокаТаблицыЗапросов.тПараметрыПакета 			= тПараметрыПакета;
	нСтрокаТаблицыЗапросов.ВидОперацииРасчета           = Перечисления.ВидыОперацийРасчетаПоказателей.ПолучениеТаблицыОперандов;
	
КонецПроцедуры	

Процедура ПолучитьПодзапросТекущейВерсии(СтруктураРасчетаПоказателей, СтруктураПараметровТекущегоУровня)
	
	глТаблицаПересчетаПоказателей   = СтруктураРасчетаПоказателей.глТаблицаПересчетаПоказателей;
	тИспользуемыеАналитики			= СтруктураРасчетаПоказателей.тИспользуемыеАналитики; 
	тРасшифровкаГруппОтборов  		= СтруктураРасчетаПоказателей.тРасшифровкаГруппОтборов;
	ПолучатьДанныеИзРегистров		= СтруктураРасчетаПоказателей.ПолучатьДанныеИзРегистров;
	
	Если Не ПолучатьДанныеИзРегистров Тогда
		Возврат;
	КонецЕсли;
	
	ВидыОтчетовСинтетика		    = СтруктураПараметровТекущегоУровня.ВидыОтчетовСинтетика;
	УИДГруппыОтборов 				= СтруктураПараметровТекущегоУровня.УИДГруппыОтборов;	
	ИндексРегистра					= СтруктураПараметровТекущегоУровня.ИндексРегистра;
	ПрефиксТаблицыВерсий			= СтруктураПараметровТекущегоУровня.ПрефиксТаблицыВерсий;
	УровеньРасчета					= СтруктураПараметровТекущегоУровня.УровеньРасчета;
	ВидОперацииРасчета				= СтруктураПараметровТекущегоУровня.ВидОперацииРасчета;
	ТекущийПериод					= СтруктураПараметровТекущегоУровня.ТекущийПериод;

	// Сформируем текст отборов
	тПараметрыПакета 		= ПолучитьОписаниеТаблицыПараметров();	
	
	НОтбор 					= тПараметрыПакета.Добавить();
	НОтбор.ИмяОтбора 		= "ВидыОтчетаСинтетика";
	НОтбор.ТипОтбора		= Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
	НОтбор.ЗначениеОтбора	= ВидыОтчетовСинтетика;
	
	НОтбор 					= тПараметрыПакета.Добавить();
	НОтбор.ИмяОтбора 		= "ИдентификаторСеанса";
	НОтбор.ТипОтбора		= "КонтекстВызоваЗаполнения";
	НОтбор.ЗначениеОтбора	= "ИдентификаторСеанса";
	
	// Добавим подзапросы в пакет
	НовСтрВерсии 					= глТаблицаПересчетаПоказателей.Добавить();
	НовСтрВерсии.тПараметрыПакета   = тПараметрыПакета;
	НовСтрВерсии.ВидОперацииРасчета = ВидОперацииРасчета;
	
	Если ИндексРегистра = -1 ИЛИ ИндексРегистра = -11 Тогда  
		// Это нечисловые значения. По ним срез по версиям не агрегируется. Просто берем последнюю версию.
				
		ТекстЗапроса = "
		|// ВЕРСИИ НЕЧИСЛОВЫХ
		|
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЗначенияПоказателейОтчетов.Версия.Код) КАК ВерсияКод,
		|	ЗначенияПоказателейОтчетов.Показатель КАК Показатель,
		|	ЗначенияПоказателейОтчетов.Версия.ПериодОтчета КАК ПериодОтчета
		|ПОМЕСТИТЬ втВерсииБазаПредварительная
		|ИЗ
		|	РегистрСведений.ЗначенияПоказателейОтчетовНечисловые КАК ЗначенияПоказателейОтчетов
		|ГДЕ
		|	ЗначенияПоказателейОтчетов.Версия.ВидОтчета В (&ВидыОтчетаСинтетика)
		|	И ЗначенияПоказателейОтчетов.ИтоговоеЗначение = %ИтоговоеЗначение%
		|	И ((НЕ ЗначенияПоказателейОтчетов.Версия.ЧерноваяВерсия) ИЛИ ЗначенияПоказателейОтчетов.Версия.ИдентификаторСеанса = &ИдентификаторСеанса) %ТекстОтбораВерсии% 
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияПоказателейОтчетов.Показатель,
		|	ЗначенияПоказателейОтчетов.Версия.ПериодОтчета
		|;
		|/////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	втВерсииБазаПредварительная.Показатель,
		|	ВерсииЗначенийПоказателей.Ссылка КАК Версия,		
		|	%УИДГруппыОтборов% КАК УИДГруппыОтборов,
		|	%ТекстПериод% КАК ПериодОтчета %ТекстАналитик%
		|ПОМЕСТИТЬ %ПрефиксТаблицыВерсий%%УИДГруппыОтборов%_ИТОГ_%ИтоговоеЗначение%
		|ИЗ
		|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсииБазаПредварительная КАК втВерсииБазаПредварительная
		|		ПО ВерсииЗначенийПоказателей.Код 			=  втВерсииБазаПредварительная.ВерсияКод
		|		И ВерсииЗначенийПоказателей.ПериодОтчета 	=  втВерсииБазаПредварительная.ПериодОтчета %СоединениеСТаблицейПериодов%
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Версия
		|;
		|/////////////////////////////////////////////////
		|
        |УНИЧТОЖИТЬ втВерсииБазаПредварительная";
		
		Если ИндексРегистра = -1 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ИтоговоеЗначение%","ЛОЖЬ");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ИтоговоеЗначение%","ИСТИНА");
		КонецЕсли;
		
		НовСтрВерсии.КомментарийКПакету = "ВЕРСИИ НЕЧИСЛОВЫХ " + Формат(УИДГруппыОтборов,"ЧН=0; ЧГ=0");
		
	Иначе
		
		ТекстЗапроса = "
		|// ВЕРСИИ ЧИСЛОВЫХ
		|
		|ВЫБРАТЬ
		|	ВерсииЗначенийПоказателей.Ссылка КАК Версия,
		|	%УИДГруппыОтборов% КАК УИДГруппыОтборов,
		|	%ТекстПериод% КАК ПериодОтчета %ТекстАналитик%  
		|ПОМЕСТИТЬ %ПрефиксТаблицыВерсий%%УИДГруппыОтборов%
		|ИЗ
		|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей %СоединениеСТаблицейПериодов%
		|ГДЕ
		|	ВерсииЗначенийПоказателей.ВидОтчета В (&ВидыОтчетаСинтетика)
		|	И ((НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия) ИЛИ ВерсииЗначенийПоказателей.ИдентификаторСеанса = &ИдентификаторСеанса) %ТекстОтбора%
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Версия
		|";
		
		НовСтрВерсии.КомментарийКПакету = "ВЕРСИИ ЧИСЛОВЫХ " + Формат(УИДГруппыОтборов,"ЧН=0; ЧГ=0");
		
	КонецЕсли;
	
	// Обработаем периоды
	тСложныеОтборыПоПериоду = ПолучитьОписаниеТаблицыПараметров();
	Если ТекущийПериод Тогда		
		// Найдем отборы по периоду
		НайденныеСтроки = тРасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УИДГруппыОтборов,ПолеБД",УИДГруппыОтборов,"ПериодОтчета"));
		Если НайденныеСтроки.Количество() = 0 Тогда
			// Отбора по периоду нет
		    НСтрокаОтбор = тСложныеОтборыПоПериоду.Добавить();
			НСтрокаОтбор.ИмяОтбора = "ПериодОтчета";
			НСтрокаОтбор.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется;
		КонецЕсли;
		// Проверим найденные строки на сложные отборы по периоду
		Для Каждого СтрокаОтбор Из НайденныеСтроки Цикл
			Если СтрокаОтбор.СпособВычисленияПараметра <> Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчета Тогда
				// Сложный отбор, подготовим данные для таблицы смещения периодов
				НСтрокаОтбор = тСложныеОтборыПоПериоду.Добавить();
				НСтрокаОтбор.ИмяОтбора = "ПериодОтчета";
				НСтрокаОтбор.ТипОтбора = СтрокаОтбор.СпособВычисленияПараметра;
				Если СтрокаОтбор.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение
					Или СтрокаОтбор.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений Тогда
					НСтрокаОтбор.ЗначениеОтбора = СтрокаОтбор.ТекстМодуля;
				Иначе
					НСтрокаОтбор.ЗначениеОтбора = СтрокаОтбор.УточнениеСпособаОпределения;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если тСложныеОтборыПоПериоду.Количество() Тогда
		
		// Есть сложные отборы по периоду
		ТекстЗапроса = "
		|// СООТВЕТСТВИЕ ПЕРИОДОВ
		|
		|ВЫБРАТЬ
		|	СоответствиеПериодов.ПериодОтчета КАК ПериодОтчета,
		|	СоответствиеПериодов.ПериодИсточник КАК ПериодИсточник
		|ПОМЕСТИТЬ втСоответствиеПериодов%УИДГруппыОтборов%
		|ИЗ &тзСоответствиеПериодов КАК СоответствиеПериодов
		|;
		|/////////////////////////////////////////////////
		|" + ТекстЗапроса;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстПериод%","СоответствиеПериодов.ПериодОтчета");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%СоединениеСТаблицейПериодов%","
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСоответствиеПериодов%УИДГруппыОтборов% КАК СоответствиеПериодов
		|		ПО ВерсииЗначенийПоказателей.ПериодОтчета = СоответствиеПериодов.ПериодИсточник");
		
		НОтбор 					= тПараметрыПакета.Добавить();
		НОтбор.ИмяОтбора 		= "тзСоответствиеПериодов";
		НОтбор.ТипОтбора		= "СоответствиеПериодов";
		НОтбор.ЗначениеОтбора	= тСложныеОтборыПоПериоду;
		
		СтруктураПараметровТекущегоУровня.Вставить("ЕстьСоответствиеПериодов", Истина);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстПериод%","ВерсииЗначенийПоказателей.ПериодОтчета");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%СоединениеСТаблицейПериодов%","");
		СтруктураПараметровТекущегоУровня.Вставить("ЕстьСоответствиеПериодов", Ложь);
	КонецЕсли;		
	
	ТекстАналитик 	= СформироватьТекстАналитик(тИспользуемыеАналитики,УровеньРасчета,0);
	ТекстОтбора 	= СформироватьТекстОтбора(тРасшифровкаГруппОтборов,тПараметрыПакета,УИДГруппыОтборов);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%УИДГруппыОтборов%",Формат(УИДГруппыОтборов,"ЧН=0; ЧГ=0"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ПрефиксТаблицыВерсий%",ПрефиксТаблицыВерсий);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстАналитик%",СтрЗаменить(ТекстАналитик,"%ИмяТаблицы%","ВерсииЗначенийПоказателей"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстОтбора%",СтрЗаменить(ТекстОтбора,"%ИмяТаблицы%","ВерсииЗначенийПоказателей"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстОтбораВерсии%",СтрЗаменить(ТекстОтбора,"%ИмяТаблицы%","ЗначенияПоказателейОтчетов.Версия"));
	
	НовСтрВерсии.ТекстПодзапросов = ТекстЗапроса;
	
КонецПроцедуры

Процедура ПолучитьТекстЗначенийПоказателей(СтруктураРасчетаПоказателей, СтруктураПараметровТекущегоУровня, УстановкаЗначенийПоказателей=Ложь)
	
	тИспользуемыеАналитики 				= СтруктураРасчетаПоказателей.тИспользуемыеАналитики;
	тИспользуемыеРесурсы 				= СтруктураРасчетаПоказателей.тИспользуемыеРесурсы;
	тРасшифровкаГруппОтборов     		= СтруктураРасчетаПоказателей.тРасшифровкаГруппОтборов;
	РасчетПоИзмененнымПоказателям		= СтруктураРасчетаПоказателей.РасчетПоИзмененнымПоказателям;
	ПолучатьДанныеИзРегистров			= СтруктураРасчетаПоказателей.ПолучатьДанныеИзРегистров;
	
	УИДГруппыОтборов 					= СтруктураПараметровТекущегоУровня.УИДГруппыОтборов;
    ИндексРегистра 						= СтруктураПараметровТекущегоУровня.ИндексРегистра;
    ИндексЗапроса 						= СтруктураПараметровТекущегоУровня.ИндексЗапроса;
	тПодзапросыДанных					= СтруктураПараметровТекущегоУровня.тПодзапросыДанных;
	тПараметрыПакета            		= СтруктураПараметровТекущегоУровня.тПараметрыПакета;	
	ПрефиксТаблицыВерсий        		= СтруктураПараметровТекущегоУровня.ПрефиксТаблицыВерсий;	
	УровеньРасчета						= СтруктураПараметровТекущегоУровня.УровеньРасчета;	
	ЕстьСоответствиеПериодов			= СтруктураПараметровТекущегоУровня.ЕстьСоответствиеПериодов;
	
	Если ИндексРегистра = -1 ИЛИ ИндексРегистра = -11 Тогда
	
		// Добавим фильтр и объединение с уже рассчитанными раннее показателями
		ТекстЗапроса = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	ДанныеРегистра.Показатель КАК Показатель, 
		|	%ТекстПериод% КАК ПериодОтчета %УИДГруппыОтборов% %ТекстДопПолейЛог%
		|//ПОМЕСТИТЬ
		|ИЗ
		|	втЛогИзмененныхПоказателей КАК ДанныеРегистра %СоединениеСТаблицейПериодов% %ТекстВерсииЛог% %ТекстНовыеЗначенияПоказателейЛог%
		|
		|ГДЕ
		|	ДанныеРегистра.ЗначениеНечисловое <> НЕОПРЕДЕЛЕНО
		|	И ДанныеРегистра.Показатель В (%ОтборПоказатель%)
		|	%ТекстОтбораЛог% %ТекстДопОтбораЛог%
		|";
		Если ПолучатьДанныеИзРегистров Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|//ВЛОЖЕННЫЙ ЗАПРОС ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ 
			|	ДанныеРегистра.Показатель КАК Показатель, 
			|	ДанныеВерсий.ПериодОтчета КАК ПериодОтчета %УИДГруппыОтборов% %ТекстДопПолей%
			|ИЗ
			|	РегистрСведений.ЗначенияПоказателейОтчетовНечисловые КАК ДанныеРегистра
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ %ИмяТаблицы_Версии%_ИТОГ_%ИтоговоеЗначение% КАК ДанныеВерсий
			|			ПО ДанныеРегистра.Версия = ДанныеВерсий.Версия
			|			И ДанныеРегистра.Показатель = ДанныеВерсий.Показатель
			|			И ДанныеРегистра.Показатель В (%ОтборПоказатель%)
			|		ЛЕВОЕ СОЕДИНЕНИЕ втЛогИзмененныхПоказателей КАК ЛогИзмененныхПоказателей
			|			ПО ДанныеРегистра.Показатель = ЛогИзмененныхПоказателей.Показатель
			|			И ДанныеВерсий.ПериодОтчета = ЛогИзмененныхПоказателей.ПериодОтчета %ТекстСоединенияАналитикЛог% %ТекстОтбораЛогСоединение% %ТекстНовыеЗначенияПоказателей%
			|
			|ГДЕ
			|	ЛогИзмененныхПоказателей.Показатель ЕСТЬ NULL 
			|	И ДанныеРегистра.ИтоговоеЗначение = %ИтоговоеЗначение% %ТекстДопОтбора%
			|";
		КонецЕсли;
		
		Если ИндексРегистра = -1 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ИтоговоеЗначение%","ЛОЖЬ");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ИтоговоеЗначение%","ИСТИНА");
		КонецЕсли;
		
	Иначе
		
		ТекстЗапроса = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	ДанныеРегистра.Показатель КАК Показатель,  
		|	%ТекстПериод% КАК ПериодОтчета %УИДГруппыОтборов% %ТекстДопПолей%
		|//ПОМЕСТИТЬ
		|ИЗ
		|	втЛогИзмененныхПоказателей КАК ДанныеРегистра %СоединениеСТаблицейПериодов% %ТекстВерсииЛог% %ТекстНовыеЗначенияПоказателейЛог%
		|
		|ГДЕ
		|	ДанныеРегистра.Значение <> 0
		|	И ДанныеРегистра.Показатель В (%ОтборПоказатель%) 
		|	%ТекстОтбораЛог% %ТекстДопОтбораЛог% 
		|";
		Если ПолучатьДанныеИзРегистров Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|//ВЛОЖЕННЫЙ ЗАПРОС ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ 
			|	ДанныеРегистра.Показатель КАК Показатель, 
			|	ДанныеВерсий.ПериодОтчета КАК ПериодОтчета %УИДГруппыОтборов% %ТекстДопПолей%			
			|ИЗ
			|	РегистрСведений.%ИмяТаблицы_Регистр% КАК ДанныеРегистра
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ %ИмяТаблицы_Версии% КАК ДанныеВерсий
			|			ПО ДанныеРегистра.Версия = ДанныеВерсий.Версия 
			|			И ДанныеРегистра.Показатель В (%ОтборПоказатель%) %ТекстНовыеЗначенияПоказателей%
			|
			|ГДЕ
			|	ДанныеРегистра.Значение <> 0 %ТекстДопОтбора%			
			|";
		КонецЕсли;
		
	КонецЕсли;	
		
	// Режим установки значений показателей
	Если УстановкаЗначенийПоказателей Тогда		
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстНовыеЗначенияПоказателей%","
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
		|			ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ЗначенияПоказателей.Показатель,
		|				ЗначенияПоказателей.ПериодОтчета %ТекстАналитик%
		|			ИЗ втЗначенияПотребителейРасчет КАК ЗначенияПоказателей) КАК НовыеЗначенияПоказателей
		|			ПО ДанныеРегистра.Показатель = НовыеЗначенияПоказателей.Показатель
		|			И ДанныеВерсий.ПериодОтчета = НовыеЗначенияПоказателей.ПериодОтчета %ТекстСоединенияАналитик%");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстНовыеЗначенияПоказателейЛог%","
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
		|			ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ЗначенияПоказателей.Показатель,
		|				ЗначенияПоказателей.ПериодОтчета %ТекстАналитик%
		|			ИЗ втЗначенияПотребителейРасчет КАК ЗначенияПоказателей) КАК НовыеЗначенияПоказателей
		|			ПО ДанныеРегистра.Показатель = НовыеЗначенияПоказателей.Показатель
		|			И ДанныеРегистра.ПериодОтчета = НовыеЗначенияПоказателей.ПериодОтчета %ТекстСоединенияАналитик%");		
	
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстНовыеЗначенияПоказателей%","");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстНовыеЗначенияПоказателейЛог%","");
	КонецЕсли;	
	
	// Если необходимо, добавим соединение с таблицей соответствия периодов
	Если ЕстьСоответствиеПериодов Тогда		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстПериод%","СоответствиеПериодов.ПериодОтчета");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%СоединениеСТаблицейПериодов%","
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСоответствиеПериодов" + Формат(УИДГруппыОтборов,"ЧН=0; ЧГ=0") + " КАК СоответствиеПериодов
		|		ПО ДанныеРегистра.ПериодОтчета = СоответствиеПериодов.ПериодИсточник");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстПериод%","ДанныеРегистра.ПериодОтчета");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%СоединениеСТаблицейПериодов%","");		
	КонецЕсли;
	
	// Установим УИДГруппыОтборов 
	Если УИДГруппыОтборов = 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%УИДГруппыОтборов%","");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%УИДГруппыОтборов%",",
		|	" + Формат(УИДГруппыОтборов,"ЧН=0; ЧГ=0") + " КАК УИДГруппыОтборов");
	КонецЕсли;
		
	// Подготовим текст аналитик, ресурсов и отборов
	ТекстДополнительныхПолей 	= СформироватьТекстАналитик(тИспользуемыеАналитики,УровеньРасчета) + СформироватьТекстРесурсов(тИспользуемыеРесурсы,УровеньРасчета);
	ТекстДополнительногоОтбора 	= СформироватьТекстОтбора(тРасшифровкаГруппОтборов,тПараметрыПакета,УИДГруппыОтборов,,,Истина);
	ТекстОтбораЛог 				= СформироватьТекстОтбора(тРасшифровкаГруппОтборов,тПараметрыПакета,УИДГруппыОтборов);

	// Имена таблиц
	ТекИндексРегистра = ИндексРегистра; 		
	Если ИндексРегистра = -1 ИЛИ ИндексРегистра = -11 Тогда
		
		// Нечисловые
		ТекИндексРегистра = ПараметрыСеанса.ЧислоДопАналитик;
	
		ТекстДополнительныхПолей 	= СтрЗаменить(ТекстДополнительныхПолей,"%ИмяТаблицы%.АналитикаВалюта","ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)");
		ТекстДополнительныхПолей 	= СтрЗаменить(ТекстДополнительныхПолей,"%ИмяТаблицы%.ЗначениеНечисловое","ДанныеРегистра.Значение");
		ТекстДополнительныхПолей 	= СтрЗаменить(ТекстДополнительныхПолей,"%ИмяТаблицы%.ЗначениеВалюта","0");
		ТекстДополнительныхПолей 	= СтрЗаменить(ТекстДополнительныхПолей,"%ИмяТаблицы%.Значение","0");
		
	ИначеЕсли ИндексРегистра = -2 Тогда
		
		// Валютные
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ИмяТаблицы_Регистр%","ЗначенияПоказателейОтчетовВалютные");
	
		ТекстДополнительныхПолей 	= СтрЗаменить(ТекстДополнительныхПолей,"%ИмяТаблицы%.АналитикаВалюта","ДанныеРегистра.АналитикаВалюта");
		ТекстДополнительныхПолей 	= СтрЗаменить(ТекстДополнительныхПолей,"%ИмяТаблицы%.ЗначениеНечисловое","НЕОПРЕДЕЛЕНО");
		ТекстДополнительныхПолей 	= СтрЗаменить(ТекстДополнительныхПолей,"%ИмяТаблицы%.Значение","ДанныеРегистра.Значение");				
		
		ТекстДополнительногоОтбора 	= СтрЗаменить(ТекстДополнительногоОтбора,"%ИмяТаблицы%.АналитикаВалюта","ДанныеРегистра.АналитикаВалюта");
		
	ИначеЕсли ИндексРегистра = 0 ИЛИ ИндексРегистра=NULL Тогда
		
		// Синтетика
		ТекстЗапроса 				= СтрЗаменить(ТекстЗапроса,"%ИмяТаблицы_Регистр%","ЗначенияПоказателейОтчетовСинтетика");
		
		ТекстДополнительныхПолей 	= СтрЗаменить(ТекстДополнительныхПолей,"%ИмяТаблицы%.АналитикаВалюта","ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)");
		ТекстДополнительныхПолей 	= СтрЗаменить(ТекстДополнительныхПолей,"%ИмяТаблицы%.ЗначениеВалюта","0");
		ТекстДополнительныхПолей 	= СтрЗаменить(ТекстДополнительныхПолей,"%ИмяТаблицы%.ЗначениеНечисловое","НЕОПРЕДЕЛЕНО");
		ТекстДополнительныхПолей 	= СтрЗаменить(ТекстДополнительныхПолей,"%ИмяТаблицы%.Значение","ДанныеРегистра.Значение");	
		
	Иначе
		
		// Значения показателей N
		ТекстЗапроса 				= СтрЗаменить(ТекстЗапроса,"%ИмяТаблицы_Регистр%","ЗначенияПоказателейОтчетов"+ИндексРегистра);
		
		ТекстДополнительныхПолей 	= СтрЗаменить(ТекстДополнительныхПолей,"%ИмяТаблицы%.АналитикаВалюта","ДанныеРегистра.АналитикаВалюта");
		ТекстДополнительныхПолей 	= СтрЗаменить(ТекстДополнительныхПолей,"%ИмяТаблицы%.ЗначениеНечисловое","НЕОПРЕДЕЛЕНО");
		ТекстДополнительныхПолей 	= СтрЗаменить(ТекстДополнительныхПолей,"%ИмяТаблицы%.Значение","ДанныеРегистра.Значение");				
		
		ТекстДополнительногоОтбора 	= СтрЗаменить(ТекстДополнительногоОтбора,"%ИмяТаблицы%.АналитикаВалюта","ДанныеРегистра.АналитикаВалюта");
		
	КонецЕсли;
	
	ЕстьПоляВерсии = Ложь;
	ТекстАналитик = "";
	ТекстСоединенияАналитик = "";
	ТекстСоединенияАналитикЛог = "";
	
	тАналитикиТекУровня = тИспользуемыеАналитики.Скопировать(Новый Структура("УровеньРасчета",УровеньРасчета));
	тАналитикиТекУровня.Сортировать("Поле убыв");
	Для Каждого текАналитика Из тАналитикиТекУровня Цикл
		
		Поле = текАналитика.Поле;
		Если Поле = "АналитикаВалюта" Тогда
			Если ИндексРегистра <> 0 Тогда
				ТекстАналитик = ТекстАналитик + ",
				|				ЗначенияПоказателей." + Поле + " КАК " + Поле;
				ТекстСоединенияАналитик = ТекстСоединенияАналитик + "
				|			И ДанныеРегистра." + Поле + " = НовыеЗначенияПоказателей." + Поле;
				ТекстСоединенияАналитикЛог = ТекстСоединенияАналитикЛог + "
				|			И ДанныеРегистра." + Поле + " = ЛогИзмененныхПоказателей." + Поле;
			КонецЕсли;
		ИначеЕсли Лев(Поле,9) = "Аналитика" Тогда
			Инд = Число(Сред(Поле,10,1));
			Если ТекИндексРегистра < Инд Тогда
				ТекстДополнительныхПолей = СтрЗаменить(ТекстДополнительныхПолей,"%ИмяТаблицы%." + Поле,"НЕОПРЕДЕЛЕНО");
			Иначе
				ТекстДополнительныхПолей = СтрЗаменить(ТекстДополнительныхПолей,"%ИмяТаблицы%." + Поле,"ДанныеРегистра." + Поле);
				ТекстДополнительногоОтбора = СтрЗаменить(ТекстДополнительногоОтбора,"%ИмяТаблицы%." + Поле,"ДанныеРегистра." + Поле);
				ТекстАналитик = ТекстАналитик + ",
				|				ЗначенияПоказателей." + Поле + " КАК " + Поле;
				ТекстСоединенияАналитик = ТекстСоединенияАналитик + "
				|			И ДанныеРегистра." + Поле + " = НовыеЗначенияПоказателей." + Поле;
				ТекстСоединенияАналитикЛог = ТекстСоединенияАналитикЛог + "
				|			И ДанныеРегистра." + Поле + " = ЛогИзмененныхПоказателей." + Поле;
			КонецЕсли;
		ИначеЕсли Поле = "ПериодОтчета" Тогда
			Продолжить;
		Иначе 
			ЕстьПоляВерсии = Истина;
		КонецЕсли;
		
		Если текАналитика.ПолеВерсии Тогда
			ЕстьПоляВерсии = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьПоляВерсии Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстВерсииЛог%",",
		|	%ИмяТаблицы_Версии% КАК ДанныеВерсий");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстВерсииЛог%","");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ИмяТаблицы_Версии%",ПрефиксТаблицыВерсий + Формат(УИДГруппыОтборов,"ЧН=0; ЧГ=0"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстАналитик%",ТекстАналитик);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстСоединенияАналитик%",ТекстСоединенияАналитик);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстСоединенияАналитикЛог%",ТекстСоединенияАналитикЛог);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстДопПолей%",СтрЗаменить(ТекстДополнительныхПолей,"%ИмяТаблицы%","ДанныеВерсий"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстДопПолейЛог%",СтрЗаменить(ТекстДополнительныхПолей,"ДанныеРегистра.Значение КАК ЗначениеНечисловое","ДанныеРегистра.ЗначениеНечисловое КАК ЗначениеНечисловое"));
	ТекстДополнительногоОтбора = СтрЗаменить(ТекстДополнительногоОтбора,"%ИмяТаблицы%","ДанныеВерсий");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстДопОтбора%",ТекстДополнительногоОтбора);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстДопОтбораЛог%",СтрЗаменить(ТекстДополнительногоОтбора,"ДанныеВерсий.ПериодОтчета","ДанныеРегистра.ПериодОтчета"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ОтборПоказатель%","&ОтборПоказателей_"+Формат(УИДГруппыОтборов,"ЧН=0; ЧГ=0")+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧН=0; ЧГ=0"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстОтбораЛог%", СтрЗаменить(ТекстОтбораЛог,"%ИмяТаблицы%","ДанныеРегистра"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстОтбораЛогСоединение%", СтрЗаменить(ТекстОтбораЛог,"%ИмяТаблицы%","ЛогИзмененныхПоказателей"));
	
	НовСтрДанные 							= тПодзапросыДанных.Добавить();
	НовСтрДанные.НомерПодзапроса 			= тПодзапросыДанных.Количество();
	НовСтрДанные.ТекстПодзапроса 			= ТекстЗапроса;                              
	НовСтрДанные.КомментарийКПодзапросу 	= "ПОДЗАПРОС ДЛЯ ПОЛУЧЕНИЯ ДАННЫХ " + Формат(УИДГруппыОтборов,"ЧН=0; ЧГ=0");
	
КонецПроцедуры	

Процедура ПодготовитьЗапросУровня0(СтруктураРасчетаПоказателей)
	
	глТаблицаПересчетаПоказателей	= СтруктураРасчетаПоказателей.глТаблицаПересчетаПоказателей;
	тРасшифровкаГруппОтборов       	= СтруктураРасчетаПоказателей.тРасшифровкаГруппОтборов;
	тКэшИменПоказателей 			= СтруктураРасчетаПоказателей.тКэшИменПоказателей;
	тКэшГруппОтборовПоказателей 	= СтруктураРасчетаПоказателей.тКэшГруппОтборовПоказателей;
	
	// Подготовим структуру параметров для расчета текущего уровня	
	СтруктураПараметровТекущегоУровня = Новый Структура;

	тПодзапросыДанных = ПолучитьОписаниеТаблицыПодзапроса();
	СтруктураПараметровТекущегоУровня.Вставить("тПодзапросыДанных",тПодзапросыДанных);
	
	тПодзапросыДанныхВТ = ПолучитьОписаниеТаблицыПодзапроса();
	СтруктураПараметровТекущегоУровня.Вставить("тПодзапросыДанныхВТ",тПодзапросыДанныхВТ);
	
	тПараметрыПакета = ПолучитьОписаниеТаблицыПараметров();
	СтруктураПараметровТекущегоУровня.Вставить("тПараметрыПакета",тПараметрыПакета);
	
	тПараметрыПакетаВТ = ПолучитьОписаниеТаблицыПараметров();
	СтруктураПараметровТекущегоУровня.Вставить("тПараметрыПакетаВТ",тПараметрыПакетаВТ);	
	
	// Запросы для получения данных из регистров и справочников
	ПодготовитьТаблицуВнутренниеДанные(СтруктураРасчетаПоказателей, СтруктураПараметровТекущегоУровня);
	
	// Запросы для получения данных из произвольного запроса
	ПодготовитьТекстЗапросаПоПроизвольномуЗапросу(СтруктураРасчетаПоказателей, СтруктураПараметровТекущегоУровня);
	
	// Запросы для получения данных из внешних источников
	ПодготовитьТекстЗапросаПоИсточникуВнешнему(СтруктураРасчетаПоказателей, СтруктураПараметровТекущегоУровня);
	
	// Запросы для получения данных рассчитанных произвольным кодом
	ПодготовитьТекстЗапросаПоПроизвольномуКоду(СтруктураРасчетаПоказателей, СтруктураПараметровТекущегоУровня);

	// Запросы для получения данных из показателей отчетов	
	ВидыОтчетовСинтетика = тКэшИменПоказателей.Скопировать();
	ВидыОтчетовСинтетика.Свернуть("ВидОтчета");
	СтруктураПараметровТекущегоУровня.Вставить("ВидыОтчетовСинтетика",ВидыОтчетовСинтетика.ВыгрузитьКолонку("ВидОтчета"));
	СтруктураПараметровТекущегоУровня.Вставить("ПрефиксТаблицыВерсий","втВерсииБаза_");
	СтруктураПараметровТекущегоУровня.Вставить("УровеньРасчета",0);
	СтруктураПараметровТекущегоУровня.Вставить("ВидОперацииРасчета",Перечисления.ВидыОперацийРасчетаПоказателей.ПолучениеЗначенийОперандов);
    СтруктураПараметровТекущегоУровня.Вставить("ТекущийПериод",Истина);
	СтруктураПараметровТекущегоУровня.Вставить("ЕстьСоответствиеПериодов",Ложь);
	
	// Получим запросы подъема данных
	КэшИменПоказателейТек = тКэшИменПоказателей.Скопировать();
	КэшИменПоказателейТек.Свернуть("УИДГруппыОтборов,Показатель,УровеньРасчета");	
	Для Каждого СтрГруппаУИД Из тКэшГруппОтборовПоказателей Цикл
		
		ПоказателиТекущейОбласти = КэшИменПоказателейТек.Скопировать(Новый Структура("УИДГруппыОтборов,УровеньРасчета",СтрГруппаУИД.УИДГруппыОтборов,1)).ВыгрузитьКолонку("Показатель");
		Если ПоказателиТекущейОбласти.Количество() = 0 Тогда
			 Продолжить;
		КонецЕсли;
		
		// Получим запрос для версий
		СтруктураПараметровТекущегоУровня.Вставить("УИДГруппыОтборов",СтрГруппаУИД.УИДГруппыОтборов);
        СтруктураПараметровТекущегоУровня.Вставить("ИндексРегистра",СтрГруппаУИД.ИндексРегистра);
		СтруктураПараметровТекущегоУровня.Вставить("ТекущийПериод",СтрГруппаУИД.ТекущийПериод);
		СтруктураПараметровТекущегоУровня.Вставить("ИндексЗапроса",0);
		
		ПолучитьПодзапросТекущейВерсии(СтруктураРасчетаПоказателей, СтруктураПараметровТекущегоУровня); 			
		ПолучитьТекстЗначенийПоказателей(СтруктураРасчетаПоказателей, СтруктураПараметровТекущегоУровня);
		
		НОтбор 					= тПараметрыПакета.Добавить();
		НОтбор.ИмяОтбора 		= "ОтборПоказателей_"+Формат(СтрГруппаУИД.УИДГруппыОтборов,"ЧН=0; ЧГ=0")+"_ИндексЗапроса_0";
		НОтбор.ТипОтбора 		= Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
		НОтбор.ЗначениеОтбора	= ПоказателиТекущейОбласти;
		НОтбор.УИДГруппыОтбора  = СтрГруппаУИД.УИДГруппыОтборов;
		
	КонецЦикла;
	
	Если тПодзапросыДанныхВТ.Количество() > 0 Тогда
		нСтрокаТаблицыЗапросов 						= глТаблицаПересчетаПоказателей.Добавить();
		нСтрокаТаблицыЗапросов.ТекстПодзапросов     = ПолучитьТекстПоТаблицеПодзапросовВТ(тПодзапросыДанныхВТ);
		нСтрокаТаблицыЗапросов.КомментарийКПакету 	= "ВРЕМЕННЫЕ ТАБЛИЦЫ ДЛЯ ПОЛУЧЕНИЯ ДАННЫХ ВНЕШНИХ ТАБЛИЦ";
	    нСтрокаТаблицыЗапросов.тПараметрыПакета     = тПараметрыПакетаВТ;
		нСтрокаТаблицыЗапросов.ВидОперацииРасчета   = Перечисления.ВидыОперацийРасчетаПоказателей.ВнешниеТаблицы;
	КонецЕсли;
	
	нСтрокаТаблицыЗапросов 						= глТаблицаПересчетаПоказателей.Добавить();
	нСтрокаТаблицыЗапросов.ТекстПодзапросов     = ПолучитьТекстПоТаблицеПодзапросов(тПодзапросыДанных,"втПоказателиРаскрытия0");
	нСтрокаТаблицыЗапросов.КомментарийКПакету 	= "ЗАПРОС ДЛЯ ПОДЪЕМА ОПЕРАНДОВ УРОВНЯ - 0";
    нСтрокаТаблицыЗапросов.тПараметрыПакета     = тПараметрыПакета;
	нСтрокаТаблицыЗапросов.ВидОперацииРасчета   = Перечисления.ВидыОперацийРасчетаПоказателей.ПолучениеЗначенийОперандов;
	
	ПодготовитьТекстТрансформацииТекущегоУровня(СтруктураРасчетаПоказателей, 0);
	
КонецПроцедуры

Процедура ПодготовитьТекстТрансформацииТекущегоУровня(СтруктураРасчетаПоказателей, УровеньРасчета)
	
	глТаблицаПересчетаПоказателей 	= СтруктураРасчетаПоказателей.глТаблицаПересчетаПоказателей;
	тПоказателиОперанды				= СтруктураРасчетаПоказателей.тПоказателиОперанды;
	тИспользуемыеАналитики			= СтруктураРасчетаПоказателей.тИспользуемыеАналитики;
	тИспользуемыеРесурсы            = СтруктураРасчетаПоказателей.тИспользуемыеРесурсы;
	МаксКлючевыхАналитик			= СтруктураРасчетаПоказателей.МаксКлючевыхАналитик;
	МаксИспользуемыхАналитик		= СтруктураРасчетаПоказателей.МаксИспользуемыхАналитик;
	МаксУровеньРучныхРасчетов		= СтруктураРасчетаПоказателей.МаксУровеньРучныхРасчетов;
	ЕстьДополненияАналитик			= СтруктураРасчетаПоказателей.ЕстьДополненияАналитик;
	тРасшифровкаГруппОтборов		= СтруктураРасчетаПоказателей.тРасшифровкаГруппОтборов;

	тПараметрыПакета 	= ПолучитьОписаниеТаблицыПараметров();
	тПодзапросыДанных 	= ПолучитьОписаниеТаблицыПодзапроса();
	
	// Тексты аналитик, ресурсов и группировок
	глСтруктураИспользуемыхАналитик = Новый Структура;
	тГруппыИтоговыхПоказателейТекущегоУровня = тПоказателиОперанды.Скопировать(Новый Структура("УровеньРасчетаОперанда",УровеньРасчета+1));
	
	ТекстРесурсовПолей = СформироватьТекстРесурсов(тИспользуемыеРесурсы,УровеньРасчета,2) + СформироватьТекстАналитик(тИспользуемыеАналитики,УровеньРасчета+1,2,Истина);
	ТекстРесурсовПолей = СтрЗаменить(ТекстРесурсовПолей,"%ИмяТаблицы%","ПоказателиРаскрытия"); 
		
	ТекстРесурсовПолейГруппировка = СформироватьТекстРесурсов(тИспользуемыеРесурсы,УровеньРасчета,3) + СформироватьТекстАналитик(тИспользуемыеАналитики,УровеньРасчета+1,3,Истина);; 
	ТекстРесурсовПолейГруппировка = СтрЗаменить(ТекстРесурсовПолейГруппировка,"%ИмяТаблицы%","ПоказателиРаскрытия");
	
	ЕстьАналитикаВалюта = тИспользуемыеАналитики.Скопировать(Новый Структура("УровеньРасчета,Поле",УровеньРасчета+1,"АналитикаВалюта")).Количество() > 0;
		
	// Тексты запросов
	Если УровеньРасчета = 0 Тогда
		
		ТекстШаблонЗапроса = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|   %КодВФормуле% КАК КодВФормуле,
		|	ПоказателиРаскрытия.Показатель КАК Показатель,
		|	ПоказателиРаскрытия.ПериодОтчета КАК ПериодОтчета,
		|	ПоказателиРаскрытия.УИДГруппыОтборов КАК УИДГруппыОтборов %ТекстАналитикРесурсов%
		|//ПОМЕСТИТЬ
		|ИЗ
		|	втПоказателиРаскрытия0 КАК ПоказателиРаскрытия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОперанды0 КАК ПоказателиОперанды
		|		ПО ПоказателиРаскрытия.Показатель = ПоказателиОперанды.ПоказательОперанд
		|			И ПоказателиРаскрытия.УИДГруппыОтборов = ПоказателиОперанды.УИДГруппыОтборов
		|	%СоединениеДругиеИсточники%
		|
		|ГДЕ 
		|	ПоказателиОперанды.КодВФормуле В (&%ОтборПоказателей%)
		|
		|СГРУППИРОВАТЬ ПО
		|   %КодВФормуле%,
		|	ПоказателиРаскрытия.Показатель,
		|	ПоказателиРаскрытия.УИДГруппыОтборов,
		|	ПоказателиРаскрытия.ПериодОтчета %ТекстАналитикРесурсовГруппировка%";
		
		Если ЕстьДополненияАналитик Тогда
			ТекстШаблонЗапроса = СтрЗаменить(ТекстШаблонЗапроса, "%КодВФормуле%", "ВЫБОР
			|		КОГДА ПоказателиОперанды.ДляДополненияАналитик 
			|			ТОГДА """"
			|		ИНАЧЕ ПоказателиОперанды.КодВФормуле
			|	КОНЕЦ");
		Иначе
			ТекстШаблонЗапроса = СтрЗаменить(ТекстШаблонЗапроса, "%КодВФормуле%", "ПоказателиОперанды.КодВФормуле");
		КонецЕсли;
		
		тГруппыИтоговыхПоказателей = тГруппыИтоговыхПоказателейТекущегоУровня.Скопировать(,"ТрансформацияПолей");
		тГруппыИтоговыхПоказателей.Свернуть("ТрансформацияПолей");		
		
	Иначе
		
		ТекстШаблонЗапроса = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|	ПоказателиРаскрытия.Показатель КАК Показатель,
		|	ПоказателиРаскрытия.ПериодОтчета КАК ПериодОтчета,
		|	%УИДГруппыОтборов% КАК УИДГруппыОтборов,
		|	%УИДГруппыТрансформации% КАК УИДГруппыТрансформации %ТекстАналитикРесурсов%
		|//ПОМЕСТИТЬ
		|ИЗ
		|	втПоказателиРаскрытия%УровеньРасчета% КАК ПоказателиРаскрытия
		|	%СоединениеДругиеИсточники%
		|
		|ГДЕ 
		|	ПоказателиРаскрытия.Показатель В (&%ОтборПоказателей%)
		|	%ТекстОтбора%
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоказателиРаскрытия.Показатель,
		|	ПоказателиРаскрытия.ПериодОтчета %ТекстАналитикРесурсовГруппировка%";
		
		тГруппыИтоговыхПоказателей = тГруппыИтоговыхПоказателейТекущегоУровня.Скопировать(,"УИДГруппыОтборов,УИДГруппыТрансформации");
		тГруппыИтоговыхПоказателей.Свернуть("УИДГруппыОтборов,УИДГруппыТрансформации");
		
	КонецЕсли;
	
	Для Каждого СтрГруппа Из тГруппыИтоговыхПоказателей Цикл
		
		ТекстПодзапроса 			= ТекстШаблонЗапроса;
		СоединениеДругиеИсточники	= "";
		
		Если УровеньРасчета = 0 Тогда
			ПоказателиТекущейГруппы = тГруппыИтоговыхПоказателейТекущегоУровня.Скопировать(
				Новый Структура("ТрансформацияПолей",СтрГруппа.ТрансформацияПолей),"КодВФормуле").ВыгрузитьКолонку("КодВФормуле");
			ТрансформацияПолей = СтрГруппа.ТрансформацияПолей;			
		Иначе
			ПоказателиТекущейГруппы = тГруппыИтоговыхПоказателейТекущегоУровня.Скопировать(
				Новый Структура("УИДГруппыОтборов,УИДГруппыТрансформации",СтрГруппа.УИДГруппыОтборов,СтрГруппа.УИДГруппыТрансформации),"ПоказательОперанд").ВыгрузитьКолонку("ПоказательОперанд");
			ТрансформацияПолей	=  тГруппыИтоговыхПоказателейТекущегоУровня.Найти(СтрГруппа.УИДГруппыТрансформации,"УИДГруппыТрансформации").ТрансформацияПолей;
			
			ТекстОтбора = СформироватьТекстОтбора(тРасшифровкаГруппОтборов,тПараметрыПакета,СтрГруппа.УИДГруппыОтборов,,,Истина);
        	ТекстОтбора = СтрЗаменить(ТекстОтбора,"%ИмяТаблицы%","ПоказателиРаскрытия");
			ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса,"%ТекстОтбора%",ТекстОтбора);
			
			ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса,"%УИДГруппыОтборов%",Формат(СтрГруппа.УИДГруппыОтборов,"ЧН=0; ЧГ=0"));
			ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса,"%УИДГруппыТрансформации%",Формат(СтрГруппа.УИДГруппыТрансформации,"ЧН=0; ЧГ=0"));
			ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса,"%УровеньРасчета%",УровеньРасчета);
			
		КонецЕсли;
		
		// Установим отбор по показателям
		НОтбор 					= тПараметрыПакета.Добавить();
		НОтбор.ИмяОтбора 		= "ОтборПоказателейДляТрансформации_"+СтрЗаменить(Новый УникальныйИдентификатор,"-","");
		НОтбор.ТипОтбора 		= Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
		НОтбор.ЗначениеОтбора	= ПоказателиТекущейГруппы;
		
		ТекстПодзапроса			= СтрЗаменить(ТекстПодзапроса,"%ОтборПоказателей%",НОтбор.ИмяОтбора);
		
		// Подготовим текст по аналитикам 
		Для Инд = МаксКлючевыхАналитик+1 По МаксИспользуемыхАналитик Цикл
			СтруктураИспользованияПолей = Новый Структура;
			СтруктураИспользованияПолей.Вставить("ТекстАналитик",",
			|	НЕОПРЕДЕЛЕНО КАК Аналитика"+Инд);
			СтруктураИспользованияПолей.Вставить("ТекстГруппировкиАналитик","");
			глСтруктураИспользуемыхАналитик.Вставить("Аналитика"+Инд,СтруктураИспользованияПолей);			
		КонецЦикла;
		Если ЕстьАналитикаВалюта Тогда
			СтруктураИспользованияПолей = Новый Структура;
			СтруктураИспользованияПолей.Вставить("ТекстАналитик",",
			|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК АналитикаВалюта");
			СтруктураИспользованияПолей.Вставить("ТекстГруппировкиАналитик","");
			глСтруктураИспользуемыхАналитик.Вставить("АналитикаВалюта",СтруктураИспользованияПолей);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТрансформацияПолей) Тогда
			
			ПравилаИспользованияАналитик = СтрРазделить(ТрансформацияПолей,";");
			
			Для Каждого СтрПравило Из ПравилаИспользованияАналитик Цикл
				
				Если ЗначениеЗаполнено(СтрПравило) Тогда
					
					ЗначенияПравилИспользованияПолей = СтрРазделить(СтрПравило,"@");
					
					Если ЗначенияПравилИспользованияПолей[0] = "Поле источника" Тогда
						
						ТекстАналитик = ",
						|	ПоказателиРаскрытия."+СтрЗаменить(ЗначенияПравилИспользованияПолей[1],".","")+" КАК "+ЗначенияПравилИспользованияПолей[2];
						
						ТекстГруппировкиАналитик = ",
						|	ПоказателиРаскрытия."+СтрЗаменить(ЗначенияПравилИспользованияПолей[1],".","");
						
						СтруктураИспользованияПолей = Новый Структура;
						СтруктураИспользованияПолей.Вставить("ТекстАналитик",ТекстАналитик);
						СтруктураИспользованияПолей.Вставить("ТекстГруппировкиАналитик",ТекстГруппировкиАналитик);
						глСтруктураИспользуемыхАналитик.Вставить(ЗначенияПравилИспользованияПолей[2],СтруктураИспользованияПолей);						
						
					ИначеЕсли ЗначенияПравилИспользованияПолей[0] = "Фиксированное значение" Тогда
						
						нПараметр = ДобавитьПараметрВПакет(тПараметрыПакета,
							Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение,
							ЗначениеИзСтрокиВнутр(СтрЗаменить(ЗначенияПравилИспользованияПолей[1],".","")),
							ЗначенияПравилИспользованияПолей[2]);
		    						
						ТекстАналитик = ",
						|	&" + нПараметр.ИмяОтбора + " КАК " + ЗначенияПравилИспользованияПолей[2];
						
						СтруктураИспользованияПолей = Новый Структура;
						СтруктураИспользованияПолей.Вставить("ТекстАналитик",ТекстАналитик);
						СтруктураИспользованияПолей.Вставить("ТекстГруппировкиАналитик","");
						глСтруктураИспользуемыхАналитик.Вставить(ЗначенияПравилИспользованияПолей[2],СтруктураИспользованияПолей);
						
					ИначеЕсли ЗначенияПравилИспользованияПолей[0] = "Контекст вызова заполнения" Тогда
						
						нПараметр = ДобавитьПараметрВПакет(тПараметрыПакета,
							"КонтекстВызоваЗаполнения",
							ЗначенияПравилИспользованияПолей[1],
							ЗначенияПравилИспользованияПолей[2]);
					
						ТекстАналитик = ",
						|	&" + нПараметр.ИмяОтбора + " КАК " + ЗначенияПравилИспользованияПолей[2];
						
						СтруктураИспользованияПолей = Новый Структура;
						СтруктураИспользованияПолей.Вставить("ТекстАналитик",ТекстАналитик);
						СтруктураИспользованияПолей.Вставить("ТекстГруппировкиАналитик","");
						глСтруктураИспользуемыхАналитик.Вставить(ЗначенияПравилИспользованияПолей[2],СтруктураИспользованияПолей);
						
					ИначеЕсли ЗначенияПравилИспользованияПолей[0] = "Поле другого источника" Тогда
						
						Показатель = ЗначениеИзСтрокиВнутр(СтрЗаменить(ЗначенияПравилИспользованияПолей[1],".",""));
						ИмяАналитики = ЗначенияПравилИспользованияПолей[2];
						нПараметр = ДобавитьПараметрВПакет(тПараметрыПакета,
							Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение,
							Показатель,
							"Показатель");							
						
						УровеньРасчетаИсточник = Число(ЗначенияПравилИспользованияПолей[3])-1;
						Если УровеньРасчетаИсточник = УровеньРасчета Тогда
							ТаблицаИсточник = "втПоказателиРаскрытия" + УровеньРасчетаИсточник;
						Иначе
							ТаблицаИсточник = "втЗначенияОперандов" + УровеньРасчетаИсточник;
						КонецЕсли;
							
						СоединениеДругиеИсточники = СоединениеДругиеИсточники + "
							|	ЛЕВОЕ СОЕДИНЕНИЕ 
							|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
							|			ЗначенияОперандов.ПериодОтчета КАК ПериодОтчета,
							|			ЗначенияОперандов." + ИмяАналитики + " КАК " + ИмяАналитики + "
							|		ИЗ
							|			" + ТаблицаИсточник + " КАК ЗначенияОперандов
							|		ГДЕ
							|			ЗначенияОперандов.Показатель = &" + нПараметр.ИмяОтбора + ") КАК ПоказателиРаскрытияДругиеИсточники_" + ИмяАналитики + "
							|		ПО ПоказателиРаскрытияДругиеИсточники_" + ИмяАналитики + ".ПериодОтчета = ПоказателиРаскрытия.ПериодОтчета";
					
						ТекстАналитик = ",
						|	ISNULL(ПоказателиРаскрытияДругиеИсточники_" + ИмяАналитики + "."+ИмяАналитики+",НЕОПРЕДЕЛЕНО) КАК "+ИмяАналитики;
						
						ТекстГруппировкиАналитик = ",
						|	ISNULL(ПоказателиРаскрытияДругиеИсточники_" + ИмяАналитики + "."+ИмяАналитики+",НЕОПРЕДЕЛЕНО)";
						
						СтруктураИспользованияПолей = Новый Структура;
						СтруктураИспользованияПолей.Вставить("ТекстАналитик",ТекстАналитик);
						СтруктураИспользованияПолей.Вставить("ТекстГруппировкиАналитик",ТекстГруппировкиАналитик);
						глСтруктураИспользуемыхАналитик.Вставить(ИмяАналитики,СтруктураИспользованияПолей);
					
					КонецЕсли;	 
					
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЕсли;
		
		ТекстАналитикРесурсов 				= ТекстРесурсовПолей;
		ТекстАналитикРесурсовГруппировка 	= ТекстРесурсовПолейГруппировка;
		Для Каждого СтрАналитика Из глСтруктураИспользуемыхАналитик Цикл
			ТекстАналитикРесурсов				= ТекстАналитикРесурсов + СтрАналитика.Значение.ТекстАналитик;
			ТекстАналитикРесурсовГруппировка    = ТекстАналитикРесурсовГруппировка + СтрАналитика.Значение.ТекстГруппировкиАналитик;
		КонецЦикла;
		
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса,"%ТекстАналитикРесурсов%",ТекстАналитикРесурсов);
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса,"%ТекстАналитикРесурсовГруппировка%",ТекстАналитикРесурсовГруппировка);
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса,"%СоединениеДругиеИсточники%",СоединениеДругиеИсточники);
		
		// Добавим подзапрос в таблицу
		НовСтрДанные 							= тПодзапросыДанных.Добавить();		
		НовСтрДанные.НомерПодзапроса 			= тПодзапросыДанных.Количество();
		НовСтрДанные.ТекстПодзапроса 			= ТекстПодзапроса;                              
		НовСтрДанные.КомментарийКПодзапросу 	= "ПОДЗАПРОС ДЛЯ ПОЛУЧЕНИЯ СГУППИРОВАННЫХ ДАННЫХ ПО ПРАВИЛУ " + ТрансформацияПолей;
	
	КонецЦикла;
	
	НовСтрТаб 								= глТаблицаПересчетаПоказателей.Добавить();
	НовСтрТаб.ТекстПодзапросов 				= ПолучитьТекстПоТаблицеПодзапросов(тПодзапросыДанных,"втЗначенияОперандов"+УровеньРасчета);                              
	НовСтрТаб.КомментарийКПакету 			= "СГРУППИРОВАННЫЕ И ПРЕОБРАЗОВАННЫЕ ДАННЫЕ ОПЕРАНДОВ УРОВНЯ - " + УровеньРасчета;
	НовСтрТаб.тПараметрыПакета 				= тПараметрыПакета;
	НовСтрТаб.ВидОперацииРасчета           	= Перечисления.ВидыОперацийРасчетаПоказателей.ТрансформацияОперандов;
	НовСтрТаб.ВыгружатьРезультатВТаблицу	= УровеньРасчета < МаксУровеньРучныхРасчетов;
	
КонецПроцедуры	

#КонецОбласти


#Область ПроцедурыГенерацииЗапросовРегистровИСправочниковВнутр

////////////////////////////////////////////////////////////////////////////////
// Процедуры для подготовки текстов запросов для подъема данных из регистров и справочников
//  
////////////////////////////////////////////////////////////////////////////////

Процедура ДобавитьТаблицуПериодов(СтруктураПараметров)
	
	тПараметрыПакетаВТ		= СтруктураПараметров.тПараметрыПакетаВТ;
	тПодзапросыДанныхВТ		= СтруктураПараметров.тПодзапросыДанныхВТ;
	
	// Добавим временную таблицу с периодами
	Если тПодзапросыДанныхВТ.Найти("ПЕРИОДЫ","КомментарийКПодзапросу") = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Периоды.ДатаНачала КАК ДатаНачала,
		|	Периоды.ДатаОкончания КАК ДатаОкончания,
		|	Периоды.Ссылка КАК ПериодОтчета		
		|ПОМЕСТИТЬ втПериоды
		|ИЗ
		|	Справочник.Периоды КАК Периоды
		|ГДЕ
		|	Периоды.Периодичность = &ПериодичностьОтчета
		|	И Периоды.ДатаНачала МЕЖДУ &НачалоПериодаОтчета И &КонецПериодаОтчета";
		
		НСтрокаДанные = тПодзапросыДанныхВТ.Вставить(0);
		НСтрокаДанные.НомерПодзапроса = 1;
		НСтрокаДанные.ТекстПодзапроса = ТекстЗапроса;                              
		НСтрокаДанные.КомментарийКПодзапросу = "ПЕРИОДЫ";
		
		ДобавитьПараметрВПакет(тПараметрыПакетаВТ, Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчета,,"НачалоПериодаОтчета");
		ДобавитьПараметрВПакет(тПараметрыПакетаВТ, Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчета,,"КонецПериодаОтчета");
		ДобавитьПараметрВПакет(тПараметрыПакетаВТ, "ПериодичностьОтчета",,"ПериодичностьОтчета");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПривестиПериод(СтрокаДата,СпособВычисленияПараметра,Знач УточнениеСпособаОпределения,ПривестиКНачалуПериода = Ложь)
	
	Если СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчета Тогда
		
		Возврат "НАЧАЛОПЕРИОДА(" + СтрокаДата + ", %ПериодичностьОтчета%)";
		
	ИначеЕсли СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчета Тогда
		
		Если ПривестиКНачалуПериода Тогда
			Возврат ПривестиПериод(СтрокаДата,Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчета,УточнениеСпособаОпределения);
		КонецЕсли;
		
		Возврат "КОНЕЦПЕРИОДА(" + СтрокаДата + ", %ПериодичностьОтчета%)";
		
	ИначеЕсли СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаВышестоящегоПериода Тогда
		
		Если УточнениеСпособаОпределения = Перечисления.Периодичность.ДевятьМесяцев Тогда
			ТекстОшибки = НСтр("ru = 'Дата начала вышестоящего периода с типом ""Девять месяцев"" не поддерживается'");
			ВызватьИсключение(ТекстОшибки);
		КонецЕсли;
		
		Если УточнениеСпособаОпределения = Неопределено Тогда
			УточнениеСпособаОпределения = "%ПериодичностьОтчета%";
		КонецЕсли;
		
		Возврат "НАЧАЛОПЕРИОДА(" + СтрокаДата + ", " + УточнениеСпособаОпределения + ")";
		
	ИначеЕсли СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаВышестоящегоПериода Тогда
		
		Если УточнениеСпособаОпределения = Перечисления.Периодичность.ДевятьМесяцев Тогда
			ТекстОшибки = НСтр("ru = 'Дата конца вышестоящего периода с типом ""Девять месяцев"" не поддерживается'");
			ВызватьИсключение(ТекстОшибки);
		КонецЕсли;
		
		Если ПривестиКНачалуПериода Тогда
			Возврат ПривестиПериод(СтрокаДата,Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаВышестоящегоПериода,УточнениеСпособаОпределения);
		КонецЕсли;
		
		Если УточнениеСпособаОпределения = Неопределено Тогда
			УточнениеСпособаОпределения = "%ПериодичностьОтчета%";
		КонецЕсли;
		
		Возврат "КОНЕЦПЕРИОДА(" + СтрокаДата + ", " + УточнениеСпособаОпределения + ")";
		
	ИначеЕсли СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГода Тогда
		
		Возврат "НАЧАЛОПЕРИОДА(" + СтрокаДата + ", ГОД)";
		
	ИначеЕсли СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГода Тогда
		
		Если ПривестиКНачалуПериода Тогда
			Возврат ПривестиПериод(СтрокаДата,Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГода,УточнениеСпособаОпределения);
		КонецЕсли;
		
		Возврат "КОНЕЦПЕРИОДА(" + СтрокаДата + ", ГОД)";
		
	ИначеЕсли СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчетаСоСдвигом Тогда
		
		Если УточнениеСпособаОпределения = Неопределено ИЛИ УточнениеСпособаОпределения = 0 Тогда
			Возврат ПривестиПериод(СтрокаДата,Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчета,УточнениеСпособаОпределения);
		КонецЕсли;
		
		Возврат "ДОБАВИТЬКДАТЕ(" + СтрокаДата + ", %ПериодичностьОтчета%, " + Формат(УточнениеСпособаОпределения,"ЧН=0; ЧГ=0") + ")";
		
	ИначеЕсли СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчетаСоСдвигом Тогда
		
		Если ПривестиКНачалуПериода Тогда
			Возврат ПривестиПериод(СтрокаДата,Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчетаСоСдвигом,УточнениеСпособаОпределения);
		КонецЕсли;
		
		Если УточнениеСпособаОпределения = Неопределено ИЛИ УточнениеСпособаОпределения = 0 Тогда
			Возврат ПривестиПериод(СтрокаДата,Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчета,УточнениеСпособаОпределения);
		КонецЕсли;
			
		Возврат "КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(" + СтрокаДата + ", %ПериодичностьОтчета%, " + Формат(УточнениеСпособаОпределения,"ЧН=0; ЧГ=0") + "), %ПериодичностьОтчета%)";
		
	ИначеЕсли СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГодаСоСдвигом Тогда
		
		Если УточнениеСпособаОпределения = Неопределено ИЛИ УточнениеСпособаОпределения = 0 Тогда
			Возврат ПривестиПериод(СтрокаДата,Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГода,УточнениеСпособаОпределения);
		КонецЕсли;
				
		Возврат "ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(" + СтрокаДата + ", ГОД), ГОД, " + Формат(УточнениеСпособаОпределения,"ЧН=0; ЧГ=0") + ")";
		
	ИначеЕсли СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГодаСоСдвигом Тогда
		
		Если ПривестиКНачалуПериода Тогда
			Возврат ПривестиПериод(СтрокаДата,Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГодаСоСдвигом,УточнениеСпособаОпределения);;
		КонецЕсли;
		
		Если УточнениеСпособаОпределения = Неопределено ИЛИ УточнениеСпособаОпределения = 0 Тогда
			Возврат ПривестиПериод(СтрокаДата,Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГода,УточнениеСпособаОпределения);
		КонецЕсли;
				
		Возврат "ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(" + СтрокаДата + ", ГОД), ГОД, " + Формат(УточнениеСпособаОпределения,"ЧН=0; ЧГ=0") + ")";
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

Функция ШаблонЗапросаВнутрРегистрНакоплений(ДанныеДляРасчета)

	// Найдем условия вычисления периода регистра даты начала
	ПараметрПериодДН = ДанныеДляРасчета.ТаблицаПараметровОтбораБД.Найти("ДатаНач","ПолеБД");
	Если ПараметрПериодДН = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Не найден обязательный отбор ""ДатаНач""'");
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПараметрПериодДН.СпособВычисленияПараметра) Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнен способ вычисления параметра для отбора ""ДатаНач""'");
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	// Найдем условия вычисления периода регистра даты окончания
	ПараметрПериодДК = ДанныеДляРасчета.ТаблицаПараметровОтбораБД.Найти("ДатаКон","ПолеБД");
	Если ПараметрПериодДК = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Не найден обязательный отбор ""ДатаКон""'");
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПараметрПериодДК.СпособВычисленияПараметра) Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнен способ вычисления параметра для отбора ""ДатаКон"" источника данных %1'");
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;	

	// Сформируем тексты запросов
	Если ДанныеДляРасчета.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления Тогда
		
		Если ДанныеДляРасчета.Свойство("ЕстьОстатки") Тогда
			
			ТекстЗапросаВТ = "
			|ВЫБРАТЬ
			|	Периоды.ДатаНачала КАК ДатаНачала,
			|	Периоды.ПериодОтчета КАК ПериодОтчета %ТекстАналитики% %ТекстРесурсы%	
			|ПОМЕСТИТЬ втДанныеРегистра_%УИД%
			|ИЗ
			|	втПериоды КАК Периоды
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.%ИмяТаблицы%.ОстаткиИОбороты(%ОтборДатаНач%,%ОтборДатаКон%,%ПериодичностьОтчета%,,
			|		%ОтборВТ%) КАК ТаблицаДанных
			|		ПО %ТекстПериодСоединение%
			|		%ОтборПоПериоду%
			|;
			|
			|/////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МаксимальныеНеПустыеПериоды.ПериодОтчета КАК ПериодОтчета %ТекстАналитики% %ТекстРесурсыОстатки% 
			|ПОМЕСТИТЬ втДанные_%УИД%
			|ИЗ
			|	(ВЫБРАТЬ
			|		МАКСИМУМ(ТаблицаДанных.ДатаНачала) КАК ДатаНачала,
			|		Данные.ПериодОтчета КАК ПериодОтчета %ТекстАналитики%
			|	ИЗ
			|		втДанныеРегистра_%УИД% КАК Данные
			|			ЛЕВОЕ СОЕДИНЕНИЕ втДанныеРегистра_%УИД% КАК ТаблицаДанных
			|			ПО Данные.ДатаНачала >= ТаблицаДанных.ДатаНачала
			|	ГДЕ %ТекстРесурсыУсловиеНО%
			|	
			|	СГРУППИРОВАТЬ ПО
			|		Данные.ПериодОтчета %ТекстАналитикиГруппировка%) КАК МаксимальныеНеПустыеПериоды
			|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеРегистра_%УИД% КАК ТаблицаДанных
			|		ПО ТаблицаДанных.ДатаНачала = МаксимальныеНеПустыеПериоды.ДатаНачала %ТекстАналитикиСоединение%";
			Если ДанныеДляРасчета.Свойство("ЕстьОбороты") Тогда
				ТекстЗапросаВТ = ТекстЗапросаВТ + "
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ТаблицаДанных.ПериодОтчета КАК ПериодОтчета %ТекстАналитики% %ТекстРесурсыОбороты% 
				|ИЗ
				|	втДанныеРегистра_%УИД% КАК ТаблицаДанных";
			КонецЕсли;			
						
		Иначе
				
			Если ДанныеДляРасчета.ОсновнаяТаблицаРегистра Тогда
				
				ТекстЗапросаВТ = "
				|ВЫБРАТЬ
				|	Периоды.ПериодОтчета КАК ПериодОтчета %ТекстАналитики% %ТекстРесурсы%	
				|ПОМЕСТИТЬ втДанные_%УИД%
				|ИЗ
				|	втПериоды КАК Периоды
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.%ИмяТаблицы% КАК ТаблицаДанных
				|		ПО %ТекстПериодСоединение%
				|		%Отбор% %ОтборПоПериоду%
				|";
				
			Иначе
				
				ТекстЗапросаВТ = "
				|ВЫБРАТЬ
				|	Периоды.ПериодОтчета КАК ПериодОтчета %ТекстАналитики% %ТекстРесурсы%	
				|ПОМЕСТИТЬ втДанные_%УИД%
				|ИЗ
				|	втПериоды КАК Периоды
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.%ИмяТаблицы%.Обороты(%ОтборДатаНач%,%ОтборДатаКон%,%ПериодичностьОтчета%,
				|		%ОтборВТ%) КАК ТаблицаДанных
				|		ПО %ТекстПериодСоединение%
				|		%ОтборПоПериоду%
				|";
					
			КонецЕсли;
				
		КонецЕсли;		
				
	ИначеЕсли ДанныеДляРасчета.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
		
		Если ДанныеДляРасчета.Свойство("ЕстьОстатки") Тогда
				
			ТекстЗапросаВТ = "
			|ВЫБРАТЬ
			|	ПоказателиСчета.НомерСреза КАК НомерСреза,
			|	ПоказателиСчета.Показатель КАК Показатель,
			|	ПоказателиСчета.УИДГруппыОтборов КАК УИДГруппыОтборов,
			|	ПоказателиСчета.Счет КАК Счет
			|ПОМЕСТИТЬ втПоказателиСчета_%УИД% 
			|	ИЗ &ПоказателиСчета_%УИД% КАК ПоказателиСчета
			|;
			|
			|/////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаДанных.Счет КАК Счет,
			|	Периоды.ДатаНачала КАК ДатаНачала,
			|	Периоды.ПериодОтчета КАК ПериодОтчета %ТекстАналитики% %ТекстРесурсы%	
			|ПОМЕСТИТЬ втДанныеРегистра_%УИД%
			|ИЗ
			|	втПериоды КАК Периоды
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.%ИмяТаблицы%.ОстаткиИОбороты(%ОтборДатаНач%, %ОтборДатаКон%, %ПериодичностьОтчета%, , 
			|		Счет В (&Счета_%УИД%), , %ОтборВТ%) КАК ТаблицаДанных
			|		ПО %ТекстПериодСоединение%
			|		%ОтборПоПериоду%
			|;
			|
			|/////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаДанных.Счет,
			|	МаксимальныеНеПустыеПериоды.ПериодОтчета КАК ПериодОтчета %ТекстАналитики% %ТекстРесурсыОстатки% 
			|ПОМЕСТИТЬ втДанные_%УИД%
			|ИЗ
			|	(ВЫБРАТЬ
			|		МАКСИМУМ(ТаблицаДанных.ДатаНачала) КАК ДатаНачала,
			|		Данные.ПериодОтчета КАК ПериодОтчета %ТекстАналитики%
			|	ИЗ
			|		втДанныеРегистра_%УИД% КАК Данные
			|			ЛЕВОЕ СОЕДИНЕНИЕ втДанныеРегистра_%УИД% КАК ТаблицаДанных
			|			ПО Данные.ДатаНачала >= ТаблицаДанных.ДатаНачала
			|	ГДЕ %ТекстРесурсыУсловиеНО%
			|	
			|	СГРУППИРОВАТЬ ПО
			|		Данные.ПериодОтчета %ТекстАналитикиГруппировка%) КАК МаксимальныеНеПустыеПериоды
			|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеРегистра_%УИД% КАК ТаблицаДанных
			|		ПО ТаблицаДанных.ДатаНачала = МаксимальныеНеПустыеПериоды.ДатаНачала %ТекстАналитикиСоединение%
			|";
			Если ДанныеДляРасчета.Свойство("ЕстьОбороты") Тогда
				ТекстЗапросаВТ = ТекстЗапросаВТ + "
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ТаблицаДанных.Счет,
				|	ТаблицаДанных.ПериодОтчета КАК ПериодОтчета %ТекстАналитики% %ТекстРесурсыОбороты% 
				|ИЗ
				|	втДанныеРегистра_%УИД% КАК ТаблицаДанных";
			КонецЕсли;			
						
		Иначе
			
			Если ДанныеДляРасчета.КорреспонденцияСчетов Тогда
				
				ТекстЗапросаВТ = "
				|ВЫБРАТЬ
				|	ПоказателиСчета.НомерСреза КАК НомерСреза,
				|	ПоказателиСчета.Показатель КАК Показатель,
				|	ПоказателиСчета.УИДГруппыОтборов КАК УИДГруппыОтборов,
				|	ПоказателиСчета.Счет КАК Счет,
				|	ПоказателиСчета.КоррСчет КАК КоррСчет
				|ПОМЕСТИТЬ втПоказателиСчета_%УИД%
				|	ИЗ &ПоказателиСчета_%УИД% КАК ПоказателиСчета
				|;
				|
				|/////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТаблицаДанных.СчетДт КАК Счет,
				|	ТаблицаДанных.СчетКт КАК КоррСчет,
				|	Периоды.ПериодОтчета КАК ПериодОтчета %ТекстАналитики% %ТекстРесурсы%	
				|ПОМЕСТИТЬ втДанные_%УИД%
				|ИЗ
				|	втПериоды КАК Периоды
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.%ИмяТаблицы%.ОборотыДтКт(%ОтборДатаНач%, %ОтборДатаКон%, %ПериодичностьОтчета%, 
				|		СчетДт В (&Счета_%УИД%), , СчетКт В (&СчетаКт_%УИД%), , %ОтборВТ%) КАК ТаблицаДанных
				|		ПО %ТекстПериодСоединение%
				|		%ОтборПоПериоду%
				|";			
					
			Иначе
				
				ТекстЗапросаВТ = "
				|ВЫБРАТЬ
				|	ПоказателиСчета.НомерСреза КАК НомерСреза,
				|	ПоказателиСчета.Показатель КАК Показатель,
				|	ПоказателиСчета.УИДГруппыОтборов КАК УИДГруппыОтборов,
				|	ПоказателиСчета.Счет КАК Счет
				|ПОМЕСТИТЬ втПоказателиСчета_%УИД% 
				|	ИЗ &ПоказателиСчета_%УИД% КАК ПоказателиСчета
				|;
				|
				|/////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТаблицаДанных.Счет КАК Счет,
				|	Периоды.ПериодОтчета КАК ПериодОтчета %ТекстАналитики% %ТекстРесурсы%	
				|ПОМЕСТИТЬ втДанные_%УИД%
				|ИЗ
				|	втПериоды КАК Периоды
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.%ИмяТаблицы%.Обороты(%ОтборДатаНач%, %ОтборДатаКон%, %ПериодичностьОтчета%, 
				|		Счет В (&Счета_%УИД%), , %ОтборВТ%, ,) КАК ТаблицаДанных
				|		ПО %ТекстПериодСоединение%
				|		%ОтборПоПериоду%
				|";			

			КонецЕсли;
				
		КонецЕсли;		
	
	КонецЕсли; 
			
	// Сформируем текст соединения с таблицей Периоды		
	Если (ПараметрПериодДН.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.Дата
		ИЛИ ПараметрПериодДН.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение
		ИЛИ ПараметрПериодДН.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется)			
		И (ПараметрПериодДК.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.Дата
		ИЛИ ПараметрПериодДК.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение
		ИЛИ ПараметрПериодДК.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется) Тогда
		
		// 1. Все даты фиксированы
		ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ПериодичностьОтчета%","");
		ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ТекстПериодСоединение%","ИСТИНА");		
		
		// Тексты запросов сформированы
		Возврат ТекстЗапросаВТ;
		
	ИначеЕсли (ПараметрПериодДК.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.Дата
		ИЛИ ПараметрПериодДК.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение) Тогда
		
		// 2. Дата окончания фиксирована
		ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ПериодичностьОтчета%","ЧАС");
		ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ТекстПериодСоединение%","ТаблицаДанных.Период МЕЖДУ "
			+ ПривестиПериод("Периоды.ДатаНачала",ПараметрПериодДН.СпособВычисленияПараметра,ПараметрПериодДН.УточнениеСпособаОпределения)
			+ " И %ОтборДатаКон%");
			
		ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ОтборДатаНач%",
			ПривестиПериод("&НачалоПериодаОтчета",ПараметрПериодДН.СпособВычисленияПараметра,ПараметрПериодДН.УточнениеСпособаОпределения));
			
		// Тексты запросов сформированы
		Возврат ТекстЗапросаВТ;
		
	ИначеЕсли ПараметрПериодДК.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда
		
		// 3. Дата окончания не задана
		ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ПериодичностьОтчета%","ЧАС");
		ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ТекстПериодСоединение%","ТаблицаДанных.Период >= "
			+ ПривестиПериод("Периоды.ДатаНачала",ПараметрПериодДН.СпособВычисленияПараметра,ПараметрПериодДН.УточнениеСпособаОпределения));
			
		// Тексты запросов сформированы
		Возврат ТекстЗапросаВТ;	
		
	ИначеЕсли (ПараметрПериодДН.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.Дата
		ИЛИ ПараметрПериодДН.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение) Тогда
		
		// 4. Дата начала фиксирована
		ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ПериодичностьОтчета%","ЧАС");
		ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ТекстПериодСоединение%","ТаблицаДанных.Период МЕЖДУ %ОтборДатаНач% И "
			+ ПривестиПериод("КОНЕЦПЕРИОДА(Периоды.ДатаОкончания,%ПериодичностьОтчета%)",ПараметрПериодДК.СпособВычисленияПараметра,ПараметрПериодДК.УточнениеСпособаОпределения));	
			
		ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ОтборДатаКон%",
			ПривестиПериод("&НачалоПериодаОтчета",ПараметрПериодДН.СпособВычисленияПараметра,ПараметрПериодДН.УточнениеСпособаОпределения));
			
		// Тексты запросов сформированы
		Возврат ТекстЗапросаВТ;
		
	ИначеЕсли ПараметрПериодДН.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда
		
		// 4. Дата начала не задана
		ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ПериодичностьОтчета%","ЧАС");
		ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ТекстПериодСоединение%","ТаблицаДанных.Период <= "
			+ ПривестиПериод("КОНЕЦПЕРИОДА(Периоды.ДатаОкончания,%ПериодичностьОтчета%)",ПараметрПериодДК.СпособВычисленияПараметра,ПараметрПериодДК.УточнениеСпособаОпределения));	
			
		// Тексты запросов сформированы
		Возврат ТекстЗапросаВТ;	
		
	ИначеЕсли (ПараметрПериодДН.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчета
		И ПараметрПериодДК.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчета)
		ИЛИ (ПараметрПериодДН.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчетаСоСдвигом
		И ПараметрПериодДК.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчетаСоСдвигом
		И ПараметрПериодДК.УточнениеСпособаОпределения = ПараметрПериодДН.УточнениеСпособаОпределения)
		ИЛИ (ПараметрПериодДН.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГода
		И ПараметрПериодДК.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГода)
		ИЛИ (ПараметрПериодДН.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГодаСоСдвигом
		И ПараметрПериодДК.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГодаСоСдвигом
		И ПараметрПериодДК.УточнениеСпособаОпределения = ПараметрПериодДН.УточнениеСпособаОпределения)
		ИЛИ (ПараметрПериодДН.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаВышестоящегоПериода
		И ПараметрПериодДК.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаВышестоящегоПериода) Тогда
		
		// 5. Периодичность отборов дат совпадает с периодичностью получения данных
		ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ТекстПериодСоединение%",ПривестиПериод("Периоды.ДатаНачала",
			ПараметрПериодДН.СпособВычисленияПараметра,ПараметрПериодДН.УточнениеСпособаОпределения,Истина) 
			+ " = НАЧАЛОПЕРИОДА(ТаблицаДанных.Период,%ПериодичностьОтчета%)");				
	
	Иначе	
		
		// 6. Сложный случай с произвольными отборами по периоду
		ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ПериодичностьОтчета%","ЧАС");
		ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ТекстПериодСоединение%","ТаблицаДанных.Период МЕЖДУ "
			+ СтрЗаменить(
				ПривестиПериод("Периоды.ДатаНачала",ПараметрПериодДН.СпособВычисленияПараметра,ПараметрПериодДН.УточнениеСпособаОпределения),
				"%ПериодичностьОтчета%","%ПериодичностьОтчетаДН%")
			+ " И " 
			+ СтрЗаменить(
				ПривестиПериод("КОНЕЦПЕРИОДА(Периоды.ДатаОкончания,%ПериодичностьОтчета%)",ПараметрПериодДК.СпособВычисленияПараметра,ПараметрПериодДК.УточнениеСпособаОпределения),
				"%ПериодичностьОтчета%","%ПериодичностьОтчетаДК%"));		
	
	КонецЕсли;	
	
	// Установим параметры по периоду
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ОтборДатаНач%",
		ПривестиПериод("&НачалоПериодаОтчета",ПараметрПериодДН.СпособВычисленияПараметра,ПараметрПериодДН.УточнениеСпособаОпределения));
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ОтборДатаКон%",
		ПривестиПериод("&КонецПериодаОтчета",ПараметрПериодДК.СпособВычисленияПараметра,ПараметрПериодДК.УточнениеСпособаОпределения));

	// Изменим периодичность отчета, если это необходимо
	Если ПараметрПериодДН.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаВышестоящегоПериода 
		ИЛИ ПараметрПериодДН.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаВышестоящегоПериода Тогда
		
		Если ЗначениеЗаполнено(ПараметрПериодДН.УточнениеСпособаОпределения) Тогда
			ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ПериодичностьОтчета%",ПараметрПериодДН.УточнениеСпособаОпределения);
			ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ПериодичностьОтчетаДН%",ПараметрПериодДН.УточнениеСпособаОпределения);
		КонецЕсли;
		
	ИначеЕсли ПараметрПериодДН.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГода
		ИЛИ ПараметрПериодДН.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГода
		ИЛИ ПараметрПериодДН.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГодаСоСдвигом
		ИЛИ ПараметрПериодДН.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГодаСоСдвигом Тогда
		
	 	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ПериодичностьОтчета%","ГОД");
		ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ПериодичностьОтчетаДН%","ГОД");
		
	КонецЕсли;
	
	Если ПараметрПериодДК.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаВышестоящегоПериода Тогда
		
		Если ЗначениеЗаполнено(ПараметрПериодДК.УточнениеСпособаОпределения) Тогда
			ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ПериодичностьОтчетаДК%",ПараметрПериодДК.УточнениеСпособаОпределения);
		КонецЕсли;
		
	ИначеЕсли ПараметрПериодДК.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГода
		ИЛИ ПараметрПериодДК.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГодаСоСдвигом Тогда
		
		ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ПериодичностьОтчетаДК%","ГОД");
		
	КонецЕсли;	
	
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ПериодичностьОтчетаДН%","%ПериодичностьОтчета%");
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ПериодичностьОтчетаДК%","%ПериодичностьОтчета%");
	
	Возврат ТекстЗапросаВТ;
	
КонецФункции 

Функция ШаблонЗапросаВнутрРегистрСведений(ДанныеДляРасчета)
	
	Если ЗначениеЗаполнено(ДанныеДляРасчета.ВидСреза) Тогда
		
		// Найдем условия вычисления периода периодического регистра
		ПараметрПериод = ДанныеДляРасчета.ТаблицаПараметровОтбораБД.Найти("ДатаНач","ПолеБД");
		Если ПараметрПериод = Неопределено Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не найден обязательный отбор ""ДатаНач""'"));
			ВызватьИсключение(ТекстОшибки);
		КонецЕсли;
		СпособВычисленияПараметра = ПараметрПериод.СпособВычисленияПараметра;
		Если Не ЗначениеЗаполнено(СпособВычисленияПараметра) Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не заполнен способ вычисления параметра для отбора ""ДатаНач""'"));
			ВызватьИсключение(ТекстОшибки);
		КонецЕсли;
		
		Если СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.Дата
			Или СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение
			Или СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда
			
			ТекстЗапросаВТ = "
			|ВЫБРАТЬ
			|	Периоды.ПериодОтчета КАК ПериодОтчета %ТекстАналитики% %ТекстРесурсы%
			|ПОМЕСТИТЬ втДанные_%УИД%
			|ИЗ
			|	втПериоды КАК Периоды
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.%ИмяТаблицы%.%ВидСреза%(
			|		%ОтборДатаНач%, 
			|		%ОтборВТ%) КАК ТаблицаДанных
			|		ПО ИСТИНА
			|";
			
			ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ВидСреза%",ДанныеДляРасчета.ВидСреза);
			
		Иначе
			
			Если ДанныеДляРасчета.ВидСреза = "СрезПоследних" Тогда				
				
				ТекстЗапросаВТ = " 
				|ВЫБРАТЬ
				|	%ОтборДатаНач% КАК Период,
				|	НАЧАЛОПЕРИОДА(%ОтборДатаНач%, %ПериодичностьОтчета%) КАК ДатаДляСреза %ТекстАналитики% %ТекстРесурсы%
				|ПОМЕСТИТЬ втДанныеРегистра_%УИД%
				|ИЗ
				|	РегистрСведений.%ИмяТаблицы%.СрезПоследних(
				|			%ОтборДатаНач%,
				|			%ОтборВТ%) КАК ТаблицаДанных
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ТаблицаДанных.Период КАК Период,
				|	ВЫБОР
				|		КОГДА ТаблицаДанных.Период = НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, %ПериодичностьОтчета%)
				|			ТОГДА ТаблицаДанных.Период
				|		ИНАЧЕ НАЧАЛОПЕРИОДА(%ПериодРСДляСреза%, %ПериодичностьОтчета%) 
				|	КОНЕЦ КАК ДатаДляСреза %ТекстАналитики% %ТекстРесурсы%
				|ИЗ
				|	РегистрСведений.%ИмяТаблицы% КАК ТаблицаДанных
				|
				|ГДЕ
				|	ТаблицаДанных.Период МЕЖДУ ДОБАВИТЬКДАТЕ(%ОтборДатаНач%, СЕКУНДА, 1) И %ОтборДатаКон%
				|	%Отбор%
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Периоды.ДатаНачала КАК ДатаНачала,
				|	Периоды.ПериодОтчета КАК ПериодОтчета %ТекстАналитики% %ТекстРесурсы%
				|ПОМЕСТИТЬ втДанныеРегистраСПериодами_%УИД%
				|ИЗ
				|	втПериоды КАК Периоды
				|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеРегистра_%УИД% КАК ТаблицаДанных
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|				МАКСИМУМ(ТаблицаДанных.Период) КАК МаксимальныйПериод,
				|				ТаблицаДанных.ДатаДляСреза КАК ДатаДляСреза %ТекстАналитики%
				|			ИЗ
				|				втДанныеРегистра_%УИД% КАК ТаблицаДанных
				|			
				|			СГРУППИРОВАТЬ ПО
				|				ТаблицаДанных.ДатаДляСреза %ТекстАналитикиГруппировка%
				|			) КАК МаксимальныеНеПустыеПериоды
				|			ПО ТаблицаДанных.Период = МаксимальныеНеПустыеПериоды.МаксимальныйПериод
				|				И ТаблицаДанных.ДатаДляСреза = МаксимальныеНеПустыеПериоды.ДатаДляСреза %ТекстАналитикиСоединение% 
				|		ПО %ТекстПериодСоединение% = ТаблицаДанных.ДатаДляСреза  
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	МаксимальныеНеПустыеПериоды.ПериодОтчета КАК ПериодОтчета %ТекстАналитики% %ТекстРесурсы%
				|ПОМЕСТИТЬ втДанные_%УИД%
				|ИЗ
				|	(ВЫБРАТЬ
				|		Данные.ПериодОтчета КАК ПериодОтчета,
				|		МАКСИМУМ(ТаблицаДанных.ДатаНачала) КАК ДатаНачала %ТекстАналитики%
				|	ИЗ
				|		втДанныеРегистраСПериодами_%УИД% КАК Данные
				|			ЛЕВОЕ СОЕДИНЕНИЕ втДанныеРегистраСПериодами_%УИД% КАК ТаблицаДанных
				|			ПО Данные.ДатаНачала >= ТаблицаДанных.ДатаНачала
				|	ГДЕ %ТекстРесурсыУсловие%
				|	
				|	СГРУППИРОВАТЬ ПО
				|		Данные.ПериодОтчета %ТекстАналитикиГруппировка%) КАК МаксимальныеНеПустыеПериоды
				|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеРегистраСПериодами_%УИД% КАК ТаблицаДанных
				|		ПО (ТаблицаДанных.ДатаНачала = МаксимальныеНеПустыеПериоды.ДатаНачала) %ТекстАналитикиСоединение%";
	
			ИначеЕсли ДанныеДляРасчета.ВидСреза = "СрезПервых" Тогда
	
				ТекстЗапросаВТ = " 
				|ВЫБРАТЬ
				|	%ОтборДатаКон% КАК Период,
				|	НАЧАЛОПЕРИОДА(%ОтборДатаКон%, %ПериодичностьОтчета%) КАК ДатаДляСреза %ТекстАналитики% %ТекстРесурсы%
				|ПОМЕСТИТЬ втДанныеРегистра_%УИД%
				|ИЗ
				|	РегистрСведений.%ИмяТаблицы%.СрезПервых(
				|			%ОтборДатаКон%,
				|			%ОтборВТ%) КАК ТаблицаДанных
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ТаблицаДанных.Период КАК Период,
				|	ВЫБОР
				|		КОГДА ТаблицаДанных.Период = НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, %ПериодичностьОтчета%)
				|			ТОГДА %ПериодРСДляСреза%
				|		ИНАЧЕ НАЧАЛОПЕРИОДА(%ПериодРСДляСреза%, %ПериодичностьОтчета%) 
				|	КОНЕЦ КАК ДатаДляСреза %ТекстАналитики% %ТекстРесурсы%
				|ИЗ
				|	РегистрСведений.%ИмяТаблицы% КАК ТаблицаДанных
				|
				|ГДЕ
				|	ТаблицаДанных.Период МЕЖДУ %ОтборДатаНач% И ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(%ОтборДатаКон%, %ПериодичностьОтчета%), СЕКУНДА, -1)
				|	%Отбор%
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Периоды.ДатаНачала КАК ДатаНачала,
				|	Периоды.ПериодОтчета КАК ПериодОтчета %ТекстАналитики% %ТекстРесурсы%
				|ПОМЕСТИТЬ втДанныеРегистраСПериодами_%УИД%
				|ИЗ
				|	втПериоды КАК Периоды
				|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеРегистра_%УИД% КАК ТаблицаДанных
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|				МИНИМУМ(ТаблицаДанных.Период) КАК МинимальныйПериод,
				|				ТаблицаДанных.ДатаДляСреза КАК ДатаДляСреза %ТекстАналитики%
				|			ИЗ
				|				втДанныеРегистра_%УИД% КАК ТаблицаДанных
				|			
				|			СГРУППИРОВАТЬ ПО
				|				ТаблицаДанных.ДатаДляСреза %ТекстАналитикиГруппировка%
				|			) КАК МаксимальныеНеПустыеПериоды
				|			ПО ТаблицаДанных.Период = МаксимальныеНеПустыеПериоды.МинимальныйПериод
				|				И ТаблицаДанных.ДатаДляСреза = МаксимальныеНеПустыеПериоды.ДатаДляСреза %ТекстАналитикиСоединение% 
				|		ПО %ТекстПериодСоединение% = ТаблицаДанных.ДатаДляСреза  
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	МаксимальныеНеПустыеПериоды.ПериодОтчета КАК ПериодОтчета %ТекстАналитики% %ТекстРесурсы%
				|ПОМЕСТИТЬ втДанные_%УИД%
				|ИЗ
				|	(ВЫБРАТЬ
				|		Данные.ПериодОтчета КАК ПериодОтчета,
				|		МИНИМУМ(ТаблицаДанных.ДатаНачала) КАК ДатаНачала %ТекстАналитики%
				|	ИЗ
				|		втДанныеРегистраСПериодами_%УИД% КАК Данные
				|			ЛЕВОЕ СОЕДИНЕНИЕ втДанныеРегистраСПериодами_%УИД% КАК ТаблицаДанных
				|			ПО Данные.ДатаНачала <= ТаблицаДанных.ДатаНачала
				|	ГДЕ %ТекстРесурсыУсловие%
				|	
				|	СГРУППИРОВАТЬ ПО
				|		Данные.ПериодОтчета %ТекстАналитикиГруппировка%) КАК МаксимальныеНеПустыеПериоды
				|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеРегистраСПериодами_%УИД% КАК ТаблицаДанных
				|		ПО (ТаблицаДанных.ДатаНачала = МаксимальныеНеПустыеПериоды.ДатаНачала) %ТекстАналитикиСоединение%";

			КонецЕсли;
							
			Если СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчета 
				ИЛИ СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаВышестоящегоПериода 
				ИЛИ СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГода
				ИЛИ СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчетаСоСдвигом
				ИЛИ СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГодаСоСдвигом
				Тогда
			
				Если ДанныеДляРасчета.ВидСреза = "СрезПоследних" Тогда
					ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ПериодРСДляСреза%","ДОБАВИТЬКДАТЕ(ТаблицаДанных.Период, %ПериодичностьОтчета%, 1)");
				ИначеЕсли ДанныеДляРасчета.ВидСреза = "СрезПервых" Тогда
					ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ПериодРСДляСреза%","ТаблицаДанных.Период");
				КонецЕсли;
					
			ИначеЕсли СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчета
				ИЛИ СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаВышестоящегоПериода
				ИЛИ СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГода
				ИЛИ СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчетаСоСдвигом
				ИЛИ СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГодаСоСдвигом
				Тогда
				
				Если ДанныеДляРасчета.ВидСреза = "СрезПоследних" Тогда
					ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ПериодРСДляСреза%","ТаблицаДанных.Период");
				ИначеЕсли ДанныеДляРасчета.ВидСреза = "СрезПервых" Тогда
					ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ПериодРСДляСреза%","ДОБАВИТЬКДАТЕ(ТаблицаДанных.Период, %ПериодичностьОтчета%, -1)");
				КонецЕсли;
				
			Иначе
				
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Способ вычисления параметра %1 для отбора ""ДатаНач""'"),СпособВычисленияПараметра);
				ВызватьИсключение(ТекстОшибки);
				
			КонецЕсли;
			
			ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ОтборДатаНач%",
				ПривестиПериод("&НачалоПериодаОтчета",ПараметрПериод.СпособВычисленияПараметра,ПараметрПериод.УточнениеСпособаОпределения));
			ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ОтборДатаКон%",
				ПривестиПериод("&КонецПериодаОтчета",ПараметрПериод.СпособВычисленияПараметра,ПараметрПериод.УточнениеСпособаОпределения));
			ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ТекстПериодСоединение%",
				ПривестиПериод("Периоды.ДатаНачала",ПараметрПериод.СпособВычисленияПараметра,ПараметрПериод.УточнениеСпособаОпределения,Истина));			
			
			Если СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаВышестоящегоПериода
				ИЛИ СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаВышестоящегоПериода Тогда
				
				ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ПериодичностьОтчета%",ПараметрПериод.УточнениеСпособаОпределения);				
				
			ИначеЕсли СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГода
				ИЛИ СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГода
				ИЛИ СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГодаСоСдвигом
				ИЛИ СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГодаСоСдвигом Тогда
				
			 	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ПериодичностьОтчета%","ГОД");
				
			КонецЕсли;			

		КонецЕсли;
		
	Иначе
		
		ТекстЗапросаВТ = "
		|ВЫБРАТЬ
		|	Периоды.ПериодОтчета КАК ПериодОтчета %ТекстАналитики% %ТекстРесурсы%
		|ПОМЕСТИТЬ втДанные_%УИД%
		|ИЗ
		|	втПериоды КАК Периоды
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.%ИмяТаблицы% КАК ТаблицаДанных
		|		ПО ИСТИНА
		|		%ОтборПоПериоду%
		|		%Отбор%
		|";	

	КонецЕсли; 
	
	Возврат ТекстЗапросаВТ
	
КонецФункции

Функция ШаблонЗапросаВнутрСправочник(ДанныеДляРасчета)
	
	ТекстЗапросаВТ = "
	|ВЫБРАТЬ
	|	Периоды.ПериодОтчета КАК ПериодОтчета %ТекстАналитики% %ТекстРесурсы%
	|ПОМЕСТИТЬ втДанные_%УИД%
	|ИЗ
	|	втПериоды КАК Периоды
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.%ИмяТаблицы% КАК ТаблицаДанных
	|		ПО ИСТИНА
	|		%ОтборПоПериоду%
	|		%Отбор%
	|";
	
	Возврат ТекстЗапросаВТ;
	
КонецФункции	

Функция ШаблонЗапросаВнутрПроизвольныйЗапрос(ДанныеДляРасчета, тПараметрыПакетаВТ)

	ТекстЗапросаВТ = "";
	Если СтрНайти(ДанныеДляРасчета.ТекстЗапроса,"ПОМЕСТИТЬ") > 0 Тогда
		
		УИДЗапросов = СтрЗаменить(Новый УникальныйИдентификатор,"-","");
		СхемаЗапроса = Новый СхемаЗапроса();
		СхемаЗапроса.УстановитьТекстЗапроса(ДанныеДляРасчета.ТекстЗапроса);
		Для Каждого Пакет Из СхемаЗапроса.ПакетЗапросов Цикл
			Если Не ПустаяСтрока(Пакет.ТаблицаДляПомещения) Тогда
				Пакет.ТаблицаДляПомещения = Пакет.ТаблицаДляПомещения + "_" + УИДЗапросов;
				ТекстЗапросаВТ = ТекстЗапросаВТ + Пакет.ПолучитьТекстЗапроса() + "
				|;
				|
				|";
			Иначе
				ТекстИтоговогоЗапроса = Пакет.ПолучитьТекстЗапроса();
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ТекстИтоговогоЗапроса = ДанныеДляРасчета.ТекстЗапроса;
	КонецЕсли;
	
	ТекстЗапросаВТ = ТекстЗапросаВТ + "
	|ВЫБРАТЬ
	|	Периоды.ПериодОтчета КАК ПериодОтчета %ТекстАналитики% %ТекстРесурсы%	
	|ПОМЕСТИТЬ втДанные_%УИД%
	|ИЗ
	|	втПериоды КАК Периоды
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|
	|%ТекстЗапроса%
	|
	|		) КАК ТаблицаДанных
	|		ПО %ТекстУсловияСоединенияПЗ%
	|		%ОтборПоПериоду%
	|		%Отбор%
	|";
	
	// Условие соединения для произвольного запроса
	СтрокаПериод = ДанныеДляРасчета.ПоляАналитикПоказателей.Найти("Период","КодАналитики");
	Если СтрокаПериод = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Не найден ресурс ""Период"" для произвольного запроса'");
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;	

	ТекстУсловияСоединенияПЗ = "";
	Если СтрокаПериод.СпособЗаполнения = Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы Тогда
		ТекстУсловияСоединенияПЗ = "ТаблицаДанных." + СтрокаПериод.Поле + " МЕЖДУ Периоды.ДатаНачала И Периоды.ДатаОкончания";
	ИначеЕсли СтрокаПериод.СпособЗаполнения = Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение Тогда
		нПараметр = ДобавитьПараметрВПакет(тПараметрыПакетаВТ, 
			Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение,
			СтрокаПериод.ФиксированноеЗначение, "Период");
		ТекстУсловияСоединенияПЗ = "&" + нПараметр.ИмяОтбора + " МЕЖДУ Периоды.ДатаНачала И Периоды.ДатаОкончания";
	ИначеЕсли СтрокаПериод.СпособЗаполнения = Перечисления.СпособыЗаполненияПолейИсточника.КонтекстОбъектаЗагрузки Тогда
		нПараметр = ДобавитьПараметрВПакет(тПараметрыПакетаВТ, 
			"КонтекстВызоваЗаполнения",
			СтрокаПериод.Поле, "Период");
		ТекстУсловияСоединенияПЗ 	= "&" + нПараметр.ИмяОтбора + " МЕЖДУ Периоды.ДатаНачала И Периоды.ДатаОкончания";
	Иначе
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Способ заполнения параметра ""%1"" для отбора ""Период"" не поддерживается.'"),СтрокаПериод.СпособЗаполнения);
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ТекстУсловияСоединенияПЗ%",ТекстУсловияСоединенияПЗ);
	
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ТекстЗапроса%",ТекстИтоговогоЗапроса);
	
	Возврат ТекстЗапросаВТ;
		
КонецФункции	

Процедура ПодготовитьТаблицуВнутренниеДанные(СтруктураРасчетаПоказателей, СтруктураПараметровТекущегоУровня)
	
	тВнутренниеДанные 		= СтруктураРасчетаПоказателей.тВнутренниеДанные;	
	тПоказателиОперанды 	= СтруктураРасчетаПоказателей.тПоказателиОперанды;
	
	Если тВнутренниеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Добавим временную таблицу с периодами
	ДобавитьТаблицуПериодов(СтруктураПараметровТекущегоУровня);

	ИсходнаяТаблица = тВнутренниеДанные.Скопировать();
	
	ПоляСвертки = "СпособПолучения,РегистрБД,ОбъектБД,ТабличнаяЧастьБД,ОсновнаяТаблицаРегистра,КорреспонденцияСчетов,ВидСреза,ТекстЗапроса,ХешОтбораПоказателей";
	тВнутренниеДанные.Свернуть(ПоляСвертки); 
	
	Для Каждого ТекущийСрез Из тВнутренниеДанные Цикл
		
		// Найдем строки по одному срезу
		СтруктураОтбора = Новый Структура(ПоляСвертки);
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущийСрез);
		СтрокиСреза = ИсходнаяТаблица.НайтиСтроки(СтруктураОтбора);
		
		// Соберем таблицу значений по регистру
		ПоляЗначенийПоказателей = Новый ТаблицаЗначений;
		ПоляЗначенийПоказателей.Колонки.Добавить("Показатель");
		ПоляЗначенийПоказателей.Колонки.Добавить("Поле");
		ПоляЗначенийПоказателей.Колонки.Добавить("ТипЗначения");
		ПоляЗначенийПоказателей.Колонки.Добавить("Код");
		ПоляЗначенийПоказателей.Колонки.Добавить("Счет");
		ПоляЗначенийПоказателей.Колонки.Добавить("КоррСчет");
		ПоляЗначенийПоказателей.Колонки.Добавить("УИДГруппыОтборов");
		ПоляЗначенийПоказателей.Колонки.Добавить("УИДЗаполненияАналитик");
		
		ПоляАналитикПоказателей = Новый ТаблицаЗначений;
		ПоляАналитикПоказателей.Колонки.Добавить("Показатель");
		ПоляАналитикПоказателей.Колонки.Добавить("Поле");
		ПоляАналитикПоказателей.Колонки.Добавить("КодАналитики");
		ПоляАналитикПоказателей.Колонки.Добавить("СпособЗаполнения");
		ПоляАналитикПоказателей.Колонки.Добавить("ФиксированноеЗначение");
		
		Для Каждого СтрокаСреза Из СтрокиСреза Цикл
			
			НСтрокаПоказатель = ПоляЗначенийПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НСтрокаПоказатель, СтрокаСреза);
			НайденнаяСтрока = тПоказателиОперанды.НайтиСтроки(
				Новый Структура("ПоказательОперанд,КодВФормуле",НСтрокаПоказатель.Показатель,НСтрокаПоказатель.Код));
			НСтрокаПоказатель.УИДГруппыОтборов = НайденнаяСтрока.Получить(0).УИДГруппыОтборов;
			НСтрокаПоказатель.УИДЗаполненияАналитик = "";
			
			Для Каждого СтрокаПравила Из СтрокаСреза.ПравилаИспользованияПолейЗапроса Цикл
				
				Если СтрокаПравила.КодАналитики = "Значение" Тогда				
					
					Если СтрокаСреза.ОсновнаяТаблицаРегистра Тогда
						НСтрокаПоказатель.Поле = СтрокаСреза.РесурсРегистра;
					Иначе
						
						НСтрокаПоказатель.Поле = СтрокаПравила.Поле;
						Если ЗначениеЗаполнено(СтрокаСреза.КоррСчет) Тогда
							Если Прав(НСтрокаПоказатель.Поле,2) = "Кт"
								И Прав(НСтрокаПоказатель.Поле,6) <> "ОборотКт" Тогда
								НСтрокаПоказатель.Поле = СтрЗаменить(НСтрокаПоказатель.Поле, "Кт", "ОборотКт");					
							ИначеЕсли Прав(НСтрокаПоказатель.Поле,2) = "Дт"
								И Прав(НСтрокаПоказатель.Поле,6) <> "ОборотДт" Тогда
								НСтрокаПоказатель.Поле = СтрЗаменить(НСтрокаПоказатель.Поле, "Дт", "ОборотДт");
							ИначеЕсли Прав(НСтрокаПоказатель.Поле,6) <> "Оборот" Тогда
								НСтрокаПоказатель.Поле = НСтрокаПоказатель.Поле + "Оборот";
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
			
					// Поля аналитик
					НСтрока = ПоляАналитикПоказателей.Добавить();
					НСтрока.Показатель = СтрокаСреза.Показатель;
					ЗаполнитьЗначенияСвойств(НСтрока, СтрокаПравила);
					НСтрокаПоказатель.УИДЗаполненияАналитик = НСтрокаПоказатель.УИДЗаполненияАналитик 
						+ "$" + НСтрока.Поле + "@" + НСтрока.КодАналитики + "@" 
						+ ЗначениеВСтрокуВнутр(НСтрока.СпособЗаполнения) + "@" 
						+ ЗначениеВСтрокуВнутр(НСтрока.ФиксированноеЗначение)
					
				КонецЕсли;
				
			КонецЦикла;

		КонецЦикла;
		
		// Подготовим данные для расчета
		ДанныеДляРасчета = Новый Структура;
		ДанныеДляРасчета.Вставить("УИДСреза", СтрЗаменить(Новый УникальныйИдентификатор,"-",""));
		ДанныеДляРасчета.Вставить("СпособПолучения", ТекущийСрез.СпособПолучения);
		ДанныеДляРасчета.Вставить("ОсновнаяТаблицаРегистра", ТекущийСрез.ОсновнаяТаблицаРегистра);
		ДанныеДляРасчета.Вставить("КорреспонденцияСчетов", ТекущийСрез.КорреспонденцияСчетов);
		ДанныеДляРасчета.Вставить("ВидСреза", ТекущийСрез.ВидСреза);
		ДанныеДляРасчета.Вставить("ТекстЗапроса", ТекущийСрез.ТекстЗапроса);
		ДанныеДляРасчета.Вставить("ТаблицаПараметровОтбораБД", СтрокиСреза.Получить(0).ТаблицаПараметровОтбораБД); 
		ДанныеДляРасчета.Вставить("ПоляЗначенийПоказателей", ПоляЗначенийПоказателей);
		ДанныеДляРасчета.Вставить("ПоляАналитикПоказателей", ПоляАналитикПоказателей);
		
		// Вычислим имя таблицы 		
		Если ЗначениеЗаполнено(ТекущийСрез.РегистрБД) Тогда
			ДанныеДляРасчета.Вставить("ИмяТаблицы", ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(ТекущийСрез.РегистрБД,"Наименование"));
		ИначеЕсли ЗначениеЗаполнено(ТекущийСрез.ОбъектБД) Тогда
			ИмяОбъектаМетаданных = ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(ТекущийСрез.ОбъектБД,"ИмяОбъектаМетаданных");
			Если ЗначениеЗаполнено(ТекущийСрез.ТабличнаяЧастьБД) Тогда
				ИмяОбъектаМетаданных = ИмяОбъектаМетаданных + "." + ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(ТекущийСрез.ТабличнаяЧастьБД,"Имя")
			КонецЕсли;
			ДанныеДляРасчета.Вставить("ИмяТаблицы", ИмяОбъектаМетаданных);
		Иначе
			ДанныеДляРасчета.Вставить("ИмяТаблицы", "");
		КонецЕсли;
		
		ПодготовитьТекстыЗапросовПоИсточникуВнутр(ДанныеДляРасчета, СтруктураРасчетаПоказателей, СтруктураПараметровТекущегоУровня);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьТекстыЗапросовПоИсточникуВнутр(ДанныеДляРасчета, СтруктураРасчетаПоказателей, СтруктураПараметровТекущегоУровня)
	
	тИспользуемыеАналитики              = СтруктураРасчетаПоказателей.тИспользуемыеАналитики;
	тИспользуемыеРесурсы              	= СтруктураРасчетаПоказателей.тИспользуемыеРесурсы;
	тСчетаСИерархией					= СтруктураРасчетаПоказателей.тСчетаСИерархией;

	тПараметрыПакетаВТ					= СтруктураПараметровТекущегоУровня.тПараметрыПакетаВТ;
	тПодзапросыДанныхВТ					= СтруктураПараметровТекущегоУровня.тПодзапросыДанныхВТ;	
	тПараметрыПакета            		= СтруктураПараметровТекущегоУровня.тПараметрыПакета;
	тПодзапросыДанных					= СтруктураПараметровТекущегоУровня.тПодзапросыДанных;	
	
	#Область ВременныеТаблицыДляРасчетов
	
	// Сформируем комментарий по показателям
	ТаблицаРесурсов = ДанныеДляРасчета.ПоляЗначенийПоказателей.Скопировать();
	
	// Сформируем текст ресурсов
	ТекстРесурсы = "";
	ТекстРесурсыОстатки = "";
	ТекстРесурсыУсловие = "";
	ТекстРесурсыУсловиеНО = "";
	ТекстРесурсыОбороты = "";
	ТаблицаРесурсов.Свернуть("Поле");	
	Для Каждого СтрокаРесурс Из ТаблицаРесурсов Цикл
		
		ТекстРесурсы = ТекстРесурсы + ",
		|	ТаблицаДанных." + СтрокаРесурс.Поле + " КАК " + СтрЗаменить(СтрокаРесурс.Поле,".","");
		
		ТекстРесурсыУсловие = ТекстРесурсыУсловие + Символы.ПС + Символы.Таб + Символы.Таб 
			+ ?(ТекстРесурсыУсловие = "","", "И ") + "НЕ ТаблицаДанных." + СтрокаРесурс.Поле + " ЕСТЬ NULL";
		
		Если СтрНайти(СтрокаРесурс.Поле,"НачальныйОстаток") > 0
			ИЛИ СтрНайти(СтрокаРесурс.Поле,"НачальныйРазвернутыйОстаток") > 0 Тогда
			
			// Начальный остаток добавим вручную
			ПолеКО = СтрЗаменить(СтрокаРесурс.Поле,"НачальныйРазвернутыйОстаток","КонечныйРазвернутыйОстаток");
			ПолеКО = СтрЗаменить(ПолеКО,"НачальныйОстаток","КонечныйОстаток");
			ТекстРесурсыОстатки = ТекстРесурсыОстатки + ",
			|	ВЫБОР
			|		КОГДА МаксимальныеНеПустыеПериоды.ПериодОтчета <> ТаблицаДанных.ПериодОтчета
			|			ТОГДА ТаблицаДанных." + ПолеКО + "
			|		ИНАЧЕ ТаблицаДанных." + СтрокаРесурс.Поле + "
			|	КОНЕЦ КАК " + СтрокаРесурс.Поле;
			
			// Добавим конечные остаток, если его нет в ресурсах
			Если ТаблицаРесурсов.Найти(ПолеКО, "Поле") = Неопределено Тогда
				ТекстРесурсы = ТекстРесурсы + ",
				|	ТаблицаДанных." + ПолеКО + " КАК " + ПолеКО;
			КонецЕсли;
			
			ТекстРесурсыУсловиеНО = ТекстРесурсыУсловиеНО + Символы.ПС + Символы.Таб + Символы.Таб 
				+ ?(ТекстРесурсыУсловиеНО = "","", "И ") + "НЕ ТаблицаДанных." + СтрокаРесурс.Поле + " ЕСТЬ NULL";
			
			ТекстРесурсыОбороты = ТекстРесурсыОбороты + ",
			|	0 КАК " + СтрокаРесурс.Поле;
			
			ДанныеДляРасчета.Вставить("ЕстьОстатки", Истина);
		
		ИначеЕсли СтрНайти(СтрокаРесурс.Поле,"КонечныйОстаток") > 0
			ИЛИ СтрНайти(СтрокаРесурс.Поле,"КонечныйРазвернутыйОстаток") > 0 Тогда
			
			// Конечный остаток добавим вручную
			ПолеНО = СтрЗаменить(СтрокаРесурс.Поле,"КонечныйРазвернутыйОстаток","НачальныйРазвернутыйОстаток");
			ПолеНО = СтрЗаменить(ПолеНО,"КонечныйОстаток","НачальныйОстаток");
			ТекстРесурсыОстатки = ТекстРесурсыОстатки + ",
			|	ТаблицаДанных." + СтрокаРесурс.Поле + " КАК " + СтрокаРесурс.Поле;
			
			// Добавим начальный остаток, если его не в ресурсах
			Если ТаблицаРесурсов.Найти(ПолеНО, "Поле") = Неопределено Тогда
				ТекстРесурсы = ТекстРесурсы + ",
				|	ТаблицаДанных." + ПолеНО + " КАК " + ПолеНО;
				ТекстРесурсыУсловиеНО = ТекстРесурсыУсловиеНО + Символы.ПС + Символы.Таб + Символы.Таб 
					+ ?(ТекстРесурсыУсловиеНО = "","", "И ") + "НЕ ТаблицаДанных." + ПолеНО + " ЕСТЬ NULL";
			КонецЕсли;
			
			ТекстРесурсыОбороты = ТекстРесурсыОбороты + ",
			|	0 КАК " + СтрокаРесурс.Поле;
			
			ДанныеДляРасчета.Вставить("ЕстьОстатки", Истина);
			
		Иначе
				
			ТекстРесурсыОбороты = ТекстРесурсыОбороты + ",
			|	ТаблицаДанных." + СтрокаРесурс.Поле + " КАК " + СтрокаРесурс.Поле;	
			
			ТекстРесурсыОстатки = ТекстРесурсыОстатки + ",
			|	0 КАК " + СтрокаРесурс.Поле;
			
			ДанныеДляРасчета.Вставить("ЕстьОбороты", Истина);
	
		КонецЕсли;
		
	КонецЦикла;
	
	// Сформируем текст аналитик
	ТекстАналитики = "";
	ТекстАналитикиГруппировка = "";
	ТекстАналитикиСоединение = "";
	ПоляАналитикПоказателей = ДанныеДляРасчета.ПоляАналитикПоказателей.Скопировать(
		Новый Структура("СпособЗаполнения",Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы));
	ПоляАналитикПоказателей.Свернуть("Поле");
	Для Каждого СтрокаАналитика Из ПоляАналитикПоказателей Цикл 
		Если ТаблицаРесурсов.Найти(СтрокаАналитика.Поле, "Поле") <> Неопределено Тогда 
			// Поле уже есть в ресурсах
			Продолжить;
		КонецЕсли;
		Если ДанныеДляРасчета.Свойство("ЕстьОстатки") Тогда
			ТекстАналитики = ТекстАналитики + ",
			|	ISNULL(ТаблицаДанных." + СтрокаАналитика.Поле + ",НЕОПРЕДЕЛЕНО) КАК " + СтрЗаменить(СтрокаАналитика.Поле,".","");
		Иначе
			ТекстАналитики = ТекстАналитики + ",
			|	ТаблицаДанных." + СтрокаАналитика.Поле + " КАК " + СтрЗаменить(СтрокаАналитика.Поле,".","");
		КонецЕсли;
		ТекстАналитикиГруппировка = ТекстАналитикиГруппировка + ",
		|		ТаблицаДанных." + СтрокаАналитика.Поле;
		ТекстАналитикиСоединение = ТекстАналитикиСоединение + "
		|		И ТаблицаДанных." + СтрокаАналитика.Поле + " = МаксимальныеНеПустыеПериоды." + СтрокаАналитика.Поле;
	КонецЦикла;

	// Получим текст шаблонов запросов для подъема данных
	Если ДанныеДляРасчета.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления		
		Или ДанныеДляРасчета.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда	
		ТекстЗапросаВТ = ШаблонЗапросаВнутрРегистрНакоплений(ДанныеДляРасчета);
	ИначеЕсли ДанныеДляРасчета.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений Тогда	
		ТекстЗапросаВТ = ШаблонЗапросаВнутрРегистрСведений(ДанныеДляРасчета);
	ИначеЕсли ДанныеДляРасчета.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеСправочники Тогда
		ТекстЗапросаВТ = ШаблонЗапросаВнутрСправочник(ДанныеДляРасчета);
	ИначеЕсли ДанныеДляРасчета.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос Тогда	
		ТекстЗапросаВТ = ШаблонЗапросаВнутрПроизвольныйЗапрос(ДанныеДляРасчета, тПараметрыПакетаВТ);
	КонецЕсли;
	
	// Заменим вставки в тексте запроса
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ, "%УИД%", ДанныеДляРасчета.УИДСреза);
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ, "%ТекстРесурсы%", ТекстРесурсы);
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ, "%ТекстРесурсыОстатки%", ТекстРесурсыОстатки);
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ, "%ТекстРесурсыУсловие%", ТекстРесурсыУсловие);
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ, "%ТекстРесурсыУсловиеНО%", ТекстРесурсыУсловиеНО);
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ, "%ТекстРесурсыОбороты%", ТекстРесурсыОбороты);
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ, "%ТекстАналитики%", ТекстАналитики);
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ, "%ТекстАналитикиГруппировка%", ТекстАналитикиГруппировка);
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ, "%ТекстАналитикиСоединение%", ТекстАналитикиСоединение);
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ, "%ИмяТаблицы%", ДанныеДляРасчета.ИмяТаблицы);

	// Обработаем отборы
	ОбработанныеСтроки = Новый Массив;
	ТаблицаПараметровОтбораБД = ДанныеДляРасчета.ТаблицаПараметровОтбораБД.Скопировать();
	
	// Обработаем отборы произвольного запроса
	Для Каждого ПравилоВычисления Из ТаблицаПараметровОтбораБД Цикл 
		ПолеБД = ПравилоВычисления.ПолеБД;
		Если ПолеБД <> "" И СтрНайти(ТекстЗапросаВТ,"&" + ПолеБД) > 0 Тогда
			Если ПравилоВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение
				Или ПравилоВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений Тогда
				нПараметр = ДобавитьПараметрВПакет(тПараметрыПакетаВТ,
					ПравилоВычисления.СпособВычисленияПараметра,ПравилоВычисления.ТекстМодуля,ПравилоВычисления.ПолеБД);
			Иначе
				нПараметр = ДобавитьПараметрВПакет(тПараметрыПакетаВТ,
					ПравилоВычисления.СпособВычисленияПараметра,ПравилоВычисления.УточнениеСпособаОпределения,ПравилоВычисления.ПолеБД);
			КонецЕсли;
			ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"&" + ПолеБД,"&" + нПараметр.ИмяОтбора);
			ОбработанныеСтроки.Добавить(ПравилоВычисления);
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого ОбработаннаяСтрока Из ОбработанныеСтроки Цикл
		ТаблицаПараметровОтбораБД.Удалить(ОбработаннаяСтрока);
	КонецЦикла;
	ОбработанныеСтроки.Очистить();
	
	// Обработаем отборы по периоду
	ТекстОтбораПоПериоду = "";
	Для Каждого ПравилоВычисления Из ТаблицаПараметровОтбораБД Цикл
		
		ПолеБД = ПравилоВычисления.ПолеБД;
		Если ПолеБД = "ДатаНач"
			Или ПолеБД = "ДатаКон" Тогда
			
			Если ПравилоВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.Дата Тогда
				
				нПараметр = ДобавитьПараметрВПакет(тПараметрыПакетаВТ,
					ПравилоВычисления.СпособВычисленияПараметра,ПравилоВычисления.УточнениеСпособаОпределения,ПолеБД);
				ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%Отбор" + ПолеБД + "%","&" + нПараметр.ИмяОтбора);
				
			ИначеЕсли ПравилоВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение
				Или ПравилоВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений Тогда
				
				нПараметр = ДобавитьПараметрВПакет(тПараметрыПакетаВТ,
					ПравилоВычисления.СпособВычисленияПараметра,ПравилоВычисления.ТекстМодуля,ПолеБД);
				ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%Отбор" + ПолеБД + "%","&" + нПараметр.ИмяОтбора);
				
			ИначеЕсли ПравилоВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчета
				ИЛИ ПравилоВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчетаСоСдвигом
				ИЛИ ПравилоВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГода
				ИЛИ ПравилоВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГодаСоСдвигом
				ИЛИ ПравилоВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаВышестоящегоПериода
				Тогда
				
				нПараметр = ДобавитьПараметрВПакет(тПараметрыПакетаВТ,
					Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчета,,ПолеБД);
				ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%Отбор" + ПолеБД + "%","&" + нПараметр.ИмяОтбора);
				
			ИначеЕсли ПравилоВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчета
				ИЛИ ПравилоВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчетаСоСдвигом
				ИЛИ ПравилоВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГода
				ИЛИ ПравилоВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГодаСоСдвигом
				ИЛИ ПравилоВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаВышестоящегоПериода
				Тогда
				
				нПараметр = ДобавитьПараметрВПакет(тПараметрыПакетаВТ,
					Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчета,,ПолеБД);
				ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%Отбор" + ПолеБД + "%","&" + нПараметр.ИмяОтбора);
				
			ИначеЕсли ПравилоВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда
				
				ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%Отбор" + ПолеБД + "%","");
				
			Иначе				
				
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Способ вычисления параметра ""%1"" для отбора ""%2"" не поддерживается.'"),
					ПравилоВычисления.СпособВычисленияПараметра,ПолеБД);
				ВызватьИсключение(ТекстОшибки);
				
			КонецЕсли;			
			
			ОбработанныеСтроки.Добавить(ПравилоВычисления);
			
		ИначеЕсли ПравилоВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчета Тогда
			ТекстОтбораПоПериоду = ТекстОтбораПоПериоду + " И ТаблицаДанных." + ПолеБД 
				+ " = Периоды.ДатаНачала";
			ОбработанныеСтроки.Добавить(ПравилоВычисления);

		ИначеЕсли ПравилоВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчета Тогда
			ТекстОтбораПоПериоду = ТекстОтбораПоПериоду + " И ТаблицаДанных." + ПолеБД 
				+ " = КОНЕЦПЕРИОДА(Периоды.ДатаНачала,%ПериодичностьОтчета%)";
			ОбработанныеСтроки.Добавить(ПравилоВычисления);
			
		ИначеЕсли ПравилоВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаВышестоящегоПериода Тогда
			ТекстОтбораПоПериоду = ТекстОтбораПоПериоду + " И ТаблицаДанных." + ПолеБД 
				+ " = НАЧАЛОПЕРИОДА(Периоды.ДатаНачала," + Строка(ПравилоВычисления.УточнениеСпособаОпределения) + ")";
			ОбработанныеСтроки.Добавить(ПравилоВычисления);
			
		ИначеЕсли ПравилоВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаВышестоящегоПериода Тогда
			ТекстОтбораПоПериоду = ТекстОтбораПоПериоду + " И ТаблицаДанных." + ПолеБД 
				+ " = КОНЕЦПЕРИОДА(Периоды.ДатаНачала," + Строка(ПравилоВычисления.УточнениеСпособаОпределения) + ")";
			ОбработанныеСтроки.Добавить(ПравилоВычисления);
			
		ИначеЕсли ПравилоВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГода Тогда
			ТекстОтбораПоПериоду = ТекстОтбораПоПериоду + " И ТаблицаДанных." + ПолеБД 
				+ " = КОНЕЦПЕРИОДА(Периоды.ДатаНачала,ГОД)";
			ОбработанныеСтроки.Добавить(ПравилоВычисления);
			
		ИначеЕсли ПравилоВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГода Тогда
			ТекстОтбораПоПериоду = ТекстОтбораПоПериоду + " И ТаблицаДанных." + ПолеБД 
				+ " = НАЧАЛОПЕРИОДА(Периоды.ДатаНачала,ГОД)";
			ОбработанныеСтроки.Добавить(ПравилоВычисления);
			
		ИначеЕсли ПравилоВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГодаСоСдвигом Тогда
			ТекстОтбораПоПериоду = ТекстОтбораПоПериоду + " И ТаблицаДанных." + ПолеБД 
				+ " = ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(Периоды.ДатаНачала,ГОД),ГОД," + Формат(ПравилоВычисления.УточнениеСпособаОпределения,"ЧН=0; ЧГ=0") + ")";
			ОбработанныеСтроки.Добавить(ПравилоВычисления);
			
		ИначеЕсли ПравилоВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГодаСоСдвигом Тогда
			ТекстОтбораПоПериоду = ТекстОтбораПоПериоду + " И ТаблицаДанных." + ПолеБД 
				+ " = ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Периоды.ДатаНачала,ГОД),ГОД," + Формат(ПравилоВычисления.УточнениеСпособаОпределения,"ЧН=0; ЧГ=0") + ")";
			ОбработанныеСтроки.Добавить(ПравилоВычисления);
			
		ИначеЕсли ПравилоВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчетаСоСдвигом Тогда
		    ТекстОтбораПоПериоду = ТекстОтбораПоПериоду + " И ТаблицаДанных." + ПолеБД 
				+ " = ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(Периоды.ДатаНачала,%ПериодичностьОтчета%),%ПериодичностьОтчета%," + Формат(ПравилоВычисления.УточнениеСпособаОпределения,"ЧН=0; ЧГ=0") + ")";
			ОбработанныеСтроки.Добавить(ПравилоВычисления);
			
		ИначеЕсли ПравилоВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчетаСоСдвигом Тогда
			
			ТекстОтбораПоПериоду = ТекстОтбораПоПериоду + " И ТаблицаДанных." + ПолеБД 
				+ " = ДОБАВИТЬКДАТЕ(Периоды.ДатаНачала,%ПериодичностьОтчета%," + Формат(ПравилоВычисления.УточнениеСпособаОпределения,"ЧН=0; ЧГ=0") + ")";
			ОбработанныеСтроки.Добавить(ПравилоВычисления);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ОтборДатаНач%","&НачалоПериодаОтчета");
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ОтборДатаКон%","&КонецПериодаОтчета");
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ОтборПоПериоду%",ТекстОтбораПоПериоду);
	Для Каждого ОбработаннаяСтрока Из ОбработанныеСтроки Цикл
		ТаблицаПараметровОтбораБД.Удалить(ОбработаннаяСтрока);
	КонецЦикла;
	
	// Добавим остальные отборы
	ТаблицаПараметровОтбораБД.Колонки.Добавить("УИДГруппыОтборов");
	ТаблицаПараметровОтбораБД.ЗаполнитьЗначения(0,"УИДГруппыОтборов");
	ТаблицаПараметровОтбораБД.Колонки.Добавить("ВключаетсяВПоля");
	ТаблицаПараметровОтбораБД.ЗаполнитьЗначения(Ложь,"ВключаетсяВПоля");
	
	ТекстОтбора = СформироватьТекстОтбора(ТаблицаПараметровОтбораБД,тПараметрыПакетаВТ,0,,,Ложь);
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%Отбор%",СтрЗаменить(ТекстОтбора,"%ИмяТаблицы%","ТаблицаДанных"));
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ОтборВТ%","Истина" + СтрЗаменить(ТекстОтбора,"%ИмяТаблицы%.",""));
	
	// Добавим запрос ВТ в таблицы
	НСтрокаДанные = тПодзапросыДанныхВТ.Добавить();
	НСтрокаДанные.НомерПодзапроса = тПодзапросыДанныхВТ.Количество();
	НСтрокаДанные.ТекстПодзапроса = ТекстЗапросаВТ;                              
	НСтрокаДанные.КомментарийКПодзапросу = "ПОДЗАПРОС ВРЕМЕННОЙ ТАБЛИЦЫ ДЛЯ ПОЛУЧЕНИЯ ДАННЫХ ИЗ ТЕКУЩЕЙ ИБ";

	#КонецОбласти

	#Область ТаблицыДляИтоговыхДанных
	
	// Подготовительные данные
	Если ДанныеДляРасчета.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
	
		тПоказателейИсходная = ДанныеДляРасчета.ПоляЗначенийПоказателей;
		тПоказателей = тПоказателейИсходная.Скопировать();
		тПоказателей.Свернуть("Поле,ТипЗначения,УИДЗаполненияАналитик");
		
		СчетаДт = Новый Массив;
		СчетаКт = Новый Массив; 		
				
		тПоказателиСчета = Новый ТаблицаЗначений;
		тПоказателиСчета.Колонки.Добавить("НомерСреза", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5));
		тПоказателиСчета.Колонки.Добавить("Показатель", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОтчетов"));
		тПоказателиСчета.Колонки.Добавить("УИДГруппыОтборов", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5));
		МассивТиповСчет = Новый Массив;
		МассивТиповСчет.Добавить(ТипЗнч(тПоказателейИсходная.Получить(0).Счет));
		тПоказателиСчета.Колонки.Добавить("Счет", Новый ОписаниеТипов(МассивТиповСчет));
		Если ДанныеДляРасчета.КорреспонденцияСчетов Тогда
			тПоказателиСчета.Колонки.Добавить("КоррСчет", Новый ОписаниеТипов(МассивТиповСчет));
		КонецЕсли;
		
		ТекстШаблонаЗапроса = "
		|
		|// ДАННЫЕ ИЗ РЕГИСТРА БУХГАЛТЕРИИ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоказателиСчета.Показатель КАК Показатель,
		|	ТаблицаДанных.ПериодОтчета КАК ПериодОтчета,
		|	ПоказателиСчета.УИДГруппыОтборов КАК УИДГруппыОтборов %ТекстАналитики% %ТекстРесурсов%
		|//ПОМЕСТИТЬ
		|ИЗ
		|	втДанные_%УИД% КАК ТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиСчета_%УИД% КАК ПоказателиСчета 
		|		ПО ПоказателиСчета.НомерСреза = %НомерСреза%
		|		И ТаблицаДанных.Счет = ПоказателиСчета.Счет";
		
		Если ДанныеДляРасчета.КорреспонденцияСчетов Тогда
			ТекстШаблонаЗапроса = ТекстШаблонаЗапроса + "
			|		И ТаблицаДанных.КоррСчет = ПоказателиСчета.КоррСчет";
		КонецЕсли;
		
	Иначе
		
		тПоказателей = ДанныеДляРасчета.ПоляЗначенийПоказателей;
		
		ТекстШаблонаЗапроса = "
		|
		|// ДАННЫЕ ИЗ ВНУТРЕННИХ ИСТОЧНИКОВ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	%Показатель% КАК Показатель,
		|	ТаблицаДанных.ПериодОтчета КАК ПериодОтчета,		
		|	%УИДГруппыОтборов% КАК УИДГруппыОтборов %ТекстАналитики% %ТекстРесурсов%
		|//ПОМЕСТИТЬ
		|ИЗ
		|	втДанные_%УИД% КАК ТаблицаДанных";

	КонецЕсли;
	
	НомерСреза = 0;
	ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"%УИД%",ДанныеДляРасчета.УИДСреза);
	
	// Общие тексты аналитик и ресурсов
	ТекстРесурсовОбщая = СформироватьТекстРесурсов(тИспользуемыеРесурсы,0);
	ТекстАналитикиОбщая = СформироватьТекстАналитик(тИспользуемыеАналитики,0,1);	 
	
	// Формирование текстов запросов
	Для Каждого СтрокаРесурс Из тПоказателей Цикл	
		
		// Текст ресурсов
		Если СтрокаРесурс.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			ТекстРесурсов = СтрЗаменить(ТекстРесурсовОбщая,"%ИмяТаблицы%.ЗначениеНечисловое","НЕОПРЕДЕЛЕНО");
			Если ДанныеДляРасчета.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос
				Или ДанныеДляРасчета.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеСправочники Тогда
				ТекстРесурсов = СтрЗаменить(ТекстРесурсов,"%ИмяТаблицы%.Значение","ВЫРАЗИТЬ(ТаблицаДанных." + СтрЗаменить(СтрокаРесурс.Поле,".","") + " КАК Число)");
			Иначе				
				ТекстРесурсов = СтрЗаменить(ТекстРесурсов,"%ИмяТаблицы%.Значение","ТаблицаДанных." + СтрЗаменить(СтрокаРесурс.Поле,".",""));
			КонецЕсли;
		Иначе
			ТекстРесурсов = СтрЗаменить(ТекстРесурсовОбщая,"%ИмяТаблицы%.ЗначениеНечисловое","ТаблицаДанных." + СтрЗаменить(СтрокаРесурс.Поле,".",""));
			ТекстРесурсов = СтрЗаменить(ТекстРесурсов,"%ИмяТаблицы%.Значение","0");
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"%ТекстРесурсов%",ТекстРесурсов);
		
		// Текст для установки показателей
		НомерСреза = НомерСреза + 1;
		Если ДанныеДляРасчета.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда			
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%НомерСреза%",Формат(НомерСреза, "ЧН=0; ЧГ="));
			
			// Таблица счетов и показателей
			СтрокиПоказателей = тПоказателейИсходная.НайтиСтроки(
				Новый Структура("Поле,ТипЗначения,УИДЗаполненияАналитик",
				СтрокаРесурс.Поле,СтрокаРесурс.ТипЗначения,СтрокаРесурс.УИДЗаполненияАналитик));			
				
			Для Каждого СтрокаПоказатель Из СтрокиПоказателей Цикл
					
				СтрокаСчетаСИерархией = тСчетаСИерархией.Найти(СтрокаПоказатель.Счет,"Счет");
				Если СтрокаСчетаСИерархией = Неопределено Тогда
					
					// Счет без иерархии
					Если СчетаДт.Найти(СтрокаПоказатель.Счет) = Неопределено Тогда
						СчетаДт.Добавить(СтрокаПоказатель.Счет);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаПоказатель.КоррСчет) Тогда
						
						СтрокаСчетаСИерархией = тСчетаСИерархией.Найти(СтрокаПоказатель.КоррСчет,"Счет");
						Если СтрокаСчетаСИерархией = Неопределено Тогда
							
							// КоррСчет без иерархии
							Если СчетаКт.Найти(СтрокаПоказатель.КоррСчет) = Неопределено Тогда
								СчетаКт.Добавить(СтрокаПоказатель.КоррСчет);
							КонецЕсли;
							
							НСтрока = тПоказателиСчета.Добавить();
							ЗаполнитьЗначенияСвойств(НСтрока, СтрокаПоказатель);
							НСтрока.НомерСреза = НомерСреза;
							
						Иначе
							
							// КоррСчет с иерархией
							Для Каждого ТекКоррСчет Из СтрокаСчетаСИерархией.МассивПодчиненныхСчетов Цикл
							
								Если СчетаКт.Найти(ТекКоррСчет) = Неопределено Тогда
									СчетаКт.Добавить(ТекКоррСчет);
								КонецЕсли;								
						
								НСтрока = тПоказателиСчета.Добавить();
								ЗаполнитьЗначенияСвойств(НСтрока, СтрокаПоказатель);
								НСтрока.КоррСчет = ТекКоррСчет;
								НСтрока.НомерСреза = НомерСреза;
								
							КонецЦикла;						
							
						КонецЕсли;
						
					Иначе
						
						НСтрока = тПоказателиСчета.Добавить();
						ЗаполнитьЗначенияСвойств(НСтрока, СтрокаПоказатель);
						НСтрока.НомерСреза = НомерСреза;
						
					КонецЕсли;
					
				Иначе
					
					Для Каждого ТекСчет Из СтрокаСчетаСИерархией.МассивПодчиненныхСчетов Цикл 					
						
						Если СчетаДт.Найти(ТекСчет) = Неопределено Тогда
							СчетаДт.Добавить(ТекСчет);
						КонецЕсли;
						
						Если ЗначениеЗаполнено(СтрокаПоказатель.КоррСчет) Тогда
						
							СтрокаСчетаСИерархией = тСчетаСИерархией.Найти(СтрокаПоказатель.КоррСчет,"Счет");
							Если СтрокаСчетаСИерархией = Неопределено Тогда
								
								// КоррСчет без иерархии
								Если СчетаКт.Найти(СтрокаПоказатель.КоррСчет) = Неопределено Тогда
									СчетаКт.Добавить(СтрокаПоказатель.КоррСчет);
								КонецЕсли;
								
								НСтрока = тПоказателиСчета.Добавить();
								ЗаполнитьЗначенияСвойств(НСтрока, СтрокаПоказатель);
								НСтрока.Счет = ТекСчет;
								НСтрока.НомерСреза = НомерСреза;
								
							Иначе
								
								// КоррСчет с иерархией
								Для Каждого ТекКоррСчет Из СтрокаСчетаСИерархией.МассивПодчиненныхСчетов Цикл
								
									Если СчетаКт.Найти(ТекКоррСчет) = Неопределено Тогда
										СчетаКт.Добавить(ТекКоррСчет);
									КонецЕсли;								
							
									НСтрока = тПоказателиСчета.Добавить();
									ЗаполнитьЗначенияСвойств(НСтрока, СтрокаПоказатель);
									НСтрока.Счет = ТекКоррСчет;
									НСтрока.КоррСчет = ТекСчет;
									НСтрока.НомерСреза = НомерСреза;
									
								КонецЦикла;						
								
							КонецЕсли;
							
						Иначе
							
							НСтрока = тПоказателиСчета.Добавить();
							ЗаполнитьЗначенияСвойств(НСтрока, СтрокаПоказатель);
							НСтрока.Счет = ТекСчет;
							НСтрока.НомерСреза = НомерСреза;
							
						КонецЕсли;
						
					КонецЦикла;					
					
				КонецЕсли;								
				
			КонецЦикла;
			
			ПоказательОтбор = СтрокаПоказатель.Показатель;
			
		Иначе
			
			ПоказательОтбор = СтрокаРесурс.Показатель;
			
			// Добавим параметр-показатель
			НСтрока = тПараметрыПакета.Добавить();
			НСтрока.ИмяОтбора = "Показатель_" + Формат(НомерСреза, "ЧН=0; ЧГ=") + "_" + ДанныеДляРасчета.УИДСреза;
			НСтрока.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
			НСтрока.ЗначениеОтбора = ПоказательОтбор;

			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%Показатель%","&" + НСтрока.ИмяОтбора);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%УИДГруппыОтборов%",Формат(СтрокаРесурс.УИДГруппыОтборов,"ЧН=0; ЧГ=0"));

		КонецЕсли;
		
		// Текст аналитик
		ТекстАналитики = ТекстАналитикиОбщая;
		ПоляАналитикПоказателей = ДанныеДляРасчета.ПоляАналитикПоказателей.НайтиСтроки(
			Новый Структура("Показатель", ПоказательОтбор));
		Для Каждого СтрокаАналитика Из ПоляАналитикПоказателей Цикл
				
			Если СтрокаАналитика.СпособЗаполнения = Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы Тогда
				Если СтрокаАналитика.КодАналитики = "АналитикаВалюта" Тогда
					ТекстАналитики = СтрЗаменить(ТекстАналитики,"%ИмяТаблицы%." + СтрокаАналитика.КодАналитики,"ISNULL(ВЫБОР
					|		КОГДА ТаблицаДанных." + СтрокаАналитика.Поле + " = НЕОПРЕДЕЛЕНО ТОГДА
					|			ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
					|		ИНАЧЕ
					|			ТаблицаДанных." + СтрокаАналитика.Поле + "
					|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))");
				Иначе
					ТекстАналитики = СтрЗаменить(ТекстАналитики,"%ИмяТаблицы%." + СтрокаАналитика.КодАналитики,"ISNULL(ТаблицаДанных." + СтрокаАналитика.Поле + ",НЕОПРЕДЕЛЕНО)");
				КонецЕсли;
			ИначеЕсли СтрокаАналитика.СпособЗаполнения = Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение Тогда
				нПараметр = ДобавитьПараметрВПакет(тПараметрыПакета,
					Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение,СтрокаАналитика.ФиксированноеЗначение,СтрокаАналитика.КодАналитики);
				ТекстАналитики = СтрЗаменить(ТекстАналитики,"%ИмяТаблицы%." + СтрокаАналитика.КодАналитики,"&" + нПараметр.ИмяОтбора);
			ИначеЕсли СтрокаАналитика.СпособЗаполнения = Перечисления.СпособыЗаполненияПолейИсточника.КонтекстОбъектаЗагрузки Тогда
				нПараметр = ДобавитьПараметрВПакет(тПараметрыПакета,
					"КонтекстВызоваЗаполнения",СтрокаАналитика.Поле,СтрокаАналитика.КодАналитики);
				ТекстАналитики =  СтрЗаменить(ТекстАналитики,"%ИмяТаблицы%." + СтрокаАналитика.КодАналитики,"&" + нПараметр.ИмяОтбора);
			Иначе
				Если СтрокаАналитика.КодАналитики = "АналитикаВалюта" Тогда
					ТекстАналитики = СтрЗаменить(ТекстАналитики,"%ИмяТаблицы%." + СтрокаАналитика.КодАналитики, "ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)");
				Иначе
					ТекстАналитики = СтрЗаменить(ТекстАналитики,"%ИмяТаблицы%." + СтрокаАналитика.КодАналитики, "НЕОПРЕДЕЛЕНО");
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Сч = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			ТекстАналитики = СтрЗаменить(ТекстАналитики,"%ИмяТаблицы%.Аналитика" + Сч,"НЕОПРЕДЕЛЕНО");
		КонецЦикла;
		ТекстАналитики = СтрЗаменить(ТекстАналитики,"%ИмяТаблицы%.АналитикаВалюта","ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)");
		Если СтрНайти(ТекстАналитики,"%ИмяТаблицы%") > 0 Тогда
			// В зависимых операндах есть отборы по отличным от аналитик реквизитам. 
			ТекстОшибки = НСтр("ru = 'Отбор по отличным от аналитик реквизитам не поддерживается'");
			ВызватьИсключение(ТекстОшибки);
		КонецЕсли;		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстАналитики%",ТекстАналитики);
				
		// Добавляем запрос в таблицы
		НСтрокаДанные = тПодзапросыДанных.Добавить();
		НСтрокаДанные.НомерПодзапроса = тПодзапросыДанных.Количество();
		НСтрокаДанные.ТекстПодзапроса = ТекстЗапроса;                              
		НСтрокаДанные.КомментарийКПодзапросу = "ПОДЗАПРОС ДЛЯ ПОЛУЧЕНИЯ ДАННЫХ ИЗ ТЕКУЩЕЙ ИБ";
		
	КонецЦикла;
	
	Если ДанныеДляРасчета.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
		
		// Добавляем таблицу счетов и показателей в параметры
		НСтрока = тПараметрыПакетаВТ.Добавить();
		НСтрока.ИмяОтбора = "ПоказателиСчета_" + ДанныеДляРасчета.УИДСреза;
		НСтрока.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
		НСтрока.ЗначениеОтбора = тПоказателиСчета;
			
		// Счета для РБ
		НСтрока = тПараметрыПакетаВТ.Добавить();
		НСтрока.ИмяОтбора = "Счета_" + ДанныеДляРасчета.УИДСреза;
		НСтрока.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
		НСтрока.ЗначениеОтбора = СчетаДт;
		
		Если ДанныеДляРасчета.КорреспонденцияСчетов Тогда
			НСтрока = тПараметрыПакетаВТ.Добавить();
			НСтрока.ИмяОтбора = "СчетаКт_" + ДанныеДляРасчета.УИДСреза;
			НСтрока.ТипОтбора = Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
			НСтрока.ЗначениеОтбора = СчетаКт;
		КонецЕсли;
	
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти


#Область ПроцедурыГенерацииЗапросовРегистровИСправочниковВнешних

////////////////////////////////////////////////////////////////////////////////
// Процедуры для подготовки текстов запросов для подъема данных из внешних регистров и справочников
//  
////////////////////////////////////////////////////////////////////////////////

Процедура ПодготовитьТекстЗапросаПоПроизвольномуКоду(СтруктураРасчетаПоказателей, СтруктураПараметровТекущегоУровня)
	
	тПроизвольныйКод 		= СтруктураРасчетаПоказателей.тПроизвольныйКод;
	Если тПроизвольныйКод.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	тИспользуемыеАналитики	= СтруктураРасчетаПоказателей.тИспользуемыеАналитики;
	тИспользуемыеРесурсы    = СтруктураРасчетаПоказателей.тИспользуемыеРесурсы;	
	
	тПараметрыПакета        = СтруктураПараметровТекущегоУровня.тПараметрыПакета;
	тПодзапросыДанных		= СтруктураПараметровТекущегоУровня.тПодзапросыДанных;	
	тПараметрыПакетаВТ		= СтруктураПараметровТекущегоУровня.тПараметрыПакетаВТ;
	тПодзапросыДанныхВТ		= СтруктураПараметровТекущегоУровня.тПодзапросыДанныхВТ;	
	
	// Сформируем текст аналитик и ресурсов
	ТекстРесурсов = СтрЗаменить(СформироватьТекстРесурсов(тИспользуемыеРесурсы,0),"%ИмяТаблицы%","ПроизвольныйКод");
	ТекстАналитик = "";
	Для Каждого СтрАналитика Из тИспользуемыеАналитики.НайтиСтроки(Новый Структура("УровеньРасчета",0)) Цикл
		ТекстАналитик = ТекстАналитик  + ",
		|	НЕОПРЕДЕЛЕНО КАК " + СтрАналитика.Поле;
	КонецЦикла;
	
	// Запрос для временной таблицы
	ТекстЗапросаВТ = "
	|ВЫБРАТЬ 
	|	ПроизвольныйКод.Показатель КАК Показатель,
	|	ПроизвольныйКод.ПериодОтчета КАК ПериодОтчета %ТекстРесурсов%
	|ПОМЕСТИТЬ втДанныеПроизвольныйКод
	|ИЗ
	|	&тзДанныеПроизвольныйКод КАК ПроизвольныйКод";
	
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ТекстРесурсов%",СокрЛП(ТекстРесурсов));
	
	нПараметр = тПараметрыПакетаВТ.Добавить();
	нПараметр.ИмяОтбора 		= "тзДанныеПроизвольныйКод";
	нПараметр.ТипОтбора 		= "ДанныеПроизвольныйКод";
	нПараметр.ЗначениеОтбора 	= тПроизвольныйКод;
	
	// Подзапрос для запроса 0 уровня	
	ТекстЗапроса = "
	|
	|// ДАННЫЕ ИЗ ПРОИЗВОЛЬНОГО ЗАПРОСА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	ПроизвольныйКод.Показатель КАК Показатель,
	|	ПроизвольныйКод.ПериодОтчета КАК ПериодОтчета,
	|	ПоказателиОперанды.УИДГруппыОтборов КАК УИДГруппыОтборов %ТекстАналитик% %ТекстРесурсов%
	|//ПОМЕСТИТЬ
	|ИЗ
	|	втПоказателиОперанды КАК ПоказателиОперанды
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеПроизвольныйКод КАК ПроизвольныйКод
	|		ПО ПоказателиОперанды.ПоказательОперанд = ПроизвольныйКод.Показатель
	|		И ПоказателиОперанды.УровеньРасчетаОперанда = 1";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстАналитик%",СокрЛП(ТекстАналитик));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстРесурсов%",СокрЛП(ТекстРесурсов));
	
	// Добавим запросы в таблицы
	НСтрокаДанные = тПодзапросыДанныхВТ.Добавить();
	НСтрокаДанные.НомерПодзапроса = тПодзапросыДанныхВТ.Количество();
	НСтрокаДанные.ТекстПодзапроса = ТекстЗапросаВТ;                              
	НСтрокаДанные.КомментарийКПодзапросу = "ПОДЗАПРОС ВРЕМЕННОЙ ТАБЛИЦЫ ДЛЯ ПОЛУЧЕНИЯ ДАННЫХ РАССЧИТАННЫХ ПРОИЗВОЛЬНЫМ КОДОМ";
	
	НСтрокаДанные = тПодзапросыДанных.Добавить();
	НСтрокаДанные.НомерПодзапроса = тПодзапросыДанных.Количество();
	НСтрокаДанные.ТекстПодзапроса = ТекстЗапроса;                              
	НСтрокаДанные.КомментарийКПодзапросу = "ПОДЗАПРОС ДЛЯ ПОЛУЧЕНИЯ ДАННЫХ РАССЧИТАННЫХ ПРОИЗВОЛЬНЫМ КОДОМ";	
	
КонецПроцедуры

Процедура ПодготовитьТекстЗапросаПоПроизвольномуЗапросу(СтруктураРасчетаПоказателей, СтруктураПараметровТекущегоУровня)
	
	тПроизвольныеЗапросы 				= СтруктураРасчетаПоказателей.тПроизвольныеЗапросы;
	Если тПроизвольныеЗапросы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	тИспользуемыеАналитики              = СтруктураРасчетаПоказателей.тИспользуемыеАналитики;
	тИспользуемыеРесурсы              	= СтруктураРасчетаПоказателей.тИспользуемыеРесурсы;	
	
	тПараметрыПакета            		= СтруктураПараметровТекущегоУровня.тПараметрыПакета;
	тПодзапросыДанных					= СтруктураПараметровТекущегоУровня.тПодзапросыДанных;	
	тПараметрыПакетаВТ					= СтруктураПараметровТекущегоУровня.тПараметрыПакетаВТ;
	тПодзапросыДанныхВТ					= СтруктураПараметровТекущегоУровня.тПодзапросыДанныхВТ;	
	
	// Сформируем текст аналитик и ресурсов
	ТекстАналитик = СтрЗаменить(СформироватьТекстАналитик(тИспользуемыеАналитики,0),"%ИмяТаблицы%","ПроизвольныйЗапрос");
	ТекстРесурсов = СтрЗаменить(СформироватьТекстРесурсов(тИспользуемыеРесурсы,0),"%ИмяТаблицы%","ПроизвольныйЗапрос");
	
	// Запрос для временной таблицы
	ТекстЗапросаВТ = "
	|ВЫБРАТЬ 
	|	ПроизвольныйЗапрос.Показатель КАК Показатель,
	|	ПроизвольныйЗапрос.КодВФормуле КАК КодВФормуле,
	|	ПроизвольныйЗапрос.ПериодОтчета КАК ПериодОтчета %ТекстАналитик% %ТекстРесурсов%
	|ПОМЕСТИТЬ втДанныеПроизвольныйЗапрос
	|ИЗ
	|	&тзДанныеПроизвольныйЗапрос КАК ПроизвольныйЗапрос";
	
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ТекстАналитик%",ТекстАналитик);
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ТекстРесурсов%",ТекстРесурсов);
	
	нПараметр = тПараметрыПакетаВТ.Добавить();
	нПараметр.ИмяОтбора = "тзДанныеПроизвольныйЗапрос";
	нПараметр.ТипОтбора = "ДанныеПроизвольныйЗапрос";
	нПараметр.ЗначениеОтбора = тПроизвольныеЗапросы;
	
	// Подзапрос для запроса 0 уровня	
	ТекстЗапроса = "
	|
	|// ДАННЫЕ ИЗ ПРОИЗВОЛЬНОГО ЗАПРОСА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	ПроизвольныйЗапрос.Показатель КАК Показатель,
	|	ПроизвольныйЗапрос.ПериодОтчета КАК ПериодОтчета,
	|	тПоказателиОперанды.УИДГруппыОтборов КАК УИДГруппыОтборов %ТекстАналитик% %ТекстРесурсов%
	|//ПОМЕСТИТЬ
	|ИЗ
	|	втПоказателиОперанды КАК тПоказателиОперанды
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеПроизвольныйЗапрос КАК ПроизвольныйЗапрос
	|		ПО тПоказателиОперанды.ПоказательОперанд = ПроизвольныйЗапрос.Показатель
	|		И тПоказателиОперанды.КодВФормуле = ПроизвольныйЗапрос.КодВФормуле
	|		И тПоказателиОперанды.УровеньРасчетаОперанда = 1";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстАналитик%",СокрЛП(ТекстАналитик));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстРесурсов%",СокрЛП(ТекстРесурсов));
	
	// Добавим запросы в таблицы
	НСтрокаДанные = тПодзапросыДанныхВТ.Добавить();
	НСтрокаДанные.НомерПодзапроса = тПодзапросыДанныхВТ.Количество();
	НСтрокаДанные.ТекстПодзапроса = ТекстЗапросаВТ;                              
	НСтрокаДанные.КомментарийКПодзапросу = "ПОДЗАПРОС ВРЕМЕННОЙ ТАБЛИЦЫ ДЛЯ ПОЛУЧЕНИЯ ДАННЫХ ИЗ ПРОИЗВОЛЬНОГО ЗАПРОСА";
	
	НСтрокаДанные = тПодзапросыДанных.Добавить();
	НСтрокаДанные.НомерПодзапроса = тПодзапросыДанных.Количество();
	НСтрокаДанные.ТекстПодзапроса = ТекстЗапроса;                              
	НСтрокаДанные.КомментарийКПодзапросу = "ПОДЗАПРОС ДЛЯ ПОЛУЧЕНИЯ ДАННЫХ ИЗ ПРОИЗВОЛЬНОГО ЗАПРОСА";	
	
КонецПроцедуры

Процедура ПодготовитьТекстЗапросаПоИсточникуВнешнему(СтруктураРасчетаПоказателей, СтруктураПараметровТекущегоУровня)
	
	тВнешниеДанные		 				= СтруктураРасчетаПоказателей.тВнешниеДанные;
	Если тВнешниеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	тИспользуемыеАналитики              = СтруктураРасчетаПоказателей.тИспользуемыеАналитики;
	тИспользуемыеРесурсы              	= СтруктураРасчетаПоказателей.тИспользуемыеРесурсы;
	
	тПараметрыПакета            		= СтруктураПараметровТекущегоУровня.тПараметрыПакета;
	тПодзапросыДанных					= СтруктураПараметровТекущегоУровня.тПодзапросыДанных;	
	тПараметрыПакетаВТ					= СтруктураПараметровТекущегоУровня.тПараметрыПакетаВТ;
	тПодзапросыДанныхВТ					= СтруктураПараметровТекущегоУровня.тПодзапросыДанныхВТ;	
	
	// Сформируем текст аналитик и ресурсов
	ТекстАналитик = СтрЗаменить(СформироватьТекстАналитик(тИспользуемыеАналитики,0),"%ИмяТаблицы%","ВнешниеДанные");
	ТекстРесурсов = СтрЗаменить(СформироватьТекстРесурсов(тИспользуемыеРесурсы,0),"%ИмяТаблицы%","ВнешниеДанные");
	
	// Запрос для временной таблицы
	ТекстЗапросаВТ = "
	|ВЫБРАТЬ 
	|	ВнешниеДанные.Показатель КАК Показатель,
	|	ВнешниеДанные.КодВФормуле КАК КодВФормуле,
	|	ВнешниеДанные.ПериодОтчета КАК ПериодОтчета %ТекстАналитик% %ТекстРесурсов%
	|ПОМЕСТИТЬ втДанныеВнешнийИсточник
	|ИЗ
	|	&тзДанныеВнешнийИсточник КАК ВнешниеДанные";
	
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ТекстАналитик%",ТекстАналитик);
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"%ТекстРесурсов%",ТекстРесурсов);
	
	нПараметр = тПараметрыПакетаВТ.Добавить();
	нПараметр.ИмяОтбора = "тзДанныеВнешнийИсточник";
	нПараметр.ТипОтбора = "ДанныеВнешнийИсточник";
	нПараметр.ЗначениеОтбора = тВнешниеДанные;
	
	// Подзапрос для запроса 0 уровня	
	ТекстЗапроса = "
	|
	|// ДАННЫЕ ИЗ ВНЕШНИХ ИСТОЧНИКОВ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	ВнешниеДанные.Показатель КАК Показатель,
	|	ВнешниеДанные.ПериодОтчета КАК ПериодОтчета,
	|	тПоказателиОперанды.УИДГруппыОтборов КАК УИДГруппыОтборов %ТекстАналитик% %ТекстРесурсов%
	|//ПОМЕСТИТЬ
	|ИЗ
	|	втПоказателиОперанды КАК тПоказателиОперанды
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеВнешнийИсточник КАК ВнешниеДанные
	|		ПО тПоказателиОперанды.ПоказательОперанд = ВнешниеДанные.Показатель
	|		И тПоказателиОперанды.КодВФормуле = ВнешниеДанные.КодВФормуле
	|		И тПоказателиОперанды.УровеньРасчетаОперанда = 1";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстАналитик%",СокрЛП(ТекстАналитик));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстРесурсов%",СокрЛП(ТекстРесурсов));
	
	// Добавим запросы в таблицы
	НСтрокаДанные = тПодзапросыДанныхВТ.Добавить();
	НСтрокаДанные.НомерПодзапроса = тПодзапросыДанныхВТ.Количество();
	НСтрокаДанные.ТекстПодзапроса = ТекстЗапросаВТ;                              
	НСтрокаДанные.КомментарийКПодзапросу = "ПОДЗАПРОС ВРЕМЕННОЙ ТАБЛИЦЫ ДЛЯ ПОЛУЧЕНИЯ ДАННЫХ ИЗ ВНЕШНЕЙ ИБ";
	
	НСтрокаДанные = тПодзапросыДанных.Добавить();
	НСтрокаДанные.НомерПодзапроса = тПодзапросыДанных.Количество();
	НСтрокаДанные.ТекстПодзапроса = ТекстЗапроса;                              
	НСтрокаДанные.КомментарийКПодзапросу = "ПОДЗАПРОС ДЛЯ ПОЛУЧЕНИЯ ДАННЫХ ИЗ ВНЕШНЕЙ ИБ";	
	
КонецПроцедуры

#КонецОбласти


#Область ПроцедурыПодготовкиЗапросовДляРасчетаВыраженийОперандов

////////////////////////////////////////////////////////////////////////////////
// Процедуры для подготовки текстов запросов для расчета операндов
//  
////////////////////////////////////////////////////////////////////////////////

Процедура ПодготовитьТекстЗапросаОперандовРучнойПодсчет(СтруктураРасчетаПоказателей, СтруктураПараметровТекущегоУровня)
	
	тИспользуемыеАналитики				= СтруктураРасчетаПоказателей.тИспользуемыеАналитики;
	тИспользуемыеРесурсы				= СтруктураРасчетаПоказателей.тИспользуемыеРесурсы;
	МаксИспользуемыхАналитик        	= СтруктураРасчетаПоказателей.МаксИспользуемыхАналитик;
	МаксКлючевыхАналитик				= СтруктураРасчетаПоказателей.МаксКлючевыхАналитик;
	УровниСВременнымРасчетом			= СтруктураРасчетаПоказателей.УровниСВременнымРасчетом;
	
	тПодзапросыДанных  					= СтруктураПараметровТекущегоУровня.тПодзапросыДанных;
	тПараметрыПакета           			= СтруктураПараметровТекущегоУровня.тПараметрыПакета;
	УровеньРасчетаПотребителя 			= СтруктураПараметровТекущегоУровня.УровеньРасчета;	
	ПоказателиТекущегоУровня			= СтруктураПараметровТекущегоУровня.ПоказателиТекущегоУровня;	
	
	// Запрос с временной таблицей
	ТекстШаблонОбщегоЗапроса = "
	|
	|// ВРЕМЕННАЯ ТАБЛИЦА С РАССЧИТАННЫМИ ДАННЫМИ УРОВЕНЬ - %УровеньРасчетаПотребителя% 
	|
	|ВЫБРАТЬ
	|	РассчитанныеЗначения.Показатель КАК Показатель,
	|	РассчитанныеЗначения.ПериодОтчета КАК ПериодОтчета %ТекстАналитик% %ТекстРесурсов%
	|ПОМЕСТИТЬ втРассчитанныеЗначения  
	|ИЗ
	|	&тзРассчитанныеЗначения КАК РассчитанныеЗначения
	|;";	
	
	ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса,"%УровеньРасчетаПотребителя%",Строка(УровеньРасчетаПотребителя));
	
	// Замены текстов аналитик
	ТекстАналитик = СформироватьТекстАналитик(тИспользуемыеАналитики,УровеньРасчетаПотребителя);
	ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса,"%ТекстАналитик%",СтрЗаменить(ТекстАналитик,"%ИмяТаблицы%","РассчитанныеЗначения"));

	// Замеры текстов ресурсов
	ТекстРесурсов = СформироватьТекстРесурсов(тИспользуемыеРесурсы,УровеньРасчетаПотребителя);
	ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса,"%ТекстРесурсов%",СтрЗаменить(ТекстРесурсов,"%ИмяТаблицы%","РассчитанныеЗначения"));
	
	НСтрокаДанные 							= тПодзапросыДанных.Вставить(0); 		
	НСтрокаДанные.НомерПодзапроса 			= 0;
	НСтрокаДанные.ТекстПодзапроса 			= ТекстШаблонОбщегоЗапроса;                              
	НСтрокаДанные.КомментарийКПодзапросу 	= "ВРЕМЕННАЯ ТАБЛИЦА С РАССЧИТАННЫМИ ДАННЫМИ УРОВЕНЬ - " + Строка(УровеньРасчетаПотребителя);
	
	// Создадим таблицу с формулами для расчета
	тФормулыДляРасчетаВКоде = Новый ТаблицаЗначений;
	тФормулыДляРасчетаВКоде.Колонки.Добавить("Потребитель");
	тФормулыДляРасчетаВКоде.Колонки.Добавить("ТипПотребителя");
	тФормулыДляРасчетаВКоде.Колонки.Добавить("ФормулаРасчета");
	тФормулыДляРасчетаВКоде.Колонки.Добавить("ПоказателиДляРасчета");
	
	ПоказателиДляРасчета = Новый ТаблицаЗначений;
	ПоказателиДляРасчета.Колонки.Добавить("Показатель");
	ПоказателиДляРасчета.Колонки.Добавить("ТипПоказателя");
	ПоказателиДляРасчета.Колонки.Добавить("КодВФормуле");
	ПоказателиДляРасчета.Колонки.Добавить("УИДГруппыОтборов");
	ПоказателиДляРасчета.Колонки.Добавить("УИДГруппыТрансформации");
	
	Для Каждого СтрПоказатель Из ПоказателиТекущегоУровня Цикл
		
		Если Не ЗначениеЗаполнено(СтрПоказатель.Потребитель) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрФормулаДляРасчета = тФормулыДляРасчетаВКоде.Найти(СтрПоказатель.Потребитель,"Потребитель");
		Если СтрФормулаДляРасчета = Неопределено Тогда
			СтрФормулаДляРасчета 						= тФормулыДляРасчетаВКоде.Добавить();
			ЗаполнитьЗначенияСвойств(СтрФормулаДляРасчета,СтрПоказатель);
			СтрФормулаДляРасчета.ФормулаРасчета 		= СтрПоказатель.Процедура;
			СтрФормулаДляРасчета.ПоказателиДляРасчета 	= ПоказателиДляРасчета.Скопировать();
		КонецЕсли;
		
		СтрокаПоказателя = СтрФормулаДляРасчета.ПоказателиДляРасчета.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПоказателя,СтрПоказатель);
		СтрокаПоказателя.Показатель 		= СтрПоказатель.ПоказательОперанд;
		
	КонецЦикла;
	
	СтруктураОтбора	= Новый Структура;
	СтруктураОтбора.Вставить("МаксИспользуемыхАналитик",МаксИспользуемыхАналитик);
	СтруктураОтбора.Вставить("МаксКлючевыхАналитик",МаксКлючевыхАналитик);
	СтруктураОтбора.Вставить("тФормулыДляРасчетаВКоде",тФормулыДляРасчетаВКоде);
	
	нСтрПараметр 				= тПараметрыПакета.Добавить();
    нСтрПараметр.ИмяОтбора 		= "тзРассчитанныеЗначения";
	нСтрПараметр.ТипОтбора 		= "РассчитанныеЗначения";
	нСтрПараметр.ЗначениеОтбора	= СтруктураОтбора;
	
	ТекстШаблонОбщегоЗапроса = "
	|
	|// РАСЧЕТ ПОКАЗАТЕЛЕЙ БЕЗ ФОРМУЛ УРОВЕНЬ - %УровеньРасчетаПотребителя%
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	ЗначенияОперандов.Показатель КАК Показатель,
	|	ЗначенияОперандов.ПериодОтчета КАК ПериодОтчета %ТекстАналитик% %ТекстРесурсов% %ВременныйРасчет%
	|//ПОМЕСТИТЬ 
	|ИЗ
	|	втРассчитанныеЗначения КАК ЗначенияОперандов %ВременныРасчетСоединение%
	|";
	
	// Установим флаг временного расчета
	Если УровниСВременнымРасчетом.Найти(УровеньРасчетаПотребителя) = Неопределено Тогда
		ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса, "%ВременныйРасчет%", "");
		ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса, "%ВременныРасчетСоединение%", "");
	Иначе
		ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса, "%ВременныйРасчет%", ",
		|	ПоказателиОперанды.ВременныйРасчет КАК ВременныйРасчет");
		ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса, "%ВременныРасчетСоединение%", "
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|		(ВЫБРАТЬ
		|			ПоказателиОперанды.Потребитель,
		|			МАКСИМУМ(ПоказателиОперанды.ВременныйРасчет) КАК ВременныйРасчет
		|		ИЗ
		|			втПоказателиОперанды КАК ПоказателиОперанды
		|		СГРУППИРОВАТЬ ПО
		|			ПоказателиОперанды.Потребитель) КАК ПоказателиОперанды
		|		ПО ЗначенияОперандов.Показатель = ПоказателиОперанды.Потребитель");
	КонецЕсли;
	
	ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса,"%УровеньРасчетаПотребителя%",Строка(УровеньРасчетаПотребителя));
	
	// Замены текстов аналитик
	ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса,"%ТекстАналитик%",СтрЗаменить(ТекстАналитик,"%ИмяТаблицы%","ЗначенияОперандов"));

	// Замеры текстов ресурсов
	ТекстРесурсов = СформироватьТекстРесурсов(тИспользуемыеРесурсы,УровеньРасчетаПотребителя);
	ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса,"%ТекстРесурсов%",СтрЗаменить(ТекстРесурсов,"%ИмяТаблицы%","ЗначенияОперандов"));
	
	НСтрокаДанные 							= тПодзапросыДанных.Добавить(); 		
	НСтрокаДанные.НомерПодзапроса 			= тПодзапросыДанных.Количество();
	НСтрокаДанные.ТекстПодзапроса 			= ТекстШаблонОбщегоЗапроса;                              
	НСтрокаДанные.КомментарийКПодзапросу 	= "РАСЧЕТ ПОКАЗАТЕЛЕЙ ФОРМУЛОЙ В КОДЕ УРОВЕНЬ " + Строка(УровеньРасчетаПотребителя);
	
КонецПроцедуры	

Процедура ПодготовитьТекстЗапросаОперандовБезФормул(СтруктураРасчетаПоказателей, СтруктураПараметровТекущегоУровня)
	
	тИспользуемыеАналитики				= СтруктураРасчетаПоказателей.тИспользуемыеАналитики;
	тИспользуемыеРесурсы				= СтруктураРасчетаПоказателей.тИспользуемыеРесурсы;
	УровниСВременнымРасчетом			= СтруктураРасчетаПоказателей.УровниСВременнымРасчетом;
	
	тПодзапросыДанных					= СтруктураПараметровТекущегоУровня.тПодзапросыДанных;
	УровеньРасчетаПотребителя			= СтруктураПараметровТекущегоУровня.УровеньРасчета;	
	ПоказателиТекущегоУровня			= СтруктураПараметровТекущегоУровня.ПоказателиТекущегоУровня;
	
	ТекстШаблонОбщегоЗапроса = "
		|
		|// РАСЧЕТ ПОКАЗАТЕЛЕЙ БЕЗ ФОРМУЛ УРОВЕНЬ - %УровеньРасчетаПотребителя%
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	ПоказателиОперанды.Потребитель КАК Показатель,
		|	ЗначенияОперандов.ПериодОтчета КАК ПериодОтчета %ТекстАналитик% %ТекстРесурсов% %ВременныйРасчет%
		|//ПОМЕСТИТЬ
		|ИЗ
		|	втПоказателиОперанды КАК ПоказателиОперанды
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЗначенияОперандов%УровеньРасчетаОперанда% КАК ЗначенияОперандов
		|		ПО ПоказателиОперанды.ТекущийПериод = ИСТИНА
		|		И ПоказателиОперанды.УровеньРасчетаПотребителя = %УровеньРасчетаПотребителя%
		|		И ПоказателиОперанды.ВариантРасчета = 2
		|		%УсловияСоединения%
		|";
	
	// Установим флаг временного расчета
	Если УровниСВременнымРасчетом.Найти(УровеньРасчетаПотребителя) = Неопределено Тогда
		ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса, "%ВременныйРасчет%", "");
	Иначе
		ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса, "%ВременныйРасчет%", ",
		|	ПоказателиОперанды.ВременныйРасчет КАК ВременныйРасчет");
	КонецЕсли;
		
	ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса,"%УровеньРасчетаПотребителя%",Формат(УровеньРасчетаПотребителя,"ЧН=0; ЧГ=0"));
		
	// Замены текстов аналитик
	ТекстАналитик = СформироватьТекстАналитик(тИспользуемыеАналитики,УровеньРасчетаПотребителя);
	ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса,"%ТекстАналитик%",СтрЗаменить(ТекстАналитик,"%ИмяТаблицы%","ЗначенияОперандов")); 

	// Формируем тексты запросов
	ИспользуемыеПредыдущиеУровниОперандов = ПоказателиТекущегоУровня.Скопировать(Новый Структура("УровеньРасчетаПотребителя",УровеньРасчетаПотребителя));
	ИспользуемыеПредыдущиеУровниОперандов.Свернуть("УровеньРасчетаОперанда");
	
	Для Каждого СтрУровеньИспОперандов Из ИспользуемыеПредыдущиеУровниОперандов Цикл
		
		УровеньРасчетаОперанда = СтрУровеньИспОперандов.УровеньРасчетаОперанда-1;		
		ТекстЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса,"%УровеньРасчетаОперанда%",Формат(УровеньРасчетаОперанда,"ЧГ=0;ЧН=0"));
		
		// Сформируем текст ресурсов
		ТекстРесурсов = "";
		тПоляУровняПотребителя = тИспользуемыеРесурсы.Скопировать(Новый Структура("УровеньРасчета",УровеньРасчетаПотребителя), "Поле");
		тПоляУровняОперанда = тИспользуемыеРесурсы.Скопировать(Новый Структура("УровеньРасчета",УровеньРасчетаОперанда), "Поле");
		Для Каждого СтрокаТаблицы Из тПоляУровняПотребителя Цикл
			Если тПоляУровняОперанда.Найти(СтрокаТаблицы.Поле, "Поле") = Неопределено Тогда
				Если СтрокаТаблицы.Поле = "Значение" Тогда
					ТекстРесурсов = ТекстРесурсов + ",
					|	0 КАК Значение";
				Иначе
					ТекстРесурсов = ТекстРесурсов + ",
					|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловое";
				КонецЕсли;
			Иначе
				ТекстРесурсов = ТекстРесурсов + ",
				|	ЗначенияОперандов." + СтрокаТаблицы.Поле + " КАК " + СтрокаТаблицы.Поле;
			КонецЕсли;
		КонецЦикла;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТекстРесурсов%", ТекстРесурсов); 

		Если УровеньРасчетаОперанда = 0 Тогда				 
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%УсловияСоединения%","И ПоказателиОперанды.КодВФормуле = ЗначенияОперандов.КодВФормуле");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%УсловияСоединения%","И ПоказателиОперанды.ПоказательОперанд = ЗначенияОперандов.Показатель
			|		И ПоказателиОперанды.УИДГруппыОтборов = ЗначенияОперандов.УИДГруппыОтборов
			|		И ПоказателиОперанды.УИДГруппыТрансформации = ЗначенияОперандов.УИДГруппыТрансформации");
		КонецЕсли;
		
		НСтрокаДанные 							= тПодзапросыДанных.Добавить();	
		НСтрокаДанные.НомерПодзапроса 			= тПодзапросыДанных.Количество();
		НСтрокаДанные.ТекстПодзапроса 			= ТекстЗапроса;                              
		НСтрокаДанные.КомментарийКПодзапросу 	= "РАСЧЕТ ПОКАЗАТЕЛЕЙ БЕЗ ФОРМУЛ УРОВЕНЬ - "+Строка(УровеньРасчетаПотребителя);
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ПодготовитьТекстЗапросаОперандовТолькоСумма(СтруктураРасчетаПоказателей, СтруктураПараметровТекущегоУровня)

	тИспользуемыеАналитики				= СтруктураРасчетаПоказателей.тИспользуемыеАналитики;
	тИспользуемыеРесурсы				= СтруктураРасчетаПоказателей.тИспользуемыеРесурсы;
	УровниСВременнымРасчетом			= СтруктураРасчетаПоказателей.УровниСВременнымРасчетом;
	
	тПодзапросыДанных					= СтруктураПараметровТекущегоУровня.тПодзапросыДанных;
	УровеньРасчетаПотребителя			= СтруктураПараметровТекущегоУровня.УровеньРасчета;	
	ПоказателиТекущегоУровня 			= СтруктураПараметровТекущегоУровня.ПоказателиТекущегоУровня;
	
	ТекстШаблонОбщегоЗапроса = "
		|
		|// РАСЧЕТ ПОКАЗАТЕЛЕЙ АГРЕГАЦИЕЙ УРОВЕНЬ - %УровеньРасчетаПотребителя%
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Потребитель КАК Показатель,
		|	ВложенныйЗапрос.ПериодОтчета КАК ПериодОтчета %ТекстАналитикУр1% %ТекстРесурсовУр1% %ВременныйРасчетУр1%
		|//ПОМЕСТИТЬ 
		|ИЗ
		|	(
		|%ТекстВложенныйЗапрос%
		|	) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Потребитель,
		|	ВложенныйЗапрос.ПериодОтчета %ТекстАналитикиГруппировка% %ТекстРесурсыГруппировка%
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВложенныйЗапрос.Значение) <> 0";
		
	ТекстШаблонВложенногоЗапроса = 
		"	ВЫБРАТЬ
		|     	ПоказателиОперанды.Потребитель КАК Потребитель,
		|		ПоказателиОперанды.ПоказательОперанд КАК Показатель,
		|     	ЗначенияОперандов.ПериодОтчета КАК ПериодОтчета %ТекстАналитик% %ТекстРесурсов% %ВременныйРасчет%
		|	ИЗ
		|		втПоказателиОперанды КАК ПоказателиОперанды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЗначенияОперандов%УровеньРасчетаОперанда% КАК ЗначенияОперандов
		|			ПО ПоказателиОперанды.ТекущийПериод = ИСТИНА
		|			И ПоказателиОперанды.УровеньРасчетаПотребителя = %УровеньРасчетаПотребителя%
		|			И ПоказателиОперанды.ВариантРасчета = 3
		|			%УсловияСоединения%";
	
	// Установим флаг временного расчета
	Если УровниСВременнымРасчетом.Найти(УровеньРасчетаПотребителя) = Неопределено Тогда
		ТекстШаблонВложенногоЗапроса = СтрЗаменить(ТекстШаблонВложенногоЗапроса, "%ВременныйРасчет%", "");
		ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса, "%ВременныйРасчетУр1%", "");
	Иначе
		ТекстШаблонВложенногоЗапроса = СтрЗаменить(ТекстШаблонВложенногоЗапроса, "%ВременныйРасчет%", ",
		|	ПоказателиОперанды.ВременныйРасчет КАК ВременныйРасчет");
		ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса, "%ВременныйРасчетУр1%", ",
		|	МАКСИМУМ(ВложенныйЗапрос.ВременныйРасчет) КАК ВременныйРасчет");
	КонецЕсли;
		
	ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса,"%УровеньРасчетаПотребителя%",Формат(УровеньРасчетаПотребителя,"ЧН=0; ЧГ=0"));
	ТекстШаблонВложенногоЗапроса = СтрЗаменить(ТекстШаблонВложенногоЗапроса,"%УровеньРасчетаПотребителя%",Формат(УровеньРасчетаПотребителя,"ЧН=0; ЧГ=0"));
	
	// Замены текстов аналитик
	ТекстАналитик = СформироватьТекстАналитик(тИспользуемыеАналитики,УровеньРасчетаПотребителя);
	ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса,"%ТекстАналитикУр1%",СтрЗаменить(ТекстАналитик,"%ИмяТаблицы%","ВложенныйЗапрос"));

	ТекстШаблонВложенногоЗапроса = СтрЗаменить(ТекстШаблонВложенногоЗапроса,"%ТекстАналитик%",СтрЗаменить(ТекстАналитик,"%ИмяТаблицы%",Символы.Таб + "ЗначенияОперандов"));
	
	ТекстАналитик = СформироватьТекстАналитик(тИспользуемыеАналитики,УровеньРасчетаПотребителя,3);
	ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса,"%ТекстАналитикиГруппировка%",СтрЗаменить(ТекстАналитик,"%ИмяТаблицы%","ВложенныйЗапрос"));
	
	// Замены текстов ресурсов
	ТекстРесурсов = СформироватьТекстРесурсов(тИспользуемыеРесурсы,УровеньРасчетаПотребителя,2);
	ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса,"%ТекстРесурсовУр1%",СтрЗаменить(ТекстРесурсов,"%ИмяТаблицы%","ВложенныйЗапрос"));

	ТекстРесурсов = СформироватьТекстРесурсов(тИспользуемыеРесурсы,УровеньРасчетаПотребителя,3);
	ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса,"%ТекстРесурсыГруппировка%",СтрЗаменить(ТекстРесурсов,"%ИмяТаблицы%","ВложенныйЗапрос"));	
	
	// Формируем тексты запросов
	ТекстВложенногоЗапроса = "";
	ИспользуемыеПредыдущиеУровниОперандов = ПоказателиТекущегоУровня.Скопировать(Новый Структура("УровеньРасчетаПотребителя",УровеньРасчетаПотребителя),"УровеньРасчетаОперанда");
	ИспользуемыеПредыдущиеУровниОперандов.Свернуть("УровеньРасчетаОперанда");	
	
	Для Каждого СтрУровеньИспОперандов Из ИспользуемыеПредыдущиеУровниОперандов Цикл
		
		Если НЕ ПустаяСтрока(ТекстВложенногоЗапроса) Тогда
			ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + "
			|
			|	//ВЛОЖЕННЫЙ ЗАПРОС ОБЪЕДИНИТЬ
			|";
		КонецЕсли;
		
		УровеньРасчетаОперанда = СтрУровеньИспОперандов.УровеньРасчетаОперанда-1;		
		ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + СтрЗаменить(ТекстШаблонВложенногоЗапроса,"%УровеньРасчетаОперанда%",Формат(УровеньРасчетаОперанда,"ЧГ=0;ЧН=0"));		
		
		// Сформируем текст ресурсов
		ТекстРесурсов = "";
		тПоляУровняПотребителя = тИспользуемыеРесурсы.Скопировать(Новый Структура("УровеньРасчета",УровеньРасчетаПотребителя), "Поле");
		тПоляУровняОперанда = тИспользуемыеРесурсы.Скопировать(Новый Структура("УровеньРасчета",УровеньРасчетаОперанда), "Поле");
		Для Каждого СтрокаТаблицы Из тПоляУровняПотребителя Цикл
			Если тПоляУровняОперанда.Найти(СтрокаТаблицы.Поле, "Поле") = Неопределено Тогда
				Если СтрокаТаблицы.Поле = "Значение" Тогда
					ТекстРесурсов = ТекстРесурсов + ",
					|	0 КАК Значение";
				Иначе
					ТекстРесурсов = ТекстРесурсов + ",
					|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловое";
				КонецЕсли;
			Иначе
				ТекстРесурсов = ТекстРесурсов + ",
				|	ЗначенияОперандов." + СтрокаТаблицы.Поле + " КАК " + СтрокаТаблицы.Поле;
			КонецЕсли;
		КонецЦикла;
		ТекстВложенногоЗапроса = СтрЗаменить(ТекстВложенногоЗапроса, "%ТекстРесурсов%", ТекстРесурсов);		

		Если УровеньРасчетаОперанда = 0 Тогда				 
			ТекстВложенногоЗапроса = СтрЗаменить(ТекстВложенногоЗапроса,"%УсловияСоединения%","И ПоказателиОперанды.КодВФормуле = ЗначенияОперандов.КодВФормуле");
		Иначе
			ТекстВложенногоЗапроса = СтрЗаменить(ТекстВложенногоЗапроса,"%УсловияСоединения%","И ПоказателиОперанды.ПоказательОперанд = ЗначенияОперандов.Показатель
			|		И ПоказателиОперанды.УИДГруппыОтборов = ЗначенияОперандов.УИДГруппыОтборов
			|		И ПоказателиОперанды.УИДГруппыТрансформации = ЗначенияОперандов.УИДГруппыТрансформации");
		КонецЕсли;
	
	КонецЦикла;
	
	ТекстОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса,"%ТекстВложенныйЗапрос%",ТекстВложенногоЗапроса);
	
	НСтрокаДанные 							= тПодзапросыДанных.Добавить(); 		
	НСтрокаДанные.НомерПодзапроса 			= тПодзапросыДанных.Количество();
	НСтрокаДанные.ТекстПодзапроса 			= ТекстОбщегоЗапроса;                              
	НСтрокаДанные.КомментарийКПодзапросу 	= "РАСЧЕТ ПОКАЗАТЕЛЕЙ АГРЕГАЦИЕЙ УРОВЕНЬ - "+Строка(УровеньРасчетаПотребителя);
			
КонецПроцедуры	

Процедура ПодготовитьТекстЗапросаОперандовВыражение(СтруктураРасчетаПоказателей, СтруктураПараметровТекущегоУровня)

	тИспользуемыеАналитики				= СтруктураРасчетаПоказателей.тИспользуемыеАналитики;
	тИспользуемыеРесурсы				= СтруктураРасчетаПоказателей.тИспользуемыеРесурсы;
	УровниСВременнымРасчетом			= СтруктураРасчетаПоказателей.УровниСВременнымРасчетом;	
	
	тПодзапросыДанных  					= СтруктураПараметровТекущегоУровня.тПодзапросыДанных;
	тПараметрыПакета          			= СтруктураПараметровТекущегоУровня.тПараметрыПакета;
	УровеньРасчетаПотребителя 			= СтруктураПараметровТекущегоУровня.УровеньРасчета;
	ПоказателиТекущегоУровня  			= СтруктураПараметровТекущегоУровня.ПоказателиТекущегоУровня;	

	ТекстШаблонОбщегоЗапроса = "
		|
		|// РАСЧЕТ ПОКАЗАТЕЛЕЙ ФОРМУЛОЙ В ЗАПРОСЕ УРОВЕНЬ - %УровеньРасчетаПотребителя%
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапросУр2.Показатель КАК Показатель,
		|	ВложенныйЗапросУр2.ПериодОтчета КАК ПериодОтчета %ТекстАналитикУр2% %ТекстРесурсовУр2% %ВременныйРасчетУр2%
		|//ПОМЕСТИТЬ 
		|ИЗ
		|	(
		|	ВЫБРАТЬ
		|		ВложенныйЗапросУр1.Потребитель КАК Показатель,
		|		ВложенныйЗапросУр1.ПериодОтчета КАК ПериодОтчета %ТекстАналитикУр1% %ТекстРесурсовУр1% %ВременныйРасчетУр1%		
		|	ИЗ 
		|		(
		|%ТекстВложенныйЗапрос%
		|		) КАК ВложенныйЗапросУр1
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапросУр1.Потребитель,
		|	ВложенныйЗапросУр1.ПериодОтчета %ТекстАналитикиГруппировка%) КАК ВложенныйЗапросУр2";
		
	ТекстШаблонВложенногоЗапроса = 
		"		ВЫБРАТЬ
		|			ПоказателиОперанды.Потребитель КАК Потребитель,
		|			ПоказателиОперанды.ПоказательОперанд КАК Показатель,
		|			ПоказателиОперанды.КодВФормуле КАК КодВФормуле,
		|			ЗначенияОперандов.ПериодОтчета КАК ПериодОтчета %ТекстАналитик% %ТекстРесурсов% %ВременныйРасчет%
		|		ИЗ
		|			втПоказателиОперанды КАК ПоказателиОперанды
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЗначенияОперандов%УровеньРасчетаОперанда% КАК ЗначенияОперандов
		|			ПО ПоказателиОперанды.ТекущийПериод = ИСТИНА
		|				И ПоказателиОперанды.УровеньРасчетаПотребителя = %УровеньРасчетаПотребителя%
		|				И ПоказателиОперанды.ВариантРасчета = 4
		|				%УсловияСоединения%
		|		ГДЕ 
		|			ПоказателиОперанды.Потребитель = &Потребитель_%ИндексПотребителя%";
	
	// Установим флаг временного расчета
	Если УровниСВременнымРасчетом.Найти(УровеньРасчетаПотребителя) = Неопределено Тогда
		ТекстШаблонВложенногоЗапроса = СтрЗаменить(ТекстШаблонВложенногоЗапроса, "%ВременныйРасчет%", "");
		ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса, "%ВременныйРасчетУр1%", "");
		ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса, "%ВременныйРасчетУр2%", "");
	Иначе
		ТекстШаблонВложенногоЗапроса = СтрЗаменить(ТекстШаблонВложенногоЗапроса, "%ВременныйРасчет%", ",
		|	ПоказателиОперанды.ВременныйРасчет КАК ВременныйРасчет");
		ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса, "%ВременныйРасчетУр1%", ",
		|	МАКСИМУМ(ВложенныйЗапросУр1.ВременныйРасчет) КАК ВременныйРасчет");
		ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса, "%ВременныйРасчетУр2%", ",
		|	ВложенныйЗапросУр2.ВременныйРасчет КАК ВременныйРасчет");
	КонецЕсли;
		
	ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса,"%УровеньРасчетаПотребителя%",Формат(УровеньРасчетаПотребителя,"ЧН=0; ЧГ=0"));
	ТекстШаблонВложенногоЗапроса = СтрЗаменить(ТекстШаблонВложенногоЗапроса,"%УровеньРасчетаПотребителя%",Формат(УровеньРасчетаПотребителя,"ЧН=0; ЧГ=0"));
			
	// Замены текстов аналитик
	ТекстАналитик = СформироватьТекстАналитик(тИспользуемыеАналитики,УровеньРасчетаПотребителя);
	ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса,"%ТекстАналитикУр1%",СтрЗаменить(ТекстАналитик,"%ИмяТаблицы%",Символы.Таб + "ВложенныйЗапросУр1"));
	ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса,"%ТекстАналитикУр2%",СтрЗаменить(ТекстАналитик,"%ИмяТаблицы%","ВложенныйЗапросУр2"));
	
	ТекстШаблонВложенногоЗапроса = СтрЗаменить(ТекстШаблонВложенногоЗапроса,"%ТекстАналитик%",СтрЗаменить(ТекстАналитик,"%ИмяТаблицы%",Символы.Таб + Символы.Таб + "ЗначенияОперандов"));
	
	ТекстАналитик = СформироватьТекстАналитик(тИспользуемыеАналитики,УровеньРасчетаПотребителя,3);
	ТекстШаблонОбщегоЗапроса = СтрЗаменить(ТекстШаблонОбщегоЗапроса,"%ТекстАналитикиГруппировка%",СтрЗаменить(ТекстАналитик,"%ИмяТаблицы%","ВложенныйЗапросУр1"));
	
	ТекстРесурсовОбщий = СформироватьТекстРесурсов(тИспользуемыеРесурсы,УровеньРасчетаПотребителя);
	
	// Формируем тексты запросов
	ИндексПотребителя = 1;
	ПотребителиТекущегоУровня = ПоказателиТекущегоУровня.Скопировать(,"Потребитель,ТипПотребителя,Процедура");
	ПотребителиТекущегоУровня.Свернуть("Потребитель,ТипПотребителя,Процедура");	
	Для Каждого стрПотребитель Из ПотребителиТекущегоУровня Цикл
		
		ТекстЗапроса = ТекстШаблонОбщегоЗапроса;		
		ТекстРесурсов = "";
		ТекстРесурсовУр1 = "";
		ТекстРесурсовУр2 = "";
		
		// Получим выражения для ресурсов итогового запроса
		ТекстДляЯзыкаЗапросов = ПолучитьФормулуДляЯзыкаЗапросов(стрПотребитель.Процедура,"ВложенныйЗапросУр2");
		
		Если стрПотребитель.ТипПотребителя = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			ТекстРесурсовУр2 = СтрЗаменить(ТекстРесурсовОбщий,"%ИмяТаблицы%.ЗначениеНечисловое","НЕОПРЕДЕЛЕНО");
			ТекстРесурсовУр2 = СтрЗаменить(ТекстРесурсовУр2,"%ИмяТаблицы%.Значение","ВЫРАЗИТЬ(" + ТекстДляЯзыкаЗапросов + " КАК ЧИСЛО(18,5))");
		Иначе
			ТекстРесурсовУр2 = СтрЗаменить(ТекстРесурсовОбщий,"%ИмяТаблицы%.ЗначениеНечисловое",ТекстДляЯзыкаЗапросов);
			ТекстРесурсовУр2 = СтрЗаменить(ТекстРесурсовУр2,"%ИмяТаблицы%.Значение","0");
		КонецЕсли;	
		
		// Получим выражения для ресурсов вложенного запроса
		УровниРасчетаОперандов = Новый Массив;
		ИспользуемыеПредыдущиеУровниОперандов = ПоказателиТекущегоУровня.Скопировать(Новый Структура("Потребитель,УровеньРасчетаПотребителя",стрПотребитель.Потребитель,УровеньРасчетаПотребителя));
		Для Каждого СтрОперанд Из ИспользуемыеПредыдущиеУровниОперандов Цикл
			
			Если СтрНайти(ТекстДляЯзыкаЗапросов,СтрОперанд.КодВФормуле) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрОперанд.ТипПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
				ТекстРесурсов = ТекстРесурсов+",
				|			ВЫБОР КОГДА ПоказателиОперанды.КодВФормуле = &Параметр_%КодВФормуле% ТОГДА ЗначенияОперандов.Значение ИНАЧЕ 0 КОНЕЦ КАК %КодВФормуле%";
				ТекстРесурсовУр1 = ТекстРесурсовУр1+",
				|		СУММА(ВложенныйЗапросУр1.%КодВФормуле%) КАК %КодВФормуле%";
			ИначеЕсли СтрОперанд.ТипПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда
				ТекстРесурсов = ТекстРесурсов+",
				|			ВЫБОР КОГДА ПоказателиОперанды.КодВФормуле = &Параметр_%КодВФормуле% ТОГДА ВЫРАЗИТЬ(ЗначенияОперандов.ЗначениеНечисловое КАК БУЛЕВО) ИНАЧЕ ЛОЖЬ КОНЕЦ КАК %КодВФормуле%";
				ТекстРесурсовУр1 = ТекстРесурсовУр1+",
				|		МАКСИМУМ(ВложенныйЗапросУр1.%КодВФормуле%) КАК %КодВФормуле%";
			ИначеЕсли СтрОперанд.ТипПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда
				ТекстРесурсов = ТекстРесурсов+",
				|			ВЫБОР КОГДА ПоказателиОперанды.КодВФормуле = &Параметр_%КодВФормуле% ТОГДА ВЫРАЗИТЬ(ЗначенияОперандов.ЗначениеНечисловое КАК ДАТА) ИНАЧЕ ДАТАВРЕМЯ(1,1,1) КОНЕЦ КАК %КодВФормуле%";
				ТекстРесурсовУр1 = ТекстРесурсовУр1+",
				|		МАКСИМУМ(ВложенныйЗапросУр1.%КодВФормуле%) КАК %КодВФормуле%";
			ИначеЕсли СтрОперанд.ТипПоказателя = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка Тогда
				ТекстРесурсов = ТекстРесурсов+",
				|			ВЫБОР КОГДА ПоказателиОперанды.КодВФормуле = &Параметр_%КодВФормуле% ТОГДА ВЫРАЗИТЬ(ЗначенияОперандов.ЗначениеНечисловое КАК СТРОКА(1024)) ИНАЧЕ """" КОНЕЦ КАК %КодВФормуле%";
				ТекстРесурсовУр1 = ТекстРесурсовУр1+",
				|		МАКСИМУМ(ВложенныйЗапросУр1.%КодВФормуле%) КАК %КодВФормуле%";
			КонецЕсли;
			
			НОтбор 					= тПараметрыПакета.Добавить();
            НОтбор.ИмяОтбора 		= "Параметр_"+СтрОперанд.КодВФормуле;
			НОтбор.ТипОтбора 		= Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
			НОтбор.ЗначениеОтбора	= СтрОперанд.КодВФормуле;
			
			ТекстРесурсов 			= СтрЗаменить(ТекстРесурсов,"%КодВФормуле%",СтрОперанд.КодВФормуле);
			ТекстРесурсовУр1 		= СтрЗаменить(ТекстРесурсовУр1,"%КодВФормуле%",СтрОперанд.КодВФормуле);
			
			Если УровниРасчетаОперандов.Найти(СтрОперанд.УровеньРасчетаОперанда) = Неопределено Тогда
				УровниРасчетаОперандов.Добавить(СтрОперанд.УровеньРасчетаОперанда);
			КонецЕсли;
			
		КонецЦикла;	
		
		// Получим текст вложенного запроса
		ТекстВложенногоЗапроса = "";
		Для Каждого УровеньРасчетаОперанда Из УровниРасчетаОперандов Цикл
			
			Если ТекстВложенногоЗапроса <> "" Тогда
				ТекстВложенногоЗапроса = ТекстВложенногоЗапроса+"
				|
				|	//ВЛОЖЕННЫЙ ЗАПРОС ОБЪЕДИНИТЬ
				|"; 
			КонецЕсли;
			ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + ТекстШаблонВложенногоЗапроса;
			
			ТекстВложенногоЗапроса = СтрЗаменить(ТекстВложенногоЗапроса,"%УровеньРасчетаОперанда%",Формат(УровеньРасчетаОперанда-1,"ЧГ=0;ЧН=0"));
			Если УровеньРасчетаОперанда=1 Тогда				 
				ТекстВложенногоЗапроса = СтрЗаменить(ТекстВложенногоЗапроса,"%УсловияСоединения%","И ПоказателиОперанды.КодВФормуле = ЗначенияОперандов.КодВФормуле");
			Иначе
				ТекстВложенногоЗапроса = СтрЗаменить(ТекстВложенногоЗапроса,"%УсловияСоединения%","И ПоказателиОперанды.ПоказательОперанд = ЗначенияОперандов.Показатель
				|				И ПоказателиОперанды.УИДГруппыОтборов = ЗначенияОперандов.УИДГруппыОтборов
				|				И ПоказателиОперанды.УИДГруппыТрансформации = ЗначенияОперандов.УИДГруппыТрансформации");
			КонецЕсли;	
			
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстВложенныйЗапрос%",ТекстВложенногоЗапроса);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстРесурсов%",ТекстРесурсов);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстРесурсовУр1%",ТекстРесурсовУр1);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстРесурсовУр2%",ТекстРесурсовУр2);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ИндексПотребителя%",Формат(ИндексПотребителя,"ЧГ=0;ЧН=0"));

		НСтрокаДанные 							= тПодзапросыДанных.Добавить();		
		НСтрокаДанные.НомерПодзапроса 			= тПодзапросыДанных.Количество();
		НСтрокаДанные.ТекстПодзапроса 			= ТекстЗапроса;                              
		НСтрокаДанные.КомментарийКПодзапросу 	= "РАСЧЕТ ПОКАЗАТЕЛЕЙ ФОРМУЛОЙ В ЗАПРОСЕ УРОВЕНЬ "+Строка(УровеньРасчетаПотребителя);
		
		НОтбор 					= тПараметрыПакета.Добавить();
		НОтбор.ИмяОтбора 		= "Потребитель_"+Формат(ИндексПотребителя,"ЧГ=0;ЧН=0");
		НОтбор.ТипОтбора 		= Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
		НОтбор.ЗначениеОтбора	= стрПотребитель.Потребитель;	
		
		ИндексПотребителя = ИндексПотребителя+1;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПодготовитьЗапросыРекурсивныхУровней(СтруктураРасчетаПоказателей)

	глТаблицаПересчетаПоказателей       = СтруктураРасчетаПоказателей.глТаблицаПересчетаПоказателей;
    тПоказателиОперанды                 = СтруктураРасчетаПоказателей.тПоказателиОперанды;
	МаксУровеньРасчета					= СтруктураРасчетаПоказателей.МаксУровеньРасчета;
	
	Для СчПоУровнюРасчета = 1 По МаксУровеньРасчета Цикл
		
		Если СчПоУровнюРасчета = 1 Тогда
			тПоказателиОперандыТекущегоПериода = тПоказателиОперанды.Скопировать(
				Новый Структура("УровеньРасчетаПотребителя,ТекущийПериод,ДляДополненияАналитик,ВременныйРасчет",СчПоУровнюРасчета,Истина,Ложь,Ложь));	
		Иначе			
			тПоказателиОперандыТекущегоПериода = тПоказателиОперанды.Скопировать(
				Новый Структура("УровеньРасчетаПотребителя,ТекущийПериод,ДляДополненияАналитик",СчПоУровнюРасчета,Истина,Ложь));
		КонецЕсли;
		Если тПоказателиОперандыТекущегоПериода.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметровТекущегоУровня = Новый Структура;
		СтруктураПараметровТекущегоУровня.Вставить("УровеньРасчета",СчПоУровнюРасчета);		
		СтруктураПараметровТекущегоУровня.Вставить("тПодзапросыДанных",ПолучитьОписаниеТаблицыПодзапроса());
		СтруктураПараметровТекущегоУровня.Вставить("тПараметрыПакета",ПолучитьОписаниеТаблицыПараметров());		
		
		// Получаем подзапрос для потребителей, для текущего варианта расчета
		Для СчПоВариантуРасчета = 1 По 4 Цикл			
			ПоказателиТекущегоУровня = тПоказателиОперандыТекущегоПериода.Скопировать(Новый Структура("ВариантРасчета",СчПоВариантуРасчета));
			Если ПоказателиТекущегоУровня.Количество()>0 Тогда				
				СтруктураПараметровТекущегоУровня.Вставить("ПоказателиТекущегоУровня",ПоказателиТекущегоУровня);
				Если СчПоВариантуРасчета = 1 Тогда
					ПодготовитьТекстЗапросаОперандовРучнойПодсчет(СтруктураРасчетаПоказателей, СтруктураПараметровТекущегоУровня);
				ИначеЕсли СчПоВариантуРасчета = 2 Тогда
					ПодготовитьТекстЗапросаОперандовБезФормул(СтруктураРасчетаПоказателей, СтруктураПараметровТекущегоУровня);
				ИначеЕсли СчПоВариантуРасчета = 3 Тогда
					ПодготовитьТекстЗапросаОперандовТолькоСумма(СтруктураРасчетаПоказателей, СтруктураПараметровТекущегоУровня);
				Иначе
					ПодготовитьТекстЗапросаОперандовВыражение(СтруктураРасчетаПоказателей, СтруктураПараметровТекущегоУровня);
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		
		// Добавим запись в таблицу
		нСтрокаТаблицыЗапросов 						= глТаблицаПересчетаПоказателей.Добавить();
		нСтрокаТаблицыЗапросов.УровеньРасчета      	= СчПоУровнюРасчета;
		нСтрокаТаблицыЗапросов.ТекстПодзапросов     = ПолучитьТекстПоТаблицеПодзапросов(СтруктураПараметровТекущегоУровня.тПодзапросыДанных,"втПоказателиРаскрытия"+Строка(СчПоУровнюРасчета));
		нСтрокаТаблицыЗапросов.КомментарийКПакету 	= "ЗАПРОСЫ ДЛЯ РАСЧЕТА ПОКАЗАТЕЛЕЙ УРОВНЯ - "+Строка(СчПоУровнюРасчета);
		нСтрокаТаблицыЗапросов.тПараметрыПакета     = СтруктураПараметровТекущегоУровня.тПараметрыПакета;
		нСтрокаТаблицыЗапросов.ВидОперацииРасчета   = Перечисления.ВидыОперацийРасчетаПоказателей.РасчетВыраженийОперандов;
		
		Если СтруктураПараметровТекущегоУровня.тПодзапросыДанных.Количество()>0 Тогда
			ПодготовитьТекстТрансформацииТекущегоУровня(СтруктураРасчетаПоказателей, СчПоУровнюРасчета);	
		КонецЕсли;
							
	КонецЦикла;	
	
КонецПроцедуры	

#КонецОбласти


#Область ПроцедурыПодготовкиЗапросовДляЗаписиПоказателей

////////////////////////////////////////////////////////////////////////////////
// Процедуры для подготовки текстов запросов измененных показателей
//  
////////////////////////////////////////////////////////////////////////////////

Процедура СоздатьТаблицуИзмененныхПоказателей(СтруктураРасчетаПоказателей, тИзмененныеПоказатели)
	
	глТаблицаПересчетаПоказателей       = СтруктураРасчетаПоказателей.глТаблицаПересчетаПоказателей;
	МаксКлючевыхАналитик				= СтруктураРасчетаПоказателей.МаксКлючевыхАналитик;		
	МаксИспользуемыхАналитик			= СтруктураРасчетаПоказателей.МаксИспользуемыхАналитик;
	ЕстьАналитикаВалюта				= СтруктураРасчетаПоказателей.ЕстьАналитикаВалюта;
	ЕстьЗначение						= СтруктураРасчетаПоказателей.ЕстьЗначение;
	ЕстьЗначениеВалюта				= СтруктураРасчетаПоказателей.ЕстьЗначениеВалюта;
	ЕстьЗначениеНечисловое            = СтруктураРасчетаПоказателей.ЕстьЗначениеНечисловое;
	
	// Текст аналитик	
	ТекстАналитикиЗначение = "";	
	Для Сч = МаксКлючевыхАналитик+1 По МаксИспользуемыхАналитик Цикл
		ТекстАналитикиЗначение = ТекстАналитикиЗначение + ",
		|	ЗначенияПоказателей.Аналитика" + Сч + " КАК Аналитика" + Сч;
	КонецЦикла;
	Если ЕстьАналитикаВалюта Тогда
		ТекстАналитикиЗначение = ТекстАналитикиЗначение + ",
		|	ЗначенияПоказателей.АналитикаВалюта КАК АналитикаВалюта";
	КонецЕсли;
	Если ЕстьЗначение Тогда
		ТекстАналитикиЗначение = ТекстАналитикиЗначение + ",
		|	ЗначенияПоказателей.Значение КАК Значение";
	КонецЕсли;
	Если ЕстьЗначениеВалюта Тогда
		ТекстАналитикиЗначение = ТекстАналитикиЗначение + ",
		|	ЗначенияПоказателей.ЗначениеВалюта КАК ЗначениеВалюта";
	КонецЕсли;
	Если ЕстьЗначениеНечисловое Тогда
		ТекстАналитикиЗначение = ТекстАналитикиЗначение + ",
		|	ЗначенияПоказателей.ЗначениеНечисловое КАК ЗначениеНечисловое";
	КонецЕсли;
	
	ТекстЗапроса = "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияПоказателей.Показатель КАК Показатель,
		|	ЗначенияПоказателей.ПериодОтчета КАК ПериодОтчета %ТекстАналитикиЗначение%
		|ПОМЕСТИТЬ втРассчитанныеПоказатели
		|ИЗ
		|	&ИзмененныеПоказатели КАК ЗначенияПоказателей
		|;";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТекстАналитикиЗначение%", ТекстАналитикиЗначение);	
	
	тПараметрыПакета = ПолучитьОписаниеТаблицыПараметров();
	
	НПараметр					= тПараметрыПакета.Добавить();
	НПараметр.ТипОтбора 		= Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
	НПараметр.ИмяОтбора			= "ИзмененныеПоказатели";
	НПараметр.ЗначениеОтбора 	= тИзмененныеПоказатели;
	
	нСтрокаТаблицыЗапросов 						= глТаблицаПересчетаПоказателей.Добавить();
	нСтрокаТаблицыЗапросов.КомментарийКПакету	= "ДОБАВЛЕНИЕ ТАБЛИЦЫ ИЗМЕНЕННЫХ ПОКАЗАТЕЛЕЙ";
	нСтрокаТаблицыЗапросов.ВидОперацииРасчета   = Перечисления.ВидыОперацийРасчетаПоказателей.ПолучениеИзмененныхПоказателей;
	нСтрокаТаблицыЗапросов.тПараметрыПакета 	= тПараметрыПакета;
	нСтрокаТаблицыЗапросов.ТекстПодзапросов 	= ТекстЗапроса;

КонецПроцедуры

Процедура ПодготовитьТаблицуНовыхЗначенийПотребителей(СтруктураРасчетаПоказателей)
	
    тПоказателиОперанды                 = СтруктураРасчетаПоказателей.тПоказателиОперанды;
	МаксИспользуемыхАналитик            = СтруктураРасчетаПоказателей.МаксИспользуемыхАналитик;
	МаксКлючевыхАналитик				= СтруктураРасчетаПоказателей.МаксКлючевыхАналитик;
	глТаблицаПересчетаПоказателей       = СтруктураРасчетаПоказателей.глТаблицаПересчетаПоказателей;
	тИспользуемыеАналитики				= СтруктураРасчетаПоказателей.тИспользуемыеАналитики;
	тИспользуемыеРесурсы 				= СтруктураРасчетаПоказателей.тИспользуемыеРесурсы;
	МаксУровеньРасчета					= СтруктураРасчетаПоказателей.МаксУровеньРасчета;
	УровниСВременнымРасчетом			= СтруктураРасчетаПоказателей.УровниСВременнымРасчетом;
	ЕстьАналитикаВалюта					= СтруктураРасчетаПоказателей.ЕстьАналитикаВалюта;
	тРасшифровкаГруппОтборов			= СтруктураРасчетаПоказателей.тРасшифровкаГруппОтборов;
	
	тПараметрыПакета = ПолучитьОписаниеТаблицыПараметров();
	тПодзапросыДанных = ПолучитьОписаниеТаблицыПодзапроса();
	
	ТекстШаблонаЗапроса = "
		|
		|// ЗНАЧЕНИЯ ПОТРЕБИТЕЛЕЙ УРОВЕНЬ - %УровеньРасчетаПотребителя%
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	%УровеньРасчета% КАК УровеньРасчета,
		|	ПоказателиОперанды.Показатель КАК Показатель,
		|	ПоказателиОперанды.ПериодОтчета КАК ПериодОтчета %ТекстАналитик% %ТекстРесурсов%
		|//ПОМЕСТИТЬ
		|ИЗ
		|	втПоказателиРаскрытия%УровеньРасчетаПотребителя% КАК ПоказателиОперанды";
	
	ИтоговыеРесурсы = тИспользуемыеРесурсы.Скопировать(Новый Структура("ВыводитсяВОтчет",Истина));
	ИтоговыеРесурсы.Свернуть("Поле,Суммируется");
	
	// Рассчитанные значения для зависимых по периоду берутся из лога расчета по периодам
	тЗависимыеПоПериоду = тПоказателиОперанды.Скопировать(Новый Структура("ТекущийПериод",Ложь), 
		"Потребитель,ТипПотребителя,Процедура,ЭтоОперандТекущегоПериода,УровеньРасчетаПотребителя,УровеньРасчетаОперанда,КодВФормуле,ПоказательОперанд,ТипПоказателя,УИДГруппыОтборов,УИДГруппыТрансформации");
	Если тЗависимыеПоПериоду.Количество()>0 Тогда
		
		// Запрос с временной таблицей рассчитанных значений
		ТекстЗапросаПолученияЗависимыхПоПериоду = "
			|// ЗНАЧЕНИЯ ЗАВИСИМЫХ ПО ПЕРИОДУ ДЛЯ ВСЕХ УРОВНЕЙ
			|
			|ВЫБРАТЬ 
			|	ПоказателиОперанды.Показатель КАК Показатель,
			|	ПоказателиОперанды.ПериодОтчета КАК ПериодОтчета %ТекстАналитик% %ТекстРесурсов%
			|ПОМЕСТИТЬ втПоказателиРаскрытия_РассчитанныеЗначенияПоПериодам
			|ИЗ
			|	&РассчитанныеЗначенияПоПериодам КАК ПоказателиОперанды";
		
		// Добавим аналитики рассчитанных показателей
		ТекстАналитик = "";
		Для ИндПоля = МаксКлючевыхАналитик+1 По МаксИспользуемыхАналитик Цикл
			ТекстАналитик = ТекстАналитик + ",
			|	ПоказателиОперанды.Аналитика" + ИндПоля + " КАК Аналитика" + ИндПоля;
		КонецЦикла;
		Если ЕстьАналитикаВалюта Тогда
			ТекстАналитик = ТекстАналитик + ",
			|	ПоказателиОперанды.АналитикаВалюта КАК АналитикаВалюта";
		КонецЕсли;
		ТекстЗапросаПолученияЗависимыхПоПериоду = СтрЗаменить(ТекстЗапросаПолученияЗависимыхПоПериоду, "%ТекстАналитик%", ТекстАналитик);
		
		// Добавим ресурсы
		ТекстРесурсов = "";
		Для Каждого Ресурс Из ИтоговыеРесурсы Цикл
			ТекстРесурсов = ТекстРесурсов + ",
			|	ПоказателиОперанды." + Ресурс.Поле + " КАК " + Ресурс.Поле;
		КонецЦикла;
		ТекстЗапросаПолученияЗависимыхПоПериоду = СтрЗаменить(ТекстЗапросаПолученияЗависимыхПоПериоду, "%ТекстРесурсов%", ТекстРесурсов);
		
		// Сформируем таблицу параметров для расчета
		тЗависимыеПоПериоду.Сортировать("УровеньРасчетаПотребителя");
		тЗависимыеПоПериоду.Колонки.Добавить("ОтборПоПериоду");
		Для Каждого СтрокаПоказатель Из тЗависимыеПоПериоду Цикл
			
			ОтборПоПериоду = Новый ТаблицаЗначений;
			ОтборПоПериоду.Колонки.Добавить("ТипОтбора");
			ОтборПоПериоду.Колонки.Добавить("ЗначениеОтбора");
		
			тОтбор = тРасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УИДГруппыОтборов,ПолеБД",СтрокаПоказатель.УИДГруппыОтборов,"ПериодОтчета"));
			Для Каждого СтрокаОтбор Из тОтбор Цикл			
				
				нОтбор = ОтборПоПериоду.Добавить();
				нОтбор.ТипОтбора 		= СтрокаОтбор.СпособВычисленияПараметра;
				нОтбор.ЗначениеОтбора   = СтрокаОтбор.УточнениеСпособаОпределения;
				
			КонецЦикла;
			
			СтрокаПоказатель.ОтборПоПериоду = ОтборПоПериоду;
			
		КонецЦикла;
		
		// Добавим таблицу в параметры пакета
		тПараметрыПакета 		= ПолучитьОписаниеТаблицыПараметров();
		НОтбор 					= тПараметрыПакета.Добавить();
		НОтбор.ИмяОтбора 		= "РассчитанныеЗначенияПоПериодам";
		НОтбор.ТипОтбора 		= "РассчитанныеЗначенияПоПериодам";		
		НОтбор.ЗначениеОтбора	= тЗависимыеПоПериоду;	
		
		// Добавим строку в таблицу пересчета показателей
		нСтрокаТаблицыЗапросов						= глТаблицаПересчетаПоказателей.Добавить();
		нСтрокаТаблицыЗапросов.ТекстПодзапросов   	= ТекстЗапросаПолученияЗависимыхПоПериоду;
		нСтрокаТаблицыЗапросов.КомментарийКПакету 	= "ТАБЛИЦА НОВЫХ ЗНАЧЕНИЙ ПОТРЕБИТЕЛЕЙ РЕКУРСИВНО ЗАВИСИМЫХ ПО ПЕРИОДУ";
		нСтрокаТаблицыЗапросов.тПараметрыПакета     = тПараметрыПакета;		
		нСтрокаТаблицыЗапросов.ВидОперацииРасчета   = Перечисления.ВидыОперацийРасчетаПоказателей.РасчетВыраженийОперандовЗависимыхПоПериоду;
		
		// Таблица для объединения с рассчитанными показателями на нижних уровнях
		ТекстЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"%УровеньРасчетаПотребителя%","_РассчитанныеЗначенияПоПериодам");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%УровеньРасчета%","0");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстАналитик%",ТекстАналитик);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстРесурсов%",ТекстРесурсов);
		
		НСтрокаДанные 							= тПодзапросыДанных.Добавить();	
		НСтрокаДанные.НомерПодзапроса 			= тПодзапросыДанных.Количество();
		НСтрокаДанные.ТекстПодзапроса 			= ТекстЗапроса;                              
		НСтрокаДанные.КомментарийКПодзапросу 	= "ЗНАЧЕНИЯ ПОТРЕБИТЕЛЕЙ ЗАВИСИМЫХ ПО ПЕРИОДУ";
		
	КонецЕсли;
	
	// Рассчитанные значения для независимых по периоду берутся из временных таблиц соответствующего уровня расчета
	тНезависимыеПоПериоду  = тПоказателиОперанды.Скопировать(Новый Структура("ТекущийПериод",Истина));
	тНезависимыеПоПериоду.Сортировать("УровеньРасчетаПотребителя");
	тНезависимыеПоПериоду.Свернуть("УровеньРасчетаПотребителя");
	Для Каждого СтрРасчетаПотребителя Из тНезависимыеПоПериоду Цикл
		
		УровеньРасчетаПотребителя = СтрРасчетаПотребителя.УровеньРасчетаПотребителя;
		
		ТекстЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"%УровеньРасчетаПотребителя%",Формат(УровеньРасчетаПотребителя,"ЧН=0; ЧГ=0"));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%УровеньРасчета%",Формат(УровеньРасчетаПотребителя,"ЧН=0; ЧГ=0"));
		
		// Фильтр по операндам временного расчета
		Если УровниСВременнымРасчетом.Найти(УровеньРасчетаПотребителя) <> Неопределено Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|	НЕ ПоказателиОперанды.ВременныйРасчет";
		КонецЕсли;
		
		// Текст полей на текущем уровне
		ТекстАналитик = "";		
		Для ИндПоля = МаксКлючевыхАналитик+1 По МаксИспользуемыхАналитик Цикл
			Если тИспользуемыеАналитики.НайтиСтроки(Новый Структура("УровеньРасчета,Поле",УровеньРасчетаПотребителя,"Аналитика" + ИндПоля)).Количество() > 0 Тогда
				ТекстАналитик = ТекстАналитик + ",
				|	ПоказателиОперанды.Аналитика" + ИндПоля + " КАК " + "Аналитика" + ИндПоля;
			Иначе
				ТекстАналитик = ТекстАналитик + ",
				|	НЕОПРЕДЕЛЕНО КАК " + "Аналитика" + ИндПоля;
			КонецЕсли;
		КонецЦикла;
		
		// Текст ресурсов на текущем уровне
		ТекстРесурсов = "";
		Для Каждого Ресурс Из ИтоговыеРесурсы Цикл
			Если тИспользуемыеРесурсы.НайтиСтроки(Новый Структура("УровеньРасчета,Поле",УровеньРасчетаПотребителя,Ресурс.Поле)).Количество() > 0 Тогда
				ТекстРесурсов = ТекстРесурсов + ",
				|	ПоказателиОперанды." + Ресурс.Поле + " КАК " + Ресурс.Поле;				
			ИначеЕсли Ресурс.Суммируется Тогда
				ТекстРесурсов = ТекстРесурсов + ",
				|	0 КАК " + Ресурс.Поле;
			Иначе
				ТекстРесурсов = ТекстРесурсов + ",
				|	НЕОПРЕДЕЛЕНО КАК " + Ресурс.Поле;
			КонецЕсли;
		КонецЦикла;
		
		// Значение валюта
		Если ЕстьАналитикаВалюта Тогда
			Если тИспользуемыеАналитики.НайтиСтроки(Новый Структура("УровеньРасчета,Поле",УровеньРасчетаПотребителя,"АналитикаВалюта")).Количество() > 0 Тогда
				ТекстАналитик = ТекстАналитик + ",
				|	ПоказателиОперанды.АналитикаВалюта КАК АналитикаВалюта";
			Иначе
				ТекстАналитик = ТекстАналитик + ",
				|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК АналитикаВалюта";
			КонецЕсли;	
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстАналитик%",ТекстАналитик);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстРесурсов%",ТекстРесурсов);
		
		НСтрокаДанные 							= тПодзапросыДанных.Добавить();	
		НСтрокаДанные.НомерПодзапроса 			= тПодзапросыДанных.Количество();
		НСтрокаДанные.ТекстПодзапроса 			= ТекстЗапроса;                              
		НСтрокаДанные.КомментарийКПодзапросу 	= "ЗНАЧЕНИЯ ПОТРЕБИТЕЛЕЙ УРОВЕНЬ " + Формат(УровеньРасчетаПотребителя,"ЧН=0; ЧГ=0");
		
	КонецЦикла;
		
	нСтрокаТаблицыЗапросов 						= глТаблицаПересчетаПоказателей.Добавить();
	нСтрокаТаблицыЗапросов.ТекстПодзапросов     = ПолучитьТекстПоТаблицеПодзапросов(тПодзапросыДанных, "втЗначенияПотребителейРасчет");
	нСтрокаТаблицыЗапросов.КомментарийКПакету 	= "ОБЪЕДИНЕННАЯ ТАБЛИЦА НОВЫХ ЗНАЧЕНИЙ ПОТРЕБИТЕЛЕЙ";
	нСтрокаТаблицыЗапросов.тПараметрыПакета     = тПараметрыПакета;
	нСтрокаТаблицыЗапросов.ВидОперацииРасчета   = Перечисления.ВидыОперацийРасчетаПоказателей.РасчетИтоговыхЗначенийПоказателей;
	
КонецПроцедуры

Процедура СвернутьТаблицуНовыхЗначенийПотребителей(СтруктураРасчетаПоказателей)

	глТаблицаПересчетаПоказателей	= СтруктураРасчетаПоказателей.глТаблицаПересчетаПоказателей;
	МаксКлючевыхАналитик			= СтруктураРасчетаПоказателей.МаксКлючевыхАналитик;		
	МаксИспользуемыхАналитик		= СтруктураРасчетаПоказателей.МаксИспользуемыхАналитик;
	ЕстьЗначение					= СтруктураРасчетаПоказателей.ЕстьЗначение;
	ЕстьЗначениеНечисловое          = СтруктураРасчетаПоказателей.ЕстьЗначениеНечисловое;

	ТекстЗапроса = "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияПоказателей.УровеньРасчета КАК УровеньРасчета,
		|	ЗначенияПоказателей.Показатель КАК Показатель,
		|	ЗначенияПоказателей.ПериодОтчета КАК ПериодОтчета %ТекстАналитики% %ТекстЗначение%
		|ПОМЕСТИТЬ втРассчитанныеПоказатели
		|ИЗ
		|	втЗначенияПотребителейРасчет КАК ЗначенияПоказателей
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияПоказателей.УровеньРасчета,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.ПериодОтчета %ТекстАналитики%	
		|";
	
	ТекстАналитики = "";		
	Для ИндПоля = МаксКлючевыхАналитик+1 По МаксИспользуемыхАналитик Цикл
		ТекстАналитики = ТекстАналитики + ",
		|	ЗначенияПоказателей.Аналитика" + ИндПоля;
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстАналитики%", ТекстАналитики);
	
	ТекстЗначение = "";
	Если ЕстьЗначение Тогда
		ТекстЗначение = ",
		|	СУММА(ЗначенияПоказателей.Значение) КАК Значение";
	КонецЕсли;
	Если ЕстьЗначениеНечисловое Тогда
		ТекстЗначение = ",
		|	МАКСИМУМ(ЗначенияПоказателей.ЗначениеНечисловое) КАК ЗначениеНечисловое"; 
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстЗначение%", ТекстЗначение);

	нСтрокаТаблицыЗапросов = глТаблицаПересчетаПоказателей.Добавить();	
	нСтрокаТаблицыЗапросов.ТекстПодзапросов 	= ТекстЗапроса;
	нСтрокаТаблицыЗапросов.КомментарийКПакету 	= "СВЕРНУТАЯ ТАБЛИЦА НОВЫХ ЗНАЧЕНИЙ ПОТРЕБИТЕЛЕЙ";
	нСтрокаТаблицыЗапросов.ВидОперацииРасчета   = Перечисления.ВидыОперацийРасчетаПоказателей.РасчетИтоговыхЗначенийПоказателей;
	
КонецПроцедуры

Процедура ДобавитьОтборыПоКлючевымСрезам(тРасшифровкаГруппОтборовТекВерсии, РазделениеПоПроектам, МаксКлючевыхАналитик, МассивОрганизацийПериметра=Неопределено)
	
	Если МассивОрганизацийПериметра = Неопределено Тогда
		нСтр 								= тРасшифровкаГруппОтборовТекВерсии.Добавить();
	    нСтр.ПолеБД 						= "Организация";
		нСтр.СпособВычисленияПараметра 		= Перечисления.СпособыВычисленияПараметровОперандов.ОрганизацияОтчета;
		нСтр.ИдентификаторРодителя 			= 0;
		нСтр.УИДГруппыОтборов 				= 0;
	Иначе
		нСтр 								= тРасшифровкаГруппОтборовТекВерсии.Добавить();
	    нСтр.ПолеБД 						= "Организация";
		нСтр.СпособВычисленияПараметра 		= Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений;
		нСтр.ИдентификаторРодителя 			= 0;
		нСтр.УИДГруппыОтборов 				= 0;
		нСтр.УточнениеСпособаОпределения	= МассивОрганизацийПериметра;
	КонецЕсли;
	
	нСтр 							= тРасшифровкаГруппОтборовТекВерсии.Добавить();
    нСтр.ПолеБД 					= "Валюта";
	нСтр.СпособВычисленияПараметра 	= Перечисления.СпособыВычисленияПараметровОперандов.ВалютаОтчета;
	нСтр.ИдентификаторРодителя 		= 0;
	нСтр.УИДГруппыОтборов 			= 0;
	
	нСтр 							= тРасшифровкаГруппОтборовТекВерсии.Добавить();
    нСтр.ПолеБД 					= "ПериодОтчета";
	нСтр.СпособВычисленияПараметра 	= Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчета;
	нСтр.ИдентификаторРодителя 		= 0;
	нСтр.УИДГруппыОтборов 			= 0;

	нСтр 							= тРасшифровкаГруппОтборовТекВерсии.Добавить();
    нСтр.ПолеБД 					= "Сценарий";
	нСтр.СпособВычисленияПараметра 	= Перечисления.СпособыВычисленияПараметровОперандов.СценарийОтчета;
	нСтр.ИдентификаторРодителя 		= 0;
	нСтр.УИДГруппыОтборов 			= 0;
	
	// Добавим фильтр по проекту, если он используется
	Если РазделениеПоПроектам Тогда
		нСтр 							= тРасшифровкаГруппОтборовТекВерсии.Добавить();
	    нСтр.ПолеБД 					= "Проект";
		нСтр.СпособВычисленияПараметра 	= Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчета;
		нСтр.ИдентификаторРодителя 		= 0;
		нСтр.УИДГруппыОтборов 			= 0;
	КонецЕсли;
	
	// Добавим фильтр по ключевым аналитикам
	Для ИндПоля = 1 По МаксКлючевыхАналитик Цикл
		нСтр							= тРасшифровкаГруппОтборовТекВерсии.Добавить();
	    нСтр.ПолеБД 					= "Аналитика"+ИндПоля;
		нСтр.СпособВычисленияПараметра 	= Перечисления.СпособыВычисленияПараметровОперандов[нСтр.ПолеБД];
		нСтр.ИдентификаторРодителя 		= 0;
		нСтр.УИДГруппыОтборов 			= 0;
	КонецЦикла;
	
КонецПроцедуры	

Процедура ПодготовитьТаблицуИсходныхЗначенийПотребителей(СтруктураРасчетаПоказателей, МассивОрганизацийПериметра = Неопределено, УстановкаЗначенийПоказателей = Ложь)
	
	глТаблицаПересчетаПоказателей       = СтруктураРасчетаПоказателей.глТаблицаПересчетаПоказателей;
    тПоказателиОперанды                 = СтруктураРасчетаПоказателей.тПоказателиОперанды;	
	тИспользуемыеРесурсы                = СтруктураРасчетаПоказателей.тИспользуемыеРесурсы;
	тИспользуемыеАналитики              = СтруктураРасчетаПоказателей.тИспользуемыеАналитики;
	тРасшифровкаГруппОтборов 			= СтруктураРасчетаПоказателей.тРасшифровкаГруппОтборов;
	МаксКлючевыхАналитик				= СтруктураРасчетаПоказателей.МаксКлючевыхАналитик;
	МаксИспользуемыхАналитик 			= СтруктураРасчетаПоказателей.МаксИспользуемыхАналитик;
	ДанныеВидаОтчета 					= СтруктураРасчетаПоказателей.ДанныеВидаОтчета;
	МаксУровеньРасчета					= СтруктураРасчетаПоказателей.МаксУровеньРасчета;
	ЕстьАналитикаВалюта					= СтруктураРасчетаПоказателей.ЕстьАналитикаВалюта;
	ЕстьЗначениеВалюта					= СтруктураРасчетаПоказателей.ЕстьЗначениеВалюта;
	ПолучатьДанныеИзРегистров			= СтруктураРасчетаПоказателей.ПолучатьДанныеИзРегистров;
	
	// Добавим фильтры по всем срезам отчета
	тРасшифровкаГруппОтборовТекВерсии = тРасшифровкаГруппОтборов.СкопироватьКолонки();
	ДобавитьОтборыПоКлючевымСрезам(тРасшифровкаГруппОтборовТекВерсии,ДанныеВидаОтчета.РазделениеПоПроектам,МаксКлючевыхАналитик,МассивОрганизацийПериметра);
		
	// Добавим ресурсы
	тИспользуемыеРесурсыТекВерсии = тИспользуемыеРесурсы.Скопировать(Новый Структура("ВыводитсяВОтчет",Истина));
	тИспользуемыеРесурсыТекВерсии.ЗаполнитьЗначения(1,"УровеньРасчета");
	тИспользуемыеРесурсыТекВерсии.Свернуть("Поле,УровеньРасчета,Суммируется");
	
	// Добавим аналитики
	тИспользуемыеАналитикиТекВерсии	= тИспользуемыеАналитики.СкопироватьКолонки();
	
	Для ИндПоля = МаксКлючевыхАналитик+1 По МаксИспользуемыхАналитик Цикл
		нСтр							= тИспользуемыеАналитикиТекВерсии.Добавить();
		нСтр.УровеньРасчета				= 1;
		нСтр.Поле						= "Аналитика"+ИндПоля;
		нСтр.ПолеВерсии					= Ложь;
	КонецЦикла;
	
	// Добавим аналитику по валюте
	Если ЕстьАналитикаВалюта Тогда 		
		нСтр							= тИспользуемыеАналитикиТекВерсии.Добавить();
		нСтр.УровеньРасчета				= 1;
		нСтр.Поле						= "АналитикаВалюта";
		нСтр.ПолеВерсии					= Ложь;
	КонецЕсли;
	
	// Добавим значение в валюте
	Если ЕстьЗначениеВалюта Тогда		
		НСтр = тИспользуемыеРесурсыТекВерсии.Добавить();
		НСтр.Поле						= "ЗначениеВалюта";
		НСтр.УровеньРасчета 			= 1;
		НСтр.Суммируется				= Истина;		
	КонецЕсли;
	
	// Структура расчета показателей
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("глТаблицаПересчетаПоказателей",глТаблицаПересчетаПоказателей);
	СтруктураПараметров.Вставить("тИспользуемыеАналитики",тИспользуемыеАналитикиТекВерсии);
	СтруктураПараметров.Вставить("тИспользуемыеРесурсы",тИспользуемыеРесурсыТекВерсии);
	СтруктураПараметров.Вставить("тРасшифровкаГруппОтборов",тРасшифровкаГруппОтборовТекВерсии);
	СтруктураПараметров.Вставить("ПолучатьДанныеИзРегистров",ПолучатьДанныеИзРегистров);
	СтруктураПараметров.Вставить("РасчетПоИзмененнымПоказателям",Истина);	
	
	// Структура расчета показателей текущей версии
	СтруктураПараметровТекущегоУровня = Новый Структура;
	СтруктураПараметровТекущегоУровня.Вставить("УИДГруппыОтборов",0);
	СтруктураПараметровТекущегоУровня.Вставить("УровеньРасчета",0);
	СтруктураПараметровТекущегоУровня.Вставить("ТекущийПериод",МассивОрганизацийПериметра = Неопределено);	
	
	тПодзапросыДанных = ПолучитьОписаниеТаблицыПодзапроса();
	СтруктураПараметровТекущегоУровня.Вставить("тПодзапросыДанных",тПодзапросыДанных);
	тПараметрыПакета = ПолучитьОписаниеТаблицыПараметров();
	СтруктураПараметровТекущегоУровня.Вставить("тПараметрыПакета",тПараметрыПакета);
	
	ВидыОтчетовСинтетика = Новый Массив;
	ВидыОтчетовСинтетика.Добавить(ДанныеВидаОтчета.ВидОтчета);
	СтруктураПараметровТекущегоУровня.Вставить("ВидыОтчетовСинтетика",ВидыОтчетовСинтетика);
	
	УровниРегистраПотребителей = тПоказателиОперанды.Скопировать(,"Потребитель,ИндексРегистраПотребителя");
	УровниРегистраПотребителей.Свернуть("Потребитель,ИндексРегистраПотребителя");
	
	УровниРегистра = УровниРегистраПотребителей.Скопировать(,"ИндексРегистраПотребителя");
	УровниРегистра.Свернуть("ИндексРегистраПотребителя");
	УровниРегистра.Сортировать("ИндексРегистраПотребителя Возр");
	
	Если МассивОрганизацийПериметра = Неопределено Тогда
		ПрефиксТаблицыВерсий = "текВерсии_";
		СтруктураПараметровТекущегоУровня.Вставить("ВидОперацииРасчета",Перечисления.ВидыОперацийРасчетаПоказателей.ПолучениеЗначенийПотребителей);
	Иначе
		ПрефиксТаблицыВерсий = "втВерсииБаза_";
		СтруктураПараметровТекущегоУровня.Вставить("ВидОперацииРасчета",Перечисления.ВидыОперацийРасчетаПоказателей.ПолучениеДанныхТекущегоПериметра);
	КонецЕсли;
	
	// Запрос по версиям вида отчета
	Для Каждого СтрУровень Из УровниРегистра Цикл
		СтруктураПараметровТекущегоУровня.Вставить("ИндексРегистра",СтрУровень.ИндексРегистраПотребителя);	
		Если СтрУровень.ИндексРегистраПотребителя < 0 Тогда
			СтруктураПараметровТекущегоУровня.Вставить("ПрефиксТаблицыВерсий",ПрефиксТаблицыВерсий + "Нечисловые_");
			ПолучитьПодзапросТекущейВерсии(СтруктураПараметров, СтруктураПараметровТекущегоУровня);
		Иначе
			СтруктураПараметровТекущегоУровня.Вставить("ПрефиксТаблицыВерсий",ПрефиксТаблицыВерсий);
			ПолучитьПодзапросТекущейВерсии(СтруктураПараметров, СтруктураПараметровТекущегоУровня);
			Прервать;
		КонецЕсли;   
	КонецЦикла;
		
	СтруктураПараметровТекущегоУровня.Вставить("ЕстьСоответствиеПериодов", Ложь);
	СтруктураПараметровТекущегоУровня.Вставить("УровеньРасчета",1);
	
	Для Каждого СтрУровень Из УровниРегистра Цикл
		
		СтруктураПараметровТекущегоУровня.Вставить("ИндексРегистра",СтрУровень.ИндексРегистраПотребителя);
		СтруктураПараметровТекущегоУровня.Вставить("ИндексЗапроса",УровниРегистра.Индекс(СтрУровень));		
		
		Если СтрУровень.ИндексРегистраПотребителя < 0 Тогда
			СтруктураПараметровТекущегоУровня.Вставить("ПрефиксТаблицыВерсий",ПрефиксТаблицыВерсий + "Нечисловые_");
		Иначе
			СтруктураПараметровТекущегоУровня.Вставить("ПрефиксТаблицыВерсий",ПрефиксТаблицыВерсий);
		КонецЕсли;
		
		ПолучитьТекстЗначенийПоказателей(СтруктураПараметров,СтруктураПараметровТекущегоУровня,УстановкаЗначенийПоказателей);
		
		НОтбор 					= тПараметрыПакета.Добавить();
		НОтбор.ИмяОтбора 		= "ОтборПоказателей_0_ИндексЗапроса_" + УровниРегистра.Индекс(СтрУровень);
		НОтбор.ТипОтбора 		= Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
		НОтбор.ЗначениеОтбора	= УровниРегистраПотребителей.Скопировать(Новый Структура("ИндексРегистраПотребителя",СтрУровень.ИндексРегистраПотребителя)).ВыгрузитьКолонку("Потребитель");	
		
	КонецЦикла;		
	
	нСтрокаТаблицыЗапросов 									= глТаблицаПересчетаПоказателей.Добавить();
	нСтрокаТаблицыЗапросов.тПараметрыПакета                 = тПараметрыПакета;
	
	Если МассивОрганизацийПериметра = Неопределено Тогда
		нСтрокаТаблицыЗапросов.ТекстПодзапросов             = ПолучитьТекстПоТаблицеПодзапросов(тПодзапросыДанных,"втЗначенияПоказателейДоИзменения");
	    нСтрокаТаблицыЗапросов.КомментарийКПакету 			= "ЗАПРОС ДЛЯ ПОДЪЕМА НЕСГРУППИРОВАННЫХ ДАННЫХ РАСЧЕТНЫХ ПОКАЗАТЕЛЕЙ ТЕКУЩЕГО СРЕЗА";
		нСтрокаТаблицыЗапросов.ВидОперацииРасчета           = Перечисления.ВидыОперацийРасчетаПоказателей.ПолучениеЗначенийПотребителей;
	Иначе
		нСтрокаТаблицыЗапросов.ТекстПодзапросов             = ПолучитьТекстПоТаблицеПодзапросов(тПодзапросыДанных,"втЗначенияПотребителейРасчет");
	    нСтрокаТаблицыЗапросов.КомментарийКПакету 			= "ЗАПРОС ПО КОНСОЛИДИРОВАННОМУ ПЕРИМЕТРУ";
		нСтрокаТаблицыЗапросов.ВидОперацииРасчета           = Перечисления.ВидыОперацийРасчетаПоказателей.ПолучениеДанныхТекущегоПериметра;
	КонецЕсли;
		
КонецПроцедуры	

Процедура ПодготовитьТаблицуДляРасчетаОтклонений(СтруктураРасчетаПоказателей)
	
	глТаблицаПересчетаПоказателей	= СтруктураРасчетаПоказателей.глТаблицаПересчетаПоказателей;
	МаксИспользуемыхАналитик        = СтруктураРасчетаПоказателей.МаксИспользуемыхАналитик;
	МаксКлючевыхАналитик			= СтруктураРасчетаПоказателей.МаксКлючевыхАналитик;
	ЕстьАналитикаВалюта				= СтруктураРасчетаПоказателей.ЕстьАналитикаВалюта; 
	ЕстьЗначение					= СтруктураРасчетаПоказателей.ЕстьЗначение;
	ЕстьЗначениеНечисловое			= СтруктураРасчетаПоказателей.ЕстьЗначениеНечисловое;
	
	// Подготовим тексты для аналитик
	ТекстАналитики   					= "";
	ТекстАналитикиВыбор					= "";
	ТекстЗначение						= "";
	ТекстЗначениеДоИзменения			= "";
	ТекстЗначениеНечисловое				= "";
	ТекстЗначениеНечисловоеДоИзменения 	= "";
	ТекстЗначениеНечисловоеNULL			= "";
	
	// Добавим аналитики рассчитанных показателей
	Для ИндПоля = МаксКлючевыхАналитик+1 По МаксИспользуемыхАналитик Цикл
		ТекстАналитики = ТекстАналитики + ",
		|	ЗначенияПоказателей.Аналитика" + ИндПоля;
		ТекстАналитикиВыбор = ТекстАналитикиВыбор + ",
		|	ВЫБОР
		|		КОГДА Потребители.ИндексРегистраПотребителя = -1
		|			ТОГДА ЗначенияПоказателей.Аналитика" + ИндПоля + "
		|		КОГДА Потребители.ИндексРегистраПотребителя >= " + ИндПоля + " 
		|			ТОГДА ЗначенияПоказателей.Аналитика" + ИндПоля + "
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Аналитика" + ИндПоля;
	КонецЦикла;
	Если ЕстьАналитикаВалюта Тогда
		ТекстАналитики = ТекстАналитики + ",
		|	ЗначенияПоказателей.АналитикаВалюта";
		ТекстАналитикиВыбор = ТекстАналитикиВыбор + ",
		|	ЗначенияПоказателей.АналитикаВалюта";
	КонецЕсли;
	
	// ОБЪЕДИНЕННАЯ ТАБЛИЦА НОВЫХ И ИСХОДНЫХ ЗНАЧЕНИЙ ПОТРЕБИТЕЛЕЙ
	ТекстЗапроса = "
		|////////////////////////////////////////////////////////////////////////////////
		|// ОБЪЕДИНЕННАЯ ТАБЛИЦА НОВЫХ И ИСХОДНЫХ ЗНАЧЕНИЙ ПОТРЕБИТЕЛЕЙ
		|
		|ВЫБРАТЬ 
		|	ЗначенияПоказателей.Показатель КАК Показатель,
		|	ЗначенияПоказателей.ПериодОтчета КАК ПериодОтчета %ТекстЗначение% %ТекстЗначениеНечисловое% %ТекстАналитикиВыбор%
		|ПОМЕСТИТЬ втЗначенияПотребителейОбъединенные
		|ИЗ
		|	втЗначенияПотребителейРасчет КАК ЗначенияПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|				втПоказателиОперанды.Потребитель,
		|				втПоказателиОперанды.ИндексРегистраПотребителя
		|			ИЗ
		|				втПоказателиОперанды) КАК Потребители
		|		ПО Потребители.Потребитель = ЗначенияПоказателей.Показатель
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	ЗначенияПоказателей.Показатель КАК Показатель,
		|	ЗначенияПоказателей.ПериодОтчета КАК ПериодОтчета %ТекстЗначениеДоИзменения% %ТекстЗначениеНечисловоеДоИзменения% %ТекстАналитики%
		|ИЗ
		|	втЗначенияПоказателейДоИзменения КАК ЗначенияПоказателей
		|;
	 	|";
	
	Если ЕстьЗначение Тогда
		
		ТекстЗначение = ",
			|	ЗначенияПоказателей.Значение КАК Значение";
		ТекстЗначениеДоИзменения = ",
			|	-1 * ЗначенияПоказателей.Значение КАК Значение";
		
		Если ЕстьЗначениеНечисловое Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|////////////////////////////////////////////////////////////////////////////////
				|// СГРУППИРОВАННАЯ ТАБЛИЦА НОВЫХ И ИСХОДНЫХ ЗНАЧЕНИЙ ПОТРЕБИТЕЛЕЙ 
				|
				|ВЫБРАТЬ 
				|	ЗначенияПоказателей.Показатель КАК Показатель,
				|	ЗначенияПоказателей.ПериодОтчета КАК ПериодОтчета, 			
				|	СУММА(ЗначенияПоказателей.Значение) КАК Значение,
				|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловое %ТекстАналитики%
				|ПОМЕСТИТЬ втРассчитанныеПоказатели
				|ИЗ
				|	втЗначенияПотребителейОбъединенные КАК ЗначенияПоказателей
				|ГДЕ
				|	ЗначенияПоказателей.ЗначениеНечисловое = НЕОПРЕДЕЛЕНО
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗначенияПоказателей.Показатель, 
				|	ЗначенияПоказателей.ПериодОтчета %ТекстАналитики%
				|
				|ИМЕЮЩИЕ 
				|	СУММА(ЗначенияПоказателей.Значение) <> 0
		   		|";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
				|////////////////////////////////////////////////////////////////////////////////
				|// СГРУППИРОВАННАЯ ТАБЛИЦА НОВЫХ И ИСХОДНЫХ ЗНАЧЕНИЙ ПОТРЕБИТЕЛЕЙ 
				|
				|ВЫБРАТЬ 
				|	ЗначенияПоказателей.Показатель КАК Показатель,
				|	ЗначенияПоказателей.ПериодОтчета КАК ПериодОтчета, 			
				|	СУММА(ЗначенияПоказателей.Значение) КАК Значение %ТекстАналитики%
				|ПОМЕСТИТЬ втРассчитанныеПоказатели
				|ИЗ
				|	втЗначенияПотребителейОбъединенные КАК ЗначенияПоказателей
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗначенияПоказателей.Показатель, 
				|	ЗначенияПоказателей.ПериодОтчета %ТекстАналитики%
				|
				|ИМЕЮЩИЕ 
				|	СУММА(ЗначенияПоказателей.Значение) <> 0
		   		|";
		КонецЕсли;
		
	КонецЕсли;
		
	Если ЕстьЗначениеНечисловое Тогда
		
		ТекстЗначениеНечисловое = ",
			|	ЗначенияПоказателей.ЗначениеНечисловое КАК ЗначениеНечисловое,
			|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловоеДоИзменения";
		ТекстЗначениеНечисловоеДоИзменения = ",
			|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловое,
			|	ЗначенияПоказателей.ЗначениеНечисловое КАК ЗначениеНечисловоеДоИзменения";
		
		Если ЕстьЗначение Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|
				|ОБЪЕДИНИТЬ ВСЕ 
				|
				|ВЫБРАТЬ 
				|	ЗначенияПоказателей.Показатель КАК Показатель,
				|	ЗначенияПоказателей.ПериодОтчета КАК ПериодОтчета, 
				|	0 КАК Значение, 
				|	МАКСИМУМ(ЗначенияПоказателей.ЗначениеНечисловое) КАК ЗначениеНечисловое %ТекстАналитики%
				|ИЗ
				|	втЗначенияПотребителейОбъединенные КАК ЗначенияПоказателей
				|ГДЕ
				|	ЗначенияПоказателей.Значение = 0
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗначенияПоказателей.Показатель, 
				|	ЗначенияПоказателей.ПериодОтчета %ТекстАналитики%
				|
				|ИМЕЮЩИЕ
				|	МАКСИМУМ(ЗначенияПоказателей.ЗначениеНечисловое) <> МАКСИМУМ(ЗначенияПоказателей.ЗначениеНечисловоеДоИзменения)
				|";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
				|////////////////////////////////////////////////////////////////////////////////
				|// СГРУППИРОВАННАЯ ТАБЛИЦА НОВЫХ И ИСХОДНЫХ ЗНАЧЕНИЙ ПОТРЕБИТЕЛЕЙ 
				|
				|ВЫБРАТЬ 
				|	ЗначенияПоказателей.Показатель КАК Показатель,
				|	ЗначенияПоказателей.ПериодОтчета КАК ПериодОтчета, 
				|	МАКСИМУМ(ЗначенияПоказателей.ЗначениеНечисловое) КАК ЗначениеНечисловое %ТекстАналитики%
				|ПОМЕСТИТЬ втРассчитанныеПоказатели
				|ИЗ
				|	втЗначенияПотребителейОбъединенные КАК ЗначенияПоказателей
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗначенияПоказателей.Показатель, 
				|	ЗначенияПоказателей.ПериодОтчета %ТекстАналитики%
				|
				|ИМЕЮЩИЕ
				|	МАКСИМУМ(ЗначенияПоказателей.ЗначениеНечисловое) <> МАКСИМУМ(ЗначенияПоказателей.ЗначениеНечисловоеДоИзменения)
				|";
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстАналитики%",ТекстАналитики);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстАналитикиВыбор%",ТекстАналитикиВыбор);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстЗначение%",ТекстЗначение);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстЗначениеДоИзменения%",ТекстЗначениеДоИзменения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстЗначениеНечисловое%",ТекстЗначениеНечисловое);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстЗначениеНечисловоеДоИзменения%",ТекстЗначениеНечисловоеДоИзменения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстЗначениеНечисловоеNULL%",ТекстЗначениеНечисловоеNULL);
		
	нСтрокаТаблицыЗапросов 						= глТаблицаПересчетаПоказателей.Добавить();
	нСтрокаТаблицыЗапросов.ТекстПодзапросов     = ТекстЗапроса;
	нСтрокаТаблицыЗапросов.КомментарийКПакету	= "ИТОГОВАЯ ТАБЛИЦА ЗНАЧЕНИЙ ПОТРЕБИТЕЛЕЙ";
	нСтрокаТаблицыЗапросов.ВидОперацииРасчета 	= Перечисления.ВидыОперацийРасчетаПоказателей.ИтоговаяТаблицаРасчетаПоказателей;
	
КонецПроцедуры

Функция ПодготовитьЗапросПересчетаКурсовВалют(СтруктураРасчетаПоказателей, тПараметрыПакета, ПересчетВДопВалюты)
	
	ДанныеВидаОтчета 						= СтруктураРасчетаПоказателей.ДанныеВидаОтчета;
	МаксКлючевыхАналитик 					= СтруктураРасчетаПоказателей.МаксКлючевыхАналитик;
	тРасшифровкаГруппОтборов				= СтруктураРасчетаПоказателей.тРасшифровкаГруппОтборов;
	ЕстьЗначение							= СтруктураРасчетаПоказателей.ЕстьЗначение;
	ЕстьЗначениеВалюта						= СтруктураРасчетаПоказателей.ЕстьЗначениеВалюта;
	ЕстьЗначениеНечисловое    		        = СтруктураРасчетаПоказателей.ЕстьЗначениеНечисловое;
	ЕстьВидКурсаПрочее						= СтруктураРасчетаПоказателей.ЕстьВидКурсаПрочее;
	ЕстьВидКурсаЗначениеУказанноеВДокументе	= СтруктураРасчетаПоказателей.ЕстьВидКурсаЗначениеУказанноеВДокументе;
	ЕстьВидКурсаКурсНаМоментНачисления		= СтруктураРасчетаПоказателей.ЕстьВидКурсаКурсНаМоментНачисления;
	
	Если ПересчетВДопВалюты Тогда
		ДобавитьПараметрВПакет(тПараметрыПакета, "ДополнительныеВалюты",, "ДополнительныеВалюты");
	КонецЕсли;
	
	// Если только нечисловые, тогда передадим только дополнительные валюты
	Если НЕ ЕстьЗначение Тогда
		
		ТекстОбщегоЗапроса = 
			"////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РассчитанныеПоказатели.ПериодОтчета КАК ПериодОтчета,
			|	РассчитанныеПоказатели.Показатель КАК Показатель,
			|	Валюты.Ссылка КАК Валюта,
			|	1 КАК КоэффициентПересчета
			|ПОМЕСТИТЬ втКурсыВалют
			|ИЗ
			|	втРассчитанныеПоказатели КАК РассчитанныеПоказатели,
			|	Справочник.Валюты КАК Валюты
			|ГДЕ
			|	Валюты.Ссылка В (&ДополнительныеВалюты)
			|;";

		Возврат ТекстОбщегоЗапроса;
		
	КонецЕсли;
	
	// Шаблон запроса
	ТекстЗапроса = "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РассчитанныеПоказатели.Показатель КАК Показатель,
		|	РассчитанныеПоказатели.ПериодОтчета КАК ПериодОтчета
		|ПОМЕСТИТЬ втКурсыВсеПоказателиПериоды
		|ИЗ 
		|	втРассчитанныеПоказатели КАК РассчитанныеПоказатели
		|
		|ИНДЕКСИРОВАТЬ ПО 
		|	Показатель, 
		|	ПериодОтчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РассчитанныеПоказатели.Показатель КАК Показатель
		|ПОМЕСТИТЬ втКурсыВсеПоказатели
		|ИЗ
		|	втКурсыВсеПоказателиПериоды КАК РассчитанныеПоказатели
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеПоказатели.Показатель КАК Показатель,
		|	ПоказателиОтчетов.ВидКурса КАК ВидКурса,
		|	ПоказателиОтчетов.СвязанныйПоказатель КАК СвязанныйПоказатель,
		|	ПоказателиОтчетов.НеФинансовый КАК НеФинансовый,
		|	ПоказателиОтчетов.ПересчитыватьВалютнуюСумму КАК ПересчитыватьВалютнуюСумму
		|ПОМЕСТИТЬ втКурсыДанныеПоказателей
		|ИЗ
		|	втКурсыВсеПоказатели КАК ВсеПоказатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|		ПО ВсеПоказатели.Показатель = ПоказателиОтчетов.Ссылка";
	
	Если ЕстьЗначениеВалюта Тогда
			
		Если ПересчетВДопВалюты Тогда			
			ТекстЗапроса = ТекстЗапроса + "
			|ИНДЕКСИРОВАТЬ ПО 
			|	Показатель
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Валюты.Ссылка КАК Валюта
			|ПОМЕСТИТЬ втКурсыВсеВалюты 
			|ИЗ
			|	втРассчитанныеПоказатели КАК ПериодыПоказатели
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
			|		ПО Валюты.Ссылка = ПериодыПоказатели.АналитикаВалюта
			|			ИЛИ Валюты.Ссылка В (&ДополнительныеВалюты)
			|;
			|";			
		Иначе			
			ТекстЗапроса = ТекстЗапроса + "
			|			И ПоказателиОтчетов.ПересчитыватьВалютнуюСумму
			|ИНДЕКСИРОВАТЬ ПО 
			|	Показатель
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Валюты.Ссылка КАК Валюта
			|ПОМЕСТИТЬ втКурсыВсеВалюты 
			|ИЗ
			|	втРассчитанныеПоказатели КАК ПериодыПоказатели
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
			|		ПО Валюты.Ссылка = ПериодыПоказатели.АналитикаВалюта
			|;
			|";			
		КонецЕсли;
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Валюты.Ссылка КАК Валюта
			|ПОМЕСТИТЬ втКурсыВсеВалюты 
			|ИЗ
			|	Справочник.Валюты КАК Валюты
			|ГДЕ
			|	Валюты.Ссылка В (&ДополнительныеВалюты)
			|;
			|";
	
	КонецЕсли;	
	
	ТекстОбщегоЗапроса = "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоказателиПериоды.ПериодОтчета,
		|	ПоказателиПериоды.Показатель,
		|	Валюты.Валюта КАК Валюта,
		|	1 КАК Курс,
		|	1 КАК Кратность
		|ПОМЕСТИТЬ втКурсы 
		|ИЗ
		|	втКурсыВсеПоказателиПериоды КАК ПоказателиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКурсыДанныеПоказателей КАК ДанныеПоказателей
		|		ПО ПоказателиПериоды.Показатель = ДанныеПоказателей.Показатель
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсыВсеВалюты КАК Валюты
		|		ПО ИСТИНА
		|ГДЕ
		|	ДанныеПоказателей.НеФинансовый
		|";
		
	Если ЕстьВидКурсаЗначениеУказанноеВДокументе Тогда 
		
		ТекстЗапроса = ТекстЗапроса + "
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПоказателиДляКурсовВалют.Ссылка КАК Показатель,
			|	ПоказателиДляКурсовВалют.ПоказательКурса КАК ПоказательКурса,
			|	ПоказателиДляКурсовВалют.Кратность КАК Кратность,
			|	ПоказателиДляКурсовВалют.Валюта КАК Валюта
			|ПОМЕСТИТЬ втКурсыПоказателиДляКурсовВалют
			|ИЗ
			|	втКурсыДанныеПоказателей КАК ДанныеПоказателей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов.ПоказателиДляКурсовВалют КАК ПоказателиДляКурсовВалют
			|		ПО ДанныеПоказателей.Показатель = ПоказателиДляКурсовВалют.Ссылка
			|ГДЕ
			|	НЕ ДанныеПоказателей.НеФинансовый
			|	И ДанныеПоказателей.ВидКурса = ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.ЗначениеУказанноеВДокументе)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ПоказательКурса	
			|;	
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПоказателиДляКурсовВалют.Показатель КАК Показатель,
			|	ВерсииЗначенийПоказателей.ПериодОтчета КАК ПериодОтчета,
			|	ПоказателиДляКурсовВалют.Валюта КАК Валюта,
			|	ПоказателиДляКурсовВалют.Кратность КАК Кратность,
			|	ЗначенияПоказателейОтчетов.Значение КАК Курс
			|ПОМЕСТИТЬ втКурсыЗависящиеОтПоказателяОтчета
			|ИЗ
			|	втКурсыПоказателиДляКурсовВалют КАК ПоказателиДляКурсовВалют
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейОтчетовСинтетика КАК ЗначенияПоказателейОтчетов
			|		ПО ПоказателиДляКурсовВалют.ПоказательКурса = ЗначенияПоказателейОтчетов.Показатель 
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей 
			|		ПО (ЗначенияПоказателейОтчетов.Версия = ВерсииЗначенийПоказателей.Ссылка) %ТекстОтбора%
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПоказателиДляКурсовВалют.Показатель,
			|	РассчитанныеПоказатели.ПериодОтчета,
			|	ПоказателиДляКурсовВалют.Валюта,
			|	ПоказателиДляКурсовВалют.Кратность,
			|	РассчитанныеПоказатели.Значение
			|ИЗ
			|	втКурсыПоказателиДляКурсовВалют КАК ПоказателиДляКурсовВалют
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРассчитанныеПоказатели КАК РассчитанныеПоказатели
			|		ПО ПоказателиДляКурсовВалют.ПоказательКурса = РассчитанныеПоказатели.Показатель
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПоказателиДляКурсовВалют.Показатель,
			|	ВерсииЗначенийПоказателей.ПериодОтчета,
			|	ПоказателиДляКурсовВалют.Валюта,
			|	ПоказателиДляКурсовВалют.Кратность,
			|	ВерсииЗначенийПоказателей.Значение
			|ИЗ
			|	втКурсыПоказателиДляКурсовВалют КАК ПоказателиДляКурсовВалют
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЛогИзмененныхПоказателей КАК ВерсииЗначенийПоказателей
			|		ПО ПоказателиДляКурсовВалют.ПоказательКурса = ВерсииЗначенийПоказателей.Показатель %ТекстОтбора%
			|;
			|";
		
		Если МаксКлючевыхАналитик > 0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ЗначенияПоказателейОтчетовСинтетика","ЗначенияПоказателейОтчетов"+Формат(МаксКлючевыхАналитик,"ЧН=; ЧГ=0"));
		КонецЕсли;
		
		ТекстОбщегоЗапроса = ТекстОбщегоЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КурсыЗависящиеОтПоказателяОтчета.ПериодОтчета КАК ПериодОтчета,
			|	КурсыЗависящиеОтПоказателяОтчета.Показатель КАК Показатель,
			|	КурсыЗависящиеОтПоказателяОтчета.Валюта КАК Валюта,
			|	ВЫБОР
			|		КОГДА КурсыЗависящиеОтПоказателяОтчета.Валюта = &Валюта
			|			ТОГДА 0
			|		ИНАЧЕ СУММА(КурсыЗависящиеОтПоказателяОтчета.Курс)
			|	КОНЕЦ КАК Курс,
			|	ВЫБОР
			|		КОГДА КурсыЗависящиеОтПоказателяОтчета.Валюта = &Валюта
			|			ТОГДА 0
			|		ИНАЧЕ МАКСИМУМ(КурсыЗависящиеОтПоказателяОтчета.Кратность)
			|	КОНЕЦ КАК Кратность		
			|ИЗ
			|	втКурсыЗависящиеОтПоказателяОтчета КАК КурсыЗависящиеОтПоказателяОтчета
			|
			|СГРУППИРОВАТЬ ПО
			|	КурсыЗависящиеОтПоказателяОтчета.Показатель,
			|	КурсыЗависящиеОтПоказателяОтчета.ПериодОтчета,
			|	КурсыЗависящиеОтПоказателяОтчета.Валюта
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КурсыЗависящиеОтПоказателяОтчета.ПериодОтчета,
			|	КурсыЗависящиеОтПоказателяОтчета.Показатель,		
			|	&Валюта,
			|	1,
			|	1
			|ИЗ 
			|	втКурсыЗависящиеОтПоказателяОтчета КАК КурсыЗависящиеОтПоказателяОтчета
			|";
		
	КонецЕсли;
	
	Если ЕстьВидКурсаКурсНаМоментНачисления Тогда
		
		ТекстЗапроса = ТекстЗапроса + "		
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДанныеПоказателей.Показатель КАК Показатель,
			|	ДанныеПоказателей.СвязанныйПоказатель КАК ПоказательДатыКурса
			|ПОМЕСТИТЬ втКурсыПоказателиДляДатыКурсовВалют
			|ИЗ
			|	втКурсыДанныеПоказателей КАК ДанныеПоказателей
			|ГДЕ
			|	НЕ ДанныеПоказателей.НеФинансовый
			|	И ДанныеПоказателей.ВидКурса = ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.КурсНаМоментНачисления)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ПоказательДатыКурса	
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДанныеПоказателей.Показатель КАК Показатель,
			|	ВерсииЗначенийПоказателей.ПериодОтчета КАК ПериодОтчета,
			|	ЗначенияПоказателейОтчетов.Значение КАК ДатаКурса,
			|	ВерсииЗначенийПоказателей.Код КАК КодВерсии
			|ПОМЕСТИТЬ втКурсыЗависящиеОтДатыПоказателяОтчетаИсходная
			|ИЗ
			|	втКурсыПоказателиДляДатыКурсовВалют КАК ДанныеПоказателей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейОтчетовНечисловые КАК ЗначенияПоказателейОтчетов
			|		ПО ДанныеПоказателей.ПоказательДатыКурса = ЗначенияПоказателейОтчетов.Показатель
			|		И ЗначенияПоказателейОтчетов.ИтоговоеЗначение
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей 
			|		ПО (ЗначенияПоказателейОтчетов.Версия = ВерсииЗначенийПоказателей.Ссылка) %ТекстОтбора%
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеПоказателей.Показатель,
			|	ВерсииЗначенийПоказателей.ПериодОтчета,
			|	ВерсииЗначенийПоказателей.ЗначениеНечисловое,
			|	10000000000
			|ИЗ
			|	втКурсыПоказателиДляДатыКурсовВалют КАК ДанныеПоказателей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЛогИзмененныхПоказателей КАК ВерсииЗначенийПоказателей
			|		ПО ДанныеПоказателей.ПоказательДатыКурса = ВерсииЗначенийПоказателей.Показатель %ТекстОтбора%";
		
		Если ЕстьЗначениеНечисловое Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ДанныеПоказателей.Показатель,
				|	РассчитанныеПоказатели.ПериодОтчета,
				|	РассчитанныеПоказатели.ЗначениеНечисловое,
				|	20000000000 КАК КодВерсии
				|ИЗ
				|	втКурсыПоказателиДляДатыКурсовВалют КАК ДанныеПоказателей
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРассчитанныеПоказатели КАК РассчитанныеПоказатели
				|		ПО ДанныеПоказателей.ПоказательДатыКурса = РассчитанныеПоказатели.Показатель";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КурсыЗависящиеОтДатыПоказателяОтчета.Показатель КАК Показатель,
			|	КурсыЗависящиеОтДатыПоказателяОтчета.ПериодОтчета КАК ПериодОтчета,		
			|	МАКСИМУМ(КурсыЗависящиеОтДатыПоказателяОтчета.КодВерсии) КАК КодВерсии
			|ПОМЕСТИТЬ втКурсыЗависящиеОтДатыПоказателяОтчетаМаксимальнаяВерсия 
			|ИЗ
			|	втКурсыЗависящиеОтДатыПоказателяОтчетаИсходная КАК КурсыЗависящиеОтДатыПоказателяОтчета
			|
			|СГРУППИРОВАТЬ ПО
			|	КурсыЗависящиеОтДатыПоказателяОтчета.Показатель,
			|	КурсыЗависящиеОтДатыПоказателяОтчета.ПериодОтчета	
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КурсыЗависящиеОтДатыПоказателяОтчета.Показатель КАК Показатель,
			|	КурсыЗависящиеОтДатыПоказателяОтчета.ПериодОтчета КАК ПериодОтчета,
			|	КурсыЗависящиеОтДатыПоказателяОтчета.ДатаКурса КАК ДатаКурсаИсходная,
			|	КурсыВалют.Валюта КАК Валюта,
			|	МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурса
			|ПОМЕСТИТЬ втКурсыЗависящиеОтДатыПоказателяОтчета
			|ИЗ
			|	втКурсыЗависящиеОтДатыПоказателяОтчетаИсходная КАК КурсыЗависящиеОтДатыПоказателяОтчета
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКурсыЗависящиеОтДатыПоказателяОтчетаМаксимальнаяВерсия КАК КурсыЗависящиеОтДатыПоказателяОтчетаМаксимальнаяВерсия
			|		ПО КурсыЗависящиеОтДатыПоказателяОтчета.Показатель = КурсыЗависящиеОтДатыПоказателяОтчетаМаксимальнаяВерсия.Показатель
			|			И КурсыЗависящиеОтДатыПоказателяОтчета.ПериодОтчета = КурсыЗависящиеОтДатыПоказателяОтчетаМаксимальнаяВерсия.ПериодОтчета
			|			И КурсыЗависящиеОтДатыПоказателяОтчета.КодВерсии = КурсыЗависящиеОтДатыПоказателяОтчетаМаксимальнаяВерсия.КодВерсии
			|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсыВсеВалюты КАК Валюты
			|		ПО ИСТИНА
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют 
			|		ПО КурсыЗависящиеОтДатыПоказателяОтчета.ДатаКурса >= КурсыВалют.Период
			|			И КурсыВалют.Валюта = Валюты.Валюта
			|
			|СГРУППИРОВАТЬ ПО
			|	КурсыЗависящиеОтДатыПоказателяОтчета.Показатель,
			|	КурсыЗависящиеОтДатыПоказателяОтчета.ПериодОтчета,
			|	КурсыЗависящиеОтДатыПоказателяОтчета.ДатаКурса,
			|	КурсыВалют.Валюта	
			|;
			|";
		
		ТекстОбщегоЗапроса = ТекстОбщегоЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КурсыЗависящиеОтДатыПоказателяОтчета.ПериодОтчета КАК ПериодОтчета,
			|	КурсыЗависящиеОтДатыПоказателяОтчета.Показатель КАК Показатель,		
			|	КурсыЗависящиеОтДатыПоказателяОтчета.Валюта КАК Валюта,
			|	ISNULL(КурсыВалют.Курс, 0) КАК Курс,
			|	ISNULL(КурсыВалют.Кратность, 0) КАК Кратность
			|ИЗ
			|	втКурсыЗависящиеОтДатыПоказателяОтчета КАК КурсыЗависящиеОтДатыПоказателяОтчета
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют 
			|		ПО КурсыЗависящиеОтДатыПоказателяОтчета.ДатаКурса = КурсыВалют.Период
			|			И КурсыЗависящиеОтДатыПоказателяОтчета.Валюта = КурсыВалют.Валюта
			|";
		
	КонецЕсли;
	
	Если ЕстьВидКурсаПрочее Тогда
		
		ТекстОбщегоЗапроса = ТекстОбщегоЗапроса + "		
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПоказателиПериоды.ПериодОтчета КАК ПериодОтчета,
			|	ПоказателиПериоды.Показатель КАК Показатель,
			|	Валюты.Валюта КАК Валюта,
			|	ВЫБОР
			|		КОГДА ДанныеПоказателей.ВидКурса = ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.ПустаяСсылка)
			|			ТОГДА ЕСТЬNULL(КурсыВалют.СреднийКурсЗаПериод, 0)
			|		КОГДА ДанныеПоказателей.ВидКурса = ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.СреднийКурсЗаПериод)
			|			ТОГДА ЕСТЬNULL(КурсыВалют.СреднийКурсЗаПериод, 0)
			|		КОГДА ДанныеПоказателей.ВидКурса = ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.СреднийКурсЗаПериодМСФО)
			|			ТОГДА ЕСТЬNULL(КурсыВалют.СреднийКурсЗаПериодМСФО, 0)
			|		КОГДА ДанныеПоказателей.ВидКурса = ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.КурсНаНачалоПериода)
			|			ТОГДА ЕСТЬNULL(КурсыВалют.КурсНаНачалоПериода, 0)
			|		КОГДА ДанныеПоказателей.ВидКурса = ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.КурсНаКонецПериода)
			|			ТОГДА ЕСТЬNULL(КурсыВалют.КурсНаКонецПериода, 0)
			|		КОГДА ДанныеПоказателей.ВидКурса = ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.КурсНаКонецПредыдущегоПериода)
			|			ТОГДА ЕСТЬNULL(КурсыВалют.КурсНаКонецПредыдущегоПериода, 0)
			|		КОГДА ДанныеПоказателей.ВидКурса = ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.СреднийКурсЗаПредыдущийПериод)
			|			ТОГДА ЕСТЬNULL(КурсыВалют.СреднийКурсЗаПредыдущийПериод, 0)
			|		КОГДА ДанныеПоказателей.ВидКурса = ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.СреднийКурсЗаПериодЦБ)
			|			ТОГДА ЕСТЬNULL(КурсыВалют.СреднийКурсЗаПериодЦБ, 0)
			|		КОГДА ДанныеПоказателей.ВидКурса = ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.СреднийКурсЗаПредыдущийПериодЦБ)
			|			ТОГДА ЕСТЬNULL(КурсыВалют.СреднийКурсЗаПредыдущийПериодЦБ, 0)
			|	КОНЕЦ КАК Курс,
			|	КурсыВалют.Кратность КАК Кратность
			|ИЗ
			|	втКурсыВсеПоказателиПериоды КАК ПоказателиПериоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКурсыДанныеПоказателей КАК ДанныеПоказателей
			|		ПО ПоказателиПериоды.Показатель = ДанныеПоказателей.Показатель
			|			И НЕ ДанныеПоказателей.НеФинансовый			
			|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсыВсеВалюты КАК Валюты
			|		ПО ИСТИНА
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодическиеКурсы КАК КурсыВалют
			|		ПО КурсыВалют.Сценарий = &Сценарий
			|			И КурсыВалют.ПериодКурса = ПоказателиПериоды.ПериодОтчета 
			|			И КурсыВалют.Валюта = Валюты.Валюта
			|ГДЕ
			|	ДанныеПоказателей.ВидКурса <> ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.КурсНаМоментНачисления)
			|	И ДанныеПоказателей.ВидКурса <> ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.ЗначениеУказанноеВДокументе)
			|";
		
		ДобавитьПараметрВПакет(тПараметрыПакета, Перечисления.СпособыВычисленияПараметровОперандов.СценарийОтчета,,"Сценарий");
		
	КонецЕсли;
	
	ТекстОбщегоЗапроса = ТекстЗапроса + ТекстОбщегоЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КурсыВалют.ПериодОтчета КАК ПериодОтчета,
		|	КурсыВалют.Показатель КАК Показатель,
		|	КурсыВалют.Валюта КАК Валюта,
		|	ВЫБОР
		|		КОГДА (КурсВалютыОтчета.Кратность * КурсыВалют.Курс) = 0
		|			ТОГДА 0
		|		ИНАЧЕ (1000000 * КурсыВалют.Кратность * КурсВалютыОтчета.Курс) / (КурсВалютыОтчета.Кратность * КурсыВалют.Курс)
		|	КОНЕЦ КАК КоэффициентПересчета
		|ПОМЕСТИТЬ втКурсыВалют
		|ИЗ
		|	втКурсы КАК КурсыВалют
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсы КАК КурсВалютыОтчета
		|		ПО КурсыВалют.ПериодОтчета = КурсВалютыОтчета.ПериодОтчета
		|			И КурсыВалют.Показатель = КурсВалютыОтчета.Показатель
		|			И (КурсВалютыОтчета.Валюта = &Валюта)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Показатель,
		|	ПериодОтчета,
		|	Валюта
		|;
		|";
		
	Если ЕстьЗначениеВалюта Тогда
	
		ТекстОбщегоЗапроса = ТекстОбщегоЗапроса + "
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗначенияПоказателей.Показатель КАК Показатель,
			|	ЗначенияПоказателей.ПериодОтчета КАК ПериодОтчета,
			|	ЗначенияПоказателей.АналитикаВалюта КАК АналитикаВалюта,
			|	ЗначенияПоказателей.Значение КАК Значение, 
			|	ВЫБОР 
			|		КОГДА ДанныеПоказателей.ПересчитыватьВалютнуюСумму ТОГДА
			|			ВЫРАЗИТЬ(ЗначенияПоказателей.Значение * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 0) / 1000000 КАК Число(18,5))
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ЗначениеВалюта %ТекстАналитики% %ТекстЗначениеНечисловое%
			|ПОМЕСТИТЬ втРассчитанныеПоказатели_ПересчетЗначениеВалюта
			|ИЗ
			|	втРассчитанныеПоказатели КАК ЗначенияПоказателей
			|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсыВалют КАК КурсыВалют
			|		ПО ЗначенияПоказателей.Показатель = КурсыВалют.Показатель
			|			И ЗначенияПоказателей.ПериодОтчета = КурсыВалют.ПериодОтчета
			|			И ЗначенияПоказателей.АналитикаВалюта = КурсыВалют.Валюта
			|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсыДанныеПоказателей КАК ДанныеПоказателей
			|		ПО ЗначенияПоказателей.Показатель = ДанныеПоказателей.Показатель 
			|;";
		
	КонецЕсли;	

	// Сформируем текст отбора, если необходимо
	Если ЕстьВидКурсаЗначениеУказанноеВДокументе ИЛИ ЕстьВидКурсаКурсНаМоментНачисления Тогда	
		тРасшифровкаГруппОтборовТекВерсии = тРасшифровкаГруппОтборов.СкопироватьКолонки();
		ДобавитьОтборыПоКлючевымСрезам(тРасшифровкаГруппОтборовТекВерсии,ДанныеВидаОтчета.РазделениеПоПроектам,МаксКлючевыхАналитик);
		ТекстОтбора = СформироватьТекстОтбора(тРасшифровкаГруппОтборовТекВерсии,тПараметрыПакета,0);
		ТекстОбщегоЗапроса = СтрЗаменить(ТекстОбщегоЗапроса,"%ТекстОтбора%",СтрЗаменить(ТекстОтбора,"%ИмяТаблицы%","ВерсииЗначенийПоказателей"));		
	КонецЕсли;	

	Возврат ТекстОбщегоЗапроса;
	
КонецФункции

Процедура ДобавитьВЛогТаблицуИзмененныхПоказателей(СтруктураРасчетаПоказателей, ПересчетВДопВалюты=Ложь)
	
	глТаблицаПересчетаПоказателей       = СтруктураРасчетаПоказателей.глТаблицаПересчетаПоказателей;
	МаксКлючевыхАналитик				= СтруктураРасчетаПоказателей.МаксКлючевыхАналитик;		
	МаксИспользуемыхАналитик			= СтруктураРасчетаПоказателей.МаксИспользуемыхАналитик;
	ЕстьАналитикаВалюта					= СтруктураРасчетаПоказателей.ЕстьАналитикаВалюта;
	ЕстьЗначение						= СтруктураРасчетаПоказателей.ЕстьЗначение;
	ЕстьЗначениеВалюта					= СтруктураРасчетаПоказателей.ЕстьЗначениеВалюта;
	ЕстьЗначениеНечисловое              = СтруктураРасчетаПоказателей.ЕстьЗначениеНечисловое;
	
	// Добавим валюту отчета
	тПараметрыПакета = ПолучитьОписаниеТаблицыПараметров();
	
	// Добавим аналитики рассчитанных показателей
	ТекстАналитики = "";
	Для Сч = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если Сч <= МаксКлючевыхАналитик Тогда
			
			// Ключевые аналитики вида отчета
			ТекстАналитики = ТекстАналитики + ",
			|	&Аналитика" + Сч + " КАК Аналитика" + Сч;
			
			ДобавитьПараметрВПакет(тПараметрыПакета, Перечисления.СпособыВычисленияПараметровОперандов["Аналитика" + Сч],,"Аналитика" + Сч);
			
		ИначеЕсли Сч <= МаксИспользуемыхАналитик Тогда
			
			// Аналитики показателей
			ТекстАналитики = ТекстАналитики + ",
			|	ЗначенияПоказателей.Аналитика" + Сч + " КАК Аналитика" + Сч;
			
		Иначе
			
			// Пустая аналитика
			ТекстАналитики = ТекстАналитики + ",
			|	НЕОПРЕДЕЛЕНО КАК Аналитика" + Сч;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавим аналитику по валюте
	Если ЕстьАналитикаВалюта Тогда
		ТекстАналитикиВалюта = ",
		|	ЗначенияПоказателей.АналитикаВалюта КАК АналитикаВалюта";
	Иначе
		ТекстАналитикиВалюта = ",
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК АналитикаВалюта";
	КонецЕсли;
	
	// Текст Значение
	Если ЕстьЗначение Тогда
		ТекстЗначение = ",
		|	ЗначенияПоказателей.Значение КАК Значение";
	Иначе
		ТекстЗначение = ",
		|	0 КАК Значение";
	КонецЕсли;	
	Если ЕстьЗначениеВалюта Тогда
		ТекстЗначение = ТекстЗначение + ",
		|	ЗначенияПоказателей.ЗначениеВалюта КАК ЗначениеВалюта";
	Иначе
		ТекстЗначение = ТекстЗначение + ",
		|	0 КАК ЗначениеВалюта";
	КонецЕсли;	
	Если ЕстьЗначениеНечисловое Тогда
		ТекстЗначение = ТекстЗначение + ",
		|	ЗначенияПоказателей.ЗначениеНечисловое КАК ЗначениеНечисловое";
		ТекстЗначениеНечисловое = ",
		|	ЗначенияПоказателей.ЗначениеНечисловое КАК ЗначениеНечисловое";
	Иначе
		ТекстЗначение = ТекстЗначение + ",
		|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловое";
		ТекстЗначениеНечисловое = "";
	КонецЕсли;
	
	// Текст для пересчета валют
	Если ПересчетВДопВалюты ИЛИ ЕстьЗначениеВалюта Тогда
		ТекстЗапросаВалюты = ПодготовитьЗапросПересчетаКурсовВалют(
			СтруктураРасчетаПоказателей, тПараметрыПакета, ПересчетВДопВалюты);
	Иначе
		ТекстЗапросаВалюты = "";
	КонецЕсли;
	
	// Запрос с пересчетом в дополнительные валюты
	нСтрокаТаблицыЗапросов = глТаблицаПересчетаПоказателей.Добавить();
	
	ТекстЗапроса = "
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ		
		|	ЗначенияПоказателей.НомерТранзакции КАК НомерТранзакции,
		|	ЗначенияПоказателей.ПравилоОбработки КАК ПравилоОбработки,
		|	ЗначенияПоказателей.Сценарий КАК Сценарий,
		|	ЗначенияПоказателей.Организация КАК Организация,
		|	ЗначенияПоказателей.Проект КАК Проект,
		|	ЗначенияПоказателей.Валюта КАК Валюта,		
		|	ЗначенияПоказателей.Показатель КАК Показатель,
		|	ЗначенияПоказателей.ПериодОтчета КАК ПериодОтчета,
		|	ЗначенияПоказателей.Аналитика1 КАК Аналитика1,
		|	ЗначенияПоказателей.Аналитика2 КАК Аналитика2,
		|	ЗначенияПоказателей.Аналитика3 КАК Аналитика3,
		|	ЗначенияПоказателей.Аналитика4 КАК Аналитика4,
		|	ЗначенияПоказателей.Аналитика5 КАК Аналитика5,
		|	ЗначенияПоказателей.Аналитика6 КАК Аналитика6,
		|	ЗначенияПоказателей.АналитикаВалюта КАК АналитикаВалюта,
		|	ЗначенияПоказателей.Значение КАК Значение,
		|	ЗначенияПоказателей.ЗначениеВалюта КАК ЗначениеВалюта,
		|	ЗначенияПоказателей.ЗначениеНечисловое КАК ЗначениеНечисловое
		|ПОМЕСТИТЬ втЛогИзмененныхПоказателейВременная
		|ИЗ
		|	втЛогИзмененныхПоказателей КАК ЗначенияПоказателей
		|";
		
	Если ПересчетВДопВалюты Тогда
		
		// С пересчетом в доп. валюты
		
		ТекстЗначение = СтрЗаменить(ТекстЗначение, "ЗначенияПоказателей.Значение КАК Значение", 
			"ЗначенияПоказателей.Значение * КурсыВалют.КоэффициентПересчета / 1000000 КАК Значение");
		
		ТекстЗапроса = ТекстЗапросаВалюты + ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&НомерТранзакции,
			|	&ПравилоОбработки,
			|	&Сценарий,
			|	&Организация,
			|	&Проект,
			|	КурсыВалют.Валюта,
			|	ЗначенияПоказателей.Показатель,
			|	ЗначенияПоказателей.ПериодОтчета %ТекстАналитики% %ТекстАналитикиВалюта% %ТекстЗначение%
			|ИЗ
			|	втРассчитанныеПоказатели" + ?(ЕстьЗначениеВалюта,"_ПересчетЗначениеВалюта","") + " КАК ЗначенияПоказателей
			|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсыВалют КАК КурсыВалют
			|		ПО ЗначенияПоказателей.Показатель = КурсыВалют.Показатель
			|       И ЗначенияПоказателей.ПериодОтчета = КурсыВалют.ПериодОтчета
			|;";
		
		нСтрокаТаблицыЗапросов.КомментарийКПакету 	= "ЗАПИСЬ В ЛОГ ИЗМЕНЕННЫХ ПОКАЗАТЕЛЕЙ С ПЕРЕСЧЕТОМ В ДОП. ВАЛЮТЫ";
		нСтрокаТаблицыЗапросов.ВидОперацииРасчета   = Перечисления.ВидыОперацийРасчетаПоказателей.ЗаписьВЛогИзмененныхПоказателейСДопВалютами;
				
	Иначе
		
		// Без пересчета в доп. валюты
		
		ТекстЗапроса = ТекстЗапросаВалюты + ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&НомерТранзакции,
			|	&ПравилоОбработки,
			|	&Сценарий,
			|	&Организация,
			|	&Проект,
			|	&Валюта,
			|	ЗначенияПоказателей.Показатель,
			|	ЗначенияПоказателей.ПериодОтчета %ТекстАналитики% %ТекстАналитикиВалюта% %ТекстЗначение%
			|ИЗ
			|	втРассчитанныеПоказатели" + ?(ЕстьЗначениеВалюта,"_ПересчетЗначениеВалюта","") + " КАК ЗначенияПоказателей
			|;";			
		
		нСтрокаТаблицыЗапросов.КомментарийКПакету 	= "ДОБАВЛЕНИЕ В ЛОГ ИЗМЕНЕННЫХ ПОКАЗАТЕЛЕЙ";
		нСтрокаТаблицыЗапросов.ВидОперацииРасчета   = Перечисления.ВидыОперацийРасчетаПоказателей.ЗаписьВЛогИзмененныхПоказателей;		

	КонецЕсли;
		
	ТекстЗапроса = ТекстЗапроса + "
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втЛогИзмененныхПоказателей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияПоказателей.ПравилоОбработки КАК ПравилоОбработки,
		|	ЗначенияПоказателей.Показатель КАК Показатель,
		|	ЗначенияПоказателей.Сценарий КАК Сценарий,
		|	ЗначенияПоказателей.Организация КАК Организация,
		|	ЗначенияПоказателей.Проект КАК Проект,
		|	ЗначенияПоказателей.Аналитика1 КАК Аналитика1,
		|	ЗначенияПоказателей.Аналитика2 КАК Аналитика2,
		|	ЗначенияПоказателей.Аналитика3 КАК Аналитика3,
		|	ЗначенияПоказателей.Аналитика4 КАК Аналитика4,
		|	ЗначенияПоказателей.Аналитика5 КАК Аналитика5,
		|	ЗначенияПоказателей.Аналитика6 КАК Аналитика6,
		|	ЗначенияПоказателей.АналитикаВалюта КАК АналитикаВалюта,
		|	ЗначенияПоказателей.ПериодОтчета КАК ПериодОтчета,
		|	ЗначенияПоказателей.Валюта КАК Валюта,
		|	ЗначенияПоказателей.Значение КАК Значение,
		|	ЗначенияПоказателей.ЗначениеНечисловое КАК ЗначениеНечисловое,
		|	ЗначенияПоказателей.ЗначениеВалюта КАК ЗначениеВалюта,
		|	ЗначенияПоказателей.НомерТранзакции КАК НомерТранзакции
		|ПОМЕСТИТЬ втЛогИзмененныхПоказателей
		|ИЗ
		|	втЛогИзмененныхПоказателейВременная КАК ЗначенияПоказателей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втЛогИзмененныхПоказателейВременная
		|;";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстАналитики%", ТекстАналитики);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстАналитикиВалюта%", ТекстАналитикиВалюта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстЗначение%", ТекстЗначение); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстЗначениеНечисловое%", ТекстЗначениеНечисловое); 	
	нСтрокаТаблицыЗапросов.ТекстПодзапросов = ТекстЗапроса;
	
	ДобавитьПараметрВПакет(тПараметрыПакета, "НомерТранзакции",, "НомерТранзакции");
	ДобавитьПараметрВПакет(тПараметрыПакета, "ПравилоОбработки",, "ПравилоОбработки");
	ДобавитьПараметрВПакет(тПараметрыПакета, Перечисления.СпособыВычисленияПараметровОперандов.СценарийОтчета,, "Сценарий");
	ДобавитьПараметрВПакет(тПараметрыПакета, Перечисления.СпособыВычисленияПараметровОперандов.ОрганизацияОтчета,, "Организация");
	ДобавитьПараметрВПакет(тПараметрыПакета, Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчета,, "Проект");
	ДобавитьПараметрВПакет(тПараметрыПакета, Перечисления.СпособыВычисленияПараметровОперандов.ВалютаОтчета,,"Валюта");
	нСтрокаТаблицыЗапросов.тПараметрыПакета = тПараметрыПакета;
	
КонецПроцедуры

Процедура ДобавитьВЛогТаблицуИзмененныхПоказателейУровень0(СтруктураРасчетаПоказателей)
	
	глТаблицаПересчетаПоказателей   = СтруктураРасчетаПоказателей.глТаблицаПересчетаПоказателей;
	МаксКлючевыхАналитик			= СтруктураРасчетаПоказателей.МаксКлючевыхАналитик;		
	МаксИспользуемыхАналитик		= СтруктураРасчетаПоказателей.МаксИспользуемыхАналитик;
	тИспользуемыеАналитики 			= СтруктураРасчетаПоказателей.тИспользуемыеАналитики;
	тИспользуемыеРесурсы			= СтруктураРасчетаПоказателей.тИспользуемыеРесурсы;
	
	// Добавим валюту отчета
	тПараметрыПакета = ПолучитьОписаниеТаблицыПараметров();
	
	АналитикиУровень0 = тИспользуемыеАналитики.Скопировать(Новый Структура("УровеньРасчета",0));
	АналитикиУровень0.Свернуть("Поле");
	МаксИспользуемыхАналитик = АналитикиУровень0.Количество();
	РесурсыУровень0 = тИспользуемыеРесурсы.Скопировать(Новый Структура("УровеньРасчета",0)); 
	РесурсыУровень0.Свернуть("Поле");
	
	// Добавим аналитики рассчитанных показателей
	ТекстАналитики = "";
	Для Сч = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если Сч <= МаксКлючевыхАналитик Тогда
			
			// Ключевые аналитики вида отчета
			ТекстАналитики = ТекстАналитики + ",
			|	&Аналитика" + Сч + " КАК Аналитика" + Сч;
			
			ДобавитьПараметрВПакет(тПараметрыПакета, Перечисления.СпособыВычисленияПараметровОперандов["Аналитика" + Сч],,"Аналитика" + Сч);
			
		ИначеЕсли АналитикиУровень0.Найти("Аналитика" + Сч,"Поле") <> Неопределено Тогда
			
			// Аналитики показателей
			ТекстАналитики = ТекстАналитики + ",
			|	ЗначенияПоказателей.Аналитика" + Сч + " КАК Аналитика" + Сч;
			
		Иначе
			
			// Пустая аналитика
			ТекстАналитики = ТекстАналитики + ",
			|	НЕОПРЕДЕЛЕНО КАК Аналитика" + Сч;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавим аналитику по валюте
	ТекстАналитики = ТекстАналитики + ",
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК АналитикаВалюта";

	// Текст Значение
	Если РесурсыУровень0.Найти("Значение","Поле") = Неопределено Тогда
		ТекстЗначение = ",
		|	0 КАК Значение,
		|	0 КАК ЗначениеВалюта";
	Иначе
		ТекстЗначение = ",
		|	ЗначенияПоказателей.Значение КАК Значение,
		|	0 КАК ЗначениеВалюта";
	КонецЕсли;	
	Если РесурсыУровень0.Найти("ЗначениеНечисловое","Поле") = Неопределено Тогда
		ТекстЗначение = ТекстЗначение + ",
		|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловое";
	Иначе
		ТекстЗначение = ТекстЗначение + ",
		|	ЗначенияПоказателей.ЗначениеНечисловое КАК ЗначениеНечисловое";
	КонецЕсли;	
		
	ТекстЗапроса = "
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ		
		|	ЗначенияПоказателей.НомерТранзакции КАК НомерТранзакции,
		|	ЗначенияПоказателей.ПравилоОбработки КАК ПравилоОбработки,
		|	ЗначенияПоказателей.Сценарий КАК Сценарий,
		|	ЗначенияПоказателей.Организация КАК Организация,
		|	ЗначенияПоказателей.Проект КАК Проект,
		|	ЗначенияПоказателей.Валюта КАК Валюта,		
		|	ЗначенияПоказателей.Показатель КАК Показатель,
		|	ЗначенияПоказателей.ПериодОтчета КАК ПериодОтчета,
		|	ЗначенияПоказателей.Аналитика1 КАК Аналитика1,
		|	ЗначенияПоказателей.Аналитика2 КАК Аналитика2,
		|	ЗначенияПоказателей.Аналитика3 КАК Аналитика3,
		|	ЗначенияПоказателей.Аналитика4 КАК Аналитика4,
		|	ЗначенияПоказателей.Аналитика5 КАК Аналитика5,
		|	ЗначенияПоказателей.Аналитика6 КАК Аналитика6,
		|	ЗначенияПоказателей.АналитикаВалюта КАК АналитикаВалюта,
		|	ЗначенияПоказателей.Значение КАК Значение,
		|	ЗначенияПоказателей.ЗначениеВалюта КАК ЗначениеВалюта,
		|	ЗначенияПоказателей.ЗначениеНечисловое КАК ЗначениеНечисловое
		|ПОМЕСТИТЬ втЛогИзмененныхПоказателейВременнаяУровень0
		|ИЗ
		|	втЛогИзмененныхПоказателейУровень0 КАК ЗначенияПоказателей
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	&НомерТранзакции,
		|	ЗНАЧЕНИЕ(Справочник.ПравилаОбработки.ПустаяСсылка),
		|	&Сценарий,
		|	&Организация,
		|	&Проект,
		|	&Валюта,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.ПериодОтчета %ТекстАналитики% %ТекстЗначение%
		|ИЗ
		|	втПоказателиРаскрытия0 КАК ЗначенияПоказателей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втЛогИзмененныхПоказателейУровень0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗначенияПоказателей.ПравилоОбработки КАК ПравилоОбработки,
		|	ЗначенияПоказателей.Показатель КАК Показатель,
		|	ЗначенияПоказателей.Сценарий КАК Сценарий,
		|	ЗначенияПоказателей.Организация КАК Организация,
		|	ЗначенияПоказателей.Проект КАК Проект,
		|	ЗначенияПоказателей.Аналитика1 КАК Аналитика1,
		|	ЗначенияПоказателей.Аналитика2 КАК Аналитика2,
		|	ЗначенияПоказателей.Аналитика3 КАК Аналитика3,
		|	ЗначенияПоказателей.Аналитика4 КАК Аналитика4,
		|	ЗначенияПоказателей.Аналитика5 КАК Аналитика5,
		|	ЗначенияПоказателей.Аналитика6 КАК Аналитика6,
		|	ЗначенияПоказателей.АналитикаВалюта КАК АналитикаВалюта,
		|	ЗначенияПоказателей.ПериодОтчета КАК ПериодОтчета,
		|	ЗначенияПоказателей.Валюта КАК Валюта,
		|	ЗначенияПоказателей.Значение КАК Значение,
		|	ЗначенияПоказателей.ЗначениеНечисловое КАК ЗначениеНечисловое,
		|	ЗначенияПоказателей.ЗначениеВалюта КАК ЗначениеВалюта,
		|	ЗначенияПоказателей.НомерТранзакции КАК НомерТранзакции
		|ПОМЕСТИТЬ втЛогИзмененныхПоказателейУровень0
		|ИЗ
		|	втЛогИзмененныхПоказателейВременнаяУровень0 КАК ЗначенияПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЛогИзмененныхПоказателей КАК ЛогИзмененныхПоказателей
		|		ПО ЗначенияПоказателей.Показатель = ЛогИзмененныхПоказателей.Показатель
		|		И ЗначенияПоказателей.Сценарий = ЛогИзмененныхПоказателей.Сценарий
		|		И ЗначенияПоказателей.Организация = ЛогИзмененныхПоказателей.Организация
		|		И ЗначенияПоказателей.Проект = ЛогИзмененныхПоказателей.Проект
		|		И ЗначенияПоказателей.Аналитика1 = ЛогИзмененныхПоказателей.Аналитика1
		|		И ЗначенияПоказателей.Аналитика2 = ЛогИзмененныхПоказателей.Аналитика2
		|		И ЗначенияПоказателей.Аналитика3 = ЛогИзмененныхПоказателей.Аналитика3
		|		И ЗначенияПоказателей.Аналитика4 = ЛогИзмененныхПоказателей.Аналитика4
		|		И ЗначенияПоказателей.Аналитика5 = ЛогИзмененныхПоказателей.Аналитика5
		|		И ЗначенияПоказателей.АналитикаВалюта = ЛогИзмененныхПоказателей.АналитикаВалюта
		|		И ЗначенияПоказателей.ПериодОтчета = ЛогИзмененныхПоказателей.ПериодОтчета
		|		И ЗначенияПоказателей.Валюта = ЛогИзмененныхПоказателей.Валюта
		|		И ЗначенияПоказателей.НомерТранзакции = ЛогИзмененныхПоказателей.НомерТранзакции
		|ГДЕ
		|	ЛогИзмененныхПоказателей.Показатель ЕСТЬ NULL
		|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстАналитики%", ТекстАналитики);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстЗначение%", ТекстЗначение); 
	
	ДобавитьПараметрВПакет(тПараметрыПакета, "НомерТранзакции",, "НомерТранзакции");
	ДобавитьПараметрВПакет(тПараметрыПакета, "ПравилоОбработки",, "ПравилоОбработки");
	ДобавитьПараметрВПакет(тПараметрыПакета, Перечисления.СпособыВычисленияПараметровОперандов.СценарийОтчета,, "Сценарий");
	ДобавитьПараметрВПакет(тПараметрыПакета, Перечисления.СпособыВычисленияПараметровОперандов.ОрганизацияОтчета,, "Организация");
	ДобавитьПараметрВПакет(тПараметрыПакета, Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчета,, "Проект");
	ДобавитьПараметрВПакет(тПараметрыПакета, Перечисления.СпособыВычисленияПараметровОперандов.ВалютаОтчета,,"Валюта");
	
	нСтрокаТаблицыЗапросов = глТаблицаПересчетаПоказателей.Добавить();
	нСтрокаТаблицыЗапросов.ТекстПодзапросов 	= ТекстЗапроса;
	нСтрокаТаблицыЗапросов.тПараметрыПакета 	= тПараметрыПакета;	
	нСтрокаТаблицыЗапросов.КомментарийКПакету 	= "ЗАПИСЬ В ЛОГ ИЗМЕНЕННЫХ ПОКАЗАТЕЛЕЙ УРОВЕНЬ 0";
	нСтрокаТаблицыЗапросов.ВидОперацииРасчета 	= Перечисления.ВидыОперацийРасчетаПоказателей.ЗаписьВЛогИзмененныхПоказателей;
	
КонецПроцедуры

Процедура ПодготовитьИзмененияВалютныхПоказателей(СтруктураРасчетаПоказателей)
	
	глТаблицаПересчетаПоказателей       = СтруктураРасчетаПоказателей.глТаблицаПересчетаПоказателей;
	МаксКлючевыхАналитик				= СтруктураРасчетаПоказателей.МаксКлючевыхАналитик;		
	МаксИспользуемыхАналитик			= СтруктураРасчетаПоказателей.МаксИспользуемыхАналитик;
	
	// Текст аналитик	
	ТекстАналитики = ",
	|	ЗначенияПоказателей.АналитикаВалюта";	
	Для Сч = МаксКлючевыхАналитик+1 По МаксИспользуемыхАналитик Цикл
		ТекстАналитики = ТекстАналитики + ",
		|	ЗначенияПоказателей.Аналитика" + Сч;
	КонецЦикла;
	
	ТекстЗапроса = "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияПоказателей.Показатель КАК Показатель,
		|	ЗначенияПоказателей.ПериодОтчета КАК ПериодОтчета,
		|	ЗначенияПоказателей.АналитикаВалюта КАК АналитикаВалюта,
		|	ЗначенияПоказателей.Значение КАК Значение,
		|	ЗначенияПоказателей.ЗначениеВалюта КАК ЗначениеВалюта %ТекстАналитики% 
		|ПОМЕСТИТЬ втРассчитанныеПоказатели_ЗначениеВалютаПредварительная
		|ИЗ
		|	втРассчитанныеПоказатели_ПересчетЗначениеВалюта КАК ЗначенияПоказателей
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗначенияПоказателей.Показатель КАК Показатель,
		|	ЗначенияПоказателей.ПериодОтчета КАК ПериодОтчета,
		|	ЗначенияПоказателей.АналитикаВалюта КАК АналитикаВалюта,
		|	ВЫРАЗИТЬ(ЗначенияПоказателей.ЗначениеВалюта / ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 0) * 1000000 КАК ЧИСЛО(18, 5)) КАК Значение,
		|	ЗначенияПоказателей.ЗначениеВалюта КАК ЗначениеВалюта %ТекстАналитики%
		|ИЗ
		|	втРассчитанныеПоказатели КАК ЗначенияПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсыВалют КАК КурсыВалют
		|		ПО ЗначенияПоказателей.Показатель = КурсыВалют.Показатель
		|			И ЗначенияПоказателей.ПериодОтчета = КурсыВалют.ПериодОтчета
		|			И ЗначенияПоказателей.АналитикаВалюта = КурсыВалют.Валюта
		|
		|ГДЕ
		|	ЗначенияПоказателей.Значение = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗначенияПоказателей.Показатель КАК Показатель,
		|	ЗначенияПоказателей.ПериодОтчета КАК ПериодОтчета,
		|	ЗначенияПоказателей.АналитикаВалюта КАК АналитикаВалюта,
		|	-1 * ЗначенияПоказателей.Значение КАК Значение,
		|	-1 * ЗначенияПоказателей.ЗначениеВалюта КАК ЗначениеВалюта %ТекстАналитики%
		|ИЗ
		|	втРассчитанныеПоказатели КАК ЗначенияПоказателей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияПоказателей.Показатель КАК Показатель,
		|	ЗначенияПоказателей.ПериодОтчета КАК ПериодОтчета,
		|	СУММА(ЗначенияПоказателей.Значение) КАК Значение,
		|	СУММА(ЗначенияПоказателей.ЗначениеВалюта) КАК ЗначениеВалюта %ТекстАналитики%
		|ПОМЕСТИТЬ втРассчитанныеПоказатели_ЗначениеВалюта
		|ИЗ
		|	втРассчитанныеПоказатели_ЗначениеВалютаПредварительная КАК ЗначенияПоказателей
		|
		|СГРУППИРОВАТЬ ПО 
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.ПериодОтчета %ТекстАналитики%
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЗначенияПоказателей.Значение) <> 0
		|	ИЛИ СУММА(ЗначенияПоказателей.ЗначениеВалюта) <> 0";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстАналитики%", ТекстАналитики);	
	
	нСтрокаТаблицыЗапросов 						= глТаблицаПересчетаПоказателей.Добавить();
	нСтрокаТаблицыЗапросов.КомментарийКПакету 	= "ПОЛУЧЕНИЕ ДАННЫХ ИЗМЕНИВШИХСЯ ВАЛЮТНЫХ ЗНАЧЕНИЙ";
	нСтрокаТаблицыЗапросов.ВидОперацииРасчета   = Перечисления.ВидыОперацийРасчетаПоказателей.ПолучениеДанныхВалютнойАналитики;
	нСтрокаТаблицыЗапросов.ТекстПодзапросов		= ТекстЗапроса;	
	
КонецПроцедуры

#КонецОбласти


#Область ПроцедурыПодготовкиЗапросовДляРаботыСОтборамиОперандов

////////////////////////////////////////////////////////////////////////////////
// Процедуры для работы с отборами
//  
////////////////////////////////////////////////////////////////////////////////

Функция СформироватьТекстОтбора(тРасшифровкаГруппОтборов,тПараметрыПакета,УИДГруппыОтборов,ОператорОбъединения=" И ",ИдентификаторРодителя=0,ВключаетсяВПоля=Ложь)
	
	ТекстЗапросаПоОтборам = "";
	ОтборГруппОтборов = тРасшифровкаГруппОтборов.НайтиСтроки(
		Новый Структура("УИДГруппыОтборов,ИдентификаторРодителя,ВключаетсяВПоля",УИДГруппыОтборов,ИдентификаторРодителя,ВключаетсяВПоля));
		
	Для Каждого СтрокаГруппыОтборов Из ОтборГруппОтборов Цикл
		
		Если СтрокаГруппыОтборов.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ГруппаИ Тогда			
			
			ТекстОтбора = СформироватьТекстОтбора(тРасшифровкаГруппОтборов,тПараметрыПакета,УИДГруппыОтборов,,СтрокаГруппыОтборов.ИдентификаторСтроки,ВключаетсяВПоля);
			Если СокрЛП(ТекстОтбора) <> "" Тогда
				ТекстЗапросаПоОтборам = ТекстЗапросаПоОтборам + ?(ТекстЗапросаПоОтборам = "","",Символы.ПС + Символы.Таб) + ОператорОбъединения + "(" + Сред(ТекстОтбора,3) + ")";
			КонецЕсли;	
				
		ИначеЕсли СтрокаГруппыОтборов.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ГруппаИЛИ Тогда
			
			ТекстОтбора = СформироватьТекстОтбора(тРасшифровкаГруппОтборов,тПараметрыПакета,УИДГруппыОтборов," ИЛИ ",СтрокаГруппыОтборов.ИдентификаторСтроки,ВключаетсяВПоля);
			Если СокрЛП(ТекстОтбора) <> "" Тогда				
				ТекстЗапросаПоОтборам = ТекстЗапросаПоОтборам + ?(ТекстЗапросаПоОтборам = "","",Символы.ПС + Символы.Таб) + ОператорОбъединения + "(" + Сред(ТекстОтбора,5) + ")";
			КонецЕсли;
			
		ИначеЕсли СтрокаГруппыОтборов.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ГруппаНЕ Тогда			
			
			ТекстОтбора = СформироватьТекстОтбора(тРасшифровкаГруппОтборов,тПараметрыПакета,УИДГруппыОтборов,,СтрокаГруппыОтборов.ИдентификаторСтроки,ВключаетсяВПоля);
			Если СокрЛП(ТекстОтбора) <> "" Тогда
				ТекстЗапросаПоОтборам = ТекстЗапросаПоОтборам + ?(ТекстЗапросаПоОтборам = "","",Символы.ПС + Символы.Таб) + ОператорОбъединения + "НЕ (" + Сред(ТекстОтбора,3) + ")";
			КонецЕсли;
			
		Иначе
			
			ТекстЗапросаПоОтборам = ТекстЗапросаПоОтборам + ?(ТекстЗапросаПоОтборам = "","",Символы.ПС + Символы.Таб)
				+ ПолучитьСвойстваОтбора(СтрокаГруппыОтборов,тПараметрыПакета,ОператорОбъединения).ТекстОтбора;					
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекстЗапросаПоОтборам;
	
КонецФункции

Функция ПолучитьСвойстваОтбора(СтрокаОтбора,тПараметрыПакета,ОператорОбъединения="")
	
	Отбор = СтрокаОтбора.СпособВычисленияПараметра;
	Если ЗначениеЗаполнено(СтрокаОтбора.ТипЗначенияАналитики) Тогда
		ПервыйРазделитель = СтрНайти(СтрокаОтбора.ПолеБД, ".");
		Если ПервыйРазделитель = 0 Тогда
			ИмяПоля = ОператорОбъединения 
				+ "ВЫРАЗИТЬ(%ИмяТаблицы%." + СтрокаОтбора.ПолеБД + " КАК " + СтрокаОтбора.ТипЗначенияАналитики + ")";
		Иначе
			ИмяПоля = ОператорОбъединения 
				+ "ВЫРАЗИТЬ(%ИмяТаблицы%." + Лев(СтрокаОтбора.ПолеБД, ПервыйРазделитель-1) + " КАК " + СтрокаОтбора.ТипЗначенияАналитики + ")" 
				+ Сред(СтрокаОтбора.ПолеБД, ПервыйРазделитель);
		КонецЕсли;		
	Иначе	
		ИмяПоля = ОператорОбъединения + "%ИмяТаблицы%." + СтрокаОтбора.ПолеБД;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ТекстОтбора","");
	СтруктураВозврата.Вставить("ВидСравнения","");
	СтруктураВозврата.Вставить("ИмяПараметра","");
	
	Если Отбор = Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если Отбор = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений Тогда
		ЗначениеОтбора = СтрокаОтбора.ТекстМодуля;
	Иначе
		ЗначениеОтбора = СтрокаОтбора.УточнениеСпособаОпределения;
	КонецЕсли; 	
		
	НОтбор = ДобавитьПараметрВПакет(тПараметрыПакета, Отбор, ЗначениеОтбора, СтрокаОтбора.ПолеБД);
	ИмяПараметра = НОтбор.ИмяОтбора;	
	СтруктураВозврата.Вставить("ИмяПараметра", ИмяПараметра);
	
	Если Отбор = Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.СценарийОтчета
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.ОрганизацияОтчета
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчета
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.ВалютаОтчета
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчета
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчета
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.Булево
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.Строка
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.Число
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.Дата
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаВышестоящегоПериода
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГода
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГодаСоСдвигом
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчетаСоСдвигом
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаВышестоящегоПериода
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГода
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГодаСоСдвигом
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчетаСоСдвигом		
		Или Лев(Отбор,9) = "Аналитика"
		Тогда
		
		СтруктураВозврата.ТекстОтбора	= ИмяПоля + " = &" + ИмяПараметра;
		СтруктураВозврата.ВидСравнения	= ВидСравнения.Равно;
		
	ИначеЕсли Отбор = Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
		
		СтруктураВозврата.ТекстОтбора 	= ИмяПоля + " <> &" + ИмяПараметра;
		СтруктураВозврата.ВидСравнения	= ВидСравнения.НеРавно;
		
	ИначеЕсли Отбор = Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета 
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчета 
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.ВышестоящийПериод
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.АналогичныйПериодПредыдущегоГода
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.АналогичныйПериодГодаСоСдвигом
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчетаСоСдвигом Тогда
		
		СтруктураВозврата.ТекстОтбора 	= ИмяПоля + " В (&" + ИмяПараметра + ")";
		СтруктураВозврата.ВидСравнения	= ВидСравнения.ВСписке;
		
	ИначеЕсли Отбор = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений
		Тогда
		
		СтруктураВозврата.ТекстОтбора 	= ИмяПоля + " В (&" + ИмяПараметра + ")";
		СтруктураВозврата.ВидСравнения	= ВидСравнения.ВСписке;
		
	ИначеЕсли Отбор = Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений 
		Или Отбор = Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда
		
		СтруктураВозврата.ТекстОтбора 	= ИмяПоля + " НЕ В (&" + ИмяПараметра + ")";
		СтруктураВозврата.ВидСравнения	= ВидСравнения.НеВСписке;
		
	ИначеЕсли Отбор = Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии Тогда
		
		СтруктураВозврата.ТекстОтбора 	= ИмяПоля + " В ИЕРАРХИИ(&" + ИмяПараметра + ")";
		СтруктураВозврата.ВидСравнения	= ВидСравнения.ВИерархии;
		
	ИначеЕсли Отбор = Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии Тогда
		
		СтруктураВозврата.ТекстОтбора 	= ИмяПоля + " НЕ В ИЕРАРХИИ(&" + ИмяПараметра + ")";
		СтруктураВозврата.ВидСравнения	= ВидСравнения.НеВИерархии;
		
	ИначеЕсли Отбор = Перечисления.СпособыВычисленияПараметровОперандов.Больше Тогда
		
		СтруктураВозврата.ТекстОтбора 	= ИмяПоля + " > &" + ИмяПараметра;
		СтруктураВозврата.ВидСравнения	= ВидСравнения.Больше;
		
	ИначеЕсли Отбор = Перечисления.СпособыВычисленияПараметровОперандов.БольшеИлиРавно Тогда
		
		СтруктураВозврата.ТекстОтбора 	= ИмяПоля + " >= &" + ИмяПараметра;
		СтруктураВозврата.ВидСравнения	= ВидСравнения.БольшеИлиРавно;
		
	ИначеЕсли Отбор = Перечисления.СпособыВычисленияПараметровОперандов.Меньше Тогда
		
		СтруктураВозврата.ТекстОтбора 	= ИмяПоля + " < &" + ИмяПараметра;
		СтруктураВозврата.ВидСравнения	= ВидСравнения.Меньше;
		
	ИначеЕсли Отбор = Перечисления.СпособыВычисленияПараметровОперандов.МеньшеИлиРавно Тогда
		
		СтруктураВозврата.ТекстОтбора 	= ИмяПоля + " <= &" + ИмяПараметра;
		СтруктураВозврата.ВидСравнения	= ВидСравнения.МеньшеИлиРавно;
		
	Иначе
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Тип отборов %1 в настоящий момент не поддерживается.'"),Отбор);
		ВызватьИсключение(ТекстОшибки);
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ДобавитьПараметрВПакет(тПараметрыПакета, ТипОтбора, ЗначениеОтбора=Неопределено, ПолеБД = "Параметр")
	
	УИДГруппыОтбора = ЗначениеВСтрокуВнутр(ТипОтбора) + "@" + ЗначениеВСтрокуВнутр(ЗначениеОтбора);
		
	НСтрока = тПараметрыПакета.Найти(УИДГруппыОтбора,"УИДГруппыОтбора");
	Если НСтрока = Неопределено Тогда
		НСтрока = тПараметрыПакета.Добавить();
		НСтрока.ИмяОтбора = СтрЗаменить(ПолеБД,".","") + ?(ЗначениеОтбора=Неопределено,"","_" + СтрЗаменить(Новый УникальныйИдентификатор,"-",""));
		НСтрока.ТипОтбора = ТипОтбора;
		НСтрока.ЗначениеОтбора = ЗначениеОтбора;
		НСтрока.УИДГруппыОтбора = УИДГруппыОтбора;
	КонецЕсли;
	
	Возврат НСтрока;	
	
КонецФункции

Функция СформироватьТекстАналитик(тИспользуемыеАналитики,УровеньРасчета,Режим = 1,ТрансформацияПолей=Ложь)

	// Режим:
	//	0 - Для запроса по версиям
	//	1 - Для запроса по таблицам
	//	2 - Для трансформации полей
	//	3 - Для группировки
	//	4 - Для соединения
	ТекстДополнительныхПолей = "";

	Если Режим = 0 Тогда
		тПоляУровня = тИспользуемыеАналитики.НайтиСтроки(Новый Структура("УровеньРасчета,ПолеВерсии",УровеньРасчета,Истина));
	Иначе
		тПоляУровня = тИспользуемыеАналитики.НайтиСтроки(Новый Структура("УровеньРасчета",УровеньРасчета));
	КонецЕсли;
	
	Для Каждого СтрПоле Из тПоляУровня Цикл		
		
		Если СтрПоле.Поле = "ПериодОтчета" Тогда
			Продолжить;
	
		ИначеЕсли Режим = 4 Тогда
			
			ТекстДополнительныхПолей = ТекстДополнительныхПолей + "
			|	И %ИмяТаблицы%." + СтрПоле.Поле + " = %ИмяТаблицыСоединение%." + СтрПоле.Поле;
			
		Иначе
			
			Если ТрансформацияПолей Тогда
				// Построение текста по аналитикам происходит в самой процедуре
				Если Лев(СтрПоле.Поле,9) = "Аналитика" Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		
			ТекстДополнительныхПолей = ТекстДополнительныхПолей + ",
				|	%ИмяТаблицы%." + СтрПоле.Поле;
		
			Если Режим <> 3 Тогда
				ТекстДополнительныхПолей = ТекстДополнительныхПолей + " КАК " + СтрЗаменить(СтрПоле.Поле,".","");
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТекстДополнительныхПолей;
	
КонецФункции

Функция СформироватьТекстРесурсов(тИспользуемыеРесурсы,УровеньРасчета,Режим = 1)

	// Режим:
	//	1 - Для запроса по таблицам
	//	2 - Для трансформации полей
	//	3 - Для группировки
	//	4 - Для отбора
	ТекстДополнительныхПолей = "";

	тПоляУровня = тИспользуемыеРесурсы.НайтиСтроки(Новый Структура("УровеньРасчета",УровеньРасчета));
	
	Для Каждого СтрПоле Из тПоляУровня Цикл
		
		Если Режим = 4 Тогда
			Если СтрПоле.Суммируется Тогда
				ТекстДополнительныхПолей = ТекстДополнительныхПолей + "
				|
				|ИМЕЮЩИЕ
				|	СУММА(%ИмяТаблицы%." + СтрПоле.Поле + ") <> 0";
			Иначе
				// Есть нечисловые показатели, не будем фильтровать
				Возврат "";
			КонецЕсли;	
		ИначеЕсли Режим = 2 Тогда 
			Если СтрПоле.Суммируется Тогда
		    	ТекстДополнительныхПолей = ТекстДополнительныхПолей + ",
					|	СУММА(%ИмяТаблицы%." + СтрПоле.Поле + ")";
			Иначе
				ТекстДополнительныхПолей = ТекстДополнительныхПолей + ",
					|	МАКСИМУМ(%ИмяТаблицы%." + СтрПоле.Поле + ")";
			КонецЕсли;
		ИначеЕсли Режим = 3 Тогда
			Продолжить;
		Иначе
			ТекстДополнительныхПолей = ТекстДополнительныхПолей + ",
				|	%ИмяТаблицы%." + СтрПоле.Поле;
		КонецЕсли;
		
		Если Режим < 3 Тогда
			ТекстДополнительныхПолей = ТекстДополнительныхПолей + " КАК " + СтрПоле.Поле;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекстДополнительныхПолей;
	
КонецФункции

#КонецОбласти


#Область ВспомогательныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции
//  
////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьОписаниеТаблицыПодзапроса()
	
	  ТаблицаПодзапроса = Новый ТаблицаЗначений;
	  ТаблицаПодзапроса.Колонки.Добавить("НомерПодзапроса",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5));	
	  ТаблицаПодзапроса.Колонки.Добавить("ТекстПодзапроса");		
	  ТаблицаПодзапроса.Колонки.Добавить("КомментарийКПодзапросу");	
	  
	  Возврат ТаблицаПодзапроса; 
	  
КонецФункции

Функция ПолучитьОписаниеТаблицыПараметров()
	
	тПараметрыПакета = Новый ТаблицаЗначений;
	тПараметрыПакета.Колонки.Добавить("ИмяОтбора");
	тПараметрыПакета.Колонки.Добавить("ТипОтбора");
	тПараметрыПакета.Колонки.Добавить("ЗначениеОтбора");
	тПараметрыПакета.Колонки.Добавить("УИДГруппыОтбора");
	
	Возврат тПараметрыПакета;
	
КонецФункции

Функция ПолучитьТекстПоТаблицеПодзапросов(ТаблицаПодзапросов,ИмяВременнойТаблицы)
	
	ТекстПодзапросов 	= "";
	ТекстУничтожить		= "";
	ПервыйЗапрос		= Истина;
			
	Для Каждого СтрЗапрос Из ТаблицаПодзапросов Цикл
		
		ТекстПодзапросов = ТекстПодзапросов + СтрЗапрос.ТекстПодзапроса;
	
		Если СтрНайти(СтрЗапрос.ТекстПодзапроса,"ПОМЕСТИТЬ втРассчитанныеЗначения") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПервыйЗапрос Тогда	
			ТекстПодзапросов = СтрЗаменить(ТекстПодзапросов,"ОБЪЕДИНИТЬ ВСЕ","");
			ТекстПодзапросов = СтрЗаменить(ТекстПодзапросов,"//ПОМЕСТИТЬ","ПОМЕСТИТЬ "+ИмяВременнойТаблицы);
			ПервыйЗапрос = Ложь;
		Иначе	 	 
			ТекстПодзапросов = СтрЗаменить(ТекстПодзапросов,"//ПОМЕСТИТЬ","");
		КонецЕсли;	
		
		ТекстПодзапросов = СтрЗаменить(ТекстПодзапросов,"//ВЛОЖЕННЫЙ ЗАПРОС ОБЪЕДИНИТЬ","ОБЪЕДИНИТЬ ВСЕ");
		
	КонецЦикла;	
		
	Возврат СокрЛП(ТекстПодзапросов + ТекстУничтожить);
	
КонецФункции

Функция ПолучитьТекстПоТаблицеПодзапросовВТ(ТаблицаПодзапросов)
	
	ТекстПодзапросов = "";
			
	Для Каждого СтрЗапрос Из ТаблицаПодзапросов Цикл
		
		ТекстПодзапросов = ТекстПодзапросов + ?(ТекстПодзапросов = "", "", "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|") + СтрЗапрос.ТекстПодзапроса;
		
	КонецЦикла;	
		
	Возврат СокрЛП(ТекстПодзапросов);
	
КонецФункции	

Функция ПолучитьФормулуДляЯзыкаЗапросов(Знач ТекстПроцедуры, ИмяТаблицы)
	
	// Уберем все пробелы из строки формулы
	Пока СтрНайти(ТекстПроцедуры," ") > 0 Цикл
		ТекстПроцедуры = СтрЗаменить(ТекстПроцедуры, " ", "");
	КонецЦикла;
	
	// Проверим и обработаем условные операторы
	Пока СтрНайти(ТекстПроцедуры,"?") > 0 Цикл
		ОбработатьУсловныеОператорыРекурсивно(ТекстПроцедуры);
	КонецЦикла;	
	
	// Заменим фигурные скобки на идентификатор временной таблицы
	ТекстПроцедуры = СтрЗаменить(ТекстПроцедуры,"[",ИмяТаблицы + ".");
	ТекстПроцедуры = СтрЗаменить(ТекстПроцедуры,"]",""); 
	
	Возврат ТекстПроцедуры;		
	
КонецФункции

Процедура ОбработатьУсловныеОператорыРекурсивно(ТекстПроцедуры,нсТекущий = 1,Знач Отступ = "")
	
	нсВопрос			= СтрНайти(ТекстПроцедуры,"?",,нсТекущий);
	нсОткрытаяСкобка	= СтрНайти(ТекстПроцедуры,"(",,нсВопрос);
	нсТекущий			= нсОткрытаяСкобка + 1;
	ТекстПроцедуры 		= Лев(ТекстПроцедуры,нсВопрос-1) + ?(нсВопрос=1,"",Символы.ПС) + Отступ + "ВЫБОР " + Символы.ПС + Отступ + Символы.Таб + "КОГДА " + Сред(ТекстПроцедуры,нсТекущий);
	
	// Секция "ВЫБОР КОГДА"
	нсВопрос 			= СтрНайти(ТекстПроцедуры,"?",,нсТекущий);
	нсЗапятая 			= СтрНайти(ТекстПроцедуры,",",,нсТекущий);		
	
	Пока нсВопрос > 0 И нсВопрос < нсЗапятая Цикл
		// Далее идет вложенный оператор
        ОбработатьУсловныеОператорыРекурсивно(ТекстПроцедуры,нсТекущий,Отступ + Символы.Таб + Символы.Таб);
		нсВопрос 	= СтрНайти(ТекстПроцедуры,"?",,нсТекущий);
		нсЗапятая 	= СтрНайти(ТекстПроцедуры,",",,нсТекущий);
	КонецЦикла;
	
	Если нсЗапятая > 0 Тогда
		нсТекущий 		= нсЗапятая + 1;
		ТекстПроцедуры 	= Лев(ТекстПроцедуры,нсЗапятая-1) + " ТОГДА " + Сред(ТекстПроцедуры,нсТекущий);
	КонецЕсли;
	
	// Секция "ТОГДА"
	нсВопрос 		= СтрНайти(ТекстПроцедуры,"?",,нсТекущий);
	нсЗапятая 		= СтрНайти(ТекстПроцедуры,",",,нсТекущий);		
	
	Пока нсВопрос > 0 И нсВопрос < нсЗапятая Цикл
		// Далее идет вложенный оператор
        ОбработатьУсловныеОператорыРекурсивно(ТекстПроцедуры,нсТекущий,Отступ + Символы.Таб + Символы.Таб);
		нсВопрос 	= СтрНайти(ТекстПроцедуры,"?",,нсТекущий);
		нсЗапятая 	= СтрНайти(ТекстПроцедуры,",",,нсТекущий);
	КонецЦикла;
	
	Если нсЗапятая > 0 Тогда
		нсТекущий 		= нсЗапятая + 1;
		ТекстПроцедуры 	= Лев(ТекстПроцедуры,нсЗапятая-1) + Символы.ПС + Отступ + Символы.Таб + "ИНАЧЕ " + Сред(ТекстПроцедуры,нсТекущий);
	КонецЕсли;
	
	// Секция "КОНЕЦ"
	счСкобок = 0;
	Пока Истина Цикл
		нсВопрос 			= СтрНайти(ТекстПроцедуры,"?",,нсТекущий);
		нсОткрытаяСкобка	= СтрНайти(ТекстПроцедуры,"(",,нсТекущий);
		нсЗакрытаяСкобка	= СтрНайти(ТекстПроцедуры,")",,нсТекущий); 		
		Если нсВопрос > 0 И нсВопрос < нсЗакрытаяСкобка Тогда
			// Далее идет вложенный оператор
	        ОбработатьУсловныеОператорыРекурсивно(ТекстПроцедуры,нсТекущий,Отступ + Символы.Таб + Символы.Таб);
			нсВопрос 			= СтрНайти(ТекстПроцедуры,"?",,нсТекущий);
			нсОткрытаяСкобка	= СтрНайти(ТекстПроцедуры,"(",,нсТекущий);
			нсЗакрытаяСкобка	= СтрНайти(ТекстПроцедуры,")",,нсТекущий);
		КонецЕсли;	
		Если нсОткрытаяСкобка > 0 И нсОткрытаяСкобка < нсЗакрытаяСкобка Тогда
			// Далее идут вложенные скобки
			счСкобок 	= счСкобок + 1;
			нсТекущий 	= нсОткрытаяСкобка+1;
		ИначеЕсли счСкобок > 0 Тогда
			// Пропустим все закрывающие вложенные скобки
			счСкобок 	= счСкобок - 1;
			нсТекущий 	= нсЗакрытаяСкобка + 1;
		Иначе
			// Нашли "лишнюю" закрывающую скобку
			Прервать;
		КонецЕсли;
		Если нсТекущий > СтрДлина(ТекстПроцедуры) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	нсТекущий		= нсЗакрытаяСкобка + 1;
	ТекстПроцедуры 	= Лев(ТекстПроцедуры,нсЗакрытаяСкобка-1) + Символы.ПС + Отступ + "КОНЕЦ " + Сред(ТекстПроцедуры,нсТекущий);

	Если нсВопрос > 0 И нсВопрос < нсЗакрытаяСкобка Тогда
		// Есть еще вложенные операторы
		ОбработатьУсловныеОператорыРекурсивно(ТекстПроцедуры,нсТекущий);	
	КонецЕсли;		
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#КонецЕсли
