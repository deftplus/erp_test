
#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РежимОткрытия = Параметры.РежимОткрытия;	
	
	ФормироватьПриОткрытии = Параметры.ФормироватьПриОткрытии;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");	
		
	Если Параметры.Свойство("ДокументУправленияПериодомСценария") Тогда
		РабочийПроцесс   =  Параметры.ДокументУправленияПериодомСценария;
		УстановитьНастройкиПоУОП();
		УправлениеРабочимиПроцессамиУХ.ИнициализироватьПроцесс(Объект.ПериодСценария, Объект.Сценарий, Объект.Дата, Объект.СостоянияВыполненияПроцесса, мПоследователиСтрок, мПредшественникиСтрок);
	КонецЕсли;
	
	ТекКомпоновка=ОбработкаОбъект.ПолучитьМакет("ОтборыАналитик");
 	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(ТекКомпоновка, УникальныйИдентификатор);
	КомпоновщикОтборыАналитик.ЗагрузитьНастройки(ТекКомпоновка.НастройкиПоУмолчанию);	
	КомпоновщикОтборыАналитик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	
	ТекКомпоновка=ОбработкаОбъект.ПолучитьМакет("МатрицаОтчетов");
 	АдресХранилищаСхемаКомпоновкиМатрицаОтчетов = ПоместитьВоВременноеХранилище(ТекКомпоновка, УникальныйИдентификатор);
	КомпоновщикМатрицаОтчетов.ЗагрузитьНастройки(ТекКомпоновка.НастройкиПоУмолчанию);
		
	КомпоновщикМатрицаОтчетов.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресХранилищаСхемаКомпоновкиМатрицаОтчетов));
		
	Элементы.СтраницыНастройки.Видимость=Ложь;
	
	ТекПользователь=ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	
	ПараметрыДиаграммы = Новый Структура;
	ПараметрыДиаграммы.Вставить("ШиринаЭтапа",   35);
	ПараметрыДиаграммы.Вставить("ВысотаЭтапа",   42);
	ПараметрыДиаграммы.Вставить("ШиринаОтступа", 4);
	ПараметрыДиаграммы.Вставить("ВысотаОтступа", 4);
	ПараметрыДиаграммы.Вставить("ШиринаИзгиба",  1.2);
	ПараметрыДиаграммы.Вставить("ЦветЗапланирован",  Новый Цвет(255, 255,   0));
	ПараметрыДиаграммы.Вставить("ЦветВыполняется",   Новый Цвет(  0, 204, 255));
	ПараметрыДиаграммы.Вставить("ЦветУтвержден",     Новый Цвет(  0, 128,   0));
	ПараметрыДиаграммы.Вставить("ЦветПриостановлен", Новый Цвет(255,   0,   0)); 
	ПараметрыДиаграммы.Вставить("ЦветОтменен",       Новый Цвет(255, 255, 255)); 
	ПараметрыДиаграммы.Вставить("ВыводитьЛегенду", Истина);
	
	ДокументБДНстраиваемыйОтчет = Справочники.ДокументыБД.НайтиПоНаименованию("НастраиваемыйОтчет",,,Справочники.ТипыБазДанных.ТекущаяИБ);
	
	УправлениеВидимостью();
	
	ОпределитьДоступныеПериоды();
	
КонецПроцедуры
     
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СокрЛП(РежимОткрытия) = "МатрицаОтчетов" Тогда	
		ЭтаФорма.Заголовок = НСтр("ru = 'Матрица отчетов'");
	ИначеЕсли СокрЛП(РежимОткрытия) = "ДиаграммаПроцессов" Тогда	
		ЭтаФорма.Заголовок = НСтр("ru = 'Ход выполнения процесса подготовки отчетности'");	
	Иначе
		ЭтаФорма.Заголовок = НСтр("ru = 'Управление процессом подготовки отчетности (схема процесса)'");	
	КонецЕсли;

	Если РабочийПроцесс <> ПредопределенноеЗначение("Документ.УправлениеПериодомСценария.ПустаяСсылка") Тогда
		СформироватьМатрицуОтчетов(РезультатМатрицаОтчетов);
		УстановитьОтображениеЗаголовков();	
		Если ФормироватьПриОткрытии Тогда	
			Если СокрЛП(РежимОткрытия) = "ДиаграммаПроцессов" Тогда		
				ВывестиДиаграмму();
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия="Обновить" Тогда
		СформироватьМатрицуОтчетов(РезультатМатрицаОтчетов);
		ВывестиДиаграмму();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	Если НЕ ТипЗнч(РезультатМатрицаОтчетов.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда 
		Возврат;
	КонецЕсли;
	ВыделенныеОбластиМатрицы = РезультатМатрицаОтчетов.ВыделенныеОбласти;
	ДанныеРасчета = ОбщегоНазначенияСлужебныйКлиентСервер.РасчетныеПоказателиЯчеек(РезультатМатрицаОтчетов, ВыделенныеОбластиМатрицы);
	КоличествоВыделенных 	= ДанныеРасчета.Количество;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиОповещений

// Проверяет, есть ли в текущем процессе подготовки отчетности этапы-последователи
// по организации ОрганизацииВход в состоянии отличном от неактивного.
&НаСервере
Функция ЕстьЭтапыПоследователиДляСнятия(ОрганизацииВход)
	РезультатФункции = МодульУправленияПроцессамиУХ.ЕстьЭтапыПоследователиДляСнятия(ОрганизацииВход, ТекущийЭтап, Объект.СостоянияВыполненияПроцесса, мПоследователиСтрок, Объект.ПериодСценария, Объект.Сценарий);
	Возврат РезультатФункции;
КонецФункции		// ЕстьЭтапыПоследователиДляСнятия()

&НаКлиенте
Процедура ОбрабатыватьОтчетыЭтапаПриИзмененииСостоянияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	ИмяСобытия = ДополнительныеПараметры.ИмяСобытия;
	Параметр =   ДополнительныеПараметры.Параметр;
	
	ОбрабатыватьОтчеты = Ложь;
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ОбрабатыватьОтчеты = Ложь;
	Иначе
		ОбрабатыватьОтчеты = Истина;
	КонецЕсли; 

	Если ИмяСобытия = "Закрыть этап" Тогда
		ЗакрытьЭтапСервер(Параметр, ДополнительныеПараметры);
	ИначеЕсли ИмяСобытия = "Открыть этап" Тогда
		
		ОткрытьЭтапСервер(Параметр, ДополнительныеПараметры);
		
	ИначеЕсли ИмяСобытия = "Отменить обработку этапа"  Тогда	
		
		ОтменитьОбработкуЭтапаСервер(Параметр, ДополнительныеПараметры);
		
	КонецЕсли;
		
	СформироватьМатрицуОтчетов(РезультатМатрицаОтчетов);
	
	ВывестиДиаграмму();
	
КонецПроцедуры

&НаКлиенте
Процедура РабочийПроцессНажатиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ОткрытьФорму("Документ.УправлениеПериодомСценария.Форма.МастерЗаполнения", Новый Структура("ПериодСценария, Сценарий, ВерсияРегламента", Объект.ПериодСценария, Объект.Сценарий,Объект.ВерсияРегламента));

КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеОткрытиеЭтапов_Завершение(Результат, ДополнительныеПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        // Пользователь отказался.
    Иначе       
		ОбрабатыватьОтчетыЭтапаПриИзмененииСостояния(ДополнительныеПараметры.Действие, ДополнительныеПараметры.ВыбОрганизацииАдрес);	
    КонецЕсли;
КонецПроцедуры		// ПодтверждениеСбросаЭтапов_Завершение()

&НаКлиенте
Процедура ПодтверждениеСбрасываниеЭтапов_Завершение(Результат, ДополнительныеПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        // Пользователь отказался.
    Иначе       
		ОбрабатыватьОтчетыЭтапаПриИзмененииСостоянияЗавершение(КодВозвратаДиалога.Нет, ДополнительныеПараметры.СтруктураПараметровОповещения);	
    КонецЕсли;
КонецПроцедуры		// ПодтверждениеСбросаЭтапов_Завершение()

&НаКлиенте
Процедура ОрганизацииВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
    	
	Если (Результат = Неопределено) ИЛИ (Результат = КодВозвратаДиалога.Отмена) Тогда
		Возврат;			// Пользователь не выбрал организации.
	Иначе
		СтруктураПараметровОповещения = Новый Структура;
		СтруктураПараметровОповещения.Вставить("ЗаполнятьДокументы",			 Результат.ЗаполнятьДокументы);
		СтруктураПараметровОповещения.Вставить("ИмяСобытия",					 Результат.Действие);
		СтруктураПараметровОповещения.Вставить("Параметр",						 Результат.ВыбОрганизацииАдрес);
		СтруктураПараметровОповещения.Вставить("УстанавливатьСтатусОтчетов",	 Результат.УстанавливатьСтатусОтчетов);
		Если Результат.Действие = "Открыть этап" Тогда
			// Открытие этапа.
			Если Результат.ОбрабатыватьДокументы Тогда
				ОбрабатыватьОтчетыЭтапаПриИзмененииСостоянияЗавершение(КодВозвратаДиалога.Да, СтруктураПараметровОповещения); 
			Иначе
				ОбрабатыватьОтчетыЭтапаПриИзмененииСостоянияЗавершение(КодВозвратаДиалога.Нет, СтруктураПараметровОповещения); 
			КонецЕсли;	
		ИначеЕсли Результат.Действие = "Закрыть этап" Тогда
			// Закрытие этапа.
			Если Результат.ОбрабатыватьДокументы Тогда
				ОбрабатыватьОтчетыЭтапаПриИзмененииСостоянияЗавершение(КодВозвратаДиалога.Да, СтруктураПараметровОповещения); 
			Иначе
				ОбрабатыватьОтчетыЭтапаПриИзмененииСостоянияЗавершение(КодВозвратаДиалога.Нет, СтруктураПараметровОповещения); 
			КонецЕсли;	
		ИначеЕсли Результат.Действие = "Отменить обработку этапа" Тогда
			// Сбрасывание выполнение этапа.
			ОбрабатыватьОтчетыЭтапаПриИзмененииСостоянияЗавершение(КодВозвратаДиалога.Нет, СтруктураПараметровОповещения);	
		КонецЕсли;	
	КонецЕсли;	
  
КонецПроцедуры

#КонецОбласти

#Область  СобытияЭлементовФормы

&НаКлиенте
Процедура СценарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.Сценарии.Форма.ФормаВыбораУправляемая", Новый Структура("ТолькоОткрытые", Истина), Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатМатрицаОтчетовПриАктивизацииОбласти(Элемент)
	
	СтатусЯчейки = "";
	Элементы.РезультатМатрицаОтчетовКонтекстноеМенюУстановитьБыстрыйОтбор.Доступность=Ложь;

	
	Если Элементы.ГруппаПериодЗаблокирован.Видимость Тогда
		Элементы.КонтекстноеМенюГруппаДействия.Доступность=Ложь;
		Элементы.КонтекстноеМенюГруппаСтатусы.Доступность=Ложь;
		Элементы.КонтекстноеМенюУправлениеПроцессом.Доступность=Ложь;
		Возврат;
	КонецЕсли;	

	Если Элемент.ТекущаяОбласть.Расшифровка=Неопределено Тогда
		Элементы.КонтекстноеМенюГруппаДействия.Доступность=Ложь;
		Элементы.КонтекстноеМенюГруппаСтатусы.Доступность=Ложь;
		Элементы.КонтекстноеМенюУправлениеПроцессом.Доступность=Ложь;	
	ИначеЕсли ТипЗнч(Элемент.ТекущаяОбласть.Расшифровка)=Тип("Структура") И Элемент.ТекущаяОбласть.Лево=1 Тогда
		Элементы.КонтекстноеМенюУправлениеПроцессом.Доступность=Истина;
		Элементы.КонтекстноеМенюГруппаДействия.Доступность=Ложь;
		Элементы.КонтекстноеМенюГруппаСтатусы.Доступность=Ложь;	
	ИначеЕсли ТипЗнч(Элемент.ТекущаяОбласть.Расшифровка)=Тип("Структура") И  Элемент.ТекущаяОбласть.Лево>1 Тогда	
		Элементы.КонтекстноеМенюУправлениеПроцессом.Доступность=Истина;
		Элементы.КонтекстноеМенюГруппаДействия.Доступность=Ложь;
		Элементы.КонтекстноеМенюГруппаСтатусы.Доступность=Ложь;		
		Если Элемент.ТекущаяОбласть.ЦветФона = Новый Цвет(225,255,225) Тогда
			СтатусЯчейки = "Этап процесса утвержден";
		КонецЕсли;
		Если Элемент.ТекущаяОбласть.ЦветФона = Новый Цвет(204,255,255) Тогда
			СтатусЯчейки = "Этап процесса выполняется";
		КонецЕсли;	
	ИначеЕсли Элемент.ТекущаяОбласть.Верх  = 1 И Элемент.ТекущаяОбласть.Верх  = 1 И Элемент.ТекущаяОбласть.Лево>4 И  Элемент.ТекущаяОбласть.Лево<=РезультатМатрицаОтчетов.ШиринаТаблицы Тогда 	
		Элементы.КонтекстноеМенюГруппаДействия.Доступность=Ложь;
		Элементы.КонтекстноеМенюГруппаСтатусы.Доступность=Ложь;
		Элементы.КонтекстноеМенюУправлениеПроцессом.Доступность=Ложь;
        Элементы.РезультатМатрицаОтчетовКонтекстноеМенюУстановитьБыстрыйОтбор.Доступность=Истина;
	Иначе	
		Элементы.КонтекстноеМенюУправлениеПроцессом.Доступность=Ложь;
		Элементы.КонтекстноеМенюГруппаДействия.Доступность=Истина;
		Элементы.КонтекстноеМенюГруппаСтатусы.Доступность=Истина;
	КонецЕсли;	

	ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.1);
	ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);

	
КонецПроцедуры

&НаКлиенте
Процедура РабочийПроцессНажатие(Элемент)
	
	Если Строка(РабочийПроцесс)="" Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("РабочийПроцессНажатиеЗавершение", ЭтотОбъект), "Процесс не существует, создать новый рабочий процесс?", Режим, 0);	
	Иначе
		ПоказатьЗначение(, РабочийПроцесс);
	КонецЕсли;
	
КонецПроцедуры

#Область  СобытияЭлементовТаблицы 

&НаКлиенте
Процедура Заполнить(Команда)
		
	ПоложениеКурсора = Элементы.РезультатМатрицаОтчетов.ТекущаяОбласть;
	СпОбластейРасшифровки=ПолучитьВыделенныеОбласти();
	ОбработатьДокументы(СпОбластейРасшифровки, "ПоПравилуОбработки",);		
	СформироватьМатрицуОтчетов(РезультатМатрицаОтчетов);
	Элементы.РезультатМатрицаОтчетов.ТекущаяОбласть = ПоложениеКурсора;
  
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДанные(Команда)
	
	ПоложениеКурсора = Элементы.РезультатМатрицаОтчетов.ТекущаяОбласть;
	СпОбластейРасшифровки=ПолучитьВыделенныеОбласти();	
	ВыделенныеОбласти = РезультатМатрицаОтчетов.ВыделенныеОбласти;
	
	Для Каждого ВыделеннаяОбласть из ВыделенныеОбласти Цикл	
		ПроверитьДанныеСервер(ВыделеннаяОбласть.Верх,ВыделеннаяОбласть.Лево,ВыделеннаяОбласть.Низ,ВыделеннаяОбласть.Право);	
	КонецЦикла;	
	
	СформироватьМатрицуОтчетов(РезультатМатрицаОтчетов);
	Элементы.РезультатМатрицаОтчетов.ТекущаяОбласть = ПоложениеКурсора;  

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМатрицуОтчетов(Команда)
	
	СформироватьМатрицуОтчетов(РезультатМатрицаОтчетов);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеЭтапаЗакрыт(Команда)
	
	ПоложениеКурсора = Элементы.РезультатМатрицаОтчетов.ТекущаяОбласть;
	ПоложениеКурсора = Элементы.РезультатМатрицаОтчетов.ТекущаяОбласть;
	ОрганизацииЭтапа = ПолучитьОрганизацииЭтапа(ПоложениеКурсора.Расшифровка);		
	Оповещение = Новый ОписаниеОповещения("ОрганизацииВыборЗавершение", ЭтаФорма);
	
	ПараметрыФормы = Новый Структура("АдресТЗОрганизаций,Действие", АдресТЗОрганизаций, "Утвердить этап");
    ОткрытьФорму("Обработка.МатрицаУправленияУниверсальнымПроцессом.Форма.ФормаОрганизацийПроцесса", ПараметрыФормы,,,,, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСотсояниеЭтапаОткрыт(Команда)
	
	ПоложениеКурсора = Элементы.РезультатМатрицаОтчетов.ТекущаяОбласть;
	Расшифровка = ВернутьВыбранныйЭтап();
	ОрганизацииЭтапа = ПолучитьОрганизацииЭтапа(ПоложениеКурсора.Расшифровка);		
	Оповещение = Новый ОписаниеОповещения("ОрганизацииВыборЗавершение", ЭтаФорма);
	
	ПараметрыФормы = Новый Структура("АдресТЗОрганизаций,Действие",АдресТЗОрганизаций,"Перевести этап в статус ""Выполняется""");
    ОткрытьФорму("Обработка.МатрицаУправленияУниверсальнымПроцессом.Форма.ФормаОрганизацийПроцесса", ПараметрыФормы,,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояние(Команда)
	
	ПоложениеКурсора = Элементы.РезультатМатрицаОтчетов.ТекущаяОбласть;
	
	СпОбластейРасшифровки=ПолучитьВыделенныеОбласти();
	Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОтчетов." + СтрЗаменить(Команда.Имя,"УстановитьСостояние",""));
	ОбработатьДокументы(СпОбластейРасшифровки, "ИзменитьСостояние", Новый Структура("Состояние", Состояние));	
	
	СформироватьМатрицуОтчетов(РезультатМатрицаОтчетов);
	Элементы.РезультатМатрицаОтчетов.ТекущаяОбласть = ПоложениеКурсора;
		
КонецПроцедуры

&НаКлиенте
Процедура РезультатМатрицаОтчетовОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
		
	Расшифровка=Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатМатрицаОтчетовОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(АдресХранилищаДанныеРасшифровкиМатрицаОтчетов, Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресХранилищаСхемаКомпоновкиМатрицаОтчетов));
	Если ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		ЗначениеРасшифровки =   ПолучитьПоляРасшифровки(Расшифровка);
		Если ЗначениеРасшифровки<>Null Тогда
			ПоказатьЗначение(, ПолучитьПоляРасшифровки(Расшифровка));
		КонецЕсли;
	Иначе
		ПоказатьЗначение(, Расшифровка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область  СобытияЭлементовДиаграммы

&НаКлиенте
Процедура ОбновитьМатрицуОтчетовДиаграмма(Команда)
	
	ВывестиДиаграмму();

КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбъектыДиаграмма(Команда)
	
	Расшифровка = ВернутьВыбранныйЭтап();
	СоздатьОбъектыТекущегоЭтапа_Сервер(Расшифровка);
    СформироватьМатрицуОтчетов(РезультатМатрицаОтчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеЭтапаЗакрытДиаграмма(Команда)
	
	Расшифровка = ВернутьВыбранныйЭтап();
	ОрганизацииЭтапа = ПолучитьОрганизацииЭтапаДиаграмма(Расшифровка);	
	Оповещение = Новый ОписаниеОповещения("ОрганизацииВыборЗавершение", ЭтаФорма);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресТЗОрганизаций", АдресТЗОрганизаций);
	ПараметрыФормы.Вставить("Действие", "Закрыть этап");
	ПараметрыФормы.Вставить("ОтображатьПредупреждениеЭтапы", Ложь);
	ПараметрыФормы.Вставить("ОтображатьФлагЗаполненияОтчетов", Истина);
	ПараметрыФормы.Вставить("ОтображатьФлагУстановкиСтатусовОтчетов", Истина);
    ОткрытьФорму("Обработка.МатрицаУправленияУниверсальнымПроцессом.Форма.ФормаОрганизацийПроцесса", ПараметрыФормы,,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСотсояниеЭтапаОткрытДиаграмма(Команда)
	
	Расшифровка = ВернутьВыбранныйЭтап();
	ОрганизацииЭтапа = ПолучитьОрганизацииЭтапаДиаграмма(Расшифровка);	
	Оповещение = Новый ОписаниеОповещения("ОрганизацииВыборЗавершение", ЭтаФорма);
	ЕстьЭтапыПоследователиДляСнятия = ЕстьЭтапыПоследователиДляСнятия(ОрганизацииЭтапа);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресТЗОрганизаций",АдресТЗОрганизаций);
	ПараметрыФормы.Вставить("Действие", "Открыть этап");
	ПараметрыФормы.Вставить("ОтображатьФлагЗаполненияОтчетов", Истина);
	ПараметрыФормы.Вставить("ОтображатьФлагУстановкиСтатусовОтчетов", Истина);
	ПараметрыФормы.Вставить("ОтображатьПредупреждениеЭтапы", ЕстьЭтапыПоследователиДляСнятия);
    ОткрытьФорму("Обработка.МатрицаУправленияУниверсальнымПроцессом.Форма.ФормаОрганизацийПроцесса", ПараметрыФормы,,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатус_НеАктивен(Команда)
	
	Расшифровка = ВернутьВыбранныйЭтап();
	ОрганизацииЭтапа = ПолучитьОрганизацииЭтапаДиаграмма(Расшифровка);	
	Оповещение = Новый ОписаниеОповещения("ОрганизацииВыборЗавершение", ЭтаФорма);
	ЕстьЭтапыПоследователиДляСнятия = ЕстьЭтапыПоследователиДляСнятия(ОрганизацииЭтапа);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресТЗОрганизаций", АдресТЗОрганизаций);
	ПараметрыФормы.Вставить("Действие", "Отменить обработку этапа");
	ПараметрыФормы.Вставить("ОтображатьПредупреждениеЭтапы", ЕстьЭтапыПоследователиДляСнятия);
	ПараметрыФормы.Вставить("ОтображатьФлагЗаполненияОтчетов", Ложь);
	ПараметрыФормы.Вставить("ОтображатьФлагУстановкиСтатусовОтчетов", Истина);
	ОткрытьФорму("Обработка.МатрицаУправленияУниверсальнымПроцессом.Форма.ФормаОрганизацийПроцесса", ПараметрыФормы, , , , , Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументыЭтапа(Команда)
	Расшифровка = ВернутьВыбранныйЭтап();
	Если Расшифровка <> Неопределено Тогда
		ЗаполнитьДокументыЭтапа_Сервер(Расшифровка, Объект.ВерсияРегламента, Объект.ПериодСценария, Объект.Сценарий);
	Иначе
		// Этап не выбран. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроцессДоТекущегоЭтапаПробный(Команда)
	
	Организация = Неопределено;
	Расшифровка = ВернутьВыбранныйЭтап(Организация);
	СформироватьПробнуюОтчетность_Сервер(Расшифровка,Организация);
	
	Если Элементы.Страницы.ТекущаяСтраница.Имя = "МатрицаОтчетов" Тогда
		СформироватьМатрицуОтчетов(РезультатМатрицаОтчетов);
	Иначе	
		ВывестиДиаграмму();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборОрганизации_Завершение(Результат, ПараметрыОповещения) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ВыполняемоеДействие = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Действие", "");   
		ВыбОрганизацииАдрес = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "ВыбОрганизацииАдрес", "");   
		Если СокрЛП(ВыполняемоеДействие) = "Открыть этап" Тогда
			ВыполнитьДействияЭтапаПоОрганизациям(ВыбОрганизацииАдрес);
		Иначе
			ТекстСообщения = НСтр("ru = 'Неизвестный вариант выполняемого действия: %Действие%. Операция отменена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Действие%", Строка(ВыполняемоеДействие));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	ИначеЕсли Результат = Неопределено Тогда
		// Пользователь отказался.
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный вариант результирующего значения: %Результат%. Операция отменена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Результат%", Строка(Результат));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияТекущегоЭтапа(Команда)
	
	Расшифровка = ВернутьВыбранныйЭтап();
	ОрганизацииЭтапа = ПолучитьОрганизацииЭтапа(Расшифровка);
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("АдресТЗОрганизаций", АдресТЗОрганизаций);
	ПараметрыФормы.Вставить("Действие", "Открыть этап");
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборОрганизации_Завершение", ЭтаФорма);
	ОткрытьФорму("Обработка.МатрицаУправленияУниверсальнымПроцессом.Форма.ФормаОрганизацийПроцесса", ПараметрыФормы, ЭтаФорма, , , , ОповещениеОЗакрытии);
	ВывестиДиаграмму();

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроцессДоТекущегоЭтапа(Команда)
	
	Расшифровка = ВернутьВыбранныйЭтап();
	ВыполнитьПроцессДоТекущегоЭтапа_Сервер(Расшифровка);
	
	Если Элементы.Страницы.ТекущаяСтраница.Имя = "МатрицаОтчетов" Тогда
		СформироватьМатрицуОтчетов(РезультатМатрицаОтчетов);
	Иначе	
		ВывестиДиаграмму();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	Элементы.ПоказатьНастройки.Пометка = НЕ Элементы.ПоказатьНастройки.Пометка;
	Элементы.СтраницыНастройки.Видимость = Элементы.ПоказатьНастройки.Пометка;
	
	СохранитьНастройки=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбъекты(Команда)
	
	ПоложениеКурсора = Элементы.РезультатМатрицаОтчетов.ТекущаяОбласть;	
	СпОбластейРасшифровки=ПолучитьВыделенныеОбласти();
		
	ВыделенныеОбласти = РезультатМатрицаОтчетов.ВыделенныеОбласти;	
	
	Для Каждого ВыделеннаяОбласть из ВыделенныеОбласти Цикл		
		СгенерироватьОбъекты(ВыделеннаяОбласть.Верх,ВыделеннаяОбласть.Лево,ВыделеннаяОбласть.Низ,ВыделеннаяОбласть.Право);		
	КонецЦикла;
	
	СформироватьМатрицуОтчетов(РезультатМатрицаОтчетов);
	Элементы.РезультатМатрицаОтчетов.ТекущаяОбласть = ПоложениеКурсора; 
				
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

&НаСервере
Процедура ОтменитьОбработкуЭтапаСервер(ОрганизацииАдрес, ОбрабатыватьДокументы) 
	МассивОрганизаций = ПолучитьИЗВременногоХранилища(ОрганизацииАдрес).ВыгрузитьКолонку("Организация");
	
	МодульУправленияПроцессамиУХ.УстановитьСостояниеЭтапаПроцессаОтчетности(
		Объект.СостоянияВыполненияПроцесса
		,мПредшественникиСтрок	
		,мПоследователиСтрок
		,Объект.ВерсияРегламента
		,Объект.ПериодСценария
		,Объект.Сценарий
		,ТекущийЭтап
		,МассивОрганизаций
		,"Запланирован"
		,
		,
		,ОбрабатыватьДокументы
		,ЭкземплярПроцесса);
	
	ВывестиДиаграмму();
КонецПроцедуры			// ОтменитьОбработкуЭтапаСервер()

// Запускает процесс по документу Управление отчетным периодом УправлениеПериодомВход.
// Возвращает успешность операции.
&НаСервереБезКонтекста
Функция ЗапуститьПроцесс_Сервер(УправлениеПериодомВход)
	РезультатФункции = Истина;
	Попытка
		УправлениеПериодомОбъект = УправлениеПериодомВход.ПолучитьОбъект();
		РезультатФункции = Документы.УправлениеПериодомСценария.ЗапуститьПроцесс(УправлениеПериодомОбъект);
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось запустить процесс по документу %ДокументПроцесса%: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументПроцесса%", Строка(УправлениеПериодомВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Ложь;
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции

// Заполняет сформированные документы по этапу ЭтапВход, периоду ПериодСценарияВход, сценарию СценарийВход,
// регламенту ВерсияРегламентаВход.
&НаСервереБезКонтекста
Процедура ЗаполнитьДокументыЭтапа_Сервер(ЭтапВход, ВерсияРегламентаВход, ПериодСценарияВход, СценарийВход)
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	МодульУправленияПроцессамиУХ.ОбработатьДокументыЭтапаПоОрганизации(ВерсияРегламентаВход, ПериодСценарияВход, СценарийВход, ЭтапВход, ПустаяОрганизация, Ложь, Ложь, Ложь, Неопределено); 
КонецПроцедуры		// ЗаполнитьДокументыЭтапа_Сервер()

// Функция задает вопрос пользователю о необходимости обработки отчетов этапа
//
&НаКлиенте
Функция ОбрабатыватьОтчетыЭтапаПриИзмененииСостояния(ИмяСобытия,Параметр)
		
	Если ИмяСобытия = "Закрыть этап"  Тогда
		ТекстВопроса =  НСтр("ru = 'Выполнять обработку настраиваемых отчетов этапа:
		|- загрузку отчетов из хранилища файлов, в случае их наличия;
		|- автозаполнение отчетов;
		|- автоутверждение отчетов;'");
	ИначеЕсли ИмяСобытия = "Открыть этап"  Тогда
		ТекстВопроса =  НСтр("ru = 'Выполнять обработку настраиваемых отчетов этапа:
		|- загрузку отчетов из хранилища файлов, в случае их наличия;
		|- перевод запланированных отчетов в состояние ""Выполняется"";
		|- автозаполнение отчетов;'");
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
	Оповещение = Новый ОписаниеОповещения("ОбрабатыватьОтчетыЭтапаПриИзмененииСостоянияЗавершение", ЭтотОбъект, Новый Структура("ИмяСобытия,Параметр", ИмяСобытия,Параметр));
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтображениеЗаголовков()
	
	Элементы.РезультатМатрицаОтчетов.ОтображатьЗаголовки = ОтображатьЗаголовки;
	Элементы.ОтображатьЗаголовки.Заголовок = ?(ОтображатьЗаголовки, "Скрыть заголовки", "Отображать заголовки");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьМатрицуОтчетов(Результат)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновки = ОбработкаОбъект.ПолучитьМакет("МатрицаОтчетов");
	СхемаКомпоновки.НаборыДанных[0].Запрос=ТекстЗапроса;	
		
	Если Найти(ТекстЗапроса,"ВЫБРАТЬ")=0 Тогда
		УстановитьСостояние("Состав документов не определен");
		Возврат;
	КонецЕсли;
		
	Если НЕ Объект.ВерсияРегламента.РежимМногопериодныхУОП И (Объект.ПериодСценария<>Объект.ПериодСценарияОкончание) Тогда
		УстановитьСостояние("Для работы с данными необходимо включить режим поддержки многопериодных экземпляров отчетов в настройках регламента"); 
		Возврат;
	КонецЕсли;	

	Если Найти(ТекстЗапроса,"Нет выбранных этапов")>0 Тогда	
		УстановитьСостояние("Выбранный шаблон процесса не содержит информации для управления процессом"); 
		Возврат;	 
	КонецЕсли;
	
	НовыйИсточник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки);    
	 
	Если НЕ ЕстьШаблонПроцесса Тогда		
		КомпоновщикМатрицаОтчетов.ЗагрузитьНастройки(СхемаКомпоновки.ВариантыНастроек[1].Настройки);
		КомпоновщикМатрицаОтчетов.Инициализировать(НовыйИсточник);
		НастройкиКомпоновки=КомпоновщикМатрицаОтчетов.ПолучитьНастройки();
		НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодСценария",     	Объект.ПериодСценария);
		НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("Сценарий",            	Объект.Сценарий);
		НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("ВерсияОрганизационнойСтруктуры", 	Объект.ВерсияРегламента);
	    НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("ДокументБД",            	Справочники.ДокументыБД.НайтиПоНаименованию("НастраиваемыйОтчет",,,Справочники.ТипыБазДанных.ТекущаяИБ));
		Если НЕ НастройкиКомпоновки.ПараметрыДанных.Элементы.Найти("ВидОтчетаОтбор") = Неопределено Тогда	
			 НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("ВидОтчетаОтбор", 	Объект.ВерсияРегламента.ВидОтчета);	
		КонецЕсли;		
	Иначе
		КомпоновщикМатрицаОтчетов.ЗагрузитьНастройки(СхемаКомпоновки.ВариантыНастроек[0].Настройки);
		КомпоновщикМатрицаОтчетов.Инициализировать(НовыйИсточник);
		НастройкиКомпоновки=КомпоновщикМатрицаОтчетов.ПолучитьНастройки();
		НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодСценария",     	Объект.ПериодСценария);
		НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("Сценарий",            	Объект.Сценарий);
		НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("ВерсияОрганизационнойСтруктуры", 	Объект.ВерсияРегламента);	
		Для Каждого стр из ПараметрыТаблиц Цикл	
			НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра(Стр.ИмяПараметра,     	Стр.ЗначениеПараметра);		
		КонецЦикла;		
	КонецЕсли;	
			
	СхемаКомпоновки.Параметры.ЗаголовокОтчета.Значение=СформироватьТекстЗаголовкаОтчета(); 	
	
	УстановкаОтборов(НастройкиКомпоновки); 
		
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиКомпоновки, ДанныеРасшифровки,,Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных();
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент();
	ПроцессорВывода.УстановитьДокумент(Результат);
	ПроцессорВывода.ОтображатьПроцентВывода = Истина;
	Результат.Очистить();
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
	АдресХранилищаДанныеРасшифровкиМатрицаОтчетов    = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
	АдресХранилищаСхемаКомпоновкиМатрицаОтчетов = ПоместитьВоВременноеХранилище(СхемаКомпоновки,   УникальныйИдентификатор); 
	УстановитьОформление(Результат);
	ПрочитатьОтборы();
	СброситьСостояниеНеИспользовать();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформление(Результат)
		  
	 ОбластьКУдалению=Результат.Область(2,0,2,0);
     Результат.УдалитьОбласть(ОбластьКУдалению,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
 
	 ТаблицаОрганизаций.Очистить();
	 
	 НетЛинии=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);

	 Для ИндКолонки=5 по Результат.ШиринаТаблицы Цикл
	     ТекОрганизация = ПолучитьПоляРасшифровки(Результат.Область(1,ИндКолонки,1,ИндКолонки).Расшифровка);
	     НТ =ТаблицаОрганизаций.Добавить();
	     НТ.Организация = ТекОрганизация;
	 КонецЦикла;
	 
	 Для ИндСтроки=2 по Результат.ВысотаТаблицы Цикл	 
		 ТекСтрока= Результат.Область(ИндСтроки,0,ИндСтроки,0);
		 ТекСтрока.ВысотаСтроки=25;
		 ТекОблЭтап = Результат.Область(ИндСтроки,1,ИндСтроки,1);
		 Если ТекОблЭтап.ЦветФона = WindowsColors.ПолосаПрокрутки Тогда
			 ТекСтрока.ВысотаСтроки=20;
			 ТекОблЭтап.ЦветФона = Новый Цвет(255,255,255);
			 Для ИндКолонки=1 по Результат.ШиринаТаблицы Цикл
				 ТекОбл = Результат.Область(ИндСтроки,ИндКолонки,ИндСтроки,ИндКолонки); 
				 ТекОбл.Текст=?(ИндКолонки>4,"",ТекОбл.Текст);
				 ТекОбл.Расшифровка=?(ИндКолонки>4,"",ТекОбл.Расшифровка); 
				 ТекОбл.ПоложениеТекстаОтносительноКартинки=ПоложениеТекстаОтносительноКартинки.Поверх;
				 
				 Если ИндКолонки<5 Тогда
					 ТекОбл.ГраницаСверху=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);				  				 	 
					 ТекОбл.ГраницаСнизу=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
					 ТекОбл.ЦветРамки = Новый Цвет(230,230,250);
				 КонецЕсли;
				 
				 Если ИндКолонки>=5 Тогда
					 ТекОбл.ЦветФона = Новый Цвет(245,245,245);
					 ТекЭтапПроцесса 			=  ПолучитьПоляРасшифровки(Результат.Область(ИндСтроки,1,ИндСтроки,1).Расшифровка);
					 Если  ТекЭтапПроцесса = Неопределено Тогда
						 Продолжить;
					 КонецЕсли;	   
					 ТекОрганизацияПроцесса   =  ПолучитьПоляРасшифровки(Результат.Область(1,ИндКолонки,1,ИндКолонки).Расшифровка);
					 Если  ТекОрганизацияПроцесса = Неопределено Тогда
						 Продолжить;
					 КонецЕсли;
					 СтатусыЭтапа = Объект.СостоянияВыполненияПроцесса.НайтиСтроки(Новый Структура("Этап,Организация",ТекЭтапПроцесса,ТекОрганизацияПроцесса));
					 Если СтатусыЭтапа.Количество()=1 Тогда
						 СтатусЭтапа = СтатусыЭтапа[0].СостояниеЭтапа;
						 ТекОбл.ЦветФона = ?(СтатусЭтапа = Перечисления.СостоянияЭтаповПроцессов.Утвержден,Новый Цвет(225,255,225),Новый Цвет(204,255,255)); 
						 ТекОбл.Расшифровка = Новый Структура("Этап,Организация",ТекЭтапПроцесса,ТекОрганизацияПроцесса);	 
					 КонецЕсли;	    	 
				 Иначе	
					 ТекЭтапПроцесса 			=  ПолучитьПоляРасшифровки(Результат.Область(ИндСтроки,1,ИндСтроки,1).Расшифровка);
					 ТекОбл.Расшифровка = Новый Структура("Этап",ТекЭтапПроцесса);	 
				 КонецЕсли; 
			 КонецЦикла;	  
		 КонецЕсли;	 		 
	 КонецЦикла;
		
	//Форматируем шапку...
	Результат.Область(1,1,1,Результат.ШиринаТаблицы).ЦветФона=Новый Цвет(155,194,230);
    Результат.Область(1,1,1,Результат.ШиринаТаблицы).ЦветТекста=Новый Цвет(255,255,255);
	Результат.Область(1,1,1,Результат.ШиринаТаблицы).Шрифт=Новый Шрифт("Arial",8,Истина);

	//Уголок шапки с заголовком
	Результат.Область(1,1,1,4).Объединить();
	Результат.Область(1,1,1,4).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	Результат.Область(1,1,1,4).ВертикальноеПоложение   = ВертикальноеПоложение.Центр;

	Результат.Область(1,1,1,4).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
   	НовыйТекстЯчейки = НСтр("ru = 'Управление отчетным периодом %ПредставлениеПериода%'");
	НовоеПредставление = ?(ЗначениеЗаполнено(РабочийПроцесс), Строка(РабочийПроцесс), НСтр("ru = 'не выбран'"));
	НовыйТекстЯчейки = СтрЗаменить(НовыйТекстЯчейки, "%ПредставлениеПериода%", НовоеПредставление);
	Результат.Область(1,1,1,4).Текст = НовыйТекстЯчейки;

	
	ОбластьШапки=Результат.Область(1,0,1,0);
	ОбластьШапки.ВысотаСтроки=100;
	Результат.ФиксацияСверху=1;	
	
			
КонецПроцедуры

//Создает поле отбора компоновки 
//Ищет, удаляет элементы по представлению и по полю
//КоллекцияПолей=ДоступныеЗаявки.Отбор.Элементы
//ИмяПоля="Дата" (Если Искать=Истина и НеСоздавать=Истина, задавать необязательно)
//ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно
//ЗначениеОтбора=НачалоДня(Дата) //Для вида сравнения "ВСписке" надо передавать список значений
//ПАраметры:
//Искать=Истина (Ищет по Левому значению. Найдет первый элемент, остальные удалит),
//Удалить=Истина(Удалит найденные элементы,Поле не создастся),
//Представление="Отбор(Программно)" (Ищет элемент по представлению. Найдет первый элемент, остальные удалит)
//Использование (Признак использования элемента отбора)
//НеСоздавать=Истина (Если не находит поле - не создает новое)
&НаКлиентеНаСервереБезКонтекста
Процедура СоздатьПолеОтбораКомпоновки(КоллекцияПолей,ИмяПоля="",ВидСравнения=НЕопределено, Знач ЗначениеОтбора=Неопределено,Параметры=Неопределено)
	
	ПараметрыПоУмолчанию = Новый Структура("Искать,Удалить,Представление,Использование,НеСоздавать",Ложь,Ложь,"",Истина,Ложь);
	
	Если Параметры=Неопределено Тогда
		Параметры=ПараметрыПоУмолчанию;
	Иначе
		Для Каждого Элемент из ПараметрыПоУмолчанию Цикл
			Если НЕ Параметры.Свойство(Элемент.Ключ) Тогда
				Параметры.Вставить(Элемент.Ключ,Элемент.Значение);
			КонецЕсли;				
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ОтборНайден") Тогда //Служебный параметр, в структуре не передавать!
		Параметры.Вставить("ОтборНайден",Ложь);
	КонецЕсли;
	
	ПолеОтбора=Новый ПолеКомпоновкиДанных(ИмяПоля);	
	
	Если Параметры.Искать или ЗначениеЗаполнено(Параметры.Представление) Тогда
	
		Для Индекс=-(КоллекцияПолей.Количество()-1) по 0 Цикл  //Найдем одно поле в коллекции остальные удалим
			ЭлементОтбора=КоллекцияПолей[-Индекс];
			Если ТипЗнч(ЭлементОтбора)=Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда //Рекурсивно ищет в папках
				СоздатьПолеОтбораКомпоновки(ЭлементОтбора.Элементы,ИмяПоля,ВидСравнения,ЗначениеОтбора,Параметры);
				Если Параметры.ОтборНайден Тогда
					Параметры.Удалить=Истина;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Параметры.Представление) Тогда //Найдем по представлению
				Если ЭлементОтбора.Представление = Параметры.Представление Тогда  
					Если НЕ Параметры.ОтборНайден и НЕ Параметры.Удалить Тогда
						НовыйОтбор=ЭлементОтбора;
						Параметры.ОтборНайден=Истина;
					Иначе
						КоллекцияПолей.Удалить(-Индекс);
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеОтбора Тогда  //Ищем по полю
				Если НЕ Параметры.ОтборНайден и НЕ Параметры.Удалить Тогда
					НовыйОтбор=ЭлементОтбора;
					Параметры.ОтборНайден=Истина;
				Иначе
					КоллекцияПолей.Удалить(-Индекс);
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		
		Если Параметры.Удалить Тогда 
			Возврат;
		КонецЕсли;
		
	КонецЕсли;   //КонецЕсли Параметры.Искать
	
	Если ТипЗнч(ЗначениеОтбора) =Тип ("Массив") Тогда
		СписокЗнач=Новый СписокЗначений;
		Для Каждого Элемент ИЗ ЗначениеОтбора Цикл
			СписокЗнач.Добавить(Элемент);
		КонецЦикла;
		ЗначениеОтбора=СписокЗнач;
	КонецЕсли;
	
	Если Параметры.ОтборНайден Тогда
		Если ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке и (НЕ НовыйОтбор.ПравоеЗначение=Неопределено) Тогда
			Попытка
				Для Каждого ЭлСписка Из НовыйОтбор.ПравоеЗначение Цикл
					Если ЗначениеОтбора.НайтиПоЗначению(ЭлСписка.Значение)=Неопределено Тогда
						ЗначениеОтбора.Добавить(ЭлСписка.Значение);
					КонецЕсли;
				КонецЦикла;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если НЕ ВидСравнения=Неопределено Тогда
			НовыйОтбор.ВидСравнения=ВидСравнения;
		КонецЕсли;
		Новыйотбор.Использование=Параметры.Использование; 
		Новыйотбор.ПравоеЗначение=ЗначениеОтбора;
		НовыйОтбор.Представление=Параметры.Представление;
		
	ИначеЕсли НЕ Параметры.НеСоздавать Тогда
		
		НовыйОтбор=КоллекцияПолей.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение=ПолеОтбора;
		НовыйОтбор.ВидСравнения=ВидСравнения;
		Новыйотбор.Использование=Параметры.Использование; 
		Новыйотбор.ПравоеЗначение=ЗначениеОтбора;
		НовыйОтбор.Представление=Параметры.Представление;
	КонецЕсли;
		
КонецПроцедуры
	 
&НаКлиенте
Функция  ПолучитьВыделенныеОбласти()
	
	СпОбластейРасшифровки = Новый СписокЗначений;
	ВыделенныеОбласти = РезультатМатрицаОтчетов.ВыделенныеОбласти;	
	
	Для Каждого ВыделеннаяОбласть из ВыделенныеОбласти Цикл
		Для Кол = ВыделеннаяОбласть.Лево По ВыделеннаяОбласть.Право Цикл
			Для Стр = ВыделеннаяОбласть.Верх По ВыделеннаяОбласть.низ Цикл 	     								
				Область = РезультатМатрицаОтчетов.Область(Стр,Кол);	
				Если НЕ Область.Текст = "Х" Тогда
					СпОбластейРасшифровки.Добавить(Область.Расшифровка);							
				КонецЕсли;
			КонецЦикла;			
		КонецЦикла;
	КонецЦикла;
	
	Возврат СпОбластейРасшифровки;
	
КонецФункции	

// Возвращает копию ИсходнаяТаблицаВход
&НаСервере
Функция ОтобратьСостоянияПоТаблицеОрганизаций(ИсходнаяТаблицаВход, ТаблицаОтбораВход)
	Выгрузка = ИсходнаяТаблицаВход.Выгрузить();
	РезультатФункции = Выгрузка.СкопироватьКолонки();
	МассивОрганизаций = ТаблицаОтбораВход.ВыгрузитьКолонку("Организация");
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивОрганизаций);
	Для Каждого ТекИсходнаяТаблицаВход Из ИсходнаяТаблицаВход Цикл
		Если МассивОрганизаций.Найти(ТекИсходнаяТаблицаВход.Организация) <> Неопределено Тогда
			НоваяСтрока = РезультатФункции.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекИсходнаяТаблицаВход);
		Иначе
			Продолжить;			// Выполняем поиск далее.
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Выполняет назначенные текущему этапу по организациям из АдресВыбранныхОрганизацийВход.
&НаСервере
Функция ВыполнитьДействияЭтапаПоОрганизациям(АдресВыбранныхОрганизацийВход)
	Если ЭтоАдресВременногоХранилища(АдресВыбранныхОрганизацийВход) Тогда
		ВыбТаблицаОрганизаций = ПолучитьИзВременногоХранилища(АдресВыбранныхОрганизацийВход);
		Если ТипЗнч(ВыбТаблицаОрганизаций) = Тип("ТаблицаЗначений") Тогда
			СостоянияОчищ = ОтобратьСостоянияПоТаблицеОрганизаций(Объект.СостоянияВыполненияПроцесса, ВыбТаблицаОрганизаций);
			ОсновныеРеквизиты = ВернутьОсновныеРеквизитыОбъекта();
			Обработки.УправлениеПроцессомПодготовкиОтчетности.ВыполнитьДействияЭтапа(ТекущийЭтап, ОсновныеРеквизиты, СостоянияОчищ, ЭкземплярПроцесса);
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось получить таблицу организаций. Операция отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить таблицу организаций. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецФункции

&НаСервере
Функция СформироватьТекстЗаголовкаОтчета()

	Текст="Сценарий: "+Объект.Сценарий+"; "+"Период: "+Объект.ПериодСценария;
	
	ПользовательскиеНастройки=КомпоновщикОтборыАналитик.ПользовательскиеНастройки.Элементы;
	
	Для Каждого Отбор Из КомпоновщикОтборыАналитик.Настройки.Отбор.Элементы Цикл
		ПользОтбор=ПользовательскиеНастройки.Найти(Отбор.ИдентификаторПользовательскойНастройки);
		Если ПользОтбор<>Неопределено и ПользОтбор.Использование Тогда
			Текст=Текст+Символы.ПС+Отбор.ЛевоеЗначение+" "+ПользОтбор.ВидСравнения+" "+ПользОтбор.ПравоеЗначение;
		КонецЕсли;			
	КонецЦикла;
	
	Возврат Текст;

КонецФункции // СформироватьТекстПараметрыОтчета()

&НаСервере
Процедура УстановкаОтборов(НастройкиКомпоновки)

	КоллекцияПолей=НастройкиКомпоновки.Отбор.Элементы;
	СписокОтбора=Новый СписокЗначений;
	Для Каждого Отбор Из КомпоновщикОтборыАналитик.Настройки.Отбор.Элементы Цикл  //Только для отборов Аналитик!!!								
		Если Отбор.Использование Тогда			
			Для Каждого СтрокаОтбор ИЗ НастройкиКомпоновки.Отбор.Элементы  Цикл
				Если  СтрокаОтбор.ЛевоеЗначение = Отбор.ЛевоеЗначение Тогда
					  СтрокаОтбор.Использование = Отбор.Использование;
					  СтрокаОтбор.ВидСравнения = Отбор.ВидСравнения;
					  СтрокаОтбор.ПравоеЗначение = Отбор.ПравоеЗначение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;			
	КонецЦикла;	
	
КонецПроцедуры 

&НаСервере
Функция СтруктураРасшифровки(Расшифровка)
	
	ДанныеРасшифровкиОбъект=ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровкиМатрицаОтчетов);
	Поля = ДанныеРасшифровкиОбъект.Элементы[Расшифровка].ПолучитьПоля();
	
	МассивРодителей = ДанныеРасшифровкиОбъект.Элементы[Расшифровка].ПолучитьРодителей();
	СтруктураРодителей=Новый Структура;
	
	Для Каждого Родитель Из МассивРодителей Цикл
		Если ТипЗнч(Родитель)<>Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда  //Расшифровка работает только для детальных записей
			Продолжить;
		КонецЕсли;
		ПоляРодителей=Родитель.ПолучитьПоля();
		Для Каждого ПолеРасшифровки Из ПоляРодителей Цикл
			СтруктураРодителей.Вставить(ПолеРасшифровки.Поле,ПолеРасшифровки.Значение);	
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтруктураРодителей;

КонецФункции // НайтиПолеВРАсшифровке(МассивРодителей,"ВидОтчета")()

&НаСервере
Процедура СформироватьТекстЗапроса()
	
	РасширениеБизнесЛогикиУХ.УправлениеПериодом_ОпределитьСвязанныйШаблон(Объект.ВерсияРегламента,ТекущийШаблонПроцесса);

	ЕстьШаблонПроцесса =  ЗначениеЗаполнено(ТекущийШаблонПроцесса);
	
	Если НЕ ЕстьШаблонПроцесса  Тогда
		 СформироватьТекстЗапросаПоВидамОтчетам();
         Элементы.ДиаграммаПроцесса.Видимость = Ложь;
	Иначе
		 СформироватьТекстЗапросаПоШаблону();
		 Элементы.ДиаграммаПроцесса.Видимость = Истина;
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере 
Процедура СформироватьТекстЗапросаПоШаблону()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапыПроцессовФормируемыеДокументы.ДокументБД,
	|	МАКСИМУМ(ДокументыБД.РеквизитДляАналитики1УП) КАК РеквизитДляАналитики1УП,
	|	МАКСИМУМ(ДокументыБД.РеквизитДляАналитики2УП) КАК РеквизитДляАналитики2УП,
	|	МАКСИМУМ(ДокументыБД.РеквизитДляАналитики3УП) КАК РеквизитДляАналитики3УП,
	|	МАКСИМУМ(ДокументыБД.ИспользоватьШаблоны) КАК ИспользоватьШаблоны,
	|	МАКСИМУМ(ДокументыБД.РеквизитШаблонаДокумета) КАК РеквизитШаблонаДокумета,
	|	МАКСИМУМ(ДокументыБД.РеквизитСостояния) КАК РеквизитСостояния,
	|	МАКСИМУМ(ДокументыБД.Согласуется) КАК Согласуется
	|ИЗ
	|	Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыПроцессовФормируемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДокументыБД КАК ДокументыБД
	|		ПО ЭтапыПроцессовФормируемыеДокументы.ДокументБД = ДокументыБД.Ссылка
	|ГДЕ
	|	ЭтапыПроцессовФормируемыеДокументы.Ссылка.Владелец = &ТекущийШаблонПроцесса
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыПроцессовФормируемыеДокументы.ДокументБД";
	
	Запрос.УстановитьПараметр("ТекущийШаблонПроцесса",ТекущийШаблонПроцесса);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
		
	
	ПараметрыТаблиц.Очистить();
	
	ТекстЗапросаПоВТ="";
	ТекстЗапросаОбъединения=""; 	
	
	Если Выборка.Количество() = 0 Тогда	
		ТекстЗапросаПоВТ=" //Нет выбранных этапов ";	
	КонецЕсли;	

	
	Пока Выборка.Следующий() Цикл
		
		ИмяТаблицы=Выборка.ДокументБД.Наименование;
		Если Выборка.ИспользоватьШаблоны Тогда
			ИмяПоляШаблона=ИмяТаблицы+"."+Выборка.РеквизитШаблонаДокумета+" КАК ПолеШаблона,";
		Иначе	
			ИмяПоляШаблона="НЕОПРЕДЕЛЕНО КАК ПолеШаблона,"
		КонецЕсли;
				
		Если Выборка.РеквизитДляАналитики1УП<>"" Тогда
			ИмяПоляАналитика1=ИмяТаблицы+"."+Выборка.РеквизитДляАналитики1УП+" КАК Аналитика1";
		Иначе	
			ИмяПоляАналитика1="НЕОПРЕДЕЛЕНО КАК Аналитика1";
		КонецЕсли;
		Если Выборка.РеквизитДляАналитики2УП<>"" Тогда
			ИмяПоляАналитика2=ИмяТаблицы+"."+Выборка.РеквизитДляАналитики2УП+" КАК Аналитика2";
		Иначе	
			ИмяПоляАналитика2="НЕОПРЕДЕЛЕНО КАК Аналитика2";
		КонецЕсли;
		Если Выборка.РеквизитДляАналитики3УП<>"" Тогда
			ИмяПоляАналитика3=ИмяТаблицы+"."+Выборка.РеквизитДляАналитики3УП+" КАК Аналитика3";
		Иначе	
			ИмяПоляАналитика3="НЕОПРЕДЕЛЕНО КАК Аналитика3";
		КонецЕсли;
		
		ИмяПараметра="Пар"+ИмяТаблицы;
		
		Новстр=ПараметрыТаблиц.Добавить();
		Новстр.ИмяПараметра=ИмяПараметра;
		Новстр.ЗначениеПараметра=Выборка.ДокументБД;
		
		// Определим поле для организации.
		ТаблицаРеквизитов = Выборка.ДокументБД.Реквизиты;
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Имя", "Организация");
		НайденныеСтроки = ТаблицаРеквизитов.НайтиСтроки(СтруктураПоиска);
		СтрокаОрганизация = "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) ";
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаОрганизация = ИмяТаблицы + ".Организация ";
		Иначе
			Если ЗначениеЗаполнено(Выборка.ДокументБД.РеквизитРазделенияПоОрганизациям) Тогда
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Имя", Выборка.ДокументБД.РеквизитРазделенияПоОрганизациям);
				НайденныеСтроки = ТаблицаРеквизитов.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					СтрокаОрганизация = ИмяТаблицы + "." + Выборка.ДокументБД.РеквизитРазделенияПоОрганизациям + " ";
				Иначе
					СтрокаОрганизация = "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) ";
				КонецЕсли;
			Иначе
				СтрокаОрганизация = "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) ";
			КонецЕсли;
		КонецЕсли;
		
		ТекстЗапросаПоВТ=ТекстЗапросаПоВТ+" 
		|ВЫБРАТЬ
		|	" + ИмяПоляШаблона + " " +
		СтрокаОрганизация + "КАК Организация"+", "+
		ИмяТаблицы+".Ссылка КАК Ссылка"+", "+
		ИмяПоляАналитика1 + ", "+
		ИмяПоляАналитика2 + ", "+
		ИмяПоляАналитика3 + ", 
		|	РегистрСостоянийОбъектов.СостояниеОбъекта КАК Состояние
		|ПОМЕСТИТЬ 
		|	" + ИмяТаблицы + "Врем" + "
		|ИЗ
		|	Документ." + ИмяТаблицы + " КАК " + ИмяТаблицы + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(, 
		|						Объект.Сценарий = &Сценарий 
		|						И Объект.ПериодОтчета = &ПериодСценария 
		|						И Объект ССЫЛКА Документ." + ИмяТаблицы + ") КАК РегистрСостоянийОбъектов
		|		ПО " + ИмяТаблицы + ".Ссылка = РегистрСостоянийОбъектов.Объект
		|ГДЕ
		|	"+ИмяТаблицы+".Сценарий = &Сценарий И
		|	"+ИмяТаблицы+".ПериодОтчета = &ПериодСценария
		|ИНДЕКСИРОВАТЬ ПО ПолеШаблона,Организация
		|;
		|//////////////////////////////////////////////////////";
				
		ТекстЗапросаОбъединения = ТекстЗапросаОбъединения + " 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаВидовОтчетов.ЭтапПроцесса,
		|	ТаблицаВидовОтчетов.ВидОтчета,
		|	ТаблицаВидовОтчетов.ДокументБД,
		|	ТаблицаОрганизаций.Организация,
		|	ТаблицаОрганизаций.СостояниеЭтапа,
		|	"+ИмяТаблицы+"Врем.Аналитика1 Как Аналитика1,
		|	"+ИмяТаблицы+"Врем.Аналитика2 Как Аналитика2,
		|	"+ИмяТаблицы+"Врем.Аналитика3 Как Аналитика3,
		|	3 как КоличествоАналитик,
		|	"+ИмяТаблицы+"Врем.Ссылка Как Ссылка,
		|	"+ИмяТаблицы+"Врем.Состояние КАК Состояние
		|"+?(ТекстЗапросаОбъединения=""," ПОМЕСТИТЬ втДанныеМатрицы ","")+"
		|ИЗ
		|	ТаблицаВидовОтчетов КАК ТаблицаВидовОтчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОрганизаций КАК ТаблицаОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Периметр
		|			ПО (Периметр.Ссылка = ТаблицаОрганизаций.Организация.Родитель)
		|		ПО (ТаблицаОрганизаций.ЭтапПроцесса = ТаблицаВидовОтчетов.ЭтапПроцесса)
		|	ЛЕВОЕ СОЕДИНЕНИЕ "+  ИмяТаблицы+"Врем"+" КАК "+ИмяТаблицы+"Врем"+"
		|	ПО ("+ИмяТаблицы+"Врем.ПолеШаблона = ТаблицаВидовОтчетов.ВидОтчета)
		|		И ("+ИмяТаблицы+"Врем.Организация = ТаблицаОрганизаций.Организация)	
		|		ГДЕ ТаблицаВидовОтчетов.ДокументБД = &"+ИмяПараметра+"
		|";
		
	КонецЦикла;	
	
	ТекстЗапроса=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница КАК Организация,
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса КАК ЭтапПроцесса,
	|   СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа КАК СостояниеЭтапа	
	|ПОМЕСТИТЬ ТаблицаОрганизаций
	|ИЗ
	|	РегистрСведений.ОрганизационныеЕдиницыЭтаповПроцессов КАК ОрганизационныеЕдиницыЭтаповПроцессов
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияВыполненияПроцессов.СрезПоследних(
	|			,
	|			Сценарий = &Сценарий
	|				И ПериодСценария = &ПериодСценария) КАК СостоянияВыполненияПроцессовСрезПоследних
	|	ПО ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница = СостоянияВыполненияПроцессовСрезПоследних.Организация
	|		И ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса = СостоянияВыполненияПроцессовСрезПоследних.ЭтапПроцесса
	|
	|ГДЕ
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ВерсияРегламентаПодготовкиОтчетности = &ВерсияОрганизационнойСтруктуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыПроцессовФормируемыеОтчеты.Ссылка КАК ЭтапПроцесса,
	|	ЭтапыПроцессовФормируемыеОтчеты.ШаблонДокумента КАК ВидОтчета,
	|	ЭтапыПроцессовФормируемыеОтчеты.ВидДокумента КАК ВидДокумента,
	|	ЭтапыПроцессовФормируемыеОтчеты.ДокументБД КАК ДокументБД
	|ПОМЕСТИТЬ ТаблицаВидовОтчетов
	|ИЗ
	|	Справочник.ШаблоныУниверсальныхПроцессов КАК ВерсииОрганизационнойСтруктуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыПроцессовФормируемыеОтчеты
	|		ПО ВерсииОрганизационнойСтруктуры.ССылка = ЭтапыПроцессовФормируемыеОтчеты.Ссылка.Владелец
	|ГДЕ
	|	ВерсииОрганизационнойСтруктуры.СвязанныйРегламент = &ВерсияОрганизационнойСтруктуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументБД,
	|	ВидОтчета,
	|	ВидДокумента
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ТаблицаОрганизаций.Организация
	|ПОМЕСТИТЬ втМакетОрганизаций
	|ИЗ
	|	ТаблицаОрганизаций	{ГДЕ Организация.*}
	|;
    |////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ТаблицаВидовОтчетов.ВидОтчета,
	|	ТаблицаВидовОтчетов.ЭтапПроцесса
	|ПОМЕСТИТЬ втМакетЭтаповВидовОтчетов
	|ИЗ
	|	ТаблицаВидовОтчетов	
	|;	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ  
	|	втМакетОрганизаций.Организация,
	|	втМакетЭтаповВидовОтчетов.ЭтапПроцесса,
	|   втМакетЭтаповВидовОтчетов.ВидОтчета
	|ПОМЕСТИТЬ втМакетМатрицы
	|ИЗ
	|	втМакетЭтаповВидовОтчетов	ЛЕВОЕ СОЕДИНЕНИЕ втМакетОрганизаций ПО ИСТИНА
	|;	
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	ТекстИтоговогоЗапроса = 
	";
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	втМакетМатрицы.Организация КАК Организация,
	|	втМакетМатрицы.ЭтапПроцесса КАК ЭтапПроцесса,
	|   втМакетМатрицы.ВидОтчета КАК ВидОтчета,	
	|	втДанныеМатрицы.ДокументБД КАК ДокументБД,
	|	втДанныеМатрицы.Аналитика1 КАК Аналитика1,
	|   втДанныеМатрицы.Аналитика2 КАК Аналитика2,
	|	втДанныеМатрицы.Аналитика3 КАК Аналитика3,
	|	втДанныеМатрицы.КоличествоАналитик КАК КоличествоАналитик,
	|   втДанныеМатрицы.Ссылка КАК Ссылка,
    |   ВЫБОР КОГДА втДанныеМатрицы.ДокументБД IS NULL Тогда ""Х"" ИНАЧЕ втДанныеМатрицы.Состояние КОНЕЦ КАК Состояние,
	|   втДанныеМатрицы.СостояниеЭтапа КАК СостояниеЭтапа
	|ИЗ
	|	втМакетМатрицы КАК втМакетМатрицы
	|ЛЕВОЕ СОЕДИНЕНИЕ втДанныеМатрицы КАК втДанныеМатрицы
	|       ПО  втМакетМатрицы.Организация = втДанныеМатрицы.Организация
	|		И втМакетМатрицы.ЭтапПроцесса = втДанныеМатрицы.ЭтапПроцесса
	|		И втМакетМатрицы.ВидОтчета = втДанныеМатрицы.ВидОтчета";

	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаПоВТ;
	ТекстЗапроса = ТекстЗапроса + Прав(ТекстЗапросаОбъединения,СтрДлина(ТекстЗапросаОбъединения)-16);
	ТекстЗапроса = ТекстЗапроса + ТекстИтоговогоЗапроса;
	
КонецПроцедуры

&НаСервере 
Процедура СформироватьТекстЗапросаПоВидамОтчетам()
	
	ТекстЗапроса=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыОтчетов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТабВидыОтчеты
	|ИЗ
	|	Справочник.ВидыОтчетов КАК ВидыОтчетов
	|ГДЕ
	|	ВидыОтчетов.ПометкаУдаления = ЛОЖЬ
	|	И ВидыОтчетов.ЭтоГруппа = ЛОЖЬ
	|	И ВидыОтчетов.Ссылка В ИЕРАРХИИ(&ВидОтчетаОтбор)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница
	|ПОМЕСТИТЬ ТабОрганизации
	|ИЗ
	|	Справочник.ВерсииРегламентовПодготовкиОтчетности.СтруктураГруппы КАК ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы
	|ГДЕ
	|	ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.Ссылка = &ВерсияОрганизационнойСтруктуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастраиваемыйОтчет.Ссылка КАК Ссылка,
	|	НастраиваемыйОтчет.ВидОтчета КАК ВидОтчета,
	|	ЕСТЬNULL(РегистрСостоянийОбъектов.СостояниеОбъекта, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.ПустаяСсылка)) КАК Состояние,
	|	НастраиваемыйОтчет.Организация КАК Организация,
	|	НастраиваемыйОтчет.ВидОтчета КАК ВидОтчета1,
	|	НастраиваемыйОтчет.Аналитика1 КАК Аналитика1,
	|	НастраиваемыйОтчет.Аналитика2 КАК Аналитика2,
	|	НастраиваемыйОтчет.Аналитика3 КАК Аналитика3
	|ПОМЕСТИТЬ ТабОтчеты
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(
	|				,
	|				Объект.ПериодОтчета = &ПериодСценария
	|					И Объект.Сценарий = &Сценарий
	|					И Объект ССЫЛКА Документ.НастраиваемыйОтчет) КАК РегистрСостоянийОбъектов
	|		ПО (НастраиваемыйОтчет.Ссылка = (ВЫРАЗИТЬ(РегистрСостоянийОбъектов.Объект КАК Документ.НастраиваемыйОтчет)))
	|ГДЕ
	|	НастраиваемыйОтчет.ПериодОтчета = &ПериодСценария
	|	И НастраиваемыйОтчет.Сценарий = &Сценарий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ДокументБД КАК ДокументБД,
	|	ТабВидыОтчеты.Ссылка КАК ВидОтчета,
	|	ТабВидыОтчеты.Ссылка КАК ЭтапПроцесса,
	|	ТабОтчеты.Состояние КАК Состояние,
	|	ТабОрганизации.ОрганизационнаяЕдиница КАК Организация,
	|	ТабОтчеты.Ссылка КАК Ссылка,
	|	NULL КАК Аналитика1,
	|	NULL КАК Аналитика2,
	|	NULL КАК Аналитика3
	|ИЗ
	|	ТабВидыОтчеты КАК ТабВидыОтчеты
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТабОрганизации КАК ТабОрганизации
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабОтчеты КАК ТабОтчеты
	|		ПО ТабВидыОтчеты.Ссылка = ТабОтчеты.ВидОтчета
	|			И (ТабОтчеты.Организация = ТабОрганизации.ОрганизационнаяЕдиница)";	 
		
КонецПроцедуры

&НаСервере
Процедура ОпределитьРабочийПроцесс()
	
	Если Не ЗначениеЗаполнено(Объект.ПериодСценария) Тогда
		РабочийПроцесс=Документы.УправлениеПериодомСценария.ПустаяСсылка();
        Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатусыПериодовСценариев.УправлениеПериодомСценария.Ссылка КАК УправлениеПериодомСценарияСсылка,
	|	СтатусыПериодовСценариев.УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры КАК УправлениеПериодомСценарияВерсияОрганизационнойСтруктуры,
	|	СтатусыПериодовСценариев.СтатусБлокировки КАК СтатусБлокировки,
	|	СтатусыПериодовСценариев.УправлениеПериодомСценария.ПериодЗакрыт КАК УправлениеПериодомСценарияПериодЗакрыт
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|ГДЕ
	|	СтатусыПериодовСценариев.Сценарии = &Сценарии
	|	И СтатусыПериодовСценариев.Периоды = &Периоды";

	Запрос.УстановитьПараметр("Сценарии",Объект.Сценарий);
	Запрос.УстановитьПараметр("Периоды",Объект.ПериодСценария);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	РабочийПроцесс=Документы.УправлениеПериодомСценария.ПустаяСсылка();
	
	Пока Выборка.Следующий() Цикл
		РабочийПроцесс=Выборка.УправлениеПериодомСценарияСсылка;	
		Объект.ВерсияРегламента = Выборка.УправлениеПериодомСценарияВерсияОрганизационнойСтруктуры;
		Элементы.ГруппаПериодЗаблокирован.Видимость = ?(Выборка.УправлениеПериодомСценарияПериодЗакрыт,Истина,Ложь);	
	КонецЦикла;
	
	СформироватьТекстЗапроса();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДокументы(СпОбластейРасшифровки, Режим, СтруктураПараметров = Неопределено)
	
	СпДокументов = Новый СписокЗначений;
	ТабДокументов = Новый ТаблицаЗначений;
    ТабДокументов.Колонки.Добавить("ЭтапПроцесса");
	ТабДокументов.Колонки.Добавить("Организация");
    ТабДокументов.Колонки.Добавить("ШаблонДокументаБД");
	ТабДокументов.Колонки.Добавить("ДокументБД");	
	ТабДокументов.Колонки.Добавить("Ссылка");
    ТабДокументов.Колонки.Добавить("ПорядковыйНомер");

	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровкиМатрицаОтчетов);
	Для Каждого Расшифровка из СпОбластейРасшифровки Цикл
		
		Если Расшифровка.Значение="" ИЛИ Расшифровка.Значение = Неопределено ИЛИ ТипЗнч(Расшифровка.Значение) = Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;		
		ЭлементыРасшифровки = ДанныеРасшифровки.Элементы.Получить(Расшифровка.Значение).ПолучитьПоля();
		Если ЭлементыРасшифровки.Количество() = 4 Тогда
			Документ = ЭлементыРасшифровки[0].Значение;	
			СпДокументов.Добавить(Документ);
			НовСтр = ТабДокументов.Добавить();
			НовСтр.Ссылка							=ЭлементыРасшифровки[0].Значение;
			НовСтр.ЭтапПроцесса						=ЭлементыРасшифровки[1].Значение;	
			НовСтр.Организация						=ЭлементыРасшифровки[2].Значение;	
			НовСтр.ШаблонДокументаБД				=ЭлементыРасшифровки[3].Значение;
			Если ТипЗнч(НовСтр.ШаблонДокументаБД) = Тип("СправочникСсылка.ВидыОтчетов") Тогда
				 НовСтр.ДокументБД = ДокументБДНстраиваемыйОтчет; 
			КонецЕсли		
		КонецЕсли; 	
	КонецЦикла;
	
	Если Режим = "ПоПравилуОбработки" тогда
		ЗаполнитьПоПравилуОбработки(ТабДокументов,Режим);
	ИначеЕсли Режим = "ИзменитьСостояние" тогда 		
		ИзменитьСостояниеДокументов(СпДокументов,СтруктураПараметров);
	КонецЕсли;
			
КонецПроцедуры	

&НаСервере 
Функция ПолучитьОрганизацииЭтапа(Расшифровка)

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");	
	Этап = Справочники.ЭтапыУниверсальныхПроцессов.ПустаяСсылка();
	Если ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровкиМатрицаОтчетов);
		Если ДанныеРасшифровки <> Неопределено Тогда
			ЭлементыРасшифровки = ДанныеРасшифровки.Элементы.Получить(Расшифровка).ПолучитьПоля();
			Если ЭлементыРасшифровки.Количество() > 0 Тогда
				Этап = ЭлементыРасшифровки[0].Значение;	
			Иначе	
				Возврат Неопределено;
			КонецЕсли;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		Этап = Расшифровка.Этап;
	КонецЕсли;
	
	Если НЕ Этап=Null тогда
		ТекущийЭтап = Этап;
		// Получим таблицу, содержащую колонку организаций выбранного этапа.
		ВыгрузкаСостояний = ОбработкаОбъект.СостоянияВыполненияПроцесса.Выгрузить();
		ВыгрузкаСостояний.Свернуть("Этап,Организация");
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Этап", Этап);
		НайденныеСтроки = ВыгрузкаСостояний.НайтиСтроки(СтруктураПоиска);
		ОрганизацииЭтапа = Новый ТаблицаЗначений;
		ОрганизацииЭтапа.Колонки.Добавить("Организация");
		Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
			НоваяСтрока = ОрганизацииЭтапа.Добавить();
			НоваяСтрока.Организация = ТекНайденныеСтроки.Организация;
		КонецЦикла;
		АдресТЗОрганизаций =  ПоместитьВоВременноеХранилище(ОрганизацииЭтапа,Новый УникальныйИдентификатор());
		Возврат АдресТЗОрганизаций;
	КонецЕсли; 
	
	Возврат Неопределено;
	   
КонецФункции

&НаСервере 
Функция ПолучитьОрганизацииЭтапаДиаграмма(ТекущийЭтап)

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");	
	
	ОрганизацииЭтапа = ОбработкаОбъект.СостоянияВыполненияПроцесса.Выгрузить(Новый Структура("Этап",ТекущийЭтап),"Организация");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОрганизацииЭтапа.Организация
	|ПОМЕСТИТЬ _ОрганизацииЭтапа
	|ИЗ
	|	&ОрганизацииЭтапа КАК ОрганизацииЭтапа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_ОрганизацииЭтапа.Организация
	|ИЗ
	|	_ОрганизацииЭтапа КАК _ОрганизацииЭтапа
	|ГДЕ
	|	_ОрганизацииЭтапа.Организация В(&ОрганизацииОтбор)";
	
	Запрос.УстановитьПараметр("ОрганизацииЭтапа",ОрганизацииЭтапа);
	Запрос.УстановитьПараметр("ОрганизацииОтбор",ТаблицаОрганизаций.Выгрузить().ВыгрузитьКолонку("Организация"));
	ОрганизацииЭтапа = Запрос.Выполнить().Выгрузить();
	
	АдресТЗОрганизаций =  ПоместитьВоВременноеХранилище(ОрганизацииЭтапа,Новый УникальныйИдентификатор());
	Возврат АдресТЗОрганизаций;
	
   
КонецФункции

&НаСервере
Процедура ЗаполнитьПоПравилуОбработки(ТабДокументов,Режим)
		
	Перем Уровни;	
	
	Если ЕстьШаблонПроцесса Тогда
		Этапы = ПолучитьТаблицуЭтапов(Уровни);	
		Для Каждого СтрТаб из  ТабДокументов Цикл		
			НПЭтапа = Этапы.Найти(СтрТаб.ЭтапПроцесса,"Этап"); 
			СтрТаб.ПорядковыйНомер = НПЭтапа.УровеньХ;	
		КонецЦикла;			
		ТабДокументов.Сортировать("ПорядковыйНомер,Ссылка");		
	КонецЕсли;	

	МассивСтруткурНастроек = Новый Массив();
	
	Для Каждого Стр из ТабДокументов Цикл 
		
		СтрукутраНастройки = Новый Структура;
		СтрукутраНастройки.Вставить("Организация",Стр.Организация);
		СтрукутраНастройки.Вставить("ПериодОтчета",Объект.ПериодСценария);
		СтрукутраНастройки.Вставить("ПериодОтчетаОкончание",Объект.ПериодСценарияОкончание);
		СтрукутраНастройки.Вставить("Сценарий",Объект.Сценарий);
		СтрукутраНастройки.Вставить("ОсновнаяВалюта",Неопределено);
		СтрукутраНастройки.Вставить("ШаблонДокументаБД",Стр.ШаблонДокументаБД);
		СтрукутраНастройки.Вставить("ДокументБД",Стр.ДокументБД);
		СтрукутраНастройки.Вставить("ДокументСсылка",Стр.Ссылка);
		СтрукутраНастройки.Вставить("ДокументОбъект",Неопределено);

		МассивСтруткурНастроек.Добавить(СтрукутраНастройки);	
				
	КонецЦикла;	
	
	УправлениеРабочимиПроцессамиУХ.ОбработатьДокументыПоРегламенту(МассивСтруткурНастроек,Объект.ВерсияРегламента);	
	 
 КонецПроцедуры	

&НаСервере
Процедура ИзменитьСостояниеДокументов(СпДокументов,СтруктураПараметров)

	Если Не СтруктураПараметров.Свойство("Состояние") ИЛИ СтруктураПараметров.Состояние = Перечисления.СостоянияОтчетов.ПустаяСсылка() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастраиваемыйОтчет.Ссылка КАК Экземпляр,
	|	ЕСТЬNULL(СогласованиеОтчетов.ДокументСогласования, ЗНАЧЕНИЕ(Документ.СогласованиеДокументов.ПустаяСсылка)) КАК ДокументСогласования
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СогласованиеОтчетов КАК СогласованиеОтчетов
	|		ПО НастраиваемыйОтчет.Ссылка = СогласованиеОтчетов.ДокументСогласования.ЭкземплярОтчета	
	|			И (&ВыбиратьИсторию)
	|ГДЕ
	|	НастраиваемыйОтчет.Ссылка В (&СписокЭкземпляров)
	|ИТОГИ ПО
	|	Экземпляр";
	Запрос.УстановитьПараметр("ВыбиратьИсторию", СтруктураПараметров.Состояние=Перечисления.СостоянияОтчетов.Возвращен);
	Запрос.УстановитьПараметр("СписокЭкземпляров", СпДокументов);
	ВыборкаПоДок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоДок.Следующий() Цикл
		
		ОбъектДок = ВыборкаПоДок.Экземпляр.ПолучитьОбъект();
		ОбъектДок.ОбменДанными.Загрузка = Истина;		
		МодульСогласованияДокументовУХ.ИзменитьСостояниеСогласованияОбъекта(ОбъектДок, СтруктураПараметров.Состояние);
		ОбъектДок.Записать();
		
	КонецЦикла;	

КонецПроцедуры // ИзменитьСостояниеДокументов(СпДокументов,СтруктураПараметров)

&НаСервере
Процедура СгенерироватьОбъекты(Верх,Лево,Низ,Право)
	
	ТабВыделения_=РеквизитФормыВЗначение("ТабВыделения");
	ТабВыделения_.Очистить();
	Для Кол = Лево По Право Цикл
		Для Стр = Верх По Низ Цикл	
			Область = РезультатМатрицаОтчетов.Область(Стр,Кол);
			Если Область.Расшифровка = Неопределено Тогда
				 Продолжить;
			КонецЕсли;	
			СтруктураРодителей=СтруктураРасшифровки(Область.Расшифровка);
			НовЭл=ТабВыделения_.Добавить();
			Для Каждого ЭлСтруктуры Из СтруктураРодителей Цикл
				Если ТабВыделения_.Колонки.Найти(ЭлСтруктуры.Ключ)<>Неопределено и ЭлСтруктуры.Значение<>Неопределено Тогда
					НовЭл[ЭлСтруктуры.Ключ]=ЭлСтруктуры.Значение;
				КонецЕсли;	
			КонецЦикла;			
		КонецЦикла;			
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТабВыделения_,"ТабВыделения");	
			
	Если ЕстьШаблонПроцесса Тогда	
		Для Каждого стрО из ТабВыделения_ Цикл		
			СтруктураОтбораПоЭтапам = Новый Структура("Этап,Организация",стрО.ЭтапПроцесса,стрО.Организация);
			Если Объект.СостоянияВыполненияПроцесса.НайтиСтроки(СтруктураОтбораПоЭтапам).Количество()>0 Тогда
				СоздатьОбъект(стрО);
			КонецЕсли;
		КонецЦикла;		
	Иначе
		
		Для Каждого стрО из ТабВыделения_ Цикл		
			СтруктураОтбораПоЭтапам = Новый Структура("Этап,Организация",стрО.ЭтапПроцесса,стрО.Организация);
			СоздатьОбъект(стрО);			
		КонецЦикла;		
	КонецЕсли;	
	
	
КонецПроцедуры 

&НаСервере
Процедура СоздатьОбъект(СтруктураОбъекта)
	
	НовыйОбъект=Документы[СтруктураОбъекта.ДокументБД.Наименование].СоздатьДокумент();
	
	ДанныеДляЗаполнения = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(СтруктураОбъекта.ВидОтчета
	, 
	, СтруктураОбъекта.Организация
	, 
	, Объект.ВерсияРегламента);	
	
	Если ДанныеДляЗаполнения.Количество()=0 Тогда												
		Возврат
	КонецЕсли;												
	
	ЗаполнитьЗначенияСвойств(НовыйОбъект, ДанныеДляЗаполнения);
	
	НовыйОбъект.УстановитьНовыйНомер();
	Если  ДанныеДляЗаполнения.Свойство("БланкОтчета") И Строка(ДанныеДляЗаполнения.БланкОтчета)<>"" Тогда
		НовыйОбъект.ШаблонОтчета = ДанныеДляЗаполнения.БланкОтчета;
	КонецЕсли;
	
	НовыйОбъект.Дата           = ТекущаяДата();
	Если СтруктураОбъекта.ДокументБД.ИспользоватьШаблоны Тогда
		НовыйОбъект[СтруктураОбъекта.ДокументБД.РеквизитШаблонаДокумета]=СтруктураОбъекта.ВидОтчета;
	КонецЕсли;	  
	
	Если ДанныеДляЗаполнения.Свойство("СпособФормированияОтчета") И ДанныеДляЗаполнения.СпособФормированияОтчета =Перечисления.СпособыФормированияОтчетов.Импорт  Тогда
		Если ДанныеДляЗаполнения.Свойство("ВИБ") Тогда
			НовыйОбъект.ИспользуемаяИБ =  ДанныеДляЗаполнения.ВИБ;
		КонецЕсли;	  
	КонецЕсли;
	
	НовыйОбъект.Организация    = СтруктураОбъекта.Организация;
	НовыйОбъект.Сценарий       = Объект.Сценарий;
	НовыйОбъект.ПериодОтчета   =  Объект.ПериодСценария;
	Если ТипЗнч(НовыйОбъект) = Тип("ДокументОбъект.НастраиваемыйОтчет") Тогда
		НовыйУправлениеПериодом = УправлениеОтчетамиУХ.НайтиДокументУправлениеОтчетнымПериодом(НовыйОбъект.Сценарий, НовыйОбъект.ПериодОтчета);
		НовыйОбъект.ПериодОкончания		 = Объект.ПериодСценарияОкончание;
		НовыйОбъект.УправлениеПериодом	 = НовыйУправлениеПериодом;
	Иначе
		// Не заполняем для прочих объектов.
	КонецЕсли;
	
	ТаблицаВалютОтчетности 	= УправлениеОтчетамиУХ.ПолучитьТаблицуВалютДляВерсииОрганизационнойСтруктуры(Объект.ВерсияРегламента);
	СтрокиВалюты 					= ТаблицаВалютОтчетности.НайтиСтроки(Новый Структура("Организация",СтруктураОбъекта.Организация));
	
	Если СтрокиВалюты.Количество()=0 Тогда
		ТекстОшибки="Версия регламента "+Объект.ВерсияРегламента+" не содержит настроек для заполнения основной валюты документа "+СтруктураОбъекта.ДокументБД+" по шаблону "+СтруктураОбъекта.ВидОтчета+".
		|Документ не создан! ";
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки,,,СтатусСообщения.Внимание);	
		Возврат;  
	КонецЕсли;	
	
	
	НовыйОбъект.ОсновнаяВалюта 	= СтрокиВалюты[0].ОсновнаяВалюта;
	
	Если ОбщегоНазначенияУХ.ЕстьТабличнаяЧастьОбъекта("ДополнительныеВалюты",НовыйОбъект) Тогда	  
		НовыйОбъект.ДополнительныеВалюты.Очистить();
		
		Для Каждого ЭлементВалюта Из СтрокиВалюты Цикл	  			  
			Для Каждого Элемент Из ЭлементВалюта.ДополнительныеВалюты Цикл		  
				НовыйОбъект.ДополнительныеВалюты.Добавить().Валюта = Элемент.Значение;		  
			КонецЦикла;	  
		КонецЦикла;	  
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовыйОбъект.ОсновнаяВалюта) Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке("Не удалось определить валюту документа! "+НовыйОбъект,,,СтатусСообщения.Внимание);
	КонецЕсли;
	
	Если СтруктураОбъекта.ДокументБД.Согласуется Тогда  
		МодульСогласованияДокументовУХ.ИзменитьСостояниеСогласованияОбъекта(НовыйОбъект, Перечисления.СостоянияОтчетов.Запланирован);		  
	КонецЕсли;												
	
	Попытка
		НовыйОбъект.Записать();
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке("Не удалось записать документ "+НовыйОбъект,,,СтатусСообщения.Внимание);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДанныеСервер(Верх,Лево,Низ,Право)
		
	ТабВыделения_=РеквизитФормыВЗначение("ТабВыделения");
	ТабВыделения_.Очистить();
	Для Кол = Лево По Право Цикл
		Для Стр = Верх По Низ Цикл	
			Область = РезультатМатрицаОтчетов.Область(Стр,Кол);
			СтруктураРодителей=СтруктураРасшифровки(Область.Расшифровка);
			НовЭл=ТабВыделения_.Добавить();
			Для Каждого ЭлСтруктуры Из СтруктураРодителей Цикл
				Если ТабВыделения_.Колонки.Найти(ЭлСтруктуры.Ключ)<>Неопределено и ЭлСтруктуры.Значение<>Неопределено Тогда
					НовЭл[ЭлСтруктуры.Ключ]=ЭлСтруктуры.Значение;
				КонецЕсли;	
			КонецЦикла;		
			
		КонецЦикла;			
	КонецЦикла;
	ЗначениеВРеквизитФормы(ТабВыделения_,"ТабВыделения");	
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьНастройкиКомпоновщикаСервер(Компоновщик)

	Возврат Компоновщик.ПолучитьНастройки();	

КонецФункции // ПолучитьНастройкиКомпоновщикаСервер()

&НаСервере
Процедура ОткрытьЭтапСервер(ОрганизацииАдрес,ОбрабатыватьДокументы) 
	
	МассивОрганизаций = ПолучитьИЗВременногоХранилища(ОрганизацииАдрес).ВыгрузитьКолонку("Организация");
	
	МодульУправленияПроцессамиУХ.УстановитьСостояниеЭтапаПроцессаОтчетности(
	Объект.СостоянияВыполненияПроцесса
    ,мПредшественникиСтрок	
	,мПоследователиСтрок
	,Объект.ВерсияРегламента
	,Объект.ПериодСценария
	,Объект.Сценарий
	,ТекущийЭтап
	,МассивОрганизаций
	,"Выполняется"
	,
	,
	,ОбрабатыватьДокументы
	,ЭкземплярПроцесса);
	
	
КонецПроцедуры	

&НаСервере
Процедура ЗакрытьЭтапСервер(ОрганизацииАдрес,ОбрабатыватьДокументы) 
	
	МассивОрганизаций = ПолучитьИЗВременногоХранилища(ОрганизацииАдрес).ВыгрузитьКолонку("Организация");
	
	МодульУправленияПроцессамиУХ.УстановитьСостояниеЭтапаПроцессаОтчетности(
	Объект.СостоянияВыполненияПроцесса
    ,мПредшественникиСтрок	
	,мПоследователиСтрок
	,Объект.ВерсияРегламента
	,Объект.ПериодСценария
	,Объект.Сценарий
	,ТекущийЭтап
	,МассивОрганизаций
	,"Утвержден"
	,
	,
	,ОбрабатыватьДокументы
	,ЭкземплярПроцесса);
   	
КонецПроцедуры

Функция ПолучитьПоляРасшифровки(Расшифровка)
		
	Если ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровкиМатрицаОтчетов);	
		ЭлементыРасшифровки = ДанныеРасшифровки.Элементы.Получить(Расшифровка).ПолучитьПоля();
		Возврат ЭлементыРасшифровки[0].Значение
	КонецЕсли;
	
	Если  ТипЗнч(Расшифровка) = Тип("Структура") И Расшифровка.Свойство("Этап")  Тогда
		Возврат Расшифровка.Этап;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	
	
&НаКлиенте
Процедура ОтображатьЗаголовки(Команда)
	
	ОтображатьЗаголовки = НЕ ОтображатьЗаголовки;
	УстановитьОтображениеЗаголовков();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДиаграмму()
	УправлениеРабочимиПроцессамиУХ.ИнициализироватьПроцесс(Объект.ПериодСценария, Объект.Сценарий, ТекущаяДата(), Объект.СостоянияВыполненияПроцесса, мПоследователиСтрок, мПредшественникиСтрок);					
	
	КонсольУправленияПроцессом = Обработки.КонсольУправленияПроцессом.Создать();
	КонсольУправленияПроцессом.ШаблонПроцесса = ТекущийШаблонПроцесса;
	ПроцессЗапущен = МодульУправленияПроцессамиУХ.ПроверитьПроцессИнициализирован(РабочийПроцесс,КонсольУправленияПроцессом.ЭкземплярПроцесса,,ТекущийШаблонПроцесса);
	ЭкземплярПроцесса =  КонсольУправленияПроцессом.ЭкземплярПроцесса;
		
	ЭтапыПроцесса =  КонсольУправленияПроцессом.ПолучитьТаблицуЭтапов();
		
	Макет = КонсольУправленияПроцессом.ПолучитьМакет("Макет");

	МакетЗаголовок = Макет.ПолучитьОбласть("ЗаголовокПроцессаОтчетности");
	НовыйПериод = Строка(Объект.ПериодСценария);
	Если (ЗначениеЗаполнено(Объект.ПериодСценарияОкончание)) И (Объект.ПериодСценария <> Объект.ПериодСценарияОкончание) Тогда
		НовыйПериод = Строка(Объект.ПериодСценария);
		НовыйПериод = НовыйПериод + " - ";
		НовыйПериод = НовыйПериод + Строка(Объект.ПериодСценарияОкончание);
	Иначе
		НовыйПериод = Строка(Объект.ПериодСценария);
	КонецЕсли;	
	МакетЗаголовок.Параметры.Регламент				 = КонсольУправленияПроцессом.ШаблонПроцесса;
	МакетЗаголовок.Параметры.Сценарий				 = Объект.Сценарий;
	МакетЗаголовок.Параметры.ПериодОтчета			 = НовыйПериод;
	МакетЗаголовок.Параметры.ДатаЗПлан				 = КонсольУправленияПроцессом.ПланируемаяДатаЗавершения;
	НовоеОтклонение = КонсольУправленияПроцессом.НакопленноеОтклонение;
	Если НовоеОтклонение >= 0 Тогда
		МакетЗаголовок.Параметры.ТекстОтклонение		 = НСтр("ru = 'Накопленное отставание от плана (дн.)'");
		МакетЗаголовок.Параметры.НакопленноеОтклоннеие	 = НовоеОтклонение;
	Иначе
		МакетЗаголовок.Параметры.ТекстОтклонение		 = НСтр("ru = 'Накопленное опережение плана (дн.)'");
		МакетЗаголовок.Параметры.НакопленноеОтклоннеие	 = -НовоеОтклонение;
	КонецЕсли;
	
	Диаграмма.Очистить();
	Диаграмма.Вывести(МакетЗаголовок);
	Диаграмма.Вывести(КонсольУправленияПроцессом.СформироватьОтчет());
	
КонецПроцедуры

&НаСервере
Функция ОпределитьНовуюПозициюВУровнеY(СтрокаЭтапа, ЗанятыеУровниПоУ, Предпочтение = Неопределено)
	
	Если Не Предпочтение = Неопределено и ЗанятыеУровниПоУ[Предпочтение] = Неопределено Тогда
		Результат = Предпочтение;
	Иначе
		Результат = 0;
		Пока Не ЗанятыеУровниПоУ[Результат] = Неопределено Цикл
			Результат = Результат + 1;
		КонецЦикла;	
	КонецЕсли;
	ЗанятыеУровниПоУ.Вставить(Результат, Истина);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуЭтапов(Уровни)
	
	КонсольУправленияПроцессом = Обработки.КонсольУправленияПроцессом.Создать();
	КонсольУправленияПроцессом.ШаблонПроцесса = ТекущийШаблонПроцесса;
	Этапы = КонсольУправленияПроцессом.ПолучитьТаблицуЭтапов();
		
	Возврат Этапы;
	
КонецФункции

&НаКлиенте
Функция ВернутьВыбранныйЭтап(Организация = Неопределено)
	
	Если Элементы.Страницы.ТекущаяСтраница.Имя = "МатрицаОтчетов" Тогда
		Если ТипЗнч(РезультатМатрицаОтчетов.ТекущаяОбласть.Расшифровка) = Тип("Структура") Тогда 
			ТекущийЭтап = РезультатМатрицаОтчетов.ТекущаяОбласть.Расшифровка.Этап;
			Если РезультатМатрицаОтчетов.ТекущаяОбласть.Расшифровка.Свойство("Организация") Тогда
				Организация = РезультатМатрицаОтчетов.ТекущаяОбласть.Расшифровка.Организация;
			КонецЕсли;	
			Возврат ТекущийЭтап;	
		Иначе	
			ПоказатьПредупреждение(, "Нужно выбрать один этап процесса для обработки.");
			Возврат Неопределено;
		КонецЕсли;	
	Иначе		
		ВыделенныеОбласти = Элементы.Диаграмма.ПолучитьВыделенныеОбласти();
		Если ВыделенныеОбласти.Количество() <> 1 Тогда
			ПоказатьПредупреждение(, "Нужно выбрать один этап процесса для обработки.");
			Возврат Неопределено;
		Иначе
			ТекущийЭтап = ВыделенныеОбласти[0].Расшифровка;
			Возврат ВыделенныеОбласти[0].Расшифровка;	
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СоздатьОбъектыТекущегоЭтапа_Сервер(ЭтапПроцесса)
	ТаблицаФормируемыхДокументов = МодульУправленияПроцессамиУХ.ПолучитьТаблицуФормируемыхДокументовПоЭтапу(ЭтапПроцесса, Объект.ВерсияРегламента);
	ТабВыделения_ = РеквизитФормыВЗначение("ТабВыделения");
	ТабВыделения_.Очистить();
	Для Каждого ТекТаблицаФормируемыхДокументов Из ТаблицаФормируемыхДокументов Цикл
		НовЭл = ТабВыделения_.Добавить();
		НовЭл.ВидОтчета		 = ТекТаблицаФормируемыхДокументов.ШаблонДокумента;
		НовЭл.ЭтапПроцесса	 = ЭтапПроцесса;
		НовЭл.ДокументБД	 = ТекТаблицаФормируемыхДокументов.ДокументБД;
		НовЭл.Организация	 = ТекТаблицаФормируемыхДокументов.ОрганизационнаяЕдиница;	 
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТабВыделения_,"ТабВыделения");	
	
	Для Каждого стрО из ТабВыделения_ Цикл		
		СоздатьОбъект(стрО);
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроцессДоТекущегоЭтапа_Сервер(ЭтапПроцесса)
	УправлениеРабочимиПроцессамиУХ.ИнициализироватьПроцесс(Объект.ПериодСценария, Объект.Сценарий, ТекущаяДатаСеанса(), Объект.СостоянияВыполненияПроцесса, мПоследователиСтрок, мПредшественникиСтрок);
	УправлениеПроцессамиСогласованияУХ.ВыполнитьПроцессДоЭтапа(ЭтапПроцесса, Объект.ВерсияРегламента, Объект.СостоянияВыполненияПроцесса, Объект.ПериодСценария, Объект.Сценарий, ЭкземплярПроцесса, мПредшественникиСтрок, мПоследователиСтрок);
КонецПроцедуры

&НаСервере
Функция ВернутьОсновныеРеквизитыОбъекта()
	
	Возврат Новый ФиксированнаяСтруктура("ПериодСценария, Сценарий, ШаблонПроцесса", Объект.ПериодСценария, Объект.Сценарий, Объект.ВерсияРегламента.ШаблонПроцесса);
	
КонецФункции

&НаСервере
Процедура СформироватьПробнуюОтчетность_Сервер(ЭтапПроцесса, Организация = Неопределено)
	УправлениеРабочимиПроцессамиУХ.ИнициализироватьПроцесс(Объект.ПериодСценария, Объект.Сценарий, ТекущаяДатаСеанса(), Объект.СостоянияВыполненияПроцесса, мПоследователиСтрок, мПредшественникиСтрок);
	СтруктураПараметров = УправлениеПроцессамиСогласованияУХ.СформироватьСтруктуруПараметровПроцессаПодготовки();
	СтруктураПараметров.Вставить("ВерсияРегламента", Объект.ВерсияРегламента);
	СтруктураПараметров.Вставить("ПериодОтчета", Объект.ПериодСценария);
	СтруктураПараметров.Вставить("Сценарий", Объект.Сценарий);
	СтруктураПараметров.Вставить("ЭкземплярПроцесса", Документы.ЭкземплярПроцесса.ПустаяСсылка());
	УправлениеПроцессамиСогласованияУХ.СформироватьПробнуюОтчетностьДоЭтапа(ЭтапПроцесса, Объект.СостоянияВыполненияПроцесса, мПоследователиСтрок, СтруктураПараметров);
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостью()
	// Доступность команд установки значений в матрице.
	ДоступныКомандыИзмСост = РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Администрирование");
	Элементы.РезультатМатрицаОтчетовКонтекстноеМенюУстановитьСостояниеЗапланирован.Видимость = ДоступныКомандыИзмСост;
	Элементы.РезультатМатрицаОтчетовКонтекстноеМенюУстановитьСостояниеВозвращен.Видимость    = ДоступныКомандыИзмСост;
	Элементы.РезультатМатрицаОтчетовКонтекстноеМенюУстановитьСостояниеУтвержден.Видимость    = ДоступныКомандыИзмСост;
	// Отображение закладок.
	Если СокрЛП(РежимОткрытия) = "МатрицаОтчетов" Тогда	
		ВидимостьДиаграммы	 = Ложь;
	ИначеЕсли СокрЛП(РежимОткрытия) = "ДиаграммаПроцессов" Тогда	
		ВидимостьДиаграммы	 = Истина;
	Иначе	
		ВидимостьДиаграммы	 = Ложь;
	КонецЕсли;
	Элементы.ДиаграммаПроцесса.Видимость	 = ВидимостьДиаграммы;
	Элементы.МатрицаОтчетов.Видимость	     = НЕ ВидимостьДиаграммы;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУправлениеПроцессомПодготовкиОтчетности(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВерсияРегламента", Объект.ВерсияРегламента);
	ПараметрыФормы.Вставить("ПериодОтчета", Объект.ПериодСценария);
	ПараметрыФормы.Вставить("Сценарий", Объект.Сценарий);
	ПараметрыФормы.Вставить("СпособОтображенияДереваЭтапов", "ПоЭтапам");
	ВыбранныйЭтап = ВернутьВыбранныйЭтап();
	Если ЗначениеЗаполнено(ВыбранныйЭтап) Тогда
		ПараметрыФормы.Вставить("ЭтапПроцесса", ВыбранныйЭтап);
	Иначе
		// Не заполняем параметр Этап.
	КонецЕсли;
	Оповестить("ОбновитьУправлениеПроцессомПодготовкиОтчетности", ПараметрыФормы, ЭтаФорма);
	ОткрытьФорму("Обработка.УправлениеПроцессомПодготовкиОтчетности.Форма.Форма", ПараметрыФормы, , Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроцесс(Команда)
	// Инициализация.
	ТекСценарий = Объект.Сценарий;
	ТекПериод = Объект.ПериодСценария;
	// Поиск документа УОП.
	ДокументУправлениеПериодом = УправлениеОтчетамиУХ.НайтиДокументУправлениеОтчетнымПериодом(ТекСценарий, ТекПериод);
	Если ЗначениеЗаполнено(ДокументУправлениеПериодом) Тогда
		// Попытка запуска процесса.
		РезультатЗапуска = ЗапуститьПроцесс_Сервер(ДокументУправлениеПериодом);
		// Обработка результата запуска процесса.
		Если РезультатЗапуска Тогда
			КартинкаОповещения = БиблиотекаКартинок.ЭтапыПроцессов_32;
			ТекстОповещения = НСтр("ru = 'Процесс запущен'");
			ПояснениеОповещения = НСтр("ru = 'Процесс по сценарию %Сценарий% и периоду %Период% запущен'");
			ПояснениеОповещения = СтрЗаменить(ПояснениеОповещения, "%Сценарий%", Строка(ТекСценарий));
			ПояснениеОповещения = СтрЗаменить(ПояснениеОповещения, "%Период%", Строка(ТекПериод));
			ПоказатьОповещениеПользователя(ТекстОповещения, , ПояснениеОповещения, КартинкаОповещения);
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось запустить процесс'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить документ Управление отчетным периодом по сценарию %Сценарий% в периоде %Период%. Запуск процесса отменён.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сценарий%", Строка(ТекСценарий));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%", Строка(ТекПериод));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
	// Обновим отображение на форме.
	ВывестиДиаграмму();
КонецПроцедуры

&НаКлиенте
Процедура ОстановитьПроцесс(Команда)
	// Инициализация.
	ТекСценарий = Объект.Сценарий;
	ТекПериод = Объект.ПериодСценария;
	Если ЗначениеЗаполнено(ЭкземплярПроцесса) Тогда
		// Попытаемся остановить текущий процесс.
		РезультатОстановки = Истина;
		Попытка
			РезультатОстановки = МодульУправленияПроцессамиУХ.УправлениеПериодомОстановитьПроцесс(ЭкземплярПроцесса);
		Исключение
			ТекстСообщения = НСтр("ru = 'При остановке процесса возникли ошибки: %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатОстановки = Ложь;
		КонецПопытки;
		// Обработаем результат остановки.
		Если РезультатОстановки Тогда
			КартинкаОповещения = БиблиотекаКартинок.ЭтапыПроцессов_32;
			ТекстОповещения = НСтр("ru = 'Процесс остановлен'");
			ПояснениеОповещения = НСтр("ru = 'Процесс по сценарию %Сценарий% и периоду %Период% остановлен'");
			ПояснениеОповещения = СтрЗаменить(ПояснениеОповещения, "%Сценарий%", Строка(ТекСценарий));
			ПояснениеОповещения = СтрЗаменить(ПояснениеОповещения, "%Период%", Строка(ТекПериод));
			ПоказатьОповещениеПользователя(ТекстОповещения, , ПояснениеОповещения, КартинкаОповещения);
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось остановить процесс'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Экземпляр процесса не найден. Остановка процесса отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
	// Обновим отображение на форме.
	ВывестиДиаграмму();
КонецПроцедуры

&НаСервере
Процедура ПрочитатьОтборы()
	
	ЕстьДопОтбор = Ложь;
	
	Для Каждого Стр Из КомпоновщикОтборыАналитик.Настройки.Отбор.Элементы Цикл	
		Если Стр.Использование Тогда	
			ЕстьДопОтбор = Истина;				
			Прервать;
		КонецЕсли;			
	КонецЦикла;	
		
	Если ЕстьДопОтбор Тогда
		Элементы.ПоказатьНастройки.ЦветФона = ОбщегоНазначенияВызовСервера.ЦветСтиля("ВыборСтандартногоПериодаФонКнопки");
		Элементы.ПоказатьНастройки.Картинка = БиблиотекаКартинок.НастроитьСписок;	
	Иначе	
		Элементы.ПоказатьНастройки.ЦветФона = ОбщегоНазначенияВызовСервера.ЦветСтиля("ЦветФонаФормы");
		Элементы.ПоказатьНастройки.Картинка = БиблиотекаКартинок.Отбор;
	КонецЕсли;	
		
КонецПроцедуры	

&НаСервере
Процедура ОпределитьДоступныеПериоды()
	
	  Запрос = Новый Запрос;
	  Запрос.Текст = "ВЫБРАТЬ
	  |	СтатусыПериодовСценариев.Периоды КАК Периоды
	  |ИЗ
	  |	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	  |ГДЕ
	  |	СтатусыПериодовСценариев.Сценарии = &Сценарии";
	  
	  Запрос.УстановитьПараметр("Сценарии",Объект.Сценарий);
	  
	  Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Периоды");
	  МассивЗнченийПараметров  = Новый ФиксированныйМассив(Результат);
	    
	  НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", МассивЗнченийПараметров);
	  НовыйМассив = Новый Массив();
	  НовыйМассив.Добавить(НовыйПараметр);
	  НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	  ЭтаФорма.Элементы.ПериодСценария.ПараметрыВыбора = НовыеПараметры;	

	  УстановитьСостояние("Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.");
	  
КонецПроцедуры	
 
Процедура УстановитьСостояние(ТекстСостояния) 	
	
	ОтображениеСостояния = Элементы.РезультатМатрицаОтчетов.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = ТекстСостояния;
	
	Элементы.РезультатМатрицаОтчетов.Доступность = Ложь;
	
	Элементы.КонтекстноеМенюГруппаУниверсальныеКоманды.Доступность = Ложь;
	Элементы.КонтекстноеМенюГруппаДействия.Доступность = Ложь;
	Элементы.КонтекстноеМенюГруппаСтатусы.Доступность =Ложь;
	Элементы.КонтекстноеМенюУправлениеПроцессом.Доступность = Ложь;
		
КонецПроцедуры



Процедура СброситьСостояниеНеИспользовать()
	
	ОтображениеСостояния = Элементы.РезультатМатрицаОтчетов.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Ложь;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = "";
	
	Элементы.РезультатМатрицаОтчетов.Доступность = Истина;
	
	Элементы.КонтекстноеМенюГруппаУниверсальныеКоманды.Доступность = Истина;
	Элементы.КонтекстноеМенюГруппаДействия.Доступность = Истина;
	Элементы.КонтекстноеМенюГруппаСтатусы.Доступность =Истина;
	Элементы.КонтекстноеМенюУправлениеПроцессом.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБыстрыйОтбор(Команда)
	
	МассивОрганизаций = Новый Массив;
	Для ИндКол = Элементы.РезультатМатрицаОтчетов.ТекущаяОбласть.Лево  По Элементы.РезультатМатрицаОтчетов.ТекущаяОбласть.Право Цикл
		Если ТипЗнч(РезультатМатрицаОтчетов.Область(1,ИндКол,1,ИндКол).Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
			МассивОрганизаций.Добавить(РезультатМатрицаОтчетов.Область(1,ИндКол,1,ИндКол).Расшифровка);
		КонецЕсли;
	КонецЦикла;	
	
	УстановитьОтборПоОрганизациям(МассивОрганизаций);
	
КонецПроцедуры

Процедура УстановитьОтборПоОрганизациям(рМассивОрганизаций)
	
	МассивОрганизаций = Новый Массив;
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровкиМатрицаОтчетов);

	Для Каждого Расшифровка Из рМассивОрганизаций Цикл                                                          		
		тОрганзация =  ДанныеРасшифровки.Элементы.Получить(Расшифровка).ПолучитьПоля()[0].Значение;	
		МассивОрганизаций.Добавить(тОрганзация);
	КонецЦикла;	
	
	Для Каждого ЭлОтбора Из КомпоновщикОтборыАналитик.Настройки.Отбор.Элементы Цикл
		Если ЭлОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
			 ЭлОтбора.Использование = Истина;
			 ЭлОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			 ЭлОтбора.ПравоеЗначение = МассивОрганизаций;
		 КонецЕсли;	
		
	КонецЦикла;
	
	СформироватьМатрицуОтчетов(РезультатМатрицаОтчетов);
	
КонецПроцедуры	

&НаКлиенте
Процедура РабочийПроцессПриИзменении(Элемент)
	
	УстановитьНастройкиПоУОП();
	
КонецПроцедуры

Процедура УстановитьНастройкиПоУОП()
	
	Если ЗначениеЗаполнено(РабочийПроцесс) Тогда
		
		Объект.ПериодСценария 			=  РабочийПроцесс.ПериодСценария;
		Объект.ПериодСценарияОкончание 	=  РабочийПроцесс.ПериодСценарияОкончание;
		Объект.Сценарий 				=  РабочийПроцесс.Сценарий;
		Объект.ВерсияРегламента 		=  РабочийПроцесс.ВерсияОрганизационнойСтруктуры;
        Элементы.ГруппаПериодЗаблокирован.Видимость = ?(РабочийПроцесс.ПериодЗакрыт,Истина,Ложь);	
		СформироватьТекстЗапроса();

	КонецЕсли;	
	
КонецПроцедуры	



#КонецОбласти
