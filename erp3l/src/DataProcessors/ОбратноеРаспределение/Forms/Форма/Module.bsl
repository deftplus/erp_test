
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЭтоАдресВременногоХранилища(Параметры.ТаблицаЗначенийПоказателей) Тогда
		Объект.ТаблицаЗначенийПоказателей.Загрузить(ПолучитьИзВременногоХранилища(Параметры.ТаблицаЗначенийПоказателей));
	Иначе
		ВызватьИсключение НСтр("ru = 'Обработка не предназначена для непосредственного использования.'");
	КонецЕсли;
		
	Если ЭтоАдресВременногоХранилища(Параметры.ТаблицаЗначенийАналитик) Тогда
		Объект.ТаблицаЗначенийАналитик.Загрузить(ПолучитьИзВременногоХранилища(Параметры.ТаблицаЗначенийАналитик));
	КонецЕсли;
	Если ЭтоАдресВременногоХранилища(Параметры.ТаблицаРаспределенияКорректировки) Тогда
		Объект.ТаблицаРаспределенияКорректировки.Загрузить(ПолучитьИзВременногоХранилища(Параметры.ТаблицаРаспределенияКорректировки));
	КонецЕсли;
	Объект.СпособРаспределения = Параметры.СпособРаспределения;
	Объект.РаспределениеИтоговыхЗначений = Параметры.РаспределениеИтоговыхЗначений;
	
	Объект.ВидОтчета = Параметры.ВидОтчета;
	Объект.Сценарий = Параметры.Сценарий;
    Объект.Организация = Параметры.Организация;
	Объект.ПравилоОбработки = Параметры.ПравилоОбработки;
    Объект.ОсновнаяВалюта =  Параметры.ОсновнаяВалюта;
    Объект.ПериодОтчета =  Параметры.ПериодОтчета;
	//Объект.ЭкземплярОтчета =  Параметры.ЭкземплярОтчета;

	
	Если Объект.СпособРаспределения = Перечисления.СпособыОбратногоРаспределения.ПоОрганизациямПериметра Тогда
		Элементы.ГруппаПериоды.Видимость = Ложь;
		РабочаяТаблица ="ОргРаспределениеКорректировки";
	Иначе
		Элементы.ГруппаОрганизации.Видимость = Ложь;
		РабочаяТаблица ="ПериодРаспределениеКорректировки";
	КонецЕсли;
	
	Для каждого Стр из Объект.ТаблицаЗначенийПоказателей Цикл 
		Стр.СпособРаспределения = Перечисления.СпособыРаспределенияКорректировок.ПоПрофилюРаспределения;
	КонецЦикла;
		
	МетодКонсолидацииПолная=Перечисления.МетодыКонсолидации.Полная;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРавномерно(Команда)
	
	МассивКоэффСумм=РаспределитьКорректировку(Элементы.ТаблицаЗначенийПоказателей.ТекущиеДанные.АбсКоррекция,"ОргРаспределениеКорректировки");
	МассивКоэффПроц=РаспределитьКорректировку(100,"ОргРаспределениеКорректировки");
	
	Если МассивКоэффСумм=Неопределено Тогда
		Сообщить("не удалось выполнить распределение.");
		Возврат;
	КонецЕсли;
	
	Для Инд=0 по ОргРаспределениеКорректировки.Количество()-1 Цикл
		
		ТекДанные=ОргРаспределениеКорректировки[Инд];
		
		Текданные.АбсКоррекция=МассивКоэффСумм[Инд];
		ТекДанные.ДоляКорректировки=МассивКоэффПроц[Инд];
		
		Текданные.АбсКоррекцияДоч=ТекДанные.АбсКоррекция*?(ТекДанные.МетодКонсолидации=ПредопределенноеЗначение("Перечисление.МетодыКонсолидации.Полная"),1,?(ТекДанные.Доля=0,0,100/ТекДанные.Доля));
		ТекДанные.ИтоговоеЗначение=ТекДанные.ЗначениеЧисло+ТекДанные.АбсКоррекция;
		ТекДанные.ИтоговоеЗначениеДоч=ТекДанные.ИтоговоеЗначение*?(ТекДанные.МетодКонсолидации=ПредопределенноеЗначение("Перечисление.МетодыКонсолидации.Полная"),1,?(ТекДанные.Доля=0,0,100/ТекДанные.Доля));
		
	КонецЦикла;
	
	ОбновитьТаблицуРасшифровки(Элементы.ТаблицаЗначенийПоказателей.ТекущиеДанные.Показатель);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоТекущему(Команда)
	
	МассивКоэффПроц=РаспределитьКорректировку(Элементы.ТаблицаЗначенийПоказателей.ТекущиеДанные.АбсКоррекция,"ОргРаспределениеКорректировки","ЗначениеЧисло");
	
	Если МассивКоэффПроц=Неопределено Тогда
		Сообщить("не удалось выполнить распределение.");
		Возврат;
	КонецЕсли;
	
	Для Инд=0 по ОргРаспределениеКорректировки.Количество()-1 Цикл
		
		ТекДанные=ОргРаспределениеКорректировки[Инд];
				
		Текданные.АбсКоррекция=МассивКоэффПроц[Инд];
		ТекДанные.ДоляКорректировки=?(ТекСтрокаПоказатель.АбсКоррекция=0,0,100*ТекДанные.АбсКоррекция/ТекСтрокаПоказатель.АбсКоррекция);
		
		Текданные.АбсКоррекцияДоч=ТекДанные.АбсКоррекция*?(ТекДанные.МетодКонсолидации=МетодКонсолидацииПолная,1,?(ТекДанные.Доля=0,0,100/ТекДанные.Доля));
		ТекДанные.ИтоговоеЗначение=ТекДанные.ЗначениеЧисло+ТекДанные.АбсКоррекция;
		ТекДанные.ИтоговоеЗначениеДоч=ТекДанные.ИтоговоеЗначение*?(ТекДанные.МетодКонсолидации=МетодКонсолидацииПолная,1,?(ТекДанные.Доля=0,0,100/ТекДанные.Доля));
		
	КонецЦикла;
	
	ОбновитьТаблицуРасшифровки(Элементы.ТаблицаЗначенийПоказателей.ТекущиеДанные.Показатель);

КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиПоКолонкам()
	
	ТаблицаРаспределения=РеквизитФормыВЗначение(РабочаяТаблица);
	
	МассивКолонок=Новый Массив;
	ТекстВыборка="";
	ТекстСумма="";
	
	МассивКолонок=Новый Массив;
	
	Для Каждого Колонка ИЗ ТаблицаРаспределения.Колонки Цикл
		
		Если Колонка.Имя="Доля" Тогда
			
			Продолжить;
		
		ИначеЕсли Колонка.ТипЗначения.Типы()[0]=Тип("Число") Тогда
			
			МассивКолонок.Добавить(Колонка.Имя);
								
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Колонка ИЗ МассивКолонок Цикл
		
		ТекстВыборка=ТекстВыборка+","+Колонка;
		ТекстСумма=ТекстСумма+",СУММА("+Колонка+") КАК "+Колонка;
		
	КонецЦикла;

	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ "+Сред(ТекстВыборка,2)+" ПОМЕСТИТЬ РабочаяТаблица ИЗ &ТаблицаРаспределения КАК ТаблицаРаспределения
	|;
	|ВЫБРАТЬ "+Сред(ТекстСумма,2)+" ИЗ РабочаяТаблица КАК РабочаяТаблица";
	
	Запрос.УстановитьПараметр("ТаблицаРаспределения",ТаблицаРаспределения);
	
	Результат=Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	Для Каждого Колонка ИЗ МассивКолонок Цикл
		
		ЭтаФорма.Элементы[РабочаяТаблица+Колонка].ТекстПодвала=Формат(Результат[Колонка],"ЧДЦ=2");
		
	КонецЦикла;	
	
КонецПроцедуры // ОбновитьИтогиПоКолонкам() 

&НаКлиенте
Процедура ЗаполнитьПоБазе(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьБазу(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗначенийПоказателейПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ТаблицаЗначенийПоказателей.ТекущаяСтрока=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьДанныеДляРаспределения", 0.1, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеДляРаспределения()
	
	Если Элементы.ТаблицаЗначенийПоказателей.ТекущаяСтрока=ТаблицаЗначенийПоказателейТекущаяСтрока Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТаблицаЗначенийПоказателейТекущаяСтрока=Элементы.ТаблицаЗначенийПоказателей.ТекущаяСтрока;
	
	Если ТекСтрокаПоказатель=Неопределено Тогда
		
		ОбновитьТекСтрокаПоказатель();
		ОбновитьТаблицуРаспределения(ТекСтрокаПоказатель.Показатель);
		
	ИначеЕсли НЕ ТекСтрокаПоказатель.Показатель=Элементы.ТаблицаЗначенийПоказателей.ТекущиеДанные.Показатель Тогда 
		
		Если ЭтаФорма[РабочаяТаблица].Количество()>0 Тогда
			
			ОбновитьТаблицуРасшифровки(ТекСтрокаПоказатель.Показатель,Ложь);
			
		КонецЕсли;
		
		ОбновитьТекСтрокаПоказатель();
		ОбновитьТаблицуРаспределения(ТекСтрокаПоказатель.Показатель);
		
	КонецЕсли;
	
КонецПроцедуры // 

&НаКлиенте
Процедура ОбновитьТекСтрокаПоказатель()
	
	ТекСтрокаПоказатель=Новый Структура("Показатель,ЗначениеЧисло,ОтнКоррекция,АбсКоррекция,ИтоговоеЗначение,СпособРаспределения,БазаРаспределения");
	ЗаполнитьЗначенияСвойств(ТекСтрокаПоказатель,Элементы.ТаблицаЗначенийПоказателей.ТекущиеДанные);
		
КонецПроцедуры // ОбновитьТекСтрокаПоказатель() 

&НаКлиенте
Процедура ОбновитьТаблицуРаспределения(Показатель)
	
	СтруктураПоиска=Новый Структура("Показатель",Показатель);
	
	МассивРасшифровка=Объект.ТаблицаРаспределенияКорректировки.НайтиСтроки(СтруктураПоиска);
	
	ЭтаФорма[РабочаяТаблица].Очистить();
	
	Для Каждого СтрОбработки ИЗ МассивРасшифровка Цикл
		
		НоваяСтрока=ЭтаФорма[РабочаяТаблица].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрОбработки);
		
	КонецЦикла;
	
	ОбновитьИтогиПоКолонкам();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
			
	Если Элементы.ТаблицаЗначенийПоказателей.ТекущиеДанные.СпособРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияКорректировок.ПоПрофилюРаспределения") Тогда
		
		Элементы.ОргРаспределениеКорректировкиЗаполнитьБазу.Видимость = Ложь;
		Элементы.ОргРаспределениеКорректировкиЗаполниитьПрофиль.Видимость = Истина;
		
		Элементы.ОргРаспределениеКорректировкиДоляКорректировки.Видимость = Истина;
		Элементы.ОргРаспределениеКорректировкиБаза.Видимость = Ложь;
		
		Элементы.ПериодРаспределениеКорректировкиЗаполнитьБазу.Видимость = Ложь;
		Элементы.ПериодРаспределениеКорректировкиЗаполниитьПрофиль.Видимость = Истина;
		
		Элементы.ПериодРаспределениеКорректировкиДоляКорректировки.Видимость = Истина;
		Элементы.ПериодРаспределениеКорректировкиБаза.Видимость = Ложь;
		
	Иначе
		
		Элементы.ОргРаспределениеКорректировкиЗаполнитьБазу.Видимость = Истина;
		Элементы.ОргРаспределениеКорректировкиЗаполниитьПрофиль.Видимость = Ложь;
		
		Элементы.ОргРаспределениеКорректировкиДоляКорректировки.Видимость = Ложь;
		Элементы.ОргРаспределениеКорректировкиБаза.Видимость = Истина;
	
		Элементы.ПериодРаспределениеКорректировкиЗаполнитьБазу.Видимость = Истина;
		Элементы.ПериодРаспределениеКорректировкиЗаполниитьПрофиль.Видимость = Ложь;
		
		Элементы.ПериодРаспределениеКорректировкиДоляКорректировки.Видимость = Ложь;
		Элементы.ПериодРаспределениеКорректировкиБаза.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция РаспределитьКорректировку(ИсхСумма,ИмяРабочейТаблицы,Колонка="")
	
	ТабРаспределение=РеквизитФормыВЗначение(ИмяРабочейТаблицы);
	
	Если Колонка="" Тогда // Распределение равномерно
		
		МассивКоэфф=Новый Массив;
		
		Для Каждого Строка ИЗ ТабРаспределение Цикл
			
			МассивКоэфф.Добавить(100);
			
		КонецЦикла;
		
	Иначе
		
		МассивКоэфф=ТабРаспределение.ВыгрузитьКолонку(Колонка);
		
	КонецЕсли;
	
	Возврат ОбщегоНазначенияУХ.РаспределитьПропорционально(ИсхСумма, МассивКоэфф, 5,Ложь);
	
КонецФункции //  

Процедура КоманднаяПанельРаспределениеПропорционально(Кнопка)
	
	//МассивКоэффПроц=РаспределитьКорректировку(ТекСтрокаПоказатель.АбсКоррекция,ОргРаспределениеКорректировки,"ЗначениеЧисло");
	//
	//Если МассивКоэффПроц=Неопределено Тогда
	//	Сообщить("не удалось выполнить распределение.");
	//	Возврат;
	//КонецЕсли;
	//
	//Для Инд=0 по ОргРаспределениеКорректировки.Количество()-1 Цикл
	//	
	//	ТекДанные=ОргРаспределениеКорректировки[Инд];
	//			
	//	Текданные.АбсКоррекция=МассивКоэффПроц[Инд];
	//	ТекДанные.ДоляКорректировки=?(ТекСтрокаПоказатель.АбсКоррекция=0,0,100*ТекДанные.АбсКоррекция/ТекСтрокаПоказатель.АбсКоррекция);
	//	
	//	Текданные.АбсКоррекцияДоч=ТекДанные.АбсКоррекция*?(ТекДанные.МетодКонсолидации=Перечисления.МетодыКонсолидации.Полная,1,?(ТекДанные.Доля=0,0,100/ТекДанные.Доля));
	//	ТекДанные.ИтоговоеЗначение=ТекДанные.ЗначениеЧисло+ТекДанные.АбсКоррекция;
	//	ТекДанные.ИтоговоеЗначениеДоч=ТекДанные.ИтоговоеЗначение*?(ТекДанные.МетодКонсолидации=Перечисления.МетодыКонсолидации.Полная,1,?(ТекДанные.Доля=0,0,100/ТекДанные.Доля));
	//	
	//КонецЦикла;
	//
	//ОбновитьТаблицуРасшифровки(ТекСтрокаПоказатель.Показатель, Истина);
	//
КонецПроцедуры

&НаКлиенте
Процедура Распределить(Команда)
	
	ОбновитьТаблицуРасшифровки(ТекСтрокаПоказатель.Показатель);
	
	Если РаспределитьСервер() Тогда
		
		СтруктураОтвета=Новый Структура;
		СтруктураОтвета.Вставить("Организация",	Объект.Организация);
		СтруктураОтвета.Вставить("ВидОтчета",	Объект.ВидОтчета);
		СтруктураОтвета.Вставить("Сценарий",	Объект.Сценарий);
		СтруктураОтвета.Вставить("ПериодОтчета",Объект.ПериодОтчета);
				
		Если Объект.СпособРаспределения=ПредопределенноеЗначение("Перечисление.СпособыОбратногоРаспределения.ПоОрганизациямПериметра") Тогда
			
			СтруктураОтвета.Вставить("СпособЗаполнения","АвтоматическиКонсолидация");
			
		Иначе
			
			СтруктураОтвета.Вставить("СпособЗаполнения","АвтоматическиСвернувПоПериоду");
			
		КонецЕсли;
		
		Оповестить("ВыполненоОбратноеРаспределение",СтруктураОтвета);
		
		Закрыть();
		
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Функция РаспределитьСервер()
	
	// Проверим, чтобы по всем показателям распределение корректировки совпадало с исходной
	
	СводКорректировок=Объект.ТаблицаРаспределенияКорректировки.Выгрузить();
	СводКорректировок.Свернуть("Показатель","АбсКоррекция");
	
	ЕстьОшибки=Ложь;
	ЕстьКорректировка=Истина;
	
	Для Каждого СтрПоказатель ИЗ Объект.ТаблицаЗначенийПоказателей Цикл
		
		ТекСтрокаКорректировок=СводКорректировок.Найти(СтрПоказатель.Показатель,"Показатель");
		
		Если  ТекСтрокаКорректировок=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		
		Если Цел(СтрПоказатель.АбсКоррекция-ТекСтрокаКорректировок.АбсКоррекция)<>0 Тогда
			
			Сообщить("Для показателя "+СокрЛП(СтрПоказатель.Показатель)+" некорректно распределена сумма корректировки.
			|Исходная сумма корректировки: "+Формат(СтрПоказатель.АбсКоррекция,"ЧЦ=18; ЧДЦ=5")+"
			|Сумма по полю ""Изменение (абс.)"" таблицы распределения корректировок: "+Формат(ТекСтрокаКорректировок.АбсКоррекция,"ЧЦ=18; ЧДЦ=5")+".
			|Необходимо изменить таблицу распределения корректировок так, 
			|чтобы указанные выше суммы были равны.",СтатусСообщения.Важное);
			
			ЕстьОшибки=Истина;
			
		Иначе
			
			ЕстьКорректировка=Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		
		Возврат Ложь;
		
	ИначеЕсли ЕстьКорректировка Тогда
		
		РабочийОбъект = РеквизитФормыВЗначение("Объект");
		РабочийОбъект.СформироватьКорректировки();
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьТаблицуРасшифровки(Показатель,ОбновлятьИтогиПоКолонкам=Истина)
			
	СтруктураПоиска=Новый Структура("Показатель",Показатель);
	МассивСтрок=Объект.ТаблицаРаспределенияКорректировки.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого Строка ИЗ МассивСтрок Цикл
		
		Объект.ТаблицаРаспределенияКорректировки.Удалить(Строка);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСерверУХ.ДополнитьТаблицу(ЭтаФорма[РабочаяТаблица],Объект.ТаблицаРаспределенияКорректировки);
	
	Если ОбновлятьИтогиПоКолонкам Тогда
		
		ОбновитьИтогиПоКолонкам();
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьТаблицуРасшифровки()

&НаКлиенте
Процедура ЗаполнитьЕдинуюБазу(Команда)
	
	Если Не ЗначениеЗаполнено(БазаРаспределения) Тогда
		Сообщить("Не указана база распределения.",СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрПоказатель ИЗ Объект.ТаблицаЗначенийПоказателей Цикл
		СтрПоказатель.СпособРаспределения=ПредопределенноеЗначение("Перечисление.СпособыРаспределенияКорректировок.ПоБазеРаспределения");
		СтрПоказатель.БазаРаспределения=БазаРаспределения;
	КонецЦикла;
	
	ЗаполнитьБазыРаспределения();
	ОбновитьТаблицуРаспределения(Элементы.ТаблицаЗначенийПоказателей.ТекущиеДанные.Показатель);
	
	УстановитьВидимость();

КонецПроцедуры

&НаКлиенте
Процедура ПериодЗаполнитьРавномерно(Команда)
	
	МассивКоэффСумм=РаспределитьКорректировку(Элементы.ТаблицаЗначенийПоказателей.ТекущиеДанные.АбсКоррекция,"ПериодРаспределениеКорректировки");
	МассивКоэффПроц=РаспределитьКорректировку(100,"ПериодРаспределениеКорректировки");
	
	Если МассивКоэффСумм=Неопределено Тогда
		Сообщить("не удалось выполнить распределение.");
		Возврат;
	КонецЕсли;
	
	Для Инд=0 по ПериодРаспределениеКорректировки.Количество()-1 Цикл
		
		ТекДанные=ПериодРаспределениеКорректировки[Инд];
		
		Текданные.АбсКоррекция=МассивКоэффСумм[Инд];
		ТекДанные.ДоляКорректировки=МассивКоэффПроц[Инд];
		ТекДанные.ИтоговоеЗначение=ТекДанные.ЗначениеЧисло+ТекДанные.АбсКоррекция;
		
	КонецЦикла;
		
	ОбновитьТаблицуРасшифровки(Элементы.ТаблицаЗначенийПоказателей.ТекущиеДанные.Показатель);
	
КонецПроцедуры

&НаСервере
//////////////////////////////////////////////////////////////////////////////
// Процедуры формирования баз для распределения
///////////////////////////////////////////////////////////////////////////////
Процедура ЗаполнитьБазыРаспределения() Экспорт
	
	Если Объект.СпособРаспределения=Перечисления.СпособыОбратногоРаспределения.ПоОрганизациямПериметра Тогда
		ЗаполнитьБазыРаспределенияОрганизации();
	ИначеЕсли Объект.СпособФормирования=Перечисления.СпособыФормированияОтчетов.АвтоматическиСвернувПоАналитикам Тогда
		//
	ИначеЕсли Объект.СпособРаспределения=Перечисления.СпособыОбратногоРаспределения.ПоПодчиненнымПериодам Тогда
		ЗаполнитьБазыРаспределенияПериоды();
	КонецЕсли;
	
КонецПроцедуры 

Процедура ЗаполнитьБазыРаспределенияОрганизации()
	
	РабочийОбъект = РеквизитФормыВЗначение("Объект");
	
	РабочийОбъект.мЗначенияОперандов=Объект.ТаблицаРаспределенияКорректировки.Выгрузить();
	//мЗначенияОперандов.Колонки.Добавить("Значение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	РабочийОбъект.мЗначенияОперандов.Колонки.Добавить("Итог",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	
	Для Каждого СтрПоказатель ИЗ Объект.ТаблицаЗначенийПоказателей Цикл
		
		Если ЗначениеЗаполнено(СтрПоказатель.БазаРаспределения) Тогда
			
			ПолучитьТаблицуОперандаОрганизации(СтрПоказатель,РабочийОбъект);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ *
	|ПОМЕСТИТЬ ТабРасшифровки
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник";
	Запрос.УстановитьПараметр("ВнешнийИсточник", Объект.ТаблицаРаспределенияКорректировки.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ *
	|ПОМЕСТИТЬ ТабОперандов
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник";
	Запрос.УстановитьПараметр("ВнешнийИсточник", РабочийОбъект.мЗначенияОперандов);
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ *
	|ПОМЕСТИТЬ ТабПоказатели
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник";
	Запрос.УстановитьПараметр("ВнешнийИсточник", Объект.ТаблицаЗначенийПоказателей.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ ТО.Показатель,
	|	ТО.Значение
	|ПОМЕСТИТЬ ТабСвод
	|	ИЗ ТабОперандов КАК ТО
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабРасшифровки КАК ТР
	|	ПО ТО.Показатель=ТР.Показатель
	|	И  ТО.Организация=ТР.Организация";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ Свод.Показатель,
	|	Сумма(Свод.Значение) КАК Итог
	|ПОМЕСТИТЬ ТабИтоги
	|	ИЗ ТабСвод КАК Свод
	|	Сгруппировать По Свод.Показатель"; 
		
	Запрос.Выполнить();
	
	Запрос.Текст="ВЫБРАТЬ";
	
	Для Каждого Колонка ИЗ Объект.ТаблицаРаспределенияКорректировки.Выгрузить().Колонки Цикл
		
		Если НЕ (Колонка.Имя="База" ИЛИ Колонка.Имя="ДоляКорректировки"
			ИЛИ Колонка.Имя="АбсКоррекция") Тогда
			
			Запрос.Текст=Запрос.Текст+"
			
			|ТР."+Колонка.Имя+",";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|ЕСТЬNULL(ТО.Значение,0) КАК База,
	|ВЫБОР КОГДА ( ТИ.Итог <> 0) 
	|	ТОГДА (ЕСТЬNULL(ТО.Значение,0)/ЕСТЬNULL(ТИ.Итог,1))*100
	|	ИНАЧЕ 0 КОНЕЦ КАК ДоляКорректировки,
	|Показатели.АбсКоррекция*(ВЫБОР КОГДА (ТИ.Итог <> 0)
	|	ТОГДА (ЕСТЬNULL(ТО.Значение,0)/ЕСТЬNULL(ТИ.Итог,1))
	|	ИНАЧЕ 0 КОНЕЦ) КАК АбсКоррекция
	|ИЗ ТабРасшифровки КАК ТР
	|ЛЕВОЕ СОЕДИНЕНИЕ ТабОперандов КАК ТО
	|ПО ТР.Показатель=ТО.Показатель
	|И ТР.Организация=ТО.Организация
	|ЛЕВОЕ СОЕДИНЕНИЕ ТабПоказатели КАК Показатели
	|ПО ТР.Показатель=Показатели.Показатель
	|ЛЕВОЕ СОЕДИНЕНИЕ ТабИтоги КАК ТИ
	|ПО ТР.Показатель=ТИ.Показатель";
	
	ТРК = Запрос.Выполнить().Выгрузить();
	ТРК.Свернуть("Регистратор,Показатель,Период,Организация,МетодКонсолидации,
	|Доля,ИсходныйНомерСтроки","ДоляКорректировки,База,АбсКоррекция,АбсКоррекцияДоч,Значение,ЗначениеДочернейКомпании,ЗначениеЧисло,ИтоговоеЗначение,ИтоговоеЗначениеДоч");
	Объект.ТаблицаРаспределенияКорректировки.Загрузить(ТРК);	
	
	Для Каждого Текданные ИЗ Объект.ТаблицаРаспределенияКорректировки Цикл
		
		Текданные.АбсКоррекцияДоч=ТекДанные.АбсКоррекция*?(ТекДанные.МетодКонсолидации=Перечисления.МетодыКонсолидации.Полная,1,?(ТекДанные.Доля=0,0,100/ТекДанные.Доля));
		ТекДанные.ИтоговоеЗначение=ТекДанные.ЗначениеЧисло+ТекДанные.АбсКоррекция;
		ТекДанные.ИтоговоеЗначениеДоч=ТекДанные.ИтоговоеЗначение*?(ТекДанные.МетодКонсолидации=Перечисления.МетодыКонсолидации.Полная,1,?(ТекДанные.Доля=0,0,100/ТекДанные.Доля));
		
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьБазыРаспределенияОрганизации()

Процедура ЗаполнитьБазыРаспределенияПериоды()
	
	РабочийОбъект = РеквизитФормыВЗначение("Объект");
	
	РабочийОбъект.мЗначенияОперандов=Объект.ТаблицаРаспределенияКорректировки.Выгрузить();
	//мЗначенияОперандов.Колонки.Добавить("Значение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	
	Для Каждого СтрПоказатель ИЗ Объект.ТаблицаЗначенийПоказателей Цикл
		
		Если ЗначениеЗаполнено(СтрПоказатель.БазаРаспределения) Тогда
			
			ПолучитьТаблицуОперандаПериоды(СтрПоказатель,Объект.ТаблицаРаспределенияКорректировки.Выгрузить(),РабочийОбъект);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ *
	|ПОМЕСТИТЬ ТабРасшифровки
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник";
	Запрос.УстановитьПараметр("ВнешнийИсточник", Объект.ТаблицаРаспределенияКорректировки.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ *
	|ПОМЕСТИТЬ ТабОперандов
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник";
	Запрос.УстановитьПараметр("ВнешнийИсточник", РабочийОбъект.мЗначенияОперандов);
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ *
	|ПОМЕСТИТЬ ТабПоказатели
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник";
	Запрос.УстановитьПараметр("ВнешнийИсточник", Объект.ТаблицаЗначенийПоказателей.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ ТО.Показатель,
	|	ТО.Значение
	|ПОМЕСТИТЬ ТабСвод
	|	ИЗ ТабОперандов КАК ТО
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабРасшифровки КАК ТР
	|	ПО ТО.Показатель=ТР.Показатель
	|	И  ТО.Период=ТР.Период";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ Свод.Показатель,
	|	Сумма(Свод.Значение) КАК Итог
	|ПОМЕСТИТЬ ТабИтоги
	|	ИЗ ТабСвод КАК Свод
	|	Сгруппировать По Свод.Показатель"; 
		
	Запрос.Выполнить();
	
	Запрос.Текст="ВЫБРАТЬ";
	
	Для Каждого Колонка ИЗ Объект.ТаблицаРаспределенияКорректировки.Выгрузить().Колонки Цикл
		
		Если НЕ (Колонка.Имя="База" ИЛИ Колонка.Имя="ДоляКорректировки"
			ИЛИ Колонка.Имя="АбсКоррекция") Тогда
			
			Запрос.Текст=Запрос.Текст+"
			
			|ТР."+Колонка.Имя+",";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|ЕСТЬNULL(ТО.Значение,0) КАК База,
	|ВЫБОР КОГДА ( ТИ.Итог <> 0) 
	|	ТОГДА (ЕСТЬNULL(ТО.Значение,0)/ЕСТЬNULL(ТИ.Итог,1))*100
	|	ИНАЧЕ 0 КОНЕЦ КАК ДоляКорректировки,
	|Показатели.АбсКоррекция*(ВЫБОР КОГДА (ТИ.Итог <> 0)
	|	ТОГДА (ЕСТЬNULL(ТО.Значение,0)/ЕСТЬNULL(ТИ.Итог,1))
	|	ИНАЧЕ 0 КОНЕЦ) КАК АбсКоррекция
	|ИЗ ТабРасшифровки КАК ТР
	|ЛЕВОЕ СОЕДИНЕНИЕ ТабОперандов КАК ТО
	|ПО ТР.Показатель=ТО.Показатель
	|И ТР.Период=ТО.Период
	|ЛЕВОЕ СОЕДИНЕНИЕ ТабПоказатели КАК Показатели
	|ПО ТР.Показатель=Показатели.Показатель
	|ЛЕВОЕ СОЕДИНЕНИЕ ТабИтоги КАК ТИ
	|ПО ТР.Показатель=ТИ.Показатель";
	
	
	ТРК = Запрос.Выполнить().Выгрузить();
	ТРК.Свернуть("Регистратор,Показатель,Период,Организация,МетодКонсолидации,
	|Доля,ИсходныйНомерСтроки","ДоляКорректировки,База,АбсКоррекция,АбсКоррекцияДоч,Значение,ЗначениеДочернейКомпании,ЗначениеЧисло,ИтоговоеЗначение,ИтоговоеЗначениеДоч");
	
	Объект.ТаблицаРаспределенияКорректировки.Загрузить(ТРК);
	
	
	Для Каждого Текданные ИЗ Объект.ТаблицаРаспределенияКорректировки Цикл
		
		ТекДанные.ИтоговоеЗначение=ТекДанные.ЗначениеЧисло+ТекДанные.АбсКоррекция;
		
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьБазыРаспределенияОрганизации()

Процедура ПолучитьТаблицуОперандаОрганизации(СтрПоказатель,РабочийОбъект) Экспорт
	
	//РабочийОбъект = РеквизитФормыВЗначение("Объект");
	
	
	
	ПостроительЗапросаВнутр=Новый ПостроительЗапроса;
		
	//////////// Настраиваем построитель запроса ////////////////////
	
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",СтрПоказатель.БазаРаспределения.ПоказательОтбор.Владелец);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",Истина);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",Истина);
	ДанныеЗапроса.Вставить("ТолькоЧисловые",Истина);
	ДанныеЗапроса.Вставить("ГруппироватьЗначения",Ложь);
	ДанныеЗапроса.Вставить("ДляТекстаПостроителя",Истина);
	
	ДополнительныеПоля=Новый Соответствие;
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Ссылка","Версия");	
	ДанныеЗапроса.Вставить("ДополнительныеПоля",ДополнительныеПоля);

	
	ОтборПоказателей=Новый Соответствие;
	ОтборПоказателей.Вставить("#### = &ПоказательОтбор",Новый Структура("ПоказательОтбор",СтрПоказатель.БазаРаспределения.ПоказательОтбор));
	
	ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
		
	СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	ПостроительЗапросаВнутр.Текст=СтруктураЗапроса.ТекстЗапроса;
	
	Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
		
		ПостроительЗапросаВнутр.Параметры.Вставить(СтрПараметр.Ключ,СтрПараметр.Значение);
			
	КонецЦикла;	
	
	ПостроительЗапросаВнутр.ЗаполнитьНастройки();
	ПостроительЗапросаВнутр.ВыбранныеПоля.Очистить();
	
	// Добавляем выбранные поля 
	Поле=ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("Организация","Организация");
	Поле=ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("Значение","Значение");
	Поле=ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("ИтоговоеЗначение","ИтогПоПоказателю");
		
	// Очистим отбор
	ОтборКоличество = ПостроительЗапросаВнутр.Отбор.Количество();
	
	Для Н = 1 По ОтборКоличество Цикл
		ПостроительЗапросаВнутр.Отбор.Удалить(ОтборКоличество - Н);
	КонецЦикла;
	
	// Добавляем отборы
		
	ТекПравилаВычисленияПараметров=СтрПоказатель.БазаРаспределения.ПравилаВычисленияПараметровЗапроса.Выгрузить();
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ИзКонтекста",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ЗначениеИзКонтекста");
	
	ДокументОбъект=Документы.НастраиваемыйОтчет.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ДокументОбъект,Объект.ЭкземплярОтчета,,"ССылка");
	
	ОбъектРасчета=ДокументОбъект.ПодготовитьСтруктуруПеременныхДляРасчета();
	
	Для Каждого Параметр ИЗ ТекПравилаВычисленияПараметров Цикл
		
		Если Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется 
			ИЛИ Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ОрганизацияОтчета Тогда  // Отбор по организации отчета снимем, так как в данном случае он не имеет смысла.
			Продолжить;
			
		КонецЕсли;
		
		ОтборПараметр=ПостроительЗапросаВнутр.Отбор.Добавить(Параметр.ИмяПараметра);
		
		ОтборПараметр.Использование=Истина;
		
		СвойстваОтбора=УправлениеОтчетамиУХ.ПолучитьСвойстваПараметра(ОбъектРасчета,Параметр);
		
		ОтборПараметр.ВидСравнения=СвойстваОтбора.ВидСравнения;
		ОтборПараметр.Значение=СвойстваОтбора.Значение;
		
	КонецЦикла;
	
	УправлениеОтчетамиУХ.ДобавитьОтборПоАктивностиПредварительныеДанные(ПостроительЗапросаВнутр, Объект.ЭкземплярОтчета, Объект.ИспользованиеПредварительныхДанных);
	
	ПостроительЗапросаВнутр.Выполнить();
	ТабРезультат=ПостроительЗапросаВнутр.Результат.Выгрузить();
	
	КопияРезультат=ТабРезультат.Скопировать();
	КопияРезультат.Свернуть("Организация");
	
	Для Каждого Строка ИЗ КопияРезультат Цикл
		
		ЕстьИтог  = Ложь;
		ИтогСумма = 0;
		
		МассивСтрок=ТабРезультат.НайтиСтроки(Новый Структура("Организация",Строка.Организация));
		
		Для Каждого СтрРезультат ИЗ МассивСтрок Цикл
			
			Если СтрРезультат.ИтогПоПоказателю Тогда
				
				Если ЕстьИтог Тогда
					
					СтруктураПоиска=Новый Структура;
					СтруктураПоиска.Вставить("Организация",Строка.Организация);
					СтруктураПоиска.Вставить("Показатель",СтрПоказатель.Показатель);
					
					МассивИтог=РабочийОбъект.мЗначенияОперандов.НайтиСтроки(СтруктураПоиска);
					МассивИтог[0].Значение=МассивИтог[0].Значение+СтрРезультат.Значение;
					
				Иначе
					
					ЕстьИтог=Истина;
					НоваяСтрока=РабочийОбъект.мЗначенияОперандов.Добавить();
					НоваяСтрока.Организация=Строка.Организация;
					НоваяСтрока.Показатель=СтрПоказатель.Показатель;
					НоваяСтрока.Значение=СтрРезультат.Значение;
					
				КонецЕсли;
				
			Иначе
				
				ИтогСумма=ИтогСумма+СтрРезультат.Значение;
				
			КонецЕсли;		
			
		КонецЦикла;
		
		Если НЕ ЕстьИтог Тогда
			
			НоваяСтрока=РабочийОбъект.мЗначенияОперандов.Добавить();
			НоваяСтрока.Организация=Строка.Организация;
			НоваяСтрока.Показатель=СтрПоказатель.Показатель;
			НоваяСтрока.Значение=ИтогСумма;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ПолучитьТаблицуОперандаОрганизации()

Процедура ПолучитьТаблицуОперандаПериоды(СтрПоказатель,МассивПериодов=Неопределено,РабочийОбъект) Экспорт
	
	//РабочийОбъект = РеквизитФормыВЗначение("Объект");
	
	ПостроительЗапросаВнутр=Новый ПостроительЗапроса;
		
	ПостроительЗапросаВнутр=Новый ПостроительЗапроса;
	
	//////////// Настраиваем построитель запроса ////////////////////
	
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",СтрПоказатель.БазаРаспределения.ПоказательОтбор.Владелец);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",Истина);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",Истина);
	ДанныеЗапроса.Вставить("ТолькоЧисловые",Истина);
	ДанныеЗапроса.Вставить("ГруппироватьЗначения",Ложь);
	ДанныеЗапроса.Вставить("ДляТекстаПостроителя",Истина);
	
	ДополнительныеПоля=Новый Соответствие;
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Ссылка","Версия");	
	ДанныеЗапроса.Вставить("ДополнительныеПоля",ДополнительныеПоля);
	
	ОтборПоказателей=Новый Соответствие;
	ОтборПоказателей.Вставить("#### = &ПоказательОтбор",Новый Структура("ПоказательОтбор",СтрПоказатель.БазаРаспределения.ПоказательОтбор));
	
	ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
		
	СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	ПостроительЗапросаВнутр.Текст=СтруктураЗапроса.ТекстЗапроса;
	
	Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
		
		ПостроительЗапросаВнутр.Параметры.Вставить(СтрПараметр.Ключ,СтрПараметр.Значение);
			
	КонецЦикла;	
	
	ПостроительЗапросаВнутр.ЗаполнитьНастройки();
	ПостроительЗапросаВнутр.ВыбранныеПоля.Очистить();
	
	// Добавляем выбранные поля 
	Поле=ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("ПериодОтчета","Период");
	Поле=ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("Значение","Значение");
	Поле=ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("ИтоговоеЗначение","ИтогПоПоказателю");
		
	// Очистим отбор
	ОтборКоличество = ПостроительЗапросаВнутр.Отбор.Количество();
	
	Для Н = 1 По ОтборКоличество Цикл
		ПостроительЗапросаВнутр.Отбор.Удалить(ОтборКоличество - Н);
	КонецЦикла;
	
	// Добавляем отборы
		
	ТекПравилаВычисленияПараметров=СтрПоказатель.БазаРаспределения.ПравилаВычисленияПараметровЗапроса.Выгрузить();
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ИзКонтекста",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ЗначениеИзКонтекста");
	
	СдвигПериодов=0;
	
	Для Каждого Параметр ИЗ ТекПравилаВычисленияПараметров Цикл
		
		Если Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда  // Отбор по организации отчета снимем, так как в данном случае он не имеет смысла.
			Продолжить;
			
		КонецЕсли;
		
		СвойстваОтбора = УправлениеОтчетамиУХ.ПолучитьСвойстваПараметра(Объект.ЭкземплярОтчета, Параметр);
		
		Если Параметр.ИмяПараметра="ПериодОтчета" 
			И Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчета
			ИЛИ Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчетаСоСдвигом Тогда		
				
			Если НЕ МассивПериодов=Неопределено Тогда
				
				СписокПериодов=Новый СписокЗначений;
				
				Для Каждого Период ИЗ МассивПериодов Цикл
					
					Если Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчетаСоСдвигом Тогда
						
						СдвигПериодов=УправлениеОтчетамиУХ.ПолучитьЗначениеИзХранилища(Параметр.УточнениеСпособаОпределения);
						СписокПериодов.Добавить(ОбщегоНазначенияУХ.глОтносительныйПериод(Период,СдвигПериодов));
						
					Иначе
						
						СписокПериодов.Добавить(Период);
						СдвигПериодов=0;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ОтборПараметр=ПостроительЗапросаВнутр.Отбор.Добавить("ПериодОтчета");
				ОтборПараметр.ВидСравнения=ВидСравнения.ВСписке;
				ОтборПараметр.Значение=СписокПериодов;
				ОтборПараметр.Использование=Истина;
				
			ИначеЕсли ЗначениеЗаполнено(Объект.ЭкземплярОтчета.ПериодичностьСвертывания) Тогда
				
				ОтборПараметр=ПостроительЗапросаВнутр.Отбор.Добавить("ПериодОтчета.ДатаНачала");
				ОтборПараметр.ВидСравнения=ВидСравнения.БольшеИлиРавно;
				ОтборПараметр.Значение=СвойстваОтбора.Значение.ДатаНачала;
				ОтборПараметр.Использование=Истина;
				
				ОтборПараметр=ПостроительЗапросаВнутр.Отбор.Добавить("ПериодОтчета.ДатаОкончания");
				ОтборПараметр.ВидСравнения=ВидСравнения.МеньшеИлиРавно;
				ОтборПараметр.Значение=СвойстваОтбора.Значение.ДатаОкончания;
				ОтборПараметр.Использование=Истина;
				
				ОтборПараметр=ПостроительЗапросаВнутр.Отбор.Добавить("ПериодОтчета.Периодичность");
				ОтборПараметр.ВидСравнения=ВидСравнения.Равно;
				ОтборПараметр.Значение=Объект.ЭкземплярОтчета.ПериодичностьСвертывания;
				ОтборПараметр.Использование=Истина;
				
				ОтборПараметр=ПостроительЗапросаВнутр.Отбор.Добавить("ПериодОтчета");
				ОтборПараметр.ВидСравнения=ВидСравнения.НеРавно;
				ОтборПараметр.Значение=СвойстваОтбора.Значение;
				ОтборПараметр.Использование=Истина;
				
				Если Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчетаСоСдвигом Тогда
					
					СдвигПериодов=УправлениеОтчетамиУХ.ПолучитьЗначениеИзХранилища(Параметр.УточнениеСпособаОпределения);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ОтборПараметр=ПостроительЗапросаВнутр.Отбор.Добавить(Параметр.ИмяПараметра);
			
			ОтборПараметр.Использование=Истина;
			ОтборПараметр.ВидСравнения=СвойстваОтбора.ВидСравнения;
			ОтборПараметр.Значение=СвойстваОтбора.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УправлениеОтчетамиУХ.ДобавитьОтборПоАктивностиПредварительныеДанные(ПостроительЗапросаВнутр, Объект.ЭкземплярОтчета, Объект.ИспользованиеПредварительныхДанных);
	
	ПостроительЗапросаВнутр.Выполнить();
	ТабРезультат=ПостроительЗапросаВнутр.Результат.Выгрузить();
	
	КопияРезультат=ТабРезультат.Скопировать();
	КопияРезультат.Свернуть("Период");
	
	Для Каждого Строка ИЗ КопияРезультат Цикл
		
		ЕстьИтог  = Ложь;
		ИтогСумма = 0;
		
		МассивСтрок=ТабРезультат.НайтиСтроки(Новый Структура("Период",Строка.Период));
		
		Для Каждого СтрРезультат ИЗ МассивСтрок Цикл
			
			Если СтрРезультат.ИтогПоПоказателю Тогда
				
				Если ЕстьИтог Тогда
					
					СтруктураПоиска=Новый Структура;
					СтруктураПоиска.Вставить("Период",ОтносительныйПериод(Строка.Период,СдвигПериодов*(-1)));
					СтруктураПоиска.Вставить("Показатель",СтрПоказатель.Показатель);
					
					МассивИтог=РабочийОбъект.мЗначенияОперандов.НайтиСтроки(СтруктураПоиска);
					МассивИтог[0].Значение=МассивИтог[0].Значение+СтрРезультат.Значение;
					
				Иначе
					
					ЕстьИтог=Истина;
					НоваяСтрока=РабочийОбъект.мЗначенияОперандов.Добавить();
					НоваяСтрока.Период=ОтносительныйПериод(Строка.Период,СдвигПериодов*(-1));
					НоваяСтрока.Показатель=СтрПоказатель.Показатель;
					НоваяСтрока.Значение=СтрРезультат.Значение;
					
				КонецЕсли;
				
			Иначе
				
				ИтогСумма=ИтогСумма+СтрРезультат.Значение;
				
			КонецЕсли;	

		КонецЦикла;
		
		Если НЕ ЕстьИтог Тогда
			
			НоваяСтрока=РабочийОбъект.мЗначенияОперандов.Добавить();
			НоваяСтрока.Период=ОтносительныйПериод(Строка.Период,СдвигПериодов*(-1));
			НоваяСтрока.Показатель=СтрПоказатель.Показатель;
			НоваяСтрока.Значение=ИтогСумма;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры


Функция ОтносительныйПериод(Знач локПериодОтчета = Неопределено, Смещение = 0) Экспорт
	
	Если локПериодОтчета = Неопределено Тогда
		локПериодОтчета = Объект.ПериодОтчета;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(локПериодОтчета) Тогда
		Сообщить("Невозможно определить относительный период (смещение = " + Смещение + "): исходный период не задан! ", СтатусСообщения.Важное);
		Возврат Справочники.Периоды.ПустаяСсылка();
	КонецЕсли;
	
	Если локПериодОтчета.Периодичность		= Перечисления.Периодичность.Год 
		ИЛИ локПериодОтчета.Периодичность      = Перечисления.Периодичность.ДевятьМесяцев Тогда
		ДатаНачалаОтносительногоПериода		= ДобавитьМесяц(локПериодОтчета.ДатаНачала, 12 * Смещение);
	ИначеЕсли локПериодОтчета.Периодичность = Перечисления.Периодичность.Полугодие Тогда
		ДатаНачалаОтносительногоПериода		= ДобавитьМесяц(локПериодОтчета.ДатаНачала, 6 * Смещение);
	ИначеЕсли локПериодОтчета.Периодичность = Перечисления.Периодичность.Квартал Тогда
		ДатаНачалаОтносительногоПериода		= ДобавитьМесяц(локПериодОтчета.ДатаНачала, 3 * Смещение);
	ИначеЕсли локПериодОтчета.Периодичность = Перечисления.Периодичность.Месяц Тогда
		ДатаНачалаОтносительногоПериода		= ДобавитьМесяц(локПериодОтчета.ДатаНачала, Смещение);
	ИначеЕсли локПериодОтчета.Периодичность = Перечисления.Периодичность.Декада Тогда
		
		// анализируем
		ГодДатыНачала						= Год(локПериодОтчета.ДатаНачала);
		МесяцДатыНачала						= Месяц(локПериодОтчета.ДатаНачала);
		ДеньДатыНачала						= День(локПериодОтчета.ДатаНачала);
		ДекадаДатыНачала					= Цел((ДеньДатыНачала - 1) / 10) + 1;
		ДекадаДатыНачала					= ?(ДекадаДатыНачала = 4, 3, ДекадаДатыНачала);
		НомерДекадыНЭ						= ГодДатыНачала * 36 + (МесяцДатыНачала - 1) * 3 + (ДекадаДатыНачала - 1);
		
		// изменяем
		НомерДекадыНЭ						= НомерДекадыНЭ + Смещение;
		
		// синтезируем
		ГодДатыНачалаОтнПериода				= Цел((НомерДекадыНЭ)/ 36);
		ДекадаВГоду							= НомерДекадыНЭ % 36;
		МесяцВГодуДатыНачалаОтнПериода		= Цел(ДекадаВГоду / 3) + 1;
		ДекадаВМесяце						= ДекадаВГоду % 3;
		ДеньВМесяцеДатыНачалаОтнПериода		= ДекадаВМесяце * 10 + 1;
		
		ДатаНачалаОтносительногоПериода		= Дата(ГодДатыНачалаОтнПериода, МесяцВГодуДатыНачалаОтнПериода, ДеньВМесяцеДатыНачалаОтнПериода);
		
	ИначеЕсли локПериодОтчета.Периодичность = Перечисления.Периодичность.День Тогда
		ОдинДень							= НачалоДня(Дата(2000, 1, 2)) - НачалоДня(Дата(2000, 1, 1));
		ДатаНачалаОтносительногоПериода		= локПериодОтчета.ДатаНачала + ОдинДень * Смещение;
	Иначе
		Сообщить("Невозможно определить относительный период (смещение = " + Смещение + "): исходный период не задан! ", СтатусСообщения.Важное);
		Возврат Справочники.Периоды.ПустаяСсылка();
	КонецЕсли;
	ДатаНачалаОтносительногоПериода = НачалоДня(ДатаНачалаОтносительногоПериода);
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	Периоды.Ссылка
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	Периоды.ДатаНачала = &ДатаНачала
	|	И Периоды.Периодичность = &Периодичность");
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачалаОтносительногоПериода);
	Запрос.УстановитьПараметр("Периодичность", локПериодОтчета.Периодичность);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Сообщить("Невозможно определить относительный период (смещение = " + Смещение + "): не существует искомый период в справочнике ""Периоды""! ", СтатусСообщения.Важное);
		Возврат Справочники.Периоды.ПустаяСсылка();
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Получить(0);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОргРаспределениеКорректировкиДоляКорректировкиПриИзменении(Элемент)
	
	ТекДанные=Элементы.ОргРаспределениеКорректировки.ТекущиеДанные;
	РассчитатьЗначенияКорректировки(ТекДанные);
		
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЗначенияКорректировки(ТекДанные)
		
	ТекДанные.АбсКоррекция=ТекСтрокаПоказатель.АбсКоррекция*ТекДанные.ДоляКорректировки/100;
	ТекДанные.ИтоговоеЗначение=ТекДанные.ЗначениеЧисло+ТекДанные.АбсКоррекция;
	
	Если РабочаяТаблица="ОргРаспределениеКорректировки" Тогда
		Текданные.АбсКоррекцияДоч=ТекДанные.АбсКоррекция*?(ТекДанные.МетодКонсолидации=МетодКонсолидацииПолная,1,?(ТекДанные.Доля=0,0,100/ТекДанные.Доля));
		ТекДанные.ИтоговоеЗначениеДоч=ТекДанные.ИтоговоеЗначение*?(ТекДанные.МетодКонсолидации=МетодКонсолидацииПолная,1,?(ТекДанные.Доля=0,0,100/ТекДанные.Доля));
	КонецЕсли;
	
КонецПроцедуры // РассчитатьЗначенияКорректировки() 

&НаКлиенте
Процедура ОргРаспределениеКорректировкиАбсКоррекцияПриИзменении(Элемент)
	
	ТекДанные=Элементы.ОргРаспределениеКорректировки.ТекущиеДанные;
	ТекДанные.ДоляКорректировки=?(ТекСтрокаПоказатель.АбсКоррекция=0,0,100*ТекДанные.АбсКоррекция/ТекСтрокаПоказатель.АбсКоррекция);
	
	Текданные.АбсКоррекцияДоч=ТекДанные.АбсКоррекция*?(ТекДанные.МетодКонсолидации=МетодКонсолидацииПолная,1,?(ТекДанные.Доля=0,0,100/ТекДанные.Доля));
	ТекДанные.ИтоговоеЗначение=ТекДанные.ЗначениеЧисло+ТекДанные.АбсКоррекция;
	ТекДанные.ИтоговоеЗначениеДоч=ТекДанные.ИтоговоеЗначение*?(ТекДанные.МетодКонсолидации=МетодКонсолидацииПолная,1,?(ТекДанные.Доля=0,0,100/ТекДанные.Доля));
	
КонецПроцедуры

&НаКлиенте
Процедура ОргРаспределениеКорректировкиАбсКоррекцияДочПриИзменении(Элемент)
	
	ТекДанные=Элементы.ОргРаспределениеКорректировки.ТекущиеДанные;
	Текданные.АбсКоррекция=Текданные.АбсКоррекцияДоч*?(ТекДанные.МетодКонсолидации=МетодКонсолидацииПолная,1,ТекДанные.Доля/100);
	
	ТекДанные.ДоляКорректировки=?(ТекСтрокаПоказатель.АбсКоррекция=0,0,100*ТекДанные.АбсКоррекция/ТекСтрокаПоказатель.АбсКоррекция);
	
	ТекДанные.ИтоговоеЗначение=ТекДанные.ЗначениеЧисло+ТекДанные.АбсКоррекция;
	ТекДанные.ИтоговоеЗначениеДоч=ТекДанные.ИтоговоеЗначение*?(ТекДанные.МетодКонсолидации=МетодКонсолидацииПолная,1,?(ТекДанные.Доля=0,0,100/ТекДанные.Доля));
	
КонецПроцедуры

&НаКлиенте
Процедура ОргРаспределениеКорректировкиИтоговоеЗначениеПриИзменении(Элемент)
	
	ТекДанные=Элементы.ОргРаспределениеКорректировки.ТекущиеДанные;
	ТекДанные.АбсКоррекция=ТекДанные.ИтоговоеЗначение-ТекДанные.ЗначениеЧисло;
	
	ТекДанные.ДоляКорректировки=?(ТекСтрокаПоказатель.АбсКоррекция=0,0,100*ТекДанные.АбсКоррекция/ТекСтрокаПоказатель.АбсКоррекция);
	
	Текданные.АбсКоррекцияДоч=ТекДанные.АбсКоррекция*?(ТекДанные.МетодКонсолидации=МетодКонсолидацииПолная,1,?(ТекДанные.Доля=0,0,100/ТекДанные.Доля));
	ТекДанные.ИтоговоеЗначениеДоч=ТекДанные.ИтоговоеЗначение*?(ТекДанные.МетодКонсолидации=МетодКонсолидацииПолная,1,?(ТекДанные.Доля=0,0,100/ТекДанные.Доля));
	
КонецПроцедуры

&НаКлиенте
Процедура ОргРаспределениеКорректировкиИтоговоеЗначениеДочПриИзменении(Элемент)
	
	ТекДанные=Элементы.ОргРаспределениеКорректировки.ТекущиеДанные;
	
	ТекДанные.АбсКоррекцияДоч=ТекДанные.ИтоговоеЗначениеДоч-ТекДанные.ЗначениеДочернейКомпании;	
	Текданные.АбсКоррекция=Текданные.АбсКоррекцияДоч*?(ТекДанные.МетодКонсолидации=МетодКонсолидацииПолная,1,ТекДанные.Доля/100);
	
	ТекДанные.ДоляКорректировки=?(ТекСтрокаПоказатель.АбсКоррекция=0,0,100*ТекДанные.АбсКоррекция/ТекСтрокаПоказатель.АбсКоррекция);
	
	ТекДанные.ИтоговоеЗначение=ТекДанные.ЗначениеЧисло+ТекДанные.АбсКоррекция;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗначенийПоказателейОтнКоррекцияПриИзменении(Элемент)
	
	РассчитатьСтрокуПоказателя(Элементы.ТаблицаЗначенийПоказателей.ТекущиеДанные, "ОтнКоррекция");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗначенийПоказателейАбсКоррекцияПриИзменении(Элемент)
	
	РассчитатьСтрокуПоказателя(Элементы.ТаблицаЗначенийПоказателей.ТекущиеДанные, "АбсКоррекция");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗначенийПоказателейИтоговоеЗначениеПриИзменении(Элемент)
	
	РассчитатьСтрокуПоказателя(Элементы.ТаблицаЗначенийПоказателей.ТекущиеДанные, "ИтоговоеЗначение");
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтрокуПоказателя(ТекДанные, ИзмененнаяКолонка)
	
	Если ИзмененнаяКолонка="ОтнКоррекция" Тогда
		
		ТекДанные.АбсКоррекция=ТекДанные.ЗначениеЧисло * ТекДанные.ОтнКоррекция / 100;
		ТекДанные.ИтоговоеЗначение = ТекДанные.ЗначениеЧисло + ТекДанные.АбсКоррекция;
		
	ИначеЕсли ИзмененнаяКолонка="АбсКоррекция" Тогда
		
		ТекДанные.ОтнКоррекция=?(ТекДанные.ЗначениеЧисло=0,0,((ТекДанные.ЗначениеЧисло+ТекДанные.АбсКоррекция)/ТекДанные.ЗначениеЧисло)-1)*100;
		ТекДанные.ИтоговоеЗначение = ТекДанные.ЗначениеЧисло + ТекДанные.АбсКоррекция;
		
	ИначеЕсли  ИзмененнаяКолонка="ИтоговоеЗначение" Тогда
		
		ТекДанные.АбсКоррекция=ТекДанные.ИтоговоеЗначение-ТекДанные.ЗначениеЧисло;
		ТекДанные.ОтнКоррекция=?(ТекДанные.ЗначениеЧисло=0,0,((ТекДанные.ЗначениеЧисло+ТекДанные.АбсКоррекция)/ТекДанные.ЗначениеЧисло)-1)*100;
		
	КонецЕсли;
	
	ОбновитьТекСтрокаПоказатель();
	ОбновитьРаспределеиеКорректировки();
	ОбновитьТаблицуРасшифровки(ТекСтрокаПоказатель.Показатель);
		
КонецПроцедуры // РассчитатьСтрокуПоказателя()

&НаКлиенте
Процедура ОбновитьРаспределеиеКорректировки()
	
	Для Каждого Строка ИЗ ЭтаФорма[РабочаяТаблица] Цикл
		
		РассчитатьЗначенияКорректировки(Строка);
		
	КонецЦикла;
			
КонецПроцедуры // ОбновитьРаспределеиеКорректировки() 

&НаКлиенте
Процедура ТаблицаЗначенийПоказателейСпособРаспределенияПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ОргЗаполнитьПобазе()
		
	МассивКоэффСумм=РаспределитьКорректировку(ТекСтрокаПоказатель.АбсКоррекция,"ОргРаспределениеКорректировки","База");
	МассивКоэффПроц=РаспределитьКорректировку(100,"ОргРаспределениеКорректировки","База");
	
	Если МассивКоэффСумм=Неопределено Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке("Не удалось выполнить распределение по базе.",,,СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;
	
	Для Инд=0 по ОргРаспределениеКорректировки.Количество()-1 Цикл
		
		ТекДанные=ОргРаспределениеКорректировки[Инд];
		
		Текданные.АбсКоррекция=МассивКоэффСумм[Инд];
		ТекДанные.ДоляКорректировки=МассивКоэффПроц[Инд];
		
		Текданные.АбсКоррекцияДоч=ТекДанные.АбсКоррекция*?(ТекДанные.МетодКонсолидации=Перечисления.МетодыКонсолидации.Полная,1,?(ТекДанные.Доля=0,0,100/ТекДанные.Доля));
		ТекДанные.ИтоговоеЗначение=ТекДанные.ЗначениеЧисло+ТекДанные.АбсКоррекция;
		ТекДанные.ИтоговоеЗначениеДоч=ТекДанные.ИтоговоеЗначение*?(ТекДанные.МетодКонсолидации=Перечисления.МетодыКонсолидации.Полная,1,?(ТекДанные.Доля=0,0,100/ТекДанные.Доля));
		
	КонецЦикла;
	
КонецПроцедуры // ОргЗаполнитьПобазе()

&НаСервере
Процедура ПериодыЗаполнитьПоБазе()
	
	МассивКоэффСумм=РаспределитьКорректировку(ТекСтрокаПоказатель.АбсКоррекция,"ПериодРаспределениеКорректировки","База");
	МассивКоэффПроц=РаспределитьКорректировку(100,"ПериодРаспределениеКорректировки","База");
	
	Если МассивКоэффСумм=Неопределено Тогда
		Сообщить("Не удалось выполнить распределение по базе.");
		Возврат;
	КонецЕсли;
	
	Для Инд=0 по ПериодРаспределениеКорректировки.Количество()-1 Цикл
		
		ТекДанные=ПериодРаспределениеКорректировки[Инд];
		
		Текданные.АбсКоррекция=МассивКоэффСумм[Инд];
		ТекДанные.ДоляКорректировки=МассивКоэффПроц[Инд];
		
		ТекДанные.ИтоговоеЗначение=ТекДанные.ЗначениеЧисло+ТекДанные.АбсКоррекция;
		
	КонецЦикла;
		
КонецПроцедуры // ПериодыЗаполнитьПоБазе()

&НаКлиенте
Процедура ОргРаспределениеКорректировкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьТаблицуРасшифровки(ТекСтрокаПоказатель.Показатель);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРаспределениеКорректировкиДоляКорректировкиПриИзменении(Элемент)
	
	ТекДанные=Элементы.ПериодРаспределениеКорректировки.ТекущиеДанные;
	
	ТекДанные.АбсКоррекция=ТекСтрокаПоказатель.АбсКоррекция*ТекДанные.ДоляКорректировки/100;
	ТекДанные.ИтоговоеЗначение=ТекДанные.ЗначениеЧисло+ТекДанные.АбсКоррекция;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРаспределениеКорректировкиАбсКоррекцияПриИзменении(Элемент)
	
	ТекДанные=Элементы.ПериодРаспределениеКорректировки.ТекущиеДанные;
	ТекДанные.ДоляКорректировки=?(ТекСтрокаПоказатель.АбсКоррекция=0,0,100*ТекДанные.АбсКоррекция/ТекСтрокаПоказатель.АбсКоррекция);	
	ТекДанные.ИтоговоеЗначение=ТекДанные.ЗначениеЧисло+ТекДанные.АбсКоррекция;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРаспределениеКорректировкиИтоговоеЗначениеПриИзменении(Элемент)
	
	ТекДанные=Элементы.ПериодРаспределениеКорректировки.ТекущиеДанные;
	ТекДанные.АбсКоррекция=ТекДанные.ИтоговоеЗначение-ТекДанные.ЗначениеЧисло;	
	ТекДанные.ДоляКорректировки=?(ТекСтрокаПоказатель.АбсКоррекция=0,0,100*ТекДанные.АбсКоррекция/ТекСтрокаПоказатель.АбсКоррекция);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодЗаполнитьПоТекущему(Команда)
	
	МассивКоэффПроц=РаспределитьКорректировку(Элементы.ТаблицаЗначенийПоказателей.ТекущиеДанные.АбсКоррекция,"ПериодРаспределениеКорректировки","ЗначениеЧисло");
	
	Если МассивКоэффПроц=Неопределено Тогда
		Сообщить("не удалось выполнить распределение.");
		Возврат;
	КонецЕсли;
	
	Для Инд=0 по ПериодРаспределениеКорректировки.Количество()-1 Цикл
		
		ТекДанные=ПериодРаспределениеКорректировки[Инд];
				
		Текданные.АбсКоррекция=МассивКоэффПроц[Инд];
		ТекДанные.ДоляКорректировки=?(ТекСтрокаПоказатель.АбсКоррекция=0,0,100*ТекДанные.АбсКоррекция/ТекСтрокаПоказатель.АбсКоррекция);
		
		ТекДанные.ИтоговоеЗначение=ТекДанные.ЗначениеЧисло+ТекДанные.АбсКоррекция;
		
	КонецЦикла;
	
	ОбновитьТаблицуРасшифровки(Элементы.ТаблицаЗначенийПоказателей.ТекущиеДанные.Показатель);
	
КонецПроцедуры
