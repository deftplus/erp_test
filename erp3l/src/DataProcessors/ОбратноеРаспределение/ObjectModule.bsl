
Перем мЗначенияОперандов Экспорт;



//////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С РЕГИСТРОМ СВЕДЕНИЙ "БАЗЫ РАСПРЕДЕЛЕНИЯ ПО УМОЛЧАНИЮ"

// Функция возвращает все варианты настроек по умолчанию для переданного вида отчета
// Параметры:
//  ВидОтчета      - СправочникСсылка.ВидыОтчета - вид отчета, для которого нужно получить значение элемента.
//
Функция ВернутьДействующиеБазы(СтруктураРеквизитов) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитов.ВидОтчета) Тогда
		
		// Возвращаем только информационные базы, установленные для всех видов отчета.
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	БазыРаспределенияПоУмолчанию.ПоказательОтчета,
		|	БазыРаспределенияПоУмолчанию.ПравилоОбработки,
		|	БазыРаспределенияПоУмолчанию.Сценарий,
		|	БазыРаспределенияПоУмолчанию.СпособФормирования,
		|	БазыРаспределенияПоУмолчанию.Организация,
		|	БазыРаспределенияПоУмолчанию.ПериодОтчета,
		|	БазыРаспределенияПоУмолчанию.БазаРаспределения
		|ИЗ
		|	РегистрСведений.БазыРаспределенияПоУмолчанию КАК БазыРаспределенияПоУмолчанию
		|ГДЕ
		|	БазыРаспределенияПоУмолчанию.ВидОтчета = &ПустойВидОтчета";
		
		Если ЗначениеЗаполнено(СтруктураРеквизитов.БазаРаспределения) Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|И БазыРаспределенияПоУмолчанию.БазаРаспределения=&БазаРаспределения";
			
			Запрос.УстановитьПараметр("БазаРаспределения",СтруктураРеквизитов.БазаРаспределения);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураРеквизитов.ПериодОтчета) Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|И	БазыРаспределенияПоУмолчанию.ПериодОтчета В (&ПериодОтчета, &ПериодОтчетаПустаяСсылка)";
			
			Запрос.УстановитьПараметр("ПериодОтчета",СтруктураРеквизитов.ПериодОтчета);
			Запрос.УстановитьПараметр("ПериодОтчетаПустаяСсылка",Справочники.Периоды.ПустаяСсылка());
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураРеквизитов.Организация) Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|И БазыРаспределенияПоУмолчанию.Организация В (&Организация, &ОрганизацияПустаяСсылка)";
			
			Запрос.УстановитьПараметр("Организация",СтруктураРеквизитов.Организация);
			Запрос.УстановитьПараметр("ОрганизацияПустаяСсылка",Справочники.Организации.ПустаяСсылка());
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураРеквизитов.Сценарий) Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|И	БазыРаспределенияПоУмолчанию.Сценарий В (&Сценарий, &СценарийПустаяСсылка)";
			
			Запрос.УстановитьПараметр("Сценарий",СтруктураРеквизитов.Сценарий);
			Запрос.УстановитьПараметр("СценарийПустаяСсылка",Справочники.Сценарии.ПустаяСсылка());
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураРеквизитов.СпособФормирования) Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|И	БазыРаспределенияПоУмолчанию.СпособФормирования В (&СпособФормирования, &СпособФормированияПустаяСсылка)";
			
			Запрос.УстановитьПараметр("СпособФормирования",СтруктураРеквизитов.СпособФормирования);
			Запрос.УстановитьПараметр("СпособФормированияПустаяСсылка",Перечисления.СпособыФормированияОтчетов.ПустаяСсылка());
			
		КонецЕсли;
		
		
		Запрос.УстановитьПараметр("ПустойВидОтчета",Справочники.ВидыОтчетов.ПустаяСсылка());
		
		Возврат Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;	
	
	// Подготовим запрос для получения актуальных значений настроек по умолчанию
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТекущиеЗаписи.Сценарий,
	|	ТекущиеЗаписи.Организация,
	|	БазыРаспределения.База КАК БазаРаспределения,
	|	ТекущиеЗаписи.ПоказательОтчета,
	|	ТекущиеЗаписи.ПравилоОбработки,
	|	ТекущиеЗаписи.СпособФормирования,
	|	ТекущиеЗаписи.ПериодОтчета
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		БазыРаспределенияПоУмолчанию.Сценарий КАК Сценарий,
	|		БазыРаспределенияПоУмолчанию.Организация КАК Организация,
	|		БазыРаспределенияПоУмолчанию.ПоказательОтчета КАК ПоказательОтчета,
	|		БазыРаспределенияПоУмолчанию.ПравилоОбработки КАК ПравилоОбработки,
	|		БазыРаспределенияПоУмолчанию.СпособФормирования КАК СпособФормирования,
	|		БазыРаспределенияПоУмолчанию.ПериодОтчета КАК ПериодОтчета
	|	ИЗ
	|		РегистрСведений.БазыРаспределенияПоУмолчанию КАК БазыРаспределенияПоУмолчанию
	|	ГДЕ
	|		БазыРаспределенияПоУмолчанию.ВидОтчета = &ВидОтчетаЗапись
	|		И БазыРаспределенияПоУмолчанию.Сценарий = &Сценарий
	|		И БазыРаспределенияПоУмолчанию.Организация = &Организация
	|		И БазыРаспределенияПоУмолчанию.ПериодОтчета = &ПериодОтчета
	|		И БазыРаспределенияПоУмолчанию.ПравилоОбработки = &ПравилоОбработки
	|		И БазыРаспределенияПоУмолчанию.ПоказательОтчета = &ПоказательОтчета
	|		И БазыРаспределенияПоУмолчанию.СпособФормирования = &СпособФормирования) КАК ТекущиеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			БазыРаспределенияПоУмолчанию.Организация КАК Организация,
	|			БазыРаспределенияПоУмолчанию.Сценарий КАК Сценарий,
	|			БазыРаспределенияПоУмолчанию.ПериодОтчета.ДатаОкончания КАК ПериодОтчетаДатаОкончания,
	|			БазыРаспределенияПоУмолчанию.БазаРаспределения КАК База,
	|			БазыРаспределенияПоУмолчанию.ПоказательОтчета КАК ПоказательОтчета,
	|			БазыРаспределенияПоУмолчанию.ПравилоОбработки КАК ПравилоОбработки,
	|			БазыРаспределенияПоУмолчанию.СпособФормирования КАК СпособФормирования
	|		ИЗ
	|			РегистрСведений.БазыРаспределенияПоУмолчанию КАК БазыРаспределенияПоУмолчанию
	|		ГДЕ
	|			БазыРаспределенияПоУмолчанию.Организация В (&Организация, &ОрганизацияПустаяСсылка)
	|			И БазыРаспределенияПоУмолчанию.Сценарий В (&Сценарий, &СценарийПустаяСсылка)
	|			И (БазыРаспределенияПоУмолчанию.ВидОтчета = &ВидОтчета ИЛИ БазыРаспределенияПоУмолчанию.ВидОтчета=НЕОПРЕДЕЛЕНО)
	|			И БазыРаспределенияПоУмолчанию.ПериодОтчета В (&ПериодОтчета, &ПериодПустаяСсылка)
	|			И БазыРаспределенияПоУмолчанию.ПравилоОбработки В (&ПравилоОбработки, &ПравилоОбработкиПустаяСсылка)
	|			И БазыРаспределенияПоУмолчанию.ПоказательОтчета В (&ПоказательОтчета, &ПоказательОтчетаПустаяСсылка)
	|			И БазыРаспределенияПоУмолчанию.СпособФормирования В (&СпособФормирования, &СпособФормированияПустаяСсылка)
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			ПоказательОтчета УБЫВ,
	|			ПравилоОбработки УБЫВ,
	|			СпособФормирования УБЫВ,
	|			Организация УБЫВ,
	|			Сценарий УБЫВ,
	|			ПериодОтчетаДатаОкончания УБЫВ) КАК БазыРаспределения
	|		ПО (ИСТИНА)";
	
	
	Запрос.УстановитьПараметр("ПериодПустаяСсылка", Справочники.Периоды.ПустаяСсылка());
	Запрос.УстановитьПараметр("СценарийПустаяСсылка", Справочники.Сценарии.ПустаяСсылка());
	Запрос.УстановитьПараметр("ОрганизацияПустаяСсылка", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПоказательОтчетаПустаяСсылка", Справочники.ПоказателиОтчетов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПравилоОбработкиПустаяСсылка", Справочники.ПравилаОбработки.ПустаяСсылка());
	Запрос.УстановитьПараметр("СпособФормированияПустаяСсылка", Перечисления.СпособыФормированияОтчетов.ПустаяСсылка());
	
	ЗапросЗаписи=Новый Запрос;
	ЗапросЗаписи.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	БазыРаспределенияПоУмолчанию.ВидОтчета,
	|	БазыРаспределенияПоУмолчанию.ПоказательОтчета,
	|	БазыРаспределенияПоУмолчанию.ПравилоОбработки,
	|	БазыРаспределенияПоУмолчанию.Сценарий,
	|	БазыРаспределенияПоУмолчанию.СпособФормирования,
	|	БазыРаспределенияПоУмолчанию.Организация,
	|	БазыРаспределенияПоУмолчанию.ПериодОтчета
	|ИЗ
	|	РегистрСведений.БазыРаспределенияПоУмолчанию КАК БазыРаспределенияПоУмолчанию
	|ГДЕ
	|	(БазыРаспределенияПоУмолчанию.ВидОтчета = &ВидОтчета ИЛИ БазыРаспределенияПоУмолчанию.ВидОтчета=НЕОПРЕДЕЛЕНО)";
	
	ЗапросЗаписи.УстановитьПараметр("ВидОтчета",СтруктураРеквизитов.ВидОтчета);
	
	ТабАктуальных=ЗапросЗаписи.Выполнить().Выгрузить();
	ТабАктуальных.Колонки.Добавить("БазаРаспределения",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.БазыРаспределения"));
	
	Для Каждого СтрАктуальные ИЗ ТабАктуальных Цикл
		
		// Если не заполнено значение "ВидОтчета" - значит, запись получена при установке базы для всех видов отчета.
		// Соответственно, при получении правил эти значения в этой записи учитываться не должны.
		
		Запрос.УстановитьПараметр("Организация",СтрАктуальные.Организация);
		Запрос.УстановитьПараметр("Сценарий",СтрАктуальные.Сценарий);
		Запрос.УстановитьПараметр("ПериодОтчета",СтрАктуальные.ПериодОтчета);
		Запрос.УстановитьПараметр("ПоказательОтчета",СтрАктуальные.ПоказательОтчета);
		Запрос.УстановитьПараметр("ПравилоОбработки",СтрАктуальные.ПравилоОбработки);
		Запрос.УстановитьПараметр("СпособФормирования",СтрАктуальные.СпособФормирования);
		
		Запрос.УстановитьПараметр("ВидОтчета",СтруктураРеквизитов.ВидОтчета);
		Запрос.УстановитьПараметр("ВидОтчетаЗапись",СтрАктуальные.ВидОтчета);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			ЗаполнитьЗначенияСвойств(СтрАктуальные,Результат);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабАктуальных 
	
КонецФункции

Функция ВернутьНастройкиПоРеквизитам(СтруктураРеквизитов,ТаблицаТекущихНастроек,ТекПоказательОтчета=Неопределено)
	
	ТекстУсловия="";
	ТекстПорядок="";
	
	Запрос=Новый Запрос;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.Организация) Тогда
		ТекстУсловия=ТекстУсловия+"
		|И Организация В(&Организация,&ПустаяОрганизация)";
		
		Запрос.УстановитьПараметр("Организация",СтруктураРеквизитов.Организация);
		Запрос.УстановитьПараметр("ПустаяОрганизация",Справочники.Организации.ПустаяСсылка());
		
		ТекстПорядок=ТекстПорядок+"
		|Организация УБЫВ,";
		
	Иначе
		
		ТекстПорядок=ТекстПорядок+"
		|Организация,";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.Сценарий) Тогда
		ТекстУсловия=ТекстУсловия+"
		|И Сценарий В(&Сценарий,&ПустойСценарий)";
		
		Запрос.УстановитьПараметр("Сценарий",СтруктураРеквизитов.Сценарий);
		Запрос.УстановитьПараметр("ПустойСценарий",Справочники.Сценарии.ПустаяСсылка());
		
		ТекстПорядок=ТекстПорядок+"
		|Сценарий УБЫВ,";
		
	Иначе
		
		ТекстПорядок=ТекстПорядок+"
		|Сценарий,";
		
	КонецЕсли;
	
	
	Если (ЗначениеЗаполнено(СтруктураРеквизитов.ПоказательОтчета) ИЛИ ЗначениеЗаполнено(ТекПоказательОтчета)) Тогда
		ТекстУсловия=ТекстУсловия+"
		|И ПоказательОтчета В(&ПоказательОтчета,&ПустойПоказательОтчета)";
		
		Запрос.УстановитьПараметр("ПоказательОтчета",?(ЗначениеЗаполнено(ТекПоказательОтчета),ТекПоказательОтчета,СтруктураРеквизитов.ПоказательОтчета));
		Запрос.УстановитьПараметр("ПустойПоказательОтчета",Справочники.ПоказателиОтчетов.ПустаяСсылка());
		
		ТекстПорядок=ТекстПорядок+"
		|ПоказательОтчета УБЫВ,";
		
	Иначе	
		
		ТекстПорядок=ТекстПорядок+"
		|ПоказательОтчета,";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.ПравилоОбработки) Тогда
		ТекстУсловия=ТекстУсловия+"
		|И ПравилоОбработки В(&ПравилоОбработки,&ПустоеПравилоОбработки)";
		
		Запрос.УстановитьПараметр("ПравилоОбработки",СтруктураРеквизитов.ПравилоОбработки);
		Запрос.УстановитьПараметр("ПустоеПравилоОбработки",Справочники.ПравилаОбработки.ПустаяСсылка());
		
		ТекстПорядок=ТекстПорядок+"
		|ПравилоОбработки УБЫВ,";
		
	Иначе	
		
		ТекстПорядок=ТекстПорядок+"
		|ПравилоОбработки,";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.СпособФормирования) Тогда
		ТекстУсловия=ТекстУсловия+"
		|И СпособФормирования В(&СпособФормирования,&ПустойСпособФормирования)";
		
		Запрос.УстановитьПараметр("СпособФормирования",СтруктураРеквизитов.СпособФормирования);
		Запрос.УстановитьПараметр("ПустойСпособФормирования",Перечисления.СпособыФормированияОтчетов.ПустаяСсылка());
		
		ТекстПорядок=ТекстПорядок+"
		|СпособФормирования УБЫВ,";
		
	Иначе	
		
		ТекстПорядок=ТекстПорядок+"
		|СпособФормирования,";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.ПериодОтчета) Тогда
		ТекстУсловия=ТекстУсловия+"
		|И ПериодОтчета В(&ПериодОтчета,&ПустойПериодОтчета)";
		
		Запрос.УстановитьПараметр("ПериодОтчета",СтруктураРеквизитов.ПериодОтчета);
		Запрос.УстановитьПараметр("ПустойПериодОтчета",Справочники.Периоды.ПустаяСсылка());
		
		ТекстПорядок=ТекстПорядок+"
		|ПериодОтчета.ДатаОкончания УБЫВ";
		
	Иначе	
		
		ТекстПорядок=ТекстПорядок+"
		|ПериодОтчета";
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстУсловия) Тогда
		
		Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		Запрос.Текст="Выбрать * Поместить ТекТабнастроек ИЗ &ТаблицаТекущихНастроек КАК ТаблицаТекущихНастроек";
		
		Запрос.УстановитьПараметр("ТаблицаТекущихНастроек",ТаблицаТекущихНастроек);
		Запрос.Выполнить();
		
		Запрос.Текст="Выбрать ПЕРВЫЕ 1 *
		|ИЗ ТекТабнастроек ГДЕ "+Сред(ТекстУсловия,4)+"
		|УПОРЯДОЧИТЬ ПО "+ТекстПорядок;
		
		Возврат Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Возврат ТаблицаТекущихНастроек;
		
	КонецЕсли;
	
КонецФункции // ВернутьСтрокуНастроек()


Функция ПолучитьСтруктуруРеквизитов()
	
	СтруктураРеквизитов=Новый Структура;
	СтруктураРеквизитов.Вставить("ВидОтчета",ВидОтчета);
	СтруктураРеквизитов.Вставить("Организация",Организация);
	СтруктураРеквизитов.Вставить("ПериодОтчета",ПериодОтчета);
	СтруктураРеквизитов.Вставить("Сценарий",Сценарий);
	СтруктураРеквизитов.Вставить("СпособФормирования",СпособФормирования);
	СтруктураРеквизитов.Вставить("БазаРаспределения");
	СтруктураРеквизитов.Вставить("ПравилоОбработки",ПравилоОбработки);
	СтруктураРеквизитов.Вставить("ПоказательОтчета");
	
	Возврат СтруктураРеквизитов;
	
КонецФункции // ПолучитьСтруктуруРеквизитов()

Функция ПолучитьТаблицуНастроек(СтруктураРеквизитов,ТаблицаТекущихНастроек=Неопределено,СписокПоказателей=Неопределено)
	
	Если ТаблицаТекущихНастроек=Неопределено Тогда
		ТаблицаТекущихНастроек=ВернутьДействующиеБазы(СтруктураРеквизитов);
	КонецЕсли;
	
	Если СписокПоказателей=Неопределено Тогда
		
		Возврат ВернутьНастройкиПоРеквизитам(СтруктураРеквизитов,ТаблицаТекущихНастроек);
		
	Иначе
		
		ТабНастройки=ТаблицаТекущихНастроек.СкопироватьКолонки();
		
		Для Каждого СтрПоказатель ИЗ СписокПоказателей Цикл
			
			ТекТабНастроек=ВернутьНастройкиПоРеквизитам(СтруктураРеквизитов,ТаблицаТекущихНастроек,СтрПоказатель.Значение);
			
			Если ТекТабНастроек.Количество()>0 Тогда // Существуют настройки для показателя
				
				ТекТабНастроек[0].ПоказательОтчета=СтрПоказатель.Значение;
				ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ТекТабНастроек,ТабНастройки);
				
			Иначе
				
				НоваяСтрока=ТабНастройки.Добавить();
				НоваяСтрока.ПоказательОтчета=СтрПоказатель.Значение;
				
			КонецЕсли;		
			
		КонецЦикла;
		
		Возврат ТабНастройки;
		
	КонецЕсли;		
	
КонецФункции // ПолучитьТаблицуНастроек()

Процедура ПолучитьБазыРаспределения() Экспорт
	
	СписокПоказателей=Новый СписокЗначений;
	СписокПоказателей.ЗагрузитьЗначения(ТаблицаЗначенийПоказателей.ВыгрузитьКолонку("Показатель"));
	
	ТаблицаБаз=ПолучитьТаблицуНастроек(ПолучитьСтруктуруРеквизитов(),,СписокПоказателей);
	
	Для Каждого СтрКорректировка ИЗ ТаблицаЗначенийПоказателей Цикл
		
		СтрБаза=ТаблицаБаз.Найти(СтрКорректировка.Показатель,"ПоказательОтчета");
		
		Если Не СтрБаза=Неопределено И ЗначениеЗаполнено(СтрБаза.БазаРаспределения) Тогда
			
			СтрКорректировка.БазаРаспределения=СтрБаза.БазаРаспределения;
			СтрКорректировка.СпособРаспределения=Перечисления.СпособыРаспределенияКорректировок.ПоБазеРаспределения;
			
		Иначе
			
			СтрКорректировка.СпособРаспределения=Перечисления.СпособыРаспределенияКорректировок.ПоПрофилюРаспределения;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры // ПолучитьБазыРаспределения()

Функция МинимальнаяРазностьДат() Экспорт
	
	Если МинимальнаяПериодичность=Перечисления.Периодичность.Год Тогда
		Возврат 300;
	ИначеЕсли МинимальнаяПериодичность=Перечисления.Периодичность.Полугодие Тогда
		Возврат 100;
	ИначеЕсли МинимальнаяПериодичность=Перечисления.Периодичность.Квартал Тогда
		Возврат 32;
	ИначеЕсли МинимальнаяПериодичность=Перечисления.Периодичность.Месяц Тогда
		Возврат 11;
	ИначеЕсли МинимальнаяПериодичность=Перечисления.Периодичность.Декада Тогда
		Возврат 8;
	ИначеЕсли МинимальнаяПериодичность=Перечисления.Периодичность.День Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // МинимальнаяРазностьДат() 	

Функция СоздатьКорректировкуОрганизации() Экспорт
		
	ДокументКорректировка = Документы.РучныеКорректировки.СоздатьДокумент();
	ДокументКорректировка.УстановитьНовыйНомер();
	
	//#Если Клиент Тогда
	ДокументКорректировка.Дата=ТекущаяДата();
	//#КонецЕсли
	
	ДокументКорректировка.ОсновнаяВалюта			= ОсновнаяВалюта;
	ДокументКорректировка.СпособВводаКорректировки	= Перечисления.СпособыВводаКорректировок.ОбратноеРаспределение;
	ДокументКорректировка.Сценарий					= Сценарий;
	ДокументКорректировка.Организация				= Организация;
	ДокументКорректировка.ПериодОтчета				= ПериодОтчета;	
	ДокументКорректировка.Исполнитель				= ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	
	ДокументКорректировка.ИсточникКорректировки=ЭкземплярОтчета.Ссылка;
	
	НоваяОперация = ДокументКорректировка.Операции.Добавить();
	НоваяОперация.НомерОперации	= 1;
	НоваяОперация.Наименование	= "Обратное распределение";
	НоваяОперация.Элиминация	= Ложь;
	
	Для Каждого СтрПоказатель ИЗ ТаблицаЗначенийПоказателей Цикл
		
		СтруктураПоиска=Новый Структура("Показатель",СтрПоказатель.Показатель);
		
		МассивСтрок=ТаблицаРаспределенияКорректировки.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрКорректировка ИЗ МассивСтрок Цикл
			
			Если СтрКорректировка.АбсКоррекцияДоч=0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяЗапись=ДокументКорректировка.РедактируемыеЗаписи.Добавить();
			НоваяЗапись.Комментарий=СтрПоказатель.Комментарий;
			НоваяЗапись.НомерОперации=1;
			НоваяЗапись.РаспределятьПоАналитикам=НЕ РаспределениеИтоговыхЗначений;
			НоваяЗапись.Организация=СтрКорректировка.Организация;
			НоваяЗапись.Показатель=СтрПоказатель.Показатель;
			
			Если ЗначениеЗаполнено(СтрКорректировка.Регистратор) Тогда	
				НоваяЗапись.ЭкземплярОтчета=СтрКорректировка.Регистратор;
			Иначе
				ТекКомментарий="Отчет создан при формировании обратного распределения.";
				НоваяЗапись.ЭкземплярОтчета=ДокументКорректировка.ПолучитьЭкземплярОтчета(НоваяЗапись.Организация,НоваяЗапись.Показатель.Владелец,ДокументКорректировка.Сценарий,Истина,Истина,ТекКомментарий);	
			КонецЕсли;	
			
			НоваяЗапись.Значение=СтрКорректировка.АбсКоррекцияДоч;
			
			Если РаспределениеИтоговыхЗначений Тогда // Создадим записи корректировок значений по аналитикам
				
				СтруктураПоиска=Новый Структура("Показатель",СтрПоказатель.Показатель);
				ТекЭкземплярОтчета=НоваяЗапись.ЭкземплярОтчета;
				
				МассивАналитик=ТаблицаЗначенийАналитик.НайтиСтроки(СтруктураПоиска);	
				ДоляКорректировкиДоч=СтрКорректировка.ДоляКорректировки*?(СтрКорректировка.Доля=0,0,100/СтрКорректировка.Доля)/100;
				
				Для Каждого СтрАналитика ИЗ МассивАналитик Цикл
					
					ЗаписьАналитика=ДокументКорректировка.РедактируемыеЗаписи.Добавить();
					ЗаписьАналитика.Комментарий=СтрПоказатель.Комментарий;
					ЗаписьАналитика.НомерОперации=1;
					ЗаписьАналитика.РаспределятьПоАналитикам=Ложь;
					ЗаписьАналитика.Раскрытие=Истина;
					ЗаписьАналитика.Организация=СтрКорректировка.Организация;
					ЗаписьАналитика.ЭкземплярОтчета=ТекЭкземплярОтчета;
					
					ЗаполнитьЗначенияСвойств(ЗаписьАналитика,СтрАналитика);
					ЗаписьАналитика.Значение = СтрАналитика.Значение*ДоляКорректировкиДоч;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ДокументКорректировка.РедактируемыеЗаписи.Количество()=0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыОбработки=Новый Структура;
	ПараметрыОбработки.Вставить("ДокументОбъект",		ДокументКорректировка);
	ПараметрыОбработки.Вставить("НомерОперации",		1);
	ПараметрыОбработки.Вставить("ШаблонОперации",		Неопределено);
	ПараметрыОбработки.Вставить("ТаблицаСтрок",			Неопределено);
	ПараметрыОбработки.Вставить("ОчищатьЗаписи",		Ложь);
	ПараметрыОбработки.Вставить("Сбалансированная",		Ложь);
	ПараметрыОбработки.Вставить("Трансформационная",	Ложь);
	ПараметрыОбработки.Вставить("АбсолютныеЗначения",	Ложь);
	
	ТаблицаЗаписей=Обработки.КорректировкиЗначенийПоказателей.ОбработатьРедактируемыеСтроки(ПараметрыОбработки);
	
	Если ТаблицаЗаписей.Количество()>0 Тогда
		
		Попытка
			
			ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей,ДокументКорректировка.Записи);
			ДокументКорректировка.Записать(РежимЗаписиДокумента.Проведение);
			
			#Если Клиент Тогда
				
				Оповестить("ЗаписанаРучнаяКорректировкаВФорме",ДокументКорректировка.Записи.Выгрузить());
				
			#КонецЕсли
			
			// Каскадное распределение
			
			Если КаскадноеРаспределениеПериоды Тогда
				
				РаспределитьПоПериодам(ДокументКорректировка.Ссылка);
				
			ИначеЕсли КаскадноеРаспределениеОрганизации Тогда
				
				РаспределитьПоОрганизациям(ДокументКорректировка.Ссылка);
				
			КонецЕсли;
			
			Возврат Истина
			
		Исключение
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
	Иначе
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке("Ошибка при формировании документа ручных корректировок. Операция не выполнена",СтатусСообщения.Внимание);
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции // СоздатьКорректировкуОрганизации()

Процедура РаспределитьПоПериодам(ДокументКорректировки)
	
	// Получим периоды, родителем которых является текущий, 
	// и длительность которых больше установленной минимальной.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Периоды.Ссылка КАК Период
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	Периоды.Родитель = &ПериодОтчета
	|	И Периоды.Периодичность <> &ДевятьМесяцев
	|	И (НЕ Периоды.Произвольный)
	|	И РАЗНОСТЬДАТ(Периоды.ДатаНачала, Периоды.ДатаОкончания, ДЕНЬ) > &МинимальнаяРазностьДат";
	
	Запрос.УстановитьПараметр("ПериодОтчета",			ДокументКорректировки.ПериодОтчета);
	Запрос.УстановитьПараметр("ДевятьМесяцев",			Перечисления.Периодичность.ДевятьМесяцев);
	Запрос.УстановитьПараметр("МинимальнаяРазностьДат",	МинимальнаяРазностьДат());
	
	ТаблицаПериодов=Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаПериодов.Количество()=0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТаблицаПериодов.Колонки.Добавить("Показатель");
		
	// Получим экземпляры отчетов и корректировки, которые нужно распределить
	Запрос=Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РучныеКорректировкиРедактируемыеЗаписи.ЭкземплярОтчета КАК ЭкземплярОтчета,
	|	РучныеКорректировкиРедактируемыеЗаписи.Организация КАК Организация,
	|	РучныеКорректировкиРедактируемыеЗаписи.Показатель КАК Показатель,
	|	РучныеКорректировкиРедактируемыеЗаписи.Значение КАК Сумма,
	|	РучныеКорректировкиРедактируемыеЗаписи.ЭкземплярОтчета.ПравилоОбработки КАК ПравилоОбработки,
	|	РучныеКорректировкиРедактируемыеЗаписи.ЭкземплярОтчета.Сценарий КАК Сценарий,
	|	РучныеКорректировкиРедактируемыеЗаписи.ЭкземплярОтчета.ВидОтчета КАК ВидОтчета,
	|	ЕСТЬNULL(РегистрСостоянийОбъектов.СостояниеОбъекта, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.ПустаяСсылка)) КАК Состояние,
	|	РучныеКорректировкиРедактируемыеЗаписи.ЭкземплярОтчета.ОсновнаяВалюта КАК ОсновнаяВалюта,
	|	РучныеКорректировкиРедактируемыеЗаписи.ЭкземплярОтчета.ПериодОтчета КАК ПериодОтчета,
	|	РучныеКорректировкиРедактируемыеЗаписи.Аналитика1 КАК Аналитика1,
	|	РучныеКорректировкиРедактируемыеЗаписи.Аналитика2 КАК Аналитика2,
	|	РучныеКорректировкиРедактируемыеЗаписи.Аналитика3 КАК Аналитика3,
	|	РучныеКорректировкиРедактируемыеЗаписи.Аналитика4 КАК Аналитика4,
	|	РучныеКорректировкиРедактируемыеЗаписи.Аналитика5 КАК Аналитика5,
	|	РучныеКорректировкиРедактируемыеЗаписи.Аналитика6 КАК Аналитика6,
	|	РучныеКорректировкиРедактируемыеЗаписи.Раскрытие КАК Раскрытие
	|ИЗ
	|	Документ.РучныеКорректировки.РедактируемыеЗаписи КАК РучныеКорректировкиРедактируемыеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(
	|				,
	|				Объект В
	|					(ВЫБРАТЬ
	|						т.ЭкземплярОтчета
	|					ИЗ
	|						Документ.РучныеКорректировки.РедактируемыеЗаписи КАК т
	|					ГДЕ
	|						т.Ссылка = &ДокументКорректировки)) КАК РегистрСостоянийОбъектов
	|		ПО РучныеКорректировкиРедактируемыеЗаписи.ЭкземплярОтчета = РегистрСостоянийОбъектов.Объект
	|ГДЕ
	|	РучныеКорректировкиРедактируемыеЗаписи.Ссылка = &ДокументКорректировки";
	
	Если НЕ ВсеСпособыПериоды Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|	И РучныеКорректировкиРедактируемыеЗаписи.ЭкземплярОтчета.СпособФормированияОтчета = &СпособФормированияОтчета";
		
		Запрос.УстановитьПараметр("СпособФормированияОтчета",Перечисления.СпособыФормированияОтчетов.АвтоматическиСвернувПоПериоду);
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭкземплярОтчета,
	|	Показатель,
	|	Раскрытие";
	
	Запрос.УстановитьПараметр("ДокументКорректировки", ДокументКорректировки);
	
	ТекЭкземплярОтчета=Неопределено;
	ТекОбработкаРаспределения=Неопределено;
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Если НЕ ТекЭкземплярОтчета=Результат.ЭкземплярОтчета Тогда
			
			Если НЕ ТекОбработкаРаспределения=Неопределено Тогда 
				
				ВыполнитьРаспределение(ТекОбработкаРаспределения);
				
			КонецЕсли;
			
			ТекОбработкаРаспределения=Обработки.ОбратноеРаспределение.Создать();
			ЗаполнитьЗначенияСвойств(ТекОбработкаРаспределения,Результат,,"ЭкземплярОтчета");
			
			ТекОбработкаРаспределения.ВсеСпособыОрганизации					= ВсеСпособыОрганизации;
			ТекОбработкаРаспределения.ВсеСпособыПериоды						= ВсеСпособыПериоды;
			ТекОбработкаРаспределения.КаскадноеРаспределениеОрганизации		= КаскадноеРаспределениеОрганизации;
			ТекОбработкаРаспределения.КаскадноеРаспределениеПериоды			= КаскадноеРаспределениеПериоды;
			ТекОбработкаРаспределения.СпособРаспределения					= Перечисления.СпособыОбратногоРаспределения.ПоПодчиненнымПериодам;
			ТекОбработкаРаспределения.МинимальнаяПериодичность				= МинимальнаяПериодичность;
			ТекОбработкаРаспределения.РаспределениеИтоговыхЗначений			= РаспределениеИтоговыхЗначений;
			ТекОбработкаРаспределения.ИспользованиеПредварительныхДанных	= ИспользованиеПредварительныхДанных;
			
			ТекОбработкаРаспределения.ЭкземплярОтчета						= Результат.ЭкземплярОтчета.ПолучитьОбъект();
			
			ТекЭкземплярОтчета = Результат.ЭкземплярОтчета;
			
		КонецЕсли;
		
		Если НЕ Результат.Раскрытие Тогда // Добавим строку в таблицу итоговых значений показателей
			
			СтрПоказатель=ТекОбработкаРаспределения.ТаблицаЗначенийПоказателей.Добавить();
			СтрПоказатель.Показатель=Результат.Показатель;
			СтрПоказатель.АбсКоррекция=Результат.Сумма;
			
			ТаблицаПериодов.ЗаполнитьЗначения(Результат.Показатель,"Показатель");	
			ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ТаблицаПериодов,ТекОбработкаРаспределения.ТаблицаРаспределенияКорректировки);
			
		Иначе
			
			СтрАналитика=ТекОбработкаРаспределения.ТаблицаЗначенийАналитик.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрАналитика,Результат);
			
			СтрАналитика.Показатель=Результат.Показатель;
			СтрАналитика.Значение=Результат.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ТекОбработкаРаспределения=Неопределено Тогда
		ВыполнитьРаспределение(ТекОбработкаРаспределения);
	КонецЕсли;

КонецПроцедуры // РаспределитьПоПериодам()

Процедура РаспределитьПоОрганизациям(ДокументКорректировки)
	
	// Получим из документа корректировки экземпляры отчетов и организации, имеющий тип "Консолидирующая";
	
	// Получим экземпляры отчетов и корректировки, которые нужно распределить
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	РучныеКорректировкиРедактируемыеЗаписи.ЭкземплярОтчета КАК ЭкземплярОтчета,
	|	РучныеКорректировкиРедактируемыеЗаписи.Организация,
	|	РучныеКорректировкиРедактируемыеЗаписи.Показатель КАК Показатель,
	|	РучныеКорректировкиРедактируемыеЗаписи.Значение,
	|	РучныеКорректировкиРедактируемыеЗаписи.ЭкземплярОтчета.ПравилоОбработки КАК ПравилоОбработки,
	|	РучныеКорректировкиРедактируемыеЗаписи.ЭкземплярОтчета.Сценарий КАК Сценарий,
	|	РучныеКорректировкиРедактируемыеЗаписи.ЭкземплярОтчета.ВидОтчета КАК ВидОтчета,
	|	ЕСТЬNULL(РегистрСостоянийОбъектов.СостояниеОбъекта, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.ПустаяСсылка)) КАК Состояние,
	|	РучныеКорректировкиРедактируемыеЗаписи.ЭкземплярОтчета.ОсновнаяВалюта КАК ОсновнаяВалюта,
	|	РучныеКорректировкиРедактируемыеЗаписи.ЭкземплярОтчета.ПериодОтчета КАК ПериодОтчета,
	|	РучныеКорректировкиРедактируемыеЗаписи.Аналитика1,
	|	РучныеКорректировкиРедактируемыеЗаписи.Аналитика2,
	|	РучныеКорректировкиРедактируемыеЗаписи.Аналитика3,
	|	РучныеКорректировкиРедактируемыеЗаписи.Аналитика4,
	|	РучныеКорректировкиРедактируемыеЗаписи.Аналитика5,
	|	РучныеКорректировкиРедактируемыеЗаписи.Аналитика6,
	|	РучныеКорректировкиРедактируемыеЗаписи.Раскрытие КАК Раскрытие
	|ИЗ
	|	Документ.РучныеКорректировки.РедактируемыеЗаписи КАК РучныеКорректировкиРедактируемыеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(
	|				,
	|				Объект В
	|					(ВЫБРАТЬ
	|						т.ЭкземплярОтчета
	|					ИЗ
	|						Документ.РучныеКорректировки.РедактируемыеЗаписи КАК т
	|					ГДЕ
	|						т.Ссылка = &ДокументКорректировки)) КАК РегистрСостоянийОбъектов
	|		ПО РучныеКорректировкиРедактируемыеЗаписи.ЭкземплярОтчета = РегистрСостоянийОбъектов.Объект
	|ГДЕ
	|	РучныеКорректировкиРедактируемыеЗаписи.Ссылка = &ДокументКорректировки
	|	И РучныеКорректировкиРедактируемыеЗаписи.Организация.ТипОрганизации = &Консолидирующая";
	
	Если НЕ ВсеСпособыОрганизации Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|	И РучныеКорректировкиРедактируемыеЗаписи.ЭкземплярОтчета.СпособФормированияОтчета = &СпособФормированияОтчета";
		
		Запрос.УстановитьПараметр("СпособФормированияОтчета", Перечисления.СпособыФормированияОтчетов.АвтоматическиКонсолидация);
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭкземплярОтчета,
	|	Показатель,
	|	Раскрытие";
	
	Запрос.УстановитьПараметр("ДокументКорректировки",ДокументКорректировки);
	Запрос.УстановитьПараметр("Консолидирующая",Перечисления.ТипыОрганизационныхЕдиниц.Консолидирующая);
	
	ТекЭкземплярОтчета=Неопределено;
	ТекОбработкаРаспределения=Неопределено;
	
	ТабДанныеРаспределения=Запрос.Выполнить().Выгрузить();
	
	// Получим составы периметров для консолидирующих организаций
	
	ТабОрганизации=ТабДанныеРаспределения.Скопировать();
	ТабОрганизации.Свернуть("Организация");
	
	СоставыПериметров=Новый Соответствие;
	
	Для Каждого СтрОрганизация ИЗ ТабОрганизации Цикл
		
		ТекСоставПериметра = УправлениеРабочимиПроцессамиУХ.ПолучитьСоставПериметраКонсолидации(
										Сценарий, 
										ДокументКорректировки.Период,
										,,,,,
										СтрОрганизация.Организация);
										
		ТекСоставПериметра.Колонки.ПолнаяДоляГруппы.Имя="Доля";
		ТекСоставПериметра.Колонки.ИндивидуальнаяОрганизация.Имя="Организация";
		
		СоставыПериметров.Вставить(СтрОрганизация.Организация, ТекСоставПериметра);
		
	КонецЦикла;
	
	Для Каждого СтрРаспределения ИЗ ТабДанныеРаспределения Цикл
		
		Если НЕ ТекЭкземплярОтчета=СтрРаспределения.ЭкземплярОтчета Тогда
			
			Если НЕ ТекОбработкаРаспределения=Неопределено Тогда 
				
				ВыполнитьРаспределение(ТекОбработкаРаспределения);
				
			КонецЕсли;
			
			СоставПериметра=СоставыПериметров[СтрРаспределения.Организация];
			
			Если СоставПериметра.Количество()=0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекОбработкаРаспределения=Обработки.ОбратноеРаспределение.Создать();
			ЗаполнитьЗначенияСвойств(ТекОбработкаРаспределения,СтрРаспределения,,"ЭкземплярОтчета");
			
			ТекОбработкаРаспределения.ВсеСпособыОрганизации=ВсеСпособыОрганизации;
			ТекОбработкаРаспределения.ВсеСпособыПериоды=ВсеСпособыПериоды;
			ТекОбработкаРаспределения.КаскадноеРаспределениеОрганизации=КаскадноеРаспределениеОрганизации;
			ТекОбработкаРаспределения.КаскадноеРаспределениеПериоды=КаскадноеРаспределениеПериоды;
			ТекОбработкаРаспределения.СпособРаспределения=Перечисления.СпособыОбратногоРаспределения.ПоОрганизациямПериметра;
			ТекОбработкаРаспределения.МинимальнаяПериодичность=МинимальнаяПериодичность;
			ТекОбработкаРаспределения.РаспределениеИтоговыхЗначений=РаспределениеИтоговыхЗначений;
			ТекОбработкаРаспределения.ИспользованиеПредварительныхДанных=ИспользованиеПредварительныхДанных;
			
			ТекОбработкаРаспределения.ЭкземплярОтчета=СтрРаспределения.ЭкземплярОтчета.ПолучитьОбъект();
			ТекЭкземплярОтчета=СтрРаспределения.ЭкземплярОтчета;
			
		КонецЕсли;
		
		Если НЕ СтрРаспределения.Раскрытие Тогда // Добавим строку в таблицу итоговых значений показателя
			
			СтрПоказатель=ТекОбработкаРаспределения.ТаблицаЗначенийПоказателей.Добавить();
			СтрПоказатель.Показатель=СтрРаспределения.Показатель;
			СтрПоказатель.АбсКоррекция=СтрРаспределения.Сумма;
			
			СоставПериметра.Колонки.Добавить("Показатель");
			СоставПериметра.ЗаполнитьЗначения(СтрРаспределения.Показатель,"Показатель");
			
			ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(СоставПериметра,ТекОбработкаРаспределения.ТаблицаРаспределенияКорректировки);
			
		Иначе  // Добавим строку в таблицу значений аналитик
			
			СтрАналитика=ТекОбработкаРаспределения.ТаблицаЗначенийАналитик.Добавить();
			ЗаполнитьЗначенияСвойств(СтрАналитика,СтрРаспределения);
			СтрАналитика.Значение=СтрРаспределения.Сумма;
			СтрАналитика.Показатель=СтрРаспределения.Показатель;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ТекОбработкаРаспределения=Неопределено Тогда
		ВыполнитьРаспределение(ТекОбработкаРаспределения);
	КонецЕсли;
	
	
КонецПроцедуры // РаспределитьПоОрганизациям()

Функция СформироватьКорректировки() Экспорт
	
	НачатьТранзакцию();
	
	Если СпособРаспределения=Перечисления.СпособыОбратногоРаспределения.ПоОрганизациямПериметра Тогда
		
		Если СоздатьКорректировкуОрганизации() Тогда
			
			ЗафиксироватьТранзакцию();
			
			#Если Клиент Тогда
			
			ТекПараметр=Новый Структура("ЭкземплярОтчета,ТаблицаПоказателей",ЭкземплярОтчета,ТаблицаЗначенийПоказателей.Выгрузить());
			Оповестить("РаспределеноИзменениеИтоговогоЗначения",ТекПараметр);
			
			#КонецЕсли
			
			Возврат Истина;
			
		Иначе
			
			ОтменитьТранзакцию();
			Возврат Ложь;
			
		КонецЕсли;
		
	ИначеЕсли СпособФормирования=Перечисления.СпособыФормированияОтчетов.АвтоматическиСвернувПоАналитикам Тогда
		//
	ИначеЕсли СпособРаспределения=Перечисления.СпособыОбратногоРаспределения.ПоПодчиненнымПериодам Тогда
		
		Если СоздатьКорректировкуПериоды() Тогда
			
			ЗафиксироватьТранзакцию();
			
			#Если Клиент Тогда
			ТекПараметр=Новый Структура("ЭкземплярОтчета,ТаблицаПоказателей",ЭкземплярОтчета,ТаблицаЗначенийПоказателей.Выгрузить());
			Оповестить("РаспределеноИзменениеИтоговогоЗначения",ТекПараметр);
			#КонецЕсли
			
			Возврат Истина;
			
		Иначе
			
			ОтменитьТранзакцию();
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // 

Функция СоздатьКорректировкуПериоды() Экспорт
		
	ТабПериоды=ТаблицаРаспределенияКорректировки.Выгрузить();
	ТабПериоды.Свернуть("Период");
	
	ТекОрганизация=Организация;
	
	Для Каждого СтрПериод ИЗ ТабПериоды Цикл
		
		ДокументКорректировка = Документы.РучныеКорректировки.СоздатьДокумент();
		ДокументКорректировка.УстановитьНовыйНомер();
		
		ДокументКорректировка.Дата = ТекущаяДата();
				
		ДокументКорректировка.ОсновнаяВалюта			= ОсновнаяВалюта;
		ДокументКорректировка.СпособВводаКорректировки	= Перечисления.СпособыВводаКорректировок.ОбратноеРаспределение;
		ДокументКорректировка.Сценарий					= Сценарий;
		ДокументКорректировка.ПериодОтчета				= СтрПериод.Период;
		ДокументКорректировка.Организация				= Организация;		
		ДокументКорректировка.ОсновнаяВалюта			= ОсновнаяВалюта;
		ДокументКорректировка.Исполнитель				= ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
		
		ДокументКорректировка.ИсточникКорректировки = ЭкземплярОтчета.Ссылка;
		
		НоваяОперация = ДокументКорректировка.Операции.Добавить();
		НоваяОперация.НомерОперации	= 1;
		НоваяОперация.Наименование	= "Обратное распределение";
		НоваяОперация.Элиминация	= Ложь;
		
		Для Каждого СтрПоказатель ИЗ ТаблицаЗначенийПоказателей Цикл
						
			СтруктураПоиска=Новый Структура;
			СтруктураПоиска.Вставить("Показатель",СтрПоказатель.Показатель);
			СтруктураПоиска.Вставить("Период",СтрПериод.Период);
			
			МассивСтрок=ТаблицаРаспределенияКорректировки.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрКорректировка ИЗ МассивСтрок Цикл
				
				Если СтрКорректировка.АбсКоррекция=0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяЗапись = ДокументКорректировка.РедактируемыеЗаписи.Добавить();
				
				НоваяЗапись.Комментарий					= СтрПоказатель.Комментарий;
				НоваяЗапись.НомерОперации				= 1;
				НоваяЗапись.РаспределятьПоАналитикам	= НЕ РаспределениеИтоговыхЗначений;
				НоваяЗапись.Организация					= ТекОрганизация;
				НоваяЗапись.Показатель					= СтрПоказатель.Показатель;
				
				Если ЗначениеЗаполнено(СтрКорректировка.Регистратор) Тогда	
					НоваяЗапись.ЭкземплярОтчета=СтрКорректировка.Регистратор;
				Иначе
					ТекКомментарий="Отчет создан при формировании обратного распределения.";
					НоваяЗапись.ЭкземплярОтчета=ДокументКорректировка.ПолучитьЭкземплярОтчета(НоваяЗапись.Организация,НоваяЗапись.Показатель.Владелец,ДокументКорректировка.Сценарий,Истина,Истина,ТекКомментарий);	
				КонецЕсли;
				
				НоваяЗапись.Значение=СтрКорректировка.АбсКоррекция;
				
				Если РаспределениеИтоговыхЗначений Тогда // Создадим записи корректировок значений по аналитикам
					
					СтруктураПоиска=Новый Структура("Показатель",СтрПоказатель.Показатель);
					ТекЭкземплярОтчета=НоваяЗапись.ЭкземплярОтчета;
					
					МассивАналитик=ТаблицаЗначенийАналитик.НайтиСтроки(СтруктураПоиска);	
						
					Для Каждого СтрАналитика ИЗ МассивАналитик Цикл
						
						ЗаписьАналитика=ДокументКорректировка.РедактируемыеЗаписи.Добавить();
						ЗаписьАналитика.Комментарий=СтрПоказатель.Комментарий;
						ЗаписьАналитика.НомерОперации=1;
						ЗаписьАналитика.РаспределятьПоАналитикам=Ложь;
						ЗаписьАналитика.Раскрытие=Истина;
						ЗаписьАналитика.Организация=ТекОрганизация;
						ЗаписьАналитика.ЭкземплярОтчета=ТекЭкземплярОтчета;
						
						ЗаполнитьЗначенияСвойств(ЗаписьАналитика,СтрАналитика);
						ЗаписьАналитика.Сумма=СтрАналитика.Значение*СтрКорректировка.ДоляКорректировки/100;
						
					КонецЦикла;
					
				КонецЕсли;
	
			КонецЦикла;
			
		КонецЦикла;
		
		Если ДокументКорректировка.РедактируемыеЗаписи.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОбработки=Новый Структура;
		ПараметрыОбработки.Вставить("ДокументОбъект",		ДокументКорректировка);
		ПараметрыОбработки.Вставить("НомерОперации",		1);
		ПараметрыОбработки.Вставить("ШаблонОперации",		Неопределено);
		ПараметрыОбработки.Вставить("ТаблицаСтрок",			Неопределено);
		ПараметрыОбработки.Вставить("ОчищатьЗаписи",		Ложь);
		ПараметрыОбработки.Вставить("Сбалансированная",		Ложь);
		ПараметрыОбработки.Вставить("Трансформационная",	Ложь);
		ПараметрыОбработки.Вставить("АбсолютныеЗначения",	Ложь);
		
		ТаблицаЗаписей=Обработки.КорректировкиЗначенийПоказателей.ОбработатьРедактируемыеСтроки(ПараметрыОбработки);
		
		Если ТаблицаЗаписей.Количество()>0 Тогда
			
			Попытка
				
				ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей,ДокументКорректировка.Записи);
				ДокументКорректировка.Записать(РежимЗаписиДокумента.Проведение);
				
				#Если Клиент Тогда
					
					Оповестить("ЗаписанаРучнаяКорректировкаВФорме",ДокументКорректировка.Записи.Выгрузить());
					
				#КонецЕсли
				
				// Каскадное распределение
				
				Если КаскадноеРаспределениеОрганизации Тогда
					
					РаспределитьПоОрганизациям(ДокументКорректировка.Ссылка);
					
				ИначеЕсли КаскадноеРаспределениеПериоды Тогда
					
					РаспределитьПоПериодам(ДокументКорректировка.Ссылка);
					
				КонецЕсли;
				
			Исключение
				
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ОписаниеОшибки());
				Возврат Ложь;
				
			КонецПопытки;
			
		Иначе
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке("Ошибка при формировании документа ручных корректировок. Операция не выполнена",СтатусСообщения.Внимание);
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // СоздатьКорректировкуОрганизации()

Процедура ВыполнитьРаспределение(ТекОбработкаРаспределения=Неопределено) Экспорт
	
	Если ТекОбработкаРаспределения=Неопределено Тогда
		ТекОбработкаРаспределения=ЭтотОбъект;
	КонецЕсли;
	
	ТекОбработкаРаспределения.ПолучитьБазыРаспределения();
	
	Для Каждого СтрРаспределение ИЗ ТекОбработкаРаспределения.ТаблицаЗначенийПоказателей Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрРаспределение.БазаРаспределения) Тогда
				
				ТекстСообщения="Не удалось определить базу распределения по умолчанию:
				|Вид отчета: 		"+ТекОбработкаРаспределения.ВидОтчета+"
				|Сценарий: 			"+ТекОбработкаРаспределения.Сценарий+"
				|Организация: 		"+ТекОбработкаРаспределения.Организация+"
				|Период отчета: 	"+ТекОбработкаРаспределения.ПериодОтчета+"
				|Правило обработки: "+ТекОбработкаРаспределения.ПравилоОбработки+"
				|Способ формирования: "+ТекОбработкаРаспределения.СпособФормирования+"
				|Показатель: 		"+СтрРаспределение.Показатель+"
				|Распределение отменено.";
	
					
			ВызватьИсключение(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекОбработкаРаспределения.ЗаполнитьБазыРаспределения();	
	
	Если ТекОбработкаРаспределения.СпособРаспределения=Перечисления.СпособыОбратногоРаспределения.ПоПодчиненнымПериодам Тогда
		ТекОбработкаРаспределения.СоздатьКорректировкуПериоды();
	ИначеЕсли ТекОбработкаРаспределения.СпособРаспределения=Перечисления.СпособыОбратногоРаспределения.ПоОрганизациямПериметра Тогда
		ТекОбработкаРаспределения.СоздатьКорректировкуОрганизации();
	КонецЕсли;
	
	ТекОбработкаРаспределения=Неопределено;	
	
КонецПроцедуры // ВыполнитьРаспределение() 

Процедура ПолучитьТаблицуОперандаОрганизации(СтрПоказатель) Экспорт
	
	ПостроительЗапросаВнутр=Новый ПостроительЗапроса;
	
	//////////// Настраиваем построитель запроса ////////////////////
	
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",СтрПоказатель.БазаРаспределения.ПоказательОтбор.Владелец);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",Истина);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",Истина);
	ДанныеЗапроса.Вставить("ТолькоЧисловые",Истина);
	ДанныеЗапроса.Вставить("ГруппироватьЗначения",Ложь);
	ДанныеЗапроса.Вставить("ДляТекстаПостроителя",Истина);
	
	ДополнительныеПоля=Новый Соответствие;
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Ссылка","Версия");	
	ДанныеЗапроса.Вставить("ДополнительныеПоля",ДополнительныеПоля);

	
	ОтборПоказателей=Новый Соответствие;
	ОтборПоказателей.Вставить("#### = &ПоказательОтбор",Новый Структура("ПоказательОтбор",СтрПоказатель.БазаРаспределения.ПоказательОтбор));
	
	ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
		
	СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	ПостроительЗапросаВнутр.Текст=СтруктураЗапроса.ТекстЗапроса;
	
	Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
		
		ПостроительЗапросаВнутр.Параметры.Вставить(СтрПараметр.Ключ,СтрПараметр.Значение);

	КонецЦикла;
	
	ПостроительЗапросаВнутр.ЗаполнитьНастройки();
	ПостроительЗапросаВнутр.ВыбранныеПоля.Очистить();
	
	// Добавляем выбранные поля 
	Поле=ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("Организация","Организация");
	Поле=ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("Значение","Значение");
	Поле=ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("ИтоговоеЗначение","ИтогПоПоказателю");
	
	// Очистим отбор
	ОтборКоличество = ПостроительЗапросаВнутр.Отбор.Количество();
	
	Для Н = 1 По ОтборКоличество Цикл
		ПостроительЗапросаВнутр.Отбор.Удалить(ОтборКоличество - Н);
	КонецЦикла;
	
	// Добавляем отборы
	
	ТекПравилаВычисленияПараметров=СтрПоказатель.БазаРаспределения.ПравилаВычисленияПараметровЗапроса.Выгрузить();
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ИзКонтекста",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ЗначениеИзКонтекста");
	
	Для Каждого Параметр ИЗ ТекПравилаВычисленияПараметров Цикл
		
		Если Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется 
			ИЛИ Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ОрганизацияОтчета Тогда  // Отбор по организации отчета снимем, так как в данном случае он не имеет смысла.
			Продолжить;
			
		КонецЕсли;
		
		ОтборПараметр=ПостроительЗапросаВнутр.Отбор.Добавить(Параметр.ИмяПараметра);
		
		ОтборПараметр.Использование=Истина;
		
		СвойстваОтбора=ЭкземплярОтчета.ПолучитьСвойстваПараметра(Параметр);
		
		ОтборПараметр.ВидСравнения=СвойстваОтбора.ВидСравнения;
		ОтборПараметр.Значение=СвойстваОтбора.Значение;
		
	КонецЦикла;
	
	УправлениеОтчетамиУХ.ДобавитьОтборПоАктивностиПредварительныеДанные(ПостроительЗапросаВнутр, ЭкземплярОтчета, ИспользованиеПредварительныхДанных);
	
	ПостроительЗапросаВнутр.Выполнить();
	ТабРезультат=ПостроительЗапросаВнутр.Результат.Выгрузить();
	
	КопияРезультат=ТабРезультат.Скопировать();
	КопияРезультат.Свернуть("Организация");
	
	Для Каждого Строка ИЗ КопияРезультат Цикл
		
		ЕстьИтог  = Ложь;
		ИтогСумма = 0;
		
		МассивСтрок=ТабРезультат.НайтиСтроки(Новый Структура("Организация",Строка.Организация));
		
		Для Каждого СтрРезультат ИЗ МассивСтрок Цикл
			
			Если СтрРезультат.ИтогПоПоказателю Тогда
				
				Если ЕстьИтог Тогда
					
					СтруктураПоиска=Новый Структура;
					СтруктураПоиска.Вставить("Организация",Строка.Организация);
					СтруктураПоиска.Вставить("Показатель",СтрПоказатель.Показатель);
					
					МассивИтог=мЗначенияОперандов.НайтиСтроки(СтруктураПоиска);
					МассивИтог[0].Значение=МассивИтог[0].Значение+СтрРезультат.Значение;
					
				Иначе
					
					ЕстьИтог=Истина;
					НоваяСтрока=мЗначенияОперандов.Добавить();
					НоваяСтрока.Организация=Строка.Организация;
					НоваяСтрока.Показатель=СтрПоказатель.Показатель;
					НоваяСтрока.Значение=СтрРезультат.Значение;
					
				КонецЕсли;
				
			Иначе
				
				ИтогСумма=ИтогСумма+СтрРезультат.Значение;
				
			КонецЕсли;		
			
		КонецЦикла;
		
		Если НЕ ЕстьИтог Тогда
			
			НоваяСтрока=мЗначенияОперандов.Добавить();
			НоваяСтрока.Организация=Строка.Организация;
			НоваяСтрока.Показатель=СтрПоказатель.Показатель;
			НоваяСтрока.Значение=ИтогСумма;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ПолучитьТаблицуОперандаОрганизации()

Процедура ПолучитьТаблицуОперандаПериоды(СтрПоказатель) Экспорт
	
	ПостроительЗапросаВнутр=Новый ПостроительЗапроса;
		
	ПостроительЗапросаВнутр=Новый ПостроительЗапроса;
	
	//////////// Настраиваем построитель запроса ////////////////////
	
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",СтрПоказатель.БазаРаспределения.ПоказательОтбор.Владелец);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",Истина);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",Истина);
	ДанныеЗапроса.Вставить("ТолькоЧисловые",Истина);
	ДанныеЗапроса.Вставить("ГруппироватьЗначения",Ложь);
	ДанныеЗапроса.Вставить("ДляТекстаПостроителя",Истина);
	
	ДополнительныеПоля=Новый Соответствие;
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Ссылка","Версия");	
	ДанныеЗапроса.Вставить("ДополнительныеПоля",ДополнительныеПоля);
	
	ОтборПоказателей=Новый Соответствие;
	ОтборПоказателей.Вставить("#### = &ПоказательОтбор",Новый Структура("ПоказательОтбор",СтрПоказатель.БазаРаспределения.ПоказательОтбор));
	
	ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
		
	СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	ПостроительЗапросаВнутр.Текст=СтруктураЗапроса.ТекстЗапроса;
	
	Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
		
		ПостроительЗапросаВнутр.Параметры.Вставить(СтрПараметр.Ключ,СтрПараметр.Значение);
			
	КонецЦикла;	
	
	ПостроительЗапросаВнутр.ЗаполнитьНастройки();
	ПостроительЗапросаВнутр.ВыбранныеПоля.Очистить();
	
	// Добавляем выбранные поля 
	Поле=ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("ПериодОтчета","Период");
	Поле=ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("Значение","Значение");
	Поле=ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("ИтоговоеЗначение","ИтогПоПоказателю");
		
	// Очистим отбор
	ОтборКоличество = ПостроительЗапросаВнутр.Отбор.Количество();
	
	Для Н = 1 По ОтборКоличество Цикл
		ПостроительЗапросаВнутр.Отбор.Удалить(ОтборКоличество - Н);
	КонецЦикла;
	
	// Добавляем отборы
		
	ТекПравилаВычисленияПараметров=СтрПоказатель.БазаРаспределения.ПравилаВычисленияПараметровЗапроса.Выгрузить();
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ИзКонтекста",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ЗначениеИзКонтекста");
	
	СдвигПериодов=0;
	
	Для Каждого Параметр ИЗ ТекПравилаВычисленияПараметров Цикл
		
		Если Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда  // Отбор по организации отчета снимем, так как в данном случае он не имеет смысла.
			Продолжить;
			
		КонецЕсли;
		
		СвойстваОтбора=ЭкземплярОтчета.ПолучитьСвойстваПараметра(Параметр);
		
		Если Параметр.ИмяПараметра="ПериодОтчета" 
			И Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчета
			ИЛИ Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчетаСоСдвигом Тогда
			
			ОтборПараметр=ПостроительЗапросаВнутр.Отбор.Добавить("ПериодОтчета.ДатаНачала");
			ОтборПараметр.ВидСравнения=ВидСравнения.БольшеИлиРавно;
			ОтборПараметр.Значение=СвойстваОтбора.Значение.ДатаНачала;
			ОтборПараметр.Использование=Истина;
			
			ОтборПараметр=ПостроительЗапросаВнутр.Отбор.Добавить("ПериодОтчета.ДатаОкончания");
			ОтборПараметр.ВидСравнения=ВидСравнения.МеньшеИлиРавно;
			ОтборПараметр.Значение=СвойстваОтбора.Значение.ДатаОкончания;
			ОтборПараметр.Использование=Истина;
			
			ОтборПараметр=ПостроительЗапросаВнутр.Отбор.Добавить("ПериодОтчета.Периодичность");
			ОтборПараметр.ВидСравнения=ВидСравнения.Равно;
			ОтборПараметр.Значение=ЭкземплярОтчета.ПериодичностьСвертывания;
			ОтборПараметр.Использование=Истина;
			
			ОтборПараметр=ПостроительЗапросаВнутр.Отбор.Добавить("ПериодОтчета");
			ОтборПараметр.ВидСравнения=ВидСравнения.НеРавно;
			ОтборПараметр.Значение=СвойстваОтбора.Значение;
			ОтборПараметр.Использование=Истина;
			
			Если Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчетаСоСдвигом Тогда
				
				СдвигПериодов=УправлениеОтчетамиУХ.ПолучитьЗначениеИзХранилища(Параметр.УточнениеСпособаОпределения);
				
			КонецЕсли;
	
		Иначе
			
			ОтборПараметр=ПостроительЗапросаВнутр.Отбор.Добавить(Параметр.ИмяПараметра);
			
			ОтборПараметр.Использование=Истина;		
			ОтборПараметр.ВидСравнения=СвойстваОтбора.ВидСравнения;
			ОтборПараметр.Значение=СвойстваОтбора.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УправлениеОтчетамиУХ.ДобавитьОтборПоАктивностиПредварительныеДанные(ПостроительЗапросаВнутр, ЭкземплярОтчета, ИспользованиеПредварительныхДанных);
	
	ПостроительЗапросаВнутр.Выполнить();
	ТабРезультат=ПостроительЗапросаВнутр.Результат.Выгрузить();
	
	КопияРезультат=ТабРезультат.Скопировать();
	КопияРезультат.Свернуть("Период");
	
	Для Каждого Строка ИЗ КопияРезультат Цикл
		
		ЕстьИтог  = Ложь;
		ИтогСумма = 0;
		
		МассивСтрок=ТабРезультат.НайтиСтроки(Новый Структура("Период",Строка.Период));
		
		Для Каждого СтрРезультат ИЗ МассивСтрок Цикл
			
			Если СтрРезультат.ИтогПоПоказателю Тогда
				
				Если ЕстьИтог Тогда
					
					СтруктураПоиска=Новый Структура;
					СтруктураПоиска.Вставить("Период",ЭкземплярОтчета.ОтносительныйПериод(Строка.Период,СдвигПериодов*(-1)));
					СтруктураПоиска.Вставить("Показатель",СтрПоказатель.Показатель);
					
					МассивИтог=мЗначенияОперандов.НайтиСтроки(СтруктураПоиска);
					МассивИтог[0].Значение=МассивИтог[0].Значение+СтрРезультат.Значение;
					
				Иначе
					
					ЕстьИтог=Истина;
					НоваяСтрока=мЗначенияОперандов.Добавить();
					НоваяСтрока.Период=ЭкземплярОтчета.ОтносительныйПериод(Строка.Период,СдвигПериодов*(-1));
					НоваяСтрока.Показатель=СтрПоказатель.Показатель;
					НоваяСтрока.Значение=СтрРезультат.Значение;
					
				КонецЕсли;
				
			Иначе
				
				ИтогСумма=ИтогСумма+СтрРезультат.Значение;
				
			КонецЕсли;	

		КонецЦикла;
		
		Если НЕ ЕстьИтог Тогда
			
			НоваяСтрока=мЗначенияОперандов.Добавить();
			НоваяСтрока.Период=ЭкземплярОтчета.ОтносительныйПериод(Строка.Период,СдвигПериодов*(-1));
			НоваяСтрока.Показатель=СтрПоказатель.Показатель;
			НоваяСтрока.Значение=ИтогСумма;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ПолучитьТаблицуОперандаПериоды()

Процедура ЗаполнитьБазыРаспределенияОрганизации()
	
	мЗначенияОперандов=ТаблицаРаспределенияКорректировки.ВыгрузитьКолонки("Организация,Показатель");
	мЗначенияОперандов.Колонки.Добавить("Значение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	мЗначенияОперандов.Колонки.Добавить("Итог",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	
	Для Каждого СтрПоказатель ИЗ ТаблицаЗначенийПоказателей Цикл
		
		Если ЗначениеЗаполнено(СтрПоказатель.БазаРаспределения) Тогда
			
			ПолучитьТаблицуОперандаОрганизации(СтрПоказатель);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ *
	|ПОМЕСТИТЬ ТабРасшифровки
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник";
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаРаспределенияКорректировки);
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ *
	|ПОМЕСТИТЬ ТабОперандов
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник";
	Запрос.УстановитьПараметр("ВнешнийИсточник", мЗначенияОперандов);
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ *
	|ПОМЕСТИТЬ ТабПоказатели
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник";
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаЗначенийПоказателей);
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ ТО.Показатель,
	|	ТО.Значение
	|ПОМЕСТИТЬ ТабСвод
	|	ИЗ ТабОперандов КАК ТО
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабРасшифровки КАК ТР
	|	ПО ТО.Показатель=ТР.Показатель
	|	И  ТО.Организация=ТР.Организация";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ Свод.Показатель,
	|	Сумма(Свод.Значение) КАК Итог
	|ПОМЕСТИТЬ ТабИтоги
	|	ИЗ ТабСвод КАК Свод
	|	Сгруппировать По Свод.Показатель"; 
		
	Запрос.Выполнить();
	
	Запрос.Текст="ВЫБРАТЬ";
	
	Для Каждого Колонка ИЗ ТаблицаРаспределенияКорректировки.ВыгрузитьКолонки().Колонки Цикл
		
		Если НЕ (Колонка.Имя="База" ИЛИ Колонка.Имя="ДоляКорректировки"
			ИЛИ Колонка.Имя="АбсКоррекция") Тогда
			
			Запрос.Текст=Запрос.Текст+"
			
			|ТР."+Колонка.Имя+",";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|ЕСТЬNULL(ТО.Значение,0) КАК База,
	|ВЫБОР КОГДА (НЕ ТИ.Итог ЕСТЬ NULL)
	|	ТОГДА (ЕСТЬNULL(ТО.Значение,0)/ТИ.Итог)*100
	|	ИНАЧЕ 0 КОНЕЦ КАК ДоляКорректировки,
	|Показатели.АбсКоррекция*(ВЫБОР КОГДА (НЕ ТИ.Итог ЕСТЬ NULL)
	|	ТОГДА (ЕСТЬNULL(ТО.Значение,0)/ТИ.Итог)
	|	ИНАЧЕ 0 КОНЕЦ) КАК АбсКоррекция
	|ИЗ ТабРасшифровки КАК ТР
	|ЛЕВОЕ СОЕДИНЕНИЕ ТабОперандов КАК ТО
	|ПО ТР.Показатель=ТО.Показатель
	|И ТР.Организация=ТО.Организация
	|ЛЕВОЕ СОЕДИНЕНИЕ ТабПоказатели КАК Показатели
	|ПО ТР.Показатель=Показатели.Показатель
	|ЛЕВОЕ СОЕДИНЕНИЕ ТабИтоги КАК ТИ
	|ПО ТР.Показатель=ТИ.Показатель";
	
	ТаблицаРаспределенияКорректировки.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для Каждого Текданные ИЗ ТаблицаРаспределенияКорректировки Цикл
		
		Текданные.АбсКоррекцияДоч=ТекДанные.АбсКоррекция*?(ТекДанные.Доля=0,0,100/ТекДанные.Доля);
		ТекДанные.ИтоговоеЗначение=ТекДанные.ЗначениеЧисло+ТекДанные.АбсКоррекция;
		ТекДанные.ИтоговоеЗначениеДоч=ТекДанные.ИтоговоеЗначение*?(ТекДанные.Доля=0,0,100/ТекДанные.Доля);
		
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьБазыРаспределенияОрганизации()

Процедура ЗаполнитьБазыРаспределенияПериоды()
	
	мЗначенияОперандов=ТаблицаРаспределенияКорректировки.ВыгрузитьКолонки("Период,Показатель");
	мЗначенияОперандов.Колонки.Добавить("Значение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	
	Для Каждого СтрПоказатель ИЗ ТаблицаЗначенийПоказателей Цикл
		
		Если ЗначениеЗаполнено(СтрПоказатель.БазаРаспределения) Тогда
			
			ПолучитьТаблицуОперандаПериоды(СтрПоказатель);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ *
	|ПОМЕСТИТЬ ТабРасшифровки
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник";
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаРаспределенияКорректировки);
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ *
	|ПОМЕСТИТЬ ТабОперандов
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник";
	Запрос.УстановитьПараметр("ВнешнийИсточник", мЗначенияОперандов);
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ *
	|ПОМЕСТИТЬ ТабПоказатели
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник";
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаЗначенийПоказателей);
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ ТО.Показатель,
	|	ТО.Значение
	|ПОМЕСТИТЬ ТабСвод
	|	ИЗ ТабОперандов КАК ТО
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабРасшифровки КАК ТР
	|	ПО ТО.Показатель=ТР.Показатель
	|	И  ТО.Период=ТР.Период";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ Свод.Показатель,
	|	Сумма(Свод.Значение) КАК Итог
	|ПОМЕСТИТЬ ТабИтоги
	|	ИЗ ТабСвод КАК Свод
	|	Сгруппировать По Свод.Показатель"; 
		
	Запрос.Выполнить();
	
	Запрос.Текст="ВЫБРАТЬ";
	
	Для Каждого Колонка ИЗ ТаблицаРаспределенияКорректировки.ВыгрузитьКолонки().Колонки Цикл
		
		Если НЕ (Колонка.Имя="База" ИЛИ Колонка.Имя="ДоляКорректировки"
			ИЛИ Колонка.Имя="АбсКоррекция") Тогда
			
			Запрос.Текст=Запрос.Текст+"
			
			|ТР."+Колонка.Имя+",";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|ЕСТЬNULL(ТО.Значение,0) КАК База,
	|ВЫБОР КОГДА (НЕ ТИ.Итог ЕСТЬ NULL)
	|	ТОГДА (ЕСТЬNULL(ТО.Значение,0)/ТИ.Итог)*100
	|	ИНАЧЕ 0 КОНЕЦ КАК ДоляКорректировки,
	|Показатели.АбсКоррекция*(ВЫБОР КОГДА (НЕ ТИ.Итог ЕСТЬ NULL)
	|	ТОГДА (ЕСТЬNULL(ТО.Значение,0)/ТИ.Итог)
	|	ИНАЧЕ 0 КОНЕЦ) КАК АбсКоррекция
	|ИЗ 
	|	ТабРасшифровки КАК ТР
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТабОперандов КАК ТО
	|		ПО ТР.Показатель=ТО.Показатель
	|			И ТР.Период=ТО.Период
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТабПоказатели КАК Показатели
	|		ПО ТР.Показатель=Показатели.Показатель
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТабИтоги КАК ТИ
	|		ПО ТР.Показатель=ТИ.Показатель";
	
	ТаблицаРаспределенияКорректировки.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для Каждого Текданные ИЗ ТаблицаРаспределенияКорректировки Цикл
		
		ТекДанные.ИтоговоеЗначение=ТекДанные.ЗначениеЧисло+ТекДанные.АбсКоррекция;
		
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьБазыРаспределенияОрганизации()

// Процедуры формирования баз для распределения
//
Процедура ЗаполнитьБазыРаспределения() Экспорт
	
	Если СпособРаспределения=Перечисления.СпособыОбратногоРаспределения.ПоОрганизациямПериметра Тогда
		ЗаполнитьБазыРаспределенияОрганизации();
	ИначеЕсли СпособФормирования=Перечисления.СпособыФормированияОтчетов.АвтоматическиСвернувПоАналитикам Тогда
		//
	ИначеЕсли СпособРаспределения=Перечисления.СпособыОбратногоРаспределения.ПоПодчиненнымПериодам Тогда
		ЗаполнитьБазыРаспределенияПериоды();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьБазыРаспределения()