&НаКлиенте
Перем ФункцииПоказателей;

&НаКлиенте
Перем ИменаФормСправочников;

// УПРАВЛЕНИЕ ФОРМОЙ

&НаКлиенте
Процедура ВидимостьДоступность()
	
	Если НЕ (Элементы.СтраницыТекущаяФормула.ТекущаяСтраница = Элементы.СтраницыТекущаяФормула_Видимость_Истина) = (НЕ ПустаяСтрока(ТекущаяФормулаИмя)) Тогда
		Если ПустаяСтрока(ТекущаяФормулаИмя) Тогда
			Элементы.СтраницыТекущаяФормула.ТекущаяСтраница = Элементы.СтраницыТекущаяФормула_Видимость_Ложь;
		Иначе
			Элементы.СтраницыТекущаяФормула.ТекущаяСтраница = Элементы.СтраницыТекущаяФормула_Видимость_Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// КОМАНДЫ ФОРМЫ

&НаКлиенте
Процедура СоздатьОСВ(Команда)
	
	ЕстьОшибки = Ложь;
	
	ПроверяемыеРеквизиты = Новый Массив;
	ПроверяемыеРеквизиты.Добавить(Новый Структура("Имя,ТекстОшибки", "ПланСчетовБД", НСтр("ru = 'Заполните план счетов создаваемого вида отчета'")));
	ПроверяемыеРеквизиты.Добавить(Новый Структура("Имя,ТекстОшибки", "ВидОтчетаНаименование", НСтр("ru = 'Заполните наименование создаваемого вида отчета'")));
	ПроверяемыеРеквизиты.Добавить(Новый Структура("Имя,ТекстОшибки", "ВидОтчетаТипВИБ", НСтр("ru = 'Заполните тип ВИБ создаваемого вида отчета'")));
	
	Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
		Если НЕ ЗначениеЗаполнено(ЭтаФорма[ПроверяемыйРеквизит.Имя]) Тогда
			
			ЕстьОшибки = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.ПутьКДанным = ПроверяемыйРеквизит.Имя;
			Сообщение.Текст = ПроверяемыйРеквизит.ТекстОшибки;
			Сообщение.Сообщить();
			
		КонецЕсли;
	КонецЦикла; 
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		СоздатьОСВНаСервере();
		ПоказатьПредупреждение(, НСтр("ru = 'Создание успешно завершено!'"));
	Исключение
		ПоказатьПредупреждение(, НСтр("ru = 'Создание завершилось ошибкой!
		|Более подробная информация содержится в журнале регистрации.'"));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьОСВНаСервере()
	
	ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ = "Обработка.МастерСозданияВидаОтчетаОСВ.Форма.Форма.Модуль.СоздатьОСВНаСервере";
	
	Попытка
		Создать();
	Исключение
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,,, НСтр("ru = 'Системная ошибка. Подробности в полном протоколе'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиВФайл(Команда)	
	ВыполнитьСохранениеМодели(Неопределено);	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСохранениеМодели(ОповещениеЗакрытьФорму = Неопределено, Отказ = Ложь)
	
	ДопПараметры = Новый Структура("ОповещениеЗакрытьФорму", ОповещениеЗакрытьФорму);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ВыполнитьСохранениеМодели", ЭтотОбъект, ДопПараметры);
	
	ОбщегоНазначенияКлиентУХ.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение,, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьСохранениеМодели(РасширениеПодключено, ДополнительныеПараметры) Экспорт
	
	Если РасширениеПодключено = Истина Тогда
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Сохранение модели'");
		ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Файлы Управления Холдингом (*.hm)|*.hm|Все файлы (*.*)|*.*'");
		ДиалогВыбораФайла.Расширение = "hm";
		
	Иначе
		
		ДиалогВыбораФайла = Неопределено;
				
	КонецЕсли;
		
    АдресФайла = СохранитьНастройкиВФайлНаСервере();
	
	ОписанияФайлов = Новый Массив;
	ОписанияФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ПолучитьИмяФайлаМодели(), АдресФайла));
	
	Если ДополнительныеПараметры.ОповещениеЗакрытьФорму = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОповеститьОСохранении", ЭтотОбъект);
	Иначе
		Оповещение = ДополнительныеПараметры.ОповещениеЗакрытьФорму;
	КонецЕсли;
	
	НачатьПолучениеФайлов(Оповещение, ОписанияФайлов, ДиалогВыбораФайла, Истина);
	    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОповеститьОСохранении(ПолученныеФайлы, ДополнительныеПараметры = Неопределено) Экспорт

	Если ПолученныеФайлы = Неопределено Или ПолученныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПоказатьПредупреждение(, НСтр("ru = 'Файл выгружен на диск'"), 5);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяФайлаМодели(Дата = Неопределено)
	
	ДатаИмени = ?(Дата = Неопределено, ТекущаяДата(), Дата);
	Возврат НСтр("ru = 'Модель ОСВ от '") + Формат(ДатаИмени, "ДФ='yyyy.MM.dd HH.mm.ss'") + ".hm";
	
КонецФункции

&НаСервере
Функция СохранитьНастройкиВФайлНаСервере()
	
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	
	СоздатьКаталог(ИмяВременнойПапки);
	
	НесохраняемыеРеквизиты = "Объект,ТекущаяФормула_,ТекущаяФормулаАналитики,ТекущаяФормулаИмя,ТекущаяФормулаКоличествоАналитик,ТекущаяФормулаКолонки";
	
	Настройки = УправлениеФормойУХ.СохранитьНастройки(ЭтаФорма,,, НесохраняемыеРеквизиты);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременнойПапки + НСтр("ru = '\Настройки.xml'"));
	Настройки = ЗначениеВСтрокуВнутр(Настройки); 
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Настройки, НазначениеТипаXML.Явное);
	ЗаписьXML.Закрыть();
	
	ИмяФайла = ИмяВременнойПапки + "\Info.xml";
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Новый Структура("Name,Version,FormName,DateUTC", "ГенераторОСВ", "0.1", ИмяФормы, ТекущаяУниверсальнаяДата()));
	ЗаписьXML.Закрыть();
	
	ИмяВременногоZipФайла = ИмяВременнойПапки + "\zip.zip";
	
	ZipФайл = Новый ЗаписьZipФайла(ИмяВременногоZipФайла);
	ZipФайл.Добавить(ИмяВременнойПапки + "\*.xml", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	ZipФайл.Записать();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоZipФайла);
	
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременнойПапки);
	
	Возврат АдресФайла;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьНастройкиИзФайла(Команда)
		
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОткрытьНастройкиИзФайла", ЭтотОбъект);
	
	ДиалогВыбораФайла = Новый Структура;
	ДиалогВыбораФайла.Вставить("Заголовок", НСтр("ru = 'Открытие модели'"));
	ДиалогВыбораФайла.Вставить("Фильтр", НСтр("ru = 'Файлы Управления Холдингом (*.hm)|*.hm|Все файлы (*.*)|*.*'"));	
	
	ОбщегоНазначенияКлиентУХ.ПоказатьПомещениеФайла(Оповещение, УникальныйИдентификатор, "", ДиалогВыбораФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьНастройкиИзФайла(ПомещенныеФайлы, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Или (ПомещенныеФайлы.Количество() = 0) Тогда		
		Возврат;
	КонецЕсли;
	
	ОткрытьНастройкиИзФайлаНаСервере(ПомещенныеФайлы[0]);
    
    РазвернутьОСВ();
    
    ТекущаяФормулаИмя = "";
    ТекущаяФормулаИмяПрочитанных = "";
    
    ПрочитатьТекущуюФормулу();

КонецПроцедуры

&НаСервере
Процедура ОткрытьНастройкиИзФайлаНаСервере(ОписаниеФайла)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение);
		
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	
	СоздатьКаталог(ИмяВременнойПапки);
	
	ИмяВременногоZipФайла = ИмяВременнойПапки + "\zip.zip";
	
	ДвоичныеДанные.Записать(ИмяВременногоZipФайла);
	
	ZipФайл = Новый ЧтениеZipФайла(ИмяВременногоZipФайла);
	ZipФайл.ИзвлечьВсе(ИмяВременнойПапки);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяВременнойПапки + НСтр("ru = '\Настройки.xml'"));
	Настройки = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	Настройки = ЗначениеИзСтрокиВнутр(Настройки);
	ЧтениеXML.Закрыть();
	
	УправлениеФормойУХ.ВосстановитьНастройки(ЭтаФорма, Настройки);
	
	ПослеВосстановленияНастроек();
	
КонецПроцедуры

// СОБЫТИЯ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Реквизиты = Новый Массив;
	
	Для Каждого ФункцияПоказателя Из ФункцииПоказателей() Цикл
		Реквизиты.Добавить(Новый РеквизитФормы(ФункцияПоказателя, Новый ОписаниеТипов("Строка",, Новый КвалификаторыЧисла(15)), "ОСВ"));
	КонецЦикла; 
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("ТекущаяФормула");
	Таблицы.Добавить("ТекущаяФормула_");
	Для НомерАналитики = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Для Каждого ИмяРеквизитаПолучателя Из Таблицы Цикл
			Реквизиты.Добавить(Новый РеквизитФормы("Аналитика" + Формат(НомерАналитики, "ЧГ="), Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный)), ИмяРеквизитаПолучателя));
			Реквизиты.Добавить(Новый РеквизитФормы("Аналитика" + Формат(НомерАналитики, "ЧГ=") + "Представление", Новый ОписаниеТипов("Строка"), ИмяРеквизитаПолучателя));
			Реквизиты.Добавить(Новый РеквизитФормы("АналитикаИсточника" + Формат(НомерАналитики, "ЧГ="), Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные"), ИмяРеквизитаПолучателя));
			Реквизиты.Добавить(Новый РеквизитФормы("АналитикаИсточника" + Формат(НомерАналитики, "ЧГ=") + "Представление", Новый ОписаниеТипов("Строка"), ИмяРеквизитаПолучателя));
			Реквизиты.Добавить(Новый РеквизитФормы("АналитикаИсточника" + Формат(НомерАналитики, "ЧГ=") + "Отбор", Новый ОписаниеТипов(Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип), ИмяРеквизитаПолучателя));
		КонецЦикла; 
	КонецЦикла; 
	
	ИзменитьРеквизиты(Реквизиты);
	
	Для Каждого ФункцияПоказателя Из ФункцииПоказателей() Цикл
		Поле = Элементы.Добавить("ОСВ" + ФункцияПоказателя, Тип("ПолеФормы"), Элементы.ОСВ);
		Поле.Вид = ВидПоляФормы.ПолеВвода;
		Поле.ПутьКДанным = "ОСВ." + ФункцияПоказателя;
		Поле.КартинкаШапки = БиблиотекаКартинок.Ресурс;
		Поле.Ширина = 1;
	КонецЦикла;
	
	Для НомерАналитики = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Имя = "Аналитика" + Формат(НомерАналитики, "ЧГ=") + "Представление";
		Поле = Элементы.Добавить("ТекущаяФормула" + Имя, Тип("ПолеФормы"), Элементы.ЗаполнениеАналитикПолучателя);
		Поле.Вид = ВидПоляФормы.ПолеВвода;
		Поле.ПутьКДанным = "ТекущаяФормула." + Имя;
		Поле.КартинкаШапки = БиблиотекаКартинок.Измерение;
		Поле.КнопкаСпискаВыбора = Истина;
		Поле.КнопкаВыбора = Ложь;
		Поле.КнопкаОчистки = Истина;
		Поле.УстановитьДействие("НачалоВыбора",			"ТекущаяФормулаАналитикаПредставлениеНачалоВыбора");
		Поле.УстановитьДействие("НачалоВыбораИзСписка",	"ТекущаяФормулаАналитикаПредставлениеНачалоВыбораИзСписка");
		Поле.УстановитьДействие("Очистка",				"ТекущаяФормулаАналитикаПредставлениеОчистка");
		Поле.УстановитьДействие("ОбработкаВыбора",		"ТекущаяФормулаАналитикаПредставлениеОбработкаВыбора");
				
		Имя = "АналитикаИсточника" + Формат(НомерАналитики, "ЧГ=") + "Представление";
		Поле = Элементы.Добавить("ТекущаяФормула" + Имя, Тип("ПолеФормы"), Элементы.ОтборПоАналитикамИсточникаАналитика);
		Поле.Вид = ВидПоляФормы.ПолеВвода;
		Поле.ПутьКДанным = "ТекущаяФормула." + Имя;
		Поле.ОтображатьВШапке = Ложь;
		Поле.ТолькоПросмотр = Истина;
		
		Имя = "АналитикаИсточника" + Формат(НомерАналитики, "ЧГ=") + "Отбор";
		Поле = Элементы.Добавить("ТекущаяФормула" + Имя, Тип("ПолеФормы"), Элементы.ОтборПоАналитикамИсточникаЗначение);
		Поле.Вид = ВидПоляФормы.ПолеВвода;
		Поле.ПутьКДанным = "ТекущаяФормула." + Имя;
		Поле.ОтображатьВШапке = Ложь;
		Поле.КнопкаОчистки = Истина;
		Поле.СвязьПоТипу = Новый СвязьПоТипу("Элементы.ТекущаяФормула.ТекущиеДанные.АналитикаИсточника" + Формат(НомерАналитики, "ЧГ="));
		Поле.УстановитьДействие("НачалоВыбора",			"ТекущаяФормулаАналитикаИсточникаОтборНачалоВыбора");
		
	КонецЦикла;
	
	Для НомерАналитики = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		НовоеУсловноеОформление.Использование = Истина;
		НовоеУсловноеОформление.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		ЭлементОтбора = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекущаяФормулаКоличествоАналитик");
		ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Меньше;
		ЭлементОтбора.ПравоеЗначение = НомерАналитики;
		ПолеОформления = НовоеУсловноеОформление.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТекущаяФормулаАналитика" + Формат(НомерАналитики, "ЧГ=") + "Представление");
		
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		НовоеУсловноеОформление.Использование = Истина;
		НовоеУсловноеОформление.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		ЭлементОтбора = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекущаяФормула.АналитикиКоличество");
		ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Меньше;
		ЭлементОтбора.ПравоеЗначение = НомерАналитики;
		ПолеОформления = НовоеУсловноеОформление.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТекущаяФормулаАналитикаИсточника" + Формат(НомерАналитики, "ЧГ=") + "Представление");
		ПолеОформления = НовоеУсловноеОформление.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТекущаяФормулаАналитикаИсточника" + Формат(НомерАналитики, "ЧГ=") + "Отбор");
		
	КонецЦикла; 
	
	ТекущаяФормулаКолонки = УправлениеФормойУХ.ПолучитьСтрокуРеквизитовФормы(ЭтаФорма, "ТекущаяФормула");
	
	ОбновитьСтруктуруДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИменаФормСправочников = ПолучитьИменаФормСправочников();
	
	ФункцииПоказателей = ФункцииПоказателей();
	
	ВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = ИменаФормСправочников.ВидыОтчетов Тогда
		
		СтруктураОтчетов = ПолучитьСтруктуруВидовОтчетов(ВыбранноеЗначение);
		
		ДобавитьВидыОтчетов(СтруктураОтчетов);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = ИменаФормСправочников.СчетаБД Тогда
		
		НомерАналитики = Число(Сред(Элементы.ТекущаяФормула.ТекущийЭлемент.Имя, СтрДлина("ТекущаяФормулаАналитикаИсточника") + 1, 1));
		Элементы.ТекущаяФормула.ТекущиеДанные["АналитикаИсточника" + Формат(НомерАналитики, "ЧГ=") + "Отбор" ] = ВыбранноеЗначение;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = ИменаФормСправочников.Субконто Тогда
		
		НомерАналитики = Число(Сред(Элементы.ТекущаяФормула.ТекущийЭлемент.Имя, СтрДлина("ТекущаяФормулаАналитикаИсточника") + 1, 1));
		Элементы.ТекущаяФормула.ТекущиеДанные["АналитикаИсточника" + Формат(НомерАналитики, "ЧГ=") + "Отбор" ] = ВыбранноеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Если СохранитьМодельПриЗакрытии = Неопределено Тогда
			
			Отказ = Истина;
			СтандартнаяОбработка = Ложь;
			
			ТекстВопроса = НСтр("ru = 'Данные были изменены'");
			
			Ответы = Новый СписокЗначений;
			Ответы.Добавить(КодВозвратаДиалога.Нет, "Не сохранять");
			Ответы.Добавить(КодВозвратаДиалога.Отмена, "Отмена");
			Ответы.Добавить(КодВозвратаДиалога.Да, "Сохранить");
			
			Оповещение = Новый ОписаниеОповещения("Подключаемый_ПередЗакрытием", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Ответы,, КодВозвратаДиалога.Да, НСтр("ru = 'Сохранение модели'"));
			
			Возврат;
			
		Иначе
			
			СохранитьМодельПриЗакрытии = Неопределено;
		
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередЗакрытием(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		СохранитьМодельПриЗакрытии = Истина;
		Если СохранитьМодельПриЗакрытии = Истина Тогда
			
			Отказ = Ложь;
			Оповещение = Новый ОписаниеОповещения("Подключаемый_ЗакрытьФорму", ЭтотОбъект);
			ВыполнитьСохранениеМодели(Оповещение, Отказ);
			
			Возврат;
			
		КонецЕсли;
		
		Закрыть();
		
    ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		СохранитьМодельПриЗакрытии = Ложь;
		Закрыть();
		
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	Если Результат = Истина Тогда
		Возврат;	
	КонецЕсли;
	
	СохранитьМодельПриЗакрытии = Истина;	
	Закрыть();

КонецПроцедуры


// СОБЫТИЯ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ПланСчетовБДПриИзменении(Элемент)
	
	ЗаполнитьПланСчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланСчетовБДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = НЕ ПланСчетовБД = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыОтчетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ВыбраннаяСтрока = Неопределено Тогда
		ПоказатьЗначение(, ВидыОтчетов.НайтиПоИдентификатору(ВыбраннаяСтрока).Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыОтчетовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(ИменаФормСправочников.ВидыОтчетов, Новый Структура("МножественныйВыбор", Истина), ЭтаФорма, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыОтчетовПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.ВидыОтчетов.ВыделенныеСтроки;
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ТекущиеДанные = ВидыОтчетов.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если НЕ ТекущиеДанные.Тип = 0 Тогда
			
			Если ВыделенныеСтроки.Количество() = 1 Тогда
				Состояние(НСтр("ru = 'Для удаления выберите строку с видом отчета'"),,, БиблиотекаКартинок.Предупреждение32);
			Иначе
				Состояние(НСтр("ru = 'Для удаления выберите только строки с видами отчетов'"),,, БиблиотекаКартинок.Предупреждение32);
			КонецЕсли;
			
			Отказ = Истина;
			Прервать;
			
		Иначе
			
			Блокировка = Данные.БлокировкиВидовОтчетов[ТекущиеДанные.Ссылка];
			
			Если НЕ (Блокировка = Неопределено ИЛИ Блокировка = 0) Тогда
				
				Если Блокировка = 1 Тогда
					Состояние(НСтр("ru = 'Показатель вида отчета '") + ТекущиеДанные.Ссылка + НСтр("ru = ' используется в формуле формирования ОСВ'"),,, БиблиотекаКартинок.Предупреждение32);
				Иначе
					Состояние(НСтр("ru = 'Показатели вида отчета '") + ТекущиеДанные.Ссылка + НСтр("ru = ' используются в формулах формирования ОСВ'"),,, БиблиотекаКартинок.Предупреждение32);
				КонецЕсли;
				
				Отказ = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыОтчетовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Значение = ПараметрыПеретаскивания.Значение;
	
	ВГраница = Значение.ВГраница();
	Для ПсевдоИндекс = 0 По ВГраница Цикл
		
		Индекс = ВГраница - ПсевдоИндекс;
		ЭлементИсточник = ВидыОтчетов.НайтиПоИдентификатору(Значение[Индекс]);
		
		Если НЕ ЭлементИсточник.Тип = 3 Тогда
			Значение.Удалить(Индекс);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Значение.Количество() = 0 Тогда
		Выполнение = Ложь;
	КонецЕсли;
	
	Если Выполнение Тогда
		Структура = Новый Структура;
		Структура.Вставить("Форма", ЭтаФорма);
		Структура.Вставить("Источник", "ВидыОтчетов");
		Структура.Вставить("Значение", Значение);
		ПараметрыПеретаскивания.Значение = Структура;                                                                                                      
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяФормулаПриИзменении(Элемент)
	
	ЗаписатьТекущуюФормулу();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяФормулаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ТекущаяФормула.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле.Имя = "ТекущаяФормулаИсточникПредставление" Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Источник);
	ИначеЕсли Лев(Поле.Имя, СтрДлина("ТекущаяФормулаАналитикаИсточника")) = "ТекущаяФормулаАналитикаИсточника" И Прав(Поле.Имя, СтрДлина("Представление")) = "Представление" Тогда
		СтандартнаяОбработка = Ложь;
		НомерАналитики = Число(Сред(Поле.Имя, СтрДлина("ТекущаяФормулаАналитикаИсточника") + 1, 1));
		ПоказатьЗначение(, ТекущиеДанные["АналитикаИсточника" + Формат(НомерАналитики, "ЧГ=")]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяФормулаПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ТекущаяФормула.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Данные.ТекущаяФормулаТекущаяСтрока = Элементы.ТекущаяФормула.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	Данные.Вставить("ТекущаяФормулаТекущаяСтрока", Элементы.ТекущаяФормула.ТекущаяСтрока);
	
	ИдентификаторСтрокиВидаОтчетов = Данные.Показатели[ТекущиеДанные.Источник];
	
	Если НЕ Элементы.ВидыОтчетов.ТекущаяСтрока = ИдентификаторСтрокиВидаОтчетов Тогда
		
		Родитель = ВидыОтчетов.НайтиПоИдентификатору(ИдентификаторСтрокиВидаОтчетов).ПолучитьРодителя();
		Пока НЕ Родитель = Неопределено Цикл
			Если НЕ Элементы.ВидыОтчетов.Развернут(Родитель.ПолучитьИдентификатор()) Тогда
				Элементы.ВидыОтчетов.Развернуть(Родитель.ПолучитьИдентификатор());
			КонецЕсли;
			Родитель = Родитель.ПолучитьРодителя();
		КонецЦикла;
		
		Элементы.ВидыОтчетов.ТекущаяСтрока = ИдентификаторСтрокиВидаОтчетов;
		
	КонецЕсли;
	
	ЗаписатьТекущуюФормулу();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяФормулаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяФормулаПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ТекущаяФормула.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидОтчета = Данные.ПоказателиВидовОтчетов[ТекущиеДанные.Источник];
	Данные.БлокировкиВидовОтчетов.Вставить(ВидОтчета, Данные.БлокировкиВидовОтчетов[ВидОтчета] - 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяФормулаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	
	Если ПустаяСтрока(ТекущаяФормулаИмя) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") Тогда
		Структура = ПараметрыПеретаскивания.Значение;
		Если Структура.Свойство("Форма") И Структура.Форма = ЭтаФорма И Структура.Свойство("Источник") И Структура.Источник = "ВидыОтчетов" Тогда
			
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяФормулаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ОбработатьПеретаскиваниеПоказателей(ПараметрыПеретаскивания.Значение.Значение);	
	
	ВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяФормулаАналитикаПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяФормулаАналитикаПредставлениеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТекущаяФормула.ТекущиеДанные;
	
	НомерАналитики = Число(Сред(Элемент.Имя, СтрДлина("ТекущаяФормулаАналитика1"), 1));
	
	ТипКолонкиАналитики = ПолучитьТипЗначенияАналитики(ТекущаяФормулаАналитики[НомерАналитики - 1].Значение);
	
	Элемент.СписокВыбора.Очистить();
	Для Каждого ЭлементАналитика Из ТекущиеДанные.Аналитики Цикл
		Если ПолучитьТипЗначенияАналитики(ЭлементАналитика.Значение) = ТипКолонкиАналитики Тогда
			Элемент.СписокВыбора.Добавить(ЭлементАналитика.Представление);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура ТекущаяФормулаАналитикаПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТекущаяФормула.ТекущиеДанные;
	
	НомерАналитики = Число(Сред(Элемент.Имя, СтрДлина("ТекущаяФормулаАналитика") + 1, 1));
	
	ТекущиеДанные["Аналитика" + Формат(НомерАналитики, "ЧГ=")] = 0;
	ТекущиеДанные["Аналитика" + Формат(НомерАналитики, "ЧГ=") + "Представление"] = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяФормулаАналитикаПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТекущаяФормула.ТекущиеДанные;
	
	НомерАналитики = Число(Сред(Элемент.Имя, СтрДлина("ТекущаяФормулаАналитика1"), 1));
	
	Для Каждого ЭлементАналитика Из ТекущиеДанные.Аналитики Цикл
		Если ЭлементАналитика.Представление = ВыбранноеЗначение Тогда
			Индекс = ТекущиеДанные.Аналитики.Индекс(ЭлементАналитика);
		КонецЕсли;
	КонецЦикла; 
	
	ТекущиеДанные["Аналитика" + Формат(НомерАналитики, "ЧГ=")] = Индекс + 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяФормулаАналитикаИсточникаОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТекущаяФормула.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерАналитики = Число(Сред(Элемент.Имя, СтрДлина("ТекущаяФормулаАналитикаИсточника") + 1, 1));
	
	ТипЗначенияАналитикиИсточника = ПолучитьТипЗначенияАналитики(ТекущиеДанные["АналитикаИсточника" + Формат(НомерАналитики, "ЧГ=")]);
	
	Если ТипЗначенияАналитикиИсточника = Тип("СправочникСсылка.СчетаБД") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(ИменаФормСправочников.СчетаБД, Новый Структура("Отбор", Новый Структура("Владелец", ПланСчетовБД)), ЭтаФорма);
	ИначеЕсли ТипЗначенияАналитикиИсточника = Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(ИменаФормСправочников.Субконто, Новый Структура("Отбор", Новый Структура("Владелец", ТекущиеДанные["АналитикаИсточника" + Формат(НомерАналитики, "ЧГ=")])), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСВВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Поле.Имя = "ОСВСчет" Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ОСВ.НайтиПоИдентификатору(ВыбраннаяСтрока).Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСВПриАктивизацииЯчейки(Элемент)
	
	Если РежимПассивногоОбновления Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитатьТекущуюФормулу();
	
	ВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОСВПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСВПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСВПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	
	Если Строка = Неопределено ИЛИ Поле = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФункцииПоказателей.Найти(Сред(Поле.Имя, 4)) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ОСВ.НайтиПоИдентификатору(Строка);
	Если НЕ ТекущиеДанные.Тип = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") Тогда
		Структура = ПараметрыПеретаскивания.Значение;
		Если Структура.Свойство("Форма") И Структура.Форма = ЭтаФорма И Структура.Свойство("Источник") И Структура.Источник = "ВидыОтчетов" Тогда
			
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСВПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ОСВ.ТекущаяСтрока = Строка;
	Элементы.ОСВ.ТекущийЭлемент = Поле;
	
	ПрочитатьТекущуюФормулу();
	
	ОбработатьПеретаскиваниеПоказателей(ПараметрыПеретаскивания.Значение.Значение);
	
	ВидимостьДоступность();
	
КонецПроцедуры

// ПРОЦЕДУРЫ и ФУНКЦИИ

&НаСервере
Процедура ОбновитьСтруктуруДанных()
	
	Если НЕ ТипЗнч(Данные) = Тип("Структура") Тогда
		Данные = Новый Структура;
	КонецЕсли;
	
	Ключи = Новый Массив;
	Ключи.Добавить("Формулы");
	Ключи.Добавить("Аналитики");
	Ключи.Добавить("Показатели");
	Ключи.Добавить("ПоказателиВидовОтчетов");
	Ключи.Добавить("БлокировкиВидовОтчетов");
	Ключи.Добавить("ТипыАналитик");
	
	Для Каждого Ключ Из Ключи Цикл
		Если НЕ Данные.Свойство(Ключ) Тогда
			Данные.Вставить(Ключ, Новый Соответствие);
		КонецЕсли;
	КонецЦикла;
	
	Данные.Вставить("ТекущаяФормулаТекущаяСтрока", Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПослеВосстановленияНастроек()
	
	ОбновитьСтруктуруДанных();
	
	Данные.Показатели.Очистить();
				
	Для Каждого ЭлементВидОтчета Из ВидыОтчетов.ПолучитьЭлементы() Цикл
		
		Для Каждого ЭлементВидаОтчета Из ЭлементВидОтчета.ПолучитьЭлементы() Цикл
			
			Если ЭлементВидаОтчета.Тип = 1 Тогда
				
				Для Каждого ЭлементПоказатель Из ЭлементВидаОтчета.ПолучитьЭлементы() Цикл
					
					Если НЕ ЭлементПоказатель.Тип = 3 Тогда
						Продолжить;
					КонецЕсли;
					
					Данные.Показатели.Вставить(ЭлементПоказатель.Ссылка, ЭлементПоказатель.ПолучитьИдентификатор());
						
				КонецЦикла; 
				
			ИначеЕсли ЭлементВидаОтчета.Тип = 3 Тогда	
				
				Данные.Показатели.Вставить(ЭлементВидаОтчета.Ссылка, ЭлементВидаОтчета.ПолучитьИдентификатор());
				
			КонецЕсли;
			
		КонецЦикла; 
					
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПеретаскиваниеПоказателей(Показатели)
		
	Для Каждого Значение Из Показатели Цикл
		
		СтрокаИсточника = ВидыОтчетов.НайтиПоИдентификатору(Значение);
		
		НовыйОперанд = ТекущаяФормула.ПолучитьЭлементы().Добавить();
		НовыйОперанд.Источник = СтрокаИсточника.Ссылка;
		НовыйОперанд.ИсточникПредставление = ПолноеИмя(СтрокаИсточника);
		
		Аналитики = Новый Соответствие;
		
		Для Каждого Элемент Из СтрокаИсточника.ПолучитьРодителя().ПолучитьЭлементы() Цикл
			Если Элемент.Тип = 2 Тогда
				Аналитики.Вставить(Элемент.НомерАналитики, Новый Структура("Ссылка,Имя", Элемент.Ссылка, Элемент.Имя));
			КонецЕсли;
		КонецЦикла; 
		
		Для НомерАналитики = 1 По Аналитики.Количество() Цикл
			Аналитика = Аналитики[НомерАналитики];
			НовыйОперанд.Аналитики.Добавить(Аналитика.Ссылка, Аналитика.Имя);
			НовыйОперанд["АналитикаИсточника" + Формат(НовыйОперанд.Аналитики.Количество(), "ЧГ=")] = Аналитика.Ссылка;
			НовыйОперанд["АналитикаИсточника" + Формат(НовыйОперанд.Аналитики.Количество(), "ЧГ=") + "Представление"] = Аналитика.Имя;
		КонецЦикла; 
		
		НовыйОперанд.АналитикиКоличество = НовыйОперанд.Аналитики.Количество();
		
		Для Каждого Элемент Из НовыйОперанд.Аналитики Цикл
			Если ПолучитьТипЗначенияАналитики(Элемент.Значение) = Тип("СправочникСсылка.СчетаБД") Тогда
				НомерАналитики = НовыйОперанд.Аналитики.Индекс(Элемент) + 1;
				НовыйОперанд["АналитикаИсточника" + Формат(НомерАналитики, "ЧГ=") + "Отбор"] = Элементы.ОСВ.ТекущиеДанные.Ссылка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для НомерАналитики = 1 По ТекущаяФормулаАналитики.Количество() Цикл
			
			ТипКолонкиАналитики = ПолучитьТипЗначенияАналитики(ТекущаяФормулаАналитики[НомерАналитики - 1].Значение);
			
			Для Каждого Элемент Из НовыйОперанд.Аналитики Цикл
				Если ПолучитьТипЗначенияАналитики(Элемент.Значение) = ТипКолонкиАналитики Тогда
					НовыйОперанд["Аналитика" + Формат(НомерАналитики, "ЧГ=")] = НовыйОперанд.Аналитики.Индекс(Элемент) + 1;
					НовыйОперанд["Аналитика" + Формат(НомерАналитики, "ЧГ=") + "Представление"] = Элемент.Представление;
				КонецЕсли;
			КонецЦикла; 
			
		КонецЦикла; 
		
		Если СтрокаИсточника.ПолучитьРодителя().Тип = 0 Тогда
			ВидОтчетаСсылка = СтрокаИсточника.ПолучитьРодителя().Ссылка;
		Иначе
			ВидОтчетаСсылка = СтрокаИсточника.ПолучитьРодителя().ПолучитьРодителя().Ссылка;
		КонецЕсли;
		Если Данные.БлокировкиВидовОтчетов[ВидОтчетаСсылка] = Неопределено Тогда
			Данные.БлокировкиВидовОтчетов.Вставить(ВидОтчетаСсылка, 1);
		Иначе
			Данные.БлокировкиВидовОтчетов.Вставить(ВидОтчетаСсылка, Данные.БлокировкиВидовОтчетов[ВидОтчетаСсылка] + 1);
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ТекущаяФормула.ТекущаяСтрока = НовыйОперанд.ПолучитьИдентификатор(); 
	
	ЗаписатьТекущуюФормулу();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИменаФормСправочников()
	
	Имена = Новый Структура;
	Имена.Вставить("ВидыОтчетов",	"Справочник.ВидыОтчетов.Форма." + Метаданные.Справочники.ВидыОтчетов.ОсновнаяФормаДляВыбора.Имя);
	Имена.Вставить("Субконто",		"Справочник.ПроизвольныйКлассификаторУХ.Форма." + Метаданные.Справочники.ПроизвольныйКлассификаторУХ.ОсновнаяФормаДляВыбора.Имя);
	Имена.Вставить("СчетаБД",		"Справочник.СчетаБД.Форма." + Метаданные.Справочники.СчетаБД.ОсновнаяФормаДляВыбора.Имя);
	
	Возврат Имена;
	
КонецФункции

&НаКлиенте
Функция ПолноеИмя(СтрокаДерева)
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ПолноеИмя = ПолноеИмя(СтрокаДерева.ПолучитьРодителя());
	
	Возврат ПолноеИмя + ?(ПустаяСтрока(ПолноеИмя), "", "/") + СтрокаДерева.Имя;
	
КонецФункции

&НаКлиенте
Функция ПолучитьТипЗначенияАналитики(Аналитика)
	
	Тип = Данные.ТипыАналитик[Аналитика];
	Если Тип = Неопределено Тогда
		Тип = ПолучитьТипЗначенияАналитикиНаСервере(Аналитика);
		Данные.ТипыАналитик.Вставить(Аналитика, Тип);
	КонецЕсли;
	
	Возврат Тип;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТипЗначенияАналитикиНаСервере(Знач Аналитика)
	
	Возврат Аналитика.ТипЗначения.Типы()[0];
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяФормулы(Знач КодСчета, Знач ВидИтога)
	
	Возврат ВидИтога + " " + КодСчета;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущийФормулы()
	
	ТекущиеДанные = Элементы.ОСВ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.Тип = 1 Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяПоля = Сред(Элементы.ОСВ.ТекущийЭлемент.Имя, 4);
	Если ФункцииПоказателей.Найти(ИмяПоля) = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ПолучитьИмяФормулы(ТекущиеДанные.Имя, ИмяПоля);
	
КонецФункции

&НаКлиенте
Процедура ПрочитатьТекущуюФормулу()
	
	ТекущаяФормулаИмя_ = ПолучитьИмяТекущийФормулы();
	
	Если ТекущаяФормулаИмя = ТекущаяФормулаИмя_ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяФормулаИмя = ТекущаяФормулаИмя_;
	
	Если ПустаяСтрока(ТекущаяФормулаИмя) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяФормулаИмяПрочитанных = ТекущаяФормулаИмя Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяФормулаИмяПрочитанных = ТекущаяФормулаИмя;
	
	ТекущаяФормула.ПолучитьЭлементы().Очистить();
	
	Если ПустаяСтрока(ТекущаяФормулаИмя) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеАналитики = Данные.Аналитики[Элементы.ОСВ.ТекущиеДанные.Ссылка];
	
	ТекущаяФормулаАналитики.Очистить();
	Если НЕ ДанныеАналитики = Неопределено Тогда
		Для Каждого Элемент Из ДанныеАналитики Цикл
			ТекущаяФормулаАналитики.Добавить(Элемент.Ссылка, Элемент.Имя);
		КонецЦикла; 
	КонецЕсли;
	
	ТекущаяФормулаКоличествоАналитик = ТекущаяФормулаАналитики.Количество();
	
	УпакованныеДанные = Данные.Формулы[ТекущаяФормулаИмя];
	
	НомерАналитики = 0;
	Для Каждого Элемент Из ТекущаяФормулаАналитики Цикл
		
		НомерАналитики = НомерАналитики + 1;
		
		Если НЕ Элементы["ТекущаяФормулаАналитика" + Формат(НомерАналитики, "ЧГ=") + "Представление"].Заголовок = Элемент.Представление Тогда
			Элементы["ТекущаяФормулаАналитика" + Формат(НомерАналитики, "ЧГ=") + "Представление"].Заголовок = Элемент.Представление;
		КонецЕсли;
		
	КонецЦикла; 
	
	Если НЕ УпакованныеДанные = Неопределено Тогда
		УправлениеФормойКлиентСерверУХ.РаспаковатьДанныеФормыДерево(УпакованныеДанные, ТекущаяФормула, Элементы.ТекущаяФормула);
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаписатьТекущуюФормулу()
	
	Если НЕ ПустаяСтрока(ТекущаяФормулаИмя) Тогда
		
		ФункцияПоказателя = Лев(ТекущаяФормулаИмя, СтрНайти(ТекущаяФормулаИмя, " ") - 1);
		
		Элементы.ОСВ.ТекущиеДанные[ФункцияПоказателя] = ?(ТекущаяФормула.ПолучитьЭлементы().Количество() = 0, "", "ДА");
		
		Данные.Формулы.Вставить(ТекущаяФормулаИмя, УправлениеФормойКлиентСерверУХ.УпаковатьДанныеФормыДерево(ТекущаяФормула, ТекущаяФормулаКолонки, Элементы.ТекущаяФормула));
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФункцииПоказателей()
	
	Массив = Новый Массив;
	Массив.Добавить("СНД");
	Массив.Добавить("СНК");
	Массив.Добавить("ДО");
	Массив.Добавить("КО");
	Массив.Добавить("СКД");
	Массив.Добавить("СКК");
	
	Возврат Массив;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруВидовОтчетов(Знач МассивОтчетов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОтчетов", МассивОтчетов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыОтчетов.Ссылка КАК Ссылка,
	|	ВидыОтчетов.Наименование КАК Наименование,
	|	ВидыОтчетов.ВидАналитики1 КАК ВидАналитики1,
	|	ВидыОтчетов.ВидАналитики2 КАК ВидАналитики2,
	|	ВидыОтчетов.ВидАналитики3 КАК ВидАналитики3,
	|	ВидыОтчетов.ВидАналитики4 КАК ВидАналитики4,
	|	ВидыОтчетов.ВидАналитики5 КАК ВидАналитики5,
	|	ВидыОтчетов.ВидАналитики6 КАК ВидАналитики6,
	|	ВидыОтчетов.ВидАналитики1.Наименование КАК ВидАналитики1Наименование,
	|	ВидыОтчетов.ВидАналитики2.Наименование КАК ВидАналитики2Наименование,
	|	ВидыОтчетов.ВидАналитики3.Наименование КАК ВидАналитики3Наименование,
	|	ВидыОтчетов.ВидАналитики4.Наименование КАК ВидАналитики4Наименование,
	|	ВидыОтчетов.ВидАналитики5.Наименование КАК ВидАналитики5Наименование,
	|	ВидыОтчетов.ВидАналитики6.Наименование КАК ВидАналитики6Наименование
	|ПОМЕСТИТЬ ВидыОтчетов
	|ИЗ
	|	Справочник.ВидыОтчетов КАК ВидыОтчетов
	|ГДЕ
	|	ВидыОтчетов.Ссылка В(&МассивОтчетов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыРаскрытия.Ссылка КАК ГруппаРаскрытия,
	|	ГруппыРаскрытия.Наименование КАК ГруппаРаскрытияНаименование,
	|	ГруппыРаскрытия.ВидАналитики1 КАК ВидАналитики1,
	|	ГруппыРаскрытия.ВидАналитики2 КАК ВидАналитики2,
	|	ГруппыРаскрытия.ВидАналитики3 КАК ВидАналитики3,
	|	ГруппыРаскрытия.ВидАналитики4 КАК ВидАналитики4,
	|	ГруппыРаскрытия.ВидАналитики5 КАК ВидАналитики5,
	|	ГруппыРаскрытия.ВидАналитики6 КАК ВидАналитики6,
	|	ВидыОтчетов.Ссылка КАК ВидОтчета,
	|	ГруппыРаскрытия.ВидАналитики1.Наименование КАК ВидАналитики1Наименование,
	|	ГруппыРаскрытия.ВидАналитики2.Наименование КАК ВидАналитики2Наименование,
	|	ГруппыРаскрытия.ВидАналитики3.Наименование КАК ВидАналитики3Наименование,
	|	ГруппыРаскрытия.ВидАналитики4.Наименование КАК ВидАналитики4Наименование,
	|	ГруппыРаскрытия.ВидАналитики5.Наименование КАК ВидАналитики5Наименование,
	|	ГруппыРаскрытия.ВидАналитики6.Наименование КАК ВидАналитики6Наименование
	|ИЗ
	|	ВидыОтчетов КАК ВидыОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
	|		ПО ВидыОтчетов.Ссылка = ГруппыРаскрытия.Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГруппаРаскрытияНаименование
	|ИТОГИ ПО
	|	ВидОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Показатель,
	|	ПоказателиОтчетов.Наименование КАК ПоказательНаименование,
	|	ВидыОтчетов.Ссылка КАК ВидОтчета,
	|	ПоказателиОтчетов.ГруппаРаскрытия КАК ГруппаРаскрытия
	|ИЗ
	|	ВидыОтчетов КАК ВидыОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ПО ВидыОтчетов.Ссылка = ПоказателиОтчетов.Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоказательНаименование
	|ИТОГИ ПО
	|	ВидОтчета,
	|	ГруппаРаскрытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыОтчетов.Ссылка КАК Ссылка,
	|	ВидыОтчетов.Наименование КАК Наименование,
	|	ВидыОтчетов.ВидАналитики1 КАК ВидАналитики1,
	|	ВидыОтчетов.ВидАналитики2 КАК ВидАналитики2,
	|	ВидыОтчетов.ВидАналитики3 КАК ВидАналитики3,
	|	ВидыОтчетов.ВидАналитики4 КАК ВидАналитики4,
	|	ВидыОтчетов.ВидАналитики5 КАК ВидАналитики5,
	|	ВидыОтчетов.ВидАналитики6 КАК ВидАналитики6,
	|	ВидыОтчетов.ВидАналитики1Наименование КАК ВидАналитики1Наименование,
	|	ВидыОтчетов.ВидАналитики2Наименование КАК ВидАналитики2Наименование,
	|	ВидыОтчетов.ВидАналитики3Наименование КАК ВидАналитики3Наименование,
	|	ВидыОтчетов.ВидАналитики4Наименование КАК ВидАналитики4Наименование,
	|	ВидыОтчетов.ВидАналитики5Наименование КАК ВидАналитики5Наименование,
	|	ВидыОтчетов.ВидАналитики6Наименование КАК ВидАналитики6Наименование
	|ИЗ
	|	ВидыОтчетов КАК ВидыОтчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	НачатьТранзакцию();
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ЗафиксироватьТранзакцию();
	
	ГруппыРаскрытияВидовОтчетов = Новый Соответствие;
	
	ВыборкаВидовОтчетов = РезультатЗапроса[РезультатЗапроса.ВГраница() - 2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВидовОтчетов.Следующий() Цикл
		
		ГруппыРаскрытия = Новый Массив;
		
		ВыборкаГруппРаскрытия = ВыборкаВидовОтчетов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаГруппРаскрытия.Следующий() Цикл
			
			СтруктураГруппыРаскрытия = Новый Структура;
			СтруктураГруппыРаскрытия.Вставить("Ссылка", ВыборкаГруппРаскрытия.ГруппаРаскрытия);
			СтруктураГруппыРаскрытия.Вставить("Имя", ВыборкаГруппРаскрытия.ГруппаРаскрытияНаименование);
			
			Аналитики = Новый Массив;
			
			Для НомерАналитики = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				
				НомерАналитикиСтрока = Формат(НомерАналитики, "ЧГ=");
				
				ВидАналитики				= ВыборкаГруппРаскрытия["ВидАналитики" + НомерАналитикиСтрока];
				
				Если ЗначениеЗаполнено(ВидАналитики) Тогда
					Аналитика = Новый Структура;
					Аналитика.Вставить("Ссылка", ВидАналитики);
					Аналитика.Вставить("Имя", ВыборкаГруппРаскрытия["ВидАналитики" + НомерАналитикиСтрока + "Наименование"] + " (Аналитика " + НомерАналитикиСтрока + ")");
					Аналитики.Добавить(Аналитика);
				Иначе
					Аналитики.Добавить(Неопределено);
				КонецЕсли;
				
			КонецЦикла;
			
			СтруктураГруппыРаскрытия.Вставить("Аналитики", Аналитики);
			
			ГруппыРаскрытия.Добавить(СтруктураГруппыРаскрытия);
			
		КонецЦикла;
		
		ГруппыРаскрытияВидовОтчетов.Вставить(ВыборкаВидовОтчетов.ВидОтчета, ГруппыРаскрытия);
		
	КонецЦикла;
	
	ПоказателиВидовОтчетов = Новый Соответствие;
		
	ВыборкаВидовОтчетов = РезультатЗапроса[РезультатЗапроса.ВГраница() - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВидовОтчетов.Следующий() Цикл
		
		ГруппыРаскрытияПоказателейВидаОтчета = Новый Соответствие;
		
		ВыборкаГруппРаскрытия = ВыборкаВидовОтчетов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаГруппРаскрытия.Следующий() Цикл
			
			ПоказателиВидаОтчета = Новый Массив;
			
			ВыборкаПоказателей = ВыборкаГруппРаскрытия.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоказателей.Следующий() Цикл
				
				СтруктураПоказателя = Новый Структура;
				СтруктураПоказателя.Вставить("Ссылка", ВыборкаПоказателей.Показатель);
				СтруктураПоказателя.Вставить("Имя", ВыборкаПоказателей.ПоказательНаименование);
				
				ПоказателиВидаОтчета.Добавить(СтруктураПоказателя);
				
			КонецЦикла;
			
			ГруппыРаскрытияПоказателейВидаОтчета.Вставить(ВыборкаГруппРаскрытия.ГруппаРаскрытия, ПоказателиВидаОтчета);
			
		КонецЦикла;
		
		ПоказателиВидовОтчетов.Вставить(ВыборкаВидовОтчетов.ВидОтчета, ГруппыРаскрытияПоказателейВидаОтчета);
		
	КонецЦикла;
	
	СтруктураВидовОтчетов = Новый Массив;
	
	ВыборкаВидовОтчетов = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выбрать();
	Пока ВыборкаВидовОтчетов.Следующий() Цикл
		
		СтруктураВидаОтчета = Новый Структура;
		СтруктураВидаОтчета.Вставить("Ссылка", ВыборкаВидовОтчетов.Ссылка);
		СтруктураВидаОтчета.Вставить("Имя", ВыборкаВидовОтчетов.Наименование);
		
		Аналитики = Новый Массив;
					
		Для НомерАналитики = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			НомерАналитикиСтрока = Формат(НомерАналитики, "ЧГ=");
			
			ВидАналитики				= ВыборкаВидовОтчетов["ВидАналитики" + НомерАналитикиСтрока];
			
			Если ЗначениеЗаполнено(ВидАналитики) Тогда
				Аналитика = Новый Структура;
				Аналитика.Вставить("Ссылка", ВидАналитики);
				Аналитика.Вставить("Имя", ВыборкаВидовОтчетов["ВидАналитики" + НомерАналитикиСтрока + "Наименование"] + " (Аналитика " + НомерАналитикиСтрока + ")");
				Аналитики.Добавить(Аналитика);
			Иначе
				Аналитики.Добавить(Неопределено);
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураВидаОтчета.Вставить("Аналитики", Аналитики);
		
		ПоказателиВидаОтчета = ПоказателиВидовОтчетов[ВыборкаВидовОтчетов.Ссылка];
		Если ПоказателиВидаОтчета = Неопределено Тогда
			ПоказателиВидаОтчета = Новый Соответствие;
		КонецЕсли;
		
		ГруппыРаскрытияВидаОтчета = ГруппыРаскрытияВидовОтчетов[ВыборкаВидовОтчетов.Ссылка];
		
		Если НЕ ГруппыРаскрытияВидаОтчета = Неопределено Тогда
			
			Для Каждого СтруктураГруппыРаскрытия Из ГруппыРаскрытияВидаОтчета Цикл
				
				Показатели = ПоказателиВидаОтчета[СтруктураГруппыРаскрытия.Ссылка];
				Если Показатели = Неопределено Тогда
					Показатели = Новый Массив;
				КонецЕсли;
				
				СтруктураГруппыРаскрытия.Вставить("Показатели", Показатели);
				
			КонецЦикла;
			
		Иначе
			
			ГруппыРаскрытияВидаОтчета = Новый Массив;
			
		КонецЕсли;
		
		СтруктураВидаОтчета.Вставить("ГруппыРаскрытия", ГруппыРаскрытияВидаОтчета);
		
		Показатели = ПоказателиВидаОтчета[Справочники.ГруппыРаскрытия.ПустаяСсылка()];
		Если Показатели = Неопределено Тогда
			Показатели = Новый Массив;
		КонецЕсли;
		
		СтруктураВидаОтчета.Вставить("Показатели", Показатели);
		
		СтруктураВидовОтчетов.Добавить(СтруктураВидаОтчета);
		
	КонецЦикла;
	
	Возврат СтруктураВидовОтчетов;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВидыОтчетов(СтруктураОтчетов)
	
	Для Каждого СтруктураВидаОтчета Из СтруктураОтчетов Цикл
		
		НомерАналитики = 0;
		
		ЭлементВидОтчета = ВидыОтчетов.ПолучитьЭлементы().Добавить();
		ЭлементВидОтчета.Имя = СтруктураВидаОтчета.Имя;
		ЭлементВидОтчета.Ссылка = СтруктураВидаОтчета.Ссылка;
		
		Для Индекс = 0 По СтруктураВидаОтчета.Аналитики.ВГраница() Цикл
			
			ВидАналитики = СтруктураВидаОтчета.Аналитики[Индекс];
			
			НомерАналитики = НомерАналитики + 1;
			
			Если НЕ ЗначениеЗаполнено(ВидАналитики) Тогда
				Продолжить;
			КонецЕсли;
				
			ЭлементВидАналитики = ЭлементВидОтчета.ПолучитьЭлементы().Добавить();
			ЭлементВидАналитики.Тип = 2;
			ЭлементВидАналитики.Имя = ВидАналитики.Имя;
			ЭлементВидАналитики.Ссылка = ВидАналитики.Ссылка;
			ЭлементВидАналитики.НомерАналитики = НомерАналитики;
			
		КонецЦикла;
		
		Для Каждого ГруппаРаскрытия Из СтруктураВидаОтчета.ГруппыРаскрытия Цикл
			
			ЭлементГруппаРаскрытия = ЭлементВидОтчета.ПолучитьЭлементы().Добавить();
			ЭлементГруппаРаскрытия.Тип = 1;
			ЭлементГруппаРаскрытия.Имя = ГруппаРаскрытия.Имя;
			ЭлементГруппаРаскрытия.Ссылка = ГруппаРаскрытия.Ссылка;
			
			НомерАналитики = 0;
			
			Для Индекс = 0 По СтруктураВидаОтчета.Аналитики.ВГраница() Цикл
				
				НомерАналитики = НомерАналитики + 1;
				
				ВидАналитики = СтруктураВидаОтчета.Аналитики[Индекс];
				
				Если НЕ ЗначениеЗаполнено(ВидАналитики) Тогда
					ВидАналитики = ГруппаРаскрытия.Аналитики[Индекс];
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВидАналитики) Тогда
					Продолжить;
				КонецЕсли;
				
				ЭлементВидАналитики = ЭлементГруппаРаскрытия.ПолучитьЭлементы().Добавить();
				ЭлементВидАналитики.Тип = 2;
				ЭлементВидАналитики.Имя = ВидАналитики.Имя;
				ЭлементВидАналитики.Ссылка = ВидАналитики.Ссылка;
				ЭлементВидАналитики.НомерАналитики = НомерАналитики;
				
			КонецЦикла;
			
			Для Каждого Показатели Из ГруппаРаскрытия.Показатели Цикл
				
				ЭлементПоказатель = ЭлементГруппаРаскрытия.ПолучитьЭлементы().Добавить();
				ЭлементПоказатель.Тип = 3;
				ЭлементПоказатель.Имя = Показатели.Имя;
				ЭлементПоказатель.Ссылка = Показатели.Ссылка;
				
				Данные.Показатели.Вставить(ЭлементПоказатель.Ссылка, ЭлементПоказатель.ПолучитьИдентификатор());
				Данные.ПоказателиВидовОтчетов.Вставить(ЭлементПоказатель.Ссылка, ЭлементВидОтчета.Ссылка);
				
			КонецЦикла; 
			
		КонецЦикла;
		
		Для Каждого Показатели Из СтруктураВидаОтчета.Показатели Цикл
			
			ЭлементПоказатель = ЭлементВидОтчета.ПолучитьЭлементы().Добавить();
			ЭлементПоказатель.Тип = 3;
			ЭлементПоказатель.Имя = Показатели.Имя;
			ЭлементПоказатель.Ссылка = Показатели.Ссылка;
			
			Данные.Показатели.Вставить(ЭлементПоказатель.Ссылка, ЭлементПоказатель.ПолучитьИдентификатор());
			Данные.ПоказателиВидовОтчетов.Вставить(ЭлементПоказатель.Ссылка, ЭлементВидОтчета.Ссылка);
			
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПланСчетов()
	
	СтруктураПланаСчетов = ПолучитьСтруктуруПланаСчетов(ПланСчетовБД);
	
	ОСВ.ПолучитьЭлементы().Очистить();
	
	ДобавитьСчетаПланаСчетов(ОСВ.ПолучитьЭлементы(), СтруктураПланаСчетов);
	
	РазвернутьОСВ();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьОСВ()
	
	Для Каждого Элемент Из ОСВ.ПолучитьЭлементы() Цикл
		Элементы.ОСВ.Развернуть(Элемент.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПланаСчетов(Знач ПланСчетовБД)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", ПланСчетовБД);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Код КАК Код,
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СчетаБД КАК Т
	|ГДЕ
	|	Т.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка,
	|	Т.ВидСубконтоСсылка КАК ВидСубконто,
	|	Т.ВидСубконто КАК Наименование
	|ИЗ
	|	Справочник.СчетаБД.ВидыСубконто КАК Т
	|ГДЕ
	|	Т.Ссылка.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	НачатьТранзакцию();
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ЗафиксироватьТранзакцию();
	
	СубконтоСчетов = Новый Соответствие;
	
	ВыборкаСчетов = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСчетов.Следующий() Цикл
		
		Аналитики = Новый Массив;
		
		ВыборкаСубконто = ВыборкаСчетов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСубконто.Следующий() Цикл
			
			Аналитика = Новый Структура;
			Аналитика.Вставить("Ссылка", ВыборкаСубконто.ВидСубконто);
			Аналитика.Вставить("Имя", ВыборкаСубконто.Наименование);
			Аналитики.Добавить(Аналитика);
			
		КонецЦикла;
		
		СубконтоСчетов.Вставить(ВыборкаСчетов.Ссылка, Аналитики);
		
	КонецЦикла;
	
	ОсновнойМассивСчетов = Новый Массив;
	
	СтекСчетов = Новый Массив;
	СтекВыборок = Новый Массив;
	СтекРодителей = Новый Массив;
	
	СтекСчетов.Добавить(ОсновнойМассивСчетов);
	СтекВыборок.Добавить(РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Ссылка"));
	СтекРодителей.Добавить(Неопределено);
	
	Пока Истина Цикл
		
		Если СтекВыборок.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		МассивСчетов = СтекСчетов[СтекСчетов.ВГраница()];
		Выборка = СтекВыборок[СтекВыборок.ВГраница()];
		Родитель = СтекРодителей[СтекРодителей.ВГраница()];
		
		Если Выборка.Следующий() Тогда
			
			Если НЕ Родитель = Выборка.Ссылка Тогда
				
				СтруктураСчета = Новый Структура("Имя,Ссылка", Выборка.Код, Выборка.Ссылка);
				
				Аналитики = СубконтоСчетов[Выборка.Ссылка];
				Если НЕ Аналитики = Неопределено Тогда
					СтруктураСчета.Вставить("Аналитики", Аналитики);
				КонецЕсли;
				
				МассивСчетов.Добавить(СтруктураСчета);
				
				Выборка1 = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Ссылка");
				Если Выборка1.Количество() > 0 Тогда
					СтруктураСчета.Вставить("Счета", Новый Массив);
					СтекСчетов.Добавить(СтруктураСчета.Счета);
					СтекВыборок.Добавить(Выборка1);
					СтекРодителей.Добавить(СтруктураСчета.Ссылка);
				КонецЕсли;
				
			КонецЕсли;
			
			
		Иначе
			СтекСчетов.Удалить(СтекСчетов.ВГраница());
			СтекВыборок.Удалить(СтекВыборок.ВГраница());
			СтекРодителей.Удалить(СтекРодителей.ВГраница());
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОсновнойМассивСчетов;
			
КонецФункции

&НаКлиенте
Процедура ДобавитьСчетаПланаСчетов(Элементы, МассивСчетов)
	
	Для Каждого Счет Из МассивСчетов Цикл
		
		Элемент = Элементы.Добавить();
		Элемент.Имя = Счет.Имя;
		Элемент.Ссылка = Счет.Ссылка;
		
		Если Счет.Свойство("Счета") Тогда
			
			Элемент.Тип = 0;
			
			ДобавитьСчетаПланаСчетов(Элемент.ПолучитьЭлементы(), Счет.Счета);
			
		Иначе
			
			Элемент.Тип = 1;
			
			Если Счет.Свойство("Аналитики") Тогда
				Данные.Аналитики.Вставить(Счет.Ссылка, Счет.Аналитики);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура Создать()
	
	НачатьТранзакцию();
	
	ВидОтчетаОбъект = Справочники.ВидыОтчетов.СоздатьЭлемент();
	ВидОтчетаОбъект.Код = ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(ВидОтчетаНаименование,, "ВидыОтчетов");
	ВидОтчетаОбъект.Наименование = ВидОтчетаНаименование;
	ВидОтчетаОбъект.Родитель = ВидОтчетаРодитель;
	ВидОтчетаОбъект.Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость;
	ВидОтчетаОбъект.ПланСчетов = ПланСчетовБД;
	
	Для Каждого ВидБухгалтерскихИтогов Из Перечисления.ВидыБухгалтерскихИтогов Цикл
		ВидОтчетаОбъект.ИспользуемыеВидыИтоговПоСчетам.Добавить().ВидИтогаПоСчету = ВидБухгалтерскихИтогов;
	КонецЦикла; 
	
	ВидОтчетаОбъект.Записать();
	
	ВидОтчетаСсылка = ВидОтчетаОбъект.Ссылка;
			
	ПравилоПроверкиОбъект = Справочники.ПравилаПроверки.СоздатьЭлемент();
	ПравилоПроверкиОбъект.Владелец = ВидОтчетаСсылка;
	ПравилоПроверкиОбъект.Наименование = НСтр("ru = 'Правило проверки: '") + ВидОтчетаНаименование;
	ПравилоПроверкиОбъект.ТипБД = ВидОтчетаТипВИБ;
	ПравилоПроверкиОбъект.Записать();
	
	УправлениеОтчетамиУХ.УстановитьЭлементПоУмолчаниюДляВидаОтчета(ПравилоПроверкиОбъект.Ссылка, ПравилоПроверкиОбъект.Владелец, Перечисления.ЭлементыНастройкиОтчета.ПравилоПроверки);
	
	ПравилоОбработкиОбъект = Справочники.ПравилаОбработки.СоздатьЭлемент();
	ПравилоОбработкиОбъект.Владелец = ВидОтчетаСсылка;
	ПравилоОбработкиОбъект.Наименование = НСтр("ru = 'Правило обработки: '") + ВидОтчетаНаименование;
	ПравилоОбработкиОбъект.ТипБД = ВидОтчетаТипВИБ;
	ПравилоОбработкиОбъект.ПравилоПроверки = ПравилоПроверкиОбъект.Ссылка;
	ПравилоОбработкиОбъект.Записать();
	
	ПравилоОбработкиСсылка = ПравилоОбработкиОбъект.Ссылка;
	
	УправлениеОтчетамиУХ.УстановитьЭлементПоУмолчаниюДляВидаОтчета(ПравилоОбработкиОбъект.Ссылка, ПравилоОбработкиОбъект.Владелец, Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки);
	
	ГруппыРаскрытия = Новый Соответствие;
	СтрокиОтчета = Новый Соответствие;
	НомерКолонки = 0;
	Для Каждого ФункцияПоказателя Из ФункцииПоказателей() Цикл
		НомерКолонки = НомерКолонки + 1;
		Колонка = СоздатьКолонку(ВидОтчетаСсылка, НСтр("ru = 'Колонка по итогу '") + ФункцияПоказателя, НомерКолонки, Перечисления.ВидыБухгалтерскихИтогов[ФункцияПоказателя]);
		СоздатьПоказатели(ОСВ.ПолучитьЭлементы(), ФункцияПоказателя, ВидОтчетаСсылка, ПравилоОбработкиСсылка, ГруппыРаскрытия, Колонка, СтрокиОтчета);
	КонецЦикла; 
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Функция СоздатьКолонку(ВидОтчета, Наименование, Номер, ВидИтога)
	
	Колонка = Справочники.КолонкиОтчетов.СоздатьЭлемент();
	Колонка.Владелец = ВидОтчета;
	Колонка.Наименование = Наименование;
	Колонка.Код = ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(Колонка.Наименование,, "КолонкиОтчетов", Колонка.Владелец);
	Колонка.ПорядковыйНомер = Номер;
	Колонка.ВидИтогаПоСчету = ВидИтога;
	Колонка.Записать();
	
	Возврат Колонка.Ссылка;
	
КонецФункции

&НаСервере
Функция СоздатьСтроку(ВидОтчета, Наименование, Номер, СтрокаРодитель)
	
	Строка = Справочники.СтрокиОтчетов.СоздатьЭлемент();
	Строка.Владелец = ВидОтчета;
	Строка.Родитель = СтрокаРодитель;
	Строка.Наименование = Наименование;
	Строка.Код = ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(Строка.Наименование,, "СтрокиОтчетов", Строка.Владелец);
	Строка.ПорядковыйНомер = Номер;
	Строка.Записать();
	
	Возврат Строка.Ссылка;
	
КонецФункции

&НаСервере
Функция СоздатьПоказатели(ЭлементыОСВ, ФункцияПоказателя, ВидОтчета, ПравилоОбработки, ГруппыРаскрытия, Колонка, Строки, СтрокаРодитель = Неопределено)
	
	МассивПоказателей = Новый Массив;
	
	Для Каждого Элемент Из ЭлементыОСВ Цикл
		
		МассивИсточников = Новый Массив;
		
		Если Строки[Элемент.Ссылка] = Неопределено Тогда
			СтрокаОтчета = СоздатьСтроку(ВидОтчета, Элемент.Имя + " " + Элемент.Ссылка.Наименование, Строки.Количество() + 1, СтрокаРодитель);
			Строки.Вставить(Элемент.Ссылка, СтрокаОтчета);
		КонецЕсли;
		
		ГруппаРаскрытия = ГруппыРаскрытия[Элемент.Ссылка];
		Если ГруппаРаскрытия = Неопределено Тогда
			ГруппаРаскрытия = СоздатьГруппуРаскрытия(ВидОтчета, Элемент.Ссылка, НСтр("ru = 'Группа аналитик по счету '") + Элемент.Имя);
			ГруппыРаскрытия.Вставить(Элемент.Ссылка, ГруппаРаскрытия);
		КонецЕсли;
		
		Если Элемент.Тип = 0 Тогда
			
			МассивПодчиненныхПоказателей = СоздатьПоказатели(Элемент.ПолучитьЭлементы(), ФункцияПоказателя, ВидОтчета, ПравилоОбработки, ГруппыРаскрытия, Колонка, Строки, Строки[Элемент.Ссылка]);
			
			Если МассивПодчиненныхПоказателей.Количество() > 0 Тогда
				Показатель = СоздатьПоказатель(ВидОтчета, Элемент.Ссылка, ФункцияПоказателя, ГруппыРаскрытия, Колонка, Строки);
				МассивПоказателей.Добавить(Показатель);
				Для Каждого ПодчиненныйПоказатель Из МассивПодчиненныхПоказателей Цикл
					МассивИсточников.Добавить(СоздатьИсточник(ПравилоОбработки, ПодчиненныйПоказатель, Показатель));
				КонецЦикла; 
			КонецЕсли;
			
		Иначе
			
			ДанныеФормулы = Данные.Формулы[ПолучитьИмяФормулы(Элемент.Имя, ФункцияПоказателя)];
			
			Показатель = СоздатьПоказатель(ВидОтчета, Элемент.Ссылка, ФункцияПоказателя, ГруппыРаскрытия, Колонка, Строки);
			МассивПоказателей.Добавить(Показатель);
			
			Если НЕ ДанныеФормулы = Неопределено Тогда
				
				УправлениеФормойКлиентСерверУХ.РаспаковатьДанныеФормыДерево(ДанныеФормулы, ТекущаяФормула_);
				
				Если ТекущаяФормула_.ПолучитьЭлементы().Количество() > 0 Тогда
					Для Каждого СтрокаИсточника Из ТекущаяФормула_.ПолучитьЭлементы() Цикл
						МассивИсточников.Добавить(СоздатьИсточник(ПравилоОбработки, СтрокаИсточника.Источник, Показатель, СтрокаИсточника));
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если МассивИсточников.Количество() > 0 Тогда
			
			ТекстФормулы = "";
			Для Каждого Источник Из МассивИсточников Цикл
				ТекстФормулы = ТекстФормулы + " + [" + СокрП(Источник.Код) + "]";
			КонецЦикла; 
			ТекстФормулы = Сред(ТекстФормулы, 4);
			
			ЗаписьФормулы = РегистрыСведений.ПроцедурыРасчетов.СоздатьМенеджерЗаписи();
			ЗаписьФормулы.НазначениеРасчетов = ПравилоОбработки;
			ЗаписьФормулы.ПотребительРасчета = Показатель;
			ЗаписьФормулы.Процедура = ТекстФормулы;
			ЗаписьФормулы.Записать();
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат МассивПоказателей;
	
КонецФункции

&НаСервере
Функция СоздатьПоказатель(ВидОтчета, Счет, ФункцияПоказателя, ГруппыРаскрытия, Колонка, Строки)
	
	Имя = Счет.Код + " " + ФункцияПоказателя;
	
	ГруппаРаскрытия = ГруппыРаскрытия[Счет];
	СтрокаОтчета = Строки[Счет];
		
	ПоказательОбъект = Справочники.ПоказателиОтчетов.СоздатьЭлемент();
	ПоказательОбъект.Владелец = ВидОтчета;
	ПоказательОбъект.Наименование = Имя;
	ПоказательОбъект.Код = ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(ПоказательОбъект.Наименование,, "ПоказателиОтчетов", ПоказательОбъект.Владелец);
	ПоказательОбъект.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
	ПоказательОбъект.СчетБД = Счет;
	ПоказательОбъект.ВидИтогаПоСчету = Перечисления.ВидыБухгалтерскихИтогов[ФункцияПоказателя];
	ПоказательОбъект.Колонка = Колонка;
	ПоказательОбъект.Строка = СтрокаОтчета;
	
	Если НЕ ГруппаРаскрытия.Пустая() Тогда
		ПоказательОбъект.ГруппаРаскрытия = ГруппаРаскрытия;
		ПоказательОбъект.ВидИтога = Перечисления.ВидыИтоговПоказателя.Сумма;
	КонецЕсли;
	
	ПоказательОбъект.Записать();
	
	Возврат ПоказательОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция СоздатьИсточник(ПравилоОбработки, Показатель, Потребитель, СтрокаФормулы = Неопределено)
	
	ИсточникРасчетов = Справочники.ИсточникиДанныхДляРасчетов.СоздатьЭлемент();
	
	ИсточникРасчетов.Наименование = Показатель.Наименование;
	ИсточникРасчетов.ПоказательОтбор = Показатель;
	ИсточникРасчетов.НазначениеРасчетов = ПравилоОбработки;
	ИсточникРасчетов.ПотребительРасчета = Потребитель;
	
	ИсточникРасчетов.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета;
	ИсточникРасчетов.СпособИспользования = Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета;
	ИсточникРасчетов.ТипБД = ВидОтчетаТипВИБ;
	
	ИсточникРасчетов.ПодготовитьТаблицыСопоставленийИОтборов();			
			
	Если НЕ СтрокаФормулы = Неопределено Тогда
		
		Для НомерАнаналитики = 1 По СтрокаФормулы.АналитикиКоличество Цикл
			НомерАналитикиСтрока = Формат(НомерАнаналитики, "ЧГ=");
			ЗначениеОтбора = СтрокаФормулы["АналитикаИсточника" + НомерАналитикиСтрока + "Отбор"];
			Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
				СтрокаПараметра = ИсточникРасчетов.мТабПравилаВычисленияПараметров.Найти("Аналитика" + НомерАналитикиСтрока, "ИмяПараметра");
				Если НЕ СтрокаПараметра = Неопределено Тогда
					СтрокаПараметра.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
					СтрокаПараметра.УточнениеСпособаОпределения = ЗначениеОтбора;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ПравыеСтроки1 = ИсточникРасчетов.ТаблицаСоответствияБД;
		Для Каждого ПраваяСтрока1 Из ПравыеСтроки1 Цикл
			Если ПраваяСтрока1.ПсевдонимКонсолидации = НСтр("ru = 'Аналитика показателя'") Тогда
				
				ПравыеСтроки2 = ПраваяСтрока1;
				Для Каждого ПраваяСтрока2 Из ПравыеСтроки2 Цикл
					
					НомерАналитики = Неопределено;
					Если Лев(ПраваяСтрока2.АналитикаКонсолидации, СтрДлина("Аналитика")) = "Аналитика" Тогда
						
						НомерАналитикиПриемника = Число(Сред(ПраваяСтрока2.АналитикаКонсолидации, СтрДлина("Аналитика") + 1));
						
						НомерАналитикиИсточника = СтрокаФормулы["Аналитика" + Формат(НомерАналитикиПриемника, "ЧГ=")];
						
						Если НомерАналитикиИсточника = 0 Тогда
							ПраваяСтрока2.АналитикаБД				= Неопределено;
							ПраваяСтрока2.ПсевдонимБД				= Неопределено;
							ПраваяСтрока2.Сопоставлено				= Ложь;
							ПраваяСтрока2.СправочникБД				= "";
							ПраваяСтрока2.ПолеЗапроса				= "";
							ПраваяСтрока2.ТипМетаДанных				= "";
							ПраваяСтрока2.НастройкаСоответствия		= "";
						Иначе
							
							Для Каждого ЛеваяСтрока1 Из ИсточникРасчетов.ТаблицаСоответствияБД Цикл
								Нашли = Ложь;
								Для Каждого ЛеваяСтрока2 Из ЛеваяСтрока1.Строки Цикл
									Если ЛеваяСтрока2.АналитикаБД = "Аналитика" + Формат(НомерАналитикиИсточника, "ЧГ=") Тогда
										Нашли = Истина;
										ЗаполнитьЗначенияСвойств(ЛеваяСтрока2, ПраваяСтрока2);
										ПраваяСтрока2.Сопоставлено = Истина;
										Прервать;
									КонецЕсли;
								КонецЦикла; 
								Если Нашли Тогда
									Прервать;
								КонецЕсли;
							КонецЦикла; 
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла; 
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ИсточникРасчетов.СохранитьНастройкиОперанда();
	
	ИсточникРасчетов.Записать();
	
	Возврат ИсточникРасчетов.Ссылка;
	
КонецФункции

&НаСервере
Функция СоздатьГруппуРаскрытия(ВидОтчета, Счет, Наименование)
	
	ДанныеАналитики = Данные.Аналитики[Счет];
	
	Если ДанныеАналитики = Неопределено Тогда
		Возврат Справочники.ГруппыРаскрытия.ПустаяСсылка();
	КонецЕсли;
	
	ГруппаРаскрытияОбъект = Справочники.ГруппыРаскрытия.СоздатьЭлемент();
	ГруппаРаскрытияОбъект.Владелец = ВидОтчета;
	ГруппаРаскрытияОбъект.Наименование = Наименование;
	ГруппаРаскрытияОбъект.Код = ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(ГруппаРаскрытияОбъект.Наименование,, "ГруппыРаскрытия", ГруппаРаскрытияОбъект.Владелец);
	ГруппаРаскрытияОбъект.СчетБД = Счет;
	
	Для Индекс = 0 По ДанныеАналитики.ВГраница() Цикл
		НомерАналитики = Формат(Индекс + 1, "ЧГ=");
		ГруппаРаскрытияОбъект["ВидАналитики" + НомерАналитики] = ДанныеАналитики[Индекс].Ссылка;
		ГруппаРаскрытияОбъект["Аналитика" + НомерАналитики + "Обязательна"] = Истина;
	КонецЦикла;
	
	ГруппаРаскрытияОбъект.Записать();
	
	Возврат ГруппаРаскрытияОбъект.Ссылка;
	
КонецФункции
