
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОБъект.Документ = Параметры.Документ;
	ТекОБъект.ВерсияОрганизационнойСтруктуры = Параметры.ВерсияОрганизационнойСтруктуры;
	
	Если  Параметры.Свойство("ОбъектБД") Тогда
		 ОтборОбъект = Параметры.ОбъектБД;
	ИначеЕсли  Параметры.Свойство("ОтборОбъект") Тогда
		 ОтборОбъект = Параметры.ОтборОбъект;
	Иначе	
		 ОтборОбъект = Неопределено;
	КонецЕсли;	
	
	Если  Параметры.Свойство("ЭтоНСИ") Тогда
		ПараметрСогласования = "СогласуетсяНСИ";
	Иначе	
		ПараметрСогласования = "Согласуется";
	КонецЕсли;	
	
	
	мЗапрос = УправлениеОтчетамиУХ.ИнициализироватьЗапрос(Параметры.ВерсияОрганизационнойСтруктуры ,УникальныйИдентификатор, ПутьКХранилищуЗапроса,ПараметрСогласования,ОтборОбъект);
	
	ЗначениеВДанныеФормы(УправлениеПроцессамиСогласованияУХ.ПолучитьДеревоЗначенийЭтапов(Параметры.ВерсияОрганизационнойСтруктуры), ЭтапыПроцесса);
	ЗначениеВДанныеФормы(УправлениеОтчетамиУХ.ПолучитьДеревоОрганизаций(мЗапрос)   , ОрганизационныеЕдиницы);
	ЗначениеВДанныеФормы(УправлениеОтчетамиУХ.ПолучитьДеревоВидовОтчетов(мЗапрос)  , ВидыОтчетов);
	
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	
	ЦветЧетныйВидОтчета        = Новый Цвет(224, 255, 228);
	ЦветНеЧетныйВидОтчета      = Новый Цвет(255, 248, 224);
	ЦветУзораЧетныйВидОтчета   = Новый Цвет(180, 255, 160);
	ЦветУзораНеЧетныйВидОтчета = Новый Цвет(255, 240, 192);
	ЦветФонаЧетнойСтроки       = Новый Цвет(228, 255, 240);
	
	Элементы.ГруппаВыбора.Видимость=Ложь;
	
	ОбновитьПолеНастройки(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПолеНастройки(ПервоначальноеОтображение = Ложь, ПроверкаRLS = Ложь)
	
	КартинкаНечетныхСтрок=БиблиотекаКартинок.МатрицаПроцесса_Градиент1;
	
	Если ПервоначальноеОтображение Тогда
		ЗначениеВДанныеФормы(ПолучитьТаблицуПолномочий(Неопределено, Неопределено, Неопределено, Неопределено, Неопределено), ТаблицаМатрицаПолномочий);
	Иначе
		Если ВыбранноеЗначениеОрганизации = Неопределено Тогда
			ПрофильОрганизации = Неопределено;
			ТекОрганизация     = Неопределено;
		ИначеЕсли ВыбранноеЗначениеОрганизации = "<БЕЗ ОРГАНИЗАЦИИ>" Тогда
	        ПрофильОрганизации = Неопределено;
			ТекОрганизация     = "<БЕЗ ОРГАНИЗАЦИИ>";	
		ИначеЕсли ТипЗнч(ВыбранноеЗначениеОрганизации) = Тип("СправочникСсылка.Организации") Тогда
			ПрофильОрганизации = Неопределено;
			ТекОрганизация     = ВыбранноеЗначениеОрганизации;
		ИначеЕсли ВыбранноеЗначениеОрганизации.Профиль = ИСТИНА Тогда
			ПрофильОрганизации = ВыбранноеЗначениеОрганизации.Значение;
			ТекОрганизация     = Неопределено;
		Иначе
			ПрофильОрганизации = Неопределено;
			ТекОрганизация     = ВыбранноеЗначениеОрганизации.Значение;
		КонецЕсли;
		
		ТекущаяСтрока = ЭтапыПроцесса.НайтиПоИдентификатору(?(Элементы.ЭтапыПроцесса.ТекущаяСтрока=Неопределено,0,Элементы.ЭтапыПроцесса.ТекущаяСтрока));

		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Ссылка) Тогда
			ЭтапПроцесса = Неопределено;
		ИначеЕсли ТекущаяСтрока.ЭтоГруппа Тогда
			ЭтапПроцесса = Новый Массив;
			ВернутьМассивЭтаповДляГруппы(ЭтапПроцесса, ТекущаяСтрока);
		Иначе
			ЭтапПроцесса = ТекущаяСтрока.Ссылка;
		КонецЕсли;
		
		ТекущаяСтрока = ВидыОтчетов.НайтиПоИдентификатору(?(Элементы.ВидыОтчетов.ТекущаяСтрока=Неопределено,0,Элементы.ВидыОтчетов.ТекущаяСтрока));
		ЗначениеВДанныеФормы(ПолучитьТаблицуПолномочий(ЭтапПроцесса
														,ТекОрганизация
														,ПрофильОрганизации
														,?(ТекущаяСтрока.Этап = ЛОЖЬ, ТекущаяСтрока.Значение, Неопределено)
														,?(ТекущаяСтрока.Этап = ИСТИНА, ТекущаяСтрока.Значение, Неопределено)), ТаблицаМатрицаПолномочий);
	КонецЕсли;
	
	РабочаяТаблица = ТаблицаМатрицаПолномочий.Выгрузить();
	ТаблицаОрганизаций  = РабочаяТаблица.Скопировать(, "Организация");
	ТаблицаОрганизаций.Свернуть("Организация");
	ТаблицаОрганизаций.Сортировать("Организация");
	
	
	ТаблицаВидовОтчетов = РабочаяТаблица.Скопировать(, "ВидОтчета,ДокументБД");
	ТаблицаВидовОтчетов.Свернуть("ВидОтчета,ДокументБД");
	ТаблицаВидовОтчетов.Сортировать("ВидОтчета");
	
	
	Макет = Обработки.НастройкаМатрицыПолномочий.ПолучитьМакет("Макет");
	ПолеНастройки.Очистить();
	
	ОбластьВидОтчета   = Макет.ПолучитьОбласть("ВидОтчета");
	ОбластьОрганизация = Макет.ПолучитьОбласть("Организация");
	ОбластьДетализация = Макет.ПолучитьОбласть("Детализация");
	
	ПолеНастройки.Вывести(Макет.ПолучитьОбласть("Шапка"));
	
	Инд = 1;
	
	Если ПроверкаRLS Тогда
		ТаблицаПроверки = Новый ТаблицаЗначений;
		ТаблицаПроверки.Колонки.Добавить("ВидОтчета",   Новый ОписаниеТипов("СправочникСсылка"));
		ТаблицаПроверки.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблицаПроверки.Колонки.Добавить("Исполняющий", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
		ТаблицаПроверки.Колонки.Добавить("Согласование",Новый ОписаниеТипов("СправочникСсылка.Пользователи, СправочникСсылка.МаршрутыСогласования"));
	КонецЕсли;
	
	ТаблицаРасположенияВидовОтчетов.Очистить();
	ТаблицаРасположенияОрганизаций.Очистить();
	
	ЗаявкаНСИ = Справочники.ДокументыБД.НайтиПоНаименованию("ЗаявкаНаИзменениеНСИ",,,Справочники.ТипыБазДанных.ТекущаяИБ);
	
	Для Каждого СтрокаВидОтчета Из ТаблицаВидовОтчетов Цикл
		Если ТипЗнч(СтрокаВидОтчета.ВидОтчета)=Тип("СправочникСсылка.СправочникиБД") Тогда
			Если  СтрокаВидОтчета.ДокументБД = ЗаявкаНСИ Тогда
				ОбластьВидОтчета.Параметры.ВидОтчета   = "Заявка НСИ.["+СтрокаВидОтчета.ВидОтчета.Синоним+"]";

			Иначе
				ОбластьВидОтчета.Параметры.ВидОтчета   = СтрокаВидОтчета.ВидОтчета.Синоним;

			КонецЕсли;	
			
		Иначе	
			ОбластьВидОтчета.Параметры.ВидОтчета   = СтрокаВидОтчета.ВидОтчета;
		КонецЕсли;	
			
		
		ОбластьВидОтчета.Параметры.Расшифровка = Новый Структура("ВидОтчета,ДокументБД", СтрокаВидОтчета.ВидОтчета,СтрокаВидОтчета.ДокументБД);
		ТекОбласть = ПолеНастройки.Присоединить(ОбластьВидОтчета);
		//ТекОбласть.ЦветФона  = ?(ОбщегоНазначенияУХ.ЧетноеЧисло(Инд), ЦветЧетныйВидОтчета, ЦветНеЧетныйВидОтчета);
		//ТекОбласть.ЦветУзора = ?(ОбщегоНазначенияУХ.ЧетноеЧисло(Инд), ЦветУзораЧетныйВидОтчета, ЦветУзораНеЧетныйВидОтчета);
		
		НоваяСтрока = ТаблицаРасположенияВидовОтчетов.Добавить();
		НоваяСтрока.ВидОтчета = СтрокаВидОтчета.ВидОтчета;
		НоваяСтрока.Колонка   = ТекОбласть.Лево;
		
		Инд = Инд + 1;
	КонецЦикла;
	
	Инд = 1;
	ТаблицаМатрицаПолномочийТЗ = РеквизитФормыВЗначение("ТаблицаМатрицаПолномочий");
	ТаблицаМатрицаПолномочийТЗ.Индексы.Добавить("ВидОтчета,Организация,ДокументБД");
	
	Для Каждого СтрокаОрганизация Из ТаблицаОрганизаций Цикл
		
		ТаблДокСтрока = Новый ТабличныйДокумент;
		ОбластьОрганизация.Параметры.Организация = СтрокаОрганизация.Организация;
		
		ОбластьОрганизация.Параметры.Расшифровка = СтрокаОрганизация.Организация;
		
		Если СтрокаОрганизация.Организация="<БЕЗ ОРГАНИЗАЦИИ>" Тогда	
			 ОбластьОрганизация.Параметры.Расшифровка  = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
		
		ТаблДокСтрока.Вывести(ОбластьОрганизация);
		
		Для Каждого СтрокаВидОтчета ИЗ ТаблицаВидовОтчетов Цикл
			Если СтрокаВидОтчета.ДокументБД = ЗаявкаНСИ Или ТипЗнч(СтрокаВидОтчета.ДокументБД)=Тип("СправочникСсылка.СправочникиБД") Тогда
				Если НЕ СтрокаВидОтчета.ВидОтчета.РазделятьПоОрганизациям и СтрокаОрганизация.Организация<>"<БЕЗ ОРГАНИЗАЦИИ>"  Тогда
					ОбластьДетализация.Параметры.Расшифровка = Неопределено;
					ТекОбласть = ТаблДокСтрока.Присоединить(ОбластьДетализация);
					//ТекОбласть.ЦветФона = Новый Цвет(125, 125, 125);
					ТекОбласть.Объединить();
					ТекОбласть.Текст = "Х";
					ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
					Продолжить;
				ИначеЕсли СтрокаВидОтчета.ВидОтчета.РазделятьПоОрганизациям и СтрокаОрганизация.Организация="<БЕЗ ОРГАНИЗАЦИИ>" Тогда	
					
					ОбластьДетализация.Параметры.Расшифровка = Неопределено;
					ТекОбласть = ТаблДокСтрока.Присоединить(ОбластьДетализация);
					//ТекОбласть.ЦветФона = Новый Цвет(125, 125, 125);
					ТекОбласть.Объединить();
					ТекОбласть.Текст = "Х";
					ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
					Продолжить;	
					
				КонецЕсли;
			ИначеЕсли СтрокаОрганизация.Организация="<БЕЗ ОРГАНИЗАЦИИ>"	Тогда
				ОбластьДетализация.Параметры.Расшифровка = Неопределено;
				ТекОбласть = ТаблДокСтрока.Присоединить(ОбластьДетализация);
				//ТекОбласть.ЦветФона = Новый Цвет(125, 125, 125);
				ТекОбласть.Объединить();
				ТекОбласть.Текст = "Х";
				ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
				Продолжить;	
			КонецЕсли;
			
			Структура = Новый Структура("ВидОтчета, Организация,ДокументБД", СтрокаВидОтчета.ВидОтчета, СтрокаОрганизация.Организация,СтрокаВидОтчета.ДокументБД);
			НайденныеСтроки = ТаблицаМатрицаПолномочийТЗ.НайтиСтроки(Структура);
			Если НайденныеСтроки.Количество() <> 1 Тогда
				ОбластьДетализация.Параметры.Расшифровка = Неопределено;
				ТекОбласть = ТаблДокСтрока.Присоединить(ОбластьДетализация);
				//ТекОбласть.ЦветФона = Новый Цвет(125, 125, 125);
				ТекОбласть.Объединить();
				ТекОбласть.Текст = "Х";
				ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
			Иначе
								
				
				СтрокиИзменений = ТаблицаИзмененныхДанных.НайтиСтроки(Структура);
				Если СтрокиИзменений.Количество() > 0 Тогда
					ТекИсполняющий  = СтрокиИзменений[0].Исполняющий;
					ТекСогласование = СтрокиИзменений[0].Согласование;
					ТекИсполняющий_Организация  = СтрокиИзменений[0].Исполняющий_Организация;
					ТекСогласование_Организация = СтрокиИзменений[0].Согласование_Организация;
					ЖирныйШрифт     = Истина;
					
				Иначе
					ТекИсполняющий  = НайденныеСтроки[0].Исполняющий;
					ТекСогласование = НайденныеСтроки[0].Согласование;
					ТекИсполняющий_Организация  = НайденныеСтроки[0].Исполняющий_Организация;
					ТекСогласование_Организация = НайденныеСтроки[0].Согласование_Организация;

					ЖирныйШрифт     = Ложь;
				КонецЕсли;
				
				ОбластьДетализация.Параметры.Расшифровка  = Структура;
				
				
				Если ТипЗнч(ТекИсполняющий) = Тип("СправочникСсылка.РолиКонтактныхЛиц") Тогда
					ОбластьДетализация.Параметры.Исполняющий = "" + ТекИсполняющий + "/(" + ?(ЗначениеЗаполнено(ТекИсполняющий_Организация), ТекИсполняющий_Организация, "Текущая организация") + ")";
				Иначе
					ОбластьДетализация.Параметры.Исполняющий  = ТекИсполняющий;
				КонецЕсли;
				
				Если ТипЗнч(ТекСогласование) = Тип("СправочникСсылка.РолиКонтактныхЛиц") Тогда
					ОбластьДетализация.Параметры.Согласование = "" + ТекСогласование + "/(" + ?(ЗначениеЗаполнено(ТекСогласование_Организация), ТекСогласование_Организация, "Текущая организация") + ")";
				Иначе
					ОбластьДетализация.Параметры.Согласование  = ТекСогласование;
				КонецЕсли;
				
				ТекОбласть = ТаблДокСтрока.Присоединить(ОбластьДетализация);
				ТекОбласть.Шрифт = Новый Шрифт(ТекОбласть.Шрифт, , , ЖирныйШрифт);
				
				Если ПроверкаRLS Тогда
					
					НоваяСтрока = ТаблицаПроверки.Добавить();
					
					НоваяСтрока.ВидОтчета    = СтрокаВидОтчета.ВидОтчета;
					НоваяСтрока.Организация  = СтрокаОрганизация.Организация;
					НоваяСтрока.Исполняющий  = ТекИсполняющий;
					НоваяСтрока.Согласование = ТекСогласование;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		ТекОбласть = ПолеНастройки.Вывести(ТаблДокСтрока);
		
		НоваяСтрока = ТаблицаРасположенияОрганизаций.Добавить();
		НоваяСтрока.Организация = СтрокаОрганизация.Организация;
		НоваяСтрока.Ряд         = ТекОбласть.Верх;
		
		//ПолеНастройки.Область(ТекОбласть.Верх, 1, ТекОбласть.Низ, ПолеНастройки.ШиринаТаблицы).ЦветФона = ?(ОбщегоНазначенияУХ.ЧетноеЧисло(Инд), ЦветФонаЧетнойСтроки, Новый Цвет());
		//КартинкаФона=?(ОбщегоНазначенияУХ.ЧетноеЧисло(Инд), КартинкаНечетныхСтрок,Неопределено);
		//Если КартинкаФона<>Неопределено Тогда
		//	ПолеНастройки.Область(ТекОбласть.Верх, 1, ТекОбласть.Низ, ПолеНастройки.ШиринаТаблицы).Картинка =КартинкаФона ;
		//	ПолеНастройки.Область(ТекОбласть.Верх, 1, ТекОбласть.Низ, ПолеНастройки.ШиринаТаблицы).РазмерКартинки=РазмерКартинки.Растянуть;
		//КонецЕсли;
		Инд = Инд + 1;
		
	КонецЦикла;
	
	Если ПроверкаRLS Тогда
		ЗначениеВДанныеФормы(ПроверитьКорректностьНастроек(ТаблицаПроверки), ОшибочнаяТаблица);
		
		Для Каждого Строка ИЗ ОшибочнаяТаблица Цикл
			
			Ряд     = ТаблицаРасположенияОрганизаций.НайтиСтроки(Новый Структура("Организация", Строка.Организация))[0].Ряд;
			Колонка = ТаблицаРасположенияВидовОтчетов.НайтиСтроки(Новый Структура("ВидОтчета", Строка.ВидОтчета))[0].Колонка;
			
			Если Строка.Исполняющий Тогда
				СмещениеРяда = 0;
			Иначе
				СмещениеРяда = 1;
			КонецЕсли;
			
			Рис = ПолеНастройки.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
			Рис.Картинка = БиблиотекаКартинок.СообщениеОПроблемах;
			Рис.Расположить(ПолеНастройки.Область(Ряд + СмещениеРяда, Колонка + 1, Ряд + СмещениеРяда, Колонка + 1));
			Рис.Высота = 4;
			Рис.Ширина = 4;
			Рис.ГраницаСверху = Ложь;
			Рис.ГраницаСправа = Ложь;
			Рис.ГраницаСнизу = Ложь;
			Рис.ГраницаСлева = Ложь;
			
		КонецЦикла;
	КонецЕсли;
	
	ПолеНастройки.ФиксацияСверху = 1;
	ПолеНастройки.ФиксацияСЛЕВА  = 2;
	
КонецПроцедуры

Функция ПолучитьТаблицуПолномочий(ЭтапПроцесса = Неопределено, Организация = Неопределено, ПрофильОрганизаций = Неопределено, ВидОтчета = Неопределено, ВидОтчетаЭтапПроцесса = Неопределено) Экспорт
	
	Перем мЗапрос;
	УправлениеОтчетамиУХ.ВосстановитьВременныеТаблицыЗапроса(мЗапрос, ПутьКХранилищуЗапроса);
	
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаОрганизаций.Организация,
	|	ТаблицаВидовОтчетов.ВидОтчета,
	|	ТаблицаВидовОтчетов.ДокументБД,
	|	РегистрМатрицыПолномочий.Исполняющий,
	|	РегистрМатрицыПолномочий.Исполняющий_Организация,
	|	РегистрМатрицыПолномочий.Согласование_Организация,
	|	РегистрМатрицыПолномочий.Согласование
	|ИЗ
	|	ТаблицаВидовОтчетов КАК ТаблицаВидовОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОрганизаций КАК ТаблицаОрганизаций
	|		ПО ТаблицаВидовОтчетов.ЭтапПроцесса = ТаблицаОрганизаций.ЭтапПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрМатрицыПолномочий КАК РегистрМатрицыПолномочий
	|		ПО (РегистрМатрицыПолномочий.Организация = ТаблицаОрганизаций.Организация)
	|			И (РегистрМатрицыПолномочий.ШаблонДокументаБД = ТаблицаВидовОтчетов.ВидОтчета)
	|			И (РегистрМатрицыПолномочий.ДокументБД = ТаблицаВидовОтчетов.ДокументБД)
	|             И (РегистрМатрицыПолномочий.ВерсияРегламентаПодготовкиОтчетности = &Регламент)";
	
	мЗапрос.УстановитьПараметр("Период"   , Объект.ВерсияОрганизационнойСтруктуры.МеткаВремени);
	мЗапрос.УстановитьПараметр("Регламент", Объект.ВерсияОрганизационнойСтруктуры);
	
	ГдеСтрока = "";
	Если ЗначениеЗаполнено(ЭтапПроцесса) Тогда
		Если ПустаяСтрока(ГдеСтрока) Тогда
			ГдеСтрока = "
			| ГДЕ ";
		Иначе
			ГдеСтрока = ГдеСтрока + "
			| И ";
		КонецЕсли;
		
		Если ТипЗнч(ЭтапПроцесса) = Тип("Массив") Тогда
			ГдеСтрока = ГдеСтрока + "
			| ТаблицаОрганизаций.ЭтапПроцесса В (&ЭтапПроцесса)";
		Иначе
			ГдеСтрока = ГдеСтрока + "
			| ТаблицаОрганизаций.ЭтапПроцесса = &ЭтапПроцесса";
		КонецЕсли;
		мЗапрос.УстановитьПараметр("ЭтапПроцесса", ЭтапПроцесса);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Если ПустаяСтрока(ГдеСтрока) Тогда
			ГдеСтрока = "
			| ГДЕ
			| ТаблицаОрганизаций.Организация = &Организация";
		Иначе
			ГдеСтрока = ГдеСтрока + "
			| И ТаблицаОрганизаций.Организация = &Организация";
		КонецЕсли;
		мЗапрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидОтчета) Тогда
		Если ПустаяСтрока(ГдеСтрока) Тогда
			ГдеСтрока = "
			| ГДЕ
			| ТаблицаВидовОтчетов.ВидОтчета = &ВидОтчета";
		Иначе
			ГдеСтрока = ГдеСтрока + "
			| И ТаблицаВидовОтчетов.ВидОтчета = &ВидОтчета";;
		КонецЕсли;
		мЗапрос.УстановитьПараметр("ВидОтчета", ВидОтчета);
	КонецЕсли;

	Если ЗначениеЗаполнено(ПрофильОрганизаций) Тогда
		Если ПустаяСтрока(ГдеСтрока) Тогда
			ГдеСтрока = "
			| ГДЕ
			| ТаблицаОрганизаций.ПрофильОрганизаций = &ПрофильОрганизаций
			| И ТаблицаОрганизаций.Организация <> ТаблицаОрганизаций.ПрофильОрганизаций";
		Иначе
			ГдеСтрока = ГдеСтрока + "
			| И ТаблицаОрганизаций.ПрофильОрганизаций = &ПрофильОрганизаций
			| И ТаблицаОрганизаций.Организация <> ТаблицаОрганизаций.ПрофильОрганизаций";
			
		КонецЕсли;
		мЗапрос.УстановитьПараметр("ПрофильОрганизаций", ПрофильОрганизаций);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ВидОтчетаЭтапПроцесса) Тогда
		
		Если ТипЗнч(ВидОтчетаЭтапПроцесса) = Тип("СправочникСсылка.УдалитьЭтапыПроцессов") Тогда
			СтрокаОтбора = "
			| ТаблицаВидовОтчетов.ЭтапПроцесса = &ВидОтчетаЭтапПроцесса";
		Иначе
			СтрокаОтбора = "
			| ТаблицаВидовОтчетов.ВидОтчета.Родитель = &ВидОтчетаЭтапПроцесса";
		КонецЕсли;
		
		Если ПустаяСтрока(ГдеСтрока) Тогда
			ГдеСтрока = "
			| ГДЕ " + СтрокаОтбора;
		Иначе
			ГдеСтрока = ГдеСтрока + "
			| И " + СтрокаОтбора;
		КонецЕсли;
		
		мЗапрос.УстановитьПараметр("ВидОтчетаЭтапПроцесса", ВидОтчетаЭтапПроцесса);
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ГдеСтрока) Тогда
		мЗапрос.Текст = мЗапрос.Текст + ГдеСтрока;
	КонецЕсли;
	
	Возврат мЗапрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ВернутьМассивЭтаповДляГруппы(Массив, Группа)
	
	Для Каждого Строка Из Группа.Строки Цикл
		Массив.Добавить(Строка.Ссылка);
		Если Строка.ЭтоГруппа Тогда
			ВернутьМассивЭтаповДляГруппы(Массив, Строка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКорректностьНастроек(ТаблицаПроверки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ ВидОтчета, Организация, Исполняющий, Согласование ПОМЕСТИТЬ ТаблицаПроверки ИЗ &ВнешнийИсточник КАК ВнешнийИсточник";
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПроверки);
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|	КОГДА ЭтапыСогласованияУтверждающие.Пользователь ССЫЛКА Справочник.РолиКонтактныхЛИЦ
	|		И ЭтапыСогласования.УровеньОрганизации > 0 
	|		И Организации.Ссылка ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ 
	|	КОНЕЦ КАК НужнаОбработка,
	|	ТаблицаПроверки.Согласование,
	|	ТаблицаПроверки.Организация КАК Организация,
	|	ТаблицаПроверки.ВидОтчета КАК ВидОтчета,
	|	ЭтапыСогласования.УровеньОрганизации,
	|	ЭтапыСогласованияУтверждающие.Пользователь,
	|	ЕСТЬNULL(Организации.Ссылка, ТаблицаПроверки.Организация) КАК Вн_Организация
	|ИЗ 
	|	ТаблицаПроверки КАК ТаблицаПроверки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|Справочник.ЭтапыСогласования КАК ЭтапыСогласования
	|ПО ЭтапыСогласования.Владелец = ТаблицаПроверки.Согласование
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыСогласования.Утверждающие КАК ЭтапыСогласованияУтверждающие
	|ПО ЭтапыСогласования.Ссылка = ЭтапыСогласованияУтверждающие.Ссылка
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|ПО Организации.Ссылка = ЭтапыСогласованияУтверждающие.Организация
	|ГДЕ ТаблицаПроверки.Согласование ССЫЛКА Справочник.МаршрутыСогласования
	|  И ТаблицаПроверки.Согласование <> ЗНАЧЕНИЕ(Справочник.МаршрутыСогласования.ПустаяСсылка)";
	
	ТаблицаОтветственныхПоОрганизациям = Запрос.Выполнить().Выгрузить();
	МассивОбрабатываемыхСтрок = ТаблицаОтветственныхПоОрганизациям.НайтиСтроки(Новый Структура("НужнаОбработка", ИСТИНА));
	
	КэшОрганизаций = Новый Соответствие;
	
	Для Каждого Строка ИЗ МассивОбрабатываемыхСтрок Цикл
		МассивОрганизаций = КэшОрганизаций[Строка.Вн_Организация];
		Если МассивОрганизаций = Неопределено Тогда
			КэшОрганизаций.Вставить(Строка.Вн_Организация, МодульСогласованияДокументовУХ.ПолучитьМассивИерархии_ПоВерсииОрганизационнойСтруктуры(Строка.Вн_ОРганизация, Объект.ВерсияОрганизационнойСтруктуры));
			МассивОрганизаций = КэшОрганизаций[Строка.Вн_Организация];
		КонецЕсли;
		
		Строка.Вн_Организация = ?(МассивОрганизаций.ВГраница() >= Строка.УровеньОрганизации, МассивОрганизаций[Строка.УровеньОрганизации], Строка.Вн_Организация);
		
	КонецЦикла;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВнешнийИсточник.НужнаОбработка,
		|	ВнешнийИсточник.Согласование,
		|	ВнешнийИсточник.Организация,
		|	ВнешнийИсточник.ВидОтчета,
		|	ВнешнийИсточник.УровеньОрганизации,
		|	ВнешнийИсточник.Пользователь,
		|	ВнешнийИсточник.Вн_Организация
		|ПОМЕСТИТЬ ТаблицаСогласованияОрганизаций
		|ИЗ
		|	&ВнешнийИсточник КАК ВнешнийИсточник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПроверки.ВидОтчета,
		|	ТаблицаПроверки.Организация,
		|	ТаблицаПроверки.Исполняющий КАК Пользователь,
		|	ИСТИНА КАК Исполняющий
		|ИЗ
		|	ТаблицаПроверки КАК ТаблицаПроверки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПраваДоступаПользователейВидыОтчетов КАК ПраваДоступаПользователей
		|		ПО ТаблицаПроверки.ВидОтчета = ПраваДоступаПользователей.ВидОтчета
		|			И ТаблицаПроверки.Организация = ПраваДоступаПользователей.Организация
		|			И ТаблицаПроверки.Исполняющий = ПраваДоступаПользователей.Пользователь
		|ГДЕ
		|	ЕСТЬNULL(ПраваДоступаПользователей.Запись, ЛОЖЬ) = ЛОЖЬ
		|	И ТаблицаПроверки.Исполняющий <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаПроверки.ВидОтчета,
		|	ТаблицаПроверки.Организация,
		|	ТаблицаПроверки.Согласование,
		|	ЛОЖЬ
		|ИЗ
		|	ТаблицаПроверки КАК ТаблицаПроверки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПраваДоступаПользователейВидыОтчетов КАК ПраваДоступаПользователей
		|		ПО ТаблицаПроверки.ВидОтчета = ПраваДоступаПользователей.ВидОтчета
		|			И ТаблицаПроверки.Организация = ПраваДоступаПользователей.Организация
		|			И ТаблицаПроверки.Согласование = ПраваДоступаПользователей.Пользователь
		|ГДЕ
		|	ТаблицаПроверки.Согласование ССЫЛКА Справочник.Пользователи
		|	И ТаблицаПроверки.Согласование <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И (ЕСТЬNULL(ПраваДоступаПользователей.Утверждение, ЛОЖЬ) = ЛОЖЬ
		|			ИЛИ ЕСТЬNULL(ПраваДоступаПользователей.Запись, ЛОЖЬ) = ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТАблицаСогласованияОрганизаций.ВидОтчета,
		|	ТАблицаСогласованияОрганизаций.Организация,
		|	ОтветственныеОрганизаций.Пользователь,
		|	ЛОЖЬ
		|ИЗ
		|	ТаблицаСогласованияОрганизаций КАК ТАблицаСогласованияОрганизаций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций
		|		ПО (ОтветственныеОрганизаций.Организация = ТАблицаСогласованияОрганизаций.Вн_Организация)
		|			И (ОтветственныеОрганизаций.Роль = ТАблицаСогласованияОрганизаций.Пользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПраваДоступаПользователейВидыОтчетов КАК ПраваДоступаПользователей
		|		ПО ТАблицаСогласованияОрганизаций.ВидОтчета = ПраваДоступаПользователей.ВидОтчета
		|			И ТАблицаСогласованияОрганизаций.Организация = ПраваДоступаПользователей.Организация
		|			И (ОтветственныеОрганизаций.Пользователь = ПраваДоступаПользователей.Пользователь)
		|ГДЕ
		|	ТАблицаСогласованияОрганизаций.Пользователь ССЫЛКА Справочник.РолиКонтактныхЛиц
		|	И (ЕСТЬNULL(ПраваДоступаПользователей.Утверждение, ЛОЖЬ) = ЛОЖЬ
		|			ИЛИ ЕСТЬNULL(ПраваДоступаПользователей.Запись, ЛОЖЬ) = ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТАблицаСогласованияОрганизаций.ВидОтчета,
		|	ТАблицаСогласованияОрганизаций.Организация,
		|	ТАблицаСогласованияОрганизаций.Пользователь,
		|	ЛОЖЬ
		|ИЗ
		|	ТаблицаСогласованияОрганизаций КАК ТАблицаСогласованияОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПраваДоступаПользователейВидыОтчетов КАК ПраваДоступаПользователей
		|		ПО ТАблицаСогласованияОрганизаций.ВидОтчета = ПраваДоступаПользователей.ВидОтчета
		|			И ТАблицаСогласованияОрганизаций.Организация = ПраваДоступаПользователей.Организация
		|			И ТАблицаСогласованияОрганизаций.Пользователь = ПраваДоступаПользователей.Пользователь
		|ГДЕ
		|	ТАблицаСогласованияОрганизаций.Пользователь ССЫЛКА Справочник.Пользователи
		|	И (ЕСТЬNULL(ПраваДоступаПользователей.Утверждение, ЛОЖЬ) = ЛОЖЬ
		|			ИЛИ ЕСТЬNULL(ПраваДоступаПользователей.Запись, ЛОЖЬ) = ЛОЖЬ)";
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаОтветственныхПоОрганизациям);
	
	ТаблицаОтвета = Запрос.Выполнить().Выгрузить();
	ТаблицаПользователей = ТаблицаОтвета.Скопировать(, "Пользователь");
	ТаблицаПользователей.Свернуть("Пользователь");
	Для Каждого строка Из ТаблицаПользователей Цикл
		Если ПолныеПраваУХ.ПроверитьНаличиеПолныхПравУПользователя(Строка.Пользователь) Тогда
			УдаляемыеСтроки = ТаблицаОтвета.НайтиСтроки(Новый Структура("Пользователь", Строка.Пользователь));
			Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
				ТаблицаОтвета.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаОтвета;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьМассивРасшифровок(МассивРасшифровок, ТекТипКолонки)
	
	Если МассивРасшифровок.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли МассивРасшифровок.Количество() = 1 И ТекТипКолонки = Тип("Структура")   
		И МассивРасшифровок[0].Свойство("Организация") и МассивРасшифровок[0].Свойство("ВидОтчета")   Тогда
		
		Организация  = МассивРасшифровок[0].Организация;
		ВидОтчета    = МассивРасшифровок[0].ВидОтчета;
		ДокументБД  = МассивРасшифровок[0].ДокументБД;
		
		Если ЗначениеЗаполнено(ТаблицаИзмененныхДанных) Тогда
			НайденныеСтроки = ТаблицаИзмененныхДанных.НайтиСтроки(МассивРасшифровок[0]);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденныеСтроки = ТаблицаМатрицаПолномочий.НайтиСтроки(МассивРасшифровок[0]);
			КонецЕсли;
		Иначе
			НайденныеСтроки = ТаблицаМатрицаПолномочий.НайтиСтроки(МассивРасшифровок[0]);
		КонецЕсли;
		
		Если НайденныеСтроки.Количество() = 1 Тогда
			
			СтруктураОтвета = Неопределено;

			ПараметрыФормы = Новый Структура("ГрупповоеИзменение, Исполняющий, Согласование, Исполняющий_Организация, Согласование_Организация"
													, Ложь
													, НайденныеСтроки[0].Исполняющий
													, НайденныеСтроки[0].Согласование
													, НайденныеСтроки[0].Исполняющий_Организация
													, НайденныеСтроки[0].Согласование_Организация);
			
			ДопПараметры =  Новый Структура("ВидОтчета, ДокументБД, НайденныеСтроки, Организация", ВидОтчета, ДокументБД, НайденныеСтроки, Организация);
			Оповещение = Новый ОписаниеОповещения("ОбработатьМассивРасшифровокЗавершение", ЭтотОбъект, ДопПараметры);
			ОткрытьФорму("Обработка.НастройкаМатрицыПолномочий.Форма.ФормаВыбора_Управляемая", 
							ПараметрыФормы, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		КонецЕсли;
		
	ИначеЕсли ТекТипКолонки = Тип("Структура") Тогда
		
		МассивИзменяемыхСтрок = Новый Массив;
		Для Каждого ЭлементМассива Из МассивРасшифровок Цикл
			НайденныеСтроки = ТаблицаМатрицаПолномочий.НайтиСтроки(ЭлементМассива);
			Для Каждого Строка Из НайденныеСтроки Цикл
				МассивИзменяемыхСтрок.Добавить(Строка);
			КонецЦикла;
		КонецЦикла;
		
		ГрупповоеИзменениеЭлементов(МассивИзменяемыхСтрок);
		
	ИначеЕсли ТекТипКолонки <> Тип("СправочникСсылка.Организации") Тогда
		
		МассивИзменяемыхСтрок = Новый Массив;
		Для Каждого ЭлементМассива Из МассивРасшифровок Цикл
			НайденныеСтроки = ТаблицаМатрицаПолномочий.НайтиСтроки(Новый Структура("ВидОтчета", ЭлементМассива));
			Для Каждого Строка Из НайденныеСтроки Цикл
				МассивИзменяемыхСтрок.Добавить(Строка);
			КонецЦикла;
		КонецЦикла;
		
		ГрупповоеИзменениеЭлементов(МассивИзменяемыхСтрок);

	ИначеЕсли ТекТипКолонки = Тип("СправочникСсылка.Организации") Тогда
		
		МассивИзменяемыхСтрок = Новый Массив;
		Для Каждого ЭлементМассива Из МассивРасшифровок Цикл
			НайденныеСтроки = ТаблицаМатрицаПолномочий.НайтиСтроки(Новый Структура("Организация", ?(ЭлементМассива=ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"),"<БЕЗ ОРГАНИЗАЦИИ>",ЭлементМассива)));
			Для Каждого Строка Из НайденныеСтроки Цикл
				МассивИзменяемыхСтрок.Добавить(Строка);
			КонецЦикла;
		КонецЦикла;
		
		ГрупповоеИзменениеЭлементов(МассивИзменяемыхСтрок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьМассивРасшифровокЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВидОтчета		= ДополнительныеПараметры.ВидОтчета;
    ДокументБД 		= ДополнительныеПараметры.ДокументБД;
    НайденныеСтроки = ДополнительныеПараметры.НайденныеСтроки;
    Организация 	= ДополнительныеПараметры.Организация;
        
    СтруктураОтвета = Результат;
    Если СтруктураОтвета <> Неопределено Тогда
        
        ТекИсполняющий = ?(ЗначениеЗаполнено(СтруктураОтвета.Исполняющий), СтруктураОтвета.Исполняющий, СправочникПользователиПустоеЗначение);
        ТекИсполняющий_Организация = СтруктураОтвета.Исполняющий_Организация;
        
        ТекСогласование = ?(ЗначениеЗаполнено(СтруктураОтвета.Согласование), СтруктураОтвета.Согласование, СправочникПользователиПустоеЗначение);
        ТекСогласование_Организация = СтруктураОтвета.Согласование_Организация;
        
        Если ТекИсполняющий <> НайденныеСтроки[0].Исполняющий 
            ИЛИ ТекСогласование <> НайденныеСтроки[0].Согласование Тогда
            ОбновитьЗначенияВТаблицеПолномочий(Организация, ВидОтчета,ДокументБД, ТекИсполняющий, ТекСогласование, ТекИсполняющий_Организация, ТекСогласование_ОРганизация);
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолеНастройкиОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	МассивРасшифровок    = Новый Массив;
	МассивРасшифровок.Добавить(Расшифровка);
	ОбработатьМассивРасшифровок(МассивРасшифровок, ТипЗнч(Расшифровка));
	
КонецПроцедуры

&НаКлиенте
Процедура ГрупповоеИзменениеЭлементов(МассивИзменяемыхСтрок)
	
	Если МассивИзменяемыхСтрок.Количество() > 0 Тогда
		
		СтруктураОтвета = Неопределено;

		ПараметрыФормы = Новый Структура("ГрупповоеИзменение", Истина);
		ДопПараметры = Новый Структура("МассивИзменяемыхСтрок", МассивИзменяемыхСтрок);
		Оповещение = Новый ОписаниеОповещения("ГрупповоеИзменениеЭлементовЗавершение", ЭтотОбъект, ДопПараметры);
		ОткрытьФорму("Обработка.НастройкаМатрицыПолномочий.Форма.ФормаВыбора_Управляемая", 
						ПараметрыФормы, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрупповоеИзменениеЭлементовЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    МассивИзменяемыхСтрок = ДополнительныеПараметры.МассивИзменяемыхСтрок;
        
    СтруктураОтвета = Результат;
    
    Если СтруктураОтвета <> Неопределено Тогда
        Для Каждого Элемент Из МассивИзменяемыхСтрок Цикл
            
            Если СтруктураОтвета.ИспользоватьИсполняющий Тогда
                ТекИсполняющий = ?(ЗначениеЗаполнено(СтруктураОтвета.Исполняющий), СтруктураОтвета.Исполняющий, СправочникПользователиПустоеЗначение);
                ТекИсполняющий_Организация = СтруктураОтвета.Исполняющий_Организация;
            Иначе
                ТекИсполняющий = Неопределено;
                ТекИсполняющий_Организация = Неопределено;
            КонецЕсли;
            
            Если СтруктураОтвета.ИспользоватьСогласование Тогда
                ТекСогласование = ?(ЗначениеЗаполнено(СтруктураОтвета.Согласование), СтруктураОтвета.Согласование, СправочникПользователиПустоеЗначение);
                ТекСогласование_Организация = СтруктураОтвета.Согласование_Организация;
            Иначе
                ТекСогласование = Неопределено;
                ТекСогласование_Организация = Неопределено;
            КонецЕсли;
            
            
            ОбновитьЗначенияВТаблицеПолномочий(Элемент.Организация, Элемент.ВидОтчета,Элемент.ДокументБД
            , ТекИсполняющий
            , ТекСогласование
            , ТекИсполняющий_Организация
            , ТекСогласование_Организация);
            
        КонецЦикла;
    КонецЕсли;

КонецПроцедуры

Процедура ОбновитьЗначенияВТаблицеПолномочий(Организация, ВидОтчета,ДокументБД, Исполняющий = Неопределено, Согласование = Неопределено, Исполняющий_Организация, Согласование_Организация)
	
	Если Исполняющий = Неопределено
	   И Согласование = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерРяда    = ТаблицаРасположенияОрганизаций.НайтиСтроки(Новый Структура("Организация", Организация))[0].Ряд;
	НомерКолонки = ТаблицаРасположенияВидовОтчетов.НайтиСтроки(Новый Структура("ВидОтчета", ВидОтчета))[0].Колонка;
	
	ТекСтрокиМатрицы = ТаблицаМатрицаПолномочий.НайтиСтроки(Новый Структура("ВидОтчета, Организация", ВидОтчета, Организация));
	СтрокиИзменений = ТаблицаИзмененныхДанных.НайтиСтроки(Новый Структура("Организация, ВидОтчета", Организация, ВидОтчета));
	
	ТекОбласть = ПолеНастройки.Область(НомерРяда, НомерКолонки, НомерРяда, НомерКолонки);
	Если ТекОбласть.Текст="Х" Тогда
		 Возврат;
	КонецЕсли;
	
	Если СтрокиИзменений.Количество() = 0 Тогда
		ТекСтрокаИзменений = ТаблицаИзмененныхДанных.Добавить();
		ТекСтрокаИзменений.ВидОтчета    = ВидОтчета;
		ТекСтрокаИзменений.ДокументБД   = ДокументБД;
		ТекСтрокаИзменений.Организация  = Организация;
		ТекСтрокаИзменений.Исполняющий  = ТекСтрокиМатрицы[0].Исполняющий;
		ТекСтрокаИзменений.Исполняющий_Организация  = ТекСтрокиМатрицы[0].Исполняющий_Организация;
		ТекСтрокаИзменений.Согласование = ТекСтрокиМатрицы[0].Согласование;
		ТекСтрокаИзменений.Согласование_Организация = ТекСтрокиМатрицы[0].Согласование_Организация;
	Иначе
		ТекСтрокаИзменений = СтрокиИзменений[0];
	КонецЕсли;
	
	
	
	Если Исполняющий <> Неопределено Тогда
		ТекСтрокаИзменений.Исполняющий = Исполняющий;
		ТекСтрокаИзменений.Исполняющий_Организация = Исполняющий_Организация;
	КонецЕсли;
	
	Если Согласование <> Неопределено Тогда
		ТекСтрокаИзменений.Согласование = Согласование;
		ТекСтрокаИзменений.Согласование_Организация = Согласование_Организация;
	КонецЕсли;
	
	
	ТекОбласть.Текст = ТекСтрокаИзменений.Исполняющий;
	Если ТипЗнч(ТекСтрокаИзменений.Исполняющий) = Тип("СправочникСсылка.РолиКонтактныхЛиц") Тогда
		ТекОбласть.Текст = ТекОбласть.Текст + "/(" + ?(ЗначениеЗаполнено(ТекСтрокаИзменений.Исполняющий_Организация), ТекСтрокаИзменений.Исполняющий_Организация, "Текущая организация") + ")";
	КонецЕсли;
	ТекОбласть.Шрифт = Новый Шрифт(ТекОбласть.Шрифт, , , Истина);
	
	ТекОбласть = ПолеНастройки.Область(НомерРяда + 1, НомерКолонки, НомерРяда + 1, НомерКолонки);
	ТекОбласть.Текст = ТекСтрокаИзменений.Согласование;
	Если ТипЗнч(ТекСтрокаИзменений.Согласование) = Тип("СправочникСсылка.РолиКонтактныхЛиц") Тогда
		ТекОбласть.Текст = ТекОбласть.Текст + "/(" + ?(ЗначениеЗаполнено(ТекСтрокаИзменений.Согласование_Организация), ТекСтрокаИзменений.Согласование_Организация, "Текущая организация") + ")";
	КонецЕсли;
	ТекОбласть.Шрифт = Новый Шрифт(ТекОбласть.Шрифт, , , Истина);
	
КонецПроцедуры

&НаСервере
Процедура Применить()
	
	Если ЗначениеЗаполнено(ТаблицаИзмененныхДанных) Тогда
		
		ДокументБДпоУмолчанию=Справочники.ДокументыБД.НайтиПоНаименованию("НастраиваемыйОтчет");

		Для Каждого Строка Из ТаблицаИзмененныхДанных Цикл
			МенеджерЗаписи = РегистрыСведений.РегистрМатрицыПолномочий.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Активность = Истина;
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Строка);
            МенеджерЗаписи.ШаблонДокументаБД=Строка.ВидОтчета;
            МенеджерЗаписи.ДокументБД = ?(ЗначениеЗаполнено(Строка.ДокументБД),Строка.ДокументБД,ДокументБДпоУмолчанию);
			МенеджерЗаписи.ВерсияРегламентаПодготовкиОтчетности = Объект.ВерсияОрганизационнойСтруктуры;
			МенеджерЗаписи.Период    = Объект.ВерсияОрганизационнойСтруктуры.МеткаВремени;
			МенеджерЗаписи.Записать(Истина);
		КонецЦикла;
		ТаблицаИзмененныхДанных.Очистить();
	КонецЕсли;
	
	ОбновитьПолеНастройки();
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаПрименить(Команда)
	
	Применить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьRLS(Команда)
	
	ОбновитьПолеНастройки(, Истина);
	Если НЕ ЗначениеЗаполнено(ОшибочнаяТаблица) Тогда
		ПоказатьПредупреждение(, "Ошибок не обнаружено");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьПользователя(Команда)
	
	СтруктураОтвета = Неопределено;

	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработатьЗамену", ЭтотОбъект);
	ОткрытьФорму("Обработка.НастройкаМатрицыПолномочий.Форма.ФормаЗамена_Управляемая",,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьЗамену(Результат, ДополнительныеПараметры) Экспорт
    
    СтруктураОтвета = Результат;
    
    Если СтруктураОтвета <> Неопределено Тогда
        
        Если СтруктураОтвета.ЗаменятьИсполняющего Тогда
            ЗаменитьИсполнителя(СтруктураОтвета.ИсходныйПользователь, СтруктураОтвета.ЗаменяющийПользователь);
        КонецЕсли;
        
        Если СтруктураОтвета.ЗаменятьОтветственного Тогда
            ЗаменитьОтветственного(СтруктураОтвета.ИсходныйПользователь, СтруктураОтвета.ЗаменяющийПользователь);
			
			ДопПараметры = Новый Структура("СтруктураОтвета", СтруктураОтвета);
			Оповещение = Новый ОписаниеОповещения("Подключаемый_ПроверитьНаличиеОтветственного", ЭтотОбъект, ДопПараметры);
            ПоказатьВопрос(Оповещение, "Изменить состав утверждающих этапов маршрутов согласования?", РежимДиалогаВопрос.ДаНет);
            
        КонецЕсли;        
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьНаличиеОтветственного(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    СтруктураОтвета = ДополнительныеПараметры.СтруктураОтвета;
        
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ПроверитьНаличиеОтветственногоВМаршрутахСогласования(СтруктураОтвета.ИсходныйПользователь, СтруктураОтвета.ЗаменяющийПользователь);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьИсполнителя(Исходный, Заменяющий)
	
	МассивНайденныхСтрок = ТаблицаМатрицаПолномочий.НайтиСтроки(Новый Структура("Исполняющий", Исходный));
	Для Каждого Строка Из МассивНайденныхСтрок Цикл
		ОбновитьЗначенияВТаблицеПолномочий(Строка.Организация, Строка.ВидОтчета,Строка.ДокументБД, Заменяющий, Неопределено, Неопределено, Неопределено);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьОтветственного(Исходный, Заменяющий)
	
	МассивНайденныхСтрок = ТаблицаМатрицаПолномочий.НайтиСтроки(Новый Структура("Согласование", Исходный));
	Для Каждого Строка Из МассивНайденныхСтрок Цикл
		ОбновитьЗначенияВТаблицеПолномочий(Строка.Организация, Строка.ВидОтчета,Строка.ДокументБД, СправочникПользователиПустоеЗначение, Заменяющий, Неопределено, Неопределено);
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Процедура ПроверитьНаличиеОтветственногоВМаршрутахСогласования(Исходный, Заменяющий)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ Согласование ПОМЕСТИТЬ ТаблицаМаршрутов 
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|ГДЕ Согласование ССЫЛКА Справочник.МаршрутыСогласования
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапыСогласования.Ссылка
	|ИЗ
	|	ТаблицаМаршрутов КАК ТаблицаМаршрутов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыСогласования КАК ЭтапыСогласования
	|	ПО ТаблицаМаршрутов.Согласование = ЭтапыСогласования.Владелец
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|	Справочник.ЭтапыСогласования.Утверждающие КАК ЭтапыСогласованияУтверждающие
	|	ПО ЭтапыСогласованияУтверждающие.Ссылка = ЭтапыСогласования.Ссылка
	|ГДЕ
	|	ЭтапыСогласованияУтверждающие.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаМатрицаПолномочий.Выгрузить());
	Запрос.УстановитьПараметр("Пользователь"   , Исходный);
	
	Выборка = Запрос.ВыполнитьПакет()[1].Выбрать();
	

	Пока Выборка.Следующий() Цикл
		ТекОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ТекЗапись = ТекОбъект.Утверждающие.Найти(Исходный, "Пользователь");
		Если ТекЗапись <> Неопределено Тогда
			ТекЗапись.Пользователь = Заменяющий;
		КонецЕсли;
		
		Попытка
			ТекОбъект.Записать();
		Исключение
			ОбщегоНазначенияУХ.СообщитьОбОшибке("Не удалось записать этап справочника: " + Выборка.Ссылка);
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры


&НаКлиенте
Процедура ВидыОтчетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбновитьПолеНастройки();
	
КонецПроцедуры


&НаКлиенте
Процедура ОрганизационныеЕдиницыВыбор(Элемент, Инд_ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбраннаяСтрока = ОрганизационныеЕдиницы.НайтиПоИдентификатору(Инд_ВыбраннаяСтрока);
	СтандартнаяОбработка = Ложь;
	Если ВыбраннаяСтрока.Профиль = NULL Тогда
		ВыбранноеЗначениеОрганизации = Неопределено;
	ИначеЕсли ВыбраннаяСтрока.Профиль И ТипЗнч(ВыбраннаяСтрока.Значение) = Тип("СправочникСсылка.Организации") Тогда
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(1, "Наложить отбор по консолидирующей организации");
		СписокЗначений.Добавить(2, "Наложить отбор по периметру текущей организации");
		ТекЗначение = Неопределено;

		ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ОрганизационныеЕдиницыВыборЗавершение", ЭтотОбъект, Новый Структура("ВыбраннаяСтрока", ВыбраннаяСтрока)), СписокЗначений, Элемент);
        Возврат;
	ИначеЕсли ВыбраннаяСтрока.Профиль Тогда
		ВыбранноеЗначениеОрганизации = Новый Структура("Значение, Профиль", ВыбраннаяСтрока.Значение, ВыбраннаяСтрока.Профиль);
	Иначе
		ВыбранноеЗначениеОрганизации = ВыбраннаяСтрока.Значение;
	КонецЕсли;
	
	ОрганизационныеЕдиницыВыборФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизационныеЕдиницыВыборЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
    
    
    ТекЗначение = ВыбранныйЭлемент;
    Если ТекЗначение <> Неопределено Тогда
        
        Если ТекЗначение.Значение = 1 Тогда
            ВыбранноеЗначениеОрганизации = ВыбраннаяСтрока.Значение;
        Иначе
            ВыбранноеЗначениеОрганизации = Новый Структура("Значение, Профиль", ВыбраннаяСтрока.Значение, ВыбраннаяСтрока.Профиль);
        КонецЕсли;
        
    КонецЕсли;
    
    ОрганизационныеЕдиницыВыборФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ОрганизационныеЕдиницыВыборФрагмент()
    
    ОбновитьПолеНастройки();

КонецПроцедуры


&НаКлиенте
Процедура ЭтапыПроцессаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбновитьПолеНастройки();
	
КонецПроцедуры


&НаКлиенте
Процедура АвтоматическоеИзменениеRLS(Команда)
	
	Если НЕ ЗначениеЗаполнено(ОшибочнаяТаблица) Тогда
		ПоказатьПредупреждение(, "Исправления не требуются.");
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("АвтоматическоеИзменениеRLSЗавершение", ЭтотОбъект), "Вы действительно хотите изменить права доступа?", РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура АвтоматическоеИзменениеRLSЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ИзменитьRLS();

КонецПроцедуры

&НаСервере
Процедура ИзменитьRLS()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнешнийИсточник.ВидОтчета,
	|	ВнешнийИсточник.Организация,
	|	ВнешнийИсточник.Пользователь,
	|	ВнешнийИсточник.Исполняющий
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ВнешнийИсточник КАК ВнешнийИсточник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.ВидОтчета,
	|	ВТ.Организация,
	|	ВТ.Пользователь,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВТ.Исполняющий = ИСТИНА
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Согласование
	|ИЗ
	|	ВТ КАК ВТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.ВидОтчета,
	|	ВТ.Организация,
	|	ВТ.Пользователь";
	
	Запрос.Параметры.Вставить("ВнешнийИсточник", РеквизитФормыВЗначение("ОшибочнаяТаблица"));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.НастройкиПравДоступаПользователейВидыОтчетов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ВидОтчета   = Выборка.ВидОтчета;
		МенеджерЗаписи.Организация = Выборка.Организация;
		МенеджерЗаписи.Пользователь = Выборка.Пользователь;
		МенеджерЗаписи.ВидДоступа  = ?(Выборка.Согласование = 0, Перечисления.ВидыДоступа.ЧтениеЗапись, Перечисления.ВидыДоступа.ЧтениеЗаписьУтверждение);
		МенеджерЗаписи.Записать(Истина);
		
	КонецЦикла;
	
	ОбновитьПолеНастройки(, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОсновномуКонтактномуЛицуИсполнителя(Команда)
	ЗаполнитьПоОсновномуКонтактномуЛицу(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОсновномуКонтактномуЛицуОтветственного(Команда)
	ЗаполнитьПоОсновномуКонтактномуЛицу();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОсновномуКонтактномуЛицу(Ответственного=Истина)
	
	Для Каждого СтрокаПолномочия Из ТаблицаМатрицаПолномочий Цикл
		
		Если СтрокаПолномочия.Организация = "<БЕЗ ОРГАНИЗАЦИИ>" Тогда
			 Продолжить;
		КонецЕсли;
		
		Пользователь = СтрокаПолномочия.Организация.ОсновноеКонтактноеЛицо.СвязанныйПользователь;
		
		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Ответственного Тогда
			Исполняющий = Неопределено;
			Согласование = Пользователь;
		Иначе
			Исполняющий = Пользователь;
			Согласование = Неопределено;
		КонецЕсли;
		
		ОбновитьЗначенияВТаблицеПолномочий(
						СтрокаПолномочия.Организация, 
						СтрокаПолномочия.ВидОтчета, 
						СтрокаПолномочия.ДокументБД, 
						Исполняющий, 
						Согласование, 
						Неопределено, 
						Неопределено
					);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтборы(Команда)
	
	Элементы.ФормаПоказатьОтборы.Пометка = НЕ Элементы.ФормаПоказатьОтборы.Пометка;
	Элементы.ГруппаВыбора.Видимость = Элементы.ФормаПоказатьОтборы.Пометка;

КонецПроцедуры
