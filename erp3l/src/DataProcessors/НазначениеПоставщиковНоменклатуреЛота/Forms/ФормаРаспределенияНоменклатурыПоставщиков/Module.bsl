
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	НастроитьФормуКроссТаблицы();
	Элементы.ПотребностиПоПоставщикам.Обновить();
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуКроссТаблицы()
	
	ТаблицаПобедителей = ПолучитьИзВременногоХранилища(Параметры.АдресРезультата);
	Объект.РаспределениеПоПотребностям.Загрузить(ТаблицаПобедителей);       
	Победители = ТаблицаПобедителей.Скопировать();
	ЦенаВключаетНДС = Параметры.Лот.ЦенаВключаетНДС;
	КолСтрок = Победители.Количество()-1;
	Пока КолСтрок >= 0 Цикл
		Если Победители[КолСтрок].Сумма = 0 Тогда
			Победители.Удалить(КолСтрок);
		КонецЕсли;	
		КолСтрок = КолСтрок-1;
	КонецЦикла;
	
	КоличествоНоменклатуры = Победители.НайтиСтроки(Новый Структура ("ПредложениеПоставщика",Победители[0].ПредложениеПоставщика));
	КоличествоПоЛоту = 0;
	Лот = Параметры.Лот;
	Для Каждого Ст Из КоличествоНоменклатуры Цикл
		КоличествоПоЛоту = КоличествоПоЛоту + Ст.КоличествоПоЛоту;
	КонецЦикла;	
	ЭтоНоменклатура = ТипЗнч(Параметры.Номенклатура) = Тип("СправочникСсылка.Номенклатура");
	Если ЭтоНоменклатура Тогда
		Победители.Свернуть("ПредложениеПоставщика,Номенклатура,МестоПоставки,Поставщик,Характеристика,Организация,Менеджер,Цена,СтавкаНДС","Количество,Сумма,СуммаНДС,СуммаСНДС");
	Иначе
		Победители.Свернуть("ПредложениеПоставщика,Номенклатура,МестоПоставки,Характеристика,Поставщик,Организация,Менеджер,СтавкаНДС","Количество,Сумма,СуммаНДС,СуммаСНДС");
	КонецЕсли;	
	
	Периоды = ТаблицаПобедителей.Скопировать();
	КолСтрок = Периоды.Количество()-1;
	
	Пока КолСтрок >= 0 Цикл
		Если Периоды[КолСтрок].Сумма = 0 Тогда
			Периоды.Удалить(КолСтрок);
		КонецЕсли;	
		КолСтрок = КолСтрок-1;
	КонецЦикла;	
	
	Периоды.Свернуть("ПериодПотребности");
	Периоды.Колонки.Добавить("КолонкаКоличество");
	Периоды.Колонки.Добавить("КолонкаСумма");
	Периоды.Колонки.Добавить("КолонкаСуммаНДС");
	Периоды.Колонки.Добавить("КолонкаСуммаСНДС");
	Периоды.Колонки.Добавить("КолонкаКоличествоИзначальное");
	Периоды.Колонки.Добавить("КолонкаПериод");
	Периоды.Колонки.Добавить("КолонкаКоличествоПоПредложению");
	
	Периоды.Колонки.Добавить("КолонкаСуммаИзначальное");
	ИтераторПериода = 0;
	
	ФорматК = Новый КвалификаторыЧисла(15,3);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповК = Новый ОписаниеТипов(Массив, , ,ФорматК);
	
	ФорматЧ = Новый КвалификаторыЧисла(12,2);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , ,ФорматЧ);
	
	ФорматСтроки = Новый КвалификаторыСтроки();
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповСтроки = Новый ОписаниеТипов(Массив, , ,ФорматСтроки);
	
	ИндексМакс = 0;
	Если НЕ ЭтоНоменклатура Тогда
		Элементы.ИнформацияПоЛотуРазница.Формат = "ЧДЦ=2";
		Элементы.ИнформацияПоЛотуРазница.ФорматРедактирования = "ЧДЦ=2";
	КонецЕсли;
	Для Каждого Период из Периоды Цикл
		
		нРеквизиты = Новый Массив;
		нРеквизиты.Добавить(Новый РеквизитФормы("Период_"+Строка(ИтераторПериода), Новый ОписаниеТипов("СправочникСсылка.Периоды"), "ПотребностиПоПоставщикам", Период.ПериодПотребности, Истина));
		ИзменитьРеквизиты(нРеквизиты);		
		
		нРеквизиты = Новый Массив;
		нРеквизиты.Добавить(Новый РеквизитФормы("Период_"+Строка(ИтераторПериода), Новый ОписаниеТипов("СправочникСсылка.Периоды"), "ИнформацияПоЛоту", Период.ПериодПотребности, Истина));
		ИзменитьРеквизиты(нРеквизиты);			
		
		нРеквизиты = Новый Массив;
		нРеквизиты.Добавить(Новый РеквизитФормы("Разница_"+Строка(ИтераторПериода), ?(ЭтоНоменклатура,ОписаниеТиповК,ОписаниеТиповС), "ИнформацияПоЛоту", Период.ПериодПотребности, Истина));
		ИзменитьРеквизиты(нРеквизиты);	
		
		Период.КолонкаКоличество = "Количество_"+Строка(ИтераторПериода);
		Период.КолонкаКоличествоПоПредложению = "КоличествоПоПредложению_"+Строка(ИтераторПериода);
		Период.КолонкаСумма = "Сумма_" + Строка(ИтераторПериода);
		Период.КолонкаСуммаИзначальное = "СуммаИзначальное_"+Строка(ИтераторПериода);
		
		Период.КолонкаСуммаНДС = "СуммаНДС_"+Строка(ИтераторПериода);
		Период.КолонкаСуммаСНДС = "СуммаСНДС_"+Строка(ИтераторПериода);
		Период.КолонкаКоличествоИзначальное = "КоличествоИзначальное_"+Строка(ИтераторПериода);
		Период.КолонкаПериод = "Период_"+Строка(ИтераторПериода);
		
		НовыйЭлементГруппа = Элементы.Добавить("ГруппаПериод"+Строка(ИтераторПериода),Тип("ГруппаФормы"),Элементы.ПотребностиПоПоставщикам);
		НовыйЭлементГруппа.Вид = ВидГруппыФормы.ГруппаКолонок;
		НовыйЭлементГруппа.Заголовок = Период.ПериодПотребности;
		НовыйЭлементГруппа.Видимость = Истина;
		НовыйЭлементГруппа.ОтображатьВШапке = Истина;
		НовыйЭлементГруппа.РастягиватьПоГоризонтали = Ложь;
		НовыйЭлементГруппа.Ширина = 15;
		
		НовыйЭлементГруппа = Элементы.Добавить("ГруппаПериодИнформацияПоЛоту"+Строка(ИтераторПериода),Тип("ГруппаФормы"),Элементы.ИнформацияПоЛоту);
		НовыйЭлементГруппа.Вид = ВидГруппыФормы.ГруппаКолонок;
		НовыйЭлементГруппа.Заголовок = Период.ПериодПотребности;
		НовыйЭлементГруппа.Видимость = Истина;
		НовыйЭлементГруппа.ОтображатьВШапке = Истина;
		НовыйЭлементГруппа.Группировка = ГруппировкаКолонок.Вертикальная;
		НовыйЭлементГруппа.РастягиватьПоГоризонтали = Ложь;
		НовыйЭлементГруппа.Ширина = 15;
		Если ЭтоНоменклатура Тогда
			СоздатьРеквизитыКолонкиКоличества(ИтераторПериода,ОписаниеТиповК,Период);
		КонецЕсли;
		СоздатьРеквизитыКолонкиСумма(ИтераторПериода,ОписаниеТиповС,Период,ЭтоНоменклатура);
		
		НовыйЭлементПоЛоту = Элементы.Добавить("Разница_"+Строка(ИтераторПериода),Тип("ПолеФормы"),Элементы["ГруппаПериодИнформацияПоЛоту"+Строка(ИтераторПериода)]);
		НовыйЭлементПоЛоту.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлементПоЛоту.Заголовок = "Не распределено";
		НовыйЭлементПоЛоту.ПутьКДанным = "ИнформацияПоЛоту.Разница_"+Строка(ИтераторПериода);
		НовыйЭлементПоЛоту.Доступность = Ложь;
		НовыйЭлементПоЛоту.ЦветТекста = WebЦвета.Красный;
		
		ИтераторПериода = ИтераторПериода+1;
	КонецЦикла;
	
	СоздатьКолонкуТерминатор();
	
	Для Каждого СтрокаПобедителей Из Победители Цикл
		ДобСтрока = ПотребностиПоПоставщикам.Добавить();
		ЗаполнитьЗначенияСвойств(ДобСтрока,СтрокаПобедителей);
		Для Каждого Период Из Периоды Цикл
			Строки = ТаблицаПобедителей.НайтиСтроки(Новый Структура("ПредложениеПоставщика,ПериодПотребности",СтрокаПобедителей.ПредложениеПоставщика,Период.ПериодПотребности));
			Если Строки.Количество()>0 Тогда
				Номенклатура = Строки[0].Номенклатура;
				Если ЭтоНоменклатура Тогда
					ДобСтрока[Период.КолонкаКоличество] = Строки[0].Количество;
					ДобСтрока[Период.КолонкаКоличествоИзначальное] = Строки[0].КоличествоПоЛоту;
					ДобСтрока[Период.КолонкаКоличествоПоПредложению] = Строки[0].Количество;
				КонецЕсли;
				ДобСтрока[Период.КолонкаСумма] = Строки[0].Сумма;
				ДобСтрока[Период.КолонкаСуммаНДС] = Строки[0].СуммаНДС;
				ДобСтрока[Период.КолонкаСуммаСНДС] = Строки[0].СуммаСНДС;
				ДобСтрока[Период.КолонкаПериод] = Строки[0].ПериодПотребности;
				ДобСтрока[Период.КолонкаСуммаИзначальное] = Строки[0].Сумма;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	Элементы.ПотребностиПоПоставщикамЦена.Видимость = ЭтоНоменклатура;
	Элементы.ПотребностиПоПоставщикамКоличество.Видимость = ЭтоНоменклатура;
	
	Элементы.ИнформацияПоЛотуКоличествоТребуется.Видимость =  ЭтоНоменклатура;
	Элементы.ИнформацияПоЛотуКоличество.Видимость =  ЭтоНоменклатура;
	Элементы.ИнформацияПоЛотуСуммаТребуется.Видимость =  НЕ ЭтоНоменклатура;
	Элементы.ИнформацияПоЛотуСумма.Видимость =  НЕ ЭтоНоменклатура;
	
	Элементы.ПоказыватьСуммы.Видимость = ЭтоНоменклатура;
	Элементы.ПотребностиПоПоставщикамСумма.Видимость = Не ЭтоНоменклатура;

	Если ЭтоНоменклатура Тогда
		УстановкаОформленияДляКоличества();
	Иначе
		УстановкаОформленияДляСуммы();
	КонецЕсли; 
	РассчитатьФормуЛота();
КонецПроцедуры	

&НаСервере
Процедура УстановкаОформленияДляСуммы()
	Период = 0;
	Пока Период < ИтераторПериода Цикл
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["ГруппаПериод"+Период].ПодчиненныеЭлементы["Сумма_"+Период].Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы["ГруппаПериод"+Период].ПодчиненныеЭлементы["Сумма_"+Период].ПутьКДанным);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 0;	
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона",WebЦвета.СеребристоСерый);
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
		Период = Период+1;	
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура УстановкаОформленияДляКоличества()
	Период = 0;
	Пока Период < ИтераторПериода Цикл
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["ГруппаПериод"+Период].ПодчиненныеЭлементы["Количество_"+Период].Имя);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы["КоличествоПоПредложению_"+Период].ПутьКДанным);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 0;	
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона",WebЦвета.СеребристоСерый);
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["Разница_"+Период].Имя);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы["Разница_"+Период].ПутьКДанным);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
		ОтборЭлемента.ПравоеЗначение = 0;	
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",WebЦвета.Красный);
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
		
		Период = Период+1;	
	КонецЦикла;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["ИнформацияПоЛотуРазница"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы["ИнформацияПоЛотуРазница"].ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",WebЦвета.Красный);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыКолонкиСумма(ИтераторПериода,ОписаниеТиповС,Период,ЭтоНоменклатура)
	
	нРеквизиты = Новый Массив;
	нРеквизиты.Добавить(Новый РеквизитФормы("Сумма_"+Строка(ИтераторПериода), ОписаниеТиповС, "ИнформацияПоЛоту", Период.ПериодПотребности, Истина));
	ИзменитьРеквизиты(нРеквизиты);		
	
	нРеквизиты = Новый Массив;
	нРеквизиты.Добавить(Новый РеквизитФормы("СуммаИзначальное_"+Строка(ИтераторПериода), ОписаниеТиповС, "ИнформацияПоЛоту", Период.ПериодПотребности, Истина));
	ИзменитьРеквизиты(нРеквизиты);		
	
	нРеквизиты = Новый Массив;
	нРеквизиты.Добавить(Новый РеквизитФормы("Сумма_"+Строка(ИтераторПериода), ОписаниеТиповС, "ПотребностиПоПоставщикам", Период.ПериодПотребности, Истина));
	ИзменитьРеквизиты(нРеквизиты);		
	
	нРеквизиты = Новый Массив;
	нРеквизиты.Добавить(Новый РеквизитФормы("СуммаИзначальное_"+Строка(ИтераторПериода), ОписаниеТиповС, "ПотребностиПоПоставщикам", Период.ПериодПотребности, Истина));
	ИзменитьРеквизиты(нРеквизиты);			
	
	нРеквизиты = Новый Массив;
	нРеквизиты.Добавить(Новый РеквизитФормы("СуммаНДС_"+Строка(ИтераторПериода), ОписаниеТиповС, "ПотребностиПоПоставщикам", Период.ПериодПотребности, Истина));
	ИзменитьРеквизиты(нРеквизиты);		
	
	нРеквизиты = Новый Массив;
	нРеквизиты.Добавить(Новый РеквизитФормы("СуммаСНДС_"+Строка(ИтераторПериода), ОписаниеТиповС, "ПотребностиПоПоставщикам", Период.ПериодПотребности, Истина));
	ИзменитьРеквизиты(нРеквизиты);
	
	НовыйЭлемент = Элементы.Добавить("Сумма_"+Строка(ИтераторПериода),Тип("ПолеФормы"),Элементы["ГруппаПериод"+Строка(ИтераторПериода)]);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.Заголовок = "Сумма";
	НовыйЭлемент.Доступность = Не ЭтоНоменклатура;
	НовыйЭлемент.ТолькоПросмотр = ЭтоНоменклатура;
	Если Не ЭтоНоменклатура Тогда
		НовыйЭлемент.ЦветТекста = WebЦвета.ЗеленыйЛес;
	Иначе
		НовыйЭлемент.Видимость = Ложь;
	КонецЕсли;
	НовыйЭлемент.ПутьКДанным = "ПотребностиПоПоставщикам.Сумма_"+Строка(ИтераторПериода);	
	НовыйЭлемент.УстановитьДействие("ПриИзменении","ОбработчикИзмененияСуммы");
	
	НовыйЭлементПоЛоту = Элементы.Добавить("СуммаИзначальное_"+Строка(ИтераторПериода),Тип("ПолеФормы"),Элементы["ГруппаПериодИнформацияПоЛоту"+Строка(ИтераторПериода)]);
	НовыйЭлементПоЛоту.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементПоЛоту.Заголовок = "Требуется (Σ)";
	НовыйЭлементПоЛоту.ПутьКДанным = "ИнформацияПоЛоту.СуммаИзначальное_"+Строка(ИтераторПериода);
	НовыйЭлементПоЛоту.Доступность = Ложь;
	НовыйЭлементПоЛоту.Видимость = НЕ ЭтоНоменклатура;
	НовыйЭлементПоЛоту.ТолькоПросмотр = Истина;
	
	НовыйЭлементПоЛоту = Элементы.Добавить("СуммаПоЛоту_"+Строка(ИтераторПериода),Тип("ПолеФормы"),Элементы["ГруппаПериодИнформацияПоЛоту"+Строка(ИтераторПериода)]);
	НовыйЭлементПоЛоту.Вид=ВидПоляФормы.ПолеВвода;
	НовыйЭлементПоЛоту.Заголовок = "Распределено (Σ)";
	НовыйЭлементПоЛоту.ПутьКДанным = "ИнформацияПоЛоту.Сумма_"+Строка(ИтераторПериода);
	НовыйЭлементПоЛоту.Видимость = Ложь;
	НовыйЭлементПоЛоту.Доступность = Ложь;
	НовыйЭлементПоЛоту.Видимость = НЕ ЭтоНоменклатура;
	НовыйЭлементПоЛоту.ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыКолонкиКоличества(ИтераторПериода,ОписаниеТиповК,Период)
	
	нРеквизиты = Новый Массив;
	нРеквизиты.Добавить(Новый РеквизитФормы("Количество_"+Строка(ИтераторПериода), ОписаниеТиповК, "ПотребностиПоПоставщикам", Период.ПериодПотребности, Истина));
	ИзменитьРеквизиты(нРеквизиты);		
	
	нРеквизиты = Новый Массив;
	нРеквизиты.Добавить(Новый РеквизитФормы("Количество_"+Строка(ИтераторПериода), ОписаниеТиповК, "ИнформацияПоЛоту", Период.ПериодПотребности, Истина));
	ИзменитьРеквизиты(нРеквизиты);	
	
	нРеквизиты = Новый Массив;
	нРеквизиты.Добавить(Новый РеквизитФормы("КоличествоИзначальное_"+Строка(ИтераторПериода), ОписаниеТиповК, "ПотребностиПоПоставщикам", Период.ПериодПотребности, Истина));
	ИзменитьРеквизиты(нРеквизиты);		
	
	нРеквизиты = Новый Массив;
	нРеквизиты.Добавить(Новый РеквизитФормы("КоличествоПоПредложению_"+Строка(ИтераторПериода), ОписаниеТиповК, "ПотребностиПоПоставщикам", Период.ПериодПотребности, Истина));
	ИзменитьРеквизиты(нРеквизиты);		
	
	нРеквизиты = Новый Массив;
	нРеквизиты.Добавить(Новый РеквизитФормы("КоличествоИзначальное_"+Строка(ИтераторПериода), ОписаниеТиповК, "ИнформацияПоЛоту", Период.ПериодПотребности, Истина));
	ИзменитьРеквизиты(нРеквизиты);			
	
	НовыйЭлемент = Элементы.Добавить("КоличествоПоПредложению_"+Строка(ИтераторПериода),Тип("ПолеФормы"),Элементы["ГруппаПериод"+Строка(ИтераторПериода)]);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.Заголовок = "Количество";
	НовыйЭлемент.ПутьКДанным = "ПотребностиПоПоставщикам.КоличествоПоПредложению_"+Строка(ИтераторПериода);
	НовыйЭлемент.УстановитьДействие("ПриИзменении","ОбработчикИзмененияКоличества");
	НовыйЭлемент.ЦветТекста = WebЦвета.ЗеленыйЛес;
	НовыйЭлемент.Видимость=Ложь;
	
	НовыйЭлемент = Элементы.Добавить("Количество_"+Строка(ИтераторПериода),Тип("ПолеФормы"),Элементы["ГруппаПериод"+Строка(ИтераторПериода)]);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.Заголовок = "Количество";
	НовыйЭлемент.ПутьКДанным = "ПотребностиПоПоставщикам.Количество_"+Строка(ИтераторПериода);
	НовыйЭлемент.УстановитьДействие("ПриИзменении","ОбработчикИзмененияКоличества");
	НовыйЭлемент.ЦветТекста = WebЦвета.ЗеленыйЛес;
	НовыйЭлемент.МинимальноеЗначение = 0;
	
	НовыйЭлементПоЛоту = Элементы.Добавить("КоличествоИзначальное_"+Строка(ИтераторПериода),Тип("ПолеФормы"),Элементы["ГруппаПериодИнформацияПоЛоту"+Строка(ИтераторПериода)]);
	НовыйЭлементПоЛоту.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементПоЛоту.Заголовок = "Количество требуется";
	НовыйЭлементПоЛоту.ПутьКДанным = "ИнформацияПоЛоту.КоличествоИзначальное_"+Строка(ИтераторПериода);
	НовыйЭлементПоЛоту.Доступность = Ложь;
	
	НовыйЭлементПоЛоту = Элементы.Добавить("КоличествоПоЛоту_"+Строка(ИтераторПериода),Тип("ПолеФормы"),Элементы["ГруппаПериодИнформацияПоЛоту"+Строка(ИтераторПериода)]);
	НовыйЭлементПоЛоту.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементПоЛоту.Заголовок = "Количество выбранное";
	НовыйЭлементПоЛоту.ПутьКДанным = "ИнформацияПоЛоту.Количество_"+Строка(ИтераторПериода);
	НовыйЭлементПоЛоту.Доступность = Ложь;
	
КонецПроцедуры	

&НаСервере 
Процедура СоздатьКолонкуТерминатор()
	
	нРеквизиты = Новый Массив;
	нРеквизиты.Добавить(Новый РеквизитФормы("КолонкаТерминатор", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(1), "ПотребностиПоПоставщикам", ""));
	ИзменитьРеквизиты(нРеквизиты);			
	
	Элемент = Элементы.Добавить("КолоннаТерминатор", Тип("ПолеФормы"), Элементы.ПотребностиПоПоставщикам);
	Элемент.Вид = ВидПоляФормы.ПолеНадписи;
	Элемент.ПутьКДанным = "ПотребностиПоПоставщикам.КолонкаТерминатор";
	Элемент.Ширина = 1;
	Элемент.Заголовок = "";
	Элемент.ОтображатьВШапке = Ложь;
	Элемент.ОтображатьВПодвале = Ложь;
	Элемент.ТолькоПросмотр = Истина;
	Элемент.РастягиватьПоГоризонтали = Ложь;
	Элемент.ПропускатьПриВводе = Истина;
	Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	
	
	нРеквизиты = Новый Массив;
	нРеквизиты.Добавить(Новый РеквизитФормы("КолонкаТерминатор", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(1), "ИнформацияПоЛоту", ""));
	ИзменитьРеквизиты(нРеквизиты);			
	
	Элемент = Элементы.Добавить("КолоннаТерминаторЛота", Тип("ПолеФормы"), Элементы.ИнформацияПоЛоту);
	Элемент.Вид = ВидПоляФормы.ПолеНадписи;
	Элемент.ПутьКДанным = "ИнформацияПоЛоту.КолонкаТерминатор";
	Элемент.Ширина = 1;
	Элемент.Заголовок = "";
	Элемент.ОтображатьВШапке = Ложь;
	Элемент.ОтображатьВПодвале = Ложь;
	Элемент.ТолькоПросмотр = Истина;
	Элемент.РастягиватьПоГоризонтали = Ложь;
	Элемент.ПропускатьПриВводе = Истина;
	Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	
КонецПроцедуры	

&НаСервере
Процедура РассчитатьФормуЛота()
	ИнформацияПоЛоту.Очистить();
	ДобИнформация = ИнформацияПоЛоту.Добавить();
	ДобИнформация.Номенклатура = Номенклатура;
	ДобИнформация.Количество = КоличествоПоЛоту;
	Сч = 0;
	СтрокиСворачивания = "";
	ЭтоНоменклатура = ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура");
	КоличествоВыбранное = 0;
	КоличествоИзначальное = 0;
	СуммаВыбранное = 0;
	Разница = 0;
	СуммаИзначальное = 0;
	Структура = Новый Структура();
	Для Каждого СтрПБ ИЗ Объект.РаспределениеПоПотребностям Цикл
		Структура.Вставить("Номенклатура",СтрПБ.Номенклатура);
		Структура.Вставить("ЕдиницаИзмерения",СтрПБ.ЕдиницаИзмерения);
		Структура.Вставить("Менеджер",СтрПБ.Менеджер);
		Структура.Вставить("МестоПоставки",СтрПБ.МестоПоставки);
		Структура.Вставить("Приоритет",СтрПБ.Приоритет);
		Структура.Вставить("Проект",СтрПБ.Проект);
		Структура.Вставить("Организация",СтрПБ.Организация);
	КонецЦикла;	
	Пока Сч < ИтераторПериода Цикл
		Структура.Вставить("ПериодПотребности",ПотребностиПоПоставщикам[0]["Период_"+Сч]);
		СтрокаЛотов = Лот.Номенклатура.НайтиСтроки(Структура);

		Если ЭтоНоменклатура Тогда 
			ДобИнформация["КоличествоИзначальное_"+Строка(Сч)] = СтрокаЛотов[0].Количество;
			ДобИнформация["Количество_"+Строка(Сч)] = ПотребностиПоПоставщикам.Итог("Количество_"+Строка(Сч));
			ДобИнформация["Разница_"+Строка(Сч)] = ДобИнформация["Количество_"+Строка(Сч)]-ДобИнформация["КоличествоИзначальное_"+Строка(Сч)];
			КоличествоВыбранное = ПотребностиПоПоставщикам.Итог("Количество_"+Строка(Сч))+КоличествоВыбранное;	
			КоличествоИзначальное = ДобИнформация["КоличествоИзначальное_"+Строка(Сч)]+КоличествоИзначальное;	
			Разница = ДобИнформация["Разница_"+Строка(Сч)]+Разница;
		Иначе
			ДобИнформация["СуммаИзначальное_"+Строка(Сч)] = СтрокаЛотов[0].Сумма;
			ДобИнформация["Сумма_"+Строка(Сч)] = ПотребностиПоПоставщикам.Итог("Сумма_"+Строка(Сч));
			ДобИнформация["Разница_"+Строка(Сч)] = ДобИнформация["Сумма_"+Строка(Сч)]-ДобИнформация["СуммаИзначальное_"+Строка(Сч)];
			СуммаВыбранное = ПотребностиПоПоставщикам.Итог("Сумма_"+Строка(Сч))+СуммаВыбранное;
			СуммаИзначальное =  ДобИнформация["СуммаИзначальное_"+Строка(Сч)]+СуммаИзначальное;
		КонецЕсли;
		Сч = Сч+1;		
	КонецЦикла;
	Если ЭтоНоменклатура Тогда 
		ДобИнформация.Количество = КоличествоВыбранное;
		ДобИнформация.КоличествоТребуется = КоличествоИзначальное;
		ДобИнформация.Разница = ДобИнформация.Количество-ДобИнформация.КоличествоТребуется;
	Иначе
		ДобИнформация.Сумма = СуммаВыбранное;
		ДобИнформация.СуммаТребуется = СуммаИзначальное;
		ДобИнформация.Разница = СуммаВыбранное - СуммаИзначальное;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура РасчетКоличества()
	СтрокаАктивации = Элементы.ПотребностиПоПоставщикам.ТекущиеДанные;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикИзмененияКоличества(Элемент)
	СтрокаАктивации = Элементы.ПотребностиПоПоставщикам.ТекущиеДанные;
	Индекс = ПолучитьИндекс(Элемент.Имя);
	Количество = СтрокаАктивации[Элемент.Имя];
	Сумма = Количество*СтрокаАктивации.Цена;
	СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Сумма,ЦенаВключаетНДС,ПолучитьСтавкуЧисло(СтрокаАктивации.СтавкаНДС));
	СуммаСНДС = ?(ЦенаВключаетНДС,Сумма+СуммаНДС,Сумма);
	СтрокаАктивации["Сумма_"+Индекс] = Сумма;
	СтрокаАктивации["СуммаСНДС_"+Индекс] = СуммаСНДС;
	СтрокаАктивации["СуммаНДС_"+Индекс] = СуммаНДС;
	СтрокаАктивации.СуммаНДС = 0;
	СтрокаАктивации.СуммаСНДС = 0;
	СтрокаАктивации.Сумма = 0;
	СтрокаАктивации.Количество = 0;
	Итератор = 0;
	Пока Итератор < ИтераторПериода Цикл
		СтрокаАктивации.Количество = СтрокаАктивации.Количество+СтрокаАктивации["Количество_"+Строка(Итератор)];
		СтрокаАктивации.Сумма = СтрокаАктивации.Сумма+СтрокаАктивации["Сумма_"+Строка(Итератор)];
		СтрокаАктивации.СуммаСНДС = СтрокаАктивации.СуммаСНДС+СтрокаАктивации["СуммаСНДС_"+Строка(Итератор)];
		СтрокаАктивации.СуммаНДС = СтрокаАктивации.СуммаНДС+СтрокаАктивации["СуммаНДС_"+Строка(Итератор)];
		Итератор = Итератор+1;
	КонецЦикла;	
	РассчитатьФормуЛота();	
КонецПроцедуры	

&НаСервере
Функция ПолучитьСтавкуЧисло(СтавкаНДС)
	Возврат ВстраиваниеУХВызовСервера.ПолучитьСтавкуНДС(СтавкаНДС).Ставка
КонецФункции	
	
&НаКлиенте
Процедура ОбработчикИзмененияСуммы(Элемент)
	СтрокаАктивации = Элементы.ПотребностиПоПоставщикам.ТекущиеДанные;
	Индекс = ПолучитьИндекс(Элемент.Имя);
	Сумма = СтрокаАктивации["Сумма_"+Индекс];
	СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Сумма,ЦенаВключаетНДС,ПолучитьСтавкуЧисло(СтрокаАктивации.СтавкаНДС));
	СуммаСНДС = Сумма+СуммаНДС;
	СтрокаАктивации["Сумма_"+Индекс] = Сумма;
	СтрокаАктивации["СуммаСНДС_"+Индекс] = СуммаСНДС;
	СтрокаАктивации["СуммаНДС_"+Индекс] = СуммаНДС;
	СтрокаАктивации.СуммаНДС = 0;
	СтрокаАктивации.СуммаСНДС = 0;
	СтрокаАктивации.Сумма = 0;
	Итератор = 0;
	Пока Итератор < ИтераторПериода Цикл
		СтрокаАктивации.Сумма = СтрокаАктивации.Сумма+СтрокаАктивации["Сумма_"+Строка(Итератор)];
		СтрокаАктивации.СуммаСНДС = СтрокаАктивации.СуммаСНДС+СтрокаАктивации["СуммаСНДС_"+Строка(Итератор)];
		СтрокаАктивации.СуммаНДС = СтрокаАктивации.СуммаНДС+СтрокаАктивации["СуммаНДС_"+Строка(Итератор)];
		Итератор = Итератор+1;
	КонецЦикла;	
	
	РассчитатьФормуЛота();	
КонецПроцедуры	

&НаКлиенте
Функция ПолучитьИндекс(Имя)
	Индекс = Прав(Имя,Стрдлина(Имя)-СтрНайти(Имя,"_"));
	Возврат Индекс;
КонецФункции	

&НаСервере
Функция ПоместитьРезультатыРаботыВоВременноеХранилище()
	
	Для Каждого Строки Из ПотребностиПоПоставщикам Цикл
		Итератор = 0;
		Пока Итератор < ИтераторПериода Цикл
			Для Каждого СтрокиПобедителя Из Объект.РаспределениеПоПотребностям Цикл
				Если СтрокиПобедителя.ПредложениеПоставщика = Строки.ПредложениеПоставщика		
					И СтрокиПобедителя.ПериодПотребности=Строки["Период_"+Строка(Итератор)] Тогда
					СтрокиПобедителя.Количество = ?(ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура"),Строки["Количество_"+Итератор],0);
					СтрокиПобедителя.Сумма = Строки["Сумма_"+Итератор];
					СтрокиПобедителя.СуммаНДС = Строки["СуммаНДС_"+Итератор];
					СтрокиПобедителя.СуммаСНДС = Строки["СуммаСНДС_"+Итератор];
				КонецЕсли; 
			КонецЦикла;
			Итератор = Итератор+1;
		КонецЦикла;	
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(Объект.РаспределениеПоПотребностям.Выгрузить(), УникальныйИдентификатор);
КонецФункции

&НаСервере
Функция ПроверкаДанныхПоПериодам()
	ЭтоНоменклатура = ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура");
	Итератор = 0;
	КоличествоСтрок = ПотребностиПоПоставщикам.Количество();
	Сообщение = Новый СообщениеПользователю;
	ОшибкиПоПериодам = ?(ЭтоНоменклатура = Истина, НСтр("ru = 'Ошибка в превышении количества по периоду: '"), НСтр("ru = 'Ошибка в превышении суммы по периоду: '"));
	ЕстьОшибка = Ложь;
	Пока Итератор < ИтераторПериода Цикл
		Если ЭтоНоменклатура Тогда
			КоличествоНоменклатуры = ПотребностиПоПоставщикам[0]["КоличествоИзначальное_"+Строка(Итератор)];
			Период = ПотребностиПоПоставщикам[0]["Период_"+Строка(Итератор)];
			Количество = ПотребностиПоПоставщикам.Итог("Количество_"+Строка(Итератор));	
			Итератор = Итератор+1;
			Если КоличествоНоменклатуры < Количество Тогда
				ОшибкиПоПериодам = ОшибкиПоПериодам+СокрЛП(Период)+", выбрано "+Строка(Количество)+", нужно не больше "+КоличествоНоменклатуры+" ";
				ЕстьОшибка = Истина;
			КонецЕсли;
		КонецЕсли;
		Итератор = Итератор +1;
	КонецЦикла;
	Если ЕстьОшибка Тогда
		Сообщение.Текст = ОшибкиПоПериодам;
		Сообщение.Сообщить();
		Возврат Ложь;	
	КонецЕсли;
	
КонецФункции	

&НаКлиенте
Процедура ЗаписатьРаспределение(Команда)
	Если ПроверкаДанныхПоПериодам() = Ложь Тогда
		Возврат;
	КонецЕсли;
	АдресРезультата = ПоместитьРезультатыРаботыВоВременноеХранилище();
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("АдресРезультата", АдресРезультата);
	Оповестить("ИзмениласьТаблицаПобедителей", ПараметрыОповещения);
	Закрыть();
КонецПроцедуры

&НаСервере
Процедура ПоказыватьСуммыНаСервере()
	Элементы.ПоказыватьСуммы.Пометка = НЕ Элементы.ПоказыватьСуммы.Пометка;
	Итератор = 0;
	Пока Итератор < ИтераторПериода Цикл
		Элементы["Сумма_"+Итератор].Видимость = Элементы.ПоказыватьСуммы.Пометка;
		Итератор = Итератор+1;
	КонецЦикла;	
	Элементы.ПотребностиПоПоставщикамСумма.Видимость = Элементы.ПоказыватьСуммы.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСуммы(Команда)
	ПоказыватьСуммыНаСервере();
КонецПроцедуры



