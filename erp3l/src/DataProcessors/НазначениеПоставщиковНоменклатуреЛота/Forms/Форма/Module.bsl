
#Область ОбработкаОсновныхСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Для вставки переноса строки.
	ТекстПодвалаИтого = "Итого:" + Символы.ПС + "Отмечено:";
	ЗаполнитьРеквизитыФормыИзПараметров(ЭтаФорма, Параметры);
	Отказ = НЕ ЛотПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗакрытьПодчиненнуюФорму"
			И Параметр = "НазначениеПоставщиковНоменклатуреЛота"
			И Источник = ЭтаФорма.ВладелецФормы Тогда
		Закрыть();
	ИначеЕсли ИмяСобытия="ИзмениласьТаблицаПобедителей" Тогда	
		ИзмениласьТаблицаПобедителей(Параметр.АдресРезультата);	
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти



#Область ОбработкаСобытийЭлементовФормы


&НаКлиенте
Процедура ЛотПриИзменении(Элемент)
	Если СтарыйЛот <> Лот Тогда
		ЛотПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзменения(Команда)
	ЗаписатьНазначенныхНоменклатуреПоставщиков();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПоПредложениюСМинимальнойОбщейСуммой(Команда)
	УстановитьВыборПоПредолжениюСМинСуммой(ЭтаФорма);
	УстановитьДоступностьЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьМинимальныеЦены(Команда)
	УстановитьВыборМинимальныхСуммВТаблице(ЭтаФорма);
	УстановитьДоступностьЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура СброситьВыбор(Команда)
	СброситьВесьВыборТаблицы(ЭтаФорма);
	УстановитьДоступностьЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсеПоТекущейКолонке(Команда)
	ТекущаяКолонка = Элементы.НоменклатураПоПоставщикам.ТекущийЭлемент;
	Если ТекущаяКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭлемента = ТекущаяКолонка.Имя;
	Поз = СтрНайти(ИмяЭлемента, "_");
	Если Поз = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КодКолонки = Сред(ИмяЭлемента, Поз+1);
	УстановитьВыборПоКолонкеПредложенияПоставщика(ЭтаФорма, КодКолонки);
	УстановитьДоступностьЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииВыбора(Элемент)
	СтрокаВыбора = Элементы.НоменклатураПоПоставщикам.ТекущиеДанные;
	Если СтрокаВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	КодКолонки = Сред(Элемент.Имя, СтрНайти(Элемент.Имя, "_")+1);
	Если РазрешенаЧастичнаяПоставка Тогда
		ОбработатьВыборПредложенияПоставщикаПоСтроке(ЭтаФорма, СтрокаВыбора,КодКолонки,РазрешенаЧастичнаяПоставка,ФЗ223());
	Иначе
		УстановитьВыборПоКолонкеПредложенияПоставщика(ЭтаФорма, КодКолонки);
	КонецЕсли;

	УстановитьДоступностьЗаписи();
	УстановитьДоступностьРаспределения();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЗаписи()
	КолонкиВыбора=НайтиКолонкиДерева(НоменклатураПоПоставщикам,"Выбор_");
	КоличествоВыбранных=0;
	ИмяПоляВыбрано = "Выбор_";
	Для каждого СтрокаТЧ Из НоменклатураПоПоставщикам Цикл
		КоличествоВыбранныхПоСтроке=0;
		Для Каждого Выбор из КолонкиВыбора Цикл
			Если СтрокаТЧ[Выбор] Тогда
				КоличествоВыбранныхПоСтроке=КоличествоВыбранныхПоСтроке+1;
			КонецЕсли;
		КонецЦикла;
		Если КоличествоВыбранныхПоСтроке>0 Тогда
			КоличествоВыбранных=КоличествоВыбранных+1;
		КонецЕсли;	
	КонецЦикла;
	Элементы.ФормаЗаписатьИзменения.Доступность=НоменклатураПоПоставщикам.Количество()=КоличествоВыбранных;
КонецПроцедуры	

&НаСервере
Функция НайтиКолонкиДерева(НоменклатураПоПоставщикам,Подобие)
	КолонкиПоиска=НоменклатураПоПоставщикам.Выгрузить().Колонки;	
	МассивКолонок=Новый Массив();
	Для Каждого СтрокаКолонки из КолонкиПоиска Цикл
		Если стрНайти(СтрокаКолонки.Имя,Подобие)>0 Тогда
			МассивКолонок.Добавить(СтрокаКолонки.Имя);
		КонецЕсли;	
	КонецЦикла;	
	Возврат МассивКолонок;
КонецФункции	

#КонецОбласти


#Область СлужебныеПроцедурыНаКлиенте


&НаКлиенте
Процедура ЗаписатьНазначенныхНоменклатуреПоставщиков()
	
	Если НЕ ЗначениеЗаполнено(Лот) 
			ИЛИ ПроверитьСообщитьНеВыбраныПоставщикиПоСтрокам()  Тогда
		Возврат;
	КонецЕсли;
	Если ОткрытИзФормы Тогда
		// Отправить оповещение об обновлении в открывшую форму
		АдресРезультата = ПоместитьРезультатыРаботыВоВременноеХранилище();
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ПротоколВыбораПобедителей", ПротоколВыбораПобедителей);
		ПараметрыОповещения.Вставить("Лот", Лот);
		ПараметрыОповещения.Вставить("АдресРезультата", АдресРезультата);
		Оповестить("ИзменилисьНазначенныеНоменклатуреПоставщики", ПараметрыОповещения);
	КонецЕсли;
КонецПроцедуры


&НаСервере
Функция   ПроверкаВыбранныхПредложенийПоКритериям()
	Если ЗначениеЗаполнено(Лот) и Лот.МетодОценкиПредложенийПоставщиков = Перечисления.МетодыОценкиПредложенийПоставщиков.ПоКритериям
		Тогда
		ТаблицаПобедителей = ПолучитьИтоговуюТаблицуВыбранныхПоставщиков();
		ТаблицаПобедителей.Свернуть("ПредложениеПоставщика");
		Если ПредложенияПоставщиков.Количество() > ТаблицаПобедителей.Количество() Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'При критериальной оценке необходим выбор из всех утвержденных предложений'");
			Сообщение.Сообщить();
			Возврат Истина;
		КонецЕсли;	
	КонецЕсли;	
	Возврат Ложь;
КонецФункции	


&НаКлиенте
Функция ПроверитьСообщитьНеВыбраныПоставщикиПоСтрокам()
	мНезаполненныхСтрок = ПолучитьСтрокиНоменклатурыБезПоставщика(ЭтаФорма);
	Если НЕ ФЗ223() Тогда Возврат Ложь; КонецЕсли;
	Если мНезаполненныхСтрок.Количество() > 0 Тогда
		Для Каждого СтрокаТЧ Из мНезаполненныхСтрок Цикл
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не выбран поставщик'");
			Сообщение.Поле = "НоменклатураПоПоставщикам["
				+ НоменклатураПоПоставщикам.Индекс(СтрокаТЧ) + "].Номенклатура";
			Сообщение.Сообщить();
		КонецЦикла;
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции


#КонецОбласти


#Область СлужебныеПроцедурыНаСервере



&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыФормыИзПараметров(Форма, Параметры)
	Форма.Лот = Параметры.Лот;     
	Форма.ПротоколВыбораПобедителей = Параметры.ПротоколВыбораПобедителей;//.НайтиСтроки(Новый Структура("Победитель",истина));
	Форма.ОткрытИзФормы = Параметры.ОткрытИзФормы;
	
	Если Параметры.Свойство("РазрешенныеПредложения") тогда
		Форма.РазрешенныеПредложения=Параметры.РазрешенныеПредложения;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКоличествоПредложений(Отказ)
	ТекстСообщения = Неопределено;
	КоличествоПредложений = ПредложенияПоставщиков.Количество();
	МинимальноеКоличествоЗаявок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ЗакупочнаяПроцедура, "МинимальноеКоличествоЗаявок");
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Лот, "ВидЗакупки") = Перечисления.ВидЛотовойЗакупки.Зонтичная Тогда
		МинимальноеКоличествоЗаявок = Макс(МинимальноеКоличествоЗаявок, 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Лот, "КоличествоПобедителейЗонтичнойЗакупки"));
	КонецЕсли;	
	МетодОценки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Лот, "МинимальноеКоличествоЗаявок");
	Если МетодОценки = Перечисления.МетодыОценкиПредложенийПоставщиков.ПоЦенам
	И КоличествоПредложений < МинимальноеКоличествоЗаявок Тогда
		ШаблонТекстаСообщения = НСтр("ru = 'Выбор поставщика невозможен. "
				+ "По условиям закупочной процедуры, должно быть не меньше "
				+ "%2 предложений, получено %1'");
		ТекстСообщения = СтрШаблон(ШаблонТекстаСообщения,
				КоличествоПредложений, МинимальноеКоличествоЗаявок);
	КонецЕсли;
	Возврат ТекстСообщения;
КонецФункции

&НаСервере
Функция ЛотПриИзмененииНаСервере()
	флУспех = Истина;
	Если СтарыйЛот <> Лот Тогда
		Если ЗаполнитьФормуПоДаннымЛота() Тогда
			СтарыйЛот = Лот;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтарыйЛот) Тогда
			// Пытаемся открыть форму с некорректным лотом.
			Возврат Ложь;
		Иначе
			// Новое заполнение не удалось, возвращаем информацию старого лота.
			флУспех = Ложь;
			Лот = СтарыйЛот;
			ЗаполнитьФормуПоДаннымЛота();
		КонецЕсли;
	КонецЕсли;
	УстановитьОформлениеФормы();
	Возврат флУспех;
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруКлючевыхРеквизитовЛота()
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ПериодЗакупок");
	СтруктураРеквизитов.Вставить("ВалютаВзаиморасчетов", "ВалютаДокумента");
	СтруктураРеквизитов.Вставить("ОрганизацияДляЗаключенияДоговора",
		"ОрганизацияДляЗаключенияДоговора");
	//СтруктураРеквизитов.Вставить("РазрешенаЧастичнаяПоставка");
	СтруктураРеквизитов.Вставить("ЗакупочнаяПроцедура", "Владелец");
	Возврат СтруктураРеквизитов;
КонецФункции

&НаСервере
Функция ЗаполнитьФормуПоДаннымЛота()
	ОчиститьТаблицыФормы();
	Если ЗначениеЗаполнено(Лот) Тогда
		РеквизитыЛота = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Лот, 
			ПолучитьСтруктуруКлючевыхРеквизитовЛота());
		ЗаполнитьЗначенияСвойств(ЭтаФорма, РеквизитыЛота);
		РазрешенаЧастичнаяПоставка=?(Лот.ВидЗакупки=Перечисления.ВидЛотовойЗакупки.ПопозиционнаяЗакупка,Истина,Ложь);
		ПрочитатьДанныеПредложенийПоставщиков();
		ЗаполнитьПредложенияПоставщиков();
		ТекстСообщения = ПроверитьКоличествоПредложений(Лот);
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ПериодЗакупок = Справочники.Периоды.ПустаяСсылка();
		ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
		ОрганизацияДляЗаключенияДоговора = Справочники.Организации.ПустаяСсылка();
		РазрешенаЧастичнаяПоставка = Ложь;
		ЗакупочнаяПроцедура = Неопределено;
	КонецЕсли;
	НарисоватьКроссТаблицу();
	РассчитатьВсеИтоговыеПоказателиФормы(ЭтаФорма);
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ОчиститьТаблицыФормы()
	ПредложенияПоставщиков.Очистить();
	НоменклатураПоПоставщикам.Очистить();
КонецПроцедуры

&НаСервереБезКонтекста
// Добавляет в настройки параметров вывода поле кросс-таблицы "Мин"
//
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события
Процедура ДобавитьПолеКроссТаблицыМин(ПараметрыВывода,
										СоздаватьЭлемент = Истина, 
										СтруктураДействий = Неопределено) Экспорт 
	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	ПараметрыПоля = Новый Структура;
	ПараметрыПоля.Вставить("ПрефиксРеквизитаКолонки", "Мин_");
	ПараметрыПоля.Вставить("УдалятьРеквизитыТаблицы", Истина);
	ПараметрыПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	ПараметрыПоля.Вставить("ТипЭлемента", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1, 0));
	ПараметрыПоля.Вставить("Заголовок", НСтр("ru = 'Мин.'"));
	ПараметрыПоля.Вставить("СоздаватьИтоговыеРеквизиты", Ложь);
	ПараметрыПоля.Вставить("ШиринаЭлемента", 1);
	ПараметрыПоля.Вставить("СвойстваЭлемента", Новый Структура());
	ПараметрыПоля.СвойстваЭлемента.Вставить("Видимость", Ложь); 
	ЦентрализованныеЗакупкиУХ.ДобавитьПолеКроссТаблицы(ПараметрыПоля, ПараметрыВывода, СтруктураДействий);
КонецПроцедуры

&НаСервереБезКонтекста
// Добавляет в настройки параметров вывода поле кросс-таблицы "НДС"
//
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события
Процедура ДобавитьПолеКроссТаблицыНДС(ПараметрыВывода,
										СоздаватьЭлемент = Истина, 
										СтруктураДействий = Неопределено) Экспорт 
	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	ПараметрыПоля = Новый Структура;
	ПараметрыПоля.Вставить("ПрефиксРеквизитаКолонки", "СтавкаНДС_");
	ПараметрыПоля.Вставить("УдалятьРеквизитыТаблицы", Истина);
	ПараметрыПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	ПараметрыПоля.Вставить("ТипЭлемента",
		ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
	ПараметрыПоля.Вставить("Заголовок", НСтр("ru = 'НДС'"));
	ПараметрыПоля.Вставить("СоздаватьИтоговыеРеквизиты", Ложь);
	ПараметрыПоля.Вставить("ШиринаЭлемента", 5);
	ПараметрыПоля.Вставить("СвойстваЭлемента", Новый Структура());
	ПараметрыПоля.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеНадписи);
	ПараметрыПоля.СвойстваЭлемента.Вставить("ОтображатьВШапке", Ложь);
	ПараметрыПоля.СвойстваЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	ЦентрализованныеЗакупкиУХ.ДобавитьПолеКроссТаблицы(ПараметрыПоля, ПараметрыВывода, СтруктураДействий);
КонецПроцедуры

&НаСервереБезКонтекста
// Добавляет в настройки параметров вывода поле кросс-таблицы "Выбор"
//
// Параметры:
//  ПараметрыВывода - Структура - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент - Булево - Флаг определяет, создавать ли элемент формы
//  СтруктураДействий - Структура - Структура действий элемента,
//						Ключ - имя события, значение - имя процедуры обработчика события.
//
Процедура ДобавитьПолеКроссТаблицыВыбор(ПараметрыВывода,
										СоздаватьЭлемент = Истина,
										СтруктураДействий = Неопределено) Экспорт 
	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	ПараметрыПоля = Новый Структура;
	ПараметрыПоля.Вставить("ПрефиксРеквизитаКолонки", "Выбор_");
	ПараметрыПоля.Вставить("УдалятьРеквизитыТаблицы", Истина);
	ПараметрыПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	
	МассивСоставногоТипа = Новый Массив;
	МассивСоставногоТипа.Добавить(ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	МассивСоставногоТипа.Добавить(ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(20));
	
	ПараметрыПоля.Вставить("ТипЭлемента", МассивСоставногоТипа);
	
	
	ПараметрыПоля.Вставить("Заголовок", "");
	ПараметрыПоля.Вставить("СоздаватьИтоговыеРеквизиты", Ложь);
	ПараметрыПоля.Вставить("ШиринаЭлемента", 1);
	ПараметрыПоля.Вставить("СвойстваЭлемента", Новый Структура());
	ПараметрыПоля.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеФлажка);
	ПараметрыПоля.СвойстваЭлемента.Вставить("ОтображатьВШапке", Ложь);
	ПараметрыПоля.СвойстваЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	ЦентрализованныеЗакупкиУХ.ДобавитьПолеКроссТаблицы(
											ПараметрыПоля, 
											ПараметрыВывода, 
											СтруктураДействий);
КонецПроцедуры

&НаСервереБезКонтекста
// Добавляет в настройки параметров вывода поле кросс-таблицы "Сумма"
//
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события
Процедура ДобавитьПолеКроссТаблицыСумма(ПараметрыВывода, СоздаватьЭлемент = Истина, СтруктураДействий = Неопределено) Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	ПараметрыПоля = Новый Структура;
	ПараметрыПоля.Вставить("ПрефиксРеквизитаКолонки", "Сумма_");
	ПараметрыПоля.Вставить("УдалятьРеквизитыТаблицы", Истина);
	ПараметрыПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	ПараметрыПоля.Вставить("ТипЭлемента", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(15, 2));
	ПараметрыПоля.Вставить("Заголовок", НСтр("ru = 'Сумма'"));
	ПараметрыПоля.Вставить("СоздаватьИтоговыеРеквизиты", Истина);
	ПараметрыПоля.Вставить("СвойстваЭлемента", Новый Структура());
	ПараметрыПоля.СвойстваЭлемента.Вставить("Видимость", Ложь);
	
	ЦентрализованныеЗакупкиУХ.ДобавитьПолеКроссТаблицы(ПараметрыПоля, ПараметрыВывода, СтруктураДействий);

КонецПроцедуры
Процедура ДобавитьПолеКроссТаблицыКоличество(ПараметрыВывода, СтруктураДействий = Неопределено) Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	ПараметрыПоля = Новый Структура;
	ПараметрыПоля.Вставить("ПрефиксРеквизитаКолонки", "Количество_");
	ПараметрыПоля.Вставить("УдалятьРеквизитыТаблицы", Истина);
	ПараметрыПоля.Вставить("СоздаватьЭлемент", Истина);
	ПараметрыПоля.Вставить("ТипЭлемента", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(15, 2));
	ПараметрыПоля.Вставить("Заголовок", НСтр("ru = 'Количество'"));
	ПараметрыПоля.Вставить("СоздаватьИтоговыеРеквизиты", Истина);
	ПараметрыПоля.Вставить("СвойстваЭлемента", Новый Структура());
	ПараметрыПоля.СвойстваЭлемента.Вставить("Видимость", Истина);
	
	ЦентрализованныеЗакупкиУХ.ДобавитьПолеКроссТаблицы(ПараметрыПоля, ПараметрыВывода, СтруктураДействий);

КонецПроцедуры

Процедура ДобавитьПолеКроссТаблицыИнтегральнаяОценка(ПараметрыВывода, СтруктураДействий = Неопределено) Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	ПараметрыПоля = Новый Структура;
	ПараметрыПоля.Вставить("ПрефиксРеквизитаКолонки", "ИнтегральнаяОценка_");
	ПараметрыПоля.Вставить("УдалятьРеквизитыТаблицы", Истина);
	ПараметрыПоля.Вставить("СоздаватьЭлемент", Истина);
	//ПараметрыПоля.Вставить("ТипЭлемента", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(15, 2));
	ПараметрыПоля.Вставить("Заголовок", НСтр("ru = 'Интегральная оценка'"));
	//ПараметрыПоля.Вставить("СоздаватьИтоговыеРеквизиты", Истина);
	ПараметрыПоля.Вставить("СвойстваЭлемента", Новый Структура());
	ПараметрыПоля.СвойстваЭлемента.Вставить("Видимость", Истина);
	
	ЦентрализованныеЗакупкиУХ.ДобавитьПолеКроссТаблицы(ПараметрыПоля, ПараметрыВывода, СтруктураДействий);

КонецПроцедуры

Процедура ДобавитьПолеКроссТаблицыКоличествоПоПобедителю(ПараметрыВывода, СтруктураДействий = Неопределено) Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	ПараметрыПоля = Новый Структура;
	ПараметрыПоля.Вставить("ПрефиксРеквизитаКолонки", "КоличествоПоПобедителю_");
	ПараметрыПоля.Вставить("УдалятьРеквизитыТаблицы", Истина);
	ПараметрыПоля.Вставить("СоздаватьЭлемент", Истина);
	ПараметрыПоля.Вставить("ТипЭлемента", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(15, 2));
	ПараметрыПоля.Вставить("Заголовок", НСтр("ru = 'Количество'"));
	ПараметрыПоля.Вставить("СоздаватьИтоговыеРеквизиты", Истина);
	ПараметрыПоля.Вставить("СвойстваЭлемента", Новый Структура());
	ПараметрыПоля.СвойстваЭлемента.Вставить("Видимость", Ложь);
	
	ЦентрализованныеЗакупкиУХ.ДобавитьПолеКроссТаблицы(ПараметрыПоля, ПараметрыВывода, СтруктураДействий);

КонецПроцедуры

Процедура ДобавитьПолеКроссТаблицыМестоПоПобедителю(ПараметрыВывода, СтруктураДействий = Неопределено) Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	ПараметрыПоля = Новый Структура;
	ПараметрыПоля.Вставить("ПрефиксРеквизитаКолонки", "МестоПоПобедителю_");
	ПараметрыПоля.Вставить("УдалятьРеквизитыТаблицы", Истина);
	ПараметрыПоля.Вставить("СоздаватьЭлемент", Истина);
	ПараметрыПоля.Вставить("ТипЭлемента", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(15,0));
	ПараметрыПоля.Вставить("Заголовок", НСтр("ru = 'Количество'"));
	ПараметрыПоля.Вставить("СоздаватьИтоговыеРеквизиты", Истина);
	ПараметрыПоля.Вставить("СвойстваЭлемента", Новый Структура());
	ПараметрыПоля.СвойстваЭлемента.Вставить("Видимость", Ложь);
	
	ЦентрализованныеЗакупкиУХ.ДобавитьПолеКроссТаблицы(ПараметрыПоля, ПараметрыВывода, СтруктураДействий);

КонецПроцедуры


&НаСервереБезКонтекста
// Добавляет поле отображающее в данных ячеек сумму номенклатуры по предложению поставщика.
// В подвале показывает два числа: сумму итого по колонке и сумму итого по выбранным ячейкам.
Процедура ДобавитьПолеКроссТаблицыСуммаВыбрано(ПараметрыВывода, СоздаватьЭлемент = Истина, СтруктураДействий = Неопределено) Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	ПараметрыПоля = Новый Структура;
	ПараметрыПоля.Вставить("ПрефиксРеквизитаКолонки", "СуммаВыбрано_");
	ПараметрыПоля.Вставить("УдалятьРеквизитыТаблицы", Истина);
	ПараметрыПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	ПараметрыПоля.Вставить("ТипЭлемента", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	ПараметрыПоля.Вставить("Заголовок", НСтр("ru = 'Сумма'"));
	ПараметрыПоля.Вставить("СоздаватьИтоговыеРеквизиты", Истина);
	ПараметрыПоля.Вставить("ШиринаЭлемента", 8);
	ПараметрыПоля.Вставить("СвойстваЭлемента", Новый Структура());
	ПараметрыПоля.СвойстваЭлемента.Вставить("ТолькоПросмотр", Истина); 
	ПараметрыПоля.СвойстваЭлемента.Вставить("АвтоМаксимальнаяШирина", Ложь);
	ПараметрыПоля.СвойстваЭлемента.Вставить("ОтображатьВШапке", Ложь);
	
	ЦентрализованныеЗакупкиУХ.ДобавитьПолеКроссТаблицы(ПараметрыПоля, ПараметрыВывода, СтруктураДействий);

КонецПроцедуры


&НаСервере
Процедура НарисоватьКроссТаблицу()
	НастроитьКолонкиКроссТаблицы();
	УстановитьУсловноеОформлениеКроссТаблицы();
	ОбновитьНазначенныхНоменклатуреПоставщиков();
	Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Лот, "ВидЗакупки") = Перечисления.ВидЛотовойЗакупки.Зонтичная  Тогда
		УстановитьПоУмолчаниюРаспределениеНоменклатуры();
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура НастроитьКолонкиКроссТаблицы()
	ТЗПредложенияПоставщиков = РеквизитФормыВЗначение("ПредложенияПоставщиков", Тип("ТаблицаЗначений"));
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ИмяРеквизитаКроссТаблицы", "НоменклатураПоПоставщикам");
	ПараметрыВывода.Вставить("ЭлементФормыКроссТаблицы", "НоменклатураПоПоставщикам");
	ПараметрыВывода.Вставить("ИмяТаблицыДанныхКолонок", "ПредложенияПоставщиков");
	ПараметрыВывода.Вставить("УдалятьРеквизитыТаблицы", Истина);
	ПараметрыВывода.Вставить("СоздаватьОбщуюГруппу", Ложь);
	ПараметрыВывода.Вставить("ПоказыватьИтоговыеРеквизитыВГруппе", Истина);
	ПараметрыВывода.Вставить("СоздаватьИтоговыеРеквизиты", Истина);
	ПараметрыВывода.Вставить("ЗаголовокПоляГруппировки", НСтр("ru = 'Предложения поставщиков'"));
	ПараметрыВывода.Вставить("СоздаватьГруппуПериода", Истина);
	
	ПараметрыВывода.Вставить("ГруппировкаКолонокПериода", "Горизонтальная");
	ПараметрыВывода.Вставить("СвойстваГруппыПериода", Новый Структура);
	ПараметрыВывода.СвойстваГруппыПериода.Вставить("Группировка", ГруппировкаКолонок.ВЯчейке);
	ПараметрыВывода.СвойстваГруппыПериода.Вставить("АвтоМаксимальнаяШирина", Ложь);
	ПараметрыВывода.Вставить("ДобавитьКолонкуТерминатор", Истина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПриИзменении", "Подключаемый_ПриИзмененииВыбора");
	ДобавитьПолеКроссТаблицыВыбор(ПараметрыВывода, Истина, СтруктураДействий);
	
	
	СтруктураДействий = Новый Структура;
	ДобавитьПолеКроссТаблицыМин(ПараметрыВывода, Ложь, СтруктураДействий);
	
	СтруктураДействий = Новый Структура;
	ДобавитьПолеКроссТаблицыСуммаВыбрано(ПараметрыВывода, Истина, СтруктураДействий);
	
	СтруктураДействий = Новый Структура;
	ДобавитьПолеКроссТаблицыНДС(ПараметрыВывода, Истина, СтруктураДействий);
	
	
	СтруктураДействий = Новый Структура;
	ДобавитьПолеКроссТаблицыСумма(ПараметрыВывода, Ложь, СтруктураДействий);

	ДобавитьПолеКроссТаблицыКоличество(ПараметрыВывода, СтруктураДействий);
		
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоСтранамКорпоративныеЗакупки") Тогда
	ДобавитьПолеКроссТаблицыСтранаПроисхождения(ПараметрыВывода, Истина,);
	
	ДобавитьПолеКроссТаблицыСтранаПроизводителя(ПараметрыВывода, Истина);
	КонецЕсли;
	
	ДобавитьПолеКроссТаблицыНоменклатурыПоставщика(ПараметрыВывода, СтруктураДействий);

	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Лот, "ВидЗакупки") = Перечисления.ВидЛотовойЗакупки.Зонтичная Тогда
		ДобавитьПолеКроссТаблицыКоличествоПоПобедителю(ПараметрыВывода, СтруктураДействий);
		ДобавитьПолеКроссТаблицыМестоПоПобедителю(ПараметрыВывода, СтруктураДействий);
		
	КонецЕсли;	
	ЦентрализованныеЗакупкиУХ.ОбновитьСтруктуруВыводаКроссТаблицы(ЭтаФорма, ПараметрыВывода);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьПолеКроссТаблицыНоменклатурыПоставщика(ПараметрыВывода,
										СтруктураДействий = Неопределено) Экспорт 
	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	ПараметрыПоля = Новый Структура;
	ПараметрыПоля.Вставить("ПрефиксРеквизитаКолонки", "НоменклатураПоставщика_");
	ПараметрыПоля.Вставить("УдалятьРеквизитыТаблицы", Истина);
	ПараметрыПоля.Вставить("СоздаватьЭлемент", Истина);
	ПараметрыПоля.Вставить("ТипЭлемента",
	ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(150));
	ПараметрыПоля.Вставить("Заголовок", НСтр("ru = 'Номенклатура поставщика'"));
	ПараметрыПоля.Вставить("СоздаватьИтоговыеРеквизиты", Ложь);
	ПараметрыПоля.Вставить("Группировка", ГруппировкаКолонок.Вертикальная);

	ПараметрыПоля.Вставить("СвойстваЭлемента", Новый Структура());
	ПараметрыПоля.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	ПараметрыПоля.СвойстваЭлемента.Вставить("ОтображатьВШапке", Истина);
	ПараметрыПоля.СвойстваЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	ЦентрализованныеЗакупкиУХ.ДобавитьПолеКроссТаблицы(ПараметрыПоля, ПараметрыВывода, СтруктураДействий);
	
	
КонецПроцедуры
&НаСервереБезКонтекста
// Добавляет в настройки параметров вывода поле кросс-таблицы "Страна"
//
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события
Процедура ДобавитьПолеКроссТаблицыСтранаПроисхождения(ПараметрыВывода,
										СоздаватьЭлемент = Истина, 
										СтруктураДействий = Неопределено) Экспорт 
	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	ПараметрыПоля = Новый Структура;
	ПараметрыПоля.Вставить("ПрефиксРеквизитаКолонки", "СтранаПроисхождения_");
	ПараметрыПоля.Вставить("УдалятьРеквизитыТаблицы", Истина);
	ПараметрыПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	ПараметрыПоля.Вставить("ТипЭлемента",
	ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(150));
	ПараметрыПоля.Вставить("Заголовок", НСтр("ru = 'Страна происхождения'"));
	ПараметрыПоля.Вставить("СоздаватьИтоговыеРеквизиты", Ложь);
	ПараметрыПоля.Вставить("СвойстваЭлемента", Новый Структура());
	ПараметрыПоля.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеНадписи);
	ПараметрыПоля.СвойстваЭлемента.Вставить("ОтображатьВШапке", Истина);
	ПараметрыПоля.СвойстваЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	ЦентрализованныеЗакупкиУХ.ДобавитьПолеКроссТаблицы(ПараметрыПоля, ПараметрыВывода, СтруктураДействий);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьПолеКроссТаблицыСтранаПроизводителя(ПараметрыВывода,
										СоздаватьЭлемент = Истина, 
										СтруктураДействий = Неопределено) Экспорт 
	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	ПараметрыПоля = Новый Структура;
	ПараметрыПоля.Вставить("ПрефиксРеквизитаКолонки", "СтранаПроизводителя_");
	ПараметрыПоля.Вставить("УдалятьРеквизитыТаблицы", Истина);
	ПараметрыПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	ПараметрыПоля.Вставить("ТипЭлемента",
	ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(150));
	ПараметрыПоля.Вставить("Заголовок", НСтр("ru = 'Страна производителя'"));
	ПараметрыПоля.Вставить("СоздаватьИтоговыеРеквизиты", Ложь);
	ПараметрыПоля.Вставить("СвойстваЭлемента", Новый Структура());
	ПараметрыПоля.СвойстваЭлемента.Вставить("Вид", ВидПоляФормы.ПолеНадписи);
	ПараметрыПоля.СвойстваЭлемента.Вставить("ОтображатьВШапке", Истина);
	ПараметрыПоля.СвойстваЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	ЦентрализованныеЗакупкиУХ.ДобавитьПолеКроссТаблицы(ПараметрыПоля, ПараметрыВывода, СтруктураДействий);
КонецПроцедуры


&НаСервере
Процедура УстановитьПоУмолчаниюРаспределениеНоменклатуры()
	Для Каждого Строка из НоменклатураПоПоставщикам Цикл
		Строка.НоменклатураРаспределена = Ложь;	
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеКроссТаблицы()
	АктивныеКолонки = ПредложенияПоставщиков.НайтиСтроки(
			Новый Структура("Активная", Истина));
	Для каждого Колонка_ Из АктивныеКолонки Цикл
		Элемент = УсловноеОформление.Элементы.Добавить();
		ЦентрализованныеЗакупкиУХ.ДобавитьПолеУО(
			Элемент, 
			"НоменклатураПоПоставщикамСуммаВыбрано_"+Колонка_.ИмяКолонки);
		ЦентрализованныеЗакупкиУХ.ДобавитьОтборЭлементаУО(Элемент,
			Новый ПолеКомпоновкиДанных("НоменклатураПоПоставщикам.Мин_"+Колонка_.ИмяКолонки),
			1);
		Элемент.Оформление.УстановитьЗначениеПараметра(
			"Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню,,,Истина));
	КонецЦикла;
	ЦентрализованныеЗакупкиУХ.УстановитьТиповоеУсловноеОформлениеХарактеристики(
		УсловноеОформление,
		"НоменклатураПоПоставщикамХарактеристика",
		"НоменклатураПоПоставщикам.ХарактеристикиИспользуются");
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеПредложенийПоставщиков()
	Если НЕ ЗначениеЗаполнено(Лот) Тогда
		Возврат;
	КонеЦЕсли;
	ВалютаУчетаЗакупок = Константы.ВалютаУчетаЦентрализованныхЗакупок.Получить();
	ОписаниеКоэффициента = ЦентрализованныеЗакупкиУХ.ПолучитьКоэффициентПересчетаВалют(
		ВалютаУчетаЗакупок, Лот.ВалютаДокумента, Лот.ДатаНачалаПериодаПоставки);
	Запрос = Новый Запрос;
	            
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛотыНоменклатура.Приоритет КАК Приоритет,
	|	ЛотыНоменклатура.Номенклатура КАК Номенклатура,
	|	УсловияПредложенийПоставщиков.Характеристика КАК Характеристика,
	|	ЛотыНоменклатура.ПериодПотребности КАК ПериодПотребности,
	|	ЛотыНоменклатура.Организация КАК Организация,
	|	ЛотыНоменклатура.МестоПоставки КАК МестоПоставки,
	|	ЛотыНоменклатура.Проект КАК Проект,
	|	ЛотыНоменклатура.Менеджер КАК Менеджер,
	|	ЛотыНоменклатура.ДоговорСПокупателем КАК ДоговорСПокупателем,
	|	УсловияПредложенийПоставщиков.ПредложениеПоставщика КАК ПредложениеПоставщика,
	|	ЛотыНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЛотыНоменклатура.Коэффициент КАК Коэффициент,
	|	ЛотыНоменклатура.Количество КАК КоличествоПоЛоту,
	|	УсловияПредложенийПоставщиков.Количество КАК Количество,
	|	УсловияПредложенийПоставщиков.Цена  КАК Цена,
	|	ВЫБОР
	|		КОГДА УсловияПредложенийПоставщиков.Номенклатура ССЫЛКА Справочник.Номенклатура
	|			ТОГДА УсловияПредложенийПоставщиков.Количество * УсловияПредложенийПоставщиков.Цена
	|		ИНАЧЕ УсловияПредложенийПоставщиков.Сумма
	|	КОНЕЦ   КАК Сумма,
	|	ЛотыНоменклатура.СтавкаНДС КАК СтавкаНДС,
	|	УсловияПредложенийПоставщиков.ПредложениеПоставщика.Контрагент КАК Поставщик,
	|	УсловияПредложенийПоставщиков.ТоварНеПоставляется КАК ТоварНеПоставляется,
	|	УсловияПредложенийПоставщиков.ПредложениеПоставщика.Дата КАК ДатаПредложения,
	|	0 КАК МестоПобедителя,
	|	УсловияПредложенийПоставщиков.СтраныПроисхождения КАК СтраныПроисхождения,
	|	УсловияПредложенийПоставщиков.СтранаПроизводителя КАК СтранаПроизводителя,
	|	УсловияПредложенийПоставщиков.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	УсловияПредложенийПоставщиков.ПредложениеПоставщика.Партнер КАК Партнер
	|ИЗ
	|	Справочник.Лоты.Номенклатура КАК ЛотыНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УсловияПредложенийПоставщиков КАК УсловияПредложенийПоставщиков
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПереторжкаЗакупок.СрезПоследних КАК ПереторжкаЗакупокСрезПоследних
	|			ПО УсловияПредложенийПоставщиков.ЗакупочнаяПроцедура = ПереторжкаЗакупокСрезПоследних.ЗакупочнаяПроцедура
	|		ПО ЛотыНоменклатура.Номенклатура = УсловияПредложенийПоставщиков.Номенклатура
	|			И ЛотыНоменклатура.МестоПоставки = УсловияПредложенийПоставщиков.МестоПоставки
	|			И ЛотыНоменклатура.ПериодПотребности = УсловияПредложенийПоставщиков.ПериодПотребности
	|			И ЛотыНоменклатура.Ссылка = УсловияПредложенийПоставщиков.Лот
	|			И (&ЗакупочнаяПроцедура = УсловияПредложенийПоставщиков.ЗакупочнаяПроцедура)
	|			И (УсловияПредложенийПоставщиков.Характеристика = ЛотыНоменклатура.Характеристика)
	|ГДЕ
	|	ЛотыНоменклатура.Ссылка = &Лот
	|	И УсловияПредложенийПоставщиков.ПредложениеПоставщика.НомерПереторжки = ЕСТЬNULL(ПереторжкаЗакупокСрезПоследних.НомерПереторжки, 0)";
	Если РазрешенныеПредложения.Количество()>0 Тогда
		Запрос.Текст=Запрос.Текст+" и УсловияПредложенийПоставщиков.ПредложениеПоставщика в (&РазрешенныеПредложения)";
	КонецЕсли;	
	Запрос.УстановитьПараметр("Лот", Лот);
	Запрос.УстановитьПараметр("ЗакупочнаяПроцедура", ЗакупочнаяПроцедура);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВалюты",
		ОписаниеКоэффициента.Коэффициент);
	Запрос.УстановитьПараметр("Кратность", ОписаниеКоэффициента.Кратность);
	Запрос.УстановитьПараметр("РазрешенныеПредложения",РазрешенныеПредложения);
	ВыгрузкаЗапроса = Запрос.Выполнить().Выгрузить();
	Объект.РаспределениеПоПотребностям.Загрузить(ВыгрузкаЗапроса);
	Для Каждого ТекСтрока Из Объект.РаспределениеПоПотребностям Цикл
		ПроцентНДС = 
			ВстраиваниеУХВызовСервера.ПолучитьСтавкуНДС(
				ТекСтрока.СтавкаНДС);
		ПроцентЧисло = 0;
		Если ТипЗнч(ПроцентНДС) = Тип("СправочникСсылка.СтавкиНДС") Тогда
			ПроцентЧисло = ПроцентНДС.Ставка;
		ИначеЕсли ТипЗнч(ПроцентНДС) = Тип("Число") Тогда
			ПроцентЧисло = ПроцентНДС;
		Иначе
			ПроцентЧисло = ПроцентНДС;
		КонецЕсли;
				
		ТекСтрока.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			ТекСтрока.Сумма, 
			Лот.ЦенаВключаетНДС, 
			ПроцентЧисло);
		ТекСтрока.СуммаСНДС = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
	КонецЦикла;
	
	ВыгрузкаЗапроса.Свернуть("Поставщик,ТоварНеПоставляется");
	ТоварНеПоставляется=ВыгрузкаЗапроса.НайтиСтроки(Новый Структура("ТоварНеПоставляется",Ложь));
	Для Каждого ТекСтрока из ТоварНеПоставляется  Цикл
		Если ВыгрузкаЗапроса.НайтиСтроки(Новый Структура("Поставщик, ТоварНеПоставляется", ТекСтрока.Поставщик,Истина)).Количество() = 0 Тогда
			ВсеТоварыПоставляютсяПоставщиком.Добавить(ТекСтрока.Поставщик);		
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредложенияПоставщиков()
	ТабПредложения = Объект.РаспределениеПоПотребностям.Выгрузить(
			,"ПредложениеПоставщика,Поставщик,Сумма");
	ТабПредложения.Свернуть("ПредложениеПоставщика,Поставщик", "Сумма");
	Для Каждого ТекПредложение Из ТабПредложения Цикл
		НоваяСтрока = ПредложенияПоставщиков.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекПредложение);
		НоваяСтрока.Активная = Истина;
		НоваяСтрока.Заголовок = Строка(НоваяСтрока.Поставщик);
		НоваяСтрока.ИмяКолонки = 
			ПолучитьИмяКолонкиПоПредложениюПоставщика(
				НоваяСтрока.ПредложениеПоставщика);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОпределитьПобедителейПоЗонтичнойЗакупке(ТаблицаНомеклатурыПоставщиков)
	ТаблицаНомеклатурыПоставщиков.Сортировать("Номенклатура,Характеристика,Организация,ДоговорСПокупателем,Менеджер,МестоПоставки,Приоритет,Проект,СтавкаНДС,Сумма,ДатаПредложения");
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Лот, "МетодОценкиПредложенийПоставщиков") 
		= Перечисления.МетодыОценкиПредложенийПоставщиков.ПоЦенам	Тогда
		Структура = Новый Структура();
		Структура.Вставить("Номенклатура");
		Структура.Вставить("Характеристика");
		Структура.Вставить("Организация");
		Структура.Вставить("ДоговорСПокупателем");
		Структура.Вставить("Менеджер");
		Структура.Вставить("МестоПоставки");
		Структура.Вставить("Приоритет");
		Структура.Вставить("Коэффицент");
		
		Структура.Вставить("Проект");               
		СтруктураСравнения = Новый Структура();
		СтруктураСравнения.Вставить("Номенклатура");
		СтруктураСравнения.Вставить("Характеристика");
		СтруктураСравнения.Вставить("Организация");
		СтруктураСравнения.Вставить("ДоговорСПокупателем");
		СтруктураСравнения.Вставить("Менеджер");
		СтруктураСравнения.Вставить("МестоПоставки");
		СтруктураСравнения.Вставить("Приоритет");
		СтруктураСравнения.Вставить("Проект"); 
		СтруктураСравнения.Вставить("Коэффицент");
		
		Место = 0;
		Для Каждого СтрокаТЧ Из ТаблицаНомеклатурыПоставщиков Цикл
			Если СтрокаТЧ.ТоварНеПоставляется Тогда Продолжить; КонецЕсли;
			ЗаполнитьЗначенияСвойств(Структура,СтрокаТЧ);
			Для Каждого Ключ Из Структура Цикл 
				Если Ключ.Значение <> СтруктураСравнения[Ключ.Ключ] Тогда
					Место = 0;
					Прервать;
				КонецЕсли;	
			КонецЦикла;
			Место = Место + 1;
			ЗаполнитьЗначенияСвойств(СтруктураСравнения,СтрокаТЧ);        
			СтрокаТЧ.МестоПобедителя = Место;
		КонецЦикла;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЧРаспределения", ТаблицаНомеклатурыПоставщиков);
	Запрос.УстановитьПараметр("Лот", Лот);
	Запрос.Текст= "ВЫБРАТЬ
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Номенклатура КАК Номенклатура,
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.МестоПобедителя КАК МестоПобедителя,
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Коэффициент КАК Коэффициент,
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Менеджер КАК Менеджер,
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Характеристика КАК Характеристика,
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Организация КАК Организация,
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Проект КАК Проект,
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Приоритет КАК Приоритет,
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.МестоПоставки КАК МестоПоставки,
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Количество КАК Количество,
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Сумма КАК Сумма
	              |ПОМЕСТИТЬ УсловияЛота
	              |ИЗ
	              |	Справочник.Лоты.УсловияРаспределенияПобедителейЗонтичнойЗакупки КАК ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки
	              |ГДЕ
	              |	ЛотыУсловияРаспределенияПобедителейЗонтичнойЗакупки.Ссылка = &Лот
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	Распределение.Поставщик КАК Поставщик,
	              |	Распределение.СтавкаНДС КАК СтавкаНДС,
	              |	Распределение.Сумма КАК Сумма,
	              |	Распределение.Количество КАК Количество,
	              |	Распределение.ПредложениеПоставщика КАК ПредложениеПоставщика,
	              |	Распределение.ДоговорСПокупателем КАК ДоговорСПокупателем,
	              |	Распределение.Менеджер КАК Менеджер,
	              |	Распределение.Проект КАК Проект,
	              |	Распределение.МестоПоставки КАК МестоПоставки,
	              |	Распределение.Организация КАК Организация,
	              |	Распределение.Характеристика КАК Характеристика,
	              |	Распределение.Номенклатура КАК Номенклатура,
	              |	Распределение.Приоритет КАК Приоритет,
	              |	Распределение.ТоварНеПоставляется КАК ТоварНеПоставляется,
	              |	Распределение.МестоПобедителя КАК МестоПобедителя
	              |ПОМЕСТИТЬ ТЧРаспределения
	              |ИЗ
	              |	&ТЧРаспределения КАК Распределение
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ТЧРаспределения.Поставщик КАК Поставщик,
	              |	ТЧРаспределения.СтавкаНДС КАК СтавкаНДС,
	              |	ТЧРаспределения.Сумма КАК Сумма,
	              |	ТЧРаспределения.Количество КАК Количество,
	              |	ТЧРаспределения.ПредложениеПоставщика КАК ПредложениеПоставщика,
	              |	ТЧРаспределения.ДоговорСПокупателем КАК ДоговорСПокупателем,
	              |	ТЧРаспределения.Менеджер КАК Менеджер,
	              |	ТЧРаспределения.Проект КАК Проект,
	              |	ТЧРаспределения.МестоПоставки КАК МестоПоставки,
	              |	ТЧРаспределения.Организация КАК Организация,
	              |	ТЧРаспределения.Характеристика КАК Характеристика,
	              |	ТЧРаспределения.Номенклатура КАК Номенклатура,
	              |	ТЧРаспределения.Приоритет КАК Приоритет,
	              |	УсловияЛота.Количество КАК КоличествоПоПобедителю,
	              |	УсловияЛота.Сумма КАК СуммаПоПобедителю,
	              |	ТЧРаспределения.ТоварНеПоставляется КАК ТоварНеПоставляется,
	              |	УсловияЛота.МестоПобедителя КАК МестоПобедителя
	              |ИЗ
	              |	ТЧРаспределения КАК ТЧРаспределения
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УсловияЛота КАК УсловияЛота
	              |		ПО ТЧРаспределения.Номенклатура = УсловияЛота.Номенклатура
	              |			И ТЧРаспределения.Менеджер = УсловияЛота.Менеджер
	              |			И ТЧРаспределения.МестоПоставки = УсловияЛота.МестоПоставки
	              |			И ТЧРаспределения.Организация = УсловияЛота.Организация
	              |			И ТЧРаспределения.Проект = УсловияЛота.Проект
	              |			И ТЧРаспределения.Организация = УсловияЛота.Организация
	              |			И ТЧРаспределения.Характеристика = УсловияЛота.Характеристика
	              |			И ТЧРаспределения.МестоПобедителя = УсловияЛота.МестоПобедителя";
	ТаблицаНомеклатурыПоставщиков = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьНазначенныхНоменклатуреПоставщиков()
	ПоляГруппировки = "Номенклатура,Характеристика,Организация,ДоговорСПокупателем,Менеджер,МестоПоставки,Приоритет,Проект";
	
	ТаблицаНомеклатурыПоставщиков = Объект.РаспределениеПоПотребностям.Выгрузить();
	ТаблицаНомеклатурыПоставщиков.Свернуть(ПоляГруппировки + ",ТоварНеПоставляется,Партнер,МестоПобедителя,ПредложениеПоставщика,Поставщик,СтавкаНДС,ДатаПредложения,НоменклатураПоставщика,СтраныПроисхождения,СтранаПроизводителя,НоменклатураПоставщика","Сумма,Количество");
	ТаблицаНомеклатурыПоставщиков.Сортировать(ПоляГруппировки);
	                                                            
	// продолжаем заполнение полей периода пока не изменится хотя бы одно значение поля группировки.
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Лот, "ВидЗакупки") = Перечисления.ВидЛотовойЗакупки.Зонтичная Тогда	
		ОпределитьПобедителейПоЗонтичнойЗакупке(ТаблицаНомеклатурыПоставщиков);
	КонецЕсли;	
	ЗначенияПолейГруппировки = Новый Структура(ПоляГруппировки);
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Лот, "МетодОценкиПредложенийПоставщиков")
		= Перечисления.МетодыОценкиПредложенийПоставщиков.ПоКритериям Тогда
		ТаблицаНомеклатурыПоставщиков.Колонки.Добавить("ИнтегральнаяОценка");
		ТаблицаОценок = Документы.ПротоколВыбораПобедителей.ПолучитьТаблицуПобедителейЗонтичнойЗакупкеКритериальнойОценки(Лот);
		Для Каждого ТекСтрокаНоменклатурыПоставщиков ИЗ ТаблицаНомеклатурыПоставщиков Цикл
			Строки = ТаблицаОценок.НайтиСтроки(Новый Структура("ОбъектВыбора",ТекСтрокаНоменклатурыПоставщиков.ПредложениеПоставщика));
			Если Строки.Количество() >0 Тогда
				ТекСтрокаНоменклатурыПоставщиков.ИнтегральнаяОценка= Строки[0].Оценка;
			КонецЕсли; 
		КонецЦикла;	
		
		//ТаблицаНомеклатурыПоставщиков.Сортировать("ИнтегральнаяОценка Убыв");
	КонецЕсли;	
	
	
	
	Для Каждого ТекСтрокаНоменклатурыПоставщиков ИЗ ТаблицаНомеклатурыПоставщиков Цикл
		
		// Проверяем, что это новая строка кросс-таблицы или это новое значение созданной на предыдущих шагах строки
		флНоваяСтрока = Ложь;
		Для Каждого Пара_ Из ЗначенияПолейГруппировки Цикл
			Если Пара_.Значение <> ТекСтрокаНоменклатурыПоставщиков[Пара_.Ключ] Тогда
				флНоваяСтрока = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если флНоваяСтрока Тогда
			НоваяСтрока = НоменклатураПоПоставщикам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаНоменклатурыПоставщиков);
			ЗаполнитьЗначенияСвойств(ЗначенияПолейГруппировки, ТекСтрокаНоменклатурыПоставщиков);
			УстановитьХарактеристикиИспользуются(НоваяСтрока);
		КонецЕсли;
			
		// заполняем значение колонок предложений поставщиков
		ИмяКолонки = ПолучитьИмяКолонкиПоПредложениюПоставщика(ТекСтрокаНоменклатурыПоставщиков.ПредложениеПоставщика);
		Если НЕ ЗначениеЗаполнено(ИмяКолонки) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока["Выбор_" + ИмяКолонки] = ТекСтрокаНоменклатурыПоставщиков.Поставщик;
		НоваяСтрока["Сумма_" + ИмяКолонки] = ТекСтрокаНоменклатурыПоставщиков.Сумма;
		НоваяСтрока["Количество_" + ИмяКолонки] = ТекСтрокаНоменклатурыПоставщиков.Количество;
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Лот, "МетодОценкиПредложенийПоставщиков")
			= Перечисления.МетодыОценкиПредложенийПоставщиков.ПоКритериям Тогда
			Элементы["НоменклатураПоПоставщикамГруппа"+ИмяКолонки].Заголовок = СокрЛП(ТекСтрокаНоменклатурыПоставщиков.Поставщик) +" ("+ТекСтрокаНоменклатурыПоставщиков.ИнтегральнаяОценка+")";
		КонецЕсли;
		Элементы["НоменклатураПоПоставщикамГруппа"+ИмяКолонки].Заголовок = Элементы["НоменклатураПоПоставщикамГруппа"+ИмяКолонки].Заголовок +", " +	ТекСтрокаНоменклатурыПоставщиков.Партнер;
		НоваяСтрока["СуммаВыбрано_" + ИмяКолонки] = ТекСтрокаНоменклатурыПоставщиков.Сумма;
		
		НоваяСтрока["Мин_" + ИмяКолонки] = 0;
		НоваяСтрока["СтавкаНДС_" + ИмяКолонки] = 
			"(" + ТекстСтавкиНДС(ТекСтрокаНоменклатурыПоставщиков.СтавкаНДС) + ")";
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Лот, "ВидЗакупки") = Перечисления.ВидЛотовойЗакупки.Зонтичная 
			И ТекСтрокаНоменклатурыПоставщиков.МестоПобедителя <> 0 Тогда
			НоваяСтрока["Выбор_" + ИмяКолонки] = Истина;
			НоваяСтрока.НоменклатураРаспределена = Ложь;
			НоваяСтрока["КоличествоПоПобедителю_" + ИмяКолонки] = ТекСтрокаНоменклатурыПоставщиков.КоличествоПоПобедителю;
			НоваяСтрока["МестоПоПобедителю_"+ ИмяКолонки] = ТекСтрокаНоменклатурыПоставщиков.МестоПобедителя;
			Элементы.Переместить(Элементы["НоменклатураПоПоставщикамНоменклатураПоставщика_" + ИмяКолонки],элементы["НоменклатураПоПоставщикамГруппаНомПоставщика"+ИмяКолонки]);	
			
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПоСтранамКорпоративныеЗакупки") Тогда
		НоваяСтрока["СтранаПроисхождения_" + ИмяКолонки] = ТекСтрокаНоменклатурыПоставщиков.СтраныПроисхождения;
		НоваяСтрока["СтранаПроизводителя_" + ИмяКолонки] = ТекСтрокаНоменклатурыПоставщиков.СтранаПроизводителя;
		КонецЕсли;

		НоваяСтрока["НоменклатураПоставщика_" + ИмяКолонки] = ТекСтрокаНоменклатурыПоставщиков.НоменклатураПоставщика;
		Элементы["НоменклатураПоПоставщикамНоменклатураПоставщика_"+ИмяКолонки].Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщика");
	КонецЦикла;
	Элементы.Переместить(Элементы["НоменклатураПоПоставщикамКолонкаТерминатор"],Элементы["НоменклатураПоПоставщикам"]);	
	Элементы.НоменклатураПоПоставщикамКолонкаТерминатор.ФиксацияВТаблице = ФиксацияВТаблице.Право;
	ТаблицаНомеклатурыПоставщиков.Свернуть("ПредложениеПоставщика");
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Лот, "ВидЗакупки") = Перечисления.ВидЛотовойЗакупки.Зонтичная Тогда
		Элементы.НоменклатураПоПоставщикам.ТолькоПросмотр = Истина;
	КонецЕсли;	
	
	Для Каждого СтрокаНоменклатуры Из НоменклатураПоПоставщикам Цикл
		Для Каждого  ТекСтрокаНоменклатурыПоставщиков из ТаблицаНомеклатурыПоставщиков Цикл
			ИмяКолонки=ПолучитьИмяКолонкиПоПредложениюПоставщика(ТекСтрокаНоменклатурыПоставщиков.ПредложениеПоставщика);
			Если СтрокаНоменклатуры["Сумма_"+ИмяКолонки]=0 Тогда
				Элемент=УсловноеОформление.Элементы.Добавить();
				ПолеЭлемента=Элемент.Поля.Элементы.Добавить();
				ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["НоменклатураПоПоставщикамГруппа"+ИмяКолонки].ПодчиненныеЭлементы["НоменклатураПоПоставщикамВыбор_"+ИмяКолонки].Имя);
				
				ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы["НоменклатураПоПоставщикамГруппа"+ИмяКолонки].ПодчиненныеЭлементы["НоменклатураПоПоставщикамСуммаВыбрано_"+ИмяКолонки].путькданным);
				ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемента.ПравоеЗначение = "0";	
				Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",WebЦвета.СеребристоСерый);
				
				Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;	
	
	Для Каждого СтрокаЭлементов Из Элементы.НоменклатураПоПоставщикам.ПодчиненныеЭлементы  Цикл
		
	КонецЦикла;	
	

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьХарактеристикиИспользуются(СтрокаКроссТаблицы)
	СтрокаКроссТаблицы.ХарактеристикиИспользуются =
		УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.ХарактеристикиИспользуются(
			СтрокаКроссТаблицы.Номенклатура);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстСтавкиНДС(СтавкаНДС)
	РезультатФункции = "";
	Если (ЗначениеЗаполнено(СтавкаНДС)) И (СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС) Тогда
		РезультатФункции = НСтр("ru = 'НДС ""%СтавкаНДС%'");
		РезультатФункции = СтрЗаменить(РезультатФункции, "%СтавкаНДС%", Строка(СтавкаНДС));
	Иначе
		РезультатФункции =  НСтр("ru = 'Без НДС'");
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьВсеИтоговыеПоказателиФормы(Форма)

	НоменклатураПоПоставщикам = Форма.НоменклатураПоПоставщикам;
	АктивныеПредложенияПоставщиков = Форма.ПредложенияПоставщиков.НайтиСтроки(Новый Структура("Активная", Истина));
	
	Для каждого СтрокаТЧ Из НоменклатураПоПоставщикам Цикл
		ИмяКолонкиМин = "";
		МинСумма = Неопределено;
		Для каждого Строка_ Из АктивныеПредложенияПоставщиков Цикл
			Сумма_ = СтрокаТЧ["Сумма_" + Строка_.ИмяКолонки];
			
			Если (МинСумма = Неопределено ИЛИ Сумма_ < МинСумма) и сумма_>0 Тогда
				МинСумма = Сумма_;
				ИмяКолонкиМин = Строка_.ИмяКолонки;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(ИмяКолонкиМин) Тогда
			СтрокаТЧ["Мин_" + ИмяКолонкиМин] = 1;
		КонецЕсли;		
	КонецЦикла;
	
	Для каждого Строка_ Из АктивныеПредложенияПоставщиков Цикл
		РассчитатьИтогПоВыбраннымВКолонке(Форма, Строка_.ИмяКолонки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогПоВыбраннымВКолонке(Форма, ИмяКолонки)
	НоменклатураПоПоставщикам = Форма.НоменклатураПоПоставщикам;
	ИмяПоляВыбрано = "Выбор_" + ИмяКолонки;
	ИмяПоляСумма = "Сумма_" + ИмяКолонки;
	ИмяПоляСуммаВыбрано = "СуммаВыбрано_" + ИмяКолонки;
	ИмяИтоговогоПоля = "НоменклатураПоПоставщикам" + ИмяПоляСуммаВыбрано;
	
	ИтогоСуммаПоКолонке = НоменклатураПоПоставщикам.Итог(ИмяПоляСумма);
	ИтогоСуммаПоВыбранным = 0;
	Для каждого СтрокаТЧ Из НоменклатураПоПоставщикам Цикл
		Если СтрокаТЧ[ИмяПоляВыбрано] Тогда
			ИтогоСуммаПоВыбранным = ИтогоСуммаПоВыбранным + СтрокаТЧ[ИмяПоляСумма];
		КонецЕсли;
	КонецЦикла;
	
	Форма["НоменклатураПоПоставщикамСумма_" + ИмяКолонки] = ИтогоСуммаПоКолонке;
	Форма[ИмяИтоговогоПоля] = Строка(ИтогоСуммаПоКолонке) + Символы.ПС + Формат(ИтогоСуммаПоВыбранным, "ЧН=-");
КонецПроцедуры

&НаСервере
Функция ПоместитьРезультатыРаботыВоВременноеХранилище()
	ТаблицаПобедителей = ПолучитьИтоговуюТаблицуВыбранныхПоставщиков();

	Возврат ПоместитьВоВременноеХранилище(ТаблицаПобедителей, УникальныйИдентификатор);
КонецФункции

&НаСервере
Функция ПолучитьИтоговуюТаблицуВыбранныхПоставщиков()

	Результат = Объект.РаспределениеПоПотребностям.Выгрузить();
	Результат.Очистить();
	
	СтруктураПоиска = Новый Структура("Номенклатура,Организация,ДоговорСПокупателем,Менеджер,МестоПоставки,Приоритет,Проект,Поставщик,ПредложениеПоставщика");
	Для Каждого ТекСтрокаРаспределения Из  НоменклатураПоПоставщикам Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекСтрокаРаспределения);
		Для Каждого ТекСтрокаПоставщик Из ПредложенияПоставщиков Цикл
			Если ТекСтрокаРаспределения["Выбор_" + ТекСтрокаПоставщик.ИмяКолонки] = Истина Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекСтрокаПоставщик, "Поставщик,ПредложениеПоставщика");
				
				ПодходящиеСтрокиПотребности = Объект.РаспределениеПоПотребностям.НайтиСтроки(СтруктураПоиска);
				Для Каждого ТекПодходящаяСтрокаПотребности Из ПодходящиеСтрокиПотребности Цикл
					ЗаполнитьЗначенияСвойств(Результат.Добавить(), ТекПодходящаяСтрокаПотребности);

				КонецЦикла; 				
				//прервать    
				

			КонецЕсли;
		КонецЦикла;
		

		
	КонецЦикла;
	Возврат Результат;
	
КонецФункции // ПолучитьИтоговуюТаблицуВыбранныхПоставщиков()

&НаСервере
Процедура УстановитьОформлениеФормы()
	флЛотВыбран = ЗначениеЗаполнено(Лот);
	Элементы.ГруппаНазначениеПоставщиков.Видимость = флЛотВыбран;
	Элементы.Лот.ТолькоПросмотр = ОткрытИзФормы;
	Элементы.НоменклатураПоПоставщикамВыбратьМинимальныеЦены.Видимость =
		 Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Лот, "ВидЗакупки") = Перечисления.ВидЛотовойЗакупки.ЛотоваяЗакупка;
	Элементы.НоменклатураПоПоставщикамВыбратьПоПредложениюСМинимальнойОбщейСуммой.Видимость =
		 ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Лот, "ВидЗакупки") = Перечисления.ВидЛотовойЗакупки.ЛотоваяЗакупка;
	Элементы.ДекорацияЗапрещенаЧастичнаяПоставка.Видимость = 
		 Не РазрешенаЧастичнаяПоставка;
КонецПроцедуры
&НаСервере
Функция ФЗ223()
	Возврат Лот.ОрганизацияДляЗаключенияДоговора.ЗакупкаПоФЗ223;	
КонецФункции
// Снимаем галочки выбора со всех предложений в строке
// ТЗ НоменклатураПоПоставщикам.
// Устанавливаем выбор по переданному предложению поставщика.
// Устанавливаем значение поставщика в поле "Поставщик".
// Рассчитываем сумму итого 
&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьВыборПредложенияПоставщикаПоСтроке(
			Форма, СтрокаНоменклатурыПоПоставщикам, КодКолонки,РазрешенаЧастичнаяПоставка=Неопределено,ФЗ223 = Неопределено)
	// Ищем и сбрасываем выбранные значения по строке
	РазрешенаЧастичнаяПоставка=?(РазрешенаЧастичнаяПоставка=Неопределено,Ложь,Истина);
	мКодыКолонокДляОтменыВыбора =
	НайтиВыбранныеКолонкиПредолженийПоставщиков(
	СтрокаНоменклатурыПоПоставщикам, Форма.ПредложенияПоставщиков);
	Если ФЗ223 = Неопределено Тогда ФЗ223 = Ложь; КонецЕсли;
	Если НЕ РазрешенаЧастичнаяПоставка Или ФЗ223 Тогда
		Для Каждого КодКолонкиДляОтменыВыбора Из мКодыКолонокДляОтменыВыбора Цикл
			Если КодКолонкиДляОтменыВыбора <> КодКолонки Тогда
				ИзменитьЗначениеВыбораПредложенияПоставщика(
				Форма,
				СтрокаНоменклатурыПоПоставщикам,
				КодКолонкиДляОтменыВыбора,
				Ложь);
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	мКодыКолонокДляОтменыВыбора =
	НайтиВыбранныеКолонкиПредолженийПоставщиков(
	СтрокаНоменклатурыПоПоставщикам, Форма.ПредложенияПоставщиков);	
	Если мКодыКолонокДляОтменыВыбора.Количество()>1 ИЛИ мКодыКолонокДляОтменыВыбора.Количество()=0 
		Тогда
		СтрокаНоменклатурыПоПоставщикам.НоменклатураРаспределена=Ложь;
	ИначеЕсли мКодыКолонокДляОтменыВыбора.Количество() = 1 Тогда 
		СтрокаНоменклатурыПоПоставщикам.НоменклатураРаспределена=Истина;
	КонецЕсли;

	// Обрабатываем выбор поставщика в ячейке		
	Выбор = СтрокаНоменклатурыПоПоставщикам["Выбор_"+КодКолонки];
	ИзменитьЗначениеВыбораПредложенияПоставщика(
	Форма, СтрокаНоменклатурыПоПоставщикам, КодКолонки, Выбор);

КонецПроцедуры
	
// Изменяем значение в одной ячейке.
// Пересчитываем итог выбранных по колонке.
// Изменяем выбранного поставщика по строке.
&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьЗначениеВыбораПредложенияПоставщика(
												Форма, 
												СтрокаНоменклатурыПоПоставщикам, 
												КодКолонки, 
												НовоеЗначение)
	СтрокаНоменклатурыПоПоставщикам["Выбор_"+КодКолонки] = НовоеЗначение;
	Если НовоеЗначение Тогда
		СтрокаВыбранногоПредложения =
			ПолучитьСтрокуПредложенияПоставщикаПоКоду(
				Форма.ПредложенияПоставщиков,
				КодКолонки);
		СтрокаНоменклатурыПоПоставщикам.Поставщик = СтрокаВыбранногоПредложения.Поставщик;
	Иначе
		СтрокаНоменклатурыПоПоставщикам.Поставщик = Неопределено;
	КонецЕсли;
	РассчитатьИтогПоВыбраннымВКолонке(Форма, КодКолонки);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиВыбранныеКолонкиПредолженийПоставщиков(
									СтрокаНоменклатурыПоПоставщикам,
									ПредложенияПоставщиков)
	мКодыВыбранныхКолонок = Новый Массив;
	АктивныеПредложенияПоставщиков =
		ПредложенияПоставщиков.НайтиСтроки(
			Новый Структура("Активная", Истина));
	Для каждого Строка_ Из АктивныеПредложенияПоставщиков Цикл
		Если СтрокаНоменклатурыПоПоставщикам["Выбор_"+Строка_.ИмяКолонки] = Истина Тогда
			мКодыВыбранныхКолонок.Добавить(Строка_.ИмяКолонки);
		КонецЕсли;
	КонецЦикла;
	Возврат мКодыВыбранныхКолонок;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтрокуПредложенияПоставщикаПоКоду(ПредложенияПоставщиков, КодКолонки)
	мВыбранноеПредложение = ПредложенияПоставщиков.НайтиСтроки(
								Новый Структура("ИмяКолонки", КодКолонки));
	Если мВыбранноеПредложение.Количество() > 0 Тогда
		Возврат мВыбранноеПредложение[0];
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СброситьВесьВыборТаблицы(Форма)
	НоменклатураПоПоставщикам = Форма.НоменклатураПоПоставщикам;
	ПредложенияПоставщиков = Форма.ПредложенияПоставщиков;
	АктивныеПредложенияПоставщиков = ПредложенияПоставщиков.НайтиСтроки(Новый Структура("Активная", Истина));
	
	Для Каждого СтрокаНоменклатурыПоПоставщикам Из НоменклатураПоПоставщикам Цикл
		СтрокаНоменклатурыПоПоставщикам.Поставщик = Неопределено;
		Для каждого СтрокаПредложения Из АктивныеПредложенияПоставщиков Цикл
			СтрокаНоменклатурыПоПоставщикам["Выбор_"+СтрокаПредложения.ИмяКолонки] = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого СтрокаПредложения Из АктивныеПредложенияПоставщиков Цикл
		РассчитатьИтогПоВыбраннымВКолонке(Форма, СтрокаПредложения.ИмяКолонки);
	КонецЦикла;
КонецПроцедуры

// Устанавливает флаг "Выбран" для колонки с кодом поставщика "КодКолонки" во всех ее ячейках.
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВыборПоКолонкеПредложенияПоставщика(Форма, КодКолонки)
	НоменклатураПоПоставщикам = Форма.НоменклатураПоПоставщикам;
	ПредложенияПоставщиков = Форма.ПредложенияПоставщиков;
	
	ЯчейкиДляУстановки = Новый Массив;
	Для Каждого Строка_ Из НоменклатураПоПоставщикам Цикл
		ЯчейкиДляУстановки = ДобавитьЯчейкуВМассив(ЯчейкиДляУстановки, Строка_, КодКолонки);
	КонецЦикла;
	
	УстановитьВыборПоМассивуЯчеек(Форма, ЯчейкиДляУстановки);
КонецПроцедуры

// Устанавливает выбор для колонки с наименьшей итоговой суммой
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВыборПоПредолжениюСМинСуммой(Форма)
	

	МинСтрокаПоставщика = НайтиСтрокуПредложенияПоствщикаСМинимальнойСуммой(Форма.ПредложенияПоставщиков,Форма.ВсеТоварыПоставляютсяПоставщиком);
	
	Если МинСтрокаПоставщика = Неопределено Тогда
		
		Возврат;
	КонецЕсли;
	
	УстановитьВыборПоКолонкеПредложенияПоставщика(Форма, МинСтрокаПоставщика.ИмяКолонки);
КонецПроцедуры

// Устанавливает выбор для ячеек с минимальным по строке значением реквизита "Сумма"
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВыборМинимальныхСуммВТаблице(Форма)
	ЯчейкиСМинСуммой = ПолучитьЯчейкиСтрокСМинСуммой(Форма);
	УстановитьВыборПоМассивуЯчеек(Форма, ЯчейкиСМинСуммой);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЯчейкиСтрокСМинСуммой(Форма)
	НоменклатураПоПоставщикам = Форма.НоменклатураПоПоставщикам;
	АктивныеПредложенияПоставщиков = Форма.ПредложенияПоставщиков.НайтиСтроки(Новый Структура("Активная", Истина));
	
	ЯчейкиДляУстановки = Новый Массив;
	Для Каждого СтрокаСоответствия Из НоменклатураПоПоставщикам Цикл
		Для каждого СтрокаПредложения Из АктивныеПредложенияПоставщиков Цикл
			КодПредложения = СтрокаПредложения.ИмяКолонки;
			Если СтрокаСоответствия["Мин_"+КодПредложения] = 1 Тогда
				ЯчейкиДляУстановки = ДобавитьЯчейкуВМассив(ЯчейкиДляУстановки, СтрокаСоответствия, КодПредложения);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ЯчейкиДляУстановки;
КонецФункции

// Возвращает:
//	Строка таблицы ПредолженияПоставщиков с минимальным значением колонки "Сумма".
//	Неопределено - строк в таблице нет.
&НаКлиентеНаСервереБезКонтекста
Функция НайтиСтрокуПредложенияПоствщикаСМинимальнойСуммой(ПредложенияПоставщиков,ВсеТоварыПоставляютсяПоставщиком)
	МинСумма = Неопределено;
	МинСтрока = Неопределено;
	АктивныеПредложенияПоставщиков = ПредложенияПоставщиков.НайтиСтроки(Новый Структура("Активная", Истина));
	Для каждого Строка_ Из АктивныеПредложенияПоставщиков Цикл
		Если (МинСумма = Неопределено ИЛИ Строка_.Сумма < МинСумма) И Строка_.Сумма > 0 
			И НЕ ВсеТоварыПоставляютсяПоставщиком.НайтиПоЗначению(Строка_.Поставщик)=Неопределено   Тогда
			МинСумма = Строка_.Сумма;
			МинСтрока = Строка_;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МинСтрока;
КонецФункции

// Устанавливает флаг "Выбран" для каждой ячейки из массива ЯчейкиДляУстановки.
// Каждая ячейка адресуется строкой "СтрокаТаблицы" и колонкой "КодКолонки".
// Обновляет итоговую сумму "ИтогВыбрано".
// Параметры:
//	Форма - Форма обработки.
//	ЯчейкиДляУстановки - Массив(Структура("СтрокаТаблицы, КодКолонки")).
//	ЗначениеФлагаВыбора - Булево. Устанавливаемое значение поля "Выбор".
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВыборПоМассивуЯчеек(Форма, ЯчейкиДляУстановки, ЗначениеФлагаВыбора=Истина)
	НоменклатураПоПоставщикам = Форма.НоменклатураПоПоставщикам;
	Для Каждого Пара Из ЯчейкиДляУстановки Цикл
			Если Пара.СтрокаТаблицы["Сумма_"+Пара.КодКолонки] > 0 Тогда
				Пара.СтрокаТаблицы["Выбор_"+Пара.КодКолонки] = ЗначениеФлагаВыбора;
			КонецЕсли;
			ОбработатьВыборПредложенияПоставщикаПоСтроке(Форма, Пара.СтрокаТаблицы, Пара.КодКолонки);
	КонецЦикла;
КонецПроцедуры

// Добавить пару (СтрокаТаблицы, КодКолонки) в массив ячеек.
// Возвращает массив с добавленной парой.
&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьЯчейкуВМассив(ЯчейкиДляУстановки, СтрокаТаблицы, КодКолонки)
	
	Если ЯчейкиДляУстановки = Неопределено Тогда
		ЯчейкиДляУстановки = Новый Массив;
	КонецЕсли;
	ЯчейкиДляУстановки.Добавить(Новый Структура("СтрокаТаблицы, КодКолонки", СтрокаТаблицы, КодКолонки));
	Возврат ЯчейкиДляУстановки;
	
КонецФункции

// Проверить, что пользователь сделал выбор в каждой строке таблицы НоменклатураПоПоставщикам.
// Возвращает:
//	Массив - строки таблицы НоменклатураПоПоставщикам в которых не сделан выбор поставщика.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтрокиНоменклатурыБезПоставщика(Форма)
	
	НоменклатураПоПоставщикам = Форма.НоменклатураПоПоставщикам;
	ПредложенияПоставщиков = Форма.ПредложенияПоставщиков;
	мНезаполненныеСтроки = Новый Массив;
	
	Для каждого СтрокаТЧ Из НоменклатураПоПоставщикам Цикл
		мВыбранныеКолонки = НайтиВыбранныеКолонкиПредолженийПоставщиков(СтрокаТЧ, ПредложенияПоставщиков);
		Если мВыбранныеКолонки.Количество() = 0 Тогда
			мНезаполненныеСтроки.Добавить(СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат мНезаполненныеСтроки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяКолонкиПоПредложениюПоставщика(ПредложениеПоставщика)
	
	Возврат СтрЗаменить(Строка(ПредложениеПоставщика.УникальныйИдентификатор()),"-","_");
	
КонецФункции

&НаКлиенте
Процедура НоменклатураПоПоставщикамПриАктивизацииСтроки(Элемент)
	УстановитьДоступностьРаспределения();
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьДоступностьРаспределения()
	СтрокаАктивации= Элементы.НоменклатураПоПоставщикам.ТекущиеДанные;
	
	мКодыКолонокДляОтменыВыбора =НайтиВыбранныеКолонкиПредолженийПоставщиков(СтрокаАктивации, ЭтаФорма.ПредложенияПоставщиков);	
	
	Если мКодыКолонокДляОтменыВыбора.Количество() > 1 Тогда
		Элементы.НоменклатураПоПоставщикамРаспределитьНоменклатуруПоПоставщикам.Доступность=Не СтрокаАктивации.НоменклатураРаспределена;
	ИначеЕсли мКодыКолонокДляОтменыВыбора.Количество() <= 1 Тогда 
		Элементы.НоменклатураПоПоставщикамРаспределитьНоменклатуруПоПоставщикам.Доступность=Ложь;
	КонецЕсли;
	
	Элементы.НоменклатураПоПоставщикамРаспределитьНоменклатуруПоПоставщикам.ЦветФона = 
	?(Элементы.НоменклатураПоПоставщикамРаспределитьНоменклатуруПоПоставщикам.Доступность = Истина,WebЦвета.ТусклоРозовый,Новый Цвет(255,255,255));
КонецПроцедуры


&НаКлиенте
Процедура РаспределитьНоменклатуруПоПоставщикам(Команда)
    	АдресРезультата= ПоместитьРезультатыРаботыРаспределения(Элементы.НоменклатураПоПоставщикам.ТекущиеДанные.Номенклатура);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Лот", Лот);
		ПараметрыФормы.Вставить("Номенклатура",Элементы.НоменклатураПоПоставщикам.текущиеданные.номенклатура);
		ПараметрыФормы.Вставить("АдресРезультата",АдресРезультата );
		ПараметрыФормы.Вставить("ОткрытИзФормы", Истина);
		ОткрытьФорму("Обработка.НазначениеПоставщиковНоменклатуреЛота.Форма.ФормаРаспределенияНоменклатурыПоставщиков", 
			ПараметрыФормы,	ЭтаФорма, , , ,	, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

		

&НаСервере
Функция ПоместитьРезультатыРаботыРаспределения(Номенклатура)
	ТаблицаПобедителей = ПолучитьИтоговуюТаблицуВыбранныхПоставщиков();   
	ТаблицаПобедителей = ТаблицаПобедителей.скопировать(новый структура("Номенклатура",Номенклатура));
	Возврат ПоместитьВоВременноеХранилище(ТаблицаПобедителей, УникальныйИдентификатор);
КонецФункции


&НаСервере
Процедура ИзмениласьТаблицаПобедителей(АдресРезультата)
	ТаблицаПобедителей = ПолучитьИзВременногоХранилища(АдресРезультата);
	Для Каждого Строки из ТаблицаПобедителей Цикл
		Для Каждого СтрокаПотребностей Из Объект.РаспределениеПоПотребностям Цикл
			Если СтрокаПотребностей.ПредложениеПоставщика=Строки.ПредложениеПоставщика
				и СтрокаПотребностей.Номенклатура=Строки.Номенклатура 
				и СтрокаПотребностей.ПериодПотребности=Строки.ПериодПотребности Тогда
				СтрокаПотребностей.Количество = Строки.Количество;
				СтрокаПотребностей.СуммаНДС=Строки.СуммаНДС;
				СтрокаПотребностей.СуммаСНДС=Строки.СуммаСНДС;
				СтрокаПотребностей.Сумма=Строки.Сумма;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
	ПоляГруппировки = "Номенклатура,Характеристика,Организация,ДоговорСПокупателем,Менеджер,МестоПоставки,Приоритет,Проект";
	
	ТаблицаНомеклатурыПоставщиков = Объект.РаспределениеПоПотребностям.Выгрузить();
	ТаблицаНомеклатурыПоставщиков.Свернуть(ПоляГруппировки + ",ПредложениеПоставщика,Поставщик,СтавкаНДС","Сумма,Количество");
	ТаблицаНомеклатурыПоставщиков.Сортировать(ПоляГруппировки);
	
	// продолжаем заполнение полей периода пока не изменится хотя бы одно значение поля группировки.
	ЗначенияПолейГруппировки = Новый Структура(ПоляГруппировки);
	ТаблицаПобедителей.Свернуть("ПредложениеПоставщика,Номенклатура","Количество,Сумма,СуммаСНДС,Суммандс");
	Для Каждого СтрокаВозврата из  ТаблицаПобедителей  Цикл
		Для Каждого ТекСтрокаНоменклатурыПоставщиков ИЗ НоменклатураПоПоставщикам Цикл
			ИмяКолонки = ПолучитьИмяКолонкиПоПредложениюПоставщика(строкаВозврата.ПредложениеПоставщика);
			Если НЕ ЗначениеЗаполнено(ИмяКолонки) Тогда
				Продолжить;
			КонецЕсли;
			Если ТекСтрокаНоменклатурыПоставщиков.Номенклатура = СтрокаВозврата.Номенклатура Тогда
				ТекСтрокаНоменклатурыПоставщиков.НоменклатураРаспределена = Истина;
				ТекСтрокаНоменклатурыПоставщиков["Количество_"+ИмяКолонки]=строкаВозврата.Количество;
				ТекСтрокаНоменклатурыПоставщиков["Сумма_" + ИмяКолонки] = строкаВозврата.Сумма;
				ТекСтрокаНоменклатурыПоставщиков["СуммаВыбрано_" + ИмяКолонки] = строкаВозврата.Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры	


	
#КонецОбласти
