
Функция ПолучитьДанныеДляРасшифровкиКонсолидация(ОбъектРасчета,СпособФормированияОтчета,Знач Пок, Знач СтруктураОтбора)
	
	РабочийОбъект=ОбщегоНазначенияУХ.ПолучитьРабочийОбъект(ОбъектРасчета);
	РабочийОбъект.СпособФормированияОтчета=СпособФормированияОтчета;
	
	мМассивПоказателей=Новый Массив;
	мМассивПоказателей.Добавить(Пок.Ссылка);
	
	ТабличныйДокумент=РабочийОбъект.ВернутьТабличныйДокументРасшифровки(Истина,СтруктураОтбора, мМассивПоказателей);
	
	Возврат Новый Структура("ТекстОшибки,ТабДокумент,МассивРасшифровок", "", ТабличныйДокумент, Новый Массив);	
	
КонецФункции // ПолучитьДанныеДляРасшифровкиКонсолидация()

Функция ПолучитьЗначениеПоказателя(ОбъектРасчета,СтрПоказатель,СтруктураОтбора)
	
	Если СтруктураОтбора=Неопределено Тогда
	
		Возврат СтрПоказатель.Значение;
		
	Иначе
		
		СтруктураПоиска=ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(СтруктураОтбора);
		СтруктураПоиска.Вставить("Показатель",СтрПоказатель.Ссылка);
		МассивРаскрытие=ОбъектРасчета.мПоказателиРаскрытия.НайтиСтроки(СтруктураПоиска);	
		Возврат ?(МассивРаскрытие.Количество()=0,0,МассивРаскрытие[0].Значение);
		
	КонецЕсли;
	
КонецФункции //

Функция ОбработатьРасшифровкуАналитикПоказателяПоПравилуОбработки(ОбъектРасчета,Знач Пок, Знач СтруктураОтбора) Экспорт
	
	Перем РабОперанды;
	Перем РабЗначенияОперандов;
	Перем ИдентификаторСеанса;
	
	ОбъектРасчета.Свойство("ИдентификаторСеанса",ИдентификаторСеанса);
	
	ПараметрыРасчета=Новый Структура("СпособФормированияОтчета,ПравилоОбработки,ИспользуемаяИБ");
		
	Если НЕ ОбъектРасчета.Свойство("ЗаполнениеВыполнено") Тогда
		 ОбъектРасчета.Вставить("ЗаполнениеВыполнено",Ложь);
	КонецЕсли;	
	
	Если ОбъектРасчета.ЗаполнениеВыполнено ИЛИ НЕ ОбъектРасчета.мТабПоказателиЗапросы=Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ПараметрыРасчета,ОбъектРасчета);
		
	Иначе
		
		ПараметрыРасчета=УправлениеОтчетамиУХ.ПолучитьПараметрыРасчетаПоказателя(ОбъектРасчета,Пок.Ссылка);
		
	КонецЕсли;
	
	Если ПараметрыРасчета.СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.АвтоматическиКонсолидация
		ИЛИ ПараметрыРасчета.СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.АвтоматическиСвернувПоАналитикам
		ИЛИ ПараметрыРасчета.СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.АвтоматическиСвернувПоПроектам
		ИЛИ ПараметрыРасчета.СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.АвтоматическиСвернувПоОрганизациямПроекта
		ИЛИ ПараметрыРасчета.СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.АвтоматическиСвернувПоПериоду
		ИЛИ ПараметрыРасчета.СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.АвтоматическиЭлиминация Тогда
		
		Возврат ПолучитьДанныеДляРасшифровкиКонсолидация(ОбъектРасчета,ПараметрыРасчета.СпособФормированияОтчета,Пок,СтруктураОтбора);
		
	КонецЕсли;	
		
	Если ОбъектРасчета.ЕдиницаИзмеренияОтображения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		Делитель = 1000000;
		ФорматнаяСтрока = "ЧЦ=12";
	ИначеЕсли ОбъектРасчета.ЕдиницаИзмеренияОтображения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		Делитель = 1000;
		ФорматнаяСтрока = "ЧЦ=15";
	Иначе
		Делитель = 1;
		ФорматнаяСтрока = "ЧЦ=18";
	КонецЕсли;
	
	ФорматнаяСтрока = ФорматнаяСтрока + ";ЧДЦ=" + ОбъектРасчета.УровеньТочности;
		
	СтрПоказатель=ОбъектРасчета.мСоответствиеДляПоискаПоСсылке[Пок.Ссылка];
	НеМасштабируется = СтрПоказатель.НеМасштабируется;
	
	ЗначениеПоказателяНач=ПолучитьЗначениеПоказателя(ОбъектРасчета,СтрПоказатель,СтруктураОтбора);
	
	ДанныеРасчетаПоказателя=Неопределено;
	
	ТекПоказатель             = СтрПоказатель.Ссылка;
	ТекПоказательНаименование = СтрПоказатель.Наименование;
	ТекКодПоказателя          = СтрПоказатель.Код;
		
	Если ЗначениеЗаполнено(ПараметрыРасчета.ПравилоОбработки) Тогда
		
		ОбъектРасчета.Вставить("ПравилоОбработки",	ПараметрыРасчета.ПравилоОбработки);
		ОбъектРасчета.Вставить("ИспользуемаяИБ",	ПараметрыРасчета.ИспользуемаяИБ);
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Получим текст формулы показателя
	
	ТаблицаФормулы=УправлениеОтчетамиУХ.ПолучитьФормулыРасчета(ОбъектРасчета.ПравилоОбработки,СтрПоказатель.Ссылка);
	
	Если ТаблицаФормулы.Количество()=0 Тогда
		
		ТекстОшибки=СтрШаблон(Нстр("ru = 'Для показателя %1 в правиле обработки %2 не определены формулы расчета.'"), 
			СтрПоказатель.Наименование, ОбъектРасчета.ПравилоОбработки);
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
		Возврат Новый Структура("ТекстОшибки, ТабДокумент", ТекстОшибки, Новый ТабличныйДокумент);
		
	ИначеЕсли ТаблицаФормулы[0].ПроизвольныйКод Тогда
		
		ТекстОшибки=Нстр("ru = 'Показатель заполнялся на основании произвольного кода. Расшифровка невозможна.'");
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
		Возврат Новый Структура("ТекстОшибки, ТабДокумент", ТекстОшибки, Новый ТабличныйДокумент);
		
	КонецЕсли;
	
	ДанныеФормулы=ТаблицаФормулы[0];
	ТекстПроцедуры=ДанныеФормулы.Процедура;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	РеквизитыИсточниковДанныхДляФормул.КодИсточника,
	|	РеквизитыИсточниковДанныхДляФормул.КодУпрощеннойФормулы,
	|	РеквизитыИсточниковДанныхДляФормул.КодПоказательОтбор,
	|	РеквизитыИсточниковДанныхДляФормул.ПоказательТекущегоОтчета,
	|	РеквизитыИсточниковДанныхДляФормул.ЕстьНестандартныеОтборы,
	|	РеквизитыИсточниковДанныхДляФормул.ИсточникДанных,
	|	РеквизитыИсточниковДанныхДляФормул.СпособПолучения,
	|	РеквизитыИсточниковДанныхДляФормул.СпособИспользования,
	|	РеквизитыИсточниковДанныхДляФормул.ИсточникДанных.Наименование КАК Наименование,
	|	ЕСТЬNULL(РеквизитыИсточниковДанныхДляФормул.ИсточникДанных.ПоказательОтбор.Владелец, НЕОПРЕДЕЛЕНО) КАК ВидОтчета,
	|	РеквизитыИсточниковДанныхДляФормул.ИсточникДанных.ПоказательОтбор КАК ПоказательОтбор
	|ИЗ
	|	РегистрСведений.РеквизитыИсточниковДанныхДляФормул КАК РеквизитыИсточниковДанныхДляФормул
	|ГДЕ
	|	РеквизитыИсточниковДанныхДляФормул.НазначениеРасчетов = &НазначениеРасчетов
	|	И РеквизитыИсточниковДанныхДляФормул.ПотребительРасчета = &ПотребительРасчета
	|	И НЕ РеквизитыИсточниковДанныхДляФормул.ИсточникДанных.НеИспользуется";
	
	Запрос.УстановитьПараметр("НазначениеРасчетов",ОбъектРасчета.ПравилоОбработки);
	Запрос.УстановитьПараметр("ПотребительРасчета",СтрПоказатель.Ссылка);
	
	КодыНаименованияОперандов=Новый ТаблицаЗначений;
	КодыНаименованияОперандов.Колонки.Добавить("Код",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
	КодыНаименованияОперандов.Колонки.Добавить("КодУпрощеннойФормулы",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(150));
	КодыНаименованияОперандов.Колонки.Добавить("Наименование",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(150));
	
	РеквизитыОперандов=Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка ИЗ РеквизитыОперандов Цикл
		
		ТекстПроцедуры=СтрЗаменить(ТекстПроцедуры,"["+СокрЛП(Строка.КодИсточника)+"]",Строка.КодУпрощеннойФормулы);
		
		НоваяСтрока=КодыНаименованияОперандов.Добавить();
		НоваяСтрока.Код=Строка.КодИсточника;
		НоваяСтрока.Наименование=Строка.Наименование;
		НоваяСтрока.КодУпрощеннойФормулы=Строка.КодУпрощеннойФормулы;
		
	КонецЦикла;
	
	Если ТипЗнч(ОбъектРасчета.мЗначенияОперандов)=Тип("ТаблицаЗначений") Тогда
		
		ТекЗначенияОперандов=ОбъектРасчета.мЗначенияОперандов.Скопировать();
		
	КонецЕсли; 
	
	ДанныеДляРасчета=УправлениеОтчетамиУХ.ПолучитьДанныеОперандовДляРасчета(Истина,ОбъектРасчета.ПравилоОбработки,,СтрПоказатель.Ссылка,,,Ложь);
	
	ТабЗапросы=ДанныеДляРасчета.мТабПоказателиЗапросы;
	
	Если ОбъектРасчета.мСоответствиеОперандовИПоказателейОтбора=Неопределено Тогда
		
		ОбъектРасчета.мСоответствиеОперандовИПоказателейОтбора=Новый Соответствие;
		
	КонецЕсли;
	
	Для Каждого КлючИЗначение ИЗ ДанныеДляРасчета.мСоответствиеОперандовИПоказателейОтбора Цикл
		
		ОбъектРасчета.мСоответствиеОперандовИПоказателейОтбора.Вставить(КлючИЗначение.Ключ,КлючИЗначение.Значение);
		
	КонецЦикла;
	
	ОбъектРасчета.ЕстьОбращениеКВИБ=ДанныеДЛяРасчета.ЕстьОбращениеКВИБ;
	
	ТаблицаПроизводительности=Новый ТаблицаЗначений;
	ТаблицаПроизводительности.Колонки.Добавить("Показатель",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОтчетов"));
	ТаблицаПроизводительности.Колонки.Добавить("КодОперанда",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаПроизводительности.Колонки.Добавить("РасчетОперандов",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10,3));
	ТаблицаПроизводительности.Колонки.Добавить("РасчетПоказателя",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10,3));
	
	ОбъектРасчета.ДополнительныеСвойства.Вставить("ТаблицаПроизводительности",ТаблицаПроизводительности);	
	УправлениеОтчетамиУХ.ПодготовитьТаблицуЗначенийОперандов(ОбъектРасчета,ТабЗапросы);
	
	Если РеквизитыОперандов.НайтиСтроки(Новый Структура("ПоказательТекущегоОтчета,ЕстьНестандартныеОтборы",Истина,Истина)).Количество()>0 Тогда
		
		УправлениеОтчетамиУХ.ПолучитьТекущиеЗначенияОперандов(ОбъектРасчета,Пок.Ссылка);
		
	КонецЕсли;
	
	РабЗначенияОперандов=ОбъектРасчета.мЗначенияОперандов.Скопировать();
	
	РеквизитыОперандов.Колонки.Добавить("ВремяПолучения",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18));
	
	Для Каждого Строка ИЗ РеквизитыОперандов Цикл
		
		СтрВремяПолучения=ОбъектРасчета.ДополнительныеСвойства.ТаблицаПроизводительности.Найти(Строка.КодИсточника,"КодОперанда");
		
		Если НЕ СтрВремяПолучения=Неопределено Тогда
			
			Строка.ВремяПолучения=СтрВремяПолучения.РасчетОперандов;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РеквизитыОперандов.Сортировать("ВремяПолучения Убыв");
				
	//////////////////////////////////////////////////////////////////////////////////////
	
	СписокИспользуемых=Новый СписокЗначений;
	СписокИспользуемых.ЗагрузитьЗначения(ДанныеДляРасчета.мОперанды.ВыгрузитьКолонку("Код"));
	
	//

	ЗапросПоказатели=Новый Запрос;
	ЗапросПоказатели.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;	
	ЗапросПоказатели.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиДанныхДляРасчетов.ПоказательОтбор.Код КАК КодПоказателя,
	|	ИсточникиДанныхДляРасчетов.Код КАК КодОперанда,
	|	ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК ПотребительРасчета,
	|	ИсточникиДанныхДляРасчетов.ЕстьНестандартныеОтборы КАК ЕстьНестандартныеОтборы,
	|	ИсточникиДанныхДляРасчетов.ПоказательТекущегоОтчета КАК ПоказательТекущегоОтчета
	|ПОМЕСТИТЬ ИсточникиПравила
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &НазначениеРасчетов
	|	И НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления
	|	И НЕ ИсточникиДанныхДляРасчетов.НеИспользуется
	|	И ИсточникиДанныхДляРасчетов.ПотребительРасчета = &ПотребительРасчета";
	
	ЗапросПоказатели.УстановитьПараметр("НазначениеРасчетов",ОбъектРасчета.ПравилоОбработки);
	ЗапросПоказатели.УстановитьПараметр("ПотребительРасчета",СтрПоказатель.Ссылка);
	ЗапросПоказатели.Выполнить();
	
	ДанныеРасчета=УправлениеОтчетамиУХ.ПолучитьДанныеРасчетаПоказателя(СтрПоказатель.Ссылка,ЗапросПоказатели,ДанныеФормулы.Процедура);
	
	ПоказательРасчета=Новый Структура;
	ПоказательРасчета.Вставить("Код",СтрПоказатель.Код);
	ПоказательРасчета.Вставить("ПоказателиТекущегоОтчета",ДанныеРасчета.ВычисляемыйПоказатель);
	ПоказательРасчета.Вставить("Показатель",		СтрПоказатель.Ссылка);
	ПоказательРасчета.Вставить("ПроизвольныйКод",Ложь);
	ПоказательРасчета.Вставить("Процедура",			?(ДанныеРасчета.ВычисляемыйПоказатель,ДанныеФормулы.ПроцедураВычисления,ДанныеФормулы.Процедура));
	ПоказательРасчета.Вставить("СписокИспользуемых",?(ДанныеРасчета.ВычисляемыйПоказатель,ДанныеРасчета.СписокИспользуемыхТек,ДанныеРасчета.СписокИспользуемыхВсего));
	ПоказательРасчета.Вставить("СпособОбработки",	ДанныеФормулы.СпособОбработки);
	ПоказательРасчета.Вставить("ТолькоСуммирование",Ложь);
	ПоказательРасчета.Вставить("ЕстьДополненияАналитик",(НЕ (ДанныеДляРасчета.мОперанды.Колонки.Найти("ЕстьДополненияАналитик")=Неопределено ИЛИ ДанныеДляРасчета.мОперанды.Найти(Истина,"ЕстьДополненияАналитик")=Неопределено)));
	
	РабочаяТаблица = Новый ТаблицаЗначений;
	
	Для Каждого Кол Из ОбъектРасчета.мПоказателиРаскрытия.Колонки Цикл
		
		Если НЕ (Кол.Имя="Показатель" ИЛИ Кол.Имя="Значение") Тогда // Показатель один.
			
			РабочаяТаблица.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если РабочаяТаблица.Колонки.Найти("ИтогПоПоказателю") = Неопределено Тогда
		РабочаяТаблица.Колонки.Добавить("ИтогПоПоказателю",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	Иначе
		// Уже есть такая колонка.
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ОбъектРасчета,ДанныеДляРасчета);
	
	ОбъектРасчета.Вставить("мРасширеннаяДиагностикаВключена",Истина);
	
	УправлениеОтчетамиУХ.РассчитатьЗначениеПоказателя(ОбъектРасчета,ПоказательРасчета.СпособОбработки,ПоказательРасчета,РабочаяТаблица);
	
	//////////////////////////////////////////////////////////////////////////////////////
	
	Если ТипЗнч(ОбъектРасчета.мЗначенияОперандов)=Тип("ТаблицаЗначений") Тогда
		
		РабЗначенияОперандов=ОбъектРасчета.мЗначенияОперандов.Скопировать();
		
	КонецЕсли; 
	
	Если ТипЗнч(ТекЗначенияОперандов)=Тип("ТаблицаЗначений") Тогда
		
		ОбъектРасчета.мЗначенияОперандов=ТекЗначенияОперандов;
		
	КонецЕсли; 
					
	Макет            = ПолучитьМакет("МакетРасшифровки");
	
	ОбластиРасшифровки = Новый Структура;
	
	ОбластиРасшифровки.Вставить("ЗначениеПоказателя", Макет.ПолучитьОбласть("ЗначениеПоказателя"));
	ОбластиРасшифровки.Вставить("ОбщиеДанные"       , Макет.ПолучитьОбласть("ОбщиеДанные"));
	ОбластиРасшифровки.Вставить("Операнды"          , Макет.ПолучитьОбласть("Операнды"));
	ОбластиРасшифровки.Вставить("Подвал"            , Макет.ПолучитьОбласть("Подвал"));
	ОбластиРасшифровки.Вставить("Аналитики"         , Макет.ПолучитьОбласть("Аналитики"));
	ОбластиРасшифровки.Вставить("ПравилоОбработки"  , Макет.ПолучитьОбласть("ПравилоОбработки"));
	ОбластиРасшифровки.Вставить("ИспользуемаяИБ"  	, Макет.ПолучитьОбласть("ИспользуемаяИБ"));
		
	Если ТаблицаФормулы[0].ПроизвольныйКод Тогда
		
		Возврат Новый Структура("ТекстОшибки, ТабДокумент", Нстр("ru = 'Показатель заполнялся на основании произвольного кода. Расшифровка невозможна'"), Новый ТабличныйДокумент);
		
	КонецЕсли;
		
	Если СтруктураОтбора=Неопределено Тогда
		
		РабочаяТаблица=РабЗначенияОперандов.Скопировать();
		РабочаяТаблица.Свернуть("КодОперанда,ИтогПоПоказателю","Значение");
		
	Иначе	
		
		РабочаяТаблица=РабЗначенияОперандов.СкопироватьКолонки();
		
		Для Каждого СтрОперанд ИЗ ДанныеДляРасчета.мОперанды Цикл
			
			СтруктураПоиска=Новый Структура;
			СтруктураПоиска.Вставить("КодОперанда",СтрОперанд.Код);
			
			Для Каждого СтрАналитика ИЗ СтрОперанд.ТаблицаАналитик Цикл
				
				Если (НЕ СтрАналитика.ЗаполнениеПоДругимИсточникам)
					И СтруктураОтбора.Свойство(СтрАналитика.КодАналитики)
					И (НЕ СтруктураОтбора[СтрАналитика.КодАналитики]=Неопределено) Тогда
					
					СтруктураПоиска.Вставить(СтрАналитика.КодАналитики,СтруктураОтбора[СтрАналитика.КодАналитики]);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ДанныеОперанда=РабЗначенияОперандов.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаДанные ИЗ ДанныеОперанда Цикл
				
				НоваяСтрока=РабочаяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДанные);
				
			КонецЦикла;
			
		КонецЦикла;
		
		РабочаяТаблица.Свернуть("КодОперанда,ИтогПоПоказателю","Значение");
		РабочаяТаблица.ЗаполнитьЗначения(Истина,"ИтогПоПоказателю");
		
	КонецЕсли; 
	
	Если НЕ СтруктураОтбора=Неопределено Тогда
		
		// Добавим операнды, не раскрывавшиеся по аналитике
		Для Каждого СтрОперанд ИЗ РеквизитыОперандов Цикл
			
			ЕстьРаскрытиеПоАналитике=Ложь;
			
			Для Каждого СтрПравило ИЗ СтрОперанд.ИсточникДанных.ПравилаИспользованияПолейЗапроса Цикл
				
				Если СтрНайти(СтрПравило.КодАналитики,"Аналитика")>0 Тогда
					
					ЕстьРаскрытиеПоАналитике=Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ЕстьРаскрытиеПоАналитике Тогда // Операнд не раскрывался по аналитике
				
				СтруктураПоиска=Новый Структура("КодОперанда,ИтогПоПоказателю",СтрОперанд.КодИсточника,Истина);
				
				МассивРаскрытие=РабЗначенияОперандов.НайтиСтроки(СтруктураПоиска);
				
				Если МассивРаскрытие.Количество()>0 Тогда
					
					НоваяСтрока=РабочаяТаблица.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,МассивРаскрытие[0]);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	РабочаяТаблица.Сортировать("КодОперанда, ИтогПоПоказателю Убыв");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОтображатьГруппировки=Истина;
	
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ОбластьШапка"));
	
	ТабличныйДокумент.НачатьГруппуСтрок("КлючевыеРеквизиты",Ложь);
	
	ОбластьКлючевыеРеквизиты=Макет.ПолучитьОбласть("КлючевыеРеквизиты");
	ЗаполнитьЗначенияСвойств(ОбластьКлючевыеРеквизиты.Параметры,ОбъектРасчета);
	
	ТабличныйДокумент.Вывести(ОбластьКлючевыеРеквизиты);
	
	ТабличныйДокумент.ЗакончитьГруппуСтрок();
	
	ОбластиРасшифровки.ЗначениеПоказателя.Параметры.Наименование = ТекПоказательНаименование;
	ОбластиРасшифровки.ЗначениеПоказателя.Параметры.Ссылка       = ТекПоказатель;
	
	ЗначениеПоказателяТек=ПолучитьЗначениеПоказателя(ОбъектРасчета,СтрПоказатель,СтруктураОтбора);
	ОбластиРасшифровки.ЗначениеПоказателя.Параметры.Значение=ЗначениеПоказателяТек;
		
	ВремяРасчета=ОбъектРасчета.ДополнительныеСвойства.ТаблицаПроизводительности.Итог("РасчетПоказателя")+ОбъектРасчета.ДополнительныеСвойства.ТаблицаПроизводительности.Итог("РасчетОперандов");
	
	ОбластиРасшифровки.ЗначениеПоказателя.Параметры.ТекстВремяРасчета=СтрШаблон(Нстр("ru = '%1 ms'"), Формат(ВремяРасчета,"ЧДЦ=; ЧРГ=' '; ЧГ=3,0")); 
		
	ТабличныйДокумент.Вывести(ОбластиРасшифровки.ЗначениеПоказателя);
	
	ОбластиРасшифровки.ПравилоОбработки.Параметры.ПравилоОбработки=ОбъектРасчета.ПравилоОбработки;
	ТабличныйДокумент.Вывести(ОбластиРасшифровки.ПравилоОбработки);
	
	Если ЗначениеЗаполнено(ОбъектРасчета.ИспользуемаяИБ) Тогда
		
		ОбластиРасшифровки.ИспользуемаяИБ.Параметры.ИспользуемаяИБ=ОбъектРасчета.ИспользуемаяИБ;
		ТабличныйДокумент.Вывести(ОбластиРасшифровки.ИспользуемаяИБ);
		
	КонецЕсли;
	
	Если НЕ СтруктураОтбора=Неопределено Тогда
		
		Для Каждого КлючИЗначение ИЗ СтруктураОтбора Цикл
			
			ОбластиРасшифровки.Аналитики.Параметры.КодАналитики=КлючИЗначение.Ключ;
			ОбластиРасшифровки.Аналитики.Параметры.ЗначениеАналитики=КлючИЗначение.Значение;
			ОбластиРасшифровки.Аналитики.Параметры.Ссылка=КлючИЗначение.Значение;
			
			ТабличныйДокумент.Вывести(ОбластиРасшифровки.Аналитики);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбластиРасшифровки.ОбщиеДанные.Параметры.ФормулаВычисления = ТекстПроцедуры;
	ТабличныйДокумент.Вывести(ОбластиРасшифровки.ОбщиеДанные);
	
	МассивРасшифровок=Новый Массив;
	
	Для Каждого ДанныеОперанда Из РеквизитыОперандов Цикл
		
		Если ДанныеОперанда.СпособИспользования <> Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета Тогда
			Продолжить;
		КонецЕсли;
				
		ОбластиРасшифровки.Операнды.Параметры.Код                 = ДанныеОперанда.КодУпрощеннойФормулы;
		ОбластиРасшифровки.Операнды.Параметры.СпособПолучения     = ДанныеОперанда.СпособПолучения;
		ОбластиРасшифровки.Операнды.Параметры.Описание            = ДанныеОперанда.Наименование;
		
		ОбластиРасшифровки.Операнды.Параметры.ВидОтчета           =	ДанныеОперанда.ВидОтчета;	
		ОбластиРасшифровки.Операнды.Параметры.Ссылка              = ДанныеОперанда.ИсточникДанных;
		
		СтрВремяРасчета=ОбъектРасчета.ДополнительныеСвойства.ТаблицаПроизводительности.Найти(ДанныеОперанда.КодИсточника,"КодОперанда");
		
		Если НЕ СтрВремяРасчета=Неопределено Тогда
			
			ОбластиРасшифровки.Операнды.Параметры.ВремяРасчета=СтрВремяРасчета.РасчетОперандов;
			
		Иначе
			
			ОбластиРасшифровки.Операнды.Параметры.ВремяРасчета=0;
			
		КонецЕсли;
				
		Если ДанныеОперанда.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
			
			ОбластиРасшифровки.Операнды.Параметры.РасшифровкаОперанда = Новый Структура("Операнд, СтруктураОтбора", ДанныеОперанда.ИсточникДанных, УправлениеОтчетамиУХ.ПодготовитьСтруктуруОтбора(ДанныеОперанда.ИсточникДанных, СтруктураОтбора));
			
		ИначеЕсли ДанныеОперанда.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
			ИЛИ ДанныеОперанда.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
			ИЛИ ДанныеОперанда.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии
			ИЛИ ДанныеОперанда.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления Тогда
			
			ОбластиРасшифровки.Операнды.Параметры.РасшифровкаОперанда = Новый Структура("ОперандРаскрытия, СтруктураОтбора", ДанныеОперанда.ИсточникДанных, УправлениеОтчетамиУХ.ПодготовитьСтруктуруОтбора(ДанныеОперанда.ИсточникДанных, СтруктураОтбора));
			
		ИначеЕсли ДанныеОперанда.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос
			ИЛИ ДанныеОперанда.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос
			ИЛИ ДанныеОперанда.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПараметрическаяНастройка
			ИЛИ ДанныеОперанда.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов
			ИЛИ ДанныеОперанда.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр Тогда
			
			 ОбластиРасшифровки.Операнды.Параметры.РасшифровкаОперанда = Новый Структура("Операнд", ДанныеОперанда.ИсточникДанных);
			
		КонецЕсли;
		
		Если ДанныеОперанда.ПоказательТекущегоОтчета 
			И (НЕ (ЗначениеЗаполнено(ИдентификаторСеанса) ИЛИ ДанныеОперанда.ЕстьНестандартныеОтборы)) Тогда
			
			Если СтруктураОтбора=Неопределено Тогда
				
				НайденнаяСтрока=ОбъектРасчета.мСоответствиеДляПоискаПоСсылке[ДанныеОперанда.ПоказательОтбор];
				
			Иначе
				
				СтруктураРасшифровки = УправлениеОтчетамиУХ.ПодготовитьСтруктуруОтбора(ДанныеОперанда.ИсточникДанных, СтруктураОтбора);
				СтруктураРасшифровки.Вставить("Показатель", ДанныеОперанда.ПоказательОтбор);
				
				НайденныеСтроки = ОбъектРасчета.мПоказателиРаскрытия.НайтиСтроки(СтруктураРасшифровки);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					
					НайденнаяСтрока = РабочаяТаблица.Найти(СокрЛП(ДанныеОперанда.КодИсточника), "КодОперанда");
					
				Иначе
					
					НайденнаяСтрока = НайденныеСтроки[0];
						
				КонецЕсли;
								
			КонецЕсли;
			
		Иначе
			
			НайденнаяСтрока = РабочаяТаблица.Найти(СокрЛП(ДанныеОперанда.КодИсточника), "КодОперанда");
			
		КонецЕсли;	
		
		МассивРасшифровок.Добавить(ОбластиРасшифровки.Операнды.Параметры.РасшифровкаОперанда);
		
		ОбластиРасшифровки.Операнды.Параметры.Значение = ?(НайденнаяСтрока <> Неопределено, НайденнаяСтрока.Значение, Неопределено);
		
		ТабличныйДокумент.Вывести(ОбластиРасшифровки.Операнды);
		
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ОбластиРАсшифровки.Подвал);
	
	Если ОбъектРасчета.Свойство("РабочаяТаблица") И СтруктураОтбора=Неопределено Тогда
		
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ОбластьДетализация"));
		ДополнитьДетализациейРасчета(ОбъектРасчета,РеквизитыОперандов,СтрПоказатель,ТабличныйДокумент,ПоказательРасчета.ПоказателиТекущегоОтчета);
		
	КонецЕсли;
	
	Если НЕ (ЗначениеПоказателяНач=ЗначениеПоказателяТек 
			ИЛИ ОбъектРасчета.Свойство("ПериодТрансляции")
			ИЛИ ОбъектРасчета.Свойство("ДокументКорректировки")) Тогда
		
		ТекстСообщения=СтрШаблон(Нстр("ru = 'В экземпляре отчета устаревшие данные: 
		|Значение из экземпляра:%1
		|Значение, рассчитанное по правилу:%2'"), ЗначениеПоказателяНач, ЗначениеПоказателяТек);
		
		ОбластьСообщение=Макет.ПолучитьОбласть("ОбластьНеСовпадаютЗначения");
		ОбластьСообщение.Параметры.ТекстСообщения=ТекстСообщения;
		
		ТабличныйДокумент.Вывести(ОбластьСообщение);
		
	КонецЕсли;
		
	Возврат Новый Структура("ТекстОшибки,ТабДокумент,МассивРасшифровок,КодыНаименованияОперандов", "", ТабличныйДокумент, МассивРасшифровок,КодыНаименованияОперандов);
	
КонецФункции

Процедура ДополнитьДетализациейРасчета(ОбъектРасчета,РеквизитыОперандов,Пок,ТабличныйДокумент,ПоказателиТекущегоОтчета=Ложь)
	
	РабочаяТаблица=ОбъектРасчета.РабочаяТаблица;
	ЧислоАналитик=Пок.ЧислоАналитикГруппыРаскрытия;
	ГруппаРаскрытия=Пок.ГруппаРаскрытия;
	
	Макет = ПолучитьМакет("ДетализацияРасчетов");
	
	ОбластиРасшифровки = Новый Структура;
	ОбластиРасшифровки.Вставить("Заголовок", 				Макет.ПолучитьОбласть("Заголовок"));
	
	ОбластиРасшифровки.Вставить("ШапкаОтступ", 				Макет.ПолучитьОбласть("Шапка|Отступ"));
	ОбластиРасшифровки.Вставить("ШапкаАналитика", 			Макет.ПолучитьОбласть("Шапка|Аналитика"));
	ОбластиРасшифровки.Вставить("ШапкаОперанд", 			Макет.ПолучитьОбласть("Шапка|Операнд"));
	ОбластиРасшифровки.Вставить("ШапкаРезультат", 			Макет.ПолучитьОбласть("Шапка|Результат"));
	
	ОбластиРасшифровки.Вставить("СтрокаТаблицыОтступ", 		Макет.ПолучитьОбласть("СтрокаТаблицы|Отступ"));
	ОбластиРасшифровки.Вставить("СтрокаТаблицыАналитика", 	Макет.ПолучитьОбласть("СтрокаТаблицы|Аналитика"));
	ОбластиРасшифровки.Вставить("СтрокаТаблицыОперанд", 	Макет.ПолучитьОбласть("СтрокаТаблицы|Операнд"));
	ОбластиРасшифровки.Вставить("СтрокаТаблицыРезультат", 	Макет.ПолучитьОбласть("СтрокаТаблицы|Результат"));
	ОбластиРасшифровки.Вставить("СтрокаТаблицыНедоступно", 	Макет.ПолучитьОбласть("СтрокаТаблицы|Недоступно"));
	
	ОбластиРасшифровки.Вставить("ПодвалОтступ", 				Макет.ПолучитьОбласть("Подвал|Отступ"));
	ОбластиРасшифровки.Вставить("ПодвалАналитика", 			Макет.ПолучитьОбласть("Подвал|Аналитика"));
	ОбластиРасшифровки.Вставить("ПодвалОперанд", 			Макет.ПолучитьОбласть("Подвал|Операнд"));
	ОбластиРасшифровки.Вставить("ПодвалРезультат", 			Макет.ПолучитьОбласть("Подвал|Результат"));
		
	НедоступныеКолонки = Новый Массив;
	НедоступныеКолонки.Добавить(Истина);
	Для ИИ=1 ПО ЧислоАналитик цикл
		НедоступныеКолонки.Добавить(РабочаяТаблица.Колонки.Найти("Аналитика"+ИИ)=Неопределено);	
	КонецЦикла;
	
	ТабличныйДокумент.НачатьГруппуСтрок("ДетализацияРасчета",Ложь);
	
	Если ЗначениеЗаполнено(Пок.ГруппаРаскрытия) Тогда
		ОбластиРасшифровки.Заголовок.Параметры.ГруппаРаскрытия = Пок.ГруппаРаскрытия;
		ТабличныйДокумент.Вывести(ОбластиРасшифровки.Заголовок);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластиРасшифровки.ШапкаОтступ);
	Для ИИ=1 ПО ЧислоАналитик цикл
		ОбластиРасшифровки.ШапкаАналитика.Параметры.Номер 	= ИИ;
		ОбластиРасшифровки.ШапкаАналитика.Параметры.Вид 	= ГруппаРаскрытия["ВидАналитики"+ИИ];
		ТабличныйДокумент.Присоединить(ОбластиРасшифровки.ШапкаАналитика);
	КонецЦикла;
	
	Для каждого ДанныеОперанда ИЗ РеквизитыОперандов цикл
		ОбластиРасшифровки.ШапкаОперанд.Параметры.КодОперанда = ДанныеОперанда.КодУпрощеннойФормулы; 
		ТабличныйДокумент.Присоединить(ОбластиРасшифровки.ШапкаОперанд);
	КонецЦикла; 
	
	ТабличныйДокумент.Присоединить(ОбластиРасшифровки.ШапкаРезультат);
	
	//Вывод строк таблицы
	Для каждого СтрокаТаблицы из РабочаяТаблица цикл
		
		Если СтрокаТаблицы.Значение=0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластиРасшифровки.СтрокаТаблицыОтступ);
		
		Для ИИ=1 ПО ЧислоАналитик цикл
			
			Если НедоступныеКолонки[ИИ] тогда
				ТабличныйДокумент.Присоединить(ОбластиРасшифровки.СтрокаТаблицыНедоступно);
			Иначе
				ОбластиРасшифровки.СтрокаТаблицыАналитика.Параметры.Аналитика = СтрокаТаблицы["Аналитика"+ИИ];
				ТабличныйДокумент.Присоединить(ОбластиРасшифровки.СтрокаТаблицыАналитика);
			КонецЕсли; 
			
		КонецЦикла;
		
		Для каждого ДанныеОперанда ИЗ РеквизитыОперандов цикл
			ИмяКолонки = "_"+СокрЛП(?(ПоказателиТекущегоОтчета,ДанныеОперанда.КодПоказательОтбор,ДанныеОперанда.КодИсточника));
			ОбластиРасшифровки.СтрокаТаблицыОперанд.Параметры.Значение = СтрокаТаблицы[ИмяКолонки]; 
			ТабличныйДокумент.Присоединить(ОбластиРасшифровки.СтрокаТаблицыОперанд);
		КонецЦикла; 
		
		ОбластиРасшифровки.СтрокаТаблицыРезультат.Параметры.Значение = СтрокаТаблицы.Значение; 
		ТабличныйДокумент.Присоединить(ОбластиРасшифровки.СтрокаТаблицыРезультат);
		
	КонецЦикла;
	
	
	//Вывод подвала
	ТабличныйДокумент.Вывести(ОбластиРасшифровки.ПодвалОтступ);
	Для ИИ=1 ПО ЧислоАналитик цикл
		ТабличныйДокумент.Присоединить(ОбластиРасшифровки.ПодвалАналитика);
	КонецЦикла;
	
	Для каждого ДанныеОперанда ИЗ РеквизитыОперандов цикл
		ИмяКолонки = "_"+СокрЛП(?(ПоказателиТекущегоОтчета,ДанныеОперанда.КодПоказательОтбор,ДанныеОперанда.КодИсточника));
		ОбластиРасшифровки.ПодвалОперанд.Параметры.Значение = РабочаяТаблица.Итог(ИмяКолонки);
		ТабличныйДокумент.Присоединить(ОбластиРасшифровки.ПодвалОперанд);
	КонецЦикла; 
		
	ОбластиРасшифровки.ПодвалРезультат.Параметры.Значение = РабочаяТаблица.Итог("Значение"); 
	ТабличныйДокумент.Присоединить(ОбластиРасшифровки.ПодвалРезультат);
	
	ТабличныйДокумент.ЗакончитьГруппуСтрок();	
	
КонецПроцедуры // ДополнитьДетализациейРасчета()