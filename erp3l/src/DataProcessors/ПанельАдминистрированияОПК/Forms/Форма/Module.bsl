
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьЗаявкиНаКорректировкуЛимитов = Константы.ИспользоватьЗаявкиНаКорректировкуЛимитов.Получить();
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Ошибки = неопределено;
	
	////
	//Для каждого СтрокаНастроек Из ПараметрыОперативногоПланирования Цикл
	//	
	//	Если НЕ ЗначениеЗаполнено(СтрокаНастроек.ПериодичностьОперативногоПланирования) Тогда
	//		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
	//			Ошибки,
	//			"ПараметрыОперативногоПланирования[%1].ПериодичностьОперативногоПланирования",
	//			НСтр("ru = 'Не заполнена периодичность оперативного планирования!'"),
	//			"НеУказанаПериодичностьОперПланирования",
	//			ПараметрыОперативногоПланирования.Индекс(СтрокаНастроек),
	//			НСтр("ru = 'В строке %1 не заполнена колонка ""Периодичность оперативного планирования""!'"),
	//			);
	//	ИначеЕсли ОбщегоНазначенияСерверУХ.СравнитьПериодичность(
	//			СтрокаНастроек.ПериодичностьОперативногоПланирования, СтрокаНастроек.ПериодичностьЛимитирования) Тогда
	//		
	//		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
	//			Ошибки,
	//			"ПараметрыОперативногоПланирования[%1].ПериодичностьОперативногоПланирования",
	//			НСтр("ru = 'Периодичность оперативного планирования не может быть шире, чем периодичность лимитирования!'"),
	//			"ПериодичностьОперПланированияШиреЧемПериодичностьЛимитирования",
	//			ПараметрыОперативногоПланирования.Индекс(СтрокаНастроек),
	//			НСтр("ru = 'В строке %1 периодичность оперативного планирования не может быть шире, чем периодичность лимитирования!'"),
	//			);
	//	КонецЕсли;
	//	
	//	Если НЕ ЗначениеЗаполнено(СтрокаНастроек.ВидГоризонтаПланирования) Тогда
	//		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
	//			Ошибки,
	//			"ПараметрыОперативногоПланирования[%1].ВидГоризонтаПланирования",
	//			НСтр("ru = 'Не заполнен способ указания периода!'"),
	//			"НеУказанВидГоризонтаПланирования",
	//			ПараметрыОперативногоПланирования.Индекс(СтрокаНастроек),
	//			НСтр("ru = 'В строке %1 не заполнен способ указания периода!'"),
	//			);
	//	КонецЕсли;		
	//	
	//	Если СтрокаНастроек.ИспользоватьЛимитирование Тогда
	//		
	//		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.СпособОпределенияВалютыЛимитирования) Тогда
	//			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
	//				Ошибки,
	//				"ПараметрыОперативногоПланирования[%1].СпособОпределенияВалютыЛимитирования",
	//				НСтр("ru = 'Не заполнен способ определения валюты лимитирования!'"),
	//				"НеУказанСпособОпределенияВалютыЛимитирования",
	//				параметрыОперативногоПланирования.Индекс(СтрокаНастроек),
	//				НСтр("ru = 'В строке %1 не заполнен способ определения валюты лимитирования!'"),
	//			);
	//		КонецЕсли;
	//		
	//		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.ПериодичностьЛимитирования) Тогда
	//			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
	//				Ошибки,
	//				"ПараметрыОперативногоПланирования[%1].ПериодичностьЛимитирования",
	//				НСтр("ru = 'Не заполнена периодичность лимитирования!'"),
	//				"НеУказанаПериодичностьЛимитирования",
	//				параметрыОперативногоПланирования.Индекс(СтрокаНастроек),
	//				НСтр("ru = 'В строке %1 не заполнена периодичность лимитирования!'"),
	//			);
	//		КонецЕсли;
	//		
	//		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.СценарийУстановкиЛимита) Тогда
	//			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
	//				Ошибки,
	//				"ПараметрыОперативногоПланирования[%1].СценарийУстановкиЛимита",
	//				НСтр("ru = 'Не заполнен сценарий установки лимита!'"),
	//				"НеУказанСценарийУстановкиЛимита",
	//				параметрыОперативногоПланирования.Индекс(СтрокаНастроек),
	//				НСтр("ru = 'В строке %1 не заполнен сценарий установки лимита!'"),
	//			);
	//		КонецЕсли;
	//		
	//	КонецЕсли		
	//	
	//КонецЦикла;
	//
	//ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПараметрыОперативногоПланированияРегистрПриИзменении(Элемент)
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура НаборКонстантИспользоватьЗаявкиНаКорректировкуЛимитовПриИзменении(Элемент)
	ПриИзмененииИспользоватьЗаявкуНаКорректировкуЛимитов();
	ОбновитьИнтерфейс();
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура СтруктураОперативныхПланов(Команда)
	
	ТД = Элементы.ПараметрыОперативногоПланированияРегистр.ТекущиеДанные;
	Если ТД = неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ДопПараметры = Новый Структура("Отбор", Новый Структура("ВидБюджета", ТД.ВидБюджета));
	ОткрытьФорму("РегистрСведений.СтруктураОперативногоПланирования.Форма.ФормаСпискаДляПанелиАдминистрирования", ДопПараметры, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыОперативныхПланов(Команда)
	
	ТД = Элементы.ПараметрыОперативногоПланированияРегистр.ТекущиеДанные;
	Если ТД = неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ДопПараметры = Новый Структура("Отбор", Новый Структура("ВидБюджета", ТД.ВидБюджета));
	ОткрытьФорму("Справочник.ВидыОперативныхПланов.Форма.ФормаСписка", ДопПараметры, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЛимитирования(Команда)
	
	ТД = Элементы.ПараметрыОперативногоПланированияРегистр.ТекущиеДанные;
	Если ТД = неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ДопПараметры = Новый Структура("Отбор", Новый Структура("ВидБюджета", ТД.ВидБюджета));
	ОткрытьФорму("РегистрСведений.ПараметрыЛимитирования.Форма.ФормаСписка", ДопПараметры, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютыЛимитированияПоЦФО(Команда)
	
	ОткрытьФорму("РегистрСведений.ПараметрыЛимитированияЦФО.ФормаСписка", , ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
КонецПроцедуры	

&НаСервере
Процедура ПриИзмененииИспользоватьЗаявкуНаКорректировкуЛимитов()
	
	Константы.ИспользоватьЗаявкиНаКорректировкуЛимитов.Установить(ИспользоватьЗаявкиНаКорректировкуЛимитов);
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

#КонецОбласти
