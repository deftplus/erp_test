
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область Интерфейс

Процедура ОбновитьНастройкиМатрицы(Регламент) Экспорт

	КодСводныйРегистр = РасчетыПоКорпоративнымНалогам.ПолучитьКодСводныйРегистр();
	
	ГруппаКИК = РасчетыПоКорпоративнымНалогам.ПолучитьГруппуВидовОтчетаКИК();
	ДокНО = Справочники.ДокументыБД.НайтиПоНаименованию("НастраиваемыйОтчет", Истина,, Справочники.ТипыБазДанных.ТекущаяИБ);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	т.Ссылка
	|ИЗ
	|	Справочник.ВнешниеИнформационныеБазы КАК т
	|ГДЕ
	|	т.ТипБД = ЗНАЧЕНИЕ(Справочник.ТипыБазДанных.ОбменТаблДок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	т.Код ВОЗР");
	
	//вибТабДок = Запрос.Выполнить();
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке("Не создано ни одной внешней информационной базы с типом загрузки из Excel");
		Возврат;
	КонецЕсли;
	вибТабДок = Результат.Выгрузить().Получить(0).Ссылка;
	
	ТабОрганизации = Регламент.ОрганизационныеЕдиницы.ВыгрузитьКолонку("ОрганизационнаяЕдиница");
	
	ШаблонЗаписи = Новый Структура("Активность, ДокументБД, ВерсияОрганизационнойСтруктуры", Истина, ДокНО, Регламент);
			
	ВыборкаВО = Справочники.ВидыОтчетов.Выбрать(ГруппаКИК);
	Пока ВыборкаВО.Следующий() Цикл
		
		ШаблонЗаписи.Вставить("ШаблонДокументаБД", ВыборкаВО.Ссылка);
		
		СпособФормирования = ?(СокрЛП(ВыборкаВО.Код) = КодСводныйРегистр, 
									Перечисления.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки, 
									Перечисления.СпособыФормированияОтчетов.Импорт);
									
		БланкиДляОрганизаций = ПолучитьПоказателиИБланки(ВыборкаВО.Ссылка, Ложь);
									
		Для каждого ТекОрганизация Из ТабОрганизации Цикл			
			
			ШаблонЗаписи.Вставить("Организация", ТекОрганизация);
			
			ВыборкаНОбр = РегистрыСведений.НастройкаОбработкиОтчетов.Выбрать(Новый Структура("ШаблонДокументаБД", ВыборкаВО.Ссылка));
			
			//ПравилоОбработки, ПравилоПроверки, БланкДляОтображения, БланкДляИмпорта,   
			Пока ВыборкаНОбр.Следующий() Цикл
				
				МенеджерЗаписи = РегистрыСведений.НастройкаОбработкиОтчетов.СоздатьМенеджерЗаписи();			
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ШаблонЗаписи);				
				МенеджерЗаписи.ЭлементНастройкиОтчета = ВыборкаНОбр.ЭлементНастройкиОтчета;
				
				Если (ВыборкаНОбр.ЭлементНастройкиОтчета <> Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображения) 
					И (ВыборкаНОбр.ЭлементНастройкиОтчета <> Перечисления.ЭлементыНастройкиОтчета.БланкДляИмпорта) Тогда
					
					МенеджерЗаписи.ЗначениеЭлементаНастройкиОтчета = ВыборкаНОбр.ЗначениеЭлементаНастройкиОтчета;
					
				ИначеЕсли ЗначениеЗаполнено(БланкиДляОрганизаций.БланкНК) 
					И (ТекОрганизация.ПорядокОпределенияПрибыли = Перечисления.ВидыПорядокаОпределенияПрибыли.ПоПравилам25ГлавыНК) Тогда
					
					МенеджерЗаписи.ЗначениеЭлементаНастройкиОтчета = БланкиДляОрганизаций.БланкНК;
					
				Иначе 
					
					МенеджерЗаписи.ЗначениеЭлементаНастройкиОтчета = БланкиДляОрганизаций.БланкФО;
					
				КонецЕсли;
				
				МенеджерЗаписи.Записать(Истина);
			
			КонецЦикла;
			
			//СпособФормированияОтчета
			МенеджерЗаписи = РегистрыСведений.НастройкаОбработкиОтчетов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ШаблонЗаписи);
			МенеджерЗаписи.ЭлементНастройкиОтчета          = Перечисления.ЭлементыНастройкиОтчета.СпособФормированияОтчета;
			МенеджерЗаписи.ЗначениеЭлементаНастройкиОтчета = СпособФормирования;
			МенеджерЗаписи.Записать(Истина);
			
			//ВнешняяИнформационнаяБаза
			Если СпособФормирования = Перечисления.СпособыФормированияОтчетов.Импорт Тогда
			
				МенеджерЗаписи = РегистрыСведений.НастройкаОбработкиОтчетов.СоздатьМенеджерЗаписи();			
				МенеджерЗаписи.ЭлементНастройкиОтчета = Перечисления.ЭлементыНастройкиОтчета.ВнешняяИнформационнаяБаза;
				МенеджерЗаписи.ЗначениеЭлементаНастройкиОтчета = вибТабДок;
				МенеджерЗаписи.Записать(Истина);
			
			КонецЕсли;
			
		КонецЦикла;	
	КонецЦикла;

КонецПроцедуры

#КонецОбласти	

#Область ВспомогательныеПроцедурыФункции

Функция ПолучитьПоказателиИБланки(ВидОтчета, ОбновитьБланки = Ложь) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоказателиОтчетов.Строка.Код КАК КодСтроки,
	|	ПоказателиОтчетов.ТипЗначения = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийПоказателейОтчетов.Число)
	|		И ПоказателиОтчетов.НеФинансовый КАК Нефинансовый,
	|	ПоказателиОтчетов.Строка.ЭлементСправочникаБД.ИспользуетсяФО КАК ИспользуетсяФО,
	|	ПоказателиОтчетов.Строка.ЭлементСправочникаБД.ИспользуетсяНК КАК ИспользуетсяНК
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &ВидОтчета
	|	И НЕ ПоказателиОтчетов.ПометкаУдаления
	|	И (ПоказателиОтчетов.ТипЗначения = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийПоказателейОтчетов.Число)
	|				И ПоказателиОтчетов.НеФинансовый
	|			ИЛИ НЕ ПоказателиОтчетов.Строка.ЭлементСправочникаБД.ИспользуетсяФО
	|			ИЛИ НЕ ПоказателиОтчетов.Строка.ЭлементСправочникаБД.ИспользуетсяНК)");
	
	Запрос.УстановитьПараметр("ВидОтчета", ВидОтчета);	
	ТабПоказатели = Запрос.Выполнить().Выгрузить();
	
	ТребуетсяБланкНК = ТабПоказатели.Найти(Ложь, "ИспользуетсяНК") <> Неопределено;
	
	БланкФО = Неопределено;
	БланкНК = Неопределено;
	
	БланкиДляОчистки = Новый Массив;
	
	Выборка = Справочники.БланкиОтчетов.Выбрать(, ВидОтчета);	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПометкаУдаления Или Выборка.РежимБланка = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбновитьБланки Тогда
			УправлениеОтчетамиУХ.ОбновитьБланкОтчета(ВидОтчета, Выборка.Ссылка);	
		КонецЕсли;		
		
		Если БланкФО = Неопределено Тогда			
			БланкФО = Выборка.Ссылка;
		ИначеЕсли ТребуетсяБланкНК И (БланкНК = Неопределено) Тогда
			БланкНК = Выборка.Ссылка;
		ИначеЕсли СокрЛП(Выборка.Описание) <> "" Тогда			
			БланкиДляОчистки.Добавить(Выборка.Ссылка);			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат	Новый Структура("БланкФО,БланкНК,БланкиДляОчистки, ТабПоказатели,ТребуетсяБланкНК", 
							БланкФО, БланкНК, БланкиДляОчистки, ТабПоказатели, ТребуетсяБланкНК);

КонецФункции 

#КонецОбласти

#Область ОбновлениеОперандов

Процедура СообщитьОбОшибке(ТекстОшибки, ЛогОшибок = Неопределено)

	Если ЛогОшибок = Неопределено Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
	Иначе
		ЛогОшибок = ЛогОшибок + Символы.ПС + ТекстОшибки;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли