
#Область ОбработчикиСобытийФормы
	
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоЕХ = ИдентификацияПродуктаУХКлиентСервер.ЭтоЕХ();
	
	//
	ИспользоватьДействиеСозданиеНовыхСПЗ = Ложь;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	//
	Строка = ТаблицаОтбора.Добавить();
	Строка.ИмяРеквизита = "ПериодЗакупки";
	Строка.Представление = НСтр("ru='Период закупки'");
	Строка.Значение = Объект.ПериодЗакупки;
	Строка.Обязательно = Истина;
	
	//
	Строка = ТаблицаОтбора.Добавить();
	Строка.ИмяРеквизита = "Субъекты223ФЗ";
	Строка.Представление = НСтр("ru='Субъекты 223-ФЗ'");
	Строка.Значение = Объект.Субъекты223ФЗ;
	Строка.Обязательно = Истина;
	
	//
	УстановитьСтраницыПомощникаНаСервере("ШагОтборПотребностей");
	
	ИнформационнаяНадпись = НСтр("ru = 'Скрыть/показать подобранные товары'");
	
	//
	АвтоСПЗ_Период = Истина;
	АвтоСПЗ_ПериодГруппировка = Перечисления.Периодичность.Год;
	АвтоСПЗ_Номенклатура = Истина;
	АвтоСПЗ_НоменклатураГруппировка = "Номенклатура";
	АвтоСПЗ_ОрганизацияЗаказчик = Истина;
	
	УстановитьУсловноеОформление();
	
	///////
	СКД = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СКД_УжеСуществующиеДоговора");
	СкорректироватьЗапросВСКД_УжеСуществующиеДоговора(СКД.НаборыДанных.ДанныеПоДоговорам.Запрос);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВоВременномХранилище);
	КомпоновщикНастроекСуществующиеДоговора.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроекСуществующиеДоговора.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоказыватьТолькоНеОбеспеченные = Истина;
	
	Для Каждого Строка Из ТаблицаОтбора Цикл
		Строка.Значение = Объект[Строка.ИмяРеквизита];
	КонецЦикла;
	
	// 
	ПредупреждатьПриПомещенииВКарзинуВсехПотребностей = Ложь;
	
	УправлениеДоступностьюДополнительныхФункций();
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	//УсловноеОформление.Элементы.Очистить();
	
	ПотребностиУХ.УстановитьУсловноеОформлениеДереваПараметровЗакупки(ЭтаФорма, "ПараметрыЗакупокНовогоПроектаСПЗ");
	
	УстановитьУсловноеОформлениеДинамическихОтборов();
	
	УстановитьУсловноеОформлениеУжеСуществующихОбъектов();
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокВсехПроектовСПЗ.Дата", Элементы.СписокВсехПроектовСПЗДата.Имя);
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокИстория.Период", Элементы.СписокИсторияПериод.Имя);
	
	// Оформление списка товарных категорий
	// Для пустой товарной категории отображать <Без категории>
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокТоварныхКатегорийТоварнаяКатегория.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварныеКатегории.ТоварнаяКатегория");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Прочее>'"));

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУжеСуществующихОбъектов()

	#Область ТаблицаУжеСуществующиеСПЗ
	
	ИменаКолонок = ПолучитьИменаКолонокУжеСуществующихСПЗ();
	
	// СПЗ, в которые нельзя помещять потребности
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	// Оформляемые поля
	Для Каждого ИмяКолонки Из ИменаКолонок Цикл
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонки);
	КонецЦикла;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УжеСуществующиеСПЗ.ТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	// Выделить жирным шрифтом выбранную СПЗ
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	// Оформляемые поля
	Для Каждого ИмяКолонки Из ИменаКолонок Цикл
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонки);
	КонецЦикла;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УжеСуществующиеСПЗ.Объект");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ПолучательДляРучногоРаспределения");

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Истина, Ложь, Ложь, Ложь, ));
	
	#КонецОбласти 
	

	#Область ТаблицаУжеСуществующиеПроектыСПЗ
	
	ИменаКолонок = ПолучитьИменаКолонокУжеСуществующихПроектовСПЗ();
	
	// Выделить жирным шрифтом выбранный черновик СПЗ
	Элемент = УсловноеОформление.Элементы.Добавить();

	// Оформляемые поля
	Для Каждого ИмяКолонки Из ИменаКолонок Цикл
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонки);
	КонецЦикла;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УжеСуществующиеПроектыСПЗ.Объект");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ПолучательДляРучногоРаспределения");

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Истина, Ложь, Ложь, Ложь, ));
	
	#КонецОбласти 
	
	
	#Область ТаблицаУжеСуществующиеПроектыСПЗ
	ИменаКолонок = ПолучитьИменаКолонокУжеСуществующихДоговоров();
	
	// Выделить жирным шрифтом выбранный договор
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	// Оформляемые поля
	Для Каждого ИмяКолонки Из ИменаКолонок Цикл
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонки);
	КонецЦикла;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УжеСуществующиеДоговора.Объект");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ПолучательДляРучногоРаспределения");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Истина, Ложь, Ложь, Ложь, ));
	
	// Договора, в которые нельзя помещять потребности
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	// Оформляемые поля
	Для Каждого ИмяКолонки Из ИменаКолонок Цикл
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонки);
	КонецЦикла;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УжеСуществующиеДоговора.ТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	#КонецОбласти 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИменаКолонокУжеСуществующихПроектовСПЗ()
	
	Результат = Новый Массив;
	Результат.Добавить(Элементы.УжеСуществующиеПроектыСПЗОбъект.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеПроектыСПЗНоменклатура.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеПроектыСПЗОрганизация.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеПроектыСПЗМестоПоставки.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеПроектыСПЗПериодПотребности.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеПроектыСПЗКоличество.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеПроектыСПЗСумма.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеПроектыСПЗМенеджер.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеПроектыСПЗПриоритет.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеПроектыСПЗПроект.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеПроектыСПЗНазначение.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеПроектыСПЗСпособЗакупки.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеПроектыСПЗОрганизаторЗакупки.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеПроектыСПЗЭлектронно.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеПроектыСПЗПредметДоговора.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеПроектыСПЗОбщиеТребования.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеПроектыСПЗОрганизацияЗаказчик.Имя);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьИменаКолонокУжеСуществующихСПЗ()
	
	Результат = Новый Массив;
	Результат.Добавить(Элементы.УжеСуществующиеСПЗОбъект.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеСПЗНоменклатура.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеСПЗОрганизация.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеСПЗМестоПоставки.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеСПЗПериодПотребности.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеСПЗКоличество.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеСПЗСумма.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеСПЗМенеджер.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеСПЗПриоритет.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеСПЗПроект.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеСПЗНазначение.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеСПЗСпособЗакупки.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеСПЗОрганизаторЗакупки.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеСПЗЭлектронно.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеСПЗПредметДоговора.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеСПЗОбщиеТребования.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеСПЗОрганизацияЗаказчик.Имя);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьИменаКолонокУжеСуществующихДоговоров()
	
	Результат = Новый Массив;
	Результат.Добавить(Элементы.УжеСуществующиеДоговораОбъект.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеДоговораОрганизацияЗаказчик.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеДоговораКонтрагент.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеДоговораПериодПотребности.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеДоговораНоменклатура.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеДоговораМестоПоставки.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеДоговораКоличество.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеДоговораСумма.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеДоговораОрганизация.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеДоговораМенеджер.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеДоговораПриоритет.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеДоговораПроект.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеДоговораНазначение.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеДоговораСуммаДоговора.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеДоговораВалютаВзаиморасчетов.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеДоговораВалютаПлатежей.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеДоговораДействуетС.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеДоговораДействуетПо.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеДоговораСостояниеДоговора.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеДоговораПериодЗакупокНачало.Имя);
	Результат.Добавить(Элементы.УжеСуществующиеДоговораПериодЗакупокОкончание.Имя);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТаблицаОтбораЗначениеПриИзменении(Элемент)
	
	ТД = Элементы.ТаблицаОтбора.ТекущиеДанные;
	Если ТД = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект[ТД.ИмяРеквизита] = ТД.Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПотребностиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПометитьСтрокиКОбработке();
	Элемент.Обновить();
	Элементы.Корзина.Обновить();
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Назад(Команда)
	
	ОчиститьСообщения();
	
	Если Элементы.Помощник.ТекущаяСтраница = Элементы.ШагОбеспечениеПотребностей Тогда
		
		ОчиститьСообщения();
		УстановитьСтраницыПомощника("ШагОтборПотребностей");
		
	ИначеЕсли Элементы.Помощник.ТекущаяСтраница = Элементы.ШагРучноеФормированиеСПЗ Тогда
		
		ОчиститьСообщения();
		УстановитьСтраницыПомощника("ШагОбеспечениеПотребностей");
		
	ИначеЕсли Элементы.Помощник.ТекущаяСтраница = Элементы.ШагНовыйПроектСПЗ Тогда
		
		ОчиститьСообщения();
		УстановитьСтраницыПомощника("ШагРучноеФормированиеСПЗ");
		
	ИначеЕсли Элементы.Помощник.ТекущаяСтраница = Элементы.ШагАвтоПроектыСПЗ Тогда
		
		ОчиститьСообщения();
		УстановитьСтраницыПомощника("ШагОбеспечениеПотребностей");
		
	ИначеЕсли Элементы.Помощник.ТекущаяСтраница = Элементы.ШагАвтоОбновление Тогда
		
		ОчиститьСообщения();
		УстановитьСтраницыПомощника("ШагОтборПотребностей");
		
	ИначеЕсли Элементы.Помощник.ТекущаяСтраница = Элементы.ШагПроектыСПЗ Тогда
		
		ОчиститьСообщения();
		УстановитьСтраницыПомощника(СписокПроектовСПЗВнезапно_ШагВызова);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ЗаполненыПараметрыШага() Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Помощник.ТекущаяСтраница = Элементы.ШагОтборПотребностей Тогда
		
		ДалееКШагуОбеспеченияПотребностей(Истина);
		
	ИначеЕсли Элементы.Помощник.ТекущаяСтраница = Элементы.ШагОбеспечениеПотребностей Тогда
		
		Если РежимФормирования = 1 Тогда
			// Автомат
			Объект.Источник = 1;		// потребности к обработке
			Объект.МетодОбработки = 1;	// разбор по положению о закупках
		ИначеЕсли РежимФормирования = 2 Тогда
			// Ручной
			Объект.Источник = 0;		// корзина
			Объект.МетодОбработки = 0;	// новый черновик СПЗ
		ИначеЕсли РежимФормирования = 3 Тогда
			// Автомат(КОбработке)
			Объект.Источник = 0;		// корзина
			Объект.МетодОбработки = 1;	// разбор по положению о закупках
		КонецЕсли;
		
		Если Объект.МетодОбработки = 1 Тогда
			// Автоматический режим
			ДалееКШагуШагАвтоПроектыСПЗНаСервере();
		ИначеЕсли Объект.МетодОбработки = 0 Тогда
			// Ручной режим
			ДалееКШагуРучногоФормированияСПЗНаСервере(Истина);
		Иначе
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Элементы.Помощник.ТекущаяСтраница = Элементы.ШагРучноеФормированиеСПЗ Тогда
		
		Если Объект.Обеспечение = ПредопределенноеЗначение("Перечисление.ВариантыВключенияПозицийПотребностей.НовыйПроектСПЗ") Тогда
			ДалееКШагуНовыйПроектСПЗНаСервере();
		ИначеЕсли Объект.Обеспечение = ПредопределенноеЗначение("Перечисление.ВариантыВключенияПозицийПотребностей.ПроектСПЗ") Тогда
			ЗавершениеШагаПроектСПЗНаСервере(ТекущийПользователь, ПолучательДляРучногоРаспределения);
		ИначеЕсли Объект.Обеспечение = ПредопределенноеЗначение("Перечисление.ВариантыВключенияПозицийПотребностей.СПЗ") Тогда
			ЗавершениеШагаСПЗНаСервере(ПолучательДляРучногоРаспределения);
		ИначеЕсли Объект.Обеспечение = ПредопределенноеЗначение("Перечисление.ВариантыВключенияПозицийПотребностей.Договор") Тогда
			ЗавершениеШагаДоговорНаСервере(ПолучательДляРучногоРаспределения);
		Иначе
			ДалееКШагуРезультатОбеспеченияНаСервере();
		КонецЕсли;
		
	ИначеЕсли Элементы.Помощник.ТекущаяСтраница = Элементы.ШагНовыйПроектСПЗ Тогда
		ЗавершениеШагаНовыйПроектСПЗНаСервере();
	ИначеЕсли Элементы.Помощник.ТекущаяСтраница = Элементы.ШагАвтоПроектыСПЗ Тогда
		ЗавершениеШагаАвтоПроектыСПЗНаСервере();
	ИначеЕсли Элементы.Помощник.ТекущаяСтраница = Элементы.ШагАвтоОбновление Тогда
		//ЗавершениеШагаАвтоОбновлениеНаСервере(); //++
		УстановитьСтраницыПомощника("ШагОтборПотребностей");
	ИначеЕсли Элементы.Помощник.ТекущаяСтраница = Элементы.ШагПроектыСПЗ Тогда
		ДалееКШагуОбеспеченияПотребностей(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСДругимиОтборами(Команда)

	ОчиститьСообщения();
	ПродолжитьСДругимиОтборамиНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокДействий(Команда)
	ПроверитьНаборПотребностей();
КонецПроцедуры


#КонецОбласти

#Область ШагНастройкаСпособовОбеспечения

&НаСервереБезКонтекста
//EOL
Функция ПолучитьПараметрыОтбораПотребностей(ПериодЗакупки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодЗакупки", ПериодЗакупки);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Периоды.Ссылка КАК Период
	|ИЗ
	|	Справочник.Периоды КАК ПериодЗакупки,
	|	Константа.ПериодичностьЦентрализованныхЗакупок КАК ПериодичностьЦентрализованныхЗакупок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Периоды КАК Периоды
	|		ПО ПериодичностьЦентрализованныхЗакупок.Значение = Периоды.Периодичность
	|			И (Периоды.Произвольный = ЛОЖЬ)
	|ГДЕ
	|	ПериодЗакупки.Ссылка = &ПериодЗакупки
	|	И Периоды.ДатаНачала МЕЖДУ ПериодЗакупки.ДатаНачала И ПериодЗакупки.ДатаОкончания";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Период");
	
КонецФункции

&НаКлиенте
Процедура ДалееКШагуВыбораРежимаРаботы()
	
	ИнициализироватьПараметрыШага_ОбеспечениеПотребностейНаСервере();
	УстановитьСтраницыПомощника("ШагОтборПотребностей");
	
КонецПроцедуры

&НаКлиенте
Процедура ДалееКШагуОбеспеченияПотребностей(ИнициализироватьПараметры = Истина)
	
	//
	ИнициализироватьПараметрыШага_ОбеспечениеПотребностейНаСервере();
	
	// Ручной режим 
	УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	УстановитьКнопкиРежимаДобавления();
	
	УстановитьСтраницыПомощника("ШагОбеспечениеПотребностей");
	
КонецПроцедуры

#КонецОбласти

#Область ЛогикаРаботыФормы

&НаСервере
Процедура ИнициализироватьПараметрыШага_ОбеспечениеПотребностейНаСервере()
	
	//
	Объект.Действия.Очистить();
	
	Строка = Объект.Действия.Добавить();
	Строка.Действие = НСтр("ru = 'Организации, по которым отсутствуют правила закупки'");
	Строка.ИД = "ПравилаПотребностей";
	Строка.Обработать = "Обработать";
	
	Если Объект.Субъекты223ФЗ Тогда
		Строка = Объект.Действия.Добавить();
		Строка.Действие = НСтр("ru = 'Позиции потребности не классифицированные по ОКПД2'");
		Строка.ИД = "ОКПД2";
	КонецЕсли;
	
	Строка = Объект.Действия.Добавить();
	Строка.Действие = НСтр("ru = 'Автоматическая корректировка программы закупок'");
	Строка.ИД = "АвтоОбновление";
	Строка.Обработать = "Обработать";
	
	Если ИспользоватьДействиеСозданиеНовыхСПЗ Тогда
		Строка = Объект.Действия.Добавить();
		Строка.Действие = НСтр("ru = 'Создание новых строк плана закупок автоматически или вручную'");
		Строка.ИД = "СозданиеНовыхСПЗ";
		Строка.Обработать = "Обработать";
	КонецЕсли;
	
	Если ЕстьОтобранныеПотребности(ТекущийПользователь, Объект.ПериодЗакупки) Тогда
		Если ВКорзинеПрисутствуютПротиворечивыеПозицииНаСервере() Тогда
			РежимФормирования = 3;
		Иначе
			РежимФормирования = 2;
		КонецЕсли;
	Иначе
		РежимФормирования = 2;
	КонецЕсли;
	ПоказыватьПодобранныеТовары = Ложь;
	
	//
	ЗаполнитьОрганизацииТоварныеКатегорииНоменклатуры();
	
	// Заполнение параметров динамических списков.
	ПараметрыОтбораПотребностей = ПолучитьПараметрыОтбораПотребностей(Объект.ПериодЗакупки);
	Объект.ПериодыПотребности.Очистить();
	Для Каждого СтрокаПериод Из ПараметрыОтбораПотребностей Цикл
		Объект.ПериодыПотребности.Добавить().Период = СтрокаПериод;
	КонецЦикла;
	
	// 
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПотребности, "СписокПериодовПотребности",	ПараметрыОтбораПотребностей);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПотребности, "ПустойУИД",					ПустойУИД);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПотребности, "Автор",						ТекущийПользователь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПотребности, "Субъекты223ФЗ",				Объект.Субъекты223ФЗ);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПотребности, "ПериодЗакупки",				Объект.ПериодЗакупки);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПотребности, "СПериодамиПотребности",		Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПотребности, "РазделятьПотребностиПоКатегорийнымМенеджерам",		
				Константы.РазделятьНоменклатуруПоКатегорийнымМенеджерам.Получить());
	
	//
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокИстория, "Автор",			ТекущийПользователь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокИстория, "ПериодЗакупки",	Объект.ПериодЗакупки);
	
	//
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Корзина,
				"Автор", ТекущийПользователь, ВидСравненияКомпоновкиДанных.Равно, , 
				Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
				
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Корзина,
				"ОрганизацияЗаказчик.ЗакупкаПоФЗ223", Объект.Субъекты223ФЗ, ВидСравненияКомпоновкиДанных.Равно, , 
				Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	//
	УдалитьОтборПоСвойствамПотребностей(ЭтаФорма, "СписокПотребности");
	
	//
	РегистрыСведений.ПотребностиПараметрыДоступа.РассчитатьПараметрыДоступаПользователяКПотребностям(ТекущийПользователь);
		
	//	
	РегистрыСведений.ПараметрыЗакупкиПотребностей.РассчитатьПараметрыЗакупкиПоПользователю(
		ТекущийПользователь, Объект.ПериодЗакупки);
		
	РегистрыСведений.ПараметрыЗакупкиПотребностей1.РассчитатьПараметрыЗакупкиПоПользователю(
		ТекущийПользователь, Объект.ПериодЗакупки);
		
		
	// Заполнение дерева отборов
	ПеремДеревоОтборов = РеквизитФормыВЗначение("ДеревоОтборов");
	ПеремДеревоОтборов.Строки.Очистить();
	ЗаполнитьДеревоЗначенийОтборов(ЭтаФорма, ПеремДеревоОтборов);
	ЗначениеВРеквизитФормы(ПеремДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

&НаКлиенте
Функция ПродолжитьСДругимиОтборамиНаСервере()
	УстановитьСтраницыПомощника("ШагОтборПотребностей");
	Возврат Истина;
КонецФункции

&НаСервере
Функция ДалееКШагуШагАвтоПроектыСПЗНаСервере()
	
	СформироватьОтчет_ВыбранныеПозиции_ПоИсточнику(Объект.Источник, ОтчетПотребностиДляАвтоматическогоФормирования);
	УстановитьСтраницыПомощникаНаСервере("ШагАвтоПроектыСПЗ");
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ДалееКШагуАвтоОбновлениеНаСервере(ИнициализироватьПараметры = Истина)
	
	ПеремДеревоОтборов = РеквизитФормыВЗначение("ДеревоОтборов");
	ПеремДеревоОтборов.Строки.Очистить();
	ЗаполнитьДеревоЗначенийОтборов(ЭтаФорма, ПеремДеревоОтборов, Истина);
	ЗначениеВРеквизитФормы(ПеремДеревоОтборов, "ДеревоОтборов");
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СтрокиКОбновлению, "ПустойУИД",					ПустойУИД);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СтрокиКОбновлению, "Автор",						ТекущийПользователь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СтрокиКОбновлению, "Субъекты223ФЗ",				Объект.Субъекты223ФЗ);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СтрокиКОбновлению, "ПериодЗакупки",				Объект.ПериодЗакупки);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СтрокиКОбновлению, "СПериодамиПотребности",		Ложь);
				
	УстановитьСтраницыПомощникаНаСервере("ШагАвтоОбновление");
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ДалееКШагуСписокПроектовСПЗНаСервере(ДалееВидна = Истина)
	
	//
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокИстория, "Автор",			ТекущийПользователь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокИстория, "ПериодЗакупки",	Объект.ПериодЗакупки);
	
	//
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокВсехПроектовСПЗ,
				"Автор", ТекущийПользователь, ВидСравненияКомпоновкиДанных.Равно,, 
				Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
				
	УстановитьСтраницыПомощникаНаСервере("ШагПроектыСПЗВнезапно");
	Возврат Истина;
КонецФункции

&НаСервере
Функция ДалееКШагуРучногоФормированияСПЗНаСервере(Инициализировать = Ложь)
	
	Если Инициализировать Тогда
		ПроверитьПомещениеВНовыйЧерновикСПЗ(ЭтаФорма);
	КонецЕсли;
	
	УстановитьДоступностьУжеСуществующихЭлементов(ЭтаФорма);
	СформироватьИнформационнуюНадписьПомещение(ЭтаФорма);
	УстановитьПометкуКнопокОграниченияОтбораПоНоменклатуре(ЭтаФорма);
	
	СформироватьОтчет_ВыбранныеПозиции_ПоИсточнику(Объект.Источник, ОтчетВыбранныеПозиции);
	
	//
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(ПолучитьМассивОрганизацийЗаказчиков(РеквизитФормыВЗначение("ДеревоОрганизаций")));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		КомпоновщикНастроекСуществующиеДоговора.Настройки.Отбор, "ОрганизацияЗаказчик",
		Список,
		ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
		
	ПолучитьСуществующиеОбъекты();
	
	УстановитьСтраницыПомощникаНаСервере("ШагРучноеФормированиеСПЗ");
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ДалееКШагуНовыйПроектСПЗНаСервере()
	
	// Получаем и обрабатываем параметры закупки для корзины
	ДеревоПараметров = СформироватьПараметрыЗакупкиКорзины(ТекущийПользователь, Объект.ПериодЗакупки, ПустойУИД, Объект.Субъекты223ФЗ);
	ЗначениеВРеквизитФормы(ДеревоПараметров, "ПараметрыЗакупокНовогоПроектаСПЗ");
	РассчитатьСпискиВыбораДляСвойствНовогоПроектаСПЗ(ДеревоПараметров);
	
	// Установить ОрганизациюЗаказчки
	ЭлементОргЗаказчик = Элементы.ОрганизацияЗаказчик;
	ЭлементОргЗаказчик.СписокВыбора.Очистить();
	
	//
	СписокОрганизацийЗаказчиков = РегистрыСведений.ПроектыСПЗ.СписокОрганизацийЗаказчиков(ТекущийПользователь, Объект.ПериодЗакупки, ПустойУИД);
	
	Колво = СписокОрганизацийЗаказчиков.Количество();
	Если Колво = 0 Тогда
		Объект.ОрганизацияЗаказчик = Справочники.Организации.ПустаяСсылка();
	ИначеЕсли Колво = 1 Тогда
		Объект.ОрганизацияЗаказчик = СписокОрганизацийЗаказчиков[0];
	Иначе
		Объект.ОрганизацияЗаказчик = СписокОрганизацийЗаказчиков[0];
		ЭлементОргЗаказчик.СписокВыбора.ЗагрузитьЗначения(СписокОрганизацийЗаказчиков);
	КонецЕсли;
	
	ЭлементОргЗаказчик.ТолькоПросмотр = Объект.Субъекты223ФЗ;
	
	УстановитьСтраницыПомощникаНаСервере("ШагНовыйПроектСПЗ");
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗавершениеШагаНовыйПроектСПЗНаСервере()
	
	//
	ДеревоПараметровСПЗ = РеквизитФормыВЗначение("ПараметрыЗакупокНовогоПроектаСПЗ");
	
	//
	РегистрыСведений.ПроектыСПЗ.ЗаписатьНовыйПроектСПЗ(
		ТекущийПользователь, Объект.ПериодЗакупки, Объект.Субъекты223ФЗ,
		Объект.ОрганизацияЗаказчик, ДеревоПараметровСПЗ, , 
		Объект.ПредметДоговора, Объект.ОбщиеТребования);
	
	//
	УстановитьСтраницыПомощникаНаСервере("ШагПроектыСПЗ");
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗавершениеШагаПроектСПЗНаСервере(Автор, УИДПроекта)
	
	//
	РегистрыСведений.ПроектыСПЗ.ДобавитьКорзинуВПроектСПЗ(УИДПроекта, Автор, Объект.ПериодЗакупки, Объект.Субъекты223ФЗ);
	
	//
	УстановитьСтраницыПомощникаНаСервере("ШагПроектыСПЗ");
	
КонецПроцедуры

&НаСервере
Процедура ЗавершениеШагаСПЗНаСервере(ИдентификаторСПЗ)
	
	//
	РегистрыСведений.ПроектыСПЗ.ДобавитьВПроектСПЗ(ТекущийПользователь, Объект.ПериодЗакупки, Объект.Субъекты223ФЗ, ИдентификаторСПЗ);
	
	//
	УстановитьСтраницыПомощникаНаСервере("ШагПроектыСПЗ");
	
КонецПроцедуры

&НаСервере
Функция ЗавершениеШагаДоговорНаСервере(Договор)
	
	//
	РегистрыСведений.ПроектыСПЗ.ДобавитьВПроектСПЗ(ТекущийПользователь, Объект.ПериодЗакупки, Объект.Субъекты223ФЗ, Договор);
	
	//
	УстановитьСтраницыПомощникаНаСервере("ШагПроектыСПЗ");
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗавершениеШагаАвтоПроектыСПЗНаСервере()
	
	// NT
   	Инфо = СформироватьДанныеДляАвтоматическогоСозданияПроектовСПЗ(
				ТекущийПользователь,
				Объект.ПериодЗакупки,
				ПустойУИД,
				Объект.Субъекты223ФЗ);
				
#Область ОпределениеГруппировок
	
	//
	Группировки = Новый Массив;
	ГруппировкиСвойств = Новый Массив;
	
	Группировки.Добавить("ОрганизацияЗаказчик");
	ГруппировкиСвойств.Добавить("ОрганизацияЗаказчик");
	Если АвтоСПЗ_Организация Тогда
		Группировки.Добавить("Организация");
		ГруппировкиСвойств.Добавить("Организация");
	КонецЕсли;
	Если АвтоСПЗ_Номенклатура Тогда
		Группировки.Добавить(АвтоСПЗ_НоменклатураГруппировка);
		ГруппировкиСвойств.Добавить(АвтоСПЗ_НоменклатураГруппировка);
	КонецЕсли;
	
	Если Константы.РазделятьНоменклатуруПоКатегорийнымМенеджерам.Получить() Тогда
		Если Группировки.Найти("ТоварнаяКатегория") = Неопределено Тогда
			Группировки.Добавить("ТоварнаяКатегория");
			ГруппировкиСвойств.Добавить("ТоварнаяКатегория");
		Иначе
			// Уже задана группировка по товарной категории.
		КонецЕсли;
	Иначе
		// Не требуется принудительная установка товарной категории.
	КонецЕсли;
	
	Если АвтоСПЗ_МестоПоставки Тогда
		Группировки.Добавить("МестоПоставки");
		ГруппировкиСвойств.Добавить("МестоПоставки");
	КонецЕсли;
	Если АвтоСПЗ_Менеджер Тогда
		Группировки.Добавить("Менеджер");
		ГруппировкиСвойств.Добавить("Менеджер");
	КонецЕсли;
	Если АвтоСПЗ_Проект Тогда
		Группировки.Добавить("Проект");
		ГруппировкиСвойств.Добавить("Проект");
	КонецЕсли;
	Если АвтоСПЗ_Приоритет Тогда
		Группировки.Добавить("Приоритет");
		ГруппировкиСвойств.Добавить("Приоритет");
	КонецЕсли;
	Если АвтоСПЗ_Период Тогда
		Группировки.Добавить("ПериодСПЗ");
		ДополнитьДанныеПериодомСПЗ(АвтоСПЗ_ПериодГруппировка, Инфо.Таблицы.ПотребностиСПараметрамиЗакупки);
	КонецЕсли;
	Если АвтоСПЗ_СпособЗакупки Тогда
		Группировки.Добавить("СпособЗакупки");
	КонецЕсли;
	Если АвтоСПЗ_Организатор Тогда
		Группировки.Добавить("Организатор");
	КонецЕсли;
	
	СтрокаГруппировки = СтрСоединить(Группировки, ",");
	СтрокаГруппировкиСвойств = СтрСоединить(ГруппировкиСвойств, ",");
	
#КонецОбласти 

#Область ОсновнойЦиклОбработкиДанных

	НачатьТранзакцию();
	Попытка
		
		Если Объект.Источник = 0 Тогда
			// Если источником является корзина, то ее необходимо очистить
			РегистрыСведений.ПроектыСПЗ.ОчиститьКорзинуПользователя(ТекущийПользователь, Объект.ПериодЗакупки, Объект.Субъекты223ФЗ);
		КонецЕсли;
		
		// Основной цикл обработки данных
		ТаблицаГруппировок = Инфо.Таблицы.ПотребностиСПараметрамиЗакупки.Скопировать(, СтрокаГруппировки);
		ТаблицаГруппировок.Свернуть(СтрокаГруппировки, "");
			
		СтруктураГруппировки = Новый Структура(СтрокаГруппировки);
		СтруктураГруппировкиСвойств = Новый Структура(СтрокаГруппировкиСвойств);
		
		Для Каждого СтрокаГруппировок Из ТаблицаГруппировок Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураГруппировки, СтрокаГруппировок);
			ЗаполнитьЗначенияСвойств(СтруктураГруппировкиСвойств, СтрокаГруппировок);
			
			ПредметЗакупки = СформироватьПредметЗакупкиПоУмолчанию(СтруктураГруппировки);
			
			Контрактант = СтруктураГруппировки.ОрганизацияЗаказчик;
			
			ТаблицаПотребностей = Инфо.Таблицы.ПотребностиСПараметрамиЗакупки.Скопировать(СтруктураГруппировки);
			
			// Получить свойства, с фиксированными параметрами
			СвернутьСвойстваПо = ПолучитьСписокСвойствСФиксированнымиПараметрами(ТаблицаПотребностей, Инфо.Таблицы.ТаблицаПараметровЗакупки);
			Если ЗначениеЗаполнено(СвернутьСвойстваПо) Тогда
				
				//
				СвойстваГруппировка = ТаблицаПотребностей.Скопировать(СтруктураГруппировкиСвойств);
				
				СвойстваГруппировка.Свернуть(СвернутьСвойстваПо, "");
				
				СтруктураПоиска = Новый Структура(СвернутьСвойстваПо);
				
				Для Каждого СтрокаСвойств Из СвойстваГруппировка Цикл
					
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаСвойств);
					
					//Строки
					ДанныеСПЗ = ТаблицаПотребностей.Скопировать(СтруктураПоиска);
					
					Если ДанныеСПЗ.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ПараметрыЗакупки = СформироватьДеревоПараметровЗакупки(ДанныеСПЗ, Инфо.Таблицы.ТаблицаПараметровЗакупки);
					
					РегистрыСведений.ПроектыСПЗ.ЗаписатьНовыйПроектСПЗ(
						ТекущийПользователь, Объект.ПериодЗакупки, Объект.Субъекты223ФЗ,
						Контрактант, ПараметрыЗакупки, ДанныеСПЗ, 
						ПредметЗакупки, ".");
					
				КонецЦикла;
				
			Иначе
				
				//Строки
				ДанныеСПЗ = ТаблицаПотребностей.Скопировать();
				
				Если ДанныеСПЗ.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыЗакупки = СформироватьДеревоПараметровЗакупки(ДанныеСПЗ, Инфо.Таблицы.ТаблицаПараметровЗакупки);
				
				РегистрыСведений.ПроектыСПЗ.ЗаписатьНовыйПроектСПЗ(
					ТекущийПользователь, Объект.ПериодЗакупки, Объект.Субъекты223ФЗ,
					Контрактант, ПараметрыЗакупки, ДанныеСПЗ, 
					ПредметЗакупки, ".");
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
		
#КонецОбласти	
	
	УстановитьСтраницыПомощникаНаСервере("ШагПроектыСПЗ");
	
	Возврат Истина;
	
КонецФункции

&НаСервере 
Функция ПолучитьСписокСвойствСФиксированнымиПараметрами(ТаблицаПотребностей, Знач ПараметрыЗакупки = неопределено)
	
	Результат = Новый Массив;
	
	Если ПараметрыЗакупки = неопределено Тогда
		ПараметрыЗакупки = ПланыВидовХарактеристик.ПараметрыЗакупки.ПолучитьТаблицуНастроекПараметровЗакупки();
	КонецЕсли;
	
	Для Каждого ПараметрЗакупки Из ПараметрыЗакупки Цикл
		
		Если ПараметрЗакупки.ЭтоПараметрПозиции Тогда
			Продолжить;
		КонецЕсли;
		
		//
		Строки = ТаблицаПотребностей.НайтиСтроки(Новый Структура(ПараметрЗакупки.ЗапретИзменения, Истина));
		Если Строки.Количество() > 0 Тогда
			Результат.Добавить(ПараметрЗакупки.ПараметрИмя);
		КонецЕсли;
		
	КонецЦикла;

	Возврат СтрСоединить(Результат, ",");
	
КонецФункции

&НаСервере
Функция СформироватьПредметЗакупкиПоУмолчанию(СтруктураГруппировки)
	
	ОписанияПолей = Новый Массив;
	
	ОписанияПолей.Добавить(НСтр("ru = 'Сформирован автоматически: '"));
	
	Для Каждого КлючЗначение Из СтруктураГруппировки Цикл
		
		Если ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
			Если КлючЗначение.Ключ = "ПериодСПЗ" Тогда
				ТекстЗначение = ПолучитьНаименованиеПериода(КлючЗначение.Значение, АвтоСПЗ_ПериодГруппировка);
			Иначе
				ТекстЗначение = Строка(КлючЗначение.Значение);
			КонецЕсли;
		Иначе
			ТекстЗначение = НСтр("ru = '<Пустое значение>'");
		КонецЕсли;
		ОписанияПолей.Добавить(ТекстЗначение);
		
	КонецЦикла;
	
	Возврат СтрСоединить(ОписанияПолей, "/");;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНаименованиеПериода(Значение, Периодичность)
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		Возврат Формат(Значение, Нстр("ru = 'ДФ='yyyy ''г.''''"));
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		ШаблонТекста = НСтр("ru = '%1-е полугодие %2 г.'");
		Если Значение < ДобавитьМесяц(НачалоГода(Значение), 6) Тогда
			Полугодие = "1";
		Иначе
			Полугодие = "2";
		КонецЕсли;
		Возврат СтрШаблон(ШаблонТекста, Полугодие, Формат(Год(Значение), "ЧГ=0"));
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат Формат(Значение, Нстр("ru = 'ДФ='к''  квартал ''гггг ''г.''''"));
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Возврат Формат(Значение, Нстр("ru = 'ДФ='MMMM yyyy ''г.''''"));
	КонецЕсли;
	
	Возврат Формат(Значение, "ДЛФ=D");
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьДеревоПараметровЗакупки(ДанныеСПЗ, Знач ТаблицаПараметровЗакупки = неопределено)
	
	Если ТаблицаПараметровЗакупки = неопределено Тогда
		ТаблицаПараметровЗакупки = ПланыВидовХарактеристик.ПараметрыЗакупки.ПолучитьТаблицуНастроекПараметровЗакупки();
	КонецЕсли;
	
	//
	Дерево = Новый ДеревоЗначений;
	Таблица = РегистрыСведений.ПроектыСПЗПараметры.СоздатьНаборЗаписей().Выгрузить();
	Для Каждого Колонка Из Таблица.Колонки Цикл
		Дерево.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	Дерево.Колонки.Добавить("ДетальнаяЗапись", Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("ИндексКартинки", ОбщегоНазначения.ОписаниеТипаЧисло(3,0));
	
	// Формируем список необходимых реквизитов таблицы ДанныеСПЗ
	мРеквизитыПотребностей = Новый Массив;
	мРеквизитыПотребностей.Добавить("АналитикаНоменклатуры");
	мРеквизитыПотребностей.Добавить("АналитикаПотребностей");
	мРеквизитыПотребностей.Добавить("АналитикаСтруктуры");
	мРеквизитыПотребностей.Добавить("ПоложениеОЗакупках");
	мРеквизитыПотребностей.Добавить("УИДУсловия");
	
	Для Каждого ПараметрЗакупки Из ТаблицаПараметровЗакупки Цикл
		мРеквизитыПотребностей.Добавить(ПараметрЗакупки.ПараметрИмя);
		мРеквизитыПотребностей.Добавить(ПараметрЗакупки.ЗапретИзменения);
	КонецЦикла;
	РеквизитыПотребностей = СтрСоединить(мРеквизитыПотребностей, ",");
	
	//
	Потребности = ДанныеСПЗ.Скопировать(,РеквизитыПотребностей);
	Потребности.Свернуть(РеквизитыПотребностей);
	
	//
	Для Каждого ПараметрЗакупки Из ТаблицаПараметровЗакупки Цикл
		ДеревоСвойство = Дерево.Строки.Добавить();
		ДеревоСвойство.Свойство = ПараметрЗакупки.Параметр;
		ДеревоСвойство.ДетальнаяЗапись = Ложь;
		
		Для Каждого СтрокаПотребности Из Потребности Цикл
			
			СтрокаДерева = ДеревоСвойство.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаПотребности);
			СтрокаДерева.Свойство = ДеревоСвойство.Свойство;
			СтрокаДерева.Значение = СтрокаПотребности[ПараметрЗакупки.ПараметрИмя];
			СтрокаДерева.ЗапретИзменения = СтрокаПотребности[ПараметрЗакупки.ЗапретИзменения];
			СтрокаДерева.ДетальнаяЗапись = Истина;
			СтрокаДерева.ИндексКартинки = ?(СтрокаДерева.ЗапретИзменения, 0, 1);
			
		КонецЦикла;
		
	КонецЦикла;
	
	//
	РассчитатьИтоговыеПараметрыЗакупки(Дерево);
	
	Возврат Дерево;
	
КонецФункции

&НаСервереБезКонтекста
Процедура РассчитатьИтоговыеПараметрыЗакупки(ДеревоПараметровЗакупки)
	
	// Расчет параметров СПЗ
	ПростыеТипы = Новый Массив;
	ПростыеТипы.Добавить(Тип("Число"));
	ПростыеТипы.Добавить(Тип("Строка"));
	ПростыеТипы.Добавить(Тип("Дата"));
	ПростыеТипы.Добавить(Тип("Булево"));
	
	Для Каждого ДеревоПараметр Из ДеревоПараметровЗакупки.Строки Цикл
		
		Результат = Новый Структура("Значение, ЗапретИзменения", ДеревоПараметр.Свойство.ТипЗначения.ПривестиЗначение(неопределено), Ложь);
		ЭтоПростойТип = ПростыеТипы.Найти(ТипЗнч(Результат.Значение)) <> неопределено;
		
		Для Каждого Строка Из ДеревоПараметр.Строки Цикл
			
			Если Результат.ЗапретИзменения = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			Если Строка.ЗапретИзменения Тогда
				Результат.ЗапретИзменения = Истина;
				Результат.Значение = Строка.Значение;
			Иначе
				
				Если ЭтоПростойТип Тогда
					Результат.Значение = Макс(Результат.Значение, Строка.Значение);
				Иначе
					Результат.Значение = Строка.Значение;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ДеревоПараметр.Значение = Результат.Значение;
		ДеревоПараметр.ЗапретИзменения = Результат.ЗапретИзменения;
		ДеревоПараметр.ИндексКартинки = ?(ДеревоПараметр.ЗапретИзменения, 0, 1);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнениеШагаАвтоОбновлениеНаСервере()
	
	Данные = ПолучитьДанныеАвтоОбновлениеЧерезСКД();
	
	// Удалить не выбранные строки
	Поз = 0;
	Пока Поз < Данные.Количество() Цикл
		Строка = Данные[Поз];
		Если СписокСПЗКАвтообновлению.НайтиПоЗначению(Строка.СПЗ) = Неопределено Тогда
			Данные.Удалить(Строка);
		Иначе
			Поз = Поз + 1;
		КонецЕсли;
	КонецЦикла;
	Для Инд = 1 По Данные.Количество() Цикл
		Данные[Инд - 1]["НомерСтроки"] = Инд;
	КонецЦикла;
	
	ПотребностиУХ.ВыполнитьКлючеваниеКоллекцииПотребностей(Данные);
	
	СтрокаГруппировки = "ИдентификаторСПЗ";
	
	ТМП = Данные.Скопировать(, СтрокаГруппировки);
	ТМП.Свернуть(СтрокаГруппировки, "");
	//Возврат;
	Для Каждого СтрокаГруппировкиСПЗ Из ТМП Цикл
		
		Попытка
			
			СтруктураПоиска = Новый Структура(СтрокаГруппировки);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаГруппировкиСПЗ);
			
			ПредметЗакупки = НСтр("ru = 'Автообновление СПЗ: '");
			
			ДанныеСПЗ = Данные.Скопировать(СтруктураПоиска);
			
			ИДСозданногоПроекта = РегистрыСведений.ПроектыСПЗ.ДобавитьВПроектСПЗ(ТекущийПользователь, Объект.ПериодЗакупки, Объект.Субъекты223ФЗ, СтрокаГруппировкиСПЗ.ИдентификаторСПЗ, ДанныеСПЗ);
			РегистрыСведений.ПроектыСПЗ.ОбработатьПроектСПЗ(ТекущийПользователь, неопределено, Объект.ПериодЗакупки, ИДСозданногоПроекта);
			
			ОбщегоНазначения.СообщитьПользователю(ПредметЗакупки + ДанныеСПЗ[0].СПЗ);
		Исключение
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось выполнить обновление СПЗ по ее идентификатору %1.'"), СтруктураПоиска.ИдентификаторСПЗ);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ОбновлениеПотребностейСПЗ'"), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ДалееКШагуРезультатОбеспеченияНаСервере()
	
	УстановитьСтраницыПомощника("ШагПроектыСПЗ");
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСтраницыПомощника(ИмяШага)
	
	УстановитьСтраницыПомощникаНаСервере(ИмяШага);
	Если ИмяШага = "ШагОтборПотребностей" Тогда 
		ПодключитьОбработчикОжидания("ОбработчикОжидания_ПроверкаНабораПотребностей", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтраницыПомощникаНаСервере(ИмяШага)

	КнопкаНазад = Элементы.Назад;
	КнопкаДалее = Элементы.Далее;
	КнопкаЗакрыть = Элементы.Закрыть;
	КнопкаПродолжитьСДругимиОтборами = Элементы.ПродолжитьСДругимиОтборами;
	КнопкаСписокПроектовСПЗ = Элементы.КнопкаСписокПроектовСПЗ;
	
	КнопкаДалее.Доступность = Истина;
	КнопкаДалее.КнопкаПоУмолчанию = Истина;
	КнопкаНазад.Доступность = Истина;
	
	КнопкаСписокПроектовСПЗ.Видимость = Истина;
	КнопкаПродолжитьСДругимиОтборами.Видимость = Ложь;
	
	Элементы.СтраницыДинамическихОтборов.Видимость = Ложь;
	
	Если ИмяШага = "ШагОтборПотребностей" Тогда

		КнопкаНазад.Доступность = Ложь;
		КнопкаПродолжитьСДругимиОтборами.Видимость = Ложь;
		
		КнопкаДалее.Видимость = Истина;
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
		Элементы.Помощник.ТекущаяСтраница = Элементы.ШагОтборПотребностей;
		УстановитьЗаголовокФормы(НСтр("ru = 'Шаг 1 из 5. Уточнение потребности'"));
		
	ИначеЕсли ИмяШага = "ШагОбеспечениеПотребностей" Тогда

		Элементы.СтраницыДинамическихОтборов.Видимость = Истина;
		
		КнопкаНазад.Доступность = Истина;
		КнопкаДалее.Видимость = Истина;
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
		Элементы.Помощник.ТекущаяСтраница = Элементы.ШагОбеспечениеПотребностей;
		УстановитьЗаголовокФормы(НСтр("ru = 'Шаг 2 из 5. Подбор потребностей'"));
		УстановитьТекстИнформационнойНадписи(ЭтаФорма);
		
	ИначеЕсли ИмяШага = "ШагРучноеФормированиеСПЗ" Тогда

		КнопкаДалее.Видимость = Истина;
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		КнопкаПродолжитьСДругимиОтборами.Видимость = Ложь;

		
		Элементы.Помощник.ТекущаяСтраница = Элементы.ШагРучноеФормированиеСПЗ;
		УстановитьЗаголовокФормы(НСтр("ru = 'Шаг 3 из 5. Формирование строк программы закупок'"));
		
	ИначеЕсли ИмяШага = "ШагНовыйПроектСПЗ" Тогда
		
		КнопкаДалее.Видимость = Истина;
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		КнопкаПродолжитьСДругимиОтборами.Видимость = Ложь;
		
		Элементы.Помощник.ТекущаяСтраница = Элементы.ШагНовыйПроектСПЗ;
		УстановитьЗаголовокФормы(НСтр("ru = 'Шаг 4 из 5. Включение потребности в черновик'"));
		
	ИначеЕсли ИмяШага = "ШагАвтоПроектыСПЗ" Тогда

		Элементы.Помощник.ТекущаяСтраница = Элементы.ШагАвтоПроектыСПЗ;
		
		КнопкаНазад.Доступность = Истина;
		КнопкаДалее.Видимость = Истина;
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		КнопкаПродолжитьСДругимиОтборами.Видимость = Ложь;
		
		УстановитьЗаголовокФормы(НСтр("ru = 'Шаг 4 из 5. Формирование строк программы закупок'"));
		
		//
		Если РегистрыСведений.ПроектыСПЗ.ВЧерновикеРазрешеноНесколькоОрганизацийЗаказчиков(Объект.Субъекты223ФЗ) Тогда
			Элементы.АвтоСПЗ_ОрганизацияЗаказчик.ТолькоПросмотр = Ложь;
		Иначе
			Элементы.АвтоСПЗ_ОрганизацияЗаказчик.ТолькоПросмотр = Истина;
			АвтоСПЗ_ОрганизацияЗаказчик = Истина;
		КонецЕсли;
		
	ИначеЕсли ИмяШага = "ШагАвтоОбновление" Тогда

		Элементы.СтраницыДинамическихОтборов.Видимость = Истина;
		
		Элементы.Помощник.ТекущаяСтраница = Элементы.ШагАвтоОбновление;
		
		КнопкаНазад.Видимость = Истина;
		КнопкаНазад.Доступность = Истина;
		КнопкаДалее.Видимость = Истина;
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		КнопкаПродолжитьСДругимиОтборами.Видимость = Ложь;
		
		УстановитьЗаголовокФормы(НСтр("ru = 'Автоматическая корректировка строк программы закупок'"));

	ИначеЕсли ИмяШага = "ШагПроектыСПЗ" Тогда

		КнопкаСписокПроектовСПЗ.Видимость = Ложь;
		
		Элементы.Помощник.ТекущаяСтраница = Элементы.ШагПроектыСПЗ;
		
		КнопкаНазад.Доступность = Ложь;
		
		КнопкаДалее.Доступность = Истина;
		КнопкаДалее.Видимость = Истина;
		
		КнопкаПродолжитьСДругимиОтборами.Видимость = Истина;
		Элементы.СписокИстория.Видимость = Элементы.СписокВсехПроектовСПЗПоказатьИсторию.Пометка;
		УстановитьЗаголовокФормы(НСтр("ru = 'Шаг 5 из 5. Предварительный просмотр'"));
		
	ИначеЕсли ИмяШага = "ШагПроектыСПЗВнезапно" Тогда

		КнопкаСписокПроектовСПЗ.Видимость = Ложь;
		
		КнопкаНазад.КнопкаПоУмолчанию = Истина;
		
		СписокПроектовСПЗВнезапно_ШагВызова = Элементы.Помощник.ТекущаяСтраница.Имя;
		Элементы.Помощник.ТекущаяСтраница = Элементы.ШагПроектыСПЗ;
		
		КнопкаДалее.Видимость = Истина;;
		КнопкаДалее.Доступность = Ложь;
		КнопкаПродолжитьСДругимиОтборами.Видимость = Ложь;
		
		УстановитьЗаголовокФормы(НСтр("ru = 'Предварительный просмотр'"));
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Попытка перейти к неизвестному шагу ""%1""'"), ИмяШага);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполненыПараметрыШага()
	
	Результат = Истина;
	
	Если Элементы.Помощник.ТекущаяСтраница = Элементы.ШагОтборПотребностей 
			ИЛИ Элементы.Помощник.ТекущаяСтраница = Элементы.ШагАвтоОбновление Тогда
		Для Каждого Строка Из ТаблицаОтбора Цикл
			Если НЕ Строка.Обязательно Тогда
				Продолжить;
			КонецЕсли;
			Результат = РеквизитЗаполнен(Строка.ИмяРеквизита, "Объект", Строка.Представление) И Результат ;
		КонецЦикла;
		
	ИначеЕсли Элементы.Помощник.ТекущаяСтраница = Элементы.ШагОбеспечениеПотребностей Тогда
		Если РежимФормирования = 2 Тогда
			Результат = ЕстьОтобранныеПотребности(ТекущийПользователь, Объект.ПериодЗакупки);
		ИначеЕсли РежимФормирования = 1 Тогда
			Результат = Истина;
		ИначеЕсли РежимФормирования = 3 Тогда
			Результат = Истина;
		Иначе
			Результат = Ложь;
		КонецЕсли;
	ИначеЕсли Элементы.Помощник.ТекущаяСтраница = Элементы.ШагРучноеФормированиеСПЗ Тогда
		Результат = РеквизитЗаполнен("Обеспечение",	"Объект", НСтр("ru = 'Включить выбранные позиции в'")) И Результат;
		Если Объект.Обеспечение = ПредопределенноеЗначение("Перечисление.ВариантыВключенияПозицийПотребностей.ПроектСПЗ") Тогда
			Результат = Результат И ТипЗнч(ПолучательДляРучногоРаспределения) = Тип("УникальныйИдентификатор");
			Результат = Результат И ЗначениеЗаполнено(ПолучательДляРучногоРаспределения);
		ИначеЕсли Объект.Обеспечение = ПредопределенноеЗначение("Перечисление.ВариантыВключенияПозицийПотребностей.СПЗ") Тогда
			Результат = Результат И ТипЗнч(ПолучательДляРучногоРаспределения) = Тип("СправочникСсылка.ИдентификаторыСтрокПлановЗакупок");
			Результат = Результат И ЗначениеЗаполнено(ПолучательДляРучногоРаспределения);
		ИначеЕсли Объект.Обеспечение = ПредопределенноеЗначение("Перечисление.ВариантыВключенияПозицийПотребностей.Договор") Тогда
			Результат = Результат И ТипЗнч(ПолучательДляРучногоРаспределения) = Тип("СправочникСсылка.ДоговорыКонтрагентов");
			Результат = Результат И РеквизитЗаполнен("ПолучательДляРучногоРаспределения", "", НСтр("ru=''"));
		КонецЕсли;
		
	ИначеЕсли Элементы.Помощник.ТекущаяСтраница = Элементы.ШагНовыйПроектСПЗ Тогда
		
		
		Результат = РеквизитЗаполнен("ПредметДоговора",	"Объект", НСтр("ru = 'Предмет договора'")) И Результат;
		Результат = РеквизитЗаполнен("ОбщиеТребования",	"Объект", НСтр("ru = 'Общие требования'")) И Результат;
		
		СтрокиДерева = ПараметрыЗакупокНовогоПроектаСПЗ.ПолучитьЭлементы();
		
		Ошибки = неопределено;
		Шаблон = НСтр("ru = 'Значение свойства закупки ""%1"" не заполнено'");

		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаДерева.Значение) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
					Ошибки, "ПараметрыЗакупокНовогоПроектаСПЗ", СтрШаблон(Шаблон, Строка(СтрокаДерева.Свойство)), "");
			КонецЕсли;
			
		КонецЦикла;
		
		Если Ошибки <> неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
			Результат = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция РеквизитЗаполнен(ИмяРеквизита, ПутьКДанным = "", Представление)
	
	Отказ = Ложь;
	Если ПутьКДанным = "" Тогда
		Контейнер = ЭтаФорма;
	Иначе
		Контейнер = ЭтаФорма[ПутьКДанным];
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контейнер[ИмяРеквизита]) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле",	"Заполнение", Представление);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ИмяРеквизита, ПутьКДанным, Отказ);
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

#КонецОбласти

&НаСерверебезКонтекста
Функция ПолучитьТекущееСостояниеКлассификацииОКПД2НаСервере(Пользователь, ПериодЗакупок)
	
	КолвоПозиций = Отчеты.ПозицииПотребностейБезКодаОКПД2.ПолучитьКолвоПозицийБезОКПД2(Пользователь, ПериодЗакупок);
	
	ЧастиСтроки = Новый Массив;
	
	Если КолвоПозиций > 0 Тогда
		СтрКолвоПозиций = СтрШаблон(НСтр("ru = '%1 поз.'"), КолвоПозиций);
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(СтрКолвоПозиций, Новый Шрифт("Consolas"), ЦветаСтиля.ГиперссылкаЦвет,, "Отчет_ПотребностиБезОКПД2"));
	Иначе
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'нет'"), Новый Шрифт("Consolas"), ЦветаСтиля.ГиперссылкаЦвет,, "Отчет_ПотребностиБезОКПД2"));
	КонецЕсли;
	
	Возврат Новый Структура("КолвоПозиций, Описание", КолвоПозиций, Новый ФорматированнаяСтрока(ЧастиСтроки));
	
КонецФункции

&НаСерверебезКонтекста
Функция ПолучитьТекущееСостояниеУнификатовНаСервере(Пользователь, ПериодЗакупок, Субъекты223ФЗ)
	
	КолвоПозицийДляУнификации = Отчеты.ПозицииПотребностейКЗамещениюУнификатами.ПолучитьКолвоПозицийДляУнификации(Пользователь, ПериодЗакупок, Субъекты223ФЗ);
	
	// Наличие унификатов
	ЧастиСтроки = Новый Массив;
	Если КолвоПозицийДляУнификации > 0 Тогда
		СтрКолвоПозиций = СтрШаблон(НСтр("ru = '%1 поз.'"), КолвоПозицийДляУнификации);
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(СтрКолвоПозиций, Новый Шрифт("Consolas"), ЦветаСтиля.ГиперссылкаЦвет,, "Отчет_ПотребностиКУнификации"));
		ЧастиСтроки.Добавить("   ");
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(Нстр("ru = '<Обработать>'"), Новый Шрифт("Consolas",,Истина,,Истина), ЦветаСтиля.ГиперссылкаЦвет, , "Обработать_ВыполнитьОбработкуУнификатов"));
		ЧастиСтроки.Добавить(".");
	Иначе
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'нет'"), Новый Шрифт("Consolas"), ЦветаСтиля.ГиперссылкаЦвет,, "Отчет_ПотребностиКУнификации"));
	КонецЕсли;
	
	Возврат Новый Структура("КолвоПозиций, Описание", КолвоПозицийДляУнификации, Новый ФорматированнаяСтрока(ЧастиСтроки));
	
КонецФункции

&НаСерверебезКонтекста
Функция ПолучитьТекущееСостояниеАналоговНаСервере(Пользователь, ПериодЗакупок, Субъекты223ФЗ)
	
	КолвоПозицийЗаменыНаАналоги = Отчеты.ПозицииПотребностейКЗамещениюАналогами.ПолучитьКолвоПозицийДляЗаменыНаАналоги(Пользователь, ПериодЗакупок, Субъекты223ФЗ);
	
	// Наличие унификатов
	ЧастиСтроки = Новый Массив;
	Если КолвоПозицийЗаменыНаАналоги > 0 Тогда
		СтрКолвоПозиций = СтрШаблон(НСтр("ru = '%1 поз.'"), КолвоПозицийЗаменыНаАналоги);
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(СтрКолвоПозиций, Новый Шрифт("Consolas"), ЦветаСтиля.ГиперссылкаЦвет,, "Отчет_ПотребностиКЗаменеНаАналоги"));
		ЧастиСтроки.Добавить("   ");
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(Нстр("ru = '<Обработать>'"), Новый Шрифт("Consolas",,Истина,,Истина), ЦветаСтиля.ГиперссылкаЦвет, , "Обработать_ВыполнитьОбработкуАналогов"));
		ЧастиСтроки.Добавить("   ");
	Иначе
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'нет'"), Новый Шрифт("Consolas"), ЦветаСтиля.ГиперссылкаЦвет,, "Отчет_ПотребностиКЗаменеНаАналоги"));
		ЧастиСтроки.Добавить("   ");
	КонецЕсли;
	ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(Нстр("ru = '<Настроить>'"), Новый Шрифт("Consolas",,Истина,,Истина), ЦветаСтиля.ГиперссылкаЦвет, , "Обработка_УправлениеАналогами"));
	ЧастиСтроки.Добавить(".");
	
	Возврат Новый Структура("КолвоПозиций, Описание", КолвоПозицийЗаменыНаАналоги, Новый ФорматированнаяСтрока(ЧастиСтроки));
	
КонецФункции

&НаСерверебезКонтекста
Функция ПолучитьТекущееСостояниеАвтоОбновленияНаСервере(Пользователь, ПериодЗакупок, Субъекты223ФЗ)
	
	КолвоПозицийАвтоОбновления = Отчеты.ПозицииПотребностейДляАвтоматическогоОбновления.ПолучитьКолвоСПЗКАвтоОбновлению(Пользователь, ПериодЗакупок, Субъекты223ФЗ);
	
	// Наличие унификатов
	ЧастиСтроки = Новый Массив;
	Если КолвоПозицийАвтоОбновления > 0 Тогда
		СтрКолвоПозиций = СтрШаблон(НСтр("ru = '%1 поз.'"), КолвоПозицийАвтоОбновления);
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(СтрКолвоПозиций, Новый Шрифт("Consolas"), ЦветаСтиля.ГиперссылкаЦвет,, "Отчет_ПотребностиКАвтообновлению"));
		ЧастиСтроки.Добавить("   ");
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(Нстр("ru = '<Обработать>'"), Новый Шрифт("Consolas",,Истина,,Истина), ЦветаСтиля.ГиперссылкаЦвет, , "Обработать_ВыполнитьАвтоОбновлениеСПЗ"));
	Иначе
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'нет'"), Новый Шрифт("Consolas"), ЦветаСтиля.ГиперссылкаЦвет,, "Отчет_ПотребностиКАвтообновлению"));
	КонецЕсли;
	
	Возврат Новый Структура("КолвоПозиций, Описание", КолвоПозицийАвтоОбновления, Новый ФорматированнаяСтрока(ЧастиСтроки));
	
КонецФункции

&НаСерверебезКонтекста
Функция ПолучитьТекущееСостояниеСозданиеНовыхСПЗ(Пользователь, ПериодЗакупок, Субъекты223ФЗ)
	
	//
	КолвоПозиций = Отчеты.ПозицииПотребностейДляСозданияСПЗ.ПолучитьКолвоПозиций(Пользователь, ПериодЗакупок, Субъекты223ФЗ);
	
	// Наличие унификатов
	ЧастиСтроки = Новый Массив;
	//ЧастиСтроки.Добавить(НСтр("ru = 'Позиции потребности к автообновлению строк плана закупок: '"));
	
	Если КолвоПозиций > 0 Тогда
		СтрКолвоПозиций = СтрШаблон(НСтр("ru = '%1 поз.'"), КолвоПозиций);
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(СтрКолвоПозиций, Новый Шрифт("Consolas"), ЦветаСтиля.ГиперссылкаЦвет,, "Отчет_ПотребностиКСозданию"));
		ЧастиСтроки.Добавить("   ");
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(Нстр("ru = '<Обработать>'"), Новый Шрифт("Consolas",,Истина,,Истина), ЦветаСтиля.ГиперссылкаЦвет, , "Обработать_ВыполнитьСозданиеСПЗ"));
	Иначе
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'нет'"), Новый Шрифт("Consolas"), ЦветаСтиля.ГиперссылкаЦвет,, "Отчет_ПотребностиКСозданию"));
	КонецЕсли;
	
	Возврат Новый Структура("КолвоПозиций, Описание", КолвоПозиций, Новый ФорматированнаяСтрока(ЧастиСтроки));
	
КонецФункции

// Вовзращает массив, содержащий организации, у которых есть потребности в периоде
// ПериодЗакупокВход, но по которым не установлены правила заполнения строк плана 
// закупок. Параметр Субъекты223ФзВход отбирает организации, которые ведут или не 
// ведут закупки по ФЗ-223.
&НаСервереБезКонтекста
Функция ПолучитьМассивОрганизацияПотребностиБезПравил(ПериодЗакупокВход, Субъекты223ФзВход)
	РезультатФункции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПотребностиВНоменклатуреОбороты.Организация КАК Организация,
		|	ПотребностиВНоменклатуреОбороты.ПериодПотребности КАК ПериодПотребности,
		|	ПотребностиВНоменклатуреОбороты.Номенклатура КАК Номенклатура,
		|	ПотребностиВНоменклатуреОбороты.Характеристика КАК Характеристика,
		|	СУММА(ПотребностиВНоменклатуреОбороты.КоличествоПотребностьОборот) КАК КоличествоПотребностьОборот,
		|	СУММА(ПотребностиВНоменклатуреОбороты.СуммаПотребностьОборот) КАК СуммаПотребностьОборот,
		|	ЕСТЬNULL(ДействиеПоложенийОЗакупках.Положение, ЗНАЧЕНИЕ(Справочник.ПоложениеОЗакупках.ПустаяСсылка)) КАК Положение
		|ПОМЕСТИТЬ ВТ_ДанныеПотребностей
		|ИЗ
		|	РегистрНакопления.ПотребностиВНоменклатуре.Обороты(
		|			,
		|			,
		|			,
		|			Организация.ЗакупкаПоФЗ223 = &ЗакупкаПоФЗ223
		|				И ПериодПотребности В (&СписокПериодовПотребностей)) КАК ПотребностиВНоменклатуреОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействиеПоложенийОЗакупках КАК ДействиеПоложенийОЗакупках
		|		ПО ПотребностиВНоменклатуреОбороты.Организация = ДействиеПоложенийОЗакупках.Организация
		|			И ПотребностиВНоменклатуреОбороты.ПериодПотребности.ДатаНачала >= ДействиеПоложенийОЗакупках.ПериодЗакупок.ДатаНачала
		|			И ПотребностиВНоменклатуреОбороты.ПериодПотребности.ДатаОкончания <= ДействиеПоложенийОЗакупках.ПериодЗакупок.ДатаОкончания
		|ГДЕ
		|	(ПотребностиВНоменклатуреОбороты.КоличествоПотребностьОборот <> 0
		|			ИЛИ ПотребностиВНоменклатуреОбороты.СуммаПотребностьОборот <> 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПотребностиВНоменклатуреОбороты.Характеристика,
		|	ПотребностиВНоменклатуреОбороты.ПериодПотребности,
		|	ПотребностиВНоменклатуреОбороты.Номенклатура,
		|	ПотребностиВНоменклатуреОбороты.Организация,
		|	ЕСТЬNULL(ДействиеПоложенийОЗакупках.Положение, ЗНАЧЕНИЕ(Справочник.ПоложениеОЗакупках.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТ_ДанныеПотребностей.Организация КАК Организация
		|ИЗ
		|	ВТ_ДанныеПотребностей КАК ВТ_ДанныеПотребностей
		|ГДЕ
		|	ВТ_ДанныеПотребностей.Положение = ЗНАЧЕНИЕ(Справочник.ПоложениеОЗакупках.ПустаяСсылка)";
	СписокПериодовПотребностей = ПолучитьПараметрыОтбораПотребностей(ПериодЗакупокВход);
	Запрос.УстановитьПараметр("ЗакупкаПоФЗ223", Субъекты223ФзВход);
	Запрос.УстановитьПараметр("СписокПериодовПотребностей", СписокПериодовПотребностей);
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	РезультатФункции = Выгрузка.ВыгрузитьКолонку("Организация");
	РезультатФункции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатФункции);
	РезультатФункции = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(РезультатФункции);
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьМассивОрганизацияПотребностиБезПравил()

// Возвращает структуру описания обработки организаций без правил заполнения строк
// планов закупок, по которым есть потребности.
&НаСервереБезКонтекста
Функция ПолучитьТекущееСостояниеПравилНаСервере(ПользовательВход, ПериодЗакупокВход, Субъекты223ФзВход)
	// Инициализация.
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("КолвоПозиций", 0);
	РезультатФункции.Вставить("Описание", "");
	// Получение исходных данных.
	ВыгрузкаОрганизации = ПолучитьМассивОрганизацияПотребностиБезПравил(ПериодЗакупокВход, Субъекты223ФзВход);
	// Формирование строки представления.
	КолвоПозиций = ВыгрузкаОрганизации.Количество();
	ЧастиСтроки = Новый Массив;
	Если КолвоПозиций > 0 Тогда
		СтрКолвоПозиций = СтрШаблон(НСтр("ru = '%1 поз.'"), КолвоПозиций);
		ШрифтОбычный = Новый Шрифт("Consolas");
		ШрифтВыделенный = Новый Шрифт("Consolas", , Истина, , Истина);
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(СтрКолвоПозиций, ШрифтОбычный, ЦветаСтиля.ГиперссылкаЦвет,, "Отчет_ПравилаПотребностей"));
		ЧастиСтроки.Добавить("   ");
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '<Обработать>'"), ШрифтВыделенный, ЦветаСтиля.ГиперссылкаЦвет, , "Обработать_ПравилаПотребностей"));
	Иначе
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'нет'"), ШрифтОбычный, ЦветаСтиля.ГиперссылкаЦвет, , "Отчет_ПравилаПотребностей"));
	КонецЕсли;
	Описание = Новый ФорматированнаяСтрока(ЧастиСтроки);
	// Заполение итоговой структуры.
	РезультатФункции.Вставить("КолвоПозиций", КолвоПозиций);
	РезультатФункции.Вставить("Описание", Описание);
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьТекущееСостояниеПравилНаСервере()

&НаСервере
Функция ДобавитьПотребностиВРабочиеДанные(ТекущийПользователь, Знач ПериодЗакупки, Знач ПустойУИД, ТаблицаПотребностей, Субъекты223ФЗ, РазрешеноДобавлениеПротиворечивыхПозицийВКорзину)
	
	//
	РежимДобавления = Ложь;
	Если ТаблицаПотребностей.Итог("КоличествоКОбработке") <> 0 ИЛИ ТаблицаПотребностей.Итог("СуммаКОбработке") <> 0 Тогда
		РежимДобавления = Истина;
	КонецЕсли;
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5,0));
	ТаблицаДанных.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.ТипНоменклатураЕХ.Тип);
	ТаблицаДанных.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаДанных.Колонки.Добавить("ЕдиницаИзмерения", Метаданные.ОпределяемыеТипы.ТипЕдиницаИзмеренияЕХ.Тип);
	ТаблицаДанных.Колонки.Добавить("Коэффициент",Метаданные.ОпределяемыеТипы.КоэффициентЕдиницыИзмеренияУХ.Тип);
	ТаблицаДанных.Колонки.Добавить("АналитикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиПланированияНоменклатуры"));
	
	ТаблицаДанных.Колонки.Добавить("МестоПоставки", Новый ОписаниеТипов("СправочникСсылка.МестаПоставки"));
	ТаблицаДанных.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("СправочникСсылка.ПриоритетыПотребностей"));
	ТаблицаДанных.Колонки.Добавить("Менеджер", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанных.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаДанных.Колонки.Добавить("АналитикаПотребностей", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиПланированияПотребностей"));
	
	ТаблицаДанных.Колонки.Добавить("ЦФО", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДанных.Колонки.Добавить("Проект", Новый ОписаниеТипов("СправочникСсылка.Проекты"));
	ТаблицаДанных.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДанных.Колонки.Добавить("АналитикаСтруктуры", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиПланированияСтруктуры"));
	
	ТаблицаДанных.Колонки.Добавить("ПериодПотребности", Новый ОписаниеТипов("СправочникСсылка.Периоды"));
	ТаблицаДанных.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	ТаблицаДанных.Колонки.Добавить("Автор", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаДанных.Колонки.Добавить("ОрганизацияЗаказчик", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДанных.Колонки.Добавить("ПериодЗакупки", Новый ОписаниеТипов("СправочникСсылка.Периоды"));
	ТаблицаДанных.Колонки.Добавить("ИД", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаДанных.Колонки.Добавить("СПЗ", Новый ОписаниеТипов("ДокументСсылка.СтрокаПланаЗакупок"));
	ТаблицаДанных.Колонки.Добавить("ИсходнаяНоменклатура", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиПланированияНоменклатуры"));
	
	ТаблицаДанных.Колонки.Добавить("Количество");
	ТаблицаДанных.Колонки.Добавить("Сумма");
	
	НомерСтроки = 0;
	Для Каждого СтрокаДанных Из ТаблицаПотребностей Цикл
		
		Если РежимДобавления Тогда
			Если (СтрокаДанных.КоличествоКОбработке <> 0 ИЛИ СтрокаДанных.СуммаКОбработке <> 0) Тогда
				Строка = ТаблицаДанных.Добавить();
				ЗаполнитьЗначенияСвойств(Строка, СтрокаДанных);
				Строка.Количество = СтрокаДанных.КоличествоКОбработке;
				Строка.Сумма = СтрокаДанных.СуммаКОбработке;
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			Если (СтрокаДанных.КоличествоОбрабатывается <> 0 ИЛИ СтрокаДанных.СуммаОбрабатывается <> 0) Тогда
				Строка = ТаблицаДанных.Добавить();
				ЗаполнитьЗначенияСвойств(Строка, СтрокаДанных);
				Строка.Количество = -СтрокаДанных.КоличествоОбрабатывается;
				Строка.Сумма = -СтрокаДанных.СуммаОбрабатывается;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		//
		Строка.Автор = ТекущийПользователь;
		
		НомерСтроки = НомерСтроки + 1;
		Строка.НомерСтроки = НомерСтроки;
		
	КонецЦикла;
	
	ПотребностиУХ.ВыполнитьКлючеваниеКоллекцииПотребностей(ТаблицаДанных);
	
	нз = РегистрыСведений.ПроектыСПЗПозиции.СоздатьНаборЗаписей();
	
	нз.ДополнительныеСвойства.Вставить("РазрешеноНесколькоОрганизацийЗаказчиков", 
		РегистрыСведений.ПроектыСПЗ.ВЧерновикеРазрешеноНесколькоОрганизацийЗаказчиков(Субъекты223ФЗ));
	нз.ДополнительныеСвойства.Вставить("РазрешеноДобавлениеПротиворечивыхПозицийВКорзину", РазрешеноДобавлениеПротиворечивыхПозицийВКорзину);
	
	нз.Отбор.Автор.Установить(ТекущийПользователь); 
	нз.Отбор.ИД.Установить(ПустойУИД); 
	нз.Отбор.ПериодЗакупки.Установить(ПериодЗакупки); 
	нз.Прочитать();
	ДанныеРегистра = НЗ.Выгрузить();
	
	//
	Для каждого СтрокаДанных Из ТаблицаДанных Цикл
		ЗаполнитьЗначенияСвойств(ДанныеРегистра.Добавить(), СтрокаДанных);
	КонецЦикла;
	
	ДанныеРегистра.Свернуть("Автор, Валюта, ОрганизацияЗаказчик, ПериодЗакупки, ИД, АналитикаНоменклатуры, ПериодПотребности, АналитикаПотребностей, АналитикаСтруктуры", "Количество, Сумма");
	
	// Удалить пустые строки
	Поз = 0;
	Пока Поз < ДанныеРегистра.Количество() Цикл
		Строка = ДанныеРегистра[Поз];
		Если Строка.Количество = 0 И Строка.Сумма = 0 Тогда
			ДанныеРегистра.Удалить(Строка);
		Иначе
			Поз = Поз + 1;
		КонецЕсли;
	КонецЦикла;
	
	нз.Загрузить(ДанныеРегистра);
	
	Результат = Истина;
	
	//
	Попытка
		нз.Записать(Истина);
	Исключение
		Если НЗ.ДополнительныеСвойства.Свойство("РезультатОперации") Тогда
			Результат = НЗ.ДополнительныеСвойства.РезультатОперации;
		Иначе
			Результат = Новый Соответствие;
			//Результат.Вставить(0, "ru = 'Неизвестная ошибка при добавлении данных к обработке'");
			Результат.Вставить(0, ОписаниеОшибки());
		КонецЕсли;
	КонецПопытки; 
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьВыбранныеСтрокиВРабочиеДанные(ТекущийПользователь, Знач ПериодЗакупки, Знач ПустойУИД, Знач Данные, Субъекты223ФЗ, РазрешеноДобавлениеПротиворечивыхПозицийВКорзину)
	
	// Таблица для отбора выбранных позиций
	ТаблицаВыбранных = Новый ТаблицаЗначений;
	ТаблицаВыбранных.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.ТипНоменклатураЕХ.Тип);
	ТаблицаВыбранных.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	ТаблицаВыбранных.Колонки.Добавить("МестоПоставки", Новый ОписаниеТипов("СправочникСсылка.МестаПоставки"));
	ТаблицаВыбранных.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("СправочникСсылка.ПриоритетыПотребностей"));
	ТаблицаВыбранных.Колонки.Добавить("Менеджер", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаВыбранных.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаВыбранных.Колонки.Добавить("Проект", Новый ОписаниеТипов("СправочникСсылка.Проекты"));
	ТаблицаВыбранных.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаВыбранных.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	Для Каждого Строка Из Данные Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаВыбранных.Добавить(), Строка);
	КонецЦикла;
	
	ТаблицаПотребностей = ПолучитьСписокПотребностиВыбранные(ТаблицаВыбранных);
	
	Возврат ДобавитьПотребностиВРабочиеДанные(ТекущийПользователь, ПериодЗакупки, ПустойУИД, ТаблицаПотребностей, Объект.Субъекты223ФЗ, РазрешеноДобавлениеПротиворечивыхПозицийВКорзину);
	
КонецФункции

&НаКлиенте
Процедура ПометитьСтрокиКОбработке()
	
	Данные = Новый Массив;
	
	ТаблицаФормы = Элементы.СписокПотребности;
	
	//
	Для Каждого Строка Из ТаблицаФормы.ВыделенныеСтроки Цикл
		Данные.Добавить(ТаблицаФормы.ДанныеСтроки(Строка));
	КонецЦикла;
	
	РезультатОперации = ДобавитьВыбранныеСтрокиВРабочиеДанные(
		ТекущийПользователь, 
		Объект.ПериодЗакупки, 
		ПустойУИД, 
		Данные, 
		Объект.Субъекты223ФЗ, 
		РазрешеноДобавлениеПротиворечивыхПозицийВКорзину()
	);
	
	Если РезультатОперации = Истина Тогда
		Если РежимФормирования = 1 Тогда
			// 1 - автомат, 2 - ручной, 3 - автомат из корзины
			РежимФормирования = 2;
			УстановитьКнопкиРежимаДобавления();
		КонецЕсли;
	Иначе
		ОбработатьРезультатОперации(РезультатОперации);
	КонецЕсли;
	
	УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатОперации(РезультатОперации)
	
	МассивСообщений = Новый Массив;
	
	Для Каждого КлючЗначение Из РезультатОперации Цикл
		
		Результат = КлючЗначение.Значение;
		Если НЕ Результат.Ошибка Тогда
			Продолжить;
		КонецЕсли;
		
		//
		Если Результат.АдресВХ <> неопределено И ЭтоАдресВременногоХранилища(Результат.АдресВХ) Тогда
			Если СтрначинаетсяС(ИмяФормы, "Внешняя") Тогда
				ОткрытьФорму("ВнешняяОбработка.ФормированиеСПЗ.Форма.ФормаРезультатОперации", Новый Структура("РезультатОперации", Результат),,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Иначе
				ОткрытьФорму("Обработка.ФормированиеСПЗ.Форма.ФормаРезультатОперации", Новый Структура("РезультатОперации", Результат),,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
		Иначе
			МассивСообщений.Добавить(Результат.Сообщение);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСообщений.Количество() > 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрСоединить(МассивСообщений, Символы.ПС);
		Сообщение.Поле = "ИнформационнаяНадпись";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПриНажатииНаИнформационнуюНадпись(Объект);
	
КонецПроцедуры

// Процедура вызывается при нажатии на информационную надпись - строку с информацией 
// о количестве и сумме подобранных товаров на формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора,
//	Объект - ОбработкаОбъект, ДокументОбъект - объект подбора.
//
&НаКлиенте
Процедура ПриНажатииНаИнформационнуюНадпись(Объект) Экспорт
	
	ЭтаФорма.ПоказыватьПодобранныеТовары = Не ЭтаФорма.ПоказыватьПодобранныеТовары;
	УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

// Устанавливает текст информационной надписи о количестве и сумме
// товаров подобранных в корзину на форме подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьТекстИнформационнойНадписи(Форма)
	
	//Корзина = Форма.Объект.Корзина;
	////Валюта = Форма.Валюта;
	//
	////ИнформационнаяНадпись = НСтр("ru = 'Всего подобрано [Количество] товаров, на сумму [Сумма] [Валюта] [СкрытьПоказать]'");
	//ИнформационнаяНадпись = НСтр("ru = 'Всего подобрано [Количество] товаров, на сумму <БлокСумм> [СкрытьПоказать]'");
	
	
	СкрытьПоказать = "";
	//
	//Если Форма.РежимПодбораБезКоличественныхПараметров Или Форма.РежимПодбораБезСуммовыхПараметров Тогда
	//	ИнформационнаяНадпись = НСтр("ru = 'Всего подобрано [Количество] товаров [СкрытьПоказать]'");
	//КонецЕсли;
	//
	СкрытьПоказать = ?(Форма.ПоказыватьПодобранныеТовары, НСтр("ru = '(скрыть)'"), НСтр("ru = '(показать)'"));
	
	КоличествоПозиций = ВсегоПодобраноПозиций(Форма.ТекущийПользователь, Форма.Объект.ПериодЗакупки, Форма.Объект.Субъекты223ФЗ);
	
	Если КоличествоПозиций = 0 Тогда
		ИнформационнаяНадпись = НСтр("ru = 'Корзина ПУСТА. [СкрытьПоказать]'");
	Иначе
		ИнформационнаяНадпись = НСтр("ru = 'Всего подобрано [Количество] [ТекстПозиций]. [СкрытьПоказать]'");
	КонецЕсли;
	
	СтрКоличество = НРег(ЧислоПрописью(КоличествоПозиций, "Л=ru_RU;ДП=Ложь;НП=Истина;НД=Ложь;", НСтр("ru = 'позиция,позиции,позиций,ж,,,,,0'")));
	
	ПоследнийПробел = СтрНайти(СтрКоличество, " ", НаправлениеПоиска.СКонца);
	ТекстПозиций = Сред(СтрКоличество, ПоследнийПробел+1);
	
	Количество = Формат(КоличествоПозиций, "ЧДЦ=0");
	
	ВставляемыеЗначения = Новый Структура;
	ВставляемыеЗначения.Вставить("Количество",		Количество);
	ВставляемыеЗначения.Вставить("ТекстПозиций",	ТекстПозиций);
	ВставляемыеЗначения.Вставить("СкрытьПоказать",	СкрытьПоказать);
	//
	//ИтогиПоВалютам = ИтогоВРазрезеВалют(Корзина);
	Поз = 0;
	
	//
	//БлокСумм = "";
	//Для Каждого Строка Из ИтогиПоВалютам Цикл
	//	
	//	Если Строка.СуммаВВалютеПоставки = 0 Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Поз = Поз + 1;
	//	
	//	БлокСумм = БлокСумм + ?(БлокСумм = "", "", ", ")+"[Сумма"+Поз+"] [Валюта"+Поз+"]";
	//	
	//	//Сумма = Формат(Корзина.Итог("СуммаВВалютеПоставки"), "ЧДЦ=2; ЧН=");
	//	ВставляемыеЗначения.Вставить("Сумма"+Поз,	Формат(Строка.СуммаВВалютеПоставки, "ЧДЦ=2; ЧН="));
	//	ВставляемыеЗначения.Вставить("Валюта"+Поз,	Строка.ВалютаСоглашения);
	//	
	//КонецЦикла;
	//
	//ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись, "<БлокСумм>", БлокСумм);
	ИнформационнаяНадпись = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ИнформационнаяНадпись, ВставляемыеЗначения);
	Форма.ИнформационнаяНадпись = ИнформационнаяНадпись;
	
	//
	Форма.Элементы.ОбластьПодобранныеПланыПоставкиПоДоговорам.Видимость = Форма.ПоказыватьПодобранныеТовары;
	
КонецПроцедуры

#Область УправлениеКорзиной
	
&НаСервереБезКонтекста
Функция ЕстьОтобранныеПотребности(ТекущийПользователь, ПериодЗакупки)
	
	Возврат НЕ РегистрыСведений.ПроектыСПЗ.КорзинаПользователяПуста(
		ТекущийПользователь, ПериодЗакупки)
	
КонецФункции
	
&НаСервереБезКонтекста
Функция ВсегоПодобраноПозиций(ТекущийПользователь, ПериодЗакупки, Субъекты223ФЗ)
	
	Возврат РегистрыСведений.ПроектыСПЗ.КоличествоПозицийВКорзинеПользователя(
		ТекущийПользователь, ПериодЗакупки, Субъекты223ФЗ);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОчиститьКорзину(Автор, ПериодЗакупки, Субъекты223ФЗ)
	
	РегистрыСведений.ПроектыСПЗ.ОчиститьКорзинуПользователя(Автор, ПериодЗакупки, Субъекты223ФЗ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВКорзинеНесколькоОрганизацийЗаказчиков(ТекущийПользователь, ПериодЗакупки)
	
	Возврат РегистрыСведений.ПроектыСПЗ.ВКорзинеНесколькоОрганизацийЗаказчиков(ТекущийПользователь, ПериодЗакупки);
	
КонецФункции

#КонецОбласти 

#Область УправлениеПроектамиСПЗ
	
&НаСервереБезКонтекста
Процедура УдалитьВсеПроектыСПЗНаСервере(ТекущийПользователь, ПериодЗакупок, Субъекты223ФЗ)
	
	РегистрыСведений.ПроектыСПЗ.УдалитьВсеПроектыСПЗ(
		ТекущийПользователь,
		ПериодЗакупок, Субъекты223ФЗ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьПроектыСПЗНаСервере(ТекущийПользователь, ПериодЗакупок, ИД)
	
	РегистрыСведений.ПроектыСПЗ.УдалитьПроектСПЗ(
		ТекущийПользователь,
		ПериодЗакупок, 
		ИД);
	
КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура УстановитьЗаголовокФормы(ТекстПодЗаголовка)
	
	ТекстШаблона = НСтр("ru = 'Помощник формирования программы закупок (%1)'");
	Заголовок = СтрШаблон(ТекстШаблона, ТекстПодЗаголовка);
	
КонецПроцедуры

#Область ДинамическиеОтборы

#Область РаботаСДеревомОтбораПоСвойствамВидаНоменклатуры

&НаСервере
Процедура УстановитьУсловноеОформлениеДинамическихОтборов()

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбора.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ФиксированноеЗначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Ложь, Ложь, Истина, Ложь, ));

	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставление.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОтборов.Отбор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Истина, Ложь, Ложь, Ложь, ));
	
КонецПроцедуры

// Заполняет дерево отборов по свойствам вида номенклатуры выбранного на форме.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
&НаСервереБезКонтекста
Процедура ЗаполнитьДеревоОтборов(Форма)
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ДеревоОтборов.Строки.Очистить();
	
	ЗаполнитьДеревоЗначенийОтборов(Форма, ДеревоОтборов);
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

// Заполняет дерево значений отборов формы (списка, подбора) значениями
// отбора для номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подбора.
//	ДеревоОтборов (ДеревоЗначений) - дерево значений отборов свойств.
//
&НаСервереБезКонтекста
Процедура ЗаполнитьДеревоЗначенийОтборов(Форма, ДеревоОтборов, ИсключитьОрганизатораИСпособЗакупки = Ложь)
	
	Элементы = Форма.Элементы;
	
	// Данные для управления видимостью колонок в списке
	КолонкиПоРеквизиту = Новый Соответствие;
	КолонкиПоРеквизиту.Вставить("Приоритет",	Элементы.СписокПотребностиПриоритет);
	КолонкиПоРеквизиту.Вставить("Менеджер", 	Элементы.СписокПотребностиМенеджер);
	КолонкиПоРеквизиту.Вставить("Назначение",	Элементы.СписокПотребностиНазначение);
	КолонкиПоРеквизиту.Вставить("Проект", 		Элементы.СписокПотребностиПроект);
	КолонкиПоРеквизиту.Вставить("Организация", 	Элементы.СписокПотребностиОрганизация);
	
	ВидНоменклатурыДляХарактеристик = Неопределено;
	
	пТаблицаПараметровОтбора = Форма.ТаблицаПараметровОтбора.Выгрузить();
	
	СтрокаРеквизита = Неопределено;
	//МаксимальноеКоличествоЗначенийВДереве = Константы.МаксимальноеКоличествоЭлементовВДеревеОтборовНоменклатуры.Получить();
	МаксимальноеКоличествоЗначенийВДереве = 50;
	
	СтрокаРеквизита     = Неопределено;
	
	//
	Таблица = ПолучитьСписокПотребностиБезКонтекста(Форма);
	
	//////////////////////////////////////////
	ТМП = Таблица.Скопировать(, "Номенклатура, НоменклатураНаименование, ТоварнаяКатегория, ОКПД2");
	ТМП.Свернуть("Номенклатура, НоменклатураНаименование, ТоварнаяКатегория, ОКПД2", "");
	ТМП.Сортировать("НоменклатураНаименование");
	ТМП.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	ТМП.ЗаполнитьЗначения(Истина, "Пометка");
	Форма.Объект.Номенклатура.Загрузить(ТМП);
	
	//////////////////////////////////////////
	РеквизитыБыстрогоОтбора = неопределено;
	ДобавитьРеквизитБО(РеквизитыБыстрогоОтбора, "ПериодПотребности",	"ПериодПотребности",	Новый ОписаниеТипов("СправочникСсылка.Периоды"),				НСтр("ru = 'Период'"));
	ДобавитьРеквизитБО(РеквизитыБыстрогоОтбора, "Приоритет",			"Приоритет",			Новый ОписаниеТипов("СправочникСсылка.ПриоритетыПотребностей"),	НСтр("ru = 'Приоритет'"));
	ДобавитьРеквизитБО(РеквизитыБыстрогоОтбора, "МестоПоставки", 		"МестоПоставки",		Новый ОписаниеТипов("СправочникСсылка.МестаПоставки"),			НСтр("ru = 'Место поставки'"));
	ДобавитьРеквизитБО(РеквизитыБыстрогоОтбора, "Проект",				"Проект",				Новый ОписаниеТипов("СправочникСсылка.Проекты"),				НСтр("ru = 'Проект'"), Справочники.Проекты.ПустаяСсылка(), НСтр("ru = '<Без проекта>'"));
	ДобавитьРеквизитБО(РеквизитыБыстрогоОтбора, "Менеджер",				"Менеджер", 			Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"),			НСтр("ru = 'Заказчик'"));
	ДобавитьРеквизитБО(РеквизитыБыстрогоОтбора, "Назначение",			"Назначение", 			Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"),	НСтр("ru = 'Назначение'"));
	ДобавитьРеквизитБО(РеквизитыБыстрогоОтбора, "ТоварнаяКатегория",	"ТоварнаяКатегория", 	Новый ОписаниеТипов("СправочникСсылка.ТоварныеКатегории"),		НСтр("ru = 'Товарная категория'"),,,Истина);
	ДобавитьРеквизитБО(РеквизитыБыстрогоОтбора, "ОКПД2",				"ОКПД2", 				Новый ОписаниеТипов("СправочникСсылка.КлассификаторОКПД2"),		НСтр("ru = 'ОКПД2'"),,,Истина);
	ДобавитьРеквизитБО(РеквизитыБыстрогоОтбора, "Валюта",				"Валюта", 				Новый ОписаниеТипов("СправочникСсылка.Валюты"),			НСтр("ru = 'Валюта'"));
	
	Если НЕ ИсключитьОрганизатораИСпособЗакупки Тогда
		ДобавитьРеквизитБО(РеквизитыБыстрогоОтбора, "СпособЗакупки",		"СпособЗакупки", 		Новый ОписаниеТипов("ПеречислениеСсылка.СпособыВыбораПоставщика"),	НСтр("ru = 'Способ закупки'"));
		ДобавитьРеквизитБО(РеквизитыБыстрогоОтбора, "Организатор",			"Организатор", 			Новый ОписаниеТипов("СправочникСсылка.Организации"),			НСтр("ru = 'Организатор'"));
	КонецЕсли;
	
	пТаблицаПараметровОтбора.Очистить();
	
	Для Каждого Реквизит Из РеквизитыБыстрогоОтбора Цикл
		
		ТипРеквизита = Реквизит.ОписаниеТипаЗначения;
		
		Если СтрокаРеквизита <> Неопределено И СтрокаРеквизита.Строки.Количество() > 0 Тогда
			Если СтрокаРеквизита.ИмяРеквизита <> "ПериодПотребности" Тогда
				СтрокаРеквизита.Строки.Сортировать("Представление");
			КонецЕсли;
		КонецЕсли;
		
		СтрокаРеквизита = ДеревоОтборов.Строки.Добавить();
		
		СтрокаРеквизита.ИмяРеквизита          = Реквизит.ИмяРеквизита;
		Если Реквизит.ЭтоДопРеквизит Тогда
			СтрокаРеквизита.ИмяРеквизита          = Реквизит.ПредставлениеРеквизита;
		КонецЕсли;
		СтрокаРеквизита.ЭтоДопРеквизит        = Реквизит.ЭтоДопРеквизит;
		СтрокаРеквизита.Представление         = Реквизит.ПредставлениеРеквизита;
		Если ЗначениеЗаполнено(Реквизит.Заголовок) Тогда
			СтрокаРеквизита.Представление = Реквизит.Заголовок;
		КонецЕсли;
		СтрокаРеквизита.ОтборДоступен         = Истина;

		Отбор = Новый Структура();
		Отбор.Вставить("ИмяРеквизита",СтрокаРеквизита.ИмяРеквизита);
		ОтобранныеСтроки = пТаблицаПараметровОтбора.НайтиСтроки(Отбор);
		
		Если ТипРеквизита.СодержитТип(Тип("Дата")) Тогда
			
			Если ОтобранныеСтроки.Количество()>0 Тогда
				ОтобранныеСтроки[0].Отбор = Истина;
				ЗаполнитьЗначенияСвойств(СтрокаРеквизита,ОтобранныеСтроки[0]);
			Иначе
				СтрокаРеквизита.ИнтервалОт            = Дата('00010101');
				СтрокаРеквизита.ИнтервалДо            = Дата('00010101');
				СтрокаРеквизита.ФиксированноеЗначение = Истина;
				СтрокаРеквизита.ЗначениеОтбора        = Дата('00010101');
				СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
			КонецЕсли;
			
		ИначеЕсли ТипРеквизита.СодержитТип(Тип("Число"))Тогда
			
			Если ОтобранныеСтроки.Количество()>0 Тогда
				ОтобранныеСтроки[0].Отбор = Истина;
				ЗаполнитьЗначенияСвойств(СтрокаРеквизита,ОтобранныеСтроки[0]);
			Иначе
				СтрокаРеквизита.ИнтервалОт            = 0;
				СтрокаРеквизита.ИнтервалДо            = 0;
				СтрокаРеквизита.ФиксированноеЗначение = Истина;
				СтрокаРеквизита.ЗначениеОтбора        = 0;
				СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
			КонецЕсли;
			
		ИначеЕсли ТипРеквизита.СодержитТип(Тип("Булево")) Тогда
			
			СтрокаРеквизита.ЗначениеОтбора = Истина;
			Если ОтобранныеСтроки.Количество()>0 Тогда
				ОтобранныеСтроки[0].Отбор = Истина;
				СтрокаРеквизита.Отбор = Истина;
			КонецЕсли;
			
		ИначеЕсли ТипРеквизита.СодержитТип(Тип("Строка")) Тогда
			
			Если ОтобранныеСтроки.Количество()>0 Тогда
				ОтобранныеСтроки[0].Отбор = Истина;
				ЗаполнитьЗначенияСвойств(СтрокаРеквизита,ОтобранныеСтроки[0]);
			Иначе
				СтрокаРеквизита.ЗначениеОтбора        = "";
				СтрокаРеквизита.ФиксированноеЗначение = Истина;
				СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
				СтрокаРеквизита.ОтборДоступен         = Истина;
			КонецЕсли;
		
		Иначе
			
			СтрокаРеквизита.ОтборДоступен         = Ложь;
			
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТипРеквизита.Типы()[0]);
			
			Если Не ПравоДоступа("Чтение", МетаданныеТипа) Тогда
				ДеревоОтборов.Строки.Удалить(СтрокаРеквизита);
				СтрокаРеквизита = Неопределено;
				Продолжить;
			КонецЕсли;
			
			Если Реквизит.ИмяРеквизита = "ПериодПотребности" Тогда
				МассивЗначений = Форма.Объект.ПериодыПотребности.Выгрузить().ВыгрузитьКолонку("Период");
			Иначе
				//
				ТМП = Таблица.Скопировать(, Реквизит.ИмяРеквизита);
				ТМП.Свернуть(Реквизит.ИмяРеквизита,"");
				МассивЗначений = ТМП.ВыгрузитьКолонку(Реквизит.ИмяРеквизита);
			КонецЕсли;
			
			//
			КолонкаСписка = КолонкиПоРеквизиту[Реквизит.ИмяРеквизита];
			
			//
			Если МассивЗначений.Количество() < 2 Тогда
				ДеревоОтборов.Строки.Удалить(СтрокаРеквизита);
				СтрокаРеквизита = Неопределено;
				
				//
				Если КолонкаСписка <> неопределено Тогда
					КолонкаСписка.Видимость = Ложь;
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			//
			Если КолонкаСписка <> неопределено Тогда
				КолонкаСписка.Видимость = Истина;
			КонецЕсли;
			
			Если Реквизит.ИмяРеквизита = "ПериодПотребности" Тогда
				МассивЗначений = ПолучитьОтсортированныйМассивПериодов(МассивЗначений);
			КонецЕсли;
			
			Для Каждого ЗначениеОтбора Из МассивЗначений Цикл
				Параметр = пТаблицаПараметровОтбора.Добавить();
				Параметр.ИмяРеквизита = Реквизит.ИмяРеквизита;
				Параметр.ЗначениеОтбора = ЗначениеОтбора;
				Параметр.ЭтоДопРеквизит = Реквизит.ЭтоДопРеквизит;
				Параметр.Представление = Строка(ЗначениеОтбора);
				
				Если ЗначениеОтбора = Реквизит.ПустоеЗначение Тогда
					Параметр.Представление = Реквизит.ПредставлениеПустогоЗначения;
				КонецЕсли;
				
			КонецЦикла;
			
			// 
			Если МассивЗначений.Количество() = 0 Тогда
				ДеревоОтборов.Строки.Удалить(СтрокаРеквизита);
				СтрокаРеквизита = Неопределено;
				
			ИначеЕсли МассивЗначений.Количество() > МаксимальноеКоличествоЗначенийВДереве
				ИЛИ Реквизит.ОтборКакФиксированноеЗначение Тогда
				//?
				Если ОтобранныеСтроки.Количество()>0 Тогда
					ОтобранныеСтроки[0].Отбор = Истина;
					ЗаполнитьЗначенияСвойств(СтрокаРеквизита,ОтобранныеСтроки[0]);
				Иначе
					СтрокаРеквизита.ЗначениеОтбора        = Новый СписокЗначений;
					СтрокаРеквизита.ФиксированноеЗначение = Истина;
					СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
					СтрокаРеквизита.ОтборДоступен         = Истина;
				КонецЕсли;
				
			Иначе
				
				ОтборУстановлен = Ложь;
				
				Для Каждого Значение Из МассивЗначений Цикл
					
					Если (МассивЗначений.Количество() = 1 
						И Не ЗначениеЗаполнено(Значение)) Тогда
						ДеревоОтборов.Строки.Удалить(СтрокаРеквизита);
						СтрокаРеквизита = Неопределено;
						Продолжить;
					КонецЕсли;
					
					СтрокаЗначения = СтрокаРеквизита.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаЗначения, СтрокаРеквизита);
					
					СтрокаЗначения.ЗначениеОтбора = Значение;
					
					// Получение представления построчно для 50 значений работает быстрее, выборка его сразу в запросе,
					// формирующем ВыборкаЗначений, т.к. там есть группировка
					// Так же это работает быстрее, чем запрос представления (функция ПРЕДСТАВЛЕНИЕ языка запросов),
					// сделанный сразу для 50 значений.
					Если Реквизит.ПустоеЗначение = Значение Тогда
						СтрокаЗначения.Представление  = Реквизит.ПредставлениеПустогоЗначения;
					Иначе
						СтрокаЗначения.Представление  = Строка(СтрокаЗначения.ЗначениеОтбора);
					КонецЕсли;
					СтрокаЗначения.ОтборДоступен  = Истина;
					
					Отбор = Новый Структура();
					Отбор.Вставить("ИмяРеквизита",СтрокаРеквизита.ИмяРеквизита);
					Отбор.Вставить("Представление",СтрокаЗначения.Представление);
					ОтобранныеСтроки = пТаблицаПараметровОтбора.НайтиСтроки(Отбор);
					Если ОтобранныеСтроки.Количество()>0 Тогда
						ОтобранныеСтроки[0].Отбор = Истина;
						СтрокаЗначения.Отбор = Истина;
						ОтборУстановлен = Истина;
					КонецЕсли;
					
				КонецЦикла;
				
				Если СтрокаРеквизита <> Неопределено Тогда
					СтрокаРеквизита.Отбор = ОтборУстановлен;
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Форма.ТаблицаПараметровОтбора.Загрузить(пТаблицаПараметровОтбора);
	
	Если СтрокаРеквизита <> Неопределено
		И СтрокаРеквизита.Строки.Количество() > 0 Тогда
		СтрокаРеквизита.Строки.Сортировать("Представление");
	КонецЕсли;
	
	// Видимость колонок, которых нет в динамических отборах
	РеквизитыБезОтборов = Новый Структура("ОрганизацияЗаказчик, Организация");
	Для Каждого КлючЗначение Из РеквизитыБезОтборов Цикл
		//
		КолонкаСписка = КолонкиПоРеквизиту[КлючЗначение.Ключ];
		Если КолонкаСписка <> неопределено Тогда
			ТМП = Таблица.Скопировать(, КлючЗначение.Ключ);
			ТМП.Свернуть(КлючЗначение.Ключ,"");
			
			КолонкаСписка.Видимость = ТМП.Количество() > 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОтсортированныйМассивПериодов(МассивЗначений)
	
	СтруктураПериодов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивЗначений, "ДатаНачала");

	//
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("Период", Новый ОписаниеТипов("СправочникСсылка.Периоды"));
	ТаблицаПериодов.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Для Каждого КлючЗначения Из СтруктураПериодов Цикл
		Строка = ТаблицаПериодов.Добавить();
		Строка.Период = КлючЗначения.Ключ;
		Строка.Дата = КлючЗначения.Значение;
	КонецЦикла;
	ТаблицаПериодов.Сортировать("Дата");
	Возврат ТаблицаПериодов.ВыгрузитьКолонку("Период");
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьРеквизитБО(РеквизитыБыстрогоОтбора, ИмяРеквизита, ПредставлениеРеквизита, ОписаниеТипаЗначения, Заголовок, ПустоеЗначение =  неопределено, ПредставлениеПустогоЗначения="", ОтборКакФиксированноеЗначение = Ложь);
	
	Если ТипЗнч(РеквизитыБыстрогоОтбора) <> Тип("ТаблицаЗначений") Тогда
		
		РеквизитыБыстрогоОтбора = Новый ТаблицаЗначений;
		РеквизитыБыстрогоОтбора.Колонки.Добавить("ИмяРеквизита", ОбщегоНазначения.ОписаниеТипаСтрока(50));
		РеквизитыБыстрогоОтбора.Колонки.Добавить("ПредставлениеРеквизита", ОбщегоНазначения.ОписаниеТипаСтрока(50));
		РеквизитыБыстрогоОтбора.Колонки.Добавить("ЭтоДопРеквизит", Новый ОписаниеТипов("Булево"));
		РеквизитыБыстрогоОтбора.Колонки.Добавить("ОписаниеТипаЗначения");
		РеквизитыБыстрогоОтбора.Колонки.Добавить("Заголовок", ОбщегоНазначения.ОписаниеТипаСтрока(50));
		РеквизитыБыстрогоОтбора.Колонки.Добавить("ПустоеЗначение");
		РеквизитыБыстрогоОтбора.Колонки.Добавить("ПредставлениеПустогоЗначения", ОбщегоНазначения.ОписаниеТипаСтрока(50));
		РеквизитыБыстрогоОтбора.Колонки.Добавить("ОтборКакФиксированноеЗначение", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Реквизит = РеквизитыБыстрогоОтбора.Добавить();
	Реквизит.ИмяРеквизита = ИмяРеквизита;
	Реквизит.ПредставлениеРеквизита = ПредставлениеРеквизита;
	Реквизит.ОписаниеТипаЗначения = ОписаниеТипаЗначения;
	Реквизит.Заголовок = Заголовок;
	Реквизит.ЭтоДопРеквизит = Ложь;
	Реквизит.ПустоеЗначение = ПустоеЗначение;
	Реквизит.ПредставлениеПустогоЗначения = ПредставлениеПустогоЗначения;
	Реквизит.ОтборКакФиксированноеЗначение = ОтборКакФиксированноеЗначение;
	
КонецПроцедуры

// Очищает дерево свойств для отбора по свойствам вида номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
&НаСервереБезКонтекста
Процедура ОчиститьДеревоОтборов(Форма)
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ДеревоОтборов.Строки.Очистить();
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

#КонецОбласти 

#Область СобытияЭлементов

&НаКлиенте
Процедура ДеревоОтборовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПодборТоваровКлиент_ДеревоОтборовВыбор(ЭтаФорма, Новый ОписаниеОповещения("ДеревоОтборовПриИзмененииЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовОтборПриИзменении(Элемент)
	
	ДеревоОтборовОтборПриИзмененииНаКлиенте(ЭтаФорма, Новый ОписаниеОповещения("ДеревоОтборовПриИзмененииЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ПодборТоваровКлиент_ДеревоОтборовПриИзмененииЗавершение(ЭтаФорма);
	ДеревоОтборовОтборПриИзмененииНаСервере();
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции_НаКлиенте

// Возвращает число - код варианта действий которое было выполнено с деревом отборов
// при событии выбора значения в дереве отборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка справочника номенклатуры или форма подбора.
//
// Возвращаемое значение:
//	Число.
//	0 - никакого изменения значений в дереве отборов не произошло,
//	1 - было выбрано значение в строке с "фиксированным" значением,
//	в этом случае необходимо открыть форму установки "фиксированного" значения.
//
&НаКлиенте
Функция ВариантДействийПриВыбореЗначенияДереваОтборов(Форма)
	
	пТекущийЭлемент  = Форма.Элементы.ДеревоОтборов.ТекущийЭлемент;
	ТекущаяСтрока   = Форма.Элементы.ДеревоОтборов.ТекущаяСтрока;
	ТекущиеДанные   = Форма.Элементы.ДеревоОтборов.ТекущиеДанные;
	
	ВариантДействий = 0;
	
	Если пТекущийЭлемент = Форма.Элементы.ДеревоОтборовПредставлениеОтбора Тогда
		
		Если ТекущиеДанные.ФиксированноеЗначение Тогда
			
			ВариантДействий = 1;
			
		КонецЕсли;
		
	ИначеЕсли пТекущийЭлемент = Форма.Элементы.ДеревоОтборовПредставление Тогда
		
		Если ТекущиеДанные.ФиксированноеЗначение Тогда
			
			ВариантДействий = 1;
			
		ИначеЕсли Не ТекущиеДанные.ОтборДоступен Тогда
			
			// Если был щелчок по родительской строке, то свернуть/развернуть узел.
			
			Если Форма.Элементы.ДеревоОтборов.Развернут(ТекущаяСтрока) Тогда
				Форма.Элементы.ДеревоОтборов.Свернуть(ТекущаяСтрока);
			Иначе
				Форма.Элементы.ДеревоОтборов.Развернуть(ТекущаяСтрока);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВариантДействий;
	
КонецФункции

// Возвращает признак необходимости установки отбора  динамического списка номенклатуры
//  на формах отбора, по значениям дерева отборов. Вызывается при нажатии на поле выбора
//  фиксированного значения в строке дерева отборов.
//  Возвращает в оповещении: Истина - значение в дереве отборов изменено и нужно применить значение отбора
//  к списку номенклатуры, или Ложь - значение отбора не изменено.
//
// Параметры:
//  Форма					 - УправляемаяФорма	 - форма списка или форма подбора.
//  ОповещениеПослеОбработки - ОписаниеОповещения - описание оповещения после обработки.
//
&НаКлиенте
Процедура ПодборТоваровКлиент_ДеревоОтборовВыбор(Форма, ОповещениеПослеОбработки = Неопределено) Экспорт
	
	ВариантДействий = ВариантДействийПриВыбореЗначенияДереваОтборов(Форма);
	
	Если ВариантДействий = 1 Тогда // нажали на гиперссылку с "фиксированным" значением
		УстановитьФиксированныйОтбор(Форма, ОповещениеПослеОбработки);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак необходимости установки отбора  динамического списка номенклатуры
//  на формах отбора, по значениям дерева отборов. Вызывается при нажатии на поле выбора
//  фиксированного значения в строке дерева отборов.
//  Возвращает в оповещении: Истина - значение в дереве отборов изменено и нужно применить значение отбора
//  к списку номенклатуры, или Ложь - значение отбора не изменено.
//
// Параметры:
//  Форма					 - УправляемаяФорма	 - форма списка или форма подбора.
//  ОповещениеПослеОбработки - ОписаниеОповещения - описание оповещения после обработки.
//
&НаКлиенте
Процедура УстановитьФиксированныйОтбор(Форма, ОповещениеПослеОбработки = Неопределено)
	
	ТекущиеДанные = Форма.Элементы.ДеревоОтборов.ТекущиеДанные;
	
	Если Не ТекущиеДанные.ФиксированноеЗначение Тогда
		Если ОповещениеПослеОбработки <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ТипЗначенияОтбора = ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
	
	Если ТипЗначенияОтбора = Тип("СписокЗначений") Тогда
		
		// Тип значения - строка. В этом случае открывается форма установки значения и список выбора
		// поля выбора значения заполняется доступными значениями.
		
		ПоНоменклатуре = Истина;
		
		ЗначениеОтбора = СокрЛП(ТекущиеДанные.ЗначениеОтбора);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ИмяРеквизита", ТекущиеДанные.ИмяРеквизита);
		Если СтруктураПараметров.ИмяРеквизита = "ОКПД2" Тогда
			СтруктураПараметров.ИмяРеквизита = "КодОКПД2";
		КонецЕсли;
		СтруктураПараметров.Вставить("ЗначениеОтбора", ТекущиеДанные.ЗначениеОтбора);
		СтруктураПараметров.Вставить("ЭтоДопРеквизит", ТекущиеДанные.ЭтоДопРеквизит);
		СтруктураПараметров.Вставить("ОтборПоНоменклатуре", ПоНоменклатуре);
		
	ИначеЕсли ТипЗначенияОтбора = Тип("Строка") Тогда
		
		//// Тип значения - строка. В этом случае открывается форма установки значения и список выбора
		//// поля выбора значения заполняется доступными значениями.
		//
		//ПоНоменклатуре = Истина;
		//
		//ЗначениеОтбора = СокрЛП(ТекущиеДанные.ЗначениеОтбора);
		//
		//СписокЗначенийРеквизита = ПодборТоваровВызовСервера_СписокЗначенийРеквизита(
		//	ВидНоменклатуры, 
		//	ТекущиеДанные.ИмяРеквизита, 
		//	ТекущиеДанные.ЭтоДопРеквизит, 
		//	ПоНоменклатуре);
		//	
		//СтруктураПараметров = Новый Структура;
		//СтруктураПараметров.Вставить("ИмяРеквизита", ТекущиеДанные.Представление);
		//СтруктураПараметров.Вставить("СписокСтрокОтбора", СписокЗначенийРеквизита);
		//СтруктураПараметров.Вставить("ЗначениеОтбора", ТекущиеДанные.ЗначениеОтбора);
		//СтруктураПараметров.Вставить("ТипЗначения", ТипЗначенияОтбора);
		
	Иначе
		
		// Тип значения - число или дата, в этом случае открывается форма установки интервала.
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ИмяРеквизита", ТекущиеДанные.Представление);
		СтруктураПараметров.Вставить("ЗначениеОт", ТекущиеДанные.ИнтервалОт);
		СтруктураПараметров.Вставить("ЗначениеДо", ТекущиеДанные.ИнтервалДо);
		СтруктураПараметров.Вставить("ТипЗначения", ТипЗнч(ТекущиеДанные.ЗначениеОтбора));
		
	КонецЕсли;
	
	//
	ДополнительныеПараметры = Новый Структура("ОповещениеПослеОбработки, ТекущиеДанные", ОповещениеПослеОбработки, ТекущиеДанные);
	Если ТипЗначенияОтбора = Тип("СписокЗначений") Тогда
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаУстановкиЗначенийОтбора", 
			СтруктураПараметров, 
			Форма,
			,
			,
			,
			Новый ОписаниеОповещения("УстановитьФиксированныйОтборЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		//ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаУстановкиИнтервала", 
		//	СтруктураПараметров, 
		//	Форма,
		//	,
		//	,
		//	,
		//	Новый ОписаниеОповещения("УстановитьФиксированныйОтборЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
		//	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
		
КонецПроцедуры

// Служебная процедура.
&НаКлиенте
Процедура УстановитьФиксированныйОтборЗавершение(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
	
	ОповещениеПослеОбработки = ДополнительныеПараметры.ОповещениеПослеОбработки;
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	Если ЗначениеВыбора = Неопределено Тогда 
		ТекущиеДанные.Отбор = ЗначениеЗаполнено(ТекущиеДанные.ЗначениеОтбора);
		ТекущиеДанные.ОтборУстановлен = ТекущиеДанные.Отбор;
		УстанавливатьОтборСписка = Ложь;
		ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки, УстанавливатьОтборСписка);
		Возврат;
	КонецЕсли;
	
	УстанавливатьОтборСписка = Ложь;
	
	ТипЗначенияОтбора = ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
	
	Если ТипЗначенияОтбора = Тип("Строка") Тогда
		
		Если ЗначениеВыбора <> Неопределено Тогда
			
			ЗначениеОтбора = ЗначениеВыбора.ЗначениеОтбора;
			
			ТекущиеДанные.Отбор               = ЗначениеЗаполнено(ЗначениеОтбора);
			ТекущиеДанные.ОтборУстановлен     = ТекущиеДанные.Отбор;
			ТекущиеДанные.ЗначениеОтбора      = ЗначениеОтбора;
			ТекущиеДанные.ПредставлениеОтбора = ?(ЗначениеЗаполнено(ЗначениеОтбора), ЗначениеОтбора, НСтр("ru = '<не задано>'"));
			
			УстанавливатьОтборСписка = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗначенияОтбора = Тип("СписокЗначений") Тогда
		
		Если ЗначениеВыбора <> Неопределено Тогда
			
			ЗначениеОтбора = ЗначениеВыбора.ЗначениеОтбора;
			
			ТекущиеДанные.Отбор               = ЗначениеЗаполнено(ЗначениеОтбора);
			ТекущиеДанные.ОтборУстановлен     = ТекущиеДанные.Отбор;
			ТекущиеДанные.ЗначениеОтбора      = ЗначениеОтбора;
			ТекущиеДанные.ПредставлениеОтбора = ?(ЗначениеЗаполнено(ЗначениеОтбора), ЗначениеОтбора, НСтр("ru = '<не задано>'"));
			
			УстанавливатьОтборСписка = Истина;
			
		КонецЕсли;
		
	Иначе
		
		//Если ЗначениеВыбора <> Неопределено Тогда
		//	
		//	Если ЗначениеВыбора.ИнтервалОт <> ТекущиеДанные.ИнтервалОт 
		//		Или ЗначениеВыбора.ИнтервалДо <> ТекущиеДанные.ИнтервалДо Тогда
		//		
		//		ТекущиеДанные.ИнтервалОт = ЗначениеВыбора.ИнтервалОт;
		//		ТекущиеДанные.ИнтервалДо = ЗначениеВыбора.ИнтервалДо;
		//		ТекущиеДанные.ПредставлениеОтбора = ПредставлениеИнтервалаОтбора(ЗначениеВыбора.ИнтервалОт, ЗначениеВыбора.ИнтервалДо);
		//		
		//		УстанавливатьОтборСписка = Истина;
		//		
		//	КонецЕсли;
		//	
		//	ТекущиеДанные.Отбор = ЗначениеЗаполнено(ЗначениеВыбора.ИнтервалОт) Или ЗначениеЗаполнено(ЗначениеВыбора.ИнтервалДо);
		//	
		//КонецЕсли;
		
	КонецЕсли;
		
	Если ОповещениеПослеОбработки <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки, УстанавливатьОтборСписка);
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при изменении значения в дереве отборов по свойствам вида
//  номенклатуры на формах списков и формах подборов.
//
// Параметры:
//  Форма					 - УправляемаяФорма	 - форма списка номенклатуры или форма подбора.
//  ОповещениеПослеОбработки - ОписаниеОповещения - описание оповещения после обработки.
//
&НаКлиенте
Процедура ДеревоОтборовОтборПриИзмененииНаКлиенте(Форма, ОповещениеПослеОбработки = Неопределено) Экспорт
	
	ВариантДействий = ВариантДействийПриИзмененииОтбораДереваОтборов(Форма);
	
	Если ВариантДействий = 3 Тогда // установили флажок на строке с незаполненным "фиксированным" значением
		УстановитьФиксированныйОтбор(Форма, ОповещениеПослеОбработки);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает число - код варианта действия которое было выполнено с деревом отборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка справочника номенклатуры или форма подбора.
//
// Возвращаемое значение:
//	Число.
//	0 - никакого изменения значений в дереве отборов не произошло;
//	1 - был установлен/снят флажок у строки (или родительской строки) значений, например:
//	    был установлен/снят флажок у строки с качеством "Новый" или у строки "Качество";
//	2 - был установлен/снят флажок на строке с "фиксированным значением", причем фиксированное
//	    значение уже было указано, например: в строке дерева отборов было указано конкретное значение диаметра
//	    кабеля и у него установили/сняли флажок;
//	3 - был УСТАНОВЛЕН флажок на строке с "фиксированным значением", причем фиксированное значение
//	    в строке еще не указано, например: в строке дерева отборов не было указано конкретное значение
//	    диаметра кабеля и у строки установили флажок. Такой вариант действия приводит к тому что открывается
//	    дополнительная форма установки значений (или интервала) фиксированного значения.
//	
&НаКлиенте
Функция ВариантДействийПриИзмененииОтбораДереваОтборов(Форма)
	
	ВариантДействий = 0;
	
	ТекущиеДанные = Форма.Элементы.ДеревоОтборов.ТекущиеДанные;
	
	Если ТекущиеДанные.ФиксированноеЗначение Тогда
		
		// Фиксированное значение - например, введен артикул, или указано,
		// какое-то конкретное числовое, строковое значение, или интервал дат.
		
		ВариантДействий = 2; // установили/сняли флажок на поле фиксированного значения
		
		Если ТекущиеДанные.Отбор Тогда
			
			ТипЗначенияОтбора = ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
			
			Если Не ((ТипЗначенияОтбора = Тип("Строка") И ЗначениеЗаполнено(ТекущиеДанные.ЗначениеОтбора)) 
				 Или ТипЗначенияОтбора <> Тип("Строка") И (ЗначениеЗаполнено(ТекущиеДанные.ИнтервалОт) Или ЗначениеЗаполнено(ТекущиеДанные.ИнтервалДо))				    ) Тогда
				
				ВариантДействий = 3; // УСТАНОВИЛИ флажок на незаполненном значением поле фиксированного значения
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ВариантДействий = 1; // установили/сняли флажок на строке конкретного значения или группы значений
		
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		
		Если Родитель = Неопределено Тогда // выбрана строка-родитель
			
			// Установить/снять значение флажка отбора для всех подчиненных строк.
			
			ПодчиненныеЭлементыДерева = ТекущиеДанные.ПолучитьЭлементы();
			
			Для Каждого ЭлементДерева Из ПодчиненныеЭлементыДерева Цикл
				ЭлементДерева.Отбор = ТекущиеДанные.Отбор;
			КонецЦикла;
			
		Иначе
			
			// Выбрана подчиненная строка.
			
			Родитель.Отбор = Ложь;
			
			ПодчиненныеЭлементыДерева = Родитель.ПолучитьЭлементы();
			
			// Пройти по всем подчиненным строкам родителя выбранной строки, и если
			// хотя бы для одной строки установлен флажок отбора, то включить флажок отбора
			// и родительской строки.
			
			Для Каждого ЭлементДерева Из ПодчиненныеЭлементыДерева Цикл
				
				Если ЭлементДерева.Отбор Тогда
					Родитель.Отбор = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВариантДействий;
	
КонецФункции
	
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_НаСервере

// Установить или обновить значение параметра ИмяПараметра динамического списка Список.
//
// Параметры:
//  Список          - ДинамическийСписок - реквизит формы, для которого требуется установить параметр.
//  ИмяПараметра    - Строка             - имя параметра динамического списка.
//  Значение        - Произвольный        - новое значение параметра.
//  Использование   - Булево             - признак использования параметра.
//
&НаСервереБезКонтекста
Функция ПолучитьПараметрДинамическогоСписка(Список, ИмяПараметра) Экспорт
	
	Результат = неопределено;
	ЗначениеПараметраКомпоновкиДанных = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Если ЗначениеПараметраКомпоновкиДанных <> Неопределено И ЗначениеПараметраКомпоновкиДанных.Использование = Истина Тогда
		Результат = ЗначениеПараметраКомпоновкиДанных.Значение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДеревоОтборовОтборПриИзмененииНаСервере()
	
	ПодборТоваровСервер_ДеревоОтборовОтборПриИзменении(ЭтаФорма);
	
КонецПроцедуры

// Вызывается при изменении значения в дереве отбора по свойствам вида номенклатуры.
// Т.е. клиентские функции обрабатывают обработку значений на элементе формы (устанавливают
// значения флажков на строках, подчиненных строках, открывают форму установки интервала значений
// и т.п.), затем управление передается на сервер и сначала отключаются все установленные отборы
// по дереву свойств, затем включается отбор только по значениям строк с установленными флажками отбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
&НаСервереБезКонтекста
Процедура ПодборТоваровСервер_ДеревоОтборовОтборПриИзменении(Форма) Экспорт
	
	//Если Не Форма.ИспользоватьФильтры Тогда
	//	Возврат;
	//КонецЕсли;
	
	//
	УдалитьОтборПоСвойствамПотребностей(Форма, "СписокПотребности");
	УстановитьОтборПоСвойствамПотребностей(Форма, "СписокПотребности");
	
	УдалитьОтборПоСвойствамПотребностей(Форма, "СтрокиКОбновлению");
	УстановитьОтборПоСвойствамПотребностей(Форма, "СтрокиКОбновлению");
	
КонецПроцедуры

// Удаляет установленные отборы по свойствам вида номенклатуры.
// Точнее удаляются все установленные отборы на списке за исключением тех
// которые не относятся к отборам дерева свойств.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
&НаСервереБезКонтекста
Процедура УдалитьОтборПоСвойствамПотребностей(Форма, ДинСписок)
	
	//
	// Некоторые элементы отбора не должны удаляться - они не относятся
	// к отбору по свойствам вида номенклатуры.
	НеУдаляемыеЭлементы = НеУдаляемыеЭлементыОтборов();
	
	// Удалить элементы отбора по свойствам вида номенклатуры.
	ОтборСпискаПланаПоставок = ПолучитьОтборДинамическогоСписка(Форма[ДинСписок]).Элементы;
	ВГраница = ОтборСпискаПланаПоставок.Количество() - 1;
	
	Для ОбрИндекс = 0 По ВГраница Цикл
		
		ЭлементОтбора = ОтборСпискаПланаПоставок[ВГраница - ОбрИндекс];
		
		Если НеУдаляемыеЭлементы.Найти(ЭлементОтбора.Представление) = Неопределено Тогда
			ОтборСпискаПланаПоставок.Удалить(ЭлементОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив имен элементов отбора которые не следует удалять.
//
// Возвращаемое значение:
//
//	Массив.
//		Массив имен отборов которые не следует удалять - они не относятся 
//		к отбору по свойствам вида номенклатуры.
//
&НаСервереБезКонтекста
Функция НеУдаляемыеЭлементыОтборов()
	
	НеУдаляемыеЭлементы = Новый Массив;
	
	//НеУдаляемыеЭлементы.Добавить("ОтборПоДоговору");
	Возврат НеУдаляемыеЭлементы
	
КонецФункции

// Определяет отбор динамического списка в зависимости от наличия режима совместимости.
//
// Параметры:
//  Список - ДинамическийСписок - список, для которого надо определить отбор.
//
// Возвращаемое значение:
//   Отбор - требуемый отбор
//
&НаСервереБезКонтекста
Функция ПолучитьОтборДинамическогоСписка(Список) Экспорт
	
	Возврат Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
	
КонецФункции

// Устанавливает отбор по свойствам вида номенклатуры у списка номенклатуры на форме подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подбора, форма выбора.
//
&НаСервереБезКонтекста
Процедура УстановитьОтборПоСвойствамПотребностей(Форма, ДинСписок)
	
	//ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ПараметрыОтбора = Новый Структура("Отбор", Истина);
	//
	ОтборСпискаПотребностей = ПолучитьОтборДинамическогоСписка(Форма[ДинСписок]);
	
	ИмяСсылки = "Ссылка.[";
	ТаблицаПараметровОтбора = Форма.ТаблицаПараметровОтбора.Выгрузить();
	ТаблицаПараметровОтбора = ТаблицаПараметровОтбора.Скопировать(ПараметрыОтбора);
	//
	Пока ТаблицаПараметровОтбора.Количество() <> 0 Цикл
		
		СтрокаДереваОтборов = ТаблицаПараметровОтбора[0];
		
		Если СтрокаДереваОтборов.ФиксированноеЗначение Тогда
			
			// Сформировать имя элемента отбора.
			ИмяЭлементаОтбора = СтрокаДереваОтборов.ИмяРеквизита;
			Если СтрокаДереваОтборов.ЭтоДопРеквизит Тогда
				ИмяЭлементаОтбора = ИмяСсылки + СтрокаДереваОтборов.ИмяРеквизита + "]";
			КонецЕсли;
			
			// В зависимости от типа установить значение элемента отбора.
			Если ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Булево") Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаПотребностей, ИмяЭлементаОтбора, Истина, 
					ВидСравненияКомпоновкиДанных.Равно,,Истина);
				
			ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Дата") 
				Или ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Число") Тогда
				
				Если ЗначениеЗаполнено(СтрокаДереваОтборов.ИнтервалОт) Тогда
					
					ПодборТоваровСервер_ДобавитьЭлементОтбора(ОтборСпискаПотребностей, ИмяЭлементаОтбора, СтрокаДереваОтборов.ИнтервалОт, 
						ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДереваОтборов.ИнтервалДо) Тогда
					
					ПодборТоваровСервер_ДобавитьЭлементОтбора(ОтборСпискаПотребностей, ИмяЭлементаОтбора, СтрокаДереваОтборов.ИнтервалДо, 
						ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Строка") Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаПотребностей, ИмяЭлементаОтбора, 
					СтрокаДереваОтборов.ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,,Истина);
				
			ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("СписокЗначений") Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаПотребностей, ИмяЭлементаОтбора, 
					СтрокаДереваОтборов.ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
				
			КонецЕсли;
			
			ТаблицаПараметровОтбора.Удалить(СтрокаДереваОтборов);
			
		Иначе
			
			ПараметрыОтбора = Новый Структура("ИмяРеквизита", СтрокаДереваОтборов.ИмяРеквизита);
			
			МассивСтрок = ТаблицаПараметровОтбора.НайтиСтроки(ПараметрыОтбора);
			
			СтрокаОтбора = МассивСтрок[0];
			ИмяЭлементаОтбора = СтрокаОтбора.ИмяРеквизита;
			
			ЗначенияОтборов = Новый Массив;
			Для Каждого Строка Из МассивСтрок Цикл
				ЗначенияОтборов.Добавить(Строка.ЗначениеОтбора);
				ТаблицаПараметровОтбора.Удалить(Строка);
			КонецЦикла;
			
			Если ОтборСпискаПотребностей.ДоступныеПоляОтбора.Элементы.Найти(Новый ПолеКомпоновкиДанных(ИмяЭлементаОтбора)) <> Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаПотребностей, ИмяЭлементаОтбора, ЗначенияОтборов, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	/// Установка отборов по товарной категории
	//МассивКатегорий = Форма.Объект.ТоварныеКатегории.Выгрузить(Новый Структура("Пометка", Истина)).ВыгрузитьКолонку("ТоварнаяКатегория");
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаПотребностей, "ТоварнаяКатегория", МассивКатегорий, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
	
	// Установка отборов по номенклатуре
	МассивНоменклатуры = Форма.Объект.Номенклатура.Выгрузить(Новый Структура("Пометка", Истина)).ВыгрузитьКолонку("Номенклатура");
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаПотребностей, "Номенклатура", МассивНоменклатуры, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
	
	// Установка отборов по организации
	МассивОрганизаций = ПолучитьМассивОрганизаций(Форма.РеквизитФормыВЗначение("ДеревоОрганизаций"));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаПотребностей, "Организация", МассивОрганизаций, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивОрганизаций(ДеревоОрганизаций)
	
	Результат = Новый Массив;
	Для Каждого СтрокаДерева Из ДеревоОрганизаций.Строки Цикл
		
		Если СтрокаДерева.Пометка = 0 Тогда
			Продолжить;
		ИначеЕсли СтрокаДерева.Строки.Количество() > 0 Тогда
			
			Для Каждого Строка Из СтрокаДерева.Строки Цикл
				
				Если Строка.Пометка <> 0 Тогда
					Результат.Добавить(Строка.Организация);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			Результат.Добавить(СтрокаДерева.Организация);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивОрганизацийЗаказчиков(ДеревоОрганизаций)
	
	Результат = Новый Массив;
	Для Каждого СтрокаДерева Из ДеревоОрганизаций.Строки Цикл
		
		Если СтрокаДерева.Пометка = 0 Тогда
			Продолжить;
		Иначе
			Результат.Добавить(СтрокаДерева.Организация);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти 

#Область ОМ_ПодборТоваровКлиент

&НаКлиенте
Процедура ПодборТоваровКлиент_ДеревоОтборовПриИзмененииЗавершение(Форма) Экспорт

	ТекущиеДанные = Форма.Элементы.ДеревоОтборов.ТекущиеДанные;
	Если ТекущиеДанные = неопределено Тогда
		Возврат;
	КонецЕсли;
	//ТаблицаПараметровОтбора = Форма.ТаблицаПараметровОтбора;
	
	Если ТекущиеДанные.ФиксированноеЗначение
		Или ТипЗнч(ТекущиеДанные.ЗначениеОтбора) = Тип("Булево") Тогда
		
		Если ТекущиеДанные.Отбор Тогда
			
			Отбор = Новый Структура();
			Отбор.Вставить("ИмяРеквизита",ТекущиеДанные.Представление);
			ОтобранныеСтроки = Форма.ТаблицаПараметровОтбора.НайтиСтроки(Отбор);
			Если ОтобранныеСтроки.Количество()>0 Тогда
				ЗаполнитьЗначенияСвойств(ОтобранныеСтроки[0],ТекущиеДанные);
				ОтобранныеСтроки[0].ИмяРеквизита = ТекущиеДанные.ИмяРеквизита;
			Иначе
				НоваяСтрока = Форма.ТаблицаПараметровОтбора.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущиеДанные);
				НоваяСтрока.ИмяРеквизита = ТекущиеДанные.ИмяРеквизита; 
			КонецЕсли;
			
		Иначе
			
			Отбор = Новый Структура();
			Отбор.Вставить("ИмяРеквизита",ТекущиеДанные.ИмяРеквизита);
			ОтобранныеСтроки = Форма.ТаблицаПараметровОтбора.НайтиСтроки(Отбор);
			Для Каждого СтрокаДляУдаления Из ОтобранныеСтроки Цикл
				Форма.ТаблицаПараметровОтбора.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		
		КонецЕсли;
		
	Иначе
		
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		
		Если Родитель = Неопределено Тогда // выбрана строка-родитель
			
			ПодчиненныеЭлементыДерева = ТекущиеДанные.ПолучитьЭлементы();
			
			Если ТекущиеДанные.Отбор Тогда
				Для Каждого ЭлементДерева Из ПодчиненныеЭлементыДерева Цикл
					НоваяСтрока = Форма.ТаблицаПараметровОтбора.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ЭлементДерева);
					НоваяСтрока.ИмяРеквизита = ТекущиеДанные.ИмяРеквизита;
				КонецЦикла;
			Иначе
				Отбор = Новый Структура();
				Отбор.Вставить("ИмяРеквизита",ТекущиеДанные.ИмяРеквизита);
				ОтобранныеСтроки = Форма.ТаблицаПараметровОтбора.НайтиСтроки(Отбор);
				Для Каждого СтрокаДляУдаления Из ОтобранныеСтроки Цикл
					Форма.ТаблицаПараметровОтбора.Удалить(СтрокаДляУдаления);
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			Если ТекущиеДанные.Отбор Тогда
				НоваяСтрока = Форма.ТаблицаПараметровОтбора.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущиеДанные);
			Иначе
				Отбор = Новый Структура();
				Отбор.Вставить("ИмяРеквизита",ТекущиеДанные.ИмяРеквизита);
				Отбор.Вставить("Представление",ТекущиеДанные.Представление);
				ОтобранныеСтроки = Форма.ТаблицаПараметровОтбора.НайтиСтроки(Отбор);
				Для Каждого СтрокаДляУдаления Из ОтобранныеСтроки Цикл
					Форма.ТаблицаПараметровОтбора.Удалить(СтрокаДляУдаления);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//// Платформа 10155915 Западает галка в дереве отборов в веб-клиенте. В 8.3.8 следует удалить.
	//Форма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

#КонецОбласти 

#Область ОМ_ПодборТоваровВызовСервера

// Функция возвращает список строковых значений реквизита номенклатуры или
//  доп.реквизитов номенклатуры. Используется при навигации по виду номенклатуры
//  и дереву свойств вида номенклатуры.
//
// Параметры:
//  ВидНоменклатуры		 - СправочникСсылка.ВидыНоменклатуры - вид номенклатуры,
//  ИмяРеквизита		 - Строка							 - имя реквизита,
//  ЭтоДопРеквизит		 - Булево, Истина					 - признак доп.реквизита,
//  ОтборПоНоменклатуре	 - Булево, Истина					 - признак отбора по номенклатуре.
// 
// Возвращаемое значение:
//  СписокЗначений - Список строковых значений реквизита или доп.реквизита.
//
&НаСервере
Функция ПодборТоваровВызовСервера_СписокЗначенийРеквизита(ВидНоменклатуры, ИмяРеквизита, ЭтоДопРеквизит, ОтборПоНоменклатуре) Экспорт
	
	ЗначенияРеквизита = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	Если Не ЭтоДопРеквизит Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 50
		|	Номенклатура." + ИмяРеквизита + " КАК ЗначениеРеквизита
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
		|	И Номенклатура." + ИмяРеквизита + " <> """"
		|	";
		
	ИначеЕсли ОтборПоНоменклатуре Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 50
		|	ДополнительныеРеквизиты.Значение КАК ЗначениеРеквизита
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|ГДЕ
		|	ДополнительныеРеквизиты.Свойство.Наименование = &Свойство
		|	И ДополнительныеРеквизиты.Ссылка.ВидНоменклатуры = &ВидНоменклатуры";
		
		Запрос.УстановитьПараметр("Свойство", ИмяРеквизита);
		
	ИначеЕсли Не ОтборПоНоменклатуре Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ХарактеристикиДополнительныеРеквизиты.Значение КАК ЗначениеРеквизита
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиДополнительныеРеквизиты
		|ГДЕ
		|	ХарактеристикиДополнительныеРеквизиты.Свойство.Наименование = &Свойство
		|	И ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ХарактеристикиДополнительныеРеквизиты.Ссылка.Владелец) = ТИП(Справочник.ВидыНоменклатуры)
		|				ТОГДА ХарактеристикиДополнительныеРеквизиты.Ссылка.Владелец = &ВидНоменклатуры
		|			ИНАЧЕ ХарактеристикиДополнительныеРеквизиты.Ссылка.Владелец.ВидНоменклатуры = &ВидНоменклатуры
		|		КОНЕЦ";
		
		Запрос.УстановитьПараметр("Свойство", ИмяРеквизита);
		
	КонецЕсли;

	МассивЗначений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗначениеРеквизита");
	ЗначенияРеквизита.ЗагрузитьЗначения(МассивЗначений);
	
	Возврат ЗначенияРеквизита;
	
КонецФункции

#КонецОбласти 

#Область ОМ_ПодборТоваровСервер

// Добавляет отбор в указанную коллекцию области отбора.
//
// Параметры:
//	ОбластьОтбора - ОтборКомпоновкиДанных - отбор динамического списка,
//	ЛевоеЗначение - Строка - путь к данным поля отбора,
//	ПравоеЗначение - Произвольный - значение отбора,
//	ВидОтбора - ВидСравненияКомпоновкиДанных - вид сравнения,
//	Представление - Строка - представление элемента отбора.
//
&НаСервереБезКонтекста
Процедура ПодборТоваровСервер_ДобавитьЭлементОтбора(ОбластьОтбора, ЛевоеЗначение, ПравоеЗначение, ВидОтбора, Представление = "") Экспорт
	
	ЭлементОтбора                   = ОбластьОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
	ЭлементОтбора.ПравоеЗначение    = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения  = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.ВидСравнения      = ВидОтбора;
	
	Если ЗначениеЗаполнено(Представление) Тогда
		ЭлементОтбора.Представление = Представление;
	КонецЕсли;
	
КонецПроцедуры

#Область КомандыФормы
	
&НаКлиенте
Процедура КомандаАвтоматически(Команда)
	
	РежимФормирования = 1;
	УстановитьКнопкиРежимаДобавления();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВручную(Команда)
	
	Если ВКорзинеПрисутствуютПротиворечивыеПозицииНаКлиенте() Тогда
		Возврат;
	КонецЕсли;
	
	РежимФормирования = 2;
	УстановитьКнопкиРежимаДобавления();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаАвтоматическиИзКорзины(Команда)
	
	РежимФормирования = 3;
	УстановитьКнопкиРежимаДобавления();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроектовСПЗ(Команда)
	ДалееКШагуСписокПроектовСПЗНаСервере(Ложь);
КонецПроцедуры

#Область ДополнительныеПроцедурыИФункции
	
&НаКлиенте
Процедура УстановитьКнопкиРежимаДобавления()
	
	Элементы.СписокПотребностиКнопкаВручную.Пометка = РежимФормирования = 2;
	Элементы.СписокПотребностиКнопкаАвтоматическое.Пометка = РежимФормирования = 1;
	Элементы.СписокПотребностиКомандаАвтоматическиИзКорзины.Пометка = РежимФормирования = 3;
	
	Элементы.ГруппаПодобранныеТовары.Видимость = Элементы.СписокПотребностиКнопкаВручную.Пометка
		ИЛИ Элементы.СписокПотребностиКомандаАвтоматическиИзКорзины.Пометка;
	Элементы.ВыбратьВсе.Доступность = Элементы.СписокПотребностиКнопкаВручную.Пометка
		ИЛИ Элементы.СписокПотребностиКомандаАвтоматическиИзКорзины.Пометка;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#КонецОбласти 

#КонецОбласти

&НаСервере
Функция ПолучитьДанныеАвтоОбновлениеЧерезСКД()
	
	 // Получаем схему из макета
	СхемаКомпоновкиДанных = Отчеты.ПозицииПотребностейДляАвтоматическогоОбновления.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	//
	ВариантНастройки = СхемаКомпоновкиДанных.ВариантыНастроек.Найти("ДляВыгрузкиВТаблицуЗначений");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ВариантНастройки.Настройки);
	// Из схемы возьмем настройки по умолчанию
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Автор"));
	Параметр.Значение = ТекущийПользователь;
	Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодЗакупки"));
	Параметр.Значение = Объект.ПериодЗакупки;
	Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Субъекты223ФЗ"));
	Параметр.Значение = Объект.Субъекты223ФЗ;
	
	// Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	// Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	// Передаем в макет компоновки схему, настройки и данные расшифровки
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Очищаем поле табличного документа
	//ОтчетПотребностиДляАвтоматическогоФормирования.Очистить();
	
	// Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	
	//// Выводим результат в табличный документ
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	//ПроцессорВывода.УстановитьДокумент(ОтчетПотребностиДляАвтоматическогоФормирования);
	//
	//ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	// Выводим результат в табличный документ
	Таблица = Новый ТаблицаЗначений;
	ПроцессорВыводаВТЗ = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаВТЗ.УстановитьОбъект(Таблица);
	
	ПроцессорВыводаВТЗ.Вывести(ПроцессорКомпоновкиДанных);
	
	Таблица.Колонки.СистемныеПоляНомерПоПорядку.Имя = "НомерСтроки";
	
	Возврат Таблица;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьДанныеПериодомСПЗ(ПериодичностьСПЗ, Данные)

	Данные.Колонки.Добавить("ПериодСПЗ", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	ТМП = Данные.Скопировать(, "ПериодПотребности");
	ТМП.Свернуть("ПериодПотребности", "");
	МассивПериодов = ТМП.ВыгрузитьКолонку("ПериодПотребности");
	
	МатрицаВременная = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивПериодов, "ДатаНачала");
	Матрица = Новый Соответствие;
	Для Каждого КлючЗначение Из МатрицаВременная Цикл
		Если ПериодичностьСПЗ = Перечисления.Периодичность.Год Тогда
			Матрица.Вставить(КлючЗначение.Ключ, НачалоГода(КлючЗначение.Значение));
		ИначеЕсли ПериодичностьСПЗ = Перечисления.Периодичность.Полугодие Тогда
			Если Месяц(КлючЗначение.Значение) <7 Тогда
				Матрица.Вставить(КлючЗначение.Ключ, НачалоГода(КлючЗначение.Значение));
			Иначе
				Матрица.Вставить(КлючЗначение.Ключ, ДобавитьМесяц(НачалоГода(КлючЗначение.Значение), 6));
			КонецЕсли;
		ИначеЕсли ПериодичностьСПЗ = Перечисления.Периодичность.Квартал Тогда
			Матрица.Вставить(КлючЗначение.Ключ, НачалоКвартала(КлючЗначение.Значение));
		ИначеЕсли ПериодичностьСПЗ = Перечисления.Периодичность.Месяц Тогда
			Матрица.Вставить(КлючЗначение.Ключ, НачалоМесяца(КлючЗначение.Значение));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из Данные Цикл
		Строка.ПериодСПЗ = Матрица[Строка.ПериодПотребности];
	КонецЦикла;
	
КонецПроцедуры // ()

&НаСервере
Процедура ПолучитьСуществующиеСПЗИЧерновики()
	 // Получаем схему из макета
	Обработка = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных = Обработка.ПолучитьМакет("СКД_УжеСуществующиеОбъекты");
	
	// Из схемы возьмем настройки по умолчанию
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	УстановитьПараметрДанных(Настройки, "Автор", ТекущийПользователь);
	УстановитьПараметрДанных(Настройки, "ПериодЗакупки", Объект.ПериодЗакупки);
	УстановитьПараметрДанных(Настройки, "ОтбиратьПо", Объект.ОтборНоменклатурыПо);
	//УстановитьПараметрДанных(Настройки, "ОрганизацияЗаказчик", Объект.Организация);
	УстановитьПараметрДанных(Настройки, "ПустойУИД", ПустойУИД);
	
	// Помещаем в переменную данные о расшифровке данных
	//ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	// Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	// Передаем в макет компоновки схему, настройки и данные расшифровки
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	// ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	Результат = Новый ДеревоЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 
	
	// Заполнение отдельных таблиц
	Таблицы = Новый Соответствие;
	Таблицы.Вставить(Перечисления.ВариантыВключенияПозицийПотребностей.СПЗ, "УжеСуществующиеСПЗ");
	Таблицы.Вставить(Перечисления.ВариантыВключенияПозицийПотребностей.ПроектСПЗ, "УжеСуществующиеПроектыСПЗ");
	
	Для Каждого КлючЗначение Из Таблицы Цикл
		ЭтаФорма[КлючЗначение.Значение].Очистить();
	КонецЦикла;
	
	Для Каждого СтрокаТип Из Результат.Строки Цикл
		
		//
		ИмяТаблицы = Таблицы[СтрокаТип.ТипОбъекта];
		Если ИмяТаблицы = неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Таблица = ЭтаФорма[ИмяТаблицы].Выгрузить();
		
		Для Каждого СтрокаДерева Из СтрокаТип.Строки Цикл
			ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаДерева);
		КонецЦикла;
		
		ЭтаФорма[ИмяТаблицы].Загрузить(Таблица);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСуществующиеДоговоры()
	
	// Получаем схему из макета
	Обработка = РеквизитФормыВЗначение("Объект");
	СКД = Обработка.ПолучитьМакет("СКД_УжеСуществующиеДоговора");
	СкорректироватьЗапросВСКД_УжеСуществующиеДоговора(СКД.НаборыДанных.ДанныеПоДоговорам.Запрос);
	
	// Из схемы возьмем настройки по умолчанию
	Настройки = КомпоновщикНастроекСуществующиеДоговора.ПолучитьНастройки();
	
	УстановитьПараметрДанных(Настройки, "Автор", ТекущийПользователь);
	УстановитьПараметрДанных(Настройки, "ПериодЗакупки", Объект.ПериодЗакупки);
	УстановитьПараметрДанных(Настройки, "ОтбиратьПо", Объект.ОтборНоменклатурыПо);
	УстановитьПараметрДанных(Настройки, "ПустойУИД", ПустойУИД);
	
	// Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	// Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Настройки, ,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	Результат = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 
	
	УжеСуществующиеДоговора.Загрузить(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСуществующиеОбъекты() Экспорт
	
	ПолучитьСуществующиеСПЗИЧерновики();
	ПолучитьСуществующиеДоговоры();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьПараметрыЗакупкиКорзины(Автор, ПериодЗакупки, ПустойУИД, Субъекты223ФЗ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Автор", Автор);
	Запрос.УстановитьПараметр("ПериодЗакупки", ПериодЗакупки);
	Запрос.УстановитьПараметр("ПустойУИД", ПустойУИД);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроектыСПЗПозиции.ОрганизацияЗаказчик КАК ОрганизацияЗаказчик,
	|	ПроектыСПЗПозиции.ПериодЗакупки КАК ПериодЗакупки,
	|	ПроектыСПЗПозиции.ПериодПотребности КАК ПериодПотребности,
	|	ПроектыСПЗПозиции.АналитикаНоменклатуры КАК АналитикаНоменклатуры,
	|	ПроектыСПЗПозиции.АналитикаПотребностей КАК АналитикаПотребностей,
	|	ПроектыСПЗПозиции.АналитикаСтруктуры КАК АналитикаСтруктуры,
	|	ПроектыСПЗПозиции.АналитикаНоменклатуры.Номенклатура.КодОКПД2 КАК ОКПД2,
	|	ВЫБОР
	|		КОГДА ПроектыСПЗПозиции.АналитикаНоменклатуры.Номенклатура ССЫЛКА Справочник.ТоварныеКатегории
	|			ТОГДА ВЫРАЗИТЬ(ПроектыСПЗПозиции.АналитикаНоменклатуры.Номенклатура КАК Справочник.ТоварныеКатегории)
	|		КОГДА ПроектыСПЗПозиции.АналитикаНоменклатуры.Номенклатура ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ВЫРАЗИТЬ(ПроектыСПЗПозиции.АналитикаНоменклатуры.Номенклатура КАК Справочник.Номенклатура).ТоварнаяКатегория
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)
	|	КОНЕЦ КАК ТоварнаяКатегория,
	|	СУММА(ПроектыСПЗПозиции.Количество) КАК КоличествоКОбработке,
	|	СУММА(ПроектыСПЗПозиции.Сумма) КАК СуммаКОбработке,
	|	ПроектыСПЗПозиции.Валюта КАК Валюта
	|ПОМЕСТИТЬ ВТ_Потребности
	|ИЗ
	|	РегистрСведений.ПроектыСПЗПозиции КАК ПроектыСПЗПозиции
	|ГДЕ
	|	ПроектыСПЗПозиции.Автор = &Автор
	|	И ПроектыСПЗПозиции.ИД = &ПустойУИД
	|	И ПроектыСПЗПозиции.ПериодЗакупки = &ПериодЗакупки
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроектыСПЗПозиции.ОрганизацияЗаказчик,
	|	ПроектыСПЗПозиции.АналитикаСтруктуры,
	|	ПроектыСПЗПозиции.АналитикаНоменклатуры,
	|	ПроектыСПЗПозиции.ПериодЗакупки,
	|	ПроектыСПЗПозиции.ПериодПотребности,
	|	ПроектыСПЗПозиции.АналитикаПотребностей,
	|	ПроектыСПЗПозиции.Валюта	
	|ИМЕЮЩИЕ
	|	НЕ(СУММА(ПроектыСПЗПозиции.Количество) = 0
	|			И СУММА(ПроектыСПЗПозиции.Сумма) = 0)"
	+ ОбщегоНазначенияУХ.ТекстРазделителяЗапросовПакета()
	+ ТекстЗапроса_ПолучитьДанныеДляАвтоматическогоФормированияСПЗ();
	ДанныеСПЗ = Запрос.Выполнить().Выгрузить();
	ТаблицаПараметровЗакупки = ПланыВидовХарактеристик.ПараметрыЗакупки.ПолучитьТаблицуНастроекПараметровЗакупки();
	
	ПараметрыЗакупки = СформироватьДеревоПараметровЗакупки(ДанныеСПЗ, ТаблицаПараметровЗакупки);
	
	Возврат ПараметрыЗакупки;
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрДанных(Настройки, ИмяПараметры, ЗначениеПараметра)
	
	Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметры));
	Если Параметр <> неопределено Тогда
		Параметр.Значение = ЗначениеПараметра;
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'В настрйоках СКД не найден параметр данных %1'", ИмяПараметры));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСПЗПоИдентификатору(ИдентификаторСПЗ)
	
	Возврат РегистрыСведений.ПроектыСПЗ.ПолучитьСПЗПоИдентификатору(ИдентификаторСПЗ);
	
	//Если НЕ ЗначениеЗаполнено(ИдентификаторСПЗ) Тогда
	//	Возврат неопределено;
	//КонецЕсли;
	//
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ИдентификаторСПЗ", ИдентификаторСПЗ);
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	СтрокиПланаЗакупокСрезПоследних.СтрокаПлана КАК СПЗ,
	//|	СтрокиПланаЗакупокСрезПоследних.ИдентификаторСтрокиПланаЗакупок КАК ИдентификаторСтрокиПланаЗакупок
	//|ИЗ
	//|	РегистрСведений.СтрокиПланаЗакупок.СрезПоследних КАК СтрокиПланаЗакупокСрезПоследних
	//|ГДЕ
	//|	СтрокиПланаЗакупокСрезПоследних.ИдентификаторСтрокиПланаЗакупок = &ИдентификаторСПЗ";
	//Результат = Запрос.Выполнить();
	//Если Результат.Пустой() Тогда
	//	Возврат неопределено;
	//КонецЕсли;
	//
	//Выборка = Результат.Выбрать();
	//Выборка.Следующий();
	//Возврат Выборка.СПЗ;
	//
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиПроектаСПЗ(ТекущийПользователь, ИДПроекта, ПериодЗакупки)
	СтруктураКлючаЗаписи = Новый Структура("Автор, ИД, ПериодЗакупки", ТекущийПользователь, ИДПроекта, ПериодЗакупки);
	Возврат РегистрыСведений.ПроектыСПЗ.СоздатьКлючЗаписи(СтруктураКлючаЗаписи);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьИнформационнуюНадписьПомещение(Форма)
	
	ТекстНадписи = Новый ФорматированнаяСтрока(НСтр("ru = 'Выбранные позиции будут помещены в '"));
	Обеспечение = Форма.Объект.Обеспечение;
	ТребуетсяПостфикс = Истина;
	Если Обеспечение = ПредопределенноеЗначение("Перечисление.ВариантыВключенияПозицийПотребностей.НовыйПроектСПЗ") Тогда
		Параметр1 = НСтр("ru = 'новый проект строки плана закупок'");
	ИначеЕсли Обеспечение = ПредопределенноеЗначение("Перечисление.ВариантыВключенияПозицийПотребностей.ПроектСПЗ") Тогда
		Параметр1 = НСтр("ru = 'выбранный проект строки плана закупок'");
	ИначеЕсли Обеспечение = ПредопределенноеЗначение("Перечисление.ВариантыВключенияПозицийПотребностей.СПЗ") Тогда
		Параметр1 = НСтр("ru = 'строку плана закупок %1'");
		Параметр1 = СтрШаблон(Параметр1, Форма.ПолучательДляРучногоРаспределения);
	ИначеЕсли Обеспечение = ПредопределенноеЗначение("Перечисление.ВариантыВключенияПозицийПотребностей.Договор") Тогда
		Параметр1 = НСтр("ru = 'договор %1'");
		Параметр1 = СтрШаблон(Параметр1, Форма.ПолучательДляРучногоРаспределения);
	Иначе
		Параметр1 = "";
		ТребуетсяПостфикс = Ложь;
	КонецЕсли;
	
	Параметр1 = Новый ФорматированнаяСтрока(Параметр1, Новый Шрифт(,,Истина,,Истина));
	
	//Форма.ИнформационнаяНадписьПомещение = СтрШаблон(ТекстНадписи, Параметр1);
	Если ТребуетсяПостфикс Тогда
		Постфикс = Новый ФорматированнаяСтрока(НСтр("ru = ' Для продолжения нажмите кнопку Далее.'"));
	Иначе
		Постфикс = Новый ФорматированнаяСтрока(НСтр("ru = ''"));
	КонецЕсли;
	Форма.ИнформационнаяНадписьПомещение = Новый ФорматированнаяСтрока(ТекстНадписи, Параметр1, Новый ФорматированнаяСтрока("."), Постфикс);
	
КонецПроцедуры

&НаКлиенте
Процедура УровеньНоменклатуры_БезОграничения(Команда)
	
	Объект.ОтборНоменклатурыПо = -1;
	УстановитьПометкуКнопокОграниченияОтбораПоНоменклатуре(ЭтаФорма);
	ПолучитьСуществующиеОбъекты();
	
КонецПроцедуры

&НаКлиенте
Процедура УровеньНоменклатуры_Номенклатура(Команда)
	
	Объект.ОтборНоменклатурыПо = 0;
	УстановитьПометкуКнопокОграниченияОтбораПоНоменклатуре(ЭтаФорма);
	ПолучитьСуществующиеОбъекты();
	
КонецПроцедуры

&НаКлиенте
Процедура УровеньНоменклатуры_ОКПД2(Команда)
	
	Объект.ОтборНоменклатурыПо = 2;
	УстановитьПометкуКнопокОграниченияОтбораПоНоменклатуре(ЭтаФорма);
	ПолучитьСуществующиеОбъекты();

КонецПроцедуры

&НаКлиенте
Процедура УровеньНоменклатуры_ТоварнаяКатегория(Команда)
	
	Объект.ОтборНоменклатурыПо = 1;
	УстановитьПометкуКнопокОграниченияОтбораПоНоменклатуре(ЭтаФорма);
	ПолучитьСуществующиеОбъекты();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПометкуКнопокОграниченияОтбораПоНоменклатуре(Форма)
	
	КнопкаН = Форма.Элементы.ОграничитьНоменклатурой;
	КнопкаТК = Форма.Элементы.ОграничитьТоварнымиКатегориями;
	КнопкаОКПД = Форма.Элементы.ОграничитьКодамиОКПД2;
	КнопкаБезОграничения = Форма.Элементы.НеОграничивать;
	
	Если Форма.Объект.ОтборНоменклатурыПо = 0 Тогда
		КнопкаН.Пометка = Истина;
		КнопкаТК.Пометка = Ложь;
		КнопкаОКПД.Пометка = Ложь;
		КнопкаБезОграничения.Пометка = Ложь;
	ИначеЕсли Форма.Объект.ОтборНоменклатурыПо = 1 Тогда
		КнопкаН.Пометка = Ложь;
		КнопкаТК.Пометка = Истина;
		КнопкаОКПД.Пометка = Ложь;
		КнопкаБезОграничения.Пометка = Ложь;
	ИначеЕсли Форма.Объект.ОтборНоменклатурыПо = 2 Тогда
		КнопкаН.Пометка = Ложь;
		КнопкаТК.Пометка = Ложь;
		КнопкаОКПД.Пометка = Истина;
		КнопкаБезОграничения.Пометка = Ложь;
	Иначе
		КнопкаН.Пометка = Ложь;
		КнопкаТК.Пометка = Ложь;
		КнопкаОКПД.Пометка = Ложь;
		КнопкаБезОграничения.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаОчистить(Команда)
	ОчиститьКорзину(ТекущийПользователь, Объект.ПериодЗакупки, Объект.Субъекты223ФЗ);
	УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	Элементы.СписокПотребности.Обновить();
	Элементы.Корзина.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗакупокНовогоПроектаСПЗПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПараметрыЗакупокНовогоПроектаСПЗОткрытьПравило.Доступность = Элемент.ТекущиеДанные.ДетальнаяЗапись;
	
	Если Элемент.ТекущиеДанные.ДетальнаяЗапись Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Элемент.ТекущиеДанные.Значение) = Тип("Булево") Тогда
		// Для булево не отрабатывает событие АвтоПодбор, поэтому принудительно чистим список выбора
		Элементы.ПараметрыЗакупокНовогоПроектаСПЗЗначение.СписокВыбора.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗакупокНовогоПроектаСПЗЗначениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТД = Элементы.ПараметрыЗакупокНовогоПроектаСПЗ.ТекущиеДанные;
	
	Если ТипЗнч(ТД.Значение) = Тип("Булево") Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбораДляСвойства = ПараметрыЗакупокНовогоПроектаСПЗ_СпискиВыбора[ТД.Свойство];
	
	СписокВыбора = Элемент.СписокВыбора;
	
	Если СписокВыбора.Количество()> 0 Тогда
		СписокВыбора.Очистить();
	КонецЕсли;
	
	Для Каждого КлючЗначение Из СписокВыбораДляСвойства Цикл
		
		СписокВыбора.Добавить(КлючЗначение.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСпискиВыбораДляСвойствНовогоПроектаСПЗ(Дерево)
	
	
	Соответствие = Новый Соответствие;
	
	Для Каждого Строка1 Из Дерево.Строки Цикл
		Соответствие.Вставить(Строка1.Свойство, ПолучитьСписокВыбора(Строка1));
	КонецЦикла;
	
	ПараметрыЗакупокНовогоПроектаСПЗ_СпискиВыбора = Новый ФиксированноеСоответствие(Соответствие);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбора(СтрокаДерева)
	
	Результат = Новый СписокЗначений;
	
	Для Каждого Строка Из СтрокаДерева.Строки Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.Значение) 
			И ТипЗнч(Строка.Значение) <> Тип("Булево") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Результат.НайтиПоЗначению(Строка.Значение) = неопределено Тогда
			Результат.Добавить(Строка.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПоложениеОЗакупках(Команда)
	
	//ОткрытьФорму("Справочник.ПоложениеОЗакупках.ФормаСписка"); 
	ОткрытьФорму("РегистрСведений.ДействиеПоложенийОЗакупках.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВсехПроектовСПЗПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ТД = Элемент.ТекущиеДанные;
	УдалитьПроектыСПЗНаСервере(ТекущийПользователь, Объект.ПериодЗакупки, ТД.ИД);
	Элементы.СписокВсехПроектовСПЗ.Обновить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура СформироватьСПЗНаОснованииПроектовСПЗ(Команда)
	
	СформироватьСПЗНаОснованииПроектаНаСервере(Элементы.СписокВсехПроектовСПЗ.ВыделенныеСтроки);
	
	Элементы.СписокВсехПроектовСПЗ.Обновить();
	Элементы.СписокИстория.Обновить();
	
	ПоказатьПредупреждение(, НСтр("ru = 'На основании проекта сформирована СПЗ'"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьСПЗНаОснованииПроектаНаСервере(Знач МассивСтрок)
	
	Для каждого Элемент Из МассивСтрок Цикл
	    Менеджер = РегистрыСведений.ПроектыСПЗ.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Менеджер, Элемент);
		Менеджер.Прочитать();
		РегистрыСведений.ПроектыСПЗ.ОбработатьПроектСПЗ(Элемент.Автор, Менеджер.ОрганизацияЗаказчик, Элемент.ПериодЗакупки, Элемент.ИД);
	КонецЦикла;
	
КонецПроцедуры

#Область ПолучениеДанных

&НаСервере
Функция СформироватьДанныеДляАвтоматическогоСозданияПроектовСПЗ(
				ТекущийПользователь, ПериодЗакупки, ПустойУИД, Субъекты223ФЗ)
				
	Если Объект.Источник = 1 Тогда
		// ПотребностиКОбработке
		СписокПотребностей = ПолучитьСписокПотребностей("ТолькоПозицииБольшеНуля");
		ПотребностиУХ.ВыполнитьКлючеваниеКоллекцииПотребностей(СписокПотребностей);
	ИначеЕсли Объект.Источник = 0 Тогда
		// Потребности из козины
		СписокПотребностей = ПолучитьПотребностиИзКорзины(ТекущийПользователь, ПериодЗакупки, Субъекты223ФЗ);
	КонецЕсли;
	
	ДанныеАвтоФормирования = Новый Структура("Параметры", Новый Структура);
	ДанныеАвтоФормирования.Параметры.Вставить("ПериодЗакупки", ПериодЗакупки);
	ДанныеАвтоФормирования.Параметры.Вставить("ПустойУИД", ПустойУИД);
	ДанныеАвтоФормирования.Параметры.Вставить("Автор", ТекущийПользователь);
	
	//
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОбщегоНазначенияУХ.ЗагрузитьТаблицуВоВременнуюТаблицуЗапроса(Запрос, "ВТ_Потребности", СписокПотребностей);
	
	Для Каждого КлючЗначение Из ДанныеАвтоФормирования.Параметры Цикл
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса_ПолучитьДанныеДляАвтоматическогоФормированияСПЗ();
	Результат = Запрос.Выполнить();
	
	Если Не ДанныеАвтоФормирования.Свойство("Таблицы") Тогда
		ДанныеАвтоФормирования.Вставить("Таблицы", Новый Структура);
	КонецЕсли;
	
	ДанныеАвтоФормирования.Таблицы.Вставить("ПотребностиСПараметрамиЗакупки", Результат.Выгрузить());
	ДанныеАвтоФормирования.Таблицы.Вставить("ТаблицаПараметровЗакупки", 
					ПланыВидовХарактеристик.ПараметрыЗакупки.ПолучитьТаблицуНастроекПараметровЗакупки());
	
	Возврат ДанныеАвтоФормирования;
	
КонецФункции

&НаСервере
Процедура ДобавитьВЗапросПериодыПотребности(Схема, Настройки)
	
	Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СПериодамиПотребности"));
	Параметр.Значение = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокПотребностей(ОтборКолвоСумма = "ТолькоПозицииКОбработке")
	
	Схема = Элементы.СписокПотребности.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
    Настройки = Элементы.СписокПотребности.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	ДобавитьВЗапросПериодыПотребности(Схема, Настройки);
	
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиОтбор, Строка(Источник.ЛевоеЗначение), Источник.ПравоеЗначение, Источник.ВидСравнения, , Источник.Использование, Источник.РежимОтображения);
	
	Если ОтборКолвоСумма = "ТолькоПозицииКОбработке" Тогда
		ГруппаИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Настройки.Отбор.Элементы, "ТолькоКОбработке", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли, "КоличествоКОбработке", ВидСравненияКомпоновкиДанных.НеРавно, 0,,Истина);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли, "СуммаКОбработке", 	  ВидСравненияКомпоновкиДанных.НеРавно, 0,,Истина);
	ИначеЕсли ОтборКолвоСумма = "ТолькоПозицииБольшеНуля" Тогда
		//ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Настройки.Отбор.Элементы, "ТолькоКОбработке", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Настройки.Отбор, "КоличествоКОбработке",ВидСравненияКомпоновкиДанных.БольшеИлиРавно,0,,Истина);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Настройки.Отбор, "СуммаКОбработке", 	ВидСравненияКомпоновкиДанных.Больше, 		0,,Истина);
	КонецЕсли;
	
	// Добавляем обязательные поля
	УстановитьОбязательныеПоляПотребностей(Настройки.Структура[0].Выбор);
	
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
                            
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
    
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    
    ТаблицаПотребностей = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если ТаблицаПотребностей.Колонки.Найти("Характеристика") = неопределено Тогда
		ТаблицаПотребностей.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	
	Возврат ТаблицаПотребностей;
	
КонецФункции

&наСервереБезКонтекста
Функция ПолучитьПотребностиИзКорзины(Автор, ПериодЗакупки, Субъекты223ФЗ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Автор", Автор);
	Запрос.УстановитьПараметр("ПериодЗакупки", ПериодЗакупки);
	Запрос.УстановитьПараметр("Субъекты223ФЗ", Субъекты223ФЗ);
	Запрос.УстановитьПараметр("ПустойУИД", ПотребностиУХ.ПустойУИД());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПроектыСПЗПозиции.АналитикаНоменклатуры КАК АналитикаНоменклатуры,
	|	ПроектыСПЗПозиции.АналитикаПотребностей КАК АналитикаПотребностей,
	|	ПроектыСПЗПозиции.АналитикаСтруктуры КАК АналитикаСтруктуры,
	|	ПроектыСПЗПозиции.ОрганизацияЗаказчик КАК ОрганизацияЗаказчик,
	|	ПроектыСПЗПозиции.ПериодЗакупки КАК ПериодЗакупки,
	|	ПроектыСПЗПозиции.ПериодПотребности КАК ПериодПотребности,
	|	ПроектыСПЗПозиции.Количество КАК КоличествоКОбработке,
	|	ПроектыСПЗПозиции.Сумма КАК СуммаКОбработке,
	|	ВЫБОР
	|		КОГДА ПроектыСПЗПозиции.АналитикаНоменклатуры.Номенклатура ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ВЫРАЗИТЬ(ПроектыСПЗПозиции.АналитикаНоменклатуры.Номенклатура КАК Справочник.Номенклатура).КодОКПД2
	|		КОГДА ПроектыСПЗПозиции.АналитикаНоменклатуры.Номенклатура ССЫЛКА Справочник.ТоварныеКатегории
	|			ТОГДА ВЫРАЗИТЬ(ПроектыСПЗПозиции.АналитикаНоменклатуры.Номенклатура КАК Справочник.ТоварныеКатегории).КодОКПД2
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторОКПД2.ПустаяСсылка)
	|	КОНЕЦ КАК ОКПД2,
	|	ВЫБОР
	|		КОГДА ПроектыСПЗПозиции.АналитикаНоменклатуры.Номенклатура ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ВЫРАЗИТЬ(ПроектыСПЗПозиции.АналитикаНоменклатуры.Номенклатура КАК Справочник.Номенклатура).ТоварнаяКатегория
	|		КОГДА ПроектыСПЗПозиции.АналитикаНоменклатуры.Номенклатура ССЫЛКА Справочник.ТоварныеКатегории
	|			ТОГДА ВЫРАЗИТЬ(ПроектыСПЗПозиции.АналитикаНоменклатуры.Номенклатура КАК Справочник.ТоварныеКатегории)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)
	|	КОНЕЦ КАК ТоварнаяКатегория,
	|	ПроектыСПЗПозиции.Валюта КАК Валюта	
	|ИЗ
	|	РегистрСведений.ПроектыСПЗПозиции КАК ПроектыСПЗПозиции
	|ГДЕ
	|	ПроектыСПЗПозиции.Автор = &Автор
	|	И ПроектыСПЗПозиции.ИД = &ПустойУИД
	|	И НЕ(ПроектыСПЗПозиции.Количество = 0
	|				И ПроектыСПЗПозиции.Сумма = 0)
	|	И ПроектыСПЗПозиции.ПериодЗакупки = &ПериодЗакупки
	|	И ПроектыСПЗПозиции.ОрганизацияЗаказчик.ЗакупкаПоФЗ223 = &Субъекты223ФЗ";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ПолучитьСписокПотребностиВыбранные(ТаблицаВыбранных)

	Схема = Элементы.СписокПотребности.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
    Настройки = Элементы.СписокПотребности.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	ВнешниеНаборыДанных = Новый Структура("ВыбранныеПотребности", ТаблицаВыбранных);
	
	НаборДанныхОтбора = Схема.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанныхОтбора.Имя = "НаборДанныхВыбранныеПотребности";
	НаборДанныхОтбора.ИмяОбъекта = "ВыбранныеПотребности";
	НаборДанныхОтбора.ИсточникДанных = "ИсточникДанных";
	Для Каждого Колонка Из ТаблицаВыбранных.Колонки Цикл
		// Поле набора данных
		Поле = НаборДанныхОтбора.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		Поле.Поле =  Колонка.Имя;
		Поле.ПутьКДанным = Колонка.Имя;
		Поле.ТипЗначения = Колонка.ТипЗначения;
		
		// Связь набора данных
		Связь = Схема.СвязиНаборовДанных.Добавить();
		Связь.НаборДанныхИсточник = "НаборДанныхВыбранныеПотребности";
		Связь.НаборДанныхПриемник = "НаборДанныхДинамическогоСписка";
		Связь.ВыражениеИсточник = Колонка.Имя;
		Связь.ВыражениеПриемник = Колонка.Имя;
		Связь.Обязательная = Истина;
		
	КонецЦикла;
	
	ДобавитьВЗапросПериодыПотребности(Схема, Настройки);
	
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиОтбор, Строка(Источник.ЛевоеЗначение), Источник.ПравоеЗначение, Источник.ВидСравнения, , Источник.Использование, Источник.РежимОтображения);
	
	//Если ТолькоПозицииКОбработке = Истина Тогда
	//	ГруппаИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Настройки.Отбор.Элементы, "ТолькоКОбработке", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	//	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли, "КоличествоКОбработке", ВидСравненияКомпоновкиДанных.НеРавно, 0,,Истина);
	//	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли, "СуммаКОбработке", 		ВидСравненияКомпоновкиДанных.НеРавно, 0,,Истина);
	//КонецЕсли;
	
	// Добавляем обязательные поля
	УстановитьОбязательныеПоляПотребностей(Настройки.Структура[0].Выбор);
	
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
                            
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
    
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    
    ТаблицаПотребностей = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если ТаблицаПотребностей.Колонки.Найти("Характеристика") = неопределено Тогда
		ТаблицаПотребностей.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	
	Возврат ТаблицаПотребностей;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокПотребностиБезКонтекста(Форма)

	Схема = Форма.Элементы.СписокПотребности.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
    Настройки = Форма.Элементы.СписокПотребности.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Настройки.Отбор, Неопределено, Неопределено, Неопределено, "Отбор1", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Настройки.Отбор, Неопределено, Неопределено, Неопределено, "Отбор2", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Настройки.Отбор, Неопределено, Неопределено, Неопределено, "Отбор3", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Настройки.Отбор, Неопределено, Неопределено, Неопределено, "Отбор4", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Настройки.Отбор, Неопределено, Неопределено, Неопределено, "Отбор5", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Настройки.Отбор, Неопределено, Неопределено, Неопределено, "Отбор6", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Настройки.Отбор, Неопределено, Неопределено, Неопределено, "Отбор7", Ложь);
	
	////ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиОтбор, Строка(Источник.ЛевоеЗначение), Источник.ПравоеЗначение, Источник.ВидСравнения, , Источник.Использование, Источник.РежимОтображения);
	//
	//Если ТолькоПозицииКОбработке = Истина Тогда
	//	ГруппаИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Настройки.Отбор.Элементы, "ТолькоКОбработке", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	//	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли, "КоличествоКОбработке", ВидСравненияКомпоновкиДанных.НеРавно, 0,,Истина);
	//	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли, "СуммаКОбработке", 		ВидСравненияКомпоновкиДанных.НеРавно, 0,,Истина);
	//КонецЕсли;
	
	// Добавляем обязательные поля
	УстановитьОбязательныеПоляПотребностей(Настройки.Структура[0].Выбор);
	
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
                            
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
    
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    
    ТаблицаПотребностей = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если ТаблицаПотребностей.Колонки.Найти("Характеристика") = неопределено Тогда
		ТаблицаПотребностей.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	
	Возврат ТаблицаПотребностей;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьОбязательныеПоляПотребностей(Выбор)
	
	Обязательные = Новый Структура("ОрганизацияЗаказчик, Валюта,ПериодЗакупки, Номенклатура, ТоварнаяКатегория, ОКПД2, Характеристика, Коэффициент, МестоПоставки, Организация, Менеджер, Приоритет, Назначение");
	Обязательные.Вставить("НоменклатураНаименование");
	Обязательные.Вставить("СпособЗакупки");
	Обязательные.Вставить("Организатор");
	Для Каждого КлючЗначение Из Обязательные Цикл
		
		Если НЕ ПолеВыбрано(Выбор.Элементы, Врег(КлючЗначение.Ключ)) Тогда
			НовоеПоле = Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(КлючЗначение.Ключ);
			НовоеПоле.Использование = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолеВыбрано(Элементы, ИмяПоля)
	
	Результат = Ложь;
	Для Каждого Элемент Из Элементы Цикл
	
		Если ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			Результат = ПолеВыбрано(Элемент.Элементы, ИмяПоля);
		Иначе
			Результат = ИмяПоля = ВРег(Строка(Элемент.Поле));
		КонецЕсли;
	
		Если Результат Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла; 
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

&НаКлиенте
Процедура КорзинаПослеУдаления(Элемент)
	
	УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	Элементы.СписокПотребности.Обновить();
	Элементы.Корзина.Обновить();
	
КонецПроцедуры

#Область КомандыФормы

&НаКлиенте
Процедура УдалитьВсеПроектыСПЗ(Команда)
	УдалитьВсеПроектыСПЗНаСервере(ТекущийПользователь, Объект.ПериодЗакупки, Объект.Субъекты223ФЗ);
	Элементы.СписокВсехПроектовСПЗ.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	Если ПредупреждатьПриПомещенииВКорзинуВсехПотребностей Тогда
		
		ТекстВопроса = НСтр("ru = 'Поместить в корзину все необработанные позиции потребностей?'");
		Оповещение = Новый ОписаниеОповещения("ВыбратьВсеЗавершение", ЭтаФорма);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыбратьВсеЗавершение(КодВозвратаДиалога.Да, неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВыборРазмещения(Команда)
	
	Объект.Обеспечение = ПредопределенноеЗначение("Перечисление.ВариантыВключенияПозицийПотребностей.ПустаяСсылка");
	ПолучательДляРучногоРаспределения = неопределено;
	
	СформироватьИнформационнуюНадписьПомещение(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеФункции(Команда)
	
	//
	РасширенныйРежим = НЕ РасширенныйРежим;
	
	УправлениеДоступностьюДополнительныхФункций();
	
КонецПроцедуры

#Область ДополнительныеПроцедурыИФункции
	
&НаКлиенте
Процедура ВыбратьВсеЗавершение(Результат, ДопПараметры) экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	РезультатОперации = ВыбратьВсеНаСервере();
	Если РезультатОперации = Истина Тогда
		Если РежимФормирования <> 2 Тогда
			РежимФормирования = 2;
			УстановитьКнопкиРежимаДобавления();
		КонецЕсли;
	Иначе
		ОбработатьРезультатОперации(РезультатОперации);
	КонецЕсли;
	
	Элементы.СписокПотребности.Обновить();
	Элементы.Корзина.Обновить();
	УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ВыбратьВсеНаСервере()
	
	Потребности = ПолучитьСписокПотребностей();
	
	Возврат ДобавитьПотребностиВРабочиеДанные(
		ТекущийПользователь, 
		Объект.ПериодЗакупки, 
		ПустойУИД, 
		Потребности, 
		Объект.Субъекты223ФЗ, 
		РазрешеноДобавлениеПротиворечивыхПозицийВКорзину()
	);
	
КонецФункции

&НаКлиенте
Процедура УправлениеДоступностьюДополнительныхФункций()
	
	Элементы.ДополнительныеФункции.Пометка = РасширенныйРежим;
	Элементы.СписокПотребностиКнопкаАвтоматическое.Видимость = РасширенныйРежим;
	
	Элементы.СписокПотребностиКомандаАвтоматическиИзКорзины.Заголовок = ?(РасширенныйРежим, НСтр("ru = 'Пакетный (корзина)'"), НСтр("ru = 'Пакетный'"));
	Если НЕ РасширенныйРежим Тогда
		// Переключиться на доступный всегда режим Пакетный
		Если РежимФормирования = 1 Тогда
			КомандаАвтоматическиИзКорзины(неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 
	
#КонецОбласти

&НаКлиенте
Процедура ТаблицаОтбораЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//
	ТД = Элементы.ТаблицаОтбора.ТекущиеДанные;
	
	Если ТД = неопределено ИЛИ ТД.ИмяРеквизита <> "ТоварнаяКатегория" Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОрганизацииТоварныеКатегорииНоменклатуры()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ЗакупкаПоФЗ223", Объект.Субъекты223ФЗ);
	СписокПериодовПотребностей = ПолучитьПараметрыОтбораПотребностей(Объект.ПериодЗакупки);
	Запрос.УстановитьПараметр("СписокПериодов", СписокПериодовПотребностей);
	Запрос.УстановитьПараметр("ПериодЗакупок", Объект.ПериодЗакупки);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварныеКатегории.Ссылка КАК ТоварнаяКатегория,
	|	ТоварныеКатегории.Наименование КАК ТоварнаяКатегорияНаименование
	|ПОМЕСТИТЬ ВТ_ВсеТК
	|ИЗ
	|	Справочник.ТоварныеКатегории КАК ТоварныеКатегории
	|ГДЕ
	|	ТоварныеКатегории.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ПОМЕСТИТЬ ВТ_ВсеОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ОбособленноеПодразделение = ЛОЖЬ
	|	И Организации.ПометкаУдаления = ЛОЖЬ
	|	И Организации.ЗакупкаПоФЗ223 = &ЗакупкаПоФЗ223
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыОКПД2.Ссылка КАК ОКПД2,
	|	КодыОКПД2.Наименование КАК ОКПД2Наименование
	|ПОМЕСТИТЬ ВТ_ВсеОКПД2
	|ИЗ
	|	Справочник.КлассификаторОКПД2 КАК КодыОКПД2
	|ГДЕ
	|	КодыОКПД2.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПолномочияКатегорийныхМенеджеров.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	1 КАК Пометка,
	|	ПРЕДСТАВЛЕНИЕ(ПолномочияКатегорийныхМенеджеров.ТоварнаяКатегория) КАК ТоварнаяКатегорияНаименование
	|ИЗ
	|	РегистрСведений.ПолномочияКатегорийныхМенеджеров КАК ПолномочияКатегорийныхМенеджеров
	|ГДЕ
	|	ПолномочияКатегорийныхМенеджеров.Менеджер = &ТекущийПользователь
	|	И ПолномочияКатегорийныхМенеджеров.ТоварнаяКатегория <> ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварнаяКатегория
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОрганизацииПользователя.Организация КАК Организация,
	|	ИСТИНА КАК Пометка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПолномочияКатегорийныхМенеджеров.Организация КАК Организация
	|	ИЗ
	|		РегистрСведений.ПолномочияКатегорийныхМенеджеров КАК ПолномочияКатегорийныхМенеджеров
	|	ГДЕ
	|		ПолномочияКатегорийныхМенеджеров.Менеджер = &ТекущийПользователь
	|		И ПолномочияКатегорийныхМенеджеров.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		И ПолномочияКатегорийныхМенеджеров.Организация.ЗакупкаПоФЗ223 = &ЗакупкаПоФЗ223
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ВТ_ВсеОрганизации.Организация
	|	ИЗ
	|		РегистрСведений.ПолномочияКатегорийныхМенеджеров КАК ПолномочияКатегорийныхМенеджеров
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВсеОрганизация КАК ВТ_ВсеОрганизации
	|			ПО (ПолномочияКатегорийныхМенеджеров.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|	ГДЕ
	|		ПолномочияКатегорийныхМенеджеров.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		И ПолномочияКатегорийныхМенеджеров.Менеджер = &ТекущийПользователь) КАК ОрганизацииПользователя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПотребностиВНоменклатуре КАК ПотребностиВНоменклатуре
	|		ПО ОрганизацииПользователя.Организация = ПотребностиВНоменклатуре.Организация
	|			И (ПотребностиВНоменклатуре.ПериодПотребности В (&СписокПериодов))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДействиеПоложенийОЗакупках КАК ДействиеПоложенийОЗакупках
	|		ПО ОрганизацииПользователя.Организация = ДействиеПоложенийОЗакупках.Организация
	|			И (ДействиеПоложенийОЗакупках.ПериодЗакупок = &ПериодЗакупок)
	|ГДЕ
	|	(ПотребностиВНоменклатуре.КоличествоПотребность <> 0
	|			ИЛИ ПотребностиВНоменклатуре.СуммаПотребность <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_ВсеОрганизация.Организация КАК Организация,
	|	ИСТИНА КАК Пометка
	|ИЗ
	|	ВТ_ВсеОрганизация КАК ВТ_ВсеОрганизация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПотребностиВНоменклатуре КАК ПотребностиВНоменклатуре
	|		ПО ВТ_ВсеОрганизация.Организация = ПотребностиВНоменклатуре.Организация
	|			И (ПотребностиВНоменклатуре.ПериодПотребности В (&СписокПериодов))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДействиеПоложенийОЗакупках КАК ДействиеПоложенийОЗакупках
	|		ПО ВТ_ВсеОрганизация.Организация = ДействиеПоложенийОЗакупках.Организация
	|			И (ДействиеПоложенийОЗакупках.ПериодЗакупок = &ПериодЗакупок)
	|ГДЕ
	|	(ПотребностиВНоменклатуре.КоличествоПотребность <> 0
	|			ИЛИ ПотребностиВНоменклатуре.СуммаПотребность <> 0)";
	
	Результат = Запрос.ВыполнитьПакет();
	
	// ТК
	
	Объект.ТоварныеКатегории.Загрузить(Результат[3].Выгрузить());
	
	ПрочееТК = Объект.ТоварныеКатегории.Добавить();
	ПрочееТК.Пометка = 1;
	ПрочееТК.ТоварнаяКатегория = Справочники.ТоварныеКатегории.ПустаяСсылка();
	
		// Организации
	Если Результат[4].Пустой() Тогда
		ТаблицаОрганизаций = Результат[5].Выгрузить();
	Иначе
		ТаблицаОрганизаций = Результат[4].Выгрузить();
	КонецЕсли;
	
	//
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Организации.Ссылка КАК ОбособденноеПодразделение
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ОбособленноеПодразделение = ИСТИНА
	|	И Организации.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГоловнаяОрганизация,
	|	ОбособденноеПодразделение
	|АВТОУПОРЯДОЧИВАНИЕ";
	СтруктураОрганизаций = Запрос.Выполнить().Выгрузить();
	
	ДО = РеквизитФормыВЗначение("ДеревоОрганизаций");
	
	До.Строки.Очистить();
	
	Для Каждого СтрОрг Из ТаблицаОрганизаций Цикл
		
		СтрокаОрганизация = ДО.Строки.Добавить();
		СтрокаОрганизация.Организация = СтрОрг.Организация;
		СтрокаОрганизация.Пометка = Истина;
		
		СтруктураПоиска = Новый Структура("ГоловнаяОрганизация", СтрокаОрганизация.Организация);
		Строки = СтруктураОрганизаций.НайтиСтроки(СтруктураПоиска);
		Если Строки.Количество() > 0 Тогда
			
			СтрокаФилиал = СтрокаОрганизация.Строки.Добавить();
			СтрокаФилиал.Организация = СтрОрг.Организация;
			СтрокаФилиал.Пометка = Истина;
			
			Для Каждого СтрФилиал Из Строки Цикл
				
				СтрокаФилиал = СтрокаОрганизация.Строки.Добавить();
				СтрокаФилиал.Организация = СтрФилиал.ОбособденноеПодразделение;
				СтрокаФилиал.Пометка = Истина;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДО, "ДеревоОрганизаций");
	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИсторияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТД = Элемент.ТекущиеДанные;
	Если ТД = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТД.Объект) = Тип("ДокументСсылка.СтрокаПланаЗакупок") Тогда
		ДопПараметры = Новый Структура("Ключ", ТД.Объект);
		ОткрытьФорму("Документ.СтрокаПланаЗакупок.ФормаОбъекта", ДопПараметры, ЭтаФорма, ,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ТипЗнч(ТД.Объект) = Тип("ДокументСсылка.ВерсияСоглашенияКоммерческийДоговор") Тогда
		ДопПараметры = Новый Структура("Ключ", ТД.Объект);
		ОткрытьФорму("Документ.ВерсияСоглашенияКоммерческийДоговор.ФормаОбъекта", ДопПараметры, ЭтаФорма, ,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИсторию(Команда)
	
	Элементы.СписокВсехПроектовСПЗПоказатьИсторию.Пометка = НЕ Элементы.СписокВсехПроектовСПЗПоказатьИсторию.Пометка;
	
	Элементы.СписокИстория.Видимость = Элементы.СписокВсехПроектовСПЗПоказатьИсторию.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияФормированияСПЗ(Команда)
	
	ПоказатьПредупреждение(, НСтр("ru = 'Отчет ИсторияФормированияСПЗ'"));
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаСписокУнификатов(Команда)
	ДопПараметры = Новый Структура("ВидОперации", ПредопределенноеЗначение("Перечисление.СпособыЗаменыНоменклатуры.Унификат"));
	ОткрытьФорму("РегистрСведений.НастройкаЗаменыНоменклатуры.Форма.ФормаСписка", ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура КомандаСписокАналогов(Команда)
	ДопПараметры = Новый Структура("ВидОперации", ПредопределенноеЗначение("Перечисление.СпособыЗаменыНоменклатуры.Аналоги"));
	ОткрытьФорму("РегистрСведений.НастройкаЗаменыНоменклатуры.Форма.ФормаСписка", ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановкаЦенНоменклатуры(Команда)
	ОткрытьФорму("Документ.УстановкаЦенНоменклатуры.Форма.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчет_ПотребностиКУнификации()
	ПНастройки = СформироватьПользовательскиеНастройкиОтчета(
		ТекущийПользователь, Объект.ПериодЗакупки, Объект.Субъекты223ФЗ);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СформироватьПриОткрытии", Истина);
	ДопПараметры.Вставить("ПользовательскиеНастройки", ПНастройки);
	ОткрытьФорму("Отчет.ПозицииПотребностейКЗамещениюУнификатами.Форма", ДопПараметры, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчет_ПотребностиКЗаменеНаАналоги()
	ПНастройки = СформироватьПользовательскиеНастройкиОтчетаКЗамещениюАналогами(
		ТекущийПользователь, Объект.ПериодЗакупки, Объект.Субъекты223ФЗ);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СформироватьПриОткрытии", Истина);
	ДопПараметры.Вставить("ПользовательскиеНастройки", ПНастройки);
	ОткрытьФорму("Отчет.ПозицииПотребностейКЗамещениюАналогами.Форма", ДопПараметры, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчет_СПЗКАвтоОбновлению()
	ПНастройки = СформироватьПользовательскиеНастройкиОтчетаАвтоОбновлениеСПЗ(
			ТекущийПользователь, Объект.ПериодЗакупки, Объект.Субъекты223ФЗ);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СформироватьПриОткрытии", Истина);
	ДопПараметры.Вставить("ПользовательскиеНастройки", ПНастройки);
	ОткрытьФорму("Отчет.ПозицииПотребностейДляАвтоматическогоОбновления.Форма", ДопПараметры, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчет_СПЗКСозданию()
	ПНастройки = СформироватьПользовательскиеНастройкиОтчетаАвтоОбновлениеСПЗ(
			ТекущийПользователь, Объект.ПериодЗакупки, Объект.Субъекты223ФЗ);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СформироватьПриОткрытии", Истина);
	ДопПараметры.Вставить("ПользовательскиеНастройки", ПНастройки);
	ОткрытьФорму("Отчет.ПозицииПотребностейДляСозданияСПЗ.Форма", ДопПараметры, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчет_ПотребностиБезОКПД2()
	ПНастройки = СформироватьПользовательскиеНастройкиОтчетаПотребностиБезОКПД2(
		ТекущийПользователь, Объект.ПериодЗакупки, Объект.Субъекты223ФЗ);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СформироватьПриОткрытии", Истина);
	ДопПараметры.Вставить("ПользовательскиеНастройки", ПНастройки);
	
	ПозицииПотребностейБезОКПД2Закрытие = Новый ОписаниеОповещения("ПозицииПотребностейБезОКПД2Закрытие", ЭтаФорма, ДопПараметры);
	
	ОткрытьФорму("Отчет.ПозицииПотребностейБезКодаОКПД2.Форма", ДопПараметры, ЭтаФорма,,,,ПозицииПотребностейБезОКПД2Закрытие);
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицииПотребностейБезОКПД2Закрытие(Результат, ДопПараметры) экспорт
	
	ПодключитьОбработчикОжидания("ПолучитьТекущееСостояниеПозицииБезОКПД2", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеАналогамиОбработка()
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СформироватьПриОткрытии", Истина);
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПериодЗакупки", Объект.ПериодЗакупки);
	Отбор.Вставить("Автор", ТекущийПользователь);

	ДопПараметры.Вставить("Отбор", Отбор);
	
	УправлениеАналогамиЗакрытие = Новый ОписаниеОповещения("УправлениеАналогамиЗакрытие", ЭтаФорма, ДопПараметры);
	
	ОткрытьФорму("Обработка.УправлениеАналогами.Форма", ДопПараметры, ЭтаФорма,,,,УправлениеАналогамиЗакрытие, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеАналогамиЗакрытие(Результат, ДопПараметры) экспорт
	
	ПодключитьОбработчикОжидания("ПолучитьТекущееСостояниеАналогов", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеАналогами()
	
	ПНастройки = СформироватьПользовательскиеНастройкиОтчетаУправленияАналогами(
			ТекущийПользователь, Объект.ПериодЗакупки, Объект.Субъекты223ФЗ);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СформироватьПриОткрытии", Истина);
	ДопПараметры.Вставить("ПользовательскиеНастройки", ПНастройки);
	ОткрытьФорму("Отчет.ОтчетОПримененииАналогов.Форма", ДопПараметры, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьПользовательскиеНастройкиОтчетаПотребностиБезОКПД2(Пользователь, ПериодЗакупки, Субъекты223ФЗ)
	
	Отчет = Отчеты.ПозицииПотребностейБезКодаОКПД2.Создать();
	
	Для Каждого Элемент Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если Строка(Элемент.Параметр) = "Автор" Тогда
			Элемент.Значение = Пользователь;
			Элемент.Использование = Истина;
		ИначеЕсли Строка(Элемент.Параметр) = "ПериодЗакупки" Тогда
			Элемент.Значение = ПериодЗакупки;
			Элемент.Использование = Истина;
		ИначеЕсли Строка(Элемент.Параметр) = "Субъекты223ФЗ" Тогда
			Элемент.Значение = Субъекты223ФЗ;
			Элемент.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьПользовательскиеНастройкиОтчета(Пользователь, ПериодЗакупки, Субъекты223ФЗ)
	
	Отчет = Отчеты.ПозицииПотребностейКЗамещениюУнификатами.Создать();
	
	Для Каждого Элемент Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если Строка(Элемент.Параметр) = "Автор" Тогда
			Элемент.Значение = Пользователь;
			Элемент.Использование = Истина;
		ИначеЕсли Строка(Элемент.Параметр) = "ПериодЗакупки" Тогда
			Элемент.Значение = ПериодЗакупки;
			Элемент.Использование = Истина;
		ИначеЕсли Строка(Элемент.Параметр) = "Субъекты223ФЗ" Тогда
			Элемент.Значение = Субъекты223ФЗ;
			Элемент.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьПользовательскиеНастройкиОтчетаКЗамещениюАналогами(Пользователь, ПериодЗакупки, Субъекты223ФЗ)
	
	Отчет = Отчеты.ПозицииПотребностейКЗамещениюАналогами.Создать();
	
	Для Каждого Элемент Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если Строка(Элемент.Параметр) = "Автор" Тогда
			Элемент.Значение = Пользователь;
			Элемент.Использование = Истина;
		ИначеЕсли Строка(Элемент.Параметр) = "ПериодЗакупки" Тогда
			Элемент.Значение = ПериодЗакупки;
			Элемент.Использование = Истина;
		ИначеЕсли Строка(Элемент.Параметр) = "Субъекты223ФЗ" Тогда
			Элемент.Значение = Субъекты223ФЗ;
			Элемент.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьПользовательскиеНастройкиОтчетаАвтоОбновлениеСПЗ(Пользователь, ПериодЗакупки, Субъекты223ФЗ)
	
	Отчет = Отчеты.ПозицииПотребностейДляАвтоматическогоОбновления.Создать();
	
	Для Каждого Элемент Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И Элемент.Параметр = Новый ПараметрКомпоновкиДанных("Автор") Тогда
			Элемент.Значение = Пользователь;
			Элемент.Использование = Истина;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И Элемент.Параметр = Новый ПараметрКомпоновкиДанных("ПериодЗакупки") Тогда
			Элемент.Значение = ПериодЗакупки;
			Элемент.Использование = Истина;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И Элемент.Параметр = Новый ПараметрКомпоновкиДанных("Субъекты223ФЗ") Тогда
			Элемент.Значение = Субъекты223ФЗ;
			Элемент.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьПользовательскиеНастройкиОтчетаУправленияАналогами(Пользователь, ПериодЗакупки, Субъекты223ФЗ)
	
	Отчет = Отчеты.ОтчетОПримененииАналогов.Создать();
	
	Для Каждого Элемент Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если Строка(Элемент.Параметр) = "Автор" Тогда
			Элемент.Значение = Пользователь;
			Элемент.Использование = Истина;
		ИначеЕсли Строка(Элемент.Параметр) = "ПериодЗакупки" Тогда
			Элемент.Значение = ПериодЗакупки;
			Элемент.Использование = Истина;
		ИначеЕсли Строка(Элемент.Параметр) = "Субъекты223ФЗ" Тогда
			Элемент.Значение = Субъекты223ФЗ;
			Элемент.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьОбработкуУнификатов(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Сообщить(НСтр("ru = 'Несколько позиций потребностей возможно заменены на унификаты.'"));
	
	ПодключитьОбработчикОжидания("ПолучитьТекущееСостояниеУнификатов", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработкуАналогов(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Сообщить(НСтр("ru = 'Несколько позиций потребностей возможно заменены на аналоги.'"));
	
	ПодключитьОбработчикОжидания("ПолучитьТекущееСостояниеАналогов", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУправлениеАналогами(Команда)
	УправлениеАналогами();
КонецПроцедуры

#Область ПроверкаНабораПотребнсотей

&НаКлиенте
Процедура ОбработчикОжидания_ПроверкаНабораПотребностей()
	
	ПроверитьНаборПотребностей();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаборПотребностей()
	
	ИнициализироватьПараметрыШага_ОбеспечениеПотребностейНаСервере();
	
	Если Объект.Субъекты223ФЗ Тогда
		ОКПД2 = ПолучитьТекущееСостояниеКлассификацииОКПД2НаСервере(
					ТекущийПользователь, Объект.ПериодЗакупки);
		УстановитьКолвоПозицийДействия(ЭтаФорма, "ОКПД2", ОКПД2.КолвоПозиций);
	КонецЕсли;
	//
	Унификаты = ПолучитьТекущееСостояниеУнификатовНаСервере(ТекущийПользователь, Объект.ПериодЗакупки, Объект.Субъекты223ФЗ);
				
	УстановитьКолвоПозицийДействия(ЭтаФорма, "Унификаты", Унификаты.КолвоПозиций);
	
	//
	Аналоги = ПолучитьТекущееСостояниеАналоговНаСервере(
				ТекущийПользователь, Объект.ПериодЗакупки, Объект.Субъекты223ФЗ);
	УстановитьКолвоПозицийДействия(ЭтаФорма, "Аналоги", Аналоги.КолвоПозиций);

	//
	АвтоОбновление = ПолучитьТекущееСостояниеАвтоОбновленияНаСервере(
				ТекущийПользователь, Объект.ПериодЗакупки, Объект.Субъекты223ФЗ);
	УстановитьКолвоПозицийДействия(ЭтаФорма, "АвтоОбновление", АвтоОбновление.КолвоПозиций);
	
	//
	ПравилаПотребностей = ПолучитьТекущееСостояниеПравилНаСервере(ТекущийПользователь, Объект.ПериодЗакупки, Объект.Субъекты223ФЗ);
	УстановитьКолвоПозицийДействия(ЭтаФорма, "ПравилаПотребностей", ПравилаПотребностей.КолвоПозиций);
	
	//
	Если ИспользоватьДействиеСозданиеНовыхСПЗ Тогда
		АвтоОбновление = ПолучитьТекущееСостояниеСозданиеНовыхСПЗ(
					ТекущийПользователь, Объект.ПериодЗакупки, Объект.Субъекты223ФЗ);
		УстановитьКолвоПозицийДействия(ЭтаФорма, "СозданиеНовыхСПЗ", АвтоОбновление.КолвоПозиций);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТекущееСостояниеУнификатов()
	
	Унификаты = ПолучитьТекущееСостояниеУнификатовНаСервере(ТекущийПользователь, Объект.ПериодЗакупки, Объект.Субъекты223ФЗ);
				
	УстановитьКолвоПозицийДействия(ЭтаФорма, "Унификаты", Унификаты.КолвоПозиций);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТекущееСостояниеАналогов()
	
	Аналоги = ПолучитьТекущееСостояниеАналоговНаСервере(
				ТекущийПользователь, Объект.ПериодЗакупки, Объект.Субъекты223ФЗ);
	УстановитьКолвоПозицийДействия(ЭтаФорма, "Аналоги", Аналоги.КолвоПозиций);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТекущееСостояниеАвтоОбновление()
	
	АвтоОбновление = ПолучитьТекущееСостояниеАвтоОбновленияНаСервере(
				ТекущийПользователь, Объект.ПериодЗакупки, Объект.Субъекты223ФЗ);
	
	//
	УстановитьКолвоПозицийДействия(ЭтаФорма, "АвтоОбновление", АвтоОбновление.КолвоПозиций);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТекущееСостояниеСозданияНовыхСПЗ()
	
	Если НЕ ИспользоватьДействиеСозданиеНовыхСПЗ Тогда
		Возврат;
	КонецЕсли;
	
	АвтоОбновление = ПолучитьТекущееСостояниеСозданиеНовыхСПЗ(
				ТекущийПользователь, Объект.ПериодЗакупки, Объект.Субъекты223ФЗ);
	
	//
	УстановитьКолвоПозицийДействия(ЭтаФорма, "СозданиеНовыхСПЗ", АвтоОбновление.КолвоПозиций);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТекущееСостояниеПозицииБезОКПД2()
	
	БезОКПД2 = ПолучитьТекущееСостояниеКлассификацииОКПД2НаСервере(
			ТекущийПользователь, Объект.ПериодЗакупки);
	
	УстановитьКолвоПозицийДействия(ЭтаФорма, "ОКПД2", БезОКПД2.КолвоПозиций);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКолвоПозицийДействия(Форма, Действие, КолвоПозиций)
	
	Строки = Форма.Объект.Действия.НайтиСтроки(Новый Структура("ИД", Действие));
	Если Строки.Количество() > 0 Тогда
		Строки[0].Колво = КолвоПозиций;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ТаблицаДействий

&НаКлиенте
Процедура ВыборОрганизацииПравила_Завершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	// Особая обработка не требуется.
КонецПроцедуры		// ВыборОрганизацииПравила_Завершение()

&НаКлиенте
Процедура ДействияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ДействияКолво Тогда
		Если Элемент.ТекущиеДанные.ИД = "Унификаты" Тогда
			ОткрытьОтчет_ПотребностиКУнификации();
			СтандартнаяОбработка = Ложь;
		ИначеЕсли Элемент.ТекущиеДанные.ИД = "Аналоги" Тогда
			ОткрытьОтчет_ПотребностиКЗаменеНаАналоги();
			СтандартнаяОбработка = Ложь;
		ИначеЕсли Элемент.ТекущиеДанные.ИД = "ОКПД2" Тогда
			ОткрытьОтчет_ПотребностиБезОКПД2();
			СтандартнаяОбработка = Ложь;
		ИначеЕсли Элемент.ТекущиеДанные.ИД = "АвтоОбновление" Тогда
			ОткрытьОтчет_СПЗКАвтоОбновлению();
			СтандартнаяОбработка = Ложь;
		ИначеЕсли Элемент.ТекущиеДанные.ИД = "СозданиеНовыхСПЗ" Тогда
			ОткрытьОтчет_СПЗКСозданию();
			СтандартнаяОбработка = Ложь;
		ИначеЕсли Элемент.ТекущиеДанные.ИД = "ПравилаПотребностей" Тогда
			МассивОрганизаций = ПолучитьМассивОрганизацияПотребностиБезПравил(Объект.ПериодЗакупки, Объект.Субъекты223ФЗ);
			СписокОрганизаций = Новый СписокЗначений;
			СписокОрганизаций.ЗагрузитьЗначения(МассивОрганизаций);
			ОписаниеОЗакрытии = Новый ОписаниеОповещения("ВыборОрганизацииПравила_Завершение", ЭтаФорма);
			СписокОрганизаций.ПоказатьВыборЭлемента(ОписаниеОЗакрытии, НСтр("ru = 'Организации без правил заполнения'"));
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	ИначеЕсли Поле = Элементы.ДействияОбработать И Элемент.ТекущиеДанные.Колво > 0 Тогда
		Если Элемент.ТекущиеДанные.ИД = "Унификаты" Тогда
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ВыполнитьОбработкуУнификатов", ЭтаФорма),
				НСтр("ru = 'Будет выполнена замена потребностей на унификаты. Продолжить?'"),
				РежимДиалогаВопрос.ДаНет);
			СтандартнаяОбработка = Ложь;
		ИначеЕсли Элемент.ТекущиеДанные.ИД = "Аналоги" Тогда
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ВыполнитьОбработкуАналогов", ЭтаФорма), 
				НСтр("ru = 'Будет выполнена замена потребностей на аналоги. Продолжить?'"), 
				РежимДиалогаВопрос.ДаНет);
			СтандартнаяОбработка = Ложь;
		ИначеЕсли Элемент.ТекущиеДанные.ИД = "АвтоОбновление" Тогда
			СтандартнаяОбработка = Ложь;
			ДалееКШагуАвтоОбновлениеНаСервере();
		ИначеЕсли Элемент.ТекущиеДанные.ИД = "СозданиеНовыхСПЗ" Тогда
			ДалееКШагуОбеспеченияПотребностей();
			СтандартнаяОбработка = Ложь;
		ИначеЕсли Элемент.ТекущиеДанные.ИД = "ПравилаПотребностей" Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ПериодЗакупок", Объект.ПериодЗакупки);
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
			ОткрытьФорму("РегистрСведений.ДействиеПоложенийОЗакупках.Форма.ФормаСпискаПоГодам", СтруктураПараметров);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	ИначеЕсли Поле = Элементы.ДействияНастроить Тогда
		Если Элемент.ТекущиеДанные.ИД = "Аналоги" Тогда
			УправлениеАналогамиОбработка();
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура СписокПотребностиРасшифроватьПоПериодуПотребности(Команда)
	
	ДопПараметры = Новый Структура("Объект", Объект);
	Отбор = Новый Структура;
	Отбор.Вставить("ТекущийПользователь", ТекущийПользователь);
	Отбор.Вставить("ПустойУИД", ПустойУИД);
	
	ТД = Элементы.СписокПотребности.ТекущиеДанные;
	
	Отбор.Вставить("Номенклатура", ТД.Номенклатура);
	Если ТД.Свойство("Характеристика") Тогда
		Отбор.Вставить("Характеристика", ТД.Характеристика);
	КонецЕсли;
	Отбор.Вставить("МестоПоставки", ТД.МестоПоставки);
	Отбор.Вставить("Организация", ТД.Организация);
	Отбор.Вставить("Назначение", ТД.Назначение);
	Отбор.Вставить("Менеджер", ТД.Менеджер);
	Отбор.Вставить("Приоритет", ТД.Приоритет);
	Отбор.Вставить("Проект", ТД.Проект);
	
	ДопПараметры.Вставить("Отбор", Отбор);
	
	Если СтрначинаетсяС(ИмяФормы, "Внешняя") Тогда
		ОткрытьФорму("ВнешняяОбработка.ФормированиеСПЗ.Форма.РасшифровкаПоПериодамПотребности", ДопПараметры, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОткрытьФорму("Обработка.ФормированиеСПЗ.Форма.РасшифровкаПоПериодамПотребности", ДопПараметры, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗакупокНовогоПроектаСПЗВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Возврат;
	
	ТД = Элемент.ТекущиеДанные;
	Если ТД = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТД.ПоложениеОЗакупках) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДопПараметры = Новый Структура("Ключ, УИДУсловия", ТД.ПоложениеОЗакупках, ТД.УИДУсловия);
	ОткрытьФорму("Справочник.ПоложениеОЗакупках.Форма.ФормаЭлемента", ДопПараметры, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПравило(Команда)
	
	ТД = Элементы.ПараметрыЗакупокНовогоПроектаСПЗ.ТекущиеДанные;
	Если ТД = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТД.ПоложениеОЗакупках) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДопПараметры = Новый Структура("Ключ, УИДУсловия", ТД.ПоложениеОЗакупках, ТД.УИДУсловия);
	ОткрытьФорму("Справочник.ПоложениеОЗакупках.Форма.ФормаЭлемента", ДопПараметры, Элементы.ПараметрыЗакупокНовогоПроектаСПЗ);
	
КонецПроцедуры

#Область ФормированиеОтчетов

&НаСервере
Процедура СформироватьОтчет_ВыбранныеПозиции_ПоИсточнику(Источник, ТабДокумент)
	
	Если Источник = 0 Тогда
		//
		СформироватьОтчет_ВыбранныеПозицииИзКорзины(ТабДокумент);
	ИначеЕсли Источник = 1 Тогда
		//
		СформироватьОтчет_ПотребностиКОбработке(ТабДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчет_ВыбранныеПозицииИзКорзины(ТабДокумент)
	
	 // Получаем схему из макета
	Обработка = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных = Обработка.ПолучитьМакет("СКД_ВыбранныеПотребности");

	// Из схемы возьмем настройки по умолчанию
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Автор"));
	Параметр.Значение = ТекущийПользователь;
	
	Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодЗакупки"));
	Параметр.Значение = Объект.ПериодЗакупки;
	
	// Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	// Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	// Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	// Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	// Очищаем поле табличного документа
	ТабДокумент.Очистить();
	
	// Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДокумент);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 
	
	//// пытаемся получить данные организации из запроса
	//ПроцессорВывода2 = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	//Таблица = Новый ДеревоЗначений;
	//ПроцессорВывода2.УстановитьОбъект(Таблица);
	//
	//ПроцессорВывода2.Вывести(ПроцессорКомпоновкиДанных); 
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчет_ПотребностиКОбработке(ТабДокумент)
	
	// Связь между таблицей значений и именами в СКД 
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ПотребностиКОбработке", ПолучитьСписокПотребностей());
	
 	// Получаем схему из макета
	СхемаКомпоновкиДанных = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СКД_ПотребностиДляАвтоматическогоСозданияСПЗ");

	// Из схемы возьмем настройки по умолчанию
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;

	// Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

	// Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	// Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);

	// Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);

	// Очищаем поле табличного документа
	ТабДокумент.Очистить();
	
	// Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ОтчетПотребностиДляАвтоматическогоФормирования);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчет_ПотребностиДляАвтоматическогоОбновления() Экспорт
	
	// Получаем схему из макета
	СхемаКомпоновкиДанных = Отчеты.ПозицииПотребностейДляАвтоматическогоОбновления.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	// Из схемы возьмем настройки по умолчанию
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Автор"));
	Параметр.Значение = ТекущийПользователь;
	Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодЗакупки"));
	Параметр.Значение = Объект.ПериодЗакупки;
	Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Субъекты223ФЗ"));
	Параметр.Значение = Объект.Субъекты223ФЗ;
	
	// Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	// Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	// Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	// Очищаем поле табличного документа
	ОтчетАвтоОбновлениеСПЗ.Очистить();
	
	// Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	
	// Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ОтчетАвтоОбновлениеСПЗ);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

#КонецОбласти 

#Область ТекстыЗапросов

&НаСервереБезКонтекста
Функция ТекстЗапроса_ПотребностиИзКорзины()
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПроектыСПЗПозиции.ОрганизацияЗаказчик КАК ОрганизацияЗаказчик,
	|	ПроектыСПЗПозиции.АналитикаНоменклатуры КАК АналитикаНоменклатуры,
	|	ПроектыСПЗПозиции.АналитикаПотребностей КАК АналитикаПотребностей,
	|	ПроектыСПЗПозиции.АналитикаСтруктуры КАК АналитикаСтруктуры,
	|	СУММА(ПроектыСПЗПозиции.Количество) КАК Количество,
	|	СУММА(ПроектыСПЗПозиции.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТ_Потребности
	|ИЗ
	|	РегистрСведений.ПроектыСПЗПозиции КАК ПроектыСПЗПозиции
	|ГДЕ
	|	ПроектыСПЗПозиции.Автор = &Автор
	|	И ПроектыСПЗПозиции.ИД = &ПустойУИД
	|	И ПроектыСПЗПозиции.ПериодЗакупки = &ПериодЗакупки
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроектыСПЗПозиции.ОрганизацияЗаказчик,
	|	ПроектыСПЗПозиции.АналитикаНоменклатуры,
	|	ПроектыСПЗПозиции.АналитикаПотребностей,
	|	ПроектыСПЗПозиции.АналитикаСтруктуры";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапроса_ПолучитьДанныеДляАвтоматическогоФормированияСПЗ()
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВТ_Потребности.АналитикаНоменклатуры КАК АналитикаНоменклатуры,
	|	ВТ_Потребности.АналитикаПотребностей КАК АналитикаПотребностей,
	|	ВТ_Потребности.АналитикаСтруктуры КАК АналитикаСтруктуры,
	|	ВТ_Потребности.ОрганизацияЗаказчик КАК ОрганизацияЗаказчик,
	|	ВТ_Потребности.ПериодЗакупки КАК ПериодЗакупки,
	|	ВТ_Потребности.ПериодПотребности КАК ПериодПотребности,
	|	ВТ_Потребности.КоличествоКОбработке КАК Количество,
	|	ВТ_Потребности.СуммаКОбработке КАК Сумма,
	|	ВТ_Потребности.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	ВТ_Потребности.ОКПД2 КАК ОКПД2,
	|	ВТ_Потребности.АналитикаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВТ_Потребности.АналитикаНоменклатуры.Характеристика КАК Характеристика,
	|	ВТ_Потребности.АналитикаПотребностей.МестоПоставки КАК МестоПоставки,
	|	ВТ_Потребности.АналитикаПотребностей.Приоритет КАК Приоритет,
	|	ВТ_Потребности.АналитикаПотребностей.Менеджер КАК Менеджер,
	|	ВТ_Потребности.АналитикаПотребностей.Назначение КАК Назначение,
	|	ВТ_Потребности.АналитикаСтруктуры.ЦФО КАК ЦФО,
	|	ВТ_Потребности.АналитикаСтруктуры.Проект КАК Проект,
	|	ВТ_Потребности.АналитикаСтруктуры.Организация КАК Организация,
	|	ПараметрыЗакупкиПотребностей1.КлючПараметровЗакупки КАК КлючПараметровЗакупки,
	|	ПараметрыЗакупкиПотребностей1.ПоложениеОЗакупках КАК ПоложениеОЗакупках,
	|	ПараметрыЗакупкиПотребностей1.УИДУсловия КАК УИДУсловия,
	|	КлючиПараметровЗакупки.*
	|ИЗ
	|	ВТ_Потребности КАК ВТ_Потребности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЗакупкиПотребностей1 КАК ПараметрыЗакупкиПотребностей1
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиПараметровЗакупки КАК КлючиПараметровЗакупки
	|			ПО ПараметрыЗакупкиПотребностей1.КлючПараметровЗакупки = КлючиПараметровЗакупки.Ссылка
	|		ПО (&Автор = ПараметрыЗакупкиПотребностей1.Автор)
	|			И (&ПериодЗакупки = ПараметрыЗакупкиПотребностей1.ПериодЗакупки)
	|			И ВТ_Потребности.АналитикаНоменклатуры = ПараметрыЗакупкиПотребностей1.АналитикаНоменклатуры
	|			И ВТ_Потребности.АналитикаПотребностей = ПараметрыЗакупкиПотребностей1.АналитикаПотребностей
	|			И ВТ_Потребности.АналитикаСтруктуры = ПараметрыЗакупкиПотребностей1.АналитикаСтруктуры
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти 

#Область РаботаСоСпискамиОтбора
	
#Область СписокТоварныхКатегорий
	
&НаКлиенте
Процедура ТоварныеКатегорииУстановитьФлажки(Команда)
	
	УстановитьПометкуДляВсехТоварныхКатегорий(1);
	ДеревоОтборовПриИзмененииЗавершение(неопределено, неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТовраныеКатегорииСнятьФлажки(Команда)
	
	УстановитьПометкуДляВсехТоварныхКатегорий(0);
	ДеревоОтборовПриИзмененииЗавершение(неопределено, неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТоварныхКатегорийПометкаПриИзменении(Элемент)
	        
	ТД = Элементы.СписокТоварныхКатегорий.ТекущиеДанные;
	
	// Исключаем ненужное состояние
	Если ТД.Пометка = 2 Тогда
		ТД.Пометка = 0;
	КонецЕсли;
	
	УстановитьПометкуДляНоменклатуры(ТД);
	ДеревоОтборовПриИзмененииЗавершение(неопределено, неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТоварныхКатегорийПриАктивизацииСтроки(Элемент)
	
	ТД = Элементы.СписокТоварныхКатегорий.ТекущиеДанные;
	Если ТД = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СписокНоменклатуры.ОтборСтрок = Новый ФиксированнаяСтруктура("ТоварнаяКатегория, НоменклатураНаименование", ТД.ТоварнаяКатегория, ПоискНоменклатуры);
	
КонецПроцедуры

#Область ПоискВСписках_ТоварныеКатегории

&НаКлиенте
Процедура ПоискТоварнойКатегорииИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	УстановитьОтборСпискаТоварныхКатегорий(Текст);
КонецПроцедуры

&НаКлиенте
Процедура ПоискТоварнойКатегорииОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоискТоварнойКатегории = "";
	УстановитьОтборСпискаТоварныхКатегорий(ПоискТоварнойКатегории);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСпискаТоварныхКатегорий(Текст)
	СтруктураОтбора = Новый Структура(Элементы.СписокТоварныхКатегорий.ОтборСтрок);
	СтруктураОтбора.Вставить("ТоварнаяКатегорияНаименование", Текст);
	Элементы.СписокТоварныхКатегорий.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область СписокНоменклатуры

&НаКлиенте
Процедура СписокНоменклатурыПометкаПриИзменении(Элемент)
	
	ТД = Элементы.СписокНоменклатуры.ТекущиеДанные;
	
	СтруктураПоиска = Новый Структура;
	//  Устанавливаем пометку товарной категории
	СтруктураПоиска.Вставить("ТоварнаяКатегория", ТД.ТоварнаяКатегория);
	СтрокиКлассификатора = Объект.ТоварныеКатегории.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиКлассификатора.Количество() > 0 Тогда
		
		//
		СтруктураПоиска.Вставить("Пометка", НЕ ТД.Пометка);
		СтрокиСИнойПометкой = Объект.Номенклатура.НайтиСтроки(СтруктураПоиска);
		Если СтрокиСИнойПометкой.Количество() > 0 Тогда
			СтрокиКлассификатора[0].Пометка = 2;
		ИначеЕсли ТД.Пометка Тогда
			СтрокиКлассификатора[0].Пометка = 1;
		Иначе
			СтрокиКлассификатора[0].Пометка = 0;
		КонецЕсли;
		
	КонецЕсли;
	ДеревоОтборовПриИзмененииЗавершение(неопределено, неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураУстановитьФлажки(Команда)
	
	УстановитьПометкуДляВсейНоменклатуры(Истина);
	ДеревоОтборовПриИзмененииЗавершение(неопределено, неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураСнятьФлажки(Команда)
	
	УстановитьПометкуДляВсейНоменклатуры(Ложь);
	ДеревоОтборовПриИзмененииЗавершение(неопределено, неопределено);
	
КонецПроцедуры

#Область ПоискВСписках_Номенклатура
	
&НаКлиенте
Процедура ПоискНоменклатурыИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	УстановитьОтборСпискаНоменклатуры(Текст);
КонецПроцедуры

&НаКлиенте
Процедура ПоискНоменклатурыОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоискНоменклатуры = "";
	УстановитьОтборСпискаНоменклатуры(ПоискНоменклатуры);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСпискаНоменклатуры(Текст)
	СтруктураОтбора = Новый Структура(Элементы.СписокНоменклатуры.ОтборСтрок);
	СтруктураОтбора.Вставить("НоменклатураНаименование", Текст);
	Элементы.СписокНоменклатуры.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область СпискоОрганизаций
	
&НаКлиенте
Процедура ДеревоОрганизацийПометкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоОрганизаций.ТекущиеДанные;
	СтрокиТекущейСтроки = ТекущаяСтрока.ПолучитьЭлементы();
	СтрокаРодитель = ТекущаяСтрока.ПолучитьРодителя();
	
	Если ТекущаяСтрока.Пометка = 2 Тогда
		ТекущаяСтрока.Пометка = 0;
	КонецЕсли;
	
	// Нижестоящие
	Для Каждого СтрокаДерева Из СтрокиТекущейСтроки Цикл
		СтрокаДерева.Пометка = ТекущаяСтрока.Пометка;
	КонецЦикла;
	
	// Вышестоящие
	Если СтрокаРодитель <> неопределено Тогда
		СтрокиРодителя = СтрокаРодитель.ПолучитьЭлементы();
		
		Такойже = 0; Противоположный = 0;
		
		Для Каждого СтрокаРодителя Из СтрокиРодителя Цикл
			Если ТекущаяСтрока.Пометка = СтрокаРодителя.Пометка Тогда
				Такойже = Такойже + 1;
			Иначе
				Противоположный = Противоположный + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если Противоположный = 0 Тогда
			СтрокаРодитель.Пометка = ТекущаяСтрока.Пометка;
		Иначе
			СтрокаРодитель.Пометка = 2;
		КонецЕсли;
		
	КонецЕсли;
	
	ДеревоОтборовПриИзмененииЗавершение(неопределено, неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииУстановитьФлажки(Команда)
	УстановитьПометкуДляВсехОрганизаций(1);
	ДеревоОтборовПриИзмененииЗавершение(неопределено, неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияСнятьФлажки(Команда)
	УстановитьПометкуДляВсехОрганизаций(0);
	ДеревоОтборовПриИзмененииЗавершение(неопределено, неопределено);
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции
	
&НаКлиенте
Процедура УстановитьПометкуДляНоменклатуры(ТекущиеДанныеКатегории)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ТоварнаяКатегория", ТекущиеДанныеКатегории.ТоварнаяКатегория);
	СтруктураПоиска.Вставить("Пометка", НЕ ТекущиеДанныеКатегории.Пометка);
	Строки = Объект.Номенклатура.НайтиСтроки(СтруктураПоиска);
	Для Каждого Строка Из Строки Цикл
		Строка.Пометка = ТекущиеДанныеКатегории.Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуДляВсехТоварныхКатегорий(ПометкаТК)
	
	Для Каждого Строка Из Объект.ТоварныеКатегории Цикл
		Строка.Пометка = ПометкаТК;
	КонецЦикла;

	ПометкаНоменклатуры = ?(ПометкаТК = 1, Истина, Ложь);
	
	Для Каждого Строка Из Объект.Номенклатура Цикл
		Строка.Пометка = ПометкаНоменклатуры;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуДляВсейНоменклатуры(Пометка)
	
	ТД = Элементы.СписокНоменклатуры.ТекущиеДанные;
	
	СтруктураПоиска = Новый Структура;
	//  Устанавливаем пометку товарной категории
	СтруктураПоиска.Вставить("ТоварнаяКатегория", ТД.ТоварнаяКатегория);
	СтрокиКлассификатора = Объект.ТоварныеКатегории.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиКлассификатора.Количество() > 0 Тогда
		
		//
		СтруктураПоиска.Вставить("Пометка", НЕ Пометка);
		СтрокиСИнойПометкой = Объект.Номенклатура.НайтиСтроки(СтруктураПоиска);
		Для Каждого Строка Из СтрокиСИнойПометкой Цикл
			Строка.Пометка = Пометка;
		КонецЦикла;
		
		Если Пометка Тогда
			СтрокиКлассификатора[0].Пометка = 1;
		Иначе
			СтрокиКлассификатора[0].Пометка = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуДляВсехОрганизаций(Пометка)
	
	ЭлементыВерхнегоУровня = ДеревоОрганизаций.ПолучитьЭлементы();
	
	Для Каждого ТекущаяСтрока Из ЭлементыВерхнегоУровня Цикл
	
		Если ТекущаяСтрока.Пометка = Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрока.Пометка = Пометка;
		// Нижестоящие
		СтрокиТекущейСтроки = ТекущаяСтрока.ПолучитьЭлементы();
		Для Каждого СтрокаДерева Из СтрокиТекущейСтроки Цикл
			СтрокаДерева.Пометка = ТекущаяСтрока.Пометка;
		КонецЦикла;
		
	КонецЦикла;
			
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьУжеСуществующихЭлементов(форма)
	
	Форма.Элементы.СтраницыВыбораРазмещения.Доступность = Форма.ПоместитьПозицииВ = 1;
	Форма.Элементы.КоманднаяПанельУжеСуществующиеОбъекты.Доступность = Форма.ПоместитьПозицииВ = 1;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьПомещениеВНовыйЧерновикСПЗ(форма)
	
	Если Форма.ПоместитьПозицииВ = 0 Тогда
		
		Форма.Объект.Обеспечение = ПредопределенноеЗначение("Перечисление.ВариантыВключенияПозицийПотребностей.НовыйПроектСПЗ");
		Форма.ПолучательДляРучногоРаспределения = Форма.ПустойУИД;
		
	Иначе
		Форма.Объект.Обеспечение = ПредопределенноеЗначение("Перечисление.ВариантыВключенияПозицийПотребностей.ПустаяСсылка");
		Форма.ПолучательДляРучногоРаспределения = неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьПозицииВПриИзменении(Элемент)
	
	ПроверитьПомещениеВНовыйЧерновикСПЗ(ЭтаФорма);
	УстановитьДоступностьУжеСуществующихЭлементов(ЭтаФорма);
	СформироватьИнформационнуюНадписьПомещение(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьСуществующийДоговор(Команда)
	
	ТекущиеДанные = Элементы.УжеСуществующиеДоговора.ТекущиеДанные;
	
	Если ТекущиеДанные = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Объект) Тогда
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.Объект));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьСуществующуюСПЗ(Команда)
	
	ТекущиеДанные = Элементы.УжеСуществующиеСПЗ.ТекущиеДанные;
	
	Если ТекущиеДанные = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СПЗ = ПолучитьСПЗПоИдентификатору(ТекущиеДанные.Объект);
	Если ЗначениеЗаполнено(СПЗ) Тогда
		ОткрытьФорму("Документ.СтрокаПланаЗакупок.Форма.ФормаЭлемента", Новый Структура("Ключ", СПЗ));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьСуществующийЧерновикСПЗ(Команда)
	
	ТекущиеДанные = Элементы.УжеСуществующиеПроектыСПЗ.ТекущиеДанные;
	
	Если ТекущиеДанные = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИДПроекта = ТекущиеДанные.Объект;
	Если ЗначениеЗаполнено(ИДПроекта) Тогда
		КлючЗаписи = ПолучитьКлючЗаписиПроектаСПЗ(ТекущийПользователь, ИДПроекта, Объект.ПериодЗакупки);
		СтруктураПараметров = Новый Структура("Ключ, ТолькоПросмотр", КлючЗаписи, Истина);
		ОткрытьФорму("РегистрСведений.ПроектыСПЗ.ФормаЗаписи", СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбюратьСуществующийЧерновикСПЗ(Команда)
	
	ТекущиеДанные = Элементы.УжеСуществующиеПроектыСПЗ.ТекущиеДанные;
	Если ТекущиеДанные = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Обеспечение = ТекущиеДанные.ТипОбъекта И ПолучательДляРучногоРаспределения = ТекущиеДанные.Объект Тогда
		Объект.Обеспечение = ПредопределенноеЗначение("Перечисление.ВариантыВключенияПозицийПотребностей.ПустаяСсылка");
		ПолучательДляРучногоРаспределения = неопределено;
	Иначе
		Объект.Обеспечение = ТекущиеДанные.ТипОбъекта;
		ПолучательДляРучногоРаспределения = ТекущиеДанные.Объект;
	КонецЕсли;
	
	СформироватьИнформационнуюНадписьПомещение(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСуществующуюСПЗ(Команда)
	
	ТекущиеДанные = Элементы.УжеСуществующиеСПЗ.ТекущиеДанные;
	Если ТекущиеДанные = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Обеспечение = ТекущиеДанные.ТипОбъекта И ПолучательДляРучногоРаспределения = ТекущиеДанные.Объект Тогда
		Объект.Обеспечение = ПредопределенноеЗначение("Перечисление.ВариантыВключенияПозицийПотребностей.ПустаяСсылка");
		ПолучательДляРучногоРаспределения = неопределено;
	Иначе
		Если ТекущиеДанные.ТолькоПросмотр Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Нельзя выбрать строку плана закупок, так как установлен запрет на ее изменение или по ней уже начата закупочная процедура.'"));
			Возврат;
		КонецЕсли;
		Объект.Обеспечение = ТекущиеДанные.ТипОбъекта;
		ПолучательДляРучногоРаспределения = ТекущиеДанные.Объект;
	КонецЕсли;
	
	СформироватьИнформационнуюНадписьПомещение(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСуществующийДоговор(Команда)
	
	ТекущиеДанные = Элементы.УжеСуществующиеДоговора.ТекущиеДанные;
	Если ТекущиеДанные = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Обеспечение = ТекущиеДанные.ТипОбъекта И ПолучательДляРучногоРаспределения = ТекущиеДанные.Объект Тогда
		Объект.Обеспечение = ПредопределенноеЗначение("Перечисление.ВариантыВключенияПозицийПотребностей.ПустаяСсылка");
		ПолучательДляРучногоРаспределения = неопределено;
	Иначе
		Если ТекущиеДанные.ТолькоПросмотр Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Нельзя выбрать договор, так как его план поставок сформирован по закупочной процедуре.'"));
			Возврат;
		КонецЕсли;
		Объект.Обеспечение = ТекущиеДанные.ТипОбъекта;
		ПолучательДляРучногоРаспределения = ТекущиеДанные.Объект;
	КонецЕсли;
	
	СформироватьИнформационнуюНадписьПомещение(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСуществующийОбъект(ТекущиеДанные)
	
	Если ТекущиеДанные.ТипОбъекта = ПредопределенноеЗначение("Перечисление.ВариантыВключенияПозицийПотребностей.СПЗ") Тогда 
		ВыбратьСуществующуюСПЗ(неопределено);
	ИначеЕсли ТекущиеДанные.ТипОбъекта = ПредопределенноеЗначение("Перечисление.ВариантыВключенияПозицийПотребностей.ПроектСПЗ") Тогда 
		ВыбюратьСуществующийЧерновикСПЗ(неопределено);
	ИначеЕсли ТекущиеДанные.ТипОбъекта = ПредопределенноеЗначение("Перечисление.ВариантыВключенияПозицийПотребностей.Договор") Тогда 
		ВыбратьСуществующийДоговор(неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УжеСуществующиеПроектыСПЗВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ВыбратьСуществующийОбъект(Элемент.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура УжеСуществующиеСПЗВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ВыбратьСуществующийОбъект(Элемент.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура УжеСуществующиеДоговораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ВыбратьСуществующийОбъект(Элемент.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбработанЧерновикСПЗИзФормы" Тогда
		Элементы.СписокВсехПроектовСПЗ.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтбораПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		ПодключитьОбработчикОжидания("ОбработчикОжидания_ПроверкаНабораПотребностей", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ПроверитьНаборПотребностей();
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекСуществующиеДоговораНастройкиОтборПриИзменении(Элемент)
	ПолучитьСуществующиеДоговоры();
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекСуществующиеДоговораНастройкиОтборОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Для Каждого СтрокаОтбор Из КомпоновщикНастроекСуществующиеДоговора.Настройки.Отбор.Элементы Цикл
		СтрокаОтбор.Использование = Ложь;
	КонецЦикла;
	
	ПолучитьСуществующиеДоговоры();
	
КонецПроцедуры

&НаСервере
Процедура СкорректироватьЗапросВСКД_УжеСуществующиеДоговора(ТекстЗапроса)
	
	//
	Если ЭтоЕХ Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДоговорыКонтрагентов.Владелец", "ДоговорыКонтрагентов.Контрагент");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДоговорыКонтрагентов.СрокДействия", "ДоговорыКонтрагентов.ДатаОкончанияДействия");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив возможных режимов работы
&НаСервере
Функция РежимыРедактированияКорзины()
	
	Результат = Новый Массив;
	Если НЕ ВКорзинеПрисутствуютПротиворечивыеПозицииНаСервере() Тогда
		Результат.Добавить(2); // ручной режим
	КонецЕсли;
	
	Результат.Добавить(3); // пакетный режим
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВКорзинеПрисутствуютПротиворечивыеПозиции()
	
	РезультатКонтроля = РегистрыСведений.ПроектыСПЗПозиции.ВКорзинеПрисутствуютПротиворечивыеПозиции(ТекущийПользователь, Объект.ПериодЗакупки);
	Возврат РезультатКонтроля;
	
КонецФункции

&НаСервере
Функция ВКорзинеПрисутствуютПротиворечивыеПозицииНаСервере()
	
	РезультатКонтроля = РегистрыСведений.ПроектыСПЗПозиции.ВКорзинеПрисутствуютПротиворечивыеПозиции(ТекущийПользователь, Объект.ПериодЗакупки);
	Возврат РезультатКонтроля.Ошибка;
	
КонецФункции

&НаКлиенте
Функция ВКорзинеПрисутствуютПротиворечивыеПозицииНаКлиенте() 
	
	РезультатКонтроля = ВКорзинеПрисутствуютПротиворечивыеПозиции();
	Если РезультатКонтроля.Ошибка = Истина Тогда
		Завершение = Новый ОписаниеОповещения("ВКорзинеПрисутствуютПротиворечивыеПозицииНаКлиентеЗавершение", ЭтотОбъект, РезультатКонтроля);
		ПоказатьВопрос(Завершение, НСтр("ru = 'В корзине присутствуют потребности с противоречивыми параметрами закупками. Показать противоречия?'"), РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
	
	Возврат РезультатКонтроля.Ошибка;
	
КонецФункции

&НаКлиенте
Процедура ВКорзинеПрисутствуютПротиворечивыеПозицииНаКлиентеЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры.Вставить("Имя", "НаличиеПротиворечийВПозиции");
	
	РезультатОперации = Новый Соответствие;
	РезультатОперации.Вставить("Противоречия", ДопПараметры);
	
	ОбработатьРезультатОперации(РезультатОперации);
	
КонецПроцедуры

&НаСервере
Функция РазрешеноДобавлениеПротиворечивыхПозицийВКорзину()
	Возврат  РежимФормирования<> 2;
КонецФункции

&НаКлиенте
Процедура ПоказыватьТолькоНеОбеспеченные(Команда)
	ПоказыватьТолькоНеОбеспеченные = НЕ ПоказыватьТолькоНеОбеспеченные;
	Элементы.СписокПотребностиПоказыватьТолькоНеОбеспеченные.Пометка = ПоказыватьТолькоНеОбеспеченные;
	Для каждого ЭлементНастройки Из СписокПотребности.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементНастройки) = Тип("ОтборКомпоновкиДанных") Тогда
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(ЭлементНастройки, , "Отбор1", , , ПоказыватьТолькоНеОбеспеченные);
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(ЭлементНастройки, , "Отбор2", , , ПоказыватьТолькоНеОбеспеченные);
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(ЭлементНастройки, , "Отбор3", , , ПоказыватьТолькоНеОбеспеченные);
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(ЭлементНастройки, , "Отбор4", , , ПоказыватьТолькоНеОбеспеченные);
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(ЭлементНастройки, , "Отбор5", , , ПоказыватьТолькоНеОбеспеченные);
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(ЭлементНастройки, , "Отбор6", , , ПоказыватьТолькоНеОбеспеченные);
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(ЭлементНастройки, , "Отбор7", , , ПоказыватьТолькоНеОбеспеченные);
			
		КонецЕсли;
	КонецЦикла;
	 
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПериодыСтрокАвтообновленияСПЗ(Команда)
	Элементы.СтрокиКОбновлениюОтобразитьПериодыСтрокАвтообновленияСПЗ.Пометка = НЕ Элементы.СтрокиКОбновлениюОтобразитьПериодыСтрокАвтообновленияСПЗ.Пометка;
	Элементы.СтрокиКОбновлениюПериодПотребности.Видимость = Элементы.СтрокиКОбновлениюОтобразитьПериодыСтрокАвтообновленияСПЗ.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура СтрокиКОбновлениюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элементы.СтрокиКОбновлению.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СписокСПЗКАвтообновлению.Добавить(Элементы.СтрокиКОбновлению.ТекущиеДанные.СПЗ, Элементы.СтрокиКОбновлению.ТекущиеДанные.СПЗ);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СтрокиКОбновлению, "СПЗ", СписокСПЗКАвтообновлению, ВидСравненияКомпоновкиДанных.НеВСписке);
	Элементы.СтрокиКОбновлению.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАвтообновлениеСПЗ1(Команда)
	ВыполнениеШагаАвтоОбновлениеНаСервере();
	Элементы.СтрокиКОбновлению.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеСтрокиАвтообновления(Команда)
	ВыбратьВсеСтрокиАвтообновленияНаСервере();
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СтрокиКОбновлению, "СПЗ", СписокСПЗКАвтообновлению, ВидСравненияКомпоновкиДанных.НеВСписке);
	Элементы.СтрокиКОбновлению.Обновить();
КонецПроцедуры

&НаСервере
Процедура ВыбратьВсеСтрокиАвтообновленияНаСервере()
	
	Схема = Элементы.СтрокиКОбновлению.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
    Настройки = Элементы.СтрокиКОбновлению.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	//ДобавитьВЗапросПериодыПотребности(Схема, Настройки);
	
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиОтбор, Строка(Источник.ЛевоеЗначение), Источник.ПравоеЗначение, Источник.ВидСравнения, , Источник.Использование, Источник.РежимОтображения);
	
	//Если ОтборКолвоСумма = "ТолькоПозицииКОбработке" Тогда
	//	ГруппаИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Настройки.Отбор.Элементы, "ТолькоКОбработке", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	//	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли, "КоличествоКОбработке", ВидСравненияКомпоновкиДанных.НеРавно, 0,,Истина);
	//	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли, "СуммаКОбработке", 	  ВидСравненияКомпоновкиДанных.НеРавно, 0,,Истина);
	//ИначеЕсли ОтборКолвоСумма = "ТолькоПозицииБольшеНуля" Тогда
	//	//ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Настройки.Отбор.Элементы, "ТолькоКОбработке", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	//	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Настройки.Отбор, "КоличествоКОбработке",ВидСравненияКомпоновкиДанных.БольшеИлиРавно,0,,Истина);
	//	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Настройки.Отбор, "СуммаКОбработке", 	ВидСравненияКомпоновкиДанных.Больше, 		0,,Истина);
	//КонецЕсли;
	
	// Добавляем обязательные поля
	//++УстановитьОбязательныеПоляПотребностей(Настройки.Структура[0].Выбор);
	
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
                            
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
    
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    
    ТаблицаПотребностей = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	//СписокСПЗКАвтообновлению.Очистить();
	Для каждого Стр Из ТаблицаПотребностей Цикл
		Если СписокСПЗКАвтообновлению.НайтиПоЗначению(Стр.СПЗ) = Неопределено Тогда
			СписокСПЗКАвтообновлению.Добавить(Стр.СПЗ, Стр.СПЗ);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАвтообновлениеСПЗ2(Команда)
	ВыполнениеШагаАвтоОбновлениеНаСервере();
	СписокСПЗКАвтообновлению.Очистить();
	Элементы.СтрокиКОбновлению.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСууществующийСПЗДляАвтообновления(Команда)
	СтрокиКОбновлениюВыбор(Неопределено, Неопределено, Неопределено, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыСПЗКАвтообновлению(Команда)
	Элементы.СтрокиКОбновлениюДополнительныеРеквизитыСПЗКАвтообновлению.Пометка = НЕ Элементы.СтрокиКОбновлениюДополнительныеРеквизитыСПЗКАвтообновлению.Пометка;
	Элементы.СтрокиКОбновлениюМестоПоставки.Видимость = Элементы.СтрокиКОбновлениюДополнительныеРеквизитыСПЗКАвтообновлению.Пометка;
	Элементы.СтрокиКОбновлениюМенеджер.Видимость = Элементы.СтрокиКОбновлениюДополнительныеРеквизитыСПЗКАвтообновлению.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура АвтообновлениеИсходное(Команда)
	Элементы.СтрокиКОбновлениюОбновлениеИсходное.Пометка = НЕ Элементы.СтрокиКОбновлениюОбновлениеИсходное.Пометка;
	Элементы.Исходное.Видимость = Элементы.СтрокиКОбновлениюОбновлениеИсходное.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура АвтообновлениеРезультат(Команда)
	Элементы.СтрокиКОбновлениюАвтообновлениеРезультат.Пометка = НЕ Элементы.СтрокиКОбновлениюАвтообновлениеРезультат.Пометка;
	Элементы.Результат.Видимость = Элементы.СтрокиКОбновлениюАвтообновлениеРезультат.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура КорзинаАвтообновленияСПЗ(Команда)
	Элементы.СписокСПЗКАвтообновлению.Видимость = НЕ Элементы.СписокСПЗКАвтообновлению.Видимость;
	Элементы.КорзинаАвтообновленияСПЗ.Заголовок = 
		?(Элементы.СписокСПЗКАвтообновлению.Видимость, 
			Нстр("ru = 'Корзина (скрыть)'"), 
			Нстр("ru = 'Корзина (показать)'") );
КонецПроцедуры

&НаКлиенте
Процедура АвтообновлениеКорректировка(Команда)
	Элементы.СтрокиКОбновлениюАвтообновлениеКорректировка.Пометка = НЕ Элементы.СтрокиКОбновлениюАвтообновлениеКорректировка.Пометка;
	Элементы.Корректировка.Видимость = Элементы.СтрокиКОбновлениюАвтообновлениеКорректировка.Пометка;
КонецПроцедуры
