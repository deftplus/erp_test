
#Область ОбработкаОсновныхСобытийФормы


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОтборЖурналаПоПериоду.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	ОтборЖурналаПоПериоду.ДатаНачала = НачалоДня(ТекущаяДата());
	ОтборЖурналаПоПериоду.ДатаОкончания = НачалоДня(ОтборЖурналаПоПериоду.ДатаНачала);
	флТолькоОшибки = Истина;
	УстановитьОформлениеФормы();
КонецПроцедуры


#КонецОбласти

#Область ОбработкаСобытийЭлементовФормы


&НаКлиенте
Процедура КомандаОчиститьРегистрЗапросов(Команда)
	КомандаОчиститьРегистрЗапросовНаСервере();
	Элементы.ЗапросыВычислявшиеРасхождения.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРасхождения(Команда)
	
	ОтборДанных = Новый Структура;
	мДокументы = Новый Массив;
	ТекстОшибки = "";
	
	ДатаНачала = ТекущаяДата();
	
	Если ЗначениеЗаполнено(ОрганизацияОтбор) Тогда
		ОтборДанных.Вставить("Организации", ОрганизацияОтбор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДебиторОтбор) Тогда
		ОтборДанных.Вставить("Получатель", ДебиторОтбор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КредиторОтбор) Тогда
		ОтборДанных.Вставить("Отправитель", КредиторОтбор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РазделВГООтбор) Тогда
		ОтборДанных.Вставить("РазделВГО", РазделВГООтбор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодСверкиОтбор) Тогда
		ОтборДанных.Вставить("ПериодСверки", ПериодСверкиОтбор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СценарийОтбор) Тогда
		ОтборДанных.Вставить("Сценарий", СценарийОтбор);
	КонецЕсли;
		
	СверкаВГОВызовСервераУХ.УбедитьсяЧтоРасхожденияРасчитаны(ОтборДанных, ТекстОшибки,, флОтладка);
	
	ДатаКонца = ТекущаяДата();
	
	ВремяРасчета = ДатаКонца - ДатаНачала;
	
	Элементы.ЗапросыВычислявшиеРасхождения.Обновить();
	
	Если ТекстОшибки <> "" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Возникла ошибка!'") + Символы.ПС + ТекстОшибки;
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСообщенияРасчета(Команда)
	Протоколы.Очистить();
	ПрочитатьСообщенияРасчетаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтборЖурналаПоПериодуПриИзменении(Элемент)
	ПрочитатьСообщенияРасчета(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.ГруппаПротоколы Тогда
		ПрочитатьСообщенияРасчета(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура флТолькоОшибкиПриИзменении(Элемент)
	ПрочитатьСообщенияРасчета(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПротоколыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ПротоколыКомментарий" Тогда 
		
		ТекДанные = Элементы.Протоколы.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			ПоказатьЗначение(, ТекДанные.Комментарий);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодСверкиОтборПриИзменении(Элемент)
	УстановитьТекущийШаблонСверкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СценарийОтборПриИзменении(Элемент)
	УстановитьТекущийШаблонСверкиНаСервере();
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыНаКлиенте


#КонецОбласти

#Область СлужебныеПроцедурыНаСервере

&НаСервереБезКонтекста
Процедура КомандаОчиститьРегистрЗапросовНаСервере()
	
	НачатьТранзакцию();
	Попытка
			
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗапросыВычислявшиеРасхождения");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать(); 
		
		НаборЗаписей = РегистрыСведений.ЗапросыВычислявшиеРасхождения.СоздатьНаборЗаписей();
		НаборЗаписей.Записать(Истина);
			
	ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
		
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСообщенияРасчетаНаСервере()
	
	Протоколы.Очистить();
	
	Если НЕ ЗначениеЗаполнено(ОтборЖурналаПоПериоду.ДатаНачала) Тогда
		ОтборЖурналаПоПериоду.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		
		Если ЗначениеЗаполнено(ОтборЖурналаПоПериоду.ДатаОкончания) Тогда
			ОтборЖурналаПоПериоду.ДатаНачала = НачалоДня(ОтборЖурналаПоПериоду.ДатаОкончания);
		Иначе
			ОтборЖурналаПоПериоду.ДатаНачала = НачалоДня(ТекущаяДата());
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтборЖурналаПоПериоду.ДатаОкончания) Тогда
		ОтборЖурналаПоПериоду.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		ОтборЖурналаПоПериоду.ДатаОкончания = НачалоДня(ОтборЖурналаПоПериоду.ДатаНачала);
	КонецЕсли;
	
	ДатаНачала = ОтборЖурналаПоПериоду.ДатаНачала;
	ДатаКонца = ОтборЖурналаПоПериоду.ДатаОкончания;
	
	События = Новый Массив();
	События.Добавить("РасхожденияВГО.Запуск");
	События.Добавить("РасхожденияВГО.Ошибка");
	События.Добавить("РасхожденияВГО.Завершено");
	События.Добавить("РасхожденияВГО.ФоновоеЗадание");
	События.Добавить("РасхожденияВГО.ОшибкаЗапускаФЗ");
	
	Т = Новый ТаблицаЗначений;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ДатаНачала", ДатаНачала);
	Отбор.Вставить("ДатаОкончания", ДатаКонца);
	Отбор.Вставить("Событие", События);
	
	Если флТолькоОшибки Тогда
		Отбор.Вставить("Уровень", УровеньЖурналаРегистрации.Ошибка);
	КонецЕсли;
	
	Колонки = "Событие,Уровень,Дата,Комментарий,ПредставлениеДанных,Данные";
	УстановитьПривилегированныйРежим(Истина);
	ВыгрузитьЖурналРегистрации(Т, Отбор, Колонки);
		
	Если Т.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипыЗаписей = Новый Соответствие;
	ТипыЗаписей.Вставить(УровеньЖурналаРегистрации.Информация,     Перечисления.ТипыЗаписейПротоколируемыхСобытий.Информация);
	ТипыЗаписей.Вставить(УровеньЖурналаРегистрации.Ошибка,         Перечисления.ТипыЗаписейПротоколируемыхСобытий.Ошибка);
	ТипыЗаписей.Вставить(УровеньЖурналаРегистрации.Предупреждение, Перечисления.ТипыЗаписейПротоколируемыхСобытий.Предупреждение);
	ТипыЗаписей.Вставить(УровеньЖурналаРегистрации.Примечание,     Перечисления.ТипыЗаписейПротоколируемыхСобытий.Примечание);
	
	Для Каждого Строка Из Т Цикл
		НоваяЗапись = Протоколы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
		НоваяЗапись.ТипЗаписи = ТипыЗаписей[Строка.Уровень];
	КонецЦикла;
	
	Протоколы.Сортировать("Дата Убыв");
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущийШаблонСверкиНаСервере()
	ТекущийШаблонСверки = СверкаВГОУХ.ПолучитьШаблонСверкиПоСценариюПериоду(
		СценарийОтбор, 
		ПериодСверкиОтбор);
	УстановитьОформлениеФормы();
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеФормы()
	
	Если ЗначениеЗаполнено(ТекущийШаблонСверки) Тогда
		Элементы.ТекущийШаблонСверки.Видимость = Истина;
		ОтборРазделаПоШаблону = Новый Массив();
		ОтборРазделаПоШаблону.Добавить(
			Новый СвязьПараметраВыбора("Отбор.Владелец", "ТекущийШаблонСверки"));
	Иначе
		Элементы.ТекущийШаблонСверки.Видимость = Ложь;
		ОтборРазделаПоШаблону = Новый Массив();
	КонецЕсли;
	
	Элементы.РазделВГООтбор.СвязиПараметровВыбора = 
		Новый ФиксированныйМассив(ОтборРазделаПоШаблону);
		
КонецПроцедуры


#КонецОбласти
