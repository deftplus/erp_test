
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СценарийПриИзменении(Неопределено);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОформлениеИнвестор", Объект.ОформлениеИнвестор);
	Параметры.Свойство("ОформлениеОбъектИнвестирования", Объект.ОформлениеОбъектИнвестирования);
	
	Параметры.Свойство("Инвестор", Объект.Инвестор);
	Параметры.Свойство("ОбъектИнвестирования", Объект.ОбъектИнвестирования);	
	Параметры.Свойство("ДатаАктуальности", Объект.ДатаАктуальности);
	Параметры.Свойство("Сценарий", Объект.Сценарий);
	
	Если Не ЗначениеЗаполнено(Объект.ДатаАктуальности) Тогда
		Объект.ДатаАктуальности = ТекущаяДата();
	КонецЕсли;
	
	ПроверитьДатуАктуальности();
	
	Если Не ЗначениеЗаполнено(Объект.Сценарий) Тогда
		Объект.Сценарий = Константы.СценарийМСФО.Получить();
	КонецЕсли;
	
	Если Объект.ПредставлениеСвязи = "" Тогда
		Объект.ПредставлениеСвязи = "ПрямаяДоля";
	КонецЕсли;
	
	Если Объект.ПредставлениеУзла = "" Тогда
		Объект.ПредставлениеУзла = "Организация";
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьЦветЕслиНеЗаполнен(Объект.ЦветПоследовательности, WebЦвета.БледноЗеленый);
	УстановитьЦветЕслиНеЗаполнен(Объект.ЦветМоделирования, 		WebЦвета.Голубой);
	
	УстановитьЦветЕслиНеЗаполнен(Объект.ЦветПАО, 	WebЦвета.БледноЗеленый);
	УстановитьЦветЕслиНеЗаполнен(Объект.ЦветИО, 	WebЦвета.Золотой);
	УстановитьЦветЕслиНеЗаполнен(Объект.ЦветИС, 	WebЦвета.БледноБирюзовый);
	
	УстановитьЦветЕслиНеЗаполнен(Объект.ЦветКИК, 		WebЦвета.КоролевскиГолубой);
	УстановитьЦветЕслиНеЗаполнен(Объект.ЦветУчастие,	WebЦвета.СветлоЗолотистый);	
	УстановитьЦветЕслиНеЗаполнен(Объект.ЦветНеКИК, 		WebЦвета.Черный);	
	
	УстановитьЦветЕслиНеЗаполнен(Объект.ЦветДочернее, 		WebЦвета.Черный);
	УстановитьЦветЕслиНеЗаполнен(Объект.ЦветАссоциат, 		WebЦвета.Черный);
	УстановитьЦветЕслиНеЗаполнен(Объект.ЦветСовместное, 	WebЦвета.Черный);
	УстановитьЦветЕслиНеЗаполнен(Объект.ЦветТретьяСторона,	WebЦвета.Черный);
		
	УстановитьЦветПоследовательности();
	Элементы.СтраницыСвязи.ТекущаяСтраница = ?(Объект.ОтображатьСвязиКИК, Элементы.ГруппаКИК, Элементы.ГруппаМСФО);	
	
	Если Параметры.Свойство("СформироватьПриОткрытии") И Параметры.СформироватьПриОткрытии Тогда
		
		ВыводитьДиаграмму = (Объект.Вывод = 0);
		Если ВыводитьДиаграмму Тогда
			СкомпоноватьГрафСервер();
		Иначе 
			СкомпоноватьОтчетСервер();
		КонецЕсли;
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыДвиженияИнвестиций" Тогда
		ОбновитьМоделированиеСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	ОбновитьМоделированиеСервер();	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Корректировки, "Сценарий", Объект.Сценарий);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВидимостьМоделирование(Команда)
	
	Элементы.ФормаВидимостьМоделирование.Пометка = Не Элементы.ФормаВидимостьМоделирование.Пометка;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьОформление(Команда)
	
	Элементы.ФормаВидимостьОформление.Пометка = Не Элементы.ФормаВидимостьОформление.Пометка;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналДвиженийИнвестиций(Команда)
	ОткрытьФорму("ЖурналДокументов.ДвижениеИнвестиций.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьПоследовательности(Команда)
	
	Элементы.ФормаВидимостьПоследовательности.Пометка = НЕ Элементы.ФормаВидимостьПоследовательности.Пометка;
	УправлениеФормой(ЭтаФорма);
	
	Если Элементы.ФормаВидимостьПоследовательности.Пометка Тогда
		ОбновитьПоследовательностиСервер(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВИностранныеКомпании(Команда)
	
	НоваяВидимость = НЕ Элементы.ПоследовательностиУчастияТолькоВИностранныеКомпании.Пометка;
	
	Элементы.ПоследовательностиУчастияТолькоВИностранныеКомпании.Пометка = НоваяВидимость;
	
	ОбновитьДеревоПоследовательностей();
			
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоследовательности(Команда)
	ОбновитьПоследовательностиСервер();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандКорректировки

&НаКлиенте
Процедура ЗагрузитьКорректировкиИзФайла(Команда)
	
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ЗагрузитьКорректировкиИзФайла", ЭтотОбъект);
	
	ДиалогВыбораФайла = Новый Структура;
	ДиалогВыбораФайла.Вставить("Заголовок", НСтр("ru = 'Загрузка движений инвестиций'"));
	ДиалогВыбораФайла.Вставить("Фильтр", ПолучитьФильтр());	
	
	ОбщегоНазначенияКлиентУХ.ПоказатьПомещениеФайла(Оповещение, УникальныйИдентификатор, "", ДиалогВыбораФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьКорректировкиИзФайла(ПомещенныеФайлы, ДополнительныеПараметры = Неопределено) Экспорт  
	
	НовыйФайл = Неопределено;
	Если ПомещенныеФайлы = Неопределено Тогда		
		НовыйФайл = Неопределено;
	ИначеЕсли ТипЗнч(ПомещенныеФайлы) = Тип("Массив") Тогда
		НовыйФайл = ПомещенныеФайлы[0];
	ИначеЕсли ТипЗнч(ПомещенныеФайлы) = Тип("Структура") Тогда
		НовыйФайл = ПомещенныеФайлы;	
	Иначе
		НовыйФайл = Неопределено;
	КонецЕсли;
	Если НовыйФайл <> Неопределено Тогда
		ЗагрузитьКорректировкиИзФайлаНаСервере(НовыйФайл);
	Иначе
		// Файл не выбран.
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВФайл(Команда)
	
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ВыгрузитьВФайлЗавершение", ЭтотОбъект);
	
	ДиалогСохранения = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогСохранения.Фильтр = НСтр("ru = 'Файл Excel'; en = 'Excel file'") + "(*.xlsx)|*.xlsx";
	ДиалогСохранения.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыгрузитьВФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;//отказ от выбора 
	КонецЕсли;
	
	Для каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
		
		ТабДок = ПолучитьВФайлКорректировки();
		ТабДок.Записать(ВыбранныйФайл, ТипФайлаТабличногоДокумента.XLSX);
		
		ТекстСообщения = НСтр("ru = 'Операции моделирования выгружены в файл:'");
		ПоказатьПредупреждение(, ТекстСообщения + ВыбранныйФайл, 5);
		
		Прервать;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	
	СозданныеДокументы = ЗаписатьКорректировкиНаСервере();
	
	Если СозданныеДокументы.Количество() Тогда
		Элементы.Корректировки.Обновить();
		ОткрытьФорму("ЖурналДокументов.ДвижениеИнвестиций.ФормаСписка", Новый Структура("Отбор", Новый Структура("Ссылка", СозданныеДокументы)), ЭтаФорма, Истина);
	КонецЕсли;
	
	СкомпоноватьОтчет();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандОформление

&НаКлиенте
Процедура ПредставлениеУзлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоляНабораДанных = Новый Массив;
	ПоляНабораДанных.Добавить(Новый Структура("Поле,ТипЗначения", "Организация", Новый ОписаниеТипов("СправочникСсылка.Организации")));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДоступныеПоля", ПоляНабораДанных);
	ПараметрыФормы.Вставить("ВыбранныеПоля", Объект.ПредставлениеУзла);
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "Форма.Форма", "Форма.ВыборПолей"), ПараметрыФормы, Элемент, Ложь); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСвязиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПолеДоли = ?(Объект.Отображение = 0, "ПрямаяДоля", "ЭффективнаяДоля");
	
	ПоляНабораДанных = Новый Массив;
	
	ПоляНабораДанных.Добавить(	Новый Структура("Поле,ТипЗначения", "Инвестор",				Новый ОписаниеТипов("СправочникСсылка.Организации"))	);
	ПоляНабораДанных.Добавить(	Новый Структура("Поле,ТипЗначения", "ОбъектИнвестирования",	Новый ОписаниеТипов("СправочникСсылка.Организации"))	);
	ПоляНабораДанных.Добавить(	Новый Структура("Поле,ТипЗначения", ПолеДоли,				ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,3))		);

	Если Объект.Отображение = 0 Тогда
		
		ПоляНабораДанных.Добавить(	Новый Структура("Поле,ТипЗначения", "Инвестиции",							ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,3))	);		
		ПоляНабораДанных.Добавить(	Новый Структура("Поле,ТипЗначения", "Количество",							ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,3))	);
		ПоляНабораДанных.Добавить(	Новый Структура("Поле,ТипЗначения", "КоличествоПривилегированных",			ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,3))	);
	    ПоляНабораДанных.Добавить(	Новый Структура("Поле,ТипЗначения", "КоличествоВДоверительномУправлении",	ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,3))	);
		ПоляНабораДанных.Добавить(	Новый Структура("Поле,ТипЗначения", "КоличествоГолосующих",					ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,3))	);
		ПоляНабораДанных.Добавить(	Новый Структура("Поле,ТипЗначения", "ДатаНачалаУчастия",					ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата)));
		
	КонецЕсли;
			
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДоступныеПоля", ПоляНабораДанных);
	ПараметрыФормы.Вставить("ВыбранныеПоля", Объект.ПредставлениеСвязи);
		
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "Форма.Форма", "Форма.ВыборПолей"), ПараметрыФормы, Элемент, Истина); 
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

&НаСервере
Функция ЗаписатьКорректировкиНаСервере()
	
	Перем СозданныеДокументы;
	
	Если Не ПроверитьЗаполнение() Тогда
		Сообщить(НСтр("ru = 'Операции моделирования не записаны!'"), СтатусСообщения.Внимание);
		Возврат Новый Массив;		
	КонецЕсли;
	
	ВыделенныеСтроки = РегистрыСведений.МоделированиеДвиженийИнвестиций.СоздатьНаборЗаписей().ВыгрузитьКолонки();		
	Для каждого ВыделеннаяСтрока Из Элементы.Корректировки.ВыделенныеСтроки Цикл
		
		СтрокаТаб = ВыделенныеСтроки.Добавить();
		
		Менеджер = РегистрыСведений.МоделированиеДвиженийИнвестиций.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Менеджер, ВыделеннаяСтрока);
		Менеджер.Прочитать();
		
		ЗаполнитьЗначенияСвойств(СтрокаТаб, Менеджер);
		
		Если Не ЗначениеЗаполнено(СтрокаТаб.Дата) Тогда
			СтрокаТаб.Дата = Объект.ДатаАктуальности;			
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаб.Сценарий) Тогда
			СтрокаТаб.Сценарий = Объект.Сценарий;			
		КонецЕсли;
		
	КонецЦикла;
	
	ВыделенныеСтроки.Сортировать("Дата Возр, ПрямаяДоляВладения Убыв"); //списания после поступлений
	
	Попытка
		СозданныеДокументы = Обработки.СтруктураВладения.СформироватьДвиженияИнвестицийПоТаблицеМоделирования(Объект.Сценарий, ВыделенныеСтроки);
	Исключение
		Сообщить(НСтр("ru = 'Не удалось сформировать Движения инвестиций по причине: '") + ОписаниеОшибки());
		Возврат Новый Массив;
	КонецПопытки;
	
	Возврат СозданныеДокументы;
	
КонецФункции

&НаСервере
Функция ПолучитьВФайлКорректировки()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МоделированиеДвиженийИнвестиций.Инвестор,
		|	МоделированиеДвиженийИнвестиций.ОбъектИнвестирования,
		|	МоделированиеДвиженийИнвестиций.ПрямаяДоляВладения КАК ПрямаяДоля,
		|	МоделированиеДвиженийИнвестиций.Дата,
		|	МоделированиеДвиженийИнвестиций.Инвестиции,
		|	МоделированиеДвиженийИнвестиций.Количество,
		|	МоделированиеДвиженийИнвестиций.КоличествоПривилегированных,
		|	МоделированиеДвиженийИнвестиций.КоличествоВДоверительномУправлении,
		|	МоделированиеДвиженийИнвестиций.КоличествоГолосующих,
		|	МоделированиеДвиженийИнвестиций.Описание,
		|	МоделированиеДвиженийИнвестиций.БалансоваяСтоимость,
		|	МоделированиеДвиженийИнвестиций.Контрагент,
		|	МоделированиеДвиженийИнвестиций.ДоговорКонтрагента,
		|	МоделированиеДвиженийИнвестиций.ДоговорКонтрагента.Номер КАК НомерДоговора
		|ИЗ
		|	РегистрСведений.МоделированиеДвиженийИнвестиций КАК МоделированиеДвиженийИнвестиций";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат ТиповыеОтчетыУХ.ПолучитьТабличныйДокументПоТаблицеЗначений(РезультатЗапроса.Выгрузить());
	
КонецФункции

&НаСервере
Процедура ЗагрузитьКорректировкиИзФайлаНаСервере(ИмяФайла)	
	Обработки.СтруктураВладения.ПолучитьДвиженияИнвестицийИзФайла(ИмяФайла, Объект.Сценарий, Ложь, Истина, Истина);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФильтр()
	Возврат НСтр("ru = 'Файлы Microsoft Excel (*.xls, *.xlsx)|*.xls; *.xlsx|Файлы табличного документа (*.mxl)|*.mxl|Все файлы (*.*)|*.*'");
КонецФункции

&НаСервере
Процедура ОбновитьПоследовательностиСервер(ОбновитьПоследовательности = Истина)

	Если ОбновитьПоследовательности Тогда
		
		ОбъектОтчет = РеквизитФормыВЗначение("Объект");
		ОбъектОтчет.ВидимостьПоследовательности = Истина;
		ОбъектОтчет.ОбновитьТаблицуПоследовательностей();
		ЗначениеВРеквизитФормы(ОбъектОтчет, "Объект");
		
	КонецЕсли;
	
	ОбновитьДеревоПоследовательностей();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоПоследовательностей()
	
	ОтборКИК = Элементы.ПоследовательностиУчастияТолькоВИностранныеКомпании.Пометка;
	
	Если Элементы.ПоследовательностиУчастияГруппировкаПоИнвестору.Пометка Тогда		
		ТекущаяКолонка = "Инвестор";
		КолонкаПоиска = "ОбъектИнвестирования";
	ИначеЕсли Элементы.ПоследовательностиУчастияГруппировкаПоОбъектуИнвестирования.Пометка Тогда		
		ТекущаяКолонка = "ОбъектИнвестирования";
		КолонкаПоиска = "Инвестор";
	Иначе
		
		ЭлементыДерева = ДеревоПоследовательности.ПолучитьЭлементы();
		ЭлементыДерева.Очистить();
				
		Для каждого ТекущаяПоследовательность Из Объект.ПоследовательностиУчастия Цикл		
			
			Если ОтборКИК 
				И Не (ТекущаяПоследовательность.ОбъектИнвестированияИностраннаяОрганизация 
				И Не ТекущаяПоследовательность.ИнвесторИностраннаяОрганизация) Тогда
			
				Продолжить;// не КИК
			
			КонецЕсли;
			
			ЗаполнитьУзелПоследовательности(ЭлементыДерева.Добавить(), ТекущаяПоследовательность);
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
		
	ТабПоследовательности = Объект.ПоследовательностиУчастия.Выгрузить(, ТекущаяКолонка);
	ТабПоследовательности.Свернуть(ТекущаяКолонка);
	ЭталонДерева = Новый Соответствие;
	Для каждого ЗначениеОтбора Из ТабПоследовательности.ВыгрузитьКолонку(ТекущаяКолонка) Цикл
		
		ОтборСтрок = Новый Структура(ТекущаяКолонка, ЗначениеОтбора);
		Если ОтборКИК Тогда
			ОтборСтрок.Вставить("ИнвесторИностраннаяОрганизация", Ложь);
			ОтборСтрок.Вставить("ОбъектИнвестированияИностраннаяОрганизация", Истина);
		КонецЕсли;
		
		ЭталонУзла = Объект.ПоследовательностиУчастия.Выгрузить(ОтборСтрок);
		Если ЭталонУзла.Количество() Тогда
			ЭталонДерева.Вставить(ЗначениеОтбора, ЭталонУзла);		
		КонецЕсли;	
	
	КонецЦикла;
	
	ЭлементыДерева = ДеревоПоследовательности.ПолучитьЭлементы();	
	КоличествоГрупп = ЭлементыДерева.Количество()-1;
	
	Для ОбратныйИндекс = 0 По КоличествоГрупп Цикл
		
		ПриемникГруппа = ЭлементыДерева.Получить(КоличествоГрупп - ОбратныйИндекс);
		
		ИсточникГруппа = ЭталонДерева.Получить(ПриемникГруппа[ТекущаяКолонка]);
		Если ИсточникГруппа = Неопределено Тогда			
			ЭлементыДерева.Удалить(ПриемникГруппа);
			Продолжить;
		КонецЕсли;
		
		Если ПриемникГруппа.Последовательность <> ПриемникГруппа[ТекущаяКолонка] Тогда
			ПриемникГруппа.Последовательность = ПриемникГруппа[ТекущаяКолонка];
			ПриемникГруппа.Представление = ПриемникГруппа.Последовательность;
		КонецЕсли;
		ПриемникГруппаЭлементы = ПриемникГруппа.ПолучитьЭлементы();
		
		ЭлементыДляУдаления = новый Массив;
		
		Для каждого ПриемникЭлемент Из ПриемникГруппаЭлементы Цикл
			
			ИсточникЭлемент = ИсточникГруппа.Найти(ПриемникЭлемент[КолонкаПоиска], КолонкаПоиска);
			Если ИсточникЭлемент = Неопределено Тогда
				ЭлементыДляУдаления.Добавить(ПриемникЭлемент);
			Иначе	
				
				ЗаполнитьУзелПоследовательности(ПриемникЭлемент, ИсточникЭлемент);
				ИсточникГруппа.Удалить(ИсточникЭлемент);
				
			КонецЕсли;
					
		КонецЦикла;
		
		Для каждого ЭлементДляУдаления Из ЭлементыДляУдаления Цикл
			ПриемникГруппаЭлементы.Удалить(ЭлементДляУдаления);
		КонецЦикла;
				
		Для каждого ИсточникЭлемент Из ИсточникГруппа Цикл
			ЗаполнитьУзелПоследовательности(ПриемникГруппаЭлементы.Добавить(), ИсточникЭлемент);
		КонецЦикла;
		
		Если ПриемникГруппаЭлементы.Количество() = 0 Тогда
			ЭлементыДерева.Удалить(ПриемникГруппа);
		КонецЕсли;
		
		ЭталонДерева.Удалить(ПриемникГруппа[ТекущаяКолонка]);
	
	КонецЦикла;
	
	Для каждого ИсточникГруппа Из ЭталонДерева Цикл
		
		ПриемникГруппа = ЭлементыДерева.Добавить();
		ПриемникГруппа.Последовательность = ИсточникГруппа.Ключ;
		ПриемникГруппа.Представление = ПриемникГруппа.Последовательность;
		
		ПриемникГруппаЭлементы = ПриемникГруппа.ПолучитьЭлементы();
		
		Для каждого ИсточникЭлемент Из ИсточникГруппа.Значение Цикл
			ЗаполнитьУзелПоследовательности(ПриемникГруппаЭлементы.Добавить(), ИсточникЭлемент);
		КонецЦикла;
			
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУзелПоследовательности(Узел, ПоследовательностьИсточник)
	
	ЗаполнитьЗначенияСвойств(Узел, ПоследовательностьИсточник);
	Узел.Представление = Узел.Последовательность;
	Попытка
		ПоследовательностьТаб = ЗначениеИзСтрокиВнутр(Узел.Представление);
	Исключение
		Возврат;
	КонецПопытки;
			
	Узел.Представление 
	= Строка(ПоследовательностьИсточник.Инвестор) 
	+ РасчетДолейВладения.ПредставлениеПоследовательностиТаб(ПоследовательностьТаб, "ОбъектИнвестирования");

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьПоследовательности()
	ОбновитьПоследовательностиСервер();	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииОтбора(Элемент)
	Подключаемый_ОбновитьПоследовательности();
КонецПроцедуры

&НаКлиенте
Процедура ЦветПоследовательностиПриИзменении(Элемент)
	УстановитьЦветПоследовательности();
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветПоследовательности()
	ЭтаФорма.УсловноеОформление.Элементы[0].Оформление.УстановитьЗначениеПараметра("ЦветФона", Объект.ЦветПоследовательности);
КонецПроцедуры

&НаКлиенте
Процедура КорректировкиПриИзменении(Элемент)
	
	Если Объект.ИспользоватьМоделирование = Истина Тогда
		ПодключитьОбработчикОжидания("СкомпоноватьОтчет", 1, Истина);	
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура КорректировкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.Корректировки.ТекущиеДанные.Дата = Объект.ДатаАктуальности;
		Элементы.Корректировки.ТекущиеДанные.Сценарий = Объект.Сценарий;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыделениеПоследовательностей(Выделить = Истина, СтрокиИсточники = Неопределено)
	
	Если СтрокиИсточники = Неопределено Тогда	
		СтрокиИсточники = Элементы.ПоследовательностиУчастия.ВыделенныеСтроки;	
	КонецЕсли;
	
	Для каждого ИдентификаторСтроки Из СтрокиИсточники Цикл
		
		СтрокаОбработки = ДеревоПоследовательности.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		СтрокиОбработки = ОбщегоНазначенияКлиентСерверУХ.ЗначениеВМассиве(СтрокаОбработки);
		Для каждого ДочернийУзел Из СтрокаОбработки.ПолучитьЭлементы() Цикл
			СтрокиОбработки.Добавить(ДочернийУзел);	
		КонецЦикла;		
		
		Для каждого СтрокаОбработки Из СтрокиОбработки Цикл
		
			СтрокаОбработки.Выбран = Выделить;
			Для каждого СтрокаТаб Из Объект.ПоследовательностиУчастия.НайтиСтроки(Новый Структура("Последовательность", СтрокаОбработки.Последовательность)) Цикл
				СтрокаТаб.Выбран = СтрокаОбработки.Выбран;
			КонецЦикла;
		
		КонецЦикла;
				
	КонецЦикла;
	
	СкомпоноватьОтчет();

КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПоИнвестору(Команда)	
	
	НоваяПометка = Не Элементы.ПоследовательностиУчастияГруппировкаПоИнвестору.Пометка;
	
	Элементы.ПоследовательностиУчастияГруппировкаПоИнвестору.Пометка = НоваяПометка;
	Если НоваяПометка Тогда
		Элементы.ПоследовательностиУчастияГруппировкаПоОбъектуИнвестирования.Пометка = Не НоваяПометка;
	КонецЕсли;
		
	ОбновитьДеревоПоследовательностей();
	
	Для каждого УзелДерева Из ДеревоПоследовательности.ПолучитьЭлементы() Цикл	
		Элементы.ПоследовательностиУчастия.Развернуть(УзелДерева.ПолучитьИдентификатор(), Истина);	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПоОбъектуИнвестирования(Команда)
	
	НоваяПометка = Не Элементы.ПоследовательностиУчастияГруппировкаПоОбъектуИнвестирования.Пометка;
	
	Элементы.ПоследовательностиУчастияГруппировкаПоОбъектуИнвестирования.Пометка = НоваяПометка;
	Если НоваяПометка Тогда
		Элементы.ПоследовательностиУчастияГруппировкаПоИнвестору.Пометка = Не НоваяПометка;
	КонецЕсли;	
		
	ОбновитьДеревоПоследовательностей();
	
	Для каждого УзелДерева Из ДеревоПоследовательности.ПолучитьЭлементы() Цикл	
		Элементы.ПоследовательностиУчастия.Развернуть(УзелДерева.ПолучитьИдентификатор(), Истина);	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМоделированиеПриИзменении(Элемент)
	СкомпоноватьОтчет();
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеПриИзменении(Элемент)	
	
	Если Объект.Отображение = 0 Тогда
		Объект.ПредставлениеСвязи = СтрЗаменить(Объект.ПредставлениеСвязи, "ЭффективнаяДоля", "ПрямаяДоля");
	Иначе	
	    Объект.ПредставлениеСвязи = СтрЗаменить(Объект.ПредставлениеСвязи, "ПрямаяДоля", "ЭффективнаяДоля");
	КонецЕсли;
	
	СкомпоноватьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьПодробно(Команда)
	
	Элементы.КорректировкиВидимостьПодробно.Пометка = Не Элементы.КорректировкиВидимостьПодробно.Пометка;
	Элементы.КорректировкиГруппаНеобязательные.Видимость = Элементы.КорректировкиВидимостьПодробно.Пометка;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоследовательностиВыделить(Команда)
	ОбработатьВыделениеПоследовательностей(Истина)
КонецПроцедуры

&НаКлиенте
Процедура ПоследовательностиСнятьВыделение(Команда)
	ОбработатьВыделениеПоследовательностей(Ложь)
КонецПроцедуры

&НаКлиенте
Процедура ПоследовательностиУчастияВыбранПриИзменении(Элемент)
	
	ТекущийИдентификатор = Элементы.ПоследовательностиУчастия.ТекущаяСтрока;
	Если ТекущийИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыделениеПоследовательностей(Элементы.ПоследовательностиУчастия.ТекущиеДанные.Выбран, ОбщегоНазначенияКлиентСерверУХ.ЗначениеВМассиве(ТекущийИдентификатор));
		
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	СкомпоноватьОтчет();	
КонецПроцедуры

&НаКлиенте
Процедура СкомпоноватьОтчет()
	
	Если Объект.Сценарий.Пустая() Или (Объект.ДатаАктуальности = Дата(1,1,1)) Тогда
		ПроверитьЗаполнение();// выдаст ошибки заполнения реквизитов
		Возврат;
	КонецЕсли;	
	
	ВыводитьДиаграмму = (Объект.Вывод = 0);
	Если ВыводитьДиаграмму Тогда
		СкомпоноватьГрафСервер();
	Иначе 
		СкомпоноватьОтчетСервер();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СкомпоноватьГрафСервер()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");	
	ТекущийОбъект.ВидимостьПоследовательности = Элементы.ФормаВидимостьПоследовательности.Пометка;
	
	ТекущийРезультат = ТекущийОбъект.ПолучитьГраф();
	ЭтоГраф = ТипЗнч(ТекущийРезультат) = Тип("ГрафическаяСхема");
	Если ЭтоГраф Тогда
		РезультатГраф = ТекущийРезультат;
	Иначе 
		Результат = ТекущийРезультат;
	КонецЕсли;
	
	Элементы.ГруппаГраф.Видимость = ЭтоГраф;
	Элементы.ГруппаТабДок.Видимость = Не ЭтоГраф;
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	РезультатГраф.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	РезультатГраф.РежимРазмещенияНаСтранице = РежимРазмещенияНаСтранице.Пропорционально;
		
	ОбновитьДеревоПоследовательностей();
	
КонецПроцедуры

&НаСервере
Процедура СкомпоноватьОтчетСервер()
	
	Результат.Очистить();
	
	Отчет = Отчеты.ПоследовательностиУчастия.Создать();
	ДанныеРасшифровки = Неопределено;
	
	АдресОтчетПоследовательностиУчастия = ПоместитьВоВременноеХранилище(Отчет.СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	Отчет.ЗаполнитьПоОтбору(Объект.Сценарий, Объект.ДатаАктуальности, Объект.Инвестор, Объект.ОбъектИнвестирования);	
	Отчет.СкомпоноватьРезультат(Результат, ДанныеРасшифровки);
	
	ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ВыводитьДиаграмму = (Объект.Вывод = 0);
	ПрямыеДоли = (Объект.Отображение = 0);
	
	Попытка
		Элементы.ФормаПечать.Видимость = ВыводитьДиаграмму;	
	Исключение	
	КонецПопытки;
	
	Элементы.Отображение.Видимость = ВыводитьДиаграмму;
	Элементы.Страницы.Видимость = ВыводитьДиаграмму;
	
	Элементы.ФормаВидимостьОформление.Видимость = ВыводитьДиаграмму;	
	Элементы.ФормаВидимостьМоделирование.Видимость = ВыводитьДиаграмму;
	Элементы.ФормаВидимостьПоследовательности.Видимость = ВыводитьДиаграмму И ПрямыеДоли;
	
	Элементы.ГруппаМоделирование.Видимость = ВыводитьДиаграмму И Элементы.ФормаВидимостьМоделирование.Пометка;
	Элементы.ГруппаОформление.Видимость = ВыводитьДиаграмму И Элементы.ФормаВидимостьОформление.Пометка;
	Элементы.ГруппаПоследовательности.Видимость = ВыводитьДиаграмму И ПрямыеДоли И Элементы.ФормаВидимостьПоследовательности.Пометка;
	
	Элементы.ВыводСвязейКИК.Видимость 		= Не ПрямыеДоли;
	Элементы.ЦветКИК.Видимость 				= Не ПрямыеДоли;
	Элементы.ЦветУчастие.Видимость 			= Не ПрямыеДоли;
	Элементы.ЦветНеКИК.Видимость 			= Не ПрямыеДоли;
	Элементы.ЦветДочернее.Видимость 		= Не ПрямыеДоли;
	Элементы.ЦветАссоциат.Видимость 		= Не ПрямыеДоли;
	Элементы.ЦветСовместное.Видимость	 	= Не ПрямыеДоли;
	Элементы.ЦветТретьяСторона.Видимость	= Не ПрямыеДоли;
	
	Элементы.ГруппаГраф.Видимость = ВыводитьДиаграмму;
	Элементы.ГруппаТабДок.Видимость = Не ВыводитьДиаграмму;

КонецПроцедуры

&НаКлиенте
Процедура ВыводПриИзменении(Элемент)
	СкомпоноватьОтчет();		
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Перем ВыбранноеДействие;
	Перем ПараметрыВыбранногоДействия;
	
	СтандартнаяОбработка = Ложь;
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки,	Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресОтчетПоследовательностиУчастия));
	
	ДоступныеДействия = Новый Массив();
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Отфильтровать);
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Оформить);
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Упорядочить);
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
	
	ДопПараметры = Новый Структура("ВыбранноеДействие, ПараметрыВыбранногоДействия, Расшифровка", ВыбранноеДействие, ПараметрыВыбранногоДействия, Расшифровка);
	ОписаниеОповещения = Новый ОписаниеОповещения("РезультатОбработкаРасшифровкиЗавершение", ЭтотОбъект, ДопПараметры);
	
	ОбработкаРасшифровки.ПоказатьВыборДействия(ОписаниеОповещения, Расшифровка, ДоступныеДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровкиЗавершение(ВыбранноеДействие,  ПараметрыВыбранногоДействия, ДополнительныеПараметры) Экспорт
	
	Расшифровка = ДополнительныеПараметры.Расшифровка;
	
	// Осуществим выбор действия расшифровки пользователем.
	
	Если ПараметрыВыбранногоДействия = Неопределено Тогда
		//Сообщить(ВыбранноеДействие);
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
		ПоказатьЗначение(, ПараметрыВыбранногоДействия);
		Возврат;
	КонецЕсли;
	
	ОписаниеРасшифровки = Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Расшифровка, ПараметрыВыбранногоДействия);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("Расшифровка", ОписаниеРасшифровки);
	
	ОткрытьФорму("Отчет.ПоследовательностиУчастия.ФормаОбъекта", ПараметрыФормы, , Истина);

КонецПроцедуры

&НаСервере
Процедура ОбновитьМоделированиеСервер()
	
	// обновление динамического списка
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветЕслиНеЗаполнен(ЦветПриемник, ЦветИсточник)
	
	Если Не ОтрисовкаГрафа.ЦветЗаполнен(ЦветПриемник) Тогда
		ЦветПриемник = ЦветИсточник;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводСвязейКИКПриИзменении(Элемент)
	
	Элементы.СтраницыСвязи.ТекущаяСтраница = ?(Объект.ОтображатьСвязиКИК, Элементы.ГруппаКИК, Элементы.ГруппаМСФО);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатГрафВыбор(Элемент)
		
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.РезультатГраф.ТекущийЭлемент = Неопределено Тогда
		Возврат; 	
	КонецЕсли;
	
	ПараметрыОткрытияФормы = ПолучитьПараметрыОткрытияФормы(Элементы.РезультатГраф.ТекущийЭлемент.Имя);
	Если ЗначениеЗаполнено(ПараметрыОткрытияФормы) Тогда
		ОткрытьФорму(ПараметрыОткрытияФормы.ИмяФормы, ПараметрыОткрытияФормы.Параметры, ЭтаФорма);
	КонецЕсли;	
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыОткрытияФормы(ИмяЭлемента)
	
	ДанныеЛинии = ОтрисовкаГрафа.ПолучитьДанныеЛинии(ИмяЭлемента);	
	Если ДанныеЛинии.Количество() < 2 Тогда		
		
		ТекОрганизация = ПолучитьОрганизацию(ИмяЭлемента);
		Если ТекОрганизация = Неопределено Тогда
			Возврат Неопределено;	
		КонецЕсли;
		
		Возврат Новый Структура("ИмяФормы,Параметры", "Справочник.Организации.ФормаОбъекта", Новый Структура("Ключ", ТекОрганизация));
		
	КонецЕсли;
	
	Отбор = Новый Структура;
	Попытка
	    Отбор.Вставить("Организация", Справочники.Организации.ПолучитьСсылку(ДанныеЛинии[0]));
	Исключение	
	КонецПопытки;
	
	Попытка
	    Отбор.Вставить("ОбъектИнвестирования", Справочники.Организации.ПолучитьСсылку(ДанныеЛинии[1]));
	Исключение	
	КонецПопытки;
	
	Возврат Новый Структура("ИмяФормы,Параметры", "ЖурналДокументов.ДвижениеИнвестиций.ФормаСписка", Новый Структура("Отбор", Отбор));
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОрганизацию(ИмяЭлемента)
	
	ЭлементИД = Сред(СтрЗаменить(ИмяЭлемента, "_", "-"), 2);		
	Попытка
		Возврат Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлементИД));		
	Исключение
		Возврат Неопределено;
	КонецПопытки;

КонецФункции

&НаКлиенте
Процедура ДобавитьИзЕГРЮЛ(Команда)
	
	ТекущийЭлементГрафа = Элементы.РезультатГраф.ТекущийЭлемент;
	
	Если ТекущийЭлементГрафа = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ТекущийЭлементГрафа) <> Тип("ЭлементГрафическойСхемыДекорация") Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущаяОрганизация = ПолучитьОрганизацию(ТекущийЭлементГрафа.Имя);
	Если Не ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
		Возврат;
	КонецЕсли;

	ДанныеЕГРЮЛ = ПолучитьДанныеПоОбъектамИнвестирования(ТекущаяОрганизация);
	Если ДанныеЕГРЮЛ = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("ДанныеЕГРЮЛ,Инвестор,Сценарий", ДанныеЕГРЮЛ, ТекущаяОрганизация, Объект.Сценарий);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("Подключаемый_ОбработкаЗакрытияДанныеЕГРЮЛ", ЭтаФорма, Новый Структура("Инвестор", ТекущаяОрганизация));
	ОткрытьФорму("Обработка.СтруктураВладения.Форма.ФормаМоделированиеПоЕГРЮЛ", ПараметрыФормы, ЭтаФорма, Истина, , , ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеПоОбъектамИнвестирования(ТекущаяОрганизация) Экспорт
	
	Если Не ЗначениеЗаполнено(ТекущаяОрганизация.ИНН) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИнтеграцияВИБПереопределяемыйУХ.ПолучитьДанныеПоОбъектамИнвестирования(ТекущаяОрганизация.ИНН);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбработкаЗакрытияДанныеЕГРЮЛ(РезультатЗакрытия, ДанныеЗакрытия) Экспорт
	
	Если Не ЭтоАдресВременногоХранилища(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоЕГРЮЛ(РезультатЗакрытия, ДанныеЗакрытия.Инвестор);
			
	Если Объект.ИспользоватьМоделирование = Истина Тогда
		ПодключитьОбработчикОжидания("СкомпоноватьОтчет", 1, Истина);	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЕГРЮЛ(АдресДанныхЕГРЮЛ, Инвестор)
	
	ТабИсточник = ПолучитьИзВременногоХранилища(АдресДанныхЕГРЮЛ);
	ТабИсточник.Колонки.Добавить("Инвестор");
	
	ТабИсточник.ЗаполнитьЗначения(Инвестор, "Инвестор");	
	
	Для каждого Стр Из ТабИсточник Цикл
		Менеджер = РегистрыСведений.МоделированиеДвиженийИнвестиций.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Менеджер, Стр);
		Попытка
			Менеджер.Записать(Истина);
		Исключение
			
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПроверитьДатуАктуальности()
	Текст = "";
	Если РасчетДолейВладения.ПоследовательностьАктуальна(Объект.ДатаАктуальности, Текст) = Ложь Тогда
		Элементы.НадписьАктуальность.Заголовок = Текст;
		Элементы.ГруппаАктуальность.Видимость = Истина;
	Иначе 
		Элементы.ГруппаАктуальность.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаАктуальностиПриИзменении(Элемент)
	ПроверитьДатуАктуальности();
КонецПроцедуры

#КонецОбласти

