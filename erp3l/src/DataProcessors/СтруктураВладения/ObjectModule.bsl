Перем ВидимостьПоследовательности Экспорт;

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Функция ПолучитьГраф() Экспорт

	ТекущееПредставлениеСвязи = ?(Отображение = 0, ПредставлениеСвязи, СтрЗаменить(ПредставлениеСвязи, "ПрямаяДоля", "ЭффективнаяДоля"));
	
	ЦветаОформления = ЦветаОформления();
	
	ДанныеСтруктуры = РасчетДолейВладения.ПолучитьДанныеСтруктурыВладения(Сценарий, ДатаАктуальности, ИспользоватьМоделирование, Отображение = 1);
	
	ИсточникПоследовательностей = ДанныеСтруктуры.Связи;
	ДеревоПоследовательностиУчастия = ПолучитьПоследовательностиУчастия(ИсточникПоследовательностей, ИспользоватьМоделирование);
	
	Если Отображение = 0 Тогда
		
		ТабСвязи = ДанныеСтруктуры.Связи;
		ПрименитьОтборыСКД(ТабСвязи, ДанныеСтруктуры.Узлы);
		
		ТабСвязи.Колонки.Добавить("Оформление");	
		ЗаполнитьПоследовательности(ТабСвязи, ДеревоПоследовательностиУчастия);
		
	Иначе 
		
		Если ИспользоватьМоделирование Тогда
			ТабСвязи = ПолучитьСвязиМоделированияЭффективныхДолей(ДанныеСтруктуры.Связи, ДеревоПоследовательностиУчастия);
		Иначе	
			ТабСвязи = ДанныеСтруктуры.Связи;		
		КонецЕсли;
		
		ПрименитьОтборыСКД(ТабСвязи, ДанныеСтруктуры.Узлы);		
		
		ТабСвязи.Колонки.Добавить("Оформление");
		Для каждого СтрокаТаб Из ТабСвязи Цикл
			
			ЦветЛинии = ПолучитьЦветЛинииЭффективнойДоли(СтрокаТаб, ЦветаОформления);						
			СтрокаТаб.Оформление = Новый Структура("ЦветЛинии", ЦветЛинии);
			
		КонецЦикла;
				
	КонецЕсли;
	
	ОформитьСтрокиМоделирования(ТабСвязи);
	
	ТабСвязи.Колонки.Инвестор.Имя = "Источник";
	ТабСвязи.Колонки.ОбъектИнвестирования.Имя = "Приемник";
	
	РеквизитыУзла = СтрРазделить(СтрЗаменить(СтрЗаменить(ПредставлениеУзла, "Организация", "Узел"), ".", "_"), ";", Ложь);
	РеквизитыСвязи = СтрРазделить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(ТекущееПредставлениеСвязи, "ЭффективнаяДоля", "ПрямаяДоля"), "ОбъектИнвестирования", "Приемник"), "Инвестор", "Источник"), ".", "_"), ";", Ложь);
	
	ТабУзлов = РасчетДолейВладения.ПолучитьНачальнуюТаблицуУзлов(ДанныеСтруктуры.Узлы, ТабСвязи, РеквизитыУзла, ЦветаОформления);
	ТаблицаУзлы = РасчетДолейВладения.ПолучитьТаблицуУзлов(ТабУзлов, ТабСвязи, ДеревоПоследовательностиУчастия, РеквизитыСвязи);
	
	Возврат ОтрисовкаГрафа.ПолучитьГрафическуюСхемуГрафа(ТабСвязи, ТаблицаУзлы);
		
КонецФункции

Функция ПолучитьСвязиМоделированияЭффективныхДолей(ТабПрямыеДоли, ДеревоПоследовательностиУчастия)
	
	ТабСвязи = ТабПрямыеДоли.СкопироватьКолонки();	
	ИменаКолонок = Новый Структура("ЭффективнаяДоля,ОтношениеКГруппе,ВидОтношенияКГруппе,СтатусИностраннойКомпании");
	Для каждого ТекИмяКолонки Из ИменаКолонок Цикл		
		Если ТабСвязи.Колонки.Найти(ТекИмяКолонки.Ключ) = Неопределено Тогда
			ТабСвязи.Колонки.Добавить(ТекИмяКолонки.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	КэшОтношенийКГруппе = Неопределено;
	
	Для каждого УзелИнвестор Из ДеревоПоследовательностиУчастия Цикл
		Для каждого УзелОбъектИнвестирования Из УзелИнвестор.Значение Цикл
			
			ТекущаяЭффективнаяДоля = 0;
			ТекущаяПрямаяДоля = 0;
			
			Для каждого УзелПоследовательность Из УзелОбъектИнвестирования.Значение Цикл
				
				ТекущаяПоследовательность = УзелПоследовательность.Значение.Последовательность;
				ДоляПоследовательности = РасчетДолейВладения.ПолучитьЭффективнуюДолюПоследовательности(ТекущаяПоследовательность);
				Если ТекущаяПоследовательность.Количество() = 1 Тогда				
					ТекущаяПрямаяДоля = ДоляПоследовательности;				
				КонецЕсли;
				
				ТекущаяЭффективнаяДоля = ТекущаяЭффективнаяДоля + ДоляПоследовательности;
				
			КонецЦикла;	
			
			НоваяСтрока = ТабСвязи.Добавить();
			
			НоваяСтрока.Инвестор 					= УзелИнвестор.Ключ;
			НоваяСтрока.ОбъектИнвестирования		= УзелОбъектИнвестирования.Ключ;
			НоваяСтрока.ЭффективнаяДоля 			= ТекущаяЭффективнаяДоля;
			НоваяСтрока.ОтношениеКГруппе 			= РегламентыКлиентСервер.ПолучитьОтношениеКГруппеПоДоле(ТекущаяЭффективнаяДоля, КэшОтношенийКГруппе);
			НоваяСтрока.ВидОтношенияКГруппе			= НоваяСтрока.ОтношениеКГруппе.ВидОтношенияКГруппе;
			//НоваяСтрока.СтатусИностраннойКомпании	= ИнвестицииКлиентСервер.ПолучитьСтатусИК(
			//																	НоваяСтрока.Инвестор,
			//																	НоваяСтрока.ОбъектИнвестирования,
			//																	ТекущаяПрямаяДоля,
			//																	ДеревоПоследовательностиУчастия,
			//																	ДатаАктуальности
			//																);
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТабСвязи;

КонецФункции

Функция ПолучитьЦветЛинииЭффективнойДоли(СтрокаТаб, ЦветаОформления)
	
	ЦветЛинии = Неопределено;
	
	Если ОтображатьСвязиКИК Тогда
		
		Если СтрокаТаб.СтатусИностраннойКомпании = ПредопределенноеЗначение("Перечисление.СтатусыИностранныхКомпаний.КонтролируемаяИностраннаяКомпания") Тогда
			ЦветаОформления.Свойство("ЦветКИК", ЦветЛинии);
		ИначеЕсли СтрокаТаб.СтатусИностраннойКомпании = ПредопределенноеЗначение("Перечисление.СтатусыИностранныхКомпаний.ОрганизацияСУчастием") Тогда
			ЦветаОформления.Свойство("ЦветУчастие", ЦветЛинии);
		Иначе 
			ЦветаОформления.Свойство("ЦветНеКИК", ЦветЛинии);
		КонецЕсли;
		
	Иначе 
		
		Если СтрокаТаб.ВидОтношенияКГруппе = ПредопределенноеЗначение("Перечисление.ВидыОтношенийКГруппе.Дочернее") Тогда
			ЦветаОформления.Свойство("ЦветДочернее", ЦветЛинии);
		ИначеЕсли СтрокаТаб.ВидОтношенияКГруппе = ПредопределенноеЗначение("Перечисление.ВидыОтношенийКГруппе.Ассоциированное") Тогда
			ЦветаОформления.Свойство("ЦветАссоциат", ЦветЛинии);
		ИначеЕсли СтрокаТаб.ВидОтношенияКГруппе = ПредопределенноеЗначение("Перечисление.ВидыОтношенийКГруппе.Совместное") Тогда
			ЦветаОформления.Свойство("ЦветСовместное", ЦветЛинии);							
		Иначе 
			ЦветаОформления.Свойство("ЦветТретьяСторона", ЦветЛинии);
		КонецЕсли;		
		
	КонецЕсли;
	
	Возврат ЦветЛинии;

КонецФункции

Функция ЦветаОформления()

	Результат = Новый Структура;
	
	Для каждого РеквизитОбр Из ЭтотОбъект.Метаданные().Реквизиты Цикл
		
		Если СтрНайти(РеквизитОбр.Имя, "Цвет") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЦветПриемник = ЭтотОбъект[РеквизитОбр.Имя];
		Если Не ОтрисовкаГрафа.ЦветЗаполнен(ЦветПриемник) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Вставить(РеквизитОбр.Имя, ЦветПриемник);
	
	КонецЦикла;
	
	Возврат Результат;
	
	РеквизитыУзла = Новый Структура;
	РеквизитыСвязи = Новый Структура;
			
	Для каждого РеквизитИсточник Из СтрРазделить(СтрЗаменить(ПредставлениеУзла, "Организация", "Узел"), ";", Ложь) Цикл	
		РеквизитыУзла.Вставить(СтрЗаменить(РеквизитИсточник, ".", "_") , РеквизитИсточник);	
	КонецЦикла;
	
	Для каждого РеквизитИсточник Из СтрРазделить(СтрЗаменить(СтрЗаменить(ПредставлениеСвязи, "ОбъектИнвестирования", "Приемник"), "Инвестор", "Источник"), ";", Ложь) Цикл	
		РеквизитыСвязи.Вставить(СтрЗаменить(РеквизитИсточник, ".", "_") , РеквизитИсточник);	
	КонецЦикла;
	
	Если ОтрисовкаГрафа.ЦветЗаполнен(ЦветПАО) Тогда
		РеквизитыУзла.Вставить("КодОКОПФ", "КодОКОПФ");		
	КонецЕсли;
	
	Если ОтрисовкаГрафа.ЦветЗаполнен(ЦветИО) Тогда
		РеквизитыУзла.Вставить("ИностранныйНалоговыйРезидент", "ИностранныйНалоговыйРезидент");		
	КонецЕсли;
	
	Если ОтрисовкаГрафа.ЦветЗаполнен(ЦветИС) Тогда
		РеквизитыУзла.Вставить("ИностраннаяСтруктураБезОбразованияЮрЛица", "ИностраннаяСтруктураБезОбразованияЮрЛица");		
	КонецЕсли;
	
	Результат = Новый Структура("Узлы,ПрямыеДоли, ПредставлениеУзла, ПредставлениеСвязи", РеквизитыУзла, РеквизитыСвязи,);
	
	Если Вывод = 1 Тогда //эффективные доли
		
		//КИК
		
		Если ОтрисовкаГрафа.ЦветЗаполнен(ЦветНеКИК) Тогда
			РеквизитыСвязи.Вставить("НеКИК", "СтатусИностраннойКомпании В (ЗНАЧЕНИЕ(Перечисление.СтатусыИностранныхКомпаний.ПустаяСсылка),ЗНАЧЕНИЕ(Перечисление.СтатусыИностранныхКомпаний.НеУчаствуетВНУКИК)");
		КонецЕсли;
		
		Если ОтрисовкаГрафа.ЦветЗаполнен(ЦветУчастие) Тогда
			РеквизитыСвязи.Вставить("НеКИК", "СтатусИностраннойКомпании В (ЗНАЧЕНИЕ(Перечисление.СтатусыИностранныхКомпаний.ОрганизацияСУчастием)");
		КонецЕсли;
		
		Если ОтрисовкаГрафа.ЦветЗаполнен(ЦветКИК) Тогда
			РеквизитыСвязи.Вставить("НеКИК", "СтатусИностраннойКомпании В (ЗНАЧЕНИЕ(Перечисление.СтатусыИностранныхКомпаний.КонтролируемаяИК)");
		КонецЕсли;
		
		//ОтношенияКГруппе
		
		Если ОтрисовкаГрафа.ЦветЗаполнен(ЦветТретьяСторона) Тогда
			РеквизитыСвязи.Вставить("ТретьяСторона", "ОтношениеКГруппе.ВидОтношенияКГруппе В (ЗНАЧЕНИЕ(Перечисление.ВидыОтношенийКГруппе.ПустаяСсылка),ЗНАЧЕНИЕ(Перечисление.ВидыОтношенийКГруппе.ТретьяСторона)");
		КонецЕсли;
		
		Если ОтрисовкаГрафа.ЦветЗаполнен(ЦветДочернее) Тогда
			РеквизитыСвязи.Вставить("Дочернее", "ОтношениеКГруппе.ВидОтношенияКГруппе В (ЗНАЧЕНИЕ(Перечисление.ВидыОтношенийКГруппе.Дочернее)");
		КонецЕсли;
		
		Если ОтрисовкаГрафа.ЦветЗаполнен(ЦветАссоциат) Тогда
			РеквизитыСвязи.Вставить("Ассоциат", "ОтношениеКГруппе.ВидОтношенияКГруппе В (ЗНАЧЕНИЕ(Перечисление.ВидыОтношенийКГруппе.Ассоциированное)");
		КонецЕсли;
		
		Результат.Вставить("Статусы", РеквизитыСвязи);
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ОбновитьТаблицуПоследовательностей() Экспорт

	ТабПрямыеДоли = РасчетДолейВладения.ПолучитьТаблицуПрямыеДоли(Сценарий, ДатаАктуальности, ИспользоватьМоделирование);
	ПрименитьОтборыСКД(ТабПрямыеДоли);
	
	ДеревоПоследовательностиУчастия = ПолучитьПоследовательностиУчастия(ТабПрямыеДоли, ИспользоватьМоделирование);
	
	ТабПрямыеДоли.Колонки.Добавить("Оформление");
	ЗаполнитьПоследовательности(ТабПрямыеДоли, ДеревоПоследовательностиУчастия);

КонецФункции

Процедура ЗаполнитьПоследовательности(ТабПрямыеДоли, ДеревоПоследовательностиУчастия)

	ЕстьОформлениеПриОткрытии = Не ОформлениеИнвестор.Пустая() Или Не ОформлениеОбъектИнвестирования.Пустая();
		
	Если (ВидимостьПоследовательности <> Истина) И (Не ЕстьОформлениеПриОткрытии) Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныеПоследовательности = ПоследовательностиУчастия.Выгрузить(Новый Структура("Выбран", Истина), "Последовательность").ВыгрузитьКолонку("Последовательность");
	
	ИменаПоследовательностей = ПоследовательностиУчастия.ВыгрузитьКолонку("Последовательность");
	
	ОформлениеПоследовательности = Новый Структура("ЦветЛинии", ЦветПоследовательности);
		
	Для Каждого УзелИнвестор Из ДеревоПоследовательностиУчастия Цикл
		Для Каждого УзелОбъектИнвестирования Из УзелИнвестор.Значение Цикл		
			
			Для Каждого ЭлементПоследовательность Из УзелОбъектИнвестирования.Значение Цикл
				
				ТекущаяПоследовательность = ЭлементПоследовательность.Значение.Последовательность;
				
				Если ТекущаяПоследовательность.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ТекущаяПоследовательность.Сортировать("Номер ВОЗР");
				
				Если ИспользоватьМоделирование Тогда
					ПредставлениеПоследовательности = ЭлементПоследовательность.Ключ;
				Иначе	
					ТабПоследовательность = ЭлементПоследовательность.Значение.Последовательность;
					ПредставлениеПоследовательности = РасчетДолейВладения.ПредставлениеПоследовательности(ТабПоследовательность, "ОбъектИнвестирования", "Инвестор");
				КонецЕсли;
								
				НоваяПоследовательность = ПоследовательностиУчастия.Найти(ПредставлениеПоследовательности, "Последовательность");
				Если НоваяПоследовательность = Неопределено Тогда
					НоваяПоследовательность = ПоследовательностиУчастия.Добавить();
				Иначе					
					ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ИменаПоследовательностей, ПредставлениеПоследовательности);
				КонецЕсли;
								
				НоваяПоследовательность.Последовательность = ПредставлениеПоследовательности;
				НоваяПоследовательность.Инвестор = УзелИнвестор.Ключ;
				НоваяПоследовательность.ОбъектИнвестирования = УзелОбъектИнвестирования.Ключ;
				
				НоваяПоследовательность.ИнвесторИностраннаяОрганизация = УзелИнвестор.Ключ.ИностранныйНалоговыйРезидент;
				НоваяПоследовательность.ОбъектИнвестированияИностраннаяОрганизация = УзелОбъектИнвестирования.Ключ.ИностранныйНалоговыйРезидент;
				
				Если ЕстьОформлениеПриОткрытии Тогда
					НоваяПоследовательность.Выбран = (НоваяПоследовательность.Инвестор = ОформлениеИнвестор) И (НоваяПоследовательность.ОбъектИнвестирования = ОформлениеОбъектИнвестирования);
				Иначе	
					НоваяПоследовательность.Выбран = ВыбранныеПоследовательности.Найти(ПредставлениеПоследовательности) <> Неопределено;				
				КонецЕсли;			
				
				Если НоваяПоследовательность.Выбран Тогда
					
					Для Каждого СтрокаПоследовательности Из ТекущаяПоследовательность Цикл
						
						ОтборПометки = Новый Структура("Инвестор,ОбъектИнвестирования", СтрокаПоследовательности.ИнвесторПоследовательности, СтрокаПоследовательности.ОбъектИнвестированияПоследовательности);
						СтрокиПометки = ТабПрямыеДоли.НайтиСтроки(ОтборПометки);
						Для каждого СтрокаПометки Из СтрокиПометки Цикл
							СтрокаПометки.Оформление = ОформлениеПоследовательности;					
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;		
		КонецЦикла;	
	КонецЦикла;
	
	Для каждого ИмяПоследовательности Из ИменаПоследовательностей Цикл
		ПоследовательностиУчастия.Удалить(ПоследовательностиУчастия.Найти(ИмяПоследовательности, "Последовательность"));
	КонецЦикла;
	
	ОформлениеИнвестор = Неопределено;
	ОформлениеОбъектИнвестирования = Неопределено;
		
КонецПроцедуры

Процедура ОформитьСтрокиМоделирования(Знач ТабПрямыеДоли)
	
	Если Не ИспользоватьМоделирование Тогда
		Возврат;
	КонецЕсли;
	
	ОформлениеМоделирования = Новый Структура("ЦветЛинии", ЦветМоделирования);
	
	СтрокиМоделирования = ТабПрямыеДоли.НайтиСтроки(Новый Структура("Моделирование,Оформление", Истина, Неопределено));
	Для каждого СтрокаМоделирования Из СтрокиМоделирования Цикл
		СтрокаМоделирования.Оформление = ОформлениеМоделирования;	
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьПоследовательностиУчастия(ТабПрямыеДоли, Моделирование = Истина)
	
	Если Моделирование Тогда		
		
		ТабПрямыеДоли.Колонки.Добавить("СтрокаИзменение");
		ТабПрямыеДоли.ЗаполнитьЗначения(Истина, "СтрокаИзменение");
		
		ТабИнвесторы = ТабПрямыеДоли.Скопировать(, "Инвестор");
		ТабИнвесторы.Свернуть("Инвестор");
		
		Если Отображение = 0 Тогда
			ТабИнвесторыИсточник = ТабПрямыеДоли.Скопировать();
		Иначе	
			ТабИнвесторыИсточник = ТабПрямыеДоли;
		КонецЕсли;
		
		Возврат РасчетДолейВладения.ПолучитьПоследовательностиУчастия(ТабИнвесторы.ВыгрузитьКолонку("Инвестор"), ТабИнвесторыИсточник);
		
	КонецЕсли;	
		
	ИменаГруппировок = "Инвестор,ОбъектИнвестирования,НомерПоследовательностиУчастия";
	Дерево = РасчетДолейВладения.ПолучитьПоследовательностиНаДату(Сценарий, ДатаАктуальности, , ИменаГруппировок);
	
	ШаблонПоследовательности = Новый ТаблицаЗначений;
	Для каждого КолонкаИсточник Из Дерево.Колонки Цикл
		ШаблонПоследовательности.Колонки.Добавить(КолонкаИсточник.Имя);
	КонецЦикла;	
	
	Результат = Новый Соответствие;
	
	Для каждого СтрокаИнвестор Из Дерево.Строки Цикл
		
		УзелИнвестор = Новый Соответствие;		
		Для каждого СтрокаОбъектИнвестирования Из СтрокаИнвестор.Строки Цикл
			
			УзелОбъектИнвестирования = Новый Соответствие;
			Для каждого СтрокаПоследовательность Из СтрокаОбъектИнвестирования.Строки Цикл
				
				ТабПоследовательность = ШаблонПоследовательности.СкопироватьКолонки();
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокаПоследовательность.Строки, ТабПоследовательность);
				
				ДанныеПоследовательности = Новый Структура("Последовательность", ТабПоследовательность);
				УзелОбъектИнвестирования.Вставить(СтрокаПоследовательность.НомерПоследовательностиУчастия, ДанныеПоследовательности);
				
			КонецЦикла;
			
			УзелИнвестор.Вставить(СтрокаОбъектИнвестирования.ОбъектИнвестирования, УзелОбъектИнвестирования);
		
		КонецЦикла;
		
		Результат.Вставить(СтрокаИнвестор.Инвестор, УзелИнвестор);
	
	КонецЦикла;
	
	Возврат Результат; 
		
КонецФункции

Процедура ПрименитьОтборыСКД(ПрямыеДоли, Узлы = Неопределено)
	
	ПрямыеДоли.Колонки.Добавить("ОтборИнвестор", 				ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ПрямыеДоли.Колонки.Добавить("ОтборОбъектИнвестирования",	ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	ПрямыеДоли.Индексы.Добавить("ОбъектИнвестирования, Инвестор");

	Если Инвестор.Пустая() И ОбъектИнвестирования.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Инвестор.Пустая() Тогда
		Для каждого СтрокаОтбора Из ПрямыеДоли.НайтиСтроки(Новый Структура("Инвестор", Инвестор)) Цикл
			СтрокаОтбора.ОтборИнвестор = Истина;
			ПометитьИспользованиеРекурсивно(ПрямыеДоли, СтрокаОтбора, "ОтборИнвестор", Ложь);	
		КонецЦикла;		
	КонецЕсли;
	
	Если Не ОбъектИнвестирования.Пустая() Тогда
		Для каждого СтрокаОтбора Из ПрямыеДоли.НайтиСтроки(Новый Структура("ОбъектИнвестирования", ОбъектИнвестирования)) Цикл
			СтрокаОтбора.ОтборОбъектИнвестирования = Истина;
			ПометитьИспользованиеРекурсивно(ПрямыеДоли, СтрокаОтбора, "ОтборОбъектИнвестирования", Ложь);
		КонецЦикла;		
	КонецЕсли;	
	
	ПрямыеДоли.Индексы.Очистить();
	
	КоличествоСтрок = ПрямыеДоли.Количество();
	
	Для ОбратныйНомер = 1 По ПрямыеДоли.Количество() Цикл
		
		СтрокаВнеОтбора = ПрямыеДоли.Получить(КоличествоСтрок - ОбратныйНомер);
		
		Если (Инвестор.Пустая() Или СтрокаВнеОтбора.ОтборИнвестор) И (ОбъектИнвестирования.Пустая() Или СтрокаВнеОтбора.ОтборОбъектИнвестирования) Тогда
			Продолжить;
		КонецЕсли;
		
		ПрямыеДоли.Удалить(СтрокаВнеОтбора);
		
	КонецЦикла;
	
	Если Узлы <> Неопределено Тогда
		
		ДоступныеУзлы = Новый Соответствие;
		Для каждого СтрокаДоля Из ПрямыеДоли Цикл
			ДоступныеУзлы.Вставить(СтрокаДоля.Инвестор, Истина);
			ДоступныеУзлы.Вставить(СтрокаДоля.ОбъектИнвестирования, Истина);
		КонецЦикла;
		
		МаксИндекс = Узлы.Количество();
		Для ОбрИндекс = 1 По МаксИндекс Цикл
			ТекущийУзел = Узлы.Получить(МаксИндекс - ОбрИндекс);
			Если ДоступныеУзлы.Получить(ТекущийУзел.Узел) = Неопределено Тогда
				Узлы.Удалить(ТекущийУзел);
			КонецЕсли;	
		КонецЦикла;
	
	КонецЕсли;
		
	ПрямыеДоли.Колонки.Удалить("ОтборИнвестор");
	ПрямыеДоли.Колонки.Удалить("ОтборОбъектИнвестирования");
	
КонецПроцедуры

Функция ПометитьИспользованиеРекурсивно(ПрямыеДоли, СтрокаИсточник, КолонкаОтбора, ИспользоватьСценарий = Истина)

	Отбор = Новый Структура;
	Если КолонкаОтбора = "ОтборОбъектИнвестирования" Тогда
		Отбор.Вставить("ОбъектИнвестирования", СтрокаИсточник.Инвестор);		
	Иначе
		Отбор.Вставить("Инвестор", СтрокаИсточник.ОбъектИнвестирования);
	КонецЕсли;
	
	Если ИспользоватьСценарий Тогда
		Отбор.Вставить("Сценарий", СтрокаИсточник.Сценарий);
	КонецЕсли;
	
	СтрокиОтбора = ПрямыеДоли.НайтиСтроки(Отбор);
		
	Для каждого СтрокаИнвестор Из СтрокиОтбора Цикл
		
		Если СтрокаИнвестор[КолонкаОтбора] Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаИнвестор[КолонкаОтбора] = Истина;
		ПометитьИспользованиеРекурсивно(ПрямыеДоли, СтрокаИнвестор, КолонкаОтбора, ИспользоватьСценарий);
		
	КонецЦикла;

КонецФункции

#КонецЕсли