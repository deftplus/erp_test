
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ФормированиеДвиженийИнвестиций

Функция СформироватьДвиженияИнвестицийПоТаблицеМоделирования(Сценарий, ВыделенныеСтроки, Втранзакции = Ложь, Отказ = Ложь) Экспорт 

	Результат = Новый Массив;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Втранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;	
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Набор = РегистрыСведений.МоделированиеДвиженийИнвестиций.СоздатьНаборЗаписей();
	
	Для каждого СтрокаТаб Из ВыделенныеСтроки Цикл
				
		ДокументСоздан = СфомироватьДокумент(СтрокаТаб, Отказ, СтрокаТаб.Сценарий);
		Если ДокументСоздан <> Ложь Тогда
			Результат.Добавить(ДокументСоздан);
		
			Набор.Отбор.Инвестор.Установить(СтрокаТаб.Инвестор);
			Набор.Отбор.ОбъектИнвестирования.Установить(СтрокаТаб.ОбъектИнвестирования);
			Набор.Отбор.Сценарий.Установить(СтрокаТаб.Сценарий);
			
			Набор.Записать(Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Втранзакции Тогда
		
		Если Отказ Тогда
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();	
			КонецЕсли;
			
		Иначе
			
			Если ТранзакцияАктивна() Тогда
				ЗафиксироватьТранзакцию();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗагрузитьИнвестицииИзФайла

Функция ПолучитьДвиженияИнвестицийИзФайла(ИмяФайла, Сценарий = Неопределено, ПоИНН = Ложь, СоздаватьОрганизации = Ложь, ВыводитьСообщения = Истина) Экспорт
	
	Таб = ПолучитьТаблицуИнвестицийИзФайла(ИмяФайла, ВыводитьСообщения);
	КэшОрганизаций = ПолучитьСоответствиеОрганизаций(Таб, СоздаватьОрганизации, ПоИНН, ВыводитьСообщения);
	КэшКонтрагентов = ПолучитьСоответствиеКонтрагентов(Таб, СоздаватьОрганизации, ПоИНН, ВыводитьСообщения);
	
	Если Сценарий = Неопределено Тогда
		Сценарий = Константы.СценарийМСФО.Получить();
	КонецЕсли;
	
	Для каждого СтрокаТаб Из Таб Цикл
		
		СтрокаТаб.Инвестор 				= КэшОрганизаций.Получить(СтрокаТаб.тИнвестор);
		СтрокаТаб.ОбъектИнвестирования 	= КэшОрганизаций.Получить(СтрокаТаб.тИнвестиция);		
		СтрокаТаб.Контрагент 			= КэшКонтрагентов.Получить(СтрокаТаб.тКонтрагент);
		СтрокаТаб.ДоговорКонтрагента 	= ПолучитьДоговорКонтрагента(СтрокаТаб.НомерДоговора, СтрокаТаб.тДоговорКонтрагента, СтрокаТаб.Инвестор, СтрокаТаб.Контрагент);
		СтрокаТаб.Сценарий				= Сценарий;
				
	КонецЦикла;
	
	Возврат ПолучитьДвиженияИнвестиций(Таб, Сценарий);
	
КонецФункции

Функция ПолучитьДвиженияИнвестиций(ТабИсточник, Сценарий = Неопределено) Экспорт

	ТабРезультат = ПолучитьДокументыИнвестиций(ТабИсточник, ?(Сценарий = Неопределено, Константы.СценарийМСФО.Получить(), Сценарий));	
	СформироватьЗаписиМоделирования(ТабРезультат);
	
	Возврат ТабРезультат;
	
КонецФункции

Процедура СформироватьЗаписиМоделирования(ТабРезультат, Отказ = Ложь) Экспорт
	
	Для каждого СтрокаТаб Из ТабРезультат Цикл
		Менеджер = РегистрыСведений.МоделированиеДвиженийИнвестиций.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Менеджер, СтрокаТаб);
		Менеджер.Записать();
	КонецЦикла;

КонецПроцедуры

Функция СфомироватьДокумент(СтрокаКорректировка, Отказ, Сценарий)
	
	ПроверятьЗаполнение = Истина;
	
		
	Если ЗначениеЗаполнено(СтрокаКорректировка.ПрямаяДоляВладения) 
		И ЗначениеЗаполнено(СтрокаКорректировка.Инвестор) 
		И ЗначениеЗаполнено(СтрокаКорректировка.ОбъектИнвестирования) Тогда
		
		Если СтрокаКорректировка.ПрямаяДоляВладения > 0 Тогда
			ДокументОбъект = Документы.ПоступлениеИнвестиций.СоздатьДокумент();
		Иначе 
			ДокументОбъект = Документы.ВыбытиеИнвестиций.СоздатьДокумент();
		КонецЕсли;
		Если Сценарий = Константы.СценарийОтчетностиКИК.Получить() Тогда
			ДокументОбъект.НалоговыйУчет = Истина;
			ДокументОбъект.МСФОУчет = Ложь;
		ИначеЕсли Сценарий = Константы.СценарийМСФО.Получить() Тогда
			ДокументОбъект.НалоговыйУчет = Ложь;
			ДокументОбъект.МСФОУчет = Истина;
		Иначе
			ДокументОбъект.Сценарий = Сценарий;
		КонецЕсли;
		ДокументОбъект.Заполнить(Неопределено);
		ЗаполнитьЗначенияСвойств(ДокументОбъект, СтрокаКорректировка);
		ДокументОбъект.ПрямаяДоля = ?(СтрокаКорректировка.ПрямаяДоляВладения < 0, -СтрокаКорректировка.ПрямаяДоляВладения, СтрокаКорректировка.ПрямаяДоляВладения);
		ДокументОбъект.Организация = СтрокаКорректировка.Инвестор;
		
		ДокументОбъект.УстановитьНовыйНомер();
		
	Иначе 
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураДействий = Новый Структура("РассчитатьОтношениеКГруппе");
	СтруктураДействий.Вставить("ЗаполнитьВалютуДокумента", Новый Структура("ЗаполнитьВалютуИзДоговора", Истина));
	СтруктураДействий.Вставить("ЗаполнитьСчетаДокумента", Новый Структура("ИзмененОбъектИнвестирования", Истина));
		
	КэшируемыеЗначения = Новый Структура("ВыбытиеИнвестиций", Ложь); 
	ИнвестицииКлиентСервер.ЗаполнитьДокумент(ДокументОбъект, СтруктураДействий, КэшируемыеЗначения);
		
	Попытка
		
		ДокументОбъект.Заблокировать();
		
		Если ПроверятьЗаполнение И ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Документ не доступен для проведения, т.к. требует дозаполнения: '") + ДокументОбъект);
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);		
		КонецЕсли;
		
		Отказ = Ложь;
		
	Исключение			
		
		Отказ = Истина;
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
		
	КонецПопытки;
	
	Если Отказ Или ДокументОбъект.Ссылка.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//СтрокаКорректировка.Документ = ДокументОбъект.Ссылка;
	Набор = РегистрыСведений.МоделированиеДвиженийИнвестиций.СоздатьНаборЗаписей();
	Набор.Отбор.Инвестор.Установить(ДокументОбъект.Организация);
	Набор.Отбор.ОбъектИнвестирования.Установить(ДокументОбъект.ОбъектИнвестирования);
	Набор.Отбор.Сценарий.Установить(ДокументОбъект.Сценарий);
		
	Возврат ДокументОбъект.Ссылка;

КонецФункции

Функция ПолучитьДокументыИнвестиций(Корректировки, Сценарий) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	т.Дата,
	|	т.Инвестор,
	|	т.ОбъектИнвестирования,
	|	т.ПрямаяДоляВладения КАК ПрямаяДоля,
	|	т.Инвестиции КАК Инвестиции,
	|	т.Количество КАК Количество,
	|	т.КоличествоПривилегированных КАК КоличествоПривилегированных,
	|	т.КоличествоВДоверительномУправлении КАК КоличествоВДоверительномУправлении,
	|	т.КоличествоГолосующих КАК КоличествоГолосующих,
	|	т.Описание,
	|	т.БалансоваяСтоимость КАК БалансоваяСтоимость,
	|	т.Контрагент,
	|	т.ДоговорКонтрагента
	|ПОМЕСТИТЬ втКорректировкиИсточник
	|ИЗ
	|	&Корректировки КАК т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	т.Дата,
	|	т.Инвестор,
	|	т.ОбъектИнвестирования,
	|	СУММА(т.ПрямаяДоля) КАК ПрямаяДоля,
	|	СУММА(т.Инвестиции) КАК Инвестиции,
	|	СУММА(т.Количество) КАК Количество,
	|	СУММА(т.КоличествоПривилегированных) КАК КоличествоПривилегированных,
	|	СУММА(т.КоличествоВДоверительномУправлении) КАК КоличествоВДоверительномУправлении,
	|	СУММА(т.КоличествоГолосующих) КАК КоличествоГолосующих,
	|	т.Описание,
	|	СУММА(т.БалансоваяСтоимость) КАК БалансоваяСтоимость,
	|	т.Контрагент,
	|	т.ДоговорКонтрагента
	|ПОМЕСТИТЬ втКорректировки
	|ИЗ
	|	втКорректировкиИсточник КАК т
	|
	|СГРУППИРОВАТЬ ПО
	|	т.Дата,
	|	т.Контрагент,
	|	т.Описание,
	|	т.Инвестор,
	|	т.ДоговорКонтрагента,
	|	т.ОбъектИнвестирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МоделированиеДвиженийИнвестиций.Инвестор, втКорректировки.Инвестор) КАК Инвестор,
	|	&Сценарий КАК Сценарий,
	|	ЕСТЬNULL(МоделированиеДвиженийИнвестиций.ОбъектИнвестирования, втКорректировки.ОбъектИнвестирования) КАК ОбъектИнвестирования,
	|	ЕСТЬNULL(МоделированиеДвиженийИнвестиций.Дата, втКорректировки.Дата) КАК Дата,
	|	ЕСТЬNULL(втКорректировки.ПрямаяДоля, МоделированиеДвиженийИнвестиций.ПрямаяДоляВладения) КАК ПрямаяДоля,
	|	ЕСТЬNULL(втКорректировки.Инвестиции, МоделированиеДвиженийИнвестиций.Инвестиции) КАК Инвестиции,
	|	ЕСТЬNULL(втКорректировки.Количество, МоделированиеДвиженийИнвестиций.Количество) КАК Количество,
	|	ЕСТЬNULL(втКорректировки.КоличествоПривилегированных, МоделированиеДвиженийИнвестиций.КоличествоПривилегированных) КАК КоличествоПривилегированных,
	|	ЕСТЬNULL(втКорректировки.КоличествоВДоверительномУправлении, МоделированиеДвиженийИнвестиций.КоличествоВДоверительномУправлении) КАК КоличествоВДоверительномУправлении,
	|	ЕСТЬNULL(втКорректировки.КоличествоГолосующих, МоделированиеДвиженийИнвестиций.КоличествоГолосующих) КАК КоличествоГолосующих,
	|	ЕСТЬNULL(втКорректировки.Описание, МоделированиеДвиженийИнвестиций.Описание) КАК Описание,
	|	ЕСТЬNULL(втКорректировки.БалансоваяСтоимость, МоделированиеДвиженийИнвестиций.БалансоваяСтоимость) КАК БалансоваяСтоимость,
	|	ЕСТЬNULL(втКорректировки.Контрагент, МоделированиеДвиженийИнвестиций.Контрагент) КАК Контрагент,
	|	ЕСТЬNULL(втКорректировки.ДоговорКонтрагента, МоделированиеДвиженийИнвестиций.ДоговорКонтрагента) КАК ДоговорКонтрагента
	|ИЗ
	|	втКорректировки КАК втКорректировки
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.МоделированиеДвиженийИнвестиций КАК МоделированиеДвиженийИнвестиций
	|		ПО (МоделированиеДвиженийИнвестиций.Инвестор = втКорректировки.Инвестор)
	|			И (МоделированиеДвиженийИнвестиций.ОбъектИнвестирования = втКорректировки.ОбъектИнвестирования)
	|			И (МоделированиеДвиженийИнвестиций.Сценарий = &Сценарий)
	|ГДЕ
	|	НЕ втКорректировки.Инвестор ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("Корректировки", Корректировки.Скопировать());
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьДоговорКонтрагента(НомерДоговора, НаименованиеДоговора, Организация, Контрагент)

	Если Не ЗначениеЗаполнено(НомерДоговора) Или Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Номер = &Номер");
	Запрос.УстановитьПараметр("Номер", НомерДоговора);	
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Возврат Результат.Выгрузить()[0].Договор;
	КонецЕсли;
	
	ИмяВидДоговора = ВстраиваниеУХКлиентСервер.ИмяРеквизитаВидДоговора();
	
	Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();	
	
	Договор.Наименование	= НаименованиеДоговора;
	Договор.Номер 			= НомерДоговора;
	Договор.Организация 	= Организация;
	Договор.Владелец 		= Контрагент;
	Договор[ИмяВидДоговора] = ДоговорыКонтрагентовВстраиваниеУХКлиентСервер.ПолучитьВидДоговораПрочие();
	
	Договор.УстановитьНовыйКод();
	
	Договор.Записать();
	
	Возврат Договор.Ссылка;	

КонецФункции

Функция ПолучитьСоответствиеОрганизаций(Таб, СоздаватьОрганизации = Ложь, ПоИНН = Ложь, ВыводитьСообщения = Истина)
	
	ТабПроверки = Таб.Скопировать(, "тИнвестор");
	ТабПроверки.Колонки.тИнвестор.Имя = "тИнвестиция";
	ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(Таб.Скопировать(, "тИнвестиция"), ТабПроверки);
	ТабПроверки.Свернуть("тИнвестиция");
	
	Результат = Новый Соответствие;
	
	ДопРеквизиты = Новый Структура;
	
	Для Каждого Источник Из ТабПроверки.ВыгрузитьКолонку("тИнвестиция") Цикл
		
		Если Результат.Получить(Источник) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПоИНН Тогда			
			Приемник = Справочники.Организации.НайтиПоРеквизиту("ИНН", Источник);
		Иначе	
			Приемник = Справочники.Организации.НайтиПоНаименованию(Источник, Истина);			
		КонецЕсли;
		
		Если СоздаватьОрганизации И Не ЗначениеЗаполнено(Приемник) Тогда			
			ТекстСообщения = Неопределено;
			
			ДопРеквизиты = Новый Структура;
			Если ПоИНН И СтрДлина(Источник) > 12 Тогда
				ДопРеквизиты.Вставить("ИностранныйНалоговыйРезидент", Истина); 
			Иначе 
				ДопРеквизиты.Вставить("ИспользоватьВРегламентированномУчете", Истина); 
			КонецЕсли;
			
			Приемник = ИнтеграцияВИБПереопределяемыйУХ.СоздатьОрганизацию(Источник, ПоИНН, ДопРеквизиты, ВыводитьСообщения);
			Если ВыводитьСообщения И Приемник.Пустая() Тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		Результат.Вставить(Источник, Приемник);

	КонецЦикла;
	
	Возврат Результат;
		
КонецФункции

Функция ПолучитьСоответствиеКонтрагентов(Таб, Создавать = Ложь, ПоИНН = Ложь, ВыводитьСообщения = Истина)
	
	ТабПроверки = Таб.Скопировать(, "тКонтрагент");	
	ТабПроверки.Свернуть("тКонтрагент");
	
	Результат = Новый Соответствие;
	
	Для Каждого Источник Из ТабПроверки.ВыгрузитьКолонку("тКонтрагент") Цикл
		
		Если Не ЗначениеЗаполнено(Источник) Или (Результат.Получить(Источник) <> Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПоИНН Тогда			
			Приемник = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", Источник);
		Иначе	
			Приемник = Справочники.Контрагенты.НайтиПоНаименованию(Источник);
		КонецЕсли;
		
		Если Создавать И Не ЗначениеЗаполнено(Приемник) Тогда
			ТекстСообщения = Неопределено;
			Приемник = ИнтеграцияВИБПереопределяемыйУХ.СоздатьКонтрагента(Источник, ПоИНН, ТекстСообщения);
			Если ВыводитьСообщения И Приемник.Пустая() Тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		Результат.Вставить(Источник, Приемник);

	КонецЦикла;
	
	Возврат Результат;
		
КонецФункции

Функция ПолучитьТаблицуИнвестицийИзФайла(ИмяФайла, ВыводитьСообщения = Истина)
	
	отСтрока = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(300);
	
	Таб = РегистрыСведений.МоделированиеДвиженийИнвестиций.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	
	Таб.Колонки.Добавить("тИнвестиция", 		отСтрока);
	Таб.Колонки.Добавить("тИнвестор", 			отСтрока);
	Таб.Колонки.Добавить("тКонтрагент", 		отСтрока);
	Таб.Колонки.Добавить("тДоговорКонтрагента", отСтрока);	
	Таб.Колонки.Добавить("НомерДоговора", 		отСтрока);
	
	ТабДок = Новый ТабличныйДокумент;
	Попытка
		РаширениеФайла = СтроковыеФункцииКлиентСерверУХ.РазложитьСтрокуВМассивПодстрок(ИмяФайла.Имя,".");
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РаширениеФайла[РаширениеФайла.ВГраница()]);
		ДанныеФайла = ПолучитьИзВременногоХранилища(ИмяФайла.Хранение);
		ДанныеФайла.Записать(ИмяВременногоФайла);		
		ТабДок.Прочитать(ИмяВременногоФайла);
		УдалитьФайлы(ИмяВременногоФайла);
		
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Таб;
	КонецПопытки;	
	
	Для Стр = 2 По ТабДок.ВысотаТаблицы Цикл
		
		Инвестор = СокрЛП(ТабДок.Область(Стр, 1).Текст);
		
		Если Не ЗначениеЗаполнено(Инвестор) Тогда			
			Продолжить;// новый пример			
		КонецЕсли;
		
		СтрокаТаб = Таб.Добавить();
		СтрокаТаб.тИнвестор 							= СокрЛП(	ТабДок.Область(Стр, 1).Текст);
		СтрокаТаб.тИнвестиция 							= СокрЛП(	ТабДок.Область(Стр, 2).Текст);		
		СтрокаТаб.ПрямаяДоляВладения					= Числом(	ТабДок.Область(Стр, 3).Текст, ВыводитьСообщения);
		СтрокаТаб.Дата									= Датой(	ТабДок.Область(Стр, 4).Текст, ВыводитьСообщения);
		СтрокаТаб.Инвестиции							= Числом(	ТабДок.Область(Стр, 5).Текст, ВыводитьСообщения);
		СтрокаТаб.Количество							= Числом(	ТабДок.Область(Стр, 6).Текст, ВыводитьСообщения);
		СтрокаТаб.КоличествоПривилегированных			= Числом(	ТабДок.Область(Стр, 7).Текст, ВыводитьСообщения);
		СтрокаТаб.КоличествоВДоверительномУправлении	= Числом(	ТабДок.Область(Стр, 8).Текст, ВыводитьСообщения);
		СтрокаТаб.КоличествоГолосующих					= Числом(	ТабДок.Область(Стр, 9).Текст, ВыводитьСообщения);
		СтрокаТаб.Описание								= СокрЛП(	ТабДок.Область(Стр, 10).Текст);
		СтрокаТаб.БалансоваяСтоимость					= Числом(	ТабДок.Область(Стр, 11).Текст, ВыводитьСообщения);
		СтрокаТаб.тКонтрагент							= СокрЛП(	ТабДок.Область(Стр, 12).Текст);
		СтрокаТаб.тДоговорКонтрагента					= СокрЛП(	ТабДок.Область(Стр, 13).Текст);		
		СтрокаТаб.НомерДоговора							= СокрЛП(	ТабДок.Область(Стр, 14).Текст);		
		
	КонецЦикла;
	
	Возврат Таб;

КонецФункции

Функция Датой(СтрокаИсточник, ВыводитьСообщения = Истина, Разделитель = ".")

	Если СтрокаИсточник = "" Тогда
		Возврат Дата(1,1,1);
	КонецЕсли;
	
	СтрокаИсточник = СтрЗаменить(СтрокаИсточник, ":", ".");
	СтрокаИсточник = СтрЗаменить(СтрокаИсточник, " ", ".");
	
	Цифры = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаИсточник, Разделитель);
	Если Цифры.ВГраница() < 2 Тогда
		Возврат Дата(1,1,1);
	КонецЕсли;
	
	Попытка
		
		Результат = ?(СтрДлина(Цифры[2]) = 2, "20"+Цифры[2], Цифры[2]) 
					+ Формат(Цифры[1], "ЧЦ=2; ЧВН=;") 
					+ Формат(Цифры[0], "ЧЦ=2; ЧВН=;");
		Возврат Дата(Результат);
	
	Исключение
		
		Если ВыводитьСообщения Тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Не удалось преобразовать в дату: '") + СтрокаИсточник);
		КонецЕсли;
		
		Возврат Дата(1,1,1);
		
	КонецПопытки;
	
КонецФункции

Функция Числом(СтрокаИсточник, ВыводитьСообщения = Истина)

	Если СтрокаИсточник = "" Тогда
		Возврат 0;
	КонецЕсли;
	
	Попытка
		
		Возврат Число(СтрокаИсточник);
		
	Исключение
		
		Если ВыводитьСообщения Тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Не удалось преобразовать в число: '") + СтрокаИсточник);
		КонецЕсли;
		
		Возврат 0;
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#КонецЕсли