
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, Параметры, "ПартияПроизводства, Этап");
	
	// Данные партии
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ПартияПроизводства,
		"Документ, Документ.Номер, Назначение, Код");
	Объект.Распоряжение = ЗначенияРеквизитов.Документ;
	Объект.НазначениеПродукция = ЗначенияРеквизитов.Назначение;
	
	ЭтаФорма.Заголовок = СтрШаблон(НСтр("ru = 'Изменение партии %1';
										|en = 'Lot change %1'"),
		ПредставлениеПартии(ЗначенияРеквизитов.Код, ЗначенияРеквизитов.ДокументНомер));
	
	ДанныеПартии = Документы.ЭтапПроизводства2_2.ДанныеПартииПроизводства(
		Объект.Распоряжение,
		Объект.НазначениеПродукция,
		Объект.ПартияПроизводства);
	ЗаполнитьЗначенияСвойств(Объект, ДанныеПартии,
		"Организация,
		|ХозяйственнаяОперация,
		|Партнер,
		|Договор,
		|НаправлениеДеятельности,
		|Спецификация,
		|ТипПроизводственногоПроцесса,
		|ПодразделениеДиспетчер,
		|НачалоПроизводства,
		|ОсновноеИзделиеНоменклатура,
		|ОсновноеИзделиеХарактеристика,
		|Номенклатура,
		|Характеристика,
		|Количество");
	
	ИзделиеНоменклатураПредставление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ОсновноеИзделиеНоменклатура, "Представление");
	Если ЗначениеЗаполнено(ДанныеПартии.ОсновноеИзделиеХарактеристика) Тогда
		ИзделиеХарактеристикаПредставление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ОсновноеИзделиеХарактеристика, "Представление");
	КонецЕсли;
	
	Справочники.УпаковкиЕдиницыИзмерения.ОтобразитьИнформациюОЕдиницеХранения(
		Объект.ОсновноеИзделиеНоменклатура,
		Элементы.УпаковкаПартии);
	
	// Расчет этапа
	Если Объект.Этап.Пустая() Тогда
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Этапы.Ссылка КАК Этап
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК Этапы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.Последователи КАК ЭтапыПоследователи
			|		ПО Этапы.Ссылка = ЭтапыПоследователи.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафик
			|		ПО Этапы.Ссылка = НормативныйГрафик.ЭтапПроизводства
			|ГДЕ
			|	Этапы.ПартияПроизводства = &ПартияПроизводства
			|	И Этапы.Проведен
			|	И Этапы.Статус В (
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
			|	И ЭтапыПоследователи.ТипСвязи = 0
			|	И НЕ ЭтапыПоследователи.Этап.Статус В (
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
			|
			|УПОРЯДОЧИТЬ ПО
			|	НормативныйГрафик.ДлительностьДоЗапуска УБЫВ");
		Запрос.УстановитьПараметр("ПартияПроизводства", Объект.ПартияПроизводства);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.Этап = Выборка.Этап;
		КонецЕсли;
		
	КонецЕсли;
	
	// Данные этапа
	ДанныеЭтапа = ДанныеЭтапа(Объект.ПартияПроизводства, Объект.Этап);
	Если ДанныеЭтапа = Неопределено Тогда
		Объект.КоличествоУпаковок = Объект.Количество;
	Иначе
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеЭтапа, "ЭтапПредставление, ЭтапСпецификации, Произведено, ИзделиеУпаковкаПредставление");
		ЗаполнитьЗначенияСвойств(Объект, ДанныеЭтапа, "Подразделение, СоздатьЭтап, Упаковка");
		Объект.КоличествоУпаковок = ?(ДанныеЭтапа.КоэффициентУпаковки <> 0,
			Объект.Количество/ДанныеЭтапа.КоэффициентУпаковки, 0);
	КонецЕсли;
	
	// Параметры распределения затрат
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	МАКСИМУМ(Таблица.СпособРаспределенияЗатратНаВыходныеИзделия) КАК Значение
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.ПартияПроизводства = &ПартияПроизводства
		|	И НЕ Таблица.ПометкаУдаления
		|	И Таблица.НомерСледующегоЭтапа = 0 //ЭтоВыпускающийЭтап()
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Таблица.СпособРаспределенияЗатратНаВыходныеИзделия) = 1");
	Запрос.УстановитьПараметр("ПартияПроизводства", Объект.ПартияПроизводства);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Объект.СпособРаспределенияЗатратНаВыходныеИзделия = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Объект.СпособРаспределенияЗатратНаВыходныеИзделия = Выборка.Значение;
	КонецЕсли;
	
	ПараметрыРедактированияЭтапа = Новый ФиксированнаяСтруктура(
		Обработки.ДелениеПартииПроизводства.ПараметрыРедактированияЭтапа());
	ПараметрыРаспределенияЗатрат = Новый ФиксированнаяСтруктура(
		Обработки.ДелениеПартииПроизводства.ПараметрыРаспределенияЗатрат(Объект.СпособРаспределенияЗатратНаВыходныеИзделия));
	
	// Параметры указания серий
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(
		НоменклатураСервер.ПараметрыУказанияСерий(Объект, Обработки.ДелениеПартииПроизводства));
		
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	Элементы.Назначение.СвязиПараметровВыбора = Элементы.ПартииНазначение.СвязиПараметровВыбора;
	Элементы.Назначение.ПараметрыВыбора = Элементы.ПартииНазначение.ПараметрыВыбора;
	Элементы.Назначение.ФормаВыбора = Элементы.ПартииНазначение.ФормаВыбора;
	
	// Инициализация прочих реквизитов
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.Партии);
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций(
		Объект,
		Обработки.ДелениеПартииПроизводства);
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораСпецификаций(
		Элементы.ПродолжитьСпецификация,
		ПараметрыВыбораСпецификаций);
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораСпецификаций(
		Элементы.ПартииПродолжитьСпецификация,
		ПараметрыВыбораСпецификаций);
	
	ПараметрыВыбораСтатейИАналитик = Обработки.ДелениеПартииПроизводства.ПараметрыВыбораСтатейИАналитик(Объект);
	ДоходыИРасходыСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ПараметрыНастройки = Обработки.ДелениеПартииПроизводства.ПараметрыНастройкиСчетовУчета();
	НастройкаСчетовУчетаСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыНастройки);
	
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	СкладПоУмолчанию = ОбщегоНазначенияУТ.ПолучитьПроверитьСкладПоУмолчанию();
	ИспользоватьСписаниеНаРасходы =
		Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья
		И (ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов")
			ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов"));
	ИспользоватьУчетПрочихАктивовПассивов = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов");
	
	ЦветВыбраннаяСсылка = ЦветаСтиля.ЦветТекстаФормы;
	ЦветНеВыбраннаяСсылка = ЦветаСтиля.ГиперссылкаЦвет;
	
	// Установка действия по параметрам
	Если Параметры.СократитьУвеличить Тогда
		Объект.Действие = Действия().Сократить;
		КоличествоПартий = 1;
		ДобавитьПартию(0);
		Объект.Партии[0].КоличествоУпаковокПартии = Параметры.КоличествоУпаковок;
		Объект.Партии[0].УпаковкаПартии = Параметры.Упаковка;
		Объект.Партии[0].КоличествоПартии = РассчитатьКоличествоЕдиницПартии(
			Объект.ОсновноеИзделиеНоменклатура,
			Параметры.Упаковка,
			Параметры.КоличествоУпаковок);
	ИначеЕсли Параметры.Отменить Тогда
		Объект.Действие = Действия().Отменить;
	ИначеЕсли Параметры.Разделить Тогда
		Объект.Действие = Действия().Разделить;
		КоличествоПартий = 2;
	КонецЕсли;
	
	// Количество партий
	Если КоличествоПартий = 0 Тогда
		КоличествоПартий = 1;
	КонецЕсли;
	ТекущаяПартия = 0;
	ПредыдущаяПартия = ИндексыПартий().Неопределено;
	КоличествоПартийРазделить = 2;
	
	// Настройка элементов
	Элементы.Партия100.Гиперссылка = Истина;
	Элементы.Партия100.ЦветТекста = ЦветНеВыбраннаяСсылка;
	
	НастроитьСоставПартий();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриНачалеРедактированияПартии();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВводДолиСтоимости" Тогда
		
		ОбработкаВводаДолиСтоимости(Элементы.Партии.ТекущиеДанные, ВыбранноеЗначение);
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Очистить();
	
	Если Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Действие не может быть выполнено для заказа с типом производственного процесса ""Без спецификаций""';
				|en = 'The action cannot be executed for an order with ""No BOM"" type of production process.'"),,,,
			Отказ);
		Возврат;
	КонецЕсли;
	
	Действия = Действия();
	
	СообщенияШапка = Новый СписокЗначений;
	СообщенияТаблица = Новый СписокЗначений;
		
	ИмяСписка = НСтр("ru = 'Партии';
					|en = 'Lots'");
	СтатусыСерияНеУказана = НоменклатураКлиентСервер.СтатусыСерийСерияНеУказана();
	
	Для Индекс = 0 По Объект.Партии.Количество()-1 Цикл
		
		Строка = Объект.Партии[Индекс];
		
		ЕстьВыпуск = Объект.Действие <> Действия.Сократить
			И НЕ Объект.Этап.Пустая();
		
		// Номенклатура
		Если Строка.Номенклатура.Пустая()
			И ЕстьВыпуск Тогда
			
			СообщенияТаблица.Добавить(
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Партии", Строка.НомерСтроки, "Номенклатура"),
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Заполнение", НСтр("ru = 'Номенклатура';
													|en = 'Items'"), Строка.НомерСтроки, ИмяСписка));
			
			Если Индекс = ТекущаяПартия Тогда
				
				СообщенияШапка.Добавить(
					"Элементы.Партии.ТекущиеДанные.Номенклатура",
					ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Номенклатура';
																									|en = 'Items'")));
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Характеристика
		Если Строка.Характеристика.Пустая()
			И Строка.ХарактеристикиИспользуются
			И ЕстьВыпуск Тогда
			
			СообщенияТаблица.Добавить(
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Партии", Строка.НомерСтроки, "Характеристика"),
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Заполнение", НСтр("ru = 'Характеристика';
													|en = 'Variant'"), Строка.НомерСтроки, ИмяСписка));
			
			Если Индекс = ТекущаяПартия Тогда
				
				СообщенияШапка.Добавить(
					"Элементы.Партии.ТекущиеДанные.Характеристика",
					ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Характеристика';
																									|en = 'Variant'")));
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Серии
		Если СтатусыСерияНеУказана.Найти(Строка.СтатусУказанияСерий) <> Неопределено
			И ЕстьВыпуск Тогда
			
			СообщенияТаблица.Добавить(
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Партии", Строка.НомерСтроки, "Серия"),
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Корректность", НСтр("ru = 'Серия';
													|en = 'Batch'"), Строка.НомерСтроки, ИмяСписка));
			
			Если Индекс = ТекущаяПартия Тогда
				
				СообщенияШапка.Добавить(
					"Элементы.Партии.ТекущиеДанные.Серия",
					ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Корректность", НСтр("ru = 'Серия';
																									|en = 'Batch'")));
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Количество упаковок
		Если Строка.КоличествоУпаковок = 0
			И ЕстьВыпуск Тогда
			
			СообщенияТаблица.Добавить(
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Партии", Строка.НомерСтроки, "КоличествоУпаковок"),
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Заполнение", НСтр("ru = 'Количество';
													|en = 'Quantity'"), Строка.НомерСтроки, ИмяСписка));
			
			Если Индекс = ТекущаяПартия Тогда
				
				СообщенияШапка.Добавить(
					"Элементы.Партии.ТекущиеДанные.КоличествоУпаковок",
					ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Количество';
																									|en = 'Quantity'")));
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Количество
		Если Строка.Количество = 0
			И Строка.КоличествоУпаковок <> 0
			И ЕстьВыпуск Тогда
			
			СообщенияТаблица.Добавить(
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Партии", Строка.НомерСтроки, "КоличествоУпаковок"),
				 СтрШаблон(
				 	НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения в строке %1 списка ""%2""';
							|en = 'Zero quantity detected when converted to storage unit in the line%1 of the list ""%2""'"),
					Строка.НомерСтроки,
					ИмяСписка));
			
			Если Индекс = ТекущаяПартия Тогда
				
				СообщенияШапка.Добавить(
					"Элементы.Партии.ТекущиеДанные.КоличествоУпаковок",
					НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения';
						|en = 'Zero quantity is detected when converted to storage unit'"));
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Доля стоимости
		Если Строка.ДоляСтоимости = 0
			И Объект.Партии.Количество() > 1
			И НЕ Объект.Этап.Пустая() Тогда
			
			СообщенияТаблица.Добавить(
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Партии", Строка.НомерСтроки, "ДоляСтоимости"),
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Заполнение", НСтр("ru = 'Доля стоимости';
													|en = 'Cost share'"), Строка.НомерСтроки, ИмяСписка));
			
			Если Индекс = ТекущаяПартия Тогда
				
				СообщенияШапка.Добавить(
					"Элементы.Партии.ТекущиеДанные.ДоляСтоимости",
					ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Доля стоимости';
																									|en = 'Cost share'")));
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Получатель
		Если НЕ ЗначениеЗаполнено(Строка.Получатель)
			И НЕ Строка.СписатьНаРасходы
			И ЕстьВыпуск Тогда
			
			СообщенияТаблица.Добавить(
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Партии", Строка.НомерСтроки, "Получатель"),
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Заполнение", НСтр("ru = 'Получатель';
													|en = 'Recipient'"), Строка.НомерСтроки, ИмяСписка));
			
			Если Индекс = ТекущаяПартия Тогда
				
				СообщенияШапка.Добавить(
					"Элементы.Партии.ТекущиеДанные.Получатель",
					ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Получатель';
																									|en = 'Recipient'")));
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Статья расходов
		Если НЕ ЗначениеЗаполнено(Строка.СтатьяРасходов)
			И Строка.СписатьНаРасходы
			И ЕстьВыпуск Тогда
			
			СообщенияТаблица.Добавить(
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Партии", Строка.НомерСтроки, "СтатьяРасходов"),
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Заполнение", НСтр("ru = 'Статья расходов';
													|en = 'Expense item'"), Строка.НомерСтроки, ИмяСписка));
			
			Если Индекс = ТекущаяПартия Тогда
				
				СообщенияШапка.Добавить(
					"Элементы.Партии.ТекущиеДанные.СтатьяРасходов",
					ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Статья расходов';
																									|en = 'Expense item'")));
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Размер партии (количество упаковок)
		Если Строка.КоличествоУпаковокПартии = 0
			И 	(
				Объект.Действие = Действия.Сократить
				ИЛИ (
					Объект.Действие = Действия.Разделить
					И 	(
						Объект.Этап.Пустая()
						ИЛИ Строка.ПродолжитьОбработку
						)
					)
				) Тогда
			
			СообщенияТаблица.Добавить(
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Партии", Строка.НомерСтроки, "КоличествоУпаковокПартии"),
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Заполнение", НСтр("ru = 'Размер партии';
													|en = 'Lot size'"), Строка.НомерСтроки, ИмяСписка));
			
			Если Индекс = ТекущаяПартия Тогда
				
				СообщенияШапка.Добавить(
					"Элементы.Партии.ТекущиеДанные.КоличествоУпаковокПартии",
					ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Размер партии';
																									|en = 'Lot size'")));
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Размер партии (количество)
		Если Строка.КоличествоПартии = 0
			И Строка.КоличествоУпаковокПартии <> 0
			И (Объект.Действие = Действия.Сократить
				ИЛИ Объект.Действие = Действия.Разделить) Тогда
			
			СообщенияТаблица.Добавить(
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Партии", Строка.НомерСтроки, "КоличествоУпаковокПартии"),
				 СтрШаблон(
				 	НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения в строке %1 списка ""%2""';
							|en = 'Zero quantity detected when converted to storage unit in the line%1 of the list ""%2""'"),
					Строка.НомерСтроки,
					ИмяСписка));
			
			Если Индекс = ТекущаяПартия Тогда
				
				СообщенияШапка.Добавить(
					"Элементы.Партии.ТекущиеДанные.КоличествоУпаковокПартии",
					НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения';
						|en = 'Zero quantity is detected when converted to storage unit'"));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ Объект.Этап.Пустая()
			И Объект.Действие = Действия.Разделить
			И Строка.ПродолжитьОбработку
			И Строка.ПродолжитьПоСпецификации Тогда
			
			// Продолжить - спецификация
			Если Строка.ПродолжитьСпецификация.Пустая() Тогда
				
				СообщенияТаблица.Добавить(
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"Объект.Партии", Строка.НомерСтроки, "ПродолжитьСпецификация"),
					ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Колонка", "Заполнение", НСтр("ru = 'Спецификация';
														|en = 'Bill of materials'"), Строка.НомерСтроки, ИмяСписка));
				
				Если Индекс = ТекущаяПартия Тогда
					
					СообщенияШапка.Добавить(
						"Элементы.Партии.ТекущиеДанные.ПродолжитьСпецификация",
						ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Спецификация';
																										|en = 'Bill of materials'")));
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Продолжить - этап
			Если Строка.ПродолжитьЭтап.Пустая() Тогда
				
				СообщенияТаблица.Добавить(
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"Объект.Партии", Строка.НомерСтроки, "ПродолжитьЭтап"),
					ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Колонка", "Заполнение", НСтр("ru = 'Этап';
														|en = 'Stage'"), Строка.НомерСтроки, ИмяСписка));
				
				Если Индекс = ТекущаяПартия Тогда
					
					СообщенияШапка.Добавить(
						"Элементы.Партии.ТекущиеДанные.ПродолжитьЭтап",
						ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Этап';
																										|en = 'Stage'")));
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Подразделение
		Если Строка.Подразделение.Пустая()
			И ЕстьВыпуск Тогда
			
			СообщенияТаблица.Добавить(
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Партии", Строка.НомерСтроки, "Подразделение"),
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Заполнение", НСтр("ru = 'Подразделение';
													|en = 'Business unit'"), Строка.НомерСтроки, ИмяСписка));
			
			Если Индекс = ТекущаяПартия Тогда
				
				СообщенияШапка.Добавить(
					"Элементы.Партии.ТекущиеДанные.Подразделение",
					ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Подразделение';
																									|en = 'Business unit'")));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СообщенияШапка.Количество() = СообщенияТаблица.Количество() Тогда
		
		Для каждого Элемент Из СообщенияШапка Цикл
			ОбщегоНазначения.СообщитьПользователю(Элемент.Представление,, Элемент.Значение,, Отказ);
		КонецЦикла;
		
	Иначе
		
		Для каждого Элемент Из СообщенияТаблица Цикл
			ОбщегоНазначения.СообщитьПользователю(Элемент.Представление,, Элемент.Значение,, Отказ);
		КонецЦикла;
		
		// Переключение на страницу "Все партии"
		Если ТекущаяПартия <> ИндексыПартий().ВсеПартии Тогда
			ПредыдущаяПартия = ТекущаяПартия;
			ТекущаяПартия = ИндексыПартий().ВсеПартии;
			НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ТекущаяПартия");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИзделиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#ПоказатьИзделие" Тогда
		
		ПоказатьЗначение(, Объект.ОсновноеИзделиеНоменклатура);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "#ПоказатьХарактеристикуИзделия" Тогда
		
		ПоказатьЗначение(, Объект.ОсновноеИзделиеХарактеристика);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПометкаУдаления", Ложь);
	Отбор.Вставить("ПартияПроизводства", Объект.ПартияПроизводства);
	Отбор.Вставить("Распоряжение", Объект.Распоряжение);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.Этап);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму(
		"Документ.ЭтапПроизводства2_2.ФормаВыбора",
		ПараметрыФормы,
		ЭтаФорма,,,,
		Новый ОписаниеОповещения("ЭтапПредставлениеВыбор", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапПредставлениеВыбор(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		Объект.Этап = РезультатЗакрытия;
		СписокРеквизитов = "Этап";
		
		ПриИзмененииЭтапа(СписокРеквизитов, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.Этап = Неопределено;
	СписокРеквизитов = "Этап";
	
	Если Объект.Действие = Действия().Продолжить Тогда
		Объект.Действие = Действия().Сократить;
		СписокРеквизитов = СписокРеквизитов + ", Действие";
	КонецЕсли;
	
	ПриИзмененииЭтапа(СписокРеквизитов, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЭтапа(СписокРеквизитов, КэшированныеЗначения)
	
	ДанныеЭтапа = ДанныеЭтапа(Объект.ПартияПроизводства, Объект.Этап);
	
	Если ДанныеЭтапа <> Неопределено Тогда
		
		ДанныеДоИзменения = Новый Структура("Подразделение, Произведено", Объект.Подразделение, Произведено);
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеЭтапа, "ЭтапПредставление, ЭтапСпецификации, Произведено, ИзделиеУпаковкаПредставление");
		ЗаполнитьЗначенияСвойств(Объект, ДанныеЭтапа, "Подразделение, СоздатьЭтап, Упаковка");
		Объект.КоличествоУпаковок = ?(ДанныеЭтапа.КоэффициентУпаковки <> 0,
			Объект.Количество/ДанныеЭтапа.КоэффициентУпаковки, 0);
		
		СписокРеквизитов = СписокРеквизитов + ", КоличествоУпаковок, СоздатьЭтап";
		
		Если Произведено <> ДанныеДоИзменения.Произведено Тогда
			
			Для каждого Строка Из Объект.Партии Цикл
				Строка.Произведено = Произведено;
			КонецЦикла;
			Для каждого Строка Из Объект.Серии Цикл
				Строка.Произведено = Произведено;
			КонецЦикла;
			
			Если ТекущаяПартия <> ИндексыПартий().ВсеПартии Тогда
				НоменклатураКлиентСервер.ОбновитьКешированныеЗначенияДляУчетаСерий(
					Объект.Партии.НайтиПоИдентификатору(Элементы.Партии.ТекущаяСтрока),
					КэшированныеЗначения,
					ПараметрыУказанияСерий);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.Подразделение <> ДанныеДоИзменения.Подразделение Тогда
			Для каждого Строка Из Объект.Партии Цикл
				Строка.Подразделение = Объект.Подразделение;
			КонецЦикла;
			Для каждого Строка Из Объект.Серии Цикл
				Строка.Подразделение = Объект.Подразделение;
			КонецЦикла;
		КонецЕсли;
		
		Если Произведено <> ДанныеДоИзменения.Произведено
			ИЛИ Объект.Подразделение <> ДанныеДоИзменения.Подразделение Тогда
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
			СписокРеквизитов = СписокРеквизитов + ", СтатусыУказанияСерий";
		КонецЕсли;
		
		Для каждого Строка Из Объект.Партии.НайтиСтроки(Новый Структура("ПродолжитьСпецификация", Объект.Спецификация)) Цикл
			Строка.ПродолжитьЭтап = ЭтапСпецификации;
		КонецЦикла;
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, СписокРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ Объект.Этап.Пустая() Тогда
		ПоказатьЗначение(, Объект.Этап);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеСократитьПриИзменении(Элемент)
	
	КоличествоПартий = 1;
	ПриИзмененииДействия("Действие, КоличествоПартий");
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОтменитьПриИзменении(Элемент)
	
	КоличествоПартий = 1;
	ПриИзмененииДействия("Действие, КоличествоПартий");
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРазделитьПриИзменении(Элемент)
	
	КоличествоПартий = КоличествоПартийРазделить;
	ПриИзмененииДействия("Действие, КоличествоПартий");
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПродолжитьПриИзменении(Элемент)
	
	Объект.Партии[0].УпаковкаПартии = Объект.Упаковка;
	Объект.Партии[0].КоличествоУпаковокПартии = Объект.КоличествоУпаковок;
	Объект.Партии[0].КоличествоПартии = Объект.Количество;
	
	КоличествоПартий = 1;
	
	ПриИзмененииДействия("Действие, КоличествоПартий");
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПартийРазделитьПриИзменении(Элемент)
	
	КоличествоПартий = КоличествоПартийРазделить;
	ПриИзмененииДействия("КоличествоПартийРазделить, КоличествоПартий");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПартияНажатие(Элемент)
	
	ПредыдущаяПартия = ТекущаяПартия;
	ТекущаяПартия = Число(Прав(Элемент.Имя, 3));
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ТекущаяПартия");
	
	Если ТекущаяПартия <> ИндексыПартий().ВсеПартии Тогда
		
		ПриНачалеРедактированияПартии();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении(Элемент)
	
	// Изменение реквизита в ТЧ см ПартииХарактеристикаПриИзменении
	
	РассчитатьПроцентЗатрат = ПроизводствоКлиент.НеобходимоРассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(
		Элементы.Партии,
		ПараметрыРаспределенияЗатрат,
		РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы.Партии, ЭтаФорма));
	
	ОбновитьСтатусыСерий = НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Партии, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	ХарактеристикаПриИзмененииНаСервере(РассчитатьПроцентЗатрат, ОбновитьСтатусыСерий, КэшированныеЗначения);
	
	Если РассчитатьПроцентЗатрат Тогда
		РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.Партии, ЭтаФорма);
	КонецЕсли;
	
	Если ОбновитьСтатусыСерий Тогда
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элементы.Партии, КэшированныеЗначения, ПараметрыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ХарактеристикаПриИзмененииНаСервере(РассчитатьПроцентЗатрат, ОбновитьСтатусыСерий, КэшированныеЗначения)
	
	ТекущаяСтрока = Объект.Партии.НайтиПоИдентификатору(Элементы.Партии.ТекущаяСтрока);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	СписокРеквизитов = "";
	
	Если РассчитатьПроцентЗатрат Тогда
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		СписокРеквизитов = СписокРеквизитов
			+ ?(ПустаяСтрока(СписокРеквизитов), "", ",")
			+ "ДоляСтоимостиПроцент";
	КонецЕсли;
	
	Если ОбновитьСтатусыСерий Тогда
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(КэшированныеЗначения);
		СписокРеквизитов = СписокРеквизитов
			+ ?(ПустаяСтрока(СписокРеквизитов), "", ",")
			+ "СтатусыУказанияСерий";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СписокРеквизитов) Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, СписокРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПриИзменении(Элемент)
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
			Элементы.Партии, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(КэшированныеЗначения);
		
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элементы.Партии, КэшированныеЗначения, ПараметрыУказанияСерий);
		
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "СтатусыУказанияСерий");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоУпаковокПриИзменении(Элемент)
	
	// Изменение реквизита в ТЧ см ПартииКоличествоУпаковокПриИзменении
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Элементы.Партии.ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьПроцентЗатрат = ПроизводствоКлиент.НеобходимоРассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(
		Элементы.Партии,
		ПараметрыРаспределенияЗатрат,
		РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы.Партии, ЭтаФорма));
	
	ОбновитьСтатусыСерий = НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Партии, КэшированныеЗначения, ПараметрыУказанияСерий);
		
	Если РассчитатьПроцентЗатрат ИЛИ ОбновитьСтатусыСерий Тогда
		
		КоличествоУпаковокПриИзмененииНаСервере(РассчитатьПроцентЗатрат, ОбновитьСтатусыСерий, КэшированныеЗначения);
	
		Если РассчитатьПроцентЗатрат Тогда
			РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.Партии, ЭтаФорма);
		КонецЕсли;
		
		Если ОбновитьСтатусыСерий Тогда
			НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элементы.Партии, КэшированныеЗначения, ПараметрыУказанияСерий);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КоличествоУпаковокПриИзмененииНаСервере(РассчитатьПроцентЗатрат, ОбновитьСтатусыСерий, КэшированныеЗначения)
	
	СписокРеквизитов = "";
	
	Если РассчитатьПроцентЗатрат Тогда
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		СписокРеквизитов = СписокРеквизитов
			+ ?(ПустаяСтрока(СписокРеквизитов), "", ",")
			+ "ДоляСтоимостиПроцент";
	КонецЕсли;
	
	Если ОбновитьСтатусыСерий Тогда
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(КэшированныеЗначения);
		СписокРеквизитов = СписокРеквизитов
			+ ?(ПустаяСтрока(СписокРеквизитов), "", ",")
			+ "СтатусыУказанияСерий";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СписокРеквизитов) Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, СписокРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	// Изменение реквизита в ТЧ см ПартииПолучательПриИзменении
	
	ОбновитьСтатусыСерий = НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Партии, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	ПолучательПриИзмененииНаСервере(ОбновитьСтатусыСерий, КэшированныеЗначения);
	
	Если ОбновитьСтатусыСерий Тогда
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элементы.Партии, КэшированныеЗначения, ПараметрыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучательПриИзмененииНаСервере(ОбновитьСтатусыСерий, КэшированныеЗначения)
	
	ТекущаяСтрока = Объект.Партии.НайтиПоИдентификатору(Элементы.Партии.ТекущаяСтрока);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипСклада",
		Новый Структура("Склад, ТипСклада", "Получатель", "ТипСклада"));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
		Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Получатель, ПараметрыУказанияСерий));
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбновитьСтатусыСерий Тогда
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(КэшированныеЗначения);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "СтатусыУказанияСерий");
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРаспределенияЗатратНаВыходныеИзделияПриИзменении(Элемент)
	
	ПриИзмененииСпособаРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоляСтоимостиПроцентНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВводаДолиСтоимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьОшибкиЗаполненияДолиСтоимостиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВводаДолиСтоимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоляСтоимостиПриИзменении(Элемент)
	
	Если ПроизводствоКлиент.НеобходимоРассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(
			Элементы.Партии,
			ПараметрыРаспределенияЗатрат,
			РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы.Партии, ЭтаФорма)) Тогда
		
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.Партии, ЭтаФорма);
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ДоляСтоимостиПроцент");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеВыпускаФормаПриИзменении(Элемент)
	
	// Изменение реквизита в ТЧ см ПартииНаправлениеВыпускаФормаПриИзменении
	
	ИзмененПолучатель = Ложь;
	ИзмененоНазначение = Ложь;
	
	ПриИзмененииНаправленияВыпускаФорма(ЭтаФорма, ИзмененПолучатель, ИзмененоНазначение);
	
	Если ИзмененПолучатель Тогда
		ПолучательПриИзменении(Неопределено);
	КонецЕсли;
	Если ИзмененоНазначение Тогда
		НазначениеПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элементы.ПартииСтатьяРасходов);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "СтатьяРасходов");
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Статья",          Элементы.Партии.ТекущиеДанные.СтатьяРасходов);
	ПараметрыФормы.Вставить("ПараметрыВыбора", Элемент.ПараметрыВыбора);
	ПараметрыФормы.Вставить("ОграничениеТипа", Элемент.ОграничениеТипа);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтатьи", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтраженияОперацииНажатие(Элемент, СтандартнаяОбработка)
	
	НастройкаСчетовУчетаКлиент.ПриНажатии(
		ЭтотОбъект,
		Элементы.ПартииПредставлениеОтраженияОперации,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПоСпецификацииПриИзменении(Элемент)
	
	Элементы.Партии.ТекущиеДанные.ПродолжитьПоСпецификации = Истина;
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПродолжитьПоСпецификации");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПоТекущейПартииПриИзменении(Элемент)
	
	Элементы.Партии.ТекущиеДанные.ПродолжитьПоСпецификации = Ложь;
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПродолжитьПоСпецификации");
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоУпаковокПартииПриИзменении(Элемент)
	
	Элементы.Партии.ТекущиеДанные.КоличествоПартии = РассчитатьКоличествоЕдиницПартии(
		Объект.ОсновноеИзделиеНоменклатура,
		Элементы.Партии.ТекущиеДанные.УпаковкаПартии,
		Элементы.Партии.ТекущиеДанные.КоличествоУпаковокПартии);
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПартииПриИзменении(Элемент)
	
	Элементы.Партии.ТекущиеДанные.КоличествоПартии = РассчитатьКоличествоЕдиницПартии(
		Объект.ОсновноеИзделиеНоменклатура,
		Элементы.Партии.ТекущиеДанные.УпаковкаПартии,
		Элементы.Партии.ТекущиеДанные.КоличествоУпаковокПартии);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСпецификацииПриИзменении(Элемент)
	
	Элементы.Партии.ТекущиеДанные.ЗаполнитьПоСпецификации = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьПоКоэффициентуПриИзменении(Элемент)
	
	Элементы.Партии.ТекущиеДанные.ЗаполнитьПоСпецификации = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПартии

&НаКлиенте
Процедура ПартииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Партии.ТекущиеДанные;
	
	Если (Поле = Элементы.ПартииСерия 
			ИЛИ Поле = Элементы.ПартииСтатусУказанияСерий)
		И ТекущиеДанные.СтатусУказанияСерий > 0
		И ТекущиеДанные.СтатусУказанияСерий <= 11 Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьПодборСерий();
		
	КонецЕсли;
	
	Если (Поле = Элементы.ПартииДоляСтоимостиПроцент
			ИЛИ Поле = Элементы.ПартииЕстьОшибкиЗаполненияДолиСтоимости)
		И Объект.СпособРаспределенияЗатратНаВыходныеИзделия
			<> ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуВводаДолиСтоимости();
		
	КонецЕсли;
	
	НастройкаСчетовУчетаКлиент.ПриНажатии(ЭтотОбъект, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПриНачалеРедактированияПартии();
	
	Если НоваяСтрока И Копирование Тогда
		
		// Настройка счетов учета.
		НастройкаСчетовУчетаКлиент.ПриКопированииСтроки(ЭтотОбъект, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СписокРеквизитов = "";
	
	Если ПроизводствоКлиент.НеобходимоРассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(
			Элемент,
			ПараметрыРаспределенияЗатрат,
			РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы.Партии, ЭтотОбъект),
			НоваяСтрока) Тогда
			
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		
		СписокРеквизитов = СписокРеквизитов
			+ ?(ПустаяСтрока(СписокРеквизитов), "", ",")
			+ "ДоляСтоимостиПроцент";
		
	КонецЕсли;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
		СписокРеквизитов = СписокРеквизитов
			+ ?(ПустаяСтрока(СписокРеквизитов), "", ",")
			+ "СтатусыУказанияСерий";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СписокРеквизитов) Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, СписокРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииНоменклатураПриИзменении(Элемент)
	
	РассчитатьПроцентЗатрат = (ТекущаяПартия <> ИндексыПартий().ВсеПартии)
		И ПроизводствоКлиент.НеобходимоРассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(
				Элементы.Партии,
				ПараметрыРаспределенияЗатрат,
				РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы.Партии, ЭтаФорма));
	
	ОбновитьСтатусыСерий = (ТекущаяПартия <> ИндексыПартий().ВсеПартии)
		И НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(Элементы.Партии, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	ПартииНоменклатураПриИзмененииНаСервере(РассчитатьПроцентЗатрат, ОбновитьСтатусыСерий, КэшированныеЗначения);
	
	Если РассчитатьПроцентЗатрат Тогда
		РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.Партии, ЭтаФорма);
	КонецЕсли;
	
	Если ОбновитьСтатусыСерий Тогда
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элементы.Партии, КэшированныеЗначения, ПараметрыУказанияСерий);
	КонецЕсли;
	
	ЗаполнитьСписокВыбораНаправлениеВыпускаФорма();
	
КонецПроцедуры

&НаСервере
Процедура ПартииНоменклатураПриИзмененииНаСервере(РассчитатьПроцентЗатрат, ОбновитьСтатусыСерий, КэшированныеЗначения)
	
	ТекущаяСтрока = Объект.Партии.НайтиПоИдентификатору(Элементы.Партии.ТекущаяСтрока);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", 	ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение");
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
		Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Получатель, ПараметрыУказанияСерий));
	
	ПроизводствоКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьСкладПроизводства(
		ТекущаяСтрока.Подразделение, СтруктураДействий, "Получатель");
	ДоходыИРасходыКлиентСервер.ВставитьДействиеОчиститьСтатьюИАналитикуРасходов(
		СтруктураДействий, ЭтотОбъект, "Объект.Партии");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	// Направление выпуска
	ИзмененПолучатель = Ложь;
	СписокВыбора = СписокВыбораНаправлениеВыпускаФорма(ЭтаФорма);
	Если СписокВыбора.НайтиПоЗначению(ТекущаяСтрока.НаправлениеВыпускаФорма) = Неопределено Тогда
		ТекущаяСтрока.НаправлениеВыпускаФорма = СписокВыбора[0].Значение;
		ПриИзмененииНаправленияВыпускаФорма(ЭтаФорма, ИзмененПолучатель, Ложь);
	Иначе
		ИзмененПолучатель = ПривестиТипПолучателя(ЭтаФорма);
	КонецЕсли;
	
	Если ИзмененПолучатель Тогда
		ПолучательПриИзмененииНаСервере(Ложь, КэшированныеЗначения);
	КонецЕсли;
	
	СписокРеквизитов = "Номенклатура";
	
	// Доли стоимости
	Если РассчитатьПроцентЗатрат Тогда
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		СписокРеквизитов = СписокРеквизитов + ",ДоляСтоимостиПроцент";
	КонецЕсли;
	
	// Серии
	Если ОбновитьСтатусыСерий Тогда
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(КэшированныеЗначения);
		СписокРеквизитов = СписокРеквизитов + ",СтатусыУказанияСерий";
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, СписокРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииХарактеристикаПриИзменении(Элемент)
	
	// Изменение реквизита в шапке см. ХарактеристикаПриИзменении
	
	ТекущаяСтрока = Элементы.Партии.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииКоличествоУпаковокПриИзменении(Элемент)
	
	// Изменение реквизита в шапке см. КоличествоУпаковокПриИзменении
	
	ТекущаяСтрока = Элементы.Партии.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Партии.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.Партии.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.Партии.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииПолучательПриИзменении(Элемент)
	
	// Изменение реквизита в шапке см. ПолучательПриИзменении
	
	ПолучательПриИзмененииНаСервере(Ложь, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииНаправлениеВыпускаФормаПриИзменении(Элемент)
	
	// Изменение реквизита в шапке см. НаправлениеВыпускаФормаПриИзменении
	
	ИзмененПолучатель = Ложь;
	
	ПриИзмененииНаправленияВыпускаФорма(ЭтаФорма, ИзмененПолучатель, Ложь);
	
	Если ИзмененПолучатель Тогда
		ПартииПолучательПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииСтатьяРасходовПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "СтатьяРасходов");
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииПродолжитьПоСпецификацииПриИзменении(Элемент)
	
	Элементы.Партии.ТекущиеДанные.ПродолжитьПоСпецификацииФорма =
		?(Элементы.Партии.ТекущиеДанные.ПродолжитьПоСпецификации, 1, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииКоличествоУпаковокПартииПриИзменении(Элемент)
	
	Элементы.Партии.ТекущиеДанные.КоличествоПартии = РассчитатьКоличествоЕдиницПартии(
		Объект.ОсновноеИзделиеНоменклатура,
		Элементы.Партии.ТекущиеДанные.УпаковкаПартии,
		Элементы.Партии.ТекущиеДанные.КоличествоУпаковокПартии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииУпаковкаПартииПриИзменении(Элемент)

	Элементы.Партии.ТекущиеДанные.КоличествоПартии = РассчитатьКоличествоЕдиницПартии(
		Объект.ОсновноеИзделиеНоменклатура,
		Элементы.Партии.ТекущиеДанные.УпаковкаПартии,
		Элементы.Партии.ТекущиеДанные.КоличествоУпаковокПартии);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРезультатВыполнения

&НаКлиенте
Процедура РезультатВыполненияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РезультатВыполнения.ТекущиеДанные;
	
	Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЭтапПроизводства2_2")
		ИЛИ ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.КорректировкаНазначенияТоваров") Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	
	ОчиститьСообщения();
	
	НачатьОжидание = ВыполнитьДействиеВФоне();
	
	Если НачатьОжидание Тогда
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Новый ОписаниеОповещения("ВыполнитьДействиеВФонеЗавершение", ЭтотОбъект),
			ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект));
			
	ИначеЕсли ДействиеВыполнено Тогда
		
		Оповестить("ИзменениеПоследовательностиЭтапов", Объект.ПартияПроизводства);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	ОткрытьПодборСерий();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкаЭлементов

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Установку оформления элементов таблицы, вынесенных в шапку, см. НастроитьЗависимыеЭлементыФормы()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Стандартное оформление
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтаФорма,
		Элементы.ПартииХарактеристика.Имя,
		"Объект.Партии.ХарактеристикиИспользуются");
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		ЭтаФорма,
		"ПартииНоменклатураЕдиницаИзмерения",
		"Объект.Партии.Упаковка");
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		ЭтаФорма,
		"ПартииНоменклатураПартииЕдиницаИзмерения",
		"Объект.Партии.УпаковкаПартии");
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		ЭтаФорма,
		"РезультатВыполненияНоменклатураПартииЕдиницаИзмерения",
		"РезультатВыполнения.Упаковка");
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(
		ЭтаФорма,
		Элементы.ПартииНазначение.Имя,
		"Объект.Партии.ТипНоменклатуры",
		Ложь);
		
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтаФорма,
		Ложь,
		"ПартииСерия",
		"Объект.Партии.СтатусУказанияСерий",
		"Объект.Партии.ТипНоменклатуры");
		
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(
		ЭтаФорма,
		Ложь,
		"ПартииСтатусУказанияСерий",
		"Объект.Партии.СтатусУказанияСерий");
		
	//
	
	ПроизводствоСервер.УстановитьУсловноеОформлениеПоляДоляСтоимостиПроцент(
		ЭтаФорма,
		"Объект",
		"Партии");
	
	// Назначение не указывается при списании на расходы
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииНазначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется при списании на расходы>';
																|en = '<not used while writing off as expenses>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Назначение не указывается при продолжении обработки
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииНазначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.ПродолжитьОбработку");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется при продолжении обработки>';
																|en = '<not used when continue processing>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Направление выпуска
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииНаправлениеВыпускаФорма.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.НаправлениеВыпускаФорма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НаправлениеПродолжитьОбработку();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Продолжить обработку';
																|en = 'Continue processing'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииНаправлениеВыпускаФорма.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.НаправлениеВыпускаФорма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'На склад';
																|en = 'To warehouse'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииНаправлениеВыпускаФорма.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.НаправлениеВыпускаФорма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'В подразделение';
																|en = 'To business unit'"));

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииНаправлениеВыпускаФорма.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.НаправлениеВыпускаФорма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Списать на расходы';
																|en = 'Expense as'"));
	
	// Аналитика расходов
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииСтатьяРасходов.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииАналитикаРасходов.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииАналитикаАктивовПассивов.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПредставлениеОтраженияОперации.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Получатель совпадает с выпускающим подразделением
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПолучатель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.Получатель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Партии.Подразделение"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// Получатель отметка незаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПолучатель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Получатель.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.Получатель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Получатель.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.Получатель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Продолжить обработку
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПродолжитьПоСпецификации.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.ПродолжитьПоСпецификации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'По спецификации';
																|en = 'By bill of materials'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПродолжитьПоСпецификации.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.ПродолжитьПоСпецификации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'По этапам текущей партии';
																|en = 'By stages of current lot'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПродолжитьПоСпецификации.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПродолжитьСпецификация.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПродолжитьЭтап.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.НаправлениеВыпускаФорма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется при выпуске на склад>';
																|en = '<not used on release to warehouse>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПродолжитьПоСпецификации.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПродолжитьСпецификация.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПродолжитьЭтап.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.НаправлениеВыпускаФорма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется при выпуске в подразделение>';
																|en = '<not used on release to business unit>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПродолжитьПоСпецификации.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПродолжитьСпецификация.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПродолжитьЭтап.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.НаправлениеВыпускаФорма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется при списании на расходы>';
																|en = '<not used while writing off as expenses>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПродолжитьСпецификация.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПродолжитьЭтап.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.НаправлениеВыпускаФорма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НаправлениеПродолжитьОбработку();
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.ПродолжитьПоСпецификации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется при формировании по текущей партии>';
																|en = '<not used in the current lot generation>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Продолжить по спецификации
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПродолжитьСпецификация.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПродолжитьЭтап.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.ПродолжитьПоСпецификации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Отображение картинки в дереве результатов
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РезультатВыполненияНомерКартинки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РезультатВыполнения.СкрыватьКартинку");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Размер партии
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииКоличествоУпаковокПартии.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Этап");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.НаправлениеВыпускаФорма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется при выпуске на склад>';
																|en = '<not used on release to warehouse>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииКоличествоУпаковокПартии.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Этап");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.НаправлениеВыпускаФорма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется при выпуске в подразделение>';
																|en = '<not used on release to business unit>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииКоличествоУпаковокПартии.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Этап");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.НаправлениеВыпускаФорма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется при списании на расходы>';
																|en = '<not used while writing off as expenses>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииУпаковкаПартии.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииНоменклатураПартииЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Этап");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.ПродолжитьОбработку");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Документы с ошибками
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.РезультатВыполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РезультатВыполнения.ЕстьОшибки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Действия = Действия();
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("ИзделиеНоменклатура")
		ИЛИ СтруктураРеквизитов.Свойство("ИзделиеХарактеристика")
		ИЛИ СтруктураРеквизитов.Свойство("КоличествоУпаковок")
		ИЛИ Инициализация Тогда
		
		Если Объект.ОсновноеИзделиеНоменклатура.Пустая() Тогда
			Элементы.ИзделиеНадпись.Видимость = Ложь;
		Иначе
			Элементы.ИзделиеНадпись.Видимость = Истина;
			
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Форма.ИзделиеНоменклатураПредставление,,,, "#ПоказатьИзделие"));
			Если НЕ Объект.ОсновноеИзделиеХарактеристика.Пустая() Тогда
				МассивСтрок.Добавить(" / ");
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Форма.ИзделиеХарактеристикаПредставление,,,, "#ПоказатьХарактеристикуИзделия"));
			КонецЕсли;
			Если Объект.КоличествоУпаковок <> 0 Тогда
				МассивСтрок.Добавить(" ");
				МассивСтрок.Добавить(НСтр("ru = 'Количество';
											|en = 'Quantity'"));
				МассивСтрок.Добавить(": ");
				МассивСтрок.Добавить(Формат(Объект.КоличествоУпаковок, "ЧГ="));
				МассивСтрок.Добавить(" ");
				МассивСтрок.Добавить(Форма.ИзделиеУпаковкаПредставление);
			КонецЕсли;
			Форма.ИзделиеНадпись = Новый ФорматированнаяСтрока(МассивСтрок);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("КоличествоУпаковок")
		ИЛИ Инициализация Тогда
		
		Элементы.ДействиеПродолжить.СписокВыбора.Очистить();
		Элементы.ДействиеПродолжить.СписокВыбора.Добавить(Действия.Продолжить,
			СтрШаблон(НСтр("ru = 'Оформить промежуточный выпуск и продолжить обработку %1 %2 одной новой партией';
							|en = 'Suspend and restart processing %1 %2with a different BOM'"),
				Объект.КоличествоУпаковок,
				Форма.ИзделиеУпаковкаПредставление));
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Действие")
		ИЛИ Инициализация Тогда
		
		Элементы.КоличествоПартийРазделить.Доступность =
			(Объект.Действие = Действия.Разделить);
		Элементы.СпособРаспределенияЗатратНаВыходныеИзделия.Доступность =
			(Объект.Действие = Действия.Разделить);
		Элементы.ГруппаДоляСтоимости.Видимость =
			(Объект.Действие = Действия.Разделить);
		
		Элементы.НаправлениеВыпускаФорма.Доступность =
			(Объект.Действие <> Действия.Продолжить);
		
		Элементы.ГруппаЗаполнитьЭтапы.Видимость =
			(Объект.Действие = Действия.Сократить)
				И НЕ Объект.Спецификация.Пустая();
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("СпособРаспределенияЗатратНаВыходныеИзделия")
		ИЛИ Инициализация Тогда
		
		РаспределениеПоДолям = Объект.СпособРаспределенияЗатратНаВыходныеИзделия
			= ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости");
		
		Элементы.ДоляСтоимости.Видимость = РаспределениеПоДолям;
		
		Элементы.ДоляСтоимостиПроцент.ПоложениеЗаголовка = ?(РаспределениеПоДолям,
			ПоложениеЗаголовкаЭлементаФормы.Нет,
			ПоложениеЗаголовкаЭлементаФормы.Авто);
		Элементы.ДоляСтоимостиПроцент.Гиперссылка = НЕ РаспределениеПоДолям;
		
		Элементы.ЕстьОшибкиЗаполненияДолиСтоимости.ПоложениеЗаголовка = ?(РаспределениеПоДолям,
			ПоложениеЗаголовкаЭлементаФормы.Нет,
			ПоложениеЗаголовкаЭлементаФормы.Авто);
		Элементы.ЕстьОшибкиЗаполненияДолиСтоимости.Гиперссылка = НЕ РаспределениеПоДолям;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("КоличествоПартийРазделить")
		ИЛИ СтруктураРеквизитов.Свойство("Этап")
		ИЛИ Инициализация Тогда
		
		Если Объект.Этап.Пустая() Тогда
			
			Элементы.СпособРаспределенияЗатратНаВыходныеИзделия.Видимость = Ложь;
			Элементы.ДекорацияКоличествоПартий.Заголовок = 
				ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
					Форма.КоличествоПартийРазделить,
					НСтр("ru = 'партию';
						|en = 'lot'"),
					НСтр("ru = 'партии';
						|en = 'lots'"),
					НСтр("ru = 'партий';
						|en = 'lots'"),
					"ж");
			
		Иначе
			
			Элементы.СпособРаспределенияЗатратНаВыходныеИзделия.Видимость = Истина;
			Элементы.ДекорацияКоличествоПартий.Заголовок = СтрШаблон(НСтр("ru = '%1, распределить затраты';
																			|en = '%1, allocate costs'"),
				ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
					Форма.КоличествоПартийРазделить,
					НСтр("ru = 'партию';
						|en = 'lot'"),
					НСтр("ru = 'партии';
						|en = 'lots'"),
					НСтр("ru = 'партий';
						|en = 'lots'"),
					"ж")
				);
				
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("КоличествоПартий")
		ИЛИ Инициализация Тогда
		
		Элементы.ГруппаГиперссылки.Видимость = Форма.КоличествоПартий > 1;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ТекущаяПартия")
		ИЛИ Инициализация Тогда
		
		Элементы["Партия" + Формат(Форма.ТекущаяПартия, "ЧЦ=3; ЧН=000; ЧВН=")].Гиперссылка = Ложь;
		Элементы["Партия" + Формат(Форма.ТекущаяПартия, "ЧЦ=3; ЧН=000; ЧВН=")].ЦветТекста = Форма.ЦветВыбраннаяСсылка;
		
		Если Форма.ПредыдущаяПартия <> ИндексыПартий().Неопределено Тогда
			
			Элементы["Партия" + Формат(Форма.ПредыдущаяПартия, "ЧЦ=3; ЧН=000; ЧВН=")].Гиперссылка = Истина;
			Элементы["Партия" + Формат(Форма.ПредыдущаяПартия, "ЧЦ=3; ЧН=000; ЧВН=")].ЦветТекста = Форма.ЦветНеВыбраннаяСсылка;
			Форма.ПредыдущаяПартия = ИндексыПартий().Неопределено;
			
		КонецЕсли;
		
		Если Форма.ТекущаяПартия <> ИндексыПартий().ВсеПартии Тогда
			
			Элементы.Партии.ТекущаяСтрока = Объект.Партии[Форма.ТекущаяПартия].ПолучитьИдентификатор();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Действие")
		ИЛИ СтруктураРеквизитов.Свойство("КоличествоПартий")
		ИЛИ СтруктураРеквизитов.Свойство("ТекущаяПартия")
		ИЛИ Инициализация Тогда
		
		Если Объект.Действие = Действия.Отменить Тогда
			Элементы.ГруппаПромежуточныйВыпуск.Заголовок = НСтр("ru = 'Выпуск';
																|en = 'Release'");
		Иначе
			Элементы.ГруппаПромежуточныйВыпуск.Заголовок = ?(Форма.КоличествоПартий > 1,
				СтрШаблон(НСтр("ru = 'Промежуточный выпуск %1';
								|en = 'Intermediate release %1'"), Форма.ТекущаяПартия+1),
				НСтр("ru = 'Промежуточный выпуск';
					|en = 'Intermediate release'"));
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Действие")
		ИЛИ Инициализация Тогда
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(БиблиотекаКартинок.Информация);
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(?(Объект.Действие = Действия.Отменить,
			НСтр("ru = 'Будет создан дополнительный этап для оформления выпуска';
				|en = 'Additional stage for release registration will be created'"),
			НСтр("ru = 'Будет создан дополнительный этап для оформления промежуточного выпуска';
				|en = 'Additional stage for intermediate release registration will be created'")));
		Элементы.ДекорацияБудетСозданЭтап.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		
	КонецЕсли;
		
	Если СтруктураРеквизитов.Свойство("КоличествоПартий")
		ИЛИ СтруктураРеквизитов.Свойство("ТекущаяПартия")
		ИЛИ Инициализация Тогда
		
		Элементы.КоличествоУпаковокПартии.Заголовок = ?(Форма.КоличествоПартий > 1,
			СтрШаблон(НСтр("ru = 'Размер партии %1';
							|en = 'Lot size %1'"), Форма.ТекущаяПартия+1),
			НСтр("ru = 'Размер партии';
				|en = 'Lot size'"));
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Действие")
		ИЛИ СтруктураРеквизитов.Свойство("Этап")
		ИЛИ СтруктураРеквизитов.Свойство("СоздатьЭтап")
		ИЛИ Инициализация Тогда
		
		ВидимостьПромежуточныйВыпуск = Объект.Действие <> Действия.Сократить
			И НЕ Объект.Этап.Пустая();
		
		Элементы.ГруппаПромежуточныйВыпуск.Видимость = ВидимостьПромежуточныйВыпуск;
		Элементы.ПартииГруппаПромежуточныйВыпуск1.Видимость = ВидимостьПромежуточныйВыпуск;
		Элементы.ПартииГруппаПромежуточныйВыпуск2.Видимость = ВидимостьПромежуточныйВыпуск;
		Элементы.ПартииГруппаПромежуточныйВыпуск3.Видимость = ВидимостьПромежуточныйВыпуск;
		Элементы.ПартииГруппаПромежуточныйВыпуск4.Видимость = ВидимостьПромежуточныйВыпуск;
		
		Элементы.ДекорацияБудетСозданЭтап.Видимость = ВидимостьПромежуточныйВыпуск И Объект.СоздатьЭтап;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Действие")
		ИЛИ СтруктураРеквизитов.Свойство("Этап")
		ИЛИ СтруктураРеквизитов.Свойство("ТекущаяПартия")
		ИЛИ Инициализация Тогда
		
		Если Форма.ТекущаяПартия = ИндексыПартий().ВсеПартии Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВсеПартии;
		ИначеЕсли Объект.Этап.Пустая() И Объект.Действие = Действия.Отменить Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПустая;
		Иначе
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПартия;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Этап")
		ИЛИ Инициализация Тогда
		
		Элементы.ДействиеПродолжить.Видимость = НЕ Объект.Этап.Пустая();
		Элементы.ДействиеОтменить.СписокВыбора[0].Представление = ?(Объект.Этап.Пустая(),
			НСтр("ru = 'Отменить производство';
				|en = 'Cancel production'"),
			НСтр("ru = 'Отменить дальнейшее производство, оформить выпуск';
				|en = 'Stop production'"));
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПараметрыУказанияСерий")
		ИЛИ Инициализация Тогда
		
		Элементы.Серия.Видимость = Форма.ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
		Элементы.СтатусУказанияСерий.Видимость = Форма.ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
		Элементы.УказатьСерии.Видимость = Форма.ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
		
		Элементы.ПартииСерия.Видимость = Форма.ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
		Элементы.ПартииСтатусУказанияСерий.Видимость = Форма.ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Действие")
		ИЛИ СтруктураРеквизитов.Свойство("Этап")
		ИЛИ Инициализация Тогда
		
		Элементы.ПартииПродолжитьПоСпецификации.Видимость = НЕ Объект.Этап.Пустая()
		    И Объект.Действие = Действия.Разделить;
		Элементы.ПартииГруппаСпецификацияЭтап.Видимость = НЕ Объект.Этап.Пустая()
		    И Объект.Действие = Действия.Разделить;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПараметрыУказанияСерий")
		ИЛИ СтруктураРеквизитов.Свойство("Действие")
		ИЛИ СтруктураРеквизитов.Свойство("Этап")
		ИЛИ Инициализация Тогда
		
		Элементы.ПартииУказатьСерии.Видимость = НЕ Объект.Этап.Пустая()
		    И Объект.Действие = Действия.Разделить
		    И Форма.ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
		
	КонецЕсли;
	
	Если Элементы.Партии.ТекущаяСтрока <> Неопределено
		И Форма.ТекущаяПартия <> ИндексыПартий().ВсеПартии Тогда
		
		ТекущиеДанные = Объект.Партии.НайтиПоИдентификатору(Элементы.Партии.ТекущаяСтрока);
		
		// Оформление элементов шапки: Характеристика
		Если СтруктураРеквизитов.Свойство("ТекущаяПартия")
			ИЛИ СтруктураРеквизитов.Свойство("Номенклатура")
			ИЛИ Инициализация Тогда
			
			Элементы.Характеристика.Доступность = ТекущиеДанные.ХарактеристикиИспользуются;
			Элементы.Характеристика.ПодсказкаВвода = ?(ТекущиеДанные.ХарактеристикиИспользуются, "",
				НСтр("ru = '<характеристики не используются>';
					|en = '<variants are not used>'"));
				
			Элементы.Упаковка.ПодсказкаВвода = ТекущиеДанные.ЕдиницаИзмерения;
			
		КонецЕсли;
		
		// Оформление элементов шапки: Назначение
		Если СтруктураРеквизитов.Свойство("ТекущаяПартия")
			ИЛИ СтруктураРеквизитов.Свойство("Номенклатура")
			ИЛИ СтруктураРеквизитов.Свойство("СписатьНаРасходы")
			ИЛИ СтруктураРеквизитов.Свойство("ПродолжитьОбработку")
			ИЛИ Инициализация Тогда
			
			Если ТекущиеДанные.СписатьНаРасходы Тогда
				
				Элементы.Назначение.Доступность = Ложь;
				Элементы.Назначение.ПодсказкаВвода = НСтр("ru = '<не используется при списании на расходы>';
															|en = '<not used while writing off as expenses>'");
				
			ИначеЕсли ТекущиеДанные.ПродолжитьОбработку Тогда
				
				Элементы.Назначение.Доступность = Ложь;
				Элементы.Назначение.ПодсказкаВвода = НСтр("ru = '<не используется при продолжении обработки>';
															|en = '<not used when continue processing>'");
				
			ИначеЕсли ТекущиеДанные.ТипНоменклатуры.Пустая()
				ИЛИ ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Тогда
				
				Элементы.Назначение.Доступность = Ложь;
				Элементы.Назначение.ПодсказкаВвода = НСтр("ru = '<для товаров и работ>';
															|en = '<for goods and labor>'");
				
			Иначе
				
				Элементы.Назначение.Доступность = Истина;
				Элементы.Назначение.ПодсказкаВвода = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Оформление элементов шапки: Серии
		Если СтруктураРеквизитов.Свойство("ТекущаяПартия")
			ИЛИ СтруктураРеквизитов.Свойство("Номенклатура")
			ИЛИ СтруктураРеквизитов.Свойство("СтатусыУказанияСерий")
			ИЛИ Инициализация Тогда
			
			Если ТекущиеДанные.ТипНоменклатуры.Пустая()
				ИЛИ ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
				
				Элементы.Серия.Доступность = Ложь;
				Элементы.Серия.ПодсказкаВвода = НСтр("ru = '<для товаров>';
													|en = '<for goods>'");
				Элементы.УказатьСерии.Доступность = Ложь;
				
			ИначеЕсли ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
				
				Элементы.Серия.Доступность = Ложь;
				Элементы.Серия.ПодсказкаВвода = НСтр("ru = '<серия не указывается>';
													|en = '<batch is not specified>'");
				Элементы.УказатьСерии.Доступность = Ложь;
				
			ИначеЕсли НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(
				ТекущиеДанные.СтатусУказанияСерий,
				Форма.ПараметрыУказанияСерий) Тогда
				
				Элементы.Серия.Доступность = Истина;
				Элементы.Серия.ПодсказкаВвода = "";
				Элементы.УказатьСерии.Доступность = Истина;
				
			Иначе
				
				Элементы.Серия.Доступность = Ложь;
				Элементы.Серия.ПодсказкаВвода = НСтр("ru = '<серия указывается отдельно>';
													|en = '<batch is specified separately>'");
				Элементы.УказатьСерии.Доступность = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Оформление элементов шапки: Доля стоимости
		Если СтруктураРеквизитов.Свойство("ТекущаяПартия")
			ИЛИ СтруктураРеквизитов.Свойство("ДоляСтоимостиПроцент")
			ИЛИ Инициализация Тогда
			
			Элементы.ДоляСтоимостиПроцент.Видимость = ЗначениеЗаполнено(ТекущиеДанные.ДоляСтоимостиПроцент);
			Элементы.ЕстьОшибкиЗаполненияДолиСтоимости.Видимость = НЕ ЗначениеЗаполнено(ТекущиеДанные.ДоляСтоимостиПроцент);
			
		КонецЕсли;
		
		// Оформление элементов шапки: Аналитика расходов
		Если СтруктураРеквизитов.Свойство("ТекущаяПартия")
			ИЛИ СтруктураРеквизитов.Свойство("СписатьНаРасходы")
			ИЛИ СтруктураРеквизитов.Свойство("СтатьяРасходов")
			ИЛИ Инициализация Тогда
			
			Элементы.СтатьяРасходов.Видимость = ТекущиеДанные.СписатьНаРасходы;
			Элементы.АналитикаРасходов.Видимость = ТекущиеДанные.СписатьНаРасходы
				И ТипЗнч(ТекущиеДанные.СтатьяРасходов) <> Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов");
			Элементы.АналитикаАктивовПассивов.Видимость = ТекущиеДанные.СписатьНаРасходы
				И ТипЗнч(ТекущиеДанные.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов");
			
			Если Форма.ИспользоватьУчетПрочихАктивовПассивов Тогда
				Элементы.ПредставлениеОтраженияОперации.Видимость = ТекущиеДанные.СписатьНаРасходы
					И ТипЗнч(ТекущиеДанные.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов");
			КонецЕсли;
			
			Элементы.Получатель.ПодсказкаВвода = ?(ТекущиеДанные.СписатьНаРасходы, ТекущиеДанные.Подразделение, "");
			
		КонецЕсли;
		
		Если СтруктураРеквизитов.Свойство("ТекущаяПартия")
			ИЛИ СтруктураРеквизитов.Свойство("СтатьяРасходов")
			ИЛИ Инициализация Тогда
			
			Элементы.АналитикаРасходов.Доступность = ЗначениеЗаполнено(ТекущиеДанные.СтатьяРасходов);
			Элементы.АналитикаРасходов.ПодсказкаВвода = ?(ЗначениеЗаполнено(ТекущиеДанные.СтатьяРасходов),
				"",
				НСтр("ru = '<выберите статью расходов>';
					|en = '<select an expense item>'"));
			
			Элементы.АналитикаАктивовПассивов.Доступность = ЗначениеЗаполнено(ТекущиеДанные.СтатьяРасходов);
			Элементы.АналитикаАктивовПассивов.ПодсказкаВвода = ?(ЗначениеЗаполнено(ТекущиеДанные.СтатьяРасходов),
				"",
				НСтр("ru = '<выберите статью расходов>';
					|en = '<select an expense item>'"));
			
		КонецЕсли;
		
		// Оформление элементов шапки: Продолжить обработку
		Если СтруктураРеквизитов.Свойство("ТекущаяПартия")
			ИЛИ СтруктураРеквизитов.Свойство("ПродолжитьПоСпецификации")
			ИЛИ Инициализация Тогда
			
			Элементы.ПродолжитьСпецификация.Доступность = ТекущиеДанные.ПродолжитьПоСпецификации;
			Элементы.ПродолжитьЭтап.Доступность = ТекущиеДанные.ПродолжитьПоСпецификации;
			
		КонецЕсли;
		
		Если СтруктураРеквизитов.Свойство("ТекущаяПартия")
			ИЛИ СтруктураРеквизитов.Свойство("ПродолжитьОбработку")
			ИЛИ СтруктураРеквизитов.Свойство("Действие")
			ИЛИ СтруктураРеквизитов.Свойство("Этап")
			ИЛИ Инициализация Тогда
			
			ПродолжитьОбработкуВидимость = 
				(Объект.Действие = Действия.Разделить
					И НЕ Объект.Этап.Пустая()
					И ТекущиеДанные.ПродолжитьОбработку)
				ИЛИ Объект.Действие = Действия.Продолжить;
			
			Элементы.ГруппаПродолжитьОбработку.Видимость = ПродолжитьОбработкуВидимость;
			Элементы.ГруппаКонечноеИзделие.ОтображатьЗаголовок = ПродолжитьОбработкуВидимость;
			
		КонецЕсли;
		
		// Оформление элементов шапки: Размер партии
		Если СтруктураРеквизитов.Свойство("ТекущаяПартия")
			ИЛИ СтруктураРеквизитов.Свойство("Действие")
			ИЛИ СтруктураРеквизитов.Свойство("ПродолжитьОбработку")
			ИЛИ СтруктураРеквизитов.Свойство("Этап")
			ИЛИ Инициализация Тогда
			
			Элементы.ГруппаРазмерПартии.Видимость = 
				Объект.Действие = Действия.Сократить
				ИЛИ (
					Объект.Действие = Действия.Разделить
					И 	(
						Объект.Этап.Пустая()
						ИЛИ ТекущиеДанные.ПродолжитьОбработку
						)
					);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Партии

&НаКлиенте
Процедура ПриИзмененииДействия(СписокРеквизитов)
	
	ПриИзмененииДействияНаСервере(СписокРеквизитов, КэшированныеЗначения);
	ПриНачалеРедактированияПартии();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДействияНаСервере(СписокРеквизитов, КэшированныеЗначения)
	
	// Состав партий
	ТекущаяПартияКопия = ТекущаяПартия;
	
	Если Объект.Партии.Количество() <> КоличествоПартий Тогда
		
		НастроитьСоставПартий();
		
		Если ТекущаяПартия <> ИндексыПартий().ВсеПартии
			И ТекущаяПартия > КоличествоПартий-1 Тогда
			
			ТекущаяПартия = КоличествоПартий-1;
			
		ИначеЕсли ТекущаяПартия = ИндексыПартий().ВсеПартии
			И КоличествоПартий = 1 Тогда
			
			ТекущаяПартия = 0;
			ПредыдущаяПартия = ИндексыПартий().ВсеПартии;
			
		ИначеЕсли ТекущаяПартия = ИндексыПартий().ВсеПартии
			И Объект.Партии.НайтиПоИдентификатору(Элементы.Партии.ТекущаяСтрока) = Неопределено Тогда
			
			Элементы.Партии.ТекущаяСтрока = Объект.Партии[КоличествоПартий-1].ПолучитьИдентификатор();
			
		КонецЕсли;
		
		СписокРеквизитов = СписокРеквизитов + ", ДоляСтоимостиПроцент";
		
	КонецЕсли;
	
	Если ТекущаяПартия <> ТекущаяПартияКопия Тогда
		СписокРеквизитов = СписокРеквизитов + ", ТекущаяПартия";
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, СписокРеквизитов);
	
	// Направления выпуска
	СписокВыбора = СписокВыбораНаправлениеВыпускаФорма(ЭтаФорма);
	ТекущаяСтрока = Объект.Партии.НайтиПоИдентификатору(Элементы.Партии.ТекущаяСтрока);
	Если СписокВыбора.НайтиПоЗначению(ТекущаяСтрока.НаправлениеВыпускаФорма) = Неопределено Тогда
	
		ТекущаяСтрока.НаправлениеВыпускаФорма = СписокВыбора[0].Значение;
		
		ИзмененПолучатель = Ложь;
		ИзмененоНазначение = Ложь;
		ПриИзмененииНаправленияВыпускаФорма(ЭтаФорма, ИзмененПолучатель, ИзмененоНазначение);
		
		Если ИзмененПолучатель Тогда
			ПолучательПриИзмененииНаСервере(Ложь, КэшированныеЗначения);
		КонецЕсли;
		
		Если ИзмененПолучатель ИЛИ ИзмененоНазначение Тогда
			
			ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(КэшированныеЗначения);
			
			НоменклатураКлиентСервер.ОбновитьКешированныеЗначенияДляУчетаСерий(
				ТекущаяСтрока,
				КэшированныеЗначения,
				ПараметрыУказанияСерий);
			
			НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "СтатусыУказанияСерий");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСоставПартий()
	
	Если Объект.Партии.Количество() < КоличествоПартий Тогда
		
		// Добавление партий
		Для Индекс = Объект.Партии.Количество() По КоличествоПартий-1 Цикл
			
			ДобавитьПартию(Индекс);
			
			Если Индекс <> 0 Тогда
				
				НовыйЭлемент = Элементы.Вставить(
					"Партия" + Формат(Индекс, "ЧЦ=3; ЧН=000; ЧВН="),
					Тип("ДекорацияФормы"),
					Элементы.ГруппаГиперссылки,
					Элементы.Партия100);
				НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
				НовыйЭлемент.Заголовок = СтрШаблон(НСтр("ru = 'Партия %1';
														|en = 'Lot %1'"), Индекс + 1);
				НовыйЭлемент.Гиперссылка = Истина;
				НовыйЭлемент.ЦветТекста = ЦветНеВыбраннаяСсылка;
				НовыйЭлемент.УстановитьДействие("Нажатие", "ГиперссылкаПартияНажатие");
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Объект.Партии.Количество() > КоличествоПартий Тогда
		
		// Удаление партий
		Для Индекс = -Объект.Партии.Количество()+1 По -КоличествоПартий Цикл
			
			Объект.Партии.Удалить(-Индекс);
			
			Для каждого Строка Из Объект.Серии.НайтиСтроки(Новый Структура("ИндексПартии", -Индекс)) Цикл
				Объект.Серии.Удалить(Строка);
			КонецЦикла;
			
			Элементы.Удалить(Элементы["Партия" + Формат(-Индекс, "ЧЦ=3; ЧН=000; ЧВН=")]);
			
		КонецЦикла;
		
	КонецЕсли;
	
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексыПартий()
	
	Возврат Новый Структура("ВсеПартии, Неопределено", 100, -1);
	
КонецФункции

#КонецОбласти

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	
	НуженСерверныйВызов = НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(
		ЭтаФорма, 
		ПараметрыУказанияСерий, 
		Текст, 
		ТекущиеДанные);
	
	Если НуженСерверныйВызов Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы.Партии.ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		ДополнительныеПараметры = Новый Структура("ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий", 
											ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, 
						ПараметрыФормыУказанияСерий, 
						ЭтаФорма,,,,
						ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(
		Объект, 
		ПараметрыУказанияСерий, 
		ТекущиеДанныеИдентификатор, 
		ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(
				ДополнительныеПараметры.ПараметрыУказанияСерий, 
				ДополнительныеПараметры.ПараметрыФормыУказанияСерий);
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "СтатусыУказанияСерий");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(Знач ПараметрыУказанияСерий, Знач ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	
	НоменклатураСервер.ОбработатьУказаниеСерий(
		Объект, 
		ПараметрыУказанияСерий, 
		ПараметрыФормыУказанияСерий, 
		СтруктураДействий);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
		Объект, 
		ПараметрыУказанияСерий,
		Элементы.Партии.ТекущаяСтрока,
		КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область ДолиСтоимости

&НаКлиенте
Процедура ОткрытьФормуВводаДолиСтоимости()

	Если ПроизводствоКлиент.ПроверитьЗаполнениеПередВводомДолиСтоимости(
			Элементы.Партии.ТекущиеДанные,
			ПараметрыРаспределенияЗатрат) Тогда
		
		ОткрытьФорму("ОбщаяФорма.ВводДолиСтоимости",
			ПараметрыФормыВводаДолиСтоимости(Элементы.Партии.ТекущиеДанные.ПолучитьИдентификатор()),
			ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВводаДолиСтоимости(ТекущиеДанные, ВыбранноеЗначение)
	
	Если ТекущиеДанные.ДоляСтоимости <> ВыбранноеЗначение.ДоляСтоимости Тогда
		
		ПроизводствоКлиентСервер.ЗаполнитьДолюСтоимостиВСтроке(
			ТекущиеДанные,
			ВыбранноеЗначение);
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ДоляСтоимостиПроцент")
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСпособаРаспределенияЗатратНаВыходныеИзделия()
	
	ПараметрыРаспределенияЗатрат = Новый ФиксированнаяСтруктура(
		Обработки.ДелениеПартииПроизводства.ПараметрыРаспределенияЗатрат(Объект.СпособРаспределенияЗатратНаВыходныеИзделия));
	
	ПроизводствоСервер.РассчитатьДолюСтоимости(Объект, ПараметрыРаспределенияЗатрат);
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "СпособРаспределенияЗатратНаВыходныеИзделия, ДоляСтоимостиПроцент");
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия()
	
	ПроизводствоСервер.РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(Объект, ПараметрыРаспределенияЗатрат);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыВводаДолиСтоимости(ТекущиеДанныеИдентификатор)
	
	Возврат ПроизводствоСервер.ПараметрыФормыВводаДолейСтоимости(
		Объект,
		ПараметрыРаспределенияЗатрат,
		ТекущиеДанныеИдентификатор);
	
КонецФункции

#КонецОбласти

#Область НаправлениеВыпуска

&НаКлиенте
Процедура ЗаполнитьСписокВыбораНаправлениеВыпускаФорма()
	
	Элементы.НаправлениеВыпускаФорма.СписокВыбора.Очистить();
	Элементы.ПартииНаправлениеВыпускаФорма.СписокВыбора.Очистить();
	
	Для каждого Элемент Из СписокВыбораНаправлениеВыпускаФорма(ЭтаФорма) Цикл
		Элементы.НаправлениеВыпускаФорма.СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
		Элементы.ПартииНаправлениеВыпускаФорма.СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокВыбораНаправлениеВыпускаФорма(Форма)
	
	ТекущаяСтрока = Форма.Объект.Партии.НайтиПоИдентификатору(Форма.Элементы.Партии.ТекущаяСтрока);
	
	Результат = Новый СписокЗначений;
	
	Если Форма.Объект.Действие <> Действия().Отменить
			И (ТекущаяСтрока.ТипНоменклатуры <> ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара")
				ИЛИ Форма.Объект.Действие = Действия().Продолжить) Тогда
		
		Результат.Добавить(НаправлениеПродолжитьОбработку(), НСтр("ru = 'Продолжить обработку';
																	|en = 'Continue processing'"));
		
	КонецЕсли;
	
	Если Форма.Объект.Действие <> Действия().Продолжить Тогда
		
		Для каждого Элемент Из УправлениеПроизводствомКлиентСервер.СписокВыбораНаправлениеВыпуска(ТекущаяСтрока, Форма) Цикл
			Результат.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииНаправленияВыпускаФорма(Форма, ИзмененПолучатель, ИзмененоНазначение)
	
	Элементы = Форма.Элементы;
	ТекущаяСтрока = Форма.Объект.Партии.НайтиПоИдентификатору(Элементы.Партии.ТекущаяСтрока);
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.НаправлениеВыпускаФорма) Тогда
		Если ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Тогда
			ТекущаяСтрока.НаправлениеВыпускаФорма = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад");
		Иначе
			ТекущаяСтрока.НаправлениеВыпускаФорма = НаправлениеПродолжитьОбработку();
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущаяСтрока.НаправлениеВыпускаФорма = НаправлениеПродолжитьОбработку() Тогда
		Если ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар") Тогда
			ТекущаяСтрока.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад");
		Иначе
			ТекущаяСтрока.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение");
		КонецЕсли;
		ТекущаяСтрока.ПродолжитьОбработку = Истина;
	Иначе
		ТекущаяСтрока.НаправлениеВыпуска = ТекущаяСтрока.НаправлениеВыпускаФорма;
		ТекущаяСтрока.ПродолжитьОбработку = Ложь;
	КонецЕсли;
	
	ТекущаяСтрока.СписатьНаРасходы = ТекущаяСтрока.НаправлениеВыпуска
		= ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию");
	
	ДоходыИРасходыКлиентСервер.ПриИзмененииРеквизитаДоступностиСтатьиВСтроке(Форма, ТекущаяСтрока, "Объект.Партии");
	
	ИзмененПолучатель = ПривестиТипПолучателя(Форма);
	
	Если (ТекущаяСтрока.ПродолжитьОбработку ИЛИ ТекущаяСтрока.СписатьНаРасходы)
		И НЕ ТекущаяСтрока.Назначение.Пустая() Тогда
		ТекущаяСтрока.Назначение = Неопределено;
		ИзмененоНазначение = Истина;
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(Форма, "ПродолжитьОбработку, СписатьНаРасходы");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПривестиТипПолучателя(Форма)
	
	ТекущаяСтрока = Форма.Объект.Партии.НайтиПоИдентификатору(Форма.Элементы.Партии.ТекущаяСтрока);
	
	ОграничениеТипа = ОграничениеТипаПолучателя(ТекущаяСтрока);
	
	ЗначениеДоИзменения = ТекущаяСтрока.Получатель;
	ТекущаяСтрока.Получатель = ОграничениеТипа.ПривестиЗначение(ТекущаяСтрока.Получатель);
	
	Форма.Элементы.Получатель.ОграничениеТипа = ОграничениеТипа;
	Форма.Элементы.ПартииПолучатель.ОграничениеТипа = ОграничениеТипа;
	
	Возврат ТекущаяСтрока.Получатель <> ЗначениеДоИзменения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОграничениеТипаПолучателя(ТекущиеДанные)
	
	ОграничениеТипа = Неопределено;
	Если ТекущиеДанные.НаправлениеВыпускаФорма = НаправлениеПродолжитьОбработку() Тогда
		ОграничениеТипа = ?(ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"),
			Новый ОписаниеТипов("СправочникСсылка.Склады"),
			Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Иначе
		ОграничениеТипа = ?(ТекущиеДанные.НаправлениеВыпускаФорма = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад"),
			Новый ОписаниеТипов("СправочникСсылка.Склады"),
			Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;
	
	Возврат ОграничениеТипа;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НаправлениеПродолжитьОбработку()
	
	// Ссылка для идентификации действия "продолжить обработку" (отдельная хозяйственная операция отсутствует)
	Возврат ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаВПроизводство");
	
КонецФункции

#КонецОбласти

#Область ВыполнениеДействий

&НаСервере
Функция ВыполнитьДействиеВФоне()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ОбработкаОбъект, ПараметрыУказанияСерий);
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Партии", ОбработкаОбъект.Партии.Выгрузить());
	ПараметрыПроцедуры.Вставить("Серии", ОбработкаОбъект.Серии.Выгрузить());
	ПараметрыПроцедуры.Вставить("ИдентификаторФормы", УникальныйИдентификатор);
	
	Для каждого Реквизит Из ОбработкаОбъект.Метаданные().Реквизиты Цикл
		ПараметрыПроцедуры.Вставить(Реквизит.Имя, ОбработкаОбъект[Реквизит.Имя]);
	КонецЦикла;
	
	// Настройка счетов учета.
	НастройкаСчетовУчетаСервер.ЗаписатьНастройкиСчетовУчетаФормы(ЭтотОбъект);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Деление (сокращение, отмена) партии производства';
															|en = 'Delete (reduce, cancel) production lot'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ДелениеПартииПроизводства.ВыполнитьДействиеВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		НачатьОжидание = Истина;
		
	Иначе
		
		ОбработатьВыполнениеДействияВФоне(ДлительнаяОперация);
		
		НачатьОжидание = Ложь;
		ДлительнаяОперация = Неопределено;
		
	КонецЕсли;
	
	Возврат НачатьОжидание;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьДействиеВФонеЗавершение(Результат, ДопПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат <> Неопределено Тогда
		
		ОбработатьВыполнениеДействияВФоне(Результат);
		
		Если ДействиеВыполнено Тогда
			Оповестить("ИзменениеПоследовательностиЭтапов", Объект.ПартияПроизводства);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыполнениеДействияВФоне(Результат)
	
	Если Результат.Статус = "Ошибка" Тогда
		
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
		
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		РезультатСтруктура = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если ТипЗнч(РезультатСтруктура) = Тип("Структура") Тогда
		
			Для каждого Сообщение Из РезультатСтруктура.Сообщения Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
			КонецЦикла;
			
			Если НЕ РезультатСтруктура.Отказ Тогда
				ДействиеВыполнено = Истина;
				ПоказатьРезультатВыполнения(РезультатСтруктура)
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьРезультатВыполнения(Ссылки)
	
	// Выборка данных
	Этапы = Новый ТаблицаЗначений;
	Этапы.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	Этапы.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	Этапы.Колонки.Добавить("Создан", Новый ОписаниеТипов("Булево"));
	Этапы.Колонки.Добавить("Изменен", Новый ОписаниеТипов("Булево"));
	
	Если Ссылки.Свойство("ЭтапСоздан") Тогда
		Для каждого Ссылка Из Ссылки.ЭтапСоздан Цикл
			НоваяСтрока = Этапы.Добавить();
			НоваяСтрока.Ссылка = Ссылка;
			НоваяСтрока.Описание = НСтр("ru = 'Создан';
										|en = 'Created'");
			НоваяСтрока.Создан = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если Ссылки.Свойство("ЭтапИзменен") Тогда
		Для каждого Ссылка Из Ссылки.ЭтапИзменен Цикл
			НоваяСтрока = Этапы.Добавить();
			НоваяСтрока.Ссылка = Ссылка;
			НоваяСтрока.Описание = НСтр("ru = 'Изменен';
										|en = 'Changed'");
			НоваяСтрока.Изменен = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если Ссылки.Свойство("ЭтапУдален") Тогда
		Для каждого Ссылка Из Ссылки.ЭтапУдален Цикл
			НоваяСтрока = Этапы.Добавить();
			НоваяСтрока.Ссылка = Ссылка;
			НоваяСтрока.Описание = НСтр("ru = 'Удален';
										|en = 'Removed'");
		КонецЦикла;
	КонецЕсли;
	
	Этапы.Свернуть("Ссылка, Описание, Создан, Изменен");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Этапы.Ссылка   КАК Ссылка,
		|	Этапы.Описание КАК Описание,
		|	Этапы.Создан   КАК Создан,
		|	Этапы.Изменен  КАК Изменен
		|ПОМЕСТИТЬ ВТЭтапы
		|ИЗ
		|	&Этапы КАК Этапы
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭтапПроизводства2_2.ПартияПроизводства           КАК ПартияПроизводства,
		|	ЭтапПроизводства2_2.ПартияПроизводства.Код       КАК КодПартии,
		|	ЭтапПроизводства2_2.ПартияПроизводства.ОсновноеИзделиеНоменклатура КАК НоменклатураПартии,
		|	ЭтапПроизводства2_2.Ссылка                       КАК Ссылка,
		|	ЭтапПроизводства2_2.Статус                       КАК Статус,
		|	ЭтапПроизводства2_2.КоличествоУпаковокПлан       КАК КоличествоУпаковок,
		|	ЭтапПроизводства2_2.УпаковкаПлан                 КАК Упаковка,
		|	ЭтапПроизводства2_2.Номер                        КАК Номер,
		|	ЭтапПроизводства2_2.Распоряжение.Номер           КАК НомерРаспоряжения,
		|	ЭтапПроизводства2_2.НаименованиеЭтапа            КАК НаименованиеЭтапа,
		|	ЕСТЬNULL(ВТЭтапы.Описание, &ОписаниеНеИзменялся) КАК Описание,
		|	ВЫБОР
		|		КОГДА ЭтапПроизводства2_2.ПометкаУдаления
		|			ТОГДА 2
		|		КОГДА ЭтапПроизводства2_2.Проведен
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ                                            КАК НомерКартинки,
		|	(ЕСТЬNULL(ВТЭтапы.Создан, ЛОЖЬ)
		|		ИЛИ ЕСТЬNULL(ВТЭтапы.Изменен, ЛОЖЬ))
		|	И (ЭтапПроизводства2_2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
		|		ИЛИ (НЕ ЭтапПроизводства2_2.Проведен
		|			И НЕ ЭтапПроизводства2_2.ПометкаУдаления)) КАК ЕстьОшибки
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЭтапы КАК ВТЭтапы
		|		ПО ЭтапПроизводства2_2.Ссылка = ВТЭтапы.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафикЭтаповПроизводства
		|		ПО ЭтапПроизводства2_2.Ссылка = НормативныйГрафикЭтаповПроизводства.ЭтапПроизводства
		|ГДЕ
		|	ЭтапПроизводства2_2.ПартияПроизводства В
		|			(ВЫБРАТЬ
		|				ВЫРАЗИТЬ(ВТЭтапы.Ссылка КАК Документ.ЭтапПроизводства2_2).ПартияПроизводства
		|			ИЗ
		|				ВТЭтапы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПартияПроизводства,
		|	НормативныйГрафикЭтаповПроизводства.ДлительностьДоЗапуска
		|ИТОГИ ПО
		|	ПартияПроизводства");
	Запрос.УстановитьПараметр("Этапы", Этапы);
	Запрос.УстановитьПараметр("ОписаниеНеИзменялся", НСтр("ru = 'Не изменялся';
															|en = 'has not been changed'"));
	ВыборкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Вывод дерева
	РезультатВыполнения.ПолучитьЭлементы().Очистить();
	
	Пока ВыборкаИтоги.Следующий() Цикл
		
		СтрокаПартия = РезультатВыполнения.ПолучитьЭлементы().Добавить();
		СтрокаПартия.Ссылка = ВыборкаИтоги.ПартияПроизводства;
		
		СтрокаПартия.СкрыватьКартинку = Истина;
		
		Выборка = ВыборкаИтоги.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ПустаяСтрока(СтрокаПартия.Представление) Тогда
				СтрокаПартия.Представление = ПредставлениеПартии(Выборка.КодПартии, Выборка.НомерРаспоряжения);
			КонецЕсли;
			
			НоваяСтрока = СтрокаПартия.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,
				"Ссылка, Статус, Описание, НомерКартинки, КоличествоУпаковок, Упаковка, НоменклатураПартии, ЕстьОшибки");
			НоваяСтрока.Представление = Документы.ЭтапПроизводства2_2.ПредставлениеЭтапа(Выборка);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Ссылки.Свойство("КорректировкаСоздана") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			Ссылки.КорректировкаСоздана,
			"Проведен, Представление");
		Для каждого Элемент Из ЗначенияРеквизитов Цикл
			НоваяСтрока = РезультатВыполнения.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Ссылка = Элемент.Ключ;
			НоваяСтрока.Представление = Элемент.Значение.Представление;
			НоваяСтрока.НомерКартинки = ?(Элемент.Значение.Проведен, 1, 0);
			НоваяСтрока.Описание = НСтр("ru = 'Создан';
										|en = 'Created'");
			НоваяСтрока.ЕстьОшибки = Не Элемент.Значение.Проведен;
		КонецЦикла;
		
	КонецЕсли;
	
	// Настройка формы
	Элементы.ГруппаШаги.ТекущаяСтраница = Элементы.СтраницаРезультаты;
	Элементы.ВыполнитьДействие.Видимость = Ложь;
	Элементы.Закрыть.Видимость = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Функция Действия()
	
	Возврат Новый Структура("Сократить, Отменить, Разделить, Продолжить", 0, 1, 2, 3);
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеЭтапа(ПартияПроизводства, Этап)
	
	Результат = Неопределено;
	
	Если Этап.Пустая() Тогда
		
		ТекстЗапроса = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Этапы.УпаковкаПлан КАК Упаковка,
			|	ВЫБОР
			|		КОГДА Этапы.УпаковкаПлан = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА ПРЕДСТАВЛЕНИЕ(Этапы.ПартияПроизводства.ОсновноеИзделиеНоменклатура.ЕдиницаИзмерения)
			|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Этапы.УпаковкаПлан)
			|	КОНЕЦ КАК ИзделиеУпаковкаПредставление,
			|	ЕСТЬNULL(&КоэффициентУпаковки, 1) КАК КоэффициентУпаковки
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК Этапы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафик
			|		ПО Этапы.Ссылка = НормативныйГрафик.ЭтапПроизводства
			|ГДЕ
			|	Этапы.ПартияПроизводства = &ПартияПроизводства
			|	И Этапы.Проведен
			|
			|УПОРЯДОЧИТЬ ПО
			|	НормативныйГрафик.ДлительностьДоЗапуска";
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&КоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"Этапы.УпаковкаПлан",
				"Этапы.ПартияПроизводства.ОсновноеИзделиеНоменклатура"));
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Результат = Новый Структура;
			Результат.Вставить("Упаковка", Выборка.Упаковка);
			Результат.Вставить("ИзделиеУпаковкаПредставление", Выборка.ИзделиеУпаковкаПредставление);
			Результат.Вставить("КоэффициентУпаковки", Выборка.КоэффициентУпаковки);
			Результат.Вставить("ЭтапПредставление", "");
			Результат.Вставить("Подразделение", Неопределено);
			Результат.Вставить("Произведено", Ложь);
			Результат.Вставить("СоздатьЭтап", Ложь);
			Результат.Вставить("ЭтапСпецификации", Неопределено);
			
		КонецЕсли;
		
	Иначе
		
		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	МИНИМУМ(ПараллельныеЭтапы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)) КАК ЭтапыЗавершены,
			|	КОЛИЧЕСТВО(ПараллельныеЭтапы.Ссылка) > 1 КАК ЕстьПараллельныеЭтапы
			|ПОМЕСТИТЬ ВТИтоги
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК Этапы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ПараллельныеЭтапы
			|		ПО Этапы.ПартияПроизводства = ПараллельныеЭтапы.ПартияПроизводства
			|			И Этапы.НомерСледующегоЭтапа = ПараллельныеЭтапы.НомерСледующегоЭтапа
			|ГДЕ
			|	Этапы.Ссылка = &Этап
			|	И ПараллельныеЭтапы.Проведен
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Этапы.Номер                           КАК Номер,
			|	Этапы.НаименованиеЭтапа               КАК НаименованиеЭтапа,
			|	Этапы.Подразделение                   КАК Подразделение,
			|	Этапы.УпаковкаПлан                    КАК Упаковка,
			|	ВЫБОР
			|		КОГДА Этапы.УпаковкаПлан = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА ПРЕДСТАВЛЕНИЕ(Этапы.ПартияПроизводства.ОсновноеИзделиеНоменклатура.ЕдиницаИзмерения)
			|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Этапы.УпаковкаПлан)
			|	КОНЕЦ                                 КАК ИзделиеУпаковкаПредставление,
			|	ЕСТЬNULL(&КоэффициентУпаковки, 1)     КАК КоэффициентУпаковки,
			|	ВТИтоги.ЭтапыЗавершены                КАК Произведено,
			|	ВТИтоги.ЭтапыЗавершены
			|		ИЛИ ВТИтоги.ЕстьПараллельныеЭтапы КАК СоздатьЭтап
			|	
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК Этапы
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтоги КАК ВТИтоги
			|		ПО (ИСТИНА)
			|ГДЕ
			|	Этапы.Ссылка = &Этап
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Последователи.Этап.Этап КАК Этап
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.Последователи КАК Последователи
			|ГДЕ
			|	Последователи.Ссылка = &Этап
			|	И Последователи.ТипСвязи = 0";
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&КоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"Этапы.УпаковкаПлан",
				"Этапы.ПартияПроизводства.ОсновноеИзделиеНоменклатура"));
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Этап", Этап);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		РезультатЗапроса = МассивРезультатов[1]; // РезультатЗапроса
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Результат = Новый Структура;
		Результат.Вставить("ЭтапПредставление", Документы.ЭтапПроизводства2_2.ПредставлениеЭтапа(Выборка));
		Результат.Вставить("Подразделение", Выборка.Подразделение);
		Результат.Вставить("Упаковка", Выборка.Упаковка);
		Результат.Вставить("ИзделиеУпаковкаПредставление", Выборка.ИзделиеУпаковкаПредставление);
		Результат.Вставить("КоэффициентУпаковки", Выборка.КоэффициентУпаковки);
		Результат.Вставить("Произведено", Выборка.Произведено);
		Результат.Вставить("СоздатьЭтап", Выборка.СоздатьЭтап);
		
		РезультатЗапроса = МассивРезультатов[2]; // РезультатЗапроса
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Результат.Вставить("ЭтапСпецификации", Выборка.Этап);
		Иначе
			Результат.Вставить("ЭтапСпецификации", Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПриНачалеРедактированияПартии()
	
	ЗаполнитьСписокВыбораНаправлениеВыпускаФорма();
	
	ОграничениеТипа = ОграничениеТипаПолучателя(Элементы.Партии.ТекущиеДанные);
	Элементы.Получатель.ОграничениеТипа = ОграничениеТипа;
	Элементы.ПартииПолучатель.ОграничениеТипа = ОграничениеТипа;
	
	// Кеширование
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(
		Элементы.Партии,
		ЭтаФорма);
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элементы.Партии,
		КэшированныеЗначения,
		ПараметрыУказанияСерий,
		Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПартию(ИндексПартии)
	
	НоваяСтрока = Объект.Партии.Добавить();
	НоваяСтрока.ИндексПартии = ИндексПартии;
	НоваяСтрока.Произведено = Произведено;
	НоваяСтрока.ДатаПроизводства = ТекущаяДатаСеанса();
	НоваяСтрока.Получатель = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	НоваяСтрока.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
	НоваяСтрока.НаправлениеВыпускаФорма = НаправлениеПродолжитьОбработку();
	НоваяСтрока.ПродолжитьОбработку = Истина;
	НоваяСтрока.ПродолжитьПоСпецификации = Истина;
	НоваяСтрока.ПродолжитьПоСпецификацииФорма = Истина;
	НоваяСтрока.ПродолжитьСпецификация = Объект.Спецификация;
	НоваяСтрока.ПродолжитьЭтап = ЭтапСпецификации;
	НоваяСтрока.УпаковкаПартии = Объект.Упаковка;
	НоваяСтрока.НоменклатураПартии = Объект.ОсновноеИзделиеНоменклатура;
	НоваяСтрока.Подразделение = Объект.Подразделение;
	
	СкладыКлиентСервер.ЗаполнитьСкладПоУмолчанию(
		ИспользоватьНесколькоСкладов, 
		СкладПоУмолчанию, 
		НоваяСтрока,
		"Получатель");
		
	ДоходыИРасходыКлиентСервер.ПриДобавленииСтрокиВТаблицу(
		ЭтаФорма,
		НоваяСтрока,
		"Объект.Партии");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеПартии(КодПартии, НомерРаспоряжения)
	
	Возврат СокрЛП(ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(НомерРаспоряжения))
			+ "."
			+ Формат(КодПартии, "ЧГ=0")
	
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьКоличествоЕдиницПартии(Номенклатура, Упаковка, КоличествоУпаковок)
	
	ДанныеУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентВесОбъемПрочиеРеквизитыУпаковки(
		Упаковка,
		Номенклатура);
	
	Результат = КоличествоУпаковок * ДанныеУпаковки.Коэффициент;
		
	Если ДанныеУпаковки.НужноОкруглятьКоличество Тогда
		Результат = Окр(Результат, 0 ,РежимОкругления.Окр15как20);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
