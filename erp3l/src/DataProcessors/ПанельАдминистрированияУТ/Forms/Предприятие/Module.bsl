#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Значения реквизитов формы
	СоставНабораКонстантФормы    = ОбщегоНазначенияУТ.ПолучитьСтруктуруНабораКонстант(НаборКонстант);
	ВнешниеРодительскиеКонстанты = НастройкиСистемыПовтИсп.ПолучитьСтруктуруРодительскихКонстант(СоставНабораКонстантФормы);
	РежимРаботы = Новый Структура;
	
	ВнешниеРодительскиеКонстанты.Вставить("ИспользоватьСделкиСКлиентами");
	ВнешниеРодительскиеКонстанты.Вставить("ИспользоватьПроизводство");
	ВнешниеРодительскиеКонстанты.Вставить("ИспользоватьВалютныеПлатежи");
	//++ НЕ УТ
	ВнешниеРодительскиеКонстанты.Вставить("ИспользоватьПроизводствоНаСтороне");
	ВнешниеРодительскиеКонстанты.Вставить("ИспользоватьВнеоборотныеАктивы2_2");
	ВнешниеРодительскиеКонстанты.Вставить("ИспользоватьВнеоборотныеАктивы2_4");
	//-- НЕ УТ
	
	РежимРаботы.Вставить("СоставНабораКонстантФормы",    Новый ФиксированнаяСтруктура(СоставНабораКонстантФормы));
	РежимРаботы.Вставить("ВнешниеРодительскиеКонстанты", Новый ФиксированнаяСтруктура(ВнешниеРодительскиеКонстанты));
	
	РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	// Обновление состояния элементов
	ОбновитьКэшируемыеДанные();
	УстановитьДоступность();
	НастройкиСистемыЛокализация.ПриСозданииНаСервере_Предприятие(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗначенияПоУмолчанию = Новый Структура;

	НастройкиСистемыЛокализация.ПриЧтенииНаСервере_Предприятие(ЭтаФорма);
	ОбщегоНазначенияУТКлиентСервер.СохранитьЗначенияДоИзменения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик оповещения формы.
//
// Параметры:
//	ИмяСобытия - Строка - обрабатывается событие Запись_НаборКонстант, генерируемое панелями администрирования,
//  				а также событие "Запись_Валюты", генерируемое формой элемента справочника валюты
//	Параметр   - Структура - содержит имена констант, подчиненных измененной константе, "вызвавшей" оповещение.
//	Источник   - Строка - имя измененной константы, "вызвавшей" оповещение.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда
		
		// Если это изменена константа, расположенная в другой форме и влияющая на значения констант этой формы,
		// то прочитаем значения констант и обновим элементы этой формы.
		Если РежимРаботы.ВнешниеРодительскиеКонстанты.Свойство(Источник)
			ИЛИ (ТипЗнч(Параметр) = Тип("Структура")
			И ОбщегоНазначенияУТКлиентСервер.ПолучитьОбщиеКлючиСтруктур(
			Параметр, РежимРаботы.ВнешниеРодительскиеКонстанты).Количество() > 0) Тогда
			
			ЭтаФорма.Прочитать();
			УстановитьДоступность();
			
		КонецЕсли;
		
		Если Источник = ЭтаФорма Тогда
			Если Параметр.Свойство("Элемент") Тогда
				Подключаемый_ПриИзмененииРеквизита(Параметр.Элемент, Истина, Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	Если ИмяСобытия = "Запись_Валюты" Тогда
		ОбновитьКэшируемыеДанные();
		УстановитьДоступность("Справочник.Валюты");
		УстановитьДоступность("НаборКонстант.ИспользоватьЗагрузкуКурсовВалютЕЦБ");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ФормаОбработки = "Обработка.МеждународныйКлассификаторВалют.Форма.КлассификаторВалют";
	
	НастройкиСистемыКлиентЛокализация.ИмяФормыПодбораВалютыИзКлассификатора_Предприятие(ФормаОбработки);
	
	Если ИсточникВыбора.ИмяФормы = ФормаОбработки И ВыбранноеЗначение <> Неопределено Тогда
		УстановитьДоступность("Справочник.Валюты");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьПодразделенияПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВалютаУправленческогоУчетаПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВалютаРегламентированногоУчетаПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойКалендарьПредприятияПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНесколькоВалютПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗагрузкуКурсовВалютЕЦБПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНесколькоКлассификацийЗадолженностиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРеквизита(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьПроизводственныеКалендари(Команда)
	ОткрытьФорму("Справочник.ПроизводственныеКалендари.ФормаСписка", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВалюты(Команда)
	ОткрытьФорму("Справочник.Валюты.ФормаСписка", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВалюту(Команда)
	
	ФормаОбработки = "Обработка.МеждународныйКлассификаторВалют.Форма.КлассификаторВалют";
	
	НастройкиСистемыКлиентЛокализация.ИмяФормыПодбораВалютыИзКлассификатора_Предприятие(ФормаОбработки);
	
	ОткрытьФорму(ФормаОбработки, Новый Структура("МножественныйВыборЗапрещен", Истина), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВалюты(Команда)
	ОткрытьФорму("Справочник.Валюты.ФормаОбъекта",
		Новый Структура("Ключ", ПолучитьВалютуДляОтображения()));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВариантыКлассификацииЗадолженности(Команда)
	
	ОткрытьФорму("Справочник.ВариантыКлассификацииЗадолженности.ФормаСписка", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвойстваКлассификацииЗадолженности(Команда)
	
	ОткрытьФорму("Справочник.ВариантыКлассификацииЗадолженности.ФормаОбъекта",
		Новый Структура("Ключ", ОбщегоНазначенияУТВызовСервера.ВариантКлассификацииЗадолженностиПоУмолчанию()),
		ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина, ВнешнееИзменение = Ложь)
	
	Если НЕ ВнешнееИзменение Тогда
		НастройкиСистемыКлиентЛокализация.ПриИзмененииРеквизита_Предприятие(
			Элемент,
			ЭтаФорма);
	КонецЕсли;
	
	КонстантаИмя = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	Если КонстантаИмя <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылкиФормы(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НастройкиСистемыКлиентЛокализация.ОбработкаНавигационнойСсылкиФормы_Предприятие(Элемент,
		НавигационнаяСсылкаФорматированнойСтроки, 
		СтандартнаяОбработка,
		ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВызовСервера

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат КонстантаИмя;
	
КонецФункции

#КонецОбласти

#Область Сервер

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если СтрНачинаетсяС(НРег(РеквизитПутьКДанным), НРег("НаборКонстант.")) Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		ЧастиИмени = СтрРазделить(РеквизитПутьКДанным, ".");
		КонстантаИмя = ЧастиИмени[1];
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		Если НастройкиСистемыПовтИсп.ЕстьПодчиненныеКонстанты(КонстантаИмя, КонстантаЗначение) Тогда
			ЭтаФорма.Прочитать();
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкиСистемыЛокализация.СохранитьЗначениеРеквизита_Предприятие(КонстантаИмя, КонстантаЗначение, ЭтаФорма);
	
	Возврат КонстантаИмя
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если РеквизитПутьКДанным = "НаборКонстант.ВалютаУправленческогоУчета" ИЛИ РеквизитПутьКДанным = "" Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ВалютаУправленческогоУчета, ЗначениеЗаполнено(НаборКонстант.ВалютаУправленческогоУчета));
			
	КонецЕсли;
		
	Если РеквизитПутьКДанным = "НаборКонстант.БазоваяВалютаПоУмолчанию" ИЛИ РеквизитПутьКДанным = "" Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.БазоваяВалютаПоУмолчанию, ЗначениеЗаполнено(НаборКонстант.БазоваяВалютаПоУмолчанию));
			
	КонецЕсли;
		
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьНесколькоВалют" ИЛИ РеквизитПутьКДанным = "Справочник.Валюты"
	ИЛИ РеквизитПутьКДанным = "" Тогда
		
		ЗначениеКонстанты = НаборКонстант.ИспользоватьНесколькоВалют;
		
		Если ЗначениеКонстанты Тогда
			
			Элементы.ГруппаСтраницыВалюты.ТекущаяСтраница = Элементы.ГруппаОткрытьВалюты;
			
		Иначе

			Если КоличествоВалют = 1 Тогда
				Элементы.ГруппаСтраницыВалюты.ТекущаяСтраница = Элементы.ГруппаПараметрыВалюты;
			ИначеЕсли КоличествоВалют = 0 Тогда
				Элементы.ГруппаСтраницыВалюты.ТекущаяСтраница = Элементы.ГруппаСоздатьВалюту;
			ИначеЕсли КоличествоВалют > 1 Тогда
				Элементы.ГруппаСтраницыВалюты.ТекущаяСтраница = Элементы.ГруппаОткрытьВалюты;
			КонецЕсли;
			
		КонецЕсли;
		
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ИспользоватьНесколькоВалют, ЗначениеКонстанты);
		
		Элементы.ВалютаУправленческогоУчета.Доступность = ЗначениеКонстанты
			ИЛИ НЕ ЗначениеЗаполнено(НаборКонстант.ВалютаУправленческогоУчета);
		Элементы.БазоваяВалютаПоУмолчанию.Доступность = ЗначениеКонстанты
			ИЛИ НЕ ЗначениеЗаполнено(НаборКонстант.БазоваяВалютаПоУмолчанию);
		
	КонецЕсли;
		
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьНесколькоОрганизаций" ИЛИ РеквизитПутьКДанным = "" Тогда
		
		ЗначениеКонстанты = НаборКонстант.ИспользоватьНесколькоОрганизаций;
		
		Если ЗначениеКонстанты Тогда
			Элементы.ГруппаСтраницыИспользоватьНесколькоОрганизаций.ТекущаяСтраница = Элементы.ГруппаНесколькоОрганизаций;
		Иначе
			Элементы.ГруппаСтраницыИспользоватьНесколькоОрганизаций.ТекущаяСтраница = Элементы.ГруппаОднаОрганизация;
		КонецЕсли;
		Элементы.ИспользоватьУправленческуюОрганизацию.Доступность = ЗначениеКонстанты;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПодразделения" 
	 ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПроизводствоНаСтороне"
	 //++ НЕ УТ
	 ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьВнеоборотныеАктивы2_2"
	 ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьВнеоборотныеАктивы2_4"
	 //-- НЕ УТ
	 ИЛИ РеквизитПутьКДанным = "" Тогда
	 
	 	ЗапрещеноОтключение = 
		    НаборКонстант.ИспользоватьПодразделения
			И (НаборКонстант.ИспользоватьПроизводствоНаСтороне
				ИЛИ НаборКонстант.ИспользоватьПроизводство
				//++ НЕ УТ
				ИЛИ НаборКонстант.ИспользоватьВнеоборотныеАктивы2_2
				ИЛИ НаборКонстант.ИспользоватьВнеоборотныеАктивы2_4
				//-- НЕ УТ
				);
				
		Элементы.ИспользоватьПодразделения.Доступность = НЕ ЗапрещеноОтключение;
		Элементы.ГруппаКомментарийИспользоватьПодразделения.Видимость = ЗапрещеноОтключение;
			
		// Описание причин ограничений выбора режимов.
		ТекстОграничения = "";
		Если НаборКонстант.ИспользоватьПроизводствоНаСтороне Тогда
			ТекстОграничения = ТекстОграничения + "
			|- " + НСтр("ru = 'используется переработка на стороне';
						|en = 'processing by the third party is used'")
		КонецЕсли;
		Если НаборКонстант.ИспользоватьПроизводство Тогда
			ТекстОграничения = ТекстОграничения + "
			|- " + НСтр("ru = 'используется производство';
						|en = 'production is used'")
		КонецЕсли;
		
		//++ НЕ УТ
		Если НаборКонстант.ИспользоватьВнеоборотныеАктивы2_2
			ИЛИ НаборКонстант.ИспользоватьВнеоборотныеАктивы2_4 Тогда
			ТекстОграничения = ТекстОграничения + "
			|- " + НСтр("ru = 'используется учет внеоборотных активов';
						|en = 'fixed asset accounting is used'")
		КонецЕсли;
		//-- НЕ УТ
		
		Если ЗначениеЗаполнено(ТекстОграничения) Тогда
			ТекстОграничения = НСтр("ru = 'Невозможно отключение подразделений:';
									|en = 'Cannot disable business units:'")
				+ ТекстОграничения;
		КонецЕсли;
		
		Если Элементы.ГруппаКомментарийИспользоватьПодразделения.Видимость Тогда
			Элементы.КомментарийИспользоватьПодразделения.Заголовок = СокрЛП(ТекстОграничения);
		КонецЕсли;
		
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(Элементы.ИспользоватьПодразделения, НаборКонстант.ИспользоватьПодразделения);
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьНесколькоВалют"
		Или Не ЗначениеЗаполнено(РеквизитПутьКДанным) Тогда
		
		ДоступностьЭлемента = Не НаборКонстант.ИспользоватьВалютныеПлатежи;
		
		Элементы.ИспользоватьНесколькоВалют.Доступность = ДоступностьЭлемента;
		Элементы.ГруппаКомментарийИспользоватьВалюты.Видимость = Не ДоступностьЭлемента;
		
		ТекстОграничения = "";
		Если Не ДоступностьЭлемента Тогда
			ТекстОграничения = ТекстОграничения + "
				|- " + НСтр("ru = 'используются платежи в валюте и валютный контроль';
							|en = 'payments in currency and foreign exchange control are used'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстОграничения) Тогда
			ТекстОграничения = НСтр("ru = 'Невозможно отключение нескольких валют:';
									|en = 'Cannot disable several currencies:'") + ТекстОграничения;
		КонецЕсли;
		
		Элементы.КомментарийИспользоватьВалюты.Заголовок = СокрЛП(ТекстОграничения);
		
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ИспользоватьНесколькоВалют, НаборКонстант.ИспользоватьНесколькоВалют);
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьЗагрузкуКурсовВалютЕЦБ" 
		Или Не ЗначениеЗаполнено(РеквизитПутьКДанным) Тогда

			Элементы.ИспользоватьЗагрузкуКурсовВалютЕЦБ.Доступность = ЗагрузкаКурсовВалютЕЦБ;
			Элементы.ГруппаКомментарийИспользоватьЗагрузкуКурсовВалютЕЦБ.Видимость = Не ЗагрузкаКурсовВалютЕЦБ;
			
			Элементы.ИспользоватьЗагрузкуКурсовВалютЕЦБ.РасширеннаяПодсказка.Заголовок =
			НСтр("ru = 'Курсы валют загружаются с сайта Европейского Центрального Банка. Базовая валюта - Евро (EUR).';
				|en = 'Exchange rates are imported from the European Central Bank website. The base currency is euro (EUR).'");
			
			ТекстОграничения = "";
			Если Не ЗагрузкаКурсовВалютЕЦБ Тогда
				ТекстОграничения = ТекстОграничения + НСтр("ru = 'Загрузка доступна, если в справочнике ""Валюты"" заведена валюта Евро (EUR).';
															|en = 'Import is available if Euro (EUR) currency is created in the ""Currencies"" catalog.'");
			КонецЕсли;
			
			Элементы.КомментарийИспользоватьЗагрузкуКурсовВалютЕЦБ.Заголовок = СокрЛП(ТекстОграничения);
			
			ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
					Элементы.ИспользоватьЗагрузкуКурсовВалютЕЦБ, НаборКонстант.ИспользоватьЗагрузкуКурсовВалютЕЦБ);
			
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьНесколькоКлассификацийЗадолженности" ИЛИ РеквизитПутьКДанным = "" Тогда
		
		Если НаборКонстант.ИспользоватьНесколькоКлассификацийЗадолженности Тогда
			Элементы.ГруппаКлассификацияЗадолженностейПраво.ТекущаяСтраница = Элементы.ГруппаКлассификацияЗадолженностейПравоНесколькоВариантов;
		Иначе
			Элементы.ГруппаКлассификацияЗадолженностейПраво.ТекущаяСтраница = Элементы.ГруппаКлассификацияЗадолженностейПравоОдинВариант;
		КонецЕсли;

	КонецЕсли;
	
	ОбменДаннымиУТУП.УстановитьДоступностьНастроекУзлаИнформационнойБазы(ЭтаФорма);
	НастройкиСистемыЛокализация.УстановитьДоступность_Предприятие(РеквизитПутьКДанным, ЭтаФорма);
	ОтображениеПредупрежденияПриРедактировании(РеквизитПутьКДанным);
	
КонецПроцедуры

&НаСервере
Процедура ОтображениеПредупрежденияПриРедактировании(РеквизитПутьКДанным)
	
	СтруктураКонстант = Новый Структура();
	
	НастройкиСистемыЛокализация.ОтображениеПредупрежденияПриРедактировании_Предприятие(СтруктураКонстант);
	
	Для Каждого КлючИЗначение Из СтруктураКонстант Цикл
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы[КлючИЗначение.Ключ],
			НаборКонстант[КлючИЗначение.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКэшируемыеДанные()
	ЗагрузкаКурсовВалютЕЦБ = ЗначениеЗаполнено(Справочники.Валюты.НайтиПоКоду("978"));;
	КоличествоВалют = Справочники.Валюты.КоличествоВалют();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВалютуДляОтображения()
	
	БазоваяВалютаПоУмолчанию = Константы.БазоваяВалютаПоУмолчанию.Получить();
	Если ЗначениеЗаполнено(БазоваяВалютаПоУмолчанию) Тогда
		Возврат БазоваяВалютаПоУмолчанию;
	Иначе
		Возврат Справочники.Валюты.ПолучитьВалютуПоУмолчанию();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти