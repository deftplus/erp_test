///////////////////////////////////////////////////////////////////////////////
//
// Обработка содержащая реализацию функций конвертации объектов УХ в/из формат
// SCMIntermediateFormat.
//
// Это должен быть первый конвертер в цепочке. Не изменяйте его.
// Вы можете создать свой конвертер и переопределить или создать в нем
// любую функцию конвертации. Подробное описание см. модуль объекта
// обработки КонвертерSCMIntermediateFormatУХ.
// 
// Перечень типов данных конфигурации и поддерживаемых функций см. функцию
// ПолучитьСоответствиеФункций().
//
///////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

	
// Объект обработки "КонвертерSCMIntermediateFormatУХ".
// Читайте переменную не напрямую, а функцией ПолучитьБазовуюОбработку().
Перем БазоваяОбработкаГлобальнаяПеременная;
// Объект обработки "КонвертерОбъектовXDTOУХ".
// Читайте переменную не напрямую, а функцией ПолучитьКонвертерXDTO().
Перем КонвертерXDTOГлобальнаяПеременная;

#Область ИдентификацияОбработки


// Возвращает описание конвертера для корневой обработки
// "КонвертерSCMIntermediateFormatУХ".
//
Функция ПолучитьОписаниеКонвертера() Экспорт
	Описание = Новый Структура;
	// Идет первым за основным конвертером
	// (который сам ничего преобразовывает).
	Описание.Вставить(
		"РасширяетКонвертер",
		"КонвертерSCMIntermediateFormatУХ");
	Описание.Вставить(
		"СоответвиеФункцийКонвертации",
		ПолучитьСоответствиеФункций());
	Возврат Описание;
КонецФункции


#КонецОбласти


#Область ПрограммныйИнтерфейс


// Обязательна к реализации в подчиненных обработках.
// Позволяет не инициализировать корневую обработку несколько раз,
// а установить ее принудительно при создании данной обработки.
Процедура УстановитьБазовуюОбработку(Обработка) Экспорт
	БазоваяОбработкаГлобальнаяПеременная = Обработка;
КонецПроцедуры

// Обязательна к реализации в подчиненных обработках.
// Реализует диспетчер для типов и функций конвертации.
//	
// Параметры:
//  ИмяФункции	- Строка - имя функции.
//	ИмяТипа1С	- Строка - имя типа значения конфигурации УХ или пространства
//					имен xsd пакета SCMIntermediateFormat.
//					Необходим для определения конечной функции, которая будет
//					использована при сериализации/десерилазиации.
//	Контекст	- Произвольные данные для функции конвертации.
//			
// Возвращаемое значение:
//	- Структура - см. описание Обработки.КонвертерОбъектовXDTOУХ.РезультатУспех(),
//					Обработки.КонвертерОбъектовXDTOУХ.РезультатОшибка():
//		- Результат - ОбъектXDTO|Объект 1С|Ссылка 1С - представление объекта.
//
Функция ВыполнитьФункциюКонвертации(ИмяФункции, ИмяТипа1С, Контекст) Экспорт
	Попытка
		Если ИмяФункции = "ПреобразоватьСсылкуВXDTO" Тогда
			Возврат ПреобразоватьСсылкуВXDTO(ИмяТипа1С, Контекст);
		ИначеЕсли ИмяФункции = "ПреобразоватьСписокВXDTO" Тогда
			Возврат ПреобразоватьСписокВXDTO(ИмяТипа1С, Контекст);
		ИначеЕсли ИмяФункции = "НайтиСсылкуНаОбъектИзXDTO" Тогда
			Возврат НайтиСсылкуНаОбъектИзXDTO(ИмяТипа1С, Контекст);
		ИначеЕсли ИмяФункции = "СоздатьОбъектИзXDTO" Тогда
			Возврат СоздатьОбъектИзXDTO(ИмяТипа1С, Контекст);
		ИначеЕсли ИмяФункции = "ОбновитьОбъектИзXDTO" Тогда
			Возврат ОбновитьОбъектИзXDTO(ИмяТипа1С, Контекст);
		КонецЕсли;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = СтрШаблон(НСтр(
			"ru='Выполнение функции конвертации %1 для типа %2 закончилось ошибкой!%3Описание ошибки:%3%4'"),
			ИмяФункции,
			ИмяТипа1С,
			Символы.ПС,
			ПодробноеПредставлениеОшибки(Инфо));
		Возврат Обработки.КонвертерОбъектовXDTOУХ.РезультатОшибка(
			ТекстОшибки);
	КонецПопытки;
	Возврат Обработки.КонвертерОбъектовXDTOУХ.РезультатОшибка(
		СтрШаблон(НСтр(
			"ru='Функция конвертации %1 для типа %2 не найдена!'"),
			ИмяФункции,
			ИмяТипа1С));
КонецФункции

// Заполняет обработку конвертации в XDTO правилами для преобразования
// объектов УХ в формат SCMIntermediateFormat.
//
Процедура ЗаполнитьПравилаПреобразованияКонвертера1СВXDTO(КонвертерXDTO) Экспорт
	БазоваяОбработка = ПолучитьБазовуюОбработку();
	ТекстПравил = БазоваяОбработка.ПолучитьТекстSCMIntermediateFormat();
	КонвертерXDTO.ПрочитатьИзТекста(ТекстПравил);
КонецПроцедуры


#КонецОбласти


#Область ФункцииСериализацииДесериализации


Функция ПреобразоватьСсылкуВXDTO(ИмяТипа1С, Контекст)
	КонвертерXDTO = ПолучитьКонвертерXDTO();
	ЗаполнитьПравилаПреобразованияКонвертера1СВXDTO(КонвертерXDTO);
	НовыйОбъект = КонвертерXDTO.ПреобразоватьПоУмолчаниюОбъект1СВОбъектXDTO(
		Контекст);
	Возврат Обработки.КонвертерОбъектовXDTOУХ.УпаковатьРезультат(
		НовыйОбъект,
		СтрШаблон(НСтр("ru='Не удалось создать описание %1!'"),
			Контекст));	
КонецФункции

Функция ПреобразоватьСписокВXDTO(ИмяТипа1С, Контекст)

КонецФункции

Функция НайтиСсылкуНаОбъектИзXDTO(ИмяТипа1С, Контекст)
	Если ИмяТипа1С = "purchasePlan" Тогда
		Возврат НайтиПланЗакупокПоXDTO(Контекст, "Документ.ПрограммаЗакупок");
	ИначеЕсли ИмяТипа1С = "currency" Тогда
		Возврат НайтиВалютуПоXDTO(Контекст);
	ИначеЕсли ИмяТипа1С = "organization" Тогда
		Возврат НайтиОрганизациюПоXDTO(Контекст);
	ИначеЕсли ИмяТипа1С = "partner" Тогда
		Возврат НайтиКонтрагентаПоXDTO(Контекст);
	КонецЕсли;
КонецФункции

Функция СоздатьОбъектИзXDTO(ИмяТипа1С, Контекст)
	База = ПолучитьБазовуюОбработку();
	Если ИмяТипа1С = "purchasePlan" Тогда
		Возврат ПланЗакупокИзXDTO(
			База.ПолучитьФабрикуXDTO(), Контекст);
	КонецЕсли;
КонецФункции

Функция ОбновитьОбъектИзXDTO(ИмяТипа1С, Контекст)
	
КонецФункции


#КонецОбласти


#Область НеЭкспортныеФункции


// Возвращает соответствие типов объектов спискам функций, которые
// поддерживает обработка.
//
Функция ПолучитьСоответствиеФункций()
	Описание = Новый Соответствие;
	Обработки.КонвертерSCMIntermediateFormatУХ.ДобавитьФункцииОбработки(
		Описание,
		"Документ.ПрограммаЗакупок",
		"ПреобразоватьСсылкуВXDTO");
	Обработки.КонвертерSCMIntermediateFormatУХ.ДобавитьФункцииОбработки(
		Описание,
		"purchasePlan",
		"НайтиСсылкуНаОбъектИзXDTO,
		|СоздатьОбъектИзXDTO");
	Обработки.КонвертерSCMIntermediateFormatУХ.ДобавитьФункцииОбработки(
		Описание,
		"Справочник.Организации",
		"ПреобразоватьСсылкуВXDTO");
	Обработки.КонвертерSCMIntermediateFormatУХ.ДобавитьФункцииОбработки(
		Описание,
		"organization",
		"НайтиСсылкуНаОбъектИзXDTO");
	Обработки.КонвертерSCMIntermediateFormatУХ.ДобавитьФункцииОбработки(
		Описание,
		"Справочник.Контрагенты",
		"ПреобразоватьСсылкуВXDTO");
	Обработки.КонвертерSCMIntermediateFormatУХ.ДобавитьФункцииОбработки(
		Описание,
		"partner",
		"НайтиСсылкуНаОбъектИзXDTO");
	Обработки.КонвертерSCMIntermediateFormatУХ.ДобавитьФункцииОбработки(
		Описание,
		"Справочник.Валюты",
		"ПреобразоватьСсылкуВXDTO");
	Обработки.КонвертерSCMIntermediateFormatУХ.ДобавитьФункцииОбработки(
		Описание,
		"currency",
		"НайтиСсылкуНаОбъектИзXDTO");
	Возврат Новый ФиксированноеСоответствие(Описание);
КонецФункции

Функция ПланЗакупокВXDTO(ФабрикаXDTO, ПланЗакупок)
	База = ПолучитьБазовуюОбработку();
	T_purchasePlan = База.ПолучитьТипXDTO("purchasePlan");
	T_keyFields = База.ТипСвойстваИзТипаОбъекта(T_purchasePlan, "keyFields");
	// Объект XDTO План закупки
	ОписаниеПлана = ФабрикаXDTO.Создать(T_purchasePlan);
	ОписаниеПлана.guid = Строка(ПланЗакупок.УникальныйИдентификатор());
	РезультатКлючевыеПоля = ПолучитьKeyFieldsПланаЗакупок(
		ФабрикаXDTO, T_keyFields, ПланЗакупок);
	Если РезультатКлючевыеПоля.ЕстьОшибка Тогда
		Возврат РезультатКлючевыеПоля;
	КонецЕсли;
	ОписаниеПлана.keyFields = РезультатКлючевыеПоля.Результат;
	// Информация о строках
	мСтрокиПлана = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьСтрокиПланаЗакупок(ПланЗакупок);
	ОписаниеПлана.itemsCount = мСтрокиПлана.Количество();
	Возврат Обработки.КонвертерОбъектовXDTOУХ.УпаковатьРезультат(
		ОписаниеПлана,
		НСтр("ru='Не удалось создать описание плана закупок!'"));
КонецФункции

Функция ПланЗакупокИзXDTO(ФабрикаXDTO, ОбъектXDTO)
	Возврат Обработки.КонвертерОбъектовXDTOУХ.РезультатОшибка(
				НСтр("ru='Функция не реализована!'"));
КонецФункции

Функция ОрганизацияВXDTO(ФабрикаXDTO, Организация)
	База = ПолучитьБазовуюОбработку();
	T_organization = База.ПолучитьТипXDTO("organization");
	ОписаниеОрганизации = ФабрикаXDTO.Создать(T_organization);
	РезультатОписание = ЗаполнитьОбщееОписаниеОрганизацииКонтрагента(
		ФабрикаXDTO, ОписаниеОрганизации, Организация);
	Возврат Обработки.КонвертерОбъектовXDTOУХ.УпаковатьРезультат(
		РезультатОписание,
		НСтр("ru='Не удалось создать описание организации!'"));
КонецФункции

Функция НайтиОрганизациюПоXDTO(ОбъектXDTO)
	Возврат НайтиОрганизациюКонтрагентаПоXDTO(
		ОбъектXDTO, "Справочник.Организации");
КонецФункции

Функция КонтрагентВXDTO(ФабрикаXDTO, Контрагент)
	База = ПолучитьБазовуюОбработку();
	T_partner = База.ПолучитьТипXDTO("partner");
	ОписаниеКонтрагента = ФабрикаXDTO.Создать(T_partner);
	РезультатОписание = ЗаполнитьОбщееОписаниеОрганизацииКонтрагента(
		ФабрикаXDTO, ОписаниеКонтрагента, Контрагент);
	Возврат Обработки.КонвертерОбъектовXDTOУХ.УпаковатьРезультат(
		ОписаниеКонтрагента,
		НСтр("ru='Не удалось создать описание контрагента!'"));
КонецФункции

Функция НайтиКонтрагентаПоXDTO(ОбъектXDTO)
	Возврат НайтиОрганизациюКонтрагентаПоXDTO(
		ОбъектXDTO, "Справочник.Организации");
КонецФункции

Функция ВалютаВXDTO(ФабрикаXDTO, Валюта)
	Если НЕ ЗначениеЗаполнено(Валюта.Код) Тогда
		Возврат Обработки.КонвертерОбъектовXDTOУХ.РезультатОшибка(
			СтрШаблон(НСтр(
				"ru='У валюты ""%1"" не указан числовой код!'"),
				Валюта));
	КонецЕсли;
	База = ПолучитьБазовуюОбработку();
	T_currency = База.ПолучитьТипXDTO("currency");
	ОписаниеВалюты = ФабрикаXDTO.Создать(T_currency);
	ОписаниеВалюты.digitalCode = Валюта.Код;
	ОписаниеВалюты.name = База.ПодготовитьWhiteSpaceCollapse(
			Валюта.Наименование);
	Возврат Обработки.КонвертерОбъектовXDTOУХ.УпаковатьРезультат(
		ОписаниеВалюты,
		НСтр("ru='Не удалось создать описание валюты!'"));
КонецФункции

Функция НайтиВалютуПоXDTO(ОбъектXDTO)
	Ссылка = Неопределено;
	Если ОбъектXDTO.Установлено("letterCode") Тогда
		Ссылка = Справочники.Валюты.НайтиПоНаименованию(
			ОбъектXDTO.letterCode, Истина);
	ИначеЕсли ОбъектXDTO.Установлено("digitalCode") Тогда
		Ссылка = Справочники.Валюты.НайтиПоКоду(
			ОбъектXDTO.digitalCode);
	КонецЕсли;
	Возврат Обработки.КонвертерОбъектовXDTOУХ.УпаковатьРезультат(
		Ссылка,
		НСтр("ru='Не удалось найти валюту по описанию XDTO!'"));
КонецФункции
	
Функция ПолучитьKeyFieldsПланаЗакупок(ФабрикаXDTO, T_keyFields, ПланЗакупок)
	База = ПолучитьБазовуюОбработку();
	КлючевыеПоля = ФабрикаXDTO.Создать(T_keyFields);
	Если НЕ ЗначениеЗаполнено(ПланЗакупок.ОрганизацияДляЗаключенияДоговора) Тогда
		Возврат Обработки.КонвертерОбъектовXDTOУХ.РезультатОшибка(
				НСтр("ru='Не заполнена организация заказчик!'"));
	КонецЕсли;
	КлючевыеПоля.startDate = ПланЗакупок.ПериодЗакупок.ДатаНачала;
	КлючевыеПоля.endDate = ПланЗакупок.ПериодЗакупок.ДатаОкончания;
	КлючевыеПоля.planType =
		?(ПланЗакупок.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств,
			"INNOVATION",
			"COMMODITY");
	РезультатЗаказчик = База.ВыполнитьФункциюКонвертации(
		"ПреобразоватьСсылкуВXDTO",
		"Справочник.Организации",
		ПланЗакупок.ОрганизацияДляЗаключенияДоговора);
	РезультатВалюта = База.ВыполнитьФункциюКонвертации(
		"ПреобразоватьСсылкуВXDTO",
		"Справочник.Валюты",
		ПланЗакупок.ВалютаДокумента);
	Если РезультатЗаказчик.ЕстьОшибка Тогда
		Возврат РезультатЗаказчик;
	КонецЕсли;
	КлючевыеПоля.customer = РезультатЗаказчик.Результат;
	Если РезультатВалюта.ЕстьОшибка Тогда
		Возврат РезультатВалюта;
	КонецЕсли;
	КлючевыеПоля.currency = РезультатВалюта.Результат;
	Возврат Обработки.КонвертерОбъектовXDTOУХ.УпаковатьРезультат(
		КлючевыеПоля,
		НСтр("ru='Не удалось создать описание ключевых полей плана закупок!'"));
КонецФункции

Функция ЗаполнитьОбщееОписаниеОрганизацииКонтрагента(
											ФабрикаXDTO,
											ОписаниеXDTO,
											ОрганизацияКонтрагент)
	База = ПолучитьБазовуюОбработку();
	ЭтоОрганизация = (ТипЗнч(ОрганизацияКонтрагент) 
						= Тип("СправочникСсылка.Организации"));
	T_keyFields = База.ПолучитьТипXDTO("organizationKeyFields");
	ОписаниеXDTO.guid = Строка(ОрганизацияКонтрагент.УникальныйИдентификатор());
	ОписаниеXDTO.name = 
		База.ПодготовитьWhiteSpaceCollapse(
			ОрганизацияКонтрагент.Наименование);
	Если ЭтоОрганизация Тогда
		КлючевыеПоля = ПолучитьKeyFieldsОрганизации(
			ФабрикаXDTO, T_keyFields, ОрганизацияКонтрагент);
	Иначе
		КлючевыеПоля = ПолучитьKeyFieldsКонтрагента(
			ФабрикаXDTO, T_keyFields, ОрганизацияКонтрагент);
	КонецЕсли;
	Если КлючевыеПоля.ЕстьОшибка Тогда
		Возврат КлючевыеПоля;
	КонецЕсли;
	ОписаниеXDTO.keyFields = КлючевыеПоля.Результат;
	Если ЗначениеЗаполнено(ОрганизацияКонтрагент.НаименованиеПолное) Тогда
		ОписаниеXDTO.fullName =
			База.ПодготовитьWhiteSpaceCollapse(
				ОрганизацияКонтрагент.НаименованиеПолное);
	КонецЕсли;
	КонтактнаяИнформация =
		ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьКонтактнуюИнформацию(
			ОрганизацияКонтрагент);
	//юр адрес
	Если ЗначениеЗаполнено(КонтактнаяИнформация.ЮридическийАдрес) Тогда
		ОписаниеXDTO.legalAddress =
			База.ПодготовитьWhiteSpaceCollapse(
				КонтактнаяИнформация.ЮридическийАдрес);
	КонецЕсли;
	//почтовый адрес
	Если ЗначениеЗаполнено(КонтактнаяИнформация.ПочтовыйАдрес) Тогда
		ОписаниеXDTO.postalAddress =
			База.ПодготовитьWhiteSpaceCollapse(
				КонтактнаяИнформация.ПочтовыйАдрес);
	КонецЕсли;
	// телефон
	Если ЗначениеЗаполнено(КонтактнаяИнформация.Телефон) Тогда
		ОписаниеXDTO.phone =
			База.ПодготовитьWhiteSpaceCollapse(
				КонтактнаяИнформация.Телефон);
	КонецЕсли;
	//email
	Если ЗначениеЗаполнено(КонтактнаяИнформация.Email) Тогда
		ОписаниеXDTO.email =
			База.ПодготовитьWhiteSpaceCollapse(
				КонтактнаяИнформация.Email);
	КонецЕсли;
	// факс
	Если ЗначениеЗаполнено(КонтактнаяИнформация.Факс) Тогда
		ОписаниеXDTO.fax =
			База.ПодготовитьWhiteSpaceCollapse(
				КонтактнаяИнформация.Факс);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОрганизацияКонтрагент.КодОКОПФ) Тогда
		ОписаниеXDTO.okopf =
			База.ПодготовитьWhiteSpaceCollapse(
				ОрганизацияКонтрагент.КодОКОПФ);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОрганизацияКонтрагент.НаименованиеОКОПФ) Тогда
		ОписаниеXDTO.okopfName =
			СокрЛП(ОрганизацияКонтрагент.НаименованиеОКОПФ);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОрганизацияКонтрагент.КодПоОКПО) Тогда
		ОписаниеXDTO.okpo =
			База.ПодготовитьWhiteSpaceCollapse(
				ОрганизацияКонтрагент.КодПоОКПО);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОрганизацияКонтрагент.ДатаРегистрации) Тогда
		ОписаниеXDTO.registrationDate =
			ОрганизацияКонтрагент.ДатаРегистрации;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОрганизацияКонтрагент.СтранаРегистрации) Тогда
		ОписаниеXDTO.registrationCountry =
			ОрганизацияКонтрагент.СтранаРегистрации;
	КонецЕсли;
	Возврат Обработки.КонвертерОбъектовXDTOУХ.УпаковатьРезультат(
		ОписаниеXDTO,
		НСтр("ru='Не удалось создать описание организации!'"));
КонецФункции

Функция ПолучитьKeyFieldsОрганизации(ФабрикаXDTO, T_keyFields, Организация)
	КлючевыеПоля = ФабрикаXDTO.Создать(T_keyFields);
	ЮрФизЛицо = ПеречислениеЮрФизЛицоВXDTO(
		ФабрикаXDTO, Организация.ЮридическоеФизическоеЛицо);
	Если ЮрФизЛицо <> Неопределено Тогда
		КлючевыеПоля.entityType = ЮрФизЛицо;
	КонецЕсли;
	Если Организация.ИностраннаяОрганизация Тогда
		КлючевыеПоля.registrationNumber = 
			СокрЛП(Организация.КодНалогоплательщикаИностранный);
	КонецЕсли;
	Если ЗначениеЗаполнено(Организация.ИНН) Тогда
		КлючевыеПоля.inn = СокрЛП(Организация.ИНН);
	КонецЕсли;
	Если ЗначениеЗаполнено(Организация.КПП) Тогда
		КлючевыеПоля.kpp = СокрЛП(Организация.КПП);
	КонецЕсли;
	Если ЗначениеЗаполнено(Организация.ОГРН) Тогда
		КлючевыеПоля.ogrn = СокрЛП(Организация.ОГРН);
	КонецЕсли;
	Возврат Обработки.КонвертерОбъектовXDTOУХ.УпаковатьРезультат(
		КлючевыеПоля,
		НСтр("ru='Не удалось создать описание ключевых полей организации!'"));
КонецФункции

Функция ПолучитьKeyFieldsКонтрагента(ФабрикаXDTO, T_keyFields, Контрагент)
	КлючевыеПоля = ФабрикаXDTO.Создать(T_keyFields);
	ЮрФизЛицо = ПеречислениеЮрФизЛицоВXDTO(
		ФабрикаXDTO, Контрагент.ЮридическоеФизическоеЛицо);
	Если ЮрФизЛицо <> Неопределено Тогда
		КлючевыеПоля.entityType = ЮрФизЛицо;
	КонецЕсли;
	Если НЕ ПустаяСтрока(Контрагент.РегистрационныйНомер) Тогда
		КлючевыеПоля.registrationNumber = 
			СокрЛП(Контрагент.РегистрационныйНомер);
	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент.ИНН) Тогда
		КлючевыеПоля.inn = СокрЛП(Контрагент.ИНН);
	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент.КПП) Тогда
		КлючевыеПоля.kpp = СокрЛП(Контрагент.КПП);
	КонецЕсли;
	Возврат Обработки.КонвертерОбъектовXDTOУХ.УпаковатьРезультат(
		КлючевыеПоля,
		НСтр("ru='Не удалось создать описание ключевых полей контрагента!'"));
КонецФункции
	
Функция ПеречислениеЮрФизЛицоВXDTO(ФабрикаXDTO, ЮридическоеФизическоеЛицо)
	База = ПолучитьБазовуюОбработку();
	Если ЮридическоеФизическоеЛицо = 
			Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ИмяЗначения = "LegalEntity";
	ИначеЕсли ЮридическоеФизическоеЛицо = 
			Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ИмяЗначения = "NaturalEntity";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	Возврат ФабрикаXDTO.Создать(
		База.ПолучитьТипXDTO("organizationType"),
		ИмяЗначения);
КонецФункции

Функция ПеречислениеЮрФизЛицоИзXDTO(ЗначениеXDTO)
	Если ЗначениеXDTO = "LegalEntity" Тогда
		Возврат Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	КонецЕсли;
	Возврат Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
КонецФункции

// Возвращает объект корневой обработки КонвертерSCMIntermediateFormatУХ.
Функция ПолучитьБазовуюОбработку()
	Если БазоваяОбработкаГлобальнаяПеременная = Неопределено Тогда
		БазоваяОбработкаГлобальнаяПеременная =
			Обработки.КонвертерSCMIntermediateFormatУХ.ПолучитьОбъект();
	КонецЕсли;
	Возврат БазоваяОбработкаГлобальнаяПеременная;
КонецФункции

// Возвращает объект обработки КонвертерОбъектовXDTOУХ.
Функция ПолучитьКонвертерXDTO()
	Если КонвертерXDTOГлобальнаяПеременная = Неопределено Тогда
		КонвертерXDTOГлобальнаяПеременная =
			Обработки.КонвертерОбъектовXDTOУХ.Создать();
	КонецЕсли;
	Возврат КонвертерXDTOГлобальнаяПеременная;
КонецФункции

Функция НайтиНезаполненныеПоля(ОбъектXDTO, мИменаПолей)
	мНеУстановлены = Новый Массив;
	Для Каждого ИмяПоля Из мИменаПолей Цикл
		Если НЕ ОбъектXDTO.Установлено(ИмяПоля) Тогда
			мНеУстановлены.Добавить(ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	Возврат мНеУстановлены;
КонецФункции


#Область ДоступКДаннымКонфигурацииЗависящийОтСхемыДанных


Функция НайтиПланЗакупокПоXDTO(ОбъектXDTO, ИмяТипа1С)
	Если ОбъектXDTO.Установлено("guid") Тогда
		Ссылка = Обработки.КонвертерSCMIntermediateFormatУХ.НайтиОбъектПоУИД(
			ОбъектXDTO.guid, ИмяТипа1С);
		Если Ссылка <> Неопределено Тогда
			Возврат Обработки.КонвертерОбъектовXDTOУХ.РезультатУспех(Ссылка);
		КонецЕсли;
	КонецЕсли;
	РезультатСсылка = Неопределено;
	Если ОбъектXDTO.Установлено("keyFields") Тогда
		РезультатКлючевыеПоля =
			ПолучитьКлючевыеПоляПланаЗакупокИзXDTO(ОбъектXDTO.keyFields);
		Если РезультатКлючевыеПоля.ЕстьОшибка Тогда
			Возврат РезультатКлючевыеПоля;
		КонецЕсли;
		РезультатСсылка = 
			Обработки.КонвертерSCMIntermediateFormatУХ.НайтиСсылкуПоКлючевымПолям(
				РезультатКлючевыеПоля.Результат,
				ИмяТипа1С);
	КонецЕсли;
	Возврат Обработки.КонвертерОбъектовXDTOУХ.УпаковатьРезультат(
		РезультатСсылка,
		НСтр("ru='Не удалось найти ключевые поля плана закупок в объекте XDTO!'"));
КонецФункции

Функция НайтиОрганизациюКонтрагентаПоXDTO(ОбъектXDTO, ИмяТипа1С)
	Если ОбъектXDTO.Установлено("guid") Тогда
		Ссылка = Обработки.КонвертерSCMIntermediateFormatУХ.НайтиОбъектПоУИД(
			ОбъектXDTO.guid, ИмяТипа1С);
		Если Ссылка <> Неопределено Тогда
			Возврат Обработки.КонвертерОбъектовXDTOУХ.РезультатУспех(Ссылка);
		КонецЕсли;
	КонецЕсли;
	РезультатСсылка = Неопределено;
	Если ОбъектXDTO.Установлено("keyFields") Тогда
		РезультатКлючевыеПоля =
			ПолучитьКлючевыеПоляОрганизацииКонтрагентаИзXDTO(ОбъектXDTO.keyFields);
		Если РезультатКлючевыеПоля.ЕстьОшибка Тогда
			Возврат РезультатКлючевыеПоля;
		КонецЕсли;
		РезультатСсылка =
			Обработки.КонвертерSCMIntermediateFormatУХ.НайтиСсылкуПоКлючевымПолям(
				РезультатКлючевыеПоля.Результат,
				ИмяТипа1С);
	КонецЕсли;
	Возврат Обработки.КонвертерОбъектовXDTOУХ.УпаковатьРезультат(
		РезультатСсылка,
		СтрШаблон(НСтр(
			"ru='Не удалось найти ключевые поля для %1 в объекте XDTO!'"),
			ИмяТипа1С));
КонецФункции

Функция ПолучитьПериодЗакупокИзКлючевыхПолейПлана(purchasePlanKeyFields)
	ПериодЗакупок = Неопределено;
	Если purchasePlanKeyFields.Установлено("endDate") Тогда
		ПериодЗакупок = ОбщегоНазначенияУХ.ПолучитьПроизвольныйПериод(
			purchasePlanKeyFields.startDate,
			purchasePlanKeyFields.endDate);
	КонецЕсли;
	Если ПериодЗакупок = Неопределено Тогда
		Инновационный = purchasePlanKeyFields.planType = "INNOVATION";
		Периодичность = ?(Инновационный, 
			Перечисления.Периодичность.Год,
			Перечисления.Периодичность.Месяц);
		ПериодЗакупок = ОбщегоНазначенияУХ.ОпределитьПериодПоДате(
			purchasePlanKeyFields.startDate, Периодичность);
	КонецЕсли;
	Возврат Обработки.КонвертерОбъектовXDTOУХ.УпаковатьРезультат(
		ПериодЗакупок,
		НСтр("ru='Не удалось определить период закупок по ключевым полям плана!'"));
КонецФункции

Функция ПолучитьКлючевыеПоляПланаЗакупокИзXDTO(purchasePlanKeyFields)
	мНезаполненныеПоля = НайтиНезаполненныеПоля(
		purchasePlanKeyFields,
		СтрРазделить("startDate, currency, planType, customer", ", ", Ложь));
	Если мНезаполненныеПоля.Количество() > 0 Тогда
		Возврат Обработки.КонвертерОбъектовXDTOУХ.РезультатОшибка(
			СтрШаблон(НСтр(
				"ru='Не заполнены ключевые поля плана закупок в описанию XDTO: %1!'"),
				СтрСоединить(мНезаполненныеПоля, ", ")));
	КонецЕсли;
	Инновационный = purchasePlanKeyFields.planType = "INNOVATION";
	РезультатВалюта = НайтиВалютуПоXDTO(purchasePlanKeyFields.currency);
	РезультатЗаказчик = НайтиОрганизациюПоXDTO(purchasePlanKeyFields.customer);
	РезультатПериодЗакупок = ПолучитьПериодЗакупокИзКлючевыхПолейПлана(purchasePlanKeyFields);
	Если РезультатВалюта.ЕстьОшибка ИЛИ РезультатЗаказчик.ЕстьОшибка
				ИЛИ РезультатПериодЗакупок.ЕстьОшибка Тогда
		РезультатОшибка = Обработки.КонвертерОбъектовXDTOУХ.РезультатОшибка(
			НСтр("ru'Ошибка получения ключевых полей плана закупок!'"));
		РезультатОшибка = Обработки.КонвертерОбъектовXDTOУХ.ДополнитьОшибку(
			РезультатВалюта, РезультатОшибка);
		РезультатОшибка = Обработки.КонвертерОбъектовXDTOУХ.ОбъединитьОшибки(
			РезультатЗаказчик, РезультатОшибка);
		РезультатОшибка = Обработки.КонвертерОбъектовXDTOУХ.ОбъединитьОшибки(
			РезультатПериодЗакупок, РезультатОшибка);
		Возврат РезультатОшибка;
	КонецЕсли;
	Результат = Новый Структура;
	Результат.Вставить("ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств",
		Инновационный);
	Результат.Вставить("ПериодЗакупок", РезультатПериодЗакупок.Результат);
	Результат.Вставить("ВалютаДокумента", РезультатВалюта.Результат);
	Результат.Вставить("ОрганизацияДляЗаключенияДоговора", РезультатЗаказчик.Результат);
	Возврат Обработки.КонвертерОбъектовXDTOУХ.РезультатУспех(
		Результат);
КонецФункции

Функция ПолучитьКлючевыеПоляОрганизацииКонтрагентаИзXDTO(organizationKeyFields)
	Результат = Новый Структура;
	Если organizationKeyFields.Установлено("entityType") Тогда
		Результат.Вставить("ЮридическоеФизическоеЛицо",
			ПеречислениеЮрФизЛицоИзXDTO(organizationKeyFields.entityType));
	КонецЕсли;
	Если organizationKeyFields.Установлено("registrationNumber") Тогда
		Результат.Вставить("РегистрационныйНомер", organizationKeyFields.registrationNumber);
	КонецЕсли;
	Если organizationKeyFields.Установлено("inn") Тогда
		Результат.Вставить("ИНН", organizationKeyFields.inn);
	КонецЕсли;
	Если organizationKeyFields.Установлено("kpp") Тогда
		Результат.Вставить("КПП", organizationKeyFields.kpp);
	КонецЕсли;
	Если organizationKeyFields.Установлено("ogrn") Тогда
		Результат.Вставить("ОГРН", organizationKeyFields.ogrn);
	КонецЕсли;
	Если Результат.Количество() = 0 Тогда
		Возврат Обработки.КонвертерОбъектовXDTOУХ.РезультатОшибка(
			НСтр("ru='Не удалось заполнить ключевые поля организации/контрагента по описанию XDTO!'"));
	КонецЕсли;
	Возврат Обработки.КонвертерОбъектовXDTOУХ.РезультатУспех(
		Результат);
КонецФункции


#КонецОбласти


#КонецОбласти


#КонецЕсли