#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
// Загрузить указанный классификатор из файла(ов).
//
// Параметры:
//  ПараметрыЗагрузки - Структура - поля:
//		ДвоичныеДанныеФайла - ДвоичныеДанныеФайла.
//		ПараметрыВыгрузки.Вставить("ИмяФайлаНаКлиенте
//  АдресХранилища - Строка - строка с адресом хранилища для помещения
//		состояния работы из фонового задания.
//
Процедура ЗагрузитьДанныеКлассификатора(ПараметрыЗагрузки, АдресХранилища) Экспорт
	Попытка
		Если ЗначениеЗаполнено(ПараметрыЗагрузки) И
			ПараметрыЗагрузки.Свойство("ИмяФайлаНаКлиенте") И
			ПараметрыЗагрузки.Свойство("ДвоичныеДанныеФайла") Тогда
			
			ПарольДляРаспаковки = "";
			Если НЕ ПараметрыЗагрузки.Свойство("ПарольДляРаспаковки", ПарольДляРаспаковки) Тогда
				ПарольДляРаспаковки = "";
			КонецЕсли;
			
			ИмяФайлаНаКлиенте = ПараметрыЗагрузки.ИмяФайлаНаКлиенте;
			РасширениеФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайлаНаКлиенте);
			Если ПустаяСтрока(РасширениеФайла) Тогда
				РасширениеФайла = "xml";
			КонецЕсли;
			
			ИмяВременногоФайлаНаСервере = ПолучитьИмяВременногоФайла(РасширениеФайла);
			ПараметрыЗагрузки.ДвоичныеДанныеФайла.Записать(ИмяВременногоФайлаНаСервере);
			
			Если РасширениеФайла = "zip" Тогда
				Результат = РаспаковатьZipФайлы(ИмяВременногоФайлаНаСервере, ПарольДляРаспаковки);
				ИменаФайловДляОбработки = Результат.ИменаРаспакованныхФайлов; 
				Если НЕ Результат.Успех Тогда
					ШаблонСообщения = НСтр("ru = 'При распаковке файла %1 возникла ошибка:
										 |%2'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщения,
						ИмяФайлаНаКлиенте,
						Результат.ТекстСообщения);
				КонецЕсли;
					
			Иначе
				ИменаФайловДляОбработки = ОбщегоНазначенияКлиентСерверУХ.ЗначениеВМассиве(
					ИмяВременногоФайлаНаСервере);
			КонецЕсли;
			
			Результат = ОбработатьФайлы(ИменаФайловДляОбработки, 5);
			Если Результат.Успех Тогда
				ШаблонСообщения =  НСтр("ru = 'Загрузка классификатора из файла %1 прошла успешно.
										|%2'");
			Иначе
				ШаблонСообщения = НСтр("ru = 'При загрузке данных классификатора из файла %1 возникла ошибка:
										 |%2'");
			КонецЕсли;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, 
				ИмяФайлаНаКлиенте,
				Результат.ТекстСообщения);
		Иначе
			ТекстСообщения = НСтр("ru = 'Некорректно заполнены параметры загрузки.'");
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке классификатора из файла возникла ошибка:
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, 
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(ТекстСообщения, АдресХранилища);
КонецПроцедуры

Функция ОбработатьФайлы(ИменаФайловДляОбработки, ТекущийПроцент)
	Результат = Новый Структура("Успех, ТекстСообщения", Истина, "");
	Если НЕ ЗначениеЗаполнено(ИменаФайловДляОбработки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекстСообщения = "";
	ПроцентовНаФайл = (100 - ТекущийПроцент) / ИменаФайловДляОбработки.Количество();
	Для Каждого ИмяВременногоФайлаНаСервере Из ИменаФайловДляОбработки Цикл
		ТекстПрогресса = НСтр("ru = 'Обрабатываем файл: %ИмяВременногоФайлаНаСервере%'");
		ТекстПрогресса = СтрЗаменить(ТекстПрогресса, "%ИмяВременногоФайлаНаСервере%", Строка(ИмяВременногоФайлаНаСервере));
		ДлительныеОперации.СообщитьПрогресс(ТекущийПроцент, ТекстПрогресса);
		
		РезультатФайла = ОбработатьФайлКлассификатора(ИмяВременногоФайлаНаСервере);
		
		ТекстПрогресса = НСтр("ru = 'Обработан файл: %ИмяВременногоФайлаНаСервере%'");
		ТекстПрогресса = СтрЗаменить(ТекстПрогресса, "%ИмяВременногоФайлаНаСервере%", Строка(ИмяВременногоФайлаНаСервере));
		ТекстСообщения = ТекстПрогресса;
		Если РезультатФайла.Успех Тогда
			ТекстСообщения =  ТекстСообщения + Символы.ПС
				+ СдвинутьСтркуНаПозициюТабуляции(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '	Имя справочника ""%1"". Добавлено элементов: %2. Обновлено элементов: %3. 	
                              |			Помечено на удаление: %4. Не найдено для пометки на удаление: %5.'"), 
						РезультатФайла.ИмяСправочника,
						РезультатФайла.ЧислоОпераций[0],
						РезультатФайла.ЧислоОпераций[1],
						РезультатФайла.ЧислоОпераций[2],
						РезультатФайла.ЧислоОпераций[3]),
					1);
		Иначе
			ТекстСообщения = ТекстСообщения + Символы.ПС
				+ СдвинутьСтркуНаПозициюТабуляции(РезультатФайла.ТекстСообщения, 1);
		КонецЕсли;
			
		Если НЕ РезультатФайла.Успех Тогда
			Результат.Успех = Ложь;
			Прервать;
		КонецЕсли;
		
		ТекущийПроцент = ТекущийПроцент + ПроцентовНаФайл;
	КонецЦикла;
	
	Результат.ТекстСообщения = ТекстСообщения;
	Возврат Результат;
КонецФункции

Функция СдвинутьСтркуНаПозициюТабуляции(СтрокаДляОбработки, ЧислоСдвигов)
	Если НЕ ПустаяСтрока(СтрокаДляОбработки) Тогда
		Префикс = "";
		Для Ном = 1 По ЧислоСдвигов Цикл
			Префикс = Префикс + Символы.Таб;
		КонецЦикла;
		мСтрок = СтрРазделить(СтрокаДляОбработки, Символы.ПС, Истина);
		ИндексПоследнейСтроки = мСтрок.Количество() - 1;
		Для Ном = 0 По ИндексПоследнейСтроки Цикл
			мСтрок[Ном] = Префикс + мСтрок[Ном];
		КонецЦикла;
		Возврат СтрСоединить(мСтрок, Символы.ПС);
	КонецЕсли;
	
	Возврат СтрокаДляОбработки;
КонецФункции

// Выполняет разбор файла XML сохраненного на сервере.
// Определяет тип классификатора и имя справочника.
// Загружает данные в справочник: обновляет и/или создает элементы.
// Возвращает:
//	Булево - Истина - загрузка прошла успешно. Ложь - возникла ошибка.
//	ТекстСообщения - Строка, в случае успешной загрузки возвращает имя классификатора.
//		В случае ошибки содержит текстовое описание ошибки.
//	ИмяСправочника - Строка, имя 
Функция ОбработатьФайлКлассификатора(ИмяВременногоФайлаНаСервере)
	Результат = Новый Структура;
	Результат.Вставить("Успех", Истина);
	Результат.Вставить("ТекстСообщения", "");
	Результат.Вставить("ЧислоОпераций", Новый Массив(4));
	Результат.Вставить("ИмяСправочника", "");
	
	Попытка
		ФайлОбмена = Новый ЧтениеXML();
		ФайлОбмена.ОткрытьФайл(ИмяВременногоФайлаНаСервере);
		
		
		Обработка = Справочники.ЭлектронныеТорговыеПлощадки.ПолучитьОбработкуИнтеграции(
			Справочники.ЭлектронныеТорговыеПлощадки.СсылкаНаЕИС());
			
		ЕИСФабрикаXDTO = Обработка.ПолучитьФабрикуXDTO();
		ОбъектXDTO = ЕИСФабрикаXDTO.ПрочитатьXML(ФайлОбмена);
		
		СписокЭлементов = ОбъектXDTO.body.item;
		ИмяКлассификатора = ПолучитьИмяКлассификатораПоЭлементуКоллекции(СписокЭлементов[0]);
		Результат.ИмяСправочника = ПолучитьИмяСправочникаПоИмениКлассификатора(ИмяКлассификатора);
		Если ПустаяСтрока(Результат.ИмяСправочника) Тогда
			Результат.Успех = Ложь;
			Результат.ТекстСообщения = НСтр("ru = 'Не удалось определить имя справочника.'");
			Возврат Результат;
		КонецЕсли;
		
		КэшРодителей = Новый Соответствие; // {КодРодителя: СсылкаРодителя}
		ЧислоОпераций = Результат.ЧислоОпераций;
		ЧислоОпераций[0] = 0; // Добавлено
		ЧислоОпераций[1] = 0; // Обновлено
		ЧислоОпераций[2] = 0; // Помечено на удаление
		ЧислоОпераций[3] = 0; // Не найден для пометки на удаление
		
		ЗначенияРеквизитов = Новый Структура("Наименование, НаименованиеПолное");
		
		Для Каждого ЭлементСГУИД Из СписокЭлементов Цикл
			ОписаниеЭлемента = ЭлементСГУИД.Получить(ИмяКлассификатора);
			Код = СокрЛП(ОписаниеЭлемента.code);
			КодРодителя = СокрЛП(ПрочитатьНеобязательноеСвойствоОбъектаXDTO(
							ОписаниеЭлемента, "parentCode"));
			Наименование = СокрЛП(ОписаниеЭлемента.name);
			
			ЗначенияРеквизитов.Наименование = Наименование;
			ЗначенияРеквизитов.НаименованиеПолное = Наименование;
			
			Родитель = ДобавитьНайтиРодителя(
						КэшРодителей, Результат.ИмяСправочника, КодРодителя);
			Если ОписаниеЭлемента.businessStatus = "801" Тогда
				Операция = ДобавитьОбновитьЭлементСправочника(
									Результат.ИмяСправочника, Код, Родитель,
									ЗначенияРеквизитов, Истина)
							.Операция;
			Иначе // помечаем на удаление
				Операция = 3 - ПометитьНаУдалениеЭлементСправочника(
									Результат.ИмяСправочника, Код);
			КонецЕсли;
				
			ЧислоОпераций[Операция] = ЧислоОпераций[Операция] + 1;
		КонецЦикла;
		
	Исключение
		Результат.Успех = Ложь;
		Результат.ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

Функция ПрочитатьНеобязательноеСвойствоОбъектаXDTO(Объект, ИмяСвойства)
	Если Объект.Свойства().Получить(ИмяСвойства) = Неопределено Тогда
		Возврат ""; // нет такого свойства
	КонецЕсли;
	
	Возврат Объект.Получить(ИмяСвойства);
КонецФункции

Функция ПолучитьИмяКлассификатораПоЭлементуКоллекции(ЭлементКоллекции)
	мИменаКлассификаторов = Новый Массив;
	мИменаКлассификаторов.Добавить("nsiOkpd2Data");
	мИменаКлассификаторов.Добавить("nsiOkved2Data");
	
	Для Каждого ИмяКлассификатора Из мИменаКлассификаторов Цикл
		Если ЭлементКоллекции.Свойства().Получить(ИмяКлассификатора) <> Неопределено Тогда
			Возврат ИмяКлассификатора;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
КонецФункции

Функция ПолучитьИмяСправочникаПоИмениКлассификатора(ИмяКлассификатора)
	Если ИмяКлассификатора = "nsiOkpd2Data" Тогда
		Возврат "КлассификаторПродукцииПоВидамДеятельности";
	ИначеЕсли ИмяКлассификатора = "nsiOkved2Data" Тогда
		Возврат "КлассификаторВидовЭкономическойДеятельности";
	КонецЕсли;
КонецФункции

Функция ДобавитьНайтиРодителя(КэшРодителей, ИмяСправочника, КодРодителя)
	Если ПустаяСтрока(КодРодителя) Тогда
		Возврат Справочники[ИмяСправочника].ПустаяСсылка();
	КонецЕсли;
	
	Ссылка = КэшРодителей.Получить(КодРодителя);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	// Создаем пустой элемент родитель, только с кодом. Рассчитываем, что далее, он будет обновлен по коду.
	// Наименование устанавливаем == коду.
	Ссылка = ДобавитьОбновитьЭлементСправочника(
			ИмяСправочника,
			КодРодителя,
			Справочники[ИмяСправочника].ПустаяСсылка(),
			Новый Структура("Наименование", КодРодителя),
			Ложь
		).Ссылка;
	
	КэшРодителей.Вставить(КодРодителя, Ссылка);
	
	Возврат Ссылка;
КонецФункции

// Возвращает:
//	Число - 0 - добавлен, 1 - обновлен
Функция ДобавитьОбновитьЭлементСправочника(ИмяСправочника, Код, Родитель,
				ЗначенияРеквизитов, Обновить)
	СправочникМенеджер = Справочники[ИмяСправочника];
	Ссылка = СправочникМенеджер.НайтиПоКоду(Код);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Операция = 1; // обновление
		
		Если Не Обновить Тогда
			Возврат Новый Структура("Операция, Ссылка", Операция, Ссылка);
		КонецЕсли;
		
		КатегорияОбъект = Ссылка.ПолучитьОбъект();
		Если КатегорияОбъект.ПометкаУдаления Тогда
			КатегорияОбъект.УстановитьПометкуУдаления(Ложь, Ложь);
		КонецЕсли;
	Иначе
		Операция = 0; // добавление
		КатегорияОбъект = СправочникМенеджер.СоздатьЭлемент();
		КатегорияОбъект.Код = Код;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Родитель) Тогда
		КатегорияОбъект.Родитель = Родитель;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(КатегорияОбъект, ЗначенияРеквизитов);
	КатегорияОбъект.Записать();
	
	Возврат Новый Структура("Операция, Ссылка", Операция, КатегорияОбъект.Ссылка);
КонецФункции

// Возвращает:
//	Число - 0 - объект не найден, 1 - объект найден и помечен на удаление.
Функция ПометитьНаУдалениеЭлементСправочника(ИмяСправочника, Код)
	СправочникМенеджер = Справочники[ИмяСправочника];
	Ссылка = СправочникМенеджер.НайтиПоКоду(Код);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		КатегорияОбъект = Ссылка.ПолучитьОбъект();
		КатегорияОбъект.УстановитьПометкуУдаления(Истина, Ложь);
		КатегорияОбъект.Записать();
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
КонецФункции

Функция РаспаковатьZipФайлы(ИмяФайлаДляРаспаковки, ПарольДляРаспаковкиФайлаОбмена)
	Результат = Новый Структура("Успех, ИменаРаспакованныхФайлов, ТекстСообщения",
								Истина, Новый Массив, "");
	
	КаталогДляРаспаковки = КаталогВременныхФайлов();
	Попытка
		Архиватор = Новый ЧтениеZipФайла(ИмяФайлаДляРаспаковки, ПарольДляРаспаковкиФайлаОбмена);
		
		НомерПоследнегоФайла = Архиватор.Элементы.Количество()-1;
		Если НомерПоследнегоФайла >= 0 Тогда
			Архиватор.ИзвлечьВсе(КаталогДляРаспаковки,
					РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
				
			Для Ном = 0 По НомерПоследнегоФайла Цикл
				Результат.ИменаРаспакованныхФайлов.Добавить(
						ПолучитьИмяФайлаОбмена(КаталогДляРаспаковки,
								Архиватор.Элементы[Ном].Имя));
			КонецЦикла;
		КонецЕсли;
		
		Архиватор.Закрыть();
	
	Исключение
		Результат.Успех = Ложь;
		Результат.ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

// Составляет полное имя файла из имени каталога и имени файла.
//
// Параметры:
//  ИмяКаталога  - Строка, содержащая путь к каталогу файла на диске.
//  ИмяФайла     - Строка, содержащая имя файла, без имени каталога.
//
// Возвращаемое значение:
//   Строка - полное имя файла с учетом каталога.
//
Функция ПолучитьИмяФайлаОбмена(ИмяКаталога, ИмяФайла)
	Если Не ПустаяСтрока(ИмяФайла) Тогда
		Возврат ИмяКаталога + ?(Прав(ИмяКаталога, 1) = "\", "", "\") + ИмяФайла;	
	Иначе
		Возврат ИмяКаталога;
	КонецЕсли;
КонецФункции


#КонецЕсли


