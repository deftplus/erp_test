
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ.
//


&НаСервере
Процедура ЗаполнитьИсходныеДанныеДляКопирования()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НастраиваемыйОтчет.ВидОтчета КАК Ссылка
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|ГДЕ
	|	НастраиваемыйОтчет.Сценарий = &СценарийИсточника
	|	И НастраиваемыйОтчет.ПериодОтчета = &ПериодИсточника");
						   	
	Запрос.УстановитьПараметр("СценарийИсточника"   , СценарийИсточника);
	Запрос.УстановитьПараметр("ПериодИсточника"     , ПериодИсточника);
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(),"ТабОтборВидыОтчетов");
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НастраиваемыйОтчет.Организация КАК Ссылка
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|ГДЕ
	|	НастраиваемыйОтчет.Сценарий = &СценарийИсточника
	|	И НастраиваемыйОтчет.ПериодОтчета = &ПериодИсточника";
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(),"ТабОтборОрганизации");
		
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьОтчеты()
	
	СкопироватьОтчетыСервер();
	   
КонецПроцедуры

&НаСервере
Процедура СкопироватьОтчетыСервер()
		 
	ТабличноеПолеПриемника = РеквизитФормыВЗначение("ТабПриемника");
	ТабличноеПолеОрганизаций = РеквизитФормыВЗначение("ТабОтборОрганизации");
    ТабличноеПолеВидовОтчетов = РеквизитФормыВЗначение("ТабОтборВидыОтчетов");
	
	ОтборОрганизации=ТабличноеПолеОрганизаций.ВыгрузитьКолонку("Ссылка");
	ОтборВидыОтчетов=ТабличноеПолеВидовОтчетов.ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	НастраиваемыйОтчет.Ссылка КАК ИсходныйЭкземпляр,
	|	НастраиваемыйОтчет.Организация,
	|	НастраиваемыйОтчет.ВидОтчета,
	|	ЕСТЬNULL(НастраиваемыйОтчетСуществующие.Ссылка, НЕОПРЕДЕЛЕНО) КАК СуществующийЭкземпляр
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчетСуществующие
	|		ПО НастраиваемыйОтчет.ВидОтчета = НастраиваемыйОтчетСуществующие.ВидОтчета
	|			И НастраиваемыйОтчет.Организация = НастраиваемыйОтчетСуществующие.Организация
	|			И (НастраиваемыйОтчетСуществующие.ПериодОтчета = &ПериодПереноса)
	|			И (НастраиваемыйОтчетСуществующие.Сценарий = &СценарийПереноса)
	|ГДЕ
	|	НастраиваемыйОтчет.Организация В(&Организация)
	|	И НастраиваемыйОтчет.ПериодОтчета = &ПериодОтчета
	|	И НастраиваемыйОтчет.Сценарий = &Сценарий
	|	И НастраиваемыйОтчет.ВидОтчета В(&ВидОтчета)");
		
	Для Каждого Строка Из ТабличноеПолеПриемника Цикл
		
		Запрос.УстановитьПараметр("Организация" , ТабличноеПолеОрганизаций.ВыгрузитьКолонку("Ссылка"));
		Запрос.УстановитьПараметр("ВидОтчета"   , ТабличноеПолеВидовОтчетов.ВыгрузитьКолонку("Ссылка"));
		Запрос.УстановитьПараметр("Сценарий"    , СценарийИсточника);
		Запрос.УстановитьПараметр("ПериодОтчета", ПериодИсточника);
		Запрос.УстановитьПараметр("ПериодПереноса", Строка.ПериодОтчета);
		Запрос.УстановитьПараметр("СценарийПереноса", Строка.Сценарий);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.СуществующийЭкземпляр=Неопределено Тогда
				
				ОбъектКопия=Выборка.ИсходныйЭкземпляр.Скопировать();
				ОбъектКопия.Дата         = ТекущаяДата();
				ОбъектКопия.Сценарий     = Строка.Сценарий;
				ОбъектКопия.ПериодОтчета = Строка.ПериодОтчета;
				
			Иначе
				
				ОбъектКопия=Выборка.СуществующийЭкземпляр.ПолучитьОбъект();
				
			КонецЕсли;
			
			ОбъектКопия.мКопируемыйДокумент=Выборка.ИсходныйЭкземпляр;
			ОбъектКопия.ИнициализироватьКонтекст();
			ОбъектКопия.АвтоматическийПересчетЗависимыхПоказателей=Ложь;
			ОбъектКопия.ИзмененКлючевойРеквизит=Истина;
			
			Попытка	
				
				ОбъектКопия.Записать();
				
			Исключение
				
				ОбщегоНазначенияУХ.СообщитьОбОшибке("Не удалось скопировать данные экземпляра отчета "+Выборка.ИсходныйЭкземпляр+"
				|на период "+Строка.ПериодОтчета+" по сценарию "+Строка.Сценарий+": "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,,СтатусСообщения.Внимание);
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ.
//

&НаКлиенте
Процедура ОсновныеДействияФормыСкопировать(Кнопка)
	
	Если ЗначениеЗаполнено(ПериодИсточника)
	   И ЗначениеЗаполнено(СценарийИсточника)
	   И ТабПриемника.Количество() > 0 Тогда
			СкопироватьОтчетыСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументУправленияПериодомСценарияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДокументУправленияПериодомСценария) Тогда
		
		ДокументУправленияПериодомСценарияПриИзмененииСервер()
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДокументУправленияПериодомСценарияПриИзмененииСервер()
	
	ПериодИсточника   = ДокументУправленияПериодомСценария.ПериодСценария;
	СценарийИсточника = ДокументУправленияПериодомСценария.Сценарий;
	
	ЗаполнитьИсходныеДанныеДляКопирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОрганизации(Команда)
	
	ОткрытьФормуДереваЭлементов("ТабОтборОрганизации");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборВидыОтчетов(Команда)
	
	ОткрытьФормуДереваЭлементов("ТабОтборВидыОтчетов");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДереваЭлементов(ИмяКоллекцииФормы)
	
	СписокЭлементов=Новый СписокЗначений;
	
	Для Каждого Строка ИЗ ЭтаФорма[ИмяКоллекцииФормы] Цикл
		
		СписокЭлементов.Добавить(Строка.Ссылка);
		
	КонецЦикла;
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораЭлементовДерево",Новый Структура("ИмяСправочника,ИмяЭлементаФормы,СписокЭлементов",СтрЗаменить(ИмяКоллекцииФормы,"ТабОтбор",""),ИмяКоллекцииФормы,СписокЭлементов),ЭтаФорма);	
	
КонецПроцедуры // ОткрытьФормуДереваЭлементов()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы="ОбщаяФорма.ФормаПодбораЭлементовДерево"
		И (ИсточникВыбора.Параметры.ИмяЭлементаФормы="ТабОтборОрганизации"
		ИЛИ ИсточникВыбора.Параметры.ИмяЭлементаФормы="ТабОтборВидыОтчетов") Тогда
		
		ЭтаФорма[ИсточникВыбора.Параметры.ИмяЭлементаФормы].Очистить();
		
		Для Каждого Элемент ИЗ ВыбранноеЗначение Цикл
			
			НоваяСтрока=ЭтаФорма[ИсточникВыбора.Параметры.ИмяЭлементаФормы].Добавить();
			НоваяСтрока.Ссылка=Элемент.Значение;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТабПриемникаДокументПриИзменении(Элемент)
	
	ТабПриемникаДокументПриИзмененииНаСервере(Элементы.ТабПриемника.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура ТабПриемникаДокументПриИзмененииНаСервере(ИдентификаторСтроки)
	
	СтрокаПриемник=ТабПриемника.НайтиПоИдентификатору(ИдентификаторСтроки);
	СтрокаПриемник.ПериодОтчета=СтрокаПриемник.ДокументУправленияПериодом.ПериодСценария;
	СтрокаПриемник.Сценарий=СтрокаПриемник.ДокументУправленияПериодом.Сценарий;
		
КонецПроцедуры

&НаКлиенте
Процедура ТабПриемникаПериодПриИзменении(Элемент)
	
	УстановитьДокументУправленияПериодом();	
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДокументУправленияПериодом()
	
	СтрокаПриемник=Элементы.ТабПриемника.ТекущиеДанные;

	Если ЗначениеЗаполнено(СтрокаПриемник.ПериодОтчета) 
		И ЗначениеЗаполнено(СтрокаПриемник.Сценарий) Тогда
		
		СтрокаПриемник.ДокументУправленияПериодом=ПолучитьДокументУправленияПериодом(СтрокаПриемник.ПериодОтчета,СтрокаПриемник.Сценарий);
		
	Иначе
		
		СтрокаПриемник.ДокументУправленияПериодом="";

	КонецЕсли;
		
КонецПроцедуры // 

&НаСервереБезКонтекста
Функция ПолучитьДокументУправленияПериодом(ПериодСценария,Сценарий)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СтатусыПериодовСценариев.УправлениеПериодомСценария КАК Ссылка
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|ГДЕ
	|	СтатусыПериодовСценариев.Сценарии = &Сценарий
	|	И СтатусыПериодовСценариев.Периоды = &ПериодСценария";
	
	Запрос.УстановитьПараметр("Сценарий",Сценарий);
	Запрос.УстановитьПараметр("ПериодСценария",ПериодСценария);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда 
		
		Возврат Результат.Ссылка;
		
	Иначе
		
		Возврат Документы.УправлениеПериодомСценария.ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции // ПолучитьДокументУправленияПериодом()

&НаКлиенте
Процедура ТабПриемникаСценарийПриИзменении(Элемент)
	
	УстановитьДокументУправленияПериодом();
	
КонецПроцедуры


