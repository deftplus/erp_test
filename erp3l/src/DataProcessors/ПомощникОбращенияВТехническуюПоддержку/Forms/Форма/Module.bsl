#Область ОписаниеПеременных

&НаКлиенте
Перем ВыполняетсяУдаление;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	РегНомер              = Константы.РегистрационныйНомерПрограммы.Получить();
	ВключеноОграничениеДоступаНаУровнеЗаписей = Константы.ОграничиватьДоступНаУровнеЗаписей.Получить();
	Организация           = Константы.ОрганизацияНаКоторуюЗарегистрированаПрограмма.Получить();
	НазваниеКонфигурации  = СокрЛП(Метаданные.Синоним);
	ВерсияКонфигурации    = СокрЛП(Метаданные.Версия);
	ПоставщикКонфигурации = СокрЛП(Метаданные.Поставщик);
	ЭтоФайловаяБаза       = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	Если ЭтоФайловаяБаза Тогда
		Элементы.ГруппаТипСУБД.Видимость = Ложь;
		Элементы.АнкетаКоличествоБазНаСУБД.Видимость = Ложь;
		Элементы.ГруппаИспользованиеСерверов.Видимость = Ложь;
		Элементы.АнкетаПараметрыПроцессораИПамяти.Видимость = Ложь;
	КонецЕсли;
	
	ТекПользователь = Пользователи.ТекущийПользователь();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПользователиКонтактнаяИнформация.АдресЭП
		|ИЗ
		|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|ГДЕ
		|	ПользователиКонтактнаяИнформация.Ссылка = &Пользователь";

	Запрос.УстановитьПараметр("Пользователь", ТекПользователь);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	АдресEMailДляОтветаПоУмолчанию = "";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		АдресEMailДляОтветаПоУмолчанию = СокрЛП(ВыборкаДетальныеЗаписи.АдресЭП);
	КонецЦикла;

	EMailОтправителяДляОтвета = АдресEMailДляОтветаПоУмолчанию;
	ИмяОтправителя = ТекПользователь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьЗаголовокФормы();
	УправлениеВидимостьюКоманд();
	ЗагрузитьСписокАдресовДляОтправки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_УчетныеЗаписиЭлектроннойПочты" Тогда
		ЗагрузитьСписокАдресовДляОтправки();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура ОбращениеПоИнымПричинамТекстОбращенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"ОбращениеПоИнымПричинамТекстОбращения",
		НСтр("ru = 'Текст Вашего обращения';
			|en = 'Your support request text'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОПроблемахСБыстродействиемОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"СообщениеОПроблемахСБыстродействиемОписание",
		НСтр("ru = 'Описание проблемы';
			|en = 'Issue description'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОРаботеСПрограммойФормулировкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"ВопросОРаботеСПрограммойФормулировка",
		НСтр("ru = 'Ваш вопрос';
			|en = 'Your question'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПожеланияПоРазвитиюОписаниеЗадачНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"ПожеланияПоРазвитиюОписаниеЗадач",
		НСтр("ru = 'Описание задач';
			|en = 'Task description'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УдобствоРаботыЧтоВызываетТрудностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"УдобствоРаботыЧтоВызываетТрудности",
		НСтр("ru = 'Что неудобно?';
			|en = 'What is inconvenient?'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УдобствоРаботыОжидаемоеПоведениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"УдобствоРаботыОжидаемоеПоведение",
		НСтр("ru = 'Ожидаемое поведение';
			|en = 'Expected behavior'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОбОшибкеОписаниеОшибкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"СообщениеОбОшибкеОписаниеОшибки",
		НСтр("ru = 'Описание ошибки';
			|en = 'Error details'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПожеланияПоРазвитиюУдачныеПримерыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"ПожеланияПоРазвитиюУдачныеПримеры",
		НСтр("ru = 'Удачные примеры реализации задач';
			|en = 'Good examples of task implementation '"));
	
КонецПроцедуры

&НаКлиенте
Процедура АнкетаПараметрыПроцессораИПамятиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"АнкетаПараметрыПроцессораИПамяти",
		НСтр("ru = 'Характеристики серверов';
			|en = 'Server characteristics'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьЭПОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если УчетнаяЗаписьЭП <> ВыбранноеЗначение Тогда
		УчетнаяЗаписьЭП = ВыбранноеЗначение;
		ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
		ПараметрыОтбора = Новый Структура("УчетнаяЗапись", ЭлементСписка.Значение);
		МассивСтрок = ДоступныеДляОтправкиУчетныеЗаписи.НайтиСтроки(ПараметрыОтбора);
		АдресПоУмолчанию = МассивСтрок[0].АдресЭлектроннойПочты;
		Если ЭлементСписка <> Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			УчетнаяЗаписьЭППредставление = ЭлементСписка.Представление;
		КонецЕсли;
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьЭППредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦельОбращенияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦельОбращенияПриИзменении(Элемент)
	
	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиенте
Процедура ПожеланияПоРазвитиюГотовДатьПоясненияПриИзменении(Элемент)
	
	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВложенияВыборРасширениеПодключено",
		ЭтотОбъект,
		Новый Структура("ИмяФайла", Элемент.ТекущиеДанные.ИмяФайлаНаДиске));
	
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Удалить ""%1""?';
																				|en = 'Remove ""%1""?'"),
	                                                                       ТекущиеДанные.Представление);
		
	Если Не ВыполняетсяУдаление Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ВложенияПередУдалениемЗавершение", ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ТекущиеДанные.Расположение = "ВременноеХранилище" И ЭтоАдресВременногоХранилища(ТекущиеДанные.Адрес) Тогда
			УдалитьИзВременногоХранилища(ТекущиеДанные.Адрес);
		КонецЕсли;
		Вложения.Удалить(ТекущиеДанные);
		ОтобразитьКоличествоФайлов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПослеУдаления(Элемент)
	
	ОтобразитьКоличествоФайлов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)

	ОчиститьСообщения();
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ТехническаяИнформация Тогда
		НеобходимаяИнформацияВведена = Истина;
		Если Не ЗначениеЗаполнено(РегНомер) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен регистрационный номер программы!';
																	|en = 'Application registration number is not filled in.'"), , "РегНомер");
			НеобходимаяИнформацияВведена = Ложь;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Организация) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено название организации, на которую зарегистрирована программа!';
																	|en = 'Name of the company for which the application is registered is not filled in.'"),, "Организация");
			НеобходимаяИнформацияВведена = Ложь;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ИмяОтправителя) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено имя отправителя!';
																	|en = 'Sender''s name is not filled in.'"),, "ИмяОтправителя");
			НеобходимаяИнформацияВведена = Ложь;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(EMailОтправителяДляОтвета) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен адрес электронной почты для ответа на обращение!';
																	|en = 'Specify an email address for answering.'"),, "EMailОтправителяДляОтвета");
			НеобходимаяИнформацияВведена = Ложь;
		Иначе
			Если НЕ ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(СокрЛП(EMailОтправителяДляОтвета)) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не корректно заполнен адрес электронной почты для ответа на обращение!';
																		|en = 'Email address for response to the request is filled in incorrectly.'"),, "EMailОтправителяДляОтвета");
				НеобходимаяИнформацияВведена = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(РегионИГородОтправителя) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен регион и город отправителя!';
																	|en = 'The sender''s region and city is not filled in.'"),, "РегионИГородОтправителя");
			НеобходимаяИнформацияВведена = Ложь;
		КонецЕсли;
		Если НеобходимаяИнформацияВведена Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.Обращение;
			СохранитьЗначенияКонстант(РегНомер, Организация);
		КонецЕсли;
		Если ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ПустаяСсылка") Тогда
			ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.СообщениеОбОшибке");
		КонецЕсли;
		УправлениеВидимостью();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.Обращение Тогда
		НеобходимаяИнформацияВведена = Истина;
		Если Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.СообщениеОбОшибке Тогда
			Если Не ЗначениеЗаполнено(СообщениеОбОшибкеОписаниеОшибки) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено описание ошибки!';
																		|en = 'Error description is not filled in.'"),, "СообщениеОбОшибкеОписаниеОшибки");
				НеобходимаяИнформацияВведена = Ложь;
			КонецЕсли;
		ИначеЕсли Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.ПожеланиеОПовышенииУдобстваРаботы Тогда
			Если Не ЗначениеЗаполнено(УдобствоРаботыЧтоВызываетТрудности) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не описан функционал, работа с которым вызывает трудности!';
																		|en = 'The functionality difficult to work with is not described.'"),, "УдобствоРаботыЧтоВызываетТрудности");
				НеобходимаяИнформацияВведена = Ложь;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(УдобствоРаботыОжидаемоеПоведение) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не описано ожидаемое поведение программы!';
																		|en = 'Expected behavior of the application is not described.'"),, "УдобствоРаботыОжидаемоеПоведение");
				НеобходимаяИнформацияВведена = Ложь;
			КонецЕсли;
		ИначеЕсли Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.ПожеланиеПоРазвитиюПрограммы Тогда
			Если Не ЗначениеЗаполнено(ПожеланияПоРазвитиюОписаниеЗадач) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не описаны задачи, которые не удается решить с помощью существующего функционала!';
																		|en = 'The tasks which cannot be solved using the existing functionality are not described.'"),, "ПожеланияПоРазвитиюОписаниеЗадач");
				НеобходимаяИнформацияВведена = Ложь;
			КонецЕсли;
		ИначеЕсли Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.ВопросОРаботеСПрограммой Тогда
			Если Не ЗначениеЗаполнено(ВопросОРаботеСПрограммойФормулировка) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не сформулирован вопрос о работе с программой!';
																		|en = 'The question on work with the application is not phrased.'"),, "ВопросОРаботеСПрограммойФормулировка");
				НеобходимаяИнформацияВведена = Ложь;
			КонецЕсли;
		ИначеЕсли Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.СообщениеОПроблемахСБыстродействием Тогда
			Если Не ЗначениеЗаполнено(СообщениеОПроблемахСБыстродействиемОписание) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не описана проблема с быстродействием!';
																		|en = 'Performance problem is not described.'"),, "СообщениеОПроблемахСБыстродействиемОписание");
				НеобходимаяИнформацияВведена = Ложь;
			КонецЕсли;
		ИначеЕсли Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.ОбращениеПоИнымПричинам Тогда
			Если Не ЗначениеЗаполнено(ОбращениеПоИнымПричинамТекстОбращения) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен текст обращения!';
																		|en = 'Request text is not filled in.'"),, "ОбращениеПоИнымПричинамТекстОбращения");
				НеобходимаяИнформацияВведена = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если НеобходимаяИнформацияВведена Тогда
			Если Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.СообщениеОПроблемахСБыстродействием Тогда
				Элементы.ШапкаЦельОбращения.ТекущаяСтраница = Элементы.ГруппаЦельОбращенияПраво;
				Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.СообщениеОПроблемахСБыстродействиемАнкета;
			Иначе
				Элементы.Страницы.ТекущаяСтраница = Элементы.ИтоговыйТекст;
				УстановитьЗаголовокФормы();
				СформироватьТекстПисьма();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	УправлениеВидимостьюКоманд();

КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)

	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Обращение Тогда
		Если Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.СообщениеОПроблемахСБыстродействиемАнкета Тогда
			Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.СообщениеОПроблемахСБыстродействием;
			Элементы.ШапкаЦельОбращения.ТекущаяСтраница = Элементы.ГруппаЦельОбращенияЛево;
		Иначе
			Элементы.Страницы.ТекущаяСтраница = Элементы.ТехническаяИнформация;
		КонецЕсли;
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.Обращение;
	КонецЕсли;
	УстановитьЗаголовокФормы();
	УправлениеВидимостьюКоманд();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСайтИТС(Команда)
	
	ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("http://its.1c.ru/");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУправлениеРегламентными(Команда)
	
	ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("http://www.its.1c.ru/db/metod81#content:1622:1");
	ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("http://www.its.1c.ru/db/metod81#content:1551:1");
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьЭП) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбрана учетная запись электронной почты для отправки письма';
																|en = 'Email account is not selected for email sending'"),, "УчетнаяЗаписьЭППредставление");
		Возврат;
	КонецЕсли;
	НайденныеСтроки = ДоступныеДляОтправкиУчетныеЗаписи.НайтиСтроки(Новый Структура("УчетнаяЗапись", УчетнаяЗаписьЭП));
	Если НайденныеСтроки.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выбранная учетная запись не доступна для отправки писем';
																|en = 'The selected account is not available for sending emails'"),, "УчетнаяЗаписьЭППредставление");
		Возврат;
	Иначе
		Результат = ВыполнитьОтправкуСервер();
		Если Результат = "" Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Письмо отправлено!';
												|en = 'Your email was sent'"),,,БиблиотекаКартинок.Информация32);
			Закрыть();
		Иначе
			ПоказатьПредупреждение(Неопределено, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьФайл(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПрикрепитьФайлРасширениеПодключено",
		ЭтотОбъект);
	
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьФайлРасширениеПодключено(Результат, ДополнительныеПараметры) Экспорт 
	
	АдресВременногоХранилищаФайла = "";
	ПолноеИмяФайла = "";
	НачатьПомещениеФайла(
		Новый ОписаниеОповещения("ПрикрепитьФайлЗавершение", ЭтотОбъект, Новый Структура("АдресВременногоХранилищаФайла, ПолноеИмяФайла", АдресВременногоХранилищаФайла, ПолноеИмяФайла)), 
		АдресВременногоХранилищаФайла,
		ПолноеИмяФайла,
		Истина,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьФайлЗавершение(Результат, Адрес, ПолноеИмяФайла, ДополнительныеПараметры) Экспорт
    
    Если Не Результат Тогда
        Возврат;
    КонецЕсли;
    
    Размер = РазмерФайлаВоВременномХранилище(Адрес);
    
    ИмяФайлаИнфо = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайла);
    
    ВложенияСтрока = Вложения.Добавить();
    ВложенияСтрока.Ссылка = Неопределено;
    ВложенияСтрока.Представление = ИмяФайлаИнфо.Имя;
    ВложенияСтрока.ИмяФайла = ИмяФайлаИнфо.ИмяБезРасширения;
    ВложенияСтрока.ИмяФайлаНаДиске = ПолноеИмяФайла;
    
    ВложенияСтрока.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(ИмяФайлаИнфо.Расширение);
    
    ВложенияСтрока.Размер = Размер;
    ВложенияСтрока.РазмерПредставление = РазмерСтрокой(Размер);
    ВложенияСтрока.Адрес = Адрес;
    
    ОтобразитьКоличествоФайлов();

КонецПроцедуры

&НаКлиенте
Процедура УчетныеЗаписиЭП(Команда)
	
	ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.ФормаСписка", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТехнологическийЖурнал(Команда)
	
	ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("http://www.its.1c.ru/db/metod81#content:1501:1");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗамерПроизводительности(Команда)
	
	ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("http://www.its.1c.ru/db/metod81#content:1553:1");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УчетнаяЗаписьЭППредставление.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УчетнаяЗаписьЭППредставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УчетнаяЗаписьЭППредставление.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УчетнаяЗаписьЭППредставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

#Область УправлениеВидимостьюИДоступностью

&НаКлиенте
Процедура УправлениеВидимостью()

	Если ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ПустаяСсылка")
		ИЛИ ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.СообщениеОбОшибке") Тогда
		Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.СообщениеОбОшибке;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ПожеланиеОПовышенииУдобстваРаботы") Тогда
		Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.ПожеланиеОПовышенииУдобстваРаботы;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ПожеланиеПоРазвитиюПрограммы") Тогда
		Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.ПожеланиеПоРазвитиюПрограммы;
		Если ПожеланияПоРазвитиюГотовДатьПояснения Тогда
			Элементы.ГруппаДопПояснения.ТекущаяСтраница = Элементы.ГруппаДопКонтакты;
		Иначе
			Элементы.ГруппаДопПояснения.ТекущаяСтраница = Элементы.ГруппаПустая;
		КонецЕсли;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ВопросОРаботеСПрограммой") Тогда
		Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.ВопросОРаботеСПрограммой;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.СообщениеОПроблемахСБыстродействием") Тогда
		Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.СообщениеОПроблемахСБыстродействием;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ОбращениеПоИнымПричинам") Тогда
		Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.ОбращениеПоИнымПричинам;
	КонецЕсли;
	Если ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.СообщениеОбОшибке") Тогда
		ТекстПрикрепитьФайл = НСтр("ru = 'Вы можете прикрепить к письму файлы с информацией об ошибке, например картинку экрана';
									|en = 'You can attach files with information about the error to the email, for example, a screenshot'");
	Иначе
		ТекстПрикрепитьФайл = НСтр("ru = 'Вы можете прикрепить к письму файлы с дополнительной информацией';
									|en = 'You can attach files with additional information to the email'");
	КонецЕсли;
	
	УстановитьЗаголовокФормы();

КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюКоманд()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ТехническаяИнформация Тогда
		Элементы.ГруппаПанелей.ТекущаяСтраница = Элементы.КомандыТехИнфо;
		Элементы.ТехИнфоДалее.КнопкаПоУмолчанию = Истина;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.Обращение Тогда
		Элементы.ГруппаПанелей.ТекущаяСтраница = Элементы.КомандыОбращение;
		Элементы.ОбращениеДалее.КнопкаПоУмолчанию = Истина;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ИтоговыйТекст Тогда
		Элементы.ГруппаПанелей.ТекущаяСтраница = Элементы.КомандыОбращениеОтправить;
		Элементы.Отправить.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеТекстаПисьма

&НаСервере
Процедура СформироватьТекстПисьма()
	
	ИмяФайлаXML   = ПолучитьИмяВременногоФайла(".xml");
	ТекстФайлаXML = Новый ЗаписьXML;
	ТекстФайлаXML.ОткрытьФайл(ИмяФайлаXML);
	ТекстФайлаXML.ЗаписатьОбъявлениеXML();
	ТекстФайлаXML.ЗаписатьНачалоЭлемента(НСтр("ru = 'Корневой';
												|en = 'Root'"));
	
	// Формирование основного текста письма
	ТекстПисьма = НСтр("ru = 'Тема:';
						|en = 'Subject:'") + " " + ЦельОбращения + Символы.ПС
		+ НСтр("ru = 'Контактные данные:';
				|en = 'Contact information:'") + " " + СокрЛП(ИмяОтправителя) + НСтр("ru = ', ответ прошу прислать на адрес';
																				|en = ', please send your reply to the address'") + " " + СокрЛП(EMailОтправителяДляОтвета) + Символы.ПС
		+ НСтр("ru = 'Регион/город:';
				|en = 'Region/city:'") + " " + СокрЛП(РегионИГородОтправителя) + Символы.ПС
		+ НСтр("ru = 'Рег. номер:';
				|en = 'Reg. number:'") + " " + СокрЛП(РегНомер) + НСтр("ru = ', продукт зарегистрирован на';
																	|en = ', the product is registered for '") + " " + СокрЛП(Организация) + Символы.ПС + Символы.ПС
		+ НСтр("ru = 'Текст обращения:';
				|en = 'Support request text:'") + Символы.ПС + Символы.ПС;
	ЗаписатьXML(ТекстФайлаXML, СокрЛП(ЦельОбращения), НСтр("ru = 'ЦельОбращения';
															|en = 'ЦельОбращения'"));
	ЗаписатьXML(ТекстФайлаXML, СокрЛП(ИмяОтправителя), НСтр("ru = 'ИмяОтправителя';
															|en = 'SenderName'"));
	ЗаписатьXML(ТекстФайлаXML, СокрЛП(EMailОтправителяДляОтвета), НСтр("ru = 'EMailОтправителяДляОтвета';
																		|en = 'EMailОтправителяДляОтвета'"));
	ЗаписатьXML(ТекстФайлаXML, СокрЛП(РегионИГородОтправителя), НСтр("ru = 'РегионИГородОтправителя';
																	|en = 'РегионИГородОтправителя'"));
	ЗаписатьXML(ТекстФайлаXML, СокрЛП(РегНомер), НСтр("ru = 'РегНомер';
														|en = 'RegNumber'"));
	ЗаписатьXML(ТекстФайлаXML, СокрЛП(Организация), НСтр("ru = 'Организация';
														|en = 'Company'"));
	Если ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.СообщениеОбОшибке") Тогда
		ТекстПисьма = ТекстПисьма
			+ СокрЛП(СообщениеОбОшибкеОписаниеОшибки) + Символы.ПС;
		ЗаписатьXML(ТекстФайлаXML, СокрЛП(СообщениеОбОшибкеОписаниеОшибки), НСтр("ru = 'СообщениеОбОшибкеОписаниеОшибки';
																				|en = 'СообщениеОбОшибкеОписаниеОшибки'"));
		Если СообщениеОбОшибкеГдеВоспроизводится = 0 Тогда
			ТекстПисьма = ТекстПисьма + Символы.ПС
			+ НСтр("ru = 'Согласно указанной последовательности действий ошибку можно воспроизвести на Демо-базе';
					|en = 'According to the specified sequence of actions, the error can be reproduced in the Demo base  '")
			+ Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, НСтр("ru = 'На Демо-базе';
											|en = 'On Demo base'"), НСтр("ru = 'ОшибкаВоспроизводится';
																		|en = 'ОшибкаВоспроизводится'"));
		ИначеЕсли СообщениеОбОшибкеГдеВоспроизводится = 1 Тогда
			ТекстПисьма = ТекстПисьма + Символы.ПС
			+ НСтр("ru = 'Согласно указанной последовательности действий ошибка воспроизводится на моей базе, которую могу предоставить в случае необходимости';
					|en = 'According to the specified sequence of actions, the error is reproduced in my base that I can provide if necessary'")
			+ Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, НСтр("ru = 'На базе пользователя';
											|en = 'User-based'"), НСтр("ru = 'ОшибкаВоспроизводится';
																				|en = 'ОшибкаВоспроизводится'"));
		КонецЕсли;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ПожеланиеПоРазвитиюПрограммы") Тогда
		ТекстПисьма = ТекстПисьма
			+ НСтр("ru = 'При планировании работ по развитию программы прошу учесть, что следующие задачи не удается решить с помощью существующего в данный момент функционала';
					|en = 'On application development planning, please note that the following tasks cannot be solved using the existing functionality'")
			+ Символы.ПС + Символы.ПС
			+ СокрЛП(ПожеланияПоРазвитиюОписаниеЗадач) +Символы.ПС+Символы.ПС;
		ЗаписатьXML(ТекстФайлаXML, СокрЛП(ПожеланияПоРазвитиюОписаниеЗадач), НСтр("ru = 'ПожеланияПоРазвитиюОписаниеЗадач';
																					|en = 'ПожеланияПоРазвитиюОписаниеЗадач'"));
		Если ЗначениеЗаполнено(ПожеланияПоРазвитиюУдачныеПримеры) Тогда
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru = 'Мне известны следующие удачные примеры реализации указанных задач:';
					|en = 'I know the following successful solutions of the specified tasks:'")+ Символы.ПС + Символы.ПС
			+ СокрЛП(ПожеланияПоРазвитиюУдачныеПримеры)
			+ Символы.ПС+ Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, СокрЛП(ПожеланияПоРазвитиюУдачныеПримеры), НСтр("ru = 'ПожеланияПоРазвитиюУдачныеПримеры';
																						|en = 'ПожеланияПоРазвитиюУдачныеПримеры'"));
		КонецЕсли;
		Если ПожеланияПоРазвитиюГотовДатьПояснения Тогда
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru = 'При необходимости могу дать дополнительные пояснения по указанным задачам';
					|en = 'If necessary, I can provide additional information about the specified tasks '") + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, НСтр("ru = 'Да';
											|en = 'Yes'"), НСтр("ru = 'ГотовДатьПояснения';
																|en = 'ГотовДатьПояснения'"));
			Если ЗначениеЗаполнено(ДругиеСпособыСвязи) Тогда
				ТекстПисьма = ТекстПисьма
				+ НСтр("ru = 'Мои дополнительные контакты:';
						|en = 'My additional contacts:'") + " " + СокрЛП(ДругиеСпособыСвязи) + Символы.ПС;
				ЗаписатьXML(ТекстФайлаXML, СокрЛП(ДругиеСпособыСвязи), НСтр("ru = 'ДопКонтакты';
																			|en = 'ДопКонтакты'"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ПожеланиеОПовышенииУдобстваРаботы") Тогда
		ТекстПисьма = ТекстПисьма
			+ НСтр("ru = 'Работа со следующим функицоналом вызывает трудности:';
					|en = 'The following functionality causes difficulties:'") + Символы.ПС + Символы.ПС
			+ СокрЛП(УдобствоРаботыЧтоВызываетТрудности) + Символы.ПС + Символы.ПС
			+ НСтр("ru = 'Удобным видится следующее поведение программы:';
					|en = 'The following application behavior seems to be convenient:'") + Символы.ПС + Символы.ПС
			+ СокрЛП(УдобствоРаботыОжидаемоеПоведение) + Символы.ПС + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, СокрЛП(УдобствоРаботыЧтоВызываетТрудности), НСтр("ru = 'УдобствоРаботыЧтоВызываетТрудности';
																						|en = 'УдобствоРаботыЧтоВызываетТрудности'"));
			ЗаписатьXML(ТекстФайлаXML, СокрЛП(УдобствоРаботыОжидаемоеПоведение), НСтр("ru = 'УдобствоРаботыОжидаемоеПоведение';
																						|en = 'УдобствоРаботыОжидаемоеПоведение'"));
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.СообщениеОПроблемахСБыстродействием") Тогда
		ТекстПисьма = ТекстПисьма
			+ НСтр("ru = 'Выполнение следующей последовательности действий приводит к недопустимому снижению быстродействия программы:';
					|en = 'Performing the following actions may lead to unacceptable impaired performance of the application: '") + Символы.ПС + Символы.ПС
			+ СокрЛП(СообщениеОПроблемахСБыстродействиемОписание) +Символы.ПС+Символы.ПС;
		ЗаписатьXML(ТекстФайлаXML, СокрЛП(СообщениеОПроблемахСБыстродействиемОписание), НСтр("ru = 'СообщениеОПроблемахСБыстродействиемОписание';
																							|en = 'СообщениеОПроблемахСБыстродействиемОписание'"));
		Если СообщениеОПроблемахСБыстродействиемГотовПредоставитьБазу Тогда
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru = 'В случае необходимости могу предоставить базу для анализа в отдел технической поддержки';
					|en = 'If necessary, I can provide the base for analysis for technical support'")
			+ Символы.ПС + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, НСтр("ru = 'Да';
											|en = 'Yes'"), НСтр("ru = 'СообщениеОПроблемахСБыстродействиемГотовПредоставитьБазу';
																|en = 'СообщениеОПроблемахСБыстродействиемГотовПредоставитьБазу'"));
		КонецЕсли;
		ТекстПисьма = ТекстПисьма
		+ НСтр("ru = 'Дополнительная информация:';
				|en = 'Additional information:'") + Символы.ПС;
		Если НЕ ЭтоФайловаяБаза Тогда
			Если СообщениеОПроблемахСБыстродействиемТипСУБД = 0 Тогда
				НазваниеСУБД = "MS SQL";
			ИначеЕсли СообщениеОПроблемахСБыстродействиемТипСУБД = 1 Тогда
				НазваниеСУБД = "PostgreSQL";
			ИначеЕсли СообщениеОПроблемахСБыстродействиемТипСУБД = 2 Тогда
				НазваниеСУБД = "IBM DB2";
			ИначеЕсли СообщениеОПроблемахСБыстродействиемТипСУБД = 3 Тогда
				НазваниеСУБД = "Oracle";
			КонецЕсли;
			ТекстПисьма = ТекстПисьма 
			+ НСтр("ru = 'Тип СУБД:';
					|en = 'DBMS type:'") + " " + НазваниеСУБД + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, НазваниеСУБД, НСтр("ru = 'ТипСУБД';
															|en = 'TypeDBMS'"));
			Если АнкетаКоличествоБазНаСУБД > 0 Тогда
				ТекстПисьма = ТекстПисьма 
				+ НСтр("ru = 'Количество баз, одновременно работающих на СУБД:';
						|en = 'Number of bases simultaneously operating on DBMS:'") + " " + АнкетаКоличествоБазНаСУБД + Символы.ПС;
				ЗаписатьXML(ТекстФайлаXML, АнкетаКоличествоБазНаСУБД, НСтр("ru = 'КоличествоБазНаСУБД';
																			|en = 'КоличествоБазНаСУБД'"));
			КонецЕсли;
			Если АнкетаСерверБДСерверПриложений = 0 Тогда
				РасположениеСерверовБДИПриложений = Элементы.АнкетаСерверБДСерверПриложенийРаздельно.Заголовок;
			ИначеЕсли АнкетаСерверБДСерверПриложений = 1 Тогда
				РасположениеСерверовБДИПриложений = Элементы.АнкетаСерверБДСерверПриложенийВместе.Заголовок;
			ИначеЕсли АнкетаСерверБДСерверПриложений = 2 Тогда
				РасположениеСерверовБДИПриложений = Элементы.АнкетаСерверБДСерверПриложенийНеИзвестно.Заголовок;
			КонецЕсли;
			ТекстПисьма = ТекстПисьма 
			+ НСтр("ru = 'Расположение сервера базы данных и сервера приложений:';
					|en = 'Location of database server and application server:'") + " " + РасположениеСерверовБДИПриложений + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, РасположениеСерверовБДИПриложений, НСтр("ru = 'РасположениеСерверовБДИПриложений';
																				|en = 'РасположениеСерверовБДИПриложений'"));
			Если ЗначениеЗаполнено(АнкетаПараметрыПроцессораИПамяти) Тогда
				ТекстХарактеристики = НСтр("ru = 'Аппаратные характеристики сервера базы данных и сервера приложений:';
											|en = 'Hardware characteristics of a database server and an application server:'") + " " + СокрЛП(АнкетаПараметрыПроцессораИПамяти);
				ТекстПисьма = ТекстПисьма + ТекстХарактеристики + Символы.ПС;
				ЗаписатьXML(ТекстФайлаXML, СокрЛП(АнкетаПараметрыПроцессораИПамяти), НСтр("ru = 'ПараметрыПроцессораИПамятиСерверовБДИПриложений';
																							|en = 'ПараметрыПроцессораИПамятиСерверовБДИПриложений'"));
			КонецЕсли;
		КонецЕсли;
		Если СообщениеОПроблемахСБыстродействиемКоличествоПользователей > 0 Тогда
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru = 'Количество одновременно работающих в базе пользователей в момент снижения быстродействия:';
					|en = 'Number of concurrent users in the base when performance is affected:'") + " "
			+ СообщениеОПроблемахСБыстродействиемКоличествоПользователей + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, СообщениеОПроблемахСБыстродействиемКоличествоПользователей, НСтр("ru = 'КоличествоОдновременноРаботающихПользователей';
																										|en = 'КоличествоОдновременноРаботающихПользователей'"));
		КонецЕсли;
		Если АнкетаЗамедлениеПриОтключенииРегламентных = 0 Тогда
			ЗамедлениеПриОтключенныхРегламентных = Элементы.АнкетаЗамедлениеПриОтключенииРегламентныхДа.Заголовок;
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru = 'Снижение быстродействия наблюдается также при отключенных регламентных заданиях';
					|en = 'Performance is also affected if scheduled jobs are disabled'") + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, ЗамедлениеПриОтключенныхРегламентных, НСтр("ru = 'ЗамедлениеПриОтключенныхРегламентныхЗаданиях';
																					|en = 'ЗамедлениеПриОтключенныхРегламентныхЗаданиях'"));
		ИначеЕсли АнкетаЗамедлениеПриОтключенииРегламентных = 1 Тогда
			ЗамедлениеПриОтключенныхРегламентных = Элементы.АнкетаЗамедлениеПриОтключенииРегламентныхНет.Заголовок;
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru = 'При отключенных регламентных заданиях снижение быстродействия не наблюдается';
					|en = 'Performance is not affected if scheduled jobs are disabled'") + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, ЗамедлениеПриОтключенныхРегламентных, НСтр("ru = 'ЗамедлениеПриОтключенныхРегламентныхЗаданиях';
																					|en = 'ЗамедлениеПриОтключенныхРегламентныхЗаданиях'"));
		КонецЕсли;
		Если АнкетаЗамедлениеПодПолнымиПравами = 0 Тогда
			ЗамедлениеПодПолнымиПравами = Элементы.АнкетаЗамедлениеПодПолнымиПравамиДа.Заголовок;
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru = 'Снижение быстродействия наблюдается при работе с полными правами';
					|en = 'Performance is affected if operating with full rights'") + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, ЗамедлениеПодПолнымиПравами, НСтр("ru = 'ЗамедлениеПодПолнымиПравами';
																		|en = 'ЗамедлениеПодПолнымиПравами'"));
		ИначеЕсли АнкетаЗамедлениеПодПолнымиПравами = 1 Тогда
			ЗамедлениеПодПолнымиПравами = Элементы.АнкетаЗамедлениеПодПолнымиПравамиНет.Заголовок;
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru = 'При работе с полными правами снижение быстродействия не наблюдается';
					|en = 'Performance is not affected if operating with full rights'") + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, ЗамедлениеПодПолнымиПравами, НСтр("ru = 'ЗамедлениеПодПолнымиПравами';
																		|en = 'ЗамедлениеПодПолнымиПравами'"));
		КонецЕсли;
		Если АнкетаЗамедлениеПодНеПолнымиПравами = 0 Тогда
			ЗамедлениеПодНеПолнымиПравами = Элементы.АнкетаЗамедлениеПодНеПолнымиПравамиДа.Заголовок;
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru = 'Снижение быстродействия наблюдается при работе с неполными правами';
					|en = 'Performance is affected if operating with incomplete rights'") + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, ЗамедлениеПодНеПолнымиПравами, НСтр("ru = 'ЗамедлениеПодНеПолнымиПравами';
																			|en = 'ЗамедлениеПодНеПолнымиПравами'"));
		ИначеЕсли АнкетаЗамедлениеПодНеПолнымиПравами = 1 Тогда
			ЗамедлениеПодНеПолнымиПравами = Элементы.АнкетаЗамедлениеПодНеПолнымиПравамиНет.Заголовок;
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru = 'При работе с неполными правами снижение быстродействия не наблюдается';
					|en = 'Performance is not affected if operating with incomplete rights'") + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, ЗамедлениеПодНеПолнымиПравами, НСтр("ru = 'ЗамедлениеПодНеПолнымиПравами';
																			|en = 'ЗамедлениеПодНеПолнымиПравами'"));
		КонецЕсли;
		Если ВключеноОграничениеДоступаНаУровнеЗаписей Тогда
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru = 'В базе включено ограничение доступа на уровне записей';
					|en = 'Access restriction on the record level is enabled in the infobase'") + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, ?(ВключеноОграничениеДоступаНаУровнеЗаписей, НСтр("ru = 'Да';
																						|en = 'Yes'"), НСтр("ru = 'Нет';
																											|en = 'No'")), НСтр("ru = 'ВключеноОграничениеДоступаНаУровнеЗаписей';
																																|en = 'ВключеноОграничениеДоступаНаУровнеЗаписей'"));
		КонецЕсли;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ВопросОРаботеСПрограммой") Тогда
		ТекстПисьма = ТекстПисьма
		+ НСтр("ru = 'При работе с программой возник следующий вопрос:';
				|en = 'When working with the application, I have questions about the following:'") + Символы.ПС + Символы.ПС
		+ СокрЛП(ВопросОРаботеСПрограммойФормулировка) +Символы.ПС+Символы.ПС;
		ЗаписатьXML(ТекстФайлаXML, СокрЛП(ВопросОРаботеСПрограммойФормулировка), НСтр("ru = 'ВопросОРаботеСПрограммой';
																						|en = 'ВопросОРаботеСПрограммой'"));
		Если ВопросОРаботеСПрограммойЧтениеДокументации = 0 Тогда
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru = 'Перед написанием письма мною были изучены материалы в документации, встроенной справке,
			|статьях ИТС, однако полученной информации для решения моих вопросов не хватило';
			|en = 'Before writing this email, I have read materials in the documentation, online help,
			|ITS items but the information provided was insufficient to resolve my issues'")+Символы.ПС + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, НСтр("ru = 'Нет';
											|en = 'No'"), НСтр("ru = 'ДостаточностьИнформацииВДокументации';
																|en = 'ДостаточностьИнформацииВДокументации'"));
		КонецЕсли;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ОбращениеПоИнымПричинам") Тогда
		ТекстПисьма = ТекстПисьма
			+ СокрЛП(ОбращениеПоИнымПричинамТекстОбращения) +Символы.ПС+Символы.ПС;
		ЗаписатьXML(ТекстФайлаXML, СокрЛП(ОбращениеПоИнымПричинамТекстОбращения), НСтр("ru = 'ОбращениеПоИнымПричинамТекстОбращения';
																						|en = 'ОбращениеПоИнымПричинамТекстОбращения'"));
	КонецЕсли;
	
	Если НуженДоступНаФТП Тогда
		ТекстПисьма = ТекстПисьма
		+ НСтр("ru = 'Также прошу предоставить доступ на FTP-сервер для отправки больших файлов';
				|en = 'Please provide me with access to FTP server to send large files'") + Символы.ПС + Символы.ПС;
		ЗаписатьXML(ТекстФайлаXML, НСтр("ru = 'Да';
										|en = 'Yes'"), НСтр("ru = 'НуженДоступНаФТП';
															|en = 'НуженДоступНаФТП'"));
	КонецЕсли;
	
	// добавляем техническую информацию
	СистемИнфо = Новый СистемнаяИнформация;
	
	ЗаписатьXML(ТекстФайлаXML, СистемИнфо.ВерсияПриложения, НСтр("ru = 'Версия1СПредприятия8';
																|en = 'Версия1СПредприятия8'"));
	ЗаписатьXML(ТекстФайлаXML, НазваниеКонфигурации, НСтр("ru = 'Конфигурация';
															|en = 'Configuration'"));
	ЗаписатьXML(ТекстФайлаXML, ВерсияКонфигурации, НСтр("ru = 'ВерсияКонфигурации';
														|en = 'ConfigurationVersion'"));
	ЗаписатьXML(ТекстФайлаXML, ПоставщикКонфигурации, НСтр("ru = 'ПоставщикКонфигурации';
															|en = 'ПоставщикКонфигурации'"));
	Если ЭтоФайловаяБаза Тогда
		ЗаписатьXML(ТекстФайлаXML, НСтр("ru = 'Файловый';
										|en = 'File'"), НСтр("ru = 'ВариантРаботы';
																|en = 'ВариантРаботы'"));
	Иначе
		ЗаписатьXML(ТекстФайлаXML, НСтр("ru = 'Клиент-серверный';
										|en = 'Client/server'"), НСтр("ru = 'ВариантРаботы';
																		|en = 'ВариантРаботы'"));
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВидПриложения",  "");
	ДопПараметры.Вставить("Логин",          "");
	ДопПараметры.Вставить("Пароль",         "");
	ДопПараметры.Вставить("ПарольЗаполнен", Ложь);
	
	ДопПараметрыОтправкиСообщения = ДопПараметрыОтправкиСообщения(ДопПараметры);
	Если ЗначениеЗаполнено(ДопПараметрыОтправкиСообщения) Тогда
		ДопТехИнформация = ДопПараметрыОтправкиСообщения.Вложения[0].Текст;
		ДопТехИнформация = Лев(ДопТехИнформация, СтрНайти(ДопТехИнформация, НСтр("ru = 'Идентификатор конфигурации:';
																				|en = 'Configuration ID:'")) - 1);
	Иначе
		ДопТехИнформация = "";
	КонецЕсли;
	ТекстПисьма = ТекстПисьма + Символы.ПС + ДопТехИнформация;
	ЗаписатьXML(ТекстФайлаXML, ДопТехИнформация, НСтр("ru = 'Дополнительно';
														|en = 'More'"));
	
	ТекстПисьма = ТекстПисьма + Символы.ПС + НСтр("ru = 'Процессор:';
													|en = 'Processor:'") + " " + СистемИнфо.Процессор;
	ЗаписатьXML(ТекстФайлаXML, СистемИнфо.Процессор, НСтр("ru = 'Процессор';
															|en = 'Toller'"));
	ТекстПисьма = ТекстПисьма + Символы.ПС + НСтр("ru = 'Объем оперативной памяти (МБайт):';
													|en = 'Physical memory (MB):'") + " " + СистемИнфо.ОперативнаяПамять;
	ЗаписатьXML(ТекстФайлаXML, СистемИнфо.ОперативнаяПамять, НСтр("ru = 'ОЗУ';
																	|en = 'RAM'"));
	ТекстПисьма = ТекстПисьма + Символы.ПС + НСтр("ru = 'Тип платформы:';
													|en = 'Platform type:'") + " " + СистемИнфо.ТипПлатформы;
	ЗаписатьXML(ТекстФайлаXML, Строка(СистемИнфо.ТипПлатформы), НСтр("ru = 'ТипПлатформы';
																	|en = 'PlatformType'"));
	ТекстПисьма = ТекстПисьма + Символы.ПС + НСтр("ru = 'Версия ОС:';
													|en = 'FA version:'") + " " + СистемИнфо.ВерсияОС;
	ЗаписатьXML(ТекстФайлаXML, СистемИнфо.ВерсияОС, НСтр("ru = 'ВерсияОС';
														|en = 'ВерсияОС'"));
	
	ИтоговыйТекстПисьма.УстановитьТекст(ТекстПисьма);
	
	ТекстФайлаXML.ЗаписатьКонецЭлемента();
	ТекстФайлаXML.Закрыть();
	АдресТехническогоФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаXML), УникальныйИдентификатор);
	
	Попытка
		УдалитьФайлы(ИмяФайлаXML)
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обращение в техническую поддержку';
										|en = 'Request technical support'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось удалить временный файл
			|%1 по причине: %2';
			|en = 'Cannot delete temporary file:
			|%1. Reason: %2'"), ИмяФайлаXML, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаПисьма

&НаСервере
Процедура ЗагрузитьСписокАдресовДляОтправки()
	
	Элементы.УчетнаяЗаписьЭППредставление.СписокВыбора.Очистить();
	ДоступныеДляОтправкиУчетныеЗаписи.Очистить();
	УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(
		Элементы.УчетнаяЗаписьЭППредставление.СписокВыбора,ДоступныеДляОтправкиУчетныеЗаписи);
	Для Каждого Элемент Из ДоступныеДляОтправкиУчетныеЗаписи Цикл
		Элемент.АдресЭлектроннойПочты = Элемент.УчетнаяЗапись.АдресЭлектроннойПочты;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция РазмерФайлаВоВременномХранилище(АдресВременногоХранилищаФайла)
	
	Попытка
		Данные = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла);
	Исключение
		Возврат 0;
	КонецПопытки;
	Если ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Данные.Размер();
	
КонецФункции

&НаКлиенте
Функция РазмерСтрокой(Размер)
	
	Если Размер = 0 Тогда
		Возврат "-";
	ИначеЕсли Размер < 1024 * 10 Тогда // < 10 Кб
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 Кб';
				|en = '%1 KB'"),
			Формат(Макс(1, Окр(Размер / 1024, 1, 1)), "ЧГ=0"));
	ИначеЕсли Размер < 1024 * 1024 Тогда // < 1 Мб
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 Кб';
				|en = '%1 KB'"),
			Формат(Цел(Размер / 1024), "ЧГ=0"));
	ИначеЕсли Размер < 1024 * 1024 * 10 Тогда // < 10 Мб
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 Мб';
				|en = '%1 MB'"),
			Формат(Окр(Размер / 1024 / 1024, 1, 1), "ЧГ=0"));
	Иначе // >= 10 Мб
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 Мб';
				|en = '%1 MB'"),
			Формат(Цел(Размер / 1024 / 1024), "ЧГ=0"));
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВыполнитьОтправкуСервер()
	
	ПисьмоОбъект = РеквизитФормыВЗначение("Объект");
	
	Попытка
		ИдентификаторПисьма = ВыполнитьОтправкуПисьма(ПисьмоОбъект);
	Исключение
		ЗначениеВРеквизитФормы(ПисьмоОбъект, "Объект");
		Возврат КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

	Возврат "";
	
КонецФункции

&НаСервере
Функция ВыполнитьОтправкуПисьма(Объект, Соединение = Неопределено)
	
	ПараметрыПисьма = Новый Структура;

	Адресаты = Новый Массив;
	Адресаты.Добавить(Новый Структура("Адрес,Представление", "v8@1c.ru", "v8@1c.ru"));
	ПараметрыПисьма.Вставить("Кому", Адресаты);
	ПараметрыПисьма.Вставить("Тема", ЦельОбращения);
	ПараметрыПисьма.Вставить("Тело", ИтоговыйТекстПисьма.ПолучитьТекст());
	ПараметрыПисьма.Вставить("Кодировка", КодировкаТекста.UTF8);
	ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
	
	СоответствиеВложения = Новый Соответствие;
	Для Каждого Вложение Из Вложения Цикл
		СоответствиеВложения.Вставить(Вложение.Представление, ПолучитьИзВременногоХранилища(Вложение.Адрес));
	КонецЦикла;
	СоответствиеВложения.Вставить("TehInfo.xml", ПолучитьИзВременногоХранилища(АдресТехническогоФайла));
		
	ПараметрыПисьма.Вставить("Вложения", СоответствиеВложения);
	
	Возврат РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗаписьЭП, ПараметрыПисьма,Соединение);
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ОтобразитьКоличествоФайлов()
	
	Если Вложения.Количество() > 0 Тогда
		Элементы.ВложенияПредставление.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Прикрепленные файлы (%1)';
				|en = 'Attached files (%1)'"),
			Вложения.Количество());
	Иначе
		Элементы.ВложенияПредставление.Заголовок = НСтр("ru = 'Прикрепленные файлы';
														|en = 'Attached files'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	
	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	СтрокаЗаголовка = НСтр("ru = 'Помощник обращения в техническую поддержку фирмы ""1С"" (%1)';
							|en = '1C technical support wizard (%1) '");
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаЗаголовка, СокрЛП(ТекущаяСтраница.Заголовок));
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьЗначенияКонстант(РегНомер, Организация)
	
	Константы.РегистрационныйНомерПрограммы.Установить(РегНомер);
	Константы.ОрганизацияНаКоторуюЗарегистрированаПрограмма.Установить(СокрЛП(Организация));
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыборРасширениеПодключено(Результат, ДополнительныеПараметры) Экспорт
	
	ОбщегоНазначенияКлиент.ОткрытьФайлВПрограммеПросмотра(ДополнительныеПараметры.ИмяФайла);
	
КонецПроцедуры

&НаСервере
Функция ДопПараметрыОтправкиСообщения(Знач ДопПараметры)
	
	Результат = Новый Структура;
	Результат.Вставить("Логин"         , "");
	Результат.Вставить("ПарольЗаполнен", Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	Если ДанныеАутентификации <> Неопределено Тогда
		Результат.Логин = ДанныеАутентификации.Логин;
		Результат.ПарольЗаполнен = ЗначениеЗаполнено(ДанныеАутентификации.Пароль);
	КонецЕсли;
	
	Результат.Вставить("ШаблонТекстаСообщения", ШаблонТекстаСообщения(ДопПараметры));
	
	МассивВложений = Новый Массив;
	МассивВложений.Добавить(
		Новый Структура(
			"Представление, Текст",
			НСтр("ru = 'Техническая информация.txt';
				|en = 'Technical information.txt'"),
			ТекстВложенияТехническаяИнформация(
				ДопПараметры.ВидПриложения,
				Результат)));
	
	Результат.Вставить("Вложения", МассивВложений);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ШаблонТекстаСообщения(ДопПараметры)
	
	Возврат НСтр("ru = 'Здравствуйте!
			|
			|%msgtxt
			|
			|Регистрационный номер программного продукта: <Укажите рег. номер>;
			|Организация: <Укажите название организации>.
			|С уважением,
			|.';
			|en = 'Hello,
			|
			|%msgtxt
			|
			|Software registration number:  <Specify reg. number>;
			|Company: <Specify company>.
			|Sincerely,
			|.'");
	
КонецФункции

&НаСервере
Функция ТекстВложенияТехническаяИнформация(ВидПриложения, ДопПараметры)
	
	// Общие технические параметры и информация о сеансе
	СистИнфо = Новый СистемнаяИнформация;
	ЭтоФайловаяИБ = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ИмяПрограммы = Строка(ИнтернетПоддержкаПользователей.ИмяПрограммы());
	Если ИмяПрограммы = "Unknown" Тогда
		ИмяПрограммы = НСтр("ru = '<Не заполнено>';
							|en = '<Not filled in>'");
	КонецЕсли;
	
	// Общая информация:
	Результат = НСтр("ru = 'Техническая информация о программе:
		|Название программы: %1
		|Имя программы: %2;
		|Версия программы: %3;
		|Поставщик: %4;
		|Версия Платформы 1С:Предприятие: %5;
		|Версия Библиотеки Интернет-поддержки: %6;
		|Версия Библиотеки стандартных подсистем: %7;
		|Вид приложения: %8;
		|Режим: %9;';
		|en = 'Technical information about application:
		|Application title: %1
		|Application name: %2;
		|Application version: %3;
		|Supplier: %4;
		|1C:Enterprise platform version: %5;
		|Online support library version: %6;
		|Standard subsystem library version: %7;
		|Application kind: %8;
		|Mode: %9;'");
	
	Результат =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Результат,
			Метаданные.Синоним,
			ИмяПрограммы + " (" + Строка(ИнтернетПоддержкаПользователей.ИмяКонфигурации()) + ")",
			Строка(ИнтернетПоддержкаПользователей.ВерсияКонфигурации()),
			Метаданные.Поставщик,
			Строка(СистИнфо.ВерсияПриложения),
			ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки(),
			СтандартныеПодсистемыСервер.ВерсияБиблиотеки(),
			ВидПриложения,
			?(ЭтоФайловаяИБ, НСтр("ru = 'Файловый';
									|en = 'File'"), НСтр("ru = 'Серверный';
															|en = 'Server'")));
	
	// Права:
	Результат = Результат
		+ Символы.ПС
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Полные права: %1;
				|Права администратора: %2;
				|Права для подключения Интернет-поддержки: %3;';
				|en = 'Full rights: %1;
				|Administrator rights: %2;
				|Rights for Online user support: %3;'"),
			?(Пользователи.ЭтоПолноправныйПользователь(, Ложь, Ложь), НСтр("ru = 'есть';
																			|en = 'is'"), НСтр("ru = 'нет';
																								|en = 'no'")),
			?(Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь), НСтр("ru = 'есть';
																			|en = 'is'"), НСтр("ru = 'нет';
																									|en = 'no'")),
			?(ИнтернетПоддержкаПользователей.ПравоЗаписиПараметровИПП(), НСтр("ru = 'есть';
																				|en = 'is'"), НСтр("ru = 'нет';
																									|en = 'no'")));
	
	// Личные данные:
	Результат = Результат
		+ Символы.ПС
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Логин для подключения Интернет-поддержки: %1;
				|Пароль для подключения Интернет-поддержки: %2;
				|Регистрационный номер программного продукта: %3;';
				|en = 'Login for connecting online support: %1;
				|Password for connecting online support: %2;
				|Registration number of the software product: %3;'"),
			ДопПараметры.Логин,
			?(ДопПараметры.ПарольЗаполнен, НСтр("ru = 'заполнен';
												|en = 'filled with'"), НСтр("ru = 'не заполнен';
																		|en = 'not filled in'")),
			ИнтернетПоддержкаПользователей.РегистрационныйНомерПрограммногоПродукта());
	
	// Настройки соединения:
	НастройкиСоединения = ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами();
	Результат = Результат
		+ Символы.ПС
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Настройки соединения с серверами Интернет-поддержки:
				|	Доменная зона: %1';
				|en = 'Settings of connection to online support servers:
				|	Domain extension: %1'"),
			?(НастройкиСоединения.ДоменРасположенияСерверовИПП = 1, "1c.eu", "1c.ru"));
	
	// Настройки клиента лицензирования:
	Если ИнтернетПоддержкаПользователей.ДоступнаРаботаСНастройкамиКлиентаЛицензирования() Тогда
		ИДКонфигурации = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ИДКонфигурации();
		Если Не ПустаяСтрока(ИДКонфигурации) Тогда
			Результат = Результат + Символы.ПС
				+ НСтр("ru = 'Имя клиента лицензирования:';
						|en = 'Licensing client name:'") + " "
				+ КлиентЛицензирования.ИмяКлиентаЛицензирования()
				+ Символы.ПС + НСтр("ru = 'Идентификатор конфигурации:';
									|en = 'Configuration ID:'")
				+ Символы.ПС + ИДКонфигурации;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

ВыполняетсяУдаление = Ложь;

#КонецОбласти