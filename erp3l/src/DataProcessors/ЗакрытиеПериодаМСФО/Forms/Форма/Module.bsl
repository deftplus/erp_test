
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация      	= БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	Объект.ПериодРегистрации	= ПериодПоУмолчанию();
	Объект.Сценарий 			= Константы.СценарийМСФО.Получить();
	Элементы.Сценарий.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСценарии");
	
	ПолучитьПараметрыОрганизации();
	
	УстановитьМожноЗакрыватьМесяц();
	
	ЗаполнитьДанныеОбОперациях();
	
	Элементы.ТаблицаОпераций.ОтборСтрок = Новый ФиксированнаяСтруктура("Требуется", Истина);
	// Настройка элементов формы
	НастроитьФорму();

КонецПроцедуры // ПриСозданииНаСервере

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	Для каждого СтрокаТаблицы Из Объект.ТаблицаОпераций Цикл
		Если ТипЗнч(НовыйОбъект) = Тип(СтрЗаменить(СтрокаТаблицы.Документ, "Документ.", "ДокументСсылка.")) Тогда
			Если ПустаяСтрока(СтрокаТаблицы.ВидОперации) Тогда
				СтрокаТаблицы.Ссылка = НовыйОбъект;
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ОбщегоНазначенияУХ.ЗначенияРеквизитовОбъекта(НовыйОбъект, "Проведен, Ответственный, Дата"));
				Возврат;
			Иначе
				СтруктураРеквизитов = ОбщегоНазначенияУХ.ЗначенияРеквизитовОбъекта(НовыйОбъект, "ВидОперации, Проведен, Ответственный, Дата");
				Если СтруктураРеквизитов.ВидОперации = ПредопределенноеЗначение("Перечисление." + СтрокаТаблицы.ВидОперации) Тогда
					СтрокаТаблицы.Ссылка = НовыйОбъект;
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураРеквизитов);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	НастроитьФорму();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	ПриИзмененииОрганизации();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ПриИзмененииОрганизации();
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииПриИзменении(Элемент)

	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОперацийВыбор(щЭлемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.ТаблицаОпераций.ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Элементы.ТаблицаОпераций.ТекущиеДанные.Ссылка) Тогда
			ПоказатьЗначение(Неопределено, Элементы.ТаблицаОпераций.ТекущиеДанные.Ссылка);
		ИначеЕсли Элементы.ТаблицаОпераций.ТекущиеДанные.Картинка = 1 Тогда
			
			ДопПараметры = Новый Структура("Документ, ВидОперации", Элементы.ТаблицаОпераций.ТекущиеДанные.Документ, Элементы.ТаблицаОпераций.ТекущиеДанные.ВидОперации);
			Оповещение = Новый ОписаниеОповещения("СозданиеНовогоДокумента", ЭтаФорма, ДопПараметры);
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Создать документ закрытия?'"), РежимДиалогаВопрос.ДаНет, 20);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УменьшитьПериод(Команда)
	
	ПриИзмененииПериода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьПериод(Команда)
	
	ПриИзмененииПериода(1);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаВыполнить(Команда)
	ПакетноеЗакрытие("ЗапуститьЗакрытие", Нстр("ru = 'Проведение документов закрытия месяца'"));
КонецПроцедуры

&НаКлиенте
Процедура КнопкаОтменить(Команда)
	ПакетноеЗакрытие("ОтменитьЗакрытие", Нстр("ru = 'Отмена закрытия месяца'"));
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЭтап(Команда)
	Если НЕ МожноЗакрыватьМесяц Тогда
		Возврат;
	КонецЕсли;
	Если Элементы.ТаблицаОпераций.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = Новый Структура("Ссылка, Документ, ВидОперации, Состояние, Дата, Ответственный, Проведен, Картинка");
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Элементы.ТаблицаОпераций.ТекущиеДанные);
	ЗакрытьЭтапНаСервере(СтрокаТаблицы);
	ЗаполнитьЗначенияСвойств(Элементы.ТаблицаОпераций.ТекущиеДанные, СтрокаТаблицы);
	НастроитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЭтап(Команда)
	Если НЕ МожноЗакрыватьМесяц Тогда
		Возврат;
	КонецЕсли;
	Если Элементы.ТаблицаОпераций.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = Новый Структура("Ссылка, Документ, ВидОперации, Состояние, Дата, Ответственный, Проведен, Картинка");
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Элементы.ТаблицаОпераций.ТекущиеДанные);
	ОтменитьЗакрытьЭтапНаСервере(СтрокаТаблицы);
	ЗаполнитьЗначенияСвойств(Элементы.ТаблицаОпераций.ТекущиеДанные, СтрокаТаблицы);
	НастроитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокумент(Команда)
	Если Элементы.ТаблицаОпераций.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(Элементы.ТаблицаОпераций.ТекущиеДанные.Ссылка) Тогда
		ПоказатьЗначение(Неопределено, Элементы.ТаблицаОпераций.ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПакетноеЗакрытие(ИмяПроцедуры, ЗаголовокСообщения) 
	Если НЕ МожноЗакрыватьМесяц Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
		СоздатьОтменитьЗакрытие(ИмяПроцедуры, ЗаголовокСообщения, Ложь);
	Иначе
		ДлительнаяОперация = СоздатьОтменитьЗакрытие(ИмяПроцедуры, ЗаголовокСообщения, Истина);
	    
	    ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	    
	    ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ТекстСообщения = ЗаголовокСообщения;
	    ПараметрыОжидания.ВыводитьСообщения = Истина;
	    ПараметрыОжидания.Интервал = 2;
	    
	    ДлительныеОперацииКлиент.ОжидатьЗавершение(
	        ДлительнаяОперация,
	        Новый ОписаниеОповещения("ВыполнитьПроцедуруФоновоВыполнено", ЭтотОбъект),
	        ПараметрыОжидания);
	КонецЕсли;
КонецПроцедуры
	
&НаКлиенте
Процедура ВыполнитьПроцедуруФоновоВыполнено(Результат, ДополнительныеПараметры) Экспорт

    Если Результат = Неопределено Тогда
		ПриИзмененииОрганизации();
		Возврат;
    ИначеЕсли Результат.Статус = "Ошибка" Тогда
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
    ИначеЕсли Результат.Статус = "Выполнено" Тогда        
		ЗагрузитьТаблицуНаСервере(Результат.АдресРезультата);
	КонецЕсли;
	
	ОформитьТаблицуОпераций();
	НастроитьФорму();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТаблицуНаСервере(Адрес)
	МассивСтрок = ПолучитьИзВременногоХранилища(Адрес);
	Таблица = Объект.ТаблицаОпераций.Выгрузить();
	Таблица.Очистить();
	Для каждого Стр Из МассивСтрок Цикл
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
	КонецЦикла;
	Объект.ТаблицаОпераций.Загрузить(Таблица);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОбОперациях()
	
	ТаблицаОпераций = Объект.ТаблицаОпераций.Выгрузить();
	ТаблицаОпераций.Очистить();
	
	ЗакрытиеМесяцаМСФО.ПодготовитьТаблицуОпераций(ТаблицаОпераций, КэшируемыеЗначения, Объект.Организация);
	Объект.ТаблицаОпераций.Загрузить(ТаблицаОпераций);
	
	ЗапросВведенных = ЗакрытиеМесяцаМСФО.ПодготовитьЗапросДанныхОпераций(ТаблицаОпераций, 
																		Новый Структура("ПериодРегистрации, Организация, Сценарий", 
																		Объект.ПериодРегистрации, Объект.Организация, Объект.Сценарий));
	
	
	Если ПустаяСтрока(ЗапросВведенных.Текст) Тогда
		Возврат;
	КонецЕсли;
	РезультатЗапроса = ЗапросВведенных.Выполнить();
	ТаблицаРезультатов = РезультатЗапроса.Выгрузить();
	ТаблицаРезультатов.Сортировать("Дата УБЫВ");
	Для Каждого СтрокаТаблицы Из Объект.ТаблицаОпераций Цикл
		Если ПустаяСтрока(СтрокаТаблицы.ВидОперации) Тогда
			СтрокиДокументов = ТаблицаРезультатов.НайтиСтроки(Новый Структура("Документ", СтрокаТаблицы.Документ));
		Иначе
			СтрокиДокументов = ТаблицаРезультатов.НайтиСтроки(Новый Структура("Документ, ВидОперации", СтрокаТаблицы.Документ, СтрокаТаблицы.ВидОперации));
		КонецЕсли;
		Если СтрокиДокументов.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокиДокументов[0]);
			Если СтрокиДокументов[0].Проведен Тогда
				СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
			Иначе
				СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
			КонецЕсли;
		Иначе 
			СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
		КонецЕсли;
	КонецЦикла;
	Если НЕ МожноЗакрыватьМесяц Тогда
		
		Для Каждого СтрокаТаблицы Из Объект.ТаблицаОпераций Цикл
			СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
		КонецЦикла;
				
	КонецЕсли;

	ОформитьТаблицуОпераций();
		
КонецПроцедуры

&НаСервере
Процедура ОформитьТаблицуОпераций()
	Для Каждого СтрокаТаблицы Из Объект.ТаблицаОпераций Цикл
		Если СтрокаТаблицы.Справочно Тогда
			СтрокаТаблицы.Картинка = 1;
		ИначеЕсли СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками Тогда
			СтрокаТаблицы.Картинка = 3;
		ИначеЕсли СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено Тогда
			СтрокаТаблицы.Картинка = 2;
		Иначе
			СтрокаТаблицы.Картинка = 0;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПолучитьПараметрыОрганизации()
	
	Если КэшируемыеЗначения = Неопределено Тогда
		КэшируемыеЗначения = Новый Структура;
	КонецЕсли;
		
	ИменаУП = МСФОВызовСервераУХ.ПутиРеквизитовУП("ПланСчетовМСФО, ФормироватьПроводкиМСФО, УчетнаяПолитика, ШаблонТрансляции, ВидОтчетаОСВ");
	ТабУП = МСФОВызовСервераУХ.ЗначенияУП(ИменаУП, Объект.Организация, Объект.ПериодРегистрации.ДатаОкончания, Объект.Сценарий);
	РеквизитыУП = МСФОВызовСервераУХ.ЗначенияПоОрганизацииУП(ТабУП);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(КэшируемыеЗначения, РеквизитыУП, Истина);	
		
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизации()

	ПолучитьПараметрыОрганизации();
	
	УстановитьМожноЗакрыватьМесяц();
	
	ЗаполнитьДанныеОбОперациях();
	
	НастроитьФорму();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФорму()

	Отбор = Новый Структура();
	Отбор.Вставить("Состояние", Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено);
	КоличествоВыполнено          = Объект.ТаблицаОпераций.НайтиСтроки(Отбор).Количество();
	
	Отбор = Новый Структура();
	Отбор.Вставить("Состояние", Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено);
	КоличествоНеВыполнено        = Объект.ТаблицаОпераций.НайтиСтроки(Отбор).Количество();
	
	Отбор = Новый Структура();
	Отбор.Вставить("Состояние", Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками);
	КоличествоВыполненоСОшибками = Объект.ТаблицаОпераций.НайтиСтроки(Отбор).Количество();
	
	Отбор = Новый Структура();
	Отбор.Вставить("Состояние", Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено);
	КоличествоПропущено          = Объект.ТаблицаОпераций.НайтиСтроки(Отбор).Количество();
	
	КоличествоОсталосьВыполнить  = КоличествоВыполненоСОшибками + КоличествоНеВыполнено;
	
	// Статус - сводно
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Статус      = НСтр("ru = 'Не задана организация'");
		ЦветСтатуса = ЦветаСтиля.ЦветОсобогоТекста;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		Статус = НСтр("ru = 'Не задан период'");
		ЦветСтатуса = ЦветаСтиля.ЦветОсобогоТекста;
		
	ИначеЕсли НЕ УчетнаяПолитикаСуществует Тогда
		Статус = НСтр("ru = 'Не задана учетная политика'");
		ЦветСтатуса = ЦветаСтиля.ЦветОсобогоТекста;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(УправлениеПериодом) И Не КэшируемыеЗначения.ФормироватьПроводкиМСФО Тогда
		Статус = НСтр("ru = 'Период не открыт'");
		ЦветСтатуса = ЦветаСтиля.ЦветОсобогоТекста;
		
	ИначеЕсли ПериодЗакрыт Тогда
		Статус = НСтр("ru = 'Период закрыт'");
		ЦветСтатуса = ЦветаСтиля.ЦветОсобогоТекста;
		
	ИначеЕсли КоличествоОсталосьВыполнить = 0 И МожноЗакрыватьМесяц Тогда
		Статус      = НСтр("ru = 'Выполнено'");
		ЦветСтатуса = WebЦвета.Зеленый;
		
	Иначе
		Статус      = НСтр("ru = 'Не выполнено'");
		ЦветСтатуса = WebЦвета.Черный;
		
	КонецЕсли;
	
	Элементы.Статус.ЦветТекста = ЦветСтатуса;
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПериода(Шаг = 0)
	
	Если Шаг <> 0 Тогда
		РеквизитыПериода = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ПериодРегистрации, "ДатаНачала, Периодичность");
		Если РеквизитыПериода.Периодичность = Перечисления.Периодичность.Год Тогда 
			НоваяДатаНачалаПериода = ДобавитьМесяц(РеквизитыПериода.ДатаНачала, Шаг * 12);
		ИначеЕсли РеквизитыПериода.Периодичность = Перечисления.Периодичность.Декада Тогда 
			НоваяДатаНачалаПериода = РеквизитыПериода.ДатаНачала + Шаг * 10 * 86400;
		ИначеЕсли РеквизитыПериода.Периодичность = Перечисления.Периодичность.День Тогда 
			НоваяДатаНачалаПериода = РеквизитыПериода.ДатаНачала + Шаг * 86400;
		ИначеЕсли РеквизитыПериода.Периодичность = Перечисления.Периодичность.Квартал Тогда 
			НоваяДатаНачалаПериода = ДобавитьМесяц(РеквизитыПериода.ДатаНачала, Шаг * 3);
		ИначеЕсли РеквизитыПериода.Периодичность = Перечисления.Периодичность.Месяц Тогда 
			НоваяДатаНачалаПериода = ДобавитьМесяц(РеквизитыПериода.ДатаНачала, Шаг);
		ИначеЕсли РеквизитыПериода.Периодичность = Перечисления.Периодичность.Неделя Тогда 
			НоваяДатаНачалаПериода = РеквизитыПериода.ДатаНачала + Шаг * 7 * 86400;
		ИначеЕсли РеквизитыПериода.Периодичность = Перечисления.Периодичность.Полугодие Тогда 
			НоваяДатаНачалаПериода = ДобавитьМесяц(РеквизитыПериода.ДатаНачала, Шаг * 6);
		ИначеЕсли РеквизитыПериода.Периодичность = Перечисления.Периодичность.ДевятьМесяцев Тогда 
			НоваяДатаНачалаПериода = ДобавитьМесяц(РеквизитыПериода.ДатаНачала, Шаг * 9);
		Иначе
			НоваяДатаНачалаПериода = РеквизитыПериода.ДатаНачала;
		КонецЕсли;
		//Поиск управления отчетным периодом
		Объект.ПериодРегистрации = ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(НоваяДатаНачалаПериода, Перечисления.Периодичность.Месяц, 0, Истина);
	КонецЕсли;
	
	УстановитьМожноЗакрыватьМесяц();
	//
	ЗаполнитьДанныеОбОперациях();
	//
	НастроитьФорму();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьМожноЗакрыватьМесяц()
	
	Если Не ЗначениеЗаполнено(Объект.Организация)
		Или Не ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		УчетнаяПолитикаСуществует = Ложь;
		МожноЗакрыватьМесяц       = Ложь;
		ОрганизацияДоступна		  = Ложь;
		Возврат;
	КонецЕсли;
	
	УчетнаяПолитикаСуществует = ЗначениеЗаполнено(КэшируемыеЗначения.ШаблонТрансляции);
	
	МожноЗакрыватьМесяц = УчетнаяПолитикаСуществует;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УправлениеПериодомСценария.Ссылка КАК УправлениеПериодом,
		|	УправлениеПериодомСценария.ПериодЗакрыт КАК ПериодЗакрыт
		|ИЗ
		|	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
		|ГДЕ
		|	УправлениеПериодомСценария.ПериодСценария = &Период
		|	И УправлениеПериодомСценария.Сценарий = &Сценарий
		|	И УправлениеПериодомСценария.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Период", Объект.ПериодРегистрации);
	Запрос.УстановитьПараметр("Сценарий", Объект.Сценарий);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ВыборкаДетальныеЗаписи);
	Иначе
		ПериодЗакрыт = Ложь;
		УправлениеПериодом = Неопределено;
	КонецЕсли;
	
	Если Не КэшируемыеЗначения.ФормироватьПроводкиМСФО Тогда
		
		АОСВ = Документы.НастраиваемыйОтчет.ПолучитьЭкземплярОтчета(
			Объект.Организация, Объект.ПериодРегистрации, Объект.Сценарий, 
			КэшируемыеЗначения.ВидОтчетаОСВ, , , Ложь, , , Ложь);
					
		Если ЗначениеЗаполнено(АОСВ) Тогда 
			МожноЗакрыватьМесяц = Ложь;
		КонецЕсли;
			
	КонецЕсли;
	
	МожноЗакрыватьМесяц = МожноЗакрыватьМесяц И (ЗначениеЗаполнено(УправлениеПериодом) 
		ИЛИ КэшируемыеЗначения.ФормироватьПроводкиМСФО) И НЕ ПериодЗакрыт;
	
КонецПроцедуры

&НаСервере
Функция КартинкаРегламентнойОперации(СтрокаТаблицы)
	
	Если СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено Тогда
		Если СтрокаТаблицы.РучнаяКорректировка Тогда
			Возврат БиблиотекаКартинок.ОперацияИсправлена;
		ИначеЕсли СтрокаТаблицы.Устарела Тогда
			Возврат БиблиотекаКартинок.ОперациюНеобходимоПовторить;
		Иначе
			Возврат БиблиотекаКартинок.ОперацияВыполненаУспешно;
		КонецЕсли;
	ИначеЕсли СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками Тогда
		Возврат БиблиотекаКартинок.ОперацияВыполненаСОшибками;
	ИначеЕсли СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено Тогда
		Возврат БиблиотекаКартинок.ОперацияПропущена;
	Иначе
		Возврат Новый Картинка;
	КонецЕсли;

КонецФункции

&НаСервере
Функция ПериодПоУмолчанию()
	
	ТекущийМесяц = НачалоМесяца(ТекущаяДатаСеанса());
	ПериодПоУмолчанию = ДобавитьМесяц(ТекущийМесяц, -1);
	
	Возврат ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(ПериодПоУмолчанию, Перечисления.Периодичность.Месяц, 0, Истина);

КонецФункции

&НаКлиенте
Процедура СозданиеНовогоДокумента(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗначенияЗаполнения = Новый Структура("ПериодОтчета, Сценарий, Организация", Объект.ПериодРегистрации, Объект.Сценарий, Объект.Организация);
		ОткрытьФорму(ДополнительныеПараметры.Документ + ".ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения), ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СоздатьОтменитьЗакрытие(ИмяПроцедуры, Заголовок, ВФоне)

	СтруктураПараметров = Новый Структура;
    СтруктураПараметров.Вставить("ТаблицаОпераций", ОбщегоНазначения.ТаблицаЗначенийВМассив(Объект.ТаблицаОпераций.Выгрузить()));
	СтруктураПараметров.Вставить("ПериодРегистрации", Объект.ПериодРегистрации);
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("Сценарий", Объект.Сценарий);
	
    ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
    ПараметрыВыполнения.НаименованиеФоновогоЗадания = Заголовок;
	
	Если ВФоне Тогда
	    ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
	        "Обработки.ЗакрытиеПериодаМСФО." + ИмяПроцедуры,
	        СтруктураПараметров,
	        ПараметрыВыполнения);
	    
	    Возврат ДлительнаяОперация;	
	Иначе
		АдресРезультата = УникальныйИдентификатор;
		Если ИмяПроцедуры = "ЗапуститьЗакрытие" Тогда
	    	Обработки.ЗакрытиеПериодаМСФО.ЗапуститьЗакрытие(СтруктураПараметров, АдресРезультата);
		ИначеЕсли ИмяПроцедуры = "ОтменитьЗакрытие" Тогда
			Обработки.ЗакрытиеПериодаМСФО.ОтменитьЗакрытие(СтруктураПараметров, АдресРезультата);
		Иначе
			Выполнить("Обработки.ЗакрытиеПериодаМСФО." + ИмяПроцедуры + "(СтруктураПараметров, АдресРезультата)");
		КонецЕсли;
		ЗагрузитьТаблицуНаСервере(АдресРезультата);
		НастроитьФорму();
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗакрытьЭтапНаСервере(СтрокаТаблицы)
	ОписаниеОшибки = "";
	Обработки.ЗакрытиеПериодаМСФО.ЗакрытьЭтап(СтрокаТаблицы, Объект.ПериодРегистрации, Объект.Сценарий, Объект.Организация, ОписаниеОшибки);
	Если ОписаниеОшибки <> "" Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
	КонецЕсли;
	НастроитьФорму();
КонецПроцедуры

&НаСервере
Процедура ОтменитьЗакрытьЭтапНаСервере(СтрокаТаблицы)
	Обработки.ЗакрытиеПериодаМСФО.ОтменитьЭтап(СтрокаТаблицы);
	НастроитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияДокумента(Команда)
	
	ТекущаяСтрока = Элементы.ТаблицаОпераций.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекущаяСтрока.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ДокументСсылка", ТекущаяСтрока.Ссылка);
	ОткрытьФорму("Обработка.ДвиженияДокумента.Форма", 
							ПараметрыФормы, 
							ЭтаФорма, 
							ТекущаяСтрока.Ссылка
						);

КонецПроцедуры

#КонецОбласти
