#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Проект=Параметры.Проект;
	Объект.ДоговорКонтрагента=Параметры.ДоговорКонтрагента;
	Сценарий = Параметры.Сценарий;
	
	Если НЕ ЗначениеЗаполнено(Сценарий) Тогда
		Сценарий = Справочники.Сценарии.План;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СценарийСравнения) Тогда
		СценарийСравнения = Справочники.Сценарии.Факт;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		
		ПоОперациям=1;
		Элементы.ДоговорКонтрагента.Видимость=Истина;
		Элементы.ПоОперациям.Видимость=Истина;
		
	Иначе
		
		Элементы.ДоговорКонтрагента.Видимость=Ложь;
		Элементы.ПоОперациям.Видимость=Ложь;
		
	КонецЕсли;
		
	СтруктураОбъекта=Новый Структура;
	СтруктураОбъекта.Вставить("ДоговорКонтрагента",	Объект.ДоговорКонтрагента);
	СтруктураОбъекта.Вставить("Проект",				Объект.Проект);
	СтруктураОбъекта.Вставить("Сценарий",			Сценарий);
	СтруктураОбъекта.Вставить("ДатаНач",			Объект.ДатаНач);
	СтруктураОбъекта.Вставить("ДатаКон",			Объект.ДатаКон);
	СтруктураОбъекта.Вставить("ПоОперациям",		ПоОперациям);
	
	Если ЗначениеЗаполнено(Объект.Проект) Тогда
		
		ЗаполнитьАтрибутыПроекта();
		
		Если Сценарий=Справочники.Сценарии.Резерв Тогда
			
			СформироватьОтчетПоПроектам(ДиаграммаГанта,СтруктураОбъекта, Сценарий);

		Иначе
			
			СформироватьОтчетПоПоказателям(ДиаграммаГанта,СтруктураОбъекта, Сценарий);
						
		КонецЕсли; 
				
	ИначеЕсли ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		
		СформироватьОтчетПоОперациям(ДиаграммаГанта,СтруктураОбъекта, Сценарий);
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия="ИзмененПроект" Тогда
		
		ОбновитьДанныеДиаграммы();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СценарныйАнализПриИзменении(Элемент)
	ЗаполнитьАтрибутыПроекта();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	
	ЗаполнитьАтрибутыПроекта();
	ОбновитьДанныеДиаграммы();
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	Если Элементы.ВидимостьАтрибутовПроекта.Пометка Тогда
		ЗаполнитьАтрибутыПроекта();
	КонецЕсли;
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаГантаОбработкаРасшифровки(Элемент, Расшифровки, СтандартнаяОбработка, Дата)
	
	Если ТипЗнч(Расшифровки)=Тип("Массив") И Расшифровки.Количество()>0 И ТипЗнч(Расшифровки[Расшифровки.Количество()-1])=Тип("Структура") Тогда
		
		СтандартнаяОбработка=Ложь;
		
		ДанныеРасшифровки=Расшифровки[Расшифровки.Количество()-1];
		
		Если ДанныеРасшифровки.Свойство("Проект") Тогда
			
			ОткрытьФорму("Справочник.Проекты.ФормаОбъекта",Новый Структура("Ключ",ДанныеРасшифровки.Проект));
			
		ИначеЕсли ДанныеРасшифровки.Свойство("ОперативныйПлан") Тогда
			
			ОткрытьФорму("Документ.ОперативныйПлан.ФормаОбъекта",Новый Структура("Ключ",ДанныеРасшифровки.ОперативныйПлан));
			
		ИначеЕсли ДанныеРасшифровки.Свойство("ДокументПланирования") Тогда
			
			ОткрытьФорму("Документ.НастраиваемыйОтчет.ФормаОбъекта",Новый Структура("Ключ",ДанныеРасшифровки.ДокументПланирования));
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаГантаПриОкончанииРедактированияИнтервала(Элемент, Интервал, ОтменаРедактирования)
		
	ОбновитьДанныеОбъекта(Интервал.Расшифровка, Сценарий, Интервал.Начало,Интервал.Конец);
	ОбновитьДанныеДиаграммы();
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	Если ЗначениеЗаполнено(Объект.Проект) Тогда
		ОбновитьДанныеДиаграммы();
	КонеЦЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАтрибутыПроекта(Команда)
	ЗаполнитьАтрибутыПроекта();
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьАтрибутовПроекта(Команда)
	Элементы.ВидимостьАтрибутовПроекта.Пометка = НЕ Элементы.ВидимостьАтрибутовПроекта.Пометка;
	
	Если Элементы.ВидимостьАтрибутовПроекта.Пометка Тогда
		ЗаполнитьАтрибутыПроекта();
	КонецЕсли;
	
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура БюджетДДС(Команда)
   	
	СтруктураПараметров=Новый Структура("Проект",Объект.Проект);
	СтруктураПараметров.Вставить("Сценарий",Сценарий);
	СтруктураПараметров.Вставить("ВидБюджета","БДДС");
	ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаМакетаСводнаяТаблица",СтруктураПараметров);

КонецПроцедуры

&НаКлиенте
Процедура БюджетДР(Команда)
    
	СтруктураПараметров=Новый Структура("Проект",Объект.Проект);
	СтруктураПараметров.Вставить("Сценарий",Сценарий);
	СтруктураПараметров.Вставить("ВидБюджета","БюджетРесурсов");
	ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаМакетаСводнаяТаблица",СтруктураПараметров);

КонецПроцедуры

&НаКлиенте
Процедура БюджетДиР(Команда)
	
	СтруктураПараметров=Новый Структура("Проект",Объект.Проект);
	СтруктураПараметров.Вставить("Сценарий",Сценарий);
	СтруктураПараметров.Вставить("ВидБюджета","БДР");
	ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаМакетаСводнаяТаблица",СтруктураПараметров);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ЗаполнитьАтрибутыПроекта()
			
	АтрибутыПроекта.Очистить();
	
	Если ЗначениеЗаполнено(Объект.Проект) Тогда
		ПереченьРеквизитов =
			"ДатаНачала,
			|ДатаОкончания,
			|ДлительностьДней,
			|NPV,
			|IRR,
			|PBP,
			|FCF,
			|PI,
			|ОценкаПроекта,
			|ИтогоСписанияБДДС,
			|ИтогоРасходыБДР,
			|ИтогоСписанияРесурсы,
			|ПроцентЗавершения,
			|ИтогоПоступленияБДДС,
			|ИтогоДоходыБДР,
			|ИтогоПоступленияРесурсы,
			|ИтогоЧистыйДенежныйПоток,
			|ИтогоПрибыльУбыток,
			|ИтогоМатериальныйБаланс";
		
		флСценарныйАнализ = СценарныйАнализ И ЗначениеЗаполнено(СценарийСравнения);
		
		СтрАтрибутыПроекта = Справочники.Проекты.АтрибутыПроекта(Объект.Проект, ?(Сценарий=Справочники.Сценарии.Резерв,Справочники.Сценарии.План,Сценарий), ПереченьРеквизитов);
		
		Если флСценарныйАнализ Тогда
			СтрАтрибутыСравнения = Справочники.Проекты.АтрибутыПроекта(Объект.Проект, СценарийСравнения, ПереченьРеквизитов);
		Иначе
			СтрАтрибутыСравнения = Новый Структура;
		КонецЕсли;
		
		РесурсыРегистра = Метаданные.РегистрыСведений.АтрибутыПроектов.Ресурсы;
		Для Каждого Атрибут Из СтрАтрибутыПроекта Цикл
			РесурсРегистра = РесурсыРегистра.Найти(Атрибут.Ключ);
			Если РесурсРегистра = Неопределено Тогда
				ИмяАтрибута = Атрибут.Ключ;
			Иначе
				ИмяАтрибута = РесурсРегистра.Синоним;
			КонецЕсли;
			НоваяСтрока = АтрибутыПроекта.Добавить();
			НоваяСтрока.Атрибут = ИмяАтрибута;
			НоваяСтрока.Значение = Строка(Атрибут.Значение);
			
			Если флСценарныйАнализ Тогда
				
				Значение1 = Атрибут.Значение;
				Значение2 = СтрАтрибутыСравнения[Атрибут.Ключ];
				
				Если ЗначениеЗаполнено(Значение1) И ЗначениеЗаполнено(Значение2) Тогда
					ТипЗначения = ТипЗнч(Значение1);
					
					НоваяСтрока.ЗначениеСравнения = Строка(Значение2);
					
					Если ТипЗначения = Тип("Число") Тогда
						НоваяСтрока.Отклонение = Строка(Окр(Значение2 - Значение1,1));
						НоваяСтрока.ОтклонениеПроцент = Строка(Окр((Значение2 - Значение1) / ?(Значение2=0, 1, Значение2) * 100));
						
					ИначеЕсли ТипЗначения = Тип("Дата") Тогда
						НоваяСтрока.Отклонение = Строка((НачалоДня(Значение2)-НачалоДня(Значение1))/(86400));
						НоваяСтрока.ОтклонениеПроцент = "";
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕСли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеДиаграммы()
	
	СохранитьСостояниеТочек();
	
	СформироватьОтчетНаСервере(ДиаграммаГанта,ПодготовитьДанныеОбъекта(), Сценарий);
	
	ВосстановитьСостояниеТочек();
		
КонецПроцедуры // ОбновитьДанныеДиаграммы() 

&НаКлиенте
Процедура СохранитьСостояниеТочек()
	
	СоответствиеТочек=Новый Соответствие;
	
	Для Каждого Точка ИЗ ДиаграммаГанта.Точки Цикл
		
		СоответствиеТочек.Вставить(Точка.Расшифровка,ДиаграммаГанта.РазвернутаТочка(Точка));		
		ЗаполнитьТочкиРекурсивно(Точка.Точки,СоответствиеТочек);
		
	КонецЦикла;
	
	ОписаниеТочек=Новый ФиксированноеСоответствие(СоответствиеТочек);
		
КонецПроцедуры // СохранитьСостояниеТочек()

&НаКлиенте
Процедура ЗаполнитьТочкиРекурсивно(КоллекцияТочек,СоответствиеТочек)
	
	Для Каждого Точка ИЗ КоллекцияТочек Цикл
		
		СоответствиеТочек.Вставить(Точка.Расшифровка,ДиаграммаГанта.РазвернутаТочка(Точка));
		ЗаполнитьТочкиРекурсивно(Точка.Точки,СоответствиеТочек);
		
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьТочкиРекурсивно() 

&НаКлиенте
Процедура ВосстановитьСостояниеТочек()
	
	Для Каждого Точка ИЗ ДиаграммаГанта.Точки Цикл
		
		 ТочкаРазвернута=ОписаниеТочек.Получить(Точка.Расшифровка);
		 
		 Если ТочкаРазвернута=Истина Тогда
			 
			 ДиаграммаГанта.РазвернутьТочку(Точка,Ложь);
			 
		 КонецЕсли;
		 
		 РазвернутьТочкиРекурсивно(Точка.Точки);
		
	КонецЦикла;
				
КонецПроцедуры // ВосстановитьСостояниеТочек()

&НаКлиенте
Процедура РазвернутьТочкиРекурсивно(КоллекцияТочек)
	
	Для Каждого Точка ИЗ КоллекцияТочек Цикл
		
		 ТочкаРазвернута=ОписаниеТочек.Получить(Точка.Расшифровка);
		 
		 Если ТочкаРазвернута=Истина Тогда
			 
			 ДиаграммаГанта.РазвернутьТочку(Точка,Ложь);
			 
		 КонецЕсли;
		 
		 РазвернутьТочкиРекурсивно(Точка.Точки);
		
	КонецЦикла;
		
КонецПроцедуры // РазвернутьТочкиРекурсивно()

&НаСервереБезКонтекста
Процедура СформироватьОтчетПоОперациям(ДиаграммаГанта,ДанныеОбъекта, Сценарий)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ОперативныйПлан.Ссылка,
	             |	ОперативныйПлан.ПериодОтчета.ДатаНачала КАК ДатаНачала,
	             |	ОперативныйПлан.ПериодОтчетаОкончание.ДатаОкончания КАК ДатаОкончания,
	             |	ВЫБОР
	             |		КОГДА ОперативныйПлан.ВидБюджета = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов)
	             |			ТОГДА ОперативныйПлан.СуммаДокументаУпр*(ВЫБОР КОГДА ОперативныйПлан.ПриходРасход=ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход) Тогда 1 Иначе -1 Конец)
	             |		ИНАЧЕ 0
	             |	КОНЕЦ КАК СуммаБДР_Упр,
	             |	ОперативныйПлан.ПриходРасход,
	             |	ВЫБОР
	             |		КОГДА ОперативныйПлан.ВидБюджета = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств)
	             |			ТОГДА ОперативныйПлан.СуммаДокументаУпр*(ВЫБОР КОГДА ОперативныйПлан.ПриходРасход=ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход) Тогда 1 Иначе -1 Конец)
	             |		ИНАЧЕ 0
	             |	КОНЕЦ КАК СуммаБДДС_Упр,
	             |	ВЫБОР
	             |		КОГДА ОперативныйПлан.ВидБюджета = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов)
	             |			ТОГДА ОперативныйПлан.СуммаДокументаУпр*(ВЫБОР КОГДА ОперативныйПлан.ПриходРасход=ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход) Тогда 1 Иначе -1 Конец)
	             |		ИНАЧЕ 0
	             |	КОНЕЦ КАК СуммаРесурсы_Упр
	             |ПОМЕСТИТЬ ТаблицаТранзакций
	             |ИЗ
	             |	Документ.ОперативныйПлан КАК ОперативныйПлан
	             |ГДЕ
	             |	ОперативныйПлан.Проведен";
		
	Если ЗначениеЗаполнено(ДанныеОбъекта.ДоговорКонтрагента) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ОперативныйПлан.ДоговорКонтрагента В Иерархии(&ДоговорКонтрагента)";
		Запрос.УстановитьПараметр("ДоговорКонтрагента",ДанныеОбъекта.ДоговорКонтрагента);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.Проект) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ОперативныйПлан.Проект В Иерархии(&Проект)";
		Запрос.УстановитьПараметр("Проект",ДанныеОбъекта.Проект);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ДатаНач) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ОперативныйПлан.ПериодОтчета.ДатаНачал>=&ДатаНач";
		Запрос.УстановитьПараметр("ДатаНач",ДанныеОбъекта.ДатаНач);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ДатаКон) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ОперативныйПлан.ПериодОтчетаОкончание.ДатаОкончания<=&ДатаКон";
		Запрос.УстановитьПараметр("ДатаКон",КонецДня(ДанныеОбъекта.ДатаКон));
		
	КонецЕсли;

	Запрос.Текст=Запрос.Текст+"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаТранзакций.ДатаНачала) КАК ДатаНачала,
	|	МАКСИМУМ(ТаблицаТранзакций.ДатаОкончания) КАК ДатаОкончания,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаТранзакций.СуммаБДР_Упр) КАК СуммаБДР_Упр,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаТранзакций.СуммаБДДС_Упр) КАК СуммаБДДС_Упр,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаТранзакций.СуммаРесурсы_Упр) КАК СуммаРесурсы_Упр
	|ИЗ
	|	ТаблицаТранзакций КАК ТаблицаТранзакций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТранзакций.Ссылка,
	|	ТаблицаТранзакций.ДатаНачала КАК ДатаНачала,
	|	ТаблицаТранзакций.ДатаОкончания КАК ДатаОкончания,
	|	ТаблицаТранзакций.СуммаБДДС_Упр КАК СуммаБДДС,
	|	ТаблицаТранзакций.СуммаБДР_Упр КАК СуммаБДР,
	|	ТаблицаТранзакций.СуммаРесурсы_Упр КАК СуммаРесурсы
	|ИЗ
	|	ТаблицаТранзакций КАК ТаблицаТранзакций";
		
	Результат=Запрос.ВыполнитьПакет();
	ТаблицаИнтервала=Результат[1].Выгрузить();	
	ДанныеТранзакций=Результат[2].Выбрать();
	
	ДиаграммаГанта.Очистить();
	
	Если ТаблицаИнтервала.Количество()=0
		ИЛИ НЕ (ЗначениеЗаполнено(ТаблицаИнтервала[0].ДатаНачала) И ЗначениеЗаполнено(ТаблицаИнтервала[0].ДатаОкончания)) Тогда
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке("Ошибка при определении интервала диаграммы.",,,СтатусСообщения.Внимание);
		
		Возврат;
		
	КонецЕсли;
	
	ДиаграммаГанта.Обновление = Ложь;
	ДиаграммаГанта.АвтоОпределениеПолногоИнтервала = Ложь;

	ДиаграммаГанта.УстановитьПолныйИнтервал(НачалоМесяца(ТаблицаИнтервала[0].ДатаНачала),КонецМесяца(ТаблицаИнтервала[0].ДатаОкончания));
	
	РазмахИнтервала=(КонецМесяца(ТаблицаИнтервала[0].ДатаОкончания)-НачалоМесяца(ТаблицаИнтервала[0].ДатаНачала))/86400;
	ОпределитьШкалу(ДиаграммаГанта,РазмахИнтервала);
	
	Если НЕ ТаблицаИнтервала[0].СуммаБДР_Упр=0 Тогда
		
		СерияБДР		= ДиаграммаГанта.УстановитьСерию("БДР");
		
	КонецЕсли;
	
	Если НЕ ТаблицаИнтервала[0].СуммаБДДС_Упр=0 Тогда
		
		СерияБДДС		= ДиаграммаГанта.УстановитьСерию("БДДС");
		
	КонецЕсли;
	
	Если НЕ ТаблицаИнтервала[0].СуммаРесурсы_Упр=0 Тогда
		
		СерияРесурсы	= ДиаграммаГанта.УстановитьСерию("Ресурсы");
		
	КонецЕсли;
	
	Пока ДанныеТранзакций.Следующий() Цикл
		
		ТочкаОперация=ДиаграммаГанта.УстановитьТочку(ДанныеТранзакций.Ссылка);
		
		Если НЕ ДанныеТранзакций.СуммаБДР=0 Тогда
			
			Значение=ДиаграммаГанта.ПолучитьЗначение(ТочкаОперация,СерияБДР);
			Интервал=Значение.Добавить();
			Интервал.Расшифровка= ДанныеТранзакций.Ссылка;
			Интервал.Текст		= Формат(ДанныеТранзакций.СуммаБДР, "ЧГ=3,0");
			Интервал.Начало		= ДанныеТранзакций.ДатаНачала;
			Интервал.Конец		= ДанныеТранзакций.ДатаОкончания;
			
		КонецЕсли;
		
		Если НЕ ДанныеТранзакций.СуммаБДДС=0 Тогда
			
			Значение=ДиаграммаГанта.ПолучитьЗначение(ТочкаОперация,СерияБДДС);
			Интервал=Значение.Добавить();
			Интервал.Расшифровка= ДанныеТранзакций.Ссылка;
			Интервал.Текст		= Формат(ДанныеТранзакций.СуммаБДДС, "ЧГ=3,0");
			Интервал.Начало		= ДанныеТранзакций.ДатаНачала;
			Интервал.Конец		= ДанныеТранзакций.ДатаОкончания;
			
		КонецЕсли;
		
		Если НЕ ДанныеТранзакций.СуммаРесурсы=0 Тогда
			
			Значение=ДиаграммаГанта.ПолучитьЗначение(ТочкаОперация,СерияРесурсы);
			Интервал=Значение.Добавить();
			Интервал.Расшифровка= ДанныеТранзакций.Ссылка;
			Интервал.Текст		= Формат(ДанныеТранзакций.СуммаРесурсы, "ЧГ=3,0");
			Интервал.Начало		= ДанныеТранзакций.ДатаНачала;
			Интервал.Конец		= ДанныеТранзакций.ДатаОкончания;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДиаграммаГанта.Обновление = Истина;
		
КонецПроцедуры // СформироватьОтчетПоОперациям()

&НаСервереБезКонтекста
Функция ОпределитьШкалу(ДиаграммаГанта,РазмахИнтервала)
	
	ЭлементыШкалыВремени = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы;
	
	ПервыйЭлемент = ЭлементыШкалыВремени[0];
	Для Индекс = 1 по ЭлементыШкалыВремени.Количество()-1 Цикл
		ЭлементыШкалыВремени.Удалить(ЭлементыШкалыВремени[1]);
	КонецЦикла; 
	
	Если РазмахИнтервала > 2000 Тогда
		
		ПервыйЭлемент.Единица = ТипЕдиницыШкалыВремени.Год;
		ПервыйЭлемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
		ПервыйЭлемент.ФорматДня =  ФорматДняШкалыВремени.ДеньМесяца;
				
	ИначеЕсли РазмахИнтервала <= 2000 И РазмахИнтервала >750 Тогда
		
		ПервыйЭлемент.Единица = ТипЕдиницыШкалыВремени.Год;
		ПервыйЭлемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
		ПервыйЭлемент.ФорматДня =  ФорматДняШкалыВремени.ДеньМесяца;
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.Квартал;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Точечная, 1);
		
	ИначеЕсли РазмахИнтервала <= 750 И РазмахИнтервала >90 Тогда
		
		ПервыйЭлемент.Единица = ТипЕдиницыШкалыВремени.Квартал;
		ПервыйЭлемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
		ПервыйЭлемент.ФорматДня =  ФорматДняШкалыВремени.ДеньМесяца;
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.Месяц;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Точечная, 1);
		
	ИначеЕсли РазмахИнтервала <=90 И РазмахИнтервала >30 Тогда
		
		ПервыйЭлемент.Единица = ТипЕдиницыШкалыВремени.Месяц;
		ПервыйЭлемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
		ПервыйЭлемент.ФорматДня =  ФорматДняШкалыВремени.ДеньНедели;
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.Неделя;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Точечная, 1);
	
	ИначеЕсли РазмахИнтервала <=30 Тогда
		
		ПервыйЭлемент.Единица = ТипЕдиницыШкалыВремени.Месяц;
		ПервыйЭлемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
		ПервыйЭлемент.ФорматДня =  ФорматДняШкалыВремени.ДеньМесяца;
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.День;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Точечная, 1);
				
	КонецЕсли;	
		
КонецФункции // ОпределитьТипЕдиницы()

&НаСервереБезКонтекста
Процедура СформироватьОтчетПоПроектам(ДиаграммаГанта,ДанныеОбъекта, Сценарий)
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;	
	Запрос.Текст=
		"ВЫБРАТЬ
		|	ОперативныйПлан.Проект,
		|	ОперативныйПлан.ПриходРасход,
		|	ОперативныйПлан.Ссылка КАК ОперативныйПлан,
		|	ОперативныйПлан.ПериодОтчета.ДатаНачала КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(ОперативныйПлан.ПериодОтчетаОкончание.ДатаОкончания,ДЕНЬ) КАК ДатаОкончания,
		|	СУММА(ВЫБОР
		|			КОГДА ОперативныйПлан.ВидБюджета = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов)
		|				ТОГДА ОперативныйПлан.СуммаДокументаУпр*(ВЫБОР КОГДА ОперативныйПлан.ПриходРасход=ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход) Тогда 1 Иначе -1 Конец)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБДР,
		|	СУММА(ВЫБОР
		|			КОГДА ОперативныйПлан.ВидБюджета = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств)
		|				ТОГДА ОперативныйПлан.СуммаДокументаУпр*(ВЫБОР КОГДА ОперативныйПлан.ПриходРасход=ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход) Тогда 1 Иначе -1 Конец)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБДДС,
		|	СУММА(ВЫБОР
		|			КОГДА ОперативныйПлан.ВидБюджета = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов)
		|				ТОГДА ОперативныйПлан.СуммаДокументаУпр*(ВЫБОР КОГДА ОперативныйПлан.ПриходРасход=ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход) Тогда 1 Иначе -1 Конец)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаРесурсы
		|ПОМЕСТИТЬ ТаблицаТранзакций
		|ИЗ
		|	Документ.ОперативныйПлан КАК ОперативныйПлан
		|ГДЕ
		|	ОперативныйПлан.Проведен";
		
	Если ЗначениеЗаполнено(ДанныеОбъекта.Проект) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ОперативныйПлан.Проект В Иерархии(&Проект)";
		Запрос.УстановитьПараметр("Проект",ДанныеОбъекта.Проект);
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
		|СГРУППИРОВАТЬ ПО
		|	ОперативныйПлан.Проект,
		|	ОперативныйПлан.ПриходРасход,
		|	ОперативныйПлан.Ссылка,
		|	ОперативныйПлан.ПериодОтчета.ДатаНачала,
		|	КОНЕЦПЕРИОДА(ОперативныйПлан.ПериодОтчетаОкончание.ДатаОкончания,ДЕНЬ)
		|;	
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ТаблицаТранзакций.СуммаБДР) КАК СуммаБДР,
		|	СУММА(ТаблицаТранзакций.СуммаБДДС) КАК СуммаБДДС,
		|	СУММА(ТаблицаТранзакций.СуммаРесурсы) КАК СуммаРесурсы
		|ИЗ
		|	ТаблицаТранзакций КАК ТаблицаТранзакций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(АтрибутыПроектов.ДатаНачала) КАК ДатаНачала,
		|	МАКСИМУМ(КОНЕЦПЕРИОДА(АтрибутыПроектов.ДатаОкончания,ДЕНЬ)) КАК ДатаОкончания
		|ИЗ
		|	РегистрСведений.АтрибутыПроектов КАК АтрибутыПроектов
		|ГДЕ
		|	НЕ(АтрибутыПроектов.ДатаНачала = &ПустаяДата
		|				ИЛИ АтрибутыПроектов.ДатаОкончания = &ПустаяДата)
		|";
	
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.Проект) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И АтрибутыПроектов.Проект В Иерархии(&Проект)";
				
	КонецЕсли;

	Если ЗначениеЗаполнено(Сценарий) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И АтрибутыПроектов.Сценарий = &Сценарий";
		
		Запрос.УстановитьПараметр("Сценарий", Сценарий);
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АтрибутыПроектов.ДатаНачала КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(АтрибутыПроектов.ДатаОкончания,ДЕНЬ) КАК ДатаОкончания,
	|	АтрибутыПроектов.Проект КАК Ссылка,
	|	АтрибутыПроектов.Проект.Ответственный КАК Ответственный,
	|	АтрибутыПроектов.Проект.Наименование КАК Наименование,
	|	АтрибутыПроектов.Проект.Родитель КАК Родитель,
	|	АтрибутыПроектов.Проект.ПроектыПредшественники.(
	|		Ссылка КАК Поле1,
	|		НомерСтроки КАК Поле2,
	|		Проект КАК Поле3
	|	),
	|	ВЫБОР
	|		КОГДА СтадииПроектов.Стадия ЕСТЬ NULL 
	|			ТОГДА """"
	|		ИНАЧЕ СтадииПроектов.Стадия.Наименование
	|	КОНЕЦ КАК Стадия
	|ИЗ
	|	РегистрСведений.АтрибутыПроектов КАК АтрибутыПроектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтадииПроектов КАК СтадииПроектов
	|		ПО АтрибутыПроектов.Проект = СтадииПроектов.Этап
	|ГДЕ
	|	НЕ(АтрибутыПроектов.ДатаНачала = &ПустаяДата
	|				ИЛИ АтрибутыПроектов.ДатаОкончания = &ПустаяДата)";
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.Проект) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И АтрибутыПроектов.Проект В Иерархии(&Проект)";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сценарий) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И АтрибутыПроектов.Сценарий = &Сценарий";
		
		Запрос.УстановитьПараметр("Сценарий", ?(Сценарий=Справочники.Сценарии.Резерв,Справочники.Сценарии.План,Сценарий));
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"	
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала, Ссылка ИЕРАРХИЯ ";
	
	Запрос.УстановитьПараметр("ПустаяДата",'00010101');
	
	
	Результат=Запрос.ВыполнитьПакет();
	
	ТаблицаДвижений		= Результат[1].Выгрузить();
	ТаблицаИнтервала	= Результат[2].Выгрузить();
	ДанныеПроектов		= Результат[3].Выгрузить();
		
	ДанныеПроектов.Колонки.Добавить("Интервал");
	
	ДиаграммаГанта.Очистить();
	
	Если ТаблицаИнтервала.Количество()=0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДиаграммаГанта.Обновление = Ложь;
	ДиаграммаГанта.АвтоОпределениеПолногоИнтервала = Ложь;

	ДиаграммаГанта.УстановитьПолныйИнтервал(НачалоМесяца(ТаблицаИнтервала[0].ДатаНачала), КонецМесяца(ТаблицаИнтервала[0].ДатаОкончания));
	
	РазмахИнтервала=(КонецМесяца(ТаблицаИнтервала[0].ДатаОкончания) - НачалоМесяца(ТаблицаИнтервала[0].ДатаНачала))/86400;
	ОпределитьШкалу(ДиаграммаГанта,РазмахИнтервала);
	
	СерияПроект	= ДиаграммаГанта.УстановитьСерию("Проект");

	Если ТаблицаДвижений.Количество()>0 Тогда
		
		Если НЕ ТаблицаДвижений[0].СуммаБДР=0 Тогда
			
			СерияБДР		= ДиаграммаГанта.УстановитьСерию("БДР");
			
		КонецЕсли;
		
		Если НЕ ТаблицаДвижений[0].СуммаБДДС=0 Тогда
			
			СерияБДДС		= ДиаграммаГанта.УстановитьСерию("БДДС");
			
		КонецЕсли;
		
		Если НЕ ТаблицаДвижений[0].СуммаРесурсы=0 Тогда
			
			СерияРесурсы	= ДиаграммаГанта.УстановитьСерию("Ресурсы");
			
		КонецЕсли;
		
	КонецЕсли;
		
	МассивЦветов=Новый Массив;
	МассивЦветов.Добавить(WebЦвета.ДымчатоБелый);
	МассивЦветов.Добавить(WebЦвета.СеребристоСерый);
	
	НомерЦвета=0;
	
	Для Каждого СтрПроект ИЗ ДанныеПроектов Цикл
		
		Запрос.Текст="ВЫБРАТЬ
		|	ДатаНачала,
		|	ДатаОкончания,
		|	СУММА(ТаблицаТранзакций.СуммаБДДС) КАК СуммаБДДС,
		|	СУММА(ТаблицаТранзакций.СуммаБДР) КАК СуммаБДР,
		|	СУММА(ТаблицаТранзакций.СуммаРесурсы) КАК СуммаРесурсы
		|ИЗ
		|	ТаблицаТранзакций КАК ТаблицаТранзакций
		|ГДЕ ТаблицаТранзакций.Проект В ИЕРАРХИИ(&Проект)
		|СГРУППИРОВАТЬ ПО ДатаНачала,ДатаОкончания
		|;
		|ВЫБРАТЬ
		|ТаблицаТранзакций.ОперативныйПлан,
		|ТаблицаТранзакций.ДатаНачала,
		|ТаблицаТранзакций.ДатаОкончания,
		|ТаблицаТранзакций.Организация,
		|ТаблицаТранзакций.Контрагент,
		|ТаблицаТранзакций.СуммаБДДС,
		|ТаблицаТранзакций.СуммаБДР,
		|ТаблицаТранзакций.СуммаРесурсы
		|ИЗ
		|	ТаблицаТранзакций КАК ТаблицаТранзакций
		|ГДЕ ТаблицаТранзакций.Проект=&Проект";
			
		Запрос.УстановитьПараметр("Проект",СтрПроект.Ссылка);
		Результат=Запрос.ВыполнитьПакет();
		
		ДанныеТранзакций=Результат[0].Выгрузить();
		
		ИтогБДР=	ДанныеТранзакций.Итог("СуммаБДР");
		ИтогБДДС=	ДанныеТранзакций.Итог("СуммаБДДС");
		ИтогРесурсы	=ДанныеТранзакций.Итог("СуммаРесурсы");
		
		ТекстИтог="";
		
		Если НЕ ИтогБДР=0 Тогда
			
			ТекстИтог=ТекстИтог+", БДР = "+Формат(ИтогБДР,"ЧДЦ=2; ЧГ=3,0");
			
		КонецЕсли;
		
		Если НЕ ИтогБДДС=0 Тогда
			
			ТекстИтог=ТекстИтог+", БДДС = "+Формат(ИтогБДДС,"ЧДЦ=2; ЧГ=3,0");
			
		КонецЕсли;
		
		Если НЕ ИтогРесурсы=0 Тогда
			
			ТекстИтог=ТекстИтог+", Ресурсы = "+Формат(ИтогРесурсы,"ЧДЦ=2; ЧГ=3,0");
			
		КонецЕсли;
	
		ТочкаПроект=ДиаграммаГанта.УстановитьТочку(СтрПроект.Ссылка,СтрПроект.Родитель);
		ТочкаПроект.Текст=?(ПустаяСтрока(СтрПроект.Стадия),"", "Стадия: " + СтрПроект.Стадия + Символы.ПС) + СтрПроект.Наименование+?(ПустаяСтрока(ТекстИтог),"",Символы.ПС+Сред(ТекстИтог,3));
		ТочкаПроект.ЦветФона=МассивЦветов[НомерЦвета];
		ТочкаПроект.Расшифровка=СтрПроект.Ссылка;
		НомерЦвета=?(НомерЦвета=0,1,0);
		ТочкаПроект.Шрифт=Новый Шрифт(ТочкаПроект.Шрифт,,,Истина);

		Значение=ДиаграммаГанта.ПолучитьЗначение(ТочкаПроект,СерияПроект);
		Значение.Редактирование=Истина;
		Значение.Текст=ТочкаПроект.Текст;
		Интервал=Значение.Добавить();
		Интервал.Расшифровка= Новый Структура("Проект,ДатаНачала,ДатаОкончания",СтрПроект.Ссылка,СтрПроект.ДатаНачала,СтрПроект.ДатаОкончания);
		Интервал.Начало		= СтрПроект.ДатаНачала;
		Интервал.Конец		= СтрПроект.ДатаОкончания;
		
		СтрПроект.Интервал=Интервал;
		
		Для Каждого СтрокаТранзакций ИЗ ДанныеТранзакций Цикл
			
			Если ЗначениеЗаполнено(СтрокаТранзакций.СуммаБДР)Тогда
				
				Значение=ДиаграммаГанта.ПолучитьЗначение(ТочкаПроект,СерияБДР);
				Интервал=Значение.Добавить();
				Значение.Редактирование=Истина;
				Интервал.Расшифровка= Новый Структура("Проект,ДатаНачала,ДатаОкончания,БДР",СтрПроект.Ссылка,СтрокаТранзакций.ДатаНачала,СтрокаТранзакций.ДатаОкончания,Истина);
				Интервал.Текст		= Формат(СтрокаТранзакций.СуммаБДР, "ЧГ=3,0");
				Интервал.Начало		= СтрокаТранзакций.ДатаНачала;
				Интервал.Конец		= СтрокаТранзакций.ДатаОкончания;
							
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТранзакций.СуммаБДДС) Тогда
				
				Значение=ДиаграммаГанта.ПолучитьЗначение(ТочкаПроект,СерияБДДС);
				Интервал=Значение.Добавить();
				Интервал.Расшифровка= Новый Структура("Проект,ДатаНачала,ДатаОкончания,БДДС",СтрПроект.Ссылка,СтрокаТранзакций.ДатаНачала,СтрокаТранзакций.ДатаОкончания,Истина);
				Значение.Редактирование=Истина;
				Интервал.Текст		= Формат(СтрокаТранзакций.СуммаБДДС, "ЧГ=3,0");
				Интервал.Начало		= СтрокаТранзакций.ДатаНачала;
				Интервал.Конец		= СтрокаТранзакций.ДатаОкончания;
								
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТранзакций.СуммаРесурсы) Тогда
				
				Значение=ДиаграммаГанта.ПолучитьЗначение(ТочкаПроект,СерияРесурсы);
				Интервал=Значение.Добавить();
				Значение.Редактирование=Истина;
				Интервал.Расшифровка= Новый Структура("Проект,ДатаНачала,ДатаОкончания,Ресурсы",СтрПроект.Ссылка,СтрокаТранзакций.ДатаНачала,СтрокаТранзакций.ДатаОкончания,Истина);
				Интервал.Текст		= Формат(СтрокаТранзакций.СуммаРесурсы, "ЧГ=3,0");
				Интервал.Начало		= СтрокаТранзакций.ДатаНачала;
				Интервал.Конец		= СтрокаТранзакций.ДатаОкончания;
							
			КонецЕсли;
			
		КонецЦикла;
		
		// ВЫВОДИМ ОПЕРАЦИИ ПРОЕКТА
		
		ДанныеТранзакций=Результат[1].Выбрать();
		
		Пока ДанныеТранзакций.Следующий() Цикл
			
			ТекстИтог="";
			
			Если НЕ ДанныеТранзакций.СуммаБДР=0 Тогда
				
				ТекстИтог=ТекстИтог+", БДР = "+Формат(ДанныеТранзакций.СуммаБДР,"ЧДЦ=2; ЧГ=3,0");
				
			КонецЕсли;
			
			Если НЕ ДанныеТранзакций.СуммаБДДС=0 Тогда
				
				ТекстИтог=ТекстИтог+", БДДС = "+Формат(ДанныеТранзакций.СуммаБДДС,"ЧДЦ=2; ЧГ=3,0");
				
			КонецЕсли;
			
			Если НЕ ДанныеТранзакций.СуммаРесурсы=0 Тогда
				
				ТекстИтог=ТекстИтог+", Ресурсы = "+Формат(ДанныеТранзакций.СуммаРесурсы,"ЧДЦ=2; ЧГ=3,0");
				
			КонецЕсли;
			
			ТочкаОперация=ДиаграммаГанта.УстановитьТочку(ДанныеТранзакций.ОперативныйПлан,СтрПроект.Ссылка);
			ТочкаОперация.Расшифровка=ДанныеТранзакций.ОперативныйПлан;
			
			ТочкаОперация.Текст=Сред(ТекстИтог,3);
			
			Если НЕ ДанныеТранзакций.СуммаБДР=0 Тогда
				
				Значение=ДиаграммаГанта.ПолучитьЗначение(ТочкаОперация,СерияБДР);
				Значение.Редактирование=Истина;
				Интервал=Значение.Добавить();
				Интервал.Расшифровка= Новый Структура("ОперативныйПлан,ДатаНачала,ДатаОкончания",ДанныеТранзакций.ОперативныйПлан,ДанныеТранзакций.ДатаНачала,ДанныеТранзакций.ДатаОкончания);
				Интервал.Текст		= Формат(ДанныеТранзакций.СуммаБДР, "ЧДЦ=2; ЧГ=3,0");
				Интервал.Начало		= ДанныеТранзакций.ДатаНачала;
				Интервал.Конец		= ДанныеТранзакций.ДатаОкончания;
				
			КонецЕсли;
			
			Если НЕ ДанныеТранзакций.СуммаБДДС=0 Тогда
				
				Значение=ДиаграммаГанта.ПолучитьЗначение(ТочкаОперация,СерияБДДС);
				Интервал=Значение.Добавить();
				Значение.Редактирование=Истина;
				Интервал.Расшифровка= Новый Структура("ОперативныйПлан,ДатаНачала,ДатаОкончания",ДанныеТранзакций.ОперативныйПлан,ДанныеТранзакций.ДатаНачала,ДанныеТранзакций.ДатаОкончания);
				Интервал.Текст		= Формат(ДанныеТранзакций.СуммаБДДС, "ЧДЦ=2; ЧГ=3,0");
				Интервал.Начало		= ДанныеТранзакций.ДатаНачала;
				Интервал.Конец		= ДанныеТранзакций.ДатаОкончания;
				
			КонецЕсли;
			
			Если НЕ ДанныеТранзакций.СуммаРесурсы=0 Тогда
				
				Значение=ДиаграммаГанта.ПолучитьЗначение(ТочкаОперация,СерияРесурсы);
				
				Интервал=Значение.Добавить();
				Значение.Редактирование=Истина;
				Интервал.Расшифровка= Новый Структура("ОперативныйПлан,ДатаНачала,ДатаОкончания",ДанныеТранзакций.ОперативныйПлан,ДанныеТранзакций.ДатаНачала,ДанныеТранзакций.ДатаОкончания);
				Интервал.Текст		= Формат(ДанныеТранзакций.СуммаРесурсы, "ЧДЦ=2; ЧГ=3,0");
				Интервал.Начало		= ДанныеТранзакций.ДатаНачала;
				Интервал.Конец		= ДанныеТранзакций.ДатаОкончания;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Отобразим связи между проектами
	
	Для Каждого СтрПроект ИЗ ДанныеПроектов Цикл
		
		Если СтрПроект.Ссылка.ПроектыПредшественники.Количество()=0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Для Каждого СтрПредшественник ИЗ СтрПроект.Ссылка.ПроектыПредшественники Цикл
			
			ДанныеПредшественника=ДанныеПроектов.Найти(СтрПредшественник.Проект,"Ссылка");
			
			Если НЕ ДанныеПредшественника=Неопределено Тогда
				
				Связь=ДанныеПредшественника.Интервал.Добавить(СтрПроект.Интервал);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДиаграммаГанта.Обновление = Истина;
	
КонецПроцедуры // СформироватьОтчетПоПроектам()

&НаСервере
Процедура СформироватьОтчетПоПоказателям(ДиаграммаГанта, ДанныеОбъекта, Сценарий)
	
	ОбъектФормы = РеквизитФормыВЗначение("Объект");
	ОбъектФормы.СформироватьОтчетПоПоказателям(ДиаграммаГанта, ДанныеОбъекта, Сценарий);
	
КонецПроцедуры // СформироватьОтчетПоПоказателям()

&НаСервере
Процедура СформироватьОтчетНаСервере(ДиаграммаГанта, ДанныеОбъекта, Сценарий)
	
	Если ДанныеОбъекта.ПоОперациям=1 Тогда
		
		СформироватьОтчетПоОперациям(ДиаграммаГанта, ДанныеОбъекта, Сценарий);
		
	ИначеЕсли Сценарий=Справочники.Сценарии.Резерв Тогда 
		
		СформироватьОтчетПоПроектам(ДиаграммаГанта, ДанныеОбъекта, Сценарий);
		
	Иначе
		
		СформироватьОтчетПоПоказателям(ДиаграммаГанта, ДанныеОбъекта, Сценарий);
				
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьДанныеОбъекта()
	
	СтруктураОбъекта=Новый Структура;
	СтруктураОбъекта.Вставить("ДоговорКонтрагента",	Объект.ДоговорКонтрагента);
	СтруктураОбъекта.Вставить("Проект",				Объект.Проект);
	СтруктураОбъекта.Вставить("ДатаНач",			Объект.ДатаНач);
	СтруктураОбъекта.Вставить("ДатаКон",			Объект.ДатаКон);
	СтруктураОбъекта.Вставить("ПоОперациям",		ПоОперациям);
	
	Возврат СтруктураОбъекта;
	
КонецФункции // ПодготовитьДанныеОбъекта() 

&НаСервереБезКонтекста
Процедура ОбновитьДанныеОбъекта(ДанныеОбъекта,Сценарий,НоваяДатаНачала,НоваяДатаОкончания)
	
	СмещениеНачало = НоваяДатаНачала-ДанныеОбъекта.ДатаНачала;
	СмещениеКонец = НоваяДатаОкончания-ДанныеОбъекта.ДатаОкончания;
	
	Если СмещениеНачало = 0 И СмещениеКонец = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеОбъекта.Свойство("Проект") Тогда
		ПеренестиПроект(ДанныеОбъекта.Проект, Сценарий, СмещениеНачало, СмещениеКонец, Новый Массив);
		
	ИначеЕсли ДанныеОбъекта.Свойство("ОперативныйПлан") Тогда
		
		// Только перемещаем. Длительность не изменяется
		Смещение_ = ?(СмещениеНачало = 0, СмещениеКонец, СмещениеНачало);
		ПеренестиТранзакцию(ДанныеОбъекта.ОперативныйПлан,Сценарий,Смещение_, Смещение_, Новый Массив);
		
	ИначеЕсли ДанныеОбъекта.Свойство("ДокументПланирования") Тогда
		
		ПеренестиДокументПланирования(ДанныеОбъекта.ДокументПланирования,НоваяДатаНачала);
		
	КонецЕсли;
		
КонецПроцедуры // ОбновитьДанныеОбъекта()

&НаСервереБезКонтекста
Процедура ПеренестиДокументПланирования(ДокументПланирования,ДатаНачала)
	
	НовыйПериод=ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(ДатаНачала,ДокументПланирования.ПериодОтчета.Периодичность,0);
	
	ДокументОбъект=ДокументПланирования.ПолучитьОбъект();
	ДокументОбъект.ИнициализироватьКонтекст();
	ДокументОбъект.ИнициализироватьКонтекстРаскрытия();
	ДокументОбъект.ПериодОтчета=НовыйПериод;
	ДокументОбъект.ИзмененКлючевойРеквизит=Истина;
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренестиПроект(Проект, Сценарий, СмещениеНачало, СмещениеКонец, МассивОбработанныхПроектов)
	
	Если НЕ МассивОбработанныхПроектов.Найти(Проект)=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сценарий = ?(ЗначениеЗаполнено(Сценарий), Сценарий, Справочники.Сценарии.План);
	
	МенеджерЗаписи = РегистрыСведений.АтрибутыПроектов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Сценарий = Сценарий;
	МенеджерЗаписи.Проект = Проект;
	МенеджерЗаписи.Прочитать();
	
	Если НЕ МенеджерЗаписи.Выбран() Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке("Не удалось переместить проект " + Проект + "." + Символы.ПС + "Отсутствует информация о датах.");	
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи.ДатаНачала = МенеджерЗаписи.ДатаНачала + СмещениеНачало;
	МенеджерЗаписи.ДатаОкончания = МенеджерЗаписи.ДатаОкончания + СмещениеКонец;
	МенеджерЗаписи.ДлительностьДней = (МенеджерЗаписи.ДатаОкончания - МенеджерЗаписи.ДатаНачала) / 86400 + 1;
	
	// длительность задачи не может быть меньше одного дня
	Если МенеджерЗаписи.ДлительностьДней < 1 Тогда
		МенеджерЗаписи.ДатаОкончания = МенеджерЗаписи.ДатаНачала + 86400;
		МенеджерЗаписи.ДлительностьДней = 1;
	КонецЕсли;
	
	Попытка
		МенеджерЗаписи.Записать(Истина);
		МассивОбработанныхПроектов.Добавить(Проект);
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке("Не удалось переместить проект "+Проект + "." + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
		Возврат;	
	КонецПопытки;
	
	Если СмещениеКонец <> 0 Тогда
		ПеренестиПроектыПоследователи(Проект, Сценарий, СмещениеКонец, СмещениеКонец, МассивОбработанныхПроектов);
	КонецЕсли;
	
	Если СмещениеНачало <> 0 Тогда
		ПеренестиПроектыПредшественники(Проект, Сценарий, СмещениеНачало, СмещениеНачало, МассивОбработанныхПроектов);
	КонецЕсли;
	
	// подчиненные проекты и транзакции переносим без изменения их длительности.
	ПеренестиПодчиненныеПроекты(Проект, Сценарий, СмещениеНачало, СмещениеКонец, МенеджерЗаписи.ДлительностьДней, МассивОбработанныхПроектов);	
	ПеренестиПодчиненныеТранзакции(Проект, Сценарий, СмещениеНачало, СмещениеКонец, МассивОбработанныхПроектов);
	
	Если ЗначениеЗаполнено(Проект.Родитель) И МассивОбработанныхПроектов.Найти(Проект.Родитель)=Неопределено  Тогда
		ИзменитьГраницыРодителя(Сценарий, Проект.Родитель, МенеджерЗаписи.ДатаНачала, МенеджерЗаписи.ДатаОкончания, МассивОбработанныхПроектов);
	КонецЕсли;
			
КонецПроцедуры // ПеренестиПроект()

&НаСервереБезКонтекста
Процедура ПеренестиПодчиненныеПроекты(ПроектСсылка, Сценарий, СмещениеНачало, СмещениеКонец, ДлительностьДней, МассивОбработанныхПроектов)
	
	Запрос=Новый Запрос;
	Запрос.Текст=
		"ВЫБРАТЬ
         |	Проекты.Ссылка КАК Ссылка,
         |	ЕСТЬNULL(АтрибутыПроектов.ДлительностьДней, 0) КАК ДлительностьДней
         |ИЗ
         |	Справочник.Проекты КАК Проекты
         |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АтрибутыПроектов КАК АтрибутыПроектов
         |		ПО АтрибутыПроектов.Проект = Проекты.Ссылка
         |ГДЕ
         |	Проекты.Родитель = &Родитель
         |	И НЕ Проекты.Ссылка В (&МассивОбработанныхПроектов)";
		 
	Запрос.УстановитьПараметр("Родитель",					ПроектСсылка);
	Запрос.УстановитьПараметр("МассивОбработанныхПроектов",	МассивОбработанныхПроектов);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		// Если изменяем длительность, то пропорционально длительности проекта и проекта-родителя.
		КоэффициентПропорциональности = ?(СмещениеНачало=СмещениеКонец, 1, Результат.ДлительностьДней / ДлительностьДней);
	
		ПеренестиПроект(Результат.Ссылка, Сценарий, СмещениеНачало * КоэффициентПропорциональности, СмещениеКонец * КоэффициентПропорциональности, МассивОбработанныхПроектов);
		
	КонецЦикла;
			
КонецПроцедуры // ПеренестиПодчиненныеПроекты()

&НаСервереБезКонтекста
Процедура ПеренестиПроектыПоследователи(ПроектСсылка,Сценарий, СмещениеНачало, СмещениеКонец, МассивОбработанныхПроектов)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроектыПроектыПредшественники.Ссылка
	|ИЗ
	|	Справочник.Проекты.ПроектыПредшественники КАК ПроектыПроектыПредшественники
	|ГДЕ
	|	ПроектыПроектыПредшественники.Проект = &Проект
	|	И НЕ ПроектыПроектыПредшественники.Ссылка В (&МассивОбработанныхПроектов)";
	
	Запрос.УстановитьПараметр("Проект",ПроектСсылка);
	Запрос.УстановитьПараметр("МассивОбработанныхПроектов",	МассивОбработанныхПроектов);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ПеренестиПроект(Результат.Ссылка, Сценарий, СмещениеНачало, СмещениеКонец, МассивОбработанныхПроектов);
		
	КонецЦикла;
		
КонецПроцедуры // ПеренестиПроектыПоследователи()

&НаСервереБезКонтекста
Процедура ПеренестиПроектыПредшественники(ПроектСсылка, Сценарий, СмещениеНачало, СмещениеКонец, МассивОбработанныхПроектов)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроектыПроектыПредшественники.Проект
	|ИЗ
	|	Справочник.Проекты.ПроектыПредшественники КАК ПроектыПроектыПредшественники
	|ГДЕ
	|	ПроектыПроектыПредшественники.Ссылка = &Проект
	|	И НЕ ПроектыПроектыПредшественники.Проект В (&МассивОбработанныхПроектов)";
	
	Запрос.УстановитьПараметр("Проект",ПроектСсылка);
	Запрос.УстановитьПараметр("МассивОбработанныхПроектов",	МассивОбработанныхПроектов);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ПеренестиПроект(Результат.Проект,Сценарий,СмещениеНачало, СмещениеКонец, МассивОбработанныхПроектов);
		
	КонецЦикла;
		
КонецПроцедуры // ПеренестиПроектыПоследователи()

&НаСервереБезКонтекста
Процедура ПеренестиПодчиненныеТранзакции(ПроектСсылка, Сценарий, СмещениеНачало, СмещениеКонец, МассивОбработанныхПроектов)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ОперативныйПлан.Ссылка
	|ИЗ
	|	Документ.ОперативныйПлан КАК ОперативныйПлан
	|ГДЕ
	|	ОперативныйПлан.Проект = &Проект";
	
	Запрос.УстановитьПараметр("Проект",ПроектСсылка);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ПеренестиТранзакцию(Результат.Ссылка,Сценарий,СмещениеНачало, СмещениеКонец, МассивОбработанныхПроектов);
		
	КонецЦикла;
		
КонецПроцедуры // ПеренестиПодчиненныеТранзакции()

&НаСервереБезКонтекста
Процедура ИзменитьГраницыРодителя(Сценарий, Родитель, ДатаНачала, ДатаОкончания, МассивОбработанныхПроектов)
	
	МенеджерЗаписи = РегистрыСведений.АтрибутыПроектов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Сценарий = Сценарий;
	МенеджерЗаписи.Проект = Родитель;
	МенеджерЗаписи.Прочитать();
	
	Если НЕ МенеджерЗаписи.Выбран() Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке("Не удалось изменить дату начала проекта "+Родитель + Символы.Пс + "Отсутствует информация о датах.");	
		Возврат;
	КонецЕсли;
	
	СмещениеНачало = ДатаНачала-МенеджерЗаписи.ДатаНачала;
	СмещениеКонец = ДатаОкончания-МенеджерЗаписи.ДатаОкончания;
	
	Если СмещениеНачало < 0 Тогда
		МенеджерЗаписи.ДатаНачала=ДатаНачала; // выходим за границы родителя слева
		
		
	ИначеЕсли СмещениеКонец > 0 Тогда
		МенеджерЗаписи.ДатаОкончания=ДатаОкончания; // выходим за границы родителя справа
		
	Иначе // не можем одновременно, и сдвинуть границы, и расширить их
		Возврат;
		
	КонецЕсли;

	Попытка
		МенеджерЗаписи.Записать();
		МассивОбработанныхПроектов.Добавить(Родитель);
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке("Не удалось изменить даты проекта "+Родитель + "." + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
		Возврат;	
	КонецПопытки;
	
	Если СмещениеНачало < 0 Тогда
		// сместили левую границу, сдвинем на ту же величину предшественники
		ПеренестиПроектыПредшественники(Родитель, Сценарий, СмещениеНачало, СмещениеНачало, МассивОбработанныхПроектов);
		
	ИначеЕсли СмещениеКонец > 0 Тогда
		// сместили правую границу, сдвинем на ту же величину последователи
		ПеренестиПроектыПоследователи(Родитель, Сценарий, СмещениеКонец, СмещениеКонец, МассивОбработанныхПроектов);
	
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(Родитель.Родитель) И МассивОбработанныхПроектов.Найти(Родитель.Родитель)=Неопределено  Тогда
		ИзменитьГраницыРодителя(Сценарий,Родитель.Родитель,МенеджерЗаписи.ДатаНачала,МенеджерЗаписи.ДатаОкончания,МассивОбработанныхПроектов);
	КонецЕсли;
		
КонецПроцедуры // ИзменитьГраницыРодителя()

&НаСервереБезКонтекста
Процедура ПеренестиТранзакцию(ОперативныйПлан, Сценарий, СмещениеНачало, СмещениеКонец, МассивОбработанныхПроектов)
	
	АтрибутыПроекта = Справочники.Проекты.АтрибутыПроекта(ОперативныйПлан.Проект, ?(Сценарий=Справочники.Сценарии.Резерв,Справочники.Сценарии.План,Сценарий), "ДатаНачала,ДатаОкончания");	
	
	Если СмещениеНачало = СмещениеКонец Тогда
		Смещение_ = СмещениеНачало; // перенос родителя.
	ИначеЕсли СмещениеНачало <> 0 И СмещениеКонец = 0 Тогда
		Смещение_ = СмещениеНачало; // сдвигаем в соответствии с левой границей
	Иначе
		// сдвигаем, только если правая граница проекта меньше правой границы документа
		Период_ = ОперативныйПлан.ПериодОтчета;
		Если АтрибутыПроекта.ДатаОкончания >= Период_.ДатаОкончания Тогда
			Возврат;
		КонецЕСли;
		Смещение_ = СмещениеКонец;
	КонецЕсли;
	
	ОперативныйПланОбъект				= ОперативныйПлан.ПолучитьОбъект();
	
	ДатаНачала = ОперативныйПланОбъект.ДатаНачала + Смещение_;
	ДатаОкончания	= ОперативныйПланОбъект.ДатаОкончания + Смещение_;
	
	Периодичность = Неопределено;
	Если ЗначениеЗаполнено(ОперативныйПланОбъект.ПериодОтчета) Тогда
		Периодичность = ОперативныйПланОбъект.ПериодОтчета.Периодичность;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Периодичность) Тогда
		Периодичность = Константы.ПериодичностьБюджетирования.Получить();
	КонецЕсли;
	
	ПериодОтчетаНачало = ОбщегоНазначенияУХ.ОпределитьПериодПоДате(ДатаНачала, Периодичность);
	
	// проверяем, что после сдвига документ не выходит за левую границу проекта
	Если ПериодОтчетаНачало.ДатаНачала < АтрибутыПроекта.ДатаНачала Тогда
		Возврат;
	КонецЕсли;
	
	СдвигПериодов = УправлениеОтчетамиУХ.ПолучитьСмещениеПоИнтервалуПериодов(ОперативныйПланОбъект.ПериодОтчета, ПериодОтчетаНачало) - 1;
	
	Если СдвигПериодов = 0 Тогда
		// Ничего не изменилось.
		Возврат;
	КонецЕсли;
	
	ОперативныйПланОбъект.ПериодОтчета = ПериодОтчетаНачало;
	ОперативныйПланОбъект.ПериодОтчетаОкончание = ОбщегоНазначенияУХ.глОтносительныйПериод(ОперативныйПланОбъект.ПериодОтчетаОкончание, СдвигПериодов);
	
	Для Каждого ТекДвижениеОперации из ОперативныйПланОбъект.ДвиженияОперации Цикл
		
		ТекДвижениеОперации.Период = ОбщегоНазначенияУХ.глОтносительныйПериод(ТекДвижениеОперации.Период, СдвигПериодов);
		
	КонецЦикла;
	
	Для Каждого ТекПериод из ОперативныйПланОбъект.Периоды Цикл
		
		ТекПериод.Период = ОбщегоНазначенияУХ.глОтносительныйПериод(ТекПериод.Период, СдвигПериодов);
		
	КонецЦикла;
	
	Попытка
		ОперативныйПланОбъект.Записать();
		
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке("Не удалось изменить дату транзакции "+ОперативныйПланОбъект + "." + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
		Возврат;	
	КонецПопытки;
	
	Если МассивОбработанныхПроектов.Найти(ОперативныйПланОбъект.Проект)=Неопределено  Тогда
		ИзменитьГраницыРодителя(Сценарий,ОперативныйПланОбъект.Проект,ОперативныйПланОбъект.ДатаНачала,ОперативныйПланОбъект.ДатаОкончания,МассивОбработанныхПроектов);
	КонецЕсли;
	
КонецПроцедуры // ПеренестиПроект()

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ГруппаПраваяПанель.Видимость = Элементы.ВидимостьАтрибутовПроекта.Пометка;
	
	флСценарныйАнализ = СценарныйАнализ И ЗначениеЗаполнено(СценарийСравнения);
	Элементы.ГруппаНастройкиСценарногоАнализа.Видимость = флСценарныйАнализ;
	Элементы.АтрибутыПроектаСценарныйАнализ.Видимость = флСценарныйАнализ;
	
	Если флСценарныйАнализ Тогда
		Элементы.АтрибутыПроектаЗначение.Заголовок = Сценарий;
		Элементы.АтрибутыПроектаЗначениеСравнения.Заголовок = СценарийСравнения;
		
	Иначе
		Элементы.АтрибутыПроектаЗначение.Заголовок = "Значение";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


