
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Инициализация внешнего вида
	УстановитьУсловноеОформление();
	
	// Параметры по умолчанию
	ВидДвиженияОтбор = Перечисления.ВидыДвиженийПриходРасход.Приход;
	Объект.ПериодОтбора.Вариант =  ВариантСтандартногоПериода.Вчера;

	УстановитьЗаголовокСвернутогоОтображенияОтбора();

	ОбновитьВыпискуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если Модифицированность Тогда
		
		Отказ = Истина;
			
		Если ЗавершениеРаботы Тогда
		
			ТекстПредупреждения = НСтр("ru = 'При закрытии формы несохраненные данные будут утеряны. Завершить работу?'");
			
		Иначе
			
			Оповещение = Новый ОписаниеОповещения("ВопросСохраненияДанныхЗавершение", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'Данные были изменены. Закрыть форму без сохранения данных?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПриИзменении(Элемент)
	
	ПриИзмененииОтбораНаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура ВидДвиженияОтборПриИзменении(Элемент)
	ОбновитьВыпискуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтбораПриИзменении(Элемент)
	ОбновитьВыпискуНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБанковскаяВыписка

&НаКлиенте
Процедура БанковскаяВыпискаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	// Чтобы не получать ПутьКДанным на сервере, придерживаемся принципа наименования поля: 
	// ИмяТаблицы + ИмяРеквизита.
	
	Если Поле = Элементы.БанковскаяВыпискаСуммаПлатежа Тогда
		СтандартнаяОбработка = Ложь;
		НачатьРазделениеСтроки();
		
	ИначеЕсли Поле.Вид = ВидПоляФормы.ПолеНадписи Тогда
		
		ДлинаИмениТаблицы = СтрДлина(Элемент.Имя);
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,Элемент.ТекущиеДанные[Сред(Поле.Имя, ДлинаИмениТаблицы + 1)]);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура БанковскаяВыпискаПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ТекущиеДанные.ДанныеИзменены = Истина;
	
	СтрокаРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если СтрокаРодитель <> Неопределено Тогда
		СтрокаРодитель.ДанныеИзменены = Истина
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскаяВыпискаПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		
		Элементы.БанковскаяВыпискаРазделитьСтроку.Доступность = Ложь;
		Элементы.БанковскаяВыпискаОткрытьДокумент.Доступность = Ложь;
	Иначе
		ЭтоСтрокаРасшифровки													= (ТекДанные.ПолучитьРодителя() <> Неопределено);
		Элементы.БанковскаяВыпискаРазделитьСтроку.Доступность					= ЭтоСтрокаРасшифровки;
		Элементы.БанковскаяВыпискаКонтекстноеМенюРазделитьСтроку.Доступность	= ЭтоСтрокаРасшифровки;
		Элементы.БанковскаяВыпискаОткрытьДокумент.Доступность					= ЗначениеЗаполнено(ТекДанные.Ссылка);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскаяВыпискаДокументПланированияПриИзменении(Элемент)
	КопироватьЗначениеВПодчиненные("ДокументПланирования");
КонецПроцедуры

&НаКлиенте
Процедура БанковскаяВыпискаСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	ПриИзмененииСтатьиБюджетаНаСервере(Элементы.БанковскаяВыписка.ТекущаяСтрока);
	КопироватьЗначениеВПодчиненные("СтатьяДвиженияДенежныхСредств,ВидАналитики1,ВидАналитики2,ВидАналитики3,ВидАналитики4,ВидАналитики5,ВидАналитики6");
КонецПроцедуры

&НаКлиенте
Процедура БанковскаяВыпискаДоговорКонтрагентаПриИзменении(Элемент)
	КопироватьЗначениеВПодчиненные("Заказ");
КонецПроцедуры

&НаКлиенте
Процедура АналитикаБДДС1ПриИзменении(Элемент)
	
	КопироватьЗначениеВПодчиненные("АналитикаБДДС1");

КонецПроцедуры

&НаКлиенте
Процедура АналитикаБДДС2ПриИзменении(Элемент)
	
	КопироватьЗначениеВПодчиненные("АналитикаБДДС2");

КонецПроцедуры

&НаКлиенте
Процедура АналитикаБДДС3ПриИзменении(Элемент)
	
	КопироватьЗначениеВПодчиненные("АналитикаБДДС3");

КонецПроцедуры

&НаКлиенте
Процедура АналитикаБДДС4ПриИзменении(Элемент)
	
	КопироватьЗначениеВПодчиненные("АналитикаБДДС4");

КонецПроцедуры
&НаКлиенте
Процедура АналитикаБДДС5ПриИзменении(Элемент)
	
	КопироватьЗначениеВПодчиненные("АналитикаБДДС5");

КонецПроцедуры
&НаКлиенте
Процедура АналитикаБДДС6ПриИзменении(Элемент)
	
	КопироватьЗначениеВПодчиненные("АналитикаБДДС6");

КонецПроцедуры


&НаКлиенте
Процедура БанковскаяВыпискаЦФОПриИзменении(Элемент)
	
	КопироватьЗначениеВПодчиненные("ЦФО");
	ОперативноеПланированиеФормыУХКлиентСервер.УстановитьОтборПоФункциональнымНаправлениям(Элементы.БанковскаяВыписка.ТекущиеДанные.ЦФО, 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы.БанковскаяВыпискаСтатьяДвиженияДенежныхСредств));

КонецПроцедуры

&НаКлиенте
Процедура БанковскаяВыпискаПроектПриИзменении(Элемент)
	
	КопироватьЗначениеВПодчиненные("Проект");

КонецПроцедуры

&НаКлиенте
Процедура БанковскаяВыпискаПередНачаломИзменения(Элемент, Отказ)

	УстановитьСвязиПараметровВыбора(Элементы.БанковскаяВыписка.ТекущаяСтрока);
	ОперативноеПланированиеФормыУХКлиентСервер.УстановитьОтборПоФункциональнымНаправлениям(Элемент.ТекущиеДанные.ЦФО, 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы.БанковскаяВыпискаСтатьяДвиженияДенежныхСредств));

КонецПроцедуры

&НаКлиенте
Процедура БанковскаяВыпискаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	Если Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьПродолжение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Несохраненные данные будут потеряны. Продолжить?'"), РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ОбновитьВыпискуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	СохранитьДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РазделитьСтроку(Команда)
	
	НачатьРазделениеСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокумент(Команда)
	ПоказатьЗначение(,Элементы.БанковскаяВыписка.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьШаблоныАналитик(Команда)
	ОткрытьФорму("РегистрСведений.ШаблоныАналитикПлатежей.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонамАналитик(Команда)
	ЗаполнитьПоШаблонамАналитикНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымДоговоров(Команда)
	ЗаполнитьПоДаннымДоговоровНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРеквизитСтатьяДДС(Команда)
	
	ВыделенныеСтрокиВыписки = Элементы.БанковскаяВыписка.ВыделенныеСтроки;
	Если Не ВыделенныеСтрокиВыписки.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для установки реквизита необходимо выбрать одну или несколько строк выписки'"));
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("СтрокиВыписки,ИмяРеквизита", ВыделенныеСтрокиВыписки, "СтатьяДвиженияДенежныхСредств");
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьСтатьюДДС_Продолжение", ЭтотОбъект, ДопПараметры);
	ПоказатьВводЗначения(ОписаниеОповещения,ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка"), НСтр("ru = 'Укажите статью ДДС'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРеквизитПроект(Команда)
	
	ВыделенныеСтрокиВыписки = Элементы.БанковскаяВыписка.ВыделенныеСтроки;
	Если Не ВыделенныеСтрокиВыписки.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для установки реквизита необходимо выбрать одну или несколько строк выписки'"));
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("СтрокиВыписки,ИмяРеквизита", ВыделенныеСтрокиВыписки, "Проект");
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьРеквизит_Продолжение", ЭтотОбъект, ДопПараметры);
	ПоказатьВводЗначения(ОписаниеОповещения,ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка"),НСтр("ru = 'Укажите проект'"));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьРеквизитЦФО(Команда)
	ВыделенныеСтрокиВыписки = Элементы.БанковскаяВыписка.ВыделенныеСтроки;
	Если Не ВыделенныеСтрокиВыписки.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для установки реквизита необходимо выбрать одну или несколько строк выписки'"));
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("СтрокиВыписки,ИмяРеквизита", ВыделенныеСтрокиВыписки, "ЦФО");
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьРеквизит_Продолжение", ЭтотОбъект, ДопПараметры);
	ПоказатьВводЗначения(ОписаниеОповещения,ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"),НСтр("ru = 'Укажите ЦФО'"));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьАналитику1(Команда)
	
	УстановитьДопАналитику(1);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАналитику2(Команда)
	
	УстановитьДопАналитику(2);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАналитику3(Команда)
	
	УстановитьДопАналитику(3);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьАналитику4(Команда)
	
	УстановитьДопАналитику(4);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьАналитику5(Команда)
	
	УстановитьДопАналитику(5);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьАналитику6(Команда)
	
	УстановитьДопАналитику(6);

КонецПроцедуры


&НаКлиенте
Процедура УстановитьРеквизитДоговорКонтрагента(Команда)
	ВыделенныеСтрокиВыписки = Элементы.БанковскаяВыписка.ВыделенныеСтроки;
	Если Не ВыделенныеСтрокиВыписки.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для установки реквизита необходимо выбрать одну или несколько строк выписки'"));
		Возврат;
	КонецЕсли;
	
	МассивПолейПроверки = Новый Массив;
	МассивПолейПроверки.Добавить("Контрагент");
	МассивПолейПроверки.Добавить("Организация");
	
	Если Не ВыбранныеДанныеОднородны(ВыделенныеСтрокиВыписки, МассивПолейПроверки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для установки договора необходимо выбрать данные, относящиеся к одной организации и одному контрагенту'"));
		Возврат;	
	КонецЕсли;
	
	ДопПараметры = Новый Структура("СтрокиВыписки", ВыделенныеСтрокиВыписки);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьДоговор_Продолжение", ЭтотОбъект, ДопПараметры);	
	СтруктураОтбора = Новый Структура("Организация, Владелец", Элементы.БанковскаяВыписка.ТекущиеДанные.Организация, Элементы.БанковскаяВыписка.ТекущиеДанные.Контрагент);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбора), ЭтаФорма,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВыписку(Команда)
	Для Каждого ТекСтр Из БанковскаяВыписка.ПолучитьЭлементы() Цикл
		Элементы.БанковскаяВыписка.Развернуть(ТекСтр.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВыписку(Команда)
	Для Каждого ТекСтр Из БанковскаяВыписка.ПолучитьЭлементы() Цикл
		Элементы.БанковскаяВыписка.Свернуть(ТекСтр.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Выделим строки Master (1 уровня).
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	Для Каждого Колонка Из Элементы.БанковскаяВыписка.ПодчиненныеЭлементы Цикл
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Колонка.Имя);
	КонецЦикла;
	

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"БанковскаяВыписка.СистемныеПоляУровень", ВидСравненияКомпоновкиДанных.Равно,1,,Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
	// Скроем на 1 уровне отметку незаполненного.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.БанковскаяВыпискаДоговорКонтрагента.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.БанковскаяВыпискаСтатьяДвиженияДенежныхСредств.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.БанковскаяВыпискаЦФО.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.БанковскаяВыпискаПроект.Имя);	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.АналитикаБДДС1.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.АналитикаБДДС2.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.АналитикаБДДС3.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.АналитикаБДДС4.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.АналитикаБДДС5.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.АналитикаБДДС6.Имя);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"БанковскаяВыписка.СистемныеПоляУровень", ВидСравненияКомпоновкиДанных.Равно,1,,Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	
	// Заблокируем отвлекающие поля на уровне детальных записей.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.БанковскаяВыпискаДата.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.БанковскаяВыпискаОрганизация.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.БанковскаяВыпискаКонтрагент.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.БанковскаяВыпискаСчетОрганизации.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.БанковскаяВыпискаСчетКонтрагента.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.БанковскаяВыпискаПодразделениеОрганизации.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.БанковскаяВыпискаВалютаДокумента.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.БанковскаяВыпискаДокументОснование.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.БанковскаяВыпискаНазначениеПлатежа.Имя);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"БанковскаяВыписка.СистемныеПоляУровень", ВидСравненияКомпоновкиДанных.Равно,2,,Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);	
	
	//
	ОперативноеПланированиеФормыУХ.УстановитьУсловноеОформлениеДополнительныхАналитик(ЭтаФорма, Элементы.БанковскаяВыписка, 
		Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств);
КонецПроцедуры

&НаСервере
Процедура ОбновитьВыпискуНаСервере()
	Попытка
		Настройки = Объект.КомпоновщикНастроек.ПолучитьНастройки();
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодОтбора", Объект.ПериодОтбора);	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Настройки.Отбор, "ВидДвижения", ВидДвиженияОтбор);
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(ПолучитьИзВременногоХранилища(Объект.АдресСхемыКомпоновкиДанных), Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновкиДанных 	= Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,, Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		Результат 	= Новый ДеревоЗначений;
		
		// Получаем результат.
		ПроцессорВывода.УстановитьОбъект(Результат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		ЗначениеВРеквизитФормы(Результат, "БанковскаяВыписка");
		Модифицированность = Ложь;
	Исключение
		ТекстСообщения = НСтр("ru = 'Возникли ошибки при получении исходных данных выписок: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбновитьВыпискуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделитьСтроку_Продолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат >= ДополнительныеПараметры.ИсходнаяСтрока.Сумма Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сумма к переносу должна быть меньше исходной суммы'"));
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ИсходнаяСтрока.Сумма = ДополнительныеПараметры.ИсходнаяСтрока.Сумма - Результат;
	Элементы.БанковскаяВыписка.СкопироватьСтроку();
	НоваяСтрока = Элементы.БанковскаяВыписка.ТекущиеДанные;
	НоваяСтрока.Сумма = Результат;
	НоваяСтрока.НомерСтроки = 0;	
	НоваяСтрока.НомерИсходнойСтроки = ДополнительныеПараметры.ИсходнаяСтрока.НомерСтроки;
	Элементы.БанковскаяВыписка.ЗакончитьРедактированиеСтроки(Ложь);
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеНаСервере()
	
	ДеревоОбъектов = РеквизитФормыВЗначение("БанковскаяВыписка");
	ПараметрыПоиска = Новый Структура("ДанныеИзменены", Истина);
	КоллекцияИзмененныхДокументов = ДеревоОбъектов.Строки.НайтиСтроки(ПараметрыПоиска);
	
	НачатьТранзакцию();
	Попытка
		Для Каждого СтрокаДокумент Из КоллекцияИзмененныхДокументов Цикл
			
			ДокОбъект = СтрокаДокумент.Ссылка.ПолучитьОбъект();
			
			// 1. Заполнение шапки документа.
			ЗаполнитьЗначенияСвойств(ДокОбъект, СтрокаДокумент, "Подразделение");
			
			// 2. Обработка строк Расшифровки платежа либо дозаполнение шапки.

			Для Каждого СтрокаРасшифровки Из СтрокаДокумент.Строки Цикл
				
				Если СтрокаРасшифровки.ЭтоРасшифровка Тогда
				
					Если СтрокаРасшифровки.НомерСтроки <> 0 Тогда
						
						СтрокаТабличнойЧасти = ДокОбъект.РасшифровкаПлатежа.Найти(СтрокаРасшифровки.НомерСтроки, "НомерСтроки");
						Если СтрокаТабличнойЧасти <> Неопределено Тогда
							ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаРасшифровки); 
							СтрокаТабличнойЧасти.Аналитика1 = СтрокаРасшифровки.АналитикаБДДС1;
							СтрокаТабличнойЧасти.Аналитика2 = СтрокаРасшифровки.АналитикаБДДС2;
							СтрокаТабличнойЧасти.Аналитика3 = СтрокаРасшифровки.АналитикаБДДС3;
							СтрокаТабличнойЧасти.Аналитика4 = СтрокаРасшифровки.АналитикаБДДС4;
							СтрокаТабличнойЧасти.Аналитика5 = СтрокаРасшифровки.АналитикаБДДС5;
							СтрокаТабличнойЧасти.Аналитика6 = СтрокаРасшифровки.АналитикаБДДС6;
						КонецЕсли;
						
					Иначе
						
						СтрокаТабличнойЧасти = ДокОбъект.РасшифровкаПлатежа.Найти(СтрокаРасшифровки.НомерИсходнойСтроки, "НомерСтроки");
						Если СтрокаТабличнойЧасти <> Неопределено Тогда
							НоваяСтрока = ДокОбъект.РасшифровкаПлатежа.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасшифровки);
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					ЗаполнитьЗначенияСвойств(ДокОбъект, СтрокаРасшифровки, "Заказ,СтатьяДвиженияДенежныхСредств,АналитикаБДДС1,АналитикаБДДС2,АналитикаБДДС3,АналитикаБДДС4,АналитикаБДДС5,АналитикаБДДС6,ДокументПланирования,ЦФО,Проект");
					
				КонецЕсли;
			КонецЦикла;

			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);

		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение операции'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	ОбновитьВыпискуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтбораНаСервере()
	
	УстановитьЗаголовокСвернутогоОтображенияОтбора();
	ОбновитьВыпискуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокСвернутогоОтображенияОтбора()
	
	СтрокаОтбор = Строка(Объект.КомпоновщикНастроек.ПолучитьНастройки().Отбор);
	Если ПустаяСтрока(СтрокаОтбор) Тогда
		СтрокаОтбор = НСтр("ru = 'Не установлен'")
	КонецЕсли;
	
	Элементы.ГруппаОтбор.ЗаголовокСвернутогоОтображения = НСтр("ru = 'Отбор:'") + " " + СтрокаОтбор;
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьЗначениеВПодчиненные(ИменаПолей)
	ТекДанные = Элементы.БанковскаяВыписка.ТекущиеДанные;
	Для Каждого ПодчиненнаяСтрока Из ТекДанные.ПолучитьЭлементы() Цикл
		ЗаполнитьЗначенияСвойств(ПодчиненнаяСтрока, ТекДанные, ИменаПолей);
		ПодчиненнаяСтрока.ДанныеИзменены	= Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонамАналитикНаСервере()
	
	ДеревоДокументов = РеквизитФормыВЗначение("БанковскаяВыписка");
	
	ТаблицаИсходныхДанных = СформироватьТаблицуИсходныхДанных(ДеревоДокументов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка,
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.Контрагент,
	|	ДанныеДокументов.БанковскийСчет КАК СчетОрганизации,
	|	ДанныеДокументов.НазначениеПлатежа
	|ПОМЕСТИТЬ ВТ_ДанныеДокументов
	|ИЗ
	|	&ДанныеДокументов КАК ДанныеДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеДокументов.Ссылка,
	|	ШаблоныАналитикПлатежей.ДоговорКонтрагента,
	|	ШаблоныАналитикПлатежей.СтатьяДвиженияДенежныхСредств,
	|	4 - ВЫБОР
	|		КОГДА ШаблоныАналитикПлатежей.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА ШаблоныАналитикПлатежей.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА ШаблоныАналитикПлатежей.СчетОрганизации = &ПустойБанковскийСчет
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА ШаблоныАналитикПлатежей.НазначениеПлатежа = """"
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РейтингШаблона,
	|	ШаблоныАналитикПлатежей.ЦФО,
	|	ШаблоныАналитикПлатежей.Проект,
	|	ШаблоныАналитикПлатежей.АналитикаБДДС1,
	|	ШаблоныАналитикПлатежей.АналитикаБДДС2,
	|	ШаблоныАналитикПлатежей.АналитикаБДДС3,
	|	ШаблоныАналитикПлатежей.АналитикаБДДС4,
	|	ШаблоныАналитикПлатежей.АналитикаБДДС5,
	|	ШаблоныАналитикПлатежей.АналитикаБДДС6
	|ПОМЕСТИТЬ ВТ_ДанныеШаблоновНесгруппированные
	|ИЗ
	|	РегистрСведений.ШаблоныАналитикПлатежей КАК ШаблоныАналитикПлатежей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеДокументов КАК ВТ_ДанныеДокументов
	|		ПО (ВТ_ДанныеДокументов.Организация = ШаблоныАналитикПлатежей.Организация
	|				ИЛИ ШаблоныАналитикПлатежей.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|			И (ВТ_ДанныеДокументов.Контрагент = ШаблоныАналитикПлатежей.Контрагент
	|				ИЛИ ШаблоныАналитикПлатежей.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|			И (ВТ_ДанныеДокументов.СчетОрганизации = ШаблоныАналитикПлатежей.СчетОрганизации
	|				ИЛИ ШаблоныАналитикПлатежей.СчетОрганизации = &ПустойБанковскийСчет)
	|			И (ВТ_ДанныеДокументов.НазначениеПлатежа ПОДОБНО ШаблоныАналитикПлатежей.НазначениеПлатежа СПЕЦСИМВОЛ ""\""
	|				ИЛИ ШаблоныАналитикПлатежей.НазначениеПлатежа = """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеШаблоновНесгруппированные.Ссылка,
	|	МАКСИМУМ(ВТ_ДанныеШаблоновНесгруппированные.РейтингШаблона) КАК РейтингШаблона
	|ПОМЕСТИТЬ ВТ_МаксимальныеВесаШаблонов
	|ИЗ
	|	ВТ_ДанныеШаблоновНесгруппированные КАК ВТ_ДанныеШаблоновНесгруппированные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДанныеШаблоновНесгруппированные.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеШаблоновНесгруппированные.Ссылка,
	|	МАКСИМУМ(ВТ_ДанныеШаблоновНесгруппированные.ДоговорКонтрагента) КАК ДоговорКонтрагента,
	|	МАКСИМУМ(ВТ_ДанныеШаблоновНесгруппированные.СтатьяДвиженияДенежныхСредств) КАК СтатьяДвиженияДенежныхСредств,
	|	МАКСИМУМ(ВТ_ДанныеШаблоновНесгруппированные.ЦФО) КАК ЦФО,
	|	МАКСИМУМ(ВТ_ДанныеШаблоновНесгруппированные.Проект) КАК Проект,
	|	МАКСИМУМ(ВТ_ДанныеШаблоновНесгруппированные.АналитикаБДДС1) КАК АналитикаБДДС1,
	|	МАКСИМУМ(ВТ_ДанныеШаблоновНесгруппированные.АналитикаБДДС2) КАК АналитикаБДДС2,
	|	МАКСИМУМ(ВТ_ДанныеШаблоновНесгруппированные.АналитикаБДДС3) КАК АналитикаБДДС3,
	|	МАКСИМУМ(ВТ_ДанныеШаблоновНесгруппированные.АналитикаБДДС4) КАК АналитикаБДДС4,
	|	МАКСИМУМ(ВТ_ДанныеШаблоновНесгруппированные.АналитикаБДДС5) КАК АналитикаБДДС5,
	|	МАКСИМУМ(ВТ_ДанныеШаблоновНесгруппированные.АналитикаБДДС6) КАК АналитикаБДДС6
	|ИЗ
	|	ВТ_ДанныеШаблоновНесгруппированные КАК ВТ_ДанныеШаблоновНесгруппированные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаксимальныеВесаШаблонов КАК ВТ_МаксимальныеВесаШаблонов
	|		ПО ВТ_ДанныеШаблоновНесгруппированные.Ссылка = ВТ_МаксимальныеВесаШаблонов.Ссылка
	|			И ВТ_ДанныеШаблоновНесгруппированные.РейтингШаблона = ВТ_МаксимальныеВесаШаблонов.РейтингШаблона
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДанныеШаблоновНесгруппированные.Ссылка";

	Запрос.УстановитьПараметр("ДанныеДокументов", 		ТаблицаИсходныхДанных);
	Запрос.УстановитьПараметр("ПустойБанковскийСчет", 	ДенежныеСредстваВстраиваниеУХКлиентСервер.ПолучитьПустойБанковскийСчет());
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗаполнитьДеревоПодобраннымиЗначениями(ДеревоДокументов, Выборка);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПодобраннымиЗначениями(Знач ДеревоДокументов, Знач Выборка)
	
	// Получим массив реквизитов из шаблона
	МассивРеквизитов = Новый Массив;
	Для Каждого ТекРеквизит Из Метаданные.РегистрыСведений.ШаблоныАналитикПлатежей.Ресурсы Цикл
		
		МассивРеквизитов.Добавить(ТекРеквизит.Имя);
		
	КонецЦикла;
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаДокумента = ДеревоДокументов.Строки.Найти(Выборка.Ссылка, "Ссылка");
		Если СтрокаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьНезаполненныеЗначенияСтроки(СтрокаДокумента, Выборка, МассивРеквизитов);
		
		Для Каждого СтрокаРасшифровкиДокумента Из СтрокаДокумента.Строки Цикл
			ЗаполнитьНезаполненныеЗначенияСтроки(СтрокаРасшифровкиДокумента, Выборка, МассивРеквизитов);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоДокументов, "БанковскаяВыписка");
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНезаполненныеЗначенияСтроки(Приемник, Источник, МассивРеквизитов)
	
	Для Каждого ТекИмяРеквизита Из МассивРеквизитов Цикл
		
		Если НЕ ЗначениеЗаполнено(Приемник[ТекИмяРеквизита]) Тогда
			Приемник[ТекИмяРеквизита] = Источник[ТекИмяРеквизита];
		КонецЕсли;
		
	КонецЦикла;
	
	Приемник.ДанныеИзменены = Истина;
	
КонецПроцедуры

&НаСервере
Функция СформироватьТаблицуИсходныхДанных(Знач ДеревоДокументов)
    
	
	ТаблицаИсходныхДанных = Новый ТаблицаЗначений;
	ТаблицаИсходныхДанных.Колонки.Добавить("Ссылка",			 ДеревоДокументов.Колонки.Ссылка.ТипЗначения);
	ТаблицаИсходныхДанных.Колонки.Добавить("Организация",		 ДеревоДокументов.Колонки.Организация.ТипЗначения);
	ТаблицаИсходныхДанных.Колонки.Добавить("Контрагент",		 ДеревоДокументов.Колонки.Контрагент.ТипЗначения);
	ТаблицаИсходныхДанных.Колонки.Добавить("БанковскийСчет",	 ДеревоДокументов.Колонки.БанковскийСчет.ТипЗначения);
	ТаблицаИсходныхДанных.Колонки.Добавить("НазначениеПлатежа",	 ДеревоДокументов.Колонки.НазначениеПлатежа.ТипЗначения);
	
	Для Каждого ТекСтр Из ДеревоДокументов.Строки Цикл
		
		ЗаполнитьЗначенияСвойств(ТаблицаИсходныхДанных.Добавить(), ТекСтр);
		
	КонецЦикла;
	
	Возврат ТаблицаИсходныхДанных;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоДаннымДоговоровНаСервере()
	
	ДеревоДокументов = РеквизитФормыВЗначение("БанковскаяВыписка");
	
	ТаблицаИсходныхДанных = СформироватьТаблицуИсходныхДанных(ДеревоДокументов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка,
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.Контрагент,
	|	ДанныеДокументов.БанковскийСчет КАК СчетОрганизации,
	|	ДанныеДокументов.НазначениеПлатежа
	|ПОМЕСТИТЬ ВТ_ДанныеДокументов
	|ИЗ
	|	&ДанныеДокументов КАК ДанныеДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеДокументов.Ссылка,
	|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
	|	ДоговорыКонтрагентов.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ДоговорыКонтрагентов.ОсновнойЦФО КАК ЦФО,
	|	ДоговорыКонтрагентов.ОсновнойПроект КАК Проект,
	|	ДоговорыКонтрагентов.АналитикаБДДС1 КАК АналитикаБДДС1,
	|	ДоговорыКонтрагентов.АналитикаБДДС2 КАК АналитикаБДДС2,
	|	ДоговорыКонтрагентов.АналитикаБДДС3 КАК АналитикаБДДС3,
	|	ДоговорыКонтрагентов.АналитикаБДДС4 КАК АналитикаБДДС4,
	|	ДоговорыКонтрагентов.АналитикаБДДС5 КАК АналитикаБДДС5,
	|	ДоговорыКонтрагентов.АналитикаБДДС6 КАК АналитикаБДДС6
	|ИЗ
	|	ВТ_ДанныеДокументов КАК ВТ_ДанныеДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ВТ_ДанныеДокументов.Организация = ДоговорыКонтрагентов.Организация
	|			И ВТ_ДанныеДокументов.Контрагент = ДоговорыКонтрагентов.Контрагент
	|			И (ВТ_ДанныеДокументов.НазначениеПлатежа ПОДОБНО ""%"" + ДоговорыКонтрагентов.Наименование + ""%"")";

	Запрос.УстановитьПараметр("ДанныеДокументов", ТаблицаИсходныхДанных);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗаполнитьДеревоПодобраннымиЗначениями(ДеревоДокументов, Выборка);
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРеквизит_Продолжение(Значение, ДополнительныеПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураАналитик = Новый Структура(ДополнительныеПараметры.ИмяРеквизита, Значение);
	УстановитьАналитикиНаСервере(СтруктураАналитик, ДополнительныеПараметры.СтрокиВыписки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоговор_Продолжение(Значение, ДополнительныеПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	СтруктураАналитик = Новый Структура("Заказ", Значение);
	УстановитьАналитикиНаСервере(СтруктураАналитик, ДополнительныеПараметры.СтрокиВыписки);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатьюДДС_Продолжение(Значение, ДополнительныеПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	УстановитьСтатьюДДС_Завершение(ДополнительныеПараметры, Значение);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДопАналитику(Индекс)
	ВыделенныеСтрокиВыписки = Элементы.БанковскаяВыписка.ВыделенныеСтроки;
	Если Не ВыделенныеСтрокиВыписки.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для установки реквизита необходимо выбрать одну или несколько строк выписки'"));
		Возврат;
	КонецЕсли;
	
	МассивПолейПроверки = Новый Массив;
	МассивПолейПроверки.Добавить("ВидАналитики" + Индекс);
	
	Если Не ВыбранныеДанныеОднородны(ВыделенныеСтрокиВыписки,МассивПолейПроверки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для установки реквизита необходимо выбрать данные, имеющие одинаковые виды аналитик'"));
		Возврат;	
	КонецЕсли;
	
	ДопПараметры = Новый Структура("СтрокиВыписки,ИмяРеквизита", ВыделенныеСтрокиВыписки, "АналитикаБДДС"+Индекс);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьРеквизит_Продолжение", ЭтотОбъект, ДопПараметры);	
	ТипЗначения = ТипЗначенияАналитики(Элементы.БанковскаяВыписка.ТекущиеДанные["ВидАналитики" + Индекс]);
	
	Если ТипЗначения = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр("ru = 'В выбранных строках не предусмотрена установка аналитики %1'"), Индекс));
		Возврат;
	КонецЕсли;
	
	ПоказатьВводЗначения(ОписаниеОповещения, 
		Элементы.БанковскаяВыписка.ТекущиеДанные["АналитикаБДДС" + Индекс], НСтр("ru = 'Введите значение аналитики'"), 
		ТипЗначения);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипЗначенияАналитики(ВидАналитики)
	Возврат ВидАналитики.ТипЗначения;
КонецФункции

&НаСервере
Процедура УстановитьСтатьюДДС_Завершение(Знач ДополнительныеПараметры, Знач Значение)
	
	
	СтруктураАналитик = Новый Структура("СтатьяДвиженияДенежныхСредств", Значение);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураАналитик, АналитикиСтатейБюджетовУХВызовСервера.ВидыАналитикСтатьи(Значение));
	Для Индекс = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
		
		Если НЕ ЗначениеЗаполнено(СтруктураАналитик["ВидАналитики"+Индекс]) Тогда
			СтруктураАналитик.Вставить("АналитикаБДДС" + Индекс, Неопределено);
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьАналитикиНаСервере(СтруктураАналитик, ДополнительныеПараметры.СтрокиВыписки);

КонецПроцедуры

&НаСервере
Процедура УстановитьАналитикиНаСервере(Знач СтруктураЗначений, Знач СтрокиВыписки)
	
	Для Каждого ИдентификаторСтроки Из СтрокиВыписки Цикл
		
		СтрокаДерева = БанковскаяВыписка.НайтиПоИдентификатору(ИдентификаторСтроки);
		СтрокаДерева.ДанныеИзменены = Истина;
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтруктураЗначений);
		
		СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
		Если СтрокаРодитель <> Неопределено Тогда
			СтрокаРодитель.ДанныеИзменены = Истина;
		КонецЕсли;
		
		Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
			ПодчиненнаяСтрока.ДанныеИзменены = Истина;
			ЗаполнитьЗначенияСвойств(ПодчиненнаяСтрока, СтруктураЗначений);
		КонецЦикла;
	КонецЦикла;
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ВыбранныеДанныеОднородны(Знач ВыделенныеСтрокиВыписки, ПоляПроверки)
	
	СтруктураПроверки = Новый Структура;
	Для Каждого ПолеПроверки Из ПоляПроверки Цикл
		СтруктураПроверки.Вставить(ПолеПроверки, Новый Соответствие);
	КонецЦикла;
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтрокиВыписки Цикл
		
		СтрокаДерева = БанковскаяВыписка.НайтиПоИдентификатору(ИдентификаторСтроки);
		Для Каждого ПолеПроверки Из ПоляПроверки Цикл
			СтруктураПроверки[ПолеПроверки].Вставить(СтрокаДерева[ПолеПроверки],1);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СтруктураПроверки Цикл
		
		Если КлючИЗначение.Значение.Количество() <> 1 Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииСтатьиБюджетаНаСервере(Строка)

	ВидБюджета = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств;
	
	КодВидаБюджета = ДвиженияБюджетированиеКлиентСерверУХ.КодВидаБюджета(ВидБюджета);
	ОперативноеПланированиеФормыУХ.УстановитьАналитикиСтатьи(БанковскаяВыписка.НайтиПоИдентификатору(Строка), ВидБюджета, "Аналитика"+КодВидаБюджета+"%1");
	УстановитьСвязиПараметровВыбора(Строка);

КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбора(ИдентификаторСтроки)
	
	ОперативноеПланированиеФормыУХ.УстановитьСвязиПараметровВыбора(ЭтаФорма, ИдентификаторСтроки, 
		Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств);
			
КонецПроцедуры //

&НаКлиенте
Процедура НачатьРазделениеСтроки()
	
	Перем ДополнительныеПараметры, ИсходнаяСтрока, ОписаниеОповещения;
	
	ИсходнаяСтрока = Элементы.БанковскаяВыписка.ТекущиеДанные;
	
	Если НЕ ИсходнаяСтрока.ЭтоРасшифровка Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не поддерживается разделение выписки с видом'") + " " + ИсходнаяСтрока.ХозяйственнаяОперация);
		Возврат;
	КонецЕсли;

	
	ДополнительныеПараметры = Новый Структура("ИсходнаяСтрока", ИсходнаяСтрока);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РазделитьСтроку_Продолжение", ЭтотОбъект,ДополнительныеПараметры);
	
	ПоказатьВводЧисла(ОписаниеОповещения,ИсходнаяСтрока.Сумма, НСтр("ru = 'Введите сумму новой строки'"));

КонецПроцедуры

&НаКлиенте
Процедура ВопросСохраненияДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

