
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	Список.Параметры.УстановитьЗначениеПараметра("ДатаНачалаУчета", ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4());
	СписокДетально.Параметры.УстановитьЗначениеПараметра("ДатаНачалаУчета", ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4());
	
	ВнеоборотныеАктивыЛокализация.ЗаполнитьСоответствиеДокументовЖурналаНМА(СоответствиеДокументов);
	
	Если Не Параметры.Свойство("КлючНазначенияФормы")
		Или ПустаяСтрока(Параметры.КлючНазначенияФормы) Тогда
		КлючНазначенияИспользования = КлючНазначенияФормыПоУмолчанию();
		КлючНастроек = "";
	Иначе
		КлючНазначенияИспользования = Параметры.КлючНазначенияФормы;
		КлючНастроек                = Параметры.КлючНазначенияФормы;
	КонецЕсли;
	
	Если Параметры.Свойство("ОтборыФормыСписка") Тогда
		
		ФормыОткрытаПоГиперссылке = Истина;
		ОтборТипыДокументов = Параметры.ОтборыФормыСписка.ОтборТипыДокументов;
		ОтборХозяйственныеОперации = Параметры.ОтборыФормыСписка.ОтборХозяйственныеОперации;
		
		Если КлючНастроек = "ПомощникПерехода" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Список,
				"СозданДляПереходаНаВерсию24",
				1,
				ВидСравненияКомпоновкиДанных.Равно,,
				Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокДетально,
				"СозданДляПереходаНаВерсию24",
				1,
				ВидСравненияКомпоновкиДанных.Равно,,
				Истина);
				
			АвтоЗаголовок = Ложь;
			Заголовок = НСтр("ru = 'Документы по НМА и расходам на НИОКР, созданные для перехода на учет внеоборотных активов версии 2.4';
							|en = 'Documents of intangible assets and R&D expenses created for migration to fixed asset accounting 2.4'");
			Элементы.ОтборОрганизацияАмортизация.Видимость = Ложь;
			Элементы.ОтборНематериальныйАктивАмортизация.Видимость = Ложь;
			Элементы.СписокАмортизация.Видимость = Ложь;
			Элементы.ГруппаПользовательскиеНастройкиСписокАмортизация.Видимость = Ложь;
		КонецЕсли; 
		
	ИначеЕсли Параметры.Свойство("НематериальныйАктив") Тогда
		
		ФормыОткрытаПоГиперссылке = Истина;
		ОтборНематериальныйАктив = Параметры.НематериальныйАктив;
		Элементы.Список.Видимость = Ложь;
		Элементы.ОтборОрганизация.Видимость = Ложь;
		Элементы.ИнформационнаяНадписьОтбор.Видимость = Ложь;
		Элементы.ОтборНематериальныйАктив.Видимость = Ложь;
		Элементы.ОтборНематериальныйАктивАмортизация.Видимость = Ложь;
		Элементы.СписокДетальноНематериальныйАктив.Видимость = Ложь;
		Элементы.ГруппаПользовательскиеНастройкиСписок.Видимость = Ложь;
		Элементы.СписокПризнаниеРасходовПоИсследованиямИРазработкам.Видимость = Ложь;
		Элементы.ОтборТемаЭтап.Видимость = Ложь;
		Элементы.ОтборОрганизацияПризнаниеРасходов.Видимость = Ложь;
		Элементы.КОформлению.Видимость = Ложь;
		
		АвтоЗаголовок = Ложь;
		ВидОбъектаУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборНематериальныйАктив, "ВидОбъектаУчета");
		Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
			Заголовок = СтрШаблон(НСтр("ru = 'Документы по расходам на НИОКР %1';
										|en = '%1 R&D expense documents'"), Строка(ОтборНематериальныйАктив));
		Иначе
			Заголовок = СтрШаблон(НСтр("ru = 'Документы по нематериальному активу %1';
										|en = '%1 intangible asset documents'"), Строка(ОтборНематериальныйАктив));
		КонецЕсли; 
		
	ИначеЕсли Параметры.Свойство("ТемаЭтапИсследованийИразработок") Тогда
		
		ФормыОткрытаПоГиперссылке = Истина;
		ОтборТемаЭтап = Параметры.ТемаЭтапИсследованийИразработок;
		Элементы.Список.Видимость = Ложь;
		Элементы.СписокДетально.Видимость = Ложь;
		Элементы.СписокАмортизация.Видимость = Ложь;
		Элементы.ОтборОрганизация.Видимость = Ложь;
		Элементы.ОтборОрганизацияДетально.Видимость = Ложь;
		Элементы.ОтборОрганизацияАмортизация.Видимость = Ложь;
		Элементы.ОтборОрганизацияПризнаниеРасходов.Видимость = Ложь;
		Элементы.ИнформационнаяНадписьОтбор.Видимость = Ложь;
		Элементы.ИнформационнаяНадписьОтборДетально.Видимость = Ложь;
		Элементы.ОтборНематериальныйАктив.Видимость = Ложь;
		Элементы.ОтборНематериальныйАктивАмортизация.Видимость = Ложь;
		Элементы.ОтборТемаЭтап.Видимость = Ложь;
		Элементы.ГруппаПользовательскиеНастройкиСписок.Видимость = Ложь;
		Элементы.ГруппаПользовательскиеНастройкиСписокДетально.Видимость = Ложь;
		Элементы.ГруппаПользовательскиеНастройкиПризнаниеРасходов.Видимость = Ложь;
		Элементы.КОформлению.Видимость = Ложь;
		
		АвтоЗаголовок = Ложь;
		Заголовок = СтрШаблон(НСтр("ru = 'Документы по теме, этапу исследований и разработок %1';
									|en = 'Documents on research and development stage, topic %1'"), Строка(ОтборТемаЭтап));
		
	Иначе
		ВосстановитьНастройки();
	КонецЕсли;
	
	ТекстЗапроса = Список.ТекстЗапроса;
	ВнеоборотныеАктивыЛокализация.ДополнитьТекстЗапросаЖурналаНМА(ТекстЗапроса);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтатусПроверки КАК СтатусПроверки", "НЕОПРЕДЕЛЕНО КАК УдаленСтатусПроверки");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫРАЗИТЬ(&ИндикаторПроверки КАК БУЛЕВО) КАК ИндикаторПроверки", "ЛОЖЬ КАК УдаленИндикаторПроверки");
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СвойстваСписка);
	
	ДополнительныеПараметры = Новый Структура("МестоРазмещенияДанныхПроверкиРегл", Элементы.СписокГруппаРеглПроверка);
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	
	ЗаполнитьРеквизитыФормыПриСоздании();
	НастроитьЭлементыФормыПриСоздании();
	УстановитьОтборыДинамическогоСписка();
	
	ОбщегоНазначенияУТ.СформироватьНадписьОтбор(
		ИнформационнаяНадписьОтбор, 
		ХозяйственныеОперацииИДокументы, 
		ОтборТипыДокументов, 
		ОтборХозяйственныеОперации);
	
	Если НЕ ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА() Тогда
		Элементы.СписокОтражатьВУпрУчете.Видимость = Ложь;
		Элементы.СписокОтражатьВРеглУчете.Видимость = Ложь;
		Элементы.СписокДетальноОтражатьВУпрУчете.Видимость = Ложь;
		Элементы.СписокДетальноОтражатьВРеглУчете.Видимость = Ложь;
	КонецЕсли;
	
	ИспользуемыеТипыДокументов = Новый Массив;
	Для каждого ОписаниеОперации Из ХозяйственныеОперацииИДокументы Цикл
		ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка." + СтрРазделить(ОписаниеОперации.ПолноеИмяДокумента, ".")[1]));
	КонецЦикла;
	Для каждого СтрокаДокумент Из СоответствиеДокументов Цикл
		ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка." + СтрокаДокумент.СтарыйДокументИмя));
	КонецЦикла;
	ИспользуемыеТипыДокументовАмортизация = Новый Массив;
	Для каждого ОписаниеОперации Из ХозяйственныеОперацииИДокументыАмортизация Цикл
		ИспользуемыеТипыДокументовАмортизация.Добавить(Тип("ДокументСсылка." + СтрРазделить(ОписаниеОперации.ПолноеИмяДокумента, ".")[1]));
	КонецЦикла;
	ИспользуемыеТипыДокументовПризнаниеРасходов = Новый Массив;
	Для каждого ОписаниеОперации Из ХозяйственныеОперацииИДокументыПризнаниеРасходов Цикл
		ИспользуемыеТипыДокументовПризнаниеРасходов.Добавить(Тип("ДокументСсылка." + СтрРазделить(ОписаниеОперации.ПолноеИмяДокумента, ".")[1]));
	КонецЦикла;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов(ИспользуемыеТипыДокументов);
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокКоманднаяПанель;
	ПараметрыРазмещения.ПрефиксГрупп = "Список";
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов(ИспользуемыеТипыДокументов);
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокДетальноКоманднаяПанель;
	ПараметрыРазмещения.ПрефиксГрупп = "СписокДетально";
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов(ИспользуемыеТипыДокументовАмортизация);
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокАмортизацияКоманднаяПанель;
	ПараметрыРазмещения.ПрефиксГрупп = "СписокАмортизация";
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов(ИспользуемыеТипыДокументовПризнаниеРасходов);
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокПризнаниеРасходовПоИсследованиямИРазработкамКоманднаяПанель;
	ПараметрыРазмещения.ПрефиксГрупп = "СписокПризнаниеРасходов";
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьГиперссылкуКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	
	ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		
		Элементы.Список.Обновить();
		Элементы.СписокДетально.Обновить();
		Элементы.СписокАмортизация.Обновить();
		
	КонецЕсли;
	
	ОбновитьГиперссылкуКОформлению();
	ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДетально

&НаКлиенте
Процедура СписокДетальноПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокАмортизация

&НаКлиенте
Процедура СписокАмортизацияПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПризнаниеРасходовПоИсследованиямИРазработкам

&НаКлиенте
Процедура СписокПризнаниеРасходовПоИсследованиямИРазработкамПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОтбора();
	
	ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНематериальныйАктивПриИзменении(Элемент)
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТемаЭтапПриИзменении(Элемент)
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяНадписьОтборОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДоступныеХозяйственныеОперацииИДокументы", ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы());
	ПараметрыФормы.Вставить("КлючНастроек", КлючНазначенияИспользования);
	ПараметрыФормы.Вставить("КлючФормы", КлючНазначенияФормыПоУмолчанию());
	
	ОткрытьФорму("Справочник.НастройкиХозяйственныхОпераций.Форма.ФормаУстановкиОтбора",
		ПараметрыФормы,,,,, Новый ОписаниеОповещения("УстановитьОтборыПоХозОперациямИДокументам", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработки.ЖурналДокументовНМА2_4.Форма.ДокументыПоНМА.Событие.КОформлениюОбработкаНавигационнойСсылки");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	СтандартнаяОбработка = Ложь;
		
	ПараметрыФормы = Новый Структура;
	СтруктураБыстрогоОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		СтруктураБыстрогоОтбора.Вставить("Организация", ОтборОрганизация);
		ПараметрыФормы.Вставить("Организация", ОтборОрганизация);
	КонецЕсли;
	
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	СтруктураБыстрогоОтбора.Вставить("Период", СписокПризнаниеРасходовИнтервал);
	СтруктураБыстрогоОтбора.Вставить("ПериодРегистрации", ?(ЗначениеЗаполнено(СписокПризнаниеРасходовИнтервал.ДатаОкончания), НачалоМесяца(СписокПризнаниеРасходовИнтервал.ДатаОкончания), НачалоМесяца(ТекущаяДата)));

	ПараметрыФормы.Вставить("НачалоПериода", СтруктураБыстрогоОтбора.ПериодРегистрации);
	ПараметрыФормы.Вставить("КонецПериода", ?(ЗначениеЗаполнено(СписокПризнаниеРасходовИнтервал.ДатаОкончания), СписокПризнаниеРасходовИнтервал.ДатаОкончания, КонецМесяца(ТекущаяДата)));
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора",	СтруктураБыстрогоОтбора);
	ПараметрыФормы.Вставить("КлючНазначенияФормы",		КлючНазначенияФормыПоУмолчанию());
	
	ОткрытьФорму(НавигационнаяСсылкаФорматированнойСтроки,ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элемент, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Элементы.СписокГруппаСоздатьГенерируемая.ПодчиненныеЭлементы.Количество() <> 0 Тогда
		Если Копирование Тогда
			ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элемент);
		ИначеЕсли ОтборТипыДокументов.Количество() = 1 И ОтборХозяйственныеОперации.Количество() = 1 Тогда
			СтруктураКоманды = Новый Структура("Имя", Элементы.СписокГруппаСоздатьГенерируемая.ПодчиненныеЭлементы[0].Имя);
			Подключаемый_СоздатьДокумент(СтруктураКоманды);
		Иначе
			Подключаемый_СоздатьДокументЧерезФормуВыбора(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПризнаниеРасходовПоИсследованиямИРазработкамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПризнаниеРасходовПоИсследованиямИРазработкамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Отказ = Истина;
	Если Элементы.СписокГруппаСоздатьГенерируемая.ПодчиненныеЭлементы.Количество() <> 0 Тогда
		Если Копирование Тогда
			ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элемент);
		ИначеЕсли ОтборТипыДокументов.Количество() = 1 И ОтборХозяйственныеОперации.Количество() = 1 Тогда
			СтруктураКоманды = Новый Структура("Имя", Элементы.СписокГруппаСоздатьГенерируемая.ПодчиненныеЭлементы[0].Имя);
			Подключаемый_СоздатьДокумент(СтруктураКоманды);
		Иначе
			Подключаемый_СоздатьДокументЧерезФормуВыбора(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПризнаниеРасходовПоИсследованиямИРазработкамПередУдалением(Элемент, Отказ)
		
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элемент, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПризнаниеРасходовПоИсследованиямИРазработкамПередНачаломИзменения(Элемент, Отказ)
		
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СписокУстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУтКлиент.РедактироватьПериод(СписокИнтервал,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДетальноУстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУтКлиент.РедактироватьПериод(СписокДетальноИнтервал,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАмортизацияУстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУтКлиент.РедактироватьПериод(СписокАмортизацияИнтервал,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьИнтервалЗавершениеНаСервере();
	
	ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПризнаниеРасходовУстановитьИнтервалЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьИнтервалЗавершениеНаСервере();
	
	ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиДокументы(Элементы.Список, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДетальноПровести(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиДокументы(Элементы.СписокДетально, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАмортизацияПровести(Команда)
	
	ВнеоборотныеАктивыКлиент.ПровестиДокументыВФономЗадании(
		Элементы.СписокАмортизация, "Документ.АмортизацияНМА2_4.Форма.РасчетАмортизации");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаПроведения(Команда)
	
	ОбщегоНазначенияУТКлиент.ОтменаПроведения(Элементы.Список, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДетальноОтменаПроведения(Команда)
	
	ОбщегоНазначенияУТКлиент.ОтменаПроведения(Элементы.СписокДетально, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАмортизацияОтменаПроведения(Команда)
	
	ОбщегоНазначенияУТКлиент.ОтменаПроведения(Элементы.СписокАмортизация, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура Скопировать(Команда)
	
	ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДетальноСкопировать(Команда)
	
	ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элементы.СписокДетально);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАмортизацияСкопировать(Команда)
	
	ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элементы.СписокАмортизация);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьПометкуУдаления(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элементы.Список, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДетальноУстановитьСнятьПометкуУдаления(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элементы.СписокДетально, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАмортизацияУстановитьСнятьПометкуУдаления(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элементы.СписокАмортизация, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроводкиМеждународногоУчета(Команда)
	
	//++ НЕ УТКА
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		ВнеоборотныеАктивыКлиент.ОткрытьПроводкиМеждународногоУчета(Элементы.Список.ТекущиеДанные.Ссылка);
	КонецЕсли; 
	//-- НЕ УТКА
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДетальноПроводкиМеждународногоУчета(Команда)
	
	//++ НЕ УТКА
	Если Элементы.СписокДетально.ТекущиеДанные <> Неопределено Тогда
		ВнеоборотныеАктивыКлиент.ОткрытьПроводкиМеждународногоУчета(Элементы.СписокДетально.ТекущиеДанные.Ссылка);
	КонецЕсли; 
	//-- НЕ УТКА
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАмортизацияПроводкиМеждународногоУчета(Команда)
	
	//++ НЕ УТКА
	Если Элементы.СписокАмортизация.ТекущиеДанные <> Неопределено Тогда
		ВнеоборотныеАктивыКлиент.ОткрытьПроводкиМеждународногоУчета(Элементы.СписокАмортизация.ТекущиеДанные.Ссылка);
	КонецЕсли; 
	//-- НЕ УТКА
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьДокумент(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДокументыДетально Тогда
		СтруктураОтборы = Новый Структура("Организация,НематериальныйАктив", ОтборОрганизация, ОтборНематериальныйАктив);
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПризнаниеРасходовПоИсследованиямИРазработкам 
		И НЕ ОтборТемаЭтап.Пустая() Тогда
		ТемыЭтапы = Новый Массив();
		ТемыЭтапы.Добавить(ОтборТемаЭтап);
		СтруктураОтборы = Новый Структура("Организация, ТемыЭтапы", ОтборОрганизация, ТемыЭтапы);
	Иначе
		СтруктураОтборы = Новый Структура("Организация", ОтборОрганизация);
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.СоздатьДокументЧерезКоманду(Команда.Имя, СтруктураОтборы);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьДокументЧерезФормуВыбора(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДокументыДетально Тогда
		СтруктураОтборы = Новый Структура("Организация,НематериальныйАктив", ОтборОрганизация, ОтборНематериальныйАктив);
	Иначе
		СтруктураОтборы = Новый Структура("Организация", ОтборОрганизация);
	КонецЕсли;
	
	КлючФормы = КлючНазначенияФормыПоУмолчанию();
	АдресХозяйственныеОперацииИДокументы = ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы();
	ОбщегоНазначенияУТКлиент.СоздатьДокументЧерезФормуВыбора(АдресХозяйственныеОперацииИДокументы,
		КлючФормы, КлючНазначенияИспользования, СтруктураОтборы);
		
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, ТекущийСписок(ЭтаФорма));
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, ТекущийСписок(ЭтаФорма), Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, ТекущийСписок(ЭтаФорма));
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПризнаниеРасходовПоИсследованиямИРазработкамПровести(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиДокументы(Элементы.СписокПризнаниеРасходовПоИсследованиямИРазработкам, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПризнаниеРасходовПоИсследованиямИРазработкамУстановитьИнтервал(Команда)
		
	Оповещение = Новый ОписаниеОповещения("СписокПризнаниеРасходовУстановитьИнтервалЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУтКлиент.РедактироватьПериод(СписокПризнаниеРасходовИнтервал,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПризнаниеРасходовПоИсследованиямИРазработкамОтменаПроведения(Команда)
	
	ОбщегоНазначенияУТКлиент.ОтменаПроведения(Элементы.СписокПризнаниеРасходовПоИсследованиямИРазработкам, Заголовок);

КонецПроцедуры

&НаКлиенте
Процедура СписокПризнаниеРасходовПоИсследованиямИРазработкамСкопировать(Команда)
	
	ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элементы.СписокПризнаниеРасходовПоИсследованиямИРазработкам);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПризнаниеРасходовПоИсследованиямИРазработкамУстановитьСнятьПометкуУдаления(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элементы.СписокПризнаниеРасходовПоИсследованиямИРазработкам, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПризнаниеРасходовПоИсследованиямИРазработкамПроводкиМеждународногоУчета(Команда)
	
	//++ НЕ УТКА
	Если Элементы.СписокПризнаниеРасходовПоИсследованиямИРазработкам.ТекущиеДанные <> Неопределено Тогда
		ВнеоборотныеАктивыКлиент.ОткрытьПроводкиМеждународногоУчета(Элементы.СписокПризнаниеРасходовПоИсследованиямИРазработкам.ТекущиеДанные.Ссылка);
	КонецЕсли; 
	//-- НЕ УТКА
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", "СписокДата");
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокДетально.Дата", "СписокДетальноДата");
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокПризнаниеРасходовПоИсследованиямИРазработкам.Дата",
		"СписокПризнаниеРасходовПоИсследованиямИРазработкамДата");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормыПриСоздании()
	
	ТаблицаЗначенийДоступно = ИнициализироватьХозяйственныеОперацииИДокументы(
		ХозяйственныеОперацииИДокументы.Выгрузить(),
		ОтборХозяйственныеОперации,
		ОтборТипыДокументов,
		КлючНастроек);
	
	ХозяйственныеОперацииИДокументы.Загрузить(ТаблицаЗначенийДоступно);
	
	ТаблицаЗначенийДоступно = ИнициализироватьХозяйственныеОперацииИДокументыАмортизации(
		ХозяйственныеОперацииИДокументыАмортизация.Выгрузить(),
		ОтборХозяйственныеОперацииАмортизация,
		ОтборТипыДокументовАмортизация,
		КлючНастроек);
	
	ХозяйственныеОперацииИДокументыАмортизация.Загрузить(ТаблицаЗначенийДоступно);
	
	ТаблицаЗначенийДоступно = ИнициализироватьХозяйственныеОперацииИДокументыПризнаниеРасходов(
		ХозяйственныеОперацииИДокументыПризнаниеРасходов.Выгрузить(),
		ОтборХозяйственныеОперацииПризнаниеРасходов,
		ОтборТипыДокументовПризнаниеРасходов,
		КлючНастроек,
		ОтборОрганизацииСПризнаниемРасходовПоИсследованиям);
	
	ХозяйственныеОперацииИДокументыПризнаниеРасходов.Загрузить(ТаблицаЗначенийДоступно);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыПриСоздании()
	
	Если Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
		Если Параметры.СтруктураБыстрогоОтбора.Свойство("ПолноеИмяДокумента") Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("ПолноеИмяДокумента", Параметры.СтруктураБыстрогоОтбора.ПолноеИмяДокумента);
			НайденныеСтроки = ХозяйственныеОперацииИДокументы.НайтиСтроки(Отбор);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.Отбор = Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	НастроитьФормуПоНастройкамХозяйственныхОперацийИДокументов();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоНастройкамХозяйственныхОперацийИДокументов()
	
	ОбщегоНазначенияУТ.ДанныеРабочегоМеста(
		ХозяйственныеОперацииИДокументы.Выгрузить(),
		КлючНазначенияФормыПоУмолчанию(),
		НСтр("ru = 'все';
			|en = 'all'"));
	НастроитьКнопкиУправленияДокументами();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКнопкиУправленияДокументами()
	
	СтруктураПараметров = ОбщегоНазначенияУТ.СтруктураПараметровНастройкиКнопокУправленияДокументами();
	СтруктураПараметров.Форма                                               = ЭтаФорма;
	СтруктураПараметров.ИмяГруппыСоздать                                    = "СписокГруппаСоздатьГенерируемая";
	СтруктураПараметров.ИмяГруппыСоздатьКонтекст                            = "СписокГруппаСоздатьГенерируемаяКонтекст";
	СтруктураПараметров.ИмяКнопкиСкопировать                                = "СписокСкопировать";
	СтруктураПараметров.ИмяКнопкиСкопироватьКонтекстноеМеню                 = "СписокСкопироватьКонтекст";
	СтруктураПараметров.ИмяКнопкиИзменить                                   = "СписокИзменить";
	СтруктураПараметров.ИмяКнопкиИзменитьКонтекстноеМеню                    = "СписокИзменитьКонтекст";
	СтруктураПараметров.ИмяКнопкиПровести                                   = "СписокПровести";
	СтруктураПараметров.ИмяКнопкиПровестиКонтекстноеМеню                    = "СписокПровестиКонтекст";
	СтруктураПараметров.ИмяКнопкиОтменаПроведения                           = "СписокОтменаПроведения";
	СтруктураПараметров.ИмяКнопкиОтменаПроведенияКонтекстноеМеню            = "СписокОтменаПроведенияКонтекст";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаления                  = "СписокУстановитьПометкуУдаления";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаленияКонтекстноеМеню   = "СписокУстановитьПометкуУдаленияКонтекст";
	ОбщегоНазначенияУТ.НастроитьКнопкиУправленияДокументами(СтруктураПараметров);

	//
	СтруктураПараметров = ОбщегоНазначенияУТ.СтруктураПараметровНастройкиКнопокУправленияДокументами();
	СтруктураПараметров.Форма                                               = ЭтаФорма;
	СтруктураПараметров.ИмяГруппыСоздать                                    = "СписокДетальноГруппаСоздатьГенерируемая";
	СтруктураПараметров.ИмяГруппыСоздатьКонтекст                            = "СписокДетальноГруппаСоздатьГенерируемаяКонтекст";
	СтруктураПараметров.ИмяКнопкиСкопировать                                = "СписокДетальноСкопировать";
	СтруктураПараметров.ИмяКнопкиСкопироватьКонтекстноеМеню                 = "СписокДетальноСкопироватьКонтекст";
	СтруктураПараметров.ИмяКнопкиИзменить                                   = "СписокДетальноИзменить";
	СтруктураПараметров.ИмяКнопкиИзменитьКонтекстноеМеню                    = "СписокДетальноИзменитьКонтекст";
	СтруктураПараметров.ИмяКнопкиПровести                                   = "СписокДетальноПровести";
	СтруктураПараметров.ИмяКнопкиПровестиКонтекстноеМеню                    = "СписокДетальноПровестиКонтекст";
	СтруктураПараметров.ИмяКнопкиОтменаПроведения                           = "СписокДетальноОтменаПроведения";
	СтруктураПараметров.ИмяКнопкиОтменаПроведенияКонтекстноеМеню            = "СписокДетальноОтменаПроведенияКонтекст";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаления                  = "СписокДетальноУстановитьПометкуУдаления";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаленияКонтекстноеМеню   = "СписокДетальноУстановитьПометкуУдаленияКонтекст";
	СтруктураПараметров.ПрефиксЭлементов                                    = "СписокДетально";
	ОбщегоНазначенияУТ.НастроитьКнопкиУправленияДокументами(СтруктураПараметров);
	
	//
	СтруктураПараметров = ОбщегоНазначенияУТ.СтруктураПараметровНастройкиКнопокУправленияДокументами();
	СтруктураПараметров.Форма                                               = ЭтаФорма;
	СтруктураПараметров.ИмяГруппыСоздать                                    = "СписокАмортизацияГруппаСоздатьГенерируемая";
	СтруктураПараметров.ИмяГруппыСоздатьКонтекст                            = "СписокАмортизацияГруппаСоздатьГенерируемаяКонтекст";
	СтруктураПараметров.ИмяКнопкиСкопировать                                = "СписокАмортизацияСкопировать";
	СтруктураПараметров.ИмяКнопкиСкопироватьКонтекстноеМеню                 = "СписокАмортизацияСкопироватьКонтекст";
	СтруктураПараметров.ИмяКнопкиИзменить                                   = "СписокАмортизацияИзменить";
	СтруктураПараметров.ИмяКнопкиИзменитьКонтекстноеМеню                    = "СписокАмортизацияИзменитьКонтекст";
	СтруктураПараметров.ИмяКнопкиПровести                                   = "СписокАмортизацияПровести";
	СтруктураПараметров.ИмяКнопкиПровестиКонтекстноеМеню                    = "СписокАмортизацияПровестиКонтекст";
	СтруктураПараметров.ИмяКнопкиОтменаПроведения                           = "СписокАмортизацияОтменаПроведения";
	СтруктураПараметров.ИмяКнопкиОтменаПроведенияКонтекстноеМеню            = "СписокАмортизацияОтменаПроведенияКонтекст";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаления                  = "СписокАмортизацияУстановитьПометкуУдаления";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаленияКонтекстноеМеню   = "СписокАмортизацияУстановитьПометкуУдаленияКонтекст";
	СтруктураПараметров.ПрефиксЭлементов                                    = "СписокАмортизация";
	СтруктураПараметров.ИмяТаблицыХозяйственныхОперацийИДокументов          = "ХозяйственныеОперацииИДокументыАмортизация";
	ОбщегоНазначенияУТ.НастроитьКнопкиУправленияДокументами(СтруктураПараметров);
	
	СтруктураПараметров = ОбщегоНазначенияУТ.СтруктураПараметровНастройкиКнопокУправленияДокументами();
	СтруктураПараметров.Форма                                               = ЭтаФорма;
	СтруктураПараметров.ИмяГруппыСоздать                                    = "СписокПризнаниеРасходовГруппаСоздатьГенерируемая";
	СтруктураПараметров.ИмяГруппыСоздатьКонтекст                            = "СписокПризнаниеРасходовГруппаСоздатьГенерируемаяКонтекст";
	СтруктураПараметров.ИмяКнопкиСкопировать                                = "СписокПризнаниеРасходовСкопировать";
	СтруктураПараметров.ИмяКнопкиСкопироватьКонтекстноеМеню                 = "СписокПризнаниеРасходовСкопироватьКонтекст";
	СтруктураПараметров.ИмяКнопкиИзменить                                   = "СписокПризнаниеРасходовИзменить";
	СтруктураПараметров.ИмяКнопкиИзменитьКонтекстноеМеню                    = "СписокПризнаниеРасходовИзменитьКонтекст";
	СтруктураПараметров.ИмяКнопкиПровести                                   = "СписокПризнаниеРасходовПровести";
	СтруктураПараметров.ИмяКнопкиПровестиКонтекстноеМеню                    = "СписокПризнаниеРасходовПровестиКонтекст";
	СтруктураПараметров.ИмяКнопкиОтменаПроведения                           = "СписокПризнаниеРасходовОтменаПроведения";
	СтруктураПараметров.ИмяКнопкиОтменаПроведенияКонтекстноеМеню            = "СписокПризнаниеРасходовОтменаПроведенияКонтекст";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаления                  = "СписокПризнаниеРасходовУстановитьПометкуУдаления";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаленияКонтекстноеМеню   = "СписокПризнаниеРасходовУстановитьПометкуУдаленияКонтекст";
	СтруктураПараметров.ПрефиксЭлементов                                    = "СписокПризнаниеРасходов";
	СтруктураПараметров.ИмяТаблицыХозяйственныхОперацийИДокументов          = "ХозяйственныеОперацииИДокументыПризнаниеРасходов";
	
	ОбщегоНазначенияУТ.НастроитьКнопкиУправленияДокументами(СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыПоХозОперациямИДокументам(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		АдресДоступныхХозяйственныхОперацийИДокументов = ВыбранноеЗначение;
		ОтборОперацияТипОбработкаВыбораСервер(АдресДоступныхХозяйственныхОперацийИДокументов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтборОперацияТипОбработкаВыбораСервер(АдресХозяйственныхОперацийИДокументов)
	
	ТЗХозОперацииИТипыДокументов = ПолучитьИзВременногоХранилища(АдресХозяйственныхОперацийИДокументов);
	ХозяйственныеОперацииИДокументы.Загрузить(ТЗХозОперацииИТипыДокументов);
	
	ОбщегоНазначенияУТ.ЗаполнитьОтборыПоТаблицеХозОперацийИТиповДокументов(
		ТЗХозОперацииИТипыДокументов, ОтборХозяйственныеОперации, ОтборТипыДокументов);
	
	НастроитьФормуПоНастройкамХозяйственныхОперацийИДокументов();
	
	ПриИзмененииОтбора();

	ОбщегоНазначенияУТ.СформироватьНадписьОтбор(
		ИнформационнаяНадписьОтбор, ХозяйственныеОперацииИДокументы, ОтборТипыДокументов, ОтборХозяйственныеОперации);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыДинамическогоСписка()
	
	ОтборТипыДокументовДляОтбора = ДополнитьТипыДокументовДляОтбора(ОтборТипыДокументов);
	ОтборХозяйственныеОперацииДляОтбора = ДополнитьХозОперацииДляОтбора(ОтборХозяйственныеОперации);
	
	#Область Список
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ХозяйственнаяОперация",
		ОтборХозяйственныеОперацииДляОтбора,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ТипСсылки",
		ОтборТипыДокументовДляОтбора,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Организация",
		ОтборОрганизация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборОрганизация));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ДополнительнаяЗапись",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		НЕ ЗначениеЗаполнено(ОтборОрганизация));
		
	Список.Параметры.УстановитьЗначениеПараметра("НачалоПериода", СписокИнтервал.ДатаНачала);
	Список.Параметры.УстановитьЗначениеПараметра("КонецПериода", 
		?(ЗначениеЗаполнено(СписокИнтервал.ДатаОкончания),
			КонецДня(СписокИнтервал.ДатаОкончания),
			СписокИнтервал.ДатаОкончания));
			
	Элементы.СписокУстановитьИнтервал.Пометка = 
		ЗначениеЗаполнено(СписокИнтервал.ДатаНачала) ИЛИ ЗначениеЗаполнено(СписокИнтервал.ДатаОкончания);
	#КонецОбласти
	
	#Область СписокДетально
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДетально,
		"ХозяйственнаяОперация",
		ОтборХозяйственныеОперацииДляОтбора,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДетально,
		"ТипСсылки",
		ОтборТипыДокументовДляОтбора,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДетально,
		"Организация",
		ОтборОрганизация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборОрганизация));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДетально,
		"ДополнительнаяЗапись",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		НЕ ЗначениеЗаполнено(ОтборОрганизация));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДетально,
		"НематериальныйАктив",
		ОтборНематериальныйАктив,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборНематериальныйАктив));
		
	СписокДетально.Параметры.УстановитьЗначениеПараметра("НачалоПериода", СписокДетальноИнтервал.ДатаНачала);
	СписокДетально.Параметры.УстановитьЗначениеПараметра("КонецПериода", 
		?(ЗначениеЗаполнено(СписокДетальноИнтервал.ДатаОкончания),
			КонецДня(СписокДетальноИнтервал.ДатаОкончания),
			СписокДетальноИнтервал.ДатаОкончания));
			
	Элементы.СписокДетальноУстановитьИнтервал.Пометка = 
		ЗначениеЗаполнено(СписокДетальноИнтервал.ДатаНачала) ИЛИ ЗначениеЗаполнено(СписокДетальноИнтервал.ДатаОкончания);
	#КонецОбласти
	
	#Область СписокАмортизация
	ОтборТипыДокументовДляОтбора = ДополнитьТипыДокументовДляОтбора(ОтборТипыДокументовАмортизация);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокАмортизация,
		"ТипСсылки",
		ОтборТипыДокументовДляОтбора,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокАмортизация,
		"Организация",
		ОтборОрганизация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборОрганизация));
		
	СписокАмортизация.Параметры.УстановитьЗначениеПараметра("НематериальныйАктив", ОтборНематериальныйАктив);
	СписокАмортизация.Параметры.УстановитьЗначениеПараметра("БезОтбораПоНематериальномуАктиву", Не ЗначениеЗаполнено(ОтборНематериальныйАктив));
	
	СписокАмортизация.Параметры.УстановитьЗначениеПараметра("НачалоПериода", СписокАмортизацияИнтервал.ДатаНачала);
	СписокАмортизация.Параметры.УстановитьЗначениеПараметра("КонецПериода", 
		?(ЗначениеЗаполнено(СписокАмортизацияИнтервал.ДатаОкончания),
			КонецДня(СписокАмортизацияИнтервал.ДатаОкончания),
			СписокАмортизацияИнтервал.ДатаОкончания));
			
	Элементы.СписокАмортизацияУстановитьИнтервал.Пометка = 
		ЗначениеЗаполнено(СписокАмортизацияИнтервал.ДатаНачала) ИЛИ ЗначениеЗаполнено(СписокАмортизацияИнтервал.ДатаОкончания);
	#КонецОбласти
	
	#Область СписокПризнаниеРасходовПоИсследованиямИРазработкам
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокПризнаниеРасходовПоИсследованиямИРазработкам,
		"ТипСсылки",
		ОтборТипыДокументовПризнаниеРасходов,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокПризнаниеРасходовПоИсследованиямИРазработкам,
		"Организация",
		ОтборОрганизация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборОрганизация));
		
	СписокПризнаниеРасходовПоИсследованиямИРазработкам.Параметры.УстановитьЗначениеПараметра("НачалоПериода", СписокПризнаниеРасходовИнтервал.ДатаНачала);
	СписокПризнаниеРасходовПоИсследованиямИРазработкам.Параметры.УстановитьЗначениеПараметра("КонецПериода", 
		?(ЗначениеЗаполнено(СписокПризнаниеРасходовИнтервал.ДатаОкончания),
			КонецДня(СписокПризнаниеРасходовИнтервал.ДатаОкончания),
			СписокПризнаниеРасходовИнтервал.ДатаОкончания));
			
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПризнаниеРасходовПоИсследованиямИРазработкам,
			"ОтборПоТемеЭтапу",
			ОтборТемаЭтап,
			Не ОтборТемаЭтап.Пустая());
	
	Элементы.СписокПризнаниеРасходовУстановитьИнтервал.Пометка = 
		ЗначениеЗаполнено(СписокПризнаниеРасходовИнтервал.ДатаНачала) ИЛИ ЗначениеЗаполнено(СписокПризнаниеРасходовИнтервал.ДатаОкончания);
	
	Если Элементы.Найти("СписокПризнаниеРасходовСоздать_ПризнаниеРасходовПоИсследованиям_ПризнаниеРасходовПоИсследованиямИРазработкам")
		<> Неопределено Тогда
			
		Если ОтборОрганизация.Пустая() Тогда
			Элементы.СписокПризнаниеРасходовСоздать_ПризнаниеРасходовПоИсследованиям_ПризнаниеРасходовПоИсследованиямИРазработкам.Видимость
				= ОтборОрганизацииСПризнаниемРасходовПоИсследованиям.Количество() > 0;
		Иначе
			Элементы.СписокПризнаниеРасходовСоздать_ПризнаниеРасходовПоИсследованиям_ПризнаниеРасходовПоИсследованиямИРазработкам.Видимость
				= ОтборОрганизацииСПризнаниемРасходовПоИсследованиям.НайтиПоЗначению(ОтборОрганизация) <> Неопределено;
		КонецЕсли;
	КонецЕсли;

	#КонецОбласти

КонецПроцедуры

&НаСервере
Функция ДополнитьТипыДокументовДляОтбора(ОтборТипыДокументовСписка)
	
	Если СоответствиеДокументов.Количество() = 0 Тогда
		Возврат ОтборТипыДокументовСписка;
	КонецЕсли;
	
	ОтборТипыДокументовКопия = ОтборТипыДокументовСписка.Скопировать();
	
	Для каждого ЭлементКоллекции Из ОтборТипыДокументовСписка Цикл
		СтруктураПоиска = Новый Структура("НовыйДокумент", ЭлементКоллекции.Значение);
		СписокСтрок = СоответствиеДокументов.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеСтроки Из СписокСтрок Цикл
			ОтборТипыДокументовКопия.Добавить(ДанныеСтроки.СтарыйДокумент);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ОтборТипыДокументовКопия;
	
КонецФункции

&НаСервере
Функция ДополнитьХозОперацииДляОтбора(ОтборХозяйственныеОперацииСписка)
	
	ОтборХозяйственныеОперацииКопия = ОтборХозяйственныеОперацииСписка.Скопировать();
	
	Для каждого ЭлементКоллекции Из ОтборХозяйственныеОперацииСписка Цикл
		Если ЭлементКоллекции.Значение = Перечисления.ХозяйственныеОперации.ПринятиеКУчетуНМА Тогда
			ОтборХозяйственныеОперацииКопия.Добавить(Перечисления.ХозяйственныеОперации.ВводОстатковНМАиРасходовНаНИОКР);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОтборХозяйственныеОперацииКопия;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючНазначенияФормыПоУмолчанию()
	
	Возврат "ДокументыНМА";
	
КонецФункции

&НаСервере
Функция ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы()
	
	Возврат ПоместитьВоВременноеХранилище(ХозяйственныеОперацииИДокументы.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийСписок(Форма)

	Если Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница = Форма.Элементы.СтраницаДокументыДетально Тогда
		Возврат Форма.Элементы.СписокДетально;
	ИначеЕсли Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница = Форма.Элементы.СтраницаАмортизация Тогда
		Возврат Форма.Элементы.СписокАмортизация;
	ИначеЕсли Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница = Форма.Элементы.СтраницаПризнаниеРасходовПоИсследованиямИРазработкам Тогда
		Возврат Форма.Элементы.СписокПризнаниеРасходовПоИсследованиямИРазработкам;
	Иначе
		Возврат Форма.Элементы.Список;
	КонецЕсли; 

КонецФункции

&НаСервере
Процедура ПриИзмененииОтбора()
	
	СохранитьНастройки();
	
	УстановитьОтборыДинамическогоСписка();
	
	ОбновитьГиперссылкуКОформлению();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ЖурналДокументовНМА2_4.Форма.ДокументыПоНМА", КлючНазначенияИспользования);
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
	
		СписокИнтервал = Настройки.СписокИнтервал;
		СписокДетальноИнтервал = Настройки.СписокДетальноИнтервал;
		СписокАмортизацияИнтервал = Настройки.СписокАмортизацияИнтервал;
		ОтборОрганизация = Настройки.ОтборОрганизация;
		ОтборНематериальныйАктив = Настройки.ОтборНематериальныйАктив;
		
		Настройки.Свойство("ОтборХозяйственныеОперации", ОтборХозяйственныеОперации);
		Настройки.Свойство("ОтборТипыДокументов", ОтборТипыДокументов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	Если ФормыОткрытаПоГиперссылке Тогда
		Возврат;
	КонецЕсли;
	
	ИменаСохраняемыхРеквизитов =
		"СписокИнтервал,СписокДетальноИнтервал,СписокАмортизацияИнтервал,СписокПризнаниеРасходовИнтервал,
		|ОтборОрганизация,
		|ОтборНематериальныйАктив,
		|ОтборХозяйственныеОперации,
		|ОтборТипыДокументов";
	
	Настройки = Новый Структура(ИменаСохраняемыхРеквизитов);
	ЗаполнитьЗначенияСвойств(Настройки, ЭтаФорма);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ЖурналДокументовНМА2_4.Форма.ДокументыПоНМА", КлючНазначенияИспользования, Настройки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнициализироватьХозяйственныеОперацииИДокументы(ХозяйственныеОперацииИДокументы, ОтборХозяйственныеОперации, ОтборТипыДокументов, КлючНазначенияИспользования, ДокументыКОформлению = Ложь)
	
	ВнеоборотныеАктивыСлужебный.ИнициализироватьХозяйственныеОперацииИДокументыВнеоборотныхАктивов(ХозяйственныеОперацииИДокументы);
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ПринятиеКУчетуНМА;
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.ПринятиеКУчетуНМА2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = "ПринятиеКУчетуНМА";
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Принятие к учету НМА';
												|en = 'Intangible assets — Initial recognition'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ПеремещениеНМА;
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.ПеремещениеНМА2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = "ПеремещениеНМА";
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Перемещение НМА';
												|en = 'Transfer intangible assets'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.СписаниеНМА;
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.СписаниеНМА2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = "СписаниеНМА";
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Списание НМА';
												|en = 'Dispose intangible assets'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.СписаниеНМАЧастичное;
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.СписаниеНМА2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = "СписаниеНМА";
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Частичное списание НМА';
												|en = 'Partial intangible assets disposal'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ПодготовкаКПередачеНМА;
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.ПодготовкаКПередачеНМА2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = "ПодготовкаКПередачеНМА";
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Подготовка к передаче НМА';
												|en = 'Retire intangible assets'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ИзменениеПараметровНМА;
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.ИзменениеПараметровНМА2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = "ИзменениеПараметровНМА";
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Изменение параметров НМА';
												|en = 'Adjust intangible asset financial details'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ПереоценкаНМА;
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.ПереоценкаНМА2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = "ПереоценкаНМА2_4";
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Переоценка НМА';
												|en = 'Revaluate intangible assets'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ВыработкаНМА;
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.ВыработкаНМА.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = "ВыработкаНМА";
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Выработка НМА';
												|en = 'Intangible assets — Operating time'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.КорректировкаСтоимостиИАмортизацииНМА;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.КорректировкаСтоимостиИАмортизацииНМА.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "КорректировкаСтоимостиИАмортизацииНМА";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	
	#Область ВводОстатков
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковНМАиРасходовНаНИОКР;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ВводОстатковВнеоборотныхАктивов";
	Строка.ДобавитьКнопкуСоздать        = Ложь;
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковВложенийВоВнеоборотныеАктивы;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ВводОстатковВнеоборотныхАктивов";
	Строка.ДобавитьКнопкуСоздать        = Ложь;
	#КонецОбласти
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗавершениеЭтаповИсследованийИРазработок;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПризнаниеРасходовПоИсследованиямИРазработкам.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ПризнаниеРасходовПоИсследованиямИРазработкам";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Признание расходов по исследованиям и разработкам';
												|en = 'Incur R&D expenses'");
	Строка.ДобавитьКнопкуСоздать        = Истина;

	
	Если КлючНазначенияИспользования = "ДокументыНМА" Тогда
		КлючНастроек = "";
	Иначе
		КлючНастроек = КлючНазначенияИспользования;
	КонецЕсли;
	
	ВнеоборотныеАктивыЛокализация.ДополнитьХозяйственныеОперацииИДокументыНМА(ХозяйственныеОперацииИДокументы);
	
	ТаблицаЗначенийДоступно = ОбщегоНазначенияУТ.ДоступныеХозяйственныеОперацииИДокументы(
		ХозяйственныеОперацииИДокументы,
		ОтборХозяйственныеОперации,
		ОтборТипыДокументов,
		КлючНастроек);
	
	Возврат ТаблицаЗначенийДоступно;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнициализироватьХозяйственныеОперацииИДокументыАмортизации(ХозяйственныеОперацииИДокументы, ОтборХозяйственныеОперации, ОтборТипыДокументов, КлючНазначенияИспользования)
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.АмортизацияНМА;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.АмортизацияНМА2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "АмортизацияНМА";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Амортизация';
												|en = 'Amortization'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Если КлючНазначенияИспользования = КлючНазначенияФормыПоУмолчанию() Тогда
		КлючНастроек = "";
	Иначе
		КлючНастроек = КлючНазначенияИспользования;
	КонецЕсли;
	
	ТаблицаЗначенийДоступно = ОбщегоНазначенияУТ.ДоступныеХозяйственныеОперацииИДокументы(
								ХозяйственныеОперацииИДокументы, 
								ОтборХозяйственныеОперации, 
								ОтборТипыДокументов, 
								КлючНастроек);
								
	Возврат ТаблицаЗначенийДоступно;
	
КонецФункции 

&НаСервереБезКонтекста
Функция ИнициализироватьХозяйственныеОперацииИДокументыПризнаниеРасходов(ХозяйственныеОперацииИДокументы, ОтборХозяйственныеОперации, ОтборТипыДокументов, КлючНазначенияИспользования, ОтборОрганизацииСПризнаниемРасходовПоИсследованиям)
	
	ОрганизацииСПризнаниемИсследований = УчетРасходовПоИсследованиямИРазработкам.НастройкиПризнанияРасходовПоИсследованийОрганизаций(
		ТекущаяДатаСеанса());
	ОтборОрганизацииСПризнаниемРасходовПоИсследованиям.ЗагрузитьЗначения(
			ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОрганизацииСПризнаниемИсследований.ВыгрузитьКолонку("Организация")));
			
	Если ОтборОрганизацииСПризнаниемРасходовПоИсследованиям.Количество()>0 Тогда
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПризнаниеРасходовПоИсследованиям;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПризнаниеРасходовПоИсследованиямИРазработкам.ПолноеИмя();
		Строка.КлючНазначенияИспользования 	= "ПризнаниеРасходовПоИсследованиямИРазработкам";
		Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Признание расходов по исследованиям и разработкам';
													|en = 'Incur R&D expenses'");
		Строка.ДобавитьКнопкуСоздать        = Истина;
	КонецЕсли;

	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗавершениеЭтаповИсследованийИРазработок;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПризнаниеРасходовПоИсследованиямИРазработкам.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ПризнаниеРасходовПоИсследованиямИРазработкам";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Признание расходов по исследованиям и разработкам';
												|en = 'Incur R&D expenses'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	Строка.МенеджерРасчетаГиперссылкиКОформлению = "Документ.ПризнаниеРасходовПоИсследованиямИРазработкам";
	
	Если КлючНазначенияИспользования = КлючНазначенияФормыПоУмолчанию() Тогда
		КлючНастроек = "";
	Иначе
		КлючНастроек = КлючНазначенияИспользования;
	КонецЕсли;
	
	ТаблицаЗначенийДоступно = ОбщегоНазначенияУТ.ДоступныеХозяйственныеОперацииИДокументы(
								ХозяйственныеОперацииИДокументы, 
								ОтборХозяйственныеОперации, 
								ОтборТипыДокументов, 
								КлючНастроек);
								
	Возврат ТаблицаЗначенийДоступно;
	
КонецФункции 

#Область ШтрихкодыИТорговоеОборудование

&НаСервере
Функция ДанныеПоШтрихКодуПечатнойФормы(Штрихкод)
	
	ДанныеПоШтрихКоду = ОбщегоНазначенияУТ.ДанныеПоШтрихКодуПечатнойФормы(Штрихкод, ХозяйственныеОперацииИДокументы.Выгрузить());
	
	Возврат ДанныеПоШтрихКоду;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	Состояние(НСтр("ru = 'Выполняется поиск документа по штрихкоду...';
					|en = 'Searching for the document by barcode...'"));
	ДанныеПоШтрихКоду = ДанныеПоШтрихКодуПечатнойФормы(Данные.Штрихкод);
	ОбщегоНазначенияУТКлиент.ОбработатьШтрихкоды(Данные.Штрихкод, ДанныеПоШтрихКоду, ЭтаФорма, "Список");
	
КонецПроцедуры

#КонецОбласти

#Область ГиперссылкаКОформлению

&НаСервере
Процедура ОбновитьГиперссылкуКОформлению()
	
	ТекстИдетОбновлениеДанных = НСтр("ru = 'К оформлению: <идет обновление данных>';
									|en = 'To register: <updating data>'");
	КОформлению = Новый ФорматированнаяСтрока(ТекстИдетОбновлениеДанных);
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("Организация", ОтборОрганизация);
	ПараметрыФормирования.Вставить("ЭтоРасчетГиперссылки", Истина);
	ПараметрыФормирования.Вставить("ТолькоОформлениеДокументов", Истина);
	ТекущаяДата = ТекущаяДатаСеанса();
	ПараметрыФормирования.Вставить("НачалоПериода", ?(ЗначениеЗаполнено(СписокПризнаниеРасходовИнтервал.ДатаОкончания), НачалоМесяца(СписокПризнаниеРасходовИнтервал.ДатаОкончания), НачалоМесяца(ТекущаяДата)));
	ПараметрыФормирования.Вставить("КонецПериода", ?(ЗначениеЗаполнено(СписокПризнаниеРасходовИнтервал.ДатаОкончания), СписокПризнаниеРасходовИнтервал.ДатаОкончания, КонецМесяца(ТекущаяДата)));
	ПараметрыФормирования.Вставить("КраткоеПредставление", Истина);
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ХозяйственныеОперацииИДокументыПризнаниеРасходов.Выгрузить());
	ПараметрыЗадания.Добавить(ПараметрыФормирования);

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	РезультатРасчета = ДлительныеОперации.ВыполнитьВФоне("Обработки.ЖурналДокументовНМА2_4.СформироватьГиперссылкуКОформлениюФоновоеЗадание",
															ПараметрыЗадания,
															ПараметрыВыполнения);
	
	АдресХранилища			= РезультатРасчета.АдресРезультата;
	ИдентификаторЗадания	= РезультатРасчета.ИдентификаторЗадания;
	
	Если РезультатРасчета.Статус = "Выполнено" Тогда
	
		КОформлению = ОбновитьГиперссылкуКОформлениюЗавершение(АдресХранилища);
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьГиперссылкуКОформлениюЗавершение(АдресХранилища)
	
	КОформлению = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если Не ЗначениеЗаполнено(КОформлению) Тогда
		ТекстИдетОбновлениеДанных = НСтр("ru = 'К оформлению: нет';
										|en = 'To register: no'");
		КОформлению = Новый ФорматированнаяСтрока(ТекстИдетОбновлениеДанных);
	КонецЕсли;
	
	Возврат КОформлению;
	
КонецФункции

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияГиперссылкиКОформлению()
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
	
		КОформлению = ОбновитьГиперссылкуКОформлениюЗавершение(АдресХранилища);
		
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура УстановитьИнтервалЗавершениеНаСервере()
	
	ОбновитьГиперссылкуКОформлению();
	
	УстановитьОтборыДинамическогоСписка();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти