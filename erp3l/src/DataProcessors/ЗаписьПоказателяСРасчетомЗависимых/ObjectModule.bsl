#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Таблицы значений, хранящие текущие значения показателей отчетов
Перем мПоказатели 			Экспорт;
Перем мПоказателиРаскрытия 	Экспорт;
Перем Показатели 			Экспорт;

Перем мСоответствиеДляПоискаПоКоду Экспорт; // Соответствие, предназначенное для поиска строки таблицы мПоказатели по коду
Перем мСоответствиеДляПоискаПоСсылке Экспорт;

// Таблицы значений, которые хранят изменения, вносимые в таблицы мПоказатели и мПоказателиРаскрытия
Перем ЛогИзмененийПоказателей            Экспорт;
Перем ЛогИзмененийРаскрытийПоказателей   Экспорт;

Перем ТабНомеровАналитик Экспорт;

Перем Параметры Экспорт;

Перем ПустоеЗначениеПоТипу Экспорт;
Перем мТекущаяВалюта Экспорт;
Перем мПоказателиДляКурсовВалют Экспорт;
Перем мВалютыЗаписей Экспорт; // В случае работы с версиями - массив валют, в которых уже есть записи в регистре
Перем мНеЧисловыеПоказатели Экспорт; // Массив показателей, имеющих тип отличный от типа Число
Перем мЧисловыеПоказатели Экспорт; // Структура, содержащее показатели с типом значения "Число"

Перем мСоответствиеНаборовЗаписей; 	// Соответстие, ключом которого является имя таблицы регистра, а значением - структура, содержащая
// соответствующий набор записей и их счетчик

Перем мСоотвествиеДляПересчетаКурсов Экспорт; // Структура, ключом которой является ссылка на показатель, а значением - структура, 
Перем мОперанды Экспорт; // Таблица операндов, используемых при заполнении отчета
Перем мТаблицаВидовАналитикВидаОтчета Экспорт;
Перем мТабПоказателиЗапросы Экспорт; // Таблица операндов, подготовленная к вычислению.
Перем мТабРасшифровкиПоказателей Экспорт; // Таблица содержит значения показателей отчетов, на основании которых формировался результирующий отчет.
Перем мСоответствиеОперандовИПоказателейОтбора Экспорт; // Таблица соответствия показателей и показателей отбора при запросе к данным других отчетов
Перем мЗначенияОперандов Экспорт; // Таблица, содержащая значения операндов показателей с раскрытием
Перем ЕстьОбращениеКВИБ Экспорт; // Булев признак того, что для заполнения отчета будут использоваться данные ВИБ
Перем База Экспорт; // Соединение с внешней ИБ
Перем мПустойВидАналитики Экспорт;
Перем ТихийРежим Экспорт;
Перем мУдалятьДвижения;
Перем СписокВерсий Экспорт; // Список версий, включаемых в отчет

Перем ИзмененНечисловойПоказатель Экспорт; // При работе в режиме версионирования, если был изменен нечисловой показатель, создается версия всех значений нечисловых показателей.
Перем ИзмененКлючевойРеквизит Экспорт; 	// При работе в режиме версионирования, если был изменен ключевой реквизит (Организация, Период, аналитики на уровне отчета и т.д.) очищаются все версии и создается новая,
//	аналогично работе без режима версионирования.
Перем ТекущийЭлементОписаниеВерсии Экспорт; // Хранит ссылку на последнюю текущую версию объекта.

// Переменные для работы с пересчетом показателей по курсу
Перем КэшТаблицыКурсов Экспорт; // Хранит таблицу курсов.
Перем КэшДатРасчетаПоказателей Экспорт; // Хранит соответствие даты расчета показателя.

Перем ДанныеРаскрытияИнициализированы Экспорт;
Перем СписокИспользуемыхВерсий Экспорт; // Список версий, используемых для инициализации контекста отчета

Перем мТаблицаПересчета Экспорт; // Таблица значений, определяющее пути пересчета показателей при ручном изменении какого - то.
Перем мПоказателиОбязательныеКПересчету Экспорт;  // Массив показателей, которые должны пересчитываться всегда при изменении какого  - либо значения
Перем ПоказателиКПересчету Экспорт; // Массив кодов показателей для выборочного пересчета

// Переменные, управляющие процессами при записи документа
Перем ПроверкаПриЗаписи Экспорт; // Переменная, определяющая необходимость проверки возможности записи документа

Перем НомерТекущейОперации               Экспорт; // Хранит номер текущей операции.

Перем МеткаВерсии       Экспорт;
Перем КомментарийВерсии Экспорт;

Перем ПересчетВалюты Экспорт; // Признак того, что производится пересчет значений документа. Не осуществляется импорт из ВИБ.

Перем Вариант Экспорт; // Вариант версии.

Перем мНеИнициироватьВнутриГрупповыеОперации Экспорт; // Признак того, что отчету не надо выверять соответствие показателей ВГО.

Перем ТаблицаВыявленныхОшибок Экспорт; // Таблица, содержащая лог ошибок, возникших при заполнении/вычислении отчета
Перем ДанныеРасшифровкиСчитаны Экспорт;

//////////////////////////////////////////////////////////////////////////////////////////////
// Переменные для обновления отображения
//

Перем мТаблицаАналитикВидаОтчета Экспорт;
Перем МаксАналитикПоказателя Экспорт;
Перем МаксАналитикОтчета Экспорт;
Перем ПоказателиСРаскрытием Экспорт;

//////////////////////////////////////////////////////////////////////////////////////////////
// Переменные для обработки раскрытий
//

///////////////////////////////////////////////////////////////////////////////////////
// Данные контекста отчета                      

Перем ПроизвольныйКод Экспорт;
Перем ПроцедураРасчета Экспорт;

Перем КэшИспользуемыхПравил;
Перем КэшДанныхРасчета;
Перем КэшДанныхПоказателя;
Перем КэшЗависимыхПоказателей;

Перем ЕстьЗаблокированныеПоказатели Экспорт;
Перем ОбработанныеОперанды Экспорт;

Перем мКопирование Экспорт;
Перем ПериодичностьБюджетирования;
Перем ПересчитатьПоказателиЭффективностиПроектов;
Перем ТаблицаПроектовКПересчету;

Перем ЗависимыеПоказатели;
Перем ДеревоПересчета;
Перем СоответствиеСтрокПересчета;

Перем КэшВерсийПоказателей;
Перем ПодставлятьЗначенияПоУмолчаниюВместоПустых Экспорт;

Перем КэшКурсовВалют;
Перем ВидыКурсов;
Перем ЧислоСтрокРасчета;

Перем КэшОтносительныхПериодов;
Перем КэшПериодовГода;

Перем ПоследнийРедактировавший;

Перем ФоновыйПересчетЗависимыхПоказателей;

Перем РежимКорректировки Экспорт;
Перем ЛогИзмененныхПоказателейСТ Экспорт;

Перем ТаблицаСобытийЗагрузкиПериоды Экспорт;

// Таблицы значений, хранящие корректировки значений показателей отчетов, если используется соответствующий режим работы
Перем мКорректировкиПоказателей Экспорт;
Перем мКорректировкиПоказателейРаскрытия Экспорт;
Перем КорректировкиПоказателей Экспорт;
Перем мСоответствиеДляПоискаПоСсылкеКорр Экспорт;

Перем ОписанияВерсийКУдалению;
Перем МассивПересчитанныхПоказателей Экспорт;

Перем ДатаИзмененияMs;

Функция ЗаполнитьТаблицуПоказателей(ОбъектРасчета,СписокВерсий, ВалютаЗаполнения,ПараметрыОтбораПоказателей) Экспорт
	
	Если ВалютаЗаполнения = Неопределено Тогда
		ВалютаЗаполнения = ОбъектРасчета.ОсновнаяВалюта;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыОтбораПоказателей)=Тип("Массив") Тогда
		
		ДанныеПоказателя=Неопределено;
		
	Иначе
		
		ДанныеПоказателя=КэшДанныхПоказателя[ПараметрыОтбораПоказателей];
		
	КонецЕсли; 
		
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",ОбъектРасчета.ВидОтчета);
	ДанныеЗапроса.Вставить("СписокВерсий",СписокВерсий);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",Истина);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",Ложь);
	ДанныеЗапроса.Вставить("АналитикВидаОтчета",ОбъектРасчета.МаксАналитикОтчета);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Если ДанныеПоказателя=Неопределено Тогда // Получаем как данные показателя, так и его значение
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВнПоказатели.*,
		|	ВложенныйЗапрос.Значение
		|ИЗ
		|	(ВЫБРАТЬ 
		|	ПоказателиОтчетов.Ссылка КАК Ссылка,
		|	ПоказателиОтчетов.Код КАК Код,
		|	ПоказателиОтчетов.Наименование КАК Наименование,
		|	ПоказателиОтчетов.ЧисловойПоказатель КАК ЧисловойПоказатель,
		|	ПоказателиОтчетов.НеФинансовый КАК НеФинансовый,
		|	ПоказателиОтчетов.Проверочный КАК Проверочный,
		|	ПоказателиОтчетов.ТипЗначения КАК ТипЗначения,
		|	ЕстьNULL(ПоказателиОтчетов.ГруппаРаскрытия.Валютная,Ложь) КАК Валютный,
		|	ПоказателиОтчетов.ПересчитыватьВалютнуюСумму КАК ПересчитыватьВалютнуюСумму,
		|	ПоказателиОтчетов.ВидИтога КАК ВидИтога,
		|	ПоказателиОтчетов.ВидИтогаПоСчету КАК ВидИтогаПоСчету,
		|	ПоказателиОтчетов.ДляОтраженияКурсовыхРазниц КАК ДляОтраженияКурсовыхРазниц,
		|	ПоказателиОтчетов.СвязанныйПоказатель КАК СвязанныйПоказатель,
		|	ВЫБОР КОГДА ПоказателиОтчетов.ВидКурса=ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.ПустаяСсылка) Тогда ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.СреднийКурсЗаПериод) ИНАЧЕ ПоказателиОтчетов.ВидКурса КОНЕЦ КАК ВидКурса, 
		|	ПоказателиОтчетов.НеМасштабируется КАК НеМасштабируется,
		|	ПоказателиОтчетов.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ПоказателиОтчетов.СтатьяДоходовИРасходов КАК СтатьяДоходовИРасходов,
		|	ПоказателиОтчетов.СтатьяДвиженияРесурсов КАК СтатьяДвиженияРесурсов,
		|	ПоказателиОтчетов.РазделениеПоПроектам КАК РазделениеПоПроектам,
		|	ПоказателиОтчетов.Предназначение КАК Предназначение,
		//|	ПоказателиОтчетов.КонтролироватьЛимиты КАК КонтролироватьЛимиты,
		|	ПоказателиОтчетов.ПриходРасход КАК ПриходРасход,
		|	ПоказателиОтчетов.ГруппаРаскрытия КАК ГруппаРаскрытия,";
		
		Для Инд = МаксАналитикОтчета+1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			Запрос.Текст = Запрос.Текст + "
			|	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики" + Инд + " КАК ВидАналитики" + Инд + ", ";
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст + "
		|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.ЧислоАналитик,0) КАК ЧислоАналитикГруппыРаскрытия,
		|	ПоказателиОтчетов.Строка КАК Строка ИЗ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов";
		
		Если ТипЗнч(ПараметрыОтбораПоказателей)=Тип("Массив") Тогда // первичная запись массива показателей
			
			Запрос.Текст = Запрос.Текст + "
			|	ГДЕ ПоказателиОтчетов.Ссылка В (&МассивПоказателей)";
			Запрос.УстановитьПараметр("МассивПоказателей",ПараметрыОтбораПоказателей);
			
			ОтборПоказателей=Новый Соответствие;
			ОтборПоказателей.Вставить("####.Ссылка В (&МассивПоказателей)",Новый Структура("МассивПоказателей",ПараметрыОтбораПоказателей));
			ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
			
		Иначе
			
			Запрос.Текст = Запрос.Текст + "
			|	ГДЕ ПоказателиОтчетов.Ссылка=&ПоказательОтчета";
			Запрос.УстановитьПараметр("ПоказательОтчета",ПараметрыОтбораПоказателей);
			
			ОтборПоказателей=Новый Соответствие;
			ОтборПоказателей.Вставить("####.Ссылка = &ПоказательОтчета",Новый Структура("ПоказательОтчета",ПараметрыОтбораПоказателей));
			ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);

			
		КонецЕсли; 
		
		Запрос.Текст = Запрос.Текст + ") КАК ВнПоказатели
		|	ЛЕВОЕ СОЕДИНЕНИЕ";
		
		Если ОбъектРасчета.Свойство("СохранятьИсториюИзменений") 
			ИЛИ ОбъектРасчета.ВидОтчета.СохранятьИсториюИзменений 
			ИЛИ ОбъектРасчета.РежимКорректировки Тогда
			
			СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
			
			Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда
				
				ТекстВложенногоЗапроса="ВЫБРАТЬ
				|	ЗНАЧЕНИЕ(Справочник.ПоказателиОтчетов.ПустаяСсылка) КАК Показатель,
				|	0 КАК Значение";
				
			Иначе
				
				ТекстВложенногоЗапроса=СтруктураЗапроса.ТекстЗапроса;
				
				Если СтруктураЗапроса.Свойство("СтруктураПараметров") Тогда
					
					Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
						
						Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
						
					КонецЦикла;
					
				КонецЕсли; 
				
				Если ОбъектРасчета.АнализЧувствительности Тогда
					
					Запрос.Текст=СтрЗаменить(Запрос.Текст,"ЗначенияПоказателейОтчетов","ЗначенияПоказателейМоделирование");
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ТекстВложенногоЗапроса="ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.ПоказателиОтчетов.ПустаяСсылка) КАК Показатель,
			|	0 КАК Значение";
			
		КонецЕсли;
		
		Запрос.Текст=Запрос.Текст+"
		|("+ТекстВложенногоЗапроса+") КАК ВложенныйЗапрос
		|	ПО ВложенныйЗапрос.Показатель = ВнПоказатели.Ссылка
		|	";
		
				
		Запрос.УстановитьПараметр("ТипЗначения"    , Перечисления.ТипыЗначенийПоказателейОтчетов.Число);
		Запрос.УстановитьПараметр("Валюта"         , ВалютаЗаполнения);
		Запрос.УстановитьПараметр("ВидОтчета"     , ОбъектРасчета.ВидОтчета);
		
		ТаблицаПоказателей=Запрос.Выполнить().Выгрузить();
		ТаблицаПоказателей.Колонки.Добавить("ЗначениеИзменено",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		
		Если ТипЗнч(ПараметрыОтбораПоказателей)=Тип("Массив") Тогда
			
			Для каждого ПоказательОтбора Из ПараметрыОтбораПоказателей Цикл
				
				ТабТекущегоПоказателя=ТаблицаПоказателей.Скопировать(Новый Структура("Ссылка",ПоказательОтбора));
				
				ТабНомеровАналитикТекущегоПоказателя=УправлениеОтчетамиУХ.ВернутьТабНомеровАналитик(ТабТекущегоПоказателя);
								
				СтруктураДанныхПоказателя=Новый Структура("ТаблицаПоказателей,ТабНомеровАналитик",ТабТекущегоПоказателя,ТабНомеровАналитикТекущегоПоказателя);
				
				КэшДанныхПоказателя.Вставить(ПоказательОтбора,СтруктураДанныхПоказателя);
				
			КонецЦикла;
			
			ТабНомеровАналитик=УправлениеОтчетамиУХ.ВернутьТабНомеровАналитик(ТаблицаПоказателей);
						
			Возврат Новый Структура("ТаблицаПоказателей,ТабНомеровАналитик",ТаблицаПоказателей,ТабНомеровАналитик);
			
		Иначе
			
			ТабНомеровАналитик=УправлениеОтчетамиУХ.ВернутьТабНомеровАналитик(ТаблицаПоказателей);
			
			СтруктураДанныхПоказателя=Новый Структура("ТаблицаПоказателей,ТабНомеровАналитик",ТаблицаПоказателей,ТабНомеровАналитик);
			
			КэшДанныхПоказателя.Вставить(ПараметрыОтбораПоказателей,СтруктураДанныхПоказателя);
			Возврат СтруктураДанныхПоказателя;
			
		КонецЕсли; 
		
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	Иначе // Получаем только текущее значение показателя
		
		ТаблицаПоказателей=ДанныеПоказателя.ТаблицаПоказателей;
		
		Если ОбъектРасчета.Свойство("СохранятьИсториюИзменений") ИЛИ ОбъектРасчета.ВидОтчета.СохранятьИсториюИзменений Тогда
			
			ОтборПоказателей=Новый Соответствие;
			ОтборПоказателей.Вставить("####.Ссылка =&ПоказательОтчета",Новый Структура("ПоказательОтчета",ПараметрыОтбораПоказателей));
			ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
			ДанныеЗапроса.Вставить("ТабНомеровАналитик",?(ТипЗнч(ДанныеПоказателя.ТабНомеровАналитик)=Тип("ТаблицаЗначений"),ДанныеПоказателя.ТабНомеровАналитик.Скопировать(),Неопределено));
			
			СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
			
			Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда
				
				ТаблицаПоказателей[0].Значение=ОбщегоНазначенияУХ.ПолучитьПустоеЗначениеПоТипуПоказателя(ТаблицаПоказателей[0].ТипЗначения);
				СтруктураДанныхПоказателя=Новый Структура("ТаблицаПоказателей,ТабНомеровАналитик",ТаблицаПоказателей,ДанныеЗапроса.ТабНомеровАналитик);
				Возврат СтруктураДанныхПоказателя;
				
			Иначе
				
				Запрос=Новый Запрос;
				Запрос.Текст=СтруктураЗапроса.ТекстЗапроса;
				
			КонецЕсли;
			
			Если СтруктураЗапроса.Свойство("СтруктураПараметров") Тогда
				
				Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
					
					Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
					
				КонецЦикла;
				
			КонецЕсли; 
			
			Если ОбъектРасчета.АнализЧувствительности Тогда
				
				Запрос.Текст=СтрЗаменить(Запрос.Текст,"ЗначенияПоказателейОтчетов","ЗначенияПоказателейМоделирование");
				
			КонецЕсли;
			
			Результат=Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда
				
				ТаблицаПоказателей[0].Значение=Результат.Значение;
								
			Иначе
				
				ТаблицаПоказателей[0].Значение=ОбщегоНазначенияУХ.ПолучитьПустоеЗначениеПоТипуПоказателя(ТаблицаПоказателей[0].ТипЗначения);
								
			КонецЕсли;
			
		Иначе
			
			ТаблицаПоказателей[0].Значение=ОбщегоНазначенияУХ.ПолучитьПустоеЗначениеПоТипуПоказателя(ТаблицаПоказателей[0].ТипЗначения);
						
		КонецЕсли;
		
		СтруктураДанныхПоказателя=Новый Структура("ТаблицаПоказателей,ТабНомеровАналитик",ТаблицаПоказателей,ДанныеПоказателя.ТабНомеровАналитик);
		
		Возврат СтруктураДанныхПоказателя;
		
	КонецЕсли;	
		
КонецФункции

Функция ПолучитьСписокВерсий(СтруктураКлючевыхРеквизитов,ТекВидОтчета,ПериодРасчета)
	
	СписокИспользуемыхВерсий=Неопределено;
	
	Если НЕ (СтруктураКлючевыхРеквизитов.Свойство("СохранятьИсториюИзменений") ИЛИ ТекВидОтчета.СохранятьИсториюИзменений) Тогда
		
		СтруктураПоиска=Новый Структура("ВидОтчета,ПериодРасчета,Организация,Сценарий,Проект",
				ТекВидОтчета,
				ПериодРасчета,
				СтруктураКлючевыхРеквизитов.Организация,
				СтруктураКлючевыхРеквизитов.Сценарий,
				СтруктураКлючевыхРеквизитов.Проект);
				
		Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			Если СтруктураКлючевыхРеквизитов.Свойство("Аналитика"+Индекс) Тогда
				
				СтруктураПоиска.Вставить("Аналитика"+Индекс,СтруктураКлючевыхРеквизитов["Аналитика"+Индекс]);
				
			КонецЕсли;
			
		КонецЦикла;
		
		МассивВерсий=КэшВерсийПоказателей.НайтиСтроки(СтруктураПоиска);
		
		Если МассивВерсий.Количество()=1 Тогда
			
			СписокИспользуемыхВерсий=МассивВерсий[0].СписокВерсий;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СписокИспользуемыхВерсий=Неопределено Тогда
		
		СписокИспользуемыхВерсий = Новый СписокЗначений;
		
		ЗапросВерсия=Новый Запрос;
		ЗапросВерсия.Текст="ВЫБРАТЬ
		|	ВерсииЗначенийПоказателей.Ссылка,
		|	ВерсииЗначенийПоказателей.ОсновнаяВерсия
		|ИЗ
		|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
		|ГДЕ
		|	НЕ ВерсииЗначенийПоказателей.ПометкаУдаления
		|	И ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета
		|	И ВерсииЗначенийПоказателей.ПериодОтчета = &ПериодОтчета";
		
		Для каждого КлючИЗначение Из СтруктураКлючевыхРеквизитов Цикл
			
			Если КлючИЗначение.Ключ="ПравилоОбработки" 
				ИЛИ КлючИЗначение.Ключ="ДополнительныеВалюты"
				ИЛИ КлючИЗначение.Ключ="РежимКорректировки"
				ИЛИ КлючИЗначение.Ключ="СохранятьИсториюИзменений" Тогда
				
				Продолжить;
			
			ИначеЕсли КлючИЗначение.Ключ="ОсновнаяВалюта" Тогда
				
				ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
				|И ВерсииЗначенийПоказателей.Валюта=&ОсновнаяВалюта";
				
				ЗапросВерсия.УстановитьПараметр(КлючИЗначение.Ключ,КлючИЗначение.Значение);
				
			Иначе
				
				ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
				|И ВерсииЗначенийПоказателей."+КлючИЗначение.Ключ+"=&"+КлючИЗначение.Ключ;
				
				ЗапросВерсия.УстановитьПараметр(КлючИЗначение.Ключ,КлючИЗначение.Значение);
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		Если ЭтоЧерноваяЗапись() Тогда
			
			ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
			|И ((НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия)
			|ИЛИ ВерсииЗначенийПоказателей.ИдентификаторСеанса=&ИдентификаторСеанса)";
			
			ЗапросВерсия.УстановитьПараметр("ИдентификаторСеанса", 	ИдентификаторСеанса);
			
		Иначе
			
			ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
			|И НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия";
				
		КонецЕсли;
		
		ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
		|УПОРЯДОЧИТЬ ПО
		|	ВерсииЗначенийПоказателей.Код Убыв";
		
		ЗапросВерсия.УстановитьПараметр("ВидОтчета", 	ТекВидОтчета);
		ЗапросВерсия.УстановитьПараметр("ПериодОтчета", ПериодРасчета);
		
		СписокИспользуемыхВерсий = Новый СписокЗначений;
		
		Результат=ЗапросВерсия.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			СписокИспользуемыхВерсий.Добавить(Результат.Ссылка,,Результат.ОсновнаяВерсия);
			
		КонецЦикла;
		
		Если СписокИспользуемыхВерсий.Количество() >0  И НЕ (СтруктураКлючевыхРеквизитов.Свойство("СохранятьИсториюИзменений") ИЛИ ТекВидОтчета.СохранятьИсториюИзменений) Тогда
			
			НоваяСтрока=КэшВерсийПоказателей.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураПоиска);			
			НоваяСтрока.СписокВерсий	= СписокИспользуемыхВерсий;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СписокИспользуемыхВерсий;
	
КонецФункции // ПолучитьСписокВерсий()

Процедура ИнициализироватьКонтекст(СтруктураКлючевыхРеквизитов,ТекВидОтчета,ПериодРасчета,ОтборПоказателей) Экспорт
	
	МаксАналитикОтчета=ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(ТекВидОтчета);
	ВсегдаЗаполнятьАналитики=Истина;
	
	СписокИспользуемыхВерсий=ПолучитьСписокВерсий(СтруктураКлючевыхРеквизитов,ТекВидОтчета,ПериодРасчета);
	
	Если СписокИспользуемыхВерсий.Количество() > 0 Тогда
		ТекущийЭлементОписаниеВерсии = СписокИспользуемыхВерсий[0].Значение.Владелец;
	КонецЕсли;
	
	ОбъектРасчета=ПодготовитьСтруктуруПеременныхДляРасчета(СтруктураКлючевыхРеквизитов);
	ОбъектРасчета.Вставить("ВидОтчета",ТекВидОтчета);
	ОбъектРасчета.Вставить("ПериодОтчета",ПериодРасчета);
	
	Если ТипЗнч(ОтборПоказателей)=Тип("Массив") Тогда
				
		ДанныеПоказателей = ЗаполнитьТаблицуПоказателей(ОбъектРасчета,СписокИспользуемыхВерсий,СтруктураКлючевыхРеквизитов.ОсновнаяВалюта,ОтборПоказателей[2].Выгрузить().ВыгрузитьКолонку("ПоказательОтчета"));
		
	Иначе
		
		ДанныеПоказателей = ЗаполнитьТаблицуПоказателей(ОбъектРасчета,СписокИспользуемыхВерсий,СтруктураКлючевыхРеквизитов.ОсновнаяВалюта,ОтборПоказателей);
		
	КонецЕсли; 
	
	мПоказатели=ДанныеПоказателей.ТаблицаПоказателей;
	
	ОбъектРасчета.Вставить("мПоказатели",мПоказатели);	
	ОбъектРасчета.Вставить("ТабНомеровАналитик",ДанныеПоказателей.ТабНомеровАналитик);
	ЕстьРаскрытие=Ложь;
	
	Если ТипЗнч(ОтборПоказателей)=Тип("Массив") Тогда
		
		ТабПоказателиСРаскрытием=ОтборПоказателей[3].Выгрузить().ВыгрузитьКолонку("ПоказательОтчета");
		
		Если ТабПоказателиСРаскрытием.Количество()>0 Тогда
			
			мПоказателиРаскрытия = УправлениеОтчетамиУХ.ЗаполнитьТаблицуРаскрытий(ОбъектРасчета,,СписокИспользуемыхВерсий,СтруктураКлючевыхРеквизитов.ОсновнаяВалюта,ТабПоказателиСРаскрытием);
			ЕстьРаскрытие=Истина;
			
		КонецЕсли; 
		
	ИначеЕсли ЗначениеЗаполнено(мПоказатели[0].ГруппаРаскрытия) Тогда
		
		мПоказателиРаскрытия = УправлениеОтчетамиУХ.ЗаполнитьТаблицуРаскрытий(ОбъектРасчета,,СписокИспользуемыхВерсий,СтруктураКлючевыхРеквизитов.ОсновнаяВалюта,ОтборПоказателей);
		ЕстьРаскрытие=Истина;
		
	КонецЕсли; 
	
	Если НЕ ЕстьРаскрытие Тогда
		
		мПоказателиРаскрытия = Новый ТаблицаЗначений;
		мПоказателиРаскрытия.Колонки.Добавить("Показатель",Новый ОписаниеТипов("СправочникСсылка.ПоказателиОтчетов"));
		мПоказателиРаскрытия.Колонки.Добавить("АналитикаВалюта",Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		мПоказателиРаскрытия.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка, Число, Булево, Дата", Новый КвалификаторыЧисла(18, 5), Новый КвалификаторыСтроки(500), Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		мПоказателиРаскрытия.Колонки.Добавить("ЗначениеВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
		мПоказателиРаскрытия.Колонки.Добавить("ГруппаРаскрытия", Новый ОписаниеТипов("СправочникСсылка.ГруппыРаскрытия"));
		мПоказателиРаскрытия.Колонки.Добавить("ЧислоАналитикГруппыРаскрытия", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1));
		мПоказателиРаскрытия.Колонки.Добавить("ИтоговоеЗначение", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		мПоказателиРаскрытия.Колонки.Добавить("Техническая", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		мПоказателиРаскрытия.Колонки.Добавить("ЗначениеИзменено", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		
		Для Инд = 1 По ОбъектРасчета.ЧислоДопАналитик Цикл
			мПоказателиРаскрытия.Колонки.Добавить("Аналитика" + строка(Инд),Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип);
		КонецЦикла;
			
	КонецЕсли;
	
	ПодготовитьДанныеДляРасчетов(ОбъектРасчета,СтруктураКлючевыхРеквизитов,ТекВидОтчета,ПериодРасчета);
	
	Если РежимКорректировки Тогда
		
		ИнициализироватьТаблицыКорректировок();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьДанныеДляРасчетов(ОбъектРасчета,СтруктураКлючевыхРеквизитов,ТекВидОтчета,ПериодРасчета)
	
	мПоказатели.Колонки.Значение.Имя="ЗначениеНеТипизированное";
	мПоказатели.Колонки.Добавить("Значение",КэшируемыеПроцедурыУХ.ПолучитьОписаниеТиповРесурсаЗначение());
	// обрезаем коды
	мПоказатели.Колонки.Код.Имя = "Имя";
	мПоказатели.Колонки.Добавить("Код",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
		
	мНеЧисловыеПоказатели=Новый Массив;
	мЧисловыеПоказатели=Новый Структура;
	МаксАналитикПоказателя=0;
	
	Показатели = Новый Структура;		
	Для Каждого Стр Из мПоказатели Цикл
		
		Стр.Код = СокрЛП(Стр.Имя);		
		Стр.Значение = Стр.ЗначениеНеТипизированное;
		
		Если Стр.Значение = Неопределено ИЛИ Стр.Значение = Null Тогда
			Стр.Значение = КэшируемыеПроцедурыУХ.ПолучитьПустоеЗначениеПоТипуПоказателя(Стр.ТипЗначения);
		КонецЕсли;
		
		Если Стр.ТипЗначения <> Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			
			мНеЧисловыеПоказатели.Добавить(Стр.Ссылка);
			
		Иначе
			
			мЧисловыеПоказатели.Вставить(Стр.Код, Стр.НеМасштабируется);	
			
		КонецЕсли;
		
		Если Стр.ЧислоАналитикГруппыРаскрытия>МаксАналитикПоказателя Тогда
			
			МаксАналитикПоказателя=Стр.ЧислоАналитикГруппыРаскрытия;
			
		КонецЕсли;
		
		Показатели.Вставить(Стр.Код, Стр.Значение);
		
	КонецЦикла;
	
	мПоказатели.Колонки.Удалить(мПоказатели.Колонки.Имя);
	мПоказатели.Колонки.Удалить(мПоказатели.Колонки.ЗначениеНеТипизированное);
	
	Если мПоказатели.Колонки.Найти("ДанныеРасчета")=Неопределено Тогда
		
		мПоказатели.Колонки.Добавить("ДанныеРасчета",КэшируемыеПроцедурыУХ.ПолучитьОписаниеТиповСтруктура());
		мПоказатели.Колонки.Добавить("СохраненныеДанныеАктуальны",КэшируемыеПроцедурыУХ.ПолучитьОписаниеТиповБулево());
		
	КонецЕсли; 
		
	мПоказатели.ЗаполнитьЗначения(Истина,"СохраненныеДанныеАктуальны");
		
	мПоказателиРаскрытия.Колонки.Значение.Имя="ЗначениеНеТипизированное";
	мПоказателиРаскрытия.Колонки.Добавить("Значение",КэшируемыеПроцедурыУХ.ПолучитьОписаниеТиповРесурсаЗначение());
	
	Если ОбъектРасчета.мПоказатели.Колонки.Найти("ПериодРасчета")=Неопределено Тогда
		
		ОбъектРасчета.мПоказатели.Колонки.Добавить("ПериодРасчета", Новый ОписаниеТипов("СправочникСсылка.Периоды"));
		
	КонецЕсли;
			
	Для Каждого СтрАналитика ИЗ мПоказателиРаскрытия Цикл
		
		СтрАналитика.Значение=СтрАналитика.ЗначениеНеТипизированное;
		
	КонецЦикла;
	
	мПоказателиРаскрытия.Колонки.Удалить(мПоказателиРаскрытия.Колонки.ЗначениеНеТипизированное);
	
	// Создаем соответствие кодов и ссылок на показатели
	
	ТекстИндекс="Показатель,АналитикаВалюта";
	
	Для Инд=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		
		Если НЕ мПоказателиРаскрытия.Колонки.Найти("Аналитика"+Инд)=Неопределено Тогда
			
			ТекстИндекс=ТекстИндекс+",Аналитика"+Инд;
			
		КонецЕсли;
		
	КонецЦикла;
	
	мПоказателиРаскрытия.Индексы.Добавить(ТекстИндекс);
	ИнициализироватьЛоги();
	
	//Определим аналитики вида отчета
	мТаблицаВидовАналитикВидаОтчета=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(ТекВидОтчета);
	
	МассивКУдалению=мПоказателиРаскрытия.НайтиСтроки(Новый Структура("Значение",0));
	
	Для Каждого СтрРаскрытие ИЗ МассивКУдалению Цикл
		
		мПоказателиРаскрытия.Удалить(СтрРаскрытие);
		
	КонецЦикла;

	мТекущаяВалюта = СтруктураКлючевыхРеквизитов.ОсновнаяВалюта;
	
	ИнициализироватьСоответствияДляПоиска(ОбъектРасчета);
	
	Если ОбъектРасчета.ДополнительныеВалюты.Количество()>0 Тогда
		
		// Получим список валют, в которых уже есть записи в регистре
		
		ЗапросВерсия=Новый Запрос;
		ЗапросВерсия.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВерсииЗначенийПоказателей.Валюта
		|ИЗ
		|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
		|ГДЕ
		|	НЕ ВерсииЗначенийПоказателей.ПометкаУдаления
		|	И ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета
		|	И ВерсииЗначенийПоказателей.ПериодОтчета = &ПериодОтчета";
		
		Для каждого КлючИЗначение Из СтруктураКлючевыхРеквизитов Цикл
			
			Если КлючИЗначение.Ключ="ПравилоОбработки" 
				ИЛИ КлючИЗначение.Ключ="ДополнительныеВалюты"
				ИЛИ КлючИЗначение.Ключ="РежимКорректировки"
				ИЛИ КлючИЗначение.Ключ="СохранятьИсториюИзменений" Тогда
				
				Продолжить;
			
			ИначеЕсли КлючИЗначение.Ключ="ОсновнаяВалюта" Тогда
				
				ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
				|И НЕ ВерсииЗначенийПоказателей.Валюта=&ОсновнаяВалюта";
				
				ЗапросВерсия.УстановитьПараметр(КлючИЗначение.Ключ,КлючИЗначение.Значение);
				
			Иначе
				
				ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
				|И ВерсииЗначенийПоказателей."+КлючИЗначение.Ключ+"=&"+КлючИЗначение.Ключ;
				
				ЗапросВерсия.УстановитьПараметр(КлючИЗначение.Ключ,КлючИЗначение.Значение);
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		ЗапросВерсия.УстановитьПараметр("ВидОтчета", 	ТекВидОтчета);
		ЗапросВерсия.УстановитьПараметр("ПериодОтчета", ПериодРасчета);
			
		мВалютыЗаписей=ЗапросВерсия.Выполнить().Выгрузить().ВыгрузитьКолонку("Валюта");
		
		УправлениеОтчетамиУХ.ОпределитьПериодРасчета(ОбъектРасчета,мПоказатели.ВыгрузитьКолонку("Ссылка"));
		
		/////////////////////////////////////////////////////////////////////////////
		// Получим показатели, используемые для установки курсов валют
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ПоказателиОтчетовПоказателиДляКурсовВалют.Валюта,
		|	ПоказателиОтчетовПоказателиДляКурсовВалют.ПоказательКурса,
		|	ПоказателиОтчетовПоказателиДляКурсовВалют.Кратность,
		|	ПоказателиОтчетовПоказателиДляКурсовВалют.Ссылка КАК Показатель
		|ИЗ
		|	Справочник.ПоказателиОтчетов.ПоказателиДляКурсовВалют КАК ПоказателиОтчетовПоказателиДляКурсовВалют
		|ГДЕ
		|	ПоказателиОтчетовПоказателиДляКурсовВалют.Ссылка.Владелец = &ВидОтчета
		|	И ПоказателиОтчетовПоказателиДляКурсовВалют.Ссылка.ВидКурса = &УказанноеВДокументе";
		
		Запрос.УстановитьПараметр("ВидОтчета",ТекВидОтчета);
		Запрос.УстановитьПараметр("УказанноеВДокументе",Перечисления.ВидыКурсов.ЗначениеУказанноеВДокументе);
		
		мПоказателиДляКурсовВалют=Запрос.Выполнить().Выгрузить();
		мПоказателиДляКурсовВалют.Индексы.Добавить("Показатель,Валюта");
		
		//////////////////////////////////////////////////////////////////////////////
		
	Иначе
		
		мВалютыЗаписей=Новый Массив;
		
	КонецЕсли;
		
КонецПроцедуры // ПодготовитьДанныеДляРасчетов()

Процедура ИнициализироватьТаблицыКорректировок() Экспорт
	
	мКорректировкиПоказателей=мПоказатели.Скопировать();
	мКорректировкиПоказателей.ЗаполнитьЗначения(0,"Значение");
	
	мСоответствиеДляПоискаПоСсылкеКорр=Новый Соответствие;
	
	Для Каждого Строка ИЗ мКорректировкиПоказателей Цикл
		мСоответствиеДляПоискаПоСсылкеКорр.Вставить(Строка.Ссылка,Строка);
	КонецЦикла;
	
	мКорректировкиПоказателейРаскрытия=мПоказателиРаскрытия.СкопироватьКолонки();
		
КонецПроцедуры

Процедура ИнициализироватьЛоги()
	
	Если ЛогИзмененийПоказателей=Неопределено Тогда 
		
		СтруктураПеременных=Новый Структура;
		СтруктураПеременных.Вставить("НомерТекущейОперации",НомерТекущейОперации);
		СтруктураПеременных.Вставить("мПоказатели",мПоказатели);
		СтруктураПеременных.Вставить("мПоказателиРаскрытия",мПоказателиРаскрытия);
		УправлениеОтчетамиУХ.ИнициализироватьЛоги(СтруктураПеременных);
		
		ЛогИзмененийПоказателей=СтруктураПеременных.ЛогИзмененийПоказателей;
		ЛогИзмененийРаскрытийПоказателей=СтруктураПеременных.ЛогИзмененийРаскрытийПоказателей;
		
	Иначе
		
		ЛогИзмененийПоказателей.Очистить();
		
		СтруктураПеременных=Новый Структура;
		СтруктураПеременных.Вставить("ЛогИзмененийРаскрытийПоказателей",ЛогИзмененийРаскрытийПоказателей);
		
		УправлениеОтчетамиУХ.СнятьИндексыСЛогаРаскрытий(СтруктураПеременных);
		СтруктураПеременных.ЛогИзмененийРаскрытийПоказателей.Очистить();
		УправлениеОтчетамиУХ.УстановитьИндексыНаЛогРаскрытий(СтруктураПеременных);
		ЛогИзмененийРаскрытийПоказателей=СтруктураПеременных.ЛогИзмененийРаскрытийПоказателей;
		
	КонецЕсли;
		
КонецПроцедуры

Функция ЕстьДанныеРасчетовПоказателя(НазначениеРасчетов,ПотребительРасчета)
	
	СтруктураПоиска=Новый Структура("НазначениеРасчетов,ПотребительРасчета",НазначениеРасчетов,ПотребительРасчета);
	ЗначениеИзКэша=КэшДанныхРасчета.НайтиСтроки(СтруктураПоиска);
	
	Если ЗначениеИзКэша.Количество()=1 Тогда
		
		мОперанды 									= ЗначениеИзКэша[0].мОперанды;
		мТабПоказателиЗапросы						= ЗначениеИзКэша[0].мТабПоказателиЗапросы;
		мСоответствиеОперандовИПоказателейОтбора	= ЗначениеИзКэша[0].мСоответствиеОперандовИПоказателейОтбора;
		ЕстьОбращениеКВИБ							= ЗначениеИзКэша[0].ЕстьОбращениеКВИБ;
		ПроизвольныйКод								= ЗначениеИзКэша[0].ПроизвольныйКод;
		ПроцедураРасчета							= ЗначениеИзКэша[0].ПроцедураРасчета;
		
		Возврат Истина
			
	КонецЕсли; 
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПроцедурыРасчетов.Процедура,
	|	ПроцедурыРасчетов.ПроцедураВычисления,
	|	ПроцедурыРасчетов.ПроизвольныйКод,
	|	ПроцедурыРасчетов.ДанныеРасчетовПоказателя
	|ИЗ
	|	РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
	|ГДЕ
	|	ПроцедурыРасчетов.НазначениеРасчетов = &НазначениеРасчетов
	|	И ПроцедурыРасчетов.ПотребительРасчета = &ПотребительРасчета";
	
	Запрос.УстановитьПараметр("НазначениеРасчетов",НазначениеРасчетов);
	Запрос.УстановитьПараметр("ПотребительРасчета",ПотребительРасчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если НЕ Результат.Следующий() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ПроизвольныйКод=Результат.ПроизвольныйКод;
	ПроцедураРасчета=Результат.Процедура;
	ДанныеРасчетовПоказателя=Результат.ДанныеРасчетовПоказателя.Получить();
	
	Если (НЕ ТипЗнч(ДанныеРасчетовПоказателя)=Тип("Структура"))
		ИЛИ ((ДанныеРасчетовПоказателя.мОперанды.Количество()=0 ИЛИ ДанныеРасчетовПоказателя.мТабПоказателиЗапросы.Количество()=0) 
			И НЕ ПроизвольныйКод) Тогда
		
		ДанныеРасчетовПоказателя=УправлениеОтчетамиУХ.ПолучитьДанныеРасчетовПоказателя(НазначениеРасчетов,ПотребительРасчета);
		
		НаборЗаписей=РегистрыСведений.ПроцедурыРасчетов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НазначениеРасчетов.Установить(НазначениеРасчетов);
		НаборЗаписей.Отбор.ПотребительРасчета.Установить(ПотребительРасчета);
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()=1 Тогда
			
			НаборЗаписей[0].ДанныеРасчетовПоказателя=Новый ХранилищеЗначения(ДанныеРасчетовПоказателя);
			НаборЗаписей.Записать(Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	мОперанды 									= ДанныеРасчетовПоказателя.мОперанды;
	мТабПоказателиЗапросы						= ДанныеРасчетовПоказателя.мТабПоказателиЗапросы;
	мСоответствиеОперандовИПоказателейОтбора	= ДанныеРасчетовПоказателя.мСоответствиеОперандовИПоказателейОтбора;
	ЕстьОбращениеКВИБ							= ДанныеРасчетовПоказателя.ЕстьОбращениеКВИБ;
	
	НоваяСтрока=КэшДанныхРасчета.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураПоиска);
	НоваяСтрока.мОперанды=мОперанды;
	НоваяСтрока.мТабПоказателиЗапросы=мТабПоказателиЗапросы;
	НоваяСтрока.мСоответствиеОперандовИПоказателейОтбора=мСоответствиеОперандовИПоказателейОтбора;
	НоваяСтрока.ЕстьОбращениеКВИБ=ЕстьОбращениеКВИБ;
	НоваяСтрока.ПроизвольныйКод=ПроизвольныйКод;
	НоваяСтрока.ПроцедураРасчета=ПроцедураРасчета;
	
	Возврат Истина
		
КонецФункции
 

Процедура РассчитатьЗначениеПоказателя(СтруктураКлючевыхРеквизитов,ТекВидОтчета,ТекПотребительРасчета,ТекНазначениеРасчетов,ПериодРасчета) Экспорт
	
	Если НЕ ЕстьДанныеРасчетовПоказателя(ТекНазначениеРасчетов,ТекПотребительРасчета) Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	ИнициализироватьКонтекст(СтруктураКлючевыхРеквизитов,ТекВидОтчета,ПериодРасчета,ТекПотребительРасчета);	
			
	НомерТекущейОперации=1;
	
	ОбработанныеОперанды=Новый Соответствие;
	
	ОбъектРасчета=ПодготовитьСтруктуруПеременныхДляРасчета(СтруктураКлючевыхРеквизитов);
	ОбъектРасчета.Вставить("ВидОтчета",			ТекВидОтчета);
	ОбъектРасчета.Вставить("ПоказательОтчета",	ТекПотребительРасчета);
	ОбъектРасчета.Вставить("ПравилоОбработки",	ТекНазначениеРасчетов);
	ОбъектРасчета.Вставить("ПериодОтчета",		ПериодРасчета);
	ОбъектРасчета.Вставить("СпособФормированияОтчета",Перечисления.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки);
	
	УправлениеОтчетамиУХ.ПодготовитьТаблицуЗначенийОперандов(ОбъектРасчета,ОбъектРасчета.мТабПоказателиЗапросы);
	
	СписокИспользуемых=Новый СписокЗначений;
	СписокИспользуемых.ЗагрузитьЗначения(мОперанды.ВыгрузитьКолонку("Код"));
	
	СтрПоказатель=Новый Структура;
	СтрПоказатель.Вставить("Код",мПоказатели[0].Код);
	СтрПоказатель.Вставить("ПоказателиТекущегоОтчета",Ложь);
	СтрПоказатель.Вставить("Показатель",мПоказатели[0].Ссылка);
	СтрПоказатель.Вставить("ПроизвольныйКод",ПроизвольныйКод);
	СтрПоказатель.Вставить("Процедура",ПроцедураРасчета);
	СтрПоказатель.Вставить("СписокИспользуемых",СписокИспользуемых);
	СтрПоказатель.Вставить("СпособОбработки",Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение);
	СтрПоказатель.Вставить("ТолькоСуммирование",Ложь);
	СтрПоказатель.Вставить("ЕстьДополненияАналитик",(НЕ (мОперанды.Колонки.Найти("ЕстьДополненияАналитик")=Неопределено ИЛИ мОперанды.Найти(Истина,"ЕстьДополненияАналитик")=Неопределено)));
	
	РабочаяТаблица = Новый ТаблицаЗначений;
	
	Для Каждого Кол Из мПоказателиРаскрытия.Колонки Цикл
		
		Если НЕ (Кол.Имя="Показатель" ИЛИ Кол.Имя="Значение") Тогда // Показатель один.
			
			РабочаяТаблица.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	РабочаяТаблица.Колонки.Добавить("ИтогПоПоказателю",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	УправлениеОтчетамиУХ.РассчитатьЗначениеПоказателя(ОбъектРасчета,Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение,СтрПоказатель,РабочаяТаблица);
		
	ЗаписатьИзмененияВРегистр(ОбъектРасчета);
	
КонецПроцедуры


Функция ПроверитьИспользованиеПравила(ВидОтчетаПроверка,НазначениеРасчетовПроверка,ОрганизацияПроверка,СценарийПроверка,ПериодОтчетаПроверка)
	
	СтруктураРеквизитов=ПолучитьСтруктуруРеквизитов(ВидОтчетаПроверка,ОрганизацияПроверка,СценарийПроверка,ПериодОтчетаПроверка,НазначениеРасчетовПроверка);
	
	Если СтруктураРеквизитов.Свойство("ПравилоОбработки") И СтруктураРеквизитов.ПравилоОбработки=НазначениеРасчетовПроверка Тогда
		
		ИспользуемаяИБ=СтруктураРеквизитов.ВИБ;
		
		Возврат Истина
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли; 
			
КонецФункции

Функция ПолучитьСтруктуруРеквизитов(ВидОтчетаПроверка,ОрганизацияПроверка,СценарийПроверка,ПериодОтчетаПроверка,НазначениеРасчетовПроверка=Неопределено)
	
	СтруктураПоиска=Новый Структура("ВидОтчета, Сценарий, Организация, ПериодРасчета",ВидОтчетаПроверка, СценарийПроверка, ОрганизацияПроверка, ПериодОтчетаПроверка);
	
	ЗначениеИзКэша=КэшИспользуемыхПравил.НайтиСтроки(СтруктураПоиска);
	
	Если ЗначениеИзКэша.Количество()>0 Тогда

		СтруктураРеквизитов=ЗначениеИзКэша[0].СтруктураРеквизитов;
		
	Иначе
		
		ТекПравилоОбработки=УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки, ВидОтчетаПроверка, СценарийПроверка, ОрганизацияПроверка, ПериодОтчетаПроверка);
				
		СтруктураРеквизитов=Новый Структура;
		СтруктураРеквизитов.Вставить("ПравилоОбработки",ТекПравилоОбработки);
			
		ТекИспользуемаяИБ=УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.ВнешняяИнформационнаяБаза, ВидОтчетаПроверка,СценарийПроверка, ОрганизацияПроверка, ПериодОтчетаПроверка);
		
		Если ЗначениеЗаполнено(ТекИспользуемаяИБ) Тогда
			
			СтруктураРеквизитов.Вставить("ВИБ",ТекИспользуемаяИБ);
			
		Иначе
			
			СтруктураРеквизитов.Вставить("ВИБ",ПересчетПоказателейУХ.ПолучитьВИБПоУмолчанию(ТекПравилоОбработки));
			
		КонецЕсли;
		
		НоваяСтрока=КэшИспользуемыхПравил.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураПоиска);
		НоваяСтрока.СтруктураРеквизитов=СтруктураРеквизитов;
			
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;	
	
КонецФункции // ПолучитьСтруктуруРеквизитов()

Функция ВыполнитьКопированиеПоСрезам() Экспорт
	
	ЕстьОшибки=Ложь;
	
	Обработки.ЗаписьПоказателяСРасчетомЗависимых.ВыполнитьКопированиеПоСрезам(КопированиеДанныхПоСрезам.Выгрузить(),ЕстьОшибки);
	
	Возврат ЕстьОшибки;
	
КонецФункции // ВыполнитьКопированиеПоСрезам() 

Процедура РаспределитьЗначенияПоказателей() Экспорт
	
	ПоказателиКРаспределению=ТаблицаИзмененныхПоказателей.Выгрузить();
		
	Если МетодРаспределения=Перечисления.МетодыОбратногоРаспределения.Равномерно Тогда
		
		ЗаполнитьРаспределениеРавномерно(ПоказателиКРаспределению);
		
	ИначеЕсли МетодРаспределения=Перечисления.МетодыОбратногоРаспределения.ПоТекущемуЗначению Тогда
		
		ЗаполнитьРаспределениеПоТекущемуЗначению(ПоказателиКРаспределению);
		
	ИначеЕсли МетодРаспределения=Перечисления.МетодыОбратногоРаспределения.ПоСценарию
		ИЛИ МетодРаспределения=Перечисления.МетодыОбратногоРаспределения.ПоПоказателю Тогда
		
		ЗаполнитьРаспределениеПоПоУточнению(ПоказателиКРаспределению);
		
	КонецЕсли;
	
	ВыполнитьРаспределениеПоБазе(ПоказателиКРаспределению);
	
	ТаблицаИзмененныхПоказателей.Очистить();
	
	Для Каждого Строка ИЗ ПоказателиКРаспределению Цикл
		
		НоваяСтрока= ТаблицаИзмененныхПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
	КонецЦикла;	
	
КонецПроцедуры // РаспределитьЗначенияПоказателей()

Функция РаспределитьСуммуПропорциональноКоэффициентам(РаспределяемаяСумма, Коэффициенты, Точность)
	
	МассивКоэффициентов=ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(РаспределяемаяСумма, Коэффициенты, Точность);
	
	Если МассивКоэффициентов=Неопределено Тогда
		
		МассивКоэффициентов=Новый Массив;
		
		Для Каждого Элемент ИЗ Коэффициенты Цикл
			
			МассивКоэффициентов.Добавить(0);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивКоэффициентов; 
	
КонецФункции // РаспределитьСуммуПропорциональноКоэффициентам()

Процедура ВыполнитьРаспределениеПоБазе(ПоказателиКРаспределению)
	
	МассивДляРаспределения=ПоказателиКРаспределению.ВыгрузитьКолонку("БазаРаспределения");
	
	МассивКоэффициентов=РаспределитьСуммуПропорциональноКоэффициентам(ЗначениеДляРаспределения,МассивДляРаспределения,5);
	
	Для Индекс=0 По ПоказателиКРаспределению.Количество()-1 Цикл
		
		ПоказателиКРаспределению[Индекс].Значение=МассивКоэффициентов[Индекс];
		
	КонецЦикла;	
	
КонецПроцедуры // ВыполнитьРаспределениеПоБазе()

Процедура ЗаполнитьРаспределениеРавномерно(ПоказателиКРаспределению)
	
	Для Каждого Строка ИЗ ПоказателиКРаспределению Цикл
		
		Строка.БазаРаспределения=1;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьРаспределениеРавномерно()


Процедура ЗаполнитьРаспределениеПоПоУточнению(ПоказателиКРаспределению)
	
	Для Каждого Строка ИЗ ПоказателиКРаспределению Цикл
		
		Если Строка.СинтетическоеЗначение Тогда
			
			ПолучитьБазуРаспределенияСинтетика(Строка);
			
		Иначе
			
			ПолучитьБазуРаспределенияАналитика(Строка);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьРаспределениеПоТекущемуЗначению()

Процедура ПолучитьБазуРаспределенияСинтетика(Строка)
	
	ТаблицаСинтетика=?(МаксАналитикОтчета=0,"ЗначенияПоказателейОтчетовСинтетика","ЗначенияПоказателейОтчетов"+МаксАналитикОтчета);
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СУММА(ЗначенияПоказателейОтчетовСинтетика.Значение) КАК Значение
	|ИЗ
	|	РегистрСведений."+ТаблицаСинтетика+" КАК ЗначенияПоказателейОтчетовСинтетика
	|ГДЕ
	|	ЗначенияПоказателейОтчетовСинтетика.Версия.ВидОтчета = &ВидОтчета
	|	И ЗначенияПоказателейОтчетовСинтетика.Версия.Организация = &Организация
	|	И ЗначенияПоказателейОтчетовСинтетика.Версия.ПериодОтчета = &ПериодОтчета
	|	И ЗначенияПоказателейОтчетовСинтетика.Версия.Проект = &Проект
	|	И ЗначенияПоказателейОтчетовСинтетика.Версия.Сценарий = &Сценарий
	|	И НЕ ЗначенияПоказателейОтчетовСинтетика.Версия.ЗаписьВДополнительнойВалюте
	|	И ЗначенияПоказателейОтчетовСинтетика.Показатель = &Показатель";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	Запрос.УстановитьПараметр("Организация",Строка.Организация);
	Запрос.УстановитьПараметр("ПериодОтчета",Строка.ПериодОтчета);
	Запрос.УстановитьПараметр("Проект",Строка.Проект);

	Запрос.УстановитьПараметр("Сценарий",?(МетодРаспределения=Перечисления.МетодыОбратногоРаспределения.ПоСценарию,УточнениеМетодаРаспределения,Строка.Сценарий));
	Запрос.УстановитьПараметр("Показатель",?(МетодРаспределения=Перечисления.МетодыОбратногоРаспределения.ПоПоказателю,УточнениеМетодаРаспределения,Строка.Показатель));
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Строка.БазаРаспределения=Результат.Значение;
		
	КонецЕсли;	
	
КонецПроцедуры // ПолучитьБазуРаспределенияСинтетика()

Процедура ПолучитьБазуРаспределенияАналитика(Строка)
	
	ПоказательРаспределения=?(МетодРаспределения=Перечисления.МетодыОбратногоРаспределения.ПоПоказателю,УточнениеМетодаРаспределения,Строка.Показатель);
	АналитикРаскрытия = ПоказательРаспределения.ГруппаРаскрытия.ЧислоАналитик;
	
	ТаблицаАналитики="ЗначенияПоказателейОтчетов"+АналитикРаскрытия;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СУММА(ТаблицаАналитики.Значение) КАК Значение
	|ИЗ
	|	РегистрСведений."+ТаблицаАналитики+" КАК ТаблицаАналитики
	|ГДЕ
	|	ЗначенияПоказателейОтчетовСинтетика.Версия.ВидОтчета = &ВидОтчета
	|	И ЗначенияПоказателейОтчетовСинтетика.Версия.Организация = &Организация
	|	И ЗначенияПоказателейОтчетовСинтетика.Версия.ПериодОтчета = &ПериодОтчета
	|	И ЗначенияПоказателейОтчетовСинтетика.Версия.Проект = &Проект
	|	И ЗначенияПоказателейОтчетовСинтетика.Версия.Сценарий = &Сценарий
	|	И НЕ ЗначенияПоказателейОтчетовСинтетика.Версия.ЗаписьВДополнительнойВалюте
	|	И ЗначенияПоказателейОтчетовСинтетика.Показатель = &Показатель";
	
	Для Индекс=МаксАналитикОтчета+1 ПО АналитикРаскрытия Цикл
		
		Запрос.Текст=Запрос.Текст+"
		|И Аналитика"+Индекс+" = &Аналитика"+Индекс;
		
		Запрос.УстановитьПараметр("Аналитика"+Индекс, Строка["Аналитика"+Индекс]);
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	Запрос.УстановитьПараметр("Организация",Строка.Организация);
	Запрос.УстановитьПараметр("ПериодОтчета",Строка.ПериодОтчета);
	Запрос.УстановитьПараметр("Проект",Строка.Проект);

	Запрос.УстановитьПараметр("Сценарий",?(МетодРаспределения=Перечисления.МетодыОбратногоРаспределения.ПоСценарию,УточнениеМетодаРаспределения,Строка.Сценарий));
	Запрос.УстановитьПараметр("Показатель",?(МетодРаспределения=Перечисления.МетодыОбратногоРаспределения.ПоПоказателю,УточнениеМетодаРаспределения,Строка.Показатель));
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Строка.БазаРаспределения=Результат.Значение;
		
	КонецЕсли;	
	
КонецПроцедуры // ПолучитьБазуРаспределенияСинтетика()

Процедура ЗаполнитьРаспределениеПоТекущемуЗначению(ПоказателиКРаспределению)
	
	Для Каждого Строка ИЗ ПоказателиКРаспределению Цикл
		
		Строка.БазаРаспределения=Строка.Значение;
		
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьРаспределениеПоТекущемуЗначению()

Функция ЗаписатьЗначенияТаблицыПоказателей() Экспорт
	
	ДатаИзмененияMs=ТекущаяУниверсальнаяДатаВМиллисекундах();
	
		
	Если КопированиеДанныхПоСрезам.Количество()>0 Тогда
		
		Возврат ВыполнитьКопированиеПоСрезам();
		
	КонецЕсли;
	
	Если МаксАналитикОтчета=Неопределено Тогда
		
		МаксАналитикОтчета=ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(ВидОтчета);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МетодРаспределения) Тогда
		
		РаспределитьЗначенияПоказателей();
		
	КонецЕсли;
	
	Если ЧистоваяЗаписьДанных ТОгда
		
		ОписанияВерсийКУдалению=Обработки.ЗаписьПоказателяСРасчетомЗависимых.ЧистоваяЗаписьДанных(ВидОтчета,ИдентификаторСеанса,Ложь);
		
	КонецЕсли;
	
	ОсновнойВидОтчета=ВидОтчета;
	
	Если ВалютыОтчетности.Количество()=0 Тогда
		
		СводнаяТаблицаУХ.ЗаполнитьВалютыПоРегламенту(ЭтотОбъект,ТаблицаИзмененныхПоказателей.Выгрузить());
		
	КонецЕсли;
	
	ЗапросДанные=Новый Запрос;
	ЗапросДанные.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		
	ОтборПоАналитикам = "";
	ТаблицаИзмененныхПоказателейАналитика = "";
		
	Для ИндексАналитики = 1 По МаксАналитикОтчета Цикл
		
		ИндАналитики = Строка(ИндексАналитики);
		ОтборПоАналитикам = ОтборПоАналитикам + "
	|			И ЗначенияСтатусовПоказателейСинтетика.Аналитика" + ИндАналитики + " = ОбластьИзмененнныхДанных.Аналитика" + ИндАналитики;
		
		ТаблицаИзмененныхПоказателейАналитика = ТаблицаИзмененныхПоказателейАналитика + ",
	|	ТаблицаИзмененныхПоказателей.Аналитика" + ИндАналитики + " КАК Аналитика" + ИндАналитики;
		
	КонецЦикла;
		
	ЗапросДанные.Текст="ВЫБРАТЬ
	|	ТаблицаИзмененныхПоказателей.Сценарий,
	|	ТаблицаИзмененныхПоказателей.ПериодОтчета,
	|	ТаблицаИзмененныхПоказателей.Организация,
	|	ТаблицаИзмененныхПоказателей.Проект,
	|	ТаблицаИзмененныхПоказателей.ПоказательОтчета,
	|	ТаблицаИзмененныхПоказателей.Аналитика1,
	|	ТаблицаИзмененныхПоказателей.Аналитика2,
	|	ТаблицаИзмененныхПоказателей.Аналитика3,
	|	ТаблицаИзмененныхПоказателей.Аналитика4,
	|	ТаблицаИзмененныхПоказателей.Аналитика5,
	|	ТаблицаИзмененныхПоказателей.Аналитика6,
	|	ТаблицаИзмененныхПоказателей.АналитикаВалюта,
	|	ТаблицаИзмененныхПоказателей.Значение,
	|	ТаблицаИзмененныхПоказателей.ЗначениеВалюта,
	|	ТаблицаИзмененныхПоказателей.ЗначениеНечисловое,
	|	ТаблицаИзмененныхПоказателей.ТекстКомментария,
	|	ТаблицаИзмененныхПоказателей.СинтетическоеЗначение
	|ПОМЕСТИТЬ ИсходнаяТаблицаИзмененныхПоказателей
	|ИЗ
	|	&ТаблицаИзмененныхПоказателей КАК ТаблицаИзмененныхПоказателей
	|;
	|ВЫБРАТЬ
	|	ИсходнаяТаблицаИзмененныхПоказателей.Сценарий,
	|	ИсходнаяТаблицаИзмененныхПоказателей.ПериодОтчета,
	|	ИсходнаяТаблицаИзмененныхПоказателей.Организация,
	|	ИсходнаяТаблицаИзмененныхПоказателей.Проект,
	|	ИсходнаяТаблицаИзмененныхПоказателей.ПоказательОтчета,
	|	ИсходнаяТаблицаИзмененныхПоказателей.ПоказательОтчета.Владелец КАК ВидОтчета,
	|   Выбор Когда (ИсходнаяТаблицаИзмененныхПоказателей.СинтетическоеЗначение
	| 		ИЛИ ИсходнаяТаблицаИзмененныхПоказателей.ПоказательОтчета.ГруппаРаскрытия=значение(Справочник.ГруппыРаскрытия.ПустаяСсылка))
	|	Тогда Истина Иначе Ложь Конец Как СинтетическоеЗначение,
	|	ИсходнаяТаблицаИзмененныхПоказателей.Аналитика1,
	|	ИсходнаяТаблицаИзмененныхПоказателей.Аналитика2,
	|	ИсходнаяТаблицаИзмененныхПоказателей.Аналитика3,
	|	ИсходнаяТаблицаИзмененныхПоказателей.Аналитика4,
	|	ИсходнаяТаблицаИзмененныхПоказателей.Аналитика5,
	|	ИсходнаяТаблицаИзмененныхПоказателей.Аналитика6,
	|	ИсходнаяТаблицаИзмененныхПоказателей.АналитикаВалюта,
	|	ИсходнаяТаблицаИзмененныхПоказателей.Значение,
	|	ИсходнаяТаблицаИзмененныхПоказателей.ЗначениеВалюта,
	|	ИсходнаяТаблицаИзмененныхПоказателей.ЗначениеНечисловое,
	|	ИсходнаяТаблицаИзмененныхПоказателей.ТекстКомментария
	|ПОМЕСТИТЬ ТаблицаИзмененныхПоказателей
	|ИЗ
	|	ИсходнаяТаблицаИзмененныхПоказателей КАК ИсходнаяТаблицаИзмененныхПоказателей
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИзмененныхПоказателей.Сценарий,
	|	ТаблицаИзмененныхПоказателей.ПериодОтчета,
	|	ТаблицаИзмененныхПоказателей.Организация,
	|	ТаблицаИзмененныхПоказателей.Проект,	
	|	ТаблицаИзмененныхПоказателей.ПоказательОтчета" + ТаблицаИзмененныхПоказателейАналитика + "
	|ПОМЕСТИТЬ ОбластьИзмененнныхДанных
	|ИЗ
	|	ТаблицаИзмененныхПоказателей КАК ТаблицаИзмененныхПоказателей
	|ИНДЕКСИРОВАТЬ ПО
	|Организация,
	|ПериодОтчета,
	|Сценарий,
	|Проект,
	|ПоказательОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатусыПериодовСценариев.Периоды КАК ПериодОтчета,
	|	СтатусыПериодовСценариев.Организации КАК Организация,
	|	СтатусыПериодовСценариев.Сценарии КАК Сценарий,
	|	СтатусыПериодовСценариев.СтатусБлокировки
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбластьИзмененнныхДанных КАК ОбластьИзмененнныхДанных
	|		ПО СтатусыПериодовСценариев.Организации = ОбластьИзмененнныхДанных.Организация
	|			И СтатусыПериодовСценариев.Периоды = ОбластьИзмененнныхДанных.ПериодОтчета
	|			И СтатусыПериодовСценариев.Сценарии = ОбластьИзмененнныхДанных.Сценарий
	|ГДЕ
	|	СтатусыПериодовСценариев.СтатусБлокировки > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСтатусовПоказателейСинтетика.ПериодОтчета,
	|	ЗначенияСтатусовПоказателейСинтетика.Сценарий,
	|	ЗначенияСтатусовПоказателейСинтетика.Проект,
	|	ЗначенияСтатусовПоказателейСинтетика.ОрганизационнаяЕдиница КАК Организация,
	|	ЗначенияСтатусовПоказателейСинтетика.Показатель,
	|	ЗначенияСтатусовПоказателейСинтетика.ЗначениеЗаблокировано,
	|	ЗначенияСтатусовПоказателейСинтетика.ИндексСостояния
	|ИЗ
	|	РегистрСведений.ЗначенияСтатусовПоказателейСинтетика КАК ЗначенияСтатусовПоказателейСинтетика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбластьИзмененнныхДанных КАК ОбластьИзмененнныхДанных
	|		ПО ЗначенияСтатусовПоказателейСинтетика.ОрганизационнаяЕдиница = ОбластьИзмененнныхДанных.Организация
	|			И ЗначенияСтатусовПоказателейСинтетика.ПериодОтчета = ОбластьИзмененнныхДанных.ПериодОтчета
	|			И ЗначенияСтатусовПоказателейСинтетика.Сценарий = ОбластьИзмененнныхДанных.Сценарий
	|			И ЗначенияСтатусовПоказателейСинтетика.Проект = ОбластьИзмененнныхДанных.Проект
	|			И ЗначенияСтатусовПоказателейСинтетика.Показатель = ОбластьИзмененнныхДанных.ПоказательОтчета" + ОтборПоАналитикам + "
	|ГДЕ
	|	(ЗначенияСтатусовПоказателейСинтетика.ЗначениеЗаблокировано >= 2
	|			ИЛИ ЗначенияСтатусовПоказателейСинтетика.ИндексСостояния = 3)
	|	И ЗначенияСтатусовПоказателейСинтетика.ВидОтчета = &ВидОтчета";
	
	ТаблицаКЗаписи=ТаблицаИзмененныхПоказателей.Выгрузить();	
	ЗапросДанные.УстановитьПараметр("ТаблицаИзмененныхПоказателей",ТаблицаКЗаписи);
	ЗапросДанные.УстановитьПараметр("ВидОтчета",ОсновнойВидОтчета);
	
	РезультатЗапроса=ЗапросДанные.ВыполнитьПакет();
	
	ТекстОшибки="";
	
	ЗаблокированныеПериоды=РезультатЗапроса[3].Выгрузить();
	
	СтруктураКонтекста=Новый Структура;
	СтруктураКонтекста.Вставить("ВидОтчета",ОсновнойВидОтчета);
	
	Если ЗаблокированныеПериоды.Количество()>0 Тогда
		
		Строка=ЗаблокированныеПериоды[0];
		
		СтруктураКонтекста.Вставить("Организация",Строка.Организация);
		СтруктураКонтекста.Вставить("Сценарий",Строка.Сценарий);
		СтруктураКонтекста.Вставить("ПериодОтчета",Строка.ПериодОтчета);
		СтруктураКонтекста.Вставить("КонтекстСобытия",Перечисления.КонтекстПротоколируемогоСобытия.ПроверкаВозможностиЗаписиКлючевыеРеквизиты);
		
		ТекстСообщения = НСтр("ru = 'Организация %Организация%, сценарий %Сценарий%:
		|			Период %ПериодОтчета% закрыт.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%",	 Строка(Строка.Организация));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сценарий%",		 Строка(Строка.Сценарий));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПериодОтчета%",	 Строка(Строка.ПериодОтчета));
		ТекстОшибки = ТекстОшибки + ТекстСообщения;
		
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьВЖурнал(СтруктураКонтекста,"",Перечисления.ТипыЗаписейПротоколируемыхСобытий.Ошибка,,,ТекстОшибки,,,Истина);
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстОшибки) Тогда
		
		ЗаблокированныеПоказатели=РезультатЗапроса[4].Выгрузить();
		
		Если ЗаблокированныеПоказатели.Количество()>0 Тогда
			
			Строка=ЗаблокированныеПоказатели[0];
			
			ТекстСообщения = НСтр("ru = 'Организация: %Организация%, сценарий: %Сценарий% %Проект%,
			|				Период: %ПериодОтчета%, вид отчета: %ВидОтчета%, показатель %Показатель%: '");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(Строка.Организация));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сценарий%", Строка(Строка.Сценарий));
			ПредставлениеПроекта = ?(ЗначениеЗаполнено(Строка.Проект), НСтр("ru = 'проект: '") + Строка.Проект, "");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Проект%", Строка(ПредставлениеПроекта));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПериодОтчета%", Строка(Строка.ПериодОтчета));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидОтчета%", Строка(ВидОтчета));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Показатель%", Строка(Строка.Показатель));
			ТекстОшибки = ТекстОшибки + ТекстСообщения;
			
			Если Строка.ЗначениеЗаблокировано>0 Тогда
				
				ТекстОшибки=ТекстОшибки+НСтр("ru = '
				|значение заблокировано'");
				
			КонецЕсли;
			
			Если Строка.ИндексСостояния>0 Тогда
				
				ТекстОшибки=ТекстОшибки+НСтр("ru = '
				|данные утверждены'");
				
			КонецЕсли;
			
			СтруктураКонтекста.Вставить("Организация",Строка.Организация);
			СтруктураКонтекста.Вставить("Сценарий",Строка.Сценарий);
			СтруктураКонтекста.Вставить("ПериодОтчета",Строка.ПериодОтчета);
			СтруктураКонтекста.Вставить("ПоказательОтчета",Строка.Показатель);
			СтруктураКонтекста.Вставить("КонтекстСобытия",Перечисления.КонтекстПротоколируемогоСобытия.ПроверкаВозможностиЗаписиПоказатель);
			
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьВЖурнал(СтруктураКонтекста,"",Перечисления.ТипыЗаписейПротоколируемыхСобытий.Ошибка,,,ТекстОшибки,,,Истина);
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		
		ТекстСообщения = НСтр("ru = 'Запись показателей не произведена по следующим причинам. %ТекстОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстОшибки%", Строка(ТекстОшибки));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ЗапросДанные.Текст="
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|ВидОтчета,
	|Организация,
	|ПериодОтчета,
	|Сценарий,
	|Проект";
	
	Для Индекс=1 По МаксАналитикОтчета Цикл
		
		ЗапросДанные.Текст=ЗапросДанные.Текст+",Аналитика"+Индекс;
		
	КонецЦикла; 
	
	ЗапросДанные.Текст=ЗапросДанные.Текст+"
	|ИЗ ТаблицаИзмененныхПоказателей
	|Упорядочить ПО ПериодОтчета.ДатаНачала";
	
		
	ТабКлючевыхИзмерений=ЗапросДанные.Выполнить().Выгрузить();
	
	КолонкиДанных="ПоказательОтчета";
	
	Для Индекс=МаксАналитикОтчета+1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		КолонкиДанных=КолонкиДанных+",Аналитика"+Индекс;
		
	КонецЦикла;
	
	КолонкиДанных=КолонкиДанных+",АналитикаВалюта,Значение,ЗначениеВалюта,ЗначениеНечисловое,СинтетическоеЗначение,ТекстКомментария";
	
	Для каждого Строка ИЗ ТабКлючевыхИзмерений Цикл
		
		ЗапросДанные.Текст="ВЫБРАТЬ
		|"+КолонкиДанных+"
		|ПОМЕСТИТЬ ТабЗначенийПоказателей
		|ИЗ ТаблицаИзмененныхПоказателей";
		
		ТекстОтбор="";
		
		СтруктураКлючевыхИзмерений=Новый Структура;
		
		Если ЗначениеЗаполнено(Строка.ВидОтчета) Тогда
			
			 ОсновнойВидОтчета=Строка.ВидОтчета;
			 
		КонецЕсли;
		
		Для каждого Колонка Из ТабКлючевыхИзмерений.Колонки  Цикл
			
			ТекстОтбор=ТекстОтбор+"
			|И "+Колонка.Имя+"=&"+Колонка.Имя;
			ЗапросДанные.УстановитьПараметр(Колонка.Имя,Строка[Колонка.Имя]);
			
			СтруктураКлючевыхИзмерений.Вставить(Колонка.Имя,Строка[Колонка.Имя]);
			
		КонецЦикла;
		
		ЗапросДанные.Текст=ЗапросДанные.Текст+"
		|ГДЕ "+Сред(ТекстОтбор,3)+"
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабЗначенийПоказателей.ПоказательОтчета,
		|	ТабЗначенийПоказателей.СинтетическоеЗначение
		|ПОМЕСТИТЬ ТаблицаПоказателей
		|ИЗ
		|	ТабЗначенийПоказателей КАК ТабЗначенийПоказателей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ Различные
		|	ТаблицаПоказателей.ПоказательОтчета
		|ИЗ
		|	ТаблицаПоказателей КАК ТаблицаПоказателей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ Различные
		|	ТаблицаПоказателей.ПоказательОтчета
		|ИЗ
		|	ТаблицаПоказателей КАК ТаблицаПоказателей
		|ГДЕ
		|	НЕ ТаблицаПоказателей.СинтетическоеЗначение
		|;
		|ВЫБРАТЬ * ИЗ ТабЗначенийПоказателей";
		
		Если ЗаписьКомментариев Тогда
			
			ЗаписатьКомментарииЗначенийПоказателей(СтруктураКлючевыхИзмерений, ЗапросДанные);
			
		Иначе
					
			ЗаписатьЗначенияПоказателей(СтруктураКлючевыхИзмерений, ЗапросДанные);
			
		КонецЕсли;
		
		ЗапросДанные.Текст="Уничтожить ТабЗначенийПоказателей; Уничтожить ТаблицаПоказателей";
		ЗапросДанные.Выполнить();
		
	КонецЦикла; 
	
	Если Константы.АвтоматическаяАктуализацияДанныхПоПроектам.Получить() Тогда
		
		ТаблицаКЗаписи.Свернуть("Сценарий,Проект");
		
		Для Каждого Строка ИЗ ТаблицаКЗаписи Цикл
			
			Если ЗначениеЗаполнено(Строка.Проект) Тогда
				
				ДвиженияБюджетированиеУХ.РассчитатьПоказателиЭффективности(Строка.Сценарий,Строка.Проект);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ОписанияВерсийКУдалению=Неопределено Тогда
		
		Обработки.ЗаписьПоказателяСРасчетомЗависимых.УдалитьОписанияВерсий(ОписанияВерсийКУдалению,ВидОтчета);
		
	КонецЕсли;	
		
	Возврат Истина;
	
КонецФункции // ЗаписатьЗначенияТаблицыПоказателей()

Функция ПолучитьПоследнююВерсию(СтруктураКлючевыхРеквизитов,ТекВидОтчета,ПериодРасчета)
	
	ЗапросВерсия=Новый Запрос;
	ЗапросВерсия.Текст="ВЫБРАТЬ Первые 1
	|	ВерсииЗначенийПоказателей.Ссылка,
	|	ВерсииЗначенийПоказателей.ОсновнаяВерсия
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	НЕ ВерсииЗначенийПоказателей.ПометкаУдаления
	|	И ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета
	|	И ВерсииЗначенийПоказателей.ПериодОтчета = &ПериодОтчета";
	
	Для каждого КлючИЗначение Из СтруктураКлючевыхРеквизитов Цикл
		
		Если КлючИЗначение.Ключ="ПравилоОбработки" 
			ИЛИ КлючИЗначение.Ключ="ДополнительныеВалюты"
			ИЛИ КлючИЗначение.Ключ="РежимКорректировки"
			ИЛИ КлючИЗначение.Ключ="СохранятьИсториюИзменений" Тогда
			
			Продолжить;
			
		ИначеЕсли КлючИЗначение.Ключ="ОсновнаяВалюта" Тогда
			
			ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
			|И ВерсииЗначенийПоказателей.Валюта=&ОсновнаяВалюта";
			
			ЗапросВерсия.УстановитьПараметр(КлючИЗначение.Ключ,КлючИЗначение.Значение);
			
		Иначе
			
			ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
			|И ВерсииЗначенийПоказателей."+КлючИЗначение.Ключ+"=&"+КлючИЗначение.Ключ;
			
			ЗапросВерсия.УстановитьПараметр(КлючИЗначение.Ключ,КлючИЗначение.Значение);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если ЭтоЧерноваяЗапись() Тогда
		
		ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
		|И ВерсииЗначенийПоказателей.ЧерноваяВерсия
		|И ВерсииЗначенийПоказателей.ИдентификаторСеанса=&ИдентификаторСеанса";
		
		ЗапросВерсия.УстановитьПараметр("ИдентификаторСеанса", 	ИдентификаторСеанса);
		
	Иначе
		
		ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
		|И НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия";
		
	КонецЕсли;
	
	ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
	|УПОРЯДОЧИТЬ ПО
	|	ВерсииЗначенийПоказателей.Код Убыв";
	
	ЗапросВерсия.УстановитьПараметр("ВидОтчета", 	ТекВидОтчета);
	ЗапросВерсия.УстановитьПараметр("ПериодОтчета", ПериодРасчета);
	
	Результат=ЗапросВерсия.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Возврат Результат.Ссылка;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
КонецФункции // ПолучитьПоследнююВерсию() 

Процедура ЗаписатьКомментарииЗначенийПоказателей(СтруктураКлючевыхРеквизитов,ЗапросДанные)
	
	СтруктураВалют=ПолучитьСтруктуруВалют(СтруктураКлючевыхРеквизитов.Организация,СтруктураКлючевыхРеквизитов.Сценарий,СтруктураКлючевыхРеквизитов.ПериодОтчета);
				
	СтруктураКлючевыхРеквизитов.Вставить("ОсновнаяВалюта",СтруктураВалют.ОсновнаяВалюта);
	Версия=ПолучитьПоследнююВерсию(СтруктураКлючевыхРеквизитов,ОсновнойВидОтчета,СтруктураКлючевыхРеквизитов.ПериодОтчета);
	
	Если Версия=Неопределено Тогда
				
		СтруктураКлючевыхРеквизитов.Вставить("ВидОтчета", ОсновнойВидОтчета);
		СтруктураКлючевыхРеквизитов.Вставить("СохранятьИсториюИзменений", ?(СтруктураКлючевыхРеквизитов.Свойство("СохранятьИсториюИзменений"),Истина,ОсновнойВидОтчета.СохранятьИсториюИзменений));
		СтруктураКлючевыхРеквизитов.Вставить("РазделениеПоПроектам", ОсновнойВидОтчета.РазделениеПоПроектам);
		СтруктураКлючевыхРеквизитов.Вставить("ПредставлениеОбъекта", "");
		СтруктураКлючевыхРеквизитов.Вставить("СпособФормированияОтчета", Перечисления.СпособыФормированияОтчетов.РучноеЗаполнение);
		СтруктураКлючевыхРеквизитов.Вставить("РежимКорректировки", Ложь);
		СтруктураКлючевыхРеквизитов.Вставить("ВерсияХранимогоФайла");
		СтруктураКлючевыхРеквизитов.Вставить("Вариант");
		СтруктураКлючевыхРеквизитов.Вставить("АктивностьДвижений", Истина);
		СтруктураКлючевыхРеквизитов.Вставить("ДатаИзмененияMs", ДатаИзмененияMs);
		
		Версия=УправлениеОтчетамиУХ.ПолучитьРабочуюВерсию(ПодготовитьСтруктуруПеременныхДляРасчета(СтруктураКлючевыхРеквизитов));
		
	КонецЕсли;
	
	Если Версия=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МаксАналитикОтчета=ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(ОсновнойВидОтчета);
	РезультатЗапроса=ЗапросДанные.ВыполнитьПакет();
	ТаблицаДанных=РезультатЗапроса[4].Выгрузить();
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.ЧислоАналитик, 0) КАК ЧислоАналитикГруппыРаскрытия,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.Валютная, ЛОЖЬ) КАК Валютный,
	|	ПоказателиОтчетов.ЧисловойПоказатель
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &ВидОтчета
	|	И ПоказателиОтчетов.Ссылка В(&МассивПоказателей)";
	
	Запрос.УстановитьПараметр("ВидОтчета",ОсновнойВидОтчета);
	Запрос.УстановитьПараметр("МассивПоказателей",ТаблицаДанных.ВыгрузитьКолонку("ПоказательОтчета"));
	
	ТабПоказатели=Запрос.Выполнить().Выгрузить();
	
	ДанныеПоказателей=Новый Соответствие;
	
	Для Каждого СтрПоказатель ИЗ ТабПоказатели Цикл
		
		ДанныеПоказателей.Вставить(СтрПоказатель.Ссылка,СтрПоказатель);
		
	КонецЦикла;
	
	Для Каждого СтрокаДанные ИЗ ТаблицаДанных Цикл
		
		СтруктураОтбора=Новый Структура;
		СтруктураОтбора.Вставить("Версия",Версия);
		СтруктураОтбора.Вставить("Показатель",СтрокаДанные.ПоказательОтчета);
		
		Если СтрокаДанные.СинтетическоеЗначение Тогда
			
			Для Индекс=1 По МаксАналитикОтчета Цикл
				
				СтруктураОтбора.Вставить("Аналитика"+Индекс,СтрокаДанные["Аналитика"+Индекс]);
				
			КонецЦикла;
					
		Иначе
			
			Показатель=ДанныеПоказателей[СтрокаДанные.ПоказательОтчета];
			
			Если Показатель.ЧисловойПоказатель И Показатель.Валютный Тогда 
					
				СтруктураОтбора.Вставить("АналитикаВалюта",СтрокаДанные.АналитикаВалюта);
														
			КонецЕсли;
			
			Для Индекс=(МаксАналитикОтчета+1) По (МаксАналитикОтчета+Показатель.ЧислоАналитикГруппыРаскрытия) Цикл
				
				СтруктураОтбора.Вставить("Аналитика"+Индекс,СтрокаДанные["Аналитика"+Индекс]);
				
			КонецЦикла;
					
		КонецЕсли;
		
		НаборЗаписей=РегистрыСведений.КомментарииЗначенийПоказателей.СоздатьНаборЗаписей();
		
		Для Каждого КлючИЗначение ИЗ СтруктураОтбора Цикл
			
			НаборЗаписей.Отбор[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
			
		КонецЦикла;
			
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()=0 Тогда
			
			НоваяСтрока=НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураОтбора);
			НоваяСтрока.Комментарий=СтрокаДанные.ТекстКомментария;
			
		Иначе
			
			НаборЗаписей[0].Комментарий=СтрокаДанные.ТекстКомментария;
				
		КонецЕсли;

		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры // ЗаписатьКомментарииЗначенийПоказателей()

Функция ПроверитьЗаполнениеКлючевыхРеквизитов(ВидОтчета,КлючевыеРеквизиты)
	
	ТекстОшибки="";
	
	Если НЕ ЗначениеЗаполнено(КлючевыеРеквизиты.Организация) Тогда
		
		ТекстОшибки=ТекстОшибки+НСтр("ru = '
		|Организация'");
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КлючевыеРеквизиты.ПериодОтчета) Тогда
		
		ТекстОшибки=ТекстОшибки+НСтр("ru = '
		|Период'");
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КлючевыеРеквизиты.Сценарий) Тогда
		
		ТекстОшибки=ТекстОшибки+НСтр("ru = '
		|Сценарий'");
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КлючевыеРеквизиты.ОсновнаяВалюта) Тогда
		
		ТекстОшибки=ТекстОшибки+НСтр("ru = '
		|Основная валюта'");
		
	КонецЕсли;
	
	Если ВидОтчета.РазделениеПоПроектам И (НЕ ЗначениеЗаполнено(КлючевыеРеквизиты.Проект)) Тогда
		
		ТекстОшибки=ТекстОшибки+НСтр("ru = '
		|Проект'");
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не заполнены один или несколько ключевых реквизитов: %ТекстОшибки%
		|		Заполнение про правилу отменено'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстОшибки%", Строка(ТекстОшибки));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения,,,СтатусСообщения.Внимание);
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;	
	
КонецФункции // ПроверитьЗаполнениеКлючевыхРеквизитов()

Функция ПолучитьСтруктуруВалют(Организация,Сценарий,ПериодОтчета)
	
	ТекДополнительныеВалюты=ВалютыОтчетности.ВыгрузитьКолонки("Валюта");
	
	ТекТаблицаВалют=ВалютыОтчетности.Выгрузить(Новый Структура("Организация,Сценарий,ПериодОтчета",Организация,Сценарий,ПериодОтчета),"Валюта,ОсновнаяВалюта");
	
	СтруктураВалют=Новый Структура;
	
	Для Каждого Строка ИЗ ТекТаблицаВалют Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Валюта) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если Строка.ОсновнаяВалюта Тогда
			
			СтруктураВалют.Вставить("ОсновнаяВалюта",Строка.Валюта);
			
		Иначе
			
			НоваяСтрока=ТекДополнительныеВалюты.Добавить();
			НоваяСтрока.Валюта=Строка.Валюта;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ СтруктураВалют.Свойство("ОсновнаяВалюта") Тогда
		
		СтруктураВалют.Вставить("ОсновнаяВалюта",ВалютаОтображения);
		
	КонецЕсли;
	
	Если ДополнительныеВалюты.Количество()>0 Тогда
		
		СтруктураВалют.Вставить("ДополнительныеВалюты",ДополнительныеВалюты.Выгрузить(Новый Структура("Организация,Сценарий",Организация,Сценарий),"Валюта"));
		
	Иначе
		
		СтруктураВалют.Вставить("ДополнительныеВалюты",ТекДополнительныеВалюты);
		
	КонецЕсли;
				
	Возврат СтруктураВалют;
		
КонецФункции // ПолучитьСтруктуруВалют()
 
Процедура ЗаписатьЗначенияПоказателей(СтруктураКлючевыхРеквизитов,ЗапросДанные) Экспорт
	
	РезультатЗапроса=ЗапросДанные.ВыполнитьПакет();
	ЗависимыеПоказатели.Очистить();
	ДеревоПересчета.Строки.Очистить();
	
	СтруктураКлючевыхРеквизитов.Вставить("ВидОтчета",ОсновнойВидОтчета);
	ИзмененНечисловойПоказатель=Ложь;
	
	СтруктураВалют=ПолучитьСтруктуруВалют(СтруктураКлючевыхРеквизитов.Организация,СтруктураКлючевыхРеквизитов.Сценарий,СтруктураКлючевыхРеквизитов.ПериодОтчета);
				
	СтруктураКлючевыхРеквизитов.Вставить("ОсновнаяВалюта",		СтруктураВалют.ОсновнаяВалюта);
	СтруктураКлючевыхРеквизитов.Вставить("ДополнительныеВалюты",СтруктураВалют.ДополнительныеВалюты);
	
	Если НЕ ЗначениеЗаполнено(ВалютаОтображения) Тогда
		
		ВалютаОтображения=СтруктураВалют.ОсновнаяВалюта;
		
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ПравилоОбработки) Тогда
		
		СтруктураРеквизитов=ПолучитьСтруктуруРеквизитов(СтруктураКлючевыхРеквизитов.ВидОтчета,СтруктураКлючевыхРеквизитов.Организация,СтруктураКлючевыхРеквизитов.Сценарий,СтруктураКлючевыхРеквизитов.ПериодОтчета);
		СтруктураКлючевыхРеквизитов.Вставить("ПравилоОбработки",СтруктураРеквизитов.ПравилоОбработки);
		
	Иначе
		
		СтруктураКлючевыхРеквизитов.Вставить("ПравилоОбработки",ПравилоОбработки);
		
	КонецЕсли;	
	
	СтруктураКлючевыхРеквизитов.Вставить("РежимКорректировки",РежимКорректировки);
	
	ИнициализироватьКонтекст(СтруктураКлючевыхРеквизитов,СтруктураКлючевыхРеквизитов.ВидОтчета,СтруктураКлючевыхРеквизитов.ПериодОтчета,РезультатЗапроса);
	НомерТекущейОперации=1;
	
	ОбъектРасчета=ПодготовитьСтруктуруПеременныхДляРасчета(СтруктураКлючевыхРеквизитов);
	ОбъектРасчета.Вставить("ПоказательОтчета",мПоказатели[0].Ссылка);
		
	/////////////////////////////////////////////////////////////////////////////////////////////////
	
	МассивПоказатели=Новый Массив;
	
	ТаблицаДанных=РезультатЗапроса[4].Выгрузить();
	
	Для Каждого СтрокаДанные ИЗ ТаблицаДанных Цикл
		
		Показатель=мСоответствиеДляПоискаПоСсылке[СтрокаДанные.ПоказательОтчета];
		
		Если НЕ Показатель.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			
			ОбъектРасчета.ИзмененНечисловойПоказатель=Истина;
			
		КонецЕсли;
		
		Если НЕ СтруктураКлючевыхРеквизитов.ОсновнаяВалюта=ВалютаОтображения Тогда
			
			ПересчитатьВОсновнуюВалюту(СтруктураКлючевыхРеквизитов,СтрокаДанные,Показатель);
			
		КонецЕсли;
		
		Если СтрокаДанные.СинтетическоеЗначение Тогда
						
			СтруктураЗначение=Новый Структура("Значение",?(СтрокаДанные.ЗначениеНечисловое=Неопределено,СтрокаДанные.Значение,СтрокаДанные.ЗначениеНечисловое));
			
			УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказатели(ОбъектРасчета,Показатель,СтруктураЗначение);
			МассивПоказатели.Добавить(СтрокаДанные.ПоказательОтчета);
			
			Продолжить;
			
		КонецЕсли; 
		
		СтруктураЗаписи=Новый Структура;
		
		Для Индекс=МаксАналитикОтчета+1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			СтруктураЗаписи.Вставить("Аналитика"+Индекс,СтрокаДанные["Аналитика"+Индекс]); 
			
		КонецЦикла;
				
		СтруктураЗаписи.Вставить("АналитикаВалюта",СтрокаДанные["АналитикаВалюта"]);	
		СтруктураЗаписи.Вставить("Показатель",СтрокаДанные.ПоказательОтчета);
		
		Если ЗначениеЗаполнено(СтрокаДанные.Значение)
			ИЛИ ЗначениеЗаполнено(СтрокаДанные.ЗначениеВалюта)
			ИЛИ (НЕ СтрокаДанные.ЗначениеНечисловое=Неопределено)  Тогда
			
			Если Показатель.Валютный И Показатель.ПересчитыватьВалютнуюСумму Тогда
				
				РассчитатьСтрокуВалютногоПоказателя(СтруктураКлючевыхРеквизитов,СтрокаДанные,Показатель);
				
			КонецЕсли;
			
			ДанныеДляЗаписи=Новый Структура("Значение,ЗначениеВалюта",?(СтрокаДанные.ЗначениеНечисловое=Неопределено,СтрокаДанные.Значение,СтрокаДанные.ЗначениеНечисловое),СтрокаДанные.ЗначениеВалюта);
			
		Иначе
			
			ДанныеДляЗаписи=Неопределено;
			
		КонецЕсли; 
		
		УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ОбъектРасчета,ДанныеДляЗаписи,СтруктураЗаписи);
		
	КонецЦикла; 
	
	ПоказателиДляИтогов=РезультатЗапроса[3].Выгрузить().ВыгрузитьКолонку("ПоказательОтчета");
		
	УправлениеОтчетамиУХ.ПолучитьИтогиПоПоказателямСостояние(ОбъектРасчета,ПоказателиДляИтогов); 
	
	мПоказатели.ЗаполнитьЗначения(Неопределено,"ДанныеРасчета");
	мПоказатели.ЗаполнитьЗначения(Ложь,"СохраненныеДанныеАктуальны");
							
	Если ЗаписатьИзмененияВРегистр(ОбъектРасчета) Тогда
		
		Если (НЕ ИзменениеСостояний) Тогда
			
			ОбъектРасчета.Вставить("РежимКорректировки",Ложь);
			СтруктураКлючевыхРеквизитов.Вставить("РежимКорректировки",Ложь);
			
			ПоказателиКПересчету=ОбъектРасчета.МассивИзмененныхПоказателей;
			ОбъектРасчета.Вставить("ПоказателиКПересчету",ПоказателиКПересчету);	
			
			Если НЕ ОчисткаЗначенийПоказателей Тогда
				
				СтруктураКлючевыхРеквизитов.Вставить("ВключатьВидОтчета",Истина);
				РассчитатьРекурсивноЗависимыеПоказатели(ОбъектРасчета,СтруктураКлючевыхРеквизитов);
				
			КонецЕсли;
			
			Если (НЕ ЭтоЧерноваяЗапись()) И РассчитыватьЗависимые Тогда
				
				СтруктураКлючевыхРеквизитов.Вставить("ВключатьВидОтчета",Ложь);
				РассчитатьРекурсивноЗависимыеПоказатели(ОбъектРасчета,СтруктураКлючевыхРеквизитов);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

Процедура РассчитатьСтрокуВалютногоПоказателя(СтруктураКлючевыхРеквизитов,СтрокаДанные,Показатель)
		
	ТекВидКурса=?(ЗначениеЗаполнено(Показатель.ВидКурса),Показатель.ВидКурса,Перечисления.ВидыКурсов.СреднийКурсЗаПериод);
	
	ДанныеКурсаОсновнаяВалюта=ПолучитьДанныеКурса(СтруктураКлючевыхРеквизитов.ОсновнаяВалюта,СтруктураКлючевыхРеквизитов.Сценарий,СтруктураКлючевыхРеквизитов.ПериодОтчета,ТекВидКурса);
	
	Если ДанныеКурсаОсновнаяВалюта.Курс=0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указан вид курса %ВидКурса% по сценарию %Сценарий% на период %ПериодОтчета% для валюты %ОсновнаяВалюта%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидКурса%", Строка(ТекВидКурса));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сценарий%", Строка(СтруктураКлючевыхРеквизитов.Сценарий));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПериодОтчета%", Строка(СтруктураКлючевыхРеквизитов.ПериодОтчета));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОсновнаяВалюта%", Строка(СтруктураКлючевыхРеквизитов.ОсновнаяВалюта));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
		Возврат;
		
	КонецЕсли;
	
	ДанныеКурсаАналитикаВалюта=ПолучитьДанныеКурса(СтрокаДанные.АналитикаВалюта,СтруктураКлючевыхРеквизитов.Сценарий,СтруктураКлючевыхРеквизитов.ПериодОтчета,ТекВидКурса);
	
	Если ДанныеКурсаАналитикаВалюта.Курс=0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указан вид курса %ВидКурса% по сценарию %Сценарий% на период %ПериодОтчета% для валюты %АналитикаВалюта%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидКурса%",			 Строка(ТекВидКурса));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сценарий%",			 Строка(СтруктураКлючевыхРеквизитов.Сценарий));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПериодОтчета%",		 Строка(СтруктураКлючевыхРеквизитов.ПериодОтчета));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%АналитикаВалюта%",	 Строка(СтрокаДанные.АналитикаВалюта));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанные.Значение) Тогда
		
		ИсходныйКурс		= ДанныеКурсаОсновнаяВалюта.Курс;
		ИсходнаяКратность	= ДанныеКурсаОсновнаяВалюта.Кратность;
		
		НовыйКурс		= ДанныеКурсаАналитикаВалюта.Курс;
		НоваяКратность	= ДанныеКурсаАналитикаВалюта.Кратность;
		
		СтрокаДанные.ЗначениеВалюта=СтрокаДанные.Значение * (ИсходныйКурс * НоваяКратность) / (НовыйКурс * ИсходнаяКратность);
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаДанные.ЗначениеВалюта) Тогда
		
		ИсходныйКурс		= ДанныеКурсаАналитикаВалюта.Курс;
		ИсходнаяКратность	= ДанныеКурсаАналитикаВалюта.Кратность;
		
		НовыйКурс		= ДанныеКурсаОсновнаяВалюта.Курс;
		НоваяКратность	= ДанныеКурсаОсновнаяВалюта.Кратность;
		
		СтрокаДанные.Значение=СтрокаДанные.ЗначениеВалюта * (ИсходныйКурс * НоваяКратность) / (НовыйКурс * ИсходнаяКратность);
		
	КонецЕсли;	
	
КонецПроцедуры // РассчитатьСтрокуВалютногоПоказателя()

Процедура ПересчитатьВОсновнуюВалюту(СтруктураКлючевыхРеквизитов,СтрокаДанные,Показатель)
		
	Если Показатель.НеФинансовый Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекВидКурса=?(ЗначениеЗаполнено(Показатель.ВидКурса),Показатель.ВидКурса,Перечисления.ВидыКурсов.СреднийКурсЗаПериод);
		
	ДанныеКурсаОсновнаяВалюта=ПолучитьДанныеКурса(СтруктураКлючевыхРеквизитов.ОсновнаяВалюта,СтруктураКлючевыхРеквизитов.Сценарий,СтруктураКлючевыхРеквизитов.ПериодОтчета,ТекВидКурса);
	
	Если ДанныеКурсаОсновнаяВалюта.Курс=0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указан вид курса %ВидКурса% по сценарию %Сценарий% на период %ПериодОтчета% для валюты %ОсновнаяВалюта%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидКурса%", Строка(ТекВидКурса));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сценарий%", Строка(СтруктураКлючевыхРеквизитов.Сценарий));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПериодОтчета%", Строка(СтруктураКлючевыхРеквизитов.ПериодОтчета));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОсновнаяВалюта%", Строка(СтруктураКлючевыхРеквизитов.ОсновнаяВалюта));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
		Возврат;
		
	КонецЕсли;
	
	ДанныеКурсаВалютаОтображения=ПолучитьДанныеКурса(ВалютаОтображения,СтруктураКлючевыхРеквизитов.Сценарий,СтруктураКлючевыхРеквизитов.ПериодОтчета,ТекВидКурса);
	
	Если ДанныеКурсаВалютаОтображения.Курс=0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указан вид курса %ВидКурса% по сценарию %Сценарий% на период %ПериодОтчета% для валюты %ВалютаОтображения%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидКурса%", Строка(ТекВидКурса));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сценарий%", Строка(СтруктураКлючевыхРеквизитов.Сценарий));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПериодОтчета%", Строка(СтруктураКлючевыхРеквизитов.ПериодОтчета));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВалютаОтображения%", Строка(ВалютаОтображения));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
		Возврат;
		
	КонецЕсли;
	
	ИсходныйКурс		= ДанныеКурсаВалютаОтображения.Курс;
	ИсходнаяКратность	= ДанныеКурсаВалютаОтображения.Кратность;
	
	НовыйКурс			= ДанныеКурсаОсновнаяВалюта.Курс;
	НоваяКратность		= ДанныеКурсаОсновнаяВалюта.Кратность;
	
	СтрокаДанные.Значение=СтрокаДанные.Значение * (ИсходныйКурс * НоваяКратность) / (НовыйКурс * ИсходнаяКратность);
			
КонецПроцедуры // ПересчитатьВОсновнуюВалюту()

Функция ПолучитьДанныеКурса(Валюта,Сценарий,ПериодКурса,ВидКурса)
	
	Если ВидыКурсов[ВидКурса]=Неопределено Тогда
		
		Возврат Новый Структура("Курс,Кратность",0,0);
		
	КонецЕсли;
		
	ДанныеКурсов=КэшКурсовВалют.НайтиСтроки(Новый Структура("Валюта,Сценарий,ПериодКурса",Валюта,Сценарий,ПериодКурса));
	
	Если ДанныеКурсов.Количество()=0 Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ПериодическиеКурсы.СреднийКурсЗаПериод,
		|	ПериодическиеКурсы.СреднийКурсЗаПериодМСФО,
		|	ПериодическиеКурсы.КурсНаНачалоПериода,
		|	ПериодическиеКурсы.КурсНаКонецПериода,
		|	ПериодическиеКурсы.СреднийКурсЗаПредыдущийПериод,
		|	ПериодическиеКурсы.КурсНаКонецПредыдущегоПериода,
		|	ПериодическиеКурсы.Кратность,
		|	ПериодическиеКурсы.Валюта
		|ИЗ
		|	РегистрСведений.ПериодическиеКурсы КАК ПериодическиеКурсы
		|ГДЕ
		|	ПериодическиеКурсы.Сценарий = &Сценарий
		|	И ПериодическиеКурсы.ПериодКурса = &ПериодКурса";
		
		Запрос.УстановитьПараметр("Сценарий",	Сценарий);
		Запрос.УстановитьПараметр("ПериодКурса",ПериодКурса);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			НоваяСтрока=КэшКурсовВалют.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
			НоваяСтрока.Сценарий=Сценарий;
			НоваяСтрока.ПериодКурса=ПериодКурса;
			
		КонецЦикла;
			
		ДанныеКурсов=КэшКурсовВалют.НайтиСтроки(Новый Структура("Валюта,Сценарий,ПериодКурса",Валюта,Сценарий,ПериодКурса));
		
		Если ДанныеКурсов.Количество()=0 Тогда
			
			Возврат Новый Структура("Курс,Кратность",0,0);
			
		Иначе
			
			Возврат Новый Структура("Курс,Кратность",ДанныеКурсов[0][ВидыКурсов[ВидКурса]],ДанныеКурсов[0].Кратность);

		КонецЕсли;	
			
	Иначе
		
		Возврат Новый Структура("Курс,Кратность",ДанныеКурсов[0][ВидыКурсов[ВидКурса]],ДанныеКурсов[0].Кратность);
		
	КонецЕсли;	
	
КонецФункции // ПолучитьДанныеКурса()

#Область АвтоматичексоеЗаполнениеОбъектов

Функция ЗаполнитьДанныеПоПериодам(ОбъектРасчета) Экспорт
	
	Если ОбъектРасчета.МассивПериодов=Неопределено Тогда
		
		МассивПериодов = ПериодыУХ.ПолучитьПодчиненныеПериоды(ОбъектРасчета.ПериодОтчета.ДатаНачала,ОбъектРасчета.ПериодОкончания.ДатаОкончания,ОбъектРасчета.ПериодОтчета.Периодичность);
	
	Иначе
		
		МассивПериодов=ОбъектРасчета.МассивПериодов;
			
	КонецЕсли;
	
	ТаблицаКлючевыхРеквизитов=ДанныеДляПересчетаПоказателей.ВыгрузитьКолонки("Сценарий,ПериодОтчета,Организация");
	
	Для Каждого Период ИЗ МассивПериодов Цикл
		
		СтрокаПересчет=ДанныеДляПересчетаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПересчет,ОбъектРасчета);
		СтрокаПересчет.ПериодОтчета=Период;
		СтрокаПересчет.СпособФормированияОтчета=СпособФормированияОтчета;
		
		НоваяСтрока=ТаблицаКлючевыхРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ОбъектРасчета);
		НоваяСтрока.ПериодОтчета=Период;
		
	КонецЦикла;
	
	ОбъектРасчета.Свойство("ИдентификаторСеанса",ИдентификаторСеанса);
	ТаблицаСобытийЗагрузкиПериоды=Справочники.ПротоколируемыеСобытия.ПолучитьШаблонТаблицыСобытий();
	
	ВалютаОтображения=ОбъектРасчета.ОсновнаяВалюта;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторСеанса) Тогда
		
		СводнаяТаблицаУХ.ЗаполнитьВалютыПоРегламенту(ЭтотОбъект,ТаблицаКлючевыхРеквизитов);
		
	КонецЕсли;
	
	ЧтениеНеактуальныхЗаписей=УправлениеОтчетамиУХ.ИспользоватьНеактуальныеЗаписи(ОбъектРасчета);
				
	Попытка
		
		РассчитатьЗначенияПоказателей(Ложь,Ложь);		
		Возврат Истина;
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции // ЗаполнитьДанныеПоПериодам() 

Процедура РассчитатьЗначенияПоказателей(ВсегдаЗаписыватьЭкземпляр=Ложь,ИскатьСуществующийЭкземпляр=Истина) Экспорт
	
	АвтоматическийПересчет=Константы.АвтоматическийПересчетЗависимыхПоказателей.Получить();
	
	Для Каждого КлючевыеРеквизиты ИЗ ДанныеДляПересчетаПоказателей Цикл
		
		ШапкаОшибки="";
		
		ТекВидОтчета=?(ЗначениеЗаполнено(КлючевыеРеквизиты.ВидОтчета),КлючевыеРеквизиты.ВидОтчета,КлючевыеРеквизиты.ПравилоОбработки.Владелец);
		
		Если НЕ ПроверитьЗаполнениеКлючевыхРеквизитов(ТекВидОтчета,КлючевыеРеквизиты) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Отказ=Ложь;
		
		Если НЕ ПолныеПраваУХ.ПроверитьВозможностьЗаписиДокументовПоПериодуСценария(КлючевыеРеквизиты.Сценарий,
										КлючевыеРеквизиты.ПериодОтчета,
										КлючевыеРеквизиты.Организация,
										Отказ,
										Нстр("ru = 'Пересчет показателей не выполнен по причине: '"),Ложь) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ ПолныеПраваУХ.ПроверитьВозможностьЗаписДанныхПоСтатусам(КлючевыеРеквизиты.Организация,
										КлючевыеРеквизиты.ПериодОтчета,
										КлючевыеРеквизиты.Сценарий,
										ТекВидОтчета,,,КлючевыеРеквизиты.Проект) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВерсияРегламента = ПолныеПраваУХ.ВернутьВерсиюОрганизационнойСтруктурыПоПериодСценарию(КлючевыеРеквизиты.ПериодОтчета,КлючевыеРеквизиты.Сценарий);
		Режим20=ВерсияРегламента.РежимМногопериодныхУОП;
		ИскатьСуществующийЭкземпляр=(НЕ Режим20) И ИскатьСуществующийЭкземпляр;
		
		Если ЗначениеЗаполнено(КлючевыеРеквизиты.СпособФормированияОтчета) Тогда
			
			СпособФормированияОтчета=КлючевыеРеквизиты.СпособФормированияОтчета;
			
		Иначе
			
			СпособФормированияОтчета 	= УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.СпособФормированияОтчета, ВидОтчета, КлючевыеРеквизиты.Сценарий, КлючевыеРеквизиты.Организация, КлючевыеРеквизиты.ПериодОтчета, ВерсияРегламента);
			СпособФормированияОтчета=?(ЗначениеЗаполнено(СпособФормированияОтчета),СпособФормированияОтчета,Перечисления.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки);
			
		КонецЕсли;
		
		Если СпособФормированияОтчета=Перечисления.СпособыФормированияОтчетов.АвтоматическиКонсолидация 
			И (Не УправлениеРабочимиПроцессамиУХ.ОрганизацияЯвляетсяКонсолидирующей(
				КлючевыеРеквизиты.Организация, КлючевыеРеквизиты.Сценарий, КлючевыеРеквизиты.ПериодОтчета)) Тогда
				
			ТекстСообщения = НСтр("ru = '%Организация%: консолидация по периметру доступна только для консолидирующих организационных единиц.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(КлючевыеРеквизиты.Организация));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
			Продолжить;
			
		КонецЕсли;
				
		СтруктураВалют=ПолучитьСтруктуруВалют(КлючевыеРеквизиты.Организация,КлючевыеРеквизиты.Сценарий,КлючевыеРеквизиты.ПериодОтчета);
		
		Если  ИскатьСуществующийЭкземпляр Тогда
		
		ДокументСсылка=Документы.НастраиваемыйОтчет.ПолучитьЭкземплярОтчета(КлючевыеРеквизиты.Организация,
											КлючевыеРеквизиты.ПериодОтчета,
											КлючевыеРеквизиты.Сценарий,
											ТекВидОтчета,
											КлючевыеРеквизиты.ОсновнаяВалюта,
											Истина,ВсегдаЗаписыватьЭкземпляр ИЛИ (НЕ СпособФормированияОтчета=Перечисления.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки),,КлючевыеРеквизиты.Проект);
											
		Иначе
			
			ДокументСсылка=Неопределено;
			
		КонецЕсли;
											
		Если ЗначениеЗаполнено(ДокументСсылка) Тогда
			
			ДокументОбъект=ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.ПравилоОбработки=КлючевыеРеквизиты.ПравилоОбработки;
			
			Если ЗначениеЗаполнено(КлючевыеРеквизиты.ИспользуемаяИБ) Тогда
				
				ДокументОбъект.ИспользуемаяИБ=КлючевыеРеквизиты.ИспользуемаяИБ;
				
			ИначеЕсли ЗначениеЗаполнено(КлючевыеРеквизиты.ПравилоОбработки.ТипБД) И (НЕ ДокументОбъект.ИспользуемаяИБ.ТипБД=КлючевыеРеквизиты.ПравилоОбработки.ТипБД) Тогда
				
				ДокументОбъект.ИспользуемаяИБ=КлючевыеРеквизиты.ПравилоОбработки.ТипБД.ВИБПоУмолчанию;
				
			КонецЕсли;
			
		Иначе
			
			ДокументОбъект=Документы.НастраиваемыйОтчет.СоздатьДокумент();			
			ЗаполнитьЗначенияСвойств(ДокументОбъект,КлючевыеРеквизиты);
			ДокументОбъект.ВидОтчета=ТекВидОтчета;
			
			Если ЗначениеЗаполнено(КлючевыеРеквизиты.ИспользуемаяИБ) Тогда
				
				ДокументОбъект.ИспользуемаяИБ=КлючевыеРеквизиты.ИспользуемаяИБ;
				
			Иначе
				
				СтруктураРеквизитов= УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(ТекВидОтчета, КлючевыеРеквизиты.Сценарий, КлючевыеРеквизиты.Организация, КлючевыеРеквизиты.ПериодОтчета);	
				СтруктураРеквизитов.Свойство("ВИБ",ДокументОбъект.ИспользуемаяИБ);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КлючевыеРеквизиты.ПравилоОбработки.ТипБД) И (НЕ ЗначениеЗаполнено(ДокументОбъект.ИспользуемаяИБ)) Тогда
				
				ДокументОбъект.ИспользуемаяИБ=КлючевыеРеквизиты.ПравилоОбработки.ТипБД.ВИБПоУмолчанию;
				
			КонецЕсли;
				
			Для Каждого Строка ИЗ СтруктураВалют.ДополнительныеВалюты Цикл
				
				НоваяСтрока=ДокументОбъект.ДополнительныеВалюты.Добавить();
				НоваяСтрока.Валюта=Строка.Валюта;
				
			КонецЦикла;
			
		КонецЕсли;
				
		ДокументОбъект.ВсегдаЗаполнятьАналитики=Истина;
		ДокументОбъект.ЧтениеНеактуальныхЗаписей=ЧтениеНеактуальныхЗаписей;
		
		Если ЭтоЧерноваяЗапись() Тогда
			
			ДокументОбъект.ИдентификаторСеанса=ИдентификаторСеанса;
			ДокументОбъект.Регистратор = Регистратор;
			
		КонецЕсли;
		
		ДокументОбъект.ЗаполнитьОтчет(?(ЗначениеЗаполнено(СпособФормированияОтчета),СпособФормированияОтчета,Перечисления.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки));

		ОбъектРасчета=ДокументОбъект.ПодготовитьСтруктуруПеременныхДляРасчета();
		ОбъектРасчета.Удалить("Ссылка");
		ОбъектРасчета.Вставить("ПересчетВалюты",Ложь);
		
		Если ЭтоЧерноваяЗапись() Тогда
			
			ОбъектРасчета.Вставить("ИдентификаторСеанса",	ИдентификаторСеанса);
			ОбъектРасчета.Вставить("ЧерноваяВерсия",Истина);
			ОбъектРасчета.Вставить("СохранятьИсториюИзменений",Истина);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Регистратор) Тогда // 
			
			Если ТипЗнч(Регистратор)=Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда //расчет мультипериодного экземпляра отчета
				
				ОбъектРасчета.Вставить("Ссылка",			Регистратор);
				ОбъектРасчета.Вставить("ЭкземплярОтчета",	Регистратор);
				ОбъектРасчета.Вставить("Регистратор",		Регистратор);
				
			Иначе // Корректироовка значений показателей
				
				ОбъектРасчета.Вставить("Ссылка",			Регистратор);
				ОбъектРасчета.Вставить("Регистратор",		Регистратор);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗаписатьИзмененияВРегистр(ОбъектРасчета) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДополнитьЛогИзмененныхПоказателейСТ(ОбъектРасчета);
		ДополнитьПротоколЗагрузки(ДокументОбъект.ТаблицаСобытийЗагрузки);
		
		Если НЕ (СпособФормированияОтчета=Перечисления.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки
				ИЛИ СпособФормированияОтчета=Перечисления.СпособыФормированияОтчетов.Импорт) Тогда
				
			АвтоматическийПересчет=Ложь;
				
		КонецЕсли;
					
		Если НЕ ОбъектРасчета.Свойство("ЧерноваяВерсия") Тогда
			
			ДокументОбъект.РассчитатьПоказателиЭффективности();
			
			Если ВсегдаЗаписыватьЭкземпляр ИЛИ (НЕ (Режим20 ИЛИ СпособФормированияОтчета=Перечисления.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки)) Тогда
				
				ДокументОбъект.ОбменДанными.Загрузка=Истина;
				ДокументОбъект.Записать();
				
			КонецЕсли;
			
			Если АвтоматическийПересчет И ОбъектРасчета.Свойство("МассивИзмененныхПоказателей") Тогда
				
				СтруктураКлючевыхРеквизитов=Новый Структура;
				СтруктураКлючевыхРеквизитов.Вставить("Организация",ДокументОбъект.Организация);
				СтруктураКлючевыхРеквизитов.Вставить("ПериодОтчета",ДокументОбъект.ПериодОтчета);
				СтруктураКлючевыхРеквизитов.Вставить("Сценарий",ДокументОбъект.Сценарий);
				СтруктураКлючевыхРеквизитов.Вставить("Проект",ДокументОбъект.Проект);
				СтруктураКлючевыхРеквизитов.Вставить("ВидОтчета",ДокументОбъект.ВидОтчета);
				СтруктураКлючевыхРеквизитов.Вставить("ОсновнаяВалюта",ДокументОбъект.ОсновнаяВалюта);
				СтруктураКлючевыхРеквизитов.Вставить("ПравилоОбработки",ДокументОбъект.ПравилоОбработки);
				СтруктураКлючевыхРеквизитов.Вставить("Регистратор",ДокументОбъект.Ссылка);
				СтруктураКлючевыхРеквизитов.Вставить("ДополнительныеВалюты",ДокументОбъект.ДополнительныеВалюты.Выгрузить());
				
				Для Индекс=1 По ДокументОбъект.МаксАналитикОтчета Цикл
					
					СтруктураКлючевыхРеквизитов.Вставить("Аналитика"+Индекс,ДокументОбъект["Аналитика"+Индекс]);
					
				КонецЦикла;
				
				СтруктураПеременных=ПодготовитьСтруктуруПеременныхДляРасчета(СтруктураКлючевыхРеквизитов);
				
				Для Каждого КлючИЗначение ИЗ ОбъектРасчета Цикл
					
					СтруктураПеременных.Вставить(КлючИЗначение.Ключ,КлючИЗначение.Значение);
					
				КонецЦикла;
				
				СтруктураКлючевыхРеквизитов.Вставить("ВключатьВидОтчета",Ложь);
				
				РассчитатьРекурсивноЗависимыеПоказатели(ОбъектРасчета,СтруктураКлючевыхРеквизитов,Ложь);
				
			КонецЕсли;	
						
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РассчитатьЗначенияПоказателей()

Процедура ДополнитьПротоколЗагрузки(ПротоколПериод)
	
	Если ТипЗнч(ТаблицаСобытийЗагрузкиПериоды)=Тип("ТаблицаЗначений") 
		И ТипЗнч(ПротоколПериод)=Тип("ТаблицаЗначений") Тогда
		
		Для Каждого Строка Из ПротоколПериод Цикл
			
			// Необходимо устранить дублирование записей в протоколе
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Событие", 							СокрЛП(Строка.Событие));
			СтруктураПоиска.Вставить("Сообщение", 							СокрЛП(Строка.Сообщение));
			СтруктураПоиска.Вставить("ТехническаяИнформацияСтрокаВнутр", 	СокрЛП(Строка.ТехническаяИнформацияСтрокаВнутр));
			СтруктураПоиска.Вставить("ТипЗаписи", 							Строка.ТипЗаписи);
			СтруктураПоиска.Вставить("ОбъектДанных", 						Строка.ОбъектДанных);
			СтруктураПоиска.Вставить("ОбъектМетаданных", 					Строка.ОбъектМетаданных);
			
			Строки = ТаблицаСобытийЗагрузкиПериоды.НайтиСтроки(СтруктураПоиска);
			
			Если Строки.Количество()=0 Тогда
				
				Запись=ТаблицаСобытийЗагрузкиПериоды.Добавить();
				
				Запись.Событие 							= СтруктураПоиска.Событие;
				Запись.Дата 							= Строка.Дата;
				Запись.ВремяMs 							= Строка.ВремяMs;
				Запись.Сообщение 						= СтруктураПоиска.Сообщение;
				Запись.ТехническаяИнформацияСтрокаВнутр = СтруктураПоиска.ТехническаяИнформацияСтрокаВнутр;
				Запись.ТипЗаписи 						= СтруктураПоиска.ТипЗаписи;
				Запись.ОбъектДанных 					= СтруктураПоиска.ОбъектДанных;
				Запись.ОбъектМетаданных 				= СтруктураПоиска.ОбъектМетаданных;
				Запись.КонтекстСобытия					= Строка.КонтекстСобытия;
				Запись.ПоказательОтчета					= Строка.ПоказательОтчета;
				Запись.Пользователь						= Строка.Пользователь;
				Запись.ПериодОтчета						= Строка.ПериодОтчета;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры // ДополнитьПротоколЗагрузки()

Процедура ДополнитьЛогИзмененныхПоказателейСТ(ОбъектРасчета)
	
	Если НЕ (ТипЗнч(ЛогИзмененныхПоказателейСТ)=Тип("ТаблицаЗначений") И ЭтоЧерноваяЗапись()) Тогда 
		
		Возврат;
						
	КонецЕсли;
	
	СтруктураПоиска=Новый Структура("Сценарий,ПериодОтчета,Организация,Проект,ПоказательОтчета");
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		СтруктураПоиска.Вставить("Аналитика"+Индекс);
		
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска,ОбъектРасчета);
	
	Для Каждого Показатель ИЗ ОбъектРасчета.МассивИзмененныхПоказателей Цикл
		
		// Записываем лог изменения синтетичексих значений показателей
				
		СтруктураПоиска.ПоказательОтчета=Показатель;		
		текЗначениеПоказателя=ОбъектРасчета.мСоответствиеДляПоискаПоСсылке[Показатель].Значение;
		
		ВыполнятьПоиск=Истина;
		
		ДобавитьСтрокуЛогаСТ(текЗначениеПоказателя,СтруктураПоиска,ВыполнятьПоиск,Истина);
		
		МассивРаскрытий=ОбъектРасчета.мПоказателиРаскрытия.НайтиСтроки(Новый Структура("Показатель",Показатель));
		
		Для Каждого Строка ИЗ МассивРаскрытий Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,Строка);
			СтруктураПоиска.Вставить("АналитикаВалюта",Строка.АналитикаВалюта);
			
			ДобавитьСтрокуЛогаСТ(Строка.Значение,СтруктураПоиска,ВыполнятьПоиск,Ложь,Строка.ЗначениеВалюта);
			
		КонецЦикла;
		
	КонецЦикла;
	
	СторнированиеАналитик=ОбъектРасчета.ЛогИзмененийРаскрытийПоказателей.НайтиСтроки(Новый Структура("СторнированиеАналитики",Истина));
	
	Для Каждого Строка ИЗ СторнированиеАналитик Цикл
		
		СтруктураАналитика=Новый Структура("Показатель,АналитикаВалюта");
		
		Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			СтруктураАналитика.Вставить("Аналитика"+Индекс);
			
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(СтруктураАналитика,Строка);
		
		МассивАналитик=ОбъектРасчета.мПоказателиРаскрытия.НайтиСтроки(СтруктураАналитика);
		
		Если МассивАналитик.Количество()=0 Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,Строка);
			СтруктураПоиска.ПоказательОтчета=Строка.Показатель;
			СтруктураПоиска.Вставить("АналитикаВалюта",Строка.АналитикаВалюта);
			
			ДобавитьСтрокуЛогаСТ(0,СтруктураПоиска,Истина,Ложь,0);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ДополнитьЛогИзмененныхПоказателейСТ() 

Процедура ДобавитьСтрокуЛогаСТ(Значение,СтруктураПоиска,ВыполнятьПоиск,СинтетическоеЗначение,ЗначениеВалюта=0)
	
	Если ВыполнятьПоиск Тогда
		
		МассивПоказателей=ЛогИзмененныхПоказателейСТ.НайтиСтроки(СтруктураПоиска);
		
		Если МассивПоказателей.Количество()=1 Тогда
			
			СтрПоказатель=МассивПоказателей[0];
			
		Иначе
			
			СтрПоказатель=ЛогИзмененныхПоказателейСТ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрПоказатель,СтруктураПоиска);
			
			Если СинтетическоеЗначение Тогда
				
				ВыполнятьПоиск=Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрПоказатель=ЛогИзмененныхПоказателейСТ.Добавить();
		ЗаполнитьЗначенияСвойств(СтрПоказатель,СтруктураПоиска);
		
	КонецЕсли;	
	
	Если ТипЗнч(Значение)=Тип("Число") Тогда
		
		СтрПоказатель.Значение=Значение;
		
	Иначе
		
		СтрПоказатель.ЗначениеНечисловое=Значение;
		
	КонецЕсли;
	
	СтрПоказатель.СинтетическоеЗначение=СинтетическоеЗначение;
	СтрПоказатель.ЗначениеВалюта=ЗначениеВалюта;

КонецПроцедуры // ДобавитьСтрокуЛогаСТ()	

#КонецОбласти

#Область РасчетРекурсивноЗависимых

Функция ПроверитьВозможностьЗапуска(КлючЗадания)
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", КлючЗадания);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		
		Для Каждого АктивноеЗадание из АктивныеЗадания Цикл
			АктивноеЗадание.Отменить();
		КонецЦикла;
		
	КонецЕсли;
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;	
	
КонецФункции // ПроверитьВозможностьЗапуска()

Процедура ДобавитьПересчитанныеПоказатели(ОбъектРасчета)
	
	Если МассивПересчитанныхПоказателей=Неопределено Тогда
		
		МассивПересчитанныхПоказателей=Новый Массив;
		
	КонецЕсли;
	
	Если ОбъектРасчета.Свойство("МассивПересчитанныхПоказателей") Тогда
		
		Для КАждого Показатель ИЗ ОбъектРасчета.МассивПересчитанныхПоказателей Цикл
			
			Если МассивПересчитанныхПоказателей.Найти(Показатель)=Неопределено Тогда
				
				МассивПересчитанныхПоказателей.Добавить(Показатель);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;		
	
КонецПроцедуры // ДобавитьПересчитанныеПоказатели()
	

Процедура РассчитатьРекурсивноЗависимыеПоказатели(ОбъектРасчета,СтруктураКлючевыхРеквизитов,ПересчитыватьТекущие=Истина) Экспорт
	
	СтруктураПеременных=ПодготовитьСтруктуруПеременныхДляРасчета(СтруктураКлючевыхРеквизитов);
	СтруктураПеременных.Вставить("База");
	СтруктураПеременных.Вставить("мТабПоказателиЗапросы");
	
	СтруктураПеременных.Вставить("мСоответствиеДляПоискаПоСсылке");
	СтруктураПеременных.Вставить("мСоответствиеДляПоискаПоСсылкеКорр");
	СтруктураПеременных.Вставить("КэшДатРасчетаПоказателей");
		
	СтруктураПеременных.Вставить("ЧтениеНеактуальныхЗаписей",УправлениеОтчетамиУХ.ИспользоватьНеактуальныеЗаписи(ОбъектРасчета));
	СтруктураПеременных.Вставить("ДатаИзмененияMs",ОбъектРасчета.ДатаИзмененияMs);
	
	Если УправлениеОтчетамиУХ.ЭтоДокументКорректировки(Регистратор) Тогда
		
		СтруктураПеременных.Вставить("СохранятьИсториюИзменений",Истина);
		
	КонецЕсли;		
		
	Если (НЕ СтруктураПеременных.ФоновыйПересчетЗависимыхПоказателей) ИЛИ ТрассировкаРасчета ИЛИ СтруктураКлючевыхРеквизитов.Свойство("ВключатьВидОтчета") Тогда
				
		Если  ТипЗнч(ОбъектРасчета) = Тип("Структура") И ОбъектРасчета.Свойство("мПоказатели") Тогда 
			СтруктураПеременных.Вставить("мПоказатели",ОбъектРасчета.мПоказатели);
		КонецЕсли;
		
		Если ОбъектРасчета.Свойство("Регистратор") Тогда
			
			СтруктураПеременных.Вставить("Регистратор",ОбъектРасчета.Регистратор);
			
		ИначеЕсли ЗначениеЗаполнено(Регистратор) Тогда
			
			СтруктураПеременных.Вставить("Регистратор",Регистратор);
			
		КонецЕсли;
		
		Если ПересчитыватьТекущие Тогда
			
			Если ОбъектРасчета.Свойство("ЭкземплярОтчета") Тогда
				
				СтруктураПеременных.Вставить("ЭкземплярОтчета",ОбъектРасчета.ЭкземплярОтчета);
				
			ИначеЕсли ЗначениеЗаполнено(Регистратор) Тогда
				
				СтруктураПеременных.Вставить("ЭкземплярОтчета",Регистратор);
				
			КонецЕсли;
			
		КонецЕсли;		
		
		ПересчетПоказателейУХ.РассчитатьРекурсивноЗависимыеПоказатели(ОбъектРасчета.МассивИзмененныхПоказателей,СтруктураПеременных,СтруктураКлючевыхРеквизитов,ПересчитыватьТекущие);
		ДобавитьПересчитанныеПоказатели(СтруктураПеременных);
		
		Если ТрассировкаРасчета Тогда
			
			Для Каждого Строка ИЗ СтруктураПеременных.ДанныеТрассировки.ТаблицаИсходныхПоказателей Цикл
				
				НоваяСтрока=ТаблицаИсходныхПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
				
			КонецЦикла;
			
			Для Каждого Строка ИЗ СтруктураПеременных.ДанныеТрассировки.ТаблицаТрассировкиРасчета Цикл
				
				НоваяСтрока=ТаблицаТрассировкиРасчета.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
				
			КонецЦикла;
						
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ОбъектРасчета.Свойство("Ссылка") Тогда 
		
		КлючЗадания=XMLСтрока(ОбъектРасчета.Ссылка);
		
		ПротоколируемыеСобытияУХ.Начать(ОбъектРасчета);		
		
		ПроверитьВозможностьЗапуска(КлючЗадания);
					
		Если  ТипЗнч(ОбъектРасчета) = Тип("Структура") И ОбъектРасчета.Свойство("мПоказатели") Тогда 
			СтруктураПеременных.Вставить("мПоказатели",ОбъектРасчета.мПоказатели);		
		КонецЕсли;
		
		Если ПересчитыватьТекущие Тогда
			
			СтруктураПеременных.Вставить("ЭкземплярОтчета",ОбъектРасчета.Ссылка);
			
		КонецЕсли;
		
		СтруктураПеременных.Вставить("Регистратор",ОбъектРасчета.Ссылка);
				
		// Преобразуем соответствие мСоответствиеДляПоискаПоСсылке.
		Если ТипЗнч(СтруктураПеременных.мСоответствиеДляПоискаПоСсылке) = Тип("Соответствие") Тогда
			НовоеСоответсвиеПоиска = Новый Соответствие;
			Для Каждого ТекСтруктураПеременных Из СтруктураПеременных.мСоответствиеДляПоискаПоСсылке Цикл
				НовоеЗначение = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТекСтруктураПеременных.Значение);
				НовоеСоответсвиеПоиска.Вставить(ТекСтруктураПеременных.Ключ, НовоеЗначение);
			КонецЦикла;	
			СтруктураПеременных.мСоответствиеДляПоискаПоСсылке = НовоеСоответсвиеПоиска;
		Иначе
			// Пропускаем.
		КонецЕсли;
		
		// Преобразуем соответствие мСоответствиеДляПоискаПоСсылкеКорр.
		Если ТипЗнч(СтруктураПеременных.мСоответствиеДляПоискаПоСсылкеКорр) = Тип("Соответствие") Тогда
			НовоеСоответсвиеПоиска = Новый Соответствие;
			Для Каждого ТекСтруктураПеременных Из СтруктураПеременных.мСоответствиеДляПоискаПоСсылкеКорр Цикл
				НовоеЗначение = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТекСтруктураПеременных.Значение);
				НовоеСоответсвиеПоиска.Вставить(ТекСтруктураПеременных.Ключ, НовоеЗначение);
			КонецЦикла;	
			СтруктураПеременных.мСоответствиеДляПоискаПоСсылкеКорр = НовоеСоответсвиеПоиска;
		Иначе
			// Пропускаем.
		КонецЕсли;
		
		// Преобразуем соответствие КэшДатРасчетаПоказателей.
		НовоеСоответсвиеКэшРасчета = Новый Соответствие;
		Если ТипЗнч(СтруктураПеременных.КэшДатРасчетаПоказателей) = Тип("Соответствие") Тогда
			Для Каждого ТекСтруктураПеременных Из СтруктураПеременных.КэшДатРасчетаПоказателей Цикл
				НовыйКлюч = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТекСтруктураПеременных.Ключ);
				НовоеСоответсвиеКэшРасчета.Вставить(НовыйКлюч, ТекСтруктураПеременных.Значение);
			КонецЦикла;	
			СтруктураПеременных.КэшДатРасчетаПоказателей = НовоеСоответсвиеКэшРасчета;
		Иначе
			// Пропускаем.
		КонецЕсли;
		
		СтруктураЗадания=Новый Структура;
		СтруктураЗадания.Вставить("СтруктураПеременных",СтруктураПеременных);
		СтруктураЗадания.Вставить("СтруктураКлючевыхРеквизитов",СтруктураКлючевыхРеквизитов);
		СтруктураЗадания.Вставить("ПересчитыватьТекущие",ПересчитыватьТекущие);
		
		ЗапуститьВыполнениеПересчетаВФоне(СтруктураЗадания,ОбъектРасчета.МассивИзмененныхПоказателей);
				
		ПротоколОшибок=ПротоколируемыеСобытияУХ.Завершить("РасчетРекурсивноЗависимых",,ОбъектРасчета.Ссылка);
		
	Иначе
		
		ШаблонКлючаЗадания=XMLСтрока(СтруктураКлючевыхРеквизитов.Сценарий)+"vzv"+XMLСтрока(СтруктураКлючевыхРеквизитов.Организация)+"vzv"+XMLСтрока(СтруктураКлючевыхРеквизитов.ПериодОтчета);
		
		Если ЗначениеЗаполнено(Регистратор) Тогда
			
			СтруктураКлючевыхРеквизитов.Вставить("Регистратор",Регистратор);
			
		КонецЕсли;
		
		ПротоколируемыеСобытияУХ.Начать(ОбъектРасчета);
		
		Если НЕ СтруктураКлючевыхРеквизитов.Свойство("ВключатьВидОтчета") Тогда
			
			СтруктураКлючевыхРеквизитов.Вставить("ВключатьВидОтчета",Истина);
			
			СтруктураПеременных.Вставить("ПоказателиКПересчету",ОбъектРасчета.МассивИзмененныхПоказателей);
			
			ПересчетПоказателейУХ.РассчитатьРекурсивноЗависимыеПоказатели(ОбъектРасчета.МассивИзмененныхПоказателей,СтруктураПеременных,СтруктураКлючевыхРеквизитов,ПересчитыватьТекущие);
			ДобавитьПересчитанныеПоказатели(СтруктураПеременных);
			ПоказателиКПересчету=СтруктураПеременных.ПоказателиКПересчету;
			
		Иначе
			
			ПоказателиКПересчету=ОбъектРасчета.ПоказателиКПересчету;
			
		КонецЕсли;
		
		СтруктураПеременных=ПодготовитьСтруктуруПеременныхДляРасчета(СтруктураКлючевыхРеквизитов);
		СтруктураПеременных.Вставить("ЧтениеНеактуальныхЗаписей",УправлениеОтчетамиУХ.ИспользоватьНеактуальныеЗаписи(ОбъектРасчета));
		СтруктураКлючевыхРеквизитов.Вставить("ВключатьВидОтчета",Ложь);
		
		СтруктураПеременных.Вставить("База");
		СтруктураПеременных.Вставить("мТабПоказателиЗапросы");
		СтруктураПеременных.Вставить("мСоответствиеДляПоискаПоСсылке");
		СтруктураПеременных.Вставить("мСоответствиеДляПоискаПоСсылкеКорр");
		СтруктураПеременных.Вставить("КэшДатРасчетаПоказателей");
		
		СтруктураЗадания=Новый Структура;
		СтруктураЗадания.Вставить("СтруктураПеременных",		СтруктураПеременных);
		СтруктураЗадания.Вставить("СтруктураКлючевыхРеквизитов",СтруктураКлючевыхРеквизитов);
		СтруктураЗадания.Вставить("ПересчитыватьТекущие",		ПересчитыватьТекущие);
		
		ЗапуститьВыполнениеПересчетаВФоне(СтруктураЗадания,ПоказателиКПересчету);
		
		ПротоколируемыеСобытияУХ.Завершить("РасчетРекурсивноЗависимых",,,,Ложь);
		
	КонецЕсли;
					
КонецПроцедуры // РассчитатьРекурсивноЗависимыеПоказатели()


Процедура ЗапуститьВыполнениеПересчетаВФоне(СтруктураЗадания,ПоказателиКПересчету)
	
	ЧислоПотоков=Константы.КоличествоПараллельныхПотоков.Получить();
	
	Если ОбщегоНазначенияУХ.ИнформационнаяБазаФайловая() ИЛИ ЧислоПотоков<2 Тогда
		
		ЗапуститьПересчетВФоне(СтруктураЗадания,ПоказателиКПересчету,1,ПоказателиКПересчету.Количество());
		
	Иначе
		
		РазмерПорции=Окр(ПоказателиКПересчету.Количество()/ЧислоПотоков);
		
		МассивПересчета=Новый Массив;
		
		Пересчитано=0;
		СтартПересчета=1;
		
		Для Каждого Показатель ИЗ ПоказателиКПересчету Цикл
			
			Пересчитано=Пересчитано+1;
			МассивПересчета.Добавить(Показатель);

			Если МассивПересчета.Количество()=РазмерПорции Тогда
								
				ЗапуститьПересчетВФоне(СтруктураЗадания,МассивПересчета,СтартПересчета,ПоказателиКПересчету.Количество());
				МассивПересчета.Очистить();
				СтартПересчета=Пересчитано+1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивПересчета.Количество()>0 Тогда
			
			ЗапуститьПересчетВФоне(СтруктураЗадания,МассивПересчета,СтартПересчета,ПоказателиКПересчету.Количество());
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры // ЗапуститьВыполнениеПересчетаВФоне()

Процедура ЗапуститьПересчетВФоне(СтруктураЗадания,МассивПересчета,Пересчитано=1,ВсегоПоказателей)
	
	ПараметрыЗадания = Новый Массив();
	
	ПараметрыЗадания.Добавить(МассивПересчета);
	ПараметрыЗадания.Добавить(СтруктураЗадания.СтруктураПеременных);
	ПараметрыЗадания.Добавить(СтруктураЗадания.СтруктураКлючевыхРеквизитов);
	ПараметрыЗадания.Добавить(СтруктураЗадания.ПересчитыватьТекущие);
	
	
	ОписаниеЗадания = НСтр("ru = 'Расчет зависимых показателей от вида отчета: %ВидОтчета%, %Организация%, %ПериодОтчета%: %Количество%'");
	ОписаниеЗадания = СтрЗаменить(ОписаниеЗадания, "%ВидОтчета%", 		Строка(СтруктураЗадания.СтруктураКлючевыхРеквизитов.ВидОтчета));
	ОписаниеЗадания = СтрЗаменить(ОписаниеЗадания, "%Организация%", 	Строка(СтруктураЗадания.СтруктураКлючевыхРеквизитов.Организация));
	ОписаниеЗадания = СтрЗаменить(ОписаниеЗадания, "%ПериодОтчета%", 	Строка(СтруктураЗадания.СтруктураКлючевыхРеквизитов.ПериодОтчета));
	
	СтрокаШаблона = Нстр("ru = '%1 - %2 из %3'");     //Пример: 1 - 5 из 10
	Если Не ПустаяСтрока(СтрокаШаблона) тогда				
		ТекстКоличество = СтрШаблон(СтрокаШаблона, Пересчитано, (Пересчитано+МассивПересчета.Количество()-1), ВсегоПоказателей);
	Иначе
		ТекстКоличество = "" + Пересчитано + " - " + (Пересчитано+МассивПересчета.Количество()-1) + " (" + ВсегоПоказателей + ")";
	КонецЕсли;
		
	ОписаниеЗадания = СтрЗаменить(ОписаниеЗадания, "%Количество%", 	ТекстКоличество);
	
	ФоновыеЗадания.Выполнить("ПересчетПоказателейУХ.РассчитатьРекурсивноЗависимыеПоказатели",ПараметрыЗадания,Новый УникальныйИдентификатор,ОписаниеЗадания);
	
КонецПроцедуры // ЗапуститьПересчетВФоне() 


Функция ПолучитьТаблицуЗависимыхПоМассиву(МассивПоказатели)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеквизитыИсточниковДанныхДляФормул.ПотребительРасчета,
	|	РеквизитыИсточниковДанныхДляФормул.НазначениеРасчетов,
	|	РеквизитыИсточниковДанныхДляФормул.ВидОтчета,
	|	РеквизитыИсточниковДанныхДляФормул.СдвигПериодов,
	|	РеквизитыИсточниковДанныхДляФормул.ПоказательОтбор
	|ИЗ
	|	РегистрСведений.РеквизитыИсточниковДанныхДляФормул КАК РеквизитыИсточниковДанныхДляФормул
	|ГДЕ
	|	РеквизитыИсточниковДанныхДляФормул.ПоказательОтбор В(&МассивПоказатели)
	|	И НЕ РеквизитыИсточниковДанныхДляФормул.НеИспользуется";
	
	Запрос.УстановитьПараметр("МассивПоказатели",МассивПоказатели);
	
	Возврат Запрос.Выполнить().Выгрузить();
			
КонецФункции
 
Функция ПолучитьТаблицуЗависимыхПоказателей(ПотребительРасчета)
	
	ТаблицаПоказателей=КэшЗависимыхПоказателей.Получить(ПотребительРасчета);
	
	Если НЕ ТаблицаПоказателей=Неопределено Тогда
		
		Возврат ТаблицаПоказателей;
		
	КонецЕсли; 
			
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТаблицаЗависимостейПоказателей.НазначениеРасчетов,
	|	ТаблицаЗависимостейПоказателей.ПотребительРасчета,
	|	ТаблицаЗависимостейПоказателей.ВидОтчета,
	|	ТаблицаЗависимостейПоказателей.СдвигПериодов
	|ИЗ
	|	РегистрСведений.ТаблицаЗависимостейПоказателей КАК ТаблицаЗависимостейПоказателей
	|ГДЕ
	|	ТаблицаЗависимостейПоказателей.ПоказательОтчета = &ПоказательОтчета";
	
	Запрос.УстановитьПараметр("ПоказательОтчета",ПотребительРасчета);
	
	ТаблицаПоказателей=Запрос.Выполнить().Выгрузить();	
	КэшЗависимыхПоказателей.Вставить(ПотребительРасчета,ТаблицаПоказателей);
	
	Возврат ТаблицаПоказателей;
			
КонецФункции
 

Функция ЗаписатьИзмененияВРегистр(ОбъектРасчета)
	
	ОбъектРасчета.Вставить("АктивностьДвижений",УправлениеОтчетамиУХ.ЭтоДокументКорректировки(Регистратор));
	
	Если НЕ ОбъектРасчета.Свойство("ДополнительныеВалюты") Тогда
		
		СтруктураВалют=ПолучитьСтруктуруВалют(ОбъектРасчета.Организация,ОбъектРасчета.Сценарий,ОбъектРасчета.ПериодОтчета);
		ОбъектРасчета.Вставить("ДополнительныеВалюты",СтруктураВалют.ДополнительныеВалюты);
				
	КонецЕсли;
	
	ОбъектРасчета.Вставить("ПоследнийРедактировавший",ПоследнийРедактировавший);
	ОбъектРасчета.Вставить("ДатаИзменения",ТекущаяДата());
	ОбъектРасчета.Вставить("ДатаИзмененияMs",ДатаИзмененияMs);
	
	Если РежимКорректировки Тогда
		
		ОбъектРасчета.Вставить("СохранятьИсториюИзменений",Истина);
		
	КонецЕсли;

	Отказ=Ложь;
	
	УправлениеОтчетамиУХ.ЗаписатьПоказателиОтчетов(ОбъектРасчета,Отказ);	
	ВосстановитьПеременныеДляРасчета(ОбъектРасчета);
	
	Возврат НЕ Отказ;
		
КонецФункции // ЗаписатьИзмененияВРегистр()

Функция ОтменитьИзменения() Экспорт
	
	Если Не ЗначениеЗаполнено(ОписаниеВерсии) Тогда
		
		Возврат Истина
		
	КонецЕсли; 
	
	Попытка
		
		ОбъектОписаниеВерсий = ОписаниеВерсии.ПолучитьОбъект();
		ОбъектОписаниеВерсий.БезусловноеУдаление = Истина;
		ОбъектОписаниеВерсий.Удалить();
		Возврат Истина
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции // ОтменитьИзменения() 

Процедура ВосстановитьПеременныеДляРасчета(ОбъектРасчета) Экспорт
		
	Если ТипЗнч(ОбъектРасчета)=Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,ОбъектРасчета,,"ПериодОтчета");
		
		Если ТипЗнч(мПоказатели)=Тип("ТаблицаЗначений") Тогда
			ИнициализироватьСоответствияДляПоиска();
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры // ВосстановитьПеременныеДляРасчета()

Процедура ИнициализироватьСоответствияДляПоиска(ОбъектРасчета=Неопределено) Экспорт
	
	ПоказателиОбъекта=Новый Структура("мПоказатели",мПоказатели);
	УправлениеОтчетамиУХ.ИнициализироватьСоответствияДляПоиска(ПоказателиОбъекта);
	
	мСоответствиеДляПоискаПоКоду=ПоказателиОбъекта.мСоответствиеДляПоискаПоКоду;
	мСоответствиеДляПоискаПоСсылке=ПоказателиОбъекта.мСоответствиеДляПоискаПоСсылке;
	мРедактируемыеПоказатели=ПоказателиОбъекта.мРедактируемыеПоказатели;
	
	Если ТипЗнч(ОбъектРасчета)=Тип("Структура") Тогда
		
		ОбъектРасчета.Вставить("мСоответствиеДляПоискаПоКоду",мСоответствиеДляПоискаПоКоду);
		ОбъектРасчета.Вставить("мСоответствиеДляПоискаПоСсылке",мСоответствиеДляПоискаПоСсылке);
		ОбъектРасчета.Вставить("мРедактируемыеПоказатели",мРедактируемыеПоказатели);
		
	КонецЕсли;
		
КонецПроцедуры // ИнициализироватьСоответствияДляПоиска()

Функция ПодготовитьСтруктуруПеременныхДляРасчета(СтруктураКлючевыхРеквизитов) Экспорт
	
	СтруктураПеременных=Новый Структура; 
	
	Для Каждого Реквизит ИЗ ЭтотОбъект.Метаданные().Реквизиты Цикл
		
		СтруктураПеременных.Вставить(Реквизит.Имя,ЭтотОбъект[Реквизит.Имя]);
		
	КонецЦикла;
	
	СтруктураПеременных.Вставить("ПроцедураСозданияОбъекта","Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать()");
	
	СтруктураПеременных.Вставить("мПоказатели",мПоказатели);
	СтруктураПеременных.Вставить("мПоказателиРаскрытия",мПоказателиРаскрытия);
	СтруктураПеременных.Вставить("Показатели",Показатели);
	СтруктураПеременных.Вставить("ЛогИзмененийПоказателей",ЛогИзмененийПоказателей);
	СтруктураПеременных.Вставить("ЛогИзмененийРаскрытийПоказателей",ЛогИзмененийРаскрытийПоказателей);
	СтруктураПеременных.Вставить("ТабНомеровАналитик",ТабНомеровАналитик);
	СтруктураПеременных.Вставить("Параметры",Параметры);
	СтруктураПеременных.Вставить("ПустоеЗначениеПоТипу",ПустоеЗначениеПоТипу);
	СтруктураПеременных.Вставить("мТекущаяВалюта",мТекущаяВалюта);
	СтруктураПеременных.Вставить("мПоказателиДляКурсовВалют",мПоказателиДляКурсовВалют);
	СтруктураПеременных.Вставить("мВалютыЗаписей",мВалютыЗаписей);
	СтруктураПеременных.Вставить("мНеЧисловыеПоказатели",мНеЧисловыеПоказатели);
	СтруктураПеременных.Вставить("мЧисловыеПоказатели",мЧисловыеПоказатели);
	СтруктураПеременных.Вставить("мСоответствиеНаборовЗаписей",мСоответствиеНаборовЗаписей);
	СтруктураПеременных.Вставить("мСоотвествиеДляПересчетаКурсов",мСоотвествиеДляПересчетаКурсов);
	СтруктураПеременных.Вставить("мОперанды",мОперанды);
	СтруктураПеременных.Вставить("мТаблицаВидовАналитикВидаОтчета",мТаблицаВидовАналитикВидаОтчета);
	СтруктураПеременных.Вставить("мТабПоказателиЗапросы",мТабПоказателиЗапросы);
	СтруктураПеременных.Вставить("мТабРасшифровкиПоказателей",мТабРасшифровкиПоказателей);
	СтруктураПеременных.Вставить("мСоответствиеОперандовИПоказателейОтбора",мСоответствиеОперандовИПоказателейОтбора);
	СтруктураПеременных.Вставить("мЗначенияОперандов",мЗначенияОперандов);
	СтруктураПеременных.Вставить("ЕстьОбращениеКВИБ",ЕстьОбращениеКВИБ);
	СтруктураПеременных.Вставить("База",База);
	СтруктураПеременных.Вставить("мПустойВидАналитики",мПустойВидАналитики);
	СтруктураПеременных.Вставить("ТихийРежим",ТихийРежим);
	СтруктураПеременных.Вставить("мУдалятьДвижения",мУдалятьДвижения);
	СтруктураПеременных.Вставить("СписокВерсий",СписокВерсий);
	СтруктураПеременных.Вставить("ИзмененНечисловойПоказатель",ИзмененНечисловойПоказатель);
	СтруктураПеременных.Вставить("ИзмененКлючевойРеквизит",ИзмененКлючевойРеквизит);
	СтруктураПеременных.Вставить("ТекущийЭлементОписаниеВерсии",ТекущийЭлементОписаниеВерсии);
	СтруктураПеременных.Вставить("КэшТаблицыКурсов",КэшТаблицыКурсов);
	СтруктураПеременных.Вставить("КэшДатРасчетаПоказателей",КэшДатРасчетаПоказателей);
	СтруктураПеременных.Вставить("ДанныеРаскрытияИнициализированы",ДанныеРаскрытияИнициализированы);
	СтруктураПеременных.Вставить("СписокИспользуемыхВерсий",СписокИспользуемыхВерсий);
	СтруктураПеременных.Вставить("мТаблицаПересчета",мТаблицаПересчета);
	СтруктураПеременных.Вставить("мПоказателиОбязательныеКПересчету",мПоказателиОбязательныеКПересчету);
	СтруктураПеременных.Вставить("ПоказателиКПересчету",ПоказателиКПересчету);
	СтруктураПеременных.Вставить("ПроверкаПриЗаписи",ПроверкаПриЗаписи);
	СтруктураПеременных.Вставить("НомерТекущейОперации",НомерТекущейОперации);
	СтруктураПеременных.Вставить("МеткаВерсии",МеткаВерсии);
	СтруктураПеременных.Вставить("КомментарийВерсии",КомментарийВерсии);
	СтруктураПеременных.Вставить("ПересчетВалюты",ПересчетВалюты);
	СтруктураПеременных.Вставить("Вариант",Вариант);
	СтруктураПеременных.Вставить("мНеИнициироватьВнутриГрупповыеОперации",мНеИнициироватьВнутриГрупповыеОперации);
	СтруктураПеременных.Вставить("ТаблицаВыявленныхОшибок",ТаблицаВыявленныхОшибок);
	СтруктураПеременных.Вставить("ДанныеРасшифровкиСчитаны",ДанныеРасшифровкиСчитаны);
	СтруктураПеременных.Вставить("мТаблицаАналитикВидаОтчета",мТаблицаАналитикВидаОтчета);
	СтруктураПеременных.Вставить("МаксАналитикПоказателя",МаксАналитикПоказателя);
	СтруктураПеременных.Вставить("МаксАналитикОтчета",МаксАналитикОтчета);
	СтруктураПеременных.Вставить("ПоказателиСРаскрытием",ПоказателиСРаскрытием);
	СтруктураПеременных.Вставить("ПроизвольныйКод",ПроизвольныйКод);
	СтруктураПеременных.Вставить("ПроцедураРасчета",ПроцедураРасчета);
	СтруктураПеременных.Вставить("КэшИспользуемыхПравил",КэшИспользуемыхПравил);
	СтруктураПеременных.Вставить("КэшДанныхРасчета",КэшДанныхРасчета);
	СтруктураПеременных.Вставить("КэшДанныхПоказателя",КэшДанныхПоказателя);
	СтруктураПеременных.Вставить("КэшЗависимыхПоказателей",КэшЗависимыхПоказателей);
	СтруктураПеременных.Вставить("ИспользуемаяИБ",ИспользуемаяИБ);
	СтруктураПеременных.Вставить("ЕстьЗаблокированныеПоказатели",ЕстьЗаблокированныеПоказатели);
	СтруктураПеременных.Вставить("ОбработанныеОперанды",ОбработанныеОперанды);
	СтруктураПеременных.Вставить("мКопирование",мКопирование);
	СтруктураПеременных.Вставить("ПериодичностьБюджетирования",ПериодичностьБюджетирования);
	СтруктураПеременных.Вставить("ПересчитатьПоказателиЭффективностиПроектов",ПересчитатьПоказателиЭффективностиПроектов);
	СтруктураПеременных.Вставить("ТаблицаПроектовКПересчету",ТаблицаПроектовКПересчету);
	СтруктураПеременных.Вставить("ЗависимыеПоказатели",ЗависимыеПоказатели);
	СтруктураПеременных.Вставить("ДеревоПересчета",ДеревоПересчета);
	СтруктураПеременных.Вставить("СоответствиеСтрокПересчета",СоответствиеСтрокПересчета);
	СтруктураПеременных.Вставить("КэшВерсийПоказателей",КэшВерсийПоказателей);
	СтруктураПеременных.Вставить("ПодставлятьЗначенияПоУмолчаниюВместоПустых",ПодставлятьЗначенияПоУмолчаниюВместоПустых);
	СтруктураПеременных.Вставить("КэшКурсовВалют",КэшКурсовВалют);
	СтруктураПеременных.Вставить("ВидыКурсов",ВидыКурсов);
	СтруктураПеременных.Вставить("ЧислоСтрокРасчета",ЧислоСтрокРасчета);
	СтруктураПеременных.Вставить("КэшОтносительныхПериодов",КэшОтносительныхПериодов);
	СтруктураПеременных.Вставить("КэшПериодовГода",КэшПериодовГода);
	СтруктураПеременных.Вставить("ПоследнийРедактировавший",ПоследнийРедактировавший);
	СтруктураПеременных.Вставить("мСоответствиеДляПоискаПоСсылкеКорр");
	СтруктураПеременных.Вставить("мСоответствиеДляПоискаПоСсылке",мСоответствиеДляПоискаПоСсылке);
	
	СтруктураПеременных.Вставить("мКорректировкиПоказателей",мКорректировкиПоказателей);
	СтруктураПеременных.Вставить("мКорректировкиПоказателейРаскрытия",мКорректировкиПоказателейРаскрытия);
	СтруктураПеременных.Вставить("мСоответствиеДляПоискаПоСсылкеКорр",мСоответствиеДляПоискаПоСсылкеКорр);

	СтруктураПеременных.Вставить("ЧислоДопАналитик",ПараметрыСеанса.ЧислоДопАналитик);
	СтруктураПеременных.Вставить("ТрансформационнаяКорректировка",Ложь);
	СтруктураПеременных.Вставить("МассивЗагруженныхГруппРаскрытия",Новый Массив);
	СтруктураПеременных.Вставить("ПредставлениеОбъекта",""+ЭтотОбъект);
	СтруктураПеременных.Вставить("ДополнительныеСвойства",Новый Структура);
	СтруктураПеременных.Вставить("СпособФормированияОтчета",Перечисления.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки);
	СтруктураПеременных.Вставить("мРасширеннаяДиагностикаВключена",Ложь);
	СтруктураПеременных.Вставить("РежимКорректировки",Ложь);
	СтруктураПеременных.Вставить("ЧтениеНеактуальныхЗаписей",ЧтениеНеактуальныхЗаписей);
	СтруктураПеременных.Вставить("ВсегдаЗаполнятьАналитики",Истина);
	СтруктураПеременных.Вставить("ВерсияХранимогоФайла");
	СтруктураПеременных.Вставить("ПутьКФайлуADO");
	СтруктураПеременных.Вставить("ПоказателиДляЗаполнения");
	СтруктураПеременных.Вставить("ТипЗначенияЧисло",Перечисления.ТипыЗначенийПоказателейОтчетов.Число);
	СтруктураПеременных.Вставить("мКопирование",мКопирование);
	СтруктураПеременных.Вставить("глОсновнойЯзык",0);
	СтруктураПеременных.Вставить("Дата",ТекущаяДата());
	СтруктураПеременных.Вставить("ФлагОшибкиИмпорта",Ложь);
	СтруктураПеременных.Вставить("ТрассировкаРасчета",ТрассировкаРасчета);
	СтруктураПеременных.Вставить("Регистратор",		Регистратор);
	СтруктураПеременных.Вставить("ЭкземплярОтчета",	Регистратор);
	СтруктураПеременных.Вставить("ТаблицаПротоколаСеанс",КэшируемыеПроцедурыУХ.ИнициализироватьТаблицуПротокола());

	
	Если ЭтоЧерноваяЗапись() Тогда
		
		СтруктураПеременных.Вставить("ИдентификаторСеанса",	ИдентификаторСеанса);
		СтруктураПеременных.Вставить("ЧерноваяВерсия",Истина);
		СтруктураКлючевыхРеквизитов.Вставить("СохранятьИсториюИзменений",Истина);
		
	Иначе
		
		СтруктураПеременных.Удалить("ИдентификаторСеанса");
		
	КонецЕсли;
		
	СтруктураПеременных.Вставить("ФоновыйПересчетЗависимыхПоказателей",ФоновыйПересчетЗависимыхПоказателей);
	СтруктураПеременных.Вставить("СпособФормированияОтчета",?(ЗначениеЗаполнено(СпособФормированияОтчета),СпособФормированияОтчета,Перечисления.СпособыФормированияОтчетов.РучноеЗаполнение));
	
	Если ОбщегоНазначенияПовтИспУХ.РассчитыватьРасхожденияПорталаВГО() Тогда
		СтруктураПеременных.Вставить("РассчитыватьРасхожденияВГО",Истина);
	КонецЕсли;
	
	Для каждого КлючИЗначение Из СтруктураКлючевыхРеквизитов Цикл
		
		СтруктураПеременных.Вставить(КлючИЗначение.Ключ,КлючИЗначение.Значение);
		
	КонецЦикла; 
	
	СтруктураПеременных.Вставить("ПериодОкончания",СтруктураКлючевыхРеквизитов.ПериодОтчета);
		
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если НЕ СтруктураПеременных.Свойство("Аналитика"+Индекс) Тогда
			
			СтруктураПеременных.Вставить("Аналитика"+Индекс,Неопределено);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат СтруктураПеременных;
		
КонецФункции // ПодготовитьСтруктуруПеременныхДляРасчета()

Функция ЭтоЧерноваяЗапись()
	
	 Возврат ЗначениеЗаполнено(ИдентификаторСеанса) И (НЕ ЧистоваяЗаписьДанных);
	 
 КонецФункции // ЭтоЧерноваяВерсия()
 
 Функция ПолучитьСтруктуруДляОткрытияФормы(ВидОтчетаПоказатель,СтрокаРасшифровки)
	
	ДокументыРасшифровки=Новый ТаблицаЗначений;
	
	ДокументРасшифровки=Документы.НастраиваемыйОтчет.ПолучитьЭкземплярОтчета(СтрокаРасшифровки.Организация,
																		СтрокаРасшифровки.ПериодОтчета,
																		СтрокаРасшифровки.Сценарий,
																		ВидОтчетаПоказатель,,Истина,Ложь,,СтрокаРасшифровки.Проект);
																		
	
	СтруктураРасшифровки=Новый Структура;
	СтруктураРасшифровки.Вставить("Организация",	СтрокаРасшифровки.Организация);
	СтруктураРасшифровки.Вставить("ПериодОтчета",	СтрокаРасшифровки.ПериодОтчета);
	СтруктураРасшифровки.Вставить("Сценарий",		СтрокаРасшифровки.Сценарий);
	СтруктураРасшифровки.Вставить("Проект",			СтрокаРасшифровки.Проект);
	СтруктураРасшифровки.Вставить("ВидОтчета",		ВидОтчетаПоказатель);
	СтруктураРасшифровки.Вставить("Ссылка",			ДокументРасшифровки);
	СтруктураРасшифровки.Вставить("ИмяОбъекта",		"НастраиваемыйОтчет");
	СтруктураРасшифровки.Вставить("ПоказательОтчета",СтрокаРасшифровки.ПоказательОтчета);
	
	СтруктураОтбора=Новый Структура;
	
	Если НЕ СтрокаРасшифровки.СинтетическоеЗначение Тогда
		
		Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			Если ЗначениеЗаполнено(СтрокаРасшифровки["Аналитика"+Индекс]) Тогда
				
				СтруктураОтбора.Вставить("Аналитика"+Индекс,СтрокаРасшифровки["Аналитика"+Индекс]);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ОбъектРасчета",	СтруктураРасшифровки);
	СтруктураПараметров.Вставить("ПоказательОтчета",СтрокаРасшифровки.ПоказательОтчета);
	СтруктураПараметров.Вставить("СтруктураОтбора",?(СтруктураОтбора.Количество()=0,Неопределено,СтруктураОтбора));
	
	Возврат СтруктураПараметров;	
	
КонецФункции // ПолучитьСтруктуруДляОткрытияФормы()

Функция ПолучитьСтруктуруПараметровДляРасшифровки() Экспорт
	
	СтрокаРасшифровки=ТаблицаИзмененныхПоказателей[0];
	
	ВидОтчетаПоказатель=ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРасшифровки.ПоказательОтчета,"Владелец");
	
	Если НЕ ВидОтчетаПоказатель=ВидОтчета Тогда
		
		Возврат ПолучитьСтруктуруДляОткрытияФормы(ВидОтчетаПоказатель,СтрокаРасшифровки);
		
	КонецЕсли;
	
	Если МаксАналитикОтчета=Неопределено Тогда
		
		МаксАналитикОтчета=ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(ВидОтчета);
		
	КонецЕсли;
	
	СтруктураВалют=ПолучитьСтруктуруВалют(СтрокаРасшифровки.Организация,СтрокаРасшифровки.Сценарий,СтрокаРасшифровки.ПериодОтчета);
	
	СтруктураКлючевыхРеквизитов=Новый Структура;
	СтруктураКлючевыхРеквизитов.Вставить("Организация",		СтрокаРасшифровки.Организация);
	СтруктураКлючевыхРеквизитов.Вставить("ПериодОтчета",	СтрокаРасшифровки.ПериодОтчета);
	СтруктураКлючевыхРеквизитов.Вставить("Сценарий",		СтрокаРасшифровки.Сценарий);
	СтруктураКлючевыхРеквизитов.Вставить("Проект",			СтрокаРасшифровки.Проект);
	СтруктураКлючевыхРеквизитов.Вставить("ВидОтчета",		ВидОтчета);
	СтруктураКлючевыхРеквизитов.Вставить("ОсновнаяВалюта",	СтруктураВалют.ОсновнаяВалюта);
		
	Для Индекс=1 По МаксАналитикОтчета Цикл
		
		СтруктураКлючевыхРеквизитов.Вставить("Аналитика"+Индекс,СтрокаРасшифровки["Аналитика"+Индекс]);
		
	КонецЦикла;
	
	
	ДокументОбъект=Документы.НастраиваемыйОтчет.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ДокументОбъект,СтруктураКлючевыхРеквизитов);
	
	СтруктураРеквизитов=ПолучитьСтруктуруРеквизитов(ВидОтчета,СтрокаРасшифровки.Организация,СтрокаРасшифровки.Сценарий,СтрокаРасшифровки.ПериодОтчета);
	
	ДокументОбъект.ПравилоОбработки=?(ЗначениеЗаполнено(ПравилоОбработки),ПравилоОбработки,СтруктураРеквизитов.ПравилоОбработки);
	ДокументОбъект.ИспользуемаяИБ=?(ЗначениеЗаполнено(ИспользуемаяИБ),ИспользуемаяИБ,СтруктураРеквизитов.ВИБ);
	
	Если ЗначениеЗаполнено(ДокументОбъект.ПравилоОбработки.ТипБД)
		И (НЕ (ЗначениеЗаполнено(ДокументОбъект.ИспользуемаяИБ) 
		ИЛИ ДокументОбъект.ПравилоОбработки.ТипБД=Справочники.ТипыБазДанных.ПустаяСсылка()
		ИЛИ ДокументОбъект.ПравилоОбработки.ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ)) Тогда
		
		ДокументОбъект.ИспользуемаяИБ=ДокументОбъект.ПравилоОбработки.ТипБД.ВИБПоУмолчанию;
		
	КонецЕсли;
	
	ДокументОбъект.ЧтениеНеактуальныхЗаписей=Истина;	
	ДокументОбъект.ВсегдаЗаполнятьАналитики=Истина;
	
	Если ЭтоЧерноваяЗапись() Тогда
		
		ДокументОбъект.ИдентификаторСеанса=ИдентификаторСеанса;
		
	КонецЕсли;	
	
	ДокументОбъект.ИнициализироватьКонтекст();
	
	ОбъектРасчета=ДокументОбъект.ПодготовитьСтруктуруПеременныхДляРасчета();
	ОбъектРасчета.Вставить("ПоказательОтчета",СтрокаРасшифровки.ПоказательОтчета);
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ОбъектРасчета",	ОбъектРасчета);
	СтруктураПараметров.Вставить("ПоказательОтчета",СтрокаРасшифровки.ПоказательОтчета);
	СтруктураПараметров.Вставить("мТекущаяВалюта",	СтруктураВалют.ОсновнаяВалюта);
	
	Если НЕ СтрокаРасшифровки.СинтетическоеЗначение Тогда
		
		СтрПоказатель=ОбъектРасчета.мСоответствиеДляПоискаПоСсылке[СтрокаРасшифровки.ПоказательОтчета];
		
		СтруктураОтбора=Новый Структура;
		
		Для Инд=(МаксАналитикОтчета+1) ПО МаксАналитикОтчета+СтрПоказатель.ЧислоАналитикГруппыРаскрытия Цикл
			
			СтруктураОтбора.Вставить("Аналитика"+Индекс,СтрокаРасшифровки["Аналитика"+Инд]);
			Индекс=Индекс+1;
			
		КонецЦикла;
		
		Если СтрПоказатель.Валютный Тогда
			
			СтруктураОтбора.Вставить("АналитикаВалюта",СтрокаРасшифровки.АналитикаВалюта);
			
		КонецЕсли;
		
		СтруктураПараметров.Вставить("СтруктураОтбора",СтруктураОтбора);
		
	Иначе
		
		СтруктураПараметров.Вставить("СтруктураОтбора",Неопределено);
		
	КонецЕсли;
	
	ДокументОбъект=0;
	
	Возврат СтруктураПараметров;		
	
КонецФункции // ПолучитьСтруктуруПараметровДляРасшифровки()

Процедура ДобавитьСтрокиДереваПересчета(СтрокаРодитель,СтруктураКлючевыхРеквизитов,ТекВидОтчета,ТекПотребительРасчета,ТекНазначениеРасчетов,ПериодРасчета)
	
	ТаблицаЗависимыхПоказателей=ПолучитьТаблицуЗависимыхПоказателей(ТекПотребительРасчета);
	
	Если ТаблицаЗависимыхПоказателей=Неопределено Тогда

		Возврат;
		
	КонецЕсли;
	
	Для каждого СтрПоказатель Из ТаблицаЗависимыхПоказателей  Цикл  // Для текущих показателей
		
		Если НЕ СтрПоказатель.СдвигПериодов=0 Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		Если СтрПоказатель.НазначениеРасчетов=ТекНазначениеРасчетов ИЛИ ПроверитьИспользованиеПравила(СтрПоказатель.ВидОтчета,СтрПоказатель.НазначениеРасчетов,СтруктураКлючевыхРеквизитов.Организация,СтруктураКлючевыхРеквизитов.Сценарий,ПериодРасчета) Тогда
			
		////	МассивСтрок=ДеревоПересчета.Строки.НайтиСтроки(Новый Структура("ВидОтчета,ПоказательОтчета,ПериодОтчета,ПоказательИсточник",СтрПоказатель.ВидОтчета,СтрПоказатель.ПотребительРасчета,ПериодРасчета,ТекПотребительРасчета),Истина);			
		//	
		//	Если МассивСтрок.Количество()>0 Тогда
		//			
		//		МассивСтрок[0].НомерОперации=МассивСтрок[0].Родитель.Строки.Количество()+1;
		//		
		//	Иначе
		
		ДанныеДляПоиска=ЗначениеВСтрокуВнутр(Новый Структура("ВидОтчета,ПоказательОтчета,ПериодОтчета,ПоказательИсточник",СтрПоказатель.ВидОтчета,СтрПоказатель.ПотребительРасчета,ПериодРасчета,ТекПотребительРасчета));
		СтрокаПересчета=СоответствиеСтрокПересчета[ДанныеДляПоиска];
		
		ЧислоСтрокРасчета=ЧислоСтрокРасчета+1;
		
		Если НЕ СтрокаПересчета=Неопределено Тогда
			
			СтрокаПересчета.ЧислоПроходов=СтрокаПересчета.ЧислоПроходов+1;
			СтрокаПересчета.НомерОперации=?(СтрокаПересчета.НомерОперации<ЧислоСтрокРасчета,ЧислоСтрокРасчета,СтрокаПересчета.НомерОперации);
			УвеличитьСчетчикПереходовРекурсивно(СтрокаПересчета);
			
		Иначе
						
			НоваяСтрока=СтрокаРодитель.Строки.Добавить();
			НоваяСтрока.ВидОтчета=СтрПоказатель.ВидОтчета;
			НоваяСтрока.ПериодОтчета=ПериодРасчета;
			НоваяСтрока.ОсновнаяВалюта		= СтруктураКлючевыхРеквизитов.ОсновнаяВалюта;
			НоваяСтрока.ПравилоОбработки=СтрПоказатель.НазначениеРасчетов;
			НоваяСтрока.СдвигПериодов=СтрПоказатель.СдвигПериодов;
			НоваяСтрока.ПоказательОтчета=СтрПоказатель.ПотребительРасчета;
			НоваяСтрока.ПоказательИсточник=ТекПотребительРасчета;
			НоваяСтрока.НомерОперации		= ЧислоСтрокРасчета;
			
			НоваяСтрока.ЧислоПроходов=1;
			
			СоответствиеСтрокПересчета.Вставить(ДанныеДляПоиска,НоваяСтрока);
			
			//МассивРодитель=ДеревоПересчета.Строки.НайтиСтроки(Новый Структура("ВидОтчета,ПоказательОтчета,ПериодОтчета",СтрПоказатель.ВидОтчета,СтрПоказатель.ПотребительРасчета,ПериодРасчета),Истина);
			//
			//Если МассивРодитель.Количество()=0 Тогда
			//	
			//	СтрокаПересчета=ДеревоПересчета.Строки.Добавить();
			//	
			//Иначе
			//	
			//	СтрокаПересчета=МассивРодитель[0].Строки.Добавить();
			//	
			//КонецЕсли;
			//
			//ЗаполнитьЗначенияСвойств(СтрокаПересчета,НоваяСтрока);								
			ДобавитьСтрокиДереваПересчета(НоваяСтрока,СтруктураКлючевыхРеквизитов,СтрПоказатель.ВидОтчета,СтрПоказатель.ПотребительРасчета,СтрПоказатель.НазначениеРасчетов,ПериодРасчета);
			
			КонецЕсли;
			
			Если ЕстьЗаблокированныеПоказатели Тогда
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
		
	Для каждого СтрПоказатель Из ТаблицаЗависимыхПоказателей  Цикл  // Для показателей других периодов		
		
		Если СтрПоказатель.СдвигПериодов=0 Тогда
			
			Продолжить;
			
		КонецЕсли; 
		//
		//ТекПериодРасчета=ПолучитьОтносительныйПериод(ПериодРасчета,СтрПоказатель.СдвигПериодов*(-1));
		//
		//Если ПериодНЕПринадлежитГодуРасчета(ТекПериодРасчета,СтруктураКлючевыхРеквизитов.ПериодОтчета) Тогда
		//				
		//	Продолжить;
		//	
		//КонецЕсли; 
		
		ТекПериодРасчета=ПолучитьОтносительныйПериод(ПериодРасчета,СтрПоказатель.СдвигПериодов*(-1));
		
		Если ПериодНеПринадлежитГодуРасчета(ТекПериодРасчета,СтруктураКлючевыхРеквизитов.ПериодОтчета) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрПоказатель.НазначениеРасчетов=ТекНазначениеРасчетов ИЛИ ПроверитьИспользованиеПравила(СтрПоказатель.ВидОтчета,СтрПоказатель.НазначениеРасчетов,СтруктураКлючевыхРеквизитов.Организация,СтруктураКлючевыхРеквизитов.Сценарий,ПериодРасчета) Тогда
			
		//	НомерОперации=НомерОперации+1;
		//	МассивСтрок=ДеревоПересчета.Строки.НайтиСтроки(Новый Структура("ВидОтчета,ПоказательОтчета,ПериодОтчета,ПоказательИсточник",СтрПоказатель.ВидОтчета,СтрПоказатель.ПотребительРасчета,ТекПериодРасчета,ТекПотребительРасчета),Истина);			
		//	
		//	Если МассивСтрок.Количество()>0 Тогда
		//		
		//		МассивСтрок[0].НомерОперации=МассивСтрок[0].Родитель.Строки.Количество()+1;
		//		
		//	//	Продолжить;
		//					
		//Иначе
		
		ДанныеДляПоиска=ЗначениеВСтрокуВнутр(Новый Структура("ВидОтчета,ПоказательОтчета,ПериодОтчета,ПоказательИсточник",СтрПоказатель.ВидОтчета,СтрПоказатель.ПотребительРасчета,ТекПериодРасчета,ТекПотребительРасчета));
		СтрокаПересчета=СоответствиеСтрокПересчета[ДанныеДляПоиска];
		
		ЧислоСтрокРасчета=ЧислоСтрокРасчета+1;
		
		Если НЕ СтрокаПересчета=Неопределено Тогда
			
			СтрокаПересчета.ЧислоПроходов=СтрокаПересчета.ЧислоПроходов+1;
			СтрокаПересчета.НомерОперации=?(СтрокаПересчета.НомерОперации<ЧислоСтрокРасчета,ЧислоСтрокРасчета,СтрокаПересчета.НомерОперации);
			УвеличитьСчетчикПереходовРекурсивно(СтрокаПересчета);
			
		Иначе
			
			НоваяСтрока=СтрокаРодитель.Строки.Добавить();
			НоваяСтрока.ВидОтчета=СтрПоказатель.ВидОтчета;
			НоваяСтрока.ПериодОтчета=ТекПериодРасчета;
			НоваяСтрока.ОсновнаяВалюта		= СтруктураКлючевыхРеквизитов.ОсновнаяВалюта;
			НоваяСтрока.ПравилоОбработки=СтрПоказатель.НазначениеРасчетов;
			НоваяСтрока.СдвигПериодов=СтрПоказатель.СдвигПериодов;
			НоваяСтрока.ПоказательОтчета=СтрПоказатель.ПотребительРасчета;
			НоваяСтрока.ПоказательИсточник=ТекПотребительРасчета;
			НоваяСтрока.НомерОперации		= ЧислоСтрокРасчета;
			
			НоваяСтрока.ЧислоПроходов=1;
			
			СоответствиеСтрокПересчета.Вставить(ДанныеДляПоиска,НоваяСтрока);
			
			//МассивРодитель=ДеревоПересчета.Строки.НайтиСтроки(Новый Структура("ВидОтчета,ПоказательОтчета,ПериодОтчета",СтрПоказатель.ВидОтчета,СтрПоказатель.ПотребительРасчета,ПериодРасчета),Истина);
			//
			//Если МассивРодитель.Количество()=0 Тогда
			//	
			//	СтрокаПересчета=ДеревоПересчета.Строки.Добавить();
			//	
			//Иначе
			//	
			//	СтрокаПересчета=МассивРодитель[0].Строки.Добавить();
			//	
			//КонецЕсли;
			//
			//ЗаполнитьЗначенияСвойств(СтрокаПересчета,НоваяСтрока);
			
			КонецЕсли;
			
			ДобавитьСтрокиДереваПересчета(НоваяСтрока,СтруктураКлючевыхРеквизитов,СтрПоказатель.ВидОтчета,СтрПоказатель.ПотребительРасчета,СтрПоказатель.НазначениеРасчетов,ТекПериодРасчета);
			
			Если ЕстьЗаблокированныеПоказатели Тогда
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;	
	
КонецПроцедуры // ДобавитьСтрокиДереваПересчета()

Процедура ДобавитьСтрокиПересчетаРекурсивно(СтрокаРодитель,МаксЧислоПроходов)
			
	Для Каждого Строка ИЗ СтрокаРодитель.Строки Цикл
				
		РабочееЧислоПроходов=Макс(МаксЧислоПроходов,СтрокаРодитель.ЧислоПроходов,Строка.ЧислоПроходов);
		
		НоваяСтрока=ЗависимыеПоказатели.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
		НоваяСтрока.ЧислоПроходов=РабочееЧислоПроходов;
		
		ДобавитьСтрокиПересчетаРекурсивно(Строка,РабочееЧислоПроходов);
		
	КонецЦикла;
		
КонецПроцедуры // ДобавитьСтрокиПересчетаРекурсивно()

Функция ПериодНеПринадлежитГодуРасчета(ТекущийПериод,ПериодРасчета)
	
	ПроверкаВыполнена=КэшПериодовГода[ТекущийПериод];
	
	Если ПроверкаВыполнена=Неопределено Тогда
		
		ПериодНеПринадлежитГоду=(ТекущийПериод.ДатаНачала>КонецГода(ПериодРасчета.ДатаОкончания) ИЛИ ТекущийПериод.ДатаНачала<НачалоГода(ПериодРасчета.ДатаНачала));
		КэшПериодовГода.Вставить(ТекущийПериод,ПериодНеПринадлежитГоду);
		Возврат ПериодНеПринадлежитГоду;
		
	Иначе
		
		Возврат ПроверкаВыполнена;
		
	КонецЕсли;		
	
КонецФункции // ПериодНеПринадлежитГодуРасчета()

Функция ПолучитьОтносительныйПериод(ПериодОтчета,Смещение)
	
	МассивСтрок=КэшОтносительныхПериодов.НайтиСтроки(Новый Структура("ПериодОтчета,Смещение",ПериодОтчета,Смещение));
	
	Если МассивСтрок.Количество()>0 Тогда
		
		Возврат МассивСтрок[0].ОтносительныйПериод;
		
	Иначе
		
		ТекПериодРасчета=ОбщегоНазначенияУХ.глОтносительныйПериод(ПериодОтчета,Смещение);
		НоваяСтрока=КэшОтносительныхПериодов.Добавить();
		НоваяСтрока.ПериодОтчета=ПериодОтчета;
		НоваяСтрока.Смещение=Смещение;
		НоваяСтрока.ОтносительныйПериод=ТекПериодРасчета;
		
		Возврат ТекПериодРасчета;
		
	КонецЕсли;
			
КонецФункции // ПолучитьОтносительныйПериод()

Процедура УвеличитьСчетчикПереходовРекурсивно(СтрокаПересчета)
	
	Для Каждого Строка ИЗ СтрокаПересчета.Строки Цикл
		
		ЧислоСтрокРасчета=ЧислоСтрокРасчета+1;
		Строка.ЧислоПроходов=Строка.ЧислоПроходов+1;
		Строка.НомерОперации=?(СтрокаПересчета.НомерОперации<ЧислоСтрокРасчета,ЧислоСтрокРасчета,СтрокаПересчета.НомерОперации);
		
		УвеличитьСчетчикПереходовРекурсивно(Строка);
		
	КонецЦикла;
	
КонецПроцедуры // УвеличитьСчетчикПереходовРекурсивно()

#КонецОбласти
 


МассивЗагруженныхГруппРаскрытия=Новый Массив;
ПроверкаПриЗаписи=Ложь;
ИзмененНечисловойПоказатель=Ложь;
ПересчетВалюты=Ложь;
ПроизвольныйКод=Ложь;
ЧтениеНеактуальныхЗаписей=Истина;

КэшИспользуемыхПравил=Новый ТаблицаЗначений;	

КэшИспользуемыхПравил.Колонки.Добавить("ВидОтчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ВидыОтчетов"));
КэшИспользуемыхПравил.Колонки.Добавить("Организация",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Организации"));
КэшИспользуемыхПравил.Колонки.Добавить("Сценарий",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Сценарии"));
КэшИспользуемыхПравил.Колонки.Добавить("ПериодРасчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Периоды"));
КэшИспользуемыхПравил.Колонки.Добавить("СтруктураРеквизитов");

КэшИспользуемыхПравил.Индексы.Добавить("ВидОтчета,Организация,Сценарий,ПериодРасчета");

КэшДанныхРасчета=Новый ТаблицаЗначений;
КэшДанныхРасчета.Колонки.Добавить("НазначениеРасчетов",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПравилаОбработки"));
КэшДанныхРасчета.Колонки.Добавить("ПотребительРасчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОтчетов"));
КэшДанныхРасчета.Колонки.Добавить("мОперанды");
КэшДанныхРасчета.Колонки.Добавить("мТабПоказателиЗапросы");
КэшДанныхРасчета.Колонки.Добавить("мСоответствиеОперандовИПоказателейОтбора");
КэшДанныхРасчета.Колонки.Добавить("ЕстьОбращениеКВИБ");
КэшДанныхРасчета.Колонки.Добавить("ПроцедураРасчета");
КэшДанныхРасчета.Колонки.Добавить("ПроизвольныйКод",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());

КэшДанныхРасчета.Индексы.Добавить("НазначениеРасчетов,ПотребительРасчета");

КэшДанныхПоказателя=Новый Соответствие;

КэшЗависимыхПоказателей=Новый Соответствие;

ЕстьЗаблокированныеПоказатели=Ложь;

мКопирование=Ложь;

ПересчитатьПоказателиЭффективностиПроектов=Ложь;
ПериодичностьБюджетирования=Константы.ПериодичностьБюджетирования.Получить();

ЗависимыеПоказатели=ТабЗависимыеПоказатели.ВыгрузитьКолонки();
ЗависимыеПоказатели.Колонки.Добавить("ГлубинаПересчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));
ЗависимыеПоказатели.Колонки.Добавить("НомерОперации",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));
ЗависимыеПоказатели.Колонки.Добавить("ЧислоПроходов",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));

ЗависимыеПоказатели.Индексы.Добавить("ВидОтчета,ПоказательОтчета,ПериодОтчета,ПоказательИсточник");

ДеревоПересчета=Новый ДеревоЗначений;

Для Каждого Колонка ИЗ ТабЗависимыеПоказатели.ВыгрузитьКолонки().Колонки Цикл
	
	ДеревоПересчета.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения);
	
КонецЦикла;

ДеревоПересчета.Колонки.Добавить("НомерОперации",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));
ДеревоПересчета.Колонки.Добавить("ЧислоПроходов",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));

КэшВерсийПоказателей=Новый ТаблицаЗначений;
КэшВерсийПоказателей.Колонки.Добавить("ВидОтчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ВидыОтчетов"));
КэшВерсийПоказателей.Колонки.Добавить("ПериодРасчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Периоды"));
КэшВерсийПоказателей.Колонки.Добавить("Организация",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Организации"));
КэшВерсийПоказателей.Колонки.Добавить("Сценарий",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Сценарии"));
КэшВерсийПоказателей.Колонки.Добавить("Проект",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Проекты"));

Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
	КэшВерсийПоказателей.Колонки.Добавить("Аналитика" + Инд,Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип);
КонецЦикла;

КэшВерсийПоказателей.Колонки.Добавить("СписокВерсий",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСписокЗначений());

КэшВерсийПоказателей.Индексы.Добавить("ВидОтчета,ПериодРасчета,Организация,Сценарий,Проект");

ПодставлятьЗначенияПоУмолчаниюВместоПустых=Константы.ПодставлятьЗначенияПоУмолчаниюВместоПустых.Получить();

ВидыКурсов=Новый Соответствие;
ВидыКурсов.Вставить(Перечисления.ВидыКурсов.КурсНаКонецПериода,				"КурсНаКонецПериода");
ВидыКурсов.Вставить(Перечисления.ВидыКурсов.КурсНаКонецПредыдущегоПериода,	"КурсНаКонецПредыдущегоПериода");
ВидыКурсов.Вставить(Перечисления.ВидыКурсов.КурсНаНачалоПериода,			"КурсНаНачалоПериода");
ВидыКурсов.Вставить(Перечисления.ВидыКурсов.СреднийКурсЗаПериод,			"СреднийКурсЗаПериод");
ВидыКурсов.Вставить(Перечисления.ВидыКурсов.СреднийКурсЗаПериодМСФО,		"СреднийКурсЗаПериодМСФО");
ВидыКурсов.Вставить(Перечисления.ВидыКурсов.СреднийКурсЗаПредыдущийПериод,	"СреднийКурсЗаПредыдущийПериод");

КэшКурсовВалют=Новый ТаблицаЗначений;
КэшКурсовВалют.Колонки.Добавить("Сценарий",		ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Сценарии"));
КэшКурсовВалют.Колонки.Добавить("Валюта",		ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Валюты"));
КэшКурсовВалют.Колонки.Добавить("ПериодКурса",	ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Периоды"));

КэшКурсовВалют.Колонки.Добавить("Кратность",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));

КэшКурсовВалют.Колонки.Добавить("КурсНаКонецПериода",			ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10,4));
КэшКурсовВалют.Колонки.Добавить("КурсНаКонецПредыдущегоПериода",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10,4));
КэшКурсовВалют.Колонки.Добавить("КурсНаНачалоПериода",			ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10,4));
КэшКурсовВалют.Колонки.Добавить("СреднийКурсЗаПериод",			ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10,4));
КэшКурсовВалют.Колонки.Добавить("СреднийКурсЗаПериодМСФО",		ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10,4));
КэшКурсовВалют.Колонки.Добавить("СреднийКурсЗаПредыдущийПериод",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10,4));

КэшКурсовВалют.Индексы.Добавить("Сценарий,Валюта,ПериодКурса");

КэшОтносительныхПериодов=Новый ТаблицаЗначений;
КэшОтносительныхПериодов.Колонки.Добавить("ПериодОтчета");
КэшОтносительныхПериодов.Колонки.Добавить("Смещение");
КэшОтносительныхПериодов.Колонки.Добавить("ОтносительныйПериод");

КэшОтносительныхПериодов.Индексы.Добавить("ПериодОтчета,Смещение");

КэшПериодовГода=Новый Соответствие;

ПоследнийРедактировавший = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");

РежимКорректировки=Ложь;

ФоновыйПересчетЗависимыхПоказателей=Константы.ФоновыйПересчетЗависимыхПоказателей.Получить();

#КонецЕсли