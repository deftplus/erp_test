#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Функция ЗаписатьЗначенияПоказателей(Реквизиты, СтруктураТабличныеЧасти, ТекущийОбъект = Неопределено) Экспорт

	РасчетПоказателейОбъект = ?(ТекущийОбъект = Неопределено, Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать(), ТекущийОбъект);
	
	ЗаполнитьЗначенияСвойств(РасчетПоказателейОбъект, Реквизиты);
	
	Для каждого ТекущаяТЧ Из СтруктураТабличныеЧасти Цикл	
		РасчетПоказателейОбъект[ТекущаяТЧ.Ключ].Загрузить(ТекущаяТЧ.Значение);	
	КонецЦикла;
	
	РасчетПоказателейОбъект.ЗаписатьЗначенияТаблицыПоказателей();
	
	Возврат РасчетПоказателейОбъект;
	
КонецФункции

Функция ЧистоваяЗаписьДанных(ВидОтчета,ИдентификаторСеанса="",УдалятьОписания=Истина) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.Владелец КАК ОписаниеВерсий,
	|	ВерсииЗначенийПоказателей.Ссылка КАК Версия
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.ЧерноваяВерсия";
	
	Если ЗначениеЗаполнено(ИдентификаторСеанса) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|	И ВерсииЗначенийПоказателей.ИдентификаторСеанса = &ИдентификаторСеанса";
		Запрос.УстановитьПараметр("ИдентификаторСеанса",ИдентификаторСеанса);
		
	КонецЕсли;
	
	МассивОписаний=Новый Массив;
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Если МассивОписаний.Найти(Результат.ОписаниеВерсий)=Неопределено Тогда
			
			МассивОписаний.Добавить(Результат.ОписаниеВерсий);
			
		КонецЕсли;
		
		Справочники.ВерсииЗначенийПоказателей.УдалитьЗаписиВерсии(Результат.Версия,Ложь);
		
	КонецЦикла;
	
	Если УдалятьОписания Тогда
		
		УдалитьОписанияВерсий(МассивОписаний,ВидОтчета);
		
	Иначе
		
		Возврат МассивОписаний;
		
	КонецЕсли;
	
КонецФункции // ЧистоваяЗаписьДанных()

Процедура УдалитьОписанияВерсий(МассивОписаний,ВидОтчета) Экспорт
	
	ПараметрыЗадания = Новый Массив();	
	ПараметрыЗадания.Добавить(МассивОписаний);
	
	СтрокаШаблона = Нстр("ru = 'Удаление черновых версий: %1'");
	
	ОписаниеЗадания = "";
	Если Не ПустаяСтрока(СтрокаШаблона) тогда								
		ОписаниеЗадания = СтрШаблон(СтрокаШаблона, ВидОтчета);
	КонецЕсли;

	КлючЗадания=Строка(Новый УникальныйИдентификатор);
	
	ФоновыеЗадания.Выполнить("ПересчетПоказателейУХ.УдалитьОписанияЧерновыхВерсий",ПараметрыЗадания,КлючЗадания,ОписаниеЗадания);	
	
КонецПроцедуры // УдалитьОписанияВерсий()

Процедура ВыполнитьКопированиеПоСрезам(ТаблицаИсточникПриемник,ЕстьОшибки) Экспорт
	
	Если ТаблицаИсточникПриемник.Количество()=0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СценарийИсточник=ТаблицаИсточникПриемник[0].СценарийИсточник;
	СценарийПриемник=ТаблицаИсточникПриемник[0].СценарийПриемник;
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	/////////////////////////////////////////////////////////////////////////////////////////////
	// Проверяем возможность записи данных по ключевым измерениям приемника
	
	Запрос.Текст="ВЫБРАТЬ
	|	ТаблицаИсточникПриемник.ВидОтчета КАК ВидОтчета,
	|	ТаблицаИсточникПриемник.Организация КАК Организация,
	|	ТаблицаИсточникПриемник.Проект КАК Проект,
	|	ТаблицаИсточникПриемник.Аналитика1 КАК Аналитика1,
	|	ТаблицаИсточникПриемник.Аналитика2 КАК Аналитика2,
	|	ТаблицаИсточникПриемник.Аналитика3 КАК Аналитика3,
	|	ТаблицаИсточникПриемник.Аналитика4 КАК Аналитика4,
	|	ТаблицаИсточникПриемник.Аналитика5 КАК Аналитика5,
	|	ТаблицаИсточникПриемник.Аналитика6 КАК Аналитика6,
	|	ТаблицаИсточникПриемник.ПериодОтчетаИсточник КАК ПериодОтчетаИсточник,
	|	ТаблицаИсточникПриемник.ПериодОтчетаПриемник КАК ПериодОтчетаПриемник,
	|	ТаблицаИсточникПриемник.ВерсияРегламентаИсточник КАК ВерсияРегламентаИсточник,
	|	ТаблицаИсточникПриемник.ВерсияРегламентаПриемник КАК ВерсияРегламентаПриемник
	|ПОМЕСТИТЬ ТаблицаИсточникПриемник
	|ИЗ
	|	&ТаблицаИсточникПриемник КАК ТаблицаИсточникПриемник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыПериодовСценариев.Периоды КАК ПериодОтчета,
	|	СтатусыПериодовСценариев.Организации КАК Организация,
	|	СтатусыПериодовСценариев.СтатусБлокировки КАК СтатусБлокировки
	|ПОМЕСТИТЬ БлокировкаПоПериоду
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|ГДЕ
	|	СтатусыПериодовСценариев.Сценарии = &СценарийПриемник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодОтчета,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияСтатусовПоказателейСинтетика.ПериодОтчета КАК ПериодОтчета,
	|	ЗначенияСтатусовПоказателейСинтетика.ОрганизационнаяЕдиница КАК Организация,
	|	ЗначенияСтатусовПоказателейСинтетика.Показатель.Владелец КАК ВидОтчета,
	|	ЗначенияСтатусовПоказателейСинтетика.ЗначениеЗаблокировано КАК ЗначениеЗаблокировано,
	|	ЗначенияСтатусовПоказателейСинтетика.ИндексСостояния КАК ИндексСостояния,	
	|	ЗначенияСтатусовПоказателейСинтетика.Проект КАК Проект,
	|	ЗначенияСтатусовПоказателейСинтетика.Аналитика1 КАК Аналитика1,
	|	ЗначенияСтатусовПоказателейСинтетика.Аналитика2 КАК Аналитика2,
	|	ЗначенияСтатусовПоказателейСинтетика.Аналитика3 КАК Аналитика3,
	|	ЗначенияСтатусовПоказателейСинтетика.Аналитика4 КАК Аналитика4,
	|	ЗначенияСтатусовПоказателейСинтетика.Аналитика5 КАК Аналитика5,
	|	ЗначенияСтатусовПоказателейСинтетика.Аналитика6 КАК Аналитика6
	|ПОМЕСТИТЬ БлокировкаПоСостоянию
	|ИЗ
	|	РегистрСведений.ЗначенияСтатусовПоказателейСинтетика КАК ЗначенияСтатусовПоказателейСинтетика
	|ГДЕ
	|	ЗначенияСтатусовПоказателейСинтетика.Сценарий = &СценарийПриемник
	|	И (ЗначенияСтатусовПоказателейСинтетика.ЗначениеЗаблокировано >= 2
	|			ИЛИ ЗначенияСтатусовПоказателейСинтетика.ИндексСостояния = 3)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодОтчета,
	|	Организация,
	|	ВидОтчета,
	|	Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИсточникПриемник.ВидОтчета КАК ВидОтчета,
	|	ТаблицаИсточникПриемник.Организация КАК Организация,
	|	ТаблицаИсточникПриемник.Проект КАК Проект,
	|	ТаблицаИсточникПриемник.ПериодОтчетаПриемник КАК ПериодОтчетаПриемник,
	|	ТаблицаИсточникПриемник.ПериодОтчетаИсточник КАК ПериодОтчетаИсточник,
	|	ТаблицаИсточникПриемник.ВерсияРегламентаИсточник КАК ВерсияРегламентаИсточник,		
	|	ТаблицаИсточникПриемник.ВерсияРегламентаПриемник КАК ВерсияРегламентаПриемник,
	|	ТаблицаИсточникПриемник.Аналитика1 КАК Аналитика1,
	|	ТаблицаИсточникПриемник.Аналитика2 КАК Аналитика2,
	|	ТаблицаИсточникПриемник.Аналитика3 КАК Аналитика3,
	|	ТаблицаИсточникПриемник.Аналитика4 КАК Аналитика4,
	|	ТаблицаИсточникПриемник.Аналитика5 КАК Аналитика5,
	|	ТаблицаИсточникПриемник.Аналитика6 КАК Аналитика6
	|ПОМЕСТИТЬ ОбластиПроверки
	|ИЗ
	|	ТаблицаИсточникПриемник КАК ТаблицаИсточникПриемник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодОтчетаПриемник,
	|	Организация,
	|	ВидОтчета,
	|	Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбластиПроверки.ВидОтчета КАК ВидОтчета,
	|	ОбластиПроверки.Организация КАК Организация,
	|	ОбластиПроверки.Проект КАК Проект,
	|	ОбластиПроверки.ПериодОтчетаПриемник КАК ПериодОтчетаПриемник,
	|	ОбластиПроверки.ПериодОтчетаИсточник КАК ПериодОтчетаИсточник,
	|	ЕСТЬNULL(БлокировкаПоПериоду.СтатусБлокировки, 10) КАК СтатусБлокировки,
	|	ЕСТЬNULL(БлокировкаПоСостоянию.ЗначениеЗаблокировано, 0) КАК ЗначениеЗаблокировано,
	|	ЕСТЬNULL(БлокировкаПоСостоянию.ИндексСостояния, 0) КАК ИндексСостояния
	|ПОМЕСТИТЬ ДанныеБлокировки
	|ИЗ
	|	ОбластиПроверки КАК ОбластиПроверки
	|		ЛЕВОЕ СОЕДИНЕНИЕ БлокировкаПоПериоду КАК БлокировкаПоПериоду
	|		ПО ОбластиПроверки.Организация = БлокировкаПоПериоду.Организация
	|			И ОбластиПроверки.ПериодОтчетаПриемник = БлокировкаПоПериоду.ПериодОтчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ БлокировкаПоСостоянию КАК БлокировкаПоСостоянию
	|		ПО ОбластиПроверки.ПериодОтчетаПриемник = БлокировкаПоСостоянию.ПериодОтчета
	|			И ОбластиПроверки.Организация = БлокировкаПоСостоянию.Организация
	|			И ОбластиПроверки.ВидОтчета = БлокировкаПоСостоянию.ВидОтчета
	|			И ОбластиПроверки.Проект = БлокировкаПоСостоянию.Проект
	|			И ОбластиПроверки.Аналитика1 = БлокировкаПоСостоянию.Аналитика1
	|			И ОбластиПроверки.Аналитика2 = БлокировкаПоСостоянию.Аналитика2
	|			И ОбластиПроверки.Аналитика3 = БлокировкаПоСостоянию.Аналитика3
	|			И ОбластиПроверки.Аналитика4 = БлокировкаПоСостоянию.Аналитика4
	|			И ОбластиПроверки.Аналитика5 = БлокировкаПоСостоянию.Аналитика5
	|			И ОбластиПроверки.Аналитика6 = БлокировкаПоСостоянию.Аналитика6
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеБлокировки.Организация КАК Организация,
	|	ДанныеБлокировки.ПериодОтчетаПриемник КАК ПериодОтчетаПриемник,
	|	ДанныеБлокировки.СтатусБлокировки КАК СтатусБлокировки
	|ИЗ
	|	ДанныеБлокировки КАК ДанныеБлокировки
	|ГДЕ
	|	ДанныеБлокировки.СтатусБлокировки > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеБлокировки.ВидОтчета КАК ВидОтчета,
	|	ДанныеБлокировки.Организация КАК Организация,
	|	ДанныеБлокировки.ПериодОтчетаПриемник КАК ПериодОтчета,
	|	ДанныеБлокировки.ЗначениеЗаблокировано КАК ЗначениеЗаблокировано,
	|	ДанныеБлокировки.ИндексСостояния КАК ИндексСостояния
	|ИЗ
	|	ДанныеБлокировки КАК ДанныеБлокировки
	|ГДЕ
	|	(ДанныеБлокировки.ЗначениеЗаблокировано > 0
	|			ИЛИ ДанныеБлокировки.ИндексСостояния > 0)";
	
	Запрос.УстановитьПараметр("ТаблицаИсточникПриемник",ТаблицаИсточникПриемник);
	Запрос.УстановитьПараметр("СценарийПриемник",		СценарийПриемник);
	
	РезультатЗапроса=Запрос.ВыполнитьПакет();
	
	ТекстОшибки="";
	
	ЗаблокированныеПериоды=РезультатЗапроса[5].Выгрузить();
	
	Если ЗаблокированныеПериоды.Количество()>0 Тогда
						
		Для Каждого Строка ИЗ ЗаблокированныеПериоды Цикл
			
			Если Строка.СтатусБлокировки = 10 тогда
				СтрокаШаблона = Нстр("ru = 'Организация %1, период %2 еще не открыт.'");
			Иначе
				СтрокаШаблона = Нстр("ru = 'Организация %1, период %2 закрыт.'");
			КонецЕсли;
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда								
				ТекстОшибки = ТекстОшибки + Символы.ПС + СтрШаблон(СтрокаШаблона, Строка.Организация, Строка.ПериодОтчетаПриемник);
			КонецЕсли;
						
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстОшибки) Тогда
		
		ЗаблокированныеПоказатели=РезультатЗапроса[6].Выгрузить();
		
		Если ЗаблокированныеПоказатели.Количество()>0 Тогда
			
			Для Каждого Строка ИЗ ЗаблокированныеПоказатели Цикл
				
				ТекстОшибки = ТекстОшибки + "
				|" + Нстр("ru = 'Организация: '") + Строка.Организация + Нстр("ru = ' период: '") + Строка.ПериодОтчетаПриемник + Нстр("ru = ', вид отчета: '") + Строка.ВидОтчета;
				
				Если Строка.ЗначениеЗаблокировано > 0 Тогда
					
					ТекстОшибки = ТекстОшибки + Нстр("ru = '
					|значения заблокированы'");
					
				КонецЕсли;
				
				Если Строка.ИндексСостояния > 0 Тогда
					
					ТекстОшибки = ТекстОшибки + Нстр("ru = '
					|данные утверждены'");
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		
		СтрокаШаблона = Нстр("ru = 'Копирование данных не выполнено по следующим причинам: %1'");
		
		СообщениеОбОшибке = "";
		Если Не ПустаяСтрока(СтрокаШаблона) тогда								
			СообщениеОбОшибке = СтрШаблон(СтрокаШаблона, ТекстОшибки);
		КонецЕсли;
				
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СообщениеОбОшибке,,,СтатусСообщения.Важное);
		
		ЕстьОшибки=Истина;
				
		Возврат;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////////
	// Получаем таблицы для пересчета валютных значений при переносе из периода в период
	
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбластиПроверки.ПериодОтчетаПриемник КАК ПериодОтчетаПриемник,
	|	ОбластиПроверки.ПериодОтчетаИсточник КАК ПериодОтчетаИсточник
	|ПОМЕСТИТЬ РабочиеПериоды
	|ИЗ
	|	ОбластиПроверки КАК ОбластиПроверки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодОтчетаПриемник,
	|	ПериодОтчетаИсточник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбластиПроверки.Организация КАК Организация,
	|	ОбластиПроверки.ПериодОтчетаПриемник КАК ПериодОтчетаПриемник,
	|	ОбластиПроверки.ПериодОтчетаИсточник КАК ПериодОтчетаИсточник,
	|	ОбластиПроверки.ВерсияРегламентаИсточник КАК ВерсияРегламентаИсточник,
	|	ОбластиПроверки.ВерсияРегламентаПриемник КАК ВерсияРегламентаПриемник
	|ПОМЕСТИТЬ РабочиеПериодыОрганизации
	|ИЗ
	|	ОбластиПроверки КАК ОбластиПроверки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВерсияРегламентаИсточник,
	|	ВерсияРегламентаПриемник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодическиеКурсы.Валюта КАК Валюта,
	|	ПериодическиеКурсы.ПериодКурса КАК ПериодКурса,
	|	ПериодическиеКурсы.СреднийКурсЗаПериод КАК СреднийКурсЗаПериод,
	|	ПериодическиеКурсы.СреднийКурсЗаПериодМСФО КАК СреднийКурсЗаПериодМСФО,
	|	ПериодическиеКурсы.КурсНаНачалоПериода КАК КурсНаНачалоПериода,
	|	ПериодическиеКурсы.КурсНаКонецПериода КАК КурсНаКонецПериода,
	|	ПериодическиеКурсы.СреднийКурсЗаПредыдущийПериод КАК СреднийКурсЗаПредыдущийПериод,
	|	ПериодическиеКурсы.КурсНаКонецПредыдущегоПериода КАК КурсНаКонецПредыдущегоПериода,
	|	ПериодическиеКурсы.Кратность КАК Кратность,
	|	ПериодическиеКурсы.СреднийКурсЗаПериодЦБ КАК СреднийКурсЗаПериодЦБ,
	|	ПериодическиеКурсы.СреднийКурсЗаПредыдущийПериодЦБ КАК СреднийКурсЗаПредыдущийПериодЦБ,
	|	РабочиеПериоды.ПериодОтчетаПриемник КАК ПериодКурсаПриемник
	|ПОМЕСТИТЬ ПериодическиеКурсыИсточник
	|ИЗ
	|	РегистрСведений.ПериодическиеКурсы КАК ПериодическиеКурсы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РабочиеПериоды КАК РабочиеПериоды
	|		ПО ПериодическиеКурсы.ПериодКурса = РабочиеПериоды.ПериодОтчетаИсточник
	|ГДЕ
	|	ПериодическиеКурсы.Сценарий = &СценарийИсточник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодическиеКурсы.Валюта КАК Валюта,
	|	ПериодическиеКурсы.ПериодКурса КАК ПериодКурса,
	|	ПериодическиеКурсы.СреднийКурсЗаПериод КАК СреднийКурсЗаПериод,
	|	ПериодическиеКурсы.СреднийКурсЗаПериодМСФО КАК СреднийКурсЗаПериодМСФО,
	|	ПериодическиеКурсы.КурсНаНачалоПериода КАК КурсНаНачалоПериода,
	|	ПериодическиеКурсы.КурсНаКонецПериода КАК КурсНаКонецПериода,
	|	ПериодическиеКурсы.СреднийКурсЗаПредыдущийПериод КАК СреднийКурсЗаПредыдущийПериод,
	|	ПериодическиеКурсы.КурсНаКонецПредыдущегоПериода КАК КурсНаКонецПредыдущегоПериода,
	|	ПериодическиеКурсы.Кратность КАК Кратность,
	|	ПериодическиеКурсы.СреднийКурсЗаПериодЦБ КАК СреднийКурсЗаПериодЦБ,
	|	ПериодическиеКурсы.СреднийКурсЗаПредыдущийПериодЦБ КАК СреднийКурсЗаПредыдущийПериодЦБ
	|ПОМЕСТИТЬ ПериодическиеКурсыПриемник
	|ИЗ
	|	РегистрСведений.ПериодическиеКурсы КАК ПериодическиеКурсы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РабочиеПериоды КАК РабочиеПериоды
	|		ПО ПериодическиеКурсы.ПериодКурса = РабочиеПериоды.ПериодОтчетаПриемник
	|ГДЕ
	|	ПериодическиеКурсы.Сценарий = &СценарийПриемник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодическиеКурсыИсточник.ПериодКурса КАК ПериодСценария,
	|	ПериодическиеКурсыИсточник.Валюта КАК Валюта,
	|	ПериодическиеКурсыИсточник.Кратность КАК Кратность,
	|	ПериодическиеКурсыИсточник.СреднийКурсЗаПериод КАК СреднийКурсЗаПериод,
	|	ПериодическиеКурсыИсточник.СреднийКурсЗаПериодМСФО КАК СреднийКурсЗаПериодМСФО,
	|	ПериодическиеКурсыИсточник.КурсНаНачалоПериода КАК КурсНаНачалоПериода,
	|	ПериодическиеКурсыИсточник.КурсНаКонецПериода КАК КурсНаКонецПериода,
	|	ПериодическиеКурсыИсточник.СреднийКурсЗаПредыдущийПериод КАК СреднийКурсЗаПредыдущийПериод,
	|	ПериодическиеКурсыИсточник.КурсНаКонецПредыдущегоПериода КАК КурсНаКонецПредыдущегоПериода,
	|	ПериодическиеКурсыИсточник.Кратность КАК Кратность1,
	|	ПериодическиеКурсыИсточник.СреднийКурсЗаПериодЦБ КАК СреднийКурсЗаПериодЦБ,
	|	ПериодическиеКурсыИсточник.СреднийКурсЗаПредыдущийПериодЦБ КАК СреднийКурсЗаПредыдущийПериодЦБ
	|ИЗ
	|	ПериодическиеКурсыИсточник КАК ПериодическиеКурсыИсточник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодическиеКурсыПриемник.Валюта КАК Валюта,
	|	ПериодическиеКурсыПриемник.ПериодКурса КАК ПериодСценария,
	|	ПериодическиеКурсыПриемник.СреднийКурсЗаПериод КАК СреднийКурсЗаПериод,
	|	ПериодическиеКурсыПриемник.СреднийКурсЗаПериодМСФО КАК СреднийКурсЗаПериодМСФО,
	|	ПериодическиеКурсыПриемник.КурсНаНачалоПериода КАК КурсНаНачалоПериода,
	|	ПериодическиеКурсыПриемник.КурсНаКонецПериода КАК КурсНаКонецПериода,
	|	ПериодическиеКурсыПриемник.СреднийКурсЗаПредыдущийПериод КАК СреднийКурсЗаПредыдущийПериод,
	|	ПериодическиеКурсыПриемник.КурсНаКонецПредыдущегоПериода КАК КурсНаКонецПредыдущегоПериода,
	|	ПериодическиеКурсыПриемник.Кратность КАК Кратность,
	|	ПериодическиеКурсыПриемник.СреднийКурсЗаПериодЦБ КАК СреднийКурсЗаПериодЦБ,
	|	ПериодическиеКурсыПриемник.СреднийКурсЗаПредыдущийПериодЦБ КАК СреднийКурсЗаПредыдущийПериодЦБ
	|ИЗ
	|	ПериодическиеКурсыПриемник КАК ПериодическиеКурсыПриемник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодическиеКурсыИсточник.Валюта КАК Валюта,
	|	ПериодическиеКурсыИсточник.ПериодКурса КАК ПериодКурсаИсточник,
	|	ПериодическиеКурсыПриемник.ПериодКурса КАК ПериодКурсаПриемник,
	|	ВЫБОР
	|		КОГДА ПериодическиеКурсыПриемник.СреднийКурсЗаПериод ЕСТЬ NULL
	|				ИЛИ ПериодическиеКурсыПриемник.СреднийКурсЗаПериод = 0
	|			ТОГДА 0
	|		ИНАЧЕ ПериодическиеКурсыПриемник.СреднийКурсЗаПериод / ПериодическиеКурсыИсточник.СреднийКурсЗаПериод * (ПериодическиеКурсыИсточник.Кратность / ПериодическиеКурсыПриемник.Кратность)
	|	КОНЕЦ КАК СреднийКурсЗаПериод_Изменение,
	|	ВЫБОР
	|		КОГДА ПериодическиеКурсыПриемник.СреднийКурсЗаПериодМСФО ЕСТЬ NULL
	|				ИЛИ ПериодическиеКурсыПриемник.СреднийКурсЗаПериодМСФО = 0
	|			ТОГДА 0
	|		ИНАЧЕ ПериодическиеКурсыПриемник.СреднийКурсЗаПериодМСФО / ПериодическиеКурсыИсточник.СреднийКурсЗаПериодМСФО * (ПериодическиеКурсыИсточник.Кратность / ПериодическиеКурсыПриемник.Кратность)
	|	КОНЕЦ КАК СреднийКурсЗаПериодМСФО_Изменение,
	|	ВЫБОР
	|		КОГДА ПериодическиеКурсыПриемник.КурсНаНачалоПериода ЕСТЬ NULL
	|				ИЛИ ПериодическиеКурсыПриемник.КурсНаНачалоПериода = 0
	|			ТОГДА 0
	|		ИНАЧЕ ПериодическиеКурсыПриемник.КурсНаНачалоПериода / ПериодическиеКурсыИсточник.КурсНаНачалоПериода * (ПериодическиеКурсыИсточник.Кратность / ПериодическиеКурсыПриемник.Кратность)
	|	КОНЕЦ КАК КурсНаНачалоПериода_Изменение,
	|	ВЫБОР
	|		КОГДА ПериодическиеКурсыПриемник.КурсНаКонецПериода ЕСТЬ NULL
	|				ИЛИ ПериодическиеКурсыПриемник.КурсНаКонецПериода = 0
	|			ТОГДА 0
	|		ИНАЧЕ ПериодическиеКурсыПриемник.КурсНаКонецПериода / ПериодическиеКурсыИсточник.КурсНаКонецПериода * (ПериодическиеКурсыИсточник.Кратность / ПериодическиеКурсыПриемник.Кратность)
	|	КОНЕЦ КАК КурсНаКонецПериода_Изменение,
	|	ВЫБОР
	|		КОГДА ПериодическиеКурсыПриемник.СреднийКурсЗаПредыдущийПериод ЕСТЬ NULL
	|				ИЛИ ПериодическиеКурсыПриемник.СреднийКурсЗаПредыдущийПериод = 0
	|			ТОГДА 0
	|		ИНАЧЕ ПериодическиеКурсыПриемник.СреднийКурсЗаПредыдущийПериод / ПериодическиеКурсыИсточник.СреднийКурсЗаПредыдущийПериод * (ПериодическиеКурсыИсточник.Кратность / ПериодическиеКурсыПриемник.Кратность)
	|	КОНЕЦ КАК СреднийКурсЗаПредыдущийПериод_Изменение,
	|	ВЫБОР
	|		КОГДА ПериодическиеКурсыПриемник.КурсНаКонецПредыдущегоПериода ЕСТЬ NULL
	|				ИЛИ ПериодическиеКурсыПриемник.КурсНаКонецПредыдущегоПериода = 0
	|			ТОГДА 0
	|		ИНАЧЕ ПериодическиеКурсыПриемник.КурсНаКонецПредыдущегоПериода / ПериодическиеКурсыИсточник.КурсНаКонецПредыдущегоПериода * (ПериодическиеКурсыИсточник.Кратность / ПериодическиеКурсыПриемник.Кратность)
	|	КОНЕЦ КАК КурсНаКонецПредыдущегоПериода_Изменение,
	|	ВЫБОР
	|		КОГДА ПериодическиеКурсыПриемник.СреднийКурсЗаПериодЦБ ЕСТЬ NULL
	|				ИЛИ ПериодическиеКурсыПриемник.СреднийКурсЗаПериодЦБ = 0
	|			ТОГДА 0
	|		ИНАЧЕ ПериодическиеКурсыПриемник.СреднийКурсЗаПериодЦБ / ПериодическиеКурсыИсточник.СреднийКурсЗаПериодЦБ * (ПериодическиеКурсыИсточник.Кратность / ПериодическиеКурсыПриемник.Кратность)
	|	КОНЕЦ КАК СреднийКурсЗаПериодЦБ_Изменение,
	|	ВЫБОР
	|		КОГДА ПериодическиеКурсыПриемник.СреднийКурсЗаПредыдущийПериодЦБ ЕСТЬ NULL
	|				ИЛИ ПериодическиеКурсыПриемник.СреднийКурсЗаПредыдущийПериодЦБ = 0
	|			ТОГДА 0
	|		ИНАЧЕ ПериодическиеКурсыПриемник.СреднийКурсЗаПредыдущийПериодЦБ / ПериодическиеКурсыИсточник.СреднийКурсЗаПредыдущийПериодЦБ * (ПериодическиеКурсыИсточник.Кратность / ПериодическиеКурсыПриемник.Кратность)
	|	КОНЕЦ КАК СреднийКурсЗаПредыдущийПериодЦБ_Изменение
	|ИЗ
	|	ПериодическиеКурсыИсточник КАК ПериодическиеКурсыИсточник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодическиеКурсыПриемник КАК ПериодическиеКурсыПриемник
	|		ПО ПериодическиеКурсыИсточник.Валюта = ПериодическиеКурсыПриемник.Валюта
	|			И ПериодическиеКурсыИсточник.ПериодКурсаПриемник = ПериодическиеКурсыПриемник.ПериодКурса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВалютыОтчетности.Организация КАК Организация,
	|	ВалютыОтчетности.Валюта КАК Валюта,
	|	ВалютыОтчетности.ОсновнаяВалюта КАК ОсновнаяВалюта,
	|	РабочиеПериодыОрганизации.ПериодОтчетаИсточник КАК ПериодОтчета
	|ИЗ
	|	РегистрСведений.ВалютыОтчетности КАК ВалютыОтчетности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РабочиеПериодыОрганизации КАК РабочиеПериодыОрганизации
	|		ПО ВалютыОтчетности.Регламент = РабочиеПериодыОрганизации.ВерсияРегламентаИсточник
	|			И ВалютыОтчетности.Организация = РабочиеПериодыОрганизации.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВалютыОтчетности.Организация КАК Организация,
	|	ВалютыОтчетности.Валюта КАК Валюта,
	|	ВалютыОтчетности.ОсновнаяВалюта КАК ОсновнаяВалюта,
	|	РабочиеПериодыОрганизации.ПериодОтчетаПриемник КАК ПериодОтчета
	|ИЗ
	|	РегистрСведений.ВалютыОтчетности КАК ВалютыОтчетности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РабочиеПериодыОрганизации КАК РабочиеПериодыОрганизации
	|		ПО ВалютыОтчетности.Регламент = РабочиеПериодыОрганизации.ВерсияРегламентаПриемник
	|			И ВалютыОтчетности.Организация = РабочиеПериодыОрганизации.Организация";
	
	Запрос.УстановитьПараметр("СценарийИсточник",СценарийИсточник);
		
	РезультатЗапроса=Запрос.ВыполнитьПакет();
				
	КэшТаблицыКурсовИсточник = РезультатЗапроса[4].Выгрузить();
	КэшТаблицыКурсовИсточник.Индексы.Добавить("ПериодСценария,Валюта");	
	
	КэшТаблицыКурсовПриемник = РезультатЗапроса[5].Выгрузить();
	КэшТаблицыКурсовПриемник.Индексы.Добавить("ПериодСценария,Валюта");
		
	СоотношениеКурсов		 = РезультатЗапроса[6].Выгрузить();
	СоотношениеКурсов.Индексы.Добавить("ПериодКурсаИсточник,ПериодКурсаПриемник,Валюта");
	
	ВалютыОтчетностиИсточник = РезультатЗапроса[7].Выгрузить();
	ВалютыОтчетностиИсточник.Индексы.Добавить("ПериодОтчета,Организация,ОсновнаяВалюта");	
	
	ВалютыОтчетностиПриемник = РезультатЗапроса[8].Выгрузить();
	ВалютыОтчетностиПриемник.Индексы.Добавить("ПериодОтчета,Организация,ОсновнаяВалюта");
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Выполняем копирование
	
	СтруктураИзмерений=Новый Структура("ВидОтчета,Организация,Проект,СценарийИсточник,СценарийПриемник,ПериодОтчетаИсточник,ПериодОтчетаПриемник");
	
	Для Индекс=1 ПО ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		СтруктураИзмерений.Вставить("Аналитика"+Индекс);
		
	КонецЦикла;
			
	Для Каждого Строка ИЗ ТаблицаИсточникПриемник Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураИзмерений,Строка);	
		СкопироватьДанныеПоКлючевымИзмерениям(СтруктураИзмерений,КэшТаблицыКурсовПриемник,СоотношениеКурсов,ВалютыОтчетностиИсточник,ВалютыОтчетностиПриемник);
		
	КонецЦикла;	
	
КонецПроцедуры // ВыполнитьКопированиеПоСрезам()

Процедура СкопироватьДанныеПоКлючевымИзмерениям(СтруктураИзмерений,КэшТаблицыКурсов,СоотношениеКурсов,ВалютыОтчетностиИсточник,ВалютыОтчетностиПриемник) Экспорт
	
	ДокументОбъект=Документы.НастраиваемыйОтчет.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ДокументОбъект,СтруктураИзмерений);
	
	ДокументОбъект.Сценарий		= СтруктураИзмерений.СценарийИсточник;
	ДокументОбъект.ПериодОтчета	= СтруктураИзмерений.ПериодОтчетаИсточник;
		
	ДокументОбъект.ОсновнаяВалюта=ВалютыОтчетностиИсточник.НайтиСтроки(Новый Структура("ПериодОтчета,Организация,ОсновнаяВалюта",ДокументОбъект.ПериодОтчета,ДокументОбъект.Организация,Истина))[0].Валюта;
	ДокументОбъект.ВсегдаЗаполнятьАналитики=Истина;
	ДокументОбъект.ИнициализироватьКонтекст();
	
	// Определим новое окружение основной и дополнительных валют
	
	ДанныеПоВалютамПриемник=ВалютыОтчетностиПриемник.НайтиСтроки(Новый Структура("ПериодОтчета,Организация",СтруктураИзмерений.ПериодОтчетаПриемник,ДокументОбъект.Организация));
	
	Для Каждого Строка ИЗ ДанныеПоВалютамПриемник Цикл
		
		Если Строка.ОсновнаяВалюта Тогда
			
			ОсновнаяВалютаПриемник=Строка.Валюта;
			
		Иначе
			
			НоваяСтрока=ДокументОбъект.ДополнительныеВалюты.Добавить();
			НоваяСтрока.Валюта=Строка.Валюта;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументОбъект.Сценарий					= СтруктураИзмерений.СценарийПриемник;
	ДокументОбъект.ПериодОтчета				= СтруктураИзмерений.ПериодОтчетаПриемник;
	ДокументОбъект.ИзмененКлючевойРеквизит	= Истина;
	
	Если НЕ ДокументОбъект.ОсновнаяВалюта=ОсновнаяВалютаПриемник Тогда
		
		ПересчитатьЗначенияПоказателейВНовойВалюте(ДокументОбъект,ОсновнаяВалютаПриемник,КэшТаблицыКурсов);
		
	Иначе
		
		ПересчитатьЗначенияВалютныхПоказателей(ДокументОбъект,СоотношениеКурсов.Скопировать(Новый Структура("ПериодКурсаИсточник,ПериодКурсаПриемник",СтруктураИзмерений.ПериодОтчетаИсточник,СтруктураИзмерений.ПериодОтчетаПриемник)));
		
	КонецЕсли;
	
	ДокументОбъект.ОсновнаяВалюта=ОсновнаяВалютаПриемник;
	
	ОбъектРасчета=ДокументОбъект.ПодготовитьСтруктуруПеременныхДляРасчета();
	ОчиститьДвиженияПоОбъекту(ОбъектРасчета);
	ДокументОбъект.мВалютыЗаписей=Новый Массив;
	ДокументОбъект.СписокИспользуемыхВерсий=Неопределено;
	
	ДокументОбъект.ЗаполнитьЛогиПоТекущимЗначениям();
	ОбъектРасчета=ДокументОбъект.ПодготовитьСтруктуруПеременныхДляРасчета();
	ОбъектРасчета.Вставить("АктивностьДвижений",Ложь);
	ОбъектРасчета.Вставить("ДатаИзмененияMs",ТекущаяУниверсальнаяДатаВМиллисекундах());
	ОбъектРасчета.Вставить("СохранятьИсториюИзменений",Истина);
				
	УправлениеОтчетамиУХ.ЗаписатьПоказателиОтчетов(ОбъектРасчета,Ложь,Ложь);
		
КонецПроцедуры // СкопироватьДанныеПоКлючевымИзмерениям()

Процедура ОчиститьДвиженияПоОбъекту(ОбъектРасчета) Экспорт
	
	СписокВерсий=УправлениеОтчетамиУХ.ПолучитьСписокВерсий(ОбъектРасчета);
	
	Для Каждого Элемент ИЗ СписокВерсий Цикл
		
		Справочники.ВерсииЗначенийПоказателей.УдалитьЗаписиВерсии(Элемент.Значение,Ложь);
		
	КонецЦикла;
	
КонецПроцедуры // ОчиститьДвиженияПоОбъекту()

Процедура ПересчитатьЗначенияПоказателейВНовойВалюте(ДокументОбъект,НоваяВалюта,КэшТаблицыКурсов)
	
	ДокументОбъект.КэшТаблицыКурсов=КэшТаблицыКурсов;
	
	МассивВалютные=Новый Массив;
	
	Для Каждого Пок ИЗ ДокументОбъект.мПоказатели Цикл
		
		Если Пок.Валютный И Пок.ПересчитыватьВалютнуюСумму Тогда
			
			МассивВалютные.Добавить(Пок.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
		Пок.Значение=ДокументОбъект.ПересчитатьЗначениеПоказателяПоКурсу(Пок.Значение,Пок,ДокументОбъект.ОсновнаяВалюта,НоваяВалюта);
		
	КонецЦикла;
	
	Для Каждого Строка ИЗ ДокументОбъект.мПоказателиРаскрытия Цикл
		
		Пок=ДокументОбъект.мСоответствиеДляПоискаПоСсылке[Строка.Показатель];
		
		Если МассивВалютные.Найти(Строка.Показатель)=Неопределено Тогда
			
			Строка.Значение=ДокументОбъект.ПересчитатьЗначениеПоказателяПоКурсу(Строка.Значение,Пок,ДокументОбъект.ОсновнаяВалюта,НоваяВалюта);
			
		Иначе
			
			Строка.Значение=ДокументОбъект.ПересчитатьЗначениеПоказателяПоКурсу(Строка.ЗначениеВалюта,Пок,Строка.АналитикаВалюта,НоваяВалюта);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивВалютные.Количество()>0 Тогда
		
		УправлениеОтчетамиУХ.ПолучитьИтогиПоПоказателямСостояние(ДокументОбъект,МассивВалютные);
		
	КонецЕсли;
				
КонецПроцедуры // ПересчитатьЗначенияПоказателейВНовойВалюте() 


Процедура ПересчитатьЗначенияВалютныхПоказателей(ДокументОбъект,СоотношениеКурсов) Экспорт
	
	МассивВалютные=ДокументОбъект.мПоказатели.НайтиСтроки(Новый Структура("Валютный,ПересчитыватьВалютнуюСумму",Истина,Истина));
	
	Если МассивВалютные.Количество()=0 Тогда
		
		Возврат;
		
	КонецЕсли;
		
	ТабВалютные=ДокументОбъект.мПоказатели.Скопировать(Новый Структура("Валютный,ПересчитыватьВалютнуюСумму",Истина,Истина));
	
	ВидыКурсов=Новый Соответствие;
	ВидыКурсов.Вставить(Перечисления.ВидыКурсов.КурсНаКонецПериода,				"КурсНаКонецПериода");
	ВидыКурсов.Вставить(Перечисления.ВидыКурсов.КурсНаКонецПредыдущегоПериода,	"КурсНаКонецПредыдущегоПериода");
	ВидыКурсов.Вставить(Перечисления.ВидыКурсов.КурсНаНачалоПериода,			"КурсНаНачалоПериода");
	ВидыКурсов.Вставить(Перечисления.ВидыКурсов.СреднийКурсЗаПериод,			"СреднийКурсЗаПериод");
	ВидыКурсов.Вставить(Перечисления.ВидыКурсов.СреднийКурсЗаПериодМСФО,		"СреднийКурсЗаПериодМСФО");
	ВидыКурсов.Вставить(Перечисления.ВидыКурсов.СреднийКурсЗаПредыдущийПериод,	"СреднийКурсЗаПредыдущийПериод");
	
	ТаблицаРаскрытийНов=ДокументОбъект.мПоказателиРаскрытия.СкопироватьКолонки();
		
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.Текст="ВЫБРАТЬ * 
	|ПОМЕСТИТЬ мПоказателиРаскрытия
	|ИЗ
	|	&мПоказателиРаскрытия КАК мПоказателиРаскрытия
	|Индексировать ПО мПоказателиРаскрытия.Показатель, мПоказателиРаскрытия.АналитикаВалюта
	|;
	|ВЫБРАТЬ *
	|Поместить СоотношениеКурсов
	|ИЗ &СоотношениеКурсов КАК СоотношениеКурсов
	|Индексировать ПО СоотношениеКурсов.Валюта";
	
	Запрос.УстановитьПараметр("мПоказателиРаскрытия",ДокументОбъект.мПоказателиРаскрытия);
	Запрос.УстановитьПараметр("СоотношениеКурсов",СоотношениеКурсов);
	Запрос.Выполнить();
			
	ТекстЗапроса="ВЫБРАТЬ Показатель";
		
	Для Каждого Колонка ИЗ ТаблицаРаскрытийНов.Колонки Цикл
		
		Если Колонка.Имя="Значение" Тогда
			
			ТекстЗапроса=ТекстЗапроса +",
			|Значение*СоотношениеКурсов.&&ПараметрОтношение&&";
			
		Иначе
			
			ТекстЗапроса=ТекстЗапроса +",
			|Колонка.Имя";
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса=ТекстЗапроса+"
	|ИЗ мПоказателиРаскрытия
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ СоотношениеКурсов КАК СоотношениеКурсов
	|По мПоказателиРаскрытия.Показатель=&Показатель
	|И мПоказателиРаскрытия.АналитикаВалюта=СоотношениеКурсов.Валюта";
		
	Для Каждого СтрПоказатель ИЗ ТабВалютные Цикл
		
		ТекстОтношение=ВидыКурсов[СтрПоказатель.ВидКурса]+"_Изменение";
		
		Запрос.Текст=СтрЗаменить(ТекстЗапроса,"&&ПараметрОтношение&&",ТекстОтношение);
		Запрос.УстановитьПараметр("Показатель",СтрПоказатель.Ссылка);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			НоваяСтрока=ТаблицаРаскрытийНов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.Текст="ВЫБРАТЬ * ИЗ мПоказателиРаскрытия ГДЕ НЕ мПоказателиРаскрытия.Показатель В (&МассивВалютные)";
	
	МассивВалютные=ТабВалютные.ВыгрузитьКолонку("Ссылка");
	Запрос.УстановитьПараметр("МассивВалютные",МассивВалютные);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока=ТаблицаРаскрытийНов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
		
	КонецЦикла;
	
	УправлениеОтчетамиУХ.ПолучитьИтогиПоПоказателямСостояние(ДокументОбъект,МассивВалютные);
			
КонецПроцедуры // ПересчитатьЗначенияВалютныхПоказателей() 
	
#КонецЕсли	