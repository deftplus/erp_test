
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.ИмяОбъектаМетаданных=Параметры.ИмяОбъектаМетаДанных;
	Объект.ТипОбъектаКонсолидации=Параметры.ТипОбъектаКонсолидации;
	Объект.СпособОбработки=Параметры.СпособОбработки;
	
	Если НЕ ЗначениеЗаполнено(Объект.ИмяОбъектаМетаданных) Тогда
		
		Запрос= Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	СправочникиБД.Ссылка,
		|	СправочникиБД.Синоним КАК Синоним,
		|	СправочникиБД.Наименование КАК ИмяОбъектаМетаданных
		|ИЗ
		|	Справочник.СправочникиБД КАК СправочникиБД
		|ГДЕ
		|	СправочникиБД.Владелец = &Владелец
		|	И НЕ СправочникиБД.ПометкаУдаления";
			
		Запрос.УстановитьПараметр("Владелец",Справочники.ТипыБазДанных.ТекущаяИБ);	
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			Если НЕ МетаДанные.Справочники.Найти(Объект.ИмяОбъектаМетаданных)=Неопределено Тогда
				
				Объект.ТипОбъектаКонсолидации="Справочник";
				Объект.ИмяОбъектаМетаданных=Результат.ИмяОбъектаМетаданных;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СписокОбъектовКонсолидации=ПолучитьСписокДляВыбораОбъектаКонсолидации(Объект.ТипОбъектаКонсолидации);
	
	Элементы.ИмяОбъектаМетаданных.СписокВыбора.Очистить();
	
	Для Каждого ТекОбъект ИЗ СписокОбъектовКонсолидации Цикл
		
		Элементы.ИмяОбъектаМетаданных.СписокВыбора.Добавить(ТекОбъект.Значение,ТекОбъект.Представление);
		
	КонецЦикла;
	
	Если Объект.СпособОбработки=0 Тогда
		Объект.СпособОбработки=4;
	Иначе
		Если Объект.СпособОбработки=2 ИЛИ Объект.СпособОбработки=3 Тогда
			Элементы.ГруппаПоискПоЭталонам.Видимость=Ложь;
		КонецЕсли;		
	КонецЕсли;
	
	ВариантПоиска="ИЛИ";
	
	ПриИзмененииОбъектаМетаданных();
	
	Объект.ЭлементДляПоиска=Параметры.ЭлементДляПоиска;
	
	МассивОтображать=РеквизитыДляПоискаФорма.НайтиСтроки(Новый Структура("Отображать",Истина));
	
	Если МассивОтображать.Количество()>0 Тогда
		
		ВыполнитьПоискДублирующихсяЭлементов();
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииТипаОбъектаКонсолидации()
	
	Если Объект.ТипОбъектаКонсолидации="ВидСубконто" Тогда
		
		Объект.ИмяОбъектаМетаданных=ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка");
		
	Иначе
		
		Объект.ИмяОбъектаМетаданных="";
		
	КонецЕсли;
		
	СписокОбъектовКонсолидации=ПолучитьСписокДляВыбораОбъектаКонсолидации(Объект.ТипОбъектаКонсолидации);
	
	Элементы.ИмяОбъектаМетаданных.СписокВыбора.Очистить();
	
	Для Каждого ТекОбъект ИЗ СписокОбъектовКонсолидации Цикл
		
		Элементы.ИмяОбъектаМетаданных.СписокВыбора.Добавить(ТекОбъект.Значение,ТекОбъект.Представление);
		
	КонецЦикла;
	
	ПриИзмененииОбъектаМетаданных();
		
КонецПроцедуры // ПриИзмененииТипаОбъектаКонсолидации()

&НаСервере
Функция ПолучитьСписокДляВыбораОбъектаКонсолидации(ТипОбъектаКонсолидации)
	
	Если Не ЗначениеЗаполнено(ТипОбъектаКонсолидации) Тогда
		
		Возврат Новый СписокЗначений;
		
	Иначе
		
		СписокЗначений = Новый СписокЗначений;
		
		Если ТипОбъектаКонсолидации="Справочник" Тогда
			
			Для Каждого Справочник из Метаданные.Справочники Цикл
				
				Если Справочник.Имя="Субконто" Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				СписокЗначений.Добавить(Справочник.Имя, ОбщегоНазначенияУХ.ПолучитьСинонимПоля(Справочник.Имя));
				
			КонецЦикла;
			
		Иначе
					
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	ВидыСубконто.Ссылка,
			|	ВидыСубконто.Наименование КАК Наименование,
			|	ВидыСубконто.ТипЗначения КАК ТипЗначенияАналитики
			|ИЗ
			|	ПланВидовХарактеристик.ВидыСубконтоКорпоративные КАК ВидыСубконто
			|
			|УПОРЯДОЧИТЬ ПО
			|	Наименование";
			
			Результат=Запрос.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл
				
				Если Результат.ТипЗначенияАналитики.Типы()[0] = Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ") Тогда
					
					СписокЗначений.Добавить(Результат.Ссылка, Результат.Наименование);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат СписокЗначений;
		
	КонецЕсли;
	
КонецФункции // ПолучитьСписокДляВыбораОбъектаКонсолидации()

&НаСервере
Процедура ЗаполнитьПоляПоРеквизитам(ОбъектМетаданных,ТабРеквизитыДляПоиска)
	
	Для Каждого Реквизит ИЗ ОбъектМетаданных.Реквизиты Цикл
		
		Если СтрНайти(Реквизит.Имя,"НСИ_")>0 Тогда
			ЕстьРеквизитНСИ=Истина;
			Продолжить;
		КонецЕсли;
		
		ПустоеЗначениеТипа=ОбщегоНазначенияУХ.ПустоеЗначениеТипа(Реквизит.Тип.Типы()[0]);
		
		Если ПустоеЗначениеТипа=Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока=ТабРеквизитыДляПоиска.Добавить();
		НоваяСтрока.ИмяРеквизита=Реквизит.Имя;
		НоваяСтрока.Синоним=Реквизит.Синоним;
		НоваяСтрока.ТипЗначения=Реквизит.Тип;
		
		Если НоваяСтрока.ТипЗначения = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0) Тогда
			
			НоваяСтрока.НеограниченнаяДлина=Истина;
			
		КонецЕсли;
						
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоляПоРеквизитам() 

&НаСервере
Процедура ПриИзмененииОбъектаМетаданных()

	РеквизитыДляПоиска.Очистить();
	
	ТабРеквизитыДляПоиска=РеквизитФормыВЗначение("РеквизитыДляПоиска");
	
	Объект.ЭлементДляПоиска=Неопределено;
	
	Если НЕ ЗначениеЗаполнено(Объект.ИмяОбъектаМетаданных) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ТипОбъектаКонсолидации="Справочник" Тогда
		
		ОбъектМетаДанных = МетаДанные.Справочники[Объект.ИмяОбъектаМетаданных];
		
		Если ОбъектМетаДанных.ДлинаНаименования>0 Тогда
			НоваяСтрока=ТабРеквизитыДляПоиска.Добавить();
			НоваяСтрока.ИмяРеквизита="Наименование";
			НоваяСтрока.Синоним="Наименование";
			НоваяСтрока.ТипЗначения=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(ОбъектМетаДанных.ДлинаНаименования);
		КонецЕсли;
		
		Если ОбъектМетаДанных.ДлинаКода>0 Тогда
			
			НоваяСтрока=ТабРеквизитыДляПоиска.Добавить();
			НоваяСтрока.ИмяРеквизита="Код";
			НоваяСтрока.Синоним="Код";
			
			Если ОбъектМетаДанных.ТипКода=Метаданные.СвойстваОбъектов.ТипКодаСправочника.Число Тогда
				
				НоваяСтрока.ТипЗначения=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(ОбъектМетаДанных.ДлинаКода);
				
			Иначе
				
				НоваяСтрока.ТипЗначения=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(ОбъектМетаДанных.ДлинаКода);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьПоляПоРеквизитам(ОбъектМетаДанных,ТабРеквизитыДляПоиска);			
		ОтборПоВладельцу=(ОбъектМетаДанных.Владельцы.Количество()>0);			
				
	ИначеЕсли Объект.ТипОбъектаКонсолидации="ВидСубконто" Тогда
		
		ОбъектМетаДанных = ОбщегоНазначенияУХ.ПолучитьСправочникПоВидуСубконто(Объект.ИмяОбъектаМетаданных);
		
		Если ОбъектМетаДанных.ДлинаНаименования>0 Тогда
			НоваяСтрока=ТабРеквизитыДляПоиска.Добавить();
			НоваяСтрока.ИмяРеквизита="Наименование";
			НоваяСтрока.Синоним="Наименование";
			НоваяСтрока.ТипЗначения=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(ОбъектМетаДанных.ДлинаНаименования);
		КонецЕсли;
		
		Если ОбъектМетаДанных.ДлинаКода>0 Тогда
			
			НоваяСтрока=ТабРеквизитыДляПоиска.Добавить();
			НоваяСтрока.ИмяРеквизита="Код";
			НоваяСтрока.Синоним="Код";
			
			Если ОбъектМетаДанных.ТипКода=Метаданные.СвойстваОбъектов.ТипКодаСправочника.Число Тогда
				
				НоваяСтрока.ТипЗначения=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(ОбъектМетаДанных.ДлинаКода);
				
			Иначе
				
				НоваяСтрока.ТипЗначения=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(ОбъектМетаДанных.ДлинаКода);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьПоляПоРеквизитам(ОбъектМетаДанных,ТабРеквизитыДляПоиска);			
		ОтборПоВладельцу=(ОбъектМетаДанных.Владельцы.Количество()>0);
 		
	КонецЕсли;
		
	ТаблицаАналитики="Справочник."+ОбъектМетаДанных.Имя;
	
	ЗначениеВРеквизитФормы(ТабРеквизитыДляПоиска,"РеквизитыДляПоиска");
	
	ОпределитьПроцентЗаполненности();
	ОпределитьРеквизитыТочногоПоиска();
	
	// Определим, есть ли объекты, требующие синхронизации.
	
	ЕстьОбъектыДляСинхронизации=Ложь;
	
	Если НЕ ОбщегоНазначенияУХ.ЕстьРеквизитОбъектаМД("НСИ_ВИБ",ОбъектМетаДанных) Тогда
		
		Элементы.ГруппаПоискПоСинхронизируемым.Видимость=Ложь;
		
	Иначе
		
		Запрос=Новый Запрос;
		
		Если Объект.ТипОбъектаКонсолидации="ВидСубконто" Тогда
			
			Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
			|	СправочникНСИ.Ссылка
			|ИЗ
			|	Справочник.ПроизвольныйКлассификаторУХ КАК СправочникНСИ
			|ГДЕ
			|	СправочникНСИ.НСИ_ВИБ.НСИ_ТребуетСинхронизации
			| И СправочникНСИ.Владелец=&Владелец";
			
			Запрос.УстановитьПараметр("Владелец",Объект.ИмяОбъектаМетаданных);
			
		Иначе
			
			Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
			|	СправочникНСИ.Ссылка
			|ИЗ
			|	Справочник."+Объект.ИмяОбъектаМетаданных+" КАК СправочникНСИ
			|ГДЕ
			|	СправочникНСИ.НСИ_ВИБ.НСИ_ТребуетСинхронизации";
			
		КонецЕсли;
		
		Результат=Запрос.Выполнить().Выбрать();
		Элементы.ГруппаПоискПоСинхронизируемым.Видимость=Результат.Следующий();
		
	КонецЕсли;
			
КонецПроцедуры // ПриИзмененииПотребителяРасчета()

Процедура ОпределитьРеквизитыТочногоПоиска()
	
	Запрос=Новый Запрос();
	Запрос.Текст="ВЫБРАТЬ
	|	СоответствиеВнешнимИБСоответствиеРеквизитов.РеквизитОбъектаКонсолидации КАК ИмяРеквизита,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеВнешнимИБСоответствиеРеквизитов.Ссылка.Владелец) КАК КоличествоИспользования,
	|	КоличествоНастроек.ТипБД КАК ВсегоТиповВИБ
	|ИЗ
	|	Справочник.СоответствиеВнешнимИБ.СоответствиеРеквизитов КАК СоответствиеВнешнимИБСоответствиеРеквизитов,
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеВнешнимИБ.Владелец) КАК ТипБД
	|	ИЗ
	|		Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	|	ГДЕ
	|		СоответствиеВнешнимИБ.ИмяОбъектаМетаданных = &ИмяОбъектаМетаданных
	|		И СоответствиеВнешнимИБ.ТипОбъектаКонсолидации = &ТипОбъектаКонсолидации
	|		И НЕ СоответствиеВнешнимИБ.СинхронизацияПоGUID) КАК КоличествоНастроек
	|ГДЕ
	|	НЕ СоответствиеВнешнимИБСоответствиеРеквизитов.НеИспользоватьДляСинхронизации
	|	И СоответствиеВнешнимИБСоответствиеРеквизитов.ПримитивныйТип
	|	И СоответствиеВнешнимИБСоответствиеРеквизитов.Ссылка.ИмяОбъектаМетаданных = &ИмяОбъектаМетаданных
	|	И СоответствиеВнешнимИБСоответствиеРеквизитов.Ссылка.ТипОбъектаКонсолидации = &ТипОбъектаКонсолидации
	|	И НЕ СоответствиеВнешнимИБСоответствиеРеквизитов.Ссылка.СинхронизацияПоGUID
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеВнешнимИБСоответствиеРеквизитов.РеквизитОбъектаКонсолидации,
	|	КоличествоНастроек.ТипБД";
	
	Запрос.УстановитьПараметр("ИмяОбъектаМетаданных",Объект.ИмяОбъектаМетаданных);
	Запрос.УстановитьПараметр("ТипОбъектаКонсолидации",Объект.ТипОбъектаКонсолидации);

	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Если Результат.КоличествоИспользования=Результат.ВсегоТиповВИБ Тогда
			
			МассивСтрок=РеквизитыДляПоискаФорма.НайтиСтроки(Новый Структура("ИмяРеквизита",Результат.ИмяРеквизита));
			
			Если МассивСтрок.Количество()>0 И МассивСтрок[0].ПроцентЗаполненности>50 Тогда 
				
				МассивСтрок[0].Отображать=Истина;
				МассивСтрок[0].СпособПоиска="Значение";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОпределитьРеквизитыТочногоПоиска()

&НаСервере
Процедура ОпределитьПроцентЗаполненности()
	
	ТабРеквизитыДляПоиска=РеквизитФормыВЗначение("РеквизитыДляПоиска");
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ";
	
	Для Каждого СтрРеквизит ИЗ ТабРеквизитыДляПоиска Цикл
		
		Если СтрРеквизит.НеограниченнаяДлина Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|СУММА (ВЫБОР КОГДА ВЫРАЗИТЬ (ТаблицаАналитики."+СтрРеквизит.ИмяРеквизита+" КАК Строка(200))="""" Тогда 0 Иначе 1 Конец) КАК "+СтрРеквизит.ИмяРеквизита+",";
			
		Иначе
			
			Запрос.Текст=Запрос.Текст+"
			|СУММА (ВЫБОР КОГДА ТаблицаАналитики."+СтрРеквизит.ИмяРеквизита+" = &Пустой"+СтрРеквизит.ИмяРеквизита+" ТОГДА 0 ИНАЧЕ 1 КОНЕЦ) КАК "+СтрРеквизит.ИмяРеквизита+",";
			
			Если СтрРеквизит.ТипЗначения.Типы().Количество()>1 Тогда
				
				Запрос.УстановитьПараметр("Пустой"+СтрРеквизит.ИмяРеквизита,Неопределено);
				
			Иначе
				
				Запрос.УстановитьПараметр("Пустой"+СтрРеквизит.ИмяРеквизита,ОбщегоНазначенияУХ.ПустоеЗначениеТипа(СтрРеквизит.ТипЗначения.Типы()[0]));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|КОЛИЧЕСТВО (РАЗЛИЧНЫЕ ТаблицаАналитики.Ссылка) КАК Ссылка
	|ИЗ "+ТаблицаАналитики+" КАК ТаблицаАналитики";
	
	Если ЕстьРеквизитНСИ Тогда
		
		Если Объект.СпособОбработки=1 ИЛИ Объект.СпособОбработки=4 Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|ГДЕ (НЕ ТаблицаАналитики.НСИ_ТребуетСинхронизации)";
			
		Иначе
			
			Запрос.Текст=Запрос.Текст+"
			|ГДЕ ТаблицаАналитики.НСИ_ТребуетСинхронизации";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаАналитики="Справочник.ПроизвольныйКлассификаторУХ" Тогда
		
		Запрос.Текст=Запрос.Текст+" И ТаблицаАналитики.Владелец=&Владелец";
		Запрос.УстановитьПараметр("Владелец",Объект.ИмяОбъектаМетаданных);
		
	КонецЕсли;
	
	Результат=Запрос.Выполнить().Выбрать();
	МассивНезаполненных=Новый Массив;
	РеквизитыДляПоискаНов=ТабРеквизитыДляПоиска.СкопироватьКолонки();
	
	Если Результат.Следующий() И Результат.Ссылка>0 Тогда
		
		Для Каждого СтрРеквизит ИЗ ТабРеквизитыДляПоиска Цикл
			
			КоличествоЗаполненных=Результат[СтрРеквизит.ИмяРеквизита];
			Если КоличествоЗаполненных<2 Тогда
				
				Продолжить;
				
			Иначе
				
				НоваяСтрока=РеквизитыДляПоискаНов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрРеквизит);
				
				СтрПоиск=РеквизитыДляПоискаФорма.НайтиСтроки(Новый Структура("ИмяРеквизита",СтрРеквизит.ИмяРеквизита));
				
				Если СтрПоиск.Количество()>0 Тогда
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрПоиск[0]);
					
				КонецЕсли;
						
				НоваяСтрока.ПроцентЗаполненности=КоличествоЗаполненных*100/Результат.Ссылка;
					
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЕсли;
			
	РеквизитыДляПоискаНов.Сортировать("ПроцентЗаполненности Убыв");	
	ЗначениеВРеквизитФормы(РеквизитыДляПоискаНов,"РеквизитыДляПоискаФорма");	
	
КонецПроцедуры // ОпределитьПроцентЗаполненности() 


&НаСервере
Процедура ВыполнитьПоискДублирующихсяЭлементов()
	
	ОбработкаОбъект=РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ТаблицаРеквизитовДляПоиска=РеквизитФормыВЗначение("РеквизитыДляПоискаФорма");
	ОбработкаОбъект.ТаблицаАналитики=ТаблицаАналитики;
	ОбработкаОбъект.ЕстьРеквизитыНСИ=ЕстьРеквизитНСИ;
	ОбработкаОбъект.ВариантПоиска=ВариантПоиска;
	ОбработкаОбъект.УчитыватьНезаполненные=УчитыватьНезаполненные;
	ОбработкаОбъект.ВыполнитьПоискДублей();
	
	////////////////////////////////////////////////////////////////////////////////////
	// Отобразим результаты поиска в форме
	
	РеквизитыКДобавлению=Новый Массив;
	РеквизитыКУдалению=Новый Массив;
	
	Если СписокКолонокРеквизитов.Количество()>0 Тогда
		
		Для Каждого Колонка ИЗ СписокКолонокРеквизитов Цикл	
			
			Если НЕ (Колонка.Значение="НСИ_ЭталонныйЭлемент" ИЛИ Колонка.Значение="НСИ_ВИБ") Тогда
				РеквизитыКУдалению.Добавить("ТаблицаИсходныхОбъектов."+Колонка.Значение);
				ЭтаФорма.Элементы.Удалить(ЭтаФорма.Элементы["ТаблицаИсходныхОбъектов"+Колонка.Значение]);
			КонецЕсли;
			
			РеквизитыКУдалению.Добавить("ТаблицаДублирующихОбъектов."+Колонка.Значение);
			РеквизитыКУдалению.Добавить("ТаблицаДублирующихОбъектовФорма."+Колонка.Значение);
			
			ЭтаФорма.Элементы.Удалить(ЭтаФорма.Элементы["ТаблицаДублирующихОбъектовФорма"+Колонка.Значение]);
			
		КонецЦикла;
		
		СписокКолонокРеквизитов.Очистить();
				
	КонецЕсли;
	
	Если НЕ (Объект.СпособОбработки=1 ИЛИ Объект.СпособОбработки=4) Тогда
		
		РеквизитыКДобавлению.Добавить(Новый РеквизитФормы("НСИ_ЭталонныйЭлемент",
		ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка(СтрЗаменить(ТаблицаАналитики,"Справочник.","СправочникСсылка.")),
		"ТаблицаДублирующихОбъектов",
		"Эталонный элемент",
		Ложь));
				
		РеквизитыКДобавлению.Добавить(Новый РеквизитФормы("НСИ_ЭталонныйЭлемент",
		ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка(СтрЗаменить(ТаблицаАналитики,"Справочник.","СправочникСсылка.")),
		"ТаблицаДублирующихОбъектовФорма",
		"Эталонный элемент",
		Ложь));
		
		РеквизитыКДобавлению.Добавить(Новый РеквизитФормы("НСИ_ВИБ",
		ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ВнешниеИнформационныеБазы"),
		"ТаблицаДублирующихОбъектов",
		"Внешняя ИБ",
		Ложь));
		
		РеквизитыКДобавлению.Добавить(Новый РеквизитФормы("НСИ_ВИБ",
		ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ВнешниеИнформационныеБазы"),
		"ТаблицаДублирующихОбъектовФорма",
		"Внешняя ИБ",
		Ложь));

		
		СписокКолонокРеквизитов.Добавить("НСИ_ЭталонныйЭлемент");
		СписокКолонокРеквизитов.Добавить("НСИ_ВИБ");
		
	КонецЕсли;
			
	Для Каждого Колонка ИЗ ОбработкаОбъект.ТаблицаИсходныхЭлементов.Колонки Цикл
		
		Если Колонка.Имя="Ссылка" ИЛИ Колонка.Имя="КоличествоДублей" Тогда
			Продолжить;
		КонецЕсли;
		
		Если СписокКолонокРеквизитов.НайтиПоЗначению(Колонка.Имя)=Неопределено Тогда
			
			СписокКолонокРеквизитов.Добавить(Колонка.Имя);
			
			РеквизитыКДобавлению.Добавить(Новый РеквизитФормы(Колонка.Имя,
			Колонка.ТипЗначения,
			"ТаблицаИсходныхОбъектов",
			Колонка.Заголовок,
			Ложь));
			
			РеквизитыКДобавлению.Добавить(Новый РеквизитФормы(Колонка.Имя,
			Колонка.ТипЗначения,
			"ТаблицаДублирующихОбъектов",
			Колонка.Заголовок,
			Ложь));
			
			РеквизитыКДобавлению.Добавить(Новый РеквизитФормы(Колонка.Имя,
			Колонка.ТипЗначения,
			"ТаблицаДублирующихОбъектовФорма",
			Колонка.Заголовок,
			Ложь));
					
		КонецЕсли;
		
	КонецЦикла;
		
	ИзменитьРеквизиты(РеквизитыКДобавлению,РеквизитыКУдалению);
	
	Если НЕ (Объект.СпособОбработки=1 ИЛИ Объект.СпособОбработки=4) Тогда
		
		ЭтаФорма.Элементы.Добавить("ТаблицаДублирующихОбъектовФормаНСИ_ЭталонныйЭлемент",Тип("ПолеФормы"),ЭтаФорма.Элементы.ТаблицаДублирующихОбъектовФорма);	
		ЭтаФорма.Элементы["ТаблицаДублирующихОбъектовФормаНСИ_ЭталонныйЭлемент"].ПутьКДанным="ТаблицаДублирующихОбъектовФорма.НСИ_ЭталонныйЭлемент";
		ЭтаФорма.Элементы["ТаблицаДублирующихОбъектовФормаНСИ_ЭталонныйЭлемент"].Вид=ВидПоляФормы.ПолеВвода;
		ЭтаФорма.Элементы["ТаблицаДублирующихОбъектовФормаНСИ_ЭталонныйЭлемент"].ТолькоПросмотр=Истина;
		ЭтаФорма.Элементы["ТаблицаДублирующихОбъектовФормаНСИ_ЭталонныйЭлемент"].ДоступныеТипы=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка(СтрЗаменить(ТаблицаАналитики,"Справочник.","СправочникСсылка."));
		
		ЭтаФорма.Элементы.Добавить("ТаблицаДублирующихОбъектовФормаНСИ_ВИБ",Тип("ПолеФормы"),ЭтаФорма.Элементы.ТаблицаДублирующихОбъектовФорма);	
		ЭтаФорма.Элементы["ТаблицаДублирующихОбъектовФормаНСИ_ВИБ"].ПутьКДанным="ТаблицаДублирующихОбъектовФорма.НСИ_ВИБ";
		ЭтаФорма.Элементы["ТаблицаДублирующихОбъектовФормаНСИ_ВИБ"].Вид=ВидПоляФормы.ПолеВвода;
		ЭтаФорма.Элементы["ТаблицаДублирующихОбъектовФормаНСИ_ВИБ"].ТолькоПросмотр=Истина;
		ЭтаФорма.Элементы["ТаблицаДублирующихОбъектовФормаНСИ_ВИБ"].ДоступныеТипы=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ВнешниеИнформационныеБазы");
		
	КонецЕсли;
		
	Для Каждого Колонка ИЗ ОбработкаОбъект.ТаблицаИсходныхЭлементов.Колонки Цикл
		
		Если Колонка.Имя="Ссылка" ИЛИ Колонка.Имя="КоличествоДублей" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтаФорма.Элементы.Найти("ТаблицаИсходныхОбъектов"+Колонка.Имя)=Неопределено Тогда
			
			ЭтаФорма.Элементы.Добавить("ТаблицаИсходныхОбъектов"+Колонка.Имя,Тип("ПолеФормы"),ЭтаФорма.Элементы.ТаблицаИсходныхОбъектов);	
			ЭтаФорма.Элементы["ТаблицаИсходныхОбъектов"+Колонка.Имя].ПутьКДанным="ТаблицаИсходныхОбъектов."+Колонка.Имя;
			ЭтаФорма.Элементы["ТаблицаИсходныхОбъектов"+Колонка.Имя].Вид=ВидПоляФормы.ПолеВвода;
			ЭтаФорма.Элементы["ТаблицаИсходныхОбъектов"+Колонка.Имя].ДоступныеТипы=Колонка.ТипЗначения;
			
		КонецЕсли;
		
		Если ЭтаФорма.Элементы.Найти("ТаблицаДублирующихОбъектовФорма"+Колонка.Имя)=Неопределено Тогда
			
			ЭтаФорма.Элементы.Добавить("ТаблицаДублирующихОбъектовФорма"+Колонка.Имя,Тип("ПолеФормы"),ЭтаФорма.Элементы.ТаблицаДублирующихОбъектовФорма);	
			ЭтаФорма.Элементы["ТаблицаДублирующихОбъектовФорма"+Колонка.Имя].ПутьКДанным="ТаблицаДублирующихОбъектовФорма."+Колонка.Имя;
			ЭтаФорма.Элементы["ТаблицаДублирующихОбъектовФорма"+Колонка.Имя].Вид=ВидПоляФормы.ПолеВвода;
			ЭтаФорма.Элементы["ТаблицаДублирующихОбъектовФорма"+Колонка.Имя].ТолькоПросмотр=Истина;
			ЭтаФорма.Элементы["ТаблицаДублирующихОбъектовФорма"+Колонка.Имя].ДоступныеТипы=Колонка.ТипЗначения;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект.ТаблицаИсходныхЭлементов,"ТаблицаИсходныхОбъектов");
	ЗначениеВРеквизитФормы(ОбработкаОбъект.ТаблицаДублирующихЭлементов,"ТаблицаДублирующихОбъектов");
	
	Если ТаблицаДублирующихОбъектов.Количество()>0 Тогда 
		
		Элементы.ОсновнаяПанель.ТекущаяСтраница=Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.РезультатыПоиска;
		
	Иначе
		
		Сообщить("Дублирующиеся элементы не найдены.");
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьПоискДублирующихсяЭлементов()

&НаСервере
Функция ПолучитьЗначениеРеквизита(ИмяРеквизита)
	
	Если Не (ЗначениеЗаполнено(Объект.ЭлементДляПоиска) И Объект.СпособОбработки<4) Тогда
		
		Возврат Неопределено
		
	Иначе	
		
		Возврат Объект.ЭлементДляПоиска[ИмяРеквизита];
		
	КонецЕсли;
	
КонецФункции // ПолучитьЗначениеРеквизита() 

&НаСервере
Процедура ПриИзмененииЭлементаДляПоиска()
	
	Для Каждого СтрокаРеквизит ИЗ РеквизитыДляПоиска Цикл
		
		Если СтрокаРеквизит.СпособПоиска="Значение" ИЛИ СтрокаРеквизит.СпособПоиска="Вхождение" Тогда
			
			СтрокаРеквизит.УточнениеСпособаПоиска=ПолучитьЗначениеРеквизита(СтрокаРеквизит.ИмяРеквизита);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПриИзмененииРеквизитаДляПоиска()

&НаСервере
Функция ВернутьМассивРеквизитовДляПоиска()
	
	Возврат ПроцедурыПреобразованияДанныхУХ.ПолучитьМассивСтруктурИЗТаблицы(РеквизитФормыВЗначение("РеквизитыДляПоиска"));
	
КонецФункции // ВернутьМассивРеквизитовДляПоиска() 

/////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ТипОбъектаКонсолидацииПриИзменении(Элемент)
	
	ПриИзмененииТипаОбъектаКонсолидации();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяОбъектаМетаданныхПриИзменении(Элемент)
	
	ЕстьРеквизитНСИ=Ложь;
	ПриИзмененииОбъектаМетаданных();
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыДляПоискаУточнениеСпособаПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СпособПоиска=Элементы.РеквизитыДляПоиска.ТекущиеДанные.СпособПоиска;
	
	Если Не ЗначениеЗаполнено(СпособПоиска) Тогда
		
		СтандартнаяОбработка=Ложь;
		Возврат;
		
	ИначеЕсли СпособПоиска="ПолнотекстовыйПоиск" Тогда
		
		СтандартнаяОбработка=Ложь;
		ТекущиеДанныеРеквизиты=РеквизитыДляПоискаФорма.НайтиПоИдентификатору(Элементы.РеквизитыДляПоиска.ТекущаяСтрока);
		
		СтруктураПараметров=Новый Структура;
		СтруктураПараметров.Вставить("НастройкиПоиска",ТекущиеДанныеРеквизиты.СписокНастройки);
		
		ТекНастройкаПоиска = Неопределено;

		ОткрытьФорму("Обработка.ПоискИСлияниеДублирующихсяЭлементов.Форма.ФормаНастройкиПолнотекстовогоПоиска",СтруктураПараметров,,,,, Новый ОписаниеОповещения("РеквизитыДляПоискаУточнениеСпособаПоискаНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыДляПоискаУточнениеСпособаПоискаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекНастройкаПоиска=Результат;
	
	ТекущиеДанныеРеквизиты=РеквизитыДляПоискаФорма.НайтиПоИдентификатору(Элементы.РеквизитыДляПоиска.ТекущаяСтрока);
    
    Если Не ТекНастройкаПоиска=Неопределено Тогда
        
        ТекущиеДанныеРеквизиты.СписокНастройки=ТекНастройкаПоиска;
		Элементы.РеквизитыДляПоиска.ТекущиеДанные.УточнениеСпособаПоиска=ПолучитьПредставлениеСпискаНастроек(ТекНастройкаПоиска);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОграничениеТипаПоиска()
	
	ЭлементУправления=Элементы.РеквизитыДляПоиска.ПодчиненныеЭлементы.РеквизитыДляПоискаУточнениеСпособаПоиска;
	СпособПоиска=Элементы.РеквизитыДляПоиска.ТекущиеДанные.СпособПоиска;
		
	Если СпособПоиска="Значение" Тогда
		
		ЭлементУправления.ОграничениеТипа=Элементы.РеквизитыДляПоиска.ТекущиеДанные.ТипЗначения;
		Элементы.РеквизитыДляПоиска.ТекущиеДанные.УточнениеСпособаПоиска=ЭлементУправления.ОграничениеТипа.ПривестиЗначение();
		
		Элементы.РеквизитыДляПоиска.ТекущиеДанные.УточнениеСпособаПоиска=ПолучитьЗначениеРеквизита(Элементы.РеквизитыДляПоиска.ТекущиеДанные.ИмяРеквизита);
		
	ИначеЕсли  СпособПоиска="Вхождение" Тогда
		
		ЭлементУправления.ОграничениеТипа=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100);
		Элементы.РеквизитыДляПоиска.ТекущиеДанные.УточнениеСпособаПоиска=ЭлементУправления.ОграничениеТипа.ПривестиЗначение();
		
		Элементы.РеквизитыДляПоиска.ТекущиеДанные.УточнениеСпособаПоиска=ПолучитьЗначениеРеквизита(Элементы.РеквизитыДляПоиска.ТекущиеДанные.ИмяРеквизита);
		
	ИначеЕсли  СпособПоиска="ПолнотекстовыйПоиск" Тогда
		
		ТекущиеДанныеРеквизиты=РеквизитыДляПоискаФорма.НайтиПоИдентификатору(Элементы.РеквизитыДляПоиска.ТекущаяСтрока);
		
		Если ТекущиеДанныеРеквизиты.СписокНастройки.Количество()=0 Тогда
			
			ТекущиеДанныеРеквизиты.СписокНастройки.Добавить("ТочноеСовпадение","Точное совпадение",Истина);
			ТекущиеДанныеРеквизиты.СписокНастройки.Добавить("ВсеСлова","Все слова",Истина);
			ТекущиеДанныеРеквизиты.СписокНастройки.Добавить("НечеткийПоиск","Нечеткий поиск (например,""систАма = систЕма"")",Истина);
			ТекущиеДанныеРеквизиты.СписокНастройки.Добавить("ПоискСинонимов","Поиск с учетом синонимов (например,""алый = красный"")",Ложь);
			ТекущиеДанныеРеквизиты.СписокНастройки.Добавить("ХотяБыОдно","Хотя бы одно слово",Ложь);
			
		КонецЕсли;
		
		ЭлементУправления.ОграничениеТипа=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(500);
		
		Элементы.РеквизитыДляПоиска.ТекущиеДанные.УточнениеСпособаПоиска=ПолучитьПредставлениеСпискаНастроек(ТекущиеДанныеРеквизиты.СписокНастройки);
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьОграничениеТипаПоиска()

&НаКлиенте
Функция ПолучитьПредставлениеСпискаНастроек(СписокНастройки)
	
	СтрокаСписок="";
	
	Для Каждого Элемент ИЗ СписокНастройки Цикл
		
		Если Элемент.Пометка Тогда
			
			СтрокаСписок=СтрокаСписок+"; "+Элемент.Представление;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Сред(СтрокаСписок,3);
	
КонецФункции  // ПолучитьПредставлениеСпискаНастроек()
	
	
	

&НаКлиенте
Процедура РеквизитыДляПоискаСпособПоискаПриИзменении(Элемент)
	
	УстановитьОграничениеТипаПоиска();
			
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыДляПоискаИмяРеквизитаПриИзменении(Элемент)
	
	УстановитьОграничениеТипаПоиска();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементДляПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если Объект.СпособОбработки>3 ИЛИ Не ЗначениеЗаполнено(ТаблицаАналитики) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураОтбора=Новый Структура;
	
	Если Объект.СпособОбработки=3 Тогда
		СтруктураОтбора.Вставить("НСИ_ТребуетСинхронизации",Истина);
	Иначе
		СтруктураОтбора.Вставить("НСИ_ТребуетСинхронизации",Ложь);
	КонецЕсли;
	
	Если ТаблицаАналитики="Справочник.ПроизвольныйКлассификаторУХ" Тогда
		
		СтруктураОтбора.Вставить("Владелец",Объект.ИмяОбъектаМетаданных);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЭлементДляПоиска) Тогда
		СтруктураПараметров.Вставить("НачальноеЗначениеВыбора",Объект.ЭлементДляПоиска);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Отбор",СтруктураОтбора);
			
	ОткрытьФорму(ТаблицаАналитики+".ФормаВыбора", СтруктураПараметров, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоиск(Команда)
	
	ЕстьСпособыОтбора=Ложь;
	
	Для Каждого Строка ИЗ РеквизитыДляПоискаФорма Цикл
		
		Если ЗначениеЗаполнено(Строка.СпособПоиска) Тогда
			
			ЕстьСпособыОтбора=Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьСпособыОтбора Тогда	
		
		ВыполнитьПоискДублирующихсяЭлементов();
		
	Иначе
		
		Сообщить("Не указаны способы поиска.",СтатусСообщения.Информация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементДляПоискаПриИзменении(Элемент)
	
	ПриИзмененииЭлементаДляПоиска();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИсходныхОбъектовПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ТаблицаИсходныхОбъектов.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ТаблицаДублирующихОбъектовФорма.Очистить();
	МассивСтрок=ТаблицаДублирующихОбъектов.НайтиСтроки(Новый Структура("ИсходныйЭлемент",Элементы.ТаблицаИсходныхОбъектов.ТекущиеДанные.Ссылка));
	
	Для Каждого Строка ИЗ МассивСтрок Цикл
		
		НоваяСтрока=ТаблицаДублирующихОбъектовФорма.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		НоваяСтрока.Обрабатывать=Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоОдномуПриИзменении(Элемент)
	
	ОпределитьПроцентЗаполненности();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоВсемПриИзменении(Элемент)
	
	ОпределитьПроцентЗаполненности();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияФлагаОбработки(ЗначениеФлага)
	
	Для Каждого СтрРеквизит ИЗ ТаблицаДублирующихОбъектовФорма Цикл
		
		СтрРеквизит.Обрабатывать=ЗначениеФлага;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьЗначенияФлагаОбработки() 

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	УстановитьЗначенияФлагаОбработки(Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьЗначенияФлагаОбработки(Ложь);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДляОбработки(Команда)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ТаблицаРеквизитов",ВернутьМассивРеквизитовДляПоиска());
	
	СписокДублей=Новый СписокЗначений;

	Для Каждого Строка ИЗ ТаблицаДублирующихОбъектовФорма Цикл
		
		Если Строка.Обрабатывать Тогда
			
			СписокДублей.Добавить(Строка.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПараметров.Вставить("СписокДублей",СписокДублей);
	СтруктураПараметров.Вставить("ИсходныйЭлемент",Элементы.ТаблицаИсходныхОбъектов.ТекущиеДанные.Ссылка);
	СтруктураПараметров.Вставить("ТаблицаАналитики",ТаблицаАналитики);
	СтруктураПараметров.Вставить("СпособОбработки",Объект.СпособОбработки);
	
	ДанныеОбработки = Неопределено;

	
	ОткрытьФорму("Обработка.ПоискИСлияниеДублирующихсяЭлементов.Форма.ФормаОбработкиДублирующихЭлементов",СтруктураПараметров,,,,, Новый ОписаниеОповещения("ОткрытьФормуДляОбработкиЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);		
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДляОбработкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ДанныеОбработки=Результат;
    
    Если ДанныеОбработки=Истина Тогда
        
        ВыполнитьПоискДублирующихсяЭлементов();
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыДляПоискаОтображатьПриИзменении(Элемент)
	
	Если Элементы.РеквизитыДляПоиска.ТекущиеДанные.Отображать И ПустаяСтрока(Элементы.РеквизитыДляПоиска.ТекущиеДанные.СпособПоиска) Тогда
		
		Элементы.РеквизитыДляПоиска.ТекущиеДанные.СпособПоиска="Значение";
		
	КонецЕсли;
		
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////
// КОДЫ СПОСОБОВ ОБРАБОТКИ
//
// 1: Поиск дубликатов образца внутреннего элемента среди всех внутренних элементов
// 2: Поиск дубликатов выбранного внутреннего элемента среди всех элементов, загруженных из ВИБ
// 3: Поиск дубликатов образца, загруженного из ВИБ, среди всех элементов, загруженных из ВИБ
// 4: Поиск дубликатов среди всех внутренних элементов
// 5: Поиск дубликатов всех внутренних элементов среди элементов, загруженных из ВИБ
// 6: Поиск дубликатов среди элементов, загруженных из ВИБ

