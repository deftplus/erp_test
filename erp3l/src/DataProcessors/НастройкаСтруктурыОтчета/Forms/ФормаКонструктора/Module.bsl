
&НаКлиенте
Перем НастройкиИзменены;

&НаКлиенте
Перем ДоступностьВставкиАналитики;

&НаКлиенте
Перем ДоступностьВставкиФормулы;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	
	ИспользоватьРасширенныйРасчет = РасширениеБизнесЛогикиУХ.ИспользоватьРасширенныйРасчет();
	
	Элементы.РежимРаботы.СписокВыбора.Добавить("СтруктураОтчета", НСтр("ru = 'Структура отчета'"),,БиблиотекаКартинок.Ресурс);
	Элементы.РежимРаботы.СписокВыбора.Добавить("АналитикиПоказателей", НСтр("ru = 'Аналитики показателей'"),,БиблиотекаКартинок.Измерение);
	Элементы.РежимРаботы.СписокВыбора.Добавить("Формулы", НСтр("ru = 'Формулы расчета показателей'"),,БиблиотекаКартинок.ФормулаДляКнопки);
	
	ВидОтчета = Параметры.ВидОтчета;
	ВосстановитьНастройкиФормы();
		
	Если НастройкиКолонокАдрес = "" тогда
		ТзНастройкиКолонок = Новый ТаблицаЗначений;
		ТзНастройкиКолонок.Колонки.Добавить("НомерКолонки");
		ТзНастройкиКолонок.Колонки.Добавить("КодКолонки");
		ТзНастройкиКолонок.Колонки.Добавить("ШиринаКолонки");
		ТзНастройкиКолонок.Колонки.Добавить("Режим");
		
		НастройкиКолонокАдрес = ПоместитьВоВременноеХранилище(ТзНастройкиКолонок, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	Если НастройкиСтрокАдрес = "" тогда
		ТзНастройкиСтрок = Новый ТаблицаЗначений;
		ТзНастройкиСтрок.Колонки.Добавить("КодСтроки");
		ТзНастройкиСтрок.Колонки.Добавить("ВысотаКолонки");
		ТзНастройкиСтрок.Колонки.Добавить("Режим");
		ТзНастройкиСтрок.Колонки.Добавить("ГруппаСвернута");
		
		НастройкиСтрокАдрес = ПоместитьВоВременноеХранилище(ТзНастройкиСтрок, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
		
	ЗаполнитьДеревоСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.ИсточникиДанныхДляРасчетов.Форма.ФормаВыбора" Тогда
		
		ОбработкаВыполнена = Истина;
		
		ВставитьТекстВФормулу(ПолучитьПредставлениеИсточниковДанных(ВыбранноеЗначение));
		
	ИначеЕсли ИсточникВыбора.ИмяФормы="Справочник.ПоказателиОтчетов.Форма.ФормаВыбора" Тогда	
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
			Для Каждого стрПоказатель Из  ВыбранноеЗначение.МассивПоказателей  Цикл
				ВставитьТекстВФормулу(" {"+ИсточникВыбора.КодВидаОтчета+"."+СтрЗаменить(стрПоказатель.Значение,"Показатели.","")+"} ");
			КонецЦикла;
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиОповещенийФормы

&НаКлиенте
Процедура ДобавлениеСтрокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если  Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	ДобавитьСтрокиВВидОтчета(Результат.НовыеСтроки,Результат.СоздаватьПоказатели); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеКолонокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если  Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	ДобавитьКолонкиВВидОтчета(Результат.НовыеСтроки,Результат.СоздаватьПоказатели);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборАналитикиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ИндексСтроки 	= ПолеТабличногоДокументаМакет.ТекущаяОбласть.Верх;
	ИндексКолонки 	= ПолеТабличногоДокументаМакет.ТекущаяОбласть.Лево;
	ТекущееЗначение = Результат; 
	
	СписокАналитикИтоговый = Новый СписокЗначений;
	
	Если ПреобразоватьСтрокуАналитик(ИндексСтроки,ИндексКолонки,Результат,СписокАналитикИтоговый) Тогда
		
		ЗаписатьГруппуРаскрытия(ИндексСтроки,СписокАналитикИтоговый);
		
	КонецЕсли;	
	
	ЗаполнитьДеревоСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРеквизитовСтрокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если  Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	НастройкиИзменены = Истина;
	РеквизитыСтрок.ЗагрузитьЗначения(Результат.ВыгрузитьЗначения());
	
	ЗаполнитьДеревоСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРеквизитовПоказателейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если  Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	НастройкиИзменены = Истина;
	РеквизитыПоказателей.ЗагрузитьЗначения(Результат.ВыгрузитьЗначения());
	
	ЗаполнитьДеревоСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСвойствЗавершение(Результат, ДополнительныеПараметры) Экспорт
			
	ЗаполнитьДеревоСтрок();
	
КонецПроцедуры


&НаКлиенте
Процедура ЗакрытьПанельФормулЗавершение()
	
	РежимРедактированияФормулы = Ложь;
	УстановитьВидимостьЭлементов();
	
	ТекущаяОбластьРедактирования = ПолеТабличногоДокументаМакет.Область(ОбластьПоказателя);
	
	МассивОбластей = Новый Массив();
	МассивОбластей.Добавить(ТекущаяОбластьРедактирования);
	
	Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть = ТекущаяОбластьРедактирования;
	Элементы.ПолеТабличногоДокументаМакет.УстановитьВыделенныеОбласти(МассивОбластей);
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ПолеТабличногоДокументаМакет;
		
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВидОтчетаПриИзменении(Элемент)
	
	ЗаполнитьДеревоСтрок();
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьТекущуюОбласть(тСтрока)
	
	Если ТипЗнч(тСтрока) = Тип("СправочникСсылка.СтрокиОтчетов") Тогда
		
		Для Инд = 1 По ПолеТабличногоДокументаМакет.ВысотаТаблицы Цикл	
			ТекущаяОбласть				= ПолеТабличногоДокументаМакет.Область(Инд,1,Инд,1);
			МассивОбластей = Новый Массив();
			МассивОбластей.Добавить(ТекущаяОбласть);
			Если ТипЗнч(ТекущаяОбласть.Расшифровка) = Тип("Структура") И ТекущаяОбласть.Расшифровка.Свойство("Строка") И ТекущаяОбласть.Расшифровка.Строка = тСтрока Тогда		
				Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть = ТекущаяОбласть;
				Элементы.ПолеТабличногоДокументаМакет.УстановитьВыделенныеОбласти(МассивОбластей);
				Возврат;
			КонецЕсли;							
		КонецЦикла;	
	Иначе	
		
		Для Инд = 1 По ПолеТабличногоДокументаМакет.ШиринаТаблицы Цикл	
			ТекущаяОбласть				= ПолеТабличногоДокументаМакет.Область(1,Инд,1,Инд);
			МассивОбластей = Новый Массив();
			МассивОбластей.Добавить(ТекущаяОбласть);
			
			
			Если ТипЗнч(ТекущаяОбласть.Расшифровка) = Тип("Структура") И ТекущаяОбласть.Расшифровка.Свойство("Колонка") И ТекущаяОбласть.Расшифровка.Колонка = тСтрока Тогда		
				Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть = ТекущаяОбласть;
				Элементы.ПолеТабличногоДокументаМакет.УстановитьВыделенныеОбласти(МассивОбластей);
				Возврат;
			КонецЕсли;	
			
		КонецЦикла;	
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетВыбор(Элемент, Область, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
			
	Если ТипЗнч(Область.Расшифровка) = Тип("Структура") Тогда
		
		Если Область.Расшифровка.Свойство("Строка") Тогда
			
			ПоказатьЗначение(,Область.Расшифровка.Строка);
			
		ИначеЕсли Область.Расшифровка.Свойство("Колонка") Тогда
			
			ПоказатьЗначение(,Область.Расшифровка.Колонка);
			
		ИначеЕсли Область.Расшифровка.Свойство("СтрокаГруппаРаскрытия") Тогда
			
			ПоказатьЗначение(,Область.Расшифровка.СтрокаГруппаРаскрытия);
			
		ИначеЕсли Область.Расшифровка.Свойство("Показатель") Тогда			
			
			Если РежимРаботы = "Формулы" Тогда
				
				Если РежимРедактированияФормулы Тогда
					
					Для Каждого Элемент Из ПолучитьСписокПоказателей() Цикл
						
						Если ПроизвольныйКод Тогда
							ВставитьТекстВФормулу("Показатели." + СокрЛП(Элемент));
						Иначе
							ВставитьТекстВФормулу("{" + СокрЛП(Элемент) + "}");
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе	
					ОбластьПоказателя = Область.Имя;
					РазвернутьПанельИтоговойФормулы(Область.Расшифровка);
				КонецЕсли;
				
			Иначе
				ПоказатьЗначение(,Область.Расшифровка.Показатель);
			КонецЕсли;
			
		ИначеЕсли Область.Расшифровка.Свойство("ГруппаРаскрытия") И Не Область.Расшифровка.Свойство("АналитикаВО") Тогда
			
			Если  Область.Расшифровка.Свойство("АналитикаБюджета") И Область.Расшифровка.АналитикаБюджета  Тогда	
				Возврат;	
			КонецЕсли;
				
			Если Область.Расшифровка.Свойство("АналитикаВалюта") Тогда
				Если Область.Расшифровка.АналитикаВалюта Тогда
					Область.Расшифровка.АналитикаВалюта = Ложь;
					Область.Расшифровка.АналитикаВалюта = ПРЕДОПРЕДЕЛЕННОЕЗНАЧЕНИЕ("ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка");
					Область.Текст 			= "";
					ВыборАналитикиЗавершение(Область.Расшифровка.АналитикаВалюта,Неопределено);
				Иначе
					Область.Расшифровка.АналитикаВалюта = Истина;
					Область.Расшифровка.АналитикаВалюта = ПРЕДОПРЕДЕЛЕННОЕЗНАЧЕНИЕ("ПланВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты");
					Область.Текст 			= "■";
					ВыборАналитикиЗавершение(Область.Расшифровка.АналитикаВалюта,Неопределено);
				КонецЕсли;		
			Иначе	
				
				Оповещение 		= Новый ОписаниеОповещения("ВыборАналитикиЗавершение", ЭтаФорма);
				ПараметрыФормы 	= Новый Структура("ЗакрыватьПриВыборе,МножественныйВыбор,ТекущаяСтрока", Истина,Ложь,Область.Расшифровка.ГруппаРаскрытия);	
				ОткрытьФорму("ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ФормаВыбора", ПараметрыФормы,,,,,Оповещение);
			КонецЕсли;
			
		КонецЕсли;	
		
	Иначе	
		
		тОбластьСтрока 	= ПолеТабличногоДокументаМакет.Область(Область.Верх,1,Область.Верх,1);
		тОбластьКолонка = ПолеТабличногоДокументаМакет.Область(1,Область.Лево,1,Область.Лево);
		
		Если ТипЗнч(тОбластьСтрока.Расшифровка) = Тип("Структура") И тОбластьСтрока.Расшифровка.Свойство("Строка") Тогда
			Если ТипЗнч(тОбластьКолонка.Расшифровка) = Тип("Структура")Тогда
				
				Если РежимРаботы = "АналитикиПоказателей" Тогда
					
					Если тОбластьКолонка.Расшифровка.КолонкаКод = "АналитикаВалюта" Тогда
							
					Иначе		
						Оповещение 		= Новый ОписаниеОповещения("ВыборАналитикиЗавершение", ЭтаФорма);
						ПараметрыФормы 	= Новый Структура("ЗакрыватьПриВыборе,МножественныйВыбор", Истина,Ложь);	
						ОткрытьФорму("ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ФормаВыбора", ПараметрыФормы,,,,,Оповещение);
					КонецЕсли;
					
				ИначеЕсли РежимРаботы = "Формулы" Тогда
					
					
				КонецЕсли;		 
				
			КонецЕсли;		
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботыПриИзменении(Элемент)
	
	НастройкиИзменены = Истина;
	РежимРедактированияФормулы = Ложь;
	ЗаполнитьДеревоСтрок();
	ДоступностьВставкиАналитики = Ложь;
	ДоступностьВставкиФормулы = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиРеквизитовСтрок(Команда)
	
	Оповещение = Новый ОписаниеОповещения("НастройкаРеквизитовСтрокЗавершение", ЭтаФорма);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РеквизитыСтрок",РеквизитыСтрок);
	
	ОткрытьФорму("Обработка.НастройкаСтруктурыОтчета.Форма.ФормаНастройкиРеквизитовСтрок",ПараметрыФормы 
	,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБланкиОтчетов(Команда)
	
	Параметрыформы = Новый Структура("Отбор", Новый Структура("Владелец",ВидОтчета));
	ОткрытьФорму("Справочник.БланкиОтчетов.ФормаСписка",Параметрыформы,,Истина);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоСтрок()
		
	УстановитьВидимостьЭлементов();
	
	Если ЗначениеЗаполнено(ВидОтчета) Тогда
		ВидОтчетаКод = СокрЛП(ВидОтчета.Код);
		СоответствиеНастроек = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(ВидОтчета);
		СоответствиеНастроек.Свойство("БланкДляОтображенияМногопериодный", БланкДляОтображенияМногопериодный);		
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ПравилоОбработки) Тогда
		СоответствиеНастроек = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(ВидОтчета);
		СоответствиеНастроек.Свойство("ПравилоОбработки", ПравилоОбработки);
	КонецЕсли;
	
	Если РежимРаботы = "СтруктураОтчета" ИЛИ РежимРаботы = "Формулы" Тогда
		
		Колонки 				= СформироватьТаблицуКолонокБланка(ВидОтчета);
		ЗначениеВРеквизитФормы(Колонки, "тКолонки");
		ДеревоНастройкиСервер 	= ВывестиДеревоСтруктурыСтрок(ВидОтчета, Колонки);
		
	ИначеЕсли РежимРаботы = "АналитикиПоказателей" Тогда
		
		ДеревоНастройкиСервер 	= ВывестиДеревоСтруктурыСтрок(ВидОтчета);
		
	КонецЕсли;
		
	ДеревоНастройкиСерверАдрес = ПоместитьВоВременноеХранилище(ДеревоНастройкиСервер,ЭтаФорма.УникальныйИдентификатор);
	
	Если РежимРаботы = "АналитикиПоказателей" тогда
		
		ОбластьДанныхВерх = 2;
		ОбластьДанныхНиз = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
		ОбластьДанныхЛево = 0;
		
		Для ИндКолонки = 2 по ПолеТабличногоДокументаМакет.ШиринаТаблицы Цикл
			
			ТекстОбласти = ПолеТабличногоДокументаМакет.Область(1, ИндКолонки, 1, ИндКолонки).Текст;
			
			Если СтрНайти(ТекстОбласти, "Аналитика 1") <> 0 ИЛИ СтрНайти(ТекстОбласти, "Аналитика 2") <> 0 
				ИЛИ СтрНайти(ТекстОбласти, "Аналитика 3") <> 0 ИЛИ СтрНайти(ТекстОбласти, "Аналитика 4") <> 0 
				ИЛИ СтрНайти(ТекстОбласти, "Аналитика 5") <> 0 ИЛИ СтрНайти(ТекстОбласти, "Аналитика 6") <> 0
				ИЛИ СтрНайти(ТекстОбласти, "Раскрытие по валютам") тогда
				
				Если ИндКолонки = 2 тогда
					ОбластьДанныхЛево = ИндКолонки;
				КонецЕсли;
				
				ОбластьДанныхПраво = ИндКолонки;
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли РежимРаботы = "Формулы" тогда
		
		ОбластьДанныхВерх = 2;
		ОбластьДанныхНиз = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
		ОбластьДанныхЛево = 2;
		ОбластьДанныхПраво = ПолеТабличногоДокументаМакет.ШиринаТаблицы;
		
	КонецЕсли;
		
КонецПроцедуры 

&НаСервере
Функция ВывестиДеревоСтруктурыСтрок(ВидОтчетаВход, ТаблицаКолонокВход = Неопределено) Экспорт
	
	РезультатФункции 		= Новый ДеревоЗначений;
	тРеквизитыСтрок 		= "";
	тРеквизитыПоказателей   = "";
	
	Для Каждого Реквизит Из РеквизитыСтрок Цикл		
		
		Если Реквизит.Значение = "Строка" Тогда
			Нкол = РезультатФункции.Колонки.Добавить(СтрЗаменить(Реквизит,".","_"));	
			тРеквизитыСтрок =тРеквизитыСтрок+" 
			|	МАКСИМУМ(СтрокиОтчетов.Ссылка) КАК "+Нкол.Имя+",";		
		ИначеЕсли Реквизит.Значение = "СчетБД" 
			ИЛИ Реквизит.Значение = "СтатьяДвиженияДенежныхСредств"  
			 ИЛИ Реквизит.Значение = "СтатьяДоходовИРасходов" 
			  ИЛИ Реквизит.Значение = "СтатьяДвиженияРесурсов" Тогда  
			  Нкол = РезультатФункции.Колонки.Добавить(СтрЗаменить(Реквизит,".","_"));
			  
		Иначе
			Нкол = РезультатФункции.Колонки.Добавить(СтрЗаменить(Реквизит,".","_"));	
			тРеквизитыСтрок =тРеквизитыСтрок+" 
			|	МАКСИМУМ(СтрокиОтчетов."+Реквизит.Значение+") КАК "+Нкол.Имя+",";		
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если РежимРаботы = "СтруктураОтчета" Тогда
		
		Для Каждого Реквизит Из РеквизитыПоказателей Цикл
			
			Если  Реквизит.Значение = "Строка"  ИЛИ Реквизит.Значение = "Колонка" ИЛИ Реквизит.Значение = "Ссылка" Тогда
			Иначе	
				Нкол = СтрЗаменить(Реквизит,".","_");
				тРеквизитыПоказателей =тРеквизитыПоказателей+" 
				|(ПоказателиОтчетов."+Реквизит.Значение+") КАК "+Нкол+",";	
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	
	РезультатФункции.Колонки.Добавить("ПорядковыйНомер",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10,0));
	РезультатФункции.Колонки.Добавить("СтрокаНаименование",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(150));
	РезультатФункции.Колонки.Добавить("СтрокаКод");
	РезультатФункции.Колонки.Добавить("СтрокаГруппаРаскрытия");
	РезультатФункции.Колонки.Добавить("АналитикаВалюта");
	РезультатФункции.Колонки.Добавить("СтрокаПометкаНаУдаление");
	
	Если РеквизитыСтрок.НайтиПоЗначению("СчетБД") = Неопределено Тогда
		РезультатФункции.Колонки.Добавить("СчетБД");
	КонецЕсли;
    Если РеквизитыСтрок.НайтиПоЗначению("СтатьяДвиженияДенежныхСредств") = Неопределено  Тогда
		РезультатФункции.Колонки.Добавить("СтатьяДвиженияДенежныхСредств");
	КонецЕсли;
    Если РеквизитыСтрок.НайтиПоЗначению("СтатьяДоходовИРасходов") = Неопределено Тогда
		РезультатФункции.Колонки.Добавить("СтатьяДоходовИРасходов");
	КонецЕсли;
    Если РеквизитыСтрок.НайтиПоЗначению("СтатьяДвиженияРесурсов") = Неопределено Тогда
		РезультатФункции.Колонки.Добавить("СтатьяДвиженияРесурсов");
	КонецЕсли;

	тГруппаРаскрытияВидыАналитики = "";
	тВидОтчетаВидыАналитики       = "";
	тПоказателиВидыАналитики      = "";
	
	Если РежимРаботы = "АналитикиПоказателей" Тогда		
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл	
			РезультатФункции.Колонки.Добавить("ГруппаРаскрытияВидАналитики"+Инд);
			РезультатФункции.Колонки.Добавить("ВидОтчетаВидАналитики"+Инд);		
			
			тГруппаРаскрытияВидыАналитики =тГруппаРаскрытияВидыАналитики+" 
			|	МАКСИМУМ(СтрокиОтчетов.ГруппаРаскрытия.ВидАналитики"+Инд+") КАК ГруппаРаскрытияВидАналитики"+Инд+",";
			тВидОтчетаВидыАналитики       = тВидОтчетаВидыАналитики+"
			|	МАКСИМУМ(СтрокиОтчетов.Владелец.ВидАналитики"+Инд+") КАК ВидОтчетаВидАналитики"+Инд+",";	
			тПоказателиВидыАналитики       = тПоказателиВидыАналитики+"
			|	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики"+Инд+" КАК ГруппаРаскрытияВидАналитики"+Инд+",";	
			
		КонецЦикла;	
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиОтчетов.Ссылка КАК Ссылка,
	|	СтрокиОтчетов.Код КАК СтркаКод,
	|	СтрокиОтчетов.ГруппаРаскрытия КАК ГруппаРаскрытия,
	|	СтрокиОтчетов.ПорядковыйНомер КАК ПорядковыйНомер
	|ПОМЕСТИТЬ втМакетСтрок
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &ВидОтчета
	|	И СтрокиОтчетов.ПометкаУдаления В (&ВыводитьУдаленные)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КолонкиОтчетов.Ссылка КАК Ссылка,
	|	КолонкиОтчетов.ПорядковыйНомер КАК ПорядковыйНомер
	|ПОМЕСТИТЬ втМакетКолонок
	|ИЗ
	|	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|ГДЕ
	|	КолонкиОтчетов.Владелец = &ВидОтчета
	|	И КолонкиОтчетов.ПометкаУдаления В (&ВыводитьУдаленные)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Ссылка,
	|	ПоказателиОтчетов.Колонка КАК Колонка,"+тРеквизитыПоказателей+"
	|	ПоказателиОтчетов.Строка КАК Строка
	|ПОМЕСТИТЬ втПоказатели
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &ВидОтчета
	|	И ПоказателиОтчетов.ПометкаУдаления = Ложь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втМакетКолонок.Ссылка КАК КолонкаСсылка,
	|	втМакетКолонок.ПорядковыйНомер КАК КолонкаПорядковыйНомер,
	|	втМакетСтрок.Ссылка КАК СтрокаСсылка,
	|	втМакетСтрок.СтркаКод КАК СтрокаКод,
	|	втМакетСтрок.ГруппаРаскрытия КАК ГруппаРаскрытия,
	|	втМакетСтрок.ПорядковыйНомер КАК СтрокаКолонкаПорядковыйНомер
	|ПОМЕСТИТЬ втМакет
	|ИЗ
	|	втМакетСтрок КАК втМакетСтрок
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМакетКолонок КАК втМакетКолонок
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втМакет.КолонкаСсылка КАК КолонкаСсылка,
	|	втМакет.КолонкаПорядковыйНомер КАК КолонкаПорядковыйНомер,
	|	втМакет.СтрокаСсылка КАК СтрокаСсылка,
	|	втМакет.СтрокаКод КАК СтрокаКод,
	|	втМакет.ГруппаРаскрытия КАК ГруппаРаскрытия,
	|	втМакет.СтрокаКолонкаПорядковыйНомер КАК СтрокаКолонкаПорядковыйНомер,
	|	втПоказатели.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втМакетСКолонками
	|ИЗ
	|	втМакет КАК втМакет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПоказатели КАК втПоказатели
	|		ПО втМакет.СтрокаСсылка = втПоказатели.Строка
	|			И втМакет.КолонкаСсылка = втПоказатели.Колонка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК НПП,
	|	СтрокиОтчетов.Ссылка КАК Ссылка,
	|	СтрокиОтчетов.Код КАК СтрокаКод,"+тРеквизитыСтрок+"
	|	СтрокиОтчетов.Наименование КАК СтрокаНаименование,
	|	СтрокиОтчетов.ГруппаРаскрытия КАК СтрокаГруппаРаскрытия,"+тГруппаРаскрытияВидыАналитики+тВидОтчетаВидыАналитики+"
	|	СтрокиОтчетов.ГруппаРаскрытия.ВидАналитикиВалютаДт КАК АналитикаВалюта,
	|	СтрокиОтчетов.ПорядковыйНомер КАК ПорядковыйНомер,
    |	МАКСИМУМ(СтрокиОтчетов.СчетБД) КАК СчетБД,
	|	МАКСИМУМ(СтрокиОтчетов.СтатьяДвиженияДенежныхСредств) КАК СтатьяДвиженияДенежныхСредств,
	|	МАКСИМУМ(СтрокиОтчетов.СтатьяДоходовИРасходов) КАК СтатьяДоходовИРасходов,
	|	МАКСИМУМ(СтрокиОтчетов.СтатьяДвиженияРесурсов) КАК СтатьяДвиженияРесурсов,
	|	МАКСИМУМ(СтрокиОтчетов.ПометкаУдаления) КАК СтрокаПометкаНаУдаление,
	|	СтрокиОтчетов.Родитель КАК Родитель
	|ИЗ
	|	втМакетСКолонками КАК втМакетСКолонками
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|		ПО втМакетСКолонками.СтрокаСсылка = СтрокиОтчетов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиОтчетов.Ссылка,
	|	СтрокиОтчетов.Код,
	|	СтрокиОтчетов.ГруппаРаскрытия,
	|	СтрокиОтчетов.ПорядковыйНомер,
	|	СтрокиОтчетов.Родитель,
	|	втМакетСКолонками.КолонкаПорядковыйНомер,
	|	СтрокиОтчетов.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтрокиОтчетов.ПорядковыйНомер ИЕРАРХИЯ,
	|	втМакетСКолонками.КолонкаПорядковыйНомер";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	Если РежимРаботы = "СтруктураОтчета" ИЛИ  РежимРаботы = "Формулы" Тогда
		
		ИндексКолонки = 1;
		Для Каждого СтрКолонка Из ТаблицаКолонокВход Цикл
			Нполе = СхемаЗапроса.ПакетЗапросов[4].Операторы[0].ВыбираемыеПоля.Добавить("ВЫБОР КОГДА ВтМакет.КолонкаСсылка = &Парам_"+СокрЛП(СтрКолонка.Код)+
			" ТОГДА """" КОНЕЦ ");
			Запрос.УстановитьПараметр("Парам_"+СокрЛП(СтрКолонка.Код),СтрКолонка.Ссылка);
			СхемаЗапроса.ПакетЗапросов[4].Колонки[СхемаЗапроса.ПакетЗапросов[4].Колонки.Количество()-1].Псевдоним = СокрЛП(СтрКолонка.Код);
			
			Нполе = СхемаЗапроса.ПакетЗапросов[5].Операторы[0].ВыбираемыеПоля.Добавить("МАКСИМУМ("+СокрЛП(СтрКолонка.Код)+") ");
			СхемаЗапроса.ПакетЗапросов[5].Колонки[СхемаЗапроса.ПакетЗапросов[5].Колонки.Количество()-1].Псевдоним = "Колонка"+ИндексКолонки;//СокрЛП(СтрКолонка.Код);
			
			РезультатФункции.Колонки.Добавить("Колонка"+ИндексКолонки,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));	
			
			СтрКолонка.тИмя = СокрЛП("Колонка"+ИндексКолонки);
			
			ИндексКолонки = ИндексКолонки+1;
			
		КонецЦикла;	
		
	КонецЕсли;
	
	Запрос.Текст =  СхемаЗапроса.ПолучитьТекстЗапроса();	
	Запрос.УстановитьПараметр("ВидОтчета", ВидОтчетаВход);
	
	ВыводитьУдаленныеСписок = Новый СписокЗначений;
	ВыводитьУдаленныеСписок.Добавить(Ложь);
	Если ВыводитьУдаленные Тогда
		ВыводитьУдаленныеСписок.Добавить(Истина);
	КонецЕсли;	

	Запрос.УстановитьПараметр("ВыводитьУдаленные", ВыводитьУдаленныеСписок);
	
	РезультатПакет 			= Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	РезультатПоказатели     = РезультатПакет[2].Выгрузить();
	РезультатПоказатели.Индексы.Добавить("Строка,Колонка");
	
	Если РежимРаботы = "Формулы" Тогда 
		
		РезультатФормулы        = Неопределено;
		Справочники.ВидыОтчетов.ЗаполнитьКэшПоказателей(РезультатФормулы,, ПравилоОбработки, ВидОтчета);
		
	ИначеЕсли РежимРаботы = "АналитикиПоказателей" Тогда
		
		ЗапросАналитикиПОказателей = Новый Запрос;
		ЗапросАналитикиПОказателей.Текст = " ВЫБРАТЬ
		|	ПоказателиОтчетов.Ссылка КАК Ссылка,
		|	ПоказателиОтчетов.ГруппаРаскрытия КАК ГруппаРаскрытия,"+тПоказателиВидыАналитики+"
		|	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитикиВалютаДт КАК АналитикаВалюта,
		|	ПоказателиОтчетов.Строка КАК Строка,
		|	ПоказателиОтчетов.Колонка КАК Колонка
		|ИЗ
		|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|ГДЕ
		|	ПоказателиОтчетов.Владелец = &ВидОтчета
		|   И ПоказателиОтчетов.ПометкаУдаления = Ложь";
		
		
		ЗапросАналитикиПОказателей.УстановитьПараметр("ВидОтчета",ВидОтчета);
		тАналитикиПоказателей 		= ЗапросАналитикиПОказателей.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Результат=РезультатПакет[5].Выбрать();
	
	ПолеТабличногоДокументаМакет.Очистить();
	СтруктураШаблонов = ПодготовитьМакетШаблоновВывода();
	
	ПолеТабличногоДокументаМакет.Вывести(СтруктураШаблонов.ПолеТабличногоДокументаМакетШаблонЗаголовка.ПолучитьОбласть("ШаблонВыводаЗаголовка"));
	
	ВыводимаяСтрокаОтчета=Справочники.СтрокиОтчетов.ПустаяСсылка();
	
	СоответствиеСтрок=Новый Соответствие;
	СоответствиеРодителей=Новый Соответствие;
	
	ДеревоНастройкиСервер_Строки = РезультатФункции.Строки.Добавить();
	ДеревоНастройкиСервер_Строки.Строка 			= НСтр("ru = 'Выбранные строки'");
	ДеревоНастройкиСервер_Строки.СтрокаНаименование = НСтр("ru = 'Строки/Колонки'");	
	
	
	//Предварительный вывод в дерево значений
	Пока Результат.Следующий() Цикл
		
		Если Результат.Строка<>ВыводимаяСтрокаОтчета Тогда     //Поменялась строка
			
			ТекущаяСтрокаДерева=СоответствиеСтрок[Результат.Строка];
			
			Если ТекущаяСтрокаДерева=Неопределено Тогда   //Не было такой строки
				
				Если Результат.Родитель=Справочники.СтрокиОтчетов.ПустаяСсылка() Тогда   //Строка первого уровня
					
					ТекущаяСтрокаДерева=ДеревоНастройкиСервер_Строки.Строки.Добавить();
					
				Иначе
					
					СтрокаРодитель=СоответствиеРодителей[Результат.Родитель];   //ищем был ли уже такой родитель выведен
					
					Если СтрокаРодитель=Неопределено Тогда
						
						СтрокаРодитель=РезультатФункции.Строки.Найти(Результат.Родитель, "Строка", Истина);
						
						Если СтрокаРодитель=Неопределено Тогда
							Продолжить;
						КонецЕсли;
												
						СоответствиеРодителей.Вставить(Результат.Родитель,СтрокаРодитель);
						
						ПолеТабличногоДокументаМакет.НачатьГруппуСтрок();
						
					КонецЕсли;
					
					ТекущаяСтрокаДерева=СтрокаРодитель.Строки.Добавить();
					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ТекущаяСтрокаДерева,Результат); //Выводим строку и значения колонок показателей по ней
				
				СоответствиеСтрок.Вставить(Результат.Строка,ТекущаяСтрокаДерева);	
			КонецЕсли;
			
			ВыводимаяСтрокаОтчета=Результат.Строка;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если ДеревоНастройкиСервер_Строки.Строки.Количество()>0 Тогда
		Если РежимРаботы = "СтруктураОтчета" Тогда
			ПодготовитьТаблицыПоДеревуРекурсивноПоказатели(ДеревоНастройкиСервер_Строки,СтруктураШаблонов,ТаблицаКолонокВход,РезультатПоказатели);		
		ИначеЕсли  РежимРаботы = "АналитикиПоказателей" Тогда
			ПодготовитьТаблицыПоДеревуРекурсивноАналитики(ДеревоНастройкиСервер_Строки,СтруктураШаблонов,тАналитикиПоказателей,РезультатПоказатели);
		ИначеЕсли  РежимРаботы = "Формулы" Тогда	
			ПодготовитьТаблицыПоДеревуРекурсивноФормулы(ДеревоНастройкиСервер_Строки,СтруктураШаблонов,ТаблицаКолонокВход,РезультатПоказатели,РезультатФормулы);		
		КонецЕсли;	
	КонецЕсли;
	
	ПолеТабличногоДокументаМакет.ФиксацияСлева = РеквизитыСтрок.Количество();
	ПолеТабличногоДокументаМакет.ФиксацияСверху = 1;
	
	Возврат РезультатФункции;
	
КонецФункции		

&НаСервере
Функция ПодготовитьМакетШаблоновВывода();
	
	
	ТзНастройкиКолонок = ПолучитьИзВременногоХранилища(НастройкиКолонокАдрес);
	
	СтруктураОтвета = Новый Структура;
	
	ПолеТабличногоДокументаМакетШаблонЗаголовка 	= Новый ТабличныйДокумент;
	
	Обработка 				= РеквизитФормыВЗначение("Объект");
	МакетШаблонаСтроки 		= Обработка.ПолучитьМакет("МакетШаблонОформленияСтроки"); 
	МакетШаблонаКолонки 	= Обработка.ПолучитьМакет("МакетШаблонОформленияКолонки");
	
	//Выводим шапку строк	
	ОбластьЗаголовокШапки = МакетШаблонаСтроки.ПолучитьОбласть("ОбластьШапкаТаблицы");
	
	//Выводим шапку реквизитов строк
	ОбластьЗаголовокКолонки = МакетШаблонаКолонки.ПолучитьОбласть("ОбластьКолонкаШапки");
	
	ИндексПервогоРеквизита = Истина;
	Для Каждого Реквизит Из РеквизитыСтрок Цикл		
		
		СтруктураРасшифровки = Новый Структура();
		СтруктураРасшифровки.Вставить("РеквизитСтроки",СтрЗаменить(Реквизит,".","_"));
		СтруктураРасшифровки.Вставить("КолонкаКод",СтрЗаменить(Реквизит,".","_"));
		
		Если НЕ ИндексПервогоРеквизита Тогда
			ПолеТабличногоДокументаМакетШаблонЗаголовка.Присоединить(ОбластьЗаголовокКолонки);
		Иначе
			ПолеТабличногоДокументаМакетШаблонЗаголовка.Вывести(ОбластьЗаголовокШапки);
			ИндексПервогоРеквизита = Ложь;
		КонецЕсли;
		
		ПолеТабличногоДокументаМакетШаблонЗаголовка.Область(1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы,1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы).Текст = Реквизит;
		ПолеТабличногоДокументаМакетШаблонЗаголовка.Область(1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы,1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы).Расшифровка = СтруктураРасшифровки;
		
		тСвойствоКолонки = ТзНастройкиКолонок.НайтиСтроки(Новый Структура("Режим,КодКолонки",РежимРаботы,СтрЗаменить(Реквизит,".","_")));
		Если тСвойствоКолонки.Количество() = 1 Тогда	
			ПолеТабличногоДокументаМакетШаблонЗаголовка.Область(1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы,1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы).ШиринаКолонки =  тСвойствоКолонки[0].ШиринаКолонки;		
		КонецЕсли;
		
	КонецЦикла;	
	
	
	Если РежимРаботы = "СтруктураОтчета" Тогда
		
		Если  РеквизитыПоказателей.Количество()> 0 Тогда
			СтруктураРасшифровки = Новый Структура();
			СтруктураРасшифровки.Вставить("РеквизитПоказателя",СтрЗаменить(Реквизит,".","_"));
			СтруктураРасшифровки.Вставить("КолонкаКод",СтрЗаменить(Реквизит,".","_"));
			ПолеТабличногоДокументаМакетШаблонЗаголовка.Присоединить(ОбластьЗаголовокКолонки);
			ПолеТабличногоДокументаМакетШаблонЗаголовка.Область(1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы,1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы).Текст = НСтр("ru = 'Реквизиты показателей'");
			ПолеТабличногоДокументаМакетШаблонЗаголовка.Область(1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы,1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы).Расшифровка = СтруктураРасшифровки;	
		КонецЕсли;	
		
		
	КонецЕсли;	
		
	//Выводим шапку колонок
	Если РежимРаботы = "СтруктураОтчета" ИЛИ  РежимРаботы = "Формулы" Тогда
				
		
		Для Каждого СтрКол Из тКолонки Цикл
			
			СтруктураРасшифровки = Новый Структура();
			СтруктураРасшифровки.Вставить("Колонка",СтрКол.Ссылка);
			СтруктураРасшифровки.Вставить("КолонкаКод",СокрЛП(СтрКол.Код));
			СтруктураРасшифровки.Вставить("КолонкаНаименование",СтрКол.Представление);
			
			ПолеТабличногоДокументаМакетШаблонЗаголовка.Присоединить(ОбластьЗаголовокКолонки);
			ПолеТабличногоДокументаМакетШаблонЗаголовка.Область(1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы,1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы).Текст = СтрКол.Представление;
			ПолеТабличногоДокументаМакетШаблонЗаголовка.Область(1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы,1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы).Расшифровка = СтруктураРасшифровки;
			
			тСвойствоКолонки = ТзНастройкиКолонок.НайтиСтроки(Новый Структура("Режим,КодКолонки",РежимРаботы,СокрЛП(СтрКол.Код)));
			Если тСвойствоКолонки.Количество() = 1 Тогда	
				ПолеТабличногоДокументаМакетШаблонЗаголовка.Область(1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы,1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы).ШиринаКолонки =  тСвойствоКолонки[0].ШиринаКолонки;		
			КонецЕсли;	
			
			Если  СтрКол.КолонкаПометкаНаУдаление Тогда
				тЯчейка 			= ПолеТабличногоДокументаМакетШаблонЗаголовка.Область(1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы,1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы);
				тЯчейка.Шрифт 		= Новый Шрифт(тЯчейка.Шрифт,,,,,,Истина);
				тЯчейка.ЦветТекста  = Новый Цвет(255,0,0);
			КонецЕсли;	
			
		КонецЦикла;	
		
	ИначеЕсли РежимРаботы = "АналитикиПоказателей" Тогда	
		
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			СтруктураРасшифровки = Новый Структура();
			СтруктураРасшифровки.Вставить("Аналитика","Аналитика"+Инд);
			СтруктураРасшифровки.Вставить("КолонкаКод","Аналитика"+Инд);
			
			
			ПолеТабличногоДокументаМакетШаблонЗаголовка.Присоединить(ОбластьЗаголовокКолонки);
			
			СтрокаШаблона = Нстр("ru = 'Аналитика %1'");
			
			ТекстПоля = "";
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ТекстПоля = СтрШаблон(СтрокаШаблона, Инд);
			КонецЕсли;
			
			ПолеТабличногоДокументаМакетШаблонЗаголовка.Область(1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы,1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы).Текст = ТекстПоля;		
			ПолеТабличногоДокументаМакетШаблонЗаголовка.Область(1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы,1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы).Расшифровка = СтруктураРасшифровки;
			ПолеТабличногоДокументаМакетШаблонЗаголовка.Область(0,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы,0,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы).ШиринаКолонки = 20;
			
			тСвойствоКолонки = ТзНастройкиКолонок.НайтиСтроки(Новый Структура("Режим,КодКолонки",РежимРаботы,"Аналитика"+Инд));
			Если тСвойствоКолонки.Количество() = 1 Тогда	
				ПолеТабличногоДокументаМакетШаблонЗаголовка.Область(1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы,1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы).ШиринаКолонки =  тСвойствоКолонки[0].ШиринаКолонки;		
			КонецЕсли;	
			
			
		КонецЦикла;	
		
		//Добавляем колонку для вывода аналитики по валютам
		СтруктураРасшифровки = Новый Структура();
		СтруктураРасшифровки.Вставить("Аналитика","АналитикаВалюта");
		СтруктураРасшифровки.Вставить("КолонкаКод","АналитикаВалюта");
		
		
		ПолеТабличногоДокументаМакетШаблонЗаголовка.Присоединить(ОбластьЗаголовокКолонки);
		ПолеТабличногоДокументаМакетШаблонЗаголовка.Область(1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы,1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы).Текст = Нстр("ru = 'Раскрытие по валютам '");		
		ПолеТабличногоДокументаМакетШаблонЗаголовка.Область(1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы,1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы).Расшифровка = СтруктураРасшифровки;
		ПолеТабличногоДокументаМакетШаблонЗаголовка.Область(0,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы,0,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы).ШиринаКолонки = 12;
		
		тСвойствоКолонки = ТзНастройкиКолонок.НайтиСтроки(Новый Структура("Режим,КодКолонки",РежимРаботы,"АналитикаВалюта"));
		Если тСвойствоКолонки.Количество() = 1 Тогда	
			ПолеТабличногоДокументаМакетШаблонЗаголовка.Область(1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы,1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы).ШиринаКолонки =  тСвойствоКолонки[0].ШиринаКолонки;		
		КонецЕсли;	
		
		//Добавляем колонку для настройки группы раскрытия
		СтруктураРасшифровки = Новый Структура();
		СтруктураРасшифровки.Вставить("НастройкиГруппыРаскрытия","НастройкиГруппыРаскрытия");
		СтруктураРасшифровки.Вставить("КолонкаКод","НастройкиГруппыРаскрытия");
		
		
		ПолеТабличногоДокументаМакетШаблонЗаголовка.Присоединить(ОбластьЗаголовокКолонки);
		ПолеТабличногоДокументаМакетШаблонЗаголовка.Область(1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы,1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы).Текст = Нстр("ru = 'Настройки'");		
		ПолеТабличногоДокументаМакетШаблонЗаголовка.Область(1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы,1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы).Расшифровка = СтруктураРасшифровки;
		ПолеТабличногоДокументаМакетШаблонЗаголовка.Область(0,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы,0,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы).ШиринаКолонки = 12;
		
		тСвойствоКолонки = ТзНастройкиКолонок.НайтиСтроки(Новый Структура("Режим,КодКолонки",РежимРаботы,"АналитикаВалюта"));
		Если тСвойствоКолонки.Количество() = 1 Тогда	
			ПолеТабличногоДокументаМакетШаблонЗаголовка.Область(1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы,1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы).ШиринаКолонки =  тСвойствоКолонки[0].ШиринаКолонки;		
		КонецЕсли;	
		
		
	КонецЕсли;
	
	ПолеТабличногоДокументаМакетШаблонЗаголовка.Область(1,0,1,0).Имя = "ШаблонВыводаЗаголовка";
	
	ПолеТабличногоДокументаМакетШаблонСтроки 			= Новый ТабличныйДокумент;
	ПолеТабличногоДокументаМакетШаблонСтрокиИтог 		= Новый ТабличныйДокумент;
	
	ОбластьЗаголовокСтороки 			= МакетШаблонаКолонки.ПолучитьОбласть("ОбластьЗаголовкаСтроки");
	ОбластьЗаголовокПоказателя 			= МакетШаблонаКолонки.ПолучитьОбласть("ОбластьЗаголовкаПоказателя");
	
	ОбластьЗаголовокСторокиИтог 		= МакетШаблонаКолонки.ПолучитьОбласть("ОбластьЗаголовкаСтрокиИтог");
	ОбластьЗаголовокПоказателяИтог 		= МакетШаблонаКолонки.ПолучитьОбласть("ОбластьЗаголовкаПоказателяИтог");
	
	
	//Выводим шаблон для реквизитов строк
	ИндексПервогоРеквизита = Истина;
	Для Каждого Реквизит Из РеквизитыСтрок Цикл			
		Если НЕ ИндексПервогоРеквизита Тогда
			ПолеТабличногоДокументаМакетШаблонСтроки.Присоединить(ОбластьЗаголовокСтороки);
			ПолеТабличногоДокументаМакетШаблонСтрокиИтог.Присоединить(ОбластьЗаголовокСторокиИтог);
		Иначе
			ПолеТабличногоДокументаМакетШаблонСтроки.Вывести(ОбластьЗаголовокСтороки);
			ПолеТабличногоДокументаМакетШаблонСтрокиИтог.Вывести(ОбластьЗаголовокСторокиИтог);		
			ИндексПервогоРеквизита = Ложь;
		КонецЕсли;		
	КонецЦикла;	
	
	Если РежимРаботы = "СтруктураОтчета" Тогда
		
		Если  РеквизитыПоказателей.Количество()> 0 Тогда
			ПолеТабличногоДокументаМакетШаблонСтроки.Присоединить(ОбластьЗаголовокСтороки);
			ПолеТабличногоДокументаМакетШаблонСтрокиИтог.Присоединить(ОбластьЗаголовокСторокиИтог);
		КонецЕсли;	
			
	КонецЕсли;	

	
	
	//Выводим шаблон для колонок отчета
	Если РежимРаботы = "СтруктураОтчета" ИЛИ  РежимРаботы = "Формулы" Тогда
		
		Для Каждого СтрКол Из тКолонки Цикл				
			ПолеТабличногоДокументаМакетШаблонСтроки.Присоединить(ОбластьЗаголовокПоказателя);	
			ПолеТабличногоДокументаМакетШаблонСтрокиИтог.Присоединить(ОбластьЗаголовокПоказателяИтог);	
		КонецЦикла;	
		
	ИначеЕсли РежимРаботы = "АналитикиПоказателей" Тогда	
		
		
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл				
			ПолеТабличногоДокументаМакетШаблонСтроки.Присоединить(ОбластьЗаголовокПоказателя);	
			ПолеТабличногоДокументаМакетШаблонСтрокиИтог.Присоединить(ОбластьЗаголовокПоказателяИтог);	
		КонецЦикла;	
		
		//Добавляем колонку для вывода аналитики по валютам
		ПолеТабличногоДокументаМакетШаблонСтроки.Присоединить(ОбластьЗаголовокПоказателя);	
		ПолеТабличногоДокументаМакетШаблонСтрокиИтог.Присоединить(ОбластьЗаголовокПоказателяИтог);	
		
		//Добавляем колонку для настройки группы раскрытия
		ПолеТабличногоДокументаМакетШаблонСтроки.Присоединить(ОбластьЗаголовокПоказателя);	
		ПолеТабличногоДокументаМакетШаблонСтрокиИтог.Присоединить(ОбластьЗаголовокПоказателяИтог);	
		
		
	КонецЕсли;
	
	ПолеТабличногоДокументаМакетШаблонСтроки.Область(1,0,1,0).Имя = "ШаблонВыводаСтроки";
	ПолеТабличногоДокументаМакетШаблонСтрокиИтог.Область(1,0,1,0).Имя = "ШаблонВыводаСтроки";
	
	
	СтруктураОтвета.Вставить("ПолеТабличногоДокументаМакетШаблонЗаголовка",ПолеТабличногоДокументаМакетШаблонЗаголовка);
	СтруктураОтвета.Вставить("ПолеТабличногоДокументаМакетШаблонСтроки",ПолеТабличногоДокументаМакетШаблонСтроки);
	СтруктураОтвета.Вставить("ПолеТабличногоДокументаМакетШаблонСтрокиИтог",ПолеТабличногоДокументаМакетШаблонСтрокиИтог);
	
	Возврат СтруктураОтвета;
	
КонецФункции

&НаСервере
Функция СформироватьТаблицуКолонокБланка(ВидОтчетаВход) Экспорт
	
	РезультатФункции = Новый ТаблицаЗначений;
	ЗапросКолонки = Новый Запрос;
	ЗапросКолонки.Текст = 
	"ВЫБРАТЬ
	|	КолонкиОтчетов.Код КАК Код,
	|	КолонкиОтчетов.Представление КАК Представление,
	|	КолонкиОтчетов.Ссылка КАК Ссылка,
	|	КолонкиОтчетов.Представление КАК тИмя,
	|	КолонкиОтчетов.ПометкаУдаления КАК КолонкаПометкаНаУдаление
	|ИЗ
	|	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|ГДЕ
	|	КолонкиОтчетов.Владелец = &ВидОтчета
	|	И КолонкиОтчетов.ПометкаУдаления В (&ВыводитьУдаленные)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КолонкиОтчетов.ПорядковыйНомер";
	
	ЗапросКолонки.УстановитьПараметр("ВидОтчета", ВидОтчетаВход);
	
	ВыводитьУдаленныеСписок = Новый СписокЗначений;
	ВыводитьУдаленныеСписок.Добавить(Ложь);
	Если ВыводитьУдаленные Тогда
		ВыводитьУдаленныеСписок.Добавить(Истина);
	КонецЕсли;	
	
	ЗапросКолонки.УстановитьПараметр("ВыводитьУдаленные", ВыводитьУдаленныеСписок);
	
	РезультатФункции = ЗапросКолонки.Выполнить().Выгрузить();
	
	Возврат РезультатФункции;
	
КонецФункции		

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	Элементы.КолонкаОтбор.Видимость 										 	= РежимРаботы = "АналитикиПоказателей";
	Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюАналитики.Видимость 	= РежимРаботы = "АналитикиПоказателей";
	Элементы.ГруппаРаботаСАналитиками.Видимость							 		= РежимРаботы = "АналитикиПоказателей";
	
	Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюПоказатели.Видимость 	= РежимРаботы = "СтруктураОтчета";
	Элементы.ГруппаРаботаСКолонками.Видимость							 	  	= РежимРаботы = "СтруктураОтчета";
	
	Элементы.ПравилоОбработки.Видимость							 	  			= РежимРаботы = "Формулы";
	Элементы.ГруппаРаботаСФормулами.Видимость							 		= РежимРаботы = "Формулы";
	Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюФормулы.Видимость 		= РежимРаботы = "Формулы";
	
	Элементы.ГруппаФормулы.Видимость 											= РежимРедактированияФормулы;
	Элементы.ГруппаОсновныеПараметры.Доступность 								= НЕ РежимРедактированияФормулы;
	Элементы.ГруппаКоманднаяПанельСтруктура.Доступность 						= НЕ РежимРедактированияФормулы;
	Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюКомманды.Доступность    = НЕ РежимРедактированияФормулы;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиВариантаМакета()
	
	ТзНастройкиКолонок = ПолучитьИзВременногоХранилища(НастройкиКолонокАдрес);
	
	тСтрокиКУдалению = ТзНастройкиКолонок.НайтиСтроки(Новый Структура("Режим", РежимРаботы));
	
	Для Каждого Стр Из тСтрокиКУдалению Цикл
		ТзНастройкиКолонок.Удалить(Стр);
	КонецЦикла;	
	
	//Сохранияем настройки колонок
	Для Инд = 1 По ПолеТабличногоДокументаМакет.ШиринаТаблицы Цикл
		
		нСтр = ТзНастройкиКолонок.Добавить();
		нСтр.НомерКолонки	= Инд;
		нСтр.Режим 			= РежимРаботы;
		
		Если ПолеТабличногоДокументаМакет.Область(1,Инд,1,Инд).Расшифровка <> неопределено тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПолеТабличногоДокументаМакет.Область(1,Инд,1,Инд).Расшифровка, "КолонкаКод") тогда
				
				нСтр.КодКолонки = ПолеТабличногоДокументаМакет.Область(1,Инд,1,Инд).Расшифровка.КолонкаКод;
			КонецЕсли;
		КонецЕсли;
		
		нСтр.ШиринаКолонки 	= ПолеТабличногоДокументаМакет.Область(0,Инд,0,Инд).ШиринаКолонки;
		
	КонецЦикла;	 
	
	ПолучитьГруппировкиТабличногоДокумента()
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьГруппировкиТабличногоДокумента()
	
	ТабДокумент = ПолеТабличногоДокументаМакет;	
	
	ТгруппыСтрок.Очистить();
	
	рЗапись		= Новый ЗаписьXML;
	рЗапись.УстановитьСтроку("UTF-8");
	СериализаторXDTO.ЗаписатьXML(рЗапись,ТабДокумент);
	рЧтение		= Новый ЧтениеXML;
	рЧтение.УстановитьСтроку(рЗапись.Закрыть());
	пострДом	= Новый ПостроительDOM;
	докдом=пострДом.Прочитать(рЧтение);
	
	мУзловГрупп=докдом.ПолучитьЭлементыПоИмени("vg");
	Для Каждого рУзелГруппы Из мУзловГрупп Цикл		
		Попытка
			
			Для Каждого СтрДочерний  Из рУзелГруппы.ДочерниеУзлы Цикл
				
				Если СтрДочерний.ИмяЭлемента = "b" Тогда	
					нстр 			= ТгруппыСтрок.Добавить();
					нстр.СтрокаКод = ТабДокумент.Область(Число(СтрДочерний.ТекстовоеСодержимое),1,Число(СтрДочерний.ТекстовоеСодержимое),1).Расшифровка.СтрокаКод; 
				КонецЕсли;	
				
				Если СтрДочерний.ИмяЭлемента = "o" Тогда	
					нстр.Свернута 			= Истина;	
				КонецЕсли;
				
				ОблНачалаГруппиовки 				= ТабДокумент.Область(Число(рУзелГруппы.ПервыйДочерний.ТекстовоеСодержимое),1,Число(рУзелГруппы.ПервыйДочерний.ТекстовоеСодержимое),1);
				
			КонецЦикла;
			
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры		

Процедура ВывестиРеквизитыСтрок(СтрокаВыборки)
	
	//Выводим колонки реквизитов строки
	ИндКолонки = 1;
	Для Каждого СтрРеквизит Из РеквизитыСтрок Цикл
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Строка",СтрокаВыборки.Строка);
		СтруктураРасшифровки.Вставить("СтрокаКод",СтрокаВыборки.СтрокаКод);
		СтруктураРасшифровки.Вставить("СтрокаНаименование",	СтрокаВыборки.СтрокаНаименование);
		СтруктураРасшифровки.Вставить("ПорядковыйНомер",	СтрокаВыборки.ПорядковыйНомер);
		СтруктураРасшифровки.Вставить("ГруппаРаскрытия",	СтрокаВыборки.СтрокаГруппаРаскрытия);
		
		Если РежимРаботы = "АналитикиПоказателей" Тогда
			
			Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				СтруктураРасшифровки.Вставить("ВидОтчетаВидАналитики"+Инд,	СтрокаВыборки["ВидОтчетаВидАналитики"+Инд]);
			Конеццикла;
			
		КонецЕсли;
		
		тЯчейка = ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,ИндКолонки,ПолеТабличногоДокументаМакет.ВысотаТаблицы,ИндКолонки);
		
		Если СтрРеквизит.Значение = "Строка" Тогда
			тЯчейка.Текст 		= СтрокаВыборки.СтрокаНаименование;
			тЯчейка.Расшифровка = СтруктураРасшифровки;	
			тЯчейка.Отступ  = (СтрокаВыборки.Уровень()-1)*2;
		Иначе
			тЯчейка.Текст 		= СтрокаВыборки[СтрЗаменить(СтрРеквизит.Значение,".","_")];
			тЯчейка.Расшифровка = СтруктураРасшифровки;	
			тЯчейка.Шрифт 			= Новый Шрифт(тЯчейка.Шрифт,,8,Ложь);
			тЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;		
		КонецЕсли;
		
		Если СтрокаВыборки.СтрокаПометкаНаУдаление Тогда
			тЯчейка.Шрифт 			= Новый Шрифт(тЯчейка.Шрифт,,,,,,Истина);
			тЯчейка.ЦветТекста      = Новый Цвет(255,0,0);
		КонецЕсли;	
		
		ИндКолонки = ИндКолонки+1;
	КонецЦикла;	
	
КонецПроцедуры	

#КонецОбласти



#Область ПроцедурыиФункцииРаботыВРежимеСтруктуры

&НаКлиенте
Процедура ДобавитьКолонку(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ДобавлениеКолонокЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Обработка.НастройкаСтруктурыОтчета.Форма.ФормаДобавленияНовыхКолонок", 
	,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроки(Команда)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ВидОтчета",ВидОтчета);
	
	Оповещение = Новый ОписаниеОповещения("ДобавлениеСтрокЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Обработка.НастройкаСтруктурыОтчета.Форма.ФормаДобавленияНовыхСтрок",СтруктураПараметров 
	,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПереместитьВверх(Команда)
	
	ТекущаяОбласть				= ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	
	Если  ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
		 ТекущаяОбласть = ПолеТабличногоДокументаМакет.Область(ТекущаяОбласть.Верх,1,ТекущаяОбласть.Верх,1);
	КонецЕсли;	
	
	Если ТипЗнч(ТекущаяОбласть.Расшифровка) = Тип("Структура") И ТекущаяОбласть.Расшифровка.Свойство("Строка") Тогда	
		тСтрока = ТекущаяОбласть.Расшифровка.Строка;
		СтрокаПереместитьСервер(ТекущаяОбласть.Расшифровка.Строка,-1);	
	КонецЕсли;	
	
	ЗаполнитьДеревоСтрок();
	
	УстановитьТекущуюОбласть(тСтрока);
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ПолеТабличногоДокументаМакет;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПереместитьВниз(Команда)
	
	ТекущаяОбласть				= ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	
	Если  ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
		 ТекущаяОбласть = ПолеТабличногоДокументаМакет.Область(ТекущаяОбласть.Верх,1,ТекущаяОбласть.Верх,1);
	КонецЕсли;	
	
	Если ТипЗнч(ТекущаяОбласть.Расшифровка) = Тип("Структура") И ТекущаяОбласть.Расшифровка.Свойство("Строка") Тогда	
		тСтрока = ТекущаяОбласть.Расшифровка.Строка;
		СтрокаПереместитьСервер(ТекущаяОбласть.Расшифровка.Строка,1);		
	КонецЕсли;	
	
	ЗаполнитьДеревоСтрок();
	
	УстановитьТекущуюОбласть(тСтрока);
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ПолеТабличногоДокументаМакет;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроки(Команда)
	
	ВыделенныеСтроки = Новый Массив;
	
	Для Каждого ВыдОбласть Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл	
		Если  ВыдОбласть.Верх =0 Тогда	
			Верх  = 1;
			Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	 
		ИначеЕсли  ВыдОбласть.Лево =0 Тогда	 	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = 1;
			Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;	
		Иначе	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	
		КонецЕсли;	
		
		Для ИндС = Верх По Низ Цикл
			Для ИндК = Лево По Право Цикл
				ТекОбл = ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);
				Если ЗначениеЗаполнено(ТекОбл.Расшифровка) И ТекОбл.Расшифровка.Свойство("Строка")  Тогда
					ВыделенныеСтроки.Добавить(ТекОбл.Расшифровка.Строка);
				КонецЕсли;	  				
			КонецЦикла;	
		КонецЦикла;			
	КонецЦикла;
	
	ПометитьСтрокуНаУдалениеСервер(ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоказатели(Команда)
	
	ВыделенныеПоказатели = Новый Массив;
	
	Для Каждого ВыдОбласть Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл	
		Если  ВыдОбласть.Верх =0 Тогда	
			Верх  = 1;
			Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	 
		ИначеЕсли  ВыдОбласть.Лево =0 Тогда	 	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = 1;
			Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;	
		Иначе	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	
		КонецЕсли;	
		
		Для ИндС = Верх По Низ Цикл
			Для ИндК = Лево По Право Цикл
				ТекОбл = ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);
				
				ВыделенныеПоказатели.Добавить(ТекОбл.Имя);
				
			КонецЦикла;	
		КонецЦикла;			
	КонецЦикла;
	
	СоздатьПоказателиСервер(ВыделенныеПоказатели);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПоказатель(Команда)
	
	 ВыделенныеПоказатели = Новый Массив;
	
	Для Каждого ВыдОбласть Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл	
		Если  ВыдОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Таблица Тогда
			Возврат;
		ИначеЕсли  ВыдОбласть.Верх =0 Тогда	
			Верх  = 1;
			Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	 
		ИначеЕсли  ВыдОбласть.Лево =0 Тогда	 	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = 1;
			Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;	
		Иначе	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	
		КонецЕсли;	
		
		Для ИндС = Верх По Низ Цикл
			Для ИндК = Лево По Право Цикл
				ТекОбл = ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);
				Если ТипЗнч(ТекОбл.Расшифровка) = Тип("Структура") И ТекОбл.Расшифровка.Свойство("Показатель") Тогда
					ВыделенныеПоказатели.Добавить(ТекОбл.Расшифровка.Показатель);
				КонецЕсли;	  				
			КонецЦикла;	
		КонецЦикла;			
	КонецЦикла;

	УдалитьПоказателиСервер(ВыделенныеПоказатели);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБланкСводнойТаблицы(Команда)
	
	 ВыделенныеПоказатели = Новый Массив;
	 ВыделенныеСтроки     = Новый Массив;
	 ВыделенныеКолонки    = Новый Массив;
	 	 
	Для Каждого ВыдОбласть Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл	
		Если  ВыдОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Таблица Тогда
			Верх  = 1;
			Лево  = 1;
			Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;
			Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
		ИначеЕсли  ВыдОбласть.Верх =0 Тогда	
			Верх  = 1;
			Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	 
		ИначеЕсли  ВыдОбласть.Лево =0 Тогда	 	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = 1;
			Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;	
		Иначе	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	
		КонецЕсли;	
		
		Для ИндС = Верх По Низ Цикл
			Для ИндК = Лево По Право Цикл
				ТекОбл = ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);
				Если ТипЗнч(ТекОбл.Расшифровка) = Тип("Структура") И ТекОбл.Расшифровка.Свойство("Показатель") Тогда
					ВыделенныеПоказатели.Добавить(ТекОбл.Расшифровка.Показатель);
					Если ВыделенныеСтроки.Найти(ПолеТабличногоДокументаМакет.Область(ИндС,1,ИндС,1).Расшифровка.Строка) = Неопределено Тогда
						ВыделенныеСтроки.Добавить(ПолеТабличногоДокументаМакет.Область(ИндС,1,ИндС,1).Расшифровка.Строка);
					КонецЕсли;
					Если ВыделенныеКолонки.Найти(ПолеТабличногоДокументаМакет.Область(1,ИндК,1,ИндК).Расшифровка.Колонка) = Неопределено Тогда
						ВыделенныеКолонки.Добавить(ПолеТабличногоДокументаМакет.Область(1,ИндК,1,ИндК).Расшифровка.Колонка);
					КонецЕсли;

				КонецЕсли;	  				
			КонецЦикла;	
		КонецЦикла;			
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура;
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Владелец",ВидОтчета);
    ПараметрыЗаполнения.Вставить("РежимБланка",1);
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ПараметрыЗаполнения);
	
	ФормаСводнойТаблицы = ПолучитьФорму("Справочник.БланкиОтчетов.Форма.ФормаМакетаСводнаяТаблица",СтруктураПараметров,ВидОтчета);
	
	ФормаСводнойТаблицы.Объект.Наименование  = УправлениеОтчетамиУХ.СгенерироватьНаименованиеНовогоБланкаДляВидаОтчета(ВидОтчета);
    ФормаСводнойТаблицы.Объект.РежимБланка = 1;
	ФормаСводнойТаблицы.Объект.Периодичность 					= ПредопределенноеЗначение("Перечисление.Периодичность.Месяц");
	ФормаСводнойТаблицы.Объект.ЕдиницаИзмеренияПоУмолчанию 		= 1;
	ФормаСводнойТаблицы.Объект.ИерархияГруппировокСтрок 		= Истина;
	ФормаСводнойТаблицы.Объект.ИерархияГруппировокКолонок 		= Ложь;
	ФормаСводнойТаблицы.Записать();
	СоздатьБланкПоВыделеннымСтрокамКолонкам(ВыделенныеСтроки,ВыделенныеКолонки,ФормаСводнойТаблицы.Объект.Ссылка);
	СводнаяТаблицаУХ.ОбновитьПорядокСтрокБланкаСТ(ФормаСводнойТаблицы.Объект.Ссылка);
	ФормаСводнойТаблицы.ПрочитатьСтруктуруТаблицы();
	
	ФормаСводнойТаблицы.Записать();
	ФормаСводнойТаблицы.Модифицированность = Ложь;

	ФормаСводнойТаблицы.Открыть();
				
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМногоПериодныйБланк(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСтроки(Команда)
	
	Если ПолеТабличногоДокументаМакет.ВыделенныеОбласти.Количество() = 2 Тогда  //режим быстрого переноса строк из выделенной области 1 в первую строку выделенной области 2
		
		ВыделенныеСтрокиИсточник = Новый Массив;
		ВыделенныеСтрокиПриемник = Новый Массив;
		
		
		ВыдОбластьИсточник = ПолеТабличногоДокументаМакет.ВыделенныеОбласти[1]; 
		Если  ВыдОбластьИсточник.Верх =0 Тогда	
			Верх  = 1;
			Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
			Лево  = ВыдОбластьИсточник.Лево;
			Право = ВыдОбластьИсточник.Право;	 
		ИначеЕсли  ВыдОбластьИсточник.Лево =0 Тогда	 	
			Верх  = ВыдОбластьИсточник.Верх;
			Низ   = ВыдОбластьИсточник.Низ;
			Лево  = 1;
			Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;	
		Иначе	
			Верх  = ВыдОбластьИсточник.Верх;
			Низ   = ВыдОбластьИсточник.Низ;
			Лево  = ВыдОбластьИсточник.Лево;
			Право = ВыдОбластьИсточник.Право;	
		КонецЕсли;	
		
		Для ИндС = Верх По Низ Цикл
			Для ИндК = Лево По Право Цикл
				ТекОбл = ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);
				Если ТипЗнч(ТекОбл.Расшифровка) = Тип("Структура") И ТекОбл.Расшифровка.Свойство("Строка")  Тогда
					ВыделенныеСтрокиИсточник.Добавить(ТекОбл.Расшифровка.Строка);
				КонецЕсли;	  				
			КонецЦикла;	
		КонецЦикла;			
		
		
		ВыдОбластьПриемник = ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0]; 
		Если  ВыдОбластьПриемник.Верх =0 Тогда	
			Верх  = 1;
			Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
			Лево  = ВыдОбластьПриемник.Лево;
			Право = ВыдОбластьПриемник.Право;	 
		ИначеЕсли  ВыдОбластьПриемник.Лево =0 Тогда	 	
			Верх  = ВыдОбластьПриемник.Верх;
			Низ   = ВыдОбластьПриемник.Низ;
			Лево  = 1;
			Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;	
		Иначе	
			Верх  = ВыдОбластьПриемник.Верх;
			Низ   = ВыдОбластьПриемник.Низ;
			Лево  = ВыдОбластьПриемник.Лево;
			Право = ВыдОбластьПриемник.Право;	
		КонецЕсли;	
		
		Для ИндС = Верх По Низ Цикл
			Для ИндК = Лево По Право Цикл
				ТекОбл = ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);
				Если ТипЗнч(ТекОбл.Расшифровка) = Тип("Структура") И ТекОбл.Расшифровка.Свойство("Строка")  Тогда
					ВыделенныеСтрокиПриемник.Добавить(ТекОбл.Расшифровка.Строка);
					Прервать;
					Прервать;
				КонецЕсли;	  				
			КонецЦикла;	
		КонецЦикла;			
		
		Если  ВыделенныеСтрокиИсточник.Количество()>0 И  ВыделенныеСтрокиПриемник.Количество() =1 Тогда
			ПеренестиСтрокиСервер(ВыделенныеСтрокиИсточник,ВыделенныеСтрокиПриемник[0]);
			Возврат;
		КонецЕсли;	
		
		
	Иначе	
		
		ПоказатьПредупреждение(, Нстр("ru = 'Выделите строки для переноса. Затем, зажав CTRL, выделите строку в которую необходимо перенести.'"),, Нстр("ru = 'Подсказка'"))
		
	КонецЕсли;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура Свойства(Команда)
	
	ВыделенныеПоказатели = Новый Массив;
	
	Для Каждого ВыдОбласть Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл	
		Если  ВыдОбласть.Верх =0 Тогда	
			Верх  = 1;
			Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	 
		ИначеЕсли  ВыдОбласть.Лево =0 Тогда	 	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = 1;
			Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;	
		Иначе	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	
		КонецЕсли;	
		
		Для ИндС = Верх По Низ Цикл
			Для ИндК = Лево По Право Цикл
				ТекОбл = ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);
				Если ТипЗнч(ТекОбл.Расшифровка) = Тип("Структура") И ТекОбл.Расшифровка.Свойство("Показатель") Тогда
					ВыделенныеПоказатели.Добавить(ТекОбл.Расшифровка.Показатель);
				КонецЕсли;	  				
			КонецЦикла;	
		КонецЦикла;			
	КонецЦикла;
	
	Если  ВыделенныеПоказатели.Количество()>0 Тогда
		
		ИзменениеСвойствЗавершение = Новый ОписаниеОповещения("ИзменениеСвойствЗавершение", ЭтаФорма);
		ОткрытьФорму("Обработка.ГрупповоеИзменениеЭлементовОтчета.Форма.ГрупповоеИзменениеЭлементов", 
		Новый Структура("ТипЭлемента, МассивОбъектов,ВидОтчета", "Показатель", Новый ФиксированныйМассив(ВыделенныеПоказатели),ВидОтчета),,,,,ИзменениеСвойствЗавершение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиСвойствПоказателей(Команда)
	
	Оповещение = Новый ОписаниеОповещения("НастройкаРеквизитовПоказателейЗавершение", ЭтаФорма);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РеквизитыПоказателей",РеквизитыПоказателей);
	
	ОткрытьФорму("Обработка.НастройкаСтруктурыОтчета.Форма.ФормаНастройкиРеквизитовПоказателей",ПараметрыФормы 
	,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 

КонецПроцедуры


&НаСервере
Процедура СоздатьБланкПоВыделеннымСтрокамКолонкам(ВыделенныеСтроки,ВыделенныеКолонки,Бланк)
	
	   СводнаяТаблицаУХ.СоздатьБланкПоВыделеннымСтрокамКолонкам(ВыделенныеСтроки,ВыделенныеКолонки,Бланк);
		
КонецПроцедуры

&НаСервере
Процедура  ПеренестиСтрокиСервер(ВыделенныеСтрокиИсточник,СтрокаПриемник)
	
	Для Каждого Стр Из ВыделенныеСтрокиИсточник Цикл
		
		СтрокаОбъект = Стр.ПолучитьОбъект();
		СтрокаОбъект.Родитель = СтрокаПриемник;
		Попытка	
			СтрокаОбъект.Записать();
		Исключение
			
			СтрокаШаблона = Нстр("ru = 'Не удалось записать строку %1: %2'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда		
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Стр, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),,, СтатусСообщения.Внимание);
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЦикла;	
	
	ЗаполнитьДеревоСтрок();
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьПоказателиСервер(ВыделенныеПоказатели)
	
	
	ТаблицаИзмененныхПоказателей=Новый ТаблицаЗначений;
	ТаблицаИзмененныхПоказателей.Колонки.Добавить("Ссылка");
	ТаблицаИзмененныхПоказателей.Колонки.Добавить("ОбъектДобавлен",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТаблицаИзмененныхПоказателей.Колонки.Добавить("ПометкаУдаления",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	Для Каждого ВыдОбластьПоказателя Из ВыделенныеПоказатели Цикл
		
		тОбласть 			= ПолеТабличногоДокументаМакет.Область(ВыдОбластьПоказателя);
		тОбластьСтрока      = ПолеТабличногоДокументаМакет.Область(тОбласть.Верх,1,тОбласть.Верх,1);
		тОбластьКолонка     = ПолеТабличногоДокументаМакет.Область(1,тОбласть.Лево,1,тОбласть.Лево);
		
		Если  ТипЗнч(тОбластьСтрока.Расшифровка)= Тип("Структура") И тОбластьСтрока.Расшифровка.Свойство("Показатель") Тогда
			Продолжить;
		КонецЕсли;	
		
		тСтрока 		= Неопределено;
		тКолонка 		= Неопределено;
		
		Если ТипЗнч(тОбластьСтрока.Расшифровка) = Тип("Структура") И тОбластьСтрока.Расшифровка.Свойство("Строка") Тогда	
			тСтрока = тОбластьСтрока.Расшифровка.Строка;	
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(тОбластьКолонка.Расшифровка) И тОбластьКолонка.Расшифровка.Свойство("Колонка") Тогда	
			тКолонка = тОбластьКолонка.Расшифровка.Колонка;	
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(тСтрока) И ЗначениеЗаполнено(тКолонка) Тогда
			
			Попытка				
				Справочники.ВидыОтчетов.СформироватьПоказатель(ВидОтчета,тСтрока, тКолонка,,,,,,ТаблицаИзмененныхПоказателей);
			Исключение
				
				СтрокаШаблона = Нстр("ru = 'Ошибка при генерации показателя   %1 | %2: %3'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда		
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, тСтрока, тКолонка, ИнформацияОбОшибке().Описание));
				КонецЕсли;
				
				Отказ = Истина;
			КонецПопытки;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	ЗаполнитьДеревоСтрок();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПоказателиПоСтрокеКолонке(тСтрока = Неопределено,тКолонка = Неопределено)
	
	
	ТаблицаИзмененныхПоказателей=Новый ТаблицаЗначений;
	ТаблицаИзмененныхПоказателей.Колонки.Добавить("Ссылка");
	ТаблицаИзмененныхПоказателей.Колонки.Добавить("ОбъектДобавлен",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТаблицаИзмененныхПоказателей.Колонки.Добавить("ПометкаУдаления",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	Если ЗначениеЗаполнено(тСтрока) Тогда
		
		Для Каждого тКолонка Из тКолонки Цикл
			
			Попытка				
				Справочники.ВидыОтчетов.СформироватьПоказатель(ВидОтчета,тСтрока, тКолонка.Ссылка,,,,,,ТаблицаИзмененныхПоказателей);
			Исключение
				
				СтрокаШаблона = Нстр("ru = 'Ошибка при генерации показателя   %1 | %2: %3'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда		
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, тСтрока, тКолонка, ИнформацияОбОшибке().Описание));
				КонецЕсли;
					
				Отказ = Истина;
			КонецПопытки;
			
		КонецЦикла;	
		
	ИначеЕсли ЗначениеЗаполнено(тКолонка) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СтрокиОтчетов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
		|ГДЕ
		|	СтрокиОтчетов.ПометкаУдаления = Ложь
		|	И СтрокиОтчетов.Владелец = &Владелец";
		
		Запрос.УстановитьПараметр("Владелец",ВидОтчета);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Попытка				
				Справочники.ВидыОтчетов.СформироватьПоказатель(ВидОтчета,Выборка.Ссылка, тКолонка,,,,,,ТаблицаИзмененныхПоказателей);
			Исключение
				
				СтрокаШаблона = Нстр("ru = 'Ошибка при генерации показателя   %1 | %2: %3'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда		
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, тСтрока, тКолонка, ИнформацияОбОшибке().Описание));
				КонецЕсли;
				
				Отказ = Истина;
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПометитьСтрокуНаУдалениеСервер(ВыделенныеСтроки)
	
	Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		
		Попытка			
			
			тСтрокаОбъект = ТекущаяСтрока.ПолучитьОбъект();
			
			Если НЕ тСтрокаОбъект.ПометкаУдаления Тогда
								
				тСтрокаОбъект.ПометкаУдаления = Истина;
				тСтрокаОбъект.Записать();
				
				ТаблицаПодчиненных = ПолучитьПодчиненныеСтроки(тСтрокаОбъект.Ссылка);
				
				Для Каждого ПодчиненнаяСтрока Из ТаблицаПодчиненных Цикл
					ПодчиненнаяСтрокаОбъект = ПодчиненнаяСтрока.Потомок.ПолучитьОбъект();
					ПодчиненнаяСтрокаОбъект.ПометкаУдаления = Истина;
					ПодчиненнаяСтрокаОбъект.Записать();
				КонецЦикла;
								
			Иначе
								
				тСтрокаОбъект.ПометкаУдаления = Ложь;
				тСтрокаОбъект.Записать();
				
				ТаблицаПодчиненных = ПолучитьПодчиненныеСтроки(тСтрокаОбъект.Ссылка);
				
				Для Каждого ПодчиненнаяСтрока Из ТаблицаПодчиненных Цикл
					ПодчиненнаяСтрокаОбъект = ПодчиненнаяСтрока.Потомок.ПолучитьОбъект();
					ПодчиненнаяСтрокаОбъект.ПометкаУдаления = Ложь;
					ПодчиненнаяСтрокаОбъект.Записать();
				КонецЦикла;
								
			КонецЕсли;
	
		Исключение
			
			СтрокаШаблона = Нстр("ru = 'Ошибка при удалении строки  %1: %2'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда		
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ТекущаяСтрока, ИнформацияОбОшибке().Описание));
			КонецЕсли;
			
			Отказ = Истина;
		КонецПопытки;
		
	КонецЦикла;	
	
	ЗаполнитьДеревоСтрок();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПодчиненныеСтроки(ТекущийЭлемент)
	
	Пролог = "ВЫБРАТЬ
	         |	СтрокиОтчетов.Родитель КАК НачалоДуги,
	         |	СтрокиОтчетов.Ссылка КАК КонецДуги
	         |ПОМЕСТИТЬ ЗамыканияДлины1
	         |ИЗ
	         |	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	         |ГДЕ
	         |	СтрокиОтчетов.Родитель <> ЗНАЧЕНИЕ(Справочник.СтрокиОтчетов.ПустаяСсылка)
	         |
	         |ОБЪЕДИНИТЬ
	         |
	         |ВЫБРАТЬ
	         |	СтрокиОтчетов.Ссылка,
	         |	СтрокиОтчетов.Ссылка
	         |ИЗ
	         |	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	         |;
	         |
	         |////////////////////////////////////////////////////////////////////////////////
	         |";
	
	Рефрен = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	         |	ПерваяДуга.НачалоДуги КАК НачалоДуги,
	         |	ВтораяДуга.КонецДуги КАК КонецДуги
	         |ПОМЕСТИТЬ ЗамыканияДлины#2
	         |ИЗ
	         |	ЗамыканияДлины#1 КАК ПерваяДуга
	         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗамыканияДлины#1 КАК ВтораяДуга
	         |		ПО ПерваяДуга.КонецДуги = ВтораяДуга.НачалоДуги
	         |;
	         |
	         |////////////////////////////////////////////////////////////////////////////////
	         |УНИЧТОЖИТЬ ЗамыканияДлины#1
	         |;
	         |
	         |////////////////////////////////////////////////////////////////////////////////
	         |";
	
	Эпилог = "ВЫБРАТЬ
	         |	КОЛИЧЕСТВО(ЗамыканиеРезультат.НачалоДуги) - 1 КАК МаксимальнаяГлубина,
	         |	ЗамыканиеРезультат.КонецДуги КАК Потомок
	         |ПОМЕСТИТЬ ВТУровниИерархииСправочника
	         |ИЗ
	         |	ЗамыканияДлины#2 КАК ЗамыканиеРезультат
	         |
	         |СГРУППИРОВАТЬ ПО
	         |	ЗамыканиеРезультат.КонецДуги
	         |;
	         |
	         |////////////////////////////////////////////////////////////////////////////////
	         |ВЫБРАТЬ
	         |	МАКСИМУМ(УровниИерархииСправочника.МаксимальнаяГлубина) КАК МаксимальнаяГлубина
	         |ИЗ
	         |	ВТУровниИерархииСправочника КАК УровниИерархииСправочника
	         |;
	         |
			 |////////////////////////////////////////////////////////////////////////////////
	         |УНИЧТОЖИТЬ ВТУровниИерархииСправочника
	         |;
	         |
	         |////////////////////////////////////////////////////////////////////////////////
	         |ВЫБРАТЬ
	         |	ЗамыканиеРезультат.НачалоДуги КАК Предок,
	         |	ЗамыканиеРезультат.КонецДуги КАК Потомок
	         |ИЗ
	         |	ЗамыканияДлины#2 КАК ЗамыканиеРезультат
	         |ГДЕ
	         |	ЗамыканиеРезультат.НачалоДуги = &ТекущийЭлемент
	         |	И ЗамыканиеРезультат.НачалоДуги <> ЗамыканиеРезультат.КонецДуги";
	
	Запрос = Новый Запрос(Пролог);
	
	МаксимальнаяДлинаЗамыканий = 1;
	МаксимальнаяДлинаПути = 512;
	МаксимальноеКоличествоПовторов = 10;
	Инд = 0;
	
	Пока Инд < МаксимальноеКоличествоПовторов Цикл
		
		Пока МаксимальнаяДлинаЗамыканий < МаксимальнаяДлинаПути Цикл
			Запрос.Текст = Запрос.Текст + СтрЗаменить(СтрЗаменить(Рефрен, "#1", Формат(МаксимальнаяДлинаЗамыканий, "ЧГ=0")), "#2", Формат(2 * МаксимальнаяДлинаЗамыканий, "ЧГ=0"));
			МаксимальнаяДлинаЗамыканий = 2 * МаксимальнаяДлинаЗамыканий;
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст + СтрЗаменить(Эпилог, "#2", Формат(МаксимальнаяДлинаЗамыканий, "ЧГ=0"));
		
		Запрос.УстановитьПараметр("ТекущийЭлемент", ТекущийЭлемент);
		
		МассивТаблиц = Запрос.ВыполнитьПакет();
		КоличествоТаблицВПакете = МассивТаблиц.Количество();
		
		МаксимальнаяГлубина = МассивТаблиц[КоличествоТаблицВПакете - 3].Выгрузить()[0].Максимальнаяглубина;
		
		Если МаксимальнаяГлубина < МаксимальнаяДлинаПути тогда
			Прервать;
		Иначе
			Запрос.Текст = Пролог;
			МаксимальнаяДлинаЗамыканий = 1;
			МаксимальнаяДлинаПути = МаксимальнаяДлинаПути * 2;
		КонецЕсли;
		
		Инд = Инд + 1;
		
	КонецЦикла;
	
	Возврат МассивТаблиц[КоличествоТаблицВПакете - 1].Выгрузить();
	
КонецФункции

&НаСервере
Процедура УдалитьПоказателиСервер(ВыделенныеПоказатели)
	
	Для Каждого ТекущийПоказатель Из ВыделенныеПоказатели Цикл
		
		Попытка			
			
			тПоказательОбъект 	= ТекущийПоказатель.ПолучитьОбъект();
			
			Если НЕ тПоказательОбъект.ПометкаУдаления Тогда
				тПоказательОбъект.УстановитьПометкуУдаления(Истина,Истина);
			Иначе
				тПоказательОбъект.УстановитьПометкуУдаления(Ложь,Истина);
			КонецЕсли;
	
		Исключение
			
			СтрокаШаблона = Нстр("ru = 'Ошибка при удалении показателя  %1: %2'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда		
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ТекущийПоказатель, ИнформацияОбОшибке().Описание));
			КонецЕсли;
				
			Отказ = Истина;
		КонецПопытки;
		
	КонецЦикла;	
	
	ЗаполнитьДеревоСтрок();
	
КонецПроцедуры

&НаСервере
Процедура СтрокаПереместитьСервер(ТекущаяСтрока,Сдвиг)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтрокиОтчетов.Ссылка КАК Ссылка,
	|	СтрокиОтчетов.ПорядковыйНомер КАК ПорядковыйНомер
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.ПометкаУдаления = ЛОЖЬ
	|	И СтрокиОтчетов.Родитель = &Родитель
	|	И СтрокиОтчетов.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтрокиОтчетов.ПорядковыйНомер";
	
	Запрос.УстановитьПараметр("Родитель",ТекущаяСтрока.Родитель);
	Запрос.УстановитьПараметр("Владелец",ВидОтчета);
	
	тСтрокиТекущегоУровння      = Запрос.Выполнить().Выгрузить();
	ПорядковыйНомерТек 			= ТекущаяСтрока.ПорядковыйНомер;
	
	Если Сдвиг = -1 Тогда 				//Вверх
		
		тСтрокаПрд = Неопределено;
		
		Для Каждого тСтрока Из тСтрокиТекущегоУровння Цикл		
			Если тСтрока.ПорядковыйНомер = ПорядковыйНомерТек Тогда
				Прервать;
			КонецЕсли;	
			
			тСтрокаПрд = тСтрока.Ссылка;		
		КонецЦикла;	
		
	Иначе  								//Вниз	
		тСтрокаПрд 			= Неопределено;
		ФлТекущСтроки       = Ложь;
		
		Для Каждого тСтрока Из тСтрокиТекущегоУровння Цикл		
			Если ФлТекущСтроки Тогда
				тСтрокаПрд = тСтрока.Ссылка;
				Прервать;
			КонецЕсли;	
			
			Если тСтрока.ПорядковыйНомер = ПорядковыйНомерТек Тогда
				ФлТекущСтроки = Истина;
			КонецЕсли;	
			
		КонецЦикла;		
	КонецЕсли;	
	
	Если НЕ тСтрокаПрд = Неопределено Тогда
		Попытка		
			ПорядковыйНомерПред = тСтрокаПрд.ПорядковыйНомер;	
			
			тСтрокаПрдОбъект 	= тСтрокаПрд.ПолучитьОбъект();
			тСтрокаОбъект 		= ТекущаяСтрока.ПолучитьОбъект();
			
			ПорядковыйНомерПред = тСтрокаПрд.ПорядковыйНомер;
			тСтрокаПрдОбъект.ПорядковыйНомер = тСтрокаОбъект.ПорядковыйНомер; 
			тСтрокаПрдОбъект.ОбменДанными.Загрузка = Истина;
			тСтрокаПрдОбъект.Записать();
			
			тСтрокаОбъект.ПорядковыйНомер = ПорядковыйНомерПред; 
			тСтрокаОбъект.ОбменДанными.Загрузка = Истина;
			тСтрокаОбъект.Записать();
			
		Исключение
			
			СтрокаШаблона = Нстр("ru = 'Ошибка при записи строк %1'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда		
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ИнформацияОбОшибке().Описание));
			КонецЕсли;
				
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиВВидОтчета(НовыеСтроки,СоздаватьПоказатели);
	
	ТабличноеПолеСтрок.Очистить();
	
	ДлинаКодаСтроки  = Метаданные.Справочники.СтрокиОтчетов.ДлинаКода;
	
	ЗаполнитьСписокКодовСтрок();
	
	НПП  = ПолучитьМаксимальныйНППСтроки();
	
	Для Каждого Стр Из НовыеСтроки Цикл
		
		НПП = НПП+1;
		
		нСтр 					=  ТабличноеПолеСтрок.Добавить();
		нСтр.Код        		=  ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(Стр.Наименование, ДлинаКодаСтроки);
		нСтр.Наименование       =  Стр.Наименование;
		нСтр.ПорядковыйНомер	=  НПП;
		нСтр.СтатьяДвиженияДенежныхСредств	 	= Стр.СтатьиДДС;
		нСтр.СтатьяДоходовИРасходов	 			= Стр.СтатьиБДР;
		нСтр.СчетБД	 							= Стр.Счета;
		
	КонецЦикла;	
	
	ТабличноеПолеСтрокЗначение = РеквизитформывЗначение("ТабличноеПолеСтрок");
	
	Справочники.БланкиОтчетов.УстановитьУникальныеКодыДляТаблицы(ТабличноеПолеСтрокЗначение, СписокКодовСтрок, ДлинаКодаСтроки);
	
	Для Каждого СтрСтрока Из ТабличноеПолеСтрокЗначение Цикл
		
		ОбъектСтрокиОтчета 						= Справочники.СтрокиОтчетов.СоздатьЭлемент();
		ОбъектСтрокиОтчета.Владелец    			= ВидОтчета;
		ОбъектСтрокиОтчета.Наименование			= СтрСтрока.Наименование;
		ОбъектСтрокиОтчета.ТипЗначения			= Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
		ОбъектСтрокиОтчета.ПорядковыйНомер    	= СтрСтрока.ПорядковыйНомер;	
		ОбъектСтрокиОтчета.Предназначение       = ВидОтчета.Предназначение;
		
		Если ЗначениеЗаполнено(Справочники.СтрокиОтчетов.НайтиПоКоду(СокрЛП(СтрСтрока.Код),,,ВидОтчета)) Тогда
			ОбъектСтрокиОтчета.Код=ОбщегоНазначенияУХ.ПолучитьВозможныйКодСправочника(СокрЛП(СтрСтрока.Код),ДлинаКодаСтроки,"СтрокиОтчетов",ВидОтчета);
		Иначе
			ОбъектСтрокиОтчета.Код=СокрЛП(СтрСтрока.Код);
		КонецЕсли;	
		
		ОбъектСтрокиОтчета.СтатьяДвиженияДенежныхСредств    			= СтрСтрока.СтатьяДвиженияДенежныхСредств;
		ОбъектСтрокиОтчета.СтатьяДоходовИРасходов    					= СтрСтрока.СтатьяДоходовИРасходов;
        ОбъектСтрокиОтчета.СчетБД    									= СтрСтрока.СчетБД;
		
		Если ОбъектСтрокиОтчета.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств Тогда		
			РабочаяСтатья=ОбъектСтрокиОтчета.СтатьяДвиженияДенежныхСредств;	
			ОбъектСтрокиОтчета.ГруппаРаскрытия=Справочники.ВидыОтчетов.ПолучитьГруппуРаскрытияДляСтатьи(ВидОтчета,РабочаяСтатья,ОбъектСтрокиОтчета.РазделениеПоПроектам);
			ОбъектСтрокиОтчета.ПриходРасход=РабочаяСтатья.ПриходРасход;
		ИначеЕсли ОбъектСтрокиОтчета.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов Тогда		
			РабочаяСтатья=ОбъектСтрокиОтчета.СтатьяДвиженияРесурсов;	
			ОбъектСтрокиОтчета.ГруппаРаскрытия=Справочники.ВидыОтчетов.ПолучитьГруппуРаскрытияДляСтатьи(ВидОтчета,РабочаяСтатья,ОбъектСтрокиОтчета.РазделениеПоПроектам);
			ОбъектСтрокиОтчета.ПриходРасход=РабочаяСтатья.ПриходРасход;
		Иначе	
			РабочаяСтатья=ОбъектСтрокиОтчета.СтатьяДоходовИРасходов;	
			ОбъектСтрокиОтчета.ГруппаРаскрытия=Справочники.ВидыОтчетов.ПолучитьГруппуРаскрытияДляСтатьи(ВидОтчета,РабочаяСтатья,ОбъектСтрокиОтчета.РазделениеПоПроектам);
			ОбъектСтрокиОтчета.ПриходРасход=РабочаяСтатья.ПриходРасход;
		КонецЕсли;
				
		Попытка
			ОбъектСтрокиОтчета.Записать();
		Исключение
			
			СтрокаШаблона = Нстр("ru = 'Ошибка при записи строки - %1: %2'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда		
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, СтрСтрока.Наименование, ИнформацияОбОшибке().Описание));
			КонецЕсли;
			
			Продолжить;
		КонецПопытки;
		
		Если СоздаватьПоказатели Тогда	
			СоздатьПоказателиПоСтрокеКолонке(ОбъектСтрокиОтчета.Ссылка);	
		КонецЕсли;	
		
	КонецЦикла;	
	
	ЗаполнитьДеревоСтрок();
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСписокКодовСтрок()
	
	СписокКодовСтрок.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтрокиОтчетов.Код КАК Код
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &Владелец
	|	И (НЕ СтрокиОтчетов.ПометкаУдаления)");
	Запрос.УстановитьПараметр("Владелец", ВидОтчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокКодовСтрок.Добавить(СокрЛП(Выборка.Код));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокКодовКолонок()
	
	СписокКодовКолонок.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КолонкиОтчетов.Код КАК Код
	|ИЗ
	|	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|ГДЕ
	|	КолонкиОтчетов.Владелец = &Владелец
	|	И (НЕ КолонкиОтчетов.ПометкаУдаления)");
	
	Запрос.УстановитьПараметр("Владелец", ВидОтчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокКодовКолонок.Добавить(СокрЛП(Выборка.Код));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМаксимальныйНППСтроки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(СтрокиОтчетов.ПорядковыйНомер) КАК ПорядковыйНомер
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &Владелец
	|	И (НЕ СтрокиОтчетов.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("Владелец", ВидОтчета);
	
	ПорядковыйНомер = Запрос.Выполнить().Выгрузить()[0].ПорядковыйНомер;
	
	Если ТипЗнч(ПорядковыйНомер) = Тип("Null") Тогда
		Возврат 0;
	Иначе
		Возврат ПорядковыйНомер;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьМаксимальныйНППКолонки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(КолонкиОтчетов.ПорядковыйНомер) КАК ПорядковыйНомер
	|ИЗ
	|	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|ГДЕ
	|	КолонкиОтчетов.Владелец = &Владелец
	|	И (НЕ КолонкиОтчетов.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("Владелец", ВидОтчета);
	
	ПорядковыйНомер = Запрос.Выполнить().Выгрузить()[0].ПорядковыйНомер;
	
	Если ТипЗнч(ПорядковыйНомер) = Тип("Null") Тогда
		Возврат 0;
	Иначе
		Возврат ПорядковыйНомер;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВернутьПоказатель(тСтрока,тКолонка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &Владелец
	|	И ПоказателиОтчетов.Строка = &Строка
	|	И ПоказателиОтчетов.Колонка = &Колонка
	|	И ПоказателиОтчетов.ПометкаУдаления = Ложь";
	
	Запрос.УстановитьПараметр("Владелец", ВидОтчета);
	Запрос.УстановитьПараметр("Строка", тСтрока);
	Запрос.УстановитьПараметр("Колонка",тКолонка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		Возврат  Выборка.Ссылка; 
	КонецЦикла;
	
	Возврат Справочники.ПоказателиОтчетов.ПустаяСсылка();
	
КонецФункции	

&НаСервере
Процедура ДобавитьКолонкиВВидОтчета(НовыеСтроки,СоздаватьПоказатели);
	
	ТабличноеПолеСтрок.Очистить();
	
	ДлинаКодаКолонки  = Метаданные.Справочники.КолонкиОтчетов.ДлинаКода;
	
	ЗаполнитьСписокКодовКолонок();
	
	НПП  = ПолучитьМаксимальныйНППКолонки();
	
	
	Для Каждого Стр Из НовыеСтроки Цикл
		
		НПП = НПП+1;
		
		нСтр 					=  ТабличноеПолеСтрок.Добавить();
		нСтр.Код        		=  ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(Стр.Наименование, ДлинаКодаКолонки);;
		нСтр.Наименование       =  Стр.Наименование;
		нСтр.ПорядковыйНомер	=  НПП;
		
	КонецЦикла;	
	
	ТабличноеПолеСтрокЗначение = РеквизитформывЗначение("ТабличноеПолеСтрок");
	
	Справочники.БланкиОтчетов.УстановитьУникальныеКодыДляТаблицы(ТабличноеПолеСтрокЗначение, СписокКодовКолонок, ДлинаКодаКолонки);
	
	
	ИндексКолонки = тКолонки.Количество()+1;
	
	Для Каждого СтрСтрока Из ТабличноеПолеСтрокЗначение Цикл
		
		ОбъектКолонкиОтчета 						= Справочники.КолонкиОтчетов.СоздатьЭлемент();
		ОбъектКолонкиОтчета.Владелец    			= ВидОтчета;
		ОбъектКолонкиОтчета.Наименование			= СтрСтрока.Наименование;
		ОбъектКолонкиОтчета.ТипЗначения				= Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
		ОбъектКолонкиОтчета.ПорядковыйНомер    		= СтрСтрока.ПорядковыйНомер;	
		
		Если ЗначениеЗаполнено(Справочники.КолонкиОтчетов.НайтиПоКоду(СокрЛП(СтрСтрока.Код),,,ВидОтчета)) Тогда
			ОбъектКолонкиОтчета.Код=ОбщегоНазначенияУХ.ПолучитьВозможныйКодСправочника(СокрЛП(СтрСтрока.Код),ДлинаКодаКолонки,"КолонкиОтчетов",ВидОтчета);
		Иначе
			ОбъектКолонкиОтчета.Код=СокрЛП(СтрСтрока.Код);
		КонецЕсли;	
		
		Попытка
			ОбъектКолонкиОтчета.Записать();			
		Исключение
			
			СтрокаШаблона = Нстр("ru = 'Ошибка при записи колонки - %1: %2'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда		
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, СтрСтрока.Наименование, ИнформацияОбОшибке().Описание));
			КонецЕсли;
			
			Продолжить;
		КонецПопытки;
		
		Если СоздаватьПоказатели Тогда	
			СоздатьПоказателиПоСтрокеКолонке(,ОбъектКолонкиОтчета.Ссылка);	
		КонецЕсли;	
		
		
	КонецЦикла;	
	
	ЗаполнитьДеревоСтрок();
	
КонецПроцедуры	

&НаСервере
Процедура ПодготовитьТаблицыПоДеревуРекурсивноПоказатели(тДеревоВыбранныхСтрок,СтруктураШаблонов,ТаблицаКолонокВход,РезультатПоказатели)
	
	Для Каждого Стр Из тДеревоВыбранныхСтрок.Строки Цикл	
		Если Не Стр.Строка = НСтр("ru = 'Выбранные строки'") Тогда			
			
			
			ВывестиСтрокуВТабличныйДокумент(Стр,СтруктураШаблонов,ТаблицаКолонокВход,РезультатПоказатели);
			
			Если Стр.Уровень()>0 Тогда 
				
				тСтрокаКэш = ТгруппыСтрок.НайтиСтроки(Новый Структура("СтрокаКод",Стр.СтрокаКод));
				Если тСтрокаКэш.Количество() = 1 И тСтрокаКэш[0].Свернута Тогда
					ПолеТабличногоДокументаМакет.НачатьГруппуСтрок(Стр.СтрокаКод,Ложь);
				Иначе
					ПолеТабличногоДокументаМакет.НачатьГруппуСтрок(Стр.СтрокаКод);
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;					
		
		ПодготовитьТаблицыПоДеревуРекурсивноПоказатели(Стр,СтруктураШаблонов,ТаблицаКолонокВход,РезультатПоказатели);		
		Если Стр.Уровень()>0 Тогда 
			Попытка
				ПолеТабличногоДокументаМакет.ЗакончитьГруппуСтрок() 
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтрокуВТабличныйДокумент(СтрокаВыборки = Неопределено,СтруктураШаблонов,ТаблицаКолонокВход,РезультатПоказатели = Неопределено);
	
	
	ПолеТабличногоДокументаМакетШаблонСтрокиИтог 	= СтруктураШаблонов.ПолеТабличногоДокументаМакетШаблонСтрокиИтог;
	ОбластьШаблонСторокиИтог                     	= ПолеТабличногоДокументаМакетШаблонСтрокиИтог.ПолучитьОбласть("ШаблонВыводаСтроки");
	
	ПолеТабличногоДокументаМакетШаблонСтроки	 	= СтруктураШаблонов.ПолеТабличногоДокументаМакетШаблонСтроки;
	ОбластьШаблонСтороки	                     	= ПолеТабличногоДокументаМакетШаблонСтроки.ПолучитьОбласть("ШаблонВыводаСтроки");
	
	
	Если СтрокаВыборки = Неопределено Тогда //Выводим служебную группирующую строку
		
		СтруктураРасшифровки = Новый Структура();
		СтруктураРасшифровки.Вставить("Строка", НСтр("ru = 'Выбранные строки'"));	
		
		ПолеТабличногоДокументаМакет.Вывести(ОбластьШаблонСторокиИтог);
		ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,1,ПолеТабличногоДокументаМакет.ВысотаТаблицы,1).Расшифровка = СтруктураРасшифровки;
		
	Иначе	
		
		Если СтрокаВыборки.Строки.Количество() = 0 Тогда
			ПолеТабличногоДокументаМакет.Вывести(ОбластьШаблонСтороки);
		Иначе
			ПолеТабличногоДокументаМакет.Вывести(ОбластьШаблонСторокиИтог);
		КонецЕсли;	
		
		
		//Выводим колонки реквизитов строки
		ВывестиРеквизитыСтрок(СтрокаВыборки);
		
		НачальныйИндексКолонокПоказателей = РеквизитыСтрок.Количество()+?(РеквизитыПоказателей.Количество()>0,1,0)+1;
		
		Для Каждого СтрКолонка Из ТаблицаКолонокВход Цикл
			
			тПоказатель = РезультатПоказатели.НайтиСтроки(Новый Структура("Строка,Колонка",СтрокаВыборки.Строка,СтрКолонка.Ссылка));
			Если тПоказатель.Количество() = 0 Тогда
				
				ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей,ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей).Расшифровка = Неопределено;	
			Иначе	
				
				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("Показатель",тПоказатель[0].Ссылка);
				
				ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей,ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей).Текст 		= "■";
				ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей,ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей).Расшифровка = СтруктураРасшифровки;
				
			КонецЕсли;	
			
			НачальныйИндексКолонокПоказателей = НачальныйИндексКолонокПоказателей+1;
			
		КонецЦикла;	
		
		//Выводим свойста показателей если выбрали
		
		НачальныйИндексКолонокПоказателей = РеквизитыСтрок.Количество()+?(РеквизитыПоказателей.Количество()>0,1,0);
		
		Для Каждого СтрСвойство Из РеквизитыПоказателей Цикл
			
			Если СтрокаВыборки.Строки.Количество() = 0 Тогда
				ПолеТабличногоДокументаМакет.Вывести(ОбластьШаблонСтороки);
			Иначе
				ПолеТабличногоДокументаМакет.Вывести(ОбластьШаблонСторокиИтог);
			КонецЕсли;	
			
			тЯчейка = ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей,ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей);
			тЯчейка.Текст 		= СтрСвойство.Значение;	
			тЯчейка.Шрифт 			= Новый Шрифт(тЯчейка.Шрифт,,8,Ложь);
			тЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;		
			
			
			НачальныйИндексКолонокПоказателей_ = НачальныйИндексКолонокПоказателей+1;
			
			Для Каждого СтрКолонка Из ТаблицаКолонокВход Цикл
				
				тПоказатель = РезультатПоказатели.НайтиСтроки(Новый Структура("Строка,Колонка",СтрокаВыборки.Строка,СтрКолонка.Ссылка));
				Если тПоказатель.Количество() = 0 Тогда
					ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей_,ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей_).Расшифровка = Неопределено;	
				Иначе		
					тЯчейка                 = ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей_,ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей_);
					тЯчейка.Шрифт 			= Новый Шрифт(тЯчейка.Шрифт,,8,Ложь);	
					тЯчейка.Текст 			= тПоказатель[0][СтрСвойство.Значение];					
				КонецЕсли;	
				
				НачальныйИндексКолонокПоказателей_ = НачальныйИндексКолонокПоказателей_+1;
				
			КонецЦикла;	
	
		КонецЦикла;	
		
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыиФункцииРаботыВРежимеАналитик

&НаКлиенте
Процедура СкопироватьАналитику(Команда)
	
	Для Каждого ВыдОбласть Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл	
		Если  ВыдОбласть.Верх =0 Тогда	
			Верх  = 1;
			Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	 
		ИначеЕсли  ВыдОбласть.Лево =0 Тогда	 	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = 1;
			Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;	
		Иначе	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	
		КонецЕсли;	
		
		Для ИндС = Верх По Низ Цикл
			Для ИндК = Лево По Право Цикл
				ТекОбл = ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);
				Если ТипЗнч(ТекОбл.Расшифровка) = Тип("Структура") И ТекОбл.Расшифровка.Свойство("ГруппаРаскрытия") И 
					НЕ (ТекОбл.Расшифровка.Свойство("АналитикаВО") ИЛИ ТекОбл.Расшифровка.Свойство("Строка")) Тогда
					
					СнятьВыделениеОбласти();
					
					ОбластьДляВыделенияЛево = ТекОбл.Лево;
					ОбластьДляВыделенияВерх = ТекОбл.Верх;
					
					ВыделитьОбласть();
					Элементы.ВставитьАналитику.Доступность = Истина;
					ДоступностьВставкиАналитики = Истина;
					
					Прервать;
					
				КонецЕсли;	  				
			КонецЦикла;	
		КонецЦикла;			
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьАналитику(Команда)
	
	ВыделенныеЯчейки = Новый Массив;
	
	Для Каждого ВыдОбласть Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл	
		Если  ВыдОбласть.Верх =0 Тогда	
			Верх  = 1;
			Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	 
		ИначеЕсли  ВыдОбласть.Лево =0 Тогда	 	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = 1;
			Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;	
		Иначе	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	
		КонецЕсли;	
		
		Для ИндС = Верх По Низ Цикл
			Для ИндК = Лево По Право Цикл
				ТекОбл = ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);
				
				ВыделенныеЯчейки.Добавить(ТекОбл.Имя);
				
			КонецЦикла;	
		КонецЦикла;			
	КонецЦикла;
	
	ВставитьАналитикиСервер(ВыделенныеЯчейки);
	
	СнятьВыделениеОбласти();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьОбласть()
	
	
	ТекВыделеннаяОбласть = ПолеТабличногоДокументаМакет.Область(ОбластьДляВыделенияВерх,ОбластьДляВыделенияЛево,ОбластьДляВыделенияВерх,ОбластьДляВыделенияЛево);
	
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.БольшойПунктир,3);
	
	ТекВыделеннаяОбласть.Обвести(Линия,
	Линия,
	Линия,
	Линия);
	
	ТекВыделеннаяОбласть.ЦветРамки	=	Новый Цвет(0, 0, 0);	
	
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделениеОбласти()
	
	Если ОбластьДляВыделенияЛево>0 Тогда
		
		ТекВыделеннаяОбласть = ПолеТабличногоДокументаМакет.Область(ОбластьДляВыделенияВерх,ОбластьДляВыделенияЛево,ОбластьДляВыделенияВерх,ОбластьДляВыделенияЛево);
		
		Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		
		ТекВыделеннаяОбласть.Обвести(Линия,
		Линия,
		Линия,
		Линия);
		
		ТекВыделеннаяОбласть.ЦветРамки	=	Новый Цвет(230, 230, 250);	
		
		ОбластьДляВыделенияЛево = 0;
		ОбластьДляВыделенияВерх = 0;
		
		Элементы.ВставитьАналитику.Доступность = Ложь;
		ДоступностьВставкиАналитики = Ложь;
		
		Элементы.ВставитьФормулу.Доступность = Ложь;
		ДоступностьВставкиФормулы = Ложь;  
				
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьаАналитику(Команда)
	
	ВыборАналитикиЗавершение(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка"), Неопределено)
	
КонецПроцедуры

&НаКлиенте
Процедура КолонкаОтборПриИзменении(Элемент)
	
	НастройкиИзменены = Истина;
	ЗаполнитьДеревоСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьАналитикуСоСмещениемВниз(Команда)
	
	Если ТипЗнч(ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка) = Тип("Структура") И ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка.Свойство("ГруппаРаскрытия") Тогда
		
		КоординатаНачалаКопирования = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Верх+1;
		
		СтрокаКолонка               =  ПолеТабличногоДокументаМакет.ТекущаяОбласть.Лево;
		
		Если ПолеТабличногоДокументаМакет.ТекущаяОбласть.верх = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Низ Тогда
			КоординатаОкончанияКопирования = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
		Иначе	
			КоординатаОкончанияКопирования = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Низ;
		КонецЕсли;	
		
		ТекущееЗначение  = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка.ГруппаРаскрытия;
		
		СкопироватьАналитикуВниз(ТекущееЗначение,КоординатаНачалаКопирования,КоординатаОкончанияКопирования,СтрокаКолонка);
			
	Иначе	
		Возврат;
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура ВставитьАналитикиСервер(ВыделенныеЯчейки)
	
	
	Для Каждого ВыдОбластьПоказателя Из ВыделенныеЯчейки Цикл
		
		тОбласть 			= ПолеТабличногоДокументаМакет.Область(ВыдОбластьПоказателя);
		тОбластьСтрока      = ПолеТабличногоДокументаМакет.Область(тОбласть.Верх,1,тОбласть.Верх,1);
		тОбластьКолонка     = ПолеТабличногоДокументаМакет.Область(1,тОбласть.Лево,1,тОбласть.Лево);
		
		тСтрока 		= Неопределено;
		тКолонка 		= Неопределено;
		
		
		Если ТипЗнч(тОбласть.Расшифровка) = Тип("Структура") Тогда
			Если  тОбласть.Расшифровка.Свойство("АналитикаВО") Тогда	
				Продолжить;	
			КонецЕсли;
			Если  тОбласть.Расшифровка.Свойство("АналитикаБюджета") И тОбласть.Расшифровка.АналитикаБюджета  Тогда	
				Продолжить;	
			КонецЕсли;
		КонецЕсли;	
	
		
		Если ЗначениеЗаполнено(тОбластьСтрока.Расшифровка) И тОбластьСтрока.Расшифровка.Свойство("Строка") Тогда	
			тСтрока = тОбластьСтрока.Расшифровка.Строка;	
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(тОбластьКолонка.Расшифровка) И тОбластьКолонка.Расшифровка.Свойство("Аналитика") Тогда	
			тКолонка = тОбластьКолонка.Расшифровка.Аналитика;	
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(тСтрока) И ЗначениеЗаполнено(тКолонка) Тогда
			
			ИндексСтроки 	= тОбласть.Верх;
			ИндексКолонки 	= тОбласть.Лево;
			ТекущееЗначение = ПолеТабличногоДокументаМакет.Область(ОбластьДляВыделенияВерх,ОбластьДляВыделенияЛево,ОбластьДляВыделенияВерх,ОбластьДляВыделенияЛево).Расшифровка.ГруппаРаскрытия; 
			
			СписокАналитикИтоговый = Новый СписокЗначений;
			
			Если ПреобразоватьСтрокуАналитик(ИндексСтроки,ИндексКолонки,ТекущееЗначение,СписокАналитикИтоговый) Тогда
				
				ЗаписатьГруппуРаскрытия(ИндексСтроки,СписокАналитикИтоговый);
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	ЗаполнитьДеревоСтрок();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьТаблицыПоДеревуРекурсивноАналитики(тДеревоВыбранныхСтрок,СтруктураШаблонов,тАналитикиПоказателей,РезультатПоказатели)
	
	Для Каждого Стр Из тДеревоВыбранныхСтрок.Строки Цикл	
		Если Не Стр.Строка =  НСтр("ru = 'Выбранные строки'") Тогда			
			
			ВывестиСтрокуВТабличныйДокументАналитики(Стр,СтруктураШаблонов,тАналитикиПоказателей,РезультатПоказатели);
			
			Если Стр.Уровень()>0 Тогда 
				тСтрокаКэш = ТгруппыСтрок.НайтиСтроки(Новый Структура("СтрокаКод",Стр.СтрокаКод));
				Если тСтрокаКэш.Количество() = 1 И тСтрокаКэш[0].Свернута Тогда
					ПолеТабличногоДокументаМакет.НачатьГруппуСтрок(Стр.СтрокаКод,Ложь);
				Иначе
					ПолеТабличногоДокументаМакет.НачатьГруппуСтрок(Стр.СтрокаКод);
				КонецЕсли;	 
			КонецЕсли;
			
		КонецЕсли;					
		
		ПодготовитьТаблицыПоДеревуРекурсивноАналитики(Стр,СтруктураШаблонов,тАналитикиПоказателей,РезультатПоказатели);		
		Если Стр.Уровень()>0 Тогда 
			Попытка
				ПолеТабличногоДокументаМакет.ЗакончитьГруппуСтрок() 
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтрокуВТабличныйДокументАналитики(СтрокаВыборки = Неопределено,СтруктураШаблонов,тАналитикиПоказателей,РезультатПоказатели = Неопределено);
	
	
	ПолеТабличногоДокументаМакетШаблонСтрокиИтог 	= СтруктураШаблонов.ПолеТабличногоДокументаМакетШаблонСтрокиИтог;
	ОбластьШаблонСторокиИтог                     	= ПолеТабличногоДокументаМакетШаблонСтрокиИтог.ПолучитьОбласть("ШаблонВыводаСтроки");
	
	ПолеТабличногоДокументаМакетШаблонСтроки	 	= СтруктураШаблонов.ПолеТабличногоДокументаМакетШаблонСтроки;
	ОбластьШаблонСтороки	                     	= ПолеТабличногоДокументаМакетШаблонСтроки.ПолучитьОбласть("ШаблонВыводаСтроки");
	
	
	Если СтрокаВыборки = Неопределено Тогда //Выводим служебную группирующую строку
		
		СтруктураРасшифровки = Новый Структура();
		СтруктураРасшифровки.Вставить("Строка", НСтр("ru = 'Выбранные строки'"));	
		
		ПолеТабличногоДокументаМакет.Вывести(ОбластьШаблонСторокиИтог);
		ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,1,ПолеТабличногоДокументаМакет.ВысотаТаблицы,1).Расшифровка = СтруктураРасшифровки;
		
	Иначе	
		
		Если СтрокаВыборки.Строки.Количество() = 0 Тогда
			ПолеТабличногоДокументаМакет.Вывести(ОбластьШаблонСтороки);
		Иначе
			ПолеТабличногоДокументаМакет.Вывести(ОбластьШаблонСторокиИтог);
		КонецЕсли;	

		
		//Выводим колонки реквизитов строки
		ВывестиРеквизитыСтрок(СтрокаВыборки);

		НачальныйИндексКолонокПоказателей = РеквизитыСтрок.Количество()+1;
		
		АналитикаБюджета=  (ЗначениеЗаполнено(СтрокаВыборки.СчетБД) 
		ИЛИ ЗначениеЗаполнено(СтрокаВыборки.СтатьяДвиженияДенежныхСредств) 
		ИЛИ ЗначениеЗаполнено(СтрокаВыборки.СтатьяДоходовИРасходов) 
		ИЛИ ЗначениеЗаполнено(СтрокаВыборки.СтатьяДвиженияРесурсов));

		
		Если Не ЗначениеЗаполнено(КолонкаОтбор) Тогда //Режим вывода аналитик по группе раскрытия строки	
			
			Для ИндКолонки = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл 
				
				Если ЗначениеЗаполнено(СтрокаВыборки["ВидОтчетаВидАналитики"+ИндКолонки]) Тогда  //Выводим аналитику вида отчета
					
					СтруктураРасшифровки = Новый Структура;
					СтруктураРасшифровки.Вставить("ГруппаРаскрытия",СтрокаВыборки["ВидОтчетаВидАналитики"+ИндКолонки]);
					СтруктураРасшифровки.Вставить("АналитикаВО",Истина);
					СтруктураРасшифровки.Вставить("АналитикаБюджета",АналитикаБюджета);

					тЯчейка = ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей
					,ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей);
					
					тЯчейка.Текст 			= СтрокаВыборки["ВидОтчетаВидАналитики"+ИндКолонки];
					тЯчейка.Шрифт 			= Новый Шрифт(тЯчейка.Шрифт,,,Ложь);
					тЯчейка.ЦветТекста      = Новый Цвет(160,160,160);
					тЯчейка.Расшифровка 	= СтруктураРасшифровки;
					тЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
					//Выводим аналитику группы раскрытия
				Иначе	
					Если  ЗначениеЗаполнено(СтрокаВыборки.СтрокаГруппаРаскрытия) Тогда	
						СтруктураРасшифровки = Новый Структура;
						СтруктураРасшифровки.Вставить("ГруппаРаскрытия",СтрокаВыборки["ГруппаРаскрытияВидАналитики"+ИндКолонки]);
						СтруктураРасшифровки.Вставить("АналитикаБюджета",АналитикаБюджета);
						
						тЯчейка = ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей
						,ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей);
						
						тЯчейка.Текст 			= СтрокаВыборки["ГруппаРаскрытияВидАналитики"+ИндКолонки];
						тЯчейка.Шрифт 			= Новый Шрифт(тЯчейка.Шрифт,,,Ложь);
						тЯчейка.Расшифровка 	= СтруктураРасшифровки;
						тЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
						Если СтруктураРасшифровки.АналитикаБюджета Тогда
							тЯчейка.ЦветТекста      = Новый Цвет(160,160,160);
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;
				
				НачальныйИндексКолонокПоказателей = НачальныйИндексКолонокПоказателей+1;
				
			КонецЦикла;	  	
			
			//Выводим признак раскрытия по валютам
			Если ЗначениеЗаполнено(СтрокаВыборки["АналитикаВалюта"]) Тогда
				
				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("ГруппаРаскрытия",СтрокаВыборки["АналитикаВалюта"]);
				СтруктураРасшифровки.Вставить("АналитикаВалюта",Истина);
				СтруктураРасшифровки.Вставить("АналитикаБюджета",АналитикаБюджета);
				
				тЯчейка = ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей
				,ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей);
				
				тЯчейка.Текст 			= "■";
				тЯчейка.Расшифровка 	= СтруктураРасшифровки;
				тЯчейка.Шрифт 			= Новый Шрифт(тЯчейка.Шрифт,,10,Истина);
				тЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				
			Иначе	
				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("ГруппаРаскрытия",ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка());
				СтруктураРасшифровки.Вставить("АналитикаВалюта",Ложь);
				СтруктураРасшифровки.Вставить("АналитикаБюджета",АналитикаБюджета);
				
				тЯчейка = ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей
				,ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей);
				
				тЯчейка.Текст 			= "";
				тЯчейка.Расшифровка 	= СтруктураРасшифровки;
				тЯчейка.Шрифт 			= Новый Шрифт(тЯчейка.Шрифт,,10,Истина);
				тЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				
			КонецЕсли;
			
			НачальныйИндексКолонокПоказателей = НачальныйИндексКолонокПоказателей+1;
			//Выводим допнастройки групп раскрытия 
			Если ЗначениеЗаполнено(СтрокаВыборки["СтрокаГруппаРаскрытия"]) Тогда
				
				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("СтрокаГруппаРаскрытия",СтрокаВыборки["СтрокаГруппаРаскрытия"]);
				
				тЯчейка = ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей
				,ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей);
				
				тЯчейка.Картинка        = БиблиотекаКартинок.НастройкаЗаполненияСтроки;
				тЯчейка.ГоризонтальноеПоложениеКартинки = ГоризонтальноеПоложение.Центр;
				тЯчейка.Расшифровка 	= СтруктураРасшифровки;
				тЯчейка.Шрифт 			= Новый Шрифт(тЯчейка.Шрифт,,10,Истина);
				тЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				
			КонецЕсли;
			
		Иначе	
			
			тПоказатель = тАналитикиПоказателей.НайтиСтроки(Новый Структура("Строка,Колонка",СтрокаВыборки.Строка,КолонкаОтбор));
			
			Если тПоказатель.Количество() = 1 Тогда
				
				Для ИндКолонки = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл 
					
					Если ЗначениеЗаполнено(СтрокаВыборки["ВидОтчетаВидАналитики"+ИндКолонки]) Тогда  //Выводим аналитику вида отчета
						
						СтруктураРасшифровки = Новый Структура;
						СтруктураРасшифровки.Вставить("ГруппаРаскрытия",СтрокаВыборки["ВидОтчетаВидАналитики"+ИндКолонки]);
						СтруктураРасшифровки.Вставить("АналитикаВО",Истина);
						СтруктураРасшифровки.Вставить("АналитикаБюджета",АналитикаБюджета);
						
						тЯчейка = ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей
						,ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей);
						
						тЯчейка.Текст 			= СтрокаВыборки["ВидОтчетаВидАналитики"+ИндКолонки];
						тЯчейка.Шрифт 			= Новый Шрифт(тЯчейка.Шрифт,,,Ложь);
						тЯчейка.ЦветТекста      = Новый Цвет(160,160,160);
						тЯчейка.Расшифровка 	= СтруктураРасшифровки;
						тЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
						//Выводим аналитику группы раскрытия
					Иначе	
						Если  ЗначениеЗаполнено(тПоказатель[0].ГруппаРаскрытия) Тогда	
							СтруктураРасшифровки = Новый Структура;
							СтруктураРасшифровки.Вставить("ГруппаРаскрытия",тПоказатель[0]["ГруппаРаскрытияВидАналитики"+ИндКолонки]);
							СтруктураРасшифровки.Вставить("АналитикаБюджета",АналитикаБюджета);
							
							тЯчейка = ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей
							,ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей);
							
							тЯчейка.Текст 			= тПоказатель[0]["ГруппаРаскрытияВидАналитики"+ИндКолонки];
							тЯчейка.Шрифт 			= Новый Шрифт(тЯчейка.Шрифт,,,Ложь);
							тЯчейка.Расшифровка 	= СтруктураРасшифровки;
							тЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
							Если СтруктураРасшифровки.АналитикаБюджета Тогда
								 тЯчейка.ЦветТекста      = Новый Цвет(160,160,160);
							КонецЕсли;	
							
							
						КонецЕсли;
					КонецЕсли;
					
					НачальныйИндексКолонокПоказателей = НачальныйИндексКолонокПоказателей+1;
					
				КонецЦикла;	  	
				
				//Выводим признак раскрытия по валютам
				Если ЗначениеЗаполнено(СтрокаВыборки["АналитикаВалюта"]) Тогда
					
					СтруктураРасшифровки = Новый Структура;
					СтруктураРасшифровки.Вставить("ГруппаРаскрытия",тПоказатель[0]["АналитикаВалюта"]);
					СтруктураРасшифровки.Вставить("АналитикаВалюта",Истина);
					
					тЯчейка = ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей
					,ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей);
					
					тЯчейка.Текст 			= "■";
					тЯчейка.Расшифровка 	= СтруктураРасшифровки;
					тЯчейка.Шрифт 			= Новый Шрифт(тЯчейка.Шрифт,,10,Истина);
					тЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					
				Иначе	
					СтруктураРасшифровки = Новый Структура;
					СтруктураРасшифровки.Вставить("ГруппаРаскрытия",ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка());
					СтруктураРасшифровки.Вставить("АналитикаВалюта",Ложь);
					
					тЯчейка = ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей
					,ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей);
					
					тЯчейка.Текст 			= "";
					тЯчейка.Расшифровка 	= СтруктураРасшифровки;
					тЯчейка.Шрифт 			= Новый Шрифт(тЯчейка.Шрифт,,10,Истина);
					тЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					
				КонецЕсли;
				
				НачальныйИндексКолонокПоказателей = НачальныйИндексКолонокПоказателей+1;

				//Выводим допнастройки групп раскрытия 
				Если ЗначениеЗаполнено(тПоказатель[0]["ГруппаРаскрытия"]) Тогда
					
					СтруктураРасшифровки = Новый Структура;
					СтруктураРасшифровки.Вставить("СтрокаГруппаРаскрытия",тПоказатель[0]["ГруппаРаскрытия"]);
					
					тЯчейка = ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей
					,ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей);
					
					тЯчейка.Картинка        = БиблиотекаКартинок.НастройкаЗаполненияСтроки;
					тЯчейка.ГоризонтальноеПоложениеКартинки = ГоризонтальноеПоложение.Центр;
					тЯчейка.Расшифровка 	= СтруктураРасшифровки;
					тЯчейка.Шрифт 			= Новый Шрифт(тЯчейка.Шрифт,,10,Истина);
					тЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					
				КонецЕсли;
				
				
				
			Иначе	
				
				Для ИндКолонки = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл 
					тЯчейка = ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей
					,ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей);
					
					тЯчейка.Текст 		= "X";
					тЯчейка.ЦветФона 	= Новый Цвет(245,245,245);
					тЯчейка.ЦветТекста 	= Новый Цвет(0,0,0);
					тЯчейка.Шрифт 		= Новый Шрифт(тЯчейка.Шрифт,,,Ложь);
					тЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					
					НачальныйИндексКолонокПоказателей = НачальныйИндексКолонокПоказателей+1;

					
				КонецЦикла;	
				
				тЯчейка = ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей
				,ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей);
				
				тЯчейка.Текст 		= "X";
				тЯчейка.ЦветФона 	= Новый Цвет(245,245,245);
				тЯчейка.ЦветТекста 	= Новый Цвет(0,0,0);
				тЯчейка.Шрифт 		= Новый Шрифт(тЯчейка.Шрифт,,,Ложь);
				тЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;

				
				НачальныйИндексКолонокПоказателей = НачальныйИндексКолонокПоказателей+1;

				
				тЯчейка = ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей
				,ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей);
				
				тЯчейка.Текст 		= "X";
				тЯчейка.ЦветФона 	= Новый Цвет(245,245,245);
				тЯчейка.ЦветТекста 	= Новый Цвет(0,0,0);
				тЯчейка.Шрифт 		= Новый Шрифт(тЯчейка.Шрифт,,,Ложь);
				тЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
							
			КонецЕсли;	
				
		КонецЕсли;			
				
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаСервере
Функция ПреобразоватьСтрокуАналитик(ИндексСтроки,ИндексКолонки,Результат,СписокАналитикИтоговый)
	
	тСтрока = ПолеТабличногоДокументаМакет.Область(ИндексСтроки,1,ИндексСтроки,1);
	
	Если Не ТипЗнч(тСтрока.Расшифровка)  = Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Для Инд = 1 По ПолеТабличногоДокументаМакет.ШиринаТаблицы Цикл
		
		тКолонка =  ПолеТабличногоДокументаМакет.Область(1,Инд,1,Инд);
		
		
		Если ТипЗнч(тКолонка.Расшифровка) = Тип("Структура") И тКолонка.Расшифровка.Свойство("Аналитика") Тогда
			
			Если ИндексКолонки =  Инд Тогда
				тАналитика = Результат;
			Иначе
				Если ТипЗнч(ПолеТабличногоДокументаМакет.Область(ИндексСтроки,Инд,ИндексСтроки,Инд).Расшифровка) = Тип("Структура") Тогда
					тАналитика = ПолеТабличногоДокументаМакет.Область(ИндексСтроки,Инд,ИндексСтроки,Инд).Расшифровка.ГруппаРаскрытия;
				Иначе
					тАналитика = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;	
			
			Если НЕ тКолонка.Расшифровка.КолонкаКод = "АналитикаВалюта" И НЕ СписокАналитикИтоговый.НайтиПоЗначению(тАналитика) = Неопределено Тогда
				
				СтрокаШаблона = Нстр("ru = 'Аналитика   %1 уже присутствует в строке  %2. Действие отменено.'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда		
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, тАналитика, тСтрока.Текст));
				КонецЕсли;
				
				Возврат Ложь;
				
			КонецЕсли;
			
			ФлАналитикиВО = Ложь;
			Для ИндАналитики = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				Если  тСтрока.Расшифровка["ВидОтчетаВидАналитики"+ИндАналитики] = тАналитика  Тогда	
					ФлАналитикиВО = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			Если ЗначениеЗаполнено(тАналитика) И НЕ ФлАналитикиВО  Тогда
				Если тКолонка.Расшифровка.КолонкаКод = "АналитикаВалюта" Тогда
					СписокАналитикИтоговый.Добавить("АналитикаВалюта","АналитикаВалюта");
				Иначе	
					СписокАналитикИтоговый.Добавить(тАналитика);
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;	   
		
	КонецЦикла;	   
	
	Возврат Истина;
	
	
КонецФункции	

&НаСервере
Процедура ЗаписатьГруппуРаскрытия(ИндексСтроки,СписокАналитикИтоговый)
	
	Если ЗначениеЗаполнено(КолонкаОтбор) Тогда
		
		тСтрока = ПолеТабличногоДокументаМакет.Область(ИндексСтроки,1,ИндексСтроки,1);
		Если Не ТипЗнч(тСтрока.Расшифровка)  = Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаОтчета 	=  ЗначениеЗаполнено(тСтрока.Расшифровка.Строка);
		КолонкаОтчета   =  КолонкаОтбор;
		
		ИзменитьГруппуРаскрытияПоВыбраннойКолонке(тСтрока,СписокАналитикИтоговый);
		
	Иначе	
		тСтрока = ПолеТабличногоДокументаМакет.Область(ИндексСтроки,1,ИндексСтроки,1);
		
		Если Не ТипЗнч(тСтрока.Расшифровка) = Тип("Структура") Тогда
			Возврат;
		КонецЕсли;		
		
		Если ЗначениеЗаполнено(тСтрока.Расшифровка.ГруппаРаскрытия)  Тогда
			
			// Смотрим -  используется  ли эта же группа еще где-нибудь в структуре отчета.
			// Если нет - то смело меняем ее свойства.
			// Если да -  то лучше создать новую.
			Если ГруппаРаскрытияИспользуется(тСтрока.Расшифровка.ГруппаРаскрытия,тСтрока.Расшифровка.Строка) Тогда 	
				СоздатьНовуюГруппуРаскрытия(тСтрока,СписокАналитикИтоговый);
			Иначе	 
				ИзменитьГруппуРаскрытия(тСтрока,СписокАналитикИтоговый);
			КонецЕсли;
		Иначе				
			СоздатьНовуюГруппуРаскрытия(тСтрока,СписокАналитикИтоговый)		
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьГруппуРаскрытияПоВыбраннойКолонке(тСтрока,СписокАналитикИтоговый)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Ссылка,
	|	ПоказателиОтчетов.ГруппаРаскрытия КАК ГруппаРаскрытия
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.ПометкаУдаления = ЛОЖЬ
	|	И ПоказателиОтчетов.Колонка = &Колонка
	|	И ПоказателиОтчетов.Строка = &Строка";
	
	Запрос.УстановитьПараметр("Колонка",КолонкаОтбор);
	Запрос.УстановитьПараметр("Строка",тСтрока.Расшифровка.Строка);
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ГруппаРаскрытия) И НЕ Выборка.ГруппаРаскрытия = тСтрока.Расшифровка.ГруппаРаскрытия Тогда
			Если ГруппаРаскрытияИспользуется(Выборка.ГруппаРаскрытия,Выборка.Ссылка) Тогда; 	
				СоздатьНовуюГруппуРаскрытия(тСтрока,СписокАналитикИтоговый,Выборка.Ссылка);
			Иначе	 
				ИзменитьГруппуРаскрытия(тСтрока,СписокАналитикИтоговый,Выборка.Ссылка);
			КонецЕсли;
		Иначе				
			СоздатьНовуюГруппуРаскрытия(тСтрока,СписокАналитикИтоговый,Выборка.Ссылка);		
		КонецЕсли;	
		
	КонецЦикла;
	
	
КонецПроцедуры	

&НаСервере
Функция ГруппаРаскрытияИспользуется(тГруппа,тСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтрокиОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Ссылка <> &Ссылка
	|	И СтрокиОтчетов.ГруппаРаскрытия = &ГруппаРаскрытия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Ссылка <> &Ссылка
	|	И ПоказателиОтчетов.ГруппаРаскрытия = &ГруппаРаскрытия";
	
	Запрос.УстановитьПараметр("ГруппаРаскрытия",тГруппа);
	Запрос.УстановитьПараметр("Ссылка",тСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Возврат Ложь;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции	

&НаСервере
Процедура СоздатьНовуюГруппуРаскрытия(тСтрока,СписокАналитикИтоговый,Показатель = Неопределено)
	
	СправочникОбъект=Справочники.ГруппыРаскрытия.СоздатьЭлемент();
	СправочникОбъект.Владелец=ВидОтчета;
	Если Показатель = Неопределено Тогда
		СправочникОбъект.Наименование="ГР_"+тСтрока.Расшифровка.СтрокаНаименование;
		ВладелецОбъект   = тСтрока.Расшифровка.Строка.ПолучитьОбъект();
	Иначе
		СправочникОбъект.Наименование="ГР_"+Строка(Показатель);
		ВладелецОбъект   = Показатель.ПолучитьОбъект();
	КонецЕсли;
	
	Если СписокАналитикИтоговый.Количество() = 0 Тогда
		ВладелецОбъект.ГруппаРаскрытия = Справочники.ГруппыРаскрытия.ПустаяСсылка();
		Попытка	
			ВладелецОбъект.Записать();				
		Исключение
			
			СтрокаШаблона = Нстр("ru = 'Не удалось удалить группу раскрытия для %1: %2'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда					
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВладелецОбъект.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),,, СтатусСообщения.Внимание);
			КонецЕсли;
			
		КонецПопытки;
		
		Возврат;
	КонецЕсли;	
 
	ПроектКода=ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(СправочникОбъект.Наименование,,"ВидыОтчетов");
	
	СправочникОбъект.Код=ОбщегоНазначенияУХ.ПолучитьВозможныйКодСправочника(ПроектКода,СправочникОбъект.Метаданные().ДлинаКода,"ГруппыРаскрытия",ВидОтчета);
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ЗначениеЗаполнено(тСтрока.Расшифровка["ВидОтчетаВидАналитики"+Инд]) Тогда
			
		Иначе	
			Если СписокАналитикИтоговый.Количество()>0 Тогда				
				Если СписокАналитикИтоговый[0].Значение = "АналитикаВалюта" Тогда
					СправочникОбъект.ВидАналитикиВалютаДт = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты;
					СправочникОбъект.Валютная = Истина;
					СписокАналитикИтоговый.Удалить(0);
				Иначе	
					СправочникОбъект["ВидАналитики"+Инд] = СписокАналитикИтоговый[0].Значение;
					СписокАналитикИтоговый.Удалить(0);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
	
	Если СписокАналитикИтоговый.Количество()>0 Тогда
		Если СписокАналитикИтоговый[0].Значение = "АналитикаВалюта" Тогда
			СправочникОбъект.ВидАналитикиВалютаДт = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты;
			СправочникОбъект.Валютная = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Показатель = Неопределено Тогда
		
		тОбъект = тСтрока.Расшифровка.Строка.ПолучитьОбъект();
		
		Попытка
			тОбъект.ДополнительныеСвойства.Вставить("ИзмененаАналитикаВалюта", Истина);
			СправочникОбъект.Записать();				
			тОбъект.ГруппаРаскрытия = СправочникОбъект.Ссылка;
			тОбъект.Записать();
		Исключение
			
			СтрокаШаблона = Нстр("ru = 'Не удалось создать группу раскрытия для строки %1: %2'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда					
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, тСтрока.Расшифровка.СтрокаНаименование, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),,, СтатусСообщения.Внимание);
			КонецЕсли;
			
		КонецПопытки;
		
	Иначе
		
		тОбъект = Показатель.ПолучитьОбъект();
		
		Попытка	
			СправочникОбъект.Записать();				
			тОбъект.ГруппаРаскрытия = СправочникОбъект.Ссылка;
			тОбъект.Записать();
		Исключение
			
			СтрокаШаблона = Нстр("ru = 'Не удалось создать группу раскрытия для показателя %1: %2'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда					
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, тСтрока.Расшифровка.СтрокаНаименование, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),,, СтатусСообщения.Внимание);
			КонецЕсли;
			
		КонецПопытки;
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьГруппуРаскрытия(тСтрока,СписокАналитикИтоговый,Показатель = Неопределено)
	
	Если Показатель = Неопределено Тогда
		СправочникОбъект = тСтрока.Расшифровка.ГруппаРаскрытия.ПолучитьОбъект();
		ВладелецОбъект   = тСтрока.Расшифровка.Строка.ПолучитьОбъект();
	Иначе
		СправочникОбъект = Показатель.ГруппаРаскрытия.ПолучитьОбъект();
		ВладелецОбъект   = Показатель.ПолучитьОбъект();
	КонецЕсли;
	
	СправочникОбъект.ВидАналитикиВалютаДт = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка();
	СправочникОбъект.Валютная = Ложь;
	
	Если СписокАналитикИтоговый.Количество() = 0 Тогда
		// Группа раскрытия без аналитик, очищаем группу раскрытия у владельца
		ВладелецОбъект.ГруппаРаскрытия = Справочники.ГруппыРаскрытия.ПустаяСсылка();
		Попытка	
			ВладелецОбъект.Записать();				
		Исключение			
			СтрокаШаблона = Нстр("ru = 'Не удалось удалить группу раскрытия для %1: %2'");			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда					
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВладелецОбъект.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),,, СтатусСообщения.Внимание);
			КонецЕсли; 			
		КонецПопытки;		
		Возврат;
	КонецЕсли;	
	
	// Вычищаем аналитики
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		СправочникОбъект["ВидАналитики"+Инд] = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка();
	КонецЦикла;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ЗначениеЗаполнено(тСтрока.Расшифровка["ВидОтчетаВидАналитики"+Инд]) Тогда
			СправочникОбъект["ВидАналитики"+Инд] = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка();
		Иначе	
			Если СписокАналитикИтоговый.Количество()>0 Тогда
				Если СписокАналитикИтоговый[0].Значение = "АналитикаВалюта" Тогда
					СправочникОбъект.ВидАналитикиВалютаДт = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты;
					СправочникОбъект.Валютная = Истина;
					СписокАналитикИтоговый.Удалить(0);
				Иначе	
					СправочникОбъект["ВидАналитики"+Инд] = СписокАналитикИтоговый[0].Значение;
					СписокАналитикИтоговый.Удалить(0);
				КонецЕсли;
			Иначе	
				СправочникОбъект["ВидАналитики"+Инд] = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
	Если СписокАналитикИтоговый.Количество()>0 Тогда
		Если СписокАналитикИтоговый[0].Значение = "АналитикаВалюта" Тогда
			СправочникОбъект.ВидАналитикиВалютаДт = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты;
			СправочникОбъект.Валютная = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	Попытка	
		СправочникОбъект.Записать();				
	Исключение
		
		СтрокаШаблона = Нстр("ru = 'Не удалось записать группу раскрытия для строки %1: %2'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда					
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, тСтрока.Расшифровка.СтрокаНаименование, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),,, СтатусСообщения.Внимание);
		КонецЕсли;
		
	КонецПопытки;	
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьаналитикуВниз(ТекущееЗначение,КоординатаНачалаКопирования,КоординатаОкончанияКопирования,СтрокаКолонка)
	
	Для ИндСтроки = КоординатаНачалаКопирования По КоординатаОкончанияКопирования Цикл
		
		тОбласть =  ПолеТабличногоДокументаМакет.Область(ИндСтроки,СтрокаКолонка,ИндСтроки,СтрокаКолонка);
				
		Если ТипЗнч(тОбласть.Расшифровка) = Тип("Структура") Тогда
			Если  тОбласть.Расшифровка.Свойство("АналитикаВО") Тогда	
				Продолжить;	
			КонецЕсли;
			Если  тОбласть.Расшифровка.Свойство("АналитикаБюджета") И тОбласть.Расшифровка.АналитикаБюджета  Тогда	
				Продолжить;	
			КонецЕсли;
		КонецЕсли;	
	
				
		//Если ТипЗнч(тОбласть.Расшифровка) = Тип("Структура") И тОбласть.Расшифровка.Свойство("ГруппаРаскрытия") Тогда
			
			СписокАналитикИтоговый = Новый СписокЗначений;
			
			ИндексСтроки 	= ИндСтроки;
			ИндексКолонки 	= СтрокаКолонка;

			Если ПреобразоватьСтрокуАналитик(ИндексСтроки,ИндексКолонки,ТекущееЗначение,СписокАналитикИтоговый) Тогда
				
				ЗаписатьГруппуРаскрытия(ИндексСтроки,СписокАналитикИтоговый);
				
			КонецЕсли;	
			
		//КонецЕсли;	
		
				
	КонецЦикла;	
	
	ЗаполнитьДеревоСтрок();

	
КонецПроцедуры	


#КонецОбласти

#Область ПроцедурыиФункцииРаботыВРежимеФормул

&НаКлиенте
Процедура РазвернутьПанельИтоговойФормулы(ДанныеПоказателя=Неопределено)
	
	РежимРедактированияФормулы = Истина;
	УстановитьВидимостьЭлементов();
	
	СтрокаПоказатель = Новый ФорматированнаяСтрока(Строка(ДанныеПоказателя.Ссылка), Новый Шрифт(, , Истина));	// жирный текст.
	СтрокаПояснение = НСтр("ru = 'Формула расчета показателя '");
	Элементы.НадписьПоказатель.Заголовок = Новый ФорматированнаяСтрока(СтрокаПояснение, СтрокаПоказатель);
	ПроизвольныйКод					= ДанныеПоказателя.ПроизвольныйКод;
	ПотребительРасчета				= ДанныеПоказателя.Ссылка;
	ПересчитыватьПриОткрытии		= ДанныеПоказателя.ПересчитыватьПриОткрытии;
	РедактированиеВозможно			= ДанныеПоказателя.РедактированиеВозможно;
	ПолеТекстовогоДокументаПроцедура.УстановитьТекст(ДанныеПоказателя.Процедура);	
	
	Если Не Элементы.ГруппаФормулы.Видимость Тогда
		
		Элементы.ГруппаФормулы.Видимость=Истина;
		
	КонецЕсли;
	
	Элементы.ГруппаПроизвольныйКод.ПодчиненныеЭлементы.ПроизвольныйКод.Пометка = ПроизвольныйКод;
	Элементы.ГруппаПроизвольныйКод.ПодчиненныеЭлементы.РедактироватьПроцедуру.Видимость = ПроизвольныйКод;
	
КонецПроцедуры // РазвернутьПанельИтоговойФормулы() 

&НаКлиенте
Процедура ПравилоОбработкиПриИзменении(Элемент)
	
	НастройкиИзменены = Истина;
	ЗаполнитьДеревоСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеФормулыОтменить(Команда)
	
	ЗакрытьПанельФормул();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельФормул()
	
	Если ИзмененаФормулаРасчета Тогда
		
		ТекстВопроса = Нстр("ru = 'Текст формулы расчета показателя  был изменен. Записать?'");
		ОтветНаВопрос = Неопределено;
		
		Оповещение = Новый ОписаниеОповещения("ЗакрытьПанельФормулПродолжение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ЗакрытьПанельФормулЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельФормулПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		ЗаписатьПроцедуруРасчета(СформироватьСтруктуруДляЗаписиФормулы());			
	КонецЕсли;    
	
	ЗакрытьПанельФормулЗавершение();
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьСтруктуруДляЗаписиФормулы()
	
	СтруктураДанных=Новый Структура;
	СтруктураДанных.Вставить("ТекстПроцедуры",ПолеТекстовогоДокументаПроцедура.ПолучитьТекст());
	СтруктураДанных.Вставить("ТипЯчейки","Показатель");
	СтруктураДанных.Вставить("ВидФормулы",0);
	СтруктураДанных.Вставить("ИтоговаяЯчейка","");
	СтруктураДанных.Вставить("Владелец",ВидОтчета);
	СтруктураДанных.Вставить("НазначениеРасчетов",ПравилоОбработки);
	СтруктураДанных.Вставить("ПотребительРасчета",ПолеТабличногоДокументаМакет.Область(ОбластьПоказателя).Расшифровка.Показатель);
	СтруктураДанных.Вставить("ПроизвольныйКод",ПроизвольныйКод);
	СтруктураДанных.Вставить("ПересчитыватьПриОткрытии",ПересчитыватьПриОткрытии);
	СтруктураДанных.Вставить("РедактированиеВозможно",	РедактированиеВозможно);
	СтруктураДанных.Вставить("СпособИспользования",ПредопределенноеЗначение("Перечисление.СпособыИспользованияОперандов.ДляФормулРасчета"));
	
	Возврат СтруктураДанных;
	
КонецФункции // СформироватьСтруктуруДляЗаписиФормулы()

&НаКлиенте
Процедура РедактированиеФормулыЗавершить(Команда)
	
	Если ЗаписатьПроцедуруРасчета(СформироватьСтруктуруДляЗаписиФормулы()) Тогда
		
		ЗакрытьПанельФормул();
		
	Иначе
		
		ТекстВопроса = Нстр("ru = 'При записи формулы  обнаружены ошибки. Продолжить редактирование?'");
		ОтветНаВопрос = Неопределено;
		
		Оповещение = Новый ОписаниеОповещения("ЗакрытьПанельФормулПоОшибке", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельФормулПоОшибке(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтветНаВопрос = РезультатВопроса;
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		
		ЗакрытьПанельФормулЗавершение();			
		
	КонецЕсли;    
	
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	
	Если ПроверитьТекстФормулы(СформироватьСтруктуруДляЗаписиФормулы()) Тогда
		
		Сообщить(Нстр("ru = 'Проверка успешно пройдена.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьПроцедуру(Команда)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ТекстПроцедуры",ПолеТекстовогоДокументаПроцедура.ПолучитьТекст());
	СтруктураПараметров.Вставить("ВычисляемыйПоказатель",Истина);
	СтруктураПараметров.Вставить("ИмяПроцедуры","ФормулаВычисления");
	СтруктураПараметров.Вставить("ВидОтчета",ВидОтчета);
	
	ОткрытьФорму("ОбщаяФорма.ФормаРедактированияПроцедур", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТекстВФормулу(ТекстВставки,Сдвиг=0)
	
	ПТД = Элементы.ПолеТекстовогоДокументаПроцедура;	
	
	СтрокаНач=0;
	СтрокаКон=0;
	КолонкаНач=0;
	КолонкаКон=0;
	
	ПТД.ПолучитьГраницыВыделения(СтрокаНач,
	КолонкаНач,
	СтрокаКон,
	КолонкаКон);
	
	
	Если ПустаяСтрока(СокрЛП(ПолеТекстовогоДокументаПроцедура.ПолучитьТекст())) Тогда
		
		ПТД.УстановитьГраницыВыделения(1,1,1,1);
		
	КонецЕсли;
	
	ПТД.ВыделенныйТекст = ТекстВставки;
	
	Если НЕ Сдвиг=0 Тогда
		
		ПТД.ПолучитьГраницыВыделения(СтрокаНач,
		КолонкаНач,
		СтрокаКон,
		КолонкаКон);
		
		ПТД.УстановитьГраницыВыделения(СтрокаНач,КолонкаНач+Сдвиг,СтрокаКон,КолонкаКон+Сдвиг);
		
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	
КонецПроцедуры // ВставитьТекстВФормулу() 

&НаКлиенте
Процедура КнопкаПлюс(Команда)
	
	ВставитьТекстВФормулу(" + ");
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаМинус(Команда)
	
	ВставитьТекстВФормулу(" - ");
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаУмножить(Команда)
	
	ВставитьТекстВФормулу(" * ");
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаРазделить(Команда)
	
	ВставитьТекстВФормулу(" / ");
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСкобки(Команда)
	
	ВставитьТекстВФормулу(" ()",-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаУсловие(Команда)
	
	ВставитьТекстВФормулу(" ?(,,)",-3);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаМеньше(Команда)
	
	ВставитьТекстВФормулу(" < ");
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаРавно(Команда)
	
	ВставитьТекстВФормулу(" = ");
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаБольше(Команда)
	
	ВставитьТекстВФормулу(" > ");
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСумма(Команда)
	
	ТекстФормулы = "";
	
	Для Каждого Элемент Из ПолучитьСписокПоказателей() Цикл
		
		Если ПроизвольныйКод Тогда			
			ТекстФормулы = ТекстФормулы+"Показатели."+СокрЛП(Элемент)+"+";
		Иначе	
			ТекстФормулы = ТекстФормулы+"{"+СокрЛП(Элемент)+"}+";
		КонецЕсли;
		
	КонецЦикла;

	Если НЕ ТекстФормулы = "" Тогда
		
		ТекстФормулы = "("+ЛЕВ(ТекстФормулы,СтрДлина(ТекстФормулы)-1)+")";
		ВставитьТекстВФормулу(ТекстФормулы);
		
	КонецЕсли;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаВставитьСкобки(Команда)
	
	МассивКодовПоказателей=ПолучитьСписокПоказателей();
	
	Для Каждого Элемент Из ПолучитьСписокПоказателей() Цикл
		
		Если ПроизвольныйКод Тогда
			ВставитьТекстВФормулу("Показатели." + СокрЛП(Элемент));
		Иначе
			ВставитьТекстВФормулу("{" + СокрЛП(Элемент) + "}");
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокПоказателей()
	
	ВыделенныеПоказатели = Новый Массив;
	
	Для Каждого ВыдОбласть Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл	
		Если  ВыдОбласть.Верх =0 Тогда	
			Верх  = 1;
			Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	 
		ИначеЕсли  ВыдОбласть.Лево =0 Тогда	 	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = 1;
			Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;	
		Иначе	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	
		КонецЕсли;	
		
		Для ИндС = Верх По Низ Цикл
			Для ИндК = Лево По Право Цикл
				ТекОбл = ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);				
				Если ТипЗнч(ТекОбл.Расшифровка) = Тип("Структура") И ТекОбл.Расшифровка.Свойство("Показатель") Тогда
					ВыделенныеПоказатели.Добавить(ВидОтчетаКод+"."+ТекОбл.Расшифровка.Код);
				КонецЕсли;	  				
			КонецЦикла;	
		КонецЦикла;			
	КонецЦикла;
	
	Возврат  ВыделенныеПоказатели;
	
КонецФункции

&НаКлиенте
Процедура СсылкаНаПоказатель(Команда)
	
	ОткрытьФорму("Справочник.ПоказателиОтчетов.ФормаВыбора", Новый Структура("Отбор,ВозвращатьКод", Новый Структура("Владелец", ВидОтчета), Истина), ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОперанд(Команда)
		
	//Определить позицию курсора
	НачалоСтроки = 0;
	НачалоКолонки = 0;
	КонецСтроки = 0;
	КонецКолонки = 0;
		
	Элементы.ПолеТекстовогоДокументаПроцедура.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	
	//Если формула многострочная - собрать в одну строку,
	//скорректировав позицию курсора
	ФормулаОднойСтрокой = "";
	ПоправкаНаДлинуСтрокиНачало = 0;
	ПоправкаНаДлинуСтрокиКонец = 0;
	КоличествоСтрок = ПолеТекстовогоДокументаПроцедура.КоличествоСтрок();
	
	Для Инд = 1 По НачалоСтроки - 1 Цикл
		ФормулаОднойСтрокой = ФормулаОднойСтрокой + ПолеТекстовогоДокументаПроцедура.ПолучитьСтроку(Инд);
	КонецЦикла;
	
	ПоправкаНаДлинуСтрокиНачало = СтрДлина(ФормулаОднойСтрокой);
	НачалоКолонки = Мин(НачалоКолонки, СтрДлина(ПолеТекстовогоДокументаПроцедура.ПолучитьСтроку(НачалоСтроки)) + 1) + ПоправкаНаДлинуСтрокиНачало;
	
	Для Инд = НачалоСтроки По КонецСтроки - 1 Цикл
		ФормулаОднойСтрокой = ФормулаОднойСтрокой + ПолеТекстовогоДокументаПроцедура.ПолучитьСтроку(Инд);
	КонецЦикла;
	
	ПоправкаНаДлинуСтрокиКонец = СтрДлина(ФормулаОднойСтрокой);
	КонецКолонки = Мин(КонецКолонки, СтрДлина(ПолеТекстовогоДокументаПроцедура.ПолучитьСтроку(КонецСтроки)) + 1) + ПоправкаНаДлинуСтрокиКонец;
	
	Для Инд = КонецСтроки По КоличествоСтрок Цикл
		ФормулаОднойСтрокой = ФормулаОднойСтрокой + ПолеТекстовогоДокументаПроцедура.ПолучитьСтроку(Инд);
	КонецЦикла;
	
	//Если выделено вместе со скобками - обрезать скобки	
	ВыделенныйТекст = Сред(ФормулаОднойСтрокой, НачалоКолонки, КонецКолонки - НачалоКолонки);
	
	Если ВыделенныйТекст <> "" тогда
		НачалоВыделенногоТекста = НачалоКолонки;
		КонецВыделенногоТекста = НачалоВыделенногоТекста + СтрДлина(ВыделенныйТекст);
		
		ПозицияКвадратнойСкобкиНачало = СтрНайти(ВыделенныйТекст, "[");
		ПозицияФигурнойСкобкиНачало = СтрНайти(ВыделенныйТекст, "{");
		Если ПозицияКвадратнойСкобкиНачало <> 0 И ПозицияФигурнойСкобкиНачало = 0 тогда
			СкобкаНачало = ПозицияКвадратнойСкобкиНачало;
		ИначеЕсли ПозицияКвадратнойСкобкиНачало = 0 И ПозицияФигурнойСкобкиНачало <> 0 тогда
			СкобкаНачало = ПозицияФигурнойСкобкиНачало;
		Иначе
			СкобкаНачало = Мин(ПозицияКвадратнойСкобкиНачало, ПозицияФигурнойСкобкиНачало);
		КонецЕсли;	
		НачалоКолонки = НачалоКолонки + СкобкаНачало;
		
		ПозицияКвадратнойСкобкиКонец = СтрНайти(ВыделенныйТекст, "]", НаправлениеПоиска.СКонца);
		ПозицияФигурнойСкобкиКонец = СтрНайти(ВыделенныйТекст, "}", НаправлениеПоиска.СКонца);
		Если ПозицияКвадратнойСкобкиКонец <> 0 И ПозицияФигурнойСкобкиКонец = 0 тогда
			СкобкаКонец = ПозицияКвадратнойСкобкиКонец - 1;
		ИначеЕсли ПозицияКвадратнойСкобкиКонец = 0 И ПозицияФигурнойСкобкиКонец <> 0 тогда
			СкобкаКонец = ПозицияФигурнойСкобкиКонец - 1;
		ИначеЕсли ПозицияКвадратнойСкобкиКонец = 0 И ПозицияФигурнойСкобкиКонец = 0 тогда
			СкобкаКонец = СтрДлина(ВыделенныйТекст);
		Иначе
			СкобкаКонец = Мин(ПозицияКвадратнойСкобкиКонец, ПозицияФигурнойСкобкиКонец) - 1;
		КонецЕсли;
		СкобкаКонец = НачалоВыделенногоТекста + СкобкаКонец;
		КонецКолонки = Мин(КонецКолонки, КонецВыделенногоТекста);
		КонецКолонки = КонецКолонки - КонецВыделенногоТекста + СкобкаКонец;
		
		Если КонецКолонки < НачалоКолонки тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выберите один операнд! Операнд должен быть заключен в скобки ""[]"" или ""{}""'"));
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
		
	//Найти внешние скобки
	ПозицияКвадратнойСкобкиНачало = СтрНайти(" " + ФормулаОднойСтрокой, "[", НаправлениеПоиска.СКонца, НачалоКолонки);
	ПозицияФигурнойСкобкиНачало = СтрНайти(" " + ФормулаОднойСтрокой, "{", НаправлениеПоиска.СКонца, НачалоКолонки);	
	СкобкаНачало = Макс(ПозицияКвадратнойСкобкиНачало, ПозицияФигурнойСкобкиНачало);
		
	ПозицияКвадратнойСкобкиКонец = СтрНайти(ФормулаОднойСтрокой + " ", "]", НаправлениеПоиска.СНачала, КонецКолонки);
	ПозицияФигурнойСкобкиКонец = СтрНайти(ФормулаОднойСтрокой + " ", "}", НаправлениеПоиска.СНачала, КонецКолонки);
	Если ПозицияКвадратнойСкобкиКонец <> 0 И ПозицияФигурнойСкобкиКонец = 0 тогда
		СкобкаКонец = ПозицияКвадратнойСкобкиКонец;
	ИначеЕсли ПозицияКвадратнойСкобкиКонец = 0 И ПозицияФигурнойСкобкиКонец <> 0 тогда
		СкобкаКонец = ПозицияФигурнойСкобкиКонец;
	Иначе
		СкобкаКонец = Мин(ПозицияКвадратнойСкобкиКонец, ПозицияФигурнойСкобкиКонец);
	КонецЕсли;
	
	//Получить операнд
	Если СкобкаНачало <> 0 И СкобкаКонец <> 0 тогда
		КодФормулы = СокрЛП(Сред(" " + ФормулаОднойСтрокой, СкобкаНачало + 1, СкобкаКонец - СкобкаНачало));
		
		ПозицияКвадратнойСкобкиНачало = СтрНайти(КодФормулы, "[");
		ПозицияФигурнойСкобкиНачало = СтрНайти(КодФормулы, "{");
		ПозицияКвадратнойСкобкиКонец = СтрНайти(КодФормулы, "]");
		ПозицияФигурнойСкобкиКонец = СтрНайти(КодФормулы, "}");
		
		Если НЕ (ПозицияКвадратнойСкобкиНачало = 0 И ПозицияФигурнойСкобкиНачало = 0
			И ПозицияКвадратнойСкобкиКонец = 0 И ПозицияФигурнойСкобкиКонец = 0) тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не определен операнд! Операнд должен быть заключен в скобки ""[]"" или ""{}""'"));
			Возврат;
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не определен операнд! Операнд должен быть заключен в скобки ""[]"" или ""{}""'"));
		Возврат;
	КонецЕсли;
		 
	ИсточникДанных = ПолучитьИсточникПоКодуУпрощеннойФормулы(КодФормулы, ПравилоОбработки,ПолеТабличногоДокументаМакет.Область(ОбластьПоказателя).Расшифровка.Показатель);
	
	Если ИсточникДанных.Свойство("Ссылка") Тогда
		
		ОткрытьФорму("Справочник.ИсточникиДанныхДляРасчетов.ФормаОбъекта", Новый Структура("Ключ", ИсточникДанных.Ссылка));
		
	Иначе
		
		ИсточникДанных2 = ПолучитьИсточникПоКодуУпрощеннойФормулы("{"+КодФормулы+"}", ПравилоОбработки, ПолеТабличногоДокументаМакет.Область(ОбластьПоказателя).Расшифровка.Показатель);
		Если ИсточникДанных2.Свойство("Ссылка") Тогда
			ОткрытьФорму("Справочник.ИсточникиДанныхДляРасчетов.ФормаОбъекта", Новый Структура("Ключ", ИсточникДанных2.Ссылка));
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Показатель не записан и не может быть настроен! Необходимо сохранить формулу!'"));
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныйКод(Команда)
	
	ПроизвольныйКод=НЕ Элементы.ПроизвольныйКод.Пометка;
	Элементы.ПроизвольныйКод.Пометка=ПроизвольныйКод;
	Элементы.РедактироватьПроцедуру.Видимость=ПроизвольныйКод;
	
	Если ИспользоватьРасширенныйРасчет 
		И ПустаяСтрока(ПолеТекстовогоДокументаПроцедура.ПолучитьТекст()) Тогда
		ПолеТекстовогоДокументаПроцедура.Очистить();
		ПолеТекстовогоДокументаПроцедура.ДобавитьСтроку("Результат = ");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеФормулыЗаписать(Команда)
	ЗаписатьПроцедуруРасчета(СформироватьСтруктуруДляЗаписиФормулы());
КонецПроцедуры

&НаКлиенте
Процедура ИтогПоСчету(Команда)
	
	РабочийПланСчетов=ПолучитьРабочийПланСчетов(ПравилоОбработки);
	
	Если ЗначениеЗаполнено(РабочийПланСчетов) Тогда
		
		ОткрытьФорму("Справочник.СчетаБД.Форма.ФормаВыбораВидаИтога",Новый Структура("ПланСчетов",РабочийПланСчетов));
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьДеревоПоказателя(Команда)
	
	Если ПолучитьИтоговуюЯчейку() Тогда
		Если ТипЯчейки <> "Показатель" Тогда
			Сообщить(Нстр("ru = 'Переход к диаграмме показателя возможен только для ячейки показателя.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Отчет.ДеревоПоказателей.Форма", Новый Структура("ВидОтчета, КодПоказателя, ПравилоОбработки", ВидОтчета, ИтоговаяЯчейка, ПравилоОбработки));
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИтоговуюЯчейку()
	
	мТабДок = ПолеТабличногоДокументаМакет;
	
	Если мТабДок.ВыделенныеОбласти.Количество() <> 1 Тогда
		Сообщить(Нстр("ru = 'Необходимо выбрать одну ячейку.'"), СтатусСообщения.Информация);
		Возврат Ложь;
	КонецЕсли;
	
	ТекОбласть = мТабДок.ВыделенныеОбласти[0];
	Если ТекОбласть.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ТекОбласть.Расшифровка) = Тип("Структура") И ТекОбласть.Расшифровка.Свойство("Показатель") Тогда
		
		ТипЯчейки    	= 	"Показатель";
		ИтоговаяЯчейка	=	ТекОбласть.Расшифровка.Код;
		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьОперанд(Команда)
	
	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("НазначениеРасчетов",ПравилоОбработки);
	СтруктураОтбора.Вставить("ПотребительРасчета",ПолеТабличногоДокументаМакет.Область(ОбластьПоказателя).Расшифровка.Показатель);
	СтруктураОтбора.Вставить("СпособИспользования",ПредопределенноеЗначение("Перечисление.СпособыИспользованияОперандов.ДляФормулРасчета"));
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("Отбор",СтруктураОтбора);
	СтруктураПараметров.Вставить("РежимВыбора",Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор",Истина);
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе",Истина);
	
	ОткрытьФорму("Справочник.ИсточникиДанныхДляРасчетов.ФормаВыбора",СтруктураПараметров,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСоСмещениемВниз(Команда)
	
	Если ТипЗнч(ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка) = Тип("Структура") И ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка.Свойство("Показатель") Тогда
		
		Если ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка.ПроизвольныйКод Тогда
			  Возврат;
		КонецЕсли;	
	Иначе	
		Возврат;
	КонецЕсли;	
	
	КоординатаНачалаКопирования = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Верх+1;
	
	СтрокаКолонка               =  ПолеТабличногоДокументаМакет.ТекущаяОбласть.Лево;
	
	Если ПолеТабличногоДокументаМакет.ТекущаяОбласть.верх = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Низ Тогда
		КоординатаОкончанияКопирования = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
	Иначе	
		КоординатаОкончанияКопирования = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Низ;
	КонецЕсли;	
	
	НовыйТекстПроцедуры = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка.Процедура;
	
	СкопироватьОперандыВниз(ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка.Показатель,НовыйТекстПроцедуры,КоординатаНачалаКопирования,КоординатаОкончанияКопирования,СтрокаКолонка);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПоИерархииСтрок(Команда)
	
	ВыделенныеСтроки     = Новый Массив;
	ВыделенныеПоказатели = Новый Массив;
	
	Для Каждого ВыдОбласть Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл	
		Если  ВыдОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Таблица Тогда
			Верх  = 1;
			Лево  = 1;
			Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;
			Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
		ИначеЕсли  ВыдОбласть.Верх =0 Тогда	
			Верх  = 1;
			Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	 
		ИначеЕсли  ВыдОбласть.Лево =0 Тогда	 	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = 1;
			Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;	
		Иначе	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	
		КонецЕсли;	
		
		Для ИндС = Верх По Низ Цикл
			Для ИндК = Лево По Право Цикл
				ТекОбл = ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);
				Если ТипЗнч(ТекОбл.Расшифровка) = Тип("Структура") И ТекОбл.Расшифровка.Свойство("Показатель") Тогда
					ВыделенныеПоказатели.Добавить(ТекОбл.Расшифровка.Показатель);
					Если ВыделенныеСтроки.Найти(ПолеТабличногоДокументаМакет.Область(ИндС,1,ИндС,1).Расшифровка.Строка) = Неопределено Тогда
						ВыделенныеСтроки.Добавить(ПолеТабличногоДокументаМакет.Область(ИндС,1,ИндС,1).Расшифровка.Строка);
					КонецЕсли;					
				КонецЕсли;	  				
			КонецЦикла;	
		КонецЦикла;			
	КонецЦикла;

	СоздатьФормулыАгрегации(ВыделенныеПоказатели);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСоСмещениемВправо(Команда)
	
	Если ТипЗнч(ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка) = Тип("Структура") И ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка.Свойство("Показатель") Тогда
		
		Если ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка.ПроизвольныйКод Тогда
			  Возврат;
		КонецЕсли;	
	Иначе	
		Возврат;
	КонецЕсли;	
	
	КоординатаНачалаКопирования = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Лево+1;
	
	СтрокаКолонка               =  ПолеТабличногоДокументаМакет.ТекущаяОбласть.Верх;
	
	Если ПолеТабличногоДокументаМакет.ТекущаяОбласть.Лево = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Право Тогда
		КоординатаОкончанияКопирования = ПолеТабличногоДокументаМакет.ШиринаТаблицы;
	Иначе	
		КоординатаОкончанияКопирования = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Право;
	КонецЕсли;	
	
	НовыйТекстПроцедуры = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка.Процедура;
	
	СкопироватьОперандыВправо(ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка.Показатель,НовыйТекстПроцедуры,КоординатаНачалаКопирования,КоординатаОкончанияКопирования,СтрокаКолонка);
	

КонецПроцедуры


&НаСервере
Процедура ПодготовитьТаблицыПоДеревуРекурсивноФормулы(тДеревоВыбранныхСтрок,СтруктураШаблонов,ТаблицаКолонокВход,РезультатПоказатели,РезультатФормулы)
	
	Для Каждого Стр Из тДеревоВыбранныхСтрок.Строки Цикл	
		Если Не Стр.Строка =  НСтр("ru = 'Выбранные строки'") Тогда			
			
			
			ВывестиСтрокуВТабличныйДокументФормулы(Стр,СтруктураШаблонов,ТаблицаКолонокВход,РезультатПоказатели,РезультатФормулы);
			
			Если Стр.Уровень()>0 Тогда 
				тСтрокаКэш = ТгруппыСтрок.НайтиСтроки(Новый Структура("СтрокаКод",Стр.СтрокаКод));
				Если тСтрокаКэш.Количество() = 1 И тСтрокаКэш[0].Свернута Тогда
					ПолеТабличногоДокументаМакет.НачатьГруппуСтрок(Стр.СтрокаКод,Ложь);
				Иначе
					ПолеТабличногоДокументаМакет.НачатьГруппуСтрок(Стр.СтрокаКод);
				КонецЕсли;	 
			КонецЕсли;
			
		КонецЕсли;					
		
		ПодготовитьТаблицыПоДеревуРекурсивноФормулы(Стр,СтруктураШаблонов,ТаблицаКолонокВход,РезультатПоказатели,РезультатФормулы);		
		Если Стр.Уровень()>0 Тогда 
			Попытка
				ПолеТабличногоДокументаМакет.ЗакончитьГруппуСтрок() 
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтрокуВТабличныйДокументФормулы(СтрокаВыборки = Неопределено,СтруктураШаблонов,ТаблицаКолонокВход,РезультатПоказатели,РезультатФормулы);
	
	
	ПолеТабличногоДокументаМакетШаблонСтрокиИтог 	= СтруктураШаблонов.ПолеТабличногоДокументаМакетШаблонСтрокиИтог;
	ОбластьШаблонСторокиИтог                     	= ПолеТабличногоДокументаМакетШаблонСтрокиИтог.ПолучитьОбласть("ШаблонВыводаСтроки");
	
	ПолеТабличногоДокументаМакетШаблонСтроки	 	= СтруктураШаблонов.ПолеТабличногоДокументаМакетШаблонСтроки;
	ОбластьШаблонСтороки	                     	= ПолеТабличногоДокументаМакетШаблонСтроки.ПолучитьОбласть("ШаблонВыводаСтроки");
	
	
	Если СтрокаВыборки = Неопределено Тогда //Выводим служебную группирующую строку
		
		СтруктураРасшифровки = Новый Структура();
		СтруктураРасшифровки.Вставить("Строка", НСтр("ru = 'Выбранные строки'"));	
		
		ПолеТабличногоДокументаМакет.Вывести(ОбластьШаблонСторокиИтог);
		ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,1,ПолеТабличногоДокументаМакет.ВысотаТаблицы,1).Расшифровка = СтруктураРасшифровки;
		
	Иначе	
		
		Если СтрокаВыборки.Строки.Количество() = 0 Тогда
			ПолеТабличногоДокументаМакет.Вывести(ОбластьШаблонСтороки);
		Иначе
			ПолеТабличногоДокументаМакет.Вывести(ОбластьШаблонСторокиИтог);
		КонецЕсли;	
			
		//Выводим колонки реквизитов строки
		ВывестиРеквизитыСтрок(СтрокаВыборки);

		НачальныйИндексКолонокПоказателей = РеквизитыСтрок.Количество()+1;
		
		Для Каждого СтрКолонка Из ТаблицаКолонокВход Цикл
			
			тПоказатель = РезультатПоказатели.НайтиСтроки(Новый Структура("Строка,Колонка",СтрокаВыборки.Строка,СтрКолонка.Ссылка));
			Если тПоказатель.Количество() = 0 Тогда
				тЯчейка = ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей,ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей);
				тЯчейка.Текст 		= "X";
				тЯчейка.ЦветФона 	= Новый Цвет(245,245,245);
				тЯчейка.ЦветТекста 	= Новый Цвет(0,0,0);
				тЯчейка.Шрифт 		= Новый Шрифт(тЯчейка.Шрифт,,,Ложь);
				
			Иначе	
				
				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("Показатель",тПоказатель[0].Ссылка);
				
				тПроцедура = РезультатФормулы.Найти(тПоказатель[0].Ссылка,"Ссылка");
				
				Для Каждого КолтПроцедура Из РезультатФормулы.Колонки Цикл		
					СтруктураРасшифровки.Вставить(КолтПроцедура.Имя,тПроцедура[КолтПроцедура.Имя]);		
				КонецЦикла;	
				
				тЯчейка 				= ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей,ПолеТабличногоДокументаМакет.ВысотаТаблицы,НачальныйИндексКолонокПоказателей);
				тЯчейка.Текст           = тПроцедура.Процедура;
				тЯчейка.Шрифт 			= Новый Шрифт(тЯчейка.Шрифт,,,Ложь);
				тЯчейка.Расшифровка 	= СтруктураРасшифровки;
				тЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;		
				
			КонецЕсли;	
			
			НачальныйИндексКолонокПоказателей = НачальныйИндексКолонокПоказателей+1;
			
		КонецЦикла;	
		
		НачальныйИндексКолонокПоказателей = НачальныйИндексКолонокПоказателей+1;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьПроцедуруРасчета(СтруктураДанных)
	
	Если РежимРедактированияФормулы Тогда
		
		Если ПроизвольныйКод Тогда
			
			Если НЕ УправлениеОтчетамиУХ.ПроверитьФормулуПоказателя(СтруктураДанных) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			РабочийТекстФормулы=СтруктураДанных.ТекстПроцедуры;
			РабочийТекстРедактирования=СтруктураДанных.ТекстПроцедуры;
			
		Иначе
			
			Если НЕ УправлениеОтчетамиУХ.ОбработатьТекстУпрощеннойФормулы(СтруктураДанных) Тогда		
				Возврат Ложь;	
			КонецЕсли;
			
			РабочийТекстФормулы=СтруктураДанных.ТекстПроцедуры;
			РабочийТекстРедактирования=СтруктураДанных.РабочийТекстРедактирования;
			
		КонецЕсли;
		
		УправлениеОтчетамиУХ.ЗаписатьПроцедуруРасчета(СтруктураДанных);
		
		ПолеТабличногоДокументаМакет.Область(ОбластьПоказателя).Расшифровка.Процедура					= РабочийТекстФормулы;
		ПолеТабличногоДокументаМакет.Область(ОбластьПоказателя).Расшифровка.ПроцедураРедактирования		= РабочийТекстРедактирования;
		ПолеТабличногоДокументаМакет.Область(ОбластьПоказателя).Расшифровка.РедактированиеВозможно		= СтруктураДанных.РедактированиеВозможно;
		ПолеТабличногоДокументаМакет.Область(ОбластьПоказателя).Расшифровка.ПересчитыватьПриОткрытии	= СтруктураДанных.ПересчитыватьПриОткрытии;
		ПолеТабличногоДокументаМакет.Область(ОбластьПоказателя).Расшифровка.ПроизвольныйКод				= ПроизвольныйКод;
		
		ПолеТекстовогоДокументаПроцедура.УстановитьТекст(РабочийТекстФормулы);
		
		ПолеТабличногоДокументаМакет.Область(ОбластьПоказателя).Текст = РабочийТекстФормулы;
		
	Иначе
		
		Если НЕ УправлениеОтчетамиУХ.ПроверитьФормулуПоказателя(СтруктураДанных) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		УправлениеОтчетамиУХ.ЗаписатьПроцедуруРасчета(СтруктураДанных);
		ПолеТабличногоДокументаМакет.Область(ОбластьПоказателя).Расшифровка.Процедура					= СтруктураДанных.ТекстПроцедуры;
		
	КонецЕсли;
	
	ИзмененаФормулаРасчета=Ложь;
	Модифицированность=Ложь;
	
	Возврат Истина;
	
КонецФункции // ЗаписатьПроцедуруРасчета()

&НаСервереБезКонтекста
Функция ПроверитьТекстФормулы(СтруктураДанных)
	
	Если НЕ СтруктураДанных.ПроизвольныйКод Тогда
		
		СтруктураДанных.Вставить("ТекстПроцедуры",ОбщегоНазначенияУХ.ЗаменитьКодыВТекстеФормулы(СтруктураДанных.ТекстПроцедуры, СтруктураДанных.НазначениеРасчетов, СтруктураДанных.ПотребительРасчета, Истина));
		
	КонецЕсли;
	
	Если Не УправлениеОтчетамиУХ.ПроверитьФормулуПоказателя(СтруктураДанных) Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'При записи формулы обнаружены ошибки.'"),,,СтатусСообщения.Важное);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьИсточникПоКодуУпрощеннойФормулы(КодУпрощеннойФормулы,НазначениеРасчетов,ПотребительРасчета)
	
	Возврат ОбщегоНазначенияУХ.ПолучитьДанныеИсточникаПоКодуИсточника(КодУпрощеннойФормулы,НазначениеРасчетов,ПотребительРасчета);
	
КонецФункции // ПолучитьИсточникПоКодуУпрощеннойФормулы()

&НаСервереБезКонтекста
Функция ПолучитьРабочийПланСчетов(ПравилоОбработки)
	
	Возврат ПравилоОбработки.ПланСчетовПоУмолчанию;	
	
КонецФункции // ПолучитьРабочийПланСчетов()

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеИсточниковДанных(Источники)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеквизитыИсточниковДанныхДляФормул.КодУпрощеннойФормулы,
	|	РеквизитыИсточниковДанныхДляФормул.КодИсточника
	|ИЗ
	|	РегистрСведений.РеквизитыИсточниковДанныхДляФормул КАК РеквизитыИсточниковДанныхДляФормул
	|ГДЕ
	|	РеквизитыИсточниковДанныхДляФормул.ИсточникДанных В(&Источники)";
	
	Запрос.УстановитьПараметр("Источники", Источники);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	ТекстВставки = "";
	
	Пока Результат.Следующий() Цикл
		
		ТекстВставки = ТекстВставки + " [" + Результат.КодИсточника+"]";
		
	КонецЦикла;
	
	Возврат Сред(ТекстВставки, 2);
	
КонецФункции

&НаСервере
Процедура СкопироватьОперандыВниз(Показатель,ТекстПроцедуры_,КоординатаНачалаКопирования,КоординатаОкончанияКопирования,СтрокаКолонка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоказателиОтчетов.Ссылка КАК Показатель
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &Владелец
	|	И НЕ ПоказателиОтчетов.ПометкаУдаления
	|	И ПоказателиОтчетов.Код ПОДОБНО &Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоказателиОтчетов.Код";
	Запрос.УстановитьПараметр("Владелец", ВидОтчета);
	
	ОперандыТекущейФормулы = ПолучитьОперандыТекущегоПотребителя(Показатель);
	
	Для ИндСтроки = КоординатаНачалаКопирования По КоординатаОкончанияКопирования Цикл
		
		тОбласть =  ПолеТабличногоДокументаМакет.Область(ИндСтроки,СтрокаКолонка,ИндСтроки,СтрокаКолонка);
		
		ТекстПроцедуры = ТекстПроцедуры_;
		
		Если ТипЗнч(тОбласть.Расшифровка) = Тип("Структура") И тОбласть.Расшифровка.Свойство("Показатель") Тогда			
			
			Для Каждого СтрОперанд Из ОперандыТекущейФормулы Цикл
				
				Если СтрОперанд.ВидОтчетаОтбор = ВидОтчета Тогда // Имеет смысл создать показатель со смещением по текущему направлению 
					
					тСтрока  = ПолеТабличногоДокументаМакет.Область(ИндСтроки,1,ИндСтроки,1).Расшифровка.СтрокаКод;
					тКолонка = СокрЛП(СтрОперанд.ПоказательОтборКолонкаКод);
					
					Запрос.УстановитьПараметр("Код", СокрЛП(тСтрока)+"_"+тКолонка + "%");
					Результат = Запрос.Выполнить();
					
					Если Не Результат.Пустой() Тогда
						
						ВыборкаЗапроса = Результат.Выбрать();
						ВыборкаЗапроса.Следующий();  						
						
						ПроцедураСкопироватьОперандПоИсточнику(ТекстПроцедуры
						,СтрОперанд.ИсточникДанных
						,тОбласть.Расшифровка.Показатель
						,ВыборкаЗапроса.Показатель
						,СтрОперанд.КодИсточника);
						
					КонецЕсли;
				Иначе	
					
					ПроцедураСкопироватьОперандПоИсточнику(ТекстПроцедуры
					,СтрОперанд.ИсточникДанных
					,тОбласть.Расшифровка.Показатель
					,
					,СтрОперанд.КодИсточника);
						
				КонецЕсли;	
				
			КонецЦикла;			
			
			ТекстПроцедуры = СтрЗаменить(ТекстПроцедуры,"[","{");
			ТекстПроцедуры = СтрЗаменить(ТекстПроцедуры,"]","}");
			
			ТекстПроцедуры = СтрЗаменить(ТекстПроцедуры,"%!","[");
			ТекстПроцедуры = СтрЗаменить(ТекстПроцедуры,"!%","]");

			СтруктураДанных=Новый Структура;
			СтруктураДанных.Вставить("ТекстПроцедуры",ТекстПроцедуры);
			СтруктураДанных.Вставить("ТипЯчейки","Показатель");
			СтруктураДанных.Вставить("ВидФормулы",0);
			СтруктураДанных.Вставить("ИтоговаяЯчейка","");
			СтруктураДанных.Вставить("Владелец",ВидОтчета);
			СтруктураДанных.Вставить("НазначениеРасчетов",ПравилоОбработки);
			СтруктураДанных.Вставить("ПотребительРасчета",тОбласть.Расшифровка.Показатель);
			СтруктураДанных.Вставить("ПроизвольныйКод",Ложь);
			СтруктураДанных.Вставить("ПересчитыватьПриОткрытии",Ложь);
			СтруктураДанных.Вставить("РедактированиеВозможно",	Ложь);
			СтруктураДанных.Вставить("СпособИспользования",ПредопределенноеЗначение("Перечисление.СпособыИспользованияОперандов.ДляФормулРасчета"));
			
			Если НЕ УправлениеОтчетамиУХ.ОбработатьТекстУпрощеннойФормулы(СтруктураДанных) Тогда		
				Продолжить;	
			КонецЕсли;
			
			УправлениеОтчетамиУХ.ЗаписатьПроцедуруРасчета(СтруктураДанных);
			
		КонецЕсли;
			
	КонецЦикла;	
	
	ЗаполнитьДеревоСтрок();
	
КонецПроцедуры	

&НаСервере
Процедура СкопироватьОперандыВправо(Показатель,ТекстПроцедуры_,КоординатаНачалаКопирования,КоординатаОкончанияКопирования,СтрокаКолонка)
	
	ОперандыТекущейФормулы = ПолучитьОперандыТекущегоПотребителя(Показатель);
	
	Для ИндКолонки = КоординатаНачалаКопирования По КоординатаОкончанияКопирования Цикл
		
		тОбласть =  ПолеТабличногоДокументаМакет.Область(СтрокаКолонка,ИндКолонки,СтрокаКолонка,ИндКолонки);
		
		ТекстПроцедуры = ТекстПроцедуры_;
		
		Если ТипЗнч(тОбласть.Расшифровка) = Тип("Структура") И тОбласть.Расшифровка.Свойство("Показатель") Тогда
			
			
			Для Каждого СтрОперанд Из ОперандыТекущейФормулы Цикл
				
				Если СтрОперанд.ВидОтчетаОтбор = ВидОтчета   Тогда //Имеет смысл создать показатель со смещением по текущему направлению 
					
					тСтрока  = СокрЛП(СтрОперанд.ПоказательОтборСтрокаКод);
					тКолонка = ПолеТабличногоДокументаМакет.Область(1,ИндКолонки,1,ИндКолонки).Расшифровка.КолонкаКод;
					
					тПоказатель = Справочники.ПоказателиОтчетов.НайтиПоКоду(СокрЛП(тСтрока)+"_"+тКолонка,,,ВидОтчета);
					
					ПроцедураСкопироватьОперандПоИсточнику(ТекстПроцедуры
					,СтрОперанд.ИсточникДанных
					,тОбласть.Расшифровка.Показатель
					,тПоказатель
					,СтрОперанд.КодИсточника);
					
				Иначе	
					
					ПроцедураСкопироватьОперандПоИсточнику(ТекстПроцедуры
					,СтрОперанд.ИсточникДанных
					,тОбласть.Расшифровка.Показатель
					,
					,СтрОперанд.КодИсточника);
						
				КонецЕсли;	
				
			КонецЦикла;	
			
			
			ТекстПроцедуры = СтрЗаменить(ТекстПроцедуры,"[","{");
			ТекстПроцедуры = СтрЗаменить(ТекстПроцедуры,"]","}");
			
			ТекстПроцедуры = СтрЗаменить(ТекстПроцедуры,"%!","[");
			ТекстПроцедуры = СтрЗаменить(ТекстПроцедуры,"!%","]");

			СтруктураДанных=Новый Структура;
			СтруктураДанных.Вставить("ТекстПроцедуры",ТекстПроцедуры);
			СтруктураДанных.Вставить("ТипЯчейки","Показатель");
			СтруктураДанных.Вставить("ВидФормулы",0);
			СтруктураДанных.Вставить("ИтоговаяЯчейка","");
			СтруктураДанных.Вставить("Владелец",ВидОтчета);
			СтруктураДанных.Вставить("НазначениеРасчетов",ПравилоОбработки);
			СтруктураДанных.Вставить("ПотребительРасчета",тОбласть.Расшифровка.Показатель);
			СтруктураДанных.Вставить("ПроизвольныйКод",Ложь);
			СтруктураДанных.Вставить("ПересчитыватьПриОткрытии",Ложь);
			СтруктураДанных.Вставить("РедактированиеВозможно",	Ложь);
			СтруктураДанных.Вставить("СпособИспользования",ПредопределенноеЗначение("Перечисление.СпособыИспользованияОперандов.ДляФормулРасчета"));
			
			Если НЕ УправлениеОтчетамиУХ.ОбработатьТекстУпрощеннойФормулы(СтруктураДанных) Тогда		
				Продолжить;	
			КонецЕсли;

			
			УправлениеОтчетамиУХ.ЗаписатьПроцедуруРасчета(СтруктураДанных);
			
		КонецЕсли;
			
	КонецЦикла;	
	
	ЗаполнитьДеревоСтрок();
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьОперандыТекущегоПотребителя(ПотребительРасчета)
	
		
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	РеквизитыИсточниковДанныхДляФормул.ИсточникДанных КАК ИсточникДанных,
	             |	РеквизитыИсточниковДанныхДляФормул.КодИсточника КАК КодИсточника,
	             |	РеквизитыИсточниковДанныхДляФормул.КодУпрощеннойФормулы КАК КодУпрощеннойФормулы,
	             |	РеквизитыИсточниковДанныхДляФормул.ПоказательТекущегоОтчета КАК ПоказательТекущегоОтчета,
	             |	РеквизитыИсточниковДанныхДляФормул.ЕстьНестандартныеОтборы КАК ЕстьНестандартныеОтборы,
	             |	РеквизитыИсточниковДанныхДляФормул.ВидОтчета КАК ВидОтчета,
	             |	РеквизитыИсточниковДанныхДляФормул.ПоказательОтбор КАК ПоказательОтбор,
	             |	РеквизитыИсточниковДанныхДляФормул.ВидОтчетаОтбор КАК ВидОтчетаОтбор,
	             |	РеквизитыИсточниковДанныхДляФормул.ВидОтчета.Код КАК ВидОтчетаКод,
	             |	РеквизитыИсточниковДанныхДляФормул.ПоказательОтбор.Код КАК ПоказательОтборКод,
	             |	РеквизитыИсточниковДанныхДляФормул.ИсточникДанных.НеИспользуется КАК ИсточникДанныхНеИспользуется,
	             |	РеквизитыИсточниковДанныхДляФормул.СпособПолучения КАК СпособПолучения,
	             |	РеквизитыИсточниковДанныхДляФормул.ПоказательОтбор.Строка.Код КАК ПоказательОтборСтрокаКод,
	             |	РеквизитыИсточниковДанныхДляФормул.ПоказательОтбор.Колонка.Код КАК ПоказательОтборКолонкаКод
	             |ИЗ
	             |	РегистрСведений.РеквизитыИсточниковДанныхДляФормул КАК РеквизитыИсточниковДанныхДляФормул
	             |ГДЕ
	             |	РеквизитыИсточниковДанныхДляФормул.НазначениеРасчетов = &НазначениеРасчетов
	             |	И РеквизитыИсточниковДанныхДляФормул.ПотребительРасчета = &ПотребительРасчета
	             |	И РеквизитыИсточниковДанныхДляФормул.СпособИспользования = &СпособИспользования
	             |	И РеквизитыИсточниковДанныхДляФормул.ИсточникДанных.НеИспользуется = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("НазначениеРасчетов",ПравилоОбработки);
	Запрос.УстановитьПараметр("ПотребительРасчета",ПотребительРасчета);
	Запрос.УстановитьПараметр("СпособИспользования",Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

&НаСервере
Процедура ПроцедураСкопироватьОперандПоИсточнику(ТекстПроцедуры,ИсточникДанных,ПотребительРасчета,ПоказательОтбор = Неопределено,КодИсточника)
	
	тОперандОбъект 						= ИсточникДанных.ПолучитьОбъект();
	тОперандКопия  						= тОперандОбъект.Скопировать();
	тОперандКопия.ПотребительРасчета    = ПотребительРасчета;
	Если НЕ ПоказательОтбор = Неопределено Тогда
		тОперандКопия.ПоказательОтбор       = ПоказательОтбор;
	КонецЕсли;
	тОперандКопия.Код                   = "";
	тОперандКопия.СформироватьКодОперанда(Истина);
	тОперандКопия.ПодготовитьТаблицыСопоставленийИОтборов();
	тОперандКопия.Записать();	
	
	тПозицияТекущегоОперанда = СтрНайти(ТекстПроцедуры,КодИсточника);
	Если тПозицияТекущегоОперанда>0 Тогда	
		тНовоеИмяОперанда 	= СокрЛП(тОперандКопия.Код);
		ТекстПроцедуры 	= СтрЗаменить(ТекстПроцедуры,"["+КодИсточника+"]","%!"+тНовоеИмяОперанда+"!%");	
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьФормулыАгрегации(ВыделенныеПоказатели)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Ссылка,
	|	ПоказателиОтчетов.Строка КАК Строка,
	|	ПоказателиОтчетов.Колонка КАК Колонка
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.ПометкаУдаления = ЛОЖЬ
	|	И ПоказателиОтчетов.Владелец  = &ВидОтчета";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	
	тПоказатели = Запрос.Выполнить().Выгрузить();
	тПоказатели.Индексы.Добавить("Строка,Колонка");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Ссылка,
	|	ПоказателиОтчетов.Строка КАК Строка,
	|	ПоказателиОтчетов.Колонка КАК Колонка,
	|	ПоказателиОтчетов.Колонка.Код КАК КолонкаКод,
	|	ПоказателиОтчетов.Владелец.Код КАК ВладелецКод
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.ПометкаУдаления = ЛОЖЬ
	|	И ПоказателиОтчетов.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка",ВыделенныеПоказатели);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	тДеревоСтрок = ПолучитьИзВременногоХранилища(ДеревоНастройкиСерверАдрес);
	
	
	Пока Выборка.Следующий() Цикл
		
		ВложенныеСтроки = тДеревоСтрок.Строки.НайтиСтроки(Новый Структура("Строка",Выборка.Строка),Истина)[0].Строки;
		
		ТекстПроцедуры = "";
		
		Для Каждого ВлСтрока Из ВложенныеСтроки Цикл  
			
			Если тПоказатели.НайтиСтроки(Новый Структура("Строка,Колонка",ВлСтрока.Строка,Выборка.Колонка)).Количество()>0 Тогда
				
				ТекстПроцедуры = ТекстПроцедуры	+	"{"+СокрЛП(Выборка.ВладелецКод)+"."+ВлСтрока.СтрокаКод+"_"+СокрЛП(Выборка.КолонкаКод)+"}";
				ТекстПроцедуры = ТекстПроцедуры	+	"+";
				
			КонецЕсли;
			
		КонецЦикла;	  
		
		Если ТекстПроцедуры = "" Тогда
			Продолжить;
		КонецЕсли;	  
		
		ТекстПроцедуры = ЛЕВ(ТекстПроцедуры,СтрДлина(ТекстПроцедуры)-1);
		
		СтруктураДанных=Новый Структура;
		СтруктураДанных.Вставить("ТекстПроцедуры",ТекстПроцедуры);
		СтруктураДанных.Вставить("ТипЯчейки","Показатель");
		СтруктураДанных.Вставить("ВидФормулы",0);
		СтруктураДанных.Вставить("ИтоговаяЯчейка","");
		СтруктураДанных.Вставить("Владелец",ВидОтчета);
		СтруктураДанных.Вставить("НазначениеРасчетов",ПравилоОбработки);
		СтруктураДанных.Вставить("ПотребительРасчета",Выборка.Ссылка);
		СтруктураДанных.Вставить("ПроизвольныйКод",Ложь);
		СтруктураДанных.Вставить("ПересчитыватьПриОткрытии",Ложь);
		СтруктураДанных.Вставить("РедактированиеВозможно",	Ложь);
		СтруктураДанных.Вставить("СпособИспользования",ПредопределенноеЗначение("Перечисление.СпособыИспользованияОперандов.ДляФормулРасчета"));
		
		Если НЕ УправлениеОтчетамиУХ.ОбработатьТекстУпрощеннойФормулы(СтруктураДанных) Тогда		
			Продолжить;	
		КонецЕсли;
		
		УправлениеОтчетамиУХ.ЗаписатьПроцедуруРасчета(СтруктураДанных);
		
	КонецЦикла;
	
	ЗаполнитьДеревоСтрок();
	
КонецПроцедуры	

#КонецОбласти


&НаКлиенте
Процедура Применить(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПомеченныеНаУдаление(Команда)
	
	НастройкиИзменены = Истина;
	Элементы.ВыводитьПомеченныеНаУдаление.Пометка = Не Элементы.ВыводитьПомеченныеНаУдаление.Пометка;
	ВыводитьУдаленные = Элементы.ВыводитьПомеченныеНаУдаление.Пометка; 
	
	ЗаполнитьДеревоСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКолоки(Команда)
	
	ВыделенныеКолонки = Новый Массив;
	
	Для Каждого ВыдОбласть Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл	
		Если  ВыдОбласть.Верх =0 Тогда	
			Верх  = 1;
			Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	 
		ИначеЕсли  ВыдОбласть.Лево =0 Тогда	 	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = 1;
			Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;	
		Иначе	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	
		КонецЕсли;	
		
		Для ИндС = Верх По Низ Цикл
			Для ИндК = Лево По Право Цикл
				ТекОбл = ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);
				Если ЗначениеЗаполнено(ТекОбл.Расшифровка) И ТекОбл.Расшифровка.Свойство("Колонка")  Тогда
					ВыделенныеКолонки.Добавить(ТекОбл.Расшифровка.Колонка);
				КонецЕсли;	  				
			КонецЦикла;	
		КонецЦикла;			
	КонецЦикла;
	
	ПометитьКолонкуНаУдалениеСервер(ВыделенныеКолонки);

КонецПроцедуры

&НаСервере
Процедура ПометитьКолонкуНаУдалениеСервер(ВыделенныеКолонки)
	
	Для Каждого ТекущаяКолонка Из ВыделенныеКолонки Цикл
		
		Попытка			
			
			тКолонкаОбъект 	= ТекущаяКолонка.ПолучитьОбъект();
			Если НЕ тКолонкаОбъект.ПометкаУдаления Тогда
				тКолонкаОбъект.ПометкаУдаления  = Истина;
				тКолонкаОбъект.Записать();
			Иначе
				тКолонкаОбъект.ПометкаУдаления  = Ложь;
                тКолонкаОбъект.Записать();
			КонецЕсли;
				
		Исключение
			
			СтрокаШаблона = Нстр("ru = 'Ошибка при удалении колонки  %1: %2'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ТекущаяКолонка, ИнформацияОбОшибке().Описание));
			КонецЕсли;
			
			Отказ = Истина;
		КонецПопытки;
		
	КонецЦикла;	
	
	ЗаполнитьДеревоСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура КолонкаПереместитьВправо(Команда)
	
	ТекущаяОбласть				= ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	
	Если  ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда
		 ТекущаяОбласть = ПолеТабличногоДокументаМакет.Область(1,ТекущаяОбласть.Право,1,ТекущаяОбласть.Право);
	КонецЕсли;	

	
	Если ТипЗнч(ТекущаяОбласть.Расшифровка) = Тип("Структура") И ТекущаяОбласть.Расшифровка.Свойство("Колонка") Тогда	
		тКолонка = ТекущаяОбласть.Расшифровка.Колонка;
		КолонкаПереместитьСервер(ТекущаяОбласть.Расшифровка.Колонка,1);		
	КонецЕсли;	
	
	ЗаполнитьДеревоСтрок();
	
	УстановитьТекущуюОбласть(тКолонка);
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ПолеТабличногоДокументаМакет;

КонецПроцедуры

&НаКлиенте
Процедура КолонкаПереместитьВлево(Команда)
	
	ТекущаяОбласть				= ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	
	Если ТипЗнч(ТекущаяОбласть.Расшифровка) = Тип("Структура") И ТекущаяОбласть.Расшифровка.Свойство("Колонка") Тогда	
		тКолонка = ТекущаяОбласть.Расшифровка.Колонка;
		КолонкаПереместитьСервер(ТекущаяОбласть.Расшифровка.Колонка,-1);		
	КонецЕсли;	
	
	ЗаполнитьДеревоСтрок();
	
	УстановитьТекущуюОбласть(тКолонка);
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ПолеТабличногоДокументаМакет;


КонецПроцедуры

&НаСервере
Процедура КолонкаПереместитьСервер(ТекущаяКолонка,Сдвиг)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КолонкиОтчетов.Ссылка КАК Ссылка,
	|	КолонкиОтчетов.ПорядковыйНомер КАК ПорядковыйНомер
	|ИЗ
	|	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|ГДЕ
	|	КолонкиОтчетов.ПометкаУдаления = ЛОЖЬ
	|	И КолонкиОтчетов.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	КолонкиОтчетов.ПорядковыйНомер";
	

	Запрос.УстановитьПараметр("Владелец",ВидОтчета);
	
	тСтрокиТекущегоУровння      = Запрос.Выполнить().Выгрузить();
	ПорядковыйНомерТек 			= ТекущаяКолонка.ПорядковыйНомер;
	
	Если Сдвиг = -1 Тогда 				//Вверх
		
		тСтрокаПрд = Неопределено;
		
		Для Каждого тСтрока Из тСтрокиТекущегоУровння Цикл		
			Если тСтрока.ПорядковыйНомер = ПорядковыйНомерТек Тогда
				Прервать;
			КонецЕсли;	
			
			тСтрокаПрд = тСтрока.Ссылка;		
		КонецЦикла;	
		
	Иначе  								//Вниз	
		тСтрокаПрд 			= Неопределено;
		ФлТекущСтроки       = Ложь;
		
		Для Каждого тСтрока Из тСтрокиТекущегоУровння Цикл		
			Если ФлТекущСтроки Тогда
				тСтрокаПрд = тСтрока.Ссылка;
				Прервать;
			КонецЕсли;	
			
			Если тСтрока.ПорядковыйНомер = ПорядковыйНомерТек Тогда
				ФлТекущСтроки = Истина;
			КонецЕсли;	
			
		КонецЦикла;		
	КонецЕсли;	
	
	Если НЕ тСтрокаПрд = Неопределено Тогда
		Попытка		
			ПорядковыйНомерПред = тСтрокаПрд.ПорядковыйНомер;	
			
			тСтрокаПрдОбъект 	= тСтрокаПрд.ПолучитьОбъект();
			тСтрокаОбъект 		= ТекущаяКолонка.ПолучитьОбъект();
			
			ПорядковыйНомерПред = тСтрокаПрд.ПорядковыйНомер;
			тСтрокаПрдОбъект.ПорядковыйНомер = тСтрокаОбъект.ПорядковыйНомер; 
			тСтрокаПрдОбъект.ОбменДанными.Загрузка = Истина;
			тСтрокаПрдОбъект.Записать();
			
			тСтрокаОбъект.ПорядковыйНомер = ПорядковыйНомерПред; 
			тСтрокаОбъект.ОбменДанными.Загрузка = Истина;
			тСтрокаОбъект.Записать();
			
		Исключение
			
			СтрокаШаблона = Нстр("ru = 'Ошибка при записи колонки %1'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ИнформацияОбОшибке().Описание));
			КонецЕсли;
				
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СвойстваСтрокиИзменены"
		Или ИмяСобытия = "ЗаписанаГруппаРаскрытия" Тогда
		ЗаполнитьДеревоСтрок();
	ИначеЕсли ИмяСобытия = "ИзмененаФормулаВычисления" Тогда
		ПолеТекстовогоДокументаПроцедура.УстановитьТекст(Параметр.ТекстПроцедуры);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ЗаполнитьДеревоСтрок();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НастройкиИзменены = Истина тогда
		Если Не ЗавершениеРаботы тогда
			СохранитьНастройкиФормы();
		Иначе
			Отказ = Истина;
			ТекстПредупреждения = Нстр("ru = 'Работа в данном окне не завершена: настройки не будут сохранены'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФормы()
	
	Если ПолеТабличногоДокументаМакет.ШиринаТаблицы > 0 Тогда
		СохранитьНастройкиВариантаМакета();
	КонецЕсли;
	
	КлючОбъекта = "<FN>" + ЭтаФорма.ИмяФормы + "</FN><RT>" + Строка(ВидОтчета) + "</RT><RTGUID>" + Строка(ВидОтчета.УникальныйИдентификатор()) + "</RTGUID>";
	КлючОбъекта = СтрЗаменить(КлючОбъекта, " ", "");
	КлючОбъекта = СтрЗаменить(КлючОбъекта, Символы.ВК, "");
	КлючОбъекта = СтрЗаменить(КлючОбъекта, Символы.ВТаб, "");
	КлючОбъекта = СтрЗаменить(КлючОбъекта, Символы.НПП, "");
	КлючОбъекта = СтрЗаменить(КлючОбъекта, Символы.ПС, "");
	КлючОбъекта = СтрЗаменить(КлючОбъекта, Символы.ПФ, "");
	КлючОбъекта = СтрЗаменить(КлючОбъекта, Символы.Таб, "");
	
	ТекущийПользователь = ПользователиУХ.АвторизованныйПользователь();
	КлючНастроек = "<User>" + Строка(ТекущийПользователь) + "</User><UserGUID>" + ТекущийПользователь.УникальныйИдентификатор() + "</UserGUID>";
	КлючНастроек = СтрЗаменить(КлючНастроек, " ", "");
	КлючНастроек = СтрЗаменить(КлючНастроек, Символы.ВК, "");
	КлючНастроек = СтрЗаменить(КлючНастроек, Символы.ВТаб, "");
	КлючНастроек = СтрЗаменить(КлючНастроек, Символы.НПП, "");
	КлючНастроек = СтрЗаменить(КлючНастроек, Символы.ПС, "");
	КлючНастроек = СтрЗаменить(КлючНастроек, Символы.ПФ, "");
	КлючНастроек = СтрЗаменить(КлючНастроек, Символы.Таб, "");
	
	СтруктураНастроек = Новый Структура("РежимРаботы, КолонкаОтбор, ПравилоОбработки");
	
	Для Каждого ЭлементНастроек Из СтруктураНастроек Цикл
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, ЭлементНастроек.Ключ) тогда
			СтруктураНастроек.Вставить(ЭлементНастроек.Ключ, ЭтаФорма[ЭлементНастроек.Ключ]);
		КонецЕсли;
	КонецЦикла;
	
	ТзНастройкиКолонок = ПолучитьИзВременногоХранилища(НастройкиКолонокАдрес);
	Если ТипЗнч(ТзНастройкиКолонок) = Тип("ТаблицаЗначений") тогда
		СтруктураНастроек.Вставить("НастройкиКолонок", ТзНастройкиКолонок);
	КонецЕсли;
	
	ТзНастройкиСтрок = ПолучитьИзВременногоХранилища(НастройкиСтрокАдрес);
	Если ТипЗнч(ТзНастройкиСтрок) = Тип("ТаблицаЗначений") тогда
		СтруктураНастроек.Вставить("НастройкиСтрок", ТзНастройкиСтрок);
	КонецЕсли;
	
	СтруктураНастроек.Вставить("МассивРеквизитовСтрок", РеквизитыСтрок.ВыгрузитьЗначения());
	СтруктураНастроек.Вставить("МассивРеквизитовПоказателей", РеквизитыПоказателей.ВыгрузитьЗначения());
	
	ХранилищаНастроек.Общие.Сохранить(КлючОбъекта, КлючНастроек, СтруктураНастроек);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиФормы()
	
	КлючОбъекта = "<FN>" + ЭтаФорма.ИмяФормы + "</FN>" + "<RT>" + Строка(ВидОтчета) + "</RT>" + "<RTGUID>" + Строка(ВидОтчета.УникальныйИдентификатор()) + "</RTGUID>";
	КлючОбъекта = СтрЗаменить(КлючОбъекта, " ", "");
	КлючОбъекта = СтрЗаменить(КлючОбъекта, Символы.ВК, "");
	КлючОбъекта = СтрЗаменить(КлючОбъекта, Символы.ВТаб, "");
	КлючОбъекта = СтрЗаменить(КлючОбъекта, Символы.НПП, "");
	КлючОбъекта = СтрЗаменить(КлючОбъекта, Символы.ПС, "");
	КлючОбъекта = СтрЗаменить(КлючОбъекта, Символы.ПФ, "");
	КлючОбъекта = СтрЗаменить(КлючОбъекта, Символы.Таб, "");
	
	ТекущийПользователь = ПользователиУХ.АвторизованныйПользователь();
	КлючНастроек = "<User>" + Строка(ТекущийПользователь) + "</User><UserGUID>" + ТекущийПользователь.УникальныйИдентификатор() + "</UserGUID>";
	КлючНастроек = СтрЗаменить(КлючНастроек, " ", "");
	КлючНастроек = СтрЗаменить(КлючНастроек, Символы.ВК, "");
	КлючНастроек = СтрЗаменить(КлючНастроек, Символы.ВТаб, "");
	КлючНастроек = СтрЗаменить(КлючНастроек, Символы.НПП, "");
	КлючНастроек = СтрЗаменить(КлючНастроек, Символы.ПС, "");
	КлючНастроек = СтрЗаменить(КлючНастроек, Символы.ПФ, "");
	КлючНастроек = СтрЗаменить(КлючНастроек, Символы.Таб, "");
	
	ОписаниеНастроек = Новый ОписаниеНастроек;
	
	ХранилищаНастроек.Общие.Загрузить(КлючОбъекта, КлючНастроек, ОписаниеНастроек);
	
	СтруктураНастроек = ОписаниеНастроек.ДополнительныеСвойства;
	
	Для Каждого ЭлементНастроек Из СтруктураНастроек Цикл
		
		Если ЭлементНастроек.Ключ = "НастройкиКолонок" тогда
			
			НастройкиКолонокАдрес = ПоместитьВоВременноеХранилище(ЭлементНастроек.Значение, ЭтаФорма.УникальныйИдентификатор);
			
		ИначеЕсли ЭлементНастроек.Ключ = "НастройкиСтрок" тогда
			
			НастройкиСтрокАдрес = ПоместитьВоВременноеХранилище(ЭлементНастроек.Значение, ЭтаФорма.УникальныйИдентификатор);
				
		ИначеЕсли ЭлементНастроек.Ключ = "МассивРеквизитовСтрок" тогда
			
			РеквизитыСтрок.ЗагрузитьЗначения(ЭлементНастроек.Значение);
			
		ИначеЕсли ЭлементНастроек.Ключ = "МассивРеквизитовПоказателей" тогда
			
			РеквизитыПоказателей.ЗагрузитьЗначения(ЭлементНастроек.Значение);
			
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, ЭлементНастроек.Ключ) тогда
			
			ЭтаФорма[ЭлементНастроек.Ключ] = ЭлементНастроек.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если РежимРаботы = "" тогда
		РежимРаботы = "СтруктураОтчета";
	КонецЕсли;
	
	Если РеквизитыСтрок.Количество() = 0 тогда
		РеквизитыСтрок.Добавить("Строка");
	КонецЕсли;
	
	ЗагрузитьНастройкиВариантаМакета();
			
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиВариантаМакета()
	
	Если НастройкиКолонокАдрес = "" тогда
		Возврат;
	КонецЕсли;
	
	ТзНастройкиКолонок = ПолучитьИзВременногоХранилища(НастройкиКолонокАдрес);
	
	СтрокиРежима = ТзНастройкиКолонок.НайтиСтроки(Новый Структура("Режим", РежимРаботы));
	
	Для Каждого Стр Из СтрокиРежима Цикл
		ПолеТабличногоДокументаМакет.Область(0, Стр.НомерКолонки, 0, Стр.НомерКолонки).ШиринаКолонки = Стр.ШиринаКолонки;
	КонецЦикла;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастройкиИзменены = Ложь;
	ДоступностьВставкиАналитики = Ложь;
	ДоступностьВставкиФормулы = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетПриИзменении(Элемент)
	
	НастройкиИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетПриАктивизации(Элемент)
	
	Если РежимРаботы = "АналитикиПоказателей" тогда
		
		ДоступностьСмещенияВниз = Истина;
		ДоступностьКопирования = Истина;
		ДоступностьВставки = Истина;
		ДоступностьУдаления = Истина;
		
		ТекущаяОбласть = ПолеТабличногоДокументаМакет.ТекущаяОбласть;
		
		Если ТекущаяОбласть.Верх < ОбластьДанныхВерх
			ИЛИ ТекущаяОбласть.Лево < ОбластьДанныхЛево
			ИЛИ ТекущаяОбласть.Верх > ОбластьДанныхНиз
			ИЛИ ТекущаяОбласть.Лево > ОбластьДанныхПраво
			ИЛИ ТекущаяОбласть.Лево <> ТекущаяОбласть.Право тогда
			
			ДоступностьСмещенияВниз = Ложь;
			ДоступностьКопирования = Ложь;
			ДоступностьВставки = Ложь;
			ДоступностьУдаления = Ложь;
						
		ИначеЕсли ТекущаяОбласть.Верх <> ТекущаяОбласть.Низ тогда
			
			ДоступностьКопирования = Ложь;
			ДоступностьУдаления = Ложь;
			
		КонецЕсли;
		
		ДоступностьВставки = Мин(ДоступностьВставкиАналитики, ДоступностьВставки);
		
		Элементы.УдалитьАналитику.Доступность = ДоступностьУдаления;
		Элементы.СкопироватьСоСмещениемВниз1.Доступность = ДоступностьСмещенияВниз;
		Элементы.СкопироватьАналитику.Доступность = ДоступностьКопирования;
		Элементы.ВставитьАналитику.Доступность = ДоступностьВставки;
		
		Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюУдалитьАналитику.Доступность = ДоступностьУдаления;
		Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюСкопироватьСоСмещениемВниз1.Доступность = ДоступностьСмещенияВниз;
		Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюСкопироватьАналитику.Доступность = ДоступностьКопирования;
		Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюВставитьАналитику.Доступность = ДоступностьВставки;
		
	ИначеЕсли РежимРаботы = "Формулы" тогда
		
		ДоступностьСмещенияВниз = Истина;
		ДоступностьСмещенияВправо = Истина;
		ДоступностьКопирования = Истина;  
		ДоступностьВставки = Истина;      
		ДоступностьСуммыПоИерархии = Истина;
		ДоступностьОтбораОперандов = Истина;
		ДоступностьДереваПоказателя = Истина;
		
		ТекущаяОбласть = ПолеТабличногоДокументаМакет.ТекущаяОбласть;
		
		Если ТекущаяОбласть.Верх < ОбластьДанныхВерх
			ИЛИ ТекущаяОбласть.Лево < ОбластьДанныхЛево
			ИЛИ ТекущаяОбласть.Верх > ОбластьДанныхНиз
			ИЛИ ТекущаяОбласть.Лево > ОбластьДанныхПраво тогда
			
			ДоступностьСмещенияВниз = Ложь;
			ДоступностьСмещенияВправо = Ложь;
			ДоступностьКопирования = Ложь;  
			ДоступностьВставки = Ложь;
			ДоступностьСуммыПоИерархии = Ложь;
			ДоступностьОтбораОперандов = Ложь;
			ДоступностьДереваПоказателя = Ложь;
						
		КонецЕсли;
		
		Если ТекущаяОбласть.Лево <> ТекущаяОбласть.Право тогда
			ДоступностьСмещенияВниз = Ложь;
			ДоступностьКопирования = Ложь;
			ДоступностьДереваПоказателя = Ложь;
		КонецЕсли;
			
		Если ТекущаяОбласть.Верх <> ТекущаяОбласть.Низ тогда
			ДоступностьСмещенияВправо = Ложь;
			ДоступностьКопирования = Ложь;
			ДоступностьДереваПоказателя = Ложь;
		КонецЕсли;
		
		ДоступностьВставки = Мин(ДоступностьВставкиФормулы, ДоступностьВставки);
		
		Элементы.СкопироватьСоСмещениемВниз.Доступность = ДоступностьСмещенияВниз;
		Элементы.СкопироватьСоСмещениемВправо.Доступность = ДоступностьСмещенияВправо;
		Элементы.СкопироватьФормулу.Доступность = ДоступностьКопирования;
		Элементы.ВставитьФормулу.Доступность = ДоступностьВставки;
		Элементы.СуммаПоИерархииСтрок.Доступность = ДоступностьСуммыПоИерархии;
		Элементы.ОтборОперандов.Доступность = ДоступностьОтбораОперандов;
		Элементы.ОтобразитьДеревоПоказателя.Доступность = ДоступностьДереваПоказателя;
		
		Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюСкопироватьСоСмещениемВниз.Доступность = ДоступностьСмещенияВниз;
		Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюСкопироватьСоСмещениемВправо.Доступность = ДоступностьСмещенияВправо;
		Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюСкопироватьФормулу.Доступность = ДоступностьКопирования;
		Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюВставитьФормулу.Доступность = ДоступностьВставки;
		Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюСуммаПоИерархииСтрок.Доступность = ДоступностьСуммыПоИерархии;
		Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюОтборОперандов.Доступность = ДоступностьОтбораОперандов;
		Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюОтобразитьДеревоПоказателя.Доступность = ДоступностьДереваПоказателя;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьФормулу(Команда)
	
	Для Каждого ВыдОбласть Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл	
		Если  ВыдОбласть.Верх =0 Тогда	
			Верх  = 1;
			Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	 
		ИначеЕсли  ВыдОбласть.Лево =0 Тогда	 	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = 1;
			Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;	
		Иначе	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	
		КонецЕсли;	
		
		Для ИндС = Верх По Низ Цикл
			Для ИндК = Лево По Право Цикл
				ТекОбл = ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);
				Если ТипЗнч(ТекОбл.Расшифровка) = Тип("Структура") И ТекОбл.Расшифровка.Свойство("Показатель") Тогда
										
					СнятьВыделениеОбласти();
					
					ОбластьДляВыделенияЛево = ТекОбл.Лево;
					ОбластьДляВыделенияВерх = ТекОбл.Верх;
					
					ВыделитьОбласть();
					Элементы.ВставитьФормулу.Доступность = Истина;
					ДоступностьВставкиФормулы = Истина;
					
					Прервать;
					
				КонецЕсли;	  				
			КонецЦикла;	
		КонецЦикла;			
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьФормулу(Команда)
	
	ВыделенныеЯчейки = Новый Массив;
	
	Для Каждого ВыдОбласть Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл	
		Если  ВыдОбласть.Верх =0 Тогда	
			Верх  = 1;
			Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	 
		ИначеЕсли  ВыдОбласть.Лево =0 Тогда	 	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = 1;
			Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;	
		Иначе	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	
		КонецЕсли;	
		
		Для ИндС = Верх По Низ Цикл
			Для ИндК = Лево По Право Цикл
				ТекОбл = ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);
				
				ВыделенныеЯчейки.Добавить(ТекОбл.Имя);
				
			КонецЦикла;	
		КонецЦикла;			
	КонецЦикла;
	
	ВставитьФормулыСервер(ВыделенныеЯчейки);
	
	СнятьВыделениеОбласти();
	
КонецПроцедуры
	
&НаСервере
Процедура ВставитьФормулыСервер(ВыделенныеЯчейки)
		
	РасшифровкаИсточник = ПолеТабличногоДокументаМакет.Область(ОбластьДляВыделенияВерх,ОбластьДляВыделенияЛево,ОбластьДляВыделенияВерх,ОбластьДляВыделенияЛево).Расшифровка;
	
	Если ТипЗнч(РасшифровкаИсточник) <> Тип("Структура") ИЛИ НЕ РасшифровкаИсточник.Свойство("Показатель") 
		ИЛИ НЕ РасшифровкаИсточник.Свойство("Процедура") Тогда
		
		Возврат;
	КонецЕсли;
			
	ОперандыТекущейФормулы = ПолучитьОперандыТекущегоПотребителя(РасшифровкаИсточник.Показатель);
	ТекстПроцедурыИсточник = РасшифровкаИсточник.Процедура;
	
	Для Каждого ВыдОбластьПоказателя Из ВыделенныеЯчейки Цикл
		
		тОбластьРасшифровка = ПолеТабличногоДокументаМакет.Область(ВыдОбластьПоказателя).Расшифровка;
				
		Если ТипЗнч(тОбластьРасшифровка) = Тип("Структура") И тОбластьРасшифровка.Свойство("Показатель") Тогда
			
			тОбластьПоказатель = тОбластьРасшифровка.Показатель;
			ТекстПроцедуры = ТекстПроцедурыИсточник;
			
			Для Каждого СтрОперанд Из ОперандыТекущейФормулы Цикл
								
				тПоказатель = Справочники.ПоказателиОтчетов.НайтиПоКоду(СокрЛП(СтрОперанд.ПоказательОтборКод),,, ВидОтчета);
				
				Если ЗначениеЗаполнено(тПоказатель) Тогда
					ПроцедураСкопироватьОперандПоИсточнику(ТекстПроцедуры, СтрОперанд.ИсточникДанных, тОбластьПоказатель, тПоказатель, СтрОперанд.КодИсточника);
				Иначе
					ПроцедураСкопироватьОперандПоИсточнику(ТекстПроцедуры, СтрОперанд.ИсточникДанных, тОбластьПоказатель,, СтрОперанд.КодИсточника);
				КонецЕсли;
				
			КонецЦикла;
			
			ТекстПроцедуры = СтрЗаменить(ТекстПроцедуры,"[","{");
			ТекстПроцедуры = СтрЗаменить(ТекстПроцедуры,"]","}");
			
			ТекстПроцедуры = СтрЗаменить(ТекстПроцедуры,"%!","[");
			ТекстПроцедуры = СтрЗаменить(ТекстПроцедуры,"!%","]");
			
			СтруктураДанных=Новый Структура;
			СтруктураДанных.Вставить("ТекстПроцедуры",ТекстПроцедуры);
			СтруктураДанных.Вставить("ТипЯчейки","Показатель");
			СтруктураДанных.Вставить("ВидФормулы",0);
			СтруктураДанных.Вставить("ИтоговаяЯчейка","");
			СтруктураДанных.Вставить("Владелец",ВидОтчета);
			СтруктураДанных.Вставить("НазначениеРасчетов",ПравилоОбработки);
			СтруктураДанных.Вставить("ПотребительРасчета",тОбластьПоказатель);
			СтруктураДанных.Вставить("ПроизвольныйКод",Ложь);
			СтруктураДанных.Вставить("ПересчитыватьПриОткрытии",Ложь);
			СтруктураДанных.Вставить("РедактированиеВозможно",	Ложь);
			СтруктураДанных.Вставить("СпособИспользования",ПредопределенноеЗначение("Перечисление.СпособыИспользованияОперандов.ДляФормулРасчета"));
			
			Если НЕ УправлениеОтчетамиУХ.ОбработатьТекстУпрощеннойФормулы(СтруктураДанных) Тогда		
				Продолжить;	
			КонецЕсли;
			
			УправлениеОтчетамиУХ.ЗаписатьПроцедуруРасчета(СтруктураДанных);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ЗаполнитьДеревоСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтборОперандов(Команда)
		
	//Определить позицию курсора
	НачалоСтроки = 0;
	НачалоКолонки = 0;
	КонецСтроки = 0;
	КонецКолонки = 0;
		
	Элементы.ПолеТекстовогоДокументаПроцедура.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	
	//Если формула многострочная - собрать в одну строку,
	//скорректировав позицию курсора
	ФормулаОднойСтрокой = "";
	ПоправкаНаДлинуСтрокиНачало = 0;
	ПоправкаНаДлинуСтрокиКонец = 0;
	КоличествоСтрок = ПолеТекстовогоДокументаПроцедура.КоличествоСтрок();
	
	Для Инд = 1 По НачалоСтроки - 1 Цикл
		ФормулаОднойСтрокой = ФормулаОднойСтрокой + ПолеТекстовогоДокументаПроцедура.ПолучитьСтроку(Инд);
	КонецЦикла;
	
	ПоправкаНаДлинуСтрокиНачало = СтрДлина(ФормулаОднойСтрокой);
	НачалоКолонки = Мин(НачалоКолонки, СтрДлина(ПолеТекстовогоДокументаПроцедура.ПолучитьСтроку(НачалоСтроки)) + 1) + ПоправкаНаДлинуСтрокиНачало;
	
	Для Инд = НачалоСтроки По КонецСтроки - 1 Цикл
		ФормулаОднойСтрокой = ФормулаОднойСтрокой + ПолеТекстовогоДокументаПроцедура.ПолучитьСтроку(Инд);
	КонецЦикла;
	
	ПоправкаНаДлинуСтрокиКонец = СтрДлина(ФормулаОднойСтрокой);
	КонецКолонки = Мин(КонецКолонки, СтрДлина(ПолеТекстовогоДокументаПроцедура.ПолучитьСтроку(КонецСтроки)) + 1) + ПоправкаНаДлинуСтрокиКонец;
	
	Для Инд = КонецСтроки По КоличествоСтрок Цикл
		ФормулаОднойСтрокой = ФормулаОднойСтрокой + ПолеТекстовогоДокументаПроцедура.ПолучитьСтроку(Инд);
	КонецЦикла;
		
	НачалоПоиска = Мин(Макс(НачалоКолонки - 1, 1), СтрДлина(ФормулаОднойСтрокой));
	КонецПоиска = Мин(КонецКолонки, СтрДлина(ФормулаОднойСтрокой));
		
	НачалоПервогоОперанда = СтрНайти(ФормулаОднойСтрокой, "[", НаправлениеПоиска.СКонца, НачалоПоиска);
	КонецОперандаПередПервым = СтрНайти(ФормулаОднойСтрокой, "]", НаправлениеПоиска.СКонца, НачалоПоиска);
	
	Если КонецОперандаПередПервым > НачалоПервогоОперанда И НачалоПервогоОперанда > 0 тогда
		НачалоПервогоОперанда = 0;
	КонецЕсли;
	
	Если НачалоПервогоОперанда = 0 тогда		
		НачалоПервогоОперанда = СтрНайти(ФормулаОднойСтрокой, "[", НаправлениеПоиска.СНачала, НачалоПоиска);
	КонецЕсли;
	
	НачалоПервогоОперандаФС = СтрНайти(ФормулаОднойСтрокой, "{", НаправлениеПоиска.СКонца, НачалоПоиска);
	КонецОперандаПередПервымФС = СтрНайти(ФормулаОднойСтрокой, "}", НаправлениеПоиска.СКонца, НачалоПоиска);
	
	Если КонецОперандаПередПервымФС > НачалоПервогоОперандаФС И НачалоПервогоОперандаФС > 0 тогда
		НачалоПервогоОперандаФС = 0;
	КонецЕсли;
	
	Если НачалоПервогоОперандаФС = 0 тогда		
		НачалоПервогоОперандаФС = СтрНайти(ФормулаОднойСтрокой, "{", НаправлениеПоиска.СНачала, НачалоПоиска);
	КонецЕсли;
	
	Если НачалоПервогоОперанда = 0 И НачалоПервогоОперандаФС <> 0 тогда
		НачалоПервогоОперанда = НачалоПервогоОперандаФС;
	КонецЕсли;
	
	Если НачалоПервогоОперанда <> 0 И НачалоПервогоОперандаФС <> 0 тогда 
		НачалоПервогоОперанда = Мин(НачалоПервогоОперанда, НачалоПервогоОперандаФС);
	КонецЕсли;
		
	КонецПоследнегоОперанда = СтрНайти(ФормулаОднойСтрокой, "]", НаправлениеПоиска.СНачала, КонецПоиска);
	НачалоОперандаПослеПоследнего = СтрНайти(ФормулаОднойСтрокой, "[", НаправлениеПоиска.СНачала, КонецПоиска);
	
	Если КонецПоследнегоОперанда > НачалоОперандаПослеПоследнего И НачалоОперандаПослеПоследнего > 0 тогда
		КонецПоследнегоОперанда = 0;
	КонецЕсли;
	
	Если КонецПоследнегоОперанда = 0 тогда
		КонецПоследнегоОперанда = СтрНайти(ФормулаОднойСтрокой, "]", НаправлениеПоиска.СКонца, КонецПоиска);
	КонецЕсли;
	
	КонецПоследнегоОперандаФС = СтрНайти(ФормулаОднойСтрокой, "}", НаправлениеПоиска.СНачала, КонецПоиска);
	НачалоОперандаПослеПоследнегоФС = СтрНайти(ФормулаОднойСтрокой, "{", НаправлениеПоиска.СНачала, КонецПоиска);
	
	Если КонецПоследнегоОперандаФС > НачалоОперандаПослеПоследнегоФС И НачалоОперандаПослеПоследнегоФС > 0 тогда
		КонецПоследнегоОперандаФС = 0;
	КонецЕсли;
	
	Если КонецПоследнегоОперандаФС = 0 тогда
		КонецПоследнегоОперандаФС = СтрНайти(ФормулаОднойСтрокой, "}", НаправлениеПоиска.СКонца, КонецПоиска);
	КонецЕсли;
	
	Если КонецПоследнегоОперанда = 0 И КонецПоследнегоОперандаФС <> 0 тогда
		КонецПоследнегоОперанда = КонецПоследнегоОперандаФС;
	КонецЕсли;
	
	Если КонецПоследнегоОперанда <> 0 И КонецПоследнегоОперандаФС <> 0 тогда 
		КонецПоследнегоОперанда = Макс(КонецПоследнегоОперанда, КонецПоследнегоОперандаФС);
	КонецЕсли;
		
	Если НачалоПервогоОперанда = 0 ИЛИ КонецПоследнегоОперанда = 0 ИЛИ НачалоПервогоОперанда > КонецПоследнегоОперанда
		ИЛИ КонецКолонки < НачалоПервогоОперанда ИЛИ КонецПоследнегоОперанда < НачалоКолонки тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выделенная строка не содержит операндов!'"));
		Возврат;
	КонецЕсли;
	                                                                                                              
	ВыделенныйТекст = Сред(ФормулаОднойСтрокой, НачалоПервогоОперанда, КонецПоследнегоОперанда - НачалоПервогоОперанда + 1);
	МассивОперандов = Новый Массив;
	
	ДополнитьМассивОперандов(ВыделенныйТекст, ОбластьПоказателя, МассивОперандов);
	
	Если МассивОперандов.Количество() > 0 тогда
		ОткрытьФормуОтбораОперандов(МассивОперандов);
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьМассивОперандов(ВыделенныйТекст, ИмяОбласти, МассивОперандов)
	
	ВыделенныйТекстДлина = СтрДлина(ВыделенныйТекст);
	НеЗаписанныеОперанды = "";
		
	Пока ВыделенныйТекстДлина > 0 Цикл
		
		НачалоОперанда = СтрНайти(ВыделенныйТекст, "[");
		КонецОперанда = СтрНайти(ВыделенныйТекст, "]");
		
		Если НачалоОперанда = 0 ИЛИ КонецОперанда = 0 тогда
			НачалоОперанда = СтрНайти(ВыделенныйТекст, "{");
			КонецОперанда = СтрНайти(ВыделенныйТекст, "}");
		КонецЕсли;
				
		Если НачалоОперанда = 0 ИЛИ КонецОперанда = 0 тогда
			Прервать;
		КонецЕсли;
		
		КодФормулы = Сред(ВыделенныйТекст, НачалоОперанда + 1, КонецОперанда - НачалоОперанда - 1);
		
		ИсточникДанных = ПолучитьИсточникПоКодуУпрощеннойФормулы(КодФормулы, ПравилоОбработки, 
			ПолеТабличногоДокументаМакет.Область(ИмяОбласти).Расшифровка.Показатель);
		
		Если ИсточникДанных.Свойство("Ссылка") тогда
			Если ЗначениеЗаполнено(ИсточникДанных.Ссылка) тогда
				МассивОперандов.Добавить(ИсточникДанных.Ссылка);
			КонецЕсли;
		Иначе
			ИсточникДанных = ПолучитьИсточникПоКодуУпрощеннойФормулы("{" + КодФормулы + "}", ПравилоОбработки, 
				ПолеТабличногоДокументаМакет.Область(ИмяОбласти).Расшифровка.Показатель);
			
			Если ИсточникДанных.Свойство("Ссылка") тогда
				Если ЗначениеЗаполнено(ИсточникДанных.Ссылка) тогда
					МассивОперандов.Добавить(ИсточникДанных.Ссылка);
				КонецЕсли;
			Иначе
				НеЗаписанныеОперанды = НеЗаписанныеОперанды + ", """ + КодФормулы + """";
			КонецЕсли;
		КонецЕсли;
				
		КодФормулы = Сред(ВыделенныйТекст, НачалоОперанда, КонецОперанда - НачалоОперанда + 1);
		ВыделенныйТекст = СокрЛП(СтрЗаменить(ВыделенныйТекст, КодФормулы, ""));
				
		ВыделенныйТекстДлина = СтрДлина(ВыделенныйТекст);
		
	КонецЦикла;
	
	Если НеЗаписанныеОперанды <> "" тогда
		НеЗаписанныеОперанды = Сред(НеЗаписанныеОперанды, 3);
		
		Если СтрНайти(НеЗаписанныеОперанды, ",") = 0 тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Операнд %1 не записан и не может быть настроен! Необходимо сохранить формулу!'"), НеЗаписанныеОперанды));
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Операнды %1 не записаны и не могут быть настроены! Необходимо сохранить формулу!'"), НеЗаписанныеОперанды));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтбораОперандов(МассивОперандов)
		
	ОткрытьФорму("Обработка.НастройкаСтруктурыОтчета.Форма.ФормаОтбораОперандов", Новый Структура("МассивОперандов, ВидОтчета", МассивОперандов, ВидОтчета),,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОперандов(Команда)
	
	МассивОперандов = Новый Массив;
	
	Для Каждого ВыдОбласть Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл	
		
		Если ВыдОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Таблица Тогда
			Верх  = 1;
			Лево  = 1;
			Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;
			Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
		ИначеЕсли  ВыдОбласть.Верх =0 Тогда	
			Верх  = 1;
			Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	 
		ИначеЕсли  ВыдОбласть.Лево =0 Тогда	 	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = 1;
			Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;	
		Иначе	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	
		КонецЕсли;	
		
		Для ИндС = Верх По Низ Цикл
			Для ИндК = Лево По Право Цикл
				
				ВыделенныйТекст = ПолеТабличногоДокументаМакет.Область(ИндС, ИндК, ИндС, ИндК).Текст;
				ИмяОбласти = ПолеТабличногоДокументаМакет.Область(ИндС, ИндК, ИндС, ИндК).Имя;
				
				ДополнитьМассивОперандов(ВыделенныйТекст, ИмяОбласти, МассивОперандов);
					  				
			КонецЦикла;	
		КонецЦикла;
		
	КонецЦикла;
	
	ОткрытьФормуОтбораОперандов(МассивОперандов);
	
КонецПроцедуры

