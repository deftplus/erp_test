
&НаСервере
Функция СформироватьДанныеОбъекта(Операнд)
	
	ДанныеОбъекта = Новый Структура;
	
	МассивАдресовОперандов = ТаблицаАдресовОперандов.НайтиСтроки(Новый Структура("Операнд", Операнд));
	
	Если МассивАдресовОперандов.Количество() > 0 тогда
		ДанныеОбъекта.Вставить("РабочийОбъектАдрес", МассивАдресовОперандов[0].АдресОперанда);
	Иначе
		ДанныеОбъекта.Вставить("РабочийОбъектАдрес", "");
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("ТипБД", Операнд.ТипБД);
	ДанныеОбъекта.Вставить("ТипБДПриемник", Операнд.ТипБДПриемник);
	ДанныеОбъекта.Вставить("СпособПолучения", Операнд.СпособПолучения);
	ДанныеОбъекта.Вставить("СпособИспользования", Операнд.СпособИспользования);
	ДанныеОбъекта.Вставить("УникальныйИдентификатор", ЭтаФорма.УникальныйИдентификатор);
	ДанныеОбъекта.Вставить("ТекСоединениеВИБ", Неопределено);
	ДанныеОбъекта.Вставить("Отказ", Ложь);
	ДанныеОбъекта.Вставить("Использование77", Ложь);
	ДанныеОбъекта.Вставить("ВнутренниеДанные", Истина);
			
	Возврат ДанныеОбъекта;
	
КонецФункции // СформироватьСтруктуруСтрокиВИБ()

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляОграниченияТипа(ДанныеОбъекта)
		
	СправочникОбъект=ПолучитьИзВременногоХранилища(ДанныеОбъекта.РабочийОбъектАдрес);
	
	ОперандОбъект = СправочникОбъект.Ссылка.ПолучитьОбъект();
	ОперандОбъект.ПодготовитьТаблицыСопоставленийИОтборов();
	СправочникОбъект.Вставить("мСоответствиеИзмеренийСпособовИТипов", ОперандОбъект.мСоответствиеИзмеренийСпособовИТипов);
	
	МассивОграничений=Новый Массив;
	ВнешниеДанные=НЕ ДанныеОбъекта.ВнутренниеДанные;
	СпособПолучения=ДанныеОбъекта.СпособПолучения;
	
	ИмяПараметра=ДанныеОбъекта.ИмяПараметра;
	СпособВычисленияПараметра=ДанныеОбъекта.СпособВычисленияПараметра;
	
	Если НЕ ЗначениеЗаполнено(СпособВычисленияПараметра) тогда
		Возврат МассивОграничений;	
	КонецЕсли;
	
	Если СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ТипЗначения Тогда
		
		МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","УточнениеСпособаОпределения",Тип("Строка")));
		
	ИначеЕсли СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокТиповЗначений Тогда
		
		МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения,ТипДанныхСписка","УточнениеСпособаОпределения",Тип("СписокЗначений"),Тип("Строка")));
		
	ИначеЕсли СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Больше
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.БольшеИлиРавно
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Меньше
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.МеньшеИлиРавно Тогда
			
		МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","УточнениеСпособаОпределения",ДанныеОбъекта.ТипЗначения[0].Значение));
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия Тогда
		
		Если СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение
			ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
						
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","УточнениеСпособаОпределения",ДанныеОбъекта.ТипДанныхПоля[0].Значение));
						
		ИначеЕсли  СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений
			ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений
			ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии
			ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии Тогда
						
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения,ТипДанныхСписка","УточнениеСпособаОпределения",Тип("СписокЗначений"),ДанныеОбъекта.ТипДанныхПоля[0].Значение));
			
		ИначеЕсли СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета
			ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда
			
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","УточнениеСпособаОпределения",Тип("СправочникСсылка.Организации")));
			
		ИначеЕсли НЕ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ИсходныйДокумент Тогда
			
			СтрокаЗначения = СправочникОбъект.мСоответствиеИзмеренийСпособовИТипов.Найти(СпособВычисленияПараметра,"СпособВычисления");
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","УточнениеСпособаОпределения",СтрокаЗначения.ТипДанныхУточнение,СтрокаЗначения.ИзКонтекста));
						
		КонецЕсли;
		
	ИначеЕсли (СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению) Тогда
		
		Если Не ВнешниеДанные Тогда
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","УточнениеСпособаОпределения",ДанныеОбъекта.ТипДанныхПоля[0].Значение));			
		Иначе
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","УточнениеСпособаОпределения",Новый ОписаниеТипов("Неопределено")));			
		КонецЕсли;
			
	ИначеЕсли (СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии) Тогда
		
		Если Не ВнешниеДанные Тогда
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения,ТипДанныхСписка","УточнениеСпособаОпределения",Тип("СписокЗначений"),ДанныеОбъекта.ТипДанныхПоля[0].Значение));
		Иначе
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","УточнениеСпособаОпределения",Тип("СписокЗначений")));
		КонецЕсли;
						
	ИначеЕсли СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда
		
		МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","УточнениеСпособаОпределения",Тип("СправочникСсылка.Организации")));
		
	ИначеЕсли НЕ (СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии) Тогда
		
		СтрокаЗначения = СправочникОбъект.мСоответствиеИзмеренийСпособовИТипов.Найти(СпособВычисленияПараметра,"СпособВычисления");
		
		Если СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ИнтервалПериодов Тогда
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","УточнениеСпособаОпределения",Тип("СписокЗначений")));			
		Иначе
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения,ИзКонтекста","УточнениеСпособаОпределения",СтрокаЗначения.ТипДанныхУточнение,СтрокаЗначения.ИзКонтекста));			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивОграничений;
			
КонецФункции

&НаСервере
Функция ЕстьУточнениеОтбора(СпособВычисленияПараметра)
	
	Возврат НЕ (СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ОрганизацияОтчета
		ИЛИ СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчета
		ИЛИ СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчетаИерархия
		ИЛИ СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчета
		ИЛИ СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчета
		ИЛИ СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчета
		ИЛИ СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.СценарийОтчета
		ИЛИ СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ВалютаОтчета
		ИЛИ СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета
		ИЛИ СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется);
	
КонецФункции

&НаКлиенте
Процедура УстановитьОграничениеТипа(ДанныеДляОграничения, СпособВычисленияПараметра)
		
	ЭлементУправления = Элементы.ДеревоПараметровОтбораБД.ПодчиненныеЭлементы[ДанныеДляОграничения.ИмяКолонки];
	
	Если ДанныеДляОграничения.Свойство("ТипЗначения") Тогда
		
		Если НЕ ТипЗнч(ДанныеДляОграничения.ТипЗначения) = Тип("Массив") Тогда
			Массив = Новый Массив;
			Массив.Добавить(ДанныеДляОграничения.ТипЗначения);
		Иначе
			Массив = ДанныеДляОграничения.ТипЗначения;
		КонецЕсли;
		
		ЭлементУправления.Доступность = Истина;
				
		Если ЕстьУточнениеОтбора(СпособВычисленияПараметра) Тогда
			ЭлементУправления.ТолькоПросмотр = Ложь;
		Иначе	
			ЭлементУправления.ТолькоПросмотр = Истина;
			Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные[ДанныеДляОграничения.ИмяКолонки] = ЭлементУправления.ОграничениеТипа.ПривестиЗначение();	
		КонецЕсли;
		
		ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов(Массив);
		
		Если Массив.Найти(ТипЗнч(Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные[ДанныеДляОграничения.ИмяКолонки])) = Неопределено Тогда
			
			Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные[ДанныеДляОграничения.ИмяКолонки] = ЭлементУправления.ОграничениеТипа.ПривестиЗначение();
			
		КонецЕсли;
		
		Если ДанныеДляОграничения.Свойство("ТипДанныхСписка") Тогда
			
			Массив = Новый Массив;
			Массив.Добавить(ДанныеДляОграничения.ТипДанныхСписка);
			
			Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные[ДанныеДляОграничения.ИмяКолонки].ТипЗначения=Новый ОписаниеТипов(Массив);
			
		КонецЕсли;
		
	Иначе
		
		Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные[ДанныеДляОграничения.ИмяКолонки]=Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьТаблицуВычисленияПараметров()
	
	ВосстановитьНастройкиОперанда();
		
КонецПроцедуры // ЗаполнитьТаблицуВычисленияПараметров()

&НаСервере
Процедура ДополнитьОбъектОперанда(ОперандОбъект)
		
	ОперандОбъект.ДеревоПолейБД	= РеквизитФормыВЗначение("ДеревоПолейБД");
	ОперандОбъект.ДеревоПараметровОтбораБД = РеквизитФормыВЗначение("ДеревоПараметровОтбораБД");
	ОперандОбъект.ТаблицаСоответствияБД = РеквизитФормыВЗначение("ТаблицаСоответствияБД");
			
КонецПроцедуры // ДополнитьОбъектОперанда()

&НаСервере
Процедура ПоместитьРабочийОбъект()
	
	ТаблицаАдресовОперандов.Очистить();
	
	Для Каждого Операнд Из СписокОперандов Цикл	
		ОперандОбъект = Операнд.Значение.ПолучитьОбъект();
		СтрокаАдресаОперанда = ТаблицаАдресовОперандов.Добавить();
		
		СтрокаАдресаОперанда.Операнд = Операнд.Значение;
		СтрокаАдресаОперанда.СпособПолучения = Операнд.Значение.СпособПолучения;
		СтрокаАдресаОперанда.ТипБДПриемник = Операнд.Значение.ТипБДПриемник;
		СтрокаАдресаОперанда.АдресОперанда = ПоместитьВоВременноеХранилище(ОперандОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(), ЭтаФорма.УникальныйИдентификатор);
	КонецЦикла;
					
КонецПроцедуры // ПоместитьРабочийОбъект()

&НаКлиенте
Процедура ПолучитьУстановитьОграничениеТипа()
	
	СтрПоле = Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные;
	
	Если СтрПоле.ТипЗначения.Количество() > 0 Тогда
		
		ДанныеОбъекта = СформироватьДанныеОбъекта(СтрПоле.Операнд);
		ДанныеОбъекта.Вставить("ИмяПараметра",				Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ПолеБД);
		ДанныеОбъекта.Вставить("ТипДанныхПоля",				Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ТипДанныхПоля);
		ДанныеОбъекта.Вставить("ТипЗначения",				Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ТипЗначения);
		ДанныеОбъекта.Вставить("СпособВычисленияПараметра",	Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.СпособВычисленияПараметра);
		
		СтрокиАдресовОперандов = ТаблицаАдресовОперандов.НайтиСтроки(Новый Структура("Операнд", СтрПоле.Операнд));
		
		Если СтрокиАдресовОперандов.Количество() > 0 тогда
				
			СтрокаАдресОперанда = СтрокиАдресовОперандов[0];
					
			ДанныеОбъекта.Вставить("ВнутренниеДанные", Истина);
			ДанныеОбъекта.Вставить("РабочийОбъектАдрес", СтрокаАдресОперанда.АдресОперанда);
			ДанныеОбъекта.Вставить("СпособПолучения", СтрокаАдресОперанда.СпособПолучения);
			ДанныеОбъекта.Вставить("ТипБДПриемник", СтрокаАдресОперанда.ТипБДПриемник);
			
			ДанныеДляОграничения = ПолучитьДанныеДляОграниченияТипа(ДанныеОбъекта);
			
			Если ДанныеДляОграничения.Количество() > 0 Тогда
				
				Для Каждого СтрОграничение ИЗ ДанныеДляОграничения Цикл
					
					УстановитьОграничениеТипа(СтрОграничение, ДанныеОбъекта.СпособВычисленияПараметра);
					
				КонецЦикла;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.УточнениеСпособаОпределения) Тогда
				
				Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.УточнениеСпособаОпределения = Неопределено;				
				Элементы.ДеревоПараметровОтбораБД.ПодчиненныеЭлементы.УточнениеСпособаОпределения.ОграничениеТипа	= Новый ОписаниеТипов("Неопределено");
								
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СпособВычисленияПараметраПриИзменении(Элемент)
	
	ПолучитьУстановитьОграничениеТипа();
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьОтбора(ДанныеПоля)
	
	Если ДанныеПоля.Измерение Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Критерии отбора полей произвольного запроса должны быть указаны в тексте запроса'"));
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
		
КонецФункции // ПроверитьВозможностьОтбора()

&НаКлиенте
Функция ПолучитьНовуюСтрокуУсловия()
	
	ТекСтрокаОтбор=Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные;
	
	Если ТекСтрокаОтбор=Неопределено Тогда
		
		НоваяСтрока=ДеревоПараметровОтбораБД.ПолучитьЭлементы().Добавить();
			
	ИначеЕсли ТекСтрокаОтбор.ПолучитьРодителя()=Неопределено Тогда
		
		НоваяСтрока=ДеревоПараметровОтбораБД.ПолучитьЭлементы().Добавить();
		
	Иначе
		
		НоваяСтрока=ТекСтрокаОтбор.ПолучитьРодителя().ПолучитьЭлементы().Добавить();
		
	КонецЕсли;

	Возврат НоваяСтрока; 
		
КонецФункции //

&НаКлиенте
Процедура ДобавитьСтрокуУсловия(ДанныеПоля)
	
	НоваяСтрока=ПолучитьНовуюСтрокуУсловия();
		
	ЗаполнитьЗначенияСвойств(НоваяСтрока,ДанныеПоля);
	
	Если ДанныеПоля.ТипДанныхПоля.Количество()>0 Тогда
		НоваяСтрока.НастройкаСоответствия=ДанныеПоля.ТипДанныхПоля[0].Значение;
	КонецЕсли;
	
	Модифицированность=Истина;
		
КонецПроцедуры // ДобавитьСтрокуУсловия()

&НаКлиенте
Процедура ДобавитьЭлементУсловия(Команда)
	
	ДанныеПоля=Элементы.ДеревоПолейБД.ТекущиеДанные;
	
	Если ПроизвольныйЗапрос И (Не ПроверитьВозможностьОтбора(ДанныеПоля)) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеПоля=Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДобавитьСтрокуУсловия(ДанныеПоля);
			
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПараметрыЗаполнить(Команда)
	
	Если ТабПравилаВычисленияПараметров.Количество()>0  Тогда
		
		ОчиститьТаблицу = Неопределено;
		
		Оповещение = Новый ОписаниеОповещения("КоманднаяПанельПараметрыЗаполнитьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Таблица параметров будет очищена.
									|Продолжить?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;		
		
	КонецЕсли;
	
	ЗаполнитьТаблицуВычисленияПараметров();

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Для Каждого Операнд Из Параметры.МассивОперандов Цикл
		СписокОперандов.Добавить(Операнд);
	КонецЦикла;
	
	ВидОтчета = Параметры.ВидОтчета;
	
	ВосстановитьНастройкиОперанда();
			
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыКоллекции(ДеревоПолей, ДеревоЗначений, ПолеПоиска, Операнд)
		
	СтруктураПоиска = Новый Структура(ПолеПоиска, "");
	
	Для Каждого Строка ИЗ ДеревоПолей.Строки Цикл
				
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
				
		МассивСтрок = ДеревоЗначений.Строки.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество() = 0 тогда
			СтрокаДерева = ДеревоЗначений.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаДерева, Строка);
			СтрокаДерева.Операнд = Операнд;
		Иначе
			СтрокаДерева = МассивСтрок[0];
			
			Если ПолеПоиска = "ПолеБД" тогда
								
				Если СтрокаДерева.СпособВычисленияПараметра <> Строка.СпособВычисленияПараметра
					ИЛИ (СтрокаДерева.УточнениеСпособаОпределения <> Строка.УточнениеСпособаОпределения
					И НЕ (ТипЗнч(СтрокаДерева.УточнениеСпособаОпределения) = Тип("СписокЗначений")
						И ТипЗнч(Строка.УточнениеСпособаОпределения) = Тип("СписокЗначений")
						И ОбщегоНазначенияУХ.СравнитьСпискиЗначений(СтрокаДерева.УточнениеСпособаОпределения, Строка.УточнениеСпособаОпределения))) тогда
					
					СтрокаДерева.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ПустаяСсылка();
					СтрокаДерева.УточнениеСпособаОпределения = Неопределено;
				КонецЕсли;
								
			КонецЕсли;
			
		КонецЕсли;
		
		Если Строка.Строки.Количество() > 0 Тогда
			ДобавитьЭлементыКоллекции(Строка, СтрокаДерева, ПолеПоиска, Операнд);
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры // ПоместитьТаблицуЗначенийВКоллекциюФормы()

&НаСервере
Процедура ВосстановитьНастройкиОперанда()
		
	ДеревоПолейДанные = РеквизитФормыВЗначение("ДеревоПолейБД");
	ДеревоПолейДанные.Строки.Очистить();
		
	ДеревоПараметровОтбораДанные = РеквизитФормыВЗначение("ДеревоПараметровОтбораБД");
	ДеревоПараметровОтбораДанные.Строки.Очистить();
		
	ТаблицаАдресовОперандов.Очистить();
	
	Для Каждого Операнд Из СписокОперандов Цикл
			
		ОперандОбъект = Операнд.Значение.ПолучитьОбъект();
				
		ОперандОбъект.ПодготовитьТаблицыСопоставленийИОтборов();
				
		ДобавитьЭлементыКоллекции(ОперандОбъект.ДеревоПолейБД, ДеревоПолейДанные, "НаименованиеБД", Операнд.Значение);
		ДобавитьЭлементыКоллекции(ОперандОбъект.ДеревоПараметровОтбораБД, ДеревоПараметровОтбораДанные, "ПолеБД", Операнд.Значение);
		
		СтрокаАдресаОперанда = ТаблицаАдресовОперандов.Добавить();
		
		СтрокаАдресаОперанда.Операнд = Операнд.Значение;
		СтрокаАдресаОперанда.СпособПолучения = Операнд.Значение.СпособПолучения;
		СтрокаАдресаОперанда.ТипБДПриемник = Операнд.Значение.ТипБДПриемник;
		СтрокаАдресаОперанда.АдресОперанда = ПоместитьВоВременноеХранилище(ОперандОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(), ЭтаФорма.УникальныйИдентификатор);
		
	КонецЦикла;
		
	ЗначениеВРеквизитФормы(ДеревоПолейДанные, "ДеревоПолейБД");
	ЗначениеВРеквизитФормы(ДеревоПараметровОтбораДанные, "ДеревоПараметровОтбораБД");
					
КонецПроцедуры // ВосстановитьНастройкиОперанда()

&НаКлиенте
Процедура УточнениеСпособаОпределенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ДанныеОбъекта = СформироватьДанныеОбъекта(ТекДанные.Операнд);
		НастройкаПараметровОтбораУХ.ОбработатьВыборЗначенияПараметра(ТекДанные, ЭтаФорма, ДанныеОбъекта, Элемент, СтандартнаяОбработка);
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УточнениеСпособаОпределенияОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.СпособВыбора="";
	Элементы.ДеревоПараметровОтбораБД.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗакрыть(Команда)
	
	ЗаписатьНастройки();
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройки()
	
	СтруктураПоиска = Новый Структура("Операнд");
	
	Для Каждого Операнд Из СписокОперандов Цикл
			
		ОперандОбъект = Операнд.Значение.ПолучитьОбъект();
				
		СтруктураПоиска.Вставить("Операнд", Операнд.Значение);
		МассивАдресовОперандов = ТаблицаАдресовОперандов.НайтиСтроки(СтруктураПоиска);
		
		Если МассивАдресовОперандов.Количество() = 0 тогда
			Продолжить;
		КонецЕсли;
		
		ОперандОбъект.АдресХранилищаПеременныхДляРасчета = МассивАдресовОперандов[0].АдресОперанда;
		ОперандОбъект.ВосстановитьПеременныеДляРасчета();
		
		ДополнитьОбъектОперанда(ОперандОбъект);
	
		ОперандОбъект.СохранитьНастройкиОперанда();
		
		ОперандОбъект.Записать();
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьОтбор(Команда)
	
	ЗаписатьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПараметровОтбораБДПередУдалением(Элемент, Отказ)
	
	Отказ = (Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ПолеБД = "ДатаНач" 
		ИЛИ Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ПолеБД = "ДатаКон")
		И (НЕ Объект.ОсновнаяТаблицаРегистра);
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПараметровОтбораБДПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущийЭлемент.Имя="СпособВычисленияПараметра" Тогда
		
		ТекСписокВыбора = Элементы.ДеревоПараметровОтбораБД.ПодчиненныеЭлементы.СпособВычисленияПараметра.СписокВыбора;
		ТекСписокВыбора.Очистить();
		
		ТекСтрока = Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные;
		
		Если ТекСтрока.ТипЗначения.Количество() > 0 Тогда 
			
			ДанныеОбъекта = СформироватьДанныеОбъекта(ТекСтрока.Операнд);
			ДанныеОбъекта.Вставить("ИмяПараметра",		Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ПолеБД);
			ДанныеОбъекта.Вставить("ТипДанныхПоля",		Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ТипДанныхПоля);
			ДанныеОбъекта.Вставить("ТипЗначения",		Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ТипЗначения);
			ДанныеОбъекта.Вставить("ВнутренниеДанные",	Истина);
			
			СтрокиАдресовОперандов = ТаблицаАдресовОперандов.НайтиСтроки(Новый Структура("Операнд", ТекСтрока.Операнд));
			
			Если СтрокиАдресовОперандов.Количество() > 0 тогда
				
				СтрокаАдресОперанда = СтрокиАдресовОперандов[0];
				
				ДанныеОбъекта.Вставить("ВнутренниеДанные", Истина);
				ДанныеОбъекта.Вставить("РабочийОбъектАдрес", СтрокаАдресОперанда.АдресОперанда);
				ДанныеОбъекта.Вставить("СпособПолучения", СтрокаАдресОперанда.СпособПолучения);
				ДанныеОбъекта.Вставить("ТипБДПриемник", СтрокаАдресОперанда.ТипБДПриемник);
				
				СписокСпособовВычисления = ПолучитьСписокВозможныхСпособовВычисленияПараметра(ДанныеОбъекта);
				
				Для Каждого СпособОпределения ИЗ СписокСпособовВычисления Цикл					
					ТекСписокВыбора.Добавить(СпособОпределения.Значение, СпособОпределения.Представление);
				КонецЦикла;
								
			КонецЕсли;
			
		Иначе
			
			ТекСписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение"), Нстр("ru = 'Функция на встроенном языке (значение)'"));
			ТекСписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений"), Нстр("ru = 'Функция на встроенном языке (список значений)'"));
				
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "УточнениеСпособаОпределения" Тогда
		
		ПолучитьУстановитьОграничениеТипа();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВозможныхСпособовВычисленияПараметра(ДанныеОбъекта)
	
	Возврат РаботаСПолямиАналитикиУХ.ПолучитьСписокВозможныхСпособовВычисленияПараметра(ДанныеОбъекта);
		
КонецФункции // ПолучитьСписокВозможныхСпособовВычисленияПараметра()

&НаКлиенте
Процедура ДеревоПолейБДПередРазворачиванием(Элемент, Строка, Отказ)
	
	СтрокаРазворота=Элемент.ДанныеСтроки(Строка);
	
	Если НЕ (СтрокаРазворота.ТипМетаДанных = "Справочник" 
		ИЛИ СтрокаРазворота.ТипМетаДанных = "Документ"
		ИЛИ СтрокаРазворота.ТипМетаДанных = "ПланВидовХарактеристик" 
		ИЛИ СтрокаРазворота.ТипЗначения.Количество() > 1) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если СтрокаРазворота.ПолучитьЭлементы().Количество() > 0 И (НЕ ПустаяСтрока(СтрокаРазворота.ПолучитьЭлементы()[0].ПолеБД)) Тогда // Уже разворачивали эту строку
		Возврат;
	КонецЕсли;
		
	СтруктураСтрока = СформироватьСтруктуруСтрокиБД(СтрокаРазворота);
	ДанныеОбъекта = СформироватьДанныеОбъекта(СтрокаРазворота.Операнд);
	
	ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта,СтруктураСтрока);
	
	Отказ=ДанныеОбъекта.Отказ;
	
	Если Отказ Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаРазворота.ПолучитьЭлементы().Очистить();
	РабочийОбъектАдрес=ДанныеОбъекта.РабочийОбъектАдрес;
	
	Для Каждого СтрокаКДобавлению ИЗ СтруктураСтрока.СтрокиКДобавлению Цикл
		
		НоваяСтрока=СтрокаРазворота.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению);
		
		НоваяСтрока.Операнд = СтрокаРазворота.Операнд;
		
		Если СтрокаКДобавлению.СтрокиКДобавлению.Количество()>0 Тогда
			
			ДобавитьПодчиненныеСтроки(СтрокаКДобавлению,НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьСтруктуруСтрокиБД(ДанныеСтрокиАналитики)
	
	СтрокаБД = Новый Структура;
	
	СтрокаБД.Вставить("НаименованиеБД",				ДанныеСтрокиАналитики.НаименованиеБД);
	СтрокаБД.Вставить("СправочникБД",				ДанныеСтрокиАналитики.СправочникБД);	
	СтрокаБД.Вставить("ПолеБД",						ДанныеСтрокиАналитики.ПолеБД);
	СтрокаБД.Вставить("ТипЗначения",				ДанныеСтрокиАналитики.ТипЗначения);	
	СтрокаБД.Вставить("ТипДанныхПоля",				ДанныеСтрокиАналитики.ТипДанныхПоля);
	СтрокаБД.Вставить("ТипМетаДанных",				ДанныеСтрокиАналитики.ТипМетаДанных);
	СтрокаБД.Вставить("ВидАналитики",				ДанныеСтрокиАналитики.ВидАналитики);
		
	Возврат СтрокаБД;
	
КонецФункции // СформироватьСтруктуруСтрокиВИБ()

&НаСервереБезКонтекста
Процедура ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта,СтруктураСтрока) 
	
	РаботаСПолямиАналитикиУХ.ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта,СтруктураСтрока);
		
КонецПроцедуры // ПередРазворачиваниемСтрокиРеквизитовАналитики()

&НаКлиенте
Процедура ДобавитьПодчиненныеСтроки(Строка,ЭлементКоллекции)
	
	Для Каждого СтрокаКДобавлению ИЗ Строка.СтрокиКДобавлению Цикл
		
		НоваяСтрока=ЭлементКоллекции.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению);
		
		Если СтрокаКДобавлению.СтрокиКДобавлению.Количество()>0 Тогда
			
			ДобавитьПодчиненныеСтроки(СтрокаКДобавлению,НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ДобавитьПодчиненныеСтроки

&НаКлиенте
Процедура ДеревоПараметровОтбораБДПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя = "УточнениеСпособаОпределения" тогда
		Элемент.ТекущийЭлемент.ТолькоПросмотр = НЕ ЕстьУточнениеОтбора(Элемент.ТекущиеДанные.СпособВычисленияПараметра);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаРасчетЗначенияПараметра" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ТекстМодуля = Параметр.ТекстПроцедуры;
		
	ИначеЕсли ИмяСобытия = "ИзмененОтборПоПериметру" И ТипЗнч(Параметр) = Тип("СписокЗначений") Тогда
		
		Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.УточнениеСпособаОпределения = Параметр;
						
	КонецЕсли;
	
КонецПроцедуры

