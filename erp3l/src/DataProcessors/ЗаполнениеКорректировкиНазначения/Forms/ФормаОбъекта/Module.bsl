
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Проверка возможности открытия формы /отказ от открытия формы.
	Если Не Параметры.Свойство("Назначение") 
		И Не Параметры.Свойство("Заказ") Тогда
		ТекстИсключения = НСтр("ru = 'Форма не предназначена для непосредственного открытия.';
								|en = 'Form is not intended for direct opening.'");
		ВызватьИсключение ТекстИсключения;
		Возврат;
	КонецЕсли;
	
	СнятиеРезерва = Параметры.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв
		Или Параметры.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям;
	
	ВидОперации = Параметры.ВидОперации;
	
	Если Параметры.Свойство("Назначение") И ЗначениеЗаполнено(Параметры.Назначение)
	   И Параметры.Свойство("Заказ") И ЗначениеЗаполнено(Параметры.Заказ) Тогда
		Назначение = Параметры.Назначение;
		Заказ = Параметры.Заказ;
	ИначеЕсли Параметры.Свойство("Назначение") Тогда
		Назначение = Параметры.Назначение;
		Заказ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Назначение, "Заказ");
	Иначе
		Заказ = Параметры.Заказ;
		Назначение = Документы.КорректировкаНазначенияТоваров.НазначениеЗаказа(Заказ);
	КонецЕсли;
	
	//++ НЕ УТКА
	РеквизитыНазначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Назначение, "Партнер, ТипНазначения");
	ИспользуетсяДавальческоеНазначение = РеквизитыНазначения.ТипНазначения = Перечисления.ТипыНазначений.Давальческое21
		Или РеквизитыНазначения.ТипНазначения = Перечисления.ТипыНазначений.ДавальческоеМатериалы22
		Или РеквизитыНазначения.ТипНазначения = Перечисления.ТипыНазначений.ДавальческоеМатериалыПодЭтап22;
	
	// Запрет снятия резерва для назначений заказа давальца производства 2.1
	Если СнятиеРезерва И РеквизитыНазначения.ТипНазначения = Перечисления.ТипыНазначений.Давальческое21 Тогда
		ТекстИсключения = НСтр("ru = 'Запрещена операция снятия резерва для заказа давальца производства версии 2.1.';
								|en = 'Reserve removal operation is prohibited for the material provider order of production 2.1.'");
		ВызватьИсключение ТекстИсключения;
		Возврат;
	КонецЕсли;
	//-- НЕ УТКА
	
	Если Параметры.Свойство("КорректировкаНазначения") Тогда
		КорректировкаНазначения = Параметры.КорректировкаНазначения;
	КонецЕсли;
	
	Если Параметры.Свойство("УникальныйИдентификаторДляВременногоХранилища") Тогда
		УникальныйИдентификаторДляВременногоХранилища = Параметры.УникальныйИдентификаторДляВременногоХранилища;
	Иначе
		УникальныйИдентификаторДляВременногоХранилища = Новый УникальныйИдентификатор();
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		
		Организация = Параметры.Организация;
		Если Параметры.Свойство("Мастер") И Параметры.Мастер И ЗначениеЗаполнено(Заказ) Тогда
			Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "Организация");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ТоварыОтбор") Тогда
		Для каждого ЭлементМассива Из Параметры.ТоварыОтбор Цикл
			ЗаполнитьЗначенияСвойств(ТоварыОтбор.Добавить(), ЭлементМассива);
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("Количество") Тогда
		Количество = Параметры.Количество;
	КонецЕсли;
	
	ТолькоЗаказыОрганизации = ЗначениеЗаполнено(Организация)
		И(ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать
			Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям);
	
	ВыполнитьПервоначальноеЗаполнениеИНастроитьФорму();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТолькоЗаказыОрганизацииПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ЗаполнениеКорректировкиНазначения.ФормаОбъекта.Элемент.ТолькоЗаказыОрганизации.ПриИзменении");
	
	ЗаполнитьТаблицу();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаТовары

&НаКлиенте
Процедура ТаблицаТоварыСтрокаВыбранаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаТовары.ТекущиеДанные;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.ВстречнаяКорректировка")
	   И ТекущаяСтрока.ИндексСтраницы = 0 Тогда
		ПересчитатьКоличествоВстречнойКорректировки = Истина;
	КонецЕсли;
	
	СформироватьИнформационнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоварыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаТовары.ТекущиеДанные;
	ТекущаяСтрока.Отметка = ТекущаяСтрока.Количество > 0;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.ВстречнаяКорректировка")
	   И ТекущаяСтрока.ИндексСтраницы = 0 Тогда
		ПересчитатьКоличествоВстречнойКорректировки = Истина;
	КонецЕсли;
	
	СформироватьИнформационнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ЗаполнениеКорректировкиНазначения.ФормаОбъекта.Элемент.ТаблицаТовары.ПриАктивизацииСтроки");
	
	ПодключитьОбработчикОжидания("СформироватьИнформационнуюСтроку", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДереваПомещенияИЯчейки

&НаКлиенте
Процедура ДеревоПомещенияЯчейкиКоличествоВетвьПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоПомещенияЯчейки.ТекущиеДанные;
	
	СтруктураПересчетаЕдиниц = Новый Структура();
	СтруктураПересчетаЕдиниц.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураПересчетаЕдиниц, Неопределено);
	
	ТекущаяСтрока.Отметка = ТекущаяСтрока.Количество > 0;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВидОперацииПереключательПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ЗаполнениеКорректировкиНазначения.ФормаОбъекта.Элемент.ВидОперацииПереключатель.ПриИзменении");
	
	ВидОперацииПереключательПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСтроки(Команда)
	
	ОтметитьСтроки(Истина);
	
	СформироватьИнформационнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьСтроки(Команда)
	
	ОтметитьСтроки(Ложь);
	
	СформироватьИнформационнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ЗаполнениеКорректировкиНазначения.ФормаОбъекта.Элемент.ОтборРезервированияПоСкладуОтгрузки.ПриИзменении");
	
	РежимПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ЗаполнениеКорректировкиНазначения.ФормаОбъекта.Команда.Далее");
	ОчиститьСообщения();
	СтруктураВозврата = ДалееНаСервере();
	СтруктураСозданияДокумента = СтруктураВозврата.СтруктураСозданияДокумента;
	
	Если СтруктураВозврата.СменаСтраницы Тогда
		
		Если Не СтруктураВозврата.СменитьСтраницуТоваров Тогда
		
			Для Каждого Строка Из ДеревоПомещенияЯчейки.ПолучитьЭлементы() Цикл
				Элементы.ДеревоПомещенияЯчейки.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
			КонецЦикла;
		
		КонецЕсли;
		
	ИначеЕсли СтруктураВозврата.Закрыть Тогда
		
		Закрыть();
		
	ИначеЕсли Параметры.Мастер И ЗначениеЗаполнено(СтруктураСозданияДокумента.Ошибка) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураСозданияДокумента.Ошибка);
		
	ИначеЕсли Не ЗначениеЗаполнено(СтруктураСозданияДокумента)
		  Или Не СтруктураСозданияДокумента.Свойство("ОтобразитьСписокСозданныхДокументов")
		  Или Не СтруктураСозданияДокумента.ОтобразитьСписокСозданныхДокументов Тогда
		
		Если ЗначениеЗаполнено(СтруктураСозданияДокумента) И Параметры.Мастер Тогда
			Если СтруктураСозданияДокумента.Проведен Тогда
				НавигационнаяСсылкаДокумента = ПолучитьНавигационнуюСсылку(СтруктураСозданияДокумента.Документ);
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создана корректировка назначения товаров';
													|en = 'Inventory assignment adjustment is created'"), НавигационнаяСсылкаДокумента, СтруктураСозданияДокумента.Документ);
				Закрыть();
			КонецЕсли;
		Иначе
			
			ЕстьИзмененияКоличества = Ложь;
			АдресВХранилище = ПоместитьТоварыВХранилище(ЕстьИзмененияКоличества);
			ОповеститьОВыборе(Новый Структура("ТаблицаТовары, ВидОперации", АдресВХранилище, ВидОперации));
			
			Если ЕстьИзмененияКоличества Тогда
				ПоказатьОповещениеПользователя(НСтр("ru = 'Количество скорректировано';
													|en = 'Quantity is corrected'"),,
					НСтр("ru = 'Из указанного количества к снятию резерва исключены давальческие материалы';
						|en = 'Provided materials are excluded from the specified quantity for reserve removal'"),
					БиблиотекаКартинок.Информация32);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Если Элементы.Шаги.ТекущаяСтраница = Элементы.ШагПоСкладам Тогда
		
		ЗакрытьСтраницуТоваров = Истина;
		
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.ВстречнаяКорректировка") Тогда
			ПараметрыОтбора        = ПараметрыОтбораСтрок(Элементы);
			ЗакрытьСтраницуТоваров = ПараметрыОтбора.ИндексСтраницы = 0;
		КонецЕсли;
		
		Если ЗакрытьСтраницуТоваров Тогда
		
			Если Модифицированность Тогда
				ПоказатьВопрос(Новый ОписаниеОповещения("ОтменаЗавершение", ЭтотОбъект), НСтр("ru = 'Закрыть мастер создания корректировки назначения товаров?';
																								|en = 'Close the inventory assignment adjustment creation wizard?'"), РежимДиалогаВопрос.ДаНет);
			Иначе
				Закрыть();
			КонецЕсли;
		
		Иначе
			
			УстановитьОтборСтрокТаблицаТовары(Элементы, 0, ФильтрОтметка);
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.ШагПоПомещениямЯчейкам Тогда
		Элементы.Шаги.ТекущаяСтраница = Элементы.ШагПоСкладам;
		ДеревоПомещенияЯчейки.ПолучитьЭлементы().Очистить();
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.ШагСписокСозданныхДокументов Тогда
		
		Если СозданныеДокументы.Количество() > 0 Тогда
			
			ВсеДокументыУдалены = Истина;
			
			ЗначенияСвойствДокументов = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъектов(
											СозданныеДокументы.ВыгрузитьЗначения(), "ПометкаУдаления");
				
			Для каждого ЗначенияСвойствДокумента Из ЗначенияСвойствДокументов Цикл
				Если Не ЗначенияСвойствДокумента.Значение.ПометкаУдаления Тогда
					ВсеДокументыУдалены = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ВсеДокументыУдалены Тогда
			
				Кнопки = Новый СписокЗначений;
				Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Пометить на удаление созданные документы';
															|en = 'Mark created documents for deletion.'"));
				Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
				ТекстВопроса = НСтр("ru = 'При переходе назад созданные документы будут помечены на удаление.';
									|en = 'Created documents will be marked to deletion while going back.'");
			
				ПоказатьВопрос(
					Новый ОписаниеОповещения("ОтменаДокументовЗавершение", ЭтотОбъект), ТекстВопроса, Кнопки);
			
			Иначе
				
				СозданныеДокументы.Очистить();
				
				ВыполнитьПервоначальноеЗаполнениеИНастроитьФорму();
				Элементы.Шаги.ТекущаяСтраница = Элементы.ШагПоСкладам;
				
			КонецЕсли;
			
		Иначе
			
			ВыполнитьПервоначальноеЗаполнениеИНастроитьФорму();
			Элементы.Шаги.ТекущаяСтраница = Элементы.ШагПоСкладам;
			
		КонецЕсли;
		
		Возврат;
		
	Иначе
		Закрыть();
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьРезервыСверхПотребностей(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ЗаполнениеКорректировкиНазначения.ФормаОбъекта.Команда.СнятьРезервыСверхПотребности");
	
	СнятьРезервыСверхПотребностейСервер();
	СформироватьИнформационнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеРезервы(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ЗаполнениеКорректировкиНазначения.ФормаОбъекта.Команда.СнятьВсеРезервы");
	
	СнятьВсеРезервыСервер();
	СформироватьИнформационнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрОтметкаПриИзменении(Элемент)
	
	ПараметрыОтбора = ПараметрыОтбораСтрок(Элементы);
	УстановитьОтборСтрокТаблицаТовары(Элементы, ПараметрыОтбора.ИндексСтраницы, ФильтрОтметка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КомандыФормыПродолжение

&НаСервере
Процедура СнятьРезервыСверхПотребностейСервер()
	
	Документы.КорректировкаНазначенияТоваров.СнятьРезервы(ТаблицаТовары, Истина);
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура СнятьВсеРезервыСервер()
	
	Документы.КорректировкаНазначенияТоваров.СнятьРезервы(ТаблицаТовары, Ложь);
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция СоздатьДокумент()
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.ВстречнаяКорректировка Тогда
		Результат = СоздатьДокументКорректировкаНазначенияТоваровОперацияВстречнаяКорректировка();
	Иначе
		Результат = СоздатьДокументКорректировкаНазначенияТоваров();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СоздатьДокументКорректировкаНазначенияТоваров()
	
	СтруктураСозданияДокумента = Новый Структура("Документ, Проведен, Ошибка");
	
	Документ = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
	
	Документ.Назначение = Назначение;
	Документ.ВидОперации = ВидОперации;
	
	Если ЗначениеЗаполнено(Заказ) Тогда
		Документ.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "Организация");
	КонецЕсли;
	
	МассивСтрок = Новый Массив();
	
	Для Каждого Строка Из ТаблицаТовары Цикл
		Если Строка.Количество > 0 И Строка.Отметка Тогда
			МассивСтрок.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	ТоварыКПереносу = ТаблицаТовары.Выгрузить(МассивСтрок);
	
	Если ТоварыКПереносу.Количество() > 0 Тогда
		
		Документы.КорректировкаНазначенияТоваров.ПостобработкаТаблицыТовары(ТоварыКПереносу, ВидОперации, Организация);
		
		Документ.Товары.Загрузить(ТоварыКПереносу);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить(
			"ПересчитатьКоличествоУпаковок",
			ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаКоличестваУпаковок());
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Документ.Товары, СтруктураДействий, Неопределено);
		
		ПараметрыУказанияСерий = Документы.КорректировкаНазначенияТоваров.ПараметрыУказанияСерий(Документ);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Документ, ПараметрыУказанияСерий);
		
		Документ.Дата = ТекущаяДатаСеанса();
		Документ.УстановитьНовыйНомер();
		Документ.Заполнить(Неопределено);
		
		Попытка
			Документ.Записать(РежимЗаписиДокумента.Проведение);
			СтруктураСозданияДокумента.Проведен = Истина;
		Исключение
			
			// Пользователю выведены ошибки проведения документа. Однако документ не записан в БД.
			// При двойном клике на ошибку будет показана форма нового документа (пустая) "Корректировка назначения товаров".
			// В целях предоставления пользователю ошибок, при двойном клике на которые откроется заполненный нужными данными
			// документ, сначала производится запись, и затем попытка проведения, которая выведет список ошибок,
			// на этот раз привязанных к существующему в БД документу.
			
			ПолучитьСообщенияПользователю(Истина); // Очистка сообщений об ошибках выведенных при первом проведении
			
			Документ.Записать(РежимЗаписиДокумента.Запись);
			Попытка
				Документ.Записать(РежимЗаписиДокумента.Проведение);
				СтруктураСозданияДокумента.Проведен = Истина;
			Исключение
				СтруктураСозданияДокумента.Проведен = Ложь;
			КонецПопытки;
			
		КонецПопытки;
		
		СтруктураСозданияДокумента.Документ = Документ.Ссылка;
		
	Иначе
		СтруктураСозданияДокумента.Ошибка = НСтр("ru = 'Не выбрано ни одной строки. Создание документа невозможно.';
												|en = 'No line is selected. Cannot create the document.'");
	КонецЕсли;
	
	Возврат СтруктураСозданияДокумента;
	
КонецФункции

&НаСервере
Функция СоздатьДокументКорректировкаНазначенияТоваровОперацияВстречнаяКорректировка()
	
	СозданныеДокументы.Очистить();
	
	Результат = Новый Структура;
	Результат.Вставить("ОтобразитьСписокСозданныхДокументов", Истина);
	Результат.Вставить("Ошибка");
	
	ТаблицаИсходная = ТаблицаТовары.Выгрузить(Новый Структура("Отметка, ИндексСтраницы", Истина, 0));
	ТаблицаИсходная.Колонки.Добавить("КоэффициентРаспределения", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаИсходная.Колонки.Добавить("КлючРаспределения", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	ИтогКоличество = ТаблицаИсходная.Итог("Количество");
	
	ИндексСтроки = ТаблицаИсходная.Количество() - 1;
	Пока ИндексСтроки > -1 Цикл
		
		СтрокаТаблицы = ТаблицаИсходная[ИндексСтроки];
		
		Если СтрокаТаблицы.Количество = 0 Тогда
			ТаблицаИсходная.Удалить(СтрокаТаблицы);
		Иначе
			СтрокаТаблицы.КлючРаспределения        = ИндексСтроки;
			СтрокаТаблицы.КоэффициентРаспределения = Цел(СтрокаТаблицы.Количество / ИтогКоличество * 1000) / 1000;
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки - 1;
		
	КонецЦикла;
	
	Если ТаблицаИсходная.Количество() = 0 Тогда
		
		Результат.ОтобразитьСписокСозданныхДокументов = Ложь;
		Результат.Ошибка = НСтр("ru = 'Не выбрано ни одной строки. Создание документа невозможно.';
								|en = 'No line is selected. Cannot create the document.'");
		
		Возврат Результат;
		
	КонецЕсли;
	
	ТаблицаИсходная.Сортировать("Количество Убыв");
	
	ИтогКоэффициентРаспределения = ТаблицаИсходная.Итог("КоэффициентРаспределения");
	Если ИтогКоэффициентРаспределения <> 1 Тогда
		СтрокаТаблицы = ТаблицаИсходная[0];
		СтрокаТаблицы.КоэффициентРаспределения =
			СтрокаТаблицы.КоэффициентРаспределения + 1 - ИтогКоэффициентРаспределения;
	КонецЕсли;
		
	ТаблицаРаспределения = ТаблицаТовары.Выгрузить(Новый Структура("Отметка, ИндексСтраницы", Истина, 1));
	ТаблицаРаспределения.Колонки.Добавить("КлючРаспределения", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	ИндексСтроки = ТаблицаРаспределения.Количество() - 1;
	Пока ИндексСтроки > -1 Цикл
		
		СтрокаТаблицы = ТаблицаРаспределения[ИндексСтроки];
		
		Если СтрокаТаблицы.Количество > 0 Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.Упаковка) Тогда
				ТипИзмеряемойВеличины = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
											СтрокаТаблицы.Упаковка, "ТипИзмеряемойВеличины");
			Иначе
				ТипИзмеряемойВеличины = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
											СтрокаТаблицы.Номенклатура, "ЕдиницаИзмерения.ТипИзмеряемойВеличины");
			КонецЕсли;
			
			РаспределитьШтучно = ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук;
			
			ИтогКоличествоРаспределения = СтрокаТаблицы.Количество;
			
			ИндексСтрокиСНаибольшимКоличеством = -1;
			Для каждого СтрокаИсходнойТаблицы Из ТаблицаИсходная Цикл
				
				КоличествоРаспределения =
					Цел(СтрокаТаблицы.Количество * СтрокаИсходнойТаблицы.КоэффициентРаспределения * 1000) / 1000;
				
				Если РаспределитьШтучно Тогда
					КоличествоРаспределенияОкр = Окр(КоличествоРаспределения);
					Если КоличествоРаспределения <> КоличествоРаспределенияОкр Тогда
						КоличествоРаспределения = ?(КоличествоРаспределенияОкр = 0, 1, КоличествоРаспределенияОкр);
					КонецЕсли;
					КоличествоРаспределения = Мин(КоличествоРаспределения, ИтогКоличествоРаспределения);
				ИначеЕсли КоличествоРаспределения = 0 Тогда
					КоличествоРаспределения = ИтогКоличествоРаспределения;
				КонецЕсли;
				
				НоваяСтрокаТаблицы = ТаблицаРаспределения.Добавить();
				НоваяСтрокаТаблицы.НовоеНазначение   = СтрокаИсходнойТаблицы.ИсходноеНазначение;
				НоваяСтрокаТаблицы.КлючРаспределения = СтрокаИсходнойТаблицы.КлючРаспределения;
				НоваяСтрокаТаблицы.Количество        = КоличествоРаспределения;
				
				ЗаполнитьЗначенияСвойств(
					НоваяСтрокаТаблицы, СтрокаТаблицы,, "НовоеНазначение, КлючРаспределения, Количество");
				
				Если ИндексСтрокиСНаибольшимКоличеством = -1 Тогда
					ИндексСтрокиСНаибольшимКоличеством = ТаблицаРаспределения.Количество() - 1;
				КонецЕсли;
				
				ИтогКоличествоРаспределения = ИтогКоличествоРаспределения - НоваяСтрокаТаблицы.Количество;
				Если ИтогКоличествоРаспределения = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ИтогКоличествоРаспределения <> 0 Тогда
				НоваяСтрокаТаблицы = ТаблицаРаспределения[ИндексСтрокиСНаибольшимКоличеством];
				НоваяСтрокаТаблицы.Количество = НоваяСтрокаТаблицы.Количество + ИтогКоличествоРаспределения;
			КонецЕсли;
			
		КонецЕсли;
		
		ТаблицаРаспределения.Удалить(ИндексСтроки);
		
		ИндексСтроки = ИндексСтроки - 1;
		
	КонецЦикла;
	
	ТекущаяОрганизация = Организация;
	Если Не ЗначениеЗаполнено(ТекущаяОрганизация) И ЗначениеЗаполнено(Заказ) Тогда
		ТекущаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "Организация");
	КонецЕсли;
	
	Документ = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
	Документ.Дата        = ТекущаяДатаСеанса();
	Документ.ВидОперации = ВидОперации;
	Документ.Организация = ТекущаяОрганизация;
	Документ.Назначение  = Назначение;
	Документ.УстановитьНовыйНомер();
	
	ТоварыКПереносу = ТаблицаРаспределения.СкопироватьКолонки();
	Для каждого СтрокаТаблицы Из ТаблицаИсходная Цикл
		
		НоваяСтрокаТаблицы = ТоварыКПереносу.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтрокаТаблицы);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
			ТаблицаРаспределения.Скопировать(Новый Структура("КлючРаспределения", СтрокаТаблицы.КлючРаспределения)),
			ТоварыКПереносу);
		
	КонецЦикла;
	
	Документы.КорректировкаНазначенияТоваров.ПостобработкаТаблицыТовары(ТоварыКПереносу, ВидОперации, Организация);
	Документ.Товары.Загрузить(ТоварыКПереносу);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(
		"ПересчитатьКоличествоУпаковок",
		ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаКоличестваУпаковок());
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Документ.Товары, СтруктураДействий, Неопределено);
	
	ПараметрыУказанияСерий = Документы.КорректировкаНазначенияТоваров.ПараметрыУказанияСерий(Документ);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Документ, ПараметрыУказанияСерий);
	Документ.Заполнить(Неопределено);
	
	Попытка
		Документ.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Создания корректировки назначения товаров: Встречная корректировка';
				|en = 'Inventory assignment adjustment creation: Mutual adjustment'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	КонецПопытки;
		
	Если Не Документ.Проведен Тогда
		Документ.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
		
	СозданныеДокументы.Добавить(Документ.Ссылка);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПеренестиДанныеДереваВТаблицу()
	
	СтруктураПоиска = Новый Структура("ИсходноеНазначение, Номенклатура, Характеристика, Склад");
	
	Для Каждого Корень Из ДеревоПомещенияЯчейки.ПолучитьЭлементы() Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Корень);
		СтруктураПоиска.ИсходноеНазначение = Корень.Назначение;
		
		Ветви = Корень.ПолучитьЭлементы();
		
		Если Ветви.Количество() > 0 Тогда
			НайденныеСтроки = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Если Ветви.Количество() > 1 Тогда
					
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						ТаблицаТовары.Удалить(НайденнаяСтрока);
					КонецЦикла;
					
					Для Каждого Ветвь Из Ветви Цикл
						
						Если Ветвь.Отметка И Ветвь.Количество > 0 Тогда
							НоваяСтрока = ТаблицаТовары.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Ветвь, "Помещение, Ячейка, Серия, Упаковка, Количество, Отметка");
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					НайденнаяСтрока = НайденныеСтроки[0];
					НайденнаяВетвь = Ветви[0];
					
					ЗаполнитьЗначенияСвойств(НайденнаяСтрока, НайденнаяВетвь, "Помещение, Ячейка, Серия, Упаковка, Количество, Отметка");
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакТребованияПомещенияИЯчейки()
	
	// ТаблицаТовары не имеет номера строки, а так же других полей, создаем таблицу для проведения расчетов.
	ТаблицаТоварыСИндексами = ТаблицаТовары.Выгрузить(, "Номенклатура, ИсходноеНазначение, НовоеНазначение, Склад");
	ТаблицаТоварыСИндексами.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаТоварыСИндексами.Колонки.Добавить("СтатусУказанияСерий", Новый ОписаниеТипов("Число"));
	ТаблицаТоварыСИндексами.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	// Заполнение номера строки для расчетов, и последующей связи с ТаблицаТовары
	НомерСтроки = 0;
	Для Каждого Строка Из ТаблицаТоварыСИндексами Цикл
		НомерСтроки = НомерСтроки + 1;
		Строка.НомерСтроки = НомерСтроки;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	ТекстЗапросаТаблицаТоваров =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Склад КАК Склад
	|ПОМЕСТИТЬ СтрокиТаблицы
	|ИЗ
	|	&Товары КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Склад,
	|	ЕстьNULL(СкладскиеПомещения.Ссылка, ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)) КАК Помещение
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	СтрокиТаблицы КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладскиеПомещения КАК СкладскиеПомещения
	|		ПО ТаблицаТоваров.Склад = СкладскиеПомещения.Владелец
	|		И СкладскиеПомещения.ПометкаУдаления = ЛОЖЬ";
	
	// Определение использования помещений по складам и адресного хранения
	// + Определение использования серий по складам.
	ТекстОкончанияЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки,
	|	МАКСИМУМ(Таблица.ИспользоватьАдресноеХранение) КАК ИспользоватьАдресноеХранение,
	|	МАКСИМУМ(Таблица.ИспользоватьСкладскиеПомещения) КАК ИспользоватьСкладскиеПомещения,
	|	МАКСИМУМ(ВЫБОР КОГДА ЕСТЬNULL(ТаблицаСтатусов.СтатусУказанияСерий, 0) > 0 ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ) КАК ИспользованиеСерийПоСкладу
	|ИЗ
	|	ВТИспользованиеПомещенийИАдресногоХранения КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСтатусов КАК ТаблицаСтатусов
	|		ПО Таблица.НомерСтроки = ТаблицаСтатусов.НомерСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.НомерСтроки";
	
	ТекстЗапроса = ТекстЗапросаТаблицаТоваров 
		+ ТекстРазделителяЗапросов()
		+ Документы.КорректировкаНазначенияТоваров.ТекстЗапросаИспользованиеПомещенийИАдресногоХранения("ВТИспользованиеПомещенийИАдресногоХранения")
		+ ТекстРазделителяЗапросов()
		+ Документы.КорректировкаНазначенияТоваров.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Неопределено)
		+ ТекстРазделителяЗапросов()
		+ ТекстОкончанияЗапроса;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Товары", ТаблицаТоварыСИндексами);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Помещение результата расчетов использования серий, помещений и адресного хранения.
	Пока Выборка.Следующий() Цикл
		
		Строка = ТаблицаТовары[Выборка.НомерСтроки - 1];
		
		Если Выборка.ИспользоватьСкладскиеПомещения
			Или Выборка.ИспользоватьАдресноеХранение 
			Или Выборка.ИспользованиеСерийПоСкладу Тогда
			
			Строка.ТребуетсяШаг2 = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяШаг2()
	
	Для Каждого Строка Из ТаблицаТовары Цикл
		Если Строка.ТребуетсяШаг2 И Строка.Отметка И Строка.Количество > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОтбораСтрок(Элементы, ИмяТаблицы = "ТаблицаТовары")
	
	Возврат Новый Структура(Элементы[ИмяТаблицы].ОтборСтрок);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСтрокТаблицаТовары(Элементы, ИндексСтраницы = 0, Отметка = Ложь)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИндексСтраницы", ИндексСтраницы);
	
	Если Отметка Тогда
		СтруктураОтбора.Вставить("Отметка", Истина);
	КонецЕсли;
	
	Элементы.ТаблицаТовары.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВХранилище(ЕстьИзмененияКоличества)
	
	МассивСтрок = Новый Массив();
	
	Для Каждого Строка Из ТаблицаТовары Цикл
		Если Строка.Количество > 0 И Строка.Отметка Тогда
			 МассивСтрок.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	ТоварыКПереносу = ТаблицаТовары.Выгрузить(МассивСтрок);
	
	ЕстьИзмененияКоличества = Документы.КорректировкаНазначенияТоваров.ПостобработкаТаблицыТовары(ТоварыКПереносу,
		ВидОперации, Организация, КорректировкаНазначения);
	
	Результат = Новый Структура("Товары", ТоварыКПереносу);
	АдресВХранилище = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификаторДляВременногоХранилища);
	Возврат АдресВХранилище;

КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, "ДеревоПомещенияЯчейкиЕдиницаИзмерения", "ДеревоПомещенияЯчейки.Упаковка");
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, "ТоварыНоменклатураЕдиницаИзмерения", "ТаблицаТовары.Упаковка");
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиЗаказ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиНоменклатура.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиХарактеристика.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиЗаказИсточник.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиСклад.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиКоличество.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиКоличествоВетвь1.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПомещенияЯчейки.ЭтоКорень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиСерия.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиПомещение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиЯчейка.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиОтметка.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиКоличествоВетвь.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПомещенияЯчейки.ЭтоКорень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиЗаказ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиНоменклатура.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиХарактеристика.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиЗаказИсточник.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиСклад.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиКоличество.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиКоличествоВетвь1.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПомещенияЯчейки.ЭтоКорень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиСерия.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиПомещение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиЯчейка.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиОтметка.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиКоличествоВетвь.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПомещенияЯчейки.ЭтоКорень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИнформационнуюСтроку()
	
	Строка = Элементы.ТаблицаТовары.ТекущиеДанные;
	
	Если Строка <> Неопределено Тогда
		
		СформироватьИнформационнуюСтрокуСервер(Строка.Назначение);
		
		СтрокаИтогов = ИтогиЗаказа.НайтиПоИдентификатору(Строка.ИдентификаторСтрокиИтогов);
		
		ИтогиСклад = "";
		
		Если СтрокаИтогов <> Неопределено Тогда
			
			ИтогиСклад = ?(ИспользоватьНесколькоСкладов, Строка(СтрокаИтогов.Склад), "");
			
			ИтогиПотребность = СтрокаИтогов.Потребность;
			ИтогиОбеспечено = СтрокаИтогов.Обеспечено + СтрокаИтогов.Количество;
			ИтогиНаСкладе = СтрокаИтогов.НаСкладе + СтрокаИтогов.Количество;
			
			Если ИтогиОбеспечено < 0 Или ИтогиОбеспечено > ИтогиПотребность Тогда
				Элементы.ИтогиОбеспечено.ЦветТекста = ЦветОтрицательногоЧисла;
			Иначе
				Элементы.ИтогиОбеспечено.ЦветТекста = ЦветТекстаПоля;
			КонецЕсли;
			
			Если ИтогиНаСкладе < 0 Или ИтогиНаСкладе > ИтогиПотребность Тогда
				Элементы.ИтогиНаСкладе.ЦветТекста = ЦветОтрицательногоЧисла;
			Иначе
				Элементы.ИтогиНаСкладе.ЦветТекста = ЦветТекстаПоля;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаголовокКлючСтроки = Строка(Строка.Номенклатура)
			+ Строка(?(ЗначениеЗаполнено(Строка.Характеристика), ", " + Строка.Характеристика, "")
			+ ?(ЗначениеЗаполнено(ИтогиСклад), ", " + ИтогиСклад, ""));
		
		ИтогиАналитикаНоменклатуры = ЗаголовокКлючСтроки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьИнформационнуюСтрокуСервер(НазначениеДляИтога)
	
	ПерезаполнитьКоличествоВТаблицеИтогов();
	РассчитатьИтогиПоЗаказу(НазначениеДляИтога);
	
	УстановитьДоступностьИЗаголовокКнопокОтменаДалее();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	СнятиеРезерва = ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям;
		
	СнятьРезервВсехДокументов = ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям;
	
	ВстречнаяКорректировка = ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.ВстречнаяКорректировка;
	
	ТаблицаЗаполнена = ТаблицаТовары.Количество() > 0;
	
	Если СнятиеРезерва И Не ВстречнаяКорректировка И Не ТаблицаЗаполнена И Не ЕстьДоступныйРезервОстаток Тогда
		
		Элементы.Шаги.ТекущаяСтраница = Элементы.НетДанных;
		Элементы.Далее.Видимость = Ложь;
		Элементы.Отмена.КнопкаПоУмолчанию = Истина;
		Элементы.ТекстБудетСозданаКорректировка.Видимость = Ложь;
		
	ИначеЕсли Не СнятиеРезерва И Не ТаблицаЗаполнена И Не ЕстьДоступныйРезервОстаток Тогда
		
		Элементы.ГруппаДанныеТаблицыТовары.ТекущаяСтраница = Элементы.НетДанныхДляРезервирования;
		
		Элементы.ГруппаКоманднаяПанель.Доступность = Ложь;
		Элементы.ФильтрОтметка.Доступность = Ложь;
		Элементы.ТаблицаТоварыВыбратьТовары1.Доступность = Ложь;
		Элементы.ТаблицаТоварыИсключитьТовары1.Доступность = Ложь;
		Элементы.ТаблицаТоварыНайти1.Доступность = Ложь;
		Элементы.ТаблицаТоварыОтменитьПоиск1.Доступность = Ложь;
		Элементы.ТаблицаТоварыВывестиСписок.Доступность = Ложь;
		
		Элементы.Далее.Видимость = Ложь;
		Элементы.Отмена.КнопкаПоУмолчанию = Истина;
		Элементы.ТекстБудетСозданаКорректировка.Видимость = Ложь;
		
	ИначеЕсли ВстречнаяКорректировка Тогда
		
		Элементы.ТаблицаТоварыВыбратьТовары1.Доступность   = ТаблицаЗаполнена;
		Элементы.ТаблицаТоварыИсключитьТовары1.Доступность = ТаблицаЗаполнена;
		Элементы.ТаблицаТоварыНайти1.Доступность           = ТаблицаЗаполнена;
		Элементы.ТаблицаТоварыОтменитьПоиск1.Доступность   = ТаблицаЗаполнена;
		Элементы.ТаблицаТоварыВывестиСписок.Доступность    = ТаблицаЗаполнена;
		
		ПараметрыОтбора = ПараметрыОтбораСтрок(Элементы);
		Элементы.ШапкаВстречнаяКорректировкаШаг1.Видимость = ПараметрыОтбора.ИндексСтраницы = 0;
		Элементы.ШапкаВстречнаяКорректировкаШаг2.Видимость = ПараметрыОтбора.ИндексСтраницы = 1;
		
		Элементы.ТаблицаТоварыНазначение.Видимость         = ПараметрыОтбора.ИндексСтраницы = 0;
		
		УстановитьДоступностьИЗаголовокКнопокОтменаДалее();
		
	Иначе
		
		Элементы.ГруппаДанныеТаблицыТовары.ТекущаяСтраница = Элементы.ГруппаТаблицаТовары;
		
		Элементы.ГруппаКоманднаяПанель.Доступность = Истина;
		Элементы.ФильтрОтметка.Доступность = Истина;
		Элементы.ТаблицаТоварыВыбратьТовары1.Доступность = Истина;
		Элементы.ТаблицаТоварыИсключитьТовары1.Доступность = Истина;
		Элементы.ТаблицаТоварыНайти1.Доступность = Истина;
		Элементы.ТаблицаТоварыОтменитьПоиск1.Доступность = Истина;
		Элементы.ТаблицаТоварыВывестиСписок.Доступность = Истина;
		
		Если СнятиеРезерва Тогда
			Элементы.ВидОперацииПереключатель.Видимость = Ложь;
			Элементы.ДеревоПомещенияЯчейкиРезерв.Заголовок = НСтр("ru = 'Резерв';
																	|en = 'Reserve'");
		Иначе
			Элементы.ВидОперацииПереключатель.Видимость = Истина;
			Элементы.ДеревоПомещенияЯчейкиРезерв.Заголовок = НСтр("ru = 'Доступно';
																	|en = 'Available'");
		КонецЕсли;
		
		УстановитьДоступностьИЗаголовокКнопокОтменаДалее();
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
			Элементы.ОтборРезервированияПоСкладуОтгрузки.Видимость = Ложь;
			Если Не СнятиеРезерва Тогда
				Элементы.ГруппаПереключатели.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Не Пользователи.РолиДоступны("ДополнительныеОперацииКорректировкиНазначенияТоваров") Тогда
			Элементы.ВидОперацииПереключатель.Видимость = Ложь;
		КонецЕсли;
		
		//++ НЕ УТКА
		Если ИспользуетсяДавальческоеНазначение Тогда
			Элементы.ВидОперацииПереключатель.Видимость = Ложь;
		КонецЕсли;
		//-- НЕ УТКА
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьИЗаголовокКнопокОтменаДалее()
	
	ВстречнаяКорректировка = ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.ВстречнаяКорректировка;
	
	КомандаОтмена = Команды.Найти("Отмена");
	КомандаДалее = Команды.Найти("Далее");
	
	ТекстНазад = НСтр("ru = '< Назад';
						|en = '< Back'");
	ТекстОтмена = НСтр("ru = 'Отмена';
						|en = 'Cancel'");
	ТекстЗакрытть = НСтр("ru = 'Закрыть';
						|en = 'Close'");
	
	ТекстДалее = НСтр("ru = 'Далее >';
						|en = 'Next >'");
	ТекстСоздатьДокумент = НСтр("ru = 'Создать документ';
								|en = 'Create document'");
	ТекстПеренестиВДокумент = НСтр("ru = 'Перенести в документ';
									|en = 'Add to document'");
	
	// Процедура может быть вызвана только если ТЧ Товары доступна - в этом случае необходимо вернуть кнопку Далее
	// если ранее она была скрыта из-за отсутствия данных для заполнения.
	Если Не Элементы.Далее.Видимость Тогда
		Элементы.Далее.Видимость = Истина;
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	Если Элементы.Шаги.ТекущаяСтраница = Элементы.ШагПоСкладам Тогда
		
		ТребуетсяШаг2 = ТребуетсяШаг2();
		
		СменитьСтраницуТоваров = Истина;
		ИндексСтраницы = 0;
		
		Если ВстречнаяКорректировка Тогда
			
			ПараметрыОтбора = ПараметрыОтбораСтрок(Элементы);
			
			ИндексСтраницы = ПараметрыОтбора.ИндексСтраницы;
			СменитьСтраницуТоваров = ИндексСтраницы > 0;
			Если Не СменитьСтраницуТоваров Тогда
				МассивСтрок = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
				СменитьСтраницуТоваров = ТаблицаТовары.Количество() = МассивСтрок.Количество();
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не СменитьСтраницуТоваров Тогда
			
			Если ИндексСтраницы = 0 Тогда
				Элементы.ТекстБудетСозданаКорректировка.Видимость = Ложь;
				КомандаДалее.Заголовок  = ТекстДалее;
				КомандаДалее.Подсказка  = ТекстДалее;
				КомандаОтмена.Заголовок = ТекстОтмена;
				КомандаОтмена.Подсказка = ТекстОтмена;
			Иначе
				Если ТребуетсяШаг2 Тогда
					Элементы.ТекстБудетСозданаКорректировка.Видимость = Ложь;
					КомандаДалее.Заголовок  = ТекстДалее;
					КомандаДалее.Подсказка  = ТекстДалее;
				ИначеЕсли Параметры.Мастер Тогда
					Элементы.ТекстБудетСозданаКорректировка.Видимость = Не ВстречнаяКорректировка;
					КомандаДалее.Заголовок = ТекстСоздатьДокумент;
					КомандаДалее.Подсказка = ТекстСоздатьДокумент;
				Иначе
					Элементы.ТекстБудетСозданаКорректировка.Видимость = Ложь;
					КомандаДалее.Заголовок = ТекстПеренестиВДокумент;
					КомандаДалее.Подсказка = ТекстПеренестиВДокумент;
				КонецЕсли;
				КомандаОтмена.Заголовок = ТекстНазад;
				КомандаОтмена.Подсказка = ТекстНазад;
			КонецЕсли;
		
		ИначеЕсли ТребуетсяШаг2 Тогда
			
			Элементы.ТекстБудетСозданаКорректировка.Видимость = Ложь;
			КомандаДалее.Заголовок  = ТекстДалее;
			КомандаДалее.Подсказка  = ТекстДалее;
			КомандаОтмена.Заголовок = ?(ИндексСтраницы = 0, ТекстОтмена, ТекстНазад);
			КомандаОтмена.Подсказка = ?(ИндексСтраницы = 0, ТекстОтмена, ТекстНазад);
			
		Иначе
			
			Если Параметры.Мастер Тогда
				Элементы.ТекстБудетСозданаКорректировка.Видимость = Не ВстречнаяКорректировка;
				КомандаДалее.Заголовок = ТекстСоздатьДокумент;
				КомандаДалее.Подсказка = ТекстСоздатьДокумент;
			Иначе
				Элементы.ТекстБудетСозданаКорректировка.Видимость = Ложь;
				КомандаДалее.Заголовок = ТекстПеренестиВДокумент;
				КомандаДалее.Подсказка = ТекстПеренестиВДокумент;
			КонецЕсли;
			КомандаОтмена.Заголовок = ?(ИндексСтраницы = 0, ТекстОтмена, ТекстНазад);
			КомандаОтмена.Подсказка = ?(ИндексСтраницы = 0, ТекстОтмена, ТекстНазад);
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.ШагСписокСозданныхДокументов Тогда
		
			Элементы.ТекстБудетСозданаКорректировка.Видимость = Ложь;
			КомандаДалее.Заголовок  = ТекстЗакрытть;
			КомандаДалее.Подсказка  = ТекстЗакрытть;
			КомандаОтмена.Заголовок = ТекстНазад;
			КомандаОтмена.Подсказка = ТекстНазад;
		
	Иначе
		Если Параметры.Мастер Тогда
			Элементы.ТекстБудетСозданаКорректировка.Видимость = Не ВстречнаяКорректировка;
			КомандаДалее.Заголовок = ТекстСоздатьДокумент;
			КомандаДалее.Подсказка = ТекстСоздатьДокумент;
		Иначе
			Элементы.ТекстБудетСозданаКорректировка.Видимость = Ложь;
			КомандаДалее.Заголовок = ТекстПеренестиВДокумент;
			КомандаДалее.Подсказка = ТекстПеренестиВДокумент;
		КонецЕсли;
		КомандаОтмена.Заголовок = ТекстНазад;
		КомандаОтмена.Подсказка = ТекстНазад;
	КонецЕсли;
	
	ДоступностьКнопкиДалее = ТаблицаТовары.Количество() > 0 Или ДеревоПомещенияЯчейки.ПолучитьЭлементы().Количество() > 0;
	Элементы.Далее.Доступность = ДоступностьКнопкиДалее;
	
КонецПроцедуры

&НаСервере
Процедура ЗадатьЗначенияПоУмолчанию()
	
	МогутБытьНазначенияБезЗаказа = Документы.КорректировкаНазначенияТоваров.ДопустимыНазначенияБезЗаказа();
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	
	Если НЕ МогутБытьНазначенияБезЗаказа Тогда
		Элементы.ВидОперацииПереключатель.Заголовок = НСтр("ru = 'Использовать резервы других заказов';
															|en = 'Use other order reserves'");
	КонецЕсли;
	
	ВидОперацииПереключатель = ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать;
	
	//++ НЕ УТКА
	Если ИспользуетсяДавальческоеНазначение
		И ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.Резервировать Тогда
		ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать;
		ВидОперацииПереключатель = Истина;
	КонецЕсли;
	//-- НЕ УТКА
	
	ЦветОтрицательногоЧисла = ЦветаСтиля.ЦветОтрицательногоЧисла;
	ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
	
	ТаблицаТоваровОтбора = Неопределено;
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.ВстречнаяКорректировка Тогда
		ТаблицаТоваровОтбора = ТоварыОтбор.Выгрузить(Новый Структура("ПоНазначению", 2));
	КонецЕсли;
	
	ЕстьДоступныйРезервОстаток = Документы.КорректировкаНазначенияТоваров.ЕстьДоступныйРезервОстаток(
									Назначение, Заказ, ВидОперации, ТаблицаТоваровОтбора);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыПриСоздании()
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	Элементы.ТаблицаТоварыХарактеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	Элементы.ДеревоПомещенияЯчейкиХарактеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	
	РезервироватьИКорректировать = ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать;
	
	Элементы.ТолькоЗаказыОрганизации.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")
		И (ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям
		Или РезервироватьИКорректировать);
	
	Элементы.ТолькоЗаказыОрганизации.Заголовок = СтрЗаменить(НСтр("ru = 'Только заказы организации ""%1""';
																	|en = 'Only orders of company ""%1""'"), "%1", Организация);
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям Тогда
		
		Если МогутБытьНазначенияБезЗаказа Тогда
			Заголовок = СтрЗаменить(НСтр("ru = 'Снятие резерва (Назначение: %1)';
										|en = 'Remove reserve (Assignment: %1)'"), "%1", Назначение);
		Иначе
			Заголовок = СтрЗаменить(НСтр("ru = 'Снятие резерва (%1)';
										|en = 'Remove reserve (%1)'"), "%1", Заказ);
		КонецЕсли;
		
		Элементы.ТаблицаТоварыКоличество.Заголовок = НСтр("ru = 'К снятию резерва';
															|en = 'To reserve removal'");
		
		Элементы.ДеревоПомещенияЯчейкиГруппаКоличествоВертикальная.Заголовок = НСтр("ru = 'К снятию резерва';
																					|en = 'To reserve removal'");
		
		Если ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям Тогда
			
			Элементы.ТаблицаТоварыЗаказ.Видимость = Не МогутБытьНазначенияБезЗаказа;
			Элементы.ТаблицаТоварыИсходноеНазначение.Видимость = МогутБытьНазначенияБезЗаказа;
			
			Элементы.ДеревоПомещенияЯчейкиЗаказ.Видимость = Истина;
			
			Заголовок = НСтр("ru = 'Снятие резерва по многим назначениям';
							|en = 'Remove from reserve for multiple assignments'");
		КонецЕсли;
		
		Элементы.ГруппаПереключатели.ТекущаяСтраница = Элементы.ГруппаРежимСнятиеРезервов;
		Элементы.ВидОперацииПереключатель.Видимость = Ложь;
		
		НадписьСкладЗаказ = НСтр("ru = 'Склад';
								|en = 'Warehouse'");
		НадписьСвободныйОстаток = НСтр("ru = 'Свободный остаток';
										|en = 'Available inventory'");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.ВстречнаяКорректировка Тогда
		
		Элементы.ВидОперацииПереключатель.Видимость       = Ложь;
		Элементы.ИтогиПотребность.Видимость               = Ложь;
		Элементы.ГруппаПереключатели.Видимость            = Ложь;
		Элементы.ФильтрОтметка.Видимость                  = Ложь;
		Элементы.ТаблицаТоварыСвободныйОстаток.Видимость  = Ложь;
		
		Элементы.ТолькоЗаказыОрганизацииВстречнаяКорректировка.Видимость =
									ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
		Элементы.ТолькоЗаказыОрганизацииВстречнаяКорректировка.Заголовок =
									СтрЗаменить(НСтр("ru = 'Только заказы организации ""%1""';
													|en = 'Only orders of company ""%1""'"), "%1", Организация);
		
		Элементы.ТаблицаТоварыКоличество.Заголовок                           = НСтр("ru = 'Передать';
																					|en = 'Transfer'");
		Элементы.ТаблицаТоварыКоличество.КартинкаШапки                       = БиблиотекаКартинок.Изменить;
		
		Элементы.ДеревоПомещенияЯчейкиГруппаКоличествоВертикальная.Заголовок     = НСтр("ru = 'Передать';
																						|en = 'Transfer'");
		Элементы.ДеревоПомещенияЯчейкиГруппаКоличествоВертикальная.КартинкаШапки = БиблиотекаКартинок.Изменить;
		
		Заголовок = СтрЗаменить(НСтр("ru = 'Встречная корректировка назначения (%1)';
									|en = 'Assignment mutual adjustment (%1)'"), "%1", Заказ);
		
		НадписьСкладЗаказ = НСтр("ru = 'Склад';
								|en = 'Warehouse'");
		
	Иначе
		
		Если МогутБытьНазначенияБезЗаказа Тогда
			Заголовок = СтрЗаменить(НСтр("ru = 'Резервирование (Назначение: %1)';
										|en = 'Reservation (Purpose: %1)'"), "%1", Назначение);
		Иначе
			Заголовок = СтрЗаменить(НСтр("ru = 'Резервирование (%1)';
										|en = 'Reservation (%1)'"), "%1", Заказ);
		КонецЕсли;
		
		Элементы.ТаблицаТоварыКоличество.Заголовок = НСтр("ru = 'К резервированию';
															|en = 'To reserve'");
		
		Элементы.ДеревоПомещенияЯчейкиГруппаКоличествоВертикальная.Заголовок = НСтр("ru = 'К резервированию';
																					|en = 'To reserve'");
		
		Если РезервироватьИКорректировать И МогутБытьНазначенияБезЗаказа Тогда
			НадписьСкладЗаказ = НСтр("ru = 'Назначение, Склад';
									|en = 'Purpose, Warehouse'");
			НадписьСвободныйОстаток = НСтр("ru = 'Доступно';
											|en = 'Available'");
		ИначеЕсли РезервироватьИКорректировать И Не МогутБытьНазначенияБезЗаказа Тогда
			НадписьСкладЗаказ = НСтр("ru = 'Заказ, Склад';
									|en = 'Order, Warehouse'");
			НадписьСвободныйОстаток = НСтр("ru = 'Доступно';
											|en = 'Available'");
		Иначе
			НадписьСкладЗаказ = НСтр("ru = 'Склад';
									|en = 'Warehouse'");
			НадписьСвободныйОстаток = НСтр("ru = 'Свободный остаток';
											|en = 'Available inventory'");
		КонецЕсли;
		
		Элементы.ГруппаПереключатели.ТекущаяСтраница = Элементы.ГруппаРежимРезервирование;
		
		ВидОперацииПереключательВидимость = Истина;
		
		//++ НЕ УТКА
		Если ИспользуетсяДавальческоеНазначение Тогда
			ВидОперацииПереключательВидимость = Ложь;
		КонецЕсли;
		//-- НЕ УТКА
		
		Элементы.ВидОперацииПереключатель.Видимость = ВидОперацииПереключательВидимость;
		
	КонецЕсли;
	
	Элементы.ТаблицаТоварыСкладЗаказИсточник.Заголовок = НадписьСкладЗаказ;
	Элементы.ТаблицаТоварыСкладЗаказИсточник.Подсказка = НадписьСкладЗаказ;
	
	Элементы.ТаблицаТоварыСкладЗаказИсточник.Видимость = ИспользоватьНесколькоСкладов 
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать;
	Элементы.ДеревоПомещенияЯчейкиСклад.Видимость = ИспользоватьНесколькоСкладов;
	Элементы.ДекорацияВНаличииНаСкладеОтгрузки.Видимость = ИспользоватьНесколькоСкладов;
	Элементы.ГруппаВНаличииНаСкладеОтгрузки.Видимость = ИспользоватьНесколькоСкладов;
	
	Элементы.ТаблицаТоварыСвободныйОстаток.Заголовок = НадписьСвободныйОстаток;
	Элементы.ТаблицаТоварыСвободныйОстаток.Подсказка = НадписьСвободныйОстаток;
	
	НадписьАналитика = НСтр("ru = 'Номенклатура, Характеристика, Заказ, Склад';
							|en = 'Product, Variant, Order, Warehouse'");
	НадписьВетви = НСтр("ru = 'Серия, Помещение, Ячейка';
						|en = 'Batch, Wareroom, Bin'");
	
	НадписьАналитика = ?(ИспользоватьХарактеристикиНоменклатуры, НадписьАналитика, СтрЗаменить(НадписьАналитика, ", Характеристика", ""));
	НадписьАналитика = ?(ИспользоватьНесколькоСкладов, НадписьАналитика, СтрЗаменить(НадписьАналитика, ", Склад", ""));
	
	Элементы.ДеревоПомещенияЯчейкиГруппировки.Заголовок = НадписьАналитика + " / " + НадписьВетви;
	
	УстановитьОтборСтрокТаблицаТовары(Элементы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДерево()
	
	ЭлементыДерева = ДеревоПомещенияЯчейки.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	СнятиеРезервов = (ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям);
	
	РежимСнятьРезерваПоМножествуДокументов = (ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям);
	
	ТаблицаПомещенияЯчейки = Документы.КорректировкаНазначенияТоваров.ТаблицаПомещенияЯчейкиПоТоварам(ТаблицаТовары.Выгрузить(), КорректировкаНазначения);
	
	СтруктураЗаполнения = Новый Структура("Назначение, Номенклатура, Характеристика, Склад");
	
	КоличествоОстаток = 0;
	
	ЕдиницаИзмерения = Неопределено;
	
	Для Каждого Строка Из ТаблицаПомещенияЯчейки Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Серия) И Не ЗначениеЗаполнено(Строка.Помещение) И Не ЗначениеЗаполнено(Строка.Ячейка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтруктураЗаполнения.Назначение <> Строка.Назначение
			Или СтруктураЗаполнения.Номенклатура <> Строка.Номенклатура
			Или СтруктураЗаполнения.Характеристика <> Строка.Характеристика
			Или СтруктураЗаполнения.Склад <> Строка.Склад Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Строка);
			
			НовыйКорень = ЭлементыДерева.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйКорень, Строка,,"Серия, Помещение, Ячейка, Обеспечено, СвободныйОстаток");
			
			Если Не СнятиеРезервов Тогда
				НовыйКорень.Обеспечено = Строка.СвободныйОстаток;
			КонецЕсли;
			
			НовыйКорень.КоличествоУпаковок = Строка.Количество;
			
			ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Номенклатура, "ЕдиницаИзмерения");
			НовыйКорень.Упаковка = ЕдиницаИзмерения;
			
			НовыйКорень.ЭтоКорень = Истина;
			КоличествоОстаток = НовыйКорень.Количество;
			
			СтрокиКорня = НовыйКорень.ПолучитьЭлементы();
			
		КонецЕсли;
		
		Если СнятиеРезервов Тогда
			НовыйКорень.Обеспечено = НовыйКорень.Обеспечено + Строка.Обеспечено;
		КонецЕсли;
		
		Если (КоличествоОстаток > 0 Или Строка.Обеспечено > 0)
			И (ЗначениеЗаполнено(Строка.Серия) Или ЗначениеЗаполнено(Строка.Помещение) Или ЗначениеЗаполнено(Строка.Ячейка)) Тогда
			НоваяВетвь = СтрокиКорня.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяВетвь, Строка, "Номенклатура, Характеристика, Серия, Помещение, Ячейка, Упаковка, Обеспечено, СвободныйОстаток");
			Если НоваяВетвь.Обеспечено > КоличествоОстаток Тогда
				НоваяВетвь.Количество = КоличествоОстаток;
				КоличествоОстаток = 0;
			Иначе
				НоваяВетвь.Количество = НоваяВетвь.Обеспечено;
				КоличествоОстаток = КоличествоОстаток - НоваяВетвь.Обеспечено;
			КонецЕсли;
			
			НоваяВетвь.Обеспечено = Строка.ОбеспеченоУпаковок;
			
			НоваяВетвь.Отметка = НоваяВетвь.Количество > 0;
			
			СтруктураПересчетаЕдиниц = Новый Структура();
			СтруктураПересчетаЕдиниц.Вставить("ПересчитатьКоличествоУпаковок");
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяВетвь, СтруктураПересчетаЕдиниц, Неопределено);

		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоКорней = ЭлементыДерева.Количество() - 1;
	Для Счетчик = 0 По КоличествоКорней Цикл
		Индекс = КоличествоКорней - Счетчик;
		Корень = ЭлементыДерева[Индекс];
		Если Корень.ПолучитьЭлементы().Количество() = 0 Тогда
			ЭлементыДерева.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицу()
	
	СнятиеРезерва = (ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям);
	
	ТаблицаТоваровОтбора = Неопределено;
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.ВстречнаяКорректировка Тогда
		ТаблицаТоваровОтбора = ТоварыОтбор.Выгрузить();
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ТоварыОтбор",          ТаблицаТоваровОтбора);
	
	СтруктураЗаполнения = Документы.КорректировкаНазначенияТоваров.ЗаполнитьТаблицуСнятияУстановкиРезервов(
							ВидОперации,
							Назначение,
							Заказ,
							КорректировкаНазначения,
							ОтборРезервированияПоСкладуОтгрузки,
							?(ТолькоЗаказыОрганизации, Организация, Неопределено),
							ПараметрыЗаполнения);
							
	Таблица = СтруктураЗаполнения.ТаблицаЗаполненияКорректировки;
	
	ЗаполнитьТаблицуИтогов(СтруктураЗаполнения.ТаблицаИтогов, Таблица);
	ПерезаполнитьКоличествоВТаблицеИтогов(Таблица);
	
	ТаблицаТовары.Загрузить(Таблица);
	
	УстановитьПризнакТребованияПомещенияИЯчейки();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуИтогов(ТаблицаИтогов, Таблица)
	
	ПараметрыОтбораТоваров = Новый Структура("Назначение, Номенклатура, Характеристика, Склад");
	
	Если ТипЗнч(Таблица) = Тип("ТаблицаЗначений") И Таблица.Колонки.Найти("ИдентификаторСтрокиИтогов") = Неопределено Тогда
		Таблица.Колонки.Добавить("ИдентификаторСтрокиИтогов");
	КонецЕсли;
	
	ИтогиЗаказа.Очистить();
	
	// Подготовка таблицы итогов
	Для Каждого Строка Из ТаблицаИтогов Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбораТоваров, Строка);
		
		НайденныеСтрокиТоваров = Таблица.НайтиСтроки(ПараметрыОтбораТоваров);
		
		ДобавитьСтрокуТаблицыИтогов(Строка, НайденныеСтрокиТоваров);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуТаблицыИтогов(ДанныеСтроки, НайденныеСтрокиТоваров)
	
	СтрокаИтогов = ИтогиЗаказа.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаИтогов, ДанныеСтроки);
	
	ИдентификаторСтрокиИтогов = СтрокаИтогов.ПолучитьИдентификатор();
	Для Каждого СтрокаТоваров Из НайденныеСтрокиТоваров Цикл
		СтрокаТоваров.ИдентификаторСтрокиИтогов = ИдентификаторСтрокиИтогов;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьКоличествоВТаблицеИтогов(Таблица = Неопределено)
	
	Сложить = ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.Резервировать
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать;
		
	Если Не ТипЗнч(Таблица) = Тип("ТаблицаЗначений") Тогда
		Таблица = ТаблицаТовары;
	КонецЕсли;
		
	Если ТипЗнч(Таблица) = Тип("ТаблицаЗначений") И Таблица.Колонки.Найти("ИдентификаторСтрокиИтогов") = Неопределено Тогда
		Таблица.Колонки.Добавить("ИдентификаторСтрокиИтогов");
	КонецЕсли;
	
	Для Каждого СтрокаИтогов Из ИтогиЗаказа Цикл
		СтрокаИтогов.Количество = 0;
	КонецЦикла;
	
	Для Каждого Строка Из Таблица Цикл
		СтрокаИтогов = ИтогиЗаказа.НайтиПоИдентификатору(Строка.ИдентификаторСтрокиИтогов);
		Если Строка.Отметка Тогда
			ДобавитьВычестьКоличество = ?(Сложить, Строка.Количество, -Строка.Количество);
		Иначе
			ДобавитьВычестьКоличество = 0;
		КонецЕсли;
		СтрокаИтогов.Количество = СтрокаИтогов.Количество + ДобавитьВычестьКоличество;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтогиПоЗаказу(НазначениеДляИтога)
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Назначение", НазначениеДляИтога);
	
	СтрокиИтогов = ИтогиЗаказа.НайтиСтроки(ПараметрыОтбора);
	
	НеОбеспечен = 0;
	ЧастичноОбеспечено = 0;
	ПолностьюОбеспечен = 0;
	ОбеспеченСверхПотребности = 0;
	
	НетВНаличииНаСкладеОтгрузки = 0;
	ЧастичноВНаличииНаСкладеОтгрузки = 0;
	ПолностьюВНаличииНаСкладеОтгрузки = 0;
	СверхПотребностиВНаличииНаСкладеОтгрузки = 0;
	
	Для Каждого СтрокаИтогов Из СтрокиИтогов Цикл
		
		ОбеспеченоНаВсехСкладах = СтрокаИтогов.Обеспечено + СтрокаИтогов.Количество;
		ВНаличии = СтрокаИтогов.НаСкладе + СтрокаИтогов.Количество;
		Потребность = СтрокаИтогов.Потребность - ОбеспеченоНаВсехСкладах;
		
		// Расчет итогов в целом по заказу
		Если Потребность <= 0 И ОбеспеченоНаВсехСкладах > 0 Тогда
			ПолностьюОбеспечен = ПолностьюОбеспечен + 1;
			Если Потребность < 0 Тогда
				ОбеспеченСверхПотребности = Истина;
			КонецЕсли;
		ИначеЕсли Потребность > 0 И ОбеспеченоНаВсехСкладах > 0 Тогда
			ЧастичноОбеспечено = ЧастичноОбеспечено + 1;
		ИначеЕсли СтрокаИтогов.ПотребностьОсновногоСклада Тогда
			НеОбеспечен = НеОбеспечен + 1;
		КонецЕсли;
		
		Если СтрокаИтогов.ПотребностьОсновногоСклада Тогда
			Если Потребность <= 0
				И СтрокаИтогов.ПотребностьОсновногоСклада Тогда
				ПолностьюВНаличииНаСкладеОтгрузки = ПолностьюВНаличииНаСкладеОтгрузки + 1;
				Если Потребность < 0 Тогда
					СверхПотребностиВНаличииНаСкладеОтгрузки = СверхПотребностиВНаличииНаСкладеОтгрузки + 1;
				КонецЕсли;
			ИначеЕсли ВНаличии > 0
				И СтрокаИтогов.ПотребностьОсновногоСклада Тогда
				ЧастичноВНаличииНаСкладеОтгрузки = ЧастичноВНаличииНаСкладеОтгрузки + 1;
			Иначе
				НетВНаличииНаСкладеОтгрузки = НетВНаличииНаСкладеОтгрузки + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Строковое представление итогов в целом по заказу
	Если НеОбеспечен >= 0 И ЧастичноОбеспечено = 0 И ПолностьюОбеспечен = 0 Тогда
		Элементы.ГруппаСостояние.ТекущаяСтраница = Элементы.ГруппаНеОбеспечено;
	ИначеЕсли ОбеспеченСверхПотребности > 0 И НеОбеспечен = 0 И ЧастичноОбеспечено = 0 Тогда
		Элементы.ГруппаСостояние.ТекущаяСтраница = Элементы.ГруппаОбеспеченСверхПотребности;
	ИначеЕсли ПолностьюОбеспечен > 0 И НеОбеспечен = 0 И ЧастичноОбеспечено = 0 Тогда
		Элементы.ГруппаСостояние.ТекущаяСтраница = Элементы.ГруппаПолностьюОбеспечен;
	Иначе
		Элементы.ГруппаСостояние.ТекущаяСтраница = Элементы.ГруппаОбеспеченЧастично;
	КонецЕсли;
	
	Если НетВНаличииНаСкладеОтгрузки >= 0 И ЧастичноВНаличииНаСкладеОтгрузки = 0 И ПолностьюВНаличииНаСкладеОтгрузки = 0 Тогда
		Элементы.ГруппаВНаличииНаСкладеОтгрузки.ТекущаяСтраница = Элементы.ГруппаНетПозицийНаСкладеОтгрузки;
	ИначеЕсли СверхПотребностиВНаличииНаСкладеОтгрузки > 0 И НетВНаличииНаСкладеОтгрузки = 0 И ЧастичноВНаличииНаСкладеОтгрузки = 0 Тогда
		Элементы.ГруппаВНаличииНаСкладеОтгрузки.ТекущаяСтраница = Элементы.ГруппаСверхПотребностиНаСкладеОтгрузки;
	ИначеЕсли ПолностьюВНаличииНаСкладеОтгрузки > 0 И НетВНаличииНаСкладеОтгрузки = 0 И ЧастичноВНаличииНаСкладеОтгрузки = 0 Тогда
		Элементы.ГруппаВНаличииНаСкладеОтгрузки.ТекущаяСтраница = Элементы.ГруппаПолностьюНаСкладеОтгрузки;
	Иначе
		Элементы.ГруппаВНаличииНаСкладеОтгрузки.ТекущаяСтраница = Элементы.ГруппаЧастичноНаСкладеОтгрузки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьСтроки(Значение)

	ПараметрыОтбора = ПараметрыОтбораСтрок(Элементы);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИндексСтраницы", ПараметрыОтбора.ИндексСтраницы);
	СтруктураОтбора.Вставить("Отметка",        Не Значение);
	
	МассивСтрок = ТаблицаТовары.НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаТоваров Из МассивСтрок Цикл
		СтрокаТоваров.Отметка = Значение;
	КонецЦикла;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.ВстречнаяКорректировка")
	   И ПараметрыОтбора.ИндексСтраницы = 0 Тогда
		ПересчитатьКоличествоВстречнойКорректировки = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПереключательПриИзмененииНаСервере()
	
	ВидОперации = ?(ВидОперацииПереключатель, ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать"), 
		ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.Резервировать"));
	
	НастроитьЭлементыФормыПриСоздании();
	ЗаполнитьТаблицу();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура РежимПриИзмененииНаСервере()
	ЗаполнитьТаблицу();
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаСервере
Функция ДалееНаСервере()
	
	Перем СтруктураСозданияДокумента;
	
	СтруктураВозврата = Новый Структура("СменаСтраницы", Ложь);
	СтруктураВозврата.Вставить("Закрыть", Ложь);
	СтруктураВозврата.Вставить("СменитьСтраницуТоваров", Истина);
	
	ТребуетсяШаг2 = ТребуетсяШаг2();
	
	СменитьСтраницуТоваров = Истина;
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.ВстречнаяКорректировка Тогда
		
		ПараметрыОтбора = ПараметрыОтбораСтрок(Элементы);
		МассивСтрок     = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
		
		СменитьСтраницуТоваров = ТаблицаТовары.Количество() = МассивСтрок.Количество()
								 Или ПараметрыОтбора.ИндексСтраницы > 0;
		
	КонецЕсли;
	
	Если Элементы.Шаги.ТекущаяСтраница = Элементы.ШагПоСкладам И Не СменитьСтраницуТоваров Тогда
	
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Отметка", Истина);
		СтруктураОтбора.Вставить("ИндексСтраницы");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ПараметрыОтбора);
		
		МассивСтрок     = ТаблицаТовары.НайтиСтроки(СтруктураОтбора);
		КоличествоСтрок = МассивСтрок.Количество();
		УстановитьОтборСтрок = КоличествоСтрок > 0;
		
		Если УстановитьОтборСтрок Тогда
			
			СтруктураОтбора.Вставить("Количество", 0);
			
			МассивСтрок = ТаблицаТовары.НайтиСтроки(СтруктураОтбора);
			УстановитьОтборСтрок = КоличествоСтрок > МассивСтрок.Количество();
			
		КонецЕсли;
		
		Если УстановитьОтборСтрок Тогда
		
			УстановитьОтборСтрокТаблицаТовары(Элементы, 1, ФильтрОтметка);
		
			СтруктураВозврата.СменаСтраницы          = Истина;
			СтруктураВозврата.СменитьСтраницуТоваров = СменитьСтраницуТоваров;
			
			Если ПересчитатьКоличествоВстречнойКорректировки Тогда
				ЗаполнитьКоличествоВстречнойКорректировки();
				ПересчитатьКоличествоВстречнойКорректировки = Ложь;
			КонецЕсли;
		
		Иначе
		
			СтруктураСозданияДокумента = Новый Структура;
			СтруктураСозданияДокумента.Вставить(
				"Ошибка", НСтр("ru = 'Ни одна строка, с заполненным количеством, не выбрана.';
								|en = 'Line with populated quantity is not selected.'"));
		
		КонецЕсли;
		
	ИначеЕсли ТребуетсяШаг2 И Элементы.Шаги.ТекущаяСтраница = Элементы.ШагПоСкладам Тогда
		
		Элементы.Шаги.ТекущаяСтраница = Элементы.ШагПоПомещениямЯчейкам;
		
		ЗаполнитьДерево();
		
		СтруктураВозврата.СменаСтраницы = Истина;
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.ШагСписокСозданныхДокументов Тогда
		
		СтруктураВозврата.Закрыть = Истина;
		
	Иначе
		
		ПеренестиДанныеДереваВТаблицу();
		
		Если Параметры.Мастер Тогда
			
			СтруктураСозданияДокумента = СоздатьДокумент();
			
			Если СтруктураСозданияДокумента.Свойство("ОтобразитьСписокСозданныхДокументов")
			   И СтруктураСозданияДокумента.ОтобразитьСписокСозданныхДокументов Тогда
			    
			    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			    	СписокСозданныхДокументов, "Ссылка", СозданныеДокументы, ВидСравненияКомпоновкиДанных.ВСписке);
			   		
			  	Элементы.Шаги.ТекущаяСтраница = Элементы.ШагСписокСозданныхДокументов;
			   		
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
	СтруктураВозврата.Вставить("СтруктураСозданияДокумента", СтруктураСозданияДокумента);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ОтменаДокументовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьСозданныеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСозданныеДокументы()
	
	ОчиститьСообщения();
	
	ДлительнаяОперация = УдалитьСозданныеДокументыСервер();
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация,
		Новый ОписаниеОповещения("УдалитьСозданныеДокументыЗавершение", ЭтотОбъект),
		ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСозданныеДокументыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
	Иначе
		СозданныеДокументы.Очистить();
		ВыполнитьПервоначальноеЗаполнениеИНастроитьФорму();
		Элементы.Шаги.ТекущаяСтраница = Элементы.ШагПоСкладам;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УдалитьСозданныеДокументыСервер()
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("УдаляемыДокументы", СозданныеДокументы.ВыгрузитьЗначения());
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Заполнение корректировки назначения: удаление документов';
			|en = 'Populating assignment adjustment: deleting documents'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ЗаполнениеКорректировкиНазначения.УдалитьДокументы", ПараметрыПроцедуры, ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаСервере
Процедура ВыполнитьПервоначальноеЗаполнениеИНастроитьФорму()
	
	ЗадатьЗначенияПоУмолчанию();
	
	НастроитьЭлементыФормыПриСоздании();
	
	ЗаполнитьТаблицу();
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоличествоВстречнойКорректировки()
	
	КоличествоБаза = 0;
	
	МассивСтрок = ТаблицаТовары.НайтиСтроки(Новый Структура("Отметка, ИндексСтраницы", Истина, 0));
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		Если СтрокаТаблицы.Количество > 0 Тогда
			КоличествоБаза = КоличествоБаза + СтрокаТаблицы.Количество;
		КонецЕсли;
	КонецЦикла;
		
	Если КоличествоБаза > 0 Тогда
		
		МассивСтрок = ТаблицаТовары.НайтиСтроки(Новый Структура("ИндексСтраницы", 1));
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			
			ОтборПоНоменклатуре = Новый Структура;
			ОтборПоНоменклатуре.Вставить("Номенклатура"  , СтрокаТаблицы.Номенклатура);
			ОтборПоНоменклатуре.Вставить("Характеристика", СтрокаТаблицы.Характеристика);
			ОтборПоНоменклатуре.Вставить("Склад",          СтрокаТаблицы.Склад);
			ОтборПоНоменклатуре.Вставить("ПоНазначению"  , 1);
			
			МассивСтрокТоварыОтбор = ТоварыОтбор.НайтиСтроки(ОтборПоНоменклатуре);
			СтрокаТоварыОтбор      = МассивСтрокТоварыОтбор[0];
			
			Если СтрокаТоварыОтбор.КоэффициентКорректировки = 0 Тогда
				СтрокаТаблицы.Количество = 0;
			Иначе
				
				ТипИзмеряемойВеличины = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
											СтрокаТаблицы.Номенклатура, "ЕдиницаИзмерения.ТипИзмеряемойВеличины");
				
				КоличествоКорректировки = КоличествоБаза * СтрокаТоварыОтбор.КоэффициентКорректировки;
				Если ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук Тогда
					КоличествоКорректировки = Окр(КоличествоКорректировки);
					КоличествоКорректировки = ?(КоличествоКорректировки = 0, 1, КоличествоКорректировки); 
				КонецЕсли;
			
				СтрокаТаблицы.Количество = 
					Мин(КоличествоКорректировки, СтрокаТоварыОтбор.Остаток, СтрокаТаблицы.ВНаличии);
				
			КонецЕсли;
			
			СтрокаТаблицы.Отметка = СтрокаТаблицы.Количество > 0;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстРазделителяЗапросов()
	
	Возврат 
	"
	|	
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

#КонецОбласти
