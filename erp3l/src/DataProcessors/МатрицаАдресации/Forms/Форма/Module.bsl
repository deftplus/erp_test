// Выводит дерево реквизитов по выбраному справочнику ИБ.
&НаСервере
Процедура ОбновитьДеревоИерархии()
	Если ЗначениеЗаполнено(СправочникТекущейИБ) Тогда
				
		ИмяСправочника = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(СправочникТекущейИБ, "Наименование");		
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		МакетДокумента = ОбработкаОбъект.ПолучитьМакет("МакетИерархия");  
		ДокументРезультат = Новый ДеревоЗначений;
		СтруктураВнешнихДанных = Новый Структура;
		Для Каждого ТекПараметры Из МакетДокумента.Параметры Цикл
			Если СокрЛП(ТекПараметры.Имя) = "МС" Тогда
				ТекПараметры.Значение = Справочники[ИмяСправочника].ПустаяСсылка();
			ИначеЕсли СокрЛП(ТекПараметры.Имя) = "Тип" Тогда
				СтрокаТипа = "СправочникСсылка." + ИмяСправочника;
				НовыйТип = Тип(СтрокаТипа);
				ТекПараметры.Значение = НовыйТип;
			Иначе
				// Не устанавливаем прочие внешние параметры СКД.
			КонецЕсли;
		КонецЦикла;
		
		МакетДокумента.СвязиНаборовДанных[0].НачальноеВыражение = "ЗНАЧЕНИЕ(Справочник." + ИмяСправочника + ".ПустаяСсылка)";
		МакетДокумента.СвязиНаборовДанных[0].УсловиеСвязи = "ЭлементАдресации <> ЗНАЧЕНИЕ(Справочник." + ИмяСправочника + ".ПустаяСсылка)";
				
		ТиповыеОтчетыУХ.ПолучитьКоллекциюРезультат(МакетДокумента, , СтруктураВнешнихДанных, , , , , ДокументРезультат);		
		ЗначениеВРеквизитФормы(ДокументРезультат, "ДеревоИерархии");
		
		ДеревоИерархииЗначение = РеквизитФормыВЗначение("ДеревоИерархии");
		
		Для Каждого СтрокаАдресации Из ДеревоИерархииЗначение.Строки Цикл
			Если Не ЗначениеЗаполнено(СтрокаАдресации.ЭлементАдресации) тогда
				СтрокаАдресации.ЭлементАдресации = ПолучитьПредставлениеПустогоОбъекта(СправочникТекущейИБ);
			КонецЕсли;
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ДеревоИерархииЗначение, "ДеревоИерархии");
				
		Элементы.ТаблицаОтветственныхОрганизация.Заголовок = СправочникТекущейИБ.Синоним;
	Иначе
		// Справочник не выбран. Не обновляем существующее дерево.
		ДеревоИерархии.ПолучитьЭлементы().Очистить();
	КонецЕсли;
КонецПроцедуры		// ОбновитьДеревоРеквизитов()

// Добавляет в регистр ответственных сотрудника из пользователя ПользовательВход 
// для реквизита РеквизитВход.
&НаСервереБезКонтекста
Процедура ДобавитьСотрудникаВРегистр(РеквизитВход, ПользовательВход)
	
	Если РеквизитВход <> неопределено Тогда	
		Если ЗначениеЗаполнено(ПользовательВход) Тогда
			РольСотрудник = Справочники.РолиКонтактныхЛиц.Сотрудник;
			НаборЗаписей = РегистрыСведений.ОтветственныеОрганизаций.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(РеквизитВход); 
			НаборЗаписей.Отбор.Роль.Установить(РольСотрудник); 
			НаборЗаписей.Отбор.Пользователь.Установить(ПользовательВход); 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Организация		 = РеквизитВход; 
			НоваяЗапись.Роль			 = РольСотрудник; 
			НоваяЗапись.Пользователь	 = ПользовательВход; 
			НаборЗаписей.Записать(); 
		Иначе
			ТекстСообщения = НСтр("ru = 'Пользователь не выбран. Добавление сотрудника отменено.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Реквизит согласования не задан. Добавление сотрудника отменено.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры		// ДобавитьСотрудникаВРегистр()

// Возвращает копию массива реквизитов адресации МассивВход, из которого убраны
// реквизиты, которым уже сопоставлены руководители.
&НаСервереБезКонтекста
Функция ОчиститьМассивРеквизитовРуководителя(МассивВход)
	РезультатФункции = Новый Массив;
	РольРукводитель = Справочники.РолиКонтактныхЛиц.Руководитель;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОтветственныеОрганизаций.Организация КАК Организация,
		|	ОтветственныеОрганизаций.Роль КАК Роль
		|ИЗ
		|	РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций
		|ГДЕ
		|	ОтветственныеОрганизаций.Роль = &РольРукводитель";
	Запрос.УстановитьПараметр("РольРукводитель", РольРукводитель);
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	МассивРеквизитов = Выгрузка.ВыгрузитьКолонку("Организация");
	Для Каждого ТекМассивВход Из МассивВход Цикл
		РеквизитНайден = (МассивРеквизитов.Найти(ТекМассивВход) <> Неопределено);
		Если НЕ РеквизитНайден Тогда
			РезультатФункции.Добавить(ТекМассивВход);
		Иначе
			// Элемент найден среди уже заполненных. Пропускаем.
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		// ОчиститьМассивРеквизитовРуководителя()

// Размещает пустого пользователя роли Руководитель для всех значений реквизитов
// адресации из массива МассивРеквизитовВход. Возвращает успешность выполнения 
// операции.
&НаСервереБезКонтекста
Функция РазместитьРуководителейПоМассиву(МассивРеквизитовВход)
	РезультатФункции = Истина;
	НачатьТранзакцию();
	ЕстьОшибки = Ложь;
	Попытка
		РольРуководитель = Справочники.РолиКонтактныхЛиц.Руководитель;
		ПустойПользователь = Справочники.Пользователи.ПустаяСсылка();
		МассивРеквизитовОчищ = ОчиститьМассивРеквизитовРуководителя(МассивРеквизитовВход);
		Для Каждого ТекМассивРеквизитовОчищ Из МассивРеквизитовОчищ Цикл
			НаборЗаписей = РегистрыСведений.ОтветственныеОрганизаций.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(ТекМассивРеквизитовОчищ); 
			НаборЗаписей.Отбор.Роль.Установить(РольРуководитель); 
			НаборЗаписей.Отбор.Пользователь.Установить(ПустойПользователь); 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Организация		 = ТекМассивРеквизитовОчищ; 
			НоваяЗапись.Роль			 = РольРуководитель; 
			НоваяЗапись.Пользователь	 = ПустойПользователь; 
			НаборЗаписей.Записать(); 
		КонецЦикла;	
	Исключение
		ТекстСообщения = НСтр("ru = 'При размещении руководителей возникли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		ЕстьОшибки = Истина;
	КонецПопытки;
	Если НЕ ЕстьОшибки Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
		РезультатФункции = Ложь;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Возвращает таблицу значений с данными справочника СправочникИбВход.
&НаСервереБезКонтекста
Функция ПолучитьТаблицуДанныхСправочника(СправочникИбВход)
	РезультатФункции = Новый ТаблицаЗначений;
	ИмяСправочника = СправочникИбВход.Наименование;
	ТекВидИерархии = СправочникИбВход.ВидИерархии;
	// Получение исходных данных.
	Запрос = Новый Запрос;
	Если СправочникИбВход.ИерархическийСправочник Тогда
		// Иерархический справочник. Добавляем родителей.
		Если ТекВидИерархии = Перечисления.ВидИерархии.ИерархияГруппИЭлементов Тогда
			// Отображаем отдельно группы и элементы.
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Контрагенты.Ссылка КАК Ссылка,
			|	ВЫБОР
			|		КОГДА Контрагенты.ЭтоГруппа
			|			ТОГДА 0
			|		ИНАЧЕ 3
			|	КОНЕЦ КАК ИндексКартинки,
			|	Контрагенты.Родитель КАК Родитель
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	НЕ Контрагенты.ПометкаУдаления";
		Иначе
			// Отображаем только элементы в дереве.
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Контрагенты.Ссылка КАК Ссылка,
			|	3 КАК ИндексКартинки,
			|	Контрагенты.Родитель КАК Родитель
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	НЕ Контрагенты.ПометкаУдаления";
		КонецЕсли;
	Иначе
		// Нет иерархии в справочнике. Только плоский список.
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Контрагенты.Ссылка КАК Ссылка,
		|	3 КАК ИндексКартинки,
		|	НЕОПРЕДЕЛЕНО КАК Родитель
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ Контрагенты.ПометкаУдаления";
	КонецЕсли;
	НовыйСправочникВЗапросе = "Справочник." + ИмяСправочника;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.Контрагенты", НовыйСправочникВЗапросе);
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьТаблицуДанныхСправочника()

// Выполняет заполнение иерархии расширенной адресации по справочнику СправочникИбВход.
// Возвращает успешность выполнения операции.
&НаСервереБезКонтекста
Функция ЗаполнениеПоСправочнику(СправочникИбВход)
	// Инициализация.
	РезультатФункции = Истина;
	ПустойЭлемент = ПустойЭлементИерархии(СправочникИбВход);
	// Получение исходных данных.
	ТаблицаДанныхСправочника = ПолучитьТаблицуДанныхСправочника(СправочникИбВход);
	// Запись в регистр.
	НачатьТранзакцию();
	ЕстьОшибки = Ложь;
	Для Каждого ТекТаблицаДанныхСправочника Из ТаблицаДанныхСправочника Цикл
		Попытка
			ТекЭлементАдресации = ТекТаблицаДанныхСправочника.Ссылка;
			ТекРодитель = ТекТаблицаДанныхСправочника.Родитель;
			// Очистим существующие элементы.
			НаборЗаписей = РегистрыСведений.ИерархияРасширеннойАдресации.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЭлементАдресации.Установить(ТекЭлементАдресации); 
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			// Запишем новые элемент в регистр.
			НовыйРодитель = ПустойЭлемент;
			Если ЗначениеЗаполнено(ТекРодитель) Тогда
				НовыйРодитель	 = ТекРодитель; 
			Иначе
				НовыйРодитель	 = ПустойЭлемент;
			КонецЕсли;
			НаборЗаписей = РегистрыСведений.ИерархияРасширеннойАдресации.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЭлементАдресации.Установить(ТекЭлементАдресации); 
			НаборЗаписей.Отбор.РодительЭлемента.Установить(НовыйРодитель); 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.ЭлементАдресации	 = ТекЭлементАдресации; 
			НоваяЗапись.РодительЭлемента	 = НовыйРодитель; 
			НоваяЗапись.СправочникИБ		 = СправочникИбВход;
			НаборЗаписей.Записать(Истина); 
		Исключение
			ТекстСообщения = НСтр("ru = 'При заполнении по справочнику ""%Справочник%"" для элемента ""%Элемент%"" произошли ошибки: %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Справочник%", Строка(СправочникИбВход));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Элемент%", Строка(ТекЭлементАдресации));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			ЕстьОшибки = Истина;
		КонецПопытки;
	КонецЦикла;	
	// Фиксирование транзакции.
	Если НЕ ЕстьОшибки Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
		РезультатФункции = Ложь;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ЗаполнениеПоСправочнику()

// Добавляет в иерархию адресации элемент ЭлементВход справочника СправочникИбВход.
&НаСервереБезКонтекста
Процедура ДобавитьЭлементАдресацииВКорень(ЭлементВход, СправочникИбВход)
	
	Если Не ЗначениеЗаполнено(СправочникИбВход) тогда		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЭлементВход) тогда		
		ЭлементВход = ПолучитьПустоеЗначениеСправочника(СправочникИбВход);
	КонецЕсли;
		
	Попытка
		НовыйРодитель = ПустойЭлементИерархии(СправочникИбВход);
		НаборЗаписей = РегистрыСведений.ИерархияРасширеннойАдресации.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЭлементАдресации.Установить(ЭлементВход); 
		НаборЗаписей.Отбор.РодительЭлемента.Установить(НовыйРодитель); 
		НоваяЗапись = НаборЗаписей.Добавить(); 
		НоваяЗапись.ЭлементАдресации	 = ЭлементВход; 
		НоваяЗапись.РодительЭлемента	 = НовыйРодитель; 
		НоваяЗапись.СправочникИБ		 = СправочникИбВход;
		НаборЗаписей.Записать(Истина); 
	Исключение
		ТекстСообщения = НСтр("ru = 'При добавлении в иерархию справочника  ""%Справочник%"" элемента ""%Элемент%"" произошли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Справочник%", Строка(СправочникИбВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Элемент%", Строка(ЭлементВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		ЕстьОшибки = Истина;
	КонецПопытки;
КонецПроцедуры		// ДобавитьЭлементАдресацииВКорень()

// Управляет доступностью элементов на форме Форма.
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)
	// Получение состояний формы.
	ТекОтбиратьОрганизации = Форма.ОтбиратьОрганизации;
	ЗаполненСправочникИБ = ЗначениеЗаполнено(Форма.СправочникТекущейИБ);
	ВыбранСправочникОрганизации = (Форма.СправочникТекущейИБ = Форма.СправочникОрганизация);
	// Отображение элементов в зависимости от заполнения текущего справочника БД.
	Форма.Элементы.ДеревоИерархии.Видимость = ТекОтбиратьОрганизации;
	Форма.Элементы.ОтображениеДереваРеквизита.Пометка = ТекОтбиратьОрганизации;
	Если Форма.ОтбиратьОрганизации Тогда
		Форма.Элементы.ОтображениеДереваРеквизита.Заголовок = НСтр("ru = 'Скрыть дерево'");
	Иначе
		Форма.Элементы.ОтображениеДереваРеквизита.Заголовок = НСтр("ru = 'Показать дерево'");
	КонецЕсли;
	Форма.Элементы.ТаблицаОтветственныхОрганизация.Видимость = НЕ ТекОтбиратьОрганизации;
	// Отображение команд, специфичных для справочника Организации.
	Форма.Элементы.ДеревоРеквизитаЗаполнитьРуководителей.Видимость = (ТекОтбиратьОрганизации И ЗаполненСправочникИБ И ВыбранСправочникОрганизации);
	Форма.Элементы.ПодборСотрудников.Видимость = (ТекОтбиратьОрганизации И ЗаполненСправочникИБ И ВыбранСправочникОрганизации);
КонецПроцедуры		// УправлениеДоступностью()

// Удаляет  элемент иерархии ЭлементАдресацииВход с родителем РодительЭлементаВход
// из иерархии адресации. Возвращает успешность выполнения операции.
&НаСервереБезКонтекста
Функция УдалитьЭлементАдресации(ЭлементАдресацииВход, РодительЭлементаВход)
	РезультатФункции = Истина;
	Попытка
		НаборЗаписей = РегистрыСведений.ИерархияРасширеннойАдресации.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЭлементАдресации.Установить(ЭлементАдресацииВход); 
		НаборЗаписей.Отбор.РодительЭлемента.Установить(РодительЭлементаВход); 
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина); 
	Исключение
		ТекстСообщения = НСтр("ru = 'При удалении элемента иерархии ""%Элемент%"" произошли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Элемент%", Строка(ЭлементАдресацииВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Ложь;
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции		// УдалитьЭлементАдресации()

// Переносит элемент ЭлементАдресацииВход из группы ИсходныйРодитель
// в группу РодительПриемникВход для иерархии справочника СправочникИбВход.
&НаСервереБезКонтекста
Процедура ПереместитьЭлементВГруппу(ЭлементАдресацииВход, ИсходныйРодитель, РодительПриемникВход, СправочникИбВход)
	// Инициализация.
	ЕстьОшибки = Ложь;
	НачатьТранзакцию();
	Попытка
		// Удаление исходного набора.
		НаборЗаписей = РегистрыСведений.ИерархияРасширеннойАдресации.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЭлементАдресации.Установить(ЭлементАдресацииВход); 
		НаборЗаписей.Отбор.РодительЭлемента.Установить(ИсходныйРодитель); 
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина); 		
		// Добавление нового набора.
		НаборЗаписей = РегистрыСведений.ИерархияРасширеннойАдресации.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЭлементАдресации.Установить(ЭлементАдресацииВход); 
		НаборЗаписей.Отбор.РодительЭлемента.Установить(РодительПриемникВход); 
		НоваяЗапись = НаборЗаписей.Добавить(); 
		НоваяЗапись.ЭлементАдресации	 = ЭлементАдресацииВход; 
		НоваяЗапись.РодительЭлемента	 = РодительПриемникВход; 
		НоваяЗапись.СправочникИБ		 = СправочникИбВход;
		НаборЗаписей.Записать(Истина); 		
	Исключение
		ТекстСообщения = НСтр("ru = 'При перемещении элемента ""%Элемент%"" из группы ""%ИсходнаяГруппа%"" в группу ""%ГруппаПриемник%"" иерархии справочника ""%Справочник%"" произошли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Элемент%", Строка(ЭлементАдресацииВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИсходнаяГруппа%", Строка(ИсходныйРодитель));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ГруппаПриемник%", Строка(РодительПриемникВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Справочник%", Строка(СправочникИбВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		ЕстьОшибки = Истина;
	КонецПопытки;
	// Фиксирование транзакции.
	Если НЕ ЕстьОшибки Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры		// ПереместитьЭлементВГруппу()

// Корневой элемент дерева иерархии.
&НаКлиентеНаСервереБезКонтекста
Функция ПустойЭлементИерархии(СправочникИбВход)
		
	Если ЗначениеЗаполнено(СправочникИбВход) тогда
		РезультатФункции = ПолучитьПустоеЗначениеСправочника(СправочникИбВход);
	Иначе
		РезультатФункции = неопределено;
	КонецЕсли;
		
	Возврат РезультатФункции;
	
КонецФункции		// ПустойЭлементИерархии()

// Удаляет в регистре ОтветственныеОрганизации данные по элементу адресации ЭлементАдресацииВход.
&НаСервереБезКонтекста
Функция УдалитьРольАдресации(ЭлементАдресацииВход)
	РезультатФункции = Истина;
	Попытка
		НаборЗаписей = РегистрыСведений.ОтветственныеОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(ЭлементАдресацииВход); 
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина); 
	Исключение
		ТекстСообщения = НСтр("ru = 'При удалении ответственных по объекту ""%Объект%"" произошли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Строка(ЭлементАдресацииВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции		 // УдалитьРольАдресации()

// Удаляет в регистре ОтветственныеОрганизации данные по всем элементам адресации  из массива
// МассивЭлементовВход.
&НаСервереБезКонтекста
Функция УдалитьРолиВМассиве(МассивЭлементовВход)
	РезультатФункции = Истина;
	МассивРабочий = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивЭлементовВход);
	МассивРабочий = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивРабочий);	
	Для Каждого ТекМассивРабочий Из МассивРабочий Цикл
		РезультатВыполнения = УдалитьРольАдресации(ТекМассивРабочий);
		Если НЕ РезультатВыполнения Тогда
			РезультатФункции = Ложь;
		Иначе
			// Операция выполнена без ошибок.
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		 // УдалитьРолиВМассиве()

// Удаляет элементы расширенной адресации из базы по массиву данных МассивДанныхСтрокВход.
// Возвращает успешность выполнения операции.
&НаСервереБезКонтекста
Функция УдалитьЭлементыАдресацииПоМассиву(МассивДанныхСтрокВход)
	РезультатФункции = Истина;
	Для Каждого ТекМассивДанныхСтрокВход Из МассивДанныхСтрокВход Цикл
		// Получение данных.
		ТекЭлемент = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекМассивДанныхСтрокВход, "ЭлементАдресации", Неопределено);
		ТекРодитель = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекМассивДанныхСтрокВход, "РодительЭлемента", Неопределено);
		// Удаление элемента адресации.
		РезультатУдаленияИерархия = УдалитьЭлементАдресации(ТекЭлемент, ТекРодитель);
		Если НЕ РезультатУдаленияИерархия Тогда
			РезультатФункции = Ложь;
		Иначе
			// Операция выполнена успешно.
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		 // УдалитьЭлементыАдресацииПоМассиву()

// Формирует и возвращает структуру параметров для передачи в форму выбора родителя.
&НаСервере
Функция СформироватьСтруктуруВыбораГруппы()
	РезультатФункции = Новый Структура;
	ЗначениеДеревоИерархии = РеквизитФормыВЗначение("ДеревоИерархии");
	ЗначениеДеревоИерархии.Колонки.Удалить("РодительЭлемента");
	АдресДеревоИерархии = ПоместитьВоВременноеХранилище(ЗначениеДеревоИерархии);
	РезультатФункции.Вставить("АдресДеревоИерархии", АдресДеревоИерархии);
	Возврат РезультатФункции;
КонецФункции		 // СформироватьСтруктуруВыбораГруппы()

// Серверная обёртка команды ДобавитьНедостающиеЭлементыИзСправочника. Возвращает
// успешность выполнения операции.
&НаСервере
Функция ДобавитьНедостающиеЭлементыИзСправочника_Сервер()
	// Инициализация.
	РезультатФункции = Истина;
	ПустойЭлемент = ПустойЭлементИерархии(СправочникТекущейИБ);
	// Получение данных из справочника.
	ДанныеСправочника = ПолучитьТаблицуДанныхСправочника(СправочникТекущейИБ);
	МассивСсылок = ДанныеСправочника.ВыгрузитьКолонку("Ссылка");
	МассивСсылок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСсылок);
	МассивСсылок = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивСсылок);
	// Получение данных из дерева на форме.
	ЗначениеДеревоИерархии = РеквизитФормыВЗначение("ДеревоИерархии");
	ТаблицаИерархии = ОбщегоНазначенияСерверУХ.ПреобразоватьДеревоЗначенийВТаблицу(ЗначениеДеревоИерархии);
	СуществующиеЭлементы = ТаблицаИерархии.ВыгрузитьКолонку("ЭлементАдресации");
	СуществующиеЭлементы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СуществующиеЭлементы);
	СуществующиеЭлементы = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(СуществующиеЭлементы);
	// Сравнение полученных массивов.
	МассивКДобавлению = Новый Массив;
	Для Каждого ТекМассивСсылок Из МассивСсылок Цикл
		Если СуществующиеЭлементы.Найти(ТекМассивСсылок) = Неопределено Тогда
			МассивКДобавлению.Добавить(ТекМассивСсылок);
		Иначе
			// Элемент уже есть в дереве.
		КонецЕсли;
	КонецЦикла;	
	// Добавление полученных элементов в регистр.
	ЕстьОшибки = Ложь;
	НачатьТранзакцию();
	Для Каждого ТекМассивКДобавлению Из МассивКДобавлению Цикл
		Попытка
			НаборЗаписей = РегистрыСведений.ИерархияРасширеннойАдресации.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЭлементАдресации.Установить(ТекМассивКДобавлению); 
			НаборЗаписей.Отбор.РодительЭлемента.Установить(ПустойЭлемент); 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.ЭлементАдресации	 = ТекМассивКДобавлению; 
			НоваяЗапись.РодительЭлемента	 = ПустойЭлемент; 
			НоваяЗапись.СправочникИБ		 = СправочникТекущейИБ;
			НаборЗаписей.Записать(Истина); 
		Исключение
			ЕстьОшибки = Истина;
			ТекстСообщения = НСтр("ru = 'При добавлении элемента %Элемент% в иерархию возникли ошибки: %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Элемент%", Строка(ТекМассивКДобавлению));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецПопытки;
	КонецЦикла;	
	// Фиксирование транзакции.
	Если НЕ ЕстьОшибки Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
		РезультатФункции = Ложь;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ДобавитьНедостающиеЭлементыИзСправочника_Сервер()

// Переносит все элементы из массива данных иерархии МассивДанныхВход в корень иерархии.
&НаСервереБезКонтекста
Функция ОчиститьРодителейИерархииВМассиве(МассивДанныхВход, СправочникИбВход)
	// Инициализация.
	ЕстьОшибки = Ложь;
	ПустойЭлемент = ПустойЭлементИерархии(СправочникИбВход);
	РезультатФункции = Истина;
	// Очистка родителей в регистре.
	НачатьТранзакцию();
	Для Каждого ТекМассивДанныхВход Из МассивДанныхВход Цикл
		Попытка
			НаборЗаписей = РегистрыСведений.ИерархияРасширеннойАдресации.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЭлементАдресации.Установить(ТекМассивДанныхВход.ЭлементАдресации); 
			НаборЗаписей.Прочитать();
			Для Каждого ТекНаборЗаписей Из НаборЗаписей Цикл
				ТекНаборЗаписей.РодительЭлемента = ПустойЭлемент;				
			КонецЦикла;	
			НаборЗаписей.Записать(Истина); 
		Исключение
			ЕстьОшибки = Истина;
			ТекстСообщения = НСтр("ru = 'При переносе элемента ""%Элемент%"" в корень иерархии возникли ошибки: %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Элемент%", Строка(ТекМассивДанныхВход));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецПопытки;
	КонецЦикла;	
	// Фиксирование транзакции.
	Если НЕ ЕстьОшибки Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
		РезультатФункции = Ложь;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		 // ОчиститьРодителейИерархииВМассиве()

// Возвращает массив, в котором из массива МассивЭлементовАдресацииВход отобраны те элементы адресации,
// для которых в системе назначены ответственные по ролям.
&НаСервереБезКонтекста
Функция ОпределитьЗаполненныеРоли(МассивЭлементовАдресацииВход)
	РезультатФункции = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОтветственныеОрганизаций.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций
		|ГДЕ
		|	ОтветственныеОрганизаций.Роль <> ЗНАЧЕНИЕ(Справочник.РолиКонтактныхЛиц.ПустаяСсылка)
		|	И ОтветственныеОрганизаций.Организация В(&Организация)";
	Запрос.УстановитьПараметр("Организация", МассивЭлементовАдресацииВход);
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	РезультатФункции = Выгрузка.ВыгрузитьКолонку("Организация");
	Возврат РезультатФункции;
КонецФункции		 // ОпределитьЗаполненныеРоли()

// Рекурсивно получает реквизиты на листах дерева УзелВход, дополняя
// массив МассивРезультатИзм. Параметр ГлубинаРекурсииВход защищает
// от бесконечной рекурсии.
&НаКлиенте
Процедура ВыполнитьПолучениеЛистовДерева(УзелВход, МассивРезультатИзм, ТолькоЛистьяВход = Истина, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 9999 Тогда
		Возврат;
	КонецЕсли;
	ЭлементыУзла = УзелВход.ПолучитьЭлементы();
	Если ЭлементыУзла.Количество() > 0 Тогда
		Для Каждого ТекЭлементыУзла Из ЭлементыУзла Цикл
			ВыполнитьПолучениеЛистовДерева(ТекЭлементыУзла, МассивРезультатИзм, ТолькоЛистьяВход, ГлубинаРекурсииВход + 1);
			Если НЕ ТолькоЛистьяВход Тогда				
				Если ТекЭлементыУзла.ЭлементАдресации = ПолучитьПредставлениеПустогоОбъекта(СправочникТекущейИБ) тогда
					МассивРезультатИзм.Добавить(ПолучитьПустоеЗначениеСправочника(СправочникТекущейИБ));	
				Иначе
					МассивРезультатИзм.Добавить(ТекЭлементыУзла.ЭлементАдресации);
				КонецЕсли;				
			Иначе
				// Пропускаем нелистовой элемент.
			КонецЕсли;
		КонецЦикла;	
	Иначе
		Если ТипЗнч(УзелВход) <> Тип("ДанныеФормыДерево") тогда
			Если УзелВход.ЭлементАдресации = ПолучитьПредставлениеПустогоОбъекта(СправочникТекущейИБ) тогда
				МассивРезультатИзм.Добавить(ПолучитьПустоеЗначениеСправочника(СправочникТекущейИБ));	
			Иначе
				МассивРезультатИзм.Добавить(УзелВход.ЭлементАдресации);
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры		// ВыполнитьПолучениеЛистовДерева()

// Возвращает массив элементов на листах дерева реквизитов.
&НаКлиенте
Функция ПолучитьМассивЛистовРеквизитов(ТолькоЛистьяВход = Истина)
	РезультатФункции = Новый Массив;
	ВыполнитьПолучениеЛистовДерева(ДеревоИерархии, РезультатФункции, ТолькоЛистьяВход);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьМассивЛистовРеквизитов()

// Обновляет данные в таблицах на форме.
&НаКлиенте
Процедура ОбновитьДанныеНаФорме()
	ОбновитьДеревоИерархии();
	УстановитьОтборВТаблицеОтветственных();
	УправлениеДоступностью(ЭтаФорма);
КонецПроцедуры		// ОбновитьДанные()

// Определяет, выбран ли справочник Организации в качестве справочника текущей ИБ на форме.
&НаКлиенте
Функция ВыбранСправочникОрганизации()
	РезультатФункции = (СправочникТекущейИБ = СправочникОрганизация);
	Возврат РезультатФункции;
КонецФункции		 // ВыбранСправочникОрганизации()	

// Перемещает в группу ЭлементПриемникВход элементы из ДанныеВыделенныхСтрокВход внутри
// справочника СправочникИбВход.
&НаКлиенте
Процедура ПереместитьМассивЭлементовВГруппу(ДанныеВыделенныхСтрокВход, ЭлементПриемникВход, СправочникИбВход)
	Для Каждого ТекДанныеВыделенныхСтрок Из ДанныеВыделенныхСтрокВход Цикл
		ТекЭлементАдресации = ТекДанныеВыделенныхСтрок.ЭлементАдресации;
		Если ТекЭлементАдресации = ПолучитьПредставлениеПустогоОбъекта(СправочникИбВход) тогда
			Продолжить;
		КонецЕсли;		
		ТекРодительЭлемента = ТекДанныеВыделенныхСтрок.РодительЭлемента;
		ПереместитьЭлементВГруппу(ТекЭлементАдресации, ТекРодительЭлемента, ЭлементПриемникВход, СправочникИбВход);
	КонецЦикла;	
КонецПроцедуры		 // ПереместитьМассивЭлементовВГруппу()

// Рекурсивно добавляет в массив МассивИзм данные из узла УзелВход.
&НаКлиенте
Процедура ДобавитьЗависимыеСтрокиВМассив(УзелВход, МассивИзм, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 9999 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ТекЭлементы Из УзелВход.ПолучитьЭлементы() Цикл
		СтруктураВыделеннойСтроки = Новый Структура;
		СтруктураВыделеннойСтроки.Вставить("ЭлементАдресации", ТекЭлементы.ЭлементАдресации);
		СтруктураВыделеннойСтроки.Вставить("РодительЭлемента", ТекЭлементы.РодительЭлемента);
		МассивИзм.Добавить(СтруктураВыделеннойСтроки);
		ДобавитьЗависимыеСтрокиВМассив(ТекЭлементы, МассивИзм, ГлубинаРекурсииВход + 1);
	КонецЦикла;	
КонецПроцедуры		// ДобавитьЗависимыеСтрокиВМассив()

// Непосредственно осуществляет перезаполнение иерархии по справочнику
&НаКлиенте
Процедура ВыполнитьПерезаполнениеИерархии()
	РезультатЗаполнения = ЗаполнениеПоСправочнику(СправочникТекущейИБ);
	Если РезультатЗаполнения Тогда
		КартинкаОповещения = БиблиотекаКартинок.Успешно32;
		ТекстОповещения = НСтр("ru = 'Заполнение'");
		ПояснениеОповещения = НСтр("ru = 'Иерархия по справочнику ""%Справочник%"" успешно заполнена'");
		ПояснениеОповещения = СтрЗаменить(ПояснениеОповещения, "%Справочник%", Строка(СправочникТекущейИБ));
		ПоказатьОповещениеПользователя(ТекстОповещения, , ПояснениеОповещения, КартинкаОповещения);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось заполнить иерархию по справочнику ""%Справочник%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Справочник%", Строка(СправочникТекущейИБ));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
	ОбновитьДанныеНаФорме();	
КонецПроцедуры		// ВыполнитьПерезаполнениеИерархии()

// Возвращает массив, в который помещены элементы адресации из массива 
// данных адресации МассивВход.
&НаКлиенте
Функция ВыделитьЭлементыАдресации(МассивВход)
	РезультатФункции = Новый Массив;
	Для Каждого ТекМассивВход Из МассивВход Цикл
		РезультатФункции.Добавить(ТекМассивВход.ЭлементАдресации);
	КонецЦикла;	
	РезультатФункции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатФункции);	
	Возврат РезультатФункции;
КонецФункции		 // ВыделитьЭлементыАдресации()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СправочникОрганизация = ОбщегоНазначенияСерверУХ.ВернутьСсылкуБДПоТипу(Тип("СправочникСсылка.Организации"));
	СправочникТекущейИБ = СправочникОрганизация;
	ОтбиратьОрганизации = Истина;
	ОбновитьДеревоИерархии();
	УправлениеДоступностью(ЭтаФорма);
	ПредставлениеКореньДерева = РеквизитФормыВЗначение("Объект").ПредставлениеКореньДерева();
	
	Шаблон = 
	"		КОГДА РегистрСведенийОтветственныеОрганизаций.Организация = ЗНАЧЕНИЕ(Справочник.%1.ПустаяСсылка)
	|			ТОГДА ""%2""";
	
	Вставка = "ВЫБОР";
	
	Для Каждого Справочник Из Метаданные.Справочники Цикл
		ИмяСправочника = СтрЗаменить(Справочник.ПолноеИмя(), "Справочник.", "");
		ПредставлениеСправочника = СтрЗаменить(Строка(Справочник), """", """""");
		Если ИмяСправочника = "" тогда
			Продолжить;
		КонецЕсли;
		
		Вставка = Вставка + Символы.ПС + СтрШаблон(Шаблон, ИмяСправочника, СтрШаблон(НСтр("ru = '<%1: все элементы>'"), ПредставлениеСправочника));
	КонецЦикла;
	
	СтрокаНеопределено = НСтр("ru = '<Не определено>'");
	
	Вставка = Вставка + "
	|		КОГДА РегистрСведенийОтветственныеОрганизаций.Организация = НЕОПРЕДЕЛЕНО
	|			ТОГДА """ + СтрокаНеопределено + """
	|		ИНАЧЕ РегистрСведенийОтветственныеОрганизаций.Организация
	|	КОНЕЦ";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	""Вставка"" КАК Организация,
	|	РегистрСведенийОтветственныеОрганизаций.Роль КАК Роль,
	|	РегистрСведенийОтветственныеОрганизаций.Пользователь КАК Пользователь,
	|	ТИПЗНАЧЕНИЯ(РегистрСведенийОтветственныеОрганизаций.Организация) КАК ТипСправочника
	|ИЗ
	|	РегистрСведений.ОтветственныеОрганизаций КАК РегистрСведенийОтветственныеОрганизаций";
	
	ТаблицаОтветственных.ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """Вставка""", Вставка);
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникТекущейИБПриИзменении(Элемент)	
	ОбновитьДанныеНаФорме();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборВТаблицеОтветственных()
	// Инициализация.
	ТекДанные = Элементы.ДеревоИерархии.ТекущиеДанные;
	ОтборТаблицы = ТаблицаОтветственных.Отбор;
	ВидСравненияРавно = ВидСравненияКомпоновкиДанных.Равно;
	// Отбор по значению из дерева иерархии.
	Если ТекДанные <> Неопределено Тогда
		ТекЗначениеРеквизита = ТекДанные.ЭлементАдресации;
		Если ОтбиратьОрганизации Тогда
			ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(ОтборТаблицы, "Организация", ТекЗначениеРеквизита, ВидСравненияРавно, , Истина);
		Иначе
			ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(ОтборТаблицы, "Организация", Неопределено, ВидСравненияРавно, , Ложь);			
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(СправочникТекущейИБ) Тогда
			ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(ОтборТаблицы, "Организация", Неопределено, ВидСравненияРавно, , ОтбиратьОрганизации);
		Иначе
			ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(ОтборТаблицы, "Организация", ПустойЭлементИерархии(СправочникТекущейИБ), ВидСравненияРавно, , Истина);
		КонецЕсли;
	КонецЕсли;
	// Отбор по типу справочника.	
	НаименованиеСправочника = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(СправочникТекущейИБ, "Наименование");
	Если (НЕ ОтбиратьОрганизации) И (ЗначениеЗаполнено(СправочникТекущейИБ)) Тогда
		Попытка
			Если ЗначениеЗаполнено(НаименованиеСправочника) Тогда
				СтрокаТипа = "СправочникСсылка." + СокрЛП(НаименованиеСправочника);
				ТипСправочникаОтбора = Тип(СтрокаТипа);
				ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(ОтборТаблицы, "ТипСправочника", ТипСправочникаОтбора, ВидСравненияРавно, , Истина);
			Иначе
				ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(ОтборТаблицы, "ТипСправочника", Тип("СправочникСсылка.Организации"), ВидСравненияРавно, , Истина);
			КонецЕсли;
		Исключение
			ТекстСообщения = НСтр("ru = 'При установке отбора в списке по справочнику %Справочник% произошли ошибки: %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "Справочник", Строка(СправочникТекущейИБ));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "ОписаниеОшибки", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(ОтборТаблицы, "ТипСправочника", Тип("СправочникСсылка.Организации"), ВидСравненияРавно, , Истина);
		КонецПопытки;
	ИначеЕсли ЗначениеЗаполнено(НаименованиеСправочника) Тогда
		ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(ОтборТаблицы, "ТипСправочника", Тип("СправочникСсылка." + СокрЛП(НаименованиеСправочника)), ВидСравненияРавно, , Истина);
	Иначе
		ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(ОтборТаблицы, "ТипСправочника", Тип("Неопределено"), ВидСравненияРавно, , Истина);
	КонецЕсли;
		
КонецПроцедуры		// УстановитьОтборВТаблицеОтветственных()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьОтборВТаблицеОтветственных();
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеДереваРеквизита(Команда)
	ОтбиратьОрганизации = НЕ ОтбиратьОрганизации;
	УправлениеДоступностью(ЭтаФорма);
	УстановитьОтборВТаблицеОтветственных();
КонецПроцедуры

&НаКлиенте
Процедура ПодборСотрудников(Команда)
	Если ВыбранСправочникОрганизации() Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЗакрыватьПриВыборе", Ложь);
		ОткрытьФорму("Справочник.Пользователи.Форма.ФормаВыбора", СтруктураПараметров, Элементы.ТаблицаОтветственных, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ТекстСообщения = НСтр("ru = 'Команда доступна только для справочника Организации. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтветственныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекДанные = Элементы.ДеревоИерархии.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда			
			Если ТекДанные.ЭлементАдресации = ПолучитьПредставлениеПустогоОбъекта(СправочникТекущейИБ) тогда
				ДобавитьСотрудникаВРегистр(ПолучитьПустоеЗначениеСправочника(СправочникТекущейИБ), ВыбранноеЗначение);
			Иначе
				ДобавитьСотрудникаВРегистр(ТекДанные.ЭлементАдресации, ВыбранноеЗначение);
			КонецЕсли;
			Элементы.ТаблицаОтветственных.Обновить();
		Иначе
			// Неизвестный вариант. Пропускаем.
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРуководителей(Команда)
	Если ВыбранСправочникОрганизации() Тогда
		МассивРеквизитов = ПолучитьМассивЛистовРеквизитов(Ложь);
		РезультатЗаполнения = РазместитьРуководителейПоМассиву(МассивРеквизитов);
		ОбновитьДанныеНаФорме();		
		Если РезультатЗаполнения Тогда
			КартинкаОповещения = БиблиотекаКартинок.ЗначокКадры32;
			ТекстОповещения = НСтр("ru = 'Заполнение руководителей'");
			ПояснениеОповещения = НСтр("ru = 'Руководители для иерархии справочника ""%Справочник%"" успешно заполнены'");
			ПояснениеОповещения = СтрЗаменить(ПояснениеОповещения, "%Справочник%", Строка(СправочникТекущейИБ));
			ПоказатьОповещениеПользователя(ТекстОповещения, , ПояснениеОповещения, КартинкаОповещения);
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось заполнить руководителей по иерархии справочника ""%Справочник%""'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Справочник%", Строка(СправочникТекущейИБ));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Команда доступна только для справочника Организации. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнениеИерархии_Завершение(Результат, ДополнительныеПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьПерезаполнениеИерархии();
	Иначе
		// Пользователь отказался.
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИерархиюПоСправочнику(Команда)
	Если Не ЗначениеЗаполнено(СправочникТекущейИБ) тогда
		ТекстСообщения = НСтр("ru = 'Необходимо заполнить поле ""Справочник текущей ИБ""'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЭлементыДерева = ДеревоИерархии.ПолучитьЭлементы();
	Если ЭлементыДерева.Количество() > 0 Тогда
		СтруктураПараметров = Новый Структура;
		ТекстВопроса = НСтр("ru = 'Заменить имеющуюся иерархию элементов адресации на иерархию элементов справочника %Справочник%?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Справочник%", Строка(СправочникТекущейИБ));
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПерезаполнениеИерархии_Завершение", ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		ВыполнитьПерезаполнениеИерархии();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИерархииПриАктивизацииСтроки(Элемент)
	УстановитьОтборВТаблицеОтветственных();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	ОбновитьДанныеНаФорме();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлементАдресации_Завершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ДобавитьЭлементАдресацииВКорень(ВыбранноеЗначение, СправочникТекущейИБ);
		ОбновитьДанныеНаФорме();
		
		ЭлементыДерева = ДеревоИерархии.ПолучитьЭлементы();
				
		Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
			Если ЭлементДерева.ЭлементАдресации = ВыбранноеЗначение тогда
				Элементы.ДеревоИерархии.ТекущаяСтрока = ЭлементДерева.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Пользователь отказался. Ничего не делаем.
	КонецЕсли;
		
КонецПроцедуры		// ДобавитьЭлементАдресации_Завершение()

&НаКлиенте
Процедура ДобавитьЭлементИерархии(Команда)
	Если НЕ ЗначениеЗаполнено(СправочникТекущейИБ) тогда
		ТекстСообщения = НСтр("ru = 'Необходимо заполнить поле ""Справочник текущей ИБ""'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат;
	КонецЕсли;
	ИмяСправочника = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(СправочникТекущейИБ, "Наименование");
		
	ОписаниеОЗакрытии = Новый ОписаниеОповещения("ДобавитьЭлементАдресации_Завершение", ЭтотОбъект);
	СтрокаИмяФормы = "Справочник." + Строка(ИмяСправочника) + ".ФормаВыбора";
	ОткрытьФорму(СтрокаИмяФормы, , Элементы.ДеревоИерархии, , , , ОписаниеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеУдаленияПодчиненныхЭлементов_Завершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		МассивДанныхВыделенныхСтрок	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ВыделенныеСтроки", Новый Массив);
		МассивЗависимыхСтрок		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ЗависимыеСтроки", Новый Массив);
		ЗаполненныеРоли				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ЗаполненныеРоли", Новый Массив);
		МассивОбъединение = ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(МассивДанныхВыделенныхСтрок);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОбъединение, МассивЗависимыхСтрок);
		МассивОбъединение = ВыделитьЭлементыАдресации(МассивОбъединение);
		МассивЗаполненныеРоли = ОпределитьЗаполненныеРоли(МассивОбъединение);
		Если МассивЗаполненныеРоли.Количество() > 0 Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ЗаполненныеРоли",				 ЗаполненныеРоли);
			СтруктураПараметров.Вставить("ВыделенныеСтроки",			 МассивДанныхВыделенныхСтрок);
			СтруктураПараметров.Вставить("ЗависимыеСтроки",				 МассивЗависимыхСтрок);
			СтруктураПараметров.Вставить("УдалятьЗависимые",			 Истина);
			СтруктураПараметров.Вставить("ОчищатьРодителейЗависимых",	 Ложь);
			ТекстВопроса = НСтр("ru = 'Для удаляемого элемента дерева адресации назначены исполнители ролей. Удалить записи об исполнителях ролей вместе с элементом дерева адресации (иначе записи останутся, но увидеть их можно будет только при отключенном дереве элементов адресации)?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПодтверждениеУдалениеРоли_Завершение", ЭтаФорма, СтруктураПараметров);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		Иначе
			// Удаление основных строк.
			УдалитьЭлементыАдресацииПоМассиву(МассивДанныхВыделенныхСтрок);
			// Удаление зависимых строк.
			МассивЗависимыхСтрок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ЗависимыеСтроки", Новый Массив);
			ОбработатьЗависимые(МассивЗависимыхСтрок, Истина, Ложь);			// Только удаление.
		КонецЕсли;		
		ОбновитьДанныеНаФорме();
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда	
		МассивДанныхВыделенныхСтрок	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ВыделенныеСтроки", Новый Массив);
		МассивЗависимыхСтрок		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ЗависимыеСтроки", Новый Массив);
		ЗаполненныеРоли				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ЗаполненныеРоли", Новый Массив);
		МассивОбъединение = ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(МассивДанныхВыделенныхСтрок);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОбъединение, МассивЗависимыхСтрок);
		МассивОбъединение = ВыделитьЭлементыАдресации(МассивОбъединение);
		МассивЗаполненныеРоли = ОпределитьЗаполненныеРоли(МассивОбъединение);
		Если МассивЗаполненныеРоли.Количество() > 0 Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ЗаполненныеРоли",				 ЗаполненныеРоли);
			СтруктураПараметров.Вставить("ВыделенныеСтроки",			 МассивДанныхВыделенныхСтрок);
			СтруктураПараметров.Вставить("ЗависимыеСтроки",				 МассивЗависимыхСтрок);
			СтруктураПараметров.Вставить("УдалятьЗависимые",			 Ложь);
			СтруктураПараметров.Вставить("ОчищатьРодителейЗависимых",	 Истина);
			ТекстВопроса = НСтр("ru = 'Для удаляемого элемента дерева адресации назначены исполнители ролей. Удалить записи об исполнителях ролей вместе с элементом дерева адресации (иначе записи останутся, но увидеть их можно будет только при отключенном дереве элементов адресации)?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПодтверждениеУдалениеРоли_Завершение", ЭтаФорма, СтруктураПараметров);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		Иначе
			// Удаление основных строк.
			УдалитьЭлементыАдресацииПоМассиву(МассивДанныхВыделенныхСтрок);
			// Перенос зависимых строк в корень.
			МассивЗависимыхСтрок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ЗависимыеСтроки", Новый Массив);
			ОбработатьЗависимые(МассивЗависимыхСтрок, Ложь, Истина);		// Только перенос в корень дерева.
		КонецЕсли;
		ОбновитьДанныеНаФорме();
    Иначе
        // Пользователь отказался.
    КонецЕсли;
КонецПроцедуры		// ПодтверждениеУдаленияПодчиненныхЭлементов_Завершение()

// Выполняет обработку строк из массива данных строк МассивЗависимыхСтрокВход, применяя указанные действия:
// УдалятьЗависимыеВход - удаляет строки; ОчищатьРодителейЗависимыхВход - переносит их в корень. Возвращает
// успешность выполнения операции.
&НаКлиенте
Функция ОбработатьЗависимые(МассивЗависимыхСтрокВход, УдалятьЗависимыеВход, ОчищатьРодителейЗависимыхВход) 
	РезультатФункции = Истина;
	Если УдалятьЗависимыеВход Тогда
		// Удаление зависимых строк.
		РезультатУдаления = УдалитьЭлементыАдресацииПоМассиву(МассивЗависимыхСтрокВход);
		Если РезультатУдаления Тогда
			КартинкаОповещения = БиблиотекаКартинок.Успешно32;
			ТекстОповещения = НСтр("ru = 'Удаление зависимых строк иерархии'");
			ПояснениеОповещения = НСтр("ru = 'Операция завершено. Всего удалено элементов: %Количество%'");
			ПояснениеОповещения = СтрЗаменить(ПояснениеОповещения, "%Количество%", Строка(МассивЗависимыхСтрокВход.Количество()));
			ПоказатьОповещениеПользователя(ТекстОповещения, , ПояснениеОповещения, КартинкаОповещения);
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось завершить удаление зависимых узлов.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Ложь;
		КонецЕсли;
	Иначе
		// Не требуется удалять зависимые строки. Пропускаем.
	КонецЕсли;
	Если ОчищатьРодителейЗависимыхВход Тогда
		// Перенос строк в корень дерева.
		РезультатОчистки = ОчиститьРодителейИерархииВМассиве(МассивЗависимыхСтрокВход, СправочникТекущейИБ);
		Если РезультатОчистки Тогда
			КартинкаОповещения = БиблиотекаКартинок.Успешно32;
			ТекстОповещения = НСтр("ru = 'Перенос иерархии'");
			ПояснениеОповещения = НСтр("ru = 'Операция завершена. Всего перенесено элементов: %Количество%'");
			ПояснениеОповещения = СтрЗаменить(ПояснениеОповещения, "%Количество%", Строка(МассивЗависимыхСтрокВход.Количество()));
			ПоказатьОповещениеПользователя(ТекстОповещения, , ПояснениеОповещения, КартинкаОповещения);
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось перенести зависимые элементы в корень'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		 // ОбработатьЗависимые()
			
&НаКлиенте
Процедура ПодтверждениеУдалениеРоли_Завершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
        ВыделенныеСтроки			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ВыделенныеСтроки", Новый Массив);
		ЗависимыеСтроки				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ЗависимыеСтроки", Новый Массив);
		УдалятьЗависимые			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "УдалятьЗависимые", Ложь);
		ОчищатьРодителейЗависимых	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ОчищатьРодителейЗависимых", Ложь);
		МассивЗависимыхСтрок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ЗависимыеСтроки", Новый Массив);
		УдалитьЭлементыАдресацииПоМассиву(ВыделенныеСтроки);
		ОбработатьЗависимые(МассивЗависимыхСтрок, УдалятьЗависимые, ОчищатьРодителейЗависимых);
		УдалитьРолиВМассиве(ВыделитьЭлементыАдресации(ВыделенныеСтроки));		
		Если ДополнительныеПараметры.УдалятьЗависимые тогда
			УдалитьРолиВМассиве(ВыделитьЭлементыАдресации(ЗависимыеСтроки));
		КонецЕсли;		
		ОбновитьДанныеНаФорме();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда	
        ВыделенныеСтроки			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ВыделенныеСтроки", Новый Массив);
		МассивЗависимыхСтрок		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ЗависимыеСтроки", Новый Массив);
		УдалятьЗависимые			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "УдалятьЗависимые", Ложь);
		ОчищатьРодителейЗависимых	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ОчищатьРодителейЗависимых", Ложь);
		УдалитьЭлементыАдресацииПоМассиву(ВыделенныеСтроки);
		ОбработатьЗависимые(МассивЗависимыхСтрок, УдалятьЗависимые, ОчищатьРодителейЗависимых);
		ОбновитьДанныеНаФорме();
    Иначе
		// Пользователь отказался.
	КонецЕсли;
КонецПроцедуры		// ПодтверждениеУдалениеРоли_Завершение()

&НаКлиенте
Процедура ПодтверждениеУдаленияЭлементаАдресации_Завершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗависимыеСтроки		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ЗависимыеСтроки", Новый Массив);
		ЗаполненныеРоли		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ЗаполненныеРоли", Новый Массив);
		ВыделенныеСтроки	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ВыделенныеСтроки", Новый Массив);
		Если ЗаполненныеРоли.Количество() > 0 Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ЗаполненныеРоли",		 ЗаполненныеРоли);
			СтруктураПараметров.Вставить("ВыделенныеСтроки",	 ВыделенныеСтроки);
			СтруктураПараметров.Вставить("ЗависимыеСтроки",		 ЗависимыеСтроки);
			СтруктураПараметров.Вставить("УдалятьЗависимые",	Ложь);			
			ТекстВопроса = НСтр("ru = 'Для удаляемого элемента дерева адресации назначены исполнители ролей. Удалить записи об исполнителях ролей вместе с элементом дерева адресации (иначе записи останутся, но увидеть их можно будет только при отключенном дереве элементов адресации)?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПодтверждениеУдалениеРоли_Завершение", ЭтаФорма, СтруктураПараметров);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		Иначе
			УдалитьЭлементыАдресацииПоМассиву(ВыделенныеСтроки);
		КонецЕсли;
		ОбновитьДанныеНаФорме();
	Иначе
		// Пользователь отказался.
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭлементИерархии(Команда)
	ТекДанные = Элементы.ДеревоИерархии.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		// Формирование массивов строк для обработки.
		МассивДанныхВыделенныхСтрок = Новый Массив;
		МассивЗависимыхСтрок = Новый Массив;
		Для Каждого ТекВыделенныеСтроки Из Элементы.ДеревоИерархии.ВыделенныеСтроки Цикл
			ДанныеСтрока = ДеревоИерархии.НайтиПоИдентификатору(ТекВыделенныеСтроки);
			СтруктураВыделеннойСтроки = Новый Структура;			
			Если ДанныеСтрока.ЭлементАдресации = ПолучитьПредставлениеПустогоОбъекта(СправочникТекущейИБ) тогда
				СтруктураВыделеннойСтроки.Вставить("ЭлементАдресации", ПолучитьПустоеЗначениеСправочника(СправочникТекущейИБ));
			Иначе
				СтруктураВыделеннойСтроки.Вставить("ЭлементАдресации", ДанныеСтрока.ЭлементАдресации);
			КонецЕсли;			
			СтруктураВыделеннойСтроки.Вставить("РодительЭлемента", ДанныеСтрока.РодительЭлемента);
			МассивДанныхВыделенныхСтрок.Добавить(СтруктураВыделеннойСтроки);
			ДобавитьЗависимыеСтрокиВМассив(ДанныеСтрока, МассивЗависимыхСтрок);
		КонецЦикла;	
		МассивЗависимыхСтрок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЗависимыхСтрок);
		// Определим заполненные роли.
		МассивОбъединение = ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(МассивДанныхВыделенныхСтрок);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОбъединение, МассивЗависимыхСтрок);
		МассивОбъединение = ВыделитьЭлементыАдресации(МассивОбъединение);
		МассивЗаполненныеРоли = ОпределитьЗаполненныеРоли(МассивОбъединение);
		// Подтверждение действия.
		Если МассивЗависимыхСтрок.Количество() > 0 Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВыделенныеСтроки", МассивДанныхВыделенныхСтрок);
			СтруктураПараметров.Вставить("ЗависимыеСтроки", МассивЗависимыхСтрок);
			СтруктураПараметров.Вставить("ЗаполненныеРоли", МассивЗаполненныеРоли);
			ТекстВопроса = НСтр("ru = 'Удаляемый элемент дерева адресации содержит подчиненные элементы. Перенести их в корень дерева перед удалением выбранного элемента (иначе они также будут удалены)?'");
			Режим = РежимДиалогаВопрос.ДаНетОтмена;
			Оповещение = Новый ОписаниеОповещения("ПодтверждениеУдаленияПодчиненныхЭлементов_Завершение", ЭтаФорма, СтруктураПараметров);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		Иначе
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВыделенныеСтроки", МассивДанныхВыделенныхСтрок);
			СтруктураПараметров.Вставить("ЗависимыеСтроки", МассивЗависимыхСтрок);
			СтруктураПараметров.Вставить("ЗаполненныеРоли", МассивЗаполненныеРоли);
			ТекстВопроса = НСтр("ru = 'Вы уверены, что хотите удалить выбранный элемент из дерева адресации?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПодтверждениеУдаленияЭлементаАдресации_Завершение", ЭтаФорма, СтруктураПараметров);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокУзловВыбора_ПослеВыбора(ЗначениеВыбора, ДопПараметры) Экспорт
	Если ЗначениеВыбора <> Неопределено Тогда
		// Получение параметров оповещения.
		ДанныеВыделенныхСтрок	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопПараметры, "ДанныеВыделенныхСтрок", Новый Массив); 
		РодительЭлемента		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопПараметры, "РодительЭлемента", Неопределено); 
		СправочникИб			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопПараметры, "СправочникИб", Неопределено); 
		ЭлементАдресации		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопПараметры, "ЭлементАдресации", Неопределено); 
		// Проверка возможности перемещений.
		Если ЭлементАдресации <> Неопределено Тогда
			Если ТипЗнч(ЗначениеВыбора) = Тип("Строка") Тогда
				Если ЗначениеВыбора = ПредставлениеКореньДерева Тогда
					// Перемещение в корень дерева.
					ПустойЭлемент = ПустойЭлементИерархии(СправочникТекущейИБ);
					Если ДанныеВыделенныхСтрок.Количество() > 0 Тогда
						// Задан массив выделенных строк. Переместим все выбранные элементы.
						ПереместитьМассивЭлементовВГруппу(ДанныеВыделенныхСтрок, ПустойЭлемент, СправочникИб);
					Иначе
						// Массив выделенных строк не определён. Переместим текущую строку.
						ПереместитьЭлементВГруппу(ЭлементАдресации, РодительЭлемента, ПустойЭлемент, СправочникИб);
					КонецЕсли;
				ИначеЕсли ЗначениеВыбора <> ПолучитьПредставлениеПустогоОбъекта(СправочникТекущейИБ) тогда				
					ТекстСообщения = НСтр("ru = 'Выбран неизвестный вариант ""%Значение%"". Перемещение отменено.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Значение%", Строка(ЗначениеВыбора));
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				КонецЕсли;
			Иначе
				// Перемещение в выбранную группу.
				Если ДанныеВыделенныхСтрок.Количество() > 0 Тогда
					// Задан массив выделенных строк. Переместим все выбранные элементы.
					ПереместитьМассивЭлементовВГруппу(ДанныеВыделенныхСтрок, ЗначениеВыбора, СправочникИб);
				Иначе
					// Массив выделенных строк не определён. Переместим текущую строку.
					ПереместитьЭлементВГруппу(ЭлементАдресации, РодительЭлемента, ЗначениеВыбора, СправочникИб);
				КонецЕсли;
			КонецЕсли;
			ОбновитьДанныеНаФорме();
		Иначе
			// Пустой элемент. Ничего не делаем.
		КонецЕсли;
	Иначе
        // Пользователь отказался. Ничего не делаем.
    КонецЕсли;
КонецПроцедуры		// СписокУзловВыбора_ПослеВыбора()

&НаКлиенте
Процедура ПереместитьВГруппу(Команда)
	ТекДанные = Элементы.ДеревоИерархии.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		// Формирование параметров списка.
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЭлементАдресации",	 ТекДанные.ЭлементАдресации);
		СтруктураПараметров.Вставить("РодительЭлемента",	 ТекДанные.РодительЭлемента);
		СтруктураПараметров.Вставить("СправочникИб",		 СправочникТекущейИБ);
		// Получение и добавление в парметры массива выделенных строк.
		МассивДанныхВыделенныхСтрок = Новый Массив;
		Для Каждого ТекВыделенныеСтроки Из Элементы.ДеревоИерархии.ВыделенныеСтроки Цикл
			ДанныеСтрока = ДеревоИерархии.НайтиПоИдентификатору(ТекВыделенныеСтроки);
			СтруктураВыделеннойСтроки = Новый Структура;
			СтруктураВыделеннойСтроки.Вставить("ЭлементАдресации", ДанныеСтрока.ЭлементАдресации);
			СтруктураВыделеннойСтроки.Вставить("РодительЭлемента", ДанныеСтрока.РодительЭлемента);
			МассивДанныхВыделенныхСтрок.Добавить(СтруктураВыделеннойСтроки);
		КонецЦикла;
		СтруктураПараметров.Вставить("ДанныеВыделенныхСтрок", МассивДанныхВыделенныхСтрок);
		// Отображение выбора из списка.
		Оповещение = Новый ОписаниеОповещения("СписокУзловВыбора_ПослеВыбора", ЭтотОбъект, СтруктураПараметров);
		СтруктураПараметровФормы = СформироватьСтруктуруВыбораГруппы();
		ОткрытьФорму("Обработка.МатрицаАдресации.Форма.ФормаВыбораРодителя", СтруктураПараметровФормы, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ТекстСообщения = НСтр("ru = 'Исходный элемент не выбран. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсеЭлементы(Команда)
	ЭлементыДеревоИерархии = ДеревоИерархии.ПолучитьЭлементы();
	Для Каждого ТекЭлементыДеревоИерархии Из ЭлементыДеревоИерархии Цикл 
		ТекИдентификатор = ТекЭлементыДеревоИерархии.ПолучитьИдентификатор();
		Элементы.ДеревоИерархии.Свернуть(ТекИдентификатор);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеЭлементы(Команда)
	ЭлементыДеревоИерархии = ДеревоИерархии.ПолучитьЭлементы();
	Для каждого ТекЭлементыДеревоИерархии Из ЭлементыДеревоИерархии Цикл
		ТекИдентификаторСтроки = ТекЭлементыДеревоИерархии.ПолучитьИдентификатор();
		Элементы.ДеревоИерархии.Развернуть(ТекИдентификаторСтроки, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНедостающиеЭлементыИзСправочника(Команда)
	Если Не ЗначениеЗаполнено(СправочникТекущейИБ) тогда
		ТекстСообщения = НСтр("ru = 'Необходимо заполнить поле ""Справочник текущей ИБ""'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = ДобавитьНедостающиеЭлементыИзСправочника_Сервер();
	Если РезультатВыполнения Тогда
		КартинкаОповещения = БиблиотекаКартинок.Успешно32;
		ТекстОповещения = НСтр("ru = 'Заполнение'");
		ПояснениеОповещения = НСтр("ru = 'Недостающие элементы по справочнику ""%Справочник%"" успешно добавлены'");
		ПояснениеОповещения = СтрЗаменить(ПояснениеОповещения, "%Справочник%", Строка(СправочникТекущейИБ));
		ПоказатьОповещениеПользователя(ТекстОповещения, , ПояснениеОповещения, КартинкаОповещения);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось добавить недостающие элементы из справочника ""%Справочник%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Справочник%", Строка(СправочникТекущейИБ));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
	ОбновитьДанныеНаФорме();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтветственныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
		
	Отказ = Истина;
	Если Не ЗначениеЗаполнено(СправочникТекущейИБ) тогда
		ТекстСообщения = НСтр("ru = 'Необходимо заполнить поле ""Справочник текущей ИБ""'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат;
	КонецЕсли;
	ТекДанные = Элементы.ДеревоИерархии.ТекущиеДанные;
	ПараметрыФормы = Новый Структура;
		
	Если ТекДанные <> Неопределено Тогда		
		Если ТекДанные.ЭлементАдресации = ПолучитьПредставлениеПустогоОбъекта(СправочникТекущейИБ) тогда
			ТипСправочник = ОбщегоНазначенияСерверУХ.ВернутьТипПоСсылкеБД(СправочникТекущейИБ);
			ПустоеЗначениеСправочника = ОбщегоНазначенияУХ.ПустоеЗначениеТипа(ТипСправочник);
			ПараметрыФормы.Вставить("ЗначениеОбъектаОтветственного", ПустоеЗначениеСправочника);
		Иначе
			ПараметрыФормы.Вставить("ЗначениеОбъектаОтветственного", ТекДанные.ЭлементАдресации);
		КонецЕсли;		
	Иначе
		ТипСправочник = ОбщегоНазначенияСерверУХ.ВернутьТипПоСсылкеБД(СправочникТекущейИБ);
		ПустоеЗначениеСправочника = ОбщегоНазначенияУХ.ПустоеЗначениеТипа(ТипСправочник);
		ПараметрыФормы.Вставить("ЗначениеОбъектаОтветственного", ПустоеЗначениеСправочника);
	КонецЕсли;
	
	Если Копирование тогда
		ДанныеКопирования = Элемент.ТекущиеДанные;
		
		ПараметрыФормы.Вставить("Роль", ДанныеКопирования.Роль);
		ПараметрыФормы.Вставить("Пользователь", ДанныеКопирования.Пользователь);
	КонецЕсли;
		
	ОткрытьФорму("РегистрСведений.ОтветственныеОрганизаций.Форма.ФормаЗаписи", ПараметрыФормы, Элементы.ТаблицаОтветственных);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПустойЭлемент(Команда)
	
	Если НЕ ЗначениеЗаполнено(СправочникТекущейИБ) тогда
		ТекстСообщения = НСтр("ru = 'Необходимо заполнить поле ""Справочник текущей ИБ""'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДобавитьЭлементАдресацииВКорень(ПолучитьПустоеЗначениеСправочника(СправочникТекущейИБ), СправочникТекущейИБ);
	ОбновитьДанныеНаФорме();
	
	ЭлементыДерева = ДеревоИерархии.ПолучитьЭлементы();
	ТекущаяОрганизация = ПолучитьПредставлениеПустогоОбъекта(СправочникТекущейИБ);
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.ЭлементАдресации = ТекущаяОрганизация тогда
			Элементы.ДеревоИерархии.ТекущаяСтрока = ЭлементДерева.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИерархииПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.ЭлементАдресации = ПолучитьПредставлениеПустогоОбъекта(СправочникТекущейИБ) тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПустоеЗначениеСправочника(СправочникИбВход)
	
	ИмяСправочника = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(СправочникИбВход, "Наименование");
	Если НЕ ЗначениеЗаполнено(ИмяСправочника) тогда
		Возврат неопределено;
	КонецЕсли;
	
	Возврат Справочники[ИмяСправочника].ПустаяСсылка();
		
КонецФункции

&НаКлиенте
Процедура ТаблицаОтветственныхОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
		
	ЭлементыДерева = ДеревоИерархии.ПолучитьЭлементы();
	ТекущаяОрганизация = ?(ЗначениеЗаполнено(Источник.Запись.Организация), Источник.Запись.Организация, ПолучитьПредставлениеПустогоОбъекта(СправочникТекущейИБ));
	ЭлементНайден = Ложь;
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.ЭлементАдресации = ТекущаяОрганизация тогда
			Элементы.ДеревоИерархии.ТекущаяСтрока = ЭлементДерева.ПолучитьИдентификатор();
			ЭлементНайден = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЭлементНайден тогда
		ДобавитьЭлементАдресацииВКорень(
			?(ТекущаяОрганизация = ПолучитьПредставлениеПустогоОбъекта(СправочникТекущейИБ), ПолучитьПустоеЗначениеСправочника(СправочникТекущейИБ), ТекущаяОрганизация), 
			СправочникТекущейИБ);
			
		ОбновитьДанныеНаФорме();
		ЭлементыДерева = ДеревоИерархии.ПолучитьЭлементы();
		
		Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
			Если ЭлементДерева.ЭлементАдресации = ТекущаяОрганизация тогда
				Элементы.ДеревоИерархии.ТекущаяСтрока = ЭлементДерева.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьОтборВТаблицеОтветственных();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеПустогоОбъекта(СправочникИбВход)
	
	ИмяСправочника = Строка(СправочникИбВход);
	Если НЕ ЗначениеЗаполнено(ИмяСправочника) тогда
		Возврат НСтр("ru = '<Не определено>'");
	КонецЕсли;
	
	Возврат СтрШаблон(НСтр("ru = '<%1: все элементы>'"), ИмяСправочника);
	
КонецФункции
