
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если НЕ Параметры.Свойство("ДокументСсылка") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	ДокументСсылка = Параметры.ДокументСсылка;
	
	ОбновитьТрансформационныеКорректировки();
	
	Заголовок = НСтр("ru = 'Движения документа: '") + Строка(ДокументСсылка);

	МетаданныеДокумента = ДокументСсылка.Метаданные();

	ЗаполнитьСтруктуруШапкиДокумента(МетаданныеДокумента);

	Если НЕ СтруктураШапки.Проведен Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьТаблицуРегистров(МетаданныеДокумента);
	СоздатьРеквизитыФормы();
	ПрочитатьЗаписиРегистров();
	СоздатьЭлементыФормы();
	
	ПараметрыФО = Новый Структура("Период", НачалоМесяца(СтруктураШапки.Дата));
	Если СтруктураШапки.Свойство("Организация") Тогда
		ПараметрыФО.Вставить("Организация", СтруктураШапки.Организация);
	КонецЕсли;
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
	ПодготовитьФормуНаСервере();		
	УстановитьУсловноеОформление();

КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()

	ПовторноеОткрытиеСервер();
	ПодготовитьФормуНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы
&НаКлиенте
Процедура РучнаяКорректировкаПриИзменении(Элемент)

	//ВыполнитьДействияПриИзмененииРучнойКорректировки();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьНастройку(Команда)

	СписокДвижений  = Новый СписокЗначений;
	СписокРегистров = Новый СписокЗначений;
	Для каждого СтрокаРегистра Из Объект.Регистры Цикл
		СписокДвижений.Добавить(СтрокаРегистра.Имя, , СтрокаРегистра.ЕстьДвижения);
		СписокРегистров.Добавить(СтрокаРегистра.Имя, СтрокаРегистра.Синоним, СтрокаРегистра.Отображение);
	КонецЦикла;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СписокДвижений", СписокДвижений);
	СтруктураПараметров.Вставить("СписокРегистров", СписокРегистров);

	СписокРезультат = Неопределено;


	ОткрытьФорму("Обработка.ДвиженияДокумента.Форма.ФормаНастройки", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьНастройкуЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СписокРезультат = Результат;
    
    Если ТипЗнч(СписокРезультат) = Тип("СписокЗначений") Тогда
        
        БылиИзменения = Ложь;
        Для каждого СтрокаРегистра Из Объект.Регистры Цикл
            СтрокаСписка = СписокРезультат.НайтиПоЗначению(СтрокаРегистра.Имя);
            Если СтрокаРегистра.Отображение <> СтрокаСписка.Пометка Тогда
                БылиИзменения = Истина;
                СтрокаРегистра.Отображение = СтрокаСписка.Пометка;
            КонецЕсли;
        КонецЦикла;
        
        Если БылиИзменения Тогда
            
            ВыполнитьДействияПриИзмененииСоставаРегистров();
            
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОСВПоСчетуДт(Команда)
	
	ТекущаяСтрока = Элементы.МСФО.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСчета = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетДт);
	
	Отбор = ПолучитьОтборОСВПоСчету(ТекущаяСтрока, СвойстваСчета, "Дт");
		
	ОткрытьОСВМСФО("ОСВпоСчету", Отбор, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСВПоСчетуКт(Команда)
	
	ТекущаяСтрока = Элементы.МСФО.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСчета = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетКт);
	
	Отбор = ПолучитьОтборОСВПоСчету(ТекущаяСтрока, СвойстваСчета, "Кт");
		
	ОткрытьОСВМСФО("ОСВпоСчету", Отбор, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РучнаяКорректировка(Команда)
	
	Если Элементы.ФормаРучнаяКорректировка.Пометка Тогда
		ОбновитьДвиженияНаСервере();
		ЭтаФорма.Модифицированность = Ложь;
	Иначе
		УстановитьВидимостьПриРучнойКорректировке();
		УстановитьВозможностьРедактированияЗаписей();
		ВключитьАктивностьДвиженийНаСервере();
	КонецЕсли;
	
	Элементы.ФормаРучнаяКорректировка.Пометка = Не Элементы.ФормаРучнаяКорректировка.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если НЕ Модифицированность Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	ИзмененаРучнаяКорректировка = Объект.ЕстьРучнаяКорректировка
		И Объект.РучнаяКорректировка <> РучнаяКорректировка;

	Если Объект.ЕстьРучнаяКорректировка
		И Объект.РучнаяКорректировка
		И НЕ РучнаяКорректировка Тогда
		
		ТекстВопроса = НСтр("ru='Ручная корректировка движений документа отменена.
			|Восстановить движения, сформированные автоматически?'");
			
		Оповещение = Новый ОписаниеОповещения("ВопросВосстановитьДвиженияЗавершение", ЭтотОбъект, ИзмененаРучнаяКорректировка);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаписатьДвиженияИЗакрыть(ИзмененаРучнаяКорректировка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, ТекущиеДанные, ШаблонИмяПоляОбъекта)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ТекущиеДанные[ИмяПоля]);
		//ИначеЕсли БухгалтерскийУчетВызовСервераПереопределяемый.ПолучитьОписаниеТиповДоговора().СодержитТип(ТипЗнч(ТекущиеДанные[ИмяПоля])) Тогда
		//	СписокПараметров.Вставить("ДоговорКонтрагента", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ТекущиеДанные[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("ОстаткиОбороты", 1);
	СписокПараметров.Вставить("Организация"   , ТекущиеДанные["Организация"]);

	Возврат СписокПараметров;

КонецФункции

&НаСервере
Процедура ВыполнитьДействияПриИзмененииСоставаРегистров()

	СоздатьЭлементыФормы();

КонецПроцедуры

&НаСервере
Функция ОпределитьНаличиеДвижений(МетаданныеДокумента = Неопределено)

	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = ДокументСсылка.Метаданные();
	КонецЕсли;

	МетаданныеДвиженияДокумента = МетаданныеДвиженийДокумента(МетаданныеДокумента);
	
	Если МетаданныеДвиженияДокумента.Количество() = 0 Тогда
		ТаблицаЗапроса = Новый ТаблицаЗначений;
		ТаблицаЗапроса.Колонки.Добавить("Имя");
		Возврат ТаблицаЗапроса;
	КонецЕсли;

	ТекстЗапроса = "";

	Для Каждого Движение ИЗ МетаданныеДвиженияДокумента Цикл
		// в запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор

		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя +  """ КАК Имя ИЗ "
		+ Движение.ПолноеИмя + " ГДЕ " + Движение.ИмяПоляРегистратора + " = &Регистратор";

	КонецЦикла;

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаЗапроса;

КонецФункции

&НаСервереБезКонтекста
Функция МетаданныеДвиженийДокумента(МетаданныеДокумента)

	ТаблицаМетаданныхДвижений = Новый ТаблицаЗначений;
	ТаблицаМетаданныхДвижений.Колонки.Добавить("Имя");
	ТаблицаМетаданныхДвижений.Колонки.Добавить("Синоним");
	ТаблицаМетаданныхДвижений.Колонки.Добавить("ПолноеИмя");
	ТаблицаМетаданныхДвижений.Колонки.Добавить("ИмяПоляРегистратора");
	ТаблицаМетаданныхДвижений.Колонки.Добавить("РежимЗаписиРегистра");
	
	Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
		Строка = ТаблицаМетаданныхДвижений.Добавить();
		Строка.Имя = Движение.Имя;
		Строка.Синоним = Движение.Синоним;
		Строка.ПолноеИмя = Движение.ПолноеИмя();
		Строка.ИмяПоляРегистратора = "Регистратор";	
		Строка.РежимЗаписиРегистра = "ПодчинениеРегистратору";
	КонецЦикла;

	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		ДобавитьМетаданныеНезависимогоРегистраСведений(
				ТаблицаМетаданныхДвижений, 
				МетаданныеДокумента, 
				Метаданные.РегистрыСведений.Найти("НарушенияУсловийДоговора"),
				ОбщегоНазначения.ОбщийМодуль("РегистрыСведений.НарушенияУсловийДоговора").ИмяПоляРегистратора()
			);
		
		ДобавитьМетаданныеНезависимогоРегистраСведений(
				ТаблицаМетаданныхДвижений, 
				МетаданныеДокумента, 
				Метаданные.РегистрыСведений.Найти("СтатусыПроверкиКовенантов"),
				ОбщегоНазначения.ОбщийМодуль("РегистрыСведений.СтатусыПроверкиКовенантов").ИмяПоляРегистратора()
			);
	
	КонецЕсли;
	
	Возврат ТаблицаМетаданныхДвижений;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьМетаданныеНезависимогоРегистраСведений(ТаблицаМетаданныхДвижений, МетаданныеДокумента, МетаданныеРегистра, ИмяПоляРегистратора)
	
	Если НЕ Метаданные.РегистрыСведений.Содержит(МетаданныеРегистра) ИЛИ
		МетаданныеРегистра.РежимЗаписи <> Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
		Возврат;
	КонецЕсли;
	
	ПолеРегистратора = МетаданныеРегистра.Измерения.Найти(ИмяПоляРегистратора);
	Если ПолеРегистратора = Неопределено Тогда
		ПолеРегистратора = МетаданныеРегистра.Ресурсы.Найти(ИмяПоляРегистратора);
	КонецЕсли;	
	Если ПолеРегистратора = Неопределено Тогда
		ПолеРегистратора = МетаданныеРегистра.Реквизиты.Найти(ИмяПоляРегистратора);
	КонецЕсли;
	
	Если ПолеРегистратора <> Неопределено Тогда
		ТипДокумента = Тип("ДокументСсылка." + МетаданныеДокумента.Имя);
		Если ПолеРегистратора.Тип.СодержитТип(ТипДокумента) Тогда
			Строка = ТаблицаМетаданныхДвижений.Добавить();
			Строка.Имя = МетаданныеРегистра.Имя;
			Строка.Синоним = МетаданныеРегистра.Синоним;
			Строка.ПолноеИмя = МетаданныеРегистра.ПолноеИмя();
			Строка.ИмяПоляРегистратора = ИмяПоляРегистратора;
			Строка.РежимЗаписиРегистра = "Независимый";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРегистров(МетаданныеДокумента = Неопределено)

	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = ДокументСсылка.Метаданные();
	КонецЕсли;

	ТаблицаДвижений = ОпределитьНаличиеДвижений(МетаданныеДокумента);
	ТаблицаДвижений.Индексы.Добавить("Имя");

	Объект.Регистры.Очистить();
	МетаданныеДвиженийДокумента = МетаданныеДвиженийДокумента(МетаданныеДокумента);	
	
	Для каждого МетаданныеРегистра Из МетаданныеДвиженийДокумента Цикл

		Строка = Объект.Регистры.Добавить();
		Строка.Имя = МетаданныеРегистра.Имя;
		ПолноеИмя = МетаданныеРегистра.ПолноеИмя;

		ПозицияТочки = СтрНайти(ПолноеИмя, ".");
		ТипРегистра = Лев(ПолноеИмя, ПозицияТочки - 1);
		Строка.ТипРегистра = ТипРегистра;
		Строка.Синоним = МетаданныеРегистра.Синоним;
		Строка.ИмяПоляРегистратора = МетаданныеРегистра.ИмяПоляРегистратора;
		Строка.РежимЗаписиРегистра = МетаданныеРегистра.РежимЗаписиРегистра;
		
		Строка.ЕстьДвижения = ТаблицаДвижений.Найти(ПолноеИмя, "Имя") <> Неопределено;
		Строка.Отображение = Строка.ЕстьДвижения;

	КонецЦикла;

	// Первым показывается регистр бухгалтерии, затем регистры накопления, затем - сведений
	Объект.Регистры.Сортировать("ТипРегистра, Синоним");

КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормы()

	ПоказатьМСФО = Ложь;
	ПоказатьХозрасчетный = Ложь;
	
	РеквизитыПериоды = Новый Структура;
	РеквизитыОрганизации = Новый Структура;
		
	Для каждого СтрокаРегистра Из Объект.Регистры Цикл

		Если СтрокаРегистра.Имя = "МСФО" Тогда
			ПоказатьМСФО = СтрокаРегистра.Отображение;
			РеквизитыОрганизации.Вставить(СтрокаРегистра.Имя + "Организация", Ложь);
			Продолжить;
		КонецЕсли;
		
		Если СтрокаРегистра.Имя = "Хозрасчетный" Тогда
			ПоказатьХозрасчетный = СтрокаРегистра.Отображение;
			РеквизитыОрганизации.Вставить(СтрокаРегистра.Имя + "Организация", Ложь);
			Продолжить;
		КонецЕсли;
		
		// Создаем страницу для регистра в "правильном" месте между "предопределенными" закладками
		ИмяГруппы = "Группа" + СтрокаРегистра.Имя;
		ТекГруппа = Элементы.Найти(ИмяГруппы);
		Если ТекГруппа = Неопределено Тогда
			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				ТекГруппа = Элементы.Вставить(
					ИмяГруппы,
					Тип("ГруппаФормы"),
					Элементы.ГруппаДвиженияРегистров);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа = Элементы.Вставить(
					ИмяГруппы,
					Тип("ГруппаФормы"),
					Элементы.ГруппаДвиженияРегистров);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа = Элементы.Вставить(
					ИмяГруппы,
					Тип("ГруппаФормы"),
					Элементы.ГруппаДвиженияРегистров);
			Иначе
				Продолжить;
			КонецЕсли;
			ТекГруппа.Заголовок = СтрокаРегистра.Синоним;
		КонецЕсли;

		// Делаем страницу регистра невидимой, если она не нужна
		ТекГруппа.Видимость = СтрокаРегистра.Отображение;
		Если НЕ СтрокаРегистра.Отображение Тогда
			Продолжить;
		КонецЕсли;
		
		ТекГруппа.ТолькоПросмотр = Истина;
		
		Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
			ТекГруппа.Картинка = БиблиотекаКартинок.РегистрБухгалтерии;
			КартинкаАктивности = БиблиотекаКартинок.АктивностьПоРБ;
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
			ТекГруппа.Картинка = БиблиотекаКартинок.РегистрНакопления;
			КартинкаАктивности = БиблиотекаКартинок.АктивностьПоРН;
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
			ТекГруппа.Картинка = БиблиотекаКартинок.РегистрСведений;
			КартинкаАктивности = БиблиотекаКартинок.АктивностьПоРС;
		КонецЕсли;

		// На странице регистра создаем таблицу
		ИмяТаблицы = СтрокаРегистра.Имя;
		ТекТаблица = Элементы.Найти(ИмяТаблицы);
		Если ТекТаблица <> Неопределено Тогда
			Элементы.Удалить(ТекТаблица);
		КонецЕсли;
		ТекТаблица = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), ТекГруппа);
		ТекТаблица.ПутьКДанным = СтрокаРегистра.Имя;
		// Назначаем общий обработчик
		ТекТаблица.УстановитьДействие("ПриНачалеРедактирования", "ТаблицаРегистраПриНачалеРедактирования");
		ТекТаблица.КартинкаСтрок = КартинкаАктивности;
		ТекТаблица.ИзменятьСоставСтрок = Ложь;
		ТекТаблица.ИзменятьПорядокСтрок = Ложь;

		// Определяем набор колонок для таблицы, соответствующих метаданным регистра
		Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
			НаборЗаписей = РегистрыНакопления[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
			НаборЗаписей = РегистрыСведений[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
			НаборЗаписей = РегистрыБухгалтерии[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		КонецЕсли;
		РеквизитыНабораЗаписей = НаборЗаписей.ВыгрузитьКолонки();

		// Некоторые колонки не надо показывать	
		Если РеквизитыНабораЗаписей.Колонки.Найти("Регистратор") <> Неопределено Тогда
			РеквизитыНабораЗаписей.Колонки.Удалить("Регистратор");
		КонецЕсли;
		
		Если РеквизитыНабораЗаписей.Колонки.Найти(СтрокаРегистра.ИмяПоляРегистратора) <> Неопределено Тогда
			РеквизитыНабораЗаписей.Колонки.Удалить(СтрокаРегистра.ИмяПоляРегистратора);
		КонецЕсли;
	
		Если РеквизитыНабораЗаписей.Колонки.Найти("Активность") <> Неопределено Тогда
			РеквизитыНабораЗаписей.Колонки.Удалить("Активность");
		КонецЕсли;
		
		Если РеквизитыНабораЗаписей.Колонки.Найти("МоментВремени") <> Неопределено Тогда
			РеквизитыНабораЗаписей.Колонки.Удалить("МоментВремени");
		КонецЕсли;
				
		// По умолчанию Период идет перед НомерСтроки. Надо это поправить.
		ЭлементНомерСтроки	= Неопределено;
		ЭлементПериод		= Неопределено;
		
		// Создаем колонки таблицы
		Для каждого КолонкаРеквизита Из РеквизитыНабораЗаписей.Колонки Цикл
			
			Если КолонкаРеквизита.ТипЗначения.СодержитТип(Тип("ХранилищеЗначения")) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКолонки = СтрокаРегистра.Имя + КолонкаРеквизита.Имя;
			ТекКолонка = Элементы.Найти(ИмяКолонки);
			Если ТекКолонка = Неопределено Тогда
				ТекКолонка = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ТекТаблица);
			КонецЕсли;
			ТекКолонка.ПутьКДанным = СтрокаРегистра.Имя + "." + КолонкаРеквизита.Имя;
			ТекКолонка.Вид = ВидПоляФормы.ПолеВвода;
			Если КолонкаРеквизита.Имя = "НомерСтроки" Тогда
				ТекКолонка.Ширина = 2;
				Если ЭлементПериод <> Неопределено Тогда
					Элементы.Переместить(ТекКолонка, ТекКолонка.Родитель, ЭлементПериод);
				КонецЕсли;
			ИначеЕсли КолонкаРеквизита.Имя = "ВидДвижения" Тогда
				ТекКолонка.Ширина = 15;
			ИначеЕсли КолонкаРеквизита.Имя = "Организация" Тогда
				ТекКолонка.Видимость = Ложь;
				РеквизитыОрганизации.Вставить(ИмяКолонки, Ложь);
			ИначеЕсли КолонкаРеквизита.Имя = "Период" Тогда
				ТекКолонка.Видимость = Ложь;
				РеквизитыПериоды.Вставить(ИмяКолонки, Ложь);
				ЭлементПериод = ТекКолонка;
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;

	Элементы.ГруппаМСФО.Видимость = ПоказатьМСФО;
	Элементы.ГруппаХозрасчетный.Видимость = ПоказатьХозрасчетный;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыФормы()

	НовыеРеквизиты        = Новый Массив;
	УдаляемыеРеквизиты    = Новый Массив;
	СуществующиеРеквизиты = ПолучитьРеквизиты();

	Для каждого СтрокаРегистра Из Объект.Регистры Цикл

		Если СтрокаРегистра.Имя = "МСФО" ИЛИ СтрокаРегистра.Имя = "Хозрасчетный" Тогда
			Продолжить;
		КонецЕсли;

		Для каждого Реквизит Из СуществующиеРеквизиты Цикл
			Если Реквизит.Имя = СтрокаРегистра.Имя Тогда
				УдаляемыеРеквизиты.Добавить(СтрокаРегистра.Имя);
				Прервать;
			КонецЕсли;
		КонецЦикла;

		ТипРеквизита = Новый ОписаниеТипов(СтрокаРегистра.ТипРегистра + "НаборЗаписей." + СтрокаРегистра.Имя);

		НовыеРеквизиты.Добавить(Новый РеквизитФормы(СтрокаРегистра.Имя, ТипРеквизита, , , Истина));

	КонецЦикла;

	ИзменитьРеквизиты(НовыеРеквизиты, УдаляемыеРеквизиты);

КонецПроцедуры

&НаСервере
Процедура ПрочитатьЗаписиРегистров()
	
	//аналог ПрочитатьДвиженияДокумента
	АктивностьДвижений = Истина;
	
	Для каждого СтрокаРегистра Из Объект.Регистры Цикл

		Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
			НаборЗаписей = РегистрыНакопления[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
			НаборЗаписей = РегистрыСведений[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
			НаборЗаписей = РегистрыБухгалтерии[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		КонецЕсли;

		Если СтрокаРегистра.ТипРегистра = "РегистрСведений" И СтрокаРегистра.РежимЗаписиРегистра = "Независимый" Тогда
			Если СтрокаРегистра.ЕстьДвижения Тогда
				ПолноеИмяРегистра = СтрокаРегистра.ТипРегистра + "." + СтрокаРегистра.Имя;
				ТабЗаписей = ЗаписиРегистраПоДокументу(ПолноеИмяРегистра, СтрокаРегистра.ИмяПоляРегистратора, ДокументСсылка);
				НаборЗаписей.Загрузить(ТабЗаписей);
			КонецЕсли;	
		Иначе
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
			Если СтрокаРегистра.ЕстьДвижения Тогда
				НаборЗаписей.Прочитать();
			КонецЕсли;
		КонецЕсли;

		ЗначениеВРеквизитФормы(НаборЗаписей, СтрокаРегистра.Имя);

	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписиРегистраПоДокументу(ИмяТаблицыРегистра, ИмяПоляРегистратора, ДокументСсылка)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ 
		|	* 
		|ИЗ 
		|	ТаблицаРегистра 
		|ГДЕ 
		|	ИмяПоляРегистратора = &Документ"
	);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаРегистра", ИмяТаблицыРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПоляРегистратора", ИмяПоляРегистратора);
	Запрос.УстановитьПараметр("Документ", ДокументСсылка);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтруктуруШапкиДокумента(МетаданныеДокумента = Неопределено)

	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = ДокументСсылка.Метаданные();
	КонецЕсли;

	СтруктураШапки = Новый Структура;
	Для Каждого ТекСтандартныйреквизит Из МетаданныеДокумента.СтандартныеРеквизиты Цикл
		СтруктураШапки.Вставить(ТекСтандартныйРеквизит.Имя, ДокументСсылка[ТекСтандартныйРеквизит.Имя]);
	КонецЦикла;
	Для Каждого ТекРеквизит Из МетаданныеДокумента.Реквизиты Цикл
		СтруктураШапки.Вставить(ТекРеквизит.Имя, ДокументСсылка[ТекРеквизит.Имя]);
	КонецЦикла;
	
	Если СтруктураШапки.Свойство("Проведен") 
		И Не СтруктураШапки.Проведен
		И (Метаданные.НайтиПоТипу(ТипЗнч(ДокументСсылка)).Проведение 
			= Метаданные.СвойстваОбъектов.Проведение.Запретить)
			Тогда
				
		СтруктураШапки.Вставить("Проведен", Истина);
	
	КонецЕсли;
	
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Истина);
	
	//ЕстьПравоНаРедактирование = ПравоДоступа("Изменение", МетаданныеДокумента)
	//	И ДоступныеОрганизации.Найти(Объект.Организация) <> Неопределено;
	//	
	//Элементы.РучнаяКорректировка.Видимость = Объект.ЕстьРучнаяКорректировка;
	//ТолькоПросмотр = НЕ ЕстьПравоНаРедактирование;
	//Элементы.КнопкаЗаписатьИЗакрыть.Доступность = Не ТолькоПросмотр;

КонецПроцедуры

&НаСервере
Процедура ПовторноеОткрытиеСервер()

	МетаданныеДокумента = ДокументСсылка.Метаданные();

	ЗаполнитьСтруктуруШапкиДокумента(МетаданныеДокумента);
	ЗаполнитьТаблицуРегистров(МетаданныеДокумента);
	СоздатьРеквизитыФормы();
	ПрочитатьЗаписиРегистров();
	СоздатьЭлементыФормы();

КонецПроцедуры

// Общая процедура для всех регистров. Устанавливает организацию в добавляемых строках.
//
&НаКлиенте
Процедура ТаблицаРегистраПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока И НЕ Копирование
			И Элемент.ТекущиеДанные.Свойство("Организация")
			И СтруктураШапки.Свойство("Организация") Тогда
		Элемент.ТекущиеДанные.Организация = СтруктураШапки.Организация;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПериод(Команда)
	
	 ВидимостьПериод = Не Элементы.ФормаПоказатьПериод.Пометка;
	 Элементы.ФормаПоказатьПериод.Пометка = ВидимостьПериод;
	 
	 Если РеквизитыПериоды <> Неопределено Тогда
		 Для каждого РеквизитПериода Из РеквизитыПериоды Цикл
            Элементы[РеквизитПериода.Ключ].Видимость = ВидимостьПериод;						 
		 КонецЦикла;
	 КонецЕсли;
	 
 КонецПроцедуры
 
&НаКлиенте
Процедура ПоказатьОрганизациюДвижений(Команда)
	ВидимостьОрганизация = Не Элементы.ФормаПоказатьОрганизациюДвижений.Пометка;
	Элементы.ФормаПоказатьОрганизациюДвижений.Пометка = ВидимостьОрганизация;
	 
	 Если РеквизитыОрганизации <> Неопределено Тогда
		 Для каждого РеквизитОрганизация Из РеквизитыОрганизации Цикл
            Элементы[РеквизитОрганизация.Ключ].Видимость = ВидимостьОрганизация;						 
		 КонецЦикла;
	 КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьОтборОСВПоСчету(ТекущаяСтрока, СвойстваСчета, СторонаПроводки = "Дт")
	
	ПериодОтчета = Новый СтандартныйПериод(НачалоМесяца(ТекущаяСтрока.Период), КонецМесяца(ТекущаяСтрока.Период));
	
	Группировки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Счет");
	Группировки.Добавить("ВидОперации");
	
	Отбор = Новый Структура; 
	
	Отбор.Вставить("Организация", 	ТекущаяСтрока.Организация);
	Отбор.Вставить("Сценарий", 		ТекущаяСтрока.Сценарий);
	Отбор.Вставить("Период", 		ПериодОтчета);
	
	Отбор.Вставить("Счет", 			ТекущаяСтрока["Счет" + СторонаПроводки]);
	Если СвойстваСчета.УчетПоПодразделениям Тогда
		Отбор.Вставить("Подразделение", ТекущаяСтрока["Подразделение" + СторонаПроводки]);
	КонецЕсли;
	Если СвойстваСчета.УчетПоНаправлениямДеятельности Тогда
		Отбор.Вставить("НаправлениеДеятельности", ТекущаяСтрока["НаправлениеДеятельности" + СторонаПроводки]);
	КонецЕсли;
	
	Для й = 1 По СвойстваСчета.КоличествоСубконто Цикл
		ТСубконто = "ВидСубконто" + й;
		Если СвойстваСчета[ТСубконто] = Неопределено Тогда 
			Продолжить;
		ИначеЕсли СвойстваСчета[ТСубконто + "ТолькоОбороты"] = Ложь Тогда
			Отбор.Вставить("Субконто" + й, ТекущаяСтрока["Субконто" + СторонаПроводки + й]);
		Иначе 
			Группировки.Добавить("Субконто" + й);
		КонецЕсли;	
	КонецЦикла;
	
	Отбор.Вставить("Группировки", Группировки);
	
	Возврат Отбор;

КонецФункции

&НаКлиенте
Процедура ОткрытьОСВМСФО(КлючВарианта, Отбор, ФормаВладелец)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта",					КлючВарианта);		
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",		Истина);
	ПараметрыФормы.Вставить("Отбор", 						Отбор);
   
	ОткрытьФорму("Отчет.ОСВМСФО.Форма", ПараметрыФормы, ФормаВладелец, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область РучнаяКорректировка

&НаКлиенте
Процедура ЗаписатьДвиженияИЗакрыть(ИзмененаРучнаяКорректировка)
	
	Отказ = Ложь;
	ЗаписатьДвижения(Отказ);
	Если НЕ Отказ Тогда
		Если ИзмененаРучнаяКорректировка Тогда
			ОповеститьОбИзменении(ДокументСсылка);
		КонецЕсли;
		ЭтаФорма.Модифицированность = Ложь;
		Оповестить("ВыполненаЗаписьДокумента", Новый Структура("ДокументСсылка", ДокументСсылка));
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДвижения(Отказ)

	Если РучнаяКорректировка Тогда

		Попытка
			НачатьТранзакцию();
			ДокОбъект = ДокументСсылка.ПолучитьОбъект();
			Если НЕ ДокОбъект.РучнаяКорректировка Тогда
				ДокОбъект.РучнаяКорректировка = Истина;
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;

			Для каждого СтрокаРегистра Из Регистры Цикл
				
				Если НЕ СтрокаРегистра.ПравоНаИзменение Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаРегистра.ЕстьРеквизит Тогда
					ИмяРеквизита = СтрокаРегистра.Имя + "НаборЗаписей";
					НаборЗаписей = РеквизитФормыВЗначение(ИмяРеквизита);
					НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
					НаборЗаписей.УстановитьАктивность(НЕ Объект.ПометкаУдаления);
					Если НЕ (СтрокаРегистра.ТипРегистра = "РегистрСведений" 
						И (Метаданные.РегистрыСведений[СтрокаРегистра.Имя].ПериодичностьРегистраСведений 
						= Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический)) Тогда
						Для каждого Запись Из НаборЗаписей Цикл
							Если Запись.Период = '00010101' Тогда
								Запись.Период = Объект.Дата;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					НаборЗаписей.Записать(Истина);
				КонецЕсли;
			КонецЦикла;
			ЗафиксироватьТранзакцию();
			Объект.РучнаяКорректировка = Истина;
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,, 
				ДокументСсылка, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;

	Иначе

		Попытка
			ДокОбъект = ДокументСсылка.ПолучитьОбъект();
			Если ДокОбъект.РучнаяКорректировка Тогда
				ДокОбъект.РучнаяКорректировка = Ложь;
			КонецЕсли;
			Объект.РучнаяКорректировка = Истина;
		Исключение
			ВызватьИсключение;
		КонецПопытки;

		ПодготовитьФормуНаСервере(); //вызовет - УстановитьДоступностьСубконто();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВозможностьРедактированияЗаписей()
	
	Элементы.КнопкаЗаписатьИЗакрыть.Видимость = Объект.ЕстьРучнаяКорректировка;
	Для Каждого СтраницаРегистра Из Элементы.ПанельРегистров.ПодчиненныеЭлементы Цикл
		
		ИмяРегистра = СтрЗаменить(СтраницаРегистра.Имя, "Группа", "");
		
		ВозможностьРедактированияЗаписей = РучнаяКорректировка;
		Если ВозможностьРедактированияЗаписей Тогда
			ОписаниеРегистра = Регистры.НайтиСтроки(Новый Структура("Имя", ИмяРегистра));
			Если ОписаниеРегистра.Количество() <> 0 Тогда
				ВозможностьРедактированияЗаписей = ОписаниеРегистра[0].ПравоНаИзменение;
			КонецЕсли;
		КонецЕсли;
		
		СтраницаРегистра.ТолькоПросмотр = НЕ ВозможностьРедактированияЗаписей;
		ТаблицаРегистра = Элементы[ИмяРегистра];
		ТаблицаРегистра.ИзменятьСоставСтрок  = ВозможностьРедактированияЗаписей;
		ТаблицаРегистра.ИзменятьПорядокСтрок = ВозможностьРедактированияЗаписей;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьАктивностьДвиженийНаСервере()
	
	Если РучнаяКорректировка И НЕ АктивностьДвижений Тогда
		
		АктивностьДвижений = Истина;
		
		Для каждого СтрокаРегистра Из Регистры Цикл
			Если НЕ СтрокаРегистра.ЕстьРеквизит Тогда
				Продолжить;
			КонецЕсли;
			
			ТекГруппа = Элементы["Группа" + СтрокаРегистра.Имя];
			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.ЖурналПроводок;
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.РегистрНакопления;
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.РегистрСведений;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДвиженияНаСервере()
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	//**ЗаполнитьРеквизитыОбъекта(МетаданныеДокумента);
	
	//**НастроитьФормуПоОрганизацииПериоду();
	
	Элементы.РучнаяКорректировка.Видимость = Объект.ЕстьРучнаяКорректировка;
	ТолькоПросмотр = НЕ ЕстьПравоНаРедактирование;
	Элементы.КнопкаЗаписатьИЗакрыть.Доступность = Не ТолькоПросмотр;
	
	ЗаполнитьТаблицуРегистров(МетаданныеДокумента);
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСДвижениями = Новый Массив;
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтображениеВТаблицеРегистров(РегистрыСДвижениями);
	СоздатьРеквизитыФормы();
	ПрочитатьЗаписиРегистров();//аналог - ПрочитатьДвиженияДокумента(ДокументСсылка);
	СоздатьЭлементыФормы();
	
	ПодготовитьФормуНаСервере();		
	УстановитьУсловноеОформление();
	
	УстановитьВидимостьПриРучнойКорректировке();
	
	УстановитьВозможностьРедактированияЗаписей();
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Движения документа: %1'"), 
		Строка(ДокументСсылка));

	//-ОпределитьМоментАктуальностиОтложенныхРасчетов();

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПриРучнойКорректировке()
	
	Если РучнаяКорректировка Тогда
		
		СтрокиСОтображение = Регистры.НайтиСтроки(Новый Структура("Отображение", Истина));
		Если СтрокиСОтображение.Количество() = 0 Тогда
			
			Хозрасчетный = Регистры.НайтиСтроки(Новый Структура("Имя", "Хозрасчетный"));
			Если Хозрасчетный.Количество() > 0 Тогда
				Хозрасчетный[0].Отображение = Истина;
				Элементы.ГруппаХозрасчетный.Видимость = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ИнформацияОПроведении.Видимость = ЗначениеЗаполнено(ИнформацияОПроведении)
												И РучнаяКорректировка = Ложь;

	МоментДокумента = Новый МоментВремени(Объект.Дата, ДокументСсылка);
	
КонецПроцедуры

&НаСервере
Функция ИмяСобытияЖурналаРегистрации()

	Возврат НСтр("ru = 'Корректировка движений'", ОбщегоНазначения.КодОсновногоЯзыка());

КонецФункции

&НаСервере
Процедура УстановитьОтображениеВТаблицеРегистров(РегистрыСДвижениями)

	Для каждого СтрокаРегистра Из Регистры Цикл
		
		СтрокаРегистра.ЕстьДвижения = РегистрыСДвижениями.Найти(СтрокаРегистра.Имя) <> Неопределено;
		СтрокаРегистра.Отображение  = СтрокаРегистра.ЕстьДвижения И СтрокаРегистра.ПравоНаПросмотр;

	КонецЦикла;

КонецПроцедуры
 
#КонецОбласти

#Область РегистрБухгалтерии_МСФО

&НаСервере
Процедура ПодготовитьФормуНаСервере(ТекущийОбъект = Неопределено)
		
	Если КэшируемыеЗначения = Неопределено Тогда
		КэшируемыеЗначения = Новый Структура;
	КонецЕсли;

	Если МСФО.Количество() = 0 И Хозрасчетный.Количество() = 0 Тогда
		Возврат
	КонецЕсли;

	мдДокумента = ДокументСсылка.Метаданные();
	
	КэшируемыеЗначения.Вставить("Организация",	ДокументСсылка.Организация);
	КэшируемыеЗначения.Вставить("Дата", 		ДокументСсылка.Дата);
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Сценарий", мдДокумента) Тогда
		КэшируемыеЗначения.Вставить("Сценарий", 	ДокументСсылка.Сценарий);
	Иначе 
		КэшируемыеЗначения.Вставить("Сценарий", 	Константы.СценарийМСФО.Получить());
	КонецЕсли;

	МСФОУХ.ЗаполнитьРеквизитыОрганизации(ЭтаФорма.КэшируемыеЗначения);
	
	Если МСФО.Количество() Тогда
		МСФОУХ.ДобавитьРеквизитыТаблицыПроводок(ЭтотОбъект, "МСФО", "МСФО", Ложь);
	КонецЕсли;
	
	Если Хозрасчетный.Количество() Тогда
		МСФОУХ.ДобавитьРеквизитыТаблицыПроводок(ЭтотОбъект, "Хозрасчетный", "Хозрасчетный", Ложь, "Хозрасчетный");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	МСФОУХ.УсловноеОформление_Проводки(ЭтаФорма, "МСФО", "МСФО");
	МСФОУХ.УсловноеОформление_Проводки(ЭтаФорма, "Хозрасчетный", "Хозрасчетный", "Хозрасчетный");
		
КонецПроцедуры

#КонецОбласти

#Область ТрансформационныеКорректировки

&НаСервере
Процедура ОбновитьТрансформационныеКорректировки()
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТрансформационнаяКорректировка") Тогда
		
		Корректировки = Новый Массив;
		Корректировки.Добавить(ДокументСсылка);
		
	Иначе	
		Корректировки = Документы.ТрансформационнаяКорректировка.ПолучитьТрансКорр(ДокументСсылка, Новый Структура("ПометкаУдаления", Ложь));	
	КонецЕсли;
	
	Если Корректировки.Количество() = 0 Тогда
		Элементы.СтраницаПроводкиТрансформационныхКорректировок.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницаПроводкиТрансформационныхКорректировок.Видимость = Истина;
	Если Корректировки.Количество() = 1 Тогда
		Элементы.СтраницаОднаТК.Видимость = Истина;
		Элементы.СтраницаНесколькоТК.Видимость = Ложь;
	Иначе
		Элементы.СтраницаОднаТК.Видимость = Ложь;
		Элементы.СтраницаНесколькоТК.Видимость = Истина;
	КонецЕсли;
	
	Для каждого ТекущаяКорректировка Из Корректировки Цикл
		ТрансформационныеКорректировки.Добавить().Корректировка = ТекущаяКорректировка;
	КонецЦикла;
	
	ОтобразитьКорректировку(Корректировки[0]);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрансформационныеКорректировкиПриАктивизацииСтроки(Элемент)	
	ОтобразитьКорректировку();
КонецПроцедуры

&НаКлиенте
Процедура ТрансформационныеКорректировкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элементы.ТрансформационныеКорректировки.ТекущиеДанные;
	Если ТекДанные <> Неопределено 
			И ЗначениеЗаполнено(ТекДанные.Корректировка) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекДанные.Корректировка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтобразитьКорректировку(ТекущаяКорректировка = Неопределено)
	
	Форма = ЭтаФорма;
	
	Если ТекущаяКорректировка = Неопределено Тогда			
		
		ИндексСтроки = Форма.Элементы.ТрансформационныеКорректировки.ТекущаяСтрока;
		Если ИндексСтроки = Неопределено Тогда
			Форма.ТрансформационнаяКорректировка = Неопределено;
		Иначе
			Форма.ТрансформационнаяКорректировка = Форма.ТрансформационныеКорректировки[ИндексСтроки].Корректировка;
		КонецЕсли;		
		
	Иначе
		
		Форма.ТрансформационнаяКорректировка = ТекущаяКорректировка;
		
	КонецЕсли;
	
	ОбновитьПроводкиТК(Форма);
	
	ОтобразитьКорректируемыеЭкземпляры(Форма, Форма.ТрансформационнаяКорректировка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьПроводкиТК(Форма)

	Если Форма.ТрансформационнаяКорректировка.Пустая() Тогда 
		Форма.Объект.ПроводкиТК.Очистить();
	Иначе
		Форма.Объект.ПроводкиТК.Загрузить(Форма.ТрансформационнаяКорректировка.Проводки.Выгрузить());
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьКорректируемыеЭкземпляры(Форма, ТекущаяКорректировка)

	Перем Экземпляры, ЗначенияРеквизитовТК;
	
	Если ЗначениеЗаполнено(ТекущаяКорректировка) Тогда		
		ПолучитьЭкземплярыКорректировки(ТекущаяКорректировка, Экземпляры, ЗначенияРеквизитовТК);
		КоличествоЭкземпляров = Экземпляры.Количество();
	Иначе
		Экземпляры = Новый Массив;
		КоличествоЭкземпляров = 0;
	КонецЕсли;
	
	Если КоличествоЭкземпляров = 0 
		И ЗначенияРеквизитовТК.КорректировкиЗначенийПоказателей 
		И (НЕ ЗначенияРеквизитовТК.ДвиженияПоРегиструБухгалтерии)
		И ЗначенияРеквизитовТК.Проведен
		И НЕ ЗначенияРеквизитовТК.ПометкаУдаления Тогда
		
		Форма.Элементы.ГруппаПроводкиТК.Видимость 					= Ложь;
		Форма.Элементы.СтраницаОтсутстсвуютЭкземпляры.Видимость 	= Истина;
		Форма.Элементы.СтраницаОдинЭкземпляр.Видимость 				= Ложь;
		Форма.Элементы.СтраницаНесколькоЭкземпляров.Видимость 		= Ложь;
		
	Иначе
		
		Форма.Элементы.ГруппаПроводкиТК.Видимость 					= Истина;
		Форма.Элементы.СтраницаОтсутстсвуютЭкземпляры.Видимость 	= Ложь;
		Форма.Элементы.СтраницаОдинЭкземпляр.Видимость 				= (КоличествоЭкземпляров = 1) И ЗначенияРеквизитовТК.КорректировкиЗначенийПоказателей;
		Форма.Элементы.СтраницаНесколькоЭкземпляров.Видимость 		= НЕ (КоличествоЭкземпляров = 1) И ЗначенияРеквизитовТК.КорректировкиЗначенийПоказателей;
		
		Форма.КорректируемыеЭкземплярыОтчетов.Очистить();
		Для каждого ТекущийЭкземпляр Из Экземпляры Цикл
			Форма.КорректируемыеЭкземплярыОтчетов.Добавить().КорректируемыйЭкземпляр = ТекущийЭкземпляр;
		КонецЦикла;
		
		Если Форма.КорректируемыеЭкземплярыОтчетов.Количество() Тогда
			Форма.КорректируемыйЭкземплярОтчета = Форма.КорректируемыеЭкземплярыОтчетов[0].КорректируемыйЭкземпляр;		
		КонецЕсли;		
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьЭкземплярыКорректировки(Корректировка, Экземпляры = Неопределено, ЗначенияРеквизитовТК = Неопределено) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.Регистратор = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	т.ДвиженияПоРегиструБухгалтерии,
	|	т.КорректировкиЗначенийПоказателей,
	|	т.Проведен,
	|	т.ПометкаУдаления
	|ИЗ
	|	Документ.ТрансформационнаяКорректировка КАК т
	|ГДЕ
	|	т.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", Корректировка);	
	РезультатПакета = Запрос.ВыполнитьПакет();	
	
	Экземпляры = РезультатПакета[0].Выгрузить().ВыгрузитьКолонку("ЭкземплярОтчета");
	
	ЗначенияРеквизитовТК = Новый Структура("ДвиженияПоРегиструБухгалтерии,КорректировкиЗначенийПоказателей,Проведен,ПометкаУдаления");
	ЗаполнитьЗначенияСвойств(ЗначенияРеквизитовТК, РезультатПакета[1].Выгрузить()[0]);
	
КонецПроцедуры

#КонецОбласти

