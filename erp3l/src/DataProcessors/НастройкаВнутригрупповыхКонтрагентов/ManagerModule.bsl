#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
// Возвращает таблицу, содержащую организации и их банковские счета.
Функция ПолучитьТаблицуСчетовОрганизаций()
	РезультатФункции = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = ДоговорыКонтрагентовВстраиваниеУХКлиентСервер.ВернутьТекстЗапросаСчетаОрганизацииВнутригрупповыхКонтрагентов();
	Запрос.Текст = ДенежныеСредстваВстраиваниеУХКлиентСервер.ПодставитьИмяТаблицыБанкоскогоСчетаОрганизацийВТекстЗапроса(Запрос.Текст);
	Запрос.УстановитьПараметр("ПустойБанковскийСчет", ДенежныеСредстваВстраиваниеУХКлиентСервер.ПолучитьПустойБанковскийСчет());
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
КонецФункции

// Возвращает таблицу внутригрпповых контрагентов и сопоставленных им организаций.
Функция ПолучитьТаблицуКонтрагентов()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Контрагенты.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница,
		|	1 КАК Количество
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ОрганизационнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И НЕ Контрагенты.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
		|	Организации.Ссылка,
		|	1
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО Организации.Ссылка = Контрагенты.ОрганизационнаяЕдиница
		|ГДЕ
		|	Контрагенты.Ссылка ЕСТЬ NULL
		|	И НЕ Организации.ПометкаУдаления
		|	И (Организации.ИностранныйНалоговыйРезидент
		|		ИЛИ ИспользоватьВРегламентированномУчете)";
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
КонецФункции

// Возвращает соответствие счетов организаци из таблицы ТаблицаСчетовВход
// счетам сооответственных контрагентов.
Функция ПолучитьСоответствиеСчетовКонтрагентов(ТаблицаСчетовВход)
	// Инициализация.
	РезультатФункции = Новый Соответствие;
	ПустойСчет = ДенежныеСредстваВстраиваниеУХКлиентСервер.ПолучитьПустойБанковскийСчет();
	// Получим массив счетов в исходной таблице.
	МассивСчетовОрганизаций = ТаблицаСчетовВход.ВыгрузитьКолонку("СчетОрганизации");
	МассивСчетовОрганизаций = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСчетовОрганизаций);
	МассивСчетовОрганизаций = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивСчетовОрганизаций);
	// Получим массив контрагентов в исходной таблице.
	МассивКонтрагенты = ТаблицаСчетовВход.ВыгрузитьКолонку("Контрагент");
	МассивКонтрагенты = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивКонтрагенты);
	МассивКонтрагенты = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивКонтрагенты);
	// Получение таблицы счетов контрагентов.
	Запрос = Новый Запрос;
	Запрос.Текст = ДоговорыКонтрагентовВстраиваниеУХКлиентСервер.ВернутьТекстЗапросаСчетаКонтрагентовВнутригрупповыхКонтрагентов();
	Запрос.Текст = ДенежныеСредстваВстраиваниеУХКлиентСервер.ПодставитьИмяТаблицыБанкоскогоСчетаОрганизацийВТекстЗапроса(Запрос.Текст);
	Запрос.УстановитьПараметр("МассивСчетовОрганизаций", МассивСчетовОрганизаций);
	Запрос.УстановитьПараметр("Владелец", МассивКонтрагенты);
	РезультатЗапроса = Запрос.Выполнить();
	ВыгрузкаСчетовКонтрагентов = РезультатЗапроса.Выгрузить();
	// Получение соотвествия количества счетов.
	СверткаКоличествоКонтрагенты = ВыгрузкаСчетовКонтрагентов.Скопировать();
	СверткаКоличествоКонтрагенты.Свернуть("СчетОрганизации", "Количество");
	СоответствиеКоличествоСчетовОрганизации = Новый Соответствие;
	Для Каждого ТекСверткаКоличествоКонтрагенты Из СверткаКоличествоКонтрагенты Цикл
		ТекСчетОрганизации = ТекСверткаКоличествоКонтрагенты.СчетОрганизации;
		ТекКоличествоСчетов =  ТекСверткаКоличествоКонтрагенты.Количество;
		СоответствиеКоличествоСчетовОрганизации.Вставить(ТекСчетОрганизации, ТекКоличествоСчетов);
	КонецЦикла;
	// Заполнение соответствия Счетов организаций Счетам контрагентов.
	Для Каждого ТекВыгрузкаСчетовКонтрагентов Из ВыгрузкаСчетовКонтрагентов Цикл
		ТекСчетОрганизации = ТекВыгрузкаСчетовКонтрагентов.СчетОрганизации;
		КоличествоСчетов = СоответствиеКоличествоСчетовОрганизации[ТекСчетОрганизации];
		Если КоличествоСчетов <> Неопределено Тогда
			Если КоличествоСчетов = 1 Тогда
				РезультатФункции.Вставить(ТекСчетОрганизации, ТекВыгрузкаСчетовКонтрагентов.СчетКонтрагента);
			Иначе
				РезультатФункции.Вставить(ТекСчетОрганизации, ПустойСчет);
			КонецЕсли;
		Иначе
			РезультатФункции.Вставить(ТекСчетОрганизации, ПустойСчет);
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Возвращет структуру, содержащую таблицу внутригрупповых контрагентов,
// соответствие контрагентов организациям, соответствие счетов контрагентов
// счетам организаций.
Функция ПолучитьТаблицыВнутригрупповыхКонтрагентов() Экспорт
	// Инициализация.
	РезультатФункции = Новый Структура;
	ПустойКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	// Получение исходных данных.
	ТаблицаСчетовОрганизаций = ПолучитьТаблицуСчетовОрганизаций();
	ТаблицаКонтрагентов = ПолучитьТаблицуКонтрагентов();
	// Соответствие количества контрагентов.
	СверткаКонтрагентыКоличество = ТаблицаКонтрагентов.Скопировать();	
	СверткаКонтрагентыКоличество.Свернуть("ОрганизационнаяЕдиница", "Количество");
	СоответствиеКоличествоКонтрагентов = Новый Соответствие;
	Для Каждого ТекСверткаКонтрагентыКоличество Из СверткаКонтрагентыКоличество Цикл
		ТекОргЕдиница = ТекСверткаКонтрагентыКоличество.ОрганизационнаяЕдиница;
		ТекКоличество = ТекСверткаКонтрагентыКоличество.Количество;
		СоответствиеКоличествоКонтрагентов.Вставить(ТекОргЕдиница, ТекКоличество);
	КонецЦикла;
	// Соответствие контрагентов организациям.
	СоответствиеОрганизацияКонтрагент = Новый Соответствие;
	СверткаКонтрагентыОрганизация = ТаблицаКонтрагентов.Скопировать();	
	СверткаКонтрагентыОрганизация.Свернуть("Контрагент,ОрганизационнаяЕдиница");
	Для Каждого ТекСверткаКонтрагентыОрганизация Из СверткаКонтрагентыОрганизация Цикл
		ТекКонтрагент = ТекСверткаКонтрагентыОрганизация.Контрагент;
		ТекОргЕдиница = ТекСверткаКонтрагентыОрганизация.ОрганизационнаяЕдиница;
		Если СоответствиеКоличествоКонтрагентов[ТекОргЕдиница] <> Неопределено Тогда
			Если СоответствиеКоличествоКонтрагентов[ТекОргЕдиница] = 1 Тогда
				СоответствиеОрганизацияКонтрагент.Вставить(ТекОргЕдиница, ТекКонтрагент);		
			Иначе
				СоответствиеОрганизацияКонтрагент.Вставить(ТекОргЕдиница, ПустойКонтрагент);		// Указано несколько контрагентов.
			КонецЕсли;
		Иначе	
			СоответствиеОрганизацияКонтрагент.Вставить(ТекОргЕдиница, ПустойКонтрагент);			// Не найдена организация.
		КонецЕсли;
	КонецЦикла;
	// Заполнение колонки Контрагент.	
	ТаблицаСчетовОрганизаций.Колонки.Добавить("Контрагент");
	Для Каждого ТекТаблицаСчетовОрганизаций Из ТаблицаСчетовОрганизаций Цикл
		ТекОргЕдиница = ТекТаблицаСчетовОрганизаций.Организация;
		НайденныйКонтрагент = СоответствиеОрганизацияКонтрагент[ТекОргЕдиница];
		Если НайденныйКонтрагент <> Неопределено Тогда
			ТекТаблицаСчетовОрганизаций.Контрагент = НайденныйКонтрагент;
		Иначе
			ТекТаблицаСчетовОрганизаций.Контрагент = ПустойКонтрагент;
		КонецЕсли;	
	КонецЦикла;	
	// Соответствие счетов контрагентов.
	СоответствиеСчетовКонтрагентов = ПолучитьСоответствиеСчетовКонтрагентов(ТаблицаСчетовОрганизаций);
	// Вывод результата.
	РезультатФункции.Вставить("ТаблицаСчетовОрганизаций", ТаблицаСчетовОрганизаций);
	РезультатФункции.Вставить("СоответствиеОрганизацияКонтрагент", СоответствиеОрганизацияКонтрагент);
	РезультатФункции.Вставить("СоответствиеСчетовКонтрагентов", СоответствиеСчетовКонтрагентов);
	Возврат РезультатФункции;
КонецФункции

// Дополняет список отбора СписокСчетовВход значениями организаций, 
// которым принадлежат счета.
Функция ДополнитьОтборИзмеренийОрганизациямиСчетов(СписокОтбораВход) Экспорт
	РезультатФункции = Новый СписокЗначений;
	РезультатФункции = ОбщегоНазначенияКлиентСервер.СкопироватьСписокЗначений(СписокОтбораВход);
	Для Каждого ТекСписокОтбораВход Из СписокОтбораВход Цикл
		ТекЗначениеИзмерение = ТекСписокОтбораВход.Значение;
		Если ТипЗнч(ТекЗначениеИзмерение) = ДенежныеСредстваВстраиваниеУХКлиентСервер.ТипБанковскиеСчетаОрганизаций() Тогда
			Если ЗначениеЗаполнено(ТекЗначениеИзмерение) Тогда
				ОрганизацияСчета = ТекЗначениеИзмерение.Владелец;
				Если РезультатФункции.НайтиПоЗначению(ОрганизацияСчета) = Неопределено Тогда
					РезультатФункции.Добавить(ОрганизацияСчета);
				Иначе
					// Уже есть такой элемент. Не добавляем.
				КонецЕсли;
			Иначе
				// Значение пусто. Пропускаем.
			КонецЕсли;
		Иначе
			// Не банковский счет. Не определяем владельца.
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Дополняет массив отбора СписокСчетовВход значениями организаций, 
// которым принадлежат счета.
Функция ДополнитьМассивИзмеренийОрганизациямиСчетов(МассивОтборовВход) Экспорт
	РезультатФункции = Новый Массив;
	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.ЗагрузитьЗначения(МассивОтборовВход);
	СписокРезультат = ДополнитьОтборИзмеренийОрганизациямиСчетов(СписокОтбора);
	РезультатФункции = СписокРезультат.ВыгрузитьЗначения();
	Возврат РезультатФункции;
КонецФункции

// Создает нового конрагента по организации ОрганизацияВход.
// Возвращает ссылку на созданный элемент.
Функция ВвестиКонтрагентаПоОрганизации(ОрганизацияВход, ГруппаДоступаВход) Экспорт
	
	// Инициализация.
	РезультатФункции = Справочники.Контрагенты.ПустаяСсылка();
	
	Попытка
		
		// Создание контрагента.
		НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйКонтрагент.Заполнить(Новый Структура("Организация", ОрганизацияВход));
		НовыйКонтрагент.ОрганизационнаяЕдиница = ОрганизацияВход;
		НовыйКонтрагент.ОбособленноеПодразделение = Ложь;
		НовыйКонтрагент.ДополнительныеСвойства.Вставить("ГруппаДоступа", ГруппаДоступаВход);
		НовыйКонтрагент.Записать();
		
		// Получение партнера.
		ПартнерКонтрагента = НовыйКонтрагент.Партнер;
		Если НЕ ЗначениеЗаполнено(ПартнерКонтрагента) Тогда
			// Партнёр не был создан автоматически. Создадим вручную.
			НовыйПартнер = Справочники.Партнеры.СоздатьЭлемент();
			ВстраиваниеУХ.ЗаполнитьПартнераПоКонтрагенту(НовыйПартнер, НовыйКонтрагент, ГруппаДоступаВход);
			НовыйПартнер.Записать();
			ПартнерКонтрагента = НовыйПартнер.Ссылка;
		Иначе
			// Партнёр создан автоматически. Используем его.
		КонецЕсли;
		
		// Установка выбранного партнёра.
		КонтрагентПартнер = НовыйКонтрагент.Ссылка.ПолучитьОбъект();
		КонтрагентПартнер.Партнер = ПартнерКонтрагента;
		КонтрагентПартнер.Записать();
		
		РезультатФункции = НовыйКонтрагент.Ссылка;
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'При создании контрагента на основании организации %Организация% произошли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(ОрганизацияВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		
		РезультатФункции = Справочники.Контрагенты.ПустаяСсылка();
		
	КонецПопытки;
	
	Возврат РезультатФункции;
	
КонецФункции		// ВвестиКонтрагентаПоОрганизации()

#КонецЕсли
