// Устанавливает всем строкам в дереве флажок в значение Пометка.
&НаСервере
Процедура УстановитьПометкуНаСервере(Пометка)
	Для Каждого ТекСтрокаГруппировки Из ДеревоОрганизаций.ПолучитьЭлементы() Цикл
		ТекСтрокаГруппировки.Использование = Пометка;
		Для Каждого ТекСтрокаСчет Из ТекСтрокаГруппировки.ПолучитьЭлементы() Цикл
			ТекСтрокаСчет.Использование = Пометка;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Возвращает копию массива ИсходныйМассивВход, отобранного по списку 
// СписокОтбораВход. Когда список пустой - отбор не производится.
&НаСервере
Функция ОтобратьМассивПоСписку(ИсходныйМассивВход, СписокОтбораВход)
	РезультатФункции = Новый Массив;
	Если СписокОтбораВход.Количество() > 0 Тогда
		Для Каждого ТекИсходныйМассив Из ИсходныйМассивВход Цикл
			Если СписокОтбораВход.НайтиПоЗначению(ТекИсходныйМассив) <> Неопределено Тогда
				РезультатФункции.Добавить(ТекИсходныйМассив);
			Иначе
				Продолжить;			// Не входит в отбор. Не добавляем в результирующий массив.
			КонецЕсли;
		КонецЦикла;
	Иначе
		РезультатФункции = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ИсходныйМассивВход);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Возвращает копию массива МассивСчетовВход, в котором счета отобраны
// по списку СписокОтбораВход.
&НаСервере
Функция ОтобратьСчета(МассивСчетовВход, СписокОтбораВход)
	РезультатФункции = Новый Массив;
	Если СписокОтбораВход.Количество() <> 0 Тогда
		Для Каждого ТекМассивСчетовВход Из МассивСчетовВход Цикл
			Если СписокОтбораВход.НайтиПоЗначению(ТекМассивСчетовВход.СчетОрганизации) <> Неопределено Тогда
				РезультатФункции.Добавить(ТекМассивСчетовВход);
			Иначе
				Продолжить;			// Не входит в отбор. Не добавляем в результирующий массив.
			КонецЕсли;
		КонецЦикла;
	Иначе
		РезультатФункции = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивСчетовВход);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Серверная обертка команды ОбновитьДерево.
&НаСервере
Процедура ОбновитьДерево_Сервер()
	// Получение исходных данных.
	СтруктураВнутригрупповыхКонтрагентов = Обработки.НастройкаВнутригрупповыхКонтрагентов.ПолучитьТаблицыВнутригрупповыхКонтрагентов();
	ТаблицаСчетовОрганизаций			 = СтруктураВнутригрупповыхКонтрагентов.ТаблицаСчетовОрганизаций;	
	СоответствиеОрганизацияКонтрагент	 = СтруктураВнутригрупповыхКонтрагентов.СоответствиеОрганизацияКонтрагент;	
	СоответствиеСчетовКонтрагентов		 = СтруктураВнутригрупповыхКонтрагентов.СоответствиеСчетовКонтрагентов;	
	// Формирование дерева.
	ТаблицаСчетовОрганизаций.Сортировать("Организация, СчетОрганизации");
	ДеревоПостроение = Новый ДеревоЗначений;
	ДеревоПостроение.Колонки.Добавить("ИзмерениеОрганизация");
	ДеревоПостроение.Колонки.Добавить("ИзмерениеКонтрагент");
	ДеревоПостроение.Колонки.Добавить("УровеньСтроки");
	ДеревоПостроение.Колонки.Добавить("Использование");
	МассивОрганизаций = ТаблицаСчетовОрганизаций.ВыгрузитьКолонку("Организация");
	МассивОрганизаций = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивОрганизаций);
	МассивОрганизаций = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивОрганизаций);
	МассивОрганизаций = ОтобратьМассивПоСписку(МассивОрганизаций, ОтборИзмерений);
	Для Каждого ТекМассивОрганизаций Из МассивОрганизаций Цикл
		// Добавление строки организации.
		КонтрагентОрганизации = СоответствиеОрганизацияКонтрагент[ТекМассивОрганизаций];
		НоваяСтрокаОрганизация = ДеревоПостроение.Строки.Добавить();
		НоваяСтрокаОрганизация.ИзмерениеОрганизация	 = ТекМассивОрганизаций;
		НоваяСтрокаОрганизация.ИзмерениеКонтрагент	 = КонтрагентОрганизации;
		НоваяСтрокаОрганизация.УровеньСтроки		 = 1;
		НоваяСтрокаОрганизация.Использование		 = НЕ ЗначениеЗаполнено(КонтрагентОрганизации);
		// Добавление строк счета.
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Организация", ТекМассивОрганизаций);
		НайденныеСтроки = ТаблицаСчетовОрганизаций.НайтиСтроки(СтруктураПоиска);
		НайденныеСтроки = ОтобратьСчета(НайденныеСтроки, ОтборИзмерений);
		Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
			ТекСчетОрганизации = ТекНайденныеСтроки.СчетОрганизации;
			Если ЗначениеЗаполнено(ТекСчетОрганизации) Тогда
				СчетКонтрагента = СоответствиеСчетовКонтрагентов[ТекСчетОрганизации];
				НоваяСтрокаСчет = НоваяСтрокаОрганизация.Строки.Добавить();
				НоваяСтрокаСчет.ИзмерениеОрганизация	 = ТекСчетОрганизации;
				НоваяСтрокаСчет.ИзмерениеКонтрагент		 = СчетКонтрагента;
				НоваяСтрокаСчет.УровеньСтроки			 = 2;
				НоваяСтрокаСчет.Использование			 = НЕ ЗначениеЗаполнено(СчетКонтрагента);
			Иначе
				Продолжить;				// Счет организации не задан. Не создаем пустую строку.
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДеревоПостроение, "ДеревоОрганизаций");
	УправлениеДоступностью();
КонецПроцедуры

// Возвращает массив счетов контрагента КонтрагентВход, соответствующих счету 
// организации СчетОрганизацииВход.
&НаСервереБезКонтекста
Функция ПолучитьМассивСчетовКонтрагентаПоСчетуОрганизации(СчетОрганизацииВход, КонтрагентВход)
	РезультатФункции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = ДоговорыКонтрагентовВстраиваниеУХКлиентСервер.ВернутьТекстЗапросаСчетаОрганизацийПоВладельцуВнутригрупповыеКонтрагенты();
	Запрос.Текст = ДенежныеСредстваВстраиваниеУХКлиентСервер.ПодставитьИмяТаблицыБанкоскогоСчетаКонтрагентаВТекстЗапроса(Запрос.Текст);
	Запрос.УстановитьПараметр("Владелец", КонтрагентВход);
	Запрос.УстановитьПараметр("СчетОрганизации", СчетОрганизацииВход);
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	РезультатФункции = Выгрузка.ВыгрузитьКолонку("Ссылка");
	РезультатФункции = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(РезультатФункции);
	Возврат РезультатФункции;
КонецФункции

// Возвращает массив структур содержащих контрагентов, ассоциированных 
// с организацией ОрганизацияВход, а также их код.
&НаСервереБезКонтекста
Функция ПолучитьКонтрагентовОрганизации(ОрганизацияВход)
	РезультатФункции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Контрагенты.Ссылка,
		|	Контрагенты.ОрганизационнаяЕдиница,
		|	""-"" КАК Код
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ Контрагенты.ПометкаУдаления
		|	И Контрагенты.ОрганизационнаяЕдиница = &ОрганизационнаяЕдиница";
	Запрос.УстановитьПараметр("ОрганизационнаяЕдиница", ОрганизацияВход);
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	Для Каждого ТекВыгрузка Из Выгрузка Цикл
		СтруктураРезультата = Новый Структура;
		СтруктураРезультата.Вставить("Код", ТекВыгрузка.Код);
		СтруктураРезультата.Вставить("Ссылка", ТекВыгрузка.Ссылка);
		РезультатФункции.Добавить(СтруктураРезультата);
	КонецЦикла;
	Возврат РезультатФункции;	
КонецФункции

// Очищает реквизит ОрганизационнаяЕдиница у всех контрагентов в массиве 
// МассивКонтрагентовВход.
&НаСервереБезКонтекста
Процедура СброситьОрганизациюКонрагентов(МассивКонтрагентовВход)
	НачатьТранзакцию();
	ЕстьОшибки = Ложь;
	Попытка
		ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		Для Каждого ТекМассивКонтрагентовВход Из МассивКонтрагентовВход Цикл
			Если ЗначениеЗаполнено(ТекМассивКонтрагентовВход) Тогда
				КонтрагентОбъект = ТекМассивКонтрагентовВход.ПолучитьОбъект();
				КонтрагентОбъект.ОрганизационнаяЕдиница = ПустаяОрганизация;
				КонтрагентОбъект.Записать();
			Иначе
				Продолжить;			// Пустой элемент. Не перезаписываем.
			КонецЕсли;
		КонецЦикла;
	Исключение
		ТекстСообщения = НСтр("ru = 'Во время очистки организаций у контрагентов произошли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		ЕстьОшибки = Истина;
	КонецПопытки;
	Если ЕстьОшибки Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// Помечает на удаление все банковские счета из массива МассивКонтрагентовВход.
&НаСервереБезКонтекста
Процедура ПометитьНаУдалениеСчета(МассивСчетовВход)
	НачатьТранзакцию();
	ЕстьОшибки = Ложь;
	Попытка
		ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		Для Каждого ТекМассивСчетовВход Из МассивСчетовВход Цикл
			Если ЗначениеЗаполнено(ТекМассивСчетовВход) Тогда
				УстановитьПометкуУдаленияПоСсылке(ТекМассивСчетовВход, Истина);
			Иначе
				Продолжить;			// Пустой элемент. Не перезаписываем.
			КонецЕсли;
		КонецЦикла;
	Исключение
		ТекстСообщения = НСтр("ru = 'Во время пометки на удаление банковских счетов произошли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		ЕстьОшибки = Истина;
	КонецПопытки;
	Если ЕстьОшибки Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// Создает нового конрагента по организации ОрганизацияВход.
// Возвращает ссылку на созданный элемент.
&НаСервереБезКонтекста
Функция ВвестиКонтрагентаПоОрганизации(ОрганизацияВход, ГруппаДоступаВход)
	РезультатФункции = Обработки.НастройкаВнутригрупповыхКонтрагентов.ВвестиКонтрагентаПоОрганизации(ОрганизацияВход, ГруппаДоступаВход);
	Возврат РезультатФункции;
КонецФункции		// ВвестиКонтрагентаПоОрганизации()

// По данным массива организаций МассивВход создает ассоциированных контрагентов.
&НаСервереБезКонтекста
Процедура СоздатьНедостающихКонтрагентов(МассивВход, ГруппаДоступаВход)
	МассивОрганизаций = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Организации.Ссылка КАК Организация
		|ПОМЕСТИТЬ ВТ_Организации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В(&МассивОрганизаций)
		|	И НЕ Организации.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Контрагенты.ОрганизационнаяЕдиница
		|ПОМЕСТИТЬ ВТ_КонтрагентыОрганизации
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ОрганизационнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И НЕ Контрагенты.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТ_Организации.Организация,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_КонтрагентыОрганизации.Контрагент) КАК КоличествоКонтрагентов
		|ПОМЕСТИТЬ ВТ_КоличествоКонтрагентов
		|ИЗ
		|	ВТ_Организации КАК ВТ_Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтрагентыОрганизации КАК ВТ_КонтрагентыОрганизации
		|		ПО ВТ_Организации.Организация = ВТ_КонтрагентыОрганизации.ОрганизационнаяЕдиница
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Организации.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_КоличествоКонтрагентов.Организация,
		|	ВТ_КоличествоКонтрагентов.КоличествоКонтрагентов
		|ИЗ
		|	ВТ_КоличествоКонтрагентов КАК ВТ_КоличествоКонтрагентов
		|ГДЕ
		|	ВТ_КоличествоКонтрагентов.КоличествоКонтрагентов = 0";
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	НачатьТранзакцию();
	ЕстьОшибки = Ложь;
	МассивНеобработанных = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивВход);
	Попытка
		// Исправим контрагентов по результатам выборки.
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Исправим контрагента.
			ТекОрганизация = ВыборкаДетальныеЗаписи.Организация;
			НовыйКонтрагент = ВвестиКонтрагентаПоОрганизации(ТекОрганизация, ГруппаДоступаВход);
			// Внесем контрагента в массив исправленных.
			ИндексЭлемента = МассивНеобработанных.Найти(ТекОрганизация);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивНеобработанных.Удалить(ИндексЭлемента);
			Иначе
				// Не найдено.
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекМассивНеобработанных Из МассивНеобработанных Цикл
			ТекстСообщения = НСтр("ru = 'Сопоставить контрагента для организации %Организация% не удалось. Требется ручное сопоставление.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(ТекМассивНеобработанных));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЦикла;
	Исключение
		ТекстСообщения = НСтр("ru = 'Во время создания контрагентов возникли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		ЕстьОшибки = Истина;
	КонецПопытки;
	Если ЕстьОшибки Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();	
	КонецЕсли;
КонецПроцедуры

// Создает зекральную копию счета орагнизации СчетОрганизацииВход для контрагента
// КонтрагентВход. Возвращает ссылку на созданный счет.
&НаСервереБезКонтекста
Функция СоздатьЗеркальнуюКопиюСчетаОрганизации(СчетОрганизацииВход, КонтрагентВход)
	РезультатФункции = ДенежныеСредстваВстраиваниеУХКлиентСервер.ПолучитьПустойБанковскийСчет();
	НовыйСчетСсылка = УправлениеДенежнымиСредствамиУХВызовСервера.СоздатьКопиюСчетаДляВладельца(СчетОрганизацииВход, КонтрагентВход);
	НовыйСчетОбъект = НовыйСчетСсылка.ПолучитьОбъект();
	НовыйСчетОбъект.СчетОрганизации = СчетОрганизацииВход;
	НовыйСчетОбъект.Записать();
	РезультатФункции = НовыйСчетСсылка;
	Возврат РезультатФункции;
КонецФункции

// На основании данных массива МассивСчетаВход создает недостающие счета контрагентов.
&НаСервереБезКонтекста
Процедура СоздатьНедостающиеСчета(МассивСчетаВход)
	НачатьТранзакцию();
	ЕстьОшибки = Ложь;
	Попытка
		Для Каждого ТекМассивСчетаВход Из МассивСчетаВход Цикл
			СчетОрганизации	 = ТекМассивСчетаВход.ИзмерениеОрганизация;
			Контрагент		 = ТекМассивСчетаВход.КонтрагентРодитель;
			Если (ЗначениеЗаполнено(Контрагент)) И (ЗначениеЗаполнено(СчетОрганизации)) Тогда
				МассивСчетовКонтрагента = ПолучитьМассивСчетовКонтрагентаПоСчетуОрганизации(СчетОрганизации, Контрагент);	
				Если МассивСчетовКонтрагента.Количество() = 0 Тогда
					СоздатьЗеркальнуюКопиюСчетаОрганизации(СчетОрганизации, Контрагент);
				Иначе
					// Уже есть счета по данному контрагенту. Пропускаем.
				КонецЕсли;
			Иначе
				// Не заполнен контрагент либо счет организации. Пропускаем элемент.
			КонецЕсли;
		КонецЦикла;
	Исключение
		ТекстСообщения = НСтр("ru = 'Во время создания счетов контрагентов произошли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
	Если ЕстьОшибки Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// По массиву входных данных МассивВход производит создание недостающих
// элементов контрагентов и банковских счетов в случае необходимости. Выставляет 
// партнёрам контрагентов группу доступа ГруппаДоступаВход.
&НаСервереБезКонтекста
Процедура СоздатьНедостающиеЭлементыПоМассиву(МассивВход, ГруппаДоступаВход)
	// Во входных данных отделим контрагентов от счетов.
	МассивОрганизаций = Новый Массив;
	МассивСчета = Новый Массив;
	Для Каждого ТекМассивВход Из МассивВход Цикл
		Если ТекМассивВход.УровеньСтроки = 1 Тогда
			МассивОрганизаций.Добавить(ТекМассивВход.ИзмерениеОрганизация);
		ИначеЕсли ТекМассивВход.УровеньСтроки = 2 Тогда	
			МассивСчета.Добавить(ТекМассивВход);
		Иначе
			// Неизвестный вариант. Пропускаем.
		КонецЕсли;
	КонецЦикла;
	// Создадим элементы по отделённым входным данным.
	СоздатьНедостающихКонтрагентов(МассивОрганизаций, ГруппаДоступаВход);
	СоздатьНедостающиеСчета(МассивСчета);
КонецПроцедуры

// Устанавливает пометку для объекта БД с ссылкой СсылкаБдВход в
// значение ЗначениеПометкиВход.
&НаСервереБезКонтекста
Функция УстановитьПометкуУдаленияПоСсылке(СсылкаБдВход, ЗначениеПометкиВход = Истина)
	РезультатФункции = Истина;
	Попытка
		ОбъектБд = СсылкаБдВход.ПолучитьОбъект();
		ОбъектБд.УстановитьПометкуУдаления(ЗначениеПометкиВход);
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось изменить пометку удаления для объекта %ОбъектБд% по причине: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектБд%", Строка(СсылкаБдВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции

// Устанавливает во все счета из массива МассивСчетовВход значение
// реквизита СчетОрганизации в ЗначениеСчетаОрганизацииВход. Возвращает
// успешность операции.
&НаСервереБезКонтекста
Функция УстановитьСчетОрганизацииВСчетКонтрагента(МассивСчетовВход, ЗначениеСчетаОрганизацииВход) 
	РезультатФункции = Истина;
	Попытка
		Для Каждого ТекМассивСчетовВход Из МассивСчетовВход Цикл
			Если ЗначениеЗаполнено(ТекМассивСчетовВход) Тогда
				СчетКонтрагентаОбъект = ТекМассивСчетовВход.ПолучитьОбъект();
				СчетКонтрагентаОбъект.СчетОрганизации = ЗначениеСчетаОрганизацииВход;
				СчетКонтрагентаОбъект.Записать();
			Иначе
				// Пустой элемент. Пропускаем.
			КонецЕсли;
		КонецЦикла;	
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось установить значение счета организации по причине: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Ложь;
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции

// Сопоставляет внутригрупповому конрагенту КонтрагентВход организацию ОрганизацияВход,
// сбрасывая сопоставление у других контрагентов.
&НаСервереБезКонтекста
Процедура СопоставитьВыбранногоКонтрагентаОрганизации(ОрганизацияВход, КонтрагентВход)
	// Инициализация.
	НачатьТранзакцию();
	ЕстьОшибки = Ложь;
	Попытка
		// Получение контрагентов, у которых необходимо сбросить организацию.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Контрагенты.ОрганизационнаяЕдиница,
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ Контрагенты.ПометкаУдаления
		|	И Контрагенты.ОрганизационнаяЕдиница = &ОрганизационнаяЕдиница
		|	И Контрагенты.Ссылка <> &Ссылка";
		Запрос.УстановитьПараметр("ОрганизационнаяЕдиница", ОрганизацияВход);
		Запрос.УстановитьПараметр("Ссылка", КонтрагентВход);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		// Сбросим организацию у полученных контрагентов.
		ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			КонтрагентОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			КонтрагентОбъект.ОрганизационнаяЕдиница = ПустаяОрганизация;
			КонтрагентОбъект.Записать();
		КонецЦикла;
		//Установим организацию у выбранного контрагента.
		КонтрагентОбъект = КонтрагентВход.ПолучитьОбъект();
		КонтрагентОбъект.ОрганизационнаяЕдиница = ОрганизацияВход;
		КонтрагентОбъект.Записать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось сопоставить контрагента %Контрагент% организации %Организация% по причине: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Контрагент%", Строка(КонтрагентВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(ОрганизацияВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		ЕстьОшибки = Истина;
	КонецПопытки;
	// Завершение транзакции.
	Если ЕстьОшибки Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностью()
	ЕстьОтборПоИзмерению = (ОтборИзмерений.Количество() > 0);
	Элементы.ГруппаИнформацияОтбор.Видимость = ЕстьОтборПоИзмерению;
КонецПроцедуры

// Сворачивает дерево на форме.
&НаКлиенте
Процедура СвернутьДерево()
	ЭлементыДереваОрганизаций = ДеревоОрганизаций.ПолучитьЭлементы();
	Для Каждого ТекЭлементыДереваОрганизаций Из ЭлементыДереваОрганизаций Цикл 
		ТекИдентификатор = ТекЭлементыДереваОрганизаций.ПолучитьИдентификатор();
		Элементы.ДеревоОрганизаций.Свернуть(ТекИдентификатор);
	КонецЦикла;
КонецПроцедуры

// Разворачивает дерево на форме.
&НаКлиенте
Процедура РазвернутьДерево()
	ЭлементыДереваОрганизаций = ДеревоОрганизаций.ПолучитьЭлементы();
	Для Каждого ТекЭлементыДереваОрганизаций Из ЭлементыДереваОрганизаций Цикл 
		ТекИдентификатор = ТекЭлементыДереваОрганизаций.ПолучитьИдентификатор();
		Элементы.ДеревоОрганизаций.Развернуть(ТекИдентификатор);
	КонецЦикла;
КонецПроцедуры

// Возвращает номер строки в дереве на форме по измерению ИзмерениеОрганизацияВход.
&НаКлиенте
Функция ПолучитьНомерСтрокиПоИзмерениюОрганизация(ИзмерениеОрганизацияВход)
	РезультатФункции = -1;
	Если ЗначениеЗаполнено(ИзмерениеОрганизацияВход) Тогда
		СтрокиОрганизация = ДеревоОрганизаций.ПолучитьЭлементы();
		Для Каждого ТекСтрокиОрганизация Из СтрокиОрганизация Цикл
			Если ТекСтрокиОрганизация.ИзмерениеОрганизация = ИзмерениеОрганизацияВход Тогда
				РезультатФункции = ТекСтрокиОрганизация.ПолучитьИдентификатор();
				Прервать;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли;
			СтрокиСчет = ТекСтрокиОрганизация.ПолучитьЭлементы();
			Для Каждого ТекСтрокиСчет Из СтрокиСчет Цикл
				Если ТекСтрокиСчет.ИзмерениеОрганизация = ИзмерениеОрганизацияВход Тогда
					РезультатФункции = ТекСтрокиСчет.ПолучитьИдентификатор();
					Прервать;
				Иначе
					// Выполняем поиск далее.
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		РезультатФункции = -1;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Перестраивает дерево организаций, позиционируясь после вывода на
// текущей выбранной строке.
&НаКлиенте
Процедура ОбновитьДеревоССохранениемСтроки()
	// Сохранение текущей позиции.
	ТекДанные = Элементы.ДеревоОрганизаций.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ИзмерениеОрганизация = ТекДанные.ИзмерениеОрганизация;
	Иначе
		ИзмерениеОрганизация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	КонецЕсли;
	// Считывание дерева организаций из БД.
	ОбновитьДерево_Сервер();
	// Восстановление позиционирования.
	Если ЗначениеЗаполнено(ИзмерениеОрганизация) Тогда
		НомерСтроки = ПолучитьНомерСтрокиПоИзмерениюОрганизация(ИзмерениеОрганизация);
		Если НомерСтроки <> -1 Тогда
			Элементы.ДеревоОрганизаций.ТекущаяСтрока = НомерСтроки;
		Иначе
			// Не найдена строка. Не изменяем позиционирование.
		КонецЕсли;
	Иначе
		// Нет исходных данных. Не изменяем позиционирование.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАналогичныйСчетЗавершение(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		// Пользователь отказался. Ничего не делаем.
	Иначе
		НовыйСчетСсылка = СоздатьЗеркальнуюКопиюСчетаОрганизации(Параметры.СчетОрганизации, Параметры.Контрагент);
		КартинкаОповещения = БиблиотекаКартинок.Информация32;
		ТекстОповещения = НСтр("ru = 'Создание счета'");
		ПояснениеОповещения = НСтр("ru = 'Создан банковский счет %НовыйСчет% для %Владелец%'");
		ПояснениеОповещения = СтрЗаменить(ПояснениеОповещения, "%НовыйСчет%", Строка(НовыйСчетСсылка));
		ПояснениеОповещения = СтрЗаменить(ПояснениеОповещения, "%Владелец%", Строка(Параметры.Контрагент));
		НавигационнаяСсылкаСчет = ПолучитьНавигационнуюСсылку(НовыйСчетСсылка);
		ПоказатьОповещениеПользователя(ТекстОповещения, НавигационнаяСсылкаСчет, ПояснениеОповещения, КартинкаОповещения);
		ОбновитьДеревоССохранениемСтроки();
	КонецЕсли;
КонецПроцедуры

// Сопоставляет счету контрагента СчетКонтрагентаВход счет организации СчетОрганизацииВход,
// снимая сопоставление со всех прочих счетов из массива МассивСчетовКонтрагентаВход.
&НаСервереБезКонтекста
Процедура СопоставитьНовыйСчетОрганизацииСчетамКонтрагентов(СчетКонтрагентаВход, СчетОрганизацииВход, МассивСчетовКонтрагентаВход = Неопределено)
	// Инициализация.
	НачатьТранзакцию();
	ЕстьОшибки = Ложь;
	Попытка
		// Установим пустой счет организации для всех счетов, кроме выбранного.
		МассивОчищ = Новый Массив;
		Для Каждого ТекМассивСчетовКонтрагента Из МассивСчетовКонтрагентаВход Цикл
			Если СчетКонтрагентаВход <> ТекМассивСчетовКонтрагента Тогда
				МассивОчищ.Добавить(ТекМассивСчетовКонтрагента);
			Иначе
				// Это выбранный элемент. Не добавляем в массив для очистки.
			КонецЕсли;
		КонецЦикла;
		ПустойСчет = ДенежныеСредстваВстраиваниеУХКлиентСервер.ТипБанковскиеСчетаОрганизаций();
		УстановитьСчетОрганизацииВСчетКонтрагента(МассивОчищ, ПустойСчет);
		// Установим текущий счет организации для выбранного счета контрагента.
		МассивСчетовВыбранный = Новый Массив;
		МассивСчетовВыбранный.Добавить(СчетКонтрагентаВход);
		УстановитьСчетОрганизацииВСчетКонтрагента(МассивСчетовВыбранный, СчетОрганизацииВход);
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось сопоставить счет контрагента %СчетКонтрагента% счету оргранизации %СчетОрганизации% по причине: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СчетКонтрагента%", Строка(СчетКонтрагентаВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СчетОрганизации%", Строка(СчетОрганизацииВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		ЕстьОшибки = Истина;
	КонецПопытки;
	// Завершение транзакции.
	Если ЕстьОшибки Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// Устанавливает счету контрагента СчетКонтрагентаВход счет организации СчетОрганизацииВход.
// Для всех прочих счетов контрагента КонтрагентВход, которым сопоставлен счет СчетОрганизацииВход,
// снимает сопоставление.
&НаСервереБезКонтекста
Процедура СопоставитьВыбранныйСчетДляКонтрагента(СчетОрганизацииВход, КонтрагентВход, СчетКонтрагентаВход)
	Запрос = Новый Запрос;
	Запрос.Текст = ДоговорыКонтрагентовВстраиваниеУХКлиентСервер.ВернутьТекстЗапросаСопоставленияСчетовКонтрагетов();
	Запрос.Текст = ДенежныеСредстваВстраиваниеУХКлиентСервер.ПодставитьИмяТаблицыБанкоскогоСчетаКонтрагентаВТекстЗапроса(Запрос.Текст);
	Запрос.УстановитьПараметр("Владелец", КонтрагентВход);
	Запрос.УстановитьПараметр("СчетОрганизации", СчетОрганизацииВход);
	Запрос.УстановитьПараметр("Ссылка", СчетКонтрагентаВход);
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	МассивСчетов = Выгрузка.ВыгрузитьКолонку("Ссылка");
	СопоставитьНовыйСчетОрганизацииСчетамКонтрагентов(СчетКонтрагентаВход, СчетОрганизацииВход, МассивСчетов);
КонецПроцедуры

&НаКлиенте
Процедура СчетаКонтрагентаПослеВыбора(ЗначениеВыбора, ДопПараметры) Экспорт
	Если ЗначениеВыбора <> Неопределено Тогда
		СчетКонтрагента = ЗначениеВыбора.Значение;
		СчетОрганизации			 = ДопПараметры.СчетОрганизации;
		МассивСчетовКонтрагента	 = ДопПараметры.МассивСчетовКонтрагента;
		СопоставитьНовыйСчетОрганизацииСчетамКонтрагентов(СчетКонтрагента, СчетОрганизации, МассивСчетовКонтрагента);
	Иначе
		// Пользователь отказался. Ничего не делаем.
	КонецЕсли;
	ОбновитьДеревоССохранениемСтроки();
КонецПроцедуры

// Исправляет счет контрагента КонтрагентВход, сопоставленный счету организации 
// СчетОрганизацииВход.
&НаКлиенте
Функция ИсправитьСчетКонтрагента(СчетОрганизацииВход, КонтрагентВход)
	РезультатФункции = ДенежныеСредстваВстраиваниеУХКлиентСервер.ПолучитьПустойБанковскийСчетКонтрагента();
	МассивСчетовКонтрагента = ПолучитьМассивСчетовКонтрагентаПоСчетуОрганизации(СчетОрганизацииВход, КонтрагентВход);
	КоличествоСтрок = МассивСчетовКонтрагента.Количество();
	Если КоличествоСтрок = 0 Тогда
		// Такого счета нет. Создадим на основании счета организации.
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("СчетОрганизации", СчетОрганизацииВход);
		СтруктураПараметров.Вставить("Контрагент", КонтрагентВход);
		Оповещение = Новый ОписаниеОповещения("СоздатьАналогичныйСчетЗавершение", ЭтотОбъект, СтруктураПараметров); 
		ТекстВопроса = НСтр("ru = 'Создать аналогичный для %СчетОрганизации% банковский счет для владельца %Контрагент%?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%СчетОрганизации%", СчетОрганизацииВход);
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Контрагент%", КонтрагентВход);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	ИначеЕсли КоличествоСтрок = 1 Тогда	
		// Уже есть такой счет. Исправление не требуется.
		РезультатФункции = МассивСчетовКонтрагента[0];
	Иначе
		// Более одного счета.
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.ЗагрузитьЗначения(МассивСчетовКонтрагента);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("МассивСчетовКонтрагента", МассивСчетовКонтрагента);
		СтруктураПараметров.Вставить("СчетОрганизации", СчетОрганизацииВход);
		Оповещение = Новый ОписаниеОповещения("СчетаКонтрагентаПослеВыбора", ЭтотОбъект, СтруктураПараметров);
		ПоказатьВыборИзСписка(Оповещение, СписокВыбора);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура КонтрагентыОрганизацииПослеВыбора(ЗначениеВыбора, ДопПараметры) Экспорт
	Если ЗначениеВыбора <> Неопределено Тогда
		// У всех контрагентов, кроме выбранного, очистим реквизит Организационная единица.
		МассивОчищ = Новый Массив;
		Для Каждого ТекМассивКонтрагентов Из ДопПараметры.МассивКонтрагентов Цикл
			Если ЗначениеВыбора.Значение <> ТекМассивКонтрагентов Тогда
				МассивОчищ.Добавить(ТекМассивКонтрагентов);
			Иначе
				// Это выбранный элемент. Не добавляем в массив для очистки.
			КонецЕсли;
		КонецЦикла;
		СброситьОрганизациюКонрагентов(МассивОчищ);
	Иначе
		// Пользователь отказался. Ничего не делаем.
	КонецЕсли;
	ОбновитьДеревоССохранениемСтроки();
КонецПроцедуры

// Исправляет контрагентов, ассоциированных с организацией ОрганизацияВход.
&НаКлиенте
Процедура ИсправитьКонтрагентаОрганизации(ОрганизацияВход, ГруппаДоступаВход)
	МассивСтруктурКонтрагентов = ПолучитьКонтрагентовОрганизации(ОрганизацияВход);
	Если МассивСтруктурКонтрагентов.Количество() = 0 Тогда
		// Нет сопоставленных контрагентов. Создадим по организации.
		НовыйКонтрагент = ВвестиКонтрагентаПоОрганизации(ОрганизацияВход, ГруппаДоступаВход);
	ИначеЕсли МассивСтруктурКонтрагентов.Количество() = 1 Тогда
		// Уже есть единственный контрагент.
	Иначе
		// Контрагентов несколько. Выберем, какого нужено оставить.
		СписокВыбора = Новый СписокЗначений;
		МассивСсылокКонтрагентов = Новый Массив;
		Для Каждого ТекМассивСтруктурКонтрагентов Из МассивСтруктурКонтрагентов Цикл
			ПредставлениеКонтрагента = "%Ссылка%";
			ПредставлениеКонтрагента = СтрЗаменить(ПредставлениеКонтрагента, "%Ссылка%", ТекМассивСтруктурКонтрагентов.Ссылка);
			СписокВыбора.Добавить(ТекМассивСтруктурКонтрагентов.Ссылка, ПредставлениеКонтрагента);
			МассивСсылокКонтрагентов.Добавить(ТекМассивСтруктурКонтрагентов.Ссылка);
		КонецЦикла;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("МассивКонтрагентов", МассивСсылокКонтрагентов);
		Оповещение = Новый ОписаниеОповещения("КонтрагентыОрганизацииПослеВыбора", ЭтотОбъект, СтруктураПараметров);
		ПоказатьВыборИзСписка(Оповещение, СписокВыбора);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Получение параметров.
	Если Параметры.Свойство("ОтборИзмерений") Тогда
		ОтборИзмерений = ОбщегоНазначенияКлиентСервер.СкопироватьСписокЗначений(Параметры.ОтборИзмерений);
		ОтборИзмерений = Обработки.НастройкаВнутригрупповыхКонтрагентов.ДополнитьОтборИзмеренийОрганизациямиСчетов(ОтборИзмерений);
	Иначе	
		ОтборИзмерений = Новый СписокЗначений;
	КонецЕсли;
	// Считывание данных.
	ОбновитьДерево_Сервер();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОрганизацийИспользованиеПриИзменении(Элемент)
	ТекДанные = Элементы.ДеревоОрганизаций.ТекущиеДанные;
	ЭтоГруппировка = (ТекДанные.УровеньСтроки = 1);
	Если ЭтоГруппировка Тогда
		// Это строка организации.
		Для Каждого ДетальнаяСтрока Из ТекДанные.ПолучитьЭлементы() Цикл
			ДетальнаяСтрока.Использование = ТекДанные.Использование;
		КонецЦикла;
	Иначе
		// Это строка счета
		СтрокаРодитель = ТекДанные.ПолучитьРодителя();
		Если СтрокаРодитель = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если ТекДанные.Использование Тогда
			// Взводим флажок на уровень выше.
			СтрокаРодитель.Использование = ТекДанные.Использование;
		Иначе
			// Снимем флажок родительской строки, если это был последний счет
			ЕстьВыбранныеСчета = Ложь;
			Для Каждого ТекСтрока Из СтрокаРодитель.ПолучитьЭлементы() Цикл
				Если ТекСтрока.Использование Тогда
					ЕстьВыбранныеСчета = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			СтрокаРодитель.Использование = ЕстьВыбранныеСчета;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОрганизацийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элементы.ДеревоОрганизаций.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если Поле.Имя = "ДеревоОрганизацийИзмерениеОрганизация" Тогда
			СтандартнаяОбработка = Ложь;
			Если ЗначениеЗаполнено(ТекДанные.ИзмерениеОрганизация) Тогда
				ПоказатьЗначение(,ТекДанные.ИзмерениеОрганизация);
			Иначе
				// Пустая организация. Не открываем.
			КонецЕсли;
		ИначеЕсли Поле.Имя = "ДеревоОрганизацийИзмерениеКонтрагент" Тогда
			СтандартнаяОбработка = Ложь;
			Если ЗначениеЗаполнено(ТекДанные.ИзмерениеКонтрагент) Тогда
				Если ТекДанные.УровеньСтроки = 1 Тогда
					ПараметрыФормы = Новый Структура;
					ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
				ИначеЕсли ТекДанные.УровеньСтроки = 2 Тогда	
					РодительСтроки = ТекДанные.ПолучитьРодителя();
					ТекКонтрагент = РодительСтроки.ИзмерениеКонтрагент;
					ПараметрыФормы = Новый Структура;
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("Владелец", ТекКонтрагент);
					ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
					ОткрытьФорму("Справочник." + ДенежныеСредстваВстраиваниеУХКлиентСервер.ИмяСправочникаБанковскиеСчетаКонтрагентов() + ".ФормаВыбора", ПараметрыФормы, ЭтаФорма);
				Иначе
					ТекстСообщения = НСтр("ru = 'Неизвестный вариант группировки. Операция отменена.'");
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				КонецЕсли;
			Иначе
				Если ТекДанные.УровеньСтроки = 1 Тогда
					ТекОрганизация = ТекДанные.ИзмерениеОрганизация;
					Если ЗначениеЗаполнено(ТекОрганизация) Тогда
						ИсправитьКонтрагентаОрганизации(ТекОрганизация, ГруппаДоступа);
					Иначе
						// Нет данных ни по одному полю. Ничего не делаем.
					КонецЕсли;
				ИначеЕсли ТекДанные.УровеньСтроки = 2 Тогда	
					РодительСтроки = ТекДанные.ПолучитьРодителя();
					ТекКонтрагент = РодительСтроки.ИзмерениеКонтрагент;
					Если ЗначениеЗаполнено(ТекКонтрагент) Тогда
						ТекСчетОрганизации = ТекДанные.ИзмерениеОрганизация;
						ИсправитьСчетКонтрагента(ТекСчетОрганизации, ТекКонтрагент);
					Иначе
						ТекстСообщения = НСтр("ru = 'Не заполнен контрагент по счету %СчетКонтрагента%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СчетКонтрагента%", Строка(ТекДанные.ИзмерениеОрганизация));
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
					КонецЕсли;
				Иначе
					ТекстСообщения = НСтр("ru = 'Неизвестный вариант группировки. Операция отменена.'");
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Работает стандартная обработка.
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	УстановитьПометкуНаСервере(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	УстановитьПометкуНаСервере(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	РазвернутьДерево();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДерево(Команда)
	ОбновитьДеревоССохранениемСтроки();
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	РазвернутьДерево();
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	СвернутьДерево();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗеркально(Команда)
	// Получим массив проблеммных элементов.
	МассивСоздания = Новый Массив;
	Для Каждого ТекЭлементы Из ДеревоОрганизаций.ПолучитьЭлементы() Цикл
		// Обход по первому уровню (организация/контрагент).
		Если ТекЭлементы.Использование Тогда
			Если НЕ ЗначениеЗаполнено(ТекЭлементы.ИзмерениеКонтрагент) Тогда
				СтруктураСтроки = Новый Структура;
				СтруктураСтроки.Вставить("ИзмерениеОрганизация",	 ТекЭлементы.ИзмерениеОрганизация);
				СтруктураСтроки.Вставить("ИзмерениеКонтрагент",		 ТекЭлементы.ИзмерениеКонтрагент);
				СтруктураСтроки.Вставить("УровеньСтроки",			 ТекЭлементы.УровеньСтроки);
				СтруктураСтроки.Вставить("КонтрагентРодитель",		 Неопределено); 
				МассивСоздания.Добавить(СтруктураСтроки);
			Иначе
				// Уже есть значение, не добавляем в массив.
			КонецЕсли;
		Иначе
			// Пользователь снял использование данной строки. Пропускаем.
		КонецЕсли;
		Для Каждого ТекСчета Из ТекЭлементы.ПолучитьЭлементы() Цикл
			// Обход по второму уровню (счета).
			Если ТекСчета.Использование Тогда
				Если НЕ ЗначениеЗаполнено(ТекСчета.ИзмерениеКонтрагент) Тогда
					СтруктураСтроки = Новый Структура;
					СтруктураСтроки.Вставить("ИзмерениеОрганизация",	 ТекСчета.ИзмерениеОрганизация);
					СтруктураСтроки.Вставить("ИзмерениеКонтрагент",		 ТекСчета.ИзмерениеКонтрагент);
					СтруктураСтроки.Вставить("УровеньСтроки",			 ТекСчета.УровеньСтроки);
					СтруктураСтроки.Вставить("КонтрагентРодитель",		 ТекЭлементы.ИзмерениеКонтрагент); 
					МассивСоздания.Добавить(СтруктураСтроки);
				Иначе
					// Уже есть значение, не добавляем в массив.
				КонецЕсли;
			Иначе
				// Пользователь снял использование данной строки. Пропускаем.
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	// Выполним преобразования по полученному массиву.
	СоздатьНедостающиеЭлементыПоМассиву(МассивСоздания, ГруппаДоступа);
	ОбновитьДеревоССохранениемСтроки();
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОтбор(Команда)
	ОтборИзмерений = Новый СписокЗначений;
	ОбновитьДеревоССохранениемСтроки();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если ТипЗнч(ВыбранноеЗначение) = ДенежныеСредстваВстраиваниеУХКлиентСервер.ТипБанковскиеСчетаКонтрагентов() Тогда
			ТекДанные = Элементы.ДеревоОрганизаций.ТекущиеДанные;
			Если ТекДанные <> Неопределено Тогда
				Если ТекДанные.УровеньСтроки = 2 Тогда
					РодительСтроки = ТекДанные.ПолучитьРодителя();
					ТекКонтрагент = РодительСтроки.ИзмерениеКонтрагент;
					ТекСчетОрганизации = ТекДанные.ИзмерениеОрганизация;
					СопоставитьВыбранныйСчетДляКонтрагента(ТекСчетОрганизации, ТекКонтрагент, ВыбранноеЗначение);
					ОбновитьДеревоССохранениемСтроки();
				Иначе
					ТекстСообщения = НСтр("ru = 'Для выбора нового счета контрагента требуется выбрать строку со счетом организации'");
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				КонецЕсли;
			Иначе
				// Строка не выбрана. Ничего не делаем.
			КонецЕсли;
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда	
			ТекДанные = Элементы.ДеревоОрганизаций.ТекущиеДанные;
			Если ТекДанные <> Неопределено Тогда
				Если ТекДанные.УровеньСтроки = 1 Тогда
					ТекОрганизация = ТекДанные.ИзмерениеОрганизация;
					СопоставитьВыбранногоКонтрагентаОрганизации(ТекОрганизация, ВыбранноеЗначение);
					ОбновитьДеревоССохранениемСтроки();
				Иначе
					ТекстСообщения = НСтр("ru = 'Для выбора нового контрагента требуется выбрать строку со организацией'");
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				КонецЕсли;
			Иначе
				// Строка не выбрана. Ничего не делаем.
			КонецЕсли;
		Иначе
			// Неизвестный вариант выбора. Ничего не делаем.
		КонецЕсли;
	Иначе
		// Значение не выбрано. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрЭлемента(Команда)
	ТекДанные = Элементы.ДеревоОрганизаций.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ИмяЭлемента = Элементы.ДеревоОрганизаций.ТекущийЭлемент.Имя;
		ВыбранноеЗначение = Неопределено;
		Если СокрЛП(ИмяЭлемента) = "ДеревоОрганизацийИзмерениеОрганизация" Тогда
			ВыбранноеЗначение = ТекДанные.ИзмерениеОрганизация;
		ИначеЕсли СокрЛП(ИмяЭлемента) = "ДеревоОрганизацийИзмерениеКонтрагент" Тогда
			ВыбранноеЗначение = ТекДанные.ИзмерениеКонтрагент;
		Иначе
			ВыбранноеЗначение = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			ПоказатьЗначение(,ВыбранноеЗначение);
		Иначе
			// Неизвестный вариант. Ничего не делаем.
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

