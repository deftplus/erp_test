
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ШаблонТрансляции			= Параметры.ШаблонТрансляции;
	
	ДанныеШаблона=Обработки.УстановкаСоответствияСчетов.ПолучитьДанныеШаблона(ШаблонТрансляции);
	
	НаправлениеТрансляции	= ДанныеШаблона.НаправлениеТрансляции;
	ТекущийИдентификатор	= ДанныеШаблона.ТекущийИдентификатор;
	СокращеннаяОСВ			= ДанныеШаблона.СокращеннаяОСВ;
	ВидОтчетаОСВИсточник	= ДанныеШаблона.ВидОтчетаОСВИсточник;
	ВидОтчетаОСВПриемник	= ДанныеШаблона.ВидОтчетаОСВПриемник;
		
	УстановитьВидимость();
			
	ПланСчетовИсточник			= ДанныеШаблона.ПланСчетовИсточник;
	ПланСчетовПриемник			= ДанныеШаблона.ПланСчетовПриемник;
	
	ПланСчетовИсточникНаименование = ПланСчетовИсточник.Наименование;
	ПланСчетовПриемникНаименование = ПланСчетовПриемник.Наименование;
		
	Элементы.ОпорныйПланСчетовСоответствия.СписокВыбора.Добавить(ПланСчетовПриемник.Наименование);
	Элементы.ОпорныйПланСчетовСоответствия.СписокВыбора.Добавить(ПланСчетовИсточник.Наименование);
	ОпорныйПланСчетовСоответствия=ПланСчетовПриемник.Наименование;
	
	СчетИсточник=Параметры.СчетИсточник;
			
	Элементы.ЛеваяПанель.Заголовок	= НСтр("ru = 'План счетов - источник: '") + ПланСчетовИсточник;
	
	ЗаполнитьТаблицаСчетовИсточник();
	
	ЗаполнитьТаблицаСчетовПриемник();	
	ОбновитьТаблицаСчетовПриемник();

	Элементы.СопоставленныеИсточник.Пометка			= Ложь;
	Элементы.НесопоставленныеИсточник.Пометка		= Ложь;
	Элементы.СопоставленныеПриемник.Пометка			= Ложь;
	Элементы.НесопоставленныеПриемник.Пометка		= Ложь;
	Элементы.ОтборПоТекущейКолонкеИсточник.Пометка	= Ложь;
	Элементы.ОтборПоТекущейКолонкеПриемник.Пометка	= Ложь;
	
	Элементы.ЛеваяПанель.Заголовок = НСтр("ru = 'План счетов '") + ПланСчетовИсточник;
	
	Элементы.ТаблицаСчетовПриемникСчетИсточникИнв.Видимость=ИнвертироватьТаблицы;
	Элементы.ТаблицаСчетовПриемникСчетПриемникИнв.Видимость=ИнвертироватьТаблицы;
	
	Элементы.ТаблицаСчетовПриемникСчетИсточник.Видимость=НЕ ИнвертироватьТаблицы;
	Элементы.ТаблицаСчетовПриемникСчетПриемник.Видимость=НЕ ИнвертироватьТаблицы;
	
	Если НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.РегистрБухгалтерииВРегистрБухгалтерии Тогда
		
		РегистрБухгалтерииИсточник=ШаблонТрансляции.РегистрБухгалтерииИсточник;
		РегистрБухгалтерииПриемник=ШаблонТрансляции.РегистрБухгалтерииПриемник;
		
	КонецЕсли;
	
	Элементы.ПодробнаяИнформация.Пометка=Ложь;
	Элементы.ОтборПоИсточнику.Пометка	=Ложь;
						
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьЗаполненияПоУмолчанию()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетаБД.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СчетаБД КАК СчетаБД
	|ГДЕ
	|	СчетаБД.Владелец = &ВладелецПриемник
	|	И СчетаБД.СчетИсточник.Владелец = &ВладелецИсточник";
	
	Запрос.УстановитьПараметр("ВладелецПриемник",ПланСчетовПриемник);
	Запрос.УстановитьПараметр("ВладелецИсточник",ПланСчетовИсточник);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Элементы.ФормаЗаполнитьАвтоматически.Видимость=Истина;
		
	Иначе
		
		Элементы.ФормаЗаполнитьАвтоматически.Видимость=Ложь;
		
	КонецЕсли;		
	
КонецПроцедуры // ПроверитьВозможностьЗаполненияПоУмолчанию() 

 
&НаСервере
Процедура ОбновитьТаблицаСчетовПриемник()
	
	ТекДеревоПриемник=РеквизитФормыВЗначение("ТаблицаСчетовПриемник");
	
	//Отметим соответствия, в которых используются нестандартные отборы
	
	Запрос=Новый Запрос;
	
	Если НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.РегистрБухгалтерииВРегистрБухгалтерии Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ТаблицаСчетовПриемник.СчетПриемник КАК СчетПриемник,
		|	ТаблицаСчетовПриемник.ОпорныйСчетНаименование КАК ОпорныйСчетНаименование,
		|	ТаблицаСчетовПриемник.Сопоставлено КАК Сопоставлено,
		|	ТаблицаСчетовПриемник.ТранслироватьСальдо КАК ТранслироватьСальдо,
		|	ТаблицаСчетовПриемник.ТранслироватьОбороты КАК ТранслироватьОбороты,
		|	ТаблицаСчетовПриемник.КоррСчетИсточник КАК КоррСчетИсточник,
		|	ТаблицаСчетовПриемник.ИспользованиеДт КАК ИспользованиеДт,
		|	ТаблицаСчетовПриемник.ИспользованиеКт КАК ИспользованиеКт,
		|	ТаблицаСчетовПриемник.СчетИсточник КАК СчетИсточник,
		|	ТаблицаСчетовПриемник.СчетИсточникНаименование КАК СчетИсточникНаименование,
		|	ТаблицаСчетовПриемник.Отбор КАК Отбор,
		|	ТаблицаСчетовПриемник.ГруппирующийСчет КАК ГруппирующийСчет,
		|	ТаблицаСчетовПриемник.НастройкаСохранена КАК НастройкаСохранена,
		|	ТаблицаСчетовПриемник.Валютный КАК Валютный,
		|	ТаблицаСчетовПриемник.НастройкиДт КАК НастройкиДт,
		|	ТаблицаСчетовПриемник.СчетИсточникКод КАК СчетИсточникКод,
		|	ТаблицаСчетовПриемник.СчетПриемникКод КАК СчетПриемникКод,
		|	ТаблицаСчетовПриемник.Ссылка КАК Ссылка,
		|	ТаблицаСчетовПриемник.ИдентификаторСоответствия КАК ИдентификаторСоответствия,
		|	ТаблицаСчетовПриемник.БалансОПУ КАК БалансОПУ
		|ПОМЕСТИТЬ ТаблицаСчетовПриемник
		|ИЗ
		|	&ТаблицаСчетовПриемник КАК ТаблицаСчетовПриемник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсточникиДанныхДляРасчетов.Ссылка КАК Ссылка,
		|	ИсточникиДанныхДляРасчетов.ДополнительноеПредставление КАК ДополнительноеПредставление,
		|	ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК ПотребительРасчета
		|ПОМЕСТИТЬ ИсточникиДанныхДт
		|ИЗ
		|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
		|ГДЕ
		|	ВЫРАЗИТЬ(ИсточникиДанныхДляРасчетов.НазначениеРасчетов КАК Справочник.ПравилаОбработки).Владелец = &ШаблонТрансляции
		|	И ВЫРАЗИТЬ(ИсточникиДанныхДляРасчетов.НазначениеРасчетов КАК Справочник.ПравилаОбработки).НаправлениеТрансляции = &НаправлениеТрансляции
		|	И ИсточникиДанныхДляРасчетов.ТрансляцияДебет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСчетовПриемник.СчетПриемник КАК СчетПриемник,
		|	ТаблицаСчетовПриемник.ОпорныйСчетНаименование КАК ОпорныйСчетНаименование,
		|	ТаблицаСчетовПриемник.Сопоставлено КАК Сопоставлено,
		|	ТаблицаСчетовПриемник.ТранслироватьСальдо КАК ТранслироватьСальдо,
		|	ТаблицаСчетовПриемник.ТранслироватьОбороты КАК ТранслироватьОбороты,
		|	ТаблицаСчетовПриемник.ИспользованиеДт КАК ИспользованиеДт,
		|	ТаблицаСчетовПриемник.ИспользованиеКт КАК ИспользованиеКт,
		|	ТаблицаСчетовПриемник.СчетИсточник КАК СчетИсточник,
		|	ТаблицаСчетовПриемник.СчетИсточникНаименование КАК СчетИсточникНаименование,
		|	ТаблицаСчетовПриемник.КоррСчетИсточник КАК КоррСчетИсточник,
		|	ТаблицаСчетовПриемник.Отбор КАК Отбор,
		|	ТаблицаСчетовПриемник.ГруппирующийСчет КАК ГруппирующийСчет,
		|	ТаблицаСчетовПриемник.НастройкаСохранена КАК НастройкаСохранена,
		|	ТаблицаСчетовПриемник.Валютный КАК Валютный,
		|	ТаблицаСчетовПриемник.Ссылка КАК Ссылка,
		|	ТаблицаСчетовПриемник.ИдентификаторСоответствия КАК ИдентификаторСоответствия,
		|	ТаблицаСчетовПриемник.СчетИсточникКод КАК СчетИсточникКод,
		|	ТаблицаСчетовПриемник.СчетПриемникКод КАК СчетПриемникКод,
		|	ТаблицаСчетовПриемник.БалансОПУ КАК БалансОПУ,
		|	ЕСТЬNULL(ИсточникиДанныхДт.ДополнительноеПредставление, """") КАК НастройкиДт,
		|	"""" КАК ОтборПодробно,
		|	"""" КАК СоответствиеПодробно,
		|	ЕСТЬNULL(ИсточникиДанныхДт.Ссылка, ЗНАЧЕНИЕ(Справочник.ИсточникиДанныхДляРасчетов.ПустаяСсылка)) КАК ИсточникСсылка
		|ИЗ
		|	ТаблицаСчетовПриемник КАК ТаблицаСчетовПриемник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИсточникиДанныхДт КАК ИсточникиДанныхДт
		|		ПО ТаблицаСчетовПриемник.Ссылка = ИсточникиДанныхДт.ПотребительРасчета";
		
		Запрос.УстановитьПараметр("ТаблицаСчетовПриемник",	ТекДеревоПриемник);
		Запрос.УстановитьПараметр("ШаблонТрансляции",		ШаблонТрансляции);
		Запрос.УстановитьПараметр("НаправлениеТрансляции",	НаправлениеТрансляции);

		ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(),"ТаблицаСчетовПриемник");
			
	Иначе
		
		Запрос.Текст="ВЫБРАТЬ
		|	ИсточникиДанныхДляРасчетов.Счет КАК СчетИсточникСчет,
		|	ИсточникиДанныхДляРасчетов.ПоказательОтбор.СчетБД КАК СчетИсточникПоказатель,
		|	ИсточникиДанныхДляРасчетов.ПотребительРасчета.СчетБД КАК СчетПриемникПоказатель,
		|	ИсточникиДанныхДляРасчетов.ПотребительРасчета.СчетПриемник КАК СчетПриемникСоответствие
		|ИЗ
		|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
		|ГДЕ
		|	ИсточникиДанныхДляРасчетов.ЕстьНестандартныеОтборы
		|	И ИсточникиДанныхДляРасчетов.НазначениеРасчетов.Владелец = &ШаблонТрансляции
		|	И ИсточникиДанныхДляРасчетов.НазначениеРасчетов.НаправлениеТрансляции = &НаправлениеТрансляции";
		
		Запрос.УстановитьПараметр("ШаблонТрансляции",		ШаблонТрансляции);
		Запрос.УстановитьПараметр("НаправлениеТрансляции",	НаправлениеТрансляции);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			СтруктураПоиска=Новый Структура;
			СтруктураПоиска.Вставить("СчетИсточник",?(ЗначениеЗаполнено(Результат.СчетИсточникПоказатель),Результат.СчетИсточникПоказатель,Результат.СчетИсточникСчет));
			СтруктураПоиска.Вставить("СчетПриемник",?(ЗначениеЗаполнено(Результат.СчетПриемникПоказатель),Результат.СчетПриемникПоказатель,Результат.СчетПриемникСоответствие));
			
			МассивСтрок=ТекДеревоПриемник.НайтиСтроки(СтруктураПоиска);
			
			Если МассивСтрок.Количество()>0 Тогда
				
				МассивСтрок[0].Отбор=Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ТекДеревоПриемник,"ТаблицаСчетовПриемник");
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСпискиИсточников()

&НаСервере
Процедура ОбновитьТаблицыФормы()
	
	ТекНастройкиСоответствия=РеквизитФормыВЗначение("ТаблицаСчетовПриемник");
		
	ИнвертироватьТаблицы=(НЕ ОпорныйПланСчетовСоответствия=ПланСчетовПриемникНаименование);
	
	// Обновляем таблицу соответствия
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.Текст="ВЫБРАТЬ *
	|Поместить ТекНастройкиСоответствия
	|ИЗ &ТекНастройкиСоответствия КАК ТекНастройкиСоответствия
	|;
	|ВЫБРАТЬ
	|	СчетаБД.Ссылка КАК "+?(ИнвертироватьТаблицы,"СчетИсточник","СчетПриемник")+",
	|	СчетаБД.Наименование КАК ОпорныйСчетНаименование,
	|	СчетаБД.ГруппирующийСчет,
	|	СчетаБД.Валютный,
	|	ТекНастройкиСоответствия.Сопоставлено,
	|	ЕСТЬNULL(ТекНастройкиСоответствия.ИспользованиеДт, ЛОЖЬ) КАК ИспользованиеДт,
	|	ЕСТЬNULL(ТекНастройкиСоответствия.ИспользованиеКт, ЛОЖЬ) КАК ИспользованиеКт,
	|	ЕСТЬNULL(ТекНастройкиСоответствия.ИдентификаторСоответствия, ЛОЖЬ) КАК ИдентификаторСоответствия,
	|	ЕСТЬNULL(ТекНастройкиСоответствия.ТранслироватьСальдо, ЛОЖЬ) КАК ТранслироватьСальдо,
	|	ЕСТЬNULL(ТекНастройкиСоответствия.ТранслироватьОбороты, ЛОЖЬ) КАК ТранслироватьОбороты,
	|	ЕСТЬNULL(ТекНастройкиСоответствия."+?(ИнвертироватьТаблицы,"СчетПриемник","СчетИсточник")+", ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)) КАК "+?(ИнвертироватьТаблицы,"СчетПриемник","СчетИсточник")+",
	|	ЕСТЬNULL(ТекНастройкиСоответствия.КоррСчетИсточник, ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)) КАК КоррСчетИсточник,
	|	ЕСТЬNULL(ТекНастройкиСоответствия.Ссылка, ЗНАЧЕНИЕ(Справочник.СоответствияСчетовДляТрансляции.ПустаяСсылка)) КАК Ссылка,
	|	ЕСТЬNULL(ТекНастройкиСоответствия.НастройкаСохранена,Ложь) КАК НастройкаСохранена,
	|	ТекНастройкиСоответствия."+?(ИнвертироватьТаблицы,"СчетПриемник","СчетИсточник")+"Код КАК "+?(ИнвертироватьТаблицы,"СчетПриемник","СчетИсточник")+"Код
	|ИЗ
	|	Справочник.СчетаБД КАК СчетаБД
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТекНастройкиСоответствия КАК ТекНастройкиСоответствия
	|		ПО СчетаБД.Ссылка = ТекНастройкиСоответствия."+?(ИнвертироватьТаблицы,"СчетИсточник","СчетПриемник")+"
	|ГДЕ
	|	СчетаБД.Владелец = &ОпорныйПланСчетовСоответствия
	|	И НЕ СчетаБД.ПометкаУдаления";
	
	Если ИнвертироватьТаблицы Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И НЕ СчетаБД.ДляИсключенийПриТрансляции";
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетаБД.Код ИЕРАРХИЯ,
	|	"+?(ИнвертироватьТаблицы,"СчетПриемник","СчетИсточник")+"Код ";
	
	Запрос.УстановитьПараметр("ОпорныйПланСчетовСоответствия",?(ИнвертироватьТаблицы,ПланСчетовИсточник,ПланСчетовПриемник));
	Запрос.УстановитьПараметр("ШаблонТрансляции",			ШаблонТрансляции);
	Запрос.УстановитьПараметр("ТекНастройкиСоответствия",	ТекНастройкиСоответствия);
	
	ТаблицаСчетовИсходная=Запрос.Выполнить().Выгрузить();
	
	ТаблицаСчетовПриемник.Очистить();
	
	ТекущийСчет="";
	
	Для Каждого СтрокаСчет ИЗ ТаблицаСчетовИсходная Цикл
		
		НоваяСтрока=ТаблицаСчетовПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаСчет);
				
		Если ТекущийСчет=СтрокаСчет[?(ИнвертироватьТаблицы,"СчетИсточник","СчетПриемник")] Тогда
			
			НоваяСтрока.ОпорныйСчетНаименование="";
			
		Иначе
			
			ТекущийСчет=СтрокаСчет[?(ИнвертироватьТаблицы,"СчетИсточник","СчетПриемник")];
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ТаблицаСчетовПриемникСчетИсточникИнв.Видимость=ИнвертироватьТаблицы;
	Элементы.ТаблицаСчетовПриемникСчетПриемникИнв.Видимость=ИнвертироватьТаблицы;
	
	Элементы.ТаблицаСчетовПриемникСчетИсточник.Видимость=НЕ ИнвертироватьТаблицы;
	Элементы.ТаблицаСчетовПриемникСчетПриемник.Видимость=НЕ ИнвертироватьТаблицы;
				
	// Обновляем таблицу счетов - источников
	
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаБД.Ссылка КАК СчетИсточник,
	|	ТекНастройкиСоответствия.Сопоставлено КАК Сопоставлено,
	|	СчетаБД.Наименование КАК СчетИсточникНаименование,
	|	СчетаБД.ГруппирующийСчет,
	|	СчетаБД.Валютный
	|ИЗ
	|	Справочник.СчетаБД КАК СчетаБД
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТекНастройкиСоответствия КАК ТекНастройкиСоответствия
	|		ПО СчетаБД.Ссылка = ТекНастройкиСоответствия."+?(ИнвертироватьТаблицы,"СчетПриемник","СчетИсточник")+"
	|ГДЕ
	|	СчетаБД.Владелец = &ПланСчетовИсточник
	|	И НЕ СчетаБД.ПометкаУдаления";
	
	Если НЕ ИнвертироватьТаблицы Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И НЕ СчетаБД.ДляИсключенийПриТрансляции";
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетаБД.Код ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("ПланСчетовИсточник",	?(ИнвертироватьТаблицы,ПланСчетовПриемник,ПланСчетовИсточник));	
	Запрос.УстановитьПараметр("ШаблонТрансляции",	ШаблонТрансляции);	
	
	Результат=Запрос.Выполнить().Выбрать();
	ТаблицаСчетовИсточник.Очистить();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока=ТаблицаСчетовИсточник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
		
	КонецЦикла;
	
	Элементы.ЛеваяПанель.Заголовок=СтрШаблон(Нстр("ru = 'План счетов: %1'"), ?(ИнвертироватьТаблицы,ПланСчетовПриемник,ПланСчетовИсточник));

	ОбновитьТаблицаСчетовПриемник();
	
КонецПроцедуры // ЗаполнитьТаблицаСчетовИсточникФорма()

&НаСервере
Процедура ОтметитьНестандартныйОтборСоответствия(ИсточникДанных)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.Счет КАК СчетИсточникСчет,
	|	ИсточникиДанныхДляРасчетов.ПоказательОтбор.СчетБД КАК СчетИсточникПоказатель,
	|	ИсточникиДанныхДляРасчетов.ПотребительРасчета.СчетБД КАК СчетПриемникПоказатель,
	|	ИсточникиДанныхДляРасчетов.ПотребительРасчета.СчетПриемник КАК СчетПриемникСоответствие
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.Ссылка=&ИсточникДанных";
	
	Запрос.УстановитьПараметр("ИсточникДанных",ИсточникДанных);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		СтруктураПоиска=Новый Структура;
		СтруктураПоиска.Вставить("СчетИсточник",?(ЗначениеЗаполнено(Результат.СчетИсточникПоказатель),Результат.СчетИсточникПоказатель,Результат.СчетИсточникСчет));
		СтруктураПоиска.Вставить("СчетПриемник",?(ЗначениеЗаполнено(Результат.СчетПриемникПоказатель),Результат.СчетПриемникПоказатель,Результат.СчетПриемникСоответствие));

		МассивСтрок=ТаблицаСчетовПриемник.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество()>0 Тогда
			
			МассивСтрок[0].Отбор=Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОтметитьНестандартныйОтборСоответствия() 

&НаСервере
Процедура ЗаполнитьТаблицаСчетовИсточник()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|			НастройкиПравилТрансляции.СоответствиеСчетов.СчетИсточник КАК СчетИсточник,
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НастройкиПравилТрансляции.СоответствиеСчетов.СчетПриемник) КАК СчетПриемник
	|ПОМЕСТИТЬ НастроенныеСоответствия
	|		ИЗ
	|			РегистрСведений.НастройкиПравилТрансляции КАК НастройкиПравилТрансляции
	|		ГДЕ
	|			НастройкиПравилТрансляции.ШаблонТрансляции = &ШаблонТрансляции
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НастройкиПравилТрансляции.СоответствиеСчетов.СчетИсточник
	|Индексировать ПО СчетИсточник
	|;	
	|ВЫБРАТЬ
	|	СчетаБД.Ссылка КАК СчетИсточник,
	|	ВЫБОР
	|		КОГДА НастроенныеСоответствия."+?(ИнвертироватьТаблицы,"СчетИсточник","СчетПриемник")+" ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Сопоставлено,
	|	ВЫБОР
	|		КОГДА НастроенныеСоответствия."+?(ИнвертироватьТаблицы,"СчетИсточник","СчетПриемник")+" ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ  НастроенныеСоответствия."+?(ИнвертироватьТаблицы,"СчетИсточник","СчетПриемник")+"
	|	КОНЕЦ КАК СопоставленоСчетов,
	|	СчетаБД.Наименование КАК СчетИсточникНаименование,
	|	СчетаБД.ГруппирующийСчет,
	|	СчетаБД.Валютный,
	|	ВЫБОР
	|		КОГДА СчетаБД.РазделПланаСчетов В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Баланс))
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Баланс)
	|		КОГДА СчетаБД.РазделПланаСчетов В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.ОПУ))
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.ОПУ)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК БалансОПУ
	|ИЗ
	|	Справочник.СчетаБД КАК СчетаБД
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастроенныеСоответствия КАК НастроенныеСоответствия
	|		ПО СчетаБД.Ссылка = НастроенныеСоответствия."+?(ИнвертироватьТаблицы,"СчетПриемник","СчетИсточник");
		
	Запрос.Текст=Запрос.Текст+"
	|ГДЕ
	|	СчетаБД.Владелец = &ПланСчетовИсточник
	|	И НЕ СчетаБД.ПометкаУдаления";
	
	Если НЕ ИнвертироватьТаблицы Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И НЕ СчетаБД.ДляИсключенийПриТрансляции";
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетаБД.Код ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("ПланСчетовИсточник",	?(ИнвертироватьТаблицы,ПланСчетовПриемник,ПланСчетовИсточник));	
	Запрос.УстановитьПараметр("ШаблонТрансляции",	ШаблонТрансляции);	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(),"ТаблицаСчетовИсточник");
		
КонецПроцедуры // ЗаполнитьТаблицаСчетовИсточник()

&НаСервере
Процедура ЗаполнитьТаблицаСчетовПриемник()	
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СчетаБД.Ссылка КАК "+?(ИнвертироватьТаблицы,"СчетИсточник","СчетПриемник")+",
	|	СчетаБД.Наименование КАК ОпорныйСчетНаименование,
	|	СчетаБД.Код КАК "+?(ИнвертироватьТаблицы,"СчетИсточник","СчетПриемник")+"Код,
	|	СчетаБД.ГруппирующийСчет,
	|	СчетаБД.Валютный,
	|	ВЫБОР
	|		КОГДА НастройкиСоответствия."+?(ИнвертироватьТаблицы,"СчетПриемник","СчетИсточник")+" ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Сопоставлено,
	|	ВЫБОР
	|		КОГДА СчетаБД.РазделПланаСчетов В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Баланс))
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Баланс)
	|		КОГДА СчетаБД.РазделПланаСчетов В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.ОПУ))
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.ОПУ)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК БалансОПУ,
	|	ЕСТЬNULL(НастройкиСоответствия.ИспользованиеДт, ЛОЖЬ) КАК ИспользованиеДт,
	|	ЕСТЬNULL(НастройкиСоответствия.ИспользованиеКт, ЛОЖЬ) КАК ИспользованиеКт,
	|	ЕСТЬNULL(НастройкиСоответствия.ТранслироватьСальдо, ЛОЖЬ) КАК ТранслироватьСальдо,
	|	ЕСТЬNULL(НастройкиСоответствия.ТранслироватьОбороты, ЛОЖЬ) КАК ТранслироватьОбороты,
	|	ЕСТЬNULL(НастройкиСоответствия."+?(ИнвертироватьТаблицы,"СчетПриемник","СчетИсточник")+", ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)) КАК "+?(ИнвертироватьТаблицы,"СчетПриемник","СчетИсточник")+",
	|	ЕСТЬNULL(НастройкиСоответствия.КоррСчетИсточник, ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)) КАК КоррСчетИсточник,
	|	ЕСТЬNULL(НастройкиСоответствия.ИдентификаторСоответствия, 0) КАК ИдентификаторСоответствия,
	|	ЕСТЬNULL(НастройкиСоответствия.Ссылка, ЗНАЧЕНИЕ(Справочник.СоответствияСчетовДляТрансляции.ПустаяСсылка)) КАК Ссылка,
	|	ИСТИНА КАК НастройкаСохранена,
	|	ЕСТЬNULL(НастройкиСоответствия."+?(ИнвертироватьТаблицы,"СчетПриемник","СчетИсточник")+"Код, """""""") КАК "+?(ИнвертироватьТаблицы,"СчетПриемник","СчетИсточник")+"Код
	|ИЗ
	|	Справочник.СчетаБД КАК СчетаБД
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СоответствияСчетовДляТрансляции.Ссылка КАК Ссылка,
	|			СоответствияСчетовДляТрансляции.СчетПриемник КАК СчетПриемник,
	|			СоответствияСчетовДляТрансляции.СчетПриемник.Код КАК СчетПриемникКод,
	|			СоответствияСчетовДляТрансляции.КоррСчетИсточник КАК КоррСчетИсточник,
	|			СоответствияСчетовДляТрансляции.ИдентификаторСоответствия КАК ИдентификаторСоответствия,
	|			НастройкиПравилТрансляции.ИспользованиеДт КАК ИспользованиеДт,
	|			НастройкиПравилТрансляции.ИспользованиеКт КАК ИспользованиеКт,
	|			НастройкиПравилТрансляции.ТранслироватьСальдо КАК ТранслироватьСальдо,
	|			НастройкиПравилТрансляции.ТранслироватьОбороты КАК ТранслироватьОбороты,
	|			СоответствияСчетовДляТрансляции.СчетИсточник КАК СчетИсточник,
	|			СоответствияСчетовДляТрансляции.СчетИсточник.Код КАК СчетИсточникКод
	|		ИЗ
	|			Справочник.СоответствияСчетовДляТрансляции КАК СоответствияСчетовДляТрансляции
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравилТрансляции КАК НастройкиПравилТрансляции
	|				ПО СоответствияСчетовДляТрансляции.Ссылка = НастройкиПравилТрансляции.СоответствиеСчетов
	|					И (НастройкиПравилТрансляции.ШаблонТрансляции = &ШаблонТрансляции)
	|		ГДЕ
	|			СоответствияСчетовДляТрансляции.Владелец = &ШаблонТрансляции) КАК НастройкиСоответствия
	|		ПО СчетаБД.Ссылка = НастройкиСоответствия."+?(ИнвертироватьТаблицы,"СчетИсточник","СчетПриемник");
		
	Запрос.Текст=Запрос.Текст+"
	|ГДЕ
	|	СчетаБД.Владелец = &ОпорныйПланСчетовСоответствия
	|	И НЕ СчетаБД.ПометкаУдаления";
	
	Если ИнвертироватьТаблицы Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И НЕ СчетаБД.ДляИсключенийПриТрансляции";
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетаБД.Код ИЕРАРХИЯ,
	|	"+?(ИнвертироватьТаблицы,"СчетПриемник","СчетИсточник")+"Код,
	|ИдентификаторСоответствия";
	
	Запрос.УстановитьПараметр("ОпорныйПланСчетовСоответствия",?(ИнвертироватьТаблицы,ПланСчетовИсточник,ПланСчетовПриемник));
	Запрос.УстановитьПараметр("ШаблонТрансляции",	ШаблонТрансляции);
	
	ТаблицаСчетовИсходная=Запрос.Выполнить().Выгрузить();
	
	ТаблицаСчетовПриемник.Очистить();
	
	ТекущийСчет="";
	
	Для Каждого СтрокаСчет ИЗ ТаблицаСчетовИсходная Цикл
		
		НоваяСтрока=ТаблицаСчетовПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаСчет);
		
		Если ТекущийСчет=СтрокаСчет[?(ИнвертироватьТаблицы,"СчетИсточник","СчетПриемник")] Тогда
			
			НоваяСтрока.ОпорныйСчетНаименование="";
			
		Иначе
			
			ТекущийСчет=СтрокаСчет[?(ИнвертироватьТаблицы,"СчетИсточник","СчетПриемник")];
			
		КонецЕсли;
		
	КонецЦикла;
						
КонецПроцедуры // ЗаполнитьТаблицаСчетовИсточник()

&НаСервере
Процедура ЗаполнитьСоответствиеПоКодам()
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	ТекДеревоПриемник=РеквизитФормыВЗначение("ТаблицаСчетовПриемник");
	
	Запрос.Текст="ВЫБРАТЬ
	|	ТекТаблицаСоответствий.Ссылка КАК Ссылка,
	|	ТекТаблицаСоответствий.СчетПриемник КАК СчетПриемник,
	|	ТекТаблицаСоответствий.СчетИсточник КАК СчетИсточник
	|ПОМЕСТИТЬ СуществующиеСоответствия
	|ИЗ
	|	&ТекТаблицаСоответствий КАК ТекТаблицаСоответствий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаПриемники.Ссылка КАК СчетПриемник,
	|	СчетаПриемники.СчетИсточник КАК СчетИсточник
	|ПОМЕСТИТЬ НовыеСоответствия
	|ИЗ
	|	Справочник.СчетаБД КАК СчетаПриемники
	|ГДЕ
	|	СчетаПриемники.Владелец = &ПланСчетовПриемник
	|	И НЕ СчетаПриемники.ГруппирующийСчет
	|	И СчетаПриемники.СчетИсточник.Владелец = &ПланСчетовИсточник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СопоставлениеСоответствий.СчетПриемник КАК СчетПриемник,
	|	СопоставлениеСоответствий.СчетИсточник КАК СчетИсточник
	|ИЗ
	|	(ВЫБРАТЬ
	|		НовыеСоответствия.СчетПриемник КАК СчетПриемник,
	|		ЕСТЬNULL(СуществующиеСоответствия.Ссылка, НЕОПРЕДЕЛЕНО) КАК Ссылка,
	|		НовыеСоответствия.СчетИсточник КАК СчетИсточник
	|	ИЗ
	|		НовыеСоответствия КАК НовыеСоответствия
	|			ЛЕВОЕ СОЕДИНЕНИЕ СуществующиеСоответствия КАК СуществующиеСоответствия
	|			ПО НовыеСоответствия.СчетПриемник = СуществующиеСоответствия.СчетПриемник) КАК СопоставлениеСоответствий";
	
	Запрос.УстановитьПараметр("ТекТаблицаСоответствий",ТекДеревоПриемник);
	Запрос.УстановитьПараметр("ПланСчетовИсточник",ПланСчетовИсточник);
	Запрос.УстановитьПараметр("ПланСчетовПриемник",ПланСчетовПриемник);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СтрокаПриемник=ТекДеревоПриемник.Найти(Результат[?(ИнвертироватьТаблицы,"СчетИсточник","СчетПриемник")],?(ИнвертироватьТаблицы,"СчетИсточник","СчетПриемник"));
		
		Если Не СтрокаПриемник=Неопределено Тогда
						
			Если НЕ (СтрокаПриемник.ГруппирующийСчет ИЛИ СтрокаПриемник[?(ИнвертироватьТаблицы,"СчетПриемник","СчетИсточник")]=Результат[?(ИнвертироватьТаблицы,"СчетПриемник","СчетИсточник")]) Тогда
				
				ДобавитьСчетИсточникСервер(СтрокаПриемник,Результат);
									
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(ТекДеревоПриемник,"ТаблицаСчетовПриемник");
		
КонецПроцедуры // ЗаполнитьСоответствиеПоКодам()

&НаСервере
Процедура УстановитьВидимость()
	
	Если НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.ПоказателиВПоказатели Тогда
		
		Элементы.ИспользованиеДт.Видимость			= Истина;
		Элементы.ИспользованиеКт.Видимость 			= Истина;
		Элементы.ТранслироватьОбороты.ТолькоПросмотр= СокращеннаяОСВ;
		Элементы.ТранслироватьСальдо.ТолькоПросмотр	= СокращеннаяОСВ;
		Элементы.Настройки.Видимость				= Истина;
		Элементы.НастройкиДт.Видимость				= Ложь;
		Элементы.ПодробнаяИнформация.Видимость		= Ложь;
		Элементы.ТаблицаСчетовПриемникКоррСчетИсточник.Видимость=Ложь;
		
	ИначеЕсли НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.РегистрБухгалтерииВПоказатели Тогда
		
		Элементы.ИспользованиеДт.Видимость			= Истина;
		Элементы.ИспользованиеКт.Видимость			= Истина;
		Элементы.ТранслироватьОбороты.ТолькоПросмотр= СокращеннаяОСВ;
		Элементы.ТранслироватьСальдо.ТолькоПросмотр	= СокращеннаяОСВ;
		Элементы.Настройки.Видимость				= Истина;
		Элементы.НастройкиДт.Видимость				= Ложь;
		Элементы.ПодробнаяИнформация.Видимость		= Ложь;
		Элементы.ТаблицаСчетовПриемникКоррСчетИсточник.Видимость=Истина;
		
	Иначе
		
		Элементы.ИспользованиеДт.Видимость		= Истина;
		Элементы.ИспользованиеКт.Видимость		= Истина;
		Элементы.ТранслироватьОбороты.Видимость	= Ложь;
		Элементы.ТранслироватьСальдо.Видимость	= Ложь;
		Элементы.Настройки.Видимость			= Ложь;
		Элементы.НастройкиДт.Видимость			= Истина;
		Элементы.ПодробнаяИнформация.Видимость	= Истина;
		Элементы.ТаблицаСчетовПриемникКоррСчетИсточник.Видимость=Истина;
		
	КонецЕсли;
	
	Элементы.ТаблицаСчетовПриемникБалансОПУ.Видимость=СокращеннаяОСВ;
	Элементы.ТаблицаСчетовИсточникБалансОПУ.Видимость=СокращеннаяОСВ;
		
КонецПроцедуры // УстановитьВидимость()

&НаСервере
Процедура СохранитьНастройкиСоответствий()
			
	Если НЕ ЗначениеЗаполнено(ШаблонТрансляции) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗапросПравило=Новый Запрос;
	ЗапросПравило.Текст="ВЫБРАТЬ
	|	ПравилаОбработки.Ссылка
	|ИЗ
	|	Справочник.ПравилаОбработки КАК ПравилаОбработки
	|ГДЕ
	|	ПравилаОбработки.Владелец = &Владелец
	|	И ПравилаОбработки.НаправлениеТрансляции = &НаправлениеТрансляции";
	
	ЗапросПравило.УстановитьПараметр("Владелец",ШаблонТрансляции);
	ЗапросПравило.УстановитьПараметр("НаправлениеТрансляции",НаправлениеТрансляции);
	
	Результат=ЗапросПравило.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		УправлениеОтчетамиУХ.ОчиститьФормулыРасчета(Результат.Ссылка);
		
	КонецЕсли;
	
	ТаблицаСоответствийНов=РеквизитФормыВЗначение("ТаблицаСчетовПриемник");
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
					
	Запрос.Текст="ВЫБРАТЬ
	|	СоответствияСчетовДляТрансляции.Ссылка,
	|	СоответствияСчетовДляТрансляции.СчетИсточник,
	|	СоответствияСчетовДляТрансляции.СчетПриемник,
	|	СоответствияСчетовДляТрансляции.КоррСчетИсточник,
	|	СоответствияСчетовДляТрансляции.ИдентификаторСоответствия,
	|	ЕСТЬNULL(НастройкиПравилТрансляции.ИспользованиеДт, ЛОЖЬ) КАК ИспользованиеДт,
	|	ЕСТЬNULL(НастройкиПравилТрансляции.ИспользованиеКт, ЛОЖЬ) КАК ИспользованиеКт,
	|	ЕСТЬNULL(НастройкиПравилТрансляции.ТранслироватьСальдо, ЛОЖЬ) КАК ТранслироватьСальдо,
	|	ЕСТЬNULL(НастройкиПравилТрансляции.ТранслироватьОбороты, ЛОЖЬ) КАК ТранслироватьОбороты,
	|	СоответствияСчетовДляТрансляции.ПометкаУдаления
	|ПОМЕСТИТЬ СуществующиеНастройки
	|ИЗ
	|	Справочник.СоответствияСчетовДляТрансляции КАК СоответствияСчетовДляТрансляции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравилТрансляции КАК НастройкиПравилТрансляции
	|		ПО СоответствияСчетовДляТрансляции.Ссылка = НастройкиПравилТрансляции.СоответствиеСчетов
	|			И (НастройкиПравилТрансляции.ШаблонТрансляции = &ШаблонТрансляции)
	|ГДЕ
	|	СоответствияСчетовДляТрансляции.Владелец = &ШаблонТрансляции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоответствийНов.СчетИсточник,
	|	ТаблицаСоответствийНов.СчетПриемник,
	|	ТаблицаСоответствийНов.ИспользованиеДт,
	|	ТаблицаСоответствийНов.ИспользованиеКт,
	|	ТаблицаСоответствийНов.ТранслироватьСальдо,
	|	ТаблицаСоответствийНов.ТранслироватьОбороты,
	|	ТаблицаСоответствийНов.КоррСчетИсточник,
	|	ТаблицаСоответствийНов.ИдентификаторСоответствия,
	|	ТаблицаСоответствийНов.Ссылка
	|ПОМЕСТИТЬ НовыеНастройки
	|ИЗ
	|	&ТаблицаСоответствийНов КАК ТаблицаСоответствийНов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеНастройки.СчетИсточник КАК СчетИсточникНов,
	|	НовыеНастройки.СчетПриемник КАК СчетПриемникНов,
	|	НовыеНастройки.ИдентификаторСоответствия КАК ИдентификаторСоответствияНов,
	|	ЕСТЬNULL(НовыеНастройки.ИспользованиеДт, ЛОЖЬ) КАК ИспользованиеДтНов,
	|	ЕСТЬNULL(НовыеНастройки.ИспользованиеКт, ЛОЖЬ) КАК ИспользованиеКтНов,
	|	ЕСТЬNULL(НовыеНастройки.ТранслироватьСальдо, ЛОЖЬ) КАК ТранслироватьСальдоНов,
	|	ЕСТЬNULL(НовыеНастройки.ТранслироватьОбороты, ЛОЖЬ) КАК ТранслироватьОборотыНов,
	|	НовыеНастройки.КоррСчетИсточник КАК КоррСчетИсточникНов,
	|	НовыеНастройки.Ссылка КАК СсылкаНов,
	|	СуществующиеНастройки.Ссылка КАК СсылкаСтар,
	|	СуществующиеНастройки.СчетИсточник КАК СчетИсточникСтар,
	|	СуществующиеНастройки.СчетПриемник КАК СчетПриемникСтар,
	|	СуществующиеНастройки.ИдентификаторСоответствия КАК ИдентификаторСоответствияСтар,
	|	ЕСТЬNULL(СуществующиеНастройки.ИспользованиеДт, ЛОЖЬ) КАК ИспользованиеДтСтар,
	|	ЕСТЬNULL(СуществующиеНастройки.ИспользованиеКт, ЛОЖЬ) КАК ИспользованиеКтСтар,
	|	ЕСТЬNULL(СуществующиеНастройки.ТранслироватьСальдо, ЛОЖЬ) КАК ТранслироватьСальдоСтар,
	|	ЕСТЬNULL(СуществующиеНастройки.ТранслироватьОбороты, ЛОЖЬ) КАК ТранслироватьОборотыСтар,
	|	СуществующиеНастройки.КоррСчетИсточник КАК КоррСчетИсточникСтар,
	|	СуществующиеНастройки.ПометкаУдаления КАК ПометкаУдаленияСтар
	|ИЗ
	|	НовыеНастройки КАК НовыеНастройки
	|		ПОЛНОЕ СОЕДИНЕНИЕ СуществующиеНастройки КАК СуществующиеНастройки
	|		ПО НовыеНастройки.СчетИсточник = СуществующиеНастройки.СчетИсточник
	|		И НовыеНастройки.КоррСчетИсточник = СуществующиеНастройки.КоррСчетИсточник
	|			И НовыеНастройки.СчетПриемник = СуществующиеНастройки.СчетПриемник
	|			И НовыеНастройки.ИдентификаторСоответствия = СуществующиеНастройки.ИдентификаторСоответствия";
	
	Запрос.УстановитьПараметр("ШаблонТрансляции",		ШаблонТрансляции);
	Запрос.УстановитьПараметр("ТаблицаСоответствийНов",	ТаблицаСоответствийНов);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	ЗапросПоказатели=ПолучитьЗапросПоказатели();	
	НачатьТранзакцию();
	
	Пока Результат.Следующий() Цикл
		
		Если Результат.СчетИсточникНов=Null И ЗначениеЗаполнено(Результат.СсылкаСтар) Тогда // Убрана настройку соответствия
			
			УправлениеОтчетамиУХ.ЗаписатьНастройкиПравилТрансляции(ШаблонТрансляции,Результат.СсылкаСтар);
			
		ИначеЕсли Результат.СсылкаСтар=Null 
			И ЗначениеЗаполнено(Результат.СчетИсточникНов)
			И ЗначениеЗаполнено(Результат.СчетПриемникНов) Тогда // Новое соответствие счетов
			
			СтруктураПараметров=Новый Структура;
			СтруктураПараметров.Вставить("Владелец",		ШаблонТрансляции);
			СтруктураПараметров.Вставить("СчетИсточник",	Результат.СчетИсточникНов);
			СтруктураПараметров.Вставить("СчетПриемник",	Результат.СчетПриемникНов);
			СтруктураПараметров.Вставить("КоррСчетИсточник",Результат.КоррСчетИсточникНов);
			СтруктураПараметров.Вставить("ИдентификаторСоответствия",Результат.ИдентификаторСоответствияНов);
			СтруктураПараметров.Вставить("Ссылка");
			
			Справочники.СоответствияСчетовДляТрансляции.ИзменитьОбъектПоПараметрам(СтруктураПараметров);
			
			Если ЗначениеЗаполнено(СтруктураПараметров.Ссылка) Тогда
				
				СтруктураРесурсов=Новый Структура;
				СтруктураРесурсов.Вставить("ИспользованиеДт",				Результат.ИспользованиеДтНов);
				СтруктураРесурсов.Вставить("ИспользованиеКт",				Результат.ИспользованиеКтНов);
				СтруктураРесурсов.Вставить("ТранслироватьСальдо",			Результат.ТранслироватьСальдоНов);
				СтруктураРесурсов.Вставить("ТранслироватьОбороты",			Результат.ТранслироватьОборотыНов);
				СтруктураРесурсов.Вставить("НаправлениеТрансляции",			НаправлениеТрансляции);
				СтруктураРесурсов.Вставить("СокращеннаяОСВ",				СокращеннаяОСВ);
				СтруктураРесурсов.Вставить("ВидОтчетаОСВИсточник",			ВидОтчетаОСВИсточник);
				СтруктураРесурсов.Вставить("ВидОтчетаОСВПриемник",			ВидОтчетаОСВПриемник);
			
			    УправлениеОтчетамиУХ.ЗаписатьНастройкиПравилТрансляции(ШаблонТрансляции,СтруктураПараметров.Ссылка,СтруктураРесурсов,ЗапросПоказатели); 
					
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Результат.СсылкаСтар) И 
			(НЕ (Результат.ИспользованиеДтНов				= Результат.ИспользованиеДтСтар
					И Результат.ИспользованиеКтНов				= Результат.ИспользованиеКтСтар
					И Результат.ТранслироватьСальдоНов			= Результат.ТранслироватьСальдоСтар
					И Результат.ТранслироватьОборотыНов			= Результат.ТранслироватьОборотыСтар)) Тогда // Изменены правила применения
					
			СтруктураРесурсов=Новый Структура;
			
			СтруктураРесурсов.Вставить("НаправлениеТрансляции",	НаправлениеТрансляции);
			СтруктураРесурсов.Вставить("ИспользованиеДт",		Результат.ИспользованиеДтНов);
			СтруктураРесурсов.Вставить("ИспользованиеКт",		Результат.ИспользованиеКтНов);
			СтруктураРесурсов.Вставить("ТранслироватьСальдо",	Результат.ТранслироватьСальдоНов);
			СтруктураРесурсов.Вставить("ТранслироватьОбороты",	Результат.ТранслироватьОборотыНов);
			СтруктураРесурсов.Вставить("СокращеннаяОСВ",		СокращеннаяОСВ);
			СтруктураРесурсов.Вставить("ВидОтчетаОСВИсточник",	ВидОтчетаОСВИсточник);
			СтруктураРесурсов.Вставить("ВидОтчетаОСВПриемник",	ВидОтчетаОСВПриемник);
											
	    	УправлениеОтчетамиУХ.ЗаписатьНастройкиПравилТрансляции(ШаблонТрансляции,Результат.СсылкаСтар,СтруктураРесурсов,ЗапросПоказатели);
			
		ИначеЕсли ЗначениеЗаполнено(Результат.СсылкаСтар) Тогда
			
			СписокНаправлений=Новый СписокЗначений;
			СписокНаправлений.Добавить(НаправлениеТрансляции);
			
			СтруктураРесурсов=Новый Структура;
			
			СтруктураРесурсов.Вставить("НаправлениеТрансляции",	НаправлениеТрансляции);	
			СтруктураРесурсов.Вставить("ИспользованиеДт",		Результат.ИспользованиеДтСтар);
			СтруктураРесурсов.Вставить("ИспользованиеКт",		Результат.ИспользованиеКтСтар);
			СтруктураРесурсов.Вставить("ТранслироватьСальдо",	Результат.ТранслироватьСальдоСтар);
			СтруктураРесурсов.Вставить("ТранслироватьОбороты",	Результат.ТранслироватьОборотыСтар);
			СтруктураРесурсов.Вставить("СокращеннаяОСВ",		СокращеннаяОСВ);
			СтруктураРесурсов.Вставить("ВидОтчетаОСВИсточник",	ВидОтчетаОСВИсточник);
			СтруктураРесурсов.Вставить("ВидОтчетаОСВПриемник",	ВидОтчетаОСВПриемник);
											
	    	УправлениеОтчетамиУХ.ИзменитьПравилаТрансляции(ШаблонТрансляции,Результат.СсылкаСтар,СтруктураРесурсов,ЗапросПоказатели); 
			
		КонецЕсли;
		
	КонецЦикла;
	
	Обработки.КорректировкиЗначенийПоказателей.УстановитьПризнакИзмененияШаблона(ШаблонТрансляции);
	
	ЗафиксироватьТранзакцию();
	
	ЗаполнитьТаблицаСчетовПриемник();	
	ОбновитьТаблицаСчетовПриемник();
				
КонецПроцедуры // СохранитьНастройкиСоответствий()

&НаСервере
Функция ПолучитьЗапросПоказатели()
	
	Если НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.ПоказателиВПоказатели Тогда
				
		Запрос=Новый Запрос;
		Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		
		Запрос.Текст="ВЫБРАТЬ
		|	ПоказателиОтчетов.Ссылка,
		|	ПоказателиОтчетов.СчетБД,
		|	ПоказателиОтчетов.ВидИтогаПоСчету
		|ПОМЕСТИТЬ ПоказателиИсточник
		|ИЗ
		|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|ГДЕ
		|	НЕ ПоказателиОтчетов.ПометкаУдаления
		|	И ПоказателиОтчетов.Владелец = &ВидОтчетаОСВИсточник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоказателиОтчетов.Ссылка,
		|	ПоказателиОтчетов.СчетБД,
		|	ПоказателиОтчетов.ВидИтогаПоСчету
		|ПОМЕСТИТЬ ПоказателиПриемник
		|ИЗ
		|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|ГДЕ
		|	НЕ ПоказателиОтчетов.ПометкаУдаления
		|	И ПоказателиОтчетов.Владелец = &ВидОтчетаОСВПриемник";
		
		Запрос.УстановитьПараметр("ВидОтчетаОСВИсточник",ВидОтчетаОСВИсточник);
		Запрос.УстановитьПараметр("ВидОтчетаОСВПриемник",ВидОтчетаОСВПриемник);
		
		Запрос.Выполнить();
		Возврат Запрос;
		
	ИначеЕсли НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.РегистрБухгалтерииВПоказатели Тогда
		
		Запрос=Новый Запрос;
		Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		
		Запрос.Текст="ВЫБРАТЬ
		|	ПоказателиОтчетов.Ссылка,
		|	ПоказателиОтчетов.СчетБД,
		|	ПоказателиОтчетов.ВидИтогаПоСчету
		|ПОМЕСТИТЬ ПоказателиПриемник
		|ИЗ
		|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|ГДЕ
		|	НЕ ПоказателиОтчетов.ПометкаУдаления
		|	И ПоказателиОтчетов.Владелец = &ВидОтчетаОСВПриемник";
		
		Запрос.УстановитьПараметр("ВидОтчетаОСВПриемник",ВидОтчетаОСВПриемник);
		
		Запрос.Выполнить();
		Возврат Запрос;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
КонецФункции // ПолучитьЗапросПоказатели() 

&НаКлиенте
Функция ОпределитьИдентификаторСоответствия()
	
	ТекущийИдентификатор=ТекущийИдентификатор+1;
	
	Возврат ТекущийИдентификатор;
		
КонецФункции // ОпределитьИдентификаторСоответствия()
	
	
	

&НаКлиенте
Процедура ДобавитьСчетСоответствия(СтрокаПриемник,ДанныеИсточника)
	
	СтрокаСоответствие=Новый Структура;
	
	Если СокращеннаяОСВ Тогда
		
		Если ЗначениеЗаполнено(ДанныеИсточника.БалансОПУ)
			И ЗначениеЗаполнено(СтрокаПриемник.БалансОПУ)
			И (НЕ ДанныеИсточника.БалансОПУ=СтрокаПриемник.БалансОПУ) Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Счет - источник %1 относится к разделу %2 
			|Счет - приемник %3 относится к разделу %4. 
			|Соответствие не может быть установлено.'"), 
			ДанныеИсточника.СчетИсточник, ДанныеИсточника.БалансОПУ, СтрокаПриемник.СчетПриемникКод, СтрокаПриемник.БалансОПУ);
			
			ПоказатьПредупреждение(,ТекстСообщения);
			Возврат;
			
		Иначе
			
			СтрокаСоответствие.Вставить("ТранслироватьСальдо",	СтрокаПриемник.БалансОПУ=ПредопределенноеЗначение("Справочник.РазделыПланаСчетов.Баланс"));
			СтрокаСоответствие.Вставить("ТранслироватьОбороты",	СтрокаПриемник.БалансОПУ=ПредопределенноеЗначение("Справочник.РазделыПланаСчетов.ОПУ"));
			
		КонецЕсли;
		
	Иначе
		
		СтрокаСоответствие.Вставить("ТранслироватьСальдо",	Истина);
		СтрокаСоответствие.Вставить("ТранслироватьОбороты",	Истина);
		
	КонецЕсли;
			
	СтрокаСоответствие.Вставить("ИспользованиеДт",		Истина);
	СтрокаСоответствие.Вставить("ИспользованиеКт",		Истина);
			
	СтрокаСоответствие.Вставить(?(ИнвертироватьТаблицы,"СчетПриемник","СчетИсточник"),ДанныеИсточника.СчетИсточник);
	СтрокаСоответствие.Вставить(?(ИнвертироватьТаблицы,"СчетИсточник","СчетПриемник"),СтрокаПриемник[?(ИнвертироватьТаблицы,"СчетИсточник","СчетПриемник")]);
		
	Если НЕ ЗначениеЗаполнено(СтрокаПриемник[?(ИнвертироватьТаблицы,"СчетПриемник","СчетИсточник")]) Тогда
		
		ЗаполнитьЗначенияСвойств(СтрокаПриемник,СтрокаСоответствие);
		ДанныеИсточника.Сопоставлено=Истина;
		СтрокаПриемник.Сопоставлено=Истина;
		
		
		СтрокаПриемник.ИдентификаторСоответствия=ОпределитьИдентификаторСоответствия();
		
	Иначе
		
		СтрокаИсточник=ТаблицаСчетовПриемник.Вставить(ТаблицаСчетовПриемник.Индекс(СтрокаПриемник)+1);		
		ЗаполнитьЗначенияСвойств(СтрокаИсточник,СтрокаСоответствие);
		
		ДанныеИсточника.Сопоставлено=Истина;
		СтрокаИсточник.Сопоставлено=Истина;
		
		СтрокаПриемник.ИдентификаторСоответствия=ОпределитьИдентификаторСоответствия();
		
	КонецЕсли;
	
	ОпределитьКоличествоСопоставленных(ДанныеИсточника);
	
	Модифицированность=Истина;
	
КонецПроцедуры // ДобавитьСчетИсточник() 

&НаКлиенте
Процедура ОпределитьКоличествоСопоставленных(ДанныеИсточника)
	
	МассивСопоставленных=ТаблицаСчетовПриемник.НайтиСтроки(Новый Структура("СчетИсточник",ДанныеИсточника.СчетИсточник));
	ДанныеИсточника.СопоставленоСчетов=МассивСопоставленных.Количество();
	ДанныеИсточника.Сопоставлено=(ДанныеИсточника.СопоставленоСчетов>0);
		
КонецПроцедуры // ОпределитьКоличествоСопоставленных()

&НаСервере
Процедура ДобавитьСчетИсточникСервер(СтрокаПриемник,ДанныеИсточника)
	
	СтрокаСоответствие=Новый Структура;
	СтрокаСоответствие.Вставить("ИспользованиеДт",		Истина);
	СтрокаСоответствие.Вставить("ИспользованиеКт",		Истина);
	СтрокаСоответствие.Вставить("ТранслироватьСальдо",	Истина);
	СтрокаСоответствие.Вставить("ТранслироватьОбороты",	Истина);
	СтрокаСоответствие.Вставить("Сопоставлено",			Истина);
	СтрокаСоответствие.Вставить(?(ИнвертироватьТаблицы,"СчетПриемник","СчетИсточник"),ДанныеИсточника[?(ИнвертироватьТаблицы,"СчетПриемник","СчетИсточник")]);
		
	ЗаполнитьЗначенияСвойств(СтрокаПриемник,СтрокаСоответствие);
					
	СтрокиИсточник=ТаблицаСчетовИсточник.НайтиСтроки(Новый Структура("СчетИсточник",ДанныеИсточника[?(ИнвертироватьТаблицы,"СчетПриемник","СчетИсточник")]));
	
	Если СтрокиИсточник.Количество()>0 Тогда
		
		СтрокиИсточник[0].Сопоставлено=Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСчетИсточник()
			 
&НаКлиенте
Процедура ТаблицаСчетовПриемникПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка=Ложь;
	
	ТекущийПриемник=ТаблицаСчетовПриемник.НайтиПоИдентификатору(Строка);
	
	Если ТекущийПриемник=Неопределено 
		ИЛИ ТекущийПриемник.ГруппирующийСчет Тогда
	
		Возврат;
		
	КонецЕсли;
	
	Для Каждого СтрокаСчет ИЗ ПараметрыПеретаскивания.Значение Цикл
		
		ДобавитьСчетСоответствия(ТекущийПриемник,СтрокаСчет);
		
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовПриемникПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущийПриемник=ТаблицаСчетовПриемник.НайтиПоИдентификатору(Строка);
	
	Если ТекущийПриемник=Неопределено ИЛИ ТекущийПриемник.ГруппирующийСчет Тогда
		
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		
	Иначе	
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовИсточникНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	МассивПеретаскивания=ПолучитьМассивСчетов(ПараметрыПеретаскивания.Значение);
		
	Если МассивПеретаскивания.Количество()>0 Тогда
		
		ПараметрыПеретаскивания.Значение=МассивПеретаскивания;
		
	Иначе
		
		Выполнение=Ложь;
		
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивСчетов(МассивСтрок)
	
	МассивСчетов=Новый Массив;
	МассивСчетовИсточник=Новый Массив;
	
	Для Каждого НомерСтроки ИЗ МассивСтрок Цикл
		
		Строка=ТаблицаСчетовИсточник.НайтиПоИдентификатору(НомерСтроки);
		
		Если (Не Строка.ГруппирующийСчет ) 
			И МассивСчетовИсточник.Найти(Строка.СчетИсточник)=Неопределено Тогда
			
			МассивСчетов.Добавить(Строка);
			МассивСчетовИсточник.Добавить(Строка.СчетИсточник);
			
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат МассивСчетов;
	
КонецФункции // ПолучитьМассивСчетов() 	

&НаКлиенте
Процедура СопоставитьСчета(Команда)
	
	ТекущийПриемник=Элементы.ТаблицаСчетовПриемник.ТекущиеДанные;
	
	Если ТекущийПриемник=Неопределено ИЛИ ТекущийПриемник.ГруппирующийСчет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МассивСчетов=ПолучитьМассивСчетов(Элементы.ТаблицаСчетовИсточник.ВыделенныеСтроки);
	
	Для Каждого СтрокаСчет ИЗ МассивСчетов Цикл
		
		ДобавитьСчетСоответствия(ТекущийПриемник,СтрокаСчет);
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИсточникДляНастройкиОтбора(ДанныеСчета,ТекВидИтога="")
	
	Перем РабочийИсточник;
	
	Запрос=новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.Ссылка,
	|	ИсточникиДанныхДляРасчетов.ВидИтогаОСВ КАК ВидИтога
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ";
	
	Если НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.РегистрБухгалтерииВРегистрБухгалтерии Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|	ИсточникиДанныхДляРасчетов.ПотребительРасчета = &СоответствиеСчетов";
		
	Иначе
		
		Запрос.Текст=Запрос.Текст+"
		|	ИсточникиДанныхДляРасчетов.СоответствиеСчетов = &СоответствиеСчетов";
		
	КонецЕсли;	
	
	Запрос.Текст=Запрос.Текст+"
	|	И НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления
	|	И НЕ ИсточникиДанныхДляРасчетов.НеИспользуется";
	
	Запрос.УстановитьПараметр("СоответствиеСчетов",		ДанныеСчета.СоответствиеСчетов);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Если ПустаяСтрока(ТекВидИтога) Тогда
			
			Возврат Результат.Ссылка;
			
		Иначе
			
			РабочийИсточник=Результат.Ссылка;
			
			Если (ТекВидИтога="Сальдо" И УправлениеОтчетамиУХ.ИтогЯвляетсяСальдо(Результат.ВидИтога))
				ИЛИ (ТекВидИтога="Оборот" И УправлениеОтчетамиУХ.ИтогЯвляетсяОборотом(Результат.ВидИтога)) Тогда
				
				Возврат РабочийИсточник;
				
			КонецЕсли;
			
		КонецЕсли;		
			
	КонецЦикла;
	
	Возврат РабочийИсточник;
		
КонецФункции // ПолучитьИсточникДляНастройкиОтбора()

&НаСервере
Функция ПолучитьНастройкиТрансляции(ДанныеСоответствия)
		
	СтруктураРесурсов=Новый Структура;
	СтруктураРесурсов.Вставить("ИспользованиеДт",				ДанныеСоответствия.ИспользованиеДт);
	СтруктураРесурсов.Вставить("ИспользованиеКт",				ДанныеСоответствия.ИспользованиеКт);
	СтруктураРесурсов.Вставить("ТранслироватьСальдо",			ДанныеСоответствия.ТранслироватьСальдо);
	СтруктураРесурсов.Вставить("ТранслироватьОбороты",			ДанныеСоответствия.ТранслироватьОбороты);
	СтруктураРесурсов.Вставить("КоррСчетИсточник",				ДанныеСоответствия.КоррСчетИсточник);
	СтруктураРесурсов.Вставить("Ссылка",						ДанныеСоответствия.Ссылка);
	СтруктураРесурсов.Вставить("НаправлениеТрансляции",         НаправлениеТрансляции);
	СтруктураРесурсов.Вставить("СокращеннаяОСВ",         		СокращеннаяОСВ);
	
	Возврат СтруктураРесурсов;
	
КонецФункции // ПолучитьСтруктуруРесурсов()

&НаСервере
Процедура ЗаписатьТекущиеНастройкиТрансляции()
	
	СоответствиеСчетов=ТаблицаСчетовПриемник.НайтиПоИдентификатору(Элементы.ТаблицаСчетовПриемник.ТекущаяСтрока);	
	СтруктураПараметров=ПолучитьНастройкиТрансляции(СоответствиеСчетов);			
	УправлениеОтчетамиУХ.ЗаписатьНастройкиПравилТрансляции(ШаблонТрансляции,СтруктураПараметров.Ссылка,СтруктураПараметров,ПолучитьЗапросПоказатели());
	
	СоответствиеСчетов.НастройкаСохранена=Истина;
	
КонецПроцедуры // ЗаписатьТекущиеНастройкиСоответствия()

&НаСервереБезКонтекста
Процедура СоздатьСоответствие(СтруктураДанных)
	
	Справочники.СоответствияСчетовДляТрансляции.ИзменитьОбъектПоПараметрам(СтруктураДанных);
		
КонецПроцедуры // СоздатьСоответствие()

&НаСервереБезКонтекста
Функция ПолучитьИсточникПоСторонеПроводки(НаправлениеТрансляции,СоответствиеСчетов,СторонаПроводки)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсточникиДанныхДляРасчетов.Ссылка
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов.НаправлениеТрансляции = &НаправлениеТрансляции
	|	И ИсточникиДанныхДляРасчетов.ПотребительРасчета = &ПотребительРасчета";
	
	Запрос.УстановитьПараметр("НаправлениеТрансляции",НаправлениеТрансляции);
	Запрос.УстановитьПараметр("ПотребительРасчета",СоответствиеСчетов);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Возврат Результат.Ссылка;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
			
КонецФункции // ПолучитьИсточникПоСторонеПроводки()

&НаКлиенте
Процедура ТаблицаСчетовПриемникВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если СтрНайти(Поле.Имя,"Настройки")=0 И СтрНайти(Поле.Имя,"Подробно")=0  Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.СчетИсточник) Тогда
		
		Сообщить(НСтр("ru = 'Не указан счет - источник.'"), СтатусСообщения.Внимание);
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.СчетПриемник) Тогда
		
		Сообщить(НСтр("ru = 'Не указан счет - приемник.'"), СтатусСообщения.Внимание);
		Возврат;
		
	КонецЕсли;
	
	ДанныеСоответствия=Элементы.ТаблицаСчетовПриемник.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСоответствия.Ссылка) Тогда
		
		СтруктураСоответствие=Новый Структура;
		СтруктураСоответствие.Вставить("СчетИсточник",					ДанныеСоответствия.СчетИсточник);
		СтруктураСоответствие.Вставить("СчетПриемник",					ДанныеСоответствия.СчетПриемник);
		СтруктураСоответствие.Вставить("КоррСчетИсточник",				ДанныеСоответствия.КоррСчетИсточник);
		СтруктураСоответствие.Вставить("ИдентификаторСоответствия",		ДанныеСоответствия.ИдентификаторСоответствия);

		СтруктураСоответствие.Вставить("Владелец",						ШаблонТрансляции);
		СтруктураСоответствие.Вставить("Ссылка",						);
		
		СоздатьСоответствие(СтруктураСоответствие);
		
		Если ЗначениеЗаполнено(СтруктураСоответствие.Ссылка) Тогда
			
			ДанныеСоответствия.Ссылка=СтруктураСоответствие.Ссылка;
			
		Иначе
			
			Сообщить(НСтр("ru = 'Не создано соответствие.'"), СтатусСообщения.Внимание);	
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
			
	ДанныеСчета=Новый Структура("СчетИсточник,СчетПриемник,СоответствиеСчетов",ДанныеСоответствия.СчетИсточник,ДанныеСоответствия.СчетПриемник,ДанныеСоответствия.Ссылка);
		
	Если НЕ ДанныеСоответствия.НастройкаСохранена Тогда
		
		ЗаписатьТекущиеНастройкиТрансляции();
		
	КонецЕсли;
		
	Если Поле.Имя = "Настройки" Тогда
		
		СписокВидовИтога=ВернутьСписокВидовИтога(ДанныеСоответствия.СчетПриемник,ВидОтчетаОСВПриемник,ДанныеСоответствия.ТранслироватьСальдо,ДанныеСоответствия.ТранслироватьОбороты);
		
		ТекВидИтога="";
		
		Если СписокВидовИтога.Количество()=1 Тогда
			
			ТекВидИтога=СписокВидовИтога[0].Значение;
			
		ИначеЕсли СписокВидовИтога.Количество()>1 Тогда
			
			ЗначениеИтога = Неопределено;

			ДопПараметры = Новый Структура("ДанныеСоответствия, ДанныеСчета, Поле", ДанныеСоответствия, ДанныеСчета, Поле);
			Оповещение = Новый ОписаниеОповещения("ТаблицаСчетовПриемникВыборЗавершение", ЭтотОбъект, ДопПараметры);
			ПоказатьВыборИзСписка(Оповещение, СписокВидовИтога);
			
            Возврат;
			
		КонецЕсли;
		
		ОткрытьФормуИсточника(ДанныеСчета, ТекВидИтога);
		
	ИначеЕсли Поле.Имя="НастройкиДт"
		ИЛИ Поле.Имя="ОтборПодробно"
		ИЛИ Поле.Имя="СоответствиеПодробно" Тогда
								
		ИсточникДанных=ПолучитьИсточникПоСторонеПроводки(НаправлениеТрансляции,ДанныеСоответствия.Ссылка,"Дебет");
		
		Если НЕ ИсточникДанных=Неопределено Тогда
			
			ОткрытьФорму("Справочник.ИсточникиДанныхДляРасчетов.ФормаОбъекта",Новый Структура("Ключ",ИсточникДанных));
			
		Иначе
			
			ЗаписатьТекущиеНастройкиТрансляции();
			ИсточникДанных=ПолучитьИсточникПоСторонеПроводки(НаправлениеТрансляции,ДанныеСоответствия.Ссылка,"Дебет");
			
			Если НЕ ИсточникДанных=Неопределено Тогда
				
				ОткрытьФорму("Справочник.ИсточникиДанныхДляРасчетов.ФормаОбъекта",Новый Структура("Ключ,ДляВсехИсточниковПоСчету",ИсточникДанных,Истина));
				
			КонецЕсли;
			
		КонецЕсли;
					
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовПриемникВыборЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    ДанныеСоответствия 	= ДополнительныеПараметры.ДанныеСоответствия;
    ДанныеСчета 		= ДополнительныеПараметры.ДанныеСчета;
    Поле 				= ДополнительныеПараметры.Поле;
        
    ЗначениеИтога = ВыбранныйЭлемент;
    
    Если ЗначениеИтога = Неопределено Тогда
        
        Возврат;
        
    Иначе
        
        ТекВидИтога = ЗначениеИтога.Значение;
        
    КонецЕсли;
        
    ОткрытьФормуИсточника(ДанныеСчета, ТекВидИтога);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуИсточника(ДанныеСчета, ТекВидИтога)
    
    ИсточникДанных = ПолучитьИсточникДляНастройкиОтбора(ДанныеСчета,ТекВидИтога);
    
    Если НЕ ИсточникДанных = Неопределено Тогда
		
		ПараметрыФормы = Новый Структура("Ключ,ДляВсехИсточниковПоСчету", ИсточникДанных, Истина);
        ОткрытьФорму("Справочник.ИсточникиДанныхДляРасчетов.ФормаОбъекта", ПараметрыФормы);
        
    Иначе
        
        ЗаписатьТекущиеНастройкиТрансляции();
        ИсточникДанных = ПолучитьИсточникДляНастройкиОтбора(ДанныеСчета, ТекВидИтога);
        
        Если НЕ ИсточникДанных = Неопределено Тогда
			
			ПараметрыФормы = Новый Структура("Ключ,ДляВсехИсточниковПоСчету", ИсточникДанных, Истина);
            ОткрытьФорму("Справочник.ИсточникиДанныхДляРасчетов.ФормаОбъекта", ПараметрыФормы);
            
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьСписокВидовИтога(СчетБД,ВидОтчетаОСВПриемник,ТранслироватьСальдо,ТранслироватьОбороты)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ГруппыРаскрытия.Ссылка,
	|	ГруппыРаскрытия.Сальдо,
	|	ГруппыРаскрытия.Обороты
	|ИЗ
	|	Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
	|ГДЕ
	|	ГруппыРаскрытия.СчетБД = &СчетБД
	|	И ГруппыРаскрытия.Владелец =&ВидОтчетаОСВПриемник
	|	И НЕ ГруппыРаскрытия.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("СчетБД",СчетБД);
	Запрос.УстановитьПараметр("ВидОтчетаОСВПриемник",ВидОтчетаОСВПриемник);

	СписокВидовИтога=Новый СписокЗначений;
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
	
		Если Результат.Сальдо И Результат.Обороты Тогда
			
			Если СчетБД.ИспользоватьВидыДвижений Тогда
				
				Продолжить;
				
			Иначе
				
				Возврат СписокВидовИтога;
				
			КонецЕсли;
			
		ИначеЕсли Результат.Сальдо И ТранслироватьСальдо Тогда
			
			СписокВидовИтога.Добавить("Сальдо", НСтр("ru = 'Правила для остатков'"));
			
		ИначеЕсли Результат.Обороты И ТранслироватьОбороты Тогда
			
			СписокВидовИтога.Добавить("Оборот", НСтр("ru = 'Правила для оборотов'"));
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат СписокВидовИтога;
		
КонецФункции // ВернутьСписокВидовИтога() 

&НаКлиенте
Процедура ОчиститьСоответствие(СтрокаПриемник)
	
	СтрокиИсточник=ТаблицаСчетовИсточник.НайтиСтроки(Новый Структура("СчетИсточник",СтрокаПриемник[?(ИнвертироватьТаблицы,"СчетПриемник","СчетИсточник")]));
	СтрокаПриемник[?(ИнвертироватьТаблицы,"СчетПриемник","СчетИсточник")]="";

	Если СтрокиИсточник.Количество()>0 Тогда
		
		 ОпределитьКоличествоСопоставленных(СтрокиИсточник[0]);
		 
	КонецЕсли;
			
	СтрокаПриемник.КоррСчетИсточник="";
	СтрокаПриемник.ИспользованиеДт="";
	СтрокаПриемник.ИспользованиеКт="";
	СтрокаПриемник.НастройкиДт="";
	СтрокаПриемник.Ссылка="";
	
	Модифицированность=Истина;
			
КонецПроцедуры // ОчиститьСоответствия() 


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия="ИзмененСписокСчетов" И ТипЗнч(Параметр)=Тип("Массив") 
		И НЕ (Элементы.ТаблицаСчетовПриемник.ТекущиеДанные=Неопределено ИЛИ Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.ГруппирующийСчет) Тогда
				
		Для Каждого Счет ИЗ Параметр Цикл
			
			ДобавитьСчетСоответствия(Элементы.ТаблицаСчетовПриемник.ТекущиеДанные,Счет);
						
		КонецЦикла;
		
	ИначеЕсли ИмяСобытия="ЗаписанИсточникДанныхСНестандартнымиОтборами" Тогда
		
		ОтметитьНестандартныйОтборСоответствия(Параметр.Ссылка);
		
	ИначеЕсли ИмяСобытия="ЗаписаноПравилоНастройкиТрансляции" Тогда
		
		МассивСоответствия=ТаблицаСчетовПриемник.НайтиСтроки(Новый Структура("Ссылка",Параметр.ПотребительРасчета));
		
		Если МассивСоответствия.Количество()>0 Тогда
			
			СтрокаСоответствия=МассивСоответствия[0];
			
			МассивСоответствия[0]["Настройки"+?(Параметр.ТрансляцияДебет,"Дт","Кт")]=Параметр.ДополнительноеПредставление;
			
			Если Элементы.ПодробнаяИнформация.Пометка Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаСоответствия,ПолучитьПодробнуюИнформацию(СтрокаСоответствия.ИсточникСсылка));
				
			КонецЕсли;
			
		КонецЕсли;
					
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСопоставление(Команда)
	
	Если НЕ Элементы.ТаблицаСчетовПриемник.ВыделенныеСтроки=Неопределено Тогда
		
		Для Каждого ИдентификаторСтроки ИЗ Элементы.ТаблицаСчетовПриемник.ВыделенныеСтроки Цикл
			
			СтрокаСчет=ТаблицаСчетовПриемник.НайтиПоИдентификатору(ИдентификаторСтроки);
			
			Если НЕ СтрокаСчет.ГруппирующийСчет Тогда 
				
				ОчиститьСоответствие(СтрокаСчет);
				
				ИндексСтроки=ТаблицаСчетовПриемник.Индекс(СтрокаСчет);
				
				ПолеСчета=?(ИнвертироватьТаблицы,"СчетИсточник","СчетПриемник");
				
				Если ИндексСтроки>0 И ТаблицаСчетовПриемник[ИндексСтроки-1][ПолеСчета]=СтрокаСчет[ПолеСчета] Тогда
					
					ТаблицаСчетовПриемник.Удалить(СтрокаСчет);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоматически(Команда)
	
	ЗаполнитьСоответствиеПоКодам();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	СохранитьНастройкиСоответствий();
	Оповестить("ИзмененаНастройкаСоответствияСчетов",ШаблонТрансляции);
	Модифицированность=Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеТрансляцииПриИзменении(Элемент)
	
	ОбновитьТаблицаСчетовПриемник();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовИсточникПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ТаблицаСчетовИсточник.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ТаблицаСчетовИсточник.ТекущиеДанные.Сопоставлено Тогда
		
		Если Элементы.ОтборПоИсточнику.Пометка Тогда
			
			УстановитьОтборПриемник(ПолучитьОтборыПриемник(Элементы.ТаблицаСчетовИсточник.ТекущиеДанные.СчетИсточник));
			
		Иначе
			
			СтрокиПриемник=ТаблицаСчетовПриемник.НайтиСтроки(Новый Структура(?(ИнвертироватьТаблицы,"СчетПриемник","СчетИсточник"),Элементы.ТаблицаСчетовИсточник.ТекущиеДанные.СчетИсточник));
			
			Если СтрокиПриемник.Количество()>0 Тогда
				
				Элементы.ТаблицаСчетовПриемник.ТекущаяСтрока=СтрокиПриемник[0].ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовПриемникПриАктивизацииСтроки(Элемент)
	
	//Если Элементы.ТаблицаСчетовПриемник.ТекущиеДанные=Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.Сопоставлено Тогда
	//	
	//	СтрокиИсточник=ТаблицаСчетовИсточник.НайтиСтроки(Новый Структура("СчетИсточник",Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.СчетИсточник));
	//	
	//	Если СтрокиИсточник.Количество()>0 Тогда
	//		
	//		Элементы.ТаблицаСчетовИсточник.ТекущаяСтрока=СтрокиИсточник[0].ПолучитьИдентификатор();
	//		
	//	КонецЕсли;
	// 	 
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборИсточник(ОтборСтрок)
	
	Элементы.ТаблицаСчетовИсточник.ОтборСтрок=ОтборСтрок;
	
КонецПроцедуры // ОтобратьПроводки()

&НаКлиенте
Процедура СопоставленныеИсточник(Команда)
	
	Элементы.СопоставленныеИсточник.Пометка=НЕ Элементы.СопоставленныеИсточник.Пометка;
	
	Если Элементы.НесопоставленныеИсточник.Пометка Тогда
		Элементы.НесопоставленныеИсточник.Пометка=Ложь;
	КонецЕсли;
	
	Если Элементы.СопоставленныеИсточник.Пометка Тогда
		
		СтруктураОтбор=Новый ФиксированнаяСтруктура("Сопоставлено",Истина);
		УстановитьОтборИсточник(СтруктураОтбор);
		
	Иначе
		
		УстановитьОтборИсточник(Неопределено);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НесопоставленныеИсточник(Команда)
	
	Элементы.НесопоставленныеИсточник.Пометка=НЕ Элементы.НесопоставленныеИсточник.Пометка;
	
	Если Элементы.СопоставленныеИсточник.Пометка Тогда
		Элементы.СопоставленныеИсточник.Пометка=Ложь;
	КонецЕсли;
	
	Если Элементы.НесопоставленныеИсточник.Пометка Тогда
		
		СтруктураОтбор=Новый ФиксированнаяСтруктура("Сопоставлено",Ложь);
		УстановитьОтборИсточник(СтруктураОтбор);
		
	Иначе
		
		УстановитьОтборИсточник(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПриемник(ОтборСтрок)
	
	Элементы.ТаблицаСчетовПриемник.ОтборСтрок=ОтборСтрок;
	
КонецПроцедуры // ОтобратьПроводки()

&НаКлиенте
Процедура СопоставленныеПриемник(Команда)
	
	Элементы.СопоставленныеПриемник.Пометка=НЕ Элементы.СопоставленныеПриемник.Пометка;
	
	Если Элементы.НесопоставленныеПриемник.Пометка Тогда
		Элементы.НесопоставленныеПриемник.Пометка=Ложь;
	КонецЕсли;
	
	УстановитьОтборПриемник(ПолучитьОтборыПриемник());
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОтборыПриемник(СчетИсточник=Неопределено)
	
	СтруктураОтборов=Новый Структура;
		
	Если Элементы.СопоставленныеПриемник.Пометка Тогда
		
		СтруктураОтборов.Вставить("Сопоставлено",Истина);
		
	КонецЕсли;
	
	Если Элементы.НесопоставленныеПриемник.Пометка Тогда
		
		СтруктураОтборов.Вставить("Сопоставлено",Ложь);
		
	КонецЕсли;
	
	Если Элементы.НесопоставленныеПриемник.Пометка Тогда
		
		СтруктураОтборов.Вставить("Сопоставлено",Ложь);
		
	КонецЕсли;
	
	Если Элементы.ОтборПоТекущейКолонкеПриемник.Пометка И (НЕ Элементы.ТаблицаСчетовПриемник.ТекущиеДанные=Неопределено) Тогда
		
		ИмяКолонки=СтрЗаменить(Элементы.ТаблицаСчетовПриемник.ТекущийЭлемент.Имя,"ТаблицаСчетовПриемник","");
		ИмяКолонки=СтрЗаменить(ИмяКолонки,"Инв","");
	
		СтруктураОтборов.Вставить(ИмяКолонки,Элементы.ТаблицаСчетовПриемник.ТекущиеДанные[ИмяКолонки]);
		
	КонецЕсли;
	
	Если Не СчетИсточник=Неопределено Тогда
		
		СтруктураОтборов.Вставить("СчетИсточник",СчетИсточник);
		
	КонецЕсли;
	
	Если СтруктураОтборов.Количество()>0 Тогда
		
		Возврат Новый ФиксированнаяСтруктура(СтруктураОтборов);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
КонецФункции //

&НаКлиенте
Функция ПолучитьОтборыИсточник()
	
	СтруктураОтборов=Новый Структура;
		
	Если Элементы.СопоставленныеИсточник.Пометка Тогда
		
		СтруктураОтборов.Вставить("Сопоставлено",Истина);
		
	КонецЕсли;
	
	Если Элементы.НесопоставленныеИсточник.Пометка Тогда
		
		СтруктураОтборов.Вставить("Сопоставлено",Ложь);
		
	КонецЕсли;
	
	Если Элементы.НесопоставленныеИсточник.Пометка Тогда
		
		СтруктураОтборов.Вставить("Сопоставлено",Ложь);
		
	КонецЕсли;
	
	Если Элементы.ОтборПоТекущейКолонкеИсточник.Пометка И (НЕ Элементы.ТаблицаСчетовИсточник.ТекущиеДанные=Неопределено) Тогда
		
		ИмяКолонки=СтрЗаменить(Элементы.ТаблицаСчетовИсточник.ТекущийЭлемент.Имя,"ТаблицаСчетовИсточник","");
		
		СтруктураОтборов.Вставить(ИмяКолонки,Элементы.ТаблицаСчетовИсточник.ТекущиеДанные[ИмяКолонки]);
		
	КонецЕсли;
	
	Если СтруктураОтборов.Количество()>0 Тогда
		
		Возврат Новый ФиксированнаяСтруктура(СтруктураОтборов);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
КонецФункции //

&НаКлиенте
Процедура НесопоставленныеПриемник(Команда)
	
	Элементы.НесопоставленныеПриемник.Пометка=НЕ Элементы.НесопоставленныеПриемник.Пометка;
	
	Если Элементы.СопоставленныеПриемник.Пометка Тогда
		Элементы.СопоставленныеПриемник.Пометка=Ложь;
	КонецЕсли;
	
	УстановитьОтборПриемник(ПолучитьОтборыПриемник());
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовПриемникПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		
		Если ЗначениеЗаполнено(Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.СчетИсточник)
			И ЗначениеЗаполнено(Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.СчетПриемник) Тогда
			
			Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.Сопоставлено		= Истина;
			Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.НастройкаСохранена	= Ложь;
						
			МассивИсточник=ТаблицаСчетовИсточник.НайтиСтроки(Новый Структура("СчетИсточник",Элементы.ТаблицаСчетовПриемник.ТекущиеДанные[?(ИнвертироватьТаблицы,"СчетПриемник","СчетИсточник")]));
			
			МассивИсточник[0].Сопоставлено=Истина;
			
		КонецЕсли;
		
		Модифицированность=Истина;
		
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовПриемникПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ=Истина;
	ТекущиеДанные=Элементы.ТаблицаСчетовПриемник.ТекущиеДанные;

	Если НЕ ТекущиеДанные=Неопределено Тогда
		
		ИндексСтроки=ТаблицаСчетовПриемник.Индекс(ТекущиеДанные);
		НоваяСтрока=ТаблицаСчетовПриемник.Вставить(ИндексСтроки+1);
		
		Если Копирование Тогда
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущиеДанные,,"КоррСчетИсточник,Ссылка,ОпорныйСчетНаименование,ИдентификаторСоответствия,НастройкиДт,ОтборПодробно,СоответствиеПодробно");
			
			НоваяСтрока.ИдентификаторСоответствия=ОпределитьИдентификаторСоответствия();
			
		Иначе
			
			Если ИнвертироватьТаблицы Тогда
				
				НоваяСтрока.СчетИсточник=ТекущиеДанные.СчетИсточник;
				
			Иначе
				
				НоваяСтрока.СчетПриемник=ТекущиеДанные.СчетПриемник;
				
			КонецЕсли;
			
			НоваяСтрока.ИдентификаторСоответствия=ОпределитьИдентификаторСоответствия();
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСчетовПриемникСчетИсточникПриИзменении(Элемент)
	
	ДанныеСоответствия=Элементы.ТаблицаСчетовПриемник.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ДанныеСоответствия.СчетИсточник) Тогда
		
		СтрокаСчет=ТаблицаСчетовИсточник.НайтиСтроки(Новый Структура("СчетИсточник",ДанныеСоответствия.СчетИсточник));
			
		ДанныеСоответствия.ИспользованиеДт		= Истина;
		ДанныеСоответствия.ИспользованиеКт		= Истина;
		ДанныеСоответствия.ТранслироватьСальдо	= Истина;
		ДанныеСоответствия.ТранслироватьОбороты	= Истина;
		
	КонецЕсли;
	
	ДанныеСоответствия.Ссылка=ПолучитьНастройкуСоответствия(ШаблонТрансляции,ДанныеСоответствия.СчетИсточник,ДанныеСоответствия.КоррСчетИсточник,ДанныеСоответствия.СчетПриемник,ДанныеСоответствия.ИдентификаторСоответствия);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастройкуСоответствия(ШаблонТрансляции,СчетИсточник,КоррСчетИсточник,СчетПриемник,ИдентификаторСоответствия)
	
	Возврат Справочники.СоответствияСчетовДляТрансляции.ВернутьНастройкуСоответствия(ШаблонТрансляции,СчетИсточник,КоррСчетИсточник,СчетПриемник,ИдентификаторСоответствия);	
	
КонецФункции // ПолучитьНастройкуСоответствия() 

&НаКлиенте
Процедура УдалитьДанныеСоответствия(СчетИсточник,СчетПриемник)			
					
	МассивИсточник=ТаблицаСчетовИсточник.НайтиСтроки(Новый Структура("СчетИсточник",?(ИнвертироватьТаблицы,СчетПриемник,СчетИсточник)));
	
	Если МассивИсточник.Количество()>0 Тогда
		
		ОпределитьКоличествоСопоставленных(МассивИсточник[0]);
		
	КонецЕсли;
	
КонецПроцедуры // УдалитьДанныеСоответствия() 

&НаКлиенте
Процедура ТаблицаСчетовПриемникПередУдалением(Элемент, Отказ)
	
	СчетИсточник=Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.СчетИсточник;
	СчетПриемник=Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.СчетПриемник;
	
	МассивСтрок=ТаблицаСчетовПриемник.НайтиСтроки(Новый Структура("СчетПриемник",Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.СчетПриемник));
		
	Если МассивСтрок.Количество()=1 Тогда
		
		Отказ=Истина;
		
		Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.ИспользованиеДт		= Ложь;
		Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.ИспользованиеКт		= Ложь;
		Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.ТранслироватьСальдо	= Ложь;
		Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.ТранслироватьОбороты	= Ложь;
		Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.СчетИсточник			= "";
		Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.КоррСчетИсточник		= "";
		Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.Сопоставлено			= Ложь;
		
	КонецЕсли;
	
	УдалитьДанныеСоответствия(СчетИсточник,СчетПриемник);

КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		СтандартнаяОбработка=Ложь;
		
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные были изменены. Сохранить?'"), РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Да);
		
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Да Тогда
        
        СохранитьНастройкиСоответствий();
        Модифицированность=Ложь;
        
    Иначе
        
        Модифицированность=Ложь;
        
    КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ТаблицаСчетовПриемникКоррСчетИсточникПриИзменении(Элемент)
	
	ДанныеСоответствия=Элементы.ТаблицаСчетовПриемник.ТекущиеДанные;
	ДанныеСоответствия.Ссылка=ПолучитьНастройкуСоответствия(ШаблонТрансляции,ДанныеСоответствия.СчетИсточник,ДанныеСоответствия.КоррСчетИсточник,ДанныеСоответствия.СчетПриемник,ДанныеСоответствия.ИдентификаторСоответствия);
	
КонецПроцедуры


&НаКлиенте
Процедура СчетПриемникПриИзменении(Элемент)
	
	ДанныеСоответствия=Элементы.ТаблицаСчетовПриемник.ТекущиеДанные;
	ДанныеСоответствия.Ссылка=ПолучитьНастройкуСоответствия(ШаблонТрансляции,ДанныеСоответствия.СчетИсточник,ДанныеСоответствия.КоррСчетИсточник,ДанныеСоответствия.СчетПриемник,ДанныеСоответствия.ИдентификаторСоответствия);
		
КонецПроцедуры


&НаКлиенте
Процедура ОтборПоТекущейКолонкеИсточник(Команда)
	
	Элементы.ОтборПоТекущейКолонкеИсточник.Пометка=НЕ Элементы.ОтборПоТекущейКолонкеИсточник.Пометка;
	УстановитьОтборИсточник(ПолучитьОтборыИсточник());
		
КонецПроцедуры


&НаКлиенте
Процедура ОтборПоТекущейКолонкеПриемник(Команда)
	
	Элементы.ОтборПоТекущейКолонкеПриемник.Пометка=НЕ Элементы.ОтборПоТекущейКолонкеПриемник.Пометка;
	
	УстановитьОтборПриемник(ПолучитьОтборыПриемник());
	
КонецПроцедуры


&НаКлиенте
Процедура ОпорныйПланСчетовСоответствияПриИзменении(Элемент)
	
	ОбновитьТаблицыФормы();		
		
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаСчетовПриемникСчетИсточникИнвПриИзменении(Элемент)
	
	ДанныеСоответствия=Элементы.ТаблицаСчетовПриемник.ТекущиеДанные;
	ДанныеСоответствия.Ссылка=ПолучитьНастройкуСоответствия(ШаблонТрансляции,ДанныеСоответствия.СчетИсточник,ДанныеСоответствия.КоррСчетИсточник,ДанныеСоответствия.СчетПриемник,ДанныеСоответствия.ИдентификаторСоответствия);
	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаСчетовПриемникСчетПриемникИнвПриИзменении(Элемент)
	
	ДанныеСоответствия=Элементы.ТаблицаСчетовПриемник.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ДанныеСоответствия.СчетИсточник) Тогда
		
		ДанныеСоответствия.ИспользованиеДт		= Истина;
		ДанныеСоответствия.ИспользованиеКт		= Истина;
		ДанныеСоответствия.ТранслироватьСальдо	= Истина;
		ДанныеСоответствия.ТранслироватьОбороты	= Истина;
		
	КонецЕсли;
		
	ДанныеСоответствия=Элементы.ТаблицаСчетовПриемник.ТекущиеДанные;
	ДанныеСоответствия.Ссылка=ПолучитьНастройкуСоответствия(ШаблонТрансляции,ДанныеСоответствия.СчетИсточник,ДанныеСоответствия.КоррСчетИсточник,ДанныеСоответствия.СчетПриемник,ДанныеСоответствия.ИдентификаторСоответствия);
	
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ТекущиеДанные=Элементы.ТаблицаСчетовПриемник.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИндексСтроки=ТаблицаСчетовПриемник.Индекс(ТекущиеДанные);
				
	НоваяСтрока=ТаблицаСчетовПриемник.Вставить(ИндексСтроки+1);

	Если ИнвертироватьТаблицы Тогда
		
		НоваяСтрока.СчетИсточник=ТекущиеДанные.СчетИсточник;
		
	Иначе
		
		НоваяСтрока.СчетПриемник=ТекущиеДанные.СчетПриемник;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура КопироватьСтроку(Команда)
	
	ТекущиеДанные=Элементы.ТаблицаСчетовПриемник.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИндексСтроки=ТаблицаСчетовПриемник.Индекс(ТекущиеДанные);
				
	НоваяСтрока=ТаблицаСчетовПриемник.Вставить(ИндексСтроки+1);
	ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущиеДанные,,"КоррСчетИсточник,Ссылка,ОпорныйСчетНаименование");	
	
КонецПроцедуры


&НаКлиенте
Процедура ВыводитьНаименование(Команда)
	
	Элементы.ТаблицаСчетовПриемникВыводитьНаименование.Пометка=НЕ Элементы.ТаблицаСчетовПриемникВыводитьНаименование.Пометка;	
	Элементы.ТаблицаСчетовПриемникОпорныйСчетНаименование.Видимость=Элементы.ТаблицаСчетовПриемникВыводитьНаименование.Пометка;
		
КонецПроцедуры


&НаКлиенте
Процедура ПодробнаяИнформация(Команда)
	
	Элементы.ПодробнаяИнформация.Пометка=НЕ Элементы.ПодробнаяИнформация.Пометка;
	ОбновитьВыводПодробнойИнформации();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВыводПодробнойИнформации()
	
	Если Элементы.ПодробнаяИнформация.Пометка Тогда
		
	//	Если НЕ ПодробнаяИнформацияЗаполнена Тогда
			
			ЗаполнитьПодробнуюИнформацию();
			
	//	КонецЕсли;
		
		Элементы.ОтборПодробно.Видимость		= Истина;
		Элементы.СоответствиеПодробно.Видимость	= Истина;
		Элементы.НастройкиДт.Видимость=Ложь;
		
	Иначе
		
		Элементы.ОтборПодробно.Видимость		= Ложь;
		Элементы.СоответствиеПодробно.Видимость	= Ложь;
		Элементы.НастройкиДт.Видимость=Истина;
		
	КонецЕсли;
		
КонецПроцедуры // ОбновитьВыводПодробнойИнформации()

&НаСервере
Процедура ЗаполнитьПодробнуюИнформацию()
		
	Для Каждого Строка ИЗ ТаблицаСчетовПриемник Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.ИсточникСсылка) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Строка,ПолучитьПодробнуюИнформацию(Строка.ИсточникСсылка));
		
	КонецЦикла;
	
	ПодробнаяИнформацияЗаполнена=Истина;
			
КонецПроцедуры // ЗаполнитьПодробнуюИнформацию()

&НаСервере
Функция ПолучитьПодробнуюИнформацию(ИсточникСсылка)
	
	Возврат Обработки.КорректировкиЗначенийПоказателей.ПолучитьПодробнуюИнформацию(ИсточникСсылка,РегистрБухгалтерииИсточник);	
	
КонецФункции // ПолучитьПодробнуюИнформацию()

&НаКлиенте
Процедура ОтборПоИсточнику(Команда)
	
	Элементы.ОтборПоИсточнику.Пометка=Не Элементы.ОтборПоИсточнику.Пометка;
	
	Если НЕ Элементы.ОтборПоИсточнику.Пометка Тогда
		
		УстановитьОтборПриемник(ПолучитьОтборыПриемник());
		
	Иначе
		
		Если (НЕ Элементы.ТаблицаСчетовИсточник.ТекущиеДанные=Неопределено)
			И Элементы.ТаблицаСчетовИсточник.ТекущиеДанные.Сопоставлено Тогда
			
			УстановитьОтборПриемник(ПолучитьОтборыПриемник(Элементы.ТаблицаСчетовИсточник.ТекущиеДанные.СчетИсточник));
			
		КонецЕсли;
		
	КонецЕсли;	  
	  	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(СчетИсточник) Тогда
		
		СтрокаСчет=ТаблицаСчетовИсточник.НайтиСтроки(Новый Структура("СчетИсточник",СчетИсточник));
		
		Элементы.ТаблицаСчетовИсточник.ТекущаяСтрока=СтрокаСчет[0].ПолучитьИдентификатор();
		
		Элементы.ОтборПоТекущейКолонкеИсточник.Пометка=Истина;
		УстановитьОтборИсточник(ПолучитьОтборыИсточник());
				
		Элементы.ПодробнаяИнформация.Пометка=Истина;
		ОбновитьВыводПодробнойИнформации();
		
		Элементы.ОтборПоИсточнику.Пометка=Истина;
		УстановитьОтборПриемник(ПолучитьОтборыПриемник(СтрокаСчет[0].СчетИсточник));
		
	КонецЕсли;
	
КонецПроцедуры


	
	




