#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
		
	УстановитьУсловноеОформление();
	
	Дата = КонецГода(ТекущаяДатаСеанса());
	
	ПараметрыВыбораСтатейИАналитик = Обработки.ГрупповоеИзменениеЭлементовАмортизации.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ПараметрыНастройки = Обработки.ГрупповоеИзменениеЭлементовАмортизации.ПараметрыНастройкиСчетовУчета();
	НастройкаСчетовУчетаСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыНастройки);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Дата = КонецМесяца(Дата);
	ЗаполнитьТекущиеЗначенияПараметров();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтраженияВРеглУчетеНажатие(Элемент, СтандартнаяОбработка)
	
	НастройкаСчетовУчетаКлиент.ПриНажатии(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтраженияДоходовВРеглУчетеНажатие(Элемент, СтандартнаяОбработка)
	
	НастройкаСчетовУчетаКлиент.ПриНажатии(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБУПриИзменении(Элемент)
	
	Элементы.УточнениеПериода.Доступность = ОтражатьВБУ;
	Если Не ОтражатьВБУ Тогда
		УточнениеПериода = Ложь;
	КонецЕсли;
	ЗаполнитьТекущиеЗначенияПараметров();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВУУПриИзменении(Элемент)
	
	ЗаполнитьТекущиеЗначенияПараметров();
	
КонецПроцедуры

&НаКлиенте
Процедура УточнениеПериодаПриИзменении(Элемент)
	
	ЗаполнитьТекущиеЗначенияПараметров();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

&НаКлиенте
Процедура ОсновныеСредстваОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВнеоборотныеАктивыКлиентСервер.ОбработкаВыбораЭлемента(Объект.ОсновныеСредства, "ОсновноеСредство", ВыбранноеЗначение).Количество() <> 0 Тогда
		ЗаполнитьТекущиеЗначенияПараметров(Ложь, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваОсновноеСредствоПриИзменении(Элемент)
	
	ЗаполнитьТекущиеЗначенияПараметров(Ложь, Элементы.ОсновныеСредства.ТекущиеДанные.ОсновноеСредство);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "Обработка.ГрупповоеИзменениеЭлементовАмортизации.ОсновныеСредства";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка из файла';
										|en = 'Import from file'");
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ОСДобавлены = Ложь;
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
	
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ОсновноеСредство) Тогда 
			Продолжить;
		КонецЕсли;
	
		НоваяСтрокаТовары = Объект.ОсновныеСредства.Добавить();
		НоваяСтрокаТовары.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
		НоваяСтрокаТовары.СрокИспользованияБУ = СтрокаТаблицы.СрокИспользованияБУ;
		НоваяСтрокаТовары.СрокИспользованияУУ = СтрокаТаблицы.СрокИспользованияУУ;
		НоваяСтрокаТовары.ОбъемНаработки = СтрокаТаблицы.ОбъемНаработки;
		НоваяСтрокаТовары.ЛиквидационнаяСтоимостьРегл = СтрокаТаблицы.ЛиквидационнаяСтоимостьРегл;
		НоваяСтрокаТовары.ЛиквидационнаяСтоимость = СтрокаТаблицы.ЛиквидационнаяСтоимость;
		
		ОСДобавлены = Истина;
	КонецЦикла;
	
	Если ОСДобавлены Тогда
		Модифицированность = Истина;
		ЗаполнитьТекущиеЗначенияПараметров();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СоздатьДокументыНаСервере()
	
	НастройкаСчетовУчетаСервер.ЗаписатьНастройкиСчетовУчетаФормы(ЭтотОбъект);
	
	КоличествоСозданныхДокументов = 0;
	НачатьТранзакцию();
	Попытка
		Для Каждого Строка Из Объект.ОсновныеСредства Цикл
			
			ОтражатьВБУДляСтроки = (Строка.СостояниеБУ <> Перечисления.СостоянияОС.СнятоСУчета
										И Строка.СостояниеБУ <> Перечисления.СостоянияОС.НеПринятоКУчету
										И Строка.СостояниеБУ <> Перечисления.СостоянияОС.ЗаключенДоговорАренды
										И Строка.СостояниеБУ <> Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету
										И ОтражатьВБУ);
			ОтражатьВУУДляСтроки = (Строка.СостояниеУУ <> Перечисления.СостоянияОС.СнятоСУчета
										И Строка.СостояниеУУ <> Перечисления.СостоянияОС.НеПринятоКУчету
										И Строка.СостояниеУУ <> Перечисления.СостоянияОС.ЗаключенДоговорАренды
										И Строка.СостояниеУУ <> Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету
										И ОтражатьВУУ);

			Если ЗначениеЗаполнено(Строка.ДокументКорректировкиСтоимости)
				Или Строка.Организация <> Объект.Организация
				Или (Не ОтражатьВБУДляСтроки И Не ОтражатьВУУДляСтроки)
				Или Не (ЗначениеЗаполнено(Строка.СрокИспользованияБУ) Или
					ЗначениеЗаполнено(Строка.СрокИспользованияБУ) Или
					ЗначениеЗаполнено(Строка.СрокИспользованияУУ) Или
					ЗначениеЗаполнено(Строка.ОбъемНаработки) Или
					ЗначениеЗаполнено(Строка.ЛиквидационнаяСтоимостьРегл) Или
					ЗначениеЗаполнено(Строка.ЛиквидационнаяСтоимость)) Тогда
				Продолжить;
			Иначе
				НачатьТранзакцию();
				
				Попытка
					// Cоздаем документ ИзменениеПараметровОС2_4
					НовыйДокументИзменениеПараметровОС = Документы.ИзменениеПараметровОС2_4.СоздатьДокумент();
					НовыйДокументИзменениеПараметровОС.Дата = КонецМесяца(Дата);
					НовыйДокументИзменениеПараметровОС.Организация = Объект.Организация;
					НовыйДокументИзменениеПараметровОС.ОтражатьВБУ = ОтражатьВБУДляСтроки;
					НовыйДокументИзменениеПараметровОС.СобытиеОС = Событие;
					НовыйДокументИзменениеПараметровОС.ОтражатьВУпрУчете = ОтражатьВУУДляСтроки;
					НовыйДокументИзменениеПараметровОС.ОтражатьВРеглУчете = ОтражатьВБУДляСтроки;
					НовыйДокументИзменениеПараметровОС.Ответственный = Пользователи.ТекущийПользователь();
					НовыйДокументИзменениеПараметровОС.Комментарий =
						НСтр("ru = 'Документ сформирован автоматически при групповом изменении элементов амортизации';
							|en = 'The document is generated automatically when editing depreciation items in bulk'");
					
					Стр = НовыйДокументИзменениеПараметровОС.ОС.Добавить();
					Стр.ОсновноеСредство = Строка.ОсновноеСредство;
					
					Если ЗначениеЗаполнено(Строка.СрокИспользованияБУ) Тогда
						НовыйДокументИзменениеПараметровОС.СрокИспользованияБУФлаг = Истина;
						НовыйДокументИзменениеПараметровОС.СрокИспользованияБУ = Строка.СрокИспользованияБУ;
						НовыйДокументИзменениеПараметровОС.УказанОстаточныйСрокБУ = Истина;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Строка.СрокИспользованияУУ) Тогда
						НовыйДокументИзменениеПараметровОС.СрокИспользованияУУФлаг = Истина;
						НовыйДокументИзменениеПараметровОС.СрокИспользованияУУ = Строка.СрокИспользованияУУ;
						НовыйДокументИзменениеПараметровОС.УказанОстаточныйСрокУУ = Истина;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Строка.ОбъемНаработки) Тогда
						НовыйДокументИзменениеПараметровОС.ОбъемНаработкиФлаг = Истина;
						НовыйДокументИзменениеПараметровОС.ОбъемНаработки = Строка.ОбъемНаработки;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Строка.ЛиквидационнаяСтоимостьРегл) Тогда
						НовыйДокументИзменениеПараметровОС.ЛиквидационнаяСтоимостьРеглФлаг = Истина;
						НовыйДокументИзменениеПараметровОС.ЛиквидационнаяСтоимостьРегл = Строка.ЛиквидационнаяСтоимостьРегл;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Строка.ЛиквидационнаяСтоимость) Тогда
						НовыйДокументИзменениеПараметровОС.ЛиквидационнаяСтоимостьФлаг = Истина;
						НовыйДокументИзменениеПараметровОС.ЛиквидационнаяСтоимость = Строка.ЛиквидационнаяСтоимость;
					КонецЕсли;
					
					НовыйДокументИзменениеПараметровОС.Записать(РежимЗаписиДокумента.Проведение);
					
					// Cоздаем документ КорректировкаСтоимостиИАмортизацииОС
					НовыйДокументКорректировкаСтоимости = Документы.КорректировкаСтоимостиИАмортизацииОС.СоздатьДокумент();
					НовыйДокументКорректировкаСтоимости.Дата = КонецМесяца(Дата);
					НовыйДокументКорректировкаСтоимости.Организация = Объект.Организация;
					НовыйДокументКорректировкаСтоимости.ОтражатьВРеглУчете = НовыйДокументИзменениеПараметровОС.ОтражатьВРеглУчете;
					НовыйДокументКорректировкаСтоимости.ОтражатьВУпрУчете = НовыйДокументИзменениеПараметровОС.ОтражатьВУпрУчете;
					НовыйДокументКорректировкаСтоимости.Комментарий =
						НСтр("ru = 'Документ сформирован автоматически при групповом изменении элементов амортизации';
							|en = 'The document is generated automatically when editing depreciation items in bulk'");
					НовыйДокументКорректировкаСтоимости.Подразделение = Строка.Подразделение;
					НовыйДокументКорректировкаСтоимости.СобытиеОС = Событие;
					НовыйДокументКорректировкаСтоимости.СтатьяДоходов = Объект.СтатьяДоходов;
					НовыйДокументКорректировкаСтоимости.АналитикаДоходов = Объект.АналитикаДоходов;
					НовыйДокументКорректировкаСтоимости.АналитикаАктивовПассивовДоходов = Объект.АналитикаАктивовПассивовДоходы;
					НовыйДокументКорректировкаСтоимости.СтатьяРасходов = Объект.СтатьяРасходов;
					НовыйДокументКорректировкаСтоимости.АналитикаРасходов = Объект.АналитикаРасходов;
					НовыйДокументКорректировкаСтоимости.АналитикаАктивовПассивовРасходов = Объект.АналитикаАктивовПассивов;
					НовыйДокументКорректировкаСтоимости.НастройкаСчетовУчетаРасходов = Объект.НастройкаСчетовУчета;
					НовыйДокументКорректировкаСтоимости.НастройкаСчетовУчетаДоходов = Объект.НастройкаСчетовУчетаДоходы;
					НовыйДокументКорректировкаСтоимости.УточнениеПериода = УточнениеПериода;
					НовыйДокументКорректировкаСтоимости.Заполнить(НовыйДокументИзменениеПараметровОС.Ссылка);
					
					НовыйДокументКорректировкаСтоимости.Записать(РежимЗаписиДокумента.Проведение);
					
					ЗафиксироватьТранзакцию();
					КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + 1;
				Исключение
					ОтменитьТранзакцию();
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось создать документы по причине: %1';
													|en = 'Cannot create documents due to: %1'"),
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(
						ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
						УровеньЖурналаРегистрации.Предупреждение, 
						, 
						, 
						ТекстСообщения);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
	Возврат КоличествоСозданныхДокументов;
	
КонецФункции

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	
	ОчиститьСообщения();
	Если Не ЗначениеЗаполнено(Объект.Организация)
		Или Не ЗначениеЗаполнено(Объект.СтатьяДоходов)
		Или Не ЗначениеЗаполнено(Объект.СтатьяРасходов)
		Или Не ЗначениеЗаполнено(Дата) Тогда
			ТекстСообщения = НСтр("ru = 'Заполните обязательные реквизиты';
									|en = 'Fill in required attributes'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
	ИначеЕсли Не ОтражатьВБУ И Не ОтражатьВУУ Тогда
		ТекстСообщения = НСтр("ru = 'Заполните признак отражения в учете';
								|en = 'Fill in the flag of recording in accounting'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	Иначе
		КоличествоСозданныхДокументов = СоздатьДокументыНаСервере();
		ШаблонСообщения = НСтр("ru = 'Создано %1 документов';
								|en = 'Created %1 documents'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, КоличествоСозданныхДокументов);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ЗаполнитьТекущиеЗначенияПараметров();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	ПараметрыПодбора = ВнеоборотныеАктивыКлиентСервер.ПараметрыПодбора(Элементы.ОсновныеСредстваОсновноеСредство, ЭтотОбъект);
	ПараметрыОтбор = Новый Структура;
	ПараметрыОтбор.Вставить("БУОрганизация", Объект.Организация);
	ПараметрыПодбора.Вставить("Отбор", ПараметрыОтбор);
	ПараметрыПодбора.Вставить("ДатаСведений", Дата);
	
	ОткрытьФорму("Справочник.ОбъектыЭксплуатации.ФормаВыбора", 
					ПараметрыПодбора, Элементы.ОсновныеСредства,,,,, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваНомерСтроки.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваОсновноеСредство.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваИнвентарныйНомер.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваОрганизация.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваПодразделение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваСостояниеБУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваСостояниеУУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваСрокИспользованияБУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваСрокИспользованияУУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваОбъемНаработки.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваЛиквидационнаяСтоимостьРегл.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваЛиквидационнаяСтоимость.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваДокументКорректировкиСтоимости.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОсновныеСредства.ДокументКорректировкиСтоимости");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ДобавленныйРеквизитФон);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваНомерСтроки.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваОсновноеСредство.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваИнвентарныйНомер.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваОрганизация.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваПодразделение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваСостояниеБУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваСостояниеУУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваСрокИспользованияБУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваСрокИспользованияУУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваОбъемНаработки.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваЛиквидационнаяСтоимостьРегл.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваЛиквидационнаяСтоимость.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваДокументКорректировкиСтоимости.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОсновныеСредства.ДокументКорректировкиСтоимости");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ПравоСозданияФон);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекущиеЗначенияПараметров(ТолькоДополнительнаяИнформация = Истина, ВыбранноеОсновноеСредство = Неопределено)
	
	//++Локализация
	
	Если Объект.ОсновныеСредства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗапросов = Новый Массив;
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство,
	|	&Организация КАК Организация,
	|	ИСТИНА КАК АмортизацияНачисляетсяПоСтандартамМУ
	|ПОМЕСТИТЬ СписокОбъектовУчета
	|ИЗ
	|	&ОсновныеСредства КАК ОсновныеСредства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	"""" КАК ОсновноеСредство,
	|	"""" КАК Организация
	|ПОМЕСТИТЬ СписокОбъектовУчета_Доначисление_Все";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаПараметрыРасчетаАмортизации(
		"ПараметрыАмортизацииОСУУ", "", "ОсновноеСредство", СписокЗапросов);
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаПараметрыРасчетаАмортизации(
		"ПараметрыАмортизацииОСБУ", "", "ОсновноеСредство", СписокЗапросов);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОбъектыЭксплуатации.Ссылка КАК ОсновноеСредство,
	|	ОбъектыЭксплуатации.Ссылка.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ЕСТЬNULL(ПорядокУчетаОССрезПоследних.ГруппаФинансовогоУчета, НЕОПРЕДЕЛЕНО) КАК ГруппаФинансовогоУчета,
	|	ЕСТЬNULL(ПорядокУчетаОССрезПоследних.НаправлениеДеятельности, НЕОПРЕДЕЛЕНО) КАК НаправлениеДеятельности,
	|	ЕСТЬNULL(ПорядокУчетаОССрезПоследних.ПоказательНаработки, НЕОПРЕДЕЛЕНО) КАК ПоказательНаработки,
	|	ЕСТЬNULL(ПорядокУчетаОССрезПоследних.ОбъемНаработки, НЕОПРЕДЕЛЕНО) КАК ОбъемНаработки,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСУУСрезПоследних.СрокИспользования, 0) КАК СрокИспользованияУУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСУУСрезПоследних.СрокИспользованияДляВычисленияАмортизации, 0) КАК СрокИспользованияДляВычисленияАмортизацииУУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСУУСрезПоследних.КоэффициентУскорения, 0) КАК КоэффициентУскоренияУУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСУУСрезПоследних.МетодНачисленияАмортизации, НЕОПРЕДЕЛЕНО) КАК МетодНачисленияАмортизацииУУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСУУСрезПоследних.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимость,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСУУСрезПоследних.ЛиквидационнаяСтоимостьРегл, 0) КАК ЛиквидационнаяСтоимостьРегл,
	|	ЕСТЬNULL(ПорядокУчетаОСУУСрезПоследних.НачислятьАмортизациюУУ, ЛОЖЬ) КАК НачислятьАмортизациюУУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияОССрезПоследних.ДатаВводаВЭксплуатациюУУ, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК ПринятКУчетуУпр,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУСрезПоследних.СрокПолезногоИспользованияБУ, 0) КАК СрокИспользованияБУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУСрезПоследних.СрокПолезногоИспользованияНУ, 0) КАК СрокИспользованияНУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУСрезПоследних.СрокИспользованияДляВычисленияАмортизации, 0) КАК СрокИспользованияДляВычисленияАмортизацииБУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУСрезПоследних.КоэффициентАмортизацииБУ, 0) КАК КоэффициентАмортизацииБУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУСрезПоследних.КоэффициентУскорения, 0) КАК КоэффициентУскоренияБУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУСрезПоследних.ГрафикАмортизации, НЕОПРЕДЕЛЕНО) КАК ГрафикАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУСрезПоследних.СпециальныйКоэффициент, 0) КАК СпециальныйКоэффициент,
	|	ЕСТЬNULL(ПорядокУчетаОСБУСрезПоследних.НачислятьАмортизациюБУ, ЛОЖЬ) КАК НачислятьАмортизациюБУ,
	|	ЕСТЬNULL(ПорядокУчетаОСБУСрезПоследних.НачислятьАмортизациюНУ, ЛОЖЬ) КАК НачислятьАмортизациюНУ,
	|	ЕСТЬNULL(ПорядокУчетаОСБУСрезПоследних.АмортизационнаяГруппа, ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ПустаяСсылка)) КАК АмортизационнаяГруппа,
	|	ЕСТЬNULL(ПорядокУчетаОСБУСрезПоследних.НедвижимоеИмущество, ЛОЖЬ) КАК НедвижимоеИмущество,
	|	ЕСТЬNULL(ПервоначальныеСведенияОССрезПоследних.МетодНачисленияАмортизацииБУ, НЕОПРЕДЕЛЕНО) КАК МетодНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияОССрезПоследних.ДатаВводаВЭксплуатациюБУ, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК ПринятКУчетуРегл,
	|	ВЫБОР
	|		КОГДА ПорядокУчетаОСБУСрезПоследних.СостояниеБУ <> ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)
	|			ТОГДА ПорядокУчетаОСБУСрезПоследних.СостояниеБУ
	|		ИНАЧЕ ЕСТЬNULL(ПорядокУчетаОСБУСрезПоследних.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету))
	|	КОНЕЦ КАК СостояниеБУ,
	|	ЕСТЬNULL(ПорядокУчетаОСУУСрезПоследних.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) КАК СостояниеУУ,
	|	ЕСТЬNULL(МестонахождениеОС.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	ЕСТЬNULL(МестонахождениеОС.Местонахождение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение,
	|	КорректировкаСтоимостиИАмортизацииОСОС.Ссылка КАК ДокументКорректировкиСтоимости,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПараметрыАмортизацииОСУУ.ДатаПоследнегоИзменения, МЕСЯЦ, 1), МЕСЯЦ), &Период, МЕСЯЦ) КАК ЧИСЛО(20,8)),0) КАК КоличествоМесяцевПослеПринятияКУчетуДоДатыВОбработкеУУ,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПараметрыАмортизацииОСБУ.ДатаПоследнегоИзменения, МЕСЯЦ, 1), МЕСЯЦ), &Период, МЕСЯЦ) КАК ЧИСЛО(20,8)),0) КАК КоличествоМесяцевПослеПринятияКУчетуДоДатыВОбработкеБУ
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСУУ.СрезПоследних(&Период, ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииОСУУСрезПоследних
	|		ПО (ПараметрыАмортизацииОСУУСрезПоследних.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС.СрезПоследних(&Период, ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОССрезПоследних
	|		ПО (ПорядокУчетаОССрезПоследних.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(&Период, ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОСУУСрезПоследних
	|		ПО (ПорядокУчетаОСУУСрезПоследних.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(, ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОССрезПоследних
	|		ПО (ПервоначальныеСведенияОССрезПоследних.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБУ.СрезПоследних(&Период, ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииОСБУСрезПоследних
	|		ПО (ПараметрыАмортизацииОСБУСрезПоследних.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(&Период, ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОСБУСрезПоследних
	|		ПО (ПорядокУчетаОСБУСрезПоследних.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС.СрезПоследних(&Период, ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОС
	|		ПО (МестонахождениеОС.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаСтоимостиИАмортизацииОС.ОС КАК КорректировкаСтоимостиИАмортизацииОСОС
	|		ПО (КорректировкаСтоимостиИАмортизацииОСОС.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|			И (КорректировкаСтоимостиИАмортизацииОСОС.Ссылка.Проведен)
	|			И (&ОтражатьВБУ = КорректировкаСтоимостиИАмортизацииОСОС.Ссылка.ОтражатьВРеглУчете)
	|			И (&ОтражатьВУУ = КорректировкаСтоимостиИАмортизацииОСОС.Ссылка.ОтражатьВУпрУчете)
	|			И (&УточнениеПериода = КорректировкаСтоимостиИАмортизацииОСОС.Ссылка.УточнениеПериода)
	|			И (&Период = КорректировкаСтоимостиИАмортизацииОСОС.Ссылка.Дата)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыАмортизацииОСУУ
	|		ПО (ПараметрыАмортизацииОСУУ.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыАмортизацииОСБУ
	|		ПО (ПараметрыАмортизацииОСБУ.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|ГДЕ
	|	ОбъектыЭксплуатации.Ссылка В(&СписокОС)";

	
	СписокЗапросов.Добавить(ТекстЗапроса);
	Запрос.Текст = СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	Запрос.УстановитьПараметр("ОсновныеСредства", Объект.ОсновныеСредства.Выгрузить());
	Запрос.УстановитьПараметр("Организация", Объект.Организация);	
	Если ВыбранноеОсновноеСредство = Неопределено Тогда
		Запрос.УстановитьПараметр("СписокОС", Объект.ОсновныеСредства.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство"));
	Иначе
		Запрос.УстановитьПараметр("СписокОС", ВыбранноеОсновноеСредство);
	КонецЕсли;
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса())));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса())));
	Запрос.УстановитьПараметр("НачалоПредыдущегоМесяца", НачалоМесяца(?(ЗначениеЗаполнено(Дата), НачалоМесяца(Дата)-1, НачалоМесяца(ТекущаяДатаСеанса())-1)));
	Запрос.УстановитьПараметр("КонецПредыдущегоМесяца", КонецМесяца(?(ЗначениеЗаполнено(Дата), НачалоМесяца(Дата)-1, НачалоМесяца(ТекущаяДатаСеанса())-1)));
	Запрос.УстановитьПараметр("КонецПозапрошлогоМесяца", КонецМесяца(?(ЗначениеЗаполнено(Дата), НачалоМесяца(НачалоМесяца(Дата)-1)-1, НачалоМесяца(НачалоМесяца(ТекущаяДатаСеанса())-1)-1)));
	Запрос.УстановитьПараметр("Период", КонецДня(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса())));
	Запрос.УстановитьПараметр("ОтражатьВБУ", ОтражатьВБУ);
	Запрос.УстановитьПараметр("ОтражатьВУУ", ОтражатьВУУ);
	Запрос.УстановитьПараметр("УточнениеПериода", УточнениеПериода);
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуОС2_4"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуУзловКомпонентовАмортизации"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуНМА2_4"));
	Запрос.УстановитьПараметр("ТипПринятиеКУчету", МассивТипов);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для каждого ДанныеСтроки Из Объект.ОсновныеСредства Цикл
		ТекущиеЗначения = Результат.Найти(ДанныеСтроки.ОсновноеСредство, "ОсновноеСредство");
		Если ТекущиеЗначения <> Неопределено Тогда
			Если ТолькоДополнительнаяИнформация Тогда
				ДанныеСтроки.ИнвентарныйНомер = ТекущиеЗначения.ИнвентарныйНомер;
				ДанныеСтроки.СостояниеБУ = ТекущиеЗначения.СостояниеБУ;
				ДанныеСтроки.СостояниеУУ = ТекущиеЗначения.СостояниеУУ;
				ДанныеСтроки.Организация = ТекущиеЗначения.Организация;
				ДанныеСтроки.Подразделение = ТекущиеЗначения.Подразделение;
				ДанныеСтроки.ДокументКорректировкиСтоимости = ТекущиеЗначения.ДокументКорректировкиСтоимости;
			Иначе
				ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеЗначения);
				Если ТекущиеЗначения.СрокИспользованияБУ - ТекущиеЗначения.КоличествоМесяцевПослеПринятияКУчетуДоДатыВОбработкеБУ > 0
					И (ТекущиеЗначения.СостояниеБУ = Перечисления.СостоянияОС.ПринятоКУчету
						Или ТекущиеЗначения.СостояниеБУ = Перечисления.СостоянияОС.ВАренде
						Или ТекущиеЗначения.СостояниеБУ = Перечисления.СостоянияОС.ПереданоВАренду) Тогда
							ДанныеСтроки.СрокИспользованияБУ = ТекущиеЗначения.СрокИспользованияБУ
												- ТекущиеЗначения.КоличествоМесяцевПослеПринятияКУчетуДоДатыВОбработкеБУ;
				Иначе
					ДанныеСтроки.СрокИспользованияБУ = 0;
				КонецЕсли;
				Если ТекущиеЗначения.СрокИспользованияУУ - ТекущиеЗначения.КоличествоМесяцевПослеПринятияКУчетуДоДатыВОбработкеУУ > 0
					И (ТекущиеЗначения.СостояниеУУ = Перечисления.СостоянияОС.ПринятоКУчету
						Или ТекущиеЗначения.СостояниеУУ = Перечисления.СостоянияОС.ВАренде
						Или ТекущиеЗначения.СостояниеУУ = Перечисления.СостоянияОС.ПереданоВАренду) Тогда
							ДанныеСтроки.СрокИспользованияУУ = ТекущиеЗначения.СрокИспользованияУУ
											- ТекущиеЗначения.КоличествоМесяцевПослеПринятияКУчетуДоДатыВОбработкеУУ;
				Иначе
					ДанныеСтроки.СрокИспользованияУУ = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//--Локализация
	
КонецПроцедуры
	
#КонецОбласти