
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ;
	ТипБДПриемник=Справочники.ТипыБазДанных.ТекущаяИБ;
	СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета;

	Если ЗначениеЗаполнено(Параметры.ШаблонПроводки) Тогда
		
		ШаблонПроводки=Параметры.ШаблонПроводки;
		ЗаполнитьПоШаблонуПроводки(ШаблонПроводки);
		
	ИначеЕсли Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		ШаблонПроводки=Параметры.Ключ;
		ЗаполнитьПоШаблонуПроводки(ШаблонПроводки);
		
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		ЗаполнитьПоШаблонуПроводки(Параметры.ЗначениеКопирования);
				
	Иначе
		
		ЗаполнитьПоИсходнымПараметрам();
			
	КонецЕсли;
		
	СформироватьЗаголовок();
	СформироватьСоответствиеГруппыУсловия();
				
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПравилоОбработки()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПравилаОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПравилаОбработки КАК ПравилаОбработки
	|ГДЕ
	|	ПравилаОбработки.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец",ШаблонКорректировки);
	
	Результат=Запрос.Выполнить().Выбрать();	
	
	Если Результат.Следующий() Тогда
		
		ПравилоОбработки=Результат.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьПравилоОбработки()

&НаСервере
Процедура ЗаполнитьПоШаблонуПроводки(ШаблонИсточник)
			
	ЗаполнитьПоШаблонуПроводкиПростой(ШаблонИсточник);
	Элементы.ГруппаНастройка.ТекущаяСтраница=Элементы.ГруппаПростаяНастройка;
			
КонецПроцедуры // ЗаполнитьПоШаблонуПроводки() 

&НаСервере
Процедура ЗаполнитьПоИсходнымПараметрам()
		
	ДокументБД=Параметры.ДокументБД;
	СформироватьСписокИсточников();
			
	ПланСчетов=Параметры.ПланСчетов;	
	ШаблонКорректировки=Параметры.ШаблонКорректировки;
	РегистрБухгалтерии=Параметры.РегистрБухгалтерии;
	
	ОбновитьИзмеренияРегистра();
	
КонецПроцедуры // ЗаполнитьПоИсходнымПараметрам()

&НаСервере
Процедура ЗаполнитьПоШаблонуПроводкиПростой(ШаблонИсточник)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ШаблоныПроводок.СпособПолучения КАК СпособПолучения,
	|	ШаблоныПроводок.ОбъектБД КАК ОбъектБД,
	|	ШаблоныПроводок.РегистрБД КАК РегистрБД,
	|	ШаблоныПроводок.СчетДтИсточник КАК СчетДтИсточник,
	|	ШаблоныПроводок.ТабличнаяЧастьБД КАК ТабличнаяЧастьБД,
	|	ШаблоныПроводок.СоответствиеРесурсов.(
	|		РесурсИсточник КАК РесурсИсточник,
	|		РесурсПриемник КАК РесурсПриемник,
	|		Коэффициент КАК Коэффициент
	|	) КАК СоответствиеРесурсов,
	|	ШаблоныПроводок.Владелец.ПланСчетов КАК ПланСчетов,
	|	ШаблоныПроводок.Владелец.РегистрБухгалтерии КАК РегистрБухгалтерии,
	|	ШаблоныПроводок.Владелец.Ссылка КАК ШаблонКорректировки,
	|	ШаблоныПроводок.СчетДт КАК СчетДтПриемник,
	|	ШаблоныПроводок.СчетКт КАК СчетКтПриемник,
	|	ШаблоныПроводок.СчетКтИсточник КАК СчетКтИсточник,
	|	ШаблоныПроводок.ТабличнаяЧастьБД.Имя КАК ТабличнаяЧастьБДИмя,
	|	ШаблоныПроводок.РегистрБД.Наименование КАК РегистрБДНаименование,
	|	ВЫБОР
	|		КОГДА ШаблоныПроводок.РегистрБД ССЫЛКА Справочник.РегистрыБухгалтерииБД
	|			ТОГДА ВЫРАЗИТЬ(ШаблоныПроводок.РегистрБД КАК Справочник.РегистрыБухгалтерииБД).ПланСчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПланСчетовИсточник,
	|	ШаблоныПроводок.ПравилаИспользованияПолейЗапроса.(
	|		Поле КАК Поле,
	|		Синоним КАК Синоним,
	|		КодАналитики КАК КодАналитики,
	|		РеквизитАналитики КАК РеквизитАналитики,
	|		ТаблицаАналитики КАК ТаблицаАналитики,
	|		СпособЗаполнения КАК СпособЗаполнения,
	|		ФиксированноеЗначение КАК ФиксированноеЗначение,
	|		РеквизитОбъекта КАК РеквизитОбъекта
	|	) КАК ПравилаИспользованияПолейЗапроса,
	|	ШаблоныПроводок.ТаблицаПараметровОтбораБД.(
	|		ПолеБД КАК ПолеБД,
	|		НаименованиеБД КАК НаименованиеБД,
	|		СпособВычисленияПараметра КАК СпособВычисленияПараметра,
	|		ЗначениеДляПроверки КАК ЗначениеДляПроверки,
	|		ТипРасчета КАК ТипРасчета,
	|		Реквизит КАК Реквизит,
	|		СмещениеПериода КАК СмещениеПериода,
	|		ТекстМодуля КАК ТекстМодуля,
	|		ИдентификаторСтроки КАК ИдентификаторСтроки,
	|		ИдентификаторРодителя КАК ИдентификаторРодителя,
	|		ИмяПараметра КАК ИмяПараметра
	|	) КАК ТаблицаПараметровОтбораБД,
	|	ШаблоныПроводок.УточненияСпособовОпределения.(
	|		ИмяПараметра КАК ИмяПараметра,
	|		Значение КАК Значение,
	|		Представление КАК Представление,
	|		Пометка КАК Пометка,
	|		Тип КАК Тип,
	|		ПолеБД КАК ПолеБД
	|	) КАК УточненияСпособовОпределения,
	|	ШаблоныПроводок.Владелец.ДокументБД КАК ДокументБД,
	|	ШаблоныПроводок.Отключен КАК Отключен
	|ИЗ
	|	Справочник.ШаблоныПроводок КАК ШаблоныПроводок
	|ГДЕ
	|	ШаблоныПроводок.Ссылка = &ШаблонПроводки";
	
	Запрос.УстановитьПараметр("ШаблонПроводки",ШаблонИсточник);
	
	Результат=Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,Результат);
	
	//ПланСчетов			= Результат.ПланСчетов;
	//РегистрБухгалтерии 	= Результат.РегистрБухгалтерии;
	//ШаблонКорректировки = Результат.ШаблонКорректировки;
	//СчетДтПриемник		= Результат.СчетДтПриемник;
	//СчетКтПриемник		= Результат.СчетКтПриемник;
	//СпособПолучения		= Результат.СпособПолучения;
	//ДокументБД			= Результат.ДокументБД;
	//Отключен			= Результат.Отключен;
	
	Элементы.ФормаОтключитьВключить.Пометка=Отключен;
	
	СформироватьСписокИсточников();
	
	ТабСоответствиеРесурсов	= Результат.СоответствиеРесурсов.Выгрузить();
	
	ТабПравилаИспользованияПолейЗапроса		= Результат.ПравилаИспользованияПолейЗапроса.Выгрузить();
	ТабТаблицаПараметровОтбораБД			= Результат.ТаблицаПараметровОтбораБД.Выгрузить();
	ТабУточненияСпособовОпределения			= Результат.УточненияСпособовОпределения.Выгрузить(); 
	
	ОпределитьИсточникДляФормированияДвижений(Результат);
	
	ЗаполнитьТаблицуСоответствияРесурсов(ТабСоответствиеРесурсов);	
	ЗаполнитьТаблицуСоответствияБД(ТабПравилаИспользованияПолейЗапроса);
	ЗаполнитьДеревоПараметровОтбораБД(ТабТаблицаПараметровОтбораБД,ТабУточненияСпособовОпределения);
		
КонецПроцедуры // ЗаполнитьПоШаблонуПроводки()

&НаСервере
Процедура ЗаполнитьТаблицуСоответствияРесурсов(ТабСоответствиеРесурсов)
	
	ТаблицаСоответствияРесурсов.Очистить();
	
	Для Каждого Строка ИЗ ТабСоответствиеРесурсов Цикл
		
		НоваяСтрока=ТаблицаСоответствияРесурсов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
	КонецЦикла;	
	
КонецПроцедуры // ЗаполнитьТаблицуСоответствияРесурсов() 

&НаСервере
Процедура ЗаполнитьТаблицуСоответствияБД(ТабПравилаИспользованияПолейЗапроса)
	
	ТаблицаПолей=РаботаСПолямиАналитикиУХ.ЗаполнитьПоляРеквизитовПроводки(РегистрБухгалтерии,СчетДтПриемник,СчетКтПриемник);
		
	Для Каждого Строка ИЗ ТаблицаПолей Цикл
		
		НоваяСтрока=ТаблицаСоответствияБД.Добавить();
		
		Если Строка.ТипПоля="Измерение" Тогда
			
			НоваяСтрока.Измерение=Истина;
			НоваяСтрока.КодАналитики="Аналитика_"+Строка.Имя;
			
		ИначеЕсли Строка.ТипПоля="Субконто" Тогда
			
			НоваяСтрока.Субконто=Истина;
			
		КонецЕсли;
		
		НоваяСтрока.ПсевдонимАналитики	= Строка.Синоним;
		НоваяСтрока.ВидАналитики		= Строка.ВидАналитики;
		НоваяСтрока.РеквизитОбъекта		= Строка.Имя;
		НоваяСтрока.Порядок				= Строка.Порядок;
		НоваяСтрока.ДтКт				= Строка.ДтКт;
		
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(НоваяСтрока, Строка.ТипДанных, Справочники.ТипыБазДанных.ПустаяСсылка());
		
		СтрСоответствие=ТабПравилаИспользованияПолейЗапроса.Найти(НоваяСтрока.РеквизитОбъекта,"РеквизитОбъекта");
		
		Если Не СтрСоответствие=Неопределено Тогда
			
			НоваяСтрока.СпособЗаполнения=СтрСоответствие.СпособЗаполнения;
			
			Если СтрСоответствие.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение Тогда
				
				НоваяСтрока.ФиксированноеЗначение=СтрСоответствие.ФиксированноеЗначение;
				ПредставлениеАналитики=Строка(СтрСоответствие.ФиксированноеЗначение);
				
				НоваяСтрока.ПолеБД		= ПредставлениеАналитики;
				НоваяСтрока.ПсевдонимБД	= ПредставлениеАналитики;
				НоваяСтрока.Сопоставлено= Истина;
				
			Иначе
				
				НоваяСтрока.ПолеБД=СтрСоответствие.Поле;
				НоваяСтрока.ПсевдонимБД=СтрСоответствие.Синоним;
				НоваяСтрока.Сопоставлено= Истина;
				
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЦикла;
	
	ОбновитьНомераАналитик();	
	ТаблицаСоответствияБД.Сортировать("Порядок Возр, ПсевдонимАналитики Возр");
	
КонецПроцедуры // ЗаполнитьТаблицуСоответствияБД()

&НаСервере
Процедура ЗаполнитьДеревоПараметровОтбораБД(ТаблицаПараметровОтбораБД,УточненияСпособовОпределения)
	
	ИсточникОбъект=Справочники.ИсточникиДанныхДляРасчетов.СоздатьЭлемент();
	
	ИсточникОбъект.ДеревоПолейБД=РеквизитФормыВЗначение("ДеревоПолейБД");
	ИсточникОбъект.ДеревоПолейБД.Колонки.Добавить("ВидАналитики");
	ИсточникОбъект.ДеревоПолейБД.Колонки.Добавить("ТаблицаADO");
		
	ИсточникОбъект.мТаблицаПоказателейБД=РеквизитФормыВЗначение("мТаблицаПоказателейБД");
	ИсточникОбъект.мТаблицаПроизводныхБД=РеквизитФормыВЗначение("мТаблицаПроизводныхБД");	
	
	ТаблицаПараметровОтбораБД.Сортировать("ИдентификаторРодителя,ИдентификаторСтроки");
	ДеревоПараметровОтбораБДСервер=РеквизитФормыВЗначение("ДеревоПараметровОтбораБД");
	
	Для Каждого Строка ИЗ ТаблицаПараметровОтбораБД Цикл
		
		Если Строка.ИдентификаторРодителя=0 Тогда
			
			НоваяСтрока=ДеревоПараметровОтбораБДСервер.Строки.Добавить();
			
		Иначе
			
			СтрокаРодитель=ДеревоПараметровОтбораБДСервер.Строки.Найти(Строка.ИдентификаторРодителя,"ИдентификаторСтроки",Истина);
			НоваяСтрока=СтрокаРодитель.Строки.Добавить();
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
		Если ЗначениеЗаполнено(Строка.ПолеБД) Тогда	 
			
			СтрПоле=ИсточникОбъект.ОпределитьРабочуюСтроку("ПолеБД",Строка.ПолеБД);
			
			Если СтрПоле=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока.ТипЗначения		= СтрПоле.ТипЗначения;
			НоваяСтрока.ТипДанныхПоля	= СтрПоле.ТипДанныхПоля;
			НоваяСтрока.СправочникБД	= СтрПоле.СправочникБД;
			НоваяСтрока.ТипМетаДанных	= СтрПоле.ТипМетаДанных;
			
			НоваяСтрока.УточнениеСпособаОпределения=УправлениеОтчетамиУХ.ПолучитьУточнениеСпособаОпределения(Строка.ПолеБД,Строка.ИмяПараметра,УточненияСпособовОпределения); 
				
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСерверУХ.ПоместитьТаблицуЗначенийВКоллекциюФормы(ИсточникОбъект.мТаблицаПроизводныхБД,мТаблицаПроизводныхБД);			
	ЗначениеВРеквизитФормы(ДеревоПараметровОтбораБДСервер,"ДеревоПараметровОтбораБД");
	
КонецПроцедуры // ЗаполнитьДеревоПараметровОтбораБД() 
 
&НаСервере
Процедура ОбновитьПоляПроводкиИсточник()
	
	СтрокаПоказателей                 	= мТаблицаПоказателейБД.Добавить();
	СтрокаПоказателей.ПолеБД         	= "Регистратор";
	СтрокаПоказателей.НаименованиеБД 	= "Регистратор";
	СтрокаПоказателей.Регистратор       = Истина;
	СтрокаПоказателей.Балансовый 		= Истина;
	СтрокаПоказателей.Порядок			= -1;
	
	РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, "Документ."+ДокументБД.Наименование,ТипБД,ТипБДПриемник);
	
	ТаблицаПолей=РаботаСПолямиАналитикиУХ.ЗаполнитьБалансовыеИзмеренияПроводки(Неопределено,РегистрБД);
	
	РаботаСПолямиАналитикиУХ.ЗаполнитьНебалансовыеИзмеренияПроводки(ТаблицаПолей,РегистрБД,СчетДтИсточник,"Дт");
	РаботаСПолямиАналитикиУХ.ЗаполнитьНебалансовыеИзмеренияПроводки(ТаблицаПолей,РегистрБД,СчетКтИсточник,"Кт");
	
	РаботаСПолямиАналитикиУХ.ЗаполнитьСубконтоПроводки(ТаблицаПолей,РегистрБД,СчетДтИсточник,"Дт");
	РаботаСПолямиАналитикиУХ.ЗаполнитьСубконтоПроводки(ТаблицаПолей,РегистрБД,СчетКтИсточник,"Кт");
	
	РаботаСПолямиАналитикиУХ.ЗаполнитьРеквизитыПроводки(ТаблицаПолей,РегистрБД);
	
	Для Каждого СтрПоле ИЗ ТаблицаПолей Цикл
		
		СтрокаПоказателей                  	= мТаблицаПоказателейБД.Добавить();			
		СтрокаПоказателей.ПолеБД          	= СтрПоле.Имя;
		СтрокаПоказателей.НаименованиеБД	= СтрПоле.Синоним;
		СтрокаПоказателей.Балансовый       	= СтрПоле.ДтКт="";
		СтрокаПоказателей.Дебетовый       	= (НЕ СтрокаПоказателей.Балансовый) И СтрПоле.ДтКт="Дт";
		СтрокаПоказателей.Измерение       	= СтрПоле.ТипПоля="Измерение";
		СтрокаПоказателей.Субконто      	= СтрПоле.ТипПоля="Субконто";
		
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрПоле.ТипДанных, Справочники.ТипыБазДанных.ПустаяСсылка());
		
		СтрокаПоказателей.Порядок=СтрПоле.Порядок;
		
	КонецЦикла;
		
	ЗаполнитьДеревоПоОбъектуБД();
	ОбновитьТаблицуРесурсовИсточник();
	
КонецПроцедуры // ЗаполнитьПоляПриемника() 

&НаСервере
Процедура ОпределитьИсточникДляФормированияДвижений(Результат)
	
	Если Результат.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеДокументы Тогда
		
		ОбъектБД		=Результат.ОбъектБД;
		ТабличнаяЧастьБД=Результат.ТабличнаяЧастьБД;
		
		Если ЗначениеЗаполнено(ТабличнаяЧастьБД) Тогда
			
			ИсточникДляФормированияДвижений="&ТЧ_"+Результат.ТабличнаяЧастьБДИмя;
			
		Иначе
			
			ИсточникДляФормированияДвижений="ШапкаДокумента";
			
		КонецЕсли;
		
		ПриИзмененииОбъектаБД();
		
	ИначеЕсли Результат.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
		
		ИсточникДляФормированияДвижений = "&РБ_"+Результат.РегистрБДНаименование;
		РегистрБД						= Результат.РегистрБД;
		ПланСчетовИсточник				= Результат.ПланСчетовИсточник;
		СчетДтИсточник					= Результат.СчетДтИсточник;
		СчетКтИсточник					= Результат.СчетКтИсточник;
				
		ОбновитьПоляПроводкиИсточник();
		
	ИначеЕсли Результат.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления Тогда
		
		ИсточникДляФормированияДвижений = "&РН_"+Результат.РегистрБДНаименование;
		ПриИзмененииРегистра();
		
	ИначеЕсли Результат.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений Тогда
		                                  
		ИсточникДляФормированияДвижений = "&РС_"+Результат.РегистрБДНаименование;
		ПриИзмененииРегистра();
		
	КонецЕсли;
				
КонецПроцедуры // ОпределитьИсточникДляФормированияДвижений() 	

&НаСервере
Процедура ОбновитьИзмеренияРегистра()
	
	ТаблицаПолей=РаботаСПолямиАналитикиУХ.ЗаполнитьБалансовыеИзмеренияПроводки(Неопределено,РегистрБухгалтерии);
	РаботаСПолямиАналитикиУХ.ЗаполнитьРеквизитыПроводки(ТаблицаПолей,РегистрБухгалтерии);
	
	Для Каждого Строка ИЗ ТаблицаПолей Цикл
		
		НоваяСтрока=ТаблицаСоответствияБД.Добавить();
			
		НоваяСтрока.Измерение=?(Строка.ТипПоля="Измерение",Истина,Ложь);
		НоваяСтрока.КодАналитики="Аналитика_"+Строка.Имя;
		
		НоваяСтрока.ПсевдонимАналитики	= Строка.Синоним;
		НоваяСтрока.ВидАналитики		= Строка.ВидАналитики;
		НоваяСтрока.РеквизитОбъекта		= Строка.Имя;
		
		НоваяСтрока.Порядок=?(НоваяСтрока.Измерение,0,4);
		
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(НоваяСтрока, Строка.ТипДанных, Справочники.ТипыБазДанных.ПустаяСсылка());
		
	КонецЦикла;
	
	ТаблицаСоответствияБД.Сортировать("Порядок Возр, ПсевдонимАналитики Возр");
	
КонецПроцедуры // ОбновитьИзмеренияРегистра()


&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ГруппаСчетаИсточник.Видимость=ЗначениеЗаполнено(ПланСчетовИсточник);
	
	Если ЗначениеЗаполнено(ШаблонПроводки) Тогда
	
	    Элементы.ФормаОтключитьВключить.Видимость=Истина;
		
		Если Элементы.ФормаОтключитьВключить.Пометка Тогда
			
			Элементы.ФормаОтключитьВключить.ЦветТекста=Новый Цвет(255,0,0);
			Элементы.ФормаОтключитьВключить.Шрифт=Новый Шрифт(Элементы.ФормаОтключитьВключить.Шрифт, , , Истина);
			Элементы.ФормаОтключитьВключить.Заголовок=НСтр("ru = 'Отключен'");
			
		Иначе
						
			Элементы.ФормаОтключитьВключить.ЦветТекста=Новый Цвет(77,77,77);
			Элементы.ФормаОтключитьВключить.Шрифт=Новый Шрифт(Элементы.ФормаОтключитьВключить.Шрифт, , , Ложь);
			Элементы.ФормаОтключитьВключить.Заголовок=НСтр("ru = 'Отключить'");
			
		КонецЕсли;
		
	Иначе
		
		Элементы.ФормаОтключитьВключить.Видимость=Ложь;
		
	КонецЕсли;
						
КонецПроцедуры // УстановитьВидимость()

&НаСервере
Процедура СформироватьСоответствиеГруппыУсловия()
	
	СоответствиеГруппыУсловияСервер=Новый Соответствие;
	СоответствиеГруппыУсловияСервер.Вставить(Перечисления.СпособыВычисленияПараметровОперандов.ГруппаИ,"ГруппаУсловийИ");
	СоответствиеГруппыУсловияСервер.Вставить(Перечисления.СпособыВычисленияПараметровОперандов.ГруппаИЛИ,"ГруппаУсловийИЛИ");
	СоответствиеГруппыУсловияСервер.Вставить(Перечисления.СпособыВычисленияПараметровОперандов.ГруппаНЕ,"ГруппаУсловийНЕ");
	
	СоответствиеГруппыУсловия=Новый ФиксированноеСоответствие(СоответствиеГруппыУсловияСервер);

КонецПроцедуры // СформироватьСоответствиеГруппыУсловия()

&НаСервере
Процедура СформироватьЗаголовок()
	
	ТекстЗаголовка = НСтр("ru = 'Шаблон проводки документа ""%1"" по плану счетов ""%2"".'");
	ТекстЗаголовка = СтрШаблон(ТекстЗаголовка,
		                        ДокументБД,
		                        ПланСчетов);
								
	ЭтотОбъект.Заголовок=ТекстЗаголовка;
	
КонецПроцедуры // СформироватьЗаголовок() 

&НаСервере
Процедура СформироватьСписокИсточников()
	
	ТаблицаИсточников=Новый ТаблицаЗначений;
	ТаблицаИсточников.Колонки.Добавить("ИмяИсточника");
	ТаблицаИсточников.Колонки.Добавить("ПредставлениеИсточника");
	ТаблицаИсточников.Колонки.Добавить("Порядок",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1));
	
	НоваяСтрока=ТаблицаИсточников.Добавить();
	НоваяСтрока.ИмяИсточника			= "ШапкаДокумента";
	НоваяСтрока.ПредставлениеИсточника	= Нстр("ru = 'Шапка документа'");
	НоваяСтрока.Порядок					= 1;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТабличныеЧастиБД.Синоним КАК Синоним,
	|	ТабличныеЧастиБД.Имя КАК Имя
	|ИЗ
	|	Справочник.ТабличныеЧастиБД КАК ТабличныеЧастиБД
	|ГДЕ
	|	ТабличныеЧастиБД.Владелец = &ДокументБД
	|
	|УПОРЯДОЧИТЬ ПО
	|	Синоним";
	
	Запрос.УстановитьПараметр("ДокументБД",ДокументБД);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока=ТаблицаИсточников.Добавить();
		НоваяСтрока.ИмяИсточника			= "&ТЧ_"+Результат.Имя;
		НоваяСтрока.ПредставлениеИсточника	= СтрШаблон(Нстр("ru = '%1 (табличная часть)'"), Результат.Синоним);
		НоваяСтрока.Порядок					= 2;
		
	КонецЦикла;
	
	МетаданныеДокумент=Метаданные.Документы[ДокументБД.Наименование];
	
	Для Каждого Движение ИЗ МетаданныеДокумент.Движения Цикл
		
		ДанныеДвижениия=ПолучитьДанныеДвижения(Движение);
		
		Если ДанныеДвижениия=Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока=ТаблицаИсточников.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ДанныеДвижениия);
					
	КонецЦикла;
	
	ТаблицаИсточников.Сортировать("Порядок,ПредставлениеИсточника");
	
	Элементы.ИсточникДляФормированияДвижений.СписокВыбора.Очистить();
	
	Для Каждого Строка ИЗ ТаблицаИсточников Цикл
		
		Элементы.ИсточникДляФормированияДвижений.СписокВыбора.Добавить(Строка.ИмяИсточника,Строка.ПредставлениеИсточника);
		
	КонецЦикла;
		
КонецПроцедуры // СформироватьСписокИсточников()

&НаСервере
Функция ПолучитьДанныеДвижения(Движение)
	
	ИмяДвижения=Движение.Имя;
	СинонимДвижения=Движение.Синоним;
	
	Если НЕ Метаданные.РегистрыБухгалтерии.Найти(ИмяДвижения)=Неопределено Тогда
		
		Возврат Новый Структура("ИмяИсточника,ПредставлениеИсточника,Порядок","&РБ_"+ИмяДвижения,СтрШаблон(Нстр("ru = '%1 (регистр бухгалтерии)'"), СинонимДвижения),0);
		
	ИначеЕсли НЕ Метаданные.РегистрыНакопления.Найти(ИмяДвижения)=Неопределено Тогда
		
		Возврат Новый Структура("ИмяИсточника,ПредставлениеИсточника,Порядок","&РН_"+ИмяДвижения,СтрШаблон(Нстр("ru = '%1 (регистр накопления)'"), СинонимДвижения),3);
		
	ИначеЕсли НЕ Метаданные.РегистрыСведений.Найти(ИмяДвижения)=Неопределено Тогда
		
		Возврат Новый Структура("ИмяИсточника,ПредставлениеИсточника,Порядок","&РС_"+ИмяДвижения,СтрШаблон(Нстр("ru = '%1 (регистр сведений)'"), СинонимДвижения),4);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // ПолучитьДанныеДвижения()

&НаСервере
Процедура ИсточникДляФормированияДвиженийПриИзмененииНаСервере()
	
	ОбъектБД=Неопределено;
	РегистрБД=Неопределено;
	ТабличнаяЧастьБД=Неопределено;
	ПланСчетовИсточник=Неопределено;
	
	мТаблицаПроизводныхБД.Очистить();
	мТаблицаПоказателейБД.Очистить();
	Элементы.РесурсИсточник.СписокВыбора.Очистить();
	
	Если ИсточникДляФормированияДвижений="ШапкаДокумента" Тогда
		
		СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеДокументы;
		ОбъектБД=ДокументБД;
		
		ПриИзмененииОбъектаБД();
		
	ИначеЕсли СтрНайти(ИсточникДляФормированияДвижений,"&ТЧ_")>0 Тогда
		
		СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеДокументы;
		ОбъектБД=ДокументБД;
		ТабличнаяЧастьБД=ПолучитьОписаниеТабличнойЧасти(СтрЗаменить(ИсточникДляФормированияДвижений,"&ТЧ_",""),ДокументБД);
		
		ПриИзмененииОбъектаБД();
		
	ИначеЕсли СтрНайти(ИсточникДляФормированияДвижений,"&РБ_")>0 Тогда
		
		СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии;
		РегистрБД=ПолучитьОписаниеОбъектаМетаданных("РегистрыБухгалтерииБД",СтрЗаменить(ИсточникДляФормированияДвижений,"&РБ_",""));
		
		Если НЕ ПланСчетовИсточник=РегистрБД.ПланСчетов Тогда
			
			СчетДтИсточник=Неопределено;
			СчетКтИсточник=Неопределено;
			
		КонецЕсли;
		
		ПланСчетовИсточник=РегистрБД.ПланСчетов;
		ПриИзмененииРегистраБухгалтерии();
		
	ИначеЕсли СтрНайти(ИсточникДляФормированияДвижений,"&РН_")>0 Тогда
		
		СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления;
		РегистрБД=ПолучитьОписаниеОбъектаМетаданных("РегистрыНакопленияБД",СтрЗаменить(ИсточникДляФормированияДвижений,"&РН_",""));
		ПриИзмененииРегистра();
		
	ИначеЕсли СтрНайти(ИсточникДляФормированияДвижений,"&РС_")>0 Тогда
		
		СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений;
		РегистрБД=ПолучитьОписаниеОбъектаМетаданных("РегистрыСведенийБД",СтрЗаменить(ИсточникДляФормированияДвижений,"&РС_",""));
		ПриИзмененииРегистра();
		
	КонецЕсли;
	
	ОбновитьТаблицуСоответствия();
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуСоответствия()
	
	СтрокиИсточника=ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("СпособЗаполнения",Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы));
	
	Для Каждого Строка ИЗ СтрокиИсточника Цикл
		
		УдалитьСоответствие(Строка);
		
	КонецЦикла;
	
	ЗаполнитьСоответствияПоУмолчанию();
	ОбновитьСоответствиеРесурсов();
		
КонецПроцедуры // ОбновитьТаблицуСоответствия()

Процедура ОбновитьСоответствиеРесурсов()
	
	Для Каждого Строка ИЗ ТаблицаСоответствияРесурсов Цикл
		
		ЭлементИсточник=Элементы.РесурсИсточник.СписокВыбора.НайтиПоЗначению(Строка.РесурсПриемник);
		
		Если НЕ ЭлементИсточник=Неопределено Тогда
			
			Строка.РесурсИсточник=ЭлементИсточник.Значение;
			Строка.Коэффициент=1;
			
		Иначе
			
			Строка.РесурсИсточник="";
			Строка.Коэффициент=0;
			
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры // ОбновитьСоответствиеРесурсов()


&НаСервере
Процедура ЗаполнитьСоответствияПоУмолчанию()
	
	Для Каждого Строка ИЗ ТаблицаСоответствияБД Цикл
		
		Если НЕ Строка.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение Тогда
			
			ОпределитьВозможноеПолеИсточника(Строка);
			
		КонецЕсли;
		
	КонецЦикла;	
		
КонецПроцедуры // ЗаполнитьСоответствияПоУмолчанию() 

&НаСервере
Процедура ПриИзмененииОбъектаБД()
		
	РабочийОбъект=?(ЗначениеЗаполнено(ТабличнаяЧастьБД),ТабличнаяЧастьБД,ОбъектБД);	
		
	Если ЗначениеЗаполнено(РабочийОбъект) Тогда
		
		Для Каждого СтрРеквизит ИЗ РабочийОбъект.Реквизиты Цикл
			
			СтрокаПоказателей                 	= мТаблицаПоказателейБД.Добавить();
			СтрокаПоказателей.ПолеБД         	= СтрРеквизит.Имя;
			СтрокаПоказателей.НаименованиеБД 	= СтрРеквизит.Синоним;
			СтрокаПоказателей.Измерение       	= Истина;
			СтрокаПоказателей.Балансовый		= Истина;
			
			Если СтрРеквизит.Имя="Ссылка" Тогда
				
				Если ТипЗнч(РабочийОбъект)=Тип("СправочникСсылка.ДокументыБД") Тогда
					
					РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей,"Документ"+"."+ОбъектБД.Наименование,ТипБД,ТипБДПриемник);
					
				ИначеЕсли ТипЗнч(РабочийОбъект)=Тип("СправочникСсылка.ТабличныеЧастиБД") Тогда
					
					ОписаниеОбъектаБД=РабочийОбъект.Владелец;
					РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей,"Документ"+"."+ОписаниеОбъектаБД.Наименование,ТипБД,ТипБДПриемник);
					
				КонецЕсли;
				
				СтрокаПоказателей.Порядок=-1;
				
			Иначе
				
				РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрРеквизит.ТипДанных,ТипБД,ТипБДПриемник);
				
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;
	
	ЗаполнитьДеревоПоОбъектуБД();
			
КонецПроцедуры // ПриИзмененииОбъектаБД()

&НаСервере
Процедура ПриИзмененииРегистра()
		
	СтрокаПоказателей                 	= мТаблицаПоказателейБД.Добавить();
	СтрокаПоказателей.ПолеБД         	= "Регистратор";
	СтрокаПоказателей.НаименованиеБД 	= Нстр("ru = 'Регистратор'");
	СтрокаПоказателей.Регистратор       = Истина;
	СтрокаПоказателей.Балансовый 		= Истина;
	СтрокаПоказателей.Порядок			= -1;
	
	РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, "Документ."+ДокументБД.Наименование,ТипБД,ТипБДПриемник);
	ИсточникРегистрСведений=(ТипЗнч(РегистрБД)=Тип("СправочникСсылка.РегистрыСведенийБД"));
	
	Для Каждого СтрИзмерение ИЗ РегистрБД.Измерения Цикл
		
		СтрокаПоказателей                 	= мТаблицаПоказателейБД.Добавить();
		СтрокаПоказателей.ПолеБД         	= СтрИзмерение.Имя;
		СтрокаПоказателей.НаименованиеБД 	= СтрИзмерение.Синоним;
		СтрокаПоказателей.Измерение       	= Истина;
		СтрокаПоказателей.Балансовый 		= Истина;
		
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрИзмерение.ТипДанных,ТипБД,ТипБДПриемник);
			
	КонецЦикла;
	
	Для Каждого СтрРеквизит ИЗ РегистрБД.Реквизиты Цикл
		
		СтрокаПоказателей                 	= мТаблицаПоказателейБД.Добавить();
		СтрокаПоказателей.ПолеБД         	= СтрРеквизит.Имя;
		СтрокаПоказателей.НаименованиеБД 	= СтрРеквизит.Синоним;
		СтрокаПоказателей.Измерение       	= Ложь;
		СтрокаПоказателей.Балансовый 		= Истина;
		СтрокаПоказателей.Порядок			= 4;
		
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрРеквизит.ТипДанных,ТипБД,ТипБДПриемник);
		
	КонецЦикла;
	
	Для Каждого СтрРеквизит ИЗ РегистрБД.Ресурсы Цикл
		
		СтрокаПоказателей                 	= мТаблицаПоказателейБД.Добавить();
		СтрокаПоказателей.ПолеБД         	= СтрРеквизит.Имя;
		СтрокаПоказателей.НаименованиеБД 	= СтрРеквизит.Синоним;
		СтрокаПоказателей.Измерение       	= Ложь;
		СтрокаПоказателей.Балансовый 		= Истина;
		СтрокаПоказателей.Ресурс			= Истина;
		
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей,?(ИсточникРегистрСведений, СтрРеквизит.ТипДанных,"Число"),ТипБД,ТипБДПриемник);
		
	КонецЦикла;
	
	ЗаполнитьДеревоПоОбъектуБД();
	
КонецПроцедуры // ПриИзмененииРегистра()

&НаСервере
Процедура ПриИзмененииРегистраБухгалтерии()
		
	СтрокаПоказателей                 	= мТаблицаПоказателейБД.Добавить();
	СтрокаПоказателей.ПолеБД         	= "Регистратор";
	СтрокаПоказателей.НаименованиеБД 	= Нстр("ru = 'Регистратор'");
	СтрокаПоказателей.Регистратор       = Истина;
	СтрокаПоказателей.Балансовый 		= Истина;
	СтрокаПоказателей.Порядок			= -1;
	
	РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, "Документ."+ДокументБД.Наименование,ТипБД,ТипБДПриемник);
		
	Для Каждого СтрИзмерение ИЗ РегистрБД.Измерения Цикл
		
		Если СтрИзмерение.Балансовый Тогда
			
			СтрокаПоказателей                 	= мТаблицаПоказателейБД.Добавить();
			СтрокаПоказателей.ПолеБД         	= СтрИзмерение.Имя;
			СтрокаПоказателей.НаименованиеБД 	= СтрИзмерение.Синоним;
			СтрокаПоказателей.Измерение       	= Истина;
			СтрокаПоказателей.Балансовый 		= Истина;
			
			РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрИзмерение.ТипДанных,ТипБД,ТипБДПриемник);
				
		КонецЕсли;	
		
	КонецЦикла;
	
	Для Каждого СтрРеквизит ИЗ РегистрБД.Реквизиты Цикл
		
		СтрокаПоказателей                 	= мТаблицаПоказателейБД.Добавить();
		СтрокаПоказателей.ПолеБД         	= СтрРеквизит.Имя;
		СтрокаПоказателей.НаименованиеБД 	= СтрРеквизит.Синоним;
		СтрокаПоказателей.Измерение       	= Ложь;
		СтрокаПоказателей.Балансовый 		= Истина;
		СтрокаПоказателей.Порядок			= 4;
		
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрРеквизит.ТипДанных,ТипБД,ТипБДПриемник);
		
	КонецЦикла;
		
	ЗаполнитьДеревоПоОбъектуБД();
	
КонецПроцедуры // ПриИзмененииРегистра()


&НаСервере
Процедура ЗаполнитьДеревоПоОбъектуБД()
	
	ДеревоПолейБДСервер=РеквизитФормыВЗначение("ДеревоПолейБД");
	ДеревоПолейБДСервер.Строки.Очистить();
	Элементы.РесурсИсточник.СписокВыбора.Очистить();
		
	Для Каждого Элемент Из мТаблицаПоказателейБД Цикл
		
		Если НЕ Элемент.ТипЗначения.НайтиПоЗначению(Тип("Число"))=Неопределено Тогда
			
			Элементы.РесурсИсточник.СписокВыбора.Добавить(Элемент.ПолеБД,Элемент.НаименованиеБД,Элемент.Балансовый);
			Продолжить;
			
		КонецЕсли;
			
		ТекущаяСтрока = ДеревоПолейБДСервер.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,Элемент);
		
		// Добавляем строку для возможного раскрытия по реквизитам объекта
		
		Если (ТекущаяСтрока.ТипМетаДанных="Справочник" ИЛИ ТекущаяСтрока.ТипМетаДанных="Документ" ИЛИ ТекущаяСтрока.ТипМетаДанных="ПланВидовХарактеристик" ИЛИ ТекущаяСтрока.ТипЗначения.Количество()>1) Тогда 
			// Добавим строку для дальнейшего раскрытия
			
			НоваяСтрока=ТекущаяСтрока.Строки.Добавить();
			
		КонецЕсли;
			
	КонецЦикла;
			
	ДеревоПолейБДСервер.Строки.Сортировать("Порядок,ПолеБД");
			
	ЗначениеВРеквизитФормы(ДеревоПолейБДСервер,"ДеревоПолейБД");

	
КонецПроцедуры // ЗаполнитьДеревоПоРегиструНакопления()

&НаСервере
Функция ПолучитьОписаниеОбъектаМетаданных(ТаблицаМетаданных,ИмяОбъекта)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТаблицаОбъектовБД.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник."+ТаблицаМетаданных+" КАК ТаблицаОбъектовБД
	|ГДЕ
	|	ТаблицаОбъектовБД.Владелец = Значение(Справочник.ТипыБазДанных.ТекущаяИБ)
	|И ТаблицаОбъектовБД.Наименование=&ИмяОбъекта";
	
	Запрос.УстановитьПараметр("ИмяОбъекта",ИмяОбъекта);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Результат.Следующий();
	
	Возврат Результат.Ссылка;
	
КонецФункции // ПолучитьОписаниеОбъектаМетаданных()

&НаСервере
Функция ПолучитьОписаниеТабличнойЧасти(ИмяОбъекта,Владелец)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТаблицаОбъектовБД.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ТабличныеЧастиБД КАК ТаблицаОбъектовБД
	|ГДЕ
	|	ТаблицаОбъектовБД.Владелец = &Владелец
	|	И ТаблицаОбъектовБД.Имя = &ИмяОбъекта";
	
	Запрос.УстановитьПараметр("Владелец",Владелец);
	Запрос.УстановитьПараметр("ИмяОбъекта",ИмяОбъекта);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Результат.Следующий();
	
	Возврат Результат.Ссылка;
	
КонецФункции // ПолучитьОписаниеОбъектаМетаданных()

&НаКлиенте
Процедура ИсточникДляФормированияДвиженийПриИзменении(Элемент)
	
	ИсточникДляФормированияДвиженийПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНовуюСтрокуУсловия()
	
	ТекСтрокаОтбор=Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные;
	
	Если ТекСтрокаОтбор=Неопределено Тогда
		
		НоваяСтрока=ДеревоПараметровОтбораБД.ПолучитьЭлементы().Добавить();
	
	ИначеЕсли НЕ СоответствиеГруппыУсловия.Получить(ТекСтрокаОтбор.СпособВычисленияПараметра)=Неопределено Тогда
		
		НоваяСтрока=ТекСтрокаОтбор.ПолучитьЭлементы().Добавить();
		
	ИначеЕсли ТекСтрокаОтбор.ПолучитьРодителя()=Неопределено Тогда
		
		НоваяСтрока=ДеревоПараметровОтбораБД.ПолучитьЭлементы().Добавить();
		
	Иначе
		
		НоваяСтрока=ТекСтрокаОтбор.ПолучитьРодителя().ПолучитьЭлементы().Добавить();
		
	КонецЕсли;

	Возврат НоваяСтрока; 
		
КонецФункции // 

&НаКлиенте
Процедура ДобавитьЭлементУсловия(Команда)
	
	ДанныеПоля=Элементы.ДеревоПолейБД.ТекущиеДанные;
		
	Если ДанныеПоля=Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДобавитьСтрокуУсловия(ДанныеПоля);
			
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьОтбора(ДанныеПоля)
	
	Если ДанныеПоля.Измерение Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Критерии отбора полей произвольного запроса должны быть указаны в тексте запроса'"));
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
		
КонецФункции // ПроверитьВозможностьОтбора() 

&НаКлиенте
Процедура ДобавитьСтрокуУсловия(ДанныеПоля)
	
	НоваяСтрока=ПолучитьНовуюСтрокуУсловия();
		
	ЗаполнитьЗначенияСвойств(НоваяСтрока,ДанныеПоля);
	
	Если ДанныеПоля.ТипДанныхПоля.Количество()>0 Тогда
		НоваяСтрока.НастройкаСоответствия=ДанныеПоля.ТипДанныхПоля[0].Значение;
	КонецЕсли;
	
	Модифицированность=Истина;
		
КонецПроцедуры // ДобавитьСтрокуУсловия() 

&НаКлиенте
Процедура ДобавитьГруппуИ(Команда)
	
	НоваяСтрока=ПолучитьНовуюСтрокуУсловия();
	НоваяСтрока.СпособВычисленияПараметра=ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ГруппаИ");
	НоваяСтрока.НаименованиеБД=Нстр("ru = 'Группа И'");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппуИЛИ(Команда)
	
	НоваяСтрока=ПолучитьНовуюСтрокуУсловия();
	НоваяСтрока.СпособВычисленияПараметра=ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ГруппаИЛИ");
	НоваяСтрока.НаименованиеБД=Нстр("ru = 'Группа ИЛИ'");

		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппуНЕ(Команда)
	
	НоваяСтрока=ПолучитьНовуюСтрокуУсловия();
	НоваяСтрока.СпособВычисленияПараметра=ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ГруппаНЕ");
	НоваяСтрока.НаименованиеБД=Нстр("ru = 'Группа НЕ'");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПараметровОтбораБДПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
		
	НоваяСтрока=ПолучитьНовуюСтрокуУсловия();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,ПараметрыПеретаскивания.Значение);
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПараметровОтбораБДПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ=Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособВычисленияПараметраПриИзменении(Элемент)
	
	ПолучитьУстановитьОграничениеТипа();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьУстановитьОграничениеТипа()
	
	СтрПоле=Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные;
	
	Если СтрПоле.ТипЗначения.Количество()>0 И СоответствиеГруппыУсловия.Получить(СтрПоле.СпособВычисленияПараметра)=Неопределено Тогда
		
		ДанныеОбъекта=Новый Структура;
		ДанныеОбъекта.Вставить("ИмяПараметра",				Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ПолеБД);
		ДанныеОбъекта.Вставить("ТипДанныхПоля",				Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ТипДанныхПоля);
		ДанныеОбъекта.Вставить("ТипЗначения",				Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ТипЗначения);
		ДанныеОбъекта.Вставить("СпособВычисленияПараметра",	Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.СпособВычисленияПараметра);
		
		ДанныеДляОграничения=ПолучитьДанныеДляОграниченияТипа(ДанныеОбъекта);
		
		Для Каждого СтрОграничение ИЗ ДанныеДляОграничения Цикл
			
			УстановитьОграничениеТипа(СтрОграничение);
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры // ПолучитьУстановитьОграничениеТипа() 

&НаКлиенте
Процедура УстановитьОграничениеТипа(ДанныеДляОграничения)
		
	ЭлементУправления = Элементы.ДеревоПараметровОтбораБД.ПодчиненныеЭлементы[ДанныеДляОграничения.ИмяКолонки];
	
	Если ДанныеДляОграничения.Свойство("ТипЗначения") Тогда
		
		Если НЕ ТипЗнч(ДанныеДляОграничения.ТипЗначения)=Тип("Массив") Тогда
			
			Массив = Новый Массив;
			Массив.Добавить(ДанныеДляОграничения.ТипЗначения);
			
		Иначе
			
			Массив=ДанныеДляОграничения.ТипЗначения;
			
		КонецЕсли;
		
		ЭлементУправления.Доступность = Истина;
		ЭлементУправления.ТолькоПросмотр=Ложь;
		ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов(Массив);
		
		Если Массив.Найти(ТипЗнч(Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные[ДанныеДляОграничения.ИмяКолонки]))=Неопределено Тогда
			
			Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные[ДанныеДляОграничения.ИмяКолонки] = ЭлементУправления.ОграничениеТипа.ПривестиЗначение();
			
		КонецЕсли;
		
		Если ДанныеДляОграничения.Свойство("ТипДанныхСписка") Тогда
			
			Массив = Новый Массив;
			Массив.Добавить(ДанныеДляОграничения.ТипДанныхСписка);
			
			Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные[ДанныеДляОграничения.ИмяКолонки].ТипЗначения=Новый ОписаниеТипов(Массив);

						
		КонецЕсли;
		
	Иначе
		
		Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные[ДанныеДляОграничения.ИмяКолонки]=Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьОграничениеТипа()

&НаКлиенте
Процедура ДеревоПараметровОтбораБДПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущийЭлемент.Имя="СпособВычисленияПараметра" Тогда
		
		ТекСписокВыбора = Элементы.ДеревоПараметровОтбораБД.ПодчиненныеЭлементы.СпособВычисленияПараметра.СписокВыбора;
		ТекСписокВыбора.Очистить();
		
		Если Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ТипЗначения.Количество()>0 Тогда 
			
			ДанныеОбъекта=Новый Структура;
			ДанныеОбъекта.Вставить("ИмяПараметра",		Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ПолеБД);
			ДанныеОбъекта.Вставить("ТипДанныхПоля",		Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ТипДанныхПоля);
			ДанныеОбъекта.Вставить("ТипЗначения",		Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные.ТипЗначения);
			ДанныеОбъекта.Вставить("ВнутренниеДанные",	Истина);
			
			СписокСпособовВычисления=ПолучитьСписокВозможныхСпособовВычисленияПараметра(ДанныеОбъекта);
			
			Для Каждого СпособОпределения ИЗ СписокСпособовВычисления Цикл
				ТекСписокВыбора.Добавить(СпособОпределения.Значение, СпособОпределения.Представление);
			КонецЦикла;
							
		КонецЕсли;
				
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УточнениеСпособаОпределенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	ТекДанные = Элементы.ДеревоПараметровОтбораБД.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		
		ДанныеОбъекта = Новый Структура;
		ДанныеОбъекта.Вставить("ВнутренниеДанные",Истина);
		ДанныеОбъекта.Вставить("СпособПолучения");
		
		
		НастройкаПараметровОтбораУХ.ОбработатьВыборЗначенияПараметра(ТекДанные, ЭтаФорма, ДанныеОбъекта, Элемент, СтандартнаяОбработка);
		
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВозможныхСпособовВычисленияПараметра(ДанныеОбъекта)
	
	СписокВыбора=Новый СписокЗначений;
	СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение,Нстр("ru = 'Фиксированное значение'"));
	СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению,Нстр("ru = 'Не равно фиксированному значению'"));
	СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений,Нстр("ru = 'Список фиксированных значений'"));
	СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений,Нстр("ru = 'Не в списке фиксированных значений'"));
	СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии,Нстр("ru = 'Список с учетом иерархии'"));
	СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии,Нстр("ru = 'Не в списке с учетом иерархии'"));
	
	Если ДанныеОбъекта.ТипЗначения[0].Значение="Дата" 
		ИЛИ ДанныеОбъекта.ТипЗначения[0].Значение=Тип("Дата")
		ИЛИ ДанныеОбъекта.ТипЗначения[0].Значение="Число"
		ИЛИ ДанныеОбъекта.ТипЗначения[0].Значение=Тип("Число") Тогда
		
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.Больше,Нстр("ru = 'Больше'"));
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.БольшеИлиРавно,Нстр("ru = 'Больше или равно'"));
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.Меньше,Нстр("ru = 'Меньше'"));
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.МеньшеИлиРавно,Нстр("ru = 'Меньше или равно'"));
		
	КонецЕсли;
	
	Если ДанныеОбъекта.ТипЗначения.Количество()>1 Тогда
		
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.ТипЗначения,Нстр("ru = 'Тип значения равен'"));
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.СписокТиповЗначений,Нстр("ru = 'Тип значения в списке'"));
		
	КонецЕсли;
				
	Возврат СписокВыбора;
	
КонецФункции // ПолучитьСписокВозможныхСпособовВычисленияПараметра()

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляОграниченияТипа(ДанныеОбъекта)
	
	ИмяПараметра=ДанныеОбъекта.ИмяПараметра;
	СпособВычисленияПараметра=ДанныеОбъекта.СпособВычисленияПараметра;
	МассивОграничений=Новый Массив;
	
	Если СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ТипЗначения Тогда
		
		МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","УточнениеСпособаОпределения",Тип("Строка")));
		
	ИначеЕсли СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокТиповЗначений Тогда
		
		МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения,ТипДанныхСписка","УточнениеСпособаОпределения",Тип("СписокЗначений"),Тип("Строка")));
		
	ИначеЕсли СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Больше
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.БольшеИлиРавно
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Меньше
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.МеньшеИлиРавно Тогда
		
		МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","УточнениеСпособаОпределения",ДанныеОбъекта.ТипЗначения[0].Значение));
		
	ИначеЕсли СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
		
		МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","УточнениеСпособаОпределения",ДанныеОбъекта.ТипДанныхПоля[0].Значение));
		
	ИначеЕсли  СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии Тогда
		
		МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения,ТипДанныхСписка","УточнениеСпособаОпределения",Тип("СписокЗначений"),ДанныеОбъекта.ТипДанныхПоля[0].Значение));
		
	КонецЕсли;
	
	Возврат МассивОграничений;
	
КонецФункции // ПолучитьДанныеДляОграниченияТипа()

&НаСервере
Функция ПоместитьРабочийОбъект()
	
	РабочийОбъект=Новый Структура;
	РабочийОбъект.Вставить("мТаблицаПоказателейБД",РеквизитФормыВЗначение("мТаблицаПоказателейБД"));
	РабочийОбъект.Вставить("мТаблицаПроизводныхБД",РеквизитФормыВЗначение("мТаблицаПроизводныхБД"));
	
	Возврат ПоместитьВоВременноеХранилище(РабочийОбъект,ЭтаФорма.УникальныйИдентификатор);	
		
КонецФункции // ПоместитьРабочийОбъект()

&НаСервере
Процедура ОбновитьТаблицыОбъекта(РабочийОбъектАдрес)
	
	 ДанныеОбъекта=ПолучитьИзВременногоХранилища(РабочийОбъектАдрес);
	 ЗначениеВРеквизитФормы(ДанныеОбъекта.мТаблицаПоказателейБД,"мТаблицаПоказателейБД");
	 ЗначениеВРеквизитФормы(ДанныеОбъекта.мТаблицаПроизводныхБД,"мТаблицаПроизводныхБД");
	
КонецПроцедуры // ОбновитьТаблицыОбъекта()

&НаКлиенте
Функция СформироватьДанныеОбъекта()
	
	ДанныеОбъекта=Новый Структура;
	ДанныеОбъекта.Вставить("РабочийОбъектАдрес",		ПоместитьРабочийОбъект());
	ДанныеОбъекта.Вставить("УникальныйИдентификатор",	ЭтаФорма.УникальныйИдентификатор);
	ДанныеОбъекта.Вставить("ТипБД",						ТипБД);
	ДанныеОбъекта.Вставить("ТипБДПриемник",				ТипБДПриемник);
	ДанныеОбъекта.Вставить("ТекСоединениеВИБ",			);
	ДанныеОбъекта.Вставить("Отказ",						ЛОЖЬ);
	ДанныеОбъекта.Вставить("Использование77",			Ложь);
	ДанныеОбъекта.Вставить("ВнутренниеДанные",			Истина);
	ДанныеОбъекта.Вставить("СпособПолучения",			СпособПолучения);
	ДанныеОбъекта.Вставить("СпособИспользования",		СпособИспользования);
	
	Возврат ДанныеОбъекта;
	
КонецФункции // СформироватьСтруктуруСтрокиВИБ()

&НаКлиенте
Процедура ДеревоПолейИПараметровОтбораБДПередРазворачиванием(Элемент, Строка, Отказ)
	
	ПередРазворачиваниемСтрокиДереваПолейИсточника(Элемент, Строка, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПередРазворачиваниемСтрокиДереваПолейИсточника(Элемент, Строка, Отказ)
	
	СтрокаРазворота=Элемент.ДанныеСтроки(Строка);
	
	Если (НЕ (СтрокаРазворота.ТипМетаДанных="Справочник" 
		ИЛИ СтрокаРазворота.ТипМетаДанных="Документ"
		ИЛИ СтрокаРазворота.ТипМетаДанных="ПланВидовХарактеристик" 
		ИЛИ СтрокаРазворота.ТипЗначения.Количество()>1)) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаРазворота.ПолучитьЭлементы().Количество()>0 И (НЕ ПустаяСтрока(СтрокаРазворота.ПолучитьЭлементы()[0].ПолеБД)) Тогда // Уже разворачивали эту строку
		Возврат;
	КонецЕсли;
		
	СтруктураСтрока=СформироватьСтруктуруСтрокиБД(СтрокаРазворота);
	ДанныеОбъекта=СформироватьДанныеОбъекта();
	
	ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта,СтруктураСтрока);
	
	Отказ=ДанныеОбъекта.Отказ;
	
	Если Отказ Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаРазворота.ПолучитьЭлементы().Очистить();
	ОбновитьТаблицыОбъекта(ДанныеОбъекта.РабочийОбъектАдрес);
	
	Для Каждого СтрокаКДобавлению ИЗ СтруктураСтрока.СтрокиКДобавлению Цикл
		
		НоваяСтрока=СтрокаРазворота.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению);
		
		Если СтрокаКДобавлению.СтрокиКДобавлению.Количество()>0 Тогда
			
			ДобавитьПодчиненныеСтроки(СтрокаКДобавлению,НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры // ПередРазворачиваниемСтрокиДереваПолейИсточника() 

&НаКлиенте
Функция СформироватьСтруктуруСтрокиБД(ДанныеСтрокиАналитики)
	
	СтрокаБД=Новый Структура;
	СтрокаБД.Вставить("ИспользуетсяВСопоставлении",	ДанныеСтрокиАналитики.ИспользуетсяВСопоставлении);
	
	СтрокаБД.Вставить("НаименованиеБД",				ДанныеСтрокиАналитики.НаименованиеБД);
	СтрокаБД.Вставить("СправочникБД",				ДанныеСтрокиАналитики.СправочникБД);
	
	СтрокаБД.Вставить("ПолеБД",						ДанныеСтрокиАналитики.ПолеБД);
	СтрокаБД.Вставить("ТипЗначения",				ДанныеСтрокиАналитики.ТипЗначения);	
	СтрокаБД.Вставить("ТипДанныхПоля",				ДанныеСтрокиАналитики.ТипДанныхПоля);
	СтрокаБД.Вставить("ТипМетаДанных",				ДанныеСтрокиАналитики.ТипМетаДанных);
	СтрокаБД.Вставить("Измерение",					ДанныеСтрокиАналитики.Измерение);
	
	Возврат СтрокаБД;
	
КонецФункции // СформироватьСтруктуруСтрокиВИБ()

&НаСервереБезКонтекста
Процедура ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта,СтруктураСтрока) 
	
	РаботаСПолямиАналитикиУХ.ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта,СтруктураСтрока);
		
КонецПроцедуры // ПередРазворачиваниемСтрокиРеквизитовАналитики()

&НаКлиенте
Процедура ДобавитьПодчиненныеСтроки(Строка,ЭлементКоллекции)
	
	Для Каждого СтрокаКДобавлению ИЗ Строка.СтрокиКДобавлению Цикл
		
		НоваяСтрока=ЭлементКоллекции.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению);
		
		Если СтрокаКДобавлению.СтрокиКДобавлению.Количество()>0 Тогда
			
			ДобавитьПодчиненныеСтроки(СтрокаКДобавлению,НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ДобавитьПодчиненныеСтроки

&НаКлиенте
Процедура ОтменитьСоответствие(ПолеБД)
	
	СтрСоответствия=ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("ПолеБД",ПолеБД));
		
	Для Каждого Строка ИЗ СтрСоответствия Цикл
		
		УдалитьСоответствие(Строка);
		
	КонецЦикла;
	
КонецПроцедуры // ОтменитьСоответствие() 

&НаКлиенте
Процедура УдалитьПоляСчета(ТипПоля,ДтКт)
	
	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить(ТипПоля,Истина);
	СтруктураПоиска.Вставить("Дебетовый",ДтКт="Дт");

	МассивСубконто=мТаблицаПоказателейБД.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого Строка ИЗ МассивСубконто Цикл
				
		ОтменитьСоответствие(Строка.ПолеБД);
		мТаблицаПоказателейБД.Удалить(Строка);
		
	КонецЦикла;
	
	МассивПроизводные=мТаблицаПроизводныхБД.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого Строка ИЗ МассивПроизводные Цикл
				
		ОтменитьСоответствие(Строка.ПолеБД);	
		мТаблицаПроизводныхБД.Удалить(Строка);
		
	КонецЦикла;
	
КонецПроцедуры // УдалитьСтрокиСубконто() 

&НаСервере
Процедура УдалитьПоляСчетаСервер(ДеревоПолейБДСервер,ТипПоля,Дебетовый);
	
	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить(ТипПоля,Истина);
	СтруктураПоиска.Вставить("Дебетовый",Дебетовый);
	
	МассивПолей=ДеревоПолейБДСервер.Строки.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого Строка ИЗ МассивПолей Цикл
	
		ДеревоПолейБДСервер.Строки.Удалить(Строка);
		
	КонецЦикла;
			
КонецПроцедуры // УдалитьПоляСчетаСервер()

&НаСервере
Процедура ОбновитьАналитикуСчета(ДтКт)
	
	ДеревоПолейБДСервер=РеквизитФормыВЗначение("ДеревоПолейБД");
	УдалитьПоляСчетаСервер(ДеревоПолейБДСервер,"Субконто",ДтКт="Дт");
	
	ТекСчет = ?(ДтКт="Дт", СчетДтИсточник, СчетКтИсточник);
	
	ТаблицаПолей=РаботаСПолямиАналитикиУХ.ЗаполнитьНебалансовыеИзмеренияПроводки(Неопределено,РегистрБухгалтерии,ТекСчет,ДтКт);
	РаботаСПолямиАналитикиУХ.ЗаполнитьСубконтоПроводки(ТаблицаПолей,РегистрБухгалтерии,ТекСчет,ДтКт);
	
	Для Каждого СтрПоле ИЗ ТаблицаПолей Цикл
		
		СтрокаПоказателей                  	= мТаблицаПоказателейБД.Добавить();			
		СтрокаПоказателей.ПолеБД          	= СтрПоле.Имя;
		СтрокаПоказателей.НаименованиеБД	= СтрПоле.Синоним;
		СтрокаПоказателей.Дебетовый       	= ДтКт="Дт";
		СтрокаПоказателей.Измерение       	= СтрПоле.ТипПоля="Измерение";
		СтрокаПоказателей.Субконто      	= НЕ СтрокаПоказателей.Измерение;
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрПоле.ТипДанных, Справочники.ТипыБазДанных.ПустаяСсылка());
		
		СтрокаПоле=ДеревоПолейБДСервер.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПоле,СтрокаПоказателей);
		
		Если СтрПоле.ТипПоля="Измерение" Тогда
			
			СтрокаПоле.Порядок=1;
			
		Иначе
			
			СтрокаПоле.Порядок=?(ДтКт="Дт",2,3);
			
		КонецЕсли;
		
		Если (СтрокаПоле.ТипМетаДанных="Справочник" ИЛИ СтрокаПоле.ТипМетаДанных="Документ" ИЛИ СтрокаПоле.ТипМетаДанных="ПланВидовХарактеристик" ИЛИ СтрокаПоле.ТипЗначения.Количество()>1) Тогда 
			// Добавим строку для дальнейшего раскрытия
			
			НоваяСтрока=СтрокаПоле.Строки.Добавить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДеревоПолейБДСервер.Строки.Сортировать("Порядок, НаименованиеБД");	
	ЗначениеВРеквизитФормы(ДеревоПолейБДСервер,"ДеревоПолейБД");
	
	ОбновитьТаблицуРесурсовИсточник();
	
	ЗаполнитьСоответствияПоУмолчанию();
	
КонецПроцедуры // ОбновитьАналитикуСчета()

&НаСервере
Процедура ОбновитьТаблицуРесурсовПриемник()
	
	ТаблицаПолей=РаботаСПолямиАналитикиУХ.ЗаполнитьРесурсыПроводки(Неопределено,РегистрБухгалтерии,СчетДтПриемник,"Дт");
	РаботаСПолямиАналитикиУХ.ЗаполнитьРесурсыПроводки(ТаблицаПолей,РегистрБухгалтерии,СчетКтПриемник,"Кт");
	
	ТаблицаПолей.Сортировать("Балансовый Убыв");
	
	Для Каждого Строка ИЗ ТаблицаСоответствияРесурсов Цикл
		
		Если ТаблицаПолей.Найти(Строка.РесурсПриемник,"Имя")=Неопределено Тогда
			
			ТаблицаСоответствияРесурсов.Удалить(Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка ИЗ ТаблицаПолей Цикл
				
		Если ТаблицаСоответствияРесурсов.НайтиСтроки(Новый Структура("РесурсПриемник",Строка.Имя)).Количество()=0 Тогда
			
			НоваяСтрока=ТаблицаСоответствияРесурсов.Добавить();
			НоваяСтрока.РесурсПриемник=Строка.Имя;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьТаблицуРесурсов()

&НаСервере
Процедура ОбновитьТаблицуРесурсовИсточник()
	
	ТаблицаПолей=РаботаСПолямиАналитикиУХ.ЗаполнитьРесурсыПроводки(Неопределено,РегистрБД,СчетДтИсточник,"Дт");
	РаботаСПолямиАналитикиУХ.ЗаполнитьРесурсыПроводки(ТаблицаПолей,РегистрБД,СчетКтИсточник,"Кт");
	
	ТаблицаПолей.Сортировать("Балансовый Убыв");
	
	Для Каждого Строка ИЗ ТаблицаСоответствияРесурсов Цикл
		
		Если ТаблицаПолей.Найти(Строка.РесурсИсточник,"Имя")=Неопределено Тогда
			
			Строка.РесурсИсточник="";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.РесурсИсточник.СписокВыбора.Очистить();
	
	Для Каждого Строка ИЗ ТаблицаПолей Цикл
		
		Элементы.РесурсИсточник.СписокВыбора.Добавить(Строка.Имя,Строка.Синоним);
		
		СтрокиИсточник=ТаблицаСоответствияРесурсов.НайтиСтроки(Новый Структура("РесурсПриемник",Строка.Имя));
		
		Если СтрокиИсточник.Количество()>0 И СтрокиИсточник[0].РесурсИсточник="" Тогда
			
			СтрокиИсточник[0].РесурсИсточник=Строка.Имя;
			СтрокиИсточник[0].Коэффициент=1;
			
		КонецЕсли;	
				
	КонецЦикла;
		
КонецПроцедуры // ОбновитьСписокРесурсовИсточник() 


&НаКлиенте
Процедура ПриИзмененииСчета(ДтКт)
	
	УдалитьПоляСчета("Субконто",ДтКт);	
	ОбновитьАналитикуСчета(ДтКт);
		
КонецПроцедуры

&НаКлиенте
Процедура СчетДтИсточникПриИзменении(Элемент)
	
	ПриИзмененииСчета("Дт");
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельСоответствияКнопкаСопоставитьАналитики(Команда)
	
	ТекущаяСтрокаАналитики = Элементы.ТаблицаСоответствия.ТекущиеДанные;
	
	Если ТекущаяСтрокаАналитики = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИсточника = Элементы.ДеревоПолейБД.ТекущиеДанные;
	
	Если ДанныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеСоздать(СформироватьСтруктуруСтрокиБД(ДанныеИсточника), ТекущаяСтрокаАналитики);
				
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельСоответствияКнопкаРазъединить(Команда)
	
	СоответствиеУдалить();

КонецПроцедуры

&НаКлиенте
Процедура СоответствиеУдалить()
	
	ТекущиеДанные = Элементы.ТаблицаСоответствия.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьСоответствие(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеСоздать(СтрокаИсточника, СтрокаПриемника)
	
	Модифицированность = Истина;		
	ОбновитьНастройкуСоответствия(СтрокаИсточника,СтрокаПриемника);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНастройкуСоответствия(СтрокаИсточник,СтрокаПриемник)
	
	Если НЕ ВозможнаУстановкаСоответствия(СтрокаИсточник.ТипЗначения,СтрокаПриемник.ТипЗначения) Тогда
		Сообщить(Нстр("ru = 'Несовпадение типов аналитик.'"), СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;
	
	УстановитьСоответствие(СтрокаИсточник,СтрокаПриемник);
	СтрокаПриемник.СпособЗаполнения=ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы");
			
КонецПроцедуры // ОбновитьНастройкуСоответствияТек()

&НаКлиенте
Процедура СчетКтИсточникПриИзменении(Элемент)
	
	ПриИзмененииСчета("Кт");
	
КонецПроцедуры

&НаКлиенте
Процедура СчетДтПриемникПриИзменении(Элемент)
	
	ОбновитьТаблицыСоответствия(СчетДтПриемник,"Дт");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицыСоответствия(Счет,ДтКт)
	
	МассивКУдалению=ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("ДтКт",ДтКт));
	
	Для Каждого Строка ИЗ МассивКУдалению Цикл
		
		ТаблицаСоответствияБД.Удалить(Строка);
		
	КонецЦикла;
		
	ТаблицаПолей=РаботаСПолямиАналитикиУХ.ЗаполнитьНебалансовыеИзмеренияПроводки(Неопределено,РегистрБухгалтерии,Счет,ДтКт);
	РаботаСПолямиАналитикиУХ.ЗаполнитьСубконтоПроводки(ТаблицаПолей,РегистрБухгалтерии,Счет,ДтКт);
	
	Для Каждого Строка ИЗ ТаблицаПолей Цикл
		
		НоваяСтрока=ТаблицаСоответствияБД.Добавить();
		
		Если Строка.ТипПоля="Измерение" Тогда
			
			НоваяСтрока.Измерение=Истина;
			НоваяСтрока.КодАналитики="Аналитика_"+Строка.Имя;
			НоваяСтрока.Порядок=1;
			
		Иначе
			
			НоваяСтрока.Субконто=Истина;
			НоваяСтрока.Порядок				= ?(ДтКт="Дт",2,3);
			
		КонецЕсли;
		
		НоваяСтрока.ПсевдонимАналитики	= Строка.Синоним;
		НоваяСтрока.ВидАналитики		= Строка.ВидАналитики;
		НоваяСтрока.РеквизитОбъекта		= Строка.Имя;
		НоваяСтрока.ДтКт				= Строка.ДтКт;
				
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(НоваяСтрока, Строка.ТипДанных, Справочники.ТипыБазДанных.ПустаяСсылка());
		
		ОпределитьВозможноеПолеИсточника(НоваяСтрока);
		
	КонецЦикла;
	
	ОбновитьНомераАналитик();
	
	ТаблицаСоответствияБД.Сортировать("Порядок Возр, ПсевдонимАналитики Возр");
	ОбновитьТаблицуРесурсовПриемник();
	
КонецПроцедуры // ОбновитьТаблицыСоответствия()

&НаСервере
Процедура ОбновитьНомераАналитик()
	
	ЧислоАналитикДт=0;
	ЧислоАналитикКт=0;
	
	МассивАналитикиДт=ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("Субконто,ДтКт",Истина,"Дт"));
	
	Для Каждого Строка ИЗ МассивАналитикиДт Цикл
		
		ЧислоАналитикДт=ЧислоАналитикДт+1;
		Строка.КодАналитики="Аналитика"+ЧислоАналитикДт;
		
	КонецЦикла;
	
	МассивАналитикиКт=ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("Субконто,ДтКт",Истина,"Кт"));
	
	Для Каждого Строка ИЗ МассивАналитикиКт Цикл
		
		ЧислоАналитикКт=ЧислоАналитикКт+1;
		Строка.КодАналитики="Аналитика"+(ЧислоАналитикДт+ЧислоАналитикКт);
		
	КонецЦикла;	
	
КонецПроцедуры // ОбновитьНомераАналитик()
	
&НаСервере
Процедура ОпределитьВозможноеПолеИсточника(СтрокаПриемник)
	
	Для Каждого СтрокаИсточник ИЗ ДеревоПолейБД.ПолучитьЭлементы() Цикл
		
		Если СтрокаИсточник.ПолеБД=СтрокаПриемник.РеквизитОбъекта
			И ВозможнаУстановкаСоответствия(СтрокаИсточник.ТипЗначения,СтрокаПриемник.ТипЗначения) Тогда
			
			УстановитьСоответствие(СтрокаИсточник,СтрокаПриемник);
			СтрокаПриемник.СпособЗаполнения = Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаИсточник ИЗ ДеревоПолейБД.ПолучитьЭлементы() Цикл
		
		Если ВозможнаУстановкаСоответствия(СтрокаИсточник.ТипЗначения,СтрокаПриемник.ТипЗначения) Тогда
			
			УстановитьСоответствие(СтрокаИсточник,СтрокаПриемник);
			СтрокаПриемник.СпособЗаполнения = Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОпределитьВозможноеПолеИсточника()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСоответствие(СтрокаИсточник,СтрокаПриемник);
	
	СтрокаПриемник.ПолеБД			= СтрокаИсточник.ПолеБД;
	СтрокаПриемник.ПсевдонимБД		= СтрокаИсточник.НаименованиеБД;
	СтрокаПриемник.Сопоставлено	= Истина;
	
КонецПроцедуры // УстановитьСоответствие()

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьСоответствие(СтрокаПриемник);
	
	СтрокаПриемник.ПолеБД				= "";
	СтрокаПриемник.ПсевдонимБД			= "";
	СтрокаПриемник.Сопоставлено			= Ложь;
	СтрокаПриемник.ФиксированноеЗначение="";
	
КонецПроцедуры // УстановитьСоответствие()

&НаКлиентеНаСервереБезКонтекста
Функция ВозможнаУстановкаСоответствия(ТипЗначенияИсточник,ТипЗначенияПриемник)
	
	Для Каждого ТипЗначения ИЗ ТипЗначенияПриемник Цикл
		
		Если НЕ ТипЗначенияИсточник.НайтиПоЗначению(ТипЗначения.Значение)=Неопределено Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ВозможнаУстановкаСоответствия() 

&НаКлиенте
Процедура СчетКтПриемникПриИзменении(Элемент)
	
	ОбновитьТаблицыСоответствия(СчетКтПриемник,"Кт");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствияОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;		
	ДанныеПриемника=Элемент.ДанныеСтроки(Строка);	
	СоответствиеСоздать(ПараметрыПеретаскивания.Значение, ДанныеПриемника);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;	
	СоответствиеУдалить();
			
КонецПроцедуры

&НаКлиенте
Процедура РесурсИсточникПриИзменении(Элемент)
	
	Если Элементы.ТаблицаСоответствияРесурсов.ТекущиеДанные.Коэффициент=0 Тогда
		
		Элементы.ТаблицаСоответствияРесурсов.ТекущиеДанные.Коэффициент=1;
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Перем ВыбранноеЗначение;
	
	Если Поле.Имя="ТаблицаСоответствияПолеБД" Тогда
		
		СтандартнаяОбработка=Ложь;
		
		Если Элементы.ТаблицаСоответствия.ТекущиеДанные.СпособЗаполнения=ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение") Тогда
			
			Если Элементы.ТаблицаСоответствия.ТекущиеДанные.ТипДанныхПоля.Количество()>0 Тогда
				
				ОписаниеТипов=Новый ОписаниеТипов(Элементы.ТаблицаСоответствия.ТекущиеДанные.ТипДанныхПоля.ВыгрузитьЗначения());
				
				ОписаниеОповещенияПослеВводаФиксированногоЗначения = Новый ОписаниеОповещения("ПослеВводаФиксированногоЗначения",ЭтаФорма);
				ПоказатьВводЗначения(ОписаниеОповещенияПослеВводаФиксированногоЗначения,ВыбранноеЗначение,,ОписаниеТипов);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры
			
&НаКлиенте
Процедура ПослеВводаФиксированногоЗначения(ВыбранноеЗначение,Параметры) Экспорт
	
	Элементы.ТаблицаСоответствия.ТекущиеДанные.ФиксированноеЗначение=ВыбранноеЗначение;
	ПредставлениеАналитики=Строка(ВыбранноеЗначение);
	Элементы.ТаблицаСоответствия.ТекущиеДанные.ПолеБД=ПредставлениеАналитики;
	Элементы.ТаблицаСоответствия.ТекущиеДанные.ПсевдонимБД=ПредставлениеАналитики;
	Элементы.ТаблицаСоответствия.ТекущиеДанные.Сопоставлено=Истина;
	
	Модифицированность=Истина;
		
КонецПроцедуры // ПослеВводаФиксированногоЗначения()


&НаКлиенте
Процедура ТаблицаСоответствияСпособЗаполненияПриИзменении(Элемент)
	
	СоответствиеУдалить();
	Элементы.ТаблицаСоответствия.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаписатьСтруктуруПроводки()
	
	
КонецПроцедуры // ПроверитьЗаписатьСтруктуруПроводки()

&НаСервере
Функция СохранитьНастройкиНаСервере()
	
	Если НЕ ЗначениеЗаполнено(ШаблонПроводки) Тогда
		
		СправочникОбъект				= Справочники.ШаблоныПроводок.СоздатьЭлемент();
		СправочникОбъект.Владелец		= ШаблонКорректировки;
		
	Иначе
		
		СправочникОбъект=ШаблонПроводки.ПолучитьОбъект();
		
	КонецЕсли;
		
	ЗаполнитьЗначенияСвойств(СправочникОбъект,ЭтотОбъект);
	СправочникОбъект.СчетДт=СчетДтПриемник;
	СправочникОбъект.СчетКт=СчетКтПриемник;
	
	ТаблицаСоответствияРесурсовСервер=РеквизитФормыВЗначение("ТаблицаСоответствияРесурсов");
	
	СправочникОбъект.СоответствиеРесурсов.Загрузить(ТаблицаСоответствияРесурсовСервер);
	
	ИсточникОбъект=Справочники.ИсточникиДанныхДляРасчетов.СоздатьЭлемент();
	
	ЗаполнитьЗначенияСвойств(ИсточникОбъект,ЭтотОбъект);
	
	ИсточникОбъект.ТаблицаСоответствияБД				= РеквизитФормыВЗначение("ТаблицаСоответствияБД");
	ИсточникОбъект.ДеревоПолейБД						= РеквизитФормыВЗначение("ДеревоПолейБД");
	ИсточникОбъект.ДеревоПараметровОтбораБД				= РеквизитФормыВЗначение("ДеревоПараметровОтбораБД");
	ИсточникОбъект.мТаблицаПоказателейБД				= РеквизитФормыВЗначение("мТаблицаПоказателейБД");
	ИсточникОбъект.мТаблицаПроизводныхБД				= РеквизитФормыВЗначение("мТаблицаПроизводныхБД");
	
	СправочникОбъект.ТекстОтбора				= УправлениеОтчетамиУХ.СформироватьТекстОтбора(ИсточникОбъект.ДеревоПараметровОтбораБД);
	СправочникОбъект.ТекстОтбораРегистратор		= УправлениеОтчетамиУХ.СформироватьТекстОтбора(ИсточникОбъект.ДеревоПараметровОтбораБД,,,Истина);
	
	СправочникОбъект.ТаблицаПараметровОтбораБД.Загрузить(ИсточникОбъект.ПреобразоватьДеревоПараметровВТаблицу());
	СправочникОбъект.УточненияСпособовОпределения.Загрузить(ИсточникОбъект.УточненияСпособовОпределения.Выгрузить());
	
	ЗаполнитьПравилаИспользованияПолей(СправочникОбъект);
	
	Если СправочникОбъект.ТаблицаПараметровОтбораБД.Количество()>0 Тогда
		
		СправочникОбъект.ПредставлениеОтбора=УправлениеОтчетамиУХ.СформироватьПредставлениеОтбора(ИсточникОбъект.ДеревоПараметровОтбораБД);
		СправочникОбъект.УстановленДополнительныйОтбор=Истина;
		
	Иначе
		
		СправочникОбъект.ПредставлениеОтбора="";
		СправочникОбъект.УстановленДополнительныйОтбор=Ложь;
		
	КонецЕсли;
	
	Попытка
		
		СправочникОбъект.Записать();
		ШаблонПроводки=СправочникОбъект.Ссылка;
		Модифицированность=Ложь;
		
		Возврат Истина;
		
	Исключение
		
		ТекстСообщения=НСтр("ru = 'Не удалось записать шаблон проводки: '");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,,СтатусСообщения.Внимание);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ОбновитьПоказателиРесурсов(ТаблицаСоответствияРесурсовСервер)
	
	Для Каждого Строка ИЗ ТаблицаСоответствияРесурсовСервер Цикл
		
		СтрРесурс=ТаблицаСоответствияРесурсов.НайтиСтроки(Новый Структура("РесурсПриемник",Строка.РесурсПриемник));
		СтрРесурс[0].ПоказательРесурса=Строка.ПоказательРесурса;
		
	КонецЦикла;
		
КонецПроцедуры // ОбновитьПоказателиРесурсов() 

&НаСервере
Процедура ЗаполнитьПравилаИспользованияПолей(СправочникОбъект)
	
	СправочникОбъект.ПравилаИспользованияПолейЗапроса.Очистить();
	МассивСопоставленных=ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("Сопоставлено",Истина));
	
	Для Каждого СтрокаСоответствия ИЗ МассивСопоставленных Цикл
		
		СтрокаТаблицы=СправочникОбъект.ПравилаИспользованияПолейЗапроса.Добавить();
		СтрокаТаблицы.СпособЗаполнения	= СтрокаСоответствия.СпособЗаполнения;
		
		Если СтрокаСоответствия.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение Тогда
			
			СтрокаТаблицы.ФиксированноеЗначение=СтрокаСоответствия.ФиксированноеЗначение;
			
		Иначе		
			
			СтрокаТаблицы.Поле				= СтрокаСоответствия.ПолеБД;
			СтрокаТаблицы.Синоним			= СтрокаСоответствия.ПсевдонимБД;
			
		КонецЕсли;
		
		СтрокаТаблицы.РеквизитОбъекта	= СтрокаСоответствия.РеквизитОбъекта;
		СтрокаТаблицы.КодАналитики		= СтрокаСоответствия.КодАналитики;
		
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьПравилаИспользованияПолей() 

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	Если СохранитьНастройкиНаСервере() Тогда
		
		Оповестить("ЗаписанШаблонПроводки",ДокументБД);
		УстановитьВидимость();
		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если СохранитьНастройкиНаСервере() Тогда
		
		Оповестить("ЗаписанШаблонПроводки",ДокументБД);
		Закрыть();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВключить(Команда)
	
	Элементы.ФормаОтключитьВключить.Пометка=Не Элементы.ФормаОтключитьВключить.Пометка;
	Отключен=Элементы.ФормаОтключитьВключить.Пометка;
	УстановитьВидимость();
	
КонецПроцедуры












