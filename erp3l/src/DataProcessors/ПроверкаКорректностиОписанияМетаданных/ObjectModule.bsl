#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем ТабДок;
Перем РабочийМакет;
Перем ОбластьЗаголовок;
Перем ОбластьОбъектПроверки;
Перем ОбластьПоляДанные;
Перем ОбластьОбъектПроверкиПроизвольный;
Перем ОбластьПоляДанныеПроизвольный;
Перем ОбластьНастройкиТекущие;
Перем ОбластьНастройкиВнешние;
Перем ОбластьРеквизиты;
Перем ОбластьРезультат;

Перем СоответствиеСоединений;

Функция ПолучитьДокументПроверки() Экспорт
	
	СоответствиеСоединений=Новый Соответствие;
	СоответствиеСоединений.Вставить(Справочники.ТипыБазДанных.ТекущаяИБ,		Обработки.РаботаСМетаданнымиУХ.Создать());
	СоответствиеСоединений.Вставить(Справочники.ТипыБазДанных.ПустаяСсылка(),	Обработки.РаботаСМетаданнымиУХ.Создать());
	
	ТабДок=Новый ТабличныйДокумент;
	
	РабочийМакет=ПолучитьМакет("Макет");
	ОбластьЗаголовок					= РабочийМакет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОбъектПроверки				= РабочийМакет.ПолучитьОбласть("ОбластьОбъектПроверки");
	ОбластьПоляДанные					= РабочийМакет.ПолучитьОбласть("ОбластьПоляДанные");
	ОбластьОбъектПроверкиПроизвольный	= РабочийМакет.ПолучитьОбласть("ОбластьОбъектПроверкиПроизвольный");
	ОбластьПоляДанныеПроизвольный		= РабочийМакет.ПолучитьОбласть("ОбластьПоляДанныеПроизвольный");
	
	ОбластьНастройкиТекущие		= РабочийМакет.ПолучитьОбласть("ОбластьНастройкиТекущие");
	ОбластьНастройкиВнешние		= РабочийМакет.ПолучитьОбласть("ОбластьНастройкиВнешние");
	ОбластьРеквизиты			= РабочийМакет.ПолучитьОбласть("ОбластьРеквизиты");
	ОбластьРезультат			= РабочийМакет.ПолучитьОбласть("ОбластьРезультат");

	
	Если ТипЗнч(ОбъектДляПроверки)=Тип("СправочникСсылка.ВидыОтчетов") Тогда
		
		ПроверитьИсточникиПоВладельцуПравила();
		
	ИначеЕсли ТипЗнч(ОбъектДляПроверки)=Тип("СправочникСсылка.ПравилаОбработки") Тогда
		
		ПроверитьИсточникиПоПравилуОбработки(ОбъектДляПроверки);
		
	ИначеЕсли  ТипЗнч(ОбъектДляПроверки)=Тип("СправочникСсылка.ШаблоныТрансляций") Тогда
		
		ПроверитьИсточникиПоВладельцуПравила();
		
	ИначеЕсли  ТипЗнч(ОбъектДляПроверки)=Тип("СправочникСсылка.ТипыБазДанных") Тогда
		
		ПроверитьПоляСоответствийПоТипуБД();
		
	ИначеЕсли  ТипЗнч(ОбъектДляПроверки)=Тип("СправочникСсылка.СоответствиеВнешнимИБ") Тогда
		
		ПроверитьПоляСоответствийПоНастройке(ОбъектДляПроверки);
		
	КонецЕсли;
	
	Если ТабДок.ВысотаТаблицы>1 Тогда
		
		ОбластьРезультат.Параметры.ТекстРезультат=НСтр("ru = 'Обнаружены ошибки'");
		
	Иначе
		
		ОбластьРезультат.Параметры.ТекстРезультат=НСтр("ru = 'Ошибок не обнаружено'");
		
	КонецЕсли;

	ТабДок.Вывести(ОбластьРезультат);		
	
	Возврат ТабДок;
	
КонецФункции // ПолучитьДокументПроверки()

Процедура ПроверитьПоляСоответствийПоТипуБД()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СоответствиеВнешнимИБ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	|ГДЕ
	|	СоответствиеВнешнимИБ.Владелец = &Владелец
	|	И НЕ СоответствиеВнешнимИБ.СинхронизацияПоGUID
	|	И НЕ(СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ ССЫЛКА Справочник.ТаблицыADO
	|				ИЛИ СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ ССЫЛКА Справочник.ПланыСчетовБД)";
	
	Запрос.УстановитьПараметр("Владелец",ОбъектДляПроверки);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ПроверитьПоляСоответствийПоНастройке(Результат.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьИсточникиПоШаблонуТрансляции()

Процедура ПроверитьПоляСоответствийПоНастройке(НастройкаСоответствия)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СоответствиеВнешнимИБ.Ссылка КАК Ссылка,
	|	СоответствиеВнешнимИБ.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ ССЫЛКА Справочник.ДокументыБД
	|			ТОГДА ""Документ."" + СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ.Наименование
	|		КОГДА СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ ССЫЛКА Справочник.ПеречисленияБД
	|			ТОГДА ""Перечисление."" + СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ.Наименование
	|		КОГДА СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ ССЫЛКА Справочник.ПланыВидовХарактеристикБД
	|			ТОГДА ""ПланВидовХарактеристик."" + СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ.Наименование
	|		КОГДА СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ ССЫЛКА Справочник.РегистрыСведенийБД
	|			ТОГДА ""РегистрСведений."" + СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ.Наименование
	|		КОГДА СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ ССЫЛКА Справочник.СправочникиБД
	|			ТОГДА ""Справочник."" + СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ.Наименование
	|		ИНАЧЕ ""##Владелец##"" + СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ.Имя
	|	КОНЕЦ КАК ТаблицаАналитикиВИБ,
	|	СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ КАК ОписаниеОбъектаВИБ,
	|	ВЫБОР
	|		КОГДА СоответствиеВнешнимИБ.ОписаниеОбъектаТек ССЫЛКА Справочник.ДокументыБД
	|			ТОГДА ""Документ."" + СоответствиеВнешнимИБ.ОписаниеОбъектаТек.Наименование
	|		КОГДА СоответствиеВнешнимИБ.ОписаниеОбъектаТек ССЫЛКА Справочник.ПеречисленияБД
	|			ТОГДА ""Перечисление."" + СоответствиеВнешнимИБ.ОписаниеОбъектаТек.Наименование
	|		КОГДА СоответствиеВнешнимИБ.ОписаниеОбъектаТек ССЫЛКА Справочник.ПланыВидовХарактеристикБД
	|			ТОГДА ""ПланВидовХарактеристик."" + СоответствиеВнешнимИБ.ОписаниеОбъектаТек.Наименование
	|		КОГДА СоответствиеВнешнимИБ.ОписаниеОбъектаТек ССЫЛКА Справочник.РегистрыСведенийБД
	|			ТОГДА ""РегистрСведений."" + СоответствиеВнешнимИБ.ОписаниеОбъектаТек.Наименование
	|		КОГДА СоответствиеВнешнимИБ.ОписаниеОбъектаТек ССЫЛКА Справочник.СправочникиБД
	|			ТОГДА ""Справочник."" + СоответствиеВнешнимИБ.ОписаниеОбъектаТек.Наименование
	|		ИНАЧЕ ""##Владелец##"" + СоответствиеВнешнимИБ.ОписаниеОбъектаТек.Имя
	|	КОНЕЦ КАК ТаблицаАналитикиТек,
	|	СоответствиеВнешнимИБ.ОписаниеОбъектаТек КАК ОписаниеОбъектаТек,
	|	СоответствиеВнешнимИБ.СоответствиеЗначенийПеречислений.(
	|		ЗначениеВнешнейИБ КАК ЗначениеВнешнейИБ,
	|		ЗначениеТекущейИБ КАК ЗначениеТекущейИБ
	|	) КАК СоответствиеЗначенийПеречислений,
	|	СоответствиеВнешнимИБ.СоответствиеРеквизитов.(
	|		РеквизитОбъектаКонсолидации КАК РеквизитОбъектаКонсолидации,
	|		РеквизитОбъектаВнешнейИБ КАК РеквизитОбъектаВнешнейИБ,
	|		ПримитивныйТип КАК ПримитивныйТип
	|	) КАК СоответствиеРеквизитов,
	|	СоответствиеВнешнимИБ.Владелец КАК ТипБД
	|ИЗ
	|	Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	|ГДЕ
	|	СоответствиеВнешнимИБ.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",НастройкаСоответствия);
	Результат=Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	ПротоколТек=ПроверитьРеквизитыТек(Результат);
	ПротоколВИБ=ПроверитьРеквизитыВИБ(Результат);
	
	Если ПротоколТек=Неопределено И ПротоколВИБ=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.ТипОбъекта=Нстр("ru = 'Настройка соответствия'");
	ОбластьЗаголовок.Параметры.ОбъектСсылка=Результат.Ссылка;							
			
	ТабДок.Вывести(ОбластьЗаголовок);
	
	Если НЕ ПротоколТек=Неопределено Тогда
		
		ТабДок.Вывести(ОбластьНастройкиТекущие);
		ТабДок.Вывести(ПротоколТек);
		
	КонецЕсли;
	
	Если НЕ ПротоколВИБ=Неопределено Тогда
		
		ТабДок.Вывести(ОбластьНастройкиВнешние);
		ТабДок.Вывести(ПротоколВИБ);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьИсточникиПоШаблонуТрансляции()

Функция ПолучитьТаблицуВладельца(ОписаниеОбъекта)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТабличныеЧастиБД.Владелец ССЫЛКА Справочник.ДокументыБД
	|			ТОГДА ""Документ."" + ТабличныеЧастиБД.Владелец.Наименование
	|		КОГДА ТабличныеЧастиБД.Владелец ССЫЛКА Справочник.ПланыВидовХарактеристикБД
	|			ТОГДА ""ПланВидовХарактеристик."" + ТабличныеЧастиБД.Владелец.Наименование
	|		ИНАЧЕ ""Справочник."" + ТабличныеЧастиБД.Владелец.Наименование
	|	КОНЕЦ КАК ТаблицаВладельца
	|ИЗ
	|	Справочник.ТабличныеЧастиБД КАК ТабличныеЧастиБД
	|ГДЕ
	|	ТабличныеЧастиБД.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ОписаниеОбъекта);
	
	Результат=Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	Возврат Результат.ТаблицаВладельца;
		
КонецФункции // ПолучитьТаблицуВладельца()

Функция ПроверитьРеквизитыТек(Результат)
	
	ТаблицаПолей=Новый ТаблицаЗначений;
	ТаблицаПолей.Колонки.Добавить("ТекстВыборкиПоля");
	ТаблицаПолей.Колонки.Добавить("ИмяРеквизита");
	
	ТаблицаАналитики=Результат.ТаблицаАналитикиТек;
	
	Если СтрНайти(ТаблицаАналитики,"##Владелец##")>0 Тогда
		
		ТаблицаАналитики=СтрЗаменить(ТаблицаАналитики,"##Владелец##",ПолучитьТаблицуВладельца(Результат.ОписаниеОбъектаТек)+".");
		
	КонецЕсли;
	
	ТекстПоля="";
	
	СоответствиеЗначенийПеречислений = Результат.СоответствиеЗначенийПеречислений.Выгрузить();
	СоответствиеРеквизитов			 = Результат.СоответствиеРеквизитов.Выгрузить();
	
	Если СтрНайти(ТаблицаАналитики,"Перечисление.")>0 И СоответствиеЗначенийПеречислений.Количество()=0 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если СоответствиеЗначенийПеречислений.Количество()>0 Тогда
		
		ТекстИсточник="";
		
		Для Каждого Строка ИЗ СоответствиеЗначенийПеречислений Цикл
			
			НоваяСтрока=ТаблицаПолей.Добавить();
			НоваяСтрока.ТекстВыборкиПоля="ЗНАЧЕНИЕ("+ТаблицаАналитики+"."+Строка.ЗначениеТекущейИБ+")";
			НоваяСтрока.ИмяРеквизита=Строка.ЗначениеТекущейИБ;
			
			ТекстПоля=ТекстПоля+",
			|"+НоваяСтрока.ТекстВыборкиПоля;
			
		КонецЦикла;
		
	Иначе
		
		ТекстИсточник=" ИЗ "+ТаблицаАналитики;
		
		Для Каждого Строка ИЗ СоответствиеРеквизитов Цикл
						
			НоваяСтрока=ТаблицаПолей.Добавить();
			НоваяСтрока.ТекстВыборкиПоля=Строка.РеквизитОбъектаКонсолидации+" КАК "+Строка.РеквизитОбъектаКонсолидации;
			НоваяСтрока.ИмяРеквизита=Строка.РеквизитОбъектаКонсолидации;
			
			ТекстПоля=ТекстПоля+",
			|"+НоваяСтрока.ТекстВыборкиПоля;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстЗапроса="ВЫБРАТЬ "+Сред(ТекстПоля,2)+ТекстИсточник;
	
	ТекстОшибкиОбщий=ПроверитьТекстЗапроса(ТекстЗапроса,Справочники.ТипыБазДанных.ТекущаяИБ);
	
	Если ПустаяСтрока(ТекстОшибкиОбщий) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Протокол=Новый ТабличныйДокумент;
		
	Для Каждого Строка ИЗ ТаблицаПолей Цикл
		
		ТекстЗапроса="ВЫБРАТЬ 
		|"+Строка.ТекстВыборкиПоля+ТекстИсточник;
				
		ТекстОшибкиПоле=ПроверитьТекстЗапроса(ТекстЗапроса,Справочники.ТипыБазДанных.ТекущаяИБ);

		Если ПустаяСтрока(ТекстОшибкиПоле) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ОбластьРеквизиты.Параметры.ИмяРеквизита=Строка.ИмяРеквизита;
		ОбластьРеквизиты.Параметры.Ссылка=Результат.Ссылка;
		ОбластьРеквизиты.Параметры.ТекстОшибки=ТекстОшибкиПоле;
		
		Протокол.Вывести(ОбластьРеквизиты);
		
	КонецЦикла;
	
	Возврат Протокол;

КонецФункции // ПроверитьРеквизитыТек()

Функция ПроверитьРеквизитыВИБ(Результат)
	
	ТаблицаПолей=Новый ТаблицаЗначений;
	ТаблицаПолей.Колонки.Добавить("ТекстВыборкиПоля");
	ТаблицаПолей.Колонки.Добавить("ИмяРеквизита");
	
	ТаблицаАналитики=Результат.ТаблицаАналитикиВИБ;
	
	Если СтрНайти(ТаблицаАналитики,"##Владелец##")>0 Тогда
		
		ТаблицаАналитики=СтрЗаменить(ТаблицаАналитики,"##Владелец##",ПолучитьТаблицуВладельца(Результат.ОписаниеОбъектаВИБ)+".");
		
	КонецЕсли;
	
	ТекстПоля="";
	
	СоответствиеЗначенийПеречислений = Результат.СоответствиеЗначенийПеречислений.Выгрузить();
	СоответствиеРеквизитов			 = Результат.СоответствиеРеквизитов.Выгрузить();
	
	Если СтрНайти(ТаблицаАналитики,"Перечисление.")>0 И СоответствиеЗначенийПеречислений.Количество()=0 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если СоответствиеЗначенийПеречислений.Количество()>0 Тогда
		
		ТекстИсточник="";
		
		Для Каждого Строка ИЗ СоответствиеЗначенийПеречислений Цикл
			
			НоваяСтрока=ТаблицаПолей.Добавить();
			НоваяСтрока.ТекстВыборкиПоля="ЗНАЧЕНИЕ("+ТаблицаАналитики+"."+Строка.ЗначениеВнешнейИБ+")";
			НоваяСтрока.ИмяРеквизита=Строка.ЗначениеВнешнейИБ;
			
			ТекстПоля=ТекстПоля+",
			|"+НоваяСтрока.ТекстВыборкиПоля;
			
		КонецЦикла;
		
	Иначе
		
		ТекстИсточник=" ИЗ "+ТаблицаАналитики;
		
		Для Каждого Строка ИЗ СоответствиеРеквизитов Цикл
						
			НоваяСтрока=ТаблицаПолей.Добавить();
			НоваяСтрока.ТекстВыборкиПоля= Строка.РеквизитОбъектаВнешнейИБ+" КАК "+Строка.РеквизитОбъектаВнешнейИБ;
			НоваяСтрока.ИмяРеквизита	= Строка.РеквизитОбъектаВнешнейИБ;
			
			ТекстПоля=ТекстПоля+",
			|"+НоваяСтрока.ТекстВыборкиПоля;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстЗапроса="ВЫБРАТЬ "+Сред(ТекстПоля,2)+ТекстИсточник;
	
	ТекстОшибкиОбщий=ПроверитьТекстЗапроса(ТекстЗапроса,Результат.ТипБД);
	
	Если ПустаяСтрока(ТекстОшибкиОбщий) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Протокол=Новый ТабличныйДокумент;
		
	Для Каждого Строка ИЗ ТаблицаПолей Цикл
		
		ТекстЗапроса="ВЫБРАТЬ 
		|"+Строка.ТекстВыборкиПоля+ТекстИсточник;
				
		ТекстОшибкиПоле=ПроверитьТекстЗапроса(ТекстЗапроса,Результат.ТипБД);

		Если ПустаяСтрока(ТекстОшибкиПоле) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ОбластьРеквизиты.Параметры.ИмяРеквизита=Строка.ИмяРеквизита;
		ОбластьРеквизиты.Параметры.Ссылка=Результат.Ссылка;
		ОбластьРеквизиты.Параметры.ТекстОшибки=ТекстОшибкиПоле;
		
		Протокол.Вывести(ОбластьРеквизиты);
		
	КонецЦикла;
	
	Возврат Протокол;

КонецФункции // ПроверитьРеквизитыТек()

Процедура ПроверитьИсточникДанныхПроизвольныйЗапрос(ДанныеИсточника)
	
	ТекстОшибки=ПроверитьТекстЗапроса(ДанныеИсточника.ТекстЗапросаМодуля,ДанныеИсточника.ТипБД);
	
	Если ПустаяСтрока(ТекстОшибки) Тогда
		
		Возврат;
		
	КонецЕсли;
		
	ОбластьОбъектПроверкиПроизвольный.Параметры.НаименованиеОбъекта=ДанныеИсточника.Наименование;
	ОбластьОбъектПроверкиПроизвольный.Параметры.Ссылка=ДанныеИсточника.Ссылка;
		
	ТабДок.Вывести(ОбластьОбъектПроверки);
	
	ОбластьПоляДанныеПроизвольный.ПолеБД=ДанныеИсточника.ТекстЗапросаМодуля;
	ОбластьПоляДанныеПроизвольный.Параметры.Ссылка=ДанныеИсточника.Ссылка;
	ОбластьПоляДанныеПроизвольный.Параметры.ТекстОшибки=ТекстОшибки;
		
	ТабДок.Вывести(ОбластьПоляДанныеПроизвольный);
	
	
КонецПроцедуры // ПроверитьИсточникиПоШаблонуТрансляции()


Процедура ПроверитьИсточникиПоВладельцуПравила()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов КАК НазначениеРасчетов
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ (НЕ ИсточникиДанныхДляРасчетов.НазначениеРасчетов.ПометкаУдаления) И 
	|	ВЫРАЗИТЬ(ИсточникиДанныхДляРасчетов.НазначениеРасчетов КАК Справочник.ПравилаОбработки).Владелец = &Видотчета";
	
	Запрос.УстановитьПараметр("ВидОтчета",ОбъектДляПроверки);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	ТабДок=Новый ТабличныйДокумент;

	Пока Результат.Следующий() Цикл
		
		ПроверитьИсточникиПоПравилуОбработки(Результат.НазначениеРасчетов);
		
	КонецЦикла;
		
КонецПроцедуры // ПроверитьИсточникиПоВидуОтчета()

Процедура ПроверитьИсточникиПоПравилуОбработки(ПравилоОбработки)

	ОбластьЗаголовок.Параметры.ТипОбъекта=НСтр("ru = 'Правило расчета'");
	ОбластьЗаголовок.Параметры.ОбъектСсылка=ПравилоОбработки;
	
	ТабДок.Вывести(ОбластьЗаголовок);
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ
	             |	ИсточникиДанныхДляРасчетов.ТаблицаПараметровОтбораБД.(
	             |		ПолеБД КАК ПолеБД,
	             |		НаименованиеБД КАК НаименованиеБД,
	             |		ТекстМодуля КАК ТекстМодуля,
	             |		СпособВычисленияПараметра КАК СпособВычисленияПараметра
	             |	) КАК ТаблицаПараметровОтбораБД,
	             |	ИсточникиДанныхДляРасчетов.Ссылка КАК Ссылка,
	             |	ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса.(
	             |		Поле КАК Поле,
	             |		Синоним КАК Синоним,
	             |		СпособЗаполнения КАК СпособЗаполнения
	             |	) КАК ПравилаИспользованияПолейЗапроса,
	             |	ИсточникиДанныхДляРасчетов.СпособПолучения КАК СпособПолучения,
	             |	ИсточникиДанныхДляРасчетов.ТекстЗапросаМодуля КАК ТекстЗапросаМодуля,
	             |	ИсточникиДанныхДляРасчетов.ТипБД КАК ТипБД,
	             |	ИсточникиДанныхДляРасчетов.РегистрБД.Наименование КАК НаименованиеРегистра,
	             |	ИсточникиДанныхДляРасчетов.ОбъектБД.Наименование КАК ОбъектБД,
	             |	ИсточникиДанныхДляРасчетов.ТабличнаяЧастьБД.Имя КАК ТабличнаяЧастьБД,
	             |	ИсточникиДанныхДляРасчетов.Наименование КАК Наименование,
	             |	ИсточникиДанныхДляРасчетов.РесурсРегистра КАК РесурсРегистра,
	             |	ИсточникиДанныхДляРасчетов.ОсновнаяТаблицаРегистра КАК ОсновнаяТаблицаРегистра,
	             |	ИсточникиДанныхДляРасчетов.РегистрБД КАК РегистрБД
	             |ИЗ
	             |	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	             |ГДЕ
	             |	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &НазначениеРасчетов";
	
	Запрос.УстановитьПараметр("НазначениеРасчетов",ПравилоОбработки);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ПроверитьПоляИсточникаДанных(Результат);
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьИсточникиПоПравилуОбработки() 

Процедура ПроверитьПоляИсточникаДанных(ДанныеИсточника)
	
	Если ДанныеИсточника.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос
		ИЛИ ДанныеИсточника.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос Тогда
		
		ПроверитьИсточникДанныхПроизвольныйЗапрос(ДанныеИсточника);
		
	Иначе
		
		ПроверитьИсточникДанныхПараметричексийЗапрос(ДанныеИсточника);
				
	КонецЕсли;
		
КонецПроцедуры // ПроверитьПоляИсточникаДанных()

Процедура ПроверитьИсточникДанныхТаблицаБДВнутренний(ДанныеИсточника)
	
	
	
	
КонецПроцедуры // ПроверитьИсточникДанныхТаблицаБДВнутренний()

Процедура ПроверитьИсточникДанныхТаблицаБДВнешний(ДанныеИсточника)
	
	
	
	
КонецПроцедуры // ПроверитьИсточникДанныхТаблицаБДВнутренний()  

Процедура ДобавитьПризнакДт(ПолеРегистра,Синоним,ДанныеИсточника)
	
	Если Синоним="Значение" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ДанныеИсточника.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии
		ИЛИ ДанныеИсточника.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии Тогда
		
		МассивПутей=СтрРазделить(ПолеРегистра,".",Ложь);
		ИмяПоля=МассивПутей[0];
		
		СтрИзмерение=ДанныеИсточника.РегистрБД.Измерения.Найти(ИмяПоля,"Имя");
		
		Если СтрИзмерение=Неопределено ИЛИ СтрИзмерение.Балансовый Тогда
			
			Возврат;
			
		Иначе
			
			МассивПутей[0]=МассивПутей[0]+"Дт";
			ПолеРегистра=СтрСоединить(МассивПутей,".");
			
		КонецЕсли;
				
	Иначе
		
		Возврат;
		
	КонецЕсли;
			
КонецПроцедуры // ДобавитьПризнакДт() 

Процедура ПроверитьИсточникДанныхПараметричексийЗапрос(ДанныеИсточника)	
	
	ТаблицаИсточник=ПолучитьТаблицуИсточника(ДанныеИсточника);
	ТекстПоля="";
	
	Если ПустаяСтрока(ТаблицаИсточник) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТаблицаПолей=Новый ТаблицаЗначений;
	ТаблицаПолей.Колонки.Добавить("ПолеБД");
	ТаблицаПолей.Колонки.Добавить("Синоним");
	ТаблицаПолей.Колонки.Добавить("Использование");
		
	ИспользуемыеПоля=ДанныеИсточника.ПравилаИспользованияПолейЗапроса.Выбрать();
	
	Пока ИспользуемыеПоля.Следующий() Цикл
		
		Если НЕ (ИспользуемыеПоля.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы
			И ЗначениеЗаполнено(ИспользуемыеПоля.Поле)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ИспользуемыеПоля.Синоним="Значение" И ДанныеИсточника.ОсновнаяТаблицаРегистра Тогда
			
			ПолеРегистра=ДанныеИсточника.РесурсРегистра;
			Синоним=ДанныеИсточника.РесурсРегистра+"_Поля";
			
		Иначе
			
			ПолеРегистра=ИспользуемыеПоля.Поле;
			Синоним=СтрЗаменить(ИспользуемыеПоля.Поле,".","_")+"_Поля";
			
		КонецЕсли; 
		
		ДобавитьПризнакДт(ПолеРегистра,ИспользуемыеПоля.Синоним,ДанныеИсточника);
		
		Если НЕ ТаблицаПолей.Найти(ПолеРегистра,"ПолеБД")=Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекстПоля=ТекстПоля+",
		|"+ПолеРегистра+" КАК "+Синоним;
		
		НоваяСтрока=ТаблицаПолей.Добавить();
		НоваяСтрока.ПолеБД=ПолеРегистра;
		НоваяСтрока.Синоним=ИспользуемыеПоля.Синоним;
		НоваяСтрока.Использование=НСтр("ru = 'Выбранные поля'");
		
	КонецЦикла;
	
	ПоляОтбора=ДанныеИсточника.ТаблицаПараметровОтбораБД.Выбрать();
	
	Пока ПоляОтбора.Следующий() Цикл
		
		Если (НЕ ЗначениеЗаполнено(ПоляОтбора.ПолеБД)) 
			ИЛИ ПоляОтбора.ПолеБД="ДатаНач"
			ИЛИ ПоляОтбора.ПолеБД="ДатаКон" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ПолеРегистра=ПоляОтбора.ПолеБД;
		ДобавитьПризнакДт(ПолеРегистра,ПоляОтбора.НаименованиеБД,ДанныеИсточника);
			
		Если НЕ ТаблицаПолей.Найти(ПолеРегистра,"ПолеБД")=Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
	
		ТекстПоля=ТекстПоля+",
		|"+ПолеРегистра+" КАК "+СтрЗаменить(ПолеРегистра,".","_")+"_Отбор";
		
		НоваяСтрока			= ТаблицаПолей.Добавить();
		НоваяСтрока.ПолеБД	= ПоляОтбора.ПолеБД;
		НоваяСтрока.Синоним	= ПоляОтбора.НаименованиеБД;
		НоваяСтрока.Использование=НСтр("ru = 'Отбор'");
		
	КонецЦикла;
	
	ТекстЗапроса="ВЫБРАТЬ "+Сред(ТекстПоля,2)+"
	|ИЗ "+ТаблицаИсточник;
	
	ТекстОшибкиОбщий=ПроверитьТекстЗапроса(ТекстЗапроса,ДанныеИсточника.ТипБД);
	
	Если ПустаяСтрока(ТекстОшибкиОбщий) Тогда
		
		Возврат;
		
	КонецЕсли;
		
	ОбластьОбъектПроверки.Параметры.НаименованиеОбъекта=ДанныеИсточника.Наименование;
	ОбластьОбъектПроверки.Параметры.Ссылка=ДанныеИсточника.Ссылка;
		
	ТабДок.Вывести(ОбластьОбъектПроверки);
		
	Для Каждого Строка ИЗ ТаблицаПолей Цикл
		
		ТекстЗапроса="ВЫБРАТЬ 
		|"+Строка.ПолеБД+" КАК "+СтрЗаменить(Строка.ПолеБД,".","_")+"
		|ИЗ "+ТаблицаИсточник;
		
		ТекстОшибкиПоле=ПроверитьТекстЗапроса(ТекстЗапроса,ДанныеИсточника.ТипБД);

		Если ПустаяСтрока(ТекстОшибкиПоле) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОбластьПоляДанные.Параметры,Строка);
		ОбластьПоляДанные.Параметры.Ссылка=ДанныеИсточника.Ссылка;
		ОбластьПоляДанные.Параметры.ТекстОшибки=ТекстОшибкиПоле;
		
		ТабДок.Вывести(ОбластьПоляДанные);
		
	КонецЦикла;
		
КонецПроцедуры // ПроверитьИсточникДанныхПараметрическаяНастройка()

Функция ПолучитьТаблицуИсточника(ДанныеИсточника)
	
	Если ДанныеИсточника.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеДокументы
		ИЛИ ДанныеИсточника.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеДокументы Тогда
		
		Возврат "Документ."+ДанныеИсточника.ОбъектБД+?(ЗначениеЗаполнено(ДанныеИсточника.ТабличнаяЧастьБД),"."+ДанныеИсточника.ТабличнаяЧастьБД,"");
		
	ИначеЕсли ДанныеИсточника.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники
		ИЛИ ДанныеИсточника.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеСправочники Тогда
		
		Возврат "Справочник."+ДанныеИсточника.ОбъектБД+?(ЗначениеЗаполнено(ДанныеИсточника.ТабличнаяЧастьБД),"."+ДанныеИсточника.ТабличнаяЧастьБД,"");
		
	ИначеЕсли ДанныеИсточника.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
		ИЛИ ДанныеИсточника.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
		
		Если СтрНайти(ДанныеИсточника.ТекстЗапросаМодуля,".ДвиженияССубконто(")>0 Тогда			
			
			Возврат "РегистрБухгалтерии."+ДанныеИсточника.НаименованиеРегистра+".ДвиженияССубконто(&ДатаНач,&ДатаКон)";
			
		ИначеЕсли СтрНайти(ДанныеИсточника.ТекстЗапросаМодуля,".ОстаткиИОбороты(")>0 Тогда			
			
			Возврат "РегистрБухгалтерии."+ДанныеИсточника.НаименованиеРегистра+".ОстаткиИОбороты(&ДатаНач,&ДатаКон)";
			
		ИначеЕсли СтрНайти(ДанныеИсточника.ТекстЗапросаМодуля,".ОборотыДтКт(")>0 Тогда			
			
			Возврат "РегистрБухгалтерии."+ДанныеИсточника.НаименованиеРегистра+".ОборотыДтКт(&ДатаНач,&ДатаКон)";
			
		Иначе
			
			Возврат "РегистрБухгалтерии."+ДанныеИсточника.НаименованиеРегистра;
			
		КонецЕсли;		
		
	ИначеЕсли ДанныеИсточника.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
		ИЛИ ДанныеИсточника.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления Тогда
		
		Если СтрНайти(ДанныеИсточника.ТекстЗапросаМодуля,".ОстаткиИОбороты(")>0 Тогда			
			
			Возврат "РегистрНакопления."+ДанныеИсточника.НаименованиеРегистра+".ОстаткиИОбороты(&ДатаНач,&ДатаКон)";
			
		ИначеЕсли СтрНайти(ДанныеИсточника.ТекстЗапросаМодуля,".Обороты(")>0 Тогда
			
			Возврат "РегистрНакопления."+ДанныеИсточника.НаименованиеРегистра+".Обороты(&ДатаНач,&ДатаКон)";
			
		Иначе
			
			Возврат "РегистрНакопления."+ДанныеИсточника.НаименованиеРегистра
			
		КонецЕсли;
		
	ИначеЕсли ДанныеИсточника.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений
		ИЛИ ДанныеИсточника.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений Тогда
		
		Если СтрНайти(ДанныеИсточника.ТекстЗапросаМодуля,".СрезПервых(")>0 Тогда
			
			Возврат "РегистрСведений."+ДанныеИсточника.НаименованиеРегистра+".СрезПервых(&ДатаНач)";
			
		ИначеЕсли СтрНайти(ДанныеИсточника.ТекстЗапросаМодуля,".СрезПоследних(")>0 Тогда
			
			Возврат "РегистрСведений."+ДанныеИсточника.НаименованиеРегистра+".СрезПоследних(&ДатаНач)";
			
		Иначе
			
			Возврат "РегистрСведений."+ДанныеИсточника.НаименованиеРегистра;
			
		КонецЕсли;
		
	ИначеЕсли ДанныеИсточника.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
		
		Возврат "РегистрСведений.ЗначенияПоказателейМакет";
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции // ПолучитьТаблицуИсточника() 

Функция ПроверитьТекстЗапроса(ТекстЗапроса,ТипБД)
	
	Если ТипБД=Справочники.ТипыБазДанных.ПустаяСсылка() ИЛИ ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ Тогда
		
		
		ПостроительПроверка=Новый ПостроительЗапроса;
		
		Попытка
			
			ПостроительПроверка.Текст = ТекстЗапроса;
			Возврат "";
			
		Исключение
			
			Возврат ОписаниеОшибки();
			
		КонецПопытки;
		
	Иначе
		
		ТекСоединениеВИБ=ПолучитьСоединение(ТипБД);
		
		ОписаниеЗапроса=РаботаСОбъектамиМетаданныхВнутреннийУХ.ПолучитьСтруктуруОписанияПроизвольногоЗапросаБД(ТекСоединениеВИБ,ТекстЗапроса);
		
		Если ОписаниеЗапроса.Свойство("ОписаниеОшибки") Тогда
			
			Возврат ОписаниеЗапроса.ОписаниеОшибки;
			
		Иначе
			
			Возврат "";
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецФункции // ПроверитьТекстЗапроса()

Функция ПолучитьСоединение(ТипБД)
	
	СуществующееСоединение=СоответствиеСоединений.Получить(ТипБД);
	
	Если СуществующееСоединение=Неопределено Тогда
		
		СуществующееСоединение = ОбщегоНазначенияУХ.ПолучитьСоединениеСВИБПоУмолчанию(ТипБД,1);
		СоответствиеСоединений.Вставить(ТипБД,СуществующееСоединение);
		
	КонецЕсли;
	
	Возврат СуществующееСоединение;	
	
КонецФункции // ПолучитьСоединение() 

#КонецЕсли
