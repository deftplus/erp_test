#Область ОбработкаОсновныхСобытийФормы


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Дерево = Неопределено
		 ИЛИ ТипЗнч(Параметры.Дерево) <> Тип("ДанныеФормыДерево") Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Нстр("ru = 'Не указано дерево для выбора значений!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОбрабатыватьПередРазворачиванием = Параметры.ОбрабатыватьПередРазворачиванием;
	Если ОбрабатыватьПередРазворачиванием Тогда
		ДопПараметрыВладельца = Параметры.ДопПараметрыВладельца;
	КонецЕсли;
	
	ДеревоОбъект = ДанныеФормыВЗначение(Параметры.Дерево, Тип("ДеревоЗначений"));
	
	Если Параметры.Свойство("Заголовок") Тогда
		ЭтотОбъект.Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
	ИменаПоказываемыхКолонок = Неопределено;
	Параметры.Свойство("ИменаПоказываемыхКолонок", ИменаПоказываемыхКолонок);
	
	ТекСтрокаИзвне = Неопределено;
	Параметры.Свойство("АктивизироватьСтроку", ТекСтрокаИзвне);
	
	// Создание реквизита формы "Дерево"
	МассивДобавляемыхРеквизитов = Новый Массив;
    // В дерево добавляем все колонки.
	Для Каждого Колонка Из ДеревоОбъект.Колонки Цикл
        МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "Дерево"));
    КонецЦикла;
    ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	ЗначениеВРеквизитФормы(ДеревоОбъект, "Дерево");

	// Отображаем только необходимые колонки.
	ИспользуемыеКолонкиДерева = ПолучитьКолонкиДереваПоОтбору(ДеревоОбъект,
			ИменаПоказываемыхКолонок);
    Для Каждого Колонка Из ИспользуемыеКолонкиДерева Цикл
        НовыйЭлемент = Элементы.Добавить(Колонка.Имя, Тип("ПолеФормы"), Элементы.Дерево);
        НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
        НовыйЭлемент.ПутьКДанным = "Дерево." + Колонка.Имя;
		Если ИменаПоказываемыхКолонок <> Неопределено Тогда
			НаименованиеКолонки = ИменаПоказываемыхКолонок[Колонка.Имя];
			Если НЕ ПустаяСтрока(НаименованиеКолонки) Тогда
				НовыйЭлемент.Заголовок = НаименованиеКолонки;
			КонецЕсли;
		КонецЕсли;
    КонецЦикла;
	
	РазвернутьДоСтроки = Ложь;
	Если ТекСтрокаИзвне <> Неопределено Тогда
		// Активизируем строку в дереве
		СтрокаДереваИзвне = Параметры.Дерево.НайтиПоИдентификатору(ТекСтрокаИзвне);
		мИндексовВДереве = ОбщегоНазначенияКлиентСерверУХ.ПолучитьИндексыПутиКЭлементуВДеревеЗначений(
							Параметры.Дерево, СтрокаДереваИзвне);
		СтрокаВМестномДереве = ОбщегоНазначенияКлиентСерверУХ.ПолучитьЭлементДереваФормыПоИндексам(
								Дерево, мИндексовВДереве);
		Элементы.Дерево.ТекущаяСтрока = СтрокаВМестномДереве.ПолучитьИдентификатор();
		РазвернутьДоСтроки = Истина;
		
	ИначеЕсли Параметры.РазворачиватьПервыйУровень Тогда
		ЭлементыПервогоУровня = Дерево.ПолучитьЭлементы();
		Если ЭлементыПервогоУровня.Количество() > 0 Тогда
			Элементы.Дерево.ТекущаяСтрока = ЭлементыПервогоУровня[0].ПолучитьИдентификатор();
			РазвернутьДоСтроки = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если РазвернутьДоСтроки Тогда
		Элементы.Дерево.Развернуть(Элементы.Дерево.ТекущаяСтрока, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Результат = Новый Структура;
	Результат.Вставить("мИндексов", Новый Массив);
	Результат.Вставить("Дерево", Дерево);
	ЭтотОбъект.Закрыть(Результат);
КонецПроцедуры


#КонецОбласти


#Область ОбработкаСобытийЭлементовФормы


&НаКлиенте
Процедура ДеревоВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекЭлементДереваФормы = Дерево.НайтиПоИдентификатору(Значение);
	мИндексов = ОбщегоНазначенияКлиентСерверУХ
				.ПолучитьИндексыПутиКЭлементуВДеревеЗначений(Дерево, ТекЭлементДереваФормы);
				
	Результат = Новый Структура;
	Результат.Вставить("мИндексов", мИндексов);
	Результат.Вставить("Дерево", Дерево);
	ЭтотОбъект.Закрыть(Результат);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередРазворачиванием(Элемент, Строка, Отказ)
	Если ОбрабатыватьПередРазворачиванием Тогда
		Если флУжеОбработаноСобытиеПередРазворачиванием Тогда
			флУжеОбработаноСобытиеПередРазворачиванием = Ложь;
			Возврат;
		КонецЕсли;
		
		Отказ = Истина;
		РазворачиваемаяСтрока = Строка;
		// Для потенциальных контекстных серверных вызовов в форме-владельце
		ПодключитьОбработчикОжидания("ОбработатьСобытиеДеревоПередРазворачиванием", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыНаКлиенте


&НаКлиенте
Процедура ОбработатьСобытиеДеревоПередРазворачиванием()
	Если РазворачиваемаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ВладелецФормы.ПередРазворачиваниемСтрокиДереваПолейИсточника(
		Элементы.Дерево, РазворачиваемаяСтрока, Отказ, ДопПараметрыВладельца);
		
	Если Не Отказ Тогда
		флУжеОбработаноСобытиеПередРазворачиванием = Истина;
		Элементы.Дерево.Развернуть(РазворачиваемаяСтрока, Ложь);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыНаСервере


// Отобрать колонки дерева значений по именам из списка.
//
// Параметры:
//  ДеревоОбъект  - ДеревоЗначений - дерево, для которого нужно получить
//		массив колонок.
//  ИменаКолонокДляОтбора - Неопределено, Массив(Строка) - массив имен
//		колонок. Либо Неопределено, в этом случае возвращает все колонки.
// 
// Возвращаемое значение:
//   Массив(КолонкаДереваЗначений) - колонки дерева с учетом отбора по именам.
//
&НаСервере
Функция ПолучитьКолонкиДереваПоОтбору(ДеревоОбъект, ИменаКолонокДляОтбора)
	мКолонок = Новый Массив;
	Для Каждого Колонка Из ДеревоОбъект.Колонки Цикл
		Если ИменаКолонокДляОтбора <> Неопределено 
			 И ИменаКолонокДляОтбора[Колонка.Имя] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		мКолонок.Добавить(Колонка);
	КонецЦикла;
	
	Возврат мКолонок;
КонецФункции


#КонецОбласти

