
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьУсловноеОформление();
	
	Если ЗначениеЗаполнено(Параметры.ПлатежнаяДата) Тогда 
		Объект.ПлатежнаяДата = Параметры.ПлатежнаяДата;
	Иначе 
		Объект.ПлатежнаяДата = НачалоДня(ТекущаяДата());
	КонецЕсли;
	
	Если Параметры.Свойство("ПараметрыОтбора") И Параметры.ПараметрыОтбора.Количество() Тогда
		
		ЕстьВходныеПараметры = Истина;
		Для Каждого ТекОписаниеОтбора Из Параметры.ПараметрыОтбора Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Объект.КомпоновщикНастроек.Настройки.Отбор, 
			ТекОписаниеОтбора.ИмяПоля, 
			ТекОписаниеОтбора.ПравоеЗначение, 
			ТекОписаниеОтбора.ВидСравнения,,
			Истина);
			
		КонецЦикла;
	КонецЕсли;
		
	Если ХранилищеСистемныхНастроек.ПолучитьОписание(ИмяФормы + "/ТекущиеДанные") = Неопределено Тогда
		ОбновитьОстаткиНаСчетахНаСервере();
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	УстановитьОтборЗаявокПоДате();

	СформироватьЭлементыФормыОтбора();
	
	УчетАреалаФункционирования();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбновитьОстаткиНаСчетахНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если ЕстьВходныеПараметры Тогда
		Настройки.Очистить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПлатежнаяДатаПриИзменении(Элемент)
	
	ПриИзмененииПлатежнойДатыНаСервере();
	РазвернутьОстаткиНаСчетах();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииОтбора(Элемент)
	
	ПриИзмененииОтбораНаСервере();
	РазвернутьОстаткиНаСчетах()
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОстаткиНаСчетах

&НаКлиенте
Процедура ОстаткиНаСчетахПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборСпискаЗаявок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиНаСчетахВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Поле = Элементы.ОстаткиНаСчетахИзмерение Тогда
		ПоказатьЗначение(,Элемент.ТекущиеДанные.Измерение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОстаткиНаСчетахПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = ОстаткиНаСчетах.НайтиПоИдентификатору(Строка);
	
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РазместитьЗаявкиНаСервере(ПараметрыПеретаскивания.Значение, ДанныеСтроки.БанковскийСчет, ДанныеСтроки.Организация, ДанныеСтроки.Валюта);
	РазвернутьОстаткиНаСчетах();
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиНаСчетахПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиНаСчетахПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРазмещенныеЗаявки

&НаКлиенте
Процедура РазмещенныеЗаявкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.ОстаткиНаСчетах.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РазместитьЗаявкиНаСервере(ПараметрыПеретаскивания.Значение, ДанныеСтроки.БанковскийСчет, ДанныеСтроки.Организация, ДанныеСтроки.Валюта);
	РазвернутьОстаткиНаСчетах();

КонецПроцедуры

&НаКлиенте
Процедура РазмещенныеЗаявкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СписокЗаявокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьОстаткиНаСчетахНаСервере();
	РазвернутьОстаткиНаСчетах();
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьСпискаЗаявок(Команда)
	
	Элементы.ФормаВидимостьСпискаЗаявок.Пометка = НЕ Элементы.ФормаВидимостьСпискаЗаявок.Пометка;
	Элементы.ГруппаЗаявкиНаОперации.Видимость = Элементы.ФормаВидимостьСпискаЗаявок.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРеестрПлатежей(Команда)
	
	ТекДанные = Элементы.ОстаткиНаСчетах.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.Организация.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТекПлатежнаяДата = Объект.ПлатежнаяДата;
	ТекОрганизация = ТекДанные.Организация;
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ДатаОплаты", Объект.ПлатежнаяДата);
	ДанныеЗаполнения.Вставить("Организация", ТекОрганизация);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьРеестрПлатежейЗавершение", ЭтаФорма);
	ОткрытьФорму("Документ.РеестрПлатежей.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ДанныеЗаполнения),ЭтаФорма,,,,ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ТекущаяДата = НачалоДня(ТекущаяДата());
	ТекстДаты = "";
	Если Объект.ПлатежнаяДата = ТекущаяДата Тогда 
		ТекстДаты = "Сегодня";
	ИначеЕсли Объект.ПлатежнаяДата < ТекущаяДата Тогда
		ТекстДаты = "Прошлое";
	ИначеЕсли Объект.ПлатежнаяДата > ТекущаяДата Тогда
		ТекстДаты = "Будущее";
	КонецЕсли;
	
	ЭтотОбъект.Заголовок = СтрШаблон("Платежная позиция %1 (%2)", Формат(Объект.ПлатежнаяДата,"ДФ=dd.MM.yyyy"), ТекстДаты);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЭлементыФормыОтбора()
	
	РазмещатьВЛевойКолонке = Истина;
	КоллекцияЭлементовОтбора = Объект.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	Для Каждого ЭлементОтбора Из КоллекцияЭлементовОтбора Цикл 
		
		ИндексЭлемента = КоллекцияЭлементовОтбора.Индекс(ЭлементОтбора);
		
		// 1. Добавляем группу.
		ГруппаРодитель = ?(РазмещатьВЛевойКолонке, Элементы.ГруппаОтборЛевая, Элементы.ГруппаОтборПравая);
		НоваяГруппа = Элементы.Добавить("ГруппаОтбор"+ЭлементОтбора.ЛевоеЗначение, Тип("ГруппаФормы"), ГруппаРодитель);
		НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.ОтображатьЗаголовок = Ложь;
		НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
		
		// 2. В группу добавляем флажок
		ЭлементИспользование = Элементы.Добавить("Отбор" + ЭлементОтбора.ЛевоеЗначение + "Использование",Тип("ПолеФормы"),НоваяГруппа);
		ЭлементИспользование.Вид = ВидПоляФормы.ПолеФлажка;
		ЭлементИспользование.ПутьКДанным = СтрШаблон("Объект.КомпоновщикНастроек.Настройки.Отбор[%1].Использование", ИндексЭлемента);
		ЭлементИспользование.Заголовок = ЭлементОтбора.Представление;
		ЭлементИспользование.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииОтбора");
		
		// 3. В группу добавляем вид сравнения
		ЭлементВидСравнения = Элементы.Добавить("Отбор" + ЭлементОтбора.ЛевоеЗначение + "ВидСравнения",Тип("ПолеФормы"),НоваяГруппа);
		ЭлементВидСравнения.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементВидСравнения.ПутьКДанным = СтрШаблон("Объект.КомпоновщикНастроек.Настройки.Отбор[%1].ВидСравнения", ИндексЭлемента);
		ЭлементВидСравнения.Заголовок = "Вид сравнения";
		ЭлементВидСравнения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементВидСравнения.Ширина = 17;
		ЭлементВидСравнения.РастягиватьПоГоризонтали = Ложь;
		ЭлементВидСравнения.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииОтбора");
		
		// 4. В группу добавляем значение отбора
		ЭлементЗначение = Элементы.Добавить("Отбор" + ЭлементОтбора.ЛевоеЗначение + "Значение",Тип("ПолеФормы"),НоваяГруппа);
		ЭлементЗначение.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементЗначение.ПутьКДанным = СтрШаблон("Объект.КомпоновщикНастроек.Настройки.Отбор[%1].ПравоеЗначение", ИндексЭлемента);
		ЭлементЗначение.Заголовок = "Значение";
		ЭлементЗначение.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементЗначение.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииОтбора");
		
		// 5. Следующий элемент - в другой колонке.
		РазмещатьВЛевойКолонке = НЕ РазмещатьВЛевойКолонке;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПлатежнойДатыНаСервере()
	
	УстановитьЗаголовокФормы();
	УстановитьОтборЗаявокПоДате();
	ОбновитьОстаткиНаСчетахНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборЗаявокПоДате()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(РазмещенныеЗаявки.Отбор, "ДатаИсполнения", Объект.ПлатежнаяДата);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОстаткиНаСчетахНаСервере()
	
	Настройки = Объект.КомпоновщикНастроек.ПолучитьНастройки();
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПлатежнаяДата", Объект.ПлатежнаяДата);	
	КомпоновщикМакета 			= Новый КомпоновщикМакетаКомпоновкиДанных;	
	МакетКомпоновкиДанных 	= КомпоновщикМакета.Выполнить(ПолучитьИзВременногоХранилища(Объект.АдресСхемыКомпоновкиДанных), Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных 	= Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,, Истина);
	
	ПроцессорВывода 				= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	Результат 	= Новый ДеревоЗначений;

	// Получаем результат.
	ПроцессорВывода.УстановитьОбъект(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Результат.Колонки.Добавить("НадписьДекорация", ОбщегоНазначения.ОписаниеТипаСтрока(1));
	
	ЗначениеВРеквизитФормы(Результат, "ОстаткиНаСчетах");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСпискаЗаявок()
	
	ТекДанные = Элементы.ОстаткиНаСчетах.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(РазмещенныеЗаявки.Отбор,		"Организация", ТекДанные.Организация,,, Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(РазмещенныеЗаявки.Отбор, 	"Валюта", ТекДанные.Валюта,,, Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(РазмещенныеЗаявки.Отбор, "БанковскийСчет", ТекДанные.БанковскийСчет,,, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтбораНаСервере()
	
	ОбновитьОстаткиНаСчетахНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РазместитьЗаявкиНаСервере(Знач ЗаявкиНаОперацию, Знач БанковскийСчет, Знач Организация, Знач Валюта)
	
	ЕстьНекорректныеЗаявки = Ложь;
	
	НачатьТранзакцию();
	Попытка
		Для Каждого Заявка Из ЗаявкиНаОперацию Цикл 
			
			Если ТипЗнч(Заявка) <> Тип("РегистрСведенийКлючЗаписи.РазмещениеЗаявок") Тогда 
				Продолжить;
			КонецЕсли;
			
			КонтрольныеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заявка.ЗаявкаНаОперацию, "ВалютаОплаты,Организация");
			Если КонтрольныеРеквизиты.Организация = Организация И КонтрольныеРеквизиты.ВалютаОплаты = Валюта Тогда
				
				ПлатежныеПозиции.ПереместитьПозицию(Заявка.ИдентификаторПозиции, , БанковскийСчет);
			
			Иначе
				
				ЕстьНекорректныеЗаявки = Истина;
				
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	ЗафиксироватьТранзакцию();
	
	Если ЕстьНекорректныеЗаявки Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Организация и валюта некоторых заявок не совпали с организацией и валютой банковского счета. Размещение этих заявок не произведено.");
	КонецЕсли;
	ОбновитьОстаткиНаСчетахНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Выделим жирным заголовки верхних уровней
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Для Каждого Колонка Из Элементы.ОстаткиНаСчетах.ПодчиненныеЭлементы Цикл
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Колонка.Имя);
	КонецЦикла;
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОстаткиНаСчетахИзмерение.Имя);
	
	//ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОстаткиНаСчетах.БанковскийСчет");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор, "ОстаткиНаСчетах.СистемныеПоляУровень", 3, ВидСравненияКомпоновкиДанных.Меньше);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	Элемент.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьОстаткиНаСчетах()
	
	Для Каждого Строка Из ОстаткиНаСчетах.ПолучитьЭлементы() Цикл
		Элементы.ОстаткиНаСчетах.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаявокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение(,Элемент.ТекущиеДанные.ЗаявкаНаОперацию);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРеестрПлатежейЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьОстаткиНаСчетахНаСервере();
	РазвернутьОстаткиНаСчетах();
	
КонецПроцедуры

&НаСервере
Процедура УчетАреалаФункционирования()
	
	//
	Инфо = ЗаявкиНаОперацииПовтИсп.РеквизитыДокументаЗаявка("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств");
	
	//
	РазмещенныеЗаявки.ТекстЗапроса = СтрЗаменить(РазмещенныеЗаявки.ТекстЗапроса, 
		"&РазмещениеЗаявок_ЗаявкаНаОперацию_ДоговорКонтрагента", 
		"РазмещениеЗаявок.ЗаявкаНаОперацию."+Инфо.ДоговорКонтрагента.ИмяРеквизита);
	 
КонецПроцедуры

#КонецОбласти
 

