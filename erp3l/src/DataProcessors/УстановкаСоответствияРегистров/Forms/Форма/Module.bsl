
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ШаблонТрансляции			= Параметры.ШаблонТрансляции;
	
	ДанныеШаблона=Обработки.УстановкаСоответствияСчетов.ПолучитьДанныеШаблона(ШаблонТрансляции);
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПравилаОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПравилаОбработки КАК ПравилаОбработки
	|ГДЕ
	|	ПравилаОбработки.Владелец = &ШаблонТрансляции";
	
	Запрос.УстановитьПараметр("ШаблонТрансляции",ШаблонТрансляции);
	Результат=Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	ПравилоОбработки=Результат.Ссылка;
	
	ТекущийИдентификатор	= ДанныеШаблона.ТекущийИдентификатор;
	ПланСчетовПриемник		= ДанныеШаблона.ПланСчетовПриемник;
	
	ЗаполнитьТаблицаСчетовПриемник();
	ОбновитьТаблицаСчетовПриемник();
				
	ЗаполнитьДеревоИсточников();
	
	Элементы.ОтборПоИсточнику.Пометка=Ложь;
		
КонецПроцедуры 

&НаСервере
Процедура ПроверитьНаличиеИсточниковДанных()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсточникиДанныхДляРасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	НЕ ИсточникиДанныхДляРасчетов.ОбъектУчета = НЕОПРЕДЕЛЕНО";
	
	Результат=Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Обработки.УстановкаСоответствияРегистров.ЗаполнитьИсточникиДляФинансовыхРегистров();
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСоздатьИсточникиДанных() 

&НаСервере
Процедура ЗаполнитьДеревоИсточников()
	
	ПроверитьНаличиеИсточниковДанных();
	
	ДеревоОбъектовУчета=Перечисления.ОбъектыБухгалтерскогоУчета.ДеревоОбъектовУчета();
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.Ссылка КАК Ссылка,
	|	ИсточникиДанныхДляРасчетов.Наименование КАК Наименование,
	|	ИсточникиДанныхДляРасчетов.ОбъектУчета КАК ОбъектУчета,
	|	ИсточникиДанныхДляРасчетов.ПутьКДаннымОбъектНастройки КАК ПутьКДаннымОбъектНастройки
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	НЕ ИсточникиДанныхДляРасчетов.ОбъектУчета = НЕОПРЕДЕЛЕНО";
	
	ТабШаблоныИсточников=Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаГруппа ИЗ ДеревоОбъектовУчета.Строки Цикл
		
		НоваяГруппа=ТаблицаРегистровИсточник.ПолучитьЭлементы().Добавить();
		НоваяГруппа.ИсточникНаименование=СтрокаГруппа.Представление;
		НоваяГруппа.ЭтоГруппа=Истина;
		
		Для Каждого СтрокаИсточник ИЗ СтрокаГруппа.Строки Цикл
			
			ДанныеИсточника=ТабШаблоныИсточников.Найти(СтрокаИсточник.ОбъектУчета,"ОбъектУчета");
			
			Если ДанныеИсточника=Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НовыйИсточник=НоваяГруппа.ПолучитьЭлементы().Добавить();
			НовыйИсточник.ОбъектУчетаИсточник=ДанныеИсточника.Ссылка;
			НовыйИсточник.ИсточникНаименование=ДанныеИсточника.Наименование;
			
			ОтметитьСопоставлениеСчетов(НовыйИсточник);
			
			ТаблицаОбъектовНастройки=ПолучитьТаблицуНастройки(СтрокаИсточник);
			
			Для Каждого СтрокаНастройка ИЗ ТаблицаОбъектовНастройки Цикл
				
				НоваяНастройка=НовыйИсточник.ПолучитьЭлементы().Добавить();
				НоваяНастройка.ОбъектУчетаИсточник=ДанныеИсточника.Ссылка;
				НоваяНастройка.ИсточникНаименование=Строка(СтрокаНастройка.Ссылка);
				НоваяНастройка.ОбъектНастройки=СтрокаНастройка.Ссылка;
				
				ОтметитьСопоставлениеСчетов(НоваяНастройка);
				
			КонецЦикла;		
				
		КонецЦикла;
		
	КонецЦикла;
				
КонецПроцедуры // ЗаполнитьДеревоИсточников()

Процедура ОтметитьСопоставлениеСчетов(СтрокаИсточник)

	МассивСопоставлено=ТаблицаСчетовПриемник.НайтиСтроки(Новый Структура("ОбъектУчетаИсточник,ОбъектНастройки",СтрокаИсточник.ОбъектУчетаИсточник,СтрокаИсточник.ОбъектНастройки));
	
	СтрокаИсточник.СопоставленоСчетов=МассивСопоставлено.Количество();
	СтрокаИсточник.Сопоставлено=(СтрокаИсточник.СопоставленоСчетов>0);
	
	Для Каждого СтрокаПриемник ИЗ МассивСопоставлено Цикл
		
		СтрокаПриемник.ИдентификаторИсточника=СтрокаИсточник.ПолучитьИдентификатор();
		
	КонецЦикла;
			
КонецПроцедуры // ОтметитьСопоставлениеСчетов() 

&НаСервере
Функция ПолучитьТаблицуНастройки(ТекущаяСтрокаДерева)
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрокаДерева.ОписаниеТиповОбъектНастройки) Тогда
		
		Возврат Новый ТаблицаЗначений;
		
	КонецЕсли;
		
	Запрос=Новый Запрос;
	ТекстЗапроса="
	|ВЫБРАТЬ
	|ОбъектыНастройки.Ссылка КАК Ссылка
	|ИЗ
	|	&ТаблицаОбъектНастройки КАК ОбъектыНастройки
	|ГДЕ
	|	&ДополнительныйОтбор
	|";
	ТипОбъектаНастройки = ТекущаяСтрокаДерева.ОписаниеТиповОбъектНастройки.Типы()[0];
	МетаданныеОбъектНастройки = Метаданные.НайтиПоТипу(ТипОбъектаНастройки);
	
	ПолноеИмяОбъектаМетаданных = МетаданныеОбъектНастройки.ПолноеИмя();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаОбъектНастройки", ПолноеИмяОбъектаМетаданных);
	
	Если ЗначениеЗаполнено(ТекущаяСтрокаДерева.ОтборОбъектовНастройки) Тогда
		ДополнительныйОтбор = МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров.СтрокаУсловияВыборкиДанных(ТекущаяСтрокаДерева.ОтборОбъектовНастройки, Запрос.Параметры);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныйОтбор", ДополнительныйОтбор);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныйОтбор", "ИСТИНА");
	КонецЕсли; 
	
	Запрос.Текст=ТекстЗапроса;
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции // ПолучитьТаблицуНастройки()

&НаСервере
Процедура ЗаполнитьТаблицаСчетовПриемник()	
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	СчетаБД.Ссылка КАК СчетПриемник,
	             |	СчетаБД.Наименование КАК СчетПриемникНаименование,
	             |	СчетаБД.Код КАК СчетПриемникКод,
	             |	СчетаБД.ГруппирующийСчет КАК ГруппирующийСчет,
	             |	СчетаБД.Валютный КАК Валютный,
	             |	ВЫБОР
	             |		КОГДА НастройкиСоответствия.СчетИсточник ЕСТЬ NULL
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ИСТИНА
	             |	КОНЕЦ КАК Сопоставлено,
	             |	ВЫБОР
	             |		КОГДА СчетаБД.РазделПланаСчетов В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Баланс))
	             |			ТОГДА ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Баланс)
	             |		КОГДА СчетаБД.РазделПланаСчетов В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.ОПУ))
	             |			ТОГДА ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.ОПУ)
	             |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	             |	КОНЕЦ КАК БалансОПУ,
	             |	ЕСТЬNULL(НастройкиСоответствия.ОбъектУчетаИсточник, ЗНАЧЕНИЕ(Справочник.ИсточникиДанныхДляРасчетов.ПустаяСсылка)) КАК ОбъектУчетаИсточник,
	             |	ЕСТЬNULL(НастройкиСоответствия.ОбъектНастройки, НЕОПРЕДЕЛЕНО) КАК ОбъектНастройки,
	             |	ЕСТЬNULL(НастройкиСоответствия.КоррОбъектУчетаИсточник, ЗНАЧЕНИЕ(Справочник.ИсточникиДанныхДляРасчетов.ПустаяСсылка)) КАК КоррОбъектУчетаИсточник,
	             |	ЕСТЬNULL(НастройкиСоответствия.КоррОбъектНастройки, НЕОПРЕДЕЛЕНО) КАК КоррОбъектНастройки,
	             |	ЕСТЬNULL(НастройкиСоответствия.ИдентификаторСоответствия, 0) КАК ИдентификаторСоответствия,
	             |	ЕСТЬNULL(НастройкиСоответствия.ИспользованиеДт, ЛОЖЬ) КАК ИспользованиеДт,
	             |	ЕСТЬNULL(НастройкиСоответствия.ИспользованиеКт, ЛОЖЬ) КАК ИспользованиеКт,
	             |	ЕСТЬNULL(НастройкиСоответствия.Ссылка, ЗНАЧЕНИЕ(Справочник.СоответствияСчетовДляТрансляции.ПустаяСсылка)) КАК Ссылка,
	             |	ИСТИНА КАК НастройкаСохранена
	             |ИЗ
	             |	Справочник.СчетаБД КАК СчетаБД
	             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			СоответствияСчетовДляТрансляции.Ссылка КАК Ссылка,
	             |			СоответствияСчетовДляТрансляции.ОбъектУчетаИсточник КАК ОбъектУчетаИсточник,
	             |			СоответствияСчетовДляТрансляции.ОбъектНастройки КАК ОбъектНастройки,
	             |			СоответствияСчетовДляТрансляции.КоррОбъектУчетаИсточник КАК КоррОбъектУчетаИсточник,
	             |			СоответствияСчетовДляТрансляции.КоррОбъектНастройки КАК КоррОбъектНастройки,
	             |			СоответствияСчетовДляТрансляции.СчетПриемник КАК СчетПриемник,
	             |			СоответствияСчетовДляТрансляции.СчетПриемник.Код КАК СчетПриемникКод,
	             |			СоответствияСчетовДляТрансляции.КоррСчетИсточник КАК КоррСчетИсточник,
	             |			СоответствияСчетовДляТрансляции.ИдентификаторСоответствия КАК ИдентификаторСоответствия,
	             |			НастройкиПравилТрансляции.ИспользованиеДт КАК ИспользованиеДт,
	             |			НастройкиПравилТрансляции.ИспользованиеКт КАК ИспользованиеКт,
	             |			НастройкиПравилТрансляции.ТранслироватьСальдо КАК ТранслироватьСальдо,
	             |			НастройкиПравилТрансляции.ТранслироватьОбороты КАК ТранслироватьОбороты,
	             |			СоответствияСчетовДляТрансляции.СчетИсточник КАК СчетИсточник,
	             |			СоответствияСчетовДляТрансляции.СчетИсточник.Код КАК СчетИсточникКод
	             |		ИЗ
	             |			Справочник.СоответствияСчетовДляТрансляции КАК СоответствияСчетовДляТрансляции
	             |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравилТрансляции КАК НастройкиПравилТрансляции
	             |				ПО СоответствияСчетовДляТрансляции.Ссылка = НастройкиПравилТрансляции.СоответствиеСчетов
	             |					И (НастройкиПравилТрансляции.ШаблонТрансляции = &ШаблонТрансляции)
	             |		ГДЕ
	             |			СоответствияСчетовДляТрансляции.Владелец = &ШаблонТрансляции) КАК НастройкиСоответствия
	             |		ПО СчетаБД.Ссылка = НастройкиСоответствия.СчетПриемник
	             |ГДЕ
	             |	СчетаБД.Владелец = &ПланСчетовПриемник
	             |	И НЕ СчетаБД.ПометкаУдаления
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	СчетаБД.Код ИЕРАРХИЯ,
	             |	ИдентификаторСоответствия";
	
	Запрос.УстановитьПараметр("ПланСчетовПриемник",ПланСчетовПриемник);
	Запрос.УстановитьПараметр("ШаблонТрансляции",	ШаблонТрансляции);
	
	ТаблицаСчетовИсходная=Запрос.Выполнить().Выгрузить();
	
	ТаблицаСчетовПриемник.Очистить();
	
	ТекущийСчет="";
	
	Для Каждого СтрокаСчет ИЗ ТаблицаСчетовИсходная Цикл
		
		НоваяСтрока=ТаблицаСчетовПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаСчет);
		
		Если ТекущийСчет=СтрокаСчет["СчетПриемник"] Тогда
			
			НоваяСтрока.СчетПриемникНаименование="";
			
		Иначе
			
			ТекущийСчет=СтрокаСчет["СчетПриемник"];
			
		КонецЕсли;
		
	КонецЦикла;
						
КонецПроцедуры // ЗаполнитьТаблицаСчетовПриемник()

&НаКлиенте
Процедура ТаблицаРегистровИсточникНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)	
	
	Строка=ТаблицаРегистровИсточник.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	
	Если Строка.ЭтоГруппа Тогда
		
		Выполнение=Ложь;
		
	Иначе
		
		СтруктураИсточник=Новый Структура;
		СтруктураИсточник.Вставить("ОбъектУчетаИсточник",Строка.ОбъектУчетаИсточник);
		СтруктураИсточник.Вставить("ОбъектНастройки",Строка.ОбъектНастройки);
		СтруктураИсточник.Вставить("ИдентификаторИсточника",ПараметрыПеретаскивания.Значение);
		
		ПараметрыПеретаскивания.Значение=СтруктураИсточник;			
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовПриемникПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ=Истина;
	ТекущиеДанные=Элементы.ТаблицаСчетовПриемник.ТекущиеДанные;

	Если НЕ ТекущиеДанные=Неопределено Тогда
		
		ИндексСтроки=ТаблицаСчетовПриемник.Индекс(ТекущиеДанные);
		НоваяСтрока=ТаблицаСчетовПриемник.Вставить(ИндексСтроки+1);
		
		Если Копирование Тогда
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущиеДанные,,"Ссылка,СчетПриемникНаименование,ИдентификаторСоответствия,НастройкиДт,ОтборПодробно,СоответствиеПодробно");
			
			НоваяСтрока.ИдентификаторСоответствия=ОпределитьИдентификаторСоответствия();
			
		Иначе
			
							
			НоваяСтрока.СчетПриемник=ТекущиеДанные.СчетПриемник;	
			НоваяСтрока.ИдентификаторСоответствия=ОпределитьИдентификаторСоответствия();
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры 

Функция ОпределитьИдентификаторСоответствия()
	
	ТекущийИдентификатор=ТекущийИдентификатор+1;
	
	Возврат ТекущийИдентификатор;
		
КонецФункции // ОпределитьИдентификаторСоответствия()

&НаКлиенте
Процедура ТаблицаСчетовПриемникПередУдалением(Элемент, Отказ)
	
	ОбъектУчетаИсточник			= Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.ОбъектУчетаИсточник;
	ОбъектНастройки				= Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.ОбъектНастройки;
	ИдентификаторИсточника		= Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.ИдентификаторИсточника;
	СчетПриемник				= Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.СчетПриемник;
	
	МассивСтрок=ТаблицаСчетовПриемник.НайтиСтроки(Новый Структура("СчетПриемник",Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.СчетПриемник));
		
	Если МассивСтрок.Количество()=1 Тогда
		
		Отказ=Истина;
		
		Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.ОбъектУчетаИсточник	= "";
		Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.ОбъектНастройки		= "";
		Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.КоррОбъектУчетаИсточник	= "";
		Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.КоррОбъектНастройки		= "";
		Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.Сопоставлено			= Ложь;
		Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.ИдентификаторИсточника	= 0;
		Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.ИспользованиеДт=Ложь;
		Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.ИспользованиеКт=Ложь;
		
	КонецЕсли;
	
	ОпределитьКоличествоСопоставленных(ИдентификаторИсточника);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьКоличествоСопоставленных(ИдентификаторИсточника)

	СтрокаИсточник=ТаблицаРегистровИсточник.НайтиПоИдентификатору(ИдентификаторИсточника);
	
	МассивСопоставлено=ТаблицаСчетовПриемник.НайтиСтроки(Новый Структура("ИдентификаторИсточника",ИдентификаторИсточника));
	СтрокаИсточник.СопоставленоСчетов=МассивСопоставлено.Количество();
	СтрокаИсточник.Сопоставлено=(СтрокаИсточник.СопоставленоСчетов>0);
	
КонецПроцедуры //  ОпределитьКоличествоСопоставленных() 


&НаКлиенте
Процедура ТаблицаСчетовПриемникПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущийПриемник=ТаблицаСчетовПриемник.НайтиПоИдентификатору(Строка);
	
	Если ТекущийПриемник=Неопределено ИЛИ ТекущийПриемник.ГруппирующийСчет Тогда
		
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		
	Иначе	
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		
	КонецЕсли;
		
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаСчетовПриемникПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка=Ложь;
	
	ТекущийПриемник=ТаблицаСчетовПриемник.НайтиПоИдентификатору(Строка);
	
	Если ТекущийПриемник=Неопределено 
		ИЛИ ТекущийПриемник.ГруппирующийСчет Тогда
	
		Возврат;
		
	КонецЕсли;
		
	ДобавитьОбъектСоответствия(ТекущийПриемник,ПараметрыПеретаскивания.Значение);
			
КонецПроцедуры  

&НаКлиенте
Процедура ДобавитьОбъектСоответствия(СтрокаПриемник,ДанныеИсточника)
	
	СтрокаСоответствие=Новый Структура;
	
	СтрокаСоответствие.Вставить("ОбъектУчетаИсточник",		ДанныеИсточника.ОбъектУчетаИсточник);
	СтрокаСоответствие.Вставить("ОбъектНастройки",			ДанныеИсточника.ОбъектНастройки);
	СтрокаСоответствие.Вставить("ИдентификаторИсточника",	ДанныеИсточника.ИдентификаторИсточника);
	
	Если НЕ ЗначениеЗаполнено(СтрокаПриемник.ОбъектУчетаИсточник) Тогда
		
		ЗаполнитьЗначенияСвойств(СтрокаПриемник,СтрокаСоответствие);
		СтрокаПриемник.Сопоставлено=Истина;	
		СтрокаПриемник.ИдентификаторСоответствия=ОпределитьИдентификаторСоответствия();
		
	Иначе
		
		СтрокаИсточник=ТаблицаСчетовПриемник.Вставить(ТаблицаСчетовПриемник.Индекс(СтрокаПриемник)+1);		
		ЗаполнитьЗначенияСвойств(СтрокаИсточник,СтрокаСоответствие);
				
		СтрокаПриемник.ИдентификаторСоответствия=ОпределитьИдентификаторСоответствия();
		
	КонецЕсли; 
	
	СтрокаПриемник.ИспользованиеДт=Истина;
	СтрокаПриемник.ИспользованиеКт=Истина;
	
	ОпределитьКоличествоСопоставленных(ДанныеИсточника.ИдентификаторИсточника);
	
	Модифицированность=Истина;
	
КонецПроцедуры // ДобавитьСчетИсточник()

&НаКлиенте
Процедура СопоставитьСчета(Команда)
	
	ТекущийПриемник=Элементы.ТаблицаСчетовПриемник.ТекущиеДанные;
	
	Если ТекущийПриемник=Неопределено ИЛИ ТекущийПриемник.ГруппирующийСчет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаИсточник=Элементы.ТаблицаРегистровИсточник.ТекущиеДанные;
	
	Если СтрокаИсточник=Неопределено ИЛИ СтрокаИсточник.ЭтоГруппа Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	СтруктураИсточник=Новый Структура;
	СтруктураИсточник.Вставить("ОбъектУчетаИсточник",СтрокаИсточник.ОбъектУчетаИсточник);
	СтруктураИсточник.Вставить("ОбъектНастройки",СтрокаИсточник.ОбъектНастройки);
	СтруктураИсточник.Вставить("ИдентификаторИсточника",СтрокаИсточник.ПолучитьИдентификатор());
			
	ДобавитьОбъектСоответствия(ТекущийПриемник,СтруктураИсточник);
					
КонецПроцедуры 

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	СохранитьНастройкиСоответствий();
	Оповестить("ИзмененаНастройкаСоответствияСчетов",ШаблонТрансляции);
	Модифицированность=Ложь;
	
КонецПроцедуры  

Процедура СохранитьНастройкиСоответствий()
			
	Если НЕ ЗначениеЗаполнено(ШаблонТрансляции) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗапросПравило=Новый Запрос;
	ЗапросПравило.Текст="ВЫБРАТЬ
	|	ПравилаОбработки.Ссылка
	|ИЗ
	|	Справочник.ПравилаОбработки КАК ПравилаОбработки
	|ГДЕ
	|	ПравилаОбработки.Владелец = &Владелец";
	
	ЗапросПравило.УстановитьПараметр("Владелец",ШаблонТрансляции);
	
	Результат=ЗапросПравило.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		УправлениеОтчетамиУХ.ОчиститьФормулыРасчета(Результат.Ссылка);
		
	КонецЕсли;
	
	ТаблицаСоответствийНов=РеквизитФормыВЗначение("ТаблицаСчетовПриемник");
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
					
	Запрос.Текст="ВЫБРАТЬ
	             |	СоответствияСчетовДляТрансляции.Ссылка КАК Ссылка,
	             |	СоответствияСчетовДляТрансляции.ОбъектУчетаИсточник КАК ОбъектУчетаИсточник,
	             |	СоответствияСчетовДляТрансляции.ОбъектНастройки КАК ОбъектНастройки,
				 |	СоответствияСчетовДляТрансляции.КоррОбъектУчетаИсточник КАК КоррОбъектУчетаИсточник,
	             |	СоответствияСчетовДляТрансляции.КоррОбъектНастройки КАК КоррОбъектНастройки,
	             |	СоответствияСчетовДляТрансляции.СчетПриемник КАК СчетПриемник,
	             |	СоответствияСчетовДляТрансляции.ИдентификаторСоответствия КАК ИдентификаторСоответствия,
	             |	ЕСТЬNULL(НастройкиПравилТрансляции.ИспользованиеДт, ЛОЖЬ) КАК ИспользованиеДт,
	             |	ЕСТЬNULL(НастройкиПравилТрансляции.ИспользованиеКт, ЛОЖЬ) КАК ИспользованиеКт,
	             |	СоответствияСчетовДляТрансляции.ПометкаУдаления КАК ПометкаУдаления
	             |ПОМЕСТИТЬ СуществующиеНастройки
	             |ИЗ
	             |	Справочник.СоответствияСчетовДляТрансляции КАК СоответствияСчетовДляТрансляции
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравилТрансляции КАК НастройкиПравилТрансляции
	             |		ПО СоответствияСчетовДляТрансляции.Ссылка = НастройкиПравилТрансляции.СоответствиеСчетов
	             |			И (НастройкиПравилТрансляции.ШаблонТрансляции = &ШаблонТрансляции)
	             |ГДЕ
	             |	СоответствияСчетовДляТрансляции.Владелец = &ШаблонТрансляции
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ТаблицаСоответствийНов.ОбъектУчетаИсточник КАК ОбъектУчетаИсточник,
	             |	ТаблицаСоответствийНов.ОбъектНастройки КАК ОбъектНастройки, 
				 |	ТаблицаСоответствийНов.КоррОбъектУчетаИсточник КАК КоррОбъектУчетаИсточник,
	             |	ТаблицаСоответствийНов.КоррОбъектНастройки КАК КоррОбъектНастройки,
	             |	ТаблицаСоответствийНов.СчетПриемник КАК СчетПриемник,
	             |	ТаблицаСоответствийНов.ИдентификаторСоответствия КАК ИдентификаторСоответствия,
	             |	ТаблицаСоответствийНов.ИспользованиеДт КАК ИспользованиеДт,
	             |	ТаблицаСоответствийНов.ИспользованиеКт КАК ИспользованиеКт,
	             |	ТаблицаСоответствийНов.Ссылка КАК Ссылка
	             |ПОМЕСТИТЬ НовыеНастройки
	             |ИЗ
	             |	&ТаблицаСоответствийНов КАК ТаблицаСоответствийНов
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	НовыеНастройки.ОбъектУчетаИсточник КАК ОбъектУчетаИсточникНов,
	             |	НовыеНастройки.ОбъектНастройки КАК ОбъектНастройкиНов,
				 |	НовыеНастройки.КоррОбъектУчетаИсточник КАК КоррОбъектУчетаИсточникНов,
	             |	НовыеНастройки.КоррОбъектНастройки КАК КоррОбъектНастройкиНов,
	             |	НовыеНастройки.СчетПриемник КАК СчетПриемникНов,
	             |	НовыеНастройки.ИдентификаторСоответствия КАК ИдентификаторСоответствияНов,
	             |	НовыеНастройки.Ссылка КАК СсылкаНов,
	             |	ЕСТЬNULL(НовыеНастройки.ИспользованиеДт, ЛОЖЬ) КАК ИспользованиеДтНов,
	             |	ЕСТЬNULL(НовыеНастройки.ИспользованиеКт, ЛОЖЬ) КАК ИспользованиеКтНов,
	             |	СуществующиеНастройки.Ссылка КАК СсылкаСтар,
	             |	СуществующиеНастройки.ОбъектУчетаИсточник КАК ОбъектУчетаИсточникСтар,
	             |	СуществующиеНастройки.ОбъектНастройки КАК ОбъектНастройкиСтар,
				 |	СуществующиеНастройки.КоррОбъектУчетаИсточник КАК КоррОбъектУчетаИсточникСтар,
	             |	СуществующиеНастройки.КоррОбъектНастройки КАК КоррОбъектНастройкиСтар,
	             |	СуществующиеНастройки.СчетПриемник КАК СчетПриемникСтар,
	             |	ЕСТЬNULL(СуществующиеНастройки.ИспользованиеДт, ЛОЖЬ) КАК ИспользованиеДтСтар,
	             |	ЕСТЬNULL(СуществующиеНастройки.ИспользованиеКт, ЛОЖЬ) КАК ИспользованиеКтСтар,
	             |	СуществующиеНастройки.ИдентификаторСоответствия КАК ИдентификаторСоответствияСтар,
	             |	СуществующиеНастройки.ПометкаУдаления КАК ПометкаУдаленияСтар
	             |ИЗ
	             |	НовыеНастройки КАК НовыеНастройки
	             |		ПОЛНОЕ СОЕДИНЕНИЕ СуществующиеНастройки КАК СуществующиеНастройки
	             |		ПО НовыеНастройки.ОбъектУчетаИсточник = СуществующиеНастройки.ОбъектУчетаИсточник
	             |			И НовыеНастройки.ОбъектНастройки = СуществующиеНастройки.ОбъектНастройки
				 |			И НовыеНастройки.КоррОбъектУчетаИсточник = СуществующиеНастройки.КоррОбъектУчетаИсточник
	             |			И НовыеНастройки.КоррОбъектНастройки = СуществующиеНастройки.КоррОбъектНастройки
	             |			И НовыеНастройки.СчетПриемник = СуществующиеНастройки.СчетПриемник
	             |			И НовыеНастройки.ИдентификаторСоответствия = СуществующиеНастройки.ИдентификаторСоответствия";
	
	Запрос.УстановитьПараметр("ШаблонТрансляции",		ШаблонТрансляции);
	Запрос.УстановитьПараметр("ТаблицаСоответствийНов",	ТаблицаСоответствийНов);
	
	Результат=Запрос.Выполнить().Выбрать();
		
	НачатьТранзакцию();
	
	Пока Результат.Следующий() Цикл
		
		Если Результат.ОбъектУчетаИсточникНов=Null И ЗначениеЗаполнено(Результат.СсылкаСтар) Тогда // Убрана настройку соответствия
			
			УправлениеОтчетамиУХ.ЗаписатьНастройкиПравилТрансляции(ШаблонТрансляции,Результат.СсылкаСтар);
			
		ИначеЕсли Результат.СсылкаСтар=Null 
			И ЗначениеЗаполнено(Результат.ОбъектУчетаИсточникНов)
			И ЗначениеЗаполнено(Результат.СчетПриемникНов) Тогда // Новое соответствие счетов
			
			СтруктураПараметров=Новый Структура;
			СтруктураПараметров.Вставить("Владелец",		ШаблонТрансляции);
			СтруктураПараметров.Вставить("ОбъектУчетаИсточник",Результат.ОбъектУчетаИсточникНов);
			СтруктураПараметров.Вставить("ОбъектНастройки",Результат.ОбъектНастройкиНов);
			СтруктураПараметров.Вставить("КоррОбъектУчетаИсточник",Результат.КоррОбъектУчетаИсточникНов);
			СтруктураПараметров.Вставить("КоррОбъектНастройки",Результат.КоррОбъектНастройкиНов);

			СтруктураПараметров.Вставить("СчетПриемник",	Результат.СчетПриемникНов);
			СтруктураПараметров.Вставить("ИдентификаторСоответствия",Результат.ИдентификаторСоответствияНов);
			СтруктураПараметров.Вставить("Ссылка");
			
			Справочники.СоответствияСчетовДляТрансляции.ИзменитьОбъектПоПараметрамРегистр(СтруктураПараметров);
			
			Если ЗначениеЗаполнено(СтруктураПараметров.Ссылка) Тогда
				
				СтруктураРесурсов=Новый Структура;	
				СтруктураРесурсов.Вставить("НаправлениеТрансляции",	Перечисления.НаправленияТрансляцииДанных.ФинансовыеРегистрыВРегистрБухгалтерии);
				СтруктураРесурсов.Вставить("ИспользованиеДт",				Результат.ИспользованиеДтНов);
				СтруктураРесурсов.Вставить("ИспользованиеКт",				Результат.ИспользованиеКтНов);
				
			    УправлениеОтчетамиУХ.ЗаписатьНастройкиПравилТрансляции(ШаблонТрансляции,СтруктураПараметров.Ссылка,СтруктураРесурсов); 
					
			КонецЕсли; 
			
		ИначеЕсли ЗначениеЗаполнено(Результат.СсылкаСтар) И 
			(НЕ (Результат.ИспользованиеДтНов				= Результат.ИспользованиеДтСтар
					И Результат.ИспользованиеКтНов				= Результат.ИспользованиеКтСтар)) Тогда
					
			СтруктураРесурсов=Новый Структура;
			
			СтруктураРесурсов.Вставить("НаправлениеТрансляции",	Перечисления.НаправленияТрансляцииДанных.ФинансовыеРегистрыВРегистрБухгалтерии);
			СтруктураРесурсов.Вставить("ИспользованиеДт",		Результат.ИспользованиеДтНов);
			СтруктураРесурсов.Вставить("ИспользованиеКт",		Результат.ИспользованиеКтНов);
			
			 УправлениеОтчетамиУХ.ЗаписатьНастройкиПравилТрансляции(ШаблонТрансляции,Результат.СсылкаСтар,СтруктураРесурсов);
						 	
		КонецЕсли;
		
	КонецЦикла;
	
	Обработки.КорректировкиЗначенийПоказателей.УстановитьПризнакИзмененияШаблона(ШаблонТрансляции);
	
	ЗафиксироватьТранзакцию();
	
	ЗаполнитьТаблицаСчетовПриемник();	
	ОбновитьТаблицаСчетовПриемник();
				
КонецПроцедуры // СохранитьНастройкиСоответствий()

Процедура ОбновитьТаблицаСчетовПриемник()
	
	//ТекДеревоПриемник=РеквизитФормыВЗначение("ТаблицаСчетовПриемник");
	//
	////Отметим соответствия, в которых используются нестандартные отборы
	//
	//Запрос=Новый Запрос;
	//
	//Запрос=Новый Запрос;
	//Запрос.Текст="ВЫБРАТЬ
	//|	ТаблицаСчетовПриемник.СчетПриемник КАК СчетПриемник,
	//|	ТаблицаСчетовПриемник.ОпорныйСчетНаименование КАК ОпорныйСчетНаименование,
	//|	ТаблицаСчетовПриемник.Сопоставлено КАК Сопоставлено,
	//|	ТаблицаСчетовПриемник.ТранслироватьСальдо КАК ТранслироватьСальдо,
	//|	ТаблицаСчетовПриемник.ТранслироватьОбороты КАК ТранслироватьОбороты,
	//|	ТаблицаСчетовПриемник.КоррСчетИсточник КАК КоррСчетИсточник,
	//|	ТаблицаСчетовПриемник.ИспользованиеДт КАК ИспользованиеДт,
	//|	ТаблицаСчетовПриемник.ИспользованиеКт КАК ИспользованиеКт,
	//|	ТаблицаСчетовПриемник.СчетИсточник КАК СчетИсточник,
	//|	ТаблицаСчетовПриемник.СчетИсточникНаименование КАК СчетИсточникНаименование,
	//|	ТаблицаСчетовПриемник.Отбор КАК Отбор,
	//|	ТаблицаСчетовПриемник.ГруппирующийСчет КАК ГруппирующийСчет,
	//|	ТаблицаСчетовПриемник.НастройкаСохранена КАК НастройкаСохранена,
	//|	ТаблицаСчетовПриемник.Валютный КАК Валютный,
	//|	ТаблицаСчетовПриемник.НастройкиДт КАК НастройкиДт,
	//|	ТаблицаСчетовПриемник.СчетИсточникКод КАК СчетИсточникКод,
	//|	ТаблицаСчетовПриемник.СчетПриемникКод КАК СчетПриемникКод,
	//|	ТаблицаСчетовПриемник.Ссылка КАК Ссылка,
	//|	ТаблицаСчетовПриемник.ИдентификаторСоответствия КАК ИдентификаторСоответствия,
	//|	ТаблицаСчетовПриемник.БалансОПУ КАК БалансОПУ
	//|ПОМЕСТИТЬ ТаблицаСчетовПриемник
	//|ИЗ
	//|	&ТаблицаСчетовПриемник КАК ТаблицаСчетовПриемник
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ИсточникиДанныхДляРасчетов.Ссылка КАК Ссылка,
	//|	ИсточникиДанныхДляРасчетов.ДополнительноеПредставление КАК ДополнительноеПредставление,
	//|	ИсточникиДанныхДляРасчетов.ИсточникШаблон КАК ИсточникШаблон,
	//|	ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК ПотребительРасчета
	//|ПОМЕСТИТЬ ИсточникиДанныхДт
	//|ИЗ
	//|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	//|ГДЕ
	//|	ВЫРАЗИТЬ(ИсточникиДанныхДляРасчетов.НазначениеРасчетов КАК Справочник.ПравилаОбработки).Владелец = &ШаблонТрансляции
	//|	И ВЫРАЗИТЬ(ИсточникиДанныхДляРасчетов.НазначениеРасчетов КАК Справочник.ПравилаОбработки).НаправлениеТрансляции = &НаправлениеТрансляции
	//|	И ИсточникиДанныхДляРасчетов.ТрансляцияДебет
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ТаблицаСчетовПриемник.СчетПриемник КАК СчетПриемник,
	//|	ТаблицаСчетовПриемник.ОпорныйСчетНаименование КАК ОпорныйСчетНаименование,
	//|	ТаблицаСчетовПриемник.Сопоставлено КАК Сопоставлено,
	//|	ТаблицаСчетовПриемник.ТранслироватьСальдо КАК ТранслироватьСальдо,
	//|	ТаблицаСчетовПриемник.ТранслироватьОбороты КАК ТранслироватьОбороты,
	//|	ТаблицаСчетовПриемник.ИспользованиеДт КАК ИспользованиеДт,
	//|	ТаблицаСчетовПриемник.ИспользованиеКт КАК ИспользованиеКт,
	//|	ТаблицаСчетовПриемник.СчетИсточник КАК СчетИсточник,
	//|	ТаблицаСчетовПриемник.СчетИсточникНаименование КАК СчетИсточникНаименование,
	//|	ТаблицаСчетовПриемник.КоррСчетИсточник КАК КоррСчетИсточник,
	//|	ТаблицаСчетовПриемник.Отбор КАК Отбор,
	//|	ТаблицаСчетовПриемник.ГруппирующийСчет КАК ГруппирующийСчет,
	//|	ТаблицаСчетовПриемник.НастройкаСохранена КАК НастройкаСохранена,
	//|	ТаблицаСчетовПриемник.Валютный КАК Валютный,
	//|	ТаблицаСчетовПриемник.Ссылка КАК Ссылка,
	//|	ТаблицаСчетовПриемник.ИдентификаторСоответствия КАК ИдентификаторСоответствия,
	//|	ТаблицаСчетовПриемник.СчетИсточникКод КАК СчетИсточникКод,
	//|	ТаблицаСчетовПриемник.СчетПриемникКод КАК СчетПриемникКод,
	//|	ТаблицаСчетовПриемник.БалансОПУ КАК БалансОПУ,
	//|	ЕСТЬNULL(ИсточникиДанныхДт.ДополнительноеПредставление, """") КАК НастройкиДт,
	//|	"""" КАК ОтборПодробно,
	//|	"""" КАК СоответствиеПодробно,
	//|	ЕСТЬNULL(ИсточникиДанныхДт.Ссылка, ЗНАЧЕНИЕ(Справочник.ИсточникиДанныхДляРасчетов.ПустаяСсылка)) КАК ИсточникСсылка,
	//|	ЕСТЬNULL(ИсточникиДанныхДт.ИсточникШаблон, ЗНАЧЕНИЕ(Справочник.ИсточникиДанныхДляРасчетов.ПустаяСсылка)) КАК ИсточникШаблон
	//|ИЗ
	//|	ТаблицаСчетовПриемник КАК ТаблицаСчетовПриемник
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ИсточникиДанныхДт КАК ИсточникиДанныхДт
	//|		ПО ТаблицаСчетовПриемник.Ссылка = ИсточникиДанныхДт.ПотребительРасчета";
	//
	//Запрос.УстановитьПараметр("ТаблицаСчетовПриемник",	ТекДеревоПриемник);
	//Запрос.УстановитьПараметр("ШаблонТрансляции",		ШаблонТрансляции);
	//Запрос.УстановитьПараметр("НаправлениеТрансляции",	НаправлениеТрансляции);
	//
	//ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(),"ТаблицаСчетовПриемник");
			

КонецПроцедуры // ОбновитьТаблицаСчетовПриемник()

&НаКлиенте
Процедура ОтборПоИсточнику(Команда)
	
	Элементы.ОтборПоИсточнику.Пометка=Не Элементы.ОтборПоИсточнику.Пометка;
	
	Если НЕ Элементы.ОтборПоИсточнику.Пометка Тогда
		
		УстановитьОтборПриемник(ПолучитьОтборыПриемник());
		
	Иначе
		
		Если (НЕ Элементы.ТаблицаРегистровИсточник.ТекущиеДанные=Неопределено)
			И Элементы.ТаблицаРегистровИсточник.ТекущиеДанные.Сопоставлено Тогда
			
			УстановитьОтборПриемник(ПолучитьОтборыПриемник(Элементы.ТаблицаРегистровИсточник.ТекущиеДанные));
			
		КонецЕсли;
		
	КонецЕсли;	  
	  	
КонецПроцедуры  

&НаКлиенте
Функция ПолучитьОтборыПриемник(СтрокаИсточника=Неопределено)
	
	СтруктураОтборов=Новый Структура;
		
	//Если Элементы.СопоставленныеПриемник.Пометка Тогда
	//	
	//	СтруктураОтборов.Вставить("Сопоставлено",Истина);
	//	
	//КонецЕсли;
	//
	//Если Элементы.НесопоставленныеПриемник.Пометка Тогда
	//	
	//	СтруктураОтборов.Вставить("Сопоставлено",Ложь);
	//	
	//КонецЕсли;
	//
	//Если Элементы.НесопоставленныеПриемник.Пометка Тогда
	//	
	//	СтруктураОтборов.Вставить("Сопоставлено",Ложь);
	//	
	//КонецЕсли;
	//
	//Если Элементы.ОтборПоТекущейКолонкеПриемник.Пометка И (НЕ Элементы.ТаблицаСчетовПриемник.ТекущиеДанные=Неопределено) Тогда
	//	
	//	ИмяКолонки=СтрЗаменить(Элементы.ТаблицаСчетовПриемник.ТекущийЭлемент.Имя,"ТаблицаСчетовПриемник","");
	//	ИмяКолонки=СтрЗаменить(ИмяКолонки,"Инв","");
	//
	//	СтруктураОтборов.Вставить(ИмяКолонки,Элементы.ТаблицаСчетовПриемник.ТекущиеДанные[ИмяКолонки]);
	//	
	//КонецЕсли;
	
	Если Не СтрокаИсточника=Неопределено Тогда
		
		СтруктураОтборов.Вставить("ОбъектУчетаИсточник",СтрокаИсточника.ОбъектУчетаИсточник);
		СтруктураОтборов.Вставить("ОбъектНастройки",СтрокаИсточника.ОбъектНастройки);
		
	КонецЕсли;
	
	Если СтруктураОтборов.Количество()>0 Тогда
		
		Возврат Новый ФиксированнаяСтруктура(СтруктураОтборов);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
КонецФункции //

&НаКлиенте
Процедура УстановитьОтборПриемник(ОтборСтрок)
	
	Элементы.ТаблицаСчетовПриемник.ОтборСтрок=ОтборСтрок;
	
КонецПроцедуры // ОтобратьПроводки()


&НаКлиенте
Процедура ТаблицаРегистровИсточникПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ТаблицаРегистровИсточник.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ТаблицаРегистровИсточник.ТекущиеДанные.Сопоставлено Тогда
		
		Если Элементы.ОтборПоИсточнику.Пометка Тогда
			
			УстановитьОтборПриемник(ПолучитьОтборыПриемник(Элементы.ТаблицаРегистровИсточник.ТекущиеДанные));
			
		Иначе
			
			СтрокаИсточника=Элементы.ТаблицаРегистровИсточник.ТекущиеДанные;
			
			СтрокиПриемник=ТаблицаСчетовПриемник.НайтиСтроки(Новый Структура("ОбъектУчетаИсточник,ОбъектНастройки",СтрокаИсточника.ОбъектУчетаИсточник,СтрокаИсточника.ОбъектНастройки));
			
			Если СтрокиПриемник.Количество()>0 Тогда
				
				Элементы.ТаблицаСчетовПриемник.ТекущаяСтрока=СтрокиПриемник[0].ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораНастройки()
	
	ОткрытьФорму("Обработка.УстановкаСоответствияРегистров.Форма.ФормаВыбораОбъектаУчета",Новый Структура("ИдентификаторТаблицы",ПолучитьАдресДереваИсточников()),ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОткрытьФормуВыбораНастройки()

&НаСервере
Функция ПолучитьАдресДереваИсточников()
	
	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("ТаблицаРегистровИсточник"),ЭтаФорма.УникальныйИдентификатор);	
	
КонецФункции // ПолучитьАдресДереваИсточников() 

&НаКлиенте
Процедура ТаблицаСчетовПриемникВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя="ПриемникОбъектУчетаИсточник"
		ИЛИ Поле.Имя="ПриемникОбъектНастройки" 
		ИЛИ Поле.Имя="ПриемникКоррОбъектУчетаИсточник"
		ИЛИ Поле.Имя="ПриемникКоррОбъектНастройки" Тогда
		
		ОткрытьФормуВыбораНастройки();
		Возврат;
		
	КонецЕсли;
	
	Если СтрНайти(Поле.Имя,"Настройки")=0 И СтрНайти(Поле.Имя,"Подробно")=0  Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.ОбъектУчетаИсточник) Тогда
		
		Сообщить(НСтр("ru = 'Не указан объект учета - источник.'"), СтатусСообщения.Внимание);
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Элементы.ТаблицаСчетовПриемник.ТекущиеДанные.СчетПриемник) Тогда
		
		Сообщить(НСтр("ru = 'Не указан счет - приемник.'"), СтатусСообщения.Внимание);
		Возврат;
		
	КонецЕсли;
	
	ДанныеСоответствия=Элементы.ТаблицаСчетовПриемник.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСоответствия.Ссылка) Тогда
		
		СтруктураСоответствие=Новый Структура;
		СтруктураСоответствие.Вставить("ОбъектУчетаИсточник",			ДанныеСоответствия.ОбъектУчетаИсточник);
		СтруктураСоответствие.Вставить("ОбъектНастройки",				ДанныеСоответствия.ОбъектНастройки); 
		СтруктураСоответствие.Вставить("КоррОбъектУчетаИсточник",		ДанныеСоответствия.КоррОбъектУчетаИсточник);
		СтруктураСоответствие.Вставить("КоррОбъектНастройки",			ДанныеСоответствия.КоррОбъектНастройки);
		СтруктураСоответствие.Вставить("СчетПриемник",					ДанныеСоответствия.СчетПриемник);
		СтруктураСоответствие.Вставить("ИдентификаторСоответствия",		ДанныеСоответствия.ИдентификаторСоответствия);

		СтруктураСоответствие.Вставить("Владелец",						ШаблонТрансляции);
		СтруктураСоответствие.Вставить("Ссылка",						);
		
		СоздатьСоответствие(СтруктураСоответствие);
		
		Если ЗначениеЗаполнено(СтруктураСоответствие.Ссылка) Тогда
			
			ДанныеСоответствия.Ссылка=СтруктураСоответствие.Ссылка;
			
		Иначе
			
			Сообщить(НСтр("ru = 'Не создано соответствие.'"), СтатусСообщения.Внимание);	
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
			
	ДанныеСчета=Новый Структура;	
	ДанныеСчета.Вставить("ОбъектУчетаИсточник",ДанныеСоответствия.ОбъектУчетаИсточник);
	ДанныеСчета.Вставить("ОбъектНастройки",ДанныеСоответствия.ОбъектНастройки);
	ДанныеСчета.Вставить("КоррОбъектУчетаИсточник",ДанныеСоответствия.КоррОбъектУчетаИсточник);
	ДанныеСчета.Вставить("КоррОбъектНастройки",ДанныеСоответствия.КоррОбъектНастройки);
	ДанныеСчета.Вставить("СчетПриемник",ДанныеСоответствия.СчетПриемник);
	ДанныеСчета.Вставить("СоответствиеСчетов",ДанныеСоответствия.Ссылка);
	
	Если НЕ ДанныеСоответствия.НастройкаСохранена Тогда
		
		ЗаписатьТекущиеНастройкиТрансляции();
		
	КонецЕсли;
				
	Если Поле.Имя="Настройки"
		ИЛИ Поле.Имя="ОтборПодробно"
		ИЛИ Поле.Имя="СоответствиеПодробно" Тогда
								
		Если НЕ ЗначениеЗаполнено(ДанныеСоответствия.ИсточникДанных) Тогда
			
			ДанныеСоответствия.ИсточникДанных=УправлениеОтчетамиУХ.ПроверитьСоздатьИсточникТрансляцииРегистр(ПравилоОбработки,ДанныеСоответствия.Ссылка);
		
		КонецЕсли;
			
		ОткрытьФорму("Справочник.ИсточникиДанныхДляРасчетов.ФормаОбъекта",Новый Структура("Ключ",ДанныеСоответствия.ИсточникДанных));
							
	КонецЕсли;
		
КонецПроцедуры 

&НаСервере
Процедура ЗаписатьТекущиеНастройкиТрансляции()
	
	СоответствиеСчетов=ТаблицаСчетовПриемник.НайтиПоИдентификатору(Элементы.ТаблицаСчетовПриемник.ТекущаяСтрока);	
	СтруктураПараметров=ПолучитьНастройкиТрансляции(СоответствиеСчетов);			
	УправлениеОтчетамиУХ.ЗаписатьНастройкиПравилТрансляции(ШаблонТрансляции,СтруктураПараметров.Ссылка,СтруктураПараметров);
	
	СоответствиеСчетов.НастройкаСохранена=Истина;
	
	СоответствиеСчетов.ИсточникДанных=УправлениеОтчетамиУХ.ПроверитьСоздатьИсточникТрансляцииРегистр(ПравилоОбработки,СоответствиеСчетов.Ссылка);
	
КонецПроцедуры // ЗаписатьТекущиеНастройкиСоответствия()

Функция ПолучитьНастройкиТрансляции(ДанныеСоответствия)
		
	СтруктураРесурсов=Новый Структура;
	СтруктураРесурсов.Вставить("Ссылка",				ДанныеСоответствия.Ссылка);
	СтруктураРесурсов.Вставить("НаправлениеТрансляции", Перечисления.НаправленияТрансляцииДанных.ФинансовыеРегистрыВРегистрБухгалтерии);
	СтруктураРесурсов.Вставить("ИспользованиеДт", 		ДанныеСоответствия.ИспользованиеДт);
	СтруктураРесурсов.Вставить("ИспользованиеКт", 		ДанныеСоответствия.ИспользованиеКт);
	
	
	Возврат СтруктураРесурсов;
	
КонецФункции // ПолучитьСтруктуруРесурсов()

&НаСервереБезКонтекста
Процедура СоздатьСоответствие(СтруктураДанных)
	
	Справочники.СоответствияСчетовДляТрансляции.ИзменитьОбъектПоПараметрамРегистр(СтруктураДанных);
		
КонецПроцедуры // СоздатьСоответствие()


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия="ВыбранОбъектУчета" Тогда
		
		ТекущийПриемник=Элементы.ТаблицаСчетовПриемник.ТекущиеДанные;
		
		Если Элементы.ТаблицаСчетовПриемник.ТекущийЭлемент.Имя="ПриемникОбъектУчетаИсточник"
			ИЛИ Элементы.ТаблицаСчетовПриемник.ТекущийЭлемент.Имя="ПриемникОбъектНастройки" Тогда
			
			ДобавитьОбъектСоответствия(ТекущийПриемник,Параметр);
			
		ИначеЕсли Элементы.ТаблицаСчетовПриемник.ТекущийЭлемент.Имя="ПриемникКоррОбъектУчетаИсточник"
			ИЛИ Элементы.ТаблицаСчетовПриемник.ТекущийЭлемент.Имя="ПриемникКоррОбъектНастройки" Тогда
			
			ТекущийПриемник.КоррОбъектУчетаИсточник=Параметр.ОбъектУчетаИсточник;
			ТекущийПриемник.КоррОбъектНастройки=Параметр.ОбъектНастройки;
			ТекущийПриемник.НастройкаСохранена=Ложь;
			
		КонецЕсли; 
		
	КонецЕсли;
				
КонецПроцедуры

