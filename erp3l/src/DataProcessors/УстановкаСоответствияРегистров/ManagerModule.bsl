
Функция ПолучитьДанныеШаблона(ШаблонТрансляции) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ШаблоныТрансляций.ПланСчетовИсточник,
	|	ШаблоныТрансляций.ПланСчетовПриемник,
	|	ШаблоныТрансляций.РегистрБухгалтерииИсточник,
	|	ШаблоныТрансляций.РегистрБухгалтерииПриемник,
	|	ШаблоныТрансляций.ПланСчетовИсточник.Владелец КАК ТипБД,
	|	ШаблоныТрансляций.НаправлениеТрансляции,
	|	ШаблоныТрансляций.ВидОтчетаОСВИсточник,
	|	ШаблоныТрансляций.ВидОтчетаОСВПриемник,
	|	ВЫБОР
	|		КОГДА (ШаблоныТрансляций.НаправлениеТрансляции = ЗНАЧЕНИЕ(Перечисление.НаправленияТрансляцииДанных.ПоказателиВПоказатели)
	|				ИЛИ ШаблоныТрансляций.НаправлениеТрансляции = ЗНАЧЕНИЕ(Перечисление.НаправленияТрансляцииДанных.РегистрБухгалтерииВПоказатели))
	|				И ШаблоныТрансляций.ВидОтчетаОСВПриемник.СокращеннаяОСВ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СокращеннаяОСВ
	|ИЗ
	|	Справочник.ШаблоныТрансляций КАК ШаблоныТрансляций
	|ГДЕ
	|	ШаблоныТрансляций.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ШаблонТрансляции);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Результат.Следующий();
	
	СтруктураПараметров=Новый Структура("ПланСчетовИсточник,ПланСчетовПриемник,РегистрБухгалтерииИсточник,РегистрБухгалтерииПриемник,ВидОтчетаОСВИсточник,ВидОтчетаОСВПриемник,ТипБД,НаправлениеТрансляции,СокращеннаяОСВ");
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,Результат);
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	МАКСИМУМ(СоответствияСчетовДляТрансляции.ИдентификаторСоответствия) КАК ИдентификаторСоответствия
	|ИЗ
	|	Справочник.СоответствияСчетовДляТрансляции КАК СоответствияСчетовДляТрансляции
	|ГДЕ
	|	СоответствияСчетовДляТрансляции.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец",ШаблонТрансляции);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		ТекущийИдентификатор=Результат.ИдентификаторСоответствия;
		
	Иначе
		
		ТекущийИдентификатор=0;
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ТекущийИдентификатор",ТекущийИдентификатор);
	
	Возврат СтруктураПараметров;
		
КонецФункции // ПолучитьСписокНаправленийТрансляции() 

Процедура ЗаполнитьИсточникиДляФинансовыхРегистров(Параметры=Неопределено) Экспорт
	
	ДеревоОбъектовУчета=Перечисления.ОбъектыБухгалтерскогоУчета.ДеревоОбъектовУчета();
	ТаблицаОбъектовУчета=Перечисления.ОбъектыБухгалтерскогоУчета.ОписаниеОбъектовБухгалтерскогоУчета();
    ТаблицаОбъектовУчета.Колонки.Добавить("ЕстьИсточник",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	Для Каждого СтрокаГруппа ИЗ ДеревоОбъектовУчета.Строки Цикл
		
		ГруппаИсточников=ПроверитьСоздатьГруппуИсточников(СтрокаГруппа);
		
		Для Каждого СтрокаИсточник ИЗ СтрокаГруппа.Строки Цикл
			
			СтрокаОписание=ТаблицаОбъектовУчета.Найти(СтрокаИсточник.ОбъектУчета,"ОбъектУчета");
			
			ПроверитьСоздатьИсточникДанных(ГруппаИсточников,СтрокаОписание);
			
		КонецЦикла;
		
	КонецЦикла;
	
	МассивНеВДереве=ТаблицаОбъектовУчета.НайтиСтроки(Новый Структура("ЕстьИсточник",Ложь));
	
	ДанныеГруппы=Новый Структура;
	ДанныеГруппы.Вставить("Представление","Прочие объекты бухгалтерского учета");
	
	ГруппаИсточников=ПроверитьСоздатьГруппуИсточников(ДанныеГруппы);
	
	Для Каждого СтрокаОписание ИЗ МассивНеВДереве Цикл
		
		ПроверитьСоздатьИсточникДанных(ГруппаИсточников,СтрокаОписание);	
		
	КонецЦикла;	
	
КонецПроцедуры // ЗаполнитьИсточникиДляФинансовыхРегистров()

Функция ПроверитьСоздатьГруппуИсточников(СтрокаГруппа)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.ЭтоГруппа
	|	И ИсточникиДанныхДляРасчетов.Наименование = &Наименование
	|	И ИсточникиДанныхДляРасчетов.СпособИспользования = ЗНАЧЕНИЕ(Перечисление.СпособыИспользованияОперандов.ПроизвольныеДанные)
	|	И ИсточникиДанныхДляРасчетов.ТипБД = ЗНАЧЕНИЕ(Справочник.ТипыБазДанных.ТекущаяИБ)";
	
	Запрос.УстановитьПараметр("Наименование",СтрокаГруппа.Представление);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Возврат Результат.Ссылка;
		
	Иначе
		
		СправочникОбъект=Справочники.ИсточникиДанныхДляРасчетов.СоздатьГруппу();
		СправочникОбъект.Наименование=СтрокаГруппа.Представление;
		СправочникОбъект.СпособИспользования=Перечисления.СпособыИспользованияОперандов.ПроизвольныеДанные;
		СправочникОбъект.ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ;
		СправочникОбъект.Записать();
		Возврат СправочникОбъект.Ссылка;
		
	КонецЕсли;
	
КонецФункции // ПроверитьСоздатьГруппуИсточников() 

Процедура ПроверитьСоздатьИсточникДанных(ГруппаИсточников,ОписаниеИсточника)
	
	Если Не ЗначениеЗаполнено(ОписаниеИсточника.ИсточникДанных) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.ОбъектУчета = &ОбъектУчета";
	
	Запрос.УстановитьПараметр("ОбъектУчета",ОписаниеИсточника.ОбъектУчета);
	РегистрИсточник=ПолучитьОписаниеРегистраНакопленияБД(Справочники.ТипыБазДанных.ТекущаяИБ,ОписаниеИсточника.ИсточникДанных);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		ИсточникОбъект=Результат.Ссылка.ПолучитьОбъект();
		ИсточникОбъект.ПравилаИспользованияПолейЗапроса.Очистить();
		ИсточникОбъект.ПодготовитьТаблицыСопоставленийИОтборов();
		
		Если НЕ ИсточникОбъект.РегистрБД=РегистрИсточник Тогда
			
			ИсточникОбъект.РегистрБД=РегистрИсточник;
			ИсточникОбъект.ОсновнаяТаблицаРегистра=Истина;
			ИсточникОбъект.ПриИзмененииРегистраБД();
			ИсточникОбъект.ОбъектИсточник=РегистрИсточник;
			
		КонецЕсли;
			
	Иначе
		
		ИсточникОбъект=Справочники.ИсточникиДанныхДляРасчетов.СоздатьЭлемент();
		ИсточникОбъект.ОбъектУчета=ОписаниеИсточника.ОбъектУчета;
		ИсточникОбъект.ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ;
		ИсточникОбъект.СпособИспользования=Перечисления.СпособыИспользованияОперандов.ПроизвольныеДанные;
		ИсточникОбъект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления;
		ИсточникОбъект.РегистрБД=РегистрИсточник;
		ИсточникОбъект.ОсновнаяТаблицаРегистра=Истина;
		ИсточникОбъект.ОбработатьПредзаполненныеРеквизиты();
		ИсточникОбъект.Наименование=Строка(ОписаниеИсточника.ОбъектУчета);
		
	КонецЕсли;
	
	ИсточникОбъект.Родитель=ГруппаИсточников;
	ИсточникОбъект.ПодготовитьДеревоПараметровОтбораБД();
	
	ПараметрыОтражения=ПараметрыОтраженияДвиженийВФинансовомУчете(ОписаниеИсточника.ИсточникДанных);
			
	Если ТипЗнч(ОписаниеИсточника.ОтборДанных)=Тип("Соответствие") Тогда
		
		Для Каждого КлючИЗначение ИЗ ОписаниеИсточника.ОтборДанных Цикл
			
			СтрокаОтбора=ИсточникОбъект.ДеревоПараметровОтбораБД.Строки.Добавить();
			СтрокаОтбора.ПолеБД=КлючИЗначение.Ключ;
			
			Если ТипЗнч(КлючИЗначение.Значение)=Тип("Массив") Тогда
				
				УточнениеСпособа=Новый СписокЗначений;
				УточнениеСпособа.ЗагрузитьЗначения(КлючИЗначение.Значение);
				СтрокаОтбора.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений;
				СтрокаОтбора.УточнениеСпособаОпределения=УточнениеСпособа;
				
			Иначе
				
				СтрокаОтбора.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
				СтрокаОтбора.УточнениеСпособаОпределения=КлючИЗначение.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	ЗаполнитьСоответствиеРесурсов(ИсточникОбъект,ОписаниеИсточника,ПараметрыОтражения);
	ЗаполнитьПоляАналитик(ИсточникОбъект,ОписаниеИсточника,ПараметрыОтражения);
	ИсточникОбъект.ПутьКДаннымОбъектНастройки=?(ПараметрыОтражения=Неопределено,ОписаниеИсточника.ПутьКДаннымОбъектНастройки,ПараметрыОтражения.ПутьКДаннымОбъектНастройки);
	
	ИсточникОбъект.мМодифицированность=Истина;
	ИсточникОбъект.СохранитьНастройкиОперанда();
	ИсточникОбъект.Наименование=Строка(ИсточникОбъект.ОбъектУчета);
	ИсточникОбъект.Записать(); 
	
	ОписаниеИсточника.ЕстьИсточник=Истина;
		
КонецПроцедуры // ПроверитьСоздатьИсточникДанных()

Процедура ЗаполнитьСоответствиеРесурсов(ИсточникОбъект,ОписаниеИсточника,ПараметрыОтражения)
	
	ИсточникОбъект.СоответствиеРесурсовДляТрансляции.Очистить();
	
	Если ПараметрыОтражения=Неопределено Тогда
		
		РесурсыРегл=ОписаниеИсточника.РесурсыРегл;
		РесурсыВал=ОписаниеИсточника.РесурсыВал;
		РесурсыКоличество=ОписаниеИсточника.РесурсыКоличество; 
		РесурсыУпр=ОписаниеИсточника.РесурсыУпр;
		
	Иначе
		
		РесурсыРегл=?(ПараметрыОтражения.РесурсыРегл.Количество()=0,ОписаниеИсточника.РесурсыРегл,ПараметрыОтражения.РесурсыРегл);
		РесурсыВал=?(ПараметрыОтражения.РесурсыВал.Количество()=0,ОписаниеИсточника.РесурсыВал,ПараметрыОтражения.РесурсыВал);
		РесурсыКоличество=?(ПараметрыОтражения.РесурсыКоличество.Количество()=0,ОписаниеИсточника.РесурсыКоличество,ПараметрыОтражения.РесурсыКоличество);
		РесурсыУпр=?(ПараметрыОтражения.РесурсыУпр.Количество()=0,ОписаниеИсточника.РесурсыУпр,ПараметрыОтражения.РесурсыУпр);
		
	КонецЕсли;	
	
	СоответствиеПоУмолчанию=Новый Соответствие;
	СоответствиеПоУмолчанию.Вставить("СуммаВВалютеУчета","СуммаРегл");
	СоответствиеПоУмолчанию.Вставить("СуммаВВалюте","Сумма");
	СоответствиеПоУмолчанию.Вставить("Количество","Количество");
	
		
	Если РесурсыРегл.Количество()=0 Тогда
		
		Если НЕ (ИсточникОбъект.РегистрБД.Ресурсы.Найти("СуммаРегл","Имя")=Неопределено
			И ИсточникОбъект.РегистрБД.Реквизиты.Найти("СуммаРегл","Имя")=Неопределено ) Тогда 
			
			НоваяСтрока=ИсточникОбъект.СоответствиеРесурсовДляТрансляции.Добавить();
			НоваяСтрока.РесурсИсточник="СуммаРегл";
			НоваяСтрока.РесурсПриемник="СуммаРегл";
			НоваяСтрока.Коэффициент=1; 
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого Элемент ИЗ РесурсыРегл Цикл
			
			НоваяСтрока=ИсточникОбъект.СоответствиеРесурсовДляТрансляции.Добавить();
			НоваяСтрока.РесурсИсточник=Элемент;
			НоваяСтрока.РесурсПриемник="СуммаРегл";
			НоваяСтрока.Коэффициент=?(Лев(Элемент,1)="-",-1,1);
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Если РесурсыУпр.Количество()=0 Тогда
		
		Если НЕ (ИсточникОбъект.РегистрБД.Ресурсы.Найти("СуммаУпр","Имя")=Неопределено
			И ИсточникОбъект.РегистрБД.Реквизиты.Найти("СуммаУпр","Имя")=Неопределено ) Тогда 
			
			НоваяСтрока=ИсточникОбъект.СоответствиеРесурсовДляТрансляции.Добавить();
			НоваяСтрока.РесурсИсточник="СуммаУпр";
			НоваяСтрока.РесурсПриемник="СуммаУпр";
			НоваяСтрока.Коэффициент=1; 
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого Элемент ИЗ РесурсыУпр Цикл
			
			НоваяСтрока=ИсточникОбъект.СоответствиеРесурсовДляТрансляции.Добавить();
			НоваяСтрока.РесурсИсточник=Элемент;
			НоваяСтрока.РесурсПриемник="СуммаУпр";
			НоваяСтрока.Коэффициент=?(Лев(Элемент,1)="-",-1,1);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Если РесурсыВал.Количество()=0 Тогда
		
		Если НЕ (ИсточникОбъект.РегистрБД.Ресурсы.Найти("Сумма","Имя")=Неопределено
			И ИсточникОбъект.РегистрБД.Реквизиты.Найти("Сумма","Имя")=Неопределено) Тогда
			
			НоваяСтрока=ИсточникОбъект.СоответствиеРесурсовДляТрансляции.Добавить();
			НоваяСтрока.РесурсИсточник="Сумма";
			НоваяСтрока.РесурсПриемник="ВалютнаяСумма";
			НоваяСтрока.Коэффициент=1;
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого Элемент ИЗ РесурсыВал Цикл
			
			НоваяСтрока=ИсточникОбъект.СоответствиеРесурсовДляТрансляции.Добавить();
			НоваяСтрока.РесурсИсточник=Элемент;
			НоваяСтрока.РесурсПриемник="ВалютнаяСумма";
			НоваяСтрока.Коэффициент=?(Лев(Элемент,1)="-",-1,1);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Если РесурсыКоличество.Количество()=0 Тогда
		
		Если НЕ (ИсточникОбъект.РегистрБД.Ресурсы.Найти("Количество","Имя")=Неопределено
			И ИсточникОбъект.РегистрБД.Реквизиты.Найти("Количество","Имя")=Неопределено) Тогда
	
		НоваяСтрока=ИсточникОбъект.СоответствиеРесурсовДляТрансляции.Добавить();
		НоваяСтрока.РесурсИсточник="Количество";
		НоваяСтрока.РесурсПриемник="Количество";
		НоваяСтрока.Коэффициент=1; 
		
		КонецЕсли;
		
	Иначе
		
		Для Каждого Элемент ИЗ РесурсыКоличество Цикл
			
			Если Элемент="0" Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НоваяСтрока=ИсточникОбъект.СоответствиеРесурсовДляТрансляции.Добавить();
			НоваяСтрока.РесурсИсточник=Элемент;
			НоваяСтрока.РесурсПриемник="Количество";
			НоваяСтрока.Коэффициент=?(Лев(Элемент,1)="-",-1,1);
			
		КонецЦикла;
		
	КонецЕсли;
				
КонецПроцедуры // ЗаполнитьСоответствиеРесурсов() 

Процедура ЗаполнитьПоляАналитик(ИсточникОбъект,ОписаниеИсточника,ПараметрыОтражения)
		
	Если ПараметрыОтражения=Неопределено Тогда
		
		ЗаполнитьПоОписаниюИсточника(ИсточникОбъект,ОписаниеИсточника);
		
	Иначе
		
		ЗаполнитьПоПараметрамОтражения(ИсточникОбъект,ПараметрыОтражения);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоляАналитик()

Процедура ЗаполнитьПоОписаниюИсточника(ИсточникОбъект,ОписаниеИсточника)
	
	
	
КонецПроцедуры // ЗаполнитьПоОписаниюИсточника() 

Процедура ЗаполнитьПоПараметрамОтражения(ИсточникОбъект,ПараметрыОтражения)
	
	Если ЗначениеЗаполнено(ПараметрыОтражения.ПутьКДаннымВалюта) Тогда
		
		ДобавитьСтрокуАналитики(ИсточникОбъект,ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты,ПараметрыОтражения.ПутьКДаннымВалюта);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтражения.ПутьКДаннымНаправлениеДеятельности) Тогда
		
		ДобавитьСтрокуАналитики(ИсточникОбъект,ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.НаправленияДеятельности,ПараметрыОтражения.ПутьКДаннымНаправлениеДеятельности);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтражения.ПутьКДаннымОрганизация) Тогда
		
		ДобавитьСтрокуАналитики(ИсточникОбъект,ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ОрганизационныеЕдиницы,ПараметрыОтражения.ПутьКДаннымОрганизация);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтражения.ПутьКДаннымПодразделение) Тогда
		
		ДобавитьСтрокуАналитики(ИсточникОбъект,ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Подразделения,ПараметрыОтражения.ПутьКДаннымПодразделение+".ЦФО");
		
	КонецЕсли;
	
	Для Каждого Элемент ИЗ ПараметрыОтражения.ИсточникиСубконто Цикл
		
		ТекВидСубконто=НайтиСоответствующийВидСубконтоКорпоративные(Элемент.Значение.Тип);
		
		Если НЕ ТекВидСубконто=Неопределено Тогда
						
			ДобавитьСтрокуАналитики(ИсточникОбъект,ТекВидСубконто,Элемент.Значение.ПутьКДанным);
			
		КонецЕсли;
		
	КонецЦикла;		
		
КонецПроцедуры // ЗаполнитьПоПараметрамОтражения()

Процедура ДобавитьСтрокуАналитики(ИсточникОбъект,ВидАналитики,ПутьКДанным)
	
	СтрокаНастройки=ИсточникОбъект.ОпределитьРабочуюСтроку("ПолеБД",ПутьКДанным);
	
	ИсточникОбъект.ДобавитьСтрокуВозможныхПолей(ВидАналитики);
	СтрокаПоле=ИсточникОбъект.мТаблицаВозможныхПолей.Найти(ВидАналитики,"ВидАналитики");
	
	СтрокаТаблицы                       = ИсточникОбъект.ТаблицаСоответствияБД.Добавить();
	СтрокаТаблицы.АналитикаКонсолидации = СтрокаПоле.Поле;
	СтрокаТаблицы.ПсевдонимКонсолидации = СтрокаПоле.Синоним;
	СтрокаТаблицы.АналитикаОтчета		= СтрокаПоле.АналитикаОтчета;
	СтрокаТаблицы.ВидАналитики			= СтрокаПоле.ВидАналитики;
	СтрокаТаблицы.ТаблицаАналитики		= СтрокаПоле.ТаблицаАналитики;
	СтрокаТаблицы.Порядок				= СтрокаПоле.Порядок;	
	СтрокаТаблицы.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
	СтрокаТаблицы.ПолеБД=ПутьКДанным;
	СтрокаТаблицы.ПсевдонимБД=СтрЗаменить(СтрокаТаблицы.ПолеБД,".","");
	СтрокаТаблицы.Сопоставлено=Истина;
		
КонецПроцедуры // ДобавитьСтрокуАналитики() 
	
Функция ПолучитьОписаниеРегистраНакопленияБД(ТипБД,ИмяРегистра)	
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	РегистрыНакопленияБД.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РегистрыНакопленияБД КАК РегистрыНакопленияБД
	|ГДЕ
	|	РегистрыНакопленияБД.Владелец = &Владелец
	|	И РегистрыНакопленияБД.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Владелец",ТипБД);
	Запрос.УстановитьПараметр("Наименование",ИмяРегистра);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Результат.Следующий();
	Возврат Результат.Ссылка;
	
КонецФункции // ПолучитьОписаниеРегистраНакопленияБД() 

Функция ПараметрыОтраженияДвиженийВФинансовомУчете(ИмяРегистра)
	
	Попытка
		
		Возврат РегистрыНакопления[ИмяРегистра].ПараметрыОтраженияДвиженийВФинансовомУчете();
		
	Исключение
		
		Возврат Неопределено;
		
	КонецПопытки;
		
КонецФункции // ПараметрыОтраженияДвиженийВФинансовомУчете() 

Функция НайтиСоответствующийВидСубконтоКорпоративные(ТипЗначения)
	

	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	3 КАК Уровень,
	             |	МСФОВидыСубконто.ВидСубконто КАК ВидСубконто
	             |ПОМЕСТИТЬ ВидыСубконтоМСФО
	             |ИЗ
	             |	ПланСчетов.МСФО.ВидыСубконто КАК МСФОВидыСубконто
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ВидыСубконтоКорпоративные.Ссылка КАК Ссылка,
	             |	ВидыСубконтоКорпоративные.ТипЗначения КАК ТипЗначения,
	             |	ЕСТЬNULL(ВидыСубконтоМСФО.Уровень, 0) + ВЫБОР
	             |		КОГДА ВидыСубконтоКорпоративные.Предопределенный
	             |			ТОГДА 1
	             |		ИНАЧЕ 0
	             |	КОНЕЦ КАК СтепеньСоответствия
	             |ИЗ
	             |	ПланВидовХарактеристик.ВидыСубконтоКорпоративные КАК ВидыСубконтоКорпоративные
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ВидыСубконтоМСФО КАК ВидыСубконтоМСФО
	             |		ПО ВидыСубконтоКорпоративные.Ссылка = ВидыСубконтоМСФО.ВидСубконто
	             |ГДЕ
	             |	НЕ ВидыСубконтоКорпоративные.ПометкаУдаления
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	СтепеньСоответствия УБЫВ"; 
	
	Результат=Запрос.Выполнить().Выбрать();
	
	ТабВидыСубконто=Новый ТаблицаЗначений;
	ТабВидыСубконто.Колонки.Добавить("ВидСубконто");
	ТабВидыСубконто.Колонки.Добавить("КоличествоТипов");
		
	Пока Результат.Следующий() Цикл
		
		МассивТипов=Результат.ТипЗначения.Типы();
		
		Если МассивТипов.Количество()>5 Тогда
			
			Если Результат.СтепеньСоответствия <3 Тогда 
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого СтрТип ИЗ МассивТипов Цикл
			
			Если ТипЗначения.СодержитТип(СтрТип) Тогда
				
				Если МассивТипов.Количество()=1 Тогда 	
					
					Возврат Результат.Ссылка;
					
				Иначе
					
					НоваяСтрока=ТабВидыСубконто.Добавить();
					НоваяСтрока.ВидСубконто=Результат.Ссылка;
					НоваяСтрока.КоличествоТипов=МассивТипов.Количество();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла; 
	
	Если ТабВидыСубконто.Количество()>0 Тогда
		
		ТабВидыСубконто.Сортировать("КоличествоТипов Возр");
		Возврат ТабВидыСубконто[0].ВидСубконто;
		
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции // НайтиСоответствующийВидСубконтоКорпоративные() 