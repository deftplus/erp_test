

#Область ОбъявлениеПеременных

Перем мПоказатели Экспорт;
Перем мПоказателиРаскрытия Экспорт;// Таблица раскрытий, полученная при полном формировании таблицы
Перем мДанныеДляРаскрытия Экспорт; // Таблица для отображения возможности раскрытия показателя

Перем мИзмененныеПоказателиРаскрытия;

Перем мТабПоказателиСвод Экспорт;
Перем мТаблицаАналитикВидаОтчета Экспорт;
Перем МаксАналитикПоказателя Экспорт;
Перем МаксАналитикОтчета Экспорт;
Перем ТаблицаСтроки Экспорт;
Перем ДеревоСтрок Экспорт;
Перем СписокКолонокБазис Экспорт;
Перем ПоказателиСРаскрытием Экспорт;

Перем СписокИспользуемыхВалют Экспорт;
Перем ВалютаОтображения Экспорт;

Перем ТабОформлениеСтрок Экспорт;
Перем ТабОформлениеПоказателей Экспорт;

Перем ТабОтчеты Экспорт;
Перем ТабОтчетыСводная Экспорт;
Перем ТаблицаРаскрытийСтрок Экспорт;
Перем ШаблонРаскрытиеСтроки Экспорт;

Перем ТабРаскрытиеГруппСтроки Экспорт;
Перем ТабРаскрытиеГруппСтрокиДерево Экспорт;

Перем ТабРаскрытиеГруппКолонки Экспорт;

Перем МассивГруппировокСтрокИтог Экспорт;
Перем МассивГруппировокКолонокИтог Экспорт;
Перем СтрРасшифровкаКолонок Экспорт;

Перем ТабДок Экспорт;
Перем СписокОрганизацииОтбор Экспорт;
Перем СписокПериодыОтбор Экспорт;
Перем СписокСценарииОтбор Экспорт;
Перем ТабАналитикиОтбор Экспорт;

Перем СписокПоказателиНеВБланке Экспорт; // При выбранном бланке, в отчет не выводятся показатели, которые в нем не отображаются.
Перем СписокСтрокиНеВБланке Экспорт; // При выбранном бланке, в отчет не выводятся показатели, которые в нем не отображаются.
Перем СписокКолонкиНеВБланке Экспорт; //
Перем СписокРедактируемыхПоказателей Экспорт; // Список показателей со способом обработки "Заполнение"

Перем СписокИзмененныхПоказателей Экспорт; // Список показателей, по которым необходимо пересчитать итоги и отобразить в таблице
Перем ТабИзмененныхОбластей Экспорт; // Таблица, содержащая исходные цвета областей, измененные после редактирования их значений;

Перем ПерваяСтрока Экспорт;
Перем ПерваяКолонка Экспорт;
Перем ПоследняяКолонка Экспорт;

Перем мПоказателиЭталон Экспорт;

// Параметры вывода отчета

Перем ОбластьОтступ Экспорт;
Перем ОбластьГруппировкиСтрока Экспорт;
Перем ОбластьГруппировкиПоказатель Экспорт;
Перем ОбластьВычисляемойКолонкиАбс Экспорт;
Перем ОбластьВычисляемойКолонкиОтн Экспорт;
Перем ОбластьГруппировкиСтрокаРаскрытие Экспорт;
Перем ОбластьГруппировкиПоказательРаскрытие Экспорт;
Перем ОбластьГруппировкиПоказательРаскрытиеСтрока Экспорт;
Перем ОбластьГруппировкаКолонка Экспорт;
Перем ОбластьРазделитель Экспорт;

Перем ТаблицаШаблонов Экспорт;

Перем ТабМакетКолонки Экспорт;

Перем УровеньШапки Экспорт;
Перем КолонокАналитикиРаскрытия Экспорт;

Перем НачалоКолонок Экспорт;
Перем УровеньСтрока Экспорт;
Перем УровеньКолонка Экспорт;
Перем ТекУровеньВывода Экспорт;
Перем ШиринаТаблицы Экспорт;

Перем Расшифровка Экспорт;
Перем РасшифровкаСтрока Экспорт;

Перем ШаблонРасшифровки Экспорт;

// Таблица координат областей, соответствующих измерениям
Перем ШаблонКоординаты Экспорт;

Перем ТабКоординатыСтрок Экспорт;
Перем ТабКоординатыКолонок Экспорт;
Перем КэшТабКоординатПоНомерамКолонок;
Перем КолонкаДетали;
Перем КоличествоИзмеренийСтрок Экспорт;
Перем КоличествоИзмеренийКолонок Экспорт;
Перем ТабКоординатыВычисляемыхКолонок Экспорт;
Перем ТабКоординатыОбщ Экспорт;


Перем ШаблонТаблицыКоординат Экспорт;

Перем ЦветИзмененнойОбласти Экспорт;
Перем ЦветВычисляемойОбласти Экспорт;
Перем МассивШиринаКолонок Экспорт;

Перем ОтборПоПериметру Экспорт; // Признак того, что данные отбираются по организациям, входящим в определенный состав периметра

Перем ГруппировкаБазис Экспорт;
Перем СправочникиГруппировок Экспорт;

Перем ЕстьАнализОтклонений Экспорт;
Перем ЕстьВычисляемыеКолонки Экспорт;

Перем СтруктураГруппировокИерархия Экспорт;
Перем ЕстьВыводИерархии Экспорт;
Перем КэшРодителей Экспорт;
Перем КэшУровней Экспорт;

Перем ОбластьРучногоИзменения Экспорт;
Перем ДанныеИзмененнойЯчейки Экспорт;

Перем СохраненнаяНастройка Экспорт;

Перем ТекущийДелитель Экспорт; // Переменная содержит делитель для вывода значений в таблицу
Перем ТекущаяТочность Экспорт; // Переменная содержит точность для вывода значений в таблицу

Перем ТабГраницыОформленияПозитивОтн Экспорт; // Границы условного оформления для позитивных относительных отклонений
Перем ТабГраницыОформленияПозитивАбс Экспорт; // Границы условного оформления для позитивных абсолютных отклонений
Перем ТабГраницыОформленияНегативОтн Экспорт; // Границы условного оформления для негативных относительных отклонений
Перем ТабГраницыОформленияНегативАбс Экспорт; // Границы условного оформления для негативных абсолютных отклонений

Перем ОценкиОтклоненийПоказателей Экспорт; // Соответствие, в котором хранится указанная для показателя оценка положительного отклонения

// Кэшированные запросы, содержащие во временных таблицах данные, длительно не изменяющиеся;

Перем ЗапросКоординаты Экспорт;
Перем ЗапросДанные Экспорт;
Перем ЗапросДанныеРаскрытия Экспорт;

Перем ТаблицыЗапросаДанные Экспорт;
Перем ТаблицыЗапросаРаскрытие Экспорт;

Перем МассивТаблицПоказателей Экспорт; //  Имена таблиц мПоказатели, помещеннные в ЗапросДанные, для уничтожения перед помещением их заново
Перем МассивТаблицПоказателейРаскрытия Экспорт; //  Имена таблиц мПоказателиРаскрытия, помещеннные в ЗапросДанные, для уничтожения перед помещением их заново

Перем СтрокиРазгруппированы Экспорт;
Перем ТабПризнакиСтрок Экспорт;

Перем ДанныеРаскрытияИнициализированы Экспорт;

Перем ТабРазвернутыхУзлов Экспорт;

Перем МассивИзмененныхОбластей Экспорт; // Массив, в котором хранятся данные по измененным областям, необходимые для отрисовки
Перем МассивДобавленныхСтрокКПередаче Экспорт; // Массив, в котором хранятся данные по добавленным строкам, необходимые для отрисовки
Перем МассивУдаленныхСтрокКПередаче Экспорт; // Массив, в котором хранятся данные по удаленным строкам, необходимые для отрисовки
Перем ТаблицаКоординатПомещенаВЗапрос Экспорт;

Перем ОсновныеВалюты Экспорт;
Перем ПоследниеВерсии Экспорт;

Перем АдресХранилищаПеременныхДляРасчета Экспорт;
Перем МассивКлючевыхРеквизитов Экспорт;

#КонецОбласти


#Область ПрограммныйИнтерфейс
	
Процедура ОбновитьСводныйКонтекст() Экспорт
	
	Если ТабОтчетыСводная.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОбъединение="";
	ТекстДанные="";
	
	ТекстОбъединениеРаскрытие="";
	ТекстДанныеРаскрытие="";
	
	ЗапросДанные.Текст="УНИЧТОЖИТЬ мПоказателиКонтекст";
	ЗапросДанные.Выполнить();
	
	Если (Не (ВыводитьВДерево ИЛИ МаксАналитикПоказателя=0)) ИЛИ ДанныеРаскрытияИнициализированы Тогда
		
		ЗапросДанныеРаскрытия.Текст="УНИЧТОЖИТЬ мПоказателиРаскрытияКонтекст";
		ЗапросДанныеРаскрытия.Выполнить();
		
	КонецЕсли;
			
	Для Индекс=0 По ТабОтчетыСводная.Количество()-1 Цикл
		
		ТекСвод=ТабОтчетыСводная[Индекс];
		
		Если ТекСвод.ОсновнаяВалюта=ВалютаОтображения Тогда
			
			ТекстОбъединение=ТекстОбъединение+"
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ * "+?(Индекс=0,"Поместить мПоказателиКонтекст ","")+"ИЗ "+ТекСвод.ОсновнаяТаблица_мПоказатели+" КАК "+ТекСвод.ОсновнаяТаблица_мПоказатели;
			
			Если (Не (ВыводитьВДерево ИЛИ МаксАналитикПоказателя=0)) ИЛИ ДанныеРаскрытияИнициализированы Тогда
				
				ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
				|ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ * "+?(Индекс=0,"Поместить мПоказателиРаскрытияКонтекст ","")+"ИЗ "+ТекСвод.ОсновнаяТаблица_мПоказателиРаскрытия+" КАК "+ТекСвод.ОсновнаяТаблица_мПоказателиРаскрытия;
				
			КонецЕсли;
			
		Иначе
			
			// Проверим, не был ли уже сделан пересчет в текущую валюту отображения
			
			ИмяТаблицыВВалюте=ТекСвод.Таблицы_мПоказателиВВалюте[ВалютаОтображения];
			
			Если ИмяТаблицыВВалюте=Неопределено Тогда
				
				// Получим мПоказатели в валюте отображения
				
				ЗапросДанные.Текст="ВЫБРАТЬ * ИЗ "+ТекСвод.ОсновнаяТаблица_мПоказатели+" КАК "+ТекСвод.ОсновнаяТаблица_мПоказатели;
				мПоказателиТек=ЗапросДанные.Выполнить().Выгрузить();
				
				мПоказателиВВалютеТек=ПолучитьПоказателиВВалютеОтображения(ТекСвод.ОсновнаяВалюта,мПоказателиТек);
				
				ИмяТаблицыВВалюте="ВАЛ_"+СокрЛП(ВалютаОтображения.Код)+"_мПоказателиВВалюте";
				ТекСвод.Таблицы_мПоказателиВВалюте.Вставить(ВалютаОтображения,ИмяТаблицыВВалюте);
				
				ТекстДанные=ТекстДанные+"
				|/////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ * Поместить "+СокрЛП(ИмяТаблицыВВалюте)+" ИЗ &"+ИмяТаблицыВВалюте+" КАК "+ИмяТаблицыВВалюте+"
				|;";
				ЗапросДанные.УстановитьПараметр(ИмяТаблицыВВалюте,мПоказателиВВалютеТек);
				
			КонецЕсли;
			
			ТекстОбъединение=ТекстОбъединение+"
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ * "+?(Индекс=0,"Поместить мПоказателиКонтекст ","")+"ИЗ "+ИмяТаблицыВВалюте+" КАК "+ИмяТаблицыВВалюте;
			
			// Получим мПоказателиРаскрытия в валюте отображения
			// Проверим, не был ли уже сделан пересчет в текущую валюту отображения
			
			Если (Не (ВыводитьВДерево ИЛИ МаксАналитикПоказателя=0)) ИЛИ ДанныеРаскрытияИнициализированы Тогда
				
				ИмяТаблицыВВалюте=ТекСвод.Таблицы_мПоказателиРаскрытияВВалюте[ВалютаОтображения];
				
				Если ИмяТаблицыВВалюте=Неопределено Тогда
					
					ЗапросДанныеРаскрытия.Текст="ВЫБРАТЬ * ИЗ "+ТекСвод.ОсновнаяТаблица_мПоказателиРаскрытия+" КАК "+ТекСвод.ОсновнаяТаблица_мПоказателиРаскрытия;
					мПоказателиРаскрытияТек=ЗапросДанныеРаскрытия.Выполнить().Выгрузить();
					
					мПоказателиРаскрытияВВалютеТек=ПолучитьПоказателиВВалютеОтображения(ТекСвод.ОсновнаяВалюта,мПоказателиРаскрытияТек);
					
					ИмяТаблицыВВалюте="ВАЛ_"+СокрЛП(ВалютаОтображения.Код)+"_мПоказателиРаскрытияВВалюте";			
					ТекСвод.Таблицы_мПоказателиРаскрытияВВалюте.Вставить(ВалютаОтображения,ИмяТаблицыВВалюте);
					
					ТекстДанныеРаскрытие=ТекстДанныеРаскрытие+"
					|/////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ * Поместить "+СокрЛП(ИмяТаблицыВВалюте)+" ИЗ &"+ИмяТаблицыВВалюте+" КАК "+ИмяТаблицыВВалюте+"
					|;";
					ЗапросДанныеРаскрытия.УстановитьПараметр(ИмяТаблицыВВалюте,мПоказателиРаскрытияВВалютеТек);
					
				КонецЕсли;
				
				ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
				|ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ * "+?(Индекс=0,"Поместить мПоказателиРаскрытияКонтекст ","")+"ИЗ "+ИмяТаблицыВВалюте+" КАК "+ИмяТаблицыВВалюте;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ТекстДанные="" Тогда
		
		ЗапросДанные.Текст=ТекстДанные+Сред(ТекстОбъединение,16)+"
		|ИНДЕКСИРОВАТЬ ПО ЭкземплярОтчета
		|;";
		
	Иначе
		
		ЗапросДанные.Текст=Сред(ТекстОбъединение,16)+"
		|ИНДЕКСИРОВАТЬ ПО ЭкземплярОтчета
        |;";
		
	КонецЕсли;
		
	
	Если (Не (ВыводитьВДерево ИЛИ МаксАналитикПоказателя=0)) ИЛИ ДанныеРаскрытияИнициализированы Тогда	
		
		Если НЕ ТекстДанныеРаскрытие="" Тогда
			
			ЗапросДанныеРаскрытия.Текст=ТекстДанныеРаскрытие+Сред(ТекстОбъединениеРаскрытие,16)+"
			|ИНДЕКСИРОВАТЬ ПО ЭкземплярОтчета
			|;";
			
		Иначе			
			ЗапросДанныеРаскрытия.Текст=Сред(ТекстОбъединениеРаскрытие,16)+"
			|ИНДЕКСИРОВАТЬ ПО ЭкземплярОтчета
			|;";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗапросДанные.Выполнить();
	
	Если (Не (ВыводитьВДерево ИЛИ МаксАналитикПоказателя=0)) ИЛИ ДанныеРаскрытияИнициализированы Тогда
		ЗапросДанныеРаскрытия.Выполнить();
	КонецЕсли;
		
КонецПроцедуры // ОбновитьСводныйКонтекст()

Процедура ОбновитьКонтекстРаскрытия() Экспорт
	
	Если ТаблицаРаскрытийСтрок.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросДанныеРаскрытия.Текст="";
	ТекстЗапросаОбщий="";
	
	Для Каждого СтрРаскрытие ИЗ ТаблицаРаскрытийСтрок Цикл
		
		ПрефиксТаблицы="Раскрытие_"+Формат(СтрРаскрытие.НомерСтроки,"ЧГ=0");
		
		ТекстОбъединениеРаскрытие="";
		ТекстДанныеРаскрытие="";
			
		ТекстЗапросаОбщий=ТекстЗапросаОбщий+"
		|УНИЧТОЖИТЬ мПоказателиРаскрытияКонтекст_"+ПрефиксТаблицы+"
		|;";
				
		ТабРаскрытиеСтроки=СтрРаскрытие.ТабРаскрытиеСтроки;
		
		Для Индекс=0 По ТабРаскрытиеСтроки.Количество()-1 Цикл
			
			ТекСвод=ТабРаскрытиеСтроки[Индекс];
			
			Если ТекСвод.ОсновнаяВалюта=ВалютаОтображения Тогда
				
				ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
				|ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ * "+?(Индекс=0,"Поместить мПоказателиРаскрытияКонтекст_"+ПрефиксТаблицы+" ","")+"ИЗ "+ТекСвод.ИмяТаблицыВОсновнойВалюте+" КАК "+ТекСвод.ИмяТаблицыВОсновнойВалюте;
				
			Иначе
				
				// Проверим, не был ли уже сделан пересчет в текущую валюту отображения
				
				ИмяТаблицыВВалюте=ТекСвод.ИменаТаблицВВалюте[ВалютаОтображения];
				
				Если ИмяТаблицыВВалюте=Неопределено Тогда
					
					ЗапросДанныеРаскрытия.Текст="ВЫБРАТЬ * ИЗ "+ТекСвод.ИмяТаблицыВОсновнойВалюте+" КАК "+ТекСвод.ИмяТаблицыВОсновнойВалюте;
					мПоказателиРаскрытияТек=ЗапросДанныеРаскрытия.Выполнить().Выгрузить();
					
					мПоказателиРаскрытияВВалютеТек=ПолучитьПоказателиВВалютеОтображения(ТекСвод.ОсновнаяВалюта,мПоказателиРаскрытияТек);
					
					ИмяТаблицыВВалюте=ПрефиксТаблицы+"_ВАЛ_"+СокрЛП(ВалютаОтображения.Код)+"_мПоказателиРаскрытияВВалюте";			
					ТекСвод.ИменаТаблицВВалюте.Вставить(ВалютаОтображения,ИмяТаблицыВВалюте);
					
					ТекстДанныеРаскрытие=ТекстДанныеРаскрытие+"
					|/////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ * Поместить "+СокрЛП(ИмяТаблицыВВалюте)+" ИЗ &"+ИмяТаблицыВВалюте+" КАК "+ИмяТаблицыВВалюте+"
					|;";
					ЗапросДанныеРаскрытия.УстановитьПараметр(ИмяТаблицыВВалюте,мПоказателиРаскрытияВВалютеТек);
					
				КонецЕсли;
				
				ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
				|ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ * "+?(Индекс=0,"Поместить мПоказателиРаскрытияКонтекст"+"_"+ПрефиксТаблицы+" ","")+"ИЗ "+ИмяТаблицыВВалюте+" КАК "+ИмяТаблицыВВалюте;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ТекстДанныеРаскрытие="" Тогда
			
			ТекстЗапросаОбщий=ТекстЗапросаОбщий+ТекстДанныеРаскрытие+Сред(ТекстОбъединениеРаскрытие,16)+"
			|ИНДЕКСИРОВАТЬ ПО ЭкземплярОтчета
			|;";
			
		Иначе
			
			ТекстЗапросаОбщий=ТекстЗапросаОбщий+Сред(ТекстОбъединениеРаскрытие,16)+"
			|ИНДЕКСИРОВАТЬ ПО ЭкземплярОтчета
			|;";
			
		КонецЕсли;	
			
	КонецЦикла;
	
	ЗапросДанныеРаскрытия.Текст=ТекстЗапросаОбщий;
	ЗапросДанныеРаскрытия.Выполнить();
	
КонецПроцедуры

Процедура ПолучитьОценкиОтклонений() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка,
	|	ВЫБОР
	|		КОГДА ПоказателиОтчетов.ОценкаПоложительногоОтклонения = ЗНАЧЕНИЕ(Перечисление.ВидыОценокОтклонений.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОценокОтклонений.Позитивно)
	|		ИНАЧЕ ПоказателиОтчетов.ОценкаПоложительногоОтклонения
	|	КОНЕЦ КАК ОценкаОтклонения
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &ВидОтчета
	|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	
	ОценкиОтклоненийПоказателей=Новый Соответствие;
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ОценкиОтклоненийПоказателей.Вставить(Результат.Ссылка,Результат.ОценкаОтклонения);
		
	КонецЦикла;
		
КонецПроцедуры // ПолучитьОценкиОтклонений()

Функция НастроитьПостроительДиаграммыПоСинтетике(МассивЭкземпляровОтчетов,ТекДанныеЯчейки)Экспорт
	
	ТекстВТ="";
	ТекстОбъединение="";
		
	МаксАналитикПоказателя=ОбщегоНазначенияУХ.МаксКоличествоАналитикПоказателей(ВидОтчета);
	МаксАналитикОтчета=мТаблицаАналитикВидаОтчета.Количество();
	
	МассивЭкземпляровСвод=Новый Массив;
	
	Для Каждого ЭкземплярОтчета ИЗ МассивЭкземпляровОтчетов Цикл
		
		СтрОтчет=ТабОтчеты.Найти(ЭкземплярОтчета,"ЭкземплярОтчета");
		
		Если НЕ СтрОтчет.ОтчетИнициализирован Тогда // Данные будем брать из таблицы сводной инициализации
			
			МассивЭкземпляровСвод.Добавить(СтрОтчет.ЭкземплярОтчета);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПервыйЭкземпляр=Истина;
	ТекстОтбор="";
	
	Для Индекс=0 По ТабОтчеты.Количество()-1 Цикл
		
		СтрОтчет=ТабОтчеты[Индекс];
		
		Если МассивЭкземпляровОтчетов.Найти(СтрОтчет.ЭкземплярОтчета)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаИндекс=Формат(Индекс,"ЧГ=");
		
		ИзмеренияАналитики="";
			
		Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
			
			Если СтрАналитика.ЕстьРазворот Тогда
				
				ИзмеренияАналитики=ИзмеренияАналитики+"
				|&"+СтрАналитика.КодАналитики+"_"+СтрокаИндекс+" КАК "+СтрАналитика.КодАналитики+",";
				
				ЗапросДанные.УстановитьПараметр(СтрАналитика.КодАналитики+"_"+СтрокаИндекс,СтрОтчет[СтрАналитика.КодАналитики]);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если (СтрОтчет.ЕстьЭкземплярОтчета И СтрОтчет.ОтчетИнициализирован) Тогда
			
			ПолучитьДокументОбъект(СтрОтчет);
			
			ТекстВТ=ТекстВТ+"
			|/////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ";
			
			Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
				
				ТекстВТ=ТекстВТ+"
				|&"+Реквизит+"_"+СтрокаИндекс+" КАК "+Реквизит+",";
				
			КонецЦикла; 
			
			ТекстВТ=ТекстВТ+ИзмеренияАналитики+"	
			|&ЭкземплярОтчета_"+СтрокаИндекс+" КАК ЭкземплярОтчета,
			|мПоказатели.Ссылка КАК Показатель,
			|мПоказатели.Код,
			|мПоказатели.Строка,
			|мПоказатели.Колонка,
			|мПоказатели.ПорядковыйНомерКолонки,
			|мПоказатели.Значение КАК ЗначениеПоказателя,
			|ВЫРАЗИТЬ(мПоказатели.Значение КАК Число(18,5)) КАК ЗначениеЧисло  
			|Поместить мПоказателиОбщ_"+СтрокаИндекс+"
			|ИЗ &мПоказатели_"+СтрокаИндекс+" КАК мПоказатели";
			
			Если СписокПоказателиНеВБланке.Количество()>0 Тогда
				ТекстОтбор=ТекстОтбор+"			
				|И мПоказатели.Ссылка НЕ В(&СписокПоказателиНеВБланке)";
				
				ЗапросДанные.УстановитьПараметр("СписокПоказателиНеВБланке",СписокПоказателиНеВБланке);
				
			КонецЕсли;
			
			Если ТекДанныеЯчейки.Свойство("Показатель") Тогда
				
				ТекстОтбор=ТекстОтбор+"			
				|И мПоказатели.Ссылка =&ПоказательДиаграмма";
				
				ЗапросДанные.УстановитьПараметр("ПоказательДиаграмма",ТекДанныеЯчейки.Показатель);
				
			КонецЕсли;	
			
			Если Не ПустаяСтрока(ТекстОтбор) Тогда
				
				ТекстВТ=ТекстВТ+"			
				|ГДЕ "+Сред(ТекстОтбор,6)+"
				|;";
				
			Иначе	
				
				ТекстВТ=ТекстВТ+"			
				|;";
				
			КонецЕсли;
			
			МассивТаблицПоказателей.Добавить("мПоказателиОбщ_"+СтрокаИндекс);
			
			Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
				
				ЗапросДанные.УстановитьПараметр(Реквизит+"_"+СтрокаИндекс,СтрОтчет[Реквизит]);
				
			КонецЦикла;
							
			ЗапросДанные.УстановитьПараметр("ЭкземплярОтчета_"+СтрокаИндекс,СтрОтчет.ЭкземплярОтчета);
			ЗапросДанные.УстановитьПараметр("мПоказатели_"+СтрокаИндекс,?(СтрОтчет.ВыводитьВВалютеОтображения,СтрОтчет.мПоказателиВВалюте,СтрОтчет.ОтчетОбъект.мПоказатели));		
			
			ТекстОбъединение=ТекстОбъединение+"
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ * "+?(ПервыйЭкземпляр,"Поместить мПоказатели ","")+"ИЗ мПоказателиОбщ_"+СтрокаИндекс+" КАК мПоказателиОбщ_"+СтрокаИндекс;
			
			Если ПервыйЭкземпляр Тогда
				МассивТаблицПоказателей.Добавить("мПоказатели");
			КонецЕсли;
			
			ПервыйЭкземпляр=Ложь;
			
		КонецЕсли;
				
	КонецЦикла;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Добавляем данные из сводной таблицы значений показателей, которые не изменялись после считывания из базы
	
	Если ТабОтчетыСводная.Количество()>0 Тогда
		
		ЗапросДанные.УстановитьПараметр("МассивЭкземпляровСвод",МассивЭкземпляровСвод);
		
		ИзмеренияАналитики="";
			
		Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
			
			Если СтрАналитика.ЕстьРазворот Тогда
				
				ИзмеренияАналитики=ИзмеренияАналитики+"
				|"+СтрАналитика.КодАналитики+" КАК "+СтрАналитика.КодАналитики+",";
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстОтборДанные="";
		
		ТекстОбъединение=ТекстОбъединение+"
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ";
		
		Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
			
			ТекстОбъединение=ТекстОбъединение+"
			|мПоказателиКонтекст."+Реквизит+" КАК "+Реквизит+",";
		
		КонецЦикла; 
		
		ТекстОбъединение=ТекстОбъединение+ИзмеренияАналитики+"	
		|мПоказателиКонтекст.ЭкземплярОтчета КАК ЭкземплярОтчета,
		|мПоказателиКонтекст.Ссылка КАК Показатель,
		|мПоказателиКонтекст.Код,
		|мПоказателиКонтекст.Строка,
		|мПоказателиКонтекст.Колонка,
		|мПоказателиКонтекст.ПорядковыйНомерКолонки,
		|мПоказателиКонтекст.ЗначениеЧисло КАК ЗначениеПоказателя,
		|мПоказателиКонтекст.ЗначениеЧисло КАК ЗначениеЧисло"+?(ПервыйЭкземпляр,"
		|Поместить мПоказатели ","")+"  
		|ИЗ мПоказателиКонтекст КАК мПоказателиКонтекст
		|ГДЕ мПоказателиКонтекст.ЭкземплярОтчета В (&МассивЭкземпляровСвод)";
		
		Если СписокПоказателиНеВБланке.Количество()>0 Тогда
			ТекстОбъединение=ТекстОбъединение+"			
			|И мПоказателиКонтекст.Ссылка НЕ В(&СписокПоказателиНеВБланке)";
			
			ЗапросДанные.УстановитьПараметр("СписокПоказателиНеВБланке",СписокПоказателиНеВБланке);
			
		КонецЕсли;
		
		Если ТекДанныеЯчейки.Свойство("Показатель") Тогда
			
			ТекстОбъединение=ТекстОбъединение+"			
			|И мПоказателиКонтекст.Ссылка =&ПоказательДиаграмма";
			
			ЗапросДанные.УстановитьПараметр("ПоказательДиаграмма",ТекДанныеЯчейки.Показатель);
			
		КонецЕсли;	
				
		Если ПервыйЭкземпляр Тогда
			МассивТаблицПоказателей.Добавить("мПоказатели");
		КонецЕсли;
		
		ПервыйЭкземпляр=Ложь;
		
	КонецЕсли;
	
	ТекстИндекс="";
	
	Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
		
		ТекстИндекс=ТекстИндекс+Реквизит+",";
		
	КонецЦикла; 
	
	ТекстВТ=ТекстВТ+"
	|"+Сред(ТекстОбъединение,16)+"
	|ИНДЕКСИРОВАТЬ ПО Строка,"+ТекстИндекс+"Колонка 
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиОтчетов.Ссылка КАК Строка,";
	
	Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
		
		ТекстВТ=ТекстВТ+"
		|"+СправочникиГруппировок[Реквизит]+".Ссылка КАК "+Реквизит+",";
		
	КонецЦикла; 
	
	Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
		
		Если СтрАналитика.ЕстьРазворот Тогда
			
			ТекстВТ=ТекстВТ+"
			|мПоказатели."+СтрАналитика.КодАналитики+" КАК "+СтрАналитика.КодАналитики+",";
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстВТ=ТекстВТ+"
	|	Периоды.Ссылка КАК ПериодОтчета,
	|	КолонкиОтчета.Ссылка КАК Колонка,
	|	мПоказатели.ЭкземплярОтчета КАК Регистратор,
	|	мПоказатели.ЗначениеЧисло КАК ЗначениеЧисло
	|ИЗ мПоказатели КАК мПоказатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтрокиОтчетов КАК СтрокиОтчетов
	|		ПО мПоказатели.Строка=СтрокиОтчетов.Ссылка";
	
	Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
		
		ТекстВТ=ТекстВТ+"
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник."+СправочникиГруппировок[Реквизит]+" КАК "+СправочникиГруппировок[Реквизит]+"
		|		ПО мПоказатели."+Реквизит+"="+СправочникиГруппировок[Реквизит]+".Ссылка";
		
	КонецЦикла; 
	
	ТекстВТ=ТекстВТ+"
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Ссылка,ПорядковыйНомер 
	|						ИЗ Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|						ГДЕ КолонкиОтчетов.Владелец=&ВидОтчета
	|		И (НЕ КолонкиОтчетов.ПометкаУдаления)) КАК КолонкиОтчета
	|		ПО мПоказатели.Колонка=КолонкиОтчета.Ссылка
	|УПОРЯДОЧИТЬ ПО";
	
	ТекстУпорядочивания="";
	
	Для Каждого Колонка ИЗ ГруппировкиКолонки Цикл
		
		Если Колонка.Группировка="Колонка" Тогда
			ТекстУпорядочивания=ТекстУпорядочивания+",
			|ПорядковыйНомерКолонки";
		ИначеЕсли Колонка.Группировка="ПериодОтчета" Тогда
			ТекстУпорядочивания=ТекстУпорядочивания+",
			|ПериодОтчета.ДатаНачала";
		ИначеЕсли СтрНайти(Колонка.Группировка,"Аналитика")=0 Тогда	
			ТекстУпорядочивания=ТекстУпорядочивания+",
			|"+Колонка.Группировка+".Наименование";
		КонецЕсли
		
	КонецЦикла;
		
	Для Каждого Строка ИЗ ГруппировкиСтроки Цикл
		
		Если Строка.Группировка="Строка" Тогда
			ТекстУпорядочивания=ТекстУпорядочивания+",
			|СтрокиОтчетов.Порядок";
		ИначеЕсли Строка.Группировка="ПериодОтчета" Тогда
			ТекстУпорядочивания=ТекстУпорядочивания+",
			|ПериодОтчета.ДатаНачала";
		ИначеЕсли СтрНайти(Строка.Группировка,"Аналитика")=0 Тогда	
			ТекстУпорядочивания=ТекстУпорядочивания+",
			|"+Строка.Группировка+".Наименование";
		КонецЕсли
		
	КонецЦикла;
		
	ТекстВТ=ТекстВТ+Сред(ТекстУпорядочивания,2);	
			
	ЗапросДанные.УстановитьПараметр("ПустаяАналитика",Неопределено);
	ЗапросДанные.УстановитьПараметр("ВидОтчета",ВидОтчета);
	ЗапросДанные.УстановитьПараметр("ТаблицаСтроки",ТаблицаСтроки);
	
	ЗапросДанные.Текст=ТекстВТ;
	
	ТаблицаДиаграммы=ЗапросДанные.Выполнить().Выгрузить();
	
	// Уничтожим помещенные в текущем сеансе таблицы
	
	Если МассивТаблицПоказателей.Количество()>0 Тогда
		
		ТекстУничтожить="";
		
		Для Каждого Таблица ИЗ МассивТаблицПоказателей Цикл
			ТекстУничтожить=ТекстУничтожить+"
			|Уничтожить "+Таблица+"
			|;";
		КонецЦикла;
		
		ЗапросДанные.Текст=ТекстУничтожить;
		ЗапросДанные.Выполнить();
		
		МассивТаблицПоказателей.Очистить();
		
	КонецЕсли;
			
	Возврат ТаблицаДиаграммы;
 		
КонецФункции // НастроитьПостроительДиаграммыПоСинтетике()

Процедура ИнициализироватьКонтекстРаскрытия() Экспорт
		
	ПодготовитьТаблицуРаскрытияСтрок();
	
	Если ТабОтчетыСводная.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВерсия=Новый Запрос;
	ЗапросВерсия.Текст="ВЫБРАТЬ
	|	ВерсииЗначенийПоказателей.Ссылка
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета В(&МассивЭкземпляров)
	|	И ВерсииЗначенийПоказателей.Валюта = &Валюта";
			
	// Поместим во временные таблицы данные из регистра "ЗначенияПоказателейОтчетов" в основной валюте отчетов
	
	МассивКомментарии=Новый Массив;
	
	Для Каждого СтрОтчеты ИЗ ТабОтчетыСводная Цикл
		
		ЗапросВерсия.УстановитьПараметр("Валюта", СтрОтчеты.ОсновнаяВалюта);
		
		МассивОтчетов=Новый Массив;
		Для Каждого ЭкземплярОтчета ИЗ СтрОтчеты.МассивЭкземпляров Цикл
			
			ТекОтчет=ТабОтчеты.Найти(ЭкземплярОтчета,"ЭкземплярОтчета");
			Если НЕ ТекОтчет.ОтчетИнициализирован Тогда
				
				МассивОтчетов.Добавить(ЭкземплярОтчета);
				
			КонецЕсли;
			
			МассивКомментарии.Добавить(ЭкземплярОтчета);
				
		КонецЦикла;			
		
		ЗапросВерсия.УстановитьПараметр("МассивЭкземпляров", МассивОтчетов);
				
		СписокИспользуемыхВерсий = Новый СписокЗначений;	
		СписокИспользуемыхВерсий.ЗагрузитьЗначения(ЗапросВерсия.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
		СтрОтчеты.ОсновнаяТаблица_мПоказателиРаскрытия="ВАЛ_"+СокрЛП(СтрОтчеты.ОсновнаяВалюта.Код)+"_Основная_мПоказателиРаскрытия";
		ПоместитьТаблицуРаскрытияВСвод(СписокИспользуемыхВерсий,СтрОтчеты.ОсновнаяТаблица_мПоказателиРаскрытия);
		ДанныеРаскрытияИнициализированы=Истина;
			
	КонецЦикла;
	
	//Если НЕ ВыводитьВДерево Тогда
	//	
	//	ПоместитьКомментарииВСвод(МассивКомментарии,Ложь);
	//	
	//КонецЕсли;
	
	Если ТабОтчетыСводная.Количество()>1 ИЛИ (Не ТабОтчетыСводная[0].ОсновнаяВалюта=ВалютаОтображения) Тогда // Потребуется пересчет в валюту отображения
		
		ЗапросДанныеРаскрытия.Выполнить();
		ЗапросДанныеРаскрытия.Текст="";
		
	КонецЕсли;
	
	// Пересчитаем при необходимости и получим сводные таблицы в валюте отображения
		
	ТекстОбъединениеРаскрытие="";
	ТекстДанныеРаскрытие="";
	
	Для Индекс=0 По ТабОтчетыСводная.Количество()-1 Цикл
		
		ТекСвод=ТабОтчетыСводная[Индекс];
		
		Если ТекСвод.ОсновнаяВалюта=ВалютаОтображения Тогда
			
			ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ * "+?(Индекс=0,"Поместить мПоказателиРаскрытияКонтекст ","")+"ИЗ "+ТекСвод.ОсновнаяТаблица_мПоказателиРаскрытия+" КАК "+ТекСвод.ОсновнаяТаблица_мПоказателиРаскрытия;
			
		Иначе
			
			
			// Получим мПоказателиРаскрытия в валюте отображения
			
			ЗапросДанныеРаскрытия.Текст="ВЫБРАТЬ * ИЗ "+ТекСвод.ОсновнаяТаблица_мПоказателиРаскрытия+" КАК "+ТекСвод.ОсновнаяТаблица_мПоказателиРаскрытия;
			мПоказателиРаскрытияТек=ЗапросДанныеРаскрытия.Выполнить().Выгрузить();
			
			мПоказателиРаскрытияВВалютеТек=ПолучитьПоказателиВВалютеОтображения(ТекСвод.ОсновнаяВалюта,мПоказателиРаскрытияТек);
			
			ИмяТаблицыВВалюте="ВАЛ_"+СокрЛП(ВалютаОтображения.Код)+"_мПоказателиРаскрытияВВалюте";
			
			ТекСвод.Таблицы_мПоказателиРаскрытияВВалюте.Вставить(ВалютаОтображения,ИмяТаблицыВВалюте);
			
			ТекстДанныеРаскрытие=ТекстДанныеРаскрытие+"
			|/////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ * Поместить "+СокрЛП(ИмяТаблицыВВалюте)+" ИЗ &"+ИмяТаблицыВВалюте+" КАК "+ИмяТаблицыВВалюте+"
			|;";
			ЗапросДанныеРаскрытия.УстановитьПараметр(ИмяТаблицыВВалюте,мПоказателиРаскрытияВВалютеТек);
			
			ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ * "+?(Индекс=0,"Поместить мПоказателиРаскрытияКонтекст ","")+"ИЗ "+ИмяТаблицыВВалюте+" КАК "+ИмяТаблицыВВалюте;
				
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ТекстДанныеРаскрытие="" Тогда
		
		ЗапросДанныеРаскрытия.Текст=ТекстДанныеРаскрытие+Сред(ТекстОбъединениеРаскрытие,16)+"
		|ИНДЕКСИРОВАТЬ ПО ЭкземплярОтчета
		|;";
		
	Иначе
		ЗапросДанныеРаскрытия.Текст=ЗапросДанныеРаскрытия.Текст+Сред(ТекстОбъединениеРаскрытие,16)+"
		|ИНДЕКСИРОВАТЬ ПО ЭкземплярОтчета
		|;";
		
	КонецЕсли;
	
	ЗапросДанныеРаскрытия.Выполнить();
		
КонецПроцедуры // ИнициализироватьКонтекстСводно()


#Область ПрограммныйИнтерфейс_ПолучениеДанных

Процедура СформироватьТаблицуСтрок() Экспорт
	
	// Получим бланк отображения, установленный по умолчанию для вида отчета
	ЕстьМакет=Ложь;
	
	Если Не БланкОтчета=Справочники.БланкиОтчетов.ПустаяСсылка() Тогда
		
		ТекМакет=БланкОтчета.Макет.Получить();
		
		Если ТипЗнч(ТекМакет) = Тип("ТабличныйДокумент") Тогда
			
			ЕстьМакет=Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	МаксАналитикПоказателя=ОбщегоНазначенияУХ.МаксКоличествоАналитикПоказателей(ВидОтчета);
	МаксАналитикОтчета=мТаблицаАналитикВидаОтчета.Количество();
	
	// Формируем таблицу строк отчета
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СтрокиОтчетов.Ссылка КАК Ссылка,
	|	СтрокиОтчетов.ПорядковыйНомер КАК ПорядковыйНомер,
	|	СтрокиОтчетов.Код КАК Код,
	|	СтрокиОтчетов.ГруппаРаскрытия.ВидАналитики1 КАК ВидАналитики1,
	|	СтрокиОтчетов.ГруппаРаскрытия.ВидАналитики2 КАК ВидАналитики2,
	|	СтрокиОтчетов.ГруппаРаскрытия.ВидАналитики3 КАК ВидАналитики3,
	|	СтрокиОтчетов.ГруппаРаскрытия.ВидАналитики4 КАК ВидАналитики4,
	|	СтрокиОтчетов.ГруппаРаскрытия.ВидАналитики5 КАК ВидАналитики5,
	|	СтрокиОтчетов.ГруппаРаскрытия.ВидАналитики6 КАК ВидАналитики6,
	|	ВЫБОР
	|		КОГДА СтрокиОтчетов.ГруппаРаскрытия = &ПустаяГруппаРаскрытия
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СтрокиОтчетов.ГруппаРаскрытия.ВидАналитики1 = &ПустойВидСубконто
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ + ВЫБОР
	|				КОГДА СтрокиОтчетов.ГруппаРаскрытия.ВидАналитики2 = &ПустойВидСубконто
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ + ВЫБОР
	|				КОГДА СтрокиОтчетов.ГруппаРаскрытия.ВидАналитики3 = &ПустойВидСубконто
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ + ВЫБОР
	|				КОГДА СтрокиОтчетов.ГруппаРаскрытия.ВидАналитики4 = &ПустойВидСубконто
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ + ВЫБОР
	|				КОГДА СтрокиОтчетов.ГруппаРаскрытия.ВидАналитики5 = &ПустойВидСубконто
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ + ВЫБОР
	|				КОГДА СтрокиОтчетов.ГруппаРаскрытия.ВидАналитики6 = &ПустойВидСубконто
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоАналитик,
	|	СтрокиОтчетов.Родитель КАК Родитель
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &ВидОтчета
	|	И НЕ СтрокиОтчетов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядковыйНомер ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	Запрос.УстановитьПараметр("ПустаяГруппаРаскрытия",Справочники.ГруппыРаскрытия.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВидСубконто",ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка());
	
	ТаблицаСтроки=Запрос.Выполнить().Выгрузить();
	ТаблицаСтроки.Колонки.Код.Имя="Имя";
	
	ТаблицаСтроки.Колонки.Добавить("Код",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(20));
	ТаблицаСтроки.Колонки.Добавить("Порядок",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10,0));
	
	Индекс=1;
	
	ТабОформлениеСтрок.Очистить();
	
	Для Каждого Строка ИЗ ТаблицаСтроки Цикл
		
		Строка.Код=СокрЛП(Строка.Имя);
		Строка.Порядок=Индекс;
		
		Индекс=Индекс+1;
		
		Если ЕстьМакет И СохранятьФорматирование Тогда
			
			Попытка 
				
				ОбластьСтрока=ТекМакет.ПолучитьОбласть("Строка_"+Строка.Код);	
				ОбластьСтрока.ТекущаяОбласть.Заполнение=ТипЗаполненияОбластиТабличногоДокумента.Параметр;
				ОбластьСтрока.ТекущаяОбласть.Параметр="ГруппировкаСтрока";
				
				ОбластьСтрокаРаскрытие=ТекМакет.ПолучитьОбласть("Строка_"+Строка.Код);	
				ОбластьСтрокаРаскрытие.ТекущаяОбласть.Заполнение=ТипЗаполненияОбластиТабличногоДокумента.Параметр;
				ОбластьСтрокаРаскрытие.ТекущаяОбласть.Параметр="ГруппировкаСтрока";
				ОбластьСтрокаРаскрытие.ТекущаяОбласть.Шрифт = Новый Шрифт(ОбластьСтрока.ТекущаяОбласть.Шрифт,,,,Истина);
	
				НоваяСтрока=ТабОформлениеСтрок.Добавить();
				НоваяСтрока.Строка=Строка.Ссылка;
				НоваяСтрока.ШаблонОформления=ОбластьСтрока;
				НоваяСтрока.ШаблонОформленияРаскрытие=ОбластьСтрокаРаскрытие;
				
			Исключение
			КонецПопытки;
			
		КонецЕсли;				
		
	КонецЦикла;
		
	ТаблицаСтроки.Колонки.Удалить("Имя");
	ТаблицаСтроки.Индексы.Добавить("Ссылка");
	
	// Сформируем дерево строк для группировки
	
	Запрос.Текст="ВЫБРАТЬ
	|	СтрокиОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &ВидОтчета
	|	И (НЕ СтрокиОтчетов.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтрокиОтчетов.ПорядковыйНомер
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ";
				 
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	ДеревоСтрок=Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	// Формируем таблицу оформления показателей
	ТабОформлениеПоказателей.Очистить();
	СписокПоказателиНеВБланке.Очистить();
	СписокРедактируемыхПоказателей.Очистить();
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка,
	|	ПоказателиОтчетов.Код,
	|	ПоказателиОтчетов.Строка,
	|	ПоказателиОтчетов.Колонка
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &ВидОтчета
	|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если ЕстьМакет Тогда	
		ОбластиТекМакета = ТекМакет.Области;
		ФорматТекМакета = "ЧЦ=18; ЧДЦ=" + Формат(БланкОтчета.УровеньТочностиПоУмолчанию,"ЧЦ=1; ЧДЦ=0; ЧН=0");	
	КонецЕсли;
				
	Пока Результат.Следующий() Цикл
		
		СписокРедактируемыхПоказателей.Добавить(Результат.Ссылка);
			
		Если ЕстьМакет Тогда
			
			ТекущийКодПоказателя = СокрЛП(Результат.Код);
			Если ОбластиТекМакета.Найти(ТекущийКодПоказателя) = Неопределено Тогда
			    СписокПоказателиНеВБланке.Добавить(Результат.Ссылка);
				Продолжить;
			КонецЕсли;	
			
			ОбластьПоказатель = Неопределено;
			ОбластьПоказательРаскрытие = Неопределено;
			
			Если НЕ ВыводитьВДерево Тогда
			
				ОбластьПоказатель = ТекМакет.ПолучитьОбласть(ТекущийКодПоказателя);
				ОбластьПоказатель.ТекущаяОбласть.Заполнение=ТипЗаполненияОбластиТабличногоДокумента.Параметр;
				ОбластьПоказатель.ТекущаяОбласть.Параметр="ГруппировкаПоказатель";
				
				Если ПустаяСтрока(ОбластьПоказатель.ТекущаяОбласть.Формат) Тогда				
					ОбластьПоказатель.ТекущаяОбласть.Формат = ФорматТекМакета;
				КонецЕсли;
				
				ШрифтТекМакета = Новый Шрифт(ОбластьПоказатель.ТекущаяОбласть.Шрифт,,,,Истина);
				
				ОбластьПоказательРаскрытие=ТекМакет.ПолучитьОбласть(ТекущийКодПоказателя);
				ОбластьПоказательРаскрытие.ТекущаяОбласть.Шрифт = ШрифтТекМакета;
				ОбластьПоказательРаскрытие.ТекущаяОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
				ОбластьПоказательРаскрытие.ТекущаяОбласть.Параметр = "ГруппировкаПоказатель";
				
				Если ПустаяСтрока(ОбластьПоказательРаскрытие.ТекущаяОбласть.Формат) Тогда
					ОбластьПоказательРаскрытие.ТекущаяОбласть.Формат = ФорматТекМакета;
				КонецЕсли;
				
			КонецЕсли;
						
			НоваяСтрока=ТабОформлениеПоказателей.Добавить();
			НоваяСтрока.Строка=Результат.Строка;
			НоваяСтрока.Колонка=Результат.Колонка;					
			НоваяСтрока.ШаблонОформления=ОбластьПоказатель;
			НоваяСтрока.ШаблонОформленияРаскрытие=ОбластьПоказательРаскрытие;
		
		КонецЕсли;	
		
	КонецЦикла;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	СтрокиОтчетов.Ссылка КАК Строка,
	             |	ВЫБОР
	             |		КОГДА СтрокиСРаскрытием.Строка ЕСТЬ NULL 
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ИСТИНА
	             |	КОНЕЦ КАК ЕстьРаскрытие,
	             |	ВЫБОР
	             |		КОГДА СтрокиСЗаполнением.Строка ЕСТЬ NULL 
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ИСТИНА
	             |	КОНЕЦ КАК ЕстьЗаполнение,
	             |	ВЫБОР
	             |		КОГДА СтрокиСВычислением.Строка ЕСТЬ NULL 
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ИСТИНА
	             |	КОНЕЦ КАК ЕстьВычисление
	             |ИЗ
	             |	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |			ПоказателиОтчетов.Строка КАК Строка
	             |		ИЗ
	             |			Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	             |		ГДЕ
	             |			ПоказателиОтчетов.Владелец = &ВидОтчета
	             |			И НЕ ПоказателиОтчетов.ПометкаУдаления
	             |			И НЕ ПоказателиОтчетов.ГруппаРаскрытия = ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка)) КАК СтрокиСРаскрытием
	             |		ПО СтрокиОтчетов.Ссылка = СтрокиСРаскрытием.Строка
	             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |			ПоказателиОтчетов.Строка КАК Строка
	             |		ИЗ
	             |			Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	             |		ГДЕ
	             |			ПоказателиОтчетов.Владелец = &ВидОтчета
	             |			И НЕ ПоказателиОтчетов.ПометкаУдаления) КАК СтрокиСЗаполнением
	             |		ПО СтрокиОтчетов.Ссылка = СтрокиСЗаполнением.Строка
	             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |			ПоказателиОтчетов.Строка КАК Строка
	             |		ИЗ
	             |			Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	             |		ГДЕ
	             |			ЛОЖЬ) КАК СтрокиСВычислением
	             |		ПО СтрокиОтчетов.Ссылка = СтрокиСВычислением.Строка
	             |ГДЕ
	             |	СтрокиОтчетов.Владелец = &ВидОтчета
	             |	И НЕ СтрокиОтчетов.ПометкаУдаления";	
		
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	Запрос.УстановитьПараметр("Заполнение",Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение);
	Запрос.УстановитьПараметр("Вычисление",Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление);
	
	ТабПризнакиСтрок=Запрос.Выполнить().Выгрузить();
	ТабПризнакиСтрок.Индексы.Добавить("Строка");
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	КолонкиОтчетов.Ссылка,
	|	КолонкиОтчетов.Представление
	|ИЗ
	|	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|ГДЕ
	|	КолонкиОтчетов.Владелец = &ВидОтчета
	|	И (НЕ КолонкиОтчетов.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	СписокКолонокБазис=Новый СписокЗначений;
	
	Результат=Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		
		СписокКолонокБазис.Добавить(Результат.Ссылка,Результат.Представление);
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьТаблицуСтрок()

Процедура ПолучитьмПоказателиЭталон() Экспорт
	 
	 Запрос=Новый Запрос;
	 Запрос.Текст="ВЫБРАТЬ
	 |	ПоказателиОтчетов.Ссылка,
	 |	ПоказателиОтчетов.Код,
	 |	ПоказателиОтчетов.Строка,
	 |	ПоказателиОтчетов.Колонка,
	 |	ПоказателиОтчетов.Колонка.ПорядковыйНомер КАК ПорядковыйНомерКолонки,
	 |	ПоказателиОтчетов.ГруппаРаскрытия,
	 |	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики1 КАК ВидАналитики1,
	 |	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики2 КАК ВидАналитики2,
	 |	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3 КАК ВидАналитики3,
	 |	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 КАК ВидАналитики4,
	 |	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 КАК ВидАналитики5,
	 |	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 КАК ВидАналитики6,
	 |	ПоказателиОтчетов.НеФинансовый,
	 |	ПоказателиОтчетов.ЧисловойПоказатель,
	 |	ПоказателиОтчетов.СвязанныйПоказатель,
	 |	ПоказателиОтчетов.ВидКурса,
	 |	ПоказателиОтчетов.ТипЗначения
	 |ИЗ
	 |	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	 |ГДЕ
	 |	ПоказателиОтчетов.Владелец = &ВидОтчета
	 |	И НЕ ПоказателиОтчетов.ПометкаУдаления";
				  
				  
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	мПоказателиЭталон=Запрос.Выполнить().Выгрузить();
	мПоказателиЭталон.Индексы.Добавить("Ссылка,Строка,Колонка");
	  
КонецПроцедуры // ПолучитьмПоказателиЭталон()

Процедура ИнициализироватьКонтекстСводно(ОсновныеВалюты) Экспорт
	
	ЗапросДанные=Новый Запрос;
	ЗапросДанные.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	ПодготовитьТаблицуРаскрытияСтрок();
	ОчиститьРасчетныеТаблицы();
	
	ЗапросКоординаты=Новый Запрос;
	ЗапросКоординаты.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	МассивКлючевыхРеквизитов=Новый Массив;
	МассивКлючевыхРеквизитов.Добавить("Организация");
	МассивКлючевыхРеквизитов.Добавить("ПериодОтчета");
	МассивКлючевыхРеквизитов.Добавить("Сценарий");
	
	Если РазделениеПоПроектам Тогда
		
		МассивКлючевыхРеквизитов.Добавить("Проект");
		
	КонецЕсли; 
	
	Если Не УправляемыйРежим Тогда
		
		ЗапросКоординаты.Текст="
		|ВЫБРАТЬ Строка, Колонка, Ссылка
		|ПОМЕСТИТЬ СтрокаКолонка
		|ИЗ &мПоказателиЭталон КАК мПоказателиЭталон
		|ИНДЕКСИРОВАТЬ ПО Строка, Колонка, Ссылка
		|;";
		
		Если ВыводитьВДерево Тогда
			
			ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"
			|ВЫБРАТЬ * Поместить ТабКоординатыОбщ ИЗ &ШаблонТаблицыКоординат КАК ШаблонТаблицыКоординат
			|;";
			
			ЗапросКоординаты.УстановитьПараметр("ШаблонТаблицыКоординат",ШаблонТаблицыКоординат.СкопироватьКолонки());
			
		КонецЕсли;
		
		ЗапросКоординаты.УстановитьПараметр("мПоказателиЭталон",мПоказателиЭталон);
		ЗапросКоординаты.Выполнить();
		
	КонецЕсли;
	
	ЗапросДанные.Текст="
	|/////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|ТаблицаСтроки.Ссылка КАК Ссылка,
	|ТаблицаСтроки.Код КАК Код,
	|ТаблицаСтроки.Порядок КАК Порядок
	|
	|ПОМЕСТИТЬ СтрокиОтчетов
	|ИЗ	&ТаблицаСтроки КАК ТаблицаСтроки
	|ИНДЕКСИРОВАТЬ ПО Ссылка
	|;
	|ВЫБРАТЬ
	|	мПоказатели.Ссылка КАК Показатель,
	|	мПоказатели.Код,
	|	мПоказатели.Строка,
	|	мПоказатели.Колонка,
	|	мПоказатели.ПорядковыйНомерКолонки,
	|	мПоказатели.НеФинансовый,
	|   мПоказатели.ВидКурса,
	|   мПоказатели.СвязанныйПоказатель,
	|	мПоказатели.ЧисловойПоказатель
	|ПОМЕСТИТЬ ТабПоказатели
	|ИЗ
	|	&мПоказателиЭталон КАК мПоказатели
	|ИНДЕКСИРОВАТЬ ПО Показатель
	|;";
	
	ЗапросДанные.УстановитьПараметр("мПоказателиЭталон",мПоказателиЭталон);
	ЗапросДанные.УстановитьПараметр("ТаблицаСтроки",ТаблицаСтроки);
	
	ТабОтчетыСводная.Очистить();
	Если ОсновныеВалюты.Количество()=0 Тогда // Только новые отчеты
		ЗапросДанные.Выполнить();
		ПоместитьКомментарииВСвод(Новый Массив);
		Возврат;
	КонецЕсли;
	
	МасЭкземпляры = Новый Массив;
	Для каждого СтрВалюта Из ОсновныеВалюты Цикл
		Для каждого СтрЭкземпляр Из СтрВалюта.Значение Цикл
			МасЭкземпляры.Добавить(СтрЭкземпляр);
		КонецЦикла;		
	КонецЦикла;	
	
	ПоследниеВерсии = ПолучитьПоследниеВерсии(МасЭкземпляры);
	ЗапросДанные.УстановитьПараметр("ПоследниеВерсии", ПоследниеВерсии);
	
	ЗапросВерсия=Новый Запрос;
	ЗапросВерсия.Текст="ВЫБРАТЬ
	|	ВерсииЗначенийПоказателей.Ссылка
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета В(&МассивЭкземпляров)
	|	И ВерсииЗначенийПоказателей.Валюта = &Валюта";
			
	// Поместим во временные таблицы данные из регистра "ЗначенияПоказателейОтчетов" в основной валюте отчетов
	
	МассивКомментарии=Новый Массив;
	
	Для Каждого СтрВалюта ИЗ ОсновныеВалюты Цикл
		
		НоваяСтрока=ТабОтчетыСводная.Добавить();
		НоваяСтрока.ОсновнаяВалюта=СтрВалюта.Ключ;
		НоваяСтрока.МассивЭкземпляров=СтрВалюта.Значение;
		НоваяСтрока.ОсновнаяТаблица_мПоказатели="ВАЛ_"+СокрЛП(СтрВалюта.Ключ.Код)+"_Основная_мПоказатели";
		
		НоваяСтрока.Таблицы_мПоказателиВВалюте=Новый Соответствие;
		НоваяСтрока.Таблицы_мПоказателиРаскрытияВВалюте=Новый Соответствие;
		
		ЗапросВерсия.УстановитьПараметр("Валюта", СтрВалюта.Ключ);	
		ЗапросВерсия.УстановитьПараметр("МассивЭкземпляров", СтрВалюта.Значение);
		
		Для Каждого Экземпляр ИЗ СтрВалюта.Значение Цикл
			МассивКомментарии.Добавить(Экземпляр);
		КонецЦикла;
		
		СписокИспользуемыхВерсий = Новый СписокЗначений;	
		СписокИспользуемыхВерсий.ЗагрузитьЗначения(ЗапросВерсия.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
		ПоместитьТаблицуПоказателейВСвод(СписокИспользуемыхВерсий,СтрВалюта.Значение,НоваяСтрока.ОсновнаяТаблица_мПоказатели);
		
		Если НЕ (ВыводитьВДерево ИЛИ ДанныеРаскрытияИнициализированы ИЛИ МаксАналитикПоказателя=0) Тогда
			НоваяСтрока.ОсновнаяТаблица_мПоказателиРаскрытия="ВАЛ_"+СокрЛП(СтрВалюта.Ключ.Код)+"_Основная_мПоказателиРаскрытия";
			ПоместитьТаблицуРаскрытияВСвод(СписокИспользуемыхВерсий,НоваяСтрока.ОсновнаяТаблица_мПоказателиРаскрытия);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ВыводитьВДерево Тогда
		
		ПоместитьКомментарииВСвод(МассивКомментарии);
		
	КонецЕсли;
	
	Если ТабОтчетыСводная.Количество()>1 ИЛИ (НЕ ТабОтчетыСводная[0].ОсновнаяВалюта=ВалютаОтображения) Тогда // Потребуется пересчет в валюту отображения
		
		ЗапросДанные.Выполнить();
		ЗапросДанные.Текст="";
		
		Если НЕ (ВыводитьВДерево ИЛИ МаксАналитикПоказателя=0) Тогда
			ЗапросДанныеРаскрытия.Выполнить();
			ЗапросДанныеРаскрытия.Текст="";
		КонецЕсли;
		
	КонецЕсли;
	
	// Пересчитаем при необходимости и получим сводные таблицы в валюте отображения
	
	ТекстОбъединение="";
	ТекстДанные="";
	
	ТекстОбъединениеРаскрытие="";
	ТекстДанныеРаскрытие="";
	
	Для Индекс=0 По ТабОтчетыСводная.Количество()-1 Цикл
		
		ТекСвод=ТабОтчетыСводная[Индекс];
		
		Если ТекСвод.ОсновнаяВалюта=ВалютаОтображения Тогда
			
			ТекстОбъединение=ТекстОбъединение+"
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ * "+?(Индекс=0,"Поместить мПоказателиКонтекст ","")+"ИЗ "+ТекСвод.ОсновнаяТаблица_мПоказатели+" КАК "+ТекСвод.ОсновнаяТаблица_мПоказатели;
			
			Если НЕ (ВыводитьВДерево ИЛИ МаксАналитикПоказателя=0) Тогда
				ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
				|ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ * "+?(Индекс=0,"Поместить мПоказателиРаскрытияКонтекст ","")+"ИЗ "+ТекСвод.ОсновнаяТаблица_мПоказателиРаскрытия+" КАК "+ТекСвод.ОсновнаяТаблица_мПоказателиРаскрытия;
			КонецЕсли;
			
		Иначе
			
			// Получим мПоказатели в валюте отображения
			
			ЗапросДанные.Текст="ВЫБРАТЬ * ИЗ "+ТекСвод.ОсновнаяТаблица_мПоказатели+" КАК "+ТекСвод.ОсновнаяТаблица_мПоказатели;
			мПоказателиТек=ЗапросДанные.Выполнить().Выгрузить();
			
			мПоказателиВВалютеТек=ПолучитьПоказателиВВалютеОтображения(ТекСвод.ОсновнаяВалюта,мПоказателиТек);
			
			ИмяТаблицыВВалюте="ВАЛ_"+СокрЛП(ВалютаОтображения.Код)+"_мПоказателиВВалюте";
			ТекСвод.Таблицы_мПоказателиВВалюте.Вставить(ВалютаОтображения,ИмяТаблицыВВалюте);
						
			ТекстДанные=ТекстДанные+"
			|/////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ * Поместить "+СокрЛП(ИмяТаблицыВВалюте)+" ИЗ &"+ИмяТаблицыВВалюте+" КАК "+ИмяТаблицыВВалюте+"
			|;";
			ЗапросДанные.УстановитьПараметр(ИмяТаблицыВВалюте,мПоказателиВВалютеТек);
			
			ТекстОбъединение=ТекстОбъединение+"
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ * "+?(Индекс=0,"Поместить мПоказателиКонтекст ","")+"ИЗ "+ИмяТаблицыВВалюте+" КАК "+ИмяТаблицыВВалюте;
			
			Если НЕ (ВыводитьВДерево ИЛИ МаксАналитикПоказателя=0) Тогда
				
				// Получим мПоказателиРаскрытия в валюте отображения
				
				ЗапросДанныеРаскрытия.Текст="ВЫБРАТЬ * ИЗ "+ТекСвод.ОсновнаяТаблица_мПоказателиРаскрытия+" КАК "+ТекСвод.ОсновнаяТаблица_мПоказателиРаскрытия;
				мПоказателиРаскрытияТек=ЗапросДанныеРаскрытия.Выполнить().Выгрузить();
				
				мПоказателиРаскрытияВВалютеТек=ПолучитьПоказателиВВалютеОтображения(ТекСвод.ОсновнаяВалюта,мПоказателиРаскрытияТек);
				
				ИмяТаблицыВВалюте="ВАЛ_"+СокрЛП(ВалютаОтображения.Код)+"_мПоказателиРаскрытияВВалюте";
				
				ТекСвод.Таблицы_мПоказателиРаскрытияВВалюте.Вставить(ВалютаОтображения,ИмяТаблицыВВалюте);
								
				ТекстДанныеРаскрытие=ТекстДанныеРаскрытие+"
				|/////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ * Поместить "+СокрЛП(ИмяТаблицыВВалюте)+" ИЗ &"+ИмяТаблицыВВалюте+" КАК "+ИмяТаблицыВВалюте+"
				|;";
				ЗапросДанныеРаскрытия.УстановитьПараметр(ИмяТаблицыВВалюте,мПоказателиРаскрытияВВалютеТек);
				
				ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
				|ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ * "+?(Индекс=0,"Поместить мПоказателиРаскрытияКонтекст ","")+"ИЗ "+ИмяТаблицыВВалюте+" КАК "+ИмяТаблицыВВалюте;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ТекстДанные="" Тогда
		
		ЗапросДанные.Текст=ТекстДанные+Сред(ТекстОбъединение,16)+"
		|ИНДЕКСИРОВАТЬ ПО ЭкземплярОтчета
		|;";
	
		ЗапросДанные.УстановитьПараметр("мПоказателиЭталон",мПоказателиЭталон);
		ЗапросДанные.УстановитьПараметр("ТаблицаСтроки",ТаблицаСтроки);
		
		Если НЕ (ВыводитьВДерево ИЛИ МаксАналитикПоказателя=0) Тогда
			ЗапросДанныеРаскрытия.Текст=ТекстДанныеРаскрытие+Сред(ТекстОбъединениеРаскрытие,16)+"
			|ИНДЕКСИРОВАТЬ ПО ЭкземплярОтчета
			|;";
		КонецЕсли;
		
	Иначе
		
		ЗапросДанные.Текст=ЗапросДанные.Текст+Сред(ТекстОбъединение,16)+"
		|ИНДЕКСИРОВАТЬ ПО ЭкземплярОтчета
		|;";		
		
		Если НЕ (ВыводитьВДерево ИЛИ МаксАналитикПоказателя=0) Тогда
			ЗапросДанныеРаскрытия.Текст=ЗапросДанныеРаскрытия.Текст+Сред(ТекстОбъединениеРаскрытие,16)+"
			|ИНДЕКСИРОВАТЬ ПО ЭкземплярОтчета
			|;";
		КонецЕсли;
		
	КонецЕсли;
	
	ЗапросДанные.Выполнить();
	
	Если НЕ (ВыводитьВДерево ИЛИ МаксАналитикПоказателя=0 ИЛИ ДанныеРаскрытияИнициализированы) Тогда
		ЗапросДанныеРаскрытия.Выполнить();
		ДанныеРаскрытияИнициализированы=Истина;
	КонецЕсли;
		
КонецПроцедуры // ИнициализироватьКонтекстСводно()

Процедура ПодготовитьТаблицуРаскрытияСтрок() Экспорт
	
	Если НЕ ДанныеРаскрытияИнициализированы Тогда
		
		ЗапросДанныеРаскрытия=Новый Запрос;
		ЗапросДанныеРаскрытия.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		
		ЗапросДанныеРаскрытия.Текст="
		|ВЫБРАТЬ
		|	мПоказатели.Ссылка КАК Показатель,
		|	мПоказатели.Код,
		|	мПоказатели.Строка,
		|	мПоказатели.Колонка,
		|	мПоказатели.ПорядковыйНомерКолонки,
		|	мПоказатели.НеФинансовый,
		|   мПоказатели.ВидКурса,
		|   мПоказатели.СвязанныйПоказатель,
		|	мПоказатели.ЧисловойПоказатель
		|ПОМЕСТИТЬ ТабПоказатели
		|ИЗ
		|	&мПоказателиЭталон КАК мПоказатели
		|ИНДЕКСИРОВАТЬ ПО Показатель
		|;";
		
		ЗапросДанныеРаскрытия.УстановитьПараметр("мПоказателиЭталон",мПоказателиЭталон);
		ЗапросДанныеРаскрытия.Выполнить();
		ЗапросДанныеРаскрытия.Текст="";
		
	КонецЕсли;
	
	СтрокаГруппировкиСтроки="";
	
	Для Каждого Группировка ИЗ ГруппировкиСтроки Цикл
		СтрокаГруппировкиСтроки=СтрокаГруппировкиСтроки+","+Группировка.Группировка;
	КонецЦикла;
	
	Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		СтрокаГруппировкиСтроки=СтрокаГруппировкиСтроки+",Аналитика"+ИндексАналитики;
	КонецЦикла;
		
	СтрокаГруппировкиСтроки=Сред(СтрокаГруппировкиСтроки,2);
	
	ШаблонРаскрытиеСтроки=ШаблонТаблицыКоординат.СкопироватьКолонки(СтрокаГруппировкиСтроки);
	ШаблонРаскрытиеСтроки.Колонки.Добавить("ОсновнаяВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Валюты"));
	ШаблонРаскрытиеСтроки.Колонки.Добавить("ИмяТаблицыВОсновнойВалюте");
	ШаблонРаскрытиеСтроки.Колонки.Добавить("ИменаТаблицВВалюте");
	ШаблонРаскрытиеСтроки.Колонки.Добавить("НомерСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
	
	ТаблицаРаскрытийСтрок=Новый ТаблицаЗначений;
	ТаблицаРаскрытийСтрок.Колонки.Добавить("НомерСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
	ТаблицаРаскрытийСтрок.Колонки.Добавить("ТабРаскрытиеСтроки");
	
КонецПроцедуры // ПодготовитьТаблицуРаскрытияСтрок()

Процедура ПодготовитьТаблицыГрупп() Экспорт
	
	ТабРаскрытиеГруппСтроки=Новый ТаблицаЗначений;
	
	Для Каждого Строка ИЗ ГруппировкиСтроки Цикл
		
		ТабРаскрытиеГруппСтроки.Колонки.Добавить(Строка.Группировка,ШаблонТаблицыКоординат.Колонки[Строка.Группировка].ТипЗначения);
		
	КонецЦикла;
	
	ТабРаскрытиеГруппСтроки.Колонки.Добавить("НачалоГруппы",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
	ТабРаскрытиеГруппСтроки.Колонки.Добавить("КонецГруппы",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
	ТабРаскрытиеГруппСтроки.Колонки.Добавить("УровеньГруппировки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1,0));
	ТабРаскрытиеГруппСтроки.Колонки.Добавить("Раскрыта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТабРаскрытиеГруппСтроки.Колонки.Добавить("ДобавленаВручную",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	ТабРаскрытиеГруппСтрокиДерева=ТабРаскрытиеГруппСтроки.СкопироватьКолонки();
		
	ТабРаскрытиеГруппКолонки=Новый ТаблицаЗначений;
	
	Для Каждого Строка ИЗ ГруппировкиКолонки Цикл
		
		ТабРаскрытиеГруппКолонки.Колонки.Добавить(Строка.Группировка);
		
	КонецЦикла;
	
	ТабРаскрытиеГруппКолонки.Колонки.Добавить("НачалоГруппы");
	ТабРаскрытиеГруппКолонки.Колонки.Добавить("КонецГруппы");
	ТабРаскрытиеГруппКолонки.Колонки.Добавить("УровеньГруппировки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1,0));
	ТабРаскрытиеГруппКолонки.Колонки.Добавить("Раскрыта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
КонецПроцедуры // ПодготовитьТаблицыГрупп()

Процедура ВывестиДанныеОтчетов(ТолькоОбновлениеЗначений=Ложь) Экспорт
		
	ЕстьАнализОтклонений=ЕстьАнализОтклонений();
	ЕстьВычисляемыеКолонки=ЕстьВычисляемыеКолонки();
		
	ЗаполнитьСтруктуруИерархическихГруппировок();
		
	ВыведенныеОрганизации.Очистить();
	ВыведенныеПериоды.Очистить();
	ВыведенныеСценарии.Очистить();
	ВыведенныеАналитики.Очистить();
				
	ТекстСортировки="";
	
	Для Каждого Строка ИЗ ГруппировкиСтроки Цикл
		
		Если Строка.Группировка="Строка" Тогда
			
			Продолжить;
		
		ИначеЕсли Строка.Группировка="ПериодОтчета" Тогда
			
			ТекстСортировки=ТекстСортировки+",ДатаНачалаПериода";
			
		Иначе	
			
			ТекстСортировки=ТекстСортировки+","+Строка.Группировка+"Наименование";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Колонка ИЗ ГруппировкиКолонки Цикл
		
		Если Колонка.Группировка="Колонка" Тогда
			
			Продолжить;
		
		ИначеЕсли Колонка.Группировка="ПериодОтчета" Тогда
			
			ТекстСортировки=ТекстСортировки+",ДатаНачалаПериода";
			
		Иначе	
			
			ТекстСортировки=ТекстСортировки+","+Колонка.Группировка+"Наименование";
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабОтчеты.Сортировать("ЕстьЭкземплярОтчета Убыв"+ТекстСортировки);
	МассивОтчетов=Новый Массив;
	
	Для Каждого СтрОтчет ИЗ ТабОтчеты Цикл
		
		Если НЕ СтрОтчет.ЕстьЭкземплярОтчета Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ВключатьВОбработку(СтрОтчет) Тогда
			Продолжить;
		КонецЕсли;
		
		ИзмеренияАналитики="";
		
		Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
			
			Если СтрАналитика.ЕстьРазворот Тогда
								
				НоваяСтрока=ВыведенныеАналитики.Добавить();
				НоваяСтрока.Аналитика=СтрАналитика.КодАналитики;
				НоваяСтрока.ВидАналитики=СтрАналитика.ВидАналитики;
				НоваяСтрока.ЗначениеАналитики=СтрОтчет[СтрАналитика.КодАналитики];
				
			КонецЕсли;
			
		КонецЦикла;
				
		// Укажем в таблицах навигатора ключевые измерения
		ДобавитьЭлементВТаблицуНавигатора(ВыведенныеОрганизации,СтрОтчет,"Организация");
		ДобавитьЭлементВТаблицуНавигатора(ВыведенныеПериоды,СтрОтчет,"ПериодОтчета");
		ДобавитьЭлементВТаблицуНавигатора(ВыведенныеСценарии,СтрОтчет,"Сценарий");
		
		МассивОтчетов.Добавить(СтрОтчет);
		
	КонецЦикла;
			
	ОтобразитьДанныеОтчетов(МассивОтчетов,ТолькоОбновлениеЗначений)
		
КонецПроцедуры // СоздатьмПоказатели()

Функция ВключатьВОбработку(СтрОтчет) Экспорт
	
	Если (СписокОрганизацииОтбор.Количество()>0 И СписокОрганизацииОтбор.НайтиПоЗначению(СтрОтчет.Организация)=Неопределено)
		ИЛИ (СписокПериодыОтбор.Количество()>0 И СписокПериодыОтбор.НайтиПоЗначению(СтрОтчет.ПериодОтчета)=Неопределено)
		ИЛИ (СписокСценарииОтбор.Количество()>0 И СписокСценарииОтбор.НайтиПоЗначению(СтрОтчет.Сценарий)=Неопределено) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	АналитикаСооответствуетОтбору=Истина;
	
	Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
		
		Если СтрАналитика.ЕстьРазворот Тогда
			
			Если ТабАналитикиОтбор.Количество()>0 Тогда 
				
				АналитикаСооответствуетОтбору=Ложь;
				
				// Отберем из списка отбора аналитики по их виду
				
				МассивАналитик=ТабАналитикиОтбор.НайтиСтроки(Новый Структура("Аналитика",СтрАналитика.КодАналитики));
				
				// Проверим вхождение аналитики отчета в массив отбора
				
				Для Каждого АналитикаОтбор ИЗ МассивАналитик Цикл
					Если СтрОтчет[СтрАналитика.КодАналитики]=АналитикаОтбор.Значение Тогда
						АналитикаСооответствуетОтбору=Истина;	
					КонецЕсли;
					
				КонецЦикла
				
			Иначе
				
				АналитикаСооответствуетОтбору=Истина;
				
			КонецЕсли;
			
		Иначе
			
			АналитикаСооответствуетОтбору=Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ АналитикаСооответствуетОтбору Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;	
	
КонецФункции // ВключатьВОбработку()

#КонецОбласти

#Область ПрограммныйИнтерфейс_Редактирование 

Процедура ПолучитьИзмененныеПоказатели(ТекЭкземплярОтчета,Знак) Экспорт
	
	ОтчетОбъект=ТекЭкземплярОтчета.ОтчетОбъект;
	НомерОперации=ОтчетОбъект.НомерТекущейОперации;
	
	Запрос=Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	мПоказатели.Ссылка,
	|	мПоказатели.Код,
	|	мПоказатели.Строка,
	|	мПоказатели.Колонка,
	|	мПоказатели.ПорядковыйНомерКолонки,
	|	мПоказатели.НеФинансовый,
	|	мПоказатели.СвязанныйПоказатель,
	|	мПоказатели.ВидКурса,
	|	мПоказатели.ПериодРасчета,
	|	мПоказатели.ЧисловойПоказатель
	|ПОМЕСТИТЬ мПоказатели
	|ИЗ
	|	&мПоказатели КАК мПоказатели
	|ИНДЕКСИРОВАТЬ ПО Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛогИзмененийПоказателей.Ссылка,
	|	ЛогИзмененийПоказателей.Значение КАК Значение
	|ПОМЕСТИТЬ ИзмененныеПоказатели
	|ИЗ
	|	&ЛогИзмененийПоказателей КАК ЛогИзмененийПоказателей
	|ГДЕ
	|	ЛогИзмененийПоказателей.НомерОперации = &НомерОперации
	|ИНДЕКСИРОВАТЬ ПО Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	мПоказатели.Ссылка,
	|	мПоказатели.Код,
	|	мПоказатели.Строка,
	|	мПоказатели.Колонка,
	|	мПоказатели.ПорядковыйНомерКолонки,
	|	мПоказатели.НеФинансовый,
	|	мПоказатели.СвязанныйПоказатель,
	|	мПоказатели.ВидКурса,
	|	мПоказатели.ПериодРасчета,
	|	мПоказатели.ЧисловойПоказатель,
	|	ВЫБОР 
	|		КОГДА мПоказатели.ЧисловойПоказатель 
	|			ТОГДА ВЫРАЗИТЬ(ИзмененныеПоказатели.Значение КАК Число(18,5))"+?(Знак=-1,"*-1","")+"
	|		ИНАЧЕ ИзмененныеПоказатели.Значение 
	|	КОНЕЦ Значение
	|		
	|ИЗ
	|	мПоказатели КАК мПоказатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИзмененныеПоказатели КАК ИзмененныеПоказатели
	|		ПО мПоказатели.Ссылка = ИзмененныеПоказатели.Ссылка";
	
	Запрос.УстановитьПараметр("мПоказатели",ОтчетОбъект.мПоказатели);
	Запрос.УстановитьПараметр("НомерОперации",НомерОперации);
	Запрос.УстановитьПараметр("ЛогИзмененийПоказателей",ОтчетОбъект.ЛогИзмененийПоказателей);
	
	ТекИзмененныеПоказатели=Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст="ВЫБРАТЬ	
	|ЛогИзмененийРаскрытийПоказателей.Показатель,";
	
	Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		
		Запрос.Текст=Запрос.Текст+"		
		|ЛогИзмененийРаскрытийПоказателей.Аналитика"+ИндексАналитики+" КАК Аналитика"+ИндексАналитики+",";
		
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|	ВЫБОР 
	|		КОГДА ЛогИзмененийРаскрытийПоказателей.ЧисловойПоказатель 
	|			ТОГДА ВЫРАЗИТЬ(ЛогИзмененийРаскрытийПоказателей.Значение КАК Число(18,5))" + ?(Знак=-1, "*-1", "") + "
	|		ИНАЧЕ ЛогИзмененийРаскрытийПоказателей.Значение
	|	КОНЕЦ КАК Значение	
	|ПОМЕСТИТЬ ИзмененныеПоказателиРаскрытия
	|ИЗ 
	|	&ЛогИзмененийРаскрытийПоказателей КАК ЛогИзмененийРаскрытийПоказателей
	|ГДЕ 
	|	ЛогИзмененийРаскрытийПоказателей.НомерОперации = &НомерОперации
	|;
	|ВЫБРАТЬ * ИЗ ИзмененныеПоказателиРаскрытия";
	
	Запрос.УстановитьПараметр("НомерОперации",НомерОперации);
	Запрос.УстановитьПараметр("ЛогИзмененийРаскрытийПоказателей",ОтчетОбъект.ЛогИзмененийРаскрытийПоказателей);
	
	ТекИзмененныеПоказателиРаскрытия=Запрос.Выполнить().Выгрузить();
	
	Если ТекЭкземплярОтчета.ВыводитьВВалютеОтображения Тогда
		
		ТекЭкземплярОтчета.мИзмененныеПоказатели=ОтчетОбъект.ПолучитьЗначенияПоказателейВВалюте(ТекИзмененныеПоказатели, ВалютаОтображения);
		ТекЭкземплярОтчета.мИзмененныеПоказателиРаскрытия=ОтчетОбъект.ПолучитьЗначенияПоказателейРаскрытияВВалюте(ОтчетОбъект.мПоказатели,ТекИзмененныеПоказателиРаскрытия,ВалютаОтображения);
		
	Иначе
		
		ТекЭкземплярОтчета.мИзмененныеПоказатели=ТекИзмененныеПоказатели;
		ТекЭкземплярОтчета.мИзмененныеПоказателиРаскрытия=ТекИзмененныеПоказателиРаскрытия;
		
	КонецЕсли;
		
Конецпроцедуры // ПолучитьИзмененныеПоказатели()

#КонецОбласти

#Область ПрограммныйИнтерфейс_Отображение

Процедура ОтобразитьДанныеОтчетов(МассивОтчетов,ТолькоОбновлениеЗначений=Ложь) Экспорт
	
	ТекстВТ="";
	ТекстОбъединение="";
	ТекстОбъединениеРаскрытие="";
	
	МассивГруппировокСтрокИтог=Новый Массив;
	МассивГруппировокКолонокИтог=Новый Массив;	 
				
	Если (НЕ (ВыводитьВДерево ИЛИ МаксАналитикПоказателя=0)) ИЛИ ТолькоОбновлениеЗначений Тогда  
		
		СформироватьТаблицуРаскрытия(МассивОтчетов,ТолькоОбновлениеЗначений);
		
	Иначе
		
		СформироватьТаблицуРаскрытияДерево(МассивОтчетов);
		
	КонецЕсли;
	
	МассивЭкземпляровСвод=Новый Массив;
	
	Для Каждого СтрОтчет ИЗ МассивОтчетов Цикл
		
		Если НЕ СтрОтчет.ОтчетИнициализирован Тогда // Данные будем брать из таблицы сводной инициализации
			
			МассивЭкземпляровСвод.Добавить(СтрОтчет.ЭкземплярОтчета);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПервыйЭкземпляр=Истина;
	ТекстОтбор="";
	
	ТабКомментарии=ШаблонТаблицыКоординат.СкопироватьКолонки();
	ТабКомментарии.Колонки.Удалить("Строка");
	ТабКомментарии.Колонки.Удалить("Колонка");
	
	ТабКомментарии.Колонки.Добавить("Комментарий",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(500));
	
		
	Если СписокПоказателиНеВБланке.Количество()>0 Тогда
		ТекстОтбор=ТекстОтбор+"			
		|И мПоказатели.Ссылка НЕ В(&СписокПоказателиНеВБланке)";
		
		ЗапросДанные.УстановитьПараметр("СписокПоказателиНеВБланке",СписокПоказателиНеВБланке);
		
	КонецЕсли;
	
	Если СписокИзмененныхПоказателей.Количество()>0 Тогда
		ТекстОтбор=ТекстОтбор+"			
		|И мПоказатели.Ссылка В(&СписокИзмененныхПоказателей)";
		
		ЗапросДанные.УстановитьПараметр("СписокИзмененныхПоказателей",СписокИзмененныхПоказателей);
		
	КонецЕсли;
		
	//////////////////////////////////////////////////////////////////////////////////////////////////
	//// ФОРМИРУЕМ ЗАПРОС К ТАБЛИЧНЫМ ЧАСТЯМ ОТЧЕТОВ ИЗ ПЕРЕДАННОГО МАССИВА
	
	Для Индекс=0 По МассивОтчетов.Количество()-1 Цикл
		
		СтрОтчет=МассивОтчетов[Индекс];
		СтрокаИндекс=Формат(Индекс,"ЧГ=");
				
		ИзмеренияАналитики="";
				
		Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
			
			Если СтрАналитика.ЕстьРазворот Тогда
				
				ИзмеренияАналитики=ИзмеренияАналитики+"
				|&"+СтрАналитика.КодАналитики+"_"+СтрокаИндекс+" КАК "+СтрАналитика.КодАналитики+",";
				
				ЗапросДанные.УстановитьПараметр(СтрАналитика.КодАналитики+"_"+СтрокаИндекс,СтрОтчет[СтрАналитика.КодАналитики]);
				
			КонецЕсли;
			
		КонецЦикла;	
		
		Если (СтрОтчет.ЕстьЭкземплярОтчета И СтрОтчет.ОтчетИнициализирован) Тогда
			
			ТекстВТ=ТекстВТ+"
			|/////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ";
			
			Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
				
				ТекстВТ=ТекстВТ+"
				|&"+Реквизит+"_"+СтрокаИндекс+" КАК "+Реквизит+",";
	
			КонецЦикла; 
			
			ТекстВТ=ТекстВТ+ИзмеренияАналитики+"	
			|&ЭкземплярОтчета_"+СтрокаИндекс+" КАК ЭкземплярОтчета,
			|мПоказатели.Ссылка КАК Показатель,
			|мПоказатели.Код,
			|мПоказатели.Строка,
			|мПоказатели.Колонка,
			|мПоказатели.ПорядковыйНомерКолонки,
			|мПоказатели.Значение КАК ЗначениеПоказателя,
			|ВЫРАЗИТЬ(мПоказатели.Значение КАК Число(18,5)) КАК ЗначениеЧисло  
			|Поместить мПоказателиОбщ_"+СтрокаИндекс+"
			|ИЗ &мПоказатели_"+СтрокаИндекс+" КАК мПоказатели";
			
			МассивТаблицПоказателей.Добавить("мПоказателиОбщ_"+СтрокаИндекс);
			
			Если Не ПустаяСтрока(ТекстОтбор) Тогда
				
				ТекстВТ=ТекстВТ+"			
				|ГДЕ "+Сред(ТекстОтбор,6)+"
				|;";
				
			Иначе	
				
				ТекстВТ=ТекстВТ+"			
				|;";
				
			КонецЕсли;
			
			Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
				
				ЗапросДанные.УстановитьПараметр(Реквизит+"_"+СтрокаИндекс,СтрОтчет[Реквизит]);
	
			КонецЦикла;
						
			ЗапросДанные.УстановитьПараметр("ЭкземплярОтчета_"+СтрокаИндекс,СтрОтчет.ЭкземплярОтчета);
			
			Если ТолькоОбновлениеЗначений Тогда
				
				ЗапросДанные.УстановитьПараметр("мПоказатели_"+СтрокаИндекс,СтрОтчет.мИзмененныеПоказатели);
				
			Иначе
				
				ЗапросДанные.УстановитьПараметр("мПоказатели_"+СтрокаИндекс,?(СтрОтчет.ВыводитьВВалютеОтображения,СтрОтчет.мПоказателиВВалюте,СтрОтчет.ОтчетОбъект.мПоказатели));
				
			КонецЕсли;
			
			ТекстОбъединение=ТекстОбъединение+"
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ * "+?(ПервыйЭкземпляр,"Поместить мПоказатели ","")+"ИЗ мПоказателиОбщ_"+СтрокаИндекс+" КАК мПоказателиОбщ_"+СтрокаИндекс;
			
			Если ПервыйЭкземпляр Тогда
				МассивТаблицПоказателей.Добавить("мПоказатели");
			КонецЕсли;
			ПервыйЭкземпляр=Ложь;
			
		ИначеЕсли ГруппировкиКолонки.Количество()>2 И (НЕ СтрОтчет.ОтчетИнициализирован) Тогда // Для корректной отрисовки необходимо добавить таблицы с нулевыми значениями
			
			ТекстВТ=ТекстВТ+"
			|/////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ";
			
			Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
				
				ТекстВТ=ТекстВТ+"
				|&"+Реквизит+"_"+СтрокаИндекс+" КАК "+Реквизит+",";
				
			КонецЦикла;
	
			ТекстВТ=ТекстВТ+ИзмеренияАналитики+"	
			|Неопределено КАК ЭкземплярОтчета,
			|ТабПоказатели.Показатель КАК Показатель,
			|ТабПоказатели.Код,
			|ТабПоказатели.Строка,
			|ТабПоказатели.Колонка,
			|ТабПоказатели.ПорядковыйНомерКолонки,
			|0 КАК ЗначениеПоказателя,
			|0 КАК ЗначениеЧисло  
			|Поместить мПоказателиОбщ_"+СтрокаИндекс+"
			|ИЗ ТабПоказатели КАК ТабПоказатели
			|;";
			
			МассивТаблицПоказателей.Добавить("мПоказателиОбщ_"+СтрокаИндекс);
			
			Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
				
				ЗапросДанные.УстановитьПараметр(Реквизит+"_"+СтрокаИндекс,СтрОтчет[Реквизит]);
				
			КонецЦикла;
			
			ТекстОбъединение=ТекстОбъединение+"
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ * "+?(ПервыйЭкземпляр,"Поместить мПоказатели ","")+"ИЗ мПоказателиОбщ_"+СтрокаИндекс+" КАК мПоказателиОбщ_"+СтрокаИндекс;
			
			Если ПервыйЭкземпляр Тогда
				МассивТаблицПоказателей.Добавить("мПоказатели");
			КонецЕсли;
			
			ПервыйЭкземпляр=Ложь;
			
		КонецЕсли;
				
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
		// Формируем таблицу комментариев
		Если (НЕ УправляемыйРежим) И СтрОтчет.ЕстьЭкземплярОтчета И СтрОтчет.ОтчетИнициализирован И СтрОтчет.ОтчетОбъект.СоответствиеХраненияКомментариев.Количество()>0 Тогда
			
			ТекСоответствиеКомментариев=СтрОтчет.ОтчетОбъект.СоответствиеХраненияКомментариев;
			
			Для Каждого Комментарий ИЗ ТекСоответствиеКомментариев Цикл 
				
				НоваяСтрока=ТабКомментарии.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрОтчет);
				НоваяСтрока.Показатель=Комментарий.Ключ;
				НоваяСтрока.Комментарий=ПолучитьТекстКомментария(Комментарий.Значение);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
		
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Добавляем данные из сводной таблицы значений показателей, которые не изменялись после считывания из базы
	
	Если НЕ (ТолькоОбновлениеЗначений ИЛИ ТабОтчетыСводная.Количество()=0 ИЛИ ТабОтчеты.Найти(Ложь,"ОтчетИнициализирован")=Неопределено) Тогда
		
		ЗапросДанные.УстановитьПараметр("МассивЭкземпляровСвод",МассивЭкземпляровСвод);
		
		ИзмеренияАналитики="";
						
		Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
			
			Если СтрАналитика.ЕстьРазворот Тогда
				
				ИзмеренияАналитики=ИзмеренияАналитики+"
				|мПоказателиКонтекст."+СтрАналитика.КодАналитики+" КАК "+СтрАналитика.КодАналитики+",";
				
			КонецЕсли;
			
		КонецЦикла;
			
		ТекстОбъединение=ТекстОбъединение+"
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ";
		
		Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
			
			ТекстОбъединение=ТекстОбъединение+"
			|мПоказателиКонтекст."+Реквизит+" КАК "+Реквизит+",";
			
		КонецЦикла; 
		
		ТекстОбъединение=ТекстОбъединение+ИзмеренияАналитики+"	
		|мПоказателиКонтекст.ЭкземплярОтчета КАК ЭкземплярОтчета,
		|мПоказателиКонтекст.Ссылка КАК Показатель,
		|мПоказателиКонтекст.Код,
		|мПоказателиКонтекст.Строка,
		|мПоказателиКонтекст.Колонка,
		|мПоказателиКонтекст.ПорядковыйНомерКолонки,
		|мПоказателиКонтекст.ЗначениеЧисло КАК ЗначениеПоказателя,
		|мПоказателиКонтекст.ЗначениеЧисло КАК ЗначениеЧисло"+?(ПервыйЭкземпляр,"
		|Поместить мПоказатели ","")+"  
		|ИЗ мПоказателиКонтекст КАК мПоказателиКонтекст
		|ГДЕ мПоказателиКонтекст.ЭкземплярОтчета В (&МассивЭкземпляровСвод)";
		
		Если Не ПустаяСтрока(ТекстОтбор) Тогда
			
			ТекстОбъединение=ТекстОбъединение+"			
			|"+СтрЗаменить(ТекстОтбор,"мПоказатели","мПоказателиКонтекст");
			
		КонецЕсли;
		
		Если ПервыйЭкземпляр Тогда
			МассивТаблицПоказателей.Добавить("мПоказатели");
		КонецЕсли;
		
		ПервыйЭкземпляр=Ложь;
		
	КонецЕсли;	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ТекстВыборкаРаскрытий="";
	ТекстСоединение="";
	ТекстИндексы="";
	КолонокИндекса=0;
	
	Для Каждого Строка ИЗ ГруппировкиСтроки Цикл
		
		Если Строка.Группировка="Строка" Тогда
			Продолжить;
		КонецЕсли;
				
		ТекстВыборкаРаскрытий=ТекстВыборкаРаскрытий+",
		|"+Строка.Группировка;
		
		ТекстСоединение=ТекстСоединение+"
		|И мПоказатели."+Строка.Группировка+"=СводРаскрытия."+Строка.Группировка;
		
		ЧислоКолонокИндекса=?(СтрНайти(Строка.Группировка,"Аналитика")>0,3,1);
		
		Если (КолонокИндекса+ЧислоКолонокИндекса)<=16 Тогда
			
			ТекстИндексы=ТекстИндексы+","+Строка.Группировка;
			КолонокИндекса=КолонокИндекса+ЧислоКолонокИндекса;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекстОбъединение <> "" Тогда
		
		ТекстВТ=ТекстВТ+"
		|"+Сред(ТекстОбъединение,16)+"
		|ИНДЕКСИРОВАТЬ ПО Показатель"+ТекстИндексы+"
		|;";
		
	КонецЕсли;
	
	ТекстВТ=ТекстВТ+"
	
	|//////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ";
	
	Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
		
		ТекстВТ=ТекстВТ+"
		|ТабПоказателиРаскрытия."+Реквизит+" КАК "+Реквизит+",";

	
	КонецЦикла; 
			
	Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
		
		Если СтрАналитика.ЕстьРазворот Тогда
			
			ТекстВТ=ТекстВТ+"
			|ТабПоказателиРаскрытия."+СтрАналитика.КодАналитики+" КАК "+СтрАналитика.КодАналитики+",";
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗапросДанные.УстановитьПараметр("ТабПоказателиРаскрытия",мПоказателиРаскрытия);
	ЗапросДанные.УстановитьПараметр("ПустаяСтрока","");
	
	ТекстВТ=ТекстВТ+"	
	|		ТабПоказателиРаскрытия.ИндексАналитики КАК ИндексАналитики,
	|		ТабПоказателиРаскрытия.Показатель КАК Показатель,
	|		ТабПоказателиРаскрытия.ЗначениеПоказателя КАК ЗначениеПоказателя,
	|       ТабПоказателиРаскрытия.ЗначениеЧисло КАК ЗначениеЧисло
	|	Поместить мПоказателиРаскрытия 
	|	ИЗ
	|		&ТабПоказателиРаскрытия КАК ТабПоказателиРаскрытия
	|ИНДЕКСИРОВАТЬ ПО Показатель"+ТекстИндексы+"
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ";
	
	Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
		
		ТекстВТ=ТекстВТ+"
		|мПоказатели."+Реквизит+" КАК "+Реквизит+",";
	
	КонецЦикла; 
		
	МассивТаблицПоказателей.Добавить("мПоказателиРаскрытия");
		
	Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
		
		Если СтрАналитика.ЕстьРазворот Тогда
			
			ТекстВТ=ТекстВТ+"
			|мПоказатели."+СтрАналитика.КодАналитики+",";
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстВТ=ТекстВТ+"	
	|	мПоказатели.Строка,
	|	мПоказатели.Колонка,
	|	мПоказатели.ПорядковыйНомерКолонки,
	|	мПоказатели.ЗначениеПоказателя,
	|	мПоказатели.ЗначениеЧисло КАК ЗначениеПоказателяЧисло,
	|	0 КАК ЗначениеРаскрытияЧисло,
	|   &ПустаяСтрока КАК ИндексАналитики
	|ПОМЕСТИТЬ ТабПоказателиСвод
	|ИЗ
	|	мПоказатели КАК мПоказатели
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ";
	
	Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
		
		ТекстВТ=ТекстВТ+"		
		|	"+?(ГруппировкиКолонки.Найти(Реквизит,"Группировка")=Неопределено,"СводРаскрытия."+Реквизит,"мПоказатели."+Реквизит)+",";
		
	КонецЦикла; 
		
	МассивТаблицПоказателей.Добавить("ТабПоказателиСвод");
	
	Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
		
		Если СтрАналитика.ЕстьРазворот Тогда
			
			ТекстВТ=ТекстВТ+"
			|"+?(ГруппировкиКолонки.Найти(СтрАналитика.КодАналитики,"Группировка")=Неопределено,"СводРаскрытия."+СтрАналитика.КодАналитики,"мПоказатели."+СтрАналитика.КодАналитики)+",";
			
			ТекстВыборкаРаскрытий=ТекстВыборкаРаскрытий+","+СтрАналитика.КодАналитики;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстВТ=ТекстВТ+"
	|	мПоказатели.Строка,
	|	мПоказатели.Колонка,
	|	мПоказатели.ПорядковыйНомерКолонки,
	|	мПоказатели.ЗначениеПоказателя,
	|	0 КАК ЗначениеПоказателяЧисло,
	|	0 КАК ЗначениеРаскрытияЧисло,	
	|   СводРаскрытия.ИндексАналитики КАК ИндексАналитики
	|ИЗ
	|	мПоказатели КАК мПоказатели
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ" + ?(ТекстВыборкаРаскрытий = "", "", Сред(ТекстВыборкаРаскрытий,2) + ",") + "
	|	Показатель КАК Показатель,
	|	ИндексАналитики КАК ИндексАналитики ИЗ мПоказателиРаскрытия КАК мПоказателиРаскрытия) КАК СводРаскрытия
	| 	ПО мПоказатели.Показатель=СводРаскрытия.Показатель"+ТекстСоединение+"
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ";
	
	Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
		
		ТекстВТ=ТекстВТ+"
		|	ПоказателиРаскрытия."+Реквизит+",";
		
	КонецЦикла; 
	
	Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
		
		Если СтрАналитика.ЕстьРазворот Тогда
			
			ТекстВТ=ТекстВТ+"
			|ПоказателиРаскрытия."+СтрАналитика.КодАналитики+",";
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстВТ=ТекстВТ+"	
	|	ПоказателиРаскрытия.Строка,
	|	ПоказателиРаскрытия.Колонка,
	|	ПоказателиРаскрытия.ПорядковыйНомерКолонки,
	|	ПоказателиРаскрытия.ЗначениеПоказателя,
	|	0,
	|	ПоказателиРаскрытия.ЗначениеЧисло,
	|	ИндексАналитики КАК ИндексАналитики
	|ИЗ
	|	(ВЫБРАТЬ";
	
	Для каждого Реквизит Из МассивКлючевыхРеквизитов  Цикл
		
		ТекстВТ=ТекстВТ+"
		|мПоказателиРаскрытия."+Реквизит+" КАК "+Реквизит+",";
		
	КонецЦикла; 
		
	Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
		
		Если СтрАналитика.ЕстьРазворот Тогда
			
			ТекстВТ=ТекстВТ+"
			|мПоказателиРаскрытия."+СтрАналитика.КодАналитики+" КАК "+СтрАналитика.КодАналитики+",";
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстИндекс="";
	
	Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
		
		ТекстИндекс=ТекстИндекс+Реквизит+",";
		
	КонецЦикла; 
	
	ТекстВТ=ТекстВТ+"	
	|		мПоказателиРаскрытия.ИндексАналитики КАК ИндексАналитики,
	|		ТабПоказатели.Строка КАК Строка,
	|		ТабПоказатели.Колонка КАК Колонка,
	|		ТабПоказатели.ПорядковыйНомерКолонки КАК ПорядковыйНомерКолонки,
	|		мПоказателиРаскрытия.Показатель КАК Показатель,
	|		мПоказателиРаскрытия.ЗначениеПоказателя КАК ЗначениеПоказателя,
	|       мПоказателиРаскрытия.ЗначениеЧисло КАК ЗначениеЧисло
	|	ИЗ
	|		мПоказателиРаскрытия КАК мПоказателиРаскрытия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабПоказатели КАК ТабПоказатели
	|			ПО мПоказателиРаскрытия.Показатель = ТабПоказатели.Показатель) КАК ПоказателиРаскрытия
	|ИНДЕКСИРОВАТЬ ПО
	|Строка,"+ТекстИндекс+"Колонка";
	
	КолонокИндекса=МассивКлючевыхРеквизитов.Количество()+2;
			
	Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
		
		Если СтрАналитика.ЕстьРазворот И (КолонокИндекса+3)<=16 Тогда
			
			ТекстВТ=ТекстВТ+","+СтрАналитика.КодАналитики;
			КолонокИндекса=КолонокИндекса+3;
			
		КонецЕсли;
		
	КонецЦикла;

	ТекстВТ=ТекстВТ+"		
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиОтчетов.Ссылка КАК Строка,
	|	СтрокиОтчетов.Код КАК КодСтроки,
	|	СтрокиОтчетов.Порядок КАК ПорядокСтроки,";
	
	Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
		
		Если СтруктураГруппировокИерархия.Свойство(Реквизит) Тогда
			
			Для Каждого СтрИерархия ИЗ СтруктураГруппировокИерархия[Реквизит]Цикл
				
				ТекстВТ=ТекстВТ+"
				|"+СтрИерархия.ИмяПоля+" КАК "+СтрИерархия.ПсевдонимПоля+",";
				
			КонецЦикла;
			
		КонецЕсли;
		
		ТекстВТ=ТекстВТ+"	
		|	"+СправочникиГруппировок[Реквизит]+".Ссылка КАК "+Реквизит+",
		|	"+СправочникиГруппировок[Реквизит]+".Наименование КАК "+Реквизит+"Наименование,";		
		
	КонецЦикла; 
		
	Если ОтборПоПериметру Тогда
		ТекстВТ=ТекстВТ+"
		|ВЫБОР КОГДА Организации.ТипОрганизации=&Консолидирующая Тогда 1 Иначе 0 Конец КАК ТипОрганизации,";
		
		ЗапросДанные.УстановитьПараметр("Консолидирующая",Перечисления.ТипыОрганизационныхЕдиниц.Консолидирующая);
		
	КонецЕсли;
		
	Если ЕстьАнализОтклонений Тогда
		
		ТекстВТ=ТекстВТ+"
		|ВЫБОР КОГДА "+СправочникиГруппировок[ГруппировкаБазис]+".Ссылка=&БазовоеЗначение Тогда 1 Иначе 0 Конец КАК БазовоеЗначение,";
		
		ЗапросДанные.УстановитьПараметр("БазовоеЗначение",БазовоеЗначениеИзмерения);
			
	КонецЕсли;
		
	Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
		
		Если СтрАналитика.ЕстьРазворот Тогда
			
			Если СтруктураГруппировокИерархия.Свойство(СтрАналитика.КодАналитики) Тогда
				
				Для Каждого СтрИерархия ИЗ СтруктураГруппировокИерархия[СтрАналитика.КодАналитики] Цикл
					
					ТекстВТ=ТекстВТ+"
					|"+СтрИерархия.ИмяПоля+" КАК "+СтрИерархия.ПсевдонимПоля+",";
					
				КонецЦикла;
				
			КонецЕсли;
			
			ТекстВТ=ТекстВТ+"
			|Спр"+СтрАналитика.КодАналитики+".Ссылка КАК "+СтрАналитика.КодАналитики+",
			|Спр"+СтрАналитика.КодАналитики+".Наименование КАК "+СтрАналитика.КодАналитики+"Наименование,";
			
		КонецЕсли;
		
	КонецЦикла;
	
		
	ТекстВТ=ТекстВТ+"
	|	Периоды.ДатаНачала КАК ДатаНачалаПериода,
	|	КолонкиОтчетов.Ссылка КАК Колонка,
	|	КолонкиОтчетов.ПорядковыйНомер КАК ПорядковыйНомерКолонки,
	|	ТабПоказателиСвод.ЗначениеПоказателя КАК ЗначениеПоказателя,
	|	ВЫРАЗИТЬ(ТабПоказателиСвод.ЗначениеПоказателяЧисло КАК ЧИСЛО(23,5)) КАК ЗначениеПоказателяЧисло,
	|	ВЫРАЗИТЬ(ТабПоказателиСвод.ЗначениеРаскрытияЧисло КАК ЧИСЛО(23,5)) КАК ЗначениеРаскрытияЧисло,
	|   ТабПоказателиСвод.ИндексАналитики
	|ИЗ ТабПоказателиСвод КАК ТабПоказателиСвод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтрокиОтчетов КАК СтрокиОтчетов
	|		ПО ТабПоказателиСвод.Строка=СтрокиОтчетов.Ссылка";
	
	Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
		
		ТекстВТ=ТекстВТ+"
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник."+СправочникиГруппировок[Реквизит]+" КАК "+СправочникиГруппировок[Реквизит]+"
		|		ПО ТабПоказателиСвод."+Реквизит+"="+СправочникиГруппировок[Реквизит]+".Ссылка";
		
	КонецЦикла; 
	
	Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
		
		Если СтрАналитика.ЕстьРазворот Тогда
			
			ТекстВТ=ТекстВТ+"
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СтрАналитика.ТаблицаАналитики+" КАК Спр"+СтрАналитика.КодАналитики+"
			|ПО ТабПоказателиСвод."+СтрАналитика.КодАналитики+"=Спр"+СтрАналитика.КодАналитики+".Ссылка";
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстВТ=ТекстВТ+"
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Ссылка,ПорядковыйНомер 
	|						ИЗ Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|						ГДЕ КолонкиОтчетов.Владелец=&ВидОтчета
	|						И (НЕ КолонкиОтчетов.ПометкаУдаления)) КАК КолонкиОтчетов
	|		ПО ТабПоказателиСвод.Колонка=КолонкиОтчетов.Ссылка
	|УПОРЯДОЧИТЬ ПО";
	
	ТекстУпорядочивания="";
	
	Для Каждого Колонка ИЗ ГруппировкиКолонки Цикл
		
		Если СтруктураГруппировокИерархия.Свойство(Колонка.Группировка) Тогда
			
			Для Каждого СтрИерархия ИЗ СтруктураГруппировокИерархия[Колонка.Группировка] Цикл
				
				Если Колонка.Группировка="ПериодОтчета" И СтрНайти(СтрИерархия.ПсевдонимПоля,"ДатаНачала")>0 Тогда
					
					ТекстУпорядочивания=ТекстУпорядочивания+",
					|"+СтрИерархия.ПсевдонимПоля;
					
				ИначеЕсли СтрНайти(СтрИерархия.ПсевдонимПоля,"Наименование")>0 Тогда
					
					ТекстУпорядочивания=ТекстУпорядочивания+",
					|"+СтрИерархия.ПсевдонимПоля;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
						
		Если ЕстьАнализОтклонений() И Колонка.Группировка=ГруппировкаБазис Тогда
			ТекстУпорядочивания=ТекстУпорядочивания+",
			|БазовоеЗначение УБЫВ";
		КонецЕсли;
			
		Если Колонка.Группировка="Колонка" Тогда
			ТекстУпорядочивания=ТекстУпорядочивания+",
			|ПорядковыйНомерКолонки";
		ИначеЕсли Колонка.Группировка="ПериодОтчета" Тогда
			ТекстУпорядочивания=ТекстУпорядочивания+",
			|ДатаНачалаПериода";
		Иначе
			
			Если ОтборПоПериметру И Колонка.Группировка="Организация" Тогда
				ТекстУпорядочивания=ТекстУпорядочивания+",
				|ТипОрганизации УБЫВ";	
			КонецЕсли;
			
			ТекстУпорядочивания=ТекстУпорядочивания+",
			|"+Колонка.Группировка+"Наименование";
			
		КонецЕсли
		
	КонецЦикла;
		
	Для Каждого Строка ИЗ ГруппировкиСтроки Цикл
		
		Если СтруктураГруппировокИерархия.Свойство(Строка.Группировка) Тогда
			
			Для Каждого СтрИерархия ИЗ СтруктураГруппировокИерархия[Строка.Группировка] Цикл
				
				Если Строка.Группировка="ПериодОтчета" И СтрНайти(СтрИерархия.ПсевдонимПоля,"ДатаНачала")>0 Тогда
					
					ТекстУпорядочивания=ТекстУпорядочивания+",
					|"+СтрИерархия.ПсевдонимПоля;
					
				ИначеЕсли СтрНайти(СтрИерархия.ПсевдонимПоля,"Наименование")>0 Тогда
					
					ТекстУпорядочивания=ТекстУпорядочивания+",
					|"+СтрИерархия.ПсевдонимПоля;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Строка.Группировка="Строка" Тогда
			ТекстУпорядочивания=ТекстУпорядочивания+",
			|ПорядокСтроки";
		ИначеЕсли Строка.Группировка="ПериодОтчета" Тогда
			ТекстУпорядочивания=ТекстУпорядочивания+",
			|ДатаНачалаПериода";
		Иначе
			
			Если ОтборПоПериметру И Строка.Группировка="Организация" Тогда
				ТекстУпорядочивания=ТекстУпорядочивания+",
				|ТипОрганизации УБЫВ";	
			КонецЕсли;
			
			ТекстУпорядочивания=ТекстУпорядочивания+",
			|"+Строка.Группировка+"Наименование";
			
		КонецЕсли
		
	КонецЦикла;
	
	ТекстУпорядочивания=ТекстУпорядочивания+",
	|ИндексАналитики";
		
	ТекстВТ=ТекстВТ+Сред(ТекстУпорядочивания,2)+"	
	|
	|ИТОГИ
	|	ВЫБОР 
	|		КОГДА  (Колонка ЕСТЬ NULL) ИЛИ (Строка ЕСТЬ NULL)";
	
	Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
		
		 ТекстВТ=ТекстВТ+"
		 |ИЛИ ("+Реквизит+" ЕСТЬ NULL)";
		
	КонецЦикла; 
	
	ТекстВТ=ТекстВТ+"
	|			ИЛИ ((ИндексАналитики ЕСТЬ NULL) И (ЕстьNULL(МАКСИМУМ(ИндексАналитики), """") <> """"))
	|		ТОГДА NULL	
	|	ИНАЧЕ
	|		МАКСИМУМ(ЗначениеПоказателя)			
	|	КОНЕЦ ЗначениеПоказателя,	
	|	СУММА(ЗначениеПоказателяЧисло),
	|	СУММА(ЗначениеРаскрытияЧисло)
	|ПО ";
	
	Для Каждого СтрГруппировка ИЗ ГруппировкиСтроки Цикл
		
		Если СтруктураГруппировокИерархия.Свойство(СтрГруппировка.Группировка) Тогда
			
			Для Каждого СтрИерархия ИЗ СтруктураГруппировокИерархия[СтрГруппировка.Группировка] Цикл
										
				Если СтрИерархия.ВыводитьИтоги Тогда
					
					ТекстВТ=ТекстВТ+"
					|"+СтрИерархия.ПсевдонимПоля+",";
					
					МассивГруппировокСтрокИтог.Добавить(СтрИерархия.ПсевдонимПоля);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ТекстВТ=ТекстВТ+"
		|"+СтрГруппировка.Группировка+",";
		
		МассивГруппировокСтрокИтог.Добавить(СтрГруппировка.Группировка);
		
	КонецЦикла;
	
	//Аналитики выводим на последнем уровне
	
	ТекстВТ=ТекстВТ+"		
	|ИндексАналитики,";
	
	МассивГруппировокСтрокИтог.Добавить("ИндексАналитики");
	
	СтрИтогиКолонки="";
	
	Для Каждого СтрГруппировка ИЗ ГруппировкиКолонки Цикл
		
		Если СтруктураГруппировокИерархия.Свойство(СтрГруппировка.Группировка) Тогда
			
			Для Каждого СтрИерархия ИЗ СтруктураГруппировокИерархия[СтрГруппировка.Группировка] Цикл
										
				Если СтрИерархия.ВыводитьИтоги Тогда
					
					СтрИтогиКолонки=СтрИтогиКолонки+",
					|"+СтрИерархия.ПсевдонимПоля;
					
					МассивГруппировокКолонокИтог.Добавить(СтрИерархия.ПсевдонимПоля);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		СтрИтогиКолонки=СтрИтогиКолонки+",
		|"+СтрГруппировка.Группировка;
		
		МассивГруппировокКолонокИтог.Добавить(СтрГруппировка.Группировка);
		
	КонецЦикла;	
	
	ТекстВТ=ТекстВТ+Сред(СтрИтогиКолонки,2);
	//ТекстВТ=ТекстВТ+"
	//|АВТОУПОРЯДОЧИВАНИЕ";
	
	ЗапросДанные.УстановитьПараметр("ПустаяАналитика",Неопределено);
	ЗапросДанные.УстановитьПараметр("ВидОтчета",ВидОтчета);
	ЗапросДанные.УстановитьПараметр("ТаблицаСтроки",ТаблицаСтроки);
	
	ЗапросДанные.Текст=ТекстВТ;
	
	Если ТолькоОбновлениеЗначений Тогда
		ОбновитьЗначенияВТаблице(ЗапросДанные.Выполнить());
	Иначе	
		
		Если ВыводитьВДерево Тогда
			СформироватьДерево(ЗапросДанные.Выполнить());
		Иначе	
			
			СформироватьТаблицу(ЗапросДанные.Выполнить());
			
			//Если ОтображатьКомментарии Тогда
			//	ОтобразитьКомментарии(ТабКомментарии);
			//КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьВычисляемыеКолонки Тогда
			
			Если ВыводитьВДерево Тогда
								
				РассчитатьВычисляемыеКолонкиДерева()
				
			Иначе
				
				РассчитатьВычисляемыеКолонки();
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыделятьИзмененные И (НЕ ВыводитьВДерево) тогда
			
			МассивИзмененных=ТабОтчеты.НайтиСтроки(Новый Структура("ЕстьЭкземплярОтчета,ОтчетИзменен",Истина,Истина));
			ОтобразитьИзмененныеПоказатели(МассивИзмененных);
			
		КонецЕсли;
				
	КонецЕсли;
	
	// Уничтожим помещенные в текущем сеансе таблицы
	
	Если НЕ (УправляемыйРежим ИЛИ МассивТаблицПоказателей.Количество()=0) Тогда
		
		ТекстУничтожить="";
		
		Для Каждого Таблица ИЗ МассивТаблицПоказателей Цикл
			ТекстУничтожить=ТекстУничтожить+"
			|Уничтожить "+Таблица+"
			|;";
		КонецЦикла;
		
		ЗапросДанные.Текст=ТекстУничтожить;
		ЗапросДанные.Выполнить();
		
		МассивТаблицПоказателей.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры // ОтобразитьДанныеОтчетов() 

Процедура ОтобразитьИзмененныеПоказатели(МассивОтчетов) Экспорт
	
	ТекстВТ="";
	ТекстОбъединение="";
	ТекстОбъединениеРаскрытие="";
	ТабИзмененныхОбластей.Очистить();
	
	ТекстУничтожение="";
		
	СформироватьТаблицуИзмененныхРаскрытий(МассивОтчетов);
	ПервыйЭкземпляр=Истина;
	ТекстОтбор="";
	
	ЕстьИзменениеПоказателя=Ложь;
		
	Для Индекс=0 По МассивОтчетов.Количество()-1 Цикл
		
		СтрОтчет=МассивОтчетов[Индекс];
		СтрокаИндекс=Формат(Индекс,"ЧГ=");
		
		Если НЕ СтрОтчет.ЕстьЭкземплярОтчета Тогда
			Продолжить;
		КонецЕсли;
				
		Если (СписокОрганизацииОтбор.Количество()>0 И СписокОрганизацииОтбор.НайтиПоЗначению(СтрОтчет.Организация)=Неопределено)
			ИЛИ (СписокПериодыОтбор.Количество()>0 И СписокПериодыОтбор.НайтиПоЗначению(СтрОтчет.ПериодОтчета)=Неопределено)
			ИЛИ (СписокСценарииОтбор.Количество()>0 И СписокСценарииОтбор.НайтиПоЗначению(СтрОтчет.Сценарий)=Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		ПолучитьДокументОбъект(СтрОтчет);
		
		Если СтрОтчет.ОтчетОбъект.ЛогИзмененийПоказателей.Количество()=0 Тогда // Нет несохраненных изменений раскрытия
						
			Продолжить;
			
		Иначе
			
			ЕстьИзменениеПоказателя=Истина;
						
		КонецЕсли;
		
		Если СписокПоказателиНеВБланке.Количество()>0 Тогда
			ТекстОтбор=ТекстОтбор+"			
			|И ЛогИзмененныхПоказателей.Ссылка НЕ В(&СписокПоказателиНеВБланке)";
			
			ЗапросКоординаты.УстановитьПараметр("СписокПоказателиНеВБланке",СписокПоказателиНеВБланке);
			
		КонецЕсли;
		
		Если СписокИзмененныхПоказателей.Количество()>0 Тогда
			ТекстОтбор=ТекстОтбор+"			
			|И ЛогИзмененныхПоказателей.Ссылка В(&СписокИзмененныхПоказателей)";
			
			ЗапросКоординаты.УстановитьПараметр("СписокИзмененныхПоказателей",СписокИзмененныхПоказателей);
			
		КонецЕсли;
		
		ТекстОтбор=ТекстОтбор+"			
		|И ЛогИзмененныхПоказателей.НомерОперации= &НомерОперации";
		ЗапросКоординаты.УстановитьПараметр("НомерОперации",СтрОтчет.ОтчетОбъект.НомерТекущейОперации);
					
			ТекстВТ=ТекстВТ+"
			|/////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|&ЭкземплярОтчета_"+СтрокаИндекс+" КАК ЭкземплярОтчета,
			|ЛогИзмененныхПоказателей.Ссылка КАК Показатель
			|Поместить ЛогИзмененныхПоказателейОбщ_"+СтрокаИндекс+"
			|ИЗ &ЛогИзмененныхПоказателей_"+СтрокаИндекс+" КАК ЛогИзмененныхПоказателей";
			
			ТекстУничтожение=ТекстУничтожение+"
			|Уничтожить ЛогИзмененныхПоказателейОбщ_"+СтрокаИндекс+"
			|;"; 
			
			Если Не ПустаяСтрока(ТекстОтбор) Тогда
				
				ТекстВТ=ТекстВТ+"			
				|ГДЕ "+Сред(ТекстОтбор,6)+"
				|;";
				
			Иначе	
				
				ТекстВТ=ТекстВТ+"			
				|;";
				
			КонецЕсли;
						
			ЗапросКоординаты.УстановитьПараметр("ЭкземплярОтчета_"+СтрокаИндекс,СтрОтчет.ЭкземплярОтчета);
			ЗапросКоординаты.УстановитьПараметр("ЛогИзмененныхПоказателей_"+СтрокаИндекс,СтрОтчет.ОтчетОбъект.ЛогИзмененийПоказателей);		
					
		ТекстОбъединение=ТекстОбъединение+"
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ * "+?(ПервыйЭкземпляр,"Поместить ЛогИзмененныхПоказателей ","")+"ИЗ ЛогИзмененныхПоказателейОбщ_"+СтрокаИндекс+" КАК ЛогИзмененныхПоказателейОбщ_"+СтрокаИндекс;
		
		ПервыйЭкземпляр=Ложь;
				
	КонецЦикла;
	
	ТекстУничтожение=ТекстУничтожение+"
	|Уничтожить ЛогИзмененныхПоказателей
	|;"; 
	
	Если НЕ ЕстьИзменениеПоказателя Тогда
		Возврат;
	КонецЕсли;
			
	ТекстВТ=ТекстВТ+"
	|"+Сред(ТекстОбъединение,16)+"
	|;
	|//////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|		ТабПоказателиРаскрытия.ЭкземплярОтчета КАК ЭкземплярОтчета,
	|		ТабПоказателиРаскрытия.ИндексАналитики КАК ИндексАналитики,
	|		ТабПоказателиРаскрытия.Показатель КАК Показатель
	|	Поместить ЛогИзмененныхПоказателейРаскрытия 
	|	ИЗ
	|		&ТабПоказателиРаскрытия КАК ТабПоказателиРаскрытия
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛогИзмененныхПоказателей.ЭкземплярОтчета КАК ЭкземплярОтчета,
	|	ЛогИзмененныхПоказателей.Показатель КАК Показатель,
	|   &ПустаяСтрока КАК ИндексАналитики,
	|   Ложь КАК Раскрытие
	|ПОМЕСТИТЬ ТабИзмененныеПоказателиСвод
	|ИЗ
	|	ЛогИзмененныхПоказателей КАК ЛогИзмененныхПоказателей
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛогИзмененныхПоказателейРаскрытия.ЭкземплярОтчета КАК ЭкземплярОтчета,
	|	ЛогИзмененныхПоказателейРаскрытия.Показатель,
	|	ЛогИзмененныхПоказателейРаскрытия.ИндексАналитики КАК ИндексАналитики,
	|   Истина КАК Раскрытие
	|ИЗ ЛогИзмененныхПоказателейРаскрытия КАК ЛогИзмененныхПоказателейРаскрытия
	|ИНДЕКСИРОВАТЬ ПО ИндексАналитики,Показатель,ЭкземплярОтчета
	|;";
		
	ТекстВТ=ТекстВТ+"
	|ВЫБРАТЬ
	|ТабКоординатыОбщ.НомерСтроки,
	|ТабКоординатыОбщ.НомерКолонки,
	|ТабКоординатыОбщ.Раскрытие,
	|ТабИзмененныеПоказателиСвод.ЭкземплярОтчета,
	|ТабИзмененныеПоказателиСвод.Показатель,
	|ТабИзмененныеПоказателиСвод.ИндексАналитики
	|ИЗ ТабИзмененныеПоказателиСвод КАК ТабИзмененныеПоказателиСвод
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабКоординатыОбщ КАК ТабКоординатыОбщ
	|ПО ТабИзмененныеПоказателиСвод.ИндексАналитики=ТабКоординатыОбщ.ИндексАналитики
	|И ТабИзмененныеПоказателиСвод.Показатель=ТабКоординатыОбщ.Показатель
	|И ТабИзмененныеПоказателиСвод.ЭкземплярОтчета=ТабКоординатыОбщ.ЭкземплярОтчета";
			
	ЗапросКоординаты.УстановитьПараметр("ТабПоказателиРаскрытия",мИзмененныеПоказателиРаскрытия);
	ЗапросКоординаты.УстановитьПараметр("ПустаяСтрока","");
	
	ЗапросКоординаты.Текст=ТекстВТ;
	
	Результат=ЗапросКоординаты.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Если Результат.НомерСтроки=0 ИЛИ Результат.НомерКолонки=0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОбласть=ТабДок.Область(Результат.НомерСтроки,Результат.НомерКолонки,Результат.НомерСтроки,Результат.НомерКолонки);
        ОбновитьВычисляемыеЯчейки(Результат.НомерСтроки);
		
		Если ТекущаяОбласть.ЦветФона=ЦветИзмененнойОбласти Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока=ТабИзмененныхОбластей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);	
		НоваяСтрока.ИсходныйЦвет=ТекущаяОбласть.ЦветФона;
		ТекущаяОбласть.ЦветФона=ЦветИзмененнойОбласти;
			
	КонецЦикла;	
	
	ТекстУничтожение=ТекстУничтожение+"
	|Уничтожить ЛогИзмененныхПоказателейРаскрытия
	|;
	|Уничтожить ТабИзмененныеПоказателиСвод
	|;";
	
	ЗапросКоординаты.Текст=ТекстУничтожение;
	ЗапросКоординаты.Выполнить();
	
КонецПроцедуры // СоздатьмПоказатели()

Процедура ЗаполнитьДеревоНавигатора(РабочееДерево,РабочаяТаблица,РабочаяКолонка,ИерархияПоГруппировке) Экспорт
	
	РабочееДерево.Строки.Очистить();
	
	Если ИерархияПоГруппировке Тогда	
		
		ДобавитьЗначенияГрупп(РабочаяТаблица,РабочаяКолонка);
		
		Для Каждого Строка ИЗ РабочаяТаблица Цикл
			
			Если Не ЗначениеЗаполнено(Строка.Родитель) Тогда
				
				СтрокаДерева=РабочееДерево.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДерева,Строка);
				
				ДобавитьПодчиненныеГруппы(СтрокаДерева,РабочаяТаблица,РабочаяКолонка);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Строка ИЗ РабочаяТаблица Цикл
			
			СтрокаДерева=РабочееДерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева,Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДеревоОрганизаций

#КонецОбласти

#Область ПрограммныйИнтерфейс_ВсмпомогательныеФункции

Функция ЕстьАнализОтклонений() Экспорт 
	Для Каждого Колонка Из ГруппировкиВычисляемыеКолонки Цикл
		
		Если (Колонка.Группировка="ОтклонениеАбс" ИЛИ Колонка.Группировка="ОтклонениеОтн")
			И Колонка.Отображать Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции // ЕстьАнализОтклонений()

Функция ПолучитьИндексАналитик(СтрРаскрытия) Экспорт
	
	СтрИндекс="";
	
	Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		
		ТекАналитика=СтрРаскрытия["Аналитика"+ИндексАналитики];
		Если НЕ ТекАналитика=Неопределено Тогда
			
			СтрИндекс=СтрИндекс+"_"+XMLString(ТекАналитика);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрИндекс;	
	
КонецФункции // ПолучитьИндексАналитик()

#КонецОбласти

#Область ПрограммныйИнтерфейс_Бланк

Функция ПолучитьБланкПоУмолчанию() Экспорт	
	Возврат УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображения, ВидОтчета);	
КонецФункции



#КонецОбласти

#КонецОбласти


#Область ИзмененияРедактирования

Процедура СформироватьТаблицуИзмененныхРаскрытий(МассивОтчетов)
	
	Запрос=Новый Запрос;
	ТекстВТ="";
	
	ТекстОбъединениеРаскрытие="";
	ЕстьИзменениеРаскрытия=Ложь;
		
	Для Индекс=0 По МассивОтчетов.Количество()-1 Цикл
		
		СтрОтчет=МассивОтчетов[Индекс];
		СтрокаИндекс=Формат(Индекс,"ЧГ=");
				
		Если (НЕ СтрОтчет.ЕстьЭкземплярОтчета) 
			ИЛИ (СписокОрганизацииОтбор.Количество()>0 И СписокОрганизацииОтбор.НайтиПоЗначению(СтрОтчет.Организация)=Неопределено)
			ИЛИ (СписокПериодыОтбор.Количество()>0 И СписокПериодыОтбор.НайтиПоЗначению(СтрОтчет.ПериодОтчета)=Неопределено)
			ИЛИ (СписокСценарииОтбор.Количество()>0 И СписокСценарииОтбор.НайтиПоЗначению(СтрОтчет.Сценарий)=Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		ПолучитьДокументОбъект(СтрОтчет);
				
		Если СтрОтчет.ОтчетОбъект.ЛогИзмененийРаскрытийПоказателей.Количество()=0 Тогда
						
			Продолжить;
			
		Иначе
			
			ЕстьИзменениеРаскрытия=Истина;
			
		КонецЕсли;

				
		ТекстВТ=ТекстВТ+"
		|/////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|&ЭкземплярОтчета_"+СтрокаИндекс+" КАК ЭкземплярОтчета,
		|ЛогИзмененийПоказателейРаскрытия.Показатель";
		
		Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			ТекстВТ=ТекстВТ+",		
			|ЛогИзмененийПоказателейРаскрытия.Аналитика"+ИндексАналитики+" КАК Аналитика"+ИндексАналитики;
			
		КонецЦикла;
		
		ТекстВТ=ТекстВТ+"
		|Поместить ЛогИзмененийПоказателяРаскрытияОбщ_"+СтрокаИндекс+"
		|ИЗ &ЛогИзмененийПоказателейРаскрытия_"+СтрокаИндекс+" КАК ЛогИзмененийПоказателейРаскрытия";
		
		ТекстОтбор="";	
		
		Если СписокПоказателиНеВБланке.Количество()>0 Тогда
			ТекстОтбор=ТекстОтбор+"			
			|И ЛогИзмененийПоказателейРаскрытия.Показатель НЕ В(&СписокПоказателиНеВБланке)";
			
			Запрос.УстановитьПараметр("СписокПоказателиНеВБланке",СписокПоказателиНеВБланке);
			
		КонецЕсли;
		
		Если СписокИзмененныхПоказателей.Количество()>0 Тогда
			ТекстОтбор=ТекстОтбор+"			
			|И ЛогИзмененийПоказателейРаскрытия.Показатель В(&СписокИзмененныхПоказателей)";
			
			Запрос.УстановитьПараметр("СписокИзмененныхПоказателей",СписокИзмененныхПоказателей);
			
		КонецЕсли;
			
		Если Не ПустаяСтрока(ТекстОтбор) Тогда
			
			ТекстВТ=ТекстВТ+"			
			|ГДЕ "+Сред(ТекстОтбор,6)+"
			|;";
			
		Иначе	
			
			ТекстВТ=ТекстВТ+"			
			|;";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ЭкземплярОтчета_"+СтрокаИндекс,СтрОтчет.ЭкземплярОтчета);
		Запрос.УстановитьПараметр("ЛогИзмененийПоказателейРаскрытия_"+СтрокаИндекс,СтрОтчет.ОтчетОбъект.ЛогИзмененийРаскрытийПоказателей);
		
		ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ * ИЗ ЛогИзмененийПоказателяРаскрытияОбщ_"+СтрокаИндекс+" КАК ЛогИзмененийПоказателяРаскрытияОбщ_"+СтрокаИндекс;
		
	КонецЦикла;
		
	ТекстВТ=ТекстВТ+"
	|"+Сред(ТекстОбъединениеРаскрытие,16)+"
	|";
	
	Запрос.Текст=ТекстВТ;
	
	Если ЕстьИзменениеРаскрытия Тогда
		
		мИзмененныеПоказателиРаскрытия=Запрос.Выполнить().Выгрузить();	
		мИзмененныеПоказателиРаскрытия.Колонки.Добавить("ИндексАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
		
		Для Каждого СтрРаскрытия ИЗ мИзмененныеПоказателиРаскрытия Цикл
			
			СтрРаскрытия.ИндексАналитики=ПолучитьИндексАналитик(СтрРаскрытия);
			
		КонецЦикла;
		
		мИзмененныеПоказателиРаскрытия.Индексы.Добавить("ИндексАналитики");
		
	Иначе
		
		мИзмененныеПоказателиРаскрытия=ТабИзмененныхОбластей.СкопироватьКолонки();
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьТаблицуИзмененныхРаскрытий()



#КонецОбласти


#Область Навигатор

Процедура ДобавитьЭлементВТаблицуНавигатора(ТаблицаНавигатора,СтрОтчет,Измерение)
	
	НоваяСтрока=ТаблицаНавигатора.Добавить();
	НоваяСтрока[Измерение]=СтрОтчет[Измерение];
	
	Если Измерение="ПериодОтчета" Тогда
		
		НоваяСтрока.ДатаНачала=НоваяСтрока[Измерение].ДатаНачала;
		
	КонецЕсли;
		
	
КонецПроцедуры // ДобавитьЭлементВТаблицуНавигатора 

#КонецОбласти


#Область ВыводИерархии

Функция ПолучитьУровеньЭлемента(Элемент)
	
	ТекУровень=КэшУровней.Получить(Элемент);
	
	Если ТекУровень=Неопределено Тогда
		
		ТекУровень=Элемент.Уровень();
		КэшУровней.Вставить(Элемент,ТекУровень);
		
	КонецЕсли;
	
	Возврат ТекУровень;
	
КонецФункции // ПолучитьУровеньЭлемента()

Процедура ДобавитьДанныеПоИерархии(СтруктураГруппировокИерархия,ИмяГруппировки)
	
	// Определим максимальный уровень ключевого измерения
	
	МаксУровень=0;
	
	Для Каждого СтрОтчет ИЗ ТабОтчеты Цикл
		
		Если НЕ (СтрОтчет.ЕстьЭкземплярОтчета ИЛИ ГруппировкиКолонки.Количество()>2) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ВключатьВОбработку(СтрОтчет) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекУровень=ПолучитьУровеньЭлемента(СтрОтчет[ИмяГруппировки]);
		
		Если ТекУровень>МаксУровень Тогда
			
			МаксУровень=ТекУровень;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МаксУровень>0 Тогда
		
		ТекУровень=МаксУровень;
		
		ТаблицаПолей=Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ИмяПоля");
		ТаблицаПолей.Колонки.Добавить("ПсевдонимПоля");
		ТаблицаПолей.Колонки.Добавить("Уровень");
		ТаблицаПолей.Колонки.Добавить("ВыводитьИтоги",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		
		ТекстБазовогоУровня=?(СтрНайти(ИмяГруппировки,"Аналитика")>0,"Спр"+ИмяГруппировки,СправочникиГруппировок[ИмяГруппировки]);
		ШагИерархии=1;
		
		Пока ТекУровень>0 Цикл
			
			ТекстБазовогоУровня=ТекстБазовогоУровня+".Родитель";
			
			Если ИмяГруппировки="ПериодОтчета" Тогда
				
				НоваяСтрока=ТаблицаПолей.Добавить();
				НоваяСтрока.ИмяПоля="ЕСТЬNULL("+ТекстБазовогоУровня+".Ссылка,ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка))";
				НоваяСтрока.ПсевдонимПоля="ПериодОтчета_Родитель_"+ШагИерархии;
				НоваяСтрока.Уровень=(ТекУровень-1);
				НоваяСтрока.ВыводитьИтоги=Истина;
				
				НоваяСтрока=ТаблицаПолей.Добавить();
				НоваяСтрока.ИмяПоля="ЕСТЬNULL("+ТекстБазовогоУровня+".ДатаНачала,"""")";
				НоваяСтрока.ПсевдонимПоля="ДатаНачала_Родитель_"+ШагИерархии;
				НоваяСтрока.Уровень=(ТекУровень-1);
				
			Иначе
				
				НоваяСтрока=ТаблицаПолей.Добавить();
				НоваяСтрока.ИмяПоля="ЕСТЬNULL("+ТекстБазовогоУровня+".Ссылка,ЗНАЧЕНИЕ(Справочник."+СправочникиГруппировок[ИмяГруппировки]+".ПустаяСсылка))";
				НоваяСтрока.ПсевдонимПоля=ИмяГруппировки+"_Родитель_"+ШагИерархии;
				НоваяСтрока.Уровень=(ТекУровень-1);
				НоваяСтрока.ВыводитьИтоги=Истина;
				
				НоваяСтрока=ТаблицаПолей.Добавить();
				НоваяСтрока.ИмяПоля="ЕСТЬNULL("+ТекстБазовогоУровня+".Наименование,"""")";
				НоваяСтрока.ПсевдонимПоля=ИмяГруппировки+"_Наименование_Родитель_"+ШагИерархии;
				НоваяСтрока.Уровень=(ТекУровень-1);
				
			КонецЕсли;
			
			ТекУровень=ТекУровень-1;

			Если ТекУровень>0 Тогда
				ШагИерархии=ШагИерархии+1;
			КонецЕсли;
					
		КонецЦикла;
		
		ТаблицаПолей.Сортировать("Уровень");
		СтруктураГруппировокИерархия.Вставить(ИмяГруппировки,ТаблицаПолей);
		ЕстьВыводИерархии=Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьДанныеПоИерархии()

Процедура ЗаполнитьСтруктуруИерархическихГруппировок()
	
	СтруктураГруппировокИерархия=Новый Структура;
	ВыводПоИерархии=ЕстьВыводИерархии;
	
	Если ИерархияОрганизации Тогда
		
		ДобавитьДанныеПоИерархии(СтруктураГруппировокИерархия,"Организация");
		
	КонецЕсли;
		
	Если ИерархияПериоды Тогда
		
		ДобавитьДанныеПоИерархии(СтруктураГруппировокИерархия,"ПериодОтчета");
 		
	КонецЕсли;
	
	Для Инд=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если ЭтотОбъект["ИерархияАналитика"+Инд] Тогда
			
			ДобавитьДанныеПоИерархии(СтруктураГруппировокИерархия,"Аналитика"+Инд);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураГруппировокИерархия.Количество()=0 Тогда
		
		Если ВыводПоИерархии Тогда
			
			ТабРаскрытиеГруппСтроки.Очистить();
			ЕстьВыводИерархии=Ложь;
			
		КонецЕсли;
		
	ИначеЕсли (НЕ ВыводПоИерархии) Тогда
		
		ТабРаскрытиеГруппСтроки.Очистить();
		
	КонецЕсли;		
				
КонецПроцедуры // ЗаполнитьСтруктуруИерархическихГруппировок()

#КонецОбласти


#Область Комментарии

Функция ПолучитьТекстКомментария(ТабКомментариев)
	
	ТекстКомментария = "";
	
	Для Каждого Строка Из ТабКомментариев Цикл
		ТекстКомментария = ТекстКомментария + "Дата: " + Формат(Строка.Период, "ДФ=dd/MM/yy") + ". Автор: " + Строка.Автор
		+ ?(ЗначениеЗаполнено(Строка.Версия), ". Версия: " + Строка.Версия + ".", "") + ")
		|" + Строка.Комментарий + "
		|";
	КонецЦикла;
	
	Возврат ТекстКомментария;
	
КонецФункции // ПолучитьТекстКомментария()

Процедура ПоместитьКомментарииВСвод(МассивКомментарии,ДобавлятьКоординаты=Истина)
	
	ЗапросКомментарии=Новый Запрос;
	ЗапросКомментарии.Текст="ВЫБРАТЬ
	|	Комментарии.ЭкземплярОтчета,
	|	Комментарии.Показатель КАК Показатель,
	|	Комментарии.Период,
	|	Комментарии.Автор,
	|	Комментарии.Версия,
	|	Комментарии.Комментарий,
	|	ИСТИНА КАК СохраненнаяВерсия,
	|	Комментарии.Показатель.Строка КАК Строка,
	|	Комментарии.Показатель.Колонка КАК Колонка";
	
	Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
		
		ЗапросКомментарии.Текст=ЗапросКомментарии.Текст+",
		|	Комментарии.ЭкземплярОтчета."+Реквизит+" КАК "+Реквизит;

		
	КонецЦикла; 
	
	Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
		
		Если СтрАналитика.ЕстьРазворот Тогда
			
			ЗапросКомментарии.Текст=ЗапросКомментарии.Текст+",
			|Комментарии.ЭкземплярОтчета."+СтрАналитика.КодАналитики+" КАК "+СтрАналитика.КодАналитики;
						
		КонецЕсли;
		
	КонецЦикла;
	ЗапросКомментарии.Текст=ЗапросКомментарии.Текст+"	
	|ИЗ
	|	РегистрСведений.Комментарии КАК Комментарии
	|ГДЕ
	|	Комментарии.ЭкземплярОтчета В(&МассивКомментарии)
	|ИТОГИ ПО
	|	Показатель";
	
	ЗапросКомментарии.УстановитьПараметр("МассивКомментарии", МассивКомментарии);

	ТабКомментарииСвод=ШаблонТаблицыКоординат.СкопироватьКолонки();	
	ТабКомментарииСвод.Колонки.Добавить("Комментарий",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(500));

	Выборка = ЗапросКомментарии.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	ТаблицаЗначений.Колонки.Добавить("Период");
	ТаблицаЗначений.Колонки.Добавить("Автор");
	ТаблицаЗначений.Колонки.Добавить("Версия");
	ТаблицаЗначений.Колонки.Добавить("Комментарий");
	ТаблицаЗначений.Колонки.Добавить("СохраненнаяВерсия");
	
	Пока Выборка.Следующий() Цикл
		
		ТаблицаЗначений.Очистить();
		НоваяСтрока=ТабКомментарииСвод.Добавить();
				
		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
			ВыборкаЗначений = Выборка.Выбрать();
			Пока ВыборкаЗначений.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаЗначений.Добавить(), ВыборкаЗначений);
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаЗначений);
			КонецЦикла;
		КонецЕсли;
		
		НоваяСтрока.Комментарий=ПолучитьТекстКомментария(ТаблицаЗначений);	
		
	КонецЦикла;
	
	ЗапросКоординаты.Текст="ВЫБРАТЬ * Поместить ТабКомментарииБаза ИЗ &ТабКомментарииСвод КАК ТабКомментарииСвод
	|;";
	
	Если ДобавлятьКоординаты Тогда
		
		ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"
		
		|ВЫБРАТЬ * Поместить ТабКоординатыОбщ ИЗ &ШаблонТаблицыКоординат КАК ШаблонТаблицыКоординат
		|;";
		
		ЗапросКоординаты.УстановитьПараметр("ШаблонТаблицыКоординат",ШаблонТаблицыКоординат.СкопироватьКолонки());
		
		ТаблицаКоординатПомещенаВЗапрос=Истина;
		
	КонецЕсли;
	
	ЗапросКоординаты.УстановитьПараметр("ТабКомментарииСвод",ТабКомментарииСвод);	
	ЗапросКоординаты.Выполнить();
		
КонецПроцедуры // ПоместитьКомментарииВСвод() 

#КонецОбласти


#Область ПолучениеДанных

Процедура РассчитатьВычисляемыеКолонкиДерева(ТекИзмерение=Неопределено)
	
	Если Не ТекИзмерение=Неопределено Тогда
		
		КолонкиКОбработке=ТабКоординатыВычисляемыхКолонок.Скопировать(Новый Структура(ГруппировкаБазис,ТекИзмерение));
		
	Иначе
		
		КолонкиКОбработке=ТабКоординатыВычисляемыхКолонок;
		
	КонецЕсли;
	
	ВсегоСтрок=ПолучитьМаксимальныйНомерСтроки();
	
	Если ВсегоСтрок=0 Тогда
		Возврат;
	КонецЕсли;
		
	МассивКВычислению=ГруппировкиВычисляемыеКолонки.НайтиСтроки(Новый Структура("Отображать",Истина));
	
	Для Каждого СтрокаКВычислению ИЗ МассивКВычислению Цикл
		
		КолонкиКВычислению=КолонкиКОбработке.НайтиСтроки(Новый Структура("ИмяКолонки",СтрокаКВычислению.Группировка));
		
		Для Каждого СтрКолонка ИЗ КолонкиКВычислению Цикл
			
			Для Стр=1 ПО ВсегоСтрок Цикл
				
				СтрДерева=ТабДерево.Строки.Найти(Стр,"НомерСтроки",Истина);
				
				Если СтрДерева=Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ТекЗначение=ПолучитьЧисло(СтрДерева[СтрКолонка.НомерКолонкиЗначение-1]);
								
				Если СтрокаКВычислению.Группировка="ДоляВИтогеПоГруппировке" Тогда
					
					ТекБазис=ПолучитьЧисло(СтрДерева[СтрКолонка.НомерКолонкиИтог-1]);
					ВычисленноеЗначение=?(ТекБазис=0,0,ТекЗначение/ТекБазис)*100;
					
				ИначеЕсли СтрокаКВычислению.Группировка="ОтклонениеАбс" Тогда
					
					ТекБазис=ПолучитьЧисло(СтрДерева[СтрКолонка.НомерКолонкиБазис-1]);							
					ВычисленноеЗначение=ТекЗначение-ТекБазис;
					
				ИначеЕсли СтрокаКВычислению.Группировка="ОтклонениеОтн" Тогда
					
					ТекБазис=ПолучитьЧисло(СтрДерева[СтрКолонка.НомерКолонкиБазис-1]);
					ВычисленноеЗначение=?(ТекБазис=0,0,(ТекЗначение-ТекБазис)/ТекБазис)*100;
					
				ИначеЕсли СтрокаКВычислению.Группировка="ДоляВИтогеПоПериметру" Тогда
					
					ТекБазис=ПолучитьЧисло(СтрДерева[СтрКолонка.НомерКолонкиБазис-1]);
					ВычисленноеЗначение=?(ТекБазис=0,0,ТекЗначение/ТекБазис)*100;
					
				КонецЕсли;
				
				СтрДерева[СтрКолонка.НомерКолонки-1]=ВычисленноеЗначение;
								
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;	
		
КонецПроцедуры // РассчитатьВычисляемыеКолонкиДерева()

Функция ПолучитьЧисло(ЗначениеЧислоИлиНеопределено)
	Возврат ?(ЗначениеЧислоИлиНеопределено = Неопределено, 0, ЗначениеЧислоИлиНеопределено);
КонецФункции

Процедура СгруппироватьСтрокиПоИерархии()
	
	ТабКоординатыСтрок.Индексы.Добавить("НомерСтроки");
	
	ТекстУсловие="";
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ Строка,НомерСтроки
	|ПОМЕСТИТЬ РабКоординаты 
	|ИЗ &ТабКоординатыСтрок КАК ТабКоординатыСтрок
	|ГДЕ (НЕ Строка=&ПустаяСтрока)
	|И (НЕ ТабКоординатыСтрок.Раскрытие=ИСТИНА)
	|И ТабКоординатыСтрок.УровеньСтроки=ИСТИНА
	|;
	|Выбрать * ИЗ РабКоординаты
	|Упорядочить ПО РабКоординаты.НомерСтроки";
	
	Запрос.УстановитьПараметр("ТабКоординатыСтрок",ТабКоординатыСтрок);
	Запрос.УстановитьПараметр("ПустаяСтрока",Справочники.СтрокиОтчетов.ПустаяСсылка());
	
	РабКоординаты=Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка ИЗ ДеревоСтрок.Строки Цикл
		
		Если Строка.Строки.Количество()>1 Тогда
			
			Если ВыводитьВДерево Тогда
				
				МассивКУдалению=Новый Массив;
				ВыполнитьГруппировкуСтрокДерева(Строка,РабКоординаты,МассивКУдалению);
				Для Каждого Строка ИЗ МассивКУдалению Цикл
					
					Попытка
						
						ТекРодитель=Строка.Родитель;
						
						Если ТекРодитель=Неопределено Тогда
							ТабДерево.Строки.Удалить(Строка);
						Иначе
							ТекРодитель.Строки.Удалить(Строка);
						КонецЕсли;
						
					Исключение
					КонецПопытки;
					
				КонецЦикла;
							
			Иначе
				
				ВыполнитьГруппировкуСтрок(Строка,РабКоординаты);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СгруппироватьСтрокиПоИерархии

Процедура СгруппироватьИзмерения(ТаблицаИзмерений,КоординатыИзмерений,УровеньИтога,Координата,ТаблицаГрупп)
	
	ТекстСортировки="";
	
	СтруктураПоиска=Новый Структура("Отображать",Истина);
	КоличествоВычисляемых=ГруппировкиВычисляемыеКолонки.НайтиСтроки(СтруктураПоиска).Количество();
	
	ИндексИзмерения=?(УровеньИтога=1,0,УровеньИтога-1);
	
	СтруктураПоиска=Новый Структура;
	
	Для Каждого Строка ИЗ ТаблицаИзмерений Цикл
		
		СтруктураПоиска.Вставить(Строка.Группировка);
		
	КонецЦикла;	
	
	Для Индекс=ИндексИзмерения По ТаблицаИзмерений.Количество()-2 Цикл
		
		ИмяГруппировки=ТаблицаИзмерений[Индекс].Группировка;
		
		ТекКомбинацияГруппировок=Новый Структура;
		
		Для ИндексГруппировок=0 По Индекс Цикл
			ТекКомбинацияГруппировок.Вставить(ТаблицаИзмерений[ИндексГруппировок].Группировка);
		КонецЦикла;
		
		НачалоОбласти=0;
		КонецОбласти=0;
		
		ТекстСортировки=ТекстСортировки+ИмяГруппировки+",";	
		КоординатыИзмерений.Сортировать(ТекстСортировки+Координата);
		
		Для Каждого СтрИзмерения ИЗ КоординатыИзмерений Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрИзмерения[ИмяГруппировки]) Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьСовпадение=Истина;
			
			Для Каждого КлючИЗначение ИЗ ТекКомбинацияГруппировок Цикл
				Если НЕ СтрИзмерения[КлючИЗначение.Ключ]=КлючИЗначение.Значение Тогда
					ЕстьСовпадение=Ложь;
				КонецЕсли;
				
				СтруктураПоиска.Вставить(КлючИЗначение.Ключ,КлючИЗначение.Значение);
				
			КонецЦикла;
					
			Если НЕ ЕстьСовпадение Тогда
				
				Если НЕ НачалоОбласти>=КонецОбласти Тогда
					
					Если Координата="НомерКолонки" Тогда
						
						ОбластьГруппы=ТабДок.Область(,НачалоОбласти+1,,КонецОбласти+КоличествоВычисляемых);
						
					ИначеЕсли Координата="НомерСтроки" Тогда
						
						ОбластьГруппы=ТабДок.Область(НачалоОбласти+1,,КонецОбласти,);
						
					КонецЕсли;
					
					ОбластьГруппы.Сгруппировать();
					МассивГруппа=ТаблицаГрупп.НайтиСтроки(СтруктураПоиска);
					
					Если МассивГруппа.Количество()=0 Тогда
						
						СтрГруппа=ТаблицаГрупп.Добавить();
						Для Каждого Строка ИЗ ТаблицаИзмерений Цикл
							СтрГруппа[Строка.Группировка]=СтруктураПоиска[Строка.Группировка];
						КонецЦикла;
						
						СтрГруппа.УровеньГруппировки=Индекс;
						
					Иначе
						
						СтрГруппа=МассивГруппа[0]; 
						
					КонецЕсли;
					
					СтрГруппа.НачалоГруппы=НачалоОбласти+1;
					СтрГруппа.КонецГруппы=КонецОбласти+?(Координата="НомерКолонки",КоличествоВычисляемых,0);
					
					ОбластьГруппы.Видимость=Истина;
							
				КонецЕсли;				
				
				НачалоОбласти=СтрИзмерения[Координата];
				КонецОбласти=СтрИзмерения[Координата];
				
				Для Каждого КлючИЗначение ИЗ ТекКомбинацияГруппировок Цикл
					ТекКомбинацияГруппировок.Вставить(КлючИЗначение.Ключ,СтрИзмерения[КлючИЗначение.Ключ]);	
				КонецЦикла;
				
			Иначе
				
				КонецОбласти=СтрИзмерения[Координата];
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ НачалоОбласти=КонецОбласти Тогда
			
			Если Координата="НомерКолонки" Тогда
				
				ОбластьГруппы=ТабДок.Область(,НачалоОбласти+1,,КонецОбласти+КоличествоВычисляемых);
				
			ИначеЕсли Координата="НомерСтроки" Тогда
				
				ОбластьГруппы=ТабДок.Область(НачалоОбласти+1,,КонецОбласти,);
				
			КонецЕсли;
			
			ОбластьГруппы.Сгруппировать();
			МассивГруппа=ТаблицаГрупп.НайтиСтроки(СтруктураПоиска);
			
			Если МассивГруппа.Количество()=0 Тогда
				
				СтрГруппа=ТаблицаГрупп.Добавить();
				Для Каждого Строка ИЗ ТаблицаИзмерений Цикл
					СтрГруппа[Строка.Группировка]=СтруктураПоиска[Строка.Группировка];
				КонецЦикла;
				
				СтрГруппа.УровеньГруппировки=Индекс;
				
			Иначе
				
				СтрГруппа=МассивГруппа[0]; 
				
			КонецЕсли;
			
			СтрГруппа.НачалоГруппы=НачалоОбласти+1;
			СтрГруппа.КонецГруппы=КонецОбласти+?(Координата="НомерКолонки",КоличествоВычисляемых,0);
			
			ОбластьГруппы.Видимость=Истина;
				
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры // СгруппироватьИзмерения() 

Процедура ПоместитьТаблицуПоказателейВСвод(СписокВерсий, МассивЭкземпляров, ИмяТаблицы)
	
	ТекстОтбор="";
	ИзмеренияАналитики1="";
	ИзмеренияАналитики2="";
	
	//////////////////////////////////////////////////////////////////////////////////////
	// Подготовим запрос для получения данных
	
	ОтборПоказателей=Новый Соответствие;
	
	Если СписокПоказателиНеВБланке.Количество()>0 Тогда
		
		ОтборПоказателей.Вставить("#### НЕ В(&СписокПоказателиНеВБланке)",Новый Структура("СписокПоказателиНеВБланке",СписокПоказателиНеВБланке)); 
		
	КонецЕсли;
		
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",ВидОтчета);
	ДанныеЗапроса.Вставить("СписокВерсий",СписокВерсий);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",Истина);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",Ложь);
	
	Если ОтборПоказателей.Количество()>0 Тогда 
		ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
	КонецЕсли;
	
	ДанныеЗапроса.Вставить("ТолькоЧисловые", Ложь);
	
	ДополнительныеПоля=Новый Соответствие;	
	ДополнительныеПоля.Вставить("Версия.ЭкземплярОтчета", "ЭкземплярОтчета");	
	
	ДанныеЗапроса.Вставить("ДополнительныеПоля",ДополнительныеПоля);
	ДанныеЗапроса.Вставить("ПоследниеВерсии", 	ПоследниеВерсии);
	
	СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	///////////////////////////////////////////////////////////////////////////////////////
	
	Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВложенногоЗапроса=СтрЗаменить(СтруктураЗапроса.ТекстЗапроса,"&СписокВерсий","&СписокВерсий_"+ИмяТаблицы);
		
	Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
		
		ЗапросДанные.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
		
	КонецЦикла;
	
	ЗапросДанные.УстановитьПараметр("СписокВерсий_"+ИмяТаблицы,СписокВерсий);
 	
	///////////////////////////////////////////////////////////////////////////////////////
	
	ИмяТаблицыСинтетики=УправлениеОтчетамиУХ.ВернутьИмяТаблицыСинтетики(МаксАналитикОтчета);
		
	Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
		
		Если СтрАналитика.ЕстьРазворот Тогда
			
			ИзмеренияАналитики1=ИзмеренияАналитики1+"
			|НастраиваемыйОтчет."+СтрАналитика.КодАналитики+" КАК "+СтрАналитика.КодАналитики+",";
			ИзмеренияАналитики2=ИзмеренияАналитики2+"
			|ЭкземплярыОтчетов."+СтрАналитика.КодАналитики+" КАК "+СтрАналитика.КодАналитики+",";
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ЗапросДанные.Текст=ЗапросДанные.Текст+"
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭкземплярыОтчетов.ЭкземплярОтчета,";
	
	Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
		
		ЗапросДанные.Текст=ЗапросДанные.Текст+"
		|	ЭкземплярыОтчетов."+Реквизит+",";
	
	КонецЦикла;
	
	ЗапросДанные.Текст=ЗапросДанные.Текст+"
	|	ЭкземплярыОтчетов.ПериодОтчета.ДатаНачала КАК ДатаНачалаПериода,
	|	"+ИзмеренияАналитики2+"
	|	ЭкземплярыОтчетов.Ссылка,
	|	ЭкземплярыОтчетов.Код,
	|	ЭкземплярыОтчетов.НеФинансовый КАК НеФинансовый,
	|	ЭкземплярыОтчетов.ЧисловойПоказатель КАК ЧисловойПоказатель,
	|	ЭкземплярыОтчетов.ВидКурса КАК ВидКурса,
	|	ЭкземплярыОтчетов.Строка,
	|	ЭкземплярыОтчетов.Колонка,
	|	ЭкземплярыОтчетов.ПорядковыйНомерКолонки,
	|	ЕСТЬNULL(ЗначенияПоказателей.Значение, ВЫБОР
	|			КОГДА ЭкземплярыОтчетов.ЧисловойПоказатель
	|				ТОГДА 0
	|			КОГДА ЭкземплярыОтчетов.ТипЗначенияПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийПоказателейОтчетов.Строка)
	|				ТОГДА """"
	|			КОГДА ЭкземплярыОтчетов.ТипЗначенияПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийПоказателейОтчетов.Дата)
	|				ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЗначениеЧисло
	|   Поместить " + ИмяТаблицы + "
	|ИЗ
	|	(ВЫБРАТЬ
	|		НастраиваемыйОтчет.Ссылка КАК ЭкземплярОтчета,";
	
	Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
		
		ЗапросДанные.Текст=ЗапросДанные.Текст+"
		|	НастраиваемыйОтчет."+Реквизит+",";
	
	КонецЦикла;
	
	ЗапросДанные.Текст=ЗапросДанные.Текст+"
	|		" + ИзмеренияАналитики1 + "
	|		ПоказателиОтчетов.Ссылка,
	|		ПоказателиОтчетов.Код КАК Код,
	|		ПоказателиОтчетов.Строка КАК Строка,
	|		ПоказателиОтчетов.НеФинансовый КАК НеФинансовый,
	|		ПоказателиОтчетов.ТипЗначения КАК ТипЗначенияПоказателя,
	|		ПоказателиОтчетов.ЧисловойПоказатель КАК ЧисловойПоказатель,
	|		ПоказателиОтчетов.ВидКурса КАК ВидКурса,
	|		ПоказателиОтчетов.Колонка КАК Колонка,
	|		ПоказателиОтчетов.Колонка.ПорядковыйНомер КАК ПорядковыйНомерКолонки
	|	ИЗ
	|		Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|			ПО НастраиваемыйОтчет.ВидОтчета = ПоказателиОтчетов.Владелец
	|				И НастраиваемыйОтчет.Ссылка В (&МассивЭкземпляров_" + ИмяТаблицы + ")
	|				И НастраиваемыйОтчет.ВидОтчета = &ВидОтчета	
	|				И ПоказателиОтчетов.Владелец = &ВидОтчета	
	|				И (НЕ ПоказателиОтчетов.ПометкаУдаления)) КАК ЭкземплярыОтчетов
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ("+ТекстВложенногоЗапроса+") КАК ЗначенияПоказателей
	|		ПО ЭкземплярыОтчетов.Ссылка = ЗначенияПоказателей.Показатель
	|		И ЭкземплярыОтчетов.ЭкземплярОтчета=ЗначенияПоказателей.ЭкземплярОтчета";
	
	ЗапросДанные.Текст=ЗапросДанные.Текст+"
	|;";
	
	ЗапросДанные.УстановитьПараметр("МассивЭкземпляров_" + ИмяТаблицы, МассивЭкземпляров);
	ЗапросДанные.УстановитьПараметр("ВидОтчета", ВидОтчета);
			
КонецПроцедуры // ПоместитьТаблицуПоказателейВСвод

Процедура ПоместитьТаблицуРаскрытияВСвод(СписокВерсий,ИмяТаблицы,СтрокаРаскрытия=Неопределено)
	
	ОтборПоказателей=Новый Соответствие;
	
	ТекстОтбор="";
	ИзмеренияАналитики1="";
	ИзмеренияАналитики2="";
	
	//////////////////////////////////////////////////////////////////////////////////////
	// ПОДГОТОВИМ ТЕКСТ ВЛОЖЕННОГО ЗАПРОСА ПО АНАЛИТИКАМ
	
	Если СписокПоказателиНеВБланке.Количество()>0 Тогда
		
		ОтборПоказателей.Вставить("#### НЕ В(&СписокПоказателиНеВБланке)",Новый Структура("СписокПоказателиНеВБланке",СписокПоказателиНеВБланке)); 
		
	КонецЕсли;
	
	Если НЕ СтрокаРаскрытия=Неопределено Тогда
		
		ОтборПоказателей.Вставить("####.Строка=&СтрокаРаскрытия",Новый Структура("СтрокаРаскрытия",СтрокаРаскрытия));
				
	КонецЕсли;
	
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",ВидОтчета);
	ДанныеЗапроса.Вставить("СписокВерсий",СписокВерсий);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",Ложь);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",Истина);
	ДанныеЗапроса.Вставить("ПринудительнаяТипизация",Истина);
	
	Если ОтборПоказателей.Количество()>0 Тогда 
		ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
	КонецЕсли;
	
	ДанныеЗапроса.Вставить("МаксКоличествоАналитик",МаксАналитикОтчета+МаксАналитикПоказателя);	
	ДанныеЗапроса.Вставить("ТолькоЧисловые", Истина);
	
	ДополнительныеПоля=Новый Соответствие;
	
	Для каждого Реквизит Из МассивКлючевыхРеквизитов  Цикл
		
		ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей."+Реквизит,Реквизит);
		
	КонецЦикла; 
	
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.ЭкземплярОтчета","ЭкземплярОтчета");
    ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.ПериодОтчета.ДатаНачала","ДатаНачала");
	
	Для Индекс=1 По МаксАналитикОтчета Цикл
		
		ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.ЭкземплярОтчета.Аналитика"+Индекс,"Аналитика"+Индекс);
		
	КонецЦикла;
		
	ДанныеЗапроса.Вставить("ДополнительныеПоля",ДополнительныеПоля);
	ДанныеЗапроса.Вставить("ПоследниеВерсии", ПоследниеВерсии);
			
	СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);	
	///////////////////////////////////////////////////////////////////////////////////////
	
	Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПараметраСписокВерсий = "&СписокВерсий_" + ИмяТаблицы;
	ТекстВложенногоЗапроса = СтрЗаменить(СтруктураЗапроса.ТекстЗапроса, "&СписокВерсий", ИмяПараметраСписокВерсий);
	
	
	Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл		
		ЗапросДанныеРаскрытия.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);		
	КонецЦикла;
	
	ЗапросДанныеРаскрытия.УстановитьПараметр("СписокВерсий_"+ИмяТаблицы,СписокВерсий);
	
	Если ДанныеЗапроса.ТолькоЧисловые Тогда
		ТекстИтогПоЗначению = "СУММА(ЗначенияПоказателейОтчетов.Значение) КАК ЗначениеЧисло";
	Иначе
		ТекстИтогПоЗначению = 
		"ВЫБОР 
		|	КОГДА МАКСИМУМ(ЗначенияПоказателейОтчетов.ЧислоАналитикГруппыРаскрытия) = -1 
		|		ТОГДА МАКСИМУМ(ЗначенияПоказателейОтчетов.Значение) 
		|	ИНАЧЕ СУММА(ВЫРАЗИТЬ(ЗначенияПоказателейОтчетов.Значение КАК ЧИСЛО(23,5)))
		|КОНЕЦ КАК ЗначениеЧисло";
	КонецЕсли;

	ЗапросДанныеРаскрытия.Текст=ЗапросДанныеРаскрытия.Текст+"
	|//////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	" + ТекстИтогПоЗначению + ",";
	
	Для каждого Реквизит Из МассивКлючевыхРеквизитов  Цикл
		
		ЗапросДанныеРаскрытия.Текст=ЗапросДанныеРаскрытия.Текст+"
		|	ЗначенияПоказателейОтчетов."+Реквизит+" КАК "+Реквизит+",";
	
	КонецЦикла; 
	
	ЗапросДанныеРаскрытия.Текст=ЗапросДанныеРаскрытия.Текст+"
	|	ЗначенияПоказателейОтчетов.ЭкземплярОтчета КАК ЭкземплярОтчета,
	|	ЗначенияПоказателейОтчетов.ДатаНачала КАК ДатаНачалаПериода,
	|	ЗначенияПоказателейОтчетов.Показатель,
	|	ЗначенияПоказателейОтчетов.Показатель.Строка КАК Строка,
	|	ЗначенияПоказателейОтчетов.Показатель.Колонка КАК Колонка,
	|	ЗначенияПоказателейОтчетов.Показатель.ЧисловойПоказатель КАК ЧисловойПоказатель,
	|	ЗначенияПоказателейОтчетов.Показатель.НеФинансовый КАК НеФинансовый,";
	
	Для Индекс=1 ПО (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		
		ЗапросДанныеРаскрытия.Текст=ЗапросДанныеРаскрытия.Текст+"
		|	ЗначенияПоказателейОтчетов.Аналитика"+Индекс+",";
		
	КонецЦикла;
		
	ЗапросДанныеРаскрытия.Текст=ЗапросДанныеРаскрытия.Текст+"		
	|	ЗначенияПоказателейОтчетов.Показатель.ВидКурса КАК ВидКурса
	|ПОМЕСТИТЬ "+ИмяТаблицы+"
	|ИЗ
	|	("+ТекстВложенногоЗапроса+") КАК ЗначенияПоказателейОтчетов	
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗначенияПоказателейОтчетов.ЭкземплярОтчета";
	
	Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
				
		ЗапросДанныеРаскрытия.Текст=ЗапросДанныеРаскрытия.Текст+",
		|	ЗначенияПоказателейОтчетов."+Реквизит;
	
	КонецЦикла; 
	ЗапросДанныеРаскрытия.Текст=ЗапросДанныеРаскрытия.Текст+",
	|	ЗначенияПоказателейОтчетов.Показатель,
	|	ЗначенияПоказателейОтчетов.ДатаНачала ";
	
	Для Индекс=1 ПО (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		
		ЗапросДанныеРаскрытия.Текст=ЗапросДанныеРаскрытия.Текст+",
		|	ЗначенияПоказателейОтчетов.Аналитика"+Индекс;
		
	КонецЦикла;
	
	Если ДанныеЗапроса.ТолькоЧисловые Тогда	
		
		ЗапросДанныеРаскрытия.Текст = ЗапросДанныеРаскрытия.Текст 
										+ "
										|ИМЕЮЩИЕ 
										|СУММА(ЗначенияПоказателейОтчетов.Значение)<>0
										|;";
	Иначе
		
		ЗапросДанныеРаскрытия.Текст = ЗапросДанныеРаскрытия.Текст 
										+ "
										|;";
		
	КонецЕсли;
					
КонецПроцедуры

Функция ПолучитьПоследниеВерсии(ЭкземплярыОтчетов = Неопределено, СписокВерсий = Неопределено)
	
	ЗапросПоследниеВерсии = Новый Запрос(
	"ВЫБРАТЬ
	|	ВерсииЗначенийПоказателей.Код КАК КодВерсии,
	|	ВерсииЗначенийПоказателей.Ссылка КАК Версия,
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета КАК ЭкземплярОтчета
	|ПОМЕСТИТЬ втСписокВерсий
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	НЕ ВерсииЗначенийПоказателей.ПометкаУдаления
	|	И ВерсииЗначенийПоказателей.Валюта = ВерсииЗначенийПоказателей.ЭкземплярОтчета.ОсновнаяВалюта
	|	И (ВерсииЗначенийПоказателей.Ссылка В (&СписокВерсий)
	|			ИЛИ ВерсииЗначенийПоказателей.ЭкземплярОтчета В (&ЭкземплярыОтчетов))	
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодВерсии,
	|	ЭкземплярОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыПоследнихВерсий.КодВерсии,
	|	КодыПоследнихВерсий.ЭкземплярОтчета,
	|	втСписокВерсий.Версия КАК Версия
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(втСписокВерсий.КодВерсии) КАК КодВерсии,
	|		втСписокВерсий.ЭкземплярОтчета КАК ЭкземплярОтчета
	|	ИЗ
	|		втСписокВерсий КАК втСписокВерсий
	|	
	|	СГРУППИРОВАТЬ ПО
	|		втСписокВерсий.ЭкземплярОтчета) КАК КодыПоследнихВерсий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписокВерсий КАК втСписокВерсий
	|		ПО КодыПоследнихВерсий.КодВерсии = втСписокВерсий.КодВерсии
	|			И КодыПоследнихВерсий.ЭкземплярОтчета = втСписокВерсий.ЭкземплярОтчета");	
	
	ЗапросПоследниеВерсии.УстановитьПараметр("ЭкземплярыОтчетов", ЭкземплярыОтчетов);
	ЗапросПоследниеВерсии.УстановитьПараметр("СписокВерсий", СписокВерсий);
	
	Возврат ЗапросПоследниеВерсии.Выполнить().Выгрузить().ВыгрузитьКолонку("Версия");
	
КонецФункции

Функция ЗаполнитьТаблицуПоказателей(СписокВерсий,МассивЭкземпляров)
	
	ТекстОтбор="";
	ИзмеренияАналитики1="";
	ИзмеренияАналитики2="";
		
	Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
		
		Если СтрАналитика.ЕстьРазворот Тогда
			
			ИзмеренияАналитики1=ИзмеренияАналитики1+"
			|НастраиваемыйОтчет."+СтрАналитика.КодАналитики+" КАК "+СтрАналитика.КодАналитики+",";
			ИзмеренияАналитики2=ИзмеренияАналитики1+"
			|ЭкземплярыОтчетов."+СтрАналитика.КодАналитики+" КАК "+СтрАналитика.КодАналитики+",";
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ИмяТаблицыСинтетики=УправлениеОтчетамиУХ.ВернутьИмяТаблицыСинтетики(МаксАналитикОтчета);
	
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ЭкземплярыОтчетов.ЭкземплярОтчета,";
	
	Для каждого Реквизит Из МассивКлючевыхРеквизитов  Цикл
		
		Запрос.Текст=Запрос.Текст+"
		|	ЭкземплярыОтчетов."+Реквизит+",";
		
	КонецЦикла; 
	
	Запрос.Текст=Запрос.Текст+"
	|"+ИзмеренияАналитики2+"
	|	ЭкземплярыОтчетов.Ссылка,
	|	ЭкземплярыОтчетов.Код,
	|	ЭкземплярыОтчетов.Строка,
	|	ЭкземплярыОтчетов.Колонка,
	|	ЭкземплярыОтчетов.ПорядковыйНомерКолонки,
	|	ЕСТЬNULL(ЗначенияПоказателей.ЗначениеЧисло, 0) КАК ЗначениеПоказателя,
	|	ЕСТЬNULL(ЗначенияПоказателей.ЗначениеЧисло, 0) КАК ЗначениеЧисло
	|ИЗ
	|	(ВЫБРАТЬ
	|		НастраиваемыйОтчет.Ссылка КАК ЭкземплярОтчета,";
	
	Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
		
		Запрос.Текст=Запрос.Текст+"
		|		НастраиваемыйОтчет."+Реквизит+" КАК "+Реквизит+",";
	
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|		"+ИзмеренияАналитики1+"
	|		ПоказателиОтчетов.Ссылка,
	|		ПоказателиОтчетов.Код КАК Код,
	|		ПоказателиОтчетов.Строка КАК Строка,
	|		ПоказателиОтчетов.Колонка КАК Колонка,
	|		ПоказателиОтчетов.Колонка.ПорядковыйНомер КАК ПорядковыйНомерКолонки
	|	ИЗ
	|		Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|			ПО НастраиваемыйОтчет.ВидОтчета = ПоказателиОтчетов.Владелец
	|	ГДЕ
	|		НастраиваемыйОтчет.Ссылка В(&МассивЭкземпляров)
	|		И (НЕ ПоказателиОтчетов.ПометкаУдаления)) КАК ЭкземплярыОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗначенияПоказателейОтчетов.Показатель КАК Показатель,
	|			СУММА(ЗначенияПоказателейОтчетов.Значение) КАК ЗначениеЧисло
	|		ИЗ
	|			РегистрСведений."+ИмяТаблицыСинтетики+" КАК ЗначенияПоказателейОтчетов
	|	ГДЕ
	|	(НЕ ЗначенияПоказателейОтчетов.Показатель.ПометкаУдаления)
	|	И ЗначенияПоказателейОтчетов.Версия В (&СписокВерсий)";	
	
	Если СписокПоказателиНеВБланке.Количество()>0 Тогда
		Запрос.Текст=Запрос.Текст+"			
		|И ЗначенияПоказателейОтчетов.Показатель НЕ В(&СписокПоказателиНеВБланке)";
		
		Запрос.УстановитьПараметр("СписокПоказателиНеВБланке",СписокПоказателиНеВБланке);
		
	КонецЕсли;
	Запрос.Текст=Запрос.Текст+"						
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЗначенияПоказателейОтчетов.Показатель) КАК ЗначенияПоказателей
	|		ПО ЭкземплярыОтчетов.Ссылка = ЗначенияПоказателей.Показатель";
	
	Если СписокПоказателиНеВБланке.Количество()>0 Тогда
		Запрос.Текст=Запрос.Текст+"			
		|ГДЕ ЭкземплярыОтчетов.Ссылка НЕ В(&СписокПоказателиНеВБланке)";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивЭкземпляров",МассивЭкземпляров);
	Запрос.УстановитьПараметр("СписокВерсий",СписокВерсий);

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ЗаполнитьТаблицуРаскрытия(СписокВерсий)
	
	ОтборПоказателей=Новый Соответствие;
	
	ТекстОтбор="";
	ИзмеренияАналитики1="";
	ИзмеренияАналитики2="";
	
	//////////////////////////////////////////////////////////////////////////////////////
	// ПОДГОТОВИМ ТЕКСТ ВЛОЖЕННОГО ЗАПРОСА ПО АНАЛИТИКАМ
	
	Если СписокПоказателиНеВБланке.Количество()>0 Тогда
		
		ОтборПоказателей.Вставить("#### НЕ В(&СписокПоказателиНеВБланке)",Новый Структура("СписокПоказателиНеВБланке",СписокПоказателиНеВБланке)); 
		
	КонецЕсли;
		
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",ВидОтчета);
	ДанныеЗапроса.Вставить("СписокВерсий",СписокВерсий);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",Ложь);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",Истина);
	
	Если ОтборПоказателей.Количество()>0 Тогда 
		ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
	КонецЕсли;
	
	ДанныеЗапроса.Вставить("МаксКоличествоАналитик",МаксАналитикОтчета+МаксАналитикПоказателя);	
	ДанныеЗапроса.Вставить("ТолькоЧисловые", Ложь);
	ДанныеЗапроса.Вставить("ГруппироватьЗначения",Истина);
	
	ДополнительныеПоля=Новый Соответствие;
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.ЭкземплярОтчета","ЭкземплярОтчета");
	
	Для каждого Реквизит Из МассивКлючевыхРеквизитов  Цикл
		
		ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей."+Реквизит,Реквизит);
		
	КонецЦикла; 
	
	ДанныеЗапроса.Вставить("ДополнительныеПоля",ДополнительныеПоля);
	ДанныеЗапроса.Вставить("ПоследниеВерсии", ПоследниеВерсии);
			
	СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	///////////////////////////////////////////////////////////////////////////////////////
	
	Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос=Новый Запрос;
		
	Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
		
		Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
		
	КонецЦикла;
	
	Запрос.Текст=СтруктураЗапроса.ТекстЗапроса;
	
	ТаблиыаРаскрытий=Запрос.Выполнить().Выгрузить();
	
	МассивКУдалению=ТаблиыаРаскрытий.НайтиСтроки(Новый Структура("Значение",0));
	
	Для Каждого СтрРаскрытие ИЗ МассивКУдалению Цикл
		
		ТаблиыаРаскрытий.Удалить(СтрРаскрытие);
		
	КонецЦикла;
	
	Возврат ТаблиыаРаскрытий;
	
КонецФункции

Функция ПолучитьПоказателиВВалютеОтображения(ОсновнаяВалюта,ТаблицаПоказателей)
	
	Для Каждого Пок Из ТаблицаПоказателей Цикл // для каждого показателя
		
		Если НЕ Пок.НеФинансовый Тогда // 
			
			ДатаКурса = Пок.ДатаНачалаПериода;		
			Пок.ЗначениеЧисло = УправлениеРабочимиПроцессамиУХ.ПересчитатьПоКурсу(Пок.ЗначениеЧисло, ОсновнаяВалюта, ВалютаОтображения, Пок.ВидКурса, Пок.Сценарий, Пок.ПериодОтчета, ДатаКурса);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПоказателей;
		
КонецФункции // ПолучитьПоказателиВВалютеОтображения()

Процедура ДобавитьПодчиненныеГруппы(СтрокаДерева,РабочаяТаблица,РабочаяКолонка)
	
	СтруктураПоиска=Новый Структура("Родитель",СтрокаДерева[РабочаяКолонка]);
	
	ПодчиненныеСтроки=РабочаяТаблица.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого Строка ИЗ ПодчиненныеСтроки Цикл
		
		ТекСтрокаДерева=СтрокаДерева.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ТекСтрокаДерева,Строка);
		
		ДобавитьПодчиненныеГруппы(ТекСтрокаДерева,РабочаяТаблица,РабочаяКолонка);
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьПодчиненныеГруппы()

Процедура ДобавитьРодителя(ТекСтрока,РабочаяТаблица,РабочаяКолонка,ЗНАЧ ТекущийИндекс,РабочийИндекс)
	
	ТекРодитель=КэшРодителей.Получить(ТекСтрока[РабочаяКолонка]);
	
	Если Не ТекРодитель=Неопределено Тогда
		
		ТекСтрока.Родитель=ТекРодитель;
		
		Если ЗначениеЗаполнено(ТекРодитель) И РабочаяТаблица.Найти(ТекРодитель,РабочаяКолонка)=Неопределено Тогда
			
			НоваяСтрока=РабочаяТаблица.Вставить(ТекущийИндекс);
			НоваяСтрока[РабочаяКолонка]=ТекРодитель;
			РабочийИндекс=РабочийИндекс+1;
			
			НоваяСтрока.ИмяГруппировки=РабочаяКолонка+"_Родитель_"+(РабочийИндекс-ТекущийИндекс);
				
			ДобавитьРодителя(НоваяСтрока,РабочаяТаблица,РабочаяКолонка,ТекущийИндекс,РабочийИндекс);

		КонецЕсли;
					
	КонецЕсли;
			
КонецПроцедуры // ДобавитьРодителя()

Процедура ДобавитьЗначенияГрупп(РабочаяТаблица,РабочаяКолонка)
	
	Индекс=0;
	
	Пока Индекс<=Рабочаятаблица.Количество()-1 Цикл
		
		ТекСтрока=РабочаяТаблица[Индекс];
		
		ДобавитьРодителя(ТекСтрока,РабочаяТаблица,РабочаяКолонка,Индекс,Индекс);
		
		Индекс=Индекс+1;
		
	КонецЦикла;	
	
КонецПроцедуры // ДобавитьЗначенияГрупп()

Функция ЕстьВычисляемыеКолонки()
	
	Для Каждого Колонка Из ГруппировкиВычисляемыеКолонки Цикл
		
		Если Колонка.Отображать Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Ложь;	
	
КонецФункции // ЕстьВычисляемыеКолонки()

Процедура ОтобразитьКомментарии(ТабКомментарии)
	
	ТекстСвязи="";
	ТекстИндекс="";
	КолонокИндекса=0;
	
	Для Каждого Группировка ИЗ ГруппировкиСтроки Цикл
		
		ТекстСвязи=ТекстСвязи+"
		|И ТабКомментарииСвод."+Группировка.Группировка+" = ТаблицаКоординат."+Группировка.Группировка;
		
		ЧислоКолонокИндекса=?(СтрНайти(Группировка.Группировка,"Аналитика")>0,3,1);
		
		Если (КолонокИндекса+ЧислоКолонокИндекса)<=16 Тогда 
			
			ТекстИндекс=ТекстИндекс+","+Группировка.Группировка;
			КолонокИндекса=КолонокИндекса+ЧислоКолонокИндекса;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Группировка ИЗ ГруппировкиКолонки Цикл
		
		ТекстСвязи=ТекстСвязи+"
		|И ТабКомментарииСвод."+Группировка.Группировка+" = ТаблицаКоординат."+Группировка.Группировка;
		
		ЧислоКолонокИндекса=?(СтрНайти(Группировка.Группировка,"Аналитика")>0,3,1);
		
		Если (КолонокИндекса+ЧислоКолонокИндекса)<=16 Тогда 
			
			ТекстИндекс=ТекстИндекс+","+Группировка.Группировка;
			КолонокИндекса=КолонокИндекса+ЧислоКолонокИндекса;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ТекстВТ="ВЫБРАТЬ *
	|Поместить ТабКомментарии
	|ИЗ &ТабКомментарии КАК ТабКомментарии
	|ИНДЕКСИРОВАТЬ ПО Показатель
	|;
	|ВЫБРАТЬ ТабКомментарии.*,
	|СтрокаКолонка.Строка КАК Строка,
	|СтрокаКолонка.Колонка КАК Колонка
	|ПОМЕСТИТЬ ТабКомментарииСвод
	|ИЗ
	|ТабКомментарии КАК ТабКомментарии
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтрокаКолонка КАК СтрокаКолонка
	|ПО ТабКомментарии.Показатель=СтрокаКолонка.Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ";
	
	Для Каждого Колонка ИЗ ТабКомментарии.Колонки Цикл
		ТекстВТ=ТекстВТ+"
		|ТабКомментарииБаза."+Колонка.Имя+",";
		
	КонецЦикла;
	
	ТекстВТ=ТекстВТ+"
	|ТабКомментарииБаза.Строка,
	|ТабКомментарииБаза.Колонка
	|ИЗ ТабКомментарииБаза КАК ТабКомментарииБаза
	|ГДЕ (НЕ ТабКомментарииБаза.ЭкземплярОтчета В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЭкземплярОтчета ИЗ ТабКомментарии КАК ТабКомментарии))
	|ИНДЕКСИРОВАТЬ ПО "+Сред(ТекстИндекс,2)+"
	|;
	|ВЫБРАТЬ
	|ТаблицаКоординат.НомерСтроки,
	|ТаблицаКоординат.НомерКолонки,
	|ТабКомментарииСвод.Комментарий
	|ИЗ ТабКомментарииСвод КАК ТабКомментарииСвод
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабКоординатыОбщ КАК ТаблицаКоординат
	|ПО "+Сред(ТекстСвязи,3)+"
	|И НЕ ТаблицаКоординат.Раскрытие";
		
	ЗапросКоординаты.Текст=ТекстВТ;
	ЗапросКоординаты.УстановитьПараметр("ТабКомментарии",ТабКомментарии);
	ЗапросКоординаты.УстановитьПараметр("мПоказателиЭталон",мПоказателиЭталон);
	
	Результат=ЗапросКоординаты.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл

		ТекОбласть=ТабДок.Область(Результат.НомерСтроки,Результат.НомерКолонки,Результат.НомерСтроки,Результат.НомерКолонки);
		ТекОбласть.Примечание.Текст=Результат.Комментарий;
		
	КонецЦикла;
	
	ЗапросКоординаты.Текст="Уничтожить ТабКомментарии
	|;
	|Уничтожить ТабКомментарииСвод
	|;";
	
	ЗапросКоординаты.Выполнить();
			
КонецПроцедуры // ОтобразитьКомментарии()

Процедура ОбновитьИтогиПоГруппировке(Выборка,ТекУровень,ТаблицаИтогов,СписокГруппировокИерархии)
	
	Пока Выборка.Следующий() Цикл
				
		ИмяГруппировки=Выборка.Группировка();
		ТекУровеньСтрока=МассивГруппировокСтрокИтог.Найти(ИмяГруппировки)+1;
		
		ТекЭлемент=Выборка[ИмяГруппировки];
		
		Если СписокГруппировокИерархии.Количество()>0 Тогда
			
			Если СтруктураГруппировокИерархия.Свойство(ИмяГруппировки) ИЛИ СтрНайти(ИмяГруппировки,"_Родитель_")>0 Тогда
				
				ВерхнийУровеньИерархии=ОпределитьВерхнийУровеньИерархии(ИмяГруппировки,СписокГруппировокИерархии);
				
				Если НЕ (ВерхнийУровеньИерархии=Неопределено ИЛИ ПроверитьКорректностьРодителя(ТекЭлемент,ВерхнийУровеньИерархии.Значение)) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекЭлемент) Тогда
			
			НачалоКолонок=ПерваяКолонка;
			РазвернутьСтроку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[0],"Все"),0,ТекУровеньСтрока,ТаблицаИтогов,НачалоКолонок);
			
		КонецЕсли;
		
		Если ТекУровень+1<=МассивГруппировокСтрокИтог.Количество()-2 Тогда
			
			Если ЕстьВыводИерархии Тогда
				
				Если СтрНайти(ИмяГруппировки,"_Родитель_")>0 Тогда
					
					Если СписокГруппировокИерархии=Неопределено Тогда
						
						СписокГруппировокИерархии=Новый СписокЗначений;
						
					КонецЕсли;
					
					СписокГруппировокИерархии.Вставить(0,Выборка[ИмяГруппировки],ИмяГруппировки);
					
				КонецЕсли;
				
			Иначе
				
				СписокГруппировокИерархии=Новый СписокЗначений;
				
			КонецЕсли;
			
			ОбновитьИтогиПоГруппировке(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокСтрокИтог[ТекУровень+1],"Все"),ТекУровень+1,ТаблицаИтогов,СписокГруппировокИерархии);
			
		ИначеЕсли ТекУровень+1=МассивГруппировокСтрокИтог.Количество()-1  Тогда
				
			ОбновитьРаскрытиеПоГруппировке(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,,"Все"),Выборка[ИмяГруппировки],ТекУровеньСтрока,ТаблицаИтогов);
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Если (Не ИмяГруппировки=Неопределено) И (СтруктураГруппировокИерархия.Свойство(ИмяГруппировки) ИЛИ СтрНайти(ИмяГруппировки,"_Родитель_")>0) И СписокГруппировокИерархии.Количество()>0 Тогда
		
		ВерхнийУровеньИерархии=ОпределитьВерхнийУровеньИерархии(ИмяГруппировки,СписокГруппировокИерархии);
		
		Если Не ВерхнийУровеньИерархии=Неопределено Тогда
			
			СписокГруппировокИерархии.Удалить(ВерхнийУровеньИерархии);
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры // ОбновитьИтогиПоГруппировке()

Процедура ОбновитьРаскрытиеПоГруппировке(Выборка,ВладелецГруппы,ТекУровеньСтрока,ТаблицаИтогов);
	
	Если Выборка.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
		
	Пока Выборка.Следующий() Цикл
		
		ИндексАналитики=Выборка.ИндексАналитики;
		
		Если ИндексАналитики="" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекУровеньСтрока=МассивГруппировокСтрокИтог.Найти("ИндексАналитики")+1;
		
		НачалоКолонок=ПерваяКолонка;
		РазвернутьСтрокуАналитики(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[0],"Все"),0,ТаблицаИтогов,НачалоКолонок);
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиРаскрытие()

Процедура ОбновитьЗначенияВТаблице(ЗапросИтоги)
	
	// получим таблицу измененных показателей и итогов
	ТаблицаИтогов=ШаблонКоординаты.СкопироватьКолонки();
	ТаблицаИтогов.Колонки.Добавить("ЗначениеПоказателяЧисло",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ТаблицаИтогов.Колонки.Добавить("ЗначениеРаскрытияЧисло",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	
	ОбновитьИтогиПоГруппировке(ЗапросИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокСтрокИтог[0],"Все"),0,ТаблицаИтогов,Новый СписокЗначений);
	
	ТекстВыборкаГруппировокИтоги="";
	ТекстВыборкаГруппировокКоординаты="";
	ТекстСвязи="";
	
	Если УправляемыйРежим И (НЕ ТаблицаКоординатПомещенаВЗапрос) Тогда
		
		ЗапросКоординаты.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		ТекстВТ="ВЫБРАТЬ *
		|Поместить ТабКоординатыОбщ
		|ИЗ &ТабКоординатыОбщ КАК ТабКоординатыОбщ
		|;
		|ВЫБРАТЬ";
		
		ЗапросКоординаты.УстановитьПараметр("ТабКоординатыОбщ",ТабКоординатыОбщ);
		
	Иначе
		
		// Поместим для обработки общую таблицу итогов	
		ТекстВТ = "ВЫБРАТЬ";
		
	КонецЕсли;
	
	Для Каждого Группировка ИЗ МассивГруппировокСтрокИтог Цикл
		
		Если НЕ Группировка="ИндексАналитики" Тогда 
			
			ТекстСвязи=ТекстСвязи+"
			|И ТаблицаИтогов."+Группировка+" = ТаблицаКоординат."+Группировка;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Группировка ИЗ МассивГруппировокКолонокИтог Цикл
		
		ТекстСвязи=ТекстСвязи+"
		|И ТаблицаИтогов."+Группировка+" = ТаблицаКоординат."+Группировка;
		
	КонецЦикла;	
	
		
	Для Каждого Группировка ИЗ ГруппировкиСтроки Цикл
		
		Если Группировка.Группировка="Строка" ИЛИ Найти(Группировка.Группировка,"Аналитика")>0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекстВТ=ТекстВТ+"
		|ISNULL(ТаблицаИтогов."+Группировка.Группировка+",ЗНАЧЕНИЕ(Справочник."+СправочникиГруппировок[Группировка.Группировка]+".ПустаяСсылка)) КАК "+Группировка.Группировка+",";
		
		Если ЕстьВыводИерархии И СтруктураГруппировокИерархия.Свойство(Группировка.Группировка) Тогда
			
			Для Каждого СтрИерархия ИЗ СтруктураГруппировокИерархия[Группировка.Группировка] Цикл
										
				Если СтрИерархия.ВыводитьИтоги Тогда
					
					ТекстВТ=ТекстВТ+"
					|ISNULL(ТаблицаИтогов."+СтрИерархия.ПсевдонимПоля+",ЗНАЧЕНИЕ(Справочник."+СправочникиГруппировок[Группировка.Группировка]+".ПустаяСсылка)) КАК "+СтрИерархия.ПсевдонимПоля+",";
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Группировка ИЗ ГруппировкиКолонки Цикл
		
		Если Группировка.Группировка="Колонка" ИЛИ Найти(Группировка.Группировка,"Аналитика")>0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекстВТ=ТекстВТ+"
		|ISNULL(ТаблицаИтогов."+Группировка.Группировка+",ЗНАЧЕНИЕ(Справочник."+СправочникиГруппировок[Группировка.Группировка]+".ПустаяСсылка)) КАК "+Группировка.Группировка+",";
		
		Если ЕстьВыводИерархии И СтруктураГруппировокИерархия.Свойство(Группировка.Группировка) Тогда
			
			Для Каждого СтрИерархия ИЗ СтруктураГруппировокИерархия[Группировка.Группировка] Цикл
										
				Если СтрИерархия.ВыводитьИтоги Тогда
					
					ТекстВТ=ТекстВТ+"
					|ISNULL(ТаблицаИтогов."+СтрИерархия.ПсевдонимПоля+",ЗНАЧЕНИЕ(Справочник."+СправочникиГруппировок[Группировка.Группировка]+".ПустаяСсылка)) КАК "+СтрИерархия.ПсевдонимПоля+",";
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
			
	Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
		
		Если СтрАналитика.ЕстьРазворот Тогда
			
			ТекстВТ=ТекстВТ+"
			|ISNULL(ТаблицаИтогов."+СтрАналитика.КодАналитики+",НЕОПРЕДЕЛЕНО) КАК "+СтрАналитика.КодАналитики+",";
			
		КонецЕсли;
		
		Если ЕстьВыводИерархии И СтруктураГруппировокИерархия.Свойство(СтрАналитика.КодАналитики) Тогда
			
			Для Каждого СтрИерархия ИЗ СтруктураГруппировокИерархия[СтрАналитика.КодАналитики] Цикл
										
				Если СтрИерархия.ВыводитьИтоги Тогда
					
					ТекстВТ=ТекстВТ+"
					|ISNULL(ТаблицаИтогов."+СтрИерархия.ПсевдонимПоля+",ЗНАЧЕНИЕ(Справочник."+СправочникиГруппировок[СтрАналитика.КодАналитики]+".ПустаяСсылка)) КАК "+СтрИерархия.ПсевдонимПоля+",";
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстВТ=ТекстВТ+"
	|ISNULL(ТаблицаИтогов.ИндексАналитики,"""") КАК ИндексАналитики,
	|ТаблицаИтогов.Строка КАК Строка,
	|ТаблицаИтогов.Колонка КАК Колонка,
	|ТаблицаИтогов.ЗначениеПоказателяЧисло КАК ЗначениеПоказателяЧисло,
	|ТаблицаИтогов.ЗначениеРаскрытияЧисло КАК ЗначениеРаскрытияЧисло
	|ПОМЕСТИТЬ ТаблицаИтогов ИЗ &ТаблицаИтогов КАК ТаблицаИтогов
	|;";
	ЗапросКоординаты.УстановитьПараметр("ТаблицаИтогов", ТаблицаИтогов);
			
	ТекстВТ=ТекстВТ+"
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|ТаблицаКоординат.НомерСтроки,
	|ТаблицаКоординат.ЭкземплярОтчета,
	|ТаблицаКоординат.НомерКолонки,
	|ТаблицаКоординат.Раскрытие,
	|ТаблицаИтогов.ЗначениеПоказателяЧисло,
	|ТаблицаИтогов.ЗначениеРаскрытияЧисло
	|ИЗ ТаблицаИтогов КАК ТаблицаИтогов
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабКоординатыОбщ КАК ТаблицаКоординат
	|ПО ТаблицаИтогов.ИндексАналитики=ТаблицаКоординат.ИндексАналитики"+ТекстСвязи;
	
	ЗапросКоординаты.Текст=ТекстВТ;
		
	РучноеИзменениеСтрока=?(ОбластьРучногоИзменения=Неопределено,0,ОбластьРучногоИзменения.Верх);
	РучноеИзменениеКолонка=?(ОбластьРучногоИзменения=Неопределено,0,ОбластьРучногоИзменения.Лево);
	МассивИзмененныхОбластей=Новый Массив;
		
	Результат=ЗапросКоординаты.Выполнить().Выбрать();

	Пока Результат.Следующий() Цикл
		
		Если (Результат.НомерСтроки=РучноеИзменениеСтрока 
			И Результат.НомерКолонки=РучноеИзменениеКолонка)	
			ИЛИ Результат.НомерСтроки=0
			ИЛИ Результат.НомерКолонки=0 Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		ЗначениеИзменения=?(Результат.Раскрытие,Результат.ЗначениеРаскрытияЧисло,Результат.ЗначениеПоказателяЧисло);
		
		Если ВыводитьВДерево Тогда
			
			СтрДерева=ТабДерево.Строки.Найти(Результат.НомерСтроки,"НомерСтроки",Истина);
			
			Если СтрДерева=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеЧислоТекущее = СтрДерева[Результат.НомерКолонки-1];
			ЗначениеЧислоТекущее = ?(ЗначениеЧислоТекущее=Неопределено, 0, ЗначениеЧислоТекущее);
			СтрДерева[Результат.НомерКолонки-1] = ЗначениеЧислоТекущее + ЗначениеИзменения / ТекущийДелитель;
	
			Если УправляемыйРежим Тогда
				
				СтруктураЯчейка=Новый Структура;	
				
				СтруктураЯчейка.Вставить("АдресСтроки",ПолучитьАбсолютныйАдресСтрокиДерева(СтрДерева,ТабДерево));
				СтруктураЯчейка.Вставить("АдресКолонки",Результат.НомерКолонки-1);
				СтруктураЯчейка.Вставить("Значение",СтрДерева[Результат.НомерКолонки-1]);
				СтруктураЯчейка.Вставить("ЭкземплярОтчета",Результат.ЭкземплярОтчета);
				МассивИзмененныхОбластей.Добавить(СтруктураЯчейка);
				
			КонецЕсли;
			
			ОбновитьВычисляемыеЯчейкиДерева(Результат.НомерСтроки);
			
		Иначе
			
			Если Результат.НомерКолонки=0 ИЛИ Результат.НомерСтроки=0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекОбласть=ТабДок.Область(Результат.НомерСтроки,Результат.НомерКолонки,Результат.НомерСтроки,Результат.НомерКолонки);							
			ТекОбласть.Значение=ТекОбласть.Значение+ЗначениеИзменения/ТекущийДелитель;
			
			Если УправляемыйРежим Тогда
				
				СтруктураЯчейка=Новый Структура;
				СтруктураЯчейка.Вставить("Верх",Результат.НомерСтроки);
				СтруктураЯчейка.Вставить("Лево",Результат.НомерКолонки);
				СтруктураЯчейка.Вставить("Значение",ТекОбласть.Значение);
				
				МассивИзмененныхОбластей.Добавить(СтруктураЯчейка);
				
			КонецЕсли;
			
			ОбновитьВычисляемыеЯчейки(Результат.НомерСтроки);
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	ЗапросКоординаты.Текст="Уничтожить ТаблицаИтогов";
	
	Если УправляемыйРежим И (НЕ ТаблицаКоординатПомещенаВЗапрос) Тогда
		ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"
		|;
		|Уничтожить ТабКоординатыОбщ";
		
		ТаблицаКоординатПомещенаВЗапрос=Ложь;
		
	КонецЕсли;
	
	ЗапросКоординаты.Выполнить();
	
КонецПроцедуры // ОбновитьЗначенияВТаблице() 

Процедура ОпределитьПутьДоКорняДерева(СтрокаДерева,ДеревоЗначений,МассивАдресов);
	
	  Если СтрокаДерева.Родитель=Неопределено Тогда
		
		МассивАдресов.Вставить(0,ДеревоЗначений.Строки.Индекс(СтрокаДерева));
		Возврат 
		
	Иначе
		
		МассивАдресов.Вставить(0,СтрокаДерева.Родитель.Строки.Индекс(СтрокаДерева));
		ОпределитьПутьДоКорняДерева(СтрокаДерева.Родитель,ДеревоЗначений,МассивАдресов);
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьПутьДоКорняДерева() 

Функция ПолучитьАбсолютныйАдресСтрокиДерева(СтрокаДерева,ДеревоЗначений) Экспорт
	
	МассивАдресов=Новый Массив;
	
	ОпределитьПутьДоКорняДерева(СтрокаДерева,ДеревоЗначений,МассивАдресов);
	
	Возврат МассивАдресов;
			
КонецФункции // ПолучитьАбсолютныйАдресСтрокиДерева() 

Функция ПолучитьИзмененныеПоказателиРаскрытия(ТекЭкземплярОтчета)
	
	ОтчетОбъект=ТекЭкземплярОтчета.ОтчетОбъект;	
	НомерОперации=ОтчетОбъект.НомерТекущейОперации;
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ	
	|ЛогИзмененийРаскрытийПоказателей.Показатель,";
	
	Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		
		Запрос.Текст=Запрос.Текст+"		
		|ЛогИзмененийРаскрытийПоказателей.Аналитика"+ИндексАналитики+" КАК Аналитика"+ИндексАналитики+",";
		
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|ЛогИзмененийРаскрытийПоказателей.ДобавлениеАналитики КАК ДобавлениеАналитики,
	|ЛогИзмененийРаскрытийПоказателей.СторнированиеАналитики КАК СторнированиеАналитики
	|ПОМЕСТИТЬ ИзмененныеПоказателиРаскрытия
	|ИЗ &ЛогИзмененийРаскрытийПоказателей КАК ЛогИзмененийРаскрытийПоказателей
	|ГДЕ 
	|ЛогИзмененийРаскрытийПоказателей.НомерОперации = &НомерОперации
	|;
	|ВЫБРАТЬ
	|&ЭкземплярОтчета КАК ЭкземплярОтчета,
	|СводноеИзменениеАналитики.Показатель,";
	
	Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		
		Запрос.Текст=Запрос.Текст+"		
		|СводноеИзменениеАналитики.Аналитика"+ИндексАналитики+" КАК Аналитика"+ИндексАналитики+",";
		
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|СУММА(СводноеИзменениеАналитики.ИндексОперации) КАК ИндексОперации
	|ИЗ
	|(
	|ВЫБРАТЬ	
	|СторнированныеАналитики.Показатель,";
	
	Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		
		Запрос.Текст=Запрос.Текст+"		
		|СторнированныеАналитики.Аналитика"+ИндексАналитики+" КАК Аналитика"+ИндексАналитики+",";
		
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|-1 КАК ИндексОперации
	|ИЗ ИзмененныеПоказателиРаскрытия КАК СторнированныеАналитики
	|ГДЕ СторнированныеАналитики.СторнированиеАналитики
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ	
	|НовыеАналитики.Показатель,";
	
	Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		
		Запрос.Текст=Запрос.Текст+"		
		|НовыеАналитики.Аналитика"+ИндексАналитики+" КАК Аналитика"+ИндексАналитики+",";
		
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|1 КАК ИндексОперации
	|ИЗ ИзмененныеПоказателиРаскрытия КАК НовыеАналитики
	|ГДЕ НовыеАналитики.ДобавлениеАналитики) КАК СводноеИзменениеАналитики
	|СГРУППИРОВАТЬ ПО
	|СводноеИзменениеАналитики.Показатель";
	
	Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		
		Запрос.Текст=Запрос.Текст+",		
		|СводноеИзменениеАналитики.Аналитика"+ИндексАналитики;
		
	КонецЦикла;	
	
	Запрос.Текст=Запрос.Текст+"
	|ИМЕЮЩИЕ СУММА(СводноеИзменениеАналитики.ИндексОперации)<>0"; 

	Запрос.УстановитьПараметр("НомерОперации",НомерОперации);
	Запрос.УстановитьПараметр("ЭкземплярОтчета",ТекЭкземплярОтчета.ЭкземплярОтчета);

	Запрос.УстановитьПараметр("ЛогИзмененийРаскрытийПоказателей",ОтчетОбъект.ЛогИзмененийРаскрытийПоказателей);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции // ПолучитьИзмененныеПоказателиРаскрытия 

Процедура РазгруппироватьСтрокиДокумента()
	
	СохранитьРаскрытыеГруппы();
	
	Для Каждого СтрРаскрытие ИЗ ТабРаскрытиеГруппСтроки Цикл
		
		ОбластьОбработки=ТабДок.Область("R"+Формат((СтрРаскрытие.НачалоГруппы),"ЧГ=0")+":R"+Формат(СтрРаскрытие.КонецГруппы,"ЧГ=0"));	
		ОбластьОбработки.Видимость=Истина;	
		ОбластьОбработки.Разгруппировать();
		
	КонецЦикла;
	
	СтрокиРазгруппированы=Истина;
	
КонецПроцедуры // РазгруппироватьСтрокиДокумента()

Процедура СгруппироватьСтрокиДокумента()
	
	Для Каждого СтрРаскрытие ИЗ ТабРаскрытиеГруппСтроки Цикл
		
		Если СтрРаскрытие.УровеньГруппировки=УровеньСтрока Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьОбработки=ТабДок.Область("R"+Формат((СтрРаскрытие.НачалоГруппы),"ЧГ=0")+":R"+Формат(СтрРаскрытие.КонецГруппы,"ЧГ=0"));		
		ОбластьОбработки.Сгруппировать();
		ОбластьОбработки.Видимость=Истина;
		
	КонецЦикла;
	
КонецПроцедуры // СгруппироватьСтрокиДокумента() 

Функция ДобавитьСтрокиРаскрытия(СтрокиКДобавлению)
	
	ДобавленоСтрок=0;
	ТабКоординатыНов=ШаблонКоординаты.СкопироватьКолонки();
	СтрокиКДобавлению.Колонки.Добавить("НомерСтрокиНов",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
	
	ТекстОбновление="";
	ТекстОбновлениеНачалоГруппы="";
	ТекстОбновлениеКонецГруппы="";
	ТекстВыбор="";
		
	МассивОбработанныхСтрок=Новый Массив;
	СоответствиеСтрокАналитик=Новый Соответствие;
	
	Для Каждого СтрАналитика ИЗ СтрокиКДобавлению Цикл
		
		Если (НЕ ЗначениеЗаполнено(СтрАналитика.ЭкземплярОтчета)) ИЛИ ЗначениеЗаполнено(СтрАналитика.ИндексАналитикиТек)
			ИЛИ СтрАналитика.НомерСтроки=0 Тогда
			Продолжить;
		КонецЕсли;
		
		НомерДобавленнойСтроки = СоответствиеСтрокАналитик.Получить(XMLString(СтрАналитика.Строка)+"_"+СтрАналитика.ИндексАналитикиНов);
		
		Если НомерДобавленнойСтроки=Неопределено Тогда // Вставляем новую строку
			
			Если Не СтрокиРазгруппированы Тогда
				РазгруппироватьСтрокиДокумента();
			КонецЕсли;
			
			НомерСтроки=СтрАналитика.НомерСтроки+ДобавленоСтрок;
			НомерСтрокиНов=СтрАналитика.НомерСтроки+ДобавленоСтрок+1;
			СтрАналитика.НомерСтрокиНов=НомерСтрокиНов;
			
			МассивОбработанныхСтрок.Добавить(СтрАналитика.НомерСтроки);
			
			ТекстОбновление=СтрЗаменить(ТекстОбновление,"##", " И ТабКоординатыОбщ.НомерСтроки<="+Формат(СтрАналитика.НомерСтроки,"ЧГ=0")); 
			ТекстОбновлениеНачалоГруппы=СтрЗаменить(ТекстОбновлениеНачалоГруппы,"##", " И ТабРаскрытиеГруппСтроки.НачалоГруппы<="+Формат(СтрАналитика.НомерСтроки,"ЧГ=0"));
			ТекстОбновлениеКонецГруппы=СтрЗаменить(ТекстОбновлениеКонецГруппы,"##", " И ТабРаскрытиеГруппСтроки.НачалоГруппы<="+Формат(СтрАналитика.НомерСтроки,"ЧГ=0"));
			
			////////////////////////////////////////////////////////////////////////////////////////////
			// Определим признак видимости группы
			
			НоваяГруппа=Ложь;
			
			СтруктураПоиска=Новый Структура;
			
			Для Каждого Группировка ИЗ ГруппировкиСтроки Цикл
				
				СтруктураПоиска.Вставить(Группировка.Группировка,СтрАналитика[Группировка.Группировка]);
				
			КонецЦикла;
			
			МассивГруппа=ТабРаскрытиеГруппСтроки.НайтиСтроки(СтруктураПоиска);
			
			Если МассивГруппа.Количество()=0 Тогда
				
				СтрГруппа=ТабРаскрытиеГруппСтроки.Добавить();
				Для Каждого Группировка ИЗ ГруппировкиСтроки Цикл
					СтрГруппа[Группировка.Группировка]=СтруктураПоиска[Группировка.Группировка];
				КонецЦикла;
				СтрГруппа.НачалоГруппы=НомерСтрокиНов;
				СтрГруппа.КонецГруппы=0;
				СтрГруппа.Раскрыта=Истина;
				СтрГруппа.УровеньГруппировки=ГруппировкиСтроки.Количество()+1;
				
				НоваяГруппа=Истина;
				
			Иначе
				
				СтрГруппа=МассивГруппа[0]; 
				СтрГруппа.НачалоГруппы=СтрГруппа.НачалоГруппы+ДобавленоСтрок;
				
			КонецЕсли;
			
			СтрГруппа.КонецГруппы=?(СтрГруппа.КонецГруппы=0,СтрГруппа.НачалоГруппы,СтрГруппа.КонецГруппы+ДобавленоСтрок+1);
			СтрГруппа.ДобавленаВручную=Истина;
			
			/////////////////////////////////////////////////////////////////////////////////
			
			
			ТабДок.ВставитьОбласть(ТабДок.Область("R"+Формат(НомерСтроки,"ЧГ=0")),ТабДок.Область("R"+Формат(НомерСтрокиНов,"ЧГ=0")),ТипСмещенияТабличногоДокумента.ПоВертикали);
			
			//Если НоваяГруппа Тогда
			//	ТабДок.Область(НомерСтрокиНов,,НомерСтрокиНов,).Сгруппировать();
			//КонецЕсли;
			
			Если НЕ СтрАналитика.Раскрытие Тогда // Необходимо разъединить объединенные ячейки
				
				ОбластьАналитики=ТабДок.Область(НомерСтрокиНов,2,НомерСтрокиНов,1+МаксАналитикПоказателя);
				ОбластьАналитики.Разъединить();
				
			КонецЕсли;
			
			Для Индекс=1 По МаксАналитикПоказателя Цикл
				
				ОбластьАналитики=ТабДок.Область(НомерСтрокиНов,Индекс+1,НомерСтрокиНов,Индекс+1);
				
				Если НЕ СтрАналитика.Раскрытие Тогда
					ОбластьАналитики.Шрифт=Новый Шрифт(ОбластьАналитики.Шрифт,,,,Истина);
					ОбластьАналитики.ГраницаСверху=ОбластьГруппировкиСтрокаРаскрытие.ТекущаяОбласть.ГраницаСверху;
					ОбластьАналитики.ГраницаСлева=ОбластьГруппировкиСтрокаРаскрытие.ТекущаяОбласть.ГраницаСлева;
					ОбластьАналитики.ГраницаСправа=ОбластьГруппировкиСтрокаРаскрытие.ТекущаяОбласть.ГраницаСправа;
					ОбластьАналитики.ГраницаСнизу=ОбластьГруппировкиСтрокаРаскрытие.ТекущаяОбласть.ГраницаСнизу;
				КонецЕсли;		
				
				ОбластьАналитики.Текст=СтрАналитика["Аналитика"+(МаксАналитикОтчета+Индекс)+"Нов"];
				
			КонецЦикла;
			
			Для Индекс=(2+МаксАналитикПоказателя) По (ПоследняяКолонка) Цикл
				
				ОбластьОчистки=ТабДок.Область(НомерСтрокиНов,Индекс,НомерСтрокиНов,Индекс);
				
				Если НЕ СтрАналитика.Раскрытие Тогда
					ОбластьОчистки.Шрифт=Новый Шрифт(ОбластьОчистки.Шрифт,,,,Истина);
					
					Если Индекс<=ПоследняяКолонка-1 Тогда
						
						ОбластьОчистки.ГраницаСверху=ОбластьГруппировкиПоказательРаскрытие.ТекущаяОбласть.ГраницаСверху;
						ОбластьОчистки.ГраницаСлева=ОбластьГруппировкиПоказательРаскрытие.ТекущаяОбласть.ГраницаСлева;
						ОбластьОчистки.ГраницаСправа=ОбластьГруппировкиПоказательРаскрытие.ТекущаяОбласть.ГраницаСправа;
						ОбластьОчистки.ГраницаСнизу=ОбластьГруппировкиПоказательРаскрытие.ТекущаяОбласть.ГраницаСнизу;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ ОбластьОчистки.СодержитЗначение Тогда
					ОбластьОчистки.СодержитЗначение=Истина;
					ОбластьОчистки.ТипЗначения=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5);
					ОбластьОчистки.Формат="ЧЦ=18; ЧДЦ="+ТекущаяТочность;
				КонецЕсли;
				
				ОбластьОчистки.Значение=0;
				
			КонецЦикла;
			
			ДобавленоСтрок=ДобавленоСтрок+1;
			
			ТекстОбновление=ТекстОбновление+"
			|Когда ТабКоординатыОбщ.НомерСтроки>"+Формат(СтрАналитика.НомерСтроки,"ЧГ=0")+"##"+"
			|Тогда (ТабКоординатыОбщ.НомерСтроки+"+Формат(ДобавленоСтрок,"ЧГ=0")+")";
			
			ТекстОбновлениеНачалоГруппы=ТекстОбновлениеНачалоГруппы+"
			|Когда ТабРаскрытиеГруппСтроки.НачалоГруппы>"+Формат(СтрАналитика.НомерСтроки,"ЧГ=0")+"##"+"
			|Тогда (ТабРаскрытиеГруппСтроки.НачалоГруппы+"+Формат(ДобавленоСтрок,"ЧГ=0")+")";
			
			ТекстОбновлениеКонецГруппы=ТекстОбновлениеКонецГруппы+"
			|Когда ТабРаскрытиеГруппСтроки.НачалоГруппы>"+Формат(СтрАналитика.НомерСтроки,"ЧГ=0")+"##"+"
			|Тогда (ТабРаскрытиеГруппСтроки.КонецГруппы+"+Формат(ДобавленоСтрок,"ЧГ=0")+")&&&&";
			
			ТекстВыбор=ТекстВыбор+" 
			|+ ВЫБОР КОГДА ТабРаскрытиеГруппСтроки.НачалоГруппы<="+Формат(СтрАналитика.НомерСтроки,"ЧГ=0")+"
			|И ТабРаскрытиеГруппСтроки.КонецГруппы>="+Формат(СтрАналитика.НомерСтроки,"ЧГ=0")+"
			|ТОГДА 1 ИНАЧЕ 0 КОНЕЦ";
			
			СоответствиеСтрокАналитик.Вставить(XMLString(СтрАналитика.Строка)+"_"+СтрАналитика.ИндексАналитикиНов,НомерСтрокиНов);
			СтрАналитика.НомерСтрокиНов=НомерСтрокиНов;
			НомерДобавленнойСтроки=НомерСтрокиНов
			
		КонецЕсли;		
		
		НоваяСтрока=ТабКоординатыНов.Добавить();		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрАналитика);
		НоваяСтрока.ИндексАналитики=СтрАналитика.ИндексАналитикиНов;
		
		Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			НоваяСтрока["Аналитика"+ИндексАналитики]=СтрАналитика["Аналитика"+ИндексАналитики+"Нов"]
			
		КонецЦикла;
		
		НоваяСтрока.НомерСтроки=НомерДобавленнойСтроки;
		НоваяСтрока.Раскрытие=Истина;
		
	КонецЦикла;
	
	Если ДобавленоСтрок=0 Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	/////////////////////////////////////////////////////////////////////////////////////////////////
	//Обновим границы группировок
	ТекстОбновлениеНачалоГруппы=СтрЗаменить(ТекстОбновлениеНачалоГруппы,"##","");
	ТекстОбновлениеКонецГруппы=СтрЗаменить(ТекстОбновлениеКонецГруппы,"##","");
	ТекстОбновлениеКонецГруппы=СтрЗаменить(ТекстОбновлениеКонецГруппы,"&&&&",ТекстВыбор);
	
	ЗапросГруппировкиСтрок=Новый Запрос;
	ЗапросГруппировкиСтрок.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	ЗапросГруппировкиСтрок.Текст="Выбрать * Поместить ТабРаскрытиеГруппСтроки ИЗ &ТабРаскрытиеГруппСтроки КАК ТабРаскрытиеГруппСтроки
	|;
	|ВЫБРАТЬ ГруппировкиСвод.*
	|ИЗ
	|(ВЫБРАТЬ";
	
	ТекстГруппировки="";
	
	Для Каждого Колонка ИЗ ТабРаскрытиеГруппСтроки.Колонки Цикл
		
		Если Колонка.Имя="НачалоГруппы" ИЛИ Колонка.Имя="КонецГруппы" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстГруппировки=ТекстГруппировки+"
		|ТабРаскрытиеГруппСтроки."+Колонка.Имя+" КАК "+Колонка.Имя+",";
				
	КонецЦикла;
	
	ЗапросГруппировкиСтрок.Текст=ЗапросГруппировкиСтрок.Текст+ТекстГруппировки+"
	|ВЫБОР"+ТекстОбновлениеНачалоГруппы+"
	|ИНАЧЕ ТабРаскрытиеГруппСтроки.НачалоГруппы КОНЕЦ КАК НачалоГруппы,
	|ВЫБОР"+ТекстОбновлениеКонецГруппы+"
	|ИНАЧЕ ТабРаскрытиеГруппСтроки.КонецГруппы"+ТекстВыбор+" КОНЕЦ КАК КонецГруппы
	|ИЗ ТабРаскрытиеГруппСтроки КАК ТабРаскрытиеГруппСтроки
	|ГДЕ (НЕ ТабРаскрытиеГруппСтроки.ДобавленаВручную) И ТабРаскрытиеГруппСтроки.УровеньГруппировки>&УровеньСтрока
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ"+ТекстГруппировки+"
	|	ТабРаскрытиеГруппСтроки.НачалоГруппы,
	|	ТабРаскрытиеГруппСтроки.КонецГруппы
	|ИЗ ТабРаскрытиеГруппСтроки КАК ТабРаскрытиеГруппСтроки
	|ГДЕ ТабРаскрытиеГруппСтроки.ДобавленаВручную И ТабРаскрытиеГруппСтроки.УровеньГруппировки>&УровеньСтрока) КАК ГруппировкиСвод
	|УПОРЯДОЧИТЬ ПО ГруппировкиСвод.УровеньГруппировки";
	
	ЗапросГруппировкиСтрок.УстановитьПараметр("ТабРаскрытиеГруппСтроки",ТабРаскрытиеГруппСтроки);
	ЗапросГруппировкиСтрок.УстановитьПараметр("УровеньСтрока",УровеньСтрока);
	
	ТабРаскрытиеГруппСтроки=ЗапросГруппировкиСтрок.Выполнить().Выгрузить();
		
	///////////////////////////////////////////////////////////////////////////////////////////////
	
	
	ТекстОбновление=СтрЗаменить(ТекстОбновление,"##","");
	
	ЗапросКоординаты.Текст="ВЫБРАТЬ * Поместить ТабКоординатыНов ИЗ &ТабКоординатыНов КАК ТабКоординатыНов
	|;
	|ВЫБРАТЬ * Поместить ТабКоординатыИтог ИЗ &ТабКоординатыИтог КАК ТабКоординатыИтог
	|ИНДЕКСИРОВАТЬ ПО НомерСтроки, Показатель, ИндексАналитикиДляПоиска 
	|; 
	|";
	
	ЗапросКоординаты.УстановитьПараметр("ТабКоординатыНов",ТабКоординатыНов);
	ЗапросКоординаты.УстановитьПараметр("ТабКоординатыИтог",СтрокиКДобавлению);
	
	ТекстКоординатыОбщ="";
	ТекстКоординатыНов="";
	ТекстКоординатыИтог="";
	
	Для Каждого Колонка ИЗ ТабКоординатыНов.Колонки Цикл
		
		Если Колонка.Имя="НомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстКоординатыОбщ=ТекстКоординатыОбщ+"
		|ТабКоординатыОбщ."+Колонка.Имя+" КАК "+Колонка.Имя+",";
		
		ТекстКоординатыНов=ТекстКоординатыНов+"
		|ТабКоординатыНов."+Колонка.Имя+" КАК "+Колонка.Имя+",";
		
		Если СтрНайти(Колонка.Имя,"Аналитика")>0 Тогда
			
			Если СтрокиКДобавлению.Колонки.Найти(Колонка.Имя+"Нов")=Неопределено Тогда
				
				ТекстКоординатыИтог=ТекстКоординатыИтог+"
				|ТабКоординатыИтог."+Колонка.Имя+" КАК "+Колонка.Имя+",";
		
			Иначе
				
				ТекстКоординатыИтог=ТекстКоординатыИтог+"
				|ТабКоординатыИтог."+Колонка.Имя+"Нов КАК "+Колонка.Имя+",";
				
			КонецЕсли;
			
		ИначеЕсли Колонка.Имя="ИндексАналитики" Тогда
			ТекстКоординатыИтог=ТекстКоординатыИтог+"
			|ТабКоординатыИтог.ИндексАналитикиНов КАК ИндексАналитики,";
		ИначеЕсли Колонка.Имя="Раскрытие" Тогда
			ТекстКоординатыИтог=ТекстКоординатыИтог+"
			|ИСТИНА КАК Раскрытие,";
		Иначе
			ТекстКоординатыИтог=ТекстКоординатыИтог+"
			|ТабКоординатыОбщ."+Колонка.Имя+" КАК "+Колонка.Имя+",";
		КонецЕсли;
					
	КонецЦикла;
	
	ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"ВЫБРАТЬ"+ТекстКоординатыОбщ+"
	|ВЫБОР"+ТекстОбновление+"
	|ИНАЧЕ ТабКоординатыОбщ.НомерСтроки КОНЕЦ КАК НомерСтроки
	|ПОМЕСТИТЬ ТабКоординатыТек
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ"+ТекстКоординатыНов+"
	|ТабКоординатыНов.НомерСтроки
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ"+ТекстКоординатыИтог+"
	|ТабКоординатыИтог.НомерСтрокиНов КАК НомерСтроки
	|ИЗ ТабКоординатыИтог КАК ТабКоординатыИтог
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабКоординатыОбщ КАК ТабКоординатыОбщ
	|ПО ТабКоординатыИтог.НомерСтроки=ТабКоординатыОбщ.НомерСтроки
	|И  ТабКоординатыИтог.Строка=ТабКоординатыОбщ.Строка
	|И  ТабКоординатыИтог.ИндексАналитикиДляПоиска=ТабКоординатыОбщ.ИндексАналитики
	|И  (НЕ ТабКоординатыИтог.ЭкземплярОтчета=ТабКоординатыОбщ.ЭкземплярОтчета)
	|;
	|УНИЧТОЖИТЬ СтрокиКДобавлению
	|;
	|УНИЧТОЖИТЬ ТабКоординатыНов
	|;
	|УНИЧТОЖИТЬ ТабКоординатыИтог
	|;
	|УНИЧТОЖИТЬ ТабКоординатыОбщ
	|;
	|ВЫБРАТЬ * Поместить ТабКоординатыОбщ ИЗ ТабКоординатыТек
	|ИНДЕКСИРОВАТЬ ПО "+ПолучитьИндексыТаблицыКоординат()+"
	|;
	|Уничтожить ТабКоординатыТек
	|;"; 

	ЗапросКоординаты.Выполнить();
		
	Возврат Истина;
	
КонецФункции //ДобавитьСтрокиРаскрытия()

Процедура РазвернутьСтрокуПоАналитике(СтрокаДерева,МассивПропускаемыхАналитик=Неопределено,ДобавленоСтрок=0) Экспорт
	
	// Определим, являются ли подчиненные строки строками раскрытия
	
	Если СтрокаДерева.ЕстьАналитика И (НЕ ДанныеРаскрытияИнициализированы) Тогда
		
		ЗапросКоординаты.Текст="ВЫБРАТЬ
		|*
		|ИЗ ТабКоординатыОбщ КАК ТабКоординатыОбщ
		|ГДЕ (НЕ ТабКоординатыОбщ.Раскрытие)
		|И ТабКоординатыОбщ.НомерСтроки=&НомерСтроки";
		
		ЗапросКоординаты.УстановитьПараметр("НомерСтроки",СтрокаДерева.НомерСтроки);
		
		РезультатЗапроса = ЗапросКоординаты.Выполнить();
		Результат = РезультатЗапроса.Выбрать();
		
		Если Результат.Следующий() Тогда
			
			ПолучитьДанныеАналитики(Результат.Строка,СтрокаДерева,Результат,МассивПропускаемыхАналитик,ДобавленоСтрок);
			
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры // РазвернутьСтрокуПоАналитике()

Функция ДобавитьСтрокиРаскрытияДерево(СтрокиКДобавлению)
	
	Перем ВсегоСтрок;
	
	ДобавленоСтрок=0;
	ТабКоординатыНов=ШаблонКоординаты.СкопироватьКолонки();
	СтрокиКДобавлению.Колонки.Добавить("НомерСтрокиНов",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
	
	ВсегоСтрок=ПолучитьМаксимальныйНомерСтроки();
	
	МассивОбработанныхСтрок=Новый Массив;
	СоответствиеСтрокАналитик=Новый Соответствие;
	
	Для Каждого СтрАналитика ИЗ СтрокиКДобавлению Цикл
		
		Если (НЕ ЗначениеЗаполнено(СтрАналитика.ЭкземплярОтчета)) ИЛИ ЗначениеЗаполнено(СтрАналитика.ИндексАналитикиТек) Тогда
			Продолжить;
		КонецЕсли;
		
		НомерДобавленнойСтроки = СоответствиеСтрокАналитик.Получить(XMLString(СтрАналитика.Строка)+"_"+СтрАналитика.ИндексАналитикиНов);
		
		Если НомерДобавленнойСтроки=Неопределено Тогда	
			
			НомерСтроки=СтрАналитика.НомерСтроки;
			НомерСтрокиНов=ВсегоСтрок+ДобавленоСтрок+1;
			СтрАналитика.НомерСтрокиНов=НомерСтрокиНов;
			
			СтрокаДереваИсходная=ТабДерево.Строки.Найти(НомерСтроки,"НомерСтроки",Истина);
			
			// Для управляемого режима ////////
			
			Если УправляемыйРежим Тогда
				СтруктураСтрока=Новый Структура;
			КонецЕсли;
			
			////////////////////////////////////
			
			Если СтрАналитика.ИндексАналитикиДляПоиска="" Тогда
				
				Если СтрокаДереваИсходная.Строки.Количество()=0 Тогда
					
					МассивПропускаемыхАналитик=Новый Массив;
					МассивПропускаемыхАналитик.Добавить(СтрАналитика.ИндексАналитикиНов);
					
					РазвернутьСтрокуПоАналитике(СтрокаДереваИсходная,МассивПропускаемыхАналитик,ДобавленоСтрок);
					
				КонецЕсли;
				
				ВсегоСтрок=ПолучитьМаксимальныйНомерСтроки();
				
				НомерСтрокиНов=ВсегоСтрок+ДобавленоСтрок+1;
				СтрАналитика.НомерСтрокиНов=НомерСтрокиНов;
				
				НоваяСтрокаДерева=СтрокаДереваИсходная.Строки.Вставить(0);
				НоваяСтрокаДерева.НомерСтроки=НомерСтрокиНов;
				НоваяСтрокаДерева.Раскрытие=Истина;
				НоваяСтрокаДерева.ДанныеАналитики=2;
				
				
				// Для управляемого режима ////////
				
				Если УправляемыйРежим Тогда
					СтруктураСтрока.Вставить("АдресРодителя",ПолучитьАбсолютныйАдресСтрокиДерева(СтрокаДереваИсходная,ТабДерево));
					СтруктураСтрока.Вставить("ИндексВставки",0);
				КонецЕсли;
				
				///////////////////////////////////
				
			Иначе	
				
				НомерСтрокиНов=ВсегоСтрок+ДобавленоСтрок+1;
				СтрАналитика.НомерСтрокиНов=НомерСтрокиНов;
				
				ИндексСтрокиИсходной=СтрокаДереваИсходная.Родитель.Строки.Индекс(СтрокаДереваИсходная);
				
				МассивОбработанныхСтрок.Добавить(СтрАналитика.НомерСтроки);
				НоваяСтрокаДерева=СтрокаДереваИсходная.Родитель.Строки.Вставить(ИндексСтрокиИсходной+1);
				НоваяСтрокаДерева.НомерСтроки=НомерСтрокиНов;
				НоваяСтрокаДерева.Раскрытие=Истина;
				НоваяСтрокаДерева.ДанныеАналитики=2;
				
				// Для управляемого режима ////////
				
				Если УправляемыйРежим Тогда
					СтруктураСтрока.Вставить("АдресРодителя",ПолучитьАбсолютныйАдресСтрокиДерева(СтрокаДереваИсходная.Родитель,ТабДерево));
					СтруктураСтрока.Вставить("ИндексВставки",ИндексСтрокиИсходной+1);
				КонецЕсли;
				
				///////////////////////////////////
				
			КонецЕсли;
			
			НоваяСтрокаДерева.ЕстьЗаполнение=СтрокаДереваИсходная.ЕстьЗаполнение;
			НоваяСтрокаДерева.ЕстьВычисление=СтрокаДереваИсходная.ЕстьВычисление;
			
			НомерЯчейки=6;
			
			Для Индекс=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
				
				НоваяСтрокаДерева[НомерЯчейки]=СтрАналитика["Аналитика"+Индекс+"Нов"];					
				НомерЯчейки=НомерЯчейки+1;
				
			КонецЦикла;
			
			ДобавленоСтрок=ДобавленоСтрок+1;
			СоответствиеСтрокАналитик.Вставить(XMLString(СтрАналитика.Строка)+"_"+СтрАналитика.ИндексАналитикиНов,СтрАналитика.НомерСтрокиНов);
			
			// Для управляемого режима ////////
			
			Если УправляемыйРежим Тогда
				
				ДанныеНовойСтроки=Новый Структура;
				Для Каждого Колонка ИЗ ТабДерево.Колонки Цикл
					ДанныеНовойСтроки.Вставить(Колонка.Имя,НоваяСтрокаДерева[Колонка.Имя]);
				КонецЦикла;
				
				СтруктураСтрока.Вставить("ДанныеНовойСтроки",ДанныеНовойСтроки);
				МассивДобавленныхСтрокКПередаче.Добавить(СтруктураСтрока);
				
			КонецЕсли;
					
		Иначе
			
			СтрАналитика.НомерСтрокиНов=НомерДобавленнойСтроки;
			
		КонецЕсли;
		
		НоваяСтрокаКоординат=ТабКоординатыНов.Добавить();		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаКоординат,СтрАналитика);
		НоваяСтрокаКоординат.ИндексАналитики=СтрАналитика.ИндексАналитикиНов;
		
		Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			НоваяСтрокаКоординат["Аналитика"+ИндексАналитики]=СтрАналитика["Аналитика"+ИндексАналитики+"Нов"]
			
		КонецЦикла;
		
		НоваяСтрокаКоординат.НомерСтроки=СтрАналитика.НомерСтрокиНов;
        НоваяСтрокаКоординат.Раскрытие=Истина;
		
		НоваяСтрока=ТабКоординатыСтрок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,НоваяСтрокаКоординат);
		НоваяСтрока.ИмяГруппировки="ИндексАналитики";
		НоваяСтрока.УровеньСтроки=Истина;
				
		//////////////////////////////////////
					
	КонецЦикла;
	
	Если ДобавленоСтрок=0 Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ЗапросКоординаты.Текст="ВЫБРАТЬ * Поместить ТабКоординатыНов ИЗ &ТабКоординатыНов КАК ТабКоординатыНов
	|;
	|ВЫБРАТЬ * Поместить ТабКоординатыИтог ИЗ &ТабКоординатыИтог КАК ТабКоординатыИтог
	|ИНДЕКСИРОВАТЬ ПО НомерСтроки, Показатель, ИндексАналитикиДляПоиска 
	|; 
	|";
	
	ЗапросКоординаты.УстановитьПараметр("ТабКоординатыНов",ТабКоординатыНов);
	ЗапросКоординаты.УстановитьПараметр("ТабКоординатыИтог",СтрокиКДобавлению);
	
	ТекстКоординатыОбщ="";
	ТекстКоординатыНов="";
	ТекстКоординатыИтог="";
	
	Для Каждого Колонка ИЗ ТабКоординатыНов.Колонки Цикл
		
		Если Колонка.Имя="НомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстКоординатыОбщ=ТекстКоординатыОбщ+"
		|ТабКоординатыОбщ."+Колонка.Имя+" КАК "+Колонка.Имя+",";
		
		ТекстКоординатыНов=ТекстКоординатыНов+"
		|ТабКоординатыНов."+Колонка.Имя+" КАК "+Колонка.Имя+",";
		
		Если СтрНайти(Колонка.Имя,"Аналитика")>0 Тогда
			
			Если СтрокиКДобавлению.Колонки.Найти(Колонка.Имя+"Нов")=Неопределено Тогда
				
				ТекстКоординатыИтог=ТекстКоординатыИтог+"
				|ТабКоординатыИтог."+Колонка.Имя+" КАК "+Колонка.Имя+",";
		
			Иначе
				
				ТекстКоординатыИтог=ТекстКоординатыИтог+"
				|ТабКоординатыИтог."+Колонка.Имя+"Нов КАК "+Колонка.Имя+",";
				
			КонецЕсли;
			
		ИначеЕсли Колонка.Имя="ИндексАналитики" Тогда
			ТекстКоординатыИтог=ТекстКоординатыИтог+"
			|ТабКоординатыИтог.ИндексАналитикиНов КАК ИндексАналитики,";
		ИначеЕсли Колонка.Имя="Раскрытие" Тогда
			ТекстКоординатыИтог=ТекстКоординатыИтог+"
			|ИСТИНА КАК Раскрытие,";
		Иначе
			ТекстКоординатыИтог=ТекстКоординатыИтог+"
			|ТабКоординатыОбщ."+Колонка.Имя+" КАК "+Колонка.Имя+",";
		КонецЕсли;
					
	КонецЦикла;
	
	ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"ВЫБРАТЬ"+ТекстКоординатыОбщ+"
	|ТабКоординатыОбщ.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТабКоординатыТек
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ"+ТекстКоординатыНов+"
	|ТабКоординатыНов.НомерСтроки
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ"+ТекстКоординатыИтог+"
	|ТабКоординатыИтог.НомерСтрокиНов КАК НомерСтроки
	|ИЗ ТабКоординатыИтог КАК ТабКоординатыИтог
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабКоординатыОбщ КАК ТабКоординатыОбщ
	|ПО ТабКоординатыИтог.НомерСтроки=ТабКоординатыОбщ.НомерСтроки
	|И  ТабКоординатыИтог.Строка=ТабКоординатыОбщ.Строка
	|И  ТабКоординатыИтог.ИндексАналитикиДляПоиска=ТабКоординатыОбщ.ИндексАналитики
	|И  (НЕ ТабКоординатыИтог.ЭкземплярОтчета=ТабКоординатыОбщ.ЭкземплярОтчета)
	|;
	|УНИЧТОЖИТЬ СтрокиКДобавлению
	|;
	|УНИЧТОЖИТЬ ТабКоординатыНов
	|;
	|УНИЧТОЖИТЬ ТабКоординатыИтог
	|;
	|УНИЧТОЖИТЬ ТабКоординатыОбщ
	|;
	|ВЫБРАТЬ * Поместить ТабКоординатыОбщ ИЗ ТабКоординатыТек
	|ИНДЕКСИРОВАТЬ ПО "+ПолучитьИндексыТаблицыКоординат()+"
	|;
	|Уничтожить ТабКоординатыТек
	|;"; 

	ЗапросКоординаты.Выполнить();
			
	Возврат Истина;
	
КонецФункции //ДобавитьСтрокиРаскрытияДерево()

Процедура ПолучитьДанныеАналитики(СтрокаРаскрытия,СтрокаДерева,СтрокаКоординат,МассивПропускаемыхАналитик=Неопределено,ДобавленоСтрок=0) Экспорт
	
	Если НЕ ТаблицаРаскрытийСтрок.Найти(СтрокаДерева.НомерСтроки,"НомерСтроки")=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора=Новый Структура;
	
	Для Каждого Группировка ИЗ ГруппировкиСтроки Цикл
		
		Если Группировка.Группировка="ИндексАналитики" ИЛИ Группировка.Группировка="Строка" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтруктураОтбора.Вставить(Группировка.Группировка,СтрокаКоординат[Группировка.Группировка]);
		
	КонецЦикла;		
	
	ОтчетыСтроки=ТабОтчеты.НайтиСтроки(СтруктураОтбора);
	
	СоответствиеВалют=Новый Соответствие;
	МассивКОтображению=Новый Массив;
	
	// Определим экземпляры отчетов, относящихся к выбранной строке, и их основные валюты
	КэшируемыйКонтекстВидаОтчета = Новый Структура;
	
	Для Каждого СтрОтчет ИЗ ОтчетыСтроки Цикл
		
		Если (НЕ СтрОтчет.ЕстьЭкземплярОтчета) Тогда
			Продолжить;
		КонецЕсли;
		
		ПолучитьДокументОбъект(СтрОтчет, КэшируемыйКонтекстВидаОтчета);	
		
		Если СоответствиеВалют[СтрОтчет.ОсновнаяВалюта]=Неопределено Тогда
			
			МассивЭкземпляров=Новый Массив;
			МассивЭкземпляров.Добавить(СтрОтчет);
			
			СоответствиеВалют.Вставить(СтрОтчет.ОсновнаяВалюта,МассивЭкземпляров);
			
		Иначе
			
			СоответствиеВалют[СтрОтчет.ОсновнаяВалюта].Добавить(СтрОтчет);
			
		КонецЕсли;
		
		Если ВключатьВОбработку(СтрОтчет) Тогда
			МассивКОтображению.Добавить(СтрОтчет);
		КонецЕсли;
		
	КонецЦикла;
	
	ПрефиксТаблицы="Раскрытие_"+Формат(СтрокаДерева.НомерСтроки,"ЧГ=0");
	
	// Поместим во временные таблицы данные из регистра "ЗначенияПоказателейОтчетов" в основной валюте отчетов
	
	ЗапросВерсия=Новый Запрос;
	ЗапросВерсия.Текст="ВЫБРАТЬ
	|	ВерсииЗначенийПоказателей.Ссылка
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета В(&МассивЭкземпляров)
	|	И ВерсииЗначенийПоказателей.Валюта = &Валюта";
	
	ТабРаскрытиеСтроки=ШаблонРаскрытиеСтроки.СкопироватьКолонки();
	ЗапросДанныеРаскрытия.Текст="";
	
	Для Каждого СтрВалюта ИЗ СоответствиеВалют Цикл
		
		НоваяСтрока=ТабРаскрытиеСтроки.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураОтбора);
		НоваяСтрока.ОсновнаяВалюта=СтрВалюта.Ключ;
		НоваяСтрока.НомерСтроки=СтрокаДерева.НомерСтроки;
		НоваяСтрока.ИмяТаблицыВОсновнойВалюте=ПрефиксТаблицы+"_ВАЛ_"+СтрВалюта.Ключ.Код;
		НоваяСтрока.ИменаТаблицВВалюте=Новый Соответствие;
		
		ЗапросВерсия.УстановитьПараметр("Валюта", СтрВалюта.Ключ);
		
		МассивЭкземпляров=Новый Массив;
		
		Для Каждого СтрОтчет ИЗ СтрВалюта.Значение Цикл
			
			Если Не СтрОтчет.ОтчетИнициализирован Тогда
				
				МассивЭкземпляров.Добавить(СтрОтчет.ЭкземплярОтчета);
				
			КонецЕсли;
			
		КонецЦикла;			
		
		ЗапросВерсия.УстановитьПараметр("МассивЭкземпляров",МассивЭкземпляров);
		
		СписокИспользуемыхВерсий = Новый СписокЗначений;	
		СписокИспользуемыхВерсий.ЗагрузитьЗначения(ЗапросВерсия.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
		ПоместитьТаблицуРаскрытияВСвод(СписокИспользуемыхВерсий,НоваяСтрока.ИмяТаблицыВОсновнойВалюте,СтрокаРаскрытия);
		
	КонецЦикла;
	
	ЕстьСтрокиРаскрытия = ТабРаскрытиеСтроки.Количество() > 0;
	
	Если ЕстьСтрокиРаскрытия И (НЕ ТабРаскрытиеСтроки[0].ОсновнаяВалюта=ВалютаОтображения) Тогда // Потребуется пересчет в валюту отображения
		
		ЗапросДанныеРаскрытия.Выполнить();
		ЗапросДанныеРаскрытия.Текст="";
		
	КонецЕсли;
	
	// Пересчитаем при необходимости и получим сводные таблицы в валюте отображения
	
	ТекстОбъединениеРаскрытие="";
	ТекстДанныеРаскрытие="";
		
	НоваяСтрока=ТаблицаРаскрытийСтрок.Добавить();
	НоваяСтрока.НомерСтроки=СтрокаДерева.НомерСтроки;
	НоваяСтрока.ТабРаскрытиеСтроки=ТабРаскрытиеСтроки;

	Если ЕстьСтрокиРаскрытия Тогда
	
		Для Индекс=0 По ТабРаскрытиеСтроки.Количество()-1 Цикл
			
			ТекСвод=ТабРаскрытиеСтроки[Индекс];
			
			Если ТекСвод.ОсновнаяВалюта=ВалютаОтображения Тогда
				
				ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
				|ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ * "+?(Индекс=0,"Поместить мПоказателиРаскрытияКонтекст"+"_"+ПрефиксТаблицы+" ","")+"ИЗ "+ТекСвод.ИмяТаблицыВОсновнойВалюте+" КАК "+ТекСвод.ИмяТаблицыВОсновнойВалюте;
				
			Иначе
				
				// Получим мПоказателиРаскрытия в валюте отображения
				
				ЗапросДанныеРаскрытия.Текст="ВЫБРАТЬ * ИЗ "+ТекСвод.ИмяТаблицыВОсновнойВалюте+" КАК "+ТекСвод.ИмяТаблицыВОсновнойВалюте;
				мПоказателиРаскрытияТек=ЗапросДанныеРаскрытия.Выполнить().Выгрузить();
				
				мПоказателиРаскрытияВВалютеТек=ПолучитьПоказателиВВалютеОтображения(ТекСвод.ОсновнаяВалюта,мПоказателиРаскрытияТек);
				
				ИмяТаблицыВВалюте=ПрефиксТаблицы+"_ВАЛ_"+СокрЛП(ВалютаОтображения.Код)+"_мПоказателиРаскрытияВВалюте";
				
				ТекСвод.ИменаТаблицВВалюте.Вставить(ВалютаОтображения,ИмяТаблицыВВалюте);
				
				ТекстДанныеРаскрытие=ТекстДанныеРаскрытие+"
				|/////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ * Поместить "+СокрЛП(ИмяТаблицыВВалюте)+" ИЗ &"+ИмяТаблицыВВалюте+" КАК "+ИмяТаблицыВВалюте+"
				|;";
				ЗапросДанныеРаскрытия.УстановитьПараметр(ИмяТаблицыВВалюте,мПоказателиРаскрытияВВалютеТек);
				
				ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
				|ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ * "+?(Индекс=0,"Поместить мПоказателиРаскрытияКонтекст"+"_"+ПрефиксТаблицы+" ","")+"ИЗ "+ИмяТаблицыВВалюте+" КАК "+ИмяТаблицыВВалюте;
				
			КонецЕсли;
			
		КонецЦикла;		
		
		Если Не ТекстДанныеРаскрытие="" Тогда
			
			ЗапросДанныеРаскрытия.Текст=ТекстДанныеРаскрытие+Сред(ТекстОбъединениеРаскрытие,16)+"
			|ИНДЕКСИРОВАТЬ ПО ЭкземплярОтчета
			|;";
			
		Иначе
			
			ЗапросДанныеРаскрытия.Текст=ЗапросДанныеРаскрытия.Текст+Сред(ТекстОбъединениеРаскрытие,16)+"
			|ИНДЕКСИРОВАТЬ ПО ЭкземплярОтчета
			|;";
			
		КонецЕсли;
		
		ЗапросДанныеРаскрытия.Выполнить();	
		
		Если УправляемыйРежим Тогда
			
			Для Каждого СтрРаскрытиеСтрока ИЗ ТабРаскрытиеСтроки Цикл
				
				ТаблицыЗапросаРаскрытие.Вставить(СтрРаскрытиеСтрока.ИмяТаблицыВОсновнойВалюте,ПолучитьТаблицуИЗЗапроса(ЗапросДанныеРаскрытия,СтрРаскрытиеСтрока.ИмяТаблицыВОсновнойВалюте));
				
				Для Каждого СтрДанныеВалюта ИЗ СтрРаскрытиеСтрока.ИменаТаблицВВалюте Цикл
					
					ТаблицыЗапросаРаскрытие.Вставить(СтрДанныеВалюта.Значение,ПолучитьТаблицуИЗЗапроса(ЗапросДанныеРаскрытия,СтрДанныеВалюта.Значение));
					
				КонецЦикла;
				
				ТаблицыЗапросаРаскрытие.Вставить("мПоказателиРаскрытияКонтекст"+"_"+ПрефиксТаблицы,ПолучитьТаблицуИЗЗапроса(ЗапросДанныеРаскрытия,"мПоказателиРаскрытияКонтекст"+"_"+ПрефиксТаблицы));
				
			КонецЦикла;
			
		КонецЕсли;

	КонецЕсли;
		
	/////////////////////////////////////////////////////////////////////////////////////////////////
	// Выводим раскрытие строки в дерево
	
	ЗапросДанные.Текст="ВЫБРАТЬ
	|Показатель
	|ИЗ
	|ТабПоказатели
	|ГДЕ ТабПоказатели.Строка=&СтрокаРаскрытия";
	
	ПоказателиСтроки=Новый СписокЗначений;
	ЗапросДанные.УстановитьПараметр("СтрокаРаскрытия",СтрокаРаскрытия);
	
	ПоказателиСтроки.ЗагрузитьЗначения(ЗапросДанные.Выполнить().Выгрузить().ВыгрузитьКолонку("Показатель"));	
	ТекТаблицаРаскрытия=ПолучитьТаблицуРаскрытияДляСтроки(ПрефиксТаблицы,МассивКОтображению,ПоказателиСтроки);
	
	ЗапросКоординаты.Текст="
	|ВЫБРАТЬ РАЗЛИЧНЫЕ";
	
	Для Каждого Группировка ИЗ МассивГруппировокКолонокИтог Цикл
		
		ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"
		|ТабКоординатыОбщ."+Группировка+" КАК "+Группировка+",";
		
	КонецЦикла;
	
	ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"
	|НомерКолонки,
	|ЭкземплярОтчета,
	|Показатель,
	|0 КАК ЗначениеРаскрытияЧисло
	|ИЗ ТабКоординатыОбщ КАК ТабКоординатыОбщ
	|ГДЕ ТабКоординатыОбщ.НомерСтроки=&НомерСтроки
	|И НЕ ТабКоординатыОбщ.Раскрытие";
	
	ЗапросКоординаты.УстановитьПараметр("НомерСтроки",СтрокаДерева.НомерСтроки);
	
	ТабКолонки=ЗапросКоординаты.Выполнить().Выгрузить();
	
	
	///////////////////////////////////////////////////////////////////////////////////////
	ЗапросСтрокаРаскрытия=Новый Запрос;
	
	ТекстВТ="ВЫБРАТЬ *
	|Поместить мПоказателиРаскрытия
	|ИЗ &ТекТаблицаРаскрытия КАК ТекТаблицаРаскрытия";
	
	Если НЕ МассивПропускаемыхАналитик=Неопределено Тогда
		
		ТекстВТ=ТекстВТ+"
		|ГДЕ НЕ ИндексАналитики В (&МассивПропускаемыхАналитик)";
		
		ЗапросСтрокаРаскрытия.УстановитьПараметр("МассивПропускаемыхАналитик",МассивПропускаемыхАналитик);
		
	КонецЕсли;
	
	ТекстВТ=ТекстВТ+"
	|;
	|ВЫБРАТЬ *
	|ПОМЕСТИТЬ ТабКолонки
	|ИЗ &ТабКолонки КАК ТабКолонки
	|;
	|ВЫБРАТЬ";
	
	Для Каждого Группировка ИЗ МассивГруппировокКолонокИтог Цикл
		
		ТекстВТ=ТекстВТ+"
		|мПоказателиРаскрытия."+Группировка+" КАК "+Группировка+",";
		
	КонецЦикла;
	
	ЗапросСтрокаРаскрытия.УстановитьПараметр("ТекТаблицаРаскрытия",ТекТаблицаРаскрытия);
	ЗапросСтрокаРаскрытия.УстановитьПараметр("ТабКолонки",ТабКолонки);
	
	ТекстВТ=ТекстВТ+"
	|	мПоказателиРаскрытия.ИндексАналитики,
	|	мПоказателиРаскрытия.ЗначениеЧисло КАК ЗначениеРаскрытияЧисло,
	|	мПоказателиРаскрытия.ЗначениеПоказателя КАК ЗначениеРаскрытия
	|ПОМЕСТИТЬ ТабПоказателиСвод
	|ИЗ 
	|	мПоказателиРаскрытия КАК мПоказателиРаскрытия
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ";
	
	Для Каждого Группировка ИЗ МассивГруппировокКолонокИтог Цикл
		
		ТекстВТ=ТекстВТ+"
		|ТабКолонки."+Группировка+" КАК "+Группировка+",";
		
	КонецЦикла;
	
	ТекстВТ=ТекстВТ+"
	|	мПоказателиРаскрытия.ИндексАналитики,
	|	0,
	|	ВЫБОР 
	|		КОГДА мПоказателиРаскрытия.ЗначениеЧисло <> 0 
	|			ТОГДА NULL
	|		КОГДА ТипЗначения(мПоказателиРаскрытия.ЗначениеПоказателя) = Тип(СТРОКА) 
	|			ТОГДА """" 
	|		КОГДА ТипЗначения(мПоказателиРаскрытия.ЗначениеПоказателя) = Тип(ДАТА) 
	|			ТОГДА ДАТАВРЕМЯ(1,1,1)
	|		КОГДА ТипЗначения(мПоказателиРаскрытия.ЗначениеПоказателя) = Тип(БУЛЕВО) 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ NULL
	|	КОНЕЦ
	|ИЗ 
	|	ТабКолонки КАК ТабКолонки, мПоказателиРаскрытия КАК мПоказателиРаскрытия
	|ИНДЕКСИРОВАТЬ ПО Колонка";
	
	Для Каждого Группировка ИЗ МассивГруппировокКолонокИтог Цикл
		
		Если Группировка="Колонка" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстВТ=ТекстВТ+","+Группировка;
		
	КонецЦикла;
	
	ТекстВТ=ТекстВТ+"		
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ";
	
	Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
		
		Если НЕ МассивГруппировокКолонокИтог.Найти(Реквизит)=Неопределено Тогда
			
			ТекстВТ=ТекстВТ+"	
			|	"+СправочникиГруппировок[Реквизит]+".Ссылка КАК "+Реквизит+",
			|	"+СправочникиГруппировок[Реквизит]+".Наименование КАК "+Реквизит+"Наименование,";
			
			Если Реквизит="ПериодОтчета" Тогда
				
				ТекстВТ=ТекстВТ+"
				|Периоды.ДатаНачала КАК ДатаНачалаПериода,"
				
			ИначеЕсли Реквизит="Организация" Тогда
				
				Если ОтборПоПериметру Тогда
					ТекстВТ=ТекстВТ+"
					|ВЫБОР КОГДА Организации.ТипОрганизации=&Консолидирующая Тогда 1 Иначе 0 Конец КАК ТипОрганизации,";
					
					ЗапросДанные.УстановитьПараметр("Консолидирующая",Перечисления.ТипыОрганизационныхЕдиниц.Консолидирующая);
					
				КонецЕсли;
				
			КонецЕсли; 
					
		КонецЕсли;
		
	КонецЦикла; 
	
	Если ЕстьАнализОтклонений Тогда
		
		ТекстВТ=ТекстВТ+"
		|ВЫБОР КОГДА "+СправочникиГруппировок[ГруппировкаБазис]+".Ссылка=&БазовоеЗначение Тогда 1 Иначе 0 Конец КАК БазовоеЗначение,";
		
		ЗапросСтрокаРаскрытия.УстановитьПараметр("БазовоеЗначение",БазовоеЗначениеИзмерения);
		
	КонецЕсли;
		
	Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
		
		Если СтрАналитика.ЕстьРазворот И (НЕ МассивГруппировокКолонокИтог.Найти(СтрАналитика.КодАналитики)=Неопределено) Тогда
			
			ТекстВТ=ТекстВТ+"
			|Спр"+СтрАналитика.КодАналитики+".Ссылка КАК "+СтрАналитика.КодАналитики+",
			|Спр"+СтрАналитика.КодАналитики+".Наименование КАК "+СтрАналитика.КодАналитики+"Наименование,";
			
		КонецЕсли;
		
	КонецЦикла;
		
	ТекстВТ=ТекстВТ+"
	|	КолонкиОтчетов.Ссылка КАК Колонка,
	|	КолонкиОтчетов.ПорядковыйНомер КАК ПорядковыйНомерКолонки,
	|	ТабПоказателиСвод.ЗначениеРаскрытияЧисло КАК ЗначениеРаскрытияЧисло,
	|	ТабПоказателиСвод.ЗначениеРаскрытия КАК ЗначениеПоказателя,
	|   ТабПоказателиСвод.ИндексАналитики
	|ИЗ ТабПоказателиСвод КАК ТабПоказателиСвод";
	
	Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
		
		Если НЕ МассивГруппировокКолонокИтог.Найти(Реквизит)=Неопределено Тогда
		ТекстВТ=ТекстВТ+"	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник."+СправочникиГруппировок[Реквизит]+" КАК "+СправочникиГруппировок[Реквизит]+"
		|		ПО ТабПоказателиСвод."+Реквизит+"="+СправочникиГруппировок[Реквизит]+".Ссылка";
	КонецЕсли;
		
	КонецЦикла; 
		
	Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
		
		Если СтрАналитика.ЕстьРазворот И (НЕ МассивГруппировокКолонокИтог.Найти(СтрАналитика.КодАналитики)=Неопределено) Тогда
			
			ТекстВТ=ТекстВТ+"
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СтрАналитика.ТаблицаАналитики+" КАК Спр"+СтрАналитика.КодАналитики+"
			|ПО ТабПоказателиСвод."+СтрАналитика.КодАналитики+"=Спр"+СтрАналитика.КодАналитики+".Ссылка";
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстВТ=ТекстВТ+"
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Ссылка,ПорядковыйНомер 
	|						ИЗ Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|						ГДЕ КолонкиОтчетов.Владелец=&ВидОтчета
	|		И (НЕ КолонкиОтчетов.ПометкаУдаления)) КАК КолонкиОтчетов
	|		ПО ТабПоказателиСвод.Колонка=КолонкиОтчетов.Ссылка
	|УПОРЯДОЧИТЬ ПО";
	
	ТекстУпорядочивания="";
	
	Для Каждого Колонка ИЗ ГруппировкиКолонки Цикл
		
		Если ЕстьАнализОтклонений() И Колонка.Группировка=ГруппировкаБазис Тогда
			ТекстУпорядочивания=ТекстУпорядочивания+",
			|БазовоеЗначение УБЫВ";
		КонецЕсли;
		
		Если Колонка.Группировка="Колонка" Тогда
			ТекстУпорядочивания=ТекстУпорядочивания+",
			|ПорядковыйНомерКолонки";
		ИначеЕсли Колонка.Группировка="ПериодОтчета" Тогда
			ТекстУпорядочивания=ТекстУпорядочивания+",
			|ДатаНачалаПериода";
		Иначе
			
			Если ОтборПоПериметру И Колонка.Группировка="Организация" Тогда
				ТекстУпорядочивания=ТекстУпорядочивания+",
				|ТипОрганизации УБЫВ";	
			КонецЕсли;
			
			ТекстУпорядочивания=ТекстУпорядочивания+",
			|"+Колонка.Группировка+"Наименование";
			
		КонецЕсли
		
	КонецЦикла;
	
	ТекстУпорядочивания=ТекстУпорядочивания+",
	|ИндексАналитики";
	
	ТекстВТ=ТекстВТ+Сред(ТекстУпорядочивания,2)+"	
	|
	|ИТОГИ
	|	СУММА(ЗначениеРаскрытияЧисло),
	|	ВЫБОР 
	|		КОГДА ИндексАналитики = НЕОПРЕДЕЛЕНО 
	|			ТОГДА НЕОПРЕДЕЛЕНО 
	|		ИНАЧЕ МАКСИМУМ(ЗначениеПоказателя)
	|	КОНЕЦ КАК ЗначениеПоказателя
	|ПО ";
	
	ТекстВТ=ТекстВТ+"		
	|ИндексАналитики";
	
	Для Каждого СтрГруппировка ИЗ ГруппировкиКолонки Цикл
		
		ТекстВТ=ТекстВТ+",
		|"+СтрГруппировка.Группировка;
		
	КонецЦикла;	
	
	ЗапросСтрокаРаскрытия.Текст=ТекстВТ;
	ЗапросСтрокаРаскрытия.УстановитьПараметр("ВидОтчета",ВидОтчета);
	
	////////////////////////////////////////////////////////////////////////////////
	// Подготовим структуру расшифровки строки
	
	РасшифровкаСтрока=Новый Структура;
	
	Для Каждого Колонка ИЗ ТабКоординатыСтрок.Колонки Цикл
		
		РасшифровкаСтрока.Вставить(Колонка.Имя);
		
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(РасшифровкаСтрока,СтрокаКоординат);
	
	РасшифровкаСтрока.УровеньСтроки=Истина;
	РасшифровкаСтрока.ИмяГруппировки="ИндексАналитики";
	
	///////////////////////////////////////////////////////////////////////////////
	// Подготовим таблицу добавленных строк для таблицы координат
	
	ТабКоординатыНов=ШаблонКоординаты.СкопироватьКолонки();
	
	////////////////////////////////////////////////////////////////////////////////
	// Выведем данные запроса в дерево
	
	Результат=ЗапросСтрокаРаскрытия.Выполнить();	
	Выборка=Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,,"Все");
	ВсегоСтрок=ПолучитьМаксимальныйНомерСтроки()+ДобавленоСтрок;
	ИндексДобавления=0;
	ВставлятьСтроки=СтрокаДерева.Строки.Количество()>0 И (НЕ СтрокаДерева.Строки[0].Раскрытие); // Синтетические строки были сгруппированы по иерархии 
	
	Пока Выборка.Следующий() Цикл
		
		ИндексАналитики=Выборка.ИндексАналитики;
		
		Если ИндексАналитики="" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрАналитика=ТекТаблицаРаскрытия.Найти(ИндексАналитики,"ИндексАналитики");
		
		Если СтрАналитика=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если УправляемыйРежим Тогда
			СтруктураСтрока=Новый Структура;
		КонецЕсли;
	
		Если ВставлятьСтроки Тогда
			
			НоваяСтрока=СтрокаДерева.Строки.Вставить(ИндексДобавления);
			
			Если УправляемыйРежим Тогда
				СтруктураСтрока.Вставить("АдресРодителя",ПолучитьАбсолютныйАдресСтрокиДерева(СтрокаДерева,ТабДерево));
				СтруктураСтрока.Вставить("ИндексВставки",ИндексДобавления);
			КонецЕсли;

			ИндексДобавления=ИндексДобавления+1;
							
		Иначе
			
			НоваяСтрока=СтрокаДерева.Строки.Добавить();
			
			Если УправляемыйРежим Тогда
				СтруктураСтрока.Вставить("АдресРодителя",ПолучитьАбсолютныйАдресСтрокиДерева(СтрокаДерева,ТабДерево));
				СтруктураСтрока.Вставить("ИндексВставки",-1);
			КонецЕсли;
		
		КонецЕсли;
		
		
		НоваяСтрока.Раскрытие=Истина;
		
		НоваяСтрока.ЕстьЗаполнение=СтрокаДерева.ЕстьЗаполнение;
		НоваяСтрока.ЕстьВычисление=СтрокаДерева.ЕстьВычисление;
		НоваяСтрока.ДанныеАналитики=2;
		
		ВсегоСтрок=ВсегоСтрок+1;
		НоваяСтрока.НомерСтроки=ВсегоСтрок;
		
		СтруктураАналитика=Новый Структура;
		СтруктураАналитика.Вставить("ИндексАналитики",ИндексАналитики);
		НомерЯчейки=6;
		
		Для Индекс=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			НоваяСтрока[НомерЯчейки]=СтрАналитика["Аналитика"+Индекс];				
			СтруктураАналитика.Вставить("Аналитика"+Индекс,СтрАналитика["Аналитика"+Индекс]);
			
			НомерЯчейки=НомерЯчейки+1;
			
		КонецЦикла;
		
		ДобавитьРасшифровкуСтрокиРаскрытия(ВсегоСтрок,РасшифровкаСтрока,СтруктураАналитика);
		
		НачалоВывода=ПерваяКолонка;	
		ЗаполнитьСтрокуАналитики(НоваяСтрока,Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[0],"Все"),0,Неопределено,НачалоВывода);
		
		Если УправляемыйРежим Тогда
			
			ДанныеНовойСтроки=Новый Структура;
			Для Каждого Колонка ИЗ ТабДерево.Колонки Цикл
				ДанныеНовойСтроки.Вставить(Колонка.Имя,НоваяСтрока[Колонка.Имя]);
			КонецЦикла;
			
			СтруктураСтрока.Вставить("ДанныеНовойСтроки",ДанныеНовойСтроки);
			МассивДобавленныхСтрокКПередаче.Добавить(СтруктураСтрока);
			
		КонецЕсли;

		//Добавим описание координат добавленных ячеек
		Для Каждого СтрКолонка ИЗ ТабКолонки Цикл
			
			НоваяСтрока=ТабКоординатыНов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрКолонка);
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,РасшифровкаСтрока);
			НоваяСтрока.НомерСтроки=ВсегоСтрок;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураАналитика);
			НоваяСтрока.Раскрытие=Истина;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТабКоординатыНов.Количество()=0 Тогда
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	
	Если ЕстьВычисляемыеКолонки() Тогда
		РассчитатьВычисляемыеКолонкиДерева();
	КонецЕсли;
	
	ТекстВыборки="";
	
	Для Каждого Колонка ИЗ ТабКоординатыНов.Колонки Цикл
		
		ТекстВыборки=ТекстВыборки+",
		|"+Колонка.Имя+" КАК "+Колонка.Имя;
		
	КонецЦикла;
	
	ТекстВыборки=Сред(ТекстВыборки,2);
	
	ЗапросКоординаты.Текст="ВЫБРАТЬ 
	|* 
	|Поместить ТабКоординатыНов
	|ИЗ &ТабКоординатыНов КАК ТабКоординатыНов
	|;
	|ВЫБРАТЬ"+ТекстВыборки+"
	|Поместить ТабКоординатыТек
	|Из ТабКоординатыОбщ КАК ТабКоординатыОбщ
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ"+ТекстВыборки+"
	|ИЗ ТабКоординатыНов КАК ТабКоординатыНов
	|;
	|Уничтожить ТабКоординатыОбщ
	|;
	|Уничтожить ТабКоординатыНов
	|;
	|ВЫБРАТЬ * 
	|Поместить ТабКоординатыОбщ
	|ИЗ ТабКоординатыТек КАК ТабКоординатыТек
	|ИНДЕКСИРОВАТЬ ПО "+ПолучитьИндексыТаблицыКоординат()+"
	|;
	|Уничтожить ТабКоординатыТек";
	
	ЗапросКоординаты.УстановитьПараметр("ТабКоординатыНов",ТабКоординатыНов);
	ЗапросКоординаты.УстановитьПараметр("НомерСтроки",СтрокаДерева.Строки[0].НомерСтроки);
	
	ЗапросКоординаты.Выполнить();
					
КонецПроцедуры // ПолучитьДанныеАналитики(СтрокаДерева,ДанныеДляОтбора)

Функция ПолучитьТаблицуРаскрытияДляСтроки(ПрефиксТаблицы,МассивОтчетов,ПоказателиСтроки)
	
	ТекстВТ="";
	
	ТекстОбъединениеРаскрытие="";
	
	МассивЭкземпляровСвод=Новый Массив;
	
	Для Каждого СтрОтчет ИЗ МассивОтчетов Цикл
		
		Если НЕ СтрОтчет.ОтчетИнициализирован Тогда // Данные будем брать из таблицы сводной инициализации
			
			МассивЭкземпляровСвод.Добавить(СтрОтчет.ЭкземплярОтчета);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// По таблицам проинициализированных экземпляров отчета
	
	ПервыйЭкземпляр=Истина;
	
	Для Индекс=0 По МассивОтчетов.Количество()-1 Цикл
		
		СтрОтчет=МассивОтчетов[Индекс];
		
		Если НЕ СтрОтчет.ОтчетИнициализирован Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаИндекс=Формат(Индекс,"ЧГ=");
		
		ИзмеренияАналитики="";
				
		Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
			
			Если СтрАналитика.ЕстьРазворот Тогда
				
				ИзмеренияАналитики=ИзмеренияАналитики+"
				|&"+СтрАналитика.КодАналитики+"_"+СтрокаИндекс+" КАК "+СтрАналитика.КодАналитики+",";
				
				ЗапросДанныеРаскрытия.УстановитьПараметр(СтрАналитика.КодАналитики+"_"+СтрокаИндекс,СтрОтчет[СтрАналитика.КодАналитики]);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстВТ=ТекстВТ+"
		|/////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ";
		
		Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
			
			ТекстВТ=ТекстВТ+"
			|&"+Реквизит+"_"+СтрокаИндекс+" КАК "+Реквизит+",";
	
		КонецЦикла; 
		
		ТекстВТ=ТекстВТ+"
		|&ЭкземплярОтчета_"+СтрокаИндекс+" КАК ЭкземплярОтчета,"+ИзмеренияАналитики+"
		|мПоказателиРаскрытия.Показатель,";
		
		Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			ТекстВТ=ТекстВТ+"		
			|мПоказателиРаскрытия.Аналитика"+ИндексАналитики+" КАК Аналитика"+ИндексАналитики+",";
			
		КонецЦикла;
		
		ТекстВТ=ТекстВТ+"
		|мПоказателиРаскрытия.Значение КАК ЗначениеПоказателя,
		|ВЫРАЗИТЬ(мПоказателиРаскрытия.Значение КАК Число(18,5)) КАК ЗначениеЧисло
		|Поместить мПоказателиРаскрытияОбщ_"+СтрокаИндекс+"
		|ИЗ &мПоказателиРаскрытия_"+СтрокаИндекс+" КАК мПоказателиРаскрытия
		|ГДЕ мПоказателиРаскрытия.Показатель В (&ПоказателиСтроки)";
		
		МассивТаблицПоказателейРаскрытия.Добавить("мПоказателиРаскрытияОбщ_"+СтрокаИндекс);
		
		Если СписокПоказателиНеВБланке.Количество()>0 Тогда
			ТекстВТ=ТекстВТ+"			
			|И мПоказателиРаскрытия.Показатель НЕ В(&СписокПоказателиНеВБланке)";
			
			ЗапросДанныеРаскрытия.УстановитьПараметр("СписокПоказателиНеВБланке",СписокПоказателиНеВБланке);
			
		КонецЕсли;
		
		Если СписокИзмененныхПоказателей.Количество()>0 Тогда
			ТекстВТ=ТекстВТ+"			
			|И мПоказателиРаскрытия.Показатель В(&СписокИзмененныхПоказателей)";
			
			ЗапросДанныеРаскрытия.УстановитьПараметр("СписокИзмененныхПоказателей",СписокИзмененныхПоказателей);
			
		КонецЕсли;
		
		ТекстВТ=ТекстВТ+"			
		|;";
		
		Для каждого Реквизит Из МассивКлючевыхРеквизитов  Цикл
			
			ЗапросДанныеРаскрытия.УстановитьПараметр(Реквизит+"_"+СтрокаИндекс,СтрОтчет[Реквизит]);
			
		КонецЦикла; 
		
		ЗапросДанныеРаскрытия.УстановитьПараметр("ЭкземплярОтчета_"+СтрокаИндекс,СтрОтчет.ЭкземплярОтчета);
		ЗапросДанныеРаскрытия.УстановитьПараметр("ПоказателиСтроки",ПоказателиСтроки);
		
		ЗапросДанныеРаскрытия.УстановитьПараметр("мПоказателиРаскрытия_"+СтрокаИндекс,?(СтрОтчет.ВыводитьВВалютеОтображения,СтрОтчет.мПоказателиРаскрытияВВалюте,СтрОтчет.ОтчетОбъект.мПоказателиРаскрытия));
		
		ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ * "+?(ПервыйЭкземпляр," Поместить РаскрытиеСтроки ","")+"ИЗ мПоказателиРаскрытияОбщ_"+СтрокаИндекс+" КАК мПоказателиРаскрытияОбщ_"+СтрокаИндекс;
		
		ПервыйЭкземпляр=Ложь;
		
	КонецЦикла;
	
	// По сводным таблицам инициализации
	
	ЗапросДанныеРаскрытия.УстановитьПараметр("МассивЭкземпляровСвод",МассивЭкземпляровСвод);
	
	ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ";
	
	Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
		
		ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
		|мПоказателиРаскрытияКонтекст."+Реквизит+" КАК "+Реквизит+",";
		
	КонецЦикла; 
	
	ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
	|мПоказателиРаскрытияКонтекст.ЭкземплярОтчета КАК ЭкземплярОтчета,";
	
	Для Индекс=1 По МаксАналитикОтчета Цикл
		
		ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"		
		|мПоказателиРаскрытияКонтекст.Аналитика"+Индекс+" КАК Аналитика"+Индекс+",";
		
	КонецЦикла;
	
	ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
	|мПоказателиРаскрытияКонтекст.Показатель,";
	
	Для Индекс=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		
		ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"		
		|мПоказателиРаскрытияКонтекст.Аналитика"+Индекс+" КАК Аналитика"+Индекс+",";
		
	КонецЦикла;
	
	ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
	|мПоказателиРаскрытияКонтекст.ЗначениеЧисло КАК ЗначениеПоказателя,
	|ВЫРАЗИТЬ(мПоказателиРаскрытияКонтекст.ЗначениеЧисло КАК Число(18,5)) КАК ЗначениеЧисло"+?(ПервыйЭкземпляр,"
	|Поместить РаскрытиеСтроки ","")+"
	|ИЗ мПоказателиРаскрытияКонтекст_"+ПрефиксТаблицы+" КАК мПоказателиРаскрытияКонтекст
	|ГДЕ мПоказателиРаскрытияКонтекст.ЭкземплярОтчета В (&МассивЭкземпляровСвод)";
	
	ТекстОтбор="";	
	
	Если СписокПоказателиНеВБланке.Количество()>0 Тогда
		ТекстОтбор=ТекстОтбор+"			
		|И мПоказателиРаскрытияКонтекст.Показатель НЕ В(&СписокПоказателиНеВБланке)";
		
		ЗапросДанныеРаскрытия.УстановитьПараметр("СписокПоказателиНеВБланке",СписокПоказателиНеВБланке);
		
	КонецЕсли;
	
	Если СписокИзмененныхПоказателей.Количество()>0 Тогда
		ТекстОтбор=ТекстОтбор+"			
		|И мПоказателиРаскрытияКонтекст.Показатель В(&СписокИзмененныхПоказателей)";
		
		ЗапросДанныеРаскрытия.УстановитьПараметр("СписокИзмененныхПоказателей",СписокИзмененныхПоказателей);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстОтбор) Тогда
		
		ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"			
		|"+ТекстОтбор;
		
	КонецЕсли;
	
	МассивТаблицПоказателейРаскрытия.Добавить("РаскрытиеСтроки");
		
	ТекстВТ=ТекстВТ+"
	|"+Сред(ТекстОбъединениеРаскрытие,16)+"
	|;
	|ВЫБРАТЬ РаскрытиеСтроки.*,
	|ТабПоказатели.Колонка
	|ИЗ РаскрытиеСтроки КАК РаскрытиеСтроки
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабПоказатели КАК ТабПоказатели
	|ПО РаскрытиеСтроки.Показатель=ТабПоказатели.Показатель";
	
	ЗапросДанныеРаскрытия.Текст=ТекстВТ;
	
	ТекТаблицаРаскрытия=ЗапросДанныеРаскрытия.Выполнить().Выгрузить();	
	ТекТаблицаРаскрытия.Колонки.Добавить("ИндексАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	
	Для Каждого СтрРаскрытия ИЗ ТекТаблицаРаскрытия Цикл
		
		СтрРаскрытия.ИндексАналитики=ПолучитьИндексАналитик(СтрРаскрытия);
		
	КонецЦикла;
	
	ТекТаблицаРаскрытия.Индексы.Добавить("ИндексАналитики");
	
	// Уничтожим помещенные в текущем сеансе таблицы
	
	Если МассивТаблицПоказателейРаскрытия.Количество()>0 Тогда
		
		ТекстУничтожить="";
		
		Для Каждого Таблица ИЗ МассивТаблицПоказателейРаскрытия Цикл
			ТекстУничтожить=ТекстУничтожить+"Уничтожить "+Таблица+"
			|;";
		КонецЦикла;
		
		ЗапросДанныеРаскрытия.Текст=ТекстУничтожить;
		ЗапросДанныеРаскрытия.Выполнить();
		
		МассивТаблицПоказателейРаскрытия.Очистить();
		
	КонецЕсли;
	
	Возврат ТекТаблицаРаскрытия;
	
КонецФункции // ПолучитьТаблицуРаскрытияДляСтроки() 

#КонецОбласти


#Область ИзмененияПриРедактировании

Процедура ОбновитьСтрокиРаскрытияВТаблице(ТекРасшифровка,ТекЭкземплярОтчета) Экспорт
	
	СтрокиРазгруппированы=Ложь;
	МассивУдаленныхСтрокКПередаче=Новый Массив;
    МассивДобавленныхСтрокКПередаче=Новый Массив;
	ДанныеИзмененнойЯчейки=ТекРасшифровка;
	
	ИзмененныеАналитикиРаскрытия=ПолучитьИзмененныеПоказателиРаскрытия(ТекЭкземплярОтчета);
	ИзмененныеАналитикиРаскрытия.Колонки.Добавить("ИндексАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	ИзмененныеАналитикиРаскрытия.Колонки.Добавить("ИндексАналитикиДляПоиска",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
		
	Для Каждого СтрАналитика ИЗ ИзмененныеАналитикиРаскрытия Цикл
		СтрАналитика.ИндексАналитики=ПолучитьИндексАналитик(СтрАналитика);
		СтрАналитика.ИндексАналитикиДляПоиска=?(СтрАналитика.Показатель=ТекРасшифровка.Показатель,ТекРасшифровка.ИндексАналитики,"");
	КонецЦикла;
	
	ИзмененыСтроки=Ложь;
	
	ЗапросКоординаты.Текст="";
	ТаблицаКоординатПомещенаВЗапрос=Ложь;
	
	Если УправляемыйРежим Тогда
		ЗапросКоординаты.Текст="ВЫБРАТЬ * Поместить ТабКоординатыОбщ ИЗ &ТабКоординатыОбщ КАК ТабКоординатыОбщ
		|;
		|ВЫБРАТЬ Строка, Колонка, Ссылка
		|ПОМЕСТИТЬ СтрокаКолонка
		|ИЗ &мПоказателиЭталон КАК мПоказателиЭталон
		|ИНДЕКСИРОВАТЬ ПО Строка, Колонка, Ссылка
		|;";
		
		ЗапросКоординаты.УстановитьПараметр("мПоказателиЭталон",мПоказателиЭталон);
		ЗапросКоординаты.УстановитьПараметр("ТабКоординатыОбщ",ТабКоординатыОбщ);
		
	КонецЕсли;
	
	Если НЕ ИзмененныеАналитикиРаскрытия.Найти(1,"ИндексОперации") = Неопределено Тогда
	
		///////////////////////////////////////////////////////////////////////////////////////////////
		// Добавляем в таблицу необходимые строки
		
		ТекстСвязи="";
		
		ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"
		|ВЫБРАТЬ";
		
		ТекстИндекс="";
		КолонокИндекса=4;
		
		Для Каждого СтрГруппировка ИЗ ГруппировкиСтроки Цикл
			
			Если СтрГруппировка.Группировка="Строка" Тогда
				Продолжить;
			КонецЕсли;
			
			ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"
			|&"+СтрГруппировка.Группировка+" КАК "+СтрГруппировка.Группировка+",";
			
			ЗапросКоординаты.УстановитьПараметр(СтрГруппировка.Группировка,ТекРасшифровка[СтрГруппировка.Группировка]);
			
			ТекстСвязи=ТекстСвязи+"
			|СтрокиКДобавлениюСвод."+СтрГруппировка.Группировка+"=ТабКоординатыОбщ_1."+СтрГруппировка.Группировка+"
			|И ";
			
			ЧислоКолонокИндекса=?(СтрНайти(СтрГруппировка.Группировка,"Аналитика")>0,3,1);
			
			Если (КолонокИндекса+ЧислоКолонокИндекса)<=16 Тогда
				
				ТекстИндекс=ТекстИндекс+","+СтрГруппировка.Группировка;
				КолонокИндекса=КолонокИндекса+ЧислоКолонокИндекса;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"
		|ИзмененныеАналитикиРаскрытия.*
		|Поместить СтрокиКДобавлению
		|ИЗ &ИзмененныеАналитикиРаскрытия КАК ИзмененныеАналитикиРаскрытия
		|ГДЕ ИзмененныеАналитикиРаскрытия.ИндексОперации=1
		|ИНДЕКСИРОВАТЬ ПО Показатель,ЭкземплярОтчета,ИндексАналитикиДляПоиска,ИндексАналитики"+ТекстИндекс+"
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|ТабКоординатыОбщ.*,";
		
		Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"		
			|СтрокиКДобавлениюСвод.Аналитика"+ИндексАналитики+" КАК Аналитика"+ИндексАналитики+"Нов,";
			
		КонецЦикла;
		
		ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"
		|СтрокиКДобавлениюСвод.ИндексАналитики КАК ИндексАналитикиНов,
		|ТабКоординатыОбщ_1.ИндексАналитики КАК ИндексАналитикиТек,
		|СтрокиКДобавлениюСвод.ИндексАналитикиДляПоиска КАК ИндексАналитикиДляПоиска,
		|СтрокиКДобавлениюСвод.Строка
		|ИЗ 
		|(ВЫБРАТЬ
		|СтрокиКДобавлению.*,
		|СтрокаКолонка.Строка КАК Строка
		|ИЗ СтрокиКДобавлению КАК СтрокиКДобавлению
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтрокаКолонка КАК СтрокаКолонка
		|ПО СтрокиКДобавлению.Показатель=СтрокаКолонка.Ссылка) КАК СтрокиКДобавлениюСвод
		|ЛЕВОЕ СОЕДИНЕНИЕ ТабКоординатыОбщ КАК ТабКоординатыОбщ
		|ПО СтрокиКДобавлениюСвод.ЭкземплярОтчета=ТабКоординатыОбщ.ЭкземплярОтчета
		|И СтрокиКДобавлениюСвод.Показатель=ТабКоординатыОбщ.Показатель
		|И СтрокиКДобавлениюСвод.ИндексАналитикиДляПоиска=ТабКоординатыОбщ.ИндексАналитики
		|ЛЕВОЕ СОЕДИНЕНИЕ ТабКоординатыОбщ КАК ТабКоординатыОбщ_1
		|ПО"+ТекстСвязи+"СтрокиКДобавлениюСвод.Строка=ТабКоординатыОбщ_1.Строка
		|И СтрокиКДобавлениюСвод.ИндексАналитики=ТабКоординатыОбщ_1.ИндексАналитики	
		|УПОРЯДОЧИТЬ ПО СтрокиКДобавлениюСвод.ИндексАналитикиДляПоиска УБЫВ, ТабКоординатыОбщ.НомерСтроки";
		
		ЗапросКоординаты.УстановитьПараметр("ИзмененныеАналитикиРаскрытия",ИзмененныеАналитикиРаскрытия);
		
		СтрокиКДобавлению=ЗапросКоординаты.Выполнить().Выгрузить();
		ТаблицаКоординатПомещенаВЗапрос=Истина;
		
		Если ВыводитьВДерево Тогда
			
			Если НЕ ДобавитьСтрокиРаскрытияДерево(СтрокиКДобавлению) Тогда
				ЗапросКоординаты.Текст="Уничтожить СтрокиКДобавлению
				|;";
				ЗапросКоординаты.Выполнить();
			Иначе
				ИзмененыСтроки=Истина;
			КонецЕсли;
	
		Иначе
			
			Если НЕ ДобавитьСтрокиРаскрытия(СтрокиКДобавлению) Тогда
				ЗапросКоординаты.Текст="Уничтожить СтрокиКДобавлению
				|;";
				ЗапросКоординаты.Выполнить();
			Иначе
				ИзмененыСтроки=Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
			
	ПолучитьИзмененныеПоказатели(ТекЭкземплярОтчета,1);
	МассивОтчетов=Новый Массив;
	МассивОтчетов.Добавить(ТекЭкземплярОтчета);
	
	ОтобразитьДанныеОтчетов(МассивОтчетов,Истина);
			
	Если НЕ ИзмененныеАналитикиРаскрытия.Найти(-1,"ИндексОперации") = Неопределено Тогда
		
		///////////////////////////////////////////////////////////////////////////////////////////////
		// Удаляем из таблицы необходимые строки
		
		ТекстСвязи="";
		
		ЗапросКоординаты.Текст="";
		
		Если УправляемыйРежим И (НЕ ТаблицаКоординатПомещенаВЗапрос) Тогда
			ЗапросКоординаты.Текст="ВЫБРАТЬ * Поместить ТабКоординатыОбщ ИЗ &ТабКоординатыОбщ КАК ТабКоординатыОбщ
			|;
			|ВЫБРАТЬ Строка, Колонка, Ссылка
			|ПОМЕСТИТЬ СтрокаКолонка
			|ИЗ &мПоказателиЭталон КАК мПоказателиЭталон
			|ИНДЕКСИРОВАТЬ ПО Строка, Колонка, Ссылка
			|;";
						
		КонецЕсли;
				
		ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+"
		|ВЫБРАТЬ
		|ИзмененныеАналитикиРаскрытия.*
		|Поместить СтрокиКУдалению
		|ИЗ &ИзмененныеАналитикиРаскрытия КАК ИзмененныеАналитикиРаскрытия
		|ГДЕ ИзмененныеАналитикиРаскрытия.ИндексОперации=-1
		|ИНДЕКСИРОВАТЬ ПО ЭкземплярОтчета,Показатель,ИндексАналитики
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|ТабКоординатыОбщ.*,
		|СтрокиКУдалению.ИндексАналитики КАК ИндексАналитикиУд
		|ИЗ 
		|СтрокиКУдалению КАК СтрокиКУдалению
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабКоординатыОбщ КАК ТабКоординатыОбщ
		|ПО СтрокиКУдалению.ЭкземплярОтчета=ТабКоординатыОбщ.ЭкземплярОтчета
		|И СтрокиКУдалению.Показатель=ТабКоординатыОбщ.Показатель
		|И СтрокиКУдалению.ИндексАналитики=ТабКоординатыОбщ.ИндексАналитики
		|УПОРЯДОЧИТЬ ПО ТабКоординатыОбщ.НомерСтроки Убыв";
		
		ЗапросКоординаты.УстановитьПараметр("ИзмененныеАналитикиРаскрытия",ИзмененныеАналитикиРаскрытия);	
		СтрокиКУдалению=ЗапросКоординаты.Выполнить().Выгрузить();
		ТаблицаКоординатПомещенаВЗапрос=Истина;
		
		Если ВыводитьВДерево Тогда
			
			Если НЕ УдалитьСтрокиРаскрытияДерево(СтрокиКУдалению) Тогда
				ЗапросКоординаты.Текст="Уничтожить СтрокиКУдалению
				|;";
				ЗапросКоординаты.Выполнить();
			Иначе
				ИзмененыСтроки=Истина;
			КонецЕсли;
			
		Иначе
			
			Если НЕ УдалитьСтрокиРаскрытия(СтрокиКУдалению) Тогда
				ЗапросКоординаты.Текст="Уничтожить СтрокиКУдалению
				|;";
				ЗапросКоординаты.Выполнить();
			Иначе
				ИзмененыСтроки=Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если УправляемыйРежим И ТаблицаКоординатПомещенаВЗапрос Тогда
		
		ТабКоординатыОбщ=ПолучитьТаблицуИЗЗапроса(ЗапросКоординаты,"ТабКоординатыОбщ");
		//
		//Если ТаблицаКоординатПомещенаВЗапрос Тогда
		//	
		//	ЗапросКоординаты.Текст="Уничтожить ТабКоординатыОбщ
		//	|;
		//	|Уничтожить СтрокаКолонка";
		//	ЗапросКоординаты.Выполнить();
		//	ТаблицаКоординатПомещенаВЗапрос=Ложь;
		//	
		//КонецЕсли;
		
	КонецЕсли;
	
	Если ВыводитьВДерево Тогда
		Возврат;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////////////
	/// Обновляем таблицы координат и группировки
	
	Если ИзмененыСтроки Тогда
		
		ТекстСтроки="";
		Для Каждого Колонка ИЗ ТабКоординатыСтрок.Колонки Цикл
			
			Если Колонка.Имя="ИмяГруппировки" Тогда
				Продолжить;
			КонецЕсли;
			
			Если Колонка.Имя="УровеньСтроки" Тогда
				ТекстСтроки=ТекстСтроки+",
				|ВЫБОР КОГДА ТабКоординатыОбщ.Строка=Значение(Справочник.СтрокиОтчетов.ПустаяСсылка)
				|ТОГДА ЛОЖЬ
				|ИНАЧЕ ИСТИНА КОНЕЦ КАК УровеньСтроки";
				
			Иначе	
				ТекстСтроки=ТекстСтроки+",
				|ТабКоординатыОбщ."+Колонка.Имя+" КАК "+Колонка.Имя;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗапросКоординаты.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ "+Сред(ТекстСтроки,2)+"
		|ИЗ ТабКоординатыОбщ КАК ТабКоординатыОбщ
		|УПОРЯДОЧИТЬ ПО ТабКоординатыОбщ.НомерСтроки";
		
		ТабКоординатыСтрок=ЗапросКоординаты.Выполнить().Выгрузить();
		
		Если ГруппироватьПоИерархииСтрок Тогда	
			СгруппироватьСтрокиПоИерархии();
		КонецЕсли;
		
		СгруппироватьСтрокиДокумента();
		
		СтрокиРазгруппированы=Ложь;
		
	КонецЕсли;
						
КонецПроцедуры // 

Функция УдалитьСтрокиРаскрытия(СтрокиКУдалению)
	
	УдаленоСтрок=0;	
	
	ТекстОбновление="";
	ТекстОбновлениеНачалоГруппы="";
	ТекстОбновлениеКонецГруппы="";
	ТекстВыбор="";
		
	МассивУдаленныхСтрок=Новый Массив;
	СтрокиКУдалению.Колонки.Добавить("Удалена",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	Для Каждого СтрАналитика ИЗ СтрокиКУдалению Цикл
		
		Если (НЕ МассивУдаленныхСтрок.Найти(СтрАналитика.НомерСтроки)=Неопределено)
			ИЛИ СтрАналитика.НомерСтроки=0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьДанныеАналитики=Ложь;
		
		Для Индекс=ПерваяКолонка ПО ТабДок.ШиринаТаблицы Цикл
			
			ОбластьЗначения=ТабДок.Область(СтрАналитика.НомерСтроки,Индекс,СтрАналитика.НомерСтроки,Индекс);
			
			Если ОбластьЗначения.СодержитЗначение И ОбластьЗначения.Значение<>0 Тогда
				ЕстьДанныеАналитики=Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьДанныеАналитики Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не СтрокиРазгруппированы Тогда
			РазгруппироватьСтрокиДокумента();
		КонецЕсли;
				
		МассивУдаленныхСтрок.Добавить(СтрАналитика.НомерСтроки);
		СтрАналитика.Удалена=Истина;
				
		////////////////////////////////////////////////////////////////////////////////////////////
		// Удалим данные о группах, если удаляемая строка является единственной в группе
		
		СтруктураПоиска=Новый Структура;
		
		Для Каждого Группировка ИЗ ГруппировкиСтроки Цикл
						
			СтруктураПоиска.Вставить(Группировка.Группировка,СтрАналитика[Группировка.Группировка]);
			
		КонецЦикла;
		
		МассивГруппа=ТабРаскрытиеГруппСтроки.НайтиСтроки(СтруктураПоиска);
		
		Если МассивГруппа.Количество()>0 Тогда
						
			СтрГруппа=МассивГруппа[0]; 
			Если СтрГруппа.НачалоГруппы=СтрГруппа.КонецГруппы Тогда
				
				ТабРаскрытиеГруппСтроки.Удалить(СтрГруппа);
				
			КонецЕсли;
					
		КонецЕсли;
						
		/////////////////////////////////////////////////////////////////////////////////	
		
		ТабДок.УдалитьОбласть(ТабДок.Область("R"+Формат(СтрАналитика.НомерСтроки,"ЧГ=0")),ТипСмещенияТабличногоДокумента.ПоВертикали);
							
	КонецЦикла;
	
	Если МассивУдаленныхСтрок.Количество()=0 Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	СтрокиКУдалению.Сортировать("НомерСтроки Возр");
	
	Для Каждого СтрАналитика ИЗ СтрокиКУдалению Цикл
		
		Если НЕ СтрАналитика.Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстОбновление=СтрЗаменить(ТекстОбновление,"##", " И ТабКоординатыОбщ.НомерСтроки<="+Формат(СтрАналитика.НомерСтроки,"ЧГ=0")); 
		ТекстОбновлениеНачалоГруппы=СтрЗаменить(ТекстОбновлениеНачалоГруппы,"##", " И ТабРаскрытиеГруппСтроки.НачалоГруппы<="+Формат(СтрАналитика.НомерСтроки,"ЧГ=0"));
		ТекстОбновлениеКонецГруппы=СтрЗаменить(ТекстОбновлениеКонецГруппы,"##", " И ТабРаскрытиеГруппСтроки.НачалоГруппы<="+Формат(СтрАналитика.НомерСтроки,"ЧГ=0"));
		
		УдаленоСтрок=УдаленоСтрок+1;

		ТекстОбновление=ТекстОбновление+"
		|Когда ТабКоординатыОбщ.НомерСтроки>"+Формат(СтрАналитика.НомерСтроки,"ЧГ=0")+"##"+"
		|Тогда (ТабКоординатыОбщ.НомерСтроки-"+Формат(УдаленоСтрок,"ЧГ=0")+")";
		
		ТекстОбновлениеНачалоГруппы=ТекстОбновлениеНачалоГруппы+"
		|Когда ТабРаскрытиеГруппСтроки.НачалоГруппы>"+Формат(СтрАналитика.НомерСтроки,"ЧГ=0")+"##"+"
		|Тогда (ТабРаскрытиеГруппСтроки.НачалоГруппы-"+Формат(УдаленоСтрок,"ЧГ=0")+")";
		
		ТекстОбновлениеКонецГруппы=ТекстОбновлениеКонецГруппы+"
		|Когда ТабРаскрытиеГруппСтроки.НачалоГруппы>"+Формат(СтрАналитика.НомерСтроки,"ЧГ=0")+"##"+"
		|Тогда (ТабРаскрытиеГруппСтроки.КонецГруппы-"+Формат(УдаленоСтрок,"ЧГ=0")+")&&&&";
		
		ТекстВыбор=ТекстВыбор+" 
		|- ВЫБОР КОГДА ТабРаскрытиеГруппСтроки.НачалоГруппы<="+Формат(СтрАналитика.НомерСтроки,"ЧГ=0")+"
		|И ТабРаскрытиеГруппСтроки.КонецГруппы>="+Формат(СтрАналитика.НомерСтроки,"ЧГ=0")+"
		|ТОГДА 1 ИНАЧЕ 0 КОНЕЦ";
			
	КонецЦикла;	
	
	/////////////////////////////////////////////////////////////////////////////////////////////////
	//Обновим границы группировок
	ТекстОбновлениеНачалоГруппы=СтрЗаменить(ТекстОбновлениеНачалоГруппы,"##","");
	ТекстОбновлениеКонецГруппы=СтрЗаменить(ТекстОбновлениеКонецГруппы,"##","");
	ТекстОбновлениеКонецГруппы=СтрЗаменить(ТекстОбновлениеКонецГруппы,"&&&&",ТекстВыбор);
	
	ЗапросГруппировкиСтрок=Новый Запрос;
	ЗапросГруппировкиСтрок.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	ЗапросГруппировкиСтрок.Текст="Выбрать * Поместить ТабРаскрытиеГруппСтроки ИЗ &ТабРаскрытиеГруппСтроки КАК ТабРаскрытиеГруппСтроки
	|;
	|ВЫБРАТЬ";
	
	ТекстГруппировки="";
	
	Для Каждого Колонка ИЗ ТабРаскрытиеГруппСтроки.Колонки Цикл
		
		Если Колонка.Имя="НачалоГруппы" ИЛИ Колонка.Имя="КонецГруппы" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстГруппировки=ТекстГруппировки+"
		|ТабРаскрытиеГруппСтроки."+Колонка.Имя+" КАК "+Колонка.Имя+",";
				
	КонецЦикла;
	
	ЗапросГруппировкиСтрок.Текст=ЗапросГруппировкиСтрок.Текст+ТекстГруппировки+"
	|ВЫБОР"+ТекстОбновлениеНачалоГруппы+"
	|ИНАЧЕ ТабРаскрытиеГруппСтроки.НачалоГруппы КОНЕЦ КАК НачалоГруппы,
	|ВЫБОР"+ТекстОбновлениеКонецГруппы+"
	|ИНАЧЕ ТабРаскрытиеГруппСтроки.КонецГруппы"+ТекстВыбор+" КОНЕЦ КАК КонецГруппы
	|ИЗ ТабРаскрытиеГруппСтроки КАК ТабРаскрытиеГруппСтроки
	|ГДЕ ТабРаскрытиеГруппСтроки.УровеньГруппировки>&УровеньСтрока
	|УПОРЯДОЧИТЬ ПО ТабРаскрытиеГруппСтроки.УровеньГруппировки";
	
	ЗапросГруппировкиСтрок.УстановитьПараметр("ТабРаскрытиеГруппСтроки",ТабРаскрытиеГруппСтроки);
	ЗапросГруппировкиСтрок.УстановитьПараметр("УровеньСтрока",УровеньСтрока);
	ТабРаскрытиеГруппСтроки=ЗапросГруппировкиСтрок.Выполнить().Выгрузить();
		
	///////////////////////////////////////////////////////////////////////////////////////////////
	
	
	ТекстОбновление=СтрЗаменить(ТекстОбновление,"##","");
		
	ТекстКоординатыОбщ="";
	ТекстКоординатыНов="";
	ТекстКоординатыИтог="";
	
	Для Каждого Колонка ИЗ ШаблонКоординаты.Колонки Цикл
		
		Если Колонка.Имя="НомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстКоординатыОбщ=ТекстКоординатыОбщ+"
		|ТабКоординатыОбщ."+Колонка.Имя+" КАК "+Колонка.Имя+",";
									
	КонецЦикла;
	
	ЗапросКоординаты.Текст="ВЫБРАТЬ"+ТекстКоординатыОбщ+"
	|ВЫБОР"+ТекстОбновление+"
	|ИНАЧЕ ТабКоординатыОбщ.НомерСтроки КОНЕЦ КАК НомерСтроки
	|ПОМЕСТИТЬ ТабКоординатыТек
	|ИЗ ТабКоординатыОбщ КАК ТабКоординатыОбщ
	|ГДЕ (НЕ ТабКоординатыОбщ.НомерСтроки В (&МассивУдаленныхСтрок))
	|;
	|УНИЧТОЖИТЬ СтрокиКУдалению
	|;
	|УНИЧТОЖИТЬ ТабКоординатыОбщ
	|;
	|ВЫБРАТЬ * Поместить ТабКоординатыОбщ ИЗ ТабКоординатыТек
	|ИНДЕКСИРОВАТЬ ПО "+ПолучитьИндексыТаблицыКоординат()+"
	|;
	|Уничтожить ТабКоординатыТек
	|;"; 

	ЗапросКоординаты.УстановитьПараметр("МассивУдаленныхСтрок",МассивУдаленныхСтрок);
	ЗапросКоординаты.Выполнить();
		
	Возврат Истина;
	
КонецФункции // УдалитьСтрокиРаскрытия()

Функция УдалитьСтрокиРаскрытияДерево(СтрокиКУдалению)
	
	УдаленоСтрок=0;	
			
	МассивУдаленныхСтрок=Новый Массив;
	СтрокиКУдалению.Колонки.Добавить("Удалена",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	Для Каждого СтрАналитика ИЗ СтрокиКУдалению Цикл
		
		Если НЕ МассивУдаленныхСтрок.Найти(СтрАналитика.НомерСтроки)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьДанныеАналитики=Ложь;
		
		СтрокаДерева=ТабДерево.Строки.Найти(СтрАналитика.НомерСтроки,"НомерСтроки",Истина);
		
		Для Индекс=ПерваяКолонка-1 ПО ТабДерево.Колонки.Количество()-1 Цикл
			
			Если Индекс+1=ДанныеИзмененнойЯчейки.НомерКолонки Тогда
				
				Продолжить;
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаДерева[Индекс]) Тогда
				
				ЕстьДанныеАналитики=Истина;
				Прервать;
				
			КонецЕсли; 
						
		КонецЦикла;
		
		Если ЕстьДанныеАналитики Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураСтрока=Новый Структура;
						
		МассивУдаленныхСтрок.Добавить(СтрАналитика.НомерСтроки);
		СтрАналитика.Удалена=Истина;
		
		Родитель=СтрокаДерева.Родитель;
		
		// Для управляемого режима ////////
		
		Если УправляемыйРежим Тогда
			
			СтруктураСтрока.Вставить("АдресРодителя",ПолучитьАбсолютныйАдресСтрокиДерева(Родитель,ТабДерево));
			СтруктураСтрока.Вставить("АдресСтроки",ПолучитьАбсолютныйАдресСтрокиДерева(СтрокаДерева,ТабДерево));
			МассивУдаленныхСтрокКПередаче.Добавить(СтруктураСтрока);
			
		КонецЕсли;
		
		///////////////////////////////////
			
		Родитель.Строки.Удалить(СтрокаДерева);
		
		СтрКоордината=ТабКоординатыСтрок.Найти(СтрАналитика.НомерСтроки,"НомерСтроки");
		ТабКоординатыСтрок.Удалить(СтрКоордината);
							
	КонецЦикла;
	
	Если МассивУдаленныхСтрок.Количество()=0 Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	ТекстКоординатыОбщ="";
	
	Для Каждого Колонка ИЗ ШаблонКоординаты.Колонки Цикл
				
		ТекстКоординатыОбщ=ТекстКоординатыОбщ+",
		|ТабКоординатыОбщ."+Колонка.Имя+" КАК "+Колонка.Имя;
									
	КонецЦикла;
	
	ЗапросКоординаты.Текст="ВЫБРАТЬ"+Сред(ТекстКоординатыОбщ,2)+"
	|ПОМЕСТИТЬ ТабКоординатыТек
	|ИЗ ТабКоординатыОбщ КАК ТабКоординатыОбщ
	|ГДЕ (НЕ ТабКоординатыОбщ.НомерСтроки В (&МассивУдаленныхСтрок))
	|;
	|УНИЧТОЖИТЬ СтрокиКУдалению
	|;
	|УНИЧТОЖИТЬ ТабКоординатыОбщ
	|;
	|ВЫБРАТЬ * Поместить ТабКоординатыОбщ ИЗ ТабКоординатыТек
	|ИНДЕКСИРОВАТЬ ПО "+ПолучитьИндексыТаблицыКоординат()+"
	|;
	|Уничтожить ТабКоординатыТек
	|;"; 

	ЗапросКоординаты.УстановитьПараметр("МассивУдаленныхСтрок",МассивУдаленныхСтрок);
	ЗапросКоординаты.Выполнить();
		
	Возврат Истина;
	
КонецФункции //ДобавитьСтрокиРаскрытия()

Функция ПолучитьТаблицуИЗЗапроса(Запрос,ИмяТаблицы) Экспорт
	
	Запрос.Текст="Выбрать * ИЗ "+ИмяТаблицы;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуИЗЗапроса()

Функция ПолучитьТекстЗапросаВыборкаТаблицы(ИмяТаблицы, НомераТаблиц = Неопределено)

	Если НомераТаблиц <> Неопределено Тогда
		НомераТаблиц.Вставить(ИмяТаблицы, НомераТаблиц.Количество());
	КонецЕсли;
	
	Возврат	"ВЫБРАТЬ * ИЗ " + ИмяТаблицы;

КонецФункции

Процедура ИнициализироватьЗапросыОбъекта() Экспорт
	
	ЗапросДанные=Новый Запрос;
	ЗапросДанныеРаскрытия=Новый Запрос;
	ЗапросКоординаты=Новый Запрос;
	
	ТаблицаКоординатПомещенаВЗапрос=Ложь;
	
КонецПроцедуры // ИнициализироватьЗапросыОбъекта() 

Процедура ПоместитьТаблицыВЗапросы() Экспорт
		
	ЗапросДанные.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;	
	ЗапросДанныеРаскрытия.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;	
	ЗапросКоординаты.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса="";
		
	Для Каждого СтрТаблица ИЗ ТаблицыЗапросаДанные Цикл
		
		ТекстЗапроса=ТекстЗапроса+"
		|ВЫБРАТЬ *
		|Поместить "+СтрТаблица.Ключ+"
		|ИЗ &"+СтрТаблица.Ключ+" КАК "+СтрТаблица.Ключ+"
		|;";
		
		ЗапросДанные.УстановитьПараметр(СтрТаблица.Ключ,СтрТаблица.Значение);
		
	КонецЦикла;
	
	ЗапросДанные.Текст=ТекстЗапроса;
	ЗапросДанные.Выполнить();
	
	ТекстЗапроса="";
	
	ЗапросДанныеРаскрытия.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Для Каждого СтрТаблица ИЗ ТаблицыЗапросаРаскрытие Цикл
		
		ТекстЗапроса=ТекстЗапроса+"
		|ВЫБРАТЬ *
		|Поместить "+СтрТаблица.Ключ+"
		|ИЗ &"+СтрТаблица.Ключ+" КАК "+СтрТаблица.Ключ+"
		|;";
		
		ЗапросДанныеРаскрытия.УстановитьПараметр(СтрТаблица.Ключ,СтрТаблица.Значение);
		
	КонецЦикла;
	
	ЗапросДанныеРаскрытия.Текст=ТекстЗапроса;
	ЗапросДанныеРаскрытия.Выполнить();
				
КонецПроцедуры // ПоместитьТаблицыВЗапросы()

Процедура ВыгрузитьРасчетныеТаблицы() Экспорт
	
	// Выгрузим таблицы сводных данных
	
	ТаблицыЗапросаДанные=Новый Структура;
	ТаблицыЗапросаРаскрытие=Новый Структура;
		
	Для Каждого СтрДанные ИЗ ТабОтчетыСводная Цикл
		
		ТаблицыЗапросаДанные.Вставить(СтрДанные.ОсновнаяТаблица_мПоказатели,ПолучитьТаблицуИЗЗапроса(ЗапросДанные,СтрДанные.ОсновнаяТаблица_мПоказатели));
		
		Если ЗначениеЗаполнено(СтрДанные.ОсновнаяТаблица_мПоказателиРаскрытия) Тогда
			
			ТаблицыЗапросаРаскрытие.Вставить(СтрДанные.ОсновнаяТаблица_мПоказателиРаскрытия,ПолучитьТаблицуИЗЗапроса(ЗапросДанныеРаскрытия,СтрДанные.ОсновнаяТаблица_мПоказателиРаскрытия));
			
		КонецЕсли;
		
		Для Каждого СтрДанныеВалюта ИЗ СтрДанные.Таблицы_мПоказателиВВалюте Цикл
			
			ТаблицыЗапросаДанные.Вставить(СтрДанныеВалюта.Значение,ПолучитьТаблицуИЗЗапроса(ЗапросДанные,СтрДанныеВалюта.Значение));
			
		КонецЦикла;
		
		Для Каждого СтрДанныеВалюта ИЗ СтрДанные.Таблицы_мПоказателиРаскрытияВВалюте Цикл
			
			ТаблицыЗапросаРаскрытие.Вставить(СтрДанныеВалюта.Значение,ПолучитьТаблицуИЗЗапроса(ЗапросДанныеРаскрытия,СтрДанныеВалюта.Значение));
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если НЕ ТабОтчеты.Найти(Ложь,"ОтчетИнициализирован")=Неопределено Тогда
		
		ТаблицыЗапросаДанные.Вставить("мПоказателиКонтекст",ПолучитьТаблицуИЗЗапроса(ЗапросДанные,"мПоказателиКонтекст"));
		
		Если ДанныеРаскрытияИнициализированы Тогда
			
			ТаблицыЗапросаРаскрытие.Вставить("мПоказателиРаскрытияКонтекст",ПолучитьТаблицуИЗЗапроса(ЗапросДанныеРаскрытия,"мПоказателиРаскрытияКонтекст"));
			
		КонецЕсли; 
			
	КонецЕсли;
	
	ТаблицыЗапросаДанные.Вставить("ТабПоказатели",ПолучитьТаблицуИЗЗапроса(ЗапросДанные,"ТабПоказатели"));
	ТаблицыЗапросаДанные.Вставить("СтрокиОтчетов",ПолучитьТаблицуИЗЗапроса(ЗапросДанные,"СтрокиОтчетов"));
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
	Для Каждого СтрРаскрытие ИЗ ТаблицаРаскрытийСтрок Цикл
		
		Для Каждого СтрРаскрытиеСтрока ИЗ СтрРаскрытие.ТабРаскрытиеСтроки Цикл
			
			ТаблицыЗапросаРаскрытие.Вставить(СтрРаскрытиеСтрока.ИмяТаблицыВОсновнойВалюте,ПолучитьТаблицуИЗЗапроса(ЗапросДанныеРаскрытия,СтрРаскрытиеСтрока.ИмяТаблицыВОсновнойВалюте));
			
			Для Каждого СтрДанныеВалюта ИЗ СтрРаскрытиеСтрока.ИменаТаблицВВалюте Цикл
				
				ТаблицыЗапросаРаскрытие.Вставить(СтрДанныеВалюта.Значение,ПолучитьТаблицуИЗЗапроса(ЗапросДанныеРаскрытия,СтрДанныеВалюта.Значение));
				
			КонецЦикла;
			
		КонецЦикла;
		
		ПрефиксТаблицы="Раскрытие_"+Формат(СтрРаскрытие.НомерСтроки,"ЧГ=0");
		ТаблицыЗапросаРаскрытие.Вставить("мПоказателиРаскрытияКонтекст_"+ПрефиксТаблицы,ПолучитьТаблицуИЗЗапроса(ЗапросДанныеРаскрытия,"мПоказателиРаскрытияКонтекст_"+ПрефиксТаблицы));
		
	КонецЦикла;
	
	ТаблицыЗапросаРаскрытие.Вставить("ТабПоказатели",ПолучитьТаблицуИЗЗапроса(ЗапросДанныеРаскрытия,"ТабПоказатели"));
		
	ТабКоординатыОбщ=ПолучитьТаблицуИЗЗапроса(ЗапросКоординаты,"ТабКоординатыОбщ");
	
	ЗапросДанные.МенеджерВременныхТаблиц.Закрыть();
	ЗапросДанныеРаскрытия.МенеджерВременныхТаблиц.Закрыть();
	ЗапросКоординаты.МенеджерВременныхТаблиц.Закрыть();
		
КонецПроцедуры // ВыгрузитьРасчетныеТаблицы() 

Процедура ОчиститьРасчетныеТаблицы()
	
	ТаблицыЗапросаДанные=Новый Структура;
	ТаблицыЗапросаРаскрытие=Новый Структура;
		
КонецПроцедуры // ОчиститьРасчетныеТаблицы() 

#КонецОбласти


#Область ОбработкаКоординат

Функция ПолучитьИндексыТаблицыКоординат()
	
	ТекстИндекс="НомерСтроки,НомерКолонки,Показатель,ЭкземплярОтчета,Раскрытие";
	КолонокИндекса=5;
	
	
	Для Каждого Группировка ИЗ МассивГруппировокСтрокИтог Цикл
		
		Если СтрНайти(ТекстИндекс,Группировка)=0 Тогда
			
			ЧислоКолонокИндекса=?(СтрНайти(Группировка,"Аналитика")>0,3,1);
			
			Если (КолонокИндекса+ЧислоКолонокИндекса)<=16 Тогда 
				
				ТекстИндекс=ТекстИндекс+","+Группировка;
				КолонокИндекса=КолонокИндекса+ЧислоКолонокИндекса;
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Группировка ИЗ МассивГруппировокКолонокИтог Цикл
		
		Если СтрНайти(ТекстИндекс,Группировка)=0 Тогда
			
			ЧислоКолонокИндекса=?(СтрНайти(Группировка,"Аналитика")>0,3,1);
			
			Если (КолонокИндекса+ЧислоКолонокИндекса)<=16 Тогда 
				
				ТекстИндекс=ТекстИндекс+","+Группировка;
				КолонокИндекса=КолонокИндекса+ЧислоКолонокИндекса;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекстИндекс; 
		
КонецФункции // ПолучитьИндексыТаблицыКоординат() 

Функция ВернутьМассивКоординат(СтруктураПоиска) Экспорт
	
	Если ЗапросКоординаты=Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если УправляемыйРежим Тогда
		Возврат ТабКоординатыОбщ.НайтиСтроки(СтруктураПоиска);
	Иначе
		
		ЗапросКоординаты.Текст="
		|ВЫБРАТЬ *
		|ИЗ ТабКоординатыОбщ КАК ТабКоординатыОбщ
		|ГДЕ ";
		
		ТекстОтбор="";
		
		Для Каждого КлючИЗначение ИЗ СтруктураПоиска Цикл
			
			ТекстОтбор=ТекстОтбор+" И ТабКоординатыОбщ."+КлючИЗначение.Ключ+"=&"+КлючИЗначение.Ключ;
			ЗапросКоординаты.УстановитьПараметр(КлючИЗначение.Ключ,КлючИЗначение.Значение);
			
		КонецЦикла;
		
		ЗапросКоординаты.Текст=ЗапросКоординаты.Текст+Сред(ТекстОтбор,4);
		
		Возврат ЗапросКоординаты.Выполнить().Выгрузить();
		
	КонецЕсли;
	
КонецФункции // ВернутьМассивКоординат()

Функция ВернутьЗначениеОбласти(Область) Экспорт
	
	Если Область.СодержитЗначение=Истина И ТипЗнч(Область.Значение)=Тип("Число") Тогда
		Возврат Область.Значение;
	Иначе
		Возврат 0;
	КонецЕсли;
		
КонецФункции // ВернутьЗначениеОбласти()

Функция ПолучитьЦветОтклонения(ИмяГруппировки,Строка,Колонка,Знач Отклонение)
		
	СтрПоказатели=ВернутьМассивКоординат(Новый Структура("НомерСтроки,НомерКолонки",Строка,Колонка));
	
	Если СтрПоказатели.Количество()=0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекОценка=ОценкиОтклоненийПоказателей[СтрПоказатели[0].Показатель];
	
	Если ТекОценка=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Определим таблицу, по которой будем искать цвет
	
	Если ИмяГруппировки="ОтклонениеАбс" Тогда
		
		Если (ТекОценка=Перечисления.ВидыОценокОтклонений.Позитивно И Отклонение>0) 
			ИЛИ (ТекОценка=Перечисления.ВидыОценокОтклонений.Негативно И Отклонение<0) Тогда
			
			ТаблицаОтклонений=ТабГраницыОформленияПозитивАбс;
			
		Иначе
			
			ТаблицаОтклонений=ТабГраницыОформленияНегативАбс;
			
		КонецЕсли;
		
		ТекОтклонение=ОбщегоНазначенияУХ.ЗначениеПоМодулю(Отклонение)*ТекущийДелитель;
		
	ИначеЕсли ИмяГруппировки="ОтклонениеОтн" Тогда
		
		Если (ТекОценка=Перечисления.ВидыОценокОтклонений.Позитивно И Отклонение>0) 
			ИЛИ (ТекОценка=Перечисления.ВидыОценокОтклонений.Негативно И Отклонение<0) Тогда
			
			ТаблицаОтклонений=ТабГраницыОформленияПозитивОтн;
			
		Иначе
			
			ТаблицаОтклонений=ТабГраницыОформленияНегативОтн;
			
		КонецЕсли;
		
		ТекОтклонение=ОбщегоНазначенияУХ.ЗначениеПоМодулю(Отклонение);
		
	КонецЕсли;
	
	Если ТаблицаОтклонений.Количество()=0 Тогда // Не было установлено условное оформление
		
		Возврат Неопределено;
		
	КонецЕсли;
		
	Если ТекОтклонение<=ТаблицаОтклонений[0].Граница Тогда
		
		Возврат ТаблицаОтклонений[0].Цвет;
		
	ИначеЕсли ТекОтклонение>ТаблицаОтклонений[0].Граница И ТекОтклонение<=ТаблицаОтклонений[1].Граница Тогда
		
		Возврат ТаблицаОтклонений[1].Цвет;
		
	Иначе
		
		Возврат ТаблицаОтклонений[2].Цвет;
		
	КонецЕсли;	
		
КонецФункции // ПолучитьЦветОтклонения() 

Процедура ОбновитьВычисляемыеЯчейки(НомерСтроки)
	
	Для Каждого СтрокаКВычислению ИЗ ГруппировкиВычисляемыеКолонки Цикл
		
		Если НЕ СтрокаКВычислению.Отображать Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		КолонкиКВычислению=ТабКоординатыВычисляемыхКолонок.НайтиСтроки(Новый Структура("ИмяКолонки",СтрокаКВычислению.Группировка));
		
		Для Каждого СтрКолонка ИЗ КолонкиКВычислению Цикл
			
			ТекЗначение=ВернутьЗначениеОбласти(ТабДок.Область(НомерСтроки,СтрКолонка.НомерКолонкиЗначение,НомерСтроки,СтрКолонка.НомерКолонкиЗначение));
			
			Если СтрокаКВычислению.Группировка="ДоляВИтогеПоГруппировке" Тогда
				
				ТекБазис=ВернутьЗначениеОбласти(ТабДок.Область(НомерСтроки,СтрКолонка.НомерКолонкиИтог,НомерСтроки,СтрКолонка.НомерКолонкиИтог));	
				
				ВычисленноеЗначение=?(ТекБазис=0,0,ТекЗначение/ТекБазис)*100;
				
			ИначеЕсли СтрокаКВычислению.Группировка="ОтклонениеАбс" Тогда
				
				ТекБазис=ВернутьЗначениеОбласти(ТабДок.Область(НомерСтроки,СтрКолонка.НомерКолонкиБазис,НомерСтроки,СтрКолонка.НомерКолонкиБазис));
				
				ВычисленноеЗначение=ТекЗначение-ТекБазис;
				
			ИначеЕсли СтрокаКВычислению.Группировка="ОтклонениеОтн" Тогда
				
				ТекБазис=ВернутьЗначениеОбласти(ТабДок.Область(НомерСтроки,СтрКолонка.НомерКолонкиБазис,НомерСтроки,СтрКолонка.НомерКолонкиБазис));
				
				ВычисленноеЗначение=?(ТекБазис=0,0,(ТекЗначение-ТекБазис)/ТекБазис)*100;
				
			ИначеЕсли СтрокаКВычислению.Группировка="ДоляВИтогеПоПериметру" Тогда
				
				ТекБазис=ВернутьЗначениеОбласти(ТабДок.Область(НомерСтроки,СтрКолонка.НомерКолонкиБазис,НомерСтроки,СтрКолонка.НомерКолонкиБазис));
				
				ВычисленноеЗначение=?(ТекБазис=0,0,ТекЗначение/ТекБазис)*100;
				
			КонецЕсли;
			
			ОбластьЗначение=ТабДок.Область(НомерСтроки,СтрКолонка.НомерКолонки,НомерСтроки,СтрКолонка.НомерКолонки);
			Если ОбластьЗначение.СодержитЗначение=Истина Тогда
				
				Если СтрокаКВычислению.УсловноеОформление И ВычисленноеЗначение<>0 Тогда
					
					ЦветОтклонения=ПолучитьЦветОтклонения(СтрокаКВычислению.Группировка,НомерСтроки,СтрКолонка.НомерКолонкиБазис,ВычисленноеЗначение);
					
					Если ЦветОтклонения<>Неопределено Тогда
						
						ОбластьЗначение.ЦветТекста=ЦветОтклонения;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ОбластьЗначение.Значение=ВычисленноеЗначение;
				
				Если УправляемыйРежим Тогда
					
					СтруктураЯчейка=Новый Структура;
					СтруктураЯчейка.Вставить("Верх",НомерСтроки);
					СтруктураЯчейка.Вставить("Лево",СтрКолонка.НомерКолонки);
					СтруктураЯчейка.Вставить("Значение",ВычисленноеЗначение);
					СтруктураЯчейка.Вставить("ЗначениеИзменения",ВычисленноеЗначение);
					
					МассивИзмененныхОбластей.Добавить(СтруктураЯчейка);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры // ОбновитьВычисляемыеЯчейки() 

Процедура ОбновитьВычисляемыеЯчейкиДерева(НомерСтроки)
	
	Для Каждого СтрокаКВычислению ИЗ ГруппировкиВычисляемыеКолонки Цикл
		
		Если НЕ СтрокаКВычислению.Отображать Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		КолонкиКВычислению=ТабКоординатыВычисляемыхКолонок.НайтиСтроки(Новый Структура("ИмяКолонки",СтрокаКВычислению.Группировка));
		
		Для Каждого СтрКолонка ИЗ КолонкиКВычислению Цикл
			
			СтрДерева=ТабДерево.Строки.Найти(НомерСтроки,"НомерСтроки",Истина);
			
			ТекЗначение=ПолучитьЧисло(СтрДерева[СтрКолонка.НомерКолонкиЗначение-1]);
			
			Если СтрокаКВычислению.Группировка="ДоляВИтогеПоГруппировке" Тогда
				
				ТекБазис=ПолучитьЧисло(СтрДерева[СтрКолонка.НомерКолонкиИтог-1]);
				
				ВычисленноеЗначение=?(ТекБазис=0,0,ТекЗначение/ТекБазис)*100;
				
			ИначеЕсли СтрокаКВычислению.Группировка="ОтклонениеАбс" Тогда
				
				ТекБазис=ПолучитьЧисло(СтрДерева[СтрКолонка.НомерКолонкиБазис-1]);
				
				ВычисленноеЗначение=ТекЗначение-ТекБазис;
				
			ИначеЕсли СтрокаКВычислению.Группировка="ОтклонениеОтн" Тогда
				
				ТекБазис=ПолучитьЧисло(СтрДерева[СтрКолонка.НомерКолонкиБазис-1]);
				
				ВычисленноеЗначение=?(ТекБазис=0,0,(ТекЗначение-ТекБазис)/ТекБазис)*100;
				
			ИначеЕсли СтрокаКВычислению.Группировка="ДоляВИтогеПоПериметру" Тогда
				
				ТекБазис=ПолучитьЧисло(СтрДерева[СтрКолонка.НомерКолонкиБазис-1]);
				
				ВычисленноеЗначение=?(ТекБазис=0,0,ТекЗначение/ТекБазис)*100;
				
			КонецЕсли;
			
			СтрДерева[СтрКолонка.НомерКолонки-1]=ВычисленноеЗначение;
			
			Если УправляемыйРежим Тогда
				
				СтруктураЯчейка=Новый Структура;
				
				СтруктураЯчейка.Вставить("АдресСтроки",ПолучитьАбсолютныйАдресСтрокиДерева(СтрДерева,ТабДерево));
				СтруктураЯчейка.Вставить("АдресКолонки",СтрКолонка.НомерКолонки-1);
				СтруктураЯчейка.Вставить("Значение",СтрДерева[СтрКолонка.НомерКолонки-1]);
				
				МассивИзмененныхОбластей.Добавить(СтруктураЯчейка);
				
			КонецЕсли;
						
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры // ОбновитьВычисляемыеЯчейкиДерева() 

Процедура РассчитатьВычисляемыеКолонки(ТекИзмерение=Неопределено)
	
	Если Не ТекИзмерение=Неопределено Тогда
		
		КолонкиКОбработке=ТабКоординатыВычисляемыхКолонок.Скопировать(Новый Структура(ГруппировкаБазис,ТекИзмерение));
		
	Иначе
		
		КолонкиКОбработке=ТабКоординатыВычисляемыхКолонок;
		
	КонецЕсли;
	
	МассивКВычислению=ГруппировкиВычисляемыеКолонки.НайтиСтроки(Новый Структура("Отображать",Истина));
	
	Для Каждого СтрокаКВычислению ИЗ МассивКВычислению Цикл
		
		КолонкиКВычислению=КолонкиКОбработке.НайтиСтроки(Новый Структура("ИмяКолонки",СтрокаКВычислению.Группировка));
		
		Для Каждого СтрКолонка ИЗ КолонкиКВычислению Цикл
			
			Для Стр=ПерваяСтрока ПО ТабДок.ВысотаТаблицы Цикл
				
				ТекЗначение=ВернутьЗначениеОбласти(ТабДок.Область(Стр,СтрКолонка.НомерКолонкиЗначение,Стр,СтрКолонка.НомерКолонкиЗначение));
								
				Если СтрокаКВычислению.Группировка="ДоляВИтогеПоГруппировке" Тогда
					
					ТекБазис=ВернутьЗначениеОбласти(ТабДок.Область(Стр,СтрКолонка.НомерКолонкиИтог,Стр,СтрКолонка.НомерКолонкиИтог));	
				
					ВычисленноеЗначение=?(ТекБазис=0,0,ТекЗначение/ТекБазис)*100;
					
				ИначеЕсли СтрокаКВычислению.Группировка="ОтклонениеАбс" Тогда
					
					ТекБазис=ВернутьЗначениеОбласти(ТабДок.Область(Стр,СтрКолонка.НомерКолонкиБазис,Стр,СтрКолонка.НомерКолонкиБазис));
												
					ВычисленноеЗначение=ТекЗначение-ТекБазис;
					
				ИначеЕсли СтрокаКВычислению.Группировка="ОтклонениеОтн" Тогда
					
					ТекБазис=ВернутьЗначениеОбласти(ТабДок.Область(Стр,СтрКолонка.НомерКолонкиБазис,Стр,СтрКолонка.НомерКолонкиБазис));
						
					ВычисленноеЗначение=?(ТекБазис=0,0,(ТекЗначение-ТекБазис)/ТекБазис)*100;
					
				ИначеЕсли СтрокаКВычислению.Группировка="ДоляВИтогеПоПериметру" Тогда
					
					ТекБазис=ВернутьЗначениеОбласти(ТабДок.Область(Стр,СтрКолонка.НомерКолонкиБазис,Стр,СтрКолонка.НомерКолонкиБазис));
					
					ВычисленноеЗначение=?(ТекБазис=0,0,ТекЗначение/ТекБазис)*100;
					
				КонецЕсли;
				
				ОбластьЗначение=ТабДок.Область(Стр,СтрКолонка.НомерКолонки,Стр,СтрКолонка.НомерКолонки);
				Если ОбластьЗначение.СодержитЗначение=Истина Тогда
					
					Если СтрокаКВычислению.УсловноеОформление И ВычисленноеЗначение<>0 Тогда
						
						ЦветОтклонения=ПолучитьЦветОтклонения(СтрокаКВычислению.Группировка,Стр,СтрКолонка.НомерКолонкиБазис,ВычисленноеЗначение);
						
						Если ЦветОтклонения<>Неопределено Тогда
							
							ОбластьЗначение.ЦветТекста=ЦветОтклонения;
							
						КонецЕсли;
						
					КонецЕсли;	
					
					ОбластьЗначение.Значение=ВычисленноеЗначение;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;	
		
КонецПроцедуры // РассчитатьВычисляемыеКолонки()

Функция ПолучитьМаксимальныйНомерСтроки() Экспорт
	
	ЗапросКоординаты.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	                       |	ТабКоординатыОбщ.НомерСтроки
	                       |ИЗ
	                       |	ТабКоординатыОбщ КАК ТабКоординатыОбщ
	                       |
	                       |УПОРЯДОЧИТЬ ПО
	                       |	ТабКоординатыОбщ.НомерСтроки УБЫВ";
						   
	РезультатНомер=ЗапросКоординаты.Выполнить().Выбрать();
	
	Если РезультатНомер.Следующий() Тогда
		Возврат РезультатНомер.НомерСтроки;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьМаксимальныйНомерСтроки()

#КонецОбласти


#Область ОбработкаРасшифровки

Процедура ДобавитьРасшифровкуКолонки(НомерКолонки,Расшифровка)
	
	КоординатаКолонки=ТабКоординатыКолонок.Найти(НомерКолонки,"НомерКолонки");
	Если КоординатаКолонки=Неопределено Тогда
		КоординатаКолонки=ТабКоординатыКолонок.Добавить();
		КоординатаКолонки.НомерКолонки=НомерКолонки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(КоординатаКолонки,Расшифровка);
	
КонецПроцедуры // ДобавитьРасшифровкуКолонки()

Процедура ДобавитьРасшифровкуВычисляемойКолонки(НомерКолонки,Расшифровка)
	
	КоординатаКолонки=ТабКоординатыВычисляемыхКолонок.Найти(НомерКолонки,"НомерКолонки");
	Если КоординатаКолонки=Неопределено Тогда
		КоординатаКолонки=ТабКоординатыВычисляемыхКолонок.Добавить();
		КоординатаКолонки.НомерКолонки=НомерКолонки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(КоординатаКолонки,Расшифровка);
	
КонецПроцедуры // ДобавитьРасшифровкуКолонки()

Процедура ДобавитьРасшифровкуСтроки(НомерСтроки,Расшифровка)
	
	НоваяСтрока=ТабКоординатыСтрок.Добавить();
	НоваяСтрока.НомерСтроки=НомерСтроки;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока,Расшифровка);
	
КонецПроцедуры // ДобавитьРасшифровкуКолонки()

Процедура ДобавитьРасшифровкуСтрокиРаскрытия(НомерСтроки,РасшифровкаСтроки,СтрРаскрытия)
	
	НоваяСтрока=ТабКоординатыСтрок.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока,РасшифровкаСтроки);
	НоваяСтрока.НомерСтроки=НомерСтроки;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрРаскрытия);
	
	НоваяСтрока.Раскрытие=Истина;
	
КонецПроцедуры // ДобавитьРасшифровкуКолонки()

Функция ПолучитьРасшифровкуЯчейки(Строка,Колонка) Экспорт
	
	ТекРасшифровка=Новый Структура("НомерСтроки,НомерКолонки",Строка,Колонка);
	
	МассивРасшифровка=ВернутьМассивКоординат(ТекРасшифровка);
	
	Если МассивРасшифровка.Количество()=0 Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Для Каждого ТабКолонка ИЗ ШаблонКоординаты.Колонки Цикл
		
		ТекЗначение=МассивРасшифровка[0][ТабКолонка.Имя];
		
		Если ЗначениеЗаполнено(ТекЗначение) ИЛИ СтрНайти(ТабКолонка.Имя,"_Родитель")>0 Тогда
			ТекРасшифровка.Вставить(ТабКолонка.Имя,ТекЗначение);
		КонецЕсли;
		
	КонецЦикла;
	
	ТекРасшифровка.Вставить("ИндексАналитики",МассивРасшифровка[0].ИндексАналитики);
	ТекРасшифровка.Вставить("ЭкземплярОтчета",МассивРасшифровка[0].ЭкземплярОтчета);
			
	Если МассивРасшифровка[0].Раскрытие Тогда
		
		Для ИндексАналитика=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			ТекРасшифровка.Вставить("Аналитика"+ИндексАналитика,МассивРасшифровка[0]["Аналитика"+ИндексАналитика]);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекРасшифровка.Вставить("Раскрытие",МассивРасшифровка[0].Раскрытие);
	
	Если ТекРасшифровка.Свойство("Строка") И ТекРасшифровка.Свойство("Колонка") Тогда
		СтруктураПоиска=Новый Структура;
		СтруктураПоиска.Вставить("Строка",ТекРасшифровка.Строка);
		СтруктураПоиска.Вставить("Колонка",ТекРасшифровка.Колонка);
		
		МассивПоказателей=мПоказателиЭталон.НайтиСтроки(СтруктураПоиска);
		Если МассивПоказателей.Количество()=1 Тогда
			
			ТекРасшифровка.Вставить("Показатель",МассивПоказателей[0].Ссылка);
			ТекРасшифровка.Вставить("ТипЗначения",ОбщегоНазначенияУХ.ПолучитьОписаниеТипаПоТипуПоказателя(МассивПоказателей[0].ТипЗначения));
			ТекРасшифровка.Вставить("ЧисловойПоказатель",МассивПоказателей[0].ЧисловойПоказатель);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекРасшифровка.ЭкземплярОтчета) Тогда
		
		ТекЭкземплярОтчета=ТабОтчеты.Найти(ТекРасшифровка.ЭкземплярОтчета,"ЭкземплярОтчета");
		ПолучитьДокументОбъект(ТекЭкземплярОтчета);
		
		Если ТекЭкземплярОтчета.ОтчетИнициализирован Тогда
			
			ТекРасшифровка.Вставить("Заблокирован",Истина);
			ТекРасшифровка.Вставить("ЧтениеНеактуальныхЗаписей",ТекЭкземплярОтчета.ОтчетОбъект.ЧтениеНеактуальныхЗаписей);
			ТекРасшифровка.Вставить("НеВноситьИзменения",ТекЭкземплярОтчета.ОтчетОбъект.НеВноситьИзменения);
			ТекРасшифровка.Вставить("ВключитьРасширеннуюДиагностику",ТекЭкземплярОтчета.ОтчетОбъект.мРасширеннаяДиагностикаВключена);
			ТекРасшифровка.Вставить("СписокРедактируемыхПоказателей",ТекЭкземплярОтчета.ОтчетОбъект.СписокРедактируемыхПоказателей);
			
		Иначе
			
			ТекРасшифровка.Вставить("Заблокирован",Ложь);
			ТекРасшифровка.Вставить("ЧтениеНеактуальныхЗаписей",Ложь);
			ТекРасшифровка.Вставить("НеВноситьИзменения",Ложь);
			ТекРасшифровка.Вставить("ВключитьРасширеннуюДиагностику",Ложь);
			ТекРасшифровка.Вставить("СписокРедактируемыхПоказателей",Новый СписокЗначений);
			
		КонецЕсли;
		
	Иначе
		
		ТекРасшифровка.Вставить("Заблокирован",Ложь);
		ТекРасшифровка.Вставить("ЧтениеНеактуальныхЗаписей",Ложь);
		ТекРасшифровка.Вставить("НеВноситьИзменения",Ложь);
		ТекРасшифровка.Вставить("ВключитьРасширеннуюДиагностику",Ложь);
		ТекРасшифровка.Вставить("СписокРедактируемыхПоказателей",Новый СписокЗначений);
		
	КонецЕсли;
	
	Возврат ТекРасшифровка;
	
КонецФункции // ПолучитьДанныеЯчейки()

#КонецОбласти


#Область ОбработкаДерева

Процедура ВыполнитьГруппировкуСтрокДерева(СтрокаДерева,РабКоординаты,МассивКУдалению)
	
	ТекСтрока=СтрокаДерева.Ссылка;
	
	МассивКоординат=РабКоординаты.НайтиСтроки(Новый Структура("Строка",ТекСтрока));
	
	Для Каждого СтрокаКоордината ИЗ МассивКоординат Цикл
		
		НачалоОбласти=СтрокаКоордината.НомерСтроки;
		НачалоПоиска=ТабКоординатыСтрок.Индекс(ТабКоординатыСтрок.Найти(НачалоОбласти,"НомерСтроки"));
		
		МассивСтрок=Новый Массив;
		
		Для Индекс=НачалоПоиска+1 ПО ТабКоординатыСтрок.Количество()-1 Цикл
			
			ТекКоордината=ТабКоординатыСтрок[Индекс];
			Если ТекКоордината.Раскрытие Тогда
				Продолжить;
			КонецЕсли;			
			
			Если НЕ СтрокаДерева.Строки.Найти(ТекКоордината.Строка,"Ссылка",Истина)=Неопределено Тогда
								
				ТекСтрокаДерева=ТабДерево.Строки.Найти(ТекКоордината.НомерСтроки,"НомерСтроки",Истина);
				МассивСтрок.Добавить(ТекСтрокаДерева);
				
			Иначе
				
				Если МассивСтрок.Количество()>0 Тогда
					
					СтрокаРодитель=ТабДерево.Строки.Найти(СтрокаКоордината.НомерСтроки,"НомерСтроки",Истина);
						
					Для Каждого Строка ИЗ МассивСтрок Цикл
						
						Если СтрокаРодитель.Строки.Найти(Строка.НомерСтроки,"НомерСтроки",Истина)=Неопределено Тогда
							
							НоваяСтрока=СтрокаРодитель.Строки.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
							
							ОбщегоНазначенияУХ.ДобавитьКоллекциюВСтрокуДереваЗначений(НоваяСтрока,Строка.Строки);
							
							Если МассивКУдалению.Найти(Строка)=Неопределено Тогда
								МассивКУдалению.Добавить(Строка);
							КонецЕсли;
							
						КонецЕсли;
									
					КонецЦикла;
					
					МассивСтрок.Очистить();
										
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивСтрок.Количество()>0 Тогда
			
			СтрокаРодитель=ТабДерево.Строки.Найти(СтрокаКоордината.НомерСтроки,"НомерСтроки",Истина);
			
			Для Каждого Строка ИЗ МассивСтрок Цикл
				
				НоваяСтрока=СтрокаРодитель.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
				
				ОбщегоНазначенияУХ.ДобавитьКоллекциюВСтрокуДереваЗначений(НоваяСтрока,Строка.Строки);
				
				Если МассивКУдалению.Найти(Строка)=Неопределено Тогда
					МассивКУдалению.Добавить(Строка);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка ИЗ СтрокаДерева.Строки Цикл
					
		Если Строка.Строки.Количество()>1 Тогда
			
			ВыполнитьГруппировкуСтрокДерева(Строка,РабКоординаты,МассивКУдалению);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьГруппировкуСтрок()

Процедура СформироватьДерево(Запрос)
		
	ТабДерево=Новый ДеревоЗначений;
			
	///////////////////////////////////////////////////////////////////////////
	// Подготовим таблицы для координат группировок строк и колонок
	
	СтрокаГруппировкиСтроки="";
	СтрокаГруппировкиКолонки="";
	
	Для Каждого Группировка ИЗ ГруппировкиСтроки Цикл
		СтрокаГруппировкиСтроки=СтрокаГруппировкиСтроки+","+Группировка.Группировка;
	КонецЦикла;
	
	Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		СтрокаГруппировкиСтроки=СтрокаГруппировкиСтроки+",Аналитика"+ИндексАналитики;
	КонецЦикла;
	
	Для Каждого Группировка ИЗ ГруппировкиКолонки Цикл
		СтрокаГруппировкиКолонки=СтрокаГруппировкиКолонки+","+Группировка.Группировка;
	КонецЦикла;
	
	СтрокаГруппировкиСтроки=Сред(СтрокаГруппировкиСтроки,2);
	СтрокаГруппировкиКолонки=Сред(СтрокаГруппировкиКолонки,2);
	
	ТабКоординатыСтрок=ШаблонТаблицыКоординат.СкопироватьКолонки(СтрокаГруппировкиСтроки);
	ТабКоординатыСтрок.Колонки.Добавить("Раскрытие",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТабКоординатыСтрок.Колонки.Добавить("УровеньСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТабКоординатыСтрок.Колонки.Добавить("НомерСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
	ТабКоординатыСтрок.Колонки.Добавить("ИндексАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	ТабКоординатыСтрок.Колонки.Добавить("ИмяГруппировки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(20));
	ТабКоординатыСтрок.Колонки.Добавить("СтрокаДерева");
					
	ТабКоординатыКолонок=ШаблонТаблицыКоординат.СкопироватьКолонки(СтрокаГруппировкиКолонки);
	ТабКоординатыКолонок.Колонки.Добавить("НомерКолонки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
	
	ТабКоординатыВычисляемыхКолонок=ТабКоординатыКолонок.СкопироватьКолонки();
	ТабКоординатыВычисляемыхКолонок.Колонки.Добавить("ИмяКолонки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
	ТабКоординатыВычисляемыхКолонок.Колонки.Добавить("НомерКолонкиБазис",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
	ТабКоординатыВычисляемыхКолонок.Колонки.Добавить("НомерКолонкиЗначение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
	ТабКоординатыВычисляемыхКолонок.Колонки.Добавить("НомерКолонкиИтог",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
		
	///////////////////////////////////////////////////////////////////////////////////////
		
	КолонокАналитикиРаскрытия=?(МаксАналитикПоказателя<=1,0,МаксАналитикПоказателя-1);
	
	ТабДерево.Колонки.Добавить("НомерСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10),"");
	ТабДерево.Колонки.Добавить("ЕстьАналитика",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево(),"");
	ТабДерево.Колонки.Добавить("ЕстьЗаполнение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево(),"");
	ТабДерево.Колонки.Добавить("ЕстьВычисление",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево(),"");
	ТабДерево.Колонки.Добавить("Раскрытие",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево(),"");
	ТабДерево.Колонки.Добавить("ДанныеАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1),"");
	ТабДерево.Колонки.Добавить("Группировка",,"Группировка");
	
	Для Индекс=1 По КолонокАналитикиРаскрытия Цикл
		
		ТабДерево.Колонки.Добавить("_"+(Индекс+1),,"");
		
	КонецЦикла;
		
	УровеньСтрока=МассивГруппировокСтрокИтог.Найти("Строка")+1;
	УровеньКолонка=МассивГруппировокКолонокИтог.Найти("Колонка")+1;
	
	НачалоКолонок=ТабДерево.Колонки.Количество();
    ПерваяКолонка=НачалоКолонок+1;

	ВывестиКолонкиДерева(Запрос.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[0],"Все"),1,Новый СписокЗначений);
		
	ТабКоординатыВычисляемыхКолонок.Индексы.Добавить("ИмяКолонки");
	
	ТекНомерСтроки=0;
	КэшТабКоординатПоНомерамКолонок = Новый Соответствие;
	КоличествоИзмеренийСтрок = ГруппировкиСтроки.Количество();
	КоличествоИзмеренийКолонок = ГруппировкиКолонки.Количество();
	КолонкаДетали = ГруппировкиКолонки.Получить(КоличествоИзмеренийКолонок-1).Группировка;
	
	ВывестиСтрокиДерева(ТабДерево,ТекНомерСтроки,Запрос.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокСтрокИтог[0],"Все"),0,,Новый СписокЗначений);
	
	КоличествоИзмеренийСтрок = Неопределено;
	КоличествоИзмеренийКолонок = Неопределено;
	КэшТабКоординатПоНомерамКолонок = Неопределено;
	КолонкаДетали = Неопределено;
	
	ТабКоординатыСтрок.Колонки.Удалить("СтрокаДерева");
	
	// Сформируем итоговую таблицу соответствия областей и группировок строк/колонок
	
	ШаблонКоординаты=Новый ТаблицаЗначений;
	
	ТекстЗапроса="";
	
	Если УправляемыйРежим Тогда
		
		ТекстЗапроса=ТекстЗапроса+"
		|ВЫБРАТЬ Строка, Колонка, Ссылка
		|ПОМЕСТИТЬ СтрокаКолонка
		|ИЗ &мПоказателиЭталон КАК мПоказателиЭталон
		|ИНДЕКСИРОВАТЬ ПО Строка, Колонка, Ссылка
		|;";
		
		Если ТаблицаКоординатПомещенаВЗапрос Тогда
			ТекстЗапроса=ТекстЗапроса+"
			|Уничтожить ТабКоординатыОбщ
			|;";
			
			ТаблицаКоординатПомещенаВЗапрос=Ложь;
				
		КонецЕсли;
		
		ЗапросКоординаты.УстановитьПараметр("мПоказателиЭталон",мПоказателиЭталон);	
		
	Иначе
		
		ТекстЗапроса=ТекстЗапроса+"
		|Уничтожить ТабКоординатыОбщ
		|;";
		
	КонецЕсли;
	
	ТекстЗапроса=ТекстЗапроса+"
	|ВЫБРАТЬ *
	|Поместить КоординатыСтрок
	|ИЗ &ТабКоординатыСтрок КАК ТабКоординатыСтрок
	|;
	|ВЫБРАТЬ *
	|Поместить КоординатыКолонок
	|ИЗ &ТабКоординатыКолонок КАК ТабКоординатыКолонок
	|ИНДЕКСИРОВАТЬ ПО НомерКолонки
	|;
	|ВЫБРАТЬ";
	
	ТекстСвязи="";
	ТекстВыбораИзмерений="";
	ТекстИндекс="";
	ТекстИндексТК="";
	
	КолонокИндекса=0;
	КолонокИндексаТК=7;
	
	Для Каждого Группировка ИЗ МассивГруппировокСтрокИтог Цикл
		
		Если Группировка="ИндексАналитики" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса=ТекстЗапроса+"
		|КоординатыСтрок."+Группировка+" КАК "+Группировка+",";
		
		ШаблонКоординаты.Колонки.Добавить(ТабКоординатыСтрок.Колонки[Группировка].Имя,ТабКоординатыСтрок.Колонки[Группировка].ТипЗначения);
		
		Если НЕ (Группировка="Строка" ИЛИ СтрНайти(Группировка,"_Родитель")>0) Тогда
			ТекстСвязи=ТекстСвязи+"
			|И ПересечениеКоординат."+Группировка+"=ЭкземплярыОтчетов."+Группировка;
			
			ЧислоКолонокИндекса=?(СтрНайти(Группировка,"Аналитика")>0,3,1);
			
			Если (КолонокИндекса+ЧислоКолонокИндекса)<=16 Тогда
				
				ТекстИндекс=ТекстИндекс+","+Группировка;
				КолонокИндекса=КолонокИндекса+ЧислоКолонокИндекса;
				
			КонецЕсли;
			
			Если (КолонокИндексаТК+ЧислоКолонокИндекса)<=16 Тогда
				
				ТекстИндексТК=ТекстИндексТК+",ПересечениеКоординат."+Группировка;
				КолонокИндексаТК=КолонокИндексаТК+ЧислоКолонокИндекса;
				
			КонецЕсли;	
			
			ТекстВыбораИзмерений=ТекстВыбораИзмерений+"
			|"+Группировка+",";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		ТекстЗапроса=ТекстЗапроса+"
		|КоординатыСтрок.Аналитика"+ИндексАналитики+" КАК Аналитика"+ИндексАналитики+",";
		
		ШаблонКоординаты.Колонки.Добавить(ТабКоординатыСтрок.Колонки["Аналитика"+ИндексАналитики].Имя,ТабКоординатыСтрок.Колонки["Аналитика"+ИндексАналитики].ТипЗначения);
		
	КонецЦикла;
	
	Для Каждого Группировка ИЗ МассивГруппировокКолонокИтог Цикл
		ТекстЗапроса=ТекстЗапроса+"
		|КоординатыКолонок."+Группировка+" КАК "+Группировка+",";
		
		ШаблонКоординаты.Колонки.Добавить(ТабКоординатыКолонок.Колонки[Группировка].Имя,ТабКоординатыКолонок.Колонки[Группировка].ТипЗначения);
		
		Если НЕ (Группировка="Колонка" ИЛИ СтрНайти(Группировка,"_Родитель")>0) Тогда
			ТекстСвязи=ТекстСвязи+"
			|И ПересечениеКоординат."+Группировка+"=ЭкземплярыОтчетов."+Группировка;
			
			ЧислоКолонокИндекса=?(СтрНайти(Группировка,"Аналитика")>0,3,1);
			
			Если (КолонокИндекса+ЧислоКолонокИндекса)<=16 Тогда
				
				ТекстИндекс=ТекстИндекс+","+Группировка;
				КолонокИндекса=КолонокИндекса+ЧислоКолонокИндекса;
				
			КонецЕсли;
			
			Если (КолонокИндексаТК+ЧислоКолонокИндекса)<=16 Тогда
				
				ТекстИндексТК=ТекстИндексТК+",ПересечениеКоординат."+Группировка;
				КолонокИндексаТК=КолонокИндексаТК+ЧислоКолонокИндекса;
				
			КонецЕсли;	
			
			ТекстВыбораИзмерений=ТекстВыбораИзмерений+"
			|"+Группировка+",";
			
		КонецЕсли;
		
	КонецЦикла;
	
	ШаблонКоординаты.Колонки.Добавить(ТабКоординатыСтрок.Колонки["Раскрытие"].Имя,ТабКоординатыСтрок.Колонки["Раскрытие"].ТипЗначения);
	ШаблонКоординаты.Колонки.Добавить(ТабКоординатыСтрок.Колонки["ИндексАналитики"].Имя,ТабКоординатыСтрок.Колонки["ИндексАналитики"].ТипЗначения);
	ШаблонКоординаты.Колонки.Добавить(ТабКоординатыСтрок.Колонки["НомерСтроки"].Имя,ТабКоординатыСтрок.Колонки["НомерСтроки"].ТипЗначения);
	ШаблонКоординаты.Колонки.Добавить(ТабКоординатыКолонок.Колонки["НомерКолонки"].Имя,ТабКоординатыКолонок.Колонки["НомерКолонки"].ТипЗначения);
	ШаблонКоординаты.Колонки.Добавить("Показатель",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОтчетов"));
	ШаблонКоординаты.Колонки.Добавить("ЭкземплярОтчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ДокументСсылка.НастраиваемыйОтчет"));
	
	ТекстЗапроса=ТекстЗапроса+"
	|КоординатыСтрок.Раскрытие КАК Раскрытие,
	|КоординатыСтрок.ИндексАналитики КАК ИндексАналитики,
	|КоординатыСтрок.НомерСтроки КАК НомерСтроки,
	|КоординатыКолонок.НомерКолонки КАК НомерКолонки
	|ПОМЕСТИТЬ ПересечениеКоординат
	|ИЗ КоординатыСтрок КАК КоординатыСтрок,КоординатыКолонок КАК КоординатыКолонок
	|ИНДЕКСИРОВАТЬ ПО "+Сред(ТекстИндекс,2)+"
	|;
	|ВЫБРАТЬ"+ТекстВыбораИзмерений+"
	|ЭкземплярОтчета
	|ПОМЕСТИТЬ ЭкземплярыОтчетов
	|ИЗ &ТабОтчеты КАК ТабОтчеты
	|ГДЕ ТабОтчеты.ЕстьЭкземплярОтчета
	|ИНДЕКСИРОВАТЬ ПО "+Сред(ТекстИндекс,2)+"
	|;
	|ВЫБРАТЬ ПересечениеКоординат.*, 
	|ISNULL(СтрокаКолонка.Ссылка,&ПустойПоказатель) КАК Показатель,
	|ISNULL(ЭкземплярыОтчетов.ЭкземплярОтчета,&ПустойЭкземплярОтчета) КАК ЭкземплярОтчета	
	|ПОМЕСТИТЬ ТабКоординатыОбщ	
	|ИЗ ПересечениеКоординат КАК ПересечениеКоординат
	|ЛЕВОЕ СОЕДИНЕНИЕ СтрокаКолонка КАК СтрокаКолонка 
	|ПО ПересечениеКоординат.Строка=СтрокаКолонка.Строка
	|И  ПересечениеКоординат.Колонка=СтрокаКолонка.Колонка
	|ЛЕВОЕ СОЕДИНЕНИЕ ЭкземплярыОтчетов
	|ПО "+Сред(ТекстСвязи,4)+"
	|ГДЕ НЕ ПересечениеКоординат.НомерКолонки=0";
	
	Если НЕ УправляемыйРежим Тогда
		ТекстЗапроса=ТекстЗапроса+"	
		|ИНДЕКСИРОВАТЬ ПО НомерСтроки,НомерКолонки,ПересечениеКоординат.Строка,ПересечениеКоординат.Колонка,Показатель,ЭкземплярОтчета,Раскрытие"+ТекстИндексТК+"
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КоординатыСтрок
		|;
		|УНИЧТОЖИТЬ КоординатыКолонок
		|;
		|УНИЧТОЖИТЬ ПересечениеКоординат
		|;
		|УНИЧТОЖИТЬ ЭкземплярыОтчетов
		|;";		
	КонецЕсли;
	
	ЗапросКоординаты.Текст=ТекстЗапроса;
	ЗапросКоординаты.УстановитьПараметр("ТабКоординатыСтрок",ТабКоординатыСтрок);
	ЗапросКоординаты.УстановитьПараметр("ТабКоординатыКолонок",ТабКоординатыКолонок);
	ЗапросКоординаты.УстановитьПараметр("мПоказателиЭталон",мПоказателиЭталон);
	ЗапросКоординаты.УстановитьПараметр("ПустойПоказатель",Справочники.ПоказателиОтчетов.ПустаяСсылка());
	ЗапросКоординаты.УстановитьПараметр("ТабОтчеты",ТабОтчеты);
	ЗапросКоординаты.УстановитьПараметр("ПустойЭкземплярОтчета",Документы.НастраиваемыйОтчет.ПустаяСсылка());
	
	ЗапросКоординаты.Выполнить();
								
КонецПроцедуры // ВывестиОтчет()

Процедура СформироватьТаблицуРаскрытияДерево(МассивОтчетов)
	
	ТекстВТ="";
	
	ТекстОбъединениеРаскрытие="";
	
	МассивЭкземпляровСвод=Новый Массив;
	
	Для Каждого СтрОтчет ИЗ МассивОтчетов Цикл
		
		Если НЕ СтрОтчет.ОтчетИнициализирован Тогда // Данные будем брать из таблицы сводной инициализации
			
			МассивЭкземпляровСвод.Добавить(СтрОтчет.ЭкземплярОтчета);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Индекс=0 По МассивОтчетов.Количество()-1 Цикл
		
		СтрОтчет=МассивОтчетов[Индекс];
		
		Если НЕ СтрОтчет.ОтчетИнициализирован Тогда
			Продолжить;
		КонецЕсли;
		
		ПолучитьДокументОбъект(СтрОтчет);
		
		СтрокаИндекс=Формат(Индекс,"ЧГ=");
				
		ИзмеренияАналитики="";
		
		Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
			
			Если СтрАналитика.ЕстьРазворот Тогда
				
				ИзмеренияАналитики=ИзмеренияАналитики+"
				|&"+СтрАналитика.КодАналитики+"_"+СтрокаИндекс+" КАК "+СтрАналитика.КодАналитики+",";
				
				ЗапросДанныеРаскрытия.УстановитьПараметр(СтрАналитика.КодАналитики+"_"+СтрокаИндекс,СтрОтчет[СтрАналитика.КодАналитики]);
								
			КонецЕсли;
			
		КонецЦикла;
						
		ТекстВТ=ТекстВТ+"
		|/////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ";
		
		Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
			
			ТекстВТ=ТекстВТ+"
			|&"+Реквизит+"_"+СтрокаИндекс+" КАК "+Реквизит+",";
			
		КонецЦикла; 
		
		ТекстВТ=ТекстВТ+"
		|&ЭкземплярОтчета_"+СтрокаИндекс+" КАК ЭкземплярОтчета,"+ИзмеренияАналитики+"
		|мПоказателиРаскрытия.Показатель,";
		
		Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			ТекстВТ=ТекстВТ+"		
			|мПоказателиРаскрытия.Аналитика"+ИндексАналитики+" КАК Аналитика"+ИндексАналитики+",";
			
		КонецЦикла;
		
		ТекстВТ=ТекстВТ+"
		|мПоказателиРаскрытия.Значение КАК ЗначениеПоказателя,
		|ВЫРАЗИТЬ(мПоказателиРаскрытия.Значение КАК Число(18,5)) КАК ЗначениеЧисло
		|Поместить мПоказателиРаскрытияОбщ_"+СтрокаИндекс+"
		|ИЗ &мПоказателиРаскрытия_"+СтрокаИндекс+" КАК мПоказателиРаскрытия";
		
		МассивТаблицПоказателейРаскрытия.Добавить("мПоказателиРаскрытияОбщ_"+СтрокаИндекс);
		
		ТекстОтбор="";	
		
		Если СписокПоказателиНеВБланке.Количество()>0 Тогда
			ТекстОтбор=ТекстОтбор+"			
			|И мПоказателиРаскрытия.Показатель НЕ В(&СписокПоказателиНеВБланке)";
			
			ЗапросДанныеРаскрытия.УстановитьПараметр("СписокПоказателиНеВБланке",СписокПоказателиНеВБланке);
			
		КонецЕсли;
		
		Если СписокИзмененныхПоказателей.Количество()>0 Тогда
			ТекстОтбор=ТекстОтбор+"			
			|И мПоказателиРаскрытия.Показатель В(&СписокИзмененныхПоказателей)";
			
			ЗапросДанныеРаскрытия.УстановитьПараметр("СписокИзмененныхПоказателей",СписокИзмененныхПоказателей);
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстОтбор) Тогда
			
			ТекстВТ=ТекстВТ+"			
			|ГДЕ "+Сред(ТекстОтбор,6)+"
			|;";
			
		Иначе	
			
			ТекстВТ=ТекстВТ+"			
			|;";
			
		КонецЕсли;
		
		Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
			
			ЗапросДанныеРаскрытия.УстановитьПараметр(Реквизит+"_"+СтрокаИндекс,СтрОтчет[Реквизит])
			
		КонецЦикла; 
		
		ЗапросДанныеРаскрытия.УстановитьПараметр("ЭкземплярОтчета_"+СтрокаИндекс,СтрОтчет.ЭкземплярОтчета);				
		ЗапросДанныеРаскрытия.УстановитьПараметр("мПоказателиРаскрытия_"+СтрокаИндекс,?(СтрОтчет.ВыводитьВВалютеОтображения,СтрОтчет.мПоказателиРаскрытияВВалюте,СтрОтчет.ОтчетОбъект.мПоказателиРаскрытия));
					
		ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ * ИЗ мПоказателиРаскрытияОбщ_"+СтрокаИндекс+" КАК мПоказателиРаскрытияОбщ_"+СтрокаИндекс;
		
	КонецЦикла;	
	
	// По таблицам, полученным при раскрытии строк
	
	ЗапросДанныеРаскрытия.УстановитьПараметр("МассивЭкземпляровСвод",МассивЭкземпляровСвод);
	
	Для Каждого СтрРаскрытие ИЗ ТаблицаРаскрытийСтрок Цикл
		
		ПрефиксТаблицы="Раскрытие_"+Формат(СтрРаскрытие.НомерСтроки,"ЧГ=0");
		
		ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ";
		
		Для каждого Реквизит Из МассивКлючевыхРеквизитов  Цикл
			
			ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
			|мПоказателиРаскрытияКонтекст."+Реквизит+" КАК "+Реквизит+",";

			
		КонецЦикла; 
		
		ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
		|мПоказателиРаскрытияКонтекст.ЭкземплярОтчета КАК ЭкземплярОтчета,
		|мПоказателиРаскрытияКонтекст.Показатель,";
				
		Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
			
			Если СтрАналитика.ЕстьРазворот Тогда
				
				ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
				|мПоказателиРаскрытияКонтекст."+СтрАналитика.КодАналитики+" КАК "+СтрАналитика.КодАналитики+",";
				
			КонецЕсли;
			
		КонецЦикла;

		
		Для ИндексАналитики=(МаксАналитикОтчета+1) По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"		
			|мПоказателиРаскрытияКонтекст.Аналитика"+ИндексАналитики+" КАК Аналитика"+ИндексАналитики+",";
			
		КонецЦикла;
		
		ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
		|мПоказателиРаскрытияКонтекст.ЗначениеЧисло КАК ЗначениеПоказателя,
		|ВЫРАЗИТЬ(мПоказателиРаскрытияКонтекст.ЗначениеЧисло КАК Число(18,5)) КАК ЗначениеЧисло
		|ИЗ мПоказателиРаскрытияКонтекст_"+ПрефиксТаблицы+" КАК мПоказателиРаскрытияКонтекст
		|ГДЕ мПоказателиРаскрытияКонтекст.ЭкземплярОтчета В (&МассивЭкземпляровСвод)";
		
		ТекстОтбор="";	
		
		Если СписокПоказателиНеВБланке.Количество()>0 Тогда
			ТекстОтбор=ТекстОтбор+"			
			|И мПоказателиРаскрытияКонтекст.Показатель НЕ В(&СписокПоказателиНеВБланке)";
			
			ЗапросДанныеРаскрытия.УстановитьПараметр("СписокПоказателиНеВБланке",СписокПоказателиНеВБланке);
			
		КонецЕсли;
		
		Если СписокИзмененныхПоказателей.Количество()>0 Тогда
			ТекстОтбор=ТекстОтбор+"			
			|И мПоказателиРаскрытияКонтекст.Показатель В(&СписокИзмененныхПоказателей)";
			
			ЗапросДанныеРаскрытия.УстановитьПараметр("СписокИзмененныхПоказателей",СписокИзмененныхПоказателей);
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстОтбор) Тогда
			
			ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"			
			|"+ТекстОтбор;
			
		КонецЕсли;
		
	КонецЦикла;
			
	ВыведенныеОрганизации.Свернуть("Организация","Отбирать");
	ВыведенныеПериоды.Свернуть("ПериодОтчета","Отбирать");
	ВыведенныеСценарии.Свернуть("Сценарий","Отбирать");
	ВыведенныеАналитики.Свернуть("Аналитика,ВидАналитики,ЗначениеАналитики","Отбирать");
	
	ВыведенныеОрганизации.Сортировать("Организация");
	ВыведенныеПериоды.Сортировать("ДатаНачала");
	ВыведенныеСценарии.Сортировать("Сценарий");
	ВыведенныеАналитики.Сортировать("Аналитика,ВидАналитики,ЗначениеАналитики");
	
	ТекстВТ=ТекстВТ+"
	|"+Сред(ТекстОбъединениеРаскрытие,16);
	
	Если ПустаяСтрока(СокрЛП(ТекстВТ)) Тогда
		
		мПоказателиРаскрытия=Новый ТаблицаЗначений;
		
		Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
			
			мПоказателиРаскрытия.Колонки.Добавить(Реквизит,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка."+СправочникиГруппировок[Реквизит]));
			
		КонецЦикла; 
		
		мПоказателиРаскрытия.Колонки.Добавить("ИндексАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
		мПоказателиРаскрытия.Колонки.Добавить("Показатель",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОтчетов"));
		мПоказателиРаскрытия.Колонки.Добавить("ЗначениеПоказателя",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
		мПоказателиРаскрытия.Колонки.Добавить("ЗначениеЧисло",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
		
		
		Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
			
			Если СтрАналитика.ЕстьРазворот Тогда
				
				мПоказателиРаскрытия.Колонки.Добавить(СтрАналитика.КодАналитики,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПроизвольныйКлассификаторУХ"));
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;	
	
	ЗапросДанныеРаскрытия.Текст=ТекстВТ;
	
	мПоказателиРаскрытия=ЗапросДанныеРаскрытия.Выполнить().Выгрузить();
	
	Если мПоказателиРаскрытия.Количество()=0 Тогда
		
		мПоказателиРаскрытия=Новый ТаблицаЗначений;
		
		Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
			
			мПоказателиРаскрытия.Колонки.Добавить(Реквизит,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка."+СправочникиГруппировок[Реквизит]));
			
		КонецЦикла;
		
		мПоказателиРаскрытия.Колонки.Добавить("ИндексАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
		мПоказателиРаскрытия.Колонки.Добавить("Показатель",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОтчетов"));
		мПоказателиРаскрытия.Колонки.Добавить("ЗначениеПоказателя",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
		мПоказателиРаскрытия.Колонки.Добавить("ЗначениеЧисло",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
				
		Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
			
			Если СтрАналитика.ЕстьРазворот Тогда
				
				мПоказателиРаскрытия.Колонки.Добавить(СтрАналитика.КодАналитики,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПроизвольныйКлассификаторУХ"));
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе	
		
		мПоказателиРаскрытия.Колонки.Добавить("ИндексАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
		
	КонецЕсли;
	
	Для Каждого СтрРаскрытия ИЗ мПоказателиРаскрытия Цикл
		
		СтрРаскрытия.ИндексАналитики=ПолучитьИндексАналитик(СтрРаскрытия);
		
	КонецЦикла;
	
	мПоказателиРаскрытия.Индексы.Добавить("ИндексАналитики");
	
	// Уничтожим помещенные в текущем сеансе таблицы
	
	Если МассивТаблицПоказателейРаскрытия.Количество()>0 Тогда
		
		ТекстУничтожить="";
		
		Для Каждого Таблица ИЗ МассивТаблицПоказателейРаскрытия Цикл
			ТекстУничтожить=ТекстУничтожить+"Уничтожить "+Таблица+"
			|;";
		КонецЦикла;
		
		ЗапросДанныеРаскрытия.Текст=ТекстУничтожить;
		ЗапросДанныеРаскрытия.Выполнить();
		
		МассивТаблицПоказателейРаскрытия.Очистить();
		
	КонецЕсли;
		
КонецПроцедуры // СформироватьТаблицуРаскрытия()

Процедура ВывестиКолонкиДерева(Выборка,ТекУровень,СписокГруппировокИерархии)	 
	
	Индекс=1;
	
	ОткрытаГруппа=Ложь;
		
	ПервыйЭлементГруппировки=Истина;
	НомерКолонкиИтог=ТабДерево.Колонки.Количество();
	
	отЧисло = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,ТекущаяТочность);	
	отЧислоСтрока = Новый ОписаниеТипов(отЧисло, "Строка,Дата,Булево");
	
	Индекс=1;
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекУровень=1 Тогда
			Расшифровка=Новый Структура;
		КонецЕсли;
				
		ИмяГруппировки=Выборка.Группировка();
		ЗначениеГруппировки=Выборка[ИмяГруппировки];
		
		ТекУровень=МассивГруппировокКолонокИтог.Найти(ИмяГруппировки)+1;
				
		Расшифровка.Вставить(ИмяГруппировки, ЗначениеГруппировки);
		
		//Если НЕ (ТекУровень>1 И ТекУровень<=УровеньКолонка И Индекс=1) Тогда
			
			ТабДерево.Колонки.Добавить("_" + Формат(ТабДерево.Колонки.Количество()+1,"ЧГ=0"), 
										отЧислоСтрока, 
										Строка(ЗначениеГруппировки));
							
		//КонецЕсли;	
		
		ИндексКолонки=НомерКолонкиИтог+Индекс;
		
		ДобавитьРасшифровкуКолонки(ТабДерево.Колонки.Количество(),Расшифровка);
		
		// Добавим шапку для вычисляемых колонок
		Если ЕстьВычисляемыеКолонки И ИмяГруппировки=ГруппировкаБазис Тогда
			
			РасшифровкаВычисляемыхКолонок=ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(Расшифровка);
			
			НомерКолонкиЗначение=ТабДерево.Колонки.Количество();
			
			Для Каждого Колонка ИЗ ГруппировкиВычисляемыеКолонки Цикл
				
				Если Не Колонка.Отображать Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПервыйЭлементГруппировки Тогда
					
					НомерКолонкиБазис=ТабДерево.Колонки.Количество();
					
					Если НЕ (Колонка.Группировка="ДоляВИтогеПоГруппировке") Тогда					
						
						Продолжить;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ИндексКолонки=ИндексКолонки+1;
				ТабДерево.Колонки.Добавить("_"+Формат(ТабДерево.Колонки.Количество()+1,"ЧГ=0"), ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,ТекущаяТочность),Колонка.ПредставлениеГруппировки);
								
				РасшифровкаВычисляемыхКолонок.Вставить("ИмяКолонки",Колонка.Группировка);
				РасшифровкаВычисляемыхКолонок.Вставить("НомерКолонкиБазис",НомерКолонкиБазис);
				РасшифровкаВычисляемыхКолонок.Вставить("НомерКолонкиИтог",НомерКолонкиИтог);
				РасшифровкаВычисляемыхКолонок.Вставить("НомерКолонкиЗначение",НомерКолонкиЗначение);
				ДобавитьРасшифровкуВычисляемойКолонки(ТабДерево.Колонки.Количество(),РасшифровкаВычисляемыхКолонок);
				
			КонецЦикла;
			
		КонецЕсли;			
		
		НачалоУровня=ИндексКолонки;
		
		Если ТекУровень+1<=МассивГруппировокКолонокИтог.Количество() Тогда
			
			СписокГруппировокИерархии=Новый СписокЗначений;
			ВывестиКолонкиДерева(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[ТекУровень]),ТекУровень+1,СписокГруппировокИерархии);
			
		КонецЕсли;	
				
		Индекс=Индекс+1;
		
		ПервыйЭлементГруппировки=Ложь;
		
	КонецЦикла;
	
	Если Расшифровка <> Неопределено Тогда
		Расшифровка.Удалить(ИмяГруппировки);	
	КонецЕсли;	
	
КонецПроцедуры // ВывестиКолонкиДерева()

Функция ПолучитьСтрокуРодителя(РасшифровкаСтроки,Строка)
	
	ТекДанныеСтроки=ТаблицаСтроки.Найти(Строка,"Ссылка");
	ТекРодитель=ТекДанныеСтроки.Родитель;
	
	Если ТекРодитель=Справочники.СтрокиОтчетов.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПоиска=ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(РасшифровкаСтроки);
	СтруктураПоиска.Вставить("Строка",ТекРодитель);
	СтруктураПоиска.Вставить("Раскрытие",Ложь);
	СтруктураПоиска.Удалить("СтрокаДерева");
	
	МассивРодитель=ТабКоординатыСтрок.НайтиСтроки(СтруктураПоиска);
	Если МассивРодитель.Количество()=0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат МассивРодитель[0].СтрокаДерева;
	КонецЕсли;

КонецФункции // ПолучитьСтрокуРодителя() 

Процедура ВывестиСтрокиДерева(СтрокаРодитель,ТекНомерСтроки,Выборка,ТекУровень,ТаблицаИтогов=Неопределено,СписокГруппировокИерархии)
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекУровень=0 Тогда
			РасшифровкаСтрока=Новый Структура;
		КонецЕсли;
		
		ИмяГруппировки=Выборка.Группировка();
		ТекУровеньСтрока=МассивГруппировокСтрокИтог.Найти(ИмяГруппировки)+1;
		ТекЭлемент=Выборка[ИмяГруппировки];
				
		Если ЗначениеЗаполнено(ТекЭлемент) Тогда 
			
			РасшифровкаСтрока.Вставить("ИмяГруппировки",ИмяГруппировки);
			РасшифровкаСтрока.Вставить(ИмяГруппировки,Выборка[ИмяГруппировки]);
			РасшифровкаСтрока.Вставить("УровеньСтроки",(ИмяГруппировки="Строка"));
			
			Если ИмяГруппировки="Строка" И ГруппироватьПоИерархииСтрок Тогда
				ТекРодительСтроки=ПолучитьСтрокуРодителя(РасшифровкаСтрока,ТекЭлемент);
				Если НЕ ТекРодительСтроки=Неопределено Тогда
					НоваяСтрока=ТекРодительСтроки.Строки.Добавить();
				Иначе
					НоваяСтрока=СтрокаРодитель.Строки.Добавить();
				КонецЕсли;
			Иначе
				НоваяСтрока=СтрокаРодитель.Строки.Добавить();
			КонецЕсли;
			
			ТекНомерСтроки=ТекНомерСтроки+1;
			
			РасшифровкаСтрока.Вставить("СтрокаДерева",НоваяСтрока);
			
			НоваяСтрока.НомерСтроки=ТекНомерСтроки;
			НоваяСтрока.Группировка=ТекЭлемент;
				
			ДобавитьРасшифровкуСтроки(ТекНомерСтроки,РасшифровкаСтрока);
			
			НачалоВывода=ПерваяКолонка;
			ЗаполнитьСтрокуДерева(НоваяСтрока,Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[0],"Все"),0,ТекУровеньСтрока,ТаблицаИтогов,НачалоВывода);
			
			ТекУровеньВывода=ТекНомерСтроки;
			
		КонецЕсли;
		
		Если РасшифровкаСтрока.Свойство("Строка") Тогда
			ТекПризнакиСтроки=ТабПризнакиСтрок.Найти(РасшифровкаСтрока.Строка,"Строка");
			НоваяСтрока.ЕстьЗаполнение=ТекПризнакиСтроки.ЕстьЗаполнение;
			НоваяСтрока.ЕстьВычисление=ТекПризнакиСтроки.ЕстьВычисление;
		КонецЕсли;
				
		Если ТекУровень+1<=МассивГруппировокСтрокИтог.Количество()-2 Тогда
			
			СписокГруппировокИерархии=Новый СписокЗначений;
			
			ВывестиСтрокиДерева(НоваяСтрока,ТекНомерСтроки,Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокСтрокИтог[ТекУровень+1],""),ТекУровень+1,ТаблицаИтогов,СписокГруппировокИерархии);
			
		ИначеЕсли ТекУровень+1=МассивГруппировокСтрокИтог.Количество()-1 Тогда
			
			НоваяСтрока.ЕстьАналитика=РасшифровкаСтрока.Свойство("Строка") И ТекПризнакиСтроки.ЕстьРаскрытие;	
			НоваяСтрока.ДанныеАналитики=?(НоваяСтрока.ЕстьАналитика,1,0);
			
			ВывестиАналитикуДерева(НоваяСтрока,ТекНомерСтроки,Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,,"Все"),Выборка[ИмяГруппировки],ТекУровеньСтрока,ТаблицаИтогов);
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Если РасшифровкаСтрока <> Неопределено Тогда
		РасшифровкаСтрока.Удалить(ИмяГруппировки);	
	КонецЕсли;	
		
КонецПроцедуры // ВывестиСтрокиДерева()

Процедура ЗаполнитьСтрокуДерева(ТекСтрока,Выборка,ТекУровеньКолонка,ТекУровеньСтрока,ТаблицаИтогов=Неопределено,ТекНомерКолонки)
	
	ПервыйЭлементГруппировки = Истина;
	
	ПоследнийУровеньСтрок = (КоличествоИзмеренийСтрок = ТекУровеньСтрока);
	
	Пока Выборка.Следующий() Цикл
		
		ИмяГруппировки=Выборка.Группировка();
		
		ТекУровень=МассивГруппировокКолонокИтог.Найти(ИмяГруппировки)+1;
		УровеньКолонка=УровеньКолонка;
		УровеньСтрока=УровеньСтрока;
		
		ТекКолонкаШапки = КэшТабКоординатПоНомерамКолонок.Получить(ТекНомерКолонки);
		Если ТекКолонкаШапки = Неопределено Тогда
			ТекКолонкаШапки = ТабКоординатыКолонок.Найти(ТекНомерКолонки,"НомерКолонки");
			КэшТабКоординатПоНомерамКолонок.Вставить(ТекНомерКолонки, ТекКолонкаШапки);			
		КонецЕсли;		
		
		Если ТаблицаИтогов=Неопределено Тогда
			
			Если ТекКолонкаШапки=Неопределено Тогда
				Продолжить;
			ИначеЕсли ИмяГруппировки="Колонка" И УровеньКолонка>2 И (МассивГруппировокКолонокИтог.Количество()-УровеньКолонка)<2 Тогда
				Если НЕ ПроверитьГруппировкиКолонок(Выборка,ТекКолонкаШапки) Тогда 
					Продолжить;
				КонецЕсли;
			Иначе
				ТекЭлемент=Выборка[ИмяГруппировки];
				Если НЕ ТекЭлемент=ТекКолонкаШапки[ИмяГруппировки] Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		//Если ТекУровень>=УровеньКолонка Тогда
			
			Если ТекУровеньСтрока>=УровеньСтрока Тогда
				
				Если НЕ ТаблицаИтогов=Неопределено Тогда // Только добавляем строку в таблицу итогов
					
					НоваяСтрока=ТаблицаИтогов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
					ТекНомерКолонки=ТекНомерКолонки+1;
					
				Иначе	
					
					ТекущееЗначениеПоказателяЧисло = ?(Выборка.ЗначениеПоказателяЧисло = NULL, 0, Выборка.ЗначениеПоказателяЧисло / ТекущийДелитель);
					Если (ТекущееЗначениеПоказателяЧисло = 0)						
						//И (Выборка.ЗначениеПоказателя <> 0)						
						Тогда
						
						Если ПоследнийУровеньСтрок И Не ТекСтрока.ЕстьАналитика И (КолонкаДетали = ИмяГруппировки) Тогда
							ТекСтрока[ТекНомерКолонки-1] = Выборка.ЗначениеПоказателя;
						Иначе
							ТекСтрока[ТекНомерКолонки-1] = Неопределено;//Итог по нечисловому показателю
						КонецЕсли;
						
					Иначе	
						ТекСтрока[ТекНомерКолонки-1] = ТекущееЗначениеПоказателяЧисло;
					КонецЕсли;
										
					ТекНомерКолонки=ТекНомерКолонки+1;
					
					Если ЕстьВычисляемыеКолонки Тогда
						ПрисоединитьВычисляемыеПоля(ИмяГруппировки,ПервыйЭлементГруппировки,ТекНомерКолонки);									
					КонецЕсли;
							
				КонецЕсли;
						
			КонецЕсли;
			
		//КонецЕсли;
		
		Если ТекУровень+1<=МассивГруппировокКолонокИтог.Количество() Тогда
						
			ЗаполнитьСтрокуДерева(ТекСтрока,Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[ТекУровень],"Все"),ТекУровень+1,ТекУровеньСтрока,ТаблицаИтогов,ТекНомерКолонки);
			
		КонецЕсли;
		
		ПервыйЭлементГруппировки=Ложь;
		
	КонецЦикла;
					
КонецПроцедуры // ЗаполнитьСтрокуДерева()

Процедура ВывестиАналитикуДерева(Строка,ТекНомерСтроки,Выборка,ВладелецГруппы,ТекУровеньСтрока,ТаблицаИтогов=Неопределено);
	
	Если Выборка.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
			
	Пока Выборка.Следующий() Цикл
		
		ИндексАналитики=Выборка.ИндексАналитики;
		
		Если ИндексАналитики="" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекУровеньСтрока=МассивГруппировокСтрокИтог.Найти("ИндексАналитики")+1;
				
		СтрАналитика=мПоказателиРаскрытия.Найти(ИндексАналитики,"ИндексАналитики");
		
		Если СтрАналитика=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока=Строка.Строки.Добавить();
		НоваяСтрока.Раскрытие=Истина;
		НоваяСтрока.ДанныеАналитики=2;
		
		НоваяСтрока.ЕстьЗаполнение=Строка.ЕстьЗаполнение;
		НоваяСтрока.ЕстьВычисление=Строка.ЕстьВычисление;
		
		ТекНомерСтроки=ТекНомерСтроки+1;
		НоваяСтрока.НомерСтроки=ТекНомерСтроки;
		
		СтруктураАналитика=Новый Структура;
		СтруктураАналитика.Вставить("ИндексАналитики",ИндексАналитики);
		НомерЯчейки=6;
		
		Для Индекс=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			НоваяСтрока[НомерЯчейки]=СтрАналитика["Аналитика"+Индекс];				
			СтруктураАналитика.Вставить("Аналитика"+Индекс,СтрАналитика["Аналитика"+Индекс]);
			
			НомерЯчейки=НомерЯчейки+1;
			
		КонецЦикла;
		
		ДобавитьРасшифровкуСтрокиРаскрытия(ТекНомерСтроки,РасшифровкаСтрока,СтруктураАналитика);
		
		НачалоВывода=ПерваяКолонка;	
		ЗаполнитьСтрокуАналитики(НоваяСтрока,Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[0],"Все"),0,ТаблицаИтогов,НачалоВывода);
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиАналитикуДерева()

Процедура ЗаполнитьСтрокуАналитики(НоваяСтрока,Выборка,ТекУровеньКолонка,ТаблицаИтогов=Неопределено,ТекНомерКолонки)
	
	ПервыйЭлементГруппировки = Истина;
	КолонкаДетали = ГруппировкиКолонки.Получить(ГруппировкиКолонки.Количество()-1).Группировка;
		
	Пока Выборка.Следующий() Цикл
		
		ИмяГруппировки=Выборка.Группировка();
		
		ТекУровень=МассивГруппировокКолонокИтог.Найти(ИмяГруппировки)+1;
		УровеньКолонка=УровеньКолонка;
		УровеньСтрока=УровеньСтрока;
		
		ТекКолонкаШапки=ТабКоординатыКолонок.Найти(ТекНомерКолонки,"НомерКолонки");
		ТекЭлемент=Выборка[ИмяГруппировки];
		
		Если ТаблицаИтогов=Неопределено Тогда
			
			Если ТекКолонкаШапки=Неопределено Тогда
				Продолжить;
			ИначеЕсли ИмяГруппировки="Колонка" И УровеньКолонка>2 И (МассивГруппировокКолонокИтог.Количество()-УровеньКолонка)<2 Тогда
				Если НЕ ПроверитьГруппировкиКолонок(Выборка,ТекКолонкаШапки) Тогда 
					Продолжить;
				КонецЕсли;
			ИначеЕсли НЕ ТекЭлемент=ТекКолонкаШапки[ИмяГруппировки] Тогда
				Продолжить;
			КонецЕсли;
	
		КонецЕсли;
			
		//Если ТекУровень>=УровеньКолонка И ЗначениеЗаполнено(ТекЭлемент) Тогда
			
			Если НЕ ТаблицаИтогов=Неопределено Тогда // Только добавляем строку в таблицу итогов
				
				НоваяСтрока=ТаблицаИтогов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
				ТекНомерКолонки=ТекНомерКолонки+1;
				
			Иначе 
				
				ТекущееЗначениеПоказателяЧисло = ?(Выборка.ЗначениеРаскрытияЧисло=NULL, 0, Выборка.ЗначениеРаскрытияЧисло / ТекущийДелитель);
				Если (ТекущееЗначениеПоказателяЧисло = 0) 
					И (Выборка.ЗначениеПоказателя <> NULL) И (Выборка.ЗначениеПоказателя <> 0) Тогда
					
					Если КолонкаДетали = ИмяГруппировки Тогда
						НоваяСтрока[ТекНомерКолонки-1] = Выборка.ЗначениеПоказателя;						
					Иначе
						НоваяСтрока[ТекНомерКолонки-1] = Неопределено;
					КонецЕсли;
					
				Иначе	
					НоваяСтрока[ТекНомерКолонки-1] = ТекущееЗначениеПоказателяЧисло;
				КонецЕсли;

				ТекНомерКолонки=ТекНомерКолонки+1;
				ПрисоединитьВычисляемыеПоля(ИмяГруппировки,ПервыйЭлементГруппировки,ТекНомерКолонки);
				
			КонецЕсли;
			
		//КонецЕсли;
		
		Если ТекУровеньКолонка+1<=МассивГруппировокКолонокИтог.Количество()-1 Тогда
			
			ЗаполнитьСтрокуАналитики(НоваяСтрока,
										Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, 
															МассивГруппировокКолонокИтог[ТекУровеньКолонка+1], 
															"Все"),
										ТекУровеньКолонка + 1,
										ТаблицаИтогов,
										ТекНомерКолонки);
										
		КонецЕсли;
		
		ПервыйЭлементГруппировки=Ложь;
		
	КонецЦикла;
		
КонецПроцедуры // РазвернутьСтрокуАналитики()

#КонецОбласти


#Область ОбработкаБланка

Процедура ВыполнитьГруппировкуСтрок(СтрокаДерева,РабКоординаты)
	
	ТекСтрока=СтрокаДерева.Ссылка;
	
	МассивКоординат=РабКоординаты.НайтиСтроки(Новый Структура("Строка",ТекСтрока));
	
	Для Каждого СтрокаКоордината ИЗ МассивКоординат Цикл
		
		НачалоОбласти=СтрокаКоордината.НомерСтроки;
		КонецОбласти=СтрокаКоордината.НомерСтроки;
		НачалоПоиска=ТабКоординатыСтрок.Индекс(ТабКоординатыСтрок.Найти(НачалоОбласти,"НомерСтроки"));
		
		Для Индекс=НачалоПоиска ПО ТабКоординатыСтрок.Количество()-1 Цикл
			
			ТекКоордината=ТабКоординатыСтрок[Индекс];
			
			Если ТекКоордината.Строка=ТекСтрока 
				ИЛИ (НЕ СтрокаДерева.Строки.Найти(ТекКоордината.Строка,"Ссылка",Истина)=Неопределено) Тогда
				
				КонецОбласти=ТекКоордината.НомерСтроки;
				
			Иначе
				
				Если НЕ НачалоОбласти>=КонецОбласти Тогда
					
					НоваяСтрока=ТабРаскрытиеГруппСтроки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКоордината);
					НоваяСтрока.НачалоГруппы=НачалоОбласти+1;
					НоваяСтрока.КонецГруппы=КонецОбласти;
					НоваяСтрока.ДобавленаВручную=Ложь;
					НоваяСтрока.УровеньГруппировки=УровеньСтрока;
					
					ТабДок.Область(НачалоОбласти+1,,КонецОбласти,).Сгруппировать();
					
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Строка ИЗ СтрокаДерева.Строки Цикл
					
		Если Строка.Строки.Количество()>1 Тогда
			
			ВыполнитьГруппировкуСтрок(Строка,РабКоординаты);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьГруппировкуСтрок() 

Процедура ВывестиШапку(Выборка,ТекУровень,СписокГруппировокИерархии)	 
	
	Индекс=1;
	
	ОткрытаГруппа=Ложь;
	
	Если ТекУровень+1<=МассивГруппировокКолонокИтог.Количество() Тогда
		ТабДок.НачатьГруппуКолонок(Истина);
		ОткрытаГруппа=Истина;
	КонецЕсли;
	
	ПервыйЭлементГруппировки=Истина;
	НомерКолонкиИтог=ТабДок.ШиринаТаблицы;
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекУровень=1 Тогда
			Расшифровка=Новый Структура;
		КонецЕсли;
				
		ИмяГруппировки=Выборка.Группировка();
		ЗначениеГруппировки=Выборка[ИмяГруппировки];
		
		ТекУровень=МассивГруппировокКолонокИтог.Найти(ИмяГруппировки)+1;
		
		Если ЕстьВыводИерархии
			И СписокГруппировокИерархии.Количество()>0
			И (НЕ Выборка[СписокГруппировокИерархии[0].Представление]=СписокГруппировокИерархии[0].Значение) Тогда
			
			// Не выводим элементы, не принадлежащие верхним уровням иерархии
			
			Если ТекУровень+1<=МассивГруппировокКолонокИтог.Количество() Тогда
				
				Если СтрНайти(ИмяГруппировки,"_Родитель_")>0 Тогда
					
					СписокГруппировокИерархии.Вставить(0,ЗначениеГруппировки,ИмяГруппировки);
					
				КонецЕсли;
				
				ВывестиШапку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[ТекУровень]),ТекУровень+1,СписокГруппировокИерархии);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Расшифровка.Вставить(ИмяГруппировки,ЗначениеГруппировки);
		
		Если НЕ (ТекУровень>1 И ТекУровень<=УровеньКолонка И Индекс=1) Тогда
			
			Если СтрНайти(ИмяГруппировки,"_Родитель_")>0 Тогда
				
				Если ЗначениеЗаполнено(ЗначениеГруппировки) ИЛИ ТекУровень<=УровеньКолонка Тогда
					
					ТабДок.Присоединить(ТабМакетКолонки);
					
				КонецЕсли;
				
			Иначе
				
				ТабДок.Присоединить(ТабМакетКолонки);
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ЗначениеГруппировки) Тогда
			
			ОбластьГруппировки=ТабДок.Область(УровеньШапки+1+ТекУровень,ТабДок.ШиринаТаблицы,УровеньШапки+1+ТекУровень,ТабДок.ШиринаТаблицы);
			ОбластьГруппировки.Текст=ЗначениеГруппировки;
			
		КонецЕсли;
		
		ДобавитьРасшифровкуКолонки(ТабДок.ШиринаТаблицы,Расшифровка);
		
		// Добавим шапку для вычисляемых колонок
		Если ЕстьВычисляемыеКолонки И ИмяГруппировки=ГруппировкаБазис Тогда
			
			РасшифровкаВычисляемыхКолонок=ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(Расшифровка);
			
			НомерКолонкиЗначение=ТабДок.ШиринаТаблицы;
			
			Для Каждого Колонка ИЗ ГруппировкиВычисляемыеКолонки Цикл
				
				Если Не Колонка.Отображать Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПервыйЭлементГруппировки Тогда
					
					НомерКолонкиБазис=ТабДок.ШиринаТаблицы;
					
					Если НЕ (Колонка.Группировка="ДоляВИтогеПоГруппировке") Тогда					
						
						Продолжить;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ТабДок.Присоединить(ТабМакетКолонки);
                ОбластьГруппировки=ТабДок.Область(УровеньШапки+1+ТекУровень,ТабДок.ШиринаТаблицы,УровеньШапки+1+ТекУровень,ТабДок.ШиринаТаблицы);
				ОбластьГруппировки.Текст=Колонка.ПредставлениеГруппировки;
				ОбластьГруппировки.ЦветФона=ЦветВычисляемойОбласти;
				
				РасшифровкаВычисляемыхКолонок.Вставить("ИмяКолонки",Колонка.Группировка);
				РасшифровкаВычисляемыхКолонок.Вставить("НомерКолонкиБазис",НомерКолонкиБазис);
				РасшифровкаВычисляемыхКолонок.Вставить("НомерКолонкиИтог",НомерКолонкиИтог);
				РасшифровкаВычисляемыхКолонок.Вставить("НомерКолонкиЗначение",НомерКолонкиЗначение);
				ДобавитьРасшифровкуВычисляемойКолонки(ТабДок.ШиринаТаблицы,РасшифровкаВычисляемыхКолонок);
				
			КонецЦикла;
			
		КонецЕсли;	
		
		Если ТекУровень>=УровеньКолонка И ТекУровень<МассивГруппировокКолонокИтог.Количество() И ЗначениеЗаполнено(ЗначениеГруппировки) Тогда
			
			ТабДок.Область(УровеньШапки+ТекУровень+2,ТабДок.ШиринаТаблицы,УровеньШапки+ТекУровень+2,ТабДок.ШиринаТаблицы).Текст="ИТОГО"; 
			
		КонецЕсли;
		
		НачалоУровня=ТабДок.ШиринаТаблицы;
		
		Если ТекУровень+1<=МассивГруппировокКолонокИтог.Количество() Тогда
			
			Если ЕстьВыводИерархии Тогда
				
				Если СтрНайти(ИмяГруппировки,"_Родитель_")>0 Тогда
					
					Если СписокГруппировокИерархии=Неопределено Тогда
						
						СписокГруппировокИерархии=Новый СписокЗначений;
						
					КонецЕсли;
					
					СписокГруппировокИерархии.Вставить(0,ЗначениеГруппировки,ИмяГруппировки);
					
				КонецЕсли;
				
			Иначе
				
				СписокГруппировокИерархии=Новый СписокЗначений;
				
			КонецЕсли;
			
			ВывестиШапку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[ТекУровень]),ТекУровень+1,СписокГруппировокИерархии);
			
		КонецЕсли;	
		
		Если НЕ ТекУровень=МассивГруппировокКолонокИтог.Количество() Тогда
			
			Если ТекУровень>=УровеньКолонка И ЗначениеЗаполнено(ЗначениеГруппировки) Тогда
				
				ТабДок.Область(УровеньШапки+ТекУровень+2,НачалоУровня,УровеньШапки+МассивГруппировокКолонокИтог.Количество()+1,НачалоУровня).Объединить();
				
			КонецЕсли;
			
			Если СтрНайти(ИмяГруппировки,"_Родитель_")>0 ИЛИ СтруктураГруппировокИерархия.Свойство(ИмяГруппировки) Тогда
				
				// Определим количество уровней иерархии, пропущенных для данной группировки
				
				ПропущенныхУровнейИерархии=0;
				ВсегоУровнейИерархии=0;
				
				Если СтрНайти(ИмяГруппировки,"_Родитель_")>0 Тогда
					
					ИмяТекущейГруппировки=Лев(ИмяГруппировки, СтрНайти(ИмяГруппировки,"_")-1);
					
				Иначе
					
					ИмяТекущейГруппировки=ИмяГруппировки;
					
				КонецЕсли;
				
				Для Каждого КлючИЗначение ИЗ Расшифровка Цикл
					
					Если КлючИЗначение.Ключ=ИмяГруппировки Тогда
						
						Продолжить;
						
					ИначеЕсли СтрНайти(КлючИЗначение.Ключ,ИмяТекущейГруппировки+"_Родитель_")>0 Тогда
						
						ВсегоУровнейИерархии=ВсегоУровнейИерархии+1;
						
						Если НЕ ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
							
							ПропущенныхУровнейИерархии=ПропущенныхУровнейИерархии+1;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если (СтрНайти(ИмяГруппировки,"_Родитель_")>0 И ПропущенныхУровнейИерархии>0)
					ИЛИ (СтруктураГруппировокИерархия.Свойство(ИмяГруппировки) И ПропущенныхУровнейИерархии=ВсегоУровнейИерархии) Тогда
					
					ТабДок.Область(УровеньШапки+ТекУровень+1-ПропущенныхУровнейИерархии,НачалоУровня,УровеньШапки+ТекУровень+1-ПропущенныхУровнейИерархии,НачалоУровня).Текст=Выборка[ИмяГруппировки];
					ТабДок.Область(УровеньШапки+ТекУровень+1-ПропущенныхУровнейИерархии,НачалоУровня,УровеньШапки+ТекУровень+1,ТабДок.ШиринаТаблицы).Объединить();
					
				ИначеЕсли ЗначениеЗаполнено(Выборка[ИмяГруппировки]) Тогда
					
					ТабДок.Область(УровеньШапки+ТекУровень+1,НачалоУровня,УровеньШапки+ТекУровень+1,ТабДок.ШиринаТаблицы).Объединить();
					
				КонецЕсли;
				
			Иначе
				
				ТабДок.Область(УровеньШапки+ТекУровень+1,НачалоУровня,УровеньШапки+ТекУровень+1,ТабДок.ШиринаТаблицы).Объединить();
				
			КонецЕсли;
			
		ИначеЕсли СтруктураГруппировокИерархия.Свойство(ИмяГруппировки) Тогда // Проверим элементы первого уровня
			
			ПропущенныхУровнейИерархии=0;
			ВсегоУровнейИерархии=0;
			
			Для Каждого КлючИЗначение ИЗ Расшифровка Цикл
				
				Если КлючИЗначение.Ключ=ИмяГруппировки Тогда
					
					Продолжить;
					
				ИначеЕсли СтрНайти(КлючИЗначение.Ключ,ИмяГруппировки+"_Родитель_")>0 Тогда
					
					ВсегоУровнейИерархии=ВсегоУровнейИерархии+1;
					
					Если НЕ ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
						
						ПропущенныхУровнейИерархии=ПропущенныхУровнейИерархии+1;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПропущенныхУровнейИерархии=ВсегоУровнейИерархии Тогда
				
				ТабДок.Область(УровеньШапки+ТекУровень+1-ПропущенныхУровнейИерархии,НачалоУровня,УровеньШапки+ТекУровень+1-ПропущенныхУровнейИерархии,НачалоУровня).Текст=Выборка[ИмяГруппировки];
				ТабДок.Область(УровеньШапки+ТекУровень+1-ПропущенныхУровнейИерархии,НачалоУровня,УровеньШапки+ТекУровень+1,ТабДок.ШиринаТаблицы).Объединить();
				
			КонецЕсли;
			
		КонецЕсли;
		
		Индекс=Индекс+1;
		
		ПервыйЭлементГруппировки=Ложь;
		
	КонецЦикла;
	
	Расшифровка.Удалить(ИмяГруппировки);
	
	Если (СтруктураГруппировокИерархия.Свойство(ИмяГруппировки) ИЛИ СтрНайти(ИмяГруппировки,"_Родитель_")>0) И СписокГруппировокИерархии.Количество()>0 Тогда
		
		СписокГруппировокИерархии.Удалить(0);
		
	КонецЕсли;
	
КонецПроцедуры // ВывестиШапку()

Процедура СохранитьРаскрытыеГруппы() Экспорт;
	
	Для Каждого СтрГруппа ИЗ ТабРаскрытиеГруппСтроки Цикл
		
		ОбластьОбработки=ТабДок.Область(СтрГруппа.НачалоГруппы,,СтрГруппа.КонецГруппы,);
		СтрГруппа.Раскрыта=?(ОбластьОбработки.Видимость=Неопределено,Истина,ОбластьОбработки.Видимость);
		
	КонецЦикла;
	
	Для Каждого СтрГруппа ИЗ ТабРаскрытиеГруппКолонки Цикл
		
		ОбластьОбработки=ТабДок.Область(,СтрГруппа.НачалоГруппы,,СтрГруппа.КонецГруппы);
		СтрГруппа.Раскрыта=?(ОбластьОбработки.Видимость=Неопределено,Истина,ОбластьОбработки.Видимость);
		
	КонецЦикла;
	
КонецПроцедуры // СохранитьРаскрытыеГруппы()

Процедура СохранитьШиринуКолонок()
	
	МассивШиринаКолонок=Новый Массив;
	
	Для Индекс=1 По ТабДок.ШиринаТаблицы Цикл
		
		МассивШиринаКолонок.Добавить(ТабДок.Область(,Индекс,,Индекс).ШиринаКолонки);
		
	КонецЦикла;
		
КонецПроцедуры // СохранитьШиринуКолонок()

Процедура ВосстановитьШиринуКолонок()
	
	Для Индекс=1 По МассивШиринаКолонок.Количество() Цикл
			
		ТабДок.Область(,Индекс,,Индекс).ШиринаКолонки=МассивШиринаКолонок[Индекс-1];
		
	КонецЦикла;
		
КонецПроцедуры // ВосстановитьШиринуКолонок() 

Процедура СформироватьТаблицу(Запрос)
	
	Если ТабРаскрытиеГруппСтроки=Неопределено Тогда
		
		ПодготовитьТаблицыГрупп();
		
	Иначе
		
		СохранитьРаскрытыеГруппы();
		
	КонецЕсли; 
	
	СохранитьШиринуКолонок();
		
	ТабДок.Очистить();
	Макет=ПолучитьМакет("Макет");
	
	ПодготовитьМакетыОбластей(Макет);

	
	///////////////////////////////////////////////////////////////////////////
	// Подготовим таблицы для координат группировок строк и колонок
	
	СтрокаГруппировкиСтроки="";
	СтрокаГруппировкиКолонки="";
	
	Для Каждого Группировка ИЗ ГруппировкиСтроки Цикл
		СтрокаГруппировкиСтроки=СтрокаГруппировкиСтроки+","+Группировка.Группировка;
	КонецЦикла;
	
	Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		СтрокаГруппировкиСтроки=СтрокаГруппировкиСтроки+",Аналитика"+ИндексАналитики;
	КонецЦикла;
	
	Для Каждого Группировка ИЗ ГруппировкиКолонки Цикл
		СтрокаГруппировкиКолонки=СтрокаГруппировкиКолонки+","+Группировка.Группировка;
	КонецЦикла;
	
	СтрокаГруппировкиСтроки=Сред(СтрокаГруппировкиСтроки,2);
	СтрокаГруппировкиКолонки=Сред(СтрокаГруппировкиКолонки,2);
	
	ТабКоординатыСтрок=ШаблонТаблицыКоординат.СкопироватьКолонки(СтрокаГруппировкиСтроки);
	ТабКоординатыСтрок.Колонки.Добавить("Раскрытие",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТабКоординатыСтрок.Колонки.Добавить("УровеньСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТабКоординатыСтрок.Колонки.Добавить("НомерСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
	ТабКоординатыСтрок.Колонки.Добавить("ИндексАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
		
	Если ЕстьВыводИерархии Тогда
		
		Для Каждого СтрГруппировка ИЗ ГруппировкиСтроки Цикл
			
			Если СтруктураГруппировокИерархия.Свойство(СтрГруппировка.Группировка) Тогда
				
				Для Каждого СтрИерархия ИЗ СтруктураГруппировокИерархия[СтрГруппировка.Группировка] Цикл
										
					Если СтрИерархия.ВыводитьИтоги Тогда
						
						ТабКоординатыСтрок.Колонки.Добавить(СтрИерархия.ПсевдонимПоля,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка."+СправочникиГруппировок[СтрГруппировка.Группировка]));
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	ТабКоординатыКолонок=ШаблонТаблицыКоординат.СкопироватьКолонки(СтрокаГруппировкиКолонки);
	ТабКоординатыКолонок.Колонки.Добавить("НомерКолонки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
	
	ТабКоординатыВычисляемыхКолонок=ТабКоординатыКолонок.СкопироватьКолонки();
	ТабКоординатыВычисляемыхКолонок.Колонки.Добавить("ИмяКолонки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
	ТабКоординатыВычисляемыхКолонок.Колонки.Добавить("НомерКолонкиБазис",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
	ТабКоординатыВычисляемыхКолонок.Колонки.Добавить("НомерКолонкиЗначение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
	ТабКоординатыВычисляемыхКолонок.Колонки.Добавить("НомерКолонкиИтог",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
	
	Если ЕстьВыводИерархии Тогда
		
		Для Каждого СтрГруппировка ИЗ ГруппировкиКолонки Цикл
			
			Если СтруктураГруппировокИерархия.Свойство(СтрГруппировка.Группировка) Тогда
				
				Для Каждого СтрИерархия ИЗ СтруктураГруппировокИерархия[СтрГруппировка.Группировка] Цикл
										
					Если СтрИерархия.ВыводитьИтоги Тогда
						
						ТабКоординатыКолонок.Колонки.Добавить(СтрИерархия.ПсевдонимПоля,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка."+СправочникиГруппировок[СтрГруппировка.Группировка]));
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////////
		
	КолонокАналитикиРаскрытия=?(МаксАналитикПоказателя<=1,1,МаксАналитикПоказателя);
	ТабМакетКолонки=Новый ТабличныйДокумент;
	ТабМакетКолонки.Вывести(Макет.ПолучитьОбласть(1,2,1,2));
	
	Для Каждого СтрКолонка ИЗ МассивГруппировокКолонокИтог Цикл
		
		ТабМакетКолонки.Вывести(ОбластьГруппировкаКолонка);
		
	КонецЦикла;
	
	ТабМакетКолонки=ТабМакетКолонки;
	УровеньШапки=ТабДок.ВысотаТаблицы;
	КолонокАналитикиРаскрытия=КолонокАналитикиРаскрытия;
	
	ТабДок.Вывести(Макет.ПолучитьОбласть(1,1,МассивГруппировокКолонокИтог.Количество()+1,КолонокАналитикиРаскрытия+1));
	ТабДок.ФиксацияСлева=ТабДок.ШиринаТаблицы;
	ПерваяКолонка=ТабДок.ШиринаТаблицы+1;
	
	ЛинияПолужирная = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
	ТабДок.Область(УровеньШапки+2,2,ТабДок.ВысотаТаблицы,1+КолонокАналитикиРаскрытия).Обвести(ЛинияПолужирная,ЛинияПолужирная,ЛинияПолужирная,ЛинияПолужирная);
	ТабДок.Область(УровеньШапки+2,2,ТабДок.ВысотаТаблицы,1+КолонокАналитикиРаскрытия).Объединить();
	
	НачалоКолонок=ТабДок.ШиринаТаблицы;
	УровеньСтрока=МассивГруппировокСтрокИтог.Найти("Строка")+1;
	УровеньКолонка=МассивГруппировокКолонокИтог.Найти("Колонка")+1;
	
	ВывестиШапку(Запрос.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[0],"Все"),1,Новый СписокЗначений);
	
	ТабКоординатыВычисляемыхКолонок.Индексы.Добавить("ИмяКолонки");
	
	ТабКоординатыКолонок.Индексы.Добавить("НомерКолонки");
	
	ПоследняяКолонка=?(ТабКоординатыВычисляемыхКолонок.Количество()>0,
					ТабКоординатыВычисляемыхКолонок[ТабКоординатыВычисляемыхКолонок.Количество()-1].НомерКолонки,
					ТабКоординатыКолонок[ТабКоординатыКолонок.Количество()-1].НомерКолонки);
	
	ТабДок.ФиксацияСверху=ТабДок.ВысотаТаблицы;
	
	ПерваяСтрока=ТабДок.ВысотаТаблицы+1;
	
	КэшТабКоординатПоНомерамКолонок = Новый Соответствие;	
	КолонкаДетали = ГруппировкиКолонки.Получить(ГруппировкиКолонки.Количество()-1).Группировка;	
	
	ВывестиГруппировку(Запрос.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокСтрокИтог[0],"Все"),0,,Новый СписокЗначений);
	
	КэшТабКоординатПоНомерамКолонок = Неопределено;
	КолонкаДетали = Неопределено;
	
	// Сформируем итоговую таблицу соответствия областей и группировок строк/колонок
	
	ШаблонКоординаты=Новый ТаблицаЗначений;
	ТекстЗапроса="";
	
	ТекстЗапроса=ТекстЗапроса+"
	|ВЫБРАТЬ Строка, Колонка, Ссылка
	|ПОМЕСТИТЬ СтрокаКолонка
	|ИЗ &мПоказателиЭталон КАК мПоказателиЭталон
	|ИНДЕКСИРОВАТЬ ПО Строка, Колонка, Ссылка
	|;";
	
	Если ТаблицаКоординатПомещенаВЗапрос Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|Уничтожить ТабКоординатыОбщ
		|;";
		
		ТаблицаКоординатПомещенаВЗапрос=Ложь;
		
	КонецЕсли;
	
	ЗапросКоординаты.УстановитьПараметр("мПоказателиЭталон",мПоказателиЭталон);
	
	ТекстЗапроса=ТекстЗапроса+"
	|ВЫБРАТЬ *
	|Поместить КоординатыСтрок
	|ИЗ &ТабКоординатыСтрок КАК ТабКоординатыСтрок
	|;
	|ВЫБРАТЬ *
	|Поместить КоординатыКолонок
	|ИЗ &ТабКоординатыКолонок КАК ТабКоординатыКолонок
	|ИНДЕКСИРОВАТЬ ПО НомерКолонки
	|;
	|ВЫБРАТЬ";
	
	ТекстСвязи="";
	ТекстВыбораИзмерений="";
	ТекстИндекс="";
	ТекстИндексТК="";
	
	КолонокИндекса=0;
	КолонокИндексаТК=7;
	
	Для Каждого Группировка ИЗ МассивГруппировокСтрокИтог Цикл
		
		Если Группировка="ИндексАналитики" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса=ТекстЗапроса+"
		|КоординатыСтрок."+Группировка+" КАК "+Группировка+",";
		
		ШаблонКоординаты.Колонки.Добавить(ТабКоординатыСтрок.Колонки[Группировка].Имя,ТабКоординатыСтрок.Колонки[Группировка].ТипЗначения);
		
		Если НЕ (Группировка="Строка" ИЛИ СтрНайти(Группировка,"_Родитель")>0) Тогда
			ТекстСвязи=ТекстСвязи+"
			|И ПересечениеКоординат."+Группировка+"=ЭкземплярыОтчетов."+Группировка;
			
			
			ЧислоКолонокИндекса=?(СтрНайти(Группировка,"Аналитика")>0,3,1);
			
			Если (КолонокИндекса+ЧислоКолонокИндекса)<=16 Тогда
				
				ТекстИндекс=ТекстИндекс+","+Группировка;
				КолонокИндекса=КолонокИндекса+ЧислоКолонокИндекса;
				
			КонецЕсли;
			
			Если (КолонокИндексаТК+ЧислоКолонокИндекса)<=16 Тогда
				
				ТекстИндексТК=ТекстИндексТК+",ПересечениеКоординат."+Группировка;
				КолонокИндексаТК=КолонокИндексаТК+ЧислоКолонокИндекса;
				
			КонецЕсли;	
			
			ТекстВыбораИзмерений=ТекстВыбораИзмерений+"
			|"+Группировка+",";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		ТекстЗапроса=ТекстЗапроса+"
		|КоординатыСтрок.Аналитика"+ИндексАналитики+" КАК Аналитика"+ИндексАналитики+",";
		
		ШаблонКоординаты.Колонки.Добавить(ТабКоординатыСтрок.Колонки["Аналитика"+ИндексАналитики].Имя,ТабКоординатыСтрок.Колонки["Аналитика"+ИндексАналитики].ТипЗначения);
		
	КонецЦикла;
	
	Для Каждого Группировка ИЗ МассивГруппировокКолонокИтог Цикл
		ТекстЗапроса=ТекстЗапроса+"
		|КоординатыКолонок."+Группировка+" КАК "+Группировка+",";
		
		ШаблонКоординаты.Колонки.Добавить(ТабКоординатыКолонок.Колонки[Группировка].Имя,ТабКоординатыКолонок.Колонки[Группировка].ТипЗначения);
		
		Если НЕ (Группировка="Колонка" ИЛИ СтрНайти(Группировка,"_Родитель")>0) Тогда
			ТекстСвязи=ТекстСвязи+"
			|И ПересечениеКоординат."+Группировка+"=ЭкземплярыОтчетов."+Группировка;
			
			ЧислоКолонокИндекса=?(СтрНайти(Группировка,"Аналитика")>0,3,1);
			
			Если (КолонокИндекса+ЧислоКолонокИндекса)<=16 Тогда
				
				ТекстИндекс=ТекстИндекс+","+Группировка;
				КолонокИндекса=КолонокИндекса+ЧислоКолонокИндекса;
				
			КонецЕсли;
			
			Если (КолонокИндексаТК+ЧислоКолонокИндекса)<=16 Тогда
				
				ТекстИндексТК=ТекстИндексТК+",ПересечениеКоординат."+Группировка;
				КолонокИндексаТК=КолонокИндексаТК+ЧислоКолонокИндекса;
				
			КонецЕсли;	
			
			ТекстВыбораИзмерений=ТекстВыбораИзмерений+"
			|"+Группировка+",";
			
		КонецЕсли;
		
	КонецЦикла;
	
	ШаблонКоординаты.Колонки.Добавить(ТабКоординатыСтрок.Колонки["Раскрытие"].Имя,ТабКоординатыСтрок.Колонки["Раскрытие"].ТипЗначения);
	ШаблонКоординаты.Колонки.Добавить(ТабКоординатыСтрок.Колонки["ИндексАналитики"].Имя,ТабКоординатыСтрок.Колонки["ИндексАналитики"].ТипЗначения);
	ШаблонКоординаты.Колонки.Добавить(ТабКоординатыСтрок.Колонки["НомерСтроки"].Имя,ТабКоординатыСтрок.Колонки["НомерСтроки"].ТипЗначения);
    ШаблонКоординаты.Колонки.Добавить(ТабКоординатыКолонок.Колонки["НомерКолонки"].Имя,ТабКоординатыКолонок.Колонки["НомерКолонки"].ТипЗначения);
	ШаблонКоординаты.Колонки.Добавить("Показатель",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОтчетов"));
	ШаблонКоординаты.Колонки.Добавить("ЭкземплярОтчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ДокументСсылка.НастраиваемыйОтчет"));
	
	ТекстЗапроса=ТекстЗапроса+"
	|КоординатыСтрок.Раскрытие КАК Раскрытие,
	|КоординатыСтрок.ИндексАналитики КАК ИндексАналитики,
	|КоординатыСтрок.НомерСтроки КАК НомерСтроки,
	|КоординатыКолонок.НомерКолонки КАК НомерКолонки
	|ПОМЕСТИТЬ ПересечениеКоординат
	|ИЗ КоординатыСтрок КАК КоординатыСтрок,КоординатыКолонок КАК КоординатыКолонок
	|ИНДЕКСИРОВАТЬ ПО "+Сред(ТекстИндекс,2)+"
	|;
	|ВЫБРАТЬ"+ТекстВыбораИзмерений+"
	|ЭкземплярОтчета
	|ПОМЕСТИТЬ ЭкземплярыОтчетов
	|ИЗ &ТабОтчеты КАК ТабОтчеты
	|ГДЕ ТабОтчеты.ЕстьЭкземплярОтчета
	|ИНДЕКСИРОВАТЬ ПО "+Сред(ТекстИндекс,2)+"
	|;
	|ВЫБРАТЬ ПересечениеКоординат.*, 
	|ISNULL(СтрокаКолонка.Ссылка,&ПустойПоказатель) КАК Показатель,
	|ISNULL(ЭкземплярыОтчетов.ЭкземплярОтчета,&ПустойЭкземплярОтчета) КАК ЭкземплярОтчета
	|ПОМЕСТИТЬ ТабКоординатыОбщ
	|ИЗ ПересечениеКоординат КАК ПересечениеКоординат
	|ЛЕВОЕ СОЕДИНЕНИЕ СтрокаКолонка КАК СтрокаКолонка 
	|ПО ПересечениеКоординат.Строка=СтрокаКолонка.Строка
	|И  ПересечениеКоординат.Колонка=СтрокаКолонка.Колонка
	|ЛЕВОЕ СОЕДИНЕНИЕ ЭкземплярыОтчетов
	|ПО "+Сред(ТекстСвязи,4)+"
	|ГДЕ НЕ ПересечениеКоординат.НомерКолонки=0
	|ИНДЕКСИРОВАТЬ ПО НомерСтроки,НомерКолонки,ПересечениеКоординат.Строка,ПересечениеКоординат.Колонка,Показатель,ЭкземплярОтчета,Раскрытие"+ТекстИндексТК+"
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КоординатыСтрок
	|;
    |УНИЧТОЖИТЬ КоординатыКолонок
	|;
	|УНИЧТОЖИТЬ ПересечениеКоординат
	|;
	|УНИЧТОЖИТЬ ЭкземплярыОтчетов
	|;";
	
	ЗапросКоординаты.Текст=ТекстЗапроса;
	ЗапросКоординаты.УстановитьПараметр("ТабКоординатыСтрок",ТабКоординатыСтрок);
	ЗапросКоординаты.УстановитьПараметр("ТабКоординатыКолонок",ТабКоординатыКолонок);
	ЗапросКоординаты.УстановитьПараметр("мПоказателиЭталон",мПоказателиЭталон);
	ЗапросКоординаты.УстановитьПараметр("ПустойПоказатель",Справочники.ПоказателиОтчетов.ПустаяСсылка());
	ЗапросКоординаты.УстановитьПараметр("ТабОтчеты",ТабОтчеты);
	ЗапросКоординаты.УстановитьПараметр("ПустойЭкземплярОтчета",Документы.НастраиваемыйОтчет.ПустаяСсылка());
	
	ЗапросКоординаты.Выполнить();
	
	ТаблицаКоординатПомещенаВЗапрос=Истина;
			
	// Отметим области, для которых не существует экземпляров отчета (соответственно, они не редактируются);
	
	Если ОтображатьНеиспользуемые Тогда
		
		ТекстИзмерения="";
		ТекстСвязи="";
		
		Для Каждого Строка ИЗ ГруппировкиСтроки Цикл
			
			Если Строка.Группировка="Строка" Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстИзмерения=ТекстИзмерения+",
			|"+Строка.Группировка;
			
			ТекстСвязи=ТекстСвязи+"
			|И ТабКоординатыОбщ."+Строка.Группировка+" = ТабПустыеЭкземпляры."+Строка.Группировка;
			
		КонецЦикла;
		
		Для Каждого Колонка ИЗ ГруппировкиКолонки Цикл
			
			Если Колонка.Группировка="Колонка" Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстИзмерения=ТекстИзмерения+",
			|"+Колонка.Группировка;
			
			ТекстСвязи=ТекстСвязи+"
			|И ТабКоординатыОбщ."+Колонка.Группировка+" = ТабПустыеЭкземпляры."+Колонка.Группировка;
			
		КонецЦикла;
		
		ЗапросКоординаты.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ "+Сред(ТекстИзмерения,2)+"
		|ПОМЕСТИТЬ ТабПустыеЭкземпляры
		|ИЗ &ТабОтчеты КАК ТабОтчеты
		|ГДЕ (НЕ ТабОтчеты.ЕстьЭкземплярОтчета)
		|;
		|ВЫБРАТЬ
		|ТабКоординатыОбщ.НомерСтроки,
		|ТабКоординатыОбщ.НомерКолонки
		|ИЗ ТабКоординатыОбщ
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабПустыеЭкземпляры
		|ПО "+Сред(ТекстСвязи,4)+"
		|ГДЕ НЕ (ТабКоординатыОбщ.Строка=&ПустаяСтрока ИЛИ ТабКоординатыОбщ.Колонка=&ПустаяКолонка)";
		
		ЗапросКоординаты.УстановитьПараметр("ТабОтчеты",ТабОтчеты);
		ЗапросКоординаты.УстановитьПараметр("ПустаяСтрока",Справочники.СтрокиОтчетов.ПустаяСсылка());
		ЗапросКоординаты.УстановитьПараметр("ПустаяКолонка",Справочники.КолонкиОтчетов.ПустаяСсылка());
		
		ФонНередактируемыхЯчеек=Макет.ПолучитьОбласть("УзорНередактируемыхЯчеек").ТекущаяОбласть.ЦветФона;
		//ФонРазделителя=ОбластьРазделитель.ТекущаяОбласть.ЦветФона;
		
		Результат=ЗапросКоординаты.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			ТекОбласть=ТабДок.Область(Результат.НомерСтроки,Результат.НомерКолонки,Результат.НомерСтроки,Результат.НомерКолонки);
			
			ТекОбласть.ЦветФона=ФонНередактируемыхЯчеек;
			
		КонецЦикла;	
		
		ЗапросКоординаты.Текст="Уничтожить ТабПустыеЭкземпляры";
		ЗапросКоординаты.Выполнить();
		
	КонецЕсли;
	
	Если ГруппироватьПоИерархииСтрок Тогда	
		СгруппироватьСтрокиПоИерархии();
	КонецЕсли;
	
	Если ГруппироватьСтроки Тогда
		СгруппироватьИзмерения(ГруппировкиСтроки,ТабКоординатыСтрок,УровеньСтрока,"НомерСтроки",ТабРаскрытиеГруппСтроки);
	КонецЕсли;
	
	Если ГруппироватьКолонки Тогда
		СгруппироватьИзмерения(ГруппировкиКолонки,ТабКоординатыКолонок,УровеньКолонка,"НомерКолонки",ТабРаскрытиеГруппКолонки);
	КонецЕсли;
	
	ТабРаскрытиеГруппСтроки.Сортировать("УровеньГруппировки");
	ТабРаскрытиеГруппКолонки.Сортировать("УровеньГруппировки");
	
	Если ТабОформлениеСтрок.Количество()>0 и СохранятьФорматирование Тогда
		
		ЛинияСлева=ТабОформлениеСтрок[0].ШаблонОформления.ТекущаяОбласть.ГраницаСлева;
		ЛинияСправа=ТабОформлениеСтрок[0].ШаблонОформления.ТекущаяОбласть.ГраницаСправа;
		
		ТабДок.Область(2,1,ТабДок.ВысотаТаблицы,1).ГраницаСправа=ЛинияСлева;
		ТабДок.Область(2,ТабДок.ШиринаТаблицы+1,ТабДок.ВысотаТаблицы,ТабДок.ШиринаТаблицы+1).ГраницаСлева=ЛинияСправа;
		
	КонецЕсли;
	
	ВосстановитьШиринуКолонок();
		
	//ТабДок.Показать();
	
КонецПроцедуры

Процедура ПодготовитьМакетыОбластей(Макет)
    
   	// Получим необходимые макеты областей
	
	ОбластьОтступ=Макет.ПолучитьОбласть("ОбластьШапкаСтрока|Отступ");
	ОбластьГруппировкиСтрока=Макет.ПолучитьОбласть("ОбластьСтрока|Группировка");
	ОбластьГруппировкиСтрокаРаскрытие=Макет.ПолучитьОбласть("ОбластьСтрока|Группировка");
	ОбластьГруппировкаКолонка=Макет.ПолучитьОбласть("ОбластьШапкаКолонка|Группировка");
	ОбластьРазделитель=Макет.ПолучитьОбласть("Разделитель");
	
	ОбластьВычисляемойКолонкиОтн=Макет.ПолучитьОбласть("ОбластьВычисляемойКолонкиОтн");
	
	// Установим формат выводимых данных
	
	ТипЗначенияЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18 , ТекущаяТочность));
	ТипЗначенияСтрока = Новый ОписаниеТипов("Строка");
	
	ФорматЧисло = "ЧЦ=18; ЧДЦ=" + ТекущаяТочность;
	
	ОбластьГруппировкиПоказатель=Макет.ПолучитьОбласть("ОбластьПоказатель|Группировка");
	ОбластьГруппировкиПоказатель.ТекущаяОбласть.ТипЗначения = ТипЗначенияЧисло;
	ОбластьГруппировкиПоказатель.ТекущаяОбласть.Формат = ФорматЧисло;
				
	ОбластьВычисляемойКолонкиАбс=Макет.ПолучитьОбласть("ОбластьВычисляемойКолонкиАбс");
	ОбластьВычисляемойКолонкиАбс.ТекущаяОбласть.ТипЗначения = ТипЗначенияЧисло;
	ОбластьВычисляемойКолонкиАбс.ТекущаяОбласть.Формат = ФорматЧисло;
	
	ШрифтОбласти = Новый Шрифт(ОбластьГруппировкиПоказатель.ТекущаяОбласть.Шрифт,,,,Истина);
		
	ОбластьГруппировкиПоказательРаскрытие=Макет.ПолучитьОбласть("ОбластьПоказатель|Группировка");
	ОбластьГруппировкиПоказательРаскрытие.ТекущаяОбласть.Шрифт = ШрифтОбласти;
	ОбластьГруппировкиПоказательРаскрытие.ТекущаяОбласть.ТипЗначения = ТипЗначенияЧисло;
	ОбластьГруппировкиПоказательРаскрытие.ТекущаяОбласть.Формат = ФорматЧисло;
	
	ОбластьГруппировкиПоказательРаскрытиеСтрока=Макет.ПолучитьОбласть("ОбластьПоказатель|Группировка");
	ОбластьГруппировкиПоказательРаскрытиеСтрока.ТекущаяОбласть.Шрифт = ШрифтОбласти;
	ОбластьГруппировкиПоказательРаскрытиеСтрока.ТекущаяОбласть.ТипЗначения = ТипЗначенияСтрока;	
		
	ТаблицаШаблонов=Новый ТаблицаЗначений;
	ТаблицаШаблонов.Колонки.Добавить("ШаблонОформления");
	ТаблицаШаблонов.Колонки.Добавить("ШаблонОформленияРаскрытие");
	
	Для Индекс=1 По МассивГруппировокСтрокИтог.Количество() Цикл
		
		ТекИндекс=?(Индекс<=5,Индекс,5);
		
		НоваяСтрока=ТаблицаШаблонов.Добавить();
		НоваяСтрока.ШаблонОформления=Макет.ПолучитьОбласть("ГруппировкаСтрокаУровень"+ТекИндекс);
		НоваяСтрока.ШаблонОформления.ТекущаяОбласть.Отступ=Индекс-1;
		
		НоваяСтрока.ШаблонОформленияРаскрытие=Макет.ПолучитьОбласть("ГруппировкаСтрокаУровень"+ТекИндекс);
		НоваяСтрока.ШаблонОформленияРаскрытие.ТекущаяОбласть.Шрифт = Новый Шрифт(НоваяСтрока.ШаблонОформления.ТекущаяОбласть.Шрифт,,,,Истина);
		НоваяСтрока.ШаблонОформленияРаскрытие.ТекущаяОбласть.Отступ=Индекс-1;
		
	КонецЦикла;
	
	Для Каждого СтрВычисляемаяГруппировка ИЗ ГруппировкиВычисляемыеКолонки Цикл
		
		Если СтрВычисляемаяГруппировка.Группировка="ОтклонениеАбс" И СтрВычисляемаяГруппировка.УсловноеОформление Тогда
			
			ОбластьВычисляемойКолонкиАбс.ТекущаяОбласть.Шрифт=Новый Шрифт(ОбластьВычисляемойКолонкиАбс.ТекущаяОбласть.Шрифт,,,Истина);
			
		ИначеЕсли СтрВычисляемаяГруппировка.Группировка="ОтклонениеОтн" И СтрВычисляемаяГруппировка.УсловноеОформление Тогда
			
			ОбластьВычисляемойКолонкиОтн.ТекущаяОбласть.Шрифт=Новый Шрифт(ОбластьВычисляемойКолонкиОтн.ТекущаяОбласть.Шрифт,,,Истина);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры



Процедура СформироватьТаблицуРаскрытия(МассивОтчетов,ТолькоОбновлениеЗначений=Ложь)
	
	ТекстВТ="";
	
	ТекстОбъединениеРаскрытие="";
	
	МассивЭкземпляровСвод=Новый Массив;
	
	Для Каждого СтрОтчет ИЗ МассивОтчетов Цикл
		
		Если НЕ СтрОтчет.ОтчетИнициализирован Тогда // Данные будем брать из таблицы сводной инициализации
			
			МассивЭкземпляровСвод.Добавить(СтрОтчет.ЭкземплярОтчета);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// По таблицам проинициализированных экземпляров отчета
				
	Для Индекс=0 По МассивОтчетов.Количество()-1 Цикл
		
		СтрОтчет=МассивОтчетов[Индекс];
		
		Если НЕ СтрОтчет.ОтчетИнициализирован Тогда
			Продолжить;
		КонецЕсли;
		
		ПолучитьДокументОбъект(СтрОтчет);
		
		СтрокаИндекс=Формат(Индекс,"ЧГ=");
				
		ИзмеренияАналитики="";
				
		Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
			
			Если СтрАналитика.ЕстьРазворот Тогда
				
				ИзмеренияАналитики=ИзмеренияАналитики+"
				|&"+СтрАналитика.КодАналитики+"_"+СтрокаИндекс+" КАК "+СтрАналитика.КодАналитики+",";
				
				ЗапросДанныеРаскрытия.УстановитьПараметр(СтрАналитика.КодАналитики+"_"+СтрокаИндекс,СтрОтчет[СтрАналитика.КодАналитики]);
								
			КонецЕсли;
			
		КонецЦикла;
						
		ТекстВТ=ТекстВТ+"
		|/////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ";
		
		Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
			
			ТекстВТ=ТекстВТ+"
			|&"+Реквизит+"_"+СтрокаИндекс+" КАК "+Реквизит+",";
		
		КонецЦикла; 
		
		ТекстВТ=ТекстВТ+"
		|&ЭкземплярОтчета_"+СтрокаИндекс+" КАК ЭкземплярОтчета,"+ИзмеренияАналитики+"
		|мПоказателиРаскрытия.Показатель,";
		
		Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			ТекстВТ=ТекстВТ+"		
			|мПоказателиРаскрытия.Аналитика"+ИндексАналитики+" КАК Аналитика"+ИндексАналитики+",";
			
		КонецЦикла;
		
		ТекстВТ=ТекстВТ+"
		|мПоказателиРаскрытия.Значение КАК ЗначениеПоказателя,
		|ВЫРАЗИТЬ(мПоказателиРаскрытия.Значение КАК Число(18,5)) КАК ЗначениеЧисло
		|Поместить мПоказателиРаскрытияОбщ_"+СтрокаИндекс+"
		|ИЗ &мПоказателиРаскрытия_"+СтрокаИндекс+" КАК мПоказателиРаскрытия";
		
		МассивТаблицПоказателейРаскрытия.Добавить("мПоказателиРаскрытияОбщ_"+СтрокаИндекс);
		
		ТекстОтбор="";	
		
		Если СписокПоказателиНеВБланке.Количество()>0 Тогда
			ТекстОтбор=ТекстОтбор+"			
			|И мПоказателиРаскрытия.Показатель НЕ В(&СписокПоказателиНеВБланке)";
			
			ЗапросДанныеРаскрытия.УстановитьПараметр("СписокПоказателиНеВБланке",СписокПоказателиНеВБланке);
			
		КонецЕсли;
		
		Если СписокИзмененныхПоказателей.Количество()>0 Тогда
			ТекстОтбор=ТекстОтбор+"			
			|И мПоказателиРаскрытия.Показатель В(&СписокИзмененныхПоказателей)";
			
			ЗапросДанныеРаскрытия.УстановитьПараметр("СписокИзмененныхПоказателей",СписокИзмененныхПоказателей);
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстОтбор) Тогда
			
			ТекстВТ=ТекстВТ+"			
			|ГДЕ "+Сред(ТекстОтбор,6)+"
			|;";
			
		Иначе	
			
			ТекстВТ=ТекстВТ+"			
			|;";
			
		КонецЕсли;
		
		Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
			
			ЗапросДанныеРаскрытия.УстановитьПараметр(Реквизит+"_"+СтрокаИндекс,СтрОтчет[Реквизит]);
			
		КонецЦикла; 
		
		ЗапросДанныеРаскрытия.УстановитьПараметр("ЭкземплярОтчета_"+СтрокаИндекс,СтрОтчет.ЭкземплярОтчета);
		
		Если ТолькоОбновлениеЗначений Тогда
			
			ЗапросДанныеРаскрытия.УстановитьПараметр("мПоказателиРаскрытия_"+СтрокаИндекс,СтрОтчет.мИзмененныеПоказателиРаскрытия);
			
		Иначе
			
			ЗапросДанныеРаскрытия.УстановитьПараметр("мПоказателиРаскрытия_"+СтрокаИндекс,?(СтрОтчет.ВыводитьВВалютеОтображения,СтрОтчет.мПоказателиРаскрытияВВалюте,СтрОтчет.ОтчетОбъект.мПоказателиРаскрытия));
			
		КонецЕсли;
		
		ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ * ИЗ мПоказателиРаскрытияОбщ_"+СтрокаИндекс+" КАК мПоказателиРаскрытияОбщ_"+СтрокаИндекс;
		
	КонецЦикла;
	
	// По сводным таблицам инициализации
	
	Если НЕ (ТолькоОбновлениеЗначений ИЛИ ТабОтчетыСводная.Количество()=0) Тогда
		
		ЗапросДанныеРаскрытия.УстановитьПараметр("МассивЭкземпляровСвод",МассивЭкземпляровСвод);
		
		ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ";
		
		Для каждого Реквизит Из МассивКлючевыхРеквизитов Цикл
			
			ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
			|мПоказателиРаскрытияКонтекст."+Реквизит+" КАК "+Реквизит+",";
			
			
		КонецЦикла; 
		
		ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
		|мПоказателиРаскрытияКонтекст.ЭкземплярОтчета КАК ЭкземплярОтчета,
		|мПоказателиРаскрытияКонтекст.Показатель,";
		
		Для ИндексАналитики=1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"		
			|мПоказателиРаскрытияКонтекст.Аналитика"+ИндексАналитики+" КАК Аналитика"+ИндексАналитики+",";
			
		КонецЦикла;
		
		ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"
		|мПоказателиРаскрытияКонтекст.ЗначениеЧисло КАК ЗначениеПоказателя,
		|ВЫРАЗИТЬ(мПоказателиРаскрытияКонтекст.ЗначениеЧисло КАК Число(18,5)) КАК ЗначениеЧисло
		|ИЗ мПоказателиРаскрытияКонтекст КАК мПоказателиРаскрытияКонтекст
		|ГДЕ мПоказателиРаскрытияКонтекст.ЭкземплярОтчета В (&МассивЭкземпляровСвод)";
		
		ТекстОтбор="";	
		
		Если СписокПоказателиНеВБланке.Количество()>0 Тогда
			ТекстОтбор=ТекстОтбор+"			
			|И мПоказателиРаскрытияКонтекст.Показатель НЕ В(&СписокПоказателиНеВБланке)";
			
			ЗапросДанныеРаскрытия.УстановитьПараметр("СписокПоказателиНеВБланке",СписокПоказателиНеВБланке);
			
		КонецЕсли;
		
		Если СписокИзмененныхПоказателей.Количество()>0 Тогда
			ТекстОтбор=ТекстОтбор+"			
			|И мПоказателиРаскрытияКонтекст.Показатель В(&СписокИзмененныхПоказателей)";
			
			ЗапросДанныеРаскрытия.УстановитьПараметр("СписокИзмененныхПоказателей",СписокИзмененныхПоказателей);
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстОтбор) Тогда
			
			ТекстОбъединениеРаскрытие=ТекстОбъединениеРаскрытие+"			
			|"+ТекстОтбор;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВыведенныеОрганизации.Свернуть("Организация","Отбирать");
	ВыведенныеПериоды.Свернуть("ПериодОтчета","Отбирать");
	ВыведенныеСценарии.Свернуть("Сценарий","Отбирать");
	ВыведенныеАналитики.Свернуть("Аналитика,ВидАналитики,ЗначениеАналитики","Отбирать");
	
	ВыведенныеОрганизации.Сортировать("Организация");
	ВыведенныеПериоды.Сортировать("ДатаНачала");
	ВыведенныеСценарии.Сортировать("Сценарий");
	ВыведенныеАналитики.Сортировать("Аналитика,ВидАналитики,ЗначениеАналитики");
	
	ТекстВТ=ТекстВТ+"
	|"+Сред(ТекстОбъединениеРаскрытие,16)+"
	|";
	
	ЗапросДанныеРаскрытия.Текст=ТекстВТ;
	
	мПоказателиРаскрытия=ЗапросДанныеРаскрытия.Выполнить().Выгрузить();	
	мПоказателиРаскрытия.Колонки.Добавить("ИндексАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	
	Для Каждого СтрРаскрытия ИЗ мПоказателиРаскрытия Цикл
		
		СтрРаскрытия.ИндексАналитики=ПолучитьИндексАналитик(СтрРаскрытия);
		
	КонецЦикла;
	
	мПоказателиРаскрытия.Индексы.Добавить("ИндексАналитики");
	
	// Уничтожим помещенные в текущем сеансе таблицы
	
	Если МассивТаблицПоказателейРаскрытия.Количество()>0 Тогда
		
		ТекстУничтожить="";
		
		Для Каждого Таблица ИЗ МассивТаблицПоказателейРаскрытия Цикл
			ТекстУничтожить=ТекстУничтожить+"Уничтожить "+Таблица+"
			|;";
		КонецЦикла;
		
		ЗапросДанныеРаскрытия.Текст=ТекстУничтожить;
		ЗапросДанныеРаскрытия.Выполнить();
		
		МассивТаблицПоказателейРаскрытия.Очистить();
		
	КонецЕсли;
		
КонецПроцедуры // СформироватьТаблицуРаскрытия()

Процедура ВывестиГруппировку(Выборка,ТекУровень,ТаблицаИтогов=Неопределено,СписокГруппировокИерархии)
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекУровень=0 Тогда
			РасшифровкаСтрока=Новый Структура;
		КонецЕсли;
		
		ИмяГруппировки=Выборка.Группировка();
		ТекУровеньСтрока=МассивГруппировокСтрокИтог.Найти(ИмяГруппировки)+1;
		ТекЭлемент=Выборка[ИмяГруппировки];
		
		Если СписокГруппировокИерархии.Количество()>0 Тогда
			
			Если СтруктураГруппировокИерархия.Свойство(ИмяГруппировки) ИЛИ СтрНайти(ИмяГруппировки,"_Родитель_")>0 Тогда
				
				ВерхнийУровеньИерархии=ОпределитьВерхнийУровеньИерархии(ИмяГруппировки,СписокГруппировокИерархии);
				
				Если НЕ (ВерхнийУровеньИерархии=Неопределено ИЛИ ПроверитьКорректностьРодителя(ТекЭлемент,ВерхнийУровеньИерархии.Значение)) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекЭлемент) Тогда // Возможны пустые верхние уровни иерархии
			
			РасшифровкаСтрока.Вставить(ИмяГруппировки,Выборка[ИмяГруппировки]);
			РасшифровкаСтрока.Вставить("УровеньСтроки",(ИмяГруппировки="Строка"));
			
			Если ТекУровеньСтрока>=УровеньСтрока И СохранятьФорматирование Тогда
				
				СтрОформления=ТабОформлениеСтрок.Найти(Выборка.Строка,"Строка");
				
				Если НЕ СтрОформления=Неопределено Тогда
					
					ОбластьГруппировкиСтрока=СтрОформления.ШаблонОформления;
					ОбластьГруппировкиСтрокаРаскрытие=СтрОформления.ШаблонОформленияРаскрытие;
					
				Иначе
					
					ОбластьГруппировкиСтрока= ТаблицаШаблонов[ТекУровень].ШаблонОформления;
					ОбластьГруппировкиСтрокаРаскрытие= ТаблицаШаблонов[ТекУровень].ШаблонОформленияРаскрытие;
					
				КонецЕсли;
				
			Иначе	
				
				ОбластьГруппировкиСтрока= ТаблицаШаблонов[ТекУровень].ШаблонОформления;
				ОбластьГруппировкиСтрокаРаскрытие= ТаблицаШаблонов[ТекУровень].ШаблонОформленияРаскрытие;
				
			КонецЕсли;
			
			ОбластьГруппировкиСтрока.Параметры.ГруппировкаСтрока=ТекЭлемент;
			
			ТабДок.Вывести(ОбластьОтступ);	 
			ВысотаТаблицы=ТабДок.ВысотаТаблицы;
			
			ДобавитьРасшифровкуСтроки(ВысотаТаблицы,РасшифровкаСтрока);
			
			ТабДок.Присоединить(ОбластьГруппировкиСтрока);
			
			Для Индекс=1 По КолонокАналитикиРаскрытия-1 Цикл	 
				ТабДок.Присоединить(ОбластьГруппировкиСтрока);
			КонецЦикла;
			
			ТабДок.Область(ВысотаТаблицы,2,ТабДок.ВысотаТаблицы,КолонокАналитикиРаскрытия+1).Объединить();
			
			НачалоКолонок=ПерваяКолонка;
			РазвернутьСтроку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[0],"Все"),0,ТекУровеньСтрока,ТаблицаИтогов,НачалоКолонок);
						
			ТекУровеньВывода=ТабДок.ВысотаТаблицы;
			
		КонецЕсли;
		
		Если ТекУровень+1<=МассивГруппировокСтрокИтог.Количество()-2 Тогда
			
			Если ЕстьВыводИерархии Тогда
				
				Если СтрНайти(ИмяГруппировки,"_Родитель_")>0 Тогда
					
					Если СписокГруппировокИерархии=Неопределено Тогда
						
						СписокГруппировокИерархии=Новый СписокЗначений;
						
					КонецЕсли;
					
					СписокГруппировокИерархии.Вставить(0,Выборка[ИмяГруппировки],ИмяГруппировки);
					
				КонецЕсли;
				
			Иначе
				
				СписокГруппировокИерархии=Новый СписокЗначений;
				
			КонецЕсли;
				
			ВывестиГруппировку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокСтрокИтог[ТекУровень+1],""),ТекУровень+1,ТаблицаИтогов,СписокГруппировокИерархии);
			
		ИначеЕсли ТекУровень+1=МассивГруппировокСтрокИтог.Количество()-1 Тогда
			
			ШиринаТаблицы=ТабДок.ШиринаТаблицы;
				
			ВывестиРаскрытие(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,,"Все"),Выборка[ИмяГруппировки],ТекУровеньСтрока,ТаблицаИтогов);
			
		КонецЕсли;
		
	КонецЦикла; 
	
	РасшифровкаСтрока.Удалить(ИмяГруппировки);
	
	Если (СтруктураГруппировокИерархия.Свойство(ИмяГруппировки) ИЛИ СтрНайти(ИмяГруппировки,"_Родитель_")>0) И СписокГруппировокИерархии.Количество()>0 Тогда
		
		ВерхнийУровеньИерархии=ОпределитьВерхнийУровеньИерархии(ИмяГруппировки,СписокГруппировокИерархии);
		
		Если Не ВерхнийУровеньИерархии=Неопределено Тогда
			
			СписокГруппировокИерархии.Удалить(ВерхнийУровеньИерархии);
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры // ВывестиГруппировку()

Процедура ВывестиРаскрытие(Выборка,ВладелецГруппы,ТекУровеньСтрока,ТаблицаИтогов=Неопределено);
	
	Если Выборка.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	// Определим признак видимости группы
	СтруктураПоиска=Новый Структура;
	
	Для Каждого Группировка ИЗ ГруппировкиСтроки Цикл
		
		Если Не РасшифровкаСтрока.Свойство(Группировка.Группировка) Тогда // Раскрытие имеет смысл только на последнем уровне группировок строк
			Возврат;
		КонецЕсли;
		
		СтруктураПоиска.Вставить(Группировка.Группировка,РасшифровкаСтрока[Группировка.Группировка]);
		
	КонецЦикла;
	
	МассивГруппа=ТабРаскрытиеГруппСтроки.НайтиСтроки(СтруктураПоиска);
	
	Если МассивГруппа.Количество()=0 Тогда
		
		СтрГруппа=ТабРаскрытиеГруппСтроки.Добавить();
		Для Каждого Группировка ИЗ ГруппировкиСтроки Цикл
			СтрГруппа[Группировка.Группировка]=СтруктураПоиска[Группировка.Группировка];
		КонецЦикла;
		
		СтрГруппа.УровеньГруппировки=ГруппировкиСтроки.Количество()+1;
		СтрГруппа.Раскрыта=ЛОЖЬ;
		СтрГруппа.ДобавленаВручную=ЛОЖЬ;
			
	Иначе
		
		СтрГруппа=МассивГруппа[0]; 
		
	КонецЕсли;
	
	СтрГруппа.НачалоГруппы=ТабДок.ВысотаТаблицы+1; 
	ТабДок.НачатьГруппуСтрок(,СтрГруппа.Раскрыта);
	
	Пока Выборка.Следующий() Цикл
		
		ИндексАналитики=Выборка.ИндексАналитики;
		
		Если ИндексАналитики="" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекУровеньСтрока=МассивГруппировокСтрокИтог.Найти("ИндексАналитики")+1;
		
		СтрАналитика=мПоказателиРаскрытия.Найти(ИндексАналитики,"ИндексАналитики");
		
		Если СтрАналитика=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТабДок.Вывести(ОбластьОтступ);
		
		СтруктураАналитика=Новый Структура;
		СтруктураАналитика.Вставить("ИндексАналитики",ИндексАналитики);
		
		Для Индекс=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			ОбластьГруппировкиСтрокаРаскрытие.Параметры.ГруппировкаСтрока=СтрАналитика["Аналитика"+Индекс];	 
			
			СтруктураАналитика.Вставить("Аналитика"+Индекс,СтрАналитика["Аналитика"+Индекс]);
			ТабДок.Присоединить(ОбластьГруппировкиСтрокаРаскрытие);	
			
		КонецЦикла;
		
		ДобавитьРасшифровкуСтрокиРаскрытия(ТабДок.ВысотаТаблицы,РасшифровкаСтрока,СтруктураАналитика); 
		НачалоКолонок=ПерваяКолонка;
		РазвернутьСтрокуАналитики(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[0],"Все"),0,ТаблицаИтогов,НачалоКолонок);
		
	КонецЦикла;
	
	СтрГруппа.КонецГруппы=ТабДок.ВысотаТаблицы;
	
	Если СтрГруппа.НачалоГруппы-1>=СтрГруппа.КонецГруппы Тогда // Не было раскрытия 
		ТабРаскрытиеГруппСтроки.Удалить(СтрГруппа);
	КонецЕсли;
	
	ТабДок.ЗакончитьГруппуСтрок();
	
КонецПроцедуры // ВывестиРаскрытие() 

Процедура РазвернутьСтрокуАналитики(Выборка,ТекУровеньКолонка,ТаблицаИтогов=Неопределено,ТекНомерКолонки)
	
	ПервыйЭлементГруппировки=Истина;
	
	Пока Выборка.Следующий() Цикл
		
		ИмяГруппировки=Выборка.Группировка();
		
		ТекУровень=МассивГруппировокКолонокИтог.Найти(ИмяГруппировки)+1;
		УровеньКолонка=УровеньКолонка;
		УровеньСтрока=УровеньСтрока;
		
		ТекКолонкаШапки=ТабКоординатыКолонок.Найти(ТекНомерКолонки,"НомерКолонки");
		ТекЭлемент=Выборка[ИмяГруппировки];
		
		Если ТаблицаИтогов=Неопределено Тогда
			
			Если ТекКолонкаШапки=Неопределено Тогда
				Продолжить;
			ИначеЕсли ИмяГруппировки="Колонка" И УровеньКолонка>2 И (МассивГруппировокКолонокИтог.Количество()-УровеньКолонка)<2 Тогда
				Если НЕ ПроверитьГруппировкиКолонок(Выборка,ТекКолонкаШапки) Тогда 
					Продолжить;
				КонецЕсли;
			ИначеЕсли НЕ ТекЭлемент=ТекКолонкаШапки[ИмяГруппировки] Тогда
				Продолжить;
			ИначеЕсли ЕстьВыводИерархии Тогда
				ДобавитьВКэшРодителей(ТекЭлемент);
			КонецЕсли;
			
		КонецЕсли;
			
		Если ТекУровень>=УровеньКолонка И (СтрНайти(ИмяГруппировки,"_Родитель_")=0 ИЛИ ЗначениеЗаполнено(Выборка[ИмяГруппировки])) Тогда
			
			Если НЕ ТаблицаИтогов=Неопределено Тогда // Только добавляем строку в таблицу итогов
				
				НоваяСтрока=ТаблицаИтогов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
				ТекНомерКолонки=ТекНомерКолонки+1;
				
			Иначе 
				
				ОбластьГруппировкиПоказательРаскрытие.Параметры.ГруппировкаПоказатель=?(Выборка.ЗначениеРаскрытияЧисло=NULL,0,Выборка.ЗначениеРаскрытияЧисло)/ТекущийДелитель;	 
				ТабДок.Присоединить(ОбластьГруппировкиПоказательРаскрытие);
				ТекНомерКолонки=ТекНомерКолонки+1;
				
				ПрисоединитьВычисляемыеПоля(ИмяГруппировки,ПервыйЭлементГруппировки,ТекНомерКолонки);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекУровеньКолонка+1<=МассивГруппировокКолонокИтог.Количество()-1 Тогда
			РазвернутьСтрокуАналитики(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[ТекУровеньКолонка+1],"Все"),ТекУровеньКолонка+1,ТаблицаИтогов,ТекНомерКолонки);
		КонецЕсли;
		
		ПервыйЭлементГруппировки=Ложь;
		
	КонецЦикла;
		
КонецПроцедуры // РазвернутьСтрокуАналитики()

Процедура ПрисоединитьВычисляемыеПоля(ИмяГруппировки,ПервыйЭлементГруппировки,ТекНомерКолонки,Область=Неопределено)
	
	Если ЕстьВычисляемыеКолонки И ИмяГруппировки=ГруппировкаБазис Тогда
		
		Для Каждого Колонка ИЗ ГруппировкиВычисляемыеКолонки Цикл
			
			Если Не Колонка.Отображать Тогда
				Продолжить;
			КонецЕсли;
			
			Если (Колонка.Группировка="ОтклонениеАбс" ИЛИ Колонка.Группировка="ОтклонениеОтн") И ПервыйЭлементГруппировки Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если Область=Неопределено Тогда
				
				Если Колонка.Группировка="ОтклонениеАбс" Тогда
					
					Если НЕ ВыводитьВДерево Тогда
						ТабДок.Присоединить(ОбластьВычисляемойКолонкиАбс);
					КонецЕсли;
					
					ТекНомерКолонки=ТекНомерКолонки+1;
					
				Иначе
					
					Если Не ВыводитьВДерево Тогда
						ТабДок.Присоединить(ОбластьВычисляемойКолонкиОтн);
					КонецЕсли;
				
					ТекНомерКолонки=ТекНомерКолонки+1;
					
				КонецЕсли;
				
			Иначе
				
				Если Не ВыводитьВДерево Тогда
					ТабДок.Присоединить(Область);
				КонецЕсли;
				
				ТекНомерКолонки=ТекНомерКолонки+1;
				
			КонецЕсли;		
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры // ПрисоединитьВычисляемоеПоле() 

Функция ПроверитьКорректностьРодителя(Элемент,Родитель)
	
	ТекЗначениеРодителя=КэшРодителей.Получить(Элемент);
	
	Если ТекЗначениеРодителя=Неопределено Тогда
		
		ТекЗначениеРодителя=Элемент.Родитель;
		КэшРодителей.Вставить(Элемент,ТекЗначениеРодителя);
		
	КонецЕсли;
	
	Если ТекЗначениеРодителя=Родитель Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
		
КонецФункции // ПроверитьКорректностьРодителя 

Процедура ДобавитьВКэшРодителей(Элемент)
	
	ТекЗначениеРодителя=КэшРодителей.Получить(Элемент);
	
	Если ТекЗначениеРодителя=Неопределено Тогда
		
		ТекЗначениеРодителя=Элемент.Родитель;
		КэшРодителей.Вставить(Элемент,ТекЗначениеРодителя);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьВКэшРодителей() 

Функция ОпределитьВерхнийУровеньИерархии(ИмяГруппировки,СписокГруппировокИерархии)
	
	ПозРодитель = СтрНайти(ИмяГруппировки,"_Родитель");
	
	Если ПозРодитель=0 Тогда
		ТекГруппировка=ИмяГруппировки;
	Иначе
		ТекГруппировка=Лев(ИмяГруппировки,ПозРодитель-1);
	КонецЕсли;
	
	Для Каждого Уровень ИЗ СписокГруппировокИерархии Цикл
		
		Если СтрНайти(Уровень.Представление,ТекГруппировка+"_Родитель")>0 Тогда
			
			Возврат Уровень;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
		
КонецФункции // ОпределитьВерхнийУровеньИерархии

Функция ПроверитьГруппировкиКолонок(Выборка,ТекКолонкаШапки)
	
	Для Индекс=0 По УровеньКолонка-1 Цикл
		
		Группировка=МассивГруппировокКолонокИтог[Индекс];
		
		Если НЕ Выборка[Группировка]=ТекКолонкаШапки[Группировка] Тогда
			
			Возврат Ложь;
						
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;	
	
КонецФункции // ПроверитьГруппировкиКолонок

Процедура РазвернутьСтроку(Выборка,ТекУровеньКолонка,ТекУровеньСтрока,ТаблицаИтогов=Неопределено,ТекНомерКолонки)
	
	ПервыйЭлементГруппировки=Истина;
		
	Пока Выборка.Следующий() Цикл
		
		ИмяГруппировки=Выборка.Группировка();
		
		ТекУровень=МассивГруппировокКолонокИтог.Найти(ИмяГруппировки)+1;
		УровеньКолонка=УровеньКолонка;
		УровеньСтрока=УровеньСтрока;
		
		ТекКолонкаШапки=ТабКоординатыКолонок.Найти(ТекНомерКолонки,"НомерКолонки");
		ТекЭлемент=Выборка[ИмяГруппировки];
		
		Если ТаблицаИтогов=Неопределено Тогда
			
			Если ТекКолонкаШапки=Неопределено Тогда
				Продолжить;
			ИначеЕсли ИмяГруппировки="Колонка" И УровеньКолонка>2 И (МассивГруппировокКолонокИтог.Количество()-УровеньКолонка)<2 Тогда
				Если НЕ ПроверитьГруппировкиКолонок(Выборка,ТекКолонкаШапки) Тогда 
					Продолжить;
				КонецЕсли;
			ИначеЕсли НЕ ТекЭлемент=ТекКолонкаШапки[ИмяГруппировки] Тогда
				Продолжить;
			ИначеЕсли ЕстьВыводИерархии Тогда
				ДобавитьВКэшРодителей(ТекЭлемент);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекУровень>=УровеньКолонка Тогда
			
			Если ТекУровеньСтрока>=УровеньСтрока Тогда
				
				Если НЕ ТаблицаИтогов=Неопределено Тогда // Только добавляем строку в таблицу итогов
					
					НоваяСтрока=ТаблицаИтогов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
					ТекНомерКолонки=ТекНомерКолонки+1;
					
				Иначе	
					
					Если СохранятьФорматирование Тогда
						СтруктураПоиска=Новый Структура;
						СтруктураПоиска.Вставить("Строка",Выборка.Строка);
						СтруктураПоиска.Вставить("Колонка",Выборка.Колонка);
						
						МассивПоиска=ТабОформлениеПоказателей.НайтиСтроки(СтруктураПоиска);
						
						Если МассивПоиска.Количество()>0 Тогда
							
							ОбластьГруппировкиПоказатель=МассивПоиска[0].ШаблонОформления;
							ОбластьГруппировкиПоказательРаскрытие=МассивПоиска[0].ШаблонОформленияРаскрытие;
							
						КонецЕсли;
						
					КонецЕсли;
					
					ОбластьГруппировкиПоказатель.Параметры.ГруппировкаПоказатель=?(Выборка.ЗначениеПоказателяЧисло=NULL,0,Выборка.ЗначениеПоказателяЧисло)/ТекущийДелитель;
					
					ТабДок.Присоединить(ОбластьГруппировкиПоказатель);
					ТекНомерКолонки=ТекНомерКолонки+1;
					
					ПрисоединитьВычисляемыеПоля(ИмяГруппировки,ПервыйЭлементГруппировки,ТекНомерКолонки);
		
				КонецЕсли;
						
			ИначеЕсли ТаблицаИтогов=Неопределено Тогда
				
				ТабДок.Присоединить(ОбластьРазделитель);
				ТекНомерКолонки=ТекНомерКолонки+1;
				
				ПрисоединитьВычисляемыеПоля(ИмяГруппировки,ПервыйЭлементГруппировки,ТекНомерКолонки,ОбластьРазделитель);
				
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекУровень+1<=МассивГруппировокКолонокИтог.Количество() Тогда
						
			РазвернутьСтроку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,МассивГруппировокКолонокИтог[ТекУровень],"Все"),ТекУровень+1,ТекУровеньСтрока,ТаблицаИтогов,ТекНомерКолонки);
			
		КонецЕсли;
		
		ПервыйЭлементГруппировки=Ложь;
		
	КонецЦикла;
					
КонецПроцедуры // РазвернутьСтроку()

#КонецОбласти


#Область ФункцииЭкземпляров

Процедура ПолучитьДокументОбъект(СтрОтчет, КэшируемыйКонтекстВидаОтчета = Неопределено) Экспорт 
	
	Если (НЕ СтрОтчет.ОтчетОбъект=Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрОтчет.ЭкземплярОтчета) Тогда
		
		СтрОтчет.ОтчетОбъект=СтрОтчет.ЭкземплярОтчета.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(СтрОтчет.ДанныеОбъекта) Тогда
			
			ЗаполнитьЗначенияСвойств(СтрОтчет.ОтчетОбъект,СтрОтчет.ДанныеОбъекта,,"Ссылка");	
			СтрОтчет.ОтчетОбъект.ИнициализироватьСоответствияДляПоиска();
			
		Иначе
			
			Если НЕ СтрОтчет.ОтчетИнициализирован Тогда
				
				СтрОтчет.ОтчетОбъект.ИнициализироватьКонтекст();
				СтрОтчет.ОтчетОбъект.ЗагрузитьКомментарииВСоответствие();
				
			КонецЕсли;
			
			СтрОтчет.ДанныеОбъекта=СтрОтчет.ОтчетОбъект.ПодготовитьСтруктуруПеременныхДляРасчета();
			
		КонецЕсли;
			
	ИначеЕсли ЗначениеЗаполнено(СтрОтчет.ДанныеОбъекта) Тогда
		
		СтрОтчет.ОтчетОбъект=ОбщегоНазначенияУХ.ПолучитьРабочийОбъект(СтрОтчет.ДанныеОбъекта);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьДокументОбъект() 

Функция СоздатьЭкземплярОтчета(СтрОтчет) Экспорт 
	
	СтруктураАналитик=Новый Структура;
	
	Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
		
		СтруктураАналитик.Вставить(СтрАналитика.КодАналитики,СтрОтчет[СтрАналитика.КодАналитики]);
		
	КонецЦикла;
		
	ЭкземплярОтчета=Документы.НастраиваемыйОтчет.ПолучитьЭкземплярОтчета(СтрОтчет.Организация,
																		СтрОтчет.ПериодОтчета,
																		СтрОтчет.Сценарий,
																		ВидОтчета,
																		ОсновнаяВалюта,
																		Истина,
																		Истина,
																		,
																		?(РазделениеПоПроектам,СтрОтчет.Проект,Неопределено),
																		Истина,
																		?(СтруктураАналитик.Количество()>0,СтруктураАналитик,Неопределено));
																		
	
	Если ЭкземплярОтчета=Неопределено Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Возврат Новый Структура("Ссылка,Объект",ЭкземплярОтчета,ЭкземплярОтчета.ПолучитьОбъект());
			
	КонецЕсли;
	
КонецФункции // СоздатьЭкземплярОтчета()

Процедура ПересчитатьРабочиеТаблицыВВалютуОтображения(ТаблицаОтчетов=Неопределено,ПризнакОшибки=Ложь) Экспорт
	
	Если ТаблицаОтчетов=Неопределено Тогда
		ТаблицаОтчетов=ТабОтчеты;
	КонецЕсли;
	
	Для Каждого СтрОтчет ИЗ ТаблицаОтчетов Цикл
		
		Если НЕ (СтрОтчет.ЕстьЭкземплярОтчета И СтрОтчет.ОтчетИнициализирован) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ПолучитьДокументОбъект(СтрОтчет);
		
		ОтчетОбъект=СтрОтчет.ОтчетОбъект;
		
		Если ОтчетОбъект.ОсновнаяВалюта=ВалютаОтображения Тогда
			СтрОтчет.ВыводитьВВалютеОтображения=Ложь;
		Иначе
			
			СтрОтчет.ВыводитьВВалютеОтображения=Истина;
			
			ТаблицаПоказателейВалюты = ОтчетОбъект.ПолучитьЗначенияПоказателейВВалюте(ОтчетОбъект.мПоказатели, ВалютаОтображения, ПризнакОшибки);
			ТаблицаПоказателейРаскрытияВалюты = ОтчетОбъект.ПолучитьЗначенияПоказателейРаскрытияВВалюте(ОтчетОбъект.мПоказатели,ОтчетОбъект.мПоказателиРаскрытия,ВалютаОтображения, ПризнакОшибки);
			
			Если ПризнакОшибки Тогда
				
				Возврат;					
				
			КонецЕсли;
			
			СтрОтчет.мПоказателиВВалюте=ТаблицаПоказателейВалюты;
			СтрОтчет.мПоказателиРаскрытияВВалюте=ТаблицаПоказателейРаскрытияВалюты;
			
			ОтчетОбъект.мТекущаяВалюта=ВалютаОтображения;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПересчитатьРабочиеТаблицыВВалюту()

Функция ПроверитьИнициализациюОтчета(СтрОтчет) Экспорт
	
	Возврат СтрОтчет.ОтчетИнициализирован 
		ИЛИ ИнициализироватьКонтекстОтчета(СтрОтчет);
	
КонецФункции // ПроверитьИнициализациюОтчета()
	
Функция ИнициализироватьКонтекстОтчета(СтрОтчет) Экспорт
	
	Попытка
		
		ОтчетОбъект=СтрОтчет.ЭкземплярОтчета.ПолучитьОбъект();
		ОтчетОбъект.ВсегдаЗаполнятьАналитики=Истина;
		ОтчетОбъект.ИнициализироватьКонтекст();
		ОтчетОбъект.ЗагрузитьКомментарииВСоответствие();
		
		СтрОтчет.ОтчетОбъект=ОтчетОбъект;
		
		СтрОтчет.ЕстьЭкземплярОтчета=Истина;
		СтрОтчет.ОтчетИнициализирован=Истина;
		
		СтрОтчет.Отчетобъект.Заблокировать();
		
		МассивОтчетов=Новый Массив;
		МассивОтчетов.Добавить(СтрОтчет);
		ПересчитатьРабочиеТаблицыВВалютуОтображения(МассивОтчетов);	
		
		СтрОтчет.ДанныеОбъекта=ОтчетОбъект.ПодготовитьСтруктуруПеременныхДляРасчета();
		
		Возврат Истина;
		
	Исключение
		//Сообщить(ОбщегоНазначенияУХ.ПредставлениеДокументаПриПроведении(СтрОтчет.ЭкземплярОтчета)+":
		//|не удалось заблокировать экземпляр отчета для редактирования.",СтатусСообщения.Важное);
		//
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции // ИнициализироватьКонтекстОтчета()

Процедура РаспаковатьТаблицуЗначений(ИмяТаблицы,ДанныеТаблицы) Экспорт
	
	РабочаяТаблица=ЭтотОбъект[ИмяТаблицы];
	РабочаяТаблица.Очистить();
	
	Для Каждого СтруктураСтрока ИЗ ДанныеТаблицы Цикл
		
		НоваяСтрока=РабочаяТаблица.Добавить();
		
		Для Каждого ЗначениеКолонки ИЗ СтруктураСтрока Цикл
			
			НоваяСтрока[ЗначениеКолонки.Ключ]=ЗначениеКолонки.Значение;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // РаспаковатьТаблицуЗначений()

#КонецОбласти


#Область СохранениеДанныхДляРасчетовМеждуВызовами

Процедура ВосстановитьПеременныеДляРасчета(ПеременныеДляРасчета=Неопределено) Экспорт
	
	Если ПеременныеДляРасчета=Неопределено Тогда
		ПеременныеДляРасчета=ПолучитьИзВременногоХранилища(АдресХранилищаПеременныхДляРасчета);
	КонецЕсли;
	
	Если ТипЗнч(ПеременныеДляРасчета)=Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,ПеременныеДляРасчета);
				
	КонецЕсли;
	
	ИнициализироватьЗапросыОбъекта();
			
КонецПроцедуры // ВосстановитьПеременныеДляРасчета()

Функция ПодготовитьСтруктуруПеременныхДляРасчета() Экспорт
		
	СтруктураПеременных=Новый Структура;
	СтруктураПеременных.Вставить("Ссылка");
	СтруктураПеременных.Вставить("РеквизитыОбъекта",ОбщегоНазначенияУХ.ПолучитьСтруктуруРеквизитовОбъекта(ЭтотОбъект));
	СтруктураПеременных.Вставить("ПроцедураСозданияОбъекта","Обработки.ГрупповоеРедактированиеЭкземпляровОтчета.Создать()");
	СтруктураПеременных.Вставить("мПоказатели",мПоказатели);
	СтруктураПеременных.Вставить("мПоказателиРаскрытия",мПоказателиРаскрытия);
	СтруктураПеременных.Вставить("мДанныеДляРаскрытия",мДанныеДляРаскрытия);
	СтруктураПеременных.Вставить("мИзмененныеПоказателиРаскрытия",мИзмененныеПоказателиРаскрытия);
	СтруктураПеременных.Вставить("мТабПоказателиСвод",мТабПоказателиСвод);
	СтруктураПеременных.Вставить("мТаблицаАналитикВидаОтчета",мТаблицаАналитикВидаОтчета);
	СтруктураПеременных.Вставить("МаксАналитикПоказателя",МаксАналитикПоказателя);
	СтруктураПеременных.Вставить("МаксАналитикОтчета",МаксАналитикОтчета);
	СтруктураПеременных.Вставить("ТаблицаСтроки",ТаблицаСтроки);
	СтруктураПеременных.Вставить("ДеревоСтрок",ДеревоСтрок);
	СтруктураПеременных.Вставить("СписокКолонокБазис",СписокКолонокБазис);
	СтруктураПеременных.Вставить("ПоказателиСРаскрытием",ПоказателиСРаскрытием);
	СтруктураПеременных.Вставить("СписокИспользуемыхВалют",СписокИспользуемыхВалют);
	СтруктураПеременных.Вставить("ВалютаОтображения",ВалютаОтображения);
	СтруктураПеременных.Вставить("ТабОформлениеСтрок",ТабОформлениеСтрок);
	СтруктураПеременных.Вставить("ТабОформлениеПоказателей",ТабОформлениеПоказателей);
	СтруктураПеременных.Вставить("ТабОтчеты",ТабОтчеты);
	СтруктураПеременных.Вставить("ТабОтчетыСводная",ТабОтчетыСводная);
	СтруктураПеременных.Вставить("ТаблицаРаскрытийСтрок",ТаблицаРаскрытийСтрок);
	СтруктураПеременных.Вставить("ШаблонРаскрытиеСтроки",ШаблонРаскрытиеСтроки);
	СтруктураПеременных.Вставить("ТабРаскрытиеГруппСтроки",ТабРаскрытиеГруппСтроки);
	СтруктураПеременных.Вставить("ТабРаскрытиеГруппСтрокиДерево",ТабРаскрытиеГруппСтрокиДерево);
	СтруктураПеременных.Вставить("ТабРаскрытиеГруппКолонки",ТабРаскрытиеГруппКолонки);
	СтруктураПеременных.Вставить("МассивГруппировокСтрокИтог",МассивГруппировокСтрокИтог);
	СтруктураПеременных.Вставить("МассивГруппировокКолонокИтог",МассивГруппировокКолонокИтог);
	СтруктураПеременных.Вставить("СтрРасшифровкаКолонок",СтрРасшифровкаКолонок);
	СтруктураПеременных.Вставить("ТабДок",ТабДок);
	СтруктураПеременных.Вставить("СписокОрганизацииОтбор",СписокОрганизацииОтбор);
	СтруктураПеременных.Вставить("СписокПериодыОтбор",СписокПериодыОтбор);
	СтруктураПеременных.Вставить("СписокСценарииОтбор",СписокСценарииОтбор);
	СтруктураПеременных.Вставить("ТабАналитикиОтбор",ТабАналитикиОтбор);
	СтруктураПеременных.Вставить("СписокПоказателиНеВБланке",СписокПоказателиНеВБланке);
	СтруктураПеременных.Вставить("СписокСтрокиНеВБланке",СписокСтрокиНеВБланке);
	СтруктураПеременных.Вставить("СписокКолонкиНеВБланке",СписокКолонкиНеВБланке);
	СтруктураПеременных.Вставить("СписокРедактируемыхПоказателей",СписокРедактируемыхПоказателей);
	СтруктураПеременных.Вставить("СписокИзмененныхПоказателей",СписокИзмененныхПоказателей);
	СтруктураПеременных.Вставить("ТабИзмененныхОбластей",ТабИзмененныхОбластей);
	СтруктураПеременных.Вставить("ПерваяСтрока",ПерваяСтрока);
	СтруктураПеременных.Вставить("ПерваяКолонка",ПерваяКолонка);
	СтруктураПеременных.Вставить("ПоследняяКолонка",ПоследняяКолонка);
	СтруктураПеременных.Вставить("мПоказателиЭталон",мПоказателиЭталон);
	СтруктураПеременных.Вставить("ОбластьОтступ",ОбластьОтступ);
	СтруктураПеременных.Вставить("ОбластьГруппировкиСтрока",ОбластьГруппировкиСтрока);
	СтруктураПеременных.Вставить("ОбластьГруппировкиПоказатель",ОбластьГруппировкиПоказатель);
	СтруктураПеременных.Вставить("ОбластьВычисляемойКолонкиАбс",ОбластьВычисляемойКолонкиАбс);
	СтруктураПеременных.Вставить("ОбластьВычисляемойКолонкиОтн",ОбластьВычисляемойКолонкиОтн);
	СтруктураПеременных.Вставить("ОбластьГруппировкиСтрокаРаскрытие",ОбластьГруппировкиСтрокаРаскрытие);
	СтруктураПеременных.Вставить("ОбластьГруппировкиПоказательРаскрытие",ОбластьГруппировкиПоказательРаскрытие);
	СтруктураПеременных.Вставить("ОбластьГруппировкаКолонка",ОбластьГруппировкаКолонка);
	СтруктураПеременных.Вставить("ОбластьРазделитель",ОбластьРазделитель);
	СтруктураПеременных.Вставить("ТаблицаШаблонов",ТаблицаШаблонов);
	СтруктураПеременных.Вставить("ТабМакетКолонки",ТабМакетКолонки);
	СтруктураПеременных.Вставить("УровеньШапки",УровеньШапки);
	СтруктураПеременных.Вставить("КолонокАналитикиРаскрытия",КолонокАналитикиРаскрытия);
	СтруктураПеременных.Вставить("НачалоКолонок",НачалоКолонок);
	СтруктураПеременных.Вставить("УровеньСтрока",УровеньСтрока);
	СтруктураПеременных.Вставить("УровеньКолонка",УровеньКолонка);
	СтруктураПеременных.Вставить("ТекУровеньВывода",ТекУровеньВывода);
	СтруктураПеременных.Вставить("ШиринаТаблицы",ШиринаТаблицы);
	СтруктураПеременных.Вставить("Расшифровка",Расшифровка);
	СтруктураПеременных.Вставить("РасшифровкаСтрока",РасшифровкаСтрока);
	СтруктураПеременных.Вставить("ШаблонРасшифровки",ШаблонРасшифровки);
	СтруктураПеременных.Вставить("ШаблонКоординаты",ШаблонКоординаты);
	СтруктураПеременных.Вставить("ТабКоординатыСтрок",ТабКоординатыСтрок);
	СтруктураПеременных.Вставить("ТабКоординатыКолонок",ТабКоординатыКолонок);
	СтруктураПеременных.Вставить("ТабКоординатыВычисляемыхКолонок",ТабКоординатыВычисляемыхКолонок);
	СтруктураПеременных.Вставить("ТабКоординатыОбщ",ТабКоординатыОбщ);
	СтруктураПеременных.Вставить("ШаблонТаблицыКоординат",ШаблонТаблицыКоординат);
	СтруктураПеременных.Вставить("ЦветИзмененнойОбласти",ЦветИзмененнойОбласти);
	СтруктураПеременных.Вставить("ЦветВычисляемойОбласти",ЦветВычисляемойОбласти);
	СтруктураПеременных.Вставить("МассивШиринаКолонок",МассивШиринаКолонок);
	СтруктураПеременных.Вставить("ОтборПоПериметру",ОтборПоПериметру);
	СтруктураПеременных.Вставить("ГруппировкаБазис",ГруппировкаБазис);
	СтруктураПеременных.Вставить("СправочникиГруппировок",СправочникиГруппировок);
	СтруктураПеременных.Вставить("ЕстьАнализОтклонений",ЕстьАнализОтклонений);
	СтруктураПеременных.Вставить("ЕстьВычисляемыеКолонки",ЕстьВычисляемыеКолонки);
	СтруктураПеременных.Вставить("СтруктураГруппировокИерархия",СтруктураГруппировокИерархия);
	СтруктураПеременных.Вставить("ЕстьВыводИерархии",ЕстьВыводИерархии);
	СтруктураПеременных.Вставить("КэшРодителей",КэшРодителей);
	СтруктураПеременных.Вставить("КэшУровней",КэшУровней);
	СтруктураПеременных.Вставить("ОбластьРучногоИзменения",ОбластьРучногоИзменения);
	СтруктураПеременных.Вставить("СохраненнаяНастройка",СохраненнаяНастройка);
	СтруктураПеременных.Вставить("ТекущийДелитель",ТекущийДелитель);
	СтруктураПеременных.Вставить("ТекущаяТочность",ТекущаяТочность);
	СтруктураПеременных.Вставить("ТабГраницыОформленияПозитивОтн",ТабГраницыОформленияПозитивОтн);
	СтруктураПеременных.Вставить("ТабГраницыОформленияПозитивАбс",ТабГраницыОформленияПозитивАбс);
	СтруктураПеременных.Вставить("ТабГраницыОформленияНегативОтн",ТабГраницыОформленияНегативОтн);
	СтруктураПеременных.Вставить("ТабГраницыОформленияНегативАбс",ТабГраницыОформленияНегативАбс);
	СтруктураПеременных.Вставить("ОценкиОтклоненийПоказателей",ОценкиОтклоненийПоказателей);
	СтруктураПеременных.Вставить("ТаблицыЗапросаДанные",ТаблицыЗапросаДанные);
	СтруктураПеременных.Вставить("ТаблицыЗапросаРаскрытие",ТаблицыЗапросаРаскрытие);
	СтруктураПеременных.Вставить("МассивТаблицПоказателей",МассивТаблицПоказателей);
	СтруктураПеременных.Вставить("МассивТаблицПоказателейРаскрытия",МассивТаблицПоказателейРаскрытия);
	СтруктураПеременных.Вставить("СтрокиРазгруппированы",СтрокиРазгруппированы);
	СтруктураПеременных.Вставить("ТабПризнакиСтрок",ТабПризнакиСтрок);
	СтруктураПеременных.Вставить("ДанныеРаскрытияИнициализированы",ДанныеРаскрытияИнициализированы);
	СтруктураПеременных.Вставить("ТабРазвернутыхУзлов",ТабРазвернутыхУзлов);
	СтруктураПеременных.Вставить("МассивИзмененныхОбластей",МассивИзмененныхОбластей);
	СтруктураПеременных.Вставить("МассивДобавленныхСтрокКПередаче",МассивДобавленныхСтрокКПередаче);
	СтруктураПеременных.Вставить("МассивУдаленныхСтрокКПередаче",МассивУдаленныхСтрокКПередаче);
	СтруктураПеременных.Вставить("ТаблицаКоординатПомещенаВЗапрос",ТаблицаКоординатПомещенаВЗапрос);
	СтруктураПеременных.Вставить("ТабДерево",ТабДерево);
	СтруктураПеременных.Вставить("УправляемыйРежим",УправляемыйРежим);
	СтруктураПеременных.Вставить("ОсновныеВалюты",ОсновныеВалюты);
	СтруктураПеременных.Вставить("ПоследниеВерсии",ПоследниеВерсии);
	СтруктураПеременных.Вставить("РазделениеПоПроектам",РазделениеПоПроектам);
	СтруктураПеременных.Вставить("МассивКлючевыхРеквизитов",МассивКлючевыхРеквизитов);

	
	СтруктураТаблицОбъекта=Новый Структура;
	СтруктураТаблицОбъекта.Вставить("ГруппировкиСтроки",ГруппировкиСтроки.Выгрузить());
	СтруктураТаблицОбъекта.Вставить("ГруппировкиКолонки",ГруппировкиКолонки.Выгрузить());
	СтруктураТаблицОбъекта.Вставить("ВыведенныеОрганизации",ВыведенныеОрганизации.Выгрузить());
	СтруктураТаблицОбъекта.Вставить("ВыведенныеПериоды",ВыведенныеПериоды.Выгрузить());
	СтруктураТаблицОбъекта.Вставить("ВыведенныеСценарии",ВыведенныеСценарии.Выгрузить());
	СтруктураТаблицОбъекта.Вставить("ВыведенныеАналитики",ВыведенныеАналитики.Выгрузить());
	СтруктураТаблицОбъекта.Вставить("ВыведенныеЭкземплярыОтчетов",ВыведенныеЭкземплярыОтчетов.Выгрузить());
	СтруктураТаблицОбъекта.Вставить("ГруппировкиВычисляемыеКолонки",ГруппировкиВычисляемыеКолонки.Выгрузить());
	
	СтруктураПеременных.Вставить("ТабличныеЧастиОбъекта",СтруктураТаблицОбъекта);
	
	Возврат СтруктураПеременных;
	
КонецФункции // ПодготовитьСтруктуруПеременныхДляРасчета()

Процедура СброситьЗапросыОбъекта() Экспорт
	
	Если НЕ ТипЗнч(ЗапросДанные)=Тип("Запрос") Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ЗапросДанные.МенеджерВременныхТаблиц.Закрыть();
		ЗапросДанныеРаскрытия.МенеджерВременныхТаблиц.Закрыть();
		ЗапросКоординаты.МенеджерВременныхТаблиц.Закрыть();
		
		ТаблицаКоординатПомещенаВЗапрос=Ложь;
		
	Исключение
		
	КонецПопытки;
	
КонецПроцедуры // СброситьЗапросыОбъекта()

#КонецОбласти


#Область УстановкаПеременных

СписокОрганизацииОтбор=Новый СписокЗначений;
СписокПериодыОтбор=Новый СписокЗначений;
СписокСценарииОтбор=Новый СписокЗначений;
СписокПоказателиНеВБланке=Новый СписокЗначений;
СписокИзмененныхПоказателей=Новый СписокЗначений;
СписокРедактируемыхПоказателей=Новый СписокЗначений;

ТабАналитикиОтбор=Новый ТаблицаЗначений;
ТабАналитикиОтбор.Колонки.Добавить("Аналитика");
ТабАналитикиОтбор.Колонки.Добавить("ЗначениеАналитики");

ТабОтчеты=Новый ТаблицаЗначений;
ТабОтчетыСводная=Новый ТаблицаЗначений;

ШаблонРасшифровки=Новый ТаблицаЗначений;
ШаблонРасшифровки.Колонки.Добавить("Ключ");
ШаблонРасшифровки.Колонки.Добавить("Значение");

ТабОформлениеПоказателей=Новый ТаблицаЗначений;
ТабОформлениеПоказателей.Колонки.Добавить("Строка");
ТабОформлениеПоказателей.Колонки.Добавить("Колонка");
ТабОформлениеПоказателей.Колонки.Добавить("ШаблонОформления");
ТабОформлениеПоказателей.Колонки.Добавить("ШаблонОформленияРаскрытие");

ТабОформлениеПоказателей.Индексы.Добавить("Строка,Колонка");

ТабОформлениеСтрок=Новый ТаблицаЗначений;
ТабОформлениеСтрок.Колонки.Добавить("Строка");
ТабОформлениеСтрок.Колонки.Добавить("ШаблонОформления");
ТабОформлениеСтрок.Колонки.Добавить("ШаблонОформленияРаскрытие");

ТабОформлениеСтрок.Индексы.Добавить("Строка");

ШаблонТаблицыКоординат=Новый ТаблицаЗначений;
ШаблонТаблицыКоординат.Колонки.Добавить("НомерСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
ШаблонТаблицыКоординат.Колонки.Добавить("НомерКолонки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
ШаблонТаблицыКоординат.Колонки.Добавить("Организация",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Организации"));
ШаблонТаблицыКоординат.Колонки.Добавить("Проект",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Проекты"));
ШаблонТаблицыКоординат.Колонки.Добавить("ПериодОтчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Периоды"));
ШаблонТаблицыКоординат.Колонки.Добавить("Сценарий",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Сценарии"));
ШаблонТаблицыКоординат.Колонки.Добавить("Строка",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.СтрокиОтчетов"));
ШаблонТаблицыКоординат.Колонки.Добавить("Колонка",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.КолонкиОтчетов"));
ШаблонТаблицыКоординат.Колонки.Добавить("Раскрытие",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
ШаблонТаблицыКоординат.Колонки.Добавить("ИндексАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
ШаблонТаблицыКоординат.Колонки.Добавить("Показатель",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОтчетов"));
ШаблонТаблицыКоординат.Колонки.Добавить("ЭкземплярОтчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ДокументСсылка.НастраиваемыйОтчет"));

ТипАналитики=Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип;

Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
	ШаблонТаблицыКоординат.Колонки.Добавить("Аналитика"+Индекс,ТипАналитики);
КонецЦикла;

ТабИзмененныхОбластей=Новый ТаблицаЗначений;
ТабИзмененныхОбластей.Колонки.Добавить("ЭкземплярОтчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ДокументСсылка.НастраиваемыйОтчет"));
ТабИзмененныхОбластей.Колонки.Добавить("Показатель",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОтчетов"));
ТабИзмененныхОбластей.Колонки.Добавить("ИндексАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
ТабИзмененныхОбластей.Колонки.Добавить("Раскрытие",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
ТабИзмененныхОбластей.Колонки.Добавить("НомерСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
ТабИзмененныхОбластей.Колонки.Добавить("НомерКолонки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(6,0));
ТабИзмененныхОбластей.Колонки.Добавить("ИсходныйЦвет");

СтруктураИзмененныхОбластей=Новый Структура;
ЦветИзмененнойОбласти= Новый Цвет(255,211,211);

СправочникиГруппировок=Новый Структура;
СправочникиГруппировок.Вставить("Организация","Организации");
СправочникиГруппировок.Вставить("Проект","Проекты");
СправочникиГруппировок.Вставить("ПериодОтчета","Периоды");
СправочникиГруппировок.Вставить("Сценарий","Сценарии");
СправочникиГруппировок.Вставить("Колонка","КолонкиОтчетов");
СправочникиГруппировок.Вставить("Строка","СтрокиОтчетов");

Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
	СправочникиГруппировок.Вставить("Аналитика"+Индекс,"СпрАналитика"+Индекс);
КонецЦикла;

ПерваяКолонка=0;

ОтборПоПериметру=Ложь;
ЕстьВыводИерархии=Ложь;
КэшРодителей=Новый Соответствие;
КэшУровней=Новый Соответствие;

ЦветВычисляемойОбласти=Новый Цвет(220, 240, 255);

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;

ТабГраницыОформленияПозитивОтн=Новый ТаблицаЗначений;
ТабГраницыОформленияПозитивОтн.Колонки.Добавить("Граница");
ТабГраницыОформленияПозитивОтн.Колонки.Добавить("Цвет");

ТабГраницыОформленияПозитивАбс=ТабГраницыОформленияПозитивОтн.СкопироватьКолонки();
ТабГраницыОформленияНегативОтн=ТабГраницыОформленияПозитивОтн.СкопироватьКолонки();
ТабГраницыОформленияНегативАбс=ТабГраницыОформленияПозитивОтн.СкопироватьКолонки();

МассивТаблицПоказателей=Новый Массив;
МассивТаблицПоказателейРаскрытия=Новый Массив;
ДанныеРаскрытияИнициализированы=Ложь;

ТабРазвернутыхУзлов=Новый ТаблицаЗначений;
ТабРазвернутыхУзлов.Колонки.Добавить("НомерСтроки");
ТабРазвернутыхУзлов.Колонки.Добавить("Развернут",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());

ТаблицыЗапросаКоординат=Новый Структура;
ТаблицыЗапросаДанные=Новый Структура;
ТаблицыЗапросаРаскрытие=Новый Структура;

ТаблицаКоординатПомещенаВЗапрос=Ложь;

#КонецОбласти

