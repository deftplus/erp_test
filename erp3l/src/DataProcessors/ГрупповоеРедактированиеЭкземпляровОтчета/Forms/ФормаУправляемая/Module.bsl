
&НаКлиенте
Перем ИндексАктивизации;

&НаКлиенте
Перем ТекЭкземплярОтчета;

&НаКлиенте
Перем ЗакрытьФорму;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Объект.ВидОтчета=Параметры.ВидОтчета;
		
	Объект.ГруппироватьПоИерархииСтрок=Параметры.ГруппироватьПоИерархииСтрок;
	Объект.ГруппироватьСтроки=Параметры.ГруппироватьСтроки;
	
	СохранятьИсториюИзменений=Объект.ВидОтчета.СохранятьИсториюИзменений;
	
	Для Каждого СтрОтчет ИЗ Параметры.ТабЭкземплярыОтчетов Цикл
		
		НоваяСтрока=ТабЭкземплярыОтчетов.Добавить();
		
		ОтчетОбъект=СтрОтчет.Значение.ПолучитьОбъект();
		
		Если НЕ СохранятьИсториюИзменений Тогда
			
			УправлениеОтчетамиУХ.ПолучитьСписокВерсий(ОтчетОбъект.ПодготовитьСтруктуруПеременныхДляРасчета());
			
		КонецЕсли;
			
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрОтчет.Значение);
		
	КонецЦикла;
	
	Для Инд=1 По 5 Цикл
		
		ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(Параметры["Аналитика"+Инд+"Отбор"],ЭтаФорма["Аналитика"+Инд+"Отбор"]);
		
	КонецЦикла;
	
	ОтборПоЭкземплярам=Параметры.ОтборПоЭкземплярам;	
	ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(Параметры.ОрганизацияОтбор,ОрганизацияОтбор);
	ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(Параметры.ПериодОтчетаОтбор,ПериодОтчетаОтбор);
	ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(Параметры.СценарийОтбор,СценарийОтбор);
	ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(Параметры.ПроектОтбор,ПроектОтбор);
	
	ЗаполнитьТаблицыГруппировокСервер();
	
	ВосстанавливатьЗначенияПриОткрытии=Параметры.ВосстанавливатьЗначенияПриОткрытии;
	
	Объект.ВыводитьВДерево=Истина;
	ВыводитьВДеревоЧисло=1;
	Объект.УправляемыйРежим=Истина;
			
	ВидСравненияПериод=		"В";
	ВидСравненияСценарий=	"В";
	ВидСравненияОрганизация="В";
	ВидСравненияПроект=		"В";
	ВидСравненияАналитика1=	"В";
	ВидСравненияАналитика2=	"В";
	ВидСравненияАналитика3=	"В";
	ВидСравненияАналитика4=	"В";
	ВидСравненияАналитика5=	"В";
	
	РабочийОбъект=РеквизитФормыВЗначение("Объект");
	РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(РабочийОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),ЭтаФорма.УникальныйИдентификатор);
	
	Если ЗначениеЗаполнено(Параметры.ТабЭкземплярыОтчетов) Тогда
		
		ПриИзмененииВидаОтчетаСервер();
		СформироватьТаблицуСтрок();	
		ИнициализироватьОтчетыСервер();
					
	Иначе
		
		Если ЗначениеЗаполнено(Объект.ВидОтчета) Тогда 
			
			ПриИзмененииВидаОтчетаСервер();
			СформироватьТаблицуСтрок();
			
		Иначе
			
			Элементы.ГруппаАналитикиВидаОтчета.Видимость=Ложь;
			
		КонецЕсли;
				
		Объект.СохранятьФорматирование=Ложь;
		Объект.ОтображатьНеиспользуемые=Истина;
		Объект.ВыделятьИзмененные=Истина;
		Объект.ОтображатьКомментарии=Истина;
		
		Объект.ГруппироватьПоИерархииСтрок=Истина;
		Объект.ГруппироватьСтроки=Истина;
		Объект.СоздаватьЭкземплярыОтчетов=Истина;
				
	КонецЕсли;
		
	ОбновлятьПриИзмененииГруппировок=Истина;
	ОбновлятьПриИзмененииВалютыОтображения=Ложь;	
	
	Элементы.ЕдиницаИзмерения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1"), НСтр("ru = 'единицах'"));
	Элементы.ЕдиницаИзмерения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000"), НСтр("ru = 'тысячах'"));
	Элементы.ЕдиницаИзмерения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000000"), НСтр("ru = 'миллионах'"));
			
	УстановитьДоступностьРедактированияСервер(Ложь,Ложь);
		
	ЗаполнитьТаблицуВычисляемыхГруппировокСервер();
	УстановитьВидимостьСервер();
	
	Элементы.ДействияФормыРедактирование.Пометка=Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.ОсновнаяВалюта) Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НастраиваемыйОтчет.Ссылка) КАК Ссылка,
		|	НастраиваемыйОтчет.ОсновнаяВалюта
		|ИЗ
		|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет";
		
		Если ЗначениеЗаполнено(Объект.ВидОтчета) Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|ГДЕ
			|	НастраиваемыйОтчет.ВидОтчета = &ВидОтчета";
			Запрос.УстановитьПараметр("ВидОтчета",Объект.ВидОтчета);
			
		КонецЕсли; 
		
		Запрос.Текст=Запрос.Текст+"
		|
		|СГРУППИРОВАТЬ ПО
		|	НастраиваемыйОтчет.ОсновнаяВалюта
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка УБЫВ";
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			Объект.ОсновнаяВалюта=Результат.ОсновнаяВалюта;
			
		КонецЕсли; 	
		
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	РазвернутьСтрокиДерева();
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		
		Если Модифицированность Тогда
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		СнятьБлокировкуОтчетов(РабочийОбъектАдрес);
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменитьПоказатели"  Тогда
		
		Если ТипЗнч(Параметр) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		
		ИзменитьПоказателиСервер(Параметр);
		
		РазвернутьСтрокиДерева();
	
    ИначеЕсли ИмяСобытия = "ОбновитьДанныеПослеАктуализации"  Тогда
				
		ИнициализацияОтчетовФорма();
		РазвернутьСтрокиДерева();
			
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ГруппировкиСтроки",Объект.ГруппировкиСтроки.Выгрузить());
	Настройки.Вставить("ГруппировкиКолонки",Объект.ГруппировкиКолонки.Выгрузить());
	Настройки.Вставить("ГруппировкиВычисляемыеКолонки",Объект.ГруппировкиВычисляемыеКолонки.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	МассивОбработанных=Новый Массив;
	
	Объект.ВидОтчета=Настройки["Объект.ВидОтчета"];
	ПриИзмененииВидаОтчетаСервер();
	МассивОбработанных.Добавить("ВидОтчета");
	
	Объект.БланкОтчета=Настройки["Объект.БланкОтчета"];
	ПриИзмененииБланкаОтчетаСервер();
	МассивОбработанных.Добавить("БланкОтчета");
	
	ОтборПоЭкземплярам=Настройки["ОтборПоЭкземплярам"];
	МассивОбработанных.Добавить("ОтборПоЭкземплярам");
	
	Объект.ГруппировкиСтроки.Очистить();
	Объект.ГруппировкиКолонки.Очистить();
	Объект.ГруппировкиВычисляемыеКолонки.Очистить();
	
	ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(Настройки["ГруппировкиСтроки"],Объект.ГруппировкиСтроки);
	МассивОбработанных.Добавить("ГруппировкиСтроки");
	
	ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(Настройки["ГруппировкиКолонки"],Объект.ГруппировкиКолонки);
	МассивОбработанных.Добавить("ГруппировкиКолонки");
	
	ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(Настройки["ГруппировкиВычисляемыеКолонки"],Объект.ГруппировкиВычисляемыеКолонки);
	МассивОбработанных.Добавить("ГруппировкиВычисляемыеКолонки");
	
	ВидСравненияПериод=Настройки["ВидСравненияПериод"];
	МассивОбработанных.Добавить("ВидСравненияПериод");
	
	ПериодОтчетаОтбор=Настройки["ПериодОтчетаОтбор"];
	МассивОбработанных.Добавить("ПериодОтчетаОтбор");
	
	СценарийОтбор=Настройки["СценарийОтбор"];
	МассивОбработанных.Добавить("СценарийОтбор");
	
	ОпределитьГруппировкуБазисСервер();
	ОбновитьСписокБазисСервер();
	
	УстановитьВидимостьСервер();
	
КонецПроцедуры

#КонецОбласти


&НаСервере
Функция ПолучитьТаблицуОтчетов(ПризнакОшибки,СтруктураДанныхФормы)
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.ОсновнаяВалюта=СтруктураДанныхФормы.ОсновнаяВалюта;
	РабочийОбъект.ДанныеРаскрытияИнициализированы=Ложь;
	РабочийОбъект.МассивТаблицПоказателейРаскрытия.Очистить();
	
	// Получим список экземпляров отчета, соответствующих выбранным критериям
	// и проинициализируем их.
	
	// Подготовим тексты по аналитикам вида отчета
	
	ТекстАналитики1="";
	ТекстАналитики2="";
	ТекстАналитики3="";
	ТекстАналитики4="";
	ТекстАналитики5="";
	ОсновныеВалюты=Новый Соответствие;
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Если СтруктураДанныхФормы.ОтборПоЭкземплярам=1 Тогда			
		
		Запрос.Текст="ВЫБРАТЬ
		|	НастраиваемыйОтчет.Ссылка,
		|	НастраиваемыйОтчет.Организация,
		|	НастраиваемыйОтчет.Проект,
		|	НастраиваемыйОтчет.ПериодОтчета,
		|	НастраиваемыйОтчет.Сценарий,
		|	НастраиваемыйОтчет.ВидОтчета,
		|	НастраиваемыйОтчет.Аналитика1,
		|	НастраиваемыйОтчет.Аналитика2,
		|	НастраиваемыйОтчет.Аналитика3,
		|	НастраиваемыйОтчет.Аналитика4,
		|	НастраиваемыйОтчет.Аналитика5,
		|	НастраиваемыйОтчет.ОсновнаяВалюта,
		|	НастраиваемыйОтчет.ПометкаУдаления
		|ПОМЕСТИТЬ ТабЭкземплярыОтчетов
		|ИЗ
		|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
		|ГДЕ
		|	НастраиваемыйОтчет.Ссылка В(&СписокЭкземпляров)";
		
		Запрос.УстановитьПараметр("СписокЭкземпляров",СтруктураДанныхФормы.СписокЭкземпляров); 
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Если Объект.РазделениеПоПроектам Тогда
		
		Если СтруктураДанныхФормы.ПроектОтбор.Количество()=0 Тогда
			
			ТекстАналитики5=ТекстАналитики5+"
			|И НастраиваемыйОтчет.Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)";
			
			ТекстАналитики1=ТекстАналитики1+"
			|ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка) КАК Проект,";
						
		Иначе
			
			ТекстАналитики1=ТекстАналитики1+"
			|КлючевыеИзмерения.Проект КАК Проект,
			|КлючевыеИзмерения.Проект.Наименование КАК ПроектНаименование,";
			
			ТекстАналитики2=ТекстАналитики2+"
			|Проекты.Ссылка КАК Проект,";
			
			ТекстАналитики3=ТекстАналитики3+"
			|Справочник.Проекты КАК Проекты,";
			
			ТекстАналитики4=ТекстАналитики4+"
			|И Проекты.Ссылка В(&Проекты)";
						
			ТекстАналитики5=ТекстАналитики5+"
			|И КлючевыеИзмерения.Проект = НастраиваемыйОтчет.Проект";
			
			Запрос.УстановитьПараметр("Проекты",СтруктураДанныхФормы.ПроектОтбор);
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Для Каждого СтрАналитика ИЗ РабочийОбъект.мТаблицаАналитикВидаОтчета Цикл
		
		Если СтруктураДанныхФормы[СтрАналитика.КодАналитики+"Отбор"].Количество()=0 Тогда
			ТекстАналитики5=ТекстАналитики5+"
			|И НастраиваемыйОтчет."+СтрАналитика.КодАналитики+" = НЕОПРЕДЕЛЕНО";
			
			ТекстАналитики1=ТекстАналитики1+"
			|НЕОПРЕДЕЛЕНО КАК "+СтрАналитика.КодАналитики+",";
			
			Запрос.УстановитьПараметр("ПустойВидАналитики",Неопределено);
			
			СтрАналитика.ЕстьРазворот=Ложь;
			
		Иначе
			
			ТекстАналитики1=ТекстАналитики1+"
			|КлючевыеИзмерения."+СтрАналитика.КодАналитики+" КАК "+СтрАналитика.КодАналитики+",
			|КлючевыеИзмерения."+СтрАналитика.КодАналитики+".Наименование КАК "+СтрАналитика.КодАналитики+"Наименование,";
			
			ТекстАналитики2=ТекстАналитики2+"
			|"+СтрАналитика.КодАналитики+".Ссылка КАК "+СтрАналитика.КодАналитики+",";
			
			ТекстАналитики3=ТекстАналитики3+"
			|"+СтрАналитика.ТаблицаАналитики+" КАК "+СтрАналитика.КодАналитики+",";
			
			ТекстАналитики4=ТекстАналитики4+"
			|И "+СтрАналитика.КодАналитики+".Ссылка "+СтруктураДанныхФормы["ВидСравнения"+СтрАналитика.КодАналитики]+"(&"+СтрАналитика.КодАналитики+")";
			
			Если СтрАналитика.ИерархияГруппИЭлементов Тогда
				
				ТекстАналитики4=ТекстАналитики4+"
				|И НЕ "+СтрАналитика.КодАналитики+".ЭтоГруппа";
				
			КонецЕсли;
			
			ТекстАналитики5=ТекстАналитики5+"
			|И КлючевыеИзмерения."+СтрАналитика.КодАналитики+" = НастраиваемыйОтчет."+СтрАналитика.КодАналитики;
			
			Запрос.УстановитьПараметр(СтрАналитика.КодАналитики,СтруктураДанныхФормы[СтрАналитика.КодАналитики+"Отбор"]);
			
			СтрАналитика.ЕстьРазворот=Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса="ВЫБРАТЬ
	|	КлючевыеИзмерения.ПериодОтчета,
	|	КлючевыеИзмерения.ДатаНачала КАК ДатаНачалаПериода,
	|	КлючевыеИзмерения.Организация,
	|	КлючевыеИзмерения.Организация.Наименование КАК ОрганизацияНаименование,
	|	КлючевыеИзмерения.Сценарий КАК Сценарий,
	|КлючевыеИзмерения.Сценарий.Наименование КАК СценарийНаименование,"+ТекстАналитики1+"	 
	|	ЕСТЬNULL(НастраиваемыйОтчет.Ссылка, НЕОПРЕДЕЛЕНО) КАК ЭкземплярОтчета,
	|	ЕСТЬNULL(НастраиваемыйОтчет.ОсновнаяВалюта, НЕОПРЕДЕЛЕНО) КАК ОсновнаяВалюта
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Ссылка КАК ПериодОтчета,
	|		Организации.Ссылка КАК Организация,
	|		Сценарии.Ссылка КАК Сценарий,"+ТекстАналитики2+" 
	|		Периоды.ДатаНачала КАК ДатаНачала
	|	ИЗ
	|		Справочник.Периоды КАК Периоды,
	|		Справочник.Организации КАК Организации,"+ТекстАналитики3+"
	|		Справочник.Сценарии КАК Сценарии
	|	ГДЕ
	|		Периоды.Ссылка В(&Периоды)";
	
	ТекстЗапроса=ТекстЗапроса+"	
	|И Организации.Ссылка В(&Организации)";
	
	Запрос.УстановитьПараметр("Организации",СтруктураДанныхФормы.ОрганизацияОтбор);
	
	ТекстЗапроса=ТекстЗапроса+ТекстАналитики4+"
	|		И Сценарии.Ссылка В(&Сценарии)) КАК КлючевыеИзмерения
	|		ЛЕВОЕ СОЕДИНЕНИЕ"+?(СтруктураДанныхФормы.ОтборПоЭкземплярам," ТабЭкземплярыОтчетов"," Документ.НастраиваемыйОтчет")+" КАК НастраиваемыйОтчет
	|		ПО КлючевыеИзмерения.ПериодОтчета = НастраиваемыйОтчет.ПериодОтчета
	|			И КлючевыеИзмерения.Организация = НастраиваемыйОтчет.Организация
	|			И КлючевыеИзмерения.Сценарий = НастраиваемыйОтчет.Сценарий"+ТекстАналитики5+"
	|			И (НастраиваемыйОтчет.ВидОтчета = &ВидОтчета)
	|			И (НЕ НастраиваемыйОтчет.ПометкаУдаления)	
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала";
	
	Запрос.Текст=ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Периоды",СтруктураДанныхФормы.ПериодОтчетаОтбор);

	Запрос.УстановитьПараметр("Сценарии",СтруктураДанныхФормы.СценарийОтбор);
	Запрос.УстановитьПараметр("ВидОтчета",СтруктураДанныхФормы.ВидОтчета);
	Запрос.УстановитьПараметр("ОсновнаяВалюта",СтруктураДанныхФормы.ОсновнаяВалюта);
	Запрос.УстановитьПараметр("Периодичность",СтруктураДанныхФормы.Периодичность);
	
	ТабОтчеты=Запрос.Выполнить().Выгрузить();
	ТабОтчеты.Колонки.Добавить("ОтчетОбъект");
	ТабОтчеты.Колонки.Добавить("ДанныеОбъекта");
	ТабОтчеты.Колонки.Добавить("ФормаОтчета");
	ТабОтчеты.Колонки.Добавить("ЕстьЭкземплярОтчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());	 
	ТабОтчеты.Колонки.Добавить("ОтчетИзменен",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТабОтчеты.Колонки.Добавить("ОтчетИнициализирован",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	ОсновныеВалюты=Новый Соответствие;
	
	ТекстВалюты="";
	ТекстОбъединение="";
	Индекс=0;
	
	ЗапросВалюты=Новый Запрос;
	МассивЭкземпляров=Новый Массив;
	
	Для Каждого СтрОтчет ИЗ ТабОтчеты Цикл
		
		Если НЕ СтрОтчет.ЭкземплярОтчета=Неопределено Тогда
						
			Если ОсновныеВалюты[СтрОтчет.ОсновнаяВалюта]=Неопределено Тогда
				МассивЭкземпляровПоВалюте=Новый Массив;
				МассивЭкземпляровПоВалюте.Добавить(СтрОтчет.ЭкземплярОтчета);
				ОсновныеВалюты.Вставить(СтрОтчет.ОсновнаяВалюта,МассивЭкземпляровПоВалюте);
			Иначе
				ОсновныеВалюты[СтрОтчет.ОсновнаяВалюта].Добавить(СтрОтчет.ЭкземплярОтчета); 
			КонецЕсли;
			
			МассивЭкземпляров.Добавить(СтрОтчет.ЭкземплярОтчета);
			СтрОтчет.ЕстьЭкземплярОтчета=Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РабочийОбъект.СписокИспользуемыхВалют=Новый СписокЗначений;
	
	Если МассивЭкземпляров.Количество()>0 Тогда
		
		ЗапросВалюты.Текст="ВЫБРАТЬ
		|	СводнаяТаблицаВалют.Валюта,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СводнаяТаблицаВалют.ЭкземплярОтчета) КАК Использование
		|ИЗ
		|	(ВЫБРАТЬ
		|		НастраиваемыйОтчетДополнительныеВалюты.Ссылка КАК ЭкземплярОтчета,
		|		НастраиваемыйОтчетДополнительныеВалюты.Валюта КАК Валюта
		|	ИЗ
		|		Документ.НастраиваемыйОтчет.ДополнительныеВалюты КАК НастраиваемыйОтчетДополнительныеВалюты
		|	ГДЕ
		|		НастраиваемыйОтчетДополнительныеВалюты.Ссылка В(&МассивЭкземпляров)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		НастраиваемыйОтчет.Ссылка,
		|		НастраиваемыйОтчет.ОсновнаяВалюта
		|	ИЗ
		|		Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
		|	ГДЕ
		|		НастраиваемыйОтчет.Ссылка В(&МассивЭкземпляров)) КАК СводнаяТаблицаВалют
		|
		|СГРУППИРОВАТЬ ПО
		|	СводнаяТаблицаВалют.Валюта
		|
		|УПОРЯДОЧИТЬ ПО
		|	Использование УБЫВ";
		
		ЗапросВалюты.УстановитьПараметр("МассивЭкземпляров",МассивЭкземпляров);
		СтрВалюта=ЗапросВалюты.Выполнить().Выбрать();
				
		РабочийОбъект.ОсновнаяВалюта=Неопределено;
		ИспользованиеОсновнойВалюты=0;
		
		Пока СтрВалюта.Следующий() Цикл
			
			Если СтрВалюта.Использование=МассивЭкземпляров.Количество() Тогда
				РабочийОбъект.СписокИспользуемыхВалют.Добавить(СтрВалюта.Валюта);
				Если (НЕ ОсновныеВалюты[СтрВалюта.Валюта]=Неопределено)
					И ОсновныеВалюты[СтрВалюта.Валюта].Количество()>ИспользованиеОсновнойВалюты Тогда
					
					СтруктураДанныхФормы.ОсновнаяВалюта=СтрВалюта.Валюта;
					РабочийОбъект.ОсновнаяВалюта=СтрВалюта.Валюта;
					ИспользованиеОсновнойВалюты=ОсновныеВалюты[СтрВалюта.Валюта].Количество();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если РабочийОбъект.СписокИспользуемыхВалют.Количество()=0 Тогда
			Сообщить("Не удалось определить единую валюту для отображения данных",СтатусСообщения.Внимание);
			ТабОтчеты.Очистить();
			Возврат Неопределено;
		КонецЕсли;
		
		Если СтруктураДанныхФормы.ОсновнаяВалюта=Неопределено Тогда
			СтруктураДанныхФормы.ОсновнаяВалюта=РабочийОбъект.СписокИспользуемыхВалют[0].Значение;
		КонецЕсли;
		
		Если РабочийОбъект.ОсновнаяВалюта=Неопределено Тогда
			РабочийОбъект.ОсновнаяВалюта=РабочийОбъект.СписокИспользуемыхВалют[0].Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (НЕ СтруктураДанныхФормы.ОтборПоЭкземплярам=1) И СтруктураДанныхФормы.СоздаватьЭкземплярыОтчетов Тогда
		
		// Попытаемся создать необходимые экземпляры отчетов
		
		Если НЕ ЗначениеЗаполнено(РабочийОбъект.ОсновнаяВалюта) Тогда
			Сообщить("Не указана основная валюта. Создание экземпляров отчета отменено.",СтатусСообщения.Важное);
			Возврат Неопределено;
		КонецЕсли;
		
		Если РабочийОбъект.СписокИспользуемыхВалют.Количество()=0 Тогда
			РабочийОбъект.СписокИспользуемыхВалют.Добавить(РабочийОбъект.ОсновнаяВалюта);
		КонецЕсли;
		
		// Проверим наличие открытых периодов сценария
		
		ЗапросПериоды=Новый Запрос;
		ЗапросПериоды.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		
		ЗапросПериоды.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабОтчеты.ПериодОтчета,
		|	ТабОтчеты.Сценарий
		|ПОМЕСТИТЬ ПериодыСценарии
		|ИЗ
		|	&ТабОтчеты КАК ТабОтчеты
		|ГДЕ
		|	(НЕ ТабОтчеты.ЕстьЭкземплярОтчета)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыСценарии.ПериодОтчета,
		|	ПериодыСценарии.Сценарий,
		|	СтатусыПериодовСценариев.Ссылка КАК УправлениеПериодом
		|ИЗ
		|	ПериодыСценарии КАК ПериодыСценарии
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СтатусыПериодовСценариев.УправлениеПериодомСценария КАК Ссылка,
		|			СтатусыПериодовСценариев.Сценарии КАК Сценарий,
		|			СтатусыПериодовСценариев.Периоды КАК ПериодОтчета
		|		ИЗ
		|			РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев) КАК СтатусыПериодовСценариев
		|		ПО ПериодыСценарии.ПериодОтчета = СтатусыПериодовСценариев.ПериодОтчета
		|			И ПериодыСценарии.Сценарий = СтатусыПериодовСценариев.Сценарий";
		
		ЗапросПериоды.УстановитьПараметр("ТабОтчеты",ТабОтчеты);
		
		Результат=ЗапросПериоды.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			Если Результат.УправлениеПериодом=NULL тогда
				
				НовыйДокумент=УправлениеРабочимиПроцессамиУХ.ОпределитьДокументУправленияПериодомСценария(Результат.Сценарий,Результат.ПериодОтчета);
				
				Если НовыйДокумент=Неопределено Тогда
					
					ОбщегоНазначенияУХ.СообщитьОбОшибке("Для сценария "+Результат.Сценарий+" период "+Результат.ПериодОтчета+" еще не открыт.
					|Формирование экземпляров отчета отменено.
					|",,СтатусСообщения.Внимание);
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтруктураПоиска=Новый Структура;
			СтруктураПоиска.Вставить("ПериодОтчета",Результат.ПериодОтчета);
			СтруктураПоиска.Вставить("Сценарий",Результат.Сценарий);
			СтруктураПоиска.Вставить("ЕстьЭкземплярОтчета",Ложь);
			
			СтрокиКОбработке=ТабОтчеты.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрОтчет ИЗ СтрокиКОбработке Цикл
				
				НовыйОтчет=РабочийОбъект.СоздатьЭкземплярОтчета(СтрОтчет);
				Если НовыйОтчет=Неопределено Тогда
					СтрОтчет.ЕстьЭкземплярОтчета=Ложь;
				Иначе
					
					ОтчетОбъект=НовыйОтчет.Объект;
					ОтчетСсылка=НовыйОтчет.Ссылка;
					
					ОтчетОбъект.ИнициализироватьКонтекст();
					ОтчетОбъект.ЗагрузитьКомментарииВСоответствие();
					
					СтрОтчет.ДанныеОбъекта=ОтчетОбъект.ПодготовитьСтруктуруПеременныхДляРасчета();
					СтрОтчет.ЭкземплярОтчета=ОтчетСсылка;
					
					СтрОтчет.ЕстьЭкземплярОтчета=Истина;
					СтрОтчет.ОтчетИнициализирован=Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;	
		
		СтруктураДанныхФормы.СписокЭкземпляров.Очистить();
		
		Для Каждого СтрОтчет ИЗ ТабОтчеты Цикл		
			
			СтруктураДанныхФормы.СписокЭкземпляров.Добавить(СтрОтчет.ЭкземплярОтчета);
			
		КонецЦикла;
		
		ЗапросПериоды.МенеджерВременныхТаблиц.Закрыть();
		
	КонецЕсли;
	
	// Определим правила вывода в различных валютах
	
	Если Не ЗначениеЗаполнено(СтруктураДанныхФормы.ВыбраннаяВалюта) Тогда
		СтруктураДанныхФормы.ВыбраннаяВалюта=СтруктураДанныхФормы.ОсновнаяВалюта;
	ИначеЕсли РабочийОбъект.СписокИспользуемыхВалют.НайтиПоЗначению(СтруктураДанныхФормы.ВыбраннаяВалюта)=Неопределено Тогда
		СтруктураДанныхФормы.ВыбраннаяВалюта=СтруктураДанныхФормы.ОсновнаяВалюта;
	КонецЕсли;
	
	СтруктураДанныхФормы.ВалютаОтображения=СтруктураДанныхФормы.ВыбраннаяВалюта;
	РабочийОбъект.ВалютаОтображения=СтруктураДанныхФормы.ВыбраннаяВалюта;
	
	СтруктураДанныхФормы.СписокВалютОтображения=РабочийОбъект.СписокИспользуемыхВалют;
	
	ТабОтчеты.Колонки.Добавить("мПоказателиВВалюте");
	ТабОтчеты.Колонки.Добавить("мПоказателиРаскрытияВВалюте");
	ТабОтчеты.Колонки.Добавить("мИзмененныеПоказатели");
	ТабОтчеты.Колонки.Добавить("мИзмененныеПоказателиРаскрытия");
	
	ТабОтчеты.Колонки.Добавить("ВыводитьВВалютеОтображения",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	ТабОтчетыСводная=Новый ТаблицаЗначений;
	ТабОтчетыСводная.Колонки.Добавить("ОсновнаяВалюта");
	ТабОтчетыСводная.Колонки.Добавить("МассивЭкземпляров");
	ТабОтчетыСводная.Колонки.Добавить("ОсновнаяТаблица_мПоказатели");
	ТабОтчетыСводная.Колонки.Добавить("ОсновнаяТаблица_мПоказателиРаскрытия");
	ТабОтчетыСводная.Колонки.Добавить("Таблицы_мПоказателиВВалюте");
	ТабОтчетыСводная.Колонки.Добавить("Таблицы_мПоказателиРаскрытияВВалюте");
						
	ТабОтчеты.Индексы.Добавить("ЭкземплярОтчета");
	РабочийОбъект.ТабОтчеты=ТабОтчеты;
	РабочийОбъект.ТабОтчетыСводная=ТабОтчетыСводная;
	
	РабочийОбъект.ПолучитьмПоказателиЭталон();
	
	РабочийОбъект.ОсновныеВалюты=ОсновныеВалюты;
	
	РабочийОбъект.ИнициализироватьКонтекстСводно(ОсновныеВалюты);
			
	Возврат РабочийОбъект;
	
КонецФункции // ПолучитьТаблицуОтчетовПоИзмерениям()

&НаСервере
Процедура ЗаполнитьСписокПериодов() Экспорт
	
	ПериодОтчетаОтбор.Очистить();
	
	Если НЕ (ЗначениеЗаполнено(ИнтервалДо) И ЗначениеЗаполнено(ИнтервалПосле)) Тогда
		
		Сообщить(НСтр("ru = 'Некоректно указаны границы интервала просмотра'"), СтатусСообщения.Внимание);
		Возврат;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	Периоды.Ссылка
	             |ИЗ
	             |	Справочник.Периоды КАК Периоды
	             |ГДЕ
	             |	Периоды.ДатаНачала >= &ДатаНачала
	             |	И Периоды.ДатаОкончания <= &ДатаОкончания
	             |	И Периоды.Периодичность = &Периодичность";
				 
	Запрос.УстановитьПараметр("Периодичность",ТекущийПериодПериодичность);
	
	Если СтрНайти(ИнтервалДо,"Текущий_")>0 Тогда
		
		Запрос.УстановитьПараметр("ДатаНачала",ТекущийПериодДляОтбора.ДатаНачала);
		
	ИначеЕсли СтрНайти(ИнтервалДо,"Предыдущий_")>0 Тогда
		
		Запрос.УстановитьПараметр("ДатаНачала",ОбщегоНазначенияУХ.ДобавитьИнтервал(ТекущийПериодДляОтбора.ДатаНачала,ТекущийПериодПериодичность,-1));
		
	ИначеЕсли СтрНайти(ИнтервалДо,"Следующий_")>0 Тогда
		
		Запрос.УстановитьПараметр("ДатаНачала",ОбщегоНазначенияУХ.ДобавитьИнтервал(ТекущийПериодДляОтбора.ДатаНачала,ТекущийПериодПериодичность,1));
		
	ИначеЕсли СтрНайти(ИнтервалДо,"Начало_")>0 Тогда
		
		МассивСтрок=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ИнтервалДо,"_");
		Запрос.УстановитьПараметр("ДатаНачала",ОбщегоНазначенияУХ.ДатаНачалаПериода(ТекущаяДата(),Перечисления.Периодичность[МассивСтрок[1]]));
		
	КонецЕсли;
	
	Если СтрНайти(ИнтервалПосле,"Текущий_")>0 Тогда
		
		Запрос.УстановитьПараметр("ДатаОкончания",ТекущийПериодДляОтбора.ДатаОкончания);
				
	ИначеЕсли СтрНайти(ИнтервалПосле,"Следующий_")>0 Тогда
		
		Запрос.УстановитьПараметр("ДатаОкончания",ОбщегоНазначенияУХ.ДобавитьИнтервал(ТекущийПериодДляОтбора.ДатаОкончания,ТекущийПериодПериодичность,1));
		
	ИначеЕсли СтрНайти(ИнтервалПосле,"Окончание_")>0 Тогда
		
		МассивСтрок=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ИнтервалПосле,"_");
		Запрос.УстановитьПараметр("ДатаОкончания",ОбщегоНазначенияУХ.ДатаКонцаПериода(ТекущаяДата(),Перечисления.Периодичность[МассивСтрок[1]]));
		
	ИначеЕсли ИнтервалПосле="Отступ" Тогда
		
		Запрос.УстановитьПараметр("ДатаОкончания",ОбщегоНазначенияУХ.ДобавитьИнтервал(ТекущийПериодДляОтбора.ДатаОкончания,ТекущийПериодПериодичность,ОтступВперед));
		
	КонецЕсли;
	
	ПериодОтчетаОтбор.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
 	
КонецПроцедуры // ЗаполнитьСписокПериодов()

&НаСервере
Функция ПроверитьИсходныеДанные(РабочийОбъектАдрес,ИдентификаторФормы,РабочийОбъект=Неопределено)
	
	Если РабочийОбъект=Неопределено Тогда
		
		РабочийОбъект=ПолучитьРабочийОбъект();
		
	КонецЕсли; 	
	
	Если РабочийОбъект.ТабОтчеты.Количество()=0 ИЛИ РабочийОбъект.ТабОтчеты.Найти(Истина,"ЕстьЭкземплярОтчета")=Неопределено Тогда
		Возврат Ложь;
	Иначе	
		Возврат Истина;
	КонецЕсли;
	
КонецФункции //
 
&НаКлиенте
Функция ЕстьАнализОтклонений() Экспорт
		
	Для Каждого Колонка Из Объект.ГруппировкиВычисляемыеКолонки Цикл
		
		Если (Колонка.Группировка="ОтклонениеАбс" ИЛИ Колонка.Группировка="ОтклонениеОтн")
			И Колонка.Отображать Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции // ЕстьАнализОтклонений()

&НаСервере
Функция ПроверитьПериодичность()
	
	СписокПериодичность=Новый СписокЗначений;
	
	Для Каждого Период ИЗ ПериодОтчетаОтбор Цикл
		
		Если СписокПериодичность.Количество()=0 Тогда
			
			СписокПериодичность.Добавить(Период.Значение.Периодичность);
			
		ИначеЕсли СписокПериодичность.НайтиПоЗначению(Период.Значение.Периодичность)=Неопределено Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;	
	
КонецФункции // ПроверитьПериодичность()

&НаКлиенте
Процедура ПолучитьЗначениеДелителя()
	
	Если ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000000") Тогда
		ТекущийДелитель = 1000000;
	ИначеЕсли ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000") Тогда
		ТекущийДелитель =  1000;
	Иначе
		ТекущийДелитель =  1;
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура КоманднаяПанельСтрокиПереместитьВверх(Команда)
	
	ГруппировкиСтроки=Объект.ГруппировкиСтроки;
	ТекСтрока=ГруппировкиСтроки.Индекс(Элементы.ГруппировкиСтроки.ТекущиеДанные);	
			
	Если Не ТекСтрока=0 Тогда
		
		ГруппировкиСтроки.Сдвинуть(ТекСтрока,-1);
		
		Если ОбновлятьПриИзмененииГруппировок Тогда
			ОбновитьДанныеФормыБезОбъекта();
			РазвернутьСтрокиДерева();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура КоманднаяПанельСтрокиПереместитьВниз(Команда)
	
	ГруппировкиСтроки=Объект.ГруппировкиСтроки;
	ТекСтрока=ГруппировкиСтроки.Индекс(Элементы.ГруппировкиСтроки.ТекущиеДанные);
	
	Если Не ТекСтрока=(ГруппировкиСтроки.Количество()-1) Тогда
		
		ГруппировкиСтроки.Сдвинуть(ТекСтрока,1);
				
		Если ОбновлятьПриИзмененииГруппировок Тогда
			ОбновитьДанныеФормыБезОбъекта();
			РазвернутьСтрокиДерева();
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельКолонкиПереместитьВверх(Команда)
			
	ГруппировкиКолонки=Объект.ГруппировкиКолонки;
	ТекСтрока=ГруппировкиКолонки.Индекс(Элементы.ГруппировкиКолонки.ТекущиеДанные);	
	
	Если Не ТекСтрока=0 Тогда
		
		ГруппировкиКолонки.Сдвинуть(ТекСтрока,-1);
		
		ПриИзмененииПорядкаГруппировок();
		
		Если ОбновлятьПриИзмененииГруппировок Тогда
			ОбновитьДанныеФормыБезОбъекта();
			РазвернутьСтрокиДерева();
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьМасштабНажатие(Команда)
	
	ОбновитьДанныеФормыБезОбъекта();
	РазвернутьСтрокиДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельВычислениеУстановитьВсе(Команда)
	
	Для Каждого Колонка ИЗ Объект.ГруппировкиВычисляемыеКолонки Цикл
				
	    Колонка.Отображать=ОпределитьДоступностьВычисляемойКолонки(Колонка.Группировка);
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Функция ОпределитьДоступностьВычисляемойКолонки(ИмяКолонки)
	
	Если ИмяКолонки="ДоляВИтогеПоПериметру" Тогда
		
		Возврат Ложь;
		
	ИначеЕсли ИмяКолонки="ДоляВИтогеПоГруппировке" И ГруппировкаБазис="Сценарий" Тогда
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
		
КонецФункции // ОпределитьДоступностьВычисляемойКолонки()

&НаКлиенте
Процедура КоманднаяПанельВычислениеСнятьВсе(Команда)
	
	Для Каждого Колонка ИЗ Объект.ГруппировкиВычисляемыеКолонки Цикл
	
	    Колонка.Отображать=Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОтчетаПриИзменении(Элемент)
	
	ПриИзмененииВидаОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	
	Если ОтборПоЭкземплярам=1 Тогда
		Элементы.ГруппаОтбор.ТекущаяСтраница=Элементы.ГруппаОтборЭкземпляры;
	Иначе
		Элементы.ГруппаОтбор.ТекущаяСтраница=Элементы.ГруппаОтборРеквизиты;
	КонецЕсли;
			
	Элементы.ОтступВперед.Видимость=(ИнтервалПосле="Отступ");
	
	ЕстьЭкземплярОтчета=(НЕ ТекДанныеЯчейки=Неопределено) И ЗначениеЗаполнено(ТекДанныеЯчейки.ЭкземплярОтчета);
	ЗаполняемыйПоказатель=ЕстьЭкземплярОтчета 
							И ТекДанныеЯчейки.Свойство("Показатель") 
							И (НЕ ТекДанныеЯчейки.СписокРедактируемыхПоказателей.НайтиПоЗначению(ТекДанныеЯчейки.Показатель)=Неопределено);
		
	УстановитьДоступностьРедактирования(ЕстьЭкземплярОтчета,ЗаполняемыйПоказатель);			
	
КонецПроцедуры // УстановитьВидимость()

&НаКлиенте
Функция ВернутьСтруктуруГруппировокДляРаспределения()
	
	СтруктураЗафиксированныхГруппировок=Новый Структура;
	СписокГруппировокДляРаспределения=Новый СписокЗначений;
	
	Для Каждого Строка ИЗ Объект.ГруппировкиСтроки Цикл
		
		Если Строка.Группировка="Строка" Тогда
			Продолжить;		
		ИначеЕсли ТекДанныеЯчейки.Свойство(Строка.Группировка) Тогда
			СтруктураЗафиксированныхГруппировок.Вставить(Строка.Группировка,ТекДанныеЯчейки[Строка.Группировка]);
		Иначе	
			СписокГруппировокДляРаспределения.Добавить(Строка.Группировка,Строка.ПредставлениеГруппировки);	
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Колонка ИЗ Объект.ГруппировкиКолонки Цикл
		
		Если Колонка.Группировка="Колонка" Тогда
			Продолжить;		
		ИначеЕсли ТекДанныеЯчейки.Свойство(Колонка.Группировка) Тогда
			СтруктураЗафиксированныхГруппировок.Вставить(Колонка.Группировка,ТекДанныеЯчейки[Колонка.Группировка]);
		Иначе
			СписокГруппировокДляРаспределения.Добавить(Колонка.Группировка,Колонка.ПредставлениеГруппировки);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанных=Новый Структура;
	СтруктураДанных.Вставить("СтруктураЗафиксированныхГруппировок",СтруктураЗафиксированныхГруппировок);
	СтруктураДанных.Вставить("СписокГруппировокДляРаспределения",СписокГруппировокДляРаспределения);
	
	Возврат СтруктураДанных;	
	
КонецФункции // ВернутьСтруктуруГруппировокДляРаспределения()

&НаСервере
Функция СформироватьТекДанныеЯчейки(РасшифровкаЯчейки,РабочийОбъектАдрес)
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	Если РасшифровкаЯчейки.Свойство("Строка") Тогда
		ТекСтрокаОтчета=РасшифровкаЯчейки.Строка;
	Иначе
		ТекСтрокаОтчета=Неопределено;
	КонецЕсли;
	
	СтруктураИзмерения=Новый Структура;
	
	ВозможноРедактирование=Истина;
	
	Если РасшифровкаЯчейки.Свойство("Показатель") Тогда
		ТекПоказательОтчета=РасшифровкаЯчейки.Показатель;
		СтруктураИзмерения.Вставить("Показатель",РасшифровкаЯчейки.Показатель);
	Иначе
		ТекПоказательОтчета=Неопределено;
		ВозможноРедактирование=Ложь;
	КонецЕсли;	
	
	Для Каждого Измерение ИЗ РабочийОбъект.МассивГруппировокСтрокИтог Цикл
		
		Если НЕ Измерение="ИндексАналитики" Тогда
			
			Если РасшифровкаЯчейки.Свойство(Измерение) Тогда
				СтруктураИзмерения.Вставить(Измерение,РасшифровкаЯчейки[Измерение]);
			Иначе
				ВозможноРедактирование=Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Измерение ИЗ РабочийОбъект.МассивГруппировокКолонокИтог Цикл
		Если РасшифровкаЯчейки.Свойство(Измерение) Тогда
			СтруктураИзмерения.Вставить(Измерение,РасшифровкаЯчейки[Измерение]);
		Иначе
			ВозможноРедактирование=Ложь;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураИзмерения.Вставить("Раскрытие",РасшифровкаЯчейки.Раскрытие);
	
	Если РасшифровкаЯчейки.Раскрытие Тогда
		
		Для ИндексАналитика=РабочийОбъект.МаксАналитикОтчета+1 По (РабочийОбъект.МаксАналитикОтчета+РабочийОбъект.МаксАналитикПоказателя) Цикл
			
			СтруктураИзмерения.Вставить("Аналитика"+ИндексАналитика,РасшифровкаЯчейки["Аналитика"+ИндексАналитика]);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураИзмерения.Вставить("ЭкземплярОтчета",РасшифровкаЯчейки.ЭкземплярОтчета);
	СтруктураИзмерения.Вставить("ЧтениеНеактуальныхЗаписей",РасшифровкаЯчейки.ЧтениеНеактуальныхЗаписей);
	СтруктураИзмерения.Вставить("НеВноситьИзменения",РасшифровкаЯчейки.НеВноситьИзменения);
	СтруктураИзмерения.Вставить("Заблокирован",РасшифровкаЯчейки.Заблокирован);

	Возврат СтруктураИзмерения;
		
КонецФункции
 
&НаСервереБезКонтекста
Функция ПолучитьДанныеПоказателя(Показатель,РабочийОбъектАдрес)
	
	Возврат ОбщегоНазначенияУХ.ПолучитьДанныеГруппыРаскрытия(Показатель);
		
КонецФункции // ПолучитьДанныеПоказателя() 

&НаСервере
Процедура ОбработатьИзменениеРаскрытия(СтруктураАналитика,СтруктураАналитикиНов=Неопределено)
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	// Определим количество экземпляров отчета, относящихся к выбранной ячейке
	
	СтруктураПоиска=Новый Структура;
	
	Если ТекДанныеЯчейки.Свойство("Организация") Тогда
		СтруктураПоиска.Вставить("Организация",ТекДанныеЯчейки.Организация);
	КонецЕсли;
	
	Если ТекДанныеЯчейки.Свойство("Сценарий") Тогда
		СтруктураПоиска.Вставить("Сценарий",ТекДанныеЯчейки.Сценарий);
	КонецЕсли;
	
	Если ТекДанныеЯчейки.Свойство("ПериодОтчета") Тогда
		СтруктураПоиска.Вставить("ПериодОтчета",ТекДанныеЯчейки.ПериодОтчета);
	КонецЕсли;
	
	Для Индекс=1 По РабочийОбъект.МаксАналитикОтчета Цикл
		
		Если ТекДанныеЯчейки.Свойство("Аналитика"+Индекс) Тогда
			СтруктураПоиска.Вставить("Аналитика"+Индекс,ТекДанныеЯчейки["Аналитика"+Индекс]);
		КонецЕсли;
		
	КонецЦикла;
			
	МассивОтчетов=РабочийОбъект.ТабОтчеты.НайтиСтроки(СтруктураПоиска);

	Если МассивОтчетов.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим возможность редактирования выбранных экземпляров отчета
	
	Для Каждого СтрОтчет ИЗ МассивОтчетов Цикл
		
		Если НЕ РабочийОбъект.ПроверитьИнициализациюОтчета(СтрОтчет) Тогда
			Возврат;
		КонецЕсли;
		
		РабочийОбъект.ПолучитьДокументОбъект(СтрОтчет);
		
	КонецЦикла;
	
	ОтчетОбъект=МассивОтчетов[0].ОтчетОбъект;	
	СтрАналитики=РабочийОбъект.мПоказателиЭталон.Найти(ТекДанныеЯчейки.Показатель,"Ссылка");
		
	Если НЕ СтруктураАналитика.Свойство("Значение") Тогда
		
		УстанавливаемоеЗначение=Неопределено;
		
	ИначеЕсли ТипЗнч(СтруктураАналитика.Значение)=Тип("Число") И (НЕ ОтчетОбъект.ОсновнаяВалюта=ВалютаОтображения) Тогда
		
		УстанавливаемоеЗначение=ОтчетОбъект.ПолучитьЗначениеПоказателяВОсновнойВалюте(СтрАналитики, СтруктураАналитика.Значение);
		
	Иначе
		
		УстанавливаемоеЗначение=СтруктураАналитика.Значение;
		
	КонецЕсли;
	
	МассивПоказатели=Новый Массив;
	
	Если СтруктураАналитика.Свойство("Значение") Тогда // Добавляем строку во все показатели, относящиеся к введенной строке
		
		СтруктураПоиска=Новый Структура;
		СтруктураПоиска.Вставить("Строка",ТекДанныеЯчейки.Строка);
		
		СтрПоказатели=МассивОтчетов[0].ОтчетОбъект.мПоказатели.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого Показатель ИЗ СтрПоказатели Цикл
			
			Если ЗначениеЗаполнено(Показатель.ГруппаРаскрытия) Тогда
				
				МассивПоказатели.Добавить(Показатель);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрОтчет ИЗ МассивОтчетов Цикл
			
			УстановитьЗначениеРаскрытия(СтрОтчет.ОтчетОбъект,СтрОтчет,МассивПоказатели,УстанавливаемоеЗначение,СтруктураАналитика,СтруктураАналитикиНов,ТекДанныеЯчейки);
			
		КонецЦикла;
		
	Иначе
		
		Если ТекДанныеЯчейки.Свойство("Показатель") Тогда
			
			СтрПоказатель=МассивОтчетов[0].ОтчетОбъект.мПоказатели.Найти(ТекДанныеЯчейки.Показатель,"Ссылка");
			МассивПоказатели.Добавить(СтрПоказатель);
			УстановитьЗначениеРаскрытия(СтрОтчет.ОтчетОбъект,СтрОтчет,МассивПоказатели,УстанавливаемоеЗначение,СтруктураАналитика,СтруктураАналитикиНов);
			
		Иначе
			
			СтруктураПоиска=Новый Структура;
			СтруктураПоиска.Вставить("Строка",ТекДанныеЯчейки.Строка);
			
			СтрПоказатели=МассивОтчетов[0].ОтчетОбъект.мПоказатели.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого Показатель ИЗ СтрПоказатели Цикл
				
				МассивПоказатели.Добавить(Показатель);
				
			КонецЦикла;
			
			Для Каждого СтрОтчет ИЗ МассивОтчетов Цикл
				
				УстановитьЗначениеРаскрытия(СтрОтчет.ОтчетОбъект,СтрОтчет,МассивПоказатели,УстанавливаемоеЗначение,СтруктураАналитика,СтруктураАналитикиНов);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(УстанавливаемоеЗначение) И (НЕ ТипЗнч(УстанавливаемоеЗначение)=Тип("Число")) Тогда
	//	
	//	Если Объект.ВыводитьВДерево Тогда
	//		
	//		ОбновитьСтрокиРаскрытияДерево(РабочийОбъект);
	//		
	//	КонецЕсли; 
	//	
	//	ПоместитьРабочийОбъект(РабочийОбъект);
	//	Возврат;
	//	
	//КонецЕсли; 
	
	Если УстанавливаемоеЗначение=Неопределено Тогда
		РабочийОбъект.ОбластьРучногоИзменения=Неопределено;
	КонецЕсли;
			
	РабочийОбъект.ПересчитатьРабочиеТаблицыВВалютуОтображения(МассивОтчетов,Ложь);
	
	РабочийОбъект.ЗапросДанные.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	РабочийОбъект.ЗапросДанныеРаскрытия.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	РабочийОбъект.ЗапросКоординаты.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	РабочийОбъект.ЗапросДанные.Текст="ВЫБРАТЬ * Поместить ТабПоказатели ИЗ &ТабПоказатели КАК ТабПоказатели
	|;
	|ВЫБРАТЬ * Поместить СтрокиОтчетов ИЗ &СтрокиОтчетов КАК СтрокиОтчетов";
	
	РабочийОбъект.ЗапросДанные.УстановитьПараметр("ТабПоказатели",РабочийОбъект.ТаблицыЗапросаДанные.ТабПоказатели);
	РабочийОбъект.ЗапросДанные.УстановитьПараметр("СтрокиОтчетов",РабочийОбъект.ТаблицыЗапросаДанные.СтрокиОтчетов);
	РабочийОбъект.ЗапросДанные.Выполнить();
		
	РабочийОбъект.ЗапросДанныеРаскрытия.Текст="ВЫБРАТЬ * Поместить ТабПоказатели ИЗ &ТабПоказатели КАК ТабПоказатели";
	РабочийОбъект.ЗапросДанныеРаскрытия.УстановитьПараметр("ТабПоказатели",РабочийОбъект.ТаблицыЗапросаДанные.ТабПоказатели);
	РабочийОбъект.ЗапросДанныеРаскрытия.Выполнить();
	
	РабочийОбъект.ОбновитьСтрокиРаскрытияВТаблице(ТекДанныеЯчейки,МассивОтчетов[0]);
	
	Если Объект.ВыводитьВДерево Тогда
		
		ОбновитьСтрокиРаскрытияДерево(РабочийОбъект);
		
	КонецЕсли; 
			
	ПоместитьРабочийОбъект(РабочийОбъект);
	Модифицированность=Истина;
	
КонецПроцедуры // ОбработатьИзменениеРаскрытия()

&НаСервере
Процедура ОбновитьСтрокиРаскрытияДерево(РабочийОбъект)
	
	// Добавим новые строки в дерево формы
	Для Каждого СтрокаКДобавлению ИЗ РабочийОбъект.МассивДобавленныхСтрокКПередаче Цикл
		
		СтрокаРодитель=ОпределитьСтрокуПоАбсолютномуАдресуСервер(СтрокаКДобавлению.АдресРодителя);
		ИндексВставки=СтрокаКДобавлению.ИндексВставки;
		
		Если ИндексВставки>=0 Тогда 	
			НоваяСтрока=СтрокаРодитель.ПолучитьЭлементы().Вставить(ИндексВставки);
		Иначе
			НоваяСтрока=СтрокаРодитель.ПолучитьЭлементы().Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению.ДанныеНовойСтроки);
		
	КонецЦикла;
	
	// Обновим данные в ячейках дерева
	Для Каждого ИзмененнаяЯчейка ИЗ РабочийОбъект.МассивИзмененныхОбластей Цикл
		
		ТекСтрока=ОпределитьСтрокуПоАбсолютномуАдресуСервер(ИзмененнаяЯчейка.АдресСтроки);
		
		ИмяЭлемента=СписокКолонокДерева[ИзмененнаяЯчейка.АдресКолонки-7].Значение;
		
		ТекСтрока[ИмяЭлемента]=ИзмененнаяЯчейка.Значение;
		
	КонецЦикла;
	
	// Удалим строки из дерева формы
	Для Каждого СтрокаКУдалению ИЗ РабочийОбъект.МассивУдаленныхСтрокКПередаче Цикл
		
		СтрокаРодитель=ОпределитьСтрокуПоАбсолютномуАдресуСервер(СтрокаКУдалению.АдресРодителя);
		УдаляемаяСтрока=ОпределитьСтрокуПоАбсолютномуАдресуСервер(СтрокаКУдалению.АдресСтроки);
		
		СтрокаРодитель.ПолучитьЭлементы().Удалить(УдаляемаяСтрока);
		
	КонецЦикла;

		
КонецПроцедуры
 

&НаКлиенте
Процедура ОбработкаСтрокиРаскрытия(ТипОбработки)
	
	Если НЕ (ТипЗнч(ТекДанныеЯчейки)=Тип("Структура") И ТекДанныеЯчейки.Свойство("Строка")) Тогда
		Сообщить("Не указана строка аналитических раскрытий",СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;
	
	Если (ТипОбработки="УдалениеСтрокиАналитики" ИЛИ ТипОбработки="ИзменениеАналитик") И НЕ ТекДанныеЯчейки.Раскрытие Тогда
		Сообщить("Выбранная строка не содержит аналитических раскрытий.",СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;
	
	СтрокаОтчета=ТекДанныеЯчейки.Строка;
	
	СтрАналитики=Неопределено;
	
	Если НЕ ПроверитьВозможностьРедактирования() Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Если ТекДанныеЯчейки.Свойство("Показатель") Тогда
		СтрАналитики=ПолучитьДанныеПоказателя(ТекДанныеЯчейки.Показатель,РабочийОбъектАдрес)
	КонецЕсли;
	
	Если СтрАналитики=Неопределено Тогда
		Сообщить("Не удалось определить группу раскрытия для выбранной ячейки",СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;
	
	Если ТипОбработки="ВставкаСтрокиАналитики" Тогда 
		
		ПараметрыОбработки=Новый Структура;
		ПараметрыОбработки.Вставить("СтрАналитики",СтрАналитики);
		ПараметрыОбработки.Вставить("ТипЗначения",ТекДанныеЯчейки.ТипЗначения);
		
		СтруктураАналитика = Неопределено;

		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработатьИзменениеРаскрытия", ЭтотОбъект);
		ОткрытьФорму("Обработка.ГрупповоеРедактированиеЭкземпляровОтчета.Форма.ФормаВводаАналитикиУправляемая",
						ПараметрыОбработки,ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	ИначеЕсли ТипОбработки="УдалениеСтрокиАналитики" Тогда 
		
		СтруктураАналитика=Новый Структура;
		Для ИндексАналитика=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			СтруктураАналитика.Вставить("Аналитика"+ИндексАналитика,ТекДанныеЯчейки["Аналитика"+ИндексАналитика]);
			
		КонецЦикла;
		
		ОбработатьИзменениеРаскрытия(СтруктураАналитика);
		
	ИначеЕсли ТипОбработки="ИзменениеАналитик" Тогда
		
		// Сохраним текущее значение аналитик
		
		СтруктураАналитика=Новый Структура;
		Для ИндексАналитика=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
			
			СтруктураАналитика.Вставить("Аналитика"+ИндексАналитика,ТекДанныеЯчейки["Аналитика"+ИндексАналитика]);
			
		КонецЦикла;
		
		// Получим новые значения аналитик
		
		ПараметрыОбработки=Новый Структура;
		ПараметрыОбработки.Вставить("СтрАналитики",СтрАналитики);
		ПараметрыОбработки.Вставить("СтруктураАналитикаТек",СтруктураАналитика);
		ПараметрыОбработки.Вставить("ТипЗначения",ТекДанныеЯчейки.ТипЗначения);
		
		СтруктураАналитикаНов = Неопределено;

		ДопПараметры = Новый Структура("СтруктураАналитика", СтруктураАналитика);
		Оповещение = Новый ОписаниеОповещения("ОбработкаСтрокиРаскрытияЗавершение", ЭтотОбъект, ДопПараметры);
		ОткрытьФорму("Обработка.ГрупповоеРедактированиеЭкземпляровОтчета.Форма.ФормаВводаАналитикиУправляемая",
						ПараметрыОбработки,ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьИзменениеРаскрытия(Результат, ДополнительныеПараметры) Экспорт
    
    СтруктураАналитика=Результат;
    
    Если СтруктураАналитика=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    ОбработатьИзменениеРаскрытия(СтруктураАналитика);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСтрокиРаскрытияЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтруктураАналитика = ДополнительныеПараметры.СтруктураАналитика;
    
    СтруктураАналитикаНов=Результат;
    
    ОбработатьИзменениеРаскрытия(СтруктураАналитика,СтруктураАналитикаНов);

КонецПроцедуры // ОбработкаСтрокиРаскрытия()

&НаКлиенте
Процедура УстановитьДоступностьРедактирования(ВозможноРедактирование,ЗаполняемыйПоказатель)
	
	Если ТипЗнч(ТекДанныеЯчейки)=Тип("Структура") И ЗначениеЗаполнено(ТекДанныеЯчейки.ЭкземплярОтчета) Тогда
	    Элементы.ПанельРедактированиеОтчета.ТекущаяСтраница=Элементы.ПанельРедактированиеОтчета.ПодчиненныеЭлементы.РедактированиеЭкземпляра;			
	Иначе	
		Элементы.ПанельРедактированиеОтчета.ТекущаяСтраница=Элементы.ПанельРедактированиеОтчета.ПодчиненныеЭлементы.СводныеДанные;
	КонецЕсли;
	
//	Элементы.ТабДерево.ТолькоПросмотр=НЕ (ВозможноРедактирование И ЗаполняемыйПоказатель И ТекДанныеЯчейки.Заблокирован);
	
КонецПроцедуры // УстановитьДоступностьРедактирования() 

&НаКлиенте
Процедура ДобавитьИзмерениеВСписок(Расшифровка,СписокИзмерений,Измерение,Представление=Неопределено)
	
	ТекСписокИзмерений=Новый СписокЗначений;
	
	Для Каждого КлючИЗначение ИЗ Расшифровка Цикл
		
		Если СтрНайти(КлючИЗначение.Ключ,Измерение)>0 
			И ЗначениеЗаполнено(КлючИЗначение.Значение)
			И ТекСписокИзмерений.НайтиПоЗначению(КлючИЗначение.Значение)=Неопределено Тогда 
			ТекСписокИзмерений.Вставить(0,КлючИЗначение.Значение,КлючИЗначение.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекСписокИзмерений.Количество()>0 Тогда
		
		СписокИзмерений.Добавить(ТекСписокИзмерений[0].Значение,ТекСписокИзмерений[0].Представление);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьИзмерениеВСписок() 

&НаКлиенте
Функция НайтиСтрокуДерева(КоллекцияЭлементов,Значение,ИмяКолонки)
	
	Для Каждого Элемент ИЗ КоллекцияЭлементов Цикл
		
		Если Элемент[ИмяКолонки]=Значение Тогда
			
			Возврат Элемент;
			
		ИначеЕсли Элемент.ПолучитьЭлементы().Количество()>0 Тогда
			
			НайденныйЭлемент=НайтиСтрокуДерева(Элемент.ПолучитьЭлементы(),Значение,ИмяКолонки);
			
			Если Не НайденныйЭлемент=Неопределено Тогда
				
				Возврат НайденныйЭлемент;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
				
КонецФункции // НайтиСтрокуДерева() 
 
&НаСервереБезКонтекста
Функция ПолучитьРасшифровкуЯчейки(ДанныеФормы,Строка,Колонка)
	
	РабочийОбъект=ПолучитьРабочийОбъектБезКонтекста(ДанныеФормы);

	РасшифровкаЯчейки=РабочийОбъект.ПолучитьРасшифровкуЯчейки(Строка,Колонка);
	
	СтрРасшифровка=Новый Структура;
	СтрРасшифровка.Вставить("ТекРасшифровка",РасшифровкаЯчейки);
	
	Если НЕ РасшифровкаЯчейки=Неопределено Тогда
		
		Если РасшифровкаЯчейки.Свойство("Строка") Тогда
			ТекСтрокаОтчета=РасшифровкаЯчейки.Строка;
		Иначе
			ТекСтрокаОтчета=Неопределено;
		КонецЕсли;
		
		СтруктураИзмерения=Новый Структура;
		СтруктураИзмерения.Вставить("НомерСтроки",РасшифровкаЯчейки.НомерСтроки);
		СтруктураИзмерения.Вставить("НомерКолонки",РасшифровкаЯчейки.НомерКолонки);
		
		ВозможноРедактирование=Истина;
		
		Если РасшифровкаЯчейки.Свойство("Показатель") Тогда
			ТекПоказательОтчета=РасшифровкаЯчейки.Показатель;
			СтруктураИзмерения.Вставить("Показатель",РасшифровкаЯчейки.Показатель);
			СтруктураИзмерения.Вставить("ТипЗначения",РасшифровкаЯчейки.ТипЗначения);
			СтруктураИзмерения.Вставить("ЧисловойПоказатель",РасшифровкаЯчейки.ЧисловойПоказатель);
		Иначе
			ТекПоказательОтчета=Неопределено;
			ВозможноРедактирование=Ложь;
		КонецЕсли;	
		
		Для Каждого Измерение ИЗ РабочийОбъект.МассивГруппировокСтрокИтог Цикл
			
			Если НЕ Измерение="ИндексАналитики" Тогда
				
				Если РасшифровкаЯчейки.Свойство(Измерение) Тогда
					СтруктураИзмерения.Вставить(Измерение,РасшифровкаЯчейки[Измерение]);
				Иначе
					ВозможноРедактирование=Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Измерение ИЗ РабочийОбъект.МассивГруппировокКолонокИтог Цикл
			Если РасшифровкаЯчейки.Свойство(Измерение) Тогда
				СтруктураИзмерения.Вставить(Измерение,РасшифровкаЯчейки[Измерение]);
			Иначе
				ВозможноРедактирование=Ложь;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураИзмерения.Вставить("Раскрытие",РасшифровкаЯчейки.Раскрытие);
		
		Если РасшифровкаЯчейки.Раскрытие Тогда
			
			Для ИндексАналитика=РабочийОбъект.МаксАналитикОтчета+1 По (РабочийОбъект.МаксАналитикОтчета+РабочийОбъект.МаксАналитикПоказателя) Цикл
				
				СтруктураИзмерения.Вставить("Аналитика"+ИндексАналитика,РасшифровкаЯчейки["Аналитика"+ИндексАналитика]);
				
			КонецЦикла;
			
		КонецЕсли;
		
		СтруктураИзмерения.Вставить("ЭкземплярОтчета",РасшифровкаЯчейки.ЭкземплярОтчета);
		СтруктураИзмерения.Вставить("ЧтениеНеактуальныхЗаписей",РасшифровкаЯчейки.ЧтениеНеактуальныхЗаписей);
		СтруктураИзмерения.Вставить("НеВноситьИзменения",РасшифровкаЯчейки.НеВноситьИзменения);
		СтруктураИзмерения.Вставить("ВключитьРасширеннуюДиагностику",РасшифровкаЯчейки.ВключитьРасширеннуюДиагностику);
		СтруктураИзмерения.Вставить("Заблокирован",РасшифровкаЯчейки.Заблокирован);
		СтруктураИзмерения.Вставить("ИндексАналитики",РасшифровкаЯчейки.ИндексАналитики);
		СтруктураИзмерения.Вставить("СписокРедактируемыхПоказателей",РасшифровкаЯчейки.СписокРедактируемыхПоказателей);
		
		СтрРасшифровка.Вставить("ТекДанныеЯчейки",СтруктураИзмерения);
		
	Иначе
		
		СтрРасшифровка.Вставить("ТекДанныеЯчейки",Неопределено);
		
	КонецЕсли;
	
	Возврат СтрРасшифровка;
		
КонецФункции // ПолучитьМассивРасшифровки()

&НаКлиенте
Процедура ПриИзмененииВидаОтчета() Экспорт
		
	ПриИзмененииВидаОтчетаСервер();
	
КонецПроцедуры // ПриИзмененииВидаОтчета()

&НаКлиенте
Процедура ОбновитьСписокБазис(СтруктураДанныхФормы=Неопределено)
	
	Элементы.БазовоеЗначениеИзмерения.СписокВыбора.Очистить();
	
	ТекЗначениеБазис=Объект.БазовоеЗначениеИзмерения;
	
	Если СтруктураДанныхФормы=Неопределено Тогда
		
		СтруктураДанныхФормы=Новый Структура;
		
	КонецЕсли;
	
	СтруктураДанныхФормы.Вставить("РабочийОбъектАдрес",РабочийОбъектАдрес);
	СтруктураДанныхФормы.Вставить("ГруппировкаБазис",ГруппировкаБазис);
	СтруктураДанныхФормы.Вставить("ОрганизацияОтбор",ОрганизацияОтбор);	
	СтруктураДанныхФормы.Вставить("ПериодОтчетаОтбор",ПериодОтчетаОтбор);
    СтруктураДанныхФормы.Вставить("СценарийОтбор",СценарийОтбор);
    СтруктураДанныхФормы.Вставить("ИдентификаторФормы",ЭтаФорма.УникальныйИдентификатор);
	
	Для Индекс=1 По 5 Цикл
		
		СтруктураДанныхФормы.Вставить("Аналитика"+Индекс+"Отбор",ЭтаФорма["Аналитика"+Индекс+"Отбор"]);
		
	КонецЦикла;
	
	ТекСписокБазис=СоздатьСписокБазис(СтруктураДанныхФормы);
	
	Для Каждого Элемент ИЗ ТекСписокБазис Цикл
		
		Элементы.БазовоеЗначениеИзмерения.СписокВыбора.Добавить(Элемент.Значение,Элемент.Представление);
		
	КонецЦикла;
				
	Если Не Элементы.БазовоеЗначениеИзмерения.СписокВыбора.НайтиПоЗначению(ТекЗначениеБазис)=Неопределено Тогда
		
		БазовоеЗначениеИзмерения=ТекЗначениеБазис;
		
	Иначе
		
		БазовоеЗначениеИзмерения=Неопределено;
		
	КонецЕсли;
					
КонецПроцедуры // ОбновитьСписокБазис()

Процедура ОбновитьСписокБазисСервер()
	
	Элементы.БазовоеЗначениеИзмерения.СписокВыбора.Очистить();
	
	ТекЗначениеБазис=Объект.БазовоеЗначениеИзмерения;
		
	СтруктураДанныхФормы=Новый Структура;
			
	СтруктураДанныхФормы.Вставить("РабочийОбъектАдрес",РабочийОбъектАдрес);
	СтруктураДанныхФормы.Вставить("ГруппировкаБазис",ГруппировкаБазис);
	СтруктураДанныхФормы.Вставить("ОрганизацияОтбор",ОрганизацияОтбор);	
	СтруктураДанныхФормы.Вставить("ПериодОтчетаОтбор",ПериодОтчетаОтбор);
    СтруктураДанныхФормы.Вставить("СценарийОтбор",СценарийОтбор);
	
	Для Индекс=1 По 5 Цикл
		
		СтруктураДанныхФормы.Вставить("Аналитика"+Индекс+"Отбор",ЭтаФорма["Аналитика"+Индекс+"Отбор"]);
		
	КонецЦикла;
	
	ТекСписокБазис=СоздатьСписокБазис(СтруктураДанныхФормы);
	
	Для Каждого Элемент ИЗ ТекСписокБазис Цикл
		
		Элементы.БазовоеЗначениеИзмерения.СписокВыбора.Добавить(Элемент.Значение,Элемент.Представление);
		
	КонецЦикла;
				
	Если Не Элементы.БазовоеЗначениеИзмерения.СписокВыбора.НайтиПоЗначению(ТекЗначениеБазис)=Неопределено Тогда
		
		Элементы.БазовоеЗначениеИзмерения.Значение=ТекЗначениеБазис;
		
	Иначе
		
		БазовоеЗначениеИзмерения=Неопределено;
		
	КонецЕсли;
					
КонецПроцедуры // ОбновитьСписокБазис()
 
&НаСервере
Функция СоздатьСписокБазис(СтруктураДанныхФормы)
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	Если СтруктураДанныхФормы.Свойство("Таб_ГруппировкиСтроки") Тогда
		ОбновитьТаблицыГрупп(СтруктураДанныхФормы);
	КонецЕсли;
	
	Если СтруктураДанныхФормы.ГруппировкаБазис="Колонка" Тогда
		
		Возврат РабочийОбъект.СписокКолонокБазис;
	
	ИначеЕсли РабочийОбъект.ТабОтчеты.Количество()=0 Тогда // Не заполняли таблицу отчетов для обработки
		
		СписокБазис=Новый СписокЗначений;
		Для Каждого ТекЗначение ИЗ СтруктураДанныхФормы[СтруктураДанныхФормы.ГруппировкаБазис+"Отбор"] Цикл
			СписокБазис.Добавить(ТекЗначение.Значение,ТекЗначение.Представление);
		КонецЦикла;
			
		Возврат СписокБазис;
				
	Иначе
		
		СписокБазис=Новый СписокЗначений;
		
		Для Каждого СтрОтчет ИЗ РабочийОбъект.ТабОтчеты Цикл
			
			Если РабочийОбъект.ВключатьВОбработку(СтрОтчет) И СписокБазис.НайтиПоЗначению(СтрОтчет[СтруктураДанныхФормы.ГруппировкаБазис])=Неопределено Тогда
				
				СписокБазис.Добавить(СтрОтчет[СтруктураДанныхФормы.ГруппировкаБазис]);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат СписокБазис;
		
	КонецЕсли;
		
КонецФункции // СоздатьСписокБазис()

&НаКлиенте
Процедура ОбновитьВычисляемыеКолонки()

	Для Каждого Строка ИЗ Объект.ГруппировкиВычисляемыеКолонки Цикл
		
		ТекЗначение=Строка.Отображать;
		
		Если Строка.Отображать И (НЕ ОпределитьДоступностьВычисляемойКолонки(Строка.Группировка)) Тогда
			
			Строка.Отображать=ложь;
			
		Иначе
			
			Строка.Отображать=ТекЗначение;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ОбновитьВычисляемыеКолонки()

&НаКлиенте
Процедура ОпределитьГруппировкуБазис()
	
	Если Объект.ГруппировкиКолонки.Количество()>0 Тогда
		
		ГруппировкаБазис=Объект.ГруппировкиКолонки[Объект.ГруппировкиКолонки.Количество()-1].Группировка;
		Элементы.БазовоеЗначениеИзмерения.Заголовок = НСтр("ru = 'Базовые данные ('") + Объект.ГруппировкиКолонки[Объект.ГруппировкиКолонки.Количество()-1].ПредставлениеГруппировки+"):";
		ОбновитьВычисляемыеКолонки();
		
	КонецЕсли;
	
Конецпроцедуры // ОпределитьГруппировкуБазис()

&НаКлиенте
Процедура ПриИзмененииБланкаОтчета()
	
	ИдентификаторФормы=ЭтаФорма.УникальныйИдентификатор;
	СформироватьТаблицуСтрок();
		
КонецПроцедуры // ПриИзмененииБланкаОтчета()

&НаСервере
Процедура СформироватьТаблицуСтрок()
	
	Если (НЕ ЗначениеЗаполнено(Объект.ВидОтчета)) И ЗначениеЗаполнено(Объект.БланкОтчета) Тогда
		
		Объект.ВидОтчета=Объект.БланкОтчета.Владелец;
		ПриИзмененииВидаОтчетаСервер(Ложь);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОтчета) Тогда
		
		Возврат;
		
	КонецЕсли;
		
	ОбъектОбработка=ПолучитьРабочийОбъект();	
	ОбъектОбработка.СформироватьТаблицуСтрок();
	ПоместитьРабочийОбъект(ОбъектОбработка);
			 		
КонецПроцедуры // СформироватьТаблицуСтрок() 

&НаСервере
Функция ПолучитьБланкПоУмолчанию(ОбъектОбработкаАдрес)
	
	ОбъектОбработка=ПолучитьРабочийОбъект();	
	Возврат ОбъектОбработка.ПолучитьБланкПоУмолчанию();
		
КонецФункции // ПолучитьБланкПоУмолчанию()

&НаСервере
Процедура ПолучитьТаблицуАналитикВидаОтчета(ВидОтчета)
	
	ТаблицаАналитикВидаОтчета=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(Объект.ВидОтчета);			
	ТаблицаАналитикВидаОтчета.Колонки.Добавить("ЕстьРазворот",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	мТаблицаАналитикВидаОтчета.Очистить();
	ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ТаблицаАналитикВидаОтчета,мТаблицаАналитикВидаОтчета);
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.мТаблицаАналитикВидаОтчета=ТаблицаАналитикВидаОтчета;
	РабочийОбъект.ВидОтчета=ВидОтчета;
	РабочийОбъект.РазделениеПоПроектам=РабочийОбъект.ВидОтчета.РазделениеПоПроектам;
	
	ПоместитьРабочийОбъект(РабочийОбъект);
	
КонецПроцедуры // ПолучитьТаблицуАналитикВидаОтчета()

&НаКлиенте
Функция НайтиСтрокуКоллекции(Коллекция,Значение,Колонка)
	
	МассивСтрок=Коллекция.НайтиСтроки(Новый Структура(Колонка,Значение));
	
	Если МассивСтрок.Количество()>0 Тогда
		Возврат МассивСтрок[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // НайтиСтрокуКоллекции() 

&НаКлиенте
Процедура ОбновитьАналитикиВидаОтчета()
	
	ПолучитьТаблицуАналитикВидаОтчета(Объект.ВидОтчета);
	
	СправочникиГруппировок=Новый Структура;
	СправочникиГруппировок.Вставить("Организация","Организации");
	СправочникиГруппировок.Вставить("Проект","Проекты");
	СправочникиГруппировок.Вставить("ПериодОтчета","Периоды");
	СправочникиГруппировок.Вставить("Сценарий","Сценарии");
	СправочникиГруппировок.Вставить("Колонка","КолонкиОтчетов");
	СправочникиГруппировок.Вставить("Строка","СтрокиОтчетов");
	
	Для Индекс=1 По 5 Цикл
		СправочникиГруппировок.Вставить("Аналитика"+Индекс,"СпрАналитика"+Индекс);
	КонецЦикла;
	
	Если мТаблицаАналитикВидаОтчета.Количество()=0 Тогда
		
		Элементы.ГруппаАналитикиВидаОтчета.Видимость=Ложь;
		
		Для Инд=1 по 5 Цикл
			
			Элементы["Аналитика"+Инд].Видимость=Ложь;
			
		КонецЦикла;
		
	Иначе
		
		Элементы.ГруппаАналитикиВидаОтчета.Видимость=Истина;
		
		Для Инд = 1 По ЧислоДопАналитик Цикл
			
			СтрАналитика = НайтиСтрокуКоллекции(мТаблицаАналитикВидаОтчета,"Аналитика"+Инд,"КодАналитики");
			
			ЕстьАналитика=(Не СтрАналитика=Неопределено);
			Элементы["ГруппаАналитика"+Инд].Видимость=ЕстьАналитика;
			Элементы["Аналитика"+Инд].Видимость=ЕстьАналитика;
			
			Если ЕстьАналитика Тогда
				
				Элементы["Аналитика"+Инд+"Отбор"].Заголовок=СтрАналитика.НаименованиеАналитики;			
				СправочникиГруппировок.Вставить("Аналитика"+Инд,СтрЗаменить(СтрАналитика.ТаблицаАналитики,"Справочник.",""));
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Удалим аналитики из группировок
	
	МассивКУдалению=Новый Массив;
	
	Для Каждого ТекСтрока ИЗ Объект.ГруппировкиСтроки Цикл
		Если СтрНайти(ТекСтрока.Группировка,"Аналитика")>0 Тогда
			МассивКУдалению.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка ИЗ  МассивКУдалению Цикл
		Объект.ГруппировкиСтроки.Удалить(Строка);
	КонецЦикла;
	
	МассивКУдалению.Очистить();
	
	Для Каждого ТекКолонка ИЗ Объект.ГруппировкиКолонки Цикл
		Если СтрНайти(ТекКолонка.Группировка,"Аналитика")>0 Тогда
			МассивКУдалению.Добавить(ТекКолонка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка ИЗ  МассивКУдалению Цикл
		Объект.ГруппировкиКолонки.Удалить(Строка);
	КонецЦикла;
	
	Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
		
		ДобавитьАналитикиВГруппировки(СтрАналитика)
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьАналитикиВидаОтчета()
 
&НаКлиенте
Процедура ТабЭкземплярыОтчетовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Элементы.ТабЭкземплярыОтчетов.ТекущиеДанные.Ссылка) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, "Выберите экземпляр отчета!");		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаПриИзменении(Элемент)
	
	ОбновитьСтрокуЭкземпляраОтчета(Элементы.ТабЭкземплярыОтчетов.ТекущиеДанные.ПолучитьИдентификатор());
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтрокуЭкземпляраОтчета(ТекущаяСтрока)
	
	ТекущиеДанные=ТабЭкземплярыОтчетов.НайтиПоИдентификатору(ТекущаяСтрока);	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные,ТекущиеДанные.Ссылка,"Организация,ПериодОтчета,Сценарий,Аналитика1,Аналитика2,Аналитика3,Аналитика4,Аналитика5,ВидОтчета,ОсновнаяВалюта");
	
КонецПроцедуры // ОбновитьСтрокуЭкземпляраОтчета()



&НаСервере
Процедура СсылкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	ФормаВыбора=Документы.НастраиваемыйОтчет.ПолучитьФормуВыбора(,Элемент);
	ФормаВыбора.Отбор.ОсновнаяВалюта.Установить(Объект.ОсновнаяВалюта);
	ФормаВыбора.Отбор.ВидОтчета.Установить(Объект.ВидОтчета);
	ФормаВыбора.РежимВыбора=Истина;
	ФормаВыбора.Открыть();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ЗаполнитьТаблицыГруппировок() Экспорт
	
	Объект.ГруппировкиСтроки.Очистить();
	Объект.ГруппировкиКолонки.Очистить();
	
	НоваяСтрока=Объект.ГруппировкиСтроки.Добавить();
	НоваяСтрока.ПредставлениеГруппировки="Период отчета";
	НоваяСтрока.Группировка="ПериодОтчета";
	
	НоваяСтрока=Объект.ГруппировкиСтроки.Добавить();
	НоваяСтрока.ПредставлениеГруппировки="Сценарий";
	НоваяСтрока.Группировка="Сценарий";
	
	НоваяСтрока=Объект.ГруппировкиСтроки.Добавить();
	НоваяСтрока.ПредставлениеГруппировки="Строки отчета";
	НоваяСтрока.Группировка="Строка";
	
	НоваяСтрока=Объект.ГруппировкиКолонки.Добавить();
	НоваяСтрока.ПредставлениеГруппировки="Колонки отчета";
	НоваяСтрока.Группировка="Колонка";
	
	НоваяСтрока=Объект.ГруппировкиКолонки.Добавить();
	НоваяСтрока.ПредставлениеГруппировки="Организация";
	НоваяСтрока.Группировка="Организация";
	
КонецПроцедуры //

&НаКлиенте
Процедура ЗаполнитьТаблицуВычисляемыхГруппировок()
	
	Объект.ГруппировкиВычисляемыеКолонки.Очистить();
	
	НоваяСтрока=Объект.ГруппировкиВычисляемыеКолонки.Добавить();
	НоваяСтрока.Группировка="ОтклонениеАбс";
	НоваяСтрока.ПредставлениеГруппировки="Отклонение (абс.)";
	
	НоваяСтрока=Объект.ГруппировкиВычисляемыеКолонки.Добавить();
	НоваяСтрока.Группировка="ОтклонениеОтн";
	НоваяСтрока.ПредставлениеГруппировки="Отклонение (%)";
	
	НоваяСтрока=Объект.ГруппировкиВычисляемыеКолонки.Добавить();
	НоваяСтрока.Группировка="ДоляВИтогеПоГруппировке";
	НоваяСтрока.ПредставлениеГруппировки="Доля в общем итоге по группировке";
	
	НоваяСтрока=Объект.ГруппировкиВычисляемыеКолонки.Добавить();
	НоваяСтрока.Группировка="ДоляВИтогеПоПериметру";
	НоваяСтрока.ПредставлениеГруппировки="Доля в консолидированном значении";	
	
КонецПроцедуры // ЗаполнитьТаблицуВычисляемыхГруппировок()


&НаКлиенте
Процедура ТекущийПериодПериодичностьПриИзменении(Элемент)
	
	ОпределитьТекущийПериод();
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьТекущийПериод()
	
	ТекущийПериодДляОтбора=ОбщегоНазначенияУХ.ОпределитьПериодПоДате(ТекущаяДата(),ТекущийПериодПериодичность);
	ОбновитьСпискиГраниц();
		
КонецПроцедуры // ОпределитьТекущийПериод()

&НаКлиенте
Процедура ОбновитьСпискиГраниц()
	
	МассивВышестоящихПериодов=ОбщегоНазначенияУХ.ОпределитьМассивВышестоящихПериодов(ТекущийПериодПериодичность);
	
	СписокДо=Новый СписокЗначений;
	СписокПосле=Новый СписокЗначений;
	Элементы.ИнтервалДо.СписокВыбора.Очистить();
	Элементы.ИнтервалПосле.СписокВыбора.Очистить();
	
	СтруктураТекст=ОбщегоНазначенияУХ.ТекстНачалаКонцаПериода(ТекущийПериодПериодичность,ТекущаяДата());
	
	Если СтруктураТекст<>Неопределено Тогда
		
		СписокДо.Добавить("Текущий_"+ТекущийПериодПериодичность,СтруктураТекст.ТекстТекущийПериод);
		СписокПосле.Добавить("Текущий_"+ТекущийПериодПериодичность,СтруктураТекст.ТекстТекущийПериод);
		
	КонецЕсли;
	
	СтруктураТекст=ОбщегоНазначенияУХ.ТекстНачалаКонцаПериода(ТекущийПериодПериодичность,ОбщегоНазначенияУХ.ДобавитьИнтервал(ТекущаяДата(),ТекущийПериодПериодичность,-1));	
	
	Если СтруктураТекст<>Неопределено Тогда
		
		СписокДо.Добавить("Предыдущий_"+ТекущийПериодПериодичность,СтруктураТекст.ТекстПредыдущийПериод);
		
	КонецЕсли;
	
	СтруктураТекст=ОбщегоНазначенияУХ.ТекстНачалаКонцаПериода(ТекущийПериодПериодичность,ОбщегоНазначенияУХ.ДобавитьИнтервал(ТекущаяДата(),ТекущийПериодПериодичность,1));	
	
	Если СтруктураТекст<>Неопределено Тогда
		
		СписокПосле.Добавить("Следующий_"+ТекущийПериодПериодичность,СтруктураТекст.ТекстСледующийПериод);
		СписокДо.Добавить("Следующий_"+ТекущийПериодПериодичность,СтруктураТекст.ТекстСледующийПериод);
		
	КонецЕсли;
	
	Для Каждого ВышестоящийПериод ИЗ МассивВышестоящихПериодов Цикл
		
		СтруктураТекст=ОбщегоНазначенияУХ.ТекстНачалаКонцаПериода(ВышестоящийПериод,ТекущаяДата());
		
		Если СтруктураТекст=Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СписокДо.Добавить("Начало_"+ОбщегоНазначенияУХ.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВышестоящийПериод),СтруктураТекст.ТекстНачалаПериода);
		СписокПосле.Добавить("Окончание_"+ОбщегоНазначенияУХ.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВышестоящийПериод),СтруктураТекст.ТекстОкончанияПериода);
		
	КонецЦикла;
	
	СписокПосле.Добавить("Отступ", НСтр("ru = 'Указать отступ вручную'"));
	
	Для Каждого Элемент ИЗ СписокДо Цикл
		
		Элементы.ИнтервалДо.СписокВыбора.Добавить(Элемент.Значение,Элемент.Представление);
		
	КонецЦикла;
	
	Для Каждого Элемент ИЗ СписокПосле Цикл
		
		Элементы.ИнтервалПосле.СписокВыбора.Добавить(Элемент.Значение,Элемент.Представление);
		
	КонецЦикла;
	
	Если СписокДо.Количество()>0 Тогда
		ИнтервалДо=СписокДо[СписокДо.Количество()-1].Значение;
	КонецЕсли;
	
	ИнтервалПосле=СписокПосле[СписокПосле.Количество()-2].Значение;
		
КонецПроцедуры // ОбновитьСпискиГраниц()

&НаКлиенте
Процедура ИнтервалДоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ИнтервалДо=ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалПослеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ИнтервалПосле=ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСравненияСценарийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
    ВидСравненияСценарий=ВыбранноеЗначение;
		
КонецПроцедуры

&НаКлиенте
Процедура ВидСравненияОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ВидСравненияОрганизация=ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура БланкОтчетаПриИзменении(Элемент)
	
	ПриИзмененииБланкаОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоЭкземплярамПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийОтборПриИзменении(Элемент)
	
	Если ГруппировкаБазис="Сценарий" И ЕстьВычисляемыеКолонки() Тогда
		ОбновитьСписокБазис();
	КонецЕсли;
	
	ОбновитьСписокДоступныхПериодов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСравненияПериодПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаОтборПриИзменении(Элемент)
	
	Если ГруппировкаБазис="ПериодОтчета" И ЕстьВычисляемыеКолонки() Тогда
		ОбновитьСписокБазис();
	КонецЕсли;
	
	ОбновитьСписокДоступныхОрганизаций();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСравненияОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииВидаСравненияОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьСтрокуВНачалоКонецТЗ(ТЗ,СтрокаТЗ,Направление)
	
	ТекущийИндекс=ТЗ.Индекс(СтрокаТЗ);
	
	Если Направление=-1 Тогда
		
		ТЗ.Сдвинуть(СтрокаТЗ,ТекущийИндекс*(-1));
		
	Иначе
		
		Если ТекущийИндекс+1=ТЗ.Количество() Тогда
			Возврат;
		КонецЕсли;
		
		ТЗ.Сдвинуть(СтрокаТЗ,ТЗ.Количество()-(ТекущийИндекс+1));
		
	КонецЕсли;
		
		
КонецПроцедуры // ПереместитьСтрокуВНачалоКонецТЗ

&НаКлиенте
Процедура ПриИзмененииВидаСравненияОрганизации()
		
	ОтборПоПериметру = Ложь;
		
	ОбновитьВычисляемыеКолонки();
	УстановитьВидимость();
	ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры // ПриИзмененииВидаСравненияОрганизации()

&НаКлиенте
Процедура КоманднаяПанельКолонкиПереместитьВниз(Команда)
	
	ГруппировкиКолонки=Объект.ГруппировкиКолонки;
	ТекСтрока=ГруппировкиКолонки.Индекс(Элементы.ГруппировкиКолонки.ТекущиеДанные);
	
	Если Не ТекСтрока=(ГруппировкиКолонки.Количество()-1) Тогда
		
		ГруппировкиКолонки.Сдвинуть(ТекСтрока,1);
		
		ПриИзмененииПорядкаГруппировок();
		
		Если ОбновлятьПриИзмененииГруппировок Тогда
			ОбновитьДанныеФормыБезОбъекта();
			РазвернутьСтрокиДерева();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАналитикиВГруппировки(СтрАналитика=Неопределено,КодАналитики="")
	
	Если СтрАналитика=Неопределено Тогда
		СтрАналитика= НайтиСтрокуКоллекции(мТаблицаАналитикВидаОтчета,КодАналитики,"КодАналитики");
		Если СтрАналитика=Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтаФорма[СтрАналитика.КодАналитики+"Отбор"].Количество()>0 Тогда
		
		Если НайтиСтрокуКоллекции(Объект.ГруппировкиСтроки,СтрАналитика.КодАналитики,"Группировка")=Неопределено Тогда
			
			НоваяСтрока=Объект.ГруппировкиСтроки.Добавить();
			НоваяСтрока.ПредставлениеГруппировки=СтрАналитика.НаименованиеАналитики;
			НоваяСтрока.Группировка=СтрАналитика.КодАналитики;
			
		КонецЕсли;
		
	Иначе // Удалим аналитику из группировок
		
		СтрГруппировка=НайтиСтрокуКоллекции(Объект.ГруппировкиСтроки,СтрАналитика.КодАналитики,"Группировка");
		Если Не СтрГруппировка=Неопределено Тогда
			Объект.ГруппировкиСтроки.Удалить(СтрГруппировка);
		Иначе СтрГруппировка=НайтиСтрокуКоллекции(Объект.ГруппировкиКолонки,СтрАналитика.КодАналитики,"Группировка");
			Если Не СтрГруппировка=Неопределено Тогда
				Объект.ГруппировкиКолонки.Удалить(СтрГруппировка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ГруппировкаБазис=Объект.ГруппировкиКолонки[Объект.ГруппировкиКолонки.Количество()-1].Группировка;
	Если ГруппировкаБазис=СтрЗаменить(СтрАналитика.КодАналитики,"Отбор","") И ЕстьВычисляемыеКолонки() Тогда
		ОбновитьСписокБазис();
	КонецЕсли;
	
КонецПроцедуры //

&НаКлиенте
Процедура Аналитика1ОтборПриИзменении(Элемент)
	
	ДобавитьАналитикиВГруппировки(,СтрЗаменить(Элемент.Имя,"Отбор",""));
	
КонецПроцедуры

&НаКлиенте
Процедура Аналитика2ОтборПриИзменении(Элемент)
	
	ДобавитьАналитикиВГруппировки(,СтрЗаменить(Элемент.Имя,"Отбор",""));
	
КонецПроцедуры

&НаКлиенте
Процедура Аналитика3ОтборПриИзменении(Элемент)
	
	ДобавитьАналитикиВГруппировки(,СтрЗаменить(Элемент.Имя,"Отбор",""));
	
КонецПроцедуры

&НаКлиенте
Процедура Аналитика4ОтборПриИзменении(Элемент)
	
	ДобавитьАналитикиВГруппировки(,СтрЗаменить(Элемент.Имя,"Отбор",""));
	
КонецПроцедуры

&НаКлиенте
Процедура Аналитика5ОтборПриИзменении(Элемент)
	
	ДобавитьАналитикиВГруппировки(,СтрЗаменить(Элемент.Имя,"Отбор",""));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСписокАналитик(Элемент)
	
	СтрАналитика=НайтиСтрокуКоллекции(мТаблицаАналитикВидаОтчета,СтрЗаменить(Элемент.Имя,"Отбор",""),"КодАналитики");
		
	Если Не СтрАналитика=Неопределено Тогда 
		
		Если СтрНайти(СтрАналитика.ТаблицаАналитики,"Справочник.")>0 Тогда
			
			ОткрытьФорму("ОбщаяФорма.ФормаПодбораЭлементовДерево",Новый Структура("ИмяСправочника,ИмяЭлементаФормы,СписокЭлементов",СтрЗаменить(СтрАналитика.ТаблицаАналитики,"Справочник.",""),Элемент.Имя,ЭтаФорма[Элемент.Имя]),Элемент);
			
		Иначе
			
			ПараметрыФормы = Новый Структура("ИмяСправочника, Владелец, ТекСписокЗначений", СтрАналитика.ТаблицаАналитики,СтрАналитика.ВидАналитики, ЭтаФорма[Элемент.Имя]);
			ОткрытьФорму("ОбщаяФорма.ФормаРедактированияСпискаЗначений_Управляемая", ПараметрыФормы, Элемент);		
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыбратьСписокАналитик()

&НаКлиенте
Процедура Аналитика1ОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ВыбратьСписокАналитик(Элемент);
	ДобавитьАналитикиВГруппировки(,СтрЗаменить(Элемент.Имя,"Отбор",""));
	
КонецПроцедуры

&НаКлиенте
Процедура Аналитика2ОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ВыбратьСписокАналитик(Элемент);
	ДобавитьАналитикиВГруппировки(,СтрЗаменить(Элемент.Имя,"Отбор",""));
	
КонецПроцедуры

&НаКлиенте
Процедура Аналитика3ОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ВыбратьСписокАналитик(Элемент);
	ДобавитьАналитикиВГруппировки(,СтрЗаменить(Элемент.Имя,"Отбор",""));
	
КонецПроцедуры

&НаКлиенте
Процедура Аналитика4ОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ВыбратьСписокАналитик(Элемент);
	ДобавитьАналитикиВГруппировки(,СтрЗаменить(Элемент.Имя,"Отбор",""));
	
КонецПроцедуры

&НаКлиенте
Процедура Аналитика5ОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ВыбратьСписокАналитик(Элемент);
	ДобавитьАналитикиВГруппировки(,СтрЗаменить(Элемент.Имя,"Отбор",""));
	
КонецПроцедуры

&НаКлиенте 
Функция ЕстьВычисляемыеКолонки() Экспорт
	
	МассивВычисляемых=Объект.ГруппировкиВычисляемыеКолонки.НайтиСтроки(Новый Структура("Отображать",Истина));
	Возврат МассивВычисляемых.Количество()>0;
		
КонецФункции // ЕстьВычисляемыеКолонки()

&НаСервере
Процедура ОбновитьТаблицыГрупп(СтруктураДанныхФормы) 
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	РабочийОбъект.РаспаковатьТаблицуЗначений("ГруппировкиСтроки",СтруктураДанныхФормы.Таб_ГруппировкиСтроки);
	РабочийОбъект.РаспаковатьТаблицуЗначений("ГруппировкиКолонки",СтруктураДанныхФормы.Таб_ГруппировкиКолонки);
		
	РабочийОбъект.ПодготовитьТаблицыГрупп();	
	ПоместитьРабочийОбъект(РабочийОбъект);
	
КонецПроцедуры // ОбновитьТаблицыГрупп(); 

&НаКлиенте 
Процедура ПриИзмененииПорядкаГруппировок()
	
	СтруктураДанных=Новый Структура;
	
	ТабГруппировкиСтроки=Новый Массив;
	Для Каждого Строка ИЗ Объект.ГруппировкиСтроки Цикл
		
		СтруктураСтрока=Новый Структура;
		СтруктураСтрока.Вставить("Группировка",Строка.Группировка);
		СтруктураСтрока.Вставить("ПредставлениеГруппировки",Строка.ПредставлениеГруппировки);
		
		ТабГруппировкиСтроки.Добавить(СтруктураСтрока);
		
	КонецЦикла;
	
	СтруктураДанных.Вставить("Таб_ГруппировкиСтроки",ТабГруппировкиСтроки);
	
	ТабГруппировкиКолонки=Новый Массив;
	Для Каждого Колонка ИЗ Объект.ГруппировкиКолонки Цикл
		
		СтруктураСтрока=Новый Структура;
		СтруктураСтрока.Вставить("Группировка",Колонка.Группировка);
		СтруктураСтрока.Вставить("ПредставлениеГруппировки",Колонка.ПредставлениеГруппировки);
		
		ТабГруппировкиКолонки.Добавить(СтруктураСтрока);
		
	КонецЦикла;
	
	СтруктураДанных.Вставить("Таб_ГруппировкиКолонки",ТабГруппировкиКолонки);
	
	Если ЕстьВычисляемыеКолонки() Тогда
		
		ОпределитьГруппировкуБазис();
		ОбновитьСписокБазис(СтруктураДанных);
		
	Иначе
		
		СтруктураДанных.Вставить("РабочийОбъектАдрес",РабочийОбъектАдрес);
		СтруктураДанных.Вставить("ИдентификаторФормы",ЭтаФорма.УникальныйИдентификатор);
		
		ОбновитьТаблицыГрупп(СтруктураДанных);
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииПорядкаГруппировок()

&НаКлиенте
Процедура СтрокиВКолонки(Команда)
	
	ТекСтрока=Элементы.ГруппировкиСтроки.ТекущиеДанные;
	
	Если НЕ (ТекСтрока=Неопределено ИЛИ ТекСтрока.Группировка="Строка") Тогда
		
		НоваяСтрока=Объект.ГруппировкиКолонки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
		Объект.ГруппировкиСтроки.Удалить(ТекСтрока);
		
	КонецЕсли;
	
	ПриИзмененииПорядкаГруппировок();
		
	Если ОбновлятьПриИзмененииГруппировок Тогда
		ОбновитьДанныеФормыБезОбъекта();
		РазвернутьСтрокиДерева();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеФормыБезОбъекта()
	
	ОбновитьДанныеФормыСервер();
		
КонецПроцедуры
 
&НаКлиенте
Процедура КолонкиВСтроки(Команда)
	
	ТекСтрока=Элементы.ГруппировкиКолонки.ТекущиеДанные;
	
	Если НЕ (ТекСтрока=Неопределено ИЛИ ТекСтрока.Группировка="Колонка") Тогда
		
		НоваяСтрока=Объект.ГруппировкиСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
		Объект.ГруппировкиКолонки.Удалить(ТекСтрока);
		
	КонецЕсли;
		
	ПриИзмененииПорядкаГруппировок();
	
	Если ОбновлятьПриИзмененииГруппировок Тогда
		ОбновитьДанныеФормыБезОбъекта();
		РазвернутьСтрокиДерева();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокиВКолонкиВсе(Команда)
	
	МассивКУдалению=Новый Массив;
	
	Для Каждого Строка Из Объект.ГруппировкиСтроки Цикл
		
		Если НЕ Строка.Группировка="Строка" Тогда
			НоваяСтрока=Объект.ГруппировкиКолонки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			МассивКУдалению.Добавить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка ИЗ МассивКУдалению Цикл
		Объект.ГруппировкиСтроки.Удалить(Строка);
	КонецЦикла;
		
	ПриИзмененииПорядкаГруппировок();
	
	Если ОбновлятьПриИзмененииГруппировок Тогда
		ОбновитьДанныеФормыБезОбъекта();
		РазвернутьСтрокиДерева();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КолонкиВСтрокиВсе(Команда)
	
	МассивКУдалению=Новый Массив;
	
	Для Каждого Колонка Из Объект.ГруппировкиКолонки Цикл
		
		Если НЕ Колонка.Группировка="Колонка" Тогда
			НоваяСтрока=Объект.ГруппировкиСтроки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Колонка);
			МассивКУдалению.Добавить(Колонка);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Колонка ИЗ МассивКУдалению Цикл
		Объект.ГруппировкиКолонки.Удалить(Колонка);
	КонецЦикла;
	
	ПриИзмененииПорядкаГруппировок();
	
	Если ОбновлятьПриИзмененииГруппировок Тогда
		ОбновитьДанныеФормыБезОбъекта();
		РазвернутьСтрокиДерева();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИнициализацияОтчетовФорма()
	
	  ИнициализироватьОтчетыСервер();
	  
КонецПроцедуры // ИнициализацияОтчетовФорма() 

&НаКлиенте
Процедура ИнициализацияОтчетов(Команда)
	
	Объект.СоздаватьЭкземплярыОтчетов=Ложь;
	ИнициализацияОтчетовФорма();
	РазвернутьСтрокиДерева();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокДоступныхПериодов()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	УправлениеПериодомСценария.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ УОП
	|ИЗ
	|	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	|ГДЕ
	|	(УправлениеПериодомСценария.ПериодСценарияОкончание = ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)
	|			ИЛИ УправлениеПериодомСценария.ПериодСценарияОкончание = УправлениеПериодомСценария.ПериодСценария)
	|	И УправлениеПериодомСценария.Сценарий В(&Сценарии)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатусыПериодовСценариев.Периоды КАК Периоды,
	|	СтатусыПериодовСценариев.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	|ПОМЕСТИТЬ СтатусыПериодов
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|ГДЕ
	|	СтатусыПериодовСценариев.Сценарии В(&Сценарии)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	УправлениеПериодомСценария
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатусыПериодов.Периоды КАК Периоды
	|ИЗ
	|	СтатусыПериодов КАК СтатусыПериодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УОП КАК УОП
	|		ПО СтатусыПериодов.УправлениеПериодомСценария = УОП.Ссылка";
	
	Запрос.УстановитьПараметр("Сценарии",СценарийОтбор);	
	СписокДоступныхПериодов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Периоды"));
	
	Для Каждого Элемент ИЗ ПериодОтчетаОтбор Цикл
		
		Если СписокДоступныхПериодов.НайтиПоЗначению(Элемент.Значение)=Неопределено Тогда
			
			ПериодОтчетаОтбор.Удалить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьСписокДоступныхОрганизаций();
		
КонецПроцедуры // ОбновитьСписокПериодов()

&НаСервере
Процедура ОбновитьСписокДоступныхОрганизаций()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	СтатусыПериодовСценариев.Организации КАК Организации
	             |ИЗ
	             |	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	             |ГДЕ
	             |	СтатусыПериодовСценариев.Сценарии В(&Сценарии)
	             |	И СтатусыПериодовСценариев.Периоды В(&Периоды)";
	
	Запрос.УстановитьПараметр("Сценарии",СценарийОтбор);
	Запрос.УстановитьПараметр("Периоды",ПериодОтчетаОтбор);
	
	СписокДоступныхОрганизаций.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организации"));
	
	Для Каждого Элемент ИЗ ОрганизацияОтбор Цикл
		
		Если СписокДоступныхОрганизаций.НайтиПоЗначению(Элемент.Значение)=Неопределено Тогда
			
			ОрганизацияОтбор.Удалить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры // ОбновитьСписокПериодов()

&НаСервере
Процедура ЗаписатьЭкземплярыОтчетов(СтруктураДанныхФормы,ЗаписыватьТекущий=Ложь)
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	Если Не СтруктураДанныхФормы.Свойство("ТолькоОбновление") Тогда
		
		Для Каждого СтрОтчет ИЗ РабочийОбъект.ТабОтчеты Цикл
			
			Если СтрОтчет.ОтчетИзменен И (НЕ СтрОтчет.ЭкземплярОтчета=СтруктураДанныхФормы.ЭкземплярОтчета ИЛИ ЗаписыватьТекущий) Тогда
				
				Попытка
					
					РабочийОбъект.ПолучитьДокументОбъект(СтрОтчет);
					ОтчетОбъект=СтрОтчет.ОтчетОбъект;
					
					ОтчетОбъект.ИзмененияВДиалоге=Истина;
					ОтчетОбъект.Записать();
					Отчетобъект.Разблокировать();
					
					СтрОтчет.ОтчетИзменен=Ложь;
					СтрОтчет.ОтчетИнициализирован=Ложь;		
					СтрОтчет.ОтчетОбъект.ИзмененияВДиалоге=Ложь;
					
				Исключение
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПоместитьРабочийОбъект(РабочийОбъект);
	
КонецПроцедуры // ЗаписатьЭкземплярыОтчетов


// Заполняет отчет и обновляет основной макет.
//
&НаСервере
Процедура ЗаполнитьИОтобразитьВМакете(СтруктураДанныхФормы,ИмяРежима)
	
	ЗаписатьЭкземплярыОтчетов(СтруктураДанныхФормы);
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	ТекЭкземплярОтчета=РабочийОбъект.ТабОтчеты.Найти(СтруктураДанныхФормы.ЭкземплярОтчета,"ЭкземплярОтчета");
	
	Если ТекЭкземплярОтчета=Неопределено 
		ИЛИ (НЕ РабочийОбъект.ПроверитьИнициализациюОтчета(ТекЭкземплярОтчета)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РабочийОбъект.ПолучитьДокументОбъект(ТекЭкземплярОтчета);
	
	Если ИмяРежима="АвтоматическиСвернувПоПериоду" Тогда
		ТекЭкземплярОтчета.ОтчетОбъект.ПериодичностьСвертывания=СтруктураДанныхФормы.ПериодичностьСвертывания;
	КонецЕсли;
		
	Режим=Перечисления.СпособыФормированияОтчетов[ИмяРежима];
	
	ТекЭкземплярОтчета.ОтчетОбъект.ТихийРежим=Истина;
	ТекЭкземплярОтчета.ОтчетОбъект.ЗаполнитьОтчет(Режим);
	
	ТекЭкземплярОтчета.ОтчетИзменен = Истина;
	
	МодульСогласованияДокументовУХ.УстановитьСостояниеСогласованияПослеЗаполнения(ТекЭкземплярОтчета.ОтчетОбъект);
	
	Если Не ТекЭкземплярОтчета.ОтчетОбъект.ОсновнаяВалюта=СтруктураДанныхФормы.ВалютаОтображения Тогда
		
		МассивОтчетов=Новый Массив;
		МассивОтчетов.Добавить(ТекЭкземплярОтчета);
		РабочийОбъект.ПересчитатьРабочиеТаблицыВВалютуОтображения(МассивОтчетов,Ложь);
		
	КонецЕсли;
	
	ПоместитьРабочийОбъект(РабочийОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьЗаполнения(РабочийОбъектАдрес,ЭкземплярОтчета,РежимЗаполнения)
	
	ТекстОшибки="";
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	ТекЭкземплярОтчета=РабочийОбъект.ТабОтчеты.Найти(ЭкземплярОтчета,"ЭкземплярОтчета");
	
	Если НЕ РабочийОбъект.ПроверитьИнициализациюОтчета(ТекЭкземплярОтчета) Тогда
		
		Возврат "Не удалось инициализировать экземпляр отчета для заполнения";
		
	КонецЕсли;
	
	РабочийОбъект.ПолучитьДокументОбъект(ТекЭкземплярОтчета);
	
	ОтчетОбъект=ТекЭкземплярОтчета.ОтчетОбъект;
	
	Если РежимЗаполнения="АвтоматическиСвернувПоАналитикам" Тогда
		
		ЕстьПустыеАналитикиОтчета = Ложь;
		Для Инд = 1 По 5 Цикл
			Если ЗначениеЗаполнено(ОтчетОбъект.ВидОтчета["ВидАналитики" + Инд]) И НЕ ЗначениеЗаполнено(ОтчетОбъект["Аналитика" + Инд]) Тогда
				ЕстьПустыеАналитикиОтчета = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьПустыеАналитикиОтчета Тогда
			
			Возврат "Заполнение по аналитикам отчетов допустимо только в случае, когда одна из таких аналитик не задана!";
			
		КонецЕсли;
		
	ИначеЕсли РежимЗаполнения="АвтоматическиКонсолидация" Тогда
		
		Если ОтчетОбъект.Организация.ТипОрганизации <> Перечисления.ТипыОрганизационныхЕдиниц.Консолидирующая Тогда
			
			Возврат "Консолидация по периметру доступна только для консолидирующих организационных единиц.";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстОшибки;
		
КонецФункции // ЕстьПустыеАналитикиОтчета()

&НаКлиенте
Процедура ЗаполнитьАвтоматически(РежимЗаполнения)
	
	ТекстОшибки = ПроверитьВозможностьЗаполнения(РабочийОбъектАдрес,ТекДанныеЯчейки.ЭкземплярОтчета,РежимЗаполнения);
	
	Если Не ТекстОшибки="" Тогда
		ПоказатьПредупреждение(,ТекстОшибки, 20);
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхФормы=Новый Структура;
	СтруктураДанныхФормы.Вставить("РабочийОбъектАдрес",РабочийОбъектАдрес);
	СтруктураДанныхФормы.Вставить("ИдентификаторФормы",ЭтаФорма.УникальныйИдентификатор);
	СтруктураДанныхФормы.Вставить("ВалютаОтображения",ВалютаОтображения);
	СтруктураДанныхФормы.Вставить("ЭкземплярОтчета",ТекДанныеЯчейки.ЭкземплярОтчета);
	
	Если РежимЗаполнения="АвтоматическиСвернувПоПериоду" Тогда
		
		ЗначениеВыбора = Неопределено;
		ДопПараметры = Новый Структура("РежимЗаполнения, СтруктураДанныхФормы, ЗначениеВыбора", 
										РежимЗаполнения, СтруктураДанныхФормы, ЗначениеВыбора);
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ЗаполнитьАвтоматическиЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВводЗначения(ОписаниеОповещения, ЗначениеВыбора, 
							"Выберите периодичность отчетов-оснований", Тип("ПеречислениеСсылка.Периодичность"));
        Возврат;
		
	КонецЕсли;	
	
	ЗаполнитьАвтоматическиЗавершение(РежимЗаполнения, СтруктураДанныхФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнитьАвтоматическиЗавершение(Значение, ДополнительныеПараметры) Экспорт
    
    РежимЗаполнения = ДополнительныеПараметры.РежимЗаполнения;
    СтруктураДанныхФормы = ДополнительныеПараметры.СтруктураДанныхФормы;
    ЗначениеВыбора = ?(Значение = Неопределено, ДополнительныеПараметры.ЗначениеВыбора, Значение);
        
    РезультатВыбора = (Значение <> Неопределено);
    Если НЕ (РезультатВыбора И ЗначениеЗаполнено(ЗначениеВыбора)) Тогда
        Возврат;
    КонецЕсли;
    ПериодичностьСвертывания = ЗначениеВыбора;
    
    СтруктураДанныхФормы.Вставить("ПериодичностьСвертывания",ПериодичностьСвертывания);
        
    ЗаполнитьАвтоматическиЗавершение(РежимЗаполнения, СтруктураДанныхФормы);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоматическиЗавершение(РежимЗаполнения, СтруктураДанныхФормы)
    
    ЗаполнитьИОтобразитьВМакете(СтруктураДанныхФормы,РежимЗаполнения);	
    
    ОбновитьДанныеФормыБезОбъекта();
    РазвернутьСтрокиДерева();

КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыПоПравилуОбработки(Команда)
	
	ЗаполнитьАвтоматически("АвтоматическиПоПравилуОбработки");	
			
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыСвернутьПоАналитикамОтчетов(Команда)
	
	ЗаполнитьАвтоматически("АвтоматическиСвернувПоАналитикам");
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыСвернутьПоПериоду(Команда)
	
	ЗаполнитьАвтоматически("АвтоматическиСвернувПоПериоду");
		
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыКонсолидироватьПериметр(Команда)
	
	ЗаполнитьАвтоматически("АвтоматическиКонсолидация");
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыРедактирование(Команда)
	
	ТекПометка=Элементы.ДействияФормыРедактирование.Пометка;
	СтруктураДанныхФормы=Новый Структура;
	СтруктураДанныхФормы.Вставить("РабочийОбъектАдрес",РабочийОбъектАдрес);
	СтруктураДанныхФормы.Вставить("ИдентификаторФормы",ЭтаФорма.УникальныйИдентификатор);

	Если НЕ ТекПометка Тогда
		
		ТекДанныеЯчейки.Заблокирован = ПодготовитьОтчетДляРедактирования(ТекДанныеЯчейки.ЭкземплярОтчета,СтруктураДанныхФормы,ТекПометка)
				
	ИначеЕсли ЗаписатьЭкземплярОтчета(ТекДанныеЯчейки.ЭкземплярОтчета,СтруктураДанныхФормы) Тогда
		
		ТекПометка=НЕ ТекПометка;
		
	КонецЕсли;
	
	РабочийОбъектАдрес=СтруктураДанныхФормы.РабочийОбъектАдрес;
	Элементы.ДействияФормыРедактирование.Пометка=ТекПометка;
	
	//обновим признак редактирования у текущей ячейки
	Если НЕ ТекДанныеЯчейки.Заблокирован Тогда
		
		Если Объект.ВыводитьВДерево Тогда
			
			ДанныеРасшифровки = ПолучитьДанныеРасшифровкиДерево(Элементы.ТабДерево.ТекущийЭлемент);
			
		Иначе
			
			ДанныеРасшифровки = ПолучитьДанныеРасшифровкиБланк();
			
		КонецЕсли; 
		
		Если ДанныеРасшифровки.ТекДанныеЯчейки.Заблокирован Тогда
			ТекДанныеЯчейки.Заблокирован = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыВычислитьСейчас(Команда)
	
	ОбновитьДанныеФормыБезОбъекта();
	РазвернутьСтрокиДерева();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ДействияФормыОткрытьФормуОтчета(Команда)
	
	 ОткрытьФормуОтчета();	
	
 КонецПроцедуры
 
// Возвращает форму текущего экземпляра отчета с установленными специализированными переменными
//
&НаСервере
Функция ПолучитьФормуОтчета(ОтчетОбъект,Инициализировать=Истина)
	
	ФормаОтчета=ОтчетОбъект.ПолучитьФорму();
	ФормаОтчета.СозданаВФормеГрупповогоРедактирования=Инициализировать;
	
	Возврат ФормаОтчета;
	
КонецФункции // ПолучитьФормуОтчета()

&НаСервере
Функция ПолучитьАдресОбъекта(ЭкземплярОтчета,РабочийОбъектАдрес)
		
	РабочийОбъект=ПолучитьРабочийОбъект();
		
	ТекЭкземплярОтчета=РабочийОбъект.ТабОтчеты.Найти(ЭкземплярОтчета,"ЭкземплярОтчета");
	
	Если (ТекЭкземплярОтчета=Неопределено) ИЛИ  
		(НЕ РабочийОбъект.ПроверитьИнициализациюОтчета(ТекЭкземплярОтчета)) Тогда
		
		Возврат "";
		
	Иначе
		
		РабочийОбъект.ПолучитьДокументОбъект(ТекЭкземплярОтчета);
		Возврат ПоместитьВоВременноеХранилище(ТекЭкземплярОтчета.ДанныеОбъекта, Новый УникальныйИдентификатор);
		
	КонецЕсли;
			
КонецФункции // ПолучитьАдресОбъекта()

&НаСервере
Функция ОбновитьДанныеОбъекта(ЭкземплярОтчета,АдресИзмененногоОбъекта,ФормаОбновлена)
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	ТекЭкземплярОтчета=РабочийОбъект.ТабОтчеты.Найти(ЭкземплярОтчета,"ЭкземплярОтчета");
	
	ТекЭкземплярОтчета.ДанныеОбъекта=ПолучитьИзВременногоХранилища(АдресИзмененногоОбъекта);
	
	РабочийОбъект.ПолучитьДокументОбъект(ТекЭкземплярОтчета);
	
    НомерОперацииНов=ТекЭкземплярОтчета.ОтчетОбъект.НомерТекущейОперации;
			
	Если Не ТекЭкземплярОтчета.ОтчетОбъект.ОсновнаяВалюта=РабочийОбъект.ВалютаОтображения Тогда
		
		МассивОтчетов=Новый Массив;
		МассивОтчетов.Добавить(ТекЭкземплярОтчета);
		РабочийОбъект.ПересчитатьРабочиеТаблицыВВалютуОтображения(МассивОтчетов,Ложь);
		
	КонецЕсли;
	
	НужноОбновитьФорму=ТекЭкземплярОтчета.ОтчетОбъект.ЛогИзмененийРаскрытийПоказателей.НайтиСтроки(Новый Структура("НомерОперации",НомерОперацииНов)).Количество()>0
	ИЛИ ТекЭкземплярОтчета.ОтчетОбъект.ЛогИзмененийПоказателей.НайтиСтроки(Новый Структура("НомерОперации",НомерОперацииНов)).Количество()>0;
	
	Если НужноОбновитьФорму Тогда
		
		ТекЭкземплярОтчета.ОтчетИзменен=Истина;		
		ОбновитьДанныеФормыСервер(РабочийОбъект);
		ФормаОбновлена=Истина;
		
		Возврат Новый Массив;
		
	Иначе
		
		РабочийОбъект.ЗапросДанные.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		РабочийОбъект.ЗапросДанныеРаскрытия.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		
		РабочийОбъект.ЗапросДанные.Текст="ВЫБРАТЬ * Поместить ТабПоказатели ИЗ &ТабПоказатели КАК ТабПоказатели
		|;
		|ВЫБРАТЬ * Поместить СтрокиОтчетов ИЗ &СтрокиОтчетов КАК СтрокиОтчетов";
		
		РабочийОбъект.ЗапросДанные.УстановитьПараметр("ТабПоказатели",РабочийОбъект.ТаблицыЗапросаДанные.ТабПоказатели);
		РабочийОбъект.ЗапросДанные.УстановитьПараметр("СтрокиОтчетов",РабочийОбъект.ТаблицыЗапросаДанные.СтрокиОтчетов);
		
		РабочийОбъект.ЗапросДанные.Выполнить();
		
		СтруктураДанных=Новый Структура;
		
		ОбновитьИтогиПоПоказателям(СтруктураДанных,РабочийОбъект,ТекЭкземплярОтчета);
		
		ПоместитьРабочийОбъект(РабочийОбъект);
		Возврат СтруктураДанных.МассивИзмененныхОбластей
		
	КонецЕсли;
	
КонецФункции // ОбновитьДанныеОбъекта() 
	
 
 &НаКлиенте
 Процедура ОткрытьФормуОтчета()
	  
	  АдресОбъекта=ПолучитьАдресОбъекта(ТекДанныеЯчейки.ЭкземплярОтчета,РабочийОбъектАдрес); 
	 
	 Если ПустаяСтрока(АдресОбъекта) Тогда
		 Возврат;
	 Конецесли;
	 
	 СтруктураПараметров=Новый Структура;
	 СтруктураПараметров.Вставить("АдресВременногоХранилищаОбъекта",АдресОбъекта);
	 СтруктураПараметров.Вставить("СозданаВФормеГрупповогоРедактирования",Истина);
	 СтруктураПараметров.Вставить("ВозможноРедактирование",Истина);
	 СтруктураПараметров.Вставить("ВалютаОтображения",ВалютаОтображения);
	 
	 СписокПоказателейДляВыделения=Новый СписокЗначений;
	 СписокПоказателейДляВыделения.Добавить(ТекДанныеЯчейки.Показатель);
	 
	 СтруктураПараметров.Вставить("СписокПоказателейДляВыделения",СписокПоказателейДляВыделения);
	 АдресИзмененногоОбъекта = Неопределено;

	 ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаДокументаУправляемая",СтруктураПараметров,,,,, Новый ОписаниеОповещения("ОткрытьФормуОтчетаЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ОткрытьФормуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
     
     АдресИзмененногоОбъекта=Результат;
     
     ФормаОбновлена=Ложь;
     
     Если АдресИзмененногоОбъекта=Неопределено Тогда // 
         
         Возврат;
         
     КонецЕсли;
     
     МассивИзмененныхОбластей=ОбновитьДанныеОбъекта(ТекДанныеЯчейки.ЭкземплярОтчета,АдресИзмененногоОбъекта,ФормаОбновлена);
     
     Если МассивИзмененныхОбластей.Количество()>0 Тогда
         
         Для Каждого ИзмененнаяЯчейка ИЗ МассивИзмененныхОбластей Цикл
             
             ТекСтрока=ОпределитьСтрокуПоАбсолютномуАдресу(ИзмененнаяЯчейка.АдресСтроки);
             
             ИмяЭлемента=СписокКолонокДерева[ИзмененнаяЯчейка.АдресКолонки-7].Значение;
             
             ТекСтрока[ИмяЭлемента]=ИзмененнаяЯчейка.Значение;
             
         КонецЦикла;
         
         Элементы.ТабДерево.Обновить();
         
     ИначеЕсли ФормаОбновлена Тогда
         
         РазвернутьСтрокиДерева();
         
     КонецЕсли;

КонецПроцедуры // ОткрытьФормуОтчета()
 
 &НаСервере
 Функция ИзменитьРеквизитДокумента(РабочийОбъектАдрес,ЭкземплярОтчета,ИмяРеквизита,ЗначениеРеквизита,УникальныйИдентификатор)
	 
	РабочийОбъект=ПолучитьРабочийОбъект();
	ТекЭкземплярОтчета=РабочийОбъект.ТабОтчеты.Найти(ЭкземплярОтчета,"ЭкземплярОтчета");
	
	Если НЕ РабочийОбъект.ПроверитьИнициализациюОтчета(ТекЭкземплярОтчета) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТекЭкземплярОтчета.ДанныеОбъекта.РеквизитыОбъекта.Свойство(ИмяРеквизита) Тогда
		ТекЭкземплярОтчета.ДанныеОбъекта.РеквизитыОбъекта[ИмяРеквизита]=ЗначениеРеквизита;
	КонецЕсли;
	
	Если ТекЭкземплярОтчета.ОтчетОбъект <> Неопределено Тогда
		ТекЭкземплярОтчета.ОтчетОбъект[ИмяРеквизита] = ЗначениеРеквизита;
	КонецЕсли;

	ТекЭкземплярОтчета.ОтчетИзменен=Истина;
	
    ПоместитьРабочийОбъект(РабочийОбъект);
	
	Возврат Истина
	 
КонецФункции // ИзменитьРеквизитДокумента 

&НаКлиенте
Процедура ДействияФормыЧтениеНеактуальныхЗаписей(Команда)
	
	ГЧ = Элементы.ДействияФормы.ПодчиненныеЭлементы.ЧтениеНеактуальныхЗаписей.Пометка;
	
	Если ИзменитьРеквизитДокумента(РабочийОбъектАдрес, ТекДанныеЯчейки.ЭкземплярОтчета, "ЧтениеНеактуальныхЗаписей", НЕ ГЧ, ЭтаФорма.УникальныйИдентификатор) Тогда
		
		Элементы.ДействияФормы.ПодчиненныеЭлементы.ЧтениеНеактуальныхЗаписей.Пометка = НЕ ГЧ;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыНеВноситьИзменения(Команда)
	
	НеВноситьИзменения=Элементы.ДействияФормы.ПодчиненныеЭлементы.НеВноситьИзменения.Пометка;
	
	Если ИзменитьРеквизитДокумента(РабочийОбъектАдрес,ТекДанныеЯчейки.ЭкземплярОтчета,"НеВноситьИзменения",НЕ НеВноситьИзменения,ЭтаФорма.УникальныйИдентификатор) Тогда
		
		Элементы.ДействияФормы.ПодчиненныеЭлементы.НеВноситьИзменения.Пометка=НЕ НеВноситьИзменения;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыВключитьРасширеннуюДиагностику(Команда)
	
	мРасширеннаяДиагностикаВключена=Элементы.ДействияФормы.ПодчиненныеЭлементы.ВключитьРасширеннуюДиагностику.Пометка;
	
	Если ИзменитьРеквизитДокумента(РабочийОбъектАдрес,ТекДанныеЯчейки.ЭкземплярОтчета,"мРасширеннаяДиагностикаВключена",НЕ мРасширеннаяДиагностикаВключена,ЭтаФорма.УникальныйИдентификатор) Тогда
		
		Элементы.ДействияФормы.ПодчиненныеЭлементы.ВключитьРасширеннуюДиагностику.Пометка=НЕ мРасширеннаяДиагностикаВключена;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтменитьИзменения(СтруктураДанныхФормы)
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	ТекЭкземплярОтчета=РабочийОбъект.ТабОтчеты.Найти(СтруктураДанныхФормы.ЭкземплярОтчета,"ЭкземплярОтчета");
	
	Если НЕ РабочийОбъект.ПроверитьИнициализациюОтчета(ТекЭкземплярОтчета) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РабочийОбъект.ПолучитьДокументОбъект(ТекЭкземплярОтчета);
	
	РабочийОбъект.ПолучитьИзмененныеПоказатели(ТекЭкземплярОтчета,-1);
	
	Если ТекЭкземплярОтчета.мИзмененныеПоказатели.Количество()>0 Тогда 
		
		РабочийОбъект.ЗапросДанные.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		РабочийОбъект.ЗапросДанныеРаскрытия.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		
		РабочийОбъект.ЗапросДанные.Текст="ВЫБРАТЬ * Поместить ТабПоказатели ИЗ &ТабПоказатели КАК ТабПоказатели
		|;
		|ВЫБРАТЬ * Поместить СтрокиОтчетов ИЗ &СтрокиОтчетов КАК СтрокиОтчетов";
		
		РабочийОбъект.ЗапросДанные.УстановитьПараметр("ТабПоказатели",РабочийОбъект.ТаблицыЗапросаДанные.ТабПоказатели);
		РабочийОбъект.ЗапросДанные.УстановитьПараметр("СтрокиОтчетов",РабочийОбъект.ТаблицыЗапросаДанные.СтрокиОтчетов);
		
		РабочийОбъект.ЗапросДанные.Выполнить();
		
		
		МассивОтчетов=Новый Массив;
		МассивОтчетов.Добавить(ТекЭкземплярОтчета);
		РабочийОбъект.ОбластьРучногоИзменения=Неопределено;
		
		РабочийОбъект.ОтобразитьДанныеОтчетов(МассивОтчетов,Истина);
		
		ОтчетОбъект=ТекЭкземплярОтчета.ОтчетОбъект;
		ОтчетОбъект.ОтменитьИзменения();
		
		Если Не ОтчетОбъект.ОсновнаяВалюта=СтруктураДанныхФормы.ВалютаОтображения Тогда
			РабочийОбъект.ПересчитатьИзмененныеПоказателиВВалютуОтображения(ТекЭкземплярОтчета);
		КонецЕсли;
		
		ТекЭкземплярОтчета.ОтчетИзменен=Истина;
				
		ПоместитьРабочийОбъект(РабочийОбъект);
		
		СтруктураДанныхФормы.Вставить("МассивИзмененныхОбластей",РабочийОбъект.МассивИзмененныхОбластей);
				
	КонецЕсли;
	
КонецПроцедуры // ОтменитьИзменения()

&НаСервере
Процедура ПовторитьИзменения(СтруктураДанныхФормы)
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	ТекЭкземплярОтчета=РабочийОбъект.ТабОтчеты.Найти(СтруктураДанныхФормы.ЭкземплярОтчета,"ЭкземплярОтчета");
	
	Если НЕ РабочийОбъект.ПроверитьИнициализациюОтчета(ТекЭкземплярОтчета) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РабочийОбъект.ПолучитьДокументОбъект(ТекЭкземплярОтчета);
	
	ОтчетОбъект=ТекЭкземплярОтчета.ОтчетОбъект;
	СтарыйНомерОперации=ОтчетОбъект.НомерТекущейОперации;
	ОтчетОбъект.ПовторитьИзменения();
	
	Если Не ОтчетОбъект.ОсновнаяВалюта=СтруктураДанныхФормы.ВалютаОтображения Тогда
		РабочийОбъект.ПересчитатьИзмененныеПоказателиВВалютуОтображения(ТекЭкземплярОтчета);
	КонецЕсли;
	
	Если ОтчетОбъект.НомерТекущейОперации>СтарыйНомерОперации Тогда
		
		ОбластьРучногоИзменения=Неопределено;
		РабочийОбъект.ЗапросДанные.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		РабочийОбъект.ЗапросДанныеРаскрытия.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		
		РабочийОбъект.ЗапросДанные.Текст="ВЫБРАТЬ * Поместить ТабПоказатели ИЗ &ТабПоказатели КАК ТабПоказатели
		|;
		|ВЫБРАТЬ * Поместить СтрокиОтчетов ИЗ &СтрокиОтчетов КАК СтрокиОтчетов";
		
		РабочийОбъект.ЗапросДанные.УстановитьПараметр("ТабПоказатели",РабочийОбъект.ТаблицыЗапросаДанные.ТабПоказатели);
		РабочийОбъект.ЗапросДанные.УстановитьПараметр("СтрокиОтчетов",РабочийОбъект.ТаблицыЗапросаДанные.СтрокиОтчетов);
		
		РабочийОбъект.ЗапросДанные.Выполнить();
		
		ОбновитьИтогиПоПоказателям(СтруктураДанныхФормы,РабочийОбъект,ТекЭкземплярОтчета);
		
		ТекЭкземплярОтчета.ОтчетИзменен=Истина;
		
		ПоместитьРабочийОбъект(РабочийОбъект);
		
	КонецЕсли;
			
КонецПроцедуры // ОтменитьИзменения()

&НаКлиенте
Процедура ДействияФормыОтменить(Команда)
	
	СтруктураДанныхФормы=Новый Структура;
	СтруктураДанныхФормы.Вставить("РабочийОбъектАдрес",РабочийОбъектАдрес);
	СтруктураДанныхФормы.Вставить("ЭкземплярОтчета",ТекДанныеЯчейки.ЭкземплярОтчета);
	СтруктураДанныхФормы.Вставить("ИдентификаторФормы",ЭтаФорма.УникальныйИдентификатор);
	СтруктураДанныхФормы.Вставить("ВалютаОтображения",ВалютаОтображения);
		
	ОтменитьИзменения(СтруктураДанныхФормы);
	
	Если СтруктураДанныхФормы.Свойство("МассивИзмененныхОбластей") Тогда
		
		Если Объект.ВыводитьВДерево Тогда
			
			РабочийОбъектАдрес=СтруктураДанныхФормы.РабочийОбъектАдрес;
			
			Для Каждого ИзмененнаяЯчейка ИЗ СтруктураДанныхФормы.МассивИзмененныхОбластей Цикл
				
				ТекСтрока=ОпределитьСтрокуПоАбсолютномуАдресу(ИзмененнаяЯчейка.АдресСтроки);
				
				ИмяЭлемента=СписокКолонокДерева[ИзмененнаяЯчейка.АдресКолонки-7].Значение;
				
				ТекСтрока[ИмяЭлемента]=ИзмененнаяЯчейка.Значение;
				
			КонецЦикла;
			
			Элементы.ТабДерево.Обновить();
			
		Иначе
			
			Для Каждого ДанныеОбласти ИЗ СтруктураДанныхФормы.МассивИзмененныхОбластей Цикл
				
				ИзмененнаяОбласть=ТабДок.Область(ДанныеОбласти.Верх,ДанныеОбласти.Лево,ДанныеОбласти.Верх,ДанныеОбласти.Лево);	
				ИзмененнаяОбласть.Значение=ДанныеОбласти.Значение;
								
			КонецЦикла;	
			
		КонецЕсли; 
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыПовторить(Команда)
	
	СтруктураДанныхФормы=Новый Структура;
	СтруктураДанныхФормы.Вставить("РабочийОбъектАдрес",РабочийОбъектАдрес);
	СтруктураДанныхФормы.Вставить("ЭкземплярОтчета",ТекДанныеЯчейки.ЭкземплярОтчета);
	СтруктураДанныхФормы.Вставить("ИдентификаторФормы",ЭтаФорма.УникальныйИдентификатор);
	СтруктураДанныхФормы.Вставить("ВалютаОтображения",ВалютаОтображения);
		
	ПовторитьИзменения(СтруктураДанныхФормы);
	
	Если СтруктураДанныхФормы.Свойство("МассивИзмененныхОбластей") Тогда
		
		Если Объект.ВыводитьВДерево Тогда
			
			РабочийОбъектАдрес=СтруктураДанныхФормы.РабочийОбъектАдрес;
			
			Для Каждого ИзмененнаяЯчейка ИЗ СтруктураДанныхФормы.МассивИзмененныхОбластей Цикл
				
				ТекСтрока=ОпределитьСтрокуПоАбсолютномуАдресу(ИзмененнаяЯчейка.АдресСтроки);
				
				ИмяЭлемента=СписокКолонокДерева[ИзмененнаяЯчейка.АдресКолонки-7].Значение;
				
				ТекСтрока[ИмяЭлемента]=ИзмененнаяЯчейка.Значение;
				
			КонецЦикла;
			
			Элементы.ТабДерево.Обновить();
			
		Иначе
			
			Для Каждого ДанныеОбласти ИЗ СтруктураДанныхФормы.МассивИзмененныхОбластей Цикл
				
				ИзмененнаяОбласть=ТабДок.Область(ДанныеОбласти.Верх,ДанныеОбласти.Лево,ДанныеОбласти.Верх,ДанныеОбласти.Лево);	
				ИзмененнаяОбласть.Значение=ДанныеОбласти.Значение;
				
			КонецЦикла;	
			
		КонецЕсли; 
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельРедактированиеДобавитьСтрокуРаскрытия(Команда)
	
	ОбработкаСтрокиРаскрытия("ВставкаСтрокиАналитики");
		
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельРедактированиеРедактироватьАналитики(Команда)
	
	ОбработкаСтрокиРаскрытия("ИзменениеАналитик");
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельРедактированиеУдалитьСтрокуРаскрытия(Команда)
	
	ОбработкаСтрокиРаскрытия("УдалениеСтрокиАналитики");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыСтрокНажатие(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ГруппыКолонокНажатие(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры
  
&НаКлиенте
Процедура ОбновитьДанныеФормы1(Команда)
	
	ОбновитьДанныеФормыБезОбъекта();	
	РазвернутьСтрокиДерева();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗначениеПоказателя(ДанныеФормы,Знач ВыбранноеЗначение,ЭкземплярОтчета)
	
	РабочийОбъект=ПолучитьРабочийОбъектБезКонтекста(ДанныеФормы);
	РабочийОбъект.ОбластьРучногоИзменения=ДанныеФормы.ОбластьРучногоИзменения;
		
	ТекЭкземплярОтчета=РабочийОбъект.ТабОтчеты.Найти(ЭкземплярОтчета,"ЭкземплярОтчета");
	
	Если ТекЭкземплярОтчета=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ РабочийОбъект.ПроверитьИнициализациюОтчета(ТекЭкземплярОтчета) Тогда
		Возврат;
	КонецЕсли;
	
	РабочийОбъект.ПолучитьДокументОбъект(ТекЭкземплярОтчета);
			
	ОтчетОбъект=ТекЭкземплярОтчета.ОтчетОбъект;	
	Показатель=ОтчетОбъект.мПоказатели.Найти(ДанныеФормы.ТекДанныеЯчейки.Показатель,"Ссылка");
	
	Если НЕ Показатель.НеФинансовый Тогда
		
		Если НЕ Показатель.НеМасштабируется Тогда
			ВыбранноеЗначение=ВыбранноеЗначение * ДанныеФормы.ТекущийДелитель;
		КонецЕсли;
		
		Если Не ОтчетОбъект.ОсновнаяВалюта=ДанныеФормы.ВалютаОтображения Тогда			
			ВыбранноеЗначение = ОтчетОбъект.ПолучитьЗначениеПоказателяВОсновнойВалюте(Показатель, ВыбранноеЗначение);			
		КонецЕсли;		
	
	КонецЕсли;
	
	Если НЕ ДанныеФормы.ТекДанныеЯчейки.Раскрытие Тогда // Редактируем сводное значение показателя
		
		ОтчетОбъект.НачатьНовуюОперацию();
		
		/////////////////////////////////////////////////////////////////////////////////////////////////
		
		МассивДанных=ОтчетОбъект.мПоказателиРаскрытия.НайтиСтроки(Новый Структура("Показатель",Показатель.Ссылка));
		
		Если (МассивДанных.Количество()=1 И УправлениеОтчетамиУХ.ПроверитьЗаполнениеАналитик(ОтчетОбъект,МассивДанных[0],ОтчетОбъект.мПоказателиРаскрытия)) Тогда
			
			ОтчетОбъект.ЗаписатьЗначениеВмПоказателиРаскрытия(ВыбранноеЗначение, МассивДанных[0]);
			
		ИначеЕсли МассивДанных.Количество() > 1 Тогда
			
			Если Показатель.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число
				И (НЕ Показатель.ВидИтога=Перечисления.ВидыИтоговПоказателя.НеРассчитывается) Тогда
				
				Если Показатель.Значение<>0 Тогда
					
					ТекущаяПропорция=ВыбранноеЗначение/Показатель.Значение;
					
					Для Каждого Строка ИЗ МассивДанных Цикл
						
						ОтчетОбъект.ЗаписатьЗначениеВмПоказателиРаскрытия(Строка.Значение*ТекущаяПропорция,Строка);
						
					КонецЦикла;	
					
				Иначе
					
					Для Каждого Строка ИЗ МассивДанных Цикл
						
						ОтчетОбъект.ЗаписатьЗначениеВмПоказателиРаскрытия(Неопределено, Строка);
						
					КонецЦикла;
					
				КонецЕсли;
				
			ИначеЕсли НЕ Показатель.ВидИтога=Перечисления.ВидыИтоговПоказателя.НеРассчитывается Тогда
				
				Для Каждого Строка ИЗ МассивДанных Цикл
					
					ОтчетОбъект.ЗаписатьЗначениеВмПоказателиРаскрытия(Неопределено, Строка);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОтчетОбъект.ЗаписатьЗначениеВмПоказатели(Показатель, ВыбранноеЗначение);
			
		Если Не Показатель.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			ОтчетОбъект.ИзмененНечисловойПоказатель=Истина;
		КонецЕсли;
		
		ОтчетОбъект.Показатели[Показатель.Код]=ВыбранноеЗначение;
		
		////////////////////////////////////////////////////////////////////////////////////////////////
		
		Если НЕ ОтчетОбъект.ДанныеПараметрикиАктуальны Тогда
			УправлениеОтчетамиУХ.ПодготовитьДанныеПараметрическойНастройки(ОтчетОбъект);
		КонецЕсли;
					
		МассивКодовПоказателей=ОтчетОбъект.ПолучитьПутьВычисления(Показатель.Код);
		
		// запускаем код заполнения
		Если НЕ ОтчетОбъект.ЗапуститьМодульВычисления(МассивКодовПоказателей) Тогда
			Возврат;
		КонецЕсли;
		
		// переносим значения в глобальную таблицу показателей
		ОтчетОбъект.ПеренестиЗначенияИзПоказателиВмПоказатели();		
		ОтчетОбъект.СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.РучноеЗаполнение;
		
		ТекЭкземплярОтчета.ОтчетИзменен=Истина;
		
	Иначе // Редактируем значение аналитического раскрытия
		
		СтруктураАналитика=Новый Структура;
		Для ИндексАналитика=РабочийОбъект.МаксАналитикОтчета+1 По (РабочийОбъект.МаксАналитикОтчета+РабочийОбъект.МаксАналитикПоказателя) Цикл
			
			СтруктураАналитика.Вставить("Аналитика"+ИндексАналитика,ДанныеФормы.ТекДанныеЯчейки["Аналитика"+ИндексАналитика]);
			
		КонецЦикла;
		
		МассивПоказатели=Новый Массив;
		МассивПоказатели.Добавить(Показатель);
		
		УстановитьЗначениеРаскрытия(ОтчетОбъект,ТекЭкземплярОтчета,МассивПоказатели,ВыбранноеЗначение,СтруктураАналитика)
		
	КонецЕсли;
	
	Если НЕ Показатель.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
		
		ПоместитьРабочийОбъектБезКонтекста(ДанныеФормы,РабочийОбъект);
		ДанныеФормы.Вставить("МассивИзмененныхОбластей",Новый Массив);
        Возврат;
		
	КонецЕсли; 
	
	Если Не ОтчетОбъект.ОсновнаяВалюта=ДанныеФормы.ВалютаОтображения Тогда
		ПересчитатьИзмененныеПоказателиВВалютуОтображения(ТекЭкземплярОтчета,ДанныеФормы.ВалютаОтображения);
	КонецЕсли;
	
	РабочийОбъект.ЗапросДанные.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	РабочийОбъект.ЗапросДанныеРаскрытия.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	РабочийОбъект.ЗапросДанные.Текст="ВЫБРАТЬ * Поместить ТабПоказатели ИЗ &ТабПоказатели КАК ТабПоказатели
	|;
	|ВЫБРАТЬ * Поместить СтрокиОтчетов ИЗ &СтрокиОтчетов КАК СтрокиОтчетов";
	
	РабочийОбъект.ЗапросДанные.УстановитьПараметр("ТабПоказатели",РабочийОбъект.ТаблицыЗапросаДанные.ТабПоказатели);
	РабочийОбъект.ЗапросДанные.УстановитьПараметр("СтрокиОтчетов",РабочийОбъект.ТаблицыЗапросаДанные.СтрокиОтчетов);

	РабочийОбъект.ЗапросДанные.Выполнить();
	
	ОбновитьИтогиПоПоказателям(ДанныеФормы,РабочийОбъект,ТекЭкземплярОтчета);
		
	ПоместитьРабочийОбъектБезКонтекста(ДанныеФормы,РабочийОбъект);
	
КонецПроцедуры // УстановитьЗначениеПоказателя()

&НаКлиенте
Функция ПодготовитьЭкземплярОтчетаДляОбработкиКлиент(СтрЭкземплярОтчета)
	
	СтруктураОтчет=Новый Структура;
	СтруктураОтчет.Вставить("мИзмененныеПоказатели",СтрЭкземплярОтчета.мИзмененныеПоказатели);
	СтруктураОтчет.Вставить("мИзмененныеПоказателиРаскрытия",СтрЭкземплярОтчета.мИзмененныеПоказателиРаскрытия);
	СтруктураОтчет.Вставить("ВыводитьВВалютеОтображения",СтрЭкземплярОтчета.ВыводитьВВалютеОтображения);
	СтруктураОтчет.Вставить("ЕстьЭкземплярОтчета",Истина);
	СтруктураОтчет.Вставить("Организация",СтрЭкземплярОтчета.Организация);
	СтруктураОтчет.Вставить("ОрганизацияНаименование",СтрЭкземплярОтчета.ОрганизацияНаименование);
	СтруктураОтчет.Вставить("ПериодОтчета",СтрЭкземплярОтчета.ПериодОтчета);
	СтруктураОтчет.Вставить("Сценарий",СтрЭкземплярОтчета.Сценарий);
	СтруктураОтчет.Вставить("СценарийНаименование",СтрЭкземплярОтчета.СценарийНаименование);
	СтруктураОтчет.Вставить("ЭкземплярОтчета",СтрЭкземплярОтчета.ЭкземплярОтчета);
	СтруктураОтчет.Вставить("Аналитика1",СтрЭкземплярОтчета.Аналитика1);
	СтруктураОтчет.Вставить("Аналитика2",СтрЭкземплярОтчета.Аналитика2);
	СтруктураОтчет.Вставить("Аналитика3",СтрЭкземплярОтчета.Аналитика3);
	СтруктураОтчет.Вставить("Аналитика4",СтрЭкземплярОтчета.Аналитика4);
	СтруктураОтчет.Вставить("Аналитика5",СтрЭкземплярОтчета.Аналитика5);
	СтруктураОтчет.Вставить("ОсновнаяВалюта",СтрЭкземплярОтчета.ОсновнаяВалюта);
	СтруктураОтчет.Вставить("мТекущаяВалюта",СтрЭкземплярОтчета.мТекущаяВалюта);
	СтруктураОтчет.Вставить("ДатаНачалаПериода",СтрЭкземплярОтчета.ДатаНачалаПериода);
		
    Возврат СтруктураОтчет; 
		
КонецФункции // ПодготовитьЭкземплярОтчетаДляОбработки()

&НаСервереБезКонтекста
Процедура ОбновитьИтогиПоПоказателям(ДанныеФормы,РабочийОбъект,ТекЭкземплярОтчета)
	
	// Проверим добавление или удаление строк раскрытия
		
	РабочийОбъект.ПолучитьИзмененныеПоказатели(ТекЭкземплярОтчета,1);
	РабочийОбъект.ДанныеИзмененнойЯчейки=ДанныеФормы.ТекДанныеЯчейки;
	МассивОтчетов=Новый Массив;
	МассивОтчетов.Добавить(ТекЭкземплярОтчета);
	
	РабочийОбъект.ОтобразитьДанныеОтчетов(МассивОтчетов,Истина);
	ДанныеФормы.Вставить("МассивИзмененныхОбластей",РабочийОбъект.МассивИзмененныхОбластей);
		
КонецПроцедуры // ОбновитьИтогиПоПоказателям()

&НаКлиенте
Функция ОпределитьКоординатыПоказателя(Строка,Колонка);
	
	СтруктураПоиска=Новый Структура;
	
	Для Каждого Группировка ИЗ Объект.ГруппировкиСтроки Цикл
		
		Если Группировка.Группировка="Строка" Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска.Вставить(Группировка.Группировка,ТекЭкземплярОтчета[Группировка.Группировка]);
		
	КонецЦикла;
	
	Для Каждого Группировка ИЗ Объект.ГруппировкиКолонки Цикл
		
		Если Группировка.Группировка="Колонка" Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска.Вставить(Группировка.Группировка,ТекЭкземплярОтчета[Группировка.Группировка]);
		
	КонецЦикла;
	
	СтруктураПоиска.Вставить("Строка",Строка);
	СтруктураПоиска.Вставить("Колонка",Колонка);
	СтруктураПоиска.Вставить("Раскрытие",Ложь);
	
	МассивКоординат=ЭтаФорма["ТабКоординатыОбщ"].НайтиСтроки(СтруктураПоиска);
	
	Если МассивКоординат.Количество()=0 Тогда
		Возврат Новый Структура("НомерСтроки,НомерКолонки");
	КонецЕсли;
	
	СтруктураКоординат=Новый Структура;
	СтруктураКоординат.Вставить("НомерСтроки",МассивКоординат[0].НомерСтроки);
	СтруктураКоординат.Вставить("НомерКолонки",МассивКоординат[0].НомерКолонки);
	
	Возврат СтруктураКоординат;
	
КонецФункции // ОпределитьСтрокуПоказателя()

&НаКлиенте
Функция ОпределитьСтрокуАналитики(Строка,СтрАналитика)
	
	СтруктураПоиска=Новый Структура;
	
	Для Каждого Группировка ИЗ Объект.ГруппировкиСтроки Цикл
		
		Если Группировка.Группировка="Строка" Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска.Вставить(Группировка.Группировка,ТекЭкземплярОтчета[Группировка.Группировка]);
		
	КонецЦикла;
	
	СтруктураПоиска.Вставить("Строка",Строка);
	СтруктураПоиска.Вставить("Раскрытие",Истина);
	
	Для ИндексАналитики=МаксАналитикОтчета+1 По (МаксАналитикОтчета+МаксАналитикПоказателя) Цикл
		СтруктураПоиска.Вставить("Аналитика"+ИндексАналитики,СтрАналитика["Аналитика"+ИндексАналитики]);
	КонецЦикла;
	
	МассивКоординат=ЭтаФорма["ТабКоординатыСтрок"].НайтиСтроки(СтруктураПоиска);
	
	Если МассивКоординат.Количество()=0 Тогда
		Возврат Неопределено;
	Иначе	 
		Возврат МассивКоординат[0].НомерСтроки;
	КонецЕсли;
	
КонецФункции // ОпределитьСтрокуАналитики()

&НаСервереБезКонтекста
Процедура ПересчитатьИзмененныеПоказателиВВалютуОтображения(ТекЭкземплярОтчета,ВалютаОтображения)
	
	ОтчетОбъект=ТекЭкземплярОтчета.ОтчетОбъект;
	НомерОперации=ОтчетОбъект.НомерТекущейОперации;
	
	МассивИзмененныхПоказателей=ОтчетОбъект.ЛогИзмененийПоказателей.НайтиСтроки(Новый Структура("НомерОперации",НомерОперации));
	
	ТаблицаПоказателей=ОтчетОбъект.мПоказатели.СкопироватьКолонки();
	ТаблицаПоказателейРаскрытия=ОтчетОбъект.мПоказателиРаскрытия.СкопироватьКолонки();
	
	Для Каждого Показатель ИЗ МассивИзмененныхПоказателей Цикл
		
		// Поместим измененные данные в таблицы для пересчета значений
		
		СтрПоказатель=ОтчетОбъект.мПоказатели.Найти(Показатель.Ссылка,"Ссылка");
		НоваяСтрока=ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрПоказатель);
		
		МассивРаскрытия=ОтчетОбъект.мПоказателиРаскрытия.НайтиСтроки(Новый Структура("Показатель",Показатель.Ссылка));
		ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(МассивРаскрытия,ТаблицаПоказателейРаскрытия);
		
		// Удалим строки со старыми значениями из таблицы значений в валюте отображения
		
		МассивВалюта=ТекЭкземплярОтчета.мПоказателиВВалюте.НайтиСтроки(Новый Структура("Ссылка",Показатель.Ссылка));
		
		Для Каждого Строка ИЗ МассивВалюта Цикл
			ТекЭкземплярОтчета.мПоказателиВВалюте.Удалить(Строка);
		КонецЦикла;
		
		МассивРаскрытияВалюта=ТекЭкземплярОтчета.мПоказателиРаскрытияВВалюте.НайтиСтроки(Новый Структура("Показатель",Показатель.Ссылка));
		
		Для Каждого Строка ИЗ МассивРаскрытияВалюта Цикл
			ТекЭкземплярОтчета.мПоказателиРаскрытияВВалюте.Удалить(Строка);
		КонецЦикла;
		
	КонецЦикла;
	
	ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ОтчетОбъект.ПолучитьЗначенияПоказателейВВалюте(ТаблицаПоказателей,ВалютаОтображения),ТекЭкземплярОтчета.мПоказателиВВалюте);
	ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ОтчетОбъект.ПолучитьЗначенияПоказателейРаскрытияВВалюте(ОтчетОбъект.мПоказатели,ТаблицаПоказателейРаскрытия, ВалютаОтображения),ТекЭкземплярОтчета.мПоказателиРаскрытияВВалюте);
		
КонецПроцедуры // ПересчитатьИзмененныеПоказателиВВалютуОтображения()

&НаСервереБезКонтекста
Процедура УстановитьЗначениеРаскрытия(ОтчетОбъект,РабЭкземплярОтчета,МассивПоказатели,Значение,СтруктураАналитика,СтруктураАналитикаНов=Неопределено,ТекДанныеЯчейки=Неопределено)
		
	МассивКодовПоказателей=Новый Массив;
	ОтчетОбъект.НачатьНовуюОперацию();
	
	Для Каждого СтрПоказатель ИЗ МассивПоказатели Цикл
		
		Если Значение=Неопределено Тогда
			
			УстанавливаемоеЗначение=Неопределено;
			
		ИначеЕсли ТекДанныеЯчейки=Неопределено 
			ИЛИ (РабЭкземплярОтчета.ЭкземплярОтчета=ТекДанныеЯчейки.ЭкземплярОтчета 
					И СтрПоказатель.Ссылка=ТекДанныеЯчейки.Показатель) Тогда
					
			Если СтрПоказатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число 
				И (ТипЗнч(Значение) <> Тип("Число")) Тогда
				УстанавливаемоеЗначение = 0;
			Иначе	
				УстанавливаемоеЗначение = Значение;
			КонецЕсли;			
			
		Иначе
			
			УстанавливаемоеЗначение=0.00001;
			
		КонецЕсли;
					
		Если СтруктураАналитикаНов=Неопределено Тогда 
			
			СтруктураАналитика.Вставить("Показатель",СтрПоказатель.Ссылка);
			ОтчетОбъект.ЗаписатьЗначениеВмПоказателиРаскрытия(УстанавливаемоеЗначение,СтруктураАналитика);
			
		Иначе
			
			СтруктураАналитика.Вставить("Показатель",СтрПоказатель.Ссылка);
			СтруктураАналитикаНов.Вставить("Показатель",СтрПоказатель.Ссылка);
			ОтчетОбъект.ЗаменитьАналитикиГруппыРаскрытия(УстанавливаемоеЗначение,СтруктураАналитика,СтруктураАналитикаНов);
			
		КонецЕсли;
		
		МассивКодовПоказателей.Добавить(СокрЛП(СтрПоказатель.Код));
		
	КонецЦикла;
	
//	Если ТипЗнч(Значение)=Тип("Число") Тогда
		
		// Обновим итоги по показателям									
		ОтчетОбъект.УстановитьИтогиПоПоказателям(МассивКодовПоказателей);
		
		Если НЕ ОтчетОбъект.ДанныеПараметрикиАктуальны Тогда
			УправлениеОтчетамиУХ.ПодготовитьДанныеПараметрическойНастройки(ОтчетОбъект);
		КонецЕсли;
		
		Для Каждого КодПоказателя ИЗ МассивКодовПоказателей Цикл
			
			МассивЗависимыхПоказателей=ОтчетОбъект.ПолучитьПутьВычисления(КодПоказателя);				
			
			// запускаем код заполнения
			Если НЕ ОтчетОбъект.ЗапуститьМодульВычисления(МассивЗависимыхПоказателей) Тогда
				Возврат;
			КонецЕсли;
			
			// переносим значения в глобальную таблицу показателей
			ОтчетОбъект.ПеренестиЗначенияИзПоказателиВмПоказатели();	
			
		КонецЦикла;		
		
		ОтчетОбъект.СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.РучноеЗаполнение;
		
//	КонецЕсли; 
	
		
	РабЭкземплярОтчета.ОтчетИзменен=Истина;
	
КонецПроцедуры // УстановитьЗначениеРаскрытия()

&НаСервере
Функция ПодготовитьОтчетДляРедактирования(ЭкземплярОтчета,СтруктураДанныхФормы,ТекПометка=Неопределено)
	
	РабочийОбъект=ПолучитьРабочийОбъект();	
	СтрОтчет=РабочийОбъект.ТабОтчеты.Найти(ЭкземплярОтчета,"ЭкземплярОтчета");
	
	Если  РабочийОбъект.ИнициализироватьКонтекстОтчета(СтрОтчет) Тогда
		
		СтруктураДанныхФормы.Вставить("СписокРедактируемыхПоказателей",РабочийОбъект.СписокРедактируемыхПоказателей);
		ПоместитьРабочийОбъект(РабочийОбъект);
		
		Если ТекПометка<>Неопределено Тогда
			ТекПометка=НЕ ТекПометка;
		КонецЕсли;
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
			
КонецФункции // ПодготовитьОтчетДляРедактирования()

&НаСервере
Функция ЗаписатьЭкземплярОтчета(ЭкземплярОтчета,СтруктураДанныхФормы,ОставитьЗаблокированным=Ложь)
	
	РабочийОбъект=ПолучитьРабочийОбъект();	
	СтрЭкземпляр=РабочийОбъект.ТабОтчеты.Найти(ЭкземплярОтчета,"ЭкземплярОтчета");
	
	Если НЕ СтрЭкземпляр.ОтчетИнициализирован Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		
		РабочийОбъект.ПолучитьДокументОбъект(СтрЭкземпляр);
		
		Если СтрЭкземпляр.ОтчетИзменен Тогда
			
			СтрЭкземпляр.ОтчетОбъект.Записать();
			
		КонецЕсли;
		
		Если НЕ ОставитьЗаблокированным Тогда
			
			СтрЭкземпляр.ОтчетОбъект.Разблокировать();
			
		КонецЕсли;
		
		СтрЭкземпляр.ОтчетИзменен=Ложь;
		СтрЭкземпляр.ОтчетИнициализирован=Ложь;
		
		ПоместитьРабочийОбъект(РабочийОбъект);
		
		Возврат Истина;
		
	Исключение
		
		//Сообщить("Не удалось записать данные экземпляра отчета",СтатусСообщения.Важное);
		//Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции // ЗаписатьЭкземплярОтчета()

&НаСервере
Функция ПолучитьРабочийОбъект()
	
	РабочийОбъект=РеквизитФормыВЗначение("Объект");
	РабочийОбъект.АдресХранилищаПеременныхДляРасчета=РабочийОбъектАдрес;
	РабочийОбъект.ВосстановитьПеременныеДляРасчета();
		
	Возврат РабочийОбъект;
		
КонецФункции // ПолучитьСправочникОбъект()

&НаСервереБезКонтекста
Функция ПолучитьРабочийОбъектБезКонтекста(ДанныеФормы)
	
	РабочийОбъект								= ОбщегоНазначенияУХ.ПолучитьРабочийОбъект(ДанныеФормы.РабочийОбъектАдрес);	
	Возврат РабочийОбъект;
		
КонецФункции // ПолучитьРабочийОбъектБезКонтекста()

&НаСервере
Процедура ПоместитьРабочийОбъект(РабочийОбъект)
	
	Для Каждого СтрОтчет ИЗ РабочийОбъект.ТабОтчеты Цикл
		
		Если НЕ СтрОтчет.ОтчетОбъект=Неопределено Тогда
			
			СтрОтчет.ДанныеОбъекта=СтрОтчет.ОтчетОбъект.ПодготовитьСтруктуруПеременныхДляРасчета();
			СтрОтчет.ОтчетОбъект=Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;
			
	РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(РабочийОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),ЭтаФорма.УникальныйИдентификатор);
	ЗначениеВРеквизитФормы(РабочийОбъект,"Объект");
					
КонецПроцедуры // ПолучитьСправочникОбъект()

&НаСервереБезКонтекста
Процедура ПоместитьРабочийОбъектБезКонтекста(ДанныеФормы,РабочийОбъект)
	
	 Для Каждого СтрОтчет ИЗ РабочийОбъект.ТабОтчеты Цикл
		
		Если НЕ СтрОтчет.ОтчетОбъект=Неопределено Тогда
			
			СтрОтчет.ДанныеОбъекта=СтрОтчет.ОтчетОбъект.ПодготовитьСтруктуруПеременныхДляРасчета();
			СтрОтчет.ОтчетОбъект=Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;

	 ДанныеФормы.РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(РабочийОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),ДанныеФормы.ИдентификаторРодителя);
     	
КонецПроцедуры // ПоместитьРабочийОбъектБезКонтекста()

&НаСервере
Процедура ОбновитьОбъектВХранилище()
	
	РабочийОбъект=ПолучитьРабочийОбъект();	
	РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(РабочийОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры // ОбновитьОбъектВХранилище()

&НаСервере
Процедура ПоместитьДокументОбъект(ДокументОбъект,СтрОтчет)
	
	СтрОтчет.ДанныеОбъекта=ДокументОбъект.ПодготовитьСтруктуруПеременныхДляРасчета()
	
КонецПроцедуры  // ПоместитьДокументОбъект()
	
&НаКлиенте
Процедура КоманднаяПанельРедактированиеЗаписать(Команда)
	
	СтруктураДанныхФормы=Новый Структура;
	СтруктураДанныхФормы.Вставить("РабочийОбъектАдрес",РабочийОбъектАдрес);
	СтруктураДанныхФормы.Вставить("ИдентификаторФормы",ЭтаФорма.УникальныйИдентификатор);
	СтруктураДанныхФормы.Вставить("ЭкземплярОтчета");	
	
	ЗаписатьЭкземплярыОтчетов(СтруктураДанныхФормы);
	Модифицированность=Ложь;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыГруппировокСервер() Экспорт
	
	Объект.ГруппировкиСтроки.Очистить();
	Объект.ГруппировкиКолонки.Очистить();
		
	НоваяСтрока=Объект.ГруппировкиСтроки.Добавить();
	НоваяСтрока.ПредставлениеГруппировки = НСтр("ru = 'Сценарий'");
	НоваяСтрока.Группировка = "Сценарий";
	
	НоваяСтрока=Объект.ГруппировкиСтроки.Добавить();
	НоваяСтрока.ПредставлениеГруппировки = НСтр("ru = 'Организация'");
	НоваяСтрока.Группировка = "Организация";
	
	НоваяСтрока=Объект.ГруппировкиСтроки.Добавить();
	НоваяСтрока.ПредставлениеГруппировки = НСтр("ru = 'Строки отчета'");
	НоваяСтрока.Группировка = "Строка";
	
	НоваяСтрока=Объект.ГруппировкиКолонки.Добавить();
	НоваяСтрока.ПредставлениеГруппировки = НСтр("ru = 'Колонки отчета'");
	НоваяСтрока.Группировка = "Колонка";
	
	НоваяСтрока=Объект.ГруппировкиКолонки.Добавить();
	НоваяСтрока.ПредставлениеГруппировки = НСтр("ru = 'Период отчета'");
	НоваяСтрока.Группировка = "ПериодОтчета";
	
КонецПроцедуры //

&НаСервере
Процедура ИнициализироватьОтчетыСервер() Экспорт
	
	ПризнакОшибки=Ложь;
		
	Если ОтборПоЭкземплярам=1 Тогда
		
		ОрганизацияОтбор.Очистить();
		ПериодОтчетаОтбор.Очистить();
		СценарийОтбор.Очистить();
		
		Для Каждого Строка Из ТабЭкземплярыОтчетов Цикл
			
			РаботаСДиалогамиСерверУХ.ДобавитьЗначениеВКоллекцию(Строка.Организация,	ОрганизацияОтбор);
			РаботаСДиалогамиСерверУХ.ДобавитьЗначениеВКоллекцию(Строка.ПериодОтчета,ПериодОтчетаОтбор);
			РаботаСДиалогамиСерверУХ.ДобавитьЗначениеВКоллекцию(Строка.Сценарий,	СценарийОтбор);
						
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураДанныхФормы=Новый Структура;
	СтруктураДанныхФормы.Вставить("ВидСравненияОрганизация",ВидСравненияОрганизация);
	СтруктураДанныхФормы.Вставить("ОрганизацияОтбор",ОрганизацияОтбор);
	СтруктураДанныхФормы.Вставить("СоставПериметра", Неопределено);
	
	СтруктураДанныхФормы.Вставить("ВидСравненияПериод",ВидСравненияПериод);
	СтруктураДанныхФормы.Вставить("ПериодОтчетаОтбор",ПериодОтчетаОтбор);
	СтруктураДанныхФормы.Вставить("Периодичность",Периодичность);
	
	СтруктураДанныхФормы.Вставить("ВидСравненияСценарий",ВидСравненияСценарий);
    СтруктураДанныхФормы.Вставить("СценарийОтбор",СценарийОтбор);
	
	СтруктураДанныхФормы.Вставить("ВидСравненияПроект",ВидСравненияПроект);
    СтруктураДанныхФормы.Вставить("ПроектОтбор",ПроектОтбор);
	
	Для Индекс=1 По 5 Цикл
		
		СтруктураДанныхФормы.Вставить("ВидСравненияАналитика"+Индекс,"В");
		СтруктураДанныхФормы.Вставить("Аналитика"+Индекс+"Отбор",ЭтаФорма["Аналитика"+Индекс+"Отбор"]);
		
	КонецЦикла;
	
	СтруктураДанныхФормы.Вставить("ОсновнаяВалюта",Объект.ОсновнаяВалюта);
	СтруктураДанныхФормы.Вставить("ВыбраннаяВалюта",ВыбраннаяВалюта);
	СтруктураДанныхФормы.Вставить("СоздаватьЭкземплярыОтчетов",Объект.СоздаватьЭкземплярыОтчетов);
	
	СтруктураДанныхФормы.Вставить("ВалютаОтображения",ВалютаОтображения);
	СтруктураДанныхФормы.Вставить("СписокВалютОтображения",Элементы.ВыбраннаяВалюта.СписокВыбора);
	
	СтруктураДанныхФормы.Вставить("РабочийОбъектАдрес",РабочийОбъектАдрес);
	СтруктураДанныхФормы.Вставить("ИдентификаторФормы",ЭтаФорма.УникальныйИдентификатор);
	
	СтруктураДанныхФормы.Вставить("ОтборПоЭкземплярам",ОтборПоЭкземплярам);
	СтруктураДанныхФормы.Вставить("ВидОтчета",Объект.ВидОтчета);
	
	СписокЭкземпляров=Новый СписокЗначений;
	
	Для Каждого СтрЭкземпляр ИЗ ТабЭкземплярыОтчетов Цикл
		
		СписокЭкземпляров.Добавить(СтрЭкземпляр.Ссылка);
		
	КонецЦикла;
	
	СтруктураДанныхФормы.Вставить("СписокЭкземпляров",СписокЭкземпляров);
			
	РабочийОбъект=ПолучитьТаблицуОтчетов(ПризнакОшибки,СтруктураДанныхФормы);
	
	ВыбраннаяВалюта=СтруктураДанныхФормы.ВыбраннаяВалюта;
	
	Для Каждого СтрВалюта ИЗ СтруктураДанныхФормы.СписокВалютОтображения Цикл
		
		Элементы.ВыбраннаяВалюта.СписокВыбора.Добавить(СтрВалюта.Значение,СтрВалюта.Представление);
		
	КонецЦикла;
	
	ВалютаОтображения=ВыбраннаяВалюта;
	
	Объект.ОсновнаяВалюта=СтруктураДанныхФормы.ОсновнаяВалюта;	
		
	Если НЕ ПроверитьИсходныеДанные(РабочийОбъектАдрес,ЭтаФорма.УникальныйИдентификатор,РабочийОбъект) Тогда
	
		ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Нет доступных экземпляров отчета для обработки'"),,,СтатусСообщения.Внимание);
			
		ТабДерево.ПолучитьЭлементы().Очистить();
		Возврат;
		
	КонецЕсли;
	
	ОбновитьДанныеФормыСервер(РабочийОбъект,Ложь);	
	
КонецПроцедуры // ИнициализироватьОтчеты()
 
&НаСервере
Процедура ОбновитьАналитикиВидаОтчетаСервер()
	
	ПолучитьТаблицуАналитикВидаОтчета(Объект.ВидОтчета);
	
	СправочникиГруппировок=Новый Структура;
	СправочникиГруппировок.Вставить("Организация","Организации");
	СправочникиГруппировок.Вставить("Проект","Проекты");
	СправочникиГруппировок.Вставить("ПериодОтчета","Периоды");
	СправочникиГруппировок.Вставить("Сценарий","Сценарии");
	СправочникиГруппировок.Вставить("Колонка","КолонкиОтчетов");
	СправочникиГруппировок.Вставить("Строка","СтрокиОтчетов");
	
	Для Индекс=1 По 5 Цикл
		СправочникиГруппировок.Вставить("Аналитика"+Индекс,"СпрАналитика"+Индекс);
	КонецЦикла;
	
	Если мТаблицаАналитикВидаОтчета.Количество()=0 Тогда
		
		Элементы.ГруппаАналитикиВидаОтчета.Видимость=Ложь;
		
		Для Инд=1 по ЧислоДопАналитик Цикл
			
			Элементы["Аналитика"+Инд].Видимость=Ложь;
			
		КонецЦикла;
		
	Иначе
		
		Элементы.ГруппаАналитикиВидаОтчета.Видимость=Истина;
		
		Для Инд = 1 По 5 Цикл
			
			СтрАналитика = НайтиСтрокуКоллекцииСервер(мТаблицаАналитикВидаОтчета,"Аналитика"+Инд,"КодАналитики");
			
			ЕстьАналитика=(Не СтрАналитика=Неопределено);
			Элементы["ГруппаАналитика"+Инд].Видимость=ЕстьАналитика;
			Элементы["Аналитика"+Инд].Видимость=ЕстьАналитика;
			
			Если ЕстьАналитика Тогда
				
				Элементы["Аналитика"+Инд+"Отбор"].Заголовок=СтрАналитика.НаименованиеАналитики;			
				СправочникиГруппировок.Вставить("Аналитика"+Инд,СтрЗаменить(СтрАналитика.ТаблицаАналитики,"Справочник.",""));
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Удалим аналитики из группировок
	
	МассивКУдалению=Новый Массив;
	
	Для Каждого ТекСтрока ИЗ Объект.ГруппировкиСтроки Цикл
		
		Если СтрНайти(ТекСтрока.Группировка,"Аналитика")>0 ИЛИ ТекСтрока.Группировка="Проект" Тогда
			
			МассивКУдалению.Добавить(ТекСтрока);
			
		КонецЕсли;
					
	КонецЦикла;
	
	Для Каждого Строка ИЗ  МассивКУдалению Цикл
		Объект.ГруппировкиСтроки.Удалить(Строка);
	КонецЦикла;
	
	МассивКУдалению.Очистить();
	
	Для Каждого ТекКолонка ИЗ Объект.ГруппировкиКолонки Цикл
		
		Если СтрНайти(ТекКолонка.Группировка,"Аналитика")>0 ИЛИ ТекКолонка.Группировка="Проект"  Тогда
			
			МассивКУдалению.Добавить(ТекКолонка);
						
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка ИЗ  МассивКУдалению Цикл
		Объект.ГруппировкиКолонки.Удалить(Строка);
	КонецЦикла;
	
	Если Объект.РазделениеПоПроектам Тогда
		
		НоваяСтрока=Объект.ГруппировкиСтроки.Добавить();
		НоваяСтрока.ПредставлениеГруппировки="Проекты";
		НоваяСтрока.Группировка="Проект";
		
	КонецЕсли;	
	
	Для Каждого СтрАналитика ИЗ мТаблицаАналитикВидаОтчета Цикл
		
		ДобавитьАналитикиВГруппировкиСервер(СтрАналитика)
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьАналитикиВидаОтчета()
 
&НаСервере
Процедура УстановитьДоступностьРедактированияСервер(ВозможноРедактирование,ЗаполняемыйПоказатель)
	
	Если ТипЗнч(ТекДанныеЯчейки)=Тип("Структура") И ЗначениеЗаполнено(ТекДанныеЯчейки.ЭкземплярОтчета) Тогда
	    Элементы.ПанельРедактированиеОтчета.ТекущаяСтраница=Элементы.ПанельРедактированиеОтчета.ПодчиненныеЭлементы.РедактированиеЭкземпляра;			
	Иначе	
		Элементы.ПанельРедактированиеОтчета.ТекущаяСтраница=Элементы.ПанельРедактированиеОтчета.ПодчиненныеЭлементы.СводныеДанные;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьРедактирования() 

&НаСервере
Процедура ПриИзмененииВидаОтчетаСервер(ОбновлятьБланк=Истина) Экспорт
		
	ТабДерево.ПолучитьЭлементы().Очистить();
	
	Объект.РазделениеПоПроектам=Объект.ВидОтчета.РазделениеПоПроектам;
	
	Если Не Объект.РазделениеПоПроектам Тогда
		
		ПроектОтбор.Очистить();
		
	КонецЕсли;
	
	ОбновитьАналитикиВидаОтчетаСервер();
	
	Если ОбновлятьБланк Тогда
		Объект.БланкОтчета=ПолучитьБланкПоУмолчанию(РабочийОбъектАдрес);
		ПриИзмененииБланкаОтчетаСервер();
	КонецЕсли;
		
	ОпределитьГруппировкуБазисСервер();	
		
	УстановитьВидимостьСервер();
	
КонецПроцедуры // ПриИзмененииВидаОтчета()

&НаСервере
Процедура ЗаполнитьТаблицуВычисляемыхГруппировокСервер()
	
	Объект.ГруппировкиВычисляемыеКолонки.Очистить();
	
	НоваяСтрока=Объект.ГруппировкиВычисляемыеКолонки.Добавить();
	НоваяСтрока.Группировка = "ОтклонениеАбс";
	НоваяСтрока.ПредставлениеГруппировки = НСтр("ru = 'Отклонение (абс.)'");
	
	НоваяСтрока=Объект.ГруппировкиВычисляемыеКолонки.Добавить();
	НоваяСтрока.Группировка = "ОтклонениеОтн";
	НоваяСтрока.ПредставлениеГруппировки = НСтр("ru = 'Отклонение (%)'");
	
	НоваяСтрока=Объект.ГруппировкиВычисляемыеКолонки.Добавить();
	НоваяСтрока.Группировка = "ДоляВИтогеПоГруппировке";
	НоваяСтрока.ПредставлениеГруппировки = НСтр("ru = 'Доля в общем итоге по группировке'");
	
	НоваяСтрока=Объект.ГруппировкиВычисляемыеКолонки.Добавить();
	НоваяСтрока.Группировка = "ДоляВИтогеПоПериметру";
	НоваяСтрока.ПредставлениеГруппировки = НСтр("ru = 'Доля в консолидированном значении'");	
	
КонецПроцедуры // ЗаполнитьТаблицуВычисляемыхГруппировок()

&НаСервере
Процедура ОпределитьГруппировкуБазисСервер()
	
	Если Объект.ГруппировкиКолонки.Количество()>0 Тогда
		
		ГруппировкаБазис=Объект.ГруппировкиКолонки[Объект.ГруппировкиКолонки.Количество()-1].Группировка;
		Элементы.БазовоеЗначениеИзмерения.Заголовок="Базовые данные ("+Объект.ГруппировкиКолонки[Объект.ГруппировкиКолонки.Количество()-1].ПредставлениеГруппировки+")";
		ОбновитьВычисляемыеКолонкиСервер();
		
	КонецЕсли;
	
Конецпроцедуры // ОпределитьГруппировкуБазис()
  
&НаСервере
Процедура УстановитьВидимостьСервер()
	
	Если ОтборПоЭкземплярам=1 Тогда
		Элементы.ГруппаОтбор.ТекущаяСтраница=Элементы.ГруппаОтбор.ПодчиненныеЭлементы.ГруппаОтборЭкземпляры;
	Иначе
		Элементы.ГруппаОтбор.ТекущаяСтраница=Элементы.ГруппаОтбор.ПодчиненныеЭлементы.ГруппаОтборРеквизиты;
	КонецЕсли;
	
	ЕстьЭкземплярОтчета=(НЕ ТекДанныеЯчейки=Неопределено) И ЗначениеЗаполнено(ТекДанныеЯчейки.ЭкземплярОтчета);
	ЗаполняемыйПоказатель=ЕстьЭкземплярОтчета 
							И ТекДанныеЯчейки.Свойство("Показатель") 
							И (НЕ ТекДанныеЯчейки.СписокРедактируемыхПоказателей.НайтиПоЗначению(ТекДанныеЯчейки.Показатель)=Неопределено);
		
	УстановитьДоступностьРедактированияСервер(ЕстьЭкземплярОтчета,ЗаполняемыйПоказатель);
	
	ЕстьДанныеДляОбработки=ПроверитьИсходныеДанные(РабочийОбъектАдрес,ЭтаФорма.УникальныйИдентификатор);
	
	ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.Записать.Доступность=ЕстьДанныеДляОбработки;
	
	Элементы.ПанельОтображения.ТекущаяСтраница=?(Объект.ВыводитьВДерево,Элементы.ПанельОтображения.ПодчиненныеЭлементы.Дерево,Элементы.ПанельОтображения.ПодчиненныеЭлементы.Бланк);
	Элементы.ПолосаШиринаКолонки.Видимость=Не Объект.ВыводитьВДерево;
	Элементы.КнопкаОбновить.Видимость=НЕ ОбновлятьПриИзмененииГруппировок;
	
	Элементы.ПроектОтбор.Видимость=Объект.ВидОтчета.РазделениеПоПроектам;
	
	Если НЕ Константы.ПроверятьУтверждениеДанных.Получить() Тогда
		
		Элементы.ЧтениеНеактуальныхЗаписей.Пометка=Истина;
		Элементы.ЧтениеНеактуальныхЗаписей.Доступность=Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

&НаСервере
Процедура ОчиститьРабочееПоле()
	
	Если ТабДерево.ПолучитьЭлементы().Количество()>0 Тогда
		
		ТабДерево.ПолучитьЭлементы().Очистить();
		
	КонецЕсли; 
	
	Если ТабДок.ВысотаТаблицы>0 Тогда
		
		ТабДок.Очистить();
		
	КонецЕсли; 
		
КонецПроцедуры
 

&НаСервере
Процедура ОбновитьДанныеФормыСервер(РабочийОбъект=Неопределено,НужнаПроверка=Истина)
	
	ТекЕдиницаИзмерения=ЕдиницаИзмерения;
	
	Если НужнаПроверка И (НЕ ПроверитьИсходныеДанные(РабочийОбъектАдрес,ЭтаФорма.УникальныйИдентификатор,РабочийОбъект)) Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке("Не получены данные для отображения.",,,СтатусСообщения.Внимание);
		ОчиститьРабочееПоле();
		Возврат;
	КонецЕсли;
	
	Если ЕстьАнализОтклоненийСервер() И Не ЗначениеЗаполнено(Объект.БазовоеЗначениеИзмерения) Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке("Не указаны базовые данные для сравнения.",,,СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	ПолучитьЗначениеДелителяСервер();
	ТекущаяТочность=УровеньТочности;
	
	СписокИзмененныхПоказателей.Очистить();
	
	СтруктураДанных=ПодготовитьДанныеОбъектаДляПередачиСервер();
	СтруктураДанных.Вставить("РабочийОбъектАдрес",РабочийОбъектАдрес);
	СтруктураДанных.Вставить("ИдентификаторФормы",ЭтаФорма.УникальныйИдентификатор);
	СтруктураДанных.Вставить("СправочникиГруппировок",СправочникиГруппировок);
	СтруктураДанных.Вставить("СписокОрганизацииОтбор",СписокОрганизацииОтбор);
	СтруктураДанных.Вставить("СписокПериодыОтбор",СписокПериодыОтбор);
	СтруктураДанных.Вставить("ТекущаяТочность",ТекущаяТочность);
	СтруктураДанных.Вставить("ТекущийДелитель",ТекущийДелитель);
	СтруктураДанных.Вставить("ГруппировкаБазис",ГруппировкаБазис);
	
	МассивАналитикаОтбор=Новый Массив;
	Для Каждого СтрАналитика ИЗ ТабАналитикиОтбор Цикл
		
		СтруктураОтбора=Новый Структура;
		СтруктураОтбора.Вставить("Аналитика",СтрАналитика.Аналитика);
		СтруктураОтбора.Вставить("ЗначениеАналитики",СтрАналитика.ЗначениеАналитики);
		
		МассивАналитикаОтбор.Добавить(СтруктураОтбора);
		
	КонецЦикла;
	
	СтруктураДанных.Вставить("Таб_ТабАналитикиОтбор",МассивАналитикаОтбор);
	
	//////////////////////// Формирование дерева значений //////////////////////////////////////// 
	
	Если РабочийОбъект=Неопределено Тогда
		
		РабочийОбъект=ПолучитьРабочийОбъект();
		
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(РабочийОбъект,СтруктураДанных);
	
	Для Каждого КлючИЗначение ИЗ СтруктураДанных Цикл
		
		Если СтрНайти(КлючИЗначение.Ключ,"Таб_")>0 Тогда
			
			ИмяТаблицы=СтрЗаменить(КлючИЗначение.Ключ,"Таб_","");
			ДанныеТаблицы=КлючИЗначение.Значение; 
			
			РабочийОбъект.РаспаковатьТаблицуЗначений(ИмяТаблицы,ДанныеТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если Объект.ВыводитьВДерево Тогда
		
		Если РабочийОбъект.ТаблицыЗапросаДанные.Количество()>0 Тогда
			
			РабочийОбъект.ПоместитьТаблицыВЗапросы();
			
		Иначе
			
			РабочийОбъект.ИнициализироватьКонтекстСводно(РабочийОбъект.ОсновныеВалюты);
			
		КонецЕсли;
		
	Иначе
		
		Если РабочийОбъект.ДанныеРаскрытияИнициализированы
			И РабочийОбъект.ТаблицыЗапросаДанные.Количество()>0
			И РабочийОбъект.ТаблицыЗапросаРаскрытие.Количество()>0 Тогда
			
			РабочийОбъект.ПоместитьТаблицыВЗапросы();
			
		Иначе
			
			РабочийОбъект.ИнициализироватьКонтекстСводно(РабочийОбъект.ОсновныеВалюты);
			
		КонецЕсли; 		
		
	КонецЕсли; 
	
	Если Не ВыбраннаяВалюта=ВалютаОтображения Тогда
		
		ВалютаОтображения=ВыбраннаяВалюта;
		РабочийОбъект.ВалютаОтображения=ВыбраннаяВалюта;
		РабочийОбъект.ПересчитатьРабочиеТаблицыВВалютуОтображения();
		РабочийОбъект.ОбновитьСводныйКонтекст();	
		РабочийОбъект.ОбновитьКонтекстРаскрытия();
		
	КонецЕсли;
	
	Если НЕ Объект.ВыводитьВДерево Тогда
		
		РабочийОбъект.ТабДок=ТабДок;
		
	ИначеЕсли ТабДок.ВысотаТаблицы>0 Тогда 
		
		ТабДок.Очистить();
		
	КонецЕсли; 
	
	РабочийОбъект.ВыводитьВДерево=Объект.ВыводитьВДерево;
	РабочийОбъект.ВывестиДанныеОтчетов(Ложь);
	
	МаксАналитикОтчета=РабочийОбъект.МаксАналитикОтчета;
	МаксАналитикПоказателя=РабочийОбъект.МаксАналитикПоказателя;
	
	Если Объект.ВыводитьВДерево Тогда
		
		РеквизитыКДобавлению=Новый Массив;
		РеквизитыКУдалению=Новый Массив;
		
		Если СписокКолонокДерева.Количество()>0 Тогда
			
			Для Каждого Колонка ИЗ СписокКолонокДерева Цикл	
				
				РеквизитыКУдалению.Добавить("ТабДерево."+Колонка.Значение);	
				ЭтаФорма.Элементы.Удалить(ЭтаФорма.Элементы[Колонка.Значение]);
				
			КонецЦикла;
			
			СписокКолонокДерева.Очистить();
			
		КонецЕсли;
		
		Для Каждого Колонка ИЗ РабочийОбъект.ТабДерево.Колонки Цикл
			
			Если СтрНайти(Колонка.Имя,"_")=0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СписокКолонокДерева.НайтиПоЗначению(Колонка.Имя)=Неопределено Тогда
				
				СписокКолонокДерева.Добавить(Колонка.Имя,Колонка.Заголовок);
				
				РеквизитыКДобавлению.Добавить(Новый РеквизитФормы(Колонка.Имя,
				Колонка.ТипЗначения,
				"ТабДерево",
				Колонка.Заголовок,
				Ложь));
				
			КонецЕсли;
			
		КонецЦикла;
		
		ИзменитьРеквизиты(РеквизитыКДобавлению,РеквизитыКУдалению);	
		
		ТипПолеФормы = Тип("ПолеФормы");
		ФорматКолонок = "ДП=' '";
		ЭлементТабДерево = ЭтаФорма.Элементы.ТабДерево;
		
		Для Каждого Колонка ИЗ РабочийОбъект.ТабДерево.Колонки Цикл
			
			ИмяТекущейКолонки = Колонка.Имя;
			
			Если СтрНайти(ИмяТекущейКолонки, "_") = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭтаФорма.Элементы.Найти(ИмяТекущейКолонки)=Неопределено Тогда
				
				НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ИмяТекущейКолонки, ТипПолеФормы, ЭлементТабДерево);	
				НовыйЭлемент.ПутьКДанным	= "ТабДерево." + ИмяТекущейКолонки;
				НовыйЭлемент.Вид			= ВидПоляФормы.ПолеВвода;
				НовыйЭлемент.ДоступныеТипы 	= Колонка.ТипЗначения;
				НовыйЭлемент.Формат			= ФорматКолонок;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(РабочийОбъект.ТабДерево, "ТабДерево");
		
		// Картинки в заголовках колонок ///////////////////////////
		
		Для Каждого Колонка ИЗ РабочийОбъект.ТабДерево.Колонки Цикл
			
			Если НЕ РабочийОбъект.ГруппировкиВычисляемыеКолонки.Найти(Колонка.Заголовок,"ПредставлениеГруппировки") = Неопределено Тогда
				ТекЭлемент = СписокКолонокДерева.НайтиПоЗначению(Колонка.Имя);
				ТекЭлемент.Картинка = БиблиотекаКартинок.Версии;
			КонецЕсли;
			
		КонецЦикла;
		
		КолонокАналитикиРаскрытия=?(МаксАналитикПоказателя<=1,0,МаксАналитикПоказателя-1);
		
		Для Каждого Элемент ИЗ СписокКолонокДерева Цикл
			
			Если ПустаяСтрока(Элемент.Представление) Тогда
				
				ЭтаФорма.Элементы[Элемент.Значение].ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Нет;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПолучитьКартинкиЗаголовков(РабочийОбъект,СписокКолонокДерева);
		
		///////////////////////////////////////////////////////////
		
		ИндексГруппировкиСтроки=Объект.ГруппировкиСтроки.Индекс(НайтиСтрокуКоллекцииСервер(Объект.ГруппировкиСтроки,"Строка","Группировка"));
		
		СписокРазвернутыхУзлов.Очистить();
		
		Если ИндексГруппировкиСтроки>0 Тогда
			
			ИмяГруппировкиРазвернуть=Объект.ГруппировкиСтроки[ИндексГруппировкиСтроки-1].Группировка;
			МассивКоординат=РабочийОбъект.ТабКоординатыСтрок.НайтиСтроки(Новый Структура("ИмяГруппировки,Раскрытие",ИмяГруппировкиРазвернуть,Ложь));			
			
			Для Каждого СтрКоордината ИЗ МассивКоординат Цикл
				
				СтрДерева=РабочийОбъект.ТабДерево.Строки.Найти(СтрКоордината.НомерСтроки,"НомерСтроки",Истина);
				
				Если НЕ СтрДерева=Неопределено Тогда
					
					ТекСтрокаДерева=ОпределитьСтрокуПоАбсолютномуАдресуСервер(РабочийОбъект.ПолучитьАбсолютныйАдресСтрокиДерева(СтрДерева,РабочийОбъект.ТабДерево));
					
					ТекИдентификатор=ТекСтрокаДерева.ПолучитьИдентификатор();
					
					СписокРазвернутыхУзлов.Добавить(ТекИдентификатор);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		ТекШирина=?(ПерваяКолонка>0,ТабДок.Область(,ПерваяКолонка,,ПерваяКолонка).ШиринаКолонки,0);	
		
		ПолосаШиринаКолонки=ТекШирина;
		
	КонецЕсли; 
	
	
	РабочийОбъект.ВыгрузитьРасчетныеТаблицы();	
	
	ПоместитьРабочийОбъект(РабочийОбъект);
	
	УстановитьВидимостьСервер();
	ЕдиницаИзмерения=ТекЕдиницаИзмерения;
	
	ЕстьАнализОтклонений=ЕстьАнализОтклоненийСервер();
	
КонецПроцедуры // ОбновитьДанныеФормыСервер()

&НаСервереБезКонтекста
Процедура ПолучитьКартинкиЗаголовков(РабочийОбъект,СписокКолонокДерева)
	
	НомераКолонок=РабочийОбъект.ТабКоординатыКолонок.ВыгрузитьКолонку("НомерКолонки");
	
	РабочийОбъект.ЗапросКоординаты.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабКоординатыОбщ.НомерКолонки,
	|	ТабКоординатыОбщ.ЭкземплярОтчета,
	|	ЕСТЬNULL(РегистрСостоянийОбъектов.СостояниеОбъекта, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.ПустаяСсылка)) КАК Состояние
	|ИЗ
	|	ТабКоординатыОбщ КАК ТабКоординатыОбщ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(, Объект В (&МассивЭкземпляров)) КАК РегистрСостоянийОбъектов
	|		ПО ТабКоординатыОбщ.ЭкземплярОтчета = РегистрСостоянийОбъектов.Объект
	|ГДЕ
	|	ТабКоординатыОбщ.НомерКолонки В(&МассивНомеров)
	|	И НЕ ТабКоординатыОбщ.ЭкземплярОтчета = ЗНАЧЕНИЕ(Документ.НастраиваемыйОтчет.ПустаяСсылка)";
	
	РабочийОбъект.ЗапросКоординаты.УстановитьПараметр("МассивНомеров",НомераКолонок);
	РабочийОбъект.ЗапросКоординаты.УстановитьПараметр("МассивЭкземпляров",РабочийОбъект.ТабОтчеты.ВыгрузитьКолонку("ЭкземплярОтчета"));
	
	ЭкземплярыОтчетовКолонки=РабочийОбъект.ЗапросКоординаты.Выполнить().Выгрузить();
	ЭкземплярыОтчетовКолонки.Индексы.Добавить("НомерКолонки");
	
	СоответствиеСостояний=Новый Соответствие;
	СоответствиеСостояний.Вставить(Перечисления.СостоянияОтчетов.Запланирован,0);
	СоответствиеСостояний.Вставить(Перечисления.СостоянияОтчетов.Выполняется,1);
	СоответствиеСостояний.Вставить(Перечисления.СостоянияОтчетов.Возвращен,2);
	СоответствиеСостояний.Вставить(Перечисления.СостоянияОтчетов.Подготовлен,3);
	СоответствиеСостояний.Вставить(Перечисления.СостоянияОтчетов.Утвержден,4);
	СоответствиеСостояний.Вставить(Перечисления.СостоянияОтчетов.ЗаписанСОшибкой,-1);
	
	СписокКартинок=Новый СписокЗначений;
	
	Для Каждого НомерКолонки ИЗ НомераКолонок Цикл
		
		ИмяКолонки=РабочийОбъект.ТабДерево.Колонки[НомерКолонки-1].Имя;
		ЭлементКолонки=СписокКолонокДерева.НайтиПоЗначению(ИмяКолонки);
		
		МассивЭкземпляров=ЭкземплярыОтчетовКолонки.НайтиСтроки(Новый Структура("НомерКолонки",НомерКолонки));
		
		Если МассивЭкземпляров.Количество()=0 Тогда
			
			ЭлементКолонки.Картинка=БиблиотекаКартинок.Вычисление;
			Продолжить;
			
		КонецЕсли;
		
		ТекСостояние=4;
		СостояниеКолонки=Неопределено;
		КартинкаКолонки=Неопределено;
		
		Для Каждого ЭкземплярОтчетаКолонка  ИЗ МассивЭкземпляров Цикл
			
			ИндексСостояния=СоответствиеСостояний[ЭкземплярОтчетаКолонка.Состояние];
			
			Если (НЕ ИндексСостояния=Неопределено) И ИндексСостояния<ТекСостояние Тогда
				ТекСостояние=ИндексСостояния;
			КонецЕсли;
				
		КонецЦикла;
		
		Для Каждого КлючИЗначение ИЗ СоответствиеСостояний Цикл
			
			Если КлючИЗначение.Значение=ТекСостояние Тогда
				
				СостояниеКолонки=КлючИЗначение.Ключ;
				Прервать
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СостояниеКолонки=Перечисления.СостоянияОтчетов.Запланирован Тогда
			КартинкаКолонки=БиблиотекаКартинок.ОтчетЗапланирован;
		ИначеЕсли СостояниеКолонки=Перечисления.СостоянияОтчетов.Подготовлен Тогда
			КартинкаКолонки=БиблиотекаКартинок.ОтчетПодготовлен;
		ИначеЕсли СостояниеКолонки=Перечисления.СостоянияОтчетов.Выполняется Тогда
			КартинкаКолонки=БиблиотекаКартинок.ОтчетВыполняется;
		ИначеЕсли СостояниеКолонки=Перечисления.СостоянияОтчетов.Возвращен Тогда
			КартинкаКолонки=БиблиотекаКартинок.ОтчетВозвращен;
		ИначеЕсли СостояниеКолонки=Перечисления.СостоянияОтчетов.Утвержден Тогда
			КартинкаКолонки=БиблиотекаКартинок.ОтчетУтвержден;
		ИначеЕсли СостояниеКолонки=Перечисления.СостоянияОтчетов.ЗаписанСОшибкой Тогда
			КартинкаКолонки=БиблиотекаКартинок.ОтчетЗаписанСОшибкой;
		КонецЕсли;
		
		ЭлементКолонки.Картинка=КартинкаКолонки;
					
	КонецЦикла;
			
КонецПроцедуры // ОбновитьИндикациюСостояния()


&НаКлиенте
Процедура РазвернутьСтрокиДерева()
	
	Если ТабДерево.ПолучитьЭлементы().Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекИдентификатор ИЗ СписокРазвернутыхУзлов Цикл
		
		Если НЕ Элементы.ТабДерево.Развернут(ТекИдентификатор.Значение) Тогда
			
			Элементы.ТабДерево.Развернуть(ТекИдентификатор.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	#Если ТонкийКлиент Тогда
		
		Для Каждого ЭлементКолонки ИЗ СписокКолонокДерева Цикл
			
			Если ЭлементКолонки.Представление="НетЗаголовка" Тогда
				
				Элементы.ТабДерево.ПодчиненныеЭлементы[ЭлементКолонки.Значение].ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Нет;
				
			КонецЕсли;
			
			ЭлементФормы=Элементы.ТабДерево.ПодчиненныеЭлементы.Найти(ЭлементКолонки.Значение);
			
			Если Не ЭлементФормы=Неопределено Тогда
				
				ЭлементФормы.КартинкаШапки=ЭлементКолонки.Картинка;
				
			КонецЕсли;
			
		КонецЦикла;
		
	#КонецЕсли
				
КонецПроцедуры // РазвернутьСтрокиДерева() 

&НаСервере
Функция НайтиСтрокуКоллекцииСервер(Коллекция,Значение,Колонка)
	
	МассивСтрок=Коллекция.НайтиСтроки(Новый Структура(Колонка,Значение));
	
	Если МассивСтрок.Количество()>0 Тогда
		Возврат МассивСтрок[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // НайтиСтрокуКоллекции() 

&НаСервере
Процедура ДобавитьАналитикиВГруппировкиСервер(СтрАналитика=Неопределено,КодАналитики="")
	
	Если СтрАналитика=Неопределено Тогда
		СтрАналитика= НайтиСтрокуКоллекцииСервер(мТаблицаАналитикВидаОтчета,КодАналитики,"КодАналитики");
		Если СтрАналитика=Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтаФорма[СтрАналитика.КодАналитики+"Отбор"].Количество()>0 Тогда
		
		Если НайтиСтрокуКоллекцииСервер(Объект.ГруппировкиСтроки,СтрАналитика.КодАналитики,"Группировка")=Неопределено Тогда
			
			НоваяСтрока=Объект.ГруппировкиСтроки.Добавить();
			НоваяСтрока.ПредставлениеГруппировки=СтрАналитика.НаименованиеАналитики;
			НоваяСтрока.Группировка=СтрАналитика.КодАналитики;
			
		КонецЕсли;
		
	Иначе // Удалим аналитику из группировок
		
		СтрГруппировка=НайтиСтрокуКоллекцииСервер(Объект.ГруппировкиСтроки,СтрАналитика.КодАналитики,"Группировка");
		Если Не СтрГруппировка=Неопределено Тогда
			Объект.ГруппировкиСтроки.Удалить(СтрГруппировка);
		Иначе СтрГруппировка=НайтиСтрокуКоллекцииСервер(Объект.ГруппировкиКолонки,СтрАналитика.КодАналитики,"Группировка");
			Если Не СтрГруппировка=Неопределено Тогда
				Объект.ГруппировкиКолонки.Удалить(СтрГруппировка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры //

&НаСервере
Процедура ПриИзмененииБланкаОтчетаСервер()
	
	ИдентификаторФормы=ЭтаФорма.УникальныйИдентификатор;
	СформироватьТаблицуСтрок();
			
КонецПроцедуры // ПриИзмененииБланкаОтчета()

&НаСервере
Процедура ОбновитьВычисляемыеКолонкиСервер()

	Для Каждого Строка ИЗ Объект.ГруппировкиВычисляемыеКолонки Цикл
		
		ТекЗначение=Строка.Отображать;
		
		Если Строка.Отображать И (НЕ ОпределитьДоступностьВычисляемойКолонкиСервер(Строка.Группировка)) Тогда
			
			Строка.Отображать=ложь;
			
		Иначе
			
			Строка.Отображать=ТекЗначение;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ОбновитьВычисляемыеКолонки()

&НаСервере
Функция ВернутьСтруктуруГруппировокДляРаспределенияСервер()
	
	СтруктураЗафиксированныхГруппировок=Новый Структура;
	СписокГруппировокДляРаспределения=Новый СписокЗначений;
	
	Для Каждого Строка ИЗ Объект.ГруппировкиСтроки Цикл
		
		Если Строка.Группировка="Строка" Тогда
			Продолжить;		
		ИначеЕсли ТекДанныеЯчейки.Свойство(Строка.Группировка) Тогда
			СтруктураЗафиксированныхГруппировок.Вставить(Строка.Группировка,ТекДанныеЯчейки[Строка.Группировка]);
		Иначе	
			СписокГруппировокДляРаспределения.Добавить(Строка.Группировка,Строка.ПредставлениеГруппировки);	
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Колонка ИЗ Объект.ГруппировкиКолонки Цикл
		
		Если Колонка.Группировка="Колонка" Тогда
			Продолжить;		
		ИначеЕсли ТекДанныеЯчейки.Свойство(Колонка.Группировка) Тогда
			СтруктураЗафиксированныхГруппировок.Вставить(Колонка.Группировка,ТекДанныеЯчейки[Колонка.Группировка]);
		Иначе
			СписокГруппировокДляРаспределения.Добавить(Колонка.Группировка,Колонка.ПредставлениеГруппировки);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанных=Новый Структура;
	СтруктураДанных.Вставить("СтруктураЗафиксированныхГруппировок",СтруктураЗафиксированныхГруппировок);
	СтруктураДанных.Вставить("СписокГруппировокДляРаспределения",СписокГруппировокДляРаспределения);
	
	Возврат СтруктураДанных;	
	
КонецФункции // ВернутьСтруктуруГруппировокДляРаспределения()

&НаСервере
Функция ЕстьАнализОтклоненийСервер() Экспорт
		
	Для Каждого Колонка Из Объект.ГруппировкиВычисляемыеКолонки Цикл
		
		Если (Колонка.Группировка="ОтклонениеАбс" ИЛИ Колонка.Группировка="ОтклонениеОтн")
			И Колонка.Отображать Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции // ЕстьАнализОтклонений()

&НаСервере
Процедура ПолучитьЗначениеДелителяСервер()
	
	Если ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000000") Тогда
		ТекущийДелитель = 1000000;
	ИначеЕсли ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000") Тогда
		ТекущийДелитель =  1000;
	Иначе
		ТекущийДелитель =  1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеОбъектаДляПередачиСервер()
	
	СтруктураДанных=Новый Структура;
	СтруктураДанных.Вставить("ВидОтчета",Объект.ВидОтчета);
	СтруктураДанных.Вставить("РазделениеПоПроектам",Объект.РазделениеПоПроектам);
	СтруктураДанных.Вставить("ОсновнаяВалюта",Объект.ОсновнаяВалюта);
	СтруктураДанных.Вставить("БланкОтчета",Объект.БланкОтчета);
	СтруктураДанных.Вставить("СоздаватьЭкземплярыОтчетов",Объект.СоздаватьЭкземплярыОтчетов);
	СтруктураДанных.Вставить("ГруппироватьПоИерархииСтрок",Объект.ГруппироватьПоИерархииСтрок);
	СтруктураДанных.Вставить("ГруппироватьСтроки",Объект.ГруппироватьСтроки);
	СтруктураДанных.Вставить("БазовоеЗначениеИзмерения",Объект.БазовоеЗначениеИзмерения);
		
	ТабГруппировкиСтроки=Новый Массив;
	Для Каждого Строка ИЗ Объект.ГруппировкиСтроки Цикл
		
		СтруктураСтрока=Новый Структура;
		СтруктураСтрока.Вставить("Группировка",Строка.Группировка);
		СтруктураСтрока.Вставить("ПредставлениеГруппировки",Строка.ПредставлениеГруппировки);
		
		ТабГруппировкиСтроки.Добавить(СтруктураСтрока);
		
	КонецЦикла;
	СтруктураДанных.Вставить("Таб_ГруппировкиСтроки",ТабГруппировкиСтроки);

	
	ТабГруппировкиКолонки=Новый Массив;
	Для Каждого Колонка ИЗ Объект.ГруппировкиКолонки Цикл
		
		СтруктураСтрока=Новый Структура;
		СтруктураСтрока.Вставить("Группировка",Колонка.Группировка);
		СтруктураСтрока.Вставить("ПредставлениеГруппировки",Колонка.ПредставлениеГруппировки);
		
		ТабГруппировкиКолонки.Добавить(СтруктураСтрока);
		
	КонецЦикла;
	СтруктураДанных.Вставить("Таб_ГруппировкиКолонки",ТабГруппировкиКолонки);
	
	ТабГруппировкиВычисляемыеКолонки=Новый Массив;
	Для Каждого Колонка ИЗ Объект.ГруппировкиВычисляемыеКолонки Цикл
		
		СтруктураСтрока=Новый Структура;
		СтруктураСтрока.Вставить("Группировка",Колонка.Группировка);
		СтруктураСтрока.Вставить("ПредставлениеГруппировки",Колонка.ПредставлениеГруппировки);
		СтруктураСтрока.Вставить("Отображать",Колонка.Отображать);
		СтруктураСтрока.Вставить("УсловноеОформление",Колонка.УсловноеОформление);

		ТабГруппировкиВычисляемыеКолонки.Добавить(СтруктураСтрока);
		
	КонецЦикла;
	
	СтруктураДанных.Вставить("Таб_ГруппировкиВычисляемыеКолонки",ТабГруппировкиВычисляемыеКолонки);

	Возврат СтруктураДанных;	
	
КонецФункции // ПодготовитьДанныеОбъектаДляПередачиСервер() 

&НаСервере
Функция ОпределитьДоступностьВычисляемойКолонкиСервер(ИмяКолонки)
	
	Если ИмяКолонки="ДоляВИтогеПоПериметру" Тогда
		
		Возврат Ложь;
		
	ИначеЕсли ИмяКолонки="ДоляВИтогеПоГруппировке" И ГруппировкаБазис="Сценарий" Тогда
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
		
КонецФункции // ОпределитьДоступностьВычисляемойКолонки()

&НаКлиенте
Процедура ГруппировкиВычисляемыеКолонкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ЕстьВычисляемыеКолонки() Тогда
		
		ОпределитьГруппировкуБазис();
		ОбновитьСписокБазис();
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДанныеРасшифровкиДерево(ЭлементЯчейка)

	Возврат ПолучитьРасшифровкуЯчейки(
						ПолучитьСтруктуруДанныхФормы(),
						Элементы.ТабДерево.ТекущиеДанные.НомерСтроки,
						Элементы.ТабДерево.ПодчиненныеЭлементы.Индекс(ЭлементЯчейка)+1);

КонецФункции

&НаКлиенте
Функция ПолучитьДанныеРасшифровкиБланк()
	
	ТекущаяОбласть=Элементы.ТабДок.ТекущаяОбласть;
	
	Если ТекущаяОбласть.ТипОбласти=ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
		И ТекущаяОбласть.Верх=ТекущаяОбласть.Низ 
		И ТекущаяОбласть.Лево=ТекущаяОбласть.Право 
		И ТекущаяОбласть.СодержитЗначение Тогда 
		
		ТекРасшифровка=ПолучитьРасшифровкуЯчейки(ПолучитьСтруктуруДанныхФормы(),ТекущаяОбласть.Верх,ТекущаяОбласть.Лево);
		
	КонецЕсли;
	
	Возврат ТекРасшифровка;
		
КонецФункции
 

&НаКлиенте
Процедура ТабДеревоПриАктивизацииЯчейки(Элемент)
	
	Элементы.ТабДерево.ЗакончитьРедактированиеСтроки(Ложь);	
	
	Если Элементы.ТабДерево.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриАктивизацииЯчейкиТаблицы(Элемент);
				
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииЯчейкиТаблицы(Элемент=Неопределено)
	
	ТекЭкземплярОтчета=Неопределено;
	ТекДанныеЯчейки=Неопределено;
	ТекРасшифровка=Новый Структура;
	
	Если Объект.ВыводитьВДерево И (НЕ Элемент.ТекущийЭлемент=Неопределено) Тогда
		
		ДанныеРасшифровки = ПолучитьДанныеРасшифровкиДерево(Элемент.ТекущийЭлемент);
		
	Иначе
		
		ДанныеРасшифровки= ПолучитьДанныеРасшифровкиБланк();
		
	КонецЕсли; 
	
	Если ДанныеРасшифровки=Неопределено Тогда
		
		Элементы.ПанельРедактированиеОтчета.ТекущаяСтраница=Элементы.ПанельРедактированиеОтчета.ПодчиненныеЭлементы.СводныеДанные;
		
		Элементы.ИзменитьПоказателиОтДостигнутого.Видимость = Ложь;
		Элементы.ИзменитьПоказатели.Видимость = Ложь;
		Элементы.ОткрытьФакторныйАнализ.Видимость = Ложь;
		
		Элементы.ТабДеревоКонтекстноеМенюОчиститьЗначениеПоказателя.Доступность = Ложь;
		Элементы.ТабДеревоКонтекстноеМенюВосстановитьЗначениеИзБуфера.Доступность = Ложь;
		
		Элементы.ТабДеревоКонтекстноеМенюГруппа1.Доступность =Ложь;
		Элементы.ТабДеревоКонтекстноеМенюСкопироватьЗначениеПоказателя.Доступность = Ложь;
		
		Возврат;
		
	КонецЕсли; 
	
	ТекРасшифровка=ДанныеРасшифровки.ТекРасшифровка;
	
	Если НЕ ТекРасшифровка=Неопределено Тогда
		
		ТекДанныеЯчейки=ДанныеРасшифровки.ТекДанныеЯчейки;
		
	КонецЕсли;					
		
	Если Не ТекРасшифровка=Неопределено Тогда 
		
		ЕстьЭкземплярОтчета=ЗначениеЗаполнено(ТекДанныеЯчейки.ЭкземплярОтчета);
		ЗаполняемыйПоказатель=ЕстьЭкземплярОтчета 
		И ТекДанныеЯчейки.Свойство("Показатель");
		
		Если ЕстьЭкземплярОтчета Тогда
			
			Элементы.ПанельРедактированиеОтчета.ТекущаяСтраница=Элементы.ПанельРедактированиеОтчета.ПодчиненныеЭлементы.РедактированиеЭкземпляра;
			
			Элементы.ДействияФормы.ПодчиненныеЭлементы.ДействияФормыРедактирование.Доступность=ЗаполняемыйПоказатель;
			
			Если Объект.ВыводитьВДерево Тогда
				
				ТекДанныеЯчейки.Вставить("Значение",Элементы.ТабДерево.ТекущиеДанные[СтрЗаменить(Элемент.ТекущийЭлемент.Имя,"Дерево_","")]);
				
			Иначе
				
				ТекДанныеЯчейки.Вставить("Значение",Элементы.ТабДок.ТекущаяОбласть.Значение);
				
			КонецЕсли; 
			
			Если ТекДанныеЯчейки.Заблокирован Тогда
				
				Элементы.ДействияФормы.ПодчиненныеЭлементы.ДействияФормыРедактирование.Пометка=Истина;
				
			Иначе
				
				Элементы.ДействияФормы.ПодчиненныеЭлементы.ДействияФормыРедактирование.Пометка=Ложь;
				
			КонецЕсли;
			
			Элементы.ЧтениеНеактуальныхЗаписей.Пометка		= ТекДанныеЯчейки.ЧтениеНеактуальныхЗаписей;
			Элементы.НеВноситьИзменения.Пометка				= ТекДанныеЯчейки.НеВноситьИзменения;
			Элементы.ВключитьРасширеннуюДиагностику.Пометка	= ТекДанныеЯчейки.ВключитьРасширеннуюДиагностику;
			
		Иначе
			
			Элементы.ПанельРедактированиеОтчета.ТекущаяСтраница=Элементы.СводныеДанные;
			
		КонецЕсли;	 
		
		Элементы.ИзменитьПоказателиОтДостигнутого.Видимость = НЕ ТекДанныеЯчейки.Раскрытие;
		Элементы.ИзменитьПоказатели.Видимость = НЕ ТекДанныеЯчейки.Раскрытие;
		Элементы.ОткрытьФакторныйАнализ.Видимость = НЕ ТекДанныеЯчейки.Раскрытие;	
		
	КонецЕсли;
	
	Если НЕ Объект.ВыводитьВДерево Тогда
						
		Элементы.ТабДок.Защита=НЕ ПроверитьВозможностьРедактирования(Ложь);
			
	КонецЕсли; 
	
КонецПроцедуры
 

&НаКлиенте
Функция ПолучитьСтруктуруДанныхФормы()
	
	СтруктураДанных=Новый Структура;
	СтруктураДанных.Вставить("ИдентификаторРодителя",		ЭтаФорма.УникальныйИдентификатор);
	СтруктураДанных.Вставить("РабочийОбъектАдрес",			РабочийОбъектАдрес);
	СтруктураДанных.Вставить("ТекущийДелитель",				ТекущийДелитель);
	СтруктураДанных.Вставить("ВалютаОтображения",			ВалютаОтображения);
	СтруктураДанных.Вставить("ВычислятьПриИзменении",Истина);
	СтруктураДанных.Вставить("ТекДанныеЯчейки",				ТекДанныеЯчейки);
	СтруктураДанных.Вставить("ОбластьРучногоИзменения",		Неопределено);
	
	Возврат СтруктураДанных;
	
КонецФункции // СтруктураДанныхФормы()

&НаКлиенте
Процедура ОбновитьРеквизитыФормы(ДанныеФормы)
	
	РабочийОбъектАдрес= ДанныеФормы.РабочийОбъектАдрес;
	Модифицированность=Истина;
		
КонецПроцедуры // ОбновитьРеквизитыФормы() 

&НаКлиенте
Функция ПроверитьВозможностьРедактирования(ВыводитьСообщение=Истина)
	
	ВозможноРедактирование = (НЕ ТекДанныеЯчейки=Неопределено)
	И ЗначениеЗаполнено(ТекДанныеЯчейки.ЭкземплярОтчета)
	И ТекДанныеЯчейки.Свойство("Показатель");
	
	Если ВозможноРедактирование И (НЕ ТекДанныеЯчейки.Заблокирован) Тогда
		
		СтруктураДанныхФормы=Новый Структура;
		СтруктураДанныхФормы.Вставить("РабочийОбъектАдрес",РабочийОбъектАдрес);
		СтруктураДанныхФормы.Вставить("ИдентификаторФормы",ЭтаФорма.УникальныйИдентификатор);
		
		ТекПометка=Элементы.ДействияФормыРедактирование.Пометка;
		
		ТекДанныеЯчейки.Вставить("Заблокирован",ПодготовитьОтчетДляРедактирования(ТекДанныеЯчейки.ЭкземплярОтчета,СтруктураДанныхФормы,ТекПометка));
			
		РабочийОбъектАдрес=СтруктураДанныхФормы.РабочийОбъектАдрес;
		Элементы.ДействияФормыРедактирование.Пометка=ТекПометка;
		ТекДанныеЯчейки.Вставить("СписокРедактируемыхПоказателей",СтруктураДанныхФормы.СписокРедактируемыхПоказателей);
			
		ВозможноРедактирование=ТекДанныеЯчейки.Заблокирован;
				
	КонецЕсли; 
	
	Если ВозможноРедактирование И ТекДанныеЯчейки.СписокРедактируемыхПоказателей.НайтиПоЗначению(ТекДанныеЯчейки.Показатель)=Неопределено И ВыводитьСообщение Тогда
		
		ПоказатьПредупреждение(,"Показатель, относящийся к данной ячейке, вычисляется по формуле и не редактируется вручную.");
		ВозможноРедактирование=Ложь;
		
	КонецЕсли;
	
	Возврат ВозможноРедактирование;
		
КонецФункции // ПроверитьВозможностьРедактирования() 

&НаКлиенте
Процедура ТабДеревоПередНачаломИзменения(Элемент, Отказ)
	 			
	Отказ = НЕ ПроверитьВозможностьРедактирования();
	
	Если НЕ Отказ Тогда
		
		Элемент.ТекущийЭлемент.ОграничениеТипа=ТекДанныеЯчейки.ТипЗначения;
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьСтрокуПоАбсолютномуАдресу(АдресСтроки)
	
	ТекСтрока=ТабДерево.ПолучитьЭлементы()[АдресСтроки[0]];
	
	Для Индекс=1 ПО АдресСтроки.Количество()-1 Цикл
		
		ТекСтрока=ТекСтрока.ПолучитьЭлементы()[АдресСтроки[Индекс]];
		
	КонецЦикла;
	
	Возврат ТекСтрока;
			
КонецФункции // ОпределитьСтрокуПоАбсолютномуАдресу()

&НаСервере
Функция ОпределитьСтрокуПоАбсолютномуАдресуСервер(АдресСтроки)
	
	ТекСтрока=ТабДерево.ПолучитьЭлементы()[АдресСтроки[0]];
	
	Для Индекс=1 ПО АдресСтроки.Количество()-1 Цикл
		
		ТекСтрока=ТекСтрока.ПолучитьЭлементы()[АдресСтроки[Индекс]];
		
	КонецЦикла;
	
	Возврат ТекСтрока;
			
КонецФункции // ОпределитьСтрокуПоАбсолютномуАдресу()



&НаКлиенте
Процедура ТабДеревоПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	ВведенноеЗначение=Элементы.ТабДерево.ТекущиеДанные[Элемент.ТекущийЭлемент.Имя];
	
	ДанныеФормы=ПолучитьСтруктуруДанныхФормы();
	УстановитьЗначениеПоказателя(ДанныеФормы, ВведенноеЗначение, ТекДанныеЯчейки.ЭкземплярОтчета);
	ОбновитьРеквизитыФормы(ДанныеФормы);
		
	Для Каждого ИзмененнаяЯчейка ИЗ ДанныеФормы.МассивИзмененныхОбластей Цикл
		
		ТекСтрока=ОпределитьСтрокуПоАбсолютномуАдресу(ИзмененнаяЯчейка.АдресСтроки);
		
		ИмяЭлемента=СписокКолонокДерева[ИзмененнаяЯчейка.АдресКолонки-7].Значение;
		
		ТекСтрока[ИмяЭлемента]=ИзмененнаяЯчейка.Значение;
		
	КонецЦикла;
				
	Элементы.ТабДерево.Обновить();
	
КонецПроцедуры


&НаКлиенте
Процедура ТабДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	Если Поле.Имя="ДанныеАналитики" Тогда
		
		#Если ТонкийКлиент Тогда
			ФормаОтображения=ПолучитьФорму("Обработка.ГрупповоеРедактированиеЭкземпляровОтчета.Форма.ФормаПолучениеДанныхУправляемая",,ЭтаФорма);
			ФормаОтображения.Открыть();
		#КонецЕсли
		
		ПолучитьДанныеПоАналитике(Элемент.ТекущиеДанные.НомерСтроки);
		
		Если Элемент.ТекущиеДанные.ПолучитьЭлементы().Количество()>0 И (НЕ Элементы.ТабДерево.Развернут(ВыбраннаяСтрока)) Тогда
			Элементы.ТабДерево.Развернуть(ВыбраннаяСтрока);
		КонецЕсли;
		
		#Если ТонкийКлиент Тогда
			ФормаОтображения.Закрыть();
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеПоАналитике(НомерСтрокиДерева)
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	РабочийОбъект.МассивДобавленныхСтрокКПередаче=Новый Массив;
	
	ВыбраннаяСтрока=РабочийОбъект.ТабДерево.Строки.Найти(НомерСтрокиДерева,"НомерСтроки",Истина);
	
	РабочийОбъект.ЗапросДанные.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	РабочийОбъект.ЗапросКоординаты.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	РабочийОбъект.ЗапросДанныеРаскрытия.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	РабочийОбъект.ЗапросКоординаты.Текст="ВЫБРАТЬ * Поместить ТабКоординатыОбщ ИЗ &ТабКоординатыОбщ КАК ТабКоординатыОбщ";
	РабочийОбъект.ЗапросКоординаты.УстановитьПараметр("ТабКоординатыОбщ",РабочийОбъект.ТабКоординатыОбщ);
	РабочийОбъект.ЗапросКоординаты.Выполнить();
	
	РабочийОбъект.ЗапросДанные.Текст="ВЫБРАТЬ * Поместить ТабПоказатели ИЗ &ТабПоказатели КАК ТабПоказатели";
	РабочийОбъект.ЗапросДанные.УстановитьПараметр("ТабПоказатели",РабочийОбъект.ТаблицыЗапросаДанные.ТабПоказатели);
	РабочийОбъект.ЗапросДанные.Выполнить();
	
	РабочийОбъект.ЗапросДанныеРаскрытия.Текст="ВЫБРАТЬ * Поместить ТабПоказатели ИЗ &ТабПоказатели КАК ТабПоказатели";
	РабочийОбъект.ЗапросДанныеРаскрытия.УстановитьПараметр("ТабПоказатели",РабочийОбъект.ТаблицыЗапросаДанные.ТабПоказатели);
	РабочийОбъект.ЗапросДанныеРаскрытия.Выполнить();
		
	РабочийОбъект.РазвернутьСтрокуПоАналитике(ВыбраннаяСтрока);
	
	// Добавим новые строки в дерево формы
	Для Каждого СтрокаКДобавлению ИЗ РабочийОбъект.МассивДобавленныхСтрокКПередаче Цикл
		
		СтрокаРодитель=ОпределитьСтрокуПоАбсолютномуАдресуСервер(СтрокаКДобавлению.АдресРодителя);
		ИндексВставки=СтрокаКДобавлению.ИндексВставки;
		
		Если ИндексВставки>=0 Тогда
			
			НоваяСтрока=СтрокаРодитель.ПолучитьЭлементы().Вставить(ИндексВставки);
			
		Иначе
			
			НоваяСтрока=СтрокаРодитель.ПолучитьЭлементы().Добавить();
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению.ДанныеНовойСтроки);
		
	КонецЦикла;
	
	РабочийОбъект.ТабКоординатыОбщ=РабочийОбъект.ПолучитьТаблицуИЗЗапроса(РабочийОбъект.ЗапросКоординаты,"ТабКоординатыОбщ");
	
	ПоместитьРабочийОбъект(РабочийОбъект);
	
КонецПроцедуры // ПолучитьДанныеПоАналитике()

&НаСервере
Функция ЕстьИзмененныеОтчеты(РабочийОбъектАдрес)
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	Попытка
		
		Если РабочийОбъект.ТабОтчеты.Колонки.Найти("ОтчетИзменен") <> Неопределено Тогда
			
			СтрОтчет=РабочийОбъект.ТабОтчеты.Найти(Истина, "ОтчетИзменен");
			Возврат НЕ СтрОтчет=Неопределено;
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;		
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
		
КонецФункции // ЕстьИзмененныеОтчеты()

&НаСервере
Процедура СнятьБлокировкуОтчетов(РабочийОбъектАдрес)
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	Для Каждого СтрОтчет ИЗ РабочийОбъект.ТабОтчеты Цикл
		
		Если СтрОтчет.ЕстьЭкземплярОтчета И СтрОтчет.ОтчетИнициализирован Тогда
			
			РабочийОбъект.ПолучитьДокументОбъект(СтрОтчет);
			
			Попытка
				СтрОтчет.ОтчетОбъект.Разблокировать();
				СтрОтчет.ОтчетИзменен=Ложь;
			Исключение
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СнятьБлокировкуОтчетов() 

&НаКлиенте
Процедура ИзменитьПоказатели(Команда)
	
	Если НЕ Элементы.ДействияФормыРедактирование.Пометка Тогда
		Сообщить("Необходимо перейти в режим редактирования!");
		Возврат;
	КонецЕсли;	
	
	СтруктураПараметров=ПодгтотовитьСтруткуруПараметровКорректировки();
	СтруктураПараметров.Вставить("ОтДостигнутого",Ложь);
	ФормаВыбораЗначений = ПолучитьФорму("Документ.НастраиваемыйОтчет.Форма.ГрупповоеИзменениеПоказателей", СтруктураПараметров);
	ФормаВыбораЗначений.ОткрытьМодально();

КонецПроцедуры

&НаСервере
//Заполняет показатели на основании данных из регистра.
Функция ПодгтотовитьСтруткуруПараметровКорректировки()
	
	//РабочийОбъект=ПолучитьРабочийОбъект();
	Запрос      = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Показатель,
	|	ПоказателиОтчетов.Код
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Код В(&Код)
	|	И ПоказателиОтчетов.Владелец = &Владелец
	|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)";
	//|	И ПоказателиОтчетов.СпособОбработки = &Заполнение";
	
	Запрос.УстановитьПараметр("Владелец", Объект.ВидОтчета);
	//Запрос.УстановитьПараметр("Правило", Объект.ПравилоОбработки);
	////Запрос.УстановитьПараметр("Заполнение", Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение);
	Запрос.УстановитьПараметр("Код", ТекДанныеЯчейки.Показатель.Код);
	ТаблицаЯчеек= Запрос.Выполнить().Выгрузить();
	
	ТаблицаЯчеек.Колонки.Добавить("ЗначениеЧисло",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ТаблицаЯчеек.Колонки.Добавить("ИтоговоеЗначение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ТаблицаЯчеек.Колонки.Добавить("ТекущееЗначение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ТаблицаЯчеек.Колонки.Добавить("КоэффициентДостоверности",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5,2));
	ТаблицаЯчеек.Колонки.Добавить("АбсКоррекция",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ТаблицаЯчеек.Колонки.Добавить("ОтнКоррекция",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5,2));
	ТаблицаЯчеек.Колонки.Добавить("ОтнТекущего",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5,2));
	
	Для Каждого СтрКорректировка ИЗ ТаблицаЯчеек Цикл
		
		СтрКорректировка.ТекущееЗначение=ТекДанныеЯчейки.Значение;
		СтрКорректировка.ИтоговоеЗначение=ТекДанныеЯчейки.Значение;
		
	КонецЦикла;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ВидОтчета",Объект.ВидОтчета);
	СтруктураПараметров.Вставить("ТаблицаЯчеекАдрес",ПоместитьВоВременноеХранилище(ТаблицаЯчеек));
	СтруктураПараметров.Вставить("Организация",ТекДанныеЯчейки.Организация);
	СтруктураПараметров.Вставить("ОсновнаяВалюта",Объект.ОсновнаяВалюта);
	СтруктураПараметров.Вставить("Сценарий",ТекДанныеЯчейки.Сценарий);
	СтруктураПараметров.Вставить("Период",УправлениеОтчетамиУХ.ПолучитьСледующийПериод(ТекДанныеЯчейки.ПериодОтчета,-1));
	СтруктураПараметров.Вставить("ИсходныйПериод",ТекДанныеЯчейки.ПериодОтчета);
	СтруктураАналитик = Новый Структура;
	//
	//Для Инд = 1 По 5 Цикл
	//	Если Объект.ВидОтчета.МетаДанные().Реквизиты.Найти("ВидАналитики" + Инд) <> Неопределено Тогда
	//		
	//		Если ЗначениеЗаполнено(Объект.ВидОтчета["ВидАналитики" + Инд]) Тогда
	//			СтруктураАналитик.Вставить("Аналитика" + Инд, ЭтотОбъект["Аналитика" + Инд]);
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//КонецЦикла;
	//
	//СтруктураПараметров.Вставить("АналитикиОтчета",СтруктураАналитик);
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура ИзмениитьПоказателиОтДостигнутого(Команда)
	
	Если НЕ Элементы.ДействияФормыРедактирование.Пометка Тогда
		Сообщить("Необходимо перейти в режим редактирования!");
		Возврат;
	КонецЕсли;	
	
	СтруктураПараметров=ПодгтотовитьСтруткуруПараметровКорректировки();
	СтруктураПараметров.Вставить("ОтДостигнутого",Истина);
	ФормаВыбораЗначений = ПолучитьФорму("Документ.НастраиваемыйОтчет.Форма.ГрупповоеИзменениеПоказателей", СтруктураПараметров);
	ФормаВыбораЗначений.ОткрытьМодально();

КонецПроцедуры

&НаСервере
Процедура ИзменитьПоказателиСервер(Параметр)
		
	РабочийОбъект=ПолучитьРабочийОбъект();
		
	ТекЭкземплярОтчета=РабочийОбъект.ТабОтчеты.Найти(ТекДанныеЯчейки.ЭкземплярОтчета,"ЭкземплярОтчета");
	
	ТекЭкземплярОтчета.ОтчетИзменен =Истина;
	
	Если ТекЭкземплярОтчета=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;

	РабочийОбъект.ПолучитьДокументОбъект(ТекЭкземплярОтчета);
			
	ОтчетОбъект=ТекЭкземплярОтчета.ОтчетОбъект;	
	
	СтруктураОтбора         = Новый Структура;
	СтруктураАналитикОтчета = Новый Структура;
	
	РабочаяТаблица=ПолучитьИзВременногоХранилища(Параметр.РабочаяТаблица);
	РабочаяТаблицаРаскрытий = ПолучитьИзВременногоХранилища(Параметр.АдресТабТекущихРаскрытий);
	РабочаяТаблицаРаскрытий.Колонки["ИтоговоеЗначение"].Имя="Значение";
	ОтборДанных = Параметр.ОтборДанных;
	
	ОбработкаРаскрытий=Параметр.ОбработкаРаскрытий;
	
	Для Инд = 1 По 5 Цикл
		Если Объект.ВидОтчета.Метаданные().Реквизиты.Найти("ВидАналитики" + Инд) <> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(Объект.ВидОтчета["ВидАналитики" + Инд]) Тогда
				
				Если Не РабочаяТаблица.Колонки.Найти("ВидАналитики" + Инд)=Неопределено Тогда
					СтруктураОтбора.Вставить("Аналитика" + Инд, Неопределено);
				КонецЕсли;
				
			Иначе
				СтруктураАналитикОтчета.Вставить("Аналитика" + Инд, ЭтотОбъект["Аналитика" + Инд]);
			КонецЕсли;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка на то, что не все аналитики заняты аналитиками на уровне отчета.
	ЕстьРаскрытияАналитик = СтруктураОтбора.Количество() <> 0;
		
	Если ЕстьРаскрытияАналитик Тогда
		
		МассивСтрокСвернутыхПараметров  = РабочаяТаблица.НайтиСтроки(СтруктураОтбора);
		ТаблицаСвернутыхПараметров = РабочаяТаблица.СкопироватьКолонки();
		
		Для Каждого Строка Из МассивСтрокСвернутыхПараметров Цикл
			
			ЗаполнитьЗначенияСвойств(ТаблицаСвернутыхПараметров.Добавить(), Строка);
			РабочаяТаблица.Удалить(Строка);
			
		КонецЦикла;
		
	Иначе
		
		ТаблицаСвернутыхПараметров = РабочаяТаблица.Скопировать();
		
	КонецЕсли;	
	
	// Собственно заполнение таблиц мПоказатели и мПоказателиРаскрытия.
	
	ОтчетОбъект.НачатьНовуюОперацию();
	
	СтруктураОтбораАналитик = Новый Структура("Показатель");
	Для Инд =1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		СтруктураОтбораАналитик.Вставить("Аналитика" + Инд);
	КонецЦикла;
		
	Для Каждого Строка Из ТаблицаСвернутыхПараметров Цикл
		
		Показатель = ОтчетОбъект.мСоответствиеДляПоискаПоСсылке[Строка.Показатель];
		
		Если ЕстьРаскрытияАналитик Тогда
			
			СтрокиРаскрытийНов = РабочаяТаблица.НайтиСтроки(Новый Структура("Показатель", Строка.Показатель));
			СтрокиРаскрытийТек = ОтчетОбъект.мПоказателиРаскрытия.НайтиСтроки(Новый Структура("Показатель", Строка.Показатель));
			
			Для Каждого СтрокаТек ИЗ СтрокиРаскрытийТек Цикл
				ОтчетОбъект.мПоказателиРаскрытия.Удалить(СтрокаТек);
			КонецЦикла;
			
			Если ОбработкаРаскрытий="Пересчитать" Тогда 
				
				Для Каждого СтрокаРаскрытия Из СтрокиРаскрытийНов Цикл
					
					СтрокаПоказателейРаскрытия = РабочийОбъект.мПоказателиРаскрытия.Добавить();
					
					// Заполнение аналитик на уровне отчета для показателя раскрытия.
					ЗаполнитьЗначенияСвойств(СтрокаПоказателейРаскрытия, СтруктураАналитикОтчета);
					
					// Заполнение ссылки на показатель, аналитик на уровне показателя.
					ЗаполнитьЗначенияСвойств(СтрокаПоказателейРаскрытия, СтрокаРаскрытия);
					
					УправлениеОтчетамиУХ.ТипизироватьАналитикиПринудительно(ОтчетОбъект,СтрокаПоказателейРаскрытия,Показатель);
					
					// Заполнение значения раскрытияпоказателя;
					СтрокаПоказателейРаскрытия.Значение = СтрокаРаскрытия.ИтоговоеЗначение;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
			
		Если ОтборДанных Тогда
			
			СтрокиРаскрытия = РабочаяТаблицаРаскрытий.НайтиСтроки(Новый Структура("Показатель", Строка.Показатель));
			
             УстановитьЗначениеПоказателяВручную(ОтчетОбъект,Показатель, "Очистить", Неопределено);
			 
			 ИтогПоПоказателю = 0; 
			 
			 Для Каждого СтрокаТек ИЗ СтрокиРаскрытия Цикл
				
				ИтогПоПоказателю =ИтогПоПоказателю+СтрокаТек.Значение; 
				УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ОтчетОбъект,СтрокаТек.Значение,СтрокаТек.Показатель,СтрокаТек.Аналитика1,
				СтрокаТек.Аналитика2,СтрокаТек.Аналитика3,СтрокаТек.Аналитика4,СтрокаТек.Аналитика5);
				
			КонецЦикла;
			УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказатели(ОтчетОбъект,Показатель, ИтогПоПоказателю);
		КонецЕсли;
		
		УстановитьЗначениеПоказателяВручную(ОтчетОбъект,Показатель, ОбработкаРаскрытий, Строка.ИтоговоеЗначение);
		
	КонецЦикла;
	//ПоместитьРабочийОбъект(РабочийОбъект);
	
	ОтчетОбъект.ЗапуститьМодульВычисления();	
	ОбновитьДанныеФормыСервер(РабочийОбъект);
	Модифицированность=Истина;
		
КонецПроцедуры

&НаСервере
Функция УстановитьЗначениеПоказателяВручную(РабочийОбъект,Показатель, ВыбранноеДействие, Значение) Экспорт
	
	МассивДанных=РабочийОбъект.мПоказателиРаскрытия.НайтиСтроки(Новый Структура("Показатель",Показатель.Ссылка));
	
	ОтменитьУдаление=Истина;
	
	Значение = ?(Показатель.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число,?(ЗначениеЗаполнено(Значение), Число(Значение), 0),Значение);
	
	Если (МассивДанных.Количество()=1 И УправлениеОтчетамиУХ.ПроверитьЗаполнениеАналитик(РабочийОбъект,МассивДанных[0],РабочийОбъект.мПоказателиРаскрытия)) Тогда
		
		УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(РабочийОбъект,?(ВыбранноеДействие = "Очистить", Неопределено, Значение), МассивДанных[0]);
		
	ИначеЕсли МассивДанных.Количество() > 1 Тогда
		
		Если Показатель.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число
			И (НЕ Показатель.ВидИтога=Перечисления.ВидыИтоговПоказателя.НеРассчитывается) Тогда
						
			Если ВыбранноеДействие = "Пересчитать" И (Не Показатель.Значение=0) Тогда
				
				ТекущаяПропорция=Значение/Показатель.Значение;
				
				Для Каждого Строка ИЗ МассивДанных Цикл
					
					УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(РабочийОбъект,Строка.Значение*ТекущаяПропорция,Строка);
					
				КонецЦикла;	
								
			ИначеЕсли ВыбранноеДействие = "Очистить" Тогда
				
				Для Каждого Строка ИЗ МассивДанных Цикл
					
					УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(РабочийОбъект,Неопределено, Строка);
					
				КонецЦикла;
				
			Иначе
				
				Возврат Ложь;
				
			КонецЕсли;
			
		ИначеЕсли НЕ Показатель.ВидИтога=Перечисления.ВидыИтоговПоказателя.НеРассчитывается Тогда
			
			ОчиститьДанные = (ВыбранноеДействие = "Очистить");
						
			Если ОчиститьДанные Тогда
				
				Для Каждого Строка ИЗ МассивДанных Цикл
					
					УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(РабочийОбъект,Неопределено, Строка);
					
				КонецЦикла;
				
			Иначе
				
				Возврат Ложь
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Показатель.Значение = Значение;
	УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказатели(РабочийОбъект,Показатель, Значение);
	Показатель.ДанныеРасчета = Неопределено;
	Показатель.СохраненныеДанныеАктуальны=Ложь;
	
	Если Не Показатель.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
		РабочийОбъект.ИзмененНечисловойПоказатель=Истина;
	КонецЕсли;
	
	РабочийОбъект.Показатели[Показатель.Код]=Значение;
		
	Возврат Истина;
	
КонецФункции // УстановитьЗначениеПоказателяВручную()

&НаКлиенте
Процедура ОткрытьФакторныйАнализ(Команда)
	
	ВызватьОтчетСценарныйАнализ(,Ложь);

КонецПроцедуры


&НаКлиенте
Процедура ВызватьОтчетСценарныйАнализ(МассивПоказателей=Неопределено,Моделирование=Ложь) Экспорт
	
	
	СтруктураПараметров = ПодготовитьПараметрыСенарногоАнализа(МассивПоказателей,Моделирование);
	
	Если СтруктураПараметров = Неопределено Тогда
		
		Сообщить("Необходимо выделить область показателя!");
		Возврат; 
		
	КонецЕсли;	
	//
	ФормаОтчета  = ПолучитьФорму("Отчет.СценарныйАнализ.Форма.ФормаОтчетаУправляемая",СтруктураПараметров);


    Если Моделирование Тогда
		ФормаОтчета.Заголовок="Факторный анализ и моделирование";
		НужноОбновитьФорму=ФормаОтчета.ОткрытьМодально();
					
	Иначе
		ФормаОтчета.Заголовок="Сравнительный факторный анализ";
		ФормаОтчета.Открыть();
	КонецЕсли;

		
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыСенарногоАнализа(МассивПоказателей,Моделирование)
	
		
    РабочийОбъект=ПолучитьРабочийОбъект();
	
	ТекЭкземплярОтчета=РабочийОбъект.ТабОтчеты.Найти(ТекДанныеЯчейки.ЭкземплярОтчета,"ЭкземплярОтчета");
	
	ТекЭкземплярОтчета.ОтчетИзменен =Истина;
	
	Если ТекЭкземплярОтчета=Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;

	РабочийОбъект.ПолучитьДокументОбъект(ТекЭкземплярОтчета);
	
	ОтчетОбъект=ТекЭкземплярОтчета.ОтчетОбъект;	
	
	СтруктураПараметров = Новый Структура;
	
		
	СтруктураПараметров.Вставить("ВидОтчета", ТекДанныеЯчейки.ЭкземплярОтчета.ВидОтчета);
	СтруктураПараметров.Вставить("Сценарий", ТекДанныеЯчейки.Сценарий);
	СтруктураПараметров.Вставить("ПериодОтчета", ТекДанныеЯчейки.ПериодОтчета);
	СтруктураПараметров.Вставить("ОсновнаяВалюта", ТекДанныеЯчейки.ЭкземплярОтчета.ОсновнаяВалюта);
	СтруктураПараметров.Вставить("Организация", ТекДанныеЯчейки.Организация);
	СтруктураПараметров.Вставить("ДокументСсылка", ТекДанныеЯчейки.ЭкземплярОтчета);
	СтруктураПараметров.Вставить("ИсходныйПоказатель", ТекДанныеЯчейки.Показатель);
	СтруктураПараметров.Вставить("РежимАнализаЧувствительности", Моделирование);
	СтруктураПараметров.Вставить("ИсходноеЗначениеЦелевого", ТекДанныеЯчейки.Значение);
	//Для Инд = 1 По 5 Цикл
	//	
	//	Если Объект.ВидОтчета.Метаданные().Реквизиты.Найти("ВидАналитики" + Инд) <> Неопределено Тогда
	//		
	//		Если ЗначениеЗаполнено(Объект.ВидОтчета["ВидАналитики" + Инд]) Тогда
	//			СтруктураПараметров.Вставить("Аналитика" + Инд, ЭтотОбъект["Аналитика" + Инд]);
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	ОтчетОбъект.СформироватьСтруктуруПараметров();
	УправлениеОтчетамиУХ.ПодготовитьДанныеПараметрическойНастройки(ОтчетОбъект);
	АдресВременногоХранилища=ПоместитьВоВременноеХранилище(ОтчетОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),Новый УникальныйИдентификатор);
	СтруктураПараметров.Вставить("ИсходныйДокумент", АдресВременногоХранилища);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура РаспределитьПоПериодам(Команда)
	
	
	МассивКодов = Новый Массив;

	Если ТекДанныеЯчейки<>Неопределено Тогда
		Если НЕ ТекДанныеЯчейки.Раскрытие Тогда
			
			МассивКодов.Добавить(ТекДанныеЯчейки.Показатель);
			
		КонецЕСли;
	КонецЕСли;
	
	
	Если МассивКодов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СтруктураПараметров = ПодготовитьСтруктуруПараметровРаспределенияПериоды(МассивКодов);
	Если СтруктураПараметров <> Неопределено Тогда
		
		 ФормаОтчета  = ПолучитьФорму("Обработка.ОбратноеРаспределение.Форма.Форма",СтруктураПараметров);
		 ФормаОтчета.ОткрытьМодально();
		 
	КонецЕсли;
	
	ИнициализацияОтчетовФорма();
	РазвернутьСтрокиДерева();


КонецПроцедуры

&НаСервере
Функция ПодготовитьСтруктуруПараметровРаспределенияПериоды(МассивКодов)
	
	
	РабочийОбъект=ПолучитьРабочийОбъект();
	
	ТабКорректировка=ПолучитьТаблицуПоказателейДляИзменения(РабочийОбъект,МассивКодов);
	
	
	Если ТабКорректировка.Количество()=0 Тогда
		Возврат Неопределено;
	КонецЕсли;	
		
	ТабКорректировка.Колонки.ИтоговоеЗначение.Имя="АбсКоррекция";	
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	             |	Периоды.Ссылка КАК Период
	             |ИЗ
	             |	Справочник.Периоды КАК Периоды
	             |ГДЕ
	             |	Периоды.Родитель = &ПериодОтчета
	             |	И Периоды.Периодичность <> &ДевятьМесяцев
	             |	И (НЕ Периоды.Произвольный)
	             |	И Периоды.Периодичность В
	             |			(ВЫБРАТЬ
	             |				ПериодыПериодичность.Периодичность
	             |			ИЗ
	             |				(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	             |					Периоды.Периодичность КАК Периодичность,
	             |					РАЗНОСТЬДАТ(Периоды.ДатаНачала, Периоды.ДатаОкончания, ДЕНЬ) КАК ДлинаПериода
	             |				ИЗ
	             |					Справочник.Периоды КАК Периоды
	             |				ГДЕ
	             |					Периоды.Родитель = &ПериодОтчета
	             |					И Периоды.Периодичность <> &ДевятьМесяцев
	             |					И (НЕ Периоды.Произвольный)
	             |				УПОРЯДОЧИТЬ ПО
	             |					ДлинаПериода УБЫВ
	             |				) КАК ПериодыПериодичность)";
	
	Запрос.УстановитьПараметр("ПериодОтчета",ТекДанныеЯчейки.ПериодОтчета);
	Запрос.УстановитьПараметр("ДевятьМесяцев",Перечисления.Периодичность.ДевятьМесяцев);
	
	ТаблицаПериодов=Запрос.Выполнить().Выгрузить();

	
	Если ТаблицаПериодов.Количество()=0 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ТаблицаПериодов.Колонки.Добавить("Показатель");
	
	ОбработкаРаспределения=Обработки.ОбратноеРаспределение.Создать();
	
	ТабПериодовОбщая = ТаблицаПериодов.СкопироватьКолонки();
	
	Для Каждого СтрПоказатель ИЗ ТабКорректировка Цикл
		
		СтруктураПоиска=Новый Структура("Показатель",СтрПоказатель.Показатель);
		МассивАналитик=РабочийОбъект.мПоказателиРаскрытия.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрАналитика ИЗ МассивАналитик Цикл
			
			ЗаписьАналитика=ОбработкаРаспределения.ТаблицаЗначенийАналитик.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьАналитика,СтрАналитика);
			
		КонецЦикла;
		
		ТаблицаПериодов.ЗаполнитьЗначения(СтрПоказатель.Показатель,"Показатель");
		
		ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ТаблицаПериодов,ТабПериодовОбщая);
			
	КонецЦикла;
	
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("СпособРаспределения",Перечисления.СпособыОбратногоРаспределения.ПоПодчиненнымПериодам);
	СтруктураПараметров.Вставить("РаспределениеИтоговыхЗначений",Истина);
    СтруктураПараметров.Вставить("ТаблицаЗначенийПоказателей",ПоместитьВоВременноеХранилище(ТабКорректировка));
	СтруктураПараметров.Вставить("ТаблицаЗначенийАналитик",ПоместитьВоВременноеХранилище(ОбработкаРаспределения.ТаблицаЗначенийАналитик.Выгрузить()));

	СтруктураПараметров.Вставить("ТаблицаРаспределенияКорректировки",ПоместитьВоВременноеХранилище(ТабПериодовОбщая));
	
	СтруктураПараметров.Вставить("Сценарий",ТекДанныеЯчейки.Сценарий);
	СтруктураПараметров.Вставить("ЭкземплярОтчета",ТекДанныеЯчейки.ЭкземплярОтчета);
	СтруктураПараметров.Вставить("ПериодОтчета",ТекДанныеЯчейки.ПериодОтчета);
	СтруктураПараметров.Вставить("Организация",ТекДанныеЯчейки.Организация);
	СтруктураПараметров.Вставить("ВидОтчета",ТекДанныеЯчейки.ЭкземплярОтчета.ВидОтчета);
	СтруктураПараметров.Вставить("ПравилоОбработки",ТекДанныеЯчейки.ЭкземплярОтчета.ПравилоОбработки);
    СтруктураПараметров.Вставить("ОсновнаяВалюта",ТекДанныеЯчейки.ЭкземплярОтчета.ОсновнаяВалюта);

	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПолучитьТаблицуПоказателейДляИзменения(РабочийОбъект,МассивКодов)
	
	Запрос      = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоказателиОтчетов.Ссылка КАК Показатель,
	|	ПоказателиОтчетов.Код
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	(ПоказателиОтчетов.Код В(&Код) или ПоказателиОтчетов.Ссылка В (&Код))
	|	И ПоказателиОтчетов.Владелец = &Владелец
	|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)";
	//|	И ПоказателиОтчетов.СпособОбработки = &Заполнение";
	
	Запрос.УстановитьПараметр("Владелец", Объект.ВидОтчета);
	//Запрос.УстановитьПараметр("Правило", Объект.ПравилоОбработки);
	//Запрос.УстановитьПараметр("Заполнение", Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение);
	
		
	Запрос.УстановитьПараметр("Код", МассивКодов);
	
	ТабКорректировка=Запрос.Выполнить().Выгрузить();
	
	ТабКорректировка.Колонки.Добавить("ЗначениеЧисло",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ТабКорректировка.Колонки.Добавить("ИтоговоеЗначение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	
	Для Каждого СтрКорректировка ИЗ ТабКорректировка Цикл
		
		//РабочийОбъект.Показатели.Свойство(СокрЛП(СтрКорректировка.Код),СтрКорректировка.ЗначениеЧисло);
		СтрКорректировка.ИтоговоеЗначение=ТекДанныеЯчейки.Значение;
		СтрКорректировка.ЗначениеЧисло = ТекДанныеЯчейки.Значение;
	КонецЦикла;	
	
	Возврат ТабКорректировка;
	
КонецФункции // ПолучитьТаблицуПоказателейДляИзменения() 

&НаКлиенте
Процедура РаспределитьПоОрганизациям(Команда)
	
	МассивКодов = Новый Массив;

	Если ТекДанныеЯчейки<>Неопределено Тогда
		Если НЕ ТекДанныеЯчейки.Раскрытие Тогда
			
			МассивКодов.Добавить(ТекДанныеЯчейки.Показатель);
			
		КонецЕСли;
	КонецЕСли;
	
	
	Если МассивКодов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СтруктураПараметров = ПодготовитьСтруктуруПараметровРаспределенияОрг(МассивКодов);
	Если СтруктураПараметров <> Неопределено Тогда
		
		 ФормаОтчета  = ПолучитьФорму("Обработка.ОбратноеРаспределение.Форма.Форма",СтруктураПараметров);
		 ФормаОтчета.ОткрытьМодально();
		 
	КонецЕсли;
	
	ИнициализацияОтчетовФорма();
	РазвернутьСтрокиДерева();


КонецПроцедуры

&НаСервере
Функция ПодготовитьСтруктуруПараметровРаспределенияОрг(МассивКодов)
		
	РабочийОбъект = ПолучитьРабочийОбъект();	
	ТабКорректировка = ПолучитьТаблицуПоказателейДляИзменения(РабочийОбъект, МассивКодов);
	
	Возврат УправлениеОтчетамиУХ.ПолучитьСтруктуруПараметровДляРаспределения(РабочийОбъект, ТабКорректировка, РабочийОбъект.мПоказателиРаскрытия);
		
КонецФункции

&НаКлиенте
Процедура ОчиститьЗначениеПоказателя(Команда)
	ВведенноеЗначение=0;
	
	ДанныеФормы=ПолучитьСтруктуруДанныхФормы();
	УстановитьЗначениеПоказателя(ДанныеФормы,ВведенноеЗначение,ТекДанныеЯчейки.ЭкземплярОтчета);
	ОбновитьРеквизитыФормы(ДанныеФормы);
		
	Для Каждого ИзмененнаяЯчейка ИЗ ДанныеФормы.МассивИзмененныхОбластей Цикл
		
		ТекСтрока=ОпределитьСтрокуПоАбсолютномуАдресу(ИзмененнаяЯчейка.АдресСтроки);
		
		ИмяЭлемента=СписокКолонокДерева[ИзмененнаяЯчейка.АдресКолонки-7].Значение;
		
		ТекСтрока[ИмяЭлемента]=ИзмененнаяЯчейка.Значение;
		
	КонецЦикла;
				
	Элементы.ТабДерево.Обновить();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФакторныйАнализМоделиование(Команда)
	
	ВызватьОтчетСценарныйАнализ(,Истина);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередЗакрытием(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        
        СтруктураДанныхФормы = Новый Структура;
        СтруктураДанныхФормы.Вставить("РабочийОбъектАдрес", РабочийОбъектАдрес);
        СтруктураДанныхФормы.Вставить("ИдентификаторФормы", ЭтаФорма.УникальныйИдентификатор);
        СтруктураДанныхФормы.Вставить("ЭкземплярОтчета");
        
        ЗаписатьЭкземплярыОтчетов(СтруктураДанныхФормы,Истина);
        
    ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
        
        //Отказ от закрытия;
		Возврат;
		
	КонецЕсли;
    
	ЗакрытьФорму = Истина;
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиКолонкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ИндексВставки=0;
	
	Если Строка=Неопределено Тогда
		
		НомерСтроки=Объект.ГруппировкиКолонки.Количество();
		
	Иначе
		
		НомерСтроки=Объект.ГруппировкиКолонки.Индекс(Объект.ГруппировкиКолонки.НайтиПоИдентификатору(Строка))+1;
		
	КонецЕсли;
	
	СтандартнаяОбработка=Ложь;
	
	Для Каждого ТекСтрока ИЗ ПараметрыПеретаскивания.Значение Цикл 
		
		Если НЕ ТекСтрока.Группировка="Строка" Тогда
			
			НоваяСтрока=Объект.ГруппировкиКолонки.Вставить(НомерСтроки+ИндексВставки);
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
			Объект.ГруппировкиСтроки.Удалить(ТекСтрока);
			
			ИндексВставки=ИндексВставки+1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПриИзмененииПорядкаГруппировок();
		
	Если ОбновлятьПриИзмененииГруппировок Тогда
		ОбновитьДанныеФормыБезОбъекта();
		РазвернутьСтрокиДерева();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиСтрокиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ИндексВставки=0;
	
	Если Строка=Неопределено Тогда
		
		НомерСтроки=Объект.ГруппировкиСтроки.Количество();
		
	Иначе
		
		НомерСтроки=Объект.ГруппировкиСтроки.Индекс(Объект.ГруппировкиСтроки.НайтиПоИдентификатору(Строка))+1;
		
	КонецЕсли;
	
	СтандартнаяОбработка=Ложь;
	
	Для Каждого ТекСтрока ИЗ ПараметрыПеретаскивания.Значение Цикл 
		
		Если НЕ ТекСтрока.Группировка="Строка" Тогда
			
			НоваяСтрока=Объект.ГруппировкиСтроки.Вставить(НомерСтроки+ИндексВставки);
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
			Объект.ГруппировкиКолонки.Удалить(ТекСтрока);
			
			ИндексВставки=ИндексВставки+1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПриИзмененииПорядкаГруппировок();
		
	Если ОбновлятьПриИзмененииГруппировок Тогда
		ОбновитьДанныеФормыБезОбъекта();
		РазвернутьСтрокиДерева();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СценарийОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораЭлементовДерево",Новый Структура("ИмяСправочника,ИмяЭлементаФормы,СписокЭлементов","Сценарии","СценарийОтбор",СценарийОтбор),Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОтборПриИзменении(Элемент)
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораЭлементовДерево",Новый Структура("ИмяСправочника,ИмяЭлементаФормы,СписокЭлементов,СписокДоступныхЭлементов","Организации","ОрганизацияОтбор",ОрганизацияОтбор,СписокДоступныхОрганизаций),Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораЭлементовДерево",Новый Структура("ИмяСправочника,ИмяЭлементаФормы,СписокЭлементов,СписокДоступныхЭлементов","Периоды","ПериодОтчетаОтбор",ПериодОтчетаОтбор,СписокДоступныхПериодов),Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораЭлементовДерево",Новый Структура("ИмяСправочника,ИмяЭлементаФормы,СписокЭлементов","Проекты","ПроектОтбор",ПроектОтбор),Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДокПриАктивизацииОбласти(Элемент)
	
	Если ТабДок.ВысотаТаблицы>0 Тогда
		
		ПриАктивизацииЯчейкиТаблицы();
		
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДокОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДокПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ВведенноеЗначение=Область.Значение;;
	
	ДанныеФормы=ПолучитьСтруктуруДанныхФормы();
	ДанныеФормы.Вставить("ОбластьРучногоИзменения",Новый Структура("Верх,Лево",Область.Верх,Область.Лево));
	УстановитьЗначениеПоказателя(ДанныеФормы, ВведенноеЗначение, ТекДанныеЯчейки.ЭкземплярОтчета);
	ОбновитьРеквизитыФормы(ДанныеФормы);
	
	Для Каждого ДанныеОбласти ИЗ ДанныеФормы.МассивИзмененныхОбластей Цикл
		
		ИзмененнаяОбласть=ТабДок.Область(ДанныеОбласти.Верх,ДанныеОбласти.Лево,ДанныеОбласти.Верх,ДанныеОбласти.Лево);
		
		Если ИзмененнаяОбласть.Имя=Область.Имя Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ИзмененнаяОбласть.Значение=ДанныеОбласти.Значение;
				
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ПолосаШиринаКолонкиПриИзменении(Элемент)
	
	УстановитьШиринуКолонок(ПолосаШиринаКолонки);	
	
КонецПроцедуры

Процедура УстановитьШиринуКолонок(ТекШирина)
	
	Для Индекс=ПерваяКолонка По ТабДок.ШиринаТаблицы Цикл
		ТабДок.Область(,Индекс,,Индекс).ШиринаКолонки=ТекШирина;
	КонецЦикла;		
	
КонецПроцедуры // УстановитьШиринуКолонок()


&НаКлиенте
Процедура ОбновлятьПриИзмененииГруппировокПриИзменении(Элемент)
	
	Элементы.КнопкаОбновить.Видимость=НЕ ОбновлятьПриИзмененииГруппировок;
	
КонецПроцедуры


&НаКлиенте
Процедура ИнициализацияИСозданиеОтчетов(Команда)
	
	Объект.СоздаватьЭкземплярыОтчетов=Истина;
	ИнициализацияОтчетовФорма();
	РазвернутьСтрокиДерева();
	
КонецПроцедуры


&НаКлиенте
Процедура ВыводитьВДеревоПриИзменении(Элемент)
	
		
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьВДеревоЧислоПриИзменении(Элемент)
	
	Объект.ВыводитьВДерево=(ВыводитьВДеревоЧисло=1);
	
	ОбновитьДанныеФормыБезОбъекта();	
	РазвернутьСтрокиДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЭкземплярыОтчетовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ИнициализироватьОтчетыСервер();
	РазвернутьСтрокиДерева();
		
КонецПроцедуры

&НаКлиенте
Процедура ТабДокВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если НЕ ПроверитьВозможностьРедактирования() Тогда
		
		СтандартнаяОбработка=Ложь;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры


