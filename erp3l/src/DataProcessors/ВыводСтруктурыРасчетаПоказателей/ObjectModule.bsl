#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Функция - Построить структуру по правилу обработки
//
// Параметры:
//  ПравилоОбработки	 - Справочник.ПравилаОбработки - Правило обработки для которого выводится структура расчета
//  ВыбранныйПоказатель	 - Справочник.ПоказательОтчета (необязательный) - Показатель, для которого выводится структура расчета. 
//							Если не указан, то для всех показателей правила расчета.
// 
// Возвращаемое значение:
//   - ТабличныйДокумент - Табличный документ со структурой расчета
//
Функция ПостроитьСтруктуруПоПравилуОбработки(ПравилоОбработки, ВыбранныйПоказатель = Неопределено) Экспорт 
	
	// Документ для возврата
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ФиксацияСлева = 2;
	
	// Определим вид отчета
	ВидОтчета = ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(ПравилоОбработки, "Владелец");
	
	// Получим параметрику и таблицу операндов
	глТаблицаПересчетаПоказателей = УправлениеРасчетомПоказателей.ПолучитьТаблицуРасчетаПоказателейПоПравилуРасчета(ПравилоОбработки);
	СтрокаОперанды = глТаблицаПересчетаПоказателей.Найти(
		Перечисления.ВидыОперацийРасчетаПоказателей.ПолучениеТаблицыОперандов,
		"ВидОперацииРасчета");
	Если СтрокаОперанды = Неопределено Тогда
		Возврат ТабДокумент;
	КонецЕсли;	
	СтрокаПараметры = СтрокаОперанды.тПараметрыПакета.Найти("тПоказателиОперанды","ИмяОтбора");
	Если СтрокаПараметры = Неопределено Тогда
		Возврат ТабДокумент;
	КонецЕсли;	
	тРезультат = СтрокаПараметры.ЗначениеОтбора.Скопировать(,"Потребитель,ПоказательОперанд,УровеньРасчетаПотребителя,УровеньРасчетаОперанда,КодВФормуле,Процедура,ВидОтчетаПоказателя");
	
	Если тРезультат.Количество() = 0 Тогда
		ВывестиПоказателиРучнойВвод(ТабДокумент, ВидОтчета, Истина);
		Возврат ТабДокумент;
	КонецЕсли;
	
	// Отфильтруем строки по показателю
	Если ЗначениеЗаполнено(ВыбранныйПоказатель) Тогда
		тРезультатФильтр = тРезультат.СкопироватьКолонки();
		ДобавитьПоказателиИсточникиРекурсивно(тРезультатФильтр, тРезультат, ВыбранныйПоказатель);
		тРезультат = тРезультатФильтр;
	КонецЕсли;
	
	// Отсортируем строки
	тРезультат.Сортировать("Потребитель, ПоказательОперанд");
	ВсегоСтрок = тРезультат.Количество();
	
	// Вывод уровней
	Макет 					= ПолучитьМакет("Макет");
	ОбластьШапкаПравило		= Макет.ПолучитьОбласть("ШапкаПравилоРасчета");
	ОбластьСтрока		 	= Макет.ПолучитьОбласть("СтрокаПоказатель|Показатель");
	ОбластьСтрелки		 	= Макет.ПолучитьОбласть("СтрокаПоказатель|Стрелки");
	ОбластьПроцедура		= Макет.ПолучитьОбласть("СтрокаПоказатель|Процедура");
	ОбластьПропуск 		 	= Макет.ПолучитьОбласть("Пропуск|Показатель");
	ОбластьШапкаУровень  	= Макет.ПолучитьОбласть("ШапкаУровень|Показатель");
	
	// Выводим шапку                                                        
	НомерСтроки = 2;
	ОбластьШапкаПравило.Параметры.ПравилоОбработки = ПравилоОбработки;
	ОбластьШапкаПравило.Параметры.ВидОтчета = ВидОтчета;
	ТабДокумент.Вывести(ОбластьШапкаПравило);
	Если ЗначениеЗаполнено(ВыбранныйПоказатель) Тогда
		ОбластьШапкаВыбранныйПоказатель = Макет.ПолучитьОбласть("ШапкаПоказатель");
		ОбластьШапкаВыбранныйПоказатель.Параметры.Показатель = ВыбранныйПоказатель;
		ТабДокумент.Вывести(ОбластьШапкаВыбранныйПоказатель);
		НомерСтроки = НомерСтроки + 1;
	КонецЕсли;
	
	// Структура для вывода стрелок
	СтруктураДляСтрелок = Новый Структура;
	СтруктураДляСтрелок.Вставить("ТабДокумент", ТабДокумент);
	СтруктураДляСтрелок.Вставить("МассивЦветов", ПолучитьЦвета());
	СтруктураДляСтрелок.Вставить("ШиринаКолонок", 50);
	
	// Вывод уровней расчета
	сПоказатели = Новый Соответствие;
	мПотребителиУровня = Новый Массив;
	НомерСвязи = 1;
	
	// Найдем максимальный уровень
	тУровень = тРезультат.Скопировать(,"УровеньРасчетаПотребителя");
	тУровень.Сортировать("УровеньРасчетаПотребителя Убыв");
	ТекУровень = тУровень.Получить(0).УровеньРасчетаПотребителя;
	Пока ТекУровень >= 0 Цикл
		
		Если ТекУровень = 0 Тогда
			мСтрокиУровень = тРезультат.НайтиСтроки(Новый Структура("УровеньРасчетаОперанда", 1));
			ИмяКолонки = "ПоказательОперанд";
		Иначе
			мСтрокиУровень = тРезультат.НайтиСтроки(Новый Структура("УровеньРасчетаПотребителя", ТекУровень));
			ИмяКолонки = "Потребитель";
		КонецЕсли;
		Если мСтрокиУровень.Количество() = 0 Тогда
			ТекУровень = ТекУровень - 1;
			Продолжить;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьПропуск);
		ОбластьШапкаУровень.Параметры.УровеньРасчета = ТекУровень;
		ТабДокумент.Вывести(ОбластьШапкаУровень);
		НомерСтроки = НомерСтроки + 2;
		мПотребителиУровня.Очистить();
			
		Для Каждого текСтрока Из мСтрокиУровень Цикл
			
			Показатель = текСтрока[ИмяКолонки];
			Если мПотребителиУровня.Найти(Показатель) = Неопределено Тогда
				
				// Увеличиваем номер строки
				НомерСтроки = НомерСтроки + 1;
				мПотребителиУровня.Добавить(Показатель);
			
				// Структура для расшифровки
				Если ТекУровень = 0 Тогда
					
					// Миграция показателей из уровня 0 в уровень 1
					ОбластьСтрока.Параметры.Расшифровка = Показатель;
					Если ЗначениеЗаполнено(текСтрока.ВидОтчетаПоказателя) И ВидОтчета <> текСтрока.ВидОтчетаПоказателя Тогда
						ОбластьСтрока.Параметры.Показатель = Строка(Показатель) + " (" + текСтрока.ВидОтчетаПоказателя + ")";
					Иначе
						ОбластьСтрока.Параметры.Показатель = Показатель;
					КонецЕсли;
					
					ОбластьСтрока.Область(1,2).Примечание.Текст = "[" + текСтрока.КодВФормуле + "]";
					ОбластьПроцедура.Параметры.Процедура = "[" + текСтрока.КодВФормуле + "]";
					
					НомерСтрокиПотребителя = сПоказатели.Получить(текСтрока.ПоказательОперанд);
					Если НомерСтрокиПотребителя = Неопределено Тогда
						// Показатель трансформируется сам в себя
						НомерСтрокиПотребителя = сПоказатели.Получить(текСтрока.Потребитель);
					КонецЕсли;
					
					сПоказатели.Вставить(текСтрока.ПоказательОперанд,НомерСтроки);

				Иначе
					
					СтруктураДляРасшифровки = Новый Структура;
					СтруктураДляРасшифровки.Вставить("РежимИспользования", 1);
					СтруктураДляРасшифровки.Вставить("ПравилоОбработки", ПравилоОбработки);
					СтруктураДляРасшифровки.Вставить("Показатель", Показатель);
					ОбластьСтрока.Параметры.Расшифровка = СтруктураДляРасшифровки;
					
					ОбластьСтрока.Параметры.Показатель = Показатель;					
					
					ОбластьСтрока.Область(1,2).Примечание.Текст = текСтрока.Процедура;
					ОбластьПроцедура.Параметры.Процедура = текСтрока.Процедура;
					
					НомерСтрокиПотребителя = сПоказатели.Получить(текСтрока.Потребитель);
					
					Если ТекУровень = 1 Тогда
						сПоказатели.Вставить(текСтрока.Потребитель,НомерСтроки);				
					Иначе
						сПоказатели.Вставить(текСтрока.ПоказательОперанд,НомерСтроки);
					КонецЕсли;
					
				КонецЕсли;
				
				// Выводим строку
				ТабДокумент.Вывести(ОбластьСтрока);
				
				// Выведем процедуру
				Для Сч = 0 По ВсегоСтрок Цикл
					ТабДокумент.Присоединить(ОбластьСтрелки);
				КонецЦикла;				
				ТабДокумент.Присоединить(ОбластьПроцедура);
					
				// Нарисуем зависимость
				НарисоватьСтрелку(СтруктураДляСтрелок,НомерСтроки,НомерСтрокиПотребителя,НомерСвязи);
			
			Иначе
				
				// Нарисуем зависимость
				Если ТекУровень = 0 Тогда
					// Миграция показателей из уровня 0 в уровень 1
					НомерСтрокиПотребителя = сПоказатели.Получить(текСтрока.Потребитель);
					НомерСтрокиПоказателя = сПоказатели.Получить(текСтрока.ПоказательОперанд);
					НарисоватьСтрелку(СтруктураДляСтрелок,НомерСтрокиПоказателя,НомерСтрокиПотребителя,НомерСвязи);
				ИначеЕсли ТекУровень = 1 Тогда
					сПоказатели.Вставить(текСтрока.Потребитель,НомерСтроки);				
				Иначе
					сПоказатели.Вставить(текСтрока.ПоказательОперанд,НомерСтроки);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТекУровень = 0 Тогда		
			ВывестиПоказателиРучнойВвод(ТабДокумент, ВидОтчета);			
		КонецЕсли;
		
		ТекУровень = ТекУровень - 1;
	
	КонецЦикла;
	
	Возврат ТабДокумент;	
	
КонецФункции

// Функция - Показать трассировку расчета
//
// Параметры:
//  АдресТрассировкиРасчета	 - Строка - Адрес во временном хранилище с трассировкой расчета
//  НастраиваемыйОтчет		 - Справочник.НастраиваемыйОтчет - Экземпляр отчета для которого выводится трассировка расчета
//  ВыбранныйПоказатель		 - Справочник.ПоказательОтчета (необязательный) - Показатель, для которого выводится трассировка расчета. 
//							Если не указан, то для всех показателей экземпляра отчета.
// 
// Возвращаемое значение:
//   - ТабличныйДокумент - Табличный документ с трассировкой расчета 
//
Функция ПоказатьТрассировкуРасчета(АдресТрассировкиРасчета, НастраиваемыйОтчет, ВыбранныйПоказатель = Неопределено) Экспорт
		
	// Документ для возврата
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ФиксацияСлева = 2;
	
	// Получим параметрику и таблицу операндов
	ТрассировкаРасчета 				= ПолучитьИзВременногоХранилища(АдресТрассировкиРасчета);
	ОбщееВремяПолученияПараметрики 	= ТрассировкаРасчета.ОбщееВремяПолученияПараметрики;
	ОбщееВремяРасчетов 				= ТрассировкаРасчета.ОбщееВремяРасчетов;
	ОбщееВремяЗаписиВерсий 			= ТрассировкаРасчета.ОбщееВремяЗаписиВерсий;
	тТрассировкаРасчета 			= ТрассировкаРасчета.тТрассировкаРасчета;
	СтрокаОперанды = тТрассировкаРасчета.Найти(
		Перечисления.ВидыОперацийРасчетаПоказателей.ПолучениеТаблицыОперандов,
		"ВидОперацииРасчета");
	Если СтрокаОперанды = Неопределено Тогда
		Возврат ТабДокумент;
	КонецЕсли;
	СтрокаПараметры = СтрокаОперанды.тПараметрыПакета.Найти("тПоказателиОперанды","ИмяОтбора");
	Если СтрокаПараметры = Неопределено Тогда
		Возврат ТабДокумент;
	КонецЕсли;
	тРезультат = СтрокаПараметры.ЗначениеОтбора.Скопировать(,
		"Потребитель,ТипПотребителя,ТипПоказателя,ПоказательОперанд,УровеньРасчетаОперанда,УровеньРасчетаПотребителя,КодВФормуле,Процедура,ВидОтчетаПоказателя,ЧислоАналитик,ЕстьАналитикаВалюта");
	
	// Отфильтруем строки по показателю
	Если ЗначениеЗаполнено(ВыбранныйПоказатель) Тогда
		тРезультатФильтр = тРезультат.СкопироватьКолонки();
		ДобавитьПоказателиИсточникиРекурсивно(тРезультатФильтр, тРезультат, ВыбранныйПоказатель);
		тРезультат = тРезультатФильтр;
	КонецЕсли;
	
	// Отсортируем строки
	тРезультат.Сортировать("Потребитель, ПоказательОперанд");
	тРезультат.Колонки.Добавить("НомерСтроки");
	ВсегоСтрок = тРезультат.Количество();
	
	// Макет и области
	Макет 						= ПолучитьМакет("Макет");
	ОбластьШапкаДокумент		= Макет.ПолучитьОбласть("ШапкаДокумент");
	ОбластьПропуск 				= Макет.ПолучитьОбласть("Пропуск");
	ОбластьШапкаУровень 		= Макет.ПолучитьОбласть("ШапкаУровень");
	ОбластьШапкаПоказатель 		= Макет.ПолучитьОбласть("ШапкаТаблица|Показатель");
	ОбластьШапкаПериод			= Макет.ПолучитьОбласть("ШапкаТаблица|Период");
	ОбластьШапкаСтрелки			= Макет.ПолучитьОбласть("ШапкаТаблица|Стрелки");
	ОбластьСтрокаПоказатель 	= Макет.ПолучитьОбласть("СтрокаПоказатель|Показатель");
	ОбластьСтрокаПериод		 	= Макет.ПолучитьОбласть("СтрокаПоказатель|Период");
	ОбластьСтрелки		 		= Макет.ПолучитьОбласть("СтрокаПоказатель|Стрелки");
	ОбластьПроцедура			= Макет.ПолучитьОбласть("СтрокаПоказатель|Процедура");
	ОбластьАналитикаПоказатель	= Макет.ПолучитьОбласть("СтрокаАналитика|Показатель");
	ОбластьАналитикаПериод		= Макет.ПолучитьОбласть("СтрокаАналитика|Период");
	
	Если ВсегоСтрок = 0 Тогда
		ТабДокумент.Вывести(ОбластьПропуск);
		ОбластьНетИсточников = Макет.ПолучитьОбласть("НетИсточников");
		ТабДокумент.Вывести(ОбластьНетИсточников);
		Возврат ТабДокумент;
	КонецЕсли;
	
	// Выводим шапку                                                        
	НомерСтроки = 2;
	ОбластьШапкаДокумент.Параметры.НастраиваемыйОтчет = НастраиваемыйОтчет;
	ТабДокумент.Вывести(ОбластьШапкаДокумент);
	Если ЗначениеЗаполнено(ВыбранныйПоказатель) Тогда
		ОбластьШапкаВыбранныйПоказатель = Макет.ПолучитьОбласть("ШапкаПоказатель");
		ОбластьШапкаВыбранныйПоказатель.Параметры.Показатель = ВыбранныйПоказатель;
		ТабДокумент.Вывести(ОбластьШапкаВыбранныйПоказатель);
		НомерСтроки = НомерСтроки + 1;
	Иначе
		ОбластьШапкаВремяРасчета = Макет.ПолучитьОбласть("ШапкаВремяРасчета");
		ОбластьШапкаВремяРасчета.Параметры.ОбщееВремяПолученияПараметрики 	= ОбщееВремяПолученияПараметрики/1000;
		ОбластьШапкаВремяРасчета.Параметры.ОбщееВремяРасчетов 				= (ОбщееВремяРасчетов-ОбщееВремяПолученияПараметрики)/1000;
		ОбластьШапкаВремяРасчета.Параметры.ОбщееВремяЗаписиВерсий 			= (ОбщееВремяЗаписиВерсий)/1000;
		ОбластьШапкаВремяРасчета.Параметры.ОбщееВремяИтого 					= (ОбщееВремяЗаписиВерсий+ОбщееВремяРасчетов)/1000;
		ТабДокумент.Вывести(ОбластьШапкаВремяРасчета);
		НомерСтроки = НомерСтроки + 4;
	КонецЕсли;
	
	// Получим данные экземпляра отчета
	СписокРеквизитов = "ПериодОтчета,ПериодОкончания,ВидОтчета";
	Для Сч = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		СписокРеквизитов = СписокРеквизитов + ",Аналитика" + Сч;
	КонецЦикла;
	ДанныеДокумента = ОбщегоНазначенияУХ.ЗначенияРеквизитовОбъекта(НастраиваемыйОтчет, СписокРеквизитов);
	МассивПериодов = УправлениеОтчетамиУХ.ПолучитьМассивПериодов(ДанныеДокумента);
	МаксКлючевыхАналитик = 0;
	Для Сч = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ДанныеДокумента["Аналитика" + Сч] = Неопределено Тогда
			Прервать;
		КонецЕсли;
		МаксКлючевыхАналитик = МаксКлючевыхАналитик + 1;
	КонецЦикла;	
	
	// Структура для вывода стрелок
	СтруктураДляСтрелок = Новый Структура;
	СтруктураДляСтрелок.Вставить("ТабДокумент", ТабДокумент);
	СтруктураДляСтрелок.Вставить("МассивЦветов", ПолучитьЦвета());
	СтруктураДляСтрелок.Вставить("ШиринаКолонок", 50 + 15 * МассивПериодов.Количество());
	
	// Структура для вывода аналитик
	СтруктураДляАналитик = Новый Структура;
	СтруктураДляАналитик.Вставить("МаксКлючевыхАналитик", 		МаксКлючевыхАналитик);
	СтруктураДляАналитик.Вставить("МассивПериодов", 			МассивПериодов);
	СтруктураДляАналитик.Вставить("ТабДокумент", 				ТабДокумент);
	СтруктураДляАналитик.Вставить("ОбластьАналитикаПоказатель", ОбластьАналитикаПоказатель);
	СтруктураДляАналитик.Вставить("ОбластьАналитикаПериод", 	ОбластьАналитикаПериод);
	
	// Вывод уровней расчета
	сПоказатели = Новый Соответствие;
	мПотребителиУровня = Новый Массив;
	НомерСвязи = 1;
	
	// Найдем максимальный уровень
	тУровень = тРезультат.Скопировать(,"УровеньРасчетаПотребителя");
	тУровень.Сортировать("УровеньРасчетаПотребителя Убыв");
	ТекУровень = тУровень.Получить(0).УровеньРасчетаПотребителя;
	Пока ТекУровень >= 0 Цикл
		
		Если ТекУровень = 0 Тогда
			мСтрокиУровень = тРезультат.НайтиСтроки(Новый Структура("УровеньРасчетаОперанда", 1));
			ИмяКолонки = "ПоказательОперанд";
			тРезультатВыполненияЗапроса = тТрассировкаРасчета.Найти(
				"ЗАПРОС ДЛЯ ПОДЪЕМА ОПЕРАНДОВ УРОВНЯ - 0",
				"КомментарийКПакету").тРезультатВыполненияЗапроса;
		Иначе
			мСтрокиУровень = тРезультат.НайтиСтроки(Новый Структура("УровеньРасчетаПотребителя", ТекУровень));
			ИмяКолонки = "Потребитель";
			стрРасчета = тТрассировкаРасчета.Найти(
				"ЗАПРОСЫ ДЛЯ РАСЧЕТА ПОКАЗАТЕЛЕЙ УРОВНЯ - " + Формат(ТекУровень,"ЧН=0; ЧГ=0"),
				"КомментарийКПакету");
			Если стрРасчета = Неопределено Тогда
				стрРасчета = тТрассировкаРасчета.Найти(
					"ТАБЛИЦА НОВЫХ ЗНАЧЕНИЙ ПОТРЕБИТЕЛЕЙ РЕКУРСИВНО ЗАВИСИМЫХ ПО ПЕРИОДУ",
					"КомментарийКПакету");
			КонецЕсли;
			Если стрРасчета = Неопределено Тогда
				ТекУровень = ТекУровень - 1;
				Продолжить;
			КонецЕсли;
			тРезультатВыполненияЗапроса = стрРасчета.тРезультатВыполненияЗапроса;
		КонецЕсли;
		Если мСтрокиУровень.Количество() = 0 Тогда
			ТекУровень = ТекУровень - 1;
			Продолжить;
		КонецЕсли;
		
		// Выводим шапку таблицы
		ТабДокумент.Вывести(ОбластьПропуск);
		ОбластьШапкаУровень.Параметры.УровеньРасчета = ТекУровень;
		ТабДокумент.Вывести(ОбластьШапкаУровень);
		
		ТабДокумент.НачатьАвтогруппировкуКолонок(); 
		ТабДокумент.Вывести(ОбластьШапкаПоказатель,1);		
		Для Каждого Период Из МассивПериодов Цикл
			ОбластьШапкаПериод.Параметры.Период = Период;
			ТабДокумент.Присоединить(ОбластьШапкаПериод,2);	
		КонецЦикла;
		ТабДокумент.Присоединить(ОбластьШапкаСтрелки,1);
		ТабДокумент.ЗакончитьАвтогруппировкуКолонок();
		НомерСтроки = НомерСтроки + 3;
		мПотребителиУровня.Очистить();		
		
		НомерПоказателя = НомерСтроки;
		Для Каждого текСтрока Из мСтрокиУровень Цикл
			
			Показатель = текСтрока[ИмяКолонки];
			Если мПотребителиУровня.Найти(Показатель) = Неопределено Тогда
				
				// Увеличиваем номер строки
				НомерСтроки = НомерСтроки + 1;
				НомерПоказателя = НомерСтроки;
				мПотребителиУровня.Добавить(Показатель);
				
				// Структура для расшифровки
				Если ТекУровень = 0 Тогда
					
					// Миграция показателей из уровня 0 в уровень 1
					ОбластьСтрокаПоказатель.Параметры.Расшифровка = Показатель;
					Если ЗначениеЗаполнено(текСтрока.ВидОтчетаПоказателя) И ДанныеДокумента.ВидОтчета <> текСтрока.ВидОтчетаПоказателя Тогда
						ОбластьСтрокаПоказатель.Параметры.Показатель = Строка(Показатель) + " (" + текСтрока.ВидОтчетаПоказателя + ")";
					Иначе
						ОбластьСтрокаПоказатель.Параметры.Показатель = Показатель;
					КонецЕсли;
					
					ОбластьСтрокаПоказатель.Область(1,2).Примечание.Текст = "[" + текСтрока.КодВФормуле + "]";
					ОбластьПроцедура.Параметры.Процедура = "[" + текСтрока.КодВФормуле + "]";
					
					НомерСтрокиПотребителя = сПоказатели.Получить(текСтрока.ПоказательОперанд);
					Если НомерСтрокиПотребителя = Неопределено Тогда
						// Показатель трансформируется сам в себя
						НомерСтрокиПотребителя = сПоказатели.Получить(текСтрока.Потребитель);
					КонецЕсли;
					
					сПоказатели.Вставить(текСтрока.ПоказательОперанд,НомерСтроки);
					
				Иначе
					СтруктураДляРасшифровки = Новый Структура;
					СтруктураДляРасшифровки.Вставить("РежимИспользования", 2); 
					СтруктураДляРасшифровки.Вставить("АдресТрассировкиРасчета", АдресТрассировкиРасчета);
					СтруктураДляРасшифровки.Вставить("НастраиваемыйОтчет", НастраиваемыйОтчет);
					СтруктураДляРасшифровки.Вставить("Показатель", Показатель);
					ОбластьСтрокаПоказатель.Параметры.Расшифровка = СтруктураДляРасшифровки;
					
					ОбластьСтрокаПоказатель.Параметры.Показатель = Показатель;					
					
					ОбластьСтрокаПоказатель.Область(1,2).Примечание.Текст = текСтрока.Процедура;
					ОбластьПроцедура.Параметры.Процедура = текСтрока.Процедура;
					
					НомерСтрокиПотребителя = сПоказатели.Получить(текСтрока.Потребитель);
					
					Если ТекУровень = 1 Тогда
						сПоказатели.Вставить(текСтрока.Потребитель,НомерСтроки);				
					Иначе
						сПоказатели.Вставить(текСтрока.ПоказательОперанд,НомерСтроки);
					КонецЕсли;
					
				КонецЕсли;
				
				// Выводим строку в отчет
				ОбластьСтрокаПоказатель.Параметры.Показатель = Показатель;
				ТабДокумент.НачатьАвтогруппировкуСтрок();
				ТабДокумент.Вывести(ОбластьСтрокаПоказатель,0);
				тРезультатПоказатели = тРезультатВыполненияЗапроса.Скопировать(Новый Структура("Показатель",Показатель));
				Для Каждого Период Из МассивПериодов Цикл
					тРезультатПериод = тРезультатПоказатели.Скопировать(Новый Структура("ПериодОтчета",Период));
					Если текСтрока.ТипПотребителя = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
						тРезультатПериод.Свернуть(,"Значение");
						Если тРезультатПериод.Количество() Тогда
							ОбластьСтрокаПериод.Параметры.Значение = тРезультатПериод.Получить(0).Значение;
						Иначе
							ОбластьСтрокаПериод.Параметры.Значение = 0;
						КонецЕсли;
					Иначе
						ОбластьСтрокаПериод.Параметры.Значение = "";
					КонецЕсли;
					ТабДокумент.Присоединить(ОбластьСтрокаПериод);
				КонецЦикла;
				
				// Выведем процедуру
				Для Сч = 0 По ВсегоСтрок Цикл
					ТабДокумент.Присоединить(ОбластьСтрелки);
				КонецЦикла;				
				ТабДокумент.Присоединить(ОбластьПроцедура);
					
				// Нарисуем зависимость
				НарисоватьСтрелку(СтруктураДляСтрелок,НомерСтроки, НомерСтрокиПотребителя, НомерСвязи);
			
				// Выводим аналитики в отчет				
				ВывестиАналитикиРекурсивно(МаксКлючевыхАналитик+1, тРезультатПоказатели, текСтрока, НомерСтроки, ТекУровень, СтруктураДляАналитик);
				
				ТабДокумент.ЗакончитьАвтогруппировкуСтрок();			
				
			Иначе
				
				// Нарисуем зависимость
				Если ТекУровень = 0 Тогда
					// Миграция показателей из уровня 0 в уровень 1
					НомерСтрокиПотребителя = сПоказатели.Получить(текСтрока.Потребитель);
					НомерСтрокиПоказателя = сПоказатели.Получить(текСтрока.ПоказательОперанд);
					НарисоватьСтрелку(СтруктураДляСтрелок, НомерСтрокиПоказателя, НомерСтрокиПотребителя, НомерСвязи);
				ИначеЕсли ТекУровень = 1 Тогда
					сПоказатели.Вставить(текСтрока.Потребитель, НомерПоказателя);				
				Иначе
					сПоказатели.Вставить(текСтрока.ПоказательОперанд, НомерПоказателя);
				КонецЕсли;
				
			КонецЕсли;			
						
		КонецЦикла;
		
		ТекУровень = ТекУровень - 1;
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

#КонецОбласти

#Область Служебные

Функция ПолучитьЦвета()
	
	// АПК:1346-выкл Цвета задаем вручную, а не из стиля
	мЦвета = Новый Массив;
	мЦвета.Добавить(Новый Цвет(0,0,0)); 		// Черный
	мЦвета.Добавить(Новый Цвет(255,0,0));     	// Красный
	мЦвета.Добавить(Новый Цвет(0,255,0));       // Зеленый
	мЦвета.Добавить(Новый Цвет(0,0,255));       // Синий
	мЦвета.Добавить(Новый Цвет(0,255,255));     // Бирюзовый
	мЦвета.Добавить(Новый Цвет(128,128,0));     // Болотный
	мЦвета.Добавить(Новый Цвет(153,51,102));    // Фиолетовый
	мЦвета.Добавить(Новый Цвет(51,102,255));    // Синий
	мЦвета.Добавить(Новый Цвет(0,128,0));       // Темно-зеленый
	мЦвета.Добавить(Новый Цвет(153,51,0));      // Коричневый
	мЦвета.Добавить(Новый Цвет(51,204,204));    // Голубой	
	мЦвета.Добавить(Новый Цвет(0,128,0));
	мЦвета.Добавить(Новый Цвет(51,102,255));
	мЦвета.Добавить(Новый Цвет(192,192,192));
	мЦвета.Добавить(Новый Цвет(0,128,128));
	мЦвета.Добавить(Новый Цвет(128,0,128));
	мЦвета.Добавить(Новый Цвет(255,153,204));
	мЦвета.Добавить(Новый Цвет(0,51,0));
	мЦвета.Добавить(Новый Цвет(255,204,153));
	мЦвета.Добавить(Новый Цвет(0,51,102));
	мЦвета.Добавить(Новый Цвет(102,102,153));
	мЦвета.Добавить(Новый Цвет(255,0,255));
	мЦвета.Добавить(Новый Цвет(0,0,128));
	мЦвета.Добавить(Новый Цвет(255,204,0));
	мЦвета.Добавить(Новый Цвет(204,255,204));
	мЦвета.Добавить(Новый Цвет(51,51,153));
	мЦвета.Добавить(Новый Цвет(255,153,0));
	мЦвета.Добавить(Новый Цвет(153,204,255));
	мЦвета.Добавить(Новый Цвет(128,0,0));
	мЦвета.Добавить(Новый Цвет(153,204,0));
	мЦвета.Добавить(Новый Цвет(204,153,255));
	мЦвета.Добавить(Новый Цвет(255,102,0));
	мЦвета.Добавить(Новый Цвет(51,153,102));
	мЦвета.Добавить(Новый Цвет(0,204,204));
	мЦвета.Добавить(Новый Цвет(255,255,0));
	// АПК:1346-вкл
	
	Возврат мЦвета;

КонецФункции

Процедура НарисоватьСтрелку(СтруктураДляСтрелок,НомерСтрокиПоказателя,НомерСтроки,НомерСвязи)
	
	Если НомерСтроки = Неопределено ИЛИ НомерСтрокиПоказателя = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	МассивЦветов 	= СтруктураДляСтрелок.МассивЦветов;
	ТабДокумент 	= СтруктураДляСтрелок.ТабДокумент;
	ШиринаКолонок 	= СтруктураДляСтрелок.ШиринаКолонок;
	
	ВсегоЦветов = МассивЦветов.Количество();
	Если НомерСвязи <= ВсегоЦветов Тогда
		ТекЦвет = МассивЦветов.Получить(НомерСвязи-1);
	Иначе
		ТекЦвет = МассивЦветов.Получить(НомерСвязи - Цел(НомерСвязи/ВсегоЦветов)*ВсегоЦветов);
	КонецЕсли;
	
	// Ширина всех колонок
	Лево = ШиринаКолонок*1.8525;
	// Магическая постоянная при высоте строк =12
	КоэффициентВерх = 4.2335;
	ВерхСтарт = НомерСтрокиПоказателя*КоэффициентВерх-3.5; 
	ВерхФиниш = НомерСтроки*КоэффициентВерх-1.5;
	// Отступ
	Отступ = 3*НомерСвязи;
	НомерСвязи = НомерСвязи + 1;
	
	// Старт
	Линия = ТабДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямая);
	Линия.ЦветЛинии = ТекЦвет;
	Линия.Лево   = Лево;
	Линия.Верх   = ВерхСтарт;
	Линия.Ширина = Отступ;
	Линия.Высота = 0;
	
	// Сгиб
	Линия = ТабДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямая);
	Линия.ЦветЛинии = ТекЦвет;
	Линия.Лево   = Лево+Отступ;
	Линия.Верх   = ВерхСтарт;
	Линия.Ширина = 1.5;
	Линия.Высота = -1.5;
	
	// Линия
	Линия = ТабДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямая);
	Линия.ЦветЛинии = ТекЦвет;
	Линия.Лево   = Лево+Отступ+1.5;
	Линия.Верх   = ВерхСтарт-1.5;
	Линия.Ширина = 0;
	Линия.Высота = ВерхФиниш-ВерхСтарт+3;
	
	// Сгиб
	Линия = ТабДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямая);
	Линия.ЦветЛинии = ТекЦвет;
	Линия.Лево   = Лево+Отступ;
	Линия.Верх   = ВерхФиниш;
	Линия.Ширина = 1.5;
	Линия.Высота = 1.5;
	
	// Стрелка
	Линия = ТабДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямая);
	Линия.ЦветЛинии = ТекЦвет;
	Линия.Лево   = Лево;
	Линия.Верх   = ВерхФиниш;
	Линия.Ширина = Отступ;
	Линия.Высота = 0;
	
	Линия = ТабДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямая);
	Линия.ЦветЛинии = ТекЦвет;
	Линия.Лево   = Лево;
	Линия.Верх   = ВерхФиниш;
	Линия.Ширина = 0.5;
	Линия.Высота = 0.5;
	
	Линия = ТабДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямая);
	Линия.ЦветЛинии = ТекЦвет;
	Линия.Лево   = Лево;
	Линия.Верх   = ВерхФиниш;
	Линия.Ширина = 0.5;
	Линия.Высота = -0.5;
	
КонецПроцедуры

Процедура ДобавитьПоказателиИсточникиРекурсивно(тРезультатФильтр, тРезультат, Показатель)
	
	НайденныеСтроки = тРезультат.НайтиСтроки(Новый Структура("Потребитель", Показатель));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НСтрока = тРезультатФильтр.Добавить();
		ЗаполнитьЗначенияСвойств(НСтрока, НайденнаяСтрока);
		Если НайденнаяСтрока.Потребитель <> НайденнаяСтрока.ПоказательОперанд Тогда
			ДобавитьПоказателиИсточникиРекурсивно(тРезультатФильтр, тРезультат, НайденнаяСтрока.ПоказательОперанд);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ВывестиПоказателиРучнойВвод(ТабДокумент, ВидОтчета, НуженВыводШапки = Ложь)
	
	Макет = ПолучитьМакет("Макет");
	
	Если НуженВыводШапки Тогда
		
		ОбластьПропуск 		= Макет.ПолучитьОбласть("Пропуск|Показатель");
		ОбластьШапкаУровень = Макет.ПолучитьОбласть("ШапкаУровень|Показатель");
	
		ТабДокумент.Вывести(ОбластьПропуск);
		ОбластьШапкаУровень.Параметры.УровеньРасчета = 0;
		ТабДокумент.Вывести(ОбластьШапкаУровень);
		
	КонецЕсли;
	
	ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаПоказатель|Показатель");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПотребителиРасчета.Ссылка КАК Показатель
		|ИЗ
		|	Справочник.ПоказателиОтчетов КАК ПотребителиРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
		|		ПО (ВЫРАЗИТЬ(ИсточникиДанныхДляРасчетов.НазначениеРасчетов КАК Справочник.ПравилаОбработки).Владелец = &ВидОтчета)
		|			И (ИсточникиДанныхДляРасчетов.ПотребительРасчета = ПотребителиРасчета.Ссылка
		|				ИЛИ ИсточникиДанныхДляРасчетов.ПоказательОтбор = ПотребителиРасчета.Ссылка)
		|ГДЕ
		|	ПотребителиРасчета.Владелец = &ВидОтчета
		|	И ПотребителиРасчета.ПометкаУдаления = ЛОЖЬ
		|	И ИсточникиДанныхДляРасчетов.Ссылка ЕСТЬ NULL";

	Запрос.УстановитьПараметр("ВидОтчета", ВидОтчета);			
	РезультатЗапроса = Запрос.Выполнить(); 			
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();			
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		// Выводим строку
		ОбластьСтрока.Параметры.Показатель = ВыборкаДетальныеЗаписи.Показатель;
		ОбластьСтрока.Параметры.Расшифровка = ВыборкаДетальныеЗаписи.Показатель;
		ТабДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла; 	
	
КонецПроцедуры

Процедура ВывестиАналитикиРекурсивно(СчАналитика, тРезультатПоказатели, текСтрока, НомерСтроки, ТекУровень, СтруктураДляАналитик)
	
	Если СчАналитика > текСтрока.ЧислоАналитик + СтруктураДляАналитик.МаксКлючевыхАналитик Тогда
		ИмяАналитики = "АналитикаВалюта";
		Если НЕ текСтрока.ЕстьАналитикаВалюта Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ИмяАналитики = "Аналитика" + СчАналитика;
	КонецЕсли;
	
	ТабДокумент = СтруктураДляАналитик.ТабДокумент;
	ОбластьАналитикаПоказатель 	= СтруктураДляАналитик.ОбластьАналитикаПоказатель;
	ОбластьАналитикаПериод 		= СтруктураДляАналитик.ОбластьАналитикаПериод;
			
	тРазличныеАналитики = тРезультатПоказатели.Скопировать(,ИмяАналитики);
	тРазличныеАналитики.Свернуть(ИмяАналитики);
		
	Для Каждого стрАналитика Из тРазличныеАналитики Цикл
		
		// Выводим строку с аналитикой
		Аналитика = стрАналитика[ИмяАналитики];
		ОбластьАналитикаПоказатель.Параметры.Аналитика = Аналитика;
		ОбластьАналитикаПоказатель.Область(1,2).Отступ = СчАналитика;
		ТабДокумент.Вывести(ОбластьАналитикаПоказатель,СчАналитика);
		НомерСтроки = НомерСтроки + 1;
		
		// Выводим значения по периоду
		Для Каждого Период Из СтруктураДляАналитик.МассивПериодов Цикл
			тРезультатПериод = тРезультатПоказатели.Скопировать(
				Новый Структура("ПериодОтчета," + ИмяАналитики,Период,Аналитика));
			Если ТекУровень = 0 Тогда
				ТипЗначения = текСтрока.ТипПоказателя;
			Иначе
				ТипЗначения = текСтрока.ТипПотребителя;
			КонецЕсли;
			Если ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда	
				тРезультатПериод.Свернуть(,"Значение");
				Если тРезультатПериод.Количество() Тогда
					ОбластьАналитикаПериод.Параметры.Значение = тРезультатПериод.Получить(0).Значение;
				Иначе
					ОбластьАналитикаПериод.Параметры.Значение = 0;
				КонецЕсли;
			Иначе
				Если тРезультатПериод.Количество() Тогда
					ОбластьАналитикаПериод.Параметры.Значение = тРезультатПериод.Получить(0).ЗначениеНечисловое;
				Иначе
					ОбластьАналитикаПериод.Параметры.Значение = "";
				КонецЕсли;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьАналитикаПериод);
		КонецЦикла;
		
		// Выводим следующую аналитику
		Если ИмяАналитики <> "АналитикаВалюта" Тогда
			ВывестиАналитикиРекурсивно(СчАналитика+1, тРезультатПоказатели, текСтрока, НомерСтроки, ТекУровень, СтруктураДляАналитик);
		КонецЕсли;		
		
	КонецЦикла;					
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли