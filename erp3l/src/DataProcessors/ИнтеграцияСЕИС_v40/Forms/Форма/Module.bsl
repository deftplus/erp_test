&НаСервере
// Структура с произвольными ключами.
// Не предназначена для непосредственного чтения или записи.
// См. функции УстановитьЗначениеВКонтексте и ПолучитьЗначениеВКонтексте.
Перем КонтекстОбработкиГлобальнаяПеременная;


#Область ПрограммныйИнтерфейс


// Функции которые должна реализовать обработка,
// чтобы обеспечить интеграцию с ЭТП вызовом клиентских функций.

// Параметры.ОписаниеОбмена - структура с описанием команды обмена,
// передается в вызываемую функцию
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(Параметры.ОписаниеОбмена) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ОписаниеОбмена = Параметры.ОписаниеОбмена;
	Если НЕ ОписаниеОбмена.Свойство("ИмяФункции")
		 И НЕ ЗначениеЗаполнено(ОписаниеОбмена.ИмяФункции) Тогда
		ТекстОшибки = НСтр("ru = 'Не распознана команда ""%КомандаОбмена%"" для обмена с ЕИС.'"); 
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КомандаОбмена%", Строка(ОписаниеОбмена.КомандаОбмена));
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
			ОписаниеОбмена.ПоляОписанияТранзакции, ТекстОшибки);
		Возврат;
	КонецЕсли;
	Если НЕ ПроверитьЗаполненаОрганизацияНаСервере(ОписаниеОбмена) Тогда
		ТекстОшибки = НСтр("ru = 'Для команды ""%КомандаОбмена%"" требуется указание организации.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КомандаОбмена%", Строка(ОписаниеОбмена.ПоляОписанияТранзакции));
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
			ОписаниеОбмена.ПоляОписанияТранзакции, ТекстОшибки);
		Возврат;
	КонецЕсли;
	Попытка
		ОбработатьКомандуОбмена();		// В процедуре ПриОткрытии() отправим сообщение.
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = СтрШаблон(Нстр("ru = 'Ошибка вызова команды обмена:%1%2'"), Символы.ПС, ПодробноеПредставлениеОшибки(Инфо));
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(
			ОписаниеОбмена.ПоляОписанияТранзакции, ТекстОшибки, "ЕИС");
		ОписаниеОбмена.флТранзакцияЗавершиласьУспешно = Ложь;
	КонецПопытки;		

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Отказ = Истина;
	// Отправляем пакет
	Если НЕ ПустаяСтрока(ТекстОписанияОбъекта)
		 И НЕ ОписаниеОбмена.ПоляОписанияТранзакции.ОшибкаОбменаСЭТП Тогда
		ОписаниеОбмена.флТранзакцияЗавершиласьУспешно = ОтправитьОписаниеНаСайт();
	КонецЕсли;
	// Обязательный вызов, для записи данных в базу
	ИнтеграцияЦУЗсЭТПСерверУХ.ПослеОбменаНаСервере(ОписаниеОбмена);    
	// Установим статусы выгруженных объектов.
	УстановитьСтатусВыгруженногоОбъекта(ОписаниеОбмена);
	// Передаем ответ в вызвавшую форму
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, ОписаниеОбмена);
	Закрыть();
КонецПроцедуры


#КонецОбласти

#Область ПолучениеПодтвержденияОтЕИС


&НаСервере
Функция ПолучитьТекстЗапросаНаВыгрузкуДанныхОтЕИС(ОписаниеОбмена, ЕИСФабрикаXDTO)
	ЭТП = ОписаниеОбмена.ЭТП;
	ПоляОписанияТранзакции = ОписаниеОбмена.ПоляОписанияТранзакции;
	УИДДляЗапроса = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьУИДОбъектаИнтеграцииСЕИС(
												ОписаниеОбмена.ОбъектВыгрузки);
	ТекстОписания = Неопределено;
	Попытка
		Если НЕ ЗначениеЗаполнено(УИДДляЗапроса) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции,
				Нстр("ru = 'Не указан УИД объекта для запроса! '"));
			Возврат Неопределено;
		КонецЕсли;
		ПространствоИмен = "http://zakupki.gov.ru/223fz/webRequest/1";
		КорневыеОбъекты =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьКорневыеОбъектыПространстваИмен(
				ЕИСФабрикаXDTO,
				ПространствоИмен);
		// Типы данных веб-сервиса
		T_publishedDataRequest = КорневыеОбъекты.Получить("publishedDataRequest").Тип;
		T_header =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_publishedDataRequest, "header");
		T_body = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_publishedDataRequest, "body");
		T_guidList = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_body, "guidList");
		T_guid = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_guidList, "guid");
		// Объект XDTO Сведения о договоре
		ПакетДанныхЗапросаКЕИС = ЕИСФабрикаXDTO.Создать(T_publishedDataRequest);
		// Заголовок пакета.
 		ПакетДанныхЗапросаКЕИС.header = ЕИСФабрикаXDTO.Создать(T_header);
 		ПакетДанныхЗапросаКЕИС.header.guid = ПоляОписанияТранзакции.КлючСообщения;
 		ПакетДанныхЗапросаКЕИС.header.createDateTime = ТекущаяДата();
		// Тело пакета
		ПакетДанныхЗапросаКЕИС.body = ЕИСФабрикаXDTO.Создать(T_body);
		ПакетДанныхЗапросаКЕИС.body.guidList = ЕИСФабрикаXDTO.Создать(T_guidList);
		ПакетДанныхЗапросаКЕИС.body.guidList.guid.Добавить(УИДДляЗапроса);
		Если ПакетДанныхЗапросаКЕИС = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ПакетДанныхЗапросаКЕИС.Проверить();	
		ТекстОписания = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьТекстОписанияОбъекта(
							ЕИСФабрикаXDTO, 
							ПакетДанныхЗапросаКЕИС, 
							"publishedDataRequest");
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = 
			СтрШаблон(Нстр("ru = 'Заполнение данных для отправки запроса к ЕИС закончилось ошибкой!%1%2'"), 
				Символы.ПС, ПодробноеПредставлениеОшибки(Инфо));
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(
			ПоляОписанияТранзакции, ТекстОшибки, "ЕИС");
		Возврат Неопределено;
	КонецПопытки;
	Возврат ТекстОписания;
КонецФункции


#КонецОбласти

#Область ПолучениеОписанияДоговораЗакупки
&НаСервере
Функция ГуидПрограммыОснования(ДокументОснование)
	 Запрос = Новый Запрос;
	 Запрос.УстановитьПараметр("СтрокаПлана",ДокументОснование);
	 Запрос.УстановитьПараметр("СостояниеОбъекта",Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Размещен);
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ПрограммаЗакупокСтрокиПланаЗакупок.Ссылка КАК Ссылка,
	                |	ПрограммаЗакупокСтрокиПланаЗакупок.СтрокаПланаЗакупок КАК СтрокаПланаЗакупок,
	                |	isnull(ВложенныйЗапрос.КлючСообщения,"""") КАК КлючСообщения
	                |ИЗ
	                |	Документ.ПрограммаЗакупок.СтрокиПланаЗакупок КАК ПрограммаЗакупокСтрокиПланаЗакупок
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов КАК РегистрСостоянийОбъектов
	                |		ПО ПрограммаЗакупокСтрокиПланаЗакупок.Ссылка = РегистрСостоянийОбъектов.Объект
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                |			ЖурналОбменаСЭТП.ОбъектОбмена КАК ОбъектОбмена,
	                |			ЖурналОбменаСЭТП.КлючСообщения КАК КлючСообщения,
	                |			МАКСИМУМ(ЖурналОбменаСЭТП.ДатаОбмена) КАК ДатаОбмена
	                |		ИЗ
	                |			РегистрСведений.ЖурналОбменаСЭТП КАК ЖурналОбменаСЭТП
	                |		ГДЕ
	                |			ЖурналОбменаСЭТП.Ошибка = ЛОЖЬ
	                |		
	                |		СГРУППИРОВАТЬ ПО
	                |			ЖурналОбменаСЭТП.ОбъектОбмена,
	                |			ЖурналОбменаСЭТП.КлючСообщения) КАК ВложенныйЗапрос
	                |		ПО ПрограммаЗакупокСтрокиПланаЗакупок.Ссылка = ВложенныйЗапрос.ОбъектОбмена
	                |ГДЕ
	                |	РегистрСостоянийОбъектов.СостояниеОбъекта = &СостояниеОбъекта
	                |	И ПрограммаЗакупокСтрокиПланаЗакупок.СтрокаПланаЗакупок = &СтрокаПлана";
	 Результат = Запрос.Выполнить().Выбрать();
	 Пока Результат.Следующий() Цикл
		 Если Строка(Результат.КлючСообщения) <>"" Тогда 
			 Возврат Строка(Результат.КлючСообщения);		
		 Иначе 
			 Возврат Строка(Результат.Ссылка.УИД_ЕИС);
		 КонецЕсли; 
	 КонецЦикла;	
	Возврат "";
КонецФункции


&НаСервере
Функция ПолучитьТекстОписанияДоговораЗакупки(ОписаниеОбмена, ЕИСФабрикаXDTO)
	ЭТП = ОписаниеОбмена.ЭТП;
	ПоляОписанияТранзакции = ОписаниеОбмена.ПоляОписанияТранзакции;
	Договор = ОписаниеОбмена.ОбъектВыгрузки;
	ТекстОписания = Неопределено;
	Попытка
		Лот = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьЛотДоговора(Договор);
		Если НЕ ЗначениеЗаполнено(Лот) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции,
				СтрШаблон(Нстр("ru = 'Договор %1 должен быть введен в рамках закупки с указанием лота! '"), 
					Договор));
			Возврат Неопределено;
		КонецЕсли;
		ЗакупочнаяПроцедура = Лот.Владелец;
		ОписаниеВерсииЛота = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьВерсиюОбъектаДляЕИС(Лот, Истина);
		УИДЛота = ОписаниеВерсииЛота.ГУИДВерсии;
		ОписаниеРазмещеннойВерсииДоговора = 
			ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьВерсиюОбъектаДляЕИС(
				Договор, Истина);
		ОписаниеВерсииДоговора = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьВерсиюОбъектаДляЕИС(Договор);
		УИДДоговора = ОписаниеВерсииДоговора.ГУИДВерсии;
		СохранитьУИДОбъекта(Лот,, УИДЛота);
		СохранитьУИДОбъекта(Договор,, УИДДоговора);
		ПространствоИмен = "http://zakupki.gov.ru/223fz/contract/1";
		КорневыеОбъекты =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьКорневыеОбъектыПространстваИмен(
				ЕИСФабрикаXDTO,
				ПространствоИмен);
		// Типы данных веб-сервиса
		T_contract = КорневыеОбъекты.Получить("contract").Тип;
		T_header =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_contract, "header");
		T_body = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_contract, "body");
		T_contractItem = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_body, "item");
		T_contractData = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
							T_contractItem, "contractData");
		T_customer = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
							T_contractData, "customer");
				
		// Объект XDTO Сведения о договоре
		ПакетДанныхДоговора = ЕИСФабрикаXDTO.Создать(T_contract);
		
		// Заголовок пакета.
 		ПакетДанныхДоговора.header = ЕИСФабрикаXDTO.Создать(T_header);
 		ПакетДанныхДоговора.header.guid = ПоляОписанияТранзакции.КлючСообщения;
 		ПакетДанныхДоговора.header.createDateTime = ТекущаяДата();
	
		// Тело пакета
		ПакетДанныхДоговора.body = ЕИСФабрикаXDTO.Создать(T_body);
		ПакетДанныхДоговора.body.item = ЕИСФабрикаXDTO.Создать(T_contractItem);
		ПакетДанныхДоговора.body.item.guid = Строка(Новый УникальныйИдентификатор);
		
		// Данные договора
		ПакетДанныхДоговора.body.item.contractData = ЕИСФабрикаXDTO.Создать(T_contractData);
		ДанныеДоговора = ПакетДанныхДоговора.body.item.contractData;
		ДанныеДоговора.guid = УИДДоговора;
		//ДанныеДоговора.registrationNumber
		//ДанныеДоговора.notice44
		//ДанныеДоговора.notice44Num
		ДанныеДоговора.termination = Договор.ПрекращениеОбязательствСОкончаниемСрокаДействия;
		ДанныеДоговора.extension = Договор.ВозможностьПродленияСрокаДействия;
		ДанныеДоговора.prolongation = Договор.Пролонгация;
		Если НЕ ПустаяСтрока(Договор.УсловиеНачалаИсполненияДоговора) Тогда
			ДанныеДоговора.startExecutionTerm =
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
					Договор.УсловиеНачалаИсполненияДоговора);
		КонецЕсли;
		Если НЕ ПустаяСтрока(Договор.УсловиеОкончанияИсполненияДоговора) Тогда
			ДанныеДоговора.endExecutionTerm =
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
					Договор.УсловиеОкончанияИсполненияДоговора);
		КонецЕсли;
		ДанныеДоговора.lotNum = Лот.Код;
		//ДанныеДоговора.urlOOS
		ДанныеДоговора.urlVSRZ = "zakupki.gov.ru";
		ДанныеДоговора.createDateTime = Договор.Дата;
		Если НЕ ЗначениеЗаполнено(Договор.Организация) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции,
				Нстр("ru = 'Не заполнена организация которая заключила договор! '"));
			Возврат Неопределено;
		КонецЕсли;
		customer = ПолучитьОписаниеОрганизации(
									ЕИСФабрикаXDTO, 
									T_customer, 
									Договор.Организация, 
									ПоляОписанияТранзакции);
		Если ПоляОписанияТранзакции.ОшибкаОбменаСЭТП Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДанныеДоговора.customer = customer;
		Если НЕ ЗначениеЗаполнено(ЗакупочнаяПроцедура.ОрганизаторЗакупки) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции,
				Нстр("ru = 'Не заполнена организация организатор закупки! '"));
			Возврат Неопределено;
		КонецЕсли;
		placer = ПолучитьОписаниеОрганизации(
								ЕИСФабрикаXDTO, 
								T_customer, 
								ЗакупочнаяПроцедура.ОрганизаторЗакупки, 
								ПоляОписанияТранзакции);
		Если ПоляОписанияТранзакции.ОшибкаОбменаСЭТП Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДанныеДоговора.placer = placer;
		//ДанныеДоговора.publicationDate
		//ДанныеДоговора.status = "F";
		Если ОписаниеВерсииДоговора.НомерВерсии > 0 Тогда
			ДанныеДоговора.version = ОписаниеВерсииДоговора.НомерВерсии;
			ДанныеДоговора.modificationDescription =
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
					ОписаниеВерсииДоговора.ОбоснованиеИзменений);
		КонецЕсли;
		РеквизитыЭлектроннойЗакупки =
			ПолучитьРеквизитыЭлектроннойЗакупки(ЗакупочнаяПроцедура);
		ДанныеДоговора.digitalPurchase = 
			РеквизитыЭлектроннойЗакупки.ВЭлектронномВиде;
		//Код признака закупки в электронном виде
		ДанныеДоговора.digitalPurchaseCode = 
			РеквизитыЭлектроннойЗакупки.КодСпособаЗакупки;
		ДанныеДоговора.provider =
			Лот.Владелец.ПриоритетУчастияМалогоИСреднегоПредпринимательства;
		Если ДанныеДоговора.provider Тогда
			ДанныеДоговора.providerCode = "30";
		КонецЕсли;
		ДанныеДоговора.changeContract = Ложь;
		Вложения = СоздатьВложениеФайлов(
									ЭТП, 
									ЕИСФабрикаXDTO, 
									Договор.ВерсияСоглашения, 
									T_contractData);
		Если Вложения <> Неопределено Тогда
			ДанныеДоговора.attachments = Вложения;
		КонецЕсли;
		Если ИнтеграцияЦУЗсЭТПСерверУХ.КорректныйНомерРегистрацииЕИС(Договор) Тогда
			ДанныеДоговора.contractRegNumber = Договор.РегистрационныйНомерЕИС;
		КонецЕсли;
		Если ЗначениеЗаполнено(Договор.НаименованиеПолное) Тогда
			ДанныеДоговора.name =
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
					Договор.НаименованиеПолное);
		Иначе
			ДанныеДоговора.name = 
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
					Договор.Наименование);
		КонецЕсли;
		ДанныеДоговора.contractDate = Договор.ДатаПодписания;
		//ДанныеДоговора.approveDate = ;
		Если НЕ ИнтеграцияЦУЗсЭТПСерверУХ.КорректныйНомерРегистрацииЕИС(
													ЗакупочнаяПроцедура) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции, 
				Нстр("ru = 'Не заполнен регистрационный номер закупки в ЕИС! '"));
			Возврат Неопределено;
		КонецЕсли;
		ОписаниеpurchaseNoticeInfo = ПолучитьОписаниеpurchaseNoticeInfo(
			ЕИСФабрикаXDTO, 
			T_contractData, 
			ЗакупочнаяПроцедура,
			ПоляОписанияТранзакции);
		Если ПоляОписанияТранзакции.ОшибкаОбменаСЭТП Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДанныеДоговора.purchaseNoticeInfo = ОписаниеpurchaseNoticeInfo;
		ДанныеДоговора.lotGuid = УИДЛота;
		ДанныеДоговора.subjectContract = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				Лот.ПредметДоговора);
		ДанныеДоговора.purchaseTypeInfo =
			ЕИСФабрикаXDTO.Создать(
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
					T_contractData,
					"purchaseTypeInfo"));
		ДанныеДоговора.purchaseTypeInfo.code =
			РеквизитыЭлектроннойЗакупки.КодСпособаЗакупки;
		ДанныеДоговора.purchaseTypeInfo.name = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				РеквизитыЭлектроннойЗакупки.НаименованиеСпособаЗакупки);
		ДанныеДоговора.resumeDate = ЗакупочнаяПроцедура.ДатаПодведенияИтогов;
		ОписаниеПоставщика = ПолучитьИнформациюОПоставщикеПоДоговору(
			ЭТП, 
			ЕИСФабрикаXDTO, 
			ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьКонтрагентаДоговора(Договор),
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_contractData, "supplierInfo"), 
			ПоляОписанияТранзакции,
			Договор.Дата);
		Если ОписаниеПоставщика = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДанныеДоговора.supplierInfo.Добавить(ОписаниеПоставщика);
		ДанныеДоговора.hasSubcontractor =
			Договор.ПривлечениеМалогоИСреднегоПредпринимательстваКакПодрядчиков;
		Если Договор.ПривлечениеМалогоИСреднегоПредпринимательстваКакПодрядчиков Тогда
			ДанныеДоговора.hasSubcontractorCode = "31";
			ДанныеДоговора.subcontractorsTotal = Лот.СуммаЛота;
		КонецЕсли;
		//ДанныеДоговора.hasGoodInfo = Ложь;
		Если НЕ ПустаяСтрока(Договор.КомментарийДляЕИС) Тогда
			ДанныеДоговора.additionalInfo =
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
					Договор.КомментарийДляЕИС);
		КонецЕсли;
		ДанныеДоговора.price = Договор.Сумма;
		ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		Если Договор.ВалютаВзаиморасчетов <> ВалютаРеглУчета Тогда
			КоэффициентПересчетаВалюты =
				РаботаСКурсамиВалют.ПересчитатьВВалюту(
									1,
									Договор.ВалютаВзаиморасчетов, 
									ВалютаРеглУчета, 
									Договор.ДатаПодписания);
			ДанныеДоговора.exchangeRate = Окр(КоэффициентПересчетаВалюты, 2);
			ДанныеДоговора.rubPrice =
				Договор.Сумма * КоэффициентПересчетаВалюты;
		КонецЕсли;
		currency = ПолучитьОписаниеВалюты(

				ЕИСФабрикаXDTO,
				ПоляОписанияТранзакции,
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
					T_contractData, "currency"), 
				Договор.ВалютаВзаиморасчетов);
		Если currency = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	
		ДанныеДоговора.currency = currency;
		ДанныеДоговора.startExecutionDate = Договор.Дата;
		ДанныеДоговора.endExecutionDate = Договор.СрокДействия;
		// Номенклатура договора
		ОписаниеНоменклатурыДоговора = ПолучитьПозицииДоговора(
						ЭТП, 
						ЕИСФабрикаXDTO, 
						ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
							T_contractData, "contractPositions"), 
						Договор, ПоляОписанияТранзакции);
		Если ОписаниеНоменклатурыДоговора <> Неопределено Тогда
			ДанныеДоговора.contractPositions = ОписаниеНоменклатурыДоговора;
		КонецЕсли;
		//ДанныеДоговора.contractChangeDocs
		ДокументыОснованияЗаключенияДоговора = ЗаполнитьДокументыОснованияДоговора(
						ЭТП, 
						ЕИСФабрикаXDTO, 
						Договор, 
						ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
							T_contractData, 
							"contractConfirmingDocs"), 
						ПоляОписанияТранзакции);
		Если ДокументыОснованияЗаключенияДоговора <> Неопределено Тогда
			ДанныеДоговора.contractConfirmingDocs = ДокументыОснованияЗаключенияДоговора;
		КонецЕсли;
		//ДанныеДоговора.hasOkpdAndOkdpRows
		ДанныеДоговора.hasOkpd2Rows = Истина;
		Если ПакетДанныхДоговора = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ПакетДанныхДоговора.Проверить();	
		ТекстОписания = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьТекстОписанияОбъекта(
							ЕИСФабрикаXDTO, 
							ПакетДанныхДоговора, 
							"contract");
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = 
			СтрШаблон(Нстр("ru = 'Заполнение данных для отправки договора закончилось ошибкой!%1%2'"), 
				Символы.ПС, ПодробноеПредставлениеОшибки(Инфо));
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(
			ПоляОписанияТранзакции, ТекстОшибки, "ЕИС");
		Возврат Неопределено;
	КонецПопытки;
	Возврат ТекстОписания;
КонецФункции

&НаСервере
Функция ЗаполнитьДокументыОснованияДоговора(ЭТП, 
											ЕИСФабрикаXDTO, 
											Договор, 
											T_contractConfirmingDocs, 
											ПоляОписанияТранзакции)
	ТЗОснования = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьОснованияДоговора(Договор);
	Если (ТЗОснования = Неопределено) ИЛИ (ТЗОснования.Количество() = 0) Тогда
		Возврат Неопределено;
	КонецЕсли;
	T_contractDoc = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
						T_contractConfirmingDocs, 
						"contractDoc");
	ОписаниеДокументовОснований = ЕИСФабрикаXDTO.Создать(T_contractConfirmingDocs);
	Для Каждого СтрокаОснования Из ТЗОснования Цикл
		ОписаниеДокументаОснования = ЕИСФабрикаXDTO.Создать(T_contractDoc);
		ОписаниеДокументаОснования.confirmingDocCode = "1";
		Если ЗначениеЗаполнено(СтрокаОснования.УИД) Тогда
			ОписаниеДокументаОснования.protocolInfoGuid = СтрокаОснования.УИД;
			Если ЗначениеЗаполнено(СтрокаОснования.Ссылка) Тогда
				СохранитьУИДОбъекта(
					СтрокаОснования.Ссылка, 
					СтрокаОснования.Наименование, 
					СтрокаОснования.УИД);
			Иначе
				СохранитьУИДОбъекта(
					, 
					СтрокаОснования.Наименование, 
					СтрокаОснования.УИД);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаОснования.Комментарий) Тогда
			ОписаниеДокументаОснования.additionalInfo = 
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				СтрокаОснования.Комментарий);
		КонецЕсли;
		ОписаниеДокументаОснования.docDate = СтрокаОснования.Дата;
		Если ЗначениеЗаполнено(СтрокаОснования.Номер) Тогда
			ОписаниеДокументаОснования.docNum =
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
					СтрокаОснования.Номер);
		КонецЕсли;
		ОписаниеДокументовОснований.contractDoc.Добавить(ОписаниеДокументаОснования);
	КонецЦикла;
	Возврат ОписаниеДокументовОснований;
КонецФункции

&НаСервере
Функция ПолучитьИнформациюОПоставщикеПоДоговору(ЭТП,
												ЕИСФабрикаXDTO, 
												Контрагент, 
												T_supplierInfo, 
												ПоляОписанияТранзакции,
												ДатаНачалаДоговора)
	ОписаниеКонтрагента = ЕИСФабрикаXDTO.Создать(T_supplierInfo);
	ОписаниеКонтрагента.name = 
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			Контрагент.Наименование);
	ОписаниеКонтрагента.shortName = 
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			Контрагент.Наименование);
	Если ЗначениеЗаполнено(Контрагент.НаименованиеПолное) Тогда
		ОписаниеКонтрагента.brandName = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				Контрагент.НаименованиеПолное);
	КонецЕсли;
	//ОписаниеКонтрагента.additionalFullName
	ЭтоИностраннаяКомпания = (Контрагент.СтранаРегистрации <> Справочники.СтраныМира.Россия);
	Если НЕ ЭтоИностраннаяКомпания Тогда
		Если ПустаяСтрока(Контрагент.ИНН) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции,
				Нстр("ru = 'Не заполнен ИНН контрагента! '"));
			Возврат Неопределено;
		КонецЕсли;
		ОписаниеКонтрагента.inn = СокрЛП(Контрагент.ИНН);
		ОписаниеКонтрагента.kpp = СокрЛП(Контрагент.КПП);
	КонецЕсли;
	Если НЕ ПустаяСтрока(Контрагент.КодПоОКПО) Тогда
		ОписаниеКонтрагента.okpo = СокрЛП(Контрагент.КодПоОКПО);
	КонецЕсли;
	Если ЭтоИностраннаяКомпания Тогда
		Если ПустаяСтрока(Контрагент.РегистрационныйНомер) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции,
				Нстр("ru = 'Не заполнен ОГРН номер контрагента! '"));
			Возврат Неопределено;
		КонецЕсли;
		ОписаниеКонтрагента.code = Контрагент.РегистрационныйНомер;
	КонецЕсли;	
	//ОписаниеКонтрагента.additionalInfo
	Если Контрагент.ЮридическоеФизическоеЛицо =
			Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ОписаниеКонтрагента.type = "L";
	Иначе
		ОписаниеКонтрагента.type = "P";
	КонецЕсли;
	РазмерКонтрагента = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьРазмерКонтрагента(
		Контрагент, ДатаНачалаДоговора);
	СубъектМалогоИлиСреднегоПредпринимательстваУХ =
		(РазмерКонтрагента <> Перечисления.РазмерыКонтрагентовДляЕИС.Крупный);
	ОписаниеКонтрагента.provider = СубъектМалогоИлиСреднегоПредпринимательстваУХ;
	Если СубъектМалогоИлиСреднегоПредпринимательстваУХ Тогда
		ОписаниеКонтрагента.providerCode = "30";
	КонецЕсли;
	ОписаниеКонтрагента.subcontractor = Ложь;
	//Если Контрагент. Тогда
	//	ОписаниеКонтрагента.subcontractorCode = "31";
	//КонецЕсли;
	ОписаниеКонтрагента.individual =
		(Контрагент.ЮридическоеФизическоеЛицо = 
			Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ОписаниеКонтрагента.nonResident = ЭтоИностраннаяКомпания;
	Если ЗначениеЗаполнено(Контрагент.ДатаПостановкиНаУчетВНалоговой) Тогда
		ОписаниеКонтрагента.registrationDate = Контрагент.ДатаПостановкиНаУчетВНалоговой;
		ОписаниеКонтрагента.tax = Истина;
	Иначе
		ОписаниеКонтрагента.tax = Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент.КодОКОПФ) Тогда
		ОписаниеКонтрагента.okopf = Контрагент.КодОКОПФ;
		Если ЗначениеЗаполнено(Контрагент.НаименованиеОКОПФ) Тогда
			ОписаниеКонтрагента.okopfName = 
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
					Контрагент.НаименованиеОКОПФ);
		КонецЕсли;
	КонецЕсли;
	КИ = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьКонтактнуюИнформацию(Контрагент);
	Если ПустаяСтрока(КИ.ЮридическийАдресЗначение) Тогда
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
			ПоляОписанияТранзакции,
			Нстр("ru = 'Не заполнен юридический адрес контрагента! '"));
		Возврат Неопределено;
	КонецЕсли;
	ОписаниеКонтрагента.address = ПолучитьОписаниеАдресаПоставщика(
									ЭТП, 
									ЕИСФабрикаXDTO, 
									ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
										T_supplierInfo, 
										"address"), 
									КИ, 
									КИ.ЮридическийАдресЗначение, 
									ПоляОписанияТранзакции);
	Если НЕ ПустаяСтрока(КИ.ПочтовыйАдресЗначение) Тогда
		ОписаниеКонтрагента.addressRf = ПолучитьОписаниеАдресаПоставщика(
									ЭТП, 
									ЕИСФабрикаXDTO, 
									ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
										T_supplierInfo, 
										"addressRf"), 
									КИ, 
									КИ.ПочтовыйАдресЗначение, 
									ПоляОписанияТранзакции);
	КонецЕсли;
	Возврат ОписаниеКонтрагента;
КонецФункции

&НаСервере
Функция ПолучитьПозицииДоговора(ЭТП,
								ЕИСФабрикаXDTO, 
								T_contractPositions, 
								Договор, 
								ПоляОписанияТранзакции)
	ТекстОшибки = "";
	ТЗНоменклатуры = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьОписаниеНоменклатурыДоговора(
						Договор, 
						ТекстОшибки);
	Если ТЗНоменклатуры = Неопределено Тогда
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
			ПоляОписанияТранзакции, 
			СтрШаблон(Нстр("ru = 'Не удалось получить перечень номенклатуры по договору! Возникла ошибка: %1'"), 
				ТекстОшибки));
		Возврат Неопределено;
	КонецЕсли;
	Если ТЗНоменклатуры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	T_contractPosition =
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_contractPositions, "contractPosition");
	T_okei = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
		T_contractPosition, "okei");
	T_okpd2 = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
		T_contractPosition, "okpd2");
	contractPositions = ЕИСФабрикаXDTO.Создать(T_contractPositions);
	НомерСтроки_ = 1;
	Для Каждого СтрокаНоменклатуры Из ТЗНоменклатуры Цикл
		// Создаем описание позиции лота
		ОписаниеПозиции = ЕИСФабрикаXDTO.Создать(T_contractPosition);
		//Идентификатор позиции
		УИД_СтрокиНоменклатуры = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьУИД_Идентификатора(
										ЭТП, 
										СтрокаНоменклатуры.Идентификатор);
		СохранитьУИДОбъекта(
			Неопределено,
			СтрШаблон(Нстр("ru = 'Строка номенклатуры №%1'"), СтрокаНоменклатуры.Идентификатор), 
			УИД_СтрокиНоменклатуры);
		ОписаниеПозиции.guid = УИД_СтрокиНоменклатуры;
		ОписаниеПозиции.name =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				СтрокаНоменклатуры.НоменклатураНаименование);
		ОписаниеПозиции.ordinalNumber = НомерСтроки_; //Порядковый номер позиции
		// ОКПД2
		Если ЗначениеЗаполнено(СтрокаНоменклатуры.КодОКПД2) Тогда
			ОписаниеПозиции.okpd2 = ЕИСФабрикаXDTO.Создать(T_okpd2);
			ОписаниеПозиции.okpd2.code = СокрЛП(СтрокаНоменклатуры.КодОКПД2);
		КонецЕсли;
		//ОписаниеПозиции.country
		//ОписаниеПозиции.producerCountry
		ОписаниеПозиции.impossibleToDetermineAttr =
				(СтрокаНоменклатуры.Количество = 0);
		Если СтрокаНоменклатуры.Количество > 0 Тогда
			// Единицы измерения
			ОписаниеПозиции.okei = ЕИСФабрикаXDTO.Создать(T_okei);
			ОписаниеПозиции.okei.code = СокрЛП(СтрокаНоменклатуры.ЕдиницаИзмеренияКод);
			// Количество
			ОписаниеПозиции.qty = СтрокаНоменклатуры.Количество;
		КонецЕсли;
		contractPositions.contractPosition.Добавить(ОписаниеПозиции);
		НомерСтроки_ = НомерСтроки_ + 1;
	КонецЦикла;
	Возврат contractPositions;
КонецФункции

&НаСервере
Функция ПолучитьОписаниеАдресаПоставщика(ЭТП, 
										ЕИСФабрикаXDTO, 
										T_supplierAddressType, 
										КИ, 
										АдресXML, 
										ПоляОписанияТранзакции)
 	ОписаниеАдреса = ЕИСФабрикаXDTO.Создать(T_supplierAddressType);
	КодыАдреса = АдресныйКлассификатор.КодыАдреса(АдресXML);
	СтруктураАдреса = 
		РаботаСАдресами.ПредыдущаяСтруктураКонтактнойИнформацииXML(
			АдресXML);
	ОписаниеАдреса.egrulEgripChanged = Ложь;
	Если ЗначениеЗаполнено(СтруктураАдреса.КодСтраны) Тогда
		ОписаниеАдреса.country =
			ЕИСФабрикаXDTO.Создать(
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
					T_supplierAddressType, 
					"country"));
		Если ЗначениеЗаполнено(СтруктураАдреса.Страна) Тогда
			ОписаниеАдреса.country.name = 
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
					СтруктураАдреса.Страна);
		КонецЕсли;
		ОписаниеАдреса.country.digitalCode = СтруктураАдреса.КодСтраны;
	КонецЕсли;
	ОписаниеАдреса.postCode = СокрЛП(СтруктураАдреса.Индекс);
	Если ЗначениеЗаполнено(КодыАдреса.ОКТМО) Тогда
		ОписаниеАдреса.oktmo = КодыАдреса.ОКТМО;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураАдреса.Регион) Тогда
		ОписаниеАдреса.region = ЕИСФабрикаXDTO.Создать(
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_supplierAddressType, 
				"region"));
		ОписаниеАдреса.region.code = СтруктураАдреса.КодРегиона;
		ОписаниеАдреса.region.name = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				СтруктураАдреса.Регион);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураАдреса.Район) Тогда
		Район =	ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
					СтруктураАдреса.Район);
	ИначеЕсли ЗначениеЗаполнено(СтруктураАдреса.Регион) Тогда
		Район = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
					СтруктураАдреса.Регион);
	Иначе
		Район = "";
	КонецЕсли;
	ОписаниеАдреса.area = Район;
	Если ЗначениеЗаполнено(СтруктураАдреса.Город) Тогда
		ОписаниеАдреса.city = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				СтруктураАдреса.Город);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураАдреса.НаселенныйПункт) Тогда
		ОписаниеАдреса.settlement =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				СтруктураАдреса.НаселенныйПункт);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураАдреса.Улица) Тогда
		ОписаниеАдреса.street =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				СтруктураАдреса.Улица);
	КонецЕсли;
	Если ЗначениеЗаполнено(КИ.Email) Тогда
		ОписаниеАдреса.email = КИ.Email;
	КонецЕсли;
	Если ЗначениеЗаполнено(КИ.Телефон) Тогда
		ОписаниеАдреса.phone =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				КИ.Телефон);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураАдреса.Квартира) Тогда
		ОписаниеАдреса.office = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				СтруктураАдреса.Квартира);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураАдреса.Корпус) Тогда
		ОписаниеАдреса.building = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				СтруктураАдреса.Корпус);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураАдреса.Дом) Тогда
		ОписаниеАдреса.house = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				СтруктураАдреса.Дом);
	КонецЕсли;
	
	
	Возврат ОписаниеАдреса;
КонецФункции

&НаСервере
Функция ПолучитьОписаниеpurchaseNoticeInfo(ЕИСФабрикаXDTO,
												T_contractData,
												ЗакупочнаяПроцедура,
												ПоляОписанияТранзакции)
	purchaseNoticeInfo = 
		ЕИСФабрикаXDTO.Создать(
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_contractData, 
				"purchaseNoticeInfo"));
	ОписаниеВерсииЗакупки = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьВерсиюОбъектаДляЕИС(
		ЗакупочнаяПроцедура, 
		Истина);
	УИДЗакупки = ОписаниеВерсииЗакупки.ГУИДВерсии;
	purchaseNoticeInfo.guid = УИДЗакупки;
	purchaseNoticeInfo.purchaseNoticeNumber = 
		ЗакупочнаяПроцедура.РегистрационныйНомер;
	purchaseNoticeInfo.name = 
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			ЗакупочнаяПроцедура.ПредметДоговора);
	Возврат purchaseNoticeInfo;
КонецФункции


#КонецОбласти


#Область ПолучениеОписанияИсполненияДоговораЗакупки


&НаСервере
Функция ПолучитьТекстОписанияИсполненияДоговора(ОписаниеОбмена, ЕИСФабрикаXDTO)
	ЭТП = ОписаниеОбмена.ЭТП;
	ПоляОписанияТранзакции = ОписаниеОбмена.ПоляОписанияТранзакции;
	ИсполнениеДоговора = ОписаниеОбмена.ОбъектВыгрузки;
	ТекстОписания = Неопределено;
	Попытка
		Договор = ИсполнениеДоговора.ДоговорКонтрагента;
		Если НЕ ЗначениеЗаполнено(Договор) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции, 
				Нстр("ru = 'Не заполнен договор! '"));
			Возврат Неопределено;
		КонецЕсли;
		Лот = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьЛотДоговора(Договор);
		Если НЕ ЗначениеЗаполнено(Лот) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции, 
				СтрШаблон(Нстр("ru = 'Договор %1 должен быть введен в рамках закупки! '"), Договор));
			Возврат Неопределено;
		КонецЕсли;
		ОписаниеВерсииЛота = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьВерсиюОбъектаДляЕИС(Лот, Истина);
		СохранитьУИДОбъекта(Лот,, ОписаниеВерсииЛота.ГУИДВерсии);
		ОписаниеВерсии = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьВерсиюОбъектаДляЕИС(ИсполнениеДоговора);
		УИДИсполнения = ОписаниеВерсии.ГУИДВерсии;
		СохранитьУИДОбъекта(ИсполнениеДоговора,, УИДИсполнения);
		ОписаниеВерсииДоговора = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьВерсиюОбъектаДляЕИС(Договор, Истина);
		СохранитьУИДОбъекта(Договор,, ОписаниеВерсииДоговора.ГУИДВерсии);
		ПространствоИмен = "http://zakupki.gov.ru/223fz/contract/1";
		КорневыеОбъекты = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьКорневыеОбъектыПространстваИмен(
									ЕИСФабрикаXDTO, 
									ПространствоИмен);
		// Типы данных веб-сервиса
		T_performanceContract = КорневыеОбъекты.Получить("performanceContract").Тип;
		T_header = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_performanceContract, "header");
		T_body = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_performanceContract, "body");
		T_performanceContractItem = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_body, "item");
		T_performanceContractData = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_performanceContractItem, "performanceContractData");
		T_customer = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_performanceContractData, "customer"); // также используется для placer
		T_contractInfo = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_performanceContractData, "contractInfo");
		T_positions = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_performanceContractData, "positions");
		// Объект XDTO Сведения о договоре
		ПакетДанныхИсполненияДоговора = ЕИСФабрикаXDTO.Создать(T_performanceContract);
		// Заголовок пакета.
 		ПакетДанныхИсполненияДоговора.header = ЕИСФабрикаXDTO.Создать(T_header);
 		ПакетДанныхИсполненияДоговора.header.guid = ПоляОписанияТранзакции.КлючСообщения;
 		ПакетДанныхИсполненияДоговора.header.createDateTime = ТекущаяДата();
		// Тело пакета
		ПакетДанныхИсполненияДоговора.body = ЕИСФабрикаXDTO.Создать(T_body);
		ПакетДанныхИсполненияДоговора.body.item = ЕИСФабрикаXDTO.Создать(T_performanceContractItem);
		ПакетДанныхИсполненияДоговора.body.item.guid = Строка(Новый УникальныйИдентификатор);
		// Данные договора
		ПакетДанныхИсполненияДоговора.body.item.performanceContractData = 
								ЕИСФабрикаXDTO.Создать(T_performanceContractData);
		ДанныеИсполненияДоговора = ПакетДанныхИсполненияДоговора.body.item.performanceContractData;
		ДанныеИсполненияДоговора.guid = УИДИсполнения;
		Если ИнтеграцияЦУЗсЭТПСерверУХ.КорректныйНомерРегистрацииЕИС(ИсполнениеДоговора) Тогда
			ИсполнениеДоговора.registrationNumber = ИсполнениеДоговора.РегистрационныйНомерЕИС;
		КонецЕсли;
		//ДанныеДоговора.urlOOS
		ДанныеИсполненияДоговора.termination = 
			ИсполнениеДоговора.ПрекращениеОбязательствСОкончаниемСрокаДействия;
		ДанныеИсполненияДоговора.urlVSRZ = "zakupki.gov.ru";
		ДанныеИсполненияДоговора.createDateTime = ИсполнениеДоговора.Дата;
		Если НЕ ЗначениеЗаполнено(Договор.Организация) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции, 
				Нстр("ru = 'Не заполнена организация которая заключила договор! '"));
			Возврат Неопределено;
		КонецЕсли;
		customer = ПолучитьОписаниеОрганизации(
						ЕИСФабрикаXDTO, 
						T_customer, 
						Договор.Организация, 
						ПоляОписанияТранзакции);
		Если ПоляОписанияТранзакции.ОшибкаОбменаСЭТП Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДанныеИсполненияДоговора.customer = customer;
		Если НЕ ЗначениеЗаполнено(Лот.Владелец.ОрганизаторЗакупки) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
					ПоляОписанияТранзакции, 
					Нстр("ru = 'Не заполнена организация организатор закупки! '"));
			Возврат Неопределено;
		КонецЕсли;
		placer = ПолучитьОписаниеОрганизации(
						ЕИСФабрикаXDTO, 
						T_customer, 
						Лот.Владелец.ОрганизаторЗакупки, 
						ПоляОписанияТранзакции);
		Если ПоляОписанияТранзакции.ОшибкаОбменаСЭТП Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДанныеИсполненияДоговора.placer = placer;
		//ДанныеДоговора.publicationDate
		//ДанныеДоговора.status = "F";
		Если ОписаниеВерсии.НомерВерсии > 0 Тогда
			ДанныеИсполненияДоговора.version = ОписаниеВерсии.НомерВерсии;
		КонецЕсли;
		ДанныеИсполненияДоговора.completed = ИсполнениеДоговора.ИсполнениеЗавершено;
		//ДанныеИсполненияДоговора.cancelReason = ;
		Если ОписаниеВерсии.НомерВерсии > 0 Тогда
			ДанныеИсполненияДоговора.modificationDescription = 
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
					ОписаниеВерсии.ОбоснованиеИзменений);
		КонецЕсли;
		Вложения = СоздатьВложениеФайлов(
								ЭТП, 
								ЕИСФабрикаXDTO, 
								ИсполнениеДоговора, 
								T_performanceContractData);
		Если Вложения <> Неопределено Тогда
			ДанныеИсполненияДоговора.attachments = Вложения;
		КонецЕсли;
		ДанныеИсполненияДоговора.hasPenalty = ИсполнениеДоговора.НачисленыНеустойки;
		Если ЗначениеЗаполнено(ИсполнениеДоговора.ИнформацияОНеустойках) Тогда
			ДанныеИсполненияДоговора.penaltyInfo =
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
					ИсполнениеДоговора.ИнформацияОНеустойках);
		КонецЕсли;
		Если НЕ ИнтеграцияЦУЗсЭТПСерверУХ.КорректныйНомерРегистрацииЕИС(Договор) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции, 
				Нстр("ru = 'Не заполнен регистрационный номер договора в ЕИС! '"));
			Возврат Неопределено;
		КонецЕсли;
		ДанныеИсполненияДоговора.contractRegNumber = Договор.РегистрационныйНомерЕИС;
		contractInfo = ЗаполнитьИнформациюОДоговореИсполнения(ЭТП,
											ЕИСФабрикаXDTO,
											Договор, 
											Лот,
											T_contractInfo, 
											ПоляОписанияТранзакции);
		Если contractInfo = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДанныеИсполненияДоговора.contractInfo = contractInfo;
		positions = ЗаполнитьПозицииСведенийОбИсполнении(
									ЭТП, 
									ЕИСФабрикаXDTO,
									ИсполнениеДоговора,
									Договор, 
									T_positions, 
									ПоляОписанияТранзакции);
		Если positions = Неопределено Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции, 
				Нстр("ru = 'Не удалось получить сведения о позициях исполнения договора! '"));
			Возврат Неопределено;
		КонецЕсли;
		ДанныеИсполненияДоговора.positions = positions;
		Если ПакетДанныхИсполненияДоговора = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ПакетДанныхИсполненияДоговора.Проверить();	
		ТекстОписания = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьТекстОписанияОбъекта(
							ЕИСФабрикаXDTO, 
							ПакетДанныхИсполненияДоговора, 
							"performanceContract");
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = СтрШаблон(Нстр("ru = 'Заполнение данных для отправки договора закончилось ошибкой!%1%2'"), 
		              	Символы.ПС, ПодробноеПредставлениеОшибки(Инфо));
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(ПоляОписанияТранзакции, ТекстОшибки, "ЕИС");
		Возврат Неопределено;
	КонецПопытки;
	Возврат ТекстОписания;
КонецФункции

&НаСервере
Функция ЗаполнитьИнформациюОДоговореИсполнения(ЭТП,
											ЕИСФабрикаXDTO,
											Договор,
											Лот,
											T_contractInfo, 
											ПоляОписанияТранзакции)
	contractInfo = ЕИСФабрикаXDTO.Создать(T_contractInfo);
	contractInfo.guid = Строка(Договор.УникальныйИдентификатор());
	Если ЗначениеЗаполнено(Договор.Номер) Тогда
		contractInfo.name =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				Договор.Номер);
	КонецЕсли;
	Если НЕ ПустаяСтрока(Договор.Организация.НаименованиеПолное) Тогда
		НаименованиеОрганизации = Договор.Организация.НаименованиеПолное;
	Иначе
		НаименованиеОрганизации = Договор.Организация.Наименование;
	КонецЕсли;
	contractInfo.agencyName = 
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			НаименованиеОрганизации);
	Контрагент = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьКонтрагентаДоговора(Договор);
	Если НЕ ПустаяСтрока(Контрагент.НаименованиеПолное) Тогда
		НаименованиеКонтрагента = Контрагент.НаименованиеПолное;
	Иначе
		 НаименованиеКонтрагента = Контрагент.Наименование;
	КонецЕсли;
	contractInfo.supplierName = 
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			НаименованиеКонтрагента);
	contractInfo.lotInfo =
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			Лот.ПредметДоговора);
	contractInfo.contractDate = Договор.ДатаПодписания;
	Возврат contractInfo;
КонецФункции
										
&НаСервере
Функция ЗаполнитьПозицииСведенийОбИсполнении(ЭТП,
											ЕИСФабрикаXDTO,
											ИсполнениеДоговора,
											Договор, 
											T_positions, 
											ПоляОписанияТранзакции)
	ТекстОшибки = "";
	ТЗИсполнения = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьОписаниеПозицийИсполненияДоговора(ИсполнениеДоговора, ТекстОшибки);
	Если (ТЗИсполнения = Неопределено) ИЛИ (ТЗИсполнения.Количество() = 0) Тогда
		ПредставлениеОшибки = "";
		Если ПустаяСтрока(ТекстОшибки) Тогда
			ПредставлениеОшибки = Нстр("ru = 'Не удалось получить перечень документов исполнения договора.'");
		Иначе
			ПредставлениеОшибки = Нстр("ru = 'Не удалось получить перечень документов исполнения договора. Возникла ошибка: %ТекстОшибки%'");
			ПредставлениеОшибки = СтрЗаменить(ПредставлениеОшибки, "%ТекстОшибки%", Строка(ТекстОшибки));
		КонецЕсли;
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ПоляОписанияТранзакции, ПредставлениеОшибки);
		Возврат Неопределено;
	КонецЕсли;
	T_position = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_positions, "position");
	ОписаниеПозицийИсполнения = ЕИСФабрикаXDTO.Создать(T_positions);
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Для Каждого СтрокаИсполнения Из ТЗИсполнения Цикл
		ОписаниеПозиции = ЕИСФабрикаXDTO.Создать(T_position);
		ОписаниеПозиции.ordinal = СтрокаИсполнения.Номер;
		ОписаниеПозиции.paymentDate = СтрокаИсполнения.Дата;
		ОписаниеПозиции.price = СтрокаИсполнения.Сумма;
		currency = ПолучитьОписаниеВалюты(
										ЕИСФабрикаXDTO, 
										ПоляОписанияТранзакции,
										ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
											T_position, "currency"), 
										СтрокаИсполнения.ВалютаДокумента);
		Если currency = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ОписаниеПозиции.currency = currency;
		Если СтрокаИсполнения.ВалютаДокумента <> ВалютаРеглУчета Тогда
			ОписаниеПозиции.currencyRate = Окр(СтрокаИсполнения.Курс, 6);
			ОписаниеПозиции.rubPrice = СтрокаИсполнения.СуммаВРублях;
		КонецЕсли;
		ОписаниеПозиции.prepaid = СтрокаИсполнения.ЭтоАванс;
		Если НЕ СтрокаИсполнения.ЭтоАванс Тогда
			docs = ЗаполнитьДокументыПозицииСведенийОбИсполнении(
									ЭТП, 
									ЕИСФабрикаXDTO, 
									СтрокаИсполнения, 
									T_position,
									ПоляОписанияТранзакции);
			Если docs <> Неопределено Тогда
				ОписаниеПозиции.docs = docs;
			КонецЕсли;
		КонецЕсли;
		ОписаниеПозицийИсполнения.position.Добавить(ОписаниеПозиции);
	КонецЦикла;
	ОписаниеПозицийИсполнения.total = ТЗИсполнения.Итог("Сумма");
	Возврат ОписаниеПозицийИсполнения;
КонецФункции

&НаСервере
Функция ЗаполнитьДокументыПозицииСведенийОбИсполнении(ЭТП,
														ЕИСФабрикаXDTO,
														СтрокаИсполнения, 
														T_position, 
														ПоляОписанияТранзакции)
	T_docs = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
		T_position, "docs");
	T_doc = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
		T_docs, "doc");
	T_contractPosition = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_doc, "contractPosition");
	T_okpd2 = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_contractPosition, "okpd2");
	T_okei = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_doc, "okei");	
	ОписаниеДокументов = ЕИСФабрикаXDTO.Создать(T_docs);
	Для Каждого СтрокаДокумента Из СтрокаИсполнения.ДокументыИсполнения Цикл
		ОписаниеПозиции = ЕИСФабрикаXDTO.Создать(T_doc);
		ОписаниеПозиции.ordinal = СтрокаДокумента.Номер;
		ОписаниеПозиции.date = СтрокаДокумента.Дата;
		ОписаниеПозиции.code = СтрокаДокумента.КодВидаДокумента;
		ОписаниеПозиции.name = СтрокаДокумента.НаименованиеВидаДокумента;
		ОписаниеПозиции.number = СтрокаДокумента.НомерДокумента;
		ОписаниеПозиции.contractPosition = ЕИСФабрикаXDTO.Создать(
			T_contractPosition);
		ОписаниеПозиции.contractPosition.guid = 
			ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьУИД_Идентификатора(
				ЭТП, 
				СтрокаДокумента.ИдентификаторСтрокиЛота);
		ОписаниеПозиции.contractPosition.name = СтрокаДокумента.НоменклатураНаименование;
		ОписаниеПозиции.contractPosition.okpd2 =
			ЕИСФабрикаXDTO.Создать(T_okpd2);
		ОписаниеПозиции.contractPosition.okpd2.code = СтрокаДокумента.КодОКПД2;
		Если ПустаяСтрока(СтрокаДокумента.КодОКЕИ) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции,
				СтрШаблон(Нстр("ru = 'Не заполнена единица измерения у позиции №%1 строки документа №%2! '"), 
					СтрокаИсполнения.Номер, СтрокаДокумента.Номер));
			Возврат Неопределено;
		КонецЕсли;
		ОписаниеПозиции.okei = ЕИСФабрикаXDTO.Создать(T_okei);
		ОписаниеПозиции.okei.code =	СтрокаДокумента.КодОКЕИ;
		ОписаниеПозиции.okei.name =	СтрокаДокумента.НаименованиеОКЕИ;
		ОписаниеПозиции.qty = СтрокаДокумента.Количество;
		ОписаниеДокументов.doc.Добавить(ОписаниеПозиции);
	КонецЦикла;
	Возврат ОписаниеДокументов;
КонецФункции


#КонецОбласти


#Область ПолучениеОписанияОтменыЗакупочнойПроцедуры


&НаСервере
Функция ПолучитьТекстЗапросаНаОтменуЗакупки(ОписаниеОбмена, ЕИСФабрикаXDTO)
	ЭТП = ОписаниеОбмена.ЭТП;
	ПоляОписанияТранзакции = ОписаниеОбмена.ПоляОписанияТранзакции;
	ЗакупочнаяПроцедура = ОписаниеОбмена.ОбъектВыгрузки;
	ТекстОписания = Неопределено;
	Попытка
		ПротоколОтмены =
			ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьПротоколОтменыЗакупки(
				ЗакупочнаяПроцедура);
		Если НЕ ЗначениеЗаполнено(ПротоколОтмены) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции, Нстр("ru = 'Необходимо ввести протокол отмены закупки! '"));
			Возврат Неопределено;
		КонецЕсли;
		ОписаниеВерсии = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьВерсиюОбъектаДляЕИС(ПротоколОтмены);
		ПространствоИмен = "http://zakupki.gov.ru/223fz/purchase/1";
		КорневыеОбъекты =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьКорневыеОбъектыПространстваИмен(
				ЕИСФабрикаXDTO, ПространствоИмен);
		// Типы данных веб-сервиса
		T_purchaseRejection = КорневыеОбъекты.Получить("purchaseRejection").Тип;
		T_header = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseRejection, "header");
		T_body = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseRejection, "body");
		T_purchaseRejectionItem = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_body, "item");
		T_purchaseRejectionData = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseRejectionItem, "purchaseRejectionData");
		T_customer = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseRejectionData, "placer");
		// Объект XDTO Извещение об отмене закупки
		ОтменаЗакупки = ЕИСФабрикаXDTO.Создать(T_purchaseRejection);
		// Заголовок пакета.
 		ОтменаЗакупки.header = ЕИСФабрикаXDTO.Создать(T_header);
 		ОтменаЗакупки.header.guid = ПоляОписанияТранзакции.КлючСообщения;
 		ОтменаЗакупки.header.createDateTime = ТекущаяДата();
		// Тело пакета
		ОтменаЗакупки.body = ЕИСФабрикаXDTO.Создать(T_body);
		ОтменаЗакупки.body.item = ЕИСФабрикаXDTO.Создать(T_purchaseRejectionItem);
		ОтменаЗакупки.body.item.guid = Строка(Новый УникальныйИдентификатор);
		// Данные отмены закупки
		ОтменаЗакупки.body.item.purchaseRejectionData =
			ЕИСФабрикаXDTO.Создать(T_purchaseRejectionData);
		ДанныеОтмены = ОтменаЗакупки.body.item.purchaseRejectionData;
		ДанныеОтмены.guid = ОписаниеВерсии.ГУИДВерсии;
		ДанныеОтмены.createDateTime = ПротоколОтмены.Дата;
		//ДанныеОтмены.urlOOS
		ДанныеОтмены.urlVSRZ = "http://zakupki.gov.ru";
		Если НЕ ИнтеграцияЦУЗсЭТПСерверУХ.КорректныйНомерРегистрацииЕИС(ЗакупочнаяПроцедура) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции,
				Нстр("ru = 'Закупка не зарегистрирована в ЕИС! '"));
			Возврат Неопределено;
		КонецЕсли;
		ДанныеОтмены.cancelNoticeRegistrationNumber = ЗакупочнаяПроцедура.РегистрационныйНомер; 
		Если НЕ ПустаяСтрока(ЗакупочнаяПроцедура.ПредметДоговора) Тогда
			ДанныеОтмены.name = 
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
					ЗакупочнаяПроцедура.ПредметДоговора);
		КонецЕсли;
		НаименованиеСпособаВыбора = "";
		КодСпособаВыбора =
			ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьКодЗакупкиВЕИС(
				ЗакупочнаяПроцедура.СпособВыбораПоставщика,
				ЗакупочнаяПроцедура.ЗакрытаяЗакупка,
				ЗакупочнаяПроцедура.ВЭлектроннойФорме,
				НаименованиеСпособаВыбора);
		Если ЗначениеЗаполнено(КодСпособаВыбора) Тогда
			ДанныеОтмены.purchaseMethodCode = КодСпособаВыбора;
			ДанныеОтмены.purchaseCodeName = НаименованиеСпособаВыбора;
		КонецЕсли;
		//ДанныеОтмены.publicationDateTime = ЗакупочнаяПроцедура.ДатаОтказаОтПроведения;
		ДанныеОтмены.rejectionDate = ПротоколОтмены.ДатаОтказаОтПроведения;
		ДанныеОтмены.causeForRejection =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ПротоколОтмены.ПричинаОтказаОтПроведения);
		Если НЕ ЗначениеЗаполнено(ЗакупочнаяПроцедура.ОрганизаторЗакупки) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции,
				Нстр("ru = 'Не заполнена организация организатор закупки! '"));
			Возврат Неопределено;
		КонецЕсли;
		ДанныеОтмены.placer = ПолучитьОписаниеОрганизации(
									ЕИСФабрикаXDTO, 
									T_customer, 
									ЗакупочнаяПроцедура.ОрганизаторЗакупки, 
									ПоляОписанияТранзакции);
		Если ПоляОписанияТранзакции.ОшибкаОбменаСЭТП Тогда
			Возврат Неопределено;
		КонецЕсли;
		Вложения = СоздатьВложениеФайлов(
									ЭТП, 
									ЕИСФабрикаXDTO, 
									ПротоколОтмены, 
									T_purchaseRejectionData);
		Если Вложения <> Неопределено Тогда
			ДанныеОтмены.attachments = Вложения;
		КонецЕсли;
		//ДанныеОтмены.emergency = Ложь; // Не экстренная закупка
		Если ОтменаЗакупки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ОтменаЗакупки.Проверить();	
		ТекстОписания =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьТекстОписанияОбъекта(
								ЕИСФабрикаXDTO, 
								ОтменаЗакупки, 
								"purchaseRejection");
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки =
			СтрШаблон(Нстр("ru = 'Заполнение данных для отмены закупки закончилось ошибкой!%1%2'"), Символы.ПС, 
				ПодробноеПредставлениеОшибки(Инфо));
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(
			ПоляОписанияТранзакции, ТекстОшибки, "ЕИС");
		Возврат Неопределено;
	КонецПопытки;
	Возврат ТекстОписания;
КонецФункции


#КонецОбласти


#Область ПолучениеОписанияЗакупочнойПроцедуры


&НаСервере
Функция ПолучитьТекстОписанияЗакупки(ОписаниеОбмена, ЕИСФабрикаXDTO)
	ЭТП = ОписаниеОбмена.ЭТП;
	ПоляОписанияТранзакции = ОписаниеОбмена.ПоляОписанияТранзакции;
	ЗакупочнаяПроцедура = ОписаниеОбмена.ОбъектВыгрузки;
	СпособВыбораПоставщика = ЗакупочнаяПроцедура.СпособВыбораПоставщика;
	Если //СпособВыбораПоставщика = Перечисления.СпособыВыбораПоставщика.КонкурентныеПереговоры
		//ИЛИ 
		СпособВыбораПоставщика = Перечисления.СпособыВыбораПоставщика.Редукцион Тогда
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
			ПоляОписанияТранзакции,
			СтрШаблон(Нстр("ru = 'Не реализована отправка закупки со способом выбора поставщика %1. Отправка невозможна!'"), 
				СпособВыбораПоставщика));
		Возврат Неопределено;
	КонецЕсли;
	ДопПоля = Новый Структура;
	ДопПоля.Вставить("МестоПоставки", 
		ИнтеграцияЦУЗсЭТПСерверУХ.ЕдиноеМестоПоставкиВЗакупочнойПроцедуре(
			ЗакупочнаяПроцедура));
	Если СпособВыбораПоставщика =
					Перечисления.СпособыВыбораПоставщика.Конкурс Тогда
					Возврат ПолучитьpurchaseNoticeEPA(
			ЭТП, ЕИСФабрикаXDTO, ЗакупочнаяПроцедура, ДопПоля, ПоляОписанияТранзакции);

	ИначеЕсли СпособВыбораПоставщика =
					Перечисления.СпособыВыбораПоставщика.ЗапросКотировок Тогда
			Возврат ПолучитьpurchaseNoticeEPA(
			ЭТП, ЕИСФабрикаXDTO, ЗакупочнаяПроцедура, ДопПоля, ПоляОписанияТранзакции);
			
	ИначеЕсли СпособВыбораПоставщика = Перечисления.СпособыВыбораПоставщика.ЗапросКотировокУМсп Тогда
		
			Возврат ПолучитьpurchaseNoticeZKESMBO(
			ЭТП, ЕИСФабрикаXDTO, ЗакупочнаяПроцедура, ДопПоля, ПоляОписанияТранзакции);
	ИначеЕсли СпособВыбораПоставщика = Перечисления.СпособыВыбораПоставщика.АукционУМсп Тогда
		
			Возврат ПолучитьpurchaseNoticeAESMB(
			ЭТП, ЕИСФабрикаXDTO, ЗакупочнаяПроцедура, ДопПоля, ПоляОписанияТранзакции);
		
	ИначеЕсли СпособВыбораПоставщика = Перечисления.СпособыВыбораПоставщика.ЗапросПредложенийУМсп Тогда
			
			Возврат ПолучитьpurchaseNoticeAEMSP(
			ЭТП, ЕИСФабрикаXDTO, ЗакупочнаяПроцедура, ДопПоля, ПоляОписанияТранзакции);
			
		Иначе	
			Возврат ПолучитьpurchaseNoticeEPA(
			ЭТП, ЕИСФабрикаXDTO, ЗакупочнаяПроцедура, ДопПоля, ПоляОписанияТранзакции);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция ПолучитьpurchaseNoticeAESMB(ЭТП, ЕИСФабрикаXDTO, ЗакупочнаяПроцедура, ДопПоля, ПоляОписанияТранзакции)
	ТекстОписания = Неопределено;
	Попытка
		ПространствоИмен = "http://zakupki.gov.ru/223fz/purchase/1";
		КорневыеОбъекты =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьКорневыеОбъектыПространстваИмен(
				ЕИСФабрикаXDTO,
				ПространствоИмен);
		// Типы данных веб-сервиса             
		T_purchase = КорневыеОбъекты.Получить("purchaseNoticeAESMBO").Тип;
		T_header =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchase, "header");
		T_body =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchase, "body");
		T_purchaseNoticeItem =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_body, "item");
		T_purchaseNoticeData =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseNoticeItem, "purchaseNoticeAESMBOData");
		T_placingProcedure =        
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseNoticeData, "placingProcedure");
		T_lots =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseNoticeData, "lots");
		// Объект XDTO План закупки
		ОписаниеЗакупки = ЕИСФабрикаXDTO.Создать(T_purchase);
		// Заголовок пакета.
 		ОписаниеЗакупки.header = ЕИСФабрикаXDTO.Создать(T_header);
 		ОписаниеЗакупки.header.guid = ПоляОписанияТранзакции.КлючСообщения;
 		ОписаниеЗакупки.header.createDateTime = ТекущаяДата();
		// Тело пакета
		ОписаниеЗакупки.body = ЕИСФабрикаXDTO.Создать(T_body);
		ОписаниеЗакупки.body.item = ЕИСФабрикаXDTO.Создать(T_purchaseNoticeItem);
		ОписаниеЗакупки.body.item.guid = Строка(Новый УникальныйИдентификатор);
		// Закупка
		ДанныеЗакупки = ПолучитьpurchaseNoticeОбщаяЧасть(
							ЭТП,
							ЕИСФабрикаXDTO,
							ЗакупочнаяПроцедура,
							ДопПоля,
							ПоляОписанияТранзакции,
							T_purchaseNoticeData);
		Если ДанныеЗакупки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ОписаниеЗакупки.body.item.purchaseNoticeAESMBOData = ДанныеЗакупки;
		// Прочие реквизиты       
		//ДанныеЗакупки.electronicPlaceInfo
		T_purchaseNoticeAEData = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseNoticeItem, "purchaseNoticeAESMBOData");

		placingProcedure = ПолучитьplacingProcedure(
			ЕИСФабрикаXDTO,
			T_placingProcedure,
			ЗакупочнаяПроцедура,
			ПоляОписанияТранзакции);
		Если placingProcedure = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДанныеЗакупки.placingProcedure = placingProcedure;
		ДанныеЗакупки.submissionCloseDateTime =
			ЗакупочнаяПроцедура.ДатаОкончанияПриемаЗаявок;
		ДанныеЗакупки.publicationPlannedDate =
			ЗакупочнаяПроцедура.ДатаОфициальногоОбъявленияЗакупки;
		// Подготовим описание лота
		ОписаниеЛотов = ПолучитьЛотыЗакупочнойПроцедуры(
			ЭТП,
			ЕИСФабрикаXDTO,
			T_lots,
			ЗакупочнаяПроцедура,
			ИнтеграцияЦУЗсЭТПСерверУХ.ЕдиноеМестоПоставкиВЗакупочнойПроцедуре(
					ЗакупочнаяПроцедура),
			ПоляОписанияТранзакции);
		Если ОписаниеЛотов = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	
		ДанныеЗакупки.lots = ОписаниеЛотов;
		Если ЗначениеЗаполнено(ЗакупочнаяПроцедура.ЭТППубликации) Тогда
		ДанныеЗакупки.electronicPlaceInfo = 
			ЕИСФабрикаXDTO.Создать(
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
					T_purchaseNoticeAEData, "electronicPlaceInfo"));
		ДанныеЗакупки.electronicPlaceInfo.name =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ЗакупочнаяПроцедура.ЭТППубликации.Наименование);
		ДанныеЗакупки.electronicPlaceInfo.url = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ЗакупочнаяПроцедура.ЭТППубликации.Адрес);
		ДанныеЗакупки.electronicPlaceInfo.electronicPlaceId =
			ЗакупочнаяПроцедура.ЭТППубликации.ИдентификаторЭТП;
		КонецЕсли;
		ОписаниеЗакупки.Проверить();	
		ТекстОписания =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьТекстОписанияОбъекта(
				ЕИСФабрикаXDTO, ОписаниеЗакупки, "purchaseNoticeAESMBO");
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки =
			СтрШаблон(Нстр("ru = 'Заполнение данных для отправки закупки закончилось ошибкой!%1%2'"), 
				Символы.ПС, ПодробноеПредставлениеОшибки(Инфо));
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(
			ПоляОписанияТранзакции, ТекстОшибки, "ЕИС");
		Возврат Неопределено;
	КонецПопытки;
	Возврат ТекстОписания;
КонецФункции

&НаСервере
Функция ПолучитьpurchaseNoticeZKESMBO(ЭТП, ЕИСФабрикаXDTO, ЗакупочнаяПроцедура, ДопПоля, ПоляОписанияТранзакции)
	ТекстОписания = Неопределено;
	Попытка
		ПространствоИмен = "http://zakupki.gov.ru/223fz/purchase/1";
		КорневыеОбъекты =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьКорневыеОбъектыПространстваИмен(
				ЕИСФабрикаXDTO,
				ПространствоИмен);
		// Типы данных веб-сервиса             
		T_purchase = КорневыеОбъекты.Получить("purchaseNoticeZKESMBO").Тип;
		T_header =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchase, "header");
		T_body =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchase, "body");
		T_purchaseNoticeItem =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_body, "item");
		T_purchaseNoticeData =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseNoticeItem, "purchaseNoticeZKESMBOData");
		T_placingProcedure =        
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseNoticeData, "placingProcedure");
		T_lots =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseNoticeData, "lots");
		// Объект XDTO План закупки
		ОписаниеЗакупки = ЕИСФабрикаXDTO.Создать(T_purchase);
		// Заголовок пакета.
 		ОписаниеЗакупки.header = ЕИСФабрикаXDTO.Создать(T_header);
 		ОписаниеЗакупки.header.guid = ПоляОписанияТранзакции.КлючСообщения;
 		ОписаниеЗакупки.header.createDateTime = ТекущаяДата();
		// Тело пакета
		ОписаниеЗакупки.body = ЕИСФабрикаXDTO.Создать(T_body);
		ОписаниеЗакупки.body.item = ЕИСФабрикаXDTO.Создать(T_purchaseNoticeItem);
		ОписаниеЗакупки.body.item.guid = Строка(Новый УникальныйИдентификатор);
		// Закупка
		ДанныеЗакупки = ПолучитьpurchaseNoticeОбщаяЧасть(
							ЭТП,
							ЕИСФабрикаXDTO,
							ЗакупочнаяПроцедура,
							ДопПоля,
							ПоляОписанияТранзакции,
							T_purchaseNoticeData);
		Если ДанныеЗакупки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ОписаниеЗакупки.body.item.purchaseNoticeZKESMBOData = ДанныеЗакупки;
		// Прочие реквизиты       
		//ДанныеЗакупки.electronicPlaceInfo
		T_purchaseNoticeAEData = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseNoticeItem, "purchaseNoticeZKESMBOData");

		placingProcedure = ПолучитьplacingProcedure(
			ЕИСФабрикаXDTO,
			T_placingProcedure,
			ЗакупочнаяПроцедура,
			ПоляОписанияТранзакции);
		Если placingProcedure = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДанныеЗакупки.placingProcedure = placingProcedure;
		ДанныеЗакупки.submissionCloseDateTime =
			ЗакупочнаяПроцедура.ДатаОкончанияПриемаЗаявок;
		ДанныеЗакупки.publicationPlannedDate =
			ЗакупочнаяПроцедура.ДатаОфициальногоОбъявленияЗакупки;
		// Подготовим описание лота
		ОписаниеЛотов = ПолучитьЛотыЗакупочнойПроцедуры(
			ЭТП,
			ЕИСФабрикаXDTO,
			T_lots,
			ЗакупочнаяПроцедура,
			ИнтеграцияЦУЗсЭТПСерверУХ.ЕдиноеМестоПоставкиВЗакупочнойПроцедуре(
					ЗакупочнаяПроцедура),
			ПоляОписанияТранзакции);
		Если ОписаниеЛотов = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	
		ДанныеЗакупки.lots = ОписаниеЛотов;
		
		ДанныеЗакупки.electronicPlaceInfo = 
			ЕИСФабрикаXDTO.Создать(
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
					T_purchaseNoticeAEData, "electronicPlaceInfo"));
		ДанныеЗакупки.electronicPlaceInfo.name =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ЗакупочнаяПроцедура.ЭТППубликации.Наименование);
		ДанныеЗакупки.electronicPlaceInfo.url = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ЗакупочнаяПроцедура.ЭТППубликации.Адрес);
		ДанныеЗакупки.electronicPlaceInfo.electronicPlaceId =
			ЗакупочнаяПроцедура.ЭТППубликации.ИдентификаторЭТП;
		
		ОписаниеЗакупки.Проверить();	
		ТекстОписания =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьТекстОписанияОбъекта(
				ЕИСФабрикаXDTO, ОписаниеЗакупки, "purchaseNoticeZKESMBO");
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки =
			СтрШаблон(Нстр("ru = 'Заполнение данных для отправки закупки закончилось ошибкой!%1%2'"), 
				Символы.ПС, ПодробноеПредставлениеОшибки(Инфо));
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(
			ПоляОписанияТранзакции, ТекстОшибки, "ЕИС");
		Возврат Неопределено;
	КонецПопытки;
	Возврат ТекстОписания;
КонецФункции


&НаСервере
Функция ПолучитьpurchaseNotice(ЭТП, ЕИСФабрикаXDTO, ЗакупочнаяПроцедура, ДопПоля, ПоляОписанияТранзакции)
	ТекстОписания = Неопределено;
	Попытка
		ПространствоИмен = "http://zakupki.gov.ru/223fz/purchase/1";
		КорневыеОбъекты =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьКорневыеОбъектыПространстваИмен(
				ЕИСФабрикаXDTO,
				ПространствоИмен);
		// Типы данных веб-сервиса
		T_purchase = КорневыеОбъекты.Получить("purchaseNotice").Тип;
		T_header =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchase, "header");
		T_body =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchase, "body");
		T_purchaseNoticeItem =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_body, "item");
		T_purchaseNoticeData =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseNoticeItem, "purchaseNoticeData");
		T_placingProcedure =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseNoticeData, "placingProcedure");
		T_lots =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseNoticeData, "lots");
		// Объект XDTO План закупки
		ОписаниеЗакупки = ЕИСФабрикаXDTO.Создать(T_purchase);
		// Заголовок пакета.
 		ОписаниеЗакупки.header = ЕИСФабрикаXDTO.Создать(T_header);
 		ОписаниеЗакупки.header.guid = ПоляОписанияТранзакции.КлючСообщения;
 		ОписаниеЗакупки.header.createDateTime = ТекущаяДата();
		// Тело пакета
		ОписаниеЗакупки.body = ЕИСФабрикаXDTO.Создать(T_body);
		ОписаниеЗакупки.body.item = ЕИСФабрикаXDTO.Создать(T_purchaseNoticeItem);
		ОписаниеЗакупки.body.item.guid = Строка(Новый УникальныйИдентификатор);
		// Закупка
		ДанныеЗакупки = ПолучитьpurchaseNoticeОбщаяЧасть(
							ЭТП,
							ЕИСФабрикаXDTO,
							ЗакупочнаяПроцедура,
							ДопПоля,
							ПоляОписанияТранзакции,
							T_purchaseNoticeData);
		Если ДанныеЗакупки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ОписаниеЗакупки.body.item.purchaseNoticeData = ДанныеЗакупки;
		// Прочие реквизиты
		//ДанныеЗакупки.electronicPlaceInfo
		T_purchaseNoticeAEData = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseNoticeItem, "purchaseNoticeAEData");

		//ДанныеЗакупки = ПолучитьpurchaseNoticeОбщаяЧасть(
		//					ЭТП,
		//					ЕИСФабрикаXDTO, 
		//					ЗакупочнаяПроцедура,
		//					ДопПоля,
		//					ПоляОписанияТранзакции, 
		//					T_purchaseNoticeAEData);
		
		placingProcedure = ПолучитьplacingProcedure(
			ЕИСФабрикаXDTO,
			T_placingProcedure,
			ЗакупочнаяПроцедура,
			ПоляОписанияТранзакции);
		Если placingProcedure = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДанныеЗакупки.placingProcedure = placingProcedure;
		ДанныеЗакупки.submissionCloseDateTime =
			ЗакупочнаяПроцедура.ДатаОкончанияПриемаЗаявок;
		ДанныеЗакупки.publicationPlannedDate =
			ЗакупочнаяПроцедура.ДатаОфициальногоОбъявленияЗакупки;
		// Подготовим описание лота
		ОписаниеЛотов = ПолучитьЛотыЗакупочнойПроцедуры(
			ЭТП,
			ЕИСФабрикаXDTO,
			T_lots,
			ЗакупочнаяПроцедура,
			ИнтеграцияЦУЗсЭТПСерверУХ.ЕдиноеМестоПоставкиВЗакупочнойПроцедуре(
					ЗакупочнаяПроцедура),
			ПоляОписанияТранзакции);
		Если ОписаниеЛотов = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	
		ДанныеЗакупки.lots = ОписаниеЛотов;
		ОписаниеЗакупки.Проверить();	
		ТекстОписания =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьТекстОписанияОбъекта(
				ЕИСФабрикаXDTO, ОписаниеЗакупки, "purchaseNotice");
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки =
			СтрШаблон(Нстр("ru = 'Заполнение данных для отправки закупки закончилось ошибкой!%1%2'"), 
				Символы.ПС, ПодробноеПредставлениеОшибки(Инфо));
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(
			ПоляОписанияТранзакции, ТекстОшибки, "ЕИС");
		Возврат Неопределено;
	КонецПопытки;
	Возврат ТекстОписания;
КонецФункции

&НаСервере
Функция ПолучитьpurchaseNoticeEP(ЭТП, ЕИСФабрикаXDTO, ЗакупочнаяПроцедура, ДопПоля, ПоляОписанияТранзакции)
	ТекстОписания = Неопределено;
	Попытка
		ПространствоИмен = "http://zakupki.gov.ru/223fz/purchase/1";
		КорневыеОбъекты =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьКорневыеОбъектыПространстваИмен(
				ЕИСФабрикаXDTO, ПространствоИмен);
		// Типы данных веб-сервиса
		T_purchase = КорневыеОбъекты.Получить("purchaseNoticeEP").Тип;
		T_header =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchase, "header");
		T_body =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchase, "body");
		T_purchaseNoticeItem =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_body, "item");
		T_purchaseNoticeEPData =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseNoticeItem, "purchaseNoticeEPData");
		T_lots =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseNoticeEPData, "lots");
		// Объект XDTO План закупки
		ОписаниеЗакупки = ЕИСФабрикаXDTO.Создать(T_purchase);
		// Заголовок пакета.
 		ОписаниеЗакупки.header = ЕИСФабрикаXDTO.Создать(T_header);
 		ОписаниеЗакупки.header.guid = ПоляОписанияТранзакции.КлючСообщения;
 		ОписаниеЗакупки.header.createDateTime = ТекущаяДата();
		// Тело пакета
		ОписаниеЗакупки.body = ЕИСФабрикаXDTO.Создать(T_body);
		ОписаниеЗакупки.body.item = ЕИСФабрикаXDTO.Создать(T_purchaseNoticeItem);
		ОписаниеЗакупки.body.item.guid = Строка(Новый УникальныйИдентификатор);
		// Закупка
		ДанныеЗакупки = ПолучитьpurchaseNoticeОбщаяЧасть(
							ЭТП,
							ЕИСФабрикаXDTO,
							ЗакупочнаяПроцедура,
							ДопПоля,
							ПоляОписанияТранзакции, 
							T_purchaseNoticeEPData);
		Если ДанныеЗакупки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ОписаниеЗакупки.body.item.purchaseNoticeEPData = ДанныеЗакупки;
		// Подготовим описание лота
		ОписаниеЛотов = ПолучитьЛотыЗакупочнойПроцедуры(
				ЭТП,
				ЕИСФабрикаXDTO, 
				T_lots, 
				ЗакупочнаяПроцедура,
				ИнтеграцияЦУЗсЭТПСерверУХ.ЕдиноеМестоПоставкиВЗакупочнойПроцедуре(
					ЗакупочнаяПроцедура),
				ПоляОписанияТранзакции);
		Если ОписаниеЛотов = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДанныеЗакупки.lots = ОписаниеЛотов;
		ОписаниеЗакупки.Проверить();	
		ТекстОписания =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьТекстОписанияОбъекта(
				ЕИСФабрикаXDTO, ОписаниеЗакупки, "purchaseNoticeEP");
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки =
			СтрШаблон(Нстр("ru = 'Заполнение данных для отправки закупки закончилось ошибкой!%1%2'"), 
				Символы.ПС, ПодробноеПредставлениеОшибки(Инфо));
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(
			ПоляОписанияТранзакции, ТекстОшибки, "ЕИС");
		Возврат Неопределено;
	КонецПопытки;
	Возврат ТекстОписания;
КонецФункции

&НаСервере
Функция ПолучитьpurchaseNoticeOK(ЭТП, ЕИСФабрикаXDTO, ЗакупочнаяПроцедура, ДопПоля, ПоляОписанияТранзакции)
	ТекстОписания = Неопределено;
	Попытка
		ПространствоИмен = "http://zakupki.gov.ru/223fz/purchase/1";
		КорневыеОбъекты =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьКорневыеОбъектыПространстваИмен(
				ЕИСФабрикаXDTO, ПространствоИмен);
		// Типы данных веб-сервиса
		T_purchase = КорневыеОбъекты.Получить("purchaseNoticeOK").Тип;
		T_header = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_purchase, "header");
		T_body = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_purchase, "body");
		T_purchaseNoticeItem =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_body, "item");
		T_purchaseNoticeOKData =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseNoticeItem, "purchaseNoticeOKData");
		T_lots = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_purchaseNoticeOKData, "lots");
		// Объект XDTO План закупки
		ОписаниеЗакупки = ЕИСФабрикаXDTO.Создать(T_purchase);
		// Заголовок пакета.
 		ОписаниеЗакупки.header = ЕИСФабрикаXDTO.Создать(T_header);
 		ОписаниеЗакупки.header.guid = ПоляОписанияТранзакции.КлючСообщения;
 		ОписаниеЗакупки.header.createDateTime = ТекущаяДата();
		// Тело пакета
		ОписаниеЗакупки.body = ЕИСФабрикаXDTO.Создать(T_body);
		ОписаниеЗакупки.body.item = ЕИСФабрикаXDTO.Создать(T_purchaseNoticeItem);
		ОписаниеЗакупки.body.item.guid = Строка(Новый УникальныйИдентификатор);
		// Закупка
		ДанныеЗакупки = ПолучитьpurchaseNoticeОбщаяЧасть(
			ЭТП,
			ЕИСФабрикаXDTO,
			ЗакупочнаяПроцедура,
			ДопПоля,
			ПоляОписанияТранзакции,
			T_purchaseNoticeOKData);
		Если ДанныеЗакупки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ОписаниеЗакупки.body.item.purchaseNoticeOKData = ДанныеЗакупки;
		// Подготовим описание лота
		ОписаниеЛотов = ПолучитьЛотыЗакупочнойПроцедуры(
			ЭТП,
			ЕИСФабрикаXDTO,
			T_lots,
			ЗакупочнаяПроцедура,
			ИнтеграцияЦУЗсЭТПСерверУХ.ЕдиноеМестоПоставкиВЗакупочнойПроцедуре(
					ЗакупочнаяПроцедура),
			ПоляОписанияТранзакции);
		Если ОписаниеЛотов = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДанныеЗакупки.lots = ОписаниеЛотов;
		// Прочие реквизиты
		Если ПустаяСтрока(ЗакупочнаяПроцедура.АдресРассмотренияЗаявок) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции,
				Нстр("ru = 'Не заполнен адрес рассмотрения заявок! '"));
			Возврат Неопределено;
		КонецЕсли;
		ДанныеЗакупки.examinationPlace =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ЗакупочнаяПроцедура.АдресРассмотренияЗаявок);
		ДанныеЗакупки.examinationDateTime =
			ЗакупочнаяПроцедура.ДатаНачалаРассмотренияЗаявок;
		ДанныеЗакупки.envelopeOpeningPlace =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ЗакупочнаяПроцедура.АдресРассмотренияЗаявок);
		ДанныеЗакупки.envelopeOpeningTime =
			ЗакупочнаяПроцедура.ДатаНачалаРассмотренияЗаявок;
		Если ПустаяСтрока(ЗакупочнаяПроцедура.АдресПодведенияИтогов) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции,
				Нстр("ru = 'Не заполнен адрес подведения итогов! '"));
			Возврат Неопределено;
		КонецЕсли;
		ДанныеЗакупки.applSubmisionOrder = ЗакупочнаяПроцедура.ПорядокПредоставленияДокументации;
		
		ДанныеЗакупки.summingupPlace =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ЗакупочнаяПроцедура.АдресПодведенияИтогов);
		ДанныеЗакупки.summingupTime = ЗакупочнаяПроцедура.ДатаПодведенияИтогов;
		ДанныеЗакупки.submissionCloseDateTime =
			ЗакупочнаяПроцедура.ДатаОкончанияПриемаЗаявок;
		ДанныеЗакупки.publicationPlannedDate =
			ЗакупочнаяПроцедура.ДатаОфициальногоОбъявленияЗакупки;
		
		Если ОписаниеЗакупки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		НаименованиеСпособаВыбора = "";
		КодСпособаВыбора =
			ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьКодЗакупкиВЕИС(
				ЗакупочнаяПроцедура.СпособВыбораПоставщика,
				ЗакупочнаяПроцедура.ЗакрытаяЗакупка,
				ЗакупочнаяПроцедура.ВЭлектроннойФорме,
				НаименованиеСпособаВыбора);
		
		Если ЗначениеЗаполнено(КодСпособаВыбора) Тогда
			ДанныеЗакупки.purchaseMethodCode = КодСпособаВыбора;
		//	ДанныеЗакупки.purchaseCodeName = НаименованиеСпособаВыбора;
			ДанныеЗакупки.purchaseCodeName = ПолучитьРеквизитыЭлектроннойЗакупки(ЗакупочнаяПроцедура).КодСпособаЗакупки;
		КонецЕсли;
		ОписаниеЗакупки.Проверить();	
		ТекстОписания =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьТекстОписанияОбъекта(
				ЕИСФабрикаXDTO, ОписаниеЗакупки, "purchaseNoticeOK");
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки =
			СтрШаблон(Нстр("ru = 'Заполнение данных для отправки закупки закончилось ошибкой!%1%2'"), 
				Символы.ПС, ПодробноеПредставлениеОшибки(Инфо));
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(
			ПоляОписанияТранзакции, ТекстОшибки, "ЕИС");
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ТекстОписания;
КонецФункции

&НаСервере
Функция ПолучитьpurchaseNoticeZK(ЭТП, ЕИСФабрикаXDTO, ЗакупочнаяПроцедура, ДопПоля, ПоляОписанияТранзакции)
	ТекстОписания = Неопределено;
	Попытка
		ПространствоИмен = "http://zakupki.gov.ru/223fz/purchase/1";
		КорневыеОбъекты =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьКорневыеОбъектыПространстваИмен(
				ЕИСФабрикаXDTO,
				ПространствоИмен);
		// Типы данных веб-сервиса
		T_purchase =
			КорневыеОбъекты.Получить("purchaseNoticeZK").Тип;
		T_header =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchase, "header");
		T_body =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchase, "body");
		T_purchaseNoticeItem =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_body, "item");
		T_purchaseNoticeZKData =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseNoticeItem, "purchaseNoticeZKData");
		T_lots =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseNoticeZKData, "lots");
		// Объект XDTO План закупки
		ОписаниеЗакупки = ЕИСФабрикаXDTO.Создать(T_purchase);
		// Заголовок пакета.
 		ОписаниеЗакупки.header = ЕИСФабрикаXDTO.Создать(T_header);
 		ОписаниеЗакупки.header.guid = ПоляОписанияТранзакции.КлючСообщения;
 		ОписаниеЗакупки.header.createDateTime = ТекущаяДата();
		// Тело пакета
		ОписаниеЗакупки.body = ЕИСФабрикаXDTO.Создать(T_body);
		ОписаниеЗакупки.body.item = ЕИСФабрикаXDTO.Создать(T_purchaseNoticeItem);
		ОписаниеЗакупки.body.item.guid = Строка(Новый УникальныйИдентификатор);
		// Закупка
		ДанныеЗакупки = ПолучитьpurchaseNoticeОбщаяЧасть(
							ЭТП,
							ЕИСФабрикаXDTO,
							ЗакупочнаяПроцедура,
							ДопПоля,
							ПоляОписанияТранзакции,
							T_purchaseNoticeZKData);
		Если ДанныеЗакупки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ОписаниеЗакупки.body.item.purchaseNoticeZKData = ДанныеЗакупки;
		// Подготовим описание лота
		ОписаниеЛотов = ПолучитьЛотыЗакупочнойПроцедуры(
			ЭТП,
			ЕИСФабрикаXDTO,
			T_lots,
			ЗакупочнаяПроцедура,
			ИнтеграцияЦУЗсЭТПСерверУХ.ЕдиноеМестоПоставкиВЗакупочнойПроцедуре(
				ЗакупочнаяПроцедура),
			ПоляОписанияТранзакции);
		Если ОписаниеЛотов = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДанныеЗакупки.lots = ОписаниеЛотов;
		// Прочие реквизиты
		// Порядок проведения процедуры
		ДанныеЗакупки.quotationExaminationTime =
			ЗакупочнаяПроцедура.ДатаНачалаРассмотренияЗаявок;
		Если ПустаяСтрока(ЗакупочнаяПроцедура.АдресРассмотренияЗаявок) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции,
				Нстр("ru = 'Не заполнен адрес рассмотрения заявок! '"));
			Возврат Неопределено;
		КонецЕсли;
		ДанныеЗакупки.quotationExaminationPlace =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ЗакупочнаяПроцедура.АдресРассмотренияЗаявок);
		Если ПустаяСтрока(
					ЗакупочнаяПроцедура.ТребованияКОформлениюДокументации) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции,
				Нстр("ru = 'Не заполнены требования к оформлению документации! '"));
			Возврат Неопределено;
		КонецЕсли;
		ДанныеЗакупки.quotationForm =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ЗакупочнаяПроцедура.ТребованияКОформлениюДокументации);
		ДанныеЗакупки.submissionCloseDateTime =
			ЗакупочнаяПроцедура.ДатаОкончанияПриемаЗаявок;
		ДанныеЗакупки.publicationPlannedDate =
			ЗакупочнаяПроцедура.ДатаОфициальногоОбъявленияЗакупки;
		Если ОписаниеЗакупки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		НаименованиеСпособаВыбора = "";
		КодСпособаВыбора =
			ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьКодЗакупкиВЕИС(
				ЗакупочнаяПроцедура.СпособВыбораПоставщика,
				ЗакупочнаяПроцедура.ЗакрытаяЗакупка,
				ЗакупочнаяПроцедура.ВЭлектроннойФорме,
				НаименованиеСпособаВыбора);
		
		Если ЗначениеЗаполнено(КодСпособаВыбора) Тогда
			ДанныеЗакупки.purchaseCodeName ="Запрос котировок в электронной форме 223-ФЗ";//ПолучитьРеквизитыЭлектроннойЗакупки(ЗакупочнаяПроцедура).ПолныйКодСпособаЗакупки;// "Запрос котировок";// в электронной форме 223-ФЗ ";//"TSZK";//ПолучитьРеквизитыЭлектроннойЗакупки(ЗакупочнаяПроцедура).КодСпособаЗакупки;
		КонецЕсли;
		
		ОписаниеЗакупки.Проверить();	
		ТекстОписания =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьТекстОписанияОбъекта(
				ЕИСФабрикаXDTO,
				ОписаниеЗакупки,
				"purchaseNoticeZK");
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки =
			СтрШаблон(Нстр("ru = 'Заполнение данных для отправки закупки закончилось ошибкой!%1%2'"), 
				Символы.ПС, ПодробноеПредставлениеОшибки(Инфо));
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(
			ПоляОписанияТранзакции,
			ТекстОшибки,
			"ЕИС");
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ТекстОписания;
КонецФункции

&НаСервере
Функция ПолучитьpurchaseNoticeAE(ЭТП, ЕИСФабрикаXDTO, ЗакупочнаяПроцедура, ДопПоля, ПоляОписанияТранзакции)
	ТекстОписания = Неопределено;
	Попытка
		ПространствоИмен = "http://zakupki.gov.ru/223fz/purchase/1";
		КорневыеОбъекты =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьКорневыеОбъектыПространстваИмен(
				ЕИСФабрикаXDTO, ПространствоИмен);
		// Типы данных веб-сервиса
		T_purchase =
			КорневыеОбъекты.Получить("purchaseNoticeAE").Тип;
		T_header =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchase, "header");
		T_body =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchase, "body");
		T_purchaseNoticeItem = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_body, "item");
		T_purchaseNoticeAEData = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseNoticeItem, "purchaseNoticeAEData");
		T_lots = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_purchaseNoticeAEData, "lots");
		// Объект XDTO План закупки
		ОписаниеЗакупки = ЕИСФабрикаXDTO.Создать(T_purchase);
		// Заголовок пакета.
 		ОписаниеЗакупки.header = ЕИСФабрикаXDTO.Создать(T_header);
 		ОписаниеЗакупки.header.guid = ПоляОписанияТранзакции.КлючСообщения;
 		ОписаниеЗакупки.header.createDateTime = ТекущаяДата();
		// Тело пакета
		ОписаниеЗакупки.body = ЕИСФабрикаXDTO.Создать(T_body);
		ОписаниеЗакупки.body.item = ЕИСФабрикаXDTO.Создать(T_purchaseNoticeItem);
		ОписаниеЗакупки.body.item.guid = Строка(Новый УникальныйИдентификатор);
		// Закупка
		ДанныеЗакупки = ПолучитьpurchaseNoticeОбщаяЧасть(
							ЭТП,
							ЕИСФабрикаXDTO, 
							ЗакупочнаяПроцедура,
							ДопПоля,
							ПоляОписанияТранзакции, 
							T_purchaseNoticeAEData);
		Если ДанныеЗакупки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ОписаниеЗакупки.body.item.purchaseNoticeAEData = ДанныеЗакупки;
		// Подготовим описание лота
		ОписаниеЛотов = ПолучитьЛотыЗакупочнойПроцедуры(
			ЭТП, 
			ЕИСФабрикаXDTO, 
			T_lots, 
			ЗакупочнаяПроцедура,
			ИнтеграцияЦУЗсЭТПСерверУХ.ЕдиноеМестоПоставкиВЗакупочнойПроцедуре(
				ЗакупочнаяПроцедура),
			ПоляОписанияТранзакции);
		Если ОписаниеЛотов = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДанныеЗакупки.lots = ОписаниеЛотов;
		// Прочие реквизиты
		Если НЕ ЗначениеЗаполнено(
					ЗакупочнаяПроцедура.ВнешняяСистемаДляПроведенияАукциона) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции,
				Нстр("ru = 'Не указана площадка для проведения аукциона! '"));
			Возврат Неопределено;
		КонецЕсли;
		ДанныеЗакупки.electronicPlaceInfo = 
			ЕИСФабрикаXDTO.Создать(
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
					T_purchaseNoticeAEData, "electronicPlaceInfo"));
		ДанныеЗакупки.electronicPlaceInfo.name =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ЗакупочнаяПроцедура.ВнешняяСистемаДляПроведенияАукциона.Наименование);
		ДанныеЗакупки.electronicPlaceInfo.url = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ЗакупочнаяПроцедура.ВнешняяСистемаДляПроведенияАукциона.СсылкаНаСайт);
		ДанныеЗакупки.electronicPlaceInfo.electronicPlaceId =
			ЗакупочнаяПроцедура.ВнешняяСистемаДляПроведенияАукциона.ИдентификаторЕИС;
		// Порядок проведения процедуры
		ДанныеЗакупки.auctionTime =
			ЗакупочнаяПроцедура.ДатаПроведенияАукциона;
		ДанныеЗакупки.applExamPeriodTime =
			ЗакупочнаяПроцедура.ДатаОкончанияРассмотренияЗаявок;
		ДанныеЗакупки.submissionCloseDateTime =
			ЗакупочнаяПроцедура.ДатаОкончанияПриемаЗаявок;
		ДанныеЗакупки.publicationPlannedDate =
			ЗакупочнаяПроцедура.ДатаОфициальногоОбъявленияЗакупки;
		Если ОписаниеЗакупки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ОписаниеЗакупки.Проверить();	
		ТекстОписания =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьТекстОписанияОбъекта(
				ЕИСФабрикаXDTO,
				ОписаниеЗакупки,
				"purchaseNoticeAE");
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки =
			СтрШаблон(Нстр("ru = 'Заполнение данных для отправки закупки закончилось ошибкой!%1%2'"), 
				Символы.ПС, ПодробноеПредставлениеОшибки(Инфо));
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(
			ПоляОписанияТранзакции,
			ТекстОшибки,
			"ЕИС");
		Возврат Неопределено;
	КонецПопытки;
	Возврат ТекстОписания;
КонецФункции


&НаСервере
Функция ПолучитьpurchaseNoticeAEMSP(ЭТП, ЕИСФабрикаXDTO, ЗакупочнаяПроцедура, ДопПоля, ПоляОписанияТранзакции)
	
	ТекстОписания = Неопределено;
	Попытка           
		ПространствоИмен = "http://zakupki.gov.ru/223fz/purchase/1";
		КорневыеОбъекты =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьКорневыеОбъектыПространстваИмен(
				ЕИСФабрикаXDTO,
				ПространствоИмен);
		// Типы данных веб-сервиса           purchaseNoticeZPESMBOItemType
		T_purchase = КорневыеОбъекты.Получить("purchaseNoticeZPESMBO").Тип;
		T_header =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchase, "header");
		T_body =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchase, "body");
		T_purchaseNoticeItem =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_body, "item");
		T_purchaseNoticeData =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseNoticeItem, "purchaseNoticeZPESMBOData");
		T_placingProcedure =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseNoticeData, "placingProcedure");
		T_lots =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseNoticeData, "lots");
		// Объект XDTO План закупки
		ОписаниеЗакупки = ЕИСФабрикаXDTO.Создать(T_purchase);
		// Заголовок пакета.
 		ОписаниеЗакупки.header = ЕИСФабрикаXDTO.Создать(T_header);
 		ОписаниеЗакупки.header.guid = ПоляОписанияТранзакции.КлючСообщения;
		
		Мероприятие = Документы.Мероприятие.ПолучитьПоследнееМероприятиеПоКонтексту(ЗакупочнаяПроцедура,  Перечисления.ВидыМероприятий.ЗакупочнаяПроцедура);
		
		Стадия = Справочники.СтадииМероприятий.ЗапросПредложений_НачалоПодготовкиЗакупкиКПубликации;
		ДанныеСтадии = Документы.Мероприятие.ПолучитьДанныеСтадииМероприятия(Мероприятие, Стадия);
		ОписаниеЗакупки.header.createDateTime=
			ДанныеСтадии.ДатаНачала;
	
		//ОписаниеЗакупки.header.createDateTime = ТекущаяДата();
		// Тело пакета
		ОписаниеЗакупки.body = ЕИСФабрикаXDTO.Создать(T_body);
		ОписаниеЗакупки.body.item = ЕИСФабрикаXDTO.Создать(T_purchaseNoticeItem);
		ОписаниеЗакупки.body.item.guid = Строка(Новый УникальныйИдентификатор);
		// Закупка
		ДанныеЗакупки = ПолучитьpurchaseNoticeОбщаяЧасть(
							ЭТП,
							ЕИСФабрикаXDTO,
							ЗакупочнаяПроцедура,
							ДопПоля,
							ПоляОписанияТранзакции,
							T_purchaseNoticeData);
		Если ДанныеЗакупки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ОписаниеЗакупки.body.item.purchaseNoticeZPESMBOData = ДанныеЗакупки;
		// Прочие реквизиты     
		//ДанныеЗакупки.electronicPlaceInfo
		
		placingProcedure = ПолучитьplacingProcedure(
			ЕИСФабрикаXDTO,
			T_placingProcedure,
			ЗакупочнаяПроцедура,
			ПоляОписанияТранзакции);
		Если placingProcedure = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДанныеЗакупки.placingProcedure = placingProcedure;
		//ДанныеЗакупки.submissionCloseDateTime =
		//	ЗакупочнаяПроцедура.ДатаОкончанияПриемаЗаявок;
		ДанныеЗакупки.applSubmisionOrder = ЗакупочнаяПроцедура.ПорядокПредоставленияДокументации;
		ДанныеЗакупки.summingupOrder = ЗакупочнаяПроцедура.ПорядокОценкиИСопоставленияЗаявок;
		Стадия = Справочники.СтадииМероприятий.ЗапросПредложений_ОкончаниеПриемаЗаявок;
		ДанныеСтадии = Документы.Мероприятие.ПолучитьДанныеСтадииМероприятия(Мероприятие, Стадия);
		ДанныеЗакупки.submissionCloseDateTime =
			ДанныеСтадии.ДатаОкончания;
		Стадия = Справочники.СтадииМероприятий.ЗапросПредложений_НачалоПриемаЗаявок;
		ДанныеСтадии = Документы.Мероприятие.ПолучитьДанныеСтадииМероприятия(Мероприятие, Стадия);
		ДанныеЗакупки.applSubmisionStartDate = ДанныеСтадии.ДатаНачала;
		ДанныеЗакупки.publicationPlannedDate =
			ЗакупочнаяПроцедура.ДатаОфициальногоОбъявленияЗакупки;
		// Подготовим описание лота
		
		Если НЕ ЗначениеЗаполнено(
					ЗакупочнаяПроцедура.ЭТППубликации) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции,
				Нстр("ru = 'Не указана площадка ЭТП! '"));
			Возврат Неопределено;
		КонецЕсли;
		
		
		ДанныеЗакупки.electronicPlaceInfo = 
			ЕИСФабрикаXDTO.Создать(
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
					T_purchaseNoticeData, "electronicPlaceInfo"));
		ДанныеЗакупки.electronicPlaceInfo.name =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ЗакупочнаяПроцедура.ЭТППубликации.Наименование);
		ДанныеЗакупки.electronicPlaceInfo.url = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ЗакупочнаяПроцедура.ЭТППубликации.Адрес);
		ДанныеЗакупки.electronicPlaceInfo.electronicPlaceId =
			ЗакупочнаяПроцедура.ЭТППубликации.ИдентификаторЭТП;
		
		ОписаниеЛотов = ПолучитьЛотыЗакупочнойПроцедуры(
			ЭТП,
			ЕИСФабрикаXDTO,
			T_lots,
			ЗакупочнаяПроцедура,
			ИнтеграцияЦУЗсЭТПСерверУХ.ЕдиноеМестоПоставкиВЗакупочнойПроцедуре(
					ЗакупочнаяПроцедура),
			ПоляОписанияТранзакции);
		Если ОписаниеЛотов = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	
		ДанныеЗакупки.lots = ОписаниеЛотов;
		НаименованиеСпособаВыбора = "";
		КодСпособаВыбора =
			ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьКодЗакупкиВЕИС(
				ЗакупочнаяПроцедура.СпособВыбораПоставщика,
				ЗакупочнаяПроцедура.ЗакрытаяЗакупка,
				ЗакупочнаяПроцедура.ВЭлектроннойФорме,
				НаименованиеСпособаВыбора);
		
		Если ЗначениеЗаполнено(КодСпособаВыбора) Тогда
			ДанныеЗакупки.purchaseMethodCode = КодСпособаВыбора;
			ДанныеЗакупки.purchaseCodeName = ПолучитьРеквизитыЭлектроннойЗакупки(ЗакупочнаяПроцедура).КодСпособаЗакупки;
		КонецЕсли;
		
		ОписаниеЗакупки.Проверить();	
		ТекстОписания =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьТекстОписанияОбъекта(
				ЕИСФабрикаXDTO, ОписаниеЗакупки, "purchaseNoticeZPESMBO");
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки =
			СтрШаблон(Нстр("ru = 'Заполнение данных для отправки закупки закончилось ошибкой!%1%2'"), 
				Символы.ПС, ПодробноеПредставлениеОшибки(Инфо));
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(
			ПоляОписанияТранзакции, ТекстОшибки, "ЕИС");
		Возврат Неопределено;
	КонецПопытки;
	Возврат ТекстОписания;
КонецФункции	

&НаСервере
Функция ПолучитьpurchaseNoticeEPA(ЭТП, ЕИСФабрикаXDTO, ЗакупочнаяПроцедура, ДопПоля, ПоляОписанияТранзакции)
	
	ТекстОписания = Неопределено;
	Попытка
		ПространствоИмен = "http://zakupki.gov.ru/223fz/purchase/1";
		КорневыеОбъекты =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьКорневыеОбъектыПространстваИмен(
				ЕИСФабрикаXDTO,
				ПространствоИмен);
		// Типы данных веб-сервиса
		T_purchase = КорневыеОбъекты.Получить("purchaseNotice").Тип;
		T_header =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchase, "header");
		T_body =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchase, "body");
		T_purchaseNoticeItem =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_body, "item");
		T_purchaseNoticeData =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseNoticeItem, "purchaseNoticeData");
		T_placingProcedure =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseNoticeData, "placingProcedure");
		T_lots =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseNoticeData, "lots");
		// Объект XDTO План закупки
		ОписаниеЗакупки = ЕИСФабрикаXDTO.Создать(T_purchase);
		// Заголовок пакета.
 		ОписаниеЗакупки.header = ЕИСФабрикаXDTO.Создать(T_header);
 		ОписаниеЗакупки.header.guid = ПоляОписанияТранзакции.КлючСообщения;
		
		Мероприятие = Документы.Мероприятие.ПолучитьПоследнееМероприятиеПоКонтексту(ЗакупочнаяПроцедура,  Перечисления.ВидыМероприятий.ЗакупочнаяПроцедура);
		
		Стадия = Справочники.СтадииМероприятий.ЗапросПредложений_НачалоПодготовкиЗакупкиКПубликации;
		ДанныеСтадии = Документы.Мероприятие.ПолучитьДанныеСтадииМероприятия(Мероприятие, Стадия);
		ОписаниеЗакупки.header.createDateTime=
			ДанныеСтадии.ДатаНачала;
	
		//ОписаниеЗакупки.header.createDateTime = ТекущаяДата();
		// Тело пакета
		ОписаниеЗакупки.body = ЕИСФабрикаXDTO.Создать(T_body);
		ОписаниеЗакупки.body.item = ЕИСФабрикаXDTO.Создать(T_purchaseNoticeItem);
		ОписаниеЗакупки.body.item.guid = Строка(Новый УникальныйИдентификатор);
		// Закупка
		ДанныеЗакупки = ПолучитьpurchaseNoticeОбщаяЧасть(
							ЭТП,
							ЕИСФабрикаXDTO,
							ЗакупочнаяПроцедура,
							ДопПоля,
							ПоляОписанияТранзакции,
							T_purchaseNoticeData);
		Если ДанныеЗакупки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ОписаниеЗакупки.body.item.purchaseNoticeData = ДанныеЗакупки;
		// Прочие реквизиты
		//ДанныеЗакупки.electronicPlaceInfo
		placingProcedure = ПолучитьplacingProcedure(
			ЕИСФабрикаXDTO,
			T_placingProcedure,
			ЗакупочнаяПроцедура,
			ПоляОписанияТранзакции);
		Если placingProcedure = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДанныеЗакупки.placingProcedure = placingProcedure;
		//ДанныеЗакупки.submissionCloseDateTime =
		//	ЗакупочнаяПроцедура.ДатаОкончанияПриемаЗаявок;
		ДанныеЗакупки.applSubmisionOrder = ЗакупочнаяПроцедура.ПорядокПредоставленияДокументации;
		ДанныеЗакупки.summingupOrder = ЗакупочнаяПроцедура.ПорядокОценкиИСопоставленияЗаявок;
		
		ДатыСтадии = ЗаполнитьДатыПоСтадии(Стадия,ЗакупочнаяПроцедура,Мероприятие);
		ДанныеЗакупки.applSubmisionStartDate = ДатыСтадии.applSubmisionStartDate;
		ДанныеЗакупки.submissionCloseDateTime = ДатыСтадии.submissionCloseDateTime;

		ДанныеЗакупки.publicationPlannedDate =
			ЗакупочнаяПроцедура.ДатаОфициальногоОбъявленияЗакупки;
		// Подготовим описание лота
		
		Если НЕ ЗначениеЗаполнено(
					ЗакупочнаяПроцедура.ЭТППубликации) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции,
				Нстр("ru = 'Не указана площадка ЭТП! '"));
			Возврат Неопределено;
		КонецЕсли;
		
		T_headerEP =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchase, "header");
		T_bodyEP =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchase, "body");
		T_purchaseNoticeItemEP = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_bodyEP, "item");
		T_purchaseNoticeAEData = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_purchaseNoticeItemEP, "purchaseNoticeData");
		
		ДанныеЗакупки.electronicPlaceInfo = 
			ЕИСФабрикаXDTO.Создать(
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
					T_purchaseNoticeAEData, "electronicPlaceInfo"));
		ДанныеЗакупки.electronicPlaceInfo.name =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ЗакупочнаяПроцедура.ЭТППубликации.Наименование);
		ДанныеЗакупки.electronicPlaceInfo.url = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ЗакупочнаяПроцедура.ЭТППубликации.Адрес);
		ДанныеЗакупки.electronicPlaceInfo.electronicPlaceId =
			ЗакупочнаяПроцедура.ЭТППубликации.ИдентификаторЭТП;
		
		ОписаниеЛотов = ПолучитьЛотыЗакупочнойПроцедуры(
			ЭТП,
			ЕИСФабрикаXDTO,
			T_lots,
			ЗакупочнаяПроцедура,
			ИнтеграцияЦУЗсЭТПСерверУХ.ЕдиноеМестоПоставкиВЗакупочнойПроцедуре(
					ЗакупочнаяПроцедура),
			ПоляОписанияТранзакции);
		Если ОписаниеЛотов = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	
		ДанныеЗакупки.lots = ОписаниеЛотов;
		НаименованиеСпособаВыбора = "";
		КодСпособаВыбора =
			ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьКодЗакупкиВЕИС(
				ЗакупочнаяПроцедура.СпособВыбораПоставщика,
				ЗакупочнаяПроцедура.ЗакрытаяЗакупка,
				ЗакупочнаяПроцедура.ВЭлектроннойФорме,
				НаименованиеСпособаВыбора);
		
		Если ЗначениеЗаполнено(КодСпособаВыбора) Тогда
			ДанныеЗакупки.purchaseMethodCode = КодСпособаВыбора;
			//ДанныеЗакупки.purchaseCodeName = НаименованиеСпособаВыбора;
			ДанныеЗакупки.purchaseCodeName = ПолучитьРеквизитыЭлектроннойЗакупки(ЗакупочнаяПроцедура).КодСпособаЗакупки;
		КонецЕсли;
		
		ОписаниеЗакупки.Проверить();	
		ТекстОписания =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьТекстОписанияОбъекта(
				ЕИСФабрикаXDTO, ОписаниеЗакупки, "purchaseNotice");
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки =
			СтрШаблон(Нстр("ru = 'Заполнение данных для отправки закупки закончилось ошибкой!%1%2'"), 
				Символы.ПС, ПодробноеПредставлениеОшибки(Инфо));
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(
			ПоляОписанияТранзакции, ТекстОшибки, "ЕИС");
		Возврат Неопределено;
	КонецПопытки;
	Возврат ТекстОписания;
	
КонецФункции

&НаСервере
Функция ЗаполнитьДатыПоСтадии(Стадия,ЗакупочнаяПроцедура,Мероприятие)
	
		Структура = Новый Структура;
	
		Если ЗакупочнаяПроцедура.СпособВыбораПоставщика = Перечисления.СпособыВыбораПоставщика.ЗапросПредложений Тогда	
			Стадия = Справочники.СтадииМероприятий.ЗапросПредложений_НачалоПриемаЗаявок;
		ИначеЕсли ЗакупочнаяПроцедура.СпособВыбораПоставщика = Перечисления.СпособыВыбораПоставщика.Конкурс Тогда	
			Стадия = Справочники.СтадииМероприятий.Конкурс_НачалоПриемаЗаявок;
		ИначеЕсли ЗакупочнаяПроцедура.СпособВыбораПоставщика = Перечисления.СпособыВыбораПоставщика.КонкурентныеПереговоры Тогда	
			Стадия = Справочники.СтадииМероприятий.КонкурентныеПереговоры_НачалоПриемаЗаявок;
		ИначеЕсли ЗакупочнаяПроцедура.СпособВыбораПоставщика = Перечисления.СпособыВыбораПоставщика.Аукцион Тогда	
			Стадия = Справочники.СтадииМероприятий.Аукцион_НачалоПриемаЗаявок;
		КонецЕсли;
		
		ДанныеСтадии = Документы.Мероприятие.ПолучитьДанныеСтадииМероприятия(Мероприятие, Стадия);
		Структура.Вставить("applSubmisionStartDate",ДанныеСтадии.ДатаНачала);
		
		Если ЗакупочнаяПроцедура.СпособВыбораПоставщика = Перечисления.СпособыВыбораПоставщика.ЗапросПредложений Тогда	
			Стадия = Справочники.СтадииМероприятий.ЗапросПредложений_ОкончаниеПриемаЗаявок;
		ИначеЕсли ЗакупочнаяПроцедура.СпособВыбораПоставщика = Перечисления.СпособыВыбораПоставщика.Конкурс Тогда
			Стадия = Справочники.СтадииМероприятий.Конкурс_ОкончаниеПриемаЗаявок;
		ИначеЕсли ЗакупочнаяПроцедура.СпособВыбораПоставщика = Перечисления.СпособыВыбораПоставщика.КонкурентныеПереговоры Тогда
			Стадия = Справочники.СтадииМероприятий.КонкурентныеПереговоры_ОкончаниеПриемаЗаявок;
		ИначеЕсли ЗакупочнаяПроцедура.СпособВыбораПоставщика = Перечисления.СпособыВыбораПоставщика.Аукцион Тогда
			Стадия = Справочники.СтадииМероприятий.Аукцион_ОкончаниеПриемаЗаявок;
		КонецЕсли;

		ДанныеСтадии = Документы.Мероприятие.ПолучитьДанныеСтадииМероприятия(Мероприятие, Стадия);
		Структура.Вставить("submissionCloseDateTime",ДанныеСтадии.ДатаОкончания);
		
		Возврат Структура;
КонецФункции
	
&НаСервере
Функция ПолучитьpurchaseNoticeОбщаяЧасть(ЭТП, 
										ЕИСФабрикаXDTO, 
										ЗакупочнаяПроцедура,
										ДопПоля,
										ПоляОписанияТранзакции, 
										T_purchaseNotice__Data)
	ДанныеЗакупки = Неопределено;
	Попытка
		// Типы данных веб-сервиса
		T_customer = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_purchaseNotice__Data, "customer"); // также используется для placer
		T_documentationDelivery = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_purchaseNotice__Data, "documentationDelivery");
		T_lots = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_purchaseNotice__Data, "lots");
		T_contact = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_purchaseNotice__Data, "contact");
		// Закупка
		ДанныеЗакупки = ЕИСФабрикаXDTO.Создать(T_purchaseNotice__Data);
		ОписаниеВерсииЗакупочнойПроцедуры = 
			ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьВерсиюОбъектаДляЕИС(ЗакупочнаяПроцедура);
		УИДЗакупочнойПроцедуры = ОписаниеВерсииЗакупочнойПроцедуры.ГУИДВерсии;
		СохранитьУИДОбъекта(ЗакупочнаяПроцедура,, УИДЗакупочнойПроцедуры);
		ДанныеЗакупки.guid = УИДЗакупочнойПроцедуры;
		ДанныеЗакупки.createDateTime = ЗакупочнаяПроцедура.ДатаНачалаПодготовкиЗакупки;
		//ДанныеЗакупки.urlOOS
		ДанныеЗакупки.urlVSRZ = "http://zakupki.gov.ru";
		Если ИнтеграцияЦУЗсЭТПСерверУХ.КорректныйНомерРегистрацииЕИС(ЗакупочнаяПроцедура) Тогда
			ДанныеЗакупки.registrationNumber = ЗакупочнаяПроцедура.РегистрационныйНомер;
		КонецЕсли;
		Если ПустаяСтрока(ЗакупочнаяПроцедура.ПредметДоговора) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции, Нстр("ru = 'Не заполнен предмет договора! '"));
			Возврат Неопределено;
		КонецЕсли;
		ДанныеЗакупки.name = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ЗакупочнаяПроцедура.ПредметДоговора);
		ОрганизацияДляЗаключенияДоговора = ПоляОписанияТранзакции.Организация;
		Если НЕ ЗначениеЗаполнено(ЗакупочнаяПроцедура.ОрганизацияДляЗаключенияДоговора)
					И НЕ ЗакупочнаяПроцедура.СовместнаяЗакупка Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции, Нстр("ru = 'Не заполнена организация заказчик! '"));
			Возврат Неопределено;
		КонецЕсли;
		ОписаниеОрганизации = ПолучитьОписаниеОрганизации(
			ЕИСФабрикаXDTO,
			T_customer,
			ОрганизацияДляЗаключенияДоговора,
			ПоляОписанияТранзакции);
		Если ПоляОписанияТранзакции.ОшибкаОбменаСЭТП Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДанныеЗакупки.customer = ОписаниеОрганизации;
		НаименованиеСпособаВыбора = "";
		КодСпособаВыбора = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьКодЗакупкиВЕИС(
			ЗакупочнаяПроцедура.СпособВыбораПоставщика,
			ЗакупочнаяПроцедура.ЗакрытаяЗакупка,
			ЗакупочнаяПроцедура.ВЭлектроннойФорме,
			НаименованиеСпособаВыбора);
		Если ЗначениеЗаполнено(КодСпособаВыбора) Тогда
			ДанныеЗакупки.purchaseMethodCode = КодСпособаВыбора;
			//ДанныеЗакупки.purchaseCodeName = 
			//	ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			//		НаименованиеСпособаВыбора);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ЗакупочнаяПроцедура.ОрганизаторЗакупки) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции, Нстр("ru = 'Не заполнена организация организатор закупки! '"));
			Возврат Неопределено;
		КонецЕсли;
		ОписаниеОрганизатора = ПолучитьОписаниеОрганизации(
			ЕИСФабрикаXDTO,
			T_customer,
			ЗакупочнаяПроцедура.ОрганизаторЗакупки,
			ПоляОписанияТранзакции);
		Если ПоляОписанияТранзакции.ОшибкаОбменаСЭТП Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДанныеЗакупки.placer = ОписаниеОрганизатора;
		ОписаниеКнтактногоЛица = ПолучитьОписаниеКонтактногоЛица(
			ЕИСФабрикаXDTO, T_contact, ЗакупочнаяПроцедура);
		Если ОписаниеКнтактногоЛица <> Неопределено Тогда
			ДанныеЗакупки.contact = ОписаниеКнтактногоЛица;
		КонецЕсли;
		//ДанныеЗакупки.publicationDateTime = ЗакупочнаяПроцедура.ДатаНачалаПодготовкиЗакупки;
		Если НЕ ПустаяСтрока(ЗакупочнаяПроцедура.АдресПредоставленияДокументации) Тогда
			ОписаниеПредоставленияДокументации = ПолучитьОписаниеПредоставленияДокументации(
				ЕИСФабрикаXDTO, T_documentationDelivery, ЗакупочнаяПроцедура, ПоляОписанияТранзакции);
			Если ПоляОписанияТранзакции.ОшибкаОбменаСЭТП Тогда
				Возврат Неопределено;
			КонецЕсли;
			ДанныеЗакупки.documentationDelivery = ОписаниеПредоставленияДокументации;
		КонецЕсли;
		//ДанныеЗакупки.status = "F"; // Редактирование
		Если ОписаниеВерсииЗакупочнойПроцедуры.НомерВерсии > 0 Тогда
			ДанныеЗакупки.version = ОписаниеВерсииЗакупочнойПроцедуры.НомерВерсии;
			Если НЕ ПустаяСтрока(ОписаниеВерсииЗакупочнойПроцедуры.ОбоснованиеИзменений) Тогда
				ДанныеЗакупки.modificationDescription = 
					ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
						ОписаниеВерсииЗакупочнойПроцедуры.ОбоснованиеИзменений);
			КонецЕсли;
		КонецЕсли;
		ДанныеЗакупки.notDishonest =
			ИнтеграцияЦУЗсЭТПСерверУХ.ПроверитьТребованиеОтсутствиеСведенийВРНП(
				ЗакупочнаяПроцедура);
		Вложения = СоздатьВложениеФайлов(
						ЭТП, 
						ЕИСФабрикаXDTO, 
						ЗакупочнаяПроцедура, 
						T_purchaseNotice__Data);
		Если Вложения <> Неопределено Тогда
			ДанныеЗакупки.attachments = Вложения;
		КонецЕсли;
		Если ОписаниеВерсииЗакупочнойПроцедуры.НомерВерсии > 0 Тогда
			ДанныеЗакупки.modificationDate = ОписаниеВерсииЗакупочнойПроцедуры.Дата;
		КонецЕсли;
		//ДанныеЗакупки.saveUserId
		ДанныеЗакупки.deliveryPlaceIndication =
			Получить_deliveryPlaceIndicationДляЗакупки(
				ДопПоля.МестоПоставки <> Неопределено);
		//ДанныеЗакупки.emergency = Ложь; // Не экстренная закупка
		ДанныеЗакупки.jointPurchase = ЗакупочнаяПроцедура.СовместнаяЗакупка;
		ДанныеЗакупки.isUploadComplete = Истина;
		ДанныеЗакупки.forSmallOrMiddle =
			ЗакупочнаяПроцедура.ПриоритетУчастияМалогоИСреднегоПредпринимательства;
		Возврат ДанныеЗакупки;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = СтрШаблон(Нстр("ru = 'Заполнение данных для отправки закупки закончилось ошибкой!%1%2'"), 
		              	Символы.ПС, ПодробноеПредставлениеОшибки(Инфо));
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(
			ПоляОписанияТранзакции, 
			ТекстОшибки, 
			"ЕИС");
		Возврат Неопределено;
	КонецПопытки;
	Возврат ДанныеЗакупки;
КонецФункции

&НаСервере
Функция Получить_deliveryPlaceIndicationДляЗакупки(флЕдиноеМестоПоставки)
	Если флЕдиноеМестоПоставки Тогда
		// Единое место поставки лотов
		Возврат "SINGLE_PLACE";
	КонецЕсли;
	// Различные места поставки лотов
	Возврат "DIFFERENT_PLACE";
КонецФункции

&НаСервере
Функция ПолучитьDeliveryPlace(ЕИСФабрикаXDTO, T_deliveryPlace, МестоПоставки)
	deliveryPlace = ЕИСФабрикаXDTO.Создать(T_deliveryPlace);
	Если НЕ ПустаяСтрока(МестоПоставки.КодПоОКАТО) Тогда
		deliveryPlace.regionOkato = СокрЛП(МестоПоставки.КодПоОКАТО);
	КонецЕсли;
	deliveryPlace.address =
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
				МестоПоставки.Адрес));
	Возврат deliveryPlace;
КонецФункции

&НаСервере
Функция ПолучитьЛотыЗакупочнойПроцедуры(ЭТП,
										ЕИСФабрикаXDTO,
										T_lots,
										ЗакупочнаяПроцедура,
										МестоПоставки,
										ПоляОписанияТранзакции)
	T_lot = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
		T_lots, "lot");
	ОписаниеЛотов = ЕИСФабрикаXDTO.Создать(T_lots);
	ВыборкаЛотов = 
		ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьВыборокуЛотовЗакупочнойПроцедуры(
			ЗакупочнаяПроцедура);
	Пока ВыборкаЛотов.Следующий() Цикл
		ОписаниеЛота = ПолучитьЛотЗакупочнойПроцедуры(
			ЭТП,
			ЕИСФабрикаXDTO,
			T_lot,
			МестоПоставки,
			ВыборкаЛотов.Лот,
			ПоляОписанияТранзакции);
		Если ОписаниеЛота = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ОписаниеЛотов.lot.Добавить(ОписаниеЛота);
	КонецЦикла;
	Возврат ОписаниеЛотов;
КонецФункции

&НаСервере
Функция ПолучитьЛотЗакупочнойПроцедуры(ЭТП,
										ЕИСФабрикаXDTO,
										T_lot,
										МестоПоставки,
										Лот,
										ПоляОписанияТранзакции)
	T_lotData = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
		T_lot, "lotData");
	T_jointLotData = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
		T_lot, "jointLotData");
	ОписаниеЛота = ЕИСФабрикаXDTO.Создать(T_lot);
	ОписаниеЛотаВПлане = 
		ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьОписаниеЛотаВПланеЗакупок(
			Лот);
	СохранитьУИДОбъекта(Лот,, ОписаниеЛотаВПлане.УИД_Лота);
	Если ЗначениеЗаполнено(ОписаниеЛотаВПлане.УИД_Плана) Тогда
		СохранитьУИДОбъекта(ОписаниеЛотаВПлане.ПрограммаЗакупок,, ОписаниеЛотаВПлане.УИД_Плана);
	КонецЕсли;
	ОписаниеЛота.guid = ОписаниеЛотаВПлане.УИД_Лота;
	ОписаниеЛота.ordinalNumber = Лот.Код;
	ОписаниеЛота.lotEditEnabled = Истина;
	флСобственныйЛот = (Лот.ОрганизацияДляЗаключенияДоговора = 
		ПоляОписанияТранзакции.Организация);
	Если флСобственныйЛот Тогда
		lotData = ПолучитьlotData(
			ЭТП, ЕИСФабрикаXDTO, T_lotData, МестоПоставки, Лот, ПоляОписанияТранзакции);
		Если lotData = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ОписаниеЛота.lotData = lotData;
	КонецЕсли;
	// Общее для лота
	ОписаниеЛота.deliveryPlaceIndication = 
		Получить_deliveryPlaceIndicationДляЛота(Лот);
	Если НЕ флСобственныйЛот Тогда
		jointLotData = ПолучитьJointLotData(
			ЭТП,
			ЕИСФабрикаXDTO,
			T_jointLotData,
			МестоПоставки,
			Лот,
			ОписаниеЛотаВПлане,
			ПоляОписанияТранзакции);
		Если jointLotData = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ОписаниеЛота.jointLotData = jointLotData;
	КонецЕсли;
	Если флСобственныйЛот Тогда
		ОписаниеПланаЗакупкиДляЛота = ПолучитьlotPlanInfo(
			ЕИСФабрикаXDTO,
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_lot, "lotPlanInfo"),
			Лот,
			ОписаниеЛотаВПлане,
			ПоляОписанияТранзакции);
		Если ОписаниеПланаЗакупкиДляЛота = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ОписаниеЛота.lotPlanInfo = ОписаниеПланаЗакупкиДляЛота;
	КонецЕсли;
	ПротоколОтменыЗакупки = 
		Документы.ПротоколОтменыЗакупочнойПроцедуры.ПолучитьПоЛоту(
			Лот);
	Если ЗначениеЗаполнено(ПротоколОтменыЗакупки) Тогда
		ОписаниеЛота.cancelled = Истина;
		Если флСобственныйЛот Тогда
			ОписаниеЛота.cancellation = ЕИСФабрикаXDTO.Создать(
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
					T_lot, "cancellation"));
			ОписаниеЛота.cancellation.cancelDate = ПротоколОтменыЗакупки.ДатаОтказаОтПроведения;
			ОписаниеЛота.cancellation.cancelInfo =
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
					ПротоколОтменыЗакупки.ПричинаОтказаОтПроведения);
		КонецЕсли;
	Иначе
		ОписаниеЛота.cancelled = Ложь;
	КонецЕсли;
	Возврат ОписаниеЛота;
КонецФункции

&НаСервере
Функция Получить_deliveryPlaceIndicationДляЛота(Лот)
	Если Лот.ЕдиноеМестоПоставки Тогда
		// Указывается общее для лота
		Возврат "GL";
	КонецЕсли;
	// Указывается для каждой позиции лота
	Возврат "ELP";
КонецФункции

&НаСервере
Функция ПолучитьПозицииЛотаДляЗакупки(ЭТП, ЕИСФабрикаXDTO, T_lotItems, Лот, ПоляОписанияТранзакции)
	СохранитьУИДОбъекта(Лот);
	ТекстОшибки = "";
	ТЗНоменклатуры =
		ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьОписаниеНоменклатурыЛота(
			Лот, ТекстОшибки);
	Если ТЗНоменклатуры = Неопределено Тогда
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
			ПоляОписанияТранзакции, ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	Если ТЗНоменклатуры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	T_lotItem =
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_lotItems, "lotItem");
	T_okei =
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_lotItem, "okei");
	T_okpd2 =
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_lotItem, "okpd2");
	T_okved2 =
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_lotItem, "okved2");
	
	lotItems = ЕИСФабрикаXDTO.Создать(T_lotItems);
	
	НомерСтроки_ = 1;
	Для Каждого СтрокаНоменклатуры Из ТЗНоменклатуры Цикл
		// Создаем описание позиции лота
		ОписаниеПозиции = ЕИСФабрикаXDTO.Создать(T_lotItem);
		//Идентификатор позиции
		УИД_СтрокиНоменклатуры =
			ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьУИД_Идентификатора(
				ЭТП, СтрокаНоменклатуры.Идентификатор);
		СохранитьУИДОбъекта(
			Неопределено,
			СтрШаблон(Нстр("ru = 'Строка номенклатуры №%1'"), СтрокаНоменклатуры.Идентификатор),
			УИД_СтрокиНоменклатуры);
		ОписаниеПозиции.guid = УИД_СтрокиНоменклатуры;
		ОписаниеПозиции.ordinalNumber = НомерСтроки_; //Порядковый номер позиции
		// ОКПД2
		Если ЗначениеЗаполнено(СтрокаНоменклатуры.КодОКПД2) Тогда
			ОписаниеПозиции.okpd2 = ЕИСФабрикаXDTO.Создать(T_okpd2);
			ОписаниеПозиции.okpd2.code = СокрЛП(СтрокаНоменклатуры.КодОКПД2);
		КонецЕсли;
		// ОКВЭД2
		Если ЗначениеЗаполнено(СтрокаНоменклатуры.КодОКВЭД2) Тогда
			ОписаниеПозиции.okved2 = ЕИСФабрикаXDTO.Создать(T_okved2);
			ОписаниеПозиции.okved2.code = СокрЛП(СтрокаНоменклатуры.КодОКВЭД2);
		КонецЕсли;
		Если СтрокаНоменклатуры.Количество > 0 Тогда
			// Единицы измерения
			ОписаниеПозиции.okei = ЕИСФабрикаXDTO.Создать(T_okei);
			ОписаниеПозиции.okei.code =
				СокрЛП(СтрокаНоменклатуры.ЕдиницаИзмеренияКод);
			// Количество
			ОписаниеПозиции.qty = СтрокаНоменклатуры.Количество;
		КонецЕсли;
		// Доп. информация позиции
		Если НЕ ПустаяСтрока(СтрокаНоменклатуры.НоменклатураНаименование) Тогда
			ОписаниеПозиции.additionalInfo =
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
					СтрокаНоменклатуры.НоменклатураНаименование);
		КонецЕсли;
		// Место доставки поставляемых товаров/выполнения работ/оказания услуг.
		// Адрес физический полный. Внимание: одно место поставки для всех позиций лота.
		Если ЗначениеЗаполнено(СтрокаНоменклатуры.МестоПоставкиОКАТО) Тогда
			МестоПоставки = Новый Структура(
				"КодПоОКАТО, Адрес",
				СтрокаНоменклатуры.МестоПоставкиОКАТО,
				СтрокаНоменклатуры.АдресМестаПоставки);
			ОписаниеПозиции.deliveryPlace = ПолучитьDeliveryPlace(
				ЕИСФабрикаXDTO,
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
						T_lotItem,
						"deliveryPlace"),
				МестоПоставки);
		КонецЕсли;
		lotItems.lotItem.Добавить(ОписаниеПозиции);
		НомерСтроки_ = НомерСтроки_ + 1;
	КонецЦикла;
	Возврат lotItems;
КонецФункции

&НаСервере
Функция ПолучитьОписаниеКонтактногоЛица(ЕИСФабрикаXDTO, T_contact, ЗакупочнаяПроцедура)
	ОписаниеОтветственногоЛица = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьОписаниеОтветсвенногоЛица(ЗакупочнаяПроцедура);
	Если ОписаниеОтветственногоЛица = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	contact = ЕИСФабрикаXDTO.Создать(T_contact);
	contact.firstName = ОписаниеОтветственногоЛица.Имя;
	contact.lastName = ОписаниеОтветственногоЛица.Фамилия;
	contact.middleName = ОписаниеОтветственногоЛица.Отчество;
	contact.phone = ОписаниеОтветственногоЛица.Телефон;
	contact.email = ОписаниеОтветственногоЛица.Email;
	Возврат contact;
КонецФункции

// Предоставление документации
&НаСервере
Функция ПолучитьОписаниеПредоставленияДокументации(ЕИСФабрикаXDTO, T_documentationDelivery, ЗакупочнаяПроцедура, ПоляОписанияТранзакции)	
	ПорядокПредоставленияДокументации =
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			ЗакупочнаяПроцедура.ПорядокПредоставленияДокументации);
	СрокИПорядокОплатыЗаПредоставлениеДокументации =
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			ЗакупочнаяПроцедура.СрокИПорядокОплатыЗаПредоставлениеДокументации);
			
	Если ПустаяСтрока(ПорядокПредоставленияДокументации) Тогда
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ПоляОписанияТранзакции, Нстр("ru = 'Не заполнен порядок предоставления документации! '"));
		Возврат Неопределено;
	КонецЕсли;
	Если ПустаяСтрока(СрокИПорядокОплатыЗаПредоставлениеДокументации) Тогда
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ПоляОписанияТранзакции, Нстр("ru = 'Не заполнен порядок оплаты за предоставления документации! '"));
		Возврат Неопределено;
	КонецЕсли;
	documentationDelivery = ЕИСФабрикаXDTO.Создать(T_documentationDelivery);
	T_docDeliveryPaymentType = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_documentationDelivery, "payment");
	documentationDelivery.deliveryStartDateTime = ЗакупочнаяПроцедура.ДатаНачалаПредоставленияРазьясненийИзвещенияДокументации;
	documentationDelivery.deliveryEndDateTime = ЗакупочнаяПроцедура.ДатаОкончанияПредоставленияРазьясненийИзвещенияДокументации;
	documentationDelivery.place = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(ЗакупочнаяПроцедура.АдресПредоставленияДокументации);
	documentationDelivery.procedure = ПорядокПредоставленияДокументации;
	// Плата за предоставление документации
	documentationDelivery.payment = ЕИСФабрикаXDTO.Создать(T_docDeliveryPaymentType);
	currency = ПолучитьОписаниеВалюты(

				ЕИСФабрикаXDTO, 
				ПоляОписанияТранзакции,
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
					T_docDeliveryPaymentType,
					"currency"), 
				ЗакупочнаяПроцедура.ВалютаДокумента);
	Если currency = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	documentationDelivery.payment.currency = currency;
	documentationDelivery.payment.sum = ЗакупочнаяПроцедура.РазмерОплатыЗаПредоставлениеДокументации;
	documentationDelivery.payment.procedure = СрокИПорядокОплатыЗаПредоставлениеДокументации;
	Возврат documentationDelivery;
КонецФункции

&НаСервере
Функция ПолучитьplacingProcedure(ЕИСФабрикаXDTO, T_placingProcedure, ЗакупочнаяПроцедура, ПоляОписанияТранзакции)
		Если ПустаяСтрока(ЗакупочнаяПроцедура.АдресПодведенияИтогов) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ПоляОписанияТранзакции, Нстр("ru = 'Не заполнен адрес подведения итогов! '"));
			Возврат Неопределено;
		КонецЕсли;
		Если ПустаяСтрока(ЗакупочнаяПроцедура.АдресРассмотренияЗаявок) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ПоляОписанияТранзакции, Нстр("ru = 'Не заполнен адрес рассмотрения заявок! '"));
			Возврат Неопределено;
		КонецЕсли;
		placingProcedure = ЕИСФабрикаXDTO.Создать(T_placingProcedure);
		placingProcedure.examinationPlace = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ЗакупочнаяПроцедура.АдресРассмотренияЗаявок);
		placingProcedure.examinationDateTime = ЗакупочнаяПроцедура.ДатаНачалаРассмотренияЗаявок;
		Если ЗакупочнаяПроцедура.СпособВыбораПоставщика = Перечисления.СпособыВыбораПоставщика.ЗапросПредложений Тогда
			Стадия = Справочники.СтадииМероприятий.ЗапросПредложений_ПодведениеИтогов;
		ИначеЕсли  ЗакупочнаяПроцедура.СпособВыбораПоставщика = Перечисления.СпособыВыбораПоставщика.Конкурс Тогда	
			Стадия = Справочники.СтадииМероприятий.Конкурс_ПодведениеИтогов;
		ИначеЕсли  ЗакупочнаяПроцедура.СпособВыбораПоставщика = Перечисления.СпособыВыбораПоставщика.КонкурентныеПереговоры Тогда	
			Стадия = Справочники.СтадииМероприятий.КонкурентныеПереговоры_ПодведениеИтогов;
		ИначеЕсли  ЗакупочнаяПроцедура.СпособВыбораПоставщика = Перечисления.СпособыВыбораПоставщика.Аукцион Тогда	
			Стадия = Справочники.СтадииМероприятий.Аукцион_ПодведениеИтогов;
		КонецЕсли;
		Мероприятие = Документы.Мероприятие.ПолучитьПоследнееМероприятиеПоКонтексту(ЗакупочнаяПроцедура,  Перечисления.ВидыМероприятий.ЗакупочнаяПроцедура);
		
		ДанныеСтадии = Документы.Мероприятие.ПолучитьДанныеСтадииМероприятия(Мероприятие, Стадия);
		placingProcedure.summingupDateTime = ДанныеСтадии.ДатаОкончания;//ЗакупочнаяПроцедура.ДатаПодведенияИтогов;
		placingProcedure.summingupPlace = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ЗакупочнаяПроцедура.АдресПодведенияИтогов);
		Возврат placingProcedure;
КонецФункции

&НаСервере
Функция ПолучитьlotData(ЭТП,
						ЕИСФабрикаXDTO, 
						T_lotData, 
						Знач МестоПоставки, 
						Лот, 
						ПоляОписанияТранзакции)
	lotData = ЕИСФабрикаXDTO.Создать(T_lotData);
	lotData.subject = 
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			Лот.ПредметДоговора);
	currency = ПолучитьОписаниеВалюты(

		ЕИСФабрикаXDTO,
		ПоляОписанияТранзакции,
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_lotData, "currency"),
		Лот.ВалютаДокумента);
	Если currency = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;                        
	lotData.currency = currency;
	lotData.initialSum = Лот.СуммаЛота;
	Если НЕ ПустаяСтрока(Лот.ПорядокФормированияЦеныДоговора) Тогда
		lotData.orderPricing =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				Лот.ПорядокФормированияЦеныДоговора);
		//lotData.priceFormula =lotData.orderPricing;   //изменения
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(МестоПоставки)
				И ЗначениеЗаполнено(Лот.МестоПоставки) Тогда
		МестоПоставки = Лот.МестоПоставки;
	КонецЕсли;
	Если ЗначениеЗаполнено(МестоПоставки) Тогда
		lotData.deliveryPlace = ПолучитьDeliveryPlace(
			ЕИСФабрикаXDTO,
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
					T_lotData, "deliveryPlace"),
			МестоПоставки);
	КонецЕсли;
	ПозицииЛота = ПолучитьПозицииЛотаДляЗакупки(
		ЭТП,
		ЕИСФабрикаXDTO,
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_lotData, "lotItems"),
		Лот,
		ПоляОписанияТранзакции);
	Если ПозицииЛота <> Неопределено Тогда
		lotData.lotItems = ПозицииЛота;
	КонецЕсли;
	ЗакупочнаяПроцедура = Лот.Владелец;
	lotData.forSmallOrMiddle =
		ЗакупочнаяПроцедура.ПриоритетУчастияМалогоИСреднегоПредпринимательства;
	lotData.excludePurchaseFromPlan =
		ЗакупочнаяПроцедура.НеВключенВПланЗакупкиЧасть15Ст4ФЗ223;
	lotData.subcontractorsRequirement =
		ЗакупочнаяПроцедура.ПривлечениеМалогоИСреднегоПредпринимательстваКакПодрядчиков;
	lotData.ignoredPurchase = ЗакупочнаяПроцедура.НеУчитыватьПриРасчетеДолиЗакупокУСМП;
	КатегорияЗакупкиДляИсключенияИзГОЗ =
		ЗакупочнаяПроцедура.КатегорияЗакупкиДляИсключенияИзГОЗ;
	Если ЗакупочнаяПроцедура.НеУчитыватьПриРасчетеДолиЗакупокУСМП
			И ЗначениеЗаполнено(КатегорияЗакупкиДляИсключенияИзГОЗ) Тогда
		lotData.purchaseCategory =
			ЕИСФабрикаXDTO.Создать(
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
					T_lotData,
					"purchaseCategory"));
		lotData.purchaseCategory.code = КатегорияЗакупкиДляИсключенияИзГОЗ.КодВЕИС;
		lotData.purchaseCategory.name = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				КатегорияЗакупкиДляИсключенияИзГОЗ.Наименование);
	КонецЕсли;
			
	//lotData.startingContractPriceRub = Лот.СуммаЛота;//изменения
	//lotData.maxContractPriceRub = Лот.СуммаЛота;//изменения
	//lotData.maxContractPrice = Лот.СуммаЛота;//изменения
			
	Возврат lotData;
КонецФункции

&НаСервере
Функция ПолучитьJointLotData(ЭТП,
						ЕИСФабрикаXDTO, 
						T_jointLotData, 
						Знач МестоПоставки, 
						Лот,
						ОписаниеЛотаВПлане,
						ПоляОписанияТранзакции)
	T_jointLotCustomers = 
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_jointLotData, "lotCustomers");
	jointLotData = ЕИСФабрикаXDTO.Создать(T_jointLotData);
	jointLotData.jointLot = Истина;
	lotCustomers = ПолучитьLotCustomers(
		ЭТП,
		ЕИСФабрикаXDTO,
		T_jointLotCustomers,
		МестоПоставки,
		Лот,
		ОписаниеЛотаВПлане,
		ПоляОписанияТранзакции);
	Если lotCustomers = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	jointLotData.lotCustomers = lotCustomers;
	Возврат jointLotData;
КонецФункции

&НаСервере
Функция ПолучитьLotCustomers(ЭТП,
						ЕИСФабрикаXDTO, 
						T_lotCustomers, 
						Знач МестоПоставки, 
						Лот,
						ОписаниеЛотаВПлане,
						ПоляОписанияТранзакции)
	T_lotCustomer =
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_lotCustomers, "lotCustomer");
	lotCustomers = ЕИСФабрикаXDTO.Создать(T_lotCustomers);
	lotCustomer = ПолучитьLotCustomerДляЛота(
		ЭТП,
		ЕИСФабрикаXDTO,
		T_lotCustomer,
		МестоПоставки,
		Лот,
		ОписаниеЛотаВПлане,
		ПоляОписанияТранзакции);
	Если lotCustomer = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	lotCustomers.lotCustomer.Добавить(lotCustomer);
	Возврат lotCustomers;
КонецФункции

&НаСервере
Функция ПолучитьLotCustomerДляЛота(ЭТП,
						ЕИСФабрикаXDTO, 
						T_lotCustomer, 
						Знач МестоПоставки, 
						Лот,
						ОписаниеЛотаВПлане,
						ПоляОписанияТранзакции)
	T_lotPlanInfo = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_lotCustomer, "lotPlanInfo");
	T_lotCustomerData = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_lotCustomer, "lotCustomerData");
	lotCustomer = ЕИСФабрикаXDTO.Создать(T_lotCustomer);
	lotCustomer.deliveryPlaceIndication =
		Получить_deliveryPlaceIndicationДляЛота(Лот);
	lotCustomer.lotCustomerEditEnabled = Истина;
	lotCustomer.lotCustomerData = ПолучитьLotCustomerData(
		ЭТП,
		ЕИСФабрикаXDTO,
		T_lotCustomerData,
		МестоПоставки,
		Лот,
		ПоляОписанияТранзакции);
	Если НЕ lotCustomer.lotCustomerData.notInLaw223 Тогда
		lotPlanInfo = ПолучитьlotPlanInfo(
			ЕИСФабрикаXDTO,
			T_lotPlanInfo,
			Лот,
			ОписаниеЛотаВПлане,
			ПоляОписанияТранзакции);
		Если lotPlanInfo = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		lotCustomer.lotPlanInfo = lotPlanInfo;
	КонецЕсли;
	ОрганизацияЛота = Лот.ОрганизацияДляЗаключенияДоговора;
	lotCustomer.nonResident = ОрганизацияЛота.ИностранныйНалоговыйРезидент;
	lotCustomer.tax = ОрганизацияЛота.ИностранныйНалоговыйРезидент;
	Если НЕ ОрганизацияЛота.ИностранныйНалоговыйРезидент Тогда
		customerInfo = ПолучитьCustomerMainInfoType(
			ЕИСФабрикаXDTO, 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_lotCustomer, "customerInfo"), 
			ОрганизацияЛота, 
			ПоляОписанияТранзакции);
		Если ПоляОписанияТранзакции.ОшибкаОбменаСЭТП Тогда
			Возврат Неопределено;
		КонецЕсли;
		lotCustomer.customerInfo = customerInfo;
	Иначе
		nonResidentInfo = ПолучитьОписаниеNonResidentCusomerInfo(
			ЕИСФабрикаXDTO, 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_lotCustomer, "nonResidentInfo"), 
			ОрганизацияЛота, 
			ПоляОписанияТранзакции);
		Если ПоляОписанияТранзакции.ОшибкаОбменаСЭТП Тогда
			Возврат Неопределено;
		КонецЕсли;
		lotCustomer.nonResidentInfo = nonResidentInfo;
	КонецЕсли;
	Возврат lotCustomer;
КонецФункции

&НаСервере
Функция ПолучитьLotCustomerData(ЭТП,
						ЕИСФабрикаXDTO, 
						T_lotCustomerData, 
						Знач МестоПоставки, 
						Лот, 
						ПоляОписанияТранзакции)
	lotCustomerData = ЕИСФабрикаXDTO.Создать(T_lotCustomerData);
	currency = ПолучитьОписаниеВалюты(

		ЕИСФабрикаXDTO,
		ПоляОписанияТранзакции,
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_lotCustomerData, "currency"),
		Лот.ВалютаДокумента);
	Если currency = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	lotCustomerData.currency = currency;
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если Лот.ВалютаДокумента <> ВалютаРеглУчета Тогда
		lotCustomerData.exchangeInfo = ЕИСФабрикаXDTO.Создать(
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_lotCustomerData, "exchangeInfo"));
		ДатаКурса = Лот.Владелец.ДатаНачалаПодготовкиЗакупки;
		КоэффициентПересчетаВалюты = РаботаСКурсамиВалют.ПересчитатьВВалюту(
				1, Лот.ВалютаДокумента, ВалютаРеглУчета, ДатаКурса);
		lotCustomerData.exchangeInfo.exchangeRate =
			Окр(КоэффициентПересчетаВалюты, 2);
		lotCustomerData.exchangeInfo.exchangeRateDate = ДатаКурса;
		НМЦВРублях = Лот.Сумма * КоэффициентПересчетаВалюты;
	КонецЕсли;
	lotCustomerData.initialSum = Лот.СуммаЛота;
	Если Лот.ВалютаДокумента <> ВалютаРеглУчета Тогда
		lotCustomerData.startingContractPriceRub = НМЦВРублях;
	КонецЕсли;
	lotCustomerData.excludePurchaseFromPlan =
		Лот.Владелец.НеВключенВПланЗакупкиЧасть15Ст4ФЗ223;
	Если НЕ ПустаяСтрока(Лот.ПорядокФормированияЦеныДоговора) Тогда
		lotCustomerData.orderPricing =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				Лот.ПорядокФормированияЦеныДоговора);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(МестоПоставки)
				И ЗначениеЗаполнено(Лот.МестоПоставки) Тогда
		МестоПоставки = Лот.МестоПоставки;
	КонецЕсли;
	Если ЗначениеЗаполнено(МестоПоставки) Тогда
		lotCustomerData.deliveryPlace = ПолучитьDeliveryPlace(
			ЕИСФабрикаXDTO,
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
					T_lotCustomerData, "deliveryPlace"),
			МестоПоставки);
	КонецЕсли;
	ПозицииЛота = ПолучитьПозицииЛотаДляЗакупки(
		ЭТП,
		ЕИСФабрикаXDTO,
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
									T_lotCustomerData, "lotItems"),
		Лот,
		ПоляОписанияТранзакции);
	Если ПозицииЛота <> Неопределено Тогда
		lotCustomerData.lotItems = ПозицииЛота;
	КонецЕсли;
	lotCustomerData.notInLaw223 = 
		НЕ Лот.ОрганизацияДляЗаключенияДоговора.ЗакупкаПоФЗ223;
	Возврат lotCustomerData;
КонецФункции

&НаСервере
Функция ПолучитьlotPlanInfo(ЕИСФабрикаXDTO, 
							T_lotPlanInfo, 
							ЗакупочнаяПроцедура, 
							ОписаниеЛотаВПлане, 
							ПоляОписанияТранзакции)
	ОписаниеПланаЗакупкиДляЛота = ЕИСФабрикаXDTO.Создать(T_lotPlanInfo);
	ПрограммаЗакупок = ОписаниеЛотаВПлане.ПрограммаЗакупок;
	Если НЕ ЗначениеЗаполнено(ПрограммаЗакупок) Тогда
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции,
				НСтр("ru='Не удалось определить программу закупки для закупочной процедуры! '"));
		Возврат Неопределено;
	КонецЕсли;
	Если НЕ ИнтеграцияЦУЗсЭТПСерверУХ.КорректныйНомерРегистрацииЕИС(ПрограммаЗакупок) Тогда
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции,
				НСтр("ru='Не заполнен (или заполнен неверно) регистрационный номер программы закупки в ЕИС! '"));
		Возврат Неопределено;
	КонецЕсли;
	ОписаниеПланаЗакупкиДляЛота.planRegistrationNumber = ПрограммаЗакупок.РегистрационныйНомер;
	ОписаниеПланаЗакупкиДляЛота.planGuid = ОписаниеЛотаВПлане.УИД_Плана;
	ОписаниеПланаЗакупкиДляЛота.positionNumber = ОписаниеЛотаВПлане.НомерЛотаВПлане;
	КодТипаПозиции = 
		?(ЗакупочнаяПроцедура.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств,
			"INNOVATION",
			"COMMODITY");
	ОписаниеПланаЗакупкиДляЛота.lotPlanPosition =
		ЕИСФабрикаXDTO.Создать(
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_lotPlanInfo, "lotPlanPosition"),
			КодТипаПозиции);
	ОписаниеПланаЗакупкиДляЛота.positionGuid = ОписаниеЛотаВПлане.УИД_ЛотаВПлане;
	Возврат ОписаниеПланаЗакупкиДляЛота;
КонецФункции

&НаСервере
Функция ПолучитьОписаниеNonResidentCusomerInfo(ЕИСФабрикаXDTO,
												T_nonResidentCusomerInfo, 
												Организация, 
												ПоляОписанияТранзакции)
	ОписаниеКонтрагента = ЕИСФабрикаXDTO.Создать(T_nonResidentCusomerInfo);
	ОписаниеКонтрагента.name =
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			Организация.Наименование);
	Если ПустаяСтрока(Организация.НалоговыйНомер) Тогда
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(
			ПоляОписанияТранзакции,
			СтрШаблон(Нстр("ru = 'У контрагента ""%1"" не заполнен налоговый номер в стране регистрации!'"), 
				Организация.Наименование), 
			"ЕИС");
		Возврат Неопределено;
	КонецЕсли;
	ОписаниеКонтрагента.code = СокрЛП(Организация.НалоговыйНомер);
	Если ЗначениеЗаполнено(Организация.СтранаРегистрации) Тогда
		ОписаниеКонтрагента.country = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
					T_nonResidentCusomerInfo, "country");
		ОписаниеКонтрагента.country.digitalCode =
					Организация.СтранаРегистрации.Код;
	КонецЕсли;
	Возврат ОписаниеКонтрагента;
КонецФункции

			
#КонецОбласти


#Область ПолучениеОписанияПротоколов


&НаСервере
Функция ПолучитьТекстПротоколаВыбораПобедителя(ОписаниеОбмена, ЕИСФабрикаXDTO)
	ЭТП = ОписаниеОбмена.ЭТП;
	ПоляОписанияТранзакции = ОписаниеОбмена.ПоляОписанияТранзакции;
	ПротоколВыбораПобедителей = ОписаниеОбмена.ОбъектВыгрузки;
	ТекстОписания = Неопределено;
	Попытка
		ТекстОшибки = ПроверитьДокументПротокол(ПротоколВыбораПобедителей);
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции,
				ТекстОшибки + " ");
			Возврат Неопределено;
		КонецЕсли;
		ЗакупочнаяПроцедура = ПротоколВыбораПобедителей.ЗакупочнаяПроцедура;
		ПространствоИмен = "http://zakupki.gov.ru/223fz/purchase/1";
		КорневыеОбъекты = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьКорневыеОбъектыПространстваИмен(
				ЕИСФабрикаXDTO, ПространствоИмен);
		// Типы данных веб-сервиса
		ИменаТипов = ИменаТиповПротоколаВыбораПобедителя(ПротоколВыбораПобедителей);
		ИмяТипаПротокола = ИменаТипов.ИмяТипаПротокола;
		ИмяРеквизитаПротокола = ИменаТипов.ИмяРеквизитаПротокола;
		T_purchaseProtocol =
			КорневыеОбъекты.Получить(ИмяТипаПротокола).Тип;
		T_header = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_purchaseProtocol, "header");
		T_body = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_purchaseProtocol, "body");
		T_purchaseProtocolItem = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_body, "item");
		T_purchaseProtocolData = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_purchaseProtocolItem, ИмяРеквизитаПротокола);
		// Объект XDTO Извещение об отмене закупки
		ПакетПротокола = ЕИСФабрикаXDTO.Создать(T_purchaseProtocol);
		// Заголовок пакета.
 		ПакетПротокола.header = ЕИСФабрикаXDTO.Создать(T_header);
 		ПакетПротокола.header.guid = ПоляОписанияТранзакции.КлючСообщения;
 		ПакетПротокола.header.createDateTime = ТекущаяДата();
		// Тело пакета
		ПакетПротокола.body = ЕИСФабрикаXDTO.Создать(T_body);
		ПакетПротокола.body.item = ЕИСФабрикаXDTO.Создать(T_purchaseProtocolItem);
		ПакетПротокола.body.item.guid = Строка(Новый УникальныйИдентификатор);
		// Общие данные для всех протоколов
		ДанныеПротокола = ПолучитьpurchaseProtocolОбщаяЧасть(
			ЭТП,
			ЕИСФабрикаXDTO, 
			ПротоколВыбораПобедителей, 
			ЗакупочнаяПроцедура, 
			ПоляОписанияТранзакции, 
			T_purchaseProtocolData);
		Если ДанныеПротокола = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ПакетПротокола.body.item[ИмяРеквизитаПротокола] = ДанныеПротокола;
		ТекстФункцииЗаполненияСпецЧасти =
			"ДанныеПротокола = ЗаполнитьДанные_" + ИмяТипаПротокола + "(
			|		ЭТП,
			|		ЕИСФабрикаXDTO, 
			|		ПротоколВыбораПобедителей, 
			|		ЗакупочнаяПроцедура,
			|		ДанныеПротокола,
			|		ПоляОписанияТранзакции, 
			|		T_purchaseProtocolData);";
		Выполнить(ТекстФункцииЗаполненияСпецЧасти);
		Если ДанныеПротокола = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ПакетПротокола.Проверить();	
		ТекстОписания =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьТекстОписанияОбъекта(
				ЕИСФабрикаXDTO, ПакетПротокола, ИмяТипаПротокола);
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки =
			СтрШаблон(Нстр("ru = 'Заполнение данных протокола выбора победителей закончилось ошибкой!%1%2'"), 
				Символы.ПС, ПодробноеПредставлениеОшибки(Инфо));
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(
			ПоляОписанияТранзакции, ТекстОшибки, "ЕИС");
		Возврат Неопределено;
	КонецПопытки;
	Возврат ТекстОписания;
КонецФункции

&НаСервере
Функция ПроверитьДокументПротокол(ДокументПротокол)
	Если НЕ ЗначениеЗаполнено(ДокументПротокол) Тогда
		Возврат НСтр("ru='Не указан протокол! '");
	КонецЕсли;
	ТипПротокола = ТипЗнч(ДокументПротокол);
	мОшибок = Новый Массив;
	Если НЕ ДокументПротокол.Проведен Тогда
		мОшибок.Добавить(НСтр("ru='Протокол должен быть проведен! '"));
	КонецЕсли;
	ЗакупочнаяПроцедура = ДокументПротокол.ЗакупочнаяПроцедура;
	Если НЕ ЗначениеЗаполнено(ЗакупочнаяПроцедура) Тогда
		мОшибок.Добавить(НСтр(
			"ru='В протоколе не заполнена закупочная процедура! '"));
	КонецЕсли;
	Если ТипПротокола = Тип("ДокументСсылка.ПротоколВыбораПобедителей") Тогда
		Если Документы.ПротоколВыбораПобедителей.ДляЕИСТребуетсяТипПротокола(
													ДокументПротокол)
				И НЕ ЗначениеЗаполнено(ДокументПротокол.ТипПротоколаЕИС) Тогда
			мОшибок.Добавить(НСтр(
				"ru='В документе не заполнен тип протокола ЕИС! '"));
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДокументПротокол.ДатаПодписания) Тогда
		мОшибок.Добавить(НСтр(
			"ru='У протокола не указана дата подписания! '"));
	КонецЕсли;
    Если НЕ ЗначениеЗаполнено(ДокументПротокол.МестоПроведенияПроцедуры) Тогда
		мОшибок.Добавить(НСтр(
			"ru='У протокола не указано место проведения! '"));
	КонецЕсли;
	Если НЕ ИнтеграцияЦУЗсЭТПСерверУХ.КорректныйНомерРегистрацииЕИС(
													ЗакупочнаяПроцедура) Тогда
		мОшибок.Добавить(НСтр("ru='Закупка не размещена в ЕИС! '"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЗакупочнаяПроцедура.ОрганизаторЗакупки) Тогда
		мОшибок.Добавить(НСтр(
			"ru='В закупке не заполнена организация организатор закупки! '"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЗакупочнаяПроцедура.ОрганизацияДляЗаключенияДоговора)
				И НЕ ЗакупочнаяПроцедура.СовместнаяЗакупка Тогда
		мОшибок.Добавить(НСтр(
			"ru='В закупке не заполнена организация заказчик! '"));
	КонецЕсли;
	Возврат СтрСоединить(мОшибок, Символы.ПС);
КонецФункции

// Возвращает имя типа протокола выбора победителя.
//
// Параметры:
//  ПротоколВыбораПобедителей - ДокументСсылка.ПротоколВыбораПобедителей.
// 
// Возвращаемое значение:
//   - Строка - имя типа протокола.
//
&НаСервере
Функция ИменаТиповПротоколаВыбораПобедителя(ПротоколВыбораПобедителей)
	ИменаТипов = Новый Структура();
	ИменаТипов.Вставить("ИмяТипаПротокола", "purchaseProtocol");
	ИменаТипов.Вставить("ИмяРеквизитаПротокола", "purchaseProtocolData");
	ЗакупочнаяПроцедура = ПротоколВыбораПобедителей.ЗакупочнаяПроцедура;
	СпособВыбораПоставщика = ЗакупочнаяПроцедура.СпособВыбораПоставщика;
	Если СпособВыбораПоставщика = 
			Перечисления.СпособыВыбораПоставщика.ЗакупкаУЕдинственногоПоставщика Тогда
		ИменаТипов.ИмяТипаПротокола = "purchaseProtocolPAEP";
		ИменаТипов.ИмяРеквизитаПротокола = "purchaseProtocolPAEPData";
	ИначеЕсли СпособВыбораПоставщика = 
			Перечисления.СпособыВыбораПоставщика.Конкурс Тогда
		ИменаТипов.ИмяТипаПротокола = "purchaseProtocolOSZ";
		ИменаТипов.ИмяРеквизитаПротокола = "purchaseProtocolOSZData";
	ИначеЕсли СпособВыбораПоставщика = 
				Перечисления.СпособыВыбораПоставщика.Аукцион
			ИЛИ СпособВыбораПоставщика = 
				Перечисления.СпособыВыбораПоставщика.Редукцион Тогда
		Если ЗакупочнаяПроцедура.ВЭлектроннойФорме Тогда
			ИменаТипов.ИмяТипаПротокола = "purchaseProtocolPAAE";
			ИменаТипов.ИмяРеквизитаПротокола = "purchaseProtocolPAAEData";
		Иначе
			ИменаТипов.ИмяТипаПротокола = "purchaseProtocolPAOA";
			ИменаТипов.ИмяРеквизитаПротокола = "purchaseProtocolPAOAData";
		КонецЕсли;
	ИначеЕсли СпособВыбораПоставщика = 
			Перечисления.СпособыВыбораПоставщика.ЗапросКотировок Тогда
		ИменаТипов.ИмяТипаПротокола = "purchaseProtocolZK";
		ИменаТипов.ИмяРеквизитаПротокола = "purchaseProtocolZKData";
	// По умолчанию для:
	//	Перечисления.СпособыВыбораПоставщика.ЗапросПредложений
	//	Перечисления.СпособыВыбораПоставщика.КонкурентныеПереговоры
	КонецЕсли;
	Возврат ИменаТипов;
КонецФункции

&НаСервере
Функция ПолучитьpurchaseProtocolОбщаяЧасть(
								ЭТП,
								ЕИСФабрикаXDTO, 
								ДокументПротокол, 
								ЗакупочнаяПроцедура, 
								ПоляОписанияТранзакции, 
								T_purchaseProtocolData)
	ДанныеПротокола = Неопределено;
	Попытка
		// Типы данных веб-сервиса
		T_customer = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_purchaseProtocolData, "customer");
		ОписаниеВерсииПротокола = 
			ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьВерсиюОбъектаДляЕИС(ДокументПротокол);
		УИДПротокола = ОписаниеВерсииПротокола.ГУИДВерсии;
		СохранитьУИДОбъекта(ДокументПротокол,, УИДПротокола);
		ДанныеПротокола = ЕИСФабрикаXDTO.Создать(T_purchaseProtocolData);
		ДанныеПротокола.guid = УИДПротокола;
		ДанныеПротокола.createDateTime = ДокументПротокол.Дата;
		//ДанныеОтмены.urlOOS
		ДанныеПротокола.urlVSRZ = "http://zakupki.gov.ru";
		ДанныеЗакупки = ПолучитьОписаниеЗакупки(
							ЕИСФабрикаXDTO, 
							T_purchaseProtocolData, 
							ЗакупочнаяПроцедура,
							ПоляОписанияТранзакции);
		Если ПоляОписанияТранзакции.ОшибкаОбменаСЭТП Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДанныеПротокола.purchaseInfo = ДанныеЗакупки;
		Если ИнтеграцияЦУЗсЭТПСерверУХ.КорректныйНомерРегистрацииЕИС(
						ДокументПротокол) Тогда
			ДанныеПротокола.registrationNumber = ДокументПротокол.РегистрационныйНомерЕИС;
		КонецЕсли;
		placer = ПолучитьОписаниеОрганизации(
							ЕИСФабрикаXDTO, 
							T_customer, 
							ЗакупочнаяПроцедура.ОрганизаторЗакупки,
							ПоляОписанияТранзакции);
		Если ПоляОписанияТранзакции.ОшибкаОбменаСЭТП Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДанныеПротокола.placer = placer;
		customer = ПолучитьОписаниеОрганизации(
						ЕИСФабрикаXDTO,
						T_customer,
						ЗакупочнаяПроцедура.ОрганизацияДляЗаключенияДоговора,
						ПоляОписанияТранзакции);
		Если ПоляОписанияТранзакции.ОшибкаОбменаСЭТП Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДанныеПротокола.customer = customer;
		Если ЗначениеЗаполнено(ДокументПротокол.Комментарий) Тогда
			ДанныеПротокола.additionalInfo =
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
					ДокументПротокол.Комментарий);
		КонецЕсли;
		РезультатОтмены = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьРезультатОтменыПротокола(ДокументПротокол);
		ДанныеПротокола.missedContest = РезультатОтмены.Отменен;
		Если РезультатОтмены.Отменен Тогда
			ДанныеПротокола.missedReason =
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
					РезультатОтмены.ПричинаОтмены);
		КонецЕсли;
		//ДанныеПротокола.publicationDateTime
		//ДанныеПротокола.status = "F";
		Если ОписаниеВерсииПротокола.НомерВерсии > 0 Тогда
			ДанныеПротокола.version =
				ОписаниеВерсииПротокола.НомерВерсии;
			ДанныеПротокола.modificationDescription = 
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
					ОписаниеВерсииПротокола.ОбоснованиеИзменений);
		КонецЕсли;
		Вложения = СоздатьВложениеФайлов(
						ЭТП, 
						ЕИСФабрикаXDTO, 
						ДокументПротокол, 
						T_purchaseProtocolData);
		Если Вложения <> Неопределено Тогда
			ДанныеПротокола.attachments = Вложения;
		КонецЕсли;
		//ДанныеПротокола.allocationReference
		Возврат ДанныеПротокола;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = 
			СтрШаблон(Нстр("ru = 'Заполнение данных протокола закончилось ошибкой!%1%2'"), Символы.ПС, 
				ПодробноеПредставлениеОшибки(Инфо));
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(
			ПоляОписанияТранзакции, ТекстОшибки, "ЕИС");
	КонецПопытки;
	Возврат Неопределено;
КонецФункции

// Спец. часть протокола закупки с прочим способом выбора поставщика.
//
&НаСервере
Функция ЗаполнитьДанные_purchaseProtocol(ЭТП,
										ЕИСФабрикаXDTO, 
										ПротоколВыбораПобедителей, 
										ЗакупочнаяПроцедура,
										ДанныеПротокола,
										ПоляОписанияТранзакции, 
										T_purchaseProtocolData)
	T_lotApplicationsList = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_purchaseProtocolData, "lotApplicationsList");
	ДанныеПротокола.type = ПротоколВыбораПобедителей.ТипПротоколаЕИС.КодВЕИС;
	ДанныеПротокола.typeName =
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			ПротоколВыбораПобедителей.ТипПротоколаЕИС.ПолноеНаименование);
	//ДанныеПротокола.targetPhaseCode = 
	ДанныеПротокола.procedureDate = ПротоколВыбораПобедителей.Дата;
	ДанныеПротокола.procedurePlace =
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			ПротоколВыбораПобедителей.МестоПроведенияПроцедуры);
	ОписаниеПредложенийУчастников =
		ЗаполнитьpurchaseProtocol_lotApplicationsList(
								ЭТП, 
								ЕИСФабрикаXDTO, 
								ПротоколВыбораПобедителей, 
								ЗакупочнаяПроцедура, 
								ПоляОписанияТранзакции, 
								T_lotApplicationsList);
	Если ОписаниеПредложенийУчастников = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ДанныеПротокола.lotApplicationsList = ОписаниеПредложенийУчастников;
	ДанныеПротокола.protocolSignDate =
		ПротоколВыбораПобедителей.ДатаПодписания;
	Возврат ДанныеПротокола;
КонецФункции

&НаСервере
Функция ПолучитьРазмещеннуюВЕИСВерсиюРодителя(ДокументПротокол)
	РодительДокумента = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьРодителяПротокола(
		ДокументПротокол);
	Возврат ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьВерсиюОбъектаДляЕИС(
				РодительДокумента,
				Истина);
КонецФункции
	
// Спец. часть протокола закупки у единственного поставщика.
//
&НаСервере
Функция ЗаполнитьДанные_purchaseProtocolPAEP(ЭТП,
										ЕИСФабрикаXDTO, 
										ПротоколВыбораПобедителей, 
										ЗакупочнаяПроцедура,
										ДанныеПротокола,
										ПоляОписанияТранзакции, 
										T_purchaseProtocolData)
	T_lotApplicationsList = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_purchaseProtocolData, "lotApplicationsList");
	ДанныеПротокола.protocolSignDate =
		ПротоколВыбораПобедителей.ДатаПодписания;
	ОписаниеПредложенийУчастников =
		ЗаполнитьpurchaseProtocol_lotApplicationsListPAEP(
								ЭТП, 
								ЕИСФабрикаXDTO, 
								ПротоколВыбораПобедителей, 
								ЗакупочнаяПроцедура, 
								ПоляОписанияТранзакции, 
								T_lotApplicationsList);
	Если ОписаниеПредложенийУчастников = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ДанныеПротокола.lotApplicationsList = ОписаниеПредложенийУчастников;
	Возврат ДанныеПротокола;
КонецФункции

// Лоты протокола закупки с прочим способом выбора поставщика.
&НаСервере
Функция ЗаполнитьpurchaseProtocol_lotApplicationsList(
									ЭТП, 
									ЕИСФабрикаXDTO, 
									ПротоколВыбораПобедителей, 
									ЗакупочнаяПроцедура, 
									ПоляОписанияТранзакции, 
									T_lotApplicationsList)
	ОписаниеПредложенийУчастников = Неопределено;
	Попытка
		T_protocolLotApplications =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_lotApplicationsList, "protocolLotApplications");
		ОписаниеПредложенийУчастников =
			ЕИСФабрикаXDTO.Создать(T_lotApplicationsList);
		ВыборкаЛотов = 
		ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьВыборокуЛотовЗакупочнойПроцедуры(
			ЗакупочнаяПроцедура);
		Пока ВыборкаЛотов.Следующий() Цикл
			ОписаниеПредложенийЛота = 
				Получить_purchaseProtocol_lotApplications(
					ЭТП, 
					ЕИСФабрикаXDTO, 
					ПротоколВыбораПобедителей, 
					ВыборкаЛотов.Лот,
					ПоляОписанияТранзакции, 
					T_protocolLotApplications);
			Если ОписаниеПредложенийЛота = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			ОписаниеПредложенийУчастников.protocolLotApplications.Добавить(
				ОписаниеПредложенийЛота);
		КонецЦикла;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = 
			СтрШаблон(Нстр("ru = 'Заполнение данных протокола закончилось ошибкой!%1%2'"), Символы.ПС, 
				ПодробноеПредставлениеОшибки(Инфо));
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(
			ПоляОписанияТранзакции, ТекстОшибки, "ЕИС");
		Возврат Неопределено;
	КонецПопытки;
	Возврат ОписаниеПредложенийЛота;	
КонецФункции

// Лот протокола закупки с прочим способом выбора поставщика.
&НаСервере
Функция Получить_purchaseProtocol_lotApplications(
									ЭТП, 
									ЕИСФабрикаXDTO, 
									ПротоколВыбораПобедителей, 
									Лот,
									ПоляОписанияТранзакции, 
									T_protocolLotApplications)
	T_lot = 
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_protocolLotApplications, "lot");
	T_currency = 
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_lot, "currency");
	ОписаниеРазмещеннойВерсииЗакупочнойПроцедуры =
		ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьВерсиюОбъектаДляЕИС(Лот, Истина);
	УИДЗакупочнойПроцедуры = ОписаниеРазмещеннойВерсииЗакупочнойПроцедуры.ГУИДВерсии;
	ОписаниеПредложенийЛота =
		ЕИСФабрикаXDTO.Создать(T_protocolLotApplications);
	ОписаниеПредложенийЛота.lot = ЕИСФабрикаXDTO.Создать(T_lot);
	ОписаниеПредложенийЛота.lot.guid = УИДЗакупочнойПроцедуры;
	ОписаниеПредложенийЛота.lot.ordinalNumber = Лот.Код;
	ОписаниеПредложенийЛота.lot.subject =
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			Лот.ПредметДоговора);
	currency =
		ПолучитьОписаниеВалюты(

			ЕИСФабрикаXDTO,
			ПоляОписанияТранзакции,
			T_currency, 
			Лот.ВалютаДокумента);
	Если currency = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ОписаниеПредложенийЛота.lot.currency = currency;
	ОписаниеПредложенийЛота.lot.initialSum = Лот.СуммаЛота;
	//ОписаниеПредложенийЛота.criteria
	ЗаполнитьЗаявкиУчастниковПоЛоту(
		ЭТП,
		ЕИСФабрикаXDTO,
		ОписаниеПредложенийЛота,
		ПротоколВыбораПобедителей,
		"ЗаполнитьИнформациюОПредложенииУчастника",
		T_protocolLotApplications,
		ПоляОписанияТранзакции);
	Если ПоляОписанияТранзакции.ОшибкаОбменаСЭТП Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ОписаниеПредложенийЛота;	
КонецФункции

&НаСервере
Процедура ЗаполнитьТребованияКСоставуДокументовПоЛоту(ЭТП,
								ЕИСФабрикаXDTO,
								ОписаниеПредложенийЛота,
								ЗакупочнаяПроцедура,
								T_protocolLotApplications,
								ПоляОписанияТранзакции)
	T_documentsRequirement = 
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_protocolLotApplications, "documentsRequirement");
	ТекстОшибки = "";
	ТребованияКСоставуДокументов =
		ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьТребованияКСоставуДокументовПоЛоту(
			ЗакупочнаяПроцедура);
	Для Каждого ТребованиеКДокументу Из ТребованияКСоставуДокументов Цикл
		documentsRequirement = ЕИСФабрикаXDTO.Создать(T_documentsRequirement);
		documentsRequirement.documentNumber = ТребованиеКДокументу.Номер;
		documentsRequirement.documentName =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ТребованиеКДокументу.Требование);
		ОписаниеПредложенийЛота.documentsRequirement.Добавить(documentsRequirement);
	КонецЦикла;
КонецПроцедуры

// Предложения по всем лотам закупки у единственного поставщика.
&НаСервере
Функция ЗаполнитьpurchaseProtocol_lotApplicationsListPAEP(
									ЭТП, 
									ЕИСФабрикаXDTO, 
									ПротоколВыбораПобедителей, 
									ЗакупочнаяПроцедура, 
									ПоляОписанияТранзакции, 
									T_lotApplicationsList)
	ОписаниеПредложенийУчастников = Неопределено;
	Попытка
		T_protocolLotApplications =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
				T_lotApplicationsList, "protocolLotApplications");
		ОписаниеПредложенийУчастников =
			ЕИСФабрикаXDTO.Создать(T_lotApplicationsList);
		ВыборкаЛотов = 
		ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьВыборокуЛотовЗакупочнойПроцедуры(
			ЗакупочнаяПроцедура);
		Пока ВыборкаЛотов.Следующий() Цикл
			ОписаниеПредложенийЛота = Получить_protocolPAEPLotApplications(
				ЭТП, 
				ЕИСФабрикаXDTO, 
				ПротоколВыбораПобедителей, 
				ВыборкаЛотов.Лот,
				ПоляОписанияТранзакции, 
				T_protocolLotApplications);
			Если ОписаниеПредложенийЛота = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			ОписаниеПредложенийУчастников.protocolLotApplications.Добавить(
				ОписаниеПредложенийЛота);
		КонецЦикла;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = 
			НСтр("ru='Заполнение данных протокола выбора единственного поставщика закончилось ошибкой!'")
			+ Символы.ПС 
			+ ПодробноеПредставлениеОшибки(Инфо);
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(
			ПоляОписанияТранзакции, ТекстОшибки, "ЕИС");
		Возврат Неопределено;
	КонецПопытки;
	Возврат ОписаниеПредложенийУчастников;	
КонецФункции

// Предложения по лоту закупки у единственного поставщика. 
&НаСервере
Функция Получить_protocolPAEPLotApplications(
									ЭТП, 
									ЕИСФабрикаXDTO, 
									ПротоколВыбораПобедителей, 
									Лот,
									ПоляОписанияТранзакции, 
									T_protocolLotApplications)
	T_currency = 
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_protocolLotApplications, "currency");
	ОписаниеРазмещеннойВерсииЛота =
		ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьВерсиюОбъектаДляЕИС(Лот, Истина);
	УИДЛота = ОписаниеРазмещеннойВерсииЛота.ГУИДВерсии;
	ОписаниеПредложенийЛота =
		ЕИСФабрикаXDTO.Создать(T_protocolLotApplications);
	ОписаниеПредложенийЛота.guid = УИДЛота;
	ОписаниеПредложенийЛота.ordinalNumber = Лот.Код;
	ОписаниеПредложенийЛота.subject =
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			Лот.ПредметДоговора);
	currency =
		ПолучитьОписаниеВалюты(

					ЕИСФабрикаXDTO,
					ПоляОписанияТранзакции,
					T_currency, 
					Лот.ВалютаДокумента);
	Если currency = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ОписаниеПредложенийЛота.currency = currency;
	ОписаниеПредложенийЛота.initialSum =
		Лот.СуммаЛота;
	//ОписаниеПредложенийЛота.criteria
	ЗаполнитьЗаявкиУчастниковПоЛоту(
		ЭТП,
		ЕИСФабрикаXDTO,
		ОписаниеПредложенийЛота,
		ПротоколВыбораПобедителей,
		"ЗаполнитьИнформациюОПредложенииУчастникаPAEP",
		T_protocolLotApplications,
		ПоляОписанияТранзакции);
	Если ПоляОписанияТранзакции.ОшибкаОбменаСЭТП Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ОписаниеПредложенийЛота;	
КонецФункции

&НаСервере
Функция ПолучитьОписаниеЗакупки(ЕИСФабрикаXDTO, 
								T_purchaseProtocolData, 
								ЗакупочнаяПроцедура,
								ПоляОписанияТранзакции)
	ОписаниеВерсииЗакупочнойПроцедуры =
			ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьВерсиюОбъектаДляЕИС(ЗакупочнаяПроцедура, Истина);
	УИДЗакупочнойПроцедуры = ОписаниеВерсииЗакупочнойПроцедуры.ГУИДВерсии;
	Если НЕ ОписаниеВерсииЗакупочнойПроцедуры.Размещена Тогда
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
			ПоляОписанияТранзакции, 
			Нстр("ru = 'Закупка не зарегистрирована в ЕИС! '"));
		Возврат Неопределено;
	КонецЕсли;
	НаименованиеСпособаВыбора = "";
	КодСпособаВыбора = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьКодЗакупкиВЕИС(
		ЗакупочнаяПроцедура.СпособВыбораПоставщика,
		ЗакупочнаяПроцедура.ЗакрытаяЗакупка,
		ЗакупочнаяПроцедура.ВЭлектроннойФорме,
		НаименованиеСпособаВыбора);
	Если НЕ ЗначениеЗаполнено(КодСпособаВыбора) Тогда
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
			ПоляОписанияТранзакции,
			СтрШаблон(Нстр("ru = 'Способ выбора поставщика %1 не зарегистрирован в ЕИС! '"), ЗакупочнаяПроцедура.СпособВыбораПоставщика));
		Возврат Неопределено;
	КонецЕсли;
	ДанныеЗакупки = ЕИСФабрикаXDTO.Создать(
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_purchaseProtocolData, "purchaseInfo"));
	ДанныеЗакупки.guid = УИДЗакупочнойПроцедуры;
	ДанныеЗакупки.purchaseNoticeNumber = ЗакупочнаяПроцедура.РегистрационныйНомер;
	//ДанныеЗакупки.publicationDateTime
	ДанныеЗакупки.name =
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			ЗакупочнаяПроцедура.ПредметДоговора);
	ДанныеЗакупки.purchaseMethodCode = КодСпособаВыбора;
	ДанныеЗакупки.purchaseCodeName =
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			НаименованиеСпособаВыбора);
	//ДанныеЗакупки.emergency = Ложь;
	Возврат ДанныеЗакупки;
КонецФункции

&НаСервере
Процедура ЗаполнитьЗаявкиУчастниковПоЛоту(ЭТП,
								ЕИСФабрикаXDTO, 
								ОписаниеПредложенийЛота,
								ДокументПротокол,
								ИмяФункцииОписанияПредложенияУчастника,
								T_protocolLotApplications,
								ПоляОписанияТранзакции)
	T_application = 
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_protocolLotApplications, "application");						
	ТекстОшибки = "";
	ПредложенияУчастников =
		ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьОписаниеПредложенийПоставщиков(
			ДокументПротокол, ТекстОшибки);
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(
			ПоляОписанияТранзакции, ТекстОшибки, "ЕИС");
		Возврат;
	КонецЕсли;
	ТекстДляВыполнения = "application = "
					+ ИмяФункцииОписанияПредложенияУчастника + "(
					|		ЭТП, 
					|		ЕИСФабрикаXDTO, 
					|		ПредложениеУчастника, 
					|		ПоляОписанияТранзакции, 
					|		T_application);";
	Для Каждого ПредложениеУчастника Из ПредложенияУчастников Цикл
		application = Неопределено;
		Выполнить(ТекстДляВыполнения);
		Если application = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОписаниеПредложенийЛота.application.Добавить(application);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьИнформациюОПредложенииУчастникаRZOK(
										ЭТП, 
										ЕИСФабрикаXDTO, 
										ПредложениеУчастника, 
										ПоляОписанияТранзакции, 
										T_application)
	application = ЕИСФабрикаXDTO.Создать(T_application);
	application.applicationNumber = 
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			ПредложениеУчастника.Номер);
	//application.notDishonest = ;
	application.provider = ПредложениеУчастника.ПоставщикСМП;
	УстановитьОписаниеУчастника(
							ЕИСФабрикаXDTO, 
							T_application, 
							application,
							ПредложениеУчастника.Контрагент,
							ПоляОписанияТранзакции);
	application.accepted = ?(ПредложениеУчастника.ДопущенКУчастию, "T", "F");
	Если НЕ ПредложениеУчастника.ДопущенКУчастию Тогда
		application.rejectionReason =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ПредложениеУчастника.ПричинаОтказа);
	КонецЕсли;
	Возврат application;
КонецФункции

&НаСервере
Функция ЗаполнитьИнформациюОПредложенииУчастникаRZOA(
										ЭТП, 
										ЕИСФабрикаXDTO, 
										ПредложениеУчастника, 
										ПоляОписанияТранзакции, 
										T_application)
	application = ЕИСФабрикаXDTO.Создать(T_application);
	application.applicationNumber = 
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			ПредложениеУчастника.Номер);
	//application.notDishonest = ;
	application.provider = ПредложениеУчастника.ПоставщикСМП;
	УстановитьОписаниеУчастника(
							ЕИСФабрикаXDTO, 
							T_application, 
							application,
							ПредложениеУчастника.Контрагент,
							ПоляОписанияТранзакции);
	application.applicationDate = ПредложениеУчастника.ДатаПодачиЗаявки;
	Если НЕ ПустаяСтрока(ПредложениеУчастника.СведенияОбОбъемеЗакупки) Тогда
		application.commodityAmount =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ПредложениеУчастника.СведенияОбОбъемеЗакупки);
	КонецЕсли;
	Если НЕ ПустаяСтрока(ПредложениеУчастника.СрокиВыполненияДоговора) Тогда
		application.contractExecutionTerm = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ПредложениеУчастника.СрокиВыполненияДоговора);
	КонецЕсли;
	application.accepted = ?(ПредложениеУчастника.ДопущенКУчастию, "T", "F");
	Если НЕ ПредложениеУчастника.ДопущенКУчастию Тогда
		application.rejectionReason =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ПредложениеУчастника.ПричинаОтказа);
	КонецЕсли;
	Возврат application;
КонецФункции

&НаСервере
Функция ЗаполнитьИнформациюОПредложенииУчастникаRZAE(
										ЭТП, 
										ЕИСФабрикаXDTO, 
										ПредложениеУчастника, 
										ПоляОписанияТранзакции, 
										T_application)
	application = ЕИСФабрикаXDTO.Создать(T_application);
	application.applicationNumber = 
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			ПредложениеУчастника.Номер);
	//application.notDishonest = ;
	application.provider = ПредложениеУчастника.ПоставщикСМП;
	УстановитьОписаниеУчастника(
							ЕИСФабрикаXDTO, 
							T_application, 
							application,
							ПредложениеУчастника.Контрагент,
							ПоляОписанияТранзакции);
	application.applicationDate = ПредложениеУчастника.ДатаПодачиЗаявки;
	Если НЕ ПустаяСтрока(ПредложениеУчастника.СведенияОбОбъемеЗакупки) Тогда
		application.commodityAmount =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ПредложениеУчастника.СведенияОбОбъемеЗакупки);
	КонецЕсли;
	Если НЕ ПустаяСтрока(ПредложениеУчастника.СрокиВыполненияДоговора) Тогда
		application.contractExecutionTerm = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ПредложениеУчастника.СрокиВыполненияДоговора);
	КонецЕсли;
	application.accepted = ?(ПредложениеУчастника.ДопущенКУчастию, "T", "F");
	Если НЕ ПредложениеУчастника.ДопущенКУчастию Тогда
		application.rejectionReason =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ПредложениеУчастника.ПричинаОтказа);
	КонецЕсли;
	Возврат application;
КонецФункции

&НаСервере
Функция ЗаполнитьИнформациюОПредложенииУчастника(
										ЭТП, 
										ЕИСФабрикаXDTO, 
										ПредложениеУчастника, 
										ПоляОписанияТранзакции, 
										T_application)
	T_currency =  
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_application, "currency");
	application = ЕИСФабрикаXDTO.Создать(T_application);
	application.applicationDate = ПредложениеУчастника.ДатаПодачиЗаявки;
	application.applicationNumber = 
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			ПредложениеУчастника.Номер);
	application.provider = ПредложениеУчастника.ПоставщикСМП;
	УстановитьОписаниеУчастника(
							ЕИСФабрикаXDTO, 
							T_application, 
							application,
							ПредложениеУчастника.Контрагент,
							ПоляОписанияТранзакции);
	application.price = ПредложениеУчастника.СуммаДокумента;
	currency = ПолучитьОписаниеВалюты(

							ЕИСФабрикаXDTO,
							ПоляОписанияТранзакции,
							T_currency, 
							ПредложениеУчастника.ВалютаДокумента);
	Если currency = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	application.currency = currency;
	Если НЕ ПустаяСтрока(ПредложениеУчастника.СведенияОбОбъемеЗакупки) Тогда
		application.commodityAmount =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ПредложениеУчастника.СведенияОбОбъемеЗакупки);
	КонецЕсли;
	Если НЕ ПустаяСтрока(ПредложениеУчастника.СрокиВыполненияДоговора) Тогда
		application.contractExecutionTerm = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ПредложениеУчастника.СрокиВыполненияДоговора);
	КонецЕсли;
	application.accepted = ?(ПредложениеУчастника.ДопущенКУчастию, "T", "F");
	application.winnerIndication =
		winnerIndicationДляМестаПобедителя(ПредложениеУчастника.Место);
	//application.extendFields = 
	Возврат application;
КонецФункции

&НаСервере
Функция ЗаполнитьИнформациюОПредложенииУчастникаVK(
										ЭТП, 
										ЕИСФабрикаXDTO, 
										ПредложениеУчастника, 
										ПоляОписанияТранзакции, 
										T_application)
	T_currency =  
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_application, "currency");
	T_appliedDocumentsList =  
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_application, "appliedDocumentsList");
	T_appliedDocuments =  
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_appliedDocumentsList, "appliedDocuments");
	T_documentRequirement =  
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_appliedDocuments, "documentRequirement");
	application = ЕИСФабрикаXDTO.Создать(T_application);
	application.applicationDate = ПредложениеУчастника.ДатаПодачиЗаявки;
	application.applicationNumber = 
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			ПредложениеУчастника.Номер);
	//application.notDishonest = ;
	application.provider = ПредложениеУчастника.ПоставщикСМП;
	УстановитьОписаниеУчастника(
							ЕИСФабрикаXDTO, 
							T_application, 
							application,
							ПредложениеУчастника.Контрагент,
							ПоляОписанияТранзакции);
	application.price = ПредложениеУчастника.СуммаДокумента;
	currency = ПолучитьОписаниеВалюты(

							ЕИСФабрикаXDTO,
							ПоляОписанияТранзакции,
							T_currency, 
							ПредложениеУчастника.ВалютаДокумента);
	Если currency = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	application.currency = currency;
	Если НЕ ПустаяСтрока(ПредложениеУчастника.СведенияОбОбъемеЗакупки) Тогда
		application.commodityAmount =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ПредложениеУчастника.СведенияОбОбъемеЗакупки);
	КонецЕсли;
	Если НЕ ПустаяСтрока(ПредложениеУчастника.СрокиВыполненияДоговора) Тогда
		application.contractExecutionTerm = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ПредложениеУчастника.СрокиВыполненияДоговора);
	КонецЕсли;
	application.appliedDocumentsList = ЕИСФабрикаXDTO.Создать(T_appliedDocumentsList);
	Для Каждого ОписаниеТребования
			Из ПредложениеУчастника.СведенияОПредоставленныхДокументах Цикл
		appliedDocuments = ЕИСФабрикаXDTO.Создать(T_appliedDocuments);
		appliedDocuments.documentRequirement =
			ЕИСФабрикаXDTO.Создать(T_documentRequirement);
		appliedDocuments.documentRequirement.documentNumber =
			ОписаниеТребования.НомерТребования;
		appliedDocuments.documentRequirement.documentName =
			ОписаниеТребования.ТребованиеКДокументу;
		appliedDocuments.presence = ?(ОписаниеТребования.Наличие, "P", "M");
		Если НЕ ПустаяСтрока(ОписаниеТребования.Комментарий) Тогда
			appliedDocuments.comment = 
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
					ОписаниеТребования.Комментарий);
		КонецЕсли;
		application.appliedDocumentsList.appliedDocuments.Добавить(appliedDocuments);
	КонецЦикла;
	Возврат application;
КонецФункции

&НаСервере
Функция ЗаполнитьИнформациюОПредложенииУчастникаPAEP(
										ЭТП, 
										ЕИСФабрикаXDTO, 
										ПредложениеУчастника, 
										ПоляОписанияТранзакции, 
										T_application)
	T_currency =  
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_application, "currency");
	application = ЕИСФабрикаXDTO.Создать(T_application);
	application.applicationNumber = 
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			ПредложениеУчастника.Номер);
	application.lastPrice = ПредложениеУчастника.СуммаДокумента;
	currency = ПолучитьОписаниеВалюты(

							ЕИСФабрикаXDTO,
							ПоляОписанияТранзакции,
							T_currency, 
							ПредложениеУчастника.ВалютаДокумента);
	Если currency = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	application.currency = currency;
	Если НЕ ПустаяСтрока(ПредложениеУчастника.СведенияОбОбъемеЗакупки) Тогда
		application.commodityAmount =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ПредложениеУчастника.СведенияОбОбъемеЗакупки);
	КонецЕсли;
	Если НЕ ПустаяСтрока(ПредложениеУчастника.СрокиВыполненияДоговора) Тогда
		application.contractExecutionTerm = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ПредложениеУчастника.СрокиВыполненияДоговора);
	КонецЕсли;
	//application.notDishonest = ;
	application.provider = ПредложениеУчастника.ПоставщикСМП;
	УстановитьОписаниеУчастника(
							ЕИСФабрикаXDTO, 
							T_application, 
							application,
							ПредложениеУчастника.Контрагент,
							ПоляОписанияТранзакции);
	Возврат application;
КонецФункции

&НаСервере
Функция ЗаполнитьИнформациюОПредложенииУчастникаOSZ(
										ЭТП, 
										ЕИСФабрикаXDTO, 
										ПредложениеУчастника, 
										ПоляОписанияТранзакции, 
										T_application)
	application = ЕИСФабрикаXDTO.Создать(T_application);
	application.applicationNumber = 
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			ПредложениеУчастника.Номер);
	application.provider = ПредложениеУчастника.ПоставщикСМП;
	УстановитьОписаниеУчастника(
							ЕИСФабрикаXDTO, 
							T_application, 
							application,
							ПредложениеУчастника.Контрагент,
							ПоляОписанияТранзакции);
	//application.applicationResult = ПредложениеУчастника.Место;
	application.applicationRate = ПредложениеУчастника.Место;
	application.applicationPlace =
		winnerIndicationДляМестаПобедителя(ПредложениеУчастника.Место);
	Возврат application;
КонецФункции

&НаСервере
Функция ЗаполнитьИнформациюОПредложенииУчастникаPAAE(
										ЭТП, 
										ЕИСФабрикаXDTO, 
										ПредложениеУчастника, 
										ПоляОписанияТранзакции, 
										T_application)
	T_currency =  
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_application, "currency");
	application = ЕИСФабрикаXDTO.Создать(T_application);
	application.applicationNumber = 
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			ПредложениеУчастника.Номер);
	application.provider = ПредложениеУчастника.ПоставщикСМП;
	УстановитьОписаниеУчастника(
							ЕИСФабрикаXDTO, 
							T_application, 
							application,
							ПредложениеУчастника.Контрагент,
							ПоляОписанияТранзакции);
	application.lastPrice = ПредложениеУчастника.ПоследняяЦена;
	application.lastButOnePrice = ПредложениеУчастника.ПредпоследняяЦена;
	application.applicationRate = ПредложениеУчастника.Место;
	application.applicationPlace =
		winnerIndicationДляМестаПобедителя(ПредложениеУчастника.Место);
	Возврат application;
КонецФункции

&НаСервере
Функция ЗаполнитьИнформациюОПредложенииУчастникаPAOA(
										ЭТП, 
										ЕИСФабрикаXDTO, 
										ПредложениеУчастника, 
										ПоляОписанияТранзакции, 
										T_application)
	T_currency =  
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_application, "currency");
	application = ЕИСФабрикаXDTO.Создать(T_application);
	application.applicationDate = ПредложениеУчастника.ДатаПодачиЗаявки;
	application.applicationNumber = 
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			ПредложениеУчастника.Номер);
	application.provider = ПредложениеУчастника.ПоставщикСМП;
	УстановитьОписаниеУчастника(
							ЕИСФабрикаXDTO, 
							T_application, 
							application,
							ПредложениеУчастника.Контрагент,
							ПоляОписанияТранзакции);
	application.lastPrice = ПредложениеУчастника.ПоследняяЦена;
	application.lastButOnePrice = ПредложениеУчастника.ПредпоследняяЦена;
	application.applicationRate = ПредложениеУчастника.Место;
	application.applicationPlace =
		winnerIndicationДляМестаПобедителя(ПредложениеУчастника.Место); 
	Возврат application;
КонецФункции

&НаСервере
Функция ЗаполнитьИнформациюОПредложенииУчастникаZK(
										ЭТП, 
										ЕИСФабрикаXDTO, 
										ПредложениеУчастника, 
										ПоляОписанияТранзакции, 
										T_application)
	T_currency =  
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_application, "currency");
	application = ЕИСФабрикаXDTO.Создать(T_application);
	application.applicationNumber = 
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			ПредложениеУчастника.Номер);
	application.applicationDate = ПредложениеУчастника.ДатаПодачиЗаявки;		
	application.provider = ПредложениеУчастника.ПоставщикСМП;
	УстановитьОписаниеУчастника(
							ЕИСФабрикаXDTO, 
							T_application, 
							application,
							ПредложениеУчастника.Контрагент,
							ПоляОписанияТранзакции);
	
	application.price = ПредложениеУчастника.СуммаДокумента;
	currency = ПолучитьОписаниеВалюты(

							ЕИСФабрикаXDTO,
							ПоляОписанияТранзакции,
							T_currency, 
							ПредложениеУчастника.ВалютаДокумента);
	Если currency = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	application.currency = currency;
	Если НЕ ПустаяСтрока(ПредложениеУчастника.СведенияОбОбъемеЗакупки) Тогда
		application.commodityAmount =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ПредложениеУчастника.СведенияОбОбъемеЗакупки);
	КонецЕсли;
	Если НЕ ПустаяСтрока(ПредложениеУчастника.СрокиВыполненияДоговора) Тогда
		application.contractExecutionTerm = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ПредложениеУчастника.СрокиВыполненияДоговора);
	КонецЕсли;
	application.accepted = ?(ПредложениеУчастника.ДопущенКУчастию, "T", "F");
	Если НЕ ПредложениеУчастника.ДопущенКУчастию 
				И ЗначениеЗаполнено(ПредложениеУчастника.ПричинаОтказаВДоступе) Тогда
		application.rejectionReason =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				ПредложениеУчастника.ПричинаОтказаВДоступе);
	КонецЕсли;
	application.winnerIndication =
		winnerIndication3ДляМестаПобедителя(ПредложениеУчастника.Место);
	Возврат application;
КонецФункции

&НаСервере
Процедура УстановитьОписаниеУчастника(
								ЕИСФабрикаXDTO, 
								T_application, 
								application, 
								Контрагент, 
								ПоляОписанияТранзакции)
	Если Контрагент.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
		ОписаниеУчастника = ПолучитьОписаниеSupplierInfo(
									ЕИСФабрикаXDTO, 
									T_application, 
									Контрагент, 
									ПоляОписанияТранзакции);
		ИмяРеквизита = "supplierInfo";
	Иначе
		ОписаниеУчастника = ПолучитьОписаниеNonResidentInfo(
									ЕИСФабрикаXDTO, 
									T_application, 
									Контрагент, 
									ПоляОписанияТранзакции);
		ИмяРеквизита = "nonResidentInfo";
	КонецЕсли;
	Если ОписаниеУчастника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	application[ИмяРеквизита] = ОписаниеУчастника;
КонецПроцедуры

&НаСервере
Функция ПолучитьОписаниеSupplierInfo(ЕИСФабрикаXDTO, T_application, Контрагент, ПоляОписанияТранзакции)
	T_supplierInfo =
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_application, "supplierInfo");
	ОписаниеКонтрагента = ЕИСФабрикаXDTO.Создать(T_supplierInfo);
	флЭтоЮрЛицо = 
		(Контрагент.ЮридическоеФизическоеЛицо =
			Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	ОписаниеКонтрагента.name =
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			Контрагент.Наименование);
	Если ПустаяСтрока(Контрагент.ИНН) Тогда
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(
			ПоляОписанияТранзакции,
			СтрШаблон(Нстр("ru = 'У контрагента ""%1"" не заполнен ИНН'"), Контрагент.Наименование),
			"ЕИС");
		Возврат Неопределено;
	КонецЕсли;
	ОписаниеКонтрагента.inn = СокрЛП(Контрагент.ИНН);
	Если флЭтоЮрЛицо Тогда
		Если ПустаяСтрока(Контрагент.КПП) Тогда
			ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(
				ПоляОписанияТранзакции,
				СтрШаблон(Нстр("ru = 'У контрагента ""%1"" не заполнен КПП'"), Контрагент.Наименование), 
				"ЕИС");
			Возврат Неопределено;
		КонецЕсли;
		ОписаниеКонтрагента.kpp = СокрЛП(Контрагент.КПП);
	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент.РегистрационныйНомер) Тогда
		Если ЗначениеЗаполнено(Контрагент.РегистрационныйНомер) Тогда
			ОписаниеКонтрагента.ogrn =
			СокрЛП(Контрагент.РегистрационныйНомер);
		КонецЕсли;		
	КонецЕсли;
	ОписаниеКонтрагента.type = ?(флЭтоЮрЛицо, "L", "P");
	КонтактнаяИнформация =
		ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьКонтактнуюИнформацию(Контрагент);
	//юр адрес
	Если ЗначениеЗаполнено(КонтактнаяИнформация.ЮридическийАдрес) Тогда
		ОписаниеКонтрагента.address =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				КонтактнаяИнформация.ЮридическийАдрес);
	КонецЕсли;
	Возврат ОписаниеКонтрагента;
КонецФункции

&НаСервере
Функция ПолучитьОписаниеNonResidentInfo(ЕИСФабрикаXDTO, T_application, Контрагент, ПоляОписанияТранзакции)
	T_nonResidentInfo =
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_application, "nonResidentInfo");
	ОписаниеКонтрагента = ЕИСФабрикаXDTO.Создать(T_nonResidentInfo);
	флЭтоЮрЛицо = 
		(Контрагент.ЮридическоеФизическоеЛицо =
			Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	//ОписаниеКонтрагента.info =
	ОписаниеКонтрагента.type = ?(флЭтоЮрЛицо, "L", "P");
	ОписаниеКонтрагента.name =
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			Контрагент.Наименование);
	Если ПустаяСтрока(Контрагент.НалоговыйНомер) Тогда
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(
			ПоляОписанияТранзакции,
			СтрШаблон(Нстр("ru = 'У контрагента ""%1"" не заполнен налоговый номер в стране регистрации!'"), 
				Контрагент.Наименование), 
			"ЕИС");
		Возврат Неопределено;
	КонецЕсли;
	ОписаниеКонтрагента.code = СокрЛП(Контрагент.НалоговыйНомер);
	Если ЗначениеЗаполнено(Контрагент.СтранаРегистрации) Тогда
		ОписаниеКонтрагента.country = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
					T_nonResidentInfo, "country");
		ОписаниеКонтрагента.country.digitalCode =
					Контрагент.СтранаРегистрации.Код;
	КонецЕсли;
	КонтактнаяИнформация =
		ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьКонтактнуюИнформацию(
			Контрагент);
	//юр адрес
	Если ЗначениеЗаполнено(КонтактнаяИнформация.ЮридическийАдрес) Тогда
		ОписаниеКонтрагента.address = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				КонтактнаяИнформация.ЮридическийАдрес);
	КонецЕсли;
	Возврат ОписаниеКонтрагента;
КонецФункции

&НаСервере
Функция winnerIndicationДляМестаПобедителя(Место)
	Если Место = 1 Тогда
		Возврат "F";
	ИначеЕсли Место = 2 Тогда
		Возврат "S";
	ИначеЕсли Место = 3 Тогда
		Возврат "T";
	КонецЕсли;
	Возврат "B";
КонецФункции

&НаСервере
Функция winnerIndication3ДляМестаПобедителя(Место)
	Если Место = 1 Тогда
		Возврат "W";
	КонецЕсли;
	Возврат "S";
КонецФункции


#КонецОбласти


#Область ПолучениеОписанияЗакупочнойПроцедуры


&НаСервере
Функция ПолучитьТекстОписанияПроектаПланаЗакупки(ОписаниеОбмена, ЕИСФабрикаXDTO)
	ИменаТипов = Новый Структура;
	ИменаТипов.Вставить("ПространствоИмен",		 "http://zakupki.gov.ru/223fz/purchasePlanProject/1");
	ИменаТипов.Вставить("T_purchasePlan",		 "purchasePlanProject");
	ИменаТипов.Вставить("T_purchasePlanData",	 "purchasePlanProjectData");
	Возврат ПолучитьТекстОписанияПроектаИлиПланаЗакупки(ОписаниеОбмена,	ЕИСФабрикаXDTO, ИменаТипов);
КонецФункции


#КонецОбласти


#Область ПолучениеОписанияПланаЗакупки


&НаСервере
Функция ПолучитьТекстОписанияПланаЗакупки(ОписаниеОбмена, ЕИСФабрикаXDTO)
	ИменаТипов = Новый Структура;
	ИменаТипов.Вставить("ПространствоИмен",							 "http://zakupki.gov.ru/223fz/purchasePlan/1");
	ИменаТипов.Вставить("T_purchasePlan",							 "purchasePlan");
	ИменаТипов.Вставить("T_purchasePlanData",						 "purchasePlanData");
	ИменаТипов.Вставить("T_purchasePlanProjectUpdatePosition",		 "purchasePlanProjectUpdatePosition");
	ИменаТипов.Вставить("T_purchasePlanProjectUpdatePositionData",	 "purchasePlanProjectUpdatePositionData");
	ТекстОписания = ПолучитьТекстОписанияПроектаИлиПланаЗакупки(ОписаниеОбмена,	ЕИСФабрикаXDTO, ИменаТипов);
	Возврат ТекстОписания;
КонецФункции

&НаСервере
Функция ПолучитьТекстОписанияДополненияПланаЗакупки(ОписаниеОбмена, ЕИСФабрикаXDTO)
	ИменаТипов = Новый Структура;
	ИменаТипов.Вставить("ПространствоИмен",		 "http://zakupki.gov.ru/223fz/purchasePlanAdditionalPosition/1");
	ИменаТипов.Вставить("T_purchasePlan",		 "purchasePlanAdditionalPosition");
	ИменаТипов.Вставить("T_purchasePlanData",	 "purchasePlanAdditionalPositionData");
	ТекстОписания = ПолучитьТекстОписанияДогрузкиПлана(ОписаниеОбмена,	ЕИСФабрикаXDTO, ИменаТипов);
	Возврат ТекстОписания;
КонецФункции

// Выставляет для выгружаемого объекта СсылкаВход статус СтатусВход.
&НаСервереБезКонтекста
Процедура УстановитьСтатусОбъектаВыгрузки(СсылкаВход, СтатусВход)
	Если ТипЗнч(СсылкаВход) = Тип("ДокументСсылка.ПрограммаЗакупок") Тогда
		Попытка
			УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(СсылкаВход, СтатусВход);
		Исключение
			ТекстСообщения = НСтр("ru = 'При установке статуса ""%Статус%"" объекта ""%Объект%"" произошли ошибки: %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", Строка(СтатусВход));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Строка(СсылкаВход));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецПопытки;
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный вариант выгружаемый объекта: ""%Объект%"". Установка статуса отменена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Строка(СсылкаВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры		// УстановитьСтатусОбъектаВыгрузки()

// Устанавливает строкам плана закупок, подчинённым программе закупок ПрограммаЗакупокВход
// состояние Выгружен, если параметр УспешноВход - Истина; и Ошибка выгруки - в противном
// случае.
&НаСервереБезКонтекста
Процедура УстановитьСтатусСтрокПланаЗакупки(ПрограммаЗакупокВход, УспешноВход)
	// Определим необходимое состояние.
	НовоеСостояние = Перечисления.СтатусыВыгружаемыхОбъектовЕИС.ПустаяСсылка();
	Если УспешноВход Тогда
		НовоеСостояние = Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Выгружен;
	Иначе
		НовоеСостояние = Перечисления.СтатусыВыгружаемыхОбъектовЕИС.ОшибкиВыгрузки;
	КонецЕсли;
	// Получим строки плана и установим им новое состояние.
	Документы.ПрограммаЗакупок.ПеревестиПодчиненныеСтрокиПрограммыВНовоеСостояние(ПрограммаЗакупокВход, НовоеСостояние);
КонецПроцедуры		// УстановитьСтатусСтрокПланаЗакупки()

// Возвращает значение для аттрибута modificationDescription выгрузки по описанию 
// версии объекта ОписаниеВерсииВход.
&НаСервереБезКонтекста
Функция ПолучитьОбоснованиеПоОписаниюВерсии(ОписаниеВерсииВход)
	РезультатФункции = "-";
	Если ОписаниеВерсииВход.НомерВерсии > 0 Тогда
		ОбоснованияВерсии = ОписаниеВерсииВход.ОбоснованиеИзменений;
		Если НЕ ПустаяСтрока(ОбоснованияВерсии) Тогда
			ОбоснованияПодготовленные = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(ОбоснованияВерсии);
			РезультатФункции = ОбоснованияПодготовленные;
		Иначе
			РезультатФункции = "-";
		КонецЕсли;
	Иначе
		РезультатФункции = "-";
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьОбоснованиеПоОписаниюВерсии()

// Возвращает текстовое имя плана для по периоду ОтчетныйГодВход 
// в организации ОрганизацияВход.
&НаКлиентеНаСервереБезКонтекста
Функция ПодготовитьИмяПлана(ОрганизацияВход, ОтчетныйГодВход)
	РезультатФункции = "";
	НовоеИмя = НСтр("ru = 'План закупки товаров (работ, услуг) %Организация% на %ОтчетныйГод% г.'");
	НовоеИмя = СтрЗаменить(НовоеИмя, "%Организация%", СокрЛП(Строка(ОрганизацияВход)));
	НовоеИмя = СтрЗаменить(НовоеИмя, "%ОтчетныйГод%", Строка(ОтчетныйГодВход));
	РезультатФункции = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(НовоеИмя);
	Возврат РезультатФункции;
КонецФункции		 // ПодготовитьИмяПлана()

// Возвращает текстовое представление флага Инновационный для выгрузки на ЕИС.
&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеИнновационногоПланаЕИС(ИнновационныйВход)
	РезультатФункции = "";
	Если ИнновационныйВход Тогда
		РезультатФункции = "INNOVATION";
	Иначе
		РезультатФункции = "COMMODITY";
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		 // ПредставлениеИнновационногоПланаЕИС()

// Получает XML-текст по удалённым строкам МассивСтрокУдалениеВход.
&НаСервере
Функция ПолучитьТекстОписанияУдалениеСтрок(ОписаниеОбмена, ПланЗакупок, ЕИСФабрикаXDTO, ИменаТипов, МассивСтрокУдалениеВход, ОбщиеДанныеПлана)
	// Инициализация.
	РезультатФункции = "";
	ЭТП = ОписаниеОбмена.ЭТП;
	ПоляОписанияТранзакции = ОписаниеОбмена.ПоляОписанияТранзакции;
	ПланЗакупок = ОписаниеОбмена.ОбъектВыгрузки;
	ОписаниеРазмещеннойВерсии = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьВерсиюОбъектаДляЕИС(ПланЗакупок, Истина);
	ОписаниеВерсии = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьВерсиюОбъектаДляЕИС(ПланЗакупок);
	УИДПланаЗакупок = ОписаниеВерсии.ГУИДВерсии;
	ЕстьОшибки = Ложь;
	// Типы и исходные объекты.
	ПространствоИмен = "http://zakupki.gov.ru/223fz/purchasePlanUpdatePositionDataType/1";
	КорневыеОбъекты = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьКорневыеОбъектыПространстваИмен(ЕИСФабрикаXDTO, ПространствоИмен);
	T_purchasePlanProjectUpdatePosition		 = КорневыеОбъекты.Получить(ИменаТипов.T_purchasePlanProjectUpdatePosition).Тип;
	T_header								 = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_purchasePlanProjectUpdatePosition, "header");
	T_body									 = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_purchasePlanProjectUpdatePosition, "body");
	T_purchasePlanProjectUpdatePositionItem	 = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_body, "item");
	T_purchasePlanProjectUpdatePositionData	 = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_purchasePlanProjectUpdatePositionItem, ИменаТипов.T_purchasePlanProjectUpdatePositionData);
	T_purchasePlanItemsDelete				 = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_purchasePlanProjectUpdatePositionData, "purchasePlanItemsDelete");
	ТипСтрокиПлана							 = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_purchasePlanItemsDelete, "purchasePlanItemDelete");
	ОписаниеПланаУдаление = ЕИСФабрикаXDTO.Создать(T_purchasePlanProjectUpdatePosition);
	// Заголовок пакета.
	ОписаниеПланаУдаление.header = ЕИСФабрикаXDTO.Создать(T_header);
	ОписаниеПланаУдаление.header.guid			 = ПоляОписанияТранзакции.КлючСообщения;
	ОписаниеПланаУдаление.header.createDateTime	 = ТекущаяДата();
	// Тело пакета.
	ОписаниеПланаУдаление.body = ЕИСФабрикаXDTO.Создать(T_body);
	ОписаниеПланаУдаление.body.item			 = ЕИСФабрикаXDTO.Создать(T_purchasePlanProjectUpdatePositionItem);
	ОписаниеПланаУдаление.body.item.guid	 = Строка(Новый УникальныйИдентификатор);
	ОписаниеПланаУдаление.body.item[ИменаТипов.T_purchasePlanProjectUpdatePositionData] = ЕИСФабрикаXDTO.Создать(T_purchasePlanProjectUpdatePositionData);
	// План закупки
	флИнновационный = ОбщиеДанныеПлана.флИнновационный;
	ДанныеПланаУдаление = ОписаниеПланаУдаление.body.item[ИменаТипов.T_purchasePlanProjectUpdatePositionData];
	ДанныеПланаУдаление.approveDate				 = ПланЗакупок.ДатаУтверждения;
	Вложения = СоздатьВложениеФайлов(ЭТП, ЕИСФабрикаXDTO, ПланЗакупок, T_purchasePlanProjectUpdatePositionData);
	Если Вложения <> Неопределено Тогда
		ДанныеПланаУдаление.attachments			 = Вложения;
	КонецЕсли;
	ДанныеПланаУдаление.customer				 = ОбщиеДанныеПлана.customer;
	Если НЕ ЗначениеЗаполнено(ПланЗакупок.ДокументОснование) Тогда
		ДанныеПланаУдаление.guid				 = УИДПланаЗакупок;
	Иначе                   
		ДанныеПланаУдаление.guid				 = ПланЗакупок.ДокументОснование.УИД_ЕИС;
	КонецЕсли;
	ДанныеПланаУдаление.isUploadComplete		 = Истина;
	ДанныеПланаУдаление.modificationDescription	 = ПолучитьОбоснованиеПоОписаниюВерсии(ОписаниеВерсии);
	ДанныеПланаУдаление.placer					 = ОбщиеДанныеПлана.placer;
	ДанныеПланаУдаление.planType				 = ПредставлениеИнновационногоПланаЕИС(флИнновационный);
	Если ОписаниеРазмещеннойВерсии.Размещена Тогда
		Если НЕ ИнтеграцияЦУЗсЭТПСерверУХ.КорректныйНомерРегистрацииЕИС(ПланЗакупок) Тогда
			ТекстСообщения = НСтр("ru = 'У плана закупок не заполнен (или заполнен некорректно) регистрационный номер в ЕИС. '");
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ПоляОписанияТранзакции, ТекстСообщения);
			РезультатФункции = Неопределено;
			ЕстьОшибки = Истина;
		КонецЕсли;
		ДанныеПланаУдаление.registrationNumber	 = ПланЗакупок.РегистрационныйНомер;
	КонецЕсли;
	Если Не ЕстьОшибки Тогда
		УдаленныеСтрокиПлана = ЕИСФабрикаXDTO.Создать(T_purchasePlanItemsDelete);
		Для Каждого ТекМассивСтрокУдалениеВход Из МассивСтрокУдалениеВход Цикл
			УдаленнаяСтрока = ПолучитьОписаниеОтмененнойСтрокиПланаЗакупок(ЕИСФабрикаXDTO, ТипСтрокиПлана, ТекМассивСтрокУдалениеВход);
			УдаленныеСтрокиПлана.purchasePlanItemDelete.Добавить(УдаленнаяСтрока);
		КонецЦикла;	
		ДанныеПланаУдаление.purchasePlanItemsDelete	 = УдаленныеСтрокиПлана;
		ДанныеПланаУдаление.urlVSRZ					 = "http://zakupki.gov.ru";
		// Получение текста xml по данным xdto.
		Если ОписаниеПланаУдаление <> Неопределено Тогда
			ОписаниеПланаУдаление.Проверить();	
			РезультатФункции = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьТекстОписанияОбъекта(
				ЕИСФабрикаXDTO, ОписаниеПланаУдаление, ИменаТипов.T_purchasePlanProjectUpdatePosition);
		Иначе
			РезультатФункции = Неопределено;	
		КонецЕсли;	
	Иначе
		РезультатФункции = "";
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьТекстОписанияУдалениеСтрок()

// Возвращает структуру с общими данными плана закупок ПланЗакупок.
&НаСервере
Функция ПолучитьСтруктуруОбщихДанныхПлана(ЕИСФабрикаXDTO, T_customer, ПланЗакупок, ПоляОписанияТранзакции)
	РезультатФункции = Новый Структура;
	customer = ПолучитьОписаниеОрганизации(
		ЕИСФабрикаXDTO,	T_customer,	ПланЗакупок.ОрганизацияДляЗаключенияДоговора, ПоляОписанияТранзакции);
	Если НЕ ПоляОписанияТранзакции.ОшибкаОбменаСЭТП Тогда
		placer = ПолучитьОписаниеОрганизации(
			ЕИСФабрикаXDTO,	T_customer,	ПланЗакупок.ОрганизацияДляЗаключенияДоговора, ПоляОписанияТранзакции);
		Если НЕ ПоляОписанияТранзакции.ОшибкаОбменаСЭТП Тогда
			флИнновационный = ПланЗакупок.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств;
			РезультатФункции.Вставить("customer", customer);
			РезультатФункции.Вставить("placer", placer);
			РезультатФункции.Вставить("флИнновационный", флИнновационный);
		Иначе
			РезультатФункции = Новый Структура;
		КонецЕсли;	
	Иначе
		РезультатФункции = Новый Структура;
	КонецЕсли;	
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьСтруктуруОбщихДанныхПлана()

&НаСервере
Функция ПолучитьТекстОписанияПроектаИлиПланаЗакупки(ОписаниеОбмена, ЕИСФабрикаXDTO, ИменаТипов)
	РезультатФункции = "";
	ТекстОписания = "";
	ТекстОписанияУдаление = "";
	ЭТП = ОписаниеОбмена.ЭТП;
	ПоляОписанияТранзакции = ОписаниеОбмена.ПоляОписанияТранзакции;
	ПланЗакупок = ОписаниеОбмена.ОбъектВыгрузки;
	ТекстОписания = Неопределено;
	Попытка

		ПространствоИмен = ИменаТипов.ПространствоИмен;
		КорневыеОбъекты = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьКорневыеОбъектыПространстваИмен(ЕИСФабрикаXDTO, ПространствоИмен);
		// Типы данных веб-сервиса
		T_purchasePlan = КорневыеОбъекты.Получить(ИменаТипов.T_purchasePlan).Тип;
		T_header = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_purchasePlan, "header");
		T_body = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_purchasePlan, "body");
		T_purchasePlanItem = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_body, "item");
		T_purchasePlanData = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_purchasePlanItem, ИменаТипов.T_purchasePlanData);
		// также используется для placer
		T_customer = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_purchasePlanData, "customer");
		// Объект XDTO План закупки
		ОписаниеПлана = ЕИСФабрикаXDTO.Создать(T_purchasePlan);
		// Заголовок пакета.
 		ОписаниеПлана.header = ЕИСФабрикаXDTO.Создать(T_header);
 		ОписаниеПлана.header.guid = ПоляОписанияТранзакции.КлючСообщения;
 		ОписаниеПлана.header.createDateTime = ТекущаяДата();
		// Тело пакета
		ОписаниеПлана.body = ЕИСФабрикаXDTO.Создать(T_body);
		ОписаниеПлана.body.item = ЕИСФабрикаXDTO.Создать(T_purchasePlanItem);
		ОписаниеПлана.body.item.guid = Строка(Новый УникальныйИдентификатор);
		ОписаниеПлана.body.item[ИменаТипов.T_purchasePlanData] = ЕИСФабрикаXDTO.Создать(T_purchasePlanData);
		// План закупки
		ДанныеПлана = ОписаниеПлана.body.item[ИменаТипов.T_purchasePlanData];
		// Определим УИД плана для ЕИС
		ОписаниеРазмещеннойВерсии = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьВерсиюОбъектаДляЕИС(ПланЗакупок, Истина);
		ОписаниеВерсии = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьВерсиюОбъектаДляЕИС(ПланЗакупок);

		Если ОписаниеВерсии.Размещена И ОписаниеВерсии.НомерВерсии > 0 Тогда
			ТекстСообщения = НСтр("ru = 'Для отправки, создайте новую версию плана для ЕИС'");
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ПоляОписанияТранзакции, ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		УИДПланаЗакупок = ОписаниеВерсии.ГУИДВерсии;
		СохранитьУИДОбъекта(ПланЗакупок,, УИДПланаЗакупок);
		ДанныеПлана.guid = УИДПланаЗакупок;
		
		Если НЕ ЗначениеЗаполнено(ПланЗакупок.ОрганизацияДляЗаключенияДоговора) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена организация заказчик '");
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ПоляОписанияТранзакции, ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		СтруктураОбщихДанныхПалана = ПолучитьСтруктуруОбщихДанныхПлана(ЕИСФабрикаXDTO, T_customer, ПланЗакупок, ПоляОписанияТранзакции);
		Если СтруктураОбщихДанныхПалана.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДанныеПлана.customer = СтруктураОбщихДанныхПалана.customer;
		ДанныеПлана.placer = СтруктураОбщихДанныхПалана.placer;
		флИнновационный = СтруктураОбщихДанныхПалана.флИнновационный;
		
		ДанныеПлана.planType = ПредставлениеИнновационногоПланаЕИС(флИнновационный);
		// Информация о лотах и суммах
		мСтрокиПлана = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьСтрокиПланаЗакупок(ПланЗакупок);
		Если мСтрокиПлана.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'У плана закупок нет строк'");
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ПоляОписанияТранзакции, ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		Если флИнновационный Тогда
			ИмяРеквизитаСтрокПлана = "innovationPlanItems";
			ИмяРеквизитаСтрокиПлана = "innovationPlanItem";
		Иначе
			ИмяРеквизитаСтрокПлана = "purchasePlanItems";
			ИмяРеквизитаСтрокиПлана = "purchasePlanItem";
		КонецЕсли;
		ИмяРеквизитаСтрокПланаМСП = ИмяРеквизитаСтрокПлана + "SMB";
			
		T_purchasePlanItems = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_purchasePlanData, ИмяРеквизитаСтрокПлана);
		СтрокиПлана = ЕИСФабрикаXDTO.Создать(T_purchasePlanItems);
		ТипСтрокиПлана = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_purchasePlanItems, ИмяРеквизитаСтрокиПлана);
		
		ТипСвойства = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_purchasePlanData, ИмяРеквизитаСтрокПланаМСП);
		СтрокиПланаМСП = ЕИСФабрикаXDTO.Создать(ТипСвойства);
		ПроверкаСтрокПереходящегоПериода = ПроверкаСтрокПереходящегоПериода(ПланЗакупок);
		Если  НЕ ПроверкаСтрокПереходящегоПериода Тогда
				ТекстОшибки = НСтр("ru = 'Необходимо создать строки переходящего периода для выгружаемой программы закупок'");
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ПоляОписанияТранзакции, ТекстОшибки);
				Возврат Неопределено;
		КонецЕсли;	
		Для Каждого СтрокаПлана Из МСтрокиПлана Цикл
			КодСпособаВыбора = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьКодЗакупкиВЕИС(
			СтрокаПлана.СпособВыбораПоставщика,
			СтрокаПлана.ЗакрытаяЗакупка,
			СтрокаПлана.ВЭлектроннойФорме,
			""); 
			Если  КодСпособаВыбора=0 ИЛИ КодСпособаВыбора = Неопределено Или КодСпособаВыбора = "" Тогда
				ТекстОшибки = НСтр("ru = 'Не настроен справочник Коды способов закупок по %КодСпособаВыбора%  для строки программы %СтрокаПлана%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СтрокаПлана%", Строка(СтрокаПлана));
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КодСпособаВыбора%", Строка(СтрокаПлана.СпособВыбораПоставщика));
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ПоляОписанияТранзакции, ТекстОшибки);
				Возврат Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
		// Заполняем все строки плана
		флОшибка = Ложь;
		МассивОтмененныхСтрок = Новый Массив;
		Для Каждого СтрокаПлана Из мСтрокиПлана Цикл
			Если НЕ СтрокаПлана.ЗакупкаОтменена	Тогда
				ДанныеСтроки = ПолучитьОписаниеСтрокиПланаЗакупок(
					ЭТП, ЕИСФабрикаXDTO, ТипСтрокиПлана, ПланЗакупок, СтрокаПлана, T_customer, ПоляОписанияТранзакции);
				Если ДанныеСтроки = Неопределено Тогда
					флОшибка = Истина;
					Продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаПлана.СтрокаПереходящегоПериода) Тогда
						initialPositionData = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(ТипСтрокиПлана, "initialPositionData");					
				     	ОписаниеОснования =   ЕИСФабрикаXDTO.Создать(initialPositionData);
						ОписаниеОснования.initialPlanGuid =  ГуидПрограммыОснования(СтрокаПлана.СтрокаПереходящегоПериода);						
						ОписаниеОснования.initialPositionGUID = СтрокаПлана.СтрокаПереходящегоПериода.УИД_ЕИС;
						ДанныеСтроки.initialPositionData = ОписаниеОснования;
				КонецЕсли;	
				
				Если флИнновационный Тогда
					ЗаполнитьИнновационнуюСтрокуПланаЗакупок(
						ЭТП, ЕИСФабрикаXDTO, ТипСтрокиПлана, ПланЗакупок, СтрокаПлана, T_customer, 
						ПоляОписанияТранзакции, ДанныеСтроки);
				Иначе
					ЗаполнитьОбычнуюСтрокуПланаЗакупок(
						ЭТП, ЕИСФабрикаXDTO, ТипСтрокиПлана, ПланЗакупок, СтрокаПлана, T_customer,
						ПоляОписанияТранзакции,	ДанныеСтроки);
				КонецЕсли;
				СтрокиПлана[ИмяРеквизитаСтрокиПлана].Добавить(ДанныеСтроки);
				// Подготовим строки по приоритетному участию МСП
				Если НЕ флИнновационный И СтрокаПлана.ПриоритетУчастияМалогоИСреднегоПредпринимательства = Истина Тогда
					ДанныеСтроки = ПолучитьОписаниеСтрокиПланаЗакупок(
						ЭТП, ЕИСФабрикаXDTO, ТипСтрокиПлана, ПланЗакупок, СтрокаПлана,	T_customer,	ПоляОписанияТранзакции);
					Если ДанныеСтроки = Неопределено Тогда
						флОшибка = Истина;
						Продолжить;
					КонецЕсли;
					Если флИнновационный Тогда
						ЗаполнитьИнновационнуюСтрокуПланаЗакупок(
							ЭТП, ЕИСФабрикаXDTO, ТипСтрокиПлана, ПланЗакупок, СтрокаПлана, T_customer,
							ПоляОписанияТранзакции,	ДанныеСтроки);
					Иначе
						ЗаполнитьОбычнуюСтрокуПланаЗакупок(
							ЭТП, ЕИСФабрикаXDTO, ТипСтрокиПлана, ПланЗакупок, СтрокаПлана, T_customer,
							ПоляОписанияТранзакции, ДанныеСтроки);
					КонецЕсли;
					СтрокиПланаМСП[ИмяРеквизитаСтрокиПлана].Добавить(ДанныеСтроки);
				КонецЕсли;
			Иначе                              
				МассивОтмененныхСтрок.Добавить(СтрокаПлана);
			КонецЕсли;
		КонецЦикла;
		Если флОшибка Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДанныеПлана[ИмяРеквизитаСтрокПлана] = СтрокиПлана;
		ДанныеПлана[ИмяРеквизитаСтрокПланаМСП] = СтрокиПланаМСП;
		ДанныеПлана.isUploadComplete = Истина;
		ДанныеПлана.createDateTime = ПланЗакупок.Дата;
		//ДанныеПлана.urlOOS
		ДанныеПлана.urlVSRZ = "http://zakupki.gov.ru"; 
		Если ОписаниеРазмещеннойВерсии.Размещена Тогда
			Если НЕ ИнтеграцияЦУЗсЭТПСерверУХ.КорректныйНомерРегистрацииЕИС(ПланЗакупок) Тогда
				ТекстСообщения = НСтр("ru = 'У плана закупок не заполнен (или заполнен некорректно) регистрационный номер в ЕИС. '");
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ПоляОписанияТранзакции, ТекстСообщения);
				Возврат Неопределено;
			КонецЕсли;
			ДанныеПлана.registrationNumber = ПланЗакупок.РегистрационныйНомер;
		КонецЕсли;
		ОтчетныйГод = Формат(ПланЗакупок.ПериодЗакупок.ДатаНачала, "ДФ=yyyy");
		ДанныеПлана.name = ПодготовитьИмяПлана(ПланЗакупок.ОрганизацияДляЗаключенияДоговора, ОтчетныйГод);
		//ДанныеПлана.additionalInfo = ""; // Дополнительные сведения
		ДанныеПлана.startDate = ПланЗакупок.ПериодЗакупок.ДатаНачала;//ПланЗакупок.ПериодПланированияС;//ПланЗакупок.ПериодЗакупок.ДатаНачала;
		ДанныеПлана.endDate = ПланЗакупок.ПериодЗакупок.ДатаОкончания;//ПланЗакупок.ПериодПланированияПо;//ПланЗакупок.ПериодЗакупок.ДатаОкончания; 
		ДанныеПлана.approveDate = ПланЗакупок.ДатаУтверждения;
		ДанныеПлана.isDigitForm = Ложь;
		// Признак, что закупки осуществляются на сумму, не превышающую размер,
		// установленный в части 15 статьи 4 Закона № 223-ФЗ.
		ДанныеПлана.summSizeCh15 = ПланЗакупок.СуммаНеПревышаетРазмерСт4_15;
		Если ОписаниеВерсии.НомерВерсии > 0 Тогда
			ДанныеПлана.version = ОписаниеВерсии.НомерВерсии;
		Иначе
			// Не заполняем параметр version.
		КонецЕсли;	
		ДанныеПлана.modificationDescription = ПолучитьОбоснованиеПоОписаниюВерсии(ОписаниеВерсии);
		
		ДанныеПлана.useNewClassifiers = Истина;
		Вложения = СоздатьВложениеФайлов(ЭТП, ЕИСФабрикаXDTO, ПланЗакупок, T_purchasePlanData);
		Если Вложения <> Неопределено Тогда
			ДанныеПлана.attachments = Вложения;
		КонецЕсли;
		// Заполним строки по приоритетному участию МСП
		ИтоговыеСуммыПланаЗакупок = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьСуммыПланаЗакупок(ПланЗакупок);
		ДанныеПлана.excludeVolume					 = ИтоговыеСуммыПланаЗакупок.СуммаБезМСП;
		ДанныеПлана.volumeSMB						 = ИтоговыеСуммыПланаЗакупок.СуммаТолькоМСП;
		ДанныеПлана.annualVolume					 = ИтоговыеСуммыПланаЗакупок.СуммаДокумента;
		ДанныеПлана.percentSMB						 = ИтоговыеСуммыПланаЗакупок.ПроцентМСП;
		ДанныеПлана.smbPartitionChanged				 = ИнтеграцияЦУЗсЭТПСерверУХ.ИзмененРазделСМППланаЗакупок(ПланЗакупок);
		ДанныеПлана.annualVolumeSMBLess20Percent	 = (ИтоговыеСуммыПланаЗакупок.ПроцентМСП < 18);
		ДанныеПлана.reportingYear					 = Число(ОтчетныйГод);
		Если ОписаниеПлана = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ОписаниеПлана.Проверить();	
		ТекстОписания = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьТекстОписанияОбъекта(
			ЕИСФабрикаXDTO, ОписаниеПлана, ИменаТипов.T_purchasePlan);
		ТекстОписанияУдаление = "";	
		// Строки отменённых закупок.
	//	ДанныеПлана.registrationNumber=неопределено;
		
		Если МассивОтмененныхСтрок.Количество() > 0 Тогда
			ТекстОписанияУдаление = ПолучитьТекстОписанияУдалениеСтрок(ОписаниеОбмена, ПланЗакупок, ЕИСФабрикаXDTO, ИменаТипов, МассивОтмененныхСтрок, СтруктураОбщихДанныхПалана);
		Иначе                                                                                                                   
		КонецЕсли;	
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = Нстр("ru = 'Заполнение данных для отправки плана закупки закончилось ошибкой:
                        |%ПредставлениеОшибки%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПредставлениеОшибки%", Строка(ПодробноеПредставлениеОшибки(Инфо)));
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(ПоляОписанияТранзакции, ТекстОшибки, "ЕИС");
		Возврат Неопределено;
	КонецПопытки;
	Если ЗначениеЗаполнено(ТекстОписанияУдаление) Тогда
		РезультатФункции = ТекстОписания + Символы.ПС + ТекстОписанияУдаление;
	Иначе
		РезультатФункции = ТекстОписания;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

&НаСервере 
Функция ПроверкаСтрокПереходящегоПериода(ПланЗакупок)
	Результат = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтрокиПланаЗакупокСрезПоследних.СтрокаПлана КАК СтрокаПлана
		|ПОМЕСТИТЬ ПрошлыеСтроки
		|ИЗ
		|	РегистрСведений.СтрокиПланаЗакупок.СрезПоследних(
		|			,
		|			ОрганизацияДляЗаключенияДоговора = &ОрганизацияДляЗаключенияДоговора
		|				И ИнновационныйПланЗакупок = &Инновационный) КАК СтрокиПланаЗакупокСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(, ) КАК РегистрСостоянийОбъектовСрезПоследних
		|		ПО (РегистрСостоянийОбъектовСрезПоследних.Объект = СтрокиПланаЗакупокСрезПоследних.СтрокаПлана)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СтрокаПланаЗакупок.Финансирование КАК СтрокаПланаЗакупокФинансирование
		|		ПО (СтрокаПланаЗакупокФинансирование.ПериодФинансирования = &ПериодЗакупок)
		|			И СтрокиПланаЗакупокСрезПоследних.Регистратор = СтрокаПланаЗакупокФинансирование.Ссылка
		|ГДЕ
		|	РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта в (&Состояния)
		|			И СтрокиПланаЗакупокСрезПоследних.СтрокаПлана.ПериодЗакупок < &ПериодЗакупок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПрошлыеСтроки.СтрокаПлана КАК СтрокаПлана
		|ИЗ
		|	ПрошлыеСтроки КАК ПрошлыеСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтрокиПланаЗакупок.СрезПоследних(
		|				,
		|				ОрганизацияДляЗаключенияДоговора = &ОрганизацияДляЗаключенияДоговора
		|					И ИнновационныйПланЗакупок = &Инновационный
		|					И ПериодЗакупок = &ПериодЗакупок) КАК СтрокиПланаЗакупокСрезПоследних
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(, ) КАК РегистрСостоянийОбъектовСрезПоследних
		|			ПО (РегистрСостоянийОбъектовСрезПоследних.Объект = СтрокиПланаЗакупокСрезПоследних.СтрокаПлана)
		|		ПО ПрошлыеСтроки.СтрокаПлана = СтрокиПланаЗакупокСрезПоследних.Регистратор.СтрокаПереходящегоПериода
		|ГДЕ
		|	СтрокиПланаЗакупокСрезПоследних.Регистратор ЕСТЬ NULL";
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Размещен);
	МассивСостояний.Добавить(Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Выгружен);
	МассивСостояний.Добавить(Перечисления.СтатусыВыгружаемыхОбъектовЕИС.ОшибкиВыгрузки);
	МассивСостояний.Добавить(Перечисления.СостоянияСогласования.Утверждена);
	
	Запрос.УстановитьПараметр("Состояния", МассивСостояний);
	Запрос.УстановитьПараметр("ПериодЗакупок", ПланЗакупок.ПериодЗакупок);
	Запрос.УстановитьПараметр("ОрганизацияДляЗаключенияДоговора", ПланЗакупок.ОрганизацияДляЗаключенияДоговора);
	Запрос.УстановитьПараметр("Инновационный", ПланЗакупок.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат  РезультатЗапроса.Пустой();
КонецФункции

&НаСервере
Функция ПолучитьТекстОписанияДогрузкиПлана(ОписаниеОбмена, ЕИСФабрикаXDTO, ИменаТипов)
	ЭТП = ОписаниеОбмена.ЭТП;
	ПоляОписанияТранзакции = ОписаниеОбмена.ПоляОписанияТранзакции;
	ПланЗакупок = ОписаниеОбмена.ОбъектВыгрузки;
	ТекстОписания = Неопределено;
	Попытка
		ПространствоИмен = ИменаТипов.ПространствоИмен;
		КорневыеОбъекты = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьКорневыеОбъектыПространстваИмен(ЕИСФабрикаXDTO, ПространствоИмен);
		// Типы данных веб-сервиса
		T_purchasePlan = КорневыеОбъекты.Получить(ИменаТипов.T_purchasePlan).Тип;
		T_header = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_purchasePlan, "header");
		T_body = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_purchasePlan, "body");
		T_purchasePlanItem = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_body, "item");
		T_purchasePlanData = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_purchasePlanItem, ИменаТипов.T_purchasePlanData);
		// также используется для placer
		T_customer = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_purchasePlanData, "customer");
		// Объект XDTO План закупки
		ОписаниеПлана = ЕИСФабрикаXDTO.Создать(T_purchasePlan);
		// Заголовок пакета.
		
		ОписаниеПлана.header = ЕИСФабрикаXDTO.Создать(T_header);
		ОписаниеПлана.header.guid = ПоляОписанияТранзакции.КлючСообщения;
		ОписаниеПлана.header.createDateTime = ТекущаяДата();
		// Тело пакета
		ОписаниеПлана.body = ЕИСФабрикаXDTO.Создать(T_body);
		ОписаниеПлана.body.item = ЕИСФабрикаXDTO.Создать(T_purchasePlanItem);
		ОписаниеПлана.body.item.guid = Строка(Новый УникальныйИдентификатор);
		//ПланЗакупок.ДокументОснование.УИД_ЕИС
		ОписаниеПлана.body.item[ИменаТипов.T_purchasePlanData] = ЕИСФабрикаXDTO.Создать(T_purchasePlanData);
		
		// План закупки
		ДанныеПлана = ОписаниеПлана.body.item[ИменаТипов.T_purchasePlanData];
		// Определим УИД плана для ЕИС
		ОписаниеРазмещеннойВерсии = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьВерсиюОбъектаДляЕИС(ПланЗакупок, Истина);
		ОписаниеВерсии = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьВерсиюОбъектаДляЕИС(ПланЗакупок);
		Если ОписаниеВерсии.Размещена И ОписаниеВерсии.НомерВерсии > 0 Тогда
			ТекстСообщения = НСтр("ru = 'Для отправки, создайте новую версию плана для ЕИС'");
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ПоляОписанияТранзакции, ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		УИДПланаЗакупок = ОписаниеВерсии.ГУИДВерсии;
		СохранитьУИДОбъекта(ПланЗакупок,, УИДПланаЗакупок);
		ДанныеПлана.guid = ПланЗакупок.ДокументОснование.УИД_ЕИС;
		
		Если НЕ ЗначениеЗаполнено(ПланЗакупок.ОрганизацияДляЗаключенияДоговора) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена организация заказчик '");
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ПоляОписанияТранзакции, ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		customer = ПолучитьОписаниеОрганизации(
			ЕИСФабрикаXDTO,	T_customer,	ПланЗакупок.ОрганизацияДляЗаключенияДоговора, ПоляОписанияТранзакции);
		Если ПоляОписанияТранзакции.ОшибкаОбменаСЭТП Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДанныеПлана.customer = customer;
		placer = ПолучитьОписаниеОрганизации(
			ЕИСФабрикаXDTO,	T_customer,	ПланЗакупок.ОрганизацияДляЗаключенияДоговора, ПоляОписанияТранзакции);
		Если ПоляОписанияТранзакции.ОшибкаОбменаСЭТП Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДанныеПлана.placer = placer;
		флИнновационный = ПланЗакупок.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств;
		Если флИнновационный Тогда
			ДанныеПлана.planType = "INNOVATION";
		Иначе
			ДанныеПлана.planType = "COMMODITY";
		КонецЕсли;
		
		// Информация о лотах и суммах
		мСтрокиПлана = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьДобавленныеСтрокиПланаЗакупок(ПланЗакупок);
		
		Если мСтрокиПлана.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'У плана закупок нет строк'");
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ПоляОписанияТранзакции, ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		Если флИнновационный Тогда
			ИмяРеквизитаСтрокПлана = "innovationPlanItems";
			ИмяРеквизитаСтрокиПлана = "innovationPlanItem";
		Иначе
			ИмяРеквизитаСтрокПлана = "purchasePlanItems";
			ИмяРеквизитаСтрокиПлана = "purchasePlanItem";
		КонецЕсли;
		ИмяРеквизитаСтрокПланаМСП = ИмяРеквизитаСтрокПлана + "SMB";
		
		T_purchasePlanItems = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_purchasePlanData, ИмяРеквизитаСтрокПлана);
		СтрокиПлана = ЕИСФабрикаXDTO.Создать(T_purchasePlanItems);
		ТипСтрокиПлана = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_purchasePlanItems, ИмяРеквизитаСтрокиПлана);
		
		ТипСвойства = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_purchasePlanData, ИмяРеквизитаСтрокПланаМСП);
		СтрокиПланаМСП = ЕИСФабрикаXDTO.Создать(ТипСвойства);
		
		// Заполняем все строки плана
		флОшибка = Ложь;
		Для Каждого СтрокаПлана Из мСтрокиПлана Цикл
			ДанныеСтроки = ПолучитьОписаниеСтрокиПланаЗакупок(
				ЭТП, ЕИСФабрикаXDTO, ТипСтрокиПлана, ПланЗакупок, СтрокаПлана, T_customer, ПоляОписанияТранзакции);
			Если ДанныеСтроки = Неопределено Тогда
				флОшибка = Истина;
				Продолжить;
			КонецЕсли;
			
			Если флИнновационный Тогда
				ЗаполнитьИнновационнуюСтрокуПланаЗакупок(
				ЭТП, ЕИСФабрикаXDTO, ТипСтрокиПлана, ПланЗакупок, СтрокаПлана, T_customer, 
				ПоляОписанияТранзакции, ДанныеСтроки);
			Иначе
				ЗаполнитьОбычнуюСтрокуПланаЗакупок(
				ЭТП, ЕИСФабрикаXDTO, ТипСтрокиПлана, ПланЗакупок, СтрокаПлана, T_customer,
				ПоляОписанияТранзакции,	ДанныеСтроки);
			КонецЕсли;
			СтрокиПлана[ИмяРеквизитаСтрокиПлана].Добавить(ДанныеСтроки);
			// Подготовим строки по приоритетному участию МСП
			Если НЕ флИнновационный И СтрокаПлана.ПриоритетУчастияМалогоИСреднегоПредпринимательства = Истина Тогда
				ДанныеСтроки = ПолучитьОписаниеСтрокиПланаЗакупок(
					ЭТП, ЕИСФабрикаXDTO, ТипСтрокиПлана, ПланЗакупок, СтрокаПлана,	T_customer,	
					ПоляОписанияТранзакции);
				Если ДанныеСтроки = Неопределено Тогда
					флОшибка = Истина;
					Продолжить;
				КонецЕсли;
				Если флИнновационный Тогда
					ЗаполнитьИнновационнуюСтрокуПланаЗакупок(
					ЭТП, ЕИСФабрикаXDTO, ТипСтрокиПлана, ПланЗакупок, СтрокаПлана, T_customer,
					ПоляОписанияТранзакции,	ДанныеСтроки);
				Иначе
					ЗаполнитьОбычнуюСтрокуПланаЗакупок(
					ЭТП, ЕИСФабрикаXDTO, ТипСтрокиПлана, ПланЗакупок, СтрокаПлана, T_customer,
					ПоляОписанияТранзакции, ДанныеСтроки);
				КонецЕсли;
				СтрокиПланаМСП[ИмяРеквизитаСтрокиПлана].Добавить(ДанныеСтроки);
			КонецЕсли;
			
		КонецЦикла;
		
		Если флОшибка Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДанныеПлана[ИмяРеквизитаСтрокПлана] = СтрокиПлана;
		ДанныеПлана[ИмяРеквизитаСтрокПланаМСП] = СтрокиПланаМСП;
		ДанныеПлана.isUploadComplete = Истина;
		Если ОписаниеРазмещеннойВерсии.Размещена Тогда
			Если НЕ ИнтеграцияЦУЗсЭТПСерверУХ.КорректныйНомерРегистрацииЕИС(ПланЗакупок) Тогда
				ТекстСообщения = НСтр("ru = 'У плана закупок не заполнен (или заполнен некорректно) регистрационный номер в ЕИС! '");
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ПоляОписанияТранзакции, ТекстСообщения);
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		ОписаниеПлана.Проверить();	
		ТекстОписания = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПолучитьТекстОписанияОбъекта(
		ЕИСФабрикаXDTO, ОписаниеПлана, ИменаТипов.T_purchasePlan);
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = СтрШаблон(Нстр("ru = 'Заполнение данных для отправки плана закупки закончилось ошибкой!%1%2'"), 
		              	Символы.ПС, ПодробноеПредставлениеОшибки(Инфо));
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(ПоляОписанияТранзакции, ТекстОшибки, "ЕИС");
		Возврат Неопределено;
	КонецПопытки;
	Возврат ТекстОписания;
КонецФункции		// ПолучитьТекстОписанияДогрузкиПлана()

&НаСервере
Функция ПолучитьОписаниеСтрокиПланаЗакупок(
		ЭТП, ЕИСФабрикаXDTO, ТипСтрокиПлана, ПланЗакупок, СтрокаПлана, T_customer, ПоляОписанияТранзакции)
	ДанныеСтроки = ЕИСФабрикаXDTO.Создать(ТипСтрокиПлана);
	ОписаниеВерсии = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьВерсиюОбъектаДляЕИС(СтрокаПлана);
	СохранитьУИДОбъекта(СтрокаПлана, , ОписаниеВерсии.ГУИДВерсии);
	Если ИнтеграцияЦУЗсЭТПСерверУХ.КорректныйНомерРегистрацииЕИС(ПланЗакупок) Тогда
		parentGuid = ИнтеграцияЦУЗсЭТПСерверУХ.guidСтрокиПланаЗакупокПредыдущейОтправки(
			ЭТП, ПланЗакупок, СтрокаПлана);
	Иначе
		parentGuid = Неопределено;
	КонецЕсли;
	флЗакупкаУжеПередавалась = ЗначениеЗаполнено(parentGuid);
	// Base часть
	ДанныеСтроки.guid = ОписаниеВерсии.ГУИДВерсии;
	ДанныеСтроки.ordinalNumber = СтрокаПлана.НомерВГПЗ;
	Если ПустаяСтрока(СтрокаПлана.ПредметДоговора) Тогда
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
			ПоляОписанияТранзакции,	НСтр(СтрШаблон(
			"ru='Для строки плана закупок №%1 не указан предмет договора! '", 
			СтрокаПлана.НомерВГПЗ)) + Символы.ПС);
		Возврат Неопределено;
	КонецЕсли;
	ДанныеСтроки.contractSubject = 
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(СтрокаПлана.ПредметДоговора);
	ДанныеСтроки.planItemCustomer = ПолучитьОписаниеОрганизации(
		ЕИСФабрикаXDTO, T_customer, ПланЗакупок.ОрганизацияДляЗаключенияДоговора, ПоляОписанияТранзакции);
	Если ПоляОписанияТранзакции.ОшибкаОбменаСЭТП Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если НЕ ПустаяСтрока(СтрокаПлана.ОбщиеТребования) Тогда
		ДанныеСтроки.minimumRequirements = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			СтрокаПлана.ОбщиеТребования);
	КонецЕсли;
	ДанныеСтроки.contractEndDate = СтрокаПлана.ДатаИсполненияДоговора;
	Если ОписаниеВерсии.НомерВерсии > 0 Тогда
		ДанныеСтроки.modificationDescription = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			ОписаниеВерсии.ОбоснованиеИзменений);
	КонецЕсли;
	ПротоколОтменыЗакупки =
		ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьПротоколОтменыЗакупки(СтрокаПлана);
	флЗакрытСОтменой = ЗначениеЗаполнено(ПротоколОтменыЗакупки);
	Если флЗакрытСОтменой Тогда
		ДанныеСтроки.status = "A"; // Аннулирована
	ИначеЕсли флЗакупкаУжеПередавалась Тогда
		Если ОписаниеВерсии.Размещена Тогда
			ДанныеСтроки.status = "P"; // Размещена
			ДанныеСтроки.isPurchasePlaced = Истина;
		Иначе
			ДанныеСтроки.status = "C"; // Изменена
		КонецЕсли;
	Иначе
		ДанныеСтроки.status = "N"; // Новая
	КонецЕсли;
	Если ОписаниеВерсии.НомерВерсии > 0 Тогда
		Если СтрокаПлана.ИзменениеТРУиСроков Тогда 
			ДанныеСтроки.changedGWSAndDates = Истина;
		КонецЕсли;
		Если СтрокаПлана.ИзменениеБолееЧемНа10Процентов Тогда 
			ДанныеСтроки.changedNMSKMoreTenPercent = Истина;
		КонецЕсли;
		Если СтрокаПлана.ИзменениеВИныхСлучаях Тогда 
			ДанныеСтроки.otherChanges = Истина;
		КонецЕсли;
	КонецЕсли;
	Если флЗакрытСОтменой Тогда
		ПричинаАннулирования = ПротоколОтменыЗакупки.ПричинаАннулирования;
		Если ПричинаАннулирования = 
				Перечисления.ПричиныАннулированияПозицииПланаЗакупок.ОтказОтПроведенияЗакупки Тогда
			ДанныеСтроки.cancellationReason = "REJECT";
		ИначеЕсли ПричинаАннулирования = 
				Перечисления.ПричиныАннулированияПозицииПланаЗакупок.ПризнаниеТорговНедействительными Тогда
			ДанныеСтроки.cancellationReason = "INVALID";
		ИначеЕсли ПричинаАннулирования = 
				Перечисления.ПричиныАннулированияПозицииПланаЗакупок.ТоргиНеСостоялись Тогда
			ДанныеСтроки.cancellationReason = "NOT_PERFORMED";
		КонецЕсли;
	КонецЕсли;
	ДатаОбъявления = СтрокаПлана.ДатаОфициальногоОбъявленияЗакупки;
	ДатаИсполнения = СтрокаПлана.ДатаИсполненияДоговора;
	ЭтоДолгосрочнаяЗакупка = (Год(ДатаОбъявления) < Год(ДатаИсполнения));
	ДанныеСтроки.longTerm = ЭтоДолгосрочнаяЗакупка; 
	Если ЭтоДолгосрочнаяЗакупка Тогда
		ДанныеСтроки.shared = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаПлана.СтрокаПереходящегоПериода) Тогда
			initialPositionData = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(ТипСтрокиПлана, "initialPositionData");					
			ОписаниеОснования =   ЕИСФабрикаXDTO.Создать(initialPositionData);
			ОписаниеОснования.initialPlanGuid = ГуидПрограммыОснования(СтрокаПлана.СтрокаПереходящегоПериода);					
			ОписаниеОснования.initialPositionGUID = СтрокаПлана.СтрокаПереходящегоПериода.УИД_ЕИС;
			ДанныеСтроки.initialPositionData = ОписаниеОснования;
	КонецЕсли;	
	
	ЗаполнитьФинансированиеДолгосрочнойЗакупки(СтрокаПлана, ЕИСФабрикаXDTO, ТипСтрокиПлана, ПоляОписанияТранзакции, ДанныеСтроки);	
	// Special часть
	//Если ЭтоДолгосрочнаяЗакупка Тогда
	//	ДанныеСтроки.shared = Истина;
	//КонецЕсли;	
	НовыйГуид = РегистрыСведений.ВерсииОбъектовДляЕИС.ПолучитьГуидПервойВерсииСтрокиПлана(СтрокаПлана, Истина, ПланЗакупок.ДокументОснование);
	Если ЗначениеЗаполнено(НовыйГуид) Тогда
		ДанныеСтроки.parentId = НовыйГуид;
	Иначе
		// Значение не получено. Пропускаем.
	КонецЕсли;
	Возврат ДанныеСтроки;	
КонецФункции

// Возвращает XDTO-описание для удалённой строки плана закупок СтрокаПлана.
&НаСервере
Функция ПолучитьОписаниеОтмененнойСтрокиПланаЗакупок(ЕИСФабрикаXDTO, ТипСтрокиПлана, СтрокаПлана)
	ДанныеСтроки = ЕИСФабрикаXDTO.Создать(ТипСтрокиПлана);
	ОписаниеВерсии = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьВерсиюОбъектаДляЕИС(СтрокаПлана);
	СохранитьУИДОбъекта(СтрокаПлана, , ОписаниеВерсии.ГУИДВерсии);
	ДанныеСтроки.guid = ОписаниеВерсии.ГУИДВерсии;
	Возврат ДанныеСтроки;	
КонецФункции		 // ПолучитьОписаниеОтмененнойСтрокиПланаЗакупок()

// Выполняет заполнение элемента longTermVolume и longTermSMBVolumes для долгосрочной закупки.
&НаСервере
Функция ЗаполнитьФинансированиеДолгосрочнойЗакупки(СтрокаПлана, ЕИСФабрикаXDTO, ТипСтрокиПлана, ПоляОписанияТранзакции, ДанныеСтроки)
	// Проверим необходимость внесения данных по финансированию
	РазличаетсяГод = (Год(СтрокаПлана.ДатаОфициальногоОбъявленияЗакупки) <> Год(СтрокаПлана.ДатаИсполненияДоговора));
	ЕстьДанныеФинансирования = (СтрокаПлана.Финансирование.Количество() > 0);
	ТребуетсяУказаниеФинансирования = (РазличаетсяГод И ЕстьДанныеФинансирования);

	Если ТребуетсяУказаниеФинансирования Тогда
		// Типы данных XDTO.
		T_longTermVolumeType		 = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(ТипСтрокиПлана, "longTermVolumes");
		T_currencyType				 = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(ТипСтрокиПлана, "currency");
		T_longTermVolumeDetailList	 = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_longTermVolumeType, "details");
		T_longTermVolumeDetail		 = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(T_longTermVolumeDetailList, "longTermVolumeDetail");
		// Получение данных из шапки документа.
		ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		ВалютаДокумента				 = СтрокаПлана.ВалютаДокумента;
		currency_Рабочая			 = ПолучитьОписаниеВалюты(ЕИСФабрикаXDTO, ПоляОписанияТранзакции, T_currencyType, ВалютаДокумента);
		СуммаФинансированияОбщ		 = СтрокаПлана.Финансирование.Итог("Сумма");
		СуммаФинансированияСМП		 = СтрокаПлана.Финансирование.Итог("СуммаСМП");
		ДатаКурсаРабочая = ТекущаяДатаСеанса();
		Если ЗначениеЗаполнено(СтрокаПлана.ДатаКурса) Тогда
			ДатаКурсаРабочая = СтрокаПлана.ДатаКурса;
		Иначе
			ДатаКурсаРабочая = ТекущаяДатаСеанса();
		КонецЕсли;
		СуммаФинансированияОбщРуб	 = РаботаСКурсамиВалют.ПересчитатьВВалюту(СуммаФинансированияОбщ, ВалютаДокумента, ВалютаРеглУчета, ДатаКурсаРабочая);
		СуммаФинансированияСмпРуб	 = РаботаСКурсамиВалют.ПересчитатьВВалюту(СуммаФинансированияСМП, ВалютаДокумента, ВалютаРеглУчета, ДатаКурсаРабочая);
		// Заполнение верхего узла общего финансирования.
		ОписаниеФинансирования = ЕИСФабрикаXDTO.Создать(T_longTermVolumeType);
		ОписаниеФинансирования.currency			 = currency_Рабочая;
		ОписаниеФинансирования.exchangeRate		 = СтрокаПлана.КурсВалюты;
		ОписаниеФинансирования.exchangeRateDate	 = ДатаКурсаРабочая;
		ОписаниеФинансирования.volume			 = СуммаФинансированияОбщ;
		ОписаниеФинансирования.volumeRub		 = СуммаФинансированияОбщРуб;
		// Заполнение узла-списка Объём оплаты долгосрочного договора. 
		ОписаниеФинансирования.details			 = ЕИСФабрикаXDTO.Создать(T_longTermVolumeDetailList);
		ОписаниеДеталиСписок = ОписаниеФинансирования.details;
		Для Каждого ТекФинансирование Из СтрокаПлана.Финансирование Цикл
			ТекСуммаФинансирования	 = ТекФинансирование.Сумма;
			ТекПериодФинансирования	 = ТекФинансирование.ПериодФинансирования;
			Если ЗначениеЗаполнено(ТекПериодФинансирования) Тогда
				ТекСуммаРуб = РаботаСКурсамиВалют.ПересчитатьВВалюту(ТекСуммаФинансирования, ВалютаДокумента, ВалютаРеглУчета, ДатаКурсаРабочая);
				ОписаниеДеталиЭлемент = ЕИСФабрикаXDTO.Создать(T_longTermVolumeDetail);
				ОписаниеДеталиЭлемент.summ		 = ТекСуммаФинансирования;
				ОписаниеДеталиЭлемент.summRub	 = ТекСуммаРуб;				
				ОписаниеДеталиЭлемент.year		 = Год(ТекПериодФинансирования.ДатаНачала);
				ОписаниеДеталиСписок.longTermVolumeDetail.Добавить(ОписаниеДеталиЭлемент);
			Иначе
				// Период не указан. Пропускаем строку.
			КонецЕсли;
		КонецЦикла;	
		ДанныеСтроки.longTermVolumes = ОписаниеФинансирования;
		// Заполнение верхего узла финансирования СМП.
		currency_РабочаяСмп = ПолучитьОписаниеВалюты(ЕИСФабрикаXDTO, ПоляОписанияТранзакции, T_currencyType, ВалютаДокумента);
		ОписаниеФинансированияСмп = ЕИСФабрикаXDTO.Создать(T_longTermVolumeType);
		ОписаниеФинансированияСмп.currency			 = currency_РабочаяСмп;
		ОписаниеФинансированияСмп.exchangeRate		 = СтрокаПлана.КурсВалюты;
		ОписаниеФинансированияСмп.exchangeRateDate	 = ДатаКурсаРабочая;
		ОписаниеФинансированияСмп.volume			 = СуммаФинансированияСМП;
		ОписаниеФинансированияСмп.volumeRub			 = СуммаФинансированияСмпРуб;
		// Заполнение узла-списка Объём оплаты долгосрочного договора. 
		ОписаниеФинансированияСмп.details			 = ЕИСФабрикаXDTO.Создать(T_longTermVolumeDetailList);
		ОписаниеДеталиСписокСМП = ОписаниеФинансированияСмп.details;
		Для Каждого ТекФинансирование Из СтрокаПлана.Финансирование Цикл
			ТекСуммаФинансирования	 = ТекФинансирование.СуммаСМП;
			ТекПериодФинансирования	 = ТекФинансирование.ПериодФинансирования;
			Если ЗначениеЗаполнено(ТекПериодФинансирования) Тогда
				ТекСуммаРуб = РаботаСКурсамиВалют.ПересчитатьВВалюту(ТекСуммаФинансирования, ВалютаДокумента, ВалютаРеглУчета, ДатаКурсаРабочая);
				ОписаниеДеталиЭлементСМП = ЕИСФабрикаXDTO.Создать(T_longTermVolumeDetail);
				ОписаниеДеталиЭлементСМП.summ		 = ТекСуммаФинансирования;
				ОписаниеДеталиЭлементСМП.summRub	 = ТекСуммаРуб;				
				ОписаниеДеталиЭлементСМП.year		 = Год(ТекПериодФинансирования.ДатаНачала);
				ОписаниеДеталиСписокСМП.longTermVolumeDetail.Добавить(ОписаниеДеталиЭлементСМП);
			Иначе
				// Период не указан. Пропускаем строку.
			КонецЕсли;
		КонецЦикла;	
		ДанныеСтроки.longTermSMBVolumes = ОписаниеФинансированияСмп;
	Иначе
		// Заполнение данных финансирования по данной строке плана не требуется.
	КонецЕсли;
КонецФункции		 // ЗаполнитьФинансированиеДолгосрочнойЗакупки()

&НаСервере
Функция ЗаполнитьОбычнуюСтрокуПланаЗакупок(ЭТП,
											ЕИСФабрикаXDTO, 
											ТипСтрокиПлана, 
											ПланЗакупок, 
											СтрокаПлана, 
											T_customer, 
											ПоляОписанияТранзакции, 
											ДанныеСтроки)
	Если ЗначениеЗаполнено(СтрокаПлана.МестоПоставки) Тогда
		Если НЕ ПустаяСтрока(СтрокаПлана.МестоПоставки.КодПоОКАТО) Тогда
			ДанныеСтроки.okato = СокрЛП(СтрокаПлана.МестоПоставки.КодПоОКАТО);
		КонецЕсли;
		//АдресМестаПоставкиЛота = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(Лот.МестоПоставки.Адрес);
		//Если НЕ ПустаяСтрока(АдресМестаПоставкиЛота) Тогда
		//	ДанныеСтроки.region = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(АдресМестаПоставкиЛота);
		//КонецЕсли;
	КонецЕсли;
	ДанныеСтроки.isGeneralAddress = Истина;
	ЗаполнитьВДанныхСтрокиПланаЗакупокСуммуИВалюту(
				ЕИСФабрикаXDTO, 
				ПоляОписанияТранзакции,
				ТипСтрокиПлана, 
				СтрокаПлана, 
				ДанныеСтроки);
	Если ЗначениеЗаполнено(СтрокаПлана.ПорядокФормированияЦеныДоговора) Тогда
		ДанныеСтроки.orderPricing = 
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				СтрокаПлана.ПорядокФормированияЦеныДоговора);
	КонецЕсли;
	ДанныеСтроки.purchasePeriodYear = Число(Формат(СтрокаПлана.ДатаОфициальногоОбъявленияЗакупки, "ДФ=yyyy"));
	ДанныеСтроки.purchasePeriodQuarter = Число(Формат(СтрокаПлана.ДатаОфициальногоОбъявленияЗакупки, "ДФ=q"));
	ДанныеСтроки.purchasePeriodMonth = Число(Формат(СтрокаПлана.ДатаОфициальногоОбъявленияЗакупки, "ДФ=MM"));
	Если ЗначениеЗаполнено(СтрокаПлана.СпособВыбораПоставщика) Тогда
		НаименованиеСпособаВыбора = "";
		КодСпособаВыбора = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьКодЗакупкиВЕИС(
				СтрокаПлана.СпособВыбораПоставщика,
				СтрокаПлана.ЗакрытаяЗакупка,
				СтрокаПлана.ВЭлектроннойФорме,
				НаименованиеСпособаВыбора);
		ДанныеСтроки.purchaseMethodCode = КодСпособаВыбора;
		Если НЕ ПустаяСтрока(НаименованиеСпособаВыбора) Тогда
			ДанныеСтроки.purchaseMethodName = 
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
					НаименованиеСпособаВыбора);
		КонецЕсли;
	Иначе
		ДанныеСтроки.purchaseMethodCode = 0;
	КонецЕсли;
	ДанныеСтроки.isElectronic = СтрокаПлана.ВЭлектроннойФорме;

	// Заполняем строки лота
	ПозицииСтрокиПлана = ПолучитьpurchasePlanDataItemRows(
							ЭТП, 
							ЕИСФабрикаXDTO, 
							ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
									ТипСтрокиПлана, 
									"purchasePlanDataItemRows"), 
							СтрокаПлана, 
							ПоляОписанияТранзакции);
	Если ПозицииСтрокиПлана <> Неопределено Тогда
		ДанныеСтроки.purchasePlanDataItemRows = ПозицииСтрокиПлана;
	КонецЕсли;
	ДанныеСтроки.isPurchaseIgnored = СтрокаПлана.НеУчитыватьПриРасчетеДолиЗакупокУСМП;
	Если СтрокаПлана.НеУчитыватьПриРасчетеДолиЗакупокУСМП 
			И ЗначениеЗаполнено(СтрокаПлана.КатегорияЗакупкиДляИсключенияИзГОЗ) Тогда
		ДанныеСтроки.purchaseCategory = СтрокаПлана.КатегорияЗакупкиДляИсключенияИзГОЗ.КодВЕИС;
	КонецЕсли;
	ДанныеСтроки.innovationEquivalent =
		СтрокаПлана.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств;
		
	ЗакупкаБольшеДвухЛет = (ДобавитьМесяц(СтрокаПлана.ДатаОфициальногоОбъявленияЗакупки, 2*12) < СтрокаПлана.ДатаИсполненияДоговора);
	//ДанныеСтроки.plannedAfterSecondYear = ЗакупкаБольшеДвухЛет;
	ДанныеСтроки.maximumContractPriceFromBudget = Ложь;
	ДанныеСтроки.amountExpenseOfBudget = 0;
	T_positionFinancialProvisionVolumes = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(ТипСтрокиПлана, "positionFinancialProvisionVolumes");
	positionFinancialProvisionVolumes = ЕИСФабрикаXDTO.Создать(T_positionFinancialProvisionVolumes);
	ДанныеСтроки.positionFinancialProvisionVolumes = positionFinancialProvisionVolumes;
	Возврат ДанныеСтроки;	
КонецФункции

&НаСервере
Функция ЗаполнитьИнновационнуюСтрокуПланаЗакупок(
												ЭТП,
												ЕИСФабрикаXDTO, 
												ТипСтрокиПлана, 
												ПланЗакупок, 
												СтрокаПлана, 
												T_customer, 
												ПоляОписанияТранзакции, 
												ДанныеСтроки)
	ДанныеСтроки.ignoredPurchase = СтрокаПлана.НеУчитыватьПриРасчетеДолиЗакупокУСМП;
	Если СтрокаПлана.НеУчитыватьПриРасчетеДолиЗакупокУСМП
			И ЗначениеЗаполнено(СтрокаПлана.КатегорияЗакупкиДляИсключенияИзГОЗ) Тогда
		ДанныеСтроки.purchaseCategory =
			СтрокаПлана.КатегорияЗакупкиДляИсключенияИзГОЗ.КодВЕИС;
	КонецЕсли;
	ЗаполнитьВДанныхСтрокиПланаЗакупокСуммуИВалюту(
										ЕИСФабрикаXDTO, 
										ПоляОписанияТранзакции,
										ТипСтрокиПлана, 
										СтрокаПлана, 
										ДанныеСтроки);
	Если ЗначениеЗаполнено(СтрокаПлана.ПорядокФормированияЦеныДоговора) Тогда
		ДанныеСтроки.orderPricing =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				СтрокаПлана.ПорядокФормированияЦеныДоговора);
	КонецЕсли;
	ДанныеСтроки.purchasePeriodYear =
		Число(Формат(СтрокаПлана.ДатаОфициальногоОбъявленияЗакупки, "ДФ=yyyy"));
	// Заполняем строки лота
	ПозицииЛота = ПолучитьinnovationPlanDataItemRows(
					ЭТП,
					ЕИСФабрикаXDTO, 
					ИнтеграцияЦУЗсЭТПКлиентСерверУХ.
					ТипСвойстваИзТипаОбъекта(
						ТипСтрокиПлана, "innovationPlanDataItemRows"), 
					СтрокаПлана, 
					ПоляОписанияТранзакции);
	Если ПозицииЛота <> Неопределено Тогда
		ДанныеСтроки.innovationPlanDataItemRows = ПозицииЛота;
	КонецЕсли;

	ДанныеСтроки.innovationEquivalent =
		СтрокаПлана.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств;
	
	Возврат ДанныеСтроки;	
КонецФункции

// Опреляет текстовое представление типа закупки для ЕИС по номенклатуре
// НоменклатураВход. Варианты: G - Товар; W - работа; S - услуга.
&НаСервереБезКонтекста
Функция ОпределитьКодТипаОбъектаЗакупки(НоменклатураВход)
	РезультатФункции = "G";
	Если ТипЗнч(НоменклатураВход) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если НоменклатураВход.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
			РезультатФункции = "S";
		ИначеЕсли НоменклатураВход.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
			РезультатФункции = "W";
		Иначе
			РезультатФункции = "G";
		КонецЕсли;
	ИначеЕсли ТипЗнч(НоменклатураВход) = Тип("СправочникСсылка.ТоварныеКатегории") Тогда
		РезультатФункции = "G";
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный вариант номенклатуры: ""%Номенклатура%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номенклатура%", Строка(НоменклатураВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = "G";
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		 // ОпределитьКодТипаОбъектаЗакупки()

&НаСервере
Функция ПолучитьpurchasePlanDataItemRows(ЭТП,
										ЕИСФабрикаXDTO, 
										T_purchasePlanDataItemRows, 
										СтрокаПлана, 
										ПоляОписанияТранзакции)
	ТекстОшибки = "";
	ТЗНоменклатуры = 
		ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьОписаниеНоменклатурыСтрокиПланаЗакупок(
			СтрокаПлана, 
			ТекстОшибки);
	Если ТЗНоменклатуры = Неопределено Тогда
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
			ПоляОписанияТранзакции, 
			ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	Если ТЗНоменклатуры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	T_purchasePlanRowItem = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
		T_purchasePlanDataItemRows, "purchasePlanRowItem");
	T_okei = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
		T_purchasePlanRowItem, "okei");
	T_okpd2 = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
		T_purchasePlanRowItem, "okpd2");
	T_okved = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
		T_purchasePlanRowItem, "okved");
	T_okved2 = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
		T_purchasePlanRowItem, "okved2");
	purchasePlanDataItemRows = ЕИСФабрикаXDTO.Создать(T_purchasePlanDataItemRows);
	ТекстОшибки = "";
	НомерСтроки_ = 1;
	Для Каждого СтрокаНоменклатуры Из ТЗНоменклатуры Цикл
		// Создаем описание позиции лота
		ОписаниеПозиции = ЕИСФабрикаXDTO.Создать(T_purchasePlanRowItem);
		//Идентификатор позиции
		УИД_СтрокиНоменклатуры = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьУИД_Идентификатора(
			ЭТП, СтрокаНоменклатуры.Идентификатор);
		СохранитьУИДОбъекта(Неопределено,	
							СтрШаблон(Нстр("ru = 'Строка номенклатуры №%1'"), СтрокаНоменклатуры.Идентификатор),
							УИД_СтрокиНоменклатуры);
		ОписаниеПозиции.guid = УИД_СтрокиНоменклатуры;
		ОписаниеПозиции.ordinalNumber = НомерСтроки_; //Порядковый номер позиции
		// Доп. информация позиции
		Если НЕ ПустаяСтрока(СтрокаНоменклатуры.НоменклатураНаименование) Тогда
			ОписаниеПозиции.additionalInfo =
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
					СтрокаНоменклатуры.НоменклатураНаименование);
		КонецЕсли;
		// ОКПД2
		Если НЕ ЗначениеЗаполнено(СтрокаНоменклатуры.КодОКПД2) Тогда
			ТекстОшибкаСтроки = НСтр("ru = 'В строке плана закупок №%НомерВГПЗ% у номенклатуры %НоменклатураНаименование% не указан ОКПД2. '");
			ТекстОшибкаСтроки = СтрЗаменить(ТекстОшибкаСтроки, "%НомерВГПЗ%", Строка(СтрокаПлана.НомерВГПЗ));
			ТекстОшибкаСтроки = СтрЗаменить(ТекстОшибкаСтроки, "%НоменклатураНаименование%", Строка(СтрокаНоменклатуры.НоменклатураНаименование));
			ТекстОшибки = ТекстОшибки + ТекстОшибкаСтроки + Символы.ПС;
		Иначе
			ОписаниеПозиции.okpd2 = ЕИСФабрикаXDTO.Создать(T_okpd2);
			ОписаниеПозиции.okpd2.code = СокрЛП(СтрокаНоменклатуры.КодОКПД2);
		КонецЕсли;
		// ОКВЭД2
		Если НЕ ЗначениеЗаполнено(СтрокаНоменклатуры.КодОКВЭД2) Тогда
			ТекстОшибкаСтроки = НСтр("ru = 'В строке плана закупок №%НомерВГПЗ% у номенклатуры %НоменклатураНаименование% не указан ОКВЭД2. '");
			ТекстОшибкаСтроки = СтрЗаменить(ТекстОшибкаСтроки, "%НомерВГПЗ%", Строка(СтрокаПлана.НомерВГПЗ));
			ТекстОшибкаСтроки = СтрЗаменить(ТекстОшибкаСтроки, "%НоменклатураНаименование%", Строка(СтрокаНоменклатуры.НоменклатураНаименование));
			ТекстОшибки = ТекстОшибки + ТекстОшибкаСтроки + Символы.ПС;
		Иначе
			ОписаниеПозиции.okved2 = ЕИСФабрикаXDTO.Создать(T_okved2);
			ОписаниеПозиции.okved2.code = СокрЛП(СтрокаНоменклатуры.КодОКВЭД2);
		КонецЕсли;
		// Место доставки поставляемых товаров/выполнения работ/оказания услуг.
		// Адрес физический полный. Внимание: одно место поставки для всех позиций лота.
		Если ЗначениеЗаполнено(СтрокаНоменклатуры.МестоПоставкиОКАТО) Тогда
			ОписаниеПозиции.okato = СтрокаНоменклатуры.МестоПоставкиОКАТО;
		КонецЕсли;
		Если СтрокаНоменклатуры.Количество > 0 Тогда
			// Единицы измерения
			ОписаниеПозиции.okei = ЕИСФабрикаXDTO.Создать(T_okei);
			ОписаниеПозиции.okei.code = СокрЛП(СтрокаНоменклатуры.ЕдиницаИзмеренияКод);
			// Количество
			ОписаниеПозиции.qty = СтрокаНоменклатуры.Количество;
		Иначе
			ОписаниеПозиции.impossibleToDetermineAttr = Истина;
		КонецЕсли;
		ОписаниеПозиции.typeObjectPurchase = ОпределитьКодТипаОбъектаЗакупки(СтрокаНоменклатуры.Номенклатура);
		
		purchasePlanDataItemRows.purchasePlanRowItem.Добавить(ОписаниеПозиции);
		
		НомерСтроки_ = НомерСтроки_ + 1;
	КонецЦикла;
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ПоляОписанияТранзакции, ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	Возврат purchasePlanDataItemRows;
КонецФункции

&НаСервере
Функция ПолучитьinnovationPlanDataItemRows(
							ЭТП, 
							ЕИСФабрикаXDTO, 
							T_innovationPlanDataItemRows, 
							СтрокаПлана, 
							ПоляОписанияТранзакции)
	ТекстОшибки = "";
	ТЗНоменклатуры =
		ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьОписаниеНоменклатурыСтрокиПланаЗакупок(
			СтрокаПлана, 
			ТекстОшибки);
	Если ТЗНоменклатуры = Неопределено Тогда
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
			ПоляОписанияТранзакции, ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	Если ТЗНоменклатуры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	T_innovationPlanRowItem = 
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_innovationPlanDataItemRows, "innovationPlanRowItem");
	T_okpd2 = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
		T_innovationPlanRowItem, "okpd2");
	T_okved = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
		T_innovationPlanRowItem, "okved");
	T_okved2 = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
		T_innovationPlanRowItem, "okved2");
	
	innovationPlanDataItemRows =
		ЕИСФабрикаXDTO.Создать(T_innovationPlanDataItemRows);
	ТекстОшибки = "";
	НомерСтроки_ = 1;
	Для Каждого СтрокаНоменклатуры Из ТЗНоменклатуры Цикл
		// Создаем описание позиции лота
		ОписаниеПозиции = ЕИСФабрикаXDTO.Создать(T_innovationPlanRowItem);
		//Идентификатор позиции
		УИД_СтрокиНоменклатуры =
			ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьУИД_Идентификатора(
				ЭТП, СтрокаНоменклатуры.Идентификатор);
		СохранитьУИДОбъекта(
			Неопределено,
			СтрШаблон(Нстр("ru = 'Строка номенклатуры №%1'"), СтрокаНоменклатуры.Идентификатор),
			УИД_СтрокиНоменклатуры);
		ОписаниеПозиции.guid = УИД_СтрокиНоменклатуры;
		ОписаниеПозиции.ordinalNumber = НомерСтроки_; //Порядковый номер позиции
		// Доп. информация позиции
		Если НЕ ПустаяСтрока(СтрокаНоменклатуры.НоменклатураНаименование) Тогда
			ОписаниеПозиции.additionalInfo =
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
					СтрокаНоменклатуры.НоменклатураНаименование);
		КонецЕсли;
		// ОКПД2
		Если НЕ ЗначениеЗаполнено(СтрокаНоменклатуры.КодОКПД2) Тогда
			ТекстОшибкаСтрока = НСтр("ru = 'В лоте %СтрокаПлана% у номенклатуры %НоменклатураНаименование% не указан ОКПД2. '");
			ТекстОшибкаСтрока = СтрЗаменить(ТекстОшибкаСтрока, "%СтрокаПлана%", Строка(СтрокаПлана));
			ТекстОшибкаСтрока = СтрЗаменить(ТекстОшибкаСтрока, "%НоменклатураНаименование%", Строка(СтрокаНоменклатуры.НоменклатураНаименование));
			ТекстОшибки = ТекстОшибки + ТекстОшибкаСтрока + Символы.ПС;
		Иначе
			ОписаниеПозиции.okpd2 = ЕИСФабрикаXDTO.Создать(T_okpd2);
			ОписаниеПозиции.okpd2.code = СокрЛП(СтрокаНоменклатуры.КодОКПД2);
		КонецЕсли;
		// ОКВЭД2
		Если НЕ ЗначениеЗаполнено(СтрокаНоменклатуры.КодОКВЭД2) Тогда
			ТекстОшибкаСтрока = НСтр("ru = 'В лоте %СтрокаПлана% у номенклатуры %НоменклатураНаименование% не указан ОКВЭД2. '");
			ТекстОшибкаСтрока = СтрЗаменить(ТекстОшибкаСтрока, "%СтрокаПлана%", Строка(СтрокаПлана));
			ТекстОшибкаСтрока = СтрЗаменить(ТекстОшибкаСтрока, "%НоменклатураНаименование%", Строка(СтрокаНоменклатуры.НоменклатураНаименование));
			ТекстОшибки = ТекстОшибки + ТекстОшибкаСтрока + Символы.ПС;
		Иначе
			ОписаниеПозиции.okved2 = ЕИСФабрикаXDTO.Создать(T_okved2);
			ОписаниеПозиции.okved2.code = СокрЛП(СтрокаНоменклатуры.КодОКВЭД2);
		КонецЕсли;
		innovationPlanDataItemRows.innovationPlanRowItem.Добавить(ОписаниеПозиции);
		НомерСтроки_ = НомерСтроки_ + 1;
	КонецЦикла;
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
			ПоляОписанияТранзакции, ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	Возврат innovationPlanDataItemRows;
КонецФункции

&НаСервере
Процедура ЗаполнитьВДанныхСтрокиПланаЗакупокСуммуИВалюту(ЕИСФабрикаXDTO, ПоляОписанияТранзакции, ТипСтрокиПлана, 
	СтрокаПлана, ДанныеСтроки)
	// Инициализация.										
	ТипCurrency = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(ТипСтрокиПлана, "currency");										
	ВалютаДокумента = СтрокаПлана.ВалютаДокумента;
	ДатаКурса = СтрокаПлана.ДатаКурса;
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	// Получение итоговых сумм.
	ДатаОбъявления = СтрокаПлана.ДатаОфициальногоОбъявленияЗакупки;
	ДатаИсполнения = СтрокаПлана.ДатаИсполненияДоговора;
	БольшеГода = ЦентрализованныеЗакупкиКлиентСерверУХ.ЗакупкаБольшеГода(ДатаОбъявления, ДатаИсполнения);
	Если БольшеГода Тогда
		ИтоговаяСумма = СтрокаПлана.СуммаКонтракта;
		Если ЗначениеЗаполнено(СтрокаПлана.СуммаКонтрактаВВалютеРегламентированногоУчета) Тогда
			ИтоговаяСуммаРуб = СтрокаПлана.СуммаКонтрактаВВалютеРегламентированногоУчета;
		Иначе
			ИтоговаяСуммаРуб = РаботаСКурсамиВалют.ПересчитатьВВалюту(ИтоговаяСумма, ВалютаДокумента, ВалютаРеглУчета, ДатаКурса);
		КонецЕсли;
	Иначе
		ИтоговаяСумма = СтрокаПлана.СуммаДокумента;
		ИтоговаяСуммаРуб = СтрокаПлана.СуммаВВалютеРегламентированногоУчета;
	КонецЕсли;
	// Заполнение НМЦ.
	ДанныеСтроки.maximumContractPrice = ИтоговаяСумма;     	
	// Заполнение валюты.
	currency = ПолучитьОписаниеВалюты(ЕИСФабрикаXDTO, ПоляОписанияТранзакции, ТипCurrency, ВалютаДокумента);
	Если currency = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеСтроки.currency = currency;
	// Заполнение НМЦ в рублях.
	Если ЗначениеЗаполнено(ИтоговаяСуммаРуб) Тогда
		ДанныеСтроки.exchangeRate				 = СтрокаПлана.КурсВалюты;
		ДанныеСтроки.exchangeRateDate			 = ДатаКурса;
		ДанныеСтроки.maximumContractPriceRub	 = ИтоговаяСуммаРуб;
	КонецЕсли;
КонецПроцедуры


#КонецОбласти


#Область ПолучениеОписанияУниверсальныхОбъектов


&НаСервереБезКонтекста
Функция ПолучитьОписаниеВалюты(ЕИСФабрикаXDTO, ПоляОписанияТранзакции, T_currency, Валюта = Неопределено)
	ДанныеВалюты = ЕИСФабрикаXDTO.Создать(T_currency); 
	Если ЗначениеЗаполнено(Валюта) Тогда
		ДанныеВалюты.code = СокрЛП(Валюта.Наименование);
		Если НЕ ЗначениеЗаполнено(Валюта.Код) Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ПоляОписанияТранзакции,
				СтрШаблон(Нстр("ru = 'Не у валюты ""%1"" не указан числовой код! '"), Валюта));
		Возврат Неопределено;
	КонецЕсли;
		ДанныеВалюты.digitalCode = Валюта.Код;
		ДанныеВалюты.name = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			Валюта.НаименованиеПолное);
	Иначе
		ДанныеВалюты.code = "RUB";
		ДанныеВалюты.digitalCode = "643";
		ДанныеВалюты.name = Нстр("ru = 'Российский рубль'");
	КонецЕсли;
	Возврат ДанныеВалюты;
КонецФункции

&НаСервере
Функция СоздатьВложениеФайлов(ЭТП, ЕИСФабрикаXDTO, ВладелецФайлов, T_purchasePlanData)
	T_documentListType = 
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
			T_purchasePlanData,
			"attachments");
	флЗарегистрированНаЕИС = ИнтеграцияЦУЗсЭТПСерверУХ.КорректныйНомерРегистрацииЕИС(ВладелецФайлов);
	МассивОписанийФайлов = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьФайлыВладельца(ВладелецФайлов);
	Если МассивОписанийФайлов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	// Новые и измененные документы
	T_document = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
					T_documentListType,
					"document");
	Если флЗарегистрированНаЕИС Тогда
		// Не измененные документы
		T_prevDocument = ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
						T_documentListType,
						"prevDocument");
	КонецЕсли;
	Вложения = ЕИСФабрикаXDTO.Создать(T_documentListType);
	//Вложения.totalDocumentsCount = МассивОписанийФайлов.Количество();
	ТекущееИмяФайла = "";
	Для Каждого ОписаниеФайла Из МассивОписанийФайлов Цикл
		ДвоичныеДанныеФайла = ИнтеграцияЦУЗсЭТПСерверУХ.ДвоичныеДанныеФайла(ОписаниеФайла);
		Если ДвоичныеДанныеФайла = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТекущееИмяФайла = ОписаниеФайла.Наименование
			+ ?(ПустаяСтрока(ОписаниеФайла.Расширение), "", "." + ОписаниеФайла.Расширение);
		Если ОписаниеФайла.Свойство("ИдентификаторВерсии") Тогда
			ИмяКлючаФайла = "File_" + "_" + ТекущееИмяФайла + "_" + ОписаниеФайла.ИдентификаторВерсии;
			ФайлУИД = ИнтеграцияЦУЗсЭТПСерверУХ.ЗначениеРеквизитаЭТП(ЭТП, ВладелецФайлов, ИмяКлючаФайла);
		Иначе
			ФайлУИД = Неопределено;
		КонецЕсли;
		Если НЕ флЗарегистрированНаЕИС ИЛИ ФайлУИД = Неопределено Тогда
			// Новый документ
			ФайлУИД = Строка(Новый УникальныйИдентификатор);
			ИнтеграцияЦУЗсЭТПСерверУХ.УстановитьЗначениеРеквизитаЭТП(
											ЭТП, 
											ВладелецФайлов, 
											ИмяКлючаФайла, 
											ФайлУИД);
			document = ЕИСФабрикаXDTO.Создать(T_document);
			document.guid = ФайлУИД;
			document.fileName = 
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
					ТекущееИмяФайла);
			document.content = Base64Строка(ДвоичныеДанныеФайла);
			Вложения.document.Добавить(document);
		Иначе
			// Не измененный документ
			prevDocument = ЕИСФабрикаXDTO.Создать(T_prevDocument);
			prevDocument.guid = ФайлУИД;
			Вложения.prevDocument.Добавить(prevDocument);
		КонецЕсли;
		СохранитьУИДОбъекта(Неопределено, СтрШаблон(Нстр("ru = 'Файл плана закупок: %1'"), ТекущееИмяФайла), ФайлУИД);
	КонецЦикла;
	Возврат Вложения;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеОрганизации(ЕИСФабрикаXDTO,
									T_customer, 
									Организация, 
									ПоляОписанияТранзакции)
	ОписаниеКонтрагента = ЕИСФабрикаXDTO.Создать(T_customer);
	T_customerMainInfo = 
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ТипСвойстваИзТипаОбъекта(
										T_customer, "mainInfo");
	mainInfo = ПолучитьCustomerMainInfoType(
		ЕИСФабрикаXDTO, T_customerMainInfo, Организация, ПоляОписанияТранзакции);
	Если mainInfo = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ОписаниеКонтрагента.mainInfo = mainInfo;
	Возврат ОписаниеКонтрагента;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьCustomerMainInfoType(ЕИСФабрикаXDTO,
									T_customerMainInfo, 
									Организация, 
									ПоляОписанияТранзакции)
	Если НЕ ЗначениеЗаполнено(Организация.ИНН) Тогда
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
			ПоляОписанияТранзакции,
			СтрШаблон(Нстр("ru = 'Не заполнен ИНН!""%1""'"), Организация));
		Возврат Неопределено;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Организация.ОГРН) Тогда
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
			ПоляОписанияТранзакции,
			СтрШаблон(Нстр("ru = 'Не заполнен ОГРН!""%1""'"), Организация));
		Возврат Неопределено;
	КонецЕсли;
	customerMainInfo = ЕИСФабрикаXDTO.Создать(T_customerMainInfo);
	Если ЗначениеЗаполнено(Организация.НаименованиеПолное) Тогда
		customerMainInfo.fullName =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				Организация.НаименованиеПолное);
	КонецЕсли;
	customerMainInfo.shortName =
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
			Организация.Наименование);
	Если НЕ (Организация.ИКО < 999999999999999999) Тогда
		customerMainInfo.iko = Организация.ИКО;
	КонецЕсли;
	customerMainInfo.inn = СокрЛП(Организация.ИНН);
	customerMainInfo.kpp = СокрЛП(Организация.КПП);
	Если ЗначениеЗаполнено(Организация.ОГРН) Тогда
		customerMainInfo.ogrn = Организация.ОГРН;
	КонецЕсли;	
	КонтактнаяИнформация =
		ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьКонтактнуюИнформацию(
			Организация);
	//юр адрес
	Если ЗначениеЗаполнено(КонтактнаяИнформация.ЮридическийАдрес) Тогда
		customerMainInfo.legalAddress =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				КонтактнаяИнформация.ЮридическийАдрес);
	КонецЕсли;
	//почтовый адрес
	Если ЗначениеЗаполнено(КонтактнаяИнформация.ПочтовыйАдрес) Тогда
		customerMainInfo.postalAddress =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				КонтактнаяИнформация.ПочтовыйАдрес);
	КонецЕсли;
	// телефон
	Если ЗначениеЗаполнено(КонтактнаяИнформация.Телефон) Тогда
		customerMainInfo.phone = КонтактнаяИнформация.Телефон;
	КонецЕсли;
	// факс
	Если ЗначениеЗаполнено(КонтактнаяИнформация.Факс) Тогда
		customerMainInfo.fax = КонтактнаяИнформация.Факс;
	КонецЕсли;
	//email
	Если ЗначениеЗаполнено(КонтактнаяИнформация.Email) Тогда
		customerMainInfo.email = КонтактнаяИнформация.Email;
	КонецЕсли;
	//// окато
	//Если ЗначениеЗаполнено(КонтактнаяИнформация.) Тогда
	//	mainInfo.okato = КонтактнаяИнформация.;
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация.КодОКОПФ) Тогда
		customerMainInfo.okopf =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				Организация.КодОКОПФ);
	КонецЕсли;
	Если ЗначениеЗаполнено(Организация.НаименованиеОКОПФ) Тогда
		customerMainInfo.okopfName =
			СокрЛП(Организация.НаименованиеОКОПФ);
	КонецЕсли;
	Если ЗначениеЗаполнено(Организация.КодПоОКПО) Тогда
		customerMainInfo.okpo =
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.ПодготовитьWhiteSpaceCollapse(
				Организация.КодПоОКПО);
	КонецЕсли;
	Если ЗначениеЗаполнено(Организация.ДатаРегистрации) Тогда
		customerMainInfo.customerRegistrationDate =
			Организация.ДатаРегистрации;
	КонецЕсли;
	Возврат customerMainInfo;
КонецФункции


#КонецОбласти


#Область ФункцииОтправкиДанных


&НаКлиенте
// Функция обращается к сайту и отправляет данные для публикации черновика закупки.
// После этого отправляет файлы прикрепленные к закупке.
//
// Принимает:
//	ЭТП - СправочникСсылка.ЭлектронныеТорговыеПлощадки.
//	ЗакупочнаяПроцедура - СправочникСсылка.Лоты. Закупочная процедура для синхронизации.
//	ПараметрыПодключенияКЭТП - Структура. Описание параметров подключения текущего пользователя. Описание полей см. функцию ИнтеграцияЦУЗсЭТПСерверУХ.
//	ПоляОписанияТранзакции - Структура. Описание текущей процедуры обмена. Описание полей см. функцию ИнтеграцияЦУЗсЭТПСерверУХ.ШаблонОписанияТранзакцииОбмена().
//		Должны быть заполнены поля:
//			- Статус - Перечисление.СтатусыЗакупокНаЭТП, текущий статус закупочной процедуры (Закупка). По этому полю обработка понимает, что делать дальше.
//			- Сотрудник - Справочник.ФизическиеЛица.  Физ. лицо производящее обмен.
//
// Возвращает:
//	Булево - успешность синхронизации. Истина - успешно.
//		Ложь - ошибка, в ПоляОписания описание ошибки.
//	В структуре ПоляОписанияТранзакции устанавливает поля:
//		- ОписаниеСобытия - Описание транзакции обмена.
//		- ОтЭТПК1С - Булево. Истина - передача от ЭТП к 1С. Ложь - от 1С к ЭТП.
//		- ОшибкаОбменаСЭТП - Булево. Была ли ошибка последнего обмена или нет. Если обменов не было, то ТекстОшибки == "".
//		- ЗаписанаВЖурнал - Булево. Ошибка возникла до начала транзакции на этапе подготовки данных к отправке, и не была записана в журнал обмена с ЭТП.
//		- ТекстОшибки - Строка(0). Описание ошибки.
//		- КлючСообщения - Строка(36). Если сообщение было записано в базу.
//		- КлючОтвета - Строка(36). Если ответ сервера был записан в базу.
Функция ОтправитьОписаниеНаСайт()
	Попытка
		
		ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия = СтрШаблон(Нстр("ru = '%1Отправляем данные на сервер: '"), 
		                                                        	ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия);
		
		ОбменЧерезInternetExplorer = Ложь;
		Если ОписаниеОбмена.ПараметрыПодключенияКЭТП.Свойство(
				"ОбменЧерезInternetExplorer", ОбменЧерезInternetExplorer)
			И ОбменЧерезInternetExplorer Тогда
			ОтветСервера = ОтправитьСообщениеВЕИС223_MSXML(ТекстОписанияОбъекта, ОписаниеОбмена.ПараметрыПодключенияКЭТП, ОписаниеОбмена.ПоляОписанияТранзакции);
		Иначе
			ОтветСервера = ОтправитьСообщениеВЕИС223_1С(ТекстОписанияОбъекта, ОписаниеОбмена.ПараметрыПодключенияКЭТП, ОписаниеОбмена.ПоляОписанияТранзакции);
		КонецЕсли;
		Если ОтветСервера = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		
		Если ОтветСервера.Код >= 300 Тогда
			ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия = СтрШаблон(Нстр("ru = '%1ошибка.'"), 
			                                                        	ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия);
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ОписаниеОбмена.ПоляОписанияТранзакции,
				СтрШаблон(Нстр("ru = 'ошибка доступа к серверу ЕИС. Код %1%2Полный текст ответа:%3%4'"), 
					ОтветСервера.Код, Символы.ПС, Символы.ПС, СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(ОтветСервера.Сообщение)));
			Возврат Ложь;
		КонецЕсли;
		
		ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия = СтрШаблон(Нстр("ru = '%1отправлено.%2Расшифровываем ответ сервера: '"), 
		                                                        	ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия, 
		                                                        	Символы.ПС);
			
		ТекстОшибки = "";
		СтруктураОтветаСервера = РасшифроватьСообщениеСервера(ОтветСервера, ТекстОшибки);
		Если СтруктураОтветаСервера = Неопределено Тогда
			ТекстОшибки = СтрШаблон(Нстр("ru = 'Ошибка расшифровки ответа сервера:%1	%2%3Код ответа сервера:%4%5Закодированный ответ сервера:%6	%7'"), 
			              	Символы.ПС, ТекстОшибки, Символы.ПС, ОтветСервера.Код, Символы.ПС, Символы.ПС, 
			              	ОтветСервера.Сообщение);
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ОписаниеОбмена.ПоляОписанияТранзакции, ТекстОшибки);
			Возврат Ложь;
		КонецЕсли;
		
		ОписаниеОбмена.ПоляОписанияТранзакции.КлючОтвета = СтруктураОтветаСервера.КлючСообщения;
		
		ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия = ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия
			+ ?(СтруктураОтветаСервера.Успех, Нстр("ru = 'данные обработаны успешно.'"), Нстр("ru = 'получены ошибки.'")) + Символы.ПС + Символы.ПС
			+ СтруктураОтветаСервера.ТекстРасшифровки + Символы.ПС;
			
			
		Если НЕ ПустаяСтрока(ОписаниеОбмена.ПоляОписанияТранзакции.КлючОтвета) Тогда
			ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия = СтрШаблон(Нстр("ru = '%1Записываем ответ сервера в базу: '"), 
			                                                        	ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия + Символы.ПС);
				
			Результат = ИнтеграцияЦУЗсЭТПСерверУХ.ЗаписатьСообщениеОбмена(ОписаниеОбмена.ЭТП, ОписаниеОбмена.ОбъектВыгрузки, 
							ОтветСервера.Сообщение, ОписаниеОбмена.ПоляОписанияТранзакции.КлючОтвета, Ложь);
												
			Если Результат = Неопределено Тогда
				ТекстОшибки = СтрШаблон(Нстр("ru = 'Не удалось записать ответ сервера с укникальным ключом %1%2Закодированный ответ сервера:%3	%4'"), 
				              	СтруктураОтветаСервера.КлючСообщения, Символы.ПС, Символы.ПС, ОтветСервера);										
				ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ОписаниеОбмена.ПоляОписанияТранзакции, ТекстОшибки);
				Возврат Ложь;
			КонецЕсли;
			
			ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия = СтрШаблон(Нстр("ru = '%1 записали с кодом %2.%3'"), 
			                                                        	ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия, 
			                                                        	ОписаниеОбмена.ПоляОписанияТранзакции.КлючОтвета, 
			                                                        	Символы.ПС);
				
		КонецЕсли;
		
		ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия = СтрШаблон(Нстр("ru = '%1Обработка завершена.'"), 
		                                                        	ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия);
				
		Если НЕ СтруктураОтветаСервера.Успех Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ОписаниеОбмена.ПоляОписанияТранзакции, СтруктураОтветаСервера.ТекстРасшифровки);
				
			Возврат Ложь;
		КонецЕсли;
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = ПрефиксОшибки + ПодробноеПредставлениеОшибки(Инфо);
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(ОписаниеОбмена.ПоляОписанияТранзакции, ТекстОшибки, "ЕИС");
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

// Отправить текст сообщения на сайт new.zakupki.gov.ru
// Параметры:
//	СообщениеДляОтправки - Строка в формате XML
//	ПараметрыПодключенияКЭТП - Структура. Описание параметров подключения текущего пользователя. Описание полей см. функцию ИнтеграцияЦУЗсЭТПСерверУХ.
//	ПоляОписанияТранзакции - Структура. Описание текущей процедуры обмена. Описание полей см. функцию ИнтеграцияЦУЗсЭТПСерверУХ.ШаблонОписанияТранзакцииОбмена().
// Возвращает:
//	Структура:
//		Сообщение - текст ответа сервера.
//		Код - код ответа сервера (200, 403, 404, 501...)
// Изменяет переменную ПоляОписанияТранзакции:
//	ОписаниеСобытия - добавляет описание отправки на сайт.
//	ЕстьОшибкаОбменаСЭТП - устанавливает, если возникла ошибка.
//	ТекстОшибки - добавляет текст описания ошибки.
//
&НаКлиенте
Функция ОтправитьСообщениеВЕИС223_MSXML(СообщениеДляОтправки,
										ПараметрыПодключенияКЭТП, 
										ПоляОписанияТранзакции)
	ОтветСервера = Неопределено;
	УИДГраницы = Новый УникальныйИдентификатор;
	КодРазделителя = СтрЗаменить(Строка(УИДГраницы), "-", "");
	КодГраницыВложения  = "--" + КодРазделителя;
	РазделительСтроки = Символы.ВК + Символы.ПС;
	ТекстPOSTЗапроса = КодГраницыВложения + РазделительСтроки
		+ "Content-Disposition: form-data; name=""login""" 
		+ РазделительСтроки + РазделительСтроки
		+ ПараметрыПодключенияКЭТП.Пользователь + РазделительСтроки
		+ КодГраницыВложения + РазделительСтроки
		+ "Content-Disposition: form-data; name=""password"""
		+ РазделительСтроки	+ РазделительСтроки
		+ ПараметрыПодключенияКЭТП.Пароль + РазделительСтроки
		+ КодГраницыВложения + РазделительСтроки
		+ "Content-Disposition: form-data; name=""document""; filename=""filename""" + РазделительСтроки
		+ "Content-Type: text/xml"
		+ РазделительСтроки + РазделительСтроки
		+ СообщениеДляОтправки + РазделительСтроки
		+ КодГраницыВложения + "--";
	Попытка
		ServerXMLHTTP = Новый COMОбъект("MSXML2.ServerXMLHTTP.6.0");
		ServerXMLHTTP.setTimeouts(0, 0, 0, 0);
		ServerXMLHTTP.Open("POST", ПараметрыПодключенияКЭТП.АдресВебСервиса, Ложь);
		ServerXMLHTTP.SetRequestHeader(
			"Content-Type",
			"multipart/form-data; boundary=" + КодРазделителя);
		Если ПараметрыПодключенияКЭТП.ИспользоватьПрокси Тогда
			ServerXMLHTTP.SetProxy(2, 
				ПараметрыПодключенияКЭТП.ПроксиСервер + ":"
				+ Формат(ПараметрыПодключенияКЭТП.ПроксиПорт, "ЧГ="));
			Если ЗначениеЗаполнено(ПараметрыПодключенияКЭТП.ПроксиПользователь) Тогда
				ServerXMLHTTP.setProxyCredentials(
					ПараметрыПодключенияКЭТП.ПроксиПользователь,
					ПараметрыПодключенияКЭТП.ПроксиПароль);
			КонецЕсли;
		КонецЕсли;
		// //SXH_OPTION_IGNORE_SERVER_SSL_CERT_ERROR_FLAGS
		//ServerXMLHTTP.SetOption(2, 13056);
		ServerXMLHTTP.Send(ТекстPOSTЗапроса);
		ОтветСервера = Новый Структура("Сообщение, Код",
										ServerXMLHTTP.ResponseText,
										ServerXMLHTTP.status);
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = СтрШаблон(Нстр("ru = 'Ошибка отправки данных!%1%2'"), Символы.ПС, ПодробноеПредставлениеОшибки(Инфо));
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(ПоляОписанияТранзакции, ТекстОшибки, "ЕИС");
		Возврат Неопределено;
	КонецПопытки;
	Возврат ОтветСервера;	
КонецФункции

&НаКлиенте
Функция ОтправитьСообщениеВЕИС223_1С(СообщениеДляОтправки,
									 ПараметрыПодключенияКЭТП,
									 ПоляОписанияТранзакции)
	ОтветСервера = Неопределено;
	УИДГраницы = Новый УникальныйИдентификатор;
	КодРазделителя = СтрЗаменить(Строка(УИДГраницы), "-", "");
	КодГраницыВложения  = "--" + КодРазделителя;
	РазделительСтроки = Символы.ВК + Символы.ПС;
	ТекстPOSTЗапроса = КодГраницыВложения + РазделительСтроки
		+ "Content-Disposition: form-data; name=""login""" 
		+ РазделительСтроки + РазделительСтроки
		+ ПараметрыПодключенияКЭТП.Пользователь + РазделительСтроки
		+ КодГраницыВложения + РазделительСтроки
		+ "Content-Disposition: form-data; name=""password"""
		+ РазделительСтроки	+ РазделительСтроки
		+ ПараметрыПодключенияКЭТП.Пароль + РазделительСтроки
		+ КодГраницыВложения + РазделительСтроки
		+ "Content-Disposition: form-data; name=""document""; filename=""filename""" + РазделительСтроки
		+ "Content-Type: text/xml"
		+ РазделительСтроки + РазделительСтроки
		+ СообщениеДляОтправки + РазделительСтроки
		+ КодГраницыВложения + "--";
	Попытка
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(
			ПараметрыПодключенияКЭТП.АдресВебСервиса);
		Если ПараметрыПодключенияКЭТП.ИспользоватьПрокси Тогда
			ИнтернетПрокси = Новый ИнтернетПрокси(Ложь);
			ИнтернетПрокси.Установить(
				"https",
				ПараметрыПодключенияКЭТП.ПроксиСервер,
				ПараметрыПодключенияКЭТП.ПроксиПорт,
				ПараметрыПодключенияКЭТП.ПроксиПользователь,
				ПараметрыПодключенияКЭТП.ПроксиПароль);
		Иначе
			ИнтернетПрокси = Неопределено;
		КонецЕсли;
		ЗащищенноеСоединение = Неопределено;
		#Если НЕ ВебКлиент Тогда
			ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(
				Новый СертификатКлиентаWindows(СпособВыбораСертификатаWindows.Выбирать),
				Новый СертификатыУдостоверяющихЦентровОС());
		#Иначе
			ВызватьИсключение НСтр("ru='"
				+ "Чтение сертификатов пользователя средствами операационной "
				+ "системы недоступно при работе в веб-клиенте. " 
				+ "Измените настройки обмена!'");
		#КонецЕсли
		HTTPСоед = Новый HTTPСоединение(СтруктураURI.Хост,,,, ИнтернетПрокси ,, ЗащищенноеСоединение);
		HTTPЗаголовки = Новый Соответствие;
		HTTPЗаголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + КодРазделителя);
		HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, HTTPЗаголовки);
		HTTPЗапрос.УстановитьТелоИзСтроки(ТекстPOSTЗапроса);
		HTTPОтвет = HTTPСоед.ОтправитьДляОбработки(HTTPЗапрос);
		Возврат Новый Структура("Сообщение, Код",
			HTTPОтвет.ПолучитьТелоКакСтроку(), HTTPОтвет.КодСостояния);
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = СтрШаблон(Нстр("ru = 'Ошибка отправки данных!%1%2'"), Символы.ПС, ПодробноеПредставлениеОшибки(Инфо));
		ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(ПоляОписанияТранзакции, ТекстОшибки, "ЕИС");
	КонецПопытки;
	Возврат Неопределено;
КонецФункции


#КонецОбласти


#Область ФункцииРасшифровкиОтветаСервера


// На основании данных по схеме "confirmation" возвращает Структуру с описанием основных полей ответа сервера.
// Принимает:
//	ЕИСФабрикаXDTO - фабрика для расшифровки сообщения.
//	ТекстСообщения - Строка - ответ сервера полученный функцией отправки данных.
//	ТекстОшибки - Строка(0). Переменная куда будет записано описание ошибки, если она возникнет в функции.
// Возвращает:
//	Структура, Неопределено - переменная для установки значений ключевых полей, полученных от сервера:
//		ТекстРасшифровки - Строка, ответ сервера представленный в понятном пользователю виде.
//		Успех - Булево. Истина - сервер успешно обработал данные. Ложь - сервер обработал данные с ошибками.
//		КлючСообщения - Строка(36) - ГУИД сообщения от сервера.
//		СтатусПубликации - ПеречислениеСсылка.СтатусыПубликацииОбъектовНаЭТП - статус зарегистрированной публикации на сервере.
//		ИмяОбработанногоФайла - Строка. Значение поля refFileName
//	Неопределено - возникла ошибка. Текст ошибки в переменной ТекстОшибки.
//
&НаКлиенте
Функция РасшифроватьСообщениеСервера(ОтветСервера, ТекстОшибки)
	ТекстСообщения = ОтветСервера.Сообщение;
	КодОтвета = ОтветСервера.Код;
	
	Если ПустаяСтрока(ТекстСообщения) Тогда
		ТекстОшибки = Нстр("ru = 'Текст сообщения пустой.'");
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("ТекстРасшифровки", "");
	СтруктураОтвета.Вставить("Успех", Ложь);
	СтруктураОтвета.Вставить("КлючСообщения", "");
	СтруктураОтвета.Вставить("СтатусПубликации", ПредопределенноеЗначение("Перечисление.СтатусыПубликацииОбъектовНаЭТП.ПустаяСсылка"));
	СтруктураОтвета.Вставить("ИмяОбработанногоФайла", "");
	
	флОтветПолучен = Ложь;
	
	ОшибкиОтСервера = "";
	Если КодОтвета <> 200 Тогда
		ОшибкиОтСервера = Нстр("ru = 'Не удалось получить ответ от сервера!'");
	Иначе
		Если СтрНайти(ТекстСообщения, "Internal Server Error") > 0 ИЛИ СтрНайти(Лев(ТекстСообщения,200), "<html") Тогда
			флОтветПолучен = Ложь;
			ОшибкиОтСервера = СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(ТекстСообщения);
			
		Иначе
			Попытка
				ОшибкиОтСервера = РасшифроватьОтветXDTO(ТекстСообщения, СтруктураОтвета);
			Исключение
				Инфо = ИнформацияОбОшибке();
				ТекстОшибки = СтрШаблон(Нстр("ru = 'Ошибка разбора ответа сервера:%1%2'"), Символы.ПС, 
				              	ПодробноеПредставлениеОшибки(Инфо));
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураОтвета.Успех Тогда
		СтруктураОтвета.ТекстРасшифровки = Нстр("ru = 'Данные обработаны ЕИС.'");
		
		Если ПустаяСтрока(ОшибкиОтСервера) Тогда
			СтруктураОтвета.СтатусПубликации = ПредопределенноеЗначение("Перечисление.СтатусыПубликацииОбъектовНаЭТП.Зарегистрирован");
		Иначе
			СтруктураОтвета.СтатусПубликации = ПредопределенноеЗначение("Перечисление.СтатусыПубликацииОбъектовНаЭТП.ЗарегистрированСЗамечаниями");
			СтруктураОтвета.ТекстРасшифровки = СтрШаблон(Нстр("ru = '%1 Получены предупреждения:%2%3'"), 
			                                   	СтруктураОтвета.ТекстРасшифровки	+ Символы.ПС + Символы.ПС, 
			                                   	Символы.ПС, ОшибкиОтСервера);
		КонецЕсли;
		
	Иначе
		СтруктураОтвета.СтатусПубликации = ПредопределенноеЗначение("Перечисление.СтатусыПубликацииОбъектовНаЭТП.НеЗарегистрирован");
		СтруктураОтвета.ТекстРасшифровки = Нстр("ru = 'Ошибка обработки данных в ЕИС'");
		Если НЕ ПустаяСтрока(ОшибкиОтСервера) Тогда
			СтруктураОтвета.ТекстРасшифровки = СтруктураОтвета.ТекстРасшифровки + ":" + Символы.ПС + ОшибкиОтСервера;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураОтвета;
КонецФункции

&НаСервере
Функция РасшифроватьОтветXDTO(ТекстСообщения, СтруктураОтвета)
	
	ОшибкиОтСервера = "";
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ЕИСФабрикаXDTO = ОбработкаОбъект.ПолучитьФабрикуXDTO();
	ОбработкаОбъект = Неопределено;
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(ТекстСообщения);
	ПротоколЗагрузки = ЕИСФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	СтруктураОтвета.КлючСообщения = Строка(ПротоколЗагрузки.header.guid);
	СтруктураОтвета.Успех = (ПротоколЗагрузки.body.result = "success");
	СтруктураОтвета.ИмяОбработанногоФайла = Строка(ПротоколЗагрузки.body.refFileName);
	
	// в описании body интересны только сообщения об ошибках
	ОписаниеПодтверждения = РасшифроватьПодтверждениеЭлемента(ПротоколЗагрузки.body);
	Если ЗначениеЗаполнено(ОписаниеПодтверждения.ТекстОшибок) Тогда
		ОшибкиОтСервера = ОписаниеПодтверждения.ТекстОшибок;
	КонецЕсли;
	
	// Отслеживаем url и ошибки по переданным объектам
	Если ПротоколЗагрузки.body.Свойства().Получить("itemResults") <> Неопределено Тогда
		Если ТипЗнч(ПротоколЗагрузки.body.itemResults.itemResult) = Тип("ОбъектXDTO") Тогда
			ОписаниеПодтверждения = РасшифроватьПодтверждениеЭлемента(ПротоколЗагрузки.body.itemResults.itemResult, "		");
			Если ЗначениеЗаполнено(ОписаниеПодтверждения.Адрес) Тогда
				// Адрес будет заполнен только для найденных объектов
				ИнтеграцияЦУЗсЭТПСерверУХ.УстановитьАдресЗакупкиНаСайтеЭТП(ОписаниеОбмена.ЭТП, ОписаниеПодтверждения.Ссылка, ОписаниеПодтверждения.Адрес);
			КонецЕсли;
			Если ЗначениеЗаполнено(ОписаниеПодтверждения.ТекстОшибок) Тогда
				ОшибкиОтСервера = ОшибкиОтСервера + ?(ПустаяСтрока(ОшибкиОтСервера), "", Символы.ПС)
					+ ОписаниеПодтверждения.ТекстОшибок;
			КонецЕсли;
		Иначе
			Для Каждого itemResult Из ПротоколЗагрузки.body.itemResults.itemResult Цикл
				ОписаниеПодтверждения = РасшифроватьПодтверждениеЭлемента(itemResult, "		");
				Если ЗначениеЗаполнено(ОписаниеПодтверждения.Адрес) Тогда
					// Адрес будет заполнен только для найденных объектов
					ИнтеграцияЦУЗсЭТПСерверУХ.УстановитьАдресЗакупкиНаСайтеЭТП(ОписаниеОбмена.ЭТП, ОписаниеПодтверждения.Ссылка, ОписаниеПодтверждения.Адрес);
				КонецЕсли;
				Если ЗначениеЗаполнено(ОписаниеПодтверждения.ТекстОшибок) Тогда
					ОшибкиОтСервера = ОшибкиОтСервера + ?(ПустаяСтрока(ОшибкиОтСервера), "", Символы.ПС)
						+ ОписаниеПодтверждения.ТекстОшибок;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОшибкиОтСервера;
КонецФункции

&НаСервере
Функция РасшифроватьПодтверждениеЭлемента(Элемент, Отступ = "	")
	ОписаниеПодтверждения = Новый Структура("УИД_Пакета, УИД_Объекта, Ссылка, ОписаниеОбъекта, Адрес, ТекстОшибок, Успех");
	
	ОписаниеПодтверждения.Успех = (Элемент.result = "success");
	
	Если Элемент.Свойства().Получить("refguid") <> Неопределено Тогда
		ОписаниеПодтверждения.УИД_Объекта = Строка(Элемент.refguid);
	КонецЕсли;
	
	Если Элемент.Свойства().Получить("entityGuid") <> Неопределено Тогда
		УИД = Строка(Элемент.entityGuid);
		ОписаниеПодтверждения.УИД_Объекта = УИД;
		ОписаниеПодтверждения.Ссылка = ПолучитьСсылкуПоУИД(УИД, ОписаниеПодтверждения.ОписаниеОбъекта);
	КонецЕсли;
	
	ОшибкиОтСервера = "";
	Если Элемент.Свойства().Получить("violations") <> Неопределено Тогда
		Если ТипЗнч(Элемент.violations.violation) = Тип("ОбъектXDTO") Тогда
			ОшибкиОтСервера = ОшибкиОтСервера + ?(ПустаяСтрока(ОшибкиОтСервера), "", Символы.ПС)
				+ ПолучитьОписаниеОшибки(Элемент.violations.violation, Отступ);
			
		Иначе
			Для Каждого violation Из Элемент.violations.violation Цикл
				ОшибкиОтСервера = ОшибкиОтСервера + ?(ПустаяСтрока(ОшибкиОтСервера), "", Символы.ПС)
					+ ПолучитьОписаниеОшибки(violation, Отступ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ПустаяСтрока(ОшибкиОтСервера) Тогда
		Если ЗначениеЗаполнено(ОписаниеПодтверждения.Ссылка) Тогда
			ОшибкиОтСервера = СтрШаблон(Нстр("ru = '%1По объекту %2 получены сообщения:%3%4'"), Отступ, 
			                  	ОписаниеПодтверждения.Ссылка, Символы.ПС, ОшибкиОтСервера);
		ИначеЕсли ЗначениеЗаполнено(ОписаниеПодтверждения.ОписаниеОбъекта) Тогда
			ОшибкиОтСервера = СтрШаблон(Нстр("ru = '%1По объекту %2 получены сообщения:%3%4'"), Отступ, 
			                  	ОписаниеПодтверждения.ОписаниеОбъекта, Символы.ПС, ОшибкиОтСервера);
		ИначеЕсли ЗначениеЗаполнено(ОписаниеПодтверждения.УИД_Объекта) Тогда
			ОшибкиОтСервера = СтрШаблон(Нстр("ru = '%1По объекту с УИД %2 получены сообщения:%3%4'"), 
			                  	Отступ, ОписаниеПодтверждения.УИД_Объекта, Символы.ПС, ОшибкиОтСервера);
		КонецЕсли;
	КонецЕсли;
	ОписаниеПодтверждения.ТекстОшибок = ОшибкиОтСервера;
	
	// Фиксируем адрсе только для тех объектов, ссылки на которые получилось найти
	Если Элемент.Свойства().Получить("url") <> Неопределено И ЗначениеЗаполнено(ОписаниеПодтверждения.Ссылка) Тогда
		ОписаниеПодтверждения.Адрес = СокрЛП(Строка(Элемент.url));
	КонецЕсли;
	
	Возврат ОписаниеПодтверждения;
КонецФункции

&НаСервере
Функция ПолучитьОписаниеОшибки(violation, Отступ = "	")
	ОписаниеОшибки = Отступ + ?(violation.level = "error", Нстр("ru = 'Ошибка: '"), Нстр("ru = 'Предупреждение: '"))
					+ " (" + violation.code + ") " + violation.name;
	
	Если violation.Свойства().Получить("description") <> Неопределено Тогда
		ОписаниеОшибки = СтрШаблон(Нстр("ru = '%1	Описание: %2'"), ОписаниеОшибки + Символы.ПС
			+ Отступ, 
		                 	violation.description);;
	КонецЕсли;
	
	Возврат ОписаниеОшибки;
КонецФункции

// Исключаем все теги из текста HTML.
&НаСервере
Функция ПреобразоватьHTMLВТекст(ТекстHTML)
	Попытка
		ТекстПредставления = "";
		ТекстПредставления = ПолучитьТекстТэга(ТекстHTML, "body");
		
		Если ТекстПредставления = "" Тогда
			Возврат ТекстHTML;
		КонецЕсли;
		
		ТекстПредставления = СтрЗаменить(ТекстПредставления, "<h1>", "");
		ТекстПредставления = СтрЗаменить(ТекстПредставления, "</h1>", "");
		ТекстПредставления = СтрЗаменить(ТекстПредставления, "<p>", "");
		ТекстПредставления = СтрЗаменить(ТекстПредставления, "</p>", "");
		
		Возврат ТекстПредставления;
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = СтрШаблон(Нстр("ru = 'Ошибка преобразования HTML ответа сервера в текст!%1%2'"), 
		              	Символы.ПС, ПодробноеПредставлениеОшибки(Инфо));
	КонецПопытки;
	
	Возврат Нстр("ru = 'Ошибка преобразования HTML ответа сервера в текст!'");
КонецФункции

// Ищем первую последовательность <ИмяТэга>...</ИмяТэга>. Возвращаем его содержимое.
&НаСервере
Функция ПолучитьТекстТэга(ТекстHTML, ИмяТэга)
	ОткрывающийТэг = "<" + ИмяТэга;
	НачалоТэга = СтрНайти(ТекстHTML, ОткрывающийТэг);
	
	Если НачалоТэга = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	НачалоТэга = НачалоТэга + СтрДлина(ОткрывающийТэг);
	НачалоСодержимого = СтрНайти(ТекстHTML, ">",, НачалоТэга);
	Если НачалоСодержимого = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	КонецТэга = СтрНайти(ТекстHTML, "</" + ИмяТэга + ">", , НачалоСодержимого);
		
	Возврат СокрЛП(Сред(ТекстHTML, НачалоСодержимого+1, КонецТэга - НачалоСодержимого));
КонецФункции


#КонецОбласти


#Область ПрочиеФункции


&НаСервере
Процедура ОбработатьКомандуОбмена()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ЕИСФабрикаXDTO = ОбработкаОбъект.ПолучитьФабрикуXDTO();
	ОбработкаОбъект = Неопределено;
	// Сохраним УИД объекта выгрузки в таблицу значений
	// для облегчения расшифровки.
	СохранитьУИДОбъекта(ОписаниеОбмена.ОбъектВыгрузки);
	// Формируем пакет
	ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия =
		СтрШаблон(Нстр("ru = '%1Формируем пакет данных для отправки: '"), ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия
			+ Символы.ПС);
	ОписаниеОбмена.ПоляОписанияТранзакции.КлючСообщения = Строка(Новый УникальныйИдентификатор);
	ИмяФункцииОбмена = ОписаниеОбмена.ИмяФункции;
	ТекстОписанияОбъекта = ПолучитьТекстСообщенияОбмена(ИмяФункцииОбмена, ОписаниеОбмена, ЕИСФабрикаXDTO);
	Если ПустаяСтрока(ТекстОписанияОбъекта) Тогда
		ОписаниеОбмена.ПоляОписанияТранзакции.КлючСообщения = "";
		Возврат;
	КонецЕсли;
	// Записываем сообщение в базу.
	ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия =
		СтрШаблон(Нстр("ru = '%1 успешно.%2Записываем пакет в базу данных: '"), ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия, 
			Символы.ПС);
	Результат = ИнтеграцияЦУЗсЭТПСерверУХ.ЗаписатьСообщениеОбмена(
		ОписаниеОбмена.ЭТП,	ОписаниеОбмена.ОбъектВыгрузки, ТекстОписанияОбъекта, 
		ОписаниеОбмена.ПоляОписанияТранзакции.КлючСообщения,	Истина);
	Если НЕ Результат Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось записать сообщение обмена с уникальным ключом'");
		ПоляТранзакции = ОписаниеОбмена.ПоляОписанияТранзакции;
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ПоляТранзакции, ТекстОшибки);
		Возврат;
	КонецЕсли;
	ТекстОписания = НСтр("ru = '%ОписаниеСобытия% пакет сообщения записан в базу с кодом: ""%КлючСообщения%""'");
	ТекстОписания = СтрЗаменить(ТекстОписания, "%ОписаниеСобытия%", Строка(ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия));
	ТекстОписания = СтрЗаменить(ТекстОписания, "%КлючСообщения%", Строка(ОписаниеОбмена.ПоляОписанияТранзакции.КлючСообщения));
	ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия = ТекстОписания;
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстСообщенияОбмена(ИмяФункции, ОписаниеОбмена, ЕИСФабрикаXDTO)
	ТекстОписанияОбъекта = "";
	Если ИмяФункции = "ОтправитьПроцедуруЗакупкиНаЭТП" Тогда
		ПрефиксОшибки = СтрШаблон(Нстр("ru = 'Отправка закупки в ЕИС закончилась ошибкой!%1'"), Символы.ПС);
		ТекстОписанияОбъекта = ПолучитьТекстОписанияЗакупки(ОписаниеОбмена, ЕИСФабрикаXDTO);
	ИначеЕсли ИмяФункции = "ОтправитьПланЗакупокНаЭТП" Тогда
		ПрефиксОшибки =	СтрШаблон(Нстр("ru = 'Отправка плана закупки в ЕИС закончилась ошибкой!%1'"), 
		               		Символы.ПС);
		ТекстОписанияОбъекта = ПолучитьТекстОписанияПланаЗакупки(ОписаниеОбмена, ЕИСФабрикаXDTO);
	ИначеЕсли ИмяФункции = "ОтправитьПроектПланаЗакупки" Тогда
		ПрефиксОшибки =	СтрШаблон(Нстр("ru = 'Отправка проекта плана закупки в ЕИС закончилась ошибкой!%1'"), 
		               		Символы.ПС);
		ТекстОписанияОбъекта = ПолучитьТекстОписанияПроектаПланаЗакупки(ОписаниеОбмена, ЕИСФабрикаXDTO);
	ИначеЕсли ИмяФункции = "ПолучитьСтатусОбъекта" Тогда
		ПрефиксОшибки =	СтрШаблон(Нстр("ru = 'Получение статуса объекта в ЕИС закончилась ошибкой!%1'"), 
		               		Символы.ПС);
		ТекстОписанияОбъекта = ПолучитьТекстЗапросаНаВыгрузкуДанныхОтЕИС(ОписаниеОбмена, ЕИСФабрикаXDTO);
	ИначеЕсли ИмяФункции = "ПолучитьПротоколВыбораПоставщиков" Тогда
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ОписаниеОбмена.ПоляОписанияТранзакции,
			Нстр("ru = 'Получение протокола выбора поставщиков в ЕИС не предусмотрено!'"));
	ИначеЕсли ИмяФункции = "ОтправитьПротоколВыбораПобедителей" Тогда
		ПрефиксОшибки = СтрШаблон(Нстр("ru = 'Отравка протокола выбора поставщиков в ЕИС закончилась ошибкой!%1'"), 
		                	Символы.ПС);
		ТекстОписанияОбъекта = ПолучитьТекстПротоколаВыбораПобедителя(ОписаниеОбмена, ЕИСФабрикаXDTO);
	ИначеЕсли ИмяФункции = "ОтменитьЗакупкуНаЭТП" Тогда
		ПрефиксОшибки = СтрШаблон(Нстр("ru = 'Отмена закупки в ЕИС закончилась ошибкой!%1'"), Символы.ПС);
		ТекстОписанияОбъекта = ПолучитьТекстЗапросаНаОтменуЗакупки(ОписаниеОбмена, ЕИСФабрикаXDTO);
	ИначеЕсли ИмяФункции = "ОтправитьДоговорНаЭТП" Тогда
		ПрефиксОшибки = СтрШаблон(Нстр("ru = 'Отправка договора закупки в ЕИС закончилась ошибкой!%1'"), 
		                	Символы.ПС);
		ТекстОписанияОбъекта = ПолучитьТекстОписанияДоговораЗакупки(ОписаниеОбмена, ЕИСФабрикаXDTO);
	ИначеЕсли ИмяФункции = "ОтправитьИсполнениеДоговора" Тогда
		ПрефиксОшибки = СтрШаблон(Нстр("ru = 'Отправка данных об исполнении договора в ЕИС закончилась ошибкой!%1'"), 
		                	Символы.ПС);
		ТекстОписанияОбъекта = ПолучитьТекстОписанияИсполненияДоговора(ОписаниеОбмена, ЕИСФабрикаXDTO);
	Иначе
		ОписаниеОбмена.флТранзакцияЗавершиласьУспешно = Ложь;
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ОписаниеОбмена.ПоляОписанияТранзакции,
			СтрШаблон(Нстр("ru = 'Функция %1 не реализована'"), ИмяФункции));
	КонецЕсли;
	Возврат ТекстОписанияОбъекта;
КонецФункции
	
// Предпочтительно использовать. Сохраняет ссылку на объект и его УИД.
// Обязательно заполнить, либо СсылкаНаОбъект, либо ОписаниеОбъекта.
// Параметры:
//	СсылкаНаОбъект - ЛюбаяСсылка. Если можно получить ссылку в базе.
//	ОписаниеОбъекта - Строка. Если СсылкаНаОбъект не заполнена, то заполнение обязательно.
//	УИД - Строка(36) если не заполнен, то берем СсылкаНаОбъект.УникальныйИдентификатор()
//
&НаСервере
Процедура СохранитьУИДОбъекта(СсылкаНаОбъект, ОписаниеОбъекта=Неопределено, УИД = Неопределено)
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) И НЕ ЗначениеЗаполнено(ОписаниеОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	Если УИД = Неопределено Тогда
		УИД_ = Строка(СсылкаНаОбъект.УникальныйИдентификатор());
	Иначе
		УИД_ = УИД;
	КонецЕсли;
	
	мНайденныеОбъекты = УИД_Объектов.НайтиСтроки(Новый Структура("УИД", УИД_));
	Если мНайденныеОбъекты.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = УИД_Объектов.Добавить();
	НоваяСтрока.УИД = УИД_;
	НоваяСтрока.Ссылка = СсылкаНаОбъект;
	
	Если ОписаниеОбъекта = Неопределено Тогда
		НоваяСтрока.ОписаниеОбъекта = Строка(СсылкаНаОбъект);
	Иначе
		НоваяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСсылкуПоУИД(УИД, ОписаниеОбъекта)
	ОписаниеОбъекта = Неопределено;
	
	мНайденныеОбъекты = УИД_Объектов.НайтиСтроки(Новый Структура("УИД", УИД));
	Если мНайденныеОбъекты.Количество() > 0 Тогда
		ОписаниеОбъекта = мНайденныеОбъекты[0].ОписаниеОбъекта;
		Возврат мНайденныеОбъекты[0].Ссылка;
	Иначе
		Ссылка_ = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьОбъектОбменаПоУИД(УИД);
		Если ЗначениеЗаполнено(Ссылка_) Тогда
			Возврат Ссылка_;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ПолучитьРеквизитыЭлектроннойЗакупки(ЗакупочнаяПроцедура)
	РеквизитыЭлектроннойЗакупки = Новый Структура;
	РеквизитыЭлектроннойЗакупки.Вставить("ВЭлектронномВиде", Ложь);
	РеквизитыЭлектроннойЗакупки.Вставить("КодСпособаЗакупки", 0);
	РеквизитыЭлектроннойЗакупки.Вставить("ПолныйКодСпособаЗакупки", 0);
	РеквизитыЭлектроннойЗакупки.Вставить("НаименованиеСпособаЗакупки", "");
	
	Если ЗначениеЗаполнено(ЗакупочнаяПроцедура) Тогда
		РеквизитыЭлектроннойЗакупки.ВЭлектронномВиде = ЗакупочнаяПроцедура.ВЭлектроннойФорме;
		СпособВыбораПоставщика = ЗакупочнаяПроцедура.СпособВыбораПоставщика;
		Если СпособВыбораПоставщика = Перечисления.СпособыВыбораПоставщика.Конкурс Тогда
			РеквизитыЭлектроннойЗакупки.КодСпособаЗакупки = 11011;
			РеквизитыЭлектроннойЗакупки.НаименованиеСпособаЗакупки = НСтр("ru = 'Конкурс'");
		ИначеЕсли СпособВыбораПоставщика = Перечисления.СпособыВыбораПоставщика.Аукцион Тогда
			РеквизитыЭлектроннойЗакупки.КодСпособаЗакупки =  12012;
			РеквизитыЭлектроннойЗакупки.НаименованиеСпособаЗакупки = НСтр("ru = 'Аукцион'");
		ИначеЕсли СпособВыбораПоставщика =
					Перечисления.СпособыВыбораПоставщика.ЗакупкаУЕдинственногоПоставщика Тогда
			РеквизитыЭлектроннойЗакупки.КодСпособаЗакупки =  30000;
			РеквизитыЭлектроннойЗакупки.НаименованиеСпособаЗакупки =
				Нстр("ru = 'Закупка у единственного поставщика (подрядчика, исполнителя)'");
		Иначе
			РеквизитыЭлектроннойЗакупки.КодСпособаЗакупки =  40000;
			РеквизитыЭлектроннойЗакупки.НаименованиеСпособаЗакупки =
				Нстр("ru = 'Иной способ закупки, предусмотренный правовым актом заказчика, указанным в части 1 статьи 2 Федерального закона'");
		КонецЕсли;
		Если РеквизитыЭлектроннойЗакупки.ВЭлектронномВиде Тогда
			Корректировка = 1;
		Иначе
			Корректировка = 2;
		 КонецЕсли;
		 РеквизитыЭлектроннойЗакупки.ПолныйКодСпособаЗакупки =
				РеквизитыЭлектроннойЗакупки.КодСпособаЗакупки + Корректировка;
	КонецЕсли;
	РеквизитыЭлектроннойЗакупки.КодСпособаЗакупки =
		Формат(РеквизитыЭлектроннойЗакупки.КодСпособаЗакупки, "ЧГ=");
	Возврат РеквизитыЭлектроннойЗакупки;
КонецФункции

// Устанавливает новое состояние объекту выгрузки из ОписаниеОбменаВход,
// согласно флагу успешности выгрузки.
&НаКлиенте
Процедура УстановитьСтатусВыгруженногоОбъекта(ОписаниеОбменаВход)
	ВыбОбъектВыгрузки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеОбменаВход, "ОбъектВыгрузки", Неопределено);
	Если ТипЗнч(ВыбОбъектВыгрузки) = Тип("ДокументСсылка.ПрограммаЗакупок") Тогда
		ОбменЗавершилсяУспешно = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеОбменаВход, "флТранзакцияЗавершиласьУспешно", Ложь);
		Если ОбменЗавершилсяУспешно Тогда
			СтатусВыгружен = ПредопределенноеЗначение("Перечисление.СтатусыВыгружаемыхОбъектовЕИС.Выгружен");
			УстановитьСтатусОбъектаВыгрузки(ВыбОбъектВыгрузки, СтатусВыгружен);
			УстановитьСтатусСтрокПланаЗакупки(ВыбОбъектВыгрузки, Истина);
		Иначе
			СтатусОшибкаВыгрузки = ПредопределенноеЗначение("Перечисление.СтатусыВыгружаемыхОбъектовЕИС.ОшибкиВыгрузки");
			УстановитьСтатусОбъектаВыгрузки(ВыбОбъектВыгрузки, СтатусОшибкаВыгрузки);
			УстановитьСтатусСтрокПланаЗакупки(ВыбОбъектВыгрузки, Ложь);
		КонецЕсли;
	Иначе
		// Неизвестный объект выгрузки. Пропускаем установку статуса.
	КонецЕсли;
КонецПроцедуры		// УстановитьСтатусВыгруженногоОбъекта()

#КонецОбласти


#Область ЗагрузкаДанныхКлассификаторов

// Возвращает контекст обработки. Если необходимо инициализирует его.
//
Функция ПолучитьКонтекстОбработки()
	Если КонтекстОбработкиГлобальнаяПеременная = Неопределено Тогда
		КонтекстОбработкиГлобальнаяПеременная = Новый Структура;
	КонецЕсли;
	Возврат КонтекстОбработкиГлобальнаяПеременная;
КонецФункции

Процедура ОчиститьКонтекстОбработки()
	Если КонтекстОбработкиГлобальнаяПеременная <> Неопределено Тогда
		КонтекстОбработкиГлобальнаяПеременная = Неопределено;
	КонецЕсли;
КонецПроцедуры


#КонецОбласти


#Область ПроверкаЗначений


// Проверяет, что в описании обмена заполнена организация.
//
// Параметры:
//  ОписаниеОбмена - Структура - описание обмена.
// 
// Возвращаемое значение:
//   - Истина - организация заполнена или не требуется.
//	 - Ложь - организация требуется для обмена и не заполнена.
//
&НаСервере
Функция ПроверитьЗаполненаОрганизацияНаСервере(ОписаниеОбмена)
	Перем КомандаОбмена, Организация;
	КомандаОбмена = ОписаниеОбмена.КомандаОбмена;
	Организация = Неопределено;
	флЕстьОрганизация = 
		ОписаниеОбмена.ПоляОписанияТранзакции.Свойство(
			"Организация", Организация);
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	мКомандыСОрганизацией = ОбработкаОбъект.КомандыТребующиеОрганизацию();
	Возврат мКомандыСОрганизацией.Найти(КомандаОбмена) = Неопределено
		ИЛИ ЗначениеЗаполнено(Организация);
КонецФункции


#КонецОбласти
