
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Перем мЗапрос;
	
	Объект.ВерсияОрганизационнойСтруктуры = Параметры.ВерсияОрганизационнойСтруктуры;
	Объект.ПериодОтчета                   = Параметры.Период;
	Объект.Сценарий                       = Параметры.Сценарий;
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
		
	ЗначениеВДанныеФормы(Обработки.НастройкаПараметровОтчетовПоУмолчанию.ВернутьТаблицуВалютОтчетности(Объект.ВерсияОрганизационнойСтруктуры), ТаблицаВалютОтчетности);
	
	мЗапрос = УправлениеОтчетамиУХ.ИнициализироватьЗапрос(Параметры.ВерсияОрганизационнойСтруктуры, УникальныйИдентификатор, ПутьКХранилищуЗапроса, "ИспользуетсяВНастройкахРеглмента");
	
	Если ЗначениеЗаполнено(Параметры.ВидОтчетаОтбор) Тогда
		
		ОграничитьВидыОтчетов(Параметры.ВидОтчетаОтбор);
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Параметры.ЭтапПроцесса) Тогда
		
		ОграничитьВидыОтчетовПоЭтапуПроцесса(Параметры.ЭтапПроцесса);
		
	КонецЕсли;	

	Если ЗначениеЗаполнено(Объект.Сценарий) Тогда		
		ЭтаФорма.Заголовок = НСтр("ru = 'Настройка правил заполнения объектов для регламента '")+Строка(Объект.ВерсияОрганизационнойСтруктуры) + НСтр("ru = ' по сценарию '") + Объект.Сценарий + НСтр("ru = ' за период '") + Объект.ПериодОтчета;	
	Иначе	
		ЭтаФорма.Заголовок = НСтр("ru = 'Настройка правил заполнения объектов для регламента '")+Строка(Объект.ВерсияОрганизационнойСтруктуры);
	КонецЕсли;
	
	
	ЗначениеВДанныеФормы(РасширениеПроцессыИСогласованиеУХ.ПолучитьДеревоЗначенийЭтапов(Параметры.ВерсияОрганизационнойСтруктуры), ЭтапыПроцесса);
	ЗначениеВДанныеФормы(УправлениеОтчетамиУХ.ПолучитьДеревоОрганизаций(мЗапрос)   , ОрганизационныеЕдиницы);
	ЗначениеВДанныеФормы(УправлениеОтчетамиУХ.ПолучитьДеревоВидовОтчетов(мЗапрос)  , ВидыОтчетов);
	
	ЦветЧетныйВидОтчета        = Новый Цвет(255, 255, 255);
	ЦветНеЧетныйВидОтчета      = Новый Цвет(255, 255, 255);
	ЦветУзораЧетныйВидОтчета   = Новый Цвет(255, 255, 255);
	ЦветУзораНеЧетныйВидОтчета = Новый Цвет(255, 255, 255);
	ЦветФонаЧетнойСтроки       = Новый Цвет(255, 255, 255);
	
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	
	Элементы.ГруппаВыбора.Видимость=Ложь;
	
	ОбновитьПолеНастройки(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОграничитьВидыОтчетов(ВидОтчетаОтбор)
	
	СтруктураВО = ПолучитьИзВременногоХранилища(ПутьКХранилищуЗапроса);
	
	Запрос = Новый ЗАпрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаВО.ВидОтчета,
	|	ТаблицаВО.ДокументБД,
	|	ТаблицаВО.ДокументБД КАК ДокументБД1,
	|	ТаблицаВО.ЭтапПроцесса
	|ПОМЕСТИТЬ втВидыОтчетов
	|ИЗ
	|	&ТаблицаВО КАК ТаблицаВО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВидыОтчетов.ВидОтчета,
	|	втВидыОтчетов.ДокументБД,
	|	втВидыОтчетов.ЭтапПроцесса
	|ИЗ
	|	втВидыОтчетов КАК втВидыОтчетов
	|ГДЕ
	|	втВидыОтчетов.ВидОтчета В ИЕРАРХИИ(&ВидОтчета)";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчетаОтбор);
	Запрос.УстановитьПараметр("ТаблицаВО",СтруктураВО.ТаблицаВидовОтчетов);
	
	СтруктураВО.ТаблицаВидовОтчетов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры	

&НаСервере
Процедура ОграничитьВидыОтчетовПоЭтапуПроцесса(ЭтапПроцесса)
	
	СтруктураВО = ПолучитьИзВременногоХранилища(ПутьКХранилищуЗапроса);
	
	Запрос = Новый ЗАпрос;
	Запрос.Текст =

	"ВЫБРАТЬ
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница КАК Организация,
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса
	|ИЗ
	|	РегистрСведений.ОрганизационныеЕдиницыЭтаповПроцессов КАК ОрганизационныеЕдиницыЭтаповПроцессов
	|ГДЕ
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса = &ЭтапПроцесса
	|	И ОрганизационныеЕдиницыЭтаповПроцессов.ВерсияРегламентаПодготовкиОтчетности = &ВерсияРегламентаПодготовкиОтчетности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыУниверсальныхПроцессовФормируемыеДокументы.ШаблонДокумента КАК ВидОтчета,
	|	ЭтапыУниверсальныхПроцессовФормируемыеДокументы.ДокументБД КАК ДокументБД,
	|	ЭтапыУниверсальныхПроцессовФормируемыеДокументы.Ссылка КАК ЭтапПроцесса
	|ИЗ
	|	Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыУниверсальныхПроцессовФормируемыеДокументы
	|ГДЕ
	|	ЭтапыУниверсальныхПроцессовФормируемыеДокументы.Ссылка = &ЭтапПроцесса";
	
	
	Запрос.УстановитьПараметр("ЭтапПроцесса",ЭтапПроцесса);
	Запрос.УстановитьПараметр("ВерсияРегламентаПодготовкиОтчетности",Объект.ВерсияОрганизационнойСтруктуры);
	
	СтруктураВО.ТаблицаВидовОтчетов = Запрос.ВыполнитьПакет()[1].Выгрузить();
	СтруктураВО.ТаблицаОрганизаций  = Запрос.ВыполнитьПакет()[0].Выгрузить();
	
КонецПроцедуры	


&НаСервере
Функция ВернутьПредставлениеВалютОтчетности(ВидОтчета, Организация, ИдентификаторСтрокиПоУмолчанию, ИдентификаторСтроки, ПредставлениеВалютПоУмолчанию)
	
	ОсновнаяВалюта = "";
	СписокДополнительныхВалют = "";
	
	Отбор = Новый Структура("ВидОтчета, Организация", Справочники.ВидыОтчетов.ПустаяСсылка(), Организация);
	СтрокиПоУмолчанию = ТаблицаВалютОтчетности.НайтиСтроки(Отбор);
	Если СтрокиПоУмолчанию.Количество() <> 0 Тогда
			
		СтрокаВалюты = СтрокиПоУмолчанию[0];
		Для Каждого Элемент Из СтрокаВалюты.СписокВалют Цикл
			
			Если Элемент.Пометка Тогда
				ОсновнаяВалюта = Элемент.Представление;
			Иначе
				СписокДополнительныхВалют = СписокДополнительныхВалют + ", " + Элемент.Представление;
			КонецЕсли;
			
		КонецЦикла;
		ИдентификаторСтрокиПоУмолчанию = СтрокаВалюты.ПолучитьИдентификатор();
	Иначе
		ИдентификаторСтрокиПоУмолчанию = -1;
	КонецЕсли;
	
	ПредставлениеВалютПоУмолчанию = СтрШаблон(Нстр("ru = 'Из регламента:%1%2'"), ОсновнаяВалюта, 
		?(ПустаяСтрока(СписокДополнительныхВалют), "", "(" + Сред(СписокДополнительныхВалют, 2) + ")"));
	НайденныеСтроки = ТаблицаВалютОтчетности.НайтиСтроки(Новый Структура("ВидОтчета, Организация", ВидОтчета, Организация));
	
	СписокДополнительныхВалют = "";
	Если НайденныеСтроки.Количество() <> 0 Тогда
		СтрокаВалюты = НайденныеСтроки[0];
		Для Каждого Элемент Из СтрокаВалюты.СписокВалют Цикл
			СписокДополнительныхВалют = СписокДополнительныхВалют + ", " + Элемент.Представление;
		КонецЦикла;
		ИдентификаторСтроки = СтрокаВалюты.ПолучитьИдентификатор();
	Иначе
		ИдентификаторСтроки = -1;
	КонецЕсли;
	
	Возврат ПредставлениеВалютПоУмолчанию + ?(ПустаяСтрока(СписокДополнительныхВалют), "" , НСтр("ru = '
	|Для вида отчета: '") + Сред(СписокДополнительныхВалют, 2));
	
КонецФункции

&НаСервере
Процедура ОбновитьПолеНастройки(ПервоначальноеОтображение = Ложь)
	
	Если ПервоначальноеОтображение Тогда
		ЗначениеВРеквизитФормы(ПолучитьТаблицуПолномочий(Неопределено, Неопределено, Неопределено, Неопределено, Неопределено), "ТаблицаМатрицаПолномочий");
	Иначе
		Если ВыбранноеЗначениеОрганизации = Неопределено Тогда
			ПрофильОрганизации = Неопределено;
			ТекОрганизация     = Неопределено;
		ИначеЕсли ТипЗнч(ВыбранноеЗначениеОрганизации) = Тип("СправочникСсылка.Организации") Тогда
			ПрофильОрганизации = Неопределено;
			ТекОрганизация     = ВыбранноеЗначениеОрганизации;
		ИначеЕсли ВыбранноеЗначениеОрганизации.Профиль = ИСТИНА Тогда
			ПрофильОрганизации = ВыбранноеЗначениеОрганизации.Значение;
			ТекОрганизация     = Неопределено;
		Иначе
			ПрофильОрганизации = Неопределено;
			ТекОрганизация     = ВыбранноеЗначениеОрганизации.Значение;
		КонецЕсли;
		
		ТекущиеДанныеЭтапа = ЭтапыПроцесса.НайтиПоИдентификатору(?(Элементы.ЭтапыПроцесса.ТекущаяСтрока=Неопределено,0,Элементы.ЭтапыПроцесса.ТекущаяСтрока));
		
		Если ТекущиеДанныеЭтапа = Неопределено Тогда
			ЭтапПроцесса = Неопределено;
		ИначеЕсли ТекущиеДанныеЭтапа.ЭтоГруппа Тогда
			ЭтапПроцесса = Новый Массив;
			ВернутьМассивЭтаповДляГруппы(ЭтапПроцесса, ТекущиеДанныеЭтапа);
		Иначе
			ЭтапПроцесса = ТекущиеДанныеЭтапа.Ссылка;
		КонецЕсли;
		
		ТекущиеДанныеВидОтчета = ВидыОтчетов.НайтиПоИдентификатору(?(Элементы.ВидыОтчетов.ТекущаяСтрока=Неопределено,0,Элементы.ВидыОтчетов.ТекущаяСтрока));
		
		// Подготовим структуру отбора
		Отбор = Новый Структура;
		Для каждого ПолеОтбора Из ОтборПоПолямОрганизаций.Отбор.Элементы Цикл
			Если ТипЗнч(ПолеОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			Если ПолеОтбора.Использование = Ложь Тогда
				Продолжить;
			КонецЕсли;
			Отбор.Вставить(ПолеОтбора.ЛевоеЗначение, ПолеОтбора.ПравоеЗначение);
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ПолучитьТаблицуПолномочий(ЭтапПроцесса
														,ТекОрганизация
														,ПрофильОрганизации
														,?(ТекущиеДанныеВидОтчета.Этап = ЛОЖЬ,   ТекущиеДанныеВидОтчета.Значение, Неопределено)
														,?(ТекущиеДанныеВидОтчета.Этап = ИСТИНА, ТекущиеДанныеВидОтчета.Значение, Неопределено)
														,
														, Отбор)
								, "ТаблицаМатрицаПолномочий");
	КонецЕсли;
	
	ПолеНастройки.Очистить();
	
	Макет = Обработки.НастройкаПараметровОтчетовПоУмолчанию.ПолучитьМакет("Макет");
	
	ОбластьВидОтчета   = Макет.ПолучитьОбласть("ВидОтчета");
	ОбластьОрганизация = Макет.ПолучитьОбласть("Организация");
	ОбластьДетализация = Макет.ПолучитьОбласть("Детализация");
	
	ПолеНастройки.Вывести(Макет.ПолучитьОбласть("Шапка"));
	
	Инд = 1;
	
	Для Каждого СтрокаВидОтчета Из ТаблицаВидовОтчетов Цикл
		ОбластьВидОтчета.Параметры.ВидОтчета   = СтрокаВидОтчета.ВидОтчета;
		ОбластьВидОтчета.Параметры.Расшифровка = Новый Структура("ВидОтчета,ДокументБД",СтрокаВидОтчета.ВидОтчета,СтрокаВидОтчета.ДокументБД);
		ТекОбласть = ПолеНастройки.Присоединить(ОбластьВидОтчета);
		ТекОбласть.ЦветФона  = ?(ОбщегоНазначенияУХ.ЧетноеЧисло(Инд), ЦветЧетныйВидОтчета, ЦветНеЧетныйВидОтчета);
		ТекОбласть.ЦветУзора = ?(ОбщегоНазначенияУХ.ЧетноеЧисло(Инд), ЦветУзораЧетныйВидОтчета, ЦветУзораНеЧетныйВидОтчета);
		СтрокаВидОтчета.Колонка = ТекОбласть.Лево;
		Инд = Инд + 1;
	КонецЦикла;
	
	Инд = 1;
	Для Каждого СтрокаОрганизация Из ТаблицаОрганизаций Цикл
		
		ТаблДокСтрока = Новый ТабличныйДокумент;
		ОбластьОрганизация.Параметры.Организация = СтрокаОрганизация.Организация;
		ОбластьОрганизация.Параметры.Расшифровка = СтрокаОрганизация.Организация;
		ТаблДокСтрока.Вывести(ОбластьОрганизация);//.ЦветФона = ?(ОбщегоНазначенияУХ.ЧетноеЧисло(Инд), ЦветФонаЧетнойСтроки, Новый Цвет());
		
		Для Каждого СтрокаВидОтчета ИЗ ТаблицаВидовОтчетов Цикл
			Структура = Новый Структура("ВидОтчета, Организация,ДокументБД", СтрокаВидОтчета.ВидОтчета, СтрокаОрганизация.Организация,СтрокаВидОтчета.ДокументБД);
			НайденныеСтроки = ТаблицаМатрицаПолномочий.НайтиСтроки(Структура);
			СтрокиВалютОтчетности = ТаблицаВалютОтчетности.НайтиСтроки(Структура);
			Если НайденныеСтроки.Количество() <> 1 Тогда
				ОбластьДетализация.Параметры.Расшифровка = Неопределено;
				ТекОбласть = ТаблДокСтрока.Присоединить(ОбластьДетализация);
				ТекОбласть.ЦветФона = Новый Цвет(255, 255, 255);
				ТекОбласть.ЦветУзора = Новый Цвет(240, 240, 240);
				ТекОбласть.Узор = ТипУзораТабличногоДокумента.Узор3;
				ТекОбласть.Объединить();
				ТекОБласть.Текст = "";
				ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
			Иначе
				СтрокиИзменений = ТаблицаИзмененныхДанных.НайтиСтроки(Структура);
				Если СтрокиИзменений.Количество() > 0 Тогда
					ОбластьДетализация.Параметры.Расшифровка  = Структура;
					ОбластьДетализация.Параметры.Заполнить(СтрокиИзменений[0]);
					ОбластьДетализация.Область(1, 1, 5, 1).ЦветФона = ?(ОбщегоНазначенияУХ.ЧетноеЧисло(Инд), ЦветФонаЧетнойСтроки, Новый Цвет());
					
					Если СтрокиИзменений[0].БланкДляОтображения.Пустая() Тогда
						ОбластьДетализация.Параметры.БланкДляОтображения = Нстр("ru = 'В виде дерева'");
					КонецЕсли;
					
					ВыделятьЖирным  = Истина;
				Иначе
					
					ОбластьДетализация.Параметры.Расшифровка  = Структура;
					ОбластьДетализация.Параметры.Заполнить(НайденныеСтроки[0]);
					
					
					ОбластьДетализация.Область(1, 1, 5, 1).ЦветФона = ?(ОбщегоНазначенияУХ.ЧетноеЧисло(Инд), ЦветФонаЧетнойСтроки, Новый Цвет());
					
					НС = НайденныеСтроки[0];
					
					Если ТипЗнч(НС.ВидОтчета)=Тип("СправочникСсылка.ВидыОтчетов") Тогда
						
						Если НС.БланкДляОтображения.Пустая() Тогда
							ОбластьДетализация.Параметры.БланкДляОтображения = Нстр("ru = 'В виде дерева'");
						КонецЕсли;
						
						Если НС.БланкДляОтображения_РезультатПроверки = 2 Тогда
							ОбластьДетализация.Область(1, 1).ЦветФона = Новый Цвет(255, 0, 0);
						КонецЕсли;
						
						Если НС.ПравилоОбработки_РезультатПроверки = 2 Тогда
							ОбластьДетализация.Область(2, 1).ЦветФона = Новый Цвет(255, 0, 0);
						КонецЕсли;
						
						Если НС.БланкДляИмпорта_РезультатПроверки = 2 Тогда
							ОбластьДетализация.Область(4, 1).ЦветФона = Новый Цвет(255, 0, 0);
						ИначеЕсли НС.БланкДляИмпорта_РезультатПроверки = 1 Тогда
							ОбластьДетализация.Область(4, 1).ЦветФона = Новый Цвет(255, 255, 0);
						КонецЕсли;
						
					КонецЕсли;
					
					Если НС.ВнешняяИнформационнаяБаза_РезультатПроверки = 2 Тогда
						ОбластьДетализация.Область(4, 1).ЦветФона = Новый Цвет(255, 0, 0);
					ИначеЕсли НС.ВнешняяИнформационнаяБаза_РезультатПроверки = 1 Тогда
						ОбластьДетализация.Область(4, 1).ЦветФона = Новый Цвет(255, 255, 0);
					КонецЕсли;	
											
					ВыделятьЖирным = Ложь;
					
				КонецЕсли;
				
				ИдентификаторСтроки = -1;
				ИдентификаторСтрокиПоУмолчанию = -1;
				ПредставлениеВалютПоУмолчанию  = "";
				
				ОбластьДетализация.Параметры.Валюта = ВернутьПредставлениеВалютОтчетности(СтрокаВидОтчета.ВидОтчета, СтрокаОрганизация.Организация, ИдентификаторСтрокиПоУмолчанию, ИдентификаторСтроки, ПредставлениеВалютПоУмолчанию);
				ОбластьДетализация.Параметры.ВалютаРасшифровка = Новый Структура(
																	"ВидОтчета, Организация, ИдентификаторСтрокиПоУмолчанию, ИдентификаторСтроки, ПредставлениеВалютПоУмолчанию, ДокументБД", 
																	СтрокаВидОтчета.ВидОтчета, 
																	СтрокаОрганизация.Организация, 
																	ИдентификаторСтрокиПоУмолчанию, 
																	ИдентификаторСтроки, 
																	ПредставлениеВалютПоУмолчанию,
																	СтрокаВидОтчета.ДокументБД);
																	
				ТекОбласть = ТаблДокСтрока.Присоединить(ОбластьДетализация);
				//ТекОбласть.Расшифровка.Вставить("ПредставлениеВалютПоУмолчанию",ПредставлениеВалютПоУмолчанию);
				ТекОбласть.Шрифт = Новый Шрифт(ТекОбласть.Шрифт, , , ВыделятьЖирным);
			КонецЕсли;
		КонецЦикла;
		
		ТекОбласть = ПолеНастройки.Вывести(ТаблДокСтрока);
		СтрокаОрганизация.Ряд = ТекОбласть.Верх;
		Инд = Инд + 1;
		
	КонецЦикла;
	
	ПолеНастройки.ФиксацияСверху = 1;
	ПолеНастройки.ФиксацияСЛЕВА  = 2;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуПолномочий(ЭтапПроцесса = Неопределено, Организация = Неопределено, ПрофильОрганизаций = Неопределено, ВидОтчета = Неопределено, ВидОтчетаЭтапПроцесса = Неопределено, ЕстьОшибки = Неопределено, Отбор =  Неопределено) Экспорт
	
	Перем мЗапрос;
	
	МассивОрганизаций  = Новый Массив;
	МассивВидовОтчетов = Новый Массив;
	
	УправлениеОтчетамиУХ.ВосстановитьВременныеТаблицыЗапроса(мЗапрос, ПутьКХранилищуЗапроса);
	ИтоговаяТаблица = УправлениеОтчетамиУХ.ПолучитьТаблицуПолномочий(Объект.ПериодОтчета, Объект.Сценарий, Объект.ВерсияОрганизационнойСтруктуры, мЗапрос, ЭтапПроцесса, Организация, ПрофильОрганизаций, ВидОтчета, ВидОтчетаЭтапПроцесса, ЕстьОшибки, МассивОрганизаций, МассивВидовОтчетов, Отбор);
	
	ТаблицаОрганизаций.Очистить();
	Для Каждого Элемент Из МассивОрганизаций Цикл
		ТаблицаОрганизаций.Добавить().Организация = Элемент;
	КонецЦикла;
	
	ТаблицаВидовОтчетов.Очистить();
	МассивВидовОтчетов=ИтоговаяТаблица.Скопировать();
	МассивВидовОтчетов.Свернуть("ВидОтчета,ДокументБД");
	Для Каждого Элемент Из МассивВидовОтчетов Цикл
		
		НоваяСтрока=ТаблицаВидовОтчетов.Добавить();
		НоваяСтрока.ВидОтчета=Элемент.ВидОтчета;
		НоваяСтрока.ДокументБД=Элемент.ДокументБД;
		
	КонецЦикла;
	
	УправлениеОтчетамиУХ.УдалитьВременныеТаблицыИзЗапроса(мЗапрос);
	
	Возврат ИтоговаяТаблица;

КонецФункции

&НаСервере
Процедура ВернутьМассивЭтаповДляГруппы(Массив, Группа)
	
	ЭлементыГруппы = Группа.ПолучитьЭлементы();
	Для Каждого Строка Из ЭлементыГруппы Цикл
		Массив.Добавить(Строка.Ссылка);
		Если Строка.ЭтоГруппа Тогда
			ВернутьМассивЭтаповДляГруппы(Массив, Строка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеНастройкиОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивРасшифровок = Новый Массив;
	МассивРасшифровок.Добавить(Расшифровка);
	ОбработатьМассивРасшифровок(МассивРасшифровок, ТипЗнч(Расшифровка));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьМассивРасшифровок(МассивРасшифровок, ТекТипКолонки)
	
	Если МассивРасшифровок.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли МассивРасшифровок.Количество() = 1 И ТекТипКолонки = Тип("Структура") и  
		МассивРасшифровок[0].Свойство("Организация") И МассивРасшифровок[0].Свойство("ВидОтчета") Тогда
		
		Организация  = МассивРасшифровок[0].Организация;
		ВидОтчета    = МассивРасшифровок[0].ВидОтчета;
		ДокументБД   = МассивРасшифровок[0].ДокументБД;
		
		Если МассивРасшифровок[0].Свойство("ИдентификаторСтроки") Тогда
			
			ИдентификаторСтроки            = МассивРасшифровок[0].ИдентификаторСтроки;
			ИдентификаторСтрокиПоУмолчанию = МассивРасшифровок[0].ИдентификаторСтрокиПоУмолчанию;
			
			Если ИдентификаторСтрокиПоУмолчанию <> -1 Тогда
				СписокВалютПоУмолчанию = ТаблицаВалютОтчетности.НайтиПоИдентификатору(ИдентификаторСтрокиПоУмолчанию).СписокВалют;
			Иначе
				СписокВалютПоУмолчанию = Новый СписокЗначений;
			КонецЕсли;
			
			Если ИдентификаторСтроки = -1 Тогда
				ТекСтрока = ТаблицаВалютОтчетности.Добавить();
				ТекСтрока.Организация = Организация;
				ТекСтрока.ВидОтчета   = ВидОтчета;
				ТекСтрока.СписокВалют = Новый СписокЗначений;
				ТекСтрока.СписокВалют.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Валюты");
			Иначе
				ТекСтрока = ТаблицаВалютОтчетности.НайтиПоИдентификатору(ИдентификаторСтроки);
			КонецЕсли;
			
			ОткрытьФорму("ОбщаяФорма.ПодборДополнительныхВалют", Новый Структура("Периметр, ВидОтчета, ДополнительныеВалюты, ДополнительныеВалютыДляВидаОтчета, ИдентификаторСтроки, ОтображатьПанельВалютВидаОтчета", ТекСтрока.Организация, ТекСтрока.ВидОтчета, СписокВалютПоУмолчанию, ТекСтрока.СписокВалют, ТекСтрока.ПолучитьИдентификатор(), Истина), ЭтаФорма);
			
		Иначе
		
			Если ЗначениеЗаполнено(ТаблицаИзмененныхДанных) Тогда
				НайденныеСтроки = ТаблицаИзмененныхДанных.НайтиСтроки(МассивРасшифровок[0]);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеСтроки = ТаблицаМатрицаПолномочий.НайтиСтроки(МассивРасшифровок[0]);
				КонецЕсли;
			Иначе
				НайденныеСтроки = ТаблицаМатрицаПолномочий.НайтиСтроки(МассивРасшифровок[0]);
			КонецЕсли;
			
			Если НайденныеСтроки.Количество() = 1 Тогда
				
				ОткрытьФорму("Обработка.НастройкаПараметровОтчетовПоУмолчанию.Форма.ФормаВыбора_Управляемая",
							Новый Структура("ВидОтчета,ДокументБД, Организация, БланкИмпорта, БланкОтчета, Периодичность, ВнешнийИсточник, ПравилоОбработки, ПравилоПроверки, СпособФормированияОтчета,ПравилоИмпортаОбъекта,ШаблонТрансляции,ВерсияОрганизационнойСтруктуры"
											, ВидОтчета
											, ДокументБД
											, Организация
											, НайденныеСтроки[0].БланкДляИмпорта
											, НайденныеСтроки[0].БланкДляОтображения
											, НайденныеСтроки[0].Периодичность
											, НайденныеСтроки[0].ВнешняяИнформационнаяБаза
											, НайденныеСтроки[0].ПравилоОбработки
											, НайденныеСтроки[0].ПравилоПроверки
											, НайденныеСтроки[0].СпособФормированияОтчета
											, НайденныеСтроки[0].ПравилоИмпортаОбъекта
											, НайденныеСтроки[0].ШаблонТрансляции
											, Объект.ВерсияОрганизационнойСтруктуры
											), ЭтаФорма);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТекТипКолонки <> Тип("СправочникСсылка.Организации") Тогда
		
		ОткрытьФорму("Обработка.НастройкаПараметровОтчетовПоУмолчанию.Форма.ФормаВыбора_Управляемая",
					Новый Структура("ВидОтчета,ДокументБД, Организация, БланкИмпорта, БланкОтчета, Периодичность, ВнешнийИсточник, ПравилоОбработки, ПравилоПроверки, СпособФормированияОтчета,ПравилоИмпортаОбъекта,ШаблонТрансляции,ВерсияОрганизационнойСтруктуры"
									, МассивРасшифровок[0].ВидОтчета
									, МассивРасшифровок[0].ДокументБД
									, Неопределено
									, Неопределено
									, Неопределено
									, Неопределено
									, Неопределено
									, Неопределено
									, Неопределено
									, Неопределено
									, Неопределено
									, Неопределено
									, Объект.ВерсияОрганизационнойСтруктуры
									), ЭтаФорма);
									
																		
								
									
									
	ИначеЕсли ТекТипКолонки = Тип("СправочникСсылка.Организации") Тогда
		
		ОткрытьФорму("Обработка.НастройкаПараметровОтчетовПоУмолчанию.Форма.ФормаВыбора_Управляемая",
					Новый Структура("ВидОтчета,ДокументБД, Организация, БланкИмпорта, БланкОтчета, Периодичность, ВнешнийИсточник, ПравилоОбработки, ПравилоПроверки, СпособФормированияОтчета,ПравилоИмпортаОбъекта,ШаблонТрансляции,ВерсияОрганизационнойСтруктуры"
									, Неопределено
									, Неопределено
									, МассивРасшифровок[0]
									
									, Неопределено
									, Неопределено
									, Неопределено
									, Неопределено
									, Неопределено
									, Неопределено
									, Неопределено
									, Неопределено
									, Неопределено
									, Объект.ВерсияОрганизационнойСтруктуры
									), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнестиДанныеВТаблицуИзменений(СтрокаВидОтчета, СтрокаОрганизация, ВыбранноеЗначение)
	
	СтрокиИзмененныхДанных = ТаблицаИзмененныхДанных.НайтиСтроки(Новый Структура("ВидОтчета, Организация", СтрокаВидОтчета.ВидОтчета, СтрокаОрганизация.Организация));
	Если СтрокиИзмененныхДанных.Количество() > 0 Тогда
		СтрокаИзмененныхДанных = СтрокиИзмененныхДанных[0];
	Иначе
		СтрокиМассивПолномочий   = ТаблицаМатрицаПолномочий.НайтиСтроки(Новый Структура("ВидОтчета, Организация", СтрокаВидОтчета.ВидОтчета, СтрокаОрганизация.Организация));
		Если СтрокиМассивПолномочий.Количество() <> 0 Тогда
			СтрокаИзмененныхДанных   = ТаблицаИзмененныхДанных.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИзмененныхДанных, СтрокиМассивПолномочий[0]);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаИзмененныхДанных.ДокументБД=СтрокаВидОтчета.ДокументБД;
	
	НужнаГенерацияПредставленияСпособаФормирования = Ложь;
	
	Для Каждого Элемент Из ВыбранноеЗначение Цикл
		Если Элемент.Ключ <> "ВидОтчета" И Элемент.Ключ <> "Организация" Тогда
			СтрокаИзмененныхДанных[Элемент.Ключ] = Элемент.Значение;
			ТекСтрока = СтрокаИзмененныхДанных.СтруктураИзменений.НайтиПоЗначению(Элемент.Ключ);
			Если ТекСтрока = Неопределено Тогда
				СтрокаИзмененныхДанных.СтруктураИзменений.Добавить(Элемент.Ключ, , Истина);
			Иначе
				ТекСтрока.Пометка = Истина;
			КонецЕсли;
			
			Если (НЕ ТипЗнч(СтрокаВидОтчета.ВидОтчета)=Тип("СправочникСсылка.ВидыОтчетов"))
				 И (Элемент.Ключ = "БланкДляОтображения" ИЛИ Элемент.Ключ = "ПравилоПроверки") 
				Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если Элемент.Ключ = "БланкДляОтображения" Тогда
				ОбластьОтображения = ПолеНастройки.Область(СтрокаОрганизация.Ряд, СтрокаВидОтчета.Колонка);
				ОбластьОтображения.Шрифт = Новый Шрифт(ОбластьОтображения.Шрифт, , , Истина);
				ОбластьОтображения.Текст = ?(Элемент.Значение.Пустая(), Нстр("ru = 'В виде дерева'"), Элемент.Значение);
			ИначеЕсли Элемент.Ключ = "ПравилоОбработки" Тогда
				ОбластьОтображения = ПолеНастройки.Область(СтрокаОрганизация.Ряд + 1, СтрокаВидОтчета.Колонка);
				ОбластьОтображения.Шрифт = Новый Шрифт(ОбластьОтображения.Шрифт, , , Истина);
				ОбластьОтображения.Текст = Элемент.Значение;
			ИначеЕсли Элемент.Ключ = "ПравилоПроверки"  Тогда
				ОбластьОтображения = ПолеНастройки.Область(СтрокаОрганизация.Ряд + 2, СтрокаВидОтчета.Колонка);
				ОбластьОтображения.Шрифт = Новый Шрифт(ОбластьОтображения.Шрифт, , , Истина);
				ОбластьОтображения.Текст = Элемент.Значение;
			ИначеЕсли Элемент.Ключ = "ПравилоИмпортаОбъекта"  Тогда
				ОбластьОтображения = ПолеНастройки.Область(СтрокаОрганизация.Ряд + 4, СтрокаВидОтчета.Колонка);
				ОбластьОтображения.Шрифт = Новый Шрифт(ОбластьОтображения.Шрифт, , , Истина);
				ОбластьОтображения.Текст = Элемент.Значение;
	        ИначеЕсли Элемент.Ключ = "ШаблонТрансляции"  Тогда
				ОбластьОтображения = ПолеНастройки.Область(СтрокаОрганизация.Ряд + 6, СтрокаВидОтчета.Колонка);
				ОбластьОтображения.Шрифт = Новый Шрифт(ОбластьОтображения.Шрифт, , , Истина);
				ОбластьОтображения.Текст = Элемент.Значение;
			Иначе
				НужнаГенерацияПредставленияСпособаФормирования = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если НужнаГенерацияПредставленияСпособаФормирования Тогда
		СформироватьПредставлениеНаСервере(СтрокаИзмененныхДанных.ПолучитьИдентификатор());
		ОбластьОтображения = ПолеНастройки.Область(СтрокаОрганизация.Ряд + 3, СтрокаВидОтчета.Колонка);
		ОбластьОтображения.Шрифт = Новый Шрифт(ОбластьОтображения.Шрифт, , , Истина);
		ОбластьОтображения.Текст = СтрокаИзмененныхДанных.ПредставлениеСпособаФормированияОтчета;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеНаСервере(ИдентификаторСтроки)
	
	ТекСтрока = ТаблицаИзмененныхДанных.НайтиПоИдентификатору(ИдентификаторСтроки);
	ТекСтрока.ПредставлениеСпособаФормированияОтчета = Обработки.НастройкаПараметровОтчетовПоУмолчанию.ВернутьПредставлениеСпособаФормированияОтчета(ТекСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ФиксированнаяСтруктура") Тогда
		Если ВыбранноеЗначение.Свойство("ДополнительныеВалюты") Тогда //Изменены валюты отчетности.
			ТекСтрока = ТаблицаВалютОтчетности.НайтиПоИдентификатору(ВыбранноеЗначение.ИдентификаторСтроки);
			Если ТекСтрока <> Неопределено Тогда
				Если ВыбранноеЗначение.ДополнительныеВалютыДляВидаОтчета.Количество() = 0 Тогда
					ТаблицаВалютОтчетности.Удалить(ТекСтрока);
					ТекстСообщения = "";
					ИдентификаторСтроки = -1;
				Иначе
					ИдентификаторСтроки = ВыбранноеЗначение.ИдентификаторСтроки;
					ТекСтрока.СписокВалют.Очистить();
					ТекстСообщения = "";
					Для Каждого Элемент Из ВыбранноеЗначение.ДополнительныеВалютыДляВидаОтчета Цикл
						
						СтрокаВалюты = ТекСтрока.СписокВалют.Добавить(Элемент.Значение, Строка(Элемент.Значение), Элемент.Пометка);
						ТекстСообщения = ТекстСообщения + ", " + СтрокаВалюты.Представление;
						
					КонецЦикла;
					
					ТекстСообщения = СтрШаблон(Нстр("ru = '
					|Для вида отчета: %1'"), Сред(ТекстСообщения, 2));
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаОрганизация = ТаблицаОрганизаций.НайтиСтроки(Новый Структура("Организация", ВыбранноеЗначение.Периметр))[0];
			СтрокаВидОтчета   = ТаблицаВидовОтчетов.НайтиСтроки(Новый Структура("ВидОтчета", ВыбранноеЗначение.ВидОтчета))[0];
			ТекОбласть        = ПолеНастройки.Область(СтрокаОрганизация.Ряд + 5, СтрокаВидОтчета.Колонка);
			ПредставлениеВалютПоУмолчанию = "";
			ПредставлениеВалютПоУмолчанию_ = ВернутьПредставлениеВалютОтчетности(СтрокаВидОтчета.ВидОтчета, СтрокаОрганизация.Организация, 0, ИдентификаторСтроки, ПредставлениеВалютПоУмолчанию);
			ТекОбласть.Текст  = ПредставлениеВалютПоУмолчанию + ТекстСообщения;
			ТекОбласть.Расшифровка.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ВыбранноеЗначение.ВидОтчета) Тогда // Групповое редактирование по организации
			
			СтрокаОрганизация = ТаблицаОрганизаций.НайтиСтроки(Новый Структура("Организация", ВыбранноеЗначение.Организация))[0];
			
			Для Каждого СтрокаВидОтчета Из ТаблицаВидовОтчетов Цикл
				
				ВнестиДанныеВТаблицуИзменений(СтрокаВидОтчета, СтрокаОрганизация, ВыбранноеЗначение);
				
			КонецЦикла;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ВыбранноеЗначение.Организация) Тогда // Групповое редактирование по виду отчета
			
			СтрокаВидОтчета = ТаблицаВидовОтчетов.НайтиСтроки(Новый Структура("ВидОтчета", ВыбранноеЗначение.ВидОтчета))[0];
			
			Для Каждого СтрокаОрганизация Из ТаблицаОрганизаций Цикл
				
				ВнестиДанныеВТаблицуИзменений(СтрокаВидОтчета, СтрокаОрганизация, ВыбранноеЗначение);
				
			КонецЦикла;
			
		Иначе
			СтрокаОрганизация = ТаблицаОрганизаций.НайтиСтроки(Новый Структура("Организация", ВыбранноеЗначение.Организация))[0];
			СтрокаВидОтчета = ТаблицаВидовОтчетов.НайтиСтроки(Новый Структура("ВидОтчета", ВыбранноеЗначение.ВидОтчета))[0];
			ВнестиДанныеВТаблицуИзменений(СтрокаВидОтчета, СтрокаОрганизация, ВыбранноеЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Применить()
	
	Если ЗначениеЗаполнено(ТаблицаИзмененныхДанных) Тогда
		
		ДокументБДпоУмолчанию=Справочники.ДокументыБД.НайтиПоНаименованию("НастраиваемыйОтчет");
		
		Для Каждого Строка Из ТаблицаИзмененныхДанных Цикл
			Для Каждого Элемент Из Строка.СтруктураИзменений Цикл
				
				Если Элемент.Пометка Тогда
					
					СтруктураЗаписи=Новый Структура;
					СтруктураЗаписи.Вставить("Организация",Строка.Организация);
					СтруктураЗаписи.Вставить("ДокументБД",Строка.ДокументБД);
					СтруктураЗаписи.Вставить("ВерсияОрганизационнойСтруктуры",Объект.ВерсияОрганизационнойСтруктуры);
					СтруктураЗаписи.Вставить("ПериодОтчета",Объект.ПериодОтчета);
					СтруктураЗаписи.Вставить("Сценарий",Объект.Сценарий);
					СтруктураЗаписи.Вставить("ШаблонДокументаБД",Строка.ВидОтчета);
					СтруктураЗаписи.Вставить("ДокументБД",?(ЗначениеЗаполнено(Строка.ДокументБД),Строка.ДокументБД,ДокументБДпоУмолчанию));
					
					СтруктураЗаписи.Вставить("ЭлементНастройкиОтчета",Перечисления.ЭлементыНастройкиОтчета[Элемент.Значение]);
				

					НаборЗаписей=РегистрыСведений.НастройкаОбработкиОтчетов.СоздатьНаборЗаписей();
					
					Для Каждого КлючИЗначение ИЗ СтруктураЗаписи Цикл
						
						НаборЗаписей.Отбор[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
						
					КонецЦикла;
					
					НоваяСтрока=НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураЗаписи);
					НоваяСтрока.ЗначениеЭлементаНастройкиОтчета = Строка[Элемент.Значение];
					
					НаборЗаписей.Записать(Истина);
	
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		ТаблицаИзмененныхДанных.Очистить();
	КонецЕсли;
	
	РегистрыСведений.ВалютыОтчетности.СохранитьИзмененияВалютОтчетности(Объект.ВерсияОрганизационнойСтруктуры, ТаблицаВалютОтчетности);
	
	ЗначениеВДанныеФормы(Обработки.НастройкаПараметровОтчетовПоУмолчанию.ВернутьТаблицуВалютОтчетности(Объект.ВерсияОрганизационнойСтруктуры), ТаблицаВалютОтчетности);
	ОбновитьПолеНастройки();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройки(Команда)
	
	Применить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПроцессаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбновитьПолеНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыОтчетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбновитьПолеНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизационныеЕдиницыВыбор(Элемент, Инд_ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбраннаяСтрока = ОрганизационныеЕдиницы.НайтиПоИдентификатору(Инд_ВыбраннаяСтрока);
	СтандартнаяОбработка = Ложь;
	Если ВыбраннаяСтрока.Профиль = NULL Тогда
		ВыбранноеЗначениеОрганизации = Неопределено;
	ИначеЕсли ВыбраннаяСтрока.Профиль И ТипЗнч(ВыбраннаяСтрока.Значение) = Тип("СправочникСсылка.Организации") Тогда
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(1, НСтр("ru = 'Наложить отбор по консолидирующей организации'"));
		СписокЗначений.Добавить(2, НСтр("ru = 'Наложить отбор по периметру текущей организации'"));
		ТекЗначение = Неопределено;

		ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ОрганизационныеЕдиницыВыборЗавершение", ЭтотОбъект, Новый Структура("ВыбраннаяСтрока", ВыбраннаяСтрока)), СписокЗначений, Элемент);
        Возврат;
	ИначеЕсли ВыбраннаяСтрока.Профиль Тогда
		ВыбранноеЗначениеОрганизации = Новый Структура("Значение, Профиль", ВыбраннаяСтрока.Значение, ВыбраннаяСтрока.Профиль);
	Иначе
		ВыбранноеЗначениеОрганизации = ВыбраннаяСтрока.Значение;
	КонецЕсли;
	
	ОрганизационныеЕдиницыВыборФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизационныеЕдиницыВыборЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
    
    
    ТекЗначение = ВыбранныйЭлемент;
    Если ТекЗначение <> Неопределено Тогда
        
        Если ТекЗначение.Значение = 1 Тогда
            ВыбранноеЗначениеОрганизации = ВыбраннаяСтрока.Значение;
        Иначе
            ВыбранноеЗначениеОрганизации = Новый Структура("Значение, Профиль", ВыбраннаяСтрока.Значение, ВыбраннаяСтрока.Профиль);
        КонецЕсли;
        
    КонецЕсли;
    
    ОрганизационныеЕдиницыВыборФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ОрганизационныеЕдиницыВыборФрагмент()
    
    ОбновитьПолеНастройки();

КонецПроцедуры

&НаКлиенте
Процедура УтвердитьБланкиИПравила(Команда)
	
	УтвердитьБланкиИПравила_НаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УтвердитьБланкиИПравила_НаСервере()
	
	Перем МассивБланков;
	Перем МассивПравил;
	
	МассивБланков = Новый Массив;
	МассивПравил  = Новый Массив;
	
	Вн_ТаблицаМатрицаПолномочий = РеквизитФормыВЗначение("ТаблицаМатрицаПолномочий");
	
	Для Каждого Строка Из Вн_ТаблицаМатрицаПолномочий.НайтиСтроки(Новый Структура("БланкДляОтображения_РезультатПроверки", 2)) Цикл
		Если МассивБланков.Найти(Строка.БланкДляОтображения) = Неопределено Тогда
			МассивБланков.Добавить(Строка.БланкДляОтображения);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из Вн_ТаблицаМатрицаПолномочий.НайтиСтроки(Новый Структура("БланкДляИмпорта_РезультатПроверки", 2)) Цикл
		Если МассивБланков.Найти(Строка.БланкДляИмпорта) = Неопределено Тогда
			МассивБланков.Добавить(Строка.БланкДляИмпорта);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из Вн_ТаблицаМатрицаПолномочий.НайтиСтроки(Новый Структура("ПравилоОбработки_РезультатПроверки", 2)) Цикл
		Если МассивПравил.Найти(Строка.ПравилоОбработки) = Неопределено Тогда
			МассивПравил.Добавить(Строка.ПравилоОбработки);
		КонецЕсли;
	КонецЦикла;
	
	ПолныеПраваУХ.УтвердитьБланкиПоМассиву(МассивБланков);
	ПолныеПраваУХ.УтвердитьПравилаПоМассиву(МассивПравил);
	
	ОбновитьПолеНастройки(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицу(Команда)
	ОбновитьПолеНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтборы(Команда)
	
	Элементы.ФормаПоказатьОтборы.Пометка = НЕ Элементы.ФормаПоказатьОтборы.Пометка;
	Элементы.ГруппаВыбора.Видимость = Элементы.ФормаПоказатьОтборы.Пометка;

КонецПроцедуры

