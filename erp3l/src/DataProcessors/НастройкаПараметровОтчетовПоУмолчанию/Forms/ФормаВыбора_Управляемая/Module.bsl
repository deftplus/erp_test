
&НаСервере
Процедура УстановитьВидимостьПриСменеИсточника()
	
	ИмпортИзВнешнегоИсточника = ВнешнийИсточник.ТипБД = Справочники.ТипыБазДанных.ОбменТаблДок;
	Элементы.БланкИмпорта.Доступность     = ИмпортИзВнешнегоИсточника;
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьУточнениеФормированияОтчетности()
	
	Если СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.АвтоматическиСвернувПоПериоду Тогда
		Элементы.ПанельУточнениеСпособаФормирования.ТекущаяСтраница = Элементы.ДляСворачиванияПоАналитике;
	ИначеЕсли СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.Импорт Тогда
		Элементы.ПанельУточнениеСпособаФормирования.ТекущаяСтраница = Элементы.ДляВнешнегоИсточника;
		УстановитьВидимостьПриСменеИсточника();
	Иначе
		Элементы.ПанельУточнениеСпособаФормирования.ТекущаяСтраница = Элементы.ДляОстальныхСлучаев;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("БланкИмпорта"            , БланкИмпорта);
	Параметры.Свойство("БланкОтчета"             , БланкОтчета);
	Параметры.Свойство("ПравилоОбработки"        , ПравилоОбработки);
	Параметры.Свойство("ПравилоПроверки"         , ПравилоПроверки);
	Параметры.Свойство("СпособФормированияОтчета", СпособФормированияОтчета);
	Параметры.Свойство("Периодичность"           , Периодичность);
	Параметры.Свойство("ВнешнийИсточник"         , ВнешнийИсточник);
	Параметры.Свойство("ВидОтчета"               , ВидОтчета);
	Параметры.Свойство("ДокументБД"              , ДокументБД);
	Параметры.Свойство("Организация"             , Организация);
	Параметры.Свойство("ПравилоИмпортаОбъекта"            , ПравилоИмпортаОбъекта);
	Параметры.Свойство("ШаблонТрансляции"             	  , ШаблонТрансляции);
	Параметры.Свойство("ВерсияОрганизационнойСтруктуры"   , ВерсияОрганизационнойСтруктуры);
	
	ЕдиничноеРедактирование = ЗначениеЗаполнено(ВидОтчета) И ЗначениеЗаполнено(Организация);
	
	Элементы.Использование_БланкИмпорта.Видимость             	= НЕ ЕдиничноеРедактирование;
	Элементы.Использование_БланкОтчета.Видимость              	= НЕ ЕдиничноеРедактирование;
	Элементы.Использование_ВнешнийИсточник.Видимость          	= НЕ ЕдиничноеРедактирование;
	Элементы.Использование_Периодичность.Видимость            	= НЕ ЕдиничноеРедактирование;
	Элементы.Использование_ПравилоОбработки.Видимость         	= НЕ ЕдиничноеРедактирование;
	Элементы.Использование_ПравилоПроверки.Видимость          	= НЕ ЕдиничноеРедактирование;
	Элементы.Использование_СпособФормированияОтчета.Видимость 	= НЕ ЕдиничноеРедактирование;
	Элементы.Использование_ПравилоИмпортаОбъекта.Видимость 		= НЕ ЕдиничноеРедактирование;
	
	Если ЗначениеЗаполнено(ДокументБД) Тогда	
		Элементы.БланкОтчета_Группа.Видимость	      		= 	ДокументБД.ЕстьБланк;
		Элементы.ПравилоОбработки_Группа.Видимость 			= 	ДокументБД.ЕстьПравилоРасчета;
		Элементы.ПравилоПроверки_Группа.Видимость  			= 	ДокументБД.ЕстьПравилоПроверки;
	    Элементы.СпособФормированияОтчета_Группа.Видимость	=	ДокументБД.ЕстьСпособФормирования;
		Элементы.ПравилоИмпортаОбъекта_Группа.Видимость  	= 	ДокументБД.ЕстьУниверсальныйИмпорт;
        Элементы.ШаблонТрансляции_Группа.Видимость  	    = 	ДокументБД.ЕстьШаблонТрансляции;
	Иначе 			
		Элементы.БланкОтчета_Группа.Видимость      			= 	Истина;
		Элементы.ПравилоОбработки_Группа.Видимость 			= 	Истина;
		Элементы.ПравилоПроверки_Группа.Видимость  			= 	Истина;
	    Элементы.СпособФормированияОтчета_Группа.Видимость	=	Истина;
		Элементы.ПравилоИмпортаОбъекта_Группа.Видимость  	= 	Истина;	
	КонецЕсли;
				
	Если Элементы.БланкОтчета_Группа.Видимость Тогда
		
		СписокБланковОтчетов = УправлениеОтчетамиУХ.ВернутьСписокБланковОтчетов(Неопределено,ВидОтчета);
		//Элементы.БланкОтчета.СписокВыбора.Очистить();
		//
		//Для Каждого ЭлементСписка Из СписокБланковОтчетов Цикл
		//	ЗаполнитьЗначенияСвойств(Элементы.БланкОтчета.СписокВыбора.Добавить(), ЭлементСписка);
		//КонецЦикла;
		ЗаполнитьСписокСпособовОтображения();
		
	КонецЕсли;	
		
	Элементы.СпособФормированияОтчета.СписокВыбора.Очистить();
	
	Если ТипЗнч(ВидОтчета)=Тип("СправочникСсылка.ВидыОтчетов") Тогда
		
		Элементы.СпособФормированияОтчета.СписокВыбора.Добавить(Перечисления.СпособыФормированияОтчетов.РучноеЗаполнение);
		Элементы.СпособФормированияОтчета.СписокВыбора.Добавить(Перечисления.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки);
		Элементы.СпособФормированияОтчета.СписокВыбора.Добавить(Перечисления.СпособыФормированияОтчетов.АвтоматическиКонсолидация);
		Элементы.СпособФормированияОтчета.СписокВыбора.Добавить(Перечисления.СпособыФормированияОтчетов.Импорт);
		Элементы.СпособФормированияОтчета.СписокВыбора.Добавить(Перечисления.СпособыФормированияОтчетов.АвтоматическиСвернувПоАналитикам);
		Элементы.СпособФормированияОтчета.СписокВыбора.Добавить(Перечисления.СпособыФормированияОтчетов.АвтоматическиСвернувПоПериоду);
		Элементы.СпособФормированияОтчета.СписокВыбора.Добавить(Перечисления.СпособыФормированияОтчетов.ИмпортФНС);
		
	Иначе
		
		Элементы.СпособФормированияОтчета.СписокВыбора.Добавить(Перечисления.СпособыФормированияОтчетов.РучноеЗаполнение);
		Элементы.СпособФормированияОтчета.СписокВыбора.Добавить(Перечисления.СпособыФормированияОтчетов.Импорт);
		
		Если ДокументБД.ЕстьПравилоРасчета Тогда	
			Элементы.СпособФормированияОтчета.СписокВыбора.Добавить(Перечисления.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки);	
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Если Организация.ЭлиминирующаяОрганизация Тогда
			Элементы.СпособФормированияОтчета.СписокВыбора.Добавить(Перечисления.СпособыФормированияОтчетов.АвтоматическиЭлиминация);
		КонецЕсли;
	КонецЕсли;
		
	ВыбратьУточнениеФормированияОтчетности();
	
	Если ЗначениеЗаполнено(ВерсияОрганизационнойСтруктуры) Тогда
		
		Если ВерсияОрганизационнойСтруктуры.РежимМногопериодныхУОП Тогда
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.РежимБланка", 2);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыйПараметр = Новый ПараметрВыбора("Отбор.РежимБланка", 1);
            НовыйМассив.Добавить(НовыйПараметр);
			
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элементы.БланкОтчета.ПараметрыВыбора = НовыеПараметры;
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.РежимБланка", 2);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элементы.БланкИмпорта.ПараметрыВыбора = НовыеПараметры;

			
		Иначе	
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.РежимБланка", 0);
			НовыйМассив = Новый Массив();
            НовыйМассив.Добавить(НовыйПараметр);
			
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элементы.БланкОтчета.ПараметрыВыбора = НовыеПараметры;
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.РежимБланка", 0);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элементы.БланкИмпорта.ПараметрыВыбора = НовыеПараметры;	
			
		КонецЕсли;
		
	КонецЕсли;	 	
	
КонецПроцедуры

// Возвращает внешнюю информационную базу с типом ТипБДВход,
// когда такая база единственная.
&НаСервереБезКонтекста
Функция ПолучитьВнешнююБазуПоТипу(ТипБДВход)
	РезультатФункции = Справочники.ВнешниеИнформационныеБазы.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВнешниеИнформационныеБазы.Ссылка,
		|	ВнешниеИнформационныеБазы.ТипБД
		|ИЗ
		|	Справочник.ВнешниеИнформационныеБазы КАК ВнешниеИнформационныеБазы
		|ГДЕ
		|	ВнешниеИнформационныеБазы.ТипБД = &ТипБД
		|	И НЕ ВнешниеИнформационныеБазы.ПометкаУдаления";
	Запрос.УстановитьПараметр("ТипБД", ТипБДВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			РезультатФункции = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
	Иначе
		РезультатФункции = Справочники.ВнешниеИнформационныеБазы.ПустаяСсылка();
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Осуществляет проверку правильности заполнения поля Тип БД для 
// способа Импорт. В случае вероятной ошибки, информирует об 
// этом пользователя.
&НаКлиенте
Процедура ПроверитьТипБдИмпорт()
	Если СпособФормированияОтчета = ПредопределенноеЗначение("Перечисление.СпособыФормированияОтчетов.Импорт") Тогда
		Если ЗначениеЗаполнено(ПравилоОбработки) Тогда
			Если ЗначениеЗаполнено(ТипБД) Тогда
				Если ТипБД = ПредопределенноеЗначение("Справочник.ТипыБазДанных.ТекущаяИБ") Тогда
					ТекстПодсказки = НСтр("ru = 'Тип информационной базы в правиле расчета %ПравилоРасчета% указан текущей базой. Работа импорта может быть некорректной.'");
					ТекстПодсказки = СтрЗаменить(ТекстПодсказки, "%ПравилоРасчета%", Строка(ПравилоОбработки));
					Элементы.ВнешнийИсточник.Подсказка = ТекстПодсказки;
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстПодсказки);
				Иначе	
					ТекстПодсказки = НСтр("ru = 'Выберите информационную базу с типом %ТипИБ%'");
					ТекстПодсказки = СтрЗаменить(ТекстПодсказки, "%ТипИБ%", Строка(ТипБД));
					Элементы.ВнешнийИсточник.Подсказка = ТекстПодсказки;
					ВнешнийИсточник = ПолучитьВнешнююБазуПоТипу(ТипБД);
				КонецЕсли;
			Иначе
				ТекстПодсказки = НСтр("ru = 'Тип информационной базы в правиле расчета %ПравилоРасчета% не указан. Работа импорта может быть некорректной.'");
				ТекстПодсказки = СтрЗаменить(ТекстПодсказки, "%ПравилоРасчета%", Строка(ПравилоОбработки));
				Элементы.ВнешнийИсточник.Подсказка = ТекстПодсказки;
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстПодсказки);
			КонецЕсли;
		Иначе
			// Не указано правило расчета. Не проверяем, т.к. настройка не завершена.
		КонецЕсли;
	Иначе
		// Это не импорт. Не выполняем проверку.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	СтруктураОтвета = Новый Структура;
	
	Если ЕдиничноеРедактирование ИЛИ Использование_БланкИмпорта Тогда
		СтруктураОтвета.Вставить("БланкДляИмпорта", БланкИмпорта);
	КонецЕсли;
	Если ЕдиничноеРедактирование ИЛИ Использование_БланкОтчета Тогда
		СтруктураОтвета.Вставить("БланкДляОтображения", БланкОтчета);
	КонецЕсли;
	Если ЕдиничноеРедактирование ИЛИ Использование_ВнешнийИсточник Тогда
		СтруктураОтвета.Вставить("ВнешняяИнформационнаяБаза", ВнешнийИсточник);
	КонецЕсли;
	Если ЕдиничноеРедактирование ИЛИ Использование_Периодичность Тогда
		СтруктураОтвета.Вставить("Периодичность", Периодичность);
	КонецЕсли;
	Если ЕдиничноеРедактирование ИЛИ Использование_ПравилоОбработки Тогда
		СтруктураОтвета.Вставить("ПравилоОбработки", ПравилоОбработки);
	КонецЕсли;
	Если ЕдиничноеРедактирование ИЛИ Использование_ПравилоПроверки Тогда
		СтруктураОтвета.Вставить("ПравилоПроверки", ПравилоПроверки);
	КонецЕсли;
	Если ЕдиничноеРедактирование ИЛИ Использование_СпособФормированияОтчета Тогда
		СтруктураОтвета.Вставить("СпособФормированияОтчета", СпособФормированияОтчета);
	КонецЕсли;
	Если ЕдиничноеРедактирование ИЛИ Использование_ПравилоИмпортаОбъекта Тогда
		СтруктураОтвета.Вставить("ПравилоИмпортаОбъекта", ПравилоИмпортаОбъекта);
	КонецЕсли;
    Если ЕдиничноеРедактирование ИЛИ Использование_ШаблонТрансляции Тогда
		СтруктураОтвета.Вставить("ШаблонТрансляции", ШаблонТрансляции);
	КонецЕсли;
	
	
	СтруктураОтвета.Вставить("ВидОтчета"  , ВидОтчета);
	СтруктураОтвета.Вставить("Организация", Организация);
	
	ОповеститьОВыборе(Новый ФиксированнаяСтруктура(СтруктураОтвета));
	
	Если Открыта() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СпособФормированияОтчетаПриИзменении(Элемент)
	
	ВыбратьУточнениеФормированияОтчетности();
	Использование_СпособФормированияОтчета = Истина;
	ПроверитьТипБдИмпорт();	
	
КонецПроцедуры


&НаКлиенте
Процедура ВнешнийИсточникПриИзменении(Элемент)
	
	УстановитьВидимостьПриСменеИсточника();
	Использование_ВнешнийИсточник = Истина;

КонецПроцедуры


&НаКлиенте
Процедура БланкОтчетаПриИзменении(Элемент)
	
	Использование_БланкОтчета = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура ПравилоОбработкиПриИзменении(Элемент)
	
	Использование_ПравилоОбработки = Истина;
	ТипБД=ОпределитьТипБД(ПравилоОбработки);
	ПроверитьТипБдИмпорт();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьТипБД(Правило)
	Если ЗначениеЗаполнено(Правило) Тогда
		Возврат Правило.ТипБД;
	Иначе
		Возврат Справочники.ВнешниеИнформационныеБазы.ПустаяСсылка();
	КонецЕсли;
КонецФункции // ОпределитьТипБД() 

&НаКлиенте
Процедура ПравилоПроверкиПриИзменении(Элемент)
	
	Использование_ПравилоПроверки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура БланкИмпортаПриИзменении(Элемент)
	
	Использование_БланкИмпорта = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСвойствоБланк()
	
	
КонецФункции	

&НаКлиенте
Процедура ПравилоИмпортаОбъектаПриИзменении(Элемент)
	
	ТипБД=ОпределитьТипБД(ПравилоИмпортаОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ТипБД = ОпределитьТипБД(ПравилоОбработки);
	ПроверитьТипБдИмпорт();
КонецПроцедуры

&НаКлиенте
Процедура ВнешнийИсточникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТипБД = ОпределитьТипБД(ПравилоОбработки);
	ПроверитьТипБдИмпорт();
КонецПроцедуры

&НаКлиенте
Процедура ВнешнийИсточникНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ТипБД = ОпределитьТипБД(ПравилоОбработки);
	ПроверитьТипБдИмпорт();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСпособовОтображения()
	
	// Очистка исходного списка.
	Элементы.БланкОтчета.СписокВыбора.Очистить();
	
	Если ВерсияОрганизационнойСтруктуры.РежимМногопериодныхУОП Тогда	
		// Получение доступного списка бланков.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	БланкиОтчетов.Ссылка КАК Ссылка,
		|	БланкиОтчетов.Наименование КАК Наименование,
		|	БланкиОтчетов.РежимБланка КАК РежимБланка
		|ИЗ
		|	Справочник.БланкиОтчетов КАК БланкиОтчетов
		|ГДЕ
		|	БланкиОтчетов.Владелец = &ВидОтчета
		|	И НЕ БланкиОтчетов.ПометкаУдаления
		|	И (БланкиОтчетов.РежимБланка = 2
		|			ИЛИ БланкиОтчетов.РежимБланка = 1)";
		Запрос.УстановитьПараметр("ВидОтчета", ВидОтчета);
		Результат = Запрос.Выполнить().Выбрать();
		// Заполнение списка выбора доступными бланками.
		Пока Результат.Следующий() Цикл
			ПредставлениеБланка =НСтр("ru = 'бланке ""'") + Результат.Наименование + """";  
			Элементы.БланкОтчета.СписокВыбора.Добавить(Результат.Ссылка, ПредставлениеБланка, , 
			?(Результат.РежимБланка = 1,БиблиотекаКартинок.ВнешнийИсточникДанныхКуб,БиблиотекаКартинок.Органайзер));
		КонецЦикла;	
		БланкОтображенияПоУмолчанию =  УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображенияМногопериодный, ВидОтчета);
	Иначе	
		// Получение доступного списка бланков.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	БланкиОтчетов.Ссылка КАК Ссылка,
		|	БланкиОтчетов.Наименование КАК Наименование
		|ИЗ
		|	Справочник.БланкиОтчетов КАК БланкиОтчетов
		|ГДЕ
		|	БланкиОтчетов.Владелец = &ВидОтчета
		|	И БланкиОтчетов.РежимБланка = 0
		|	И НЕ БланкиОтчетов.ПометкаУдаления";
		Запрос.УстановитьПараметр("ВидОтчета", ВидОтчета);
		Результат = Запрос.Выполнить().Выбрать();
		// Заполнение списка выбора доступными бланками.
		Пока Результат.Следующий() Цикл
			ПредставлениеБланка = НСтр("ru = 'бланке ""'") + Результат.Наименование + """";
			Элементы.БланкОтчета.СписокВыбора.Добавить(Результат.Ссылка, ПредставлениеБланка, , БиблиотекаКартинок.БланкиОтчетов);
		КонецЦикла;
		// Добавление отображения в дереве.
		Элементы.БланкОтчета.СписокВыбора.Добавить(Справочники.БланкиОтчетов.ПустаяСсылка(), НСтр("ru = 'виде дерева'"),,БиблиотекаКартинок.Иерархия);
		БланкОтображенияПоУмолчанию =  УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображения, ВидОтчета);		
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(БланкОтчета) Тогда
		БланкОтчета = БланкОтображенияПоУмолчанию;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСписокСпособовОтображения() 


