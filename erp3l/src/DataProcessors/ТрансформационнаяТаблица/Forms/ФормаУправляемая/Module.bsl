
////////////////////////////////////////////////////////////////////////////////
// События формы
////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");	
	
	Элементы.СтраницыНастройки.Видимость=Ложь;	
	ТекПользователь=ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	
	Если ЗначениеЗаполнено(Параметры.ПланСчетовМСФО) Тогда
		
		Объект.ПланСчетовМСФО=Параметры.ПланСчетовМСФО;
		ПланСчетовМСФОПриИзмененииСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтображениеЗаголовков()
	
	Элементы.РезультатМатрицаОтчетов.ОтображатьЗаголовки = ОтображатьЗаголовки;
	Элементы.ОтображатьЗаголовки.Заголовок = ?(ОтображатьЗаголовки, НСтр("ru = 'Скрыть заголовки'"), НСтр("ru = 'Отображать заголовки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия="ЗаписанОбъектТрансляция" ИЛИ ИмяСобытия="ЗаписанОбъектТрансформационнаяКорректировка" Тогда
		СформироватьСервер(РезультатМатрицаОтчетов);
	КонецЕсли;
	
КонецПроцедуры

	
////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции
////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура СформироватьСервер(Результат)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Если УправлениеРабочимиПроцессамиУХ.ОрганизацияЯвляетсяКонсолидирующей(
		Объект.Организация, Объект.Сценарий, Объект.ПериодОтчета) Тогда
		
		СхемаКомпоновки = ОбработкаОбъект.ПолучитьМакет("КонсолидационнаяТаблица");
		АдресХранилищаСхемаКомпоновкиМатрицаОтчетов = ПоместитьВоВременноеХранилище(СхемаКомпоновки, ЭтаФорма.УникальныйИдентификатор);
		КомпоновщикМатрицаОтчетов.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
		
		КомпоновщикМатрицаОтчетов.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресХранилищаСхемаКомпоновкиМатрицаОтчетов));	
		
		ТекСоставПериметра = УправлениеРабочимиПроцессамиУХ.ПолучитьСоставПериметраКонсолидации(
					Объект.Сценарий, 
					Объект.ПериодОтчета, 
					Объект.Организация);
		
		СписокОрганизаций = ТекСоставПериметра.ВыгрузитьКолонку("ИндивидуальнаяОрганизация");
		СписокОрганизаций.Добавить(Объект.Организация);
		
	Иначе
		
		СхемаКомпоновки = ОбработкаОбъект.ПолучитьМакет("ТрансформационнаяТаблица");
		АдресХранилищаСхемаКомпоновкиМатрицаОтчетов = ПоместитьВоВременноеХранилище(СхемаКомпоновки, ЭтаФорма.УникальныйИдентификатор);
		КомпоновщикМатрицаОтчетов.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
		
		КомпоновщикМатрицаОтчетов.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресХранилищаСхемаКомпоновкиМатрицаОтчетов));			
		
	КонецЕсли;
			
	ВидыИтога = МСФОВызовСервераУХ.ПолучитьСтруктуруСоЗначениямиПеречисления("ВидыБухгалтерскихИтогов");
		
	МасВидИтогаПоСчету = Новый Массив;
	МасВидИтогаПоСчету.Добавить(ВидыИтога.СКД);
	МасВидИтогаПоСчету.Добавить(ВидыИтога.СКК);
	МасВидИтогаПоСчету.Добавить(ВидыИтога.ДО);
	МасВидИтогаПоСчету.Добавить(ВидыИтога.КО);
	
	НовыйИсточник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки);    
	КомпоновщикМатрицаОтчетов.Инициализировать(НовыйИсточник); 
	
	НастройкиКомпоновки=КомпоновщикМатрицаОтчетов.ПолучитьНастройки();
	
	ЭкземплярОтчета=ВернутьНужныйЭкземпляр(Объект.Организация);
	
	Если ЭкземплярОтчета=Неопределено Тогда
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Не найден экземпляр отчета для остатков и оборотов по счетам.'"));
		Возврат;
		
	КонецЕсли;
		
	ОсновнаяВалюта=ЭкземплярОтчета.ОсновнаяВалюта;
	
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("Сценарий",    		Объект.Сценарий);
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("ВидОтчета", 		ВидОтчетаАналитическаяОСВ);
	
	Если СписокОрганизаций=Неопределено Тогда
		
		НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("Организация", 	Объект.Организация);
		
	Иначе
		
		НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("Организация", 	СписокОрганизаций);
		НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("КонсолидирующаяОрганизация", Объект.Организация);
		
	КонецЕсли;

    НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодОтчета", 	Объект.ПериодОтчета);
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("ПланСчетов", 		Объект.ПланСчетовМСФО);
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("МассивВидовИтога",	МасВидИтогаПоСчету);
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("ОсновнаяВалюта",	ОсновнаяВалюта);
	
	ШаблонЗаголовка = НСтр("ru = 'Трансформационная таблица: Период <%1>, Организация <%2>, Валюта <%3>, Сценарий <%4>'");
	ЭтаФорма.Заголовок = СтрШаблон(ШаблонЗаголовка, Объект.ПериодОтчета, Объект.Организация, ОсновнаяВалюта, Объект.Сценарий);
		
	Для Каждого стр из ПараметрыТаблиц Цикл
	
		НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра(Стр.ИмяПараметра,     	Стр.ЗначениеПараметра);
					
	КонецЦикла;
	
	//Отбор по счету - всегда первый
	Если Объект.Счет = Справочники.СчетаБД.ПустаяСсылка() Тогда
		НастройкиКомпоновки.Отбор.Элементы[0].Использование = Ложь;
	Иначе	
		НастройкиКомпоновки.Отбор.Элементы[0].Использование = Истина;
		НастройкиКомпоновки.Отбор.Элементы[0].ПравоеЗначение = Объект.Счет;
	КонецЕсли;
		
	СхемаКомпоновки.Параметры.ЗаголовокОтчета.Значение=СформироватьТекстЗаголовкаОтчета();  
		
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиКомпоновки, ДанныеРасшифровки,,Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных();
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент();
	ПроцессорВывода.УстановитьДокумент(Результат);
	Результат.Очистить();
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
	УстановитьОформление(Результат);
	
	АдресХранилищаДанныеРасшифровкиМатрицаОтчетов    = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
	АдресХранилищаСхемаКомпоновкиМатрицаОтчетов = ПоместитьВоВременноеХранилище(СхемаКомпоновки,   УникальныйИдентификатор); 
		
КонецПроцедуры // СформироватьМатрицуОтчетов()

Процедура УстановитьОформление(Результат)
			 
	 //Колонки
	 Для ИндКолонки=3 по Результат.ШиринаТаблицы Цикл
		   Результат.Область(1,ИндКолонки,1,ИндКолонки).ШиринаКолонки=14;
	 КонецЦикла;
	 НетЛинии=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);

	 ТекСтрока= Результат.Область(1,0,1,0);
	 ТекСтрока.ВысотаСтроки=30;
	 
	 ТекСтрока= Результат.Область(0,1,0,1);
	 ТекСтрока.ШиринаКолонки=18;
	 
	 ТекСтрока= Результат.Область(0,2,0,2);
	 ТекСтрока.ШиринаКолонки=35;
	 
	 ОбластьШапки=Результат.Область(1,0,1,0);
	 Результат.ФиксацияСверху=2;	
	 
 КонецПроцедуры

&НаКлиенте
Функция  ПолучитьВыделенныеОбласти()
	
	СпОбластейРасшифровки = Новый СписокЗначений;
	
	ВыделенныеОбласти = РезультатМатрицаОтчетов.ВыделенныеОбласти;	
		
	Для Каждого ВыделеннаяОбласть из ВыделенныеОбласти Цикл
		
		Для Кол = ВыделеннаяОбласть.Лево По ВыделеннаяОбласть.Право Цикл
			Для Стр = ВыделеннаяОбласть.Верх По ВыделеннаяОбласть.низ Цикл 	
				      								
				Область = РезультатМатрицаОтчетов.Область(Стр,Кол);	
				СпОбластейРасшифровки.Добавить(Область.Расшифровка);						
				
			КонецЦикла;			
		КонецЦикла;
	КонецЦикла;
	
	Возврат СпОбластейРасшифровки;
	
КонецФункции	

&НаСервере
Функция СформироватьТекстЗаголовкаОтчета()

	Текст=СтрШаблон(Нстр("ru = 'Сценарий: %1; Период: %2'"), Объект.Сценарий, Объект.ПериодОтчета);
	
	ПользовательскиеНастройки=КомпоновщикОтборыАналитик.ПользовательскиеНастройки.Элементы;
	
	Для КАждого Отбор Из КомпоновщикОтборыАналитик.Настройки.Отбор.Элементы Цикл
		
		ПользОтбор=ПользовательскиеНастройки.Найти(Отбор.ИдентификаторПользовательскойНастройки);
		Если ПользОтбор<>Неопределено и ПользОтбор.Использование Тогда
			Текст=Текст+Символы.ПС+Отбор.ЛевоеЗначение+" "+ПользОтбор.ВидСравнения+" "+ПользОтбор.ПравоеЗначение;
		КонецЕсли;	
			
	КонецЦикла;
	
	Возврат Текст;

КонецФункции // СформироватьТекстПараметрыОтчета()

&НаСервере
Функция СтруктураРасшифровки(Расшифровка)
	
	ДанныеРасшифровкиОбъект=ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровкиМатрицаОтчетов);
	Поля = ДанныеРасшифровкиОбъект.Элементы[Расшифровка].ПолучитьПоля();
	
	МассивРодителей = ДанныеРасшифровкиОбъект.Элементы[Расшифровка].ПолучитьРодителей();

	СтруктураРодителей=Новый Структура;
	
	Для Каждого Родитель Из МассивРодителей Цикл
		Если ТипЗнч(Родитель)<>Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда  //Расшифровка работает только для детальных записей
			Продолжить;
		КонецЕсли;
		ПоляРодителей=Родитель.ПолучитьПоля();
		Для Каждого ПолеРасшифровки Из ПоляРодителей Цикл
			СтруктураРодителей.Вставить(ПолеРасшифровки.Поле,ПолеРасшифровки.Значение);	
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтруктураРодителей;

КонецФункции // НайтиПолеВРАсшифровке(МассивРодителей,"ВидОтчета")()

&НаСервереБезКонтекста
Функция ПолучитьНастройкиКомпоновщикаСервер(Компоновщик)

	Возврат Компоновщик.ПолучитьНастройки();	

КонецФункции // ПолучитьНастройкиКомпоновщикаСервер()

&НаКлиенте
Процедура СценарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.Сценарии.Форма.ФормаВыбораУправляемая", Новый Структура("ТолькоОткрытые", Истина), Элемент,);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.Периоды.ФормаВыбора",Новый Структура("ОтборСценарий",Объект.Сценарий),Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	СформироватьСервер(РезультатМатрицаОтчетов);
		
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЗаголовки(Команда)
	
	ОтображатьЗаголовки = НЕ ОтображатьЗаголовки;
	УстановитьОтображениеЗаголовков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	Элементы.ПоказатьНастройки.Пометка = НЕ Элементы.ПоказатьНастройки.Пометка;
	Элементы.СтраницыНастройки.Видимость = Элементы.ПоказатьНастройки.Пометка;
	
	СохранитьНастройки=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланСчетовМСФОПриИзменении(Элемент)
	
	ПланСчетовМСФОПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПланСчетовМСФОПриИзмененииСервер()
	
	ВидОтчетаАналитическаяОСВ=Объект.ПланСчетовМСФО.ВидОтчетаОСВ;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиКорректирвку(Команда)
	
	ПоложениеКурсора = Элементы.РезультатМатрицаОтчетов.ТекущаяОбласть;
	СпОбластейРасшифровки=ПолучитьВыделенныеОбласти();
	ВыделенныеОбласти = РезультатМатрицаОтчетов.ВыделенныеОбласти;	
	
	Для Каждого ВыделеннаяОбласть из ВыделенныеОбласти Цикл
		
		СтруктураРасшифровка=ПолучитьПоляРасшифровки(ВыделеннаяОбласть.Расшифровка);
		
		Если СтруктураРасшифровка.Свойство("ДО") 
			ИЛИ СтруктураРасшифровка.Свойство("КО") Тогда
			
			Если СтруктураРасшифровка.ГруппирующийСчет Тогда
				 Сообщить(Нстр("ru = 'Выбранный счет является группой! Корректировки возможны только по детальным счетам'"));
				 Продолжить;
			КонецЕсли;
			
			Форма  = ПолучитьФорму("Обработка.КорректировкиЗначенийПоказателей.Форма",Новый Структура("ИмяОбъектаМетаданных","ТрансформационнаяКорректировка"));
			Форма.Объект.Сценарий 				= Объект.Сценарий;
			Форма.Объект.ПериодОтчета 			= Объект.ПериодОтчета;
			Форма.Объект.Организация 			= ?(СтруктураРасшифровка.Свойство("Организация"),СтруктураРасшифровка.Организация,Объект.Организация);
			Форма.Объект.ПланСчетов 			= Объект.ПланСчетовМСФО;
			Форма.Объект.ДатаОтраженияВУчете 	= СтруктураРасшифровка.ДатаПериода;
			Форма.Объект.ИмяОбъектаМетаданных 	= "ТрансформационнаяКорректировка";
			Форма.Объект.ОсновнаяВалюта		 	= ОсновнаяВалюта;
			Форма.Объект.РасчетДатыОтраженияВУчете = ПредопределенноеЗначение("Перечисление.СпособыРасчетаДатыОтраженияВУчете.ДатаОкончанияПериода");
			
			Форма.Объект.КорректировкиЗначенийПоказателей = Истина;
			
			Если СтруктураРасшифровка.Свойство("ВерсияВидОперации") Тогда
				
				Форма.Объект.ВидОперации=СтруктураРасшифровка.ВерсияВидОперации;
				
			КонецЕсли;
						
			Нстр = Форма.ПроводкиОперации.Добавить();
			Если  СтруктураРасшифровка.Свойство("ДО") Тогда
				Нстр.СчетДт = СтруктураРасшифровка.СчетБД;				
			Иначе
				Нстр.СчетКт = СтруктураРасшифровка.СчетБД;	
			КонецЕсли;	
			
			Форма.Открыть();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВернутьНужныйЭкземпляр(Организация)
	
	   Запрос = Новый Запрос;
	   Запрос.Текст = "ВЫБРАТЬ
	   |	НастраиваемыйОтчет.Ссылка
	   |ИЗ
	   |	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	   |ГДЕ
	   |	НастраиваемыйОтчет.Организация = &Организация
	   |	И НастраиваемыйОтчет.ПериодОтчета = &ПериодОтчета
	   |	И НастраиваемыйОтчет.Сценарий = &Сценарий
	   |	И НастраиваемыйОтчет.ВидОтчета=&ВидОтчета";
	   
	   Запрос.УстановитьПараметр("Организация",Организация);
	   Запрос.УстановитьПараметр("ПериодОтчета",Объект.ПериодОтчета);
       Запрос.УстановитьПараметр("Сценарий",Объект.Сценарий);
	   Запрос.УстановитьПараметр("ВидОтчета",Объект.ПланСчетовМСФО.ВидОтчетаОСВ);
	   
	   Результат = Запрос.Выполнить();
	   Выборка = Результат.Выбрать();
	   
	   Пока Выборка.Следующий() Цикл
	   
	   	    Возврат Выборка.Ссылка;
	   
	   КонецЦикла;
	   
	   Возврат Неопределено;
	
КонецФункции	

&НаСервере
Функция ПолучитьПоляРасшифровки(Расшифровка)
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровкиМатрицаОтчетов);
	ЭлементыРасшифровки = ДанныеРасшифровки.Элементы.Получить(Расшифровка).ПолучитьПоля();
	
	СтруктураРасшифровка=Новый Структура;
	
	Для Каждого Элемент ИЗ ЭлементыРасшифровки Цикл
		
		СтруктураРасшифровка.Вставить(СтрЗаменить(Элемент.Поле,".",""),Элемент.Значение);
		
	КонецЦикла;	
	
	Если СтруктураРасшифровка.Свойство("СчетБД") Тогда
		
		СтруктураРасшифровка.Вставить("ГруппирующийСчет",СтруктураРасшифровка.СчетБД.ГруппирующийСчет);
		
	КонецЕсли;
	
	Если СтруктураРасшифровка.Свойство("ВерсияРегистратор") Тогда
		
		Если ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("ВидОперации",СтруктураРасшифровка.ВерсияРегистратор) Тогда
			
			СтруктураРасшифровка.Вставить("ВерсияВидОперации",СтруктураРасшифровка.ВерсияРегистратор.ВидОперации);
			
		Иначе
			
			СтруктураРасшифровка.Вставить("ВерсияВидОперации",Справочники.ВидыОпераций.УчетныеОперации);
			
		КонецЕсли;
			
	КонецЕсли;

	СтруктураРасшифровка.Вставить("ДатаПериода",Объект.ПериодОтчета.ДатаОкончания);
	
	Возврат СтруктураРасшифровка;	
		
КонецФункции

&НаСервере
Функция ПолучитьПоказательРасшифровки(СтруктураРасшифровки)
	
	СтруктураПараметров=Новый Структура;
	
	Если НЕ СтруктураРасшифровки.Свойство("СчетБД") Тогда
		
		Возврат СтруктураПараметров;
		
	КонецЕсли;
	
	Если СтруктураРасшифровки.Свойство("ЗначениеДт")
		ИЛИ СтруктураРасшифровки.Свойство("ЗначениеДтИтог")
		ИЛИ СтруктураРасшифровки.Свойство("ЗначениеКт")
		ИЛИ СтруктураРасшифровки.Свойство("ЗначениеКтИтог") Тогда
		
		БалансОПУ=Справочники.ВидыОтчетов.БалансОПУ(СтруктураРасшифровки.СчетБД);
		
		Если БалансОПУ=Справочники.РазделыПланаСчетов.Баланс Тогда
			
			Если СтруктураРасшифровки.Свойство("ЗначениеДт")
				ИЛИ СтруктураРасшифровки.Свойство("ЗначениеДтИтог") Тогда
				
				ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СКД;
				
			ИначеЕсли СтруктураРасшифровки.Свойство("ЗначениеКт")
				ИЛИ СтруктураРасшифровки.Свойство("ЗначениеКтИтог") Тогда
				
				ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СКК;
				
			КонецЕсли;
			
		ИначеЕсли БалансОПУ=Справочники.РазделыПланаСчетов.ОПУ Тогда
			
			Если СтруктураРасшифровки.Свойство("ЗначениеДт")
				ИЛИ СтруктураРасшифровки.Свойство("ЗначениеДтИтог") Тогда
				
				ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.ДО;
				
			ИначеЕсли СтруктураРасшифровки.Свойство("ЗначениеКт")
				ИЛИ СтруктураРасшифровки.Свойство("ЗначениеКтИтог") Тогда
				
				ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.КО;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРасшифровки.Свойство("ДО") Тогда
		
		ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.ДО;
		
	ИначеЕсли СтруктураРасшифровки.Свойство("КО") Тогда
		
		ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.ДО;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка,
	|	ПоказателиОтчетов.Код
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &Владелец
	|	И ПоказателиОтчетов.СчетБД = &СчетБД
	|	И ПоказателиОтчетов.ВидИтогаПоСчету = &ВидИтогаПоСчету";
	
	Запрос.УстановитьПараметр("Владелец",ВидОтчетаАналитическаяОСВ);
	Запрос.УстановитьПараметр("СчетБД",СтруктураРасшифровки.СчетБД);
	Запрос.УстановитьПараметр("ВидИтогаПоСчету",ВидИтогаПоСчету);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		СтруктураПараметров.Вставить("ПоказательОтчета",Результат.Ссылка);
		СтруктураПараметров.Вставить("Код",СокрЛП(Результат.Код));
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
		
КонецФункции // ПолучитьПоказательРасшифровки() 

&НаСервере
Функция ПолучитьПараметрыОбработкиКорректировки(СтруктураРасшифровки)
	
	ДанныеПоказателя=ПолучитьПоказательРасшифровки(СтруктураРасшифровки);
	
	Если ДанныеПоказателя.Количество()=0 Тогда
		
		Возврат ДанныеПоказателя;
		
	КонецЕсли;
	
	ОбработкаОбъект=Обработки.КорректировкиЗначенийПоказателей.Создать();
	
	ЗаполнитьЗначенияСвойств(ОбработкаОбъект,СтруктураРасшифровки.ВерсияРегистратор);
	
	Если ТипЗнч(СтруктураРасшифровки.ВерсияРегистратор)=Тип("ДокументСсылка.Трансляция") Тогда
		
		ОбработкаОбъект.ИмяОбъектаМетаданных="Трансляция";
		
	ИначеЕсли ТипЗнч(СтруктураРасшифровки.ВерсияРегистратор)=Тип("ДокументСсылка.ТрансформационнаяКорректировка") Тогда
		
		ОбработкаОбъект.ИмяОбъектаМетаданных="ТрансформационнаяКорректировка";
		
	КонецЕсли;
	
	ОбработкаОбъект.ИнициализироватьКонтекст();
	
	Если ОбработкаОбъект.мСоответствиеДляПоискаПоСсылке[ДанныеПоказателя.ПоказательОтчета]=Неопределено Тогда
		
		Возврат Новый Структура;
		
	Иначе
		
		ДанныеПоказателя.Вставить("АдресХранилищаПеременныхДляРасчета",ПоместитьВоВременноеХранилище(ОбщегоНазначенияУХ.ПолучитьСтруктуруРеквизитовОбъекта(ОбработкаОбъект,ОбработкаОбъект.ПодготовитьСтруктуруПеременныхДляРасчета()),ЭтаФорма.УникальныйИдентификатор));
		
		Возврат ДанныеПоказателя;
				
	КонецЕсли;
		
КонецФункции // ПолучитьПоказательКорректировки() 

&НаКлиенте
Процедура РезультатМатрицаОтчетовОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;	
	
	СтруктураРасшифровки = ПолучитьПоляРасшифровки(Расшифровка);
	
	Если СтруктураРасшифровки.Свойство("ВерсияРегистратор") Тогда
		
		Если СтруктураРасшифровки.Количество()=1 Тогда
			
			ПоказатьЗначение(,СтруктураРасшифровки.ВерсияРегистратор);
			
		Иначе	
			
			ПараметрыОбработкиКорректировки=ПолучитьПараметрыОбработкиКорректировки(СтруктураРасшифровки);
			
			Если ПараметрыОбработкиКорректировки.Количество()=3 Тогда
				
				СтруктураПараметров=Новый Структура;
				СтруктураПараметров.Вставить("ПоказательОтчета",					ПараметрыОбработкиКорректировки.ПоказательОтчета);
				СтруктураПараметров.Вставить("АдресХранилищаПеременныхДляРасчета",	ПараметрыОбработкиКорректировки.АдресХранилищаПеременныхДляРасчета);
				СтруктураПараметров.Вставить("мТекущаяВалюта",ОсновнаяВалюта);
				СтруктураПараметров.Вставить("СтруктураОтбора");
				
				ОткрытьФорму("Обработка.РасшифровкаРассчитанныхЗначений.Форма",СтруктураПараметров);
				
			Иначе // Корректировка была введена вручную
				
				ПоказатьЗначение(,СтруктураРасшифровки.ВерсияРегистратор);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ДанныеПоказателя=ПолучитьПоказательРасшифровки(СтруктураРасшифровки);
		
		Если ДанныеПоказателя.Количество()=0 Тогда
			
			Возврат;
			
		КонецЕсли;
		
		МассивПоказателей=Новый Массив;
		МассивПоказателей.Добавить(ДанныеПоказателя.Код);
		
		Если СтруктураРасшифровки.Свойство("Организация") Тогда
			
			ОткрытьФорму("Документ.НастраиваемыйОтчет.ФормаОбъекта",Новый Структура("Ключ,МассивПоказателей",ВернутьНужныйЭкземпляр(СтруктураРасшифровки.Организация),Новый ФиксированныйМассив(МассивПоказателей)));
			
		Иначе
			
			ОткрытьФорму("Документ.НастраиваемыйОтчет.ФормаОбъекта",Новый Структура("Ключ,МассивПоказателей",ЭкземплярОтчета,Новый ФиксированныйМассив(МассивПоказателей)));
			
		КонецЕсли;
				
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ПланСчетовМСФОПриИзмененииСервер();
		
КонецПроцедуры
