#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ВыполняетсяЗакрытие Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Если Параметры.Номенклатура = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Предусмотрено открытие обработки только из обработки ""Формирование заказов по потребностям"".'");
	КонецЕсли;
	
	КодФормы = "Обработка_ПодборПоПланамПоставкиПоДоговорам_Форма";
	
	// Заполнение параметров динамических списков.
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ДоговораИКонтрагенты, "Номенклатура",	Параметры.Номенклатура,   Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ДоговораИКонтрагенты, "Характеристика",	Параметры.Характеристика, Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПланПоставокПоДоговору, "Номенклатура",	Параметры.Номенклатура,   Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПланПоставокПоДоговору, "Характеристика",Параметры.Характеристика, Истина);
	Если Параметры.Свойство("МестоПоставки") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПланПоставокПоДоговору, "МестоПоставки",Параметры.МестоПоставки, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ДоговораИКонтрагенты, "МестоПоставки",	Параметры.МестоПоставки, Истина);
	КонецЕсли;
	ПриСозданииФормыПодбораНаСервере();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы
		И Объект.Корзина.Количество() > 0 Тогда
		
		Отказ = Истина;
		ТекстПредупреждения = НСтр("ru = 'Данные были изменены. Все изменения будут потеряны.'");
		
		Возврат;
		
	КонецЕсли;
	
	ПодборТоваровКлиент.ПередЗакрытиемФормыПодбораТоваров(ЭтаФорма, Объект, Отказ);
	
	Если ПеренестиВДокумент И ПроверятьЗаполнение И Не ПроверитьЗаполнение() И НЕ ВыполняетсяЗакрытие Тогда
		ПеренестиВДокумент = Ложь;
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиФормыНаСервере();
	АдресВХранилище = АдресВХранилище();
	
	Если ПеренестиВДокумент И АдресВХранилище <> Неопределено Тогда
		Структура = Новый Структура("ПланПоставкиПоДоговорам", АдресВХранилище);
		ОповеститьОВыборе(Структура);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ИнформационнаяНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПриНажатииНаИнформационнуюНадпись(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	ПеренестиВДокумент = Истина;
	Закрыть(КодВозвратаДиалога.OK);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВЗаказ(Команда)
	ПланПоставокПоДоговоруВыбор(Элементы.ПланПоставокПоДоговору.текущиеданные);	
КонецПроцедуры

&НаКлиенте
Процедура ПланПоставокПоДоговоруВыбор(Элемент, ВыбраннаяСтрока = Неопределено, Поле = Неопределено, СтандартнаяОбработка = Неопределено)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТребуемоеКоличество = 0 Тогда
		Возврат;
	КонецЕсли;
	Если Тип(Элемент) = Тип("ТаблицаФормы") Тогда
		_ТекущаяСтрокаПланаПоставки = Элемент.ТекущиеДанные;
	Иначе
		_ТекущаяСтрокаПланаПоставки = Элемент;
	КонецЕсли;	
	Если _ТекущаяСтрокаПланаПоставки.Свободно = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПланаПоставки = ПараметрыПланаПоставки();
	
	ЗаполнитьЗначенияСвойств(ПараметрыПланаПоставки, _ТекущаяСтрокаПланаПоставки);
	ПараметрыПланаПоставки.МаксимальноеКоличество = ПараметрыПланаПоставки.Свободно;
	
	//
	ПараметрыПланаПоставки.КоличествоУпаковок = 1;
	ПараметрыПланаПоставки.Договор = Договор;
	ПараметрыПланаПоставки.Соглашение = Соглашение;
	ПараметрыПланаПоставки.Номенклатура = Номенклатура;
	ПараметрыПланаПоставки.Характеристика = Характеристика;
	
	//
	ДобавитьВКорзину(ПараметрыПланаПоставки);
	
	//
	ОбновитьПодобраноВСпискеПланаПоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодобраноВСпискеПланаПоставки()
	
	СписокПланПоставокПоДоговору.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("Корзина", Объект.Корзина);
	Элементы.ПланПоставокПоДоговору.Обновить();
	
КонецПроцедуры

#Область ОбработчикиСобытийНаСервере

// Вызывается из обработчика события "ПриСозданииНаСервере" форм подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
&НаСервере
Процедура ПриСозданииФормыПодбораНаСервере() Экспорт
	
	//ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	ЭтоФормаПодбораВДокументыЗакупки = Истина;
	АвторизованВнешнийПользователь = ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь();
	
	//
	ЭтаФорма.Номенклатура = Параметры.Номенклатура;
	ЭтаФорма.Характеристика = Параметры.Характеристика;
	ЭтаФорма.ТребуемоеКоличество = Параметры.ТребуемоеКоличество;
	ЭтаФорма.МестоПоставки = Параметры.МестоПоставки;
	ЭтаФорма.ЕдиницаИзмерения = Параметры.ЕдиницаИзмерения;
	
	ИспользованоПриОбеспеченииИныхПотребностей = Объект.Корзина.Выгрузить();
	ИспользованоПриОбеспеченииИныхПотребностей.Очистить();
	
	//
	Для Каждого СтрокаИспользования Из Параметры.Использование Цикл
		Если Параметры.ТаблицаЗапасы = СтрокаИспользования.ТаблицаЗапасы И Параметры.КодСтроки = СтрокаИспользования.КодСтроки Тогда
			ЗаполнитьЗначенияСвойств(Объект.Корзина.Добавить(), СтрокаИспользования);
		Иначе
			ЗаполнитьЗначенияСвойств(ИспользованоПриОбеспеченииИныхПотребностей.Добавить(), СтрокаИспользования);
		КонецЕсли;
	КонецЦикла;
	
	//
	ИспользованоПриОбеспеченииИныхПотребностей.Свернуть(
		"Договор, Соглашение, Приоритет, Лот, ПериодПотребности, ОрганизацияПолучатель, МестоПоставки, Проект, Менеджер, ДоговорСПокупателем, Номенклатура, Характеристика, Упаковка",
		"Количество, КоличествоУпаковок, СуммаВВалютеПоставки"
	);
	
	Объект.ИспользованоПриОбеспеченииИныхПотребностей.Загрузить(ИспользованоПриОбеспеченииИныхПотребностей);
	
	СписокПланПоставокПоДоговору.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("Корзина", Объект.Корзина);
	СписокПланПоставокПоДоговору.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ИныеПотребности", Объект.ИспользованоПриОбеспеченииИныхПотребностей);
	
#Область ПолучитьЗначенияФункциональныхОпций
	
	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
		
#КонецОбласти
	
	УстановитьЗначенияПоНастройкамФормы();
	
#Область УстановитьЗначенияПоНастройкамФормыПодбора
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ЭтаФорма.КодФормы,  "");
	Если Настройки = неопределено Тогда
		Настройки = Новый Структура;
	КонецЕсли;
	
	Если Не (Настройки = Неопределено) Тогда
		
		Если Настройки.Свойство("ПоказыватьПодобранныеТовары") Тогда
			
			ПоказыватьПодобранныеТовары = Настройки.ПоказыватьПодобранныеТовары;
			
		КонецЕсли;
		
//		Если Настройки.Свойство("ЗапрашиватьКоличество") Тогда
//			Форма.ЗапрашиватьКоличество = Настройки.ЗапрашиватьКоличество;
//		КонецЕсли;
//		
	КонецЕсли;
//	
//	Если ЭтоФормаПодбораВДокументыЗакупки Тогда
//		Элементы.ЗапрашиватьКоличествоЦену.Пометка = Форма.ЗапрашиватьКоличество;
//	Иначе
//		Элементы.НеЗапрашиватьКоличество.Пометка = Не Форма.ЗапрашиватьКоличество;
//		Элементы.ЗапрашиватьКоличество.Пометка = Форма.ЗапрашиватьКоличество И (Не Форма.ЗапрашиватьЦену Или Форма.РежимПодбораБезСуммовыхПараметров);
//		Элементы.ЗапрашиватьКоличествоЦену.Пометка = Форма.ЗапрашиватьКоличество И Форма.ЗапрашиватьЦену;
//	КонецЕсли;

#КонецОбласти	

#Область УстановитьЗаголовкиЭлементовФормыПоПараметрам
//	ИмяСпискаНоменклатуры = ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма);
//	ИмяСпискаХарактеристик = ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма);
//		
//	ТекстЗаголовка = НСтр("ru = 'Цена'");
//	
//	Если ЗначениеЗаполнено(Форма.Валюта) Тогда
//		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Цена (%1)'"), Форма.Валюта);
//	КонецЕсли;
//	
//	Форма.Элементы[ИмяСпискаНоменклатуры].ПодчиненныеЭлементы[ИмяСпискаНоменклатуры+"Цена"].Заголовок = ТекстЗаголовка;
//	Форма.Элементы[ИмяСпискаХарактеристик].ПодчиненныеЭлементы[ИмяСпискаХарактеристик+"Цена"].Заголовок = ТекстЗаголовка;
//	
//	Элементы.КорзинаЦена.Заголовок = ТекстЗаголовка;
//	
//	Если Параметры.Свойство("Документ") Тогда
//		Если ТипЗнч(Параметры.Документ) <> Тип("ДокументСсылка.УстановкаЦенНоменклатуры") Тогда
//			Элементы.ТолькоВНаличии.Заголовок = ТекстЗаголовка;
//		КонецЕсли;
//	Иначе
//		Элементы.ТолькоВНаличии.Заголовок = ТекстЗаголовка;
//	КонецЕсли;
#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФормыНаСервере()
	
	//ПодборТоваровСервер.СохранитьНастройкиФормыПодбора(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбора.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ФиксированноеЗначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Ложь, Ложь, Истина, Ложь, ));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставление.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОтборов.Отбор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Истина, Ложь, Ложь, Ложь, ));

	////
	//
	//НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(Форма,
	//															"КорзинаНоменклатураЕдиницаИзмерения", 
	//															"Объект.Корзина.Упаковка");

	////
    //
	//НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
	//															"КорзинаХарактеристика",
	//															"Объект.Корзина.ХарактеристикиИспользуются");
	
	
КонецПроцедуры

&НаСервере
Функция АдресВХранилище()
	
	АдресВХранилище = Неопределено;
	
	Если ПеренестиВДокумент Тогда
		АдресВХранилище = ПоместитьВХранилище();
	КонецЕсли;
	
	Возврат АдресВХранилище;
	
КонецФункции

&НаСервере
Функция ПоместитьВХранилище()
	
	ПланПоставок = Объект.Корзина.Выгрузить();
	
	Поз = 0;
	Пока Поз < ПланПоставок.Количество() Цикл
		СтрокаПланаПоставок = ПланПоставок[Поз];
		Если СтрокаПланаПоставок.Количество = 0 Тогда
			ПланПоставок.Удалить(СтрокаПланаПоставок);
		Иначе
			Поз = Поз + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ПланПоставок, УникальныйИдентификатор);
	
	Возврат АдресВХранилище;
	
КонецФункции

#КонецОбласти

// Возвращает структуру необходимую для передачи данных о товаре в
// процедуры добавления товара в корзину.
//
// Параметры:
//	Номенклатура - СправочникСсылка.Номенклатура - номенклатура.
//
// Возвращаемое значение:
//	Структура - структура параметров товара.
//
&НаСервереБезКонтекста
Функция ПараметрыПланаПоставки(Номенклатура = Неопределено) Экспорт
	
	ПараметрыПланаПоставки = КлючевыеПараметрыПланаПоставки();
	//ПараметрыПланаПоставки.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	//ПараметрыПланаПоставки.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	ПараметрыПланаПоставки.Вставить("ВалютаСоглашения", ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"));
	ПараметрыПланаПоставки.Вставить("Количество", 0);
	ПараметрыПланаПоставки.Вставить("СуммаВВалютеПоставки", 0);
	ПараметрыПланаПоставки.Вставить("МаксимальноеКоличество", 0);
	ПараметрыПланаПоставки.Вставить("Использовано", 0);
	ПараметрыПланаПоставки.Вставить("Свободно", 0);
	
	ПараметрыПланаПоставки.Вставить("Упаковка", ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
	ПараметрыПланаПоставки.Вставить("ЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
	ПараметрыПланаПоставки.Вставить("КоличествоУпаковок",0);
	
	Если Номенклатура <> Неопределено Тогда
		ПараметрыПланаПоставки.Упаковка = ПодборТоваровВызовСервера.ПолучитьУпаковкуХранения(Номенклатура);
	КонецЕсли; 
	
	Возврат ПараметрыПланаПоставки;
	
КонецФункции

&НаСервереБезКонтекста
Функция КлючевыеПараметрыПланаПоставки() Экспорт
	
	ПараметрыПланаПоставки = Новый Структура();
	ПараметрыПланаПоставки.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	ПараметрыПланаПоставки.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	ПараметрыПланаПоставки.Вставить("Договор", ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
	ПараметрыПланаПоставки.Вставить("Соглашение", ПредопределенноеЗначение("Справочник.СоглашенияСПоставщиками.ПустаяСсылка"));
	//ПараметрыПланаПоставки.Вставить("ВалютаСоглашения", ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"));
	ПараметрыПланаПоставки.Вставить("Приоритет", ПредопределенноеЗначение("Справочник.ПриоритетыПотребностей.ПустаяСсылка"));
	ПараметрыПланаПоставки.Вставить("Лот", ПредопределенноеЗначение("Справочник.Лоты.ПустаяСсылка"));
	ПараметрыПланаПоставки.Вставить("ПериодПотребности", ПредопределенноеЗначение("Справочник.Периоды.ПустаяСсылка"));
	ПараметрыПланаПоставки.Вставить("ОрганизацияПолучатель", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	ПараметрыПланаПоставки.Вставить("МестоПоставки", ПредопределенноеЗначение("Справочник.МестаПоставки.ПустаяСсылка"));
	ПараметрыПланаПоставки.Вставить("Проект", ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка"));
	ПараметрыПланаПоставки.Вставить("Менеджер", ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка"));
	ПараметрыПланаПоставки.Вставить("ДоговорСПокупателем", ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
	
	//ПараметрыПланаПоставки.Вставить("Упаковка", ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
	//ПараметрыПланаПоставки.Вставить("ЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
	//ПараметрыПланаПоставки.Вставить("КоличествоУпаковок",0);
	//
	//Если Номенклатура <> Неопределено Тогда
	//	ПараметрыПланаПоставки.Упаковка = ПодборТоваровВызовСервера.ПолучитьУпаковкуХранения(Номенклатура);
	//КонецЕсли; 
	
	Возврат ПараметрыПланаПоставки;
	
КонецФункции

#Область ОтборПоДоговору

#Область СобытияЭлементовФормы
	
&НаКлиенте
Процедура ДоговорыКонтрагентыПриАктивизацииСтроки(Элемент)
 	ПриАктивизацииСтрокиСпискаДоговорыКонтрагенты(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	ДоговорПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийНаКлиенте

// Процедура вызывается при активизации строки списка видов номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подборов.
//
&НаКлиенте
Процедура ПриАктивизацииСтрокиСпискаДоговорыКонтрагенты(Форма) Экспорт
	
	//// &ЗамерПроизводительности
	//ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
	//	"ОбщийМодуль.ПодборТоваровКлиент.ПриАктивизацииСтрокиСпискаВидыНоменклатуры");
	
	ТекущиеДанные = Форма.Элементы.ДоговорыКонтрагенты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
		Или Форма.Договор = ТекущиеДанные.Договор Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Договор = ТекущиеДанные.Договор;
	Форма.Соглашение = ТекущиеДанные.Соглашение;

	//	
	Форма.ПодключитьОбработчикОжидания("ДоговорыКонтрагентыПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыКонтрагентыПриАктивизацииСтрокиОбработчикОжидания()
	
	ТекущиеДанные = Элементы.ДоговорыКонтрагенты.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
	
		ДоговорПриИзмененииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийНаСервере

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	ПриИзмененииДоговора(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриИзмененииДоговора(Форма) Экспорт
	
	Если Форма.Договор = Форма.ДоговорДоИзменения Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ДоговорДоИзменения = Форма.Договор;
	УдалитьОтборПоДоговоруИСвойствамПоставки(Форма);
	ЗаполнитьДеревоОтборовПоставки(Форма);
	УстановитьОтборПоДоговоруИСвойствамПоставки(Форма);
	
КонецПроцедуры

// Устанавливает отбор по виду номенклатуры у списка номенклатуры на формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
&НаСервереБезКонтекста
Процедура УстановитьОтборПоДоговору(Форма)
	
	ЭлементыОтбора = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокПланПоставокПоДоговору);
	
	// Установить отбор по виду номенклатуры.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементыОтбора,
		"Договор",
		Форма.Договор,
		ВидСравненияКомпоновкиДанных.Равно, 
		"ОтборПоДоговору",
		Истина);
	
КонецПроцедуры

// Удаляет отбор по виду номенклатуры у списка номенклатуры на формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
&НаСервереБезКонтекста
Процедура УдалитьОтборПоДоговору(Форма)
	
	Договор = Форма.Договор;
	ЭлементыОтбора = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокПланПоставокПоДоговору);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементыОтбора,
		"Договор",
		Форма.Договор,
		ВидСравненияКомпоновкиДанных.Равно, 
		"ОтборПоДоговору",
		Ложь);
	
КонецПроцедуры

// Устанавливает отбор по свойствам вида номенклатуры у списка номенклатуры на форме подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подбора, форма выбора.
//
&НаСервереБезКонтекста
Процедура УстановитьОтборПоСвойствамПоставки(Форма)
	
	//ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ПараметрыОтбора = Новый Структура("Отбор", Истина);
	//
	ОтборСпискаПланаПоставок = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокПланПоставокПоДоговору);
	
	ИмяСсылки = "Ссылка.[";
	ТаблицаПараметровОтбора = Форма.ТаблицаПараметровОтбора.Выгрузить();
	ТаблицаПараметровОтбора = ТаблицаПараметровОтбора.Скопировать(ПараметрыОтбора);
	//
	Пока ТаблицаПараметровОтбора.Количество() <> 0 Цикл
		
		СтрокаДереваОтборов = ТаблицаПараметровОтбора[0];
		
		Если СтрокаДереваОтборов.ФиксированноеЗначение Тогда
			
			// Сформировать имя элемента отбора.
			ИмяЭлементаОтбора = СтрокаДереваОтборов.ИмяРеквизита;
			Если СтрокаДереваОтборов.ЭтоДопРеквизит Тогда
				ИмяЭлементаОтбора = ИмяСсылки + СтрокаДереваОтборов.ИмяРеквизита + "]";
			КонецЕсли;
			
			// В зависимости от типа установить значение элемента отбора.
			Если ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Булево") Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаПланаПоставок, ИмяЭлементаОтбора, Истина, 
					ВидСравненияКомпоновкиДанных.Равно,,Истина);
				
			ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Дата") 
				Или ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Число") Тогда
				
				Если ЗначениеЗаполнено(СтрокаДереваОтборов.ИнтервалОт) Тогда
					
					ПодборТоваровСервер.ДобавитьЭлементОтбора(ОтборСпискаПланаПоставок, ИмяЭлементаОтбора, СтрокаДереваОтборов.ИнтервалОт, 
						ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДереваОтборов.ИнтервалДо) Тогда
					
					ПодборТоваровСервер.ДобавитьЭлементОтбора(ОтборСпискаПланаПоставок, ИмяЭлементаОтбора, СтрокаДереваОтборов.ИнтервалДо, 
						ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Строка") Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаПланаПоставок, ИмяЭлементаОтбора, 
					СтрокаДереваОтборов.ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,,Истина);
				
			ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("СписокЗначений") Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаПланаПоставок, ИмяЭлементаОтбора, 
					СтрокаДереваОтборов.ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
				
			КонецЕсли;
			
			ТаблицаПараметровОтбора.Удалить(СтрокаДереваОтборов);
			
		Иначе
			
			ПараметрыОтбора = Новый Структура("ИмяРеквизита", СтрокаДереваОтборов.ИмяРеквизита);
			
			МассивСтрок = ТаблицаПараметровОтбора.НайтиСтроки(ПараметрыОтбора);
			
			СтрокаОтбора = МассивСтрок[0];
			ИмяЭлементаОтбора = СтрокаОтбора.ИмяРеквизита ;
			
			ЗначенияОтборов = Новый Массив;
			Для Каждого Строка Из МассивСтрок Цикл
				ЗначенияОтборов.Добавить(Строка.ЗначениеОтбора);
				ТаблицаПараметровОтбора.Удалить(Строка);
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаПланаПоставок, ?(ИмяЭлементаОтбора="ОрганизацияПолучатель","Организация",ИмяЭлементаОтбора), ЗначенияОтборов, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет установленные отборы по свойствам вида номенклатуры.
// Точнее удаляются все установленные отборы на списке за исключением тех
// которые не относятся к отборам дерева свойств.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
&НаСервереБезКонтекста
Процедура УдалитьОтборПоСвойствамПоставкиПоДоговору(Форма)
	
	//
	// Некоторые элементы отбора не должны удаляться - они не относятся
	// к отбору по свойствам вида номенклатуры.
	НеУдаляемыеЭлементы = НеУдаляемыеЭлементыОтборов();
	
	// Удалить элементы отбора по свойствам вида номенклатуры.
	ОтборСпискаПланаПоставок = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокПланПоставокПоДоговору).Элементы;
	ВГраница = ОтборСпискаПланаПоставок.Количество() - 1;
	
	Для ОбрИндекс = 0 По ВГраница Цикл
		
		ЭлементОтбора = ОтборСпискаПланаПоставок[ВГраница - ОбрИндекс];
		
		Если НеУдаляемыеЭлементы.Найти(ЭлементОтбора.Представление) = Неопределено Тогда
			ОтборСпискаПланаПоставок.Удалить(ЭлементОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив имен элементов отбора которые не следует удалять.
//
// Возвращаемое значение:
//
//	Массив.
//		Массив имен отборов которые не следует удалять - они не относятся 
//		к отбору по свойствам вида номенклатуры.
//
&НаСервереБезКонтекста
Функция НеУдаляемыеЭлементыОтборов()
	
	НеУдаляемыеЭлементы = Новый Массив;
	
	НеУдаляемыеЭлементы.Добавить("ОтборПоДоговору");
	Возврат НеУдаляемыеЭлементы
	
КонецФункции

// Отключает установленные отборы по виду номенклатуры и по свойствам выбранного
// вида номенклатуры на форме подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подбора, форма выбора.
//
&НаСервереБезКонтекста
Процедура УдалитьОтборПоДоговоруИСвойствамПоставки(Форма)
	
	УдалитьОтборПоДоговору(Форма);
	УдалитьОтборПоСвойствамПоставкиПоДоговору(Форма);
	
КонецПроцедуры


// Восстанавливает значение реквизитов на форме из хранилища общих настроек.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма выбора.
//
&НаСервере
Процедура УстановитьЗначенияПоНастройкамФормы()
	
	ЭтаФорма.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	// Если есть сохраненные настройки, то установить значения по настройкам.
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ЭтаФорма.КодФормы,  "");
	
	Если Настройки <> Неопределено Тогда
		
		Если Настройки.Свойство("ТаблицаПараметровОтбора") Тогда
			Если ЗначениеЗаполнено(Настройки.ТаблицаПараметровОтбора) Тогда
				ЭтаФорма.ТаблицаПараметровОтбора.Загрузить(Настройки.ТаблицаПараметровОтбора);
			КонецЕсли;
		КонецЕсли;
		
		Если Настройки.Свойство("Договор") Тогда
			
			Если ЗначениеЗаполнено(Настройки.Договор) Тогда
				
				// Проверить, что ссылка указывает на существующий объект.
				Если Настройки.Договор.ПолучитьОбъект() <> Неопределено Тогда
					
					ЭтаФорма.Договор = Настройки.Договор;
					
					ЗаполнитьДеревоОтборовПоставки(ЭтаФорма);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПриИзмененииИспользованияФильтров(ЭтаФорма);
	
КонецПроцедуры

// Вызывается из форм подборов при изменении флажка использования фильтров.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
&НаСервереБезКонтекста
Процедура ПриИзмененииИспользованияФильтров(Форма) Экспорт

	Форма.ДоговорДоИзменения = Неопределено;
	УстановитьОтборПоДоговоруИСвойствамПоставки(Форма);
	
	ПриИзмененииДоговора(Форма);
	
КонецПроцедуры

// Устанавливает отбор по виду номенклатуры и свойствам вида номенклатуры
// у списка номенклатуры в формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
&НаСервереБезКонтекста
Процедура УстановитьОтборПоДоговоруИСвойствамПоставки(Форма)
	
	УстановитьОтборПоДоговору(Форма);
	УстановитьОтборПоСвойствамПоставки(Форма);
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область Корзина

&НаКлиенте
Процедура ДобавитьВКорзину(ПараметрыПланаПоставки)
	
	//Если Не ЗначениеЗаполнено(ПараметрыПланаПоставки) Тогда
	Если ПараметрыПланаПоставки = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НовыеСтроки", Новый Массив);
	ДополнительныеПараметры.Вставить("ПараметрыПланаПоставки", ПараметрыПланаПоставки);
	
	//Если ЗапрашиватьКоличество И Не РежимПодбораБезКоличественныхПараметров Тогда
	//	
	//	ПараметрыФормы = Новый Структура("Номенклатура, Характеристика, Упаковка, Цена, ЦенаВключаетНДС, Дата, Валюта, Склады, Склад, ЭтоУслуга, Соглашение, Партнер, ИспользоватьСкладыВТабличнойЧасти,
	//	|СкрытьЦену, РедактироватьЦену, МаксПроцентРучнойСкидки, СкрыватьРучныеСкидки");
	//	
	//	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ПараметрыТовара);
	//	
	//	ПараметрыФормы.Дата                              = Дата;
	//	ПараметрыФормы.Валюта                            = Валюта;
	//	ПараметрыФормы.Склады                            = Склады.ВыгрузитьЗначения();
	//	ПараметрыФормы.Партнер                           = Партнер;
	//	ПараметрыФормы.Соглашение                        = Соглашение;
	//	ПараметрыФормы.ЦенаВключаетНДС                   = Объект.ЦенаВключаетНДС;
	//	ПараметрыФормы.ИспользоватьСкладыВТабличнойЧасти = РежимПодбораИспользоватьСкладыВТабличнойЧасти;
	//	ПараметрыФормы.СкрытьЦену                        = РежимПодбораБезСуммовыхПараметров;
	//	ПараметрыФормы.РедактироватьЦену                 = Истина;
	//	ПараметрыФормы.СкрыватьРучныеСкидки              = СкрыватьРучныеСкидки Или РежимПодбораБезСуммовыхПараметров;
	//	ПараметрыФормы.МаксПроцентРучнойСкидки           = МаксПроцентРучнойСкидки;
	//	ПараметрыФормы.Упаковка                          = ПараметрыТовара.Упаковка;
	//	
//		АдресВоВременномХранилище = Неопределено;
	//	
	//	ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	//	ПараметрыФормы.Вставить("ВидЦеныПоставщика",         ВидЦеныПоставщика);
	//	
	//	ОткрытьФорму(
	//		"Обработка.ПодборТоваровВДокументЗакупки.Форма.ЗапросКоличества",
	//		ПараметрыФормы,
	//		ЭтаФорма,
	//		,
	//		,
	//		,
	//		Новый ОписаниеОповещения("ДобавитьВКорзинуЗапросКоличестваЗавершение", ЭтотОбъект, ДополнительныеПараметры),
	//		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	//		
	//	Возврат;
	//		
	//Иначе
	//	
		НоваяСтрока = ПараметрыПланаПоставки();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыПланаПоставки);
	//	НоваяСтрока.ВидЦеныПоставщика = ВидЦеныПоставщика;
	//	
	//	Если НоваяСтрока.Упаковка = Неопределено Тогда
	//		НоваяСтрока.Упаковка = ПодборТоваровВызовСервера.ПолучитьУпаковкуХранения(НоваяСтрока.Номенклатура);	
	//	ИначеЕсли НоваяСтрока.Упаковка.Пустая() Тогда 
	//		НоваяСтрока.Упаковка = ПодборТоваровВызовСервера.ПолучитьУпаковкуХранения(НоваяСтрока.Номенклатура);
	//	КонецЕсли;
	//	
		ДополнительныеПараметры.НовыеСтроки.Добавить(НоваяСтрока);
	//	
	//КонецЕсли;
	
	ДобавитьВКорзинуФрагмент(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзинуФрагмент(ДополнительныеПараметры)
	
	ТекстОповещения = ДобавитьВКорзинуНаКлиенте(ДополнительныеПараметры.ПараметрыПланаПоставки, ДополнительныеПараметры.НовыеСтроки);
	
	Если Не ПоказыватьПодобранныеТовары Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Добавлена поставка по договору'"), , ТекстОповещения);
	КонецЕсли;
	
	УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьВКорзинуНаКлиенте(Параметры, НовыеСтроки)
	
	Для Каждого НоваяСтрока Из НовыеСтроки Цикл
		
		ВсегоПодобрано = Объект.Корзина.Итог("Количество");
		ОсталосьПодобрать = ТребуемоеКоличество - ВсегоПодобрано;
		
		Отбор = Новый Структура;
		
		КлючевыеПараметры = КлючевыеПараметрыПланаПоставки();
		//
		Для Каждого КлючЗначение Из НоваяСтрока Цикл
			
			Если КлючевыеПараметры.Свойство(КлючЗначение.Ключ) Тогда
				Отбор.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаНайдена = Ложь;
		РезультатПоиска = Объект.Корзина.НайтиСтроки(Отбор);
		
		Если РезультатПоиска.Количество() = 0 Тогда
			ТекущаяСтрока = Объект.Корзина.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Отбор);
			ТекущаяСтрока.МаксимальноеКоличество = Параметры.МаксимальноеКоличество;
			ТекущаяСтрока.ВалютаСоглашения = Параметры.ВалютаСоглашения;
			
		Иначе
			СтрокаНайдена = Истина;
			ТекущаяСтрока = РезультатПоиска[0];
		КонецЕсли;
		
	//	ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + НоваяСтрока.КоличествоУпаковок;
	
		Если СтрокаНайдена И ТекущаяСтрока.Количество <> 0 Тогда
			ТекущаяСтрока.Количество = 0;
			ТекущаяСтрока.СуммаВВалютеПоставки = 0;
		Иначе
			КолвоСУчетомОсталосьПодобрать = МИН(ОсталосьПодобрать, НоваяСтрока.Количество);
			ТекущаяСтрока.Количество = МИН(ТекущаяСтрока.Количество + КолвоСУчетомОсталосьПодобрать, ТекущаяСтрока.МаксимальноеКоличество);
			ТекущаяСтрока.СуммаВВалютеПоставки = НоваяСтрока.СуммаВВалютеПоставки / НоваяСтрока.Количество * ТекущаяСтрока.Количество;
		КонецЕсли;
			
		Если Не ПоказыватьПодобранныеТовары Тогда
			
			ТекстОповещения = Символы.ПС + НСтр("ru = 'Добавлена поставка по договору ""[Договор]"" в количестве [Количество] [ЕдиницаИзмерения] за период [Период]'");
			
			ВставляемыеЗначения = Новый Структура("Договор, Количество, ЕдиницаИзмерения, ПериодПотребности");
			
			ВставляемыеЗначения.Договор				= Строка(ТекущаяСтрока.Договор);
			ВставляемыеЗначения.ПериодПотребности	= Строка(ТекущаяСтрока.ПериодПотребности);
			ВставляемыеЗначения.ЕдиницаИзмерения	= ЕдиницаИзмерения;
			ВставляемыеЗначения.Количество			= ТекущаяСтрока.Количество;
			
			ТекстОповещения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОповещения, ВставляемыеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НовыеСтроки.Количество() > 0 Тогда
		Элементы.Корзина.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат ТекстОповещения;
	
КонецФункции

&НаКлиенте
Процедура КорзинаПриИзменении(Элемент)
	
	УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	//
	ОбновитьПодобраноВСпискеПланаПоставки();
	
КонецПроцедуры

// Процедура вызывается при нажатии на информационную надпись - строку с информацией 
// о количестве и сумме подобранных товаров на формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора,
//	Объект - ОбработкаОбъект, ДокументОбъект - объект подбора.
//
&НаКлиенте
Процедура ПриНажатииНаИнформационнуюНадпись(Объект) Экспорт
	
	ЭтаФорма.ПоказыватьПодобранныеТовары = Не ЭтаФорма.ПоказыватьПодобранныеТовары;
	УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

// Устанавливает текст информационной надписи о количестве и сумме
// товаров подобранных в корзину на форме подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьТекстИнформационнойНадписи(Форма)
	
	Корзина = Форма.Объект.Корзина;
	//Валюта = Форма.Валюта;
	
	//ИнформационнаяНадпись = НСтр("ru = 'Всего подобрано [Количество] товаров, на сумму [Сумма] [Валюта] [СкрытьПоказать]'");
	ИнформационнаяНадпись = НСтр("ru = 'Всего подобрано [Количество] товаров, на сумму <БлокСумм> [СкрытьПоказать]'");
	
	СкрытьПоказать = "";
	
	Если Форма.РежимПодбораБезКоличественныхПараметров Или Форма.РежимПодбораБезСуммовыхПараметров Тогда
		ИнформационнаяНадпись = НСтр("ru = 'Всего подобрано [Количество] товаров [СкрытьПоказать]'");
	КонецЕсли;
	
	СкрытьПоказать = ?(Форма.ПоказыватьПодобранныеТовары, НСтр("ru = '(скрыть)'"), НСтр("ru = '(показать)'"));
	
	Количество = НРег(ЧислоПрописью(Корзина.Количество(), "Л = ru_RU; ДП = Ложь; НП = Истина; НД = Ложь;", НСтр("ru = 'позиция,позиции,позиций,ж,,,,,0'")));
	
	ВставляемыеЗначения = Новый Структура;
	ВставляемыеЗначения.Вставить("Количество",		Количество);
	ВставляемыеЗначения.Вставить("СкрытьПоказать",	СкрытьПоказать);
	
	ИтогиПоВалютам = ИтогоВРазрезеВалют(Корзина);
	Поз = 0;
	
	//
	БлокСумм = "";
	Для Каждого Строка Из ИтогиПоВалютам Цикл
		
		Если Строка.СуммаВВалютеПоставки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Поз = Поз + 1;
		
		БлокСумм = БлокСумм + ?(БлокСумм = "", "", ", ")+"[Сумма"+Поз+"] [Валюта"+Поз+"]";
		
		//Сумма = Формат(Корзина.Итог("СуммаВВалютеПоставки"), "ЧДЦ=2; ЧН=");
		ВставляемыеЗначения.Вставить("Сумма"+Поз,	Формат(Строка.СуммаВВалютеПоставки, "ЧДЦ=2; ЧН="));
		ВставляемыеЗначения.Вставить("Валюта"+Поз,	Строка.ВалютаСоглашения);
		
	КонецЦикла;
	
	ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись, "<БлокСумм>", БлокСумм);
	ИнформационнаяНадпись = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ИнформационнаяНадпись, ВставляемыеЗначения);
	Форма.ИнформационнаяНадпись = ИнформационнаяНадпись;
	
	Форма.Элементы.ОбластьПодобранныеПланыПоставкиПоДоговорам.Видимость = Форма.ПоказыватьПодобранныеТовары;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИтогоВРазрезеВалют(Корзина)
	
	ТМП = Корзина.Выгрузить(, "ВалютаСоглашения, СуммаВВалютеПоставки");
	ТМП.Свернуть("ВалютаСоглашения", "СуммаВВалютеПоставки");
	ТМП.Сортировать("СуммаВВалютеПоставки Убыв");
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТМП);
	
КонецФункции

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоОтборов

&НаКлиенте
Процедура ДеревоОтборовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПодборТоваровКлиент_ДеревоОтборовВыбор(ЭтаФорма, Новый ОписаниеОповещения("ДеревоОтборовПриИзмененииЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ПодборТоваровКлиент.ДеревоОтборовПриИзмененииЗавершение(ЭтаФорма);
	ДеревоОтборовОтборПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовОтборПриИзменении(Элемент)
	
	ДеревоОтборовОтборПриИзмененииНаКлиенте(ЭтаФорма, Новый ОписаниеОповещения("ДеревоОтборовПриИзмененииЗавершение", ЭтотОбъект));
	
КонецПроцедуры

#Область ОбработчикиСобытийНаСервере

&НаСервере
Процедура ДеревоОтборовОтборПриИзмененииНаСервере()
	
	ПодборТоваровСервер_ДеревоОтборовОтборПриИзменении(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область РаботаСДеревомОтбораПоСвойствамВидаНоменклатуры

// Заполняет дерево отборов по свойствам вида номенклатуры выбранного на форме.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
//Процедура ЗаполнитьДеревоОтборовНоменклатуры(Форма) Экспорт
&НаСервереБезКонтекста
Процедура ЗаполнитьДеревоОтборовПоставки(Форма) Экспорт
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ДеревоОтборов.Строки.Очистить();
	
	ЗаполнитьДеревоЗначенийОтборов(Форма, ДеревоОтборов);
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

// Заполняет дерево значений отборов формы (списка, подбора) значениями
// отбора для номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подбора.
//	ДеревоОтборов (ДеревоЗначений) - дерево значений отборов свойств.
//
&НаСервереБезКонтекста
Процедура ЗаполнитьДеревоЗначенийОтборов(Форма, ДеревоОтборов)
	
	ВидНоменклатурыДляХарактеристик = Неопределено;
	
	пТаблицаПараметровОтбора = Форма.ТаблицаПараметровОтбора.Выгрузить();
	
	СтрокаРеквизита = Неопределено;
	МаксимальноеКоличествоЗначенийВДереве = Константы.МаксимальноеКоличествоЭлементовВДеревеОтборовНоменклатуры.Получить();
	
	СтрокаРеквизита     = Неопределено;
	
	//
	Запрос = Новый Запрос;
	Запрос.Текст = Форма.СписокПланПоставокПоДоговору.ТекстЗапроса+"
		|	И ПланПоставокПоДоговорамОстатки.Договор =&Договор";
	Запрос.УстановитьПараметр("Договор", Форма.Договор);
	Запрос.УстановитьПараметр("Номенклатура", Форма.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Форма.Характеристика);
	Запрос.УстановитьПараметр("МестоПоставки", Форма.МестоПоставки);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	//////////////////////////////////////////
	РеквизитыБыстрогоОтбора = неопределено;
	ДобавитьРеквизитБО(РеквизитыБыстрогоОтбора, "ПериодПотребности",	"ПериодПотребности",		Новый ОписаниеТипов("СправочникСсылка.Периоды"),				"Период");
	ДобавитьРеквизитБО(РеквизитыБыстрогоОтбора, "Приоритет",			"Приоритет",				Новый ОписаниеТипов("СправочникСсылка.ПриоритетыПотребностей"),	"Приоритет");
	ДобавитьРеквизитБО(РеквизитыБыстрогоОтбора, "ОрганизацияПолучатель","ОрганизацияПолучатель",	Новый ОписаниеТипов("СправочникСсылка.Организации"),			"ДЗО");
	//ДобавитьРеквизитБО(РеквизитыБыстрогоОтбора, "ОрганизацияПолучатель","Организация",	Новый ОписаниеТипов("СправочникСсылка.Организации"),			"Потребитель");
	
	ДобавитьРеквизитБО(РеквизитыБыстрогоОтбора, "Лот",					"Лот",						Новый ОписаниеТипов("СправочникСсылка.Лоты"),					"Лот");
	ДобавитьРеквизитБО(РеквизитыБыстрогоОтбора, "МестоПоставки", 		"МестоПоставки",			Новый ОписаниеТипов("СправочникСсылка.МестаПоставки"),			"Место поставки");
	ДобавитьРеквизитБО(РеквизитыБыстрогоОтбора, "Проект",				"Проект",					Новый ОписаниеТипов("СправочникСсылка.Проекты"),				"Проект");
	ДобавитьРеквизитБО(РеквизитыБыстрогоОтбора, "Менеджер",				"Менеджер", 				Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"),			"Менеджер");
	ДобавитьРеквизитБО(РеквизитыБыстрогоОтбора, "ДоговорСПокупателем",	"ДоговорСПокупателем", 		Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"),	"Назначение");
	
	пТаблицаПараметровОтбора.Очистить();
	
	Для Каждого Реквизит Из РеквизитыБыстрогоОтбора Цикл
		
		ТипРеквизита = Реквизит.ОписаниеТипаЗначения;
		
		Если СтрокаРеквизита <> Неопределено И СтрокаРеквизита.Строки.Количество() > 0 Тогда
			Если СтрокаРеквизита.ИмяРеквизита <> "ПериодПотребности" Тогда
				СтрокаРеквизита.Строки.Сортировать("Представление");
			КонецЕсли;
		КонецЕсли;
		
		СтрокаРеквизита = ДеревоОтборов.Строки.Добавить();
		
		СтрокаРеквизита.ИмяРеквизита          = Реквизит.ИмяРеквизита;
		Если Реквизит.ЭтоДопРеквизит Тогда
			СтрокаРеквизита.ИмяРеквизита          = Реквизит.ПредставлениеРеквизита;
		КонецЕсли;
		СтрокаРеквизита.ЭтоДопРеквизит        = Реквизит.ЭтоДопРеквизит;
		СтрокаРеквизита.Представление         = Реквизит.ПредставлениеРеквизита;
		Если ЗначениеЗаполнено(Реквизит.Заголовок) Тогда
			СтрокаРеквизита.Представление = Реквизит.Заголовок;
		КонецЕсли;
		СтрокаРеквизита.ОтборДоступен         = Истина;

		Отбор = Новый Структура();
		Отбор.Вставить("ИмяРеквизита",СтрокаРеквизита.ИмяРеквизита);
		ОтобранныеСтроки = пТаблицаПараметровОтбора.НайтиСтроки(Отбор);
		
		Если ТипРеквизита.СодержитТип(Тип("Дата")) Тогда
			
			Если ОтобранныеСтроки.Количество()>0 Тогда
				ОтобранныеСтроки[0].Отбор = Истина;
				ЗаполнитьЗначенияСвойств(СтрокаРеквизита,ОтобранныеСтроки[0]);
			Иначе
				СтрокаРеквизита.ИнтервалОт            = Дата('00010101');
				СтрокаРеквизита.ИнтервалДо            = Дата('00010101');
				СтрокаРеквизита.ФиксированноеЗначение = Истина;
				СтрокаРеквизита.ЗначениеОтбора        = Дата('00010101');
				СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
			КонецЕсли;
			
		ИначеЕсли ТипРеквизита.СодержитТип(Тип("Число"))Тогда
			
			Если ОтобранныеСтроки.Количество()>0 Тогда
				ОтобранныеСтроки[0].Отбор = Истина;
				ЗаполнитьЗначенияСвойств(СтрокаРеквизита,ОтобранныеСтроки[0]);
			Иначе
				СтрокаРеквизита.ИнтервалОт            = 0;
				СтрокаРеквизита.ИнтервалДо            = 0;
				СтрокаРеквизита.ФиксированноеЗначение = Истина;
				СтрокаРеквизита.ЗначениеОтбора        = 0;
				СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
			КонецЕсли;
			
		ИначеЕсли ТипРеквизита.СодержитТип(Тип("Булево")) Тогда
			
			СтрокаРеквизита.ЗначениеОтбора = Истина;
			Если ОтобранныеСтроки.Количество()>0 Тогда
				ОтобранныеСтроки[0].Отбор = Истина;
				СтрокаРеквизита.Отбор = Истина;
			КонецЕсли;
			
		ИначеЕсли ТипРеквизита.СодержитТип(Тип("Строка")) Тогда
			
			Если ОтобранныеСтроки.Количество()>0 Тогда
				ОтобранныеСтроки[0].Отбор = Истина;
				ЗаполнитьЗначенияСвойств(СтрокаРеквизита,ОтобранныеСтроки[0]);
			Иначе
				СтрокаРеквизита.ЗначениеОтбора        = "";
				СтрокаРеквизита.ФиксированноеЗначение = Истина;
				СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
				СтрокаРеквизита.ОтборДоступен         = Истина;
			КонецЕсли;
		
		Иначе
			
			СтрокаРеквизита.ОтборДоступен         = Ложь;
			
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТипРеквизита.Типы()[0]);
			
			Если Не ПравоДоступа("Чтение", МетаданныеТипа) Тогда
				ДеревоОтборов.Строки.Удалить(СтрокаРеквизита);
				СтрокаРеквизита = Неопределено;
				Продолжить;
			КонецЕсли;
			
			//
			ТМП = Таблица.Скопировать(, Реквизит.ИмяРеквизита);
			ТМП.Свернуть(Реквизит.ИмяРеквизита,"");
			МассивЗначений = ТМП.ВыгрузитьКолонку(Реквизит.ИмяРеквизита);
			Если Реквизит.ИмяРеквизита = "ПериодПотребности" Тогда
				МассивЗначений = ПолучитьОтсортированныймассивПериодов(МассивЗначений);
			КонецЕсли;
			
			
			Для Каждого ЗначениеОтбора Из МассивЗначений Цикл
				Параметр = пТаблицаПараметровОтбора.Добавить();
				Параметр.ИмяРеквизита = Реквизит.ИмяРеквизита;
				Параметр.ЗначениеОтбора = ЗначениеОтбора;
				Параметр.ЭтоДопРеквизит = Реквизит.ЭтоДопРеквизит;
				Параметр.Представление = Строка(ЗначениеОтбора);
			КонецЦикла;
			
			// 
			Если МассивЗначений.Количество() = 0 Тогда
				ДеревоОтборов.Строки.Удалить(СтрокаРеквизита);
				СтрокаРеквизита = Неопределено;
				
			ИначеЕсли МассивЗначений.Количество() > МаксимальноеКоличествоЗначенийВДереве Тогда
				//?
				Если ОтобранныеСтроки.Количество()>0 Тогда
					ОтобранныеСтроки[0].Отбор = Истина;
					ЗаполнитьЗначенияСвойств(СтрокаРеквизита,ОтобранныеСтроки[0]);
				Иначе
					СтрокаРеквизита.ЗначениеОтбора        = Новый СписокЗначений;
					СтрокаРеквизита.ФиксированноеЗначение = Истина;
					СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
					СтрокаРеквизита.ОтборДоступен         = Истина;
					
				КонецЕсли;
				
			Иначе
				
				ОтборУстановлен = Ложь;
				
				Для Каждого Значение Из МассивЗначений Цикл
					
					Если (МассивЗначений.Количество() = 1 
						И Не ЗначениеЗаполнено(Значение)) Тогда
						ДеревоОтборов.Строки.Удалить(СтрокаРеквизита);
						СтрокаРеквизита = Неопределено;
						Продолжить;
					КонецЕсли;
					
					СтрокаЗначения = СтрокаРеквизита.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаЗначения, СтрокаРеквизита);
					
					СтрокаЗначения.ЗначениеОтбора = Значение;
					
					// Получение представления построчно для 50 значений работает быстрее, выборка его сразу в запросе,
					// формирующем ВыборкаЗначений, т.к. там есть группировка
					// Так же это работает быстрее, чем запрос представления (функция ПРЕДСТАВЛЕНИЕ языка запросов),
					// сделанный сразу для 50 значений.
					СтрокаЗначения.Представление  = Строка(СтрокаЗначения.ЗначениеОтбора);
					СтрокаЗначения.ОтборДоступен  = Истина;
					
					Отбор = Новый Структура();
					Отбор.Вставить("ИмяРеквизита",?(СтрокаРеквизита.ИмяРеквизита="Организация","ОрганизацияПолучатель",СтрокаРеквизита.ИмяРеквизита));
					Отбор.Вставить("Представление",СтрокаЗначения.Представление);
					ОтобранныеСтроки = пТаблицаПараметровОтбора.НайтиСтроки(Отбор);
					Если ОтобранныеСтроки.Количество()>0 Тогда
						ОтобранныеСтроки[0].Отбор = Истина;
						СтрокаЗначения.Отбор = Истина;
						ОтборУстановлен = Истина;
					КонецЕсли;
					
				КонецЦикла;
				
				Если СтрокаРеквизита <> Неопределено Тогда
					СтрокаРеквизита.Отбор = ОтборУстановлен;
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Форма.ТаблицаПараметровОтбора.Загрузить(пТаблицаПараметровОтбора);
	
	Если СтрокаРеквизита <> Неопределено
		И СтрокаРеквизита.Строки.Количество() > 0 Тогда
		СтрокаРеквизита.Строки.Сортировать("Представление");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОтсортированныймассивПериодов(МассивЗначений)
	
	СтруктураПериодов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивЗначений, "ДатаНачала");

	//
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("Период", Новый ОписаниеТипов("СправочникСсылка.Периоды"));
	ТаблицаПериодов.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Для Каждого КлючЗначения Из СтруктураПериодов Цикл
		Строка = ТаблицаПериодов.Добавить();
		Строка.Период = КлючЗначения.Ключ;
		Строка.Дата = КлючЗначения.Значение;
	КонецЦикла;
	ТаблицаПериодов.Сортировать("Дата");
	Возврат ТаблицаПериодов.ВыгрузитьКолонку("Период");
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьРеквизитБО(РеквизитыБыстрогоОтбора, ИмяРеквизита, ПредставлениеРеквизита, ОписаниеТипаЗначения, Заголовок);
	
	Если ТипЗнч(РеквизитыБыстрогоОтбора) <> Тип("ТаблицаЗначений") Тогда
		
		РеквизитыБыстрогоОтбора = Новый ТаблицаЗначений;
		РеквизитыБыстрогоОтбора.Колонки.Добавить("ИмяРеквизита", ОбщегоНазначения.ОписаниеТипаСтрока(50));
		РеквизитыБыстрогоОтбора.Колонки.Добавить("ПредставлениеРеквизита", ОбщегоНазначения.ОписаниеТипаСтрока(50));
		РеквизитыБыстрогоОтбора.Колонки.Добавить("ЭтоДопРеквизит", Новый ОписаниеТипов("Булево"));
		РеквизитыБыстрогоОтбора.Колонки.Добавить("ОписаниеТипаЗначения");
		РеквизитыБыстрогоОтбора.Колонки.Добавить("Заголовок", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	КонецЕсли;
	
	Реквизит = РеквизитыБыстрогоОтбора.Добавить();
	Реквизит.ИмяРеквизита = ИмяРеквизита;
	Реквизит.ПредставлениеРеквизита = ПредставлениеРеквизита;
	Реквизит.ОписаниеТипаЗначения = ОписаниеТипаЗначения;
	Реквизит.Заголовок = Заголовок;
	Реквизит.ЭтоДопРеквизит = Истина;
	
КонецПроцедуры


// Очищает дерево свойств для отбора по свойствам вида номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
&НаСервереБезКонтекста
Процедура ОчиститьДеревоОтборов(Форма)
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ДеревоОтборов.Строки.Очистить();
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

#КонецОбласти

// Процедура вызывается при изменении значения в дереве отборов по свойствам вида
//  номенклатуры на формах списков и формах подборов.
//
// Параметры:
//  Форма					 - УправляемаяФорма	 - форма списка номенклатуры или форма подбора.
//  ОповещениеПослеОбработки - ОписаниеОповещения - описание оповещения после обработки.
//
&НаКлиенте
Процедура ДеревоОтборовОтборПриИзмененииНаКлиенте(Форма, ОповещениеПослеОбработки = Неопределено) Экспорт
	
	//// &ЗамерПроизводительности
	//ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
	//	"ОбщийМодуль.ПодборТоваровКлиент.ДеревоОтборовОтборПриИзменении");
	
	ВариантДействий = ВариантДействийПриИзмененииОтбораДереваОтборов(Форма);
	
	Если ВариантДействий = 3 Тогда // установили флажок на строке с незаполненным "фиксированным" значением
		УстановитьФиксированныйОтбор(Форма, ОповещениеПослеОбработки);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает число - код варианта действия которое было выполнено с деревом отборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка справочника номенклатуры или форма подбора.
//
// Возвращаемое значение:
//	Число.
//	0 - никакого изменения значений в дереве отборов не произошло;
//	1 - был установлен/снят флажок у строки (или родительской строки) значений, например:
//	    был установлен/снят флажок у строки с качеством "Новый" или у строки "Качество";
//	2 - был установлен/снят флажок на строке с "фиксированным значением", причем фиксированное
//	    значение уже было указано, например: в строке дерева отборов было указано конкретное значение диаметра
//	    кабеля и у него установили/сняли флажок;
//	3 - был УСТАНОВЛЕН флажок на строке с "фиксированным значением", причем фиксированное значение
//	    в строке еще не указано, например: в строке дерева отборов не было указано конкретное значение
//	    диаметра кабеля и у строки установили флажок. Такой вариант действия приводит к тому что открывается
//	    дополнительная форма установки значений (или интервала) фиксированного значения.
//	
&НаКлиенте
Функция ВариантДействийПриИзмененииОтбораДереваОтборов(Форма)
	
	ВариантДействий = 0;
	
	ТекущиеДанные = Форма.Элементы.ДеревоОтборов.ТекущиеДанные;
	
	Если ТекущиеДанные.ФиксированноеЗначение Тогда
		
		// Фиксированное значение - например, введен артикул, или указано,
		// какое-то конкретное числовое, строковое значение, или интервал дат.
		
		ВариантДействий = 2; // установили/сняли флажок на поле фиксированного значения
		
		Если ТекущиеДанные.Отбор Тогда
			
			ТипЗначенияОтбора = ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
			
			Если Не (
				     (ТипЗначенияОтбора = Тип("Строка") И ЗначениеЗаполнено(ТекущиеДанные.ЗначениеОтбора)) 
				 Или ТипЗначенияОтбора <> Тип("Строка") И (ЗначениеЗаполнено(ТекущиеДанные.ИнтервалОт) Или ЗначениеЗаполнено(ТекущиеДанные.ИнтервалДо))
				    ) Тогда
				
				ВариантДействий = 3; // УСТАНОВИЛИ флажок на незаполненном значением поле фиксированного значения
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ВариантДействий = 1; // установили/сняли флажок на строке конкретного значения или группы значений
		
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		
		Если Родитель = Неопределено Тогда // выбрана строка-родитель
			
			// Установить/снять значение флажка отбора для всех подчиненных строк.
			
			ПодчиненныеЭлементыДерева = ТекущиеДанные.ПолучитьЭлементы();
			
			Для Каждого ЭлементДерева Из ПодчиненныеЭлементыДерева Цикл
				ЭлементДерева.Отбор = ТекущиеДанные.Отбор;
			КонецЦикла;
			
		Иначе
			
			// Выбрана подчиненная строка.
			
			Родитель.Отбор = Ложь;
			
			ПодчиненныеЭлементыДерева = Родитель.ПолучитьЭлементы();
			
			// Пройти по всем подчиненным строкам родителя выбранной строки, и если
			// хотя бы для одной строки установлен флажок отбора, то включить флажок отбора
			// и родительской строки.
			
			Для Каждого ЭлементДерева Из ПодчиненныеЭлементыДерева Цикл
				
				Если ЭлементДерева.Отбор Тогда
					Родитель.Отбор = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВариантДействий;
	
КонецФункции

// Возвращает признак необходимости установки отбора  динамического списка номенклатуры
//  на формах отбора, по значениям дерева отборов. Вызывается при нажатии на поле выбора
//  фиксированного значения в строке дерева отборов.
//  Возвращает в оповещении: Истина - значение в дереве отборов изменено и нужно применить значение отбора
//  к списку номенклатуры, или Ложь - значение отбора не изменено.
//
// Параметры:
//  Форма					 - УправляемаяФорма	 - форма списка или форма подбора.
//  ОповещениеПослеОбработки - ОписаниеОповещения - описание оповещения после обработки.
//
&НаКлиенте
Процедура УстановитьФиксированныйОтбор(Форма, ОповещениеПослеОбработки = Неопределено)
	
	ТекущиеДанные = Форма.Элементы.ДеревоОтборов.ТекущиеДанные;
	
	Если Не ТекущиеДанные.ФиксированноеЗначение Тогда
		Если ОповещениеПослеОбработки <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ВидНоменклатуры = Форма.ВидНоменклатуры;
	
	ТипЗначенияОтбора = ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
	
	Если ТипЗначенияОтбора = Тип("СписокЗначений") Тогда
		
		// Тип значения - строка. В этом случае открывается форма установки значения и список выбора
		// поля выбора значения заполняется доступными значениями.
		
		ПоНоменклатуре = Истина;
		
		ЗначениеОтбора = СокрЛП(ТекущиеДанные.ЗначениеОтбора);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ИмяРеквизита", ТекущиеДанные.Представление);
		СтруктураПараметров.Вставить("ЗначениеОтбора", ТекущиеДанные.ЗначениеОтбора);
		СтруктураПараметров.Вставить("ЭтоДопРеквизит", ТекущиеДанные.ЭтоДопРеквизит);
		СтруктураПараметров.Вставить("ОтборПоНоменклатуре", ПоНоменклатуре);
		СтруктураПараметров.Вставить("ВидНоменклатуры", ВидНоменклатуры);
		
	ИначеЕсли ТипЗначенияОтбора = Тип("Строка") Тогда
		
		// Тип значения - строка. В этом случае открывается форма установки значения и список выбора
		// поля выбора значения заполняется доступными значениями.
		
		ПоНоменклатуре = Истина;
		
		ЗначениеОтбора = СокрЛП(ТекущиеДанные.ЗначениеОтбора);
		
		СписокЗначенийРеквизита = ПодборТоваровВызовСервера.СписокЗначенийРеквизита(
			ВидНоменклатуры, 
			ТекущиеДанные.ИмяРеквизита, 
			ТекущиеДанные.ЭтоДопРеквизит, 
			ПоНоменклатуре);
			
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ИмяРеквизита", ТекущиеДанные.Представление);
		СтруктураПараметров.Вставить("СписокСтрокОтбора", СписокЗначенийРеквизита);
		СтруктураПараметров.Вставить("ЗначениеОтбора", ТекущиеДанные.ЗначениеОтбора);
		СтруктураПараметров.Вставить("ТипЗначения", ТипЗначенияОтбора);
		
	Иначе
		
		// Тип значения - число или дата, в этом случае открывается форма установки интервала.
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ИмяРеквизита", ТекущиеДанные.Представление);
		СтруктураПараметров.Вставить("ЗначениеОт", ТекущиеДанные.ИнтервалОт);
		СтруктураПараметров.Вставить("ЗначениеДо", ТекущиеДанные.ИнтервалДо);
		СтруктураПараметров.Вставить("ТипЗначения", ТипЗнч(ТекущиеДанные.ЗначениеОтбора));
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ОповещениеПослеОбработки, ТекущиеДанные", ОповещениеПослеОбработки, ТекущиеДанные);
	Если ТипЗначенияОтбора = Тип("СписокЗначений") Тогда
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаУстановкиЗначенийОтбора", 
			СтруктураПараметров, 
			Форма,
			,
			,
			,
			Новый ОписаниеОповещения("УстановитьФиксированныйОтборЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаУстановкиИнтервала", 
			СтруктураПараметров, 
			Форма,
			,
			,
			,
			Новый ОписаниеОповещения("УстановитьФиксированныйОтборЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
		
КонецПроцедуры

// Вызывается при изменении значения в дереве отбора по свойствам вида номенклатуры.
// Т.е. клиентские функции обрабатывают обработку значений на элементе формы (устанавливают
// значения флажков на строках, подчиненных строках, открывают форму установки интервала значений
// и т.п.), затем управление передается на сервер и сначала отключаются все установленные отборы
// по дереву свойств, затем включается отбор только по значениям строк с установленными флажками отбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
&НаСервереБезКонтекста
Процедура ПодборТоваровСервер_ДеревоОтборовОтборПриИзменении(Форма) Экспорт
	
	//Если Не Форма.ИспользоватьФильтры Тогда
	//	Возврат;
	//КонецЕсли;
	
	УдалитьОтборПоСвойствамПоставкиПоДоговору(Форма);
	УстановитьОтборПоСвойствамПоставки(Форма);
	
КонецПроцедуры

// Процедура вызывается при выборе "фиксированного" значения в дереве отборов.
//
// Параметры:
//  Форма					 - УправляемаяФорма	 - форма списка номенклатуры или форма подбора.
//  ОповещениеПослеОбработки - ОписаниеОповещения - описание оповещения после обработки.
//
&НаКлиенте
Процедура ПодборТоваровКлиент_ДеревоОтборовВыбор(Форма, ОповещениеПослеОбработки = Неопределено) Экспорт
	
	ВариантДействий = ВариантДействийПриВыбореЗначенияДереваОтборов(Форма);
	
	Если ВариантДействий = 1 Тогда // нажали на гиперссылку с "фиксированным" значением
		УстановитьФиксированныйОтбор(Форма, ОповещениеПослеОбработки);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает число - код варианта действий которое было выполнено с деревом отборов
// при событии выбора значения в дереве отборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка справочника номенклатуры или форма подбора.
//
// Возвращаемое значение:
//	Число.
//	0 - никакого изменения значений в дереве отборов не произошло,
//	1 - было выбрано значение в строке с "фиксированным" значением,
//	в этом случае необходимо открыть форму установки "фиксированного" значения.
//
&НаКлиенте
Функция ВариантДействийПриВыбореЗначенияДереваОтборов(Форма)
	
	ТекущийЭлемент  = Форма.Элементы.ДеревоОтборов.ТекущийЭлемент;
	ТекущаяСтрока   = Форма.Элементы.ДеревоОтборов.ТекущаяСтрока;
	ТекущиеДанные   = Форма.Элементы.ДеревоОтборов.ТекущиеДанные;
	
	ВариантДействий = 0;
	
	Если ТекущийЭлемент = Форма.Элементы.ДеревоОтборовПредставлениеОтбора Тогда
		
		Если ТекущиеДанные.ФиксированноеЗначение Тогда
			
			ВариантДействий = 1;
			
		КонецЕсли;
		
	ИначеЕсли ТекущийЭлемент = Форма.Элементы.ДеревоОтборовПредставление Тогда
		
		Если ТекущиеДанные.ФиксированноеЗначение Тогда
			
			ВариантДействий = 1;
			
		ИначеЕсли Не ТекущиеДанные.ОтборДоступен Тогда
			
			// Если был щелчок по родительской строке, то свернуть/развернуть узел.
			
			Если Форма.Элементы.ДеревоОтборов.Развернут(ТекущаяСтрока) Тогда
				Форма.Элементы.ДеревоОтборов.Свернуть(ТекущаяСтрока);
			Иначе
				Форма.Элементы.ДеревоОтборов.Развернуть(ТекущаяСтрока);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВариантДействий;
	
КонецФункции

&НаКлиенте
Процедура КорзинаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//ПодключитьОбработчикОжидания("ЗаполнитьСписокВыбораНоменклатурыПоставщика", 0.1, Истина);
	Элементы.КорзинаКоличество.МаксимальноеЗначение	= Элемент.ТекущиеДанные.МаксимальноеКоличество;
	Элементы.КорзинаКоличество.МинимальноеЗначение	= 0;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПланПоставокПоДоговоруПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ЕстьКорзина = Настройки.ДополнительныеСвойства.Свойство("Корзина");
	ЕстьИныеПотребности = Настройки.ДополнительныеСвойства.Свойство("ИныеПотребности");
	
	
	Если НЕ ЕстьКорзина И НЕ ЕстьИныеПотребности Тогда
		Возврат;
	КонецЕсли;
	
	//
	Корзина = Настройки.ДополнительныеСвойства.Корзина.Выгрузить();
	Иные = Настройки.ДополнительныеСвойства.ИныеПотребности.Выгрузить();
	
	СтруктураОтбора = КлючевыеПараметрыПланаПоставки();
	
	Для Каждого Строка Из Строки Цикл
		
		//
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка.Значение.Данные);
		
		// Иные
		Если ЕстьИныеПотребности Тогда
			ТМП = Иные.Скопировать(СтруктураОтбора);
			ИныеСтроки = Иные.НайтиСтроки(СтруктураОтбора);
			Если ИныеСтроки.Количество() > 0 Тогда
				Строка.Значение.Данные.Использовано = ИныеСтроки[0].Количество;
			Иначе
				Строка.Значение.Данные.Использовано = 0;
			КонецЕсли;
			Строка.Значение.Данные.Свободно = Строка.Значение.Данные.Количество - Строка.Значение.Данные.Использовано;
		КонецЕсли;
		
		// Корзина
		Если ЕстьКорзина Тогда
			ТМП = Корзина.Скопировать(СтруктураОтбора);
			Строка.Значение.Данные.Подобрано = ТМП.Итог("Количество");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаУпаковкаПриИзменении(Элемент)
	
	//ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	//
	//СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Партнер);
	//СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	//СтруктураДействий.Вставить("ПересчитатьСумму");
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("ПересчитыватьСуммуРучнойСкидки", Ложь));
	//
	//Если ТекущаяСтрока.Количество > 0 Тогда
	//	
	//	СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	//	
	//Иначе
	//	
	//	СтруктураЗаполненияЦены = Новый Структура;
	//	
	//	СтруктураЗаполненияЦены.Вставить("Дата",       ТекущаяДатаСеанса);
	//	СтруктураЗаполненияЦены.Вставить("Валюта",     Валюта);
	//	СтруктураЗаполненияЦены.Вставить("Партнер",    Партнер);
	//	СтруктураЗаполненияЦены.Вставить("Соглашение", Соглашение);
	//	
	//	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", СтруктураЗаполненияЦены);
	//	
	//КонецЕсли;
	//
	//ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//
	//ЗаполнитьСписокВыбораНоменклатурыПоставщика();
	//
КонецПроцедуры

#Область Инициализация

ВыполняетсяЗакрытие = Ложь;

#КонецОбласти
