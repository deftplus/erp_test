
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Режим = "Копирование";	
	Объект.РежимРаботыОбработки 			= Параметры.РежимРаботыОбработки;
	Объект.ПеренестиЭкземплярыОтчетов 		= Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.РежимРаботыОбработки) Тогда
		 Объект.РежимРаботыОбработки = Перечисления.РежимыКопированияДанныхПоказателей.ПроизвольныеОтборы;
	КонецЕсли;	
	
	Если  ЗначениеЗаполнено(Параметры.Бланк)  Тогда
			
		ТаблицыИнтерфейса = ПолучитьИзВременногоХранилища(Параметры.АдресТаблицИнтерфейса);
		СтруктураФильтров = ПолучитьИзВременногоХранилища(Параметры.АдресСтруктураФильтров);
		
		Объект.ВидОтчета = Параметры.ВидОтчета;
		Объект.Бланк = Параметры.Бланк;
		Объект.ПериодИсточникС = Параметры.ПериодПланированияОтборНачало;
		Объект.ПериодИсточникПО = Параметры.ПериодПланированияОтборОкончание;
		
		Если СтруктураФильтров.Свойство("Фильтр_Сценарии") Тогда			
			Объект.СценарийИсточник = СтруктураФильтров.Фильтр_Сценарии;
		КонецЕсли;
		
		Объект.ПериодПриемникС = Объект.ПериодИсточникС;
		Объект.ПериодПриемникПО = Объект.ПериодИсточникПО;
		
		Если ЗначениеЗаполнено(Параметры.Бланк) Тогда
			Объект.ПериодичностьИсточника = Объект.Бланк.Периодичность;
		КонецЕсли;
				
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Периодичность", Объект.ПериодичностьИсточника);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		
		Элементы.ПериодИсточникС.ПараметрыВыбора = НовыеПараметры;
		Элементы.ПериодИсточникПо.ПараметрыВыбора = НовыеПараметры;
		
		ЗаполнитьСоставСтрокИПоказателейБланк(СтруктураФильтров);		
		
		Элементы.Бланк.Доступность = Ложь;
		
	ИначеЕсли Параметры.Свойство("тПоказатели")  Тогда	
				
		Объект.ПериодИсточникС = Параметры.ПериодПланированияОтборНачало;
		Объект.ПериодИсточникПО = Параметры.ПериодПланированияОтборОкончание;
		
		Объект.СценарийИсточник = Параметры.Сценарий;
		
		Объект.ПериодПриемникС = Объект.ПериодИсточникС;
		Объект.ПериодПриемникПО = Объект.ПериодИсточникПО;
		
		Объект.ПериодичностьИсточника = Объект.ПериодИсточникС.Периодичность;
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Периодичность", Объект.ПериодичностьИсточника);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		
		Элементы.ПериодИсточникС.ПараметрыВыбора = НовыеПараметры;
		Элементы.ПериодИсточникПо.ПараметрыВыбора = НовыеПараметры;
		
		ОтборыРасширеннойНастройки.Очистить();
		ВыбранныеПоказатели.ЗагрузитьЗначения(Параметры.тПоказатели);
		СводнаяТаблицаУХ.ЗаполнитьДоступныеАналитикиДляОбработкиПереноса(ВыбранныеПоказатели,ОтборыРасширеннойНастройки,СтруктураФильтров);
		
		Элементы.Бланк.Доступность = Ложь;
		
	КонецЕсли;	
		
	УстановитьВидимостьЭлементов();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОпределитьДоступностьЭлементов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОповещенийФормы

&НаКлиенте
Процедура ВыборАналитикЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		 Элементы.ОтборыРасширеннойНастройки.ТекущиеДанные["ОтборПриемник"] = Результат;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	Элементы.Декорация2.Видимость = Истина;
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
		
КонецПроцедуры

&НаКлиенте
Процедура НастрйкаОтбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат = Неопределено Тогда
		 Возврат;
	КонецЕсли;
	
	Элементы.ОтборыРасширеннойНастройки.ТекущиеДанные.ОтборИсточникаСКД = Результат.ЗначениеНастройки;
	Элементы.ОтборыРасширеннойНастройки.ТекущиеДанные.ОтборИсточник = Результат.ПредставлениеОтбора; 	 
	Элементы.ОтборыРасширеннойНастройки.ТекущиеДанные.ИсточникЗначенияКопирования.ЗагрузитьЗначения(Результат.СписокВыбранныхЗначений);
	
	Если  Элементы.ОтборыРасширеннойНастройки.ТекущиеДанные.ОтборПриемник = Нстр("ru = '<Без отбора>'") ИЛИ Элементы.ОтборыРасширеннойНастройки.ТекущиеДанные.ОтборПриемник = Нстр("ru = '<Пустое значение>'") Тогда
		  Элементы.ОтборыРасширеннойНастройки.ТекущиеДанные.ОтборПриемник = Нстр("ru = '<По значениям источника>'");
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ВыборСтрокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		 Возврат;
	КонецЕсли;	

	Строки.ЗагрузитьЗначения(Результат);
	  
КонецПроцедуры

&НаКлиенте
Процедура ВыборКолонокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		 Возврат;
	КонецЕсли;	
	
	Показатели.ЗагрузитьЗначения(Результат.ВыбранныеСтроки);
	  
КонецПроцедуры

&НаКлиенте
Процедура ВыборПоказателейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		 Возврат;
	КонецЕсли;	
	
	ОбновитьВыбраныеПоказатели(Результат)
			
КонецПроцедуры

Процедура ОбновитьВыбраныеПоказатели(Результат)
	
	тЗначения = Результат.ВыбранныеПоказатели;
	ВыбранныеПоказатели.Очистить();
	
	Для Каждого Стр Из тЗначения Цикл
		 ВыбранныеПоказатели.Добавить(Стр.Значение,Стр.Представление);
	КонецЦикла;	
	
	ОбновитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКопирование() Экспорт
	
	Если СокрЛП(АдресХранилищаСтатусаКопирования) = "" тогда
		Элементы.Выполнить.Доступность = Истина;
		Элементы.Группа6.Доступность = Истина;
		Элементы.ОсновнаяГруппа.Доступность = Истина;		
		Элементы.СтатусВыполнения.Заголовок = Нстр("ru='При выполнении операции возникли ошибки. См. журнал регистрации'");
		Элементы.СтатусВыполнения.ЦветТекста = Новый Цвет(255,0,0);
		Элементы.ОбработкаВыполнена.Видимость = Истина;
		Элементы.ВыполняетсяОбработкаДанных.Видимость = Ложь;
		ОтключитьОбработчикОжидания("Подключаемый_ВыполнитьКопирование");
		
		Возврат;
	КонецЕсли;
	
	ДанныеОВыполнении = ПолучитьИзВременногоХранилища(АдресХранилищаСтатусаКопирования); 
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОВыполнении, "СтатусВыполнения")
		ИЛИ НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОВыполнении, "ИндексПрогресса")
		ИЛИ НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОВыполнении, "ИнформацияОбОшибке") тогда
		
		Элементы.Выполнить.Доступность = Истина;
		Элементы.Группа6.Доступность = Истина;
		Элементы.ОсновнаяГруппа.Доступность = Истина;		
		Элементы.СтатусВыполнения.Заголовок = Нстр("ru='При выполнении операции возникли ошибки. См. журнал регистрации'");
		Элементы.СтатусВыполнения.ЦветТекста = Новый Цвет(255,0,0);
		Элементы.ОбработкаВыполнена.Видимость = Истина;
		Элементы.ВыполняетсяОбработкаДанных.Видимость = Ложь;
		ОтключитьОбработчикОжидания("Подключаемый_ВыполнитьКопирование");
		
		Возврат;
	КонецЕсли;
	
	СтатусВыполнения = ДанныеОВыполнении.СтатусВыполнения;
	Индикатор = ДанныеОВыполнении.ИндексПрогресса; 
	Если СтатусВыполнения = "Прогресс" Тогда 
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьКопирование",ИнтервалОжидания,Истина);	
	КонецЕсли; 
	
	Если  СтатусВыполнения = "Ошибка" Тогда
		Элементы.Выполнить.Доступность = Истина;
		Элементы.Группа6.Доступность = Истина;
		Элементы.ОсновнаяГруппа.Доступность = Истина;		
		Элементы.СтатусВыполнения.Заголовок = Нстр("ru='При выполнении операции возникли ошибки. См. журнал регистрации'");
		Элементы.СтатусВыполнения.ЦветТекста = Новый Цвет(255,0,0);
		Элементы.ОбработкаВыполнена.Видимость = Истина;
		Элементы.ВыполняетсяОбработкаДанных.Видимость = Ложь;
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ДанныеОВыполнении.ИнформацияОбОшибке, , , СтатусСообщения.Важное);
		ОтключитьОбработчикОжидания("Подключаемый_ВыполнитьКопирование");
	ИначеЕсли СтатусВыполнения = "Успех" Тогда 	
		Элементы.Выполнить.Доступность = Истина;
		Элементы.Группа6.Доступность = Истина;
		Элементы.ОсновнаяГруппа.Доступность = Истина;
		Элементы.СтатусВыполнения.Заголовок =  Нстр("ru='Операция выполнена успешно.'");
		Элементы.СтатусВыполнения.ЦветТекста = Новый Цвет(0,255,0);
		Элементы.ОбработкаВыполнена.Видимость = Истина;
		Элементы.ВыполняетсяОбработкаДанных.Видимость = Ложь;	
		ФлагИзменений = Истина;
		ОтключитьОбработчикОжидания("Подключаемый_ВыполнитьКопирование");			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзМенюОкончание(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяПоля = ДополнительныеПараметры.ИмяПоля;
	ТекущийВыбор = Результат;
	
	Если ТекущийВыбор = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТекущийВыбор.Значение = Нстр("ru = 'Пустое значение'") Тогда 
		Элементы.ОтборыРасширеннойНастройки.ТекущиеДанные[ИмяПоля] = Нстр("ru = '<Пустое значение>'");	
	ИначеЕсли  ТекущийВыбор.Значение = Нстр("ru = 'По значениям источника'") Тогда
		Элементы.ОтборыРасширеннойНастройки.ТекущиеДанные[ИмяПоля] = Нстр("ru = '<По значениям источника>'");
	ИначеЕсли  ТекущийВыбор.Значение = Нстр("ru = 'Фиксированное значение'") Тогда 	
		Оповещение = Новый ОписаниеОповещения("ВыборАналитикЗавершение", ЭтаФорма);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("РежимВыбора",Истина);
		ОткрытьФорму(СтрЗаменить(Элементы.ОтборыРасширеннойНастройки.ТекущиеДанные.ТипСтрока,"Ссылка","")+".ФормаВыбора",СтруктураПараметров,,,,,Оповещение);	
	КонецЕсли;

	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВидОтчетаПриИзменении(Элемент)
	ОпределитьДоступностьЭлементов();
	ВидОтчетаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВидОтчетаПриИзмененииНаСервере()
	
	//ЗаполнитьСоставСтрокИПоказателей();
	 
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьДоступностьЭлементов()
	
	Элементы.ГруппаПериоды.Доступность = ЗначениеЗаполнено(Объект.ПериодичностьИсточника);	
	Элементы.ГруппаПериоды1.Доступность = ЗначениеЗаполнено(Объект.ПериодичностьПриемника);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеОрганизацииПриИзменении(Элемент)
	ОпределитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ВсеПроектыПриИзменении(Элемент)
	ОпределитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СценарийИсточникПриИзменении(Элемент)
		
	УстановитьОтборыПоСценариюИсточнику();
	ОпределитьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыПоСценариюИсточнику()
	
	Элементы.ПериодичностьИсточника.ПараметрыВыбора = ОпределитьПериодичностьСценария(Объект.СценарийИсточник, Объект.ПериодичностьИсточника);
		
	Если Объект.РежимРаботыОбработки = Перечисления.РежимыКопированияДанныхПоказателей.УОП тогда
		Объект.УОПИсточник = ПолучитьУОП(Объект.СценарийИсточник, Объект.ПериодИсточникС, Объект.ПериодИсточникПо);			
	Иначе
		Объект.УОПИсточник = Документы.УправлениеПериодомСценария.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьОтборыЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьУОП(Сценарий, ПериодНачала, ПериодОкончания)
	
	Если Не ЗначениеЗаполнено(Сценарий) 
		ИЛИ Не ЗначениеЗаполнено(ПериодНачала) 
		ИЛИ Не ЗначениеЗаполнено(ПериодОкончания) тогда
		
		Возврат Документы.УправлениеПериодомСценария.ПустаяСсылка();
	КонецЕсли;
	
	ЗапросПоУОП = Новый Запрос("ВЫБРАТЬ
	|	УправлениеПериодомСценария.Ссылка КАК УправлениеПериодомСценария,
	|	ПериодыНачало.ДатаНачала КАК ДатаНачала,
	|	ПериодыОкончание.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Периоды КАК ПериодыНачало
	|		ПО УправлениеПериодомСценария.ПериодСценария = ПериодыНачало.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Периоды КАК ПериодыОкончание
	|		ПО УправлениеПериодомСценария.ПериодСценарияОкончание = ПериодыОкончание.Ссылка
	|ГДЕ
	|	УправлениеПериодомСценария.Сценарий = &Сценарий
	|	И УправлениеПериодомСценария.ПометкаУдаления = ЛОЖЬ
	|	И ПериодыНачало.ДатаНачала <= &ДатаНачала
	|	И ПериодыОкончание.ДатаОкончания >= &ДатаОкончания");
	
	ЗапросПоУОП.УстановитьПараметр("Сценарий", Сценарий);
	ЗапросПоУОП.УстановитьПараметр("ДатаНачала", ПериодНачала.ДатаНачала);
	ЗапросПоУОП.УстановитьПараметр("ДатаОкончания", НачалоДня(ПериодОкончания.ДатаОкончания));
	
	ВыборкаПоУОП = ЗапросПоУОП.Выполнить().Выбрать();
	
	Если ВыборкаПоУОП.Следующий() тогда
		Возврат ВыборкаПоУОП.УправлениеПериодомСценария;
	Иначе
		Возврат Документы.УправлениеПериодомСценария.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборыЭлементовФормы()
		
	Элементы.ПериодИсточникС.ПараметрыВыбора = УстановитьОтборПериодаПоПериодичности(Объект.ПериодичностьИсточника, Объект.ПериодИсточникС);
	Элементы.ПериодИсточникПо.ПараметрыВыбора = УстановитьОтборПериодаПоПериодичности(Объект.ПериодичностьИсточника, Объект.ПериодИсточникПо);
	
	Объект.ПериодичностьПриемника = Объект.ПериодичностьИсточника;
	Элементы.ПериодПриемникС.ПараметрыВыбора = УстановитьОтборПериодаПоПериодичности(Объект.ПериодичностьПриемника, Объект.ПериодПриемникС);
	
	ОпределитьСдвигПоПериоду();
		
КонецПроцедуры

&НаСервере
Функция УстановитьОтборПериодаПоПериодичности(Периодичность, Период)
	
	МассивПараметровОтбора = Новый Массив();
		
	Если ЗначениеЗаполнено(Периодичность) тогда
		ПараметрОтбора = Новый ПараметрВыбора("Отбор.Периодичность", Периодичность);
		МассивПараметровОтбора.Добавить(ПараметрОтбора);
		ПараметрОтбора = Новый ПараметрВыбора("Отбор.Произвольный", Ложь);
		МассивПараметровОтбора.Добавить(ПараметрОтбора);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Период)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Период, "Периодичность") тогда
		
		Если Период.Периодичность <> Периодичность тогда
			Период = Справочники.Периоды.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(МассивПараметровОтбора);
			
КонецФункции

&НаСервере
Функция ОпределитьПериодичностьСценария(Сценарий, Периодичность)	
		
	Если ЗначениеЗаполнено(Сценарий) Тогда
		
		РегламентыПериоды = Сценарий.ПериодыРегламентов.Выгрузить();
		
		МассивПериодичностей = Новый Массив;
		
		Для Каждого СтрокаПериоды Из РегламентыПериоды Цикл
			
			Если ЗначениеЗаполнено(СтрокаПериоды.Периодичность) И СтрокаПериоды.ДействуетС <= ТекущаяДата()
				И (МассивПериодичностей.Найти(СтрокаПериоды.Периодичность) = неопределено) тогда
				
				МассивПериодичностей.Добавить(СтрокаПериоды.Периодичность);
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивПериодичностей.Количество() = 1 тогда
			Периодичность = МассивПериодичностей[0];
		ИначеЕсли ЗначениеЗаполнено(Периодичность) И РегламентыПериоды.Количество() > 0
			И (МассивПериодичностей.Найти(Периодичность) = неопределено) тогда
			
			Периодичность = Перечисления.Периодичность.ПустаяСсылка();
		КонецЕсли;
		
		Возврат ПолучитьДоступныеЗначения(МассивПериодичностей);
				
	Иначе 
		
		Возврат ПолучитьДоступныеЗначения();
		
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция ПолучитьДоступныеЗначения(МассивЗначений = неопределено, УстанавливатьПустойОтбор = Ложь)
	
	НовыйМассив = Новый Массив();
	
	Если МассивЗначений = неопределено тогда
		Возврат Новый ФиксированныйМассив(НовыйМассив);
	КонецЕсли;
	
	Если МассивЗначений.Количество() > 0 ИЛИ УстанавливатьПустойОтбор тогда
		
		МассивЗнченийПараметров = Новый ФиксированныйМассив(МассивЗначений);
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", МассивЗнченийПараметров);
		НовыйМассив.Добавить(НовыйПараметр);
		
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(НовыйМассив);
	
КонецФункции

&НаКлиенте
Процедура СценарийПриемникПриИзменении(Элемент)
		
	УстановитьОтборыПоСценариюПриемнику();
	ОпределитьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыПоСценариюПриемнику()
		
	Если Объект.РежимРаботыОбработки = Перечисления.РежимыКопированияДанныхПоказателей.УОП тогда
		Объект.УОППриемник = ПолучитьУОП(Объект.СценарийПриемник, Объект.ПериодПриемникС, Объект.ПериодПриемникПо);			
	Иначе
		Объект.УОППриемник = Документы.УправлениеПериодомСценария.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьОтборыЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура БланкПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Бланк) Тогда
		 Элементы.ОтборПоСоставуБланка.Доступность = Истина;
	Иначе 	 
		 Элементы.ОтборПоСоставуБланка.Доступность = Ложь;
	КонецЕсли;	
	
	ЗаполнитьСоставСтрокИПоказателейБланк();
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКопирование(Команда)
	
	Если НЕ ПроверитьЗаполнение() ИЛИ НЕ ПроверитьЗаполнениеРеквизитовДополнительно() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатКопирования = ВыполнитьКопированиеДанных();
		
	Если РезультатКопирования Тогда
		 ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Копирование выполнено успешно'"), , , СтатусСообщения.Важное);
	Иначе	
		 ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Возникли ошибки при копировании'"), , , СтатусСообщения.Важное);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодИсточникСПриИзменении(Элемент)
	
	ОпределитьНачальныйПериодПриемника();
		
КонецПроцедуры

&НаКлиенте
Процедура ПериодИсточникПоПриИзменении(Элемент)
	
	ОпределитьСдвигПоПериоду();
		
КонецПроцедуры

&НаКлиенте
Процедура РежимРасширеннойНастройки(Команда)
	
		
КонецПроцедуры

&НаКлиенте
Процедура ОтборыРасширеннойНастройкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ОтборИсточник" Тогда
		СтандартнаяОбработка = Ложь;
		
		Если НЕ Элемент.ТекущиеДанные.Редактируется Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		СтруктураПараметров=Новый Структура;
		СтруктураПараметров.Вставить("Тип_",Элементы.ОтборыРасширеннойНастройки.ТекущиеДанные.ТипСтрока);
		СтруктураПараметров.Вставить("ТекНастройка",Элементы.ОтборыРасширеннойНастройки.ТекущиеДанные.Наименование);
		СтруктураПараметров.Вставить("ТекПоле",Поле.Имя);
		СтруктураПараметров.Вставить("ВидНастройки","Отбор");
		СтруктураПараметров.Вставить("ТекОтбор_",Элементы.ОтборыРасширеннойНастройки.ТекущиеДанные.ОтборИсточникаСКД);
		
		Оповещение = Новый ОписаниеОповещения("НастрйкаОтбораЗавершение", ЭтаФорма);
		ОткрытьФорму("Обработка.КопированиеПоСрезам.Форма.ФормаОтборовАналитик", 
		СтруктураПараметров,ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 	 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыРасширеннойНастройкиПриАктивизацииСтроки(Элемент)
	
	Элементы.ОтборыРасширеннойНастройкиПриемник.ТекущаяСтрока = Элементы.ОтборыРасширеннойНастройки.ТекущаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыРасширеннойНастройки1Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ОтборПриемник" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ Элемент.ТекущиеДанные.Редактируется Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыВыбора = Новый Структура("ИмяПоля",Поле.Имя);
		ОповещениеВыборИзМенюОкончание = Новый ОписаниеОповещения("ВыборИзМенюОкончание",ЭтаФорма,ПараметрыВыбора);	
		СписокДоступныхЗначений = Новый СписокЗначений;
		СписокДоступныхЗначений.Добавить(Нстр("ru = 'Пустое значение'"));
		СписокДоступныхЗначений.Добавить(Нстр("ru = 'По значениям источника'"));
		СписокДоступныхЗначений.Добавить(Нстр("ru = 'Фиксированное значение'"));	
		ЭтаФорма.ПоказатьВыборИзМеню(ОповещениеВыборИзМенюОкончание,СписокДоступныхЗначений,Элемент);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПериодПриемникСПриИзменении(Элемент)
		
	 ОпределитьСдвигПоПериоду();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	Параметры_ = Новый Структура;	
	Параметры_.Вставить("ВидОтчета",Объект.ВидОтчета);
	Параметры_.Вставить("МножественныйВыбор",Истина);
	Параметры_.Вставить("СписокСтрок",Строки);
	Параметры_.Вставить("Ракурс",Объект.Бланк);

	Оповещение = Новый ОписаниеОповещения("ВыборСтрокЗавершение",ЭтаФорма);
	ОткрытьФорму("Справочник.СтрокиОтчетов.Форма.ФормаПодбораСтрокРакурса",Параметры_,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСоставуБланкаПриИзменении(Элемент)
	
	Элементы.ОтборыРасширеннойНастройки.Видимость 			= НЕ Объект.ОтборПоСоставуБланка;
	Элементы.ОтборыРасширеннойНастройкиПриемник.Видимость 	= НЕ Объект.ОтборПоСоставуБланка;
	Элементы.НадписьОтборыПоБланку.Видимость 				= Объект.ОтборПоСоставуБланка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыРасширеннойНастройкиПриемникПриАктивизацииСтроки(Элемент)
	
	Элементы.ОтборыРасширеннойНастройки.ТекущаяСтрока = Элементы.ОтборыРасширеннойНастройкиПриемник.ТекущаяСтрока;

КонецПроцедуры
 
&НаКлиенте
Процедура РежимПриИзменении(Элемент)
			
	ОпределитьДоступностьЭлементов();
	//ОпределитьПериодичности();
	
КонецПроцедуры
	
#КонецОбласти

&НаСервере
Функция ПроверитьСтатусПроцесса()
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания)  Тогда
		Возврат 0; //Были ошибки
	КонецЕсли;
	
	Если ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
		 Возврат 1;//Задание успешно выполнено
	Иначе	 
		 Возврат 2;//Задание выполняется
	КонецЕсли;	
			
КонецФункции	

&НаСервере
Функция ВыполнитьКопированиеДанныхВФоне()
	
	Результат = Истина;
	
	Если Объект.РежимРаботыОбработки = Перечисления.РежимыКопированияДанныхПоказателей.УОП И Не ЗначениеЗаполнено(Объект.УОППриемник) Тогда
		
		Если Объект.УОПИсточник.Пустая() тогда
			
			СтрокаШаблона = Нстр("ru = 'Документ Управление отчетным периодом по сценарию %1 за период %2 - %3 не найден.'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда									
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(СтрокаШаблона, 
					Объект.СценарийПриемник, Объект.ПериодИсточникС, Объект.ПериодИсточникПо));
			КонецЕсли;
			
			Возврат Ложь;
		КонецЕсли;
		
		Попытка
			НовыйДокумент=Объект.УОПИсточник.Скопировать();
			НовыйДокумент.Дата=ТекущаяДата();
			НовыйДокумент.УстановитьНовыйНомер();	
			НовыйДокумент.ПериодСценария			= Объект.ПериодИсточникС;
			НовыйДокумент.ПериодСценарияОкончание	= Объект.ПериодИсточникПо;
			НовыйДокумент.Сценарий					= Объект.СценарийПриемник;
			НовыйДокумент.Записать();
			
			СтрокаШаблона = Нстр("ru = 'Документ Управление отчетным периодом по сценарию %1 за период %2 - %3 успешно создан.'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда									
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(СтрокаШаблона, 
					Объект.СценарийПриемник, Объект.ПериодИсточникС, Объект.ПериодИсточникПо));
			КонецЕсли;
					
			Объект.УОППриемник 						=  НовыйДокумент.Ссылка;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;	
		КонецПопытки;
		
	КонецЕсли;	
	
	ПараметрыЗадания = ПодготовитьСтруктуруПараметров();
	
	ТЗВерсийИсточник = ПараметрыЗадания.ТзИсточник.Скопировать();
	ТЗВерсийИсточник.Свернуть("ВидОтчета,ПериодОтчета,Сценарий,Организация,Проект,Валюта");
	
	ТЗВерсийПриемник = ПараметрыЗадания.ТзПриемник.Скопировать();
	ТЗВерсийПриемник.Свернуть("ВидОтчета,ПериодОтчета,Сценарий,Организация,Проект,Валюта");

	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ТЗВерсийИсточникКоличество",ТЗВерсийИсточник.Количество());
	СтруктураТаблиц.Вставить("ТЗВерсийПриемникКоличество",ТЗВерсийПриемник.Количество());
    СтруктураТаблиц.Вставить("ТзИсточник",ПараметрыЗадания.ТЗИсточник);
	СтруктураТаблиц.Вставить("ТзПриемник",ПараметрыЗадания.ТЗПриемник);
	СтруктураТаблиц.Вставить("ПеренестиЭкземплярыОтчетов",Объект.ПеренестиЭкземплярыОтчетов);
	СтруктураТаблиц.Вставить("ОтборыРасширеннойНастройки",РеквизитФормывЗначение("ОтборыРасширеннойНастройки"));
	СтруктураТаблиц.Вставить("УОПИсточник",Объект.УОПИсточник);
    СтруктураТаблиц.Вставить("УОППриемник",Объект.УОППриемник);
	
	Элементы.Индикатор.МаксимальноеЗначение = ТЗВерсийИсточник.Количество()+ТЗВерсийПриемник.Количество();
	
	Если Элементы.Индикатор.МаксимальноеЗначение = 0 Тогда
		АдресХранилищаСтатусаКопирования = ПоместитьВоВременноеХранилище( Новый Структура("ИндексПрогресса,КоличествоОбходов,СтатусВыполнения",0,Элементы.Индикатор.МаксимальноеЗначение,"Успех"),Новый УникальныйИдентификатор);
		Результат = Истина;
		Возврат Результат;
	КонецЕсли;	
	
	СтруктураВыполнения = Новый Структура("СтатусВыполнения,ИндексПрогресса,ИнформацияОбОшибке","Прогресс",1,"");
	АдресХранилищаСтатусаКопирования = ПоместитьВоВременноеХранилище(СтруктураВыполнения,Новый УникальныйИдентификатор);
	МассивПараметров = Новый Массив; 
	МассивПараметров.Добавить(АдресХранилищаСтатусаКопирования); 
	МассивПараметров.Добавить(СтруктураТаблиц);
	
	ФЗ_Копирование = ФоновыеЗадания.Выполнить("СводнаяТаблицаУХ.ВыполнитьКопированиеВФоне",МассивПараметров); 
	

Возврат Результат;
	
КонецФункции	

&НаСервере
Функция ВыполнитьКопированиеДанных()
	
	Результат = Истина;
	
	Если Объект.РежимРаботыОбработки = Перечисления.РежимыКопированияДанныхПоказателей.УОП  Тогда
		
		Если Не ЗначениеЗаполнено(Объект.УОПИсточник) Тогда
			СтрокаШаблона = Нстр("ru = 'Документ Управление отчетным периодом по сценарию %1 за период %2 - %3 не найден.'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда									
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(СтрокаШаблона, 
				Объект.СценарийПриемник, Объект.ПериодИсточникС, Объект.ПериодИсточникПо));
			КонецЕсли;
			
			Возврат Ложь;
			
		ИначеЕсли Не  ЗначениеЗаполнено(Объект.УОППриемник)	Тогда
			
			Попытка
				НовыйДокумент=Объект.УОПИсточник.Скопировать();
				НовыйДокумент.Дата=ТекущаяДата();
				НовыйДокумент.УстановитьНовыйНомер();	
				НовыйДокумент.ПериодСценария			= Объект.ПериодИсточникС;
				НовыйДокумент.ПериодСценарияОкончание	= Объект.ПериодИсточникПо;
				НовыйДокумент.Сценарий					= Объект.СценарийПриемник;
				НовыйДокумент.Записать();
				
				СтрокаШаблона = Нстр("ru = 'Документ Управление отчетным периодом по сценарию %1 за период %2 - %3 успешно создан.'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда									
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(СтрокаШаблона, 
					Объект.СценарийПриемник, Объект.ПериодИсточникС, Объект.ПериодИсточникПо));
				КонецЕсли;
				
				Объект.УОППриемник 						=  НовыйДокумент.Ссылка;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				Возврат Ложь;	
			КонецПопытки;
			
			
			
		КонецЕсли;	
		
		
	КонецЕсли;	
	
	ПараметрыЗадания = ПодготовитьСтруктуруПараметров();
	
	ТЗВерсийИсточник = ПараметрыЗадания.ТзИсточник.Скопировать();
	ТЗВерсийИсточник.Свернуть("ВидОтчета,ПериодОтчета,Сценарий,Организация,Проект,Валюта");
	
	ТЗВерсийПриемник = ПараметрыЗадания.ТзПриемник.Скопировать();
	ТЗВерсийПриемник.Свернуть("ВидОтчета,ПериодОтчета,Сценарий,Организация,Проект,Валюта");

	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ТЗВерсийИсточникКоличество",ТЗВерсийИсточник.Количество());
	СтруктураТаблиц.Вставить("ТЗВерсийПриемникКоличество",ТЗВерсийПриемник.Количество());
    СтруктураТаблиц.Вставить("ТзИсточник",ПараметрыЗадания.ТЗИсточник);
	СтруктураТаблиц.Вставить("ТзПриемник",ПараметрыЗадания.ТЗПриемник);
	СтруктураТаблиц.Вставить("ПеренестиЭкземплярыОтчетов",Объект.ПеренестиЭкземплярыОтчетов);
	СтруктураТаблиц.Вставить("ОтборыРасширеннойНастройки",РеквизитФормывЗначение("ОтборыРасширеннойНастройки"));
	СтруктураТаблиц.Вставить("УОПИсточник",Объект.УОПИсточник);
    СтруктураТаблиц.Вставить("УОППриемник",Объект.УОППриемник);
	
	Элементы.Индикатор.МаксимальноеЗначение = ТЗВерсийИсточник.Количество()+ТЗВерсийПриемник.Количество();
	
	Если ТЗВерсийИсточник.Количество()+ТЗВерсийПриемник.Количество() = 0 Тогда
		 Возврат Истина;
	КонецЕсли;	
	
	СтруктураВыполнения = Новый Структура("СтатусВыполнения,ИндексПрогресса,ИнформацияОбОшибке","Прогресс",1,"");
	АдресХранилищаСтатусаКопирования = ПоместитьВоВременноеХранилище(СтруктураВыполнения,Новый УникальныйИдентификатор);
		
	КопированиеВыполнено = Ложь;
	СводнаяТаблицаУХ.ВыполнитьКопированиеВФоне(АдресХранилищаСтатусаКопирования,СтруктураТаблиц,КопированиеВыполнено); 
	

	Возврат КопированиеВыполнено;
	
КонецФункции	

&НаСервере
Функция ПодготовитьСтруктуруПараметров()
	
    СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОтборыРасширеннойНастройки",РеквизитФормывЗначение("ОтборыРасширеннойНастройки"));
	СтруктураПараметров.Вставить("Строки",Строки);
	СтруктураПараметров.Вставить("Показатели",Показатели);
    СтруктураПараметров.Вставить("ПериодПриемникС",Объект.ПериодПриемникС);
    СтруктураПараметров.Вставить("ПериодПриемникПо",Объект.ПериодПриемникПо);
	СтруктураПараметров.Вставить("ПериодИсточникС",Объект.ПериодИсточникС);
    СтруктураПараметров.Вставить("ПериодИсточникПо",Объект.ПериодИсточникПо);
    СтруктураПараметров.Вставить("СценарийИсточник",Объект.СценарийИсточник);
	СтруктураПараметров.Вставить("СценарийПриемник",Объект.СценарийПриемник);
	СтруктураПараметров.Вставить("ПериодичностьИсточника",Объект.ПериодичностьИсточника);
	СтруктураПараметров.Вставить("ПериодичностьПриемника",Объект.ПериодичностьПриемника);
    СтруктураПараметров.Вставить("Режим",Объект.Режим);
	СтруктураПараметров.Вставить("ВидОтчета",Объект.ВидОтчета);
    СтруктураПараметров.Вставить("ПеренестиЭкземплярыОтчетов",Объект.ПеренестиЭкземплярыОтчетов);
    СтруктураПараметров.Вставить("УОПИсточник",Объект.УОПИсточник);
		
	Если Объект.РежимРаботыОбработки = Перечисления.РежимыКопированияДанныхПоказателей.УОП Тогда
		СтруктураПараметров.Вставить("МассивПоказателей",ЗаполнитьСоставСтрокИПоказателейУОП());	
		СтруктураПараметров.Вставить("ПериодПриемникС",	Объект.УОППриемник.ПериодСценария);
		СтруктураПараметров.Вставить("ПериодПриемникПо",Объект.УОППриемник.ПериодСценарияОкончание);
		СтруктураПараметров.Вставить("ПериодИсточникС",	Объект.УОПИсточник.ПериодСценария);
		СтруктураПараметров.Вставить("ПериодИсточникПо",Объект.УОПИсточник.ПериодСценарияОкончание);		
	Иначе	 
		СтруктураПараметров.Вставить("МассивПоказателей",ВыбранныеПоказатели);	
	КонецЕсли;	
	
	СтруктураПараметров.Вставить("ТзИсточник",СводнаяТаблицаУХ.ПолучитьТаблицуДляЗаписи(СтруктураПараметров));
    СтруктураПараметров.Вставить("ТзПриемник",СводнаяТаблицаУХ.ПолучитьТаблицуДляОчистики(СтруктураПараметров));
	
	Возврат СтруктураПараметров;
		
КонецФункции	

&НаСервере
Процедура ЗаполнитьСоставСтрокИПоказателейБланк(СтруктураФильтров = Неопределено)
	
	Если ЗначениеЗаполнено(Объект.Бланк) Тогда
		
		Запрос = Новый ЗАпрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСтруктурыБланка.Ссылка,
		|	НастройкиСтруктурыБланка.СтрокаОтчета
		|ИЗ
		|	Справочник.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
		|ГДЕ
		|	НастройкиСтруктурыБланка.ИндексЭлемента = 2
		|	И НастройкиСтруктурыБланка.Владелец = &Владелец";
		
		Запрос.УстановитьПараметр("Владелец",Объект.Бланк);
		Строки.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СтрокаОтчета"));
		
		Запрос = Новый ЗАпрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСтруктурыБланкаКолонкиОтчетов.Ссылка КАК Ссылка,
		|	НастройкиСтруктурыБланкаКолонкиОтчетов.Колонка КАК КолонкаОтчета
		|ИЗ
		|	Справочник.НастройкиСтруктурыБланка.КолонкиОтчетов КАК НастройкиСтруктурыБланкаКолонкиОтчетов
		|ГДЕ
		|	НастройкиСтруктурыБланкаКолонкиОтчетов.Ссылка.ИндексЭлемента = 10
		|	И НастройкиСтруктурыБланкаКолонкиОтчетов.Ссылка.Владелец = &Владелец
		|	И НастройкиСтруктурыБланкаКолонкиОтчетов.Ссылка.ВидОтклонения = ""ТекущееЗначение""";
		
		Запрос.УстановитьПараметр("Владелец",Объект.Бланк);
		Показатели.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КолонкаОтчета"));
			
	ИначеЕсли ЗначениеЗаполнено(Объект.ВидОтчета) Тогда
		Запрос = Новый ЗАпрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтрокиОтчетов.Ссылка
		|ИЗ
		|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
		|ГДЕ
		|	СтрокиОтчетов.Владелец = &Владелец
		|	И СтрокиОтчетов.ПометкаУдаления = Ложь";
		
		Запрос.УстановитьПараметр("Владелец",Объект.ВидОтчета);
		Строки.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
		Запрос = Новый ЗАпрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КолонкиОтчетов.Ссылка
		|ИЗ
		|	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
		|ГДЕ
		|	КолонкиОтчетов.Владелец = &Владелец
		|	И КолонкиОтчетов.ПометкаУдаления = Ложь";
		
		Запрос.УстановитьПараметр("Владелец",Объект.ВидОтчета);
		Показатели.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
			
	Иначе	
		Строки.Очистить();
		Показатели.Очистить();		
		Возврат;
	КонецЕсли;	
	
	ОтборыРасширеннойНастройки.Очистить();
	ВыбранныеПоказатели.ЗагрузитьЗначения(СводнаяТаблицаУХ.ПолучитьПоказателиПоСтрокамИколонкам(Строки.ВыгрузитьЗначения(),Показатели.ВыгрузитьЗначения()));
	СводнаяТаблицаУХ.ЗаполнитьДоступныеАналитикиДляОбработкиПереноса(ВыбранныеПоказатели,ОтборыРасширеннойНастройки,СтруктураФильтров);
	
КонецПроцедуры	

&НаСервере
Функция ЗаполнитьСоставСтрокИПоказателейУОП(СтруктураФильтров = Неопределено)
	
	ТекущаяВерсияРегламента = Объект.УОПИсточник.ВерсияОрганизационнойСтруктуры;
	ЕстьПроцесс             = Объект.УОПИсточник.РасширеннаяНастройка;
	
	Если ЕстьПроцесс Тогда
		
		Запрос = Новый ЗАпрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса КАК ЭтапПроцесса
		|ПОМЕСТИТЬ втЭтапы
		|ИЗ
		|	РегистрСведений.ОрганизационныеЕдиницыЭтаповПроцессов КАК ОрганизационныеЕдиницыЭтаповПроцессов
		|ГДЕ
		|	ОрганизационныеЕдиницыЭтаповПроцессов.ВерсияРегламентаПодготовкиОтчетности = &ТекущаяВерсияРегламента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭтапыУниверсальныхПроцессовФормируемыеДокументы.ШаблонДокумента КАК ВидОтчета
		|ПОМЕСТИТЬ втВидыОтчетов
		|ИЗ
		|	втЭтапы КАК втЭтапы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыУниверсальныхПроцессовФормируемыеДокументы
		|		ПО втЭтапы.ЭтапПроцесса = ЭтапыУниверсальныхПроцессовФормируемыеДокументы.Ссылка
		|ГДЕ
		|	ЭтапыУниверсальныхПроцессовФормируемыеДокументы.ДокументБД = &НастраиваемыйОтчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоказателиОтчетов.Ссылка КАК Показатель
		|ИЗ
		|	втВидыОтчетов КАК втВидыОтчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|		ПО втВидыОтчетов.ВидОтчета = ПоказателиОтчетов.Владелец
		|ГДЕ
		|	ПоказателиОтчетов.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("ТекущаяВерсияРегламента",ТекущаяВерсияРегламента);
		Запрос.УстановитьПараметр("НастраиваемыйОтчет",Справочники.ДокументыБД.НайтиПоНаименованию("НастраиваемыйОтчет",,,Справочники.ТипыБазДанных.ТекущаяИБ));
		
		МассивПоказателей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Показатель");
		
	Иначе		 
		
		Запрос = Новый ЗАпрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыОтчетов.Ссылка КАК ВидОтчета
		|ПОМЕСТИТЬ втВидыОтчетов
		|ИЗ
		|	Справочник.ВидыОтчетов КАК ВидыОтчетов
		|ГДЕ
		|	ВидыОтчетов.Ссылка В ИЕРАРХИИ(&ГруппаОтчетов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоказателиОтчетов.Ссылка КАК Показатель
		|ИЗ
		|	втВидыОтчетов КАК втВидыОтчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|		ПО втВидыОтчетов.ВидОтчета = ПоказателиОтчетов.Владелец
		|ГДЕ
		|	ПоказателиОтчетов.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("ГруппаОтчетов",ТекущаяВерсияРегламента.ВидОтчета);
			
		МассивПоказателей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Показатель");
	
	КонецЕсли;		 
	
	Возврат МассивПоказателей;
	
КонецФункции	

&НаСервере
Процедура ОпределитьПериодичности() 
	
	Если ЗначениеЗаполнено(Объект.Бланк) Тогда	
		
		Если ЗначениеЗаполнено(Объект.СценарийИсточник) Тогда
			
			Если Объект.ПериодичностьИсточника<>Объект.СценарийИсточник.Периодичность И ЗначениеЗаполнено(Объект.СценарийИсточник.Периодичность) Тогда 
				
				Объект.ПериодИсточникС = Справочники.Периоды.ПустаяСсылка();
				Объект.ПериодИсточникПо = Справочники.Периоды.ПустаяСсылка();
				
				НовыйПараметр = Новый ПараметрВыбора("Отбор.Периодичность", Объект.СценарийИсточник.Периодичность);
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НовыйПараметр);
				НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
				
				Элементы.ПериодИсточникС.ПараметрыВыбора = НовыеПараметры;
				Элементы.ПериодИсточникПо.ПараметрыВыбора = НовыеПараметры;
				
				Объект.ПериодичностьИсточника = Объект.СценарийИсточник.Периодичность; 
				Если Объект.ПериодичностьИсточника =  Объект.ПериодичностьПриемника Тогда
					Объект.ПериодПриемникС = Объект.ПериодИсточникС;
					Объект.ПериодПриемникПО = Объект.ПериодИсточникПО;
				КонецЕсли;	
				
				
			КонецЕсли;
			ОпределитьНачальныйПериодПриемника();
			ОпределитьСдвигПоПериоду();
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.СценарийПриемник) Тогда
			
			Если Объект.ПериодичностьПриемника<>Объект.СценарийПриемник.Периодичность  Тогда	
				Если Не ЗначениеЗаполнено(Объект.СценарийПриемник.Периодичность) Тогда
					Объект.ПериодичностьПриемника = Объект.ПериодичностьИсточника;
				Иначе
					Объект.ПериодичностьПриемника = Объект.СценарийПриемник.Периодичность; 
				КонецЕсли;
				
				Объект.ПериодПриемникС = Справочники.Периоды.ПустаяСсылка();
				Объект.ПериодПриемникПо = Справочники.Периоды.ПустаяСсылка();
				
				НовыйПараметр = Новый ПараметрВыбора("Отбор.Периодичность", Объект.ПериодичностьПриемника);
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НовыйПараметр);
				НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
				
				Элементы.ПериодПриемникС.ПараметрыВыбора = НовыеПараметры;
				Элементы.ПериодПриемникПо.ПараметрыВыбора = НовыеПараметры;				
			КонецЕсли;
			
			ОпределитьНачальныйПериодПриемника();
			ОпределитьСдвигПоПериоду();
			
		КонецЕсли;
		
	ИначеЕсли Объект.РежимРаботыОбработки = Перечисления.РежимыКопированияДанныхПоказателей.УОП Тогда	
		
		
		Если ЗначениеЗаполнено(Объект.СценарийИсточник) Тогда
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Сценарий", Объект.СценарийИсточник);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			
			Элементы.УОПИсточник.ПараметрыВыбора = НовыеПараметры;
		
		КонецЕсли;	 
		
		Если ЗначениеЗаполнено(Объект.СценарийПриемник) Тогда
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Сценарий", Объект.СценарийПриемник);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			
			Элементы.УОППриемник.ПараметрыВыбора = НовыеПараметры;
		
		КонецЕсли;	 

		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ОпределитьСдвигПоПериоду()
		
	Если НЕ ЗначениеЗаполнено(Объект.ПериодичностьИсточника)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ПериодИсточникС)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ПериодИсточникПо)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ПериодПриемникС)Тогда
		
		Объект.ПериодПриемникПо = Справочники.Периоды.ПустаяСсылка();
		Возврат;
	КонецЕсли;
		
	ДатаНачалаИнтервала = Мин(Объект.ПериодИсточникС.ДатаНачала, Объект.ПериодИсточникПо.ДатаНачала, Объект.ПериодПриемникС.ДатаНачала);
	ДатаОкончанияИнтервала = Макс(Объект.ПериодИсточникС.ДатаНачала, Объект.ПериодИсточникПо.ДатаНачала, Объект.ПериодПриемникС.ДатаНачала);
	
	ПериодыУХПовтИсп.ПроверитьИнтервалПериодовВФоне(ДатаНачалаИнтервала, ДатаОкончанияИнтервала);
	
	СдвигПоПериоду = РасчитатьКоличествоПериодов(Объект.ПериодИсточникС.ДатаНачала, Объект.ПериодИсточникПо.ДатаНачала, Объект.ПериодичностьИсточника);	
	Объект.ПериодПриемникПо = ОбщегоНазначенияУХ.глОтносительныйПериод(Объект.ПериодПриемникС, СдвигПоПериоду,, Ложь);
	
	Если Объект.РежимРаботыОбработки = Перечисления.РежимыКопированияДанныхПоказателей.УОП тогда
		Объект.УОППриемник = ПолучитьУОП(Объект.СценарийПриемник, Объект.ПериодПриемникС, Объект.ПериодПриемникПо);
	КонецЕсли;
	
	ДатаНачалаИнтервала = Мин(Объект.ПериодИсточникС.ДатаНачала, Объект.ПериодИсточникПо.ДатаНачала, Объект.ПериодПриемникС.ДатаНачала, Объект.ПериодПриемникПо.ДатаНачала);
	ДатаОкончанияИнтервала = Макс(Объект.ПериодИсточникС.ДатаНачала, Объект.ПериодИсточникПо.ДатаНачала, Объект.ПериодПриемникС.ДатаНачала, Объект.ПериодПриемникПо.ДатаНачала);
	
	ПериодыУХПовтИсп.ПроверитьИнтервалПериодовВФоне(ДатаНачалаИнтервала, ДатаОкончанияИнтервала);
		
КонецПроцедуры

&НаСервере
Функция РасчитатьКоличествоПериодов(ДатаНачала, ДатаОкончания, Периодичность)
	
	ЗапросПоПериодам = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                                |	Периоды.ДатаНачала КАК ДатаНачала
	                                |ИЗ
	                                |	Справочник.Периоды КАК Периоды
	                                |ГДЕ
	                                |	Периоды.ДатаНачала > &НачалоПериода
	                                |	И Периоды.ДатаНачала <= &КонецПериода
	                                |	И Периоды.Произвольный = ЛОЖЬ
	                                |	И Периоды.ПометкаУдаления = ЛОЖЬ
	                                |	И Периоды.Периодичность = &Периодичность");
	
	Если ДатаНачала < ДатаОкончания тогда
		НачалоПериода = ДатаНачала;
		КонецПериода = ДатаОкончания;
		Коэффициент = 1;
	ИначеЕсли ДатаНачала > ДатаОкончания тогда
		НачалоПериода = ДатаОкончания;
		КонецПериода = ДатаНачала;
		Коэффициент = -1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	ЗапросПоПериодам.УстановитьПараметр("НачалоПериода", НачалоПериода);
	ЗапросПоПериодам.УстановитьПараметр("КонецПериода", КонецПериода);
	ЗапросПоПериодам.УстановитьПараметр("Периодичность", Периодичность);
	
	Возврат Коэффициент * ЗапросПоПериодам.Выполнить().Выбрать().Количество();
	
КонецФункции
  
&НаСервере
Процедура ОпределитьНачальныйПериодПриемника()
	
	Если Не ЗначениеЗаполнено(Объект.ПериодИсточникС) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПериодичностьПриемника) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Периоды.Ссылка
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	Периоды.Периодичность = &Периодичность
	|	И Периоды.Произвольный = Ложь
	|	И Периоды.ДатаНачала = &ДатаНачала";
	
	Запрос.УстановитьПараметр("ДатаНачала", Объект.ПериодИсточникС.ДатаНачала);
	Запрос.УстановитьПараметр("Периодичность", Объект.ПериодичностьПриемника);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект.ПериодПриемникС = Выборка.Ссылка;
	КонецЦикла;
		
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Закрыть(ФлагИзменений);
		
КонецПроцедуры

Процедура УстановитьВидимостьЭлементов()
	
	Если Объект.РежимРаботыОбработки = Перечисления.РежимыКопированияДанныхПоказателей.УОП  Тогда	 	 
		
		Элементы.ГруппаБланк.Видимость = Ложь;
		
		Элементы.ГруппаРасширеннаяНастройка.Видимость = Ложь;
		
		Элементы.УОПИсточник.Видимость = Ложь;
		Элементы.УОППриемник.Видимость = Ложь;
		Элементы.ГруппаПериоды.Видимость = Истина;
		Элементы.ГруппаПериоды1.Видимость = Истина;
		
		Элементы.ПеренестиЭкземплярыОтчетов.Видимость = Истина;
		
	ИначеЕсли Объект.РежимРаботыОбработки = Перечисления.РежимыКопированияДанныхПоказателей.ПроизвольныеОтборы  Тогда	 	 
		
		Элементы.ГруппаБланк.Видимость = Ложь;
		
		Элементы.ГруппаРасширеннаяНастройка.Видимость  = Истина;
		
		Элементы.УОПИсточник.Видимость = Ложь;
		Элементы.УОППриемник.Видимость = Ложь;
		Элементы.ГруппаПериоды.Видимость = Истина;
		Элементы.ГруппаПериоды1.Видимость = Истина;
		
		Элементы.ПеренестиЭкземплярыОтчетов.Видимость  = Ложь;
		
	КонецЕсли;	 
	
КонецПроцедуры	

&НаКлиенте
Процедура РежимРаботыОбработкиПриИзменении(Элемент)
	
	
	УстановитьРежимКопирования()
	
			
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимКопирования()
	
	
	 Строки.Очистить();
	 Показатели.Очистить();
	 ВыбранныеПоказатели.Очистить();
	 Объект.Бланк 				= Справочники.БланкиОтчетов.ПустаяСсылка();
	 Объект.ПериодИсточникС 	= Справочники.Периоды.ПустаяСсылка();
     Объект.ПериодИсточникПо 	= Справочники.Периоды.ПустаяСсылка();
     Объект.ПериодПриемникС 	= Справочники.Периоды.ПустаяСсылка();
     Объект.ПериодПриемникПо 	= Справочники.Периоды.ПустаяСсылка();
     Объект.УОПИсточник         = Документы.УправлениеПериодомСценария.ПустаяСсылка();
	 Объект.УОППриемник         = Документы.УправлениеПериодомСценария.ПустаяСсылка();
	 
	 //ОпределитьПериодичности();
	 
	 ОтборыРасширеннойНастройки.Очистить();
	 
	 СводнаяТаблицаУХ.ЗаполнитьДоступныеАналитикиДляОбработкиПереноса(ВыбранныеПоказатели,ОтборыРасширеннойНастройки,Неопределено);	  
			
	 УстановитьВидимостьЭлементов();
	
КонецПроцедуры	

&НаКлиенте
Процедура УОПИсточникПриИзменении(Элемент)
		
	   УОПИсточникПриИзмененииСервер();
		
КонецПроцедуры
   
&НаСервере
Процедура УОПИсточникПриИзмененииСервер()
		
	Если ЗначениеЗАполнено(Объект.УОПИсточник) Тогда
		
		Объект.ПериодИсточникС 	= Объект.УОПИсточник.ПериодСценария;
		Объект.ПериодИсточникПо = Объект.УОПИсточник.ПериодСценарияОкончание;
	
		Объект.ПериодПриемникС 	= Объект.УОПИсточник.ПериодСценария;
		Объект.ПериодПриемникПо = Объект.УОПИсточник.ПериодСценарияОкончание;
	
	КонецЕсли;	
			
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоказателиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Параметры_ = Новый Структура;
	Параметры_.Вставить("Владелец",?(ЗначениеЗаполнено(Объект.Бланк),Объект.Бланк,Объект.ВидОтчета));
	Параметры_.Вставить("ВыбранныеПоказатели",ВыбранныеПоказатели);
	Параметры_.Вставить("Строки",Строки);
	Параметры_.Вставить("Колонки",Показатели);
	Параметры_.Вставить("РежимРаботыОбработки",Объект.РежимРаботыОбработки);
	Параметры_.Вставить("Бланк",Объект.Бланк);
	
	Оповещение = Новый ОписаниеОповещения("ВыборПоказателейЗавершение",ЭтаФорма);
	ОткрытьФорму("Обработка.КопированиеПоСрезам.Форма.ФормаПодбораПоказателейВидаОтчета",Параметры_,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	

КонецПроцедуры
   
&НаСервере   
Функция ПроверитьЗаполнениеРеквизитовДополнительно()
	
	
	Если Объект.РежимРаботыОбработки = Перечисления.РежимыКопированияДанныхПоказателей.ПроизвольныеОтборы Тогда
		
		КоличествоПериодовИсточник = ПериодыУХ.ПолучитьПодчиненныеПериоды(Объект.ПериодИсточникС,Объект.ПериодИсточникПо,Объект.ПериодИсточникС.Периодичность).Количество();
		КоличествоПериодовПриемник = ПериодыУХ.ПолучитьПодчиненныеПериоды(Объект.ПериодПриемникС,Объект.ПериодПриемникПо,Объект.ПериодПриемникС.Периодичность).Количество();
		
		
		Если ВыбранныеПоказатели.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбраны показатели'"),,, "ВыбранныеПоказатели");		
			Возврат Ложь;		
		КонецЕсли;	
		
		
	ИначеЕсли Объект.РежимРаботыОбработки = Перечисления.РежимыКопированияДанныхПоказателей.УОП Тогда
		
		
		КоличествоПериодовИсточник = ПериодыУХ.ПолучитьПодчиненныеПериоды(Объект.УОПИсточник.ПериодСценария,Объект.УОПИсточник.ПериодСценарияОкончание,Объект.УОПИсточник.ПериодСценария.Периодичность).Количество();
		КоличествоПериодовПриемник = ПериодыУХ.ПолучитьПодчиненныеПериоды(Объект.УОППриемник.ПериодСценария,Объект.УОППриемник.ПериодСценарияОкончание,Объект.УОППриемник.ПериодСценария.Периодичность).Количество();

		
	КонецЕсли;	
	
	
	Если  КоличествоПериодовИсточник > КоличествоПериодовПриемник Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Период источника длиннее периода приемника. Копирование невозможно'"),,,);		
		Возврат Ложь;
		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОбновитьОтборы()
	
	Если Объект.РежимРаботыОбработки = Перечисления.РежимыКопированияДанныхПоказателей.ПроизвольныеОтборы Тогда
		СводнаяТаблицаУХ.ЗаполнитьДоступныеАналитикиДляОбработкиПереноса(ВыбранныеПоказатели,ОтборыРасширеннойНастройки,Неопределено);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОтборыРасширеннойНастройкиРедактируетсяПриИзменении(Элемент)
	
	Если НЕ Элементы.ОтборыРасширеннойНастройки.ТекущиеДанные.Редактируется Тогда
		Элементы.ОтборыРасширеннойНастройки.ТекущиеДанные.ОтборИсточник = Нстр("ru = '<Без отбора>'");
		Элементы.ОтборыРасширеннойНастройки.ТекущиеДанные.ОтборИсточникаСКД = "";
		Элементы.ОтборыРасширеннойНастройки.ТекущиеДанные.ОтборПриемник = Нстр("ru = '<По значениям источника>'");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьИсточникаПриИзменении(Элемент)
		
	УстановитьОтборыЭлементовФормы();
	ОпределитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериодИсточник(Команда)
	
	ПустаяДата = Дата(1, 1, 1);
	ПериодИсточникС = Объект.ПериодИсточникС;
	ПериодИсточникПо = Объект.ПериодИсточникПо;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
		
	Если ЗначениеЗаполнено(ПериодИсточникС) Тогда
		Диалог.Период.ДатаНачала	 = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ПериодИсточникС, "ДатаНачала");
	Иначе
		Диалог.Период.ДатаНачала	 = ПустаяДата;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодИсточникПо) Тогда
		Диалог.Период.ДатаОкончания	 = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ПериодИсточникПо, "ДатаОкончания");
	Иначе
		Диалог.Период.ДатаНачала	 = ПустаяДата;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьПериодИсточникЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПериодИсточникЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбора) = Тип("СтандартныйПериод") Тогда
		
		ВыбраннаяПериодичность = Объект.ПериодичностьИсточника;
		РезультатДатаНачала = РезультатВыбора.ДатаНачала;
		РезультатДатаОкончания = РезультатВыбора.ДатаОкончания;
		
		Если ЗначениеЗаполнено(РезультатДатаНачала) И ЗначениеЗаполнено(РезультатДатаОкончания) Тогда
			
			ПериодыУХПовтИсп.ПроверитьИнтервалПериодов(РезультатДатаНачала, РезультатДатаОкончания);
			
			Объект.ПериодИсточникС = ОбщегоНазначенияУХ.ПолучитьПериодПоДате(РезультатДатаНачала, ВыбраннаяПериодичность);
			Объект.ПериодИсточникПо = ОбщегоНазначенияУХ.ПолучитьПериодПоДате(РезультатДатаОкончания, ВыбраннаяПериодичность);						
			
			Если Объект.РежимРаботыОбработки = Перечисления.РежимыКопированияДанныхПоказателей.УОП тогда
				Объект.УОПИсточник = ПолучитьУОП(Объект.СценарийИсточник, Объект.ПериодИсточникС, Объект.ПериодИсточникПо);
			КонецЕсли;
			
			Если Объект.ПериодПриемникС.Пустая() тогда
				Объект.ПериодПриемникС = Объект.ПериодИсточникС;
			КонецЕсли;
			
			ОпределитьСдвигПоПериоду();
			
		КонецЕсли;
				
	ИначеЕсли РезультатВыбора <> неопределено тогда
		
		ТекстСообщения = НСтр("ru = 'Неизвестный вариант периода ""%Период%"". Операция отменена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%", Строка(РезультатВыбора));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаВерсия" тогда
		УстановитьОтборыПоСценариюИсточнику();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериодПриемник(Команда)
	
	ПустаяДата = Дата(1, 1, 1);
	ПериодПриемникС = Объект.ПериодПриемникС;
	ПериодПриемникПо = Объект.ПериодПриемникПо;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
		
	Если ЗначениеЗаполнено(ПериодПриемникС) Тогда
		Диалог.Период.ДатаНачала = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ПериодПриемникС, "ДатаНачала");
	Иначе
		Диалог.Период.ДатаНачала = ПустаяДата;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодПриемникПо) Тогда
		Диалог.Период.ДатаОкончания	= ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ПериодПриемникПо, "ДатаОкончания");
	Иначе
		Диалог.Период.ДатаНачала = ПустаяДата;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьПериодПриемникЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПериодПриемникЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбора) = Тип("СтандартныйПериод") Тогда
		
		ВыбраннаяПериодичность = Объект.ПериодичностьПриемника;
		РезультатДатаНачала = РезультатВыбора.ДатаНачала;
		РезультатДатаОкончания = РезультатВыбора.ДатаОкончания;
		
		Если ЗначениеЗаполнено(РезультатДатаНачала) И ЗначениеЗаполнено(РезультатДатаОкончания) Тогда
			
			ПериодыУХПовтИсп.ПроверитьИнтервалПериодов(РезультатДатаНачала, РезультатДатаОкончания);
			
			Объект.ПериодПриемникС = ОбщегоНазначенияУХ.ПолучитьПериодПоДате(РезультатДатаНачала, ВыбраннаяПериодичность);
			Объект.ПериодПриемникПо = ОбщегоНазначенияУХ.ПолучитьПериодПоДате(РезультатДатаОкончания, ВыбраннаяПериодичность);						
			
			Если Объект.РежимРаботыОбработки = Перечисления.РежимыКопированияДанныхПоказателей.УОП тогда
				Объект.УОППриемник = ПолучитьУОП(Объект.СценарийПриемник, Объект.ПериодПриемникС, Объект.ПериодПриемникПо);
			КонецЕсли;
			
		КонецЕсли;
				
	ИначеЕсли РезультатВыбора <> неопределено тогда
		
		ТекстСообщения = НСтр("ru = 'Неизвестный вариант периода ""%Период%"". Операция отменена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%", Строка(РезультатВыбора));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	
	КонецЕсли;
	
КонецПроцедуры
	 	