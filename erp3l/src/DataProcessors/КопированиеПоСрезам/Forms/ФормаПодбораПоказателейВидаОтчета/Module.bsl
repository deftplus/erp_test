
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	
	РежимРаботыОбработки = Параметры.РежимРаботыОбработки;
	Строки.ЗагрузитьЗначения(Параметры.Строки.ВыгрузитьЗначения());
	Колонки.ЗагрузитьЗначения(Параметры.Колонки.ВыгрузитьЗначения());
	ВыбранныеПоказатели.ЗагрузитьЗначения(Параметры.ВыбранныеПоказатели.ВыгрузитьЗначения());
	
	Если ЗначениеЗаполнено(Параметры.Бланк) Тогда	
		 ВидОтчета = Параметры.Бланк.Владелец;
		 Элементы.ВидОтчета.Доступность = Ложь;	 
	КонецЕсли;	
	
	ЗаполнитьДеревоСтрок();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоСтрок()
		
	
	ДеревоНастройкиСервер = Новый ДеревоЗначений;
	ДеревоНастройкиСервер.Колонки.Добавить("СтрокаВыбрана",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1));
	ДеревоНастройкиСервер.Колонки.Добавить("Строка");
		
	ЗапросКолонки = Новый Запрос;
	ЗапросКолонки.Текст= "ВЫБРАТЬ
	                     |	КолонкиОтчетов.Код КАК Код,
	                     |	КолонкиОтчетов.Представление КАК Представление,
	                     |	КолонкиОтчетов.Ссылка КАК Ссылка
	                     |ИЗ
	                     |	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	                     |ГДЕ
	                     |	КолонкиОтчетов.Владелец = &ВидОтчета
	                     |	И КолонкиОтчетов.ПометкаУдаления = ЛОЖЬ
						 |  И Выбор КОГДА &ОграничиаватьСостав ТОГДА КолонкиОтчетов.ССылка В(&ВыбранныеКолонки) ИНАЧЕ ИСТИНА КОНЕЦ 
						 |
	                     |УПОРЯДОЧИТЬ ПО
	                     |	КолонкиОтчетов.ПорядковыйНомер";
	
	ЗапросКолонки.УстановитьПараметр("ВидОтчета",ВидОтчета);
	ЗапросКолонки.УстановитьПараметр("ОграничиаватьСостав",ЛОЖЬ);
	ЗапросКолонки.УстановитьПараметр("ВыбранныеКолонки",Колонки);
	времКолонки = ЗапросКолонки.Выполнить().Выгрузить();
	ЗначениеВРеквизитФормы(времКолонки,"тКолонки");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиОтчетов.Ссылка КАК Ссылка,
	               |	ПоказателиОтчетов.Код КАК ПоказательКод,
	               |	ПоказателиОтчетов.Владелец КАК ВидОтчетаСсылка,
	               |	ПоказателиОтчетов.Владелец.Код КАК ВидОтчета,
	               |	ПоказателиОтчетов.Колонка КАК Колонка,
	               |	ПоказателиОтчетов.Строка КАК Строка
	               |ИЗ
	               |	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	               |ГДЕ
	               |	ПоказателиОтчетов.Ссылка В (&ВыбранныеПоказатели)";
	
	Запрос.УстановитьПараметр("ВыбранныеПоказатели",ВыбранныеПоказатели);	
	текПоказатели = Запрос.Выполнить().Выгрузить();
    текПоказатели.Индексы.Добавить("Строка,Колонка");
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	СтрокиОтчетов.Ссылка КАК Ссылка,
	             |	СтрокиОтчетов.ГруппаРаскрытия КАК ГруппаРаскрытия,
	             |	СтрокиОтчетов.ПорядковыйНомер КАК ПорядковыйНомер
	             |ПОМЕСТИТЬ втМакетСтрок
	             |ИЗ
	             |	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	             |ГДЕ
	             |	СтрокиОтчетов.Владелец = &ВидОтчета
	             |	И СтрокиОтчетов.ПометкаУдаления = ЛОЖЬ
				 |  И Выбор КОГДА &ОграничиаватьСостав ТОГДА СтрокиОтчетов.ССылка В(&ВыбранныеСтроки) ИНАЧЕ ИСТИНА КОНЕЦ
				 |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	КолонкиОтчетов.Ссылка КАК Ссылка,
	             |	КолонкиОтчетов.ПорядковыйНомер КАК ПорядковыйНомер
	             |ПОМЕСТИТЬ втМакетКолонок
	             |ИЗ
	             |	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	             |ГДЕ
	             |	КолонкиОтчетов.Владелец = &ВидОтчета
	             |	И КолонкиОтчетов.ПометкаУдаления = ЛОЖЬ
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ПоказателиОтчетов.Ссылка КАК Ссылка,
	             |	ПоказателиОтчетов.Колонка КАК Колонка,
	             |	ПоказателиОтчетов.Строка КАК Строка
	             |ПОМЕСТИТЬ втПоказатели
	             |ИЗ
	             |	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	             |ГДЕ
	             |	ПоказателиОтчетов.Владелец = &ВидОтчета
	             |	И ПоказателиОтчетов.ПометкаУдаления = ЛОЖЬ
				 |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	втМакетКолонок.Ссылка КАК КолонкаСсылка,
	             |	втМакетКолонок.ПорядковыйНомер КАК КолонкаПорядковыйНомер,
	             |	втМакетСтрок.Ссылка КАК СтрокаСсылка,
	             |	втМакетСтрок.ГруппаРаскрытия КАК ГруппаРаскрытия,
	             |	втМакетСтрок.ПорядковыйНомер КАК СтрокаКолонкаПорядковыйНомер
	             |ПОМЕСТИТЬ втМакет
	             |ИЗ
	             |	втМакетСтрок КАК втМакетСтрок
	             |		ЛЕВОЕ СОЕДИНЕНИЕ втМакетКолонок КАК втМакетКолонок
	             |		ПО (ИСТИНА)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	втМакет.КолонкаСсылка КАК КолонкаСсылка,
	             |	втМакет.КолонкаПорядковыйНомер КАК КолонкаПорядковыйНомер,
	             |	втМакет.СтрокаСсылка КАК СтрокаСсылка,
	             |	втМакет.ГруппаРаскрытия КАК ГруппаРаскрытия,
	             |	втМакет.СтрокаКолонкаПорядковыйНомер КАК СтрокаКолонкаПорядковыйНомер,
	             |	втПоказатели.Ссылка КАК Ссылка
	             |ПОМЕСТИТЬ втМакетСКолонками
	             |ИЗ
	             |	втМакет КАК втМакет
	             |		ЛЕВОЕ СОЕДИНЕНИЕ втПоказатели КАК втПоказатели
	             |		ПО втМакет.СтрокаСсылка = втПоказатели.Строка
	             |			И втМакет.КолонкаСсылка = втПоказатели.Колонка
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	0 КАК СтрокаВыбрана,
	             |	СтрокиОтчетов.Ссылка КАК Строка,
	             |	СтрокиОтчетов.ГруппаРаскрытия КАК ГруппаРаскрытия,
	             |	СтрокиОтчетов.ПорядковыйНомер КАК ПорядковыйНомер,
	             |	СтрокиОтчетов.Родитель КАК Родитель
	             |ИЗ
	             |	втМакетСКолонками КАК втМакетСКолонками
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	             |		ПО втМакетСКолонками.СтрокаСсылка = СтрокиОтчетов.Ссылка
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	СтрокиОтчетов.Ссылка,
	             |	СтрокиОтчетов.ГруппаРаскрытия,
	             |	СтрокиОтчетов.ПорядковыйНомер,
	             |	СтрокиОтчетов.Родитель,
	             |	втМакетСКолонками.КолонкаПорядковыйНомер
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	СтрокиОтчетов.ПорядковыйНомер ИЕРАРХИЯ,
	             |	втМакетСКолонками.КолонкаПорядковыйНомер";

	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	СтруктураИтоговСтрок 	= Новый Структура;
	СтруктураИтоговКолонок 	= Новый Структура;
	
	Для Каждого СтрКолонка Из времКолонки Цикл
		
		Нполе = СхемаЗапроса.ПакетЗапросов[4].Операторы[0].ВыбираемыеПоля.Добавить("ВЫБОР КОГДА ВтМакет.КолонкаСсылка = &Парам_"+СокрЛП(СтрКолонка.Код)+
		" ТОГДА 1 КОНЕЦ  ");
		Запрос.УстановитьПараметр("Парам_"+СокрЛП(СтрКолонка.Код),СтрКолонка.Ссылка);
		СхемаЗапроса.ПакетЗапросов[4].Колонки[СхемаЗапроса.ПакетЗапросов[4].Колонки.Количество()-1].Псевдоним = СокрЛП(СтрКолонка.Код);
		
		Нполе = СхемаЗапроса.ПакетЗапросов[5].Операторы[0].ВыбираемыеПоля.Добавить("МАКСИМУМ("+СокрЛП(СтрКолонка.Код)+") ");
		СхемаЗапроса.ПакетЗапросов[5].Колонки[СхемаЗапроса.ПакетЗапросов[5].Колонки.Количество()-1].Псевдоним = СокрЛП(СтрКолонка.Код);
		
		ДеревоНастройкиСервер.Колонки.Добавить(СокрЛП(СтрКолонка.Код),ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1));	
		
		СтруктураИтоговСтрок.Вставить(СокрЛП(СтрКолонка.Код),0);
		
	КонецЦикла;	
	
	Запрос.Текст =  СхемаЗапроса.ПолучитьТекстЗапроса();	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	Запрос.УстановитьПараметр("ОграничиаватьСостав",Ложь);
	Запрос.УстановитьПараметр("ВыбранныеСтроки",Строки);
		
	Результат=Запрос.Выполнить().Выбрать();
	
	ДеревоНастройкиСервер_Строки = ДеревоНастройкиСервер.Строки.Добавить();
	ДеревоНастройкиСервер_Строки.Строка = Нстр("ru = 'Выбранные строки'");
	ДеревоНастройкиСервер_Строки.СтрокаВыбрана = 0;
	
	Для Каждого Кол Из времКолонки Цикл
		ДеревоНастройкиСервер_Строки[СокрЛП(Кол.Код)] = 0;
	КонецЦикла;
	
	ВыводимаяСтрокаОтчета=Справочники.СтрокиОтчетов.ПустаяСсылка();
	
	СоответствиеСтрок		= Новый Соответствие;
	СоответствиеРодителей	= Новый Соответствие;

	СчетчикКолонок  = времКолонки.Количество();
		
	Пока Результат.Следующий() Цикл
		
		Если Результат.Строка<>ВыводимаяСтрокаОтчета Тогда
			
			ТекущаяСтрокаДерева=СоответствиеСтрок[Результат.Строка];
			
			Если ТекущаяСтрокаДерева=Неопределено Тогда
				
				Если Результат.Родитель=Справочники.СтрокиОтчетов.ПустаяСсылка() Тогда
					
					ТекущаяСтрокаДерева=ДеревоНастройкиСервер_Строки.Строки.Добавить();
					
				Иначе
					
					СтрокаРодитель=СоответствиеРодителей[Результат.Родитель];
					
					Если СтрокаРодитель=Неопределено Тогда							
						СтрокаРодитель=ДеревоНастройкиСервер.Строки.Найти(Результат.Родитель,"Строка",Истина);
						СоответствиеРодителей.Вставить(Результат.Родитель,СтрокаРодитель);		
					КонецЕсли;
					
					ТекущаяСтрокаДерева=СтрокаРодитель.Строки.Добавить();
					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ТекущаяСтрокаДерева,Результат);
				СоответствиеСтрок.Вставить(Результат.Строка,ТекущаяСтрокаДерева);	
				
				Для Каждого Кол Из времКолонки Цикл
					СтрокаПоказатель =   текПоказатели.НайтиСтроки(Новый Структура("Строка,Колонка",ТекущаяСтрокаДерева.Строка,Кол.Ссылка));
					Если СтрокаПоказатель.Количество() = 1 Тогда
						Код_Колонки = СокрЛП(Кол.Код);
						ТекущаяСтрокаДерева[Код_Колонки] = 1;
						СтруктураИтоговСтрок.Вставить(Код_Колонки,СтруктураИтоговСтрок[Код_Колонки]+1);
					Иначе
						ТекущаяСтрокаДерева[СокрЛП(Кол.Код)] = 0;
					КонецЕсли;
				КонецЦикла;	
				
			КонецЕсли;
			
			ВыводимаяСтрокаОтчета=Результат.Строка;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ВсегоСтрок 	= СоответствиеСтрок.Количество();
	
	УстановитьФлагиИтоговыхЯчеек(СтруктураИтоговСтрок,ВсегоСтрок,ДеревоНастройкиСервер);
	
	РеквизитыКДобавлению=Новый Массив;
	РеквизитыКУдалению=Новый Массив;
	
	РеквизитыКУдалению=Новый Массив;
   	Для Каждого Реквизит Из ПолучитьРеквизиты("ДеревоСтрок") Цикл
		РеквизитыКУдалению.Добавить(Реквизит.Путь + "." + Реквизит.Имя);
	КонецЦикла; 
	
	Для Каждого Колонка ИЗ ДеревоНастройкиСервер.Колонки Цикл	
		МассивДоступныхТипов = Новый Массив;                                                 
		РеквизитыКДобавлению.Добавить(Новый РеквизитФормы(Колонка.Имя,
		Новый ОписаниеТипов(Колонка.ТипЗначения.Типы()),
		"ДеревоСтрок",
		Колонка.Заголовок,
		Ложь));	
	КонецЦикла;
	
	ИзменитьРеквизиты(РеквизитыКДобавлению,РеквизитыКУдалению);
	
	ЗначениеВРеквизитФормы(ДеревоНастройкиСервер,"ДеревоСтрок");
	
	УдаляемыеЭлементы = Новый Массив;
	Для Каждого Эл Из  Элементы.ДеревоСтрок.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(Эл);
	КонецЦикла;
	
	Для Каждого уЭлемент Из УдаляемыеЭлементы Цикл
		ЭтаФорма.Элементы.Удалить(уЭлемент);
	КонецЦикла;	                                                                                            
	
	Для Каждого Колонка ИЗ ДеревоНастройкиСервер.Колонки Цикл	
		
		ЭтаФорма.Элементы.Добавить(Колонка.Имя,Тип("ПолеФормы"),ЭтаФорма.Элементы.ДеревоСтрок);	
		ЭтаФорма.Элементы[Колонка.Имя].ПутьКДанным		= "ДеревоСтрок."+Колонка.Имя;
		Если Колонка.Имя = "Строка" Тогда
			ЭтаФорма.Элементы[Колонка.Имя].Вид				= ВидПоляФормы.ПолеВвода;						
			ЭтаФорма.Элементы[Колонка.Имя].ВыбиратьТип		= Ложь;
			ЭтаФорма.Элементы[Колонка.Имя].КнопкаВыбора		= Ложь;
			ЭтаФорма.Элементы[Колонка.Имя].КнопкаОчистки	= Ложь;		                                                                                                                 
		Иначе
			ЭтаФорма.Элементы[Колонка.Имя].Вид				= ВидПоляФормы.ПолеФлажка;
			ЭтаФорма.Элементы[Колонка.Имя].ТриСостояния		= Истина;
			ЭтаФорма.Элементы[Колонка.Имя].ГоризонтальноеПоложение  = ГоризонтальноеПоложениеЭлемента.Центр;
		КонецЕсли;
		
		Если Колонка.Имя = "СтрокаВыбрана" Тогда
			ЭтаФорма.Элементы[Колонка.Имя].Заголовок = " ";
			ЭтаФорма.Элементы[Колонка.Имя].ЦветФона = Новый Цвет(242,242,242) ;
		КонецЕсли;
		
	КонецЦикла;
	
	УсловноеОформление.Элементы.Очистить();
	
	НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСтрок.Строка");
	ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Нстр("ru = 'Выбранные строки'");
	
	НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
	НовоеПоле.Использование = Истина;
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(СокрЛП("Строка"));
		
	Для Каждого Кол Из времКолонки Цикл	
		НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
		НовоеПоле.Использование = Истина;
		НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(СокрЛП(Кол.Код));
	КонецЦикла;
	
	НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",Новый Цвет(242,242,242));

	НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСтрок.Строка");
	ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение = Нстр("ru = 'Выбранные строки'");
			
	Для Каждого Кол Из времКолонки Цикл	
		НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
		НовоеПоле.Использование = Истина;
		НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(СокрЛП(Кол.Код));
	КонецЦикла;
	
	НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255,250,217));
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОтчетаПриИзменении(Элемент)
	
	ЗаполнитьДеревоСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтрокПриИзменении(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя = "СтрокаВыбрана" Тогда	
		тСтрока = ДеревоСтрок.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);	
		Если тСтрока.СтрокаВыбрана = 2 Тогда 
		     тСтрока.СтрокаВыбрана = 0;
		КонецЕсли;	 
		
		Если Элемент.ТекущиеДанные.Строка = Нстр("ru = 'Выбранные строки'") Тогда //Устанавливаем или снимаем все флаги
			 ОбойтиВсеСтрокиРекурсивно(тСтрока,Элемент.ТекущиеДанные.СтрокаВыбрана);
		Иначе	
			 ОбойтиСтрокиРекурсивно(тСтрока,Элемент.ТекущиеДанные.СтрокаВыбрана);
			 ПроверитьМассивФлаговКолонки(тСтрока, тСтрока.СтрокаВыбрана);
		КонецЕсли;	
			
	Иначе	
		тСтрока = ДеревоСтрок.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		Если тСтрока[Элемент.ТекущийЭлемент.Имя] = 2 Тогда 
		     тСтрока[Элемент.ТекущийЭлемент.Имя] = 0;
		КонецЕсли;	
					
		Если Элемент.ТекущиеДанные.Строка = Нстр("ru = 'Выбранные строки'") Тогда 
			ОбойтиСтрокиРекурсивно(тСтрока,Элемент.ТекущиеДанные[Элемент.ТекущийЭлемент.Имя],Элемент.ТекущийЭлемент.Имя);
			ПроверитьМассивФлаговСтроки(тСтрока[Элемент.ТекущийЭлемент.Имя]);		
		Иначе	
			ОбойтиСтрокиРекурсивно(тСтрока,Элемент.ТекущиеДанные[Элемент.ТекущийЭлемент.Имя],Элемент.ТекущийЭлемент.Имя);	
			ПроверитьМассивФлаговКолонокЯчейки(тСтрока,Элемент.ТекущийЭлемент.Имя,тСтрока[Элемент.ТекущийЭлемент.Имя]);
			тСтрока = ДеревоСтрок.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
			ПроверитьМассивФлаговСтрокЯчейки(тСтрока,тСтрока[Элемент.ТекущийЭлемент.Имя])		
		КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтрокПередНачаломИзменения(Элемент, Отказ)

	Если Элемент.ТекущийЭлемент.Имя = "СтрокаВыбрана" Тогда
		 Возврат;
	КонецЕсли;	
	
	Если Элемент.ТекущийЭлемент.Имя = "Строка" Тогда
		 Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбойтиСтрокиРекурсивно(тСтрока,Флаг,Колонка=Неопределено)
		
	Если Колонка=Неопределено Тогда
		
		Для Каждого Кол Из тКолонки Цикл	
			ПерваяСтрока = ДеревоСтрок.ПолучитьЭлементы()[0];
			тСтрока[СокрЛП(Кол.Код)] = Флаг;				
		КонецЦикла;	
		
		тСтрока["СтрокаВыбрана"] = Флаг;	
	Иначе			
		тСтрока[Колонка] = Флаг;		
	КонецЕсли;	

		
	Для Каждого тЭлемент Из тСтрока.ПолучитьЭлементы() Цикл	
		Если Колонка=Неопределено Тогда			
			ОбойтиСтрокиРекурсивно(тЭлемент,Флаг);			
		Иначе						
			ОбойтиСтрокиРекурсивно(тЭлемент,Флаг,Колонка);		
		КонецЕсли;		
	КонецЦикла;	
		
КонецПроцедуры	

&НаКлиенте
Процедура ОбойтиВсеСтрокиРекурсивно(тСтрока,Флаг)
	
	Для Каждого Кол Из тКолонки Цикл	
		ПерваяСтрока = ДеревоСтрок.ПолучитьЭлементы()[0];
		тСтрока[СокрЛП(Кол.Код)] = Флаг;		
	КонецЦикла;	
	
	тСтрока["СтрокаВыбрана"] = Флаг;
	Для Каждого тЭлемент Из тСтрока.ПолучитьЭлементы() Цикл				
		ОбойтиВсеСтрокиРекурсивно(тЭлемент,Флаг);			
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура Применить(Команда)
	
	Закрыть(СформироватьПараметры());
	
КонецПроцедуры

&НаСервере
Функция СформироватьПараметры()
	
	СтруктураОтвета = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиОтчетов.Ссылка КАК Ссылка,
	               |	ПоказателиОтчетов.Код КАК ПоказательКод,
	               |	ПоказателиОтчетов.Владелец КАК ВидОтчетаСсылка,
	               |	ПоказателиОтчетов.Владелец.Код КАК ВидОтчета,
	               |	ПоказателиОтчетов.Колонка КАК Колонка,
	               |	ПоказателиОтчетов.Строка КАК Строка
	               |ИЗ
	               |	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	               |ГДЕ
	               |	ПоказателиОтчетов.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец",ВидОтчета);	
	текПоказатели = Запрос.Выполнить().Выгрузить();
	
	тДеревоВыбранныхСтрок = РеквизитФормыВзначение("ДеревоСтрок");
	тзКолонки              = РеквизитФормыВзначение("тКолонки");

	ВыбранныеПоказатели.Очистить();

	ЗаполнитьВыбранныеПоказателиРекурсивно(тДеревоВыбранныхСтрок.Строки[0],тзКолонки,текПоказатели,ВыбранныеПоказатели);
	
	СтруктураОтвета.Вставить("ВыбранныеПоказатели",ВыбранныеПоказатели);
	
	Возврат СтруктураОтвета;

КонецФункции	

&НаСервере
Процедура ЗаполнитьВыбранныеПоказателиРекурсивно(тУЗел,тКолонки,текПоказатели,ВыбранныеПоказатели)
	
	Для Каждого Стр Из тУЗел.Строки Цикл	
		
		Для Каждого Кол Из тКолонки Цикл
			Если Стр[СокрЛП(Кол.Код)] =1  Тогда
				
				СтрокаПоказатель =   текПоказатели.НайтиСтроки(Новый Структура("Строка,Колонка",Стр.Строка,Кол.Ссылка));
				
				Если СтрокаПоказатель.Количество() = 1 Тогда
					ВыбранныеПоказатели.Добавить(СтрокаПоказатель[0].Ссылка);
				КонецЕсли;
				
			КонецЕсли;			
		КонецЦикла;	
		
		ЗаполнитьВыбранныеПоказателиРекурсивно(Стр,тКолонки,текПоказатели,ВыбранныеПоказатели);
		
	КонецЦикла;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМассивФлаговКолонки(тСтрока,тСостояние)
		
	Для Каждого Кол Из тКолонки Цикл		
		тСтрока = ДеревоСтрок.ПолучитьЭлементы()[0];
		СостояниеПроверки = тСостояние;
		ПроверитьВсеСтрокиРекурсивно(тСтрока,СокрЛП(Кол.Код),тСостояние,СостояниеПроверки);
	    тСтрока[СокрЛП(Кол.Код)] = СостояниеПроверки;
	КонецЦикла;	
		
КонецПроцедуры	
		
&НаКлиенте
Процедура ПроверитьВсеСтрокиРекурсивно(тСтрока,Кол,тСостояние,СостояниеПроверки)
		
	Для Каждого тЭлемент Из тСтрока.ПолучитьЭлементы() Цикл				
		
		Если тЭлемент[Кол]<>тСостояние Тогда
			 СостояниеПроверки = 2;
			 Возврат;
		КонецЕсли;
		ПроверитьВсеСтрокиРекурсивно(тЭлемент,Кол,тСостояние,СостояниеПроверки);			
	КонецЦикла;		
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМассивФлаговСтроки(тСостояние)
	
	тСтрока = ДеревоСтрок.ПолучитьЭлементы()[0];
	СостояниеПроверки = тСостояние;
	ПроверитьВсеКолонкиРекурсивно(тСтрока,тСостояние);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьВсеКолонкиРекурсивно(тСтрока,тСостояние)
	
	Для Каждого тЭлемент Из тСтрока.ПолучитьЭлементы() Цикл				
		
		СостояниеПроверки =  тСостояние;
		
		Для Каждого Кол Из тКолонки Цикл  
			Если тЭлемент[СокрЛП(Кол.Код)]<>тСостояние Тогда
				СостояниеПроверки = 2;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		тЭлемент.СтрокаВыбрана = СостояниеПроверки;
		
		ПроверитьВсеКолонкиРекурсивно(тЭлемент,тСостояние);			
	КонецЦикла;		
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМассивФлаговКолонокЯчейки(тСтрока,тКолонка,тСостояние)
			
	//Проверяем флаг итогов текущей строки  по колонкам
	СостояниеПроверки =  тСостояние;
	Для Каждого Кол Из тКолонки Цикл  
			Если тСтрока[СокрЛП(Кол.Код)]<>тСостояние Тогда
				СостояниеПроверки = 2;
				Прервать;
			КонецЕсли;
	КонецЦикла;
   	тСтрока.СтрокаВыбрана = СостояниеПроверки;
			
	//Проверяем флаг итоговых колонок по строкам
	СостояниеПроверки = тСостояние;
	тСтрока = ДеревоСтрок.ПолучитьЭлементы()[0];
	ПроверитьВсеСтрокиРекурсивно(тСтрока,тКолонка,тСостояние,СостояниеПроверки);	
	тСтрока[тКолонка] = СостояниеПроверки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМассивФлаговСтрокЯчейки(тСтрока,тСостояние)
	
	//Проверяем флаг итоговых строк по колонкам
	СостояниеПроверки =  тСостояние;

	Для Каждого тЭлемент Из тСтрока.ПолучитьЭлементы() Цикл				
		
		Для Каждого Кол Из тКолонки Цикл  
			Если тСтрока[СокрЛП(Кол.Код)]<>тСостояние Тогда
				СостояниеПроверки = 2;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		тЭлемент.СтрокаВыбрана = СостояниеПроверки;
		
		ПроверитьМассивФлаговСтрокЯчейки(тЭлемент,тСостояние);			
		
	КонецЦикла;		
			
КонецПроцедуры

&НаСервере
Процедура УстановитьФлагиИтоговыхЯчеек(СтруктураИтоговСтрок,ВсегоСтрок,ДеревоНастройкиСервер)
		
	ФлВсеЯчейки = Истина;
	//Проверяем флаги итоговых колонок 
	ПерваяСтрока = ДеревоНастройкиСервер.Строки[0];
	Для Каждого Кол Из СтруктураИтоговСтрок Цикл  
		Если Кол.Значение  = ВсегоСтрок Тогда
			ПерваяСтрока[Кол.Ключ] = 1;
		ИначеЕсли Кол.Значение   = 0  Тогда	
			ПерваяСтрока[Кол.Ключ] = 0;
			ФлВсеЯчейки = Ложь;
		Иначе	
			ПерваяСтрока[Кол.Ключ] = 2;
			ФлВсеЯчейки = Ложь;
		КонецЕсли;
	КонецЦикла;

	Если ФлВсеЯчейки И СтруктураИтоговСтрок.Количество()>0 Тогда
		 ПерваяСтрока.СтрокаВыбрана = 1;
	КонецЕсли;	
	
	//Проверяем флаг итоговых колонок по строкам	
	ВсегоКолонок      =  тКолонки.Количество();
	ПроверитьВсеСтрокиРекурсивноСервер(ПерваяСтрока,ВсегоКолонок);	
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВсеСтрокиРекурсивноСервер(тСтрока,ВсегоКолонок)
		
	Для Каждого тЭлемент Из тСтрока.Строки Цикл				
		
		СуммаКолонок = 0;
		Для Каждого Кол Из тКолонки Цикл  
			СуммаКолонок = СуммаКолонок+тЭлемент[СокрЛП(Кол.Код)];
		КонецЦикла;
        Если СуммаКолонок  = ВсегоКолонок Тогда
			тЭлемент.СтрокаВыбрана = 1;
		ИначеЕсли СуммаКолонок   = 0  Тогда	
			тЭлемент.СтрокаВыбрана = 0;
		Иначе	
			тЭлемент.СтрокаВыбрана  = 2;
		КонецЕсли;

		ПроверитьВсеСтрокиРекурсивноСервер(тЭлемент,ВсегоКолонок);			
		
	КонецЦикла;		
		
КонецПроцедуры
