#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

Процедура СформироватьКорректировки(Отказ = Ложь) Экспорт

	Построитель = Новый ПостроительЗапроса(ПолучитьТекстЗапросаКорректировок());
	
	ВозможныеОтборы = Новый Структура("Организация,Сценарий,Контрагент,ДоговорКонтрагента,ПериодНачисления");
	Для каждого ТекОтбор Из ВозможныеОтборы Цикл
		Если (ТекОтбор.Ключ = "ПериодНачисления") И ЗначениеЗаполнено(ЭтотОбъект.ПериодНачисления) Тогда
			
			текОтбор = Построитель.Отбор.Добавить("Дата");			
			текОтбор.ВидСравнения	= ВидСравнения.ИнтервалВключаяГраницы;
			текОтбор.ЗначениеС		= ЭтотОбъект.ПериодНачисления.ДатаНачала;
			текОтбор.ЗначениеПо		= ЭтотОбъект.ПериодНачисления.ДатаОкончания;
			текОтбор.Использование 	= Истина;
			
		ИначеЕсли ЗначениеЗаполнено(ЭтотОбъект[ТекОтбор.Ключ]) Тогда
			Построитель.Отбор.Добавить(ТекОтбор.Ключ).Установить(ЭтотОбъект[ТекОтбор.Ключ]);
		КонецЕсли;		 
	КонецЦикла;
	
	Выборка = Построитель.ПолучитьЗапрос().Выполнить().Выбрать();
	КолонкиСторно = Новый Структура("Значение,СуммаВФункциональнойВалюте,СуммаВВалютеОтчетности,КоличествоДт,КоличествоКт,ЗначениеВалютаДт,ЗначениеВалютаКт");
	
	КэшУП = Неопределено;
 
	Пока Выборка.Следующий() Цикл
		
		Периодичность = Выборка.ДокументПлан.Сценарий.Периодичность;
		Периодичность = ?(ЗначениеЗаполнено(Периодичность), Периодичность, Перечисления.Периодичность.Год);
		
		ЗначенияУП = ЗначенияУП(Выборка.ДокументПлан.Организация, КэшУП); 
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("Период", 				Выборка.ДатаТК);
		Реквизиты.Вставить("Ссылка", 				Выборка.ДокументПлан);
		Реквизиты.Вставить("Организация", 			Выборка.ДокументПлан.Организация);
		Реквизиты.Вставить("Сценарий", 				Выборка.ДокументПлан.Сценарий);
		Реквизиты.Вставить("ФункциональнаяВалюта", 	ЗначенияУП.ФункциональнаяВалюта);		
		Реквизиты.Вставить("ВидОперации", 			Справочники.ВидыОпераций.СторноНачисленияДоходовРасходовМСФО);
		Реквизиты.Вставить("ПланСчетовМСФО", 		ЗначенияУП.ПланСчетовМСФО);
		Реквизиты.Вставить("ПериодСценария", 		ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(Выборка.ДатаТК, Периодичность, 0));
		Реквизиты.Вставить("ФормироватьПроводкиМСФО", ЗначенияУП.ФормироватьПроводкиМСФО);
		
		Таб = Выборка.ДокументПлан.ДвиженияНачислений.Выгрузить();
		
		Отказ = Ложь;
		ДополнительныеСвойства = Новый Структура;
		ПроведениеСерверУХ.ИнициализироватьДополнительныеСвойстваДляПроведения(Выборка.ДокументПлан, ДополнительныеСвойства);
		ТаблицаПроводок = Документы.НачислениеОперацийМСФО.ПодготовитьПараметрыПроведения(ДополнительныеСвойства, Отказ, Ложь).ТаблицаПроводок;
		
		Для каждого СтрокаТаб Из ТаблицаПроводок Цикл
			
			Для каждого КолонкаТаб Из КолонкиСторно Цикл
				
				ИмяКолонки = КолонкаТаб.Ключ;
				Если ТаблицаПроводок.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТаб[ИмяКолонки]) Тогда
					СтрокаТаб[ИмяКолонки] = - СтрокаТаб[ИмяКолонки];	
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если Реквизиты.ФормироватьПроводкиМСФО Тогда
			
			СтруктураЗаполненияРучнойОперации = ПреобразоватьРеквизиты(Реквизиты, ТаблицаПроводок);
			ПреобразованнаяТаблицаПроводок = ПреобразоватьТаблицуПроводок(ТаблицаПроводок);
			СсылкаТК = МСФОВызовСервераУХ.СформироватьОперациюМСФО(ПреобразованнаяТаблицаПроводок, СтруктураЗаполненияРучнойОперации, Отказ);
			
		ИначеЕсли ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
			
			МодульТК = ОбщегоНазначения.ОбщийМодуль("ТрансформационныеКорректировкиУХ");
			СсылкаТК = МодульТК.СформироватьКорректировку(Реквизиты, Отказ, ТаблицаПроводок);
			
		КонецЕсли;
		
		Если Отказ Или Не ЗначениеЗаполнено(СсылкаТК) Тогда
			Продолжить;
		КонецЕсли; 
		
		нз = РегистрыСведений.СопоставлениеПланФактОперацийНачисленияМСФО.СоздатьНаборЗаписей();
		
		нз.Отбор.Организация.Установить(Реквизиты.Организация);
		нз.Отбор.ДокументПлан.Установить(Реквизиты.Ссылка);
		
		нз.Прочитать();
		
		Для каждого СтрокаТаб Из нз Цикл
		    СтрокаТаб.Корректировка = СсылкаТК; 	
		КонецЦикла;
		
		нз.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначенияУП(Организация, КэшУП)

	Если КэшУП = Неопределено Тогда		
		КэшУП = Новый Соответствие;
	КонецЕсли;
	
	ЗначенияКэша = КэшУП.Получить(Организация);
	Если ЗначенияКэша <> Неопределено Тогда
		Возврат ЗначенияКэша;
	КонецЕсли;
	
	ИменаРеквизитовУП = "ФункциональнаяВалюта, ФормироватьПроводкиМСФО, ПланСчетовМСФО";
	РеквизитыУП = МСФОВызовСервераУХ.ПутиРеквизитовУП(ИменаРеквизитовУП);
	
	Таб = МСФОВызовСервераУХ.ЗначенияУП(РеквизитыУП, Организация, 
				ЭтотОбъект.ПериодНачисления.ДатаОкончания, ЭтотОбъект.Сценарий);
			
	ЗначенияКэша = Новый Структура(ИменаРеквизитовУП, Истина);
	Если Таб.Количество() Тогда
		ЗаполнитьЗначенияСвойств(ЗначенияКэша, Таб[0]);		
	Иначе 
		
		ЗначенияКэша.Вставить("ФункциональнаяВалюта", Константы.ВалютаРегламентированногоУчета.Получить());
		ЗначенияКэша.Вставить("ПланСчетовМСФО", МСФОВызовСервераУХ.ПланСчетовУП(Неопределено));
		
	КонецЕсли;	                                       
	
	КэшУП.Вставить(Организация, ЗначенияКэша);
	Возврат ЗначенияКэша;
		
КонецФункции

#КонецОбласти	

#Область СлужебныеПроцедурыИФункции

Функция ПреобразоватьРеквизиты(Реквизиты, ТаблицаПроводок)
	
	СтруктураЗаполненияРучнойОперации = Новый Структура;
	СтруктураЗаполненияРучнойОперации.Вставить("Дата", Реквизиты.Период);
	СтруктураЗаполненияРучнойОперации.Вставить("СпособЗаполнения", МСФОКлиентСерверУХ.СпособЗаполненияСторно());
	СтруктураЗаполненияРучнойОперации.Вставить("СторнируемыйДокумент", Реквизиты.Ссылка);
	СтруктураЗаполненияРучнойОперации.Вставить("Организация", Реквизиты.Организация);
	СтруктураЗаполненияРучнойОперации.Вставить("Сценарий", Реквизиты.Сценарий);
	СтруктураЗаполненияРучнойОперации.Вставить("СуммаОперации",ТаблицаПроводок.Итог("СуммаВФункциональнойВалюте"));
	Возврат СтруктураЗаполненияРучнойОперации;
	
КонецФункции

Функция ПреобразоватьТаблицуПроводок(ТаблицаПроводок)
	
	ТаблицаПроводокРучнойОперации = ТаблицаПроводок.Скопировать();
	КолонкиТаблицы = ТаблицаПроводокРучнойОперации.Колонки;
	КолонкиТаблицы.СуммаВФункциональнойВалюте.Имя = "СуммаВВалютеУчета";
	//КолонкиТаблицы.ЗначениеВалютаДт.Имя = "СуммаВВалютеДт";
	//КолонкиТаблицы.ЗначениеВалютаКт.Имя = "СуммаВВалютеКт";
	
	КолонкиТаблицы.СчетДт.Имя = "СчетДтСчетаБД";
	КолонкиТаблицы.СчетКт.Имя = "СчетКтСчетаБД";
	
	КолонкиТаблицы.Добавить("СчетДт", Новый ОписаниеТипов("ПланСчетовСсылка.МСФО"));
	КолонкиТаблицы.Добавить("СчетКт", Новый ОписаниеТипов("ПланСчетовСсылка.МСФО"));
	
	Для Каждого ТекСтрокаТаблицы Из ТаблицаПроводокРучнойОперации Цикл
		ТекСтрокаТаблицы.СчетДт = ТекСтрокаТаблицы.СчетДтСчетаБД.СчетСсылка;
		ТекСтрокаТаблицы.СчетКт = ТекСтрокаТаблицы.СчетКтСчетаБД.СчетСсылка;
	КонецЦикла;
	
	Возврат ТаблицаПроводокРучнойОперации;
	
КонецФункции

Функция ПолучитьТекстЗапросаКорректировок()
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	тк.ДокументПлан КАК ДокументПлан,
		|	тк.СуммаФакт КАК СуммаФакт,
		|	тк.ДатаТК КАК ДатаТК,
		|	тк.Корректировка КАК Корректировка
		|ИЗ
		|	(ВЫБРАТЬ
		|		т.ДокументПлан КАК ДокументПлан,
		|		СУММА(т.СуммаФакт) КАК СуммаФакт,
		|		МАКСИМУМ(т.Корректировка) КАК Корректировка,
		|		МИНИМУМ(т.ДокументФакт.Дата) КАК ДатаТК
		|	ИЗ
		|		РегистрСведений.СопоставлениеПланФактОперацийНачисленияМСФО КАК т
		|	{ГДЕ
		|		т.Организация.*,
		|		т.ДокументПлан.Сценарий.* КАК Сценарий,
		|		т.ДокументПлан.Дата КАК Дата,
		|		т.ДокументПлан.Контрагент.* КАК Контрагент,
		|		т.ДокументПлан.ДоговорКонтрагента.* КАК ДоговорКонтрагента}
		|	
		|	СГРУППИРОВАТЬ ПО
		|		т.ДокументПлан) КАК тк
		|ГДЕ
		|	&УсловиеПоТипуКонфигурации
		|	И (тк.ДокументПлан.Сумма <> тк.СуммаФакт
		|			ИЛИ тк.Корректировка В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Документ.ТрансформационнаяКорректировка.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.ОперацияМСФО.ПустаяСсылка)))";
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		ТекстУсловия =
			"	ВЫБОР КОГДА тк.ДокументПлан ССЫЛКА Документ.НачислениеОперацийМСФО ТОГДА 
			|		тк.СуммаФакт = тк.ДокументПлан.Сумма
			|	ИНАЧЕ тк.СуммаФакт = тк.ДокументПлан.СуммаОрганизации КОНЕЦ";
	Иначе
		ТекстУсловия = "тк.СуммаФакт = тк.ДокументПлан.Сумма";
	КонецЕсли;
	
	Возврат СтрЗаменить(ТекстЗапроса, "&УсловиеПоТипуКонфигурации", ТекстУсловия);
КонецФункции
	
#КонецОбласти

#КонецЕсли	