#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Элементы.ГруппаИспользоватьХарактеристикиНоменклатуры.Видимость = 
		НЕ ОбщегоНазначения.ПодсистемаСуществует("ПереопределяемыеОбъектыУП");//ЭтоУХ()
	Элементы.ПериодичностьЦентрализованныхЗакупок.СписокВыбора.ЗагрузитьЗначения(
		ПолучитьМассивПериодовЗакупок(НаборКонстант.ПериодичностьБюджетирования));
	Элементы.НастроитьВидыОперацийПоступленияПоВидамНоменклатуры.Видимость = 
		НЕ ОбщегоНазначения.ПодсистемаСуществует("ПереопределяемыеОбъектыУП");//ЭтоУХ()
	УстановитьОформлениеЭлементовФормы();
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ТекущийОбъект.РазрешитьДоступВнешнихПоставщиков Тогда
		Результат = АккредитацияПоставщиковУХ.ПолучитьСаморегистрациюПоставщика();
		Если НЕ Результат.Успех Тогда
			ВызватьИсключение Результат.ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьОформлениеЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОбновитьИнтерфейс();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы


&НаКлиенте
Процедура ОбработатьПриИзмененииБезОбновленияИнтерфейса(Элемент)
	// Запретим выбирать периодичности, отличные от Месяца.
	ПериодичностьМесяц = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц");
	Если НаборКонстант.ПериодичностьЦентрализованныхЗакупок <> ПериодичностьМесяц Тогда
		ТекстСообщения = НСтр("ru = 'В текущем релизе конфигурации поддерживается только месячная периодичность годового плана'");
		НаборКонстант.ПериодичностьЦентрализованныхЗакупок = ПериодичностьМесяц;
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	Иначе
		// Проверка пройдена.
	КонецЕсли;
	ПриИзмененииРеквизитаСервер(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПриИзмененииИспользоватьЦентрализованноеУправлениеЗакупками(Элемент)
	ОбработатьПриИзмененииСОбновлениемИнтерфейса(Элемент);
	УстановитьЗначенияПоУмолчанию();
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьПриИзмененииСОбновлениемИнтерфейса(Элемент)
	ОбработатьПриИзмененииБезОбновленияИнтерфейса(Элемент);
	ОбновитьИнтерфейс = Истина;
	ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьДоступВнешнихПоставщиковПриИзменении(Элемент)
	Если НаборКонстант.РазрешитьДоступВнешнихПоставщиков Тогда
		ТекстВопроса =
			НСтр("ru = 'Разрешить доступ внешним пользователям?
			           |
			           |При входе в программу список выбора пользователей станет пустым
			           |(реквизит ""Показывать в списке выбора"" в карточках всех
			           | пользователей будет очищен и скрыт).'");
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"РазрешитьДоступВнешнихПоставщиковПриИзмененииЗавершение",
				ЭтотОбъект,
				Элемент),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
	Иначе
		ТекстВопроса =
			НСтр("ru = 'Запретить доступ внешним пользователям?
			           |
			           |Реквизит ""Вход в программу разрешен"" будет
			           |очищен в карточках всех внешних пользователей.'");
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"РазрешитьДоступВнешнихПоставщиковПриИзмененииЗавершение",
				ЭтотОбъект,
				Элемент),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура РазделятьНоменклатуруПоКатегорийнымМенеджерамПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РазделятьНоменклатуруПоКатегорийнымМенеджерамПриИзмененииЗавершение",
		ЭтотОбъект,	Элемент);
	
	Если НаборКонстант.РазделятьНоменклатуруПоКатегорийнымМенеджерам Тогда
		ТекстВопроса =
			НСтр("ru = 'Разрешить разделение номенклатуры по товарным категориям?
			           |
			           |В обработке ""Формирование СПЗ"" будут отображаться только потребности, 
			           |соответствующие категорийной матрице пользователя.'");
	Иначе
		ТекстВопроса =
			НСтр("ru = 'Запретить разделение номенклатуры по товарным категориям?
			           |
			           |В обработке ""Формирование СПЗ"" будут отображаться все потребности.'");
	КонецЕсли;
		
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьХарактеристикиНоменклатурыПриИзменении(Элемент)
	ПриИзмененииРеквизитаСервер(Элемент.Имя);
	УстановитьОформлениеЭлементовФормы();
	ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПроцентГодовогоОбъемаЗакупокТолькоСубъектыМСППриИзменении(Элемент)
	ПриИзмененииРеквизитаСервер(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПроцентГодовогоОбъемаЗакупокСУчастиемСубъектовМСППриИзменении(Элемент)
	ПриИзмененииРеквизитаСервер(Элемент.Имя);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы


&НаКлиенте
Процедура ОткрытьНоменклатуруСОсобымПорядкомЗакупки(Команда)
	
	Если УровеньКонтроляПравилНоменклатурыИзменен(НаборКонстант.УровеньКонтроляПравилНоменклатуры) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Для выполнения действия необходимо предварительно записать текущую форму!'"));
		Возврат;		
	
	КонецЕсли; 
	
	ОткрытьФорму("РегистрСведений.НоменклатураСОсобымПорядкомЗакупки.ФормаСписка",, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидыОперацийПоступленияПоВидамНоменклатуры(Команда)
	ПутьКФорме = 
		"РегистрСведений.ВидыОперацийПоступленияПоВидамНоменклатуры.ФормаСписка";
	ОткрытьФорму(
		ПутьКФорме,
		,
		ЭтаФорма,
		ЭтаФорма.УникальныйИдентификатор,
		,
		,
		,
		РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры
	
&НаКлиенте
Процедура НастроитьПараметрыПланированияЗакупочныхПроцедур(Команда)
	ПутьКФорме = 
		"РегистрСведений.НастройкиПланированияЗакупочныхПроцедур.ФормаСписка";
	ОткрытьФорму(
		ПутьКФорме,
		,
		ЭтаФорма,
		ЭтаФорма.УникальныйИдентификатор,
		,
		,
		,
		РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокПравилЗакупки(Команда)
	ОткрытьФорму("Справочник.ПоложениеОЗакупках.Форма.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНазначениеПравилЗакупкиОрганизациям(Команда)
	ОткрытьФорму("РегистрСведений.ДействиеПоложенийОЗакупках.Форма.ФормаСпискаПоГодам");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВнешниеСистемы(Команда)
	ОткрытьФорму("Справочник.ЭлектронныеТорговыеПлощадки.Форма.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКодыПротоколовЗакупокНаЕИС(Команда)
	ОткрытьФорму("Справочник.ТипыПротоколовЗакупокЕИС.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКодыЗакупокВЕис(Команда)
	ОткрытьФорму("РегистрСведений.НомераСпособовЗакупокВЕИС.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКатегорииЗакупокДляИсключенияИзГОЗ(Команда)
	ОткрытьФорму("Справочник.КатегорииЗакупокДляИсключенияИзГОЗ.ФормаСписка");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеЭлементовФормы()
	флИспользоватьЦУЗ = 
		НаборКонстант.ИспользоватьЦентрализованноеУправлениеЗакупками;
	Элементы.ГруппаЦентрализованныеЗакупкиНастройки.Доступность =
		флИспользоватьЦУЗ;
	Элементы.ОткрытьКатегорийнуюМатрицу.Доступность = НаборКонстант.РазделятьНоменклатуруПоКатегорийнымМенеджерам;
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	Если НаборКонстант.ИспользоватьЦентрализованноеУправлениеЗакупками = Истина
		И Константы.ПериодичностьЦентрализованныхЗакупок.Получить() = Перечисления.Периодичность.ПустаяСсылка() Тогда
		Константы.ПериодичностьЦентрализованныхЗакупок.Установить(Перечисления.Периодичность.Месяц);
	КонецЕсли;	
	Если НаборКонстант.ИспользоватьЦентрализованноеУправлениеЗакупками = Истина
		И Константы.ПроцентГодовогоОбъемаЗакупокТолькоСубъектыМСП.Получить() = 0 Тогда
		Константы.ПроцентГодовогоОбъемаЗакупокТолькоСубъектыМСП.Установить(18);
	КонецЕсли;	
	Если НаборКонстант.ИспользоватьЦентрализованноеУправлениеЗакупками = Истина
		И Константы.ПроцентГодовогоОбъемаЗакупокСУчастиемСубъектовМСП.Получить() = 0 Тогда
		Константы.ПроцентГодовогоОбъемаЗакупокСУчастиемСубъектовМСП.Установить(20);
	КонецЕсли;	
	НаборКонстант.ПроцентГодовогоОбъемаЗакупокСУчастиемСубъектовМСП = Константы.ПроцентГодовогоОбъемаЗакупокСУчастиемСубъектовМСП.Получить();
	НаборКонстант.ПроцентГодовогоОбъемаЗакупокТолькоСубъектыМСП = Константы.ПроцентГодовогоОбъемаЗакупокТолькоСубъектыМСП.Получить();
	
КонецПроцедуры	

&НаКлиенте
Процедура РазрешитьДоступВнешнихПоставщиковПриИзмененииЗавершение(
												Ответ, Элемент) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		НаборКонстант.РазрешитьДоступВнешнихПоставщиков =
			Не НаборКонстант.РазрешитьДоступВнешнихПоставщиков;
	КонецЕсли;
	НаборКонстант.ИспользоватьВнешнихПользователей =
		НаборКонстант.РазрешитьДоступВнешнихПоставщиков;
	ОбработатьПриИзмененииБезОбновленияИнтерфейса(
		Элементы.РазрешитьДоступВнешнихПоставщиков);
	ОбработатьПриИзмененииБезОбновленияИнтерфейса(
		Элементы.ИспользоватьВнешнихПользователей);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивПериодовЗакупок(ПериодБюджетирования)
	мПериоды = Новый Массив;
	мПериоды.Добавить(Перечисления.Периодичность.Неделя);
	мПериоды.Добавить(Перечисления.Периодичность.Декада);
	мПериоды.Добавить(Перечисления.Периодичность.Месяц);
	мПериоды.Добавить(Перечисления.Периодичность.Квартал);
	мПериоды.Добавить(Перечисления.Периодичность.Полугодие);
	мПериоды.Добавить(Перечисления.Периодичность.ДевятьМесяцев);
	мПериоды.Добавить(Перечисления.Периодичность.Год);
	
	Если ЗначениеЗаполнено(ПериодБюджетирования) Тогда
		Ном = мПериоды.Найти(ПериодБюджетирования);
		Если Ном <> Неопределено Тогда
			УдаляемыйНомер = 6;
			Пока УдаляемыйНомер > Ном Цикл
				мПериоды.Удалить(УдаляемыйНомер);
				УдаляемыйНомер = УдаляемыйНомер - 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат мПериоды;
КонецФункции

&НаСервереБезКонтекста
Функция УровеньКонтроляПравилНоменклатурыИзменен(ТекущийУровень)
	
	Возврат Константы.УровеньКонтроляПравилНоменклатуры.Получить() <> ТекущийУровень;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьНастройкиОповещенияПоЗакупкам(Команда)
	СтруктураПараметров = Новый Структура;
	СписокСобытий = Новый СписокЗначений;
	СписокСобытий.Добавить(ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.Напоминание_СтадияМероприятия"));
	СписокСобытий.Добавить(ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ВыполнениеОперацииПоСтадииМероприятия"));
	СписокСобытий.Добавить(ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.Напоминание_ОфициальноеОбъявлениеЗакупки"));
	СписокСобытий.Добавить(ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.Напоминание_НачалоПодготовкиЗакупки"));
	СписокСобытий.Добавить(ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ОповещениеОВозможностиУчаствоватьВЛотеАккредитованномуВнешнемуПоставщику"));
	СписокСобытий.Добавить(ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ОповещениеОВозможностиУчаствоватьВЛотеВнешнемуПоставщику"));
	СписокСобытий.Добавить(ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ОповещениеОбОтправкеНаИсправлениеАккредитации"));
	СписокСобытий.Добавить(ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ОповещениеОбОтправкеНаИсправлениеКвалификации"));
	СписокСобытий.Добавить(ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ОповещениеОНеутвержденииАккредитации"));
	СписокСобытий.Добавить(ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ОповещениеОНеутвержденииКвалификации"));
	СписокСобытий.Добавить(ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ОповещениеОбОтказеВДоступеВнешнемуПоставщику"));
	СписокСобытий.Добавить(ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ОповещениеОбОткрытииДоступаВнешнемуПоставщику"));
	СписокСобытий.Добавить(ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ОповещениеОбОтменеАккредитации"));
	СписокСобытий.Добавить(ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ОповещениеОбУтвержденииАккредитации"));
	СписокСобытий.Добавить(ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ОповещениеОбУтвержденииКвалификации"));
	СписокСобытий.Добавить(ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ОповещениеОЛишенииАккредитации"));
	СписокСобытий.Добавить(ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ОповещениеОЗапретеАккредитацииДоДаты"));
	СтруктураПараметров.Вставить("ОтборСобытий", СписокСобытий);
	ОткрытьФорму("РегистрСведений.НастройкиОповещений.Форма.ПомощникНастройкиОповещений", СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура РазделятьНоменклатуруПоКатегорийнымМенеджерамПриИзмененииЗавершение(Ответ, Элемент) Экспорт
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		НаборКонстант.РазделятьНоменклатуруПоКатегорийнымМенеджерам =
			Не НаборКонстант.РазделятьНоменклатуруПоКатегорийнымМенеджерам;
	КонецЕсли;
	ОбработатьПриИзмененииСОбновлениемИнтерфейса(Элемент);
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	УстановитьОформлениеЭлементовФормы();
	ОбновитьПовторноИспользуемыеЗначения();
	Возврат КонстантаИмя;
КонецФункции

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
		Если КонстантаИмя <> "" Тогда
			КонстантаМенеджер = Константы[КонстантаИмя];
			КонстантаЗначение = НаборКонстант[КонстантаИмя];
			Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
				КонстантаМенеджер.Установить(КонстантаЗначение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат КонстантаИмя;
КонецФункции

&НаКлиенте
Процедура УчетНоменклатурыПоставщикаПриИзменении(Элемент)
	ПриИзмененииРеквизитаСервер(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура НеТребоватьРегистрацииУчастниковДляОткрытыхСпособовЗакупокПриИзменении(Элемент)
	ПриИзмененииРеквизитаСервер(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоСтранамКорпоративныеЗакупкиПриИзменении(Элемент)
	ПриИзмененииРеквизитаСервер(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура МинимальнаяДоляЗакупок(Команда)
	ОткрытьФорму("РегистрСведений.ДоляЗакупокТоваровРоссийскогоПроисхождения.ФормаСписка");
КонецПроцедуры

#КонецОбласти