
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
			
	УстановитьНастройкиЗаданий();
	
	УстановитьЗаголовокРедактированиеСтавкиДисконтирования();
	
	ЗаполнитьНастройкиОптимизацииПлатежногоКалендаря();
	
	ЗаполнитьПлатежныеДниНедели();
	
 КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегламентныеЗаданияДляНастройки = РегламентныеЗаданияНастраиваемыеИзФормы();
	Для Каждого КлючЗначение Из РегламентныеЗаданияДляНастройки Цикл
		
		ИзменитьРасписаниеЗадания(КлючЗначение);
		
	КонецЦикла;
	
	СохранитьДоступныеВариантыОптимизацииПлатежногоКалендаря();
	СохранитьПлатежныеДниНедели();
	
	ОбновитьПовторноИспользуемыеЗначения();		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОбновитьИнтерфейс();
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НаборКонстант.ПорогКритичногоИзлишка < НаборКонстант.ПорогНормыОстатка Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Граница значительного излишка должна быть больше, чем граница незначительного излишка'"),,"НаборКонстант.ПорогКритичногоИзлишка",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтавкаДисконтированияПриИзменении(Элемент)
	УстановитьЗаголовокРедактированиеСтавкиДисконтирования();
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастроитьВесаИсточниковДанныхНажатие(Элемент)
	ОткрытьФорму("РегистрСведений.МатрицаВесовЛиквидности.Форма.МатрицаВесовЛиквидности");
КонецПроцедуры

&НаКлиенте
Процедура ПорогНекритичногоНедостаткаПриИзменении(Элемент)
	
	Если НаборКонстант.ПорогНекритичногоНедостатка > 0 Тогда
		НаборКонстант.ПорогНекритичногоНедостатка = -НаборКонстант.ПорогНекритичногоНедостатка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьФормированиеЗаявокПоГрафикамОплатыПриИзменении(Элемент)
	ИспользоватьФормированиеЗаявокПоГрафикамОплаты = НаборКонстант.АвтоматическиАктуализироватьЗаявкиПоГрафикамДоговоров;
	ИзменитьДоступностьПодчиненныхНастроекРегламентногоЗадания(ЭтотОбъект,"ФормированиеЗаявокПоГрафикамОплаты");
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОповещениеОПриближенииСрокаОплатыПриИзменении(Элемент)
	
	ИзменитьДоступностьПодчиненныхНастроекРегламентногоЗадания(ЭтотОбъект,"ОповещениеОПриближенииСрокаОплаты");

КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиФормироватьПретензииПоПросроченнойЗадолженностиПриИзменении(Элемент)
	
	ИзменитьДоступностьПодчиненныхНастроекРегламентногоЗадания(ЭтотОбъект,"АвтоматическоеФормированиеПретензий");

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОповещениеОНеобходимостиИзмененияСтатусаПретензииПриИзменении(Элемент)
	ИзменитьДоступностьПодчиненныхНастроекРегламентногоЗадания(ЭтотОбъект,"ОповещениеОНеобходимостиИзмененияСтатусаПретензии");

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПереоценкаЗаявокПриИзменении(Элемент)
	ИзменитьДоступностьПодчиненныхНастроекРегламентногоЗадания(ЭтотОбъект,"ПереоценкаЗаявок");
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПереводИзлишковДенежныхСредствПриИзменении(Элемент)
	ИзменитьДоступностьПодчиненныхНастроекРегламентногоЗадания(ЭтотОбъект,"ПереводИзлишковДенежныхСредств");
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗагрузкаСпискаБанковОбменСБанками(Элемент)
	ИзменитьДоступностьПодчиненныхНастроекРегламентногоЗадания(ЭтотОбъект, "ЗагрузкаСпискаБанковОбменСБанками");
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗагрузкаКурсовВалютПриИзменении(Элемент)
	ИзменитьДоступностьПодчиненныхНастроекРегламентногоЗадания(ЭтотОбъект,"ЗагрузкаКурсовВалют");
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗагрузкаСтавокМосПраймПриИзменении(Элемент)
	ИзменитьДоступностьПодчиненныхНастроекРегламентногоЗадания(ЭтотОбъект,"ЗагрузкаСтавокМосПрайм");
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтправкаНаСогласованиеЗаявокНаОперацииПриИзменении(Элемент)
	ИзменитьДоступностьПодчиненныхНастроекРегламентногоЗадания(ЭтотОбъект,"ОтправкаНаСогласованиеЗаявокНаОперации");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьСопоставлениеСтатейБюджетовОперациямФинансовыхИнструментов(Команда)
	ОткрытьФорму("Обработка.НастройкаСтатейБюджетовДляОпераций.Форма.Форма");
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеФормированияЗаявок(Команда)
		
	ОткрытьНастройкуРасписания(Команда.Имя);

КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеФормированияПретензий(Команда)
	
	ОткрытьНастройкуРасписания(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеФормированияОповещенийОПриближенииДатыПлатежа(Команда)
	
	ОткрытьНастройкуРасписания(Команда.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОНеобходимостиИзмененияСтатусаПретензии(Команда)
	
	ОткрытьНастройкуРасписания(Команда.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ПереоценкаЗаявок(Команда)
	ОткрытьНастройкуРасписания(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаСпискаБанковОбменСБанками(Команда)
	ОткрытьНастройкуРасписания(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаКурсовВалют(Команда)
	ОткрытьНастройкуРасписания(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаСтавокМосПрайм(Команда)
	ОткрытьНастройкуРасписания(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПереводИзлишковДенежныхСредств(Команда)
	ОткрытьНастройкуРасписания(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаЗаявокНаСогласование(Команда)
	ОткрытьНастройкуРасписания(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСтавкуДисконтирования(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактироватьСтавкуДисконтированияЗавершение", ЭтотОбъект);
	СтруктураОтбор = Новый Структура("ВидКотировки", НаборКонстант.СтавкаДисконтирования);
	СтруктураПараметров = Новый Структура("Отбор", СтруктураОтбор);
	ОткрытьФорму("РегистрСведений.ЗначенияКотировокФИ.ФормаСписка",СтруктураПараметров,ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьНастройкуРасписания(ИмяЗадания)
	
	РасписаниеРегламентногоЗадания = ЭтотОбъект["Расписание" + ИмяЗадания];
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьРасписаниеЗадания", ЭтотОбъект, Новый Структура("ИмяЗадания", ИмяЗадания));
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиЗаданий()
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегламентныеЗаданияДляНастройки = РегламентныеЗаданияНастраиваемыеИзФормы();
	Для Каждого КлючЗначение Из РегламентныеЗаданияДляНастройки Цикл
		
		УстановитьНастройкиЗадания(КлючЗначение);
		
	КонецЦикла;
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиЗадания(КлючЗначение)
	
	ИмяЗадания = ?(ЗначениеЗаполнено(КлючЗначение.Значение), КлючЗначение.Значение, КлючЗначение.Ключ);
	
	Задание = Метаданные.РегламентныеЗадания.Найти(ИмяЗадания);
	ЭтотОбъект["Использовать" + КлючЗначение.Ключ] = РегламентныеЗаданияСервер.РегламентноеЗаданиеИспользуется(Задание);
	ЭтотОбъект["Расписание" + КлючЗначение.Ключ] = РегламентныеЗаданияСервер.РасписаниеРегламентногоЗадания(Задание);
	ИзменитьДоступностьПодчиненныхНастроекРегламентногоЗадания(ЭтотОбъект, КлючЗначение.Ключ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиОптимизацииПлатежногоКалендаря()
	
	ТаблицаВозможныхВариантовОптимизации = ОптимизацияПлатежногоКалендаря.ТаблицаДоступныхВариантовОптимизации();
	ДоступныеВариантыОптимизацииПлатежногоКалендаря.Загрузить(ТаблицаВозможныхВариантовОптимизации);
	
	НаименованиеВалюты = СокрЛП(Константы.ВалютаРегламентированногоУчета.Получить().Наименование);
	Элементы.ДекорацияСтоимостьПереводаМеждуСчетамиВалюта.Заголовок = НаименованиеВалюты;
	Элементы.ДекорацияСущественнаяРазницаСтоимостиКредитовВалюта.Заголовок = НаименованиеВалюты;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДоступныеВариантыОптимизацииПлатежногоКалендаря()
	
	ОптимизацияПлатежногоКалендаря.СохранитьДоступныеВариантыОптимизации(ДоступныеВариантыОптимизацииПлатежногоКалендаря);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстНадписиРегламентнойНастройки(Элемент, Использование, Расписание)
	
	ТекстРасписания = "";
	
	Если Использование Тогда
		ПрефиксРасписания = НСтр("ru = 'Расписание: %1'");
	Иначе
		ПрефиксРасписания = НСтр("ru = 'Расписание (НЕ АКТИВНО): %1'");
	КонецЕсли;
	
	ТекстРасписания = СтрШаблон(ПрефиксРасписания, Строка(Расписание));
	Элемент.Заголовок = ТекстРасписания;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьДоступностьПодчиненныхНастроекРегламентногоЗадания(Форма, ИмяЗадания)
	
	Элементы = Форма.Элементы;
	
	Использование = Форма["Использовать" + ИмяЗадания];
	Расписание = Форма["Расписание" + ИмяЗадания];
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "Настройки" + ИмяЗадания, "Доступность", Использование);
		
	УстановитьТекстНадписиРегламентнойНастройки(Элементы[ИмяЗадания], Использование, Расписание);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасписаниеЗадания(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЗадания = ДополнительныеПараметры.ИмяЗадания;
	
	ЭтотОбъект["Расписание" + ИмяЗадания] = РасписаниеЗадания;
	
	УстановитьТекстНадписиРегламентнойНастройки(Элементы[ИмяЗадания], ЭтотОбъект["Использовать" + ИмяЗадания], РасписаниеЗадания);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРасписаниеЗадания(КлючЗначение)
	
	ИмяЗадания = ?(ЗначениеЗаполнено(КлючЗначение.Значение), КлючЗначение.Значение, КлючЗначение.Ключ);
	
	ИдентификаторЗадания = Метаданные.РегламентныеЗадания[ИмяЗадания];
	РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(ИдентификаторЗадания, ЭтотОбъект["Расписание" + КлючЗначение.Ключ]);
	РегламентныеЗаданияСервер.УстановитьИспользованиеРегламентногоЗадания(ИдентификаторЗадания, ЭтотОбъект["Использовать" + КлючЗначение.Ключ]);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РегламентныеЗаданияНастраиваемыеИзФормы()
	
	Результат = Новый Структура;
	Результат.Вставить("ФормированиеЗаявокПоГрафикамОплаты");
	Результат.Вставить("ОповещениеОПриближенииСрокаОплаты");
	Результат.Вставить("АвтоматическоеФормированиеПретензий");
	Результат.Вставить("ОповещениеОНеобходимостиИзмененияСтатусаПретензии");
	Результат.Вставить("ПереоценкаЗаявок");
	Результат.Вставить("ПереводИзлишковДенежныхСредств");
	Результат.Вставить("ЗагрузкаСпискаБанковОбменСБанками");
	Результат.Вставить("ЗагрузкаКурсовВалют");
	Результат.Вставить("ОтправкаНаСогласованиеЗаявокНаОперации");
	Результат.Вставить("ЗагрузкаСтавокМосПрайм");
		
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеСтавкиДисконтирования(СтавкаДисконтирования)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияКотировокФИСрезПоследних.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияКотировокФИ.СрезПоследних(&Период, ВидКотировки = &СтавкаДисконтирования) КАК ЗначенияКотировокФИСрезПоследних";

	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СтавкаДисконтирования", СтавкаДисконтирования);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Значение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокРедактированиеСтавкиДисконтирования()
	
	ЗначениеСтавки = ЗначениеСтавкиДисконтирования(НаборКонстант.СтавкаДисконтирования);
	ТекстЗаголовкаКоманды = НСтр("ru = 'Текущее значение: %1'");
	Элементы.РедактироватьСтавкуДисконтирования.Заголовок = СтрШаблон(ТекстЗаголовкаКоманды, ?(ЗначениеСтавки = Неопределено, НСтр("ru = '<не задано>'"), ЗначениеСтавки));
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСтавкуДисконтированияЗавершение(Результат, Параметы) Экспорт
	
	УстановитьЗаголовокРедактированиеСтавкиДисконтирования();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПлатежныеДниНедели()
	
	Для ном = 1 По 7 Цикл
		ЭтотОбъект["ПлатежныйДеньНедели" + ном] = Ложь;
	КонецЦикла;
	
	ПлатежныеДниНедели = РегистрыСведений.ПлатежныеДниНедели.ПлатежныеДниНедели();
	Для каждого День Из ПлатежныеДниНедели Цикл
		ЭтотОбъект["ПлатежныйДеньНедели" + День] = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПлатежныеДниНедели()
	
	НаборЗаписей = РегистрыСведений.ПлатежныеДниНедели.СоздатьНаборЗаписей();
	
	Для НомерДня = 1 По 7 Цикл
		ПлатежныйДень = ЭтотОбъект["ПлатежныйДеньНедели" + НомерДня];
		Если ПлатежныйДень Тогда
			Строка = НаборЗаписей.Добавить();
			Строка.НомерДняНедели = НомерДня;
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти










