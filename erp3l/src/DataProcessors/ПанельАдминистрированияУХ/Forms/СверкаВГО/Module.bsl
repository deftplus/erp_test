
#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьНастройкиЗаданий();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОбновитьИнтерфейс();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_НаборКонстант" Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ПанельВГО") Тогда
		
		Прочитать();
		УстановитьДоступность();
	    УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура ОтправкаРасхожденийВГОПриИзменении(Элемент)
	ИзменитьДоступностьПодчиненныхНастроекРегламентногоЗадания(ЭтотОбъект, Элемент.Имя, Истина);
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Расписание_ОтправкаРасхожденийВГОНажатие(Элемент)
	ОткрытьНастройкуРасписания(СтрЗаменить(Элемент.Имя, "Расписание_", ""));
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбОшибкахРасчетаРасхожденийВГОПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПорталВГОПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьВстречныйДокументУХПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьРасхожденияВГОПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьАдминистратораВГОПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РольКураторВГОПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РольИсполнительВГОПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементов_Оповещения

&НаКлиенте
Процедура ПроверкаСроковВыполненияСверкиВГОПриИзменении(Элемент)
	
	ИзменитьДоступностьПодчиненныхНастроекРегламентногоЗадания(ЭтотОбъект, Элемент.Имя, Истина);
	Элементы.ГруппаПериодСверки.Доступность = ПроверкаСроковВыполненияСверкиВГО;
	
КонецПроцедуры

&НаКлиенте
Процедура Расписание_ПроверкаСроковВыполненияСверкиВГОНажатие(Элемент)
	ОткрытьНастройкуРасписания(СтрЗаменить(Элемент.Имя, "Расписание_", ""));
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПриВозникновенииРасхожденияВГОПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОКомментарииРасхожденияВГОПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПриВозникновенииСпораВГОПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПоИстеченииЧастиПериодаСверкиВГОПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПриОтменеУрегулированияРасхожденияВГОПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбУрегулированииРасхожденияВГОПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	НаборКонстант = Форма.НаборКонстант;
	Элементы = Форма.Элементы;
	
	ЕстьПорталВГО = ИспользоватьПорталВГО();
	
	Элементы.НадписьПроцентВремениСогласования.Видимость	= ЕстьПорталВГО;
	Элементы.ГруппаОтветственныеОповещений.Видимость		= ЕстьПорталВГО Или Форма.ОтправкаРасхожденийВГО;
	Элементы.ГруппаОповещенияПорталаВГО.Видимость			= ЕстьПорталВГО;
	Элементы.УчетнаяЗаписьАдминистратораВГО.Доступность		= НаборКонстант.ОповеститьОбОшибкахРасчетаРасхожденийВГО;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользоватьПорталВГО()
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьПорталВГО");
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	ИмяКонстанты = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	Если ИмяКонстанты <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура("ПанельВГО", Истина), ИмяКонстанты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	ИмяКонстанты = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	УстановитьДоступность(РеквизитПутьКДанным);
	ОбновитьПовторноИспользуемыеЗначения();
	Возврат ИмяКонстанты;
	
КонецФункции

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	ЧастиИмени = СтрРазделить(РеквизитПутьКДанным, ".");
	Если ЧастиИмени.Количество() <> 2 Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяКонстанты = ЧастиИмени[1];
	КонстантаМенеджер = Константы[ИмяКонстанты];
	КонстантаЗначение = НаборКонстант[ИмяКонстанты];
	
	Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
		КонстантаМенеджер.Установить(КонстантаЗначение);
	КонецЕсли;
	
	Возврат ИмяКонстанты;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
КонецПроцедуры

#Область Служебные_РеглЗадания

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьДоступностьПодчиненныхНастроекРегламентногоЗадания(Форма, ИмяЗадания, ИзменитьЗадание = Ложь)
	
	Элементы = Форма.Элементы;
	
	Использование = Форма[ИмяЗадания];
	ИмяРасписание = "Расписание_" + ИмяЗадания;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяРасписание, "Доступность", Использование);
	
	Если ИзменитьЗадание Тогда
		ИзменитьЗадание(ИмяЗадания, Использование, Неопределено);
	КонецЕсли;
	
	Расписание = ПолучитьРасписаниеЗадания(ИмяЗадания);	
	УстановитьТекстНадписиРегламентнойНастройки(Элементы[ИмяРасписание], Использование, Расписание);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьРасписаниеЗадания(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ИмяЗадания = ДополнительныеПараметры.ИмяЗадания;
	ИзменитьЗадание(ИмяЗадания, Неопределено, РасписаниеЗадания);
	
	ИмяРасписание = "Расписание_" + ИмяЗадания;
	УстановитьТекстНадписиРегламентнойНастройки(Элементы[ИмяРасписание], ЭтотОбъект[ИмяЗадания], РасписаниеЗадания);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстНадписиРегламентнойНастройки(Элемент, Использование, Расписание)
	
	Если Использование Тогда
		ПрефиксРасписания = НСтр("ru = 'Расписание: %1'");
	Иначе
		ПрефиксРасписания = НСтр("ru = 'Расписание (НЕ АКТИВНО): %1'");
	КонецЕсли;
	
	Элемент.Заголовок = СтрШаблон(ПрефиксРасписания, Строка(Расписание));

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуРасписания(ИмяЗадания)
	
	ДопПараметры = Новый Структура("ИмяЗадания", ИмяЗадания);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_УстановитьРасписаниеЗадания", ЭтотОбъект, ДопПараметры);
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ПолучитьРасписаниеЗадания(ИмяЗадания));
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРасписаниеЗадания(ИмяЗадания)
	
	ТекущееЗадание = РегламентныеЗадания.НайтиПредопределенное(ИмяЗадания);
	Возврат РегламентныеЗаданияСервер.РасписаниеРегламентногоЗадания(ТекущееЗадание);

КонецФункции

&НаСервере
Процедура УстановитьНастройкиЗаданий()
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегламентныеЗаданияДляНастройки = СтрРазделить("ОтправкаРасхожденийВГО,ПроверкаСроковВыполненияСверкиВГО", ",");
	Для Каждого ИмяЗадания Из РегламентныеЗаданияДляНастройки Цикл
		
		Задание = Метаданные.РегламентныеЗадания.Найти(ИмяЗадания);
		
		ЭтотОбъект[ИмяЗадания] = РегламентныеЗаданияСервер.РегламентноеЗаданиеИспользуется(Задание);
		Элементы["Расписание_" + ИмяЗадания].Заголовок = РегламентныеЗаданияСервер.РасписаниеРегламентногоЗадания(Задание);
		
		ИзменитьДоступностьПодчиненныхНастроекРегламентногоЗадания(ЭтотОбъект, ИмяЗадания, Ложь);
		
	КонецЦикла;
	
	Элементы.ГруппаПериодСверки.Доступность = ПроверкаСроковВыполненияСверкиВГО;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьЗадание(ИмяЗадания, Использование = Неопределено, Расписание = Неопределено)
	
	ИдентификаторЗадания = Метаданные.РегламентныеЗадания[ИмяЗадания];
	
	Если Расписание <> Неопределено Тогда
		РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(ИдентификаторЗадания, Расписание);
	КонецЕсли;

	Если ЗначениеЗаполнено(Использование) Тогда
		РегламентныеЗаданияСервер.УстановитьИспользованиеРегламентногоЗадания(ИдентификаторЗадания, Использование);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
