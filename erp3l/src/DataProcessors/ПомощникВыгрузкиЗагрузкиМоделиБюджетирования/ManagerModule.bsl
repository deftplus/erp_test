#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет загрузку модели международного учета из файла
//
// Параметры:
// 	Параметры - Структура - Содержит адрес данных для загрузки
// 	АдресХранилища - Строка - Адрес во временном хранилище для помещения результата.
//
Процедура ЗагрузитьМодельУчета(Параметры, АдресХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Обработка = Обработки.УниверсальныйОбменДаннымиXML.Создать();	
	
	ИмяВременногоФайлаДанных = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанные = Параметры.ДвоичныеДанные; // ДвоичныеДанные - 
	ДвоичныеДанные.Записать(ИмяВременногоФайлаДанных);
	
	Обработка.ИмяФайлаОбмена = ИмяВременногоФайлаДанных;
	Обработка.РежимОбмена = "Загрузка";
	Обработка.ЗапоминатьЗагруженныеОбъекты = Ложь;
	Обработка.ВыводВПротоколСообщенийОбОшибках = Истина;
	
	ИмяВременногоФайлаПротоколаОбмена = ПолучитьИмяВременногоФайла("txt");
	Обработка.ВыводВПротоколИнформационныхСообщений = Ложь;
	Обработка.ИмяФайлаПротоколаОбмена = ИмяВременногоФайлаПротоколаОбмена;
	
	Обработка.ЗагружатьДанныеВРежимеОбмена = Истина;
	Обработка.ОбъектыПоСсылкеЗагружатьБезПометкиУдаления = Истина;
	Обработка.ОптимизированнаяЗаписьОбъектов = Истина;
	Обработка.ЗапоминатьЗагруженныеОбъекты = Истина;
	Обработка.НеВыводитьНикакихИнформационныхСообщенийПользователю = Истина;
	Обработка.ВыводВОкноСообщенийИнформационныхСообщений = Ложь;

	УстановитьПривилегированныйРежим(Истина);
	
	РаботаВозможна = Обработка.ВыполнитьДействияПередЧтениемДанных();
	Если РаботаВозможна Тогда
		УстановитьПараметрКД(Обработка,"ВыбранныеВидыБюджета",Параметры.ВыбранныеВидыБюджета);
		УстановитьПараметрКД(Обработка,"ВыбранныеЭтапыПодготовкиБюджета",Параметры.ВыбранныеЭтапыПодготовкиБюджета);
		УстановитьПараметрКД(Обработка,"ЗаменаЗначенийАналитик",Параметры.ЗаменаЗначенийАналитик);
		УстановитьПараметрКД(Обработка,"ЗагружаемыеНпп",Параметры.ЗагружаемыеНпп);
		УстановитьПараметрКД(Обработка,"ПараметрыОбновленияНпп",Параметры.ПараметрыОбновленияНпп);
		Обработка.ПроизвестиЧтениеДанных();
		Обработка.ВыполнитьДействияПослеЗавершенияЧтенияДанных(); 
	КонецЕсли;	

	УстановитьПривилегированныйРежим(Ложь);
	
	ПротоколОбмена = Новый ТекстовыйДокумент;
	ПротоколОбмена.Прочитать(ИмяВременногоФайлаПротоколаОбмена);
	
	УдалитьФайлы(ИмяВременногоФайлаПротоколаОбмена);
	УдалитьФайлы(ИмяВременногоФайлаДанных);
	
	Результат = Новый Структура("ЗагрузкаВыполнена", НЕ Обработка.ФлагОшибки);
	Результат.Вставить("ПротоколОбмена", ПротоколОбмена.ПолучитьТекст());
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Выполняет выгрузку модели международного учета в файла
//
// Параметры:
// 	Параметры - Структура - Пустая структура. Для совместимости с механизмом выполнения длительных операций
// 	АдресХранилища - Строка - Адрес во временном хранилище для помещения результата.
//
Процедура ВыгрузитьМодельУчета(Параметры, АдресХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Метаданные.ВариантВстроенногоЯзыка = Метаданные.СвойстваОбъектов.ВариантВстроенногоЯзыка.Русский Тогда
		ИмяМакета = "ПравилаОбменаБазовые_ru";
		//++ Локализация
		ИмяМакета = "ПравилаОбменаКА";
		//-- Локализация
	ИначеЕсли Метаданные.ВариантВстроенногоЯзыка = Метаданные.СвойстваОбъектов.ВариантВстроенногоЯзыка.Английский Тогда
		ИмяМакета = "ПравилаОбменаБазовые_en";
	КонецЕсли;
	
	ЕстьПравила = Метаданные.Обработки.ПомощникВыгрузкиЗагрузкиМоделиБюджетирования.Макеты.Найти(ИмяМакета) <> Неопределено;
	Если Не ЕстьПравила Тогда
		Результат = Новый Структура("ЗагрузкаВыполнена", Ложь);
		Результат.Вставить("ФайлВыгрузки", Неопределено);
		ШаблонОшибки = НСтр("ru = 'Отсутствует макет правил обмена: %1';
							|en = 'Missing exchange rules template: %1'");
		ТекстОшибки = СтрШаблон(
					ШаблонОшибки, "Обработки.ПомощникВыгрузкиЗагрузкиМоделиБюджетирования.Макеты." + ИмяМакета);
		Результат.Вставить("ПротоколОбмена", ТекстОшибки);
		ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
		Возврат;
	КонецЕсли;

	ЭтоКА = ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация");

	Обработка = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	
	КаталогФайлов = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(КаталогФайлов);
	
	ФлагОшибки = Ложь;
	ИмяФайлаВыгрузки = Неопределено;
	ПротоколОбменаТекст = "";
	
	//++ Локализация
	Если Не ЭтоКА И ПолучитьФункциональнуюОпцию("ЛокализацияРФ") Тогда
		ИмяВременногоФайлаПравилОбмена = ПолучитьИмяВременногоФайла("xml");
		МакетПравилОбмена = Обработки.ПомощникВыгрузкиЗагрузкиМоделиБюджетирования.ПолучитьМакет("ПравилаОбмена");
		МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);
		
		Обработка.ИмяФайлаПравилОбмена = ИмяВременногоФайлаПравилОбмена;
		Обработка.ЗагрузитьПравилаОбмена();
		
		УстановитьПараметрКД(Обработка,"МодельБюджетирования",Параметры.МодельБюджетирования,Истина);
		УстановитьПараметрКД(Обработка,"АдресВидовБюджета",Параметры.ВыбранныеВидыБюджета,Истина);
		УстановитьПараметрКД(Обработка,"АдресЭтапыПодготовкиБюджетов",Параметры.ВыбранныеЭтапыПодготовкиБюджета,Истина);
		
		ИмяВременногоФайлаПротоколаОбмена = ПолучитьИмяВременногоФайла("txt");
		Обработка.ВыводВПротоколИнформационныхСообщений = Ложь;
		Обработка.ИмяФайлаПротоколаОбмена = ИмяВременногоФайлаПротоколаОбмена;
		
		ИмяФайлаВыгрузки = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			КаталогФайлов, НСтр("ru = 'Выгрузка модели';
								|en = 'Exporting model'") + ".xml");
		Обработка.ИмяФайлаОбмена = ИмяФайлаВыгрузки;
		Обработка.РежимОбмена    = "Выгрузка";
		Обработка.НеВыводитьНикакихИнформационныхСообщенийПользователю = Истина;
		
		УстановитьПривилегированныйРежим(Истина);
		Обработка.ВыполнитьВыгрузку();
		УстановитьПривилегированныйРежим(Ложь);
		
		ПротоколОбмена = Новый ТекстовыйДокумент;
		ПротоколОбмена.Прочитать(ИмяВременногоФайлаПротоколаОбмена);
		ПротоколОбменаТекст = ПротоколОбмена.ПолучитьТекст();
		
		ФлагОшибки = Обработка.ФлагОшибки;
	КонецЕсли;
	ИмяМакета = "ПравилаОбменаКА";
	//-- Локализация
	
	// Выгрузка по правилам КА
	ИмяВременногоФайлаПравилОбменаКА = ПолучитьИмяВременногоФайла("xml");
	МакетПравилОбменаКА = Обработки.ПомощникВыгрузкиЗагрузкиМоделиБюджетирования.ПолучитьМакет(ИмяМакета);
	МакетПравилОбменаКА.Записать(ИмяВременногоФайлаПравилОбменаКА);
	
	Обработка.ИмяФайлаПравилОбмена = ИмяВременногоФайлаПравилОбменаКА;
	Обработка.ЗагрузитьПравилаОбмена();
	
	УстановитьПараметрКД(Обработка,"МодельБюджетирования",Параметры.МодельБюджетирования,Истина);
	УстановитьПараметрКД(Обработка,"АдресВидовБюджета",Параметры.ВыбранныеВидыБюджета,Истина);
	УстановитьПараметрКД(Обработка,"АдресЭтапыПодготовкиБюджетов",Параметры.ВыбранныеЭтапыПодготовкиБюджета,Истина);
	
	ИмяВременногоФайлаПротоколаОбменаКА = ПолучитьИмяВременногоФайла("txt");
	Обработка.ВыводВПротоколИнформационныхСообщений = Ложь;
	Обработка.ИмяФайлаПротоколаОбмена = ИмяВременногоФайлаПротоколаОбменаКА;
	
	ИмяФайлаВыгрузкиКА = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
		КаталогФайлов, СтрШаблон(НСтр("ru = 'Выгрузка модели %1';
										|en = 'Exporting model %1'"), "КА") + ".xml");
	Обработка.ИмяФайлаОбмена = ИмяФайлаВыгрузкиКА;
	Обработка.РежимОбмена    = "Выгрузка";
	Обработка.НеВыводитьНикакихИнформационныхСообщенийПользователю = Истина;
	
	УстановитьПривилегированныйРежим(Истина);
	Обработка.ВыполнитьВыгрузку();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПротоколОбменаКА = Новый ТекстовыйДокумент;
	ПротоколОбменаКА.Прочитать(ИмяВременногоФайлаПротоколаОбменаКА);
	ПротоколОбменаТекстКА = ПротоколОбменаКА.ПолучитьТекст();
	
	ФлагОшибкиКА = Обработка.ФлагОшибки;
	
	ЗаписьАрхиваУспешна = Ложь;
	Попытка
	
		ВременноеИмяФайлаАрхива = ПолучитьИмяВременногоФайла("zip");
		ОбъектЗаписьZip = Новый ЗаписьZipФайла(ВременноеИмяФайлаАрхива);
		Если Не ИмяФайлаВыгрузки = Неопределено Тогда
			ОбъектЗаписьZip.Добавить(ИмяФайлаВыгрузки);
		КонецЕсли;
		ОбъектЗаписьZip.Добавить(ИмяФайлаВыгрузкиКА);
		ОбъектЗаписьZip.Записать();
		ЗаписьАрхиваУспешна = Истина;
		
	Исключение
		// уведомляем об ошибке, если она была
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выгрузка модели бюджетирования';
										|en = 'Budgeting model export'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка создания архива: %1';
																		|en = 'An error occurred while creating archive: %1'"), ИнформацияОбОшибке().Описание));
			
	КонецПопытки;
	
	Результат = Новый Структура("ЗагрузкаВыполнена", НЕ ФлагОшибки И НЕ ФлагОшибкиКА);
	Если ЗаписьАрхиваУспешна Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(ВременноеИмяФайлаАрхива);
	Иначе
		ДвоичныеДанные = Неопределено;
	КонецЕсли;
	Результат.Вставить("ФайлВыгрузки", ДвоичныеДанные);
	Результат.Вставить("ПротоколОбмена", ПротоколОбменаТекст + Символы.ПС + ПротоколОбменаТекстКА);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	//++ Локализация
	Если Не ЭтоКА Тогда
		УдалитьФайлы(ИмяВременногоФайлаПравилОбмена);
		УдалитьФайлы(ИмяВременногоФайлаПротоколаОбмена);
		УдалитьФайлы(ИмяФайлаВыгрузки);
	КонецЕсли;
	//-- Локализация
	УдалитьФайлы(ИмяВременногоФайлаПравилОбменаКА);
	УдалитьФайлы(ИмяВременногоФайлаПротоколаОбменаКА);
	УдалитьФайлы(ИмяФайлаВыгрузкиКА);
	Если ЗаписьАрхиваУспешна Тогда
		УдалитьФайлы(ВременноеИмяФайлаАрхива);
	КонецЕсли;
	УдалитьФайлы(КаталогФайлов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьПараметрКД(КД,ИмяПараметра,ЗначениеПараметра,ТаблицаНастроек=Ложь)
	
	Если ТаблицаНастроек Тогда
			
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Наименование", ИмяПараметра);
		НайденныеНастройки = КД.ТаблицаНастройкиПараметров.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеНастройки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		// Массивы передаем через временное хранилище
		Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
			УИД = Новый УникальныйИдентификатор();
			АдресХранилища = ПоместитьВоВременноеХранилище(ЗначениеПараметра,УИД);		
			НайденныеНастройки[0].Значение = АдресХранилища;
		Иначе
			НайденныеНастройки[0].Значение = ЗначениеПараметра;
		КонецЕсли;
		
	Иначе

		Если Не КД.Параметры.Свойство(ИмяПараметра) Тогда
			Возврат;
		КонецЕсли;
		
		КД.Параметры[ИмяПараметра] = ЗначениеПараметра;

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

