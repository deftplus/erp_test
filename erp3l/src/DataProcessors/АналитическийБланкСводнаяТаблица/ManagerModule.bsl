
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ЗаполнениеНастроекПоУмолчанию

Процедура ПрочитатьСоставДоступныхАналитик(ТаблицаДоступныеПоля,НастройкиСоставаСтрокСводнойТаблицы,НастройкиПолейСводнойТаблицы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиСоставаСтрокСводнойТаблицы.СтрокаОтчета КАК СтрокаОтчета
	               |ПОМЕСТИТЬ втНастройкиСоставаСтрокСводнойТаблицы
	               |ИЗ
	               |	&НастройкиСоставаСтрокСводнойТаблицы КАК НастройкиСоставаСтрокСводнойТаблицы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВЫРАЗИТЬ(втНастройкиСоставаСтрокСводнойТаблицы.СтрокаОтчета КАК Справочник.СтрокиОтчетов).Владелец КАК ВидОтчета
	               |ПОМЕСТИТЬ втВидыОтчетов
	               |ИЗ
	               |	втНастройкиСоставаСтрокСводнойТаблицы КАК втНастройкиСоставаСтрокСводнойТаблицы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВЫРАЗИТЬ(втНастройкиСоставаСтрокСводнойТаблицы.СтрокаОтчета КАК Справочник.СтрокиОтчетов).ГруппаРаскрытия КАК ГруппаРаскрытия
	               |ПОМЕСТИТЬ втГруппыРаскрытия
	               |ИЗ
	               |	втНастройкиСоставаСтрокСводнойТаблицы КАК втНастройкиСоставаСтрокСводнойТаблицы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	втВидыОтчетов.ВидОтчета.ВидАналитики1 КАК ВидОтчетаВидАналитики1,
	               |	втВидыОтчетов.ВидОтчета.ВидАналитики2 КАК ВидОтчетаВидАналитики2,
	               |	втВидыОтчетов.ВидОтчета.ВидАналитики3 КАК ВидОтчетаВидАналитики3,
	               |	втВидыОтчетов.ВидОтчета.ВидАналитики4 КАК ВидОтчетаВидАналитики4,
	               |	втВидыОтчетов.ВидОтчета.ВидАналитики5 КАК ВидОтчетаВидАналитики5,
	               |	втВидыОтчетов.ВидОтчета.ВидАналитики6 КАК ВидОтчетаВидАналитики6,
				   |	втВидыОтчетов.ВидОтчета.ВидАналитики1.Код КАК ВидОтчетаВидАналитики1Код,
	               |	втВидыОтчетов.ВидОтчета.ВидАналитики2.Код КАК ВидОтчетаВидАналитики2Код,
	               |	втВидыОтчетов.ВидОтчета.ВидАналитики3.Код КАК ВидОтчетаВидАналитики3Код,
	               |	втВидыОтчетов.ВидОтчета.ВидАналитики4.Код КАК ВидОтчетаВидАналитики4Код,
	               |	втВидыОтчетов.ВидОтчета.ВидАналитики5.Код КАК ВидОтчетаВидАналитики5Код,
	               |	втВидыОтчетов.ВидОтчета.ВидАналитики6.Код КАК ВидОтчетаВидАналитики6Код
				   |ИЗ
	               |	втВидыОтчетов КАК втВидыОтчетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитики1 КАК ГруппаРаскрытияВидАналитики1,
	               |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитики2 КАК ГруппаРаскрытияВидАналитики2,
	               |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитики3 КАК ГруппаРаскрытияВидАналитики3,
	               |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитики4 КАК ГруппаРаскрытияВидАналитики4,
	               |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитики5 КАК ГруппаРаскрытияВидАналитики5,
	               |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитики6 КАК ГруппаРаскрытияВидАналитики6,
				   |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитики1.Код КАК ГруппаРаскрытияВидАналитики1Код,
	               |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитики2.Код КАК ГруппаРаскрытияВидАналитики2Код,
	               |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитики3.Код КАК ГруппаРаскрытияВидАналитики3Код,
	               |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитики4.Код КАК ГруппаРаскрытияВидАналитики4Код,
	               |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитики5.Код КАК ГруппаРаскрытияВидАналитики5Код,
	               |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитики6.Код КАК ГруппаРаскрытияВидАналитики6Код,
				   |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитикиВалютаДт КАК АналитикаВалюта,
				   |	втГруппыРаскрытия.ГруппаРаскрытия.ВидАналитикиВалютаДт.Код КАК АналитикаВалютаКод,
				   |	втГруппыРаскрытия.ГруппаРаскрытия.АналитикаЭтапПроекта КАК ГруппаРаскрытияАналитикаЭтапПроекта
	               |ИЗ
	               |	втГруппыРаскрытия КАК втГруппыРаскрытия";
	
	Запрос.УстановитьПараметр("НастройкиСоставаСтрокСводнойТаблицы",НастройкиСоставаСтрокСводнойТаблицы);
	
    РезультатПакета =  Запрос.ВыполнитьПакет();
	
	АналитикиВидаОтчета 		= РезультатПакета[3].Выгрузить();
	АналитикиГруппРаскрытия 	= РезультатПакета[4].Выгрузить();
	
	Если ТипЗнч(ТаблицаДоступныеПоля) = Тип("ТаблицаЗначений") Тогда
		времАналитики = ТаблицаДоступныеПоля.СкопироватьКолонки();
	Иначе	
		времАналитики = ТаблицаДоступныеПоля.Выгрузить().СкопироватьКолонки();
	КонецЕсли;	

	Для Каждого Стр Из АналитикиВидаОтчета Цикл
		Для ИндКол = 1 по ПараметрыСеанса.ЧислоДопАналитик Цикл
			Если ЗначениеЗаполнено(Стр["ВидОтчетаВидАналитики"+Строка(ИндКол)]) Тогда
				нПоле = времАналитики.Добавить();
				нПоле.Наименование 		= Строка(Стр["ВидОтчетаВидАналитики"+Строка(ИндКол)]);
				нПоле.ТипСтрока 		= ПолучитьТипЗначенияАналитики(Стр["ВидОтчетаВидАналитики"+Строка(ИндКол)]);
				нПоле.Код 				= Стр["ВидОтчетаВидАналитики"+Строка(ИндКол)+"Код"];
				нПоле.ИндексКартинки 	= 1;
				нПоле.НПП 				= 100;
				нПоле.ТипСубконто 		= Стр["ВидОтчетаВидАналитики"+Строка(ИндКол)];	
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;	
	
	Для Каждого Стр Из АналитикиГруппРаскрытия Цикл
		Для ИндКол = 1 по ПараметрыСеанса.ЧислоДопАналитик Цикл
			Если ЗначениеЗаполнено(Стр["ГруппаРаскрытияВидАналитики"+Строка(ИндКол)]) Тогда
				нПоле = времАналитики.Добавить();
				нПоле.Наименование 		= Строка(Стр["ГруппаРаскрытияВидАналитики"+Строка(ИндКол)]);
				нПоле.ТипСтрока 		= ПолучитьТипЗначенияАналитики(Стр["ГруппаРаскрытияВидАналитики"+Строка(ИндКол)]); 
				нПоле.Код 				= Стр["ГруппаРаскрытияВидАналитики"+Строка(ИндКол)+"Код"];
				нПоле.ИндексКартинки 	= 1;
				нПоле.НПП 				= 100;
				нПоле.ТипСубконто 		= Стр["ГруппаРаскрытияВидАналитики"+Строка(ИндКол)];	
			КонецЕсли;	
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Стр.АналитикаВалюта) Тогда
			нПоле = времАналитики.Добавить();
			нПоле.Наименование 		= "Дополнительные валюты";
			нПоле.ТипСтрока 		= "СправочникСсылка.Валюты"; 
			нПоле.Код 				= Стр.АналитикаВалютаКод;
			нПоле.ИндексКартинки 	= 1;
			нПоле.НПП 				= 100;
			нПоле.ТипСубконто 		= Стр.АналитикаВалюта;
		КонецЕсли;
		
	КонецЦикла;	

	времАналитики.Свернуть("Наименование,ТипСтрока,Код,ИндексКартинки,НПП,ТипСубконто");
	времАналитики.Сортировать("Наименование");
	
	нПоле = ТаблицаДоступныеПоля.Добавить();
	нПоле.Наименование = НСтр("ru = 'Строки отчетов'");
	нПоле.ТипСтрока = "СправочникСсылка.СтрокиОтчетов";
	нПоле.Код = "СтрокиОтчетов";
	нПоле.ИндексКартинки = 5;
	нПоле.НПП = 1;
	нПоле.ТипСубконто = Перечисления.ПостоянныеПоляСводнойТаблицы.СтрокиОтчетов;
    
	нПоле = ТаблицаДоступныеПоля.Добавить();
	нПоле.Наименование = НСтр("ru = 'Колонки отчетов'");
	нПоле.ТипСтрока = "СправочникСсылка.КолонкиОтчетов";
	нПоле.Код = "КолонкиОтчетов";
	нПоле.ИндексКартинки = 2;
	нПоле.НПП = 2;
	нПоле.ТипСубконто = Перечисления.ПостоянныеПоляСводнойТаблицы.КолонкиОтчетов;
	
	нПоле = ТаблицаДоступныеПоля.Добавить();
	нПоле.Наименование = НСтр("ru = 'Период отчета'");
    нПоле.ТипСтрока = "СправочникСсылка.Периоды";
	нПоле.Код = "ПериодОтчета";
	нПоле.ИндексКартинки = 0;
   	нПоле.НПП = 3;
	нПоле.ТипСубконто = Перечисления.ПостоянныеПоляСводнойТаблицы.ПериодОтчета;
	
	нПоле = ТаблицаДоступныеПоля.Добавить();
	нПоле.Наименование = НСтр("ru = 'Сценарий'");
	нПоле.ТипСтрока = "СправочникСсылка.Сценарии";
	нПоле.Код = "Сценарий";
	нПоле.ИндексКартинки = 1;
	нПоле.НПП = 4;
    нПоле.ТипСубконто = Перечисления.ПостоянныеПоляСводнойТаблицы.Сценарий;

	нПоле = ТаблицаДоступныеПоля.Добавить();
	нПоле.Наименование = НСтр("ru = 'Организация'");
	нПоле.ТипСтрока = "СправочникСсылка.Организации";
	нПоле.Код = "Организация";
	нПоле.ИндексКартинки = 1;
	нПоле.НПП = 5;
    нПоле.ТипСубконто = Перечисления.ПостоянныеПоляСводнойТаблицы.Организация;
	
	нПоле = ТаблицаДоступныеПоля.Добавить();
	нПоле.Наименование = НСтр("ru = 'Проект'");
	нПоле.ТипСтрока = "СправочникСсылка.Проекты";
	нПоле.Код = "Проект";
	нПоле.ИндексКартинки = 1;
	нПоле.НПП = 6;
	нПоле.ТипСубконто = Перечисления.ПостоянныеПоляСводнойТаблицы.Проект;

	Для Каждого СтрАналитика Из времАналитики Цикл
		нПоле = ТаблицаДоступныеПоля.Добавить();
        ЗаполнитьЗначенияСвойств(нПоле,СтрАналитика);	
	КонецЦикла;	
	
	ЗаполнитьСвойстваПолейПоУмолчанию(ТаблицаДоступныеПоля,НастройкиПолейСводнойТаблицы)
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияСводнойТаблицыПоУмолчанию(СтруктураПараметров) Экспорт
	
	Если СтруктураПараметров.Свойство("НастройкиРасположенияПолейСводнойТаблицы") Тогда
		НастройкиРасположенияПолейСводнойТаблицы = СтруктураПараметров.НастройкиРасположенияПолейСводнойТаблицы;
		ПолучитьНастройкиРасположенияПолейСводнойТаблицыПоУмолчанию(НастройкиРасположенияПолейСводнойТаблицы)
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("НастройкиПериодовСводнойТаблицы") Тогда
		НастройкиПериодовСводнойТаблицы = СтруктураПараметров.НастройкиПериодовСводнойТаблицы;
		ПолучитьНастройкиПериодовСводнойТаблицыПоУмолчанию(НастройкиПериодовСводнойТаблицы)
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("НастройкиВариантаСводнойТаблицы") Тогда
		НастройкиВариантаСводнойТаблицы = СтруктураПараметров.НастройкиВариантаСводнойТаблицы;
		ПолучитьНастройкиВариантаСводнойТаблицыПоУмолчанию(НастройкиВариантаСводнойТаблицы)
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьНастройкиРасположенияПолейСводнойТаблицыПоУмолчанию(НастройкиРасположенияПолейСводнойТаблицы)
	
	  НастройкиРасположенияПолейСводнойТаблицы.Очистить();
	  
	  нПоле = НастройкиРасположенияПолейСводнойТаблицы.Добавить();
	  нПоле.ОсьТаблицы  		= Перечисления.ОсиСводнойТаблицы.Строки;
	  нПоле.Поле        		= Перечисления.ПостоянныеПоляСводнойТаблицы.СтрокиОтчетов;
      нПоле.КодПоля     		= "СтрокиОтчетов";
	  нПоле.ПредставлениеПоля   = НСтр("ru = 'Строки отчетов'");
      нПоле.НомерПоПорядку      = 1;
      нПоле.ТипСтрока           = ПолучитьТипЗначенияАналитики(нПоле.Поле);
	   
	  нПоле = НастройкиРасположенияПолейСводнойТаблицы.Добавить();
	  нПоле.ОсьТаблицы  		= Перечисления.ОсиСводнойТаблицы.Колонки;
	  нПоле.Поле        		= Перечисления.ПостоянныеПоляСводнойТаблицы.ПериодОтчета;
      нПоле.КодПоля     		= "ПериодОтчета";
	  нПоле.ПредставлениеПоля   = НСтр("ru = 'Период отчета'");
      нПоле.НомерПоПорядку      = 1;
      нПоле.ТипСтрока           = ПолучитьТипЗначенияАналитики(нПоле.Поле);

	  нПоле = НастройкиРасположенияПолейСводнойТаблицы.Добавить();
	  нПоле.ОсьТаблицы  		= Перечисления.ОсиСводнойТаблицы.Колонки;
	  нПоле.Поле        		= Перечисления.ПостоянныеПоляСводнойТаблицы.КолонкиОтчетов;
      нПоле.КодПоля     		= "КолонкиОтчетов";
	  нПоле.ПредставлениеПоля   = НСтр("ru = 'Колонки отчетов'");
      нПоле.НомерПоПорядку      = 2;
      нПоле.ТипСтрока           = ПолучитьТипЗначенияАналитики(нПоле.Поле);

	  нПоле = НастройкиРасположенияПолейСводнойТаблицы.Добавить();
	  нПоле.ОсьТаблицы  		= Перечисления.ОсиСводнойТаблицы.Отборы;
	  нПоле.Поле        		= Перечисления.ПостоянныеПоляСводнойТаблицы.Сценарий;
      нПоле.КодПоля     		= "Сценарий";
	  нПоле.ПредставлениеПоля   = НСтр("ru = 'Сценарий'");
      нПоле.НомерПоПорядку      = 1;
      нПоле.ТипСтрока           = ПолучитьТипЗначенияАналитики(нПоле.Поле);

	  нПоле = НастройкиРасположенияПолейСводнойТаблицы.Добавить();
	  нПоле.ОсьТаблицы  		= Перечисления.ОсиСводнойТаблицы.Отборы;
	  нПоле.Поле        		= Перечисления.ПостоянныеПоляСводнойТаблицы.Организация;
      нПоле.КодПоля     		= "Организация";
	  нПоле.ПредставлениеПоля   = НСтр("ru = 'Организация'");
      нПоле.НомерПоПорядку      = 2;
      нПоле.ТипСтрока           = ПолучитьТипЗначенияАналитики(нПоле.Поле);

	    
КонецПроцедуры	

Процедура ПолучитьНастройкиПериодовСводнойТаблицыПоУмолчанию(НастройкиПериодовСводнойТаблицы)
	
	  НастройкиПериодовСводнойТаблицы.Очистить();
	  
	  нПоле 					= НастройкиПериодовСводнойТаблицы.Добавить();
	  нПоле.Периодичность 		= Перечисления.Периодичность.Месяц;
  
  КонецПроцедуры	
  
Процедура ПолучитьНастройкиВариантаСводнойТаблицыПоУмолчанию(НастройкиВариантаСводнойТаблицы)
	
	  НастройкиВариантаСводнойТаблицы.Очистить();
	  
	  нПоле 										= НастройкиВариантаСводнойТаблицы.Добавить();
	  нПоле.ВыводитьАналитикиСтрокВИерархии 		= Истина;
  
  КонецПроцедуры	
    
Процедура ЗаполнитьСвойстваПолейПоУмолчанию(ТаблицаДоступныеПоля,НастройкиПолейСводнойТаблицы) Экспорт
	
	Для Каждого СтрПоле Из ТаблицаДоступныеПоля Цикл
		
		тНастройкаПоля = НастройкиПолейСводнойТаблицы.НайтиСтроки(Новый Структура("Поле",СтрПоле.ТипСубконто));
		
		Если тНастройкаПоля.Количество() = 0 Тогда
			 ТекНастройкиПоляЭлемент = НастройкиПолейСводнойТаблицы.Добавить();
			 ЗаполнитьСвойстваПоляАналитики(ТекНастройкиПоляЭлемент,СтрПоле);
		КонецЕсли;	
		
	КонецЦикла;	
		
КонецПроцедуры 
  
Процедура ЗаполнитьСвойстваПоляАналитики(ТекНастройкиПоляЭлемент,ТекущиеДанные);
	
	ТекНастройкиПоляЭлемент.Поле 						= ТекущиеДанные.ТипСубконто;
	ТекНастройкиПоляЭлемент.КодПоля 					= ТекущиеДанные.Код;
	Если Не ЗначениеЗаполнено(ТекНастройкиПоляЭлемент.ВыражениеПредставления) Тогда
		ТекНастройкиПоляЭлемент.ВыражениеПредставления 		= "["+Строка(ТекущиеДанные.ТипСубконто)+"]";
		Если ТекущиеДанные.Наименование = "Дополнительные валюты" Тогда
			ТекНастройкиПоляЭлемент.ВыражениеПредставления 		= "["+ТекущиеДанные.Наименование+"]";
		КонецЕсли;		
	КонецЕсли;
	
	Если ТекущиеДанные.ТипСубконто = Перечисления.ПостоянныеПоляСводнойТаблицы.СтрокиОтчетов Тогда
		 ТекНастройкиПоляЭлемент.ВыражениеУпорядочивания 	= "СтрокиОтчетов.Наименование";
	ИначеЕсли ТекущиеДанные.ТипСубконто = Перечисления.ПостоянныеПоляСводнойТаблицы.КолонкиОтчетов  Тогда
		 ТекНастройкиПоляЭлемент.ВыражениеУпорядочивания 	= "КолонкиОтчетов.Наименование";
	ИначеЕсли ТекущиеДанные.ТипСубконто = Перечисления.ПостоянныеПоляСводнойТаблицы.Сценарий  Тогда
		 ТекНастройкиПоляЭлемент.ВыражениеУпорядочивания 	= "Сценарий.Наименование";
	ИначеЕсли ТекущиеДанные.ТипСубконто = Перечисления.ПостоянныеПоляСводнойТаблицы.Организация  Тогда
         ТекНастройкиПоляЭлемент.ВыражениеУпорядочивания 	= "Организация.Наименование";
    ИначеЕсли ТекущиеДанные.ТипСубконто = Перечисления.ПостоянныеПоляСводнойТаблицы.Проект  Тогда
          ТекНастройкиПоляЭлемент.ВыражениеУпорядочивания 	= "Проект.Наименование";			
	ИначеЕсли ТекущиеДанные.ТипСубконто = Перечисления.ПостоянныеПоляСводнойТаблицы.Версия  Тогда
          ТекНастройкиПоляЭлемент.ВыражениеУпорядочивания 	= "Версия.Наименование";		  
	ИначеЕсли ТекущиеДанные.ТипСубконто = Перечисления.ПостоянныеПоляСводнойТаблицы.ПериодОтчета  Тогда
          ТекНастройкиПоляЭлемент.ВыражениеУпорядочивания 	= "ПериодОтчета.ДатаНачала";		  
	Иначе	
		СвойстваАналитики = АналитическийБланкГенерацияМакетаУХСервер.ПолучитьТипСортировкуАналитики(ТекущиеДанные.Код,ТекущиеДанные.ТипСубконто.ТипЗначения);
		
		Если Не ЗначениеЗаполнено(ТекНастройкиПоляЭлемент.ВыражениеУпорядочивания) Тогда
			ТекНастройкиПоляЭлемент.ВыражениеУпорядочивания 	= СвойстваАналитики.АналитикаСортировка;
		КонецЕсли;
			
	КонецЕсли;
	
	НастройкиКД 				= Новый КомпоновщикНастроекКомпоновкиДанных;
	НовыйЭлементПорядка 		= НастройкиКД.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовыйЭлементПорядка.Поле 	= Новый ПолеКомпоновкиДанных(ТекНастройкиПоляЭлемент.ВыражениеУпорядочивания);
	
	ТекНастройкиПоляЭлемент.ВыражениеУпорядочиванияСКДСтрока = ЗначениеВСтрокуВнутр(НастройкиКД.Настройки.Порядок);
	
	
КонецПроцедуры	

Функция ПолучитьТипЗначенияАналитики(СубконтоАналитики) Экспорт
		
	МассивТиповСтрока = Новый Массив;
	
	Если СубконтоАналитики = Перечисления.ПостоянныеПоляСводнойТаблицы.СтрокиОтчетов Тогда
		
		ТипСтрока 				= "СправочникСсылка.СтрокиОтчетов";
		МассивТиповСтрока.Добавить(ТипСтрока);
		
	ИначеЕсли СубконтоАналитики = Перечисления.ПостоянныеПоляСводнойТаблицы.КолонкиОтчетов Тогда
		
		ТипСтрока 				= "СправочникСсылка.КолонкиОтчетов";
		МассивТиповСтрока.Добавить(ТипСтрока);
		
	ИначеЕсли СубконтоАналитики = Перечисления.ПостоянныеПоляСводнойТаблицы.ПериодОтчета Тогда
		
		ТипСтрока 				= "СправочникСсылка.Периоды";
		МассивТиповСтрока.Добавить(ТипСтрока);
		
	ИначеЕсли СубконтоАналитики = Перечисления.ПостоянныеПоляСводнойТаблицы.Сценарий Тогда
		
		ТипСтрока 				= "СправочникСсылка.Сценарии";
		МассивТиповСтрока.Добавить(ТипСтрока);
		
	ИначеЕсли СубконтоАналитики = Перечисления.ПостоянныеПоляСводнойТаблицы.Организация Тогда
		
		ТипСтрока 				= "СправочникСсылка.Организации";
		МассивТиповСтрока.Добавить(ТипСтрока);
		
	ИначеЕсли СубконтоАналитики = Перечисления.ПостоянныеПоляСводнойТаблицы.Проект Тогда
		
		ТипСтрока 				= "СправочникСсылка.Проекты";
		МассивТиповСтрока.Добавить(ТипСтрока);
		
	Иначе	  
		
		Для Каждого СтрТип Из СубконтоАналитики.ТипЗначения.Типы() Цикл
			
			ЭлементТип = Новый (СтрТип);
			ИмяОбъекта = ЭлементТип.Метаданные().ПолноеИмя();
			
			Если СтрНайти(ИмяОбъекта,"Справочник.")>0 Тогда
				ТипСтрока 				= СтрЗаменить(ИмяОбъекта,"Справочник.","СправочникСсылка.");
			ИначеЕсли СтрНайти(ИмяОбъекта,"Документ.")>0 Тогда	
				ТипСтрока 				= СтрЗаменить(ИмяОбъекта,"Документ.","ДокументСсылка.");
			ИначеЕсли СтрНайти(ИмяОбъекта,"ПланВидовХарактеристик.")>0 Тогда	
				ТипСтрока 				= СтрЗаменить(ИмяОбъекта,"ПланВидовХарактеристик.","ПланВидовХарактеристикСсылка.");
			ИначеЕсли СтрНайти(ИмяОбъекта,"ПланСчетов.")>0 Тогда	
				ТипСтрока 				= СтрЗаменить(ИмяОбъекта,"ПланСчетов.","ПланСчетовСсылка.");
			ИначеЕсли СтрНайти(ИмяОбъекта,"Перечисление.")>0 Тогда	 
				ТипСтрока 				= СтрЗаменить(ИмяОбъекта,"Перечисление.","ПеречислениеСсылка.");
			Иначе	
				ТипСтрока 				= Неопределено; //Не поддерживаем другие типы в аналитиках.
			КонецЕсли;
			
			МассивТиповСтрока.Добавить(ТипСтрока);
			
		КонецЦикла;	
			
	КонецЕсли;
		
	ТипСтрокаИтог = СтрСоединить(МассивТиповСтрока,"|");

	Возврат ТипСтрокаИтог;
	
КонецФункции	

 #КонецОбласти
 
 
 
 #Область ГенерацияШаблонаМакетаСводнойТаблицы

Процедура CгенерироватьМакетШаблона(СтруктураПараметровВход) Экспорт
	    
	ПолеТабличногоДокументаШаблон  				= СтруктураПараметровВход.ПолеТабличногоДокументаШаблон;
	НастройкиСоставаСтрокСводнойТаблицы         = СтруктураПараметровВход.НастройкиСоставаСтрокСводнойТаблицы;
	НастройкиСоставаКолонокСводнойТаблицы       = СтруктураПараметровВход.НастройкиСоставаКолонокСводнойТаблицы;
	НастройкиРасположенияПолейСводнойТаблицы    = СтруктураПараметровВход.НастройкиРасположенияПолейСводнойТаблицы;
	НастройкиВариантаСводнойТаблицы             = СтруктураПараметровВход.НастройкиВариантаСводнойТаблицы;
	НастройкиПериодовСводнойТаблицы             = СтруктураПараметровВход.НастройкиПериодовСводнойТаблицы;
	НастройкиПолейСводнойТаблицы                = СтруктураПараметровВход.НастройкиПолейСводнойТаблицы;
	УникальныйИдентификатор                     = СтруктураПараметровВход.УникальныйИдентификатор;
	
	МакетШаблонаСводнойТаблицы 					= Обработки.АналитическийБланкСводнаяТаблица.ПолучитьМакет("МакетШаблонаСводнойТаблицы"); 

	ПолеТабличногоДокументаШаблон.Очистить();
	АналитическийБланкГенерацияМакетаУХСервер.ПроверитьНаличиеСлужебныхОбластей(ПолеТабличногоДокументаШаблон,Истина);
	
	//Прочитаем оформление ячеек из макета
	СтруктураОформления  = Новый Структура;
	УстановитьШаблонУсловногоОформления(СтруктураОформления,МакетШаблонаСводнойТаблицы);

	//Получим все неудаленные показатели для текущих настроек строк
	СтрокиОтчетаМассив 	= НастройкиСоставаСтрокСводнойТаблицы.ВыгрузитьКолонку("СтрокаОтчета");
	КолонкиОтчетаМассив = НастройкиСоставаКолонокСводнойТаблицы.ВыгрузитьКолонку("КолонкаОтчета");
	текПоказатели = ПолучитьТаблицуПоказателейВидаОтчета(СтрокиОтчетаМассив,КолонкиОтчетаМассив);
	текПоказатели.Индексы.Добавить("Строка,Колонка");
	текПоказатели.Индексы.Добавить("Ссылка");

	//Получим доступные аналитики показателей
	кэшРаскрытияПоказателей = АналитическийБланкГенерацияМакетаУХСервер.ПолучитьАналитикиРаскрытияПоказателей(текПоказатели.ВыгрузитьКолонку("Ссылка"));
	кэшРаскрытияПоказателей.Индексы.Добавить("Показатель"); 
	
	//Получим доступные аналитики строк показателей
	кэшРаскрытияПоказателей_ = кэшРаскрытияПоказателей.Скопировать();
	
	ТекСтрокаСверткиПоАналитике = "СтрокаОтчета,";
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		ТекСтрокаСверткиПоАналитике = ТекСтрокаСверткиПоАналитике+"ВидАналитики"+Инд+",";
		ТекСтрокаСверткиПоАналитике = ТекСтрокаСверткиПоАналитике+"ВидАналитики"+Инд+"Код,";
	КонецЦикла;	
	
	ТекСтрокаСверткиПоАналитике = ТекСтрокаСверткиПоАналитике+"ВидАналитикиВалюта,ВидАналитикиВалютаКод";
		
	кэшРаскрытияПоказателей_.Свернуть(ТекСтрокаСверткиПоАналитике);
	кэшРаскрытияПоказателей_.Индексы.Добавить("СтрокаОтчета");

	//Инициализация переменных
	КартинкаМакета          			= БиблиотекаКартинок.НайтиВСодержании;
    ВыводитьАналитикиСтрокВИерархии 	= НастройкиВариантаСводнойТаблицы[0].ВыводитьАналитикиСтрокВИерархии;
	ВыводитьАналитикиКолонокВИерархии 	= НастройкиВариантаСводнойТаблицы[0].ВыводитьАналитикиКолонокВИерархии;
	ВыводитьОбщийИтогПоКолонкам         = НастройкиВариантаСводнойТаблицы[0].ВыводитьОбщийИтогПоКолонкам;
	АналитикиСтрок  					= НастройкиРасположенияПолейСводнойТаблицы.НайтиСтроки(Новый Структура("ОсьТаблицы",Перечисления.ОсиСводнойТаблицы.Строки));
	АналитикиКолонок 					= НастройкиРасположенияПолейСводнойТаблицы.НайтиСтроки(Новый Структура("ОсьТаблицы",Перечисления.ОсиСводнойТаблицы.Колонки));
	нСтрока 	=  3;
	нКолонка 	=  2;

	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПолеТабличногоДокументаШаблон",ПолеТабличногоДокументаШаблон);
	СтруктураПараметров.Вставить("АналитикиСтрок",АналитикиСтрок);
	СтруктураПараметров.Вставить("АналитикиКолонок",АналитикиКолонок);
    СтруктураПараметров.Вставить("ВыводитьАналитикиСтрокВИерархии",ВыводитьАналитикиСтрокВИерархии);
    СтруктураПараметров.Вставить("ВыводитьАналитикиКолонокВИерархии",ВыводитьАналитикиКолонокВИерархии);
    СтруктураПараметров.Вставить("КартинкаМакета",КартинкаМакета);
    СтруктураПараметров.Вставить("нСтрока",нСтрока);
    СтруктураПараметров.Вставить("нКолонка",нКолонка);
    СтруктураПараметров.Вставить("СтруктураОформления",СтруктураОформления);
	СтруктураПараметров.Вставить("кэшРаскрытияПоказателей_",кэшРаскрытияПоказателей_);
    СтруктураПараметров.Вставить("текПоказатели",текПоказатели);
    СтруктураПараметров.Вставить("ВыводитьОбщийИтогПоКолонкам",ВыводитьОбщийИтогПоКолонкам);
	
	СтруктураПараметров.Вставить("НастройкиСоставаСтрокСводнойТаблицы",НастройкиСоставаСтрокСводнойТаблицы);
	СтруктураПараметров.Вставить("НастройкиСоставаКолонокСводнойТаблицы",НастройкиСоставаКолонокСводнойТаблицы);
    СтруктураПараметров.Вставить("НастройкиРасположенияПолейСводнойТаблицы",НастройкиРасположенияПолейСводнойТаблицы);
    СтруктураПараметров.Вставить("НастройкиВариантаСводнойТаблицы"	,НастройкиВариантаСводнойТаблицы);
    СтруктураПараметров.Вставить("НастройкиПериодовСводнойТаблицы"	,НастройкиПериодовСводнойТаблицы);
    СтруктураПараметров.Вставить("НастройкиПолейСводнойТаблицы"		,НастройкиПолейСводнойТаблицы);
	
	СтруктураТекущихАналитикОтбор = Новый Структура;
	Для Каждого СтрОтбор Из НастройкиРасположенияПолейСводнойТаблицы Цикл
		Если СтрОтбор.ОсьТаблицы = Перечисления.ОсиСводнойТаблицы.Отборы Тогда
			 СтруктураТекущихАналитикОтбор.Вставить(СтрОтбор.КодПоля);
		КонецЕсли;	
	КонецЦикла;
	СтруктураПараметров.Вставить("СтруктураТекущихАналитикОтбор",СтруктураТекущихАналитикОтбор);
	
	//Рисуем шапку таблицы по заданной структуре колонок	
	СгенерироватьШапкуТаблицы(СтруктураПараметров);
		
	//Герерируем макеты выбранных строк и раскрытий
	СгенерироватьСтрокиШаблонаСводнойТаблицы(СтруктураПараметров);
	
	//Скопируем еще одну область выбранных колонок для итога, если нужно
	Если ВыводитьОбщийИтогПоКолонкам Тогда
		
		СдвигПоГоризонтали 		= СтруктураПараметров.ПоследняяКолонкаЗаголовка - СтруктураПараметров.нКолонкаНачалаПоказателей;
		ИсходнаяШиринаТаблицы   = СтруктураПараметров.ПоследняяКолонкаЗаголовка;
		
		МассивСвойствОбластей = Новый Массив;
		МассивСвойствОбластей.Добавить("ЦветТекста");
		МассивСвойствОбластей.Добавить("ГраницаСверху");
		МассивСвойствОбластей.Добавить("ГраницаСнизу");
		МассивСвойствОбластей.Добавить("ГраницаСлева");
		МассивСвойствОбластей.Добавить("ГраницаСправа");
		МассивСвойствОбластей.Добавить("ЦветРамки");
		МассивСвойствОбластей.Добавить("ВертикальноеПоложение");
		МассивСвойствОбластей.Добавить("ГоризонтальноеПоложение");
		МассивСвойствОбластей.Добавить("Шрифт");
		МассивСвойствОбластей.Добавить("РазмещениеТекста");
       	МассивСвойствОбластей.Добавить("Расшифровка");
        МассивСвойствОбластей.Добавить("Текст");

		Для ИндСтрока = СтруктураПараметров.ПоследняяСтрокаЗаголовка+1 По ПолеТабличногоДокументаШаблон.ВысотаТаблицы Цикл
			Для ИндКолонка = СтруктураПараметров.нКолонкаНачалаПоказателей+1 По ИсходнаяШиринаТаблицы Цикл
				
				ЯчейкаИсточник = ПолеТабличногоДокументаШаблон.Область(ИндСтрока,ИндКолонка,ИндСтрока,ИндКолонка);
				ЯчейкаПриемник = ПолеТабличногоДокументаШаблон.Область(ИндСтрока,ИндКолонка+СдвигПоГоризонтали,ИндСтрока,ИндКолонка+СдвигПоГоризонтали);
				Если ЯчейкаИсточник.Расшифровка = Неопределено Тогда
					
					Для Каждого СвойствоОбласти Из МассивСвойствОбластей Цикл
						ЯчейкаПриемник[СвойствоОбласти] = ЯчейкаИсточник[СвойствоОбласти];
						ЯчейкаПриемник.ЦветФона = СтруктураОформления.ОбластьЯчейкаАгрегат.ЦветФона;
					КонецЦикла;	
																			
				Иначе	
					
					Для Каждого СвойствоОбласти Из МассивСвойствОбластей Цикл
						ЯчейкаПриемник[СвойствоОбласти] = ЯчейкаИсточник[СвойствоОбласти];
						ЯчейкаПриемник.ЦветФона = СтруктураОформления.ОбластьЯчейкаАгрегат.ЦветФона;
					КонецЦикла;	
					
					Если ЯчейкаИсточник.Расшифровка.Свойство("Ссылка") Тогда
						СтрПоказатель = текПоказатели.Найти(ЯчейкаИсточник.Расшифровка.Ссылка,"Ссылка");
						ЯчейкаПриемник.Имя 	= АналитическийБланкГенерацияМакетаУХСервер.ПолучитьИмяСледующейОбластиСервер(ПолеТабличногоДокументаШаблон, СокрЛП(СтрПоказатель.ВидОтчетаКод), СокрЛП(СтрПоказатель.ПоказательКод)); 
					КонецЕсли;
					
					Если ЯчейкаИсточник.Расшифровка.Свойство("ТекстФормулы") Тогда
						ЯчейкаПриемник.Имя 	= "Формула_"+СтрЗаменить(Новый УникальныйИдентификатор(),"-",""); 
					КонецЕсли;
	
				КонецЕсли;	
				
			КонецЦикла;	
		КонецЦикла;	
				 
	 КонецЕсли;	
	
	Для ИндКолонки = 1 По  ПолеТабличногоДокументаШаблон.ШиринаТаблицы Цикл
		ЯчейкаИсточник = ПолеТабличногоДокументаШаблон.Область(2,ИндКолонки,2,ИндКолонки);
		ЯчейкаИсточник.АвтоОтступ = 1;
	КонецЦикла;	 
	 
	//Получаем готовые запросы  и таблицы для работы аналитческого бланка.
	Отказ = Ложь;
	ОбъектАБ = Обработки.АналитическийБланк.Создать();
	
	СтруктураНастроек = Новый Структура;
	АналитическийБланкГенерацияМакетаУХСервер.СохранитьМакетМногопериодногоБланка(СтруктураНастроек
	,ПолеТабличногоДокументаШаблон
	,ОбъектАБ
	,Новый УникальныйИдентификатор
	,Отказ);
	
	СтруктураНастроекАналитическогоБланкаАдрес = ПоместитьВоВременноеХранилище(СтруктураНастроек,УникальныйИдентификатор);
	СтруктураПараметровВход.Вставить("СтруктураНастроекАналитическогоБланкаАдрес",СтруктураНастроекАналитическогоБланкаАдрес);
	
КонецПроцедуры

Функция ПолучитьТаблицуПоказателейВидаОтчета(СтрокиОтчета,КолонкиОтчета) Экспорт  
	
	РезультатФункции = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПоказателиОтчетов.Ссылка КАК Ссылка,
	               |	ПоказателиОтчетов.Код КАК ПоказательКод,
	               |	ПоказателиОтчетов.Владелец КАК ВидОтчетаСсылка,
	               |	ПоказателиОтчетов.Владелец.Код КАК ВидОтчетаКод,
	               |	ПоказателиОтчетов.Колонка КАК Колонка,
	               |	ПоказателиОтчетов.Строка КАК Строка,
	               |	ПоказателиОтчетов.ВидИтога КАК ВидИтога,
	               |	ПоказателиОтчетов.ТипЗначения КАК ТипЗначения
	               |ИЗ
	               |	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	               |ГДЕ
	               |	ПоказателиОтчетов.Строка В (&Строки)
				   |	И ПоказателиОтчетов.Колонка В (&Колонки)
				   |	И ПоказателиОтчетов.ПометкаУдаления = ЛОЖЬ";
	
	
	Запрос.УстановитьПараметр("Строки", СтрокиОтчета);
	Запрос.УстановитьПараметр("Колонки", КолонкиОтчета);

	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
	
КонецФункции		// ПолучитьТаблицуПоказателейВидаОтчета()

Процедура ВывестиОбластьШаблона(ОбластьПриемник,СтруктураСвойствОформления,Значение)
	
	 ОбластьПриемник.Текст  = Значение;
	 Для Каждого СтрСвойство Из СтруктураСвойствОформления Цикл
		 ОбластьПриемник[СтрСвойство.Ключ] = СтрСвойство.Значение;
	 КонецЦикла;		 
	
КонецПроцедуры	

Процедура ВывестиОбластьШаблонаСОформлением(ПолеТабличногоДокументаШаблон,СтрПоказатель,СтруктураПараметров,ОбластьПриемник,Значение,текСтрокаВывода,текКолонкаВывода)
	
	СтруктураТекущихАналитикОтбор = СтруктураПараметров.СтруктураТекущихАналитикОтбор;
	
	//Смортим по структурами аналитик  является ли текущая область агрегатом
	СтруктураТекущихАналитик = Новый Структура;
	
	СтруктураАналитикКолонки  = ПолеТабличногоДокументаШаблон.Область(1,текКолонкаВывода,1,текКолонкаВывода).Расшифровка;
	Если СтруктураАналитикКолонки = Неопределено Тогда
		
	Иначе	
		Для Каждого СтрАналитика Из СтруктураАналитикКолонки.тАналитикиМакета Цикл	
			СтруктураТекущихАналитик.Вставить(СтрАналитика.Ключ);		
		КонецЦикла;	
		
	КонецЕсли;	
	
	СтруктураАналитикСтроки  = ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,1,текСтрокаВывода,1).Расшифровка;
	Если СтруктураАналитикСтроки = Неопределено Тогда
		
	Иначе	
		Для Каждого СтрАналитика Из СтруктураАналитикСтроки.тАналитикиМакета Цикл	
			СтруктураТекущихАналитик.Вставить(СтрАналитика.Ключ);		
		КонецЦикла;	
		
	КонецЕсли;	

	Для Каждого СтрАналитика Из СтруктураТекущихАналитикОтбор Цикл
		СтруктураТекущихАналитик.Вставить(СтрАналитика.Ключ);	
	КонецЦикла;	
	
	
	Если НЕ СтруктураТекущихАналитик.Свойство("Сценарий")
		ИЛИ НЕ СтруктураТекущихАналитик.Свойство("ПериодОтчета")
		ИЛИ НЕ СтруктураТекущихАналитик.Свойство("Организация") Тогда
		ВывестиОбластьШаблона(ОбластьПриемник,СтруктураПараметров.СтруктураОформления.ОбластьЯчейкаАгрегат,Значение);		
	Иначе			
		
		ТекСтрокаРаскрытие = СтруктураПараметров.кэшРаскрытияПоказателей_.Найти(СтруктураПараметров.СтрСтрока.СтрокаОтчета,"СтрокаОтчета");
		
		Если ЗначениеЗаполнено(ТекСтрокаРаскрытие["ВидАналитикиВалютаКод"]) И НЕ СтруктураТекущихАналитик.Свойство(ТекСтрокаРаскрытие["ВидАналитикиВалютаКод"]) Тогда
			ВывестиОбластьШаблона(ОбластьПриемник,СтруктураПараметров.СтруктураОформления.ОбластьЯчейкаАгрегат,Значение);		
			Возврат;
		КонецЕсли;	
		
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл			
			Если ЗначениеЗаполнено(ТекСтрокаРаскрытие["ВидАналитики"+Инд+"Код"]) И НЕ СтруктураТекущихАналитик.Свойство(ТекСтрокаРаскрытие["ВидАналитики"+Инд+"Код"]) Тогда
				ВывестиОбластьШаблона(ОбластьПриемник,СтруктураПараметров.СтруктураОформления.ОбластьЯчейкаАгрегат,Значение);		
				Возврат;
			КонецЕсли;	
		КонецЦикла;	
		
		ВывестиОбластьШаблона(ОбластьПриемник,СтруктураПараметров.СтруктураОформления.ОбластьЯчейкаНеЗаблокировано,Значение);		
		
	КонецЕсли;		
	
КонецПроцедуры	

Процедура СгенерироватьСтрокиШаблонаСводнойТаблицы(СтруктураПараметров)
	
	ПолеТабличногоДокументаШаблон       = СтруктураПараметров.ПолеТабличногоДокументаШаблон;
	КартинкаМакета          			= СтруктураПараметров.КартинкаМакета;
    ВыводитьАналитикиСтрокВИерархии 	= СтруктураПараметров.ВыводитьАналитикиСтрокВИерархии;
	ВыводитьАналитикиКолонокВИерархии 	= СтруктураПараметров.ВыводитьАналитикиКолонокВИерархии;
    АналитикиСтрок  					= СтруктураПараметров.АналитикиСтрок;
	АналитикиКолонок 					= СтруктураПараметров.АналитикиКолонок;
	нСтрока 							= СтруктураПараметров.нСтрока;
	нКолонка 							= СтруктураПараметров.нКолонка;
    СтруктураОформления                 = СтруктураПараметров.СтруктураОформления;
    НастройкиСоставаСтрокСводнойТаблицы = СтруктураПараметров.НастройкиСоставаСтрокСводнойТаблицы;
	
	текСтрокаВывода 	= ПолеТабличногоДокументаШаблон.ВысотаТаблицы+1;
    текКолонкаВывода    = нКолонка;
	КоличествоСтрок     = НастройкиСоставаСтрокСводнойТаблицы.Количество()-1;
	
	СтруктураОдинаковыхИмен = Новый Структура;
	СтруктураПараметров.Вставить("СтруктураОдинаковыхИмен",СтруктураОдинаковыхИмен);
	
	Для ИндексСтроки=0 по НастройкиСоставаСтрокСводнойТаблицы.Количество()-1 Цикл
			
		СтрСтрока 				= НастройкиСоставаСтрокСводнойТаблицы[ИндексСтроки];
		
		Если  ИндексСтроки<КоличествоСтрок Тогда
			СтрСледующаяСтрока  	= НастройкиСоставаСтрокСводнойТаблицы[ИндексСтроки+1];
		КонецЕсли;
				
		//Вывод строки с колонками
		ВывестиСтрокуШаблона(СтрСтрока,СтруктураПараметров);
		
		Если Не СтрСледующаяСтрока = Неопределено И СтрСтрока.УровеньСтроки<СтрСледующаяСтрока.УровеньСтроки Тогда 
			ПолеТабличногоДокументаШаблон.НачатьГруппуСтрок(); 
		КонецЕсли;

		текСтрокаВывода = текСтрокаВывода+1;
		
		Если Не СтрСледующаяСтрока = Неопределено И СтрСтрока.УровеньСтроки>СтрСледующаяСтрока.УровеньСтроки Тогда
             Для ИндГрупп = 1 по  СтрСтрока.УровеньСтроки-СтрСледующаяСтрока.УровеньСтроки Цикл 
				 ПолеТабличногоДокументаШаблон.ЗакончитьГруппуСтрок(); 
			 КонецЦикла;	 
		КонецЕсли;

		УровеньПредыдущейСтроки =  СтрСтрока.УровеньСтроки;
		
	КонецЦикла;	
	
	Попытка
		
		Для ИндГрупп = 1 по СтрСтрока.УровеньСтроки Цикл 
			ПолеТабличногоДокументаШаблон.ЗакончитьГруппуСтрок(); 
		КонецЦикла;	
	
	Исключение
	КонецПопытки;

	
КонецПроцедуры

Процедура ВывестиСтрокуШаблона(СтрСтрока,СтруктураПараметров);

	ПолеТабличногоДокументаШаблон       = СтруктураПараметров.ПолеТабличногоДокументаШаблон;
	КартинкаМакета          			= СтруктураПараметров.КартинкаМакета;
    ВыводитьАналитикиСтрокВИерархии 	= СтруктураПараметров.ВыводитьАналитикиСтрокВИерархии;
	ВыводитьАналитикиКолонокВИерархии 	= СтруктураПараметров.ВыводитьАналитикиКолонокВИерархии;
    АналитикиСтрок  					= СтруктураПараметров.АналитикиСтрок;
	АналитикиКолонок 					= СтруктураПараметров.АналитикиКолонок;
	нСтрока 							= СтруктураПараметров.нСтрока;
	нКолонка 							= СтруктураПараметров.нКолонка;
    СтруктураОформления                 = СтруктураПараметров.СтруктураОформления;
    кэшРаскрытияПоказателей_            = СтруктураПараметров.кэшРаскрытияПоказателей_;
	СтруктураОдинаковыхИмен             = СтруктураПараметров.СтруктураОдинаковыхИмен;
	
	текСтрокаВывода 	= ПолеТабличногоДокументаШаблон.ВысотаТаблицы+1;
    текКолонкаВывода    = нКолонка;

	//Ищем группу аналитик текущей строки
	ТекАналитики = кэшРаскрытияПоказателей_.Найти(СтрСтрока.СтрокаОтчета,"СтрокаОтчета");
	
	//Подготовка макета шаблона раскытия на основе текущей строки
	СтруктураПараметров.Вставить("СтрСтрока",СтрСтрока);
	ВывестиОбластьШаблона(ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,нКолонка,текСтрокаВывода,нКолонка),СтруктураОформления.ЗаголовокСтрокиСводнойТаблицы,СтрСтрока.СтрокаОтчета);		
	ТекущийОтступСтроки = (СтрСтрока.УровеньСтроки-1)*2;
	ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,нКолонка,текСтрокаВывода,нКолонка).Отступ  = ТекущийОтступСтроки;
	СтруктураРасшифровки = Новый Структура();
	СтруктураРасшифровки.Вставить("ТекущееЗначение",СтрСтрока.СтрокаОтчета);
	ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,нКолонка,текСтрокаВывода,нКолонка).Расшифровка  = СтруктураРасшифровки;

	//Выводим показатели текущей области строки
	ЗаполнитьПоказателиОбласти(СтруктураПараметров);
	
	//Нет показателей - не выводим область раскрытия
	Если ТекАналитики = Неопределено Тогда
		 Возврат;
	КонецЕсли;	
	
	СтруктураПараметров.Вставить("ТекАналитики",ТекАналитики);
	СтруктураПараметров.Вставить("ТекущийОтступСтроки",ТекущийОтступСтроки);
    СтруктураПараметров.Вставить("текКолонкаВывода",текКолонкаВывода);

	//Выводим аналитики строки, если есть
	Если ВыводитьАналитикиСтрокВИерархии Тогда 
		
		Если ВыводитьАналитикиКолонокВИерархии Тогда
			
		Иначе	
			 СформироватьМакетРаскрытияСтрокиИерархия(СтруктураПараметров);
		КонецЕсли;	
		
	Иначе
		
		текКолонкаВывода = текКолонкаВывода+1;
		
		Если ВыводитьАналитикиКолонокВИерархии Тогда
			
		Иначе	
			
			СформироватьМакетРаскрытияСтрокиРядом(СтруктураПараметров);
			
		КонецЕсли;
		
	КонецЕсли;	
	
	
	
КонецПроцедуры	

Процедура СформироватьМакетРаскрытияСтрокиИерархия(СтруктураПараметров)
	
	ПолеТабличногоДокументаШаблон       = СтруктураПараметров.ПолеТабличногоДокументаШаблон;
	КартинкаМакета          			= СтруктураПараметров.КартинкаМакета;
    ВыводитьАналитикиСтрокВИерархии 	= СтруктураПараметров.ВыводитьАналитикиСтрокВИерархии;
	ВыводитьАналитикиКолонокВИерархии 	= СтруктураПараметров.ВыводитьАналитикиКолонокВИерархии;
    АналитикиСтрок  					= СтруктураПараметров.АналитикиСтрок;
	АналитикиКолонок 					= СтруктураПараметров.АналитикиКолонок;
	нСтрока 							= СтруктураПараметров.нСтрока;
	нКолонка 							= СтруктураПараметров.нКолонка;
    СтруктураОформления                 = СтруктураПараметров.СтруктураОформления;
    кэшРаскрытияПоказателей_            = СтруктураПараметров.кэшРаскрытияПоказателей_;
    ТекАналитики                        = СтруктураПараметров.ТекАналитики;
	текКолонкаВывода                    = СтруктураПараметров.текКолонкаВывода;
	ТекущийОтступСтроки                 = СтруктураПараметров.ТекущийОтступСтроки;
	СтруктураОдинаковыхИмен             = СтруктураПараметров.СтруктураОдинаковыхИмен;
	НастройкиПолейСводнойТаблицы        = СтруктураПараметров.НастройкиПолейСводнойТаблицы;
	
	текСтрокаВывода 					= ПолеТабличногоДокументаШаблон.ВысотаТаблицы+1;
	ТекущийУровеньАналитики     		= 1;
	
	СтруктураИспользованныхАналитикСтрок = Новый Структура;
	
	СтруктураРасшифровкиАналитикСтроки   = Новый Структура;
	
	КартинкаВыведена = Ложь;
	
	Для Каждого СтрАналитикаСтроки Из АналитикиСтрок Цикл
		
		СтруктураВыводимыхАналитик = Новый Структура;
		
		Если НЕ СтрАналитикаСтроки.Поле = Перечисления.ПостоянныеПоляСводнойТаблицы.СтрокиОтчетов Тогда
			
			//Проверим,какие аналитики доступны для данной строки отчета.
			//ключевые аналитики доступны всегда
			Если ТипЗнч(СтрАналитикаСтроки.Поле) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные") Тогда 
				Для Инд =1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
					Если ТекАналитики["ВидАналитики"+Инд] = СтрАналитикаСтроки.Поле Тогда	
						СтруктураВыводимыхАналитик.Вставить(СтрАналитикаСтроки.КодПоля);
						Прервать;
					КонецЕсли;
				КонецЦикла;	
				Если ТекАналитики.ВидАналитикиВалюта =  СтрАналитикаСтроки.Поле Тогда
					СтруктураВыводимыхАналитик.Вставить(СтрАналитикаСтроки.КодПоля);
				КонецЕсли;			
			Иначе	
				СтруктураВыводимыхАналитик.Вставить(СтрАналитикаСтроки.КодПоля);
			КонецЕсли;	
			
			Если НЕ СтруктураВыводимыхАналитик.Количество() =0 Тогда //Есть аналитики - добавляем в макет строку		
				
				СвойстваАналитики = НастройкиПолейСводнойТаблицы.НайтиСтроки(Новый Структура("КодПоля",СтрАналитикаСтроки.КодПоля))[0];
				
				ПредставлениеПоля = СвойстваАналитики.ВыражениеПредставления;
				
				ВывестиОбластьШаблона(ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,текКолонкаВывода,текСтрокаВывода,текКолонкаВывода),СтруктураОформления.ЗаголовокАналитикиСводнойТаблицы,ПредставлениеПоля);	
				
				ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,текКолонкаВывода,текСтрокаВывода,текКолонкаВывода).Отступ = ТекущийОтступСтроки+2;
				ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,текКолонкаВывода,текСтрокаВывода,текКолонкаВывода).АвтоОтступ = 1;
				
				СтруктураРасшифровкиАналитикСтроки.Вставить(СтрАналитикаСтроки.КодПоля); 
				
				СтруктураРасшифровкиАналитикСтрокиТек = Новый Структура;
				Для Каждого СтрРасшифровка Из СтруктураРасшифровкиАналитикСтроки Цикл
					СтруктураРасшифровкиАналитикСтрокиТек.Вставить(СтрРасшифровка.Ключ);
				КонецЦикла;	
				
				//Запоминаем в служебной области структуру аналитик.
				Если ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,1,текСтрокаВывода,1).Расшифровка = Неопределено Тогда
					ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,1,текСтрокаВывода,1).Расшифровка = Новый Структура;
					ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,1,текСтрокаВывода,1).Расшифровка.Вставить("тАналитикиМакета",СтруктураРасшифровкиАналитикСтрокиТек);
				Иначе	
					ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,1,текСтрокаВывода,1).Расшифровка.Вставить("тАналитикиМакета",СтруктураРасшифровкиАналитикСтрокиТек);
				КонецЕсли;

				
				//Присваиваем уникальное имя области раскрытия строк
				СтруктураАналитик  = Новый Структура;
				ТзПредставлений    = Новый ТаблицаЗначений;
				ТзПредставлений.Колонки.Добавить("АналитикаПредставление");
				ТзПредставлений.Добавить();
				ТзПредставлений[0].АналитикаПредставление = СтрАналитикаСтроки.ПредставлениеПоля;
				СтруктураАналитик.Вставить(СтрАналитикаСтроки.КодПоля,ТзПредставлений);
				ИмяОбласти = АналитическийБланкГенерацияМакетаУХСервер.ПолучитьИмяОбластиПоСтруктуреАналитик(СтруктураАналитик,ПолеТабличногоДокументаШаблон,СтруктураОдинаковыхИмен);
				ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,0,текСтрокаВывода,0).Имя = ИмяОбласти;

				ЗаполнитьПоказателиОбласти(СтруктураПараметров);
				
				//Установка параметров раскрытия
				УстановитьРасшифровкуОбластиРаскрытия(СтруктураВыводимыхАналитик,АналитикиСтрок,СтруктураПараметров,КартинкаВыведена,,текСтрокаВывода);
				//

				текСтрокаВывода = текСтрокаВывода+1;
				ТекущийУровеньАналитики  = ТекущийУровеньАналитики +1;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;		
	
	//Форматируем именованную область в иерархическую
	ОбластьНачалаФорматирования 		= ПолеТабличногоДокументаШаблон.ВысотаТаблицы - (ТекущийУровеньАналитики-1);
	ОбластьОкончанияФорматирования      = ПолеТабличногоДокументаШаблон.ВысотаТаблицы;
	
	Для ИндСтрока = ОбластьНачалаФорматирования по ОбластьОкончанияФорматирования Цикл
		
		тОбласть 		= ПолеТабличногоДокументаШаблон.Область(ИндСтрока,0,ИндСтрока,0);
		тОбластьИмя     = тОбласть.Имя;
		тОбласть.Имя    = Неопределено;
		нОбласть        = ПолеТабличногоДокументаШаблон.Область(ИндСтрока,0,ОбластьОкончанияФорматирования,0);
        нОбласть.Имя    = тОбластьИмя;
		
	КонецЦикла;	
	
	

	
КонецПроцедуры

Процедура СформироватьМакетРаскрытияСтрокиРядом(СтруктураПараметров)
	
	ПолеТабличногоДокументаШаблон       = СтруктураПараметров.ПолеТабличногоДокументаШаблон;
	КартинкаМакета          			= СтруктураПараметров.КартинкаМакета;
    ВыводитьАналитикиСтрокВИерархии 	= СтруктураПараметров.ВыводитьАналитикиСтрокВИерархии;
	ВыводитьАналитикиКолонокВИерархии 	= СтруктураПараметров.ВыводитьАналитикиКолонокВИерархии;
    АналитикиСтрок  					= СтруктураПараметров.АналитикиСтрок;
	АналитикиКолонок 					= СтруктураПараметров.АналитикиКолонок;
	нСтрока 							= СтруктураПараметров.нСтрока;
	нКолонка 							= СтруктураПараметров.нКолонка;
    СтруктураОформления                 = СтруктураПараметров.СтруктураОформления;
    кэшРаскрытияПоказателей_            = СтруктураПараметров.кэшРаскрытияПоказателей_;
    ТекАналитики                        = СтруктураПараметров.ТекАналитики;
	текКолонкаВывода                    = СтруктураПараметров.текКолонкаВывода;
	ТекущийОтступСтроки                 = СтруктураПараметров.ТекущийОтступСтроки;
	СтруктураОдинаковыхИмен             = СтруктураПараметров.СтруктураОдинаковыхИмен;
	НастройкиПолейСводнойТаблицы        = СтруктураПараметров.НастройкиПолейСводнойТаблицы;
	
	текСтрокаВывода 					= ПолеТабличногоДокументаШаблон.ВысотаТаблицы+1;
	ТекущийУровеньАналитики     		= 1;
	
	СтруктураИспользованныхАналитикСтрок = Новый Структура;
	
	текСтрокаВывода 	= ПолеТабличногоДокументаШаблон.ВысотаТаблицы+1;
	
	СтруктураВыводимыхАналитик = Новый Структура;
    ВыводитьСтрокуСАналитиками = Ложь;
	КартинкаВыведена = Ложь;

	Для Каждого СтрАналитикаСтроки Из АналитикиСтрок Цикл
		
		СтруктураВыводимыхАналитик.Вставить(СтрАналитикаСтроки.КодПоля);

		Если НЕ СтрАналитикаСтроки.Поле = Перечисления.ПостоянныеПоляСводнойТаблицы.СтрокиОтчетов Тогда
			
			//Проверим,какие аналитики доступны для данной строки отчета.
			//ключевые аналитики доступны всегда
			Если ТипЗнч(СтрАналитикаСтроки.Поле) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные") Тогда 
				Для Инд =1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
					Если ТекАналитики["ВидАналитики"+Инд] = СтрАналитикаСтроки.Поле Тогда	
						ПредставлениеПоля = НастройкиПолейСводнойТаблицы.НайтиСтроки(Новый Структура("КодПоля",СтрАналитикаСтроки.КодПоля))[0].ВыражениеПредставления;
						СтруктураВыводимыхАналитик.Вставить(СтрАналитикаСтроки.КодПоля,ПредставлениеПоля);
						ВыводитьСтрокуСАналитиками = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;	
				Если ТекАналитики.ВидАналитикиВалюта =  СтрАналитикаСтроки.Поле Тогда
					ПредставлениеПоля = НастройкиПолейСводнойТаблицы.НайтиСтроки(Новый Структура("КодПоля",СтрАналитикаСтроки.КодПоля))[0].ВыражениеПредставления;
					СтруктураВыводимыхАналитик.Вставить(СтрАналитикаСтроки.КодПоля,ПредставлениеПоля);
					ВыводитьСтрокуСАналитиками = Истина;
				КонецЕсли;		
			Иначе	
				ПредставлениеПоля = НастройкиПолейСводнойТаблицы.НайтиСтроки(Новый Структура("КодПоля",СтрАналитикаСтроки.КодПоля))[0].ВыражениеПредставления;
				СтруктураВыводимыхАналитик.Вставить(СтрАналитикаСтроки.КодПоля,ПредставлениеПоля);
				ВыводитьСтрокуСАналитиками = Истина;
			КонецЕсли;	
				
		КонецЕсли;
	КонецЦикла;
	
	Если ВыводитьСтрокуСАналитиками  Тогда //Есть аналитики - добавляем в макет строку		
		
		Для Каждого ВыводимаяАналитика Из СтруктураВыводимыхАналитик Цикл
			
			ВывестиОбластьШаблона(ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,текКолонкаВывода,текСтрокаВывода,текКолонкаВывода),СтруктураОформления.ЗаголовокАналитикиСводнойТаблицы,ВыводимаяАналитика.Значение);				
					
			текКолонкаВывода = текКолонкаВывода+1;
			
		КонецЦикла;
		
		
		//Запоминаем в служебной области структуру аналитик.
		Если ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,1,текСтрокаВывода,1).Расшифровка = Неопределено Тогда
			ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,1,текСтрокаВывода,1).Расшифровка = Новый Структура;
			ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,1,текСтрокаВывода,1).Расшифровка.Вставить("тАналитикиМакета",СтруктураВыводимыхАналитик);
		Иначе	
			ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,1,текСтрокаВывода,1).Расшифровка.Вставить("тАналитикиМакета",СтруктураВыводимыхАналитик);
		КонецЕсли;

		
		//Присваиваем уникальное имя области раскрытия строк
		СтруктураАналитик  = Новый Структура;
				
		ТзПредставлений    = Новый ТаблицаЗначений;
		ТзПредставлений.Колонки.Добавить("АналитикаПредставление");
		ТзПредставлений.Добавить();
		ТзПредставлений[0].АналитикаПредставление = "РаскрытиеСтроки";
		СтруктураАналитик.Вставить(ВыводимаяАналитика.Ключ,ТзПредставлений);
		ИмяОбласти = АналитическийБланкГенерацияМакетаУХСервер.ПолучитьИмяОбластиПоСтруктуреАналитик(СтруктураАналитик,ПолеТабличногоДокументаШаблон,СтруктураОдинаковыхИмен);
		ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,0,текСтрокаВывода,0).Имя = ИмяОбласти;
		
		//Установка параметров раскрытия
		СтруктураВыводимыхАналитикКопия = Новый Структура;
		Для Каждого СтрРасшифровка Из СтруктураВыводимыхАналитик Цикл
			Если ЗначениеЗаполнено(СтрРасшифровка.Значение) Тогда
				СтруктураВыводимыхАналитикКопия.Вставить(СтрРасшифровка.Ключ,СтрРасшифровка.Значение);
			КонецЕсли;	
		КонецЦикла;	
		
		УстановитьРасшифровкуОбластиРаскрытия(СтруктураВыводимыхАналитикКопия,АналитикиСтрок,СтруктураПараметров,КартинкаВыведена,,текСтрокаВывода);
		//

		ЗаполнитьПоказателиОбласти(СтруктураПараметров);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиОбласти(СтруктураПараметров)

	
	текПоказатели 							= СтруктураПараметров.текПоказатели;	
	нСтрока 								= СтруктураПараметров.нСтрока;
	нКолонка 								= СтруктураПараметров.нКолонкаНачалаПоказателей;
    СтруктураОформления                 	= СтруктураПараметров.СтруктураОформления;
	ПолеТабличногоДокументаШаблон       	= СтруктураПараметров.ПолеТабличногоДокументаШаблон;
	НастройкиСоставаКолонокСводнойТаблицы   = СтруктураПараметров.НастройкиСоставаКолонокСводнойТаблицы;
	
	текКолонкаВывода = нКолонка+1;
	текСтрокаВывода  = ПолеТабличногоДокументаШаблон.ВысотаТаблицы;
	
	Если СтруктураПараметров.ВыводитьАналитикиКолонокВИерархии Тогда
		
	Иначе	
		
		ИндексОперанда = 1;

		Для Каждого СтрКолонка Из НастройкиСоставаКолонокСводнойТаблицы Цикл
			
			Если Не СтрКолонка.ПризнакИспользования Тогда
				 Продолжить;
			КонецЕсли;	
			
			тПоказатель =  текПоказатели.НайтиСтроки(Новый Структура("Строка,Колонка",СтруктураПараметров.СтрСтрока.СтрокаОтчета,СтрКолонка.КолонкаОтчета));
			
			Если тПоказатель.Количество() = 1 Тогда
				
				СтрПоказатель 		=  тПоказатель[0];
				ТекстЯчейки 		= СокрЛП(СтрПоказатель.ВидОтчетаКод) + "." +СокрЛП(СтрПоказатель.ПоказательКод);	
				ОбластьЯчейки   	= ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,текКолонкаВывода,текСтрокаВывода,текКолонкаВывода);	
												
				ВывестиОбластьШаблонаСОформлением(ПолеТабличногоДокументаШаблон,СтрПоказатель,СтруктураПараметров,ОбластьЯчейки,ТекстЯчейки,текСтрокаВывода,текКолонкаВывода);
				
				УстановитьРасшифровкуЯчейки(СтруктураПараметров,СтрКолонка,СтрПоказатель,ОбластьЯчейки,ТекстЯчейки,ИндексОперанда);

				
			Иначе	//нет показателя  - выводим Х;
				
				ОбластьЯчейки   	= ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,текКолонкаВывода,текСтрокаВывода,текКолонкаВывода);	
				ВывестиОбластьШаблона(ОбластьЯчейки,СтруктураОформления.ОбластьЯчейкаЗаблокировано,"Х");
				
			КонецЕсли;	
			
			текКолонкаВывода = текКолонкаВывода+1;
			
		КонецЦикла;
		
	КонецЕсли;	
		
КонецПроцедуры

Процедура УстановитьРасшифровкуЯчейки(СтруктураПараметров,СтрКолонка,СтрПоказатель,ОбластьЯчейки,ТекстЯчейки,ИндексОперанда)
	
	ПолеТабличногоДокументаШаблон  = СтруктураПараметров.ПолеТабличногоДокументаШаблон;
	
	СтруктураРасшифровки = Новый Структура();
	
	//Если не колонка = текущее значение, установим дополнительные свойства
	РасшифровкаГруппОтборов = Новый Структура;
		
	Если СтрКолонка.ТипКолонки = Перечисления.ВидыКолонокСводнойТаблицы.БазовоеЗначение Тогда  //Это показатель
		Если ЗначениеЗаполнено(СтрКолонка.Сценарий) Тогда
			РасшифровкаГруппОтборов.Вставить("Сценарий","Сценарий\Равно\"+ЗначениеВСтрокуВнутр(СтрКолонка.Сценарий));
			ОбластьЯчейки.ЦветФона      =  СтруктураПараметров.СтруктураОформления.ОбластьЯчейкаАгрегат.ЦветФона;
		КонецЕсли;	
		Если  ЗначениеЗаполнено(СтрКолонка.Организация) Тогда
			РасшифровкаГруппОтборов.Вставить("Организация","Организация\Равно\"+ЗначениеВСтрокуВнутр(СтрКолонка.Организация));
			ОбластьЯчейки.ЦветФона      =  СтруктураПараметров.СтруктураОформления.ОбластьЯчейкаАгрегат.ЦветФона;
		КонецЕсли;	
		Если  ЗначениеЗаполнено(СтрКолонка.Проект) Тогда						
			РасшифровкаГруппОтборов.Вставить("Проект","Проект\Равно\"+ЗначениеВСтрокуВнутр(СтрКолонка.Проект));
			ОбластьЯчейки.ЦветФона      =  СтруктураПараметров.СтруктураОформления.ОбластьЯчейкаАгрегат.ЦветФона;
		КонецЕсли;	
		Если  ЗначениеЗаполнено(СтрКолонка.ПериодОтчета) Тогда	
			РасшифровкаГруппОтборов.Вставить("ПериодС","ПериодС\Равно\"+ЗначениеВСтрокуВнутр(СтрКолонка.ПериодОтчета));
			РасшифровкаГруппОтборов.Вставить("ПериодПо","ПериодПо\Равно\"+ЗначениеВСтрокуВнутр(СтрКолонка.ПериодОтчета));
			ОбластьЯчейки.ЦветФона      =  СтруктураПараметров.СтруктураОформления.ОбластьЯчейкаАгрегат.ЦветФона;
		КонецЕсли;	
		Если  ЗначениеЗаполнено(СтрКолонка.ПериодСдвиг) Тогда							
			РасшифровкаГруппОтборов.Вставить("ПериодС","ПериодС\Период начала со сдвигом\"+ЗначениеВСтрокуВнутр(СтрКолонка.ПериодСдвиг));
			РасшифровкаГруппОтборов.Вставить("ПериодПо","ПериодПо\Период окончания со сдвигом\"+ЗначениеВСтрокуВнутр(СтрКолонка.ПериодСдвиг));	
			ОбластьЯчейки.ЦветФона      =  СтруктураПараметров.СтруктураОформления.ОбластьЯчейкаАгрегат.ЦветФона;
		КонецЕсли;	
		
		СтруктураРасшифровки.Вставить("Ссылка"				,СтрПоказатель.Ссылка);
		ОбластьЯчейки.Имя 	= АналитическийБланкГенерацияМакетаУХСервер.ПолучитьИмяСледующейОбластиСервер(ПолеТабличногоДокументаШаблон, СокрЛП(СтрПоказатель.ВидОтчетаКод), СокрЛП(СтрПоказатель.ПоказательКод)); 
		
		Если СтрКолонка.ВыводитьЗначениеВДополнительнойВалюте Тогда	
			СтруктураРасшифровки.Вставить("ОтображатьСуммуВДопВалюте",Истина);	
		КонецЕсли;	
	
	ИначеЕсли СтрКолонка.ТипКолонки = Перечисления.ВидыКолонокСводнойТаблицы.ОтклонениеАБС Тогда	//Это абс.формула
		
		Если НЕ СтрПоказатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			ВывестиОбластьШаблона(ОбластьЯчейки,СтруктураПараметров.СтруктураОформления.ОбластьЯчейкаЗаблокировано,"Х"); 
			Возврат;
		КонецЕсли;	
		
		РасшифровкаФормулы = Новый ТаблицаЗначений;
		РасшифровкаФормулы.Колонки.Добавить("Показатель",Новый ОписаниеТипов("СправочникСсылка.ПоказателиОтчетов"));
		РасшифровкаФормулы.Колонки.Добавить("ИмяВФормуле");
		РасшифровкаФормулы.Колонки.Добавить("ИндексПоказателя");
		
		РасшифровкаОперандовФормулы  = Новый ТаблицаЗначений;
		РасшифровкаОперандовФормулы.Колонки.Добавить("ИмяОперанда",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(150));
		РасшифровкаОперандовФормулы.Колонки.Добавить("Ключ",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
		РасшифровкаОперандовФормулы.Колонки.Добавить("Значение");
		
		ТекстФормулы = "["+ТекстЯчейки+"] - ["+ТекстЯчейки+"#"+ИндексОперанда+"]";
		
		нСтрРасшифровка = РасшифровкаФормулы.Добавить();
		нСтрРасшифровка.Показатель   = СтрПоказатель.Ссылка;
		нСтрРасшифровка.ИмяВФормуле  = ТекстЯчейки;
		нСтрРасшифровка.ИндексПоказателя   = 0;

		нСтрРасшифровка = РасшифровкаФормулы.Добавить();
		нСтрРасшифровка.Показатель   = СтрПоказатель.Ссылка;
		нСтрРасшифровка.ИмяВФормуле  = ТекстЯчейки+"#"+ИндексОперанда;
		нСтрРасшифровка.ИндексПоказателя   = 1;
				
		Если ЗначениеЗаполнено(СтрКолонка.Сценарий) Тогда
			нРасшифровкаГруппОтборовОперандов 				= РасшифровкаОперандовФормулы.Добавить();
			нРасшифровкаГруппОтборовОперандов.ИмяОперанда  	= ТекстЯчейки+"#"+ИндексОперанда;
			нРасшифровкаГруппОтборовОперандов.Ключ          = "Сценарий";
			нРасшифровкаГруппОтборовОперандов.Значение 		= "Сценарий\Равно\"+ЗначениеВСтрокуВнутр(СтрКолонка.Сценарий);
		КонецЕсли;	
		Если  ЗначениеЗаполнено(СтрКолонка.Организация) Тогда		
			нРасшифровкаГруппОтборовОперандов 				= РасшифровкаОперандовФормулы.Добавить();
			нРасшифровкаГруппОтборовОперандов.ИмяОперанда  	= ТекстЯчейки+"#"+ИндексОперанда;
			нРасшифровкаГруппОтборовОперандов.Ключ          = "Организация";
			нРасшифровкаГруппОтборовОперандов.Значение 		= "Организация\Равно\"+ЗначениеВСтрокуВнутр(СтрКолонка.Организация);
		КонецЕсли;	
		Если  ЗначениеЗаполнено(СтрКолонка.Проект) Тогда						
			нРасшифровкаГруппОтборовОперандов 				= РасшифровкаОперандовФормулы.Добавить();
			нРасшифровкаГруппОтборовОперандов.ИмяОперанда  	= ТекстЯчейки+"#"+ИндексОперанда;
			нРасшифровкаГруппОтборовОперандов.Ключ          = "Проект";
			нРасшифровкаГруппОтборовОперандов.Значение 		= "Проект\Равно\"+ЗначениеВСтрокуВнутр(СтрКолонка.Проект);
		КонецЕсли;	
		Если  ЗначениеЗаполнено(СтрКолонка.ПериодОтчета) Тогда	
			
			нРасшифровкаГруппОтборовОперандов 				= РасшифровкаОперандовФормулы.Добавить();
			нРасшифровкаГруппОтборовОперандов.ИмяОперанда  	= ТекстЯчейки+"#"+ИндексОперанда;
			нРасшифровкаГруппОтборовОперандов.Ключ          = "ПериодС";
			нРасшифровкаГруппОтборовОперандов.Значение 		= "ПериодС\Равно\"+ЗначениеВСтрокуВнутр(СтрКолонка.ПериодОтчета);

			нРасшифровкаГруппОтборовОперандов 				= РасшифровкаОперандовФормулы.Добавить();
			нРасшифровкаГруппОтборовОперандов.ИмяОперанда  	= ТекстЯчейки+"#"+ИндексОперанда;
			нРасшифровкаГруппОтборовОперандов.Ключ          = "ПериодПо";
			нРасшифровкаГруппОтборовОперандов.Значение 		= "ПериодПо\Равно\"+ЗначениеВСтрокуВнутр(СтрКолонка.ПериодОтчета);

		КонецЕсли;	
		Если  ЗначениеЗаполнено(СтрКолонка.ПериодСдвиг) Тогда							
				
			нРасшифровкаГруппОтборовОперандов 				= РасшифровкаОперандовФормулы.Добавить();
			нРасшифровкаГруппОтборовОперандов.ИмяОперанда  	= ТекстЯчейки+"#"+ИндексОперанда;
			нРасшифровкаГруппОтборовОперандов.Ключ          = "ПериодС";
			нРасшифровкаГруппОтборовОперандов.Значение 		= "ПериодС\Период начала со сдвигом\"+ЗначениеВСтрокуВнутр(СтрКолонка.ПериодСдвиг);

			нРасшифровкаГруппОтборовОперандов 				= РасшифровкаОперандовФормулы.Добавить();
			нРасшифровкаГруппОтборовОперандов.ИмяОперанда  	= ТекстЯчейки+"#"+ИндексОперанда;
			нРасшифровкаГруппОтборовОперандов.Ключ          = "ПериодПо";
			нРасшифровкаГруппОтборовОперандов.Значение 		= "ПериодПо\Период окончания со сдвигом\"+ЗначениеВСтрокуВнутр(СтрКолонка.ПериодСдвиг);

		КонецЕсли;	

		СтруктураРасшифровки.Вставить("РасшифровкаГруппОтборовОперандов"			,ЗначениеВСтрокуВнутр(РасшифровкаОперандовФормулы));
		СтруктураРасшифровки.Вставить("РасшифровкаФормулы"							,ЗначениеВстрокуВнутр(РасшифровкаФормулы));
		СтруктураРасшифровки.Вставить("ТекстФормулы"								,ТекстФормулы);
		ОбластьЯчейки.Имя 			= "Формула_"+СтрЗаменить(Новый УникальныйИдентификатор(),"-",""); 
		ОбластьЯчейки.ЦветФона      =  СтруктураПараметров.СтруктураОформления.ОбластьЯчейкаАгрегат.ЦветФона;
		ИндексОперанда = ИндексОперанда +1;
		
	ИначеЕсли СтрКолонка.ТипКолонки = Перечисления.ВидыКолонокСводнойТаблицы.ОтклонениеОтн Тогда	//Это отн.формула
		
		Если НЕ СтрПоказатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			ВывестиОбластьШаблона(ОбластьЯчейки,СтруктураПараметров.СтруктураОформления.ОбластьЯчейкаЗаблокировано,"Х"); 
			Возврат;
		КонецЕсли;	

			РасшифровкаФормулы = Новый ТаблицаЗначений;
		РасшифровкаФормулы.Колонки.Добавить("Показатель",Новый ОписаниеТипов("СправочникСсылка.ПоказателиОтчетов"));
		РасшифровкаФормулы.Колонки.Добавить("ИмяВФормуле");
		РасшифровкаФормулы.Колонки.Добавить("ИндексПоказателя");
		
		РасшифровкаОперандовФормулы  = Новый ТаблицаЗначений;
		РасшифровкаОперандовФормулы.Колонки.Добавить("ИмяОперанда",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(150));
		РасшифровкаОперандовФормулы.Колонки.Добавить("Ключ",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
		РасшифровкаОперандовФормулы.Колонки.Добавить("Значение");
		
		ТекстФормулы = "((["+ТекстЯчейки+"] - ["+ТекстЯчейки+"#"+ИндексОперанда+"])/["+ТекстЯчейки+"#"+ИндексОперанда+"])*100";
		
		нСтрРасшифровка = РасшифровкаФормулы.Добавить();
		нСтрРасшифровка.Показатель   = СтрПоказатель.Ссылка;
		нСтрРасшифровка.ИмяВФормуле  = ТекстЯчейки;
		нСтрРасшифровка.ИндексПоказателя   = 0;

		нСтрРасшифровка = РасшифровкаФормулы.Добавить();
		нСтрРасшифровка.Показатель   = СтрПоказатель.Ссылка;
		нСтрРасшифровка.ИмяВФормуле  = ТекстЯчейки+"#"+ИндексОперанда;
		нСтрРасшифровка.ИндексПоказателя   = 1;
				
		Если ЗначениеЗаполнено(СтрКолонка.Сценарий) Тогда
			нРасшифровкаГруппОтборовОперандов 				= РасшифровкаОперандовФормулы.Добавить();
			нРасшифровкаГруппОтборовОперандов.ИмяОперанда  	= ТекстЯчейки+"#"+ИндексОперанда;
			нРасшифровкаГруппОтборовОперандов.Ключ          = "Сценарий";
			нРасшифровкаГруппОтборовОперандов.Значение 		= "Сценарий\Равно\"+ЗначениеВСтрокуВнутр(СтрКолонка.Сценарий);
		КонецЕсли;	
		Если  ЗначениеЗаполнено(СтрКолонка.Организация) Тогда		
			нРасшифровкаГруппОтборовОперандов 				= РасшифровкаОперандовФормулы.Добавить();
			нРасшифровкаГруппОтборовОперандов.ИмяОперанда  	= ТекстЯчейки+"#"+ИндексОперанда;
			нРасшифровкаГруппОтборовОперандов.Ключ          = "Организация";
			нРасшифровкаГруппОтборовОперандов.Значение 		= "Организация\Равно\"+ЗначениеВСтрокуВнутр(СтрКолонка.Организация);
		КонецЕсли;	
		Если  ЗначениеЗаполнено(СтрКолонка.Проект) Тогда						
			нРасшифровкаГруппОтборовОперандов 				= РасшифровкаОперандовФормулы.Добавить();
			нРасшифровкаГруппОтборовОперандов.ИмяОперанда  	= ТекстЯчейки+"#"+ИндексОперанда;
			нРасшифровкаГруппОтборовОперандов.Ключ          = "Проект";
			нРасшифровкаГруппОтборовОперандов.Значение 		= "Проект\Равно\"+ЗначениеВСтрокуВнутр(СтрКолонка.Проект);
		КонецЕсли;	
		Если  ЗначениеЗаполнено(СтрКолонка.ПериодОтчета) Тогда	
			
			нРасшифровкаГруппОтборовОперандов 				= РасшифровкаОперандовФормулы.Добавить();
			нРасшифровкаГруппОтборовОперандов.ИмяОперанда  	= ТекстЯчейки+"#"+ИндексОперанда;
			нРасшифровкаГруппОтборовОперандов.Ключ          = "ПериодС";
			нРасшифровкаГруппОтборовОперандов.Значение 		= "ПериодС\Равно\"+ЗначениеВСтрокуВнутр(СтрКолонка.ПериодОтчета);

			нРасшифровкаГруппОтборовОперандов 				= РасшифровкаОперандовФормулы.Добавить();
			нРасшифровкаГруппОтборовОперандов.ИмяОперанда  	= ТекстЯчейки+"#"+ИндексОперанда;
			нРасшифровкаГруппОтборовОперандов.Ключ          = "ПериодПо";
			нРасшифровкаГруппОтборовОперандов.Значение 		= "ПериодПо\Равно\"+ЗначениеВСтрокуВнутр(СтрКолонка.ПериодОтчета);

		КонецЕсли;	
		Если  ЗначениеЗаполнено(СтрКолонка.ПериодСдвиг) Тогда							
				
			нРасшифровкаГруппОтборовОперандов 				= РасшифровкаОперандовФормулы.Добавить();
			нРасшифровкаГруппОтборовОперандов.ИмяОперанда  	= ТекстЯчейки+"#"+ИндексОперанда;
			нРасшифровкаГруппОтборовОперандов.Ключ          = "ПериодС";
			нРасшифровкаГруппОтборовОперандов.Значение 		= "ПериодС\Период начала со сдвигом\"+ЗначениеВСтрокуВнутр(СтрКолонка.ПериодСдвиг);

			нРасшифровкаГруппОтборовОперандов 				= РасшифровкаОперандовФормулы.Добавить();
			нРасшифровкаГруппОтборовОперандов.ИмяОперанда  	= ТекстЯчейки+"#"+ИндексОперанда;
			нРасшифровкаГруппОтборовОперандов.Ключ          = "ПериодПо";
			нРасшифровкаГруппОтборовОперандов.Значение 		= "ПериодПо\Период окончания со сдвигом\"+ЗначениеВСтрокуВнутр(СтрКолонка.ПериодСдвиг);

		КонецЕсли;	

		СтруктураРасшифровки.Вставить("РасшифровкаГруппОтборовОперандов"			,ЗначениеВСтрокуВнутр(РасшифровкаОперандовФормулы));
		СтруктураРасшифровки.Вставить("РасшифровкаФормулы"							,ЗначениеВстрокуВнутр(РасшифровкаФормулы));
		СтруктураРасшифровки.Вставить("ТекстФормулы"								,ТекстФормулы);
		ОбластьЯчейки.Имя 	= "Формула_"+СтрЗаменить(Новый УникальныйИдентификатор(),"-",""); 	
		ОбластьЯчейки.ЦветФона      =  СтруктураПараметров.СтруктураОформления.ОбластьЯчейкаАгрегат.ЦветФона;

		ИндексОперанда = ИндексОперанда +1;

	КонецЕсли;
	
	Если РасшифровкаГруппОтборов.Количество()>0 Тогда
		СтруктураРасшифровки.Вставить("РасшифровкаГруппОтборов",РасшифровкаГруппОтборов);
	КонецЕсли;	
					
	ОбластьЯчейки.Расшифровка 	 = СтруктураРасшифровки;
	
КонецПроцедуры

Процедура УстановитьШаблонУсловногоОформления(СтруктураОформления,МакетШаблонаСводнойТаблицы = Неопределено) Экспорт
	
	Если МакетШаблонаСводнойТаблицы = Неопределено Тогда
		 МакетШаблонаСводнойТаблицы 	= Обработки.АналитическийБланкСводнаяТаблица.ПолучитьМакет("МакетШаблонаСводнойТаблицы"); 
	КонецЕсли;	
	
	МассивСвойствОбластей = Новый Массив();
	
	МассивСвойствОбластей.Добавить("ЦветФона");
	МассивСвойствОбластей.Добавить("ЦветТекста");
	МассивСвойствОбластей.Добавить("ГраницаСверху");
    МассивСвойствОбластей.Добавить("ГраницаСнизу");
    МассивСвойствОбластей.Добавить("ГраницаСлева");
    МассивСвойствОбластей.Добавить("ГраницаСправа");
    МассивСвойствОбластей.Добавить("ЦветРамки");
    МассивСвойствОбластей.Добавить("ВертикальноеПоложение");
    МассивСвойствОбластей.Добавить("ГоризонтальноеПоложение");
    МассивСвойствОбластей.Добавить("Шрифт");
    МассивСвойствОбластей.Добавить("РазмещениеТекста");

    МассивМакетовОбластей  = Новый Массив;
	
	МассивМакетовОбластей.Добавить("ЗаголовокШапкиСводнойТаблицы");
	МассивМакетовОбластей.Добавить("ЗаголовокКолонкиСводнойТаблицы");
	МассивМакетовОбластей.Добавить("ЗаголовокСтрокиСводнойТаблицы");
	МассивМакетовОбластей.Добавить("ЗаголовокАналитикиСводнойТаблицы");
    МассивМакетовОбластей.Добавить("ОбластьЯчейкаАгрегат");
	МассивМакетовОбластей.Добавить("ОбластьЯчейкаНеЗаблокировано");
	МассивМакетовОбластей.Добавить("ОбластьЯчейкаЗаблокировано");

	Для Каждого Обл Из МассивМакетовОбластей Цикл
		
		СтруктураСвойствОформления          = Новый Структура;

		Для Каждого Свойство Из МассивСвойствОбластей Цикл
			
			СтруктураСвойствОформления.Вставить(Свойство,МакетШаблонаСводнойТаблицы.ПолучитьОбласть(Обл).Область(1,1,1,1)[Свойство]);
			
		КонецЦикла;	
		
		СтруктураОформления.Вставить(Обл,СтруктураСвойствОформления);
		
	КонецЦикла;
	
		
КонецПроцедуры	
	
Процедура СгенерироватьШапкуТаблицы(СтруктураПараметров);
	
	ПолеТабличногоДокументаШаблон       = СтруктураПараметров.ПолеТабличногоДокументаШаблон;
	КартинкаМакета          			= СтруктураПараметров.КартинкаМакета;
    ВыводитьАналитикиСтрокВИерархии 	= СтруктураПараметров.ВыводитьАналитикиСтрокВИерархии;
	ВыводитьАналитикиКолонокВИерархии 	= СтруктураПараметров.ВыводитьАналитикиКолонокВИерархии;
    АналитикиСтрок  					= СтруктураПараметров.АналитикиСтрок;
	АналитикиКолонок 					= СтруктураПараметров.АналитикиКолонок;
	нСтрока 							= СтруктураПараметров.нСтрока;
	нКолонка 							= СтруктураПараметров.нКолонка;
    СтруктураОформления                 = СтруктураПараметров.СтруктураОформления;
	НастройкиСоставаКолонокСводнойТаблицы = СтруктураПараметров.НастройкиСоставаКолонокСводнойТаблицы;
	НастройкиПолейСводнойТаблицы        = СтруктураПараметров.НастройкиПолейСводнойТаблицы;
	
	Если ВыводитьАналитикиСтрокВИерархии Тогда 
		Если ВыводитьАналитикиКолонокВИерархии Тогда
			
		Иначе	
			//Выводим колонку заголовка
			КартинкаВыведена = Ложь;
			текКолонкаВывода =  нКолонка;
			ВывестиОбластьШаблона(ПолеТабличногоДокументаШаблон.Область(нСтрока,нКолонка,нСтрока,нКолонка),СтруктураОформления.ЗаголовокШапкиСводнойТаблицы,"Сводная таблица");	
			ПолеТабличногоДокументаШаблон.Область(0,текКолонкаВывода,0,текКолонкаВывода).ШиринаКолонки = 35;
			текСтрокаВывода 	= нСтрока;
			
			СтруктураПараметров.Вставить("нКолонкаНачалаПоказателей",ПолеТабличногоДокументаШаблон.ШиринаТаблицы);
			
			Для Каждого СтрАналитикаКолонки Из АналитикиКолонок Цикл
				
				текКолонкаВывода    = нКолонка;
				
				ВывестиОбластьШаблона(ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,текКолонкаВывода,текСтрокаВывода,текКолонкаВывода),СтруктураОформления.ЗаголовокШапкиСводнойТаблицы,"Сводная таблица");	
				ПолеТабличногоДокументаШаблон.Область(0,текКолонкаВывода,0,текКолонкаВывода).ШиринаКолонки = 35;
				текСтрокаВывода = текСтрокаВывода +1;
				
			КонецЦикла;
			
			//Объединяем ячейки
			текКолонкаВывода    = нКолонка;
			ПолеТабличногоДокументаШаблон.Область(нСтрока,текКолонкаВывода,ПолеТабличногоДокументаШаблон.ВысотаТаблицы,текКолонкаВывода).Объединить();
			текКолонкаВывода = текКолонкаВывода+1;
			
			текСтрокаВывода  							= нСтрока;
			текКолонкаВывода 							= ПолеТабличногоДокументаШаблон.ШиринаТаблицы+1;
			КолонкаЗаголовкаРесурсов 					= ПолеТабличногоДокументаШаблон.ШиринаТаблицы+1;
			ИндексСтрокиРесурсов        				= Неопределено;			
			
			//Генерация раскрытия по колонкам
			Для Каждого СтрКолонка Из НастройкиСоставаКолонокСводнойТаблицы Цикл
				
				Если Не СтрКолонка.ПризнакИспользования Тогда
					Продолжить;
				КонецЕсли;	
				
				СтруктураРасшифровкиАналитикКолонки  		= Новый Структура;
				
				Для Каждого СтрАналитикаКолонки Из АналитикиКолонок Цикл
					Если НЕ СтрАналитикаКолонки.Поле = Перечисления.ПостоянныеПоляСводнойТаблицы.КолонкиОтчетов Тогда
						
						СвойстваАналитики = НастройкиПолейСводнойТаблицы.НайтиСтроки(Новый Структура("КодПоля",СтрАналитикаКолонки.КодПоля))[0];
						ПредставлениеПоля = СвойстваАналитики.ВыражениеПредставления;

						
						ВывестиОбластьШаблона(ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,текКолонкаВывода,текСтрокаВывода,текКолонкаВывода),СтруктураОформления.ЗаголовокКолонкиСводнойТаблицы,ПредставлениеПоля);	
						текСтрокаВывода = текСтрокаВывода+1;
												
						СтруктураРасшифровкиАналитикКолонки.Вставить(СтрАналитикаКолонки.КодПоля); 
						//Запоминаем в служебной области структуру аналитик.
						Если ПолеТабличногоДокументаШаблон.Область(1,текКолонкаВывода,1,текКолонкаВывода).Расшифровка = Неопределено Тогда
							ПолеТабличногоДокументаШаблон.Область(1,текКолонкаВывода,1,текКолонкаВывода).Расшифровка = Новый Структура;
							ПолеТабличногоДокументаШаблон.Область(1,текКолонкаВывода,1,текКолонкаВывода).Расшифровка.Вставить("тАналитикиМакета",СтруктураРасшифровкиАналитикКолонки);
						Иначе	
							ПолеТабличногоДокументаШаблон.Область(1,текКолонкаВывода,1,текКолонкаВывода).Расшифровка.Вставить("тАналитикиМакета",СтруктураРасшифровкиАналитикКолонки);
						КонецЕсли;
						
					Иначе	
						
						ВывестиОбластьШаблона(ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,текКолонкаВывода,текСтрокаВывода,текКолонкаВывода),СтруктураОформления.ЗаголовокКолонкиСводнойТаблицы,СтрКолонка.ПредставлениеКолонки);	
						ИндексСтрокиРесурсов = текСтрокаВывода;
						текСтрокаВывода = текСтрокаВывода+1;
						
					КонецЕсли;
				КонецЦикла;
				
				ПолеТабличногоДокументаШаблон.Область(0,текКолонкаВывода,0,текКолонкаВывода).ШиринаКолонки = 15;
		
				//Установка параметров раскрытия
				УстановитьРасшифровкуОбластиРаскрытия(СтруктураРасшифровкиАналитикКолонки,АналитикиКолонок,СтруктураПараметров,КартинкаВыведена,текКолонкаВывода);
				//
				
				текСтрокаВывода  = нСтрока;
				текКолонкаВывода = текКолонкаВывода+1;
				
			КонецЦикла;

			//Объединим ячейки с заголовками аналитик
			Для текСтрокаВывода = нСтрока По ПолеТабличногоДокументаШаблон.ВысотаТаблицы Цикл
				Если НЕ текСтрокаВывода = ИндексСтрокиРесурсов Тогда
					ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,КолонкаЗаголовкаРесурсов,текСтрокаВывода,ПолеТабличногоДокументаШаблон.ШиринаТаблицы).Объединить();
				КонецЕсли;
			КонецЦикла;
			
			//Присвоим имя области раскрытия по колонкам
			ПолеТабличногоДокументаШаблон.Область(0,нКолонка+1,0,ПолеТабличногоДокументаШаблон.ШиринаТаблицы).Имя = "Раскрытие_Колонки_1";

			СтруктураПараметров.Вставить("ПоследняяКолонкаЗаголовка",ПолеТабличногоДокументаШаблон.ШиринаТаблицы);
			
			//Генерация шапки для общего итога по колонкам
			Если  СтруктураПараметров.ВыводитьОбщийИтогПоКолонкам Тогда
				
				текСтрокаВывода  			= нСтрока;
				текКолонкаВывода 			= ПолеТабличногоДокументаШаблон.ШиринаТаблицы+1;
				КолонкаЗаголовкаРесурсов 	= ПолеТабличногоДокументаШаблон.ШиринаТаблицы+1;
				
				Для Каждого СтрКолонка Из НастройкиСоставаКолонокСводнойТаблицы Цикл
					
					Если Не СтрКолонка.ПризнакИспользования Тогда
						Продолжить;
					КонецЕсли;	
						
					Для Каждого СтрАналитикаКолонки Из АналитикиКолонок Цикл
						Если НЕ СтрАналитикаКолонки.Поле = Перечисления.ПостоянныеПоляСводнойТаблицы.КолонкиОтчетов Тогда
							ВывестиОбластьШаблона(ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,текКолонкаВывода,текСтрокаВывода,текКолонкаВывода),СтруктураОформления.ЗаголовокКолонкиСводнойТаблицы,"Итого");	
							текСтрокаВывода = текСтрокаВывода+1;
						Иначе	
							ВывестиОбластьШаблона(ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,текКолонкаВывода,текСтрокаВывода,текКолонкаВывода),СтруктураОформления.ЗаголовокКолонкиСводнойТаблицы,СтрКолонка.ПредставлениеКолонки);	
							текСтрокаВывода = текСтрокаВывода+1;
						КонецЕсли;
					КонецЦикла;
					
					ПолеТабличногоДокументаШаблон.Область(0,текКолонкаВывода,0,текКолонкаВывода).ШиринаКолонки = 15;
					
					текСтрокаВывода  = нСтрока;
					текКолонкаВывода = текКолонкаВывода+1;
					
				КонецЦикла;
				
				//Объединим ячейки с заголовками аналитик
				Для текСтрокаВывода = нСтрока По ПолеТабличногоДокументаШаблон.ВысотаТаблицы Цикл
					Если НЕ текСтрокаВывода = ИндексСтрокиРесурсов Тогда
						ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,КолонкаЗаголовкаРесурсов,текСтрокаВывода,ПолеТабличногоДокументаШаблон.ШиринаТаблицы).Объединить();
					КонецЕсли;
				КонецЦикла;
				
				
			КонецЕсли;//Генерация шапки для общего итога по колонкам
			
		КонецЕсли;
		
	Иначе
		Если ВыводитьАналитикиКолонокВИерархии Тогда
			
		Иначе
			
			КартинкаВыведена = Ложь;
			текСтрокаВывода 	= нСтрока;
			
			Для Каждого СтрАналитикаКолонки Из АналитикиКолонок Цикл
				
				текКолонкаВывода    = нКолонка;

				Для Каждого СтрАналитикаСтроки Из АналитикиСтрок Цикл
					Если НЕ СтрАналитикаСтроки.Поле = Перечисления.ПостоянныеПоляСводнойТаблицы.СтрокиОтчетов Тогда
						
						СвойстваАналитики = НастройкиПолейСводнойТаблицы.НайтиСтроки(Новый Структура("КодПоля",СтрАналитикаСтроки.КодПоля))[0];
						ПредставлениеПоля = Строка(СвойстваАналитики.Поле);

						ВывестиОбластьШаблона(ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,текКолонкаВывода,текСтрокаВывода,текКолонкаВывода),СтруктураОформления.ЗаголовокКолонкиСводнойТаблицы,ПредставлениеПоля);	
						ПолеТабличногоДокументаШаблон.Область(0,текКолонкаВывода,0,текКолонкаВывода).ШиринаКолонки = 23;

					Иначе	
						ВывестиОбластьШаблона(ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,текКолонкаВывода,текСтрокаВывода,текКолонкаВывода),СтруктураОформления.ЗаголовокШапкиСводнойТаблицы,"Сводная таблица");	
						ПолеТабличногоДокументаШаблон.Область(0,текКолонкаВывода,0,текКолонкаВывода).ШиринаКолонки = 35;

					КонецЕсли;
					текКолонкаВывода = текКолонкаВывода +1;
				КонецЦикла;
				
				текСтрокаВывода = текСтрокаВывода +1;
				
			КонецЦикла;
			
			//Объединяем ячейки
			текКолонкаВывода    = нКолонка;
			Для Каждого СтрАналитикаСтроки Из АналитикиСтрок Цикл
				 ПолеТабличногоДокументаШаблон.Область(нСтрока,текКолонкаВывода,ПолеТабличногоДокументаШаблон.ВысотаТаблицы,текКолонкаВывода).Объединить();
				 текКолонкаВывода = текКолонкаВывода+1;
			 КонецЦикла;
			 
			 СтруктураПараметров.Вставить("нКолонкаНачалаПоказателей",ПолеТабличногоДокументаШаблон.ШиринаТаблицы);
	 
			 текСтрокаВывода  			= нСтрока;
             текКолонкаВывода 			= ПолеТабличногоДокументаШаблон.ШиринаТаблицы+1;
			 КолонкаЗаголовкаРесурсов 	= ПолеТабличногоДокументаШаблон.ШиринаТаблицы+1;
			 //Аналитики колонок
			 Для Каждого СтрКолонка Из НастройкиСоставаКолонокСводнойТаблицы Цикл
				 
				 Если Не СтрКолонка.ПризнакИспользования Тогда
					 Продолжить;
				 КонецЕсли;	
				  
				 СтруктураРасшифровкиАналитикКолонки  		= Новый Структура;
				 
				 Для Каждого СтрАналитикаКолонки Из АналитикиКолонок Цикл
					 Если НЕ СтрАналитикаКолонки.Поле = Перечисления.ПостоянныеПоляСводнойТаблицы.КолонкиОтчетов Тогда
						 
						СвойстваАналитики = НастройкиПолейСводнойТаблицы.НайтиСтроки(Новый Структура("КодПоля",СтрАналитикаКолонки.КодПоля))[0];
						ПредставлениеПоля = СвойстваАналитики.ВыражениеПредставления;

						 ВывестиОбластьШаблона(ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,текКолонкаВывода,текСтрокаВывода,текКолонкаВывода),СтруктураОформления.ЗаголовокКолонкиСводнойТаблицы,ПредставлениеПоля);	
						 текСтрокаВывода = текСтрокаВывода+1;
						 
						 СтруктураРасшифровкиАналитикКолонки.Вставить(СтрАналитикаКолонки.КодПоля); 
						 //Запоминаем в служебной области структуру аналитик.
						 Если ПолеТабличногоДокументаШаблон.Область(1,текКолонкаВывода,1,текКолонкаВывода).Расшифровка = Неопределено Тогда
							 ПолеТабличногоДокументаШаблон.Область(1,текКолонкаВывода,1,текКолонкаВывода).Расшифровка = Новый Структура;
							 ПолеТабличногоДокументаШаблон.Область(1,текКолонкаВывода,1,текКолонкаВывода).Расшифровка.Вставить("тАналитикиМакета",СтруктураРасшифровкиАналитикКолонки);
						 Иначе	
							 ПолеТабличногоДокументаШаблон.Область(1,текКолонкаВывода,1,текКолонкаВывода).Расшифровка.Вставить("тАналитикиМакета",СтруктураРасшифровкиАналитикКолонки);
						 КонецЕсли;
							 
					 Иначе	
						 ВывестиОбластьШаблона(ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,текКолонкаВывода,текСтрокаВывода,текКолонкаВывода),СтруктураОформления.ЗаголовокКолонкиСводнойТаблицы,СтрКолонка.ПредставлениеКолонки);	
						 ИндексСтрокиРесурсов = текСтрокаВывода;
						 текСтрокаВывода = текСтрокаВывода+1;
					 КонецЕсли;
				 КонецЦикла;
				
				//Установка параметров раскрытия
				УстановитьРасшифровкуОбластиРаскрытия(СтруктураРасшифровкиАналитикКолонки,АналитикиКолонок,СтруктураПараметров,КартинкаВыведена,текКолонкаВывода);
				//
				ПолеТабличногоДокументаШаблон.Область(0,текКолонкаВывода,0,текКолонкаВывода).ШиринаКолонки = 15;
		
				текСтрокаВывода  = нСтрока;
				текКолонкаВывода = текКолонкаВывода+1;
			
			КонецЦикла;

			//Объединим ячейки с заголовками аналитик
			Для текСтрокаВывода = нСтрока По ПолеТабличногоДокументаШаблон.ВысотаТаблицы Цикл
				Если НЕ текСтрокаВывода = ИндексСтрокиРесурсов Тогда
					ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,КолонкаЗаголовкаРесурсов,текСтрокаВывода,ПолеТабличногоДокументаШаблон.ШиринаТаблицы).Объединить();
				КонецЕсли;
			КонецЦикла;

			 //Присвоим имя области раскрытия по колонкам
			ПолеТабличногоДокументаШаблон.Область(0,СтруктураПараметров.нКолонкаНачалаПоказателей+1,0,ПолеТабличногоДокументаШаблон.ШиринаТаблицы).Имя = "Раскрытие_Колонки_1";

			СтруктураПараметров.Вставить("ПоследняяКолонкаЗаголовка",ПолеТабличногоДокументаШаблон.ШиринаТаблицы);

			//Генерация шапки для общего итога по колонкам
			Если  СтруктураПараметров.ВыводитьОбщийИтогПоКолонкам Тогда
				
				текСтрокаВывода  			= нСтрока;
				текКолонкаВывода 			= ПолеТабличногоДокументаШаблон.ШиринаТаблицы+1;
				КолонкаЗаголовкаРесурсов 	= ПолеТабличногоДокументаШаблон.ШиринаТаблицы+1;
				
				Для Каждого СтрКолонка Из НастройкиСоставаКолонокСводнойТаблицы Цикл
					
					Если Не СтрКолонка.ПризнакИспользования Тогда
						Продолжить;
					КонецЕсли;	

					Для Каждого СтрАналитикаКолонки Из АналитикиКолонок Цикл
						Если НЕ СтрАналитикаКолонки.Поле = Перечисления.ПостоянныеПоляСводнойТаблицы.КолонкиОтчетов Тогда
							ВывестиОбластьШаблона(ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,текКолонкаВывода,текСтрокаВывода,текКолонкаВывода),СтруктураОформления.ЗаголовокКолонкиСводнойТаблицы,"Итого");	
							текСтрокаВывода = текСтрокаВывода+1;
						Иначе	
							ВывестиОбластьШаблона(ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,текКолонкаВывода,текСтрокаВывода,текКолонкаВывода),СтруктураОформления.ЗаголовокКолонкиСводнойТаблицы,СтрКолонка.ПредставлениеКолонки);	
							текСтрокаВывода = текСтрокаВывода+1;
						КонецЕсли;
					КонецЦикла;
					
					ПолеТабличногоДокументаШаблон.Область(0,текКолонкаВывода,0,текКолонкаВывода).ШиринаКолонки = 15;
					
					текСтрокаВывода  = нСтрока;
					текКолонкаВывода = текКолонкаВывода+1;
					
				КонецЦикла;
				
				//Объединим ячейки с заголовками аналитик
				Для текСтрокаВывода = нСтрока По ПолеТабличногоДокументаШаблон.ВысотаТаблицы Цикл
					Если НЕ текСтрокаВывода = ИндексСтрокиРесурсов Тогда
						ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,КолонкаЗаголовкаРесурсов,текСтрокаВывода,ПолеТабличногоДокументаШаблон.ШиринаТаблицы).Объединить();
					КонецЕсли;
				КонецЦикла;
					
			КонецЕсли;//Генерация шапки для общего итога по колонкам	
		КонецЕсли;
	КонецЕсли;

	СтруктураПараметров.Вставить("ПоследняяСтрокаЗаголовка",ПолеТабличногоДокументаШаблон.ВысотаТаблицы);
		
КонецПроцедуры

Процедура УстановитьРасшифровкуОбластиРаскрытия(СтруктураРасшифровкиАналитик,Аналитики,СтруктураПараметров,КартинкаВыведена,текКолонкаВывода=Неопределено,текСтрокаВывода=Неопределено)
	
	ПолеТабличногоДокументаШаблон  	= СтруктураПараметров.ПолеТабличногоДокументаШаблон;
	НастройкиПолейСводнойТаблицы   	= СтруктураПараметров.НастройкиПолейСводнойТаблицы;
	НастройкиПериодовСводнойТаблицы = СтруктураПараметров.НастройкиПериодовСводнойТаблицы;

	Если СтруктураРасшифровкиАналитик.Количество() =0 Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиАналитикРаскрытия 		= Обработки.АналитическийБланк.ПолучитьОписаниеТаблицыНастроекАналитик();
	ОбъектАналитическогоБланка_  	= Обработки.АналитическийБланк.Создать();
	ПараметрыОтбора         		= ОбъектАналитическогоБланка_.РасшифровкаГруппОтборов.Выгрузить(Новый Структура("УидГруппыОтборов",Неопределено));	
	
	Если текСтрокаВывода = Неопределено Тогда
		ОбластьЗаголовок = ПолеТабличногоДокументаШаблон.Область(1,текКолонкаВывода,1,текКолонкаВывода);	
	Иначе
		ОбластьЗаголовок = ПолеТабличногоДокументаШаблон.Область(текСтрокаВывода,1,текСтрокаВывода,1);	
	КонецЕсли;
	
	Если Не КартинкаВыведена Тогда
		ОбластьЗаголовок.Картинка 							=  СтруктураПараметров.КартинкаМакета;
		ОбластьЗаголовок.ГоризонтальноеПоложениеКартинки  	=  ГоризонтальноеПоложение.Центр;
		ОбластьЗаголовок.ВертикальноеПоложениеКартинки  	=  ВертикальноеПоложение.Центр;
		ОбластьЗаголовок.РазмерКартинки 				  	=  РазмерКартинки.РеальныйРазмер;
		КартинкаВыведена                                    =  Истина;	
	КонецЕсли;
	
	НастройкиПериодов 					= Неопределено;
	РасшифровкаВыводаИерархии           = Новый Структура;
	
	Для Каждого СтрАналитикаКолонки Из Аналитики Цикл
		
				
		Если НЕ СтрАналитикаКолонки.Поле = Перечисления.ПостоянныеПоляСводнойТаблицы.КолонкиОтчетов 
			И НЕ СтрАналитикаКолонки.Поле = Перечисления.ПостоянныеПоляСводнойТаблицы.СтрокиОтчетов Тогда
						
			СвойстваАналитики =  НастройкиПолейСводнойТаблицы.НайтиСтроки(Новый Структура("КодПоля",СтрАналитикаКолонки.КодПоля))[0];

			Если СтрАналитикаКолонки.Поле = Перечисления.ПостоянныеПоляСводнойТаблицы.ПериодОтчета Тогда
				
				нПараметрОтбора 					= ПараметрыОтбора.Добавить();
				нПараметрОтбора.Поле        		= "Период начала отбора";
				нПараметрОтбора.Отбор       		= "Период начала отчета";
				нПараметрОтбора.ЗначениеОтбора      = Неопределено;
				нПараметрОтбора.ЗначениеОтбораСтрока  = ЗначениеВСтрокуВнутр(нПараметрОтбора.ЗначениеОтбора);
				нПараметрОтбора.ТипЗначенияСтрока   = СтрАналитикаКолонки.ТипСтрока;
				нПараметрОтбора.Использовать   		= Истина;
				нПараметрОтбора.ПолеКод  			= "ПериодС";
				нПараметрОтбора.ПорядокОтбора		= 1;
				//нПараметрОтбора.ПолеСсылка          = СтрАналитикаКолонки.Поле;
				
				нПараметрОтбора 					= ПараметрыОтбора.Добавить();
				нПараметрОтбора.Поле        		= "Период окончания отбора";
				нПараметрОтбора.Отбор       		= "Период окончания отчета";
				нПараметрОтбора.ЗначениеОтбора      = Неопределено;
				нПараметрОтбора.ЗначениеОтбораСтрока  = ЗначениеВСтрокуВнутр(нПараметрОтбора.ЗначениеОтбора);
				нПараметрОтбора.ТипЗначенияСтрока   = СтрАналитикаКолонки.ТипСтрока;
				нПараметрОтбора.Использовать   		= Истина;
				нПараметрОтбора.ПолеКод  			= "ПериодПо";
				нПараметрОтбора.ПорядокОтбора				= 1;
				//нПараметрОтбора.ПолеСсылка          = СтрАналитикаКолонки.Поле;
				
				НастройкиПериодов = НастройкиПериодовСводнойТаблицы;
				
			ИначеЕсли СтрАналитикаКолонки.Поле = Перечисления.ПостоянныеПоляСводнойТаблицы.Организация Тогда
				
				нПараметрОтбора 					= ПараметрыОтбора.Добавить();
				нПараметрОтбора.Поле        		= СтрАналитикаКолонки.ПредставлениеПоля;
				нПараметрОтбора.Отбор       		= "Отбор не производится";
				нПараметрОтбора.ЗначениеОтбора      = Неопределено;
				нПараметрОтбора.ЗначениеОтбораСтрока  = ЗначениеВСтрокуВнутр(нПараметрОтбора.ЗначениеОтбора);							нПараметрОтбора.ТипЗначенияСтрока   = СтрАналитикаКолонки.ТипСтрока;
				нПараметрОтбора.Использовать   		= Истина;
				нПараметрОтбора.ПолеКод  			= СтрАналитикаКолонки.КодПоля;
				нПараметрОтбора.ПорядокОтбора				= 1;
				//нПараметрОтбора.ПолеСсылка          = СтрАналитикаКолонки.Поле;
				
				
			ИначеЕсли СтрАналитикаКолонки.Поле = Перечисления.ПостоянныеПоляСводнойТаблицы.Сценарий Тогда
				
				
				нПараметрОтбора 					= ПараметрыОтбора.Добавить();
				нПараметрОтбора.Поле        		= СтрАналитикаКолонки.ПредставлениеПоля;
				нПараметрОтбора.Отбор       		= "Сценарий отчета";
				нПараметрОтбора.ЗначениеОтбора      = Неопределено;
				нПараметрОтбора.ЗначениеОтбораСтрока  = ЗначениеВСтрокуВнутр(нПараметрОтбора.ЗначениеОтбора);							нПараметрОтбора.ТипЗначенияСтрока   = СтрАналитикаКолонки.ТипСтрока;
				нПараметрОтбора.Использовать   		= Истина;
				нПараметрОтбора.ПолеКод  			= СтрАналитикаКолонки.КодПоля;
				нПараметрОтбора.ПорядокОтбора				= 1;
				//нПараметрОтбора.ПолеСсылка          = СтрАналитикаКолонки.Поле;
				
				
			ИначеЕсли СтрАналитикаКолонки.Поле = Перечисления.ПостоянныеПоляСводнойТаблицы.Проект Тогда
				
				нПараметрОтбора 					= ПараметрыОтбора.Добавить();
				нПараметрОтбора.Поле        		= СтрАналитикаКолонки.ПредставлениеПоля;
				нПараметрОтбора.Отбор       		= "Отбор не производится";
				нПараметрОтбора.ЗначениеОтбора      = Неопределено;
				нПараметрОтбора.ЗначениеОтбораСтрока  = ЗначениеВСтрокуВнутр(нПараметрОтбора.ЗначениеОтбора);							нПараметрОтбора.ТипЗначенияСтрока   = СтрАналитикаКолонки.ТипСтрока;
				нПараметрОтбора.Использовать   		= Истина;
				нПараметрОтбора.ПолеКод  			= СтрАналитикаКолонки.КодПоля;
				нПараметрОтбора.ПорядокОтбора				= 1;
				//нПараметрОтбора.ПолеСсылка          = СтрАналитикаКолонки.Поле;
				
				
			Иначе	
				нПараметрОтбора 					= ПараметрыОтбора.Добавить();
				нПараметрОтбора.Поле        		= СтрАналитикаКолонки.ПредставлениеПоля;
				нПараметрОтбора.Отбор       		= "Отбор не производится";
				нПараметрОтбора.ЗначениеОтбора      = Неопределено;
				нПараметрОтбора.ЗначениеОтбораСтрока  = ЗначениеВСтрокуВнутр(нПараметрОтбора.ЗначениеОтбора);							нПараметрОтбора.ТипЗначенияСтрока   = СтрАналитикаКолонки.ТипСтрока;
				нПараметрОтбора.Использовать   		= Истина;
				нПараметрОтбора.ПолеКод  			= СтрАналитикаКолонки.КодПоля;
				нПараметрОтбора.ПорядокОтбора				= 1;
				//нПараметрОтбора.ПолеСсылка          = СтрАналитикаКолонки.Поле;	
				
			КонецЕсли;
			
			Если Не СтруктураРасшифровкиАналитик.Свойство(СтрАналитикаКолонки.КодПоля) Тогда
				Продолжить;
			КонецЕсли;	
						
			нАналитика = НастройкиАналитикРаскрытия.Добавить();
			нАналитика.АналитикаКод 			= СтрАналитикаКолонки.КодПоля;
			нАналитика.Пометка		 			= Истина;
			нАналитика.АналитикаПредставление 	= СтрАналитикаКолонки.ПредставлениеПоля;
			нАналитика.АналитикаТипСтрока 		= СтрАналитикаКолонки.ТипСтрока;
			Если СтрАналитикаКолонки.Поле = Перечисления.ПостоянныеПоляСводнойТаблицы.Организация 
				ИЛИ СтрАналитикаКолонки.Поле = Перечисления.ПостоянныеПоляСводнойТаблицы.ПериодОтчета
				ИЛИ СтрАналитикаКолонки.Поле = Перечисления.ПостоянныеПоляСводнойТаблицы.Сценарий
				ИЛИ СтрАналитикаКолонки.Поле = Перечисления.ПостоянныеПоляСводнойТаблицы.Проект ТОГДА
				
				нАналитика.ЭтоАналитикаВерсии 		= Истина;
				
			Иначе			
				нАналитика.ЭтоАналитикаВерсии 		= Ложь;
			КонецЕсли;			
			
			ТекАналитикаПоСортировке 			= 	НастройкиПолейСводнойТаблицы.НайтиСтроки(Новый Структура("КодПоля",СтрАналитикаКолонки.КодПоля))[0];
			нАналитика.АналитикаСортировкаСКД 	= 	ЗначениеИзСтрокиВнутр(ТекАналитикаПоСортировке.ВыражениеУпорядочиванияСКДСтрока);		
			нАналитика.ПорядокАналитики     	= 	99;
			//нАналитика.ИерархииАналитики		 = СтрАналитика.Значение[0].ИерархииАналитики;
			Если СвойстваАналитики.ВыводитьИерархиюЭлементов Тогда
				
				РасшифровкаВыводаИерархии.Вставить(СтрАналитикаКолонки.КодПоля,
				НастройкиПолейСводнойТаблицы.Скопировать(Новый Структура("КодПоля",СтрАналитикаКолонки.КодПоля),"ВыводитьИерархиюЭлементов,СкрыватьЭлементыГруппы,ВыводитьДанныеСУровня,ВыводитьДанныеДоУровня"));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если ОбластьЗаголовок.Расшифровка = Неопределено Тогда
		СтруктураРасшифровкиОбласти 	= Новый Структура;
		ОбластьЗаголовок.Расшифровка    = СтруктураРасшифровкиОбласти;
	Иначе	
		СтруктураРасшифровкиОбласти = ОбластьЗаголовок.Расшифровка;
	КонецЕсли;	
	
	СтруктураРасшифровкиОбласти.Вставить("НастройкиАналитикРаскрытия",ЗначениевстрокуВнутр(НастройкиАналитикРаскрытия));
	СтруктураРасшифровкиОбласти.Вставить("ПараметрыОтбора",ЗначениевстрокуВнутр(ПараметрыОтбора));
	Если НЕ НастройкиПериодов = Неопределено Тогда
		 СтруктураРасшифровкиОбласти.Вставить("НастройкиПериодов",ЗначениевстрокуВнутр(НастройкиПериодов));
	КонецЕсли;	
	Если РасшифровкаВыводаИерархии.Количество()>0 Тогда
		 СтруктураРасшифровкиОбласти.Вставить("НастройкиИерархии",ЗначениевстрокуВнутр(РасшифровкаВыводаИерархии));
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти


#Область КонвертацияБланковСводнойТаблицы

Процедура СконвертироватьБланки() Экспорт
	
	
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БланкиОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БланкиОтчетов КАК БланкиОтчетов
	|ГДЕ
	|	БланкиОтчетов.РежимБланка = 1
	|	И БланкиОтчетов.ПометкаУдаления = Ложь";
	
	Запрос.УстановитьПараметр("", );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ВсегоБланков = 0;
	СконвертированныхБланков = 0;
    ОшибочныхБланков   = 0;
	
	Пока Выборка.Следующий() Цикл
	
		Попытка
			ВыполнитьКонвертациюСервер(Выборка.Ссылка);
			СконвертированныхБланков = СконвертированныхБланков+1;
		Исключение
			ИнфоОшибки = ИнформацияОбОшибке();
			ТекОшибка = ПодробноеПредставлениеОшибки(ИнфоОшибки);
			ТекстОшибки1 = СтрШаблон(Нстр("ru = 'Ошибка конвертации бланка сводной таблицы %1%2'"), 
			               	Выборка.Ссылка, Символы.ПС);
			ТекстОшибки1 = СтрШаблон(Нстр("ru = '%1Текст ошибки:%2%3'"), ТекстОшибки1 + Символы.ПС, Символы.ПС, 
			               	ТекОшибка);
			ЗаписьЖурналаРегистрации("КонвертироватьБланкиСТ", УровеньЖурналаРегистрации.Ошибка,,, ТекОшибка);	
			ОшибочныхБланков = ОшибочныхБланков+1;
		КонецПопытки;

		ВсегоБланков = ВсегоБланков+1;
	
	КонецЦикла;
	
	
КонецПроцедуры	

Процедура ВыполнитьКонвертациюСервер(БланкИсточник)
	
			
	тНастройкиВариантаСводнойТаблицы  			= РегистрыСведений.НастройкиВариантаСводнойТаблицы.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	тНастройкиПериодовСводнойТаблицы  			= РегистрыСведений.НастройкиПериодовСводнойТаблицы.СоздатьНаборЗаписей().ВыгрузитьКолонки();
    тНастройкиПолейСводнойТаблицы  				= РегистрыСведений.НастройкиПолейСводнойТаблицы.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	тНастройкиРасположенияПолейСводнойТаблицы  	= РегистрыСведений.НастройкиРасположенияПолейСводнойТаблицы.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	тНастройкиРасположенияПолейСводнойТаблицы.Колонки.Добавить("ТипСтрока");
	тНастройкиСоставаКолонокСводнойТаблицы  	= РегистрыСведений.НастройкиСоставаКолонокСводнойТаблицы.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	тНастройкиСоставаСтрокСводнойТаблицы  		= РегистрыСведений.НастройкиСоставаСтрокСводнойТаблицы.СоздатьНаборЗаписей().ВыгрузитьКолонки();
    тНастройкиСоставаАналитикиСтрокСводнойТаблицы = РегистрыСведений.НастройкиСоставаАналитикиСтрокСводнойТаблицы.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	
	СтруктураТаблиц = Новый Структура;
    СтруктураТаблиц.Вставить("НастройкиВариантаСводнойТаблицы",тНастройкиВариантаСводнойТаблицы);
	СтруктураТаблиц.Вставить("НастройкиПериодовСводнойТаблицы",тНастройкиПериодовСводнойТаблицы);
    СтруктураТаблиц.Вставить("НастройкиПолейСводнойТаблицы",тНастройкиПолейСводнойТаблицы);
    СтруктураТаблиц.Вставить("НастройкиРасположенияПолейСводнойТаблицы",тНастройкиРасположенияПолейСводнойТаблицы);
    СтруктураТаблиц.Вставить("НастройкиСоставаКолонокСводнойТаблицы",тНастройкиСоставаКолонокСводнойТаблицы);
    СтруктураТаблиц.Вставить("НастройкиСоставаСтрокСводнойТаблицы",тНастройкиСоставаСтрокСводнойТаблицы);
    СтруктураТаблиц.Вставить("НастройкиСоставаАналитикиСтрокСводнойТаблицы",тНастройкиСоставаАналитикиСтрокСводнойТаблицы);

	
	ЗаполнитьСоставСтрок(БланкИсточник,СтруктураТаблиц);				
	
	ЗаполнитьСоставКолонок(БланкИсточник,СтруктураТаблиц);
	
	ЗаполнитьСтруктуруОсей(БланкИсточник,СтруктураТаблиц);			
	
	ЗаполнитьСвойстваИзмерений(СтруктураТаблиц);	
	
	ЗаполнитьНастройкуПериодов(БланкИсточник,СтруктураТаблиц);			
	
	ЗаполнитьНастройкуСоставаАналитикиСтрок(БланкИсточник,СтруктураТаблиц);
	
	ЗаписатьНастройки(БланкИсточник,СтруктураТаблиц);

	
КонецПроцедуры

Процедура ЗаполнитьСоставСтрок(БланкИсточник,СтруктураТаблиц)

	
	Запрос = Новый Запрос;
			
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиСтруктурыБланка.Ссылка КАК Ссылка,
	               |	НастройкиСтруктурыБланка.ВерсияДанных КАК ВерсияДанных,
	               |	НастройкиСтруктурыБланка.ПометкаУдаления КАК ПометкаУдаления,
	               |	НастройкиСтруктурыБланка.Наименование КАК Наименование,
	               |	НастройкиСтруктурыБланка.ТипЭлемента КАК ТипЭлемента,
	               |	НастройкиСтруктурыБланка.ИндексЭлемента КАК ИндексЭлемента,
	               |	НастройкиСтруктурыБланка.СтрокаОтчета КАК СтрокаОтчета,
	               |	НастройкиСтруктурыБланка.ПоказательОтчета КАК ПоказательОтчета,
	               |	НастройкиСтруктурыБланка.Защищенный КАК Защищенный,
	               |	НастройкиСтруктурыБланка.Уровень КАК Уровень,
	               |	НастройкиСтруктурыБланка.КолонкаОтчета КАК КолонкаОтчета,
	               |	НастройкиСтруктурыБланка.ПорядковыйНомер КАК ПорядковыйНомер,
	               |	НастройкиСтруктурыБланка.ЭтоЭлементГруппа КАК ЭтоЭлементГруппа,
	               |	НастройкиСтруктурыБланка.Расчетный КАК Расчетный,
	               |	НастройкиСтруктурыБланка.ВидОтклонения КАК ВидОтклонения,
	               |	НастройкиСтруктурыБланка.Сценарии КАК Сценарии,
	               |	НастройкиСтруктурыБланка.Периоды КАК Периоды,
	               |	НастройкиСтруктурыБланка.Организации КАК Организации,
	               |	НастройкиСтруктурыБланка.Проекты КАК Проекты,
	               |	НастройкиСтруктурыБланка.КодПоказателя КАК КодПоказателя,
	               |	НастройкиСтруктурыБланка.ИндексПоказателя КАК ИндексПоказателя,
	               |	НастройкиСтруктурыБланка.Использовать КАК Использовать,
	               |	НастройкиСтруктурыБланка.Предопределенный КАК Предопределенный,
	               |	НастройкиСтруктурыБланка.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	               |	НастройкиСтруктурыБланка.Представление КАК Представление,
	               |	НастройкиСтруктурыБланка.глПорядковыйНомер КАК глПорядковыйНомер,
	               |	НастройкиСтруктурыБланка.Родитель.СтрокаОтчета КАК РодительСтрокаОтчета 
	               |ИЗ
	               |	Справочник.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
	               |ГДЕ
	               |	НастройкиСтруктурыБланка.Владелец = &Владелец
	               |	И НастройкиСтруктурыБланка.ИндексЭлемента = 2
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	глПорядковыйНомер";
	
	Запрос.УстановитьПараметр("Владелец",БланкИсточник);
	Результат = Запрос.Выполнить().Выгрузить();
	НомерПоПорядку = 1;
	Для Каждого Стр Из Результат Цикл
		
		Нстр 						= СтруктураТаблиц.НастройкиСоставаСтрокСводнойТаблицы.Добавить();
		Нстр.СтрокаОтчета           = Стр.СтрокаОтчета;
		Нстр.СтрокаРодитель         = Стр.РодительСтрокаОтчета;
		Нстр.НомерПоПорядку         = НомерПоПорядку;
		Нстр.УровеньСтроки          = Стр.Уровень+1;
		
		НомерПоПорядку = НомерПоПорядку+1;
	КонецЦикла;	
		
КонецПроцедуры

Процедура ЗаполнитьСоставКолонок(БланкИсточник,СтруктураТаблиц)

	
	Запрос = Новый Запрос;
			
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиСтруктурыБланка.Ссылка КАК Ссылка,
	               |	НастройкиСтруктурыБланка.ВерсияДанных КАК ВерсияДанных,
	               |	НастройкиСтруктурыБланка.ПометкаУдаления КАК ПометкаУдаления,
	               |	НастройкиСтруктурыБланка.Наименование КАК Наименование,
	               |	НастройкиСтруктурыБланка.ТипЭлемента КАК ТипЭлемента,
	               |	НастройкиСтруктурыБланка.ИндексЭлемента КАК ИндексЭлемента,
	               |	НастройкиСтруктурыБланка.СтрокаОтчета КАК СтрокаОтчета,
	               |	НастройкиСтруктурыБланка.ПоказательОтчета КАК ПоказательОтчета,
	               |	НастройкиСтруктурыБланка.Защищенный КАК Защищенный,
	               |	НастройкиСтруктурыБланка.Уровень КАК Уровень,
	               |	НастройкиСтруктурыБланка.КолонкаОтчета КАК КолонкаОтчета,
	               |	НастройкиСтруктурыБланка.ПорядковыйНомер КАК ПорядковыйНомер,
	               |	НастройкиСтруктурыБланка.ЭтоЭлементГруппа КАК ЭтоЭлементГруппа,
	               |	НастройкиСтруктурыБланка.Расчетный КАК Расчетный,
	               |	НастройкиСтруктурыБланка.ВидОтклонения КАК ВидОтклонения,
	               |	НастройкиСтруктурыБланка.Сценарии КАК Сценарии,
	               |	НастройкиСтруктурыБланка.Периоды КАК Периоды,
	               |	НастройкиСтруктурыБланка.Организации КАК Организации,
	               |	НастройкиСтруктурыБланка.Проекты КАК Проекты,
	               |	НастройкиСтруктурыБланка.КодПоказателя КАК КодПоказателя,
	               |	НастройкиСтруктурыБланка.ИндексПоказателя КАК ИндексПоказателя,
	               |	НастройкиСтруктурыБланка.Использовать КАК Использовать,
	               |	НастройкиСтруктурыБланка.Предопределенный КАК Предопределенный,
	               |	НастройкиСтруктурыБланка.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	               |	НастройкиСтруктурыБланка.Представление КАК Представление,
	               |	НастройкиСтруктурыБланка.глПорядковыйНомер КАК глПорядковыйНомер
	               |ИЗ
	               |	Справочник.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
	               |ГДЕ
	               |	НастройкиСтруктурыБланка.Владелец = &Владелец
	               |	И НастройкиСтруктурыБланка.ИндексЭлемента = 10
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПорядковыйНомер";

	
	Запрос.УстановитьПараметр("Владелец",БланкИсточник);
	Результат = Запрос.Выполнить().Выгрузить();
	НомерПоПорядку = 1;
	Для Каждого Стр Из Результат Цикл
		
		Нстр 						= СтруктураТаблиц.НастройкиСоставаКолонокСводнойТаблицы.Добавить();
		Нстр.КолонкаОтчета          = Стр.Ссылка.КолонкиОтчетов[0].Колонка;
				
		Если ТипЗнч(Стр.Сценарии) =  Тип("СправочникСсылка.Сценарии") Тогда
			Нстр.Сценарий          		= Стр.Сценарии;
		КонецЕсли;
		Если ТипЗнч(Стр.Организации) = Тип("СправочникСсылка.Организации") Тогда
			Нстр.Организация          		= Стр.Организации;
		КонецЕсли;
        Если ТипЗнч(Стр.Проекты) =  Тип("СправочникСсылка.Проекты") Тогда
			Нстр.Проект          		= Стр.Проекты;
		КонецЕсли;
			
		Если СтрНайти(Стр.Периоды,НСтр("ru = 'Сдвиг по периоду: '"))>0 Тогда
			Сдвиг = Число(СтрЗаменить(Стр.Периоды,НСтр("ru = 'Сдвиг по периоду: '"),""));
			Нстр.ПериодСдвиг          	= Сдвиг;
		КонецЕсли;
		
		Если Стр.ВидОтклонения = "ТекущееЗначение" Тогда 
			Нстр.ТипКолонки = Перечисления.ВидыКолонокСводнойТаблицы.БазовоеЗначение;
		ИначеЕсли Стр.ВидОтклонения = "Значение" Тогда 	
			Нстр.ТипКолонки = Перечисления.ВидыКолонокСводнойТаблицы.БазовоеЗначение;
		ИначеЕсли Стр.ВидОтклонения = "АбсОтклонение" Тогда 		
			Нстр.ТипКолонки = Перечисления.ВидыКолонокСводнойТаблицы.ОтклонениеАБС;
		ИначеЕсли Стр.ВидОтклонения = "ОтнОтклонение" Тогда 	
			Нстр.ТипКолонки = Перечисления.ВидыКолонокСводнойТаблицы.ОтклонениеОтн;
		КонецЕсли;
		
		Нстр.ПредставлениеКолонки = Стр.Представление;
		Нстр.ПризнакИспользования = Стр.Использовать;
		Нстр.НомерПоПорядку       = НомерПоПорядку;
		
		НомерПоПорядку = НомерПоПорядку+1;
	КонецЦикла;	
	
		
КонецПроцедуры

Процедура ЗаполнитьСтруктуруОсей(БланкИсточник,СтруктураТаблиц)

	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиСтруктурыБланка.Ось КАК Ось,
	               |	НастройкиСтруктурыБланка.Код КАК Код,
	               |	НастройкиСтруктурыБланка.Наименование КАК Наименование,
	               |	НастройкиСтруктурыБланка.ТипСтрока КАК ТипСтрока,
	               |	НастройкиСтруктурыБланка.ИндексКартинки КАК ИндексКартинки,
	               |	НастройкиСтруктурыБланка.НПП КАК НПП,
	               |	НастройкиСтруктурыБланка.ТипСубконто КАК ТипСубконто,
	               |	НастройкиСтруктурыБланка.Редактируется КАК Редактируется,
	               |	НастройкиСтруктурыБланка.Представление КАК Представление,
	               |	НастройкиСтруктурыБланка.Сортировка КАК Сортировка,
	               |	НастройкиСтруктурыБланка.ГлобальнаяАналитика КАК ГлобальнаяАналитика
	               |ИЗ
	               |	РегистрСведений.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
	               |ГДЕ
	               |	НастройкиСтруктурыБланка.Бланк = &Бланк
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НПП";
	
	Запрос.УстановитьПараметр("Бланк",БланкИсточник);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из Результат Цикл
		
		Если Стр.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.Валюты Тогда
            Продолжить;
        КонецЕсли;
		
		Если НЕ БланкИсточник.Владелец.РазделениеПоПроектам
			И Стр.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.Проекты Тогда
			Продолжить;
		КонецЕсли;	
		
		Нстр 						= СтруктураТаблиц.НастройкиРасположенияПолейСводнойТаблицы.Добавить();
		
		Если Стр.Ось = Перечисления.ВидыНастроекБланковСводнойТаблицы.Строка Тогда
			Нстр.ОсьТаблицы = Перечисления.ОсиСводнойТаблицы.Строки;
		ИначеЕсли Стр.Ось = Перечисления.ВидыНастроекБланковСводнойТаблицы.Колонка Тогда
			Нстр.ОсьТаблицы = Перечисления.ОсиСводнойТаблицы.Колонки;
		ИначеЕсли Стр.Ось = Перечисления.ВидыНастроекБланковСводнойТаблицы.Страница Тогда
			Нстр.ОсьТаблицы = Перечисления.ОсиСводнойТаблицы.Отборы;
		КонецЕсли;	
		
		Если Стр.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.Сценарии Тогда
			Нстр.ПредставлениеПоля = НСтр("ru = 'Сценарий'");
			Нстр.ТипСтрока = "СправочникСсылка.Сценарии";
			Нстр.КодПоля = "Сценарий";	
			Нстр.Поле = Перечисления.ПостоянныеПоляСводнойТаблицы.Сценарий;
		ИначеЕсли Стр.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.Периоды Тогда
			Нстр.ПредставлениеПоля = НСтр("ru = 'Период отчета'");
			Нстр.ТипСтрока = "СправочникСсылка.Периоды";
			Нстр.КодПоля = "ПериодОтчета";	
			Нстр.Поле = Перечисления.ПостоянныеПоляСводнойТаблицы.ПериодОтчета;
		ИначеЕсли Стр.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.Организации Тогда
			Нстр.ПредставлениеПоля = НСтр("ru = 'Организация'");
			Нстр.ТипСтрока = "СправочникСсылка.Организации";
			Нстр.КодПоля = "Организация";	
			Нстр.Поле = Перечисления.ПостоянныеПоляСводнойТаблицы.Организация;
		ИначеЕсли Стр.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.Проекты Тогда
			Нстр.ПредставлениеПоля = НСтр("ru = 'Проект'");
			Нстр.ТипСтрока = "СправочникСсылка.Проекты";
			Нстр.КодПоля = "Проект";	
			Нстр.Поле = Перечисления.ПостоянныеПоляСводнойТаблицы.Проект;
		ИначеЕсли Стр.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.АналитикаВалюта Тогда
			Нстр.ПредставлениеПоля 		= "Дополнительные валюты";
			Нстр.ТипСтрока 		= "СправочникСсылка.Валюты"; 
			Нстр.КодПоля 				= ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты.Код;
			Нстр.Поле         			= Стр.ТипСубконто;
		ИначеЕсли Стр.Код = "Фильтр_Показатели" Тогда
			Нстр.Поле         			= Перечисления.ПостоянныеПоляСводнойТаблицы.СтрокиОтчетов;
			Нстр.ПредставлениеПоля 		= НСтр("ru = 'Строки отчетов'");
			Нстр.ТипСтрока 				= "СправочникСсылка.СтрокиОтчетов";
			Нстр.КодПоля 				= "СтрокиОтчетов";		
		ИначеЕсли Стр.Код = "Фильтр_Показатели_Колонки"  Тогда
			Нстр.Поле         			= Перечисления.ПостоянныеПоляСводнойТаблицы.КолонкиОтчетов;
			Нстр.ПредставлениеПоля 		= НСтр("ru = 'Колонки отчетов'");
			Нстр.ТипСтрока 				= "СправочникСсылка.КолонкиОтчетов";
			Нстр.КодПоля 				= "КолонкиОтчетов";
        ИначеЕсли Стр.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.Валюты Тогда
            Продолжить;
		Иначе	
			Нстр.Поле         			= Стр.ТипСубконто;
			Нстр.КодПоля        		= Стр.ТипСубконто.Код;
			Нстр.ПредставлениеПоля      = Стр.Наименование;	
			Нстр.ТипСтрока      		= Стр.ТипСтрока;
		КонецЕсли;	
		
		Нстр.НомерПоПорядку = Стр.НПП;
		
	КонецЦикла;	

	
	//ЗаполнитьСоставАналитикОсей(Бланк,Копирование,БланкИсточник);
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваИзмерений(СтруктураТаблиц)
	
	//Читаем и типизируем все поля-аналитики, доступные для выбранных строк
	ТаблицаДоступныеПоля = Новый ТаблицаЗначений;
	ТаблицаДоступныеПоля.Колонки.Добавить("Наименование");
	ТаблицаДоступныеПоля.Колонки.Добавить("ИндексКартинки");
    ТаблицаДоступныеПоля.Колонки.Добавить("ТипСтрока");
	ТаблицаДоступныеПоля.Колонки.Добавить("Код");
	ТаблицаДоступныеПоля.Колонки.Добавить("НПП");
    ТаблицаДоступныеПоля.Колонки.Добавить("ГлобальнаяАналитика");
    ТаблицаДоступныеПоля.Колонки.Добавить("Редактируется");
	ТаблицаДоступныеПоля.Колонки.Добавить("Представление");
    ТаблицаДоступныеПоля.Колонки.Добавить("ПоддерживатьИерархию");
	ТаблицаДоступныеПоля.Колонки.Добавить("ТипСубконто");
	ТаблицаДоступныеПоля.Колонки.Добавить("Размещение");
    ТаблицаДоступныеПоля.Колонки.Добавить("Сортировка");
    ТаблицаДоступныеПоля.Колонки.Добавить("ЭтоЭтапПроекта");
	
	Обработки.АналитическийБланкСводнаяТаблица.ПрочитатьСоставДоступныхАналитик(ТаблицаДоступныеПоля,СтруктураТаблиц.НастройкиСоставаСтрокСводнойТаблицы,СтруктураТаблиц.НастройкиПолейСводнойТаблицы);
	  
КонецПроцедуры	

Процедура ЗаполнитьНастройкуПериодов(БланкИсточник,СтруктураТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиМасштабаВремени.Бланк,
	|	НастройкиМасштабаВремени.ВыбранныйПериод,
	|	НастройкиМасштабаВремени.ДетализацияДни,
	|	НастройкиМасштабаВремени.ДетализацияМесяцы,
	|	НастройкиМасштабаВремени.ДетализацияКварталы,
	|	НастройкиМасштабаВремени.ДетализацияПолугодия,
	|	НастройкиМасштабаВремени.ДетализацияГоды,
	|	НастройкиМасштабаВремени.НаследоватьНастройкиРегламента,
	|	НастройкиМасштабаВремени.Масштаб,
	|	НастройкиМасштабаВремени.ПредставлениеПериода,
	|	НастройкиМасштабаВремени.КлючПериода,
	|	НастройкиМасштабаВремени.Сдвиг
	|ИЗ
	|	РегистрСведений.НастройкиМасштабаВремени КАК НастройкиМасштабаВремени
	|ГДЕ
	|	НастройкиМасштабаВремени.Бланк = &Бланк";
	
	Запрос.УстановитьПараметр("Бланк",БланкИсточник);
    Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из Результат Цикл
		
		Нстр 						= СтруктураТаблиц.НастройкиПериодовСводнойТаблицы.Добавить();
        Нстр.Периодичность          = БланкИсточник.Периодичность;
		Нстр.ВыводитьИтогГод        = Стр.ДетализацияГоды;
		Нстр.ВыводитьИтогПолугодие  = Стр.ДетализацияПолугодия;
        Нстр.ВыводитьИтогМесяц      = Стр.ДетализацияМесяцы;
		Нстр.ВыводитьИтогКвартал    = Стр.ДетализацияКварталы;
		Нстр.ВыводитьИтогМесяц      = Стр.ДетализацияМесяцы;
		Нстр.ВыводитьИтогДень    	= Стр.ДетализацияДни;

		
	КонецЦикла;
	
КонецПроцедуры 

Процедура ЗаполнитьНастройкуСоставаАналитикиСтрок(БланкИсточник,СтруктураТаблиц)
	
	РегИсточник = РегистрыСведений.НастройкиСоставаАналитикиБланков.СоздатьНаборЗаписей();
	РегИсточник.Отбор.БланкОтчета.Установить(БланкИсточник);
	РегИсточник.Прочитать();
	Для Каждого ИсходнаяЗапись Из РегИсточник Цикл
		Если ИсходнаяЗапись.Назначение = Перечисления.ПредназначенияЭлементовАналитик.Сценарии
			ИЛИ ИсходнаяЗапись.Назначение = Перечисления.ПредназначенияЭлементовАналитик.Валюты Тогда
			Продолжить;
        КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ИсходнаяЗапись.ЗначениеНастройки)
			ИЛИ ИсходнаяЗапись.ЗначениеНастройки = "Все элементы" Тогда
			Продолжить;
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(ИсходнаяЗапись.Показатель) Тогда
			Продолжить;
		КонецЕсли;	
			
		Нстр 						= СтруктураТаблиц.НастройкиСоставаАналитикиСтрокСводнойТаблицы.Добавить();
		ЗАполнитьЗначенияСвойств(Нстр,ИсходнаяЗапись);
		Нстр.СтрокаОтчета   =  ИсходнаяЗапись.Показатель.СтрокаОтчета;
		
		Если ИсходнаяЗапись.Назначение = Перечисления.ПредназначенияЭлементовАналитик.Организации Тогда
			Нстр.Назначение = Перечисления.ПостоянныеПоляСводнойТаблицы.Организация;
		ИначеЕсли ИсходнаяЗапись.Назначение = Перечисления.ПредназначенияЭлементовАналитик.Проекты Тогда
			Нстр.Назначение = Перечисления.ПостоянныеПоляСводнойТаблицы.Проект;	
		КонецЕсли;	  	
	КонецЦикла;	
	
		
КонецПроцедуры 

Процедура ЗаписатьНастройки(БланкИсточник,СтруктураТаблиц)
	
	Нстр = СтруктураТаблиц.НастройкиВариантаСводнойТаблицы.Добавить();
	Нстр.ВыводитьАналитикиСтрокВИерархии  = Истина;
	
	тГруппаВариантов =                          Справочники.ВариантыСводныхТаблиц.НайтиПоНаименованию("Сконвертированные бланки сводных таблиц");
	Если НЕ ЗначениеЗаполнено(тГруппаВариантов)  Тогда
		оВариантГруппа =  Справочники.ВариантыСводныхТаблиц.СоздатьГруппу();
        оВариантГруппа.Наименование  = "Сконвертированные бланки сводных таблиц";
		оВариантГруппа.Записать();
		ВариантыГруппа =  оВариантГруппа.Ссылка;
	Иначе	
		ВариантыГруппа = тГруппаВариантов;
	КонецЕсли;	
	
	нВариантСводнойТаблицы 						= Справочники.ВариантыСводныхТаблиц.СоздатьЭлемент();
	нВариантСводнойТаблицы.Наименование 		= БланкИсточник.Наименование;
	нВариантСводнойТаблицы.ОсновнойВариант   	= Истина;
	нВариантСводнойТаблицы.Бланк             	= БланкИсточник;
	нВариантСводнойТаблицы.Родитель             = ВариантыГруппа;
	нВариантСводнойТаблицы.Записать();

	ВариантСводнойТаблицы = нВариантСводнойТаблицы.Ссылка;
	
	Для Каждого СтрТаблица Из СтруктураТаблиц Цикл
		тРегистр = РегистрыСведений[СтрТаблица.Ключ].СоздатьНаборЗаписей();
		тРегистр.Отбор.ВариантСводнойТаблицы.Установить(ВариантСводнойТаблицы);
		Для Каждого СтрЗапись Из СтрТаблица.Значение Цикл   
			СтрЗапись.ВариантСводнойТаблицы = ВариантСводнойТаблицы;   
		КонецЦикла;	  
		
		тРегистр.Загрузить(СтрТаблица.Значение);
		тРегистр.Записать(Истина);
	КонецЦикла;	
	
	
	ПолеТабличногоДокументаШаблон = Новый ТабличныйДокумент;
	
		
	//Подготовка макета для сохранения
	СтруктураПараметровВход = Новый Структура;
	
	СтруктураПараметровВход.Вставить("ПолеТабличногоДокументаШаблон",ПолеТабличногоДокументаШаблон);
	СтруктураПараметровВход.Вставить("НастройкиСоставаСтрокСводнойТаблицы",СтруктураТаблиц.НастройкиСоставаСтрокСводнойТаблицы);
	СтруктураПараметровВход.Вставить("НастройкиСоставаКолонокСводнойТаблицы",СтруктураТаблиц.НастройкиСоставаКолонокСводнойТаблицы);
	СтруктураПараметровВход.Вставить("НастройкиРасположенияПолейСводнойТаблицы",СтруктураТаблиц.НастройкиРасположенияПолейСводнойТаблицы);
	СтруктураПараметровВход.Вставить("НастройкиВариантаСводнойТаблицы",СтруктураТаблиц.НастройкиВариантаСводнойТаблицы);
	СтруктураПараметровВход.Вставить("НастройкиПериодовСводнойТаблицы",СтруктураТаблиц.НастройкиПериодовСводнойТаблицы);
	СтруктураПараметровВход.Вставить("НастройкиПолейСводнойТаблицы",СтруктураТаблиц.НастройкиПолейСводнойТаблицы);
	СтруктураПараметровВход.Вставить("УникальныйИдентификатор",Новый УникальныйИдентификатор);
    СтруктураПараметровВход.Вставить("СтруктураНастроекАналитическогоБланкаАдрес","");
	
	Обработки.АналитическийБланкСводнаяТаблица.CгенерироватьМакетШаблона(СтруктураПараметровВход); 
	
	СтруктураНастроекАналитическогоБланкаАдрес = СтруктураПараметровВход.СтруктураНастроекАналитическогоБланкаАдрес;

	
	//Сохранияем настройки макета, если есть
	Если   ЗначениеЗАполнено(СтруктураНастроекАналитическогоБланкаАдрес)  Тогда
		
		СтруктураНастроек = ПолучитьИзВременногоХранилища(СтруктураНастроекАналитическогоБланкаАдрес);
		//Обработки.АналитическийБланк.ЗаписатьНастройкиАналитическогоБланка(ПолеТабличногоДокументаМакет,МакетДляВыводаПоказателей,Приемник,ОбъектАБ,Отказ);
		
		текНаборЗаписей = РегистрыСведений.КэшГруппОтборовПоказателей.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Загрузить(СтруктураНастроек.КэшГруппОтборовПоказателей);
		Для Каждого Стр Из текНаборЗаписей Цикл
			Стр.Бланк = ВариантСводнойТаблицы;
		КонецЦикла;	
		текНаборЗаписей.Записать(Истина);
		
		текНаборЗаписей = РегистрыСведений.РасшифровкаГруппОтборов.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Загрузить(СтруктураНастроек.РасшифровкаГруппОтборов);
		Для Каждого Стр Из текНаборЗаписей Цикл
			Стр.Бланк = ВариантСводнойТаблицы;
		КонецЦикла;	
		текНаборЗаписей.Записать(Истина);

		текНаборЗаписей = РегистрыСведений.КэшРаскрываемыхОбластей.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Загрузить(СтруктураНастроек.КэшРаскрываемыхОбластей);
		Для Каждого Стр Из текНаборЗаписей Цикл
			Стр.Бланк = ВариантСводнойТаблицы;
		КонецЦикла;	
		текНаборЗаписей.Записать(Истина);

		текНаборЗаписей = РегистрыСведений.НастройкиРаскрываемыхОбластей.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Загрузить(СтруктураНастроек.НастройкиРаскрываемыхОбластей);
		Для Каждого Стр Из текНаборЗаписей Цикл
			Стр.Бланк = ВариантСводнойТаблицы;
		КонецЦикла;	
		текНаборЗаписей.Записать(Истина);

		текНаборЗаписей = РегистрыСведений.НастройкиТаблицРаскрываемыхОбластей.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Загрузить(СтруктураНастроек.НастройкиТаблицРаскрываемыхОбластей);
		Для Каждого Стр Из текНаборЗаписей Цикл
			Стр.Бланк = ВариантСводнойТаблицы;
		КонецЦикла;	
		текНаборЗаписей.Записать(Истина);

			
		текНаборЗаписей = РегистрыСведений.РасшифровкаФормулОбластейПоказателей.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		тТаблица  = СтруктураНастроек.РасшифровкаФормулОбластейПоказателей;
		тТаблица.Свернуть("УидФормулы,УидГруппыОтборов,Показатель,ИндексПоказателя,ВидОтчета,ВидОтчетаКод,ПоказательКод,ИмяВФормуле");
		текНаборЗаписей.Загрузить(тТаблица);
		Для Каждого Стр Из текНаборЗаписей Цикл
			Стр.Бланк = ВариантСводнойТаблицы;
		КонецЦикла;	
		текНаборЗаписей.Записать(Истина);
		
		текНаборЗаписей = РегистрыСведений.КэшИменОбластейПоказателей.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Загрузить(СтруктураНастроек.КэшИменОбластейПоказателей);
		Для Каждого Стр Из текНаборЗаписей Цикл
			Стр.Бланк = ВариантСводнойТаблицы;
		КонецЦикла;	
		текНаборЗаписей.Записать(Истина);
	
		текНаборЗаписей = РегистрыСведений.КэшИменФормул.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Загрузить(СтруктураНастроек.КэшИменФормул);
		Для Каждого Стр Из текНаборЗаписей Цикл
			Стр.Бланк = ВариантСводнойТаблицы;
		КонецЦикла;	
		текНаборЗаписей.Записать(Истина);

		текНаборЗаписей = РегистрыСведений.КэшФормулОбластейПоказателей.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Загрузить(СтруктураНастроек.КэшФормулОбластейПоказателей);
		Для Каждого Стр Из текНаборЗаписей Цикл
			Стр.Бланк = ВариантСводнойТаблицы;
		КонецЦикла;	
		текНаборЗаписей.Записать(Истина);
			
		текНаборЗаписей = РегистрыСведений.НастройкиАналитическихБланков.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Очистить();
		нЗапись  									= текНаборЗаписей.Добавить();
		нЗапись.Бланк								= ВариантСводнойТаблицы;
		нЗапись.ХранилищеДополнительныхНастроек 	= Новый ХранилищеЗначения(СтруктураНастроек.НастройкиАналитическихБланков);
		текНаборЗаписей.Записать(Истина);
		
			
	КонецЕсли;	
	

	
	
КонецПроцедуры	

#КонецОбласти


#Область ПерезаписьНастроекБланковСводнойТаблицы

Процедура ПерезаписатьСТБланки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВариантыСводныхТаблиц.Ссылка КАК Вариант
	|ИЗ
	|	Справочник.БланкиОтчетов КАК БланкиОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыСводныхТаблиц КАК ВариантыСводныхТаблиц
	|		ПО БланкиОтчетов.Ссылка = ВариантыСводныхТаблиц.Бланк
	|			
	|ГДЕ
	|	БланкиОтчетов.РежимБланка = 1
	|	И БланкиОтчетов.ПометкаУдаления = ЛОЖЬ";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		ВариантСводнойТаблицы  = Выборка.Вариант;
		
		Попытка
			
			ПолеТабличногоДокументаМакет 	= Новый ТабличныйДокумент;
			
			ОбъектАБ = Обработки.АналитическийБланк.Создать();
			ОбъектАБ.РежимСводнойТаблицы = Истина;
			Обработки.АналитическийБланк.ПрочитатьНастройкиАналитическогоБланка(ПолеТабличногоДокументаМакет,ВариантСводнойТаблицы,ОбъектАБ);	
			ПодготовитьКэшСГруппировками(ПолеТабличногоДокументаМакет,ОбъектАБ);
			
			Отказ = Ложь;				
			Уид   = Новый УникальныйИдентификатор;
			Справочники.БланкиОтчетов.СохранитьМакетМногопериодногоБланка(ВариантСводнойТаблицы,ПолеТабличногоДокументаМакет,ОбъектАБ,Уид,Отказ);
			
		Исключение	 
			
			ТекстСообщения = НСтр("ru = 'При перезаписи варианта сводной таблицы %Бланк% произошла ошибка
			|			%ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Бланк%", Строка(ВариантСводнойТаблицы));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Строка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.БланкиОтчетов,
			ВариантСводнойТаблицы, 
			ТекстСообщения);
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);	
		КонецПопытки;	 
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ПодготовитьКэшСГруппировками(ПолеТабличногоДокументаМакет,ОбъектАБ)
		
	ОбъектАБ.КэшРаскрываемыхОбластейСгруппированный.Очистить();
	ОбъектАБ.КэшТаблицРаскрываемыхОбластей.Очистить();
	ОбъектАБ.НастройкиТаблицРаскрываемыхОбластей.Очистить();
	
	Для Каждого облРаскрытия Из ОбъектАБ.КэшРаскрываемыхОбластей Цикл			
		ОбластьРаскрытия =  ПолеТабличногоДокументаМакет.Области.Найти(облРаскрытия.ИмяОбласти);		
		ФлВключенияОбласти = Истина;	
		Если Не ОбластьРаскрытия = Неопределено Тогда	
			
			облРаскрытия.Лево = ОбластьРаскрытия.Лево;
			облРаскрытия.Верх = ОбластьРаскрытия.Верх;
			
			//Строки
			Если ОбластьРаскрытия.Лево=0 Тогда		
				Для Каждого ОбластьДляПроверки Из ОбъектАБ.КэшРаскрываемыхОбластей Цикл	
					тОбласть = ПолеТабличногоДокументаМакет.Области.Найти(ОбластьДляПроверки.ИмяОбласти);
					Если тОбласть.Верх<ОбластьРаскрытия.Верх И тОбласть.Низ>=ОбластьРаскрытия.Низ Тогда
						ФлВключенияОбласти = Ложь; Прервать; 	
					КонецЕсли;				
				КонецЦикла;				
				Если ФлВключенияОбласти Тогда
					НобластьКэша = ОбъектАБ.КэшРаскрываемыхОбластейСгруппированный.Добавить();
					ЗаполнитьЗначенияСвойств(НобластьКэша,облРаскрытия);
					НобластьКэша.Низ =  ОбластьРаскрытия.Низ;
					НобластьКэша.Лево = 9999;		
				КонецЕсли;
			КонецЕсли;		
			//Колонки
			Если ОбластьРаскрытия.Верх=0 Тогда		
				Для Каждого ОбластьДляПроверки Из ОбъектАБ.КэшРаскрываемыхОбластей Цикл
					тОбласть = ПолеТабличногоДокументаМакет.Области.Найти(ОбластьДляПроверки.ИмяОбласти);
					//Если область имеет область - родителя, то игнорируем ее 
					Если тОбласть.Лево<ОбластьРаскрытия.Лево И тОбласть.Право>=ОбластьРаскрытия.Право Тогда
						ФлВключенияОбласти = Ложь; Прервать;						
					КонецЕсли;				
				КонецЦикла;			
				Если ФлВключенияОбласти Тогда
					НобластьКэша = ОбъектАБ.КэшРаскрываемыхОбластейСгруппированный.Добавить();
					ЗаполнитьЗначенияСвойств(НобластьКэша,облРаскрытия);
					НобластьКэша.Право =  ОбластьРаскрытия.Право;
					НобластьКэша.Верх = 9999;
				КонецЕсли;
			КонецЕсли;		
		КонецЕсли;						
	КонецЦикла;	
	
	
	
	
	//Готовим области таблиц
	тСтроки 	= ОбъектАБ.КэшРаскрываемыхОбластей.НайтиСтроки(Новый Структура("Лево",0));
	тКолонки 	= ОбъектАБ.КэшРаскрываемыхОбластей.НайтиСтроки(Новый Структура("Верх",0));
		
	Для Каждого тСтрока Из тСтроки Цикл	
		сНастройкиАналитикРаскрытия = ЗначениеИзСтрокиВнутр(тСтрока.НастройкиАналитикРаскрытия);
		тНастройкиАналитикРаскрытия = сНастройкиАналитикРаскрытия.СкопироватьКолонки();
		тОбластьСтрока              = ПолеТабличногоДокументаМакет.Область(тСтрока.ИмяОбласти);
		
		Для Каждого строкаАналитики Из сНастройкиАналитикРаскрытия Цикл
			тстрокаАналитики = тНастройкиАналитикРаскрытия.Добавить();
			ЗаполнитьЗначенияСвойств(тСтрокаАналитики,строкаАналитики);
		КонецЦикла;	
		Для Каждого тКолонка Из тКолонки Цикл	
			
		    тОбластьКолонка              = ПолеТабличногоДокументаМакет.Область(тКолонка.ИмяОбласти);
			
			кНастройкиАналитикРаскрытия = ЗначениеИзСтрокиВнутр(тКолонка.НастройкиАналитикРаскрытия);
			Для Каждого строкаАналитики Из кНастройкиАналитикРаскрытия Цикл
				тстрокаАналитики = тНастройкиАналитикРаскрытия.Добавить();
				ЗаполнитьЗначенияСвойств(тСтрокаАналитики,строкаАналитики);
			КонецЦикла;			
			нТаблица = ОбъектАБ.КэшТаблицРаскрываемыхОбластей.Добавить();
			нТаблица.УидГруппыОтборов =СтрЗаменить(Новый УникальныйИдентификатор,"-","");
			нТаблица.Лево 	= тОбластьКолонка.Лево;
			нТаблица.Право 	= тОбластьКолонка.Право;
			нТаблица.Верх 	= тОбластьСтрока.Верх;
			нТаблица.Низ 	= тОбластьСтрока.Низ;
			нТаблица.ИмяОбластиСтрок 	= тСтрока.ИмяОбласти;
			нТаблица.ИмяОбластиКолонок = тКолонка.ИмяОбласти;
			нТаблица.НастройкиАналитикРаскрытия = ЗначениеВСтрокуВнутр(тНастройкиАналитикРаскрытия);	
			нТаблица.ИмяОбласти           =  ПолеТабличногоДокументаМакет.Область(нТаблица.Верх,нТаблица.Лево,нТаблица.Низ,нТаблица.Право).Имя;
			
			ОтборРаскрываемойОбластиСтроки  = ОбъектАБ.НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов",тСтрока.УидГруппыОтборов));
			ОтборРаскрываемойОбластиКолонки = ОбъектАБ.НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов",тКолонка.УидГруппыОтборов));
			
			Для Каждого СтрокаОтбор Из ОтборРаскрываемойОбластиСтроки Цикл
				нОтбор = ОбъектАБ.НастройкиТаблицРаскрываемыхОбластей.Добавить();
				ЗаполнитьЗначенияСвойств(нОтбор,СтрокаОтбор);
				нОтбор.УидГруппыОтборов = нТаблица.УидГруппыОтборов;
			Конеццикла;
			
			Для Каждого СтрокаОтбор Из ОтборРаскрываемойОбластиКолонки Цикл
				нОтбор = ОбъектАБ.НастройкиТаблицРаскрываемыхОбластей.Добавить();
				ЗаполнитьЗначенияСвойств(нОтбор,СтрокаОтбор);
				нОтбор.УидГруппыОтборов = нТаблица.УидГруппыОтборов;
			Конеццикла;

			
		КонецЦикла;		
	КонецЦикла;	
			
   ОбъектАБ.КэшВыводаОбластейМакета.Очистить();	
   Лево =1;
   Верх =1;
   
   ОбъектАБ.КэшРаскрываемыхОбластейСгруппированный.Сортировать("Верх,Лево");
   КолонкиРаскрытия 	= ОбъектАБ.КэшРаскрываемыхОбластейСгруппированный.Выгрузить(Новый Структура("Верх",9999));
   СтрокиРаскрытия		= ОбъектАБ.КэшРаскрываемыхОбластейСгруппированный.Выгрузить(Новый Структура("Лево",9999));
   
   нКол  		= КолонкиРаскрытия.Добавить();
   Нкол.Лево    = ПолетабличногоДокументаМакет.ШиринаТаблицы+1;
   Нкол.ИмяОбласти = "МаркерОкончания";
   
   Низ 		= ПолетабличногоДокументаМакет.ВысотаТаблицы;   
   нСтрока  = СтрокиРаскрытия.Добавить();
   нСтрока.Верх    = ПолетабличногоДокументаМакет.ВысотаТаблицы+1;
   нСтрока.ИмяОбласти = "МаркерОкончания";
   
   
   //Для Каждого СтрокаМакета Из  СтрокиРаскрытия Цикл	      
   //    //Между областями есть 'свободные' колонки
   //    Если Верх<>СтрокаМакета.Верх  Тогда   
   // 	   ЗаполнитьКэшВыводаОбластейМакета(ПолеТабличногоДокументаМакет,ОбъектАБ,КолонкиРаскрытия,Верх,СтрокаМакета.Верх,Лево,"Синтетика");
   //    КонецЕсли;
   //    Если СтрокаМакета.ИмяОбласти = "МаркерОкончания" Тогда
   // 	   Продолжить;
   //    КонецЕсли;		   
   //    ЗаполнитьКэшВыводаОбластейМакета(ПолеТабличногоДокументаМакет,ОбъектАБ,КолонкиРаскрытия,СтрокаМакета.Верх,СтрокаМакета.Низ,Лево,"Строки",СтрокаМакета.УидГруппыОтборов);	   
   //    Верх 	        = ?(ПолетабличногоДокументаМакет.ВысотаТаблицы =СтрокаМакета.Низ,ПолетабличногоДокументаМакет.ВысотаТаблицы+1,СтрокаМакета.Низ+1);	   
   //КонецЦикла;	   
    
   
КонецПроцедуры	

#КонецОбласти


#КонецЕсли


