
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	  //Читаем состав строк и определяем состав всех доступных аналитик:
	  Если ЗначениеЗаполнено(Параметры.НастройкиСоставаСтрокСводнойТаблицыАдрес) Тогда	  
		   НастройкиСоставаСтрокСводнойТаблицы = ПолучитьИзВременногоХранилища(Параметры.НастройкиСоставаСтрокСводнойТаблицыАдрес);	 
	  КонецЕсли;	

	  //Читаем текущие настройки расположения осей:
	  Если ЗначениеЗаполнено(Параметры.НастройкиРасположенияПолейСводнойТаблицыАдрес) Тогда	  
		   НастройкиРасположенияПолейСводнойТаблицы.Загрузить(ПолучитьИзВременногоХранилища(Параметры.НастройкиРасположенияПолейСводнойТаблицыАдрес));	 
	  КонецЕсли;	  
	  
	  //Читаем текущие настройки полей:
	  Если ЗначениеЗаполнено(Параметры.НастройкиПолейСводнойТаблицыАдрес) Тогда	  
		   НастройкиПолейСводнойТаблицы.Загрузить(ПолучитьИзВременногоХранилища(Параметры.НастройкиПолейСводнойТаблицыАдрес));	 
	  КонецЕсли;	
	  
	  //Читаем доп. настройки:
	  Если ЗначениеЗаполнено(Параметры.НастройкиВариантаСводнойТаблицыАдрес) Тогда	  
		   НастройкиВариантаСводнойТаблицы.Загрузить(ПолучитьИзВременногоХранилища(Параметры.НастройкиВариантаСводнойТаблицыАдрес));	 
	  КонецЕсли;	
	  
	  УстановитьЗаголовокСтрокКолонок();
	  
	  //Читаем и типизируем все поля-аналитики, доступные для выбранных строк
	  Обработки.АналитическийБланкСводнаяТаблица.ПрочитатьСоставДоступныхАналитик(ТаблицаДоступныеПоля,НастройкиСоставаСтрокСводнойТаблицы,НастройкиПолейСводнойТаблицы);
	  
	  //Располагаем поля по осям
	  ПрочитатьРасположениеАналитик();
	  
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	
	ПрименитьИзмененияСервер();
	
	Закрыть(Новый Структура("Изменено,НастройкиРасположенияПолейСводнойТаблицыАдрес,НастройкиПолейСводнойТаблицыАдрес,НастройкиВариантаСводнойТаблицыАдрес"
	,Истина
	,НастройкиРасположенияПолейСводнойТаблицыАдрес
	,НастройкиПолейСводнойТаблицыАдрес
	,НастройкиВариантаСводнойТаблицыАдрес));
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПеретаскивания

&НаКлиенте
Процедура ТаблицаСтраницыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если   НЕ ПроверитьВозможностьПеренесенияПоляКлиент(ПараметрыПеретаскивания.Значение.ТекущаяСтрока.Код,ПараметрыПеретаскивания.Значение.ТекущийЭлемент,Элемент.Имя) Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;	
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступныеПоляПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;

	Если   НЕ ПроверитьВозможностьПеренесенияПоляКлиент(ПараметрыПеретаскивания.Значение.ТекущаяСтрока.Код,ПараметрыПеретаскивания.Значение.ТекущийЭлемент,Элемент.Имя) Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКолонкиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если   НЕ ПроверитьВозможностьПеренесенияПоляКлиент(ПараметрыПеретаскивания.Значение.ТекущаяСтрока.Код,ПараметрыПеретаскивания.Значение.ТекущийЭлемент,Элемент.Имя) Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтрокиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;

	Если   НЕ ПроверитьВозможностьПеренесенияПоляКлиент(ПараметрыПеретаскивания.Значение.ТекущаяСтрока.Код,ПараметрыПеретаскивания.Значение.ТекущийЭлемент,Элемент.Имя) Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтраницыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение = Новый Структура("ТекущаяСтрока,ТекущийЭлемент",Элемент.ТекущиеДанные,Элемент.Имя);
	
	Если   Элемент.ТекущиеДанные.Код = "Сценарий" Тогда
		Выполнение = Ложь;
	КонецЕсли;	
	
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступныеПоляНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение = Новый Структура("ТекущаяСтрока,ТекущийЭлемент",Элемент.ТекущиеДанные,Элемент.Имя);
	 
 КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтрокиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)       
	
	ПараметрыПеретаскивания.Значение = Новый Структура("ТекущаяСтрока,ТекущийЭлемент",Элемент.ТекущиеДанные,Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКолонкиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	                      
	ПараметрыПеретаскивания.Значение = Новый Структура("ТекущаяСтрока,ТекущийЭлемент",Элемент.ТекущиеДанные,Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтраницыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
		нСтраница = ТаблицаСтраницы.Добавить();
		ЗаполнитьЗначенияСвойств(нСтраница,ПараметрыПеретаскивания.Значение.ТекущаяСтрока);
		ЭтаФорма[ПараметрыПеретаскивания.Значение.ТекущийЭлемент].Удалить(ПараметрыПеретаскивания.Значение.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКолонкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
		нСтраница = ТаблицаКолонки.Добавить();
		ЗаполнитьЗначенияСвойств(нСтраница,ПараметрыПеретаскивания.Значение.ТекущаяСтрока);
		ЭтаФорма[ПараметрыПеретаскивания.Значение.ТекущийЭлемент].Удалить(ПараметрыПеретаскивания.Значение.ТекущаяСтрока);
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтрокиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
		нСтраница = ТаблицаСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(нСтраница,ПараметрыПеретаскивания.Значение.ТекущаяСтрока);
		ЭтаФорма[ПараметрыПеретаскивания.Значение.ТекущийЭлемент].Удалить(ПараметрыПеретаскивания.Значение.ТекущаяСтрока);
				
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступныеПоляПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
		нСтраница = ТаблицаДоступныеПоля.Добавить();
		ЗаполнитьЗначенияСвойств(нСтраница,ПараметрыПеретаскивания.Значение.ТекущаяСтрока);
		ЭтаФорма[ПараметрыПеретаскивания.Значение.ТекущийЭлемент].Удалить(ПараметрыПеретаскивания.Значение.ТекущаяСтрока);		
				
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТаблицаСтрокиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные.Код = "СтрокиОтчетов" 
		ИЛИ Элемент.ТекущиеДанные.Код = "КолонкиОтчетов" 
	       ИЛИ Элемент.ТекущиеДанные.Код = "ПериодОтчета"
		      ИЛИ Элемент.ТекущиеДанные.Код = "Сценарий"
			  	ИЛИ Элемент.ТекущиеДанные.Код = "Организация"
                   ИЛИ Элемент.ТекущиеДанные.Код = "Проект"    Тогда
				     Возврат;
	КонецЕсли;			   

	ТекущиеДанныеСтруктура = Новый Структура();   
	ТекущиеДанныеСтруктура.Вставить("Наименование",Элемент.ТекущиеДанные.Наименование);
	ТекущиеДанныеСтруктура.Вставить("Код",Элемент.ТекущиеДанные.Код);
    ТекущиеДанныеСтруктура.Вставить("ТипСтрока",Элемент.ТекущиеДанные.ТипСтрока);
    ТекущиеДанныеСтруктура.Вставить("ТипСубконто",Элемент.ТекущиеДанные.ТипСубконто);

	Параметры_ = Новый Структура;
	
	Параметры_.Вставить("НастройкиПолейСводнойТаблицыАдрес",ПолучитьНастройкиПолейСводнойТаблицыАдрес(ТекущиеДанныеСтруктура));
		
	Оповещение = Новый ОписаниеОповещения("НастройкаПоляЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Обработка.АналитическийБланкСводнаяТаблица.Форма.ФормаНастройкиАналитики", 
	Параметры_,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 		
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКолонкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если Элемент.ТекущиеДанные.Код = "СтрокиОтчетов" 
		ИЛИ Элемент.ТекущиеДанные.Код = "КолонкиОтчетов" 
	       ИЛИ Элемент.ТекущиеДанные.Код = "ПериодОтчета"
		      ИЛИ Элемент.ТекущиеДанные.Код = "Сценарий"
			  	ИЛИ Элемент.ТекущиеДанные.Код = "Организация"
                   ИЛИ Элемент.ТекущиеДанные.Код = "Проект"    Тогда
				     Возврат;
	КонецЕсли;			   

	ТекущиеДанныеСтруктура = Новый Структура();   
	ТекущиеДанныеСтруктура.Вставить("Наименование",Элемент.ТекущиеДанные.Наименование);
	ТекущиеДанныеСтруктура.Вставить("Код",Элемент.ТекущиеДанные.Код);
    ТекущиеДанныеСтруктура.Вставить("ТипСтрока",Элемент.ТекущиеДанные.ТипСтрока);
    ТекущиеДанныеСтруктура.Вставить("ТипСубконто",Элемент.ТекущиеДанные.ТипСубконто);

	Параметры_ = Новый Структура;
	
	Параметры_.Вставить("НастройкиПолейСводнойТаблицыАдрес",ПолучитьНастройкиПолейСводнойТаблицыАдрес(ТекущиеДанныеСтруктура));
		
	Оповещение = Новый ОписаниеОповещения("НастройкаПоляЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Обработка.АналитическийБланкСводнаяТаблица.Форма.ФормаНастройкиАналитики", 
	Параметры_,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 		
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтрокиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКолонкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтраницыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступныеПоляПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтрокиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	 
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКолонкиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	 
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтраницыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	 
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступныеПоляПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступныеПоляВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтраницыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДоступныеПоля(Команда)
	
	ТекущаяТаблица = ЭтаФорма.ТекущийЭлемент;
	
	Для Каждого ВыделенныйЭлемент Из ТекущаяТаблица.ВыделенныеСтроки Цикл
		
		ТекСтрокаДанных =  ЭтаФорма[ТекущаяТаблица.Имя].НайтиПоИдентификатору(ВыделенныйЭлемент);    	
		ПеренестиПоле(ТекСтрокаДанных.Код,ТекущаяТаблица.Имя,"ТаблицаДоступныеПоля");
	
	КонецЦикла;	

	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВСтроки(Команда)
	
	ТекущаяТаблица = ЭтаФорма.ТекущийЭлемент;
	
	Для Каждого ВыделенныйЭлемент Из ТекущаяТаблица.ВыделенныеСтроки Цикл
		
		ТекСтрокаДанных =  ЭтаФорма[ТекущаяТаблица.Имя].НайтиПоИдентификатору(ВыделенныйЭлемент);    	
		ПеренестиПоле(ТекСтрокаДанных.Код,ТекущаяТаблица.Имя,"ТаблицаСтроки");
	
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВОтборы(Команда)
	
	ТекущаяТаблица = ЭтаФорма.ТекущийЭлемент;
	
	Для Каждого ВыделенныйЭлемент Из ТекущаяТаблица.ВыделенныеСтроки Цикл
		
		ТекСтрокаДанных =  ЭтаФорма[ТекущаяТаблица.Имя].НайтиПоИдентификатору(ВыделенныйЭлемент);    	
		ПеренестиПоле(ТекСтрокаДанных.Код,ТекущаяТаблица.Имя,"ТаблицаСтраницы");
	
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВКолонки(Команда)
	
	ТекущаяТаблица = ЭтаФорма.ТекущийЭлемент;
	
	Для Каждого ВыделенныйЭлемент Из ТекущаяТаблица.ВыделенныеСтроки Цикл
		
		ТекСтрокаДанных =  ЭтаФорма[ТекущаяТаблица.Имя].НайтиПоИдентификатору(ВыделенныйЭлемент);    	
		ПеренестиПоле(ТекСтрокаДанных.Код,ТекущаяТаблица.Имя,"ТаблицаКолонки");
	
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРасположенияАналитик(Команда)
	
	ОповещениеВыборИзМенюОкончание = Новый ОписаниеОповещения("ВыборИзМенюОкончание",ЭтаФорма);
	
	СписокДоступныхЗначений = Новый СписокЗначений;
	СписокДоступныхЗначений.Добавить("А1",Нстр("ru = 'Аналитики в иерархии'"));
	СписокДоступныхЗначений.Добавить("А2",Нстр("ru = 'Аналитики рядом'"));
	
	ЭтаФорма.ПоказатьВыборИзМеню(ОповещениеВыборИзМенюОкончание,СписокДоступныхЗначений,Элементы.ВаринатРасположенияАналитик);
	
КонецПроцедуры

#КонецОбласти


&НаСервере
Процедура УстановитьЗаголовокСтрокКолонок();
	
	Если НастройкиВариантаСводнойТаблицы.Количество()=1 Тогда 
		Если НастройкиВариантаСводнойТаблицы[0].ВыводитьАналитикиСтрокВИерархии Тогда
			 Элементы.ДекорацияВСтроках.Заголовок = Нстр("ru = 'В строках (аналитики в иерархии)'");
		Иначе	
			 Элементы.ДекорацияВСтроках.Заголовок = Нстр("ru = 'В строках (аналитики рядом)'");
		КонецЕсли;	
		
		Если НастройкиВариантаСводнойТаблицы[0].ВыводитьАналитикиКолонокВИерархии Тогда
			 Элементы.ДекорацияВКолонках.Заголовок = Нстр("ru = 'В колонках (аналитики в иерархии)'");
		Иначе	
			 Элементы.ДекорацияВКолонках.Заголовок = Нстр("ru = 'В колонках (аналитики рядом)'");
		КонецЕсли;	
		
	КонецЕсли;	
	
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьИзмененияСервер()
					
	НастройкиРасположенияПолейСводнойТаблицы.Очистить();
	
	НомерПоПорядку = 1;
	
	Для Каждого Стр Из ТаблицаСтроки Цикл
		
		нСтрокаСостава 						= НастройкиРасположенияПолейСводнойТаблицы.Добавить();
		нСтрокаСостава.ОсьТаблицы	 		= Перечисления.ОсиСводнойТаблицы.Строки;
		нСтрокаСостава.Поле 		    	= Стр.ТипСубконто;
		нСтрокаСостава.КодПоля 				= Стр.Код;
		нСтрокаСостава.ПредставлениеПоля	= Стр.Наименование;
		нСтрокаСостава.НомерПоПорядку		= НомерПоПорядку;
		
		НомерПоПорядку = НомерПоПорядку+1;
		
	КонецЦикла;	
	
	НомерПоПорядку = 1;
	
	Для Каждого Стр Из ТаблицаКолонки Цикл
		
		нСтрокаСостава 						= НастройкиРасположенияПолейСводнойТаблицы.Добавить();
		нСтрокаСостава.ОсьТаблицы	 		= Перечисления.ОсиСводнойТаблицы.Колонки;
		нСтрокаСостава.Поле 		    	= Стр.ТипСубконто;
		нСтрокаСостава.КодПоля 				= Стр.Код;
		нСтрокаСостава.ПредставлениеПоля	= Стр.Наименование;
		нСтрокаСостава.НомерПоПорядку		= НомерПоПорядку;
		
		НомерПоПорядку = НомерПоПорядку+1;
		
	КонецЦикла;	
	
	НомерПоПорядку = 1;
	
	Для Каждого Стр Из ТаблицаСтраницы Цикл
		
		нСтрокаСостава 						= НастройкиРасположенияПолейСводнойТаблицы.Добавить();
		нСтрокаСостава.ОсьТаблицы	 		= Перечисления.ОсиСводнойТаблицы.Отборы;
		нСтрокаСостава.Поле 		    	= Стр.ТипСубконто;
		нСтрокаСостава.КодПоля 				= Стр.Код;
		нСтрокаСостава.ПредставлениеПоля	= Стр.Наименование;
		нСтрокаСостава.НомерПоПорядку		= НомерПоПорядку;
		
		НомерПоПорядку = НомерПоПорядку+1;
		
	КонецЦикла;	

	Для Каждого СтрПоле Из НастройкиРасположенияПолейСводнойТаблицы Цикл
		СтрПоле.ТипСтрока = Обработки.АналитическийБланкСводнаяТаблица.ПолучитьТипЗначенияАналитики(СтрПоле.Поле);
	КонецЦикла;	
	
	
	тНастройкиРасположенияПолейСводнойТаблицы 		= НастройкиРасположенияПолейСводнойТаблицы.Выгрузить();
	НастройкиРасположенияПолейСводнойТаблицыАдрес 	= ПоместитьВоВременноеХранилище(тНастройкиРасположенияПолейСводнойТаблицы, Новый УникальныйИдентификатор);
	
	тНастройкиПолейСводнойТаблицы 		= НастройкиПолейСводнойТаблицы.Выгрузить();
	НастройкиПолейСводнойТаблицыАдрес 	= ПоместитьВоВременноеХранилище(тНастройкиПолейСводнойТаблицы, Новый УникальныйИдентификатор);
	
	тНастройкиВариантаСводнойТаблицы 		= НастройкиВариантаСводнойТаблицы.Выгрузить();
	НастройкиВариантаСводнойТаблицыАдрес 	= ПоместитьВоВременноеХранилище(тНастройкиВариантаСводнойТаблицы, Новый УникальныйИдентификатор);
		
КонецПроцедуры	

&НаСервере
Процедура ПрочитатьРасположениеАналитик()
	
	Для Каждого СтрРасположение Из НастройкиРасположенияПолейСводнойТаблицы Цикл
		
		Если СтрРасположение.ОсьТаблицы = Перечисления.ОсиСводнойТаблицы.Строки Тогда
			ПеренестиПоле(СтрРасположение.КодПоля,"ТаблицаДоступныеПоля","ТаблицаСтроки");
		ИначеЕсли СтрРасположение.ОсьТаблицы = Перечисления.ОсиСводнойТаблицы.Колонки Тогда
			ПеренестиПоле(СтрРасположение.КодПоля,"ТаблицаДоступныеПоля","ТаблицаКолонки");
		ИначеЕсли СтрРасположение.ОсьТаблицы = Перечисления.ОсиСводнойТаблицы.Отборы Тогда
			ПеренестиПоле(СтрРасположение.КодПоля,"ТаблицаДоступныеПоля","ТаблицаСтраницы");
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиПоле(ИмяПоля,ТаблицаИсточникСтрока,ТаблицаПриемникСтрока,Отказ = Ложь)
	
	ТаблицаИсточник = ЭтаФорма[ТаблицаИсточникСтрока];
	ТаблицаПриемник = ЭтаФорма[ТаблицаПриемникСтрока];
	
	Если ПроверитьВозможностьПеренесенияПоля(ИмяПоля,ТаблицаИсточникСтрока,ТаблицаПриемникСтрока) Тогда
		
		тПоле = ТаблицаИсточник.НайтиСтроки(Новый Структура("Код",ИмяПоля));
		Если  тПоле.Количество() = 1 Тогда
			нСтр = ТаблицаПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(нСтр,тПоле[0]);
			ТаблицаИсточник.Удалить(тПоле[0]);
		КонецЕсли;	
		
	Иначе	
		 Отказ = Истина;
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьПеренесенияПоля(ИмяПоля,ТаблицаИсточник,ТаблицаПриемник)
	
	Если ИмяПоля = "СтрокиОтчетов" И НЕ ТаблицаПриемник = "ТаблицаСтроки" Тогда
		 Возврат Ложь;
	КонецЕсли;	
	
	Если ИмяПоля = "КолонкиОтчетов" И НЕ ТаблицаПриемник = "ТаблицаКолонки" Тогда
		 Возврат Ложь;
	КонецЕсли;	

	Если ИмяПоля = "Сценарий" И НЕ ТаблицаПриемник = "ТаблицаСтраницы" Тогда
		 Возврат Ложь;
	КонецЕсли;	

	Возврат Истина;
	
КонецФункции	

&НаКлиенте
Функция ПроверитьВозможностьПеренесенияПоляКлиент(ИмяПоля,ТаблицаИсточник,ТаблицаПриемник)
	
	Если ИмяПоля = "СтрокиОтчетов" И НЕ ТаблицаПриемник = "ТаблицаСтроки" Тогда
		 Возврат Ложь;
	КонецЕсли;	
	
	Если ИмяПоля = "КолонкиОтчетов" И НЕ ТаблицаПриемник = "ТаблицаКолонки" Тогда
		 Возврат Ложь;
	КонецЕсли;	

	Если ИмяПоля = "Сценарий" И НЕ ТаблицаПриемник = "ТаблицаСтраницы" Тогда
		 Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыборИзМенюОкончание(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		 Возврат;
	КонецЕсли;	
	
	Если Результат.Значение = "А1" Тогда
		НастройкиВариантаСводнойТаблицы[0].ВыводитьАналитикиСтрокВИерархии = Истина;
	Иначе	
		НастройкиВариантаСводнойТаблицы[0].ВыводитьАналитикиСтрокВИерархии = Ложь;
	КонецЕсли;	
	
	УстановитьЗаголовокСтрокКолонок();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПоляЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если  Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
			
	ПрименитьНастройкиПолей(Результат);
		
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиПолейСводнойТаблицыАдрес(ТекущиеДанные)
	
	ТекНастройкиПоля = НастройкиПолейСводнойТаблицы.Выгрузить().Скопировать(Новый Структура("Поле",ТекущиеДанные.ТипСубконто));
		
	Возврат ПоместитьВоВременноеХранилище(ТекНастройкиПоля,Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ПрименитьНастройкиПолей(Результат);
	
	 тНастройкиПоля = ПолучитьИзВременногоХранилища(Результат.НастройкиПолейСводнойТаблицыАдрес);
	 тПоле          = НастройкиПолейСводнойТаблицы.НайтиСтроки(Новый Структура("Поле",тНастройкиПоля[0].Поле))[0];
	 ЗаполнитьЗначенияСвойств(тПоле,тНастройкиПоля[0]);
	 
КонецПроцедуры	


&НаКлиенте
Процедура СтрокиПереместитьВВерх(Команда)
	
	Если НЕ Элементы.ТаблицаСтроки.ТекущиеДанные = Неопределено 
		И Элементы.ТаблицаСтроки.ТекущиеДанные.Код = "СтрокиОтчетов" Тогда
		Возврат;
	КонецЕсли;	
	
	Сдвиг = -1;
	
	НовыйИндекс = ТаблицаСтроки.Индекс(Элементы.ТаблицаСтроки.ТекущиеДанные)+Сдвиг; 
	 
	Если НовыйИндекс >0 Тогда
		ТаблицаСтроки.Сдвинуть(ТаблицаСтроки.Индекс(Элементы.ТаблицаСтроки.ТекущиеДанные),Сдвиг);
	КонецЕсли;
	
 КонецПроцедуры

&НаКлиенте
Процедура СтрокиПереместитьВниз(Команда)
	 
	Сдвиг = 1;
	
	Если НЕ Элементы.ТаблицаСтроки.ТекущиеДанные = Неопределено 
		И Элементы.ТаблицаСтроки.ТекущиеДанные.Код = "СтрокиОтчетов" Тогда
		Возврат;
	КонецЕсли;	
	
	НовыйИндекс = ТаблицаСтроки.Индекс(Элементы.ТаблицаСтроки.ТекущиеДанные)+Сдвиг;
	
	Если НовыйИндекс <ТаблицаСтроки.Количество() Тогда
		ТаблицаСтроки.Сдвинуть(ТаблицаСтроки.Индекс(Элементы.ТаблицаСтроки.ТекущиеДанные),Сдвиг);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КолонкиПереместитьВВерх(Команда)
	
	Сдвиг = -1;
	
	НовыйИндекс = ТаблицаКолонки.Индекс(Элементы.ТаблицаКолонки.ТекущиеДанные)+Сдвиг; 
	 
	Если НовыйИндекс >=0 Тогда
		ТаблицаКолонки.Сдвинуть(ТаблицаКолонки.Индекс(Элементы.ТаблицаКолонки.ТекущиеДанные),Сдвиг);
	КонецЕсли;
	
 КонецПроцедуры

&НаКлиенте
Процедура КолонкиПереместитьВниз(Команда)
	 
	Сдвиг = 1;
		
	НовыйИндекс = ТаблицаКолонки.Индекс(Элементы.ТаблицаКолонки.ТекущиеДанные)+Сдвиг;
	
	Если НовыйИндекс <ТаблицаКолонки.Количество() Тогда
		ТаблицаКолонки.Сдвинуть(ТаблицаКолонки.Индекс(Элементы.ТаблицаКолонки.ТекущиеДанные),Сдвиг);
	КонецЕсли;

КонецПроцедуры
