
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	НастройкиСоставаСтрокСводнойТаблицыАдрес = Параметры.НастройкиСоставаСтрокСводнойТаблицыАдрес;
		
	Если ЗначениеЗаполнено(Параметры.ВидОтчета) Тогда
		ВидОтчета = Параметры.ВидОтчета;
	Иначе	
		ЗаполнитьОсновнойВидОтчета();
	КонецЕсли;
	
	Элементы.ВидОтчета.ТолькоПросмотр = Параметры.ЗаблокироватьВидОтчета;
	
	ЗаполнитьДеревоВыбранныхСтрок();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ДеревоВыбранныхСтрок.Развернуть(0,Истина);
    ВидОтчетаПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзменения(Команда)
	
	ПрименитьИзмененияСервер();
	Закрыть(Новый Структура("Изменено,НастройкиСоставаСтрокСводнойТаблицыАдрес",Истина,НастройкиСоставаСтрокСводнойТаблицыАдрес));
		
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИзменения(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВидОтчетаПриИзменении(Элемент)
	
	ЗаполнитьДеревоСтрок(ВидОтчета,Бланк);
	Строки1Уровня = ДеревоНастройки.ПолучитьЭлементы();
	Для Каждого Эл из Строки1Уровня Цикл
			Элементы.ДеревоНастройки.Развернуть(Эл.ПолучитьИдентификатор(),Истина);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыбранныхСтрокПередУдалением(Элемент, Отказ)
	
	Для Каждого СтрВыделеннаяСтрока  Из Элемент.ВыделенныеСтроки Цикл
		Если СтрВыделеннаяСтрока = 0 Тогда
			 Отказ = Истина;
		КонецЕсли;		
	КонецЦикла;	
	                                        		
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВлевоВсе(Команда,СтрокаРодитель = Неопределено)
	
	ЕстьПодчиненные = Ложь;
	МассивПереносимыхСтрок = Новый Массив;
	
	Для Каждого  Строка Из ДеревоНастройки.ПолучитьЭлементы() Цикл
					
		Если Строка.ПолучитьЭлементы().Количество()>0 Тогда
			 ЕстьПодчиненные = Истина;	
		КонецЕсли;	
		
		МассивПереносимыхСтрок.Добавить(Строка);
		
	КонецЦикла;	
	
	Если СтрокаРодитель = Неопределено Тогда
		
		индСтрокаРодитель = Элементы.ДеревоВыбранныхСтрок.ВыделенныеСтроки[0];
		СтрокаРодитель =  ДеревоВыбранныхСтрок.НайтиПоИдентификатору(индСтрокаРодитель);
				
	КонецЕсли;	

	ДополнительныеПараметры = Новый Структура("СтрокаРодитель,МассивПереносимыхСтрок",СтрокаРодитель,МассивПереносимыхСтрок);
	
	Для Каждого Стр Из ДополнительныеПараметры.МассивПереносимыхСтрок Цикл
		
		Если Стр.Наименование = Нстр("ru = 'Доступные строки'") Тогда
			Нстр = ДополнительныеПараметры.СтрокаРодитель;
			ДобавитьНовыеСтрокиРекурсивно(Нстр,Стр);
			Возврат;
		КонецЕсли;	
		
		Нстр = ДополнительныеПараметры.СтрокаРодитель.ПолучитьЭлементы().Добавить();
		Нстр.Наименование = Строка(Стр.Строка);
		Нстр.СтрокаОтчета = Стр.Строка;
		Нстр.ПорядковыйНомер = ДополнительныеПараметры.СтрокаРодитель.ПолучитьЭлементы().Количество()-1;
		Нстр.ГруппаРаскрытия = Стр.ГруппаРаскрытия;
		Нстр.Код 			 = Стр.Код;
		Нстр.ВидОтчета       = ВидОтчета;
		
		ДополнительныеПараметры.СтрокаРодитель.ЭтоЭлементГруппа = Истина;
		
		Если НЕ  ДополнительныеПараметры.СтрокаРодитель.Наименование = Нстр("ru = 'Выбранные строки'") Тогда
			ДополнительныеПараметры.СтрокаРодитель.ЭтоЭлементГруппа = Истина;
		КонецЕсли;
		
		ДобавитьНовыеСтрокиРекурсивно(Нстр,Стр);
		
	КонецЦикла;
	
	Элементы.ДеревоВыбранныхСтрок.Развернуть(0,Истина);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастройкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(,Элемент.ТекущиеДанные.Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВлево(Команда,СтрокаРодитель = Неопределено)
	
	ЕстьПодчиненные = Ложь;
	МассивПереносимыхСтрок = Новый Массив;
	
	Для Каждого  индСтроки Из Элементы.ДеревоНастройки.ВыделенныеСтроки Цикл
		
		Строка = ДеревоНастройки.НайтиПоИдентификатору(индСтроки);	
		Если Строка.СтрокаИспользована Тогда
			 Продолжить;
		КонецЕсли;
		
		Если Строка.ПолучитьЭлементы().Количество()>0 Тогда
			 ЕстьПодчиненные = Истина;	
		КонецЕсли;	
		
		МассивПереносимыхСтрок.Добавить(Строка);
		
	КонецЦикла;	
	
	Если СтрокаРодитель = Неопределено Тогда
		
		индСтрокаРодитель = Элементы.ДеревоВыбранныхСтрок.ВыделенныеСтроки[0];
		СтрокаРодитель =  ДеревоВыбранныхСтрок.НайтиПоИдентификатору(индСтрокаРодитель);
				
	КонецЕсли;	

	
	ДопПараметры = Новый Структура("СтрокаРодитель,МассивПереносимыхСтрок",СтрокаРодитель,МассивПереносимыхСтрок);
	
	Если  ЕстьПодчиненные Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение",ЭтаФорма,ДопПараметры);
		ПоказатьВопрос(Оповещение, Нстр("ru = 'Перенести подчиненные элементы?'"), РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе	
		
		Для Каждого Стр Из МассивПереносимыхСтрок Цикл   	
			
			Нстр = СтрокаРодитель.ПолучитьЭлементы().Добавить();
			Нстр.Наименование 	 = Строка(Стр.Строка);
			Нстр.СтрокаОтчета 	 = Стр.Строка;
			Нстр.ПорядковыйНомер = СтрокаРодитель.ПолучитьЭлементы().Количество()-1; 
			Нстр.ГруппаРаскрытия = Стр.ГруппаРаскрытия;
			Нстр.Код 			 = Стр.Код;
			Нстр.ВидОтчета       = ВидОтчета;
			
			Если НЕ  СтрокаРодитель.Наименование = Нстр("ru = 'Выбранные строки'") Тогда
				СтрокаРодитель.ЭтоЭлементГруппа = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Элементы.ДеревоВыбранныхСтрок.Развернуть(0,Истина);

		
	КонецЕсли; 
	
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьУровниДоступные(Команда)
	
	ТекМассив = ДеревоНастройки.НайтиПоИдентификатору(0).ПолучитьЭлементы();
	Для Каждого Эл Из ТекМассив Цикл
		
		Элементы.ДеревоНастройки.Свернуть(Эл.ПолучитьИдентификатор());
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево(Элемент,Знач ТекущийУзел) Экспорт
	
	ТекМассив = ТекущийУзел.ПолучитьЭлементы();
	Для Каждого Эл Из ТекМассив Цикл
		
		Элемент.Свернуть(Эл.ПолучитьИдентификатор());
		СвернутьДерево(Элемент,Эл);
		
	КонецЦикла;
		
КонецПроцедуры 

&НаКлиенте
Процедура РазвернутьУровниДоступные(Команда)
		
	Элементы.ДеревоНастройки.Развернуть(0,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьУровниВыбранные(Команда)
	
	Элементы.ДеревоВыбранныхСтрок.Развернуть(0,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьУровниВыбранные(Команда)
	
	ТекМассив = ДеревоВыбранныхСтрок.НайтиПоИдентификатору(0).ПолучитьЭлементы();
	
	Для Каждого Эл Из ТекМассив Цикл
		
		Элементы.ДеревоВыбранныхСтрок.Свернуть(Эл.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыбранныхСтрокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыбранныхСтрокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастройкиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		МассивОтвета = Новый Массив;                           
		
		Для Каждого Ид_Элемент Из ПараметрыПеретаскивания.Значение Цикл			
			МассивОтвета.Добавить(Ид_Элемент);
		КонецЦикла;
		
		ПараметрыПеретаскивания.ДопустимыеДействия 	= ДопустимыеДействияПеретаскивания.Копирование;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;	
		ПараметрыПеретаскивания.Значение = Новый Структура("Источник,Строки", "Доступные",МассивОтвета);
		                       
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыбранныхСтрокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыбранныхСтрокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ЕстьПодчиненные = Ложь;
	МассивПереносимыхСтрок = Новый Массив;
	
	Если Строка = Неопределено Тогда	
		СтрокаРодитель = ДеревоВыбранныхСтрок.НайтиПоИдентификатору(0);	
	Иначе
		СтрокаРодитель = ДеревоВыбранныхСтрок.НайтиПоИдентификатору(Строка);	
	КонецЕсли;
	
	
	Если  ПараметрыПеретаскивания.Значение.Источник = "Выбранные" Тогда
					
			Для Каждого эМассив Из ПараметрыПеретаскивания.Значение.Строки Цикл
				
				ПереноисмаяСтрока = ДеревоВыбранныхСтрок.НайтиПоИдентификатору(эМассив);	
				
				Если СтрокаРодитель = ПереноисмаяСтрока.ПолучитьРодителя() Тогда
					 Продолжить;
				КонецЕсли;	
				
				Если ПереноисмаяСтрока.ПолучитьЭлементы().Количество()>0 Тогда
					ЕстьПодчиненные = Истина;	
				КонецЕсли;	
				
				ИсходныйРодитель = ПереноисмаяСтрока.ПолучитьРодителя();
				
				МассивПереносимыхСтрок.Добавить(эМассив);
				
				Нстр = СтрокаРодитель.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(Нстр,ПереноисмаяСтрока);
				Нстр.ПорядковыйНомер = СтрокаРодитель.ПолучитьЭлементы().Количество()-1; 
				СтрокаРодитель.ЭтоЭлементГруппа = Истина;
				
				Если НЕ  СтрокаРодитель.Наименование = Нстр("ru = 'Выбранные строки'") Тогда
					СтрокаРодитель.ЭтоЭлементГруппа = Истина;
				КонецЕсли;

								
				Если  ЕстьПодчиненные Тогда
					
					ПеренестиСПодчиненными(ПереноисмаяСтрока,Нстр);
					  
				КонецЕсли; 

				Для Каждого индСтроки Из МассивПереносимыхСтрок Цикл
					
					НужнаяСтрока = ДеревоВыбранныхСтрок.НайтиПоИдентификатору(индСтроки);
					
					Если НЕ НужнаяСтрока = Неопределено Тогда
						
						тРодитель = ПереноисмаяСтрока.ПолучитьРодителя();
						Если Не тРодитель = Неопределено Тогда
							ПереноисмаяСтрока.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ПереноисмаяСтрока);
						Иначе	
							ДеревоВыбранныхСтрок.ПолучитьЭлементы().Удалить(ПереноисмаяСтрока);
						КонецЕсли;
						
						Если  тРодитель.ПолучитьЭлементы().Количество() = 0 Тогда
							тРодитель.ЭтоЭлементГруппа = Ложь;							
							Если НЕ  тРодитель.Наименование = Нстр("ru = 'Выбранные строки'") Тогда
								тРодитель.ЭтоЭлементГруппа = Ложь;
							КонецЕсли;
							
						КонецЕсли;	
						
					КонецЕсли;
					
				КонецЦикла;	
									
			КонецЦикла;
			
		ИначеЕсли ПараметрыПеретаскивания.Значение.Источник = "Доступные" Тогда 	
		
			ПеренестиВлево(Неопределено,СтрокаРодитель);
			
		КонецЕсли;
		
	Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыбранныхСтрокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		МассивОтвета = Новый Массив;                           
		
		Для Каждого Ид_Элемент Из ПараметрыПеретаскивания.Значение Цикл			
			Если Ид_Элемент = 0 Тогда
				 Выполнение = Ложь;
				 Возврат;
			КонецЕсли;	
			МассивОтвета.Добавить(Ид_Элемент);
		КонецЦикла;
		
		ПараметрыПеретаскивания.ДопустимыеДействия 	= ДопустимыеДействияПеретаскивания.Перемещение;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;	
		ПараметрыПеретаскивания.Значение = Новый Структура("Источник,Строки", "Выбранные",МассивОтвета);
		                       
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


&НаСервере
Процедура ЗаполнитьДеревоСтрок(ВидОтчета,Бланк)
	
	ДеревоНастройкиСервер=РеквизитФормыВЗначение("ДеревоНастройки");
	ДеревоНастройкиСервер.Строки.Очистить();
	
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	СтрокиОтчетов.ПорядковыйНомер КАК ПорядковыйНомер,
	             |	СтрокаКолонка.Строка,
	             |	СтрокаКолонка.Код,
	             |	СтрокаКолонка.Наименование,
	             |	СтрокаКолонка.ГруппаРаскрытия,
	             |	СтрокаКолонка.ГруппаРаскрытия.ВидАналитики1 КАК ВидАналитики1,
	             |	СтрокаКолонка.ГруппаРаскрытия.ВидАналитики2 КАК ВидАналитики2,
	             |	СтрокаКолонка.ГруппаРаскрытия.ВидАналитики3 КАК ВидАналитики3,
	             |	СтрокаКолонка.ГруппаРаскрытия.ВидАналитики4 КАК ВидАналитики4,
	             |	СтрокаКолонка.ГруппаРаскрытия.ВидАналитики5 КАК ВидАналитики5,
				 |	СтрокаКолонка.ГруппаРаскрытия.ВидАналитики6 КАК ВидАналитики6,
				 |	СтрокаКолонка.ВидИтога,
	             |	СтрокаКолонка.ТипЗначения,
	             |	СтрокаКолонка.Родитель,
	             |	СтрокиОтчетов.СуммироватьПодчиненные,
	             |	СтрокаКолонка.СпособОбработки,
	             |	СтрокаКолонка.ВидКурса,
	             |	СтрокаКолонка.ВидПоказателя,
	             |	СтрокаКолонка.ДействияПриАктуализации,
	             |	СтрокаКолонка.Внутригрупповой,
	             |	СтрокаКолонка.Оборотный,
	             |	СтрокаКолонка.НеМасштабируется,
	             |	СтрокаКолонка.Наименование1,
	             |	СтрокаКолонка.Наименование2,
	             |	СтрокаКолонка.ПриходРасход,
	             |	СтрокаКолонка.ОценкаПоложительногоОтклонения,
	             |	СтрокаКолонка.СтатьяБюджета,
	             |	СтрокаКолонка.Предназначение,
	             |	СтрокаКолонка.РазделениеПоПроектам,
	             |	ВЫБОР КОГДА СтрокиСтруктуры.Ссылка IS NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК СтрокаИспользована
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		СтрокиОтчетов.Ссылка КАК Строка,
	             |		СтрокиОтчетов.Код КАК Код,
	             |		СтрокиОтчетов.Наименование КАК Наименование,
	             |		СтрокиОтчетов.ГруппаРаскрытия КАК ГруппаРаскрытия,
	             |		СтрокиОтчетов.ПорядковыйНомер КАК ПорядковыйНомер,
	             |		СтрокиОтчетов.ВидИтога КАК ВидИтога,
	             |		СтрокиОтчетов.ТипЗначения КАК ТипЗначения,
	             |		СтрокиОтчетов.Родитель КАК Родитель,
	             |		СтрокиОтчетов.СпособОбработки КАК СпособОбработки,
	             |		СтрокиОтчетов.ВидКурса КАК ВидКурса,
	             |		СтрокиОтчетов.ВидПоказателя КАК ВидПоказателя,
	             |		СтрокиОтчетов.ДействияПриАктуализации КАК ДействияПриАктуализации,
	             |		СтрокиОтчетов.Внутригрупповой КАК Внутригрупповой,
	             |		СтрокиОтчетов.Оборотный КАК Оборотный,
	             |		СтрокиОтчетов.НеМасштабируется КАК НеМасштабируется,
	             |		СтрокиОтчетов.Наименование1 КАК Наименование1,
	             |		СтрокиОтчетов.Наименование2 КАК Наименование2,
	             |		СтрокиОтчетов.ПриходРасход КАК ПриходРасход,
	             |		ВЫБОР
	             |			КОГДА СтрокиОтчетов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств)
	             |				ТОГДА СтрокиОтчетов.СтатьяДвиженияДенежныхСредств
	             |			КОГДА СтрокиОтчетов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов)
	             |				ТОГДА СтрокиОтчетов.СтатьяДоходовИРасходов
	             |			КОГДА СтрокиОтчетов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов)
	             |				ТОГДА СтрокиОтчетов.СтатьяДвиженияРесурсов
	             |			ИНАЧЕ НЕОПРЕДЕЛЕНО
	             |		КОНЕЦ КАК СтатьяБюджета,
	             |		СтрокиОтчетов.ОценкаПоложительногоОтклонения КАК ОценкаПоложительногоОтклонения,
	             |		ВЫБОР
	             |			КОГДА СтрокиОтчетов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.ПустаяСсылка)
	             |				ТОГДА ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.ПроизвольныеДанные)
	             |			ИНАЧЕ СтрокиОтчетов.Предназначение
	             |		КОНЕЦ КАК Предназначение,
	             |		СтрокиОтчетов.РазделениеПоПроектам КАК РазделениеПоПроектам
	             |	ИЗ
	             |		Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	             |	ГДЕ
	             |		СтрокиОтчетов.Владелец = &ВидОтчета
	             |		И НЕ СтрокиОтчетов.ПометкаУдаления) КАК СтрокаКолонка
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	             |		ПО СтрокаКолонка.Строка = СтрокиОтчетов.Ссылка
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиСтруктурыБланка КАК СтрокиСтруктуры
	             |		ПО СтрокаКолонка.Строка = СтрокиСтруктуры.СтрокаОтчета
	             |			И (СтрокиСтруктуры.Владелец = &Бланк)
	             |ГДЕ
	             |	СтрокиОтчетов.Владелец = &ВидОтчета
	             |	И НЕ СтрокиОтчетов.ПометкаУдаления
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ПорядковыйНомер ИЕРАРХИЯ";
				 
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	Запрос.УстановитьПараметр("Бланк",Бланк);

	
	ВыводимаяСтрокаОтчета=Справочники.СтрокиОтчетов.ПустаяСсылка();
	ТекущаяСтрокаДерева=Неопределено;
	
	Результат=Запрос.Выполнить().Выбрать();
	
	СоответствиеСтрок=Новый Соответствие;
	СоответствиеРодителей=Новый Соответствие;
	
	СписокАналитик=Новый Массив;
	
	ЕстьСтрокиБюджетов=Ложь;
		
	Пока Результат.Следующий() Цикл
		
		Если Результат.Строка<>ВыводимаяСтрокаОтчета Тогда
			
			ТекущаяСтрокаДерева=СоответствиеСтрок[Результат.Строка];
			
			Если ТекущаяСтрокаДерева=Неопределено Тогда
				
				Если Результат.Родитель=Справочники.СтрокиОтчетов.ПустаяСсылка() Тогда
					
					ТекущаяСтрокаДерева=ДеревоНастройкиСервер.Строки.Добавить();
					
				Иначе
					
					СтрокаРодитель=СоответствиеРодителей[Результат.Родитель];
					
					Если СтрокаРодитель=Неопределено Тогда
												
						СтрокаРодитель=ДеревоНастройкиСервер.Строки.Найти(Результат.Родитель,"Строка",Истина);
						СоответствиеРодителей.Вставить(Результат.Родитель,СтрокаРодитель);
						
					КонецЕсли;
					
					ТекущаяСтрокаДерева=СтрокаРодитель.Строки.Добавить();
					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ТекущаяСтрокаДерева,Результат);
				ТекущаяСтрокаДерева.Код=СокрЛП(Результат.Код);
				СоответствиеСтрок.Вставить(Результат.Строка,ТекущаяСтрокаДерева);
				
			КонецЕсли;
			
			ВыводимаяСтрокаОтчета=Результат.Строка;
			
		КонецЕсли;
				
		Для Индекс=1 ПО ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			Если ЗначениеЗаполнено(ТекущаяСтрокаДерева["ВидАналитики"+Индекс]) И СписокАналитик.Найти("ДеревоНастройкиСтруктурыВидАналитики"+Индекс)=Неопределено Тогда
				
				СписокАналитик.Добавить("ДеревоНастройкиСтруктурыВидАналитики"+Индекс);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТекущаяСтрокаДерева.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств
			ИЛИ ТекущаяСтрокаДерева.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов
			ИЛИ ТекущаяСтрокаДерева.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов Тогда
			
			ЕстьСтрокиБюджетов=Истина;
			
		КонецЕсли;

	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоНастройкиСервер,"ДеревоНастройки");	
				
КонецПроцедуры // ЗаполнитьДеревоСтрок()

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Для Каждого Стр Из ДополнительныеПараметры.МассивПереносимыхСтрок Цикл
			
			Если Стр.Наименование = Нстр("ru = 'Доступные строки'") Тогда
				 Нстр = ДополнительныеПараметры.СтрокаРодитель;
				 ДобавитьНовыеСтрокиРекурсивно(Нстр,Стр);
                 Возврат;
			КонецЕсли;	
			
			Нстр = ДополнительныеПараметры.СтрокаРодитель.ПолучитьЭлементы().Добавить();
			Нстр.Наименование = Строка(Стр.Строка);
			Нстр.СтрокаОтчета = Стр.Строка;
			Нстр.ПорядковыйНомер = ДополнительныеПараметры.СтрокаРодитель.ПолучитьЭлементы().Количество()-1;
			Нстр.ГруппаРаскрытия = Стр.ГруппаРаскрытия;
			Нстр.Код 			 = Стр.Код;
            Нстр.ВидОтчета       = ВидОтчета;

			ДополнительныеПараметры.СтрокаРодитель.ЭтоЭлементГруппа = Истина;
			
			Если НЕ  ДополнительныеПараметры.СтрокаРодитель.Наименование = Нстр("ru = 'Выбранные строки'") Тогда
				ДополнительныеПараметры.СтрокаРодитель.ЭтоЭлементГруппа = Истина;
			КонецЕсли;
			
			ДобавитьНовыеСтрокиРекурсивно(Нстр,Стр);
			
		КонецЦикла;
		
		Элементы.ДеревоВыбранныхСтрок.Развернуть(0,Истина);

	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда	
		
		Для Каждого Стр Из ДополнительныеПараметры.МассивПереносимыхСтрок Цикл   	
			
			Если Стр.Наименование = Нстр("ru = 'Доступные строки'") Тогда
                 Возврат;
			КонецЕсли;	

			Нстр = ДополнительныеПараметры.СтрокаРодитель.ПолучитьЭлементы().Добавить();
			Нстр.Наименование = Строка(Стр.Строка);
			Нстр.СтрокаОтчета = Стр.Строка;
			Нстр.ПорядковыйНомер = ДополнительныеПараметры.СтрокаРодитель.ПолучитьЭлементы().Количество()-1;
			Нстр.ГруппаРаскрытия = Стр.ГруппаРаскрытия;
			Нстр.Код 			 = Стр.Код;
            Нстр.ВидОтчета       = ВидОтчета;
			
			Если НЕ  ДополнительныеПараметры.СтрокаРодитель.Наименование = Нстр("ru = 'Выбранные строки'") Тогда
				ДополнительныеПараметры.СтрокаРодитель.ЭтоЭлементГруппа = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Элементы.ДеревоВыбранныхСтрок.Развернуть(0,Истина);
	
	КонецЕсли;	

	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовыеСтрокиРекурсивно(ЭлементыДерева,индСтроки)
	
	Для Каждого Эл Из индСтроки.ПолучитьЭлементы() Цикл
		
		Нстр = ЭлементыДерева.ПолучитьЭлементы().Добавить();
		Нстр.Наименование 		= Строка(Эл.Строка);
		Нстр.СтрокаОтчета 		= Эл.Строка;
		Нстр.ПорядковыйНомер 	= ЭлементыДерева.ПолучитьЭлементы().Количество()-1;
		Нстр.ГруппаРаскрытия 	= Эл.ГруппаРаскрытия;
		Нстр.Код 			 	= Эл.Код;
		Нстр.ВидОтчета 			= ВидОтчета;
		ЭлементыДерева.ЭтоЭлементГруппа = Истина;
		ДобавитьНовыеСтрокиРекурсивно(Нстр,Эл);
		
	КонецЦикла; 
	
КонецПроцедуры
	
&НаСервере
Процедура ПрименитьИзмененияСервер()
				
	ДеревоВыбранныхСтрок_ = РеквизитФормыВЗначение("ДеревоВыбранныхСтрок");
		
	НастройкиСоставаСтрокСводнойТаблицы.Очистить();
	
	НомерПоПорядку = 1;
	
	СтрокиДерева = ДеревоВыбранныхСтрок_.Строки.НайтиСтроки(Новый Структура("Изменена",Ложь),Истина);
	
	Для Каждого Стр Из СтрокиДерева Цикл

		Если Стр.Наименование = Нстр("ru = 'Выбранные строки'") Тогда
			  Продолжить;
		КонецЕсли;	
		
		нСтрокаСостава 					= НастройкиСоставаСтрокСводнойТаблицы.Добавить();
		нСтрокаСостава.СтрокаОтчета 	= Стр.СтрокаОтчета;
		нСтрокаСостава.СтрокаРодитель   = Стр.Родитель.СтрокаОтчета;
		нСтрокаСостава.НомерПоПорядку   = НомерПоПорядку;
		нСтрокаСостава.ЭтоЭлементГруппа = Стр.ЭтоЭлементГруппа;          
		нСтрокаСостава.УровеньСтроки    = Стр.Уровень();
		
		НомерПоПорядку = НомерПоПорядку+1;
		
	КонецЦикла;	
	
	тНастройкиСоставаСтрокСводнойТаблицы = НастройкиСоставаСтрокСводнойТаблицы.Выгрузить();
	
	НастройкиСоставаСтрокСводнойТаблицыАдрес = ПоместитьВоВременноеХранилище(тНастройкиСоставаСтрокСводнойТаблицы,Новый УникальныйИдентификатор);
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьДеревоВыбранныхСтрок()
				
	тНастройкиСоставаСтрокСводнойТаблицы = НастройкиСоставаСтрокСводнойТаблицы.Выгрузить();
	
	ДеревоНастройкиСервер=РеквизитФормыВЗначение("ДеревоВыбранныхСтрок");

	ДеревоНастройкиСервер.Строки.Очистить();
	
	ДеревоНастройкиСервер_Корень = ДеревоНастройкиСервер.Строки.Добавить();
	ДеревоНастройкиСервер_Корень.Наименование = Нстр("ru = 'Выбранные строки'");
	
	Если ЗначениеЗаполнено(НастройкиСоставаСтрокСводнойТаблицыАдрес) Тогда
		 тНастройкиСоставаСтрокСводнойТаблицы = ПолучитьИзВременногоХранилища(НастройкиСоставаСтрокСводнойТаблицыАдрес);
	КонецЕсли;	

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	тНастройкиСоставаСтрокСводнойТаблицы.СтрокаОтчета КАК СтрокаОтчета,
	               |	тНастройкиСоставаСтрокСводнойТаблицы.СтрокаРодитель КАК СтрокаРодитель,
	               |	тНастройкиСоставаСтрокСводнойТаблицы.ПризнакИспользования КАК ПризнакИспользования,
	               |	тНастройкиСоставаСтрокСводнойТаблицы.ЭтоЭлементГруппа КАК ЭтоЭлементГруппа,
	               |	тНастройкиСоставаСтрокСводнойТаблицы.НомерПоПорядку КАК НомерПоПорядку
	               |ПОМЕСТИТЬ втНастройкиСоставаСтрокСводнойТаблицы
	               |ИЗ
	               |	&тНастройкиСоставаСтрокСводнойТаблицы КАК тНастройкиСоставаСтрокСводнойТаблицы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втНастройкиСоставаСтрокСводнойТаблицы.СтрокаОтчета КАК СтрокаОтчета,
	               |	втНастройкиСоставаСтрокСводнойТаблицы.СтрокаРодитель КАК СтрокаРодитель,
	               |	втНастройкиСоставаСтрокСводнойТаблицы.ПризнакИспользования КАК ПризнакИспользования,
	               |	втНастройкиСоставаСтрокСводнойТаблицы.НомерПоПорядку КАК НомерПоПорядку,
	               |	СтрокиОтчетов.Владелец КАК ВидОтчета,
	               |	СтрокиОтчетов.ГруппаРаскрытия КАК ГруппаРаскрытия,
	               |	СтрокиОтчетов.Код КАК Код,
	               |	СтрокиОтчетов.Наименование КАК Наименование,
	               |	втНастройкиСоставаСтрокСводнойТаблицы.ЭтоЭлементГруппа КАК ЭтоЭлементГруппа
	               |ИЗ
	               |	втНастройкиСоставаСтрокСводнойТаблицы КАК втНастройкиСоставаСтрокСводнойТаблицы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	               |		ПО втНастройкиСоставаСтрокСводнойТаблицы.СтрокаОтчета = СтрокиОтчетов.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерПоПорядку";
	
	Запрос.УстановитьПараметр("тНастройкиСоставаСтрокСводнойТаблицы",тНастройкиСоставаСтрокСводнойТаблицы);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		 Если Не ЗначениеЗаполнено(Выборка.СтрокаРодитель) Тогда	 
			  нСтрока = ДеревоНастройкиСервер_Корень.Строки.Добавить();
			  ЗаполнитьЗначенияСвойств(нСтрока,Выборка);	  
		 Иначе	  	 
			 нСтрока  =  ДеревоНастройкиСервер_Корень.Строки.НайтиСтроки(Новый Структура("СтрокаОтчета",Выборка.СтрокаРодитель),Истина);
			 Если нСтрока.Количество() = 1 Тогда
				 нСтрока = нСтрока[0].Строки.Добавить();
				 ЗаполнитьЗначенияСвойств(нСтрока,Выборка);
			 КонецЕсли;	 	 
		 КонецЕсли;
	
	КонецЦикла;
		
	ЗначениеВРеквизитФормы(ДеревоНастройкиСервер,"ДеревоВыбранныхСтрок");	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПеренестиСПодчиненными(индСтроки,ЭлементыДерева)
	
	Для каждого Эл Из индСтроки.ПолучитьЭлементы() Цикл
		
		Нстр = ЭлементыДерева.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(Нстр,Эл);
		Нстр.ПорядковыйНомер = Эл.ПорядковыйНомер;
		
		ДобавитьНовыеСтрокиРекурсивно(Нстр,Эл);
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиДоступныеСПодчиненными(индСтроки,ЭлементыДерева)
	
	Для каждого Эл Из индСтроки.ПолучитьЭлементы() Цикл
		
		Нстр = ЭлементыДерева.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(Нстр,Эл);
		Нстр.ПорядковыйНомер = Эл.ПорядковыйНомер;
		
		ДобавитьНовыеСтрокиРекурсивно(Нстр,Эл);
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОсновнойВидОтчета();
	
	Если ЗначениеЗаполнено(НастройкиСоставаСтрокСводнойТаблицыАдрес) Тогда
		 тНастройкиСоставаСтрокСводнойТаблицы = ПолучитьИзВременногоХранилища(НастройкиСоставаСтрокСводнойТаблицыАдрес);
	Иначе	 	
		Возврат;
	КонецЕсли;	

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиСоставаСтрокСводнойТаблицы.СтрокаОтчета КАК СтрокаОтчета
	|ПОМЕСТИТЬ втНастройкиСоставаСтрокСводнойТаблицы
	|ИЗ
	|	&НастройкиСоставаСтрокСводнойТаблицы КАК НастройкиСоставаСтрокСводнойТаблицы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ (втНастройкиСоставаСтрокСводнойТаблицы.СтрокаОтчета КАК Справочник.СтрокиОтчетов).Владелец КАК ВидОтчета
	|ИЗ
	|	втНастройкиСоставаСтрокСводнойТаблицы КАК втНастройкиСоставаСтрокСводнойТаблицы";
	
	Запрос.УстановитьПараметр("НастройкиСоставаСтрокСводнойТаблицы",тНастройкиСоставаСтрокСводнойТаблицы);
	
	ВидыОтчетовМассив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидОтчета");
	
	Если ВидыОтчетовМассив.Количество()>0 Тогда
		ВидОтчета = ВидыОтчетовМассив[0];
	КонецЕсли;
	
КонецПроцедуры

