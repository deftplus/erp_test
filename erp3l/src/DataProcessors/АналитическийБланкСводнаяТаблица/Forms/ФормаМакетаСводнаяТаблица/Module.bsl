
&НаКлиенте
Перем ВидСравненияКэш;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	//Заполняем настройки вывода по-умолчанию
	СтруктураТаблицДляЗаполнения = Новый Структура;
	СтруктураТаблицДляЗаполнения.Вставить("НастройкиРасположенияПолейСводнойТаблицы",НастройкиРасположенияПолейСводнойТаблицы.Выгрузить());
	СтруктураТаблицДляЗаполнения.Вставить("НастройкиПериодовСводнойТаблицы",НастройкиПериодовСводнойТаблицы.Выгрузить());
    СтруктураТаблицДляЗаполнения.Вставить("НастройкиВариантаСводнойТаблицы",НастройкиВариантаСводнойТаблицы.Выгрузить());

	Обработки.АналитическийБланкСводнаяТаблица.ЗаполнитьЗначенияСводнойТаблицыПоУмолчанию(СтруктураТаблицДляЗаполнения);
	
	НастройкиРасположенияПолейСводнойТаблицы.Загрузить(СтруктураТаблицДляЗаполнения.НастройкиРасположенияПолейСводнойТаблицы);
	НастройкиПериодовСводнойТаблицы.Загрузить(СтруктураТаблицДляЗаполнения.НастройкиПериодовСводнойТаблицы);
    НастройкиВариантаСводнойТаблицы.Загрузить(СтруктураТаблицДляЗаполнения.НастройкиВариантаСводнойТаблицы);
	
	ПараметрыКонтекстногоОбновленияЗависимыхЯчеек = Перечисления.ПараметрыКонтекстногоОбновленияЗависимыхЯчеек.АвтоматическиВсе;
	
	//Получаем параметры  
	РежимДоступаКФункциямСводнойТаблицы = Параметры.РежимыДоступаКФункциямСводнойТаблицы;
	
	Если РежимДоступаКФункциямСводнойТаблицы = Перечисления.РежимыДоступаКФункциямСводнойТаблицы.РазработкаМакета Тогда
		
		Если ПолныеПраваУХ.ПроверятьПраваПоБланкам(ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь")) Тогда
			 СоздатьРеквизитыФильтры();
			 ЭтаФорма.Доступность = Ложь;
			 УстановитьСостояниеНеИспользовать(НСтр("ru = 'У пользователя недостаточно прав для работы в режиме разработки бланка.'"));
			
		ИначеЕсли Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда  // открытие записанного бланка
			Бланк  = Параметры.Ключ;
			НаименованиеНовогоБланка  			= Бланк.Наименование;
			ВидОтчета                           = Бланк.Владелец;
			
			ПрочитатьВариантТаблицыПоБланку();
			СоздатьРеквизитыФильтры();
			СоздатьПоляФильтров();		 
			ПриИнициализацииСводнойТаблицы();
			
		ИначеЕсли 	Параметры.Свойство("НаименованиеБланка") Тогда   // Создание нового бланка
			
			НаименованиеНовогоБланка            = Параметры.НаименованиеБланка;
			ВидОтчета                           = Параметры.Отбор.ВидОтчета;
			CгенерироватьМакетШаблона();	 
			СоздатьРеквизитыФильтры();
			СоздатьПоляФильтров();		 
			ПриИнициализацииСводнойТаблицы();
			
		ИначеЕсли Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда //Создание нового копированием 	 
			
			Бланк  								 = Параметры.ЗначениеКопирования;
			ВидОтчета                           = Бланк.Владелец;
			НаименованиеНовогоБланка            = Справочники.ВидыОтчетов.СгенерироватьНаименованиеНовогоБланкаДляВидаОтчета(ВидОтчета);;
			ЭтоКопияБланка                      = Истина;
			
			ПрочитатьВариантТаблицыПоБланку();	 
			СоздатьРеквизитыФильтры();
			СоздатьПоляФильтров();		 
			ПриИнициализацииСводнойТаблицы();
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;	
		
	Иначе 
		
		ТекущийДелитель = 1;	
		СоздатьРеквизитыФильтры();
		СоздатьПоляФильтров();		 
		ПриИнициализацииСводнойТаблицы();
		
		Если ЗначениеЗаполнено(Параметры.Бланк) Тогда
			Бланк    	= Параметры.Бланк;
			ВидОтчета 	= Параметры.Бланк.Владелец;	
			ПрочитатьВариантТаблицыПоБланку();
		КонецЕсли;	
		
		//Прочитаем последние ключевые настройки  текущего пользователя и применим их, при наличиии
		ПрочитатьПоследниеНастройкиДляСводнойТаблицы();	
		//	 
		Если ЗначениеЗаполнено(Параметры.Организация) Тогда
			тИзмерениеОрганизация = НастройкиРасположенияПолейСводнойТаблицы.НайтиСтроки(Новый Структура("КодПоля","Организация"));
			Если тИзмерениеОрганизация.Количество() = 1 Тогда
				ЭтаФорма["Организация"] = Параметры.Организация;
			КонецЕсли;	
		КонецЕсли;	
		Если ЗначениеЗаполнено(Параметры.Проект) Тогда
			тИзмерениеПроект = НастройкиРасположенияПолейСводнойТаблицы.НайтиСтроки(Новый Структура("КодПоля","Проект"));
			Если тИзмерениеПроект.Количество() = 1 Тогда
				ЭтаФорма["Проект"] = Параметры.Проект;
			КонецЕсли;	
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Параметры.Сценарий) Тогда
			 Сценарий = Параметры.Сценарий;
		КонецЕсли;
		Если ЗначениеЗаполнено(Параметры.ПериодС) Тогда
			ПериодС = Параметры.ПериодС;
		КонецЕсли;
		Если ЗначениеЗаполнено(Параметры.ПериодПо) Тогда
			 ПериоПо = Параметры.ПериодПо;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.Бланк)
			И ЗначениеЗаполнено(ВариантСводнойТаблицы) Тогда
			НарисоватьТаблицуСервер();
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Бланк) И Не ЗначениеЗаполнено(ВариантСводнойТаблицы) Тогда
		 Элементы.ВариантСводнойТаблицы.Доступность = Ложь;
	 КонецЕсли;
	 
	 ЧислоДопАналитик 	= ПараметрыСеанса.ЧислоДопАналитик;
	 ТекущийМакет 		= "ПолеТабличногоДокументаМакет";
	 ТекущийОбъектАБ    = "ОбъектАналитическогоБланка";
	 
	 АдресЛогаИзмененныхПоказателейREDO 	 = ПоместитьВоВременноеХранилище(УправлениеРасчетомПоказателей.ПолучитьОписаниеЛогаИзмененныхПоказателей(),ЭтаФорма.УникальныйИдентификатор);
	 
	 РасчетИЗаписьПоказателей.УникальныйИдентификаторСеанса = ЭтаФорма.УникальныйИдентификатор;
	 
	 РасчетПоСвязаннымВидамОтчетов = Константы.АвтоматическийПересчетЗависимыхПоказателей.Получить();
	 	 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		ОбновитьСтрокуКлючевыхПараметров();
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	
	Если РежимРаботы = ПредопределенноеЗначение("Перечисление.РежимыРаботыСводнойТаблицы.ОбратноеРаспределение") Тогда
		Параметры_ = Новый Структура("Бланк", Бланк);
		Оповещение = Новый ОписаниеОповещения("НастройкаРаспределенияЗавершение", ЭтаФорма);
		ОткрытьФорму("Обработка.АналитическийБланкСводнаяТаблица.Форма.ФормаВыбораСпособаРаспределения", 
		Параметры_,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 		
	Иначе	
		Если ЗаписатьИзмененныеПоказатели(Ложь) Тогда
			УстановитьРежимРедактированияДанныхКлиент(Ложь);
		КонецЕсли;
		ПоказатьПротокол();
	КонецЕсли;
		 
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОтменитьИзменения",ЭтаФорма);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'При отмене все несохраненные данные будут потеряны, отменить?'"), РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИзменения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда	
		Если РежимРаботы = ПредопределенноеЗначение("Перечисление.РежимыРаботыСводнойТаблицы.ОбратноеРаспределение") Тогда	
			НарисоватьТаблицуСервер();
			УстановитьРежимРедактированияДанныхКлиент(Ложь);	
		Иначе			
			НарисоватьТаблицуСервер();
			УстановитьРежимРедактированияДанныхКлиент(Ложь);	
		КонецЕсли;		
	КонецЕсли;	
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ПолеТабличногоДокументаМакет;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРаспределенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если  Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	ПрименитьИзмененияОбратноеРаспределение(Результат);	
	ЭтаФорма.ТекущийЭлемент = Элементы.ПолеТабличногоДокументаМакет;
	УстановитьРежимРедактированияДанныхКлиент(Ложь);

КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
		
	Если Не РежимДоступаКФункциямСводнойТаблицы = Перечисления.РежимыДоступаКФункциямСводнойТаблицы.РазработкаМакета Тогда
		ЗаписатьПоследниеНастройкиДляСводнойТаблицы();
		Обработки.АналитическийБланк.ОчиститьЛогИзмененныхПоказателей(ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;			
		
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПоследниеНастройкиДляСводнойТаблицы()
		
	УстановитьПривилегированныйРежим (Истина);
	
	ЗначениеСохраняемойНастройки = Новый Структура;			
	ЗначениеСохраняемойНастройки.Вставить("ВариантСводнойТаблицы",ВариантСводнойТаблицы);	
	ЗначениеСохраняемойНастройки.Вставить("Бланк",Бланк);
	ЗначениеСохраняемойНастройки.Вставить("ВалютаОтображения",ВалютаОтображения);	
	ЗначениеСохраняемойНастройки.Вставить("ПериодС",ПериодС);	
	ЗначениеСохраняемойНастройки.Вставить("ПериодПо",ПериодПо);	
	ЗначениеСохраняемойНастройки.Вставить("ПараметрыКонтекстногоОбновленияЗависимыхЯчеек",ПараметрыКонтекстногоОбновленияЗависимыхЯчеек);
	
	БыстрыеОтборы =  НастройкиРасположенияПолейСводнойТаблицы.НайтиСтроки(Новый Структура("ОсьТаблицы",Перечисления.ОсиСводнойТаблицы.Отборы));
	Для Каждого СтрИзмерение Из БыстрыеОтборы Цикл
		ЗначениеСохраняемойНастройки.Вставить(СтрИзмерение.КодПоля,ЭтаФорма[СтрИзмерение.КодПоля]);	
	КонецЦикла;
	
	МенЗаписи 							= РегистрыСведений.НастройкиПользователейСводныхТаблиц.СоздатьМенеджерЗаписи();
	МенЗаписи.Пользователь			 	= ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	МенЗаписи.ВариантТаблицы 			= Справочники.ВариантыСводныхТаблиц.ПустаяСсылка();
	МенЗаписи.КлючНастройки 			= "КлючевыеПараметры";
	МенЗаписи.ЗначениеНастройки 		= Новый ХранилищеЗначения(ЗначениеСохраняемойНастройки);
	МенЗаписи.Записать();
	
	УстановитьПривилегированныйРежим (Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПоследниеНастройкиДляСводнойТаблицы()
		
	УстановитьПривилегированныйРежим (Истина);
	
	тНаборЗаписейНастройки = РегистрыСведений.НастройкиПользователейСводныхТаблиц.СоздатьНаборЗаписей();
	тНаборЗаписейНастройки.Отбор.Пользователь.Установить(ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
	тНаборЗаписейНастройки.Отбор.ВариантТаблицы.Установить(Справочники.ВариантыСводныхТаблиц.ПустаяСсылка());
	тНаборЗаписейНастройки.Отбор.КлючНастройки.Установить("КлючевыеПараметры");
	тНаборЗаписейНастройки.Прочитать();

	Если тНаборЗаписейНастройки.Количество() = 0 Тогда  //Никаких сохраненных настроек нет - работаем в варианте по умолчанию
		 Возврат;
	КонецЕсли;	
	
	ЗначениеСохраняемойНастройки = тНаборЗаписейНастройки[0].ЗначениеНастройки.Получить();
	
	Если НЕ ЗначениеЗаполнено(ВариантСводнойТаблицы) Тогда
		ВариантСводнойТаблицы = ЗначениеСохраняемойНастройки.ВариантСводнойТаблицы;
		ВариантСводнойТаблицыПриИзмененииСервер()
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Бланк) Тогда
		Если  ЗначениеСохраняемойНастройки.Свойство("Бланк") Тогда
			Бланк 		= ЗначениеСохраняемойНастройки.Бланк;
			ВидОтчета   = Бланк.Владелец;
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Бланк", Бланк);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			ЭтаФорма.Элементы.ВариантСводнойТаблицы.ПараметрыВыбора		 			= НовыеПараметры;	
			ЭтаФорма.Элементы.ВариантСводнойТаблицы.АвтоОтметкаНезаполненного	 	= Истина;
				
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПериодС) Тогда
		ПериодС = ЗначениеСохраняемойНастройки.ПериодС;
	КонецЕсли;	

	Если НЕ ЗначениеЗаполнено(ПериодПо) Тогда
		ПериодПо = ЗначениеСохраняемойНастройки.ПериодПо;
	КонецЕсли;	

	Если НЕ ЗначениеЗаполнено(ВалютаОтображения) Тогда
		ВалютаОтображения = ЗначениеСохраняемойНастройки.ВалютаОтображения;
	КонецЕсли;	
		
	Если ЗначениеСохраняемойНастройки.Свойство("ПараметрыКонтекстногоОбновленияЗависимыхЯчеек") 
		И ЗначениеЗаполнено(ЗначениеСохраняемойНастройки.ПараметрыКонтекстногоОбновленияЗависимыхЯчеек) Тогда
		ПараметрыКонтекстногоОбновленияЗависимыхЯчеек = ЗначениеСохраняемойНастройки.ПараметрыКонтекстногоОбновленияЗависимыхЯчеек;
	КонецЕсли;	
	
	БыстрыеОтборы =  НастройкиРасположенияПолейСводнойТаблицы.НайтиСтроки(Новый Структура("ОсьТаблицы",Перечисления.ОсиСводнойТаблицы.Отборы));
	Для Каждого СтрИзмерение Из БыстрыеОтборы Цикл	
		Если Не ЗначениеЗаполнено(ЭтаФорма[СтрИзмерение.КодПоля]) И ЗначениеСохраняемойНастройки.Свойство(СтрИзмерение.КодПоля) Тогда
			ЭтаФорма[СтрИзмерение.КодПоля] = ЗначениеСохраняемойНастройки[СтрИзмерение.КодПоля];	
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим (Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия="ИзменилисьПоказатели" Тогда	
		РедактированиеРаскрытияЗавершение(Параметр,Параметр);
	ИначеЕсли ИмяСобытия="СвернутьВерсии" 
		И ТипЗнч(Параметр)=Тип("Структура") Тогда
		
		СвернутьДоВерсии(Параметр.ВерсияДляСвертки, Параметр.ЭкземплярОтчета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРаскрытияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	Если Результат.Свойство("УидФормыВладельца") И Результат.УидФормыВладельца<>ЭтаФорма.УникальныйИдентификатор Тогда
		Возврат;
	КонецЕсли;	
	
	тОбластьИмя = ЭтаФорма[ЭтаФорма.ТекущийМакет].ТекущаяОбласть.Имя;
	
	РедактированиеРаскрытиеЗавершениеСервер(Результат,тОбластьИмя);
	УстановитьРежимРедактированияДанныхКлиент(Истина);
	Модифицированность = Истина;
	ПоказатьПротокол();
	
КонецПроцедуры

&НаСервере
Процедура РедактированиеРаскрытиеЗавершениеСервер(Результат,тОбластьИмя)
	
	Если Не ЗначениеЗаполнено(Результат.АдресТаблицыИзмененныхПоказателей) Тогда
		 Возврат;
	КонецЕсли;	
	
	ТекущаяОбласть = ЭтаФорма[ЭтаФорма.ТекущийМакет].Область(тОбластьИмя);
	
	// Выполним расчет зависимых показателей
	ОбработкаОбъект = РеквизитФормыВЗначение("РасчетИЗаписьПоказателей");
	ОбработкаОбъект.АдресТаблицыИзмененныхПоказателей = Результат.АдресТаблицыИзмененныхПоказателей;
	ОбработкаОбъект.РассчитатьПоЗначениямИзмененныхПоказателей(НомерТранзакции, РасчетПоСвязаннымВидамОтчетов); 
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "РасчетИЗаписьПоказателей");	
		
	ПредставлениеТранзакции = Перечисления.ТранзакцииИзмененияПоказателей.ИзменениеПоказателя;
	Обработки.АналитическийБланк.ДобавитьЗаписьвЖурналДействий(ЭтаФорма,ПредставлениеТранзакции,ТекущаяОбласть);

	//Сбросим кэш актуальности бланков
	Для Каждого СтрКэш Из КэшБланков Цикл	
		СтрКэш.Выведен = Ложь;	
	КонецЦикла;	
	
	НарисоватьТаблицуСервер();
	
КонецПроцедуры	


&НаСервере
Процедура ПрименитьИзмененияОбратноеРаспределение(Результат)
	
	логИзмененныхПоказателей   		= ПолучитьИзВременногоХранилища(ОбъектАналитическогоБланка.логИзмененныхДанныхАдрес);
	КэшАналитикПоказателей     		= ПолучитьИзВременногоХранилища(ОбъектАналитическогоБланка.КэшАналитикПоказателейАдрес);
	тДанные                    		= ПолучитьИзВременногоХранилища(ОбъектАналитическогоБланка.мПоказателиРаскрытияАдрес);
	тСвойстваПоказателей       		= ПолучитьИзВременногоХранилища(ОбъектАналитическогоБланка.ТзСвойстваПоказателейАдрес);
	
	ОбластиКолонкиПоказателя   = ПолучитьИзВременногоХранилища(ОбъектАналитическогоБланка.ТзПоказателейОбластейКолонкиАдрес);
	ОбластиСтрокиПоказателя    = ПолучитьИзВременногоХранилища(ОбъектАналитическогоБланка.ТзПоказателейОбластейСтрокиАдрес);

	СтруктураРасшифровкаОбластейХ		    = ПолучитьИзВременногоХранилища(ОбъектАналитическогоБланка.СтруктураРасшифровкаОбластейХАдрес);
	СтруктураРасшифровкаОбластейY		    = ПолучитьИзВременногоХранилища(ОбъектАналитическогоБланка.СтруктураРасшифровкаОбластейYАдрес);
	
	
	ТекущаяПериодичность = ПериодС.Периодичность;
	
	//Заполняем срез для распределения для каждого изменного агрегата.
	Для Каждого стр Из логИзмененныхПоказателей Цикл
		
		тАналитикиКРаспределению   = Новый ТаблицаЗначений;
		тАналитикиКРаспределению.Колонки.Добавить("КодыАналитик");
		тАналитикиКРаспределению.Колонки.Добавить("СоставАналитик");
		
		
		ИзменныеДанныеДляРаспределения  = логИзмененныхПоказателей.СкопироватьКолонки();
		
		//Вычисляем отсутствующие аналитики...
		нАналитикаКРаспределению = тАналитикиКРаспределению.Добавить();
		нАналитикаКРаспределению.КодыАналитик = "ПериодОтчета";
		нАналитикаКРаспределению.СоставАналитик = ПолучитьПодпериоды(стр.ПериодОтчета,ТекущаяПериодичность);
				
		СтруктураНезаполненныхАналитик      = Новый Структура;

		//Добавляем оранизации для анализа
		Если Не ЗначениеЗаполнено(стр.Организация) Тогда		
			СтруктураНезаполненныхАналитик.Вставить("Организация","Организация");	
		КонецЕсли;	
		
		//Добавляем инвест. проекты,если есть
		тПоказатель = тСвойстваПоказателей.Найти(стр.ПоказательОтчета,"Ссылка");
		Если тПоказатель.РазделениеПоПроектам И Не ЗначениеЗаполнено(стр.Проект) Тогда
			СтруктураНезаполненныхАналитик.Вставить("Проект","Проект");	
		КонецЕсли;	

		//Заполняем остальные аналитики
		тКэшАналитикПоказателей 			= КэшАналитикПоказателей.Найти(стр.ПоказательОтчета,"Показатель");
		
		Для ИндАналитики = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл	
			Если ЗначениеЗАполнено(тКэшАналитикПоказателей["ВидАналитики"+ИндАналитики+"Код"])
				И стр["Аналитика"+ИндАналитики] = Неопределено Тогда
				СтруктураНезаполненныхАналитик.Вставить(тКэшАналитикПоказателей["ВидАналитики"+ИндАналитики+"Код"],"Аналитика"+ИндАналитики);
			КонецЕсли;		
		КонецЦикла;	
		
		тОбластьРаскрытияТекущегоПоказателяСтрока 	=	ОбластиСтрокиПоказателя.Найти(стр.ПоказательОтчета,"Показатель");
		тОбластьРаскрытияТекущегоПоказателяКолонка 	=   ОбластиКолонкиПоказателя.Найти(стр.ПоказательОтчета,"Показатель");
		СтруктраРасшифровкиОбластиСтрок             =   СтруктураРасшифровкаОбластейY[тОбластьРаскрытияТекущегоПоказателяСтрока.ИмяОбласти].Скопировать();
		СтруктраРасшифровкиОбластиКолонок           =   СтруктураРасшифровкаОбластейХ[тОбластьРаскрытияТекущегоПоказателяКолонка.ИмяОбласти].Скопировать();
        СтрокаСверктиПоАналитикамСтроки          	=   "";
		СтрокаСверктиПоАналитикамКолонки         	=   "";

		Для Каждого тНезаполненнаяАналитика Из СтруктураНезаполненныхАналитик Цикл	
			Если НЕ СтруктраРасшифровкиОбластиСтрок.Колонки.Найти(тНезаполненнаяАналитика.Ключ) = Неопределено Тогда
				 СтрокаСверктиПоАналитикамСтроки = СтрокаСверктиПоАналитикамСтроки+тНезаполненнаяАналитика.Ключ+",";
			КонецЕсли;	
			Если НЕ СтруктраРасшифровкиОбластиКолонок.Колонки.Найти(тНезаполненнаяАналитика.Ключ) = Неопределено Тогда
				 СтрокаСверктиПоАналитикамКолонки = СтрокаСверктиПоАналитикамКолонки+тНезаполненнаяАналитика.Ключ+",";
			КонецЕсли;		
		КонецЦикла;	
		
		СтрокаСверктиПоАналитикамСтроки 		= Лев(СтрокаСверктиПоАналитикамСтроки,СтрДлина(СтрокаСверктиПоАналитикамСтроки)-1);
		СтрокаСверктиПоАналитикамКолонки 	= Лев(СтрокаСверктиПоАналитикамКолонки,СтрДлина(СтрокаСверктиПоАналитикамКолонки)-1);
		
		Если ЗначениеЗаполнено(СтрокаСверктиПоАналитикамСтроки) Тогда
			нАналитикаКРаспределению = тАналитикиКРаспределению.Добавить();
			нАналитикаКРаспределению.КодыАналитик ="АналитикиСтроки";
			нАналитикаКРаспределению.СоставАналитик = СтруктраРасшифровкиОбластиСтрок;
			СтруктраРасшифровкиОбластиСтрок.Свернуть(СтрокаСверктиПоАналитикамСтроки);
			//Удалим строки - агрегаты.
			МассивУдаляемыхСтрок = Новый Массив;
			Для Каждого СтрПроверка Из СтруктраРасшифровкиОбластиСтрок Цикл
				Для Каждого СтрКолПроверка Из СтруктраРасшифровкиОбластиСтрок.Колонки Цикл
					Если СтрПроверка[СтрКолПроверка.Имя] = Неопределено Тогда
						 МассивУдаляемыхСтрок.Добавить(СтрПроверка);
						 Прервать;
					 КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;	
			Для Каждого УдЭлемент Из МассивУдаляемыхСтрок Цикл
				СтруктраРасшифровкиОбластиСтрок.Удалить(УдЭлемент);
			КонецЦикла;	
			

		Иначе	
			нАналитикаКРаспределению = тАналитикиКРаспределению.Добавить();
			нАналитикаКРаспределению.КодыАналитик = "АналитикиСтроки";
			тФиктивнаяТаблица = Новый ТаблицаЗначений;
			тФиктивнаяТаблица.Колонки.Добавить("Значение");
			тФиктивнаяТаблица.Добавить();
			тФиктивнаяТаблица[0].Значение = 0;
			нАналитикаКРаспределению.СоставАналитик = тФиктивнаяТаблица;		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаСверктиПоАналитикамКолонки) Тогда
			нАналитикаКРаспределению = тАналитикиКРаспределению.Добавить();
			нАналитикаКРаспределению.КодыАналитик 	=	"АналитикиКолонки";
			нАналитикаКРаспределению.СоставАналитик = СтруктраРасшифровкиОбластиКолонок;
			СтруктраРасшифровкиОбластиКолонок.Свернуть(СтрокаСверктиПоАналитикамКолонки);
			//Удалим строки - агрегаты.
			МассивУдаляемыхСтрок = Новый Массив;
			Для Каждого СтрПроверка Из СтруктраРасшифровкиОбластиКолонок Цикл
				Для Каждого СтрКолПроверка Из СтруктраРасшифровкиОбластиКолонок.Колонки Цикл
					Если СтрПроверка[СтрКолПроверка.Имя] = Неопределено Тогда
						 МассивУдаляемыхСтрок.Добавить(СтрПроверка);
						 Прервать;
					 КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;	
			Для Каждого УдЭлемент Из МассивУдаляемыхСтрок Цикл
				СтруктраРасшифровкиОбластиКолонок.Удалить(УдЭлемент);
			КонецЦикла;	
			
		Иначе	
			нАналитикаКРаспределению = тАналитикиКРаспределению.Добавить();
			нАналитикаКРаспределению.КодыАналитик = "АналитикиКолонки";
			тФиктивнаяТаблица = Новый ТаблицаЗначений;
			тФиктивнаяТаблица.Колонки.Добавить("Значение");
			тФиктивнаяТаблица.Добавить();
			тФиктивнаяТаблица[0].Значение = 0;
			нАналитикаКРаспределению.СоставАналитик = тФиктивнаяТаблица;	
		КонецЕсли;

		//Проверим - все ли аналитики присутствуют в структуре текущей таблицы
		
		ФлРаспределениеВозможно = Истина;
		СтрокаНезаполненныхОбязательныхСрезов = "";
		Для Каждого СтрНАналитика Из СтруктураНезаполненныхАналитик Цикл
			Если НастройкиРасположенияПолейСводнойТаблицы.НайтиСтроки(Новый Структура("КодПоля",СтрНАналитика.Ключ)).Количество()=0 Тогда
				ФлРаспределениеВозможно = Ложь;
				Если СтрНайти(СтрНАналитика.Значение,"Аналитика")>0 Тогда
					СтрокаНезаполненныхОбязательныхСрезов = СтрокаНезаполненныхОбязательныхСрезов+","+тКэшАналитикПоказателей[СтрЗаменить(СтрНАналитика.Значение,"Аналитика","ВидАналитики")];
				Иначе
					СтрокаНезаполненныхОбязательныхСрезов = СтрокаНезаполненныхОбязательныхСрезов+","+СтрНАналитика.Значение;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
		
		ТекстСообщенияРаспределитьНевозможно = Нстр("ru = 'В структуре таблицы не определены следующие обязательные  аналитики, необходимые для распределения: '");
		ТекстСообщенияРаспределитьНевозможно= ТекстСообщенияРаспределитьНевозможно+СтрокаНезаполненныхОбязательныхСрезов;
		ТекстСообщенияРаспределитьНевозможно= ТекстСообщенияРаспределитьНевозможно+Нстр("ru = '. Перенесите данные аналитики в строки, колонки или отборы. '");

		СтрокаШаблона = Нстр("ru = 'Распределение значений для показателя  %1 отменено'");
		ТекстСообщенияРаспределитьНевозможно = ТекстСообщенияРаспределитьНевозможно+СтрШаблон(СтрокаШаблона,Строка(Стр.ПоказательОтчета));


		Если Не ФлРаспределениеВозможно Тогда	
			ОбщегоНазначенияУх.СообщитьОбОшибке(ТекстСообщенияРаспределитьНевозможно);
			Продолжить;
		КонецЕсли;	
		
		СтруктураНезаполненныхАналитик.Вставить("Значение","Значение");
		
		Для Каждого СтрУровень1 Из тАналитикиКРаспределению[0].СоставАналитик Цикл        	//Уровень периодов
			Для Каждого СтрУровень2 Из тАналитикиКРаспределению[1].СоставАналитик Цикл    	//Уровень строк
				Для Каждого СтрУровень3 Из тАналитикиКРаспределению[2].СоставАналитик Цикл	//Уровень колонок	
						
					НстрокаРаспределения =ИзменныеДанныеДляРаспределения.Добавить();	
					ЗаполнитьЗначенияСвойств(НстрокаРаспределения,стр);
					
					//Первая таблица - всегда периоды, проверок не нужно
					Для Каждого СтрКол Из тАналитикиКРаспределению[0].СоставАналитик.Колонки Цикл
						НстрокаРаспределения[СтрКол.Имя] = СтрУровень1[СтрКол.Имя]; 
					КонецЦикла;			
					
					Для Каждого СтрКол Из тАналитикиКРаспределению[1].СоставАналитик.Колонки Цикл
						Если СтруктураНезаполненныхАналитик.Свойство(СтрКол.Имя)  Тогда
							НстрокаРаспределения[СтруктураНезаполненныхАналитик[СтрКол.Имя]] = СтрУровень2[СтрКол.Имя]; 
						КонецЕсли;
					КонецЦикла;		
					Для Каждого СтрКол Из тАналитикиКРаспределению[2].СоставАналитик.Колонки  Цикл
						Если СтруктураНезаполненныхАналитик.Свойство(СтрКол.Имя) Тогда
							НстрокаРаспределения[СтруктураНезаполненныхАналитик[СтрКол.Имя]] = СтрУровень3[СтрКол.Имя]; 
						КонецЕсли;
					КонецЦикла;		
					
					НстрокаРаспределения.Значение = 0;
					
				КонецЦикла;				
			КонецЦикла;			
		КонецЦикла;	
	
		//Заполяем обработку распределения
					
		РасчетПоказателейОбъект 								= Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
		РасчетПоказателейОбъект.ВидОтчета 						= тПоказатель.ВидОтчета;
		РасчетПоказателейОбъект.ВалютаОтображения 				= ВалютаОтображения;
		РасчетПоказателейОбъект.РассчитыватьЗависимые 			= Константы.АвтоматическийПересчетЗависимыхПоказателей.Получить();	
		РасчетПоказателейОбъект.МетодРаспределения  			= Результат.МетодРаспределения;
		РасчетПоказателейОбъект.УточнениеМетодаРаспределения 	= Результат.УточнениеМетодаРаспределения;
		РасчетПоказателейОбъект.ЗначениеДляРаспределения  		= стр.Значение;		
		РасчетПоказателейОбъект.ТаблицаИзмененныхПоказателей.Загрузить(ИзменныеДанныеДляРаспределения);
		СводнаяТаблицаУХ.ЗаполнитьВалютыПоРегламенту(РасчетПоказателейОбъект,ИзменныеДанныеДляРаспределения);
		РасчетПоказателейОбъект.ЗаписатьЗначенияТаблицыПоказателей();
		
	КонецЦикла;
	
	Если ЗначениеЗАполнено(ОбъектАналитическогоБланка.логИзмененныхДанныхАдрес) Тогда
		логИзмененныхДанных  = ПолучитьИзВременногоХранилища(ОбъектАналитическогоБланка.логИзмененныхДанныхАдрес);
		логИзмененныхДанных.Очистить();
	КонецЕсли;
		
	НарисоватьТаблицуСервер();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПодпериоды(ПериодОтчета,Периодичность)

	    Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Периоды.Ссылка КАК ПериодОтчета
		|ИЗ
		|	Справочник.Периоды КАК Периоды
		|ГДЕ
		|	Периоды.Периодичность = &Периодичность
		|	И Периоды.ДатаНачала >= &ДатаНачала
		|	И Периоды.ДатаОкончания <= &ДатаОкончания
		|	И Периоды.Произвольный = Ложь
		|	И Периоды.ПометкаУдаления = Ложь";
		
		Запрос.УстановитьПараметр("Периодичность",Периодичность);
		
		Если ЗначениеЗаполнено(ПериодОтчета) Тогда
			 Запрос.УстановитьПараметр("ДатаНачала",ПериодОтчета.ДатаНачала);
             Запрос.УстановитьПараметр("ДатаОкончания",ПериодОтчета.ДатаОкончания);
		Иначе	 
			 Запрос.УстановитьПараметр("ДатаНачала",ПериодС.ДатаНачала);
             Запрос.УстановитьПараметр("ДатаОкончания",ПериодПо.ДатаОкончания);
		КонецЕсли;	
		
		Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции	

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Записать(Неопределено);

	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	ЭтаФорма.Модифицированность = Ложь;

	Если ЗначениеЗАполнено(СтруктураНастроекАналитическогоБланкаАдрес)  Тогда
		СохранитьВариантПоБланку();
	Иначе	
		ПерезаписатьБланк();
	КонецЕсли;
	
	Оповестить("ОбновитьБланки");
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьВариантТаблицыПоБланку()
	
	ПолеТабличногоДокументаШаблон.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВариантыСводныхТаблиц.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВариантыСводныхТаблиц КАК ВариантыСводныхТаблиц
	|ГДЕ
	|	ВариантыСводныхТаблиц.Бланк = &Бланк
	|	И ВариантыСводныхТаблиц.ОсновнойВариант = Истина";
	
	Запрос.УстановитьПараметр("Бланк",Бланк);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВариантСводнойТаблицы  = Выборка.Ссылка;
		ВариантСводнойТаблицыПриИзмененииСервер();
			
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Бланк) И Не ЗначениеЗаполнено(ВариантСводнойТаблицы) Тогда //под бланк не создан основной вариант.
		
		ОНовыйВариант = Справочники.ВариантыСводныхТаблиц.СоздатьЭлемент();
		ОНовыйВариант.Бланк        = Бланк.Ссылка;
		ОНовыйВариант.Наименование = НаименованиеНовогоБланка+"( Основной)";
		ОНовыйВариант.ОсновнойВариант = Истина;
		ОНовыйВариант.Записать();
		ВариантСводнойТаблицы      = ОНовыйВариант.Ссылка;
		
	КонецЕсли;	
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Бланк", Бланк);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	ЭтаФорма.Элементы.ВариантСводнойТаблицы.ПараметрыВыбора		 			= НовыеПараметры;	
	ЭтаФорма.Элементы.ВариантСводнойТаблицы.АвтоОтметкаНезаполненного	 	= Истина;
	
	Если ЗначениеЗаполнено(ВариантСводнойТаблицы) И ПолеТабличногоДокументаШаблон.ВысотаТаблицы<5 Тогда   //Только заголовок
		CгенерироватьМакетШаблона();
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура СохранитьВариантПоБланку()
	
	Если ЗначениеЗаполнено(ВидОтчета) 
		И ЗначениеЗаполнено(НаименованиеНовогоБланка)
		И НЕ ЗначениеЗаполнено(Бланк) Тогда //Создаем новый бланк с 0
		
		//создаем бланк сводной таблицы
		ОбъектБланк 				= Справочники.БланкиОтчетов.СоздатьЭлемент();
		ОбъектБланк.Владелец  		= ВидОтчета;
		ОбъектБланк.РежимБланка    = 1;
		ОбъектБланк.Наименование   = НаименованиеНовогоБланка;
		ОбъектБланк.Записать();
		Бланк                      = ОбъектБланк.Ссылка;
		
		ОНовыйВариант = Справочники.ВариантыСводныхТаблиц.СоздатьЭлемент();
		ОНовыйВариант.Бланк        = ОбъектБланк.Ссылка;
        ОНовыйВариант.Наименование = НаименованиеНовогоБланка+"( Основной)";
		ОНовыйВариант.ОсновнойВариант = Истина;
		ОНовыйВариант.Записать();
		ВариантСводнойТаблицы      = ОНовыйВариант.Ссылка;
			
		ИмяТекущегоВарианта  = ОбъектБланк.Ссылка;

	ИначеЕсли ЭтоКопияБланка Тогда //Создаем новый бланк копированием
		
		//создаем бланк сводной таблицы
		ОбъектБланк 				= Справочники.БланкиОтчетов.СоздатьЭлемент();
		ОбъектБланк.Владелец  		= ВидОтчета;
		ОбъектБланк.РежимБланка    = 1;
		ОбъектБланк.Наименование   = НаименованиеНовогоБланка;
		ОбъектБланк.Записать();
		Бланк                      = ОбъектБланк.Ссылка;
		
		ОНовыйВариант = Справочники.ВариантыСводныхТаблиц.СоздатьЭлемент();
		ОНовыйВариант.Бланк        = ОбъектБланк.Ссылка;
        ОНовыйВариант.Наименование = НаименованиеНовогоБланка+"( Основной)";
		ОНовыйВариант.ОсновнойВариант = Истина;
		ОНовыйВариант.Записать();
		ВариантСводнойТаблицы      = ОНовыйВариант.Ссылка;
			
		ИмяТекущегоВарианта  = ОбъектБланк.Ссылка;
		ЭтоКопияБланка = Ложь;
		
	Иначе	                                           //Перезапишем бланк		
		ПерезаписатьБланк();
	
	КонецЕсли;
	
	СохранитьНастройкиТекущегоВарианта();
	
КонецПроцедуры

&НаСервере
Процедура ПерезаписатьБланк()

	Если ЗначениеЗаполнено(Бланк) Тогда
		ОбъектБланк 				= Бланк.ПолучитьОбъект();
		ОбъектБланк.Наименование   = НаименованиеНовогоБланка;
		ОбъектБланк.Записать();
		Если Не ЗначениеЗАполнено(ВариантСводнойТаблицы) Тогда
			
			ОНовыйВариант = Справочники.ВариантыСводныхТаблиц.СоздатьЭлемент();
			ОНовыйВариант.Бланк        = ОбъектБланк.Ссылка;
			ОНовыйВариант.Наименование = НаименованиеНовогоБланка+"( Основной)";
			ОНовыйВариант.ОсновнойВариант = Истина;
			ОНовыйВариант.Записать();
			ВариантСводнойТаблицы      = ОНовыйВариант.Ссылка;
				
		КонецЕсли;	
		
	Иначе	
		
		//создаем бланк сводной таблицы
		ОбъектБланк 				= Справочники.БланкиОтчетов.СоздатьЭлемент();
		ОбъектБланк.Владелец  		= ВидОтчета;
		ОбъектБланк.РежимБланка    = 1;
		ОбъектБланк.Наименование   = НаименованиеНовогоБланка;
		ОбъектБланк.Записать();
		Бланк                      = ОбъектБланк.Ссылка;
		
		ОНовыйВариант = Справочники.ВариантыСводныхТаблиц.СоздатьЭлемент();
		ОНовыйВариант.Бланк        = ОбъектБланк.Ссылка;
        ОНовыйВариант.Наименование = НаименованиеНовогоБланка+"( Основной)";
		ОНовыйВариант.ОсновнойВариант = Истина;
		ОНовыйВариант.Записать();
		ВариантСводнойТаблицы      = ОНовыйВариант.Ссылка;
			
		ИмяТекущегоВарианта  = ОбъектБланк.Ссылка;
	
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПолеТабличногоДокументаШаблонВыбор(Элемент, Область, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры
	
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если Не ЗавершениеРаботы Тогда	
		
		Если Элементы.Применить.Доступность Тогда
			Отказ = Истина;
			Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение",ЭтаФорма);
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
			Возврат;
		КонецЕсли;			
		
		Если ЭтаФорма.Модифицированность 
			И  РежимДоступаКФункциямСводнойТаблицы = ПредопределенноеЗначение("Перечисление.РежимыДоступаКФункциямСводнойТаблицы.РазработкаМакета")  Тогда
			Отказ = Истина;
			Оповещение = Новый ОписаниеОповещения("ВопросСохранитьНастройкиПередЗакрытиемЗавершение",ЭтаФорма);
			
			СтрокаШаблона = Нстр("ru = 'Вариант таблицы был изменен. Сохранить измененный вариант?'");
			
			ПоказатьВопрос(Оповещение, СтрокаШаблона, РежимДиалогаВопрос.ДаНетОтмена);
				
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ЗаписатьИзмененныеПоказатели(Ложь) Тогда
			УстановитьРежимРедактированияДанныхКлиент(Ложь);
			ЭтаФорма.Закрыть();
		КонецЕсли;
		ПоказатьПротокол();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда	
		Элементы.Применить.Доступность = Ложь;
		ЭтаФорма.Закрыть();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьНастройкиПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если РежимДоступаКФункциямСводнойТаблицы = ПредопределенноеЗначение("Перечисление.РежимыДоступаКФункциямСводнойТаблицы.РазработкаМакета")  Тогда
		
		Если Результат = КодВозвратаДиалога.Да Тогда	
			ЗаписатьИЗакрыть(Неопределено);
		ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда	
			ЭтаФорма.Модифицированность = Ложь;
			ЭтаФорма.Закрыть();
		КонецЕсли;
	Иначе	
		
	КонецЕсли;	
	
КонецПроцедуры


#КонецОбласти

#Область ОсновныеОбработчикиВыводаТаблицы

&НаСервере
Процедура ПриИнициализацииСводнойТаблицы() 
		
	ЗаполнитьРежимыРаботы();	
	
	СформироватьЗаголовокФормы();	
	
	ОбновитьСтрокуКлючевыхПараметров();
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиВариантаСводнойТаблицы(ВариантСводнойТаблицы) 
	
	Если ЗначениеЗаполнено(Бланк) 
		И РежимДоступаКФункциямСводнойТаблицы = Перечисления.РежимыДоступаКФункциямСводнойТаблицы.РаботаСДанными 
		И Не ПроверитьВозможностьОтображенияПоБланкуОтчета() Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиСоставаСтрокСводнойТаблицы.ВариантСводнойТаблицы КАК ВариантСводнойТаблицы,
	|	НастройкиСоставаСтрокСводнойТаблицы.СтрокаОтчета КАК СтрокаОтчета,
	|	НастройкиСоставаСтрокСводнойТаблицы.СтрокаРодитель КАК СтрокаРодитель,
	|	НастройкиСоставаСтрокСводнойТаблицы.ПризнакИспользования КАК ПризнакИспользования,
	|	НастройкиСоставаСтрокСводнойТаблицы.ЭтоЭлементГруппа КАК ЭтоЭлементГруппа,
	|	НастройкиСоставаСтрокСводнойТаблицы.НомерПоПорядку КАК НомерПоПорядку,
	|	НастройкиСоставаСтрокСводнойТаблицы.УровеньСтроки КАК УровеньСтроки
	|ИЗ
	|	РегистрСведений.НастройкиСоставаСтрокСводнойТаблицы КАК НастройкиСоставаСтрокСводнойТаблицы
	|ГДЕ
	|	НастройкиСоставаСтрокСводнойТаблицы.ВариантСводнойТаблицы = &ВариантСводнойТаблицы
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПоПорядку
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиРасположенияПолейСводнойТаблицы.ВариантСводнойТаблицы КАК ВариантСводнойТаблицы,
	|	НастройкиРасположенияПолейСводнойТаблицы.ОсьТаблицы КАК ОсьТаблицы,
	|	НастройкиРасположенияПолейСводнойТаблицы.Поле КАК Поле,
	|	НастройкиРасположенияПолейСводнойТаблицы.КодПоля КАК КодПоля,
	|	НастройкиРасположенияПолейСводнойТаблицы.ПредставлениеПоля КАК ПредставлениеПоля,
	|	НастройкиРасположенияПолейСводнойТаблицы.НомерПоПорядку КАК НомерПоПорядку
	|ИЗ
	|	РегистрСведений.НастройкиРасположенияПолейСводнойТаблицы КАК НастройкиРасположенияПолейСводнойТаблицы
	|ГДЕ
	|	НастройкиРасположенияПолейСводнойТаблицы.ВариантСводнойТаблицы = &ВариантСводнойТаблицы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсьТаблицы,
	|	НомерПоПорядку
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСоставаКолонокСводнойТаблицы.ВариантСводнойТаблицы КАК ВариантСводнойТаблицы,
	|	НастройкиСоставаКолонокСводнойТаблицы.КолонкаОтчета КАК КолонкаОтчета,
	|	НастройкиСоставаКолонокСводнойТаблицы.ПредставлениеКолонки КАК ПредставлениеКолонки,
	|	НастройкиСоставаКолонокСводнойТаблицы.ПризнакИспользования КАК ПризнакИспользования,
	|	НастройкиСоставаКолонокСводнойТаблицы.ТипКолонки КАК ТипКолонки,
	|	НастройкиСоставаКолонокСводнойТаблицы.Сценарий КАК Сценарий,
	|	НастройкиСоставаКолонокСводнойТаблицы.Организация КАК Организация,
	|	НастройкиСоставаКолонокСводнойТаблицы.ПериодОтчета КАК ПериодОтчета,
	|	НастройкиСоставаКолонокСводнойТаблицы.ПериодСдвиг КАК ПериодСдвиг,
	|	НастройкиСоставаКолонокСводнойТаблицы.Проект КАК Проект,
	|	НастройкиСоставаКолонокСводнойТаблицы.НомерПоПорядку КАК НомерПоПорядку,
	|	НастройкиСоставаКолонокСводнойТаблицы.ВыводитьЗначениеВДополнительнойВалюте КАК ВыводитьЗначениеВДополнительнойВалюте
	|ИЗ
	|	РегистрСведений.НастройкиСоставаКолонокСводнойТаблицы КАК НастройкиСоставаКолонокСводнойТаблицы
	|ГДЕ
	|	НастройкиСоставаКолонокСводнойТаблицы.ВариантСводнойТаблицы = &ВариантСводнойТаблицы
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПоПорядку
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиПериодовСводнойТаблицы.ВариантСводнойТаблицы КАК ВариантСводнойТаблицы,
	|	НастройкиПериодовСводнойТаблицы.Периодичность КАК Периодичность,
	|	НастройкиПериодовСводнойТаблицы.ВыводитьИтогГод КАК ВыводитьИтогГод,
	|	НастройкиПериодовСводнойТаблицы.ВыводитьИтогПолугодие КАК ВыводитьИтогПолугодие,
	|	НастройкиПериодовСводнойТаблицы.ВыводитьИтогКвартал КАК ВыводитьИтогКвартал,
	|	НастройкиПериодовСводнойТаблицы.ВыводитьИтогМесяц КАК ВыводитьИтогМесяц,
	|	НастройкиПериодовСводнойТаблицы.ВыводитьИтогДекада КАК ВыводитьИтогДекада,
	|	НастройкиПериодовСводнойТаблицы.ВыводитьИтогНеделя КАК ВыводитьИтогНеделя,
	|	НастройкиПериодовСводнойТаблицы.ВыводитьИтогДень КАК ВыводитьИтогДень,
	|	НастройкиПериодовСводнойТаблицы.ВыводитьОбщийИтогПоПериоду КАК ВыводитьОбщийИтогПоПериоду,
	|	НастройкиПериодовСводнойТаблицы.ИспользоватьГруппировкуПериодов КАК ИспользоватьГруппировкуПериодов,
	|	НастройкиПериодовСводнойТаблицы.НомерПериодаДляГруппировки КАК НомерПериодаДляГруппировки,
	|	НастройкиПериодовСводнойТаблицы.ПериодичностьГруппировки КАК ПериодичностьГруппировки
	|ИЗ
	|	РегистрСведений.НастройкиПериодовСводнойТаблицы КАК НастройкиПериодовСводнойТаблицы
	|ГДЕ
	|	НастройкиПериодовСводнойТаблицы.ВариантСводнойТаблицы = &ВариантСводнойТаблицы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиПолейСводнойТаблицы.ВариантСводнойТаблицы КАК ВариантСводнойТаблицы,
	|	НастройкиПолейСводнойТаблицы.Поле КАК Поле,
	|	НастройкиПолейСводнойТаблицы.КодПоля КАК КодПоля,
	|	НастройкиПолейСводнойТаблицы.ВыражениеПредставления КАК ВыражениеПредставления,
	|	НастройкиПолейСводнойТаблицы.ВыражениеУпорядочивания КАК ВыражениеУпорядочивания,
	|	НастройкиПолейСводнойТаблицы.ВыводитьИерархиюЭлементов КАК ВыводитьИерархиюЭлементов,
	|	НастройкиПолейСводнойТаблицы.ВыражениеУпорядочиванияСКДСтрока КАК ВыражениеУпорядочиванияСКДСтрока,
	|	НастройкиПолейСводнойТаблицы.СкрыватьЭлементыГруппы КАК СкрыватьЭлементыГруппы,
	|	НастройкиПолейСводнойТаблицы.ВыводитьДанныеСУровня КАК ВыводитьДанныеСУровня,
	|	НастройкиПолейСводнойТаблицы.ВыводитьДанныеДоУровня КАК ВыводитьДанныеДоУровня
	|ИЗ
	|	РегистрСведений.НастройкиПолейСводнойТаблицы КАК НастройкиПолейСводнойТаблицы
	|ГДЕ
	|	НастройкиПолейСводнойТаблицы.ВариантСводнойТаблицы = &ВариантСводнойТаблицы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиВариантаСводнойТаблицы.ВариантСводнойТаблицы КАК ВариантСводнойТаблицы,
	|	НастройкиВариантаСводнойТаблицы.ВыводитьАналитикиСтрокВИерархии КАК ВыводитьАналитикиСтрокВИерархии,
	|	НастройкиВариантаСводнойТаблицы.ВыводитьАналитикиКолонокВИерархии КАК ВыводитьАналитикиКолонокВИерархии,
	|	НастройкиВариантаСводнойТаблицы.ВыводитьОбщийИтогПоКолонкам КАК ВыводитьОбщийИтогПоКолонкам
	|ИЗ
	|	РегистрСведений.НастройкиВариантаСводнойТаблицы КАК НастройкиВариантаСводнойТаблицы
	|ГДЕ
	|	НастройкиВариантаСводнойТаблицы.ВариантСводнойТаблицы = &ВариантСводнойТаблицы";
	
	Запрос.УстановитьПараметр("ВариантСводнойТаблицы",ВариантСводнойТаблицы);
	
	Результат = Запрос.ВыполнитьПакет();
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("НастройкиСоставаСтрокСводнойТаблицы",Результат[0].Выгрузить());
	СтруктураОтвета.Вставить("НастройкиРасположенияПолейСводнойТаблицы",Результат[1].Выгрузить());
	СтруктураОтвета.Вставить("НастройкиСоставаКолонокСводнойТаблицы",Результат[2].Выгрузить());
	СтруктураОтвета.Вставить("НастройкиПериодовСводнойТаблицы",Результат[3].Выгрузить());
	СтруктураОтвета.Вставить("НастройкиПолейСводнойТаблицы",Результат[4].Выгрузить());
	СтруктураОтвета.Вставить("НастройкиВариантаСводнойТаблицы",Результат[5].Выгрузить());
	
	НастройкиСоставаСтрокСводнойТаблицы.Загрузить(СтруктураОтвета.НастройкиСоставаСтрокСводнойТаблицы);
	НастройкиСоставаКолонокСводнойТаблицы.Загрузить(СтруктураОтвета.НастройкиСоставаКолонокСводнойТаблицы);
	
	Если СтруктураОтвета.НастройкиРасположенияПолейСводнойТаблицы.Количество()>0 Тогда 
		НастройкиРасположенияПолейСводнойТаблицы.Загрузить(СтруктураОтвета.НастройкиРасположенияПолейСводнойТаблицы);
	КонецЕсли;
	
	НастройкиПолейСводнойТаблицы.Загрузить(СтруктураОтвета.НастройкиПолейСводнойТаблицы);
	
	Для Каждого СтрПоле Из НастройкиРасположенияПолейСводнойТаблицы Цикл
		СтрПоле.ТипСтрока = Обработки.АналитическийБланкСводнаяТаблица.ПолучитьТипЗначенияАналитики(СтрПоле.Поле);
	КонецЦикла;	
	
	Если СтруктураОтвета.НастройкиПериодовСводнойТаблицы.Количество()>0 Тогда 
		НастройкиПериодовСводнойТаблицы.Загрузить(СтруктураОтвета.НастройкиПериодовСводнойТаблицы);
	КонецЕсли;
	
	Если СтруктураОтвета.НастройкиВариантаСводнойТаблицы.Количество()>0 Тогда 
		НастройкиВариантаСводнойТаблицы.Загрузить(СтруктураОтвета.НастройкиВариантаСводнойТаблицы);
	КонецЕсли;
	
	//Закэшированные настройки макета
	СтруктураНастроекАналитическогоБланкаАдрес = "";
	СтруктураНастроекАналитическогоБланка  = Новый Структура;
	
	текНаборЗаписей = РегистрыСведений.НастройкиАналитическихБланков.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
	текНаборЗаписей.Прочитать();
	Если  текНаборЗаписей.Количество() =1 Тогда			
		ЗначениеСохраняемойНастройки = текНаборЗаписей[0].ХранилищеДополнительныхНастроек.Получить();	
		СтруктураНастроекАналитическогоБланка.Вставить("НастройкиАналитическихБланков",ЗначениеСохраняемойНастройки);
		ПолеТабличногоДокументаШаблон.Вывести(ЗначениеСохраняемойНастройки.ТабДокМакет);
	Иначе	
		Возврат; //Нет закэшированного макета, далее нечего загружать. 
	КонецЕсли;	
	
	текНаборЗаписей = РегистрыСведений.КэшГруппОтборовПоказателей.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
	текНаборЗаписей.Прочитать();
	СтруктураНастроекАналитическогоБланка.Вставить("КэшГруппОтборовПоказателей",текНаборЗаписей.Выгрузить());
	
	текНаборЗаписей = РегистрыСведений.РасшифровкаГруппОтборов.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
	текНаборЗаписей.Прочитать();
	СтруктураНастроекАналитическогоБланка.Вставить("РасшифровкаГруппОтборов",текНаборЗаписей.Выгрузить());
	
	текНаборЗаписей = РегистрыСведений.КэшИменОбластейПоказателей.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
	текНаборЗаписей.Прочитать();
	СтруктураНастроекАналитическогоБланка.Вставить("КэшИменОбластейПоказателей",текНаборЗаписей.Выгрузить());
	
	текНаборЗаписей = РегистрыСведений.КэшИменОбластейПоказателей.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
	текНаборЗаписей.Прочитать();
	СтруктураНастроекАналитическогоБланка.Вставить("КэшРаскрываемыхОбластей",текНаборЗаписей.Выгрузить());
	
	текНаборЗаписей = РегистрыСведений.НастройкиРаскрываемыхОбластей.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
	текНаборЗаписей.Прочитать();
	СтруктураНастроекАналитическогоБланка.Вставить("НастройкиРаскрываемыхОбластей",текНаборЗаписей.Выгрузить());
	
	текНаборЗаписей = РегистрыСведений.НастройкиТаблицРаскрываемыхОбластей.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
	текНаборЗаписей.Прочитать();
	СтруктураНастроекАналитическогоБланка.Вставить("НастройкиТаблицРаскрываемыхОбластей",текНаборЗаписей.Выгрузить());
	
	текНаборЗаписей = РегистрыСведений.КэшИменФормул.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
	текНаборЗаписей.Прочитать();
	СтруктураНастроекАналитическогоБланка.Вставить("КэшИменФормул",текНаборЗаписей.Выгрузить());
	
	текНаборЗаписей = РегистрыСведений.КэшФормулОбластейПоказателей.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
	текНаборЗаписей.Прочитать();
	СтруктураНастроекАналитическогоБланка.Вставить("КэшФормулОбластейПоказателей",текНаборЗаписей.Выгрузить());
	
	текНаборЗаписей = РегистрыСведений.РасшифровкаФормулОбластейПоказателей.СоздатьНаборЗаписей();
	текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
	текНаборЗаписей.Прочитать();
	СтруктураНастроекАналитическогоБланка.Вставить("РасшифровкаФормулОбластейПоказателей",текНаборЗаписей.Выгрузить());
	
	СтруктураНастроекАналитическогоБланкаАдрес = ПоместитьВоВременноеХранилище(СтруктураНастроекАналитическогоБланка,ЭтаФорма.УникальныйИдентификатор);
	
	
	
КонецПроцедуры	

&НаСервере
Процедура ВывестиСводнуюТаблицу()
		
	ПолеТабличногоДокументаМакет.Очистить();
	
	Если НастройкиСоставаСтрокСводнойТаблицы.Количество() = 0 Тогда
		УстановитьСостояниеНеИспользовать(НСтр("ru = 'Не заполнен состав строк сводной таблицы'"));
		Возврат;
	КонецЕсли;	
	
	Если НастройкиСоставаКолонокСводнойТаблицы.Количество() = 0 Тогда
		УстановитьСостояниеНеИспользовать(НСтр("ru = 'Не заполнен состав колонок сводной таблицы'"));
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ПериодС) Тогда
		УстановитьСостояниеНеИспользовать(НСтр("ru = 'Не заполнен период начала'"));
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ПериодПо) Тогда
		УстановитьСостояниеНеИспользовать(НСтр("ru = 'Не заполнен период окончания'"));
		Возврат;
	КонецЕсли;	

	Если Не ЗначениеЗаполнено(ВалютаОтображения) Тогда
		УстановитьСостояниеНеИспользовать(НСтр("ru = 'Не заполнена валюта отображения'"));
		Возврат;
	КонецЕсли;
	
	Если НастройкиРасположенияПолейСводнойТаблицы.НайтиСтроки(Новый Структура("ОсьТаблицы,Поле",Перечисления.ОсиСводнойТаблицы.Отборы,Перечисления.ПостоянныеПоляСводнойТаблицы.Сценарий)).Количество()=0 Тогда
		УстановитьСостояниеНеИспользовать(НСтр("ru = 'Не заполнен сценарий '"));
		Возврат;
	КонецЕсли;	

	МакетВыведен = Истина;
		
	ОтчетАБ = РеквизитФормыВЗначение("ОбъектАналитическогоБланка");
	
	СтруктураПараметров     = Новый Структура;
	СтруктураПараметров.Вставить("ПолеТабличногоДокументаМакет",ПолеТабличногоДокументаМакет);
	СтруктураПараметров.Вставить("ОбновитьДанные",Истина);
	СтруктураПараметров.Вставить("ДополнительныеНастройки",ОтчетАБ.СТ_ДополнительныеНастройки_Объект); 
	СтруктураПараметров.Вставить("ТекущаяТочность",УровеньТочности);
	СтруктураПараметров.Вставить("ТекущийДелитель",ТекущийДелитель);
	
	Если  НЕ ЗначениеЗАполнено(СтруктураНастроекАналитическогоБланкаАдрес)  Тогда
		СтруктураПараметров.Вставить("Бланк",ВариантСводнойТаблицы);
	Иначе	
		СтруктураПараметров.Вставить("СтруктураНастроекВарианта",ПолучитьИзВременногоХранилища(СтруктураНастроекАналитическогоБланкаАдрес));
	КонецЕсли;	
	
	СтруктураПараметров.Вставить("тДополнительныхОтборов",ПодготовитьТаблицуОтборов());
	
	//Если работаем в режиме базы - получим список версий для сравнения с базой
	Если РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.СравнениеСБазой Тогда
		ПараметрыБазовойВерсии = ПолучитьПараметрыБазовойВерсии(СтруктураПараметров.тДополнительныхОтборов);
		СтруктураПараметров.Вставить("ПараметрыБазовойВерсии",ПараметрыБазовойВерсии);
	КонецЕсли;	
	
	//Офоомление групп иерарахии по нужному шаблону
	СтруктураОформления  = Новый Структура;
	Обработки.АналитическийБланкСводнаяТаблица.УстановитьШаблонУсловногоОформления(СтруктураОформления);
	СтруктураПараметров.Вставить("СтруктураОформления",СтруктураОформления);

	СтруктураПараметров.Вставить("МакетКолонок",МакетКолонок);
	СтруктураПараметров.Вставить("МакетСтрок",МакетСтрок);
   	СтруктураПараметров.Вставить("МакетТаблиц",МакетТаблиц);
    СтруктураПараметров.Вставить("ЗаголовокСводнойТаблицы",Бланк);
	
	ОтчетАБ.ИдентификаторСеанса     = ЭтаФорма.УникальныйИдентификатор;
	ОтчетАБ.РежимСводнойТаблицы     = Истина;
	ОтчетАБ.ПериодОтчета			= ПериодС;
	ОтчетАБ.ПериодОтчетаОкончание 	= ПериодПо;
	ОтчетАБ.Валюта 			 		= ВалютаОтображения;			
	
	СтруктураРеквизитов = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(ВидОтчета);	
	
	Если СтруктураРеквизитов.Свойство("ПравилоОбработки")  Тогда
		ОтчетАБ.ТекущееПравило = СтруктураРеквизитов.ПравилоОбработки;
	КонецЕсли;
	
	ОтчетАБ.ПолучитьРезультирующийМакет(СтруктураПараметров); 
	ОтчетАБ.ТекущийДелитель        	= ТекущийДелитель;
	ОтчетАБ.ТекущаяТочность        	= УровеньТочности;
	ОтчетАБ.РежимРаботы             = РежимРаботы;
	
		
	ЗначениеВРеквизитФормы(ОтчетАБ,"ОбъектАналитическогоБланка");
	
	Если РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.ОбратноеРаспределение Тогда	
		УстановитьОформлениеЯчеекОбратноеРаспределение();
	КонецЕсли;	
	
	ОбновитьСписокТекущихОрганизаций();
	СброситьСостояниеНеИспользовать();
    УстановитьВыбранныйРежимРаботы();
		
КонецПроцедуры	

&НаСервере
Процедура НарисоватьТаблицуСервер() Экспорт
	
	Если ПроверитьВозможностьОтображенияПоБланкуОтчета() Тогда
		
		Если ОбновитьМакетШаблона   Тогда;
			CгенерироватьМакетШаблона();	
		КонецЕсли;
		
		ВывестиСводнуюТаблицу();	
		ВосстановитьГруппировкиСтрок();
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьГруппировкиСтрок();
	
	Для Инд =1 по ПолеТабличногоДокументаМакет.КоличествоУровнейГруппировокСтрок() Цикл	
		ПолеТабличногоДокументаМакет.Область(1,0,ПолеТабличногоДокументаМакет.ВысотаТаблицы,0).Разгруппировать();
	КонецЦикла;
	
	ТЗГрупп = Новый ТаблицаЗначений;
	ТЗГрупп.Колонки.Добавить("ИндексНачалаСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));
	ТЗГрупп.Колонки.Добавить("ИндексОкончанияСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(3));
	ТЗГрупп.Колонки.Добавить("УровеньТекущейОбласти",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(3));
	ТЗГрупп.Колонки.Добавить("УровеньГруппировкиТекущейОбласти",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));	
	ТЗГрупп.Колонки.Добавить("ГруппаОткрыта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	УровеньПоследнейСтроки = 0;
	МассивНомеровГрупп = Новый Массив;
	МассивУдаляемыхСтрок = Новый Массив;
	Сч = 0;
	
	Для  СтрокаТаблицы =ПолеТабличногоДокументаМакет.ФиксацияСверху+1  По ПолеТабличногоДокументаМакет.ВысотаТаблицы+1 Цикл 
		
		
		ТекущаяОбласть    =  ПолеТабличногоДокументаМакет.Область(СтрокаТаблицы,1,СтрокаТаблицы,1);
		СледующаяОбласть  =  ПолеТабличногоДокументаМакет.Область(СтрокаТаблицы+1,1,СтрокаТаблицы+1,1);
		ПредыдущаяОбласть =  ПолеТабличногоДокументаМакет.Область(СтрокаТаблицы-1,1,СтрокаТаблицы-1,1);
		
		Если  ТекущаяОбласть.Отступ<ПредыдущаяОбласть.Отступ Тогда //Закрываем все открытые группы с уровнем большим текущего  	
			ОткрытыеСтроки = ТЗГрупп.НайтиСтроки(Новый Структура("ГруппаОткрыта",Истина));
			Для Каждого оСтр Из ОткрытыеСтроки Цикл
				Если  оСтр.УровеньГруппировкиТекущейОбласти > ТекущаяОбласть.Отступ Тогда
					оСтр.ГруппаОткрыта = Ложь;
					ПолеТабличногоДокументаМакет.Область(оСтр.ИндексНачалаСтроки,0,СтрокаТаблицы-1,0).Сгруппировать();
					Если Лев(ПолеТабличногоДокументаМакет.Область(оСтр.ИндексНачалаСтроки,0,СтрокаТаблицы-1,0).Имя,7)<>"Удалить" Тогда 
						ПолеТабличногоДокументаМакет.Область(оСтр.ИндексНачалаСтроки,0,СтрокаТаблицы-1,0).Имя = "ОбластьСтроки_"+Строка(Новый УникальныйИдентификатор);
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	 	
		КонецЕсли;	
		
		Если СледующаяОбласть.Отступ > ТекущаяОбласть.Отступ Тогда //Открываем группу
			
			МассивНомеровГрупп.Добавить(СтрокаТаблицы);
			
			Нгруппа = ТЗГрупп.Добавить();
			Нгруппа.УровеньТекущейОбласти = ПолеТабличногоДокументаМакет.Область(СтрокаТаблицы,1,СтрокаТаблицы,1).Отступ;
			Нгруппа.ИндексНачалаСтроки = СтрокаТаблицы+1;
			Нгруппа.ИндексОкончанияСтроки = СтрокаТаблицы;
			Нгруппа.УровеньГруппировкиТекущейОбласти = (ПолеТабличногоДокументаМакет.Область(СтрокаТаблицы,1,СтрокаТаблицы,1).Отступ)+2;
			Нгруппа.ГруппаОткрыта = Истина;	
			
		КонецЕсли;	
		
	КонецЦикла;
	
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьСтрокуКлючевыхПараметров()
			
	ТекстУстановленногоФильтра = "";
	
	Если Не ЗначениеЗаполнено(ОтборыЗаголовок) Тогда
		ОтборыЗаголовок = Новый ФорматированнаяСтрока(Нстр("ru = 'Нажмите для установки ключевых параметров сводной таблицы'"));
		Возврат;
	КонецЕсли;	
	
	МассивСтрок = Новый Массив;
	
	ЖирыйШрифт =  Новый Шрифт(Элементы.ОтборыЗаголовок.Шрифт,,,Истина);
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Нстр("ru = '> Режим: '"),, Новый Цвет(0,0,255)));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(РежимРаботы),ЖирыйШрифт,Новый Цвет(0,0,255)));
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Нстр("ru = 'Период с: '"),, Новый Цвет(0,0,255)));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(ЭтаФорма.ПериодС),ЖирыйШрифт,Новый Цвет(0,0,255)));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Нстр("ru = 'по: '"),, Новый Цвет(0,0,255)));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(ЭтаФорма.ПериодПо),ЖирыйШрифт,Новый Цвет(0,0,255)));
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Нстр("ru = 'Валюта: '"),, Новый Цвет(0,0,255)));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(ЭтаФорма.ВалютаОтображения),ЖирыйШрифт,Новый Цвет(0,0,255)));
	
	БыстрыеОтборы = НастройкиРасположенияПолейСводнойТаблицы.НайтиСтроки(Новый Структура("ОсьТаблицы",Перечисления.ОсиСводнойТаблицы.Отборы));
	
	Для Каждого СтрПоле из БыстрыеОтборы Цикл	
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(СтрПоле.Поле)+" :",,Новый Цвет(0,0,255)));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(ЭтаФорма[СтрПоле.КодПоля]),ЖирыйШрифт,Новый Цвет(0,0,255)));	
	КонецЦикла;
	
	
	ОтборыЗаголовок = Новый ФорматированнаяСтрока(МассивСтрок);

КонецПроцедуры	

&НаСервере
Процедура СформироватьЗаголовокФормы()
	
	Если РежимДоступаКФункциямСводнойТаблицы = Перечисления.РежимыДоступаКФункциямСводнойТаблицы.РазработкаМакета Тогда
		ЭтаФорма.Заголовок = НСтр("ru = 'Сводная таблица [макет]: '");
	Иначе	
		ЭтаФорма.Заголовок = НСтр("ru = 'Сводная таблица: '");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НаименованиеНовогоБланка) Тогда
		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок+НаименованиеНовогоБланка;	
	Иначе	
		Если ЗначениеЗаполнено(ВариантСводнойТаблицы) Тогда
			ЭтаФорма.Заголовок = ЭтаФорма.Заголовок+ВариантСводнойТаблицы.Наименование;	
		Иначе	
			ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + НСтр("ru = 'Вариант сводной таблицы не выбран'");
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры	
	
&НаСервере
Процедура УстановитьСостояниеНеИспользовать(ТекстСообщения)
	
	ОтображениеСостояния = Элементы.ПолеТабличногоДокументаМакет.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = ТекстСообщения;
	
	Элементы.ПолеТабличногоДокументаМакет.Доступность = Ложь;
	Элементы.КомандыРаботыСРедактированиемЗначений.Доступность = Ложь;
	Элементы.ГруппаДополнительно.Доступность =Ложь;
	
	ОбновитьСтрокуКлючевыхПараметров();
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьСостояниеНеИспользоватьШаблон(ТекстСообщения)
	
	ОтображениеСостояния = Элементы.ПолеТабличногоДокументаШаблон.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = ТекстСообщения;
	
	Элементы.ПолеТабличногоДокументаШаблон.Доступность = Ложь;
		
КонецПроцедуры	

&НаСервере
Процедура СброситьСостояниеНеИспользоватьШаблон()
	
	ОтображениеСостояния = Элементы.ПолеТабличногоДокументаШаблон.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Ложь;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = "";
	
	Элементы.ПолеТабличногоДокументаШаблон.Доступность = Истина;
		
КонецПроцедуры

&НаСервере
Процедура СброситьСостояниеНеИспользовать()
	
	ОтображениеСостояния = Элементы.ПолеТабличногоДокументаМакет.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Ложь;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = "";
	
	Элементы.ПолеТабличногоДокументаМакет.Доступность = Истина;
	Элементы.КомандыРаботыСРедактированиемЗначений.Доступность = Истина;
	Элементы.ГруппаДополнительно.Доступность =Истина;
	Элементы.ГруппаСтатусы.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеБланкНеДоступен(ТекстСообщения)
	
	ОтображениеСостояния = Элементы.ПолеТабличногоДокументаМакет.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = ТекстСообщения;
	
	Элементы.ПолеТабличногоДокументаМакет.Доступность 			= Ложь;
	Элементы.Команды.Доступность 								= Ложь;
	Элементы.ГруппаДополнительно.Доступность 					= Ложь;
	Элементы.ВариантыТаблицы.Доступность 						= Ложь;
	
	ОбновитьСтрокуКлючевыхПараметров();
	
КонецПроцедуры	

&НаСервере
Процедура СброситьСостояниеБланкНеДоступен()
	
	ОтображениеСостояния = Элементы.ПолеТабличногоДокументаМакет.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Ложь;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = "";
	
	Элементы.ПолеТабличногоДокументаМакет.Доступность 			= Истина;
	Элементы.Команды.Доступность 								= Истина;
	Элементы.ГруппаДополнительно.Доступность 					= Истина;
	Элементы.ВариантыТаблицы.Доступность 						= Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРежимыРаботы()
	
	Элементы.РежимРаботы.СписокВыбора.Очистить();
	
	Элементы.РежимРаботы.СписокВыбора.Добавить(Перечисления.РежимыРаботыСводнойТаблицы.Основной, Нстр("ru = 'Основной'"),,БиблиотекаКартинок.Сформировать_Мастер);
	Элементы.РежимРаботы.СписокВыбора.Добавить(Перечисления.РежимыРаботыСводнойТаблицы.ОбратноеРаспределение, Нстр("ru = 'Обратное распределение'"),,БиблиотекаКартинок.Иерархия);
	Элементы.РежимРаботы.СписокВыбора.Добавить(Перечисления.РежимыРаботыСводнойТаблицы.СогласованиеДанных, Нстр("ru = 'Статусы и согласование'"),,БиблиотекаКартинок.НастроитьИсполняющего);
	Элементы.РежимРаботы.СписокВыбора.Добавить(Перечисления.РежимыРаботыСводнойТаблицы.СравнениеСБазой, Нстр("ru = 'Сравнение с базой'"),,БиблиотекаКартинок.ТреугольникиВверхВниз);
	
	Если Не ЗначениеЗАполнено(РежимРаботы) Тогда
		 РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.Основной;
	КонецЕсли;	

КонецПроцедуры	

&НаКлиенте
Процедура ПриИзмененииПоляОтбора(Команда)
	
	ИзмененОтбор = Истина;
	УстановитьСостояниеНеИспользовать(НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантСводнойТаблицыПриИзменении(Элемент)
	
	ВариантСводнойТаблицыПриИзмененииСервер()
	
КонецПроцедуры

&НаСервере
Процедура ВариантСводнойТаблицыПриИзмененииСервер()

	СформироватьЗаголовокФормы();
	ИзмененОтбор = Истина;
	ПрочитатьНастройкиВариантаСводнойТаблицы(ВариантСводнойТаблицы);	
	ОбновитьИзмеренияИОтборы();
	УстановитьСостояниеНеИспользовать(НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));
		
КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыФильтры()
	
	МассивНовыхРеквизитов = Новый Массив;
	
	Для Каждого нПоле Из НастройкиРасположенияПолейСводнойТаблицы Цикл
		Если МассивДобавленныхРеквизитов.НайтиПоЗначению(нПоле.КодПоля)=Неопределено Тогда
			
			МассивТиповСтрока = СтрРазделить(нПоле.ТипСтрока,"|");
			МассивТипов = Новый Массив;
			Для Каждого СтрТип Из МассивТиповСтрока Цикл
				МассивТипов.Добавить(Тип(СтрТип));
			КонецЦикла;	
		
			НовыйРеквизит  = Новый РеквизитФормы(нПоле.КодПоля, Новый ОписаниеТипов(МассивТипов), , нПоле.ПредставлениеПоля);
			МассивНовыхРеквизитов.Добавить(НовыйРеквизит);
			МассивДобавленныхРеквизитов.Добавить(нПоле.КодПоля);
		КонецЕсли;	
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивНовыхРеквизитов);
    
КонецПроцедуры

&НаСервере
Процедура СоздатьПоляФильтров() Экспорт
		   
				
	ОновнаяПодгруппа = ЭтаФорма.Элементы.ГруппаДополнительныеФильтры;
	
	МассивУдаляемых = Новый Массив;
	
	Для Каждого Поле_ ИЗ ОновнаяПодгруппа.ПодчиненныеЭлементы Цикл
		МассивУдаляемых.Добавить(Поле_);
	КонецЦикла;
	
	Для Каждого уЭлемент Из МассивУдаляемых Цикл
		ЭтаФорма.Элементы.Удалить(уЭлемент);
	КонецЦикла;
			
	Для Каждого СтрПоле из НастройкиРасположенияПолейСводнойТаблицы Цикл
				
		Если Не СтрПоле.ОсьТаблицы = Перечисления.ОсиСводнойТаблицы.Отборы Тогда
			 Продолжить;
		КонецЕсли;	
		
		КодПоля = СтрПоле.КодПоля;
		ЭлементТаблицаДанных =  ЭтаФорма.Элементы.Найти("Элемент_"+КодПоля);	
		Если  ЭлементТаблицаДанных = Неопределено Тогда
			ЭлементТаблицаДанных  = ЭтаФорма.Элементы.Добавить("Элемент_"+КодПоля, Тип("ПолеФормы"), ОновнаяПодгруппа);
			ЭлементТаблицаДанных.ПутьКДанным  = КодПоля;
			ЭлементТаблицаДанных.Вид = ВидПоляФормы.ПолеВвода;
			ЭлементТаблицаДанных.УстановитьДействие("ПриИзменении","ПриИзмененииПоляОтбора");
			ЭлементТаблицаДанных.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
			ЭлементТаблицаДанных.Ширина = 30;
			ЭлементТаблицаДанных.МаксимальнаяШирина = 30;
			ЭлементТаблицаДанных.АвтоМаксимальнаяШирина = Ложь;
			ЭлементТаблицаДанных.РастягиватьПоГоризонтали = Истина;
			ЭлементТаблицаДанных.КнопкаОткрытия = Истина;
			ЭлементТаблицаДанных.КнопкаВыпадающегоСписка = Истина;				
		КонецЕсли;
		
		Если КодПоля = "Проект" Тогда
			Если ВидОтчета.РазделениеПоПроектам Тогда	
				НовыйПараметр = Новый ПараметрВыбора("Отбор.Проект", Истина);
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НовыйПараметр);
				НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
				ЭтаФорма.Элементы.Элемент_Проект.ПараметрыВыбора = НовыеПараметры;	
				ЭтаФорма.Элементы.Элемент_Проект.АвтоОтметкаНезаполненного = Истина;				
			Иначе	
				 ЭтаФорма.Элементы.Элемент_Проект.Видимость = Ложь;	
				 ЭтаФорма["Проект"] = Справочники.Проекты.ПустаяСсылка();
			КонецЕсли;					
		КонецЕсли;
		
		Если КодПоля = "Сценарий" Тогда						
			ЭтаФорма.Элементы.Элемент_Сценарий.АвтоОтметкаНезаполненного = Истина;			
		КонецЕсли;
			
		Если КодПоля = "СтрокиОтчетов" Тогда
									
			НовыйМассив = НастройкиСоставаСтрокСводнойТаблицы.Выгрузить().ВыгрузитьКолонку("СтрокаОтчета");
									
			МассивЗнченийПараметров  = Новый ФиксированныйМассив(НовыйМассив);
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", МассивЗнченийПараметров);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			ЭтаФорма.Элементы.Элемент_СтрокиОтчетов.ПараметрыВыбора = НовыеПараметры;
		
		КонецЕсли;	

		Если КодПоля = "Организация" Тогда
			ЭтаФорма.Элементы.Элемент_Организация.АвтоОтметкаНезаполненного = Истина;			
		КонецЕсли;
		
		Если СтрПоле.ТипСтрока = "СправочникСсылка.ПроизвольныйКлассификаторУХ" Тогда		
			ОписаниеПоля = НастройкиПолейСводнойТаблицы.НайтиСтроки(Новый Структура("КодПоля",СтрПоле.КодПоля))[0].Поле; 		
			НовыйПараметр 					= Новый ПараметрВыбора("Отбор.Владелец", ОписаниеПоля);
			НовыйМассив 					= Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);				
			НовыеПараметры 					= Новый ФиксированныйМассив(НовыйМассив);
			ЭтаФорма.Элементы["Элемент_"+СтрПоле.КодПоля].ПараметрыВыбора = НовыеПараметры;	
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура РежимРаботыПриИзменении(Элемент)
	
	ИзмененОтбор = Истина;
	УстановитьВыбранныйРежимРаботы();
	УстановитьСостояниеНеИспользовать(НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));

КонецПроцедуры

&НаСервере
Процедура УстановитьВыбранныйРежимРаботы()
		
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьПараметрыБазовойВерсии(тДополнительныхОтборов)
	
	ПараметрыБазовойВерсии = Новый Структура;
	
	ТаблицаТекущихОтборов = Обработки.АналитическийБланк.ПолучитьОписаниеТаблицыТекущихОтборов();
		
	ТзПараметровЗапроса = Новый ТаблицаЗначений;
	ТзПараметровЗапроса.Колонки.Добавить("ИмяОтбора");
	ТзПараметровЗапроса.Колонки.Добавить("ТипОтбора");
	ТзПараметровЗапроса.Колонки.Добавить("ЗначениеОтбора");
	ТзПараметровЗапроса.Колонки.Добавить("УидГруппыОтбора");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВерсииЗначенийПоказателей.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.ПериодОтчета В(&ПериодОтчета)
	|	И ВерсииЗначенийПоказателей.Сценарий = &Сценарий
	|	И ВерсииЗначенийПоказателей.Валюта = &Валюта
	|	И ВерсииЗначенийПоказателей.ВидОтчета В(&ВидОтчета)
	|	И ВерсииЗначенийПоказателей.ЧерноваяВерсия = ЛОЖЬ
	|	И ВерсииЗначенийПоказателей.ПометкаУдаления = ЛОЖЬ";	 
	
	Если ПериодыБазаИспользовать Тогда
		СписокПериодовБазовойВерсии = Новый СписокЗначений;
		СписокПериодовБазовойВерсии.Добавить(ПериодБаза);
	Иначе	 		 
		СписокПериодовБазовойВерсии = ПериодыУХ.ПолучитьПодчиненныеПериоды(ПериодБазаС,ПериодБазаПо);	 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СценарииБаза) Тогда
		СценарийБазовойВерсии = СценарииБаза;
	Иначе 		 
		СценарийБазовойВерсии = ЭтаФорма["Сценарий"];
	КонецЕсли;	 
	
	Запрос.УстановитьПараметр("ПериодОтчета",	СписокПериодовБазовойВерсии);
	Запрос.УстановитьПараметр("Сценарий",		СценарийБазовойВерсии);
	Запрос.УстановитьПараметр("ВидОтчета",		тВидыОтчетов.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Валюта",		ВалютаОтображения);
		
	Если ЗначениеЗаполнено(ОрганизацияБаза) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ВерсииЗначенийПоказателей.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация",		ОрганизацияБаза);
		
	Иначе	//Получим запрос по организациям из контектса
		
		Для Каждого СтрОтбор Из тДополнительныхОтборов Цикл
			
			ОсновноеПолеКод     = ?(СтрНайти(СтрОтбор.ПолеКод,".")>0,Лев(СтрОтбор.ПолеКод,СтрНайти(СтрОтбор.ПолеКод,".")-1),СтрОтбор.ПолеКод);
			
			Если НЕ ОсновноеПолеКод 	    = "Организация" ИЛИ НЕ СтрОтбор.Использовать Тогда
				 Продолжить;
			КонецЕсли;	
	
			нСтр  						= ТаблицаТекущихОтборов.Добавить();
			нСтр.ОсновноеПолеКод        = ОсновноеПолеКод;
			ЗаполнитьЗначенияСвойств(нСтр,СтрОтбор);		
			АналитическийБланкУХСервер.ПреобразоватьОтборСКДВСтроку(нСтр,СтрОтбор); 
				
		КонецЦикла;	
			
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(ПроектыБаза) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ВерсииЗначенийПоказателей.Проект = &Проект";
		Запрос.УстановитьПараметр("Проект",		ПроектыБаза);
	Иначе	
		Для Каждого СтрОтбор Из тДополнительныхОтборов Цикл
			
			ОсновноеПолеКод     = ?(СтрНайти(СтрОтбор.ПолеКод,".")>0,Лев(СтрОтбор.ПолеКод,СтрНайти(СтрОтбор.ПолеКод,".")-1),СтрОтбор.ПолеКод);
			
			Если НЕ ОсновноеПолеКод 	    = "Проект" ИЛИ НЕ СтрОтбор.Использовать Тогда
				Продолжить;
			КонецЕсли;	
			
			нСтр  						= ТаблицаТекущихОтборов.Добавить();
			нСтр.ОсновноеПолеКод        = ОсновноеПолеКод;
			ЗаполнитьЗначенияСвойств(нСтр,СтрОтбор);		
			АналитическийБланкУХСервер.ПреобразоватьОтборСКДВСтроку(нСтр,СтрОтбор); 
			
		КонецЦикла;
	КонецЕсли;	 
	
	ТекстОтбораПоКлючамВерсии = АналитическийБланкУХСервер.СформироватьТекстОтбора("ВерсииЗначенийПоказателей","1",ТаблицаТекущихОтборов,ТзПараметровЗапроса);
	
	Запрос.Текст = Запрос.Текст +" 
	|	"+ТекстОтбораПоКлючамВерсии;
    Для Каждого ПараметрОтчета Из ТзПараметровЗапроса Цикл	
		Запрос.УстановитьПараметр(ПараметрОтчета.ИмяОтбора,ПараметрОтчета.ЗначениеОтбора);		
	КонецЦикла;	
	
	Результат = Запрос.Выполнить();
	
	ПараметрыБазовойВерсии.Вставить("СписокВерсий",Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	ПараметрыБазовойВерсии.Вставить("СдвигПоПериоду",СдвигПоПериоду);
	
	Возврат ПараметрыБазовойВерсии;
	
КонецФункции	

&НаСервере
Процедура УстановитьОформлениеЯчеекОбратноеРаспределение()
	
	СтруктураОформления = Новый Структура;
	Обработки.АналитическийБланкСводнаяТаблица.УстановитьШаблонУсловногоОформления(СтруктураОформления);

	Для мСтрока = 1 По ПолеТабличногоДокументаМакет.ВысотаТаблицы Цикл
		Для мКолонка = 1 По ПолеТабличногоДокументаМакет.ШиринаТаблицы Цикл
			ТекОбласть = ПолеТабличногоДокументаМакет.Область(мСтрока,мКолонка,мСтрока,мКолонка);
			Если НЕ ТекОбласть.Расшифровка = Неопределено И ТекОбласть.Расшифровка.Свойство("Ссылка") Тогда	
				Если ТекОбласть.ЦветФона = СтруктураОформления.ОбластьЯчейкаАгрегат.ЦветФона Тогда
					 ТекОбласть.ЦветФона = Новый Цвет();
				Иначе	
					 ТекОбласть.ЦветФона = СтруктураОформления.ОбластьЯчейкаАгрегат.ЦветФона; 
				КонецЕсли;	
				
			КонецЕсли;	
		КонецЦикла;			
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	Элементы.ОчиститьДиапазон.Доступность = Истина;
	Элементы.ВставитьПримечание.Доступность = Истина;
	Элементы.ИзменитьПоказателиИндексация.Доступность = Истина;
	Элементы.ИзменитьПоказателиАктуализация.Доступность = Истина;
	Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюПоказатьРаскрытие.Доступность = Истина;
	Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюИзменитьПоказателиИндексация.Доступность = Истина;
	Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюИзменитьПоказателиАктуализация.Доступность = Истина;
	Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюОчиститьДиапазон.Доступность = Истина;
	Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюВставитьПримечание.Доступность = Истина;
	Элементы.КомандыРаботыСРедактированиемЗначений.Доступность = Истина;
	Элементы.кмКомандыРаботыСРедактированиемЗначений.Доступность = Истина;
	Элементы.кмДополнительныеКоманды.Доступность = Истина;
	Элементы.ГруппаРаботаСЕксель.Доступность = Истина;
	Элементы.ПолеТабличногоДокументаМакет.ТолькоПросмотр = Ложь;
	Элементы.ГруппаПоляСравненияСБазой.Видимость = Ложь;
		
	ОбновитьПометкуКомандЗависимогоОбновленияЯчеек();
	
	Если РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.Основной Тогда
		

	ИначеЕсли РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.ОбратноеРаспределение Тогда
		
		Элементы.ОчиститьДиапазон.Доступность = Ложь;
		Элементы.ВставитьПримечание.Доступность = Ложь;
		Элементы.ИзменитьПоказателиИндексация.Доступность = Ложь;
		Элементы.ИзменитьПоказателиАктуализация.Доступность = Ложь;
		Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюПоказатьРаскрытие.Доступность = Ложь;
		Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюИзменитьПоказателиИндексация.Доступность = Ложь;
		Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюИзменитьПоказателиАктуализация.Доступность = Ложь;
		Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюОчиститьДиапазон.Доступность = Ложь;
		Элементы.ПолеТабличногоДокументаМакетКонтекстноеМенюВставитьПримечание.Доступность = Ложь;
		
	ИначеЕсли РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.СравнениеСБазой Тогда
		
		Элементы.КомандыРаботыСРедактированиемЗначений.Доступность = Ложь;
		Элементы.кмКомандыРаботыСРедактированиемЗначений.Доступность = Ложь;
        Элементы.кмДополнительныеКоманды.Доступность = Ложь;
        Элементы.ГруппаРаботаСЕксель.Доступность = Ложь;
		Элементы.ПолеТабличногоДокументаМакет.ТолькоПросмотр = Истина;
        Элементы.ГруппаПоляСравненияСБазой.Видимость = Истина;
		
	ИначеЕсли РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.СогласованиеДанных Тогда
		
		Элементы.КомандыРаботыСРедактированиемЗначений.Доступность = Ложь;
		Элементы.кмКомандыРаботыСРедактированиемЗначений.Доступность = Ложь;
        Элементы.кмДополнительныеКоманды.Доступность = Ложь;
        Элементы.ГруппаРаботаСЕксель.Доступность = Ложь;
		Элементы.ПолеТабличногоДокументаМакет.ТолькоПросмотр = Истина;
	
	КонецЕсли;	
	
	Если РежимДоступаКФункциямСводнойТаблицы = Перечисления.РежимыДоступаКФункциямСводнойТаблицы.РазработкаМакета Тогда
		 Элементы.КомандыРежимаРаботыСДанными.Видимость 			= Ложь;
		 Элементы.кмКомандыРаботыСРедактированиемЗначений.Видимость = Ложь;
		 Элементы.кмДополнительныеКоманды.Видимость 				= Ложь;
		 Элементы.ПанельМакетов.ТекущаяСтраница                     = Элементы.МакетШаблона;
		 Элементы.ГруппаОбщая.Видимость                             = Ложь;
		 Элементы.Дополнительно.Видимость                           = Ложь;
         Элементы.ВариантыТаблицы.Видимость                         = Ложь;
		 Элементы.ПоказатьДополнительныеОтборы.Видимость            = Ложь;
		 Элементы.ГруппаКомандыРежимБланка.Видимость                = Истина;
		 Элементы.ГруппаРеквизитыБланка.Видимость                	= Истина;
		 Элементы.ОбновитьДанныеТаблицы.Видимость                	= Ложь;
		 Элементы.ГруппаСтатусы.Видимость                			= Ложь;
		 Элементы.ПоказатьСоставСтрок.Видимость                     = Истина;
		 Элементы.ПоказатьНастройкуСоставаАналитики.Видимость       = Истина;
         Элементы.ОткрытьСводнуюТаблицу.Видимость       			= Истина;
		 Элементы.ГруппаПрименитьОтменить.Видимость 				= Ложь;
	 
	 ИначеЕсли РежимДоступаКФункциямСводнойТаблицы = Перечисления.РежимыДоступаКФункциямСводнойТаблицы.РаботаСДанными Тогда	 
		 
		 Элементы.КомандыРежимаРаботыСДанными.Видимость 			= Истина;
		 Элементы.кмКомандыРаботыСРедактированиемЗначений.Видимость = Истина;
		 Элементы.кмДополнительныеКоманды.Видимость 				= Истина;
		 Элементы.ПанельМакетов.ТекущаяСтраница                     = Элементы.МакетДанных;
		 Элементы.ГруппаОбщая.Видимость                             = Истина;
		 Элементы.Дополнительно.Видимость                           = Истина;
         Элементы.ВариантыТаблицы.Видимость                         = Истина;
		 Элементы.ПоказатьДополнительныеОтборы.Видимость            = Истина;
		 Элементы.ГруппаКомандыРежимБланка.Видимость                = Ложь;
		 Элементы.ГруппаРеквизитыБланка.Видимость                	= Ложь;
		 Элементы.ОбновитьДанныеТаблицы.Видимость                	= Истина;
		 Элементы.ГруппаСтатусы.Видимость                			= Истина;
         Элементы.ПоказатьСоставСтрок.Видимость                     = Ложь;
		 Элементы.ПоказатьНастройкуСоставаАналитики.Видимость       = Ложь;
		 Элементы.ОткрытьСводнуюТаблицу.Видимость       			= Ложь;
		 Элементы.ГруппаПрименитьОтменить.Видимость 				= Истина;
	 
	 Иначе
		 
		 Элементы.КомандыРежимаРаботыСДанными.Видимость 			= Истина;
		 Элементы.кмКомандыРаботыСРедактированиемЗначений.Видимость = Истина;
		 Элементы.кмДополнительныеКоманды.Видимость 				= Истина;
		 Элементы.ПанельМакетов.ТекущаяСтраница                     = Элементы.МакетДанных;
		 Элементы.ГруппаОбщая.Видимость                             = Истина;
		 Элементы.Дополнительно.Видимость                           = Истина;
         Элементы.ВариантыТаблицы.Видимость                         = Истина;
		 Элементы.ПоказатьДополнительныеОтборы.Видимость            = Истина;
		 Элементы.ГруппаКомандыРежимБланка.Видимость                = Ложь;
		 Элементы.ГруппаРеквизитыБланка.Видимость                	= Ложь;
		 Элементы.ОбновитьДанныеТаблицы.Видимость                	= Истина;
		 Элементы.ГруппаСтатусы.Видимость                			= Истина;
		 Элементы.ОткрытьСводнуюТаблицу.Видимость       			= Ложь;
		 Элементы.ГруппаПрименитьОтменить.Видимость					= Истина;
	 
	 КонецЕсли;	
	 
	 УстановитьРежимТолькоЧтение();
	 ПолучитьИнформациюПоСдвигуПериодовБаза();

	 Обработки.АналитическийБланк.УстановитьВидимостьДоступностьЭлементовЖурналаДействий(ЭтаФорма);
	 
КонецПроцедуры	

&НаСервере
Функция ПроверитьВозможностьОтображенияПоБланкуОтчета()
	
	тИзмерениеОрганизация = НастройкиРасположенияПолейСводнойТаблицы.НайтиСтроки(Новый Структура("КодПоля","Организация"));
	Если тИзмерениеОрганизация.Количество() = 1 Тогда
		 тОрганизация = ЭтаФорма["Организация"];
	Иначе	
		 тОрганизация = Неопределено;
	КонецЕсли;
	
	ТекстПроверкиОтображения =  ПолныеПраваУХ.ПроверитьВозможностьОтображенияПоБланкуОтчета(Бланк,тОрганизация,ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
	СброситьСостояниеБланкНеДоступен();
	
	Если Не ТекстПроверкиОтображения = "" Тогда
		УстановитьСостояниеБланкНеДоступен(ТекстПроверкиОтображения);

		РежимТолькоЧтение = Истина;
		Возврат Ложь;
	Иначе	   
		РежимТолькоЧтение = НЕ ПолныеПраваУХ.ПроверитьВозможностьЗаписиПоБланкуОтчета(Бланк,тОрганизация,ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"),,,Истина);
		Возврат Истина;
	КонецЕсли;	  
		
КонецФункции	

&НаСервере
Процедура УстановитьРежимТолькоЧтение()
	
	  Элементы.ГруппаРедактирование.Доступность 					= НЕ РежимТолькоЧтение;
	  Элементы.ГруппаДополнительныеКоманды.Доступность 				= НЕ РежимТолькоЧтение;
      Элементы.ПерейтиВРежимОбратногоРаспределения.Доступность      = НЕ РежимТолькоЧтение;
	  Элементы.ПерейтиВРежимОбратногоРаспределения.Доступность      = НЕ РежимТолькоЧтение;
      Элементы.ЗагрузитьИзЕкселя.Доступность                        = НЕ РежимТолькоЧтение;
	  Элементы.кмКомандыРаботыСРедактированиемЗначений.Доступность  = НЕ РежимТолькоЧтение;
	  
КонецПроцедуры	



#КонецОбласти

#Область ГенерацияШаблонаМакетаСводнойТаблицы

Процедура CгенерироватьМакетШаблона();
	    
	ПолеТабличногоДокументаШаблон.Очистить();
	
	Если НастройкиСоставаСтрокСводнойТаблицы.Количество() = 0 Тогда
		УстановитьСостояниеНеИспользоватьШаблон(НСтр("ru = 'Не заполнен состав строк сводной таблицы'"));
		Возврат;
	КонецЕсли;	
	
	Если НастройкиСоставаКолонокСводнойТаблицы.Количество() = 0 Тогда
		УстановитьСостояниеНеИспользоватьШаблон(НСтр("ru = 'Не заполнен состав колонок сводной таблицы'"));
		Возврат;
	КонецЕсли;	

	СтруктураПараметровВход = Новый Структура;
	
	СтруктураПараметровВход.Вставить("ПолеТабличногоДокументаШаблон",ПолеТабличногоДокументаШаблон);
	СтруктураПараметровВход.Вставить("НастройкиСоставаСтрокСводнойТаблицы",НастройкиСоставаСтрокСводнойТаблицы.Выгрузить());
	СтруктураПараметровВход.Вставить("НастройкиСоставаКолонокСводнойТаблицы",НастройкиСоставаКолонокСводнойТаблицы.Выгрузить());
	СтруктураПараметровВход.Вставить("НастройкиРасположенияПолейСводнойТаблицы",НастройкиРасположенияПолейСводнойТаблицы.Выгрузить());
	СтруктураПараметровВход.Вставить("НастройкиВариантаСводнойТаблицы",НастройкиВариантаСводнойТаблицы.Выгрузить());
	СтруктураПараметровВход.Вставить("НастройкиПериодовСводнойТаблицы",НастройкиПериодовСводнойТаблицы.Выгрузить());
	СтруктураПараметровВход.Вставить("НастройкиПолейСводнойТаблицы",НастройкиПолейСводнойТаблицы.Выгрузить());
	СтруктураПараметровВход.Вставить("УникальныйИдентификатор",ЭтаФорма.УникальныйИдентификатор);
    СтруктураПараметровВход.Вставить("СтруктураНастроекАналитическогоБланкаАдрес","");
	
	Обработки.АналитическийБланкСводнаяТаблица.CгенерироватьМакетШаблона(СтруктураПараметровВход); 
	
	СтруктураНастроекАналитическогоБланкаАдрес = СтруктураПараметровВход.СтруктураНастроекАналитическогоБланкаАдрес;
	
	ОбновитьМакетШаблона = Ложь;
	
	СброситьСостояниеНеИспользоватьШаблон();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСЗаголовкомОкнаОтборов

&НаКлиенте
Процедура ОтборыЗаголовокНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ Элементы.ГруппаБыстрыеОтборы.Видимость Тогда	
		Элементы.ГруппаБыстрыеОтборы.Видимость = Истина;
		Элементы.ОтборыЗаголовок.Видимость 	   = НЕ Элементы.ГруппаБыстрыеОтборы.Видимость;
		Элементы.ГруппаБыстрыеОтборы.Заголовок = Нстр("ru = 'Ключевые параметры:'");	
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриРаскрытииФильтров", 0.2, Истина);
	Иначе		
		Элементы.ГруппаБыстрыеОтборы.Видимость = Ложь;
		Элементы.ОтборыЗаголовок.Видимость 	   = НЕ Элементы.ГруппаБыстрыеОтборы.Видимость;
		Элементы.ГруппаБыстрыеОтборы.Заголовок = "";
		Элементы.ГруппаБыстрыеОтборы.Скрыть();	
		ОбновитьСтрокуКлючевыхПараметров();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриРаскрытииФильтров()
	
	Если  Элементы.ГруппаБыстрыеОтборы.Скрыта() Тогда	
		Элементы.ГруппаБыстрыеОтборы.Показать();	
		ОтключитьОбработчикОжидания("Подключаемый_РезультатПриРаскрытииФильтров");
		ПодключитьОбработчикОжидания("Подключаемый_РезультатОчисткаЗаголовкаПриЗакрытии", 1, Ложь);
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатОчисткаЗаголовкаПриЗакрытии()
	
	Если  Элементы.ГруппаБыстрыеОтборы.Скрыта() Тогда	
		Элементы.ГруппаБыстрыеОтборы.Видимость = Ложь;
		Элементы.ОтборыЗаголовок.Видимость 	   = НЕ Элементы.ГруппаБыстрыеОтборы.Видимость;
		Элементы.ГруппаБыстрыеОтборы.Заголовок = "";
		Элементы.ГруппаБыстрыеОтборы.Скрыть();	
		ОтключитьОбработчикОжидания("Подключаемый_РезультатОчисткаЗаголовкаПриЗакрытии");
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериод(Команда)
	
	ПустаяДата = Дата(1, 1, 1);
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Если ЗначениеЗаполнено(ПериодС) Тогда
		Диалог.Период.ДатаНачала	 = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ПериодС, "ДатаНачала");
	Иначе
		Диалог.Период.ДатаНачала	 = ПустаяДата;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПериодПо) Тогда
		Диалог.Период.ДатаОкончания	 = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ПериодПо, "ДатаОкончания");
	Иначе
		Диалог.Период.ДатаНачала	 = ПустаяДата;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьПериодЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбора) = Тип("СтандартныйПериод") Тогда
		
		ВыбраннаяПериодичность = НастройкиПериодовСводнойТаблицы[0].Периодичность;		
		РезультатДатаНачала = РезультатВыбора.ДатаНачала;
		РезультатДатаОкончания = РезультатВыбора.ДатаОкончания;
		Если (ЗначениеЗаполнено(РезультатДатаНачала)) И (ЗначениеЗаполнено(РезультатДатаОкончания)) Тогда
			ПериодыУХПовтИсп.ПроверитьИнтервалПериодов(РезультатДатаНачала, РезультатДатаОкончания);
			ПериодС		 = ОбщегоНазначенияУХ.ПолучитьПериодПоДате(РезультатДатаНачала, ВыбраннаяПериодичность);
			ПериодПо	 = ОбщегоНазначенияУХ.ПолучитьПериодПоДате(РезультатДатаОкончания, ВыбраннаяПериодичность);
			ИзмененПериод = Истина;
			ПолучитьИнформациюПоСдвигуПериодов();
			УстановитьСостояниеНеИспользовать(НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));
		Иначе
			// Не изменяем периоды.
		КонецЕсли;
	ИначеЕсли РезультатВыбора = Неопределено Тогда	
		// Пользователь отказался. Не изменяем периоды.
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный вариант периода ""%Период%"". Операция отменена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%", Строка(РезультатВыбора));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИнформациюПоСдвигуПериодов()
	
	Если РежимРаботы = Перечисления.РежимыРаботыСводнойТаблицы.СравнениеСБазой Тогда
		ПолучитьИнформациюПоСдвигуПериодовБаза();
	КонецЕсли;
	
	тПериоды.ЗагрузитьЗначения(ПериодыУХ.ПолучитьПодчиненныеПериоды(ПериодС,ПериодПо));
	ЗаполнитьТекущиеУОП();
		
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьТекущиеУОП()
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатусыПериодовСценариев.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|ГДЕ
	|	СтатусыПериодовСценариев.Сценарии = &Сценарии
	|	И СтатусыПериодовСценариев.Периоды В(&Периоды)";
	
	
	Запрос.УстановитьПараметр("Сценарии",ЭтаФорма["Сценарий"]);
	Запрос.УстановитьПараметр("Периоды",ПериодыУХ.ПолучитьПодчиненныеПериоды(ПериодС,ПериодПо));
		
	тУправленияПериодом.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УправлениеПериодомСценария"));

КонецПроцедуры


#КонецОбласти

#Область РаботаПанельюОсновныхКоманд

&НаКлиенте
Процедура НарисоватьТаблицу(Команда)
		
	Элементы.ГруппаБыстрыеОтборы.Скрыть();
	Элементы.ГруппаБыстрыеОтборы.Видимость = Ложь;
	Элементы.ОтборыЗаголовок.Видимость 	   = НЕ Элементы.ГруппаБыстрыеОтборы.Видимость;
	Элементы.ГруппаБыстрыеОтборы.Заголовок = "";

	НарисоватьТаблицуСервер();
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСоставСтрок(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ИзменениеСоставаСтрокЗавершение", ЭтаФорма);
	Параметры_ = Новый Структура("ВидОтчета,ВариантСводнойТаблицы,НастройкиСоставаСтрокСводнойТаблицыАдрес",ВидОтчета,ВариантСводнойТаблицы,ПолучитьНастройкиСоставаСтрокСводнойТаблицыАдрес());
	ОткрытьФорму("Обработка.АналитическийБланкСводнаяТаблица.Форма.ФормаНастройкиСтрок",Параметры_,ЭтаФорма,Истина,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСоставаСтрокЗавершение(Результат, ДополнительныеПараметры) Экспорт      
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена  Тогда
		Возврат;
	КонецЕсли;	
	
	ПрименитьНастройкиСоставаСтрок(Результат);
	
	ОбновитьИзмеренияИОтборы();
	
	УстановитьСостояниеНеИспользовать(НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));

	Если РежимДоступаКФункциямСводнойТаблицы = ПредопределенноеЗначение("Перечисление.РежимыДоступаКФункциямСводнойТаблицы.РазработкаМакета")  Тогда
	     CгенерироватьМакетШаблона();
	КонецЕсли;	
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкиСоставаСтрок(Результат)
	
	НастройкиСоставаСтрокСводнойТаблицы.Загрузить(ПолучитьИзВременногоХранилища(Результат.НастройкиСоставаСтрокСводнойТаблицыАдрес));
	ОбновитьМакетШаблона  = Истина;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыОтчетовПоСоставуСтрок()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СтрокиОтчетов.Владелец КАК ВидОтчета
	               |ИЗ
	               |	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	               |ГДЕ
	               |	СтрокиОтчетов.Ссылка В(&Строки)";
	
	Запрос.УстановитьПараметр("Строки",НастройкиСоставаСтрокСводнойТаблицы.Выгрузить().ВыгрузитьКолонку("СтрокаОтчета"));
	
	ВидыОтчетовМассив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидОтчета");
	
	тВидыОтчетов.ЗагрузитьЗначения(ВидыОтчетовМассив);
	  
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериоды()
	
	тПериоды.ЗагрузитьЗначения(ПериодыУХ.ПолучитьПодчиненныеПериоды(ПериодС,ПериодПо));
  
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСоставКолонок(Команда)
	
	Если  НастройкиСоставаСтрокСводнойТаблицы.Количество()>0 Тогда	
		Оповещение = Новый ОписаниеОповещения("ИзменениеСоставаКолонокЗавершение", ЭтаФорма);
		Параметры_ = Новый Структура("ВариантСводнойТаблицы,НастройкиСоставаКолонокСводнойТаблицыАдрес,НастройкиСоставаСтрокСводнойТаблицыАдрес"
		,ВариантСводнойТаблицы
		,ПолучитьНастройкиСоставаКолонокСводнойТаблицыАдрес()
		,ПолучитьНастройкиСоставаСтрокСводнойТаблицыАдрес());
		ОткрытьФорму("Обработка.АналитическийБланкСводнаяТаблица.Форма.ФормаНастройкиКолонок",Параметры_,ЭтаФорма,Истина,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);			
	Иначе		
		Если НЕ РежимДоступаКФункциямСводнойТаблицы = ПредопределенноеЗначение("Перечисление.РежимыДоступаКФункциямСводнойТаблицы.РаботаСДанными") Тогда
			Оповещение = Новый ОписаниеОповещения("ВопросОНеобходимостиЗаполнитьСтрокиЗавершение",ЭтаФорма);
			ПоказатьВопрос(Оповещение, Нстр("ru = 'Строки не выбраны. Открыть форму настройки состава строк?'"), РежимДиалогаВопрос.ДаНет);			
		Иначе
			ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Строки не выбраны. Заполните состав строк в режиме разработки бланка'"));
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСоставаКолонокЗавершение(Результат, ДополнительныеПараметры) Экспорт      
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена  Тогда
		Возврат;
	КонецЕсли;	
	
	ПрименитьНастройкиСоставаКолонок(Результат);
	
	УстановитьСостояниеНеИспользовать(НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));

	Если РежимДоступаКФункциямСводнойТаблицы = ПредопределенноеЗначение("Перечисление.РежимыДоступаКФункциямСводнойТаблицы.РазработкаМакета")  Тогда
	     CгенерироватьМакетШаблона();
	КонецЕсли;	
	 
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкиСоставаКолонок(Результат)
	
	НастройкиСоставаКолонокСводнойТаблицы.Загрузить(ПолучитьИзВременногоХранилища(Результат.НастройкиСоставаКолонокСводнойТаблицыАдрес));
	ОбновитьМакетШаблона  = Истина;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПоказатьНастройкиПериодов(Команда)
	
	ЗаполнитьТекущиеУОП();

	Оповещение = Новый ОписаниеОповещения("ИзменениеНастройкиПериодовЗавершение", ЭтаФорма);
	
	Параметры_ = Новый Структура("ВариантСводнойТаблицы,НастройкиПериодовСводнойТаблицыАдрес,ИспользоватьДинамическийГоризонт,Организации,УправлениеПериодом"
	,ВариантСводнойТаблицы
	,ПолучитьНастройкиПериодовСводнойТаблицыАдрес()
	,ИспользоватьДинамическийГоризонт(ЭтаФорма.Сценарий)
	,тОрганизации
	,тУправленияПериодом);
	
	ОткрытьФорму("Обработка.АналитическийБланкСводнаяТаблица.Форма.ФормаНастройкиШкалыПериодов",Параметры_,ЭтаФорма,Истина,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	 
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеНастройкиПериодовЗавершение(Результат, ДополнительныеПараметры) Экспорт      
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена  Тогда
		Возврат;
	КонецЕсли;	
				
	УстановитьСостояниеНеИспользовать(НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));

	ПрименитьИзменениеНастройкиПериодов(Результат);
	
	Если РежимДоступаКФункциямСводнойТаблицы = ПредопределенноеЗначение("Перечисление.РежимыДоступаКФункциямСводнойТаблицы.РазработкаМакета")  Тогда
	     CгенерироватьМакетШаблона();	 
	КонецЕсли;	
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьИзменениеНастройкиПериодов(Результат)
	
	НастройкиПериодовСводнойТаблицы.Загрузить(ПолучитьИзВременногоХранилища(Результат.НастройкиПериодовСводнойТаблицыАдрес));
	
	Если НЕ РежимДоступаКФункциямСводнойТаблицы = ПредопределенноеЗначение("Перечисление.РежимыДоступаКФункциямСводнойТаблицы.РазработкаМакета")  Тогда
		
		ВыбраннаяПериодичность = НастройкиПериодовСводнойТаблицы[0].Периодичность;		
		РезультатДатаНачала 			= ПериодС.ДатаНачала;
		РезультатДатаОкончания 			= ПериодПо.ДатаОкончания;
		ПериодыУХПовтИсп.ПроверитьИнтервалПериодов(РезультатДатаНачала, РезультатДатаОкончания);
		ПериодС		 = ОбщегоНазначенияУХ.ПолучитьПериодПоДате(РезультатДатаНачала, ВыбраннаяПериодичность);
		ПериодПо	 = ОбщегоНазначенияУХ.ПолучитьПериодПоДате(РезультатДатаОкончания, ВыбраннаяПериодичность);
		ИзмененПериод = Истина;
		ПолучитьИнформациюПоСдвигуПериодов();
		
	КонецЕсли;
	
	ОбновитьМакетШаблона  = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройкиТаблицыПоОсям(Команда)
		
	Если  НастройкиСоставаСтрокСводнойТаблицы.Количество()>0 Тогда	
		Оповещение = Новый ОписаниеОповещения("НастрйкаОсейЗавершение", ЭтаФорма);
		Параметры_ = Новый Структура("НастройкиРасположенияПолейСводнойТаблицыАдрес,НастройкиСоставаСтрокСводнойТаблицыАдрес,НастройкиПолейСводнойТаблицыАдрес,НастройкиВариантаСводнойТаблицыАдрес" 
		,ПолучитьНастройкиРасположенияПолейСводнойТаблицыАдрес()
		,ПолучитьНастройкиСоставаСтрокСводнойТаблицыАдрес()
		,ПолучитьНастройкиПолейСводнойТаблицыАдрес()
		,ПолучитьНастройкиВариантаСводнойТаблицыАдрес());
	
		ОткрытьФорму("Обработка.АналитическийБланкСводнаяТаблица.Форма.ФормаНастройкиРасположенияИзмерений", 
		Параметры_,ЭтаФорма,Истина,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 		
	Иначе		
		
		Если НЕ РежимДоступаКФункциямСводнойТаблицы = ПредопределенноеЗначение("Перечисление.РежимыДоступаКФункциямСводнойТаблицы.РаботаСДанными") Тогда
			Оповещение = Новый ОписаниеОповещения("ВопросОНеобходимостиЗаполнитьСтрокиЗавершение",ЭтаФорма);
			ПоказатьВопрос(Оповещение, Нстр("ru = 'Строки не выбраны. Открыть форму настройки состава строк?'"), РежимДиалогаВопрос.ДаНет);		
		Иначе
			ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Строки не выбраны. Заполните состав строк в режиме разработки бланка'"));
		КонецЕсли;
				
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура НастрйкаОсейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если  Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
			
	ПрименитьНастройкиРасположенияПолей(Результат);
	
	Если РежимДоступаКФункциямСводнойТаблицы = ПредопределенноеЗначение("Перечисление.РежимыДоступаКФункциямСводнойТаблицы.РазработкаМакета")  Тогда
	     CгенерироватьМакетШаблона();
	КонецЕсли;	
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкиРасположенияПолей(Результат)
	
	НастройкиРасположенияПолейСводнойТаблицы.Загрузить(ПолучитьИзВременногоХранилища(Результат.НастройкиРасположенияПолейСводнойТаблицыАдрес));
	НастройкиПолейСводнойТаблицы.Загрузить(ПолучитьИзВременногоХранилища(Результат.НастройкиПолейСводнойТаблицыАдрес));
	НастройкиВариантаСводнойТаблицы.Загрузить(ПолучитьИзВременногоХранилища(Результат.НастройкиВариантаСводнойТаблицыАдрес));
	
	ОбновитьМакетШаблона  = Истина;
	
	СоздатьРеквизитыФильтры();
	СоздатьПоляФильтров();
    ОбновитьИзмеренияИОтборы();

	УстановитьСостояниеНеИспользовать(НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));
	
КонецПроцедуры	

&НаКлиенте
Процедура ПоказатьДополнительныеОтборы(Команда)
	
	Элементы.ПоказатьДополнительныеОтборы.Пометка   = НЕ Элементы.ПоказатьДополнительныеОтборы.Пометка;	
	Элементы.ПанельНастроекСводнойТаблицы.Видимость = Элементы.ПоказатьДополнительныеОтборы.Пометка;

КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиСоставаСтрокСводнойТаблицыАдрес()
	
	Возврат ПоместитьВоВременноеХранилище(НастройкиСоставаСтрокСводнойТаблицы.Выгрузить(),ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиПериодовСводнойТаблицыАдрес()
	
	Возврат ПоместитьВоВременноеХранилище(НастройкиПериодовСводнойТаблицы.Выгрузить(),ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИспользоватьДинамическийГоризонт(Сценарий)
	
	Если ЗначениеЗаполнено(Сценарий) Тогда
		Возврат Сценарий.РежимПланирования = Перечисления.РежимыПланирования.СкользящееПланирование;
	Иначе	
		Возврат Ложь;
	КонецЕсли;	
			
КонецФункции


&НаСервере
Функция ПолучитьНастройкиРасположенияПолейСводнойТаблицыАдрес()
	
	Возврат ПоместитьВоВременноеХранилище(НастройкиРасположенияПолейСводнойТаблицы.Выгрузить(),ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиСоставаКолонокСводнойТаблицыАдрес()
	
	Возврат ПоместитьВоВременноеХранилище(НастройкиСоставаКолонокСводнойТаблицы.Выгрузить(),ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#Область РаботаСПанельюКомандРедактированияЯчеек

&НаКлиенте
Процедура ВставитьДанныеИзБуфера(Команда)	
	
	ОписаниеТранзакции = ПредопределенноеЗначение("Перечисление.ТранзакцииИзмененияПоказателей.ВставкаИзБуфера");
	
	тМакет = ЭтаФорма[ТекущийМакет];
	ОписаниеИзменений = "";
	ОбъектКопирования = Новый COMОбъект("htmlfile");
	ДанныеБуфера =ОбъектКопирования.ParentWindow.ClipboardData.GETdata("Text");
	МассивСтрок = Новый Массив;
	МассивЗначений = Новый Массив;		
	Если КодСимвола(Прав(ДанныеБуфера,1)) = 10 И КодСимвола(Прав(ДанныеБуфера,2)) = 13 Тогда	
		ДанныеБуфера = Лев(ДанныеБуфера,СтрДлина(ДанныеБуфера)-2);	
	КонецЕсли;	
	
	АналитическийБланкУХКлиент.РазобратьДанныеБуфера(ДанныеБуфера,МассивСтрок,МассивЗначений);
	
	Для Каждого Область Из тМакет.ВыделенныеОбласти Цикл
		СкопироватьЗначения(Область.Имя,МассивЗначений,,ОписаниеИзменений,ОписаниеТранзакции);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОписаниеИзменений) Тогда		
		ПоказатьОповещениеПользователя(Нстр("ru = 'Ячейки не редактируются'"),,ОписаниеИзменений,БиблиотекаКартинок.Внимание16);
		Возврат;
	КонецЕсли;	
	
	УстановитьРежимРедактированияДанныхКлиент(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьДанныеПоСтроке(Команда)
	
	тМакет 				= ПолеТабличногоДокументаМакет;
	ВыдОбласть 			= тМакет.ВыделенныеОбласти[0];
    ОписаниеТранзакции 	= ПредопределенноеЗначение("Перечисление.ТранзакцииИзмененияПоказателей.КопированиеПоСтроке");
	
	Если ВыдОбласть.Право - ВыдОбласть.Лево<>0 Тогда
		ГраницаОбласти =   ВыдОбласть.Право;
	Иначе	
		ГраницаОбласти =  тМакет.ШиринаТаблицы;
	КонецЕсли;
	
	МассивСтрок = Новый Массив();
	НачальныйИндексКолонки = ВыдОбласть.Лево;
 
	ОбластьДляВставки = тМакет.Область(ВыдОбласть.Верх,ВыдОбласть.Лево,ВыдОбласть.Низ,ГраницаОбласти);
	КодРесурса = "";
	тОбласть    = тМакет.Область(ВыдОбласть.Верх,ВыдОбласть.Лево,ВыдОбласть.Верх,ВыдОбласть.Лево);
	
	СтруктураНезаполненыхАналитик 	= Новый Структура;
	СтруктураОтбираемыхАналитик 	= Новый Структура;
	
	Если НЕ тОбласть.Расшифровка  = Неопределено Тогда		
		СтруктураРасшифровки = 	ПолучитьСтруктуруРасшифровки(тОбласть.Имя,тОбласть.Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик);	
		// Получим код ресурса, по которому будем осуществлять копирование.
		Если СтруктураРасшифровки.Свойство("ПоказательКод") Тогда
			КодРесурса = СтруктураРасшифровки.ПоказательКод;
		Иначе	 
			Возврат;
		КонецЕсли;		
	Иначе	
		Возврат;
	КонецЕсли;	
	
	Для СтрУ = ВыдОбласть.Верх По ВыдОбласть.Низ Цикл 
		ОбластьПраво = тМакет.Область(СтрУ, ВыдОбласть.Право, СтрУ, ВыдОбласть.Право);
		МассивЗначений = Новый Массив();
		ОбластьЛево = тМакет.Область(СтрУ, ВыдОбласть.Лево, СтрУ, ВыдОбласть.Лево);
				
		Значение = АналитическийБланкУХКлиент.ПолучитьЗначениеОбластиТабличногоДокумента(ОбластьЛево);
		
		Для ИндК = НачальныйИндексКолонки По ГраницаОбласти Цикл		
			Область = тМакет.Область(СтрУ,ИндК,СтрУ,ИндК);	
			МассивЗначений.Добавить(Значение);	
		КонецЦикла;	
		МассивСтрок.Добавить(МассивЗначений);	
	КонецЦикла;
	
	КодКолонкиРесурса = ПолучитьКодКолонкиПоказателя(СтруктураРасшифровки.ПоказательСсылка);	
	
	ОписаниеИзменений = "";
	СкопироватьЗначения(ОбластьДляВставки.Имя,МассивСтрок,КодКолонкиРесурса,ОписаниеИзменений,ОписаниеТранзакции);
	Если ЗначениеЗаполнено(ОписаниеИзменений) Тогда		
		 ПоказатьОповещениеПользователя(Нстр("ru = 'Ячейки не редактируются'"),, ОписаниеИзменений,БиблиотекаКартинок.Внимание16);
		 Возврат;
	КонецЕсли;	
	
	УстановитьРежимРедактированияДанныхКлиент(Истина);

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьДанныеПоКолонке(Команда)
	
	тМакет 				= ПолеТабличногоДокументаМакет;
	ВыдОбласть 			= тМакет.ВыделенныеОбласти[0];
	ОписаниеТранзакции 	= ПредопределенноеЗначение("Перечисление.ТранзакцииИзмененияПоказателей.КопированиеПоСтолбцу");

	Если ВыдОбласть.Низ - ВыдОбласть.Верх<>0 Тогда
		ГраницаОбласти =   ВыдОбласть.Низ;
	Иначе	
		ГраницаОбласти =   тМакет.ВысотаТаблицы;	
	КонецЕсли;
	МассивСтрок = Новый Массив();
	НачальныйИндексСтроки = ВыдОбласть.Верх;	
	
	ОбластьДляВставки = тМакет.Область(ВыдОбласть.Верх,ВыдОбласть.Лево,ГраницаОбласти,ВыдОбласть.Право);
	тОбласть    = тМакет.Область(ВыдОбласть.Верх,ВыдОбласть.Лево,ВыдОбласть.Верх,ВыдОбласть.Лево);
	СтруктураНезаполненыхАналитик 	= Новый Структура;
	СтруктураОтбираемыхАналитик 	= Новый Структура;
	
	Если НЕ тОбласть.Расшифровка  = Неопределено Тогда		
		СтруктураРасшифровки = 	ПолучитьСтруктуруРасшифровки(тОбласть.Имя,тОбласть.Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик);	
		Если СтруктураРасшифровки.Свойство("ПоказательКод") Тогда
			 КодРесурса = СтруктураРасшифровки.ПоказательКод;
		Иначе	 
			Возврат;
		КонецЕсли;		
	Иначе	
		Возврат;
	КонецЕсли;	
	
	Для  СтрУ=ВыдОбласть.Верх По ГраницаОбласти Цикл 
		
		МассивЗначений = Новый Массив();	
		Для ИндК =  ВыдОбласть.Лево По ВыдОбласть.Право Цикл				
			Значение = АналитическийБланкУХКлиент.ПолучитьЗначениеОбластиТабличногоДокумента(тМакет.Область(ВыдОбласть.Верх, ИндК, ВыдОбласть.Верх, ИндК));
			Область = тМакет.Область(СтрУ,ИндК,СтрУ,ИндК);		
			МассивЗначений.Добавить(Значение);		
		КонецЦикла;	
		
		МассивСтрок.Добавить(МассивЗначений);		
	КонецЦикла;
	
	ОписаниеИзменений = "";
	СкопироватьЗначения(ОбластьДляВставки.Имя,МассивСтрок,,ОписаниеИзменений,ОписаниеТранзакции);
	
	Если ЗначениеЗаполнено(ОписаниеИзменений) Тогда		
		 ПоказатьОповещениеПользователя(Нстр("ru = 'Ячейки не редактируются'"),,ОписаниеИзменений,БиблиотекаКартинок.Внимание16);
		 Возврат;
	КонецЕсли;	
	
	УстановитьРежимРедактированияДанныхКлиент(Истина);

КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруРасшифровки(ОбластьИмя,Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик)
	
	тМакет 					= ПолеТабличногоДокументаМакет;
	тОбъектАБ     			= ОбъектАналитическогоБланка;
    ТзСвойстваПоказателей 	= ПолучитьИзВременногоХранилища(тОбъектАБ.ТзСвойстваПоказателейАдрес);
	
	СтруктураТекущихКлючевыхРеквизитов = ПолучитьСвойстваТекущегоОбъектаСервер();
	
	Возврат АналитическийБланкУХСервер.ПолучитьСтруктуруРасшифровки(тМакет,СтруктураТекущихКлючевыхРеквизитов,тОбъектАБ,ОбластьИмя,Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик,ТзСвойстваПоказателей);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКодКолонкиПоказателя(ПоказательВход)
	
	Если ЗначениеЗаполнено(ПоказательВход) Тогда
		Возврат СокрЛП(ПоказательВход.Колонка.Код);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ОчиститьДиапазон(Команда)
	
	тМакет = ПолеТабличногоДокументаМакет;
	ОписаниеИзменений = "";
	Для Каждого Область Из тМакет.ВыделенныеОбласти Цикл
		ОчиститьСодержимоеРаскрытияСервер(Область.Имя,ОписаниеИзменений);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОписаниеИзменений) Тогда		
		ПоказатьОповещениеПользователя(Нстр("ru = 'Ячейки не редактируются'"),,ОписаниеИзменений,БиблиотекаКартинок.Внимание16);
	Иначе	 
		УстановитьРежимРедактированияДанныхКлиент(Истина);
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьСодержимоеРаскрытияСервер(ИмяОбласти,ОписаниеИзменений)
		
	Обработки.АналитическийБланк.ОчиститьСодержимоеОбласти(ЭтаФорма,ВалютаОтображения,ИмяОбласти,ОписаниеИзменений)
		
КонецПроцедуры

&НаКлиенте
Процедура КомментироватьПоказатель(Команда)
						
	Область = ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0];
	
	Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		Область = ПолеТабличногоДокументаМакет.Область(Область.Верх,Область.Лево,Область.Верх,Область.Лево);
	КонецЕсли;	
	
	СтруктураНезаполненыхАналитик 	= Новый Структура;
	СтруктураОтбираемыхАналитик 	= Новый Структура;
	
	СтруктураРасшифровки = 	ПолучитьСтруктуруРасшифровки(Область.Имя,Область.Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик);
	Если СтруктураРасшифровки = Неопределено  Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Комментарий недоступен'"),,НСтр("ru = 'Примечание можно добавить только к ячейке показателя'"),БиблиотекаКартинок.Внимание16);		
		Возврат;
	ИначеЕсли СтруктураРасшифровки.Свойство("ТекстФормулы") Тогда	
		ПоказатьОповещениеПользователя(НСтр("ru = 'Комментарий недоступен'"),,НСтр("ru = 'Примечание можно добавить только к ячейке показателя'"),БиблиотекаКартинок.Внимание16);	
		Возврат;
	ИначеЕсли СтруктураНезаполненыхАналитик.Количество()>0 Тогда 	 
		ПоказатьОповещениеПользователя(НСтр("ru = 'Комментарий недоступен'"),,НСтр("ru = 'Примечание нельзя добавить к ячейке, содержащий агрегированные данные'"),БиблиотекаКартинок.Внимание16);
		Возврат;
	КонецЕсли;	

	ТекстПримечания = Область.Примечание.Текст;
	Параметры_ = Новый Структура("ТекстКомментария",ТекстПримечания);
	Оповещение = Новый ОписаниеОповещения("РедактированиеКомментарияЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.АналитическийБланкСводнаяТаблица.Форма.ФормаКомментариевУправляемая", 
	Параметры_,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеКомментарияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если  Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
				
	ИмяОбласти =  ПолеТабличногоДокументаМакет.ТекущаяОбласть.Имя;
	
	ЗаписатьКомментарий(Результат,ИмяОбласти);	
		
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКомментарий(Результат,ИмяОбласти)
		
	Область 						= ЭтаФорма[ТекущийМакет].Область(ИмяОбласти);
	СтруктураНезаполненыхАналитик 	= Новый Структура;
	СтруктураОтбираемыхАналитик 	= Новый Структура;
	КэшАналитикПоказателей          = ПолучитьИзВременногоХранилища(ЭтаФорма[ТекущийОбъектАБ].КэшАналитикПоказателейАдрес);
	
	СтруктураРасшифровки = 	ПолучитьСтруктуруРасшифровки(Область.Имя,Область.Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик);
	
	ОписаниеТранзакции 					= Перечисления.ТранзакцииИзмененияПоказателей.ДобавлениеКомментарияКЯчейке;

	Обработки.АналитическийБланк.ВставитьЗначениеКомментария(ЭтаФорма,ВалютаОтображения,ИмяОбласти,Результат,СтруктураРасшифровки,КэшАналитикПоказателей,ОписаниеТранзакции);
	
КонецПроцедуры



&НаКлиенте
Процедура ИзменитьПоказателиСуммаПроцент(Команда)
	
	ИзменитьПоказатели("ЗначениеПроцент");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоказателиАктуализация(Команда)
	ИзменитьПоказатели("Актуализация");
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоказателиИндексация(Команда)
	ИзменитьПоказатели("Дефлятор");
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоказатели(Режим)
		
	Оповещение = Новый ОписаниеОповещения("ИзменениеПоказателейЗавершение", ЭтаФорма);
	
	СтруктураПараметров = Новый Структура();	
	Если ТипЗнч(Режим) = Тип("Строка") Тогда
		СтруктураПараметров.Вставить("Режим",Режим);
	Иначе	
		СтруктураПараметров.Вставить("Режим",Режим.Имя);
	КонецЕсли;	
	
	СписокПоказателей 	= Новый СписокЗначений;
	СписокПериодов 		= Новый СписокЗначений;
    СписокОрганизаций   = Новый СписокЗначений;
	
	тМакет = ПолеТабличногоДокументаМакет;
	тОбъектАБ = ОбъектАналитическогоБланка;
		
	АдресРасшифровки 		= Неопределено;

	СтруктураТекущихКлючевыхРеквизитов =  ПолучитьСвойстваТекущегоОбъекта();

	Для Каждого Область Из тМакет.ВыделенныеОбласти Цикл
		
		Для ИндС = Область.Верх По Область.Низ Цикл
			Для ИндК = Область.Лево По Область.Право Цикл
				
				СтруктураРасшифровки = Новый Структура;
				
				Область =ПолеТабличногоДокументаМакет.Область(ИндС, ИндК);		
				
				ОбластьИмя 				=  Область.Имя;
				ОбластьРасшифровка      =  Область.Расшифровка;
				
				Если  ТипЗнч(Область.Расшифровка) = Тип("Структура") И Область.Расшифровка.Свойство("Ссылка") Тогда	
					
					ТипЯчейки = "ЭтоРасшифровкаСтруктура";				
					
					ЗаполнитьЗначенияРасшифровкиПоТекущемуКонтексту(Область,СтруктураРасшифровки);	
	
					СтруктураОтвета = ПолучитьСтруктуруРасшифровкиБезКонтекста(СтруктураРасшифровки,АдресРасшифровки,СтруктураТекущихКлючевыхРеквизитов,тОбъектАБ.АдресРасшифровкиГруппОтборов,ОбластьИмя,ОбластьРасшифровка,тОбъектАБ.ТзСвойстваПоказателейАдрес);
					
					СтруктураРасшифровки = СтруктураОтвета.СтруктураРасшифровки;
					
					Если  СписокПоказателей.НайтиПоЗначению(СтруктураРасшифровки.ПоказательСсылка) = Неопределено Тогда
						СписокПоказателей.Добавить(СтруктураРасшифровки.ПоказательСсылка);
					КонецЕсли;	
					
					Если  СписокОрганизаций.НайтиПоЗначению(СтруктураРасшифровки.Организация) = Неопределено Тогда
						СписокОрганизаций.Добавить(СтруктураРасшифровки.Организация);
					КонецЕсли;	
					
					Если  СписокПериодов.НайтиПоЗначению(СтруктураРасшифровки.ПериодОтчета) = Неопределено Тогда
						СписокПериодов.Добавить(СтруктураРасшифровки.ПериодОтчета);
					КонецЕсли;	
	
				КонецЕсли;	
						
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
		
	СтруктураПараметров.Вставить("СписокПоказателей",СписокПоказателей);
	СтруктураПараметров.Вставить("СписокПериодов",СводнаяТаблицаУХ.УпорядочитьПериоды(СписокПериодов));
	СтруктураПараметров.Вставить("СписокОрганизаций",СписокОрганизаций);
	СтруктураПараметров.Вставить("ВидОтчета",тВидыОтчетов[0].Значение);
	СтруктураПараметров.Вставить("Сценарий",ЭтаФорма["Сценарий"]);

	ОткрытьФорму("Обработка.АналитическийБланк.Форма.ФормаИзмененияПоказателей", 
	СтруктураПараметров, ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеПоказателейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеИзменений = "";
	
	Для Каждого Область Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл
		ИзменитьПоказателиСервер(Область.Имя,Результат,ОписаниеИзменений);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОписаниеИзменений) Тогда		
		 ПоказатьОповещениеПользователя(Нстр("ru = 'Ячейки не редактируются'"),, ОписаниеИзменений,БиблиотекаКартинок.Внимание16);
		 Возврат;	 
	КонецЕсли;	
	
	УстановитьРежимРедактированияДанныхКлиент(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПоказателиСервер(ИмяОбласти,Параметры,ОписаниеИзменений)
		
	ОбъектАБ = РеквизитФормыВЗначение("ОбъектАналитическогоБланка");

	ОписаниеИзменений = "";
	тОбъектСтруктура = Новый Структура;
	ЗаполнитьЗаблокированныеПериоды(тОбъектСтруктура,,тУправленияПериодом,тОрганизации);
	
	Для Каждого тПериод Из тОбъектСтруктура.ЗаблокированныеПериоды Цикл
		нтПериод 				=  ОбъектАБ.ЗаблокированныеПериоды.Добавить();
		нтПериод.ПериодОтчета   =  тПериод;
	КонецЦикла;	
			
	Обработки.АналитическийБланк.ИзменитьЗначенияВОбласти(ЭтаФорма,ВалютаОтображения,ИмяОбласти,Параметры,ОписаниеИзменений);	
	
	ЗначениеВРеквизитФормы(ОбъектАБ,"ОбъектАналитическогоБланка");
			
КонецПроцедуры


#КонецОбласти

#Область РаботаСПанельюКомандДополнительно

&НаКлиенте
Процедура ОбннвлятьЯчейкиАвтоматически(Команда)
	
	ПараметрыКонтекстногоОбновленияЗависимыхЯчеек = ПредопределенноеЗначение("Перечисление.ПараметрыКонтекстногоОбновленияЗависимыхЯчеек.АвтоматическиВсе");
	ОбновитьПометкуКомандЗависимогоОбновленияЯчеек();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбннвлятьЯчейкиВручную(Команда)
	
	ПараметрыКонтекстногоОбновленияЗависимыхЯчеек = ПредопределенноеЗначение("Перечисление.ПараметрыКонтекстногоОбновленияЗависимыхЯчеек.Вручную");
	ОбновитьПометкуКомандЗависимогоОбновленияЯчеек();

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьОбщийИтогПоКолонкам(Команда)
	
	Элементы.ВыводитьОбщийИтогПоКолонкам.Пометка 					= НЕ Элементы.ВыводитьОбщийИтогПоКолонкам.Пометка;
    НастройкиВариантаСводнойТаблицы[0].ВыводитьОбщийИтогПоКолонкам  = Элементы.ВыводитьОбщийИтогПоКолонкам.Пометка;
	УстановитьСостояниеНеИспользовать(НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));
	ОбновитьМакетШаблона  = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НепустыеСтроки(Команда)
	
	Элементы.ФормаНепустыеСтроки.Пометка = НЕ Элементы.ФормаНепустыеСтроки.Пометка;
	УправлениеВидимостьюПустыхСтрок(ПолеТабличногоДокументаМакет);
		
КонецПроцедуры

&НаКлиенте
Процедура НепустыеКолонки(Команда)
		
	Элементы.ФормаНепустыеКолонки.Пометка = НЕ Элементы.ФормаНепустыеКолонки.Пометка;
	УправлениеВидимостьюПустыхКолонок(ПолеТабличногоДокументаМакет);
		
КонецПроцедуры

// Скрывает в макете строки, содержащие области со значеними,
// если такие области не содержат значений в пределах строки.
//
&НаКлиенте
Процедура УправлениеВидимостьюПустыхСтрок(Макет = Неопределено)
	
	Если Макет = Неопределено Тогда
		Макет = Элементы.ПолеТабличногоДокументаМакет;
	КонецЕсли;
		
	ИндексПервойСтроки = Макет.ВысотаТаблицы + 1;
	ИндексПервойКолонки = Макет.ШиринаТаблицы + 1;
	
	Для НомСтр = 1 по Макет.ВысотаТаблицы Цикл
		Для НомКол = 1 по Макет.ШиринаТаблицы Цикл
			
			ТекОбласть = Макет.Область(НомСтр, НомКол, НомСтр, НомКол);
			
			Если ТипЗнч(ТекОбласть.Расшифровка) = Тип("Структура") тогда
				Если ТекОбласть.Расшифровка.Свойство("Ссылка") тогда
					ИндексПервойСтроки = Мин(ИндексПервойСтроки, НомСтр);
					ИндексПервойКолонки = Мин(ИндексПервойКолонки, НомКол);
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла;
	
	Если Элементы.ФормаНепустыеСтроки.Пометка Тогда
		
		СписокНеЗаполненных = Новый СписокЗначений;
		СписокЗаполненных = Новый СписокЗначений;
				
		Для НомСтр = ИндексПервойСтроки по Макет.ВысотаТаблицы Цикл
			Для НомКол = ИндексПервойКолонки по Макет.ШиринаТаблицы Цикл
				
				ТекОбласть = Макет.Область(НомСтр, НомКол, НомСтр, НомКол);
				
				Если ЗначениеЗаполнено(ТекОбласть.Текст) И ТекОбласть.Текст <> "0" Тогда
					Если СписокЗаполненных.НайтиПоЗначению(НомСтр) = Неопределено Тогда
						СписокЗаполненных.Добавить(НомСтр);
					КонецЕсли;
				Иначе
					Если СписокНеЗаполненных.НайтиПоЗначению(НомСтр) = Неопределено Тогда
						СписокНеЗаполненных.Добавить(НомСтр);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
				
		Для НомСтр = 1 По Макет.ВысотаТаблицы Цикл
			Если СписокНеЗаполненных.НайтиПоЗначению(НомСтр) <> Неопределено И СписокЗаполненных.НайтиПоЗначению(НомСтр) = Неопределено Тогда
				Макет.Область(НомСтр, 0, НомСтр, 0).Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для НомСтр = 1 По Макет.ВысотаТаблицы Цикл
			Макет.Область(НомСтр, 0, НомСтр, 0).Видимость = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Скрывает в макете колонки, содержащие области со значеними,
// если такие области не содержат значений в пределах колонки.
//
&НаКлиенте
Процедура УправлениеВидимостьюПустыхКолонок(Макет = Неопределено)
	
	Если Макет = Неопределено Тогда
		Макет = Элементы.ПолеТабличногоДокументаМакет;
	КонецЕсли;
		
	ИндексПервойСтроки = Макет.ВысотаТаблицы + 1;
	ИндексПервойКолонки = Макет.ШиринаТаблицы + 1;
	
	Для НомСтр = 1 по Макет.ВысотаТаблицы Цикл
		Для НомКол = 1 по Макет.ШиринаТаблицы Цикл
			
			ТекОбласть = Макет.Область(НомСтр, НомКол, НомСтр, НомКол);
			
			Если ТипЗнч(ТекОбласть.Расшифровка) = Тип("Структура") тогда
				Если ТекОбласть.Расшифровка.Свойство("Ссылка") тогда
					ИндексПервойСтроки = Мин(ИндексПервойСтроки, НомСтр);
					ИндексПервойКолонки = Мин(ИндексПервойКолонки, НомКол);
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла;
		
	Если Элементы.ФормаНепустыеКолонки.Пометка Тогда
		
		СписокНеЗаполненных = Новый СписокЗначений;
		СписокЗаполненных = Новый СписокЗначений;
				
		Для НомКол = ИндексПервойКолонки по Макет.ШиринаТаблицы Цикл
			Для НомСтр = ИндексПервойСтроки по Макет.ВысотаТаблицы Цикл
						
				ТекОбласть = Макет.Область(НомСтр, НомКол, НомСтр, НомКол);
				
				Если ЗначениеЗаполнено(ТекОбласть.Текст) И ТекОбласть.Текст <> "0" Тогда
					Если СписокЗаполненных.НайтиПоЗначению(НомКол) = Неопределено Тогда
						СписокЗаполненных.Добавить(НомКол);
					КонецЕсли;
				Иначе
					Если СписокНеЗаполненных.НайтиПоЗначению(НомКол) = Неопределено Тогда
						СписокНеЗаполненных.Добавить(НомКол);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
				
		Для НомКол = 1 По Макет.ШиринаТаблицы Цикл
			Если СписокНеЗаполненных.НайтиПоЗначению(НомКол) <> Неопределено И СписокЗаполненных.НайтиПоЗначению(НомКол) = Неопределено Тогда
				Макет.Область(0, НомКол, 0, НомКол).Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для НомКол = 1 По Макет.ШиринаТаблицы Цикл
			Макет.Область(0, НомКол, 0, НомКол).Видимость = Истина;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФакторныйАнализ(Команда)
	
	ВызватьОтчетСценарныйАнализ(,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФакторныйАнализМоделирование(Команда)
		
	ВызватьОтчетСценарныйАнализ(,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОтчетСценарныйАнализ(МассивПоказателей=Неопределено,Моделирование=Ложь) Экспорт
		
	тМакет 							= ЭтаФорма["ПолеТабличногоДокументаМакет"];
	ТекущаяОбластьРасшифровка  		= тМакет.ВыделенныеОбласти[0];
	СтруктураНезаполненыхАналитик 	= Новый Структура;
	СтруктураОтбираемыхАналитик 	= Новый Структура;

	Если НЕ ТекущаяОбластьРасшифровка.Расшифровка  = Неопределено Тогда		
		СтруктураРасшифровки = 	ПолучитьСтруктуруРасшифровки(ТекущаяОбластьРасшифровка.Имя,ТекущаяОбластьРасшифровка.Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик);	
		Если СтруктураРасшифровки.Свойство("ПоказательКод") Тогда
			 КодРесурса = СтруктураРасшифровки.ПоказательКод;
		Иначе	 
			Сообщить(НСтр("ru = 'Необходимо выделить область показателя.'"));
			Возврат;
		КонецЕсли;		
	Иначе	
		Сообщить(НСтр("ru = 'Необходимо выделить область показателя.'"));
		Возврат;
	КонецЕсли;	
	
	Попытка
		ЗначениеЧисло = Число(СтрЗаменить( ?(ТекущаяОбластьРасшифровка.Текст="",0,ТекущаяОбластьРасшифровка.Текст) ," ",""));
	Исключение	  
		Сообщить(НСтр("ru = 'Необходимо выбрать числовое значение.'"));
		Возврат; 
	КонецПопытки;	  
	
	СтруктураПараметров = ПодготовитьПараметрыСценарногоАнализа(СтруктураРасшифровки,ЗначениеЧисло,Моделирование);

	Если СтруктураПараметров = Неопределено Тогда	
		Сообщить(НСтр("ru = 'Недостаточно параметров для вызова факторного анализа.'"));
		Возврат; 	
	КонецЕсли;	
	
	ФормаОтчета  = ПолучитьФорму("Отчет.СценарныйАнализ.Форма.ФормаОтчетаУправляемая", СтруктураПараметров);		
			             	
	Если Моделирование Тогда		
		ФормаОтчета.Заголовок=НСтр("ru = 'Факторный анализ и моделирование'");
		ФормаОтчета.Открыть();								
	Иначе	
		ФормаОтчета.Заголовок=НСтр("ru = 'Сравнительный факторный анализ'");
		ФормаОтчета.Открыть();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыСценарногоАнализа(СтруктураРасшифровки,Значение,Моделирование)
	
	
	РабочийОбъект = РеквизитФормыВЗначение("Объект");
	
	Если НЕ СтруктураРасшифровки.Свойство("ПоказательСсылка") 
		ИЛИ НЕ СтруктураРасшифровки.Свойство("Сценарий") 
		ИЛИ НЕ СтруктураРасшифровки.Свойство("Организация")
		ИЛИ НЕ СтруктураРасшифровки.Свойство("ПериодОтчета")
		Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если СтруктураРасшифровки.Свойство("Проект") И ТипЗнч(СтруктураРасшифровки.Проект) = Тип("СправочникСсылка.Проекты") Тогда
	Иначе	
		 СтруктураРасшифровки.Вставить("Проект",Справочники.Проекты.ПустаяСсылка());
	КонецЕсли;
	
	СтруктураРеквизитов 			= УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(СтруктураРасшифровки.ВидОтчета, СтруктураРасшифровки.Сценарий, СтруктураРасшифровки.Организация, СтруктураРасшифровки.ПериодОтчета);	
    ТекущееПравилоОбработки         = СтруктураРеквизитов.ПравилоОбработки;
	СтруктураКлючевыханалитик       = Новый Структура;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ЗначениеЗаполнено(СтруктураРасшифровки.ВидОтчета["ВидАналитики"+Инд]) Тогда
			Для ИндА = 1 По Инд Цикл
				Если СтруктураРасшифровки.Свойство(СтруктураРасшифровки.ВидОтчета["ВидАналитики"+ИндА].Код) Тогда	
					СтруктураКлючевыханалитик.Вставить("Аналитика"+ИндА,СтруктураРасшифровки[СтруктураРасшифровки.ВидОтчета["ВидАналитики"+ИндА].Код]);
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;		
	КонецЦикла;

		
	ЭкземплярСсылка = Документы.НастраиваемыйОтчет.ПолучитьЭкземплярОтчета(СтруктураРасшифровки.Организация,
	СтруктураРасшифровки.ПериодОтчета,
	СтруктураРасшифровки.Сценарий
	,СтруктураРасшифровки.ВидОтчета,
	,Истина,Истина,,СтруктураРасшифровки.Проект,,СтруктураКлючевыханалитик);

	
	Если ЭкземплярСсылка = Неопределено Тогда
		 Возврат Неопределено;
	КонецЕсли;
	
	ЭкземплярОбъект							=  ЭкземплярСсылка.ПолучитьОбъект();
	ЭкземплярОбъект.ПравилоОбработки 		=  ТекущееПравилоОбработки;
	
	СтруктураПараметров = Новый Структура;	
	
	СтруктураПараметров.Вставить("ВидОтчета",				СтруктураРасшифровки.ВидОтчета);		
	СтруктураПараметров.Вставить("Сценарий", 				СтруктураРасшифровки.Сценарий);
	СтруктураПараметров.Вставить("ПериодОтчета", 			СтруктураРасшифровки.ПериодОтчета);
	СтруктураПараметров.Вставить("ОсновнаяВалюта", 			ВалютаОтображения);
	СтруктураПараметров.Вставить("Организация", 			СтруктураРасшифровки.Организация);
	СтруктураПараметров.Вставить("Проект", 					СтруктураРасшифровки.Проект);
	СтруктураПараметров.Вставить("ДокументСсылка", 			ЭкземплярСсылка);
	СтруктураПараметров.Вставить("ИсходныйПоказатель", 		СтруктураРасшифровки.ПоказательСсылка);
	СтруктураПараметров.Вставить("РежимАнализаЧувствительности", Моделирование);
	СтруктураПараметров.Вставить("ИсходноеЗначениеЦелевого", Значение);
	СтруктураПараметров.Вставить("МаксАналитикОтчета", 0);
		
	тСтруктураРасчета = УправлениеОтчетамиУХ.ПолучитьПараметрыРасчетаПоказателя(СтруктураПараметров,СтруктураРасшифровки.ПоказательСсылка);
	
	ЭкземплярОбъект.ПравилоОбработки =  ТекущееПравилоОбработки;
	
	ЭкземплярОбъект.СформироватьСтруктуруПараметров();
	
	ЭкземплярОбъект.ИнициализироватьКонтекст();
	ЭкземплярОбъект.АнализЧувствительности=Истина;
	
	УправлениеОтчетамиУХ.ПодготовитьДанныеПараметрическойНастройки(ЭкземплярОбъект);

	АдресВременногоХранилища=ПоместитьВоВременноеХранилище(ЭкземплярОбъект.ПодготовитьСтруктуруПеременныхДляРасчета(),Новый УникальныйИдентификатор);
	СтруктураПараметров.Вставить("ИсходныйДокумент", АдресВременногоХранилища);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура СохранитьВЕксель(Команда)
	
	Параметры_ = Новый Структура("ИмяФайла,ИмяЛиста",ВариантСводнойТаблицы,"Лист1");	
	Оповещение = Новый ОписаниеОповещения("СохранитьВЕксельЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.АналитическийБланкСводнаяТаблица.Форма.ДиалогСохраненияВExcel", 
	Параметры_,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВЕксельЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если  Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	

	Попытка
		#Если НЕ ВебКлиент Тогда
						
			Если Результат.СохранятьВФорматеИсточника тогда
				ПолеТабличногоДокументаКопия = ПолеТабличногоДокументаМакет;
			Иначе
				ПолеТабличногоДокументаКопия = Новый ТабличныйДокумент;
				//СоздатьСводнуюТаблицуСКД(Ложь, Ложь, Ложь, ПолеТабличногоДокументаКопия);
			КонецЕсли;
						
			Если Результат.ВыриантСохранения = "НовыйФайл" Тогда
				ПолеТабличногоДокументаКопия.Записать(Результат.Каталог+"\"+Результат.СуществующийФайл+".xlsx",ТипФайлаТабличногоДокумента.XLSX);
			ИначеЕсли 	Результат.ВыриантСохранения = "СуществующийФайл" Тогда
				
				ВремФайл = ПолучитьИмяВременногоФайла("xlsx");
				ПолеТабличногоДокументаКопия.Записать(ВремФайл,ТипФайлаТабличногоДокумента.XLSX);				
				СкопироватьЛист(ВремФайл,Результат.ИмяЛиста,Результат.СуществующийФайл,Результат.ИмяЛиста);	
				
			ИначеЕсли 	Результат.ВыриантСохранения = "СуществующийСеанс" Тогда
				
				Excel = ПолучитьCOMОбъект(Результат.Каталог+"\"+Результат.СуществующийФайл+".xlsx", "Excel.Application"); 
				
			КонецЕсли;
			
			СтрокаШаблона = Нстр("ru = 'Файл %1 успешно записан'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда		
				Сообщить(СтрШаблон(СтрокаШаблона, Результат.Каталог + "\" + Результат.СуществующийФайл));
			КонецЕсли;
			
		#Иначе
			//В режиме ВебКлиент файл на клиенте не сохраняем.
		#КонецЕсли
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ОписаниеОшибки());	
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьЛист(ФайлИсточник,ЛистИсточник,ФайлПриемник,ЛистПриемник)
	
	Excel_Настройки = Неопределено;
	ЕкселПриемник = ОбщегоНазначенияMicrosoftExcelКлиентСерверУХ.Создать(Excel_Настройки);
	Если ЕкселПриемник = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось создать COM-объект Microsoft Excel.'");
	КонецЕсли;
	
	РабочаяКнигаПриемник = ЕкселПриемник.Workbooks.Open(ФайлПриемник);	
	ЕкселПриемник.Visible = Ложь;

	Excel_Настройки = Неопределено;
	ЕкселИсточник = ОбщегоНазначенияMicrosoftExcelКлиентСерверУХ.Создать(Excel_Настройки);
    РабочаяКнигаИсточник = ЕкселПриемник.Workbooks.Open(ФайлИсточник);
	
	
	ЛистШаблона = РабочаяКнигаИсточник.WorkSheets(1); 
	ЛистШаблона.Name =  ЛистПриемник;
	ЛистШаблона.Copy(РабочаяКнигаПриемник.Sheets(1));
	
	РабочаяКнигаПриемник.Save();
	РабочаяКнигаПриемник.Close(-1);
	РабочаяКнигаИсточник.Close(-1);

	
	ЕкселПриемник = Неопределено;
	ЕкселИсточник =Неопределено;
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузитьИзЕкселя(Команда)
	
	Параметры_ = Новый Структура("ИмяФайла,ИмяЛиста",ВариантСводнойТаблицы,"Лист1");	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзЕкселяЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.АналитическийБланкСводнаяТаблица.Форма.ДиалогИмпортаИзExcel", 
	Параметры_,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзЕкселяЗавершение(Результат, ДополнительныеПараметры) Экспорт      
	
	Если  Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	Попытка		
		ЗагрузитьДанныеИзЕкселя(Результат.ИмяКниги,Результат.ИмяЛиста);			
		УстановитьРежимРедактированияДанныхКлиент(Истина);
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ОписаниеОшибки());	
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзЕкселя(ИмяКниги,ИмяЛиста)
	
	Excel_Настройки = Неопределено;
	ЕкселПриемник = ОбщегоНазначенияMicrosoftExcelКлиентСерверУХ.Создать(Excel_Настройки);
	Если ЕкселПриемник = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось создать COM-объект Microsoft Excel.'");
	КонецЕсли;
	
	РабочаяКнигаПриемник = ЕкселПриемник.Workbooks.Open(ИмяКниги);	
	ЛистШаблона = РабочаяКнигаПриемник.WorkSheets(ИмяЛиста); 
	
	МассивСтрок = Новый Массив;
	
	#Если ВебКлиент Тогда
		ЦветКнопки = WebЦвета.Бежевый;
	#Иначе	
		ЦветКнопки = WindowsЦвета.Кнопка; 
	#КонецЕсли	
	
	ПерваяСтрока 	= 0;
	ПерваяКолонка   = 0;
	
	Для мСтрока = 1 По ПолеТабличногоДокументаМакет.ВысотаТаблицы Цикл
		Для мКолонка = 1 По ПолеТабличногоДокументаМакет.ШиринаТаблицы Цикл
			ТекОбластьСТ = ПолеТабличногоДокументаМакет.Область(мСтрока,мКолонка,мСтрока,мКолонка);
			Если НЕ ТекОбластьСТ.Расшифровка = Неопределено И ТекОбластьСТ.Расшифровка.Свойство("Ссылка") Тогда
				 ПерваяСтрока 	= мСтрока;
				 ПерваяКолонка  = мКолонка;
				 Прервать;
			 КонецЕсли;	
		КонецЦикла;
		Если ПерваяСтрока>0 Тогда
			 Прервать;
		КонецЕсли;			
	КонецЦикла;
	
	Для мСтрока = ПерваяСтрока По ПолеТабличногоДокументаМакет.ВысотаТаблицы Цикл
		МассивЗначений = Новый Массив;
		Для мКолонка = ПерваяКолонка По ПолеТабличногоДокументаМакет.ШиринаТаблицы Цикл
			
			ТекОбластьСТ = ПолеТабличногоДокументаМакет.Область(мСтрока,мКолонка,мСтрока,мКолонка);
			Если НЕ ТекОбластьСТ.Расшифровка = Неопределено И ТекОбластьСТ.Расшифровка.Свойство("Ссылка") Тогда
				
				ТекЗначениеЕкскль = ЛистШаблона.Cells(мСтрока,мКолонка);
				Если СокрЛП(ТекЗначениеЕкскль.Text)<> ТекОбластьСТ.Текст Тогда 
					МассивЗначений.Добавить(ТекЗначениеЕкскль.Text);
				Иначе	 
					МассивЗначений.Добавить(ТекОбластьСТ.Text);
				КонецЕсли;
			Иначе	
				МассивЗначений.Добавить(ТекОбластьСТ.Text);
			КонецЕсли;
		КонецЦикла;
		МассивСтрок.Добавить(МассивЗначений);
	КонецЦикла;
	
	РабочаяКнигаПриемник.Close(-1);
	РабочаяОбласть = ПолеТабличногоДокументаМакет.Область(ПерваяСтрока, ПерваяКолонка,
	ПолеТабличногоДокументаМакет.ВысотаТаблицы,ПолеТабличногоДокументаМакет.ШиринаТаблицы);
		
	ВставитьЗначенияСервер(РабочаяОбласть.Имя,МассивСтрок,МассивСтрок);
	
КонецПроцедуры	

&НаСервере
Процедура ВставитьЗначенияСервер(ИмяОбласти,МассивСтрок,МассивЗначений)
	
	ПредставлениеТранзакции = Перечисления.ТранзакцииИзмененияПоказателей.ЗагрузкаИзMSExcel;	
	Обработки.АналитическийБланк.СкопироватьЗначения(ЭтаФорма,ВалютаОтображения,ИмяОбласти,МассивЗначений,,,ПредставлениеТранзакции)
		
КонецПроцедуры

&НаКлиенте
Процедура УправлениеСогласованием(Команда)
	
	Если Не ПроверитьСогласованиеПоРакурсам() Тогда		
		СтрокаШаблона = Нстр("ru = 'В таблице отсутствуют показатели, согласуемые через ракурсы'");		
		Возврат;
	КонецЕсли;	
		
	Оповещение = Новый ОписаниеОповещения("УправлениеСогласованиемЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Обработка.АналитическийБланкСводнаяТаблица.Форма.ФормаУправленияСогласованием", 
	ПодготовитьПараметрыДляВызоваСогласования(),,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаСервере
Функция ПроверитьСогласованиеПоРакурсам()
	
	Для Каждого СтрВО Из тВидыОтчетов Цикл
		
		Если СтрВО.Значение.ОбъектДляСогласованияЗначений = Перечисления.ОбъектыСогласованияЗначенийПоказателейОтчетов.Ракурс Тогда
			 Возврат Истина;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции	

&НаСервере
Функция ПодготовитьПараметрыДляВызоваСогласования()
	
	СтруктураПараметров = Новый Структура;
	
	тСогласуемыеВидыОтчетов = Новый СписокЗначений;
	
	Для Каждого СтрВО Из тВидыОтчетов Цикл
		
		Если СтрВО.Значение.ОбъектДляСогласованияЗначений = Перечисления.ОбъектыСогласованияЗначенийПоказателейОтчетов.Ракурс Тогда
			 тСогласуемыеВидыОтчетов.Добавить(СтрВО.Значение);
		КонецЕсли;	
		
	КонецЦикла;	

	СтруктураПараметров.Вставить("ВидыОтчетов",тСогласуемыеВидыОтчетов);
	СтруктураПараметров.Вставить("ПериодПланированияОтборНачало",ПериодС);
	СтруктураПараметров.Вставить("ПериодПланированияОтборОкончание",ПериодПо);
	
	МассивСценариев = Новый Массив;
	МассивСценариев.Добавить(ЭтаФорма["Сценарий"]);
	
	СтруктураПараметров.Вставить("Организации",тОрганизации.ВыгрузитьЗначения()); 
	СтруктураПараметров.Вставить("Сценарии",МассивСценариев);
	СтруктураПараметров.Вставить("Проекты",тПроекты.ВыгрузитьЗначения());
	
	Возврат СтруктураПараметров;
	
КонецФункции	

&НаКлиенте
Процедура УправлениеСогласованиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = Ложь Тогда
		Возврат;
	КонецЕсли;	
	
	ВывестиСводнуюТаблицу();
		
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьПоПравилу(Команда)
	
	Параметры_ = Новый Структура("ВидыОтчетаОтбор",тВидыОтчетов);	
	Оповещение = Новый ОписаниеОповещения("РассчитатьПоПравилуЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.АналитическийБланкСводнаяТаблица.Форма.ФормаВыбораПравилаОбработки", 
	Параметры_,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоПравилуЗавершение(Результат, ДополнительныеПараметры) Экспорт      
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	РассчитатьПоПравилуСервер(Результат.ПравилоОбработки);	
	ПоказатьПротокол();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПоПравилуСервер(ПравилоОбработки)
	
	РасчитатьПоПравилуОбработки(ПравилоОбработки);
	ВывестиСводнуюТаблицу();	

КонецПроцедуры	

&НаСервере
Процедура РасчитатьПоПравилуОбработки(ПравилоОбработки) Экспорт 
	
	Если ПравилоОбработки = Нстр("ru = 'Заполнить по регламенту'") Тогда	
		ЗаполнитьПоРегламенту();
	ИначеЕсли ПравилоОбработки = Нстр("ru = 'Консолидировать периметр'") Тогда
		КонсолидироватьПериметр();
	Иначе	  //Заполняем по конкретному правилу
		ВерсияРегламента = Неопределено;
		ЗаполнитьПоРегламенту(ПравилоОбработки);
	КонецЕсли;
							
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРегламенту(ПравилоПересчетаЗависимых = Неопределено,ПараметрыЗадания = Неопределено)
	
	Если тПериоды.Количество()= 0 Тогда
		 ЗаполнитьПериоды();
	КонецЕсли;	
	
	Если РасширениеБизнесЛогикиУХ.ИспользоватьРасширенныйРасчет() Тогда	
		
		ОбработкаОбъект = РеквизитФормыВЗначение("РасчетИЗаписьПоказателей"); 
		ОбработкаОбъект.ДанныеДляПересчетаПоказателей.Очистить();
		
		Для Каждого стрВидОтчета Из тВидыОтчетов Цикл		
			
			тДанныеДляПересчета = ПолучитьТаблицуКлючевыхСрезовДляПересчета(стрВидОтчета.Значение);
			Если тДанныеДляПересчета.СписокНезаполненныхОбязательныхСрезов.Количество()>0 Тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(тДанныеДляПересчета.СтрокаНезаполненныхОбязательныхСрезов);	
				Прервать;
			КонецЕсли;
			
			Для Каждого СтрокаДляПересчета Из тДанныеДляПересчета.ТаблицаКлючевыхСрезовДляПересчета Цикл			
				
				Нстрока = ОбработкаОбъект.ДанныеДляПересчетаПоказателей.Добавить();
				Нстрока.Сценарий 			= ЭтаФорма["Сценарий"];
				Нстрока.ВидОтчета           = стрВидОтчета.Значение;
				Нстрока.ПериодОтчета	 	= ПериодС;
				Нстрока.ПериодОкончания	 	= ПериодПо;
				Нстрока.Организация 		= СтрокаДляПересчета.Организация;
				Если Не СтрокаДляПересчета  = Неопределено Тогда
					Нстрока.Проект = СтрокаДляПересчета.Проект;
				КонецЕсли;	
				Для аИнд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
					Если ЗначениеЗаполнено(стрВидОтчета.Значение["ВидАналитики"+аИнд]) Тогда	
						Нстрока["Аналитика"+аИнд] = СтрокаДляПересчета[стрВидОтчета.Значение["ВидАналитики"+аИнд].Код];		
					КонецЕсли;	
				КонецЦикла;								
				
				Если ЗначениеЗаполнено(ПравилоПересчетаЗависимых) Тогда
					Нстрока.ПравилоОбработки 			= ПравилоПересчетаЗависимых;
					Нстрока.СпособФормированияОтчета 	= Перечисления.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки;
				КонецЕсли;					
				
			КонецЦикла;	
		КонецЦикла;	
		
		ОбработкаОбъект.РассчитатьПоДаннымДляПересчета(, Истина); // Данные пишутся сразу в регистры
		
		ЗначениеВРеквизитФормы(ОбработкаОбъект, "РасчетИЗаписьПоказателей");
	
	Иначе	
		
		РасчетПоказателейОбъект 							= Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
		РасчетПоказателейОбъект.РассчитыватьЗависимые 		= Константы.АвтоматическийПересчетЗависимыхПоказателей.Получить();	

		Для Каждого стрВидОтчета Из тВидыОтчетов Цикл		
			
			тДанныеДляПересчета = ПолучитьТаблицуКлючевыхСрезовДляПересчета(стрВидОтчета.Значение);
			Если тДанныеДляПересчета.СписокНезаполненныхОбязательныхСрезов.Количество()>0 Тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(тДанныеДляПересчета.СтрокаНезаполненныхОбязательныхСрезов);	
				Прервать;
			КонецЕсли;
			Для Каждого СтрокаДляПересчета Из тДанныеДляПересчета.ТаблицаКлючевыхСрезовДляПересчета Цикл	
				
				Для Каждого мПериод Из тПериоды Цикл 
					
					Нстрока= РасчетПоказателейОбъект.ДанныеДляПересчетаПоказателей.Добавить();
					Нстрока.ВидОтчета           = стрВидОтчета.Значение;
					Нстрока.ПериодОтчета	 	= мПериод.Значение;
					Нстрока.Организация 		= СтрокаДляПересчета.Организация;
					Если Не СтрокаДляПересчета  = Неопределено Тогда
						Нстрока.Проект = СтрокаДляПересчета.Проект;
					КонецЕсли;	
					Для аИнд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
						Если ЗначениеЗаполнено(стрВидОтчета.Значение["ВидАналитики"+аИнд]) Тогда	
							Нстрока["Аналитика"+аИнд] = СтрокаДляПересчета[стрВидОтчета.Значение["ВидАналитики"+аИнд].Код];		
						КонецЕсли;	
					КонецЦикла;
					
					Нстрока.Сценарий 			= ЭтаФорма["Сценарий"];					
					Нстрока.ОсновнаяВалюта		= ВалютаОтображения;
					
					Если ЗначениеЗаполнено(ПравилоПересчетаЗависимых) Тогда
						Нстрока.ПравилоОбработки 			= ПравилоПересчетаЗависимых;
						Нстрока.СпособФормированияОтчета 	= Перечисления.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки;
					Иначе	
						СоответствиеНастроек = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(стрВидОтчета.Значение,Нстрока.Сценарий,Нстрока.Организация,Нстрока.ПериодОтчета);	
						Если СоответствиеНастроек.Свойство("СпособФормированияОтчета") Тогда
							Нстрока.СпособФормированияОтчета = СоответствиеНастроек.СпособФормированияОтчета;
						КонецЕсли;
						Если СоответствиеНастроек.Свойство("ПравилоОбработки") Тогда
							Нстрока.ПравилоОбработки = СоответствиеНастроек.ПравилоОбработки;
						КонецЕсли;
						
					КонецЕсли;			
					
				КонецЦикла;	
			КонецЦикла;	
		КонецЦикла;	
		
		РасчетПоказателейОбъект.РассчитатьЗначенияПоказателей();
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура КонсолидироватьПериметр()
	                                         	
	РасчетПоказателейОбъект 							= Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
	РасчетПоказателейОбъект.ВидОтчета 					= ВидОтчета;
	РасчетПоказателейОбъект.ВалютаОтображения 			= ВалютаОтображения;
	РасчетПоказателейОбъект.РассчитыватьЗависимые 		= Константы.АвтоматическийПересчетЗависимыхПоказателей.Получить();	
    РасчетПоказателейОбъект.СпособФормированияОтчета 	= Перечисления.СпособыФормированияОтчетов.АвтоматическиКонсолидация;	
					
	Для Каждого стрВидОтчета Из тВидыОтчетов Цикл		
		
		тДанныеДляПересчета = ПолучитьТаблицуКлючевыхСрезовДляПересчета(стрВидОтчета.Значение);
		Если тДанныеДляПересчета.СписокНезаполненныхОбязательныхСрезов.Количество()>0 Тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(тДанныеДляПересчета.СтрокаНезаполненныхОбязательныхСрезов);	
			Прервать;
		КонецЕсли;
		Для Каждого СтрокаДляПересчета Из тДанныеДляПересчета.ТаблицаКлючевыхСрезовДляПересчета Цикл	
			
			Для Каждого мПериод Из тПериоды Цикл 
				
				Нстрока= РасчетПоказателейОбъект.ДанныеДляПересчетаПоказателей.Добавить();
				Нстрока.ВидОтчета           = стрВидОтчета.Значение;
				Нстрока.ПериодОтчета	 	= мПериод.Значение;
				Нстрока.Организация 		= СтрокаДляПересчета.Организация;
				Если Не СтрокаДляПересчета  = Неопределено Тогда
					Нстрока.Проект = СтрокаДляПересчета.Проект;
				КонецЕсли;	
				Для аИнд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
					Если ЗначениеЗаполнено(стрВидОтчета.Значение["ВидАналитики"+аИнд]) Тогда	
						Нстрока["Аналитика"+аИнд] = СтрокаДляПересчета[стрВидОтчета.Значение["ВидАналитики"+аИнд].Код];		
					КонецЕсли;	
				КонецЦикла;
				
				Нстрока.Сценарий 			= ЭтаФорма["Сценарий"];					
				Нстрока.ОсновнаяВалюта		= ВалютаОтображения;

				Нстрока.СпособФормированияОтчета 	= Перечисления.СпособыФормированияОтчетов.АвтоматическиКонсолидация;
				
				СоответствиеНастроек = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(стрВидОтчета.Значение,Нстрока.Сценарий,Нстрока.Организация,Нстрока.ПериодОтчета);	
				Если СоответствиеНастроек.Свойство("ПравилоОбработки") Тогда
					Нстрока.ПравилоОбработки = СоответствиеНастроек.ПравилоОбработки;
				КонецЕсли;
					
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;	


	
	РасчетПоказателейОбъект.РассчитатьЗначенияПоказателей();	
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьТаблицуКлючевыхСрезовДляПересчета(ВидОтчета)

	//Вычисляем все комбинации ключевых аналитик текущего вида отчета, кроме периодов и сценария
	СписокНезаполненныхОбязательныхСрезов = Новый СписокЗначений;
	
	тКлючевыхСрезовДляПересчета = Новый ТаблицаЗначений;
		
	тКлючевыхСрезовДляПересчета.Колонки.Добавить("Проект",,"Проект");
	тКлючевыхСрезовДляПересчета.Колонки.Добавить("Организация",,"Организация");
	РазделениеПоПроектам  = ВидОтчета.РазделениеПоПроектам;
	
	МаксАналитикОтчета = 0;
	Для аИнд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ЗначениеЗаполнено(ВидОтчета["ВидАналитики"+аИнд]) Тогда	
			тКлючевыхСрезовДляПересчета.Колонки.Добавить(ВидОтчета["ВидАналитики"+аИнд].Код,,Строка(ВидОтчета["ВидАналитики"+аИнд]));
			МаксАналитикОтчета = 	МаксАналитикОтчета +1;
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого СтрКолонка Из тКлючевыхСрезовДляПересчета.Колонки цикл
		Если НастройкиРасположенияПолейСводнойТаблицы.НайтиСтроки(Новый Структура("КодПоля",СтрКолонка.Имя)).Количество() = 0 Тогда
			Если  СтрКолонка.Имя = "Проект" Тогда
				Если РазделениеПоПроектам Тогда
					СписокНезаполненныхОбязательныхСрезов.Добавить(СтрКолонка.Имя,СтрКолонка.Заголовок);
				КонецЕсли;
			Иначе	
				СписокНезаполненныхОбязательныхСрезов.Добавить(СтрКолонка.Имя,СтрКолонка.Заголовок);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	СтруктураЗначенийОтборов  	=  Новый Структура;
	тКлючевыхСрезовОтбор		 = тКлючевыхСрезовДляПересчета.СкопироватьКолонки();

	//Заполняем срез значениями быстрых отбров
			
	Для Каждого СтрКолонка Из тКлючевыхСрезовДляПересчета.Колонки цикл			
		Если НастройкиРасположенияПолейСводнойТаблицы.НайтиСтроки(Новый Структура("КодПоля,ОсьТаблицы",СтрКолонка.Имя,Перечисления.ОсиСводнойТаблицы.Отборы)).Количество() = 1 Тогда
			Если тКлючевыхСрезовОтбор.Количество()=0 Тогда
				нтКлючевыхСрезовОтбор = тКлючевыхСрезовОтбор.Добавить();
			Иначе	
				нтКлючевыхСрезовОтбор = тКлючевыхСрезовОтбор[0];
			КонецЕсли;
			
			СтруктураЗначенийОтборов.Вставить(СтрКолонка.Имя);		
			нтКлючевыхСрезовОтбор[СтрКолонка.Имя] = ЭтаФорма[СтрКолонка.Имя];
		КонецЕсли;	
	КонецЦикла;	

	
	СтруктураПолейСтрок       = Новый Структура;
	//Заполняем срез значениями строк 
	Для Каждого СтрКолонка Из тКлючевыхСрезовДляПересчета.Колонки цикл			
		Если НастройкиРасположенияПолейСводнойТаблицы.НайтиСтроки(Новый Структура("КодПоля,ОсьТаблицы",СтрКолонка.Имя,Перечисления.ОсиСводнойТаблицы.Строки)).Количество() = 1 Тогда
			СтруктураПолейСтрок.Вставить(СтрКолонка.Имя);		
		КонецЕсли;	
	КонецЦикла;	

	СтруктураПолейКолонок       = Новый Структура;
	//Заполняем срез значениями колонок 
	Для Каждого СтрКолонка Из тКлючевыхСрезовДляПересчета.Колонки цикл			
		Если НастройкиРасположенияПолейСводнойТаблицы.НайтиСтроки(Новый Структура("КодПоля,ОсьТаблицы",СтрКолонка.Имя,Перечисления.ОсиСводнойТаблицы.Колонки)).Количество() = 1 Тогда
			СтруктураПолейКолонок.Вставить(СтрКолонка.Имя);		
		КонецЕсли;	
	КонецЦикла;	

	//Соберем все значения ключей в строках
	тКлючевыхСрезовСтрока = тКлючевыхСрезовДляПересчета.СкопироватьКолонки();
	Если СтруктураПолейСтрок.Количество()>0 Тогда
		Если ЗначениеЗаполнено(ОбъектАналитическогоБланка.СтруктураРасшифровкаОбластейYАдрес) Тогда 
			СтруктураРасшифровкаОбластейY		    = ПолучитьИзВременногоХранилища(ОбъектАналитическогоБланка.СтруктураРасшифровкаОбластейYАдрес);
			Для Каждого СтрКлюч Из СтруктураРасшифровкаОбластейY Цикл
				Для Каждого СтрЗначение Из СтрКлюч.Значение Цикл		
					ЭтоИтог = Ложь;
					Для Каждого СтрПоле Из СтруктураПолейСтрок Цикл	
						Если  (СтрЗначение[СтрПоле.Ключ]) = Неопределено Тогда
							ЭтоИтог = Истина;
							Прервать;		
						КонецЕсли;	
					КонецЦикла;
					Если Не ЭтоИтог Тогда
						нтКлючевыхСрезовСтрока = тКлючевыхСрезовСтрока.Добавить();
						Для Каждого СтрПоле Из СтруктураПолейСтрок Цикл		
							нтКлючевыхСрезовСтрока[СтрПоле.Ключ] = СтрЗначение[СтрПоле.Ключ];
						КонецЦикла;	
					КонецЕсли;		
				КонецЦикла;		
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;	
	
	//Соберем все значения ключей в Колонках
	тКлючевыхСрезовКолонка = тКлючевыхСрезовДляПересчета.СкопироватьКолонки();
	Если СтруктураПолейКолонок.Количество()>0 Тогда
		Если ЗначениеЗаполнено(ОбъектАналитическогоБланка.СтруктураРасшифровкаОбластейХАдрес) Тогда 
			СтруктураРасшифровкаОбластейХ		    = ПолучитьИзВременногоХранилища(ОбъектАналитическогоБланка.СтруктураРасшифровкаОбластейХАдрес);
			Для Каждого СтрКлюч Из СтруктураРасшифровкаОбластейХ Цикл
				Для Каждого СтрЗначение Из СтрКлюч.Значение Цикл		
					ЭтоИтог = Ложь;
					Для Каждого СтрПоле Из СтруктураПолейКолонок Цикл	
						Если  (СтрЗначение[СтрПоле.Ключ]) = Неопределено Тогда
							ЭтоИтог = Истина;
							Прервать;		
						КонецЕсли;	
					КонецЦикла;
					Если Не ЭтоИтог Тогда
						нтКлючевыхСрезовКолонка = тКлючевыхСрезовКолонка.Добавить();
						Для Каждого СтрПоле Из СтруктураПолейКолонок Цикл				
							нтКлючевыхСрезовКолонка[СтрПоле.Ключ] = СтрЗначение[СтрПоле.Ключ];
						КонецЦикла;	
					КонецЕсли;		
				КонецЦикла;			
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;	

	
	тВнутреннеСоединениеТаблиц = Новый ТаблицаЗначений;
	тВнутреннеСоединениеТаблиц.Колонки.Добавить("ИмяТаблицы");
    тВнутреннеСоединениеТаблиц.Колонки.Добавить("КоличествоСтрок");
    тВнутреннеСоединениеТаблиц.Колонки.Добавить("Таблица");
    тВнутреннеСоединениеТаблиц.Колонки.Добавить("ПоляТаблицы");
	
	нтВнутреннеСоединениеТаблиц 					= тВнутреннеСоединениеТаблиц.Добавить();
	нтВнутреннеСоединениеТаблиц.ИмяТаблицы          = "тКлючевыхСрезовОтбор";
	нтВнутреннеСоединениеТаблиц.КоличествоСтрок     = тКлючевыхСрезовОтбор.Количество();
    нтВнутреннеСоединениеТаблиц.Таблица     		= тКлючевыхСрезовОтбор;
   	нтВнутреннеСоединениеТаблиц.ПоляТаблицы     	= СтруктураЗначенийОтборов;

	нтВнутреннеСоединениеТаблиц 					= тВнутреннеСоединениеТаблиц.Добавить();
	нтВнутреннеСоединениеТаблиц.ИмяТаблицы          = "тКлючевыхСрезовСтрока";
	нтВнутреннеСоединениеТаблиц.КоличествоСтрок     = тКлючевыхСрезовСтрока.Количество();
    нтВнутреннеСоединениеТаблиц.Таблица     		= тКлючевыхСрезовСтрока;
    нтВнутреннеСоединениеТаблиц.ПоляТаблицы     	= СтруктураПолейСтрок;

	нтВнутреннеСоединениеТаблиц 					= тВнутреннеСоединениеТаблиц.Добавить();
	нтВнутреннеСоединениеТаблиц.ИмяТаблицы          = "тКлючевыхСрезовКолонка";
	нтВнутреннеСоединениеТаблиц.КоличествоСтрок     = тКлючевыхСрезовКолонка.Количество();
    нтВнутреннеСоединениеТаблиц.Таблица    			= тКлючевыхСрезовКолонка;
    нтВнутреннеСоединениеТаблиц.ПоляТаблицы     	= СтруктураПолейКолонок;
		
	тВнутреннеСоединениеТаблиц.Сортировать("КоличествоСтрок УБЫВ");
	
	тКлючевыхСрезовИтог = тКлючевыхСрезовДляПересчета.СкопироватьКолонки();

	//Если нет незаполненных ключевых аналитик, соберем финальную таблицу для пересчета из всех комбинаций строк, колонок, отборов
	Если СписокНезаполненныхОбязательныхСрезов.Количество() = 0 Тогда 	
		Для Каждого СтрТаблица1 Из тВнутреннеСоединениеТаблиц[0].Таблица Цикл
			
			Если тВнутреннеСоединениеТаблиц[1].КоличествоСтрок = 0 Тогда
				нтКлючевыхСрезов = тКлючевыхСрезовИтог.Добавить();
				Для Каждого СтрПоле Из тВнутреннеСоединениеТаблиц[0].ПоляТаблицы Цикл				
					нтКлючевыхСрезов[СтрПоле.Ключ] = СтрТаблица1[СтрПоле.Ключ];
				КонецЦикла;		
			КонецЕсли;	
			
			Для Каждого СтрТаблица2 Из тВнутреннеСоединениеТаблиц[1].Таблица Цикл
				
				Если тВнутреннеСоединениеТаблиц[2].КоличествоСтрок = 0 Тогда
					нтКлючевыхСрезов = тКлючевыхСрезовИтог.Добавить();
					Для Каждого СтрПоле Из тВнутреннеСоединениеТаблиц[0].ПоляТаблицы Цикл				
						нтКлючевыхСрезов[СтрПоле.Ключ] = СтрТаблица1[СтрПоле.Ключ];
					КонецЦикла;	
					Для Каждого СтрПоле Из тВнутреннеСоединениеТаблиц[1].ПоляТаблицы Цикл				
						нтКлючевыхСрезов[СтрПоле.Ключ] = СтрТаблица2[СтрПоле.Ключ];
					КонецЦикла;	
				КонецЕсли;	
				
				Для Каждого СтрТаблица3 Из тВнутреннеСоединениеТаблиц[2].Таблица Цикл
					нтКлючевыхСрезов = тКлючевыхСрезовИтог.Добавить();
					Для Каждого СтрПоле Из тВнутреннеСоединениеТаблиц[0].ПоляТаблицы Цикл				
						нтКлючевыхСрезов[СтрПоле.Ключ] = СтрТаблица1[СтрПоле.Ключ];
					КонецЦикла;	
					Для Каждого СтрПоле Из тВнутреннеСоединениеТаблиц[1].ПоляТаблицы Цикл				
						нтКлючевыхСрезов[СтрПоле.Ключ] = СтрТаблица2[СтрПоле.Ключ];
					КонецЦикла;	
					Для Каждого СтрПоле Из тВнутреннеСоединениеТаблиц[2].ПоляТаблицы Цикл				
						нтКлючевыхСрезов[СтрПоле.Ключ] = СтрТаблица3[СтрПоле.Ключ];
					КонецЦикла;	
					
				КонецЦикла;		
			КонецЦикла;
		КонецЦикла;	
	КонецЕсли;
	
	СтрокаСвертки = "";
	Для Каждого СтрКолонка Из тКлючевыхСрезовДляПересчета.Колонки цикл
		СтрокаСвертки = СтрокаСвертки+","+СтрКолонка.Имя;
	КонецЦикла;
	
	тКлючевыхСрезовИтог.Свернуть(СтрокаСвертки);
	
	СтрокаНезаполненныхОбязательныхСрезов =Нстр("ru = 'В таблице не определены следующие обязательные ключевые аналитики: '");
	Для Каждого Стр Из СписокНезаполненныхОбязательныхСрезов цикл
		СтрокаНезаполненныхОбязательныхСрезов = СтрокаНезаполненныхОбязательныхСрезов+","+Стр.Представление;
	КонецЦикла;
    СтрокаШаблона = Нстр("ru = '. Заполнение вида отчета %1 отменено'");
	СтрокаНезаполненныхОбязательныхСрезов = СтрокаНезаполненныхОбязательныхСрезов+СтрШаблон(СтрокаШаблона,Строка(ВидОтчета));

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("СписокНезаполненныхОбязательныхСрезов",СписокНезаполненныхОбязательныхСрезов);
	СтруктураОтвета.Вставить("ТаблицаКлючевыхСрезовДляПересчета",тКлючевыхСрезовИтог);
	СтруктураОтвета.Вставить("СтрокаНезаполненныхОбязательныхСрезов",СтрокаНезаполненныхОбязательныхСрезов);

	
	Возврат СтруктураОтвета;
		
КонецФункции

&НаКлиенте
Процедура КопированиеДанных(Команда)
	
	Параметры_ = Новый Структура;	
	Параметры_.Вставить("тПоказатели",ПолучитьТекущиеПоказатели());
	Параметры_.Вставить("ПериодПланированияОтборНачало",ПериодС);
	Параметры_.Вставить("ПериодПланированияОтборОкончание",ПериодПо);
	Параметры_.Вставить("Сценарий",ЭтаФорма["Сценарий"]);
	//Параметры_.Вставить("АдресСтруктураФильтров",Объект.АдресСтруктураФильтров);
	
	Оповещение = Новый ОписаниеОповещения("КопированиеИПереносЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.КопированиеПоСрезам.Форма.Форма", 
	Параметры_,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура КопированиеИПереносЗавершение(Результат, ДополнительныеПараметры) Экспорт      
	
	Если Результат = Неопределено ИЛИ Результат = Ложь Тогда
		Возврат;
	КонецЕсли;	
	
	ВывестиСводнуюТаблицу();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекущиеПоказатели()
	
	СтрокиОтчетаМассив 	= НастройкиСоставаСтрокСводнойТаблицы.Выгрузить().ВыгрузитьКолонку("СтрокаОтчета");
	КолонкиОтчетаМассив = НастройкиСоставаКолонокСводнойТаблицы.Выгрузить().ВыгрузитьКолонку("КолонкаОтчета");
	текПоказатели 		= Обработки.АналитическийБланкСводнаяТаблица.ПолучитьТаблицуПоказателейВидаОтчета(СтрокиОтчетаМассив,КолонкиОтчетаМассив);
	
	Возврат текПоказатели.ВыгрузитьКолонку("Ссылка");
	
КонецФункции	

&НаСервере
Процедура ОбновитьПометкуКомандЗависимогоОбновленияЯчеек()
	
	Элементы.ВычислятьАвтоматически.Пометка = Ложь;
	Элементы.РучнойПересчет.Пометка 		= Ложь;
	
	Если ПараметрыКонтекстногоОбновленияЗависимыхЯчеек = Перечисления.ПараметрыКонтекстногоОбновленияЗависимыхЯчеек.АвтоматическиВсе Тогда
		Элементы.ВычислятьАвтоматически.Пометка = Истина;
	ИначеЕсли ПараметрыКонтекстногоОбновленияЗависимыхЯчеек = Перечисления.ПараметрыКонтекстногоОбновленияЗависимыхЯчеек.Вручную Тогда
		Элементы.РучнойПересчет.Пометка = Истина;
	КонецЕсли;	
		
КонецПроцедуры


#КонецОбласти

#Область РаботаСВариантамиТаблицы

&НаКлиенте
Процедура СохранитьВариантТаблицы(Команда)
	
	Если Не ЗначениеЗаполнено(ВариантСводнойТаблицы) Тогда
		СохранитьВариантТаблицыКак(Неопределено);
	ИначеЕсли  ЗначениеЗаполнено(Бланк) 
			 И  ЗначениеЗаполнено(ВариантСводнойТаблицы)
			 И ЭтоОсновнойВариант(ВариантСводнойТаблицы) Тогда
	    СохранитьВариантТаблицыКак(Неопределено);
	Иначе		
		СохранитьНастройкиТекущегоВарианта();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВариантТаблицыКак(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ДобавлениеВариантаНастройкиЗавершение", ЭтаФорма);
	Параметры_ = Новый Структура("ИмяТекущегоВарианта,Бланк",ВариантСводнойТаблицы,Бланк);
	ОткрытьФорму("Обработка.АналитическийБланкСводнаяТаблица.Форма.ФормаДиалогаСохраненияНастройки",Параметры_,ЭтаФорма,Истина,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеВариантаНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт      
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	СохранитьНастройкиТекущегоВарианта(Результат.НовыйВариант);
				
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиТекущегоВарианта(НовыйВариант = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
		
	Если Не НовыйВариант = Неопределено Тогда		
		ВариантСводнойТаблицы  			= НовыйВариант;	
		СформироватьЗаголовокФормы();
	КонецЕсли;	
	
	Если РежимДоступаКФункциямСводнойТаблицы = Перечисления.РежимыДоступаКФункциямСводнойТаблицы.РаботаСДанными Тогда
		Если ВариантСводнойТаблицы.ОсновнойВариант Тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = ' Запись отменена. Текущий вариант является основным. Выберите другой вариант для сохранения настроек. '"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//Настройки состава строк
	регНастройкиСоставаСтрокСводнойТаблицы = РегистрыСведений.НастройкиСоставаСтрокСводнойТаблицы.СоздатьНаборЗаписей();
	регНастройкиСоставаСтрокСводнойТаблицы.Отбор.ВариантСводнойТаблицы.Установить(ВариантСводнойТаблицы);
	
	Для Каждого СтрЗапись Из НастройкиСоставаСтрокСводнойТаблицы Цикл   
		СтрЗапись.ВариантСводнойТаблицы = ВариантСводнойТаблицы;   
	КонецЦикла;	   
	
	регНастройкиСоставаСтрокСводнойТаблицы.Загрузить(НастройкиСоставаСтрокСводнойТаблицы.Выгрузить());
	регНастройкиСоставаСтрокСводнойТаблицы.Записать(Истина);
	
	
	//Настройки состава колонок
	регНастройкиСоставаКолонокСводнойТаблицы = РегистрыСведений.НастройкиСоставаКолонокСводнойТаблицы.СоздатьНаборЗаписей();
	регНастройкиСоставаКолонокСводнойТаблицы.Отбор.ВариантСводнойТаблицы.Установить(ВариантСводнойТаблицы);
	
	Для Каждого СтрЗапись Из НастройкиСоставаКолонокСводнойТаблицы Цикл   
		СтрЗапись.ВариантСводнойТаблицы = ВариантСводнойТаблицы;   
	КонецЦикла;	   
	
	регНастройкиСоставаКолонокСводнойТаблицы.Загрузить(НастройкиСоставаКолонокСводнойТаблицы.Выгрузить());
	регНастройкиСоставаКолонокСводнойТаблицы.Записать(Истина);
	
	//Настройки расположения измерений
	регНастройкиРасположенияПолейСводнойТаблицы = РегистрыСведений.НастройкиРасположенияПолейСводнойТаблицы.СоздатьНаборЗаписей();
	регНастройкиРасположенияПолейСводнойТаблицы.Отбор.ВариантСводнойТаблицы.Установить(ВариантСводнойТаблицы);
	
	Для Каждого СтрЗапись Из НастройкиРасположенияПолейСводнойТаблицы Цикл   
		СтрЗапись.ВариантСводнойТаблицы = ВариантСводнойТаблицы;   
	КонецЦикла;	   
	
	регНастройкиРасположенияПолейСводнойТаблицы.Загрузить(НастройкиРасположенияПолейСводнойТаблицы.Выгрузить());
	регНастройкиРасположенияПолейСводнойТаблицы.Записать(Истина);
	
	//Настройки шкалы периодов 
	регНастройкиПериодовСводнойТаблицы = РегистрыСведений.НастройкиПериодовСводнойТаблицы.СоздатьНаборЗаписей();
	регНастройкиПериодовСводнойТаблицы.Отбор.ВариантСводнойТаблицы.Установить(ВариантСводнойТаблицы);
	
	Для Каждого СтрЗапись Из НастройкиПериодовСводнойТаблицы Цикл   
		СтрЗапись.ВариантСводнойТаблицы = ВариантСводнойТаблицы;   
	КонецЦикла;	   
	
	регНастройкиПериодовСводнойТаблицы.Загрузить(НастройкиПериодовСводнойТаблицы.Выгрузить());
	регНастройкиПериодовСводнойТаблицы.Записать(Истина);
	
	//Настройки свойств вывода измерений 
	регНастройкиПолейСводнойТаблицы = РегистрыСведений.НастройкиПолейСводнойТаблицы.СоздатьНаборЗаписей();
	регНастройкиПолейСводнойТаблицы.Отбор.ВариантСводнойТаблицы.Установить(ВариантСводнойТаблицы);
	
	Для Каждого СтрЗапись Из НастройкиПолейСводнойТаблицы Цикл   
		СтрЗапись.ВариантСводнойТаблицы = ВариантСводнойТаблицы;   
	КонецЦикла;	   
	
	регНастройкиПолейСводнойТаблицы.Загрузить(НастройкиПолейСводнойТаблицы.Выгрузить());
	регНастройкиПолейСводнойТаблицы.Записать(Истина);

	//Настройки прочих свойств текущего варианта  
	регНастройкиВариантаСводнойТаблицы = РегистрыСведений.НастройкиВариантаСводнойТаблицы.СоздатьНаборЗаписей();
	регНастройкиВариантаСводнойТаблицы.Отбор.ВариантСводнойТаблицы.Установить(ВариантСводнойТаблицы);
	
	Для Каждого СтрЗапись Из НастройкиВариантаСводнойТаблицы Цикл   
		СтрЗапись.ВариантСводнойТаблицы = ВариантСводнойТаблицы;   
	КонецЦикла;	   
	
	регНастройкиВариантаСводнойТаблицы.Загрузить(НастройкиВариантаСводнойТаблицы.Выгрузить());
	регНастройкиВариантаСводнойТаблицы.Записать(Истина);

	//Сохранияем настройки макета, если есть
	Если   ЗначениеЗАполнено(СтруктураНастроекАналитическогоБланкаАдрес)  Тогда
		
		СтруктураНастроек = ПолучитьИзВременногоХранилища(СтруктураНастроекАналитическогоБланкаАдрес);
		//Обработки.АналитическийБланк.ЗаписатьНастройкиАналитическогоБланка(ПолеТабличногоДокументаМакет,МакетДляВыводаПоказателей,Приемник,ОбъектАБ,Отказ);
		
		текНаборЗаписей = РегистрыСведений.КэшГруппОтборовПоказателей.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Загрузить(СтруктураНастроек.КэшГруппОтборовПоказателей);
		Для Каждого Стр Из текНаборЗаписей Цикл
			Стр.Бланк = ВариантСводнойТаблицы;
		КонецЦикла;	
		текНаборЗаписей.Записать(Истина);
		
		текНаборЗаписей = РегистрыСведений.РасшифровкаГруппОтборов.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Загрузить(СтруктураНастроек.РасшифровкаГруппОтборов);
		Для Каждого Стр Из текНаборЗаписей Цикл
			Стр.Бланк = ВариантСводнойТаблицы;
		КонецЦикла;	
		текНаборЗаписей.Записать(Истина);

		текНаборЗаписей = РегистрыСведений.КэшРаскрываемыхОбластей.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Загрузить(СтруктураНастроек.КэшРаскрываемыхОбластей);
		Для Каждого Стр Из текНаборЗаписей Цикл
			Стр.Бланк = ВариантСводнойТаблицы;
		КонецЦикла;	
		текНаборЗаписей.Записать(Истина);

		текНаборЗаписей = РегистрыСведений.НастройкиРаскрываемыхОбластей.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Загрузить(СтруктураНастроек.НастройкиРаскрываемыхОбластей);
		Для Каждого Стр Из текНаборЗаписей Цикл
			Стр.Бланк = ВариантСводнойТаблицы;
		КонецЦикла;	
		текНаборЗаписей.Записать(Истина);

		текНаборЗаписей = РегистрыСведений.НастройкиТаблицРаскрываемыхОбластей.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Загрузить(СтруктураНастроек.НастройкиТаблицРаскрываемыхОбластей);
		Для Каждого Стр Из текНаборЗаписей Цикл
			Стр.Бланк = ВариантСводнойТаблицы;
		КонецЦикла;	
		текНаборЗаписей.Записать(Истина);

			
		текНаборЗаписей = РегистрыСведений.РасшифровкаФормулОбластейПоказателей.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		тТаблица  = СтруктураНастроек.РасшифровкаФормулОбластейПоказателей;
		тТаблица.Свернуть("УидФормулы,УидГруппыОтборов,Показатель,ИндексПоказателя,ВидОтчета,ВидОтчетаКод,ПоказательКод,ИмяВФормуле");
		текНаборЗаписей.Загрузить(тТаблица);
		Для Каждого Стр Из текНаборЗаписей Цикл
			Стр.Бланк = ВариантСводнойТаблицы;
		КонецЦикла;	
		текНаборЗаписей.Записать(Истина);
		
		текНаборЗаписей = РегистрыСведений.КэшИменОбластейПоказателей.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Загрузить(СтруктураНастроек.КэшИменОбластейПоказателей);
		Для Каждого Стр Из текНаборЗаписей Цикл
			Стр.Бланк = ВариантСводнойТаблицы;
		КонецЦикла;	
		текНаборЗаписей.Записать(Истина);
	
		текНаборЗаписей = РегистрыСведений.КэшИменФормул.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Загрузить(СтруктураНастроек.КэшИменФормул);
		Для Каждого Стр Из текНаборЗаписей Цикл
			Стр.Бланк = ВариантСводнойТаблицы;
		КонецЦикла;	
		текНаборЗаписей.Записать(Истина);

		текНаборЗаписей = РегистрыСведений.КэшФормулОбластейПоказателей.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Загрузить(СтруктураНастроек.КэшФормулОбластейПоказателей);
		Для Каждого Стр Из текНаборЗаписей Цикл
			Стр.Бланк = ВариантСводнойТаблицы;
		КонецЦикла;	
		текНаборЗаписей.Записать(Истина);
			
		текНаборЗаписей = РегистрыСведений.НастройкиАналитическихБланков.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ВариантСводнойТаблицы);
		текНаборЗаписей.Очистить();
		нЗапись  									= текНаборЗаписей.Добавить();
		нЗапись.Бланк								= ВариантСводнойТаблицы;
		нЗапись.ХранилищеДополнительныхНастроек 	= Новый ХранилищеЗначения(СтруктураНастроек.НастройкиАналитическихБланков);
		текНаборЗаписей.Записать(Истина);
		
			
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим (Ложь);
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьНастройкиВариантаСводнойТаблицыАдрес()
	
	Возврат ПоместитьВоВременноеХранилище(НастройкиВариантаСводнойТаблицы.Выгрузить(),ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоОсновнойВариант(ВариантСводнойТаблицы)
	
	Возврат ВариантСводнойТаблицы.ОсновнойВариант;
	
КонецФункции


#КонецОбласти

#Область РаботаСПанельюДополнительныхОтборов

&НаКлиенте
Процедура НастройкиОтборовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные.ПолеПредставление = "Отбор" Тогда  //Первая строка дерева служебная.
		 СтандартнаяОбработка = Ложь;
		 Возврат;
	КонецЕсли;	
	
	Если Поле.Имя = "НастройкиОтборовПолеПредставление" Тогда    //Открываем форму выбора поля
		
		СтандартнаяОбработка = Ложь;
		
		Параметры_ = Новый Структура("СКДТекущегоПоляАдрес,АналитикаСубконто",СКДПолейОтборовАдрес,Элемент.ТекущиеДанные.ПолеКод);	
		Оповещение = Новый ОписаниеОповещения("ВыборАналитикиОтборЗавершение", ЭтаФорма);	
		ОткрытьФорму("Обработка.АналитическийБланкСводнаяТаблица.Форма.ФормаВыбораПоляКД", 
		Параметры_,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		
	ИначеЕсли Поле.Имя = "НастройкиОтборовВидСравнения" Тогда	 //Открываем доступный список выбора
		
		ВидСравненияКэш = Элемент.ТекущиеДанные.ВидСравнения;
		Элементы.НастройкиОтборовВидСравнения.СписокВыбора.ЗагрузитьЗначения(Элемент.ТекущиеДанные.ДоступныеЗначенияВыбора.ВыгрузитьЗначения());
				
	ИначеЕсли Поле.Имя = "НастройкиОтборовЗначениеОтбора" Тогда	 //Типизируем доступное для редактирования значение
		
		АналитическийБланкУХКлиент.ОбновитьТипВыбранногоЗначения(ЭтаФорма,Элемент);
		 		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ВыборАналитикиОтборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	 
	нЭлементИндекс = Элементы.НастройкиОтборов.ТекущаяСтрока;
	нЭлемент       = НастройкиОтборов.НайтиПоИдентификатору(нЭлементИндекс);
	
	Если  Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Если Не ЗначениеЗаполнено(нЭлемент.ПолеКод) Тогда
			НастройкиОтборов.ПолучитьЭлементы()[0].ПолучитьЭлементы().Удалить(нЭлемент);
		КонецЕсли;	
		Возврат;
	КонецЕсли;	
		
	ПолучитьФиктивноеПолеКД(Результат);
	
	ПолеСКД =  СТ_ДополнительныеНастройкиФиктивныхПолей.Настройки.ДоступныеПоляОтбора.Элементы.Найти("ФиктивноеПоле_"+СтрЗаменить(Строка(Результат.Поле),".","_"));
	
	нЭлемент.ПолеПредставление 	= Результат.Заголовок;
	нЭлемент.ПолеКод 			= Строка(Результат.Поле);
	нЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	нЭлемент.РежимОтбора        = ПредопределенноеЗначение("Перечисление.РежимыОтборовАналитическихТаблиц.Данные");
	нЭлемент.ТипЗначения        = Результат.ТипЗначения;
	нЭлемент.ДоступныеЗначенияВыбора.ЗагрузитьЗначения(ПолеСКД.ДоступныеВидыСравнения.ВыгрузитьЗначения());
	
	Элементы.НастройкиОтборов.ТекущиеДанные.ЗначениеОтбора = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьФиктивноеПолеКД(Результат)
	
	СКДПолейОтборов = ПолучитьОбщийМакет("МакетНастройкиОтборов");
		
	НП =  СКДПолейОтборов.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НП.Заголовок 			= Результат.Заголовок;
	НП.ПутьКДанным 			= "ФиктивноеПоле_"+СтрЗаменить(Строка(Результат.Поле),".","_");	
	НП.ТипЗначения 			= Результат.ТипЗначения;
	НП.Поле 				= "ФиктивноеПоле_"+СтрЗаменить(Строка(Результат.Поле),".","_");	

	СКДФиктивныхПолейОтборовАдрес = ПоместитьВоВременноеХранилище(СКДПолейОтборов, ЭтаФорма.УникальныйИдентификатор);
	СТ_ДополнительныеНастройкиФиктивныхПолей.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКДФиктивныхПолейОтборовАдрес));
	
КонецПроцедуры	

&НаКлиенте
Процедура НастройкиОтборовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	НовыйЭлемент                 = НастройкиОтборов.ПолучитьЭлементы()[0].ПолучитьЭлементы().Добавить();
	ИдентификаторЭлемента        = НовыйЭлемент.ПолучитьИдентификатор();
	Элементы.НастройкиОтборов.ТекущаяСтрока  = ИдентификаторЭлемента;
	
	Параметры_ = Новый Структура("СКДТекущегоПоляАдрес,АналитикаСубконто",СКДПолейОтборовАдрес,Элемент.ТекущиеДанные.ПолеКод);	
	Оповещение = Новый ОписаниеОповещения("ВыборАналитикиОтборЗавершение", ЭтаФорма);	
	ОткрытьФорму("Обработка.АналитическийБланкСводнаяТаблица.Форма.ФормаВыбораПоляКД", 
	Параметры_,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОтборовПриИзменении(Элемент)
	
	АналитическийБланкУХКлиент.НастройкиОтборовПриИзменении(ЭтаФорма,ВидСравненияКэш,Элемент);
    УстановитьСостояниеНеИспользовать(НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));	 

КонецПроцедуры

&НаКлиенте
Процедура НастройкиОтборовПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.ПолеПредставление = "Отбор" Тогда
		 Отказ = Истина;
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Функция ПодготовитьТаблицуОтборов(); 
	
	тРасшифровкаОтборов = Новый ТаблицаЗначений;
	
	тДеревоОтборов      = РеквизитФормыВЗначение("НастройкиОтборов");
	Для Каждого СтрОтборКолонка Из тДеревоОтборов.Колонки Цикл
		тРасшифровкаОтборов.Колонки.Добавить(СтрОтборКолонка.Имя,СтрОтборКолонка.ТипЗначения);	
	КонецЦикла;	
	
	тРасшифровкаОтборов.Колонки.Добавить("ИдентификаторСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));	
	тРасшифровкаОтборов.Колонки.Добавить("ИдентификаторРодителя",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));	
	
	ИдентификаторСтроки = 1;
	
	тБыстрыеОтборы   = НастройкиРасположенияПолейСводнойТаблицы.НайтиСтроки(Новый Структура("ОсьТаблицы",Перечисления.ОсиСводнойТаблицы.Отборы));
	
	Для Каждого тБыстрыйОтбор Из тБыстрыеОтборы Цикл
		
		нСтр = тРасшифровкаОтборов.Добавить();
        нСтр.ИдентификаторСтроки = ИдентификаторСтроки;
        нСтр.ПолеПредставление   = тБыстрыйОтбор.ПредставлениеПоля;
		нСтр.ПолеКод   			 = тБыстрыйОтбор.КодПоля;
        нСтр.ВидСравнения   	 = ВидСравненияКомпоновкиДанных.Равно;
        нСтр.Использовать        = Истина;
		нСтр.РежимОтбора         = Перечисления.РежимыОтборовАналитическихТаблиц.Данные;
		
		МассивТиповСтрока 		= СтрРазделить(тБыстрыйОтбор.ТипСтрока,"|");
		МассивТипов             = Новый Массив;
		Для Каждого СтрТип Из МассивТиповСтрока Цикл
			МассивТипов.Добавить(Тип(СтрТип));
		КонецЦикла;	
		
		нСтр.ТипЗначения 		= Новый ОписаниеТипов(МассивТипов);
        нСтр.ЗначениеОтбора     = ЭтаФорма[нСтр.ПолеКод];
			
	КонецЦикла;	
	
	Для Каждого СтрЭлемент Из НастройкиОтборов.ПолучитьЭлементы()[0].ПолучитьЭлементы() Цикл
		
		нСтр = тРасшифровкаОтборов.Добавить();
		ЗаполнитьЗначенияСвойств(нСтр,СтрЭлемент);	
		нСтр.ИдентификаторСтроки = ИдентификаторСтроки;	
		ИдентификаторСтроки = ИдентификаторСтроки+1;
		
	КонецЦикла;	
	
	Возврат тРасшифровкаОтборов;
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьДеревоОтборов()
	
	НастройкиОтборовДерево = РеквизитФормыВЗначение("НастройкиОтборов"); 
	Если НастройкиОтборовДерево.Строки.Количество() = 0 Тогда   			
		//Первая инициализация доп отборов
		ПервыйЭлемент =  НастройкиОтборовДерево.Строки.Добавить();
		ПервыйЭлемент.ПолеПредставление = "Отбор";
		
		Для Каждого СтрПолеОтбор Из СТ_ДополнительныеНастройки.Настройки.Отбор.Элементы Цикл
			
			ПолеСКД =  СТ_ДополнительныеНастройки.Настройки.ДоступныеПоляОтбора.Элементы.Найти(СтрПолеОтбор.ЛевоеЗначение);
			нЭлемент 					= ПервыйЭлемент.Строки.Добавить();
			нЭлемент.ПолеПредставление 	= ПолеСКД.Заголовок;
			нЭлемент.ПолеКод 			= ПолеСКД.Поле;
			нЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
			нЭлемент.РежимОтбора        = Перечисления.РежимыОтборовАналитическихТаблиц.Данные;
			нЭлемент.ТипЗначения        = ПолеСКД.ТипЗначения;
			нЭлемент.ДоступныеЗначенияВыбора.ЗагрузитьЗначения(ПолеСКД.ДоступныеВидыСравнения.ВыгрузитьЗначения())
			
		КонецЦикла;	
			
	Иначе	
		
		МассивУдаляемыхОтборов = Новый Массив;
		МассивПолейОтборов     = Новый Массив;
		//Удаляем отборы, которые потеряли смысл в ноовм составе настроек
		Для Каждого ЭлементДереваОтборов Из НастройкиОтборовДерево.Строки[0].Строки Цикл 
			
			//Вычислим базовое поле  отбора без точек.
			БазовоеПоле  = ?(СтрНайти(ЭлементДереваОтборов.ПолеКод,".")>0,Лев(ЭлементДереваОтборов.ПолеКод,СтрНайти(ЭлементДереваОтборов.ПолеКод,".")-1),ЭлементДереваОтборов.ПолеКод);

			ПолеСКД =  СТ_ДополнительныеНастройки.Настройки.ДоступныеПоляОтбора.Элементы.Найти(БазовоеПоле);
			Если ПолеСКД = Неопределено Тогда
				 МассивУдаляемыхОтборов.Добавить(ЭлементДереваОтборов);
			КонецЕсли;	
			
			МассивПолейОтборов.Добавить(БазовоеПоле);
			
		КонецЦикла;			
		
		Для Каждого СтрУдаляемоеПоле Из МассивУдаляемыхОтборов Цикл
			НастройкиОтборовДерево.Строки[0].Строки.Удалить(СтрУдаляемоеПоле);
		КонецЦикла;	
		
		//Добавим поля, котрых ранее не было
		Для Каждого СтрПолеОтбор Из СТ_ДополнительныеНастройки.Настройки.Отбор.Элементы Цикл
			
			ПолеСКД =  СТ_ДополнительныеНастройки.Настройки.ДоступныеПоляОтбора.Элементы.Найти(СтрПолеОтбор.ЛевоеЗначение);
			
			Если МассивПолейОтборов.Найти(Строка(ПолеСКД.Поле))= Неопределено Тогда
				
				нЭлемент 					= НастройкиОтборовДерево.Строки[0].Строки.Добавить();
				нЭлемент.ПолеПредставление 	= ПолеСКД.Заголовок;
				нЭлемент.ПолеКод 			= ПолеСКД.Поле;
				нЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
				нЭлемент.РежимОтбора        = Перечисления.РежимыОтборовАналитическихТаблиц.Данные;
				нЭлемент.ТипЗначения        = ПолеСКД.ТипЗначения;
				нЭлемент.ДоступныеЗначенияВыбора.ЗагрузитьЗначения(ПолеСКД.ДоступныеВидыСравнения.ВыгрузитьЗначения())
				
			КонецЕсли;
			
		КонецЦикла;	
	
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(НастройкиОтборовДерево,"НастройкиОтборов");
	
КонецПроцедуры	

#КонецОбласти

#Область РаботаСКомандамиКонтекстктногоМеню

&НаКлиенте
Процедура УстановитьРежимРедактированияДанныхКлиент(Режим)
	
	Элементы.Применить.Доступность 						= НЕ Транзакции.Количество()=0;	
	Элементы.ОтборыЗаголовок.Доступность 				= НЕ Режим;
	Элементы.ОбщиеКоманды.Доступность 					= НЕ Режим;
	Элементы.ГруппаДополнительно.Доступность 			= НЕ Режим;	
	Элементы.ГруппаТочностьМасштаб.Доступность 			= НЕ Режим;
	Элементы.ВариантыПодменю.Доступность 				= НЕ Режим;
		
КонецПроцедуры

&НаСервере
Функция ЗаписатьИзмененныеПоказатели(ОбновитьИтоги = Истина)
	
	РасчетПоказателейОбъект = РеквизитФормыВЗначение("РасчетИЗаписьПоказателей");
	Результат = РасчетПоказателейОбъект.ЗаписатьЛогИзмененныхПоказателей();
	ЗначениеВРеквизитФормы(РасчетПоказателейОбъект, "РасчетИЗаписьПоказателей");
	
	Если Результат Тогда
		
		Транзакции.Очистить();
		ТранзакцииПовторить.Очистить();
		
		Обработки.АналитическийБланк.УстановитьВидимостьДоступностьЭлементовЖурналаДействий(ЭтаФорма);
		
		ЭтаФорма.Модифицированность = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьРаскрытие(Команда)
	
	ПолеТабличногоДокументаМакетВыбор(Элементы.ПолеТабличногоДокументаМакет, Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть, Истина);

КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыВызоваФормыРаскрытий(СтруктураРасшифровки,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик)
	
	СтруктураОтбираемыхАналитик.Вставить("Валюта",ВалютаОтображения);
	
	тОбъектАБ               = ОбъектАналитическогоБланка;	
	
	МассивПериодов = Новый Массив;
	
		
	Для Каждого СтрНезаполненнаяАналитика Из СтруктураНезаполненыхАналитик Цикл
		Если СтруктураОтбираемыхАналитик.Свойство(СтрНезаполненнаяАналитика.Ключ) Тогда //Мы имеем дело с аналитикой -группой, нужно ее расшифровать
			Если СтрНезаполненнаяАналитика.Ключ = "ПериодОтчета" Тогда
				МассивПериодов = ПолучитьВложенныеПериоды(СтруктураОтбираемыхАналитик.ПериодОтчета,ОбъектАналитическогоБланка.Периодичность);			
				СтруктураОтбираемыхАналитик.Вставить("ПериодОтчета",МассивПериодов);	
			Иначе	
				МассивЗначений = ПолучитьЭлементыПотомки(СтруктураОтбираемыхАналитик[СтрНезаполненнаяАналитика.Ключ]);			
				СтруктураОтбираемыхАналитик.Вставить(СтрНезаполненнаяАналитика.Ключ,МассивЗначений);	
			КонецЕсли;	 
		КонецЕсли;	
	КонецЦикла;	
	
	Если СтруктураНезаполненыхАналитик.Свойство("ПериодОтчета")     //Если не указан,  период, то берем весь текущий диапазон
		И НЕ СтруктураОтбираемыхАналитик.Свойство("ПериодОтчета") Тогда	
		МассивПериодов = ПериодыУХ.ПолучитьПодчиненныеПериоды(СтруктураРасшифровки.ПериодС, СтруктураРасшифровки.ПериодПо, ОбъектАналитическогоБланка.Периодичность);			
		СтруктураОтбираемыхАналитик.Вставить("ПериодОтчета",МассивПериодов);	
	КонецЕсли;	

	
	МассивПоказателей = Новый Массив();
    МассивПоказателей.Добавить(СтруктураРасшифровки.ПоказательСсылка);	
	СтруктураОтбираемыхАналитик.Вставить("ПоказательОтчета",МассивПоказателей);
    СтруктураОтбираемыхАналитик.Вставить("УидГруппыОтборов",СтруктураРасшифровки.УидГруппыОтборов);

	мПоказателиРаскрытия = ПолучитьИзВременногоХранилища(тОбъектАБ.мПоказателиРаскрытияАдрес);
	
	МассивУдаляемыхКолонок = Новый Массив;
	
	тСвойствАналитик = Новый ТаблицаЗначений;
	тСвойствАналитик.Колонки.Добавить("КодАналитики");
	тСвойствАналитик.Колонки.Добавить("типАналитики");
	тСвойствАналитик.Колонки.Добавить("Аналитика");
    тСвойствАналитик.Колонки.Добавить("СвязьПоВладельцу");
    тСвойствАналитик.Колонки.Добавить("ЭтоЭтапПроекта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
    тСвойствАналитик.Колонки.Добавить("ОбязательноеЗаполнение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	тСвойствАналитик.Колонки.Добавить("МетаИмяАналитики");
    тСвойствАналитик.Колонки.Добавить("ОтборЗначений");
	тСвойствАналитик.Колонки.Добавить("ПараметрыОтбораЗначений");
	
	тГруппаРаскрытия = СтруктураРасшифровки.ПоказательСсылка.ГруппаРаскрытия;
	
	ДополнительныйОтбор = Новый ТаблицаЗначений;
	ДополнительныйОтбор.Колонки.Добавить("ИмяОтбора");
	ДополнительныйОтбор.Колонки.Добавить("ТипОтбора");
	ДополнительныйОтбор.Колонки.Добавить("ЗначениеОтбора");
	
	Для Каждого Аналитика Из СтруктураНезаполненыхАналитик Цикл
		
		нСвойство = тСвойствАналитик.Добавить();
		нСвойство.КодАналитики = Аналитика.Ключ;
		
		Если Аналитика.Ключ = "ПериодОтчета" Тогда
			нСвойство.типАналитики = Новый ОписаниеТипов("СправочникСсылка.Периоды");	
			нСвойство.ОбязательноеЗаполнение = Истина;
		ИначеЕсли  Аналитика.Ключ = "Организация" Тогда 
			нСвойство.типАналитики = Новый ОписаниеТипов("СправочникСсылка.Организации");
			нСвойство.ОбязательноеЗаполнение = Истина;
		ИначеЕсли  Аналитика.Ключ = "Проект"   Тогда
			нСвойство.типАналитики = Новый ОписаниеТипов("СправочникСсылка.Проекты");
			нСвойство.ОбязательноеЗаполнение = Истина;
		ИначеЕсли  Аналитика.Ключ = "Сценарий" Тогда
			нСвойство.типАналитики = Новый ОписаниеТипов("СправочникСсылка.Сценарии");
			нСвойство.ОбязательноеЗаполнение = Истина;
		ИначеЕсли  Аналитика.Ключ = "АналитикаВалюта" Тогда
			нСвойство.типАналитики = Новый ОписаниеТипов("СправочникСсылка.Валюты");
			нСвойство.ОбязательноеЗаполнение = Истина;
		
		Иначе	
			
			ТекСубконто =  ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.НайтиПоКоду(Аналитика.Ключ);
			
			Если ЗначениеЗаполнено(ТекСубконто) Тогда
				нСвойство.типАналитики = Новый ОписаниеТипов(ТекСубконто.ТипЗначения);
			КонецЕсли;	 
			
			Для Инд = 1 по ПараметрыСеанса.ЧислоДопАналитик Цикл	
				Если  тГруппаРаскрытия["ВидАналитики"+Инд] = ТекСубконто Тогда	
					нСвойство.ОбязательноеЗаполнение = тГруппаРаскрытия["Аналитика"+Инд+"Обязательна"];
				КонецЕсли;		
				
				Если Инд =  тГруппаРаскрытия.АналитикаЭтапПроекта Тогда
					 нСвойство.ЭтоЭтапПроекта = Истина;
				КонецЕсли;	
				
			КонецЦикла;					
		КонецЕсли;		
		
		Если нСвойство.типАналитики.ПривестиЗначение() = Неопределено Тогда
			нСвойство.МетаИмяАналитики = "СправочникСсылка."+Метаданные.НайтиПоТипу(нСвойство.типАналитики.Типы()[0]).Имя;
		Иначе
			нСвойство.МетаИмяАналитики = нСвойство.типАналитики.ПривестиЗначение().Метаданные().Имя;
		КонецЕсли;

		тРасшифровкаГруппыОтборов = тОбъектАБ.РасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УидГруппыОтборов,ПолеКод",СтруктураОтбираемыхАналитик.УидГруппыОтборов,Аналитика.Ключ));
		
		Если тРасшифровкаГруппыОтборов.Количество() = 1 И ЗначениеЗаполнено(тРасшифровкаГруппыОтборов[0].ЗначениеОтбораСтрока) И НЕ тРасшифровкаГруппыОтборов[0].Отбор = НСтр("ru = 'Отбор не производится'") Тогда
			
			ТзПараметровЗапроса = Новый ТаблицаЗначений;
			ТзПараметровЗапроса.Колонки.Добавить("ИмяОтбора");
			ТзПараметровЗапроса.Колонки.Добавить("ТипОтбора");
			ТзПараметровЗапроса.Колонки.Добавить("ЗначениеОтбора");
			ТзПараметровЗапроса.Колонки.Добавить("УидГруппыОтбора");
				
			ТекстОтбора = АналитическийБланкУХСервер.СформироватьТекстОтбораПоВерсии("ТекущийСправочник","",тРасшифровкаГруппыОтборов[0],ТзПараметровЗапроса,"Ссылка");
			ТекстОтбора = Прав(ТекстОтбора,СтрДлина(ТекстОтбора)-1);
			
			ТекстЗапроса = "ВЫБРАТЬ 
			|	ТекущийСправочник.Ссылка
			|ИЗ
			|	Справочник."+нСвойство.МетаИмяАналитики+" КАК ТекущийСправочник
			|ГДЕ "+ТекстОтбора;
			
			Если ЗначениеЗАполнено(ТекстОтбора) Тогда		
				нСвойство.ОтборЗначений 			= ТекстЗапроса;
				нСвойство.ПараметрыОтбораЗначений 	= ТзПараметровЗапроса;	
			КонецЕсли;	
					
			нДополнительныйОтбор 				= ДополнительныйОтбор.Добавить();
			нДополнительныйОтбор.ИмяОтбора      = Аналитика.Ключ;
			нДополнительныйОтбор.ТипОтбора      = тРасшифровкаГруппыОтборов[0].Отбор;
			нДополнительныйОтбор.ЗначениеОтбора = ЗначениеИзСтрокиВнутр(тРасшифровкаГруппыОтборов[0].ЗначениеОтбораСтрока);
	
		КонецЕсли;
			
	КонецЦикла;	
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСеанса",ЭтаФорма.УникальныйИдентификатор);
	ДополнительныеПараметры.Вставить("ДополнительныйФильтр",ДополнительныйОтбор);
	
	Если НЕ СтруктураРасшифровки.ПоказательСсылка.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда 
		ДополнительныеПараметры.Вставить("ЭтоНечисловые",Истина);
	КонецЕсли;
	
	Если СтруктураНезаполненыхАналитик.Свойство("Проект") Тогда
		СтруктураНезаполненыхАналитик.Удалить("Проект"); 
	КонецЕсли;
	
	Результат = СводнаяТаблицаУХ.ПолучитьЗначениеПоказателей(СтруктураОтбираемыхАналитик,СтруктураНезаполненыхАналитик,ДополнительныеПараметры);	
	
	Если  НЕ СтруктураРасшифровки.ПоказательСсылка.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
		Результат.Колонки.Удалить("Значение");
		Результат.Колонки.ЗначениеНеЧисловое.Имя = "Значение";
	КонецЕсли;	
	
	АдресТзРаскрытия = ПоместитьВовременноеХранилище(Результат,Новый УникальныйИдентификатор);
		
	//Заполняем возможные связи по владельцу
	Для Каждого Аналитика Из тСвойствАналитик Цикл				
		
		мВладельцы = Новый Массив;
		
		Если Аналитика.типАналитики.ПривестиЗначение() = Неопределено ИЛИ СтрНайти(Аналитика.типАналитики.ПривестиЗначение().Метаданные().ПолноеИмя(),"Справочник") = 0 Тогда
			Аналитика.СвязьПоВладельцу =  мВладельцы;
			Продолжить;	
		Иначе	
			Владельцы =  Аналитика.типАналитики.ПривестиЗначение().Метаданные().Владельцы;
		КонецЕсли;	

		Владельцы =  Аналитика.типАналитики.ПривестиЗначение().Метаданные().Владельцы;
		
		Для Каждого тВладелец Из Владельцы Цикл	
			СущВладельцы = тСвойствАналитик.НайтиСтроки(Новый Структура("МетаИмяАналитики",тВладелец.Имя));
			Для Каждого сВладелец Из СущВладельцы Цикл	
				мВладельцы.Добавить(сВладелец.КодАналитики);	
			КонецЦикла;		
		КонецЦикла;		
		Аналитика.СвязьПоВладельцу =  мВладельцы;
		
	КонецЦикла;	
    	
	СтруктураКлючевыхРеквизитов = Новый Структура;
	СтруктураКлючевыхРеквизитов.Вставить("Сценарий"		,ЭтаФорма["Сценарий"]);
	СтруктураКлючевыхРеквизитов.Вставить("Организация"	,ЭтаФорма["Организация"]);
    СтруктураКлючевыхРеквизитов.Вставить("Проект"		,Неопределено);
	СтруктураКлючевыхРеквизитов.Вставить("ПериодОтчета"	,ПериодС);
	СтруктураКлючевыхРеквизитов.Вставить("ВидОтчета"	,тВидыОтчетов);
    СтруктураКлючевыхРеквизитов.Вставить("ВложенныеПериоды"	,тОбъектАБ.ВложенныеПериоды.Выгрузить());
	СтруктураКлючевыхРеквизитов.Вставить("ЗаблокированныеПоказатели",тОбъектАБ.ЗаблокированныеПоказатели.Выгрузить());
   	СтруктураКлючевыхРеквизитов.Вставить("ЗаблокированныеПериоды",тОбъектАБ.ЗаблокированныеПериоды.Выгрузить());
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктураОтбираемыхАналитик",СтруктураОтбираемыхАналитик);
	СтруктураПараметров.Вставить("СтруктураНезаполненыхАналитик",СтруктураНезаполненыхАналитик);
	СтруктураПараметров.Вставить("АдресТзРаскрытия",АдресТзРаскрытия);
	СтруктураПараметров.Вставить("логИзмененныхПоказателейАдрес",логИзмененныхДанныхАдрес);
	СтруктураПараметров.Вставить("мПоказателиРаскрытияАдрес",тОбъектАБ.мПоказателиРаскрытияАдрес);
	СтруктураПараметров.Вставить("КэшАналитикПоказателейАдрес",тОбъектАБ.КэшАналитикПоказателейАдрес);
	СтруктураПараметров.Вставить("Заблокирован",Истина);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения",ТекущийДелитель);
	СтруктураПараметров.Вставить("УровеньТочности",УровеньТочности);
	СтруктураПараметров.Вставить("УидГруппыОтборов",СтруктураРасшифровки.УидГруппыОтборов);
    СтруктураПараметров.Вставить("тГоризонт",МассивПериодов);
	СтруктураПараметров.Вставить("АдрестСвойствАналитик",ПоместитьВоВременноеХранилище(тСвойствАналитик,ЭтаФорма.УникальныйИдентификатор));
    СтруктураПараметров.Вставить("ПравилоОбработки",Неопределено);
	СтруктураПараметров.Вставить("ВИБ",Неопределено);

	
	СтруктураПараметров.Вставить("АдресСтруктураКлючевыхРеквизитов",ПоместитьВоВременноеХранилище(СтруктураКлючевыхРеквизитов,ЭтаФорма.УникальныйИдентификатор));
	
	Возврат СтруктураПараметров;
	
КонецФункции	

&НаСервере
Функция ПолучитьВложенныеПериоды(ПериодОтчета,Периодичность)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Периоды.Ссылка КАК ПериодОтчета,
	|	Периоды.Периодичность КАК Периодичность
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	Периоды.ПометкаУдаления = ЛОЖЬ
	|	И Периоды.ДатаНачала >= &ДатаНачала
	|	И Периоды.ДатаОкончания <= &ДатаОкончания
	|	И Периоды.Периодичность = &Периодичность
	|	И Периоды.Произвольный = ЛОЖЬ";
	
	
	Запрос.УстановитьПараметр("Периодичность",Периодичность);
	Запрос.УстановитьПараметр("ДатаНачала",ПериодОтчета.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",ПериодОтчета.ДатаОкончания);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПериодОтчета");
	
КонецФункции

&НаСервере
Функция ПолучитьЭлементыПотомки(ЭлементРодитель)
	
	ТекущийТип = ЭлементРодитель.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначениеСправочика.Ссылка КАК Ссылка
	|ИЗ
	|	//ТекущийСправочник// КАК ЗначениеСправочика
	|ГДЕ
	|	ЗначениеСправочика.ПометкаУдаления = ЛОЖЬ
	|	И ЗначениеСправочика.Родитель  В ИЕРАРХИИ(&ЭлементРодитель)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ТекущийСправочник//","Справочник."+ТекущийТип);
	
	Запрос.УстановитьПараметр("ЭлементРодитель",ЭлементРодитель);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура ОткрытьЭкземплярОтчета(Команда)
	
	РежимМногопериодныхУоп = Ложь;
	
	Расшифровка = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка;
	Экземпляр = ПолучитьЭкземплярОтчета(Расшифровка,РежимМногопериодныхУоп,Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Имя);
	Если Экземпляр = Неопределено Тогда
		Сообщить(НСтр("ru = 'Не удалось определить экземпляр отчета'"));
	Иначе	 
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Ключ", Экземпляр);
		СтруктураПараметров.Вставить("мТекущаяВалюта",ВалютаОтображения);

		Если РежимМногопериодныхУоп Тогда
			ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаАналитическойТаблицы",СтруктураПараметров); 
		Иначе
			ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаДокументаУправляемая",СтруктураПараметров); 
		КонецЕсли;	
		
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Функция ПолучитьЭкземплярОтчета(Расшифровка,РежимМногопериодныхУоп,ОбластьИмя)
		
	РабочийОбъект 		= РеквизитФормыВЗначение("Объект");
	
	Область             = ПолеТабличногоДокументаМакет.Область(ОбластьИмя);
	ЭкземплярСсылка 	= ПолучитьЭкземплярОтчетаПоРасшифровке(Расшифровка,РежимМногопериодныхУоп,Область);
	
	Возврат ЭкземплярСсылка;
	
КонецФункции

&НаСервере
Функция ПолучитьЭкземплярОтчетаПоРасшифровке(Расшифровка,РежимМногоПериодныхУОП=Ложь,Область) Экспорт;
	
	СтруктураОтбораЭкземпляра = Новый Структура;	
		
	ОбластьИмя 				=  Область.Имя;
    ОбластьРасшифровка      =  Область.Расшифровка;
	
	тМакет 					= ПолеТабличногоДокументаМакет;
	тОбъектАБ               = ОбъектАналитическогоБланка;	
	АдресРасшифровки 		= Неопределено;
	Заблокирован            = Истина;
	
	тОбъект = ПолучитьСвойстваТекущегоОбъектаСервер();

	СтруктураКлючевыханалитик = Новый Структура;
	Для Инд = 1 по ПараметрыСеанса.ЧислоДопАналитик  Цикл
		СтруктураКлючевыханалитик.Вставить("Аналитика"+Инд,Неопределено);
	КонецЦикла;	
			
	СтруктураРасшифровки = Новый Структура;
	
	Если  Область.Расшифровка = Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		Возврат Неопределено;	
		
	ИначеЕсли  ТипЗнч(Область.Расшифровка) = Тип("Структура") И Область.Расшифровка.Свойство("Ссылка") Тогда	
		
		СтруктураРасшифровкиГруппировок = Новый Структура;
		ЗаполнитьЗначенияРасшифровкиПоТекущемуКонтекстуСервер(Область,СтруктураРасшифровки);	
		ТипЯчейки = "ЭтоРасшифровкаСтруктура";				
		
	Иначе 			
		СтандартнаяОбработка = Ложь;
		Возврат Неопределено;
	КонецЕсли;	
	
	СтруктураОтвета = ПолучитьСтруктуруРасшифровкиБезКонтекста(СтруктураРасшифровки,АдресРасшифровки,тОбъект,тОбъектАБ.АдресРасшифровкиГруппОтборов,ОбластьИмя,ОбластьРасшифровка,тОбъектАБ.ТзСвойстваПоказателейАдрес);

	ВидОтчетаОтбор = СтруктураОтвета.СтруктураРасшифровки.ВидОтчета;
	
	НоСсылка = "";
	
	Для Каждого Пл из  СтруктураОтвета.СтруктураРасшифровки Цикл
		Если Пл.Ключ="Сценарий" Тогда
			СтруктураОтбораЭкземпляра.Вставить(Пл.Ключ,Пл.Значение);
		ИначеЕсли Пл.Ключ="Организация" Тогда	
			СтруктураОтбораЭкземпляра.Вставить(Пл.Ключ,Пл.Значение);
		ИначеЕсли Пл.Ключ="ПериодОтчета" Тогда	
			СтруктураОтбораЭкземпляра.Вставить(Пл.Ключ,Пл.Значение);
		ИначеЕсли Пл.Ключ="Проект" Тогда	
			СтруктураОтбораЭкземпляра.Вставить(Пл.Ключ,Пл.Значение);		
		КонецЕсли;	
	КонецЦикла;
	
	СтруктураОтбораЭкземпляра.Вставить("Валюта",ВалютаОтображения);
	
	Если НЕ СтруктураОтбораЭкземпляра.Свойство("ПериодОтчета") 
		ИЛИ НЕ СтруктураОтбораЭкземпляра.Свойство("Сценарий") 
		ИЛИ НЕ СтруктураОтбораЭкземпляра.Свойство("Организация") 
		 Тогда
		    Возврат Неопределено;
	КонецЕсли;
	
	//Определяем УОП и версию регламента
	РежимМногоПериодныхУОП 	= Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатусыПериодовСценариев.УправлениеПериодомСценария КАК УправлениеПериодомСценария,
	               |	СтатусыПериодовСценариев.УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры КАК УправлениеПериодомСценарияВерсияОрганизационнойСтруктуры,
	               |	СтатусыПериодовСценариев.УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры.РежимМногопериодныхУОП КАК РежимМногопериодныхУОП,
	               |	СтатусыПериодовСценариев.УправлениеПериодомСценария.ПериодСценарияОкончание КАК ПериодСценарияОкончание
	               |ИЗ
	               |	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	               |ГДЕ
	               |	СтатусыПериодовСценариев.Периоды = &ПериодОтчета
	               |	И СтатусыПериодовСценариев.Организации = &Организация
	               |	И СтатусыПериодовСценариев.Сценарии = &Сценарий";
	
	Запрос.УстановитьПараметр("Сценарий",СтруктураОтбораЭкземпляра.Сценарий);
	Запрос.УстановитьПараметр("ПериодОтчета",СтруктураОтбораЭкземпляра.ПериодОтчета);
	Запрос.УстановитьПараметр("Организация",СтруктураОтбораЭкземпляра.Организация);

	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл	
		 РежимМногоПериодныхУОП 		= Выборка.РежимМногоПериодныхУОП;	
		 ПериодСценарияОкончание 		= Выборка.ПериодСценарияОкончание;
	КонецЦикла;
	
	Если Не РежимМногоПериодныхУОП Тогда
		ПериодСценарияОкончание = СтруктураОтбораЭкземпляра.ПериодОтчета;
	КонецЕсли;	
	
	
	ТекстАналитик = "";
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		ТекстАналитик = ТекстАналитик + "
		|	И НастраиваемыйОтчет.Аналитика"+Инд+" = &Аналитика"+Инд;
	КонецЦикла;	
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастраиваемыйОтчет.Ссылка
	               |ИЗ
	               |	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	               |ГДЕ
	               |	НастраиваемыйОтчет.Сценарий = &Сценарий
	               |	И НастраиваемыйОтчет.ВидОтчета = &ВидОтчета
	               |	И НастраиваемыйОтчет.ПериодОтчета = &ПериодОтчета
				   |	И НастраиваемыйОтчет.ПериодОкончания = &ПериодСценарияОкончание
				   |	И НастраиваемыйОтчет.Организация = &Организация
	               |	И НастраиваемыйОтчет.Проект = &Проект
	               |	И НастраиваемыйОтчет.ОсновнаяВалюта = &ОсновнаяВалюта"+ТекстАналитик;
	
	Запрос.УстановитьПараметр("Сценарий",СтруктураОтбораЭкземпляра.Сценарий);
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчетаОтбор);
	Запрос.УстановитьПараметр("ПериодОтчета",СтруктураОтбораЭкземпляра.ПериодОтчета);
	Запрос.УстановитьПараметр("ПериодСценарияОкончание",ПериодСценарияОкончание);
	Если СтруктураОтбораЭкземпляра.Свойство("Проект") Тогда
		Запрос.УстановитьПараметр("Проект",СтруктураОтбораЭкземпляра.Проект);
	Иначе	
		Запрос.УстановитьПараметр("Проект",Справочники.Проекты.ПустаяСсылка());
		СтруктураОтбораЭкземпляра.Вставить("Проект",Справочники.Проекты.ПустаяСсылка());	
	КонецЕсли;
	Запрос.УстановитьПараметр("ОсновнаяВалюта",СтруктураОтбораЭкземпляра.Валюта);
	Запрос.УстановитьПараметр("Организация",СтруктураОтбораЭкземпляра.Организация);
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ЗначениеЗаполнено(ВидОтчетаОтбор["ВидАналитики"+Инд]) Тогда
			Для ИндА = 1 По Инд Цикл
				Если СтруктураОтвета.СтруктураРасшифровки.Свойство(ВидОтчетаОтбор["ВидАналитики"+ИндА].Код) Тогда	
					СтруктураКлючевыханалитик.Вставить("Аналитика"+ИндА,СтруктураОтвета.СтруктураРасшифровки[ВидОтчетаОтбор["ВидАналитики"+ИндА].Код]);
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;		
		Запрос.УстановитьПараметр("Аналитика"+Инд,СтруктураКлючевыханалитик["Аналитика"+Инд]);	
	КонецЦикла;
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		  Возврат Выборка.Ссылка;
	КонецЦикла;
	
	НоСсылка = Документы.НастраиваемыйОтчет.ПолучитьЭкземплярОтчета(СтруктураОтбораЭкземпляра.Организация,
	СтруктураОтбораЭкземпляра.ПериодОтчета,
	СтруктураОтбораЭкземпляра.Сценарий,ВидОтчетаОтбор,
	,Истина,Истина,,СтруктураОтбораЭкземпляра.Проект,,СтруктураКлючевыханалитик);
	// Переведём новый документ в статус Черновик.
	СтатусЧерновик = МодульУправленияПроцессамиУХ.ПолучитьСоответствиеСостоянийОбъекта(НоСсылка)["Черновик"];
	УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(НоСсылка, СтатусЧерновик);
	
	Возврат НоСсылка;
	
КонецФункции

&НаКлиенте
Процедура РасшифроватьОперанд(Команда)
	
	тМакет 										= ПолеТабличногоДокументаМакет;
	ТекущаяОбластьРасшифровка  					= тМакет.ВыделенныеОбласти[0];
	ТекстОбласти 								= ТекущаяОбластьРасшифровка.Текст;
	СтруктураПараметровДляВызоваРасшифровки 	= РасшифроватьОперандНаСервере(ТекущаяОбластьРасшифровка.Расшифровка,ТекстОбласти,ТекущаяОбластьРасшифровка.Имя);	
		
	Если СтруктураПараметровДляВызоваРасшифровки = Неопределено  Тогда	
		ПоказатьОповещениеПользователя(Нстр("ru = 'Нет данных для расшифровки'"),, Нстр("ru = 'Нет данных для расшифровки'"), БиблиотекаКартинок.Внимание16);
		Возврат;
	КонецЕсли;
		
	//Операнд по правилу расчета
	Если СтруктураПараметровДляВызоваРасшифровки.Свойство("АдресХранилищаПеременныхДляРасчета") Тогда
		СтруктураПараметровДляВызоваРасшифровки.Вставить("ВсегдаПоказыватьБланкРасшифровки",Истина);
		Если НЕ СтруктураПараметровДляВызоваРасшифровки = Неопределено  Тогда
			ОткрытьФорму("Обработка.РасшифровкаРассчитанныхЗначений.Форма", 
			СтруктураПараметровДляВызоваРасшифровки,ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		КонецЕсли;	
		//Показатель другого ключевого среза	
	ИначеЕсли	СтруктураПараметровДляВызоваРасшифровки.Свойство("ПоказательСсылка") Тогда 		
		
		СтруктураПараметровДляВызоваРасшифровки.Вставить("ЭтоФормула",Ложь);
		ОткрытьФорму("Обработка.АналитическийБланк.Форма.ФормаРасшифровкиПоказателя", 
		СтруктураПараметровДляВызоваРасшифровки,ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		
		//Формула бланка	
	ИначеЕсли	СтруктураПараметровДляВызоваРасшифровки.Свойство("ЭтоФормула") Тогда 	
		
		СтруктураПараметровДляВызоваРасшифровки.Вставить("ЭтоФормула",Истина);
		ОткрытьФорму("Обработка.АналитическийБланк.Форма.ФормаРасшифровкиПоказателя", 
		СтруктураПараметровДляВызоваРасшифровки,ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		
		//нет расшифровки	
	Иначе	
		
		ПоказатьОповещениеПользователя(Нстр("ru = 'Нет данных для расшифровки'"),, Нстр("ru = 'Нет данных для расшифровки'"), БиблиотекаКартинок.Внимание16);
		
	КонецЕсли;	

	
КонецПроцедуры

&НаСервере
Функция РасшифроватьОперандНаСервере(Расшифровка,Текст,ОбластьИмя)
	
	СтруктураНезаполненыхАналитик 	= Новый Структура;
	СтруктураОтбираемыхАналитик 	= Новый Структура;
	ТекущийОбъектАБ                 = "ОбъектАналитическогоБланка";
	ТекущийМакет                    = "ПолеТабличногоДокументаМакет";
	
	СтруктураРасшифровки = 	ПолучитьСтруктуруРасшифровки(ОбластьИмя,Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик);
	
	Если СтруктураРасшифровки = Неопределено  Тогда
		Возврат Неопределено;		
	ИначеЕсли Расшифровка.Свойство("УидФормулы") Тогда	
		
		тМакет 		= ПолеТабличногоДокументаМакет;
		тОбласть    = ПолеТабличногоДокументаМакет.Область(ОбластьИмя);
		
		СтруктураКлючевыхРеквизитов = ПолучитьСвойстваТекущегоОбъектаСервер();
							
		СтруктураРасшифровкиГруппировок = Новый Структура;
		ЗаполнитьЗначенияРасшифровкиПоТекущемуКонтекстуСервер(тОбласть,СтруктураРасшифровкиГруппировок);			
			
		СтруктураРасшифровки.Вставить("ЭтоФормула", Истина);
		СтруктураРасшифровки.Вставить("РасшифровкаЯчейки", тОбласть.Расшифровка);
		СтруктураРасшифровки.Вставить("СтруктураРасшифровкиГруппировок", СтруктураРасшифровкиГруппировок);
		СтруктураРасшифровки.Вставить("СтруктураКлючевыхРеквизитов", СтруктураКлючевыхРеквизитов);
		СтруктураРасшифровки.Вставить("ИдентификаторСеанса", ЭтаФорма.УникальныйИдентификатор);	
		СтруктураРасшифровки.Вставить("РасшифровкаГруппОтборовАдрес", ЭтаФорма[ТекущийОбъектАБ].АдресРасшифровкиГруппОтборов);
		СтруктураРасшифровки.Вставить("КэшАналитикПоказателейАдрес", ЭтаФорма[ТекущийОбъектАБ].КэшАналитикПоказателейАдрес);
		СтруктураРасшифровки.Вставить("ТзСвойстваПоказателейАдрес", ЭтаФорма[ТекущийОбъектАБ].ТзСвойстваПоказателейАдрес);
		СтруктураРасшифровки.Вставить("КэшПоказателейКроссОбластейАдрес", ЭтаФорма[ТекущийОбъектАБ].КэшПоказателейКроссОбластейАдрес);
        СтруктураРасшифровки.Вставить("ЗначениеВыражения", тОбласть.Текст);
		
		КэшФормулПоказателейАдрес = ПоместитьВоВременноеХранилище(ЭтаФорма[ТекущийОбъектАБ].КэшФормулОбластейПоказателей.Выгрузить(),Новый УникальныйИдентификатор);
		СтруктураРасшифровки.Вставить("КэшФормулПоказателейАдрес", КэшФормулПоказателейАдрес);
		
		Возврат  СтруктураРасшифровки;

		
	ИначеЕсли НЕ СтруктураРасшифровки.Свойство("ПоказательСсылка") Тогда	
		
		Возврат Неопределено;		
		
	ИначеЕсли  ВозможнаРасшифровкаПоФормулеРасчета(СтруктураРасшифровки)  Тогда	//Достаточно для расшифровки ключевого среза
		
		СтруктураПараметровДляВызоваРасшифровки = ПолучитьПараметрыРасшифровкиОперанда(СтруктураРасшифровки,Текст);
		
		Если НЕ СтруктураПараметровДляВызоваРасшифровки = Неопределено Тогда
			
			СтруктураПараметровДляВызоваРасшифровки.ОбъектРасчета.Вставить("ЕдиницаИзмеренияОтображения",ТекущийДелитель); 			
			СтруктураПараметровДляВызоваРасшифровки.ОбъектРасчета.Вставить("УровеньТочности",УровеньТочности);
			СтруктураПараметровДляВызоваРасшифровки.ОбъектРасчета.Вставить("ИдентификаторСеанса",""+ЭтаФорма.УникальныйИдентификатор);		
			СтруктураПараметровДляВызоваРасшифровки.Вставить("АдресХранилищаПеременныхДляРасчета", ПоместитьВоВременноеХранилище(СтруктураПараметровДляВызоваРасшифровки.ОбъектРасчета,ЭтаФорма.УникальныйИдентификатор));
			СтруктураПараметровДляВызоваРасшифровки.Удалить("ОбъектРасчета");
			
			Возврат СтруктураПараметровДляВызоваРасшифровки;
			
		КонецЕсли;		                                                                            		
		
	Иначе	//Полказатель чужого ключевого среза  - получим параметры для расшифровки среза.			
		
		тМакет 		= ЭтаФорма[ТекущийМакет];
		тОбласть    = ЭтаФорма[ТекущийМакет].Область(ОбластьИмя);
		
		СтруктураКлючевыхРеквизитов = ПолучитьСвойстваТекущегоОбъектаСервер();
			
		СтруктураРасшифровкиГруппировок = Новый Структура;
		ЗаполнитьЗначенияРасшифровкиПоТекущемуКонтекстуСервер(тОбласть,СтруктураРасшифровкиГруппировок);	
		
		СтруктураРасшифровки.Вставить("РасшифровкаЯчейки", тОбласть.Расшифровка);
		СтруктураРасшифровки.Вставить("СтруктураРасшифровкиГруппировок", СтруктураРасшифровкиГруппировок);
		СтруктураРасшифровки.Вставить("СтруктураКлючевыхРеквизитов", СтруктураКлючевыхРеквизитов);
		СтруктураРасшифровки.Вставить("СтруктураОтбираемыхАналитик", СтруктураОтбираемыхАналитик);
		СтруктураРасшифровки.Вставить("СтруктураНезаполненыхАналитик", СтруктураНезаполненыхАналитик);
		СтруктураРасшифровки.Вставить("ИдентификаторСеанса", ЭтаФорма.УникальныйИдентификатор);	
		СтруктураРасшифровки.Вставить("РасшифровкаГруппОтборовАдрес", ЭтаФорма[ТекущийОбъектАБ].АдресРасшифровкиГруппОтборов);
		СтруктураРасшифровки.Вставить("КэшАналитикПоказателейАдрес", ЭтаФорма[ТекущийОбъектАБ].КэшАналитикПоказателейАдрес);
		СтруктураРасшифровки.Вставить("ТзСвойстваПоказателейАдрес", ЭтаФорма[ТекущийОбъектАБ].ТзСвойстваПоказателейАдрес);
		
		Возврат  СтруктураРасшифровки;
		
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ВозможнаРасшифровкаПоФормулеРасчета(СтруктураРасшифровки)
		
	ТекущийОбъектАБ = "ОбъектАналитическогоБланка";
		
	Если СтруктураРасшифровки.Свойство("ПериодОтчета") 
		И СтруктураРасшифровки.Свойство("Организация")
		И СтруктураРасшифровки.Свойство("Сценарий")  Тогда		
		
		Если ТипЗнч(СтруктураРасшифровки.Организация) = Тип("СправочникСсылка.Организации") Тогда
			Возврат Истина;	
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат  Ложь;
	
КонецФункции	

&НаСервере
Функция ПолучитьПараметрыРасшифровкиОперанда(Расшифровка,ЗначениеПоказателя) Экспорт
		
	СтруктураРеквизитов = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(Расшифровка.ВидОтчета, Расшифровка.Сценарий, Расшифровка.Организация, Расшифровка.ПериодОтчета);	

	ОбработкаОбъект 						= Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
	ОбработкаОбъект.ВидОтчета 				= Расшифровка.ВидОтчета;
	ОбработкаОбъект.ВалютаОтображения 		= ВалютаОтображения;
	оТаблицаИзмененныхПоказателей 			= ОбработкаОбъект.ТаблицаИзмененныхПоказателей.Выгрузить();
	оТаблицаИзмененныхПоказателей.Колонки.Добавить("ID");
	ФлагОшибки = Ложь;
	
	КэшАналитикПоказателей  = ПолучитьИзВременногоХранилища(ОбъектАналитическогоБланка.КэшАналитикПоказателейАдрес);
		
	АналитическийБланкУХСервер.ЗаписатьЗначениеВПоказатель(оТаблицаИзмененныхПоказателей,,ЗначениеПоказателя,Расшифровка,КэшАналитикПоказателей,ФлагОшибки,ТекущийДелитель);
	
	Для Каждого Стр Из оТаблицаИзмененныхПоказателей Цикл		
		Если Стр.Аналитика1 = Неопределено И Стр.Аналитика2 = Неопределено И Стр.Аналитика3= Неопределено И Стр.Аналитика4  = Неопределено Тогда
			 Стр.СинтетическоеЗначение = Истина;
		КонецЕсли;		
	КонецЦикла;	
	
	ОбработкаОбъект.ТаблицаИзмененныхПоказателей.Загрузить(оТаблицаИзмененныхПоказателей);
	ОбработкаОбъект.ПравилоОбработки 				= СтруктураРеквизитов.ПравилоОбработки;
	Если СтруктураРеквизитов.Свойство("ВИБ") Тогда
		ОбработкаОбъект.ИспользуемаяИБ  				= СтруктураРеквизитов.ВИБ;
	КонецЕсли;	
	Если НЕ ФлагОшибки Тогда
		Возврат ОбработкаОбъект.ПолучитьСтруктуруПараметровДляРасшифровки();
	Иначе  
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции


#КонецОбласти

#Область ОбработкаСобытийТабличногоДокумента

&НаКлиенте
Процедура ПоказатьПротокол()
	
	// Отобразим прокол
	Если ЗначениеЗаполнено(РасчетИЗаписьПоказателей.АдресТаблицыСобытий) Тогда
		ОткрытьФорму("Обработка.ОтображениеПротоколируемыхСобытий.Форма.Форма",Новый Структура("АдресТаблицыСобытий",РасчетИЗаписьПоказателей.АдресТаблицыСобытий));
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ПризнакРедактирования = Ложь;
	
	ОбластьИмя 				=  Область.Имя;
	ОбластьРасшифровка      =  Область.Расшифровка;
	
	тМакет 					= ПолеТабличногоДокументаМакет;
	тОбъектАБ               = ОбъектАналитическогоБланка;	
	АдресРасшифровки 		= Неопределено;
	Заблокирован            = Истина;
	
	СтруктураРасшифровки = Новый Структура;
	
	Если  Область.Расшифровка = Неопределено Тогда	
		СтандартнаяОбработка = Ложь;
		Возврат;		
	ИначеЕсли  ТипЗнч(Область.Расшифровка) = Тип("Структура") И Область.Расшифровка.Свойство("Ссылка") Тогда			
		ЗначениеОбластиДоИзменения = Область.Значение;
		ТипЯчейки = "ЭтоРасшифровкаСтруктура";				
		ЗаполнитьЗначенияРасшифровкиПоТекущемуКонтексту(Область,СтруктураРасшифровки)			
	Иначе 			
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;	
		
	Если РежимРаботы = ПредопределенноеЗначение("Перечисление.РежимыРаботыСводнойТаблицы.СравнениеСБазой") Тогда
		ТекстОповещения  = Нстр("ru =' В режиме сравнения с базой редактирование ячеек недоступно'");
		ПоказатьОповещениеПользователя(ТекстОповещения,,,БиблиотекаКартинок.Внимание16);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;	
	
	тОбъект = ПолучитьСвойстваТекущегоОбъекта();

	СтруктураОтвета = ПолучитьСтруктуруРасшифровкиБезКонтекста(СтруктураРасшифровки,АдресРасшифровки,тОбъект,тОбъектАБ.АдресРасшифровкиГруппОтборов,ОбластьИмя,ОбластьРасшифровка,тОбъектАБ.ТзСвойстваПоказателейАдрес);

	Если СтруктураОтвета.СтруктураНезаполненыхАналитик.Свойство("Проект") Тогда
		 СтруктураОтвета.СтруктураНезаполненыхАналитик.Удалить("Проект");
	КонецЕсли;	
	
	СтруктураНезаполненыхАналитик 	= СтруктураОтвета.СтруктураНезаполненыхАналитик;
    СтруктураОтбираемыхАналитик 	= СтруктураОтвета.СтруктураОтбираемыхАналитик;
    СтруктураРасшифровки 			= СтруктураОтвета.СтруктураРасшифровки;
	
	Если СтруктураРасшифровки = Неопределено  Тогда
		СтандартнаяОбработка = Ложь;		
	ИначеЕсли СтруктураРасшифровки.Свойство("ТекстФормулы") Тогда	
		 СтандартнаяОбработка = Ложь;
	ИначеЕсли СтруктураНезаполненыхАналитик.Количество()=0 Тогда 	 
		
		
		Если РежимРаботы = ПредопределенноеЗначение("Перечисление.РежимыРаботыСводнойТаблицы.Основной") Тогда
			
			Если  НЕ СтруктураРасшифровки.Свойство("ПоказательТипЗначения") ИЛИ РежимТолькоЧтение Тогда
				СтандартнаяОбработка = Ложь;
				Возврат;
			КонецЕсли;	
			
			тОбъектСтруктура = Новый Структура;
			
			ЗаполнитьЗаблокированныеПериоды(тОбъектСтруктура,,тУправленияПериодом,тОрганизации);
	
			Для Каждого тПериод Из тОбъектСтруктура.ЗаблокированныеПериоды Цикл
				нтПериод 				=  тОбъектАБ.ЗаблокированныеПериоды.Добавить();
				нтПериод.ПериодОтчета   =  тПериод;
			КонецЦикла;	
			
			СтруктураЗаблокированныхПоказателей = ВернутьЗаблокированныеЯчейки(СтруктураРасшифровки);
			
			Если СтруктураЗаблокированныхПоказателей.Заблокирован  Тогда	
				ПоказатьОповещениеПользователя(СтруктураЗаблокированныхПоказателей.ТекстОповещения,,СтруктураЗаблокированныхПоказателей.Пояснение,БиблиотекаКартинок.Внимание16);
				СтандартнаяОбработка = Ложь;
				Возврат;
			КонецЕсли;	
				
		ИначеЕсли РежимРаботы = ПредопределенноеЗначение("Перечисление.РежимыРаботыСводнойТаблицы.ОбратноеРаспределение") Тогда	
			СтандартнаяОбработка = Ложь;
		КонецЕсли;	
	Иначе	
		
		Если РежимРаботы = ПредопределенноеЗначение("Перечисление.РежимыРаботыСводнойТаблицы.Основной") Тогда
			
			тОбъектСтруктура = Новый Структура;
			ЗаполнитьЗаблокированныеПериоды(тОбъектСтруктура,,тУправленияПериодом,тОрганизации);
			
			Для Каждого тПериод Из тОбъектСтруктура.ЗаблокированныеПериоды Цикл
				нтПериод 				=  тОбъектАБ.ЗаблокированныеПериоды.Добавить();
				нтПериод.ПериодОтчета   =  тПериод;
			КонецЦикла;	
			
			СтандартнаяОбработка = Ложь;
			ПараметрыФормыРаскрытия = ПодготовитьПараметрыВызоваФормыРаскрытий(СтруктураРасшифровки,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик);	
			
			СтруктураЗаблокированныхПоказателей = ВернутьЗаблокированныеЯчейки(СтруктураРасшифровки);
			ПараметрыФормыРаскрытия.Вставить("СтруктураЗаблокированныхПоказателей",СтруктураЗаблокированныхПоказателей);
			ПараметрыФормыРаскрытия.Вставить("тОбъект",тОбъект);
			ПараметрыФормыРаскрытия.Вставить("РежимЗаписиВлог",Истина);	
			ПараметрыФормыРаскрытия.Вставить("РежимТолькоЧтение",РежимТолькоЧтение);
	
			Оповещение = Новый ОписаниеОповещения("РедактированиеРаскрытияЗавершение", ЭтаФорма);
			ОткрытьФорму("Обработка.АналитическийБланк.Форма.ФормаРаскрытияПоказателей",ПараметрыФормыРаскрытия,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
			
				
		ИначеЕсли РежимРаботы = ПредопределенноеЗначение("Перечисление.РежимыРаботыСводнойТаблицы.ОбратноеРаспределение") Тогда	
			
			Если  НЕ СтруктураРасшифровки.Свойство("ПоказательТипЗначения") ИЛИ РежимТолькоЧтение Тогда
				СтандартнаяОбработка = Ложь;
				Возврат;
			КонецЕсли;	
			
			тОбъектСтруктура = Новый Структура;
			
			ЗаполнитьЗаблокированныеПериоды(тОбъектСтруктура,,тУправленияПериодом,тОрганизации);
			
			Для Каждого тПериод Из тОбъектСтруктура.ЗаблокированныеПериоды Цикл
				нтПериод 				=  тОбъектАБ.ЗаблокированныеПериоды.Добавить();
				нтПериод.ПериодОтчета   =  тПериод;
			КонецЦикла;	
			
			СтруктураЗаблокированныхПоказателей = ВернутьЗаблокированныеЯчейки(СтруктураРасшифровки);
			
			Если СтруктураЗаблокированныхПоказателей.Заблокирован  Тогда	
				ПоказатьОповещениеПользователя(СтруктураЗаблокированныхПоказателей.ТекстОповещения,,СтруктураЗаблокированныхПоказателей.Пояснение,БиблиотекаКартинок.Внимание16);
				СтандартнаяОбработка = Ложь;
				Возврат;
			КонецЕсли;	
				
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетПриИзмененииСодержимогоОбласти(Элемент, Область)
				
	Если ТипЗнч(Область.Расшифровка)=Тип("Структура") Тогда
		
		//Выделена одна ячейка
		Если Область.Лево - Область.Право = 0 И Область.Верх - Область.Низ = 0 Тогда
			
			ОписаниеИзменений 					= "";
			ОписаниеТранзакции 					= ПредопределенноеЗначение("Перечисление.ТранзакцииИзмененияПоказателей.ИзменениеПоказателя");
			ЗначениеОбласти 					= Область.Значение;
			ИмяИнтерактивноИзмененнойОбласти 	= Область.Имя;
			
			Если ВставитьЗначениеПоказателя(Область.Имя, ЗначениеОбласти, ОписаниеИзменений,ОписаниеТранзакции) <> Неопределено Тогда
		
				ИмяИнтерактивноИзмененнойОбласти 	= "";
				
				ЭтаФорма.Модифицированность = Истина;	
				ЭтаФорма.ТекущийЭлемент = Элементы[ТекущийМакет];
				УстановитьРежимРедактированияДанныхКлиент(Истина);
				
			КонецЕсли;
			
			ПоказатьПротокол();
			
		КонецЕсли;		

	КонецЕсли;		
					
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетПриАктивизацииОбласти(Элемент)
	
	ЭтоРедактирование = Ложь;
	
	тМакет = ПолеТабличногоДокументаМакет;
		
	ТекущаяОбластьМакета = тМакет.ТекущаяОбласть;
	ТекущаяОбластьЗначение = АналитическийБланкУХКлиент.ПолучитьЗначениеОбластиТабличногоДокумента(тМакет.Область(ТекущаяОбластьМакета.Верх, ТекущаяОбластьМакета.Лево));
		
	Если тМакет.ВыделенныеОбласти.Количество()=0 ИЛИ НЕ ТипЗнч(тМакет.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда 
		Возврат;
	КонецЕсли;
	
	ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.1);
	ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
			
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСвойстваТекущегоОбъекта()
	
	тОбъект                 = Новый Структура;
	
	тОбъект.Вставить("ВидОтчета"			,тВидыОтчетов);
	тОбъект.Вставить("УправлениеПериодом"	,тУправленияПериодом);
	тОбъект.Вставить("ПериодОтчета"			,ПериодС);
	тОбъект.Вставить("ПериодОкончания"		,ПериодПо);
	тОбъект.Вставить("Сценарий"				,ЭтаФорма["Сценарий"]);
	тОбъект.Вставить("ОсновнаяВалюта",ВалютаОтображения);	
    тОбъект.Вставить("мТекущаяВалюта"		,ВалютаОтображения);

	Если тОрганизации.Количество() = 0 Тогда
		тОбъект.Вставить("Организация"			,Неопределено);
	ИначеЕсли тОрганизации.Количество() = 1 Тогда	
		тОбъект.Вставить("Организация"			,тОрганизации[0].Значение);
	Иначе	
		тОбъект.Вставить("Организация"			,тОрганизации);
	КонецЕсли;
	
	Если тПроекты.Количество() = 0 Тогда
		тОбъект.Вставить("Проект"			,Неопределено);
	ИначеЕсли тПроекты.Количество() = 1 Тогда	
		тОбъект.Вставить("Проект"			,тПроекты[0].Значение);
	Иначе	
		тОбъект.Вставить("Проект"			,тПроекты);
	КонецЕсли;
	

	Возврат тОбъект;
	
КонецФункции	

&НаСервере
Функция ПолучитьСвойстваТекущегоОбъектаСервер() Экспорт
	
	тОбъект                 = Новый Структура;
	
	тОбъект.Вставить("ВидОтчета"			,тВидыОтчетов);
	тОбъект.Вставить("УправлениеПериодом"	,тУправленияПериодом);
	тОбъект.Вставить("ПериодОтчета"			,ПериодС);
	тОбъект.Вставить("ПериодОкончания"		,ПериодПо);
	тОбъект.Вставить("Сценарий"				,ЭтаФорма["Сценарий"]);
	тОбъект.Вставить("ОсновнаяВалюта"		,ВалютаОтображения);	
    тОбъект.Вставить("мТекущаяВалюта"		,ВалютаОтображения);
	
	Если тОрганизации.Количество() = 0 Тогда
		тОбъект.Вставить("Организация"			,Неопределено);
	ИначеЕсли тОрганизации.Количество() = 1 Тогда	
		тОбъект.Вставить("Организация"			,тОрганизации[0].Значение);
	Иначе	
		тОбъект.Вставить("Организация"			,тОрганизации);
	КонецЕсли;
	
	Если тПроекты.Количество() = 0 Тогда
		тОбъект.Вставить("Проект"			,Неопределено);
	ИначеЕсли тПроекты.Количество() = 1 Тогда	
		тОбъект.Вставить("Проект"			,тПроекты[0].Значение);
	Иначе	
		тОбъект.Вставить("Проект"			,тПроекты);
	КонецЕсли;
	
    //Быстрые отборы сверху.
	тОбъект.Вставить("БыстрыеОтборы",НастройкиРасположенияПолейСводнойТаблицы.Выгрузить(Новый Структура("ОсьТаблицы",Перечисления.ОсиСводнойТаблицы.Отборы)));
	Для Каждого тБыстрыйОтбор Из тОбъект.БыстрыеОтборы Цикл
		тОбъект.Вставить(тБыстрыйОтбор.КодПоля,ЭтаФорма[тБыстрыйОтбор.КодПоля]);
	КонецЦикла;
	
	Возврат тОбъект;
	
КонецФункции	

&НаКлиенте
Процедура ЗаполнитьЗначенияРасшифровкиПоТекущемуКонтексту(Область,СтруктураРасшифровки)
	
	тМакет 					= ПолеТабличногоДокументаМакет;

	//Строки
	ОбластьРасшифровкиСтроки  =  тМакет.Область(Область.Верх,1,Область.Низ,1);
	Если  НЕ ОбластьРасшифровкиСтроки.Расшифровка = Неопределено Тогда
		Для Каждого рСтроки Из ОбластьРасшифровкиСтроки.Расшифровка Цикл
			Если НЕ рСтроки.Значение = Неопределено Тогда
				СтруктураРасшифровки.Вставить(рСтроки.Ключ,рСтроки.Значение);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;		
	//Колонки
	ОбластьРасшифровкиКолонки =  тМакет.Область(1,Область.Лево,1,Область.Право);
	Если  НЕ ОбластьРасшифровкиКолонки.Расшифровка = Неопределено Тогда
		Для Каждого рКолонки Из ОбластьРасшифровкиКолонки.Расшифровка Цикл
			Если НЕ рКолонки.Значение = Неопределено Тогда
				СтруктураРасшифровки.Вставить(рКолонки.Ключ,рКолонки.Значение); 
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;			
	//Быстрые отборы сверху.
	тБыстрыеОтборы   = НастройкиРасположенияПолейСводнойТаблицы.НайтиСтроки(Новый Структура("ОсьТаблицы",ПредопределенноеЗначение("Перечисление.ОсиСводнойТаблицы.Отборы")));
    Для Каждого тБыстрыйОтбор Из тБыстрыеОтборы Цикл
		Если НЕ тБыстрыйОтбор.КодПоля = "Организация" И НЕ тБыстрыйОтбор.КодПоля = "Сценарий" И НЕ тБыстрыйОтбор.КодПоля = "Организация" Тогда 
			СтруктураРасшифровки.Вставить(тБыстрыйОтбор.КодПоля,ЭтаФорма[тБыстрыйОтбор.КодПоля]);
		КонецЕсли;
	КонецЦикла;

	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьЗначенияРасшифровкиПоТекущемуКонтекстуСервер(Область,СтруктураРасшифровки)
	
	тМакет 					= ПолеТабличногоДокументаМакет;

	//Строки
	ОбластьРасшифровкиСтроки  =  тМакет.Область(Область.Верх,1,Область.Низ,1);
	Если  НЕ ОбластьРасшифровкиСтроки.Расшифровка = Неопределено Тогда
		Для Каждого рСтроки Из ОбластьРасшифровкиСтроки.Расшифровка Цикл
			Если НЕ рСтроки.Значение = Неопределено Тогда
				СтруктураРасшифровки.Вставить(рСтроки.Ключ,рСтроки.Значение);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;		
	//Колонки
	ОбластьРасшифровкиКолонки =  тМакет.Область(1,Область.Лево,1,Область.Право);
	Если  НЕ ОбластьРасшифровкиКолонки.Расшифровка = Неопределено Тогда
		Для Каждого рКолонки Из ОбластьРасшифровкиКолонки.Расшифровка Цикл
			Если НЕ рКолонки.Значение = Неопределено Тогда
				СтруктураРасшифровки.Вставить(рКолонки.Ключ,рКолонки.Значение); 
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;			
	//Быстрые отборы сверху.
	тБыстрыеОтборы   = НастройкиРасположенияПолейСводнойТаблицы.НайтиСтроки(Новый Структура("ОсьТаблицы",ПредопределенноеЗначение("Перечисление.ОсиСводнойТаблицы.Отборы")));
    Для Каждого тБыстрыйОтбор Из тБыстрыеОтборы Цикл
		Если НЕ тБыстрыйОтбор.КодПоля = "Организация" И НЕ тБыстрыйОтбор.КодПоля = "Сценарий" И НЕ тБыстрыйОтбор.КодПоля = "Организация" Тогда 
			СтруктураРасшифровки.Вставить(тБыстрыйОтбор.КодПоля,ЭтаФорма[тБыстрыйОтбор.КодПоля]);
		КонецЕсли;
	КонецЦикла;

	
КонецПроцедуры	


#КонецОбласти

#Область РаботаСПанельюОтборовСравненияСБазой

&НаКлиенте
Процедура СдвигПоПериодуПриИзменении(Элемент)
	
	ПолучитьИнформациюПоСдвигуПериодовБаза();
	УстановитьСостояниеНеИспользовать(НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));

КонецПроцедуры

&НаСервере
Процедура ПолучитьИнформациюПоСдвигуПериодовБаза()
	
	ТзПериодовСоСдвигом = Новый ТаблицаЗначений;
	ТзПериодовСоСдвигом.Колонки.Добавить("ИндексБазы",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(2));	
	ТзПериодовСоСдвигом.Колонки.Добавить("ИсходныйПериод",Новый ОписаниеТипов("СправочникСсылка.Периоды"));	
	ТзПериодовСоСдвигом.Колонки.Добавить("БазовыйПериод",Новый ОписаниеТипов("СправочникСсылка.Периоды"));	
	ТзПериодовСоСдвигом.Колонки.Добавить("БазовыйПериодДатаНачала",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТзПериодовСоСдвигом.Колонки.Добавить("Периодичность",Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
	
	СписокПериодов = Новый Массив;
	Если ЗначениеЗАполнено(ПериодС) Тогда
		СписокПериодов.Добавить(ПериодС);
	КонецЕсли;
	Если ЗначениеЗАполнено(ПериодПо) Тогда
		СписокПериодов.Добавить(ПериодПо);
	КонецЕсли;
	
	СводнаяТаблицаУХ.ЗаполнитьТаблицуПериодов(0,ТзПериодовСоСдвигом,СдвигПоПериоду,СписокПериодов,ПериодС.Периодичность);
	
	Если ТзПериодовСоСдвигом.Количество()>0 Тогда
		ПериодБазаС = ТзПериодовСоСдвигом[0].БазовыйПериод;
	КонецЕсли;
	
	Если ТзПериодовСоСдвигом.Количество()>1 Тогда
		ПериодБазаПо = ТзПериодовСоСдвигом[1].БазовыйПериод;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПериодБазаПриИзменении(Элемент)
	
	УстановитьСостояниеНеИспользовать(НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияБазаПриИзменении(Элемент)
	
	УстановитьСостояниеНеИспользовать(НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СценарииБазаПриИзменении(Элемент)
	
	УстановитьСостояниеНеИспользовать(НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектыБазаПриИзменении(Элемент)
	
	УстановитьСостояниеНеИспользовать(НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодыБазаИспользоватьПриИзменении(Элемент)
		
	УстановитьСостояниеНеИспользовать(НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));
	Элементы.ГруппаСдвигБаза.Видимость 	= НЕ ПериодыБазаИспользовать;
	Элементы.ПериодБаза.Видимость 		= ПериодыБазаИспользовать;

КонецПроцедуры


#КонецОбласти



&НаСервере
Функция ПолучитьНастройкиПолейСводнойТаблицыАдрес()
	
	Возврат ПоместитьВоВременноеХранилище(НастройкиПолейСводнойТаблицы.Выгрузить(),ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ВопросОНеобходимостиЗаполнитьСтрокиЗавершение(Результат, ДополнительныеПараметры) Экспорт      
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Нет  Тогда
		Возврат;
	КонецЕсли;	
	
	Оповещение = Новый ОписаниеОповещения("ИзменениеСоставаСтрокЗавершение", ЭтаФорма);
	Параметры_ = Новый Структура("ВариантСводнойТаблицы,НастройкиСоставаСтрокСводнойТаблицыАдрес",ВариантСводнойТаблицы,ПолучитьНастройкиСоставаСтрокСводнойТаблицыАдрес());
	ОткрытьФорму("Обработка.АналитическийБланкСводнаяТаблица.Форма.ФормаНастройкиСтрок",Параметры_,ЭтаФорма,Истина,,,Оповещение,РежимОткрытияОкнаФормы.Независимый);
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьИзмеренияИОтборы()
	
	//Читаем и типизируем все поля-аналитики, доступные для выбранных строк
	ТаблицаДоступныеПоля.Очистить();  
	Обработки.АналитическийБланкСводнаяТаблица.ПрочитатьСоставДоступныхАналитик(ТаблицаДоступныеПоля,НастройкиСоставаСтрокСводнойТаблицы.Выгрузить(),НастройкиПолейСводнойТаблицы);
	  
    МассивУдаляемыхИзмерений = Новый Массив;
	
	Для Каждого СтрИзмерение Из НастройкиРасположенияПолейСводнойТаблицы Цикл
		
		Если ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код",СтрИзмерение.КодПоля)).Количество() =0 Тогда
			 МассивУдаляемыхИзмерений.Добавить(СтрИзмерение);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Для Каждого СтрИзмерение Из МассивУдаляемыхИзмерений Цикл
		НастройкиРасположенияПолейСводнойТаблицы.Удалить(СтрИзмерение);
	КонецЦикла;	
	
	СКДПолейОтборов = ПолучитьОбщийМакет("МакетНастройкиОтборов");

	
	СТ_ДополнительныеНастройки.Настройки.Отбор.Элементы.Очистить();
	
	Для Каждого СтрДоступноеПоле Из ТаблицаДоступныеПоля Цикл
		
		Если СтрДоступноеПоле.ТипСубконто = Перечисления.ПостоянныеПоляСводнойТаблицы.ПериодОтчета 
			ИЛИ СтрДоступноеПоле.ТипСубконто = Перечисления.ПостоянныеПоляСводнойТаблицы.КолонкиОтчетов
			ИЛИ СтрДоступноеПоле.ТипСубконто = Перечисления.ПостоянныеПоляСводнойТаблицы.СтрокиОтчетов Тогда
			Продолжить;
		КонецЕсли;	
		
		ТекПолеОтбор = НастройкиРасположенияПолейСводнойТаблицы.НайтиСтроки(Новый Структура("КодПоля,ОсьТаблицы",СтрДоступноеПоле.Код,Перечисления.ОсиСводнойТаблицы.Отборы));
		Если ТекПолеОтбор.Количество()>0 Тогда
			Продолжить;
		КонецЕсли;	
		
		
		НП =  СКДПолейОтборов.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НП.Заголовок 			= СтрДоступноеПоле.Наименование;
		НП.ПутьКДанным 			= СтрДоступноеПоле.Код;
		МассивТиповСтрока 		= СтрРазделить(СтрДоступноеПоле.ТипСтрока,"|");
		МассивТипов             = Новый Массив;
		Для Каждого СтрТип Из МассивТиповСтрока Цикл
			МассивТипов.Добавить(Тип(СтрТип));
		КонецЦикла;	
		
		НП.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
		НП.Поле = Строка(СтрДоступноеПоле.Код);
		
		НовыйЭлементОтбора = СТ_ДополнительныеНастройки.Настройки.Отбор.Элементы.
		Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных(СтрДоступноеПоле.Код);
		НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НовыйЭлементОтбора.Использование  = Ложь;
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		
		
	КонецЦикла;	
		
	СКДПолейОтборовАдрес = ПоместитьВоВременноеХранилище(СКДПолейОтборов, ЭтаФорма.УникальныйИдентификатор);
	СТ_ДополнительныеНастройки.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКДПолейОтборовАдрес));
	
	ЗаполнитьДеревоОтборов();
	
	СоздатьРеквизитыФильтры();
	СоздатьПоляФильтров();
	
	//Заполняем текущие виды отчетов, попавшие в срез.
	ЗаполнитьВидыОтчетовПоСоставуСтрок();
	ЗаполнитьПериоды();
	
КонецПроцедуры	


&НаКлиенте
Функция ВернутьЗаблокированныеЯчейки(СтруктураРасшифровки) Экспорт
	
	тОбъектАБ = ОбъектАналитическогоБланка;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("ТекстОповещения", Нстр("ru = 'Показатель заблокирован'"));
	СтруктураОтвета.Вставить("Пояснение","");
    СтруктураОтвета.Вставить("Заблокирован",Ложь);
	
	Если тОбъектАБ.ЗаблокированныеПоказатели.НайтиСтроки(Новый Структура("ПоказательОтчета",СтруктураРасшифровки.ПоказательСсылка)).Количество()>0 Тогда		
		ПричинаБлокировки = Нстр("ru =' используется в формуле расчета и недоступен для редактирования'");
		СтруктураОтвета.Вставить("Пояснение","Показатель "+СтруктураРасшифровки.ПоказательСсылка+ПричинаБлокировки);
        СтруктураОтвета.Вставить("Заблокирован",Истина);	
	КонецЕсли;	
	
	Если СтруктураРасшифровки.Свойство("ПериодОтчета") Тогда
		Если тОбъектАБ.ЗаблокированныеПериоды.НайтиСтроки(Новый Структура("ПериодОтчета",СтруктураРасшифровки.ПериодОтчета)).Количество()>0 Тогда		
			ПричинаБлокировки = Нстр("ru =' заблокирован и недоступен для редактирования'");
			СтруктураОтвета.Вставить("Пояснение","Период "+СтруктураРасшифровки.ПериодОтчета+ПричинаБлокировки);
			СтруктураОтвета.Вставить("Заблокирован",Истина);	
		КонецЕсли;		
	КонецЕсли;
	
	Если СтруктураРасшифровки.Свойство("Сценарий") И  ЭтаФорма["Сценарий"] <> СтруктураРасшифровки.Сценарий Тогда
		ПричинаБлокировки = Нстр("ru =' принадлежит другому ключевому срезу и недоступен для редактирования'");
		СтруктураОтвета.Вставить("Пояснение","Показатель "+СтруктураРасшифровки.ПоказательСсылка+ПричинаБлокировки);
		СтруктураОтвета.Вставить("Заблокирован",Истина);
	КонецЕсли;	
	
	Если СтруктураРасшифровки.Свойство("Организация") И  тОрганизации.НайтиПоЗначению(СтруктураРасшифровки.Организация) = Неопределено Тогда 
		ПричинаБлокировки = Нстр("ru =' принадлежит другому ключевому срезу и недоступен для редактирования'");
		СтруктураОтвета.Вставить("Пояснение","Показатель "+СтруктураРасшифровки.ПоказательСсылка+ПричинаБлокировки);
		СтруктураОтвета.Вставить("Заблокирован",Истина);
	КонецЕсли;	
						
	Возврат СтруктураОтвета;
		
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруРасшифровкиБезКонтекста(СтруктураРасшифровки,АдресРасшифровки,тОбъект,АдресРасшифровкиГруппОтборов,ОбластьИмя,Расшифровка,ТзСвойстваПоказателейАдрес)
	
	СтруктураНезаполненыхАналитик 	= Новый Структура;
	СтруктураОтбираемыхАналитик 	= Новый Структура;
	РасшифровкаГруппОтборов         = ПолучитьИзВременногоХранилища(АдресРасшифровкиГруппОтборов);
	
	тРасшифровка 				= ПолучитьИзВременногоХранилища(АдресРасшифровкиГруппОтборов);
	ТзСвойстваПоказателей 		= ПолучитьИзВременногоХранилища(ТзСвойстваПоказателейАдрес);
	
	тПоказатель  = Неопределено;
	
	тПоказатель  = ТзСвойстваПоказателей.Найти(Расшифровка.Ссылка,"Ссылка");
	АналитическийБланкУХСервер.ПолучитьСвойстваПоказателяСтруктура(ТзСвойстваПоказателей,Расшифровка,СтруктураРасшифровки,тПоказатель);
	
	АналитическийБланкУХСервер.ПолучитьСтруктуруРасшифровкиБезКонтекста(тОбъект,СтруктураРасшифровки,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик,РасшифровкаГруппОтборов,тПоказатель);
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("СтруктураНезаполненыхАналитик",СтруктураНезаполненыхАналитик);
	СтруктураОтвета.Вставить("СтруктураОтбираемыхАналитик",СтруктураОтбираемыхАналитик);
	СтруктураОтвета.Вставить("СтруктураРасшифровки",СтруктураРасшифровки);
	
	Возврат СтруктураОтвета;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьЗаблокированныеПериоды(тОбъектАБ,ЗаблокированныеПериоды = Неопределено,тУправленияПериодом,тОрганизации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатусыПериодовСценариев.Периоды КАК ПериодОтчета
	               |ИЗ
	               |	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	               |ГДЕ
	               |	СтатусыПериодовСценариев.УправлениеПериодомСценария В (&УправлениеПериодомСценария)
	               |	И СтатусыПериодовСценариев.СтатусБлокировки = 1
	               |	И СтатусыПериодовСценариев.Организации  В (&Организации)";
	
	Запрос.УстановитьПараметр("УправлениеПериодомСценария",тУправленияПериодом.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Организации",тОрганизации.ВыгрузитьЗначения());
	
	Если ЗаблокированныеПериоды = Неопределено Тогда
		тОбъектАБ.Вставить("ЗаблокированныеПериоды",Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПериодОтчета"));
	Иначе	
		ЗаблокированныеПериоды.Загрузить(Запрос.Выполнить().Выгрузить());
		тОбъектАБ.Вставить("ЗаблокированныеПериоды",ЗаблокированныеПериоды);
	КонецЕсли;	
		
КонецПроцедуры	

&НаСервере
Процедура ОбновитьСписокТекущихОрганизаций()
	
	тИзмерениеОрганизация = НастройкиРасположенияПолейСводнойТаблицы.НайтиСтроки(Новый Структура("КодПоля","Организация"));
	тОрганизации.Очистить();
	
	Если тИзмерениеОрганизация.Количество() = 1 Тогда
		
		Если тИзмерениеОрганизация[0].ОсьТаблицы = Перечисления.ОсиСводнойТаблицы.Отборы Тогда
			
			тОрганизации.Добавить(ЭтаФорма["Организация"]);
			
		ИначеЕсли тИзмерениеОрганизация[0].ОсьТаблицы = Перечисления.ОсиСводнойТаблицы.Строки Тогда
			
			Если ЗначениеЗаполнено(ОбъектАналитическогоБланка.СтруктураРасшифровкаОбластейYАдрес) Тогда 
				СтруктураРасшифровкаОбластейY		    = ПолучитьИзВременногоХранилища(ОбъектАналитическогоБланка.СтруктураРасшифровкаОбластейYАдрес);
				Для Каждого СтрКлюч Из СтруктураРасшифровкаОбластейY Цикл
					
					Для Каждого СтрЗначение Из СтрКлюч.Значение Цикл
						Если тОрганизации.НайтиПоЗначению(СтрЗначение["Организация"]) = Неопределено Тогда
							тОрганизации.Добавить(СтрЗначение["Организация"]);
						КонецЕсли;	
					КонецЦикла;	
					
				КонецЦикла;	
			КонецЕсли;	
			
		ИначеЕсли тИзмерениеОрганизация[0].ОсьТаблицы = Перечисления.ОсиСводнойТаблицы.Колонки Тогда
			
			Если ЗначениеЗаполнено(ОбъектАналитическогоБланка.СтруктураРасшифровкаОбластейХАдрес) Тогда 
				СтруктураРасшифровкаОбластейХ		    = ПолучитьИзВременногоХранилища(ОбъектАналитическогоБланка.СтруктураРасшифровкаОбластейХАдрес);
				
				Для Каждого СтрКлюч Из СтруктураРасшифровкаОбластейХ Цикл
					
					Для Каждого СтрЗначение Из СтрКлюч.Значение Цикл
						Если тОрганизации.НайтиПоЗначению(СтрЗначение["Организация"]) = Неопределено Тогда
							тОрганизации.Добавить(СтрЗначение["Организация"]);
						КонецЕсли;	
					КонецЦикла;	
				КонецЦикла;	
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗаполнитьТекущиеУОП();
	
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	тМакет = ПолеТабличногоДокументаМакет;
	
	Если НЕ ТипЗнч(тМакет.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда 
		Возврат;
	КонецЕсли;
			
	ДанныеРасчета = ОбщегоНазначенияКлиентСерверУХ.РасчетныеПоказателиЯчеек(тМакет, тМакет.ВыделенныеОбласти);                         
	
	СуммаВыделенныхЯчеек 		= ДанныеРасчета.Сумма;                        
	КоличествоВыделенныхЯчеек 	= ДанныеРасчета.Количество;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаСервере
Функция ВставитьЗначениеПоказателя(ИмяОбласти,Значение,ОписаниеИзменений="",ПредставлениеТранзакции)
	
	Возврат Обработки.АналитическийБланк.ВставитьЗначениеПоказателя(ЭтаФорма,ВалютаОтображения,ИмяОбласти,Значение,ОписаниеИзменений="",ПредставлениеТранзакции);
	
КонецФункции

&НаСервере
Процедура СкопироватьЗначения(ИмяОбласти,МассивЗначений,КодРесурса="",ОписаниеИзменений,ПредставлениеТранзакции)
	
	Обработки.АналитическийБланк.СкопироватьЗначения(ЭтаФорма,ВалютаОтображения,ИмяОбласти,МассивЗначений,КодРесурса,ОписаниеИзменений="",ПредставлениеТранзакции)
		
КонецПроцедуры

&НаКлиенте
Процедура ТочностьПриИзменении(Элемент)
	УстановитьСостояниеНеИспользовать(НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));
КонецПроцедуры

&НаКлиенте
Процедура ДелительПриИзменении(Элемент)
	УстановитьСостояниеНеИспользовать(НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройкуСоставаАналитики(Команда)
	
	
	Параметры_ = Новый Структура("ВариантСводнойТаблицы,АдресТаблицИнтерфейса", ВариантСводнойТаблицы,ПодготовитьОписаниеТаблицИнтерфейса());
	
	Оповещение = Новый ОписаниеОповещения("НастрйкаСоставаАналитикиЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Обработка.АналитическийБланкСводнаяТаблица.Форма.ФормаНастройкиСоставаАналитик", 
	Параметры_,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 

КонецПроцедуры

&НаКлиенте
Процедура НастрйкаСоставаАналитикиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена   Тогда
		 Возврат;
	КонецЕсли;
	
	 УстановитьСостояниеНеИспользовать(НСтр("ru = 'Таблица не актуальна. Нажмите ""Сформировать (F5)"" для обновления данных.'"));

	Если РежимДоступаКФункциямСводнойТаблицы = ПредопределенноеЗначение("Перечисление.РежимыДоступаКФункциямСводнойТаблицы.РазработкаМакета")  Тогда
	     CгенерироватьМакетШаблона();
	КонецЕсли;	
	 
	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

Функция ПодготовитьОписаниеТаблицИнтерфейса()
	
	СтруктураПараметровВход = Новый Структура;
	
	СтруктураПараметровВход.Вставить("ПолеТабличногоДокументаШаблон",ПолеТабличногоДокументаШаблон);
	СтруктураПараметровВход.Вставить("НастройкиСоставаСтрокСводнойТаблицы",НастройкиСоставаСтрокСводнойТаблицы.Выгрузить());
	СтруктураПараметровВход.Вставить("НастройкиСоставаКолонокСводнойТаблицы",НастройкиСоставаКолонокСводнойТаблицы.Выгрузить());
	СтруктураПараметровВход.Вставить("НастройкиРасположенияПолейСводнойТаблицы",НастройкиРасположенияПолейСводнойТаблицы.Выгрузить());
	СтруктураПараметровВход.Вставить("НастройкиВариантаСводнойТаблицы",НастройкиВариантаСводнойТаблицы.Выгрузить());
	СтруктураПараметровВход.Вставить("НастройкиПериодовСводнойТаблицы",НастройкиПериодовСводнойТаблицы.Выгрузить());
	СтруктураПараметровВход.Вставить("НастройкиПолейСводнойТаблицы",НастройкиПолейСводнойТаблицы.Выгрузить());
	СтруктураПараметровВход.Вставить("УникальныйИдентификатор",ЭтаФорма.УникальныйИдентификатор);
	
	АдресТаблицИнтерфейса = ПоместитьВоВременноеХранилище(СтруктураПараметровВход,ЭтаФорма.УникальныйИдентификатор);
	
	Возврат АдресТаблицИнтерфейса;		
 
КонецФункции	

&НаКлиенте
Процедура БланкПриИзменении(Элемент)
	
	ПрочитатьВариантТаблицыПоБланку();
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьНастройки(Команда)
	
	ПрочитатьВариантТаблицыПоБланку();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСводнуюТаблицу(Команда)
		
	СтруктураПараметров = Новый Структура("ВидОтчета,Бланк,РежимыДоступаКФункциямСводнойТаблицы"
	,ВидОтчета
	,Бланк
	,ПредопределенноеЗначение("Перечисление.РежимыДоступаКФункциямСводнойТаблицы.РаботаСДанными"));
	
	Имя = "Обработка.АналитическийБланкСводнаяТаблица.Форма.ФормаМакетаСводнаяТаблица";
	ОткрытьФорму(Имя, СтруктураПараметров,,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОтборовЗначениеОтбораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.НастройкиОтборов.ТекущиеДанные.ТипЗначения <> Элемент.ОграничениеТипа тогда
		АналитическийБланкУХКлиент.ОбновитьТипВыбранногоЗначения(ЭтаФорма,Элементы.НастройкиОтборов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОтборовВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.НастройкиОтборовВидСравнения.СписокВыбора.Количество() = 0 тогда		
		ВидСравненияКэш = Элементы.НастройкиОтборов.ТекущиеДанные.ВидСравнения;
		Элементы.НастройкиОтборовВидСравнения.СписокВыбора.ЗагрузитьЗначения(Элементы.НастройкиОтборов.ТекущиеДанные.ДоступныеЗначенияВыбора.ВыгрузитьЗначения());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаботаСВерсиями(Команда)
	
	СтруктураПараметров = Новый Структура;

	СтруктураПараметров.Вставить("МногопериодныйРежим", Истина);
	СтруктураПараметров.Вставить("ТекущийБланк", Бланк);		
	СтруктураПараметров.Вставить("ВидОтчета", тВидыОтчетов);
		
	Если ЭтаФорма.Элементы.Найти("Элемент_Сценарий") <> Неопределено тогда
		СтруктураПараметров.Вставить("Сценарий", ЭтаФорма.Сценарий);
	Иначе
		СтруктураПараметров.Вставить("Сценарий", ПолучитьПустоеЗначениеСценария());
	КонецЕсли;
	
	Если ЭтаФорма.Элементы.Найти("Элемент_Организация") <> Неопределено тогда
		СтруктураПараметров.Вставить("Организация", ЭтаФорма.Организация);
	Иначе
		СтруктураПараметров.Вставить("Организация", ПолучитьПустоеЗначениеОрганизации());
	КонецЕсли;
	
	Если ЭтаФорма.Элементы.Найти("Элемент_Проект") <> Неопределено тогда
		СтруктураПараметров.Вставить("Проект", ЭтаФорма.Проект);
	Иначе
		СтруктураПараметров.Вставить("Проект", ПолучитьПустоеЗначениеПроекта());
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ПериодОтчета", ПериодС);
	СтруктураПараметров.Вставить("ПериодОкончания",ПериодПо);
	
	Для Инд = 1 По ЧислоДопАналитик Цикл		
		Если ЭтаФорма.Элементы.Найти("Элемент_Аналитика" + Инд) <> Неопределено тогда
			СтруктураПараметров.Вставить("Аналитика" + Инд, ЭтаФорма["Элемент_Аналитика" + Инд]);
		Иначе
			СтруктураПараметров.Вставить("Аналитика" + Инд, Неопределено);
		КонецЕсли;
	КонецЦикла;	
	
	СтруктураПараметров.Вставить("РежимФормы", 3);
	
	Оповещение = Новый ОписаниеОповещения("ИзменениеВерсийЗавершение", ЭтаФорма);	
	ОткрытьФорму("Справочник.ОписаниеВерсий.Форма.ФормаСписка", 
	СтруктураПараметров, ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеВерсийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Модифицированность Тогда
		НарисоватьТаблицуСервер();
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ПолучитьПустоеЗначениеСценария() Экспорт
	
	Возврат Справочники.Сценарии.ПустаяСсылка();
	
КонецФункции

&НаСервере
Функция ПолучитьПустоеЗначениеОрганизации() Экспорт
	
	Возврат Справочники.Организации.ПустаяСсылка();
	
КонецФункции

&НаСервере
Функция ПолучитьПустоеЗначениеПроекта() Экспорт
	
	Возврат Справочники.Проекты.ПустаяСсылка();
	
КонецФункции

&НаСервере
Процедура СвернутьДоВерсии(ВерсияДляСвертки, ЭкземплярОтчета)
		
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
	
		Запрос = Новый Запрос;
		
		Если ЗначениеЗаполнено(ЭкземплярОтчета) тогда
			Запрос.УстановитьПараметр("ЭкземплярОтчета", ЭкземплярОтчета);
			
			ТекстУсловия = "
				|	И ОписаниеВерсий.ЭкземплярОтчета = &ЭкземплярОтчета";
		Иначе
			
			ТекстУсловия = "";
			Если ЗначениеЗаполнено(ВерсияДляСвертки.Организация) тогда
				Запрос.УстановитьПараметр("Организация", ВерсияДляСвертки.Организация);
				ТекстУсловия = ТекстУсловия + "
				|	И ОписаниеВерсий.Организация = &Организация";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВерсияДляСвертки.ВидОтчета) тогда
				Запрос.УстановитьПараметр("ВидОтчета", ВерсияДляСвертки.ВидОтчета);
				ТекстУсловия = ТекстУсловия + "
				|	И ОписаниеВерсий.ВидОтчета = &ВидОтчета";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВерсияДляСвертки.УправлениеПериодом) тогда
				Запрос.УстановитьПараметр("УправлениеПериодом", ВерсияДляСвертки.УправлениеПериодом);
				ТекстУсловия = ТекстУсловия + "
				|	И ОписаниеВерсий.УправлениеПериодом = &УправлениеПериодом";
				
				Если ЗначениеЗаполнено(ВерсияДляСвертки.УправлениеПериодом.ПериодСценария.ДатаНачала) тогда
					Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ВерсияДляСвертки.УправлениеПериодом.ПериодСценария.ДатаНачала));
					ТекстУсловия = ТекстУсловия + "
					|	И ОписаниеВерсий.УправлениеПериодом.ПериодСценария.ДатаНачала >= &ДатаНачала";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВерсияДляСвертки.УправлениеПериодом.ПериодСценарияОкончание.ДатаОкончания) тогда
					Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ВерсияДляСвертки.УправлениеПериодом.ПериодСценарияОкончание.ДатаОкончания));
					ТекстУсловия = ТекстУсловия + "
					|	И ОписаниеВерсий.УправлениеПериодом.ПериодСценарияОкончание.ДатаОкончания <= &ДатаОкончания";
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВерсияДляСвертки.Сценарий) тогда
				Запрос.УстановитьПараметр("Сценарий", ВерсияДляСвертки.Сценарий);
				ТекстУсловия = ТекстУсловия + "
				|	И ОписаниеВерсий.УправлениеПериодом.Сценарий = &Сценарий";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВерсияДляСвертки.Проект) тогда
				Запрос.УстановитьПараметр("Проект", ВерсияДляСвертки.Проект);
				ТекстУсловия = ТекстУсловия + "
				|	И ОписаниеВерсий.Проект = &Проект";
			КонецЕсли;
						
			Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				Если ЗначениеЗаполнено(ВерсияДляСвертки["Аналитика" + Инд]) Тогда
					Запрос.УстановитьПараметр("Аналитика" + Инд, ВерсияДляСвертки["Аналитика" + Инд]);
					ТекстУсловия = ТекстУсловия + "
					|	И ОписаниеВерсий.Аналитика" + Инд + " = &Аналитика" + Инд;	
				КонецЕсли;			
			КонецЦикла;
			
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОписаниеВерсий.Ссылка
		|ИЗ
		|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОписаниеВерсий КАК ОписаниеВерсий
		|		ПО ВерсииЗначенийПоказателей.Владелец = ОписаниеВерсий.Ссылка
		|ГДЕ
		|	ВерсииЗначенийПоказателей.Регистратор ССЫЛКА Документ.РучныеКорректировки" + ТекстУсловия + "
		|	И ОписаниеВерсий.Код <= &КодОписанияВерсии
		|УПОРЯДОЧИТЬ ПО
		|	ОписаниеВерсий.Код";
		
		Запрос.УстановитьПараметр("КодОписанияВерсии", ВерсияДляСвертки.Код);
		
		ТаблицаОписанийВерсийРучныхОпераций = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		ТаблицаОписанийВерсийРучныхОпераций=Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	Если ТаблицаОписанийВерсийРучныхОпераций.Количество() = 0 Тогда
		СвернутьВерсии(Неопределено, ВерсияДляСвертки);
	Иначе
		СвернутьВерсии(Неопределено, ТаблицаОписанийВерсийРучныхОпераций[0].Ссылка);
		Для Инд = 0 По ТаблицаОписанийВерсийРучныхОпераций.Количество() - 2 Цикл
			СвернутьВерсии(ТаблицаОписанийВерсийРучныхОпераций[Инд].Ссылка, ТаблицаОписанийВерсийРучныхОпераций[Инд + 1].Ссылка);
		КонецЦикла;
		СвернутьВерсии(ТаблицаОписанийВерсийРучныхОпераций[ТаблицаОписанийВерсийРучныхОпераций.Количество() - 1].Ссылка, ВерсияДляСвертки);
	КонецЕсли;
		
КонецПроцедуры // ОбработкаСвернутьДоВерсии()

Процедура СвернутьВерсии(НачальнаяВерсия, КонечнаяВерсия) Экспорт
	
	ДополнительныеОтборы=Новый Структура;

	ДополнительныеОтборы.Вставить("Организация", КонечнаяВерсия.Организация);
	
	Если ЗначениеЗаполнено(КонечнаяВерсия.Проект) Тогда
		
		ДополнительныеОтборы.Вставить("Проект", КонечнаяВерсия.Проект);
		
	КонецЕсли;
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если ЗначениеЗаполнено(КонечнаяВерсия["Аналитика"+Индекс]) Тогда
			
			ДополнительныеОтборы.Вставить("Аналитика" + Индекс, КонечнаяВерсия["Аналитика" + Индекс]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПересчетПоказателейУХ.СверутьВерсииПоРеквизитам(КонечнаяВерсия.УправлениеПериодом,
													КонечнаяВерсия.ВидОтчета,
													ДополнительныеОтборы,
													НачальнаяВерсия,
													КонечнаяВерсия);
														
КонецПроцедуры


#Область РаботаСЖурналомТранзакций

&НаКлиенте
Процедура ОтменитьПрименитьПодробно(Команда)
	
	ИсторияТранзакцийЗавершение = Новый ОписаниеОповещения("ИсторияТранзакцийЗавершение", ЭтаФорма);
	ПараметрыФормыРаскрытия = ПодготовитьПараметрыФормыТранзакций();
	ОткрытьФорму("Обработка.АналитическийБланк.Форма.ИсторияТранзакций",ПараметрыФормыРаскрытия,ЭтаФорма,,,,ИсторияТранзакцийЗавершение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
			
КонецПроцедуры

&НаКлиенте
Процедура ИсторияТранзакцийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	ОтменитьДействиеСервер(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьДействие(Команда)
	
	ОтменитьДействиеСервер();
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПовторитьДействие(Команда)
	
	ПовторитьДействиеСервер();
		
КонецПроцедуры

&НаСервере
Процедура ОтменитьДействиеСервер(МассивВыделенныхТранзакций = Неопределено)
	
	Обработки.АналитическийБланк.ОтменитьДействие(ЭтаФорма,МассивВыделенныхТранзакций);
	НарисоватьТаблицуСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПовторитьДействиеСервер(МассивВыделенныхТранзакций = Неопределено)
	
	Обработки.АналитическийБланк.ПовторитьДействие(ЭтаФорма,МассивВыделенныхТранзакций);
	НарисоватьТаблицуСервер();
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыФормыТранзакций()
	
	СтруктураПараметров = Новый Структура;
	
	АдресТранзакцийОтменить  = ПоместитьВоВременноеХранилище(Транзакции.Выгрузить(),ЭтаФорма.УникальныйИдентификатор);
	СтруктураПараметров.Вставить("АдресТранзакцийОтменить",АдресТранзакцийОтменить);
	
	Возврат СтруктураПараметров;
	
КонецФункции

#КонецОбласти



