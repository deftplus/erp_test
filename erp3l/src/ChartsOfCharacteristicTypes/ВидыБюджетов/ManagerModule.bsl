#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

Функция Предназначение(ВидБюджета) Экспорт 
	
	СоответствиеЭлементов = Новый Соответствие;
	ИменаВидовБюджетов = Метаданные.ПланыВидовХарактеристик.ВидыБюджетов.ПолучитьИменаПредопределенных();
	
	Для Каждого ТекИмяВидаБюджета Из ИменаВидовБюджетов Цикл
		
		СоответствиеЭлементов.Вставить(
			ПланыВидовХарактеристик.ВидыБюджетов[ТекИмяВидаБюджета],
			Перечисления.ПредназначенияЭлементовСтруктурыОтчета[ТекИмяВидаБюджета]);
		
	КонецЦикла;
	
	Возврат СоответствиеЭлементов[ВидБюджета];
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиОбновления

Процедура ПервоначальноеЗаполнение(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыБюджетов.Ссылка КАК Ссылка,
	|	ВидыБюджетов.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	ВидыБюджетов.ПризнакВалютнаяПоУмолчанию КАК ПризнакВалютнаяПоУмолчанию,
	|	ВидыБюджетов.Предназначение КАК Предназначение
	|ИЗ
	|	ПланВидовХарактеристик.ВидыБюджетов КАК ВидыБюджетов
	|ГДЕ
	|	ВидыБюджетов.Предопределенный = ИСТИНА
	|	И (ВидыБюджетов.ПризнакВалютнаяПоУмолчанию = ЗНАЧЕНИЕ(Перечисление.ВариантыУстановкиПризнакаВалютнаяСтатьиБюджета.ПустаяСсылка)
	|			ИЛИ ВидыБюджетов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.ПустаяСсылка))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета[Выборка.ИмяПредопределенныхДанных];
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Если НЕ ЗначениеЗаполнено(Объект.Предназначение) Тогда
			Объект.Предназначение = Предназначение;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ПризнакВалютнаяПоУмолчанию) Тогда
			Если Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств Тогда
				Объект.ПризнакВалютнаяПоУмолчанию = Перечисления.ВариантыУстановкиПризнакаВалютнаяСтатьиБюджета.ПоНастройкамЛимитирования;
			Иначе
				Объект.ПризнакВалютнаяПоУмолчанию = Перечисления.ВариантыУстановкиПризнакаВалютнаяСтатьиБюджета.Нет;
			КонецЕсли;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		
	КонецЦикла;
	
	ОбновитьФункциональныеОпцииИспользованияСтатейБюджетов(Истина);
	
КонецПроцедуры

Процедура ОбновитьИспользованиеСтатейБюджетов() Экспорт
	ОбновитьФункциональныеОпцииИспользованияСтатейБюджетов(Истина);
КонецПроцедуры

#КонецОбласти

// Процедура возвращает блокируемые реквизиты формы элемента 
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("ПризнакВалютнаяПоУмолчанию");
	Результат.Добавить("ТипЗначения");
    Возврат Результат;
	
КонецФункции

// Процедура устанавливает константы использования статей бюджетов
Процедура ОбновитьФункциональныеОпцииИспользованияСтатейБюджетов(ОбработчикОбновления = Ложь) Экспорт
	
	ПривилегированныйРежим();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыБюджетов.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.ВидыБюджетов КАК ВидыБюджетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыОперативногоПланирования КАК ПараметрыОперативногоПланирования
	|		ПО (ПараметрыОперативногоПланирования.ВидБюджета = ВидыБюджетов.Ссылка)
	|			И (ПараметрыОперативногоПланирования.Использовать = ИСТИНА)";
	
	ИспользованныеСтатьи = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Для Каждого Тип Из Выборка.ТипЗначения.Типы() Цикл
			ИспользованныеСтатьи.Добавить(Тип);
		КонецЦикла;
	КонецЦикла;
	
	//
	
	Если ОбработчикОбновления = Истина Тогда
		
		Константа = Константы.СтатьиДвиженияДенежныхСредствИспользуются.СоздатьМенеджерЗначения();
		Константа.Значение = ИспользованныеСтатьи.Найти(Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств")) <> неопределено;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Константа);
		
		Константа = Константы.СтатьиДоходовИРасходовИспользуются.СоздатьМенеджерЗначения();
		Константа.Значение = ИспользованныеСтатьи.Найти(Тип("СправочникСсылка.СтатьиДоходовИРасходов")) <> неопределено;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Константа);

		Константа = Константы.СтатьиДвиженияРесурсовИспользуются.СоздатьМенеджерЗначения();
		Константа.Значение = ИспользованныеСтатьи.Найти(Тип("СправочникСсылка.СтатьиДвиженияРесурсов")) <> неопределено;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Константа);
		
	Иначе
		Константы.СтатьиДвиженияДенежныхСредствИспользуются.Установить(
			ИспользованныеСтатьи.Найти(Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств")) <> неопределено);
		Константы.СтатьиДоходовИРасходовИспользуются.Установить(
			ИспользованныеСтатьи.Найти(Тип("СправочникСсылка.СтатьиДоходовИРасходов")) <> неопределено);
		Константы.СтатьиДвиженияРесурсовИспользуются.Установить(
			ИспользованныеСтатьи.Найти(Тип("СправочникСсылка.СтатьиДвиженияРесурсов")) <> неопределено);
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#КонецЕсли 


