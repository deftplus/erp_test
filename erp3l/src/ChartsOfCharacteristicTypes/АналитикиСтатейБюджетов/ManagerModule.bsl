#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает таблицу используемых аналитик
//  
// Возвращаемое значение:
//  ТаблицаЗначений - таблица используемых аналитик:
//		* Ссылка - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - Ссылка на аналитику.
//      * Представление - Строка - Представление аналитики.
//		* УчитыватьПоКоличеству - Булево- Признак учета по количеству.
//
Функция ВидыАналитики()Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АналитикиСтатейБюджетов.Ссылка                КАК Ссылка,
	|	АналитикиСтатейБюджетов.Представление         КАК Представление,
	|	АналитикиСтатейБюджетов.УчитыватьПоКоличеству КАК УчитыватьПоКоличеству
	|ИЗ
	|	ПланВидовХарактеристик.АналитикиСтатейБюджетов КАК АналитикиСтатейБюджетов";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает признак использования аналитики в статьях бюджетов
//
// Параметры
//  АналитикаСтатейБюджетов - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - Аналитика для проверки.
//  
// Возвращаемое значение:
//  Булево - признак использования.
//
Функция ИспользуетсяВСтатьяхБюджетов(АналитикаСтатейБюджетов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтатьиБюджетов.Ссылка
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	&ТекстПоискаПоВидамАналитики";
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	ТекстПоискаПоВидамАналитики = "";
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТекстПоискаПоВидамАналитики = ТекстПоискаПоВидамАналитики + ?(ТекстПоискаПоВидамАналитики = "", "", "
		|	ИЛИ ") + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"СтатьиБюджетов.ВидАналитики%1 = &АналитикаСтатейБюджетов", 
			НомерАналитики);
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоискаПоВидамАналитики", ТекстПоискаПоВидамАналитики);
	Запрос.УстановитьПараметр("АналитикаСтатейБюджетов", АналитикаСтатейБюджетов);
	
	Результат = НЕ Запрос.Выполнить().Пустой();
	
	Возврат Результат;
	
КонецФункции

// Возвращает типы значений аналитики
//
// Параметры
//  АналитикаСтатейБюджетов - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов  - Значение аналитики.
//  
// Возвращаемое значение:
//  Соответствие
//         Ключ - Тип -  Тип значения аналитики.
//         Значение - Полное имя объекта метаданных.
//        
Функция ДоступныеТипыАналитикиСтатейБюджетов(АналитикаСтатейБюджетов) Экспорт
	
	ДоступныеТипы = Новый Соответствие;
	
	Для каждого Тип Из АналитикаСтатейБюджетов.ТипЗначения.Типы() Цикл
		ДоступныеТипы.Вставить(Тип, Метаданные.НайтиПоТипу(Тип).ПолноеИмя());
	КонецЦикла;
	
	Возврат ДоступныеТипы;
	
КонецФункции

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
// 
// Возвращаемое значение:
// 	Массив - Имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("ТипЗначения");
	Результат.Добавить("Идентификатор");
	Результат.Добавить("ПредставлениеВалюты");
	Результат.Добавить("ПредставлениеЕдиницыИзмерения");
	Результат.Добавить("УчитыватьПоВалюте");
	Результат.Добавить("УчитыватьПоКоличеству");
	
	Возврат Результат;
	
КонецФункции

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения:
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Истина;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 плана видов характеристик.
//  ТабличныеЧасти - Структура - Ключ - Имя табличной части объекта.
//                               Значение - Выгрузка в таблицу значений пустой табличной части.
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт

	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();

	#Область ВидыНоменклатуры
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ВидыНоменклатуры";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ВидыНоменклатуры"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Виды номенклатуры';
								|en = 'Item kinds'", КодОсновногоЯзыка);
	Элемент.Код = "000000016";
	Элемент.ЗаполнениеЕдиницыИзмерения = СтрШаблон(НСтр("ru = '%1';
														|en = '%1'", КодОсновногоЯзыка), "ЕдиницаИзмерения");
	Элемент.ПредставлениеЕдиницыИзмерения = НСтр("ru = '[Единица хранения]';
												|en = '[Stock UOM]'", КодОсновногоЯзыка);
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Истина;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Вид номенклатуры';
											|en = 'Item kind'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область ГруппыАналитическогоУчетаНоменклатуры
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ГруппыАналитическогоУчетаНоменклатуры";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ГруппыАналитическогоУчетаНоменклатуры"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Группы аналитического учета номенклатуры';
								|en = 'Analytical inventory groups'", КодОсновногоЯзыка);
	Элемент.Код = "000000034";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Группа аналитического учета номенклатуры';
											|en = 'Analytical inventory group'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область ДенежныеСредстваБюджетирования
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ДенежныеСредстваБюджетирования";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.КассыККМ"));
	МассивТипов.Добавить(Тип("СправочникСсылка.БанковскиеСчетаОрганизаций"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Кассы"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Денежные средства';
								|en = 'Cash'", КодОсновногоЯзыка);
	Элемент.Код = "000000011";
	Элемент.ЗаполнениеВалюты = СтрШаблон(НСтр("ru = '%1';
												|en = '%1'", КодОсновногоЯзыка), "ВалютаДенежныхСредств");
	Элемент.ПредставлениеВалюты = НСтр("ru = '[Валюта денежных средств]';
										|en = '[Currency of cash]'", КодОсновногоЯзыка);
	Элемент.УчитыватьПоВалюте = Истина;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Кассы ККМ, Банковский счет организации, Касса';
											|en = 'Cash register, Company bank account, Cash account'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область Договоры
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Договоры";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ДоговорыМеждуОрганизациями"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ДоговорыКредитовИДепозитов"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ДоговорыАренды"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Договоры';
								|en = 'Contracts'", КодОсновногоЯзыка);
	Элемент.Код = "000000001";
	Элемент.ЗаполнениеВалюты = СтрШаблон(НСтр("ru = '%1';
												|en = '%1'", КодОсновногоЯзыка), "ВалютаВзаиморасчетов");
	Элемент.ПредставлениеВалюты = НСтр("ru = '[Валюта взаиморасчетов]';
										|en = '[AR/AP currency]'", КодОсновногоЯзыка);
	Элемент.УчитыватьПоВалюте = Истина;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Договор между организациями, Договор с контрагентом, Договор кредита (депозита), Договор аренды';
											|en = 'Intercompany contract, Contract with counterparty, Loan (deposit) contract, Lease contract'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область Заказы
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Заказы";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПереработчику"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказНаСборку"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказКлиента"));
	//++ НЕ УТКА
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказДавальца"));
	//++ Локализация
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказНаПроизводство"));
	//-- Локализация
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказНаПроизводство2_2"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказНаРемонт"));
	//-- НЕ УТКА
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Заказы';
								|en = 'Orders'", КодОсновногоЯзыка);
	Элемент.Код = "000000036";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Заказ поставщику, Заказ на производство (2.1), Заказ переработчику, Заказ на сборку (разборку), Заказ на ремонт, Заказ клиента, Заказ давальца, Заказ на производство';
											|en = 'Purchase order, Production order (2.1), Purchase order — Subcontracting, Assembly (disassembly) order, R&M order, Sales order, Material provider order, Production order'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область КоллекцииНоменклатуры
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "КоллекцииНоменклатуры";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.КоллекцииНоменклатуры"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Коллекции';
								|en = 'Collections'", КодОсновногоЯзыка);
	Элемент.Код = "000000033";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Коллекция (сезон)';
											|en = 'Collection (season)'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область Контрагенты
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Контрагенты";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Контрагенты';
								|en = 'Counterparties'", КодОсновногоЯзыка);
	Элемент.Код = "000000002";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Контрагент';
											|en = 'Counterparty'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область Марки
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Марки";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Марки"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Марки (бренды)';
								|en = 'Brands'", КодОсновногоЯзыка);
	Элемент.Код = "000000028";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Марка (бренд)';
											|en = 'Brand'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область НаправленияДеятельности
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НаправленияДеятельности";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.НаправленияДеятельности"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Направления деятельности';
								|en = 'Line of business'", КодОсновногоЯзыка);
	Элемент.Код = "000000015";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Направление деятельности';
											|en = 'Line of business'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область НематериальныеАктивы
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НематериальныеАктивы";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.НематериальныеАктивы"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Нематериальные активы и расходы на НИОКР';
								|en = 'Intangible assets and R&D expenses'", КодОсновногоЯзыка);
	Элемент.Код = "000000018";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Нематериальные активы и расходы на НИОКР';
											|en = 'Intangible assets and R&D expenses'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область НоменклатураБюджетирования
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НоменклатураБюджетирования";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Номенклатура';
								|en = 'Items'", КодОсновногоЯзыка);
	Элемент.Код = "000000003";
	Элемент.ЗаполнениеЕдиницыИзмерения = СтрШаблон(НСтр("ru = '%1';
														|en = '%1'", КодОсновногоЯзыка), "ЕдиницаИзмерения");
	Элемент.ПредставлениеЕдиницыИзмерения = НСтр("ru = '[Единица хранения]';
												|en = '[Stock UOM]'", КодОсновногоЯзыка);
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Истина;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Номенклатура';
											|en = 'Items'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область ОбъектыСтроительства
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОбъектыСтроительства";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ОбъектыСтроительства"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Объекты строительства';
								|en = 'Assets under construction'", КодОсновногоЯзыка);
	Элемент.Код = "000000035";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Объект строительства';
											|en = 'Assets under construction'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область ОбъектыЭксплуатации
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОбъектыЭксплуатации";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ОбъектыЭксплуатации"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Объекты эксплуатации';
								|en = 'Assets'", КодОсновногоЯзыка);
	Элемент.Код = "000000017";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Объект эксплуатации';
											|en = 'Asset'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область Организации
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Организации";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Организации';
								|en = 'Companies'", КодОсновногоЯзыка);
	Элемент.Код = "000000023";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Организация';
											|en = 'Company'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область Партнеры
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Партнеры";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Партнеры"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Партнеры';
								|en = 'Partners'", КодОсновногоЯзыка);
	Элемент.Код = "000000024";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Партнер';
											|en = 'Partner'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область Подразделения
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Подразделения";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Подразделения';
								|en = 'Business units'", КодОсновногоЯзыка);
	Элемент.Код = "000000014";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Подразделение';
											|en = 'Business unit'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область Проекты
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Проекты";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Проекты"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Проекты';
								|en = 'Projects'", КодОсновногоЯзыка);
	Элемент.Код = "000000004";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Проект';
											|en = 'Project'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область Производители
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Производители";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Производители"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Производители';
								|en = 'Manufacturers'", КодОсновногоЯзыка);
	Элемент.Код = "000000027";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Производитель';
											|en = 'Manufacturer'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область ПрочиеРасходы
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПрочиеРасходы";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ПрочиеРасходы"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Прочие расходы';
								|en = 'Other expenses'", КодОсновногоЯзыка);
	Элемент.Код = "000000020";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Прочие расходы';
											|en = 'Other expenses'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область СезонныеГруппы
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СезонныеГруппы";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.СезонныеГруппы"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Сезонные группы';
								|en = 'Seasonal groups'", КодОсновногоЯзыка);
	Элемент.Код = "000000031";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Сезонные группы номенклатуры';
											|en = 'Seasonal item groups'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область Склады
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Склады";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Склады"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Склады';
								|en = 'Warehouses'", КодОсновногоЯзыка);
	Элемент.Код = "000000005";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Склад (складская территория)';
											|en = 'Warehouse (warehouse area)'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область Сотрудники
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Сотрудники";
	МассивТипов = Новый Массив;
	//++ Локализация
	МассивТипов.Добавить(Тип("СправочникСсылка.Сотрудники"));
	//-- Локализация
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Сотрудники';
								|en = 'Employees'", КодОсновногоЯзыка);
	Элемент.Код = "000000006";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Сотрудник';
											|en = 'Employee'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область СтатьиАктивовИПассивов
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СтатьиАктивовИПассивов";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Прочие активы и пассивы';
								|en = 'Other assets and liabilities'", КодОсновногоЯзыка);
	Элемент.Код = "000000019";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Статья актива/пассива';
											|en = 'Asset/liability item'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область СтатьиАктивовПассивов
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СтатьиАктивовПассивов";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Статьи активов и пассивов';
								|en = 'Asset and liability items'", КодОсновногоЯзыка);
	Элемент.Код = "000000022";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Статья актива/пассива';
											|en = 'Asset/liability item'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область СтатьиДвиженияДенежныхСредств
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СтатьиДвиженияДенежныхСредств";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Статьи ДДС';
								|en = 'Cash flow items'", КодОсновногоЯзыка);
	Элемент.Код = "000000007";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Статья движения денежных средств';
											|en = 'Cash flow item'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область СтатьиДоходов
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СтатьиДоходов";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Статьи доходов';
								|en = 'Income items'", КодОсновногоЯзыка);
	Элемент.Код = "000000009";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Статьи доходов';
											|en = 'Income items'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область СтатьиКалькуляции
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СтатьиКалькуляции";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.СтатьиКалькуляции"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Статьи калькуляции';
								|en = 'Product cost elements'", КодОсновногоЯзыка);
	Элемент.Код = "000000008";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Статьи калькуляции';
											|en = 'Product cost elements'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область СтатьиРасходов
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СтатьиРасходов";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Статьи расходов';
								|en = 'Expense items'", КодОсновногоЯзыка);
	Элемент.Код = "000000010";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Статья расходов';
											|en = 'Expense item'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область ТипыДенежныхСредств
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ТипыДенежныхСредств";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.ТипыДенежныхСредств"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Типы денежных средств';
								|en = 'Cash types'", КодОсновногоЯзыка);
	Элемент.Код = "000000012";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Типы денежных средств';
											|en = 'Cash types'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область ТипыНоменклатуры
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ТипыНоменклатуры";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.ТипыНоменклатуры"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Типы номенклатуры';
								|en = 'Item types'", КодОсновногоЯзыка);
	Элемент.Код = "000000013";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Типы номенклатуры';
											|en = 'Item types'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область ТоварныеКатегории
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ТоварныеКатегории";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ТоварныеКатегории"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Товарные категории';
								|en = 'Product categories'", КодОсновногоЯзыка);
	Элемент.Код = "000000030";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Товарные категории';
											|en = 'Product categories'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область ФизическиеЛица
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ФизическиеЛица";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Физические лица';
								|en = 'Persons'", КодОсновногоЯзыка);
	Элемент.Код = "000000021";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Физическое лицо';
											|en = 'Person'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область ФорматыМагазинов
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ФорматыМагазинов";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ФорматыМагазинов"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Форматы магазинов';
								|en = 'Retail formats'", КодОсновногоЯзыка);
	Элемент.Код = "000000032";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Форматы магазинов';
											|en = 'Retail formats'", КодОсновногоЯзыка);
	#КонецОбласти

	#Область ЦеновыеГруппы
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ЦеновыеГруппы";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ЦеновыеГруппы"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru = 'Ценовые группы';
								|en = 'Price groups'", КодОсновногоЯзыка);
	Элемент.Код = "000000029";
	Элемент.УчитыватьПоВалюте = Ложь;
	Элемент.УчитыватьПоКоличеству = Ложь;
	Элемент.ПредставлениеТипаЗначения = НСтр("ru = 'Ценовая группа';
											|en = 'Price group'", КодОсновногоЯзыка);
	#КонецОбласти

КонецПроцедуры

// Вызывается при начальном заполнении создаваемого элемента.
//
// Параметры:
//  Объект                  - ПланВидовХарактеристикОбъект.АналитикиСтатейБюджетов - заполняемый объект.
//  Данные                  - СтрокаТаблицыЗначений - данные заполнения.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
Процедура ПриНачальномЗаполненииЭлемента(Объект, Данные, ДополнительныеПараметры) Экспорт
	
	
	
КонецПроцедуры

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет предопределенные элементы
//
Процедура ЗаполнитьПредопределенныеАналитикиСтатейБюджетов() Экспорт
	
	ПВХОбъект = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.НоменклатураБюджетирования.ПолучитьОбъект();
	ПВХОбъект.УчитыватьПоКоличеству = Истина;
	ПВХОбъект.ЗаполнениеЕдиницыИзмерения = "ЕдиницаИзмерения";
	ПВХОбъект.ПредставлениеЕдиницыИзмерения = НСтр("ru = '[Единица хранения]';
													|en = '[Stock UOM]'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПВХОбъект);
	
	ПВХОбъект = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ВидыНоменклатуры.ПолучитьОбъект();
	ПВХОбъект.УчитыватьПоКоличеству = Истина;
	ПВХОбъект.ЗаполнениеЕдиницыИзмерения = "ЕдиницаИзмерения";
	ПВХОбъект.ПредставлениеЕдиницыИзмерения = НСтр("ru = '[Единица хранения]';
													|en = '[Stock UOM]'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПВХОбъект);
	
	ПВХОбъект = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ДенежныеСредстваБюджетирования.ПолучитьОбъект();
	ПВХОбъект.УчитыватьПоВалюте = Истина;
	ПВХОбъект.ЗаполнениеВалюты = "ВалютаДенежныхСредств";
	ПВХОбъект.ПредставлениеВалюты = НСтр("ru = '[Валюта денежных средств]';
										|en = '[Currency of cash]'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПВХОбъект);
	
	ПВХОбъект = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Договоры.ПолучитьОбъект();
	ПВХОбъект.УчитыватьПоВалюте = Истина;
	ПВХОбъект.ЗаполнениеВалюты = "ВалютаВзаиморасчетов";
	ПВХОбъект.ПредставлениеВалюты = НСтр("ru = '[Валюта взаиморасчетов]';
										|en = '[AR/AP currency]'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПВХОбъект);
	
	ТаблицаЗарезервированныхИмен = ТаблицаЗарезервированныхИменВидовАналитик();
	
	Выборка = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПВХОбъект = Выборка.ПолучитьОбъект();
		ПВХОбъект.ПредставлениеТипаЗначения = Строка(ПВХОбъект.ТипЗначения);
		ПВХОбъект.Идентификатор = УникальныйИдентификаторПоНаименованию(ПВХОбъект.Наименование, ТаблицаЗарезервированныхИмен);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПВХОбъект);
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаЗарезервированныхИменВидовАналитик()
	// Указание идентификаторов для видов аналитик с учетом уникальности идентификаторов.
	// Идентификаторы не должны совпадать с зарезервированными параметрами для подстановки в текстовые поля бюджетных
	// отчетов.
	// В случае, если 2 характеристики имеют различие в наименовании, которое не отражается в идентификаторе,
	// к идентификатору будет добавлен порядковый номер.
	ЗарезервированныеПеременные = БюджетнаяОтчетностьКлиентСервер.УпорядоченныеПеременныеБюджетныхОтчетов();
	ТаблицаЗарезервированныхИмен = Новый ТаблицаЗначений();
	ТаблицаЗарезервированныхИмен.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	Для Каждого ИмяПараметраИПредставление Из ЗарезервированныеПеременные Цикл
		СтрокаПараметра = ТаблицаЗарезервированныхИмен.Добавить();
		СтрокаПараметра.Идентификатор = ИмяПараметраИПредставление.Имя;
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АналитикиСтатейБюджетов.Идентификатор КАК Идентификатор
	|ИЗ
	|	ПланВидовХарактеристик.АналитикиСтатейБюджетов КАК АналитикиСтатейБюджетов
	|ГДЕ
	|	АналитикиСтатейБюджетов.Идентификатор <> """"";
	ВыборкаРанееОбработанных = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРанееОбработанных.Следующий() Цикл
		СтрокаПараметра = ТаблицаЗарезервированныхИмен.Добавить();
		СтрокаПараметра.Идентификатор = ВыборкаРанееОбработанных.Идентификатор;
	КонецЦикла;
	ТаблицаЗарезервированныхИмен.Индексы.Добавить("Идентификатор");
	
	Возврат ТаблицаЗарезервированныхИмен;
КонецФункции

Функция УникальныйИдентификаторПоНаименованию(Наименование, ТаблицаЗарезервированныхИмен)
	Идентификатор = ОбщегоНазначенияУТКлиентСервер.ПолучитьИдентификатор(Наименование);
	ПроверяемыйИдентификатор = Идентификатор;
	ЗначениеУникально = Ложь;
	Счетчик = 1;
	Пока НЕ ЗначениеУникально Цикл
		Если ТаблицаЗарезервированныхИмен.Найти(ПроверяемыйИдентификатор) = Неопределено Тогда
			ЗначениеУникально = Истина;
			Идентификатор = ПроверяемыйИдентификатор;
			Прервать;
		Иначе
			ПроверяемыйИдентификатор = Идентификатор + Формат(Счетчик, "ЧГ=0;");
			Счетчик = Счетчик + 1;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаПараметра = ТаблицаЗарезервированныхИмен.Добавить();
	СтрокаПараметра.Идентификатор = Идентификатор;
	
	Возврат Идентификатор;
КонецФункции


#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

#Область ЗаполнитьЭлементыНачальнымиДанными

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ЗаполнитьЭлементыНачальнымиДанными";
	Обработчик.Версия = "2.5.5.51";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9459169d-f7b6-48c2-b1e3-a281d46c2c6f");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ЗарегистрироватьПредопределенныеЭлементыДляОбновления";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Обновление наименований предопределенных элементов.
	|До завершения обработки наименования этих элементов в ряде случаев будет отображаться некорректно.';
	|en = 'Updates the names of predefined items.
	|While the update is in progress, names of predefined items might be displayed incorrectly.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "МультиязычностьСервер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.6.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("297484a0-26b9-4241-af60-a14379462df0");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "БюджетированиеСервер.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает идентификатор для видов аналитик бюджетирования';
									|en = 'Sets the ID for the types of budgeting dimensions'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.ЭкземплярБюджета.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Отчеты.БюджетныйОтчет.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.ВидыБюджетов.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.ЭлементыФинансовыхОтчетов.ПолноеИмя());
	//++ НЕ УТКА
	Блокируемые.Добавить(Метаданные.Документы.ЭкземплярФинансовогоОтчета.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Отчеты.МеждународныйОтчет.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.ВидыФинансовыхОтчетов.ПолноеИмя());
	//-- НЕ УТКА
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "МультиязычностьСервер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ЗаполнитьЭлементыНачальнымиДанными";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

КонецПроцедуры

#Область Обработчики_2_5_3

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПредопределенныеЭлементыДляОбновления = Новый Массив;
	ПредопределенныеЭлементыДляОбновления = ПредопределенныеЭлементыДляОбновления();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПредопределенныеЭлементыДляОбновления", ПредопределенныеЭлементыДляОбновления);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АналитикиСтатейБюджетов.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.АналитикиСтатейБюджетов КАК АналитикиСтатейБюджетов
	|ГДЕ
	|	АналитикиСтатейБюджетов.Идентификатор = """"
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	АналитикиСтатейБюджетов.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.АналитикиСтатейБюджетов КАК АналитикиСтатейБюджетов
	|ГДЕ
	|	АналитикиСтатейБюджетов.Ссылка В (&ПредопределенныеЭлементыДляОбновления)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "ПланВидовХарактеристик.АналитикиСтатейБюджетов";
	
	ТаблицаЗарезервированныхИмен = ТаблицаЗарезервированныхИменВидовАналитик();
	
	ПредопределенныеЭлементыДляОбновления = Новый Массив;
	ПредопределенныеЭлементыДляОбновления.Добавить(ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Контрагенты);
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ПланВидовХарактеристикОбъект = Выборка.Ссылка.ПолучитьОбъект(); // ПланВидовХарактеристикОбъект.АналитикиСтатейБюджетов
			
			Если ПланВидовХарактеристикОбъект = Неопределено Тогда
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				
			Иначе
				
				Идентификатор = ПланВидовХарактеристикОбъект.Идентификатор;
				Если НЕ ЗначениеЗаполнено(Идентификатор) Тогда
					Идентификатор = УникальныйИдентификаторПоНаименованию(ПланВидовХарактеристикОбъект.Наименование, ТаблицаЗарезервированныхИмен);
					
					ПланВидовХарактеристикОбъект.Идентификатор = Идентификатор;
				КонецЕсли;
				
				Если ПредопределенныеЭлементыДляОбновления.Найти(Выборка.Ссылка) <> Неопределено Тогда
					ОбновлениеПредопределенногоВидаАналитики(ПланВидовХарактеристикОбъект);
				КонецЕсли;
				
				Если ПланВидовХарактеристикОбъект.Модифицированность() Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПланВидовХарактеристикОбъект);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				КонецЕсли;
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Функция ПредопределенныеЭлементыДляОбновления()
	ПредопределенныеЭлементыДляОбновления = Новый Массив;
	
	ПредопределенныйВидАналитики = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Контрагенты;
	ТипЗначенияАналитики = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредопределенныйВидАналитики, "ТипЗначения");
	МассивТипов = ТипЗначенияАналитики.Типы();
	Если МассивТипов.Найти(Тип("СправочникСсылка.Организации")) = Неопределено Тогда
		ПредопределенныеЭлементыДляОбновления.Добавить(ПредопределенныйВидАналитики);
	КонецЕсли;
	
	Возврат ПредопределенныеЭлементыДляОбновления;
КонецФункции

Процедура ОбновлениеПредопределенногоВидаАналитики(ПланВидовХарактеристикОбъект)
	Ссылка = ПланВидовХарактеристикОбъект.Ссылка;
	Если Ссылка = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Контрагенты Тогда
	
		ТипЗначения = ПланВидовХарактеристикОбъект.ТипЗначения;
		МассивТипов = ТипЗначения.Типы();
		ТипОрганизация = Тип("СправочникСсылка.Организации");
		Если МассивТипов.Найти(ТипОрганизация) <> Неопределено Тогда
			МассивТипов.Добавить(ТипОрганизация);
			ТипЗначения = Новый ОписаниеТипов(МассивТипов);
			ПланВидовХарактеристикОбъект.ТипЗначения = ТипЗначения;
			ПланВидовХарактеристикОбъект.ПредставлениеТипаЗначения = Строка(ТипЗначения);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

Процедура ЗарегистрироватьПредопределенныеЭлементыДляОбновления(Параметры) Экспорт
	
	ОбновлениеИнформационнойБазыУТ.ЗарегистрироватьПредопределенныеЭлементыДляОбновления(Параметры, Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов);
	
КонецПроцедуры

Процедура ЗаполнитьЭлементыНачальнымиДанными(Параметры) Экспорт
	
	ОбновлениеИнформационнойБазыУТ.ЗаполнитьЭлементыНачальнымиДанными(Параметры, Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов, Ложь, "Наименование");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
