#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Перем СохраненнаяНастройка Экспорт;			// Текущий вариант отчета
Перем КомпоновщикНастроек Экспорт;
Перем ТаблицаВариантовОтчета Экспорт;		// Таблица вариантов доступных текущему пользователю
Перем КартинкаЭкзмемплярыОтчетов Экспорт;
Перем КартинкаАналитическиеОтчетыРасшифровка Экспорт;
Перем СхемаОтчета Экспорт;
Перем КопированиеДанных Экспорт;

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчетыУХ.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);
			
	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		НастройкиПоУмолчанию = ЭтотОбъект.НастройкиСхемыКомпоновкиДанныхПоУмолчанию.Получить();
		Если НастройкиПоУмолчанию = Неопределено Тогда
			СхемаОбъект = ПолучитьИзВременногоХранилища(Схема);
			НастройкиПоУмолчанию = СхемаОбъект.НастройкиПоУмолчанию;
		КонецЕсли;
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры
	
Функция СформироватьОтчет(ИсточникНастроек = Неопределено, Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, СтруктураНастроек = Неопределено) Экспорт
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	URLСхемы = ТиповыеОтчетыУХ.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);
	Схема    = ПолучитьИзВременногоХранилища(URLСхемы);
	
	Если Схема = Неопределено Тогда 
		//Не установлена схема компоновки - выдадим соответствующее предупреждение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Не установлена схема компоновки данных'"));
		Возврат Ложь;
	КонецЕсли;
	
	БизнесАнализВызовСервераУХ.ДоработатьТиповойОтчетПередВыводом(ЭтотОбъект, КомпоновщикНастроек);
	АналитическиеОтчетыУХ.ДоработатьАналитическийОтчетПередВыводом(ЭтотОбъект, КомпоновщикНастроек, Схема);
	
	ТипРезультата = ТипЗнч(Результат);
	Если ТипРезультата = Тип("ТаблицаЗначений")  Тогда
		ВыводВТабличныйДокумент = Ложь;
	Иначе
		ВыводВТабличныйДокумент = Истина;
	КонецЕсли; 

	Попытка
		Если ВидПроизвольногоОтчета = 1 Тогда
			// Отчет - Монитор эффективности
			ТЗОтвета = БизнесАнализВызовСервераУХ.СформироватьТаблицуМонитораПоказателей();
		КонецЕсли;
	
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		//Создадим и инициализируем процессор компоновки
		Если ВидПроизвольногоОтчета = 0 Тогда
			// Отчет - обычный отчет.
			ВнешниеНаборыДанных = Новый Структура;
			
			// Источником настроек может быть как этот объект (для обычного режима) либо структура - для управляемого.
			Если ИсточникНастроек = Неопределено Тогда
				ИсточникНастроек = ЭтотОбъект;
			КонецЕсли;
			
			МакетКомпоновки = АналитическиеОтчетыУХ.ПолучитьМакетКомпоновки(ИсточникНастроек, Схема, КомпоновщикНастроек, ДанныеРасшифровки, ВнешниеНаборыДанных, Истина);
			ТиповыеОтчетыУХ.ДополнитьМакетыМакетаКомпоновкиРасшифровкойРесурсов(МакетКомпоновки, КомпоновщикНастроек);

			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки, Истина);
		Иначе
			// Отчет - монитор эффективности.
			МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Схема.НастройкиПоУмолчанию, ДанныеРасшифровки);
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, Новый Структура("ТЗВывод", ТЗОтвета), ДанныеРасшифровки, Истина);
		КонецЕсли;
		
		//Очистим табличный документ - результат
		Результат.Очистить();
		
		//Создадим и инициализируем процессор вывода результата
		Если ВыводВТабличныйДокумент Тогда
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			ПроцессорВывода.УстановитьДокумент(Результат);
		Иначе
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ПроцессорВывода.УстановитьОбъект(Результат);
		КонецЕсли; 

		//Обозначим начало вывода
		ПроцессорВывода.НачатьВывод();
		#Если Клиент Тогда
		Состояние(НСТР("ru='Если Вы хотите прервать вывод отчета, нажмите Ctrl+Break'"));
		#КонецЕсли
		
		//Основной цикл вывода отчета
		Пока Истина Цикл
			
			#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			#КонецЕсли
		
			//Получим следующий элемент результата компоновки
			ЭлементРезультата = ПроцессорКомпоновки.Следующий();
			
			Если ЭлементРезультата = Неопределено Тогда
				//Следующий элемент не получен - заканчиваем цикл вывода
				Прервать;
				
			Иначе
				//Элемент получен - выведем его при помощи процессора вывода
				ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
				
			КонецЕсли;
			
		КонецЦикла;
				
		//Обозначем завершение вывода
		ПроцессорВывода.ЗакончитьВывод();
		
		Если ВыводВТабличныйДокумент Тогда
			ТиповыеОтчетыУХ.ОбновитьЦветаДиаграммы(Результат, ЦветаДиаграммы.Получить());
			Если ВидПроизвольногоОтчета = 1 Тогда // Отчет - монитор эффективности
				ТиповыеОтчетыУХ.ОтобразитьТрендГрафически(Результат);
			КонецЕсли;
		КонецЕсли;
		
	
	Исключение

		Сообщить(Нстр("ru = 'Отчет не сформирован!'") + Символы.ПС + ТиповыеОтчетыУХ.ПолучитьОписаниеРодительскойПричиныИнформацииОбОшибке(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	ТиповыеОтчетыУХ.ИнициализироватьКомпоновщикНастроек(ЭтотОбъект, Схема);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);	
		
КонецФункции

Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ТиповыеОтчетыУХ.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроекУХ.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

#Если Клиент Или ВнешнееСоединение Тогда

Функция ПолучитьСписокВыбораИндикатора(ИмяИндикатора) Экспорт
	
	Список = Новый СписокЗначений;
	Список.Добавить("", "");
	
	Если ИмяИндикатора = "ДоработкаТаблицы,ABCКлассификация," Тогда
		Значение = "ДоработкаТаблицы,ABCКлассификация,AКласс";
		Список.Добавить(Значение, Нстр("ru = 'A-класс'"), , );
		Значение = "ДоработкаТаблицы,ABCКлассификация,BКласс";
		Список.Добавить(Значение, Нстр("ru = 'B-класс'"), , );
		Значение = "ДоработкаТаблицы,ABCКлассификация,CКласс";
		Список.Добавить(Значение, Нстр("ru = 'C-класс'"), , );
	Иначе
		Для Индекс = 1 По 3 Цикл
			Значение = "" + Индекс + ИмяИндикатора;
			Картинка = АналитическиеОтчетыУХ.ПолучитьКартинкуИндикатора(Значение);
			Список.Вставить(1, Значение, " ", , Картинка);
		КонецЦикла;
	КонецЕсли;

	Возврат Список;
	
КонецФункции

#КонецЕсли

Процедура ПолучитьДоступныеРасшифровки(Знач ДанныеРасшифровки, Знач Расшифровка, СписокДоступныхРасшифровок = Неопределено, МассивПолейРасшифровки = Неопределено, URLСхемы = Неопределено) Экспорт
	
	//Перемеменная КонвертацияВXML устанавливается в Истина, если данные расшифровки переданы
	// в функцию в сконвертированными в XML (т.е. в виде строки).
	// Это происходит при вызове функции из Веб-приложения
	КонвертацияВXML = Ложь;
	
	Если ТипЗнч(ДанныеРасшифровки) = Тип("Строка") Тогда
		
		ЧтениеXML = Новый ЧтениеXML();		
		ЧтениеXML.УстановитьСтроку(ДанныеРасшифровки);
		ЧтениеXML.Прочитать();
		ЧтениеXML.Прочитать();
		ДанныеРасшифровки = СериализаторXDTO.ПрочитатьXML( ЧтениеXML, Тип("ДанныеРасшифровкиКомпоновкиДанных"));
		
		ЧтениеXML = Новый ЧтениеXML();		
		ЧтениеXML.УстановитьСтроку(Расшифровка);
		ЧтениеXML.Прочитать();
		Расшифровка = СериализаторXDTO.ПрочитатьXML( ЧтениеXML, Тип("ИдентификаторРасшифровкиКомпоновкиДанных"));
		
		КонвертацияВXML = Истина;
		
	КонецЕсли;
	
	МассивПолейРасшифровки = ТиповыеОтчетыУХ.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, ?(КонвертацияВXML, ЭтотОбъект.КомпоновщикНастроек, Неопределено));	
	МассивПолейРасшифровкиСРесурсами = ТиповыеОтчетыУХ.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, ?(КонвертацияВXML, ЭтотОбъект.КомпоновщикНастроек, Неопределено), Истина);
	
	// Получим имена полей расшифровываемой ячейки
	МассивПолей = Новый Массив; 
	Для каждого ПолеРасшифровки Из МассивПолейРасшифровкиСРесурсами Цикл
		Если ТипЗнч(ПолеРасшифровки) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда 
			МассивПолей.Добавить(ПолеРасшифровки.Поле);
		КонецЕсли;
	КонецЦикла;
	
	СписокДоступныхРасшифровок = Новый СписокЗначений;
	
	Если URLСхемы = Неопределено Тогда
		НаборыДанныхЗапрос = ТиповыеОтчетыУХ.ПолучитьНаборыДанныхЗапрос(ЭтотОбъект.СхемаКомпоновкиДанных.Получить());
	Иначе
		НаборыДанныхЗапрос = ТиповыеОтчетыУХ.ПолучитьНаборыДанныхЗапрос(ПолучитьИзВременногоХранилища(URLСхемы));
	КонецЕсли;
	
	Для каждого НаборДанныхЗапрос Из НаборыДанныхЗапрос Цикл
		Если СтрНайти(НаборДанныхЗапрос.Запрос, "РегистрСведений.ЗначенияПоказателейОтчетов") > 0 Тогда
			СписокДоступныхРасшифровок.Добавить("ТиповыеОтчетыУХ.ОткрытьНастраиваемыйОтчет", Нстр("ru = 'Открыть экземляр отчета'"),, КартинкаЭкзмемплярыОтчетов);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Добавим в расшифровку отчеты из таблицы Расшифровки
	РасшифровкиОтчета = Расшифровки.Получить();
	
	СтруктураОтчета = Новый Структура("Отчет, Поля, Представление, СохраненнаяНастройка");
	
	Если РасшифровкиОтчета <> Неопределено Тогда
		Для каждого ОтчетРасшифровки Из РасшифровкиОтчета Цикл
			ПолеНайдено = ОтчетРасшифровки.Поля.Количество() = 0;
			Для каждого Поле Из МассивПолей Цикл
				Если ОтчетРасшифровки.Поля.НайтиПоЗначению(Поле) <> Неопределено Тогда
					ПолеНайдено = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ПолеНайдено Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтруктураОтчета, ОтчетРасшифровки);
			СписокДоступныхРасшифровок.Добавить(СтруктураОтчета, ОтчетРасшифровки.Представление,, КартинкаАналитическиеОтчетыРасшифровка);
		КонецЦикла;
	КонецЕсли;
	
	Если КонвертацияВXML Тогда		
		МассивПолейРасшифровки = ТиповыеОтчетыУХ.СохранитьМассивПолейВXML(МассивПолейРасшифровки);		
	КонецЕсли;
	
	СписокДоступныхРасшифровок.Добавить("СтандартнаяРасшифровка", Нстр("ru = 'Стандартная расшифровка'"));

КонецПроцедуры

	
// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
    	
	Если ТипЗнч(Отбор) = Тип("Строка") Тогда		
		МассивПолейОтбора = ТиповыеОтчетыУХ.ВосстановитьМассивПолейИзXML(Отбор);
	Иначе
		МассивПолейОтбора = Отбор;
	КонецЕсли;
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из МассивПолейОтбора Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;
				
	КонецЦикла;
	
	ТиповыеОтчетыУХ.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПрименитьОбщийОтбор(ОбщийОтбор) Экспорт
	
	Для Каждого Элемент Из ОбщийОтбор.Элементы Цикл
		
		Если НЕ Элемент.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ВнутренниеОтборы = КомпоновщикНастроек.Настройки.Отбор.Элементы;
		
		Для Каждого ВнЭлемент Из ВнутренниеОтборы Цикл
			
			Если Элемент.ЛевоеЗначение = ВнЭлемент.ЛевоеЗначение
			   И Элемент.Использование = ВнЭлемент.Использование Тогда
				ВнЭлемент.Использование = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, Элемент);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Если Не ТиповыеОтчетыУХ.ЗаписьОтчетаДоступна(ЭтотОбъект) Тогда
		Сообщить(Нстр("ru = 'Право на изменение отчета имеет только администратор отчета и пользователь с полными правами'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		Справочники.ПроизвольныеОтчеты.ПометитьНаУдалениеСохраненныеНастройкиПоОтчету(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Заполнение справочника на основании источника данных
Процедура ОбработкаЗаполнения(Основание)
	
	Если Ссылка.Пустая() Тогда
		
		Если НЕ ЭтоГруппа Тогда
			АдминистраторОтчета = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
		
		Владелец            = Справочники.ГруппыПользователей.ВсеПользователи;
		
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.Запросы") Тогда
		ИсточникДанныхОтчета = Основание.Ссылка;
		Наименование = Строка(Основание.Ссылка);
		СхемаКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьСхемуКомпоновкиПоИсточникуДанных(ИсточникДанныхОтчета));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Владелец = Справочники.ГруппыПользователей.ВсеПользователи;
	Наименование = ОбъектКопирования.Наименование + Нстр("ru = '(копия)'");
	КопированиеДанных = Истина;
	
КонецПроцедуры

Функция ПолучитьСхемуКомпоновкиПоИсточникуДанных(ИсточникДанных) Экспорт

	СКД = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанныхСКД = СКД.ИсточникиДанных.Добавить();
	ИсточникДанныхСКД.Имя = "ИсточникДанных1";
	ИсточникДанныхСКД.ТипИсточникаДанных = "Local";

	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных1";
	НаборДанных.ИсточникДанных = ИсточникДанныхСКД.Имя;
	НаборДанных.Запрос = ИсточникДанных.ТекстЗапроса;
	
	// Заполение полей итога
	Для каждого ПолеИтога Из ИсточникДанных.ПоляИтога Цикл
		НовоеПолеИтога = СКД.ПоляИтога.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеПолеИтога, ПолеИтога);
	КонецЦикла;
	
	// Заполение параметров
	Для каждого Элемент Из ИсточникДанных.ПараметрыЗапроса Цикл
		НовыйЭлемент = СКД.Параметры.Добавить();
		НовыйЭлемент.Имя = Элемент.Имя;
		НовыйЭлемент.Значение = Элемент.Значение;
		
	КонецЦикла;
	
	Попытка
		Построитель = Новый ПостроительОтчета;
		Построитель.Текст = ИсточникДанных.ТекстЗапроса;
		Построитель.УстановитьНастройки(ИсточникДанных.ОтборыХранилище.Получить());
	Исключение
	КонецПопытки;
	
	// Заполение отбора
	Для каждого Элемент Из Построитель.Отбор Цикл
		НовыйЭлемент = СКД.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элемент.ПутьКДанным);
		ЗаполнитьОтборКомпоновщикаПоОтбору(НовыйЭлемент, Элемент);
	КонецЦикла;                                                                             
	
	Возврат СКД;
	
КонецФункции

Процедура ЗаполнитьОтборКомпоновщикаПоОтбору(ОтборКомпоновщика, Отбор)

	ЗаполнитьЗначенияСвойств(Отбор, ОтборКомпоновщика, "Использование, Представление");
	
	Если ОтборКомпоновщика.ВидСравнения = ВидСравнения.Больше Тогда
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравнения.ВИерархии Тогда
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравнения.ВСписке Тогда
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравнения.Меньше Тогда
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравнения.НеРавно Тогда
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравнения.Равно Тогда
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравнения.Содержит Тогда
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	КонецЕсли;
	
	ОтборКомпоновщика.ПравоеЗначение = Отбор.Значение;
	
КонецПроцедуры

Функция ПолучитьНовыйКлюч(ТаблицаИсточникиДанных)
	
	МаксКлюч = 0;
	
	Для каждого ЭлКоллекции Из ТаблицаИсточникиДанных Цикл
		Если МаксКлюч <= ЭлКоллекции.КлючИсточника Тогда
			МаксКлюч = ЭлКоллекции.КлючИсточника + 1;
		КонецЕсли;	
	КонецЦикла; 
	
	Возврат МаксКлюч;

КонецФункции //

Функция ДобавитьИсточникДанных(ТаблицаИсточникиДанных) Экспорт

	НовыйИсточникДанных = ТаблицаИсточникиДанных.Добавить();
	НовыйИсточникДанных.КлючИсточника = ПолучитьНовыйКлюч(ТаблицаИсточникиДанных);

КонецФункции //


Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;

Если КомпоновщикНастроек = Неопределено Тогда
	КомпоновщикНастроек =  Новый КомпоновщикНастроекКомпоновкиДанных;
КонецЕсли;

#КонецЕсли