#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ПолучитьДоступныеРасшифровки(Знач Объект, Знач Внеш_ДанныеРасшифровки, Знач Расшифровка, Знач РасшифровкиОтчета, СписокДоступныхРасшифровок = Неопределено, МассивПолейРасшифровки = Неопределено, URLСхемы = Неопределено, UIDФормы = Неопределено, ДобавлятьРасшифровкуВИБ = Ложь) Экспорт
	
	КартинкаЭкземплярыОтчетов				 = БиблиотекаКартинок.НастраиваемыеОтчеты;
	КартинкаАналитическиеОтчетыРасшифровка	 = БиблиотекаКартинок.АналитическиеОтчетыРасшифровка;
	КартинкаЖурналДокументов				 = БиблиотекаКартинок.ЖурналДокументов;
	// Данные расшифровки могут быть переданы как самим объектом, так и адресом временного хранилища, где они расположены.
	Если ТипЗнч(Внеш_ДанныеРасшифровки) = Тип("Строка") Тогда
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(Внеш_ДанныеРасшифровки);
	Иначе
		ДанныеРасшифровки = Внеш_ДанныеРасшифровки;
	КонецЕсли;
	
	// Сохраним полученный массив расшифровок во временном хранилище.
	Если UIDФормы <> Неопределено Тогда
		Вн_МассивПолейРасшифровки = ТиповыеОтчетыУХ.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, Неопределено);
		МассивПолейРасшифровки    = ПоместитьВоВременноеХранилище(Вн_МассивПолейРасшифровки, UIDФормы);
	КонецЕсли;
	
	МассивПолейРасшифровкиСРесурсами = ТиповыеОтчетыУХ.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, Неопределено, Истина);
	ИсточникДанныхОтчета = Объект.ИсточникДанныхОтчета;
	ИспользуетсяОперанд = ТипЗнч(Объект.ИсточникДанныхОтчета) = Тип("СправочникСсылка.ИсточникиДанныхДляРасчетов");
	// Получим имена полей расшифровываемой ячейки
	ДополнительнаяРасшифровка = Новый Соответствие;
	
	МассивПолей = Новый Массив; 
	Для каждого ПолеРасшифровки Из МассивПолейРасшифровкиСРесурсами Цикл
		Если ТипЗнч(ПолеРасшифровки) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда 
			МассивПолей.Добавить(ПолеРасшифровки.Поле);
			Если ИспользуетсяОперанд Тогда
				НайденнаяЗапись = ИсточникДанныхОтчета.ПравилаИспользованияПолейЗапроса.Найти(ПолеРасшифровки.Поле, "Синоним");
				Если НайденнаяЗапись <> Неопределено И НайденнаяЗапись.КодАналитики <> "Значение" Тогда
					ДополнительнаяРасшифровка.Вставить(НайденнаяЗапись.Поле, ПолеРасшифровки.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СписокДоступныхРасшифровок = Новый СписокЗначений;
	
	ИсточникДанныхОтчета = Объект.ИсточникДанныхОтчета;
	Если ИспользуетсяОперанд Тогда
		
		Контекст = Новый Структура("Организация, Сценарий, ПериодОтчета, ОсновнаяВалюта, УправляемыйРежим, ИспользуемаяИБ"
								   , Справочники.Организации.ПустаяСсылка()
								   , Справочники.Сценарии.ПустаяСсылка()
								   , Справочники.Периоды.ПустаяСсылка()
								   , Справочники.Валюты.ПустаяСсылка()
								   , Истина
								   , Объект.ИспользуемаяИБ);
		
		ПолеОрганизация = Новый ПараметрКомпоновкиДанных("Организация");
		ПолеСценарий    = Новый ПараметрКомпоновкиДанных("Сценарий");
		ПолеПериод      = Новый ПараметрКомпоновкиДанных("ПериодОтчета");
		ПолеВалюта      = Новый ПараметрКомпоновкиДанных("ОсновнаяВалюта");
		
		Для Каждого Элемент Из ДанныеРасшифровки.Настройки.ПараметрыДанных.Элементы Цикл
			
			Если Элемент.Параметр = ПолеОрганизация Тогда
				Контекст.Вставить("Организация", Элемент.Значение);
			ИначеЕсли Элемент.Параметр = ПолеСценарий Тогда
				Контекст.Вставить("Сценарий", Элемент.Значение);
			ИначеЕсли Элемент.Параметр = ПолеПериод Тогда
				Контекст.Вставить("ПериодОтчета", Элемент.Значение);
			ИначеЕсли Элемент.Параметр = ПолеВалюта Тогда
				Контекст.Вставить("ОсновнаяВалюта", Элемент.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		СписокДоступныхРасшифровок.Добавить(Новый ФиксированнаяСтруктура("Операнд, Контекст, ДополнительнаяРасшифровка", ИсточникДанныхОтчета, Контекст, ДополнительнаяРасшифровка), "Расшифровать", , БиблиотекаКартинок.ВнешниеИнформационныеБазы);
		
	Иначе
		НаборыДанныхЗапрос = ТиповыеОтчетыУХ.ПолучитьНаборыДанныхЗапрос(ПолучитьИзВременногоХранилища(URLСхемы));
		
		Для каждого НаборДанныхЗапрос Из НаборыДанныхЗапрос Цикл
			Если СтрНайти(НаборДанныхЗапрос.Запрос, "РегистрСведений.ЗначенияПоказателейОтчетов") > 0 Тогда
				СписокДоступныхРасшифровок.Добавить("ТиповыеОтчетыУХ.ОткрытьНастраиваемыйОтчет", Нстр("ru = 'Основная расшифровка'"),, КартинкаЭкземплярыОтчетов);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураОтчета = Новый Структура("Отчет, Поля, Представление, СохраненнаяНастройка");
		
		Если РасшифровкиОтчета <> Неопределено Тогда
			Для каждого ОтчетРасшифровки Из РасшифровкиОтчета Цикл
				ПолеНайдено = Ложь;
				Если ОтчетРасшифровки.РасшифровываемыеПоля.Количество() = 0 Тогда
					ПолеНайдено = Истина;
				Иначе
					Для каждого Поле Из МассивПолей Цикл
						Если ОтчетРасшифровки.РасшифровываемыеПоля.НайтиПоЗначению(Поле) <> Неопределено Тогда
							ПолеНайдено = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если Не ПолеНайдено Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтруктураОтчета, ОтчетРасшифровки);
				ПредставлениеОтчета = ?(ПустаяСтрока(ОтчетРасшифровки.Представление), ОтчетРасшифровки.Отчет.Наименование, ОтчетРасшифровки.Представление);
				СписокДоступныхРасшифровок.Добавить(Новый Структура("Отчет, Поля, Представление, СохраненнаяНастройка", ОтчетРасшифровки.Отчет, ОтчетРасшифровки.РасшифровываемыеПоля, ОтчетРасшифровки.Представление, ОтчетРасшифровки.ВариантОтчета)
													, ПредставлениеОтчета,, КартинкаАналитическиеОтчетыРасшифровка);
				
			КонецЦикла;
		КонецЕсли;
		// Добавим расшифровки объектом информационной базы.
		СтруктураТаблицРасшифровки = БизнесАнализСерверУХ.ПолучитьСтруктуруТаблицРасшифровкиОбъектомИнформационнойБазыПоВладельцу(Объект.Ссылка);
		РасшифровкиОбъектом = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураТаблицРасшифровки, "РасшифровкиОбъектом", Новый ТаблицаЗначений);
		Для Каждого ТекРасшифровкиОбъектом Из РасшифровкиОбъектом Цикл
			СтруктураДобавления = Новый Структура;
			СтруктураДобавления.Вставить("Отчет", Неопределено);
			СтруктураДобавления.Вставить("Поля", Неопределено);
			СтруктураДобавления.Вставить("Представление", Неопределено);
			СтруктураДобавления.Вставить("СохраненнаяНастройка", Неопределено);
			СтруктураДобавления.Вставить("ТипОбъектаМетаданных", ТекРасшифровкиОбъектом.ТипОбъектаМетаданных);
			СтруктураДобавления.Вставить("НаименованиеОбъектаМетаданных", ТекРасшифровкиОбъектом.НаименованиеОбъектаМетаданных);
			СтруктураДобавления.Вставить("ФормаРасшифровки", ТекРасшифровкиОбъектом.ФормаРасшифровки);
			Если ЗначениеЗаполнено(ТекРасшифровкиОбъектом.Представление) Тогда
				ПредставлениеОтчета = ТекРасшифровкиОбъектом.Представление;
			Иначе	
				ПредставлениеОтчета = ТекРасшифровкиОбъектом.НаименованиеОбъектаМетаданных;
			КонецЕсли;
			СписокДоступныхРасшифровок.Добавить(СтруктураДобавления, ПредставлениеОтчета, , КартинкаЖурналДокументов);
		КонецЦикла;
		
		СписокДоступныхРасшифровок.Вставить(0, "СтандартнаяРасшифровка", Нстр("ru = 'Стандартная расшифровка'"));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВернутьРасшифровываемыйПоказатель(Знач ДоступныеРасшифровки, Знач Расшифровка) Экспорт
	
	Индекс = Цел(Расшифровка / 11) * 11 + 1;
	Возврат ДоступныеРасшифровки.Элементы[Индекс].ПолучитьПоля()[0].Значение;
	
КонецФункции

Функция ВернутьGUIDИсточника(НаборЗаписей, ИдентификаторПроцесса, Показатель, ИсточникДанных, Организация, ПериодОтчета, Сценарий, ОсновнаяВалюта, ВнешняяИБ)
	
	НайденныеСтроки = НаборЗаписей.НайтиСтроки(Новый Структура("ИсточникДанных, ПериодОтчета, Сценарий, ВнешняяИБ"
																, ИсточникДанных
																, ПериодОтчета
																, Сценарий
																, ВнешняяИБ));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0].GUID;
	Иначе
		НоваяСтрока = НаборЗаписей.Добавить();
		НоваяСтрока.ИдентификаторПроцесса = ИдентификаторПроцесса;
		НоваяСтрока.Показатель            = Показатель;
		НоваяСтрока.ИсточникДанных        = ИсточникДанных;
		НоваяСтрока.Организация           = Организация;
		НоваяСтрока.ПериодОтчета          = ПериодОтчета;
		НоваяСтрока.Сценарий              = Сценарий;
		НоваяСтрока.ОсновнаяВалюта        = ОсновнаяВалюта;
		НоваяСтрока.ВнешняяИБ             = ВнешняяИБ;
		НоваяСтрока.GUID                  = Новый УникальныйИдентификатор;
		
		Возврат НоваяСтрока.GUID;
		
	КонецЕсли;
	
КонецФункции

Функция ВернутьЗначениеПоляМКП(ТаблицаДляРасчета, GUID)
	
	НайденнаяСтрока = ТаблицаДляРасчета.Найти(GUID, "GUID");
	Если НайденнаяСтрока <> Неопределено Тогда
		Возврат НайденнаяСтрока.Значение;
	Иначе
		Возврат NULL;
	КонецЕсли;
	
КонецФункции

// Возвращает таблицу для расчета значений показателей МКП.
Функция ПолучитьТаблицуДляРасчета(МониторКлючевыхПоказателейВход, ОрганизацияВход, ДополнитьПолямиДляВыводаВДеревеВход)
	// Инициализация.
	РезультатФункции = Новый ТаблицаЗначений;	
	ОписаниеТиповЧисло = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18, 5);
	ОписаниеТиповУникальныйИдентификатор = Новый ОписаниеТипов("УникальныйИдентификатор");
	// Получение данных из базы.
	Запрос = Новый Запрос;
	Если ДополнитьПолямиДляВыводаВДеревеВход Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоказателиМонитораКлючевыхПоказателей.Ссылка КАК Показатель,
		|	ПоказателиМонитораКлючевыхПоказателей.Проекция КАК Проекция,
		|	ЕСТЬNULL(ЦелиКлючевыеПоказатели.Ссылка, ЗНАЧЕНИЕ(Справочник.Цели.ПустаяСсылка)) КАК Цель,
		|	ЛОЖЬ КАК Обработано,
		|	ПроизвольныеОтчетыИсточникиДанных.ВнешняяИБ КАК ВнешняяИБ,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ПоказателиМонитораКлючевыхПоказателей.Ответственный ССЫЛКА Справочник.Пользователи
		|				ТОГДА ПоказателиМонитораКлючевыхПоказателей.Ответственный
		|			ИНАЧЕ ОтветственныеПоПоказателю.Пользователь
		|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Ответственный,
		|	ПоказателиМонитораКлючевыхПоказателей.ИсточникЗначенияТекущегоПериода КАК ИсточникЗначенияТекущегоПериода,
		|	ВЫБОР
		|		КОГДА ПоказателиМонитораКлючевыхПоказателей.ИсточникЗначенияТекущегоПериода = ЗНАЧЕНИЕ(Справочник.ИсточникиДанныхДляРасчетов.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ИспользуетсяФактическоеЗначениеТекущегоПериода,
		|	ВЫБОР
		|		КОГДА ПоказателиМонитораКлючевыхПоказателей.ИсточникЗначенияПериодаСравнения = ЗНАЧЕНИЕ(Справочник.ИсточникиДанныхДляРасчетов.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ИспользуетсяФактическоеЗначениеПредыдущегоПериода,
		|	ВЫБОР
		|		КОГДА ПоказателиМонитораКлючевыхПоказателей.ИсточникПлановогоЗначения = ЗНАЧЕНИЕ(Справочник.ИсточникиДанныхДляРасчетов.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ИспользуетсяПлановоеЗначение,
		|	ПоказателиМонитораКлючевыхПоказателей.ИсточникЗначенияПериодаСравнения КАК ИсточникЗначенияПериодаСравнения,
		|	ПоказателиМонитораКлючевыхПоказателей.ИсточникПлановогоЗначения КАК ИсточникПлановогоЗначения,
		|	ПоказателиМонитораКлючевыхПоказателей.Состояние_ЛевыйДиапазон КАК ИсточникЛевыйДиапазон,
		|	ПоказателиМонитораКлючевыхПоказателей.Состояние_ПравыйДиапазон КАК ИсточникПравыйДиапазон,
		|	ПоказателиМонитораКлючевыхПоказателей.Состояние_ЛевыйДиапазон ССЫЛКА Справочник.ИсточникиДанныхДляРасчетов КАК РассчитыватьЛевыйДиапазон,
		|	ПоказателиМонитораКлючевыхПоказателей.Состояние_ПравыйДиапазон ССЫЛКА Справочник.ИсточникиДанныхДляРасчетов КАК РассчитыватьПравыйДиапазон,
		|	ПоказателиМонитораКлючевыхПоказателей.ПорогЗначимостиТренда КАК ПорогЗначимостиТренда,
		|	ПоказателиМонитораКлючевыхПоказателей.ТрактовкаПоложительногоОтклонения КАК ТрактовкаПоложительногоОтклонения,
		|	ПоказателиМонитораКлючевыхПоказателей.ДопустимоеОтклонениеОтПлана КАК ДопустимоеОтклонениеОтПлана,
		|	ПоказателиМонитораКлючевыхПоказателей.ПредельноеОтклонениеОтПлана КАК ПредельноеОтклонениеОтПлана
		|ИЗ
		|	Справочник.ПроизвольныеОтчеты.ИсточникиДанных КАК ПроизвольныеОтчетыИсточникиДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиМонитораКлючевыхПоказателей КАК ПоказателиМонитораКлючевыхПоказателей
		|		ПО ПроизвольныеОтчетыИсточникиДанных.ИсточникДанных = ПоказателиМонитораКлючевыхПоказателей.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеПоПоказателю
		|		ПО (ОтветственныеПоПоказателю.Организация = &ОтборОрганизация)
		|			И (ОтветственныеПоПоказателю.Роль = ПоказателиМонитораКлючевыхПоказателей.Ответственный)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Цели.КлючевыеПоказатели КАК ЦелиКлючевыеПоказатели
		|		ПО (ЦелиКлючевыеПоказатели.Показатель = ПоказателиМонитораКлючевыхПоказателей.Ссылка)
		|ГДЕ
		|	ПроизвольныеОтчетыИсточникиДанных.Ссылка = &МониторКлючевыхПоказателей";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоказателиМонитораКлючевыхПоказателей.Ссылка КАК Показатель,
		|	ПроизвольныеОтчетыИсточникиДанных.ВнешняяИБ КАК ВнешняяИБ,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ПоказателиМонитораКлючевыхПоказателей.Ответственный ССЫЛКА Справочник.Пользователи
		|				ТОГДА ПоказателиМонитораКлючевыхПоказателей.Ответственный
		|			ИНАЧЕ ОтветственныеПоПоказателю.Пользователь
		|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Ответственный,
		|	ПоказателиМонитораКлючевыхПоказателей.ИсточникЗначенияТекущегоПериода КАК ИсточникЗначенияТекущегоПериода,
		|	ВЫБОР
		|		КОГДА ПоказателиМонитораКлючевыхПоказателей.ИсточникЗначенияТекущегоПериода = ЗНАЧЕНИЕ(Справочник.ИсточникиДанныхДляРасчетов.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ИспользуетсяФактическоеЗначениеТекущегоПериода,
		|	ВЫБОР
		|		КОГДА ПоказателиМонитораКлючевыхПоказателей.ИсточникЗначенияПериодаСравнения = ЗНАЧЕНИЕ(Справочник.ИсточникиДанныхДляРасчетов.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ИспользуетсяФактическоеЗначениеПредыдущегоПериода,
		|	ВЫБОР
		|		КОГДА ПоказателиМонитораКлючевыхПоказателей.ИсточникПлановогоЗначения = ЗНАЧЕНИЕ(Справочник.ИсточникиДанныхДляРасчетов.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ИспользуетсяПлановоеЗначение,
		|	ПоказателиМонитораКлючевыхПоказателей.ИсточникЗначенияПериодаСравнения КАК ИсточникЗначенияПериодаСравнения,
		|	ПоказателиМонитораКлючевыхПоказателей.ИсточникПлановогоЗначения КАК ИсточникПлановогоЗначения,
		|	ПоказателиМонитораКлючевыхПоказателей.Состояние_ЛевыйДиапазон КАК ИсточникЛевыйДиапазон,
		|	ПоказателиМонитораКлючевыхПоказателей.Состояние_ПравыйДиапазон КАК ИсточникПравыйДиапазон,
		|	ПоказателиМонитораКлючевыхПоказателей.Состояние_ЛевыйДиапазон ССЫЛКА Справочник.ИсточникиДанныхДляРасчетов КАК РассчитыватьЛевыйДиапазон,
		|	ПоказателиМонитораКлючевыхПоказателей.Состояние_ПравыйДиапазон ССЫЛКА Справочник.ИсточникиДанныхДляРасчетов КАК РассчитыватьПравыйДиапазон,
		|	ПоказателиМонитораКлючевыхПоказателей.ПорогЗначимостиТренда КАК ПорогЗначимостиТренда,
		|	ПоказателиМонитораКлючевыхПоказателей.ТрактовкаПоложительногоОтклонения КАК ТрактовкаПоложительногоОтклонения,
		|	ПоказателиМонитораКлючевыхПоказателей.ДопустимоеОтклонениеОтПлана КАК ДопустимоеОтклонениеОтПлана,
		|	ПоказателиМонитораКлючевыхПоказателей.ПредельноеОтклонениеОтПлана КАК ПредельноеОтклонениеОтПлана
		|ИЗ
		|	Справочник.ПроизвольныеОтчеты.ИсточникиДанных КАК ПроизвольныеОтчетыИсточникиДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиМонитораКлючевыхПоказателей КАК ПоказателиМонитораКлючевыхПоказателей
		|		ПО ПроизвольныеОтчетыИсточникиДанных.ИсточникДанных = ПоказателиМонитораКлючевыхПоказателей.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеПоПоказателю
		|		ПО (ОтветственныеПоПоказателю.Организация = &ОтборОрганизация)
		|			И (ОтветственныеПоПоказателю.Роль = ПоказателиМонитораКлючевыхПоказателей.Ответственный)
		|ГДЕ
		|	ПроизвольныеОтчетыИсточникиДанных.Ссылка = &МониторКлючевыхПоказателей";
	КонецЕсли;
	Запрос.УстановитьПараметр("МониторКлючевыхПоказателей", МониторКлючевыхПоказателейВход);
	Запрос.УстановитьПараметр("ОтборОрганизация"          , ОрганизацияВход);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	// Добавление дополнительных полей и вывод результата.
	РезультатФункции.Колонки.Добавить("GUIDТекущееЗначение",					 ОписаниеТиповУникальныйИдентификатор);
	РезультатФункции.Колонки.Добавить("GUIDЗначениеСравнения",					 ОписаниеТиповУникальныйИдентификатор);
	РезультатФункции.Колонки.Добавить("GUIDПлановоеЗначение",					 ОписаниеТиповУникальныйИдентификатор);
	РезультатФункции.Колонки.Добавить("ФактическоеЗначениеТекущегоПериода",		 ОписаниеТиповЧисло);
	РезультатФункции.Колонки.Добавить("ФактическоеЗначениеПредыдущегоПериода",	 ОписаниеТиповЧисло);
	РезультатФункции.Колонки.Добавить("ИзменениеАбсолютное",					 ОписаниеТиповЧисло);
	РезультатФункции.Колонки.Добавить("ИзменениеОтносительное",					 ОписаниеТиповЧисло);
	РезультатФункции.Колонки.Добавить("ОтклонениеОтПланаАбсолютное",			 ОписаниеТиповЧисло);
	РезультатФункции.Колонки.Добавить("ОтклонениеОтПланаОтносительное",			 ОписаниеТиповЧисло);
	РезультатФункции.Колонки.Добавить("ПлановоеЗначение" ,						 ОписаниеТиповЧисло);
	РезультатФункции.Колонки.Добавить("ПроцентВыполненияПлана" ,				 ОписаниеТиповЧисло);
	РезультатФункции.Колонки.Добавить("Состояние");
	РезультатФункции.Колонки.Добавить("Тренд");
	Возврат РезультатФункции;
КонецФункции		// ПолучитьТаблицуДляРасчета()

// Возвращает копию таблицы ТаблицаДляРасчетаВход, в которой заполнены вычисляемые поля по результатам
// значений из ТаблицаРезультатовРасчетаВход. Когда таблица  АнализируемыеПоказателиВход не равно Неопределено,
// будут также заполнены строки по показателям из ТаблицаДляРасчетаВход. 
Функция ОбновитьВычисляемыеПоляВТаблицеРасчетов(ТаблицаДляРасчетаВход, ТаблицаРезультатовРасчетаВход, АнализируемыеПоказателиВход = Неопределено) Экспорт
	РезультатФункции = ТаблицаДляРасчетаВход.Скопировать();
	Для Каждого ТекущаяСтрока Из РезультатФункции Цикл
		
		ТекущаяСтрока.ФактическоеЗначениеПредыдущегоПериода = ВернутьЗначениеПоляМКП(ТаблицаРезультатовРасчетаВход, ТекущаяСтрока.GUIDЗначениеСравнения);
		ТекущаяСтрока.ФактическоеЗначениеТекущегоПериода    = ВернутьЗначениеПоляМКП(ТаблицаРезультатовРасчетаВход, ТекущаяСтрока.GUIDТекущееЗначение);
		ТекущаяСтрока.ПлановоеЗначение                      = ВернутьЗначениеПоляМКП(ТаблицаРезультатовРасчетаВход, ТекущаяСтрока.GUIDПлановоеЗначение);
		
		ТекущаяСтрока.ИзменениеАбсолютное                = NULL;
		ТекущаяСтрока.ИзменениеОтносительное             = NULL;
		ТекущаяСтрока.ОтклонениеОтПланаАбсолютное        = NULL;
		ТекущаяСтрока.ОтклонениеОтПланаОтносительное     = NULL;
		ТекущаяСтрока.ПроцентВыполненияПлана             = NULL;
		
		Состояние = 1;
		Тренд     = 4;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.GUIDТекущееЗначение) Тогда
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.GUIDЗначениеСравнения) Тогда
				
				ТекущаяСтрока.ИзменениеАбсолютное = ТекущаяСтрока.ФактическоеЗначениеТекущегоПериода - ТекущаяСтрока.ФактическоеЗначениеПредыдущегоПериода ;
				ТекущаяСтрока.ИзменениеОтносительное  = ?(ТекущаяСтрока.ФактическоеЗначениеПредыдущегоПериода = 0, 0, 100 * ТекущаяСтрока.ИзменениеАбсолютное/ОбщегоНазначенияУХ.ЗначениеПоМодулю(ТекущаяСтрока.ФактическоеЗначениеПредыдущегоПериода));
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.GUIDПлановоеЗначение) Тогда
				ТекПоказатель = ТекущаяСтрока.Показатель;
				Если ТекПоказатель.ИспользоватьКоридорЗначений Тогда
					ТекЗначениеФакт = ТекущаяСтрока.ФактическоеЗначениеТекущегоПериода;
					Если БизнесАнализКлиентСерверУХ.ЗначениеПоказателяВКоридореЗначений(ТекПоказатель, ТекЗначениеФакт) Тогда
						Состояние = 0;
					Иначе
						Состояние = 2;
					КонецЕсли;
				Иначе	
					ТекущаяСтрока.ОтклонениеОтПланаАбсолютное =   ТекущаяСтрока.ФактическоеЗначениеТекущегоПериода - ТекущаяСтрока.ПлановоеЗначение;
					ТекущаяСтрока.ОтклонениеОтПланаОтносительное = ?(ТекущаяСтрока.ПлановоеЗначение = 0, 0, 100 * ТекущаяСтрока.ОтклонениеОтПланаАбсолютное / ОбщегоНазначенияУХ.ЗначениеПоМодулю(ТекущаяСтрока.ПлановоеЗначение));
					ОтклонениеОтПланаНеотрицательно = (ТекущаяСтрока.ОтклонениеОтПланаОтносительное >= 0);
					СостояниеТрактуетсяВерно = (ОтклонениеОтПланаНеотрицательно = ТекущаяСтрока.ТрактовкаПоложительногоОтклонения);
					Если СостояниеТрактуетсяВерно Тогда
						Состояние = 0;
						ТекущаяСтрока.ПроцентВыполненияПлана = 100;
					Иначе
						ОтклонениеПоМодулю = ОбщегоНазначенияУХ.ЗначениеПоМодулю(ТекущаяСтрока.ОтклонениеОтПланаОтносительное);
						
						Если ОтклонениеПоМодулю > 100 Тогда
							ТекущаяСтрока.ПроцентВыполненияПлана = 0;
						Иначе
							ТекущаяСтрока.ПроцентВыполненияПлана = 100 - ОтклонениеПоМодулю;
						КонецЕсли;
						
						Если ОтклонениеПоМодулю < ТекущаяСтрока.ДопустимоеОтклонениеОтПлана Тогда
							Состояние = 0;
						ИначеЕсли ОтклонениеПоМодулю < ТекущаяСтрока.ПредельноеОтклонениеОтПлана Тогда
							Состояние = 1;
						Иначе
							Состояние = 2;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;

			КонецЕсли;
			Если ОбщегоНазначенияУХ.ЗначениеПоМодулю(ТекущаяСтрока.ИзменениеОтносительное) < ТекущаяСтрока.ПорогЗначимостиТренда Тогда
				Тренд = 4;
			Иначе
				Тренд = ?(ТекущаяСтрока.ИзменениеАбсолютное >= 0, 3, 5);
			КонецЕсли;			
		КонецЕсли;
		
		ТекущаяСтрока.Состояние = Состояние;
		ТекущаяСтрока.Тренд    = Тренд;
		
		Если АнализируемыеПоказателиВход <> Неопределено Тогда
			
			ТекСтрока = АнализируемыеПоказателиВход.Найти(ТекущаяСтрока.Показатель, "Показатель");
			Если ТекСтрока <> Неопределено Тогда
				ТекСтрока.НовоеСостояние = Состояние;
				ТекСтрока.НовыйТренд     = Тренд;
				ТекСтрока.ФактическоеЗначениеТекущегоПериода = ТекущаяСтрока.ФактическоеЗначениеТекущегоПериода;
				ТекСтрока.ПлановоеЗначение = ТекущаяСтрока.ПлановоеЗначение;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	// Удалим лишние колонки.
	РезультатФункции.Колонки.Удалить("GUIDТекущееЗначение");
	РезультатФункции.Колонки.Удалить("GUIDЗначениеСравнения");
	РезультатФункции.Колонки.Удалить("GUIDПлановоеЗначение");
	
	Возврат РезультатФункции;
	
КонецФункции		// ОбновитьВычисляемыеПоляВТаблицеРасчетов()

// Возвращает таблицу с результатами расчета показателей МКП для идентификатора 
// процесса ИдентификаторПроцессаВход.
Функция ПолучитьТаблицуРезультатовРасчетаПроцесса(ИдентификаторПроцессаВход) Экспорт
	РезультатФункции = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетМонитораКлючевыхПоказателей.ИдентификаторПроцесса КАК ИдентификаторПроцесса,
	|	РасчетМонитораКлючевыхПоказателей.Показатель КАК Показатель,
	|	РасчетМонитораКлючевыхПоказателей.ИсточникДанных КАК ИсточникДанных,
	|	РасчетМонитораКлючевыхПоказателей.ПериодОтчета КАК ПериодОтчета,
	|	РасчетМонитораКлючевыхПоказателей.Сценарий КАК Сценарий,
	|	РасчетМонитораКлючевыхПоказателей.ВнешняяИБ КАК ВнешняяИБ,
	|	РасчетМонитораКлючевыхПоказателей.Организация КАК Организация,
	|	РасчетМонитораКлючевыхПоказателей.Значение КАК Значение,
	|	РасчетМонитораКлючевыхПоказателей.GUID КАК GUID
	|ИЗ
	|	РегистрСведений.РасчетМонитораКлючевыхПоказателей КАК РасчетМонитораКлючевыхПоказателей
	|ГДЕ
	|	РасчетМонитораКлючевыхПоказателей.Обработан = ИСТИНА
	|	И РасчетМонитораКлючевыхПоказателей.ИдентификаторПроцесса = &ИдентификаторПроцесса";
	Запрос.УстановитьПараметр("ИдентификаторПроцесса", ИдентификаторПроцессаВход);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	РезультатФункции.Индексы.Добавить("GUID");
	Возврат РезультатФункции;	
КонецФункции		// ПолучитьТаблицуРезультатовРасчета()

Функция ПолучитьТаблицуЗначенийПоказателейМКП(МониторКлючевыхПоказателей, ВнешнийКонтекст, АнализируемыеПоказатели = Неопределено, ДополнитьПолямиДляВыводаВДереве = Ложь)
	
	ИдентификаторПроцесса = Новый УникальныйИдентификатор;
	ТаблицаДляРасчета = ПолучитьТаблицуДляРасчета(МониторКлючевыхПоказателей, ВнешнийКонтекст.Организация, ДополнитьПолямиДляВыводаВДереве);
	// Формирование задания для расчёта.
	НаборЗаписей = РегистрыСведений.РасчетМонитораКлючевыхПоказателей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторПроцесса.Значение = ИдентификаторПроцесса;
	НаборЗаписей.Отбор.ИдентификаторПроцесса.Использование = Истина;
	ВременнаяТаблица = НаборЗаписей.Выгрузить();
	МассивВнешнихИБ  = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из ТаблицаДляРасчета Цикл
		
		Если МассивВнешнихИБ.Найти(ТекущаяСтрока.ВнешняяИБ) = Неопределено Тогда
			МассивВнешнихИБ.Добавить(ТекущаяСтрока.ВнешняяИБ);
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Показатель", ТекущаяСтрока.Показатель);
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ИсточникЗначенияТекущегоПериода) Тогда
			
			ТекущаяСтрока.GUIDТекущееЗначение = ВернутьGUIDИсточника(ВременнаяТаблица, ИдентификаторПроцесса, ТекущаяСтрока.Показатель, ТекущаяСтрока.ИсточникЗначенияТекущегоПериода
																	, ВнешнийКонтекст.Организация, ВнешнийКонтекст.БазовыйПериод, ВнешнийКонтекст.БазовыйСценарий, ВнешнийКонтекст.ОсновнаяВалюта
																	, ТекущаяСтрока.ВнешняяИБ);
																	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ИсточникЗначенияПериодаСравнения) Тогда
			
			ТекущаяСтрока.GUIDЗначениеСравнения = ВернутьGUIDИсточника(ВременнаяТаблица, ИдентификаторПроцесса, ТекущаяСтрока.Показатель, ТекущаяСтрока.ИсточникЗначенияПериодаСравнения
																	, ВнешнийКонтекст.Организация, ВнешнийКонтекст.ПериодСравнения, ВнешнийКонтекст.БазовыйСценарий, ВнешнийКонтекст.ОсновнаяВалюта
																	, ТекущаяСтрока.ВнешняяИБ);

		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ИсточникПлановогоЗначения) Тогда
			ТекущаяСтрока.GUIDПлановоеЗначение = ВернутьGUIDИсточника(ВременнаяТаблица, ИдентификаторПроцесса, ТекущаяСтрока.Показатель, ТекущаяСтрока.ИсточникПлановогоЗначения
																	, ВнешнийКонтекст.Организация, ВнешнийКонтекст.БазовыйПериод, ВнешнийКонтекст.ПлановыйСценарий, ВнешнийКонтекст.ОсновнаяВалюта
																	, ТекущаяСтрока.ВнешняяИБ);
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.Загрузить(ВременнаяТаблица);
	НаборЗаписей.Записать(Истина);
	// Запуск фоновых заданий расчёта.	
	Если МассивВнешнихИБ.Количество() > 0 Тогда
		Инд = 0;
		КоличествоПараллельныхПроцессов = Константы.КоличествоПараллельныхПотоков.Получить();
		МассивПараметров = Новый Массив(2);
		МассивПараметров[0] = ИдентификаторПроцесса;
		МассивФоновыхЗаданий = Новый Массив;
		
		Для Инд2 = 2 По КоличествоПараллельныхПроцессов Цикл
			Если МассивВнешнихИБ.ВГраница() >= Инд Тогда
				ВнешняяИБ = МассивВнешнихИБ[Инд];
			Иначе
				ВнешняяИБ = БизнесАнализВызовСервераУХ.ВернутьНеобработаннуюВнешнююИб(ИдентификаторПроцесса);
				Если ВнешняяИБ = -1 Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
			МассивПараметров[1] = ВнешняяИБ;
			Инд = Инд + 1;
			МассивФоновыхЗаданий.Добавить(ФоновыеЗадания.Выполнить("БизнесАнализВызовСервераУХ.ПровестиРасчетДанныхМКП", МассивПараметров, Строка(Новый УникальныйИдентификатор), Нстр("ru = 'Расчет показателя МКП'")));
		КонецЦикла;
		
		Если МассивВнешнихИБ.ВГраница() >= Инд Тогда
			ВнешняяИБ = МассивВнешнихИБ[Инд];
		Иначе
			ВнешняяИБ = БизнесАнализВызовСервераУХ.ВернутьНеобработаннуюВнешнююИб(ИдентификаторПроцесса);
		КонецЕсли;
		Если ВнешняяИБ <> -1 Тогда
			БизнесАнализВызовСервераУХ.ПровестиРасчетДанныхМКП(ИдентификаторПроцесса, ВнешняяИБ);
		КонецЕсли;
		
		Если МассивФоновыхЗаданий.Количество() > 0 Тогда
			Попытка
				ФоновыеЗадания.ОжидатьЗавершения(МассивФоновыхЗаданий);
			Исключение
				Возврат Неопределено;
			КонецПопытки
		КонецЕсли;
		
	КонецЕсли;
	// Получение результатов расчёта.
	ТаблицаРезультатовРасчета = ПолучитьТаблицуРезультатовРасчетаПроцесса(ИдентификаторПроцесса);
	// Добавление вычисляемых полей.
	ТаблицаДляРасчета = ОбновитьВычисляемыеПоляВТаблицеРасчетов(ТаблицаДляРасчета, ТаблицаРезультатовРасчета, АнализируемыеПоказатели);
	Возврат ТаблицаДляРасчета;
	
КонецФункции

// Создаёт задачу для события ВыходЗаГраницыПоказателя по монитору
// ключевых показатеелей СвязанныйОбъектВход для пользователя
// ОтветственныйВход.
Функция СоздатьЗадачуВыходЗаГраницыПоказателя(ОтветственныйВход, СвязанныйОбъектВход)
	РезультатФункции = Справочники.Задачи.ПустаяСсылка();
	Попытка
		ЗадачаОбъект = Справочники.Задачи.СоздатьЭлемент();
		ЗадачаОбъект.СвязанныйОбъект = СвязанныйОбъектВход;
		ЗадачаОбъект.Записать();
		МодульРегламентныхЗаданийУХ.СоздатьЗадачу(ЗадачаОбъект, ОтветственныйВход, Неопределено, Неопределено, Неопределено);
		РезультатФункции = ЗадачаОбъект.Ссылка;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось создать задачу контроля показателя по монитору %Монитор%: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Монитор%", Строка(СвязанныйОбъектВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Справочники.Задачи.ПустаяСсылка();
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции		// СоздатьЗадачуВыходЗаГраницыПоказателя()

Функция ПолучитьHtmlТаблицуПоказателейМкп(ТаблицаАнализаВход)
	РезультатФункции = "";
	РезультатФункции = РезультатФункции + НСтр("ru = '<table><tr style=""background-color:#eeeeee;font-family:Tahoma;font-weight:bold;text-align:center""><td>Показатель</td><td>Значение</td><td>Плановое значение</td><td>Состояние</td><td>Динамика</td></tr>'");
	Инд = 0;
	Для Каждого Элемент из ТаблицаАнализаВход Цикл
		// Представление состояния.
		СтрокаСостояния = "";
		СтрокаСостояния = СтрокаСостояния + "<td style=""text-align:center"">";
		СтрокаСостояния = СтрокаСостояния + БизнесАнализСерверУХ.ВернутьТекстДляКартинки(Элемент.НовоеСостояние, Ложь);
		СтрокаСостояния = СтрокаСостояния + НСтр("ru = ' (было '");
		СтрокаСостояния = СтрокаСостояния + БизнесАнализСерверУХ.ВернутьТекстДляКартинки(Элемент.Состояние, Ложь);
		СтрокаСостояния = СтрокаСостояния + ")</td>";
		// Представление динамики.
		СтрокаДинамики = "";
		СтрокаДинамики = СтрокаДинамики + "<td style=""text-align:center"">";
		СтрокаДинамики = СтрокаДинамики + БизнесАнализСерверУХ.ВернутьТекстДляКартинки(Элемент.НовыйТренд, Ложь);
		СтрокаДинамики = СтрокаДинамики + НСтр("ru = ' (было '");
		СтрокаДинамики = СтрокаДинамики + БизнесАнализСерверУХ.ВернутьТекстДляКартинки(Элемент.Тренд, Ложь);
		СтрокаДинамики = СтрокаДинамики + ")</td>";
		// Представление показателя.
		ТекПоказатель = Элемент.Показатель;
		ПредставлениеПоказателя = БизнесАнализСерверУХ.ПредставлениеПоказателяМкпВАналитическойРассылке(ТекПоказатель);
		// Формирование строки таблицы.
		РезультатФункции = РезультатФункции + "
		|<tr style="""; 
		РезультатФункции = РезультатФункции + ?(ОбщегоНазначенияУХ.ЧетноеЧисло(Инд), "background-color:#eeeeee;", "");
		РезультатФункции = РезультатФункции + "font-family:Tahoma""><td>";
		РезультатФункции = РезультатФункции + ПредставлениеПоказателя;
		РезультатФункции = РезультатФункции + "</td><td>";
		РезультатФункции = РезультатФункции + Формат(Элемент.ФактическоеЗначениеТекущегоПериода, "ЧЦ=15; ЧДЦ=2");
		РезультатФункции = РезультатФункции + "</td><td>";
		РезультатФункции = РезультатФункции + Формат(Элемент.ПлановоеЗначение, "ЧЦ=15; ЧДЦ=2");
		РезультатФункции = РезультатФункции + "</td>";
		РезультатФункции = РезультатФункции + СтрокаСостояния;
		РезультатФункции = РезультатФункции + СтрокаДинамики;
		РезультатФункции = РезультатФункции + "</tr>";
		Инд = Инд + 1;
	КонецЦикла;
	РезультатФункции = РезультатФункции + "</table>";
	Возврат РезультатФункции;
КонецФункции	

Функция ПолучитьТаблицуАнализируемыхПоказателей(МониторВход, НастройкаВход, ВнешнийИсточник)
	РезультатФункции = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВнешнийИсточник.Показатель КАК Показатель,
	|	ВнешнийИсточник.КонтрольСостояния КАК КонтрольСостояния,
	|	ВнешнийИсточник.КонтрольДинамики КАК КонтрольДинамики,
	|	ВнешнийИсточник.ИмяГруппыИсточников КАК ИмяГруппыИсточников
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ВнешнийИсточник КАК ВнешнийИсточник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗначенияПоказателейМКП.Состояние КАК Состояние,
	|	ЗначенияПоказателейМКП.Тренд КАК Тренд,
	|	ЗначенияПоказателейМКП.Показатель КАК Показатель,
	|	ВТ.КонтрольСостояния КАК КонтрольСостояния,
	|	ВТ.КонтрольДинамики КАК КонтрольДинамики,
	|	0 КАК ФактическоеЗначениеТекущегоПериода,
	|	0 КАК НовоеСостояние,
	|	0 КАК НовыйТренд,
	|	0 КАК ПлановоеЗначение,
	|	ВТ.ИмяГруппыИсточников КАК ИмяГруппыИсточников
	|ИЗ
	|	ВТ КАК ВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейМКП КАК ЗначенияПоказателейМКП
	|		ПО ВТ.Показатель = ЗначенияПоказателейМКП.Показатель
	|ГДЕ
	|	ЗначенияПоказателейМКП.МКП = &МКП
	|	И ЗначенияПоказателейМКП.СохраненнаяНастройка = &СохраненнаяНастройка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ";
	Запрос.УстановитьПараметр("СохраненнаяНастройка", НастройкаВход);
	Запрос.УстановитьПараметр("МКП"                 , МониторВход);
	Запрос.УстановитьПараметр("ВнешнийИсточник"     , ВнешнийИсточник);
	РезультатФункции = Запрос.Выполнить().Выгрузить();
	Возврат РезультатФункции;
КонецФункции

// Выделяет в таблице ТаблицаМонитораВход показатели МКП, которые вышли за границы
// в сравнении с текущим состоянием по объекту ОбъектВход для настройки 
// СохраненнаяНастройкаВход.
Функция ОтделитьПоказателиВышедшиеЗаГраницы(ОбъектВход, СохраненнаяНастройкаВход, ТаблицаМонитораВход)
	// Инициализация.
	РезультатФункции = ТаблицаМонитораВход.СкопироватьКолонки();
	Если ТаблицаМонитораВход.Количество() > 0 Тогда
		МассивТиповПоказатель = Новый Массив;
		МассивТиповПоказатель.Добавить(Тип("СправочникСсылка.ПоказателиМонитораКлючевыхПоказателей"));
		ОписаниеТиповПоказатель = Новый ОписаниеТипов(МассивТиповПоказатель);
		ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
		ОписаниеТипаСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(150);
		// Получение текущих данных по выбранным показателям.
		ТаблицаВнешнегоИсточника =  Новый ТаблицаЗначений;
		ТаблицаВнешнегоИсточника.Колонки.Добавить("Показатель", ОписаниеТиповПоказатель);
		ТаблицаВнешнегоИсточника.Колонки.Добавить("КонтрольСостояния", ОписаниеТипаБулево);
		ТаблицаВнешнегоИсточника.Колонки.Добавить("КонтрольДинамики", ОписаниеТипаБулево);
		ТаблицаВнешнегоИсточника.Колонки.Добавить("ИмяГруппыИсточников", ОписаниеТипаСтрока);
		Для Каждого ТекТаблицаМонитора Из ТаблицаМонитораВход Цикл
			НоваяСтрокаВнешнийИсточник = ТаблицаВнешнегоИсточника.Добавить();
			НоваяСтрокаВнешнийИсточник.Показатель			 = ТекТаблицаМонитора.Показатель;
			НоваяСтрокаВнешнийИсточник.КонтрольСостояния	 = Истина;
			НоваяСтрокаВнешнийИсточник.КонтрольДинамики		 = Истина;
			НоваяСтрокаВнешнийИсточник.ИмяГруппыИсточников	 = "";
		КонецЦикла;	
		ТаблицаТекущиеДанные = ПолучитьТаблицуАнализируемыхПоказателей(ОбъектВход.Ссылка, СохраненнаяНастройкаВход, ТаблицаВнешнегоИсточника);
		// Отделение изменённых показателей.
		Для Каждого ТекТаблицаМонитора Из ТаблицаМонитораВход Цикл
			// Поиск предыдущих значений в таблице текущих значений.
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Показатель", ТекТаблицаМонитора.Показатель);
			НайденныеСтроки = ТаблицаТекущиеДанные.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 1 Тогда
				ПерваяСтрока = НайденныеСтроки[0];
				ТекТаблицаМонитора.Состояние = ПерваяСтрока.Состояние;
				ТекТаблицаМонитора.Тренд = ПерваяСтрока.Тренд;
			Иначе
				// Пропускаем.
			КонецЕсли;
			// Сравнение изменения новых данных относительно предыдущих.
			ПредыдущееСостояниеХорошее = (ТекТаблицаМонитора.Состояние = 0);
			ТекущееСостояниеХорошее = (ТекТаблицаМонитора.НовоеСостояние = 0);
			Если (ПредыдущееСостояниеХорошее) И (НЕ ТекущееСостояниеХорошее) Тогда
				// Формирование итоговой строки. 
				НоваяСтрокаОчистка = РезультатФункции.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОчистка, ТекТаблицаМонитора);
			Иначе
				// Не выполнены условия добавления.
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Исходные данные не заданы. Вернём пустую таблицу в качестве результата.
		РезультатФункции = ТаблицаМонитораВход.СкопироватьКолонки();
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Выполняет отправку оповещений по событию Выход за границы для ключевого объекта ОбъектВход
// по таблице ТаблицаВход. Возвращает успешность выполнения операции.
Функция ОтправитьОповещенияВыходЗаГраницы(ОбъектВход, ТаблицаВход)
	РезультатФункции = Истина;	
	Попытка
		Если ТаблицаВход.Количество() > 0 Тогда
			Получатель = ОбъектВход.АдминистраторОтчета;
			НоваяЗадачаВыходЗаГраницы = СоздатьЗадачуВыходЗаГраницыПоказателя(Получатель, ОбъектВход.Ссылка);
			Если ЗначениеЗаполнено(НоваяЗадачаВыходЗаГраницы) Тогда
				ВидСобытия = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ВыходЗаГраницыПоказателей");
				СписокРассылки = Новый Массив;
				СписокРассылки.Добавить(Получатель);
				СтруктураДополнительныхПараметров = Новый Структура;
				ТекстТаблицаМонитора = ПолучитьHtmlТаблицуПоказателейМкп(ТаблицаВход);
				СтруктураДополнительныхПараметров.Вставить("ТаблицаМонитора", ТекстТаблицаМонитора);
				МодульУправленияОповещениямиУХ.ОповеститьПользователей(ВидСобытия, , ОбъектВход.Ссылка, СписокРассылки, СтруктураДополнительныхПараметров, НоваяЗадачаВыходЗаГраницы);
			Иначе
				ТекстСообщения = НСтр("ru = 'Задача контроля выхода показателя за границы не создана. Отправка уведомления отменена.'");
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				РезультатФункции = Ложь;
			КонецЕсли;
		Иначе
			// Пустая таблица изменённых показателей. Не создаём оповещение.
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'При отправке оповещения о выходе за границы по объекту %Объект% произошли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Строка(ОбъектВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Ложь;
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции		// ОтправитьОповещенияВыходЗаГраницы()

// Создаёт пустую таблицу монитора ключевых показаателей для отправки оповещения
// по событию Выход за границы.
Функция ИнициализироватьТаблицуМонитора()
	РезультатФункции = Новый ТаблицаЗначений;
	РезультатФункции.Колонки.Добавить("НовоеСостояние");
	РезультатФункции.Колонки.Добавить("Состояние");
	РезультатФункции.Колонки.Добавить("НовыйТренд");
	РезультатФункции.Колонки.Добавить("Тренд");
	РезультатФункции.Колонки.Добавить("Показатель");
	РезультатФункции.Колонки.Добавить("ФактическоеЗначениеТекущегоПериода");
	РезультатФункции.Колонки.Добавить("ПлановоеЗначение");
	Возврат РезультатФункции;	
КонецФункции		// ИнициализироватьТаблицуМонитора()

Функция ОбновитьДанныеОтчетаВРегистре(Объект, СохраненнаяНастройка, Знач ТаблицаПоказателей = Неопределено) Экспорт
	
	Перем НастройкиКомпоновщика;
	Перем ЗначенияНастроекПанелиПользователя;
	Перем НастройкиМонитораЭффективности;
	Перем НастройкиПериода;
	
	ИдентификаторПроцесса = Новый УникальныйИдентификатор;
	
	Если ТаблицаПоказателей <> Неопределено Тогда
		АнализируемыеПоказатели = ПолучитьТаблицуАнализируемыхПоказателей(Объект.Ссылка, СохраненнаяНастройка, ТаблицаПоказателей);
	Иначе
		АнализируемыеПоказатели = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(СохраненнаяНастройка) = Тип("Структура") Тогда
		СохраненнаяНастройка.Свойство("НастройкиКомпоновщика", НастройкиКомпоновщика);
		СохраненнаяНастройка.Свойство("ЗначенияНастроекПанелиПользователя", ЗначенияНастроекПанелиПользователя);
	//Используются сохраненные настройки.
	ИначеЕсли ЗначениеЗаполнено(СохраненнаяНастройка) Тогда
		ХранилищеНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		
		Если ХранилищеНастроек = Неопределено Тогда
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Не удалось прочитать настройки отчета. Будут использованы настройки по умолчанию'"));
			ЗначенияНастроекПанелиПользователя = Объект.ЗначенияНастроекПанелиПользователя.Получить();
			НастройкиКомпоновщика = Объект.НастройкиСхемыКомпоновкиДанныхПоУмолчанию.Получить();
		Иначе
			ЗначенияНастроекПанелиПользователя = ХранилищеНастроек.ЗначенияНастроекПанелиОтчета;
			НастройкиКомпоновщика              = ХранилищеНастроек.НастройкиКомпоновки;
		КонецЕсли;
		
	//Используются настройки по умолчанию
	Иначе
		ЗначенияНастроекПанелиПользователя = Объект.ЗначенияНастроекПанелиПользователя.Получить();
		НастройкиКомпоновщика = Объект.НастройкиСхемыКомпоновкиДанныхПоУмолчанию.Получить();
	КонецЕсли;
	
	Если ЗначенияНастроекПанелиПользователя = Неопределено Тогда
		
		ЗначенияНастроекПанелиПользователя = ТиповыеОтчеты_УправляемыйРежимУХ.ПолучитьЗначенияНастроекПанелиПользователяПоУмолчанию(НастройкиКомпоновщика);
		
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	Если ЗначенияНастроекПанелиПользователя <> Неопределено Тогда
		ЗначенияНастроекПанелиПользователя.Свойство("НастройкиМонитораЭффективности", НастройкиМонитораЭффективности);
		ЗначенияНастроекПанелиПользователя.Свойство("НастройкаПериода", НастройкиПериода);
	КонецЕсли;
	
	ОтборОрганизация           = Справочники.Организации.ПустаяСсылка();
	ОтборВалюта                = Справочники.Валюты.ПустаяСсылка();
	ПериодОтчета               = Справочники.Периоды.ПустаяСсылка();
	ПериодСравнения            = Справочники.Периоды.ПустаяСсылка();
	СценарийФакт               = Справочники.Сценарии.ПустаяСсылка();
	СценарийПлан               = Справочники.Сценарии.ПустаяСсылка();
	СмещениеПредыдущегоПериода = 0;
	
	Если НастройкиПериода <> Неопределено Тогда
		НастройкиПериода.Свойство("ПериодОтчета", ПериодОтчета);
	КонецЕсли;

	Если НастройкиМонитораЭффективности <> Неопределено Тогда
		НастройкиМонитораЭффективности.Свойство("ОтборОрганизация",           ОтборОрганизация);
		НастройкиМонитораЭффективности.Свойство("ОтборВалюта",                ОтборВалюта);
		НастройкиМонитораЭффективности.Свойство("СценарийФакт",               СценарийФакт);
		НастройкиМонитораЭффективности.Свойство("СценарийПлан",               СценарийПлан);
		НастройкиМонитораЭффективности.Свойство("СмещениеПредыдущегоПериода", СмещениеПредыдущегоПериода);
	КонецЕсли;
			
	ПериодСравнения = ОбщегоНазначенияУХ.глОтносительныйПериод(ПериодОтчета, -СмещениеПредыдущегоПериода);
	ВнешнийКонтекст = Новый Структура("Организация, ОсновнаяВалюта, БазовыйПериод, ПериодСравнения, ПериодПрогноз, БазовыйСценарий, ПлановыйСценарий"
									 , ОтборОрганизация
									 , ОтборВалюта
									 , ПериодОтчета
									 , ПериодСравнения
									 , Справочники.Периоды.ПустаяСсылка()
									 , СценарийФакт
									 , СценарийПлан);
	
	НаборЗаписейРегистра = РегистрыСведений.ЗначенияПоказателейМКП.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Отбор.МКП.Значение = Объект.Ссылка;
	НаборЗаписейРегистра.Отбор.МКП.Использование = Истина;
	НаборЗаписейРегистра.Отбор.СохраненнаяНастройка.Значение = СохраненнаяНастройка;
	НаборЗаписейРегистра.Отбор.СохраненнаяНастройка.Использование = Истина;
	НаборЗаписейРегистра.Прочитать();
	
	НаборЗаписейРегистра.Очистить();
	
	ТаблицаМонитора = ИнициализироватьТаблицуМонитора();      
	ТаблицаДляРасчета = ПолучитьТаблицуЗначенийПоказателейМКП(Объект.Ссылка, ВнешнийКонтекст, АнализируемыеПоказатели);
	Для Каждого ТекСтрока Из ТаблицаДляРасчета Цикл
		// Добавление записи в набор записей регистра.
		НоваяСтрока = НаборЗаписейРегистра.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.МКП = Объект.Ссылка;
		НоваяСтрока.СохраненнаяНастройка = СохраненнаяНастройка;
		// Добавление строки в таблицу монитора.
		НоваяСтрокаТаблицаМонитора = ТаблицаМонитора.Добавить();
		НоваяСтрокаТаблицаМонитора.НовоеСостояние						 = ТекСтрока.Состояние;
		НоваяСтрокаТаблицаМонитора.Состояние							 = ТекСтрока.Состояние;
		НоваяСтрокаТаблицаМонитора.НовыйТренд							 = ТекСтрока.Тренд;
		НоваяСтрокаТаблицаМонитора.Тренд								 = ТекСтрока.Тренд;
		НоваяСтрокаТаблицаМонитора.Показатель							 = ТекСтрока.Показатель;
		НоваяСтрокаТаблицаМонитора.ФактическоеЗначениеТекущегоПериода	 = ТекСтрока.ФактическоеЗначениеТекущегоПериода;
		НоваяСтрокаТаблицаМонитора.ПлановоеЗначение						 = ТекСтрока.ПлановоеЗначение;
	КонецЦикла;
	// Отправка оповещения по событию Выход за границы.
	ТаблицаОчистка = ОтделитьПоказателиВышедшиеЗаГраницы(Объект, СохраненнаяНастройка, ТаблицаМонитора);
	ОтправитьОповещенияВыходЗаГраницы(Объект, ТаблицаОчистка);
	
	// Очистка данных по процессу расчета в регистре сведений РасчетМонитораКлючевыхПоказателей.
	НаборЗаписейРегистра.Записать(Истина);
	ОчисткаРегистра = РегистрыСведений.РасчетМонитораКлючевыхПоказателей.СоздатьНаборЗаписей();
	ОчисткаРегистра.Отбор.ИдентификаторПроцесса.Значение = ИдентификаторПроцесса;
	ОчисткаРегистра.Отбор.ИдентификаторПроцесса.Использование = Истина;
	ОчисткаРегистра.Записать(Истина);
	
	Возврат АнализируемыеПоказатели;
	
КонецФункции

Процедура ОбновитьОтчетИспользуяДанныеРегистра(Результат, Объект, СохраненнаяНастройка, ВнешнийКонтекст) Экспорт
	
	ОбновитьДанныеОтчетаВРегистре(Объект, СохраненнаяНастройка);
	ОбновитьОтчет(Результат, ОБъект, СохраненнаяНастройка, , , , , ВнешнийКонтекст, , Истина);
	
КонецПроцедуры

// Возвращает картинку графичекой схемы для элемента схемы 
// ЭлементВход.
Функция ПолучитьКартинкуГрафическойСхемы(ЭлементВход)
	РезультатФункции = БиблиотекаКартинок.ЗначокМониторБухгалтера32;
	Если ТипЗнч(ЭлементВход) = Тип("СправочникСсылка.ПоказателиМонитораКлючевыхПоказателей") Тогда
		ХранилищеКартинки = ЭлементВход.Логотип;
		РезультатФункции = ХранилищеКартинки.Получить();
		Если РезультатФункции <> Неопределено Тогда
			// Значение получено. Не изменяем его.
		Иначе
			// Не удалось получить значение. Выставим картинку по умолчанию.
			РезультатФункции = БиблиотекаКартинок.ЗначокМониторБухгалтера32;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭлементВход) = Тип("СправочникСсылка.Цели") Тогда
		РезультатФункции = БиблиотекаКартинок.ПометкаНовостиФлагЗеленый32;
	Иначе
		РезультатФункции = БиблиотекаКартинок.ЗначокМониторБухгалтера32;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Возвращает строку представления строки ЭлементВход графической схемы.
Функция ПолучитьПредставлениеЭлементаГрафическойСхемы(СтрокаТаблицыУзловВход, СоответствиеЦелейВход)
	ТекЭлемент = СтрокаТаблицыУзловВход.Элемент;
	РезультатФункции = Строка(ТекЭлемент);
	Если ТипЗнч(ТекЭлемент) = Тип("СправочникСсылка.ПоказателиМонитораКлючевыхПоказателей") Тогда
		РезультатФункции = НСтр("ru = '(%ПроцентВыполненияПлана%%) %Наименование% %СимволыПС%----%СимволыПС% %Ответственный%'");
		РезультатФункции = СтрЗаменить(РезультатФункции, "%Наименование%", Строка(ТекЭлемент));
		РезультатФункции = СтрЗаменить(РезультатФункции, "%ПроцентВыполненияПлана%", Формат(СтрокаТаблицыУзловВход.ПроцентВыполненияПлана, "ЧДЦ=; ЧН=0"));
		РезультатФункции = СтрЗаменить(РезультатФункции, "%СимволыПС%", Символы.ПС);
		РезультатФункции = СтрЗаменить(РезультатФункции, "%Ответственный%", Строка(ТекЭлемент.Ответственный));
	ИначеЕсли ТипЗнч(ТекЭлемент) = Тип("СправочникСсылка.Цели") Тогда	
		РезультатФункции = НСтр("ru = '[%КоличествоИнициатив%] %Наименование% %СимволыПС%----%СимволыПС% %Ответственный%'");
		КоличествоИнициатив = СоответствиеЦелейВход[ТекЭлемент];
		Если КоличествоИнициатив <> Неопределено Тогда
			РезультатФункции = СтрЗаменить(РезультатФункции, "%КоличествоИнициатив%", Строка(КоличествоИнициатив));
		Иначе
			РезультатФункции = СтрЗаменить(РезультатФункции, "%КоличествоИнициатив%", 0);
		КонецЕсли;
		РезультатФункции = СтрЗаменить(РезультатФункции, "%Наименование%", Строка(ТекЭлемент));
		РезультатФункции = СтрЗаменить(РезультатФункции, "%СимволыПС%", Символы.ПС);
		РезультатФункции = СтрЗаменить(РезультатФункции, "%Ответственный%", Строка(ТекЭлемент.Ответственный));
	Иначе
		РезультатФункции = Строка(ТекЭлемент);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Возвращает цвет показателя ПоказательВход на основе данных дерева ДеревоВход
// в окне ИмяОкнаВход. Параметр ГлубинаРекурсииВход защищает от бесконечной рекурсии.
Функция ПолучитьЦветПоказателяВДереве(ПоказательВход, ДеревоВход, ИмяОкнаВход, ГлубинаРекурсииВход = 0)
	ЦветПоУмолчанию = Новый Цвет(127, 127, 127);
	Если ГлубинаРекурсииВход > 10000 Тогда
		Возврат ЦветПоУмолчанию;
	КонецЕсли;
	РезультатФункции = ЦветПоУмолчанию;
	СтрокиДерева = ДеревоВход.Строки;
	Для Каждого ТекСтрокиДерева Из СтрокиДерева Цикл
		ТекПоказатель = ТекСтрокиДерева[ИмяОкнаВход + "Показатель"];   
		Если ТекПоказатель = ПоказательВход Тогда                      
			ТекСостояние = ТекСтрокиДерева[ИмяОкнаВход + "Состояние"];
			РезультатФункции = ТиповыеОтчетыУХ.ВернутьЦветТрендаПоПредставлению(ТекСостояние);
			Возврат РезультатФункции;		// Значение найдено в текущей строке.
		Иначе
			ТекСостояние = ПолучитьЦветПоказателяВДереве(ПоказательВход, ТекСтрокиДерева, ИмяОкнаВход, ГлубинаРекурсииВход + 1);
			Если ТекСостояние <> ЦветПоУмолчанию Тогда
				Если ТипЗнч(ТекСостояние) = Тип("Картинка") Тогда
					РезультатФункции = ТиповыеОтчетыУХ.ВернутьЦветТрендаПоПредставлению(ТекСостояние);
				ИначеЕсли ТипЗнч(ТекСостояние) = Тип("Цвет") Тогда
					РезультатФункции = ТекСостояние;
				Иначе
					РезультатФункции = ЦветПоУмолчанию;
				КонецЕсли;
				Возврат РезультатФункции;   // Значение найдено в низлежащих элементах.
			Иначе
				// Выполняем поиск далее.
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Возвращает соответствие, содержащие количество инициатив для каждой цели.
Функция СформироватьСоответствиеКоличестваИнициативЦелям()
	РезультатФункции = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Цели.Ссылка КАК Цель,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Мероприятие.Ссылка) КАК КоличествоИнициатив
		|ИЗ
		|	Справочник.Цели КАК Цели
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Мероприятие КАК Мероприятие
		|		ПО Мероприятие.Контекст = Цели.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Цели.Ссылка";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатФункции.Вставить(ВыборкаДетальныеЗаписи.Цель, ВыборкаДетальныеЗаписи.КоличествоИнициатив);
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Заполняет поле Колонка таблицы узлов ТаблицаПоказателейВход, по данным дерева ДеревоПоказателейВход,
// начиная с колонки НачальныйНомерКолонкиВход для диаграммы с префиксом ИмяОкнаВход. Параметр 
//ГлубинаРекурсииВход защищает от бесконечной рекурсии.
Процедура ЗаполнитьКолонкиТаблицыУзлов(ДеревоПоказателейВход, ТаблицаПоказателейВход, НачальныйНомерКолонкиВход, ИмяОкнаВход, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 10000 Тогда
		Возврат;
	КонецЕсли;
	Счетчик = 0;
	Для Каждого ТекСтроки Из ДеревоПоказателейВход.Строки Цикл
		ТекПоказатель = ТекСтроки[ИмяОкнаВход + "Показатель"];   
		Если ЗначениеЗаполнено(ТекПоказатель) Тогда
			// Заполним номер колонки в таблице новым значением.
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Узел", ТекПоказатель);
			НайденныеСтроки = ТаблицаПоказателейВход.НайтиСтроки(СтруктураПоиска);
			НовыйНомерКолонки = НачальныйНомерКолонкиВход + Счетчик;
			Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
				ТекНайденныеСтроки.Колонка = НовыйНомерКолонки;
			КонецЦикла;
			// Повторим процедуру для подчинённых узлов.
			ЗаполнитьКолонкиТаблицыУзлов(ТекСтроки, ТаблицаПоказателейВход, НовыйНомерКолонки, ИмяОкнаВход, ГлубинаРекурсииВход + 1);
		Иначе
			// Пустой показатель. Не заполняем.
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
КонецПроцедуры

// Возвращает таблицу, содержащую узлы для формирования графической 
// схемы по исходной таблице элементов ТаблицаВход.
Функция ПреобразоватьТабУзлов(ТаблицаВход, ДеревоПоказателейВход, ИмяОтчетаВход, СоответствиеЦелейВход)
	РезультатФункции = Новый ТаблицаЗначений;
	РезультатФункции.Колонки.Добавить("Узел");
	РезультатФункции.Колонки.Добавить("Строка");
	РезультатФункции.Колонки.Добавить("Колонка");
	РезультатФункции.Колонки.Добавить("Представление");
	РезультатФункции.Колонки.Добавить("ВерхСтроки");
	РезультатФункции.Колонки.Добавить("Оформление");
	РезультатФункции.Колонки.Добавить("Источник");
	РезультатФункции.Колонки.Добавить("Приемник");
	РезультатФункции.Колонки.Добавить("Приемник2");
	Счетчик = 1;
	Для Каждого ТекТаблицаВход Из ТаблицаВход Цикл
		ТекЭлемент = ТекТаблицаВход.Элемент;
		ПредставлениеЭлемента = ПолучитьПредставлениеЭлементаГрафическойСхемы(ТекТаблицаВход, СоответствиеЦелейВход);
		ЦветПоказателя = ПолучитьЦветПоказателяВДереве(ТекЭлемент, ДеревоПоказателейВход, ИмяОтчетаВход);
		СтруктураОформления = Новый Структура;
		НоваяКартинка = ПолучитьКартинкуГрафическойСхемы(ТекЭлемент);
		СтруктураОформления.Вставить("Картинка", НоваяКартинка);
		СтруктураОформления.Вставить("ЦветФона", ЦветПоказателя);
		НоваяСтрока = РезультатФункции.Добавить();
		НоваяСтрока.Узел			 = ТекЭлемент;
		НоваяСтрока.Строка			 = 0;
		НоваяСтрока.Колонка			 = 0;
		НоваяСтрока.Представление	 = ПредставлениеЭлемента;
		НоваяСтрока.ВерхСтроки		 = 0;
		НоваяСтрока.Оформление		 = СтруктураОформления;
		НоваяСтрока.Источник		 = 0;
		НоваяСтрока.Приемник		 = 1;
		НоваяСтрока.Приемник2		 = 1;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Возвращает таблицу, содуржащую связи для формирования графической 
// схемы по исходной таблице связей ТаблицаВход.
Функция ПреобразоватьТабСвязей(ТаблицаВход)
	РезультатФункции = Новый ТаблицаЗначений;
	РезультатФункции.Колонки.Добавить("Источник");
	РезультатФункции.Колонки.Добавить("Приемник");
	РезультатФункции.Колонки.Добавить("Представление");
	РезультатФункции.Колонки.Добавить("Оформление");
	Для Каждого ТекТаблицаВход Из ТаблицаВход Цикл
		НоваяСтрока = РезультатФункции.Добавить();
		НоваяСтрока.Источник		 = ТекТаблицаВход.ЭлементНачало;
		НоваяСтрока.Приемник		 = ТекТаблицаВход.ЭлементКонец;
		НоваяСтрока.Представление	 = Строка(ТекТаблицаВход.Вес);
		НоваяСтрока.Оформление		 = Неопределено;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Заполняет поле Источник в таблице узлов ТабУзловВход по таблице
// связей ТабСвязейВход.
Процедура ЗаполнитьИсточникУзлов(ТабУзловВход, ТабСвязейВход)
	Для Каждого ТекТабУзловВход Из ТабУзловВход Цикл
		СтруктураПоискаСвязи = Новый Структура;
		СтруктураПоискаСвязи.Вставить("Источник", ТекТабУзловВход.Узел);
		НайденныеСтрокиСвязи = ТабСвязейВход.НайтиСтроки(СтруктураПоискаСвязи);
		ТекТабУзловВход.Источник = НайденныеСтрокиСвязи.Количество();
	КонецЦикла;
КонецПроцедуры

// Возвращает минимальный номер колонки в строке номер НомерСтрокиВход таблицы
// узлов ТабУзловВход. Когда не найдено - будет возвращено 1.
Функция ПолучитьМинимальныйНомерКолонкиВСтроке(ТабУзловВход, НомерСтрокиВход)
	РезультатФункции = 99999;
	Для Каждого ТекТабУзловВход Из ТабУзловВход Цикл
		Если (ТекТабУзловВход.Строка = НомерСтрокиВход) И (ТекТабУзловВход.Колонка < РезультатФункции) Тогда
			РезультатФункции = ТекТабУзловВход.Колонка;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	Если РезультатФункции = 99999 Тогда
		РезультатФункции = 1;		// Таких строк не найдено. По умолчанию первая колонка.
	Иначе
		// Не изменяем выходное значение.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Рекурсивно добавляет в таблицу ТаблицаПотомковВход строки таблицы
// ИсходнаяТаблицаВход, которые являются потомками строки ИсточникВход.
// Параметр ГлубинаРекурсии защищает от бесконечной рекурсии.
Процедура ДозаполнитьТаблицуПотомков(ТаблицаПотомковВход, ИсходнаяТаблицаВход, ИсточникВход, ГлубинаРекурсии = 0)
	Если ГлубинаРекурсии > 99999 Тогда
		Возврат;
	КонецЕсли;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("УзелИсточник", ИсточникВход.Узел);
	НайденныеСтроки = ИсходнаяТаблицаВход.НайтиСтроки(СтруктураПоиска);
	Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
		НоваяСтрока = ТаблицаПотомковВход.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекНайденныеСтроки);
		ДозаполнитьТаблицуПотомков(ТаблицаПотомковВход, ИсходнаяТаблицаВход, ТекНайденныеСтроки, ГлубинаРекурсии + 1);
	КонецЦикла;
КонецПроцедуры

// Возвращает соответсвие номеров колонок узлам по таблице узлов ТабУзловВход.
Функция ПолучитьСоответствиеКолонокУзлам(ТабУзловВход)
	РезультатФункции = Новый Соответствие;
	Для Каждого ТекТабУзловВход Из ТабУзловВход Цикл
		РезультатФункции.Вставить(ТекТабУзловВход.Узел, ТекТабУзловВход.Колонка);
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Заполняет поле КолонкаИсточника в таблице узлов ТабУзловВход.
Процедура РасставитьКолонкиИсточникаВТаблицеУзлов(ТабУзловВход)
	СоответствиеКолонокУзлам = ПолучитьСоответствиеКолонокУзлам(ТабУзловВход);
	Для Каждого ТекТабУзловВход Из ТабУзловВход Цикл
		КолонкаИсточника = СоответствиеКолонокУзлам[ТекТабУзловВход.УзелИсточник];
		Если КолонкаИсточника <> Неопределено Тогда
			ТекТабУзловВход.КолонкаИсточника = КолонкаИсточника;
		Иначе
			ТекТабУзловВход.КолонкаИсточника = 0;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Устанавливает поле Колонка для строки с номером НомерСтрокиВход
// в таблице узлов ТабУзловВход.
Процедура ПереставитьКолонкиВСтрокеСхемы(ТабУзловВход, НомерСтрокиВход)
	РасставитьКолонкиИсточникаВТаблицеУзлов(ТабУзловВход);
	ТабУзловВход.Сортировать("Строка Возр, КолонкаИсточника Возр");      
	СчетчикКолонок = 1;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Строка", НомерСтрокиВход);
	НайденныеСтроки = ТабУзловВход.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		КолонкаИсточника = НайденныеСтроки[0].КолонкаИсточника;
		Если КолонкаИсточника <> 0 Тогда
			СчетчикКолонок = КолонкаИсточника;
		Иначе
			СчетчикКолонок = 1;
		КонецЕсли;
	Иначе
		СчетчикКолонок = 1;			// По умолчанию начинаем с первой колонки
	КонецЕсли;
	ПредМаксимальнаяСтрокаПотомков = 0;
	Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
		СчетчикКолонок = СчетчикКолонок + ПредМаксимальнаяСтрокаПотомков;
		ПредМаксимальнаяСтрокаПотомков = ТекНайденныеСтроки.МаксимальнаяСтрокаПотомков;
		ТекНайденныеСтроки.Колонка = СчетчикКолонок;
	КонецЦикла;
КонецПроцедуры

// Возвращает копию таблицы ТабУзловВход, где колонки сгруппированы согласно 
// таблице связей ТабСвязейВход.
Функция ПереставитьКолонкиУзловСхемы(ТабУзловВход, ТабСвязейВход)
	РезультатФункции = ТабУзловВход.Скопировать();
	// Заполним узлы-источники.
	РезультатФункции.Колонки.Добавить("УзелИсточник");
	РезультатФункции.Колонки.Добавить("КолонкаИсточника");
	Для Каждого ТекРезультатФункции Из РезультатФункции Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Приемник", ТекРезультатФункции.Узел);
		НайденныеСтрокиСвязи = ТабСвязейВход.НайтиСтроки(СтруктураПоиска);
		НайденныйИсточник = Неопределено;
		Для Каждого ТекНайденныеСтрокиСвязи Из НайденныеСтрокиСвязи Цикл
			НайденныйИсточник = ТекНайденныеСтрокиСвязи.Источник;
		КонецЦикла;
		ТекРезультатФункции.УзелИсточник = НайденныйИсточник;
	КонецЦикла;
	РасставитьКолонкиИсточникаВТаблицеУзлов(РезультатФункции);
	// Заполним максимальную длину строки потомков.
	РезультатФункции.Колонки.Добавить("МаксимальнаяСтрокаПотомков");
	Для Каждого ТекРезультатФункции Из РезультатФункции Цикл
		// Получим таблицу потомков.
		ТаблицаПотомков = РезультатФункции.СкопироватьКолонки();
		ДозаполнитьТаблицуПотомков(ТаблицаПотомков, РезультатФункции, ТекРезультатФункции);
		// Получим длины строк потомков.
		ТаблицаПотомков.Колонки.Добавить("КоличествоСтрок");
		Для Каждого ТекТаблицаПотомков Из ТаблицаПотомков Цикл
			ТекТаблицаПотомков.КоличествоСтрок = 1;
		КонецЦикла;
		ТаблицаПотомков.Свернуть("Строка", "КоличествоСтрок");
		// Найдём макимальную длину и заполним.
		МаксимальнаяДлина = 1;
		Для Каждого ТекТаблицаПотомков Из ТаблицаПотомков Цикл
			Если ТекТаблицаПотомков.КоличествоСтрок > МаксимальнаяДлина Тогда
				МаксимальнаяДлина = ТекТаблицаПотомков.КоличествоСтрок;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		ТекРезультатФункции.МаксимальнаяСтрокаПотомков = МаксимальнаяДлина;
	КонецЦикла;
	// Получим массив строк.
	РезультатФункции.Сортировать("Строка Возр");
	МассивСтрок = РезультатФункции.ВыгрузитьКолонку("Строка");
	МассивСтрок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСтрок);
	// Переставим колонки в строках.
	Для Каждого ТекМассивСтрок Из МассивСтрок Цикл
		ПереставитьКолонкиВСтрокеСхемы(РезультатФункции, ТекМассивСтрок);
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Выполняет преобразование таблицы связей ТаблицаСвязейВход в таблицу инвестирования
// для передачи в графическую схему с целью сформировать соответствие узлов.
Функция ПолучитьТаблицуИнвестированияГрафическойСхемы(ТаблицаСвязейВход)
	РезультатФункции = Новый ТаблицаЗначений;
	РезультатФункции.Колонки.Добавить("Инвестор");
	РезультатФункции.Колонки.Добавить("ОбъектИнвестирования");
	РезультатФункции.Колонки.Добавить("ПрямаяДоля");
	РезультатФункции.Колонки.Добавить("СтрокаИзменение");
	Для Каждого ТекТаблицаСвязейВход Из ТаблицаСвязейВход Цикл
		НоваяСтрока = РезультатФункции.Добавить();
		НоваяСтрока.Инвестор				 = ТекТаблицаСвязейВход.ЭлементНачало;
		НоваяСтрока.ОбъектИнвестирования	 = ТекТаблицаСвязейВход.ЭлементКонец;
		НоваяСтрока.ПрямаяДоля				 = 0.1;
		НоваяСтрока.СтрокаИзменение			 = Истина;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

Функция ВернутьСтруктуруВнешнегоКонтекста(НастройкиПериодаВход, НастройкиМонитораЭффективностиВход, ОбщийОтборВход, ПараметрыОтчетаВход) Экспорт
	ОтборОрганизация           = Справочники.Организации.ПустаяСсылка();
	ОтборВалюта                = Справочники.Валюты.ПустаяСсылка();
	ПериодНачало               = Справочники.Периоды.ПустаяСсылка();
	ПериодОтчета               = Справочники.Периоды.ПустаяСсылка();
	ПериодСравнения            = Справочники.Периоды.ПустаяСсылка();
	СценарийФакт               = Справочники.Сценарии.ПустаяСсылка();
	СценарийПлан               = Справочники.Сценарии.ПустаяСсылка();
	СмещениеПредыдущегоПериода = 0;
	
	Если НастройкиПериодаВход <> Неопределено Тогда
		НастройкиПериодаВход.Свойство("ПериодОтчета", ПериодОтчета);
	КонецЕсли;
	
	Если НастройкиМонитораЭффективностиВход <> Неопределено Тогда
		НастройкиМонитораЭффективностиВход.Свойство("ОтборОрганизация",           ОтборОрганизация);
		НастройкиМонитораЭффективностиВход.Свойство("ОтборВалюта",                ОтборВалюта);
		НастройкиМонитораЭффективностиВход.Свойство("СценарийФакт",               СценарийФакт);
		НастройкиМонитораЭффективностиВход.Свойство("СценарийПлан",               СценарийПлан);
		НастройкиМонитораЭффективностиВход.Свойство("СмещениеПредыдущегоПериода", СмещениеПредыдущегоПериода);
	КонецЕсли;
	
	Если ПараметрыОтчетаВход <> Неопределено Тогда
		Если ПараметрыОтчетаВход.Свойство("ПлановыйСценарий") Тогда
			СценарийПлан = ПараметрыОтчетаВход.ПлановыйСценарий;
		КонецЕсли;
		
		Если ПараметрыОтчетаВход.Свойство("СмещениеПредыдущегоПериода") Тогда
			СмещениеПредыдущегоПериода = ПараметрыОтчетаВход.СмещениеПредыдущегоПериода;
		КонецЕсли;
	КонецЕсли;
	
	// Переопределим значения, полученные из настроек по умолчанию значениями из общего отбора.
	Если ОбщийОтборВход <> Неопределено Тогда
		Для Каждого Элемент Из ОбщийОтборВход.ПараметрыДанных.Элементы Цикл
			
			Если НЕ Элемент.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			Если Элемент.Параметр = Новый ПараметрКомпоновкиДанных("Организация") Тогда
				ОтборОрганизация = Элемент.Значение;
			КонецЕсли;
			
			Если Элемент.Параметр = Новый ПараметрКомпоновкиДанных("ОсновнаяВалюта") Тогда
				ОтборВалюта = Элемент.Значение;
			КонецЕсли;
			
			Если Элемент.Параметр = Новый ПараметрКомпоновкиДанных("ПериодОтчета") Тогда
				ПериодОтчета = Элемент.Значение;
			КонецЕсли;
			
			Если Элемент.Параметр = Новый ПараметрКомпоновкиДанных("Сценарий") Тогда
				СценарийФакт = Элемент.Значение;
			КонецЕсли;
			
			Если Элемент.Параметр = Новый ПараметрКомпоновкиДанных("ПериодНачало") Тогда
				ПериодНачало = Элемент.Значение;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;

	ПериодСравнения = ОбщегоНазначенияУХ.глОтносительныйПериод(ПериодОтчета, -СмещениеПредыдущегоПериода);
	Если Не ЗначениеЗаполнено(СценарийПлан) Тогда
		СценарийПлан = СценарийФакт;
	Иначе
		// Оставляем плановый сценарий в текущем значении.
	КонецЕсли;
	ВнешнийКонтекст = Новый Структура;
	ВнешнийКонтекст.Вставить("БазовыйСценарий", СценарийФакт); 
	ВнешнийКонтекст.Вставить("БазовыйПериод", ПериодОтчета);                      
	ВнешнийКонтекст.Вставить("Организация", ОтборОрганизация); 
	ВнешнийКонтекст.Вставить("ОсновнаяВалюта", ОтборВалюта);                  
	ВнешнийКонтекст.Вставить("ПериодНачало", ПериодНачало);
	ВнешнийКонтекст.Вставить("ПериодПрогноз", Справочники.Периоды.ПустаяСсылка()); 
	ВнешнийКонтекст.Вставить("ПериодСравнения", ПериодСравнения); 
	ВнешнийКонтекст.Вставить("ПлановыйСценарий", СценарийПлан);
	Возврат ВнешнийКонтекст;
КонецФункции

// Определяет максимум в колонке ИмяКолонкиВход таблицы ТаблицаВход. Когда данные пустые, либо возникла
// ошибка - будет возвращено ЗначениеПоУмолчаниюВход.
Функция МаксимумВКолонке(ТаблицаВход, ИмяКолонкиВход, ЗначениеПоУмолчаниюВход = Неопределено)
	РезультатФункции = ЗначениеПоУмолчаниюВход;
	МассивКолонки = ТаблицаВход.ВыгрузитьКолонку(ИмяКолонкиВход);
	РезультатФункции = ОбщегоНазначенияКлиентСерверУХ.МаксимумВМассиве(МассивКолонки, ЗначениеПоУмолчаниюВход);
	Возврат РезультатФункции;
КонецФункции		// МаксимумВКолонке()

// Определяет минимум в колонке ИмяКолонкиВход таблицы ТаблицаВход. Когда данные пустые, либо возникла
// ошибка - будет возвращено ЗначениеПоУмолчаниюВход.
Функция МинимумВКолонке(ТаблицаВход, ИмяКолонкиВход, ЗначениеПоУмолчаниюВход = Неопределено)
	РезультатФункции = ЗначениеПоУмолчаниюВход;
	МассивКолонки = ТаблицаВход.ВыгрузитьКолонку(ИмяКолонкиВход);
	РезультатФункции = ОбщегоНазначенияКлиентСерверУХ.МинимумВМассиве(МассивКолонки, ЗначениеПоУмолчаниюВход);
	Возврат РезультатФункции;
КонецФункции		// МинимумВКолонке()

// Определяет произведение в колонке ИмяКолонкиВход таблицы ТаблицаВход. Когда данные пустые, либо возникла
// ошибка - будет возвращено ЗначениеПоУмолчаниюВход.
Функция ПроизведениеВКолонке(ТаблицаВход, ИмяКолонкиВход, ЗначениеПоУмолчаниюВход = Неопределено)
	РезультатФункции = ЗначениеПоУмолчаниюВход;
	МассивКолонки = ТаблицаВход.ВыгрузитьКолонку(ИмяКолонкиВход);
	РезультатФункции = ОбщегоНазначенияКлиентСерверУХ.ПроизведениеВМассиве(МассивКолонки, ЗначениеПоУмолчаниюВход);
	Возврат РезультатФункции;
КонецФункции		// ПроизведениеВКолонке()

// Определяет среднее значение в колонке ИмяКолонкиВход таблицы ТаблицаВход. Когда данные пустые, либо возникла
// ошибка - будет возвращено ЗначениеПоУмолчаниюВход.
Функция СреднееВКолонке(ТаблицаВход, ИмяКолонкиВход, ЗначениеПоУмолчаниюВход = Неопределено)
	РезультатФункции = ЗначениеПоУмолчаниюВход;
	МассивКолонки = ТаблицаВход.ВыгрузитьКолонку(ИмяКолонкиВход);
	РезультатФункции = ОбщегоНазначенияКлиентСерверУХ.СреднееАрифметическоеВМассиве(МассивКолонки, ЗначениеПоУмолчаниюВход);
	Возврат РезультатФункции;
КонецФункции		// ПроизведениеВКолонке()

// Определяет сумму в колонке ИмяКолонкиВход таблицы ТаблицаВход. Когда данные пустые, либо возникла
// ошибка - будет возвращено ЗначениеПоУмолчаниюВход.
Функция ИтогВКолонке(ТаблицаВход, ИмяКолонкиВход, ЗначениеПоУмолчаниюВход = Неопределено)
	РезультатФункции = ЗначениеПоУмолчаниюВход;
	Попытка
		РезультатФункции = ТаблицаВход.Итог(ИмяКолонкиВход);		
	Исключение
		РезультатФункции = ЗначениеПоУмолчаниюВход;
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции		// ИтогВКолонке()

// По таблице ТаблицаВход возвращает новую таблицу, в которой подсчитаны итоги по показателям
// согласно способу СпособРасчетаВход.
Функция РассчитатьИтогиПоказателя(ТаблицаВход, СпособРасчетаВход, ИмяОтчетаВход)
	// Инициализация.
	РезультатФункции = ТаблицаВход.СкопироватьКолонки();
	ПустаяИБ = Справочники.ВнешниеИнформационныеБазы.ПустаяСсылка();
	ПустойПользователь = Справочники.Пользователи.ПустаяСсылка();
	ПустойПоказатель = Справочники.ПоказателиМонитораКлючевыхПоказателей.ПустаяСсылка();
	Если ТаблицаВход.Количество() > 0 Тогда
		// В таблице есть значения. Рассчитаем итоги.
		СтрокаСортировки = ИмяОтчетаВход + "ДатаНачалаПериода, " + ИмяОтчетаВход + "ДатаОкончанияПериода";
		ТаблицаВход.Сортировать(СтрокаСортировки);
		ПерваяСтрока = ТаблицаВход[0];
		ПоследняяСтрока = ТаблицаВход[ТаблицаВход.Количество()-1];
		НоваяСтрока = РезультатФункции.Добавить();
		// Вычисление итогов по факту, плану и предыдущему значению.
		Если СпособРасчетаВход = Перечисления.СпособыРасчетаИтоговыхЗначенийПоказателейМКП.ПервоеЗначение Тогда
			// Первое значение.
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПерваяСтрока);
		ИначеЕсли СпособРасчетаВход = Перечисления.СпособыРасчетаИтоговыхЗначенийПоказателейМКП.ПоследнееЗначение Тогда
			// Последнее значение.
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПоследняяСтрока);
		ИначеЕсли СпособРасчетаВход = Перечисления.СпособыРасчетаИтоговыхЗначенийПоказателейМКП.Максимум Тогда
			// Максимум.
			НоваяСтрока[ИмяОтчетаВход + "ФактическоеЗначениеТекущегоПериода"]					 = МаксимумВКолонке(ТаблицаВход, ИмяОтчетаВход + "ФактическоеЗначениеТекущегоПериода", 0);
			НоваяСтрока[ИмяОтчетаВход + "ФактическоеЗначениеПредыдущегоПериода"]				 = МаксимумВКолонке(ТаблицаВход, ИмяОтчетаВход + "ФактическоеЗначениеПредыдущегоПериода", 0);
			НоваяСтрока[ИмяОтчетаВход + "ПлановоеЗначение"]										 = МаксимумВКолонке(ТаблицаВход, ИмяОтчетаВход + "ПлановоеЗначение", 0);
		ИначеЕсли СпособРасчетаВход = Перечисления.СпособыРасчетаИтоговыхЗначенийПоказателейМКП.Минимум Тогда
			// Минимум.
			НоваяСтрока[ИмяОтчетаВход + "ФактическоеЗначениеТекущегоПериода"]					 = МинимумВКолонке(ТаблицаВход, ИмяОтчетаВход + "ФактическоеЗначениеТекущегоПериода", 0);
			НоваяСтрока[ИмяОтчетаВход + "ФактическоеЗначениеПредыдущегоПериода"]				 = МинимумВКолонке(ТаблицаВход, ИмяОтчетаВход + "ФактическоеЗначениеПредыдущегоПериода", 0);
			НоваяСтрока[ИмяОтчетаВход + "ПлановоеЗначение"]										 = МинимумВКолонке(ТаблицаВход, ИмяОтчетаВход + "ПлановоеЗначение", 0);
		ИначеЕсли СпособРасчетаВход = Перечисления.СпособыРасчетаИтоговыхЗначенийПоказателейМКП.Произведение Тогда
			// Произведение.
			НоваяСтрока[ИмяОтчетаВход + "ФактическоеЗначениеТекущегоПериода"]					 = ПроизведениеВКолонке(ТаблицаВход, ИмяОтчетаВход + "ФактическоеЗначениеТекущегоПериода", 0);
			НоваяСтрока[ИмяОтчетаВход + "ФактическоеЗначениеПредыдущегоПериода"]				 = ПроизведениеВКолонке(ТаблицаВход, ИмяОтчетаВход + "ФактическоеЗначениеПредыдущегоПериода", 0);
			НоваяСтрока[ИмяОтчетаВход + "ПлановоеЗначение"]										 = ПроизведениеВКолонке(ТаблицаВход, ИмяОтчетаВход + "ПлановоеЗначение", 0);			
		ИначеЕсли СпособРасчетаВход = Перечисления.СпособыРасчетаИтоговыхЗначенийПоказателейМКП.Среднее Тогда
			// Среднее.
			НоваяСтрока[ИмяОтчетаВход + "ФактическоеЗначениеТекущегоПериода"]					 = СреднееВКолонке(ТаблицаВход, ИмяОтчетаВход + "ФактическоеЗначениеТекущегоПериода", 0);
			НоваяСтрока[ИмяОтчетаВход + "ФактическоеЗначениеПредыдущегоПериода"]				 = СреднееВКолонке(ТаблицаВход, ИмяОтчетаВход + "ФактическоеЗначениеПредыдущегоПериода", 0);
			НоваяСтрока[ИмяОтчетаВход + "ПлановоеЗначение"]										 = СреднееВКолонке(ТаблицаВход, ИмяОтчетаВход + "ПлановоеЗначение", 0);						
		ИначеЕсли СпособРасчетаВход = Перечисления.СпособыРасчетаИтоговыхЗначенийПоказателейМКП.Сумма Тогда
			// Сумма.
			НоваяСтрока[ИмяОтчетаВход + "ФактическоеЗначениеТекущегоПериода"]					 = ИтогВКолонке(ТаблицаВход, ИмяОтчетаВход + "ФактическоеЗначениеТекущегоПериода", 0);
			НоваяСтрока[ИмяОтчетаВход + "ФактическоеЗначениеПредыдущегоПериода"]				 = ИтогВКолонке(ТаблицаВход, ИмяОтчетаВход + "ФактическоеЗначениеПредыдущегоПериода", 0);
			НоваяСтрока[ИмяОтчетаВход + "ПлановоеЗначение"]										 = ИтогВКолонке(ТаблицаВход, ИмяОтчетаВход + "ПлановоеЗначение", 0);						
		ИначеЕсли Не ЗначениеЗаполнено(СпособРасчетаВход) Тогда
			// Пустое значение. По умолчанию берём последнюю строку.
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПоследняяСтрока);
		Иначе
			// Неизвестный вариант.
			ТекстСообщения = НСтр("ru = 'Неизвестный вариант способа расчёта итогово значения %СпособРасчет% для показателя %Показатель%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СпособРасчет%", Строка(СпособРасчетаВход));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Показатель%", Строка(ПоследняяСтрока[ИмяОтчетаВход + "Показатель"]));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			НоваяСтрока[ИмяОтчетаВход + "ФактическоеЗначениеТекущегоПериода"]					 = 0;
			НоваяСтрока[ИмяОтчетаВход + "ФактическоеЗначениеПредыдущегоПериода"]				 = 0;
			НоваяСтрока[ИмяОтчетаВход + "ПлановоеЗначение"]										 = 0;
		КонецЕсли;
		// Заполнение измерений и вычисляемых полей.
		ЗначениеФакт = НоваяСтрока[ИмяОтчетаВход + "ФактическоеЗначениеТекущегоПериода"];
		ЗначениеПред = НоваяСтрока[ИмяОтчетаВход + "ФактическоеЗначениеПредыдущегоПериода"];
		ЗначениеПлан = НоваяСтрока[ИмяОтчетаВход + "ПлановоеЗначение"];
		НоваяСтрока[ИмяОтчетаВход + "Показатель"]											 = ПоследняяСтрока[ИмяОтчетаВход + "Показатель"];
		НоваяСтрока[ИмяОтчетаВход + "ИспользуемаяИБ"]										 = ПоследняяСтрока[ИмяОтчетаВход + "ИспользуемаяИБ"];
		НоваяСтрока[ИмяОтчетаВход + "Ответственный"]										 = ПоследняяСтрока[ИмяОтчетаВход + "Ответственный"];
		НоваяСтрока[ИмяОтчетаВход + "Тренд"]												 = ПоследняяСтрока[ИмяОтчетаВход + "Тренд"];
		НоваяСтрока[ИмяОтчетаВход + "Состояние"]											 = ПоследняяСтрока[ИмяОтчетаВход + "Состояние"];
		НоваяСтрока[ИмяОтчетаВход + "ИзменениеАбсолютное"]									 = ЗначениеФакт - ЗначениеПред;
		Если ЗначениеПред <> 0 Тогда
			НоваяСтрока[ИмяОтчетаВход + "ИзменениеОтносительное"]							 = (ЗначениеФакт - ЗначениеПред) / ЗначениеПред;
		Иначе
			НоваяСтрока[ИмяОтчетаВход + "ИзменениеОтносительное"]							 = 0;
		КонецЕсли;
		НоваяСтрока[ИмяОтчетаВход + "ОтклонениеОтПланаАбсолютное"]							 = ЗначениеФакт - ЗначениеПлан;
		Если ЗначениеПлан <> 0 Тогда
			НоваяСтрока[ИмяОтчетаВход + "ОтклонениеОтПланаОтносительное"]					 = (ЗначениеФакт - ЗначениеПлан) / ЗначениеПлан;
			НоваяСтрока[ИмяОтчетаВход + "ПроцентВыполненияПлана"]							 = ЗначениеФакт / ЗначениеПлан;  
		Иначе
			НоваяСтрока[ИмяОтчетаВход + "ОтклонениеОтПланаОтносительное"]					 = 0;
			НоваяСтрока[ИмяОтчетаВход + "ПроцентВыполненияПлана"]							 = 0;  
		КонецЕсли;
		НоваяСтрока[ИмяОтчетаВход + "ИспользуетсяФактическоеЗначениеТекущегоПериода"]		 = МаксимумВКолонке(ТаблицаВход, ИмяОтчетаВход + "ИспользуетсяФактическоеЗначениеТекущегоПериода", Ложь);
		НоваяСтрока[ИмяОтчетаВход + "ИспользуетсяФактическоеЗначениеПредыдущегоПериода"]	 = МаксимумВКолонке(ТаблицаВход, ИмяОтчетаВход + "ИспользуетсяФактическоеЗначениеПредыдущегоПериода", Ложь);
		НоваяСтрока[ИмяОтчетаВход + "ИспользуетсяПлановоеЗначение"]							 = МаксимумВКолонке(ТаблицаВход, ИмяОтчетаВход + "ИспользуетсяПлановоеЗначение", Ложь);
	Иначе
		// В таблице нет значений. Пропускаем.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// РассчитатьИтогиПоказателя()

// Добавляет в дерево отчета ТЗОтвета строки показателей из области ИмяОтчета
// по данным контекста ВнешнийКонтекст.
Процедура ДобавитьСтрокиВДеревоОтветаБезРегистра(Объект, ИмяОтчета, ВнешнийКонтекст, ТЗОтвета)
	// Получим промежуточные периоды.
	ПериодНачалоВложения		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВнешнийКонтекст, "ПериодНачало", Справочники.Периоды.ПустаяСсылка());
	ПериодОкончаниеВложения		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВнешнийКонтекст, "БазовыйПериод", Справочники.Периоды.ПустаяСсылка());
	ПериодичностьВложения 		 = ПериодОкончаниеВложения.Периодичность;
	МассивВложенныхПериодов 	 = ПериодыУХ.ПолучитьПодчиненныеПериоды(ПериодНачалоВложения, ПериодОкончаниеВложения, ПериодичностьВложения);  
	Если МассивВложенныхПериодов.Количество() > 0 Тогда
		ВыгрузкаОтвета = ОбщегоНазначенияСерверУХ.ПреобразоватьДеревоЗначенийВТаблицу(ТЗОтвета);
		// Получим развёрные данные по всем входящим периодам.
		ТаблицаВрем = ВыгрузкаОтвета.СкопироватьКолонки();
		ТаблицаВрем.Колонки.Добавить(ИмяОтчета + "Период");
		ТаблицаВрем.Колонки.Добавить(ИмяОтчета + "ДатаНачалаПериода");
		ТаблицаВрем.Колонки.Добавить(ИмяОтчета + "ДатаОкончанияПериода");
		Для Каждого ТекМассивВложенныхПериодов Из МассивВложенныхПериодов Цикл
			КонтекстКопия = ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(ВнешнийКонтекст);
			КонтекстКопия.БазовыйПериод = ТекМассивВложенныхПериодов;
			КонтекстКопия.ПериодСравнения = ТекМассивВложенныхПериодов;
			ТаблицаПоказателей = ПолучитьТаблицуЗначенийПоказателейМКП(Объект.Ссылка, КонтекстКопия, , Истина);
			Если ТаблицаПоказателей <> Неопределено Тогда
				Для Каждого Строка Из ТаблицаПоказателей Цикл
					СтрокаПоказателя = ТаблицаВрем.Добавить();
					СтрокаПоказателя[ИмяОтчета + "Показатель"]											 = Строка.Показатель;
					СтрокаПоказателя[ИмяОтчета + "ИспользуемаяИБ"]										 = Строка.ВнешняяИБ;
					СтрокаПоказателя[ИмяОтчета + "Ответственный"]										 = Строка.Ответственный;
					СтрокаПоказателя[ИмяОтчета + "Тренд"]												 = ТиповыеОтчетыУХ.ВернутьКодПредставленияТренда(Строка.Тренд);
					СтрокаПоказателя[ИмяОтчета + "Состояние"]											 = ТиповыеОтчетыУХ.ВернутьКодПредставленияТренда(Строка.Состояние);
					СтрокаПоказателя[ИмяОтчета + "ФактическоеЗначениеТекущегоПериода"]					 = Строка.ФактическоеЗначениеТекущегоПериода;
					СтрокаПоказателя[ИмяОтчета + "ФактическоеЗначениеПредыдущегоПериода"]				 = Строка.ФактическоеЗначениеПредыдущегоПериода;
					СтрокаПоказателя[ИмяОтчета + "ПлановоеЗначение"]									 = Строка.ПлановоеЗначение;
					СтрокаПоказателя[ИмяОтчета + "ИзменениеАбсолютное"]									 = Строка.ИзменениеАбсолютное;
					СтрокаПоказателя[ИмяОтчета + "ИзменениеОтносительное"]								 = Строка.ИзменениеОтносительное;
					СтрокаПоказателя[ИмяОтчета + "ОтклонениеОтПланаАбсолютное"]							 = Строка.ОтклонениеОтПланаАбсолютное;
					СтрокаПоказателя[ИмяОтчета + "ОтклонениеОтПланаОтносительное"]						 = Строка.ОтклонениеОтПланаОтносительное;
					СтрокаПоказателя[ИмяОтчета + "ПроцентВыполненияПлана"]								 = Строка.ПроцентВыполненияПлана;
					СтрокаПоказателя[ИмяОтчета + "ИспользуетсяФактическоеЗначениеТекущегоПериода"]		 = ЗначениеЗаполнено(Строка.ИсточникЗначенияТекущегоПериода);
					СтрокаПоказателя[ИмяОтчета + "ИспользуетсяФактическоеЗначениеПредыдущегоПериода"]	 = ЗначениеЗаполнено(Строка.ИсточникЗначенияПериодаСравнения);
					СтрокаПоказателя[ИмяОтчета + "ИспользуетсяПлановоеЗначение"]						 = ЗначениеЗаполнено(Строка.ИсточникПлановогоЗначения);
					СтрокаПоказателя[ИмяОтчета + "Период"]												 = ТекМассивВложенныхПериодов;
					СтрокаПоказателя[ИмяОтчета + "ДатаНачалаПериода"]									 = ТекМассивВложенныхПериодов.ДатаНачала;
					СтрокаПоказателя[ИмяОтчета + "ДатаОкончанияПериода"]								 = ТекМассивВложенныхПериодов.ДатаОкончания;
					Строка.Обработано = Истина;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;	
		// Получим показатели из сформированной таблицы.
		МассивПоказателей = ТаблицаВрем.ВыгрузитьКолонку(ИмяОтчета + "Показатель");
		МассивПоказателей = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивПоказателей);
		МассивПоказателей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПоказателей);
		Для Каждого ТекМассивПоказателей Из МассивПоказателей Цикл
			// Отберём данные по текущему показателю.
			ДанныеПоказателя = ТаблицаВрем.СкопироватьКолонки();
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить(ИмяОтчета + "Показатель", ТекМассивПоказателей);
			НайденныеСтроки = ТаблицаВрем.НайтиСтроки(СтруктураПоиска);
			Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
				НоваяСтрокаДанныеПоказателя = ДанныеПоказателя.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДанныеПоказателя, ТекНайденныеСтроки);
			КонецЦикла;	
			// Свернём согласно способу вычисления итогового значения.
			СпособРасчета = ТекМассивПоказателей.СпособРасчетаИтоговогоЗначения;
			РезультатТаблица = РассчитатьИтогиПоказателя(ДанныеПоказателя, СпособРасчета, ИмяОтчета);
			// Добавим готовые данные в дерево.
			Для Каждого ТекРезультатТаблица Из РезультатТаблица Цикл
				СтрокаПоказателя = ТЗОтвета.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПоказателя, ТекРезультатТаблица);
			КонецЦикла;	
		КонецЦикла;
	Иначе
		// Пропускаем вывод.
	КонецЕсли;	
КонецПроцедуры		// ДобавитьСтрокиВДеревоОтветаБезРегистра()

Процедура ОбновитьОтчет(Результат, Объект, СохраненнаяНастройка = Неопределено, ДанныеРасшифровки, ОбщийОтбор = Неопределено, ПараметрыОтчета = Неопределено, URLСхемы, ВнешнийКонтекст = Неопределено, ИмяОтчета = "", Знач ИспользоватьДанныеРегистра = Ложь, НастройкиКомпоновщика = Неопределено, ГрафСхема = Неопределено) Экспорт
	
	Перем СтруктураПараметровДляМонитораЭффективности;
	Перем ЗначенияНастроекПанелиПользователя;
	Перем НастройкиМонитораЭффективности;
	Перем НастройкиПериода;
	
	
	Если ТипЗнч(СохраненнаяНастройка) = Тип("Структура") Тогда
		// Сохраненная настройка передается в виде структуры при отображении отчета - расшифровки, 
		// так как настройки отбора зависят от поля расшифровки.
		СохраненнаяНастройка.Свойство("НастройкиКомпоновщика", НастройкиКомпоновщика);
		СохраненнаяНастройка.Свойство("ЗначенияНастроекПанелиПользователя", ЗначенияНастроекПанелиПользователя);
		ИспользоватьДанныеРегистра = Ложь; 		 // Пришли измененные данные. Использовать сохраненные данные в отчете нельзя.
	ИначеЕсли ЗначениеЗаполнено(СохраненнаяНастройка) Тогда
		// Используются сохраненные настройки.
		ХранилищеНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если ХранилищеНастроек = Неопределено Тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Не удалось прочитать настройки отчета. Будут использованы настройки по умолчанию'"));
			ЗначенияНастроекПанелиПользователя = Объект.ЗначенияНастроекПанелиПользователя.Получить();
			НастройкиКомпоновщика = Объект.НастройкиСхемыКомпоновкиДанныхПоУмолчанию.Получить();
		Иначе
			ЗначенияНастроекПанелиПользователя = ХранилищеНастроек.ЗначенияНастроекПанелиОтчета;
			НастройкиКомпоновщика              = ХранилищеНастроек.НастройкиКомпоновки;
		КонецЕсли;
	Иначе
		// Используются настройки по умолчанию.
		ЗначенияНастроекПанелиПользователя = Объект.ЗначенияНастроекПанелиПользователя.Получить();
		НастройкиКомпоновщика = Объект.НастройкиСхемыКомпоновкиДанныхПоУмолчанию.Получить();
	КонецЕсли;
	
	Если ЗначенияНастроекПанелиПользователя = Неопределено Тогда
		
		ЗначенияНастроекПанелиПользователя = ТиповыеОтчеты_УправляемыйРежимУХ.ПолучитьЗначенияНастроекПанелиПользователяПоУмолчанию(НастройкиКомпоновщика);
		
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	Если ЗначенияНастроекПанелиПользователя <> Неопределено Тогда
		ЗначенияНастроекПанелиПользователя.Свойство("НастройкиМонитораЭффективности", НастройкиМонитораЭффективности);
		ЗначенияНастроекПанелиПользователя.Свойство("НастройкаПериода", НастройкиПериода);
	КонецЕсли;
	
	Если Объект.ВидПроизвольногоОтчета = 1 Тогда // Монитор ключевых показателей.
		
		ТЗОтвета = БизнесАнализВызовСервераУХ.СформироватьТаблицуМонитораПоказателей(ИмяОтчета);
		Результат = ТЗОтвета; 		// По умолчанию результат - пустое дерево значений, которое вернется в случае ошибки.
		
		ВнешнийКонтекст = ВернутьСтруктуруВнешнегоКонтекста(НастройкиПериода, НастройкиМонитораЭффективности, ОбщийОтбор, ПараметрыОтчета);
		ОтборОрганизация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВнешнийКонтекст, "Организация", Справочники.Организации.ПустаяСсылка());
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Если ТипЗнч(ПараметрыОтчета) = Тип("Структура") Тогда
			
			Для Каждого ЭлементСтруктуры Из ПараметрыОтчета Цикл
				Если НастройкиМонитораЭффективности.Свойство(ЭлементСтруктуры.Ключ) Тогда
					НастройкиМонитораЭффективности.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ИспользоватьДанныеРегистра Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПроизвольныеОтчетыИсточникиДанных.ИсточникДанных КАК Показатель,
			|	ПоказателиМонитораКлючевыхПоказателей.Проекция КАК Проекция,
			|	ВЫБОР КОГДА ПоказателиМонитораКлючевыхПоказателей.ИсточникЗначенияТекущегоПериода = ЗНАЧЕНИЕ(Справочник.ИсточникиДанныхДляРасчетов.ПустаяСсылка) ТОГДА ЛОЖЬ
			|	ИНАЧЕ ИСТИНА КОНЕЦ КАК ИспользуетсяФактическоеЗначениеТекущегоПериода,
			|	ВЫБОР КОГДА ПоказателиМонитораКлючевыхПоказателей.ИсточникЗначенияПериодаСравнения = ЗНАЧЕНИЕ(Справочник.ИсточникиДанныхДляРасчетов.ПустаяСсылка) ТОГДА ЛОЖЬ
			|	ИНАЧЕ ИСТИНА КОНЕЦ КАК ИспользуетсяФактическоеЗначениеПредыдущегоПериода,
			|	ВЫБОР КОГДА ПоказателиМонитораКлючевыхПоказателей.ИсточникПлановогоЗначения = ЗНАЧЕНИЕ(Справочник.ИсточникиДанныхДляРасчетов.ПустаяСсылка) ТОГДА ЛОЖЬ
			|	ИНАЧЕ ИСТИНА КОНЕЦ КАК ИспользуетсяПлановоеЗначение,
			|	ЕСТЬNULL(ЦелиКлючевыеПоказатели.Ссылка, ЗНАЧЕНИЕ(Справочник.Цели.ПустаяСсылка)) КАК Цель,
			|	ПроизвольныеОтчетыИсточникиДанных.ВнешняяИБ КАК ВнешняяИБ,
			|	ЗначенияПоказателейМКП.ФактическоеЗначениеТекущегоПериода,
			|	ЗначенияПоказателейМКП.ФактическоеЗначениеПредыдущегоПериода,
			|	ЗначенияПоказателейМКП.ПлановоеЗначение,
			|	ЗначенияПоказателейМКП.Состояние,
			|	ЗначенияПоказателейМКП.Тренд,
			|	ЗначенияПоказателейМКП.Ответственный,
			|	ЗначенияПоказателейМКП.ИзменениеАбсолютное,
			|	ЗначенияПоказателейМКП.ИзменениеОтносительное,
			|	ЗначенияПоказателейМКП.ОтклонениеОтПланаАбсолютное,
			|	ЗначенияПоказателейМКП.ОтклонениеОтПланаОтносительное,
			|	ЗначенияПоказателейМКП.ПроцентВыполненияПлана
			|ПОМЕСТИТЬ ВН_Таблица
			|ИЗ
			|	Справочник.ПроизвольныеОтчеты.ИсточникиДанных КАК ПроизвольныеОтчетыИсточникиДанных
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПроизвольныеОтчеты КАК ПроизвольныеОтчеты
			|		ПО ПроизвольныеОтчетыИсточникиДанных.Ссылка = ПроизвольныеОтчеты.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиМонитораКлючевыхПоказателей КАК ПоказателиМонитораКлючевыхПоказателей
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейМКП КАК ЗначенияПоказателейМКП
			|			ПО (ЗначенияПоказателейМКП.МКП = &ПроизвольныйОтчет)
			|				И (ЗначенияПоказателейМКП.Показатель = ПоказателиМонитораКлючевыхПоказателей.Ссылка)
			|				И (ЗначенияПоказателейМКП.СохраненнаяНастройка = &СохраненнаяНастройка)
			|		ПО ПроизвольныеОтчетыИсточникиДанных.ИсточникДанных = ПоказателиМонитораКлючевыхПоказателей.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Цели.КлючевыеПоказатели КАК ЦелиКлючевыеПоказатели
			|		ПО (ЦелиКлючевыеПоказатели.Показатель = ПоказателиМонитораКлючевыхПоказателей.Ссылка)
			|ГДЕ
			|	ПроизвольныеОтчеты.Ссылка = &ПроизвольныйОтчет";
			
			Запрос.УстановитьПараметр("ПроизвольныйОтчет", Объект.Ссылка);
			Запрос.УстановитьПараметр("СохраненнаяНастройка", СохраненнаяНастройка);
			
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПроизвольныеОтчетыИсточникиДанных.ИсточникДанных КАК Показатель,
			|	ПоказателиМонитораКлючевыхПоказателей.Проекция КАК Проекция,
			|	ЕСТЬNULL(ЦелиКлючевыеПоказатели.Ссылка, ЗНАЧЕНИЕ(Справочник.Цели.ПустаяСсылка)) КАК Цель,
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА ПоказателиМонитораКлючевыхПоказателей.Ответственный ССЫЛКА Справочник.Пользователи
			|				ТОГДА ПоказателиМонитораКлючевыхПоказателей.Ответственный
			|			ИНАЧЕ ОтветственныеПоПоказателю.Пользователь
			|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Ответственный,
			|	ПроизвольныеОтчетыИсточникиДанных.ВнешняяИБ КАК ВнешняяИБ
			|ПОМЕСТИТЬ ВН_Таблица
			|ИЗ
			|	Справочник.ПроизвольныеОтчеты.ИсточникиДанных КАК ПроизвольныеОтчетыИсточникиДанных
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПроизвольныеОтчеты КАК ПроизвольныеОтчеты
			|		ПО ПроизвольныеОтчетыИсточникиДанных.Ссылка = ПроизвольныеОтчеты.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиМонитораКлючевыхПоказателей КАК ПоказателиМонитораКлючевыхПоказателей
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеПоПоказателю
			|			ПО (ОтветственныеПоПоказателю.Организация = &ОтборОрганизация)
			|				И (ОтветственныеПоПоказателю.Роль = ПоказателиМонитораКлючевыхПоказателей.Ответственный)
			|		ПО ПроизвольныеОтчетыИсточникиДанных.ИсточникДанных = ПоказателиМонитораКлючевыхПоказателей.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Цели.КлючевыеПоказатели КАК ЦелиКлючевыеПоказатели
			|		ПО (ЦелиКлючевыеПоказатели.Показатель = ПоказателиМонитораКлючевыхПоказателей.Ссылка)
			|ГДЕ
			|	ПроизвольныеОтчеты.Ссылка = &ПроизвольныйОтчет";
			ЗАпрос.УстановитьПараметр("ОтборОрганизация", ОтборОрганизация);
			Запрос.УстановитьПараметр("ПроизвольныйОтчет", Объект.Ссылка);
		КонецЕсли;
		Запрос.Выполнить();
		
		Если ИспользоватьДанныеРегистра Тогда
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	Вн_Таблица.Показатель,
			|	Вн_Таблица.Ответственный,
			|	Вн_Таблица.Проекция,
			|	Вн_Таблица.Цель,
			|	Вн_Таблица.ВнешняяИБ,
			|	Вн_Таблица.ФактическоеЗначениеТекущегоПериода,
			|	Вн_Таблица.ФактическоеЗначениеПредыдущегоПериода,
			|	Вн_Таблица.ПлановоеЗначение,
			|	Вн_Таблица.ИзменениеАбсолютное,
			|	Вн_Таблица.ИзменениеОтносительное,
			|	Вн_Таблица.ОтклонениеОтПланаАбсолютное,
			|	Вн_Таблица.ОтклонениеОтПланаОтносительное,
			|	Вн_Таблица.ПроцентВыполненияПлана,
			|	Вн_Таблица.Тренд,
			|	Вн_Таблица.Состояние,
			|	Вн_Таблица.ИспользуетсяФактическоеЗначениеТекущегоПериода,
			|	Вн_Таблица.ИспользуетсяФактическоеЗначениеПредыдущегоПериода,
			|	Вн_Таблица.ИспользуетсяПлановоеЗначение,
			|	ЛОЖЬ КАК Обработано
			|ИЗ
			|	ВН_Таблица КАК Вн_Таблица
			|
			|УПОРЯДОЧИТЬ ПО
			|	Вн_Таблица.Проекция,
			|	Вн_Таблица.Ответственный,
			|	Вн_Таблица.Цель";
		Иначе
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	Вн_Таблица.Показатель,
			|	Вн_Таблица.Ответственный,
			|	Вн_Таблица.Проекция,
			|	Вн_Таблица.Цель,
			|	Вн_Таблица.ВнешняяИБ,
			|	ЛОЖЬ КАК Обработано
			|ИЗ
			|	ВН_Таблица КАК Вн_Таблица
			|
			|УПОРЯДОЧИТЬ ПО
			|	Вн_Таблица.Проекция,
			|	Вн_Таблица.Ответственный,
			|	Вн_Таблица.Цель";
		КонецЕсли;
		
		Если Объект.ГруппировкаМонитора = 0 Тогда // Группировка не используется. Вывод данных напрямую из таблицы показателей
			
			Если Объект.ОтображатьЦели Тогда
				
				Если ИспользоватьДанныеРегистра Тогда
					ТаблицаПоказателей = Запрос.Выполнить().Выгрузить();
				Иначе
					ТаблицаПоказателей = ПолучитьТаблицуЗначенийПоказателейМКП(Объект.Ссылка, ВнешнийКонтекст, , Истина);
					Если ТаблицаПоказателей = Неопределено Тогда
						Результат = ТЗОтвета;
						Возврат;
					КонецЕсли;
				КонецЕсли;
				
				ТаблицаСвязей      = Новый ТаблицаЗначений;
				ТаблицаЭлементов   = Новый ТаблицаЗначений;
				ЗаполнитьТаблицуСвязейИЭлементов(ТаблицаСвязей, ТаблицаЭлементов, ТаблицаПоказателей, 3, ОтборОрганизация);
				ЭлементыПервогоУровня = ТаблицаЭлементов.Скопировать(Новый Структура("ЭлементВерхнегоУровня", Истина));
				
				Для Каждого Элемент Из ЭлементыПервогоУровня Цикл
					
					СтрокаЦели = ТЗОтвета.Строки.Добавить();
					СтрокаЦели[ИмяОтчета + "Показатель"] = Элемент.Элемент;
					СтрокаЦели[ИмяОтчета + "Ответственный"] = Элемент.Ответственный;
					ВидСтроки = ?(ТипЗнч(Элемент.Элемент) = Тип("СправочникСсылка.ПоказателиМонитораКлючевыхПоказателей"), 0, 1);
					СтрокаЦели[ИмяОтчета + "СлужебнаяСтрока"] = ВидСтроки;
					Состояние = ЗаполнитьПодчиненныеСтрокиДерева(ТаблицаСвязей, СтрокаЦели, ТаблицаПоказателей, ТаблицаЭлементов, ИмяОтчета, НастройкиМонитораЭффективности);
					Если ВидСтроки = 1 Тогда
						СтрокаЦели[ИмяОтчета + "Состояние"] = ТиповыеОтчетыУХ.ВернутьКодПредставленияТренда(Состояние);
					КонецЕсли;
					
				КонецЦикла;
				
				СоответствиеЦелей = СформироватьСоответствиеКоличестваИнициативЦелям();
				ТабУзловСхема = ПреобразоватьТабУзлов(ТаблицаЭлементов, ТЗОтвета, ИмяОтчета, СоответствиеЦелей);
				Если ТабУзловСхема.Количество() > 0 Тогда
					ТабСвязейСхема = ПреобразоватьТабСвязей(ТаблицаСвязей);
					ЗаполнитьИсточникУзлов(ТабУзловСхема, ТабСвязейСхема);
					Если ГрафСхема <> Неопределено Тогда
						МассивУзлов = ТабУзловСхема.ВыгрузитьКолонку("Узел");
						ТаблицаИнвестирования = ПолучитьТаблицуИнвестированияГрафическойСхемы(ТаблицаСвязей);
						СоответстветствиеУчастия = РасчетДолейВладения.ПолучитьПоследовательностиУчастия(МассивУзлов, ТаблицаИнвестирования);
						РасчетДолейВладения.ЗаполнитьСтрокиКакМаксимальнаяПоследовательностьОбъектаИнвестирования(ТабУзловСхема, СоответстветствиеУчастия);
						ПредставлениеСвязи = Новый Массив;
						ПредставлениеСвязи.Добавить("Представление");
						РасчетДолейВладения.РасположитьУзлыИСвязи(ТабУзловСхема, ТабСвязейСхема, ПредставлениеСвязи);
						ТабУзловСхема = ПереставитьКолонкиУзловСхемы(ТабУзловСхема, ТабСвязейСхема);
						ГрафСхема = ОтрисовкаГрафа.ПолучитьГрафическуюСхемуГрафа(ТабСвязейСхема, ТабУзловСхема, , 1.5);
					Иначе
						ГрафСхема = Новый ГрафическаяСхема;
					КонецЕсли;
				Иначе
					ГрафСхема = Новый ГрафическаяСхема;			// Пустая таблица.
				КонецЕсли;
			Иначе
				Если ИспользоватьДанныеРегистра Тогда
					Выборка = Запрос.Выполнить().Выбрать();
					Пока Выборка.Следующий() Цикл
						СтрокаПоказателя = ТЗОтвета.Строки.Добавить();
						СтрокаПоказателя[ИмяОтчета + "Показатель"]                            = Выборка.Показатель;
						СтрокаПоказателя[ИмяОтчета + "ИспользуемаяИБ"]                        = Выборка.ВнешняяИБ;
						СтрокаПоказателя[ИмяОтчета + "Ответственный"]                         = Выборка.Ответственный;
						СтрокаПоказателя[ИмяОтчета + "Тренд"]                                 = ТиповыеОтчетыУХ.ВернутьКодПредставленияТренда(Выборка.Тренд);
						СтрокаПоказателя[ИмяОтчета + "Состояние"]                             = ТиповыеОтчетыУХ.ВернутьКодПредставленияТренда(Выборка.Состояние);
						СтрокаПоказателя[ИмяОтчета + "ФактическоеЗначениеТекущегоПериода"]    = Выборка.ФактическоеЗначениеТекущегоПериода;
						СтрокаПоказателя[ИмяОтчета + "ФактическоеЗначениеПредыдущегоПериода"] = Выборка.ФактическоеЗначениеПредыдущегоПериода;
						СтрокаПоказателя[ИмяОтчета + "ПлановоеЗначение"]                      = Выборка.ПлановоеЗначение;
						СтрокаПоказателя[ИмяОтчета + "ИзменениеАбсолютное"]                   = Выборка.ИзменениеАбсолютное;
						СтрокаПоказателя[ИмяОтчета + "ИзменениеОтносительное"]                = Выборка.ИзменениеОтносительное;
						СтрокаПоказателя[ИмяОтчета + "ОтклонениеОтПланаАбсолютное"]           = Выборка.ОтклонениеОтПланаАбсолютное;
						СтрокаПоказателя[ИмяОтчета + "ОтклонениеОтПланаОтносительное"]        = Выборка.ОтклонениеОтПланаОтносительное;
						СтрокаПоказателя[ИмяОтчета + "ПроцентВыполненияПлана"]                 = Выборка.ПроцентВыполненияПлана;
						СтрокаПоказателя[ИмяОтчета + "ИспользуетсяФактическоеЗначениеТекущегоПериода"]    = Выборка.ИспользуетсяФактическоеЗначениеТекущегоПериода;
						СтрокаПоказателя[ИмяОтчета + "ИспользуетсяФактическоеЗначениеПредыдущегоПериода"] = Выборка.ИспользуетсяФактическоеЗначениеПредыдущегоПериода;
						СтрокаПоказателя[ИмяОтчета + "ИспользуетсяПлановоеЗначение"]                      = Выборка.ИспользуетсяПлановоеЗначение;
					КонецЦикла;
				Иначе
					ДобавитьСтрокиВДеревоОтветаБезРегистра(Объект, ИмяОтчета, ВнешнийКонтекст, ТЗОтвета);
				КонецЕсли;
			 КонецЕсли;
		ИначеЕсли Объект.ГруппировкаМонитора = 1 Тогда // Группировка по ответственному
			
			Если ИспользоватьДанныеРегистра Тогда
				ТаблицаПоказателей = Запрос.Выполнить().Выгрузить();
			Иначе
				ТаблицаПоказателей = ПолучитьТаблицуЗначенийПоказателейМКП(Объект.Ссылка, ВнешнийКонтекст, Истина);
				Если ТаблицаПоказателей = Неопределено Тогда
					Результат = ТЗОтвета;
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			СоответствиеСтрокИПроекций = Новый Соответствие;
			
			Если Объект.ОтображатьЦели Тогда // Если отображаются цели, тогда группировка по ответственным по целям, иначе по показателям.
				ТаблицаСвязей      = Новый ТаблицаЗначений;
				ТаблицаЭлементов   = Новый ТаблицаЗначений;
				ЗаполнитьТаблицуСвязейИЭлементов(ТаблицаСвязей, ТаблицаЭлементов, ТаблицаПоказателей, 3, ОтборОрганизация);
				ТаблицаСтрокПервогоУровня    = ТаблицаЭлементов.Скопировать(Новый Структура("ЭлементВерхнегоУровня", Истина));
				
				Для Каждого Элемент Из ТаблицаСтрокПервогоУровня Цикл
					
					Если СоответствиеСтрокИПроекций[Элемент.Ответственный] = Неопределено Тогда
						
						НоваяСтрока = ТЗОтвета.Строки.Добавить();
						НоваяСтрока[ИмяОтчета + "Ответственный"] = Элемент.Ответственный;
						НоваяСтрока[ИмяОтчета + "СлужебнаяСтрока"] = 2;
						СоответствиеСтрокИПроекций.Вставить(Элемент.Ответственный, НоваяСтрока);
						
					КонецЕсли;
					
					СтрокаЦели = СоответствиеСтрокИПроекций[Элемент.Ответственный].Строки.Добавить();
					СтрокаЦели[ИмяОтчета + "Показатель"] = Элемент.Элемент;
					СтрокаЦели[ИмяОтчета + "Ответственный"] = Элемент.Ответственный;
					ВидСтроки = ?(ТипЗнч(Элемент.Элемент) = Тип("СправочникСсылка.ПоказателиМонитораКлючевыхПоказателей") ,0, 1);
					СтрокаЦели[ИмяОтчета + "СлужебнаяСтрока"] = ВидСтроки;
					Состояние = ЗаполнитьПодчиненныеСтрокиДерева(ТаблицаСвязей, СтрокаЦели, ТаблицаПоказателей, ТаблицаЭлементов, ИмяОтчета, НастройкиМонитораЭффективности);
					Если ВидСтроки = 1 Тогда
						СтрокаЦели[ИмяОтчета + "Состояние"] = ТиповыеОтчетыУХ.ВернутьКодПредставленияТренда(Состояние);
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ Вн_Таблица.Ответственный КАК ЭлементПервогоУровня ИЗ Вн_Таблица КАК Вн_Таблица";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					НоваяСтрока = ТзОтвета.Строки.Добавить();
					НоваяСтрока[ИмяОтчета + "Ответственный"] = Выборка.ЭлементПервогоУровня;
					НоваяСтрока[ИмяОтчета + "СлужебнаяСтрока"] = Истина;
					СоответствиеСтрокИПроекций.Вставить(Выборка.ЭлементПервогоУровня, НоваяСтрока);
				КонецЦикла;
				
			КонецЕсли;
			
			
		ИначеЕсли Объект.ГруппировкаМонитора = 2 Тогда // Группировка по проекции
			
			Если ИспользоватьДанныеРегистра Тогда
				ТаблицаПоказателей = Запрос.Выполнить().Выгрузить();
			Иначе
				ТаблицаПоказателей = ПолучитьТаблицуЗначенийПоказателейМКП(Объект.Ссылка, ВнешнийКонтекст, , Истина);
				Если ТаблицаПоказателей = Неопределено Тогда
					Результат = ТЗОтвета;
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			СоответствиеСтрокИПроекций = Новый Соответствие;
			
			Если Объект.ОтображатьЦели Тогда
				
				ТаблицаСвязей      = Новый ТаблицаЗначений;
				ТаблицаЭлементов   = Новый ТаблицаЗначений;
				ЗаполнитьТаблицуСвязейИЭлементов(ТаблицаСвязей, ТаблицаЭлементов, ТаблицаПоказателей, 3, ОтборОрганизация);
				ТаблицаСтрокПервогоУровня    = ТаблицаЭлементов.Скопировать(Новый Структура("ЭлементВерхнегоУровня", Истина));
				
				Для Каждого Элемент Из ТаблицаСтрокПервогоУровня Цикл
					
					Если СоответствиеСтрокИПроекций[Элемент.Проекция] = Неопределено Тогда
						
						НоваяСтрока = ТЗОтвета.Строки.Добавить();
						НоваяСтрока[ИмяОтчета + "Показатель"] = Элемент.Проекция;
						НоваяСтрока[ИмяОтчета + "СлужебнаяСтрока"] = 2;
						СоответствиеСтрокИПроекций.Вставить(Элемент.Проекция, НоваяСтрока);
						
					КонецЕсли;
					
					СтрокаЦели = СоответствиеСтрокИПроекций[Элемент.Проекция].Строки.Добавить();
					СтрокаЦели[ИмяОтчета + "Показатель"] = Элемент.Элемент;
					СтрокаЦели[ИмяОтчета + "Ответственный"] = Элемент.Ответственный;
					ВидСтроки = ?(ТипЗнч(Элемент.Элемент) = Тип("СправочникСсылка.ПоказателиМонитораКлючевыхПоказателей"), 0, 1);
					СтрокаЦели[ИмяОтчета + "СлужебнаяСтрока"] = ВидСтроки;
					Состояние = ЗаполнитьПодчиненныеСтрокиДерева(ТаблицаСвязей, СтрокаЦели, ТаблицаПоказателей, ТаблицаЭлементов, ИмяОтчета, НастройкиМонитораЭффективности);
					Если ВидСтроки = 1 Тогда
						СтрокаЦели[ИмяОтчета + "Состояние"] = ТиповыеОтчетыУХ.ВернутьКодПредставленияТренда(Состояние);
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ Вн_Таблица.Проекция КАК ЭлементПервогоУровня ИЗ ВН_Таблица КАК ВН_Таблица";
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					НоваяСтрока = ТзОтвета.Строки.Добавить();
					НоваяСтрока[ИмяОтчета + "Показатель"] = Выборка.ЭлементПервогоУровня;
					НоваяСтрока[ИмяОтчета + "СлужебнаяСтрока"] = Истина;
					СоответствиеСтрокИПроекций.Вставить(Выборка.ЭлементПервогоУровня, НоваяСтрока);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.Текст = 
		"УНИЧТОЖИТЬ Вн_Таблица";
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТаблицаПоказателей) Тогда
		НеобработанныеПоказатели = ТаблицаПоказателей.НайтиСтроки(Новый Структура("Обработано", Ложь));
		
		Для Каждого Элемент Из НеобработанныеПоказатели Цикл
			
			Если Объект.ГруппировкаМонитора = 1 Тогда
				ПолеГруппировки = Элемент.Ответственный;
			ИначеЕсли Объект.ГруппировкаМонитора = 2 Тогда
				ПолеГруппировки = Элемент.Проекция;
			Иначе
				ПолеГруппировки = Неопределено;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ПолеГруппировки) Тогда
				НоваяСтрока = ТЗОтвета; // Нет группировок, строки добавляем непосредственно в таблицу.
			ИначеЕсли СоответствиеСтрокИПроекций[ПолеГруппировки] = Неопределено Тогда
				НоваяСтрока                 = ТзОтвета.Строки.Добавить();
				Если Объект.ГруппировкаМонитора = 1 Тогда
					НоваяСтрока[ИмяОтчета + "Ответственный"] = ПолеГруппировки;
				Иначе
					НоваяСтрока[ИмяОтчета + "Показатель"]    = ПолеГруппировки;
				КонецЕсли;
				НоваяСтрока[ИмяОтчета + "СлужебнаяСтрока"] = 2;
				СоответствиеСтрокИПроекций.Вставить(Элемент.Проекция, НоваяСтрока);
			Иначе
				НоваяСтрока = СоответствиеСтрокИПроекций[ПолеГруппировки];
			КонецЕсли;
			
			Если СостояниеИТрендУдовлетворяетУсловиям(Элемент.Тренд, НастройкиМонитораЭффективности)
				И СостояниеИТрендУдовлетворяетУсловиям(Элемент.Состояние, НастройкиМонитораЭффективности) Тогда
				СтрокаПоказателя = НоваяСтрока.Строки.Добавить();
				СтрокаПоказателя[ИмяОтчета + "Показатель"]                            = Элемент.Показатель;
				СтрокаПоказателя[ИмяОтчета + "ИспользуемаяИБ"]                        = Элемент.ВнешняяИБ;
				СтрокаПоказателя[ИмяОтчета + "Ответственный"]                         = Элемент.Ответственный;
				СтрокаПоказателя[ИмяОтчета + "Тренд"]                                 = ТиповыеОтчетыУХ.ВернутьКодПредставленияТренда(Элемент.Тренд);
				СтрокаПоказателя[ИмяОтчета + "Состояние"]                             = ТиповыеОтчетыУХ.ВернутьКодПредставленияТренда(Элемент.Состояние);
				СтрокаПоказателя[ИмяОтчета + "ФактическоеЗначениеТекущегоПериода"]    = Элемент.ФактическоеЗначениеТекущегоПериода;
				СтрокаПоказателя[ИмяОтчета + "ФактическоеЗначениеПредыдущегоПериода"] = Элемент.ФактическоеЗначениеПредыдущегоПериода;
				СтрокаПоказателя[ИмяОтчета + "ПлановоеЗначение"]                      = Элемент.ПлановоеЗначение;
				СтрокаПоказателя[ИмяОтчета + "ИзменениеАбсолютное"]                   = Элемент.ИзменениеАбсолютное;
				СтрокаПоказателя[ИмяОтчета + "ИзменениеОтносительное"]                = Элемент.ИзменениеОтносительное;
				СтрокаПоказателя[ИмяОтчета + "ОтклонениеОтПланаОтносительное"]        = Элемент.ОтклонениеОтПланаОтносительное;
				СтрокаПоказателя[ИмяОтчета + "ОтклонениеОтПланаАбсолютное"]           = Элемент.ОтклонениеОтПланаАбсолютное;
				СтрокаПоказателя[ИмяОтчета + "ПроцентВыполненияПлана"]                = Элемент.ПроцентВыполненияПлана;
				
				Если ИспользоватьДанныеРегистра Тогда
					СтрокаПоказателя[ИмяОтчета + "ИспользуетсяФактическоеЗначениеТекущегоПериода"]    = Элемент.ИспользуетсяФактическоеЗначениеТекущегоПериода;
					СтрокаПоказателя[ИмяОтчета + "ИспользуетсяФактическоеЗначениеПредыдущегоПериода"] = Элемент.ИспользуетсяФактическоеЗначениеПредыдущегоПериода;
					СтрокаПоказателя[ИмяОтчета + "ИспользуетсяПлановоеЗначение"]                      = Элемент.ИспользуетсяПлановоеЗначение;
				Иначе
					СтрокаПоказателя[ИмяОтчета + "ИспользуетсяФактическоеЗначениеТекущегоПериода"]    = ЗначениеЗаполнено(Элемент.ИсточникЗначенияТекущегоПериода);
					СтрокаПоказателя[ИмяОтчета + "ИспользуетсяФактическоеЗначениеПредыдущегоПериода"] = ЗначениеЗаполнено(Элемент.ИсточникЗначенияПериодаСравнения);
					СтрокаПоказателя[ИмяОтчета + "ИспользуетсяПлановоеЗначение"]                      = ЗначениеЗаполнено(Элемент.ИсточникПлановогоЗначения);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Создадим и инициализируем процессор компоновки
	// Обычный аналитический отчет.
	Если Объект.ВидПроизвольногоОтчета = 0 Тогда
		
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
		URLСхемы = ТиповыеОтчетыУХ.СформироватьСхемуКомпоновкиДанных(Объект, УникальныйИдентификатор);
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
		СхемаОтчета = СериализаторXDTO.ПрочитатьXDTO(СериализаторXDTO.ЗаписатьXDTO(ПолучитьИзВременногоХранилища(URLСхемы)));
		НастройкиИзОбъекта = Объект.НастройкиСхемыКомпоновкиДанныхПоУмолчанию.Получить();
		Если НастройкиИзОбъекта = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось получить настройки компоновки из объекта отчета %Объект%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Строка(Объект));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Возврат;
		Иначе
			// Выполняем далее.
		КонецЕсли;
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиИзОбъекта);
		
		//КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновщика);
		СкопироватьНастройкиКомпоновщика(КомпоновщикНастроек.Настройки, НастройкиКомпоновщика);
		
		ТиповыеОтчеты_УправляемыйРежимУХ.ДоработатьТиповойОтчетПередВыводом(Объект, КомпоновщикНастроек);
		АналитическиеОтчетыУХ.ДоработатьАналитическийОтчетПередВыводом(Объект, КомпоновщикНастроек, СхемаОтчета);
		
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		
		РабочийКомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		РабочийКомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
		РабочийКомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		
		// Установим отбор по периоду отчета.
		Если ТипЗнч(НастройкиПериода) = Тип("Структура") И НЕ НастройкиПериода.ПериодОтчета.Пустая() Тогда
			
			НайденноеПоле = РабочийКомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("ПериодОтчета"));
			Если НайденноеПоле <> Неопределено Тогда
				
				ТиповыеОтчетыУХ.ДобавитьОтбор(РабочийКомпоновщикНастроек, НайденноеПоле.Поле, НастройкиПериода.ПериодОтчета);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбщийОтбор <> Неопределено Тогда
			
			// Для обычного аналитического отчета перенесем общие отборы в настройки СКД.
			Если Объект.ВидПроизвольногоОтчета = 0 Тогда
				Для Каждого ЭлементОтбора Из ОбщийОтбор.Отбор.Элементы Цикл
					Если ЭлементОтбора.Использование Тогда
						НайденноеПоле = РабочийКомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ЭлементОтбора.ЛевоеЗначение));
						НайденноеПолеВыбора = РабочийКомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ЭлементОтбора.ЛевоеЗначение));
						ЯвляетсяРесурсом = НайденноеПолеВыбора <> Неопределено И НайденноеПолеВыбора.Ресурс;
						Если НайденноеПоле <> Неопределено И НЕ ЯвляетсяРесурсом Тогда // Не накладываем отборы на ресурсы.
							ТекЭлементОтбора = РабочийКомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
							ТекЭлементОтбора.ЛевоеЗначение  = НайденноеПоле.Поле;
							ТекЭлементОтбора.ВидСравнения   = ЭлементОтбора.ВидСравнения;
							ТекЭлементОтбора.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
							ТекЭлементОтбора.Использование  = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Для Каждого ЭлементПараметр Из ОбщийОтбор.ПараметрыДанных.Элементы Цикл
				
				Если ЭлементПараметр.Использование И РабочийКомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(ЭлементПараметр.Параметр) <> Неопределено Тогда
					РабочийКомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(ЭлементПараметр.Параметр, ЭлементПараметр.Значение);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		// Если источник - операнд внешней информационной базы
		ВнешниеНаборыДанных = Новый Структура;
		
		Если ТипЗнч(Объект.ИсточникДанныхОтчета) = Тип("СправочникСсылка.ИсточникиДанныхДляРасчетов") Тогда
			
			Контекст = Новый Структура;
			
			Для Каждого Параметр Из РабочийКомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
				Контекст.Вставить(Строка(Параметр.Параметр), Параметр.Значение);
			КонецЦикла;
			Контекст.Вставить("ИспользуемаяИБ", Объект.ИспользуемаяИБ);
			Контекст.Вставить("ЧтениеНеАктуальныхЗаписей", Истина);
			Контекст.Вставить("АнализЧувствительности", Ложь);
			
			ТаблицаЗначений = УправлениеОтчетамиУХ.ПолучитьТаблицуДанныхПоИсточнику(Контекст, Объект.ИсточникДанныхОтчета, Ложь);
			
			Если Объект.ИсточникДанныхОтчета.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
				
				УправлениеОтчетамиУХ.ПреобразоватьТаблицуПоказателя(ТаблицаЗначений, Объект.ИсточникДанныхОтчета);
				
			КонецЕсли;
			
			Если ТипЗнч(ТаблицаЗначений) = тип("Структура") Тогда
				ВнешниеНаборыДанных.Вставить("ИсточникДанныхДляРасчетов", ТаблицаЗначений.ТаблицаДанных);
			Иначе
				ВнешниеНаборыДанных.Вставить("ИсточникДанныхДляРасчетов", ТаблицаЗначений);
			КонецЕсли;
		КонецЕсли;
		
		МакетКомпоновки = АналитическиеОтчетыУХ.ПолучитьМакетКомпоновки(ЗначенияНастроекПанелиПользователя, СхемаОтчета, РабочийКомпоновщикНастроек, ДанныеРасшифровки, ВнешниеНаборыДанных, Истина);
		ТиповыеОтчетыУХ.ДополнитьМакетыМакетаКомпоновкиРасшифровкойРесурсов(МакетКомпоновки, РабочийКомпоновщикНастроек);
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
		
		// Аналитический отчет - панель индикаторов.
	Иначе
		
		Результат = ТЗОтвета.Скопировать();
		Возврат;
		
	КонецЕсли;
	
	Если ПараметрыОтчета <> Неопределено И ПараметрыОтчета.Свойство("ИспользоватьОграничениеВывода") И ПараметрыОтчета.ИспользоватьОграничениеВывода Тогда
		
		КоличествоЗаписей = 0;
		ОтносительноеКоличествоЗаписей = Ложь;
		
		ПараметрыОтчета.Свойство("КоличествоЗаписей", КоличествоЗаписей);
		ПараметрыОтчета.Свойство("ОтносительноеКоличествоЗаписей", ОтносительноеКоличествоЗаписей);
		
		Для Каждого ЭлементТела Из МакетКомпоновки.Тело Цикл
			Если ТипЗнч(ЭлементТела) = Тип("ЗаписиМакетаКомпоновкиДанных") Тогда
				Если ОтносительноеКоличествоЗаписей Тогда
					ЭлементТела.КоличествоЗаписей = КоличествоЗаписей;
				Иначе
					ЭлементТела.ПроцентЗаписей    = КоличествоЗаписей;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	//Очистим табличный документ - результат
	Результат.Очистить();
	
	//Создадим и инициализируем процессор вывода результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	//Обозначим начало вывода
	ПроцессорВывода.НачатьВывод();
	
	//Основной цикл вывода отчета
	Пока Истина Цикл
		
		//Получим следующий элемент результата компоновки
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();
		
		Если ЭлементРезультата = Неопределено Тогда
			//Следующий элемент не получен - заканчиваем цикл вывода
			Прервать;
			
		Иначе
			//Элемент получен - выведем его при помощи процессора вывода
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Обозначем завершение вывода
	ПроцессорВывода.ЗакончитьВывод();
	
	Если Результат.Рисунки.Количество() > 0 Тогда
		Рисунок = Результат.Рисунки[0];
		
		Если ТипЗнч(Рисунок.Объект) = Тип("Диаграмма") Тогда
			Параметр = Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТипДиаграммы.РасположениеЛегенды"));
			Если Параметр.Использование И Параметр.Значение = РасположениеЛегендыДиаграммыКомпоновкиДанных.Нет Тогда
				
				Рисунок.Объект.ОтображатьЛегенду = Ложь;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ТиповыеОтчетыУХ.ОтобразитьТрендГрафически(Результат);
	НастройкиКомпоновщика = РабочийКомпоновщикНастроек.ПолучитьНастройки();
	
	ТЗОтвета = Неопределено;
	
КонецПроцедуры

// Копирует значения параметров вывода СКД из настроек НастройкиИсточник 
// в настройки НастройкиПриемник.
Процедура СкопироватьПараметрыВывода(НастройкиПриемник, НастройкиИсточник)
	Для Каждого ТекПараметрыИсточник Из НастройкиИсточник.ПараметрыВывода.Элементы Цикл
		ПараметрИсточника = ТекПараметрыИсточник.Параметр;
		Для Каждого ТекПараметрыПриемник Из НастройкиПриемник.ПараметрыВывода.Элементы Цикл
			ПараметрПриемника = ТекПараметрыПриемник.Параметр;
			Если ПараметрИсточника = ПараметрПриемника Тогда
				ТекПараметрыПриемник.Значение 		= ТекПараметрыИсточник.Значение;
				ТекПараметрыПриемник.Использование 	= ТекПараметрыИсточник.Использование;
				Прервать;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура СкопироватьНастройкиКомпоновщика(НастройкиПриемник, НастройкиИсточник) Экспорт
	
	ТиповыеОтчетыУХ.СкопироватьЭлементы(НастройкиПриемник.Отбор, 			НастройкиИсточник.Отбор);
	ТиповыеОтчетыУХ.СкопироватьЭлементы(НастройкиПриемник.Порядок, 			НастройкиИсточник.Порядок);
	СкопироватьПараметрыВывода(НастройкиПриемник, НастройкиИсточник);
	ТиповыеОтчетыУХ.ПеренестиНастройкиПараметровОтчета(НастройкиПриемник.ПараметрыДанных, НастройкиИсточник.ПараметрыДанных);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуСвязейИЭлементов(ТаблицаСвязей, ТаблицаЭлементов, ТаблицаПоказателей, КоличествоИтераций = 3, ОтборОрганизация)
	
	ТаблицаСвязей.Колонки.Добавить("ЭлементНачало");
	ТаблицаСвязей.Колонки.Добавить("ЭлементКонец");
	ТаблицаСвязей.Колонки.Добавить("Вес");
	ТаблицаЭлементов.Колонки.Добавить("Элемент", Новый ОписаниеТипов("СправочникСсылка.Цели, СправочникСсылка.ПоказателиМонитораКлючевыхПоказателей"));
	ТаблицаЭлементов.Колонки.Добавить("ЭлементВерхнегоУровня", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	МассивПоказателей = ТаблицаПоказателей.ВыгрузитьКолонку("Показатель");
	
	Для Каждого Элемент Из МассивПоказателей Цикл
		
		ТаблицаЭлементов.ДОбавить().Элемент = Элемент;
		
	КонецЦикла;
	
	ТекущаяИтерация   = 0;
	Пока МассивПоказателей.Количество() > 0 И КоличествоИтераций > ТекущаяИтерация Цикл
		
		Вн_МассивПоказателей = ВернутьСписокЭлементовВерхнегоУровня(ТаблицаСвязей, ТаблицаЭлементов, МассивПоказателей, КоличествоИтераций);
		ТекущаяИтерация = ТекущаяИтерация + 1;
		МассивПоказателей = Вн_МассивПоказателей;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТ.Элемент,
	|	ВТ.ЭлементВерхнегоУровня
	|ПОМЕСТИТЬ ТаблицаЭлементов
	|ИЗ
	|	&ВнешнийИсточник КАК ВТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЭлементов.Элемент,
	|	ТаблицаЭлементов.ЭлементВерхнегоУровня,
	|	ВЫБОР
	|		КОГДА Цели.Ответственный ССЫЛКА Справочник.Пользователи
	|			ТОГДА Цели.Ответственный
	|		ИНАЧЕ ОтветственныеОрганизаций.Пользователь
	|	КОНЕЦ КАК Ответственный,
	|	Цели.Проекция КАК Проекция
	|ИЗ
	|	ТаблицаЭлементов КАК ТаблицаЭлементов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Цели КАК Цели
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций
	|			ПО Цели.Ответственный = ОтветственныеОрганизаций.Роль
	|				И (ОтветственныеОрганизаций.Организация = &ОтборОрганизация)
	|		ПО ТаблицаЭлементов.Элемент = Цели.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаЭлементов.Элемент,
	|	ТаблицаЭлементов.ЭлементВерхнегоУровня,
	|	ВЫБОР
	|		КОГДА ПоказателиМонитораКлючевыхПоказателей.Ответственный ССЫЛКА Справочник.Пользователи
	|			ТОГДА ПоказателиМонитораКлючевыхПоказателей.Ответственный
	|		ИНАЧЕ ОтветственныеОрганизаций.Пользователь
	|	КОНЕЦ,
	|	ПоказателиМонитораКлючевыхПоказателей.Проекция
	|ИЗ
	|	ТаблицаЭлементов КАК ТаблицаЭлементов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиМонитораКлючевыхПоказателей КАК ПоказателиМонитораКлючевыхПоказателей
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций
	|			ПО (ОтветственныеОрганизаций.Роль = ПоказателиМонитораКлючевыхПоказателей.Ответственный)
	|				И (ОтветственныеОрганизаций.Организация = &ОтборОрганизация)
	|		ПО ТаблицаЭлементов.Элемент = ПоказателиМонитораКлючевыхПоказателей.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаЭлементов";
	
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаЭлементов);
	Запрос.УстановитьПараметр("ОтборОрганизация", ОтборОрганизация);
	
	ТаблицаЭлементов = Запрос.Выполнить().Выгрузить();
	// Добавим дополнительные данные к показателям.
	ТаблицаЭлементов.Колонки.Добавить("ПроцентВыполненияПлана");
	ТаблицаЭлементов.ЗаполнитьЗначения(0, "ПроцентВыполненияПлана");
	ТаблицаЭлементов.Колонки.Добавить("ОтклонениеОтПланаОтносительное");
	ТаблицаЭлементов.ЗаполнитьЗначения(0, "ОтклонениеОтПланаОтносительное");
	Для Каждого ТекТаблицаЭлементов Из ТаблицаЭлементов Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Показатель", ТекТаблицаЭлементов.Элемент);
		НайденныеСтроки = ТаблицаПоказателей.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
			ТекТаблицаЭлементов.ПроцентВыполненияПлана = ТекНайденныеСтроки.ПроцентВыполненияПлана;
			ТекТаблицаЭлементов.ОтклонениеОтПланаОтносительное = ТекНайденныеСтроки.ОтклонениеОтПланаОтносительное;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ЗаполнитьПодчиненныеСтрокиДерева(ТаблицаСвязей, ТекущаяСтрока, ТаблицаПоказателей, ТаблицаЭлементов, ИмяОкна, НастройкиМонитораЭффективности)
	
	СтруктураСостояний = Новый Структура("Красный, Желтый, Зеленый", 0, 0, 0);
	НайденныеСвязи = ТаблицаСвязей.НайтиСтроки(Новый Структура("ЭлементНачало", ТекущаяСтрока[ИмяОкна + "Показатель"]));
	Для Каждого Элемент Из НайденныеСвязи Цикл
		
		Если ТипЗнч(Элемент.ЭлементКонец) = Тип("СправочникСсылка.ПоказателиМонитораКлючевыхПоказателей") Тогда
			НайденнаяСтрока = ТаблицаПоказателей.Найти(Элемент.ЭлементКонец, "Показатель");
			Состояние   = 0;
			НоваяСтрока = ПеренестиДанныеИзТаблицыПоказателейВДерево(ТекущаяСтрока.Строки, НайденнаяСтрока, ИмяОкна, НастройкиМонитораЭффективности, Состояние);
			НайденнаяСтрока.Обработано = Истина;

		Иначе
			
			НоваяСтрока = ТекущаяСтрока.Строки.Добавить();
			НоваяСтрока[ИмяОкна + "Показатель"] = Элемент.ЭлементКонец;
			НоваяСтрока[ИмяОкна + "СлужебнаяСтрока"] = 1;
			СтрокаЭлемент = ТаблицаЭлементов.Найти(Элемент.ЭлементКонец, "Элемент");
			Если СтрокаЭлемент <> неопределено Тогда
				НоваяСтрока[ИмяОкна + "Ответственный"] = СтрокаЭлемент.Ответственный;
			КонецЕсли;
			
			Состояние = ЗаполнитьПодчиненныеСтрокиДерева(ТаблицаСвязей, НоваяСтрока, ТаблицаПоказателей, ТаблицаЭлементов, ИмяОкна, НастройкиМонитораЭффективности);
			НоваяСтрока[ИмяОкна + "Состояние"] = ТиповыеОтчетыУХ.ВернутьКодПредставленияТренда(Состояние);
			
		КонецЕсли;
		
		Если Состояние = 0 Тогда
			СтруктураСостояний.Зеленый = СтруктураСостояний.Зеленый + Элемент.Вес;
		ИначеЕсли Состояние = 1 Тогда
			СтруктураСостояний.Желтый  = СтруктураСостояний.Желтый + Элемент.Вес;
		ИначеЕсли Состояние = 2 Тогда
			СтруктураСостояний.Красный = СтруктураСостояний.Красный + Элемент.Вес;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураСостояний.Зеленый > СтруктураСостояний.Красный Тогда
		ДобавленноеЧислоЖелтых = СтруктураСостояний.Красный;
		СтруктураСостояний.Зеленый = СтруктураСостояний.Зеленый - ДобавленноеЧислоЖелтых;
		СтруктураСостояний.Красный = 0;
		СтруктураСостояний.Желтый  = СтруктураСостояний.Желтый + ДобавленноеЧислоЖелтых;
	ИначеЕсли СтруктураСостояний.Зеленый < СтруктураСостояний.Красный Тогда
		ДобавленноеЧислоЖелтых = СтруктураСостояний.Зеленый;
		СтруктураСостояний.Красный = СтруктураСостояний.Красный - ДобавленноеЧислоЖелтых;
		СтруктураСостояний.Зеленый = 0;
		СтруктураСостояний.Желтый  = СтруктураСостояний.Желтый + ДобавленноеЧислоЖелтых;
	КонецЕсли;
	
	Если СтруктураСостояний.Зеленый > СтруктураСостояний.Желтый И СтруктураСостояний.Зеленый > СтруктураСостояний.Красный Тогда
		Возврат 0;
	ИначеЕсли СтруктураСостояний.Красный > СтруктураСостояний.Желтый И СтруктураСостояний.Красный > СтруктураСостояний.Зеленый Тогда
		Возврат 2;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции

Функция СостояниеИТрендУдовлетворяетУсловиям(ЗначениеТренда, НастройкиМонитораЭффективности)
	
	Если ЗначениеТренда = Неопределено ИЛИ ЗначениеТренда = NULL Тогда
		Возврат Истина;
	ИначеЕсли ЗначениеТренда > 2 
	   И НЕ (НастройкиМонитораЭффективности.ОтборТрендПоложительный
			ИЛИ НастройкиМонитораЭффективности.ОтборТрендНулевой
			ИЛИ НастройкиМонитораЭффективности.ОтборТрендОтрицательный) Тогда
		Возврат Истина;
	ИначеЕсли  ЗначениеТренда <3 
		И НЕ(НастройкиМонитораЭффективности.ОтборСостояниеХорошее
			ИЛИ НастройкиМонитораЭффективности.ОтборСостояниеУдовлетворительное
			ИЛИ НастройкиМонитораЭффективности.ОтборСостояниеТревожное) Тогда
		Возврат Истина; // Если ни один отбор не наложен, то считаем, что отбор не используется.
	Иначе
	
		Возврат (ЗначениеТренда = 3 И НастройкиМонитораЭффективности.ОтборТрендПоложительный)
			ИЛИ (ЗначениеТренда = 4 И НастройкиМонитораЭффективности.ОтборТрендНулевой)
			ИЛИ (ЗначениеТренда = 5 И НастройкиМонитораЭффективности.ОтборТрендОтрицательный)
			ИЛИ (ЗначениеТренда = 0 И НастройкиМонитораЭффективности.ОтборСостояниеХорошее)
			ИЛИ (ЗначениеТренда = 1 И НастройкиМонитораЭффективности.ОтборСостояниеУдовлетворительное)
			ИЛИ (ЗначениеТренда = 2 И НастройкиМонитораЭффективности.ОтборСостояниеТревожное);
			
		КонецЕсли;
		
КонецФункции


Функция ПеренестиДанныеИзТаблицыПоказателейВДерево(Строки, СтрокаТаблицы, ИмяОтчета, НастройкиМонитораЭффективности, ЧисловоеПредставлениеСостояния)
	
	СтрокаПоказателя = Неопределено;
	
	Если СостояниеИТрендУдовлетворяетУсловиям(СтрокаТаблицы.Тренд, НастройкиМонитораЭффективности)
	   И СостояниеИТрендУдовлетворяетУсловиям(СтрокаТаблицы.Состояние, НастройкиМонитораЭффективности) Тогда
		
		СтрокаПоказателя = Строки.Добавить();
		СтрокаПоказателя[ИмяОтчета + "Показатель"]                            = СтрокаТаблицы.Показатель;
		СтрокаПоказателя[ИмяОтчета + "ИспользуемаяИБ"]                        = СтрокаТаблицы.ВнешняяИБ;
		СтрокаПоказателя[ИмяОтчета + "Ответственный"]                         = СтрокаТаблицы.Ответственный;
		СтрокаПоказателя[ИмяОтчета + "Тренд"]                                 = ТиповыеОтчетыУХ.ВернутьКодПредставленияТренда(СтрокаТаблицы.Тренд);
		СтрокаПоказателя[ИмяОтчета + "Состояние"]                             = ТиповыеОтчетыУХ.ВернутьКодПредставленияТренда(СтрокаТаблицы.Состояние);
		СтрокаПоказателя[ИмяОтчета + "ФактическоеЗначениеТекущегоПериода"]    = СтрокаТаблицы.ФактическоеЗначениеТекущегоПериода;
		СтрокаПоказателя[ИмяОтчета + "ФактическоеЗначениеПредыдущегоПериода"] = СтрокаТаблицы.ФактическоеЗначениеПредыдущегоПериода;
		СтрокаПоказателя[ИмяОтчета + "ПлановоеЗначение"]                      = СтрокаТаблицы.ПлановоеЗначение;
		СтрокаПоказателя[ИмяОтчета + "ИзменениеАбсолютное"]                   = СтрокаТаблицы.ИзменениеАбсолютное;
		СтрокаПоказателя[ИмяОтчета + "ИзменениеОтносительное"]                = СтрокаТаблицы.ИзменениеОтносительное;
		СтрокаПоказателя[ИмяОтчета + "ОтклонениеОтПланаОтносительное"]        = СтрокаТаблицы.ОтклонениеОтПланаОтносительное;
		СтрокаПоказателя[ИмяОтчета + "ОтклонениеОтПланаАбсолютное"]           = СтрокаТаблицы.ОтклонениеОтПланаАбсолютное;
		СтрокаПоказателя[ИмяОтчета + "ПроцентВыполненияПлана"]                = СтрокаТаблицы.ПроцентВыполненияПлана;
		
		
		СтрокаПоказателя[ИмяОтчета + "ИспользуетсяФактическоеЗначениеТекущегоПериода"]    = СтрокаТаблицы.ИспользуетсяФактическоеЗначениеТекущегоПериода;
		СтрокаПоказателя[ИмяОтчета + "ИспользуетсяФактическоеЗначениеПредыдущегоПериода"] = СтрокаТаблицы.ИспользуетсяФактическоеЗначениеПредыдущегоПериода;
		СтрокаПоказателя[ИмяОтчета + "ИспользуетсяПлановоеЗначение"]                      = СтрокаТаблицы.ИспользуетсяПлановоеЗначение;
		
		
		ЧисловоеПредставлениеСостояния = СтрокаТаблицы.Состояние;
		
	КонецЕсли;
	
	Возврат СтрокаПоказателя;
	
КонецФункции

Функция ВернутьСписокЭлементовВерхнегоУровня(ТаблицаСвязей, ТаблицаЭлементов, Знач МассивЭлементов, КоличествоИтераций)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Цели.Ссылка КАК Цель,
	|	ЦелиКлючевыеПоказатели.Показатель КАК Элемент,
	|	ЦелиКлючевыеПоказатели.Вес
	|ИЗ
	|	Справочник.Цели.КлючевыеПоказатели КАК ЦелиКлючевыеПоказатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Цели КАК Цели
	|		ПО ЦелиКлючевыеПоказатели.Ссылка = Цели.Ссылка
	|ГДЕ
	|	ЦелиКлючевыеПоказатели.Показатель В(&МассивЭлементов)";
	Запрос.УстановитьПараметр("МассивЭлементов", МассивЭлементов);
	
	Вн_МассивЭлементов = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаписьВТаблицеЭлементов = ТаблицаЭлементов.Найти(Выборка.Цель, "Элемент");
		Если ЗаписьВТаблицеЭлементов = Неопределено Тогда
			НоваяСтрока = ТаблицаЭлементов.Добавить();
			НоваяСтрока.Элемент = Выборка.Цель;
			НоваяСтрока.ЭлементВерхнегоУровня = Истина;
			Вн_МассивЭлементов.Добавить(Выборка.Цель);
			
		КонецЕсли;
		
		ЗаписьВТаблицеЭлементов = ТаблицаЭлементов.Найти(Выборка.Элемент, "Элемент");
		Если ЗаписьВТаблицеЭлементов <> Неопределено Тогда
			ЗаписьВТаблицеЭлементов.ЭлементВерхнегоУровня = Ложь;
		КонецЕсли;
		
		НоваяСвязь = ТаблицаСвязей.Добавить();
		НоваяСвязь.ЭлементНачало = Выборка.Цель;
		НоваяСвязь.ЭлементКонец  = Выборка.Элемент;
		НоваяСвязь.Вес           = Выборка.Вес;
		
	КонецЦикла;
	
	Возврат Вн_МассивЭлементов;
	
КонецФункции

Функция ДополнитьДеревоЦелями(ТекущаяСтрока = Неопределено, СоответствиеПроекций = Неопределено, ТекущаяВыборка, ТаблицаПоказателей, НастройкиМонитораЭффективности, ИмяОтчета, ПолеОтбора="")
	
	Выборка = ТекущаяВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ОбщееСостояние = 0;
	Пока Выборка.Следующий() Цикл
		Состояние = 0;
		Если ТекущаяСтрока = Неопределено Тогда
			Если СоответствиеПроекций[Выборка[ПолеОтбора]] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = СоответствиеПроекций[Выборка[ПолеОтбора]].Строки.Добавить();
		Иначе
			НоваяСтрока = ТекущаяСтрока.Строки.Добавить();
		КонецЕсли;
		
		НоваяСтрока[ИмяОтчета + "Показатель"]      = Выборка.Цель;
		НоваяСтрока[ИмяОтчета + "СлужебнаяСтрока"] = Истина;
		НоваяСтрока[ИмяОтчета + "Ответственный"]   = Выборка.Ответственный;
		Состояние = Состояние + ДополнитьДеревоЦелями(НоваяСтрока, СоответствиеПроекций, Выборка, ТаблицаПоказателей, НастройкиМонитораЭффективности, ИмяОтчета, ПолеОтбора);
		
		НайденныеСтроки = ТаблицаПоказателей.НайтиСтроки(Новый Структура("Цель", Выборка.Цель));
		
		Для Каждого Элемент Из НайденныеСтроки Цикл
			
			СтрокаПоказателя = НоваяСтрока.Строки.Добавить();
			СтрокаПоказателя[ИмяОтчета + "Показатель"]                            = Элемент.Показатель;
			СтрокаПоказателя[ИмяОтчета + "ИспользуемаяИБ"]                        = Элемент.ВнешняяИБ;
			СтрокаПоказателя[ИмяОтчета + "Ответственный"]                         = Элемент.Ответственный;
			СтрокаПоказателя[ИмяОтчета + "Тренд"]                                 = ТиповыеОтчетыУХ.ВернутьКодПредставленияТренда(Элемент.Тренд);
			СтрокаПоказателя[ИмяОтчета + "Состояние"]                             = ТиповыеОтчетыУХ.ВернутьКодПредставленияТренда(Элемент.Состояние);
			СтрокаПоказателя[ИмяОтчета + "ФактическоеЗначениеТекущегоПериода"]    = Элемент.ФактическоеЗначениеТекущегоПериода;
			СтрокаПоказателя[ИмяОтчета + "ФактическоеЗначениеПредыдущегоПериода"] = Элемент.ФактическоеЗначениеПредыдущегоПериода;
			СтрокаПоказателя[ИмяОтчета + "ПлановоеЗначение"]                      = Элемент.ПлановоеЗначение;
			СтрокаПоказателя[ИмяОтчета + "ИзменениеАбсолютное"]                   = Элемент.ИзменениеАбсолютное;
			СтрокаПоказателя[ИмяОтчета + "ИзменениеОтносительное"]                = Элемент.ИзменениеОтносительное;
			СтрокаПоказателя[ИмяОтчета + "ОтклонениеОтПланаАбсолютное"]           = Элемент.ОтклонениеОтПланаАбсолютное;
			СтрокаПоказателя[ИмяОтчета + "ОтклонениеОтПланаОтносительное"]        = Элемент.ОтклонениеОтПланаОтносительное;
			СтрокаПоказателя[ИмяОтчета + "ПроцентВыполненияПлана"]                = Элемент.ПроцентВыполненияПлана;
			Состояние = Состояние + Элемент.Состояние;
			
			Элемент.Обработано = Истина;
		
		КонецЦикла;
		
		ЧислоСтрок = НоваяСтрока.Строки.Количество();
		Если ЧислоСтрок = 0 Тогда
			Состояние = 0;
		Иначе
			Состояние = Окр(Состояние / ЧислоСтрок);
		КонецЕсли;
		
		ОбщееСостояние = ОБщееСостояние + Состояние;
		НоваяСтрока[ИмяОтчета + "Состояние"] = ТиповыеОтчетыУХ.ВернутьКодПредставленияТренда(Состояние);
		
	КонецЦикла;
	
	ЧислоЗаписей = Выборка.Количество();
	Если ЧислоЗаписей = 0 Тогда
		Возврат 0;
	Иначе
		Возврат Окр(ОбщееСостояние / ЧислоЗаписей);
	КонецЕсли;
	
КонецФункции

Функция ВернутьСтруктуруПараметровДляМонитораЭффективности(ЗначенияНастроекПанелиПользователя)
	
	Структура = Новый Структура;
	
	Если ЗначенияНастроекПанелиПользователя.Свойство("НастройкаПериода") Тогда
		Структура.Вставить("ПериодОтчета", ЗначенияНастроекПанелиПользователя.НастройкаПериода.ПериодОтчета);
		Структура.Вставить("Периодичность", Структура.ПериодОтчета.Периодичность);
	Иначе
		Структура.Вставить("Период", Справочники.Периоды.ПустаяСсылка());
		Структура.Вставить("Периодичность", Перечисления.Периодичность.ПустаяСсылка());
	КонецЕсли;
	
	Если ЗначенияНастроекПанелиПользователя.Свойство("НастройкиМонитораЭффективности") Тогда
		Структура.Вставить("СмещениеПредыдущегоПериода", ЗначенияНастроекПанелиПользователя.НастройкиМонитораЭффективности.СмещениеПредыдущегоПериода);
		Структура.Вставить("СценарийПлан"              , ЗначенияНастроекПанелиПользователя.НастройкиМонитораЭффективности.СценарийПлан);
		Структура.Вставить("СценарийФакт"              , ЗначенияНастроекПанелиПользователя.НастройкиМонитораЭффективности.СценарийФакт);
		Структура.Вставить("ОтборОрганизация"          , ЗначенияНастроекПанелиПользователя.НастройкиМонитораЭффективности.ОтборОрганизация);
		Структура.Вставить("ОтборВалюта"               , ЗначенияНастроекПанелиПользователя.НастройкиМонитораЭффективности.ОтборВалюта);
	Иначе
		Структура.Вставить("СмещениеПредыдущегоПериода", 0);
		Структура.Вставить("СценарийПлан"              , Справочники.Сценарии.ПустаяСсылка());
		Структура.Вставить("СценарийФакт"              , Справочники.Сценарии.ПустаяСсылка());
	КонецЕсли;
	
	Структура.Вставить("ПорогЗначимостиТренда",    0);
	Структура.Вставить("Состояние_ЛевыйДиапазон",  0);
	Структура.Вставить("Состояние_ПравыйДиапазон", 0);
	
	Возврат Структура;
	
КонецФункции

Процедура Настроить(КомпоновщикНастроек, МассивПолейОтбора, ТолькоСуществующие = Ложь) Экспорт
	
	Для каждого ЭлементОтбора Из МассивПолейОтбора Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("Структура") Тогда
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					Тек_ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					Тек_ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					Тек_ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				ИначеЕсли ЭлементОтбора.Значение = NULL Тогда	
					Тек_ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;	
				Иначе
					Тек_ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			Если ТолькоСуществующие Тогда
				// Поиск существующих отборов.
				Отбор = КомпоновщикНастроек.Настройки.Отбор;
				ОтборНайден = Ложь;
				Для Каждого ТекЭлементы Из Отбор.Элементы Цикл
					Если ТипЗнч(ТекЭлементы) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
						Если ТекЭлементы.ЛевоеЗначение = ПолеОтбора Тогда
							ОтборНайден = Истина;
							Тек_ВидСравнения = ТекЭлементы.ВидСравнения;
						Иначе
							Продолжить;			// Выполняем поиск далее.
						КонецЕсли;
					Иначе
						// Не проверяем.
					КонецЕсли;
				КонецЦикла;
				// Если поиск успешен - изменим элемент отбора.
				Если ОтборНайден Тогда
					ТиповыеОтчетыУХ.ДобавитьОтбор(КомпоновщикНастроек, ЭлементОтбора.Поле, ЭлементОтбора.Значение, Тек_ВидСравнения);
				Иначе
					Продолжить;				// Отбор не найден. Не изменяем его.
				КонецЕсли;
				
			Иначе	
				ТиповыеОтчетыУХ.ДобавитьОтбор(КомпоновщикНастроек, ЭлементОтбора.Поле, ЭлементОтбора.Значение, Тек_ВидСравнения);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ТиповыеОтчетыУХ.УдалитьДублиОтбора(КомпоновщикНастроек);    
	// Установка параметров.
	Для каждого ЭлементОтбора Из МассивПолейОтбора Цикл
		Для Каждого ТекЭлементы Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ТекЭлементы) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				НовыйПараметр = Новый ПараметрКомпоновкиДанных(ЭлементОтбора.Поле);
				Если НовыйПараметр = ТекЭлементы.Параметр Тогда
					ТекЭлементы.Значение = ЭлементОтбора.Значение;		
				Иначе
					// Параметры не совпадают. Продолжам поиск.
				КонецЕсли;
			Иначе
				// Не параметр компоновки. Продолжаем.
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ОтрисоватьГрафическоеПредставлениеМонитора(Знач ДеревоОтображения, ГруппировкаМонитора, ИмяОкна ="") Экспорт
	
	ТаблДок = Новый ТабличныйДокумент;

	ДеревоОтображения.Колонки.Добавить("РезервируемыеСтроки");
	ДеревоОтображения.Колонки.Добавить("КоличествоИнициатив");
	НайденныеСтроки = ДеревоОтображения.Строки.НайтиСтроки(Новый Структура(ИмяОкна + "СлужебнаяСтрока", Истина));
	МассивСтрок     = Новый Массив;
	Для Каждого Элемент Из НайденныеСтроки Цикл
		МассивСтрок.Добавить(Элемент[ИмяОкна + "Показатель"]);
	КонецЦикла;
	
	ЦелиИИнициативы =  СформироватьСоответствиеКоличестваИнициативЦелям();
	ТаблДокЗаголовок = Новый ТабличныйДокумент;
	
	Если ГруппировкаМонитора = 0 Тогда
		Для Каждого Строка Из ДеревоОтображения.Строки Цикл
			КоличествоВыведенныхСтрок = 0;
			Для Каждого СтрокаЦели ИЗ Строка.Строки Цикл
				СтрокаЦели.РезервируемыеСтроки = ОпределениеРезервируемыхСтрок(СтрокаЦели, 1, ИмяОкна);
				КоличествоВыведенныхСтрок = КоличествоВыведенныхСтрок + СтрокаЦели.РезервируемыеСтроки;
			КонецЦикла;
			Строка.РезервируемыеСтроки = КоличествоВыведенныхСтрок;
		КонецЦикла;
		
		ВывестиЗаписиВДокумент(ТаблДок, 0, 0, ДеревоОтображения, , ИмяОкна, ЦелиИИнициативы);
		
	Иначе
		
		Для Каждого Строка Из ДеревоОтображения.Строки Цикл
			КоличествоВыведенныхСтрок = 0;
			Для Каждого СтрокаЦели ИЗ Строка.Строки Цикл
				СтрокаЦели.РезервируемыеСтроки = ОпределениеРезервируемыхСтрок(СтрокаЦели, 1, ИмяОкна);
				КоличествоВыведенныхСтрок = КоличествоВыведенныхСтрок + СтрокаЦели.РезервируемыеСтроки;
			КонецЦикла;
			Строка.РезервируемыеСтроки = КоличествоВыведенныхСтрок;
			
			ТД = Новый ТабличныйДокумент;
			Обл = ТД.Область(1, 1, 1, 10);
			Обл.Объединить();
			Если ГруппировкаМонитора = 1 Тогда
				Обл.Текст = Строка[ИмяОкна + "Ответственный"];
			Иначе
				Обл.Текст = Строка[ИмяОкна + "Показатель"];
			КонецЕсли;
			Обл.ЦветФона = Новый Цвет(150, 150, 150);
			ТаблДок.Вывести(ТД);
			
			ТД = Новый ТабличныйДокумент;
			ВывестиЗаписиВДокумент(ТД, 0, 0, Строка, , ИмяОкна, ЦелиИИнициативы);
			ТаблДок.Вывести(ТД);
		КонецЦикла;
		
	КонецЕсли;
	
	Результат = Новый ТабличныйДокумент;
	обл = Результат.Область(1, 1, 1, ТаблДок.ШиринаТаблицы);
	Обл.Текст = Нстр("ru = 'Стратегическая карта'");
	Обл.Шрифт = Новый Шрифт(Обл.Шрифт, , 12, Истина);
	Обл.Объединить();
	Обл.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	Обл.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
	Результат.Вывести(ТаблДок);
	
	Возврат Результат;
	
КонецФункции

Процедура ВывестиЗаписиВДокумент(Вн_ТаблДок, Знач Смещение, Знач Уровень, СтрокаВывода, КоординатыТочкиСоединенияРодителя = Неопределено, ИмяОкна, ЦелиИИнициативы)
	
	ШиринаСтроки = 40;
	ВысотаСтроки = 27;
	ИнтервалПоГоризонтали = 10;
	ИнтервалПоВертикали   = 5;
	
	ТаблицаВывода = Новый ТаблицаЗначений;
	ТаблицаВывода.Колонки.Добавить("РезервируемыеСтроки");
	ТаблицаВывода.Колонки.Добавить("СтрокаДерева");
	ТаблицаВывода.Колонки.Добавить("ЦветСостояния");
	ТаблицаВывода.Колонки.Добавить("Цель");
	Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная);
	
	Для Каждого Элемент Из СтрокаВывода.Строки Цикл
		НоваяСтрока = ТаблицаВывода.Добавить();
		НоваяСтрока.РезервируемыеСтроки = Элемент.РезервируемыеСтроки;
		НоваяСтрока.СтрокаДерева        = Элемент;
		НоваяСтрока.ЦветСостояния       = ТиповыеОтчетыУХ.ВернутьЦветТрендаПоПредставлению(Элемент[ИмяОкна + "Состояние"]);
		НоваяСтрока.Цель                = ТипЗнч(Элемент[ИмяОкна + "Показатель"]) = Тип("СправочникСсылка.Цели");
	КонецЦикла;
	
	ТаблицаВывода.Сортировать("РезервируемыеСтроки УБЫВ");
	
	
	Для Каждого Элемент Из ТаблицаВывода Цикл
		
		Если Уровень = 0 Тогда
			ТаблДок = Новый ТабличныйДокумент;
		Иначе
			ТаблДок = Вн_ТаблДок;
		КонецЕсли;

		Если Элемент.Цель И Элемент.РезервируемыеСтроки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоказателя = Элемент.СтрокаДерева[ИмяОкна + "Показатель"];
		Расшифровка   = Новый Структура("Показатель, ИспользуемаяИБ", ИмяПоказателя, Элемент.СтрокаДерева[ИмяОкна + "ИспользуемаяИБ"]);
		
		Лево = 1 + Смещение * (ШиринаСтроки + ИнтервалПоГоризонтали);
		Верх = 1 + Уровень * (ВысотаСтроки + ИнтервалПоВертикали);
		
		Если Элемент.Цель Тогда
			НовыйРисунок = ТаблДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Эллипс);
		Иначе
			НовыйРисунок = ТаблДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямоугольник);
		КонецЕсли;
		
		Если Элемент.РезервируемыеСтроки = Неопределено Тогда // при отсутствии группировки поле "резервируемые строки" не заполняется.
			Элемент.РезервируемыеСтроки = 1;
		КонецЕсли;
		
		НовыйРисунок.Верх     = Верх;
		НовыйРисунок.Лево     = Лево;
		НовыйРисунок.Высота   = ВысотаСтроки;
		НовыйРисунок.Ширина   = (Элемент.РезервируемыеСтроки) * (ШиринаСтроки + ИнтервалПоГоризонтали) - ИнтервалПоГоризонтали;
		НовыйРисунок.ЦветФона = Элемент.ЦветСостояния;
		
		НовыйРисунок = ТаблДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
		НовыйРисунок.Верх   = Верх;
		НовыйРисунок.Лево   = Лево;
		НовыйРисунок.Ширина = (Элемент.РезервируемыеСтроки) * (ШиринаСтроки + ИнтервалПоГоризонтали) - ИнтервалПоГоризонтали;
		
		НовыйРисунок.Высота = ВысотаСтроки / 2;
		
		Если Элемент.Цель Тогда
			НовыйРисунок.Шрифт = Новый Шрифт(НовыйРисунок.Шрифт, , 10, Истина);
		Иначе
			НовыйРисунок.Шрифт = Новый Шрифт(НовыйРисунок.Шрифт, , , Истина);
			НовыйРисунок.Расшифровка = Расшифровка;
		КонецЕсли;
		
		НовыйРисунок.Текст  = ИмяПоказателя;
		НовыйРисунок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		НовыйРисунок.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
		НовыйРисунок.РазмещениеТекста        = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		НовыйРисунок.Узор                    = ТипУзораТабличногоДокумента.БезУзора;
		НовыйРисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
		
		Если Элемент.Цель Тогда
			РисунокИнициативы = ТаблДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
			РисунокИнициативы.Верх = НовыйРисунок.Верх + НовыйРисунок.Высота/2;
			РисунокИнициативы.Лево = НовыйРисунок.Лево;
			РисунокИнициативы.Ширина = НовыйРисунок.Ширина;
			РисунокИнициативы.Высота = НовыйРисунок.Высота /2;
			РисунокИнициативы.Расшифровка = Элемент.СтрокаДерева[ИмяОкна + "Показатель"];
			РисунокИнициативы.Текст       = Нстр("ru = 'Инициативы'") + 
			?(ЦелиИИнициативы[Элемент.СтрокаДерева[ИмяОкна + "Показатель"]] = Неопределено, "(0)" , "(" + ЦелиИИнициативы[Элемент.СтрокаДерева[ИмяОкна + "Показатель"]] + ")");
	       	#Если ВебКлиент Тогда
				ЦветHotLight = WebЦвета.Ультрамарин;
			#Иначе	
				ЦветHotLight = windowsЦвета.Кнопка;
			#КонецЕсли
			РисунокИнициативы.ЦветТекста   = ЦветHotLight;
			РисунокИнициативы.Шрифт  = Новый Шрифт(РисунокИнициативы.Шрифт, , , , , Истина);
			РисунокИнициативы.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
			РисунокИнициативы.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
			РисунокИнициативы.РазмещениеТекста        = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			РисунокИнициативы.Узор                    = ТипУзораТабличногоДокумента.БезУзора;
			РисунокИнициативы.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
		КонецЕсли;
		
		РисунокОтветственный = ТаблДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
		
		Если Элемент.Цель Тогда
			РисунокОтветственный.Верх = РисунокИнициативы.Верх + РисунокИнициативы.Высота;
		Иначе
			РисунокОтветственный.Верх = НовыйРисунок.Верх + НовыйРисунок.Высота;
		КонецЕсли;
		
		РисунокОтветственный.Лево = НовыйРисунок.Лево;
		РисунокОтветственный.Ширина = НовыйРисунок.Ширина;
		РисунокОтветственный.Высота = НовыйРисунок.Высота/2;
		Ответственный = Элемент.СтрокаДерева[ИмяОкна + "Ответственный"];
		
		РисунокОтветственный.Текст  = ?(ЗначениеЗаполнено(Ответственный), Ответственный, Нстр("ru = 'Ответственный не определен'"));
		РисунокОтветственный.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		РисунокОтветственный.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
		РисунокОтветственный.РазмещениеТекста        = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		РисунокОтветственный.Узор                    = ТипУзораТабличногоДокумента.БезУзора;
		РисунокОтветственный.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
		
		Если НЕ Элемент.Цель Тогда
			
			РисунокОтклонение = ТаблДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
			РисунокОтклонение.Верх   = РисунокОтветственный.Верх + РисунокОтветственный.Высота;
			РисунокОтклонение.Лево   = НовыйРисунок.Лево;
			РисунокОтклонение.Ширина = НовыйРисунок.Ширина;
			РисунокОтклонение.Высота = НовыйРисунок.Высота/2;
			
			РисунокОтклонение.Текст = "";
			
			СтрокаШаблона = Нстр("ru = 'Выполнено на: %ПроцентВыполненияПлана%%'");
			Если Не ПустаяСтрока(СтрокаШаблона) тогда				
				РисунокОтклонение.Текст = СтрЗаменить(СтрокаШаблона, "%ПроцентВыполненияПлана%", Формат(Элемент.СтрокаДерева[ИмяОкна + "ПроцентВыполненияПлана"], "ЧЦ=8; ЧДЦ=2; ЧН="));
			КонецЕсли;
			
			РисунокОтклонение.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
			РисунокОтклонение.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
			РисунокОтклонение.Узор                    = ТипУзораТабличногоДокумента.БезУзора;
			РисунокОтклонение.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
			
			РисунокОтклонение.Расшифровка    = Расшифровка;
			РисунокОтветственный.Расшифровка = Расшифровка;
			
		КонецЕсли;
		
		Если КоординатыТочкиСоединенияРодителя <> Неопределено Тогда
			
			СоединительнаяЛиния = ТаблДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямая);
			СоединительнаяЛиния.Лево   = КоординатыТочкиСоединенияРодителя.X;
			СоединительнаяЛиния.Верх   = КоординатыТочкиСоединенияРодителя.Y;
			СоединительнаяЛиния.Ширина = НовыйРисунок.Лево + Окр(НовыйРисунок.Ширина/2, 1, РежимОкругления.Окр15как10) - КоординатыТочкиСоединенияРодителя.X;
			СоединительнаяЛиния.Высота = НовыйРисунок.Верх - КоординатыТочкиСоединенияРодителя.Y;
			
		КонецЕсли;
		
		ВывестиЗаписиВДокумент(ТаблДок, Смещение, Уровень + 1, Элемент.СтрокаДерева, Новый Структура("X,Y",НовыйРисунок.Лево + Окр(НовыйРисунок.Ширина /2, 1, РежимОкругления.Окр15как10), НовыйРисунок.Верх + ВысотаСтроки), ИмяОкна, ЦелиИИнициативы);
		Смещение = Смещение + Элемент.РезервируемыеСтроки;
		
		Если Уровень = 0 Тогда
			Вн_ТаблДок.Вывести(ТаблДок);
			Смещение = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределениеРезервируемыхСтрок(ТекущаяСтрока, Уровень, ИмяОкна)
	
	Если ТекущаяСтрока.Строки.Количество() = 0 Тогда
		Если ТекущаяСтрока[ИмяОкна + "СлужебнаяСтрока"] Тогда // Крайними узлами должны быть только показатели.
			Возврат 0;
		Иначе
			Возврат 1;
		КонецЕсли;
	Иначе
		РезервируемыеСтроки = 0;
		Для Каждого Строка Из ТекущаяСтрока.Строки Цикл
			Строка.РезервируемыеСтроки = ОпределениеРезервируемыхСтрок(Строка, Уровень + 1, ИмяОкна);
			РезервируемыеСтроки = РезервируемыеСтроки + Строка.РезервируемыеСтроки;
		КонецЦикла;
		
		Возврат РезервируемыеСтроки;
		
	КонецЕсли;
	
КонецФункции

Функция ОпределитьТекущуюНастройкуОтчета(АналитическийОтчет, Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТекущиеНастройкиАналитическихОтчетов.СохраненнаяНастройка
	|ИЗ
	|	РегистрСведений.ТекущиеНастройкиАналитическихОтчетов КАК ТекущиеНастройкиАналитическихОтчетов
	|ГДЕ
	|	ТекущиеНастройкиАналитическихОтчетов.АналитическийОтчет = &АналитическийОтчет
	|	И ТекущиеНастройкиАналитическихОтчетов.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("АналитическийОтчет", АналитическийОтчет);
	Запрос.УстановитьПараметр("Пользователь"      , Пользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СохраненнаяНастройка;
	Иначе
		Возврат Справочники.СохраненныеНастройки.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьСохраненнуюНастройку(АналитическийОтчет, Пользователь, СохраненнаяНастройка) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ТекущиеНастройкиАналитическихОтчетов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = Пользователь;
	МенеджерЗаписи.АналитическийОтчет = АналитическийОтчет;
	МенеджерЗаписи.СохраненнаяНастройка = СохраненнаяНастройка;
	Попытка
		МенеджерЗаписи.Записать(Истина);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ПометитьНаУдалениеСохраненныеНастройкиПоОтчету(АналитическийОтчет) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СохраненныеНастройки.Ссылка
	|ИЗ
	|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ПометкаУдаления = ЛОЖЬ
	|	И СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект";
	Запрос.УстановитьПараметр("НастраиваемыйОбъект", АналитическийОтчет);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			ТекОбъект.УстановитьПометкуУдаления(Истина);
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Формирует строку открытия формы с имененем ФормаРасшифровкиВход для расшировки 
// отчёте объектом метаданного с типом ТипОбъектаВход, наименованием НаименованиеОбъектаВход.
Функция СформироватьСтрокуОткрытияФормыРасшифровкиОбъектомИнформационнойБазы(ТипОбъектаВход, НаименованиеОбъектаВход, ФормаРасшифровкиВход) Экспорт
	РезультатФункции = "";
	Если ТипЗнч(ТипОбъектаВход) = Тип("Строка") Тогда
		РезультатФункции = РезультатФункции + ТипОбъектаВход;
	ИначеЕсли ТипЗнч(ТипОбъектаВход) = Тип("ПеречислениеСсылка.ТипыОбъектовИбДляРасшифровки") Тогда	
		РезультатФункции = РезультатФункции + ОбщегоНазначения.ИмяЗначенияПеречисления(ТипОбъектаВход);
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный тип объекта расшифровки: %ТипОбъекта%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТипОбъекта%", Строка(ТипОбъектаВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = РезультатФункции + Строка(ТипОбъектаВход);
	КонецЕсли;
	РезультатФункции = РезультатФункции + ".";
	РезультатФункции = РезультатФункции + НаименованиеОбъектаВход;
	РезультатФункции = РезультатФункции + ".";
	РезультатФункции = РезультатФункции + ФормаРасшифровкиВход;
	Возврат РезультатФункции;
КонецФункции

// Возвращает значение параметра из контекста КонтекстВход либо значение отборов расшифровки 
//ОтборРасшифровкиВход, заданного  выражением ВыражениеПолученияВход.
Функция ПолучитьЗначениеПараметраПоВыражению(ВыражениеПолученияВход, КонтекстВход, ОтборРасшифровкиВход = Неопределено)
	// Инициализация.
	РезультатФункции = Неопределено;
	СтруктураРасшифровки = Новый Структура;
	// Преобразуем входные отборы в структуры.
	Если ТипЗнч(ОтборРасшифровкиВход) = Тип("НастройкиКомпоновкиДанных") Тогда
		СтруктураРасшифровки = Новый Структура;
		Для Каждого ТекЭлементыРасшифровки Из ОтборРасшифровкиВход.Отбор.Элементы Цикл
			Если ТекЭлементыРасшифровки.Использование Тогда
				СтруктураРасшифровки.Вставить(Строка(ТекЭлементыРасшифровки.ЛевоеЗначение), ТекЭлементыРасшифровки.ПравоеЗначение);
			Иначе
				Продолжить;			// Выполняем поиск далее.
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ОтборРасшифровкиВход) = Тип("Структура") Тогда	
		СтруктураРасшифровки = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОтборРасшифровкиВход);
	Иначе
		СтруктураРасшифровки = Новый Структура;
	КонецЕсли;
	//Получим выходное значение в зависимости от способа задания данных.
	Если СтрНачинаетсяС(ВыражениеПолученияВход, "Контекст.") Тогда
		// Возьмём значение поля из структуры контекста.
		НовоеПолеСтруктуры = СтрЗаменить(ВыражениеПолученияВход, "Контекст.", "");
		РезультатФункции = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(КонтекстВход, НовоеПолеСтруктуры, Неопределено);
	ИначеЕсли СтрНачинаетсяС(ВыражениеПолученияВход, "Расшифровка.") Тогда
		// Возьмём значение поля из структуры расшифровки.
		НовоеПолеРасшифровки = СокрЛП(СтрЗаменить(ВыражениеПолученияВход, "Расшифровка.", ""));	
		РезультатФункции = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураРасшифровки, НовоеПолеРасшифровки, Неопределено);
	Иначе
		РезультатФункции = Неопределено;			// Не удалось распознать выражение.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Получает пользовательские настройки для отчета НаименованиеОбъектаМетаданныхВход. Когда настройки
// получить не удалось, возвращает Неопределено.
Функция ПолучитьПользовательскиеНастройки(ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход) Экспорт
	РезультатФункции = Неопределено;
	Если ТипОбъектаМетаданныхВход = Перечисления.ТипыОбъектовИбДляРасшифровки.Отчет Тогда
		ОсновнаяСхема = Метаданные.Отчеты[НаименованиеОбъектаМетаданныхВход].ОсновнаяСхемаКомпоновкиДанных;
		Если ОсновнаяСхема <> Неопределено Тогда
			СхемаИмя = ОсновнаяСхема.Имя;
			Схема = Отчеты[НаименованиеОбъектаМетаданныхВход].ПолучитьМакет(СхемаИмя);
			Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
			Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
			Компоновщик.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
			РезультатФункции = Компоновщик.ПользовательскиеНастройки;
		Иначе
			РезультатФункции = Неопределено;
		КонецЕсли;
	Иначе
		РезультатФункции = Неопределено;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Вставляет в структуру СтруктураРезультат пользовательские настройки, куда прописаны значения
// параметров отчета НаименованиеОбъектаМетаданныхВход. Когда ПользовательскиеНастройкиВход
// не определено, получает настройки по умолчанию.
Процедура ВставитьПользовательскиеПараметрыОтчетаВСтруктуру(ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход, СтруктураПараметровВход, СтруктураРезультат, ПользовательскиеНастройкиВход = Неопределено) Экспорт
	Если СтруктураРезультат.Свойство("ПользовательскиеНастройки") Тогда
		ПользовательскиеНастройкиРабочие = СтруктураРезультат.ПользовательскиеНастройки;
	Иначе		
		Если ПользовательскиеНастройкиВход = Неопределено Тогда
			ПользовательскиеНастройкиРабочие = ПолучитьПользовательскиеНастройки(ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход);
		Иначе
			ПользовательскиеНастройкиРабочие = ПользовательскиеНастройкиВход;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(ПользовательскиеНастройкиРабочие) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		ЭлементыНастроек = ПользовательскиеНастройкиРабочие.Элементы;
		Для Каждого ТекЭлементыНастроек Из ЭлементыНастроек Цикл
			Если ТипЗнч(ТекЭлементыНастроек) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				ТекИмяПараметра = Строка(ТекЭлементыНастроек.Параметр);
				ТекЗначение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровВход, ТекИмяПараметра, Неопределено);
				Если ТекЗначение <> Неопределено Тогда
					ТекЭлементыНастроек.Значение = ТекЗначение;
				Иначе
					Продолжить;				// Параметр не найден. Пропускаем.
				КонецЕсли;
			Иначе
				Продолжить;					// Не параметр отчета.
			КонецЕсли;
		КонецЦикла;
		СтруктураРезультат.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройкиРабочие);
	Иначе
		// Не добавляем настройки.
	КонецЕсли;
КонецПроцедуры

// Вставляет в структуру СтруктураРезультат дополнительные свойства, куда прописаны значения
// параметров отчета НаименованиеОбъектаМетаданныхВход. Когда ПользовательскиеНастройкиВход
// не определено, получает настройки по умолчанию.
Процедура ВставитьПользовательскиеДополнительныеСвойстваВСтруктуру(ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход, СтруктураДополнительныеСвойстваВход, СтруктураРезультат, ПользовательскиеНастройкиВход = Неопределено) Экспорт
	Если СтруктураРезультат.Свойство("ПользовательскиеНастройки") Тогда
		ПользовательскиеНастройкиРабочие = СтруктураРезультат.ПользовательскиеНастройки;
	Иначе	
		Если ПользовательскиеНастройкиВход = Неопределено Тогда
			ПользовательскиеНастройкиРабочие = ПолучитьПользовательскиеНастройки(ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход);
		Иначе
			ПользовательскиеНастройкиРабочие = ПользовательскиеНастройкиВход;
		КонецЕсли;
	КонецЕсли;
	Для Каждого ТекСтруктураДополнительныеСвойстваВход Из СтруктураДополнительныеСвойстваВход Цикл
		ПользовательскиеНастройкиРабочие.ДополнительныеСвойства.Вставить(ТекСтруктураДополнительныеСвойстваВход.Ключ, ТекСтруктураДополнительныеСвойстваВход.Значение);
	КонецЦикла;
	СтруктураРезультат.Вставить("РежимРасшифровки",          Истина);
	СтруктураРезультат.Вставить("ВидРасшифровки",            2); // Из параметров формы
	СтруктураРезультат.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройкиРабочие);
КонецПроцедуры

// Возвращает таблицу расшифровок объектом для владельца расшифровок ВладелецВход.
Функция ПолучитьТаблицуРасшифровокОбъектом(ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход, ФормаРасшифровкиВход, ВладелецВход) Экспорт
	РезультатФункции = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РасшифровкиАналитическихОтчетовПараметрыРасшифровкиОбъектом.ИмяПараметраРасшифровки,
	|	РасшифровкиАналитическихОтчетовПараметрыРасшифровкиОбъектом.ФиксированноеЗначение,
	|	РасшифровкиАналитическихОтчетовПараметрыРасшифровкиОбъектом.ВыражениеПолучения
	|ИЗ
	|	Справочник.РасшифровкиАналитическихОтчетов.РасшифровкиОбъектомИнформационнойБазы КАК РасшифровкиАналитическихОтчетовРасшифровкиОбъектомИнформационнойБазы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РасшифровкиАналитическихОтчетов.ПараметрыРасшифровкиОбъектом КАК РасшифровкиАналитическихОтчетовПараметрыРасшифровкиОбъектом
	|		ПО РасшифровкиАналитическихОтчетовРасшифровкиОбъектомИнформационнойБазы.ИдентификаторСтроки = РасшифровкиАналитическихОтчетовПараметрыРасшифровкиОбъектом.ИдентификаторСтроки
	|			И РасшифровкиАналитическихОтчетовРасшифровкиОбъектомИнформационнойБазы.ИдентификаторСтроки = РасшифровкиАналитическихОтчетовПараметрыРасшифровкиОбъектом.ИдентификаторСтроки
	|ГДЕ
	|	РасшифровкиАналитическихОтчетовРасшифровкиОбъектомИнформационнойБазы.ТипОбъектаМетаданных = &ТипОбъектаМетаданных
	|	И РасшифровкиАналитическихОтчетовРасшифровкиОбъектомИнформационнойБазы.НаименованиеОбъектаМетаданных = &НаименованиеОбъектаМетаданных
	|	И РасшифровкиАналитическихОтчетовРасшифровкиОбъектомИнформационнойБазы.ФормаРасшифровки = &ФормаРасшифровки
	|	И РасшифровкиАналитическихОтчетовРасшифровкиОбъектомИнформационнойБазы.Ссылка.Владелец = &Владелец";
	Запрос.УстановитьПараметр("ТипОбъектаМетаданных", ТипОбъектаМетаданныхВход);
	Запрос.УстановитьПараметр("НаименованиеОбъектаМетаданных", НаименованиеОбъектаМетаданныхВход);
	Запрос.УстановитьПараметр("ФормаРасшифровки", ФормаРасшифровкиВход);
	Запрос.УстановитьПараметр("Владелец", ВладелецВход);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
КонецФункции

// Возвращает структуру с данными для расшифровки объектом информационной базы.
Функция ПолучитьСтруктуруДанныхДляРасшифровкиОбъектом(ТаблицаРасшифровок, КонтекстВход, ОтборыРасшифровкиВход, ИспользоватьВыражениеПолучения = Истина) Экспорт
	РезультатФункции = Новый Структура;
	СтруктураОтбора					 = Новый Структура;				// Отбор в отчете.
	СтруктураПараметров				 = Новый Структура;				// Параметры СКД.
	СтруктураДополнительныхСвойств	 = Новый Структура;				// Реквизиты отчета.
	СтруктураФормы					 = Новый Структура;				// Параметры произвольной формы.
	Для Каждого ТекТаблицаРасшифровок Из ТаблицаРасшифровок Цикл
		НовоеИмяПараметра = СокрЛП(ТекТаблицаРасшифровок.ИмяПараметраРасшифровки);
		// Получим значение параметра.
		Если СокрЛП(ТекТаблицаРасшифровок.ВыражениеПолучения) <> "" Тогда
			// Есть выраженние получения. Получим новое значение из контекста.
			Если ИспользоватьВыражениеПолучения Тогда
				НовоеЗначениеПараметра = ПолучитьЗначениеПараметраПоВыражению(ТекТаблицаРасшифровок.ВыражениеПолучения, КонтекстВход, ОтборыРасшифровкиВход);
			Иначе
				Продолжить;		// Не требуется вычислять данный параметр.
			КонецЕсли;
		Иначе
			// Выражение не задано. Возьмём фиксированное значение.
			НовоеЗначениеПараметра = ТекТаблицаРасшифровок.ФиксированноеЗначение;
		КонецЕсли;
		// Вставим полученный параметр в нужную структуру.     
		Если СтрНачинаетсяС(НовоеИмяПараметра, "Отбор.") Тогда
			НовоеИмяОтбора = СтрЗаменить(НовоеИмяПараметра, "Отбор.", "");
			СтруктураОтбора.Вставить(НовоеИмяОтбора, НовоеЗначениеПараметра);
		ИначеЕсли СтрНачинаетсяС(НовоеИмяПараметра, "ПараметрыОтчета.") Тогда
			НовоеИмяПараметра = СтрЗаменить(НовоеИмяПараметра, "ПараметрыОтчета.", "");
			СтруктураПараметров.Вставить(НовоеИмяПараметра, НовоеЗначениеПараметра);
		ИначеЕсли СтрНачинаетсяС(НовоеИмяПараметра, "ДополнительныеСвойства.") Тогда
			НовоеИмяПараметра = СтрЗаменить(НовоеИмяПараметра, "ДополнительныеСвойства.", "");
			СтруктураДополнительныхСвойств.Вставить(НовоеИмяПараметра, НовоеЗначениеПараметра);			
		Иначе
			НовоеИмяПараметра = СтрЗаменить(НовоеИмяПараметра, ".", "");
			СтруктураФормы.Вставить(НовоеИмяПараметра, НовоеЗначениеПараметра);
		КонецЕсли;
	КонецЦикла;
	РезультатФункции.Вставить("СтруктураОтбора",				 СтруктураОтбора);
	РезультатФункции.Вставить("СтруктураПараметров",			 СтруктураПараметров);
	РезультатФункции.Вставить("СтруктураДополнительныхСвойств",	 СтруктураДополнительныхСвойств);
	РезультатФункции.Вставить("СтруктураФормы",					 СтруктураФормы);
	Возврат РезультатФункции;
КонецФункции

// Выполняет перенос данных из структуры расшифровки объектом СтруктураДанныхВход в структуру 
// СтруктураРезультатВход для объекта ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход 
//	по пользовательским настройкам ПользовательскиеНастройкиВход.
Функция ПеренестиСтруктуруДанныхРасшифровкиОбъектом(СтруктураДанныхВход, СтруктураРезультатВход, ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход, ПользовательскиеНастройкиВход) Экспорт
	РезультатФункции = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураРезультатВход);
	// Разделение структур.
	СтруктураОтбора					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "СтруктураОтбора", Новый Структура);
	СтруктураПараметров				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "СтруктураПараметров", Новый Структура);
	СтруктураДополнительныхСвойств	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "СтруктураДополнительныхСвойств", Новый Структура);
	СтруктураФормы					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "СтруктураФормы", Новый Структура);
	// Перенесём структуру формы в структуру результата напрямую.
	Для Каждого ТекСтруктураФормы Из СтруктураФормы Цикл
		РезультатФункции.Вставить(ТекСтруктураФормы.Ключ, ТекСтруктураФормы.Значение);
	КонецЦикла;
	// Добавляем структуру отбора отчета СКД.
	Если СтруктураОтбора.Количество() > 0 Тогда
		РезультатФункции.Вставить("Отбор", СтруктураОтбора);
	Иначе
		// Не передан отбор. Не добавляем.
	КонецЕсли;
	// Добавляем параметры компоновки отчета СКД.
	ВставитьПользовательскиеПараметрыОтчетаВСтруктуру(ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход, СтруктураПараметров, РезультатФункции, ПользовательскиеНастройкиВход);
	// Добавляем дополнительные свойства.
	ВставитьПользовательскиеДополнительныеСвойстваВСтруктуру(ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход, СтруктураДополнительныхСвойств, РезультатФункции, ПользовательскиеНастройкиВход);
	Возврат РезультатФункции;
КонецФункции

// Формирует структуру параметров для открытия формы с именем ФормаРасшифровкиВход 
// расшифровки объетом информационной базы с типом ТипОбъектаМетаданныхВход и 
// наименованием НаименованиеОбъектаМетаданныхВход для отчета АналитическийОтчетВход.
Функция ПолучитьСтруктуруПараметровРасшифровкиПоОбъекту(ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход, 
	ФормаРасшифровкиВход, АналитическийОтчетВход, КонтекстВход = Неопределено, ОтборыРасшифровкиВход = Неопределено, 
	ПоказательВход = Неопределено, ПользовательскиеНастройкиВход = Неопределено) Экспорт
	// Инициализация.
	РезультатФункции = Новый Структура;
	Если КонтекстВход <> Неопределено Тогда
		КонтекстРабочий = КонтекстВход;
	Иначе
		КонтекстРабочий = Новый Структура;
	КонецЕсли;
	ВладелецРасшифровок = Справочники.ПроизвольныеОтчеты.ПустаяСсылка();
	// Получение расшифровок из базы.
	Если ЗначениеЗаполнено(ПоказательВход) Тогда
		ВладелецРасшифровок = ПоказательВход;
	Иначе	
		ВладелецРасшифровок = АналитическийОтчетВход;
	КонецЕсли;
	ТаблицаРасшифровок = ПолучитьТаблицуРасшифровокОбъектом(ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход, ФормаРасшифровкиВход, ВладелецРасшифровок);
	// Обход полученных расшифровок.
	СтруктураДанных = ПолучитьСтруктуруДанныхДляРасшифровкиОбъектом(ТаблицаРасшифровок, КонтекстРабочий, ОтборыРасшифровкиВход);
	// Перенесём структуру данных в результирующую структуру.
	РезультатФункции = ПеренестиСтруктуруДанныхРасшифровкиОбъектом(СтруктураДанных, РезультатФункции, ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход, ПользовательскиеНастройкиВход);
	Возврат РезультатФункции;	
КонецФункции

#КонецЕсли