&НаКлиенте
Перем ВыполняетсяЗакрытие;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Перем ОбъектОснование;
	
	Параметры.Свойство("РедактированиеНастроек", РедактированиеНастроек);
	Параметры.Свойство("ЭтоРасшифровка", ЭтоРасшифровка);
	Параметры.Свойство("ЗначениеКопирования", ОбъектОснование);
	Параметры.Свойство("АдресХранилищаНастроек", АдресХранилищаНастроек);
	URLСхемы = ТиповыеОтчетыУХ.СформироватьСхемуКомпоновкиДанных(Объект, УникальныйИдентификатор);
	
	Попытка
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
	Исключение
		
		СообщениеПользователю = Новый СообщениеПользователю;
		
		СтрокаШаблона = Нстр("ru = 'При инициализации отчета возникла ошибка:
		|%1'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда			
			СообщениеПользователю.Текст = СтрШаблон(СтрокаШаблона, ОписаниеОшибки());
		КонецЕсли;
		
		СообщениеПользователю.Сообщить();
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		
	КонецПопытки;
	
	ЭтоМониторКлючевыхПоказателей = (Объект.ВидПроизвольногоОтчета = 1);
	Элементы.ДополнительныеНастройки.Доступность = НЕ ЭтоМониторКлючевыхПоказателей; // У МКП не может быть дополнительных отборов и параметров.
	Элементы.Период.Видимость = ЭтоМониторКлючевыхПоказателей;
	
	ОтборТрендНулевой                = Истина;
	ОтборТрендОтрицательный          = Истина;
	ОтборТрендПоложительный          = Истина;
	ОтборСостояниеТревожное          = Истина;
	ОтборСостояниеУдовлетворительное = Истина;
	ОтборСостояниеХорошее            = Истина;
	
	// Если редактируются настройки документа, то 
	Если НЕ РедактированиеНастроек Тогда
		ЗаполнитьСписокДоступныхНастроек();
	Иначе
		Элементы.СохраненнаяНастройка.Видимость = Ложь;
	КонецЕсли;
	
	ТекОБъект = РеквизитФормыВЗначение("Объект");
	
	ПараметрыПанелиПользователя = ТиповыеОтчетыУХ.ПолучитьПараметрыПанелиПользователяОбъекта(ТекОбъект);
	АдресПараметровПанелиФормы = ПоместитьВоВременноеХранилище(ПараметрыПанелиПользователя, УникальныйИдентификатор);
	
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	
	ФормироватьПриОткрытии = Параметры.ФормироватьПриОткрытии;
	
	Если ЭтоРасшифровка Тогда
		СкрытьЭлементыФормыПриРасшифровке();
	Иначе
		ОбработкаВидимостиПанелейОтчета(ПараметрыПанелиПользователя);
	КонецЕсли;
	
	ВосстановитьНастройки();
	ЗагрузитьДанныеПоУмолчаниюВКомпоновщикДанных();
	
	Если Параметры.Настройки <> Неопределено Тогда // Настройки получены извне. Данные из сохраненной настройки не подтягиваются.
		
		Справочники.ПроизвольныеОтчеты.СкопироватьНастройкиКомпоновщика(КомпоновщикНастроек.Настройки, Параметры.Настройки);
		
	Иначе
		
		СохраненнаяНастройка = Справочники.СохраненныеНастройки.ПустаяСсылка();
		
		Если Параметры.ИспользоватьПереданнуюНастройку Тогда
			СохраненнаяНастройка = Параметры.СохраненнаяНастройка;
		ИначеЕсли НЕ Параметры.Ключ.Пустая() Тогда
			СохраненнаяНастройка = Справочники.ПроизвольныеОтчеты.ОпределитьТекущуюНастройкуОтчета(Объект.Ссылка, ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
		КонецЕсли;
		
		ПрименитьСохраненныеНастройки();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.АдресДанныхРасшифровки) Тогда
		Вн_ДанныеРасшифровки = ПолучитьИзВременногоХранилища(Параметры.АдресДанныхРасшифровки);
		МассивПолейРасшифровки = ТиповыеОтчетыУХ.ПолучитьМассивПолейРасшифровки(Параметры.Расшифровка, Вн_ДанныеРасшифровки, КомпоновщикНастроек);
		Настроить(МассивПолейРасшифровки);
	КонецЕсли;
	// Расшифруем монитор ключевых показателей аналитическим отчетом.
	Если ЗначениеЗаполнено(Параметры.АдресМассивРасшифровок) Тогда
		Если ЭтоАдресВременногоХранилища(Параметры.АдресМассивРасшифровок) Тогда
			МассивРасшифровок = ПолучитьИзВременногоХранилища(Параметры.АдресМассивРасшифровок);
			МассивПолейРасшифровки = Новый Массив;
			Для Каждого ТекМассивРасшифровок Из МассивРасшифровок Цикл
				МассивПолейРасшифровки.Добавить(ТекМассивРасшифровок);
			КонецЦикла;
			Настроить(МассивПолейРасшифровки, Истина);
		Иначе
			
		КонецЕсли;
	Иначе
		// Не задан адрес расшифровки монитора ключевых показателей.
	КонецЕсли;
	
	Если Параметры.ЗначенияПараметров.Количество() <> 0 Тогда
		Для Каждого Элемент Из Параметры.ЗначенияПараметров Цикл
			
			Попытка
				КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Элемент.Представление, Элемент.Значение);
			Исключение
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли; 
	
	Если ФормироватьПриОткрытии Тогда
		ОбновитьОтчет(Истина);
	КонецЕсли;
	
	ЗначениеВДанныеФормы(ОбщегоНазначенияСерверУХ.ВернутьТаблицуДоступныхПериодов(), ТаблицаДоступныхПериодов);
	ИзменитьВидимостьОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОтображатьДополнительныеНастройки = Ложь;
	
	УстановитьВидимостьПанелиНастройки();
	
	ЗаполнитьСпискиВыбораАналитическихОтборов();
	
	НарисоватьСтраницуПериод();
	ОбновитьСоответствиеПолейПериода();
	
	// Монитор ключевых показателей выводится в таблицу.
	Если Объект.ВидПроизвольногоОтчета = 1 Тогда
		Элементы.ВыводРезультата.ТекущаяСтраница = ?(Объект.ОтображатьВВидеСхемы, Элементы.ВВидеТаблицыГрафически, Элементы.ВВидеТаблицы);
	Иначе
		Элементы.ВыводРезультата.ТекущаяСтраница = Элементы.ВВидеТабличногоДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ФиксированнаяСтруктура") И ВыбранноеЗначение.Свойство("НастройкиОтчета") Тогда
		ПеренестиНастройки(ВыбранноеЗначение.НастройкиОтчета);
		Объект.РасширеннаяНастройка = ВыбранноеЗначение.РасширеннаяНастройка;
		ИзменитьВидимостьОтборов();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыбранаСохраненнаяНастройка" Тогда
		
		Если Параметр.УИДФормы = УникальныйИдентификатор Тогда
			
			СохраненнаяНастройка = Параметр.СохраненнаяНастройка;
			СохранитьНастройки();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СписокРасшифровокОбновлен" Тогда
		ОбновитьРасшифровки(Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если НЕ ВыполняетсяЗакрытие	Тогда
		Отказ = Истина;  
		СохранитьВариант(Отказ);
	КонецЕсли;   
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Параметры.Ключ.Пустая() Тогда
		Элементы.Группа_Предупреждение.Видимость = Ложь;
	КонецЕсли;
	
	Если ЭтоРасшифровка Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = НСтр("ru = 'Нельзя сохранять настройки произвольного отчета, открытого как расшифровка'");
		СообщениеПользователю.Сообщить();
		Отказ = Истина;
	ИначеЕсли РедактированиеНастроек Тогда
		Возврат;
	ИначеЕсли СохраненнаяНастройка.Пустая() Тогда
		ТекущийОбъект.ЗначенияНастроекПанелиПользователя        = Новый ХранилищеЗначения(ТиповыеОтчеты_УправляемыйРежимУХ.ПолучитьЗначенияНастроекПанелиПользователя(ТекущийОбъект, ЭтаФорма));
		ТекущийОбъект.НастройкиСхемыКомпоновкиДанныхПоУмолчанию = Новый ХранилищеЗначения(КомпоновщикНастроек.ПолучитьНастройки());
	Иначе
		СохранитьНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если НЕ ЗавершениеРаботы Тогда
		Если НЕ Параметры.Ключ.Пустая() Тогда
			СохранитьТекущуюНастройку();
		КонецЕсли;
	Иначе
		// Не выполняем сохранение, чтобы избежать серверных вызовов.
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СохраненнаяНастройкаПриИзменении(Элемент)
	
	ПрименитьСохраненныеНастройки();
	ОбновитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ОбновитьОтчет(Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкуПоУмолчанию()
	
	Записать(Новый Структура("СохранятьНастройкиКомпоновщика", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВариантКоманда(Команда)
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВариантКак(Команда)
	
	ТиповыеОтчеты_УправляемыйРежимУХ.СохранитьТекущуюНастройкуКак_УР(Объект.Ссылка, УникальныйИдентификатор, СохраненнаяНастройка, "Перечисление.ТипыНастроек.НастройкиОтчета");
	
КонецПроцедуры

&НаКлиенте
Процедура СохраненнаяНастройкаОткрытие(Элемент, СтандартнаяОбработка)
	
	Если НЕ СохраненнаяНастройка.Пустая() Тогда
		ОткрытьФорму("Справочник.СохраненныеНастройки.ФормаОбъекта", Новый Структура("Ключ, РежимРедактирования", СохраненнаяНастройка, Истина));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СмещениеОтносительногоПериодаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныйПериодПриИзменении(Элемент)
	
	НарисоватьСтраницуПериод();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтносительный_ПанельНастроекПользователяПриИзменении(Элемент)
	
	ОбновитьСоответствиеПолейПериода();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Период_ПанельНастроекПользователяПриИзменении(Элемент)
	
	ОбновитьСоответствиеПолейПериода();
	Модифицированность = Истина;
	
КонецПроцедуры

#Область АналитическиеОтборы

&НаКлиенте
Процедура АналитическиеОтборыКоличествоТопПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура АналитическиеОтборыПроцентТопПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура АналитическиеОтборыПолеТопПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура АналитическиеОтборыПроцентПорогПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура АналитическиеОтборыПолеПорогПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура АналитическиеОтборыРесурсПорогПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура АналитическиеОтборыПолеОтборАВСКлассификацияПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура АналитическиеОтборыЗначениеОтборАВСКлассификацияПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СкрытьНулевыеПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекПользовательскиеНастройкиПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтборВалютаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СценарийПланПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СценарийФактПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеХорошееПриИзменении(Элемент)
	
	ОбработатьИзменениеОтборовПоСостоянию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеУдовлетворительноеПриИзменении(Элемент)
	
	ОбработатьИзменениеОтборовПоСостоянию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеТревожноеПриИзменении(Элемент)
	
	ОбработатьИзменениеОтборовПоСостоянию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТрендПоложительныйПриИзменении(Элемент)
	
	ОбработатьИзменениеОтборовПоСостоянию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТрендНулевойПриИзменении(Элемент)
	
	ОбработатьИзменениеОтборовПоСостоянию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТрендОтрицательныйПриИзменении(Элемент)
	
	ОбработатьИзменениеОтборовПоСостоянию();
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиПорядокПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиПараметрыДанныхПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработкаРасшифровкиАналитическихОтчетов

&НаСервере
// Функция возвращает адрес сохраненной таблицы расшифровки для передачи в форму редактирования настроек расшифровки.
Функция ВернутьАдресРасшифровки()
	
	ТаблицаРасшифровки = Расшифровки.Выгрузить();
	ТаблицаРасшифровки.Колонки.Добавить("ЧислоРасшифровываемыхПолей", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10, 0));
	Возврат ПоместитьВоВременноеХранилище(ТаблицаРасшифровки);
	
КонецФункции

// Возвращает настройки компоновки по выбранной ячейке с идентификатором расшифровки РасшифровкаВход.
&НаСервере
Функция ВернутьНастройкиОтбораРасшифровки(КомпоновщикНастроекВход, РасшифровкаВход, АдресДанныхРасшифровкиВход)
	РезультатФункции = Новый Структура;
	Если ЭтоАдресВременногоХранилища(АдресДанныхРасшифровкиВход) Тогда
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровкиВход);
		МассивРасшифровки = ТиповыеОтчетыУХ.ПолучитьМассивПолейРасшифровки(РасшифровкаВход, ДанныеРасшифровки, КомпоновщикНастроекВход);
		Для Каждого ТекМассивРасшифровки Из МассивРасшифровки Цикл
			РезультатФункции.Вставить(ТекМассивРасшифровки.Поле, ТекМассивРасшифровки.Значение);
		КонецЦикла;
	Иначе
		РезультатФункции = Новый Структура;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

&НаСервере
Функция ВернутьСписокДоступныхРасшифровок(Расшифровка)
	
	Перем СписокДоступныхРасшифровок, АдресМассиваДоступныхРасшифровок;
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	
	Справочники.ПроизвольныеОтчеты.ПолучитьДоступныеРасшифровки(Объект, ДанныеРасшифровки, Расшифровка, Расшифровки, СписокДоступныхРасшифровок, АдресМассиваДоступныхРасшифровок, URLСхемы, УникальныйИдентификатор);
	Если ТипЗнч(Объект.ИсточникДанныхОтчета) = Тип("СправочникСсылка.ИсточникиДанныхДляРасчетов")
		И (Объект.ИсточникДанныхОтчета.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета) Тогда	
		СписокДоступныхРасшифровок[0].Значение="ТиповыеОтчетыУХ.ОткрытьНастраиваемыйОтчет";
		Возврат Новый ФиксированнаяСтруктура("СписокДоступныхРасшифровок, АдресМассиваДоступныхРасшифровок", СписокДоступныхРасшифровок, АдресМассиваДоступныхРасшифровок);
	Иначе
		Возврат Новый ФиксированнаяСтруктура("СписокДоступныхРасшифровок, АдресМассиваДоступныхРасшифровок", СписокДоступныхРасшифровок, АдресМассиваДоступныхРасшифровок);
	КонецЕсли;
	
КонецФункции

// Формирует структуру параметров для открытия формы с именем ФормаРасшифровкиВход расшифровки объетом информационной базы
// с типом ТипОбъектаМетаданныхВход и наименованием НаименованиеОбъектаМетаданныхВход для отчета АналитическийОтчетВход.
&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПараметровРасшифровкиПоОбъекту(ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход, ФормаРасшифровкиВход, АналитическийОтчетВход, ОтборРасшифровкиВход = Неопределено)
	РезультатФункции = Новый Структура;
	Попытка
		РезультатФункции = Справочники.ПроизвольныеОтчеты.ПолучитьСтруктуруПараметровРасшифровкиПоОбъекту(ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход, ФормаРасшифровкиВход, АналитическийОтчетВход, , ОтборРасшифровкиВход);
	Исключение
		ТекстСообщения = НСтр("ru = 'Произошла ошибка при получении параметров расшифровки для %НаименованиеОбъекта%: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеОбъекта%", Строка(НаименованиеОбъектаМетаданныхВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Новый Структура;
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура ОбработкаРасшифровкиАналитическогоОтчета(Расшифровка, СтандартнаяОбработка) Экспорт
	
	Перем СписокДоступныхРасшифровок;
	Перем АдресМассиваДоступныхРасшифровок;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтвета = ВернутьСписокДоступныхРасшифровок(Расшифровка);
	СтруктураОтвета.Свойство("СписокДоступныхРасшифровок", СписокДоступныхРасшифровок);
	СтруктураОтвета.Свойство("АдресМассиваДоступныхРасшифровок", АдресМассиваДоступныхРасшифровок);
	
	Если СписокДоступныхРасшифровок.Количество() = 1 Тогда
		ВыбранноеЗначение = СписокДоступныхРасшифровок[0];
	Иначе
		
		ДопПараметры =Новый Структура("Расшифровка", Расшифровка);
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРасшифровки", ЭтотОбъект, ДопПараметры);
		ЭтаФорма.ПоказатьВыборИзМеню(Оповещение, СписокДоступныхРасшифровок);
		
		Возврат;
		
	КонецЕсли;
	
	ОбработкаРасшифровкиЗавершение(ВыбранноеЗначение, Расшифровка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРасшифровки(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    Расшифровка = ДополнительныеПараметры.Расшифровка;    
    
    ВыбранноеЗначение = ВыбранныйЭлемент;
    
    ОбработкаРасшифровкиЗавершение(ВыбранноеЗначение, Расшифровка);

КонецПроцедуры

// Выбирает и выводит необходимую расшифровку по операнду Операнд, показателю Показатель и контексту Контекст.

&НаКлиенте
Процедура ВывестиРасшифровку(Операнд, Контекст, Показатель)
	
	РезультатРасшифровки = ПолучитьРезультатРасшифровкиОперанда(Операнд, Контекст);
	
	Если ТипЗнч(РезультатРасшифровки)=Тип("ТабличныйДокумент") Тогда
		
		ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаРасшифровкиВИБ_Управляемая", новый Структура("ИспользуемаяИБ, Результат", Контекст.ИспользуемаяИБ, РезультатРасшифровки));
		
	ИначеЕсли ТипЗнч(РезультатРасшифровки)=Тип("Структура") Тогда
		
		Если РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии")
			ИЛИ РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии")  Тогда
			
			ОткрытьФорму("Отчет.ОтчетПоРегиструБухгалтерииБД.Форма.ФормаОтчета",РезультатРасшифровки,,Новый УникальныйИдентификатор);
			
		ИначеЕсли РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления")
			ИЛИ РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления")Тогда
			
			ОткрытьФорму("Отчет.ОтчетПоРегиструНакопленияБД.Форма.ФормаОтчета",РезультатРасшифровки,,Новый УникальныйИдентификатор);
			
		ИначеЕсли РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос") Тогда
			
			ОткрытьФорму("Отчет.ОтчетПоПроизвольномуЗапросуВИБ.Форма.ФормаОтчета",РезультатРасшифровки,,Новый УникальныйИдентификатор);
			
		ИначеЕсли РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос") Тогда
			
			ОткрытьФорму("Отчет.ОтчетПоПроизвольномуЗапросуТек.Форма.ФормаОтчета",РезультатРасшифровки,,Новый УникальныйИдентификатор);
			
		ИначеЕсли РезультатРасшифровки.СпособПолучения = ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета") Тогда
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ОтборПоВалюте", ОтборВалюта);
			СтруктураОтбора.Вставить("ОтборПоОрганизации", ОтборОрганизация);
			СтруктураОтбора.Вставить("ПериодПланированияОтборОкончание", ПериодОтчета);
			СтруктураОтбора.Вставить("ОтборПоСценарию", СценарийФакт);
			СтруктураОтбора.Вставить("ОтборПоПроекту", Неопределено);
			НовыйПериодСравнения = ОпределитьПериодСравнения(ПериодОтчета);
			Контекст.Вставить("ПериодСравнения", НовыйПериодСравнения);
			АдресХранилищаПеременныхДляРасчета = БизнесАнализВызовСервераУХ.ПолучитьАдресОбъектаРасчетаОперанда(Показатель, Операнд, Контекст, СтруктураОтбора, УникальныйИдентификатор, "ФактическоеЗначениеТекущегоПериода");
			СтруктураОтбора = Новый Структура;
			СтруктураПараметров = Новый Структура;
			ПоказательОтчета = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Операнд, "ПоказательОтбор");
			СтруктураПараметров.Вставить("ПоказательОтчета", РезультатРасшифровки.ПоказательОтбор);
			СтруктураПараметров.Вставить("АдресХранилищаПеременныхДляРасчета", АдресХранилищаПеременныхДляРасчета);
			СтруктураПараметров.Вставить("мТекущаяВалюта", ОтборВалюта);
			СтруктураПараметров.Вставить("СтруктураОтбора", СтруктураОтбора);
			ОткрытьФорму("Обработка.РасшифровкаРассчитанныхЗначений.Форма",СтруктураПараметров);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРасшифровкиЗавершение(ВыбранноеЗначение, Расшифровка)
    
    Если ВыбранноеЗначение = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Если ВыбранноеЗначение.Значение = "СтандартнаяРасшифровка" Тогда
        
        СтандартнаяОбработкаРасшифровки(Неопределено, Расшифровка, Ложь);
        
    ИначеЕсли ВыбранноеЗначение.Значение = "ТиповыеОтчетыУХ.ОткрытьНастраиваемыйОтчет" Тогда
        
        ОткрытьНастраиваемыйОтчет(Расшифровка, АдресДанныхРасшифровки);
        
    ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ЭлементСпискаЗначений") Тогда
        
        //ОткрытьНастраиваемыйОтчет(Расшифровка, АдресДанныхРасшифровки);
        //Возврат;
        Если ТипЗнч(ВыбранноеЗначение.Значение) = Тип("ФиксированнаяСтруктура") И ВыбранноеЗначение.Значение.Свойство("Операнд") Тогда
            
            Контекст = ВыбранноеЗначение.Значение.Контекст;
            
            #Если ТолстыйКлиентОбычноеПриложение Тогда
                Контекст.Вставить("УправляемыйРежим", Ложь);
            #Иначе
                Контекст.Вставить("УправляемыйРежим", Истина);
			#КонецЕсли
			
			Контекст.Вставить("ЧтениеНеактуальныхЗаписей", Истина);
            
            РезультатРасшифровки = УправлениеОтчетамиУХ.РасшифроватьДанныеОперанда(ВыбранноеЗначение.Значение.Операнд, Контекст, ВыбранноеЗначение.Значение.ДополнительнаяРасшифровка);
            
            Если ТипЗнч(РезультатРасшифровки)=Тип("ТабличныйДокумент") Тогда
                
                ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаРасшифровкиВИБ_Управляемая", новый Структура("ИспользуемаяИБ, Результат", Объект.ИспользуемаяИБ, РезультатРасшифровки));
                
            ИначеЕсли ТипЗнч(РезультатРасшифровки)=Тип("Структура") Тогда
                
               Если РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии")
					ИЛИ РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии")  Тогда
					
					ОткрытьФорму("Отчет.ОтчетПоРегиструБухгалтерииБД.Форма.ФормаОтчета",РезультатРасшифровки,,Новый УникальныйИдентификатор);
					
				ИначеЕсли РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления")
					ИЛИ РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления")Тогда
					
					ОткрытьФорму("Отчет.ОтчетПоРегиструНакопленияБД.Форма.ФормаОтчета",РезультатРасшифровки,,Новый УникальныйИдентификатор);
					
				ИначеЕсли РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос") Тогда
					
					ОткрытьФорму("Отчет.ОтчетПоПроизвольномуЗапросуВИБ.Форма.ФормаОтчета",РезультатРасшифровки,,Новый УникальныйИдентификатор);
					
				ИначеЕсли РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос") Тогда
					
					ОткрытьФорму("Отчет.ОтчетПоПроизвольномуЗапросуТек.Форма.ФормаОтчета",РезультатРасшифровки,,Новый УникальныйИдентификатор);
					
				КонецЕсли;
                
                
            КонецЕсли;
            
		Иначе
			СтруктураЗначения = ВыбранноеЗначение.Значение;
			ТипОбъектаМетаданных = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗначения, "ТипОбъектаМетаданных", "");
			Если ЗначениеЗаполнено(ТипОбъектаМетаданных) Тогда
				// Задан объект метаданных. Расшифруем по нему.
				НаименованиеОбъектаМетаданных	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗначения, "НаименованиеОбъектаМетаданных", "");
				ФормаРасшифровки				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗначения, "ФормаРасшифровки", "");
				ОтборыРасшифровки = ВернутьНастройкиОтбораРасшифровки(КомпоновщикНастроек, Расшифровка, АдресДанныхРасшифровки);
				СтруктураПараметров = ПолучитьСтруктуруПараметровРасшифровкиПоОбъекту(ТипОбъектаМетаданных, НаименованиеОбъектаМетаданных, ФормаРасшифровки, Объект.Ссылка, ОтборыРасшифровки);
				БизнесАнализКлиентУХ.ОтобразитьРаскрытиеОбъектомИнформационнойБазы(ТипОбъектаМетаданных, НаименованиеОбъектаМетаданных, ФормаРасшифровки, СтруктураПараметров);
			Иначе				
				// Расшифруем аналитическим отчётом.
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Ключ",						 СтруктураЗначения.Отчет);
				ПараметрыФормы.Вставить("Расшифровка",				 Расшифровка);
				ПараметрыФормы.Вставить("АдресДанныхРасшифровки",	 АдресДанныхРасшифровки); 
				ПараметрыФормы.Вставить("Настройки",				 КомпоновщикНастроек.Настройки);
				ПараметрыФормы.Вставить("СохраненнаяНастройка",		 СтруктураЗначения.СохраненнаяНастройка);
				ПараметрыФормы.Вставить("ФормироватьПриОткрытии",	 Истина); 
				ПараметрыФормы.Вставить("ЭтоРасшифровка",			 Истина);
				ОткрытьФорму("Справочник.ПроизвольныеОтчеты.Форма.ФормаОтображенияОтчетаУправляемая", ПараметрыФормы);
				
			КонецЕсли;
			
		КонецЕсли;
		
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастраиваемыйОтчет(Расшифровка, АдресДанныхРасшифровок) Экспорт
	
	НастраиваемыеОтчеты = АналитическиеОтчетыУХ.ПолучитьНастраиваемыеОтчетыДляРасшифровки_УправляемоеПриложение(ПоместитьВоВременноеХранилище(Расшифровка), АдресДанныхРасшифровок);
	
	Если НастраиваемыеОтчеты = Неопределено Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не найдено ни одного экземпляра отчета'"), 60);		
		Возврат;
		
	ИначеЕсли ТипЗнч(НастраиваемыеОтчеты) = Тип("Строка") Тогда
		
		ДокументСсылка = Неопределено;

		ПараметрыФормы = Новый Структура("Расшифровка, АдресДанныхРасшифровки, ИсточникДанныхОтчета", Расшифровка, АдресДанныхРасшифровок, Объект.ИсточникДанныхОтчета);
		ДопПараметры = Новый Структура("НастраиваемыеОтчеты, Расшифровка", НастраиваемыеОтчеты, Расшифровка);
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОткрытьФормуОтчета", ЭтотОбъект, ДопПараметры);
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораНастраиваемогоОтчета_Управляемая", 
						ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
        Возврат;
		
	Иначе
		ДокументСсылка = НастраиваемыеОтчеты;
	КонецЕсли;
	
	ОткрытьФормуОтчета(ДокументСсылка, Расшифровка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьФормуОтчета(Результат, ДополнительныеПараметры) Экспорт
    
    НастраиваемыеОтчеты = ДополнительныеПараметры.НастраиваемыеОтчеты;
    Расшифровка = ДополнительныеПараметры.Расшифровка;
        
    ДокументСсылка = Результат;
    
    ОткрытьФормуОтчета(ДокументСсылка, Расшифровка);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтчета(ДокументСсылка, Расшифровка)
    
    Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
        
        АдресПоказателей = АналитическиеОтчетыУХ.ПолучитьПоказателиНастраиваемогоОтчетаДляРасшифровки_УправляемоеПриложение(ПоместитьВоВременноеХранилище(Расшифровка), АдресДанныхРасшифровки, ПоместитьВоВременноеХранилище(ДокументСсылка));
        Если ЭтоАдресВременногоХранилища(АдресПоказателей) Тогда
			
			Показатели = ПолучитьИзВременногоХранилища(АдресПоказателей);
            
            #Если ТолстыйКлиентОбычноеПриложение Тогда
                
                ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
                
                ФормаОтчета = ДокументОбъект.ПолучитьФорму();
                ФормаОтчета.Открыть();
                Если ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.РучныеКорректировки") Тогда
                    Если Показатели.Количество() = 1 Тогда
                        МассивПолей = Новый Массив;
                        МассивПолей.Добавить(Показатели[0]);
                        ФормаОтчета.ВыделитьОбластиПоказателей(МассивПолей);
                    КонецЕсли;
                КонецЕсли;
                
			#Иначе
				
				ПараметрыФормы = Новый Структура("Ключ, МассивПоказателей", ДокументСсылка, Показатели);
                ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаДокументаУправляемая", ПараметрыФормы);
				
			#КонецЕсли
			
        Иначе
			
			Сообщить(НСтр("ru = 'Ошибка получения данных'"));
			
		КонецЕсли;
		
    КонецЕсли;

КонецПроцедуры

// Обработка расшифровки монитора эффективности
&НаКлиенте
Процедура ОбработкаРасшифровкиМонитораЭффективности(Расшифровка, СтандартнаяОбработка) Экспорт
	
	БизнесАнализКлиентУХ.ОбработкаРасшифровкиМонитораЭффективности(Объект, Расшифровка, Расшифровки, АдресДанныхРасшифровки, URLСхемы, УникальныйИдентификатор);
	
КонецПроцедуры

// Действие, выполняемое при вызове расшифровки пользователем
&НаКлиенте
Процедура СтандартнаяОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка = Ложь)

	Перем ВыполненноеДействие;
	Перем Настройки;
	
	// Запретим стандартную обработку расшифровки
	СтандартнаяОбработка = Ложь;

	//ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	
	// Создадим и инициализируем обработчик расшифровки
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(АдресДанныхРасшифровки, 
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));

	ДопПараметры = Новый Структура("ВыполненноеДействие, Настройки, Расшифровка", ВыполненноеДействие, Настройки, Расшифровка);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработатьВыборДействия", ЭтотОбъект, ДопПараметры);
	ОбработкаРасшифровки.ПоказатьВыборДействия(Оповещение, Расшифровка,,,, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьВыборДействия(ВыполненноеДействие,  Настройки, ДополнительныеПараметры) Экспорт
    
    Расшифровка = ДополнительныеПараметры.Расшифровка;
        
    // Осуществим выбор действия расшифровки пользователем
        
    Если Настройки <> Неопределено Тогда
        // Пользователь выбрал действие, для которого нужно менять настройки
        Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Упорядочить Тогда
            // Если требуется упорядочить - упорядочим в текущем отчете
            КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
            ОбновитьОтчет();
        ИначеЕсли ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
            ПоказатьЗначение(, Настройки);
        Иначе
            
            Вн_Настройки =ПрименитьНастройкиКД(Расшифровка, Настройки);
			
			ПараметрыФормы = Новый Структура("Ключ, Настройки, ЭтоРасшифровка, ФормироватьПриОткрытии", 
												Объект.Ссылка, Вн_Настройки, Истина, Истина);
            ОткрытьФорму("Справочник.ПроизвольныеОтчеты.Форма.ФормаОтображенияОтчетаУправляемая", ПараметрыФормы, , Истина);
			
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПрименитьНастройкиКД(Расшифровка, Настройки)
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(АдресДанныхРасшифровки, 
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));

	Возврат  ОбработкаРасшифровки.ПрименитьНастройки(Расшифровка, Настройки);
	 
КонецФункции

&НаСервере
Функция ПолучитьСписокРасшифровки(Расшифровка, АдресМассиваРасшифровок)
	
	Перем СписокДоступныхРасшифровок, МассивПолейРасшифровки;
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	
	Если ДанныеРасшифровки = Неопределено Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	ОтчетОбъект = РеквизитФормыВЗначение("Объект");
	Справочники.ПроизвольныеОтчеты.ПолучитьДоступныеРасшифровки(Объект, ДанныеРасшифровки, Расшифровка, СписокДоступныхРасшифровок, МассивПолейРасшифровки, URLСхемы);
	
	СписокПолейРасшифровки = Новый СписокЗначений;
	СписокПолейРасшифровки.ЗагрузитьЗначения(МассивПолейРасшифровки);
	
	АдресМассиваРасшифровок = ПоместитьВоВременноеХранилище(МассивПолейРасшифровки);
	
	Возврат СписокДоступныхРасшифровок;
	
КонецФункции

&НаСервереБезКонтекста
Функция РасшифровкаИсточника(ПоказательРасшифровки, ВнешнийКонтекст)
	
	Возврат ТиповыеОтчетыУХ.РасшифровкаИсточникаВИБОтчетом(ПоказательРасшифровки, ВнешнийКонтекст);
	
КонецФункции

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Перем СписокДоступныхРасшифровок;
	Перем АдресМассиваДоступныхРасшифровок;
	Перем ДанныеРасшифровки;
	Перем ТаблДок;
	
	Если ОБъект.ВидПроизвольногоОтчета = 0 Тогда
		ОбработкаРасшифровкиАналитическогоОтчета(Расшифровка, СтандартнаяОбработка);
	Иначе
		СтандартнаяОбработка  = Ложь;
		ПоказательРасшифровки = ВернутьПоказательРасшифровки(АдресДанныхРасшифровки, Расшифровка);
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ТаблДок = РасшифровкаИсточника(ПоказательРасшифровки, ВнешнийКонтекст);
		#Иначе
			ТаблДок = ТиповыеОтчетыУХ.РасшифровкаИсточникаВИБОтчетом(ПоказательРасшифровки, ВнешнийКонтекст);
		#КонецЕсли
		ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаРасшифровкиВИБ_Управляемая", Новый Структура("Результат, ИспользуемаяИБ", ТаблДок, ВнешнийКонтекст.ИспользуемаяИБ));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиСтандартнойРасшифровки(Расшифровка, ВыполненноеДействие)
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки), Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
	Возврат ОбработкаРасшифровки.Выполнить(Расшифровка, ВыполненноеДействие);
	
КонецФункции

#КонецОбласти

#Область ПроцедурыЗаполненияПолейВыбораФормыЭлемента

Процедура ЗаполнитьСпискиВыбораАналитическихОтборов()
	
	Элементы.АналитическиеОтборыРесурсПорог.СписокВыбора.Очистить();
	Элементы.АналитическиеОтборыПолеТоп.СписокВыбора.Очистить();
	Элементы.АналитическиеОтборыПолеПорог.СписокВыбора.Очистить();
	Элементы.АналитическиеОтборыПолеОтборАВСКлассификация.СписокВыбора.Очистить();
	Элементы.АналитическиеОтборыЗначениеОтборАВСКлассификация.СписокВыбора.Очистить();
	
	
	СписокРесурсов = ТиповыеОтчетыУХ.ПолучитьСписокДоступныхРесурсов(КомпоновщикНастроек, Ложь, Ложь);
	
	Для Каждого Элемент Из СписокРесурсов Цикл
		Элементы.АналитическиеОтборыРесурсПорог.СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
	КонецЦикла;
	
	ПоляГруппировок = ТиповыеОтчетыУХ.ПолучитьПоляГруппировок(КомпоновщикНастроек, Истина, Истина);
	ПоляГруппировок.Вставить(0, "", "");
	
	
	Для Каждого Элемент Из ПоляГруппировок Цикл
		Элементы.АналитическиеОтборыПолеТоп.СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
		Элементы.АналитическиеОтборыПолеПорог.СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
	КонецЦикла;
	
	СписокПользовательскихПолей = ТиповыеОтчетыУХ.ПолучитьПользовательскиеПоляДляНастройкиABCКлассификации(КомпоновщикНастроек);
	
	Для Каждого Элемент Из СписокПользовательскихПолей Цикл
		
		Элементы.АналитическиеОтборыПолеОтборАВСКлассификация.СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
		
	КонецЦикла;
	
	СписокВыбораДляАВСКлассификации = ПолучитьСписокВыбораИндикатора("ДоработкаТаблицы,ABCКлассификация,");
	
	
	Для Каждого Элемент Из СписокВыбораДляАВСКлассификации Цикл
		
		Элементы.АналитическиеОтборыЗначениеОтборАВСКлассификация.СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление, , Элемент.Картинка);
		
	КонецЦикла;
		
	
КонецПроцедуры

Функция ПолучитьСписокВыбораИндикатора(ИмяИндикатора) Экспорт
	
	Список = Новый СписокЗначений;
	Список.Добавить("", "");
	
	Если ИмяИндикатора = "ДоработкаТаблицы,ABCКлассификация," Тогда
		Значение = "ДоработкаТаблицы,ABCКлассификация,AКласс";
		Список.Добавить(Значение, Нстр("ru = 'A-класс'"), , );
		Значение = "ДоработкаТаблицы,ABCКлассификация,BКласс";
		Список.Добавить(Значение, Нстр("ru = 'B-класс'"), , );
		Значение = "ДоработкаТаблицы,ABCКлассификация,СКласс";
		Список.Добавить(Значение, Нстр("ru = 'C-класс'"), , );
	Иначе
		Для Индекс = 1 По 3 Цикл
			Значение = "" + Индекс + ИмяИндикатора;
			Картинка = АналитическиеОтчетыУХ.ПолучитьКартинкуИндикатора(Значение);
			Список.Вставить(1, Значение, " ", , Картинка);
		КонецЦикла;
	КонецЕсли;

	Возврат Список;
	
КонецФункции

#КонецОбласти

#Область СохранениеНастроекОтчетов

&НаКлиенте
Процедура ПередСохранениеВариантаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Отказ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Отказ", Ложь);
	НужноЗакрывать = Ложь;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СохранитьТекущуюНастройку();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ТиповыеОтчеты_УправляемыйРежимУХ.СохранитьТекущуюНастройкуКак_УР(Объект.Ссылка, УникальныйИдентификатор, СохраненнаяНастройка, "Перечисление.ТипыНастроек.НастройкиОтчета");
	Иначе
		Отказ = Истина;
	КонецЕсли;
	ВыполняетсяЗакрытие = НЕ НужноЗакрывать;
	Если ВыполняетсяЗакрытие Тогда
		Модифицированность = Ложь;
	КонецЕсли;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВариант(Отказ = Ложь)
	ВыполняетсяЗакрытие = Истина;	
	Если СохраненнаяНастройка.Пустая() Тогда
		ТекущийПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
		Если Объект.АдминистраторОтчета = ТекущийПользователь ИЛИ ПолныеПраваУХ.ПроверитьНаличиеПолныхПравУПользователя(ТекущийПользователь) Тогда
			ТекстВопроса = НСтр("ru = 'Вы действительно хотите изменить настройки отчета по умолчанию?'");
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Отказ", Отказ);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередСохранениеВариантаЗавершение", ЭтаФорма, ПараметрыОповещения);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ТиповыеОтчеты_УправляемыйРежимУХ.СохранитьТекущуюНастройкуКак_УР(Объект.Ссылка, УникальныйИдентификатор, СохраненнаяНастройка, "Перечисление.ТипыНастроек.НастройкиОтчета");
		КонецЕсли;
	Иначе
		ТиповыеОтчеты_УправляемыйРежимУХ.СохранитьТекущуюНастройку_УР(Объект.Ссылка, УникальныйИдентификатор, СохраненнаяНастройка, "Перечисление.ТипыНастроек.НастройкиОтчета");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОбъект = СохраненнаяНастройка.ПолучитьОбъект();
	НастройкаОбъект.ХранилищеНастроек   = Новый ХранилищеЗначения(ПолучитьСтруктуруНастроек());
	НастройкаОбъект.Записать();
	
	ЗаполнитьСписокДоступныхНастроек();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруНастроек(ВозвращатьАдрес = Ложь)
	
	СтруктураНастроек = Новый Структура;
	
	Для Каждого Реквизит Из Объект.Ссылка.Метаданные().Реквизиты Цикл
		
		Если Реквизит.Имя = "СхемаКомпоновкиДанных" 
		 ИЛИ Реквизит.Имя = "ДатаВерсииИсточникаДанных"
		 ИЛИ Реквизит.Имя = "ИсточникДанныхОтчета"
		 ИЛИ Реквизит.Имя = "Описание"
		 ИЛИ Реквизит.Имя = "ПодлежитПередачеВПодчиненныеУзлыПриОбменеПоОрганизации"
		 ИЛИ Реквизит.Имя = "ОформлениеПоказателей"
		 ИЛИ Реквизит.Имя = "Расшифровки"
		 ИЛИ Реквизит.Имя = "ЗначенияНастроекПанелиПользователя"
		 ИЛИ Реквизит.Имя = "ПараметрыПанелиПользователя"
		 ИЛИ Реквизит.Имя = "ЦветаДиаграммы" 
		 ИЛИ Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураНастроек.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);
		
	КонецЦикла;
	
	СтруктураНастроек.Вставить("ОформлениеПоказателей", Новый ХранилищеЗначения(РеквизитФормыВЗначение("ОформлениеПоказателей")));
	СтруктураНастроек.Вставить("Расшифровки"          , Новый ХранилищеЗначения(РеквизитФормыВЗначение("Расшифровки")));
	СтруктураНастроек.Вставить("ЦветаДиаграммы"       , Новый ХранилищеЗначения(ЦветаДиаграммы));
	СтруктураНастроек.Вставить("НастройкиКомпоновки"  , КомпоновщикНастроек.ПолучитьНастройки());
	СтруктураНастроек.Вставить("ЗначенияНастроекПанелиОтчета", ТиповыеОтчеты_УправляемыйРежимУХ.ПолучитьЗначенияНастроекПанелиПользователя(Объект, ЭтаФорма));
	СтруктураНастроек.Вставить("ПараметрыПанелиПользователя",  ПолучитьИзВременногоХранилища(АдресПараметровПанелиФормы));
	
	Если ВозвращатьАдрес Тогда
		Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек);
	Иначе
		Возврат СтруктураНастроек;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ВосстановитьНастройки()
	
		
	ОтчетОбъект = РеквизитФормыВЗначение("Объект");
	Вн_ОформлениеПоказателей = ОтчетОбъект.ОформлениеПоказателей.Получить();
	Если ТипЗнч(Вн_ОформлениеПоказателей) = Тип("ТаблицаЗначений") Тогда
		ЗначениеВРеквизитФормы(Вн_ОформлениеПоказателей, "ОформлениеПоказателей");
	КонецЕсли;

	Вн_Расшифровки = ОтчетОбъект.Расшифровки.Получить();
	Если ТипЗнч(Вн_Расшифровки) = Тип("ТаблицаЗначений") Тогда
			
		Попытка
			Если Вн_Расшифровки.Колонки.Найти("ИсточникДанных") <> Неопределено Тогда
				
				Для Каждого Строка ИЗ Вн_Расшифровки ЦИкл
					НоваяСтрока = Расшифровки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					НОваяСтрока.ПоказательМонитора = Строка.ИсточникДанных;
				КонецЦикла;
			Иначе
				ЗначениеВРеквизитФормы(Вн_Расшифровки, "Расшифровки");
			КонецЕсли;
		Исключение
		КонецПопытки;
			
	КонецЕсли;
		
	ЦветаДиаграммы        = ОтчетОбъект.ЦветаДиаграммы.Получить();
	
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеПоУмолчаниюВКомпоновщикДанных()
	
	ОтчетОбъект = РеквизитФормыВЗначение("Объект");
	НастройкиСхемыКомпоновкиДанныхПоУмолчанию = ОтчетОбъект.НастройкиСхемыКомпоновкиДанныхПоУмолчанию.Получить();
	Если НастройкиСхемыКомпоновкиДанныхПоУмолчанию <> Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСхемыКомпоновкиДанныхПоУмолчанию);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьСохраненныеНастройки(Знач ТекущаяНастройка = Неопределено)
	

	ОтчетОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ТекущаяНастройка = Неопределено Тогда
		ТекущаяНастройка = ?(СохраненнаяНастройка.Пустая(), Неопределено, СохраненнаяНастройка);
	КонецЕсли;
	
	Если ТипЗнч(ТекущаяНастройка) = Тип("СправочникСсылка.СохраненныеНастройки") Тогда
		НастройкиОтчета = ТекущаяНастройка.ХранилищеНастроек.Получить();
		Если ТипЗнч(НастройкиОтчета) = Тип("Структура") И НастройкиОтчета.Свойство("ЗначенияНастроекПанелиОтчета") Тогда
			ЗначенияНастроекПанелиОтчета = НастройкиОтчета.ЗначенияНастроекПанелиОтчета;
		Иначе
			ЗначенияНастроекПанелиОтчета = ОтчетОбъект.ЗначенияНастроекПанелиПользователя.Получить();
		КонецЕсли;
	
	ИначеЕсли ТекущаяНастройка = Неопределено Тогда
		ЗначенияНастроекПанелиОтчета = ОтчетОбъект.ЗначенияНастроекПанелиПользователя.Получить();
	Иначе
		СтруктураНастроек = ТекущаяНастройка.Получить();
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			ЗначенияНастроекПанелиОтчета = СтруктураНастроек.ЗначенияНастроекПанелиОтчета;
		Иначе
			ЗначенияНастроекПанелиОтчета = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ЗначенияНастроекПанелиОтчета) = тип("Структура") Тогда
		
		ТиповыеОтчеты_УправляемыйРежимУХ.ВосстановитьЗначенияНастроекПанелиПользователя(ЗначенияНастроекПанелиОтчета, ЭтаФорма);
		ЗагрузитьДанныеПоУмолчаниюВКомпоновщикДанных();
		Если ТекущаяНастройка <> Неопределено Тогда
			Справочники.ПроизвольныеОтчеты.СкопироватьНастройкиКомпоновщика(КомпоновщикНастроек.Настройки, ЗначенияНастроекПанелиОтчета.НастройкиКомпоновщика);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьОтчетПриОткрытииНаСервере()
	
	Если ЭтоАдресВременногоХранилища(АдресДанныхРасшифровки) Тогда
		ПрименитьСохраненныеНастройки(ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки));
		СохраненнаяНастройка = Справочники.СохраненныеНастройки.ПустаяСсылка(); // Используются внешние настройки. 
	Иначе
		ПрименитьСохраненныеНастройки();
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущуюНастройку()
	
	Справочники.ПроизвольныеОтчеты.ЗаписатьСохраненнуюНастройку(Объект.Ссылка, ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"), СохраненнаяНастройка); 
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеВидимостьюПанелейАналитическогоОтчета

&НаКлиенте
Процедура УстановитьВидимостьПанелиНастройки()
	
	Элементы.НастройкиОтчета.Видимость = ОтображатьДополнительныеНастройки;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьДляИсточников()
	
	Элементы.ВыборИсточников.ТекущаяСтраница = ?(Объект.ВидПроизвольногоОтчета = 0
												, Элементы.ДляСКД
												, Элементы.ДляПанелиИндикаторов);
КонецПроцедуры

Процедура НарисоватьСтраницуПериод() Экспорт
	
	Элементы.ГруппаОтображенияПериода.ТекущаяСтраница = ?(ПроизвольныйПериод, Элементы.СтраницаПроизвольныйПериод, Элементы.СтраницаОтносительныйПериод);
	Элементы.ПериодОтносительный_ПанельНастроекПользователя.СписокВыбора.Очистить();
	
	Для Каждого Элемент Из ТаблицаДоступныхПериодов Цикл
		
		Элементы.ПериодОтносительный_ПанельНастроекПользователя.СписокВыбора.Добавить(Элемент.Код, Элемент.Представление);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСоответствиеПолейПериода()
	
	Если ПроизвольныйПериод Тогда
		
		НайденныеСтроки = ТаблицаДоступныхПериодов.НайтиСтроки(Новый Структура("Период", ПериодОтчета));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ПериодОтносительный = НайденныеСтроки[0].Код;
		Иначе
			ПериодОтносительный = "";
		КонецЕсли;
		
	Иначе
		
		НайденныеСтроки = ТаблицаДоступныхПериодов.НайтиСтроки(Новый Структура("Код", ПериодОтносительный));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ПериодОтчета = НайденныеСтроки[0].Период;
		Иначе
			ПериодОтчета = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МониторПоказателей

&НаКлиенте
Процедура ТаблицаМонитораПоказателейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	
	Если ТекущаяСтрока.СлужебнаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	Показатель    = ТекущаяСтрока.Показатель;
	ИмяОперанда   = СтрЗаменить(Поле.Имя, "ТаблицаМонитораПоказателей", "");
	Операнд       = ВернутьОперандПоказателя(ИмяОперанда, Показатель);
	
	ОбработкаРасшифровкиПоказателяМКП(Элемент, Показатель, ИмяОперанда, Операнд, ВнешнийКонтекст, ТекущаяСтрока.ИспользуемаяИБ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРасшифровкиПоказателяМКП(Элемент, Показатель, ИмяОперанда, Операнд, ВнешнийКонтекст, ИспользуемаяИБ)
	
	Контекст      = ЗаполнитьСтруктуруВнешнегоКонтекста(ИмяОперанда, ВнешнийКонтекст);
	
	Если Контекст = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ИспользуемаяИБ", ИспользуемаяИБ);
	
	Если Операнд = Неопределено Тогда
		РезультатВыбора = 1;
	Иначе
		
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(1, "Раскрытие");
		СписокЗначений.Добавить(2, "Расшифровка");
		
		НайденныеСтроки = Расшифровки.НайтиСтроки(Новый Структура("ПоказательМонитора", Показатель));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			ЗначениеВыбора = Новый Структура("Отчет, СохраненнаяНастройка", НайденнаяСтрока.Отчет, НайденнаяСтрока.ВариантОтчета);
			ПредставлениеВыбора = ?(ПустаяСтрока(НайденнаяСтрока.Представление), НайденнаяСтрока.Отчет, НайденнаяСтрока.Представление);
			СписокЗначений.Добавить(ЗначениеВыбора, ПредставлениеВыбора);
			
		КонецЦикла;
		
		ТекущийРезультат = Неопределено;
		
		ДопПараметры = Новый Структура("ВнешнийКонтекст, Контекст, Операнд, Показатель", 
										ВнешнийКонтекст, Контекст, Операнд, Показатель);
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработатьРасшифровкуМСК", ЭтотОбъект, ДопПараметры);
		ПоказатьВыборИзМеню(Оповещение, СписокЗначений, Элемент);
        Возврат;
		
	КонецЕсли;
	
	ОбработатьРасшифровкуМКП(ВнешнийКонтекст, Контекст, Операнд, Показатель, РезультатВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРасшифровкуМСК(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    ВнешнийКонтекст	= ДополнительныеПараметры.ВнешнийКонтекст;
    Контекст 		= ДополнительныеПараметры.Контекст;
    Операнд 		= ДополнительныеПараметры.Операнд;
    Показатель		= ДополнительныеПараметры.Показатель;
    
    ТекущийРезультат = ВыбранныйЭлемент;
    Если ТекущийРезультат = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    ОбработатьРасшифровкуМКП(ВнешнийКонтекст, Контекст, Операнд, Показатель, ТекущийРезультат.Значение);

КонецПроцедуры

// Получает расшифровку показателя по Операнд, Контекст и преобразует её в структуру
// (если это строка таблицы значений).
&НаСервереБезКонтекста
Функция ПолучитьРезультатРасшифровкиОперанда(Операнд, Контекст)
	РезультатРасшифровки = УправлениеОтчетамиУХ.РасшифроватьДанныеОперанда(Операнд, Контекст);
	Если ТипЗнч(РезультатРасшифровки) = Тип("СтрокаТаблицыЗначений") Тогда
		РезультатФункции = Новый Структура("АналитикВидаОтчета, ВалютнаяСумма, ГруппаРаскрытия, ГруппаРаскрытияОтбор, ПланСчетов, ПоказательОтбор, ПоказательТекущегоОтчета, 
		|ПроизвольныйЗапрос, РегистрБД, СпособПолучения, СтруктураЗапроса, СтруктураПараметров, таблицаADO, ТекстЗапроса, ТипБД, ТолькоАналитическиеЗначения");
		ЗаполнитьЗначенияСвойств(РезультатФункции, РезультатРасшифровки);
	Иначе
		РезультатФункции = РезультатРасшифровки;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Возвращает период сравнения для периода ПериодОтчетаВход.
&НаСервереБезКонтекста
Функция ОпределитьПериодСравнения(ПериодОтчетаВход)
	РезультатФункции = ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(ПериодОтчетаВход.ДатаНачала, ПериодОтчетаВход.Периодичность, -1);	
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура ОбработатьРасшифровкуМКП(ВнешнийКонтекст, Контекст, Операнд, Показатель, РезультатВыбора)
    
	Если РезультатВыбора = 1 Тогда
		
		ВнешнийКонтекст.Вставить("ИспользуемаяИБ", Контекст.ИспользуемаяИБ);
		АдресРезультатРасшифровки = ТиповыеОтчетыУХ.ВывестиОтчетПоМонитору(Показатель, ТиповыеОтчетыУХ.ВернутьТаблицыПоказателяМонитораКлючевыхПоказателей(Показатель, ВнешнийКонтекст));
		
		ПараметрыФормы = Новый Структура("АдресТабличныйДокумент", АдресРезультатРасшифровки);
		ОткрытьФорму("ОбщаяФорма.ФормаРасшифровкиПоказателяМонитораКлючевыхПоказателей", ПараметрыФормы);
		
	ИначеЕсли РезультатВыбора = 2 Тогда
		
		ВывестиРасшифровку(Операнд, Контекст, Показатель);
		
	ИначеЕсли РезультатВыбора = 3 Тогда
		
		ОперандФакт = ВернутьОперандПоказателя("ФактическоеЗначениеТекущегоПериода", Показатель);
		ОперандПлан = ВернутьОперандПоказателя("ПлановоеЗначение", Показатель);
		Контекст      = ЗаполнитьСтруктуруВнешнегоКонтекста("ФактическоеЗначениеТекущегоПериода", ВнешнийКонтекст);
		Если Контекст = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		БизнесАнализВызовСервераУХ.ВернутьДинамикуПоказателя(ОперандФакт, ОперандПлан, Контекст, ВнешнийКонтекст.ПлановыйСценарий, 5).Показать();
		
	ИначеЕсли РезультатВыбора = 4 Тогда
		
		БизнесАнализВызовСервераУХ.ВернутьСтруктуруПоказателяПоАналитике(Операнд, Контекст, 1).Показать();
		
	ИначеЕсли ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
		
		МассивДоступныхРасшифровок = Новый Массив;
		
		Для Каждого ТекКонтекст Из Контекст Цикл
			СтруктураРасшифровки = Новый Структура();
			СтруктураРасшифровки.Вставить("Поле", ТекКонтекст.Ключ);
			СтруктураРасшифровки.Вставить("Иерархия", Ложь);
			СтруктураРасшифровки.Вставить("Значение", ТекКонтекст.Значение);
			МассивДоступныхРасшифровок.Добавить(СтруктураРасшифровки);
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Ключ", РезультатВыбора.Отчет);
		ПараметрыФормы.Вставить("ЭтоРасшифровка", Истина);
		ПараметрыФормы.Вставить("СохраненнаяНастройка", РезультатВыбора.СохраненнаяНастройка);
		ПараметрыФормы.Вставить("ФормироватьПриОткрытии", Истина);
		ПараметрыФормы.Вставить("АдресМассивРасшифровок", ПоместитьВоВременноеХранилище(МассивДоступныхРасшифровок));
		ОткрытьФорму("Справочник.ПроизвольныеОтчеты.Форма.ФормаОтображенияОтчетаУправляемая", ПараметрыФормы);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсе(Команда)
	
	УстановитьЗначениеФлажка(ТаблицаМонитораПоказателей, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеФлажка(Источник, ЗначениеФлажка)
	
	ТекЭлементы = Источник.ПолучитьЭлементы();
	Для Каждого Элемент Из ТекЭлементы Цикл
		
		Если Элемент.СлужебнаяСтрока = 0 Тогда
			
			Элемент.Выбрано = ЗначениеФлажка;
			
		КонецЕсли;
		
		УстановитьЗначениеФлажка(Элемент, ЗначениеФлажка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	УстановитьЗначениеФлажка(ТаблицаМонитораПоказателей, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныйПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьСписокДоступныхВариантов()
	
	СписокДоступныхВариантов = ПолучитьИзВременногоХранилища(ТиповыеОтчетыУХ.ПолучитьСписокДоступныхВариантов(Объект.Ссылка));
	Элементы.СохраненнаяНастройка.СписокВыбора.ЗагрузитьЗначения(СписокДоступныхВариантов.ВыгрузитьЗначения());
	
	// Установим первый доступный вариант отчета, если он не заполнен
	Если СохраненнаяНастройка.Пустая() 
		И СписокДоступныхВариантов.Количество() <> 0 Тогда
		
		СохраненнаяНастройка = СписокДоступныхВариантов.Получить(0).Значение;
		ВосстановитьНастройки();
		
	КонецЕсли; 
	
	Если СписокДоступныхВариантов.Количество() <> 0 Тогда
		Элементы.СохраненнаяНастройка.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.СохраненнаяНастройка.АвтоОтметкаНезаполненного = Ложь;
		Элементы.СохраненнаяНастройка.ОтметкаНезаполненного = Ложь;
	КонецЕсли; 
		
КонецПроцедуры //

Функция ВернутьСтруктуруПараметровДляМонитораЭффективности()
	
	Возврат Новый Структура("ПериодОтчета, Периодичность, СмещениеПредыдущегоПериода, СценарийПлан, СценарийФакт, ПорогЗначимостиТренда, Состояние_ЛевыйДиапазон, Состояние_ПравыйДиапазон"
							, ПериодОтчета
							, ПериодОтчета.Периодичность
							, СмещениеПредыдущегоПериода
							, СценарийПлан
							, СценарийФакт
							, 0
							, 0
							, 0);
	
	
КонецФункции

// Заполняет колонку ТочностьПоказателя по данным 
// показателя в строке.
&НаСервере
Процедура ЗаполнитьТочностьПоказателя(ДеревоВход, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 10000 Тогда
		Возврат;
	КонецЕсли;
	СтрокиДерева = ДеревоВход.Строки;
	Для Каждого ТекСтрокиДерева Из СтрокиДерева Цикл
		ТекПоказатель = ТекСтрокиДерева.Показатель;
		Если ЗначениеЗаполнено(ТекПоказатель) Тогда
			Если ТипЗнч(ТекПоказатель) = Тип("СправочникСсылка.ПоказателиМонитораКлючевыхПоказателей") Тогда
				ТекСтрокиДерева.ТочностьПоказателя = ТекПоказатель.ТочностьОтображения;
			Иначе	
				ТекСтрокиДерева.ТочностьПоказателя = 5;			// Не показатель. По умолчанию 5 знаков.
			КонецЕсли;
		Иначе
			ТекСтрокиДерева.ТочностьПоказателя = 5;				// Пустое значение. По умолчанию 5 знаков.
		КонецЕсли;
		ЗаполнитьТочностьПоказателя(ТекСтрокиДерева, ГлубинаРекурсииВход + 1);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтчет(ИспользоватьДанныеРегистра = Ложь)
	
	Перем ДанныеРасшифровки;
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	СтруктураПараметров = Новый Структура("НастройкиКомпоновщика, ЗначенияНастроекПанелиПользователя"
										  , КомпоновщикНастроек.ПолучитьНастройки()
										  , ТиповыеОтчеты_УправляемыйРежимУХ.ПолучитьЗначенияНастроекПанелиПользователя(ТекОбъект, ЭтаФорма));
	
	Если ЭтоРасшифровка Тогда
		Справочники.ПроизвольныеОтчеты.ОбновитьОтчет(Результат, ТекОбъект, СтруктураПараметров, ДанныеРасшифровки, , , URLСхемы, ВнешнийКонтекст);
	Иначе
		Если Объект.ВидПроизвольногоОтчета = 1 Тогда
			ТекущаяТаблица = Неопределено;
			Если ИспользоватьДанныеРегистра Тогда
				
				ПараметрыОтчета = Новый Структура("ОтборСостояниеТревожное, ОтборСостояниеУдовлетворительное, ОтборСостояниеХорошее, ОтборТрендНулевой, ОтборТрендОтрицательный, ОтборТрендПоложительный"
												  , ОтборСостояниеТревожное
												  , ОтборСостояниеУдовлетворительное
												  , ОтборСостояниеХорошее
												  , ОтборТрендНулевой
												  , ОтборТрендОтрицательный
												  , ОтборТрендПоложительный);
				
				Если Модифицированность Тогда
					Справочники.ПроизвольныеОтчеты.ОбновитьОтчет(ТекущаяТаблица, ТекОбъект, СтруктураПараметров, , , ПараметрыОтчета, , ВнешнийКонтекст, , Ложь);
				Иначе
					Справочники.ПроизвольныеОтчеты.ОбновитьОтчет(ТекущаяТаблица, ТекОбъект, СохраненнаяНастройка, , , ПараметрыОтчета, , ВнешнийКонтекст, , Истина);
				КонецЕсли;
			Иначе
				Справочники.ПроизвольныеОтчеты.ОбновитьОтчетИспользуяДанныеРегистра(ТекущаяТаблица, ТекОбъект, СохраненнаяНастройка, ВнешнийКонтекст);
			КонецЕсли;
			ТекущаяТаблица.Колонки.Добавить("Выбрано", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			ЗаполнитьТочностьПоказателя(ТекущаяТаблица);
			ЗначениеВРеквизитФормы(ТекущаяТаблица, "ТаблицаМонитораПоказателей");
			ОтображатьГрафСхему = Истина;
			Попытка
				ГрафСхемаРезультат = Новый ГрафическаяСхема;
				ЛокальныеПараметры = Новый Структура("ПлановыйСценарий, СмещениеПредыдущегоПериода", СценарийПлан, СмещениеПредыдущегоПериода);
				ТабДокВывод = Новый ТабличныйДокумент;
				Справочники.ПроизвольныеОтчеты.ОбновитьОтчет(ТабДокВывод, Объект.Ссылка, , ДанныеРасшифровки, , ЛокальныеПараметры, URLСхемы, ВнешнийКонтекст, "_", , , ГрафСхемаРезультат);
				ГрафСхема = ГрафСхемаРезультат;
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось сформировать графическую схему по отчету %Отчет%: %ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Отчет%", Строка(Объект.Ссылка));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				ТабличноеПредставление.Очистить();
				ТабДокВывод = Справочники.ПроизвольныеОтчеты.ОтрисоватьГрафическоеПредставлениеМонитора(ТекущаяТаблица, Объект.ГруппировкаМонитора);
				ТабличноеПредставление.Вывести(ТабДокВывод);
				ОтображатьГрафСхему = Ложь;
			КонецПопытки;
			Элементы.ГрафСхема.Видимость				 = ОтображатьГрафСхему;
			Элементы.ТабличноеПредставление.Видимость	 = НЕ ОтображатьГрафСхему;
		Иначе
			Справочники.ПроизвольныеОтчеты.ОбновитьОтчет(Результат, ТекОбъект, СтруктураПараметров, ДанныеРасшифровки, , , URLСхемы, ВнешнийКонтекст);
		КонецЕсли;
	КонецЕсли;
	
	АдресДанныхРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
	
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеОтборовПоСостоянию()
	
	ОбновитьОтчет(Истина);
	
	ЭлементыСтроки = ТаблицаМонитораПоказателей.ПолучитьЭлементы();
	Для Каждого ЭлементСтроки Из ЭлементыСтроки Цикл
		Элементы.ТаблицаМонитораПоказателей.Развернуть(ЭлементСтроки.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДоступныхНастроек()
	
	Элементы.СохраненнаяНастройка.СписокВыбора.Очистить();
	Элементы.СохраненнаяНастройка.СписокВыбора.Добавить(Справочники.СохраненныеНастройки.ПустаяСсылка(), Нстр("ru = '(По умолчанию)'"));
	ТекущиеОтчеты = ТиповыеОтчетыУХ.ПолучитьТаблицуДоступныхВариантов(Объект.Ссылка, Перечисления.ТипыНастроек.НастройкиОтчета, ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
	
	Для Каждого Элемент Из ТекущиеОтчеты Цикл
		
		Элементы.СохраненнаяНастройка.СписокВыбора.Добавить(Элемент.Ссылка, Элемент.Наименование);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Настроить(Отбор, ТолькоСуществующие = Ложь)
	
	МассивПолейОтбора = Отбор;
	Справочники.ПроизвольныеОтчеты.Настроить(КомпоновщикНастроек, Отбор, ТолькоСуществующие);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьПоказательРасшифровки(АдресПоказателейРасшифровки, Расшифровка)
	
	Возврат Справочники.ПроизвольныеОтчеты.ВернутьРасшифровываемыйПоказатель(ПолучитьИзВременногоХранилища(АдресПоказателейРасшифровки), Расшифровка);
	
КонецФункции

&НаКлиенте
Процедура СохраненнаяНастройкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.СохраненныеНастройки.ФормаВыбора", Новый Структура("Отбор", Новый Структура("Владелец, НастраиваемыйОбъект", ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"), Объект.Ссылка)), Элемент);
	
КонецПроцедуры

&НаСервере
Процедура СкрытьЭлементыФормыПриРасшифровке()
	
	Элементы.ГруппаНастроек.Видимость                   = Ложь;
	Элементы.ПользовательскиеНастройкиОтборов.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПроизвольногоОтчетаПриИзменении(Элемент)
	
	ИзменитьВидимостьДляИсточников();
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыДляВызоваФормыРедактирования(РасширеннаяНастройка)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	Возврат Новый Структура("URLСхемы, КомпоновщикНастроек, URLОформлениеПоказателей, РасширеннаяНастройка, ОтрицательноеКрасным, URLЦветДиаграммы, НаименованиеОтчета"
							, URLСхемы
							, КомпоновщикНастроек
							, ПоместитьВоВременноеХранилище(ТекОБъект.ОформлениеПоказателей.Получить())
							, РасширеннаяНастройка
							, ТекОбъект.ОтрицательноеКрасным
							, ПоместитьВоВременноеХранилище(ТекОбъект.ЦветаДиаграммы.Получить())
							, Объект.Наименование);
	
КонецФункции

&НаСервере
Процедура ПеренестиНастройки(НастройкиКомпоновки)
	
	РедактированиеНастройкиПоУмолчанию = СохраненнаяНастройка.Пустая();
	
	Если НЕ РедактированиеНастройкиПоУмолчанию Тогда
		СостояниеМодифицированности = Модифицированность;
	КонецЕсли;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновки);
	Объект.ПредставлениеЭлементаОтчета = ТиповыеОтчетыУХ.ПолучитьПредставлениеПоЭлементуСтруктуры(НастройкиКомпоновки.Структура[0]);
	
	Если НЕ РедактированиеНастройкиПоУмолчанию Тогда
		Модифицированность = СостояниеМодифицированности;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьОтборов()
	
	Элементы.Отчет_СКД.Видимость                  = Объект.ВидПроизвольногоОтчета = 0;
	Элементы.Отчет_МониторЭффективности.Видимость = Объект.ВидПроизвольногоОтчета = 1;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРасшифровки(Адрес)
	Если ЭтоАдресВременногоХранилища(Адрес) Тогда
		Попытка
			НовыеДанныеРасшифровки = ПолучитьИзВременногоХранилища(Адрес);
			Если ТипЗнч(НовыеДанныеРасшифровки) = Тип("ТаблицаЗначений") Тогда
				ЗначениеВРеквизитФормы(НовыеДанныеРасшифровки, "Расшифровки");
			ИначеЕсли ТипЗнч(НовыеДанныеРасшифровки) = Тип("Структура") Тогда	
				Если НовыеДанныеРасшифровки.Свойство("ТаблицаРасшифровок") Тогда
					ЗначениеВРеквизитФормы(НовыеДанныеРасшифровки.ТаблицаРасшифровок, "Расшифровки");
				Иначе
					// Таблицы ТаблицаРасшифровок нет. Не производим обновление расшифровок.
				КонецЕсли;
			Иначе
				ЗначениеВРеквизитФормы(НовыеДанныеРасшифровки, "Расшифровки");
			КонецЕсли;
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось обновить данные расшифровки по причине: %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецПопытки;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить данные расшифровки. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

// Возвращает ссылку для выбранного элемента графической схемы ИмяЭлементаВход.
// Когда получить ссылку не удалось, возвращает пустую ссылку на справочник Цели.
&НаСервереБезКонтекста
Функция ПолучитьВыбранныйЭлементГрафическойСхемы(ИмяЭлементаВход)
	// Инициализация и преобразование имени элемента.
	РезультатФункции = Справочники.Цели.ПустаяСсылка();
	ЭлементИД = Сред(СтрЗаменить(ИмяЭлементаВход, "_", "-"), 2);
	Если СтроковыеФункцииКлиентсервер.ЭтоУникальныйИдентификатор(ЭлементИД) Тогда
		// Получение ссылки на элемент и вывод готового значения.
		Попытка                            
			ИдентификаторОбъекта = Новый УникальныйИдентификатор(ЭлементИД);
			СсылкаЦель = Справочники.Цели.ПолучитьСсылку(ИдентификаторОбъекта);
			Если СсылкаЦель.ПолучитьОбъект() <> Неопределено Тогда
				РезультатФункции = СсылкаЦель;
			Иначе
				СсылкаПоказатель = Справочники.ПоказателиМонитораКлючевыхПоказателей.ПолучитьСсылку(ИдентификаторОбъекта);
				Если СсылкаПоказатель.ПолучитьОбъект() <> Неопределено Тогда
					РезультатФункции = СсылкаПоказатель;
				Иначе
					ТекстСообщения = НСтр("ru = 'Не удалось определить элемент'");
					РезультатФункции = Справочники.Цели.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось определить элемент'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Справочники.Цели.ПустаяСсылка();
		КонецПопытки;
	Иначе
		РезультатФункции = Справочники.Цели.ПустаяСсылка();
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура ДополнительныеНастройки(Команда)
	
	Элементы.ДополнительныеНастройки.Пометка = НЕ Элементы.ДополнительныеНастройки.Пометка;
	ОтображатьДополнительныеНастройки             = Элементы.ДополнительныеНастройки.Пометка;
	
	УстановитьВидимостьПанелиНастройки();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеНастроекПанели(АдресДереваНастроек)
	
	НастройкиПанелиФормы = ПолучитьИзВременногоХранилища(АдресПараметровПанелиФормы);
	НастройкиПанелиФормы.Вставить("ДеревоНастроекСтандартныхСтраниц", ПолучитьИзВременногоХранилища(АдресДереваНастроек));
	АдресПараметровПанелиФормы = ПоместитьВоВременноеХранилище(НастройкиПанелиФормы, УникальныйИдентификатор);
	ОбработкаВидимостиПанелейОтчета(НастройкиПанелиФормы);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВидимостиПанелейОтчета(НастройкиПанелиФормы = Неопределено)
	
	Если НастройкиПанелиФормы = Неопределено Тогда
		ТекОбъект            = РеквизитФормыВЗначение("Объект");
		НастройкиПанелиФормы = ТиповыеОтчетыУХ.ПолучитьПараметрыПанелиПользователяОбъекта(ТекОбъект);
	КонецЕсли;
	ОтображатьКнопкуВызоваПанели = Ложь;
	УстановитьВидимостьПанелей(НастройкиПанелиФормы.ДеревоНастроекСтандартныхСтраниц.Строки, , ОтображатьКнопкуВызоваПанели);
	
КонецПроцедуры

Процедура УстановитьВидимостьПанелей(Строки, УстанавливаемаяВидимость = Неопределено, ОтображатьКнопкуВызоваПанели = Ложь)
	
	Для Каждого Элемент Из Строки Цикл
		
		Если Элемент.Имя = "Прогноз" ИЛИ Элемент.Имя = "Индикаторы" Тогда
			Продолжить;
		ИначеЕсли НЕ ОтображатьКнопкуВызоваПанели И (Элемент.Имя = "Параметры" ИЛИ Элемент.Имя = "Отбор" ИЛИ Элемент.Имя = "Сортировка") Тогда
			Если Элемент.Использование Тогда
				ОтображатьКнопкуВызоваПанели = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Элементы[Элемент.Имя].Видимость = ?(УстанавливаемаяВидимость = Неопределено, Элемент.Использование, УстанавливаемаяВидимость);
		
		Если Элемент.Строки.Количество() > 0 Тогда
			УстановитьВидимостьПанелей(Элемент.Строки, ?(Элемент.Использование, Неопределено, Ложь), ОтображатьКнопкуВызоваПанели);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	Перем СтандартнаяОбработка;
	
	РасшифровкаОбласти = Элементы.Результат.ТекущаяОбласть.Расшифровка;
	
	Если РасшифровкаОбласти <> Неопределено Тогда
		Если Объект.ВидПроизвольногоОтчета = 0 Тогда
			ОбработкаРасшифровкиАналитическогоОтчета(РасшифровкаОбласти, СтандартнаяОбработка);
		Иначе
			ОбработкаРасшифровкиМонитораЭффективности(РасшифровкаОбласти, СтандартнаяОбработка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьОперандПоказателя(ИмяПараметра, Показатель)
	
	Если ИмяПараметра = "ФактическоеЗначениеТекущегоПериода" Тогда
		Возврат Показатель["ИсточникЗначенияТекущегоПериода"];
	ИначеЕсли ИмяПараметра = "ФактическоеЗначениеПредыдущегоПериода" Тогда
		Возврат Показатель["ИсточникЗначенияПериодаСравнения"];
	ИначеЕсли ИмяПараметра = "ПлановоеЗначение" Тогда
		Возврат Показатель["ИсточникПлановогоЗначения"];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ЗаполнитьСтруктуруВнешнегоКонтекста(ИмяПараметра, Контекст)
	
	Если Контекст = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВозвращаемыйКонтекст = Новый Структура("Организация, ОсновнаяВалюта", Контекст.Организация, Контекст.ОсновнаяВалюта);
	
	Если ИмяПараметра = "ФактическоеЗначениеТекущегоПериода" Тогда
		ВозвращаемыйКонтекст.Вставить("ПериодОтчета", Контекст.БазовыйПериод);
		ВозвращаемыйКонтекст.Вставить("Сценарий",     Контекст.БазовыйСценарий);
	ИначеЕсли ИмяПараметра = "ФактическоеЗначениеПредыдущегоПериода" Тогда
		ВозвращаемыйКонтекст.Вставить("ПериодОтчета", Контекст.ПериодСравнения);
		ВозвращаемыйКонтекст.Вставить("Сценарий",     Контекст.БазовыйСценарий);
	ИначеЕсли ИмяПараметра = "ПлановоеЗначение" Тогда
		ВозвращаемыйКонтекст.Вставить("ПериодОтчета", Контекст.БазовыйПериод);
		ВозвращаемыйКонтекст.Вставить("Сценарий",     Контекст.ПлановыйСценарий);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ВозвращаемыйКонтекст.Вставить("УправляемыйРежим", Ложь);
	#Иначе
		ВозвращаемыйКонтекст.Вставить("УправляемыйРежим", Истина);
	#КонецЕсли
	ВозвращаемыйКонтекст.Вставить("ЧтениеНеактуальныхЗаписей", Ложь);
	
	Возврат ВозвращаемыйКонтекст;
	
КонецФункции

// Вовзращает имя операнда для расшифровки по выбранному пользователем
// полю таблицы ПолеВход
&НаКлиенте
Функция ПолучитьИмяОперандаПоВыбранномуПолюТаблицы(ПолеВход)
	РезультатФункции   = "ФактическоеЗначениеТекущегоПериода";
	Если ТипЗнч(ПолеВход) = Тип("ПолеФормы") Тогда
		ИмяПоля = ПолеВход.Имя;
		Если СокрЛП(ИмяПоля) = "ТаблицаМонитораПоказателейФактическоеЗначениеТекущегоПериода" Тогда
			РезультатФункции   = "ФактическоеЗначениеТекущегоПериода";
		ИначеЕсли СокрЛП(ИмяПоля) = "ТаблицаМонитораПоказателейФактическоеЗначениеПредыдущегоПериода" Тогда
			РезультатФункции   = "ФактическоеЗначениеПредыдущегоПериода";
		ИначеЕсли СокрЛП(ИмяПоля) = "ТаблицаМонитораПоказателейИзменениеАбсолютное" Тогда
			РезультатФункции   = "ФактическоеЗначениеПредыдущегоПериода";
		ИначеЕсли СокрЛП(ИмяПоля) = "ТаблицаМонитораПоказателейИзменениеОтносительное" Тогда
			РезультатФункции   = "ФактическоеЗначениеПредыдущегоПериода";
		ИначеЕсли СокрЛП(ИмяПоля) = "ТаблицаМонитораПоказателейПлановоеЗначение" Тогда
			РезультатФункции   = "ПлановоеЗначение";
		ИначеЕсли СокрЛП(ИмяПоля) = "ТаблицаМонитораПоказателейОтклонениеОтПланаАбсолютное" Тогда
			РезультатФункции   = "ПлановоеЗначение";
		ИначеЕсли СокрЛП(ИмяПоля) = "ТаблицаМонитораПоказателейОтклонениеОтПланаОтносительное" Тогда
			РезультатФункции   = "ПлановоеЗначение";
		Иначе
			РезультатФункции   = "ФактическоеЗначениеТекущегоПериода";				
		КонецЕсли;
	Иначе	
		РезультатФункции   = "ФактическоеЗначениеТекущегоПериода";
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура НастроитьКонтрольСостоянияПоказателей(Команда)
	
	ТекущаяПодписка = ВернутьСсылкуНаНастройкуРассылки(Объект, СохраненнаяНастройка);
	
	СписокПоказателей = ПолучитьИзВременногоХранилища(ВернутьСписокВыбранныхПоказателей());
	
	Если ТекущаяПодписка = Неопределено Тогда
		ОткрытьФорму("Справочник.АналитическаяПодписка.ФормаОбъекта", Новый Структура("МониторКлючевыхПоказателей, СохраненнаяНастройка, СписокПоказателей", Объект.Ссылка, СохраненнаяНастройка, СписокПоказателей));
	Иначе
		ОткрытьФорму("Справочник.АналитическаяПодписка.ФормаОбъекта", Новый Структура("Ключ, МониторКлючевыхПоказателей, СохраненнаяНастройка, СписокПоказателей", ТекущаяПодписка, Объект.Ссылка, СохраненнаяНастройка, СписокПоказателей));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВернутьСписокВыбранныхПоказателей()
	
	ДеревоЗначений = РеквизитФормыВЗначение("ТаблицаМонитораПоказателей");
	НайденныеСтроки = ДеревоЗначений.Строки.НайтиСтроки(Новый Структура("Выбрано", Истина), Истина);
	СписокЗначений = Новый СписокЗначений;
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		СписокЗначений.Добавить(Строка.Показатель);
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(СписокЗначений);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьСсылкуНаНастройкуРассылки(Знач Объект, Знач СохраненнаяНастройка)
	
	Запрос = Новый ЗАпрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АналитическаяПодписка.Ссылка
	|ИЗ
	|	Справочник.АналитическаяПодписка КАК АналитическаяПодписка
	|ГДЕ
	|	АналитическаяПодписка.РассылаемыйОбъект = &РассылаемыйОбъект
	|	И АналитическаяПодписка.НастройкаПанели = &НастройкаПанели
	|	И АналитическаяПодписка.ИнициацияРассылки = &ИнициацияРассылки";
	Запрос.УстановитьПараметр("РассылаемыйОбъект", ОБъект.Ссылка);
	Запрос.УстановитьПараметр("НастройкаПанели"  , СохраненнаяНастройка);
	Запрос.УстановитьПараметр("ИнициацияРассылки", Перечисления.ВидыИнициацииРассылки.КонтрольПоказателяМКП);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ТабличноеПредставлениеОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		Показатель    = Расшифровка.Показатель;
		ИмяОперанда   = "ФактическоеЗначениеТекущегоПериода";
		Операнд       = ВернутьОперандПоказателя(ИмяОперанда, Показатель);
		
		ОбработкаРасшифровкиПоказателяМКП(Элемент, Показатель, ИмяОперанда, Операнд, ВнешнийКонтекст, Расшифровка.ИспользуемаяИБ);
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.Цели") Тогда
		
		ОткрытьФорму("Отчет.Инициативы.ФормаОбъекта", Новый Структура("Цель", Расшифровка));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетДляПлановыхЗначений(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Раскрытие(Команда)
	ТекДанные = Элементы.ТаблицаМонитораПоказателей.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Показатель    = ТекДанные.Показатель;
		ТекЭлемент = Элементы.ТаблицаМонитораПоказателей.ТекущийЭлемент;
		ИмяОперанда = ПолучитьИмяОперандаПоВыбранномуПолюТаблицы(ТекЭлемент);
		Операнд       = ВернутьОперандПоказателя(ИмяОперанда, Показатель);
		Контекст      = ЗаполнитьСтруктуруВнешнегоКонтекста(ИмяОперанда, ВнешнийКонтекст);
		Контекст.Вставить("ИспользуемаяИБ", ТекДанные.ИспользуемаяИБ);
		ВнешнийКонтекст.Вставить("ИспользуемаяИБ", Контекст.ИспользуемаяИБ);
		АдресРезультатРасшифровки = ТиповыеОтчетыУХ.ВывестиОтчетПоМонитору(Показатель, ТиповыеОтчетыУХ.ВернутьТаблицыПоказателяМонитораКлючевыхПоказателей(Показатель, ВнешнийКонтекст));
		
		ПараметрыФормы = Новый Структура("АдресТабличныйДокумент", АдресРезультатРасшифровки);
		ОткрытьФорму("ОбщаяФорма.ФормаРасшифровкиПоказателяМонитораКлючевыхПоказателей", ПараметрыФормы);
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаТаблицы(Команда)
	ТекДанные = Элементы.ТаблицаМонитораПоказателей.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Показатель    = ТекДанные.Показатель;
		ТекЭлемент = Элементы.ТаблицаМонитораПоказателей.ТекущийЭлемент;
		ИмяОперанда = ПолучитьИмяОперандаПоВыбранномуПолюТаблицы(ТекЭлемент);
		Операнд       = ВернутьОперандПоказателя(ИмяОперанда, Показатель);
		Контекст      = ЗаполнитьСтруктуруВнешнегоКонтекста(ИмяОперанда, ВнешнийКонтекст);
		ТекИспользуемаяИБ = ТекДанные.ИспользуемаяИБ;
		ПустаяБаза = ПредопределенноеЗначение("Справочник.ВнешниеИнформационныеБазы.ПустаяСсылка");
		Если ТекИспользуемаяИБ = ПредопределенноеЗначение("Справочник.ВнешниеИнформационныеБазы.ТекущаяИБ") Тогда
			Контекст.Вставить("ИспользуемаяИБ", ПустаяБаза);
			ВнешнийКонтекст.Вставить("ИспользуемаяИБ", ПустаяБаза);
		Иначе	
			Контекст.Вставить("ИспользуемаяИБ", ТекДанные.ИспользуемаяИБ);
			ВнешнийКонтекст.Вставить("ИспользуемаяИБ", Контекст.ИспользуемаяИБ);
		КонецЕсли;
		ВывестиРасшифровку(Операнд, Контекст, Показатель);
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрафСхемаВыбор(Элемент)
	ТекЭлемент = Элемент.ТекущийЭлемент;
	Если ТекЭлемент <> Неопределено Тогда
		ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
		ВыбранныйЭлемент = ПолучитьВыбранныйЭлементГрафическойСхемы(ИмяЭлемента);
		Если ЗначениеЗаполнено(ВыбранныйЭлемент) Тогда
			Если ТипЗнч(ВыбранныйЭлемент) = Тип("СправочникСсылка.Цели") Тогда
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Цель", ВыбранныйЭлемент);
				ОткрытьФорму("Отчет.Инициативы.Форма.ФормаОтчета", СтруктураПараметров);
			ИначеЕсли ТипЗнч(ВыбранныйЭлемент) = Тип("СправочникСсылка.ПоказателиМонитораКлючевыхПоказателей") Тогда
				ИмяОкна = Элемент.Родитель.Имя;
				ИмяОперанда	 = "ФактическоеЗначениеТекущегоПериода";
				Контекст = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ВнешнийКонтекст);
				Контекст.Вставить("ИспользуемаяИБ", ПредопределенноеЗначение("Справочник.ВнешниеИнформационныеБазы.ПустаяСсылка"));
				Контекст.Вставить("ПериодОтчета", ПериодОтчета);
				Контекст.Вставить("БазовыйПериод", ПериодОтчета);
				БизнесАнализКлиентУХ.ВывестиОтчетПоДинамикеМонитора(ВыбранныйЭлемент, Контекст);
			Иначе	
				ПоказатьЗначение(, ВыбранныйЭлемент);
			КонецЕсли;
		Иначе
			// Не удалось получить элемент. Ничего не делаем.
		КонецЕсли;
	Иначе
		// Элемент не выбран. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

ВыполняетсяЗакрытие = Ложь;