Перем ОбъектОснование;

// Загружает в таблицы расшифровок на форме данные из информационной базы.
&НаСервере
Процедура СчитатьРасшифровкиОбъектомИзИнформационнойБазы()
	// Получение исходных данных из информационной базы.
	СтруктураТаблицРасшифровки = БизнесАнализСерверУХ.ПолучитьСтруктуруТаблицРасшифровкиОбъектомИнформационнойБазыПоВладельцу(Объект.Ссылка);
	// Таблица расшифровок объектом.
	ВыгрузкаРасшифровок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураТаблицРасшифровки, "РасшифровкиОбъектом", Новый ТаблицаЗначений);
	РасшифровкиОбъектомИнформационнойБазы.Загрузить(ВыгрузкаРасшифровок);
	// Таблица параметров расшифровок.
	ВыгрузкаПараметров = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураТаблицРасшифровки, "ПараметрыРасшифровки", Новый ТаблицаЗначений);
	ПараметрыРасшифровкиОбъектом.Загрузить(ВыгрузкаПараметров);
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьДляИсточников()
	
	Элементы.ДляБланка.Видимость 			= Объект.ВидПроизвольногоОтчета = 2;
	Элементы.ДляПанелиИндикаторов.Видимость = Объект.ВидПроизвольногоОтчета = 1;
	Элементы.ДляСКД.Видимость               = Объект.ВидПроизвольногоОтчета = 0;
	
КонецПроцедуры


&НаСервере
Процедура ИнициализацияОтчета()
	
	URLСхемы = ТиповыеОтчетыУХ.СформироватьСхемуКомпоновкиДанных(Объект, УникальныйИдентификатор);
	Параметры.Свойство("ЗначениеКопирования", ОбъектОснование);
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	ПараметрыПанелиПользователя = ТиповыеОтчетыУХ.ПолучитьПараметрыПанелиПользователяОбъекта(ТекОбъект);
	АдресПараметровПанелиФормы = ПоместитьВоВременноеХранилище(ПараметрыПанелиПользователя, УникальныйИдентификатор);
	
	ТиповыеОтчетыУХ.ИнициализироватьКомпоновщикНастроек(ТекОбъект);
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	
	Попытка
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
	Исключение
		
		СообщениеПользователю = Новый СообщениеПользователю;
		
		СтрокаШаблона = Нстр("ru = 'При инициализации отчета возникла ошибка:
		|%1'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда			
			СообщениеПользователю.Текст = СтрШаблон(СтрокаШаблона, ОписаниеОшибки());
		КонецЕсли;
		
		СообщениеПользователю.Сообщить();
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокВыбораТипаИсточника.Добавить(Новый ОписаниеТипов("СправочникСсылка.Запросы"), Нстр("ru = 'Запрос'"));
	СписокВыбораТипаИсточника.Добавить(Новый ОписаниеТипов("СправочникСсылка.ИсточникиДанныхДляРасчетов"), Нстр("ru = 'Источники данных'"));
	
	ИнициализацияОтчета();
	// Отчет получен копированием
	Если ЗначениеЗаполнено(ОбъектОснование) Тогда
		
		ВосстановитьНастройкиИзОтчетаИсточникаПриКопировании(ОбъектОснование);
		
	Иначе
		
		ОтчетОбъект = РеквизитФормыВЗначение("Объект");
		Вн_ОформлениеПоказателей = ОтчетОбъект.ОформлениеПоказателей.Получить();
		Если ТипЗнч(Вн_ОформлениеПоказателей) = Тип("ТаблицаЗначений") Тогда
			ЗначениеВРеквизитФормы(Вн_ОформлениеПоказателей, "ОформлениеПоказателей");
		КонецЕсли;
		
		Вн_Расшифровки = ОтчетОбъект.Расшифровки.Получить();
		Если ТипЗнч(Вн_Расшифровки) = Тип("ТаблицаЗначений") Тогда
			
			Попытка
				Если Вн_Расшифровки.Колонки.Найти("ИсточникДанных") <> Неопределено Тогда
					
					Для Каждого Строка ИЗ Вн_Расшифровки ЦИкл
						НоваяСтрока = Расшифровки.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
						НОваяСтрока.ПоказательМонитора = Строка.ИсточникДанных;
					КонецЦикла;
				Иначе
					ЗначениеВРеквизитФормы(Вн_Расшифровки, "Расшифровки");
				КонецЕсли;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		ЦветаДиаграммы        = ОтчетОбъект.ЦветаДиаграммы.Получить();
		НастройкиСхемыКомпоновкиДанныхПоУмолчанию = ОтчетОбъект.НастройкиСхемыКомпоновкиДанныхПоУмолчанию.Получить();
		Если НастройкиСхемыКомпоновкиДанныхПоУмолчанию <> Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСхемыКомпоновкиДанныхПоУмолчанию);
		КонецЕсли;

	КонецЕсли;
	
	ИзменитьВидимостьДляИсточников();
	ОтобразитьВидОтчетаГрафически();
	СчитатьРасшифровкиОбъектомИзИнформационнойБазы();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиИзОтчетаИсточникаПриКопировании(ОтчетОбъект)
	
	Вн_ОформлениеПоказателей = ОтчетОбъект.ОформлениеПоказателей.Получить();
	Если ТипЗнч(Вн_ОформлениеПоказателей) = Тип("ТаблицаЗначений") Тогда
		ЗначениеВРеквизитФормы(Вн_ОформлениеПоказателей, "ОформлениеПоказателей");
	КонецЕсли;
	
	Вн_Расшифровки = ОтчетОбъект.Расшифровки.Получить();
	Если ТипЗнч(Вн_Расшифровки) = Тип("ТаблицаЗначений") Тогда
		
		Попытка
			ЗначениеВРеквизитФормы(Вн_Расшифровки, "Расшифровки");
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	ЦветаДиаграммы        = ОтчетОбъект.ЦветаДиаграммы.Получить();
	НастройкиСхемыКомпоновкиДанныхПоУмолчанию = ОтчетОбъект.НастройкиСхемыКомпоновкиДанныхПоУмолчанию.Получить();
	Если НастройкиСхемыКомпоновкиДанныхПоУмолчанию <> Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСхемыКомпоновкиДанныхПоУмолчанию);
	КонецЕсли;
	
	ЗначенияНастроекПанелиОтчета = ОтчетОбъект.ЗначенияНастроекПанелиПользователя.Получить();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПроизвольногоОтчетаПриИзменении(Элемент)
	
	ИзменитьВидимостьДляИсточников();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.НастройкиСхемыКомпоновкиДанныхПоУмолчанию = Новый ХранилищеЗначения(КомпоновщикНастроек.ПолучитьНастройки());
	ТекущийОбъект.ЦветаДиаграммы                            = Новый ХранилищеЗначения(ЦветаДиаграммы);
	ТекущийОбъект.Расшифровки                               = Новый ХранилищеЗначения(РеквизитФормыВЗначение("Расшифровки"));
	ТекущийОбъект.ПараметрыПанелиПользователя               = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресПараметровПанелиФормы));
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВариантСхемы(Команда)
	
	Если Параметры.Ключ.Пустая() ИЛИ Модифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ЗаписатьПередОткрытием", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Для редактирования схемы нужно сохранить отчет. Сохранить?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
		
	ОткрытьФормуНастройкиСтруктуры();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаписатьПередОткрытием(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        Если НЕ Записать() Тогда
            ПоказатьПредупреждение(, НСтр("ru = 'Не удалось сохранить отчет'"));
            Возврат;
        КонецЕсли;
    Иначе
        Возврат;
    КонецЕсли;
        
    ОткрытьФормуНастройкиСтруктуры();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиСтруктуры()
	
	ПараметрыФормы = ПодготовитьПараметрыДляВызоваФормыРедактирования(Ложь);
    ОткрытьФорму("ОбщаяФорма.ФормаНастройкиСтруктурыОтчета_Управляемая", ПараметрыФормы,  ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНастройкиРасшифровки(Команда)
	
	Если Объект.ВидПроизвольногоОтчета = 1 Тогда
		
		ПоказателиМонитора = Новый СписокЗначений;
		
		Для Каждого Элемент Из Объект.ИсточникиДанных Цикл
			ПоказателиМонитора.Добавить(Элемент.ИсточникДанных);
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КомпоновщикНастроек", КомпоновщикНастроек);
		ПараметрыФормы.Вставить("АдресРасшифровки", ВернутьАдресРасшифровки());
		ПараметрыФормы.Вставить("АдресТаблицыРасшифровкиОбъектом", ВернутьАдресТаблицыРасшифровкиОбъектом());
		ПараметрыФормы.Вставить("АдресПараметровРасшифровкиОбъектом", ВернутьАдресПараметровРасшифровкиОбъектом());
		ПараметрыФормы.Вставить("ПоказателиМонитора", ПоказателиМонитора);
		ОткрытьФорму("ОбщаяФорма.ФормаНастройкиРасшифровкиОтчетов_Управляемая", ПараметрыФормы, ЭтаФорма);
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КомпоновщикНастроек", КомпоновщикНастроек);
		ПараметрыФормы.Вставить("АдресРасшифровки", ВернутьАдресРасшифровки());
		ПараметрыФормы.Вставить("АдресТаблицыРасшифровкиОбъектом", ВернутьАдресТаблицыРасшифровкиОбъектом());
		ПараметрыФормы.Вставить("АдресПараметровРасшифровкиОбъектом", ВернутьАдресПараметровРасшифровкиОбъектом());
		ОткрытьФорму("ОбщаяФорма.ФормаНастройкиРасшифровкиОтчетов_Управляемая", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНастройкиПанели(Команда)
	
	Результат = Неопределено;

	ПараметрыФормы = Новый Структура("АдресНастроекПанели", АдресПараметровПанелиФормы);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбновитьПараметрыПанели", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкиПараметровПанелиПользователя_Управляемая", 
					ПараметрыФормы, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьПараметрыПанели(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат <> Неопределено Тогда
        ОбновитьПараметрыПанели(Результат);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоступностьЭлементаНастройкиВывода()
	
	Элементы.ОтображатьВВидеСхемы.Доступность = Объект.ОтображатьЦели;
	Если Объект.ОтображатьВВидеСхемы И НЕ Объект.ОтображатьЦели Тогда		
		Объект.ОтображатьВВидеСхемы = Ложь;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыПанели(Результат)
	
	ПараметрыПанелиПользователя = ПолучитьИзВременногоХранилища(АдресПараметровПанелиФормы);
	
	Если НЕ ПустаяСтрока(АдресПараметровПанелиФормы) Тогда
		УдалитьИзВременногоХранилища(АдресПараметровПанелиФормы);
	КонецЕсли;
	
	ДанныеДерева = ПолучитьИзВременногоХранилища(Результат);	
	ПараметрыПанелиПользователя.Вставить("ДеревоНастроекСтандартныхСтраниц", ДанныеДерева);
	
	АдресПараметровПанелиФормы = ПоместитьВоВременноеХранилище(ПараметрыПанелиПользователя, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыДляВызоваФормыРедактирования(РасширеннаяНастройка)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	Возврат Новый Структура("URLСхемы, КомпоновщикНастроек, URLОформлениеПоказателей, РасширеннаяНастройка, ОтрицательноеКрасным, URLЦветДиаграммы, НаименованиеОтчета"
							, URLСхемы
							, КомпоновщикНастроек
							, ПоместитьВоВременноеХранилище(ТекОБъект.ОформлениеПоказателей.Получить())
							, Объект.РасширеннаяНастройка
							, ТекОбъект.ОтрицательноеКрасным
							, ПоместитьВоВременноеХранилище(ТекОбъект.ЦветаДиаграммы.Получить())
							, Объект.Наименование);
	
КонецФункции

&НаСервере
// Функция возвращает адрес сохраненной таблицы расшифровки для передачи в форму редактирования настроек расшифровки.
Функция ВернутьАдресРасшифровки()
	
	ТаблицаРасшифровки = Расшифровки.Выгрузить();
	ТаблицаРасшифровки.Колонки.Добавить("ЧислоРасшифровываемыхПолей", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10, 0));
	Возврат ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
	
КонецФункции

// Функция возвращает адрес сохраненной таблицы расшифровки для передачи в форму редактирования настроек расшифровки.
&НаСервере
Функция ВернутьАдресТаблицыРасшифровкиОбъектом()
	РезультатФункции = Новый ТаблицаЗначений;
	ТабРасшифровкиОбъектомИнформационнойБазы = РасшифровкиОбъектомИнформационнойБазы.Выгрузить();
	РезультатФункции = ПоместитьВоВременноеХранилище(ТабРасшифровкиОбъектомИнформационнойБазы, УникальныйИдентификатор);
	Возврат РезультатФункции;
КонецФункции

// Функция возвращает адрес сохраненной таблицы параметров расшифровки для передачи в форму редактирования настроек расшифровки.
&НаСервере
Функция ВернутьАдресПараметровРасшифровкиОбъектом()
	РезультатФункции = Новый ТаблицаЗначений;
	ТабПараметрыРасшифровкиОбъектом = ПараметрыРасшифровкиОбъектом.Выгрузить();
	РезультатФункции = ПоместитьВоВременноеХранилище(ТабПараметрыРасшифровкиОбъектом, УникальныйИдентификатор);
	Возврат РезультатФункции;
КонецФункции

&НаСервере
Процедура ОтобразитьВидОтчетаГрафически()
	
	Если Объект.ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.Таблица Тогда
		Элементы.ОтображениеВидаОтчета.Картинка = БиблиотекаКартинок.Отчет_Пример;
	ИначеЕсли Объект.ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.КроссТаблица Тогда
		Элементы.ОтображениеВидаОтчета.Картинка = БиблиотекаКартинок.КроссТаблица_Пример;
	ИначеЕсли Объект.ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.Диаграмма Тогда
		Элементы.ОтображениеВидаОтчета.Картинка = БиблиотекаКартинок.Диаграмма_Пример;
	Иначе
		Элементы.ОтображениеВидаОтчета.Картинка = БиблиотекаКартинок.НеизвестныйВидОтчета;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ФиксированнаяСтруктура") И ВыбранноеЗначение.Свойство("НастройкиОтчета") Тогда
		ПеренестиНастройки(ВыбранноеЗначение);
		Объект.РасширеннаяНастройка = ВыбранноеЗначение.РасширеннаяНастройка;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиНастройки(ВыбранноеЗначение)
	
	НастройкиКомпоновки=ВыбранноеЗначение.НастройкиОтчета;
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновки);
	Если ЗначениеЗаполнено(НастройкиКомпоновки.Структура) Тогда
		Объект.ПредставлениеЭлементаОтчета = ТиповыеОтчетыУХ.ПолучитьПредставлениеПоЭлементуСтруктуры(НастройкиКомпоновки.Структура[0]);
	Иначе
		Объект.ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.ПустаяСсылка();
	КонецЕсли;
	ОтобразитьВидОтчетаГрафически();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчет(Команда)
	
	Если Параметры.Ключ.Пустая() ИЛИ Модифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработатьЗаписьОтчета", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Для продолжения нужно записать изменения в отчете. Записать?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ОткрытьФормуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьЗаписьОтчета(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ Записать() Тогда
        ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Не удалось записать отчет'"));
        Возврат;
    КонецЕсли;
        
    ОткрытьФормуОтчета();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтчета()
	
	ПараметрыФормы = Новый Структура("Ключ, ФормироватьПриОткрытии", Параметры.Ключ, Истина);
	Если Объект.ВидПроизвольногоОтчета = 0 
		ИЛИ Объект.ВидПроизвольногоОтчета = 1 Тогда
		ОткрытьФорму("Справочник.ПроизвольныеОтчеты.Форма.ФормаОтображенияОтчетаУправляемая", ПараметрыФормы);
	Иначе
		ПараметрыФормы = Новый Структура("Бланк,Ключ",Объект.БланкИсточник,Параметры.Ключ);	   		
		ОткрытьФорму("Обработка.АналитическийБланк.Форма.ФормаОтчета", ПараметрыФормы,,Истина);		
	КонецЕсли;	
				
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыбранаСохраненнаяНастройка" Тогда
		
		Если Параметр.УИДФормы = УникальныйИдентификатор Тогда
			СохраненнаяНастройка = Параметр.СохраненнаяНастройка;
			СохранитьНастройки();
			Записать();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СписокРасшифровокОбновлен" Тогда
		Если Источник.ВладелецФормы = ЭтаФорма Тогда
			ОбновитьРасшифровки(Параметр);
			Записать();
		Иначе
			// Расшифровка вызвана для другой формы. Пропускаем.
		КонецЕсли;
	ИначеЕсли (ИмяСобытия = "ЗаписанИсточникДанных" ИЛИ ИмяСобытия = "ЗаписанСправочникЗапрос")
		И Параметр.ПотребительРасчета=Объект.Ссылка Тогда
		
		ПриИзмененииИсточникаДанных();
				
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьРасшифровки(Адрес)
	
	Попытка
		Если ЭтоАдресВременногоХранилища(Адрес) Тогда
			ЗначениеХранилища = ПолучитьИзВременногоХранилища(Адрес);
			Если ТипЗнч(ЗначениеХранилища) = Тип("ТаблицаЗначений") Тогда
				ЗначениеВРеквизитФормы(ЗначениеХранилища, "Расшифровки");
			ИначеЕсли ТипЗнч(ЗначениеХранилища) = Тип("Структура") Тогда
				// Расшифровки аналитическим отчетом.
				ТаблицаРасшифровок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначениеХранилища, "ТаблицаРасшифровок", Новый ТаблицаЗначений);
				ЗначениеВРеквизитФормы(ТаблицаРасшифровок, "Расшифровки");
				// Расшифровка объектом.
				РасшифровкиОбъектом = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначениеХранилища, "РасшифровкаОбъектом", Новый ТаблицаЗначений);
				РасшифровкиОбъектомИнформационнойБазы.Очистить();
				Для Каждого ТекРасшифровкиОбъектом Из РасшифровкиОбъектом Цикл	
					НоваяСтрока = РасшифровкиОбъектомИнформационнойБазы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекРасшифровкиОбъектом);
				КонецЦикла;
				// Параметры расшифровки объектом.
				ТабПараметрыРасшифровкиОбъектом = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначениеХранилища, "ПараметрыРасшифровкиОбъектом", Новый ТаблицаЗначений);
				ПараметрыРасшифровкиОбъектом.Очистить();
				Для Каждого ТекПараметрыРасшифровкиОбъектом Из ТабПараметрыРасшифровкиОбъектом Цикл
					НоваяСтрока = ПараметрыРасшифровкиОбъектом.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекПараметрыРасшифровкиОбъектом);
				КонецЦикла;
			Иначе
				ТекстСообщения = НСтр("ru = 'Неизвестный вариант расшифровки: %ЗначениеРасшифровки%. Операция отменена.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗначениеРасшифровки%", Строка(ЗначениеХранилища));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось получить адрес таблицы расшифровок. Операция отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'При получении таблиц расшифровки произошли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОбъект = СохраненнаяНастройка.ПолучитьОбъект();
	НастройкаОбъект.ХранилищеНастроек   = Новый ХранилищеЗначения(ПолучитьСтруктуруНастроек());
	НастройкаОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруНастроек(ВозвращатьАдрес = Ложь)
	
	СтруктураНастроек = Новый Структура;
	
	Для Каждого Реквизит Из Объект.Ссылка.Метаданные().Реквизиты Цикл
		
		Если Реквизит.Имя = "СхемаКомпоновкиДанных" 
		 ИЛИ Реквизит.Имя = "ДатаВерсииИсточникаДанных"
		 ИЛИ Реквизит.Имя = "ИсточникДанныхОтчета"
		 ИЛИ Реквизит.Имя = "Описание"
		 ИЛИ Реквизит.Имя = "ПодлежитПередачеВПодчиненныеУзлыПриОбменеПоОрганизации"
		 ИЛИ Реквизит.Имя = "ОформлениеПоказателей"
		 ИЛИ Реквизит.Имя = "Расшифровки"
		 ИЛИ Реквизит.Имя = "ЗначенияНастроекПанелиПользователя"
		 ИЛИ Реквизит.Имя = "ПараметрыПанелиПользователя"
		 ИЛИ Реквизит.Имя = "ЦветаДиаграммы" 
		 ИЛИ Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураНастроек.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);
		
	КонецЦикла;
	
	СтруктураНастроек.Вставить("ОформлениеПоказателей", Новый ХранилищеЗначения(РеквизитФормыВЗначение("ОформлениеПоказателей")));
	СтруктураНастроек.Вставить("Расшифровки"          , Новый ХранилищеЗначения(РеквизитФормыВЗначение("Расшифровки")));
	СтруктураНастроек.Вставить("ЦветаДиаграммы"       , Новый ХранилищеЗначения(ЦветаДиаграммы));
	СтруктураНастроек.Вставить("НастройкиКомпоновки"  , КомпоновщикНастроек.ПолучитьНастройки());
	СтруктураНастроек.Вставить("ЗначенияНастроекПанелиОтчета", ТиповыеОтчеты_УправляемыйРежимУХ.ПолучитьЗначенияНастроекПанелиПользователя(Объект, ЭтаФорма));
	СтруктураНастроек.Вставить("ПараметрыПанелиПользователя",  ПолучитьИзВременногоХранилища(АдресПараметровПанелиФормы));
	
	Если ВозвращатьАдрес Тогда
		Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек);
	Иначе
		Возврат СтруктураНастроек;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииИсточникаДанных()
	
	ИнициализацияОтчета();
	ОтобразитьВидОтчетаГрафически();

КонецПроцедуры // ПриИзмененииИсточникаДанных()

// Выполняет запись расшифровок текущего объекта в справочник РасшифровкиАналитическихОтчетов.
&НаСервере
Процедура ЗаписатьРасшифровкуОбъектом()
	ВыгрузкаРасшифровки = РасшифровкиОбъектомИнформационнойБазы.Выгрузить();
	ВыгрузкаПараметровРасшифровки = ПараметрыРасшифровкиОбъектом.Выгрузить();
	БизнесАнализСерверУХ.ЗаписатьРасшифровкуОбъектом(Объект.Ссылка, ВыгрузкаРасшифровки, ВыгрузкаПараметровРасшифровки, Объект.Наименование);
КонецПроцедуры

&НаКлиенте
Процедура ИсточникДанныхОтчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru = 'Аналитический отчет еще не записан.
		|Выбор источника возможен только после записи.
		|Записать?'");
		
		СтандартнаяОбработка = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ИсточникДанныхОтчетаНачалоВыбора",ЭтотОбъект,Элемент);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИсточникДанныхОтчетаНачалоВыбора(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;		
	
	Если Ответ <> КодВозвратаДиалога.ОК Тогда        
        Возврат;        
    КонецЕсли;
    
    Записать(); 	
	//ОткрытьФорму("Справочник.ИсточникиДанныхДляРасчетов.ФормаВыбора",,ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникДанныхОтчетаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ИсточникДанныхОтчета) Тогда
		
		ПриИзмененииИсточникаДанных();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОтображатьЦелиПриИзменении(Элемент)
	
	ДоступностьЭлементаНастройкиВывода();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДоступностьЭлементаНастройкиВывода();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникиДанныхПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	// Проверим наличие дубликата показателя в таблице.
	ТекДанные = Элементы.ИсточникиДанных.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекИсточник = ТекДанные.ИсточникДанных;
		Если ЗначениеЗаполнено(ТекИсточник) Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ИсточникДанных", ТекИсточник);
			НайденныеСтроки = Объект.ИсточникиДанных.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Показатель %Источник% уже присутствует в таблице. Значение показателя очищено.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Источник%", Строка(ТекИсточник));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				ТекДанные.ИсточникДанных = ПредопределенноеЗначение("Справочник.ПоказателиМонитораКлючевыхПоказателей.ПустаяСсылка");
			Иначе
				// Проверка пройдена. Выполяем далее.
			КонецЕсли;
		Иначе
			// Показатель пустой. Не проверяем на дубликат.
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ОткрытьФорму("Справочник.ПоказателиМонитораКлючевыхПоказателей.ФормаВыбора"
				, Новый Структура("ЗакрыватьПриВыборе", Ложь)
				, Элементы.ИсточникиДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникиДанныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Объект.ИсточникиДанных.НайтиСтроки(Новый Структура("ИсточникДанных", ВыбранноеЗначение)).Количество() > 0 Тогда
		
		СтрокаШаблона = Нстр("ru = 'Показатель %1 уже присутствует в таблице'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда			
			Сообщить(СтрШаблон(СтрокаШаблона, ВыбранноеЗначение));
		КонецЕсли;

	Иначе
		НоваяСтрока = Объект.ИсточникиДанных.Добавить();
		НоваяСтрока.ИсточникДанных = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВнешнююИБ(Команда)
	
	Если Элементы.ИсточникиДанных.ВыделенныеСтроки.Количество() > 0 Тогда
		
		РезультатВыбора = Неопределено;
		
		Оповещение = Новый ОписаниеОповещения("ВыбратьВнешнююИБЗавершение", ЭтотОбъект);
		ОткрытьФорму("Справочник.ВнешниеИнформационныеБазы.ФормаВыбора",
						,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВнешнююИБЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    РезультатВыбора = Результат;
    Если РезультатВыбора <> Неопределено Тогда
        Для Каждого Элемент Из Элементы.ИсточникиДанных.ВыделенныеСтроки Цикл
            Элементы.ИсточникиДанных.ДанныеСтроки(Элемент).ВнешняяИБ = РезультатВыбора;
        КонецЦикла;
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаписатьРасшифровкуОбъектом();
КонецПроцедуры



