
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Параметры.Ключ.Пустая() Тогда
		
		Запрос = Новый Запрос;
		ЗАпрос.Текст = 
		"ВЫБРАТЬ
		|	АналитическаяПодпискаСписокРассылки.Организация,
		|	АналитическаяПодпискаСписокРассылки.Пользователь,
		|	ВЫБОР
		|		КОГДА АналитическаяПодпискаСписокРассылки.Пользователь ССЫЛКА Справочник.РолиКонтактныхЛиц
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДоступностьПоляОрганизации
		|ИЗ
		|	Справочник.АналитическаяПодписка.СписокРассылки КАК АналитическаяПодпискаСписокРассылки
		|ГДЕ
		|	АналитическаяПодпискаСписокРассылки.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(), "ПредставлениеСпискаРассылки");
		
	КонецЕсли;
	
	Если НЕ Параметры.МониторКлючевыхПоказателей.Пустая() Тогда
		
		Объект.ИнициацияРассылки = Перечисления.ВидыИнициацииРассылки.КонтрольПоказателяМКП;
		Объект.РассылаемыйОбъект = Параметры.МониторКлючевыхПоказателей;
		Объект.НастройкаПанели   = Параметры.СохраненнаяНастройка;
		
		МассивУдаляемыхСтрок = Новый Массив;
		СписокПоказателей = Параметры.СписокПоказателей;
		
		Для Каждого Элемент Из Объект.КонтролируемыеПоказатели Цикл
			
			ТекЭлемент = СписокПоказателей.НайтиПоЗначению(Элемент.Показатель);
			Если ТекЭлемент <> Неопределено Тогда
				ТекЭлемент.Пометка = Истина;
			Иначе
				МассивУдаляемыхСтрок.Добавить(Элемент);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Элемент Из СписокПоказателей Цикл
			Если НЕ Элемент.Пометка Тогда
				НоваяСтрока = Объект.КонтролируемыеПоказатели.Добавить();
				НоваяСтрока.Показатель = Элемент.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Элемент Из МассивУдаляемыхСтрок Цикл
			
			Объект.КонтролируемыеПоказатели.Удалить(Элемент);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СписокВыбораВидаПользователя.Добавить(Новый ОписаниеТипов("СправочникСсылка.Пользователи"), НСтр("ru = 'Пользователь'"));
	СписокВыбораВидаПользователя.Добавить(Новый ОписаниеТипов("СправочникСсылка.РолиКонтактныхЛиц"), НСтр("ru = 'Роль контактного лица'"));
	
	ЗаполнитьТаблицуПреобразованийЗначений();
	
	ПредставлениеРегламентногоЗадания = ПолныеПраваУХ.ПолучитьПредставлениеРегламентногоЗадания(Объект.РегламентноеЗадание, ВыполнятьРегламентноеЗадание);
	
	Значение_ИнициацияРегламентноеЗадание = Перечисления.ВидыИнициацииРассылки.РегламентноеЗадание;
	
	ОтображениеШаблона.УстановитьHTML(Объект.ШаблонСообщения, Новый Структура);
	
	СписокТиповРассылаемогоОтчета.Добавить(Справочники.ПанелиОтчетов.ПустаяСсылка());
	СписокТиповРассылаемогоОтчета.Добавить(Справочники.ПроизвольныеОтчеты.ПустаяСсылка());
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	СтруктураОтбора = ТекущийОбъект.ХранилищеЗначенийОтбора.Получить();
	Если ТипЗнч(СтруктураОтбора) = Тип("Структура") Тогда
		СтруктураОтбора.Свойство("Организация", Значение_Организация);
		СтруктураОтбора.Свойство("Период", Значение_Период);
		СтруктураОтбора.Свойство("Сценарий", Значение_Сценарий);
		СтруктураОтбора.Свойство("Валюта", Значение_Валюта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеДоступностью();
	ПривестиРеквизитыОтбораКТипуЗначения("Значение_Организация", Объект.ВидСравнения_Организация);
	ПривестиРеквизитыОтбораКТипуЗначения("Значение_Период", Объект.ВидСравнения_Период);
	ПривестиРеквизитыОтбораКТипуЗначения("Значение_Сценарий", Объект.ВидСравнения_Сценарий);
	ПривестиРеквизитыОтбораКТипуЗначения("Значение_Валюта", Объект.ВидСравнения_Валюта);
	Элементы.АналитическаяПанель.ОграничениеТипа        = Новый ОписаниеТипов("СправочникСсылка.ПанелиОтчетов");
	Элементы.МониторКлючевыхПоказателей.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПроизвольныеОтчеты");
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.СписокРассылки.Очистить();
	Для Каждого Элемент Из ПредставлениеСпискаРассылки Цикл
		
		ЗаполнитьЗначенияСвойств(ТекущийОбъект.СписокРассылки.Добавить(), Элемент);
		
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура("Организация, Период, Сценарий, Валюта"
									, Значение_Организация
									, Значение_Период
									, Значение_Сценарий
									, Значение_Валюта);
									
	ТекущийОбъект.ХранилищеЗначенийОтбора = Новый ХранилищеЗначения(СтруктураОтбора);
	
	ОтображениеШаблона.ПолучитьHTML(ТекущийОбъект.ШаблонСообщения, Новый Структура);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ.
//

&НаКлиенте
Процедура ИнициацияРассылкиПриИзменении(Элемент)
	
	ИзменитьВидимостьСтраницНастройки();
	Объект.РассылаемыйОбъект = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСпискаРассылкиПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТД = ПредставлениеСпискаРассылки.НайтиПоИдентификатору(Элементы.ПредставлениеСпискаРассылки.ТекущаяСтрока);
	
	Если НЕ ЗначениеЗаполнено(ТД.Пользователь) Тогда
		
		РезультатВыбора = Неопределено;

		Оповещение = Новый ОписаниеОповещения("ПредставлениеСпискаРассылкиЗавершение", ЭтотОбъект, Новый Структура("ТД", ТД));
		ПоказатьВыборИзМеню(Оповещение, СписокВыбораВидаПользователя, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСпискаРассылкиЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    ТД = ДополнительныеПараметры.ТД;    
    
    РезультатВыбора = ВыбранныйЭлемент;
    Если РезультатВыбора <> Неопределено Тогда
        ТД.Пользователь = РезультатВыбора.Значение.ПривестиЗначение(ТД.Пользователь);
    Иначе
        СтандартнаяОбрабтка = Ложь;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСпискаРассылкиПользовательПриИзменении(Элемент)
	
	ТД = ПредставлениеСпискаРассылки.НайтиПоИдентификатору(Элементы.ПредставлениеСпискаРассылки.ТекущаяСтрока);
	ТД.ДоступностьПоляОрганизации = СписокВыбораВидаПользователя[1].Значение.СодержитТип(ТипЗнч(ТД.Пользователь));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнятьРегламентноеЗаданиеПриИзменении(Элемент)
	
	ВыполнятьРегламентноеЗадание = ИзменитьРазрешениеНаЗапускРегламентногоЗадания(Объект.РегламентноеЗадание);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантАналитическойРасылкиПоказателейПриИзменении(Элемент)
	УправлениеДоступностью();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РЕДАКТИРОВАНИЕ РАСПИСАНИЯ РЕГЛАМЕНТНОГО ЗАДАНИЯ.
//

&НаКлиенте
Процедура РедактироватьРегламентноеЗадание(Команда)
	
	Если Параметры.Ключ.Пустая() Тогда
		Оповещение = Новый ОписаниеОповещения("Подключаемый_РедактироватьРегламентноеЗаданиеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, Нстр("ru = 'Редактировать регламентное задание можно только для сохраненного элемента. Сохранить?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	ОткрытьЗадание();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьРегламентноеЗаданиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    Иначе
        Если НЕ Записать() Тогда
            ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Ошибка при записи элемента'"));
            Возврат;
        КонецЕсли;
    КонецЕсли;
    
    ОткрытьЗадание();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадание()
    
    Расписание = ПолучитьРасписание(Объект.Ссылка, Объект.РегламентноеЗадание);
    
    Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	
	ДопПараметры = Новый Структура("Диалог", Диалог);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбновитьДанныеЗадания", ЭтотОбъект, ДопПараметры);
    Диалог.Показать(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьДанныеЗадания(Расписание, ДополнительныеПараметры) Экспорт
    
    Диалог = ДополнительныеПараметры.Диалог;
        
	Если ТипЗнч(Расписание) = Тип("РасписаниеРегламентногоЗадания") Тогда
        
        РегламентныеЗаданияУХВызовСервера.УстановитьРасписаниеРегламентногоЗадания(Объект.РегламентноеЗадание, ПоместитьВоВременноеХранилище(Диалог.Расписание));
        ПредставлениеРегламентногоЗадания = ПолныеПраваУХ.ПолучитьПредставлениеРегламентногоЗадания(Объект.РегламентноеЗадание, ВыполнятьРегламентноеЗадание);
        
    КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРасписание(Знач СсылкаНаОбъект, УникальныйИдентификаторРегламентногоЗадания)
	
	ТекРегламент = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторРегламентногоЗадания);
	Если ТекРегламент = Неопределено Тогда
		УникальныйИдентификаторРегламентногоЗадания = ПодготовитьРегламентноеЗадание(СсылкаНаОбъект);
		ТекРегламент = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторРегламентногоЗадания);
	КонецЕсли;
	
	Возврат ТекРегламент.Расписание;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодготовитьРегламентноеЗадание(Ссылка)
	
	Возврат Справочники.АналитическаяПодписка.СформироватьРегламентноеЗаданиеДляНастроекРассылки(Ссылка);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИзменитьРазрешениеНаЗапускРегламентногоЗадания(УникальныйИдентификаторРегламентногоЗадания)
	
	РеглЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторРегламентногоЗадания);
	Если РеглЗадание <> Неопределено Тогда
		РеглЗадание.Использование = НЕ РеглЗадание.Использование;
		РеглЗадание.Записать();
		Возврат РеглЗадание.Использование;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьНастройкуСистемнойУчетнойзаписиЭлектроннойПочты()
	РезультатФункции = Истина;
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	АдресПочты = УчетнаяЗапись.АдресЭлектроннойПочты;
	Если ЗначениеЗаполнено(АдресПочты) Тогда
		ЕстьСобачка = (СтрНайти(АдресПочты, "@") <> 0);
		ЕстьТочка = (СтрНайти(АдресПочты, ".") <> 0);
		РезультатФункции = (ЕстьСобачка И ЕстьТочка);	
	Иначе
		РезультатФункции = Ложь;			// Не заполнен e-mail.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РЕДАКТИРОВАНИЯ АНАЛИТИЧЕСКИХ ОТБОРОВ.
//

&НаКлиенте
Процедура ПривестиРеквизитыОтбораКТипуЗначения(ИмяРеквизита, ВидОтбора)
	
	ПроверятьНаЧисловыеТипы = Ложь;
	
	Если ИмяРеквизита = "Значение_Организация" Тогда
		ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
	ИначеЕсли ИмяРеквизита = "Значение_Сценарий" Тогда
		ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Сценарии");
	ИначеЕсли ИмяРеквизита = "Значение_Период" Тогда
		ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Периоды");
		ПроверятьНаЧисловыеТипы = Истина;
	ИначеЕсли ИмяРеквизита = "Значение_Валюта" Тогда
		ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Валюты");
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ПроверятьНаЧисловыеТипы И СписокЧисленныхОтборов.НайтиПоЗначению(ВидОтбора) <> Неопределено Тогда
		ТипЗначенияРеквизита = Новый ОписаниеТипов("Число");
		ЭтаФорма[ИмяРеквизита] = ТипЗначенияРеквизита.ПривестиЗначение(ЭтаФорма[ИмяРеквизита]);
	ИначеЕсли СписокСписочныхОтборов.НайтиПоЗначению(ВидОтбора) <> Неопределено Тогда
		ТипЗначенияРеквизита = Новый ОписаниеТипов("СписокЗначений");
		ЭтаФорма[ИмяРеквизита] = ТипЗначенияРеквизита.ПривестиЗначение(ЭтаФорма[ИмяРеквизита]);
		ЭтаФорма[ИмяРеквизита].ТипЗначения = ТипЗначения;
	Иначе
		ТипЗначенияРеквизита = ТипЗначения;
		ЭтаФорма[ИмяРеквизита] = ТипЗначенияРеквизита.ПривестиЗначение(ЭтаФорма[ИмяРеквизита]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПреобразованийЗначений()
	
	СписокСписочныхОтборов.Добавить(Перечисления.ВидыСравненияДляАналитическихПодписок.ВСписке);
	СписокСписочныхОтборов.Добавить(Перечисления.ВидыСравненияДляАналитическихПодписок.НеВСписке);
	
	СписокЧисленныхОтборов.Добавить(Перечисления.ВидыСравненияДляАналитическихПодписок.ОтносительныйПериод_Год);
	СписокЧисленныхОтборов.Добавить(Перечисления.ВидыСравненияДляАналитическихПодписок.ОтносительныйПериод_Декада);
	СписокЧисленныхОтборов.Добавить(Перечисления.ВидыСравненияДляАналитическихПодписок.ОтносительныйПериод_День);
	СписокЧисленныхОтборов.Добавить(Перечисления.ВидыСравненияДляАналитическихПодписок.ОтносительныйПериод_Квартал);
	СписокЧисленныхОтборов.Добавить(Перечисления.ВидыСравненияДляАналитическихПодписок.ОтносительныйПериод_Месяц);
	СписокЧисленныхОтборов.Добавить(Перечисления.ВидыСравненияДляАналитическихПодписок.ОтносительныйПериод_Неделя);
	СписокЧисленныхОтборов.Добавить(Перечисления.ВидыСравненияДляАналитическихПодписок.ОтносительныйПериод_Полугодие);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСравнения_ОрганизацияПриИзменении(Элемент)
	
	ПривестиРеквизитыОтбораКТипуЗначения("Значение_Организация", Объект.ВидСравнения_Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСравнения_ПериодПриИзменении(Элемент)
	
	ПривестиРеквизитыОтбораКТипуЗначения("Значение_Период", Объект.ВидСравнения_Период);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСравнения_СценарийПриИзменении(Элемент)
	
	ПривестиРеквизитыОтбораКТипуЗначения("Значение_Сценарий", Объект.ВидСравнения_Сценарий);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСравнения_ВалютаПриИзменении(Элемент)
	
	ПривестиРеквизитыОтбораКТипуЗначения("Значение_Валюта", Объект.ВидСравнения_Валюта);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ.
//


&НаКлиенте
Процедура ИзменитьВидимостьСтраницНастройки()
	
	Элементы.Страница_РегламентноеЗадание.Видимость = Объект.ИнициацияРассылки = Значение_ИнициацияРегламентноеЗадание;
	Элементы.Страница_ПоказательМКП.Видимость = НЕ Элементы.Страница_РегламентноеЗадание.Видимость;
	Элементы.Группа_Настройки.ТекущаяСтраница = ?(Объект.ИнициацияРассылки = Значение_ИнициацияРегламентноеЗадание
													, Элементы.Страница_РегламентноеЗадание
													, Элементы.Страница_ПоказательМКП);
	Элементы.РазличныеПоля.ТекущаяСтраница = ?(Объект.ИнициацияРассылки = Значение_ИнициацияРегламентноеЗадание
													, Элементы.ПоляПанельОтчета
													, Элементы.ПоляМКП);
КонецПроцедуры

// Управляет видимостью и доступностью элементов на форме.
&НаКлиенте
Процедура УправлениеДоступностью()
	// Отображение таблицы выборочных состояний.
	ЭтоВыборочнаяРассылка = (Объект.ВариантАналитическойРасылкиПоказателей = ПредопределенноеЗначение("Перечисление.ВариантыАналитическойРассылкиПоказателей.Выборочные"));
	Элементы.ГруппаВыборочныеПоказатели.Видимость = ЭтоВыборочнаяРассылка;
	// Отображение страниц настройки.
	ИзменитьВидимостьСтраницНастройки();
КонецПроцедуры		// УправлениеДоступностью()

// Возвращает массив показателей отчета, привязанных к монитору ключевых показателей МониторВход.
&НаСервереБезКонтекста
Функция ПолучитьМассивПоказателейМонитора(МониторВход)
	РезультатФункции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПроизвольныеОтчетыИсточникиДанных.ИсточникДанных
		|ИЗ
		|	Справочник.ПроизвольныеОтчеты.ИсточникиДанных КАК ПроизвольныеОтчетыИсточникиДанных
		|ГДЕ
		|	ПроизвольныеОтчетыИсточникиДанных.Ссылка = &Ссылка
		|	И НЕ ПроизвольныеОтчетыИсточникиДанных.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("Ссылка", МониторВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатФункции.Добавить(ВыборкаДетальныеЗаписи.ИсточникДанных);
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ, ДОБАВЛЯЮЩИЕ ПОЛЯ В ШАБЛОН СООБЩЕНИЯ
//

&НаКлиенте
Процедура ВставитьПолеШаблона(ТекстШаблона)
	
	Перем ЗакладкаНачало;
	Перем ЗакладкаКонец;
	
	Элементы.ШаблонСообщения.ПолучитьГраницыВыделения(ЗакладкаНачало, ЗакладкаКонец);
	ОтображениеШаблона.Вставить(ЗакладкаНачало, ТекстШаблона);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеДата(Команда)
	ВставитьПолеШаблона("%%Дата%%");
КонецПроцедуры

&НаКлиенте
Процедура ПолеОтборПоВалюте(Команда)
	ВставитьПолеШаблона("%%ОтборВалюта%%");
КонецПроцедуры

&НаКлиенте
Процедура ПолеОтборПоОрганизации(Команда)
	ВставитьПолеШаблона("%%ОтборОрганизация%%");
КонецПроцедуры

&НаКлиенте
Процедура ПолеОтборПоПериоду(Команда)
	ВставитьПолеШаблона("%%ОтборПериод%%");
КонецПроцедуры

&НаКлиенте
Процедура ПолеОтборПоСценарию(Команда)
	ВставитьПолеШаблона("%%ОтборСценарий%%");
КонецПроцедуры

&НаКлиенте
Процедура ПолеПользователь(Команда)
	ВставитьПолеШаблона("%%Пользователь%%");
КонецПроцедуры

&НаКлиенте
Процедура ПолеСсылка(Команда)
	ВставитьПолеШаблона("%%Ссылка%%");
КонецПроцедуры

&НаКлиенте
Процедура ПолеКонтролируемыеПоказатели(Команда)
	ВставитьПолеШаблона("%%КонтролируемыеПоказатели%%");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщение(Команда)
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОтправитьСообщениеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Для отправки сообщения нужно сохранить элемент. Сохранить?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ОтправитьСообщениеСервер(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьСообщениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ Записать() Тогда
        Возврат;
    КонецЕсли;
        
    ОтправитьСообщениеСервер(Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПользователю(Команда)
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ОтправитьПользователюЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Для отправки сообщения нужно сохранить элемент. Сохранить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;

	ПродолжитьПроцессОтправки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПользователюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ Записать() Тогда
        Возврат;
    КонецЕсли;   
    
    ПродолжитьПроцессОтправки();

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПроцессОтправки()
    
	ТекПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
    ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОтправитьПользователюЗавершение", ЭтотОбъект);
	ТекстВыборПользователя = НСтр("ru = 'Выберите пользователя, которому будет отправлена рассылка'");
	ПоказатьВводЗначения(ОписаниеОповещения, ТекПользователь, ТекстВыборПользователя);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьПользователюЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	Если Значение <> Неопределено Тогда
		// Непосредственная отравка.
		ОтправитьСообщениеСервер(Объект.Ссылка, Значение);
		// Всплывающее оповещение пользователю.
		КартинкаОповещения = БиблиотекаКартинок.ОбщаяКартинка54ФЗEmail_32;
		ТекстОповещения = НСтр("ru = 'Отправка рассылки'");
		ПояснениеОповещения = НСтр("ru = 'Рассылка пользователю %Пользователь% отправлена'");
		ПояснениеОповещения = СтрЗаменить(ПояснениеОповещения, "%Пользователь%", Строка(Значение));
		ПоказатьОповещениеПользователя(ТекстОповещения, , ПояснениеОповещения, КартинкаОповещения);
	Иначе
		ТекстСообщения = НСтр("ru = 'Пользователь не выбран. Отправка отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтправитьСообщениеСервер(СсылкаНаРассылку, Пользователь = Неопределено)
	
	МодульРегламентныхЗаданийУХ.ПодготовитьРассылкуПоНастройкамРассылки(СсылкаНаРассылку, Пользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролируемыеПоказателиПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ТипЗнч(Объект.РассылаемыйОбъект) = Тип("СправочникСсылка.ПроизвольныеОтчеты") Тогда
		СтандартнаяОбработка = Ложь;
		МассивВыбора = ПолучитьМассивПоказателейМонитора(Объект.РассылаемыйОбъект);
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.ЗагрузитьЗначения(МассивВыбора);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ОтборВСписке", СписокВыбора);
		ОткрытьФорму("Справочник.ПоказателиМонитораКлючевыхПоказателей.ФормаВыбора", СтруктураПараметров, Элементы.КонтролируемыеПоказателиПоказатель);
	Иначе
		// Выполняем стандартную обработку.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	УчетнаяЗаписьНастроена = ПроверитьНастройкуСистемнойУчетнойзаписиЭлектроннойПочты();
	Если Не УчетнаяЗаписьНастроена Тогда
		ТекстСообщения = НСтр("ru = 'Не настроена системная учётная запись электронной почты'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	Иначе
		// Настройка произведена. Выполняем далее.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолеСписокВложений(Команда)
	ВставитьПолеШаблона("%%СписокВложений%%");
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаИмениГруппы(Результат, Параметры) Экспорт
	Если НЕ Результат = Неопределено Тогда
		ВыделенныеСтроки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ВыделенныеСтроки", Новый Массив); 
		Для Каждого ТекКонтролируемыеПоказатели Из Объект.КонтролируемыеПоказатели Цикл
			ТекНомерСтроки = ТекКонтролируемыеПоказатели.НомерСтроки;
			НомерСтрокиНайден = (ВыделенныеСтроки.Найти(ТекНомерСтроки - 1) <> Неопределено);
			Если НомерСтрокиНайден Тогда
				ТекКонтролируемыеПоказатели.ИмяГруппыИсточников = Результат;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли;
		КонецЦикла;	
	Иначе
		// Пользователь отказался. Ничего не делаем.
    КонецЕсли;
КонецПроцедуры		// ПослеВводаИмениГруппы()

&НаКлиенте
Процедура РазместитьВГруппу(Команда)
	ТекДанные = Элементы.КонтролируемыеПоказатели.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВыделенныеСтроки", Элементы.КонтролируемыеПоказатели.ВыделенныеСтроки);
		Оповещение = Новый ОписаниеОповещения("ПослеВводаИмениГруппы", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Введите название группы'");
		ПоказатьВводСтроки(Оповещение, ТекДанные.ИмяГруппыИсточников, ТекстВопроса, 50, Ложь);
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

