
&НаКлиенте
Перем ПроверкаПередЗаписьюПройдена;

// КОМАНДЫ ФОРМЫ

&НаКлиенте
Процедура ОткрытьНастройкиОбменаФайламиОрганизаций(Команда)
	
	ОткрытьФорму("РегистрСведений.ИменаФайловИКаталогов.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтруктуруФайлаПоУмолчанию(Команда)
	
	ЗаполнитьСтруктуруФайла();

КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если Объект.ТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие8 ИЛИ Объект.ТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие81 ИЛИ Объект.ТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие82 Тогда
		
		Если Объект.ИспользоватьWS Тогда
			Соединение8РазмещениеИБ = 2;
		ИначеЕсли Объект.РазмещениеВнешнейИБ = Перечисления.ВидыРазмещенияИБ.КлиентСерверный Тогда
			Соединение8РазмещениеИБ = 1;
		Иначе
			Соединение8РазмещениеИБ = 0;
		КонецЕсли;
		
		Соединение8АутентификацииWindows = ?(Объект.АутентификацияWindows, 1, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗначенияПеречисления = Метаданные.Перечисления.ТипыОбъектов.ЗначенияПеречисления;
		
	Для Индекс = 0 По ЗначенияПеречисления.Количество() - 1 Цикл
		ТипыОбъектов.Добавить(Перечисления.ТипыОбъектов.Получить(Индекс), ЗначенияПеречисления[Индекс].Синоним);
	КонецЦикла;
	
	Если Объект.ИспользоватьWS Тогда 
		
		Соединение8РазмещениеИБ = 2;
		
	ИначеЕсли Объект.РазмещениеВнешнейИБ=Перечисления.ВидыРазмещенияИБ.КлиентСерверный Тогда
		
		Соединение8РазмещениеИБ = 1
		
	Иначе
		
		Соединение8РазмещениеИБ=0;
		
	КонецЕсли;
	
	Соединение8АутентификацииWindows=?(Объект.АутентификацияWindows,1,0);
	
	ВидимостьДоступностьГлобальная();
		
КонецПроцедуры

&НаСервере
Процедура СформироватьСтрокуПодключения()
	
	Объект.СтрокаПодключения=УправлениеСоединениямиВИБУХ.ПолучитьСтрокуСоединенияADO(ОбщегоНазначенияУХ.ПолучитьСтруктуруРеквизитовОбъекта(РеквизитФормыВЗначение("Объект")));	
	
КонецПроцедуры // ПроверитьСтрокуПодключения()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ПанельТипХранилищаADO.Видимость Тогда
		СформироватьСтрокуПодключения();
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Если НЕ ПроверитьЗаполнение() Тогда
			
			Отказ = Истина;
									
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.АутентификацияWindows=(Соединение8АутентификацииWindows=1);
	
КонецПроцедуры

// ИНТЕРФЕЙС

&НаСервере
Процедура ВидимостьДоступностьГлобальная()
	
	Если Объект.Ссылка=Справочники.ВнешниеИнформационныеБазы.ТекущаяИБ Тогда
		
		Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.Страница_Пустая;
		Элементы.ТипВнешнегоИсточника.Видимость=Ложь;
		ЭтотОбъект.Доступность=Ложь;
		
	ИначеЕсли Объект.ТипБД.Пустая() ИЛИ Объект.ТипБД = Справочники.ТипыБазДанных.ТекущаяИБ Тогда
		
		Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.Страница_Пустая;
								
	ИначеЕсли Объект.ТипБД = Справочники.ТипыБазДанных.ОбменТаблДок Тогда
		
		Объект.ИспользоватьДляИмпортаЭталонныйКаталог=Ложь;
		Элементы.ИмпортРасположениеФайлов.Видимость=Истина;
		Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.Страница_Файлы;
		Элементы.Панель_ИмпортТипФайла.ТекущаяСтраница = Элементы.Страница_ИмпортТабличныхДокументов;
		
		Если Параметры.Ключ = Неопределено И Объект.СтруктураИмени.Количество() = 0 Тогда
			ЗаполнитьСтруктуруФайла();
		КонецЕсли;
				
	Иначе
		
		ВерсияПлатформы = Объект.ТипБД.ВерсияПлатформы;
		
		Если ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.ПустаяСсылка() Тогда
			
			Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.Страница_Пустая;
			
		ИначеЕсли ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие77 Тогда
			
			Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.Страница_ВИБ;
			Элементы.Панель_Версии1С.ТекущаяСтраница = Элементы.Страница_Версия77;
			
		ИначеЕсли ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие8
			ИЛИ ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие81
			ИЛИ ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие82
			ИЛИ ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие83 Тогда
			
			// значение по умолчанию, для необыгриваемого формой реквизита
			Если НЕ ЗначениеЗаполнено(Объект.РазмещениеВнешнейИБ) Тогда
				ИзменитьПараметрыСоединения8();
			КонецЕсли;
			
			Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.Страница_ВИБ;
			Элементы.Панель_Версии1С.ТекущаяСтраница = Элементы.Страница_Версия8;
			
		ИначеЕсли ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO Тогда
			
			Если Объект.ТипХранилищаДанныхADO=Перечисления.ТипыХранилищДанныхADO.Прочие Тогда
				
				Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.Страница_ADO;
				
			Иначе
				
				Элементы.ОсновнаяПанель.ТекущаяСтраница 		= Элементы.Страница_Файлы;
                Элементы.Панель_ИмпортТипФайла.ТекущаяСтраница 	= Элементы.Страница_ИмпортДанныхADO;
                ПриИзмененииСпособаОпределенияКаталога();
				
			КонецЕсли;

			Элементы.КонвертироватьЗначенияВТекст.Видимость=(Объект.ТипХранилищаДанныхADO=Перечисления.ТипыХранилищДанныхADO.XLS);
			
		Иначе
			
			Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.Страница_Пустая;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВидимостьДоступностьЛокальная();
	ВидимостьДоступностьУправлениеСоединениемНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСпособаОпределенияКаталога()
	
	Элементы.ИмпортРасположениеФайлов.Видимость	= (НЕ Объект.ИспользоватьДляИмпортаЭталонныйКаталог);
		
КонецПроцедуры // ПриИзмененииСпособаОпределенияКаталога() 

&НаСервере
Процедура ВидимостьДоступностьЛокальная()
	
	Элементы.ПанельТипХранилищаADO.Видимость=(Объект.ТипБД.ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO);
	
	Если Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.Страница_Файлы Тогда
		
		Если Элементы.Панель_ИмпортТипФайла.ТекущаяСтраница = Элементы.Страница_ИмпортТабличныхДокументов Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.ТипТабличногоДокумента) Тогда
				Объект.ТипТабличногоДокумента = Перечисления.ТипыВнешнихТабличныхДокументов.ФайлMXL;
			КонецЕсли;
			
			ПарольНаСтраницуДоступность = Объект.ТипТабличногоДокумента = Перечисления.ТипыВнешнихТабличныхДокументов.ФайлXLS;
			Если НЕ (Элементы.ПарольНаСтраницу.Доступность = ПарольНаСтраницуДоступность) Тогда
				Элементы.ПарольНаСтраницу.Доступность = ПарольНаСтраницуДоступность;
			КонецЕсли;
			
		КонецЕсли;
			
	ИначеЕсли Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.Страница_ВИБ Тогда
		
		Если Элементы.Панель_Версии1С.ТекущаяСтраница = Элементы.Страница_Версия77 Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.РазмещениеВнешнейИБ) Тогда
				Объект.РазмещениеВнешнейИБ = Перечисления.ВидыРазмещенияИБ.КлиентСерверный;
			КонецЕсли;
			
		ИначеЕсли Элементы.Панель_Версии1С.ТекущаяСтраница = Элементы.Страница_Версия8 Тогда
			
			Страница_0 = ?(Соединение8РазмещениеИБ = 0, Элементы.Соединение8РазмещениеИБ_Файл_Параметры_Доступно, Элементы.Соединение8РазмещениеИБ_Файл_Параметры_НеДоступно);
			Страница_1 = ?(Соединение8РазмещениеИБ = 1, Элементы.Соединение8РазмещениеИБ_Сервер_Параметры_Доступно, Элементы.Соединение8РазмещениеИБ_Сервер_Параметры_НеДоступно);
			Страница_2 = ?(Соединение8РазмещениеИБ = 2, Элементы.Соединение8РазмещениеИБ_WebService_Параметры_Доступно, Элементы.Соединение8РазмещениеИБ_WebService_Параметры_НеДоступно);
			
			Если НЕ Элементы.Соединение8РазмещениеИБ_Файл_Параметры.ТекущаяСтраница = Страница_0 Тогда
				Элементы.Соединение8РазмещениеИБ_Файл_Параметры.ТекущаяСтраница = Страница_0;
			КонецЕсли; 
			
			Если НЕ Элементы.Соединение8РазмещениеИБ_Сервер_Параметры.ТекущаяСтраница = Страница_1 Тогда
				Элементы.Соединение8РазмещениеИБ_Сервер_Параметры.ТекущаяСтраница = Страница_1;
			КонецЕсли; 
			
			Если НЕ Элементы.Соединение8РазмещениеИБ_WebService_Параметры.ТекущаяСтраница = Страница_2 Тогда
				Элементы.Соединение8РазмещениеИБ_WebService_Параметры.ТекущаяСтраница = Страница_2;
			КонецЕсли;
			
			СтраницаПользовательПароль = ?(Соединение8АутентификацииWindows = 0, Элементы.ПользовательПароль_Доступность, Элементы.ПользовательПароль_НеДоступность);
			Если НЕ Элементы.ПользовательПароль.ТекущаяСтраница = СтраницаПользовательПароль Тогда
				Элементы.ПользовательПароль.ТекущаяСтраница = СтраницаПользовательПароль;
			КонецЕсли;
			
			ДекорацияАутентификацияWindowsДоступность = Соединение8АутентификацииWindows = 1;
			Если НЕ Элементы.ДекорацияАутентификацияWindows.Доступность = ДекорацияАутентификацияWindowsДоступность Тогда
				Элементы.ДекорацияАутентификацияWindows.Доступность = ДекорацияАутентификацияWindowsДоступность;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьДоступностьУправлениеСоединениемНаСервере()
	
	Если Объект.ТипБД.Предопределенный ИЛИ Объект.ТипБД.Пустая() Тогда
		
		Элементы.ОсновныеРеквизиты.Доступность = Истина;
		Элементы.ОсновнаяПанель.Доступность = Истина;
		
	Иначе
				
		Элементы.ОсновныеРеквизиты.Доступность = НЕ СоединениеУстановлено;
		Элементы.ОсновнаяПанель.Доступность = НЕ СоединениеУстановлено;
		
		Элементы.Соединение77ПроверитьПодключение.Доступность = НЕ СоединениеУстановлено;
		Элементы.Соединение8ПроверитьПодключение.Доступность = НЕ СоединениеУстановлено;
		
	КонецЕсли;
	
КонецПроцедуры

// ОБСЛУЖИВАНИЕ ОБРАБОТЧИКОВ СОБЫТИЙ РЕКВИЗИТОВ

&НаСервере
Процедура ЗаполнитьСтруктуруФайла()
	
	Объект.СтруктураИмени.Очистить();
		
	Для Каждого ТипОбъекта Из ТипыОбъектов Цикл
		Строка = Объект.СтруктураИмени.Добавить();
		Строка.Элемент = ТипОбъекта.Значение;
		Строка.НачалоЭлемента = ?(ТипыОбъектов.Индекс(ТипОбъекта) < 4, "\", "+");
	КонецЦикла;
	
	ОбновитьМаскуПолногоИмени();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКаталог(РеквизитКаталог = "КаталогИБ", СтандартнаяОбработка, ОбновитьМаскуПолногоИмени = Ложь)
	
	СтандартнаяОбработка = Ложь;
	
	ДопПараметры = Новый Структура("ОбновитьМаскуПолногоИмени,РеквизитКаталог", ОбновитьМаскуПолногоИмени, РеквизитКаталог);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ПодключениеРасширения", ЭтотОбъект, ДопПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодключениеРасширения(Подключено, ДополнительныеПараметры) Экспорт

	Если Подключено Тогда
		
		ВыбратьКаталогПродолжение(ДополнительныеПараметры);
		
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("ВыбратьКаталогПродолжение", ЭтаФорма, ДополнительныеПараметры);
		НачатьУстановкуРасширенияРаботыСФайлами(Оповещение); 
		
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ВыбратьКаталогПродолжение(ДополнительныеПараметры) Экспорт
	
	ОбновитьМаскуПолногоИмени 	= ДополнительныеПараметры.ОбновитьМаскуПолногоИмени;
	РеквизитКаталог 			= ДополнительныеПараметры.РеквизитКаталог;
	
    ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
    ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Каталог = Объект[РеквизитКаталог];
	
	ДопПараметры = Новый Структура("РеквизитКаталог, ОбновитьМаскуПолногоИмени", РеквизитКаталог, ОбновитьМаскуПолногоИмени);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработатьВыборКаталога", ЭтотОбъект, ДопПараметры);
	ДиалогВыбораФайла.Показать(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьВыборКаталога(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
    
    РеквизитКаталог 			= ДополнительныеПараметры.РеквизитКаталог;
    ОбновитьМаскуПолногоИмени	= ДополнительныеПараметры.ОбновитьМаскуПолногоИмени;    
    
    Если ВыбранныеФайлы <> Неопределено Тогда
        
        Объект[РеквизитКаталог] = ВыбранныеФайлы[0]; //-ДиалогВыбораФайла.Каталог;
        Если ОбновитьМаскуПолногоИмени = Истина Тогда		
            ОбновитьМаскуПолногоИмени();		
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОбновитьМаскуПолногоИмени()
	
	РазделительКаталогов = "\";
	
	Результат = "";
	
	Для Каждого Строка Из Объект.СтруктураИмени Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.Элемент) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Результат + Строка.НачалоЭлемента + "<" + ТипыОбъектов.НайтиПоЗначению(Строка.Элемент).Представление + ">" + Строка.ОкончаниеЭлемента;
		
	КонецЦикла;
	
	Если Лев(Результат, 1) = РазделительКаталогов Тогда
		
		Результат = Сред(Результат, 2);
		
	КонецЕсли;
	
	Результат = Объект.НачалоИмени + ?(Прав(Объект.НачалоИмени, 1) = РазделительКаталогов, "", РазделительКаталогов) + Результат + ".";
	
	Если Элементы.Панель_ИмпортТипФайла.ТекущаяСтраница = Элементы.ИмпортТабличныхДокументов Тогда
		
		Если Объект.ТипТабличногоДокумента = ПредопределенноеЗначение("Перечисление.ТипыВнешнихТабличныхДокументов.ФайлMXL") Тогда
			
			Результат = Результат + "mxl";
			
		ИначеЕсли Объект.ТипТабличногоДокумента = ПредопределенноеЗначение("Перечисление.ТипыВнешнихТабличныхДокументов.ФайлXLS") Тогда
			
			Результат = Результат + "xls";
			
		КонецЕсли;
				
	КонецЕсли;
	
	Объект.МаскаПолногоИмени = Результат;
	
КонецФункции

// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

&НаКлиенте
Процедура ТипВнешнегоИсточникаПриИзменении(Элемент)
	
	ВидимостьДоступностьГлобальная();
	
КонецПроцедуры

// СТРАНИЦА ВИБ V7

&НаКлиенте
Процедура Соединение77КаталогИБНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьКаталог("КаталогИБ", СтандартнаяОбработка);
	
КонецПроцедуры

// СТРАНИЦА ВИБ V8

&НаСервере
Процедура ИзменитьПараметрыСоединения8()
	
	Объект.ИспользоватьWS = Соединение8РазмещениеИБ = 2;
	
	Если Объект.ИспользоватьWS И ПустаяСтрока(Объект.URIПространстваИмен) Тогда
		
		Объект.URIПространстваИмен="http://v8.1c.ru";
		
	КонецЕсли;
			
	Объект.РазмещениеВнешнейИБ = ?(Соединение8РазмещениеИБ = 1, Перечисления.ВидыРазмещенияИБ.КлиентСерверный, Перечисления.ВидыРазмещенияИБ.ФайлСерверный);
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИБ8НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьКаталог("КаталогИБ", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Соединение8РазмещениеИБ_ФайлПриИзменении(Элемент)
	
	ИзменитьПараметрыСоединения8();
	
	ВидимостьДоступностьЛокальная();
	
КонецПроцедуры

&НаКлиенте
Процедура Соединение8РазмещениеИБ_СерверПриИзменении(Элемент)
	
	ИзменитьПараметрыСоединения8();
	
	ВидимостьДоступностьЛокальная();
	
КонецПроцедуры

&НаКлиенте
Процедура Соединение8РазмещениеИБ_WebServiceПриИзменении(Элемент)
	
	ИзменитьПараметрыСоединения8();
	
	ВидимостьДоступностьЛокальная();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьсяКWebСервису(Команда)
	
	ЗаполнитьТаблицуWebСервисов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуWebСервисов()
	
	Определение = УправлениеСоединениямиВИБУХ.ПолучитьWSОпределение(Объект.Пользователь, Объект.Пароль, Нстр("ru = 'Не удалось подключиться к web-сервису'"), Объект.ПутьКWebСервису);
	ТаблицаWebСервисов.Очистить();
	
	Если Определение <> Неопределено Тогда
		
		Для Каждого Сервис Из Определение.Сервисы Цикл
			
			НоваяСтрока                     = ТаблицаWebСервисов.Добавить();
			НоваяСтрока.ИмяwebСервиса       = Сервис.Имя;
			НоваяСтрока.URIПространстваИмен = Сервис.URIПространстваИмен;
			НоваяСтрока.ТочкиПодключения    = Новый Массив;
			
			Для Каждого ТочкаПодключения Из Сервис.ТочкиПодключения Цикл
				
				НоваяСтрока.ТочкиПодключения.Добавить(ТочкаПодключения.Имя);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяWebСервисаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	Для Каждого Элемент Из ТаблицаWebСервисов Цикл
		ДанныеВыбора.Добавить(Элемент.ИмяWebСервиса);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяWebСервисаПриИзменении(Элемент)
	
	НайденныеСтроки = ТаблицаWebСервисов.НайтиСтроки(Новый Структура("ИмяWebСервиса", Объект.ИмяWebСервиса));
	Если НайденныеСтроки.Количество() <> 0 Тогда
		ОБъект.URIПространстваИмен = НайденныеСтроки[0].URIПространстваИмен;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкаПодключенияWebСервисаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НайденныеСтроки = ТаблицаWebСервисов.НайтиСтроки(Новый Структура("ИмяWebСервиса", Объект.ИмяWebСервиса));
	Если НайденныеСтроки.Количество() <> 0 Тогда
		ДанныеВыбора = НайденныеСтроки[0].ТочкиПодключения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Аутентификация1CПриИзменении(Элемент)
	
	ВидимостьДоступностьЛокальная();
	
КонецПроцедуры

&НаКлиенте
Процедура АутентификацияWindowsПриИзменении(Элемент)
	
	ВидимостьДоступностьЛокальная();
	
КонецПроцедуры

 // СТРАНИЦА Табличных документы
 
&НаКлиенте
Процедура ТипТабличногоДокументаMXLПриИзменении(Элемент)
	
	ВидимостьДоступностьЛокальная();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипТабличногоДокументаXLSПриИзменении(Элемент)
	
	ВидимостьДоступностьЛокальная();
	
КонецПроцедуры

// СТРАНИЦА Шаблон расположения файлов

&НаКлиенте
Процедура НачалоИмениПриИзменении(Элемент)
	
	ОбновитьМаскуПолногоИмени();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоИмениНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьКаталог("НачалоИмени", СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураИмениПриИзменении(Элемент)
	
	ОбновитьМаскуПолногоИмени();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураИмениПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбщегоНазначенияУХ.ЗаполнитьПустоеЗначение(Элементы.СтруктураИмени.ТекущиеДанные.НачалоЭлемента, "\");
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураИмениЭлементНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Для Каждого Строка Из ТипыОбъектов Цикл
		Элемент.СписокВыбора.Добавить(Строка.Значение, Строка.Представление);
	КонецЦикла; 
	
	Для Каждого Строка Из Объект.СтруктураИмени Цикл
		
		Если НЕ Элементы.СтруктураИмени.ТекущиеДанные = Строка Тогда
			ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(Строка.Элемент);
			Если НЕ ЭлементСписка = Неопределено Тогда
				Элемент.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// СТРАНИЦА ADO

&НаКлиенте
Процедура СтрокаПодключенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ОткрытьФорму("Обработка.НастройкаСтрокиПодключения.Форма", Новый Структура("СтрокаПодключения", Объект.СтрокаПодключения), Элемент);
	
КонецПроцедуры


// УПРАВЛЕНИЕ ПОДКЛЮЧЕНИЯМИ

&НаКлиенте
Функция ПроверитьПодключениеНаКлиенте(ПроверятьЗаполнение = Истина)
		
	РезультатПроверки=ПроверитьПодключениеНаСервере();
	
	Если ТипЗнч(РезультатПроверки)=Тип("Число") Тогда
		
		ПоказатьПредупреждение(, СтрШаблон(Нстр("ru = 'Соединение успешно установлено. Обнаружено таблиц %1'"), РезультатПроверки));
		Возврат Истина;
		
	ИначеЕсли РезультатПроверки Тогда
		
		ПоказатьПредупреждение(, Нстр("ru = 'Соединение успешно установлено'"));
		Возврат Истина;
	
	Иначе
		ПоказатьПредупреждение(, Нстр("ru = 'Не удалось установить соединение'"));
		Возврат Ложь;
	КонецЕсли;
	
Конецфункции

&НаСервере
Функция ПроверитьПодключениеНаСервере()
	
	ПодключениеПоADO=Объект.ТипБД.ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO;
	
	Если ПодключениеПоADO И НЕ Объект.ТипХранилищаДанныхADO=Перечисления.ТипыХранилищДанныхADO.Прочие Тогда
		СформироватьСтрокуПодключения();
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ОбъектСтруктура = Новый Структура("Код, Наименование, Ссылка, СтрокаПодключения", Объект.Код, Объект.Наименование, Объект.Ссылка);
	
	Для Каждого Реквизит Из Метаданные.Справочники.ВнешниеИнформационныеБазы.Реквизиты Цикл
		ОбъектСтруктура.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);
	КонецЦикла;
	
	Если ПодключениеПоADO Тогда
				
		Если Объект.ТипХранилищаДанныхADO=Перечисления.ТипыХранилищДанныхADO.Прочие Тогда
			
			ADOX_Catalog                  = Новый COMОбъект("ADOX.Catalog");
			ADOX_Catalog.ActiveConnection = Объект.СтрокаПодключения;
			
			Попытка
				
				Возврат ADOX_Catalog.Tables.Count(); 
				
			Исключение
				
				Возврат Ложь;
				
			КонецПопытки;
			
		Иначе
			
			Если Объект.ТипХранилищаДанныхADO=Перечисления.ТипыХранилищДанныхADO.XLS
				ИЛИ Объект.ТипХранилищаДанныхADO=Перечисления.ТипыХранилищДанныхADO.MSAccess Тогда
				
				НайденныеФайлы=НайтиФайлы(Объект.ЭталонныйКаталог,?(Объект.ТипХранилищаДанныхADO=Перечисления.ТипыХранилищДанныхADO.XLS,"*.xl*","*.mdb"));
				
				КоличествоТаблиц=0;
				УспешныхСоединений=0;
				
				Для Каждого Файл ИЗ НайденныеФайлы Цикл
					
					СтрокаСоединения=УправлениеСоединениямиВИБУХ.ПолучитьСтрокуСоединенияADO(ОбъектСтруктура,Файл.ПолноеИмя);
					
					Попытка
						
						ADOX_Catalog                  = Новый COMОбъект("ADOX.Catalog");
						ADOX_Catalog.ActiveConnection = СтрокаСоединения;
						
						КоличествоТаблиц=КоличествоТаблиц+ADOX_Catalog.Tables.Count();
						УспешныхСоединений=УспешныхСоединений+1;
						
					Исключение
						
					КонецПопытки;
					
				КонецЦикла;
				
				Возврат ?(УспешныхСоединений=0,Ложь,КоличествоТаблиц);
				
			Иначе
				
				СтрокаСоединения=УправлениеСоединениямиВИБУХ.ПолучитьСтрокуСоединенияADO(ОбъектСтруктура,Объект.ЭталонныйКаталог);
				
				Попытка
					
					ADOX_Catalog                  = Новый COMОбъект("ADOX.Catalog");
					ADOX_Catalog.ActiveConnection = СтрокаСоединения;
					
					Возврат ADOX_Catalog.Tables.Count();						
					
				Исключение
					
					Возврат Ложь;
					
				КонецПопытки;	
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Возврат УправлениеСоединениямиВИБУХ.ПолучитьСоединение(ОбъектСтруктура, 1, Строка(Новый УникальныйИдентификатор()));
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииТипаХранилищаADO()
	
	Если Объект.ТипХранилищаДанныхADO=Перечисления.ТипыХранилищДанныхADO.Прочие Тогда
		
		Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.Страница_ADO;
		
	Иначе
		
		Элементы.ОсновнаяПанель.ТекущаяСтраница 		= Элементы.Страница_Файлы;
		Элементы.Панель_ИмпортТипФайла.ТекущаяСтраница 	= Элементы.Страница_ИмпортДанныхADO;
		
		Элементы.КонвертироватьЗначенияВТекст.Видимость=(Объект.ТипХранилищаДанныхADO=Перечисления.ТипыХранилищДанныхADO.XLS);
		
	КонецЕсли;
	
	СформироватьСтрокуПодключения();
	
КонецПроцедуры // ПриИзмененииТипаХранилищаADO() 

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	
	ПроверитьПодключениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогФайловНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьКаталог("ЭталонныйКаталог", СтандартнаяОбработка)
	
КонецПроцедуры


&НаКлиенте
Процедура ФиксированныйКаталогПриИзменении(Элемент)
	
	ПриИзмененииСпособаОпределенияКаталога();
	
КонецПроцедуры


&НаКлиенте
Процедура ТипХранилищаДанныхADOПриИзменении(Элемент)
	
	ПриИзмененииТипаХранилищаADO();
		
КонецПроцедуры


&НаКлиенте
Процедура ЛокальноеПодключениеСтрокиПодключения(Команда)
	
	СоединениеADO = Новый COMОбъект("ADODB.Connection");
	СоединениеADO.ConnectionString = Объект.СтрокаПодключения;
	ДатаЛинк = Новый COMОбъект("DataLinks");
	Если ДатаЛинк.PromptEdit(СоединениеADO) Тогда		
		Объект.СтрокаПодключения = СоединениеADO.ConnectionString;
	КонецЕсли; 
	
КонецПроцедуры

