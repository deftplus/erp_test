
&НаКлиенте
Процедура ТаблицаКорректировокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Отказ = Истина;
		СтруктураПараметров = Новый Структура;
        ТекстВопроса = НСтр("ru = 'Шаблон корректировки еще не записан. Записать?'");
        Режим = РежимДиалогаВопрос.ДаНет;
        Оповещение = Новый ОписаниеОповещения("ДобавлениеШаблона_Завершение", ЭтаФорма, СтруктураПараметров);
        ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);

	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеШаблона_Завершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Записать();
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Отказ Тогда
		
		УправлениеОтчетамиУХ.ПроверитьНаличиеЭлементовНастройки(ТекущийОбъект.Ссылка,Новый Структура("ПравилоОбработки,ПравилоПроверки"),Отказ);
		
		Если НЕ ЗначениеЗаполнено(ПравилоОбработки) Тогда
			
			ПолучитьПравилоОбработки();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПравилоОбработки()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПравилаОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПравилаОбработки КАК ПравилаОбработки
	|ГДЕ
	|	ПравилаОбработки.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец",Объект.Ссылка);
	
	Результат=Запрос.Выполнить().Выбрать();	
	
	Если Результат.Следующий() Тогда
		
		ПравилоОбработки=Результат.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьПравилоОбработки()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		Если Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.АвтоматическоеЗаполнение Тогда
			
			ПолучитьПравилоОбработки();
			ЗаполнитьТаблицуКорректировок();
			ОбновитьФормулыРасчета();
			
		ИначеЕсли Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.РучнойВвод Тогда
			
			ЗаполнитьТаблицуКорректировок();
			
		ИначеЕсли  Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.ОбратноеРаспределение Тогда
			
			ЗаполнитьДеревоОбратногоРаспределения();
			
		ИначеЕсли Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.АктуализацияБюджетов Тогда
				
			ЗаполнитьДеревоАктуализации();	
			
		КонецЕсли;
		
	Иначе
		
		Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.РучнойВвод;
		
	КонецЕсли;
	
	УстановитьВидимость();
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ГруппаРасчет.Видимость=(Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.РучнойВвод ИЛИ Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.АвтоматическоеЗаполнение);
	Элементы.ГруппаОбратноеРаспределение.Видимость=Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.ОбратноеРаспределение;
	Элементы.ГруппаАктуализация.Видимость=Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.АктуализацияБюджетов;
	Элементы.Сбалансированная.Видимость=(Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.РучнойВвод ИЛИ Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.АвтоматическоеЗаполнение);
	
	Если Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.АвтоматическоеЗаполнение Тогда
		
		Элементы.ПроцедураРедактирования.Видимость=Истина;
		Элементы.ПравилоОбработки.Видимость=Истина;
		Элементы.СтраницыРасчет.ОтображениеСтраниц=ОтображениеСтраницФормы.ЗакладкиСверху;
		
	ИначеЕсли Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.РучнойВвод Тогда
		
		Элементы.ПроцедураРедактирования.Видимость=Ложь;
		Элементы.ПравилоОбработки.Видимость=Ложь;
		Элементы.СтраницыРасчет.ОтображениеСтраниц=ОтображениеСтраницФормы.Нет;
		Элементы.СтраницыРасчет.ТекущаяСтраница=Элементы.СтраницыРасчет.ПодчиненныеЭлементы.РасчетПоФормулам;
				
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость() 

&НаСервере
Процедура ЗаполнитьТаблицуКорректировок()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ШаблоныКорректировокЗначенийПоказателейШаблонКорректировки.Показатель КАК Показатель,
	             |	ШаблоныКорректировокЗначенийПоказателейШаблонКорректировки.Показатель.Владелец КАК ВидОтчета
	             |ИЗ
	             |	Справочник.ШаблоныКорректировокЗначенийПоказателей.ШаблонКорректировки КАК ШаблоныКорректировокЗначенийПоказателейШаблонКорректировки
	             |ГДЕ
	             |	ШаблоныКорректировокЗначенийПоказателейШаблонКорректировки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока=ТаблицаКорректировок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуКорректировок() 

&НаСервере
Процедура ОбновитьФормулыРасчета()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТаблицаКорректировок.ВидОтчета КАК ВидОтчета,
	|	ТаблицаКорректировок.Показатель КАК Показатель
	|ПОМЕСТИТЬ ПоказателиКорректировки
	|ИЗ
	|	&ТаблицаКорректировок КАК ТаблицаКорректировок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиКорректировки.Показатель КАК Показатель,
	|	ПоказателиКорректировки.ВидОтчета КАК ВидОтчета,
	|	ПроцедурыРасчетов.ПроизвольныйКод КАК ПроизвольныйКод,
	|	ПроцедурыРасчетов.Процедура КАК Процедура
	|ИЗ
	|	ПоказателиКорректировки КАК ПоказателиКорректировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
	|		ПО (ПроцедурыРасчетов.НазначениеРасчетов = &ПравилоОбработки)
	|			И ПоказателиКорректировки.Показатель = ПроцедурыРасчетов.ПотребительРасчета";
	
	Запрос.УстановитьПараметр("ТаблицаКорректировок",РеквизитФормыВЗначение("ТаблицаКорректировок"));
	Запрос.УстановитьПараметр("ПравилоОбработки",ПравилоОбработки);
	
	ТаблицаКорректировок.Очистить();
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока=ТаблицаКорректировок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
		НоваяСтрока.ПроцедураРедактирования=НоваяСтрока.Процедура;
		
	КонецЦикла;
	
	ЗаполнитьПроцедурыРедактирования();
		
КонецПроцедуры // ОбновитьТаблицуШаблонов()

&НаСервере
Процедура ЗаполнитьПроцедурыРедактирования()
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст="ВЫБРАТЬ
	|	РеквизитыИсточниковДанныхДляФормул.КодИсточника,
	|	РеквизитыИсточниковДанныхДляФормул.ПоказательТекущегоОтчета,
	|	РеквизитыИсточниковДанныхДляФормул.ЕстьНестандартныеОтборы,
	|	РеквизитыИсточниковДанныхДляФормул.КодУпрощеннойФормулы,
	|	РеквизитыИсточниковДанныхДляФормул.ПотребительРасчета,
	|	РеквизитыИсточниковДанныхДляФормул.КодПоказательОтбор
	|ПОМЕСТИТЬ ИсточникиДанных
	|ИЗ
	|	РегистрСведений.РеквизитыИсточниковДанныхДляФормул КАК РеквизитыИсточниковДанныхДляФормул
	|ГДЕ
	|	РеквизитыИсточниковДанныхДляФормул.НазначениеРасчетов = &НазначениеРасчетов
	|	И РеквизитыИсточниковДанныхДляФормул.СпособИспользования = &СпособИспользования";
	
	Запрос.УстановитьПараметр("НазначениеРасчетов",ПравилоОбработки);
	Запрос.УстановитьПараметр("СпособИспользования",Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета);
	Запрос.Выполнить();
	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникиДанных.КодИсточника,
	|	ИсточникиДанных.ПоказательТекущегоОтчета,
	|	ИсточникиДанных.ЕстьНестандартныеОтборы,
	|	ИсточникиДанных.КодУпрощеннойФормулы,
	|	ИсточникиДанных.КодПоказательОтбор
	|ИЗ
	|	ИсточникиДанных КАК ИсточникиДанных
	|ГДЕ
	|	ИсточникиДанных.ПотребительРасчета = &ПотребительРасчета";
		
	Для Каждого Строка ИЗ ТаблицаКорректировок Цикл
		
		ТекстПроцедуры=Строка.Процедура;
		
		Если Строка.ПроизвольныйКод Тогда
			
			Строка.ПроцедураРедактирования=ТекстПроцедуры;
			
		Иначе
			
			Запрос.УстановитьПараметр("ПотребительРасчета",Строка.Показатель);
			
			Результат=Запрос.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл
									
				ТекстОперанда=Результат.КодУпрощеннойФормулы;					
				ТекстПроцедуры=СтрЗаменить(ТекстПроцедуры,"["+СокрЛП(Результат.КодИсточника)+"]",ТекстОперанда);
				
			КонецЦикла;
			
			Строка.ПроцедураРедактирования=ТекстПроцедуры;
			
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры // ЗаполнитьПроцедурыРедактирования()

&НаКлиенте
Процедура ТаблицаКорректировокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя="ПроцедураРедактирования" И (Не Элементы.ТаблицаКорректировок.ТекущиеДанные=Неопределено) Тогда
		
		СтандартнаяОбработка=Ложь;
		
		СтруктураПараметров=Новый Структура;
		СтруктураПараметров.Вставить("НазначениеРасчетов",	ПравилоОбработки);
		СтруктураПараметров.Вставить("ПотребительРасчета",	Элементы.ТаблицаКорректировок.ТекущиеДанные.Показатель);
		СтруктураПараметров.Вставить("СпособИспользования",	ПредопределенноеЗначение("Перечисление.СпособыИспользованияОперандов.ДляФормулРасчета"));
		
		ОткрытьФорму("ОбщаяФорма.ФормаНастройкиФормулРасчета",СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ТипЗнч(Параметр)=Тип("Структура") И Параметр.Свойство("ТекстПроцедуры") Тогда
		
		СтрДанные=ТаблицаКорректировок.НайтиСтроки(Новый Структура("Показатель",Параметр.ПотребительРасчета));
		
		Если СтрДанные.Количество()>0 Тогда
			
			СтрДанные[0].Процедура				=Параметр.ТекстПроцедуры;
			СтрДанные[0].ПроцедураРедактирования=Параметр.ПроцедураРедактирования;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПравилоОбработкиПриИзмененииНаСервере()
	
	ОбновитьФормулыРасчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоОбработкиПриИзменении(Элемент)
	ПравилоОбработкиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СпособВводаКорректировкиПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура КлючеваяАналитикаРаспределенияПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаАктуализацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Отказ = Истина;
		СтруктураПараметров = Новый Структура;
        ТекстВопроса = НСтр("ru = 'Шаблон корректировки еще не записан. Записать?'");
        Режим = РежимДиалогаВопрос.ДаНет;
        Оповещение = Новый ОписаниеОповещения("ДобавлениеШаблона_Завершение", ЭтаФорма, СтруктураПараметров);
        ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ШаблонКорректировки.Очистить();
	
	Если ТекущийОбъект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.АктуализацияБюджетов Тогда
		
		ДеревоАктуализации=РеквизитФормыВЗначение("ТаблицаАктуализации");
		МассивАктуализации=ДеревоАктуализации.Строки.НайтиСтроки(Новый Структура("НеАктуализировать",Ложь),Истина);
		
		Для Каждого Строка ИЗ МассивАктуализации Цикл
			
			НоваяСтрока=ТекущийОбъект.ШаблонКорректировки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			
		КонецЦикла;
		
	ИначеЕсли ТекущийОбъект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.ОбратноеРаспределение Тогда
		
		ДеревоРаспределения=РеквизитФормыВЗначение("ТаблицаОбратногоРаспределения");
		МассивРаспределения=ДеревоРаспределения.Строки.НайтиСтроки(Новый Структура("НеРаспределять",Ложь),Истина);
		
		Для Каждого Строка ИЗ МассивРаспределения Цикл
			
			НоваяСтрока=ТекущийОбъект.ШаблонКорректировки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			
		КонецЦикла;
			
	Иначе
		
		Для Каждого Строка ИЗ ТаблицаКорректировок Цикл
			
			НоваяСтрока=ТекущийОбъект.ШаблонКорректировки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			
		КонецЦикла;
		
	КонецЕсли;

	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПоказателиАктуализации(Команда)
	
	СтруктураПараметров = Новый Структура;
    ОписаниеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьСпособАктуализации_Завершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ШаблоныКорректировокЗначенийПоказателей.Форма.ВыборСпособаАктуализацииПоказателей", СтруктураПараметров, ЭтаФорма, , , , ОписаниеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпособАктуализации_Завершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры=Неопределено Тогда
		
		ЗаполнитьПоказателиАктуализацииСервер(ВыбранноеЗначение);
		
	Иначе
		
		ЗаполнитьПоказателиАктуализацииСерверСтрока(ВыбранноеЗначение,ДополнительныеПараметры);
		
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьКлючевыеРеквизиты_Завершение()

&НаСервере
Процедура  ЗаполнитьПоказателиАктуализацииСервер(СпособАктуализации)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ПоказателиОтчетов.Ссылка КАК Ссылка
	             |ИЗ
	             |	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	             |ГДЕ
	             |	ПоказателиОтчетов.Владелец В(&ВидыОтчетов)";
	
	ТекВидыОтчетов=Объект.ИспользуемыеВидыОтчетов.Выгрузить().ВыгрузитьКолонку("ВидОтчета");

	Запрос.УстановитьПараметр("ВидыОтчетов",ТекВидыОтчетов);
	Объект.ШаблонКорректировки.Очистить();
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока=Объект.ШаблонКорректировки.Добавить();
		НоваяСтрока.Показатель=Результат.Ссылка;
		НоваяСтрока.ДействияПриАктуализации=СпособАктуализации;
		
	КонецЦикла;
	
	ЗаполнитьДеревоАктуализации();
		
КонецПроцедуры // ЗаполнитьПоказателиАктуализациие()

&НаСервере
Процедура  ЗаполнитьПоказателиАктуализацииСерверСтрока(СпособАктуализации,ДополнительныеПараметры)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Строка В(&Строка)";
		
	Запрос.УстановитьПараметр("Строка",ДополнительныеПараметры.СтрокаОтчета);
		
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		МассивПоказатель=Объект.ШаблонКорректировки.НайтиСтроки(Новый Структура("Показатель",Результат.Ссылка));
		
		Если МассивПоказатель.Количество()=1 Тогда
			
			МассивПоказатель[0].ДействияПриАктуализации=СпособАктуализации;
			
		КонецЕсли;
		
	КонецЦикла;
			
	ЗаполнитьДеревоАктуализации();
		
КонецПроцедуры // ЗаполнитьПоказателиАктуализациие()

&НаСервере
Процедура ЗаполнитьДеревоАктуализации()
	
	ТекТаблицаАктуализации=Объект.ШаблонКорректировки.Выгрузить();
	ТекВидыОтчетов=Объект.ИспользуемыеВидыОтчетов.Выгрузить().ВыгрузитьКолонку("ВидОтчета");
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТекТаблицаАктуализации.Показатель КАК Показатель,
	|	ТекТаблицаАктуализации.ДействияПриАктуализации КАК ДействияПриАктуализации
	|ПОМЕСТИТЬ ТекТаблицаАктуализации
	|ИЗ
	|	&ТекТаблицаАктуализации КАК ТекТаблицаАктуализации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Показатель,
	|	ВЫБОР
	|		КОГДА ТекТаблицаАктуализации.ДействияПриАктуализации ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДействияПриАктуализацииБюджетов.ПустаяСсылка)
	|		ИНАЧЕ ТекТаблицаАктуализации.ДействияПриАктуализации
	|	КОНЕЦ КАК ДействияПриАктуализации,
	|	ВЫБОР
	|		КОГДА ТекТаблицаАктуализации.ДействияПриАктуализации ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеАктуализировать,
	|	ПоказателиОтчетов.Строка.Родитель КАК СтрокаРодитель,
	|	ПоказателиОтчетов.Строка.Ссылка КАК СтрокаСсылка,
	|	ПоказателиОтчетов.Владелец КАК ВидОтчета
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТекТаблицаАктуализации КАК ТекТаблицаАктуализации
	|		ПО ПоказателиОтчетов.Ссылка = ТекТаблицаАктуализации.Показатель
	|ГДЕ
	|	ПоказателиОтчетов.Владелец В(&ВидыОтчетов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидОтчета,
	|	ПоказателиОтчетов.Строка.ПорядковыйНомер ИЕРАРХИЯ,
	|	ПоказателиОтчетов.Колонка.ПорядковыйНомер";
	
	Запрос.УстановитьПараметр("ТекТаблицаАктуализации",ТекТаблицаАктуализации);
	Запрос.УстановитьПараметр("ВидыОтчетов",ТекВидыОтчетов);
	
	ДеревоПоказателей=РеквизитФормыВЗначение("ТаблицаАктуализации");
	ДеревоПоказателей.Строки.Очистить();
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Результат.СтрокаРодитель) Тогда
			
			МассивРодитель=ДеревоПоказателей.Строки.НайтиСтроки(Новый Структура("СтрокаОтчета",Результат.СтрокаСсылка),Истина);
			
			Если МассивРодитель.Количество()=0 Тогда
				
				СтрокаРодитель=ДеревоПоказателей.Строки.Добавить();
				СтрокаРодитель.СтрокаОтчета=Результат.СтрокаСсылка;
				СтрокаРодитель.ВидОтчета=Результат.ВидОтчета;
				
			Иначе
				
				СтрокаРодитель=МассивРодитель[0];
				
			КонецЕсли;
			
			Если НЕ СтрокаРодитель.СтрокаОтчета=Результат.СтрокаСсылка Тогда
				
				МассивПодчиненные=СтрокаРодитель.Строки.НайтиСтроки(Новый Структура("СтрокаОтчета",Результат.СтрокаСсылка),Истина);
				
				Если МассивПодчиненные.Количество()=0 Тогда
					
					СтрокаПодчиненные=СтрокаРодитель.Строки.Добавить();
					СтрокаПодчиненные.СтрокаОтчета=Результат.СтрокаСсылка;
					СтрокаПодчиненные.ВидОтчета=Результат.ВидОтчета;
					
					НоваяСтрока=СтрокаПодчиненные.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
					НоваяСтрока.СтрокаОтчета=Результат.СтрокаСсылка;
					НоваяСтрока.ВидОтчета=Результат.ВидОтчета;

					
				Иначе
					
					СтрокаПодчиненные=МассивПодчиненные[0].Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПодчиненные,Результат);
					СтрокаПодчиненные.СтрокаОтчета=Результат.СтрокаСсылка;
					СтрокаПодчиненные.ВидОтчета=Результат.ВидОтчета;
					
				КонецЕсли;
				
			Иначе
				
				СтрокаПодчиненные=СтрокаРодитель.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПодчиненные,Результат);
				СтрокаПодчиненные.СтрокаОтчета=Результат.СтрокаСсылка;
				СтрокаПодчиненные.ВидОтчета=Результат.ВидОтчета;
				
			КонецЕсли;	
			
		Иначе
			
			МассивРодитель=ДеревоПоказателей.Строки.НайтиСтроки(Новый Структура("СтрокаОтчета",Результат.СтрокаРодитель),Истина);
			
			Если МассивРодитель[0].Строки.Количество()=0 Тогда
				
				СтрокаРодитель=МассивРодитель[0].Строки.Добавить();
				СтрокаРодитель.СтрокаОтчета=Результат.СтрокаСсылка;
				СтрокаРодитель.ВидОтчета=Результат.ВидОтчета;
		
			Иначе
				
				СтрокаРодитель=МассивРодитель[0];
				
			КонецЕсли;
			
			МассивПодчиненные=СтрокаРодитель.Строки.НайтиСтроки(Новый Структура("СтрокаОтчета",Результат.СтрокаСсылка),Истина);

			Если МассивПодчиненные.Количество()=0 Тогда
				
				СтрокаПодчиненные=СтрокаРодитель.Строки.Добавить();
				СтрокаПодчиненные.СтрокаОтчета=Результат.СтрокаСсылка;
				СтрокаПодчиненные.ВидОтчета=Результат.ВидОтчета;
				
				НоваяСтрока=СтрокаПодчиненные.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
				НоваяСтрока.СтрокаОтчета=Результат.СтрокаСсылка;
				
				НоваяСтрока.ВидОтчета=Результат.ВидОтчета;
	
			Иначе
				
				СтрокаПодчиненные=МассивПодчиненные[0].Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПодчиненные,Результат);
				СтрокаПодчиненные.СтрокаОтчета=Результат.СтрокаСсылка;
				СтрокаПодчиненные.ВидОтчета=Результат.ВидОтчета;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
			
	ЗначениеВРеквизитФормы(ДеревоПоказателей,"ТаблицаАктуализации");	
	
КонецПроцедуры // ЗаполнитьДеревоАктуализации()

&НаСервере
Процедура ЗаполнитьДеревоОбратногоРаспределения()
	
	ТекТаблицаРаспределения=Объект.ШаблонКорректировки.Выгрузить();
	ТекВидыОтчетов=Объект.ИспользуемыеВидыОтчетов.Выгрузить().ВыгрузитьКолонку("ВидОтчета");
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТекТаблицаРаспределения.Показатель КАК Показатель,
	|	ТекТаблицаРаспределения.МетодРаспределения КАК МетодРаспределения,
	|	ТекТаблицаРаспределения.УточнениеМетодаРаспределения КАК УточнениеМетодаРаспределения
	|ПОМЕСТИТЬ ТекТаблицаРаспределения
	|ИЗ
	|	&ТекТаблицаРаспределения КАК ТекТаблицаРаспределения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Показатель,
	|	ВЫБОР
	|		КОГДА ТекТаблицаРаспределения.МетодРаспределения ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.МетодыОбратногоРаспределения.НеРаспределять)
	|		ИНАЧЕ ТекТаблицаРаспределения.МетодРаспределения
	|	КОНЕЦ КАК МетодРаспределения,
	|	ВЫБОР
	|		КОГДА ТекТаблицаРаспределения.МетодРаспределения ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеРаспределять,
	|	ТекТаблицаРаспределения.УточнениеМетодаРаспределения КАК УточнениеМетодаРаспределения,
	|	ПоказателиОтчетов.Строка.Родитель КАК СтрокаРодитель,
	|	ПоказателиОтчетов.Строка.Ссылка КАК СтрокаСсылка,
	|	ПоказателиОтчетов.Владелец КАК ВидОтчета
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТекТаблицаРаспределения КАК ТекТаблицаРаспределения
	|		ПО ПоказателиОтчетов.Ссылка = ТекТаблицаРаспределения.Показатель
	|ГДЕ
	|	ПоказателиОтчетов.Владелец В(&ВидыОтчетов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидОтчета,
	|	ПоказателиОтчетов.Строка.ПорядковыйНомер ИЕРАРХИЯ,
	|	ПоказателиОтчетов.Колонка.ПорядковыйНомер";
	
	Запрос.УстановитьПараметр("ТекТаблицаРаспределения",ТекТаблицаРаспределения);
	Запрос.УстановитьПараметр("ВидыОтчетов",ТекВидыОтчетов);
	
	ДеревоПоказателей=РеквизитФормыВЗначение("ТаблицаОбратногоРаспределения");
	ДеревоПоказателей.Строки.Очистить();
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Результат.СтрокаРодитель) Тогда
			
			МассивРодитель=ДеревоПоказателей.Строки.НайтиСтроки(Новый Структура("СтрокаОтчета",Результат.СтрокаСсылка),Истина);
			
			Если МассивРодитель.Количество()=0 Тогда
				
				СтрокаРодитель=ДеревоПоказателей.Строки.Добавить();
				СтрокаРодитель.СтрокаОтчета=Результат.СтрокаСсылка;
				СтрокаРодитель.ВидОтчета=Результат.ВидОтчета;
				
			Иначе
				
				СтрокаРодитель=МассивРодитель[0];
				
			КонецЕсли;
			
			Если НЕ СтрокаРодитель.СтрокаОтчета=Результат.СтрокаСсылка Тогда
				
				МассивПодчиненные=СтрокаРодитель.Строки.НайтиСтроки(Новый Структура("СтрокаОтчета",Результат.СтрокаСсылка),Истина);
				
				Если МассивПодчиненные.Количество()=0 Тогда
					
					СтрокаПодчиненные=СтрокаРодитель.Строки.Добавить();
					СтрокаПодчиненные.СтрокаОтчета=Результат.СтрокаСсылка;
					СтрокаПодчиненные.ВидОтчета=Результат.ВидОтчета;
					
					НоваяСтрока=СтрокаПодчиненные.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
					НоваяСтрока.СтрокаОтчета=Результат.СтрокаСсылка;
					НоваяСтрока.ВидОтчета=Результат.ВидОтчета;

					
				Иначе
					
					СтрокаПодчиненные=МассивПодчиненные[0].Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПодчиненные,Результат);
					СтрокаПодчиненные.СтрокаОтчета=Результат.СтрокаСсылка;
					СтрокаПодчиненные.ВидОтчета=Результат.ВидОтчета;
					
				КонецЕсли;
				
			Иначе
				
				СтрокаПодчиненные=СтрокаРодитель.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПодчиненные,Результат);
				СтрокаПодчиненные.СтрокаОтчета=Результат.СтрокаСсылка;
				СтрокаПодчиненные.ВидОтчета=Результат.ВидОтчета;
				
			КонецЕсли;	
			
		Иначе
			
			МассивРодитель=ДеревоПоказателей.Строки.НайтиСтроки(Новый Структура("СтрокаОтчета",Результат.СтрокаРодитель),Истина);
			
			Если МассивРодитель[0].Строки.Количество()=0 Тогда
				
				СтрокаРодитель=МассивРодитель[0].Строки.Добавить();
				СтрокаРодитель.СтрокаОтчета=Результат.СтрокаСсылка;
				СтрокаРодитель.ВидОтчета=Результат.ВидОтчета;
		
			Иначе
				
				СтрокаРодитель=МассивРодитель[0];
				
			КонецЕсли;
			
			МассивПодчиненные=СтрокаРодитель.Строки.НайтиСтроки(Новый Структура("СтрокаОтчета",Результат.СтрокаСсылка),Истина);

			Если МассивПодчиненные.Количество()=0 Тогда
				
				СтрокаПодчиненные=СтрокаРодитель.Строки.Добавить();
				СтрокаПодчиненные.СтрокаОтчета=Результат.СтрокаСсылка;
				СтрокаПодчиненные.ВидОтчета=Результат.ВидОтчета;
				
				НоваяСтрока=СтрокаПодчиненные.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
				НоваяСтрока.СтрокаОтчета=Результат.СтрокаСсылка;
				
				НоваяСтрока.ВидОтчета=Результат.ВидОтчета;
	
			Иначе
				
				СтрокаПодчиненные=МассивПодчиненные[0].Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПодчиненные,Результат);
				СтрокаПодчиненные.СтрокаОтчета=Результат.СтрокаСсылка;
				СтрокаПодчиненные.ВидОтчета=Результат.ВидОтчета;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
			
	ЗначениеВРеквизитФормы(ДеревоПоказателей,"ТаблицаОбратногоРаспределения");	
	
КонецПроцедуры // ЗаполнитьДеревоАктуализации()



&НаСервере
Процедура ЗаполнитьПоказателиАктуализацииСтрокаНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказателиАктуализацииСтрока(Команда)
	
	СтрокаАктуализации=Элементы.ТаблицаАктуализации.ТекущиеДанные;
	
	Если СтрокаАктуализации=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
    ОписаниеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьСпособАктуализации_Завершение", ЭтотОбъект,Новый Структура("СтрокаОтчета",СтрокаАктуализации.СтрокаОтчета));
	СтруктураПараметров.Вставить("ВидОтчета", СтрокаАктуализации.ВидОтчета);
	ОткрытьФорму("Справочник.ШаблоныКорректировокЗначенийПоказателей.Форма.ВыборСпособаАктуализацииПоказателей", СтруктураПараметров, ЭтаФорма, , , , ОписаниеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыеВидыОтчетовПередУдалением(Элемент, Отказ)
	
	Если Объект.СпособВводаКорректировки=ПредопределенноеЗначение("Перечисление.СпособыВводаКорректировок.АктуализацияБюджетов") Тогда
		
		ЗаполнитьДеревоАктуализации();
		
	Иначе
			
		МассивКУдалению=ТаблицаКорректировок.НайтиСтроки(Новый Структура("ВидОтчета",Элементы.ИспользуемыеВидыОтчетов.ТекущиеДанные.ВидОтчета));
		
		Для Каждого Строка ИЗ МассивКУдалению Цикл
			
			ТаблицаКорректировок.Удалить(Строка);
			
		КонецЦикла;
		
		ЗаполнитьСписокВидовОтчетов();
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииИспользуемыхВидовОтчетов()
	
	Если Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.АктуализацияБюджетов  Тогда
		
		ЗаполнитьДеревоАктуализации();
		
	ИначеЕсли Объект.СпособВводаКорректировки=Перечисления.СпособыВводаКорректировок.ОбратноеРаспределение Тогда
		
		ЗаполнитьДеревоОбратногоРаспределения();
		
	Иначе
		
		ЗаполнитьСписокВидовОтчетов();
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииИспользуемыхВидовОтчетов() 

&НаСервере
Процедура ЗаполнитьСписокВидовОтчетов()
	
	Элементы.ВидОтчета.СписокВыбора.Очистить();
	
	Для Каждого Строка ИЗ Объект.ИспользуемыеВидыОтчетов Цикл
				
		Элементы.ВидОтчета.СписокВыбора.Добавить(Строка.ВидОтчета);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСписокВидовОтчетов()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьСписокВидовОтчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаАктуализацииПриИзменении(Элемент)
	
	Элементы.ТаблицаАктуализации.ТекущиеДанные.НеАктуализировать=(Элементы.ТаблицаАктуализации.ТекущиеДанные.ДействияПриАктуализации=ПредопределенноеЗначение("Перечисление.ДействияПриАктуализацииБюджетов.ПустаяСсылка"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыеВидыОтчетовПриИзменении(Элемент)
	
	ПриИзмененииИспользуемыхВидовОтчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыОбратногоРаспределенияСтрока(Команда)
	
	СтрокаРаспределения=Элементы.ТаблицаОбратногоРаспределения.ТекущиеДанные;
	
	Если СтрокаРаспределения=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
    ОписаниеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьСпособОбратногоРаспределения_Завершение", ЭтотОбъект,Новый Структура("СтрокаОтчета",СтрокаРаспределения.СтрокаОтчета));
	СтруктураПараметров.Вставить("ВидОтчета", СтрокаРаспределения.ВидОтчета);
	ОткрытьФорму("Справочник.ШаблоныКорректировокЗначенийПоказателей.Форма.ВыборСпособаОбратногоРаспределения", СтруктураПараметров, ЭтаФорма, , , , ОписаниеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыОбратногоРаспределенияВсе(Команда)
	
	СтруктураПараметров = Новый Структура;
    ОписаниеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьСпособОбратногоРаспределения_Завершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ШаблоныКорректировокЗначенийПоказателей.Форма.ВыборСпособаОбратногоРаспределения", СтруктураПараметров, ЭтаФорма, , , , ОписаниеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьСпособОбратногоРаспределения_Завершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры=Неопределено Тогда
		
		ЗаполнитьПоказателиОбратногоРаспределенияСервер(ВыбранноеЗначение);
		
	ИначеЕсли ДополнительныеПараметры.Свойство("ИдентификаторСтроки") Тогда
		
		СтрокаРаспределения=ТаблицаОбратногоРаспределения.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		СтрокаРаспределения.МетодРаспределения=ВыбранноеЗначение.МетодРаспределения;
		СтрокаРаспределения.УточнениеМетодаРаспределения=ВыбранноеЗначение.УточнениеМетодаРаспределения;
		СтрокаРаспределения.НеРаспределять=СтрокаРаспределения.МетодРаспределения=ПредопределенноеЗначение("Перечисление.МетодыОбратногоРаспределения.НеРаспределять");
				
	Иначе
		
		ЗаполнитьПоказателиОбратногоРаспределенияСерверСтрока(ВыбранноеЗначение,ДополнительныеПараметры);
		
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьКлючевыеРеквизиты_Завершение()

&НаСервере
Процедура  ЗаполнитьПоказателиОбратногоРаспределенияСервер(ПараметрыРаспределения)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец В(&ВидыОтчетов)";
	
	ТекВидыОтчетов=Объект.ИспользуемыеВидыОтчетов.Выгрузить().ВыгрузитьКолонку("ВидОтчета");

	Запрос.УстановитьПараметр("ВидыОтчетов",ТекВидыОтчетов);
	Объект.ШаблонКорректировки.Очистить();
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока=Объект.ШаблонКорректировки.Добавить();
		НоваяСтрока.Показатель=Результат.Ссылка;
		НоваяСтрока.МетодРаспределения=ПараметрыРаспределения.МетодРаспределения;
		НоваяСтрока.УточнениеМетодаРаспределения=ПараметрыРаспределения.УточнениеМетодаРаспределения;
		
	КонецЦикла;
	
	ЗаполнитьДеревоОбратногоРаспределения();
		
КонецПроцедуры // ЗаполнитьПоказателиАктуализациие()

&НаСервере
Процедура  ЗаполнитьПоказателиОбратногоРаспределенияСерверСтрока(ПараметрыРаспределения,ДополнительныеПараметры)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Строка В(&Строка)";
		
	Запрос.УстановитьПараметр("Строка",ДополнительныеПараметры.СтрокаОтчета);
		
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		МассивПоказатель=Объект.ШаблонКорректировки.НайтиСтроки(Новый Структура("Показатель",Результат.Ссылка));
		
		Если МассивПоказатель.Количество()=1 Тогда
			
			МассивПоказатель[0].МетодРаспределения=ПараметрыРаспределения.МетодРаспределения;
			МассивПоказатель[0].УточнениеМетодаРаспределения=ПараметрыРаспределения.УточнениеМетодаРаспределения;

			
		КонецЕсли;
		
	КонецЦикла;
			
	ЗаполнитьДеревоОбратногоРаспределения();
		
КонецПроцедуры // ЗаполнитьПоказателиАктуализациие()

&НаКлиенте
Процедура ТаблицаОбратногоРаспределенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	СтрокаРаспределения=Элементы.ТаблицаОбратногоРаспределения.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(СтрокаРаспределения.Показатель) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
    ОписаниеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьСпособОбратногоРаспределения_Завершение", ЭтотОбъект,Новый Структура("ИдентификаторСтроки",СтрокаРаспределения.ПолучитьИдентификатор()));
	СтруктураПараметров.Вставить("ВидОтчета", СтрокаРаспределения.ВидОтчета);
	ОткрытьФорму("Справочник.ШаблоныКорректировокЗначенийПоказателей.Форма.ВыборСпособаОбратногоРаспределения", СтруктураПараметров, ЭтаФорма, , , , ОписаниеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	
КонецПроцедуры


	
	
	

