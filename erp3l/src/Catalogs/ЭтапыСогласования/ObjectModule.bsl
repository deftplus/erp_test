
Перем ОповещатьОбИзменении Экспорт;

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Владелец = Справочники.МаршрутыСогласования.Автоутверждение и НЕ Автоутверждение Тогда
		СообщениеОбОшибке = Новый СообщениеПользователю;
		СообщениеОбОшибке.Текст = "Этапы предопределенного маршрута создаются и изменяются только программой!";
		СообщениеОбОшибке.Сообщить();
		Отказ = истина;
		Возврат;	
	КонецЕсли;	
		
	
	Если НЕ ЗначениеЗаполнено(ТипЭтапа) И НЕ ЭтоГруппа Тогда
		
		СообщениеОбОшибке = Новый СообщениеПользователю;
		СообщениеОбОшибке.Текст = "Не выбран тип этапа согласования";
		СообщениеОбОшибке.Сообщить();
		Отказ = истина;
		Возврат;
		
	КонецЕсли;
		
	Если ТипЭтапа = Перечисления.ТипыЭтаповСогласования.ЭтапСогласования И Утверждающие.Количество() = 0 Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке("Для этапа должен быть указан хотя бы один утверждающий");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ДинамическийЭтап И НЕ ЭтоГруппа Тогда
		
		 ЭтапыПредшественники.Очистить();
		
		ТабличноеПолеПерехода = УсловияСогласования.Получить();
		Если НЕ ТабличноеПолеПерехода = НЕОПРЕДЕЛЕНО Тогда
			ТабличноеПолеПерехода.Строки.Очистить();
			ОбновитьТаблицыПредшественников(ТабличноеПолеПерехода);
			УсловияСогласования = Новый ХранилищеЗначения(ТабличноеПолеПерехода);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		
		Запрос = Новый ЗАпрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭтапыСогласованияЭтапыПредшественники.Этап КАК ЭтапСогласования
		|ИЗ
		|	Справочник.ЭтапыСогласования.ЭтапыПредшественники КАК ЭтапыСогласованияЭтапыПредшественники
		|ГДЕ
		|	ЭтапыСогласованияЭтапыПредшественники.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ЭтапыПредшественники.Очистить();
		
		ТабличноеПолеПерехода = УсловияСогласования.Получить();
		Если НЕ ТабличноеПолеПерехода = НЕОПРЕДЕЛЕНО Тогда
			ТабличноеПолеПерехода.Строки.Очистить();
			ОбновитьТаблицыПредшественников(ТабличноеПолеПерехода);
			УсловияСогласования = Новый ХранилищеЗначения(ТабличноеПолеПерехода);
		КонецЕсли;
	КонецЕсли;

	
	ОбщегоНазначенияУХ.УстановитьНовыйПорядковыйНомерПриНеобходимости(ЭтотОбъект);
	
КонецПроцедуры

Процедура УстановитьЛинейныйПереход(ЭтапПерехода) Экспорт
	
	ТекУсловияСогласования = УсловияСогласования.Получить();
	
	Если ТипЗнч(ТекУсловияСогласования) <> Тип("ДеревоЗначений") Тогда
		ТекУсловияСогласования = Новый ДеревоЗначений;
		ТекУсловияСогласования.Колонки.Добавить("ОтображениеДействия", Новый ОписаниеТипов("Число"));
		ТекУсловияСогласования.Колонки.Добавить("УсловиеДействие"    , Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные, ПеречислениеСсылка.УсловияЭтапа, ПеречислениеСсылка.ДействияЭтапа"));
		ТекУсловияСогласования.Колонки.Добавить("Значение", Новый ОписаниеТипов("ВидСравнения, СправочникСсылка.ЭтапыСогласования"));
		ТекУсловияСогласования.Колонки.Добавить("ЗначениеОтбора", Новый ОписаниеТипов("СправочникСсылка.Пользователи, СписокЗначений, СправочникСсылка.ПроизвольныйКлассификаторУХ, СправочникСсылка.КонтрольныеСоотношения, СправочникСсылка.Организации, СправочникСсылка.ВидыОтчетов"));
		ТекУсловияСогласования.Колонки.Добавить("ЯвляетсяУсловием", Новый ОписаниеТипов("Булево"));
		ТекУсловияСогласования.Колонки.Добавить("ОбработкаУсловия", Новый ОписаниеТипов("Число"));
		
	ИначеЕсли ТекУсловияСогласования.Строки.НайтиСтроки(Новый Структура("УсловиеДействие, Значение", Перечисления.ДействияЭтапа.ПерейтиКЭтапу, ЭтапПерехода)).Количество() = 0 Тогда
		НоваяСтрока = ТекУсловияСогласования.Строки.Добавить();
		НоваяСтрока.УсловиеДействие = Перечисления.ДействияЭтапа.ПерейтиКЭтапу;
		НоваяСтрока.Значение        = ЭтапПерехода;
		УсловияСогласования = Новый ХранилищеЗначения(ТекУсловияСогласования);
		
	Иначе
		Возврат;
	КонецЕсли;
	
	ОбновитьТаблицыПредшественников(ТекУсловияСогласования);
	Записать();
	
КонецПроцедуры

Процедура УдалитьВхожденияЭтапа(ЭтапПроцесса) Экспорт
	
	ТабличноеПолеПерехода = УсловияСогласования.Получить();
	
	МассивСтрок = Новый Массив;
	УдалитьСтрокиЭтапаРекурсивно(ТабличноеПолеПерехода.Строки, ЭтапПроцесса);
	
	УсловияСогласования = Новый ХранилищеЗначения(ТабличноеПолеПерехода);
	
КонецПроцедуры

Процедура ВернутьСтрокиВхожденияЭтапа(Массив, Строки, Этап)
	
	Для Каждого Строка ИЗ Строки Цикл
		Если НЕ Строка.ЯвляетсяУсловием Тогда
			Если Строка.УсловиеДействие = Перечисления.ДействияЭтапа.ПерейтиКЭтапу Тогда
				Если Строка.Значение = Этап Тогда
					Если Массив.Найти(Строка) = Неопределено Тогда
						Массив.Добавить(Строка);
					КонеЦЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Для Каждого Строка_Условия Из Строка.Строки Цикл
				ВернутьРекурсивноВсеСсылкиНаЭтапы(Массив, Строка_Условия.Строки);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	
КонецПроцедуры

Процедура УдалитьСтрокиЭтапаРекурсивно(Строки, Этап)
	
	МассивУдаляемыхСтрок = Новый Массив;
	
	Для Каждого Строка ИЗ Строки Цикл
		Если НЕ Строка.ЯвляетсяУсловием Тогда
			Если Строка.УсловиеДействие = Перечисления.ДействияЭтапа.ПерейтиКЭтапу Тогда
				Если Строка.Значение = Этап И МассивУдаляемыхСтрок.Найти(Строка) = Неопределено Тогда
					МассивУдаляемыхСтрок.Добавить(Строка);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Для Каждого Строка_Условия Из Строка.Строки Цикл
				УдалитьСтрокиЭтапаРекурсивно(Строка_Условия.Строки, Этап);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из МассивУдаляемыхСтрок Цикл
		Строки.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьТаблицыПредшественников(ТабличноеПолеПерехода) Экспорт
	
	Запрос = Новый ЗАпрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ Ссылка ИЗ Справочник.ЭтапыСогласования.ЭтапыПредшественники
	|ГДЕ Этап = &Этап";
	Запрос.УстановитьПараметр("Этап", Ссылка);
	ТаблицаПоказателей = Запрос.Выполнить().Выгрузить();
	
	МассивЭтаповПоследователей = Новый Массив;
	
	ВернутьРекурсивноВсеСсылкиНаЭтапы(МассивЭтаповПоследователей, ТабличноеПолеПерехода.Строки);
	
	Для Каждого Строка ИЗ ТаблицаПоказателей Цикл
		ЗаписьМассива = МассивЭтаповПоследователей.Найти(Строка.Ссылка);
		Если ЗаписьМассива = Неопределено Тогда
			ТекОбъект = Строка.Ссылка.ПолучитьОбъект();
			УдаляемыеСтроки = ТекОбъект.ЭтапыПредшественники.НайтиСтроки(Новый Структура("Этап", Ссылка));
			Для Каждого Строка Из УдаляемыеСтроки Цикл
				ТекОбъект.ЭтапыПредшественники.Удалить(Строка);
			КонецЦикла;
			ТекОбъект.ОповещатьОбИзменении = Ложь;
			ТекОбъект.Записать();
		Иначе
			МассивЭтаповПоследователей.Удалить(ЗаписьМассива);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из МассивЭтаповПоследователей Цикл
		ТекОбъект = Элемент.ПолучитьОбъект();
		ТекОБъект.ЭтапыПредшественники.Добавить().Этап = Ссылка;
		ТекОбъект.ОповещатьОбИзменении = Ложь;
		ТекОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ВернутьРекурсивноВсеСсылкиНаЭтапы(Массив, Строки) Экспорт
	
	Для Каждого Строка ИЗ Строки Цикл
		Если НЕ Строка.ЯвляетсяУсловием Тогда
			Если Строка.УсловиеДействие = Перечисления.ДействияЭтапа.ПерейтиКЭтапу Тогда
				Если ЗначениеЗаполнено(Строка.Значение) Тогда
					Если Массив.Найти(Строка.Значение) = Неопределено Тогда
						Массив.Добавить(Строка.Значение);
					КонеЦЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Для Каждого Строка_Условия Из Строка.Строки Цикл
				ВернутьРекурсивноВсеСсылкиНаЭтапы(Массив, Строка_Условия.Строки);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


Функция ПроверитьНаЦикличностьПереходов(Этап)
	
	Для Каждого Элемент Из Этап.ЭтапыПредшественники Цикл
		Если Элемент.Этап = Ссылка Тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке("Обнаружена циклическая ссылка на этап " + Ссылка + " в этапе " + Этап);
			Возврат Ложь;
		Иначе
			Если НЕ ПроверитьНаЦикличностьПереходов(Элемент.Этап) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Отказ = НЕ ПроверитьНаЦикличностьПереходов(Ссылка);
	
	
	Если НЕ Отказ И (НЕ ЗначениеЗаполнено(ОповещатьОбИзменении) ИЛИ ОповещатьОбИзменении) Тогда
		#Если Клиент Тогда
			Оповестить("СохраненЭтапСогласования", Владелец);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры
