
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


// Функция возвращает список групп раскрытия текущего вида отчета.
//
Функция ПолучитьСписокГруппРаскрытия(ВидОтчета) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ГруппыРаскрытия.Ссылка,
						  |	ГруппыРаскрытия.Код
	                      |ИЗ
	                      |	Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
	                      |ГДЕ
	                      |	ГруппыРаскрытия.Владелец = &Владелец
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ГруппыРаскрытия.Наименование");
	Запрос.УстановитьПараметр("Владелец", ВидОтчета);
	Выборка = Запрос.Выполнить().Выбрать();
	СписокГруппРаскрытия = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		СписокГруппРаскрытия.Добавить(Выборка.Ссылка, СокрЛП(Выборка.Код));
	КонецЦикла;
	Возврат СписокГруппРаскрытия;
	
КонецФункции

Процедура ЗаполнитьКэшПоказателей(КэшФункцийПоказателей, Показатель = Неопределено, ПравилоОбработки, Владелец) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроцедурыРасчетов.ПотребительРасчета КАК ПотребительРасчета,
	|	ПроцедурыРасчетов.Процедура,
	|	ПроцедурыРасчетов.ПроизвольныйКод,
	|	ПроцедурыРасчетов.ПересчитыватьПриОткрытии,
	|	ПроцедурыРасчетов.РедактированиеВозможно	
	|ПОМЕСТИТЬ ПроцедурыРасчетов
	|ИЗ
	|	РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
	|ГДЕ
	|	ПроцедурыРасчетов.НазначениеРасчетов = &НазначениеРасчетов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПотребительРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиОтчетов.Код,
	|	ПоказателиОтчетов.Ссылка,
	|	ПоказателиОтчетов.Наименование,
	|	ЕСТЬNULL(ПроцедурыРасчетов.Процедура, """") КАК Процедура,
	|	ЕСТЬNULL(ПроцедурыРасчетов.ПересчитыватьПриОткрытии, ЛОЖЬ) КАК ПересчитыватьПриОткрытии,
	|	ЕСТЬNULL(ПроцедурыРасчетов.РедактированиеВозможно, ЛОЖЬ) КАК РедактированиеВозможно,
	|	ЕСТЬNULL(ПроцедурыРасчетов.ПроизвольныйКод, ЛОЖЬ) КАК ПроизвольныйКод	
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПроцедурыРасчетов КАК ПроцедурыРасчетов
	|		ПО ПоказателиОтчетов.Ссылка = ПроцедурыРасчетов.ПотребительРасчета
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &Владелец
	|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("НазначениеРасчетов", ПравилоОбработки);
	Запрос.УстановитьПараметр("Владелец"        , Владелец);
	
	Если ТипЗнч(КэшФункцийПоказателей) = Тип("ТаблицаЗначений") И ЗначениеЗаполнено(Показатель) Тогда
		
		Запрос.Текст = Запрос.Текст + " И ПоказателиОтчетов.Ссылка = &Показатель";
		Запрос.УстановитьПараметр("Показатель", Показатель);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ТекСтрока = КэшФункцийПоказателей.Найти(Показатель, "Ссылка");
			Если ТекСтрока = Неопределено Тогда
				ТекСтрока = КэшФункцийПоказателей.Добавить();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка, , "Код");
			ТекСтрока.Код = СокрЛП(Выборка.Код);
		КонецЕсли;
	Иначе
		
		КэшФункцийПоказателей = Новый ТаблицаЗначений;
		
		КэшФункцийПоказателей.Колонки.Добавить("Код"      , ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
		КэшФункцийПоказателей.Колонки.Добавить("Процедура", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
		КэшФункцийПоказателей.Колонки.Добавить("ПроцедураРедактирования",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
		КэшФункцийПоказателей.Колонки.Добавить("АдресС1К1",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
		КэшФункцийПоказателей.Колонки.Добавить("Ссылка"   , Новый ОписаниеТипов("СправочникСсылка.ПоказателиОтчетов"));
		КэшФункцийПоказателей.Колонки.Добавить("Наименование");
		КэшФункцийПоказателей.Колонки.Добавить("СпособОбработки");
		КэшФункцийПоказателей.Колонки.Добавить("ПроизвольныйКод",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		КэшФункцийПоказателей.Колонки.Добавить("ПересчитыватьПриОткрытии",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		КэшФункцийПоказателей.Колонки.Добавить("РедактированиеВозможно",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());

		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = КэшФункцийПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, ,"Код");
			НоваяСтрока.Код = СокрЛП(Выборка.Код);
		КонецЦикла;
		
		КэшФункцийПоказателей.Индексы.Добавить("Код, Ссылка");
		
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПоРодителю(Объект) Экспорт
	
	ОбщегоНазначенияУХ.НаследоватьРеквизитПоРодителю(Объект,"Предназначение",Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ПроизвольныеДанные);
	
	ТекПланыСчетов=Справочники.ПланыСчетовБД.Выбрать(,Справочники.ТипыБазДанных.ТекущаяИБ);
	
	Если ТекПланыСчетов.Следующий() Тогда
		ТекПланСчетов=ТекПланыСчетов.Ссылка;
	КонецЕсли;
	
	Если Не Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ПроизвольныеДанные Тогда
		
		ОбщегоНазначенияУХ.НаследоватьРеквизитПоРодителю(Объект,"ПланСчетов",ТекПланСчетов);
		ОбщегоНазначенияУХ.НаследоватьРеквизитПоРодителю(Объект,"РегистрБухгалтерии");
		
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьРеквизитыПоРодителю()

// Возвращает незанятое наименование по умолчанию для бланка отчета, принадлежащего
// виду отчета ВидОтчетаВход.
Функция СгенерироватьНаименованиеНовогоБланкаДляВидаОтчета(ВидОтчетаВход) Экспорт
	РезультатФункции = "";
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БланкиОтчетов.Ссылка,
		|	БланкиОтчетов.Наименование
		|ИЗ
		|	Справочник.БланкиОтчетов КАК БланкиОтчетов
		|ГДЕ
		|	БланкиОтчетов.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", ВидОтчетаВход);
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	МассивНаименований = Выгрузка.ВыгрузитьКолонку("Наименование");
	ЗначениеНайдено = Ложь;
	Счетчик = 1;
	Пока (НЕ ЗначениеНайдено) И (Счетчик < 10000) Цикл
		НовоеНаименование = НСтр("ru = '%ВидОтчета% бланк %Номер%'");
		НовоеНаименование = СтрЗаменить(НовоеНаименование, "%ВидОтчета%", Строка(ВидОтчетаВход));
		НовоеНаименование = СтрЗаменить(НовоеНаименование, "%Номер%", Строка(Счетчик));
		Если МассивНаименований.Найти(НовоеНаименование) = Неопределено Тогда
			ЗначениеНайдено = Истина;
			РезультатФункции = НовоеНаименование;
		Иначе
			// Выполняем далее.
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

#Область ЗапросТаблицыЗначенийПоказателей

// Функция - Получить запрос таблицы значений показателей
//
// Параметры:
//  ОтборВерсий				 - Соответствие(Доступны: ПериодОтчета,ВидОтчета,Сценарий,ЭкземплярОтчета,Регистратор,...) - отбор по Справочник.ВерсииЗначенийПоказателей
//  ОтборПоказателей		 - Соответствие(Доступны: ПоказательОтчета,СчетБД,ВидИтогаПоСчету) - отбор по Справочник.ПоказателиОтчетов
//  ОтборАналитик			 - Соответствие(Доступны: Аналитика1,Аналитика2,Аналитика3,Аналитика4,Аналитика5,Аналитика6) - отбор по аналитикам
//  ПоляВыборки				 - Соответствие(= Неопределено)	 - 
//  ДополнительныеПараметры	 - Структура(= Неопределено) - 
// Возвращаемое значение:
// 	Запрос - Подготовленный Запрос, с установленными параметрами
Функция ПолучитьЗапросТаблицыЗначенийПоказателей(ОтборВерсий, ОтборПоказателей = Неопределено, ОтборАналитик = Неопределено, ПоляВыборки = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	Построитель = Новый ПостроительЗапроса(ТекстПостроителяЗапросаТаблицаЗначенийПоказателей());
	
	ДобавитьОтборыВПостроитель(Построитель, ОтборВерсий);
	
	Если ОтборПоказателей <> Неопределено Тогда
		ДобавитьОтборыВПостроитель(Построитель, ОтборПоказателей);
	КонецЕсли;

	Если ОтборАналитик <> Неопределено Тогда
		ДобавитьОтборыВПостроитель(Построитель, ОтборАналитик);
	КонецЕсли;
	
	Если ПоляВыборки <> Неопределено Тогда
		Для каждого ПолеИсточник Из ПоляВыборки Цикл
			ИмяЭлемента = ?(ПолеИсточник.Значение = Неопределено, ПолеИсточник.Ключ, ПолеИсточник.Значение);
			ЭлементОтбора = Построитель.ВыбранныеПоля.Добавить(ИмяЭлемента, ПолеИсточник.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	Построитель.Параметры.Вставить("ПолучитьСинтетику", 		Ложь);
	Построитель.Параметры.Вставить("ПолучитьТолькоСинтетику",	Ложь);
	Построитель.Параметры.Вставить("ПолучитьНечисловые", 		Ложь);
	Построитель.Параметры.Вставить("СубконтоКонтрагент", 		ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникКонтрагенты);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("ФиксированнаяГруппаАналитик") Тогда
		    ДоработатьПостроительПоФиксированнойГруппеАналитик(Построитель, ДополнительныеПараметры.ФиксированнаяГруппаАналитик);		
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ПолучитьСинтетику") Тогда
			Построитель.Параметры.Вставить("ПолучитьСинтетику", ДополнительныеПараметры.ПолучитьСинтетику);
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ПолучитьТолькоСинтетику") Тогда
			Построитель.Параметры.Вставить("ПолучитьТолькоСинтетику", ДополнительныеПараметры.ПолучитьТолькоСинтетику);
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ПолучитьНечисловые") Тогда
			Построитель.Параметры.Вставить("ПолучитьНечисловые", ДополнительныеПараметры.ПолучитьНечисловые);
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Построитель.ПолучитьЗапрос();
	
КонецФункции

Функция ПолучитьЗапросЗначенийЧисловыхПоказателейСКД(НастройкиКомпоновкиДанных, ПолучитьТолькоСинтетику = Ложь) Экспорт

	ТиповыеОтчетыУХ.ДобавитьПараметр(НастройкиКомпоновкиДанных, "ПолучитьТолькоСинтетику", ПолучитьТолькоСинтетику);
	
	ТекстЗапроса = ТекстЗапросаТаблицаЗначенийЧисловыхПоказателей();	
	
	ИмяНабораДанных = "ЗапросЧисловыхПоказателей";	
	СКД = ТиповыеОтчетыУХ.ПолучитьСхемуКомпоновкиДанных(ТекстЗапроса, ИмяНабораДанных);	
	МакетКД = ТиповыеОтчетыУХ.ПолучитьМакетКомпоновкиДанныхКоллекции(СКД, НастройкиКомпоновкиДанных);
	
	//сформируем запрос по макету КД
	Запрос = Новый Запрос(МакетКД.НаборыДанных[ИмяНабораДанных].Запрос);
	Для каждого ПараметрМакета Из МакетКД.ЗначенияПараметров Цикл	
		Запрос.УстановитьПараметр(ПараметрМакета.Имя, ПараметрМакета.Значение);	
	КонецЦикла;
	
	Возврат Запрос;
		
КонецФункции

// Функция - Текст запроса использование значений показателей
//
// Параметры:
//  НомераТаблиц								 - <Структура(ключ - имя таблицы, Значение - номер таблицы в запросе)> - номера таблиц в запросе
//  ТекстЗапросаЗначенийПоказателей				 - <Строка> - текст запроса для получения таблицы значений показателей отчетов
//  ТекстЗапросаИспользованиеЗначенийПоказателей - <Строка>	- текст запроса использования значений показателей отчетов
//  ИмяТаблицыИспользованиеЗначенийПоказателей	 - <Строка>	- имя таблицы запроса использования значений показателей отчетов
//  СуфиксПромежуточныхЗапросов					 - <Строка>	- суфикс, добавляемый к именам запросов значений показателей, для повторного использования
// 
// Возвращаемое значение:
//   - текст запроса, состоящий из: 
//		1. Текст запроса получения значений показателей 
//		2. текст запроса использование значений показателей
//		3. текст запроса удаления таблиц получения значений показателей
//	вызов функции увеличивает счетчик НомераТаблиц
Функция ТекстЗапроса_ИспользованиеЗначенийПоказателей(НомераТаблиц, ТекстЗапросаЗначенийПоказателей, ТекстЗапросаИспользованиеЗначенийПоказателей, 
					ИмяТаблицыИспользованиеЗначенийПоказателей, СуфиксПромежуточныхЗапросов = "") Экспорт

	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаЗначенийПоказателей);
		
	ТаблицыДляУдаления = Новый Структура;
	
	Для НомерЗапроса = 0 По СхемаЗапроса.ПакетЗапросов.Количество()-1 Цикл
		
		ИмяТаблицыНачальное = СхемаЗапроса.ПакетЗапросов[НомерЗапроса].ТаблицаДляПомещения;
		Если ИмяТаблицыНачальное = "" Тогда
			
			Если НомерЗапроса = СхемаЗапроса.ПакетЗапросов.Количество()-1 Тогда
				// Имя временной таблицы, для использования в ТекстЗапросаИспользованиеЗначенийПоказателей
				// приводим запрос в получение временной таблицы
				ИмяТаблицы = "втЗначенияПоказателей" + СуфиксПромежуточныхЗапросов;
				СхемаЗапроса.ПакетЗапросов[НомерЗапроса].ТаблицаДляПомещения = ИмяТаблицы;
			Иначе	
				ИмяТаблицы = СтрШаблон("Таблица_%1_%2", Формат(НомерЗапроса, "ЧГ=0"), Формат(СуфиксПромежуточныхЗапросов, "ЧГ=0") );
				ТаблицыДляУдаления.Вставить(ИмяТаблицы, ИмяТаблицыНачальное);
			КонецЕсли;
			
		Иначе 
			
			ИмяТаблицы = ИмяТаблицыНачальное + СуфиксПромежуточныхЗапросов;
			ТаблицыДляУдаления.Вставить(ИмяТаблицы, ИмяТаблицыНачальное);
			
		КонецЕсли;
		
		НомераТаблиц.Вставить(ИмяТаблицы, НомераТаблиц.Количество());
				
	КонецЦикла;
	
	НомераТаблиц.Вставить(ИмяТаблицыИспользованиеЗначенийПоказателей, НомераТаблиц.Количество());
	
	ТекстЗапроса = Новый Массив;
	
	ТекстЗапроса.Добавить(СхемаЗапроса.ПолучитьТекстЗапроса());
	ТекстЗапроса.Добавить(ТекстЗапросаИспользованиеЗначенийПоказателей);
	
	Для каждого ТаблицаДляУдаления Из ТаблицыДляУдаления Цикл
		ТекстЗапроса.Добавить("УНИЧТОЖИТЬ " + ТаблицаДляУдаления.Значение);
		НомераТаблиц.Вставить("УНИЧТОЖИТЬ_" + ТаблицаДляУдаления.Ключ, НомераТаблиц.Количество());
	КонецЦикла;
	
	Возврат СтрСоединить(ТекстЗапроса, " ; "); 

КонецФункции

Функция ПолучитьТаблицуТК(Контекст, ГруппаАналитик, ПоляВыборки = Неопределено, ОтборАналитик = Неопределено) Экспорт
	
	Если НЕ Справочники.ФиксированныеГруппыАналитик.ГруппаЗаполнена(ГруппаАналитик, Ложь) Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ФиксированныеПоказатели = ГруппаАналитик.ФиксированныеПоказатели;	
	КоличествоПоказателей = ФиксированныеПоказатели.Количество();
		
	ДополнительныеПараметры = Новый Структура("ФиксированнаяГруппаАналитик", ГруппаАналитик);
	
	ОтборВерсий = Новый Структура;
	ОтборВерсий.Вставить("Организация", 			Контекст.Организация);
	ОтборВерсий.Вставить("Сценарий", 				Контекст.Сценарий);
	ОтборВерсий.Вставить("ПериодОтчета", 			Контекст.ПериодОтчета);
	ОтборВерсий.Вставить("Валюта", 					Контекст.Организация.ФункциональнаяВалюта);
	ОтборВерсий.Вставить("ВидОтчетаПоПоказателям",	Истина);
	
	ОтборПоказателей = Новый Структура;
	ОтборПоказателей.Вставить("ПоказательОтчета", ФиксированныеПоказатели.ВыгрузитьКолонку("ПоказательОтчетаИсточник"));
		
	ДополнительныеПараметры = Новый Структура("ФиксированнаяГруппаАналитик", ГруппаАналитик);
	
	Если ПоляВыборки = Неопределено Тогда
		ПоляВыборки = Новый Структура;	
	КонецЕсли;
	
	Если КоличествоПоказателей > 1 Тогда
		ПоляВыборки.Вставить("ПоказательОтчета", "ПоказательОтчета");
	КонецЕсли;	
	
	Запрос = Справочники.ВидыОтчетов.ПолучитьЗапросТаблицыЗначенийПоказателей(ОтборВерсий, 
																						ОтборПоказателей, 
																						ОтборАналитик, 
																						ПоляВыборки, 
																						ДополнительныеПараметры);
	
	ТаблицаПоказателей = Запрос.Выполнить().Выгрузить();
	КоличествоСтрок = ТаблицаПоказателей.Количество()-1;
	
	Если КоличествоПоказателей = 1 Тогда
		
		Для ОбрИндекс = 0 По КоличествоСтрок Цикл
			ТекущаяСтрока = ТаблицаПоказателей.Получить(КоличествоСтрок-ОбрИндекс);
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Значение) Тогда
				ТаблицаПоказателей.Удалить(ТекущаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаПоказателей.Колонки.Значение.Имя = ФиксированныеПоказатели[0].ИмяПриемника;
		
	Иначе
		
		ТекстГруппировки = "";
		Для каждого КолонкаТаб Из ТаблицаПоказателей.Колонки Цикл
			
			Если (КолонкаТаб.Имя = "Значение") 
				Или (Лев(КолонкаТаб.Имя,16) = "ПоказательОтчета")
				Или (Прав(КолонкаТаб.Имя,13) = "Представление") Тогда
				Продолжить;
			КонецЕсли;
			ТекстГруппировки = ?(ТекстГруппировки = "", "", ТекстГруппировки + ",") + КолонкаТаб.Имя;
			
		КонецЦикла;
		
		ТекстИтогов = "";
		Для каждого ФиксированныйПоказатель Из ФиксированныеПоказатели Цикл
			Если ТаблицаПоказателей.Колонки.Найти(ФиксированныйПоказатель.ИмяПриемника) = Неопределено Тогда 
				ТаблицаПоказателей.Колонки.Добавить(ФиксированныйПоказатель.ИмяПриемника);
				ТекстИтогов = ?(ТекстИтогов = "", "", ТекстИтогов + ",") + ФиксированныйПоказатель.ИмяПриемника;
			КонецЕсли;			
		КонецЦикла;		
		
		Для каждого СтрокаТаб Из ТаблицаПоказателей Цикл
			Для каждого ФиксированныйПоказатель Из ФиксированныеПоказатели Цикл
				
				Если СтрокаТаб.ПоказательОтчета <> ФиксированныйПоказатель.ПоказательОтчетаИсточник Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТаб[ФиксированныйПоказатель.ИмяПриемника] = СтрокаТаб.Значение * ФиксированныйПоказатель.Коэффициент;
				
			КонецЦикла;					
		КонецЦикла;
		
		ТаблицаПоказателей.Свернуть(ТекстГруппировки, ТекстИтогов);
		УдалитьСтрокиСПустымиПоказателями(ТаблицаПоказателей, ФиксированныеПоказатели.ВыгрузитьКолонку("ИмяПриемника"));
		
	КонецЕсли;	

	Возврат ТаблицаПоказателей;

КонецФункции

Процедура УдалитьСтрокиСПустымиПоказателями(Таб, МассивКолонокПроверки)
	
	КоличествоСтрок = Таб.Количество()-1;
	Для ОбрИндекс = 0 По КоличествоСтрок Цикл
		
		ТекущаяСтрока = Таб.Получить(КоличествоСтрок-ОбрИндекс);
		УдалитьСтроку = Истина;
		
		Для каждого КолонкаПроверки Из МассивКолонокПроверки Цикл			
			Если ЗначениеЗаполнено(ТекущаяСтрока[КолонкаПроверки]) Тогда
				УдалитьСтроку = Ложь;
				Прервать;
			КонецЕсли;			
		КонецЦикла;
		
		Если УдалитьСтроку Тогда
			Таб.Удалить(ТекущаяСтрока);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ДоработатьПостроительПоФиксированнойГруппеАналитик(Построитель, ФиксированнаяГруппаАналитик)

	ПараметрыЗаполнения = Справочники.ФиксированныеГруппыАналитик.ПолучитьПараметрыЗаполнения(ФиксированнаяГруппаАналитик);
	
	ОтборПоказателей = Новый Массив;
	
	Для каждого СтрокаПараметр Из ПараметрыЗаполнения Цикл
		
		Если СтрокаПараметр.Аналитика Тогда			
			Построитель.ВыбранныеПоля.Добавить(СтрокаПараметр.Источник, СтрокаПараметр.ИмяПриемника);
			
			Если СтрокаПараметр.КлючОтбора <> 0 Тогда
				
				ЭлементОтбора = Построитель.Отбор.Добавить(СтрокаПараметр.Источник);
				
				ТекущийВидСравнения = Неопределено;
				Таб = ФиксированнаяГруппаАналитик.ОтборыАналитик.Выгрузить(Новый Структура("КлючОтбора", СтрокаПараметр.КлючОтбора));
				Если Таб.Количество() = 0 Тогда
					ЭлементОтбора.Значение = Неопределено;
				Иначе
					ЭлементОтбора.ВидСравнения = Перечисления.ВидыСравнения.ВернутьВидСравнения(Таб[0].ВидСравнения);	
					ЭлементОтбора.Значение.ЗагрузитьЗначения(Таб.ВыгрузитьКолонку("Значение"));
					ЭлементОтбора.Использование = Истина;
				КонецЕсли;				
				
			КонецЕсли;
		Иначе
			
			ОтборПоказателей.Добавить(СтрокаПараметр.Источник);
			Если Построитель.ВыбранныеПоля.Найти("Значение") = Неопределено Тогда
				Построитель.ВыбранныеПоля.Добавить("Значение", "Значение");			
			КонецЕсли;
			
		КонецЕсли;		
	
	КонецЦикла;

	ДобавитьОтборыВПостроитель(Построитель, Новый Структура("ПоказательОтчета", ОтборПоказателей));
	
КонецПроцедуры

Процедура ДобавитьОтборыВПостроитель(Построитель, ОтборИсточник) Экспорт

	ТипМассив = Тип("Массив");
	ТипСписок = Тип("СписокЗначений");
	ТипСтруктура = Тип("Структура");
	
	Для каждого ЭлементИсточник Из ОтборИсточник Цикл
		
		ТипЗначенияИсточник = ТипЗнч(ЭлементИсточник.Значение);
		
		ВидСравнениеИсключение = Ложь;
		Если ТипЗначенияИсточник = ТипСтруктура Тогда
			
			ЗначениеОтбора = ЭлементИсточник.Значение.Значение;
			ТипЗначения = ТипЗнч(ЗначениеОтбора);
			
			ВидСравнениеИсключение = Истина;
			
		Иначе	
			
			ЗначениеОтбора = ЭлементИсточник.Значение;
			ТипЗначения = ТипЗнч(ЗначениеОтбора);
			
		КонецЕсли;
		
		ЭлементОтбора = Построитель.Отбор.Добавить(ЭлементИсточник.Ключ);
		ЭлементОтбора.Использование = Истина;
		
		Если ТипЗначения = ТипМассив Тогда
			
			ЭлементОтбора.ВидСравнения 	= ?(ВидСравнениеИсключение, ВидСравнения.НеВСписке, ВидСравнения.ВСписке);
			ЭлементОтбора.Значение.ЗагрузитьЗначения(ЗначениеОтбора);
			
		ИначеЕсли ТипЗначения = ТипСписок Тогда
			
			ЭлементОтбора.ВидСравнения 	= ?(ВидСравнениеИсключение, ВидСравнения.НеВСписке, ВидСравнения.ВСписке);
			ЭлементОтбора.Значение 		= ЗначениеОтбора;
			
		Иначе 
			
			ЭлементОтбора.Значение = ЗначениеОтбора;
			Если ВидСравнениеИсключение Тогда
				ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно;
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЦикла;

КонецПроцедуры

Функция ТекстПостроителяЗапросаТаблицаЗначенийПоказателей() 
	
	Возврат
	"ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК ПоказательОтчета,
	|	ПоказателиОтчетов.Владелец КАК ВидОтчета,
	|	ВЫБОР
	|		КОГДА &ПолучитьТолькоСинтетику = ИСТИНА
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.Владелец = ЗНАЧЕНИЕ(Справочник.ВидыОтчетов.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 2
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 3
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 4
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 5
	|		ИНАЧЕ 6
	|	КОНЕЦ + ВЫБОР
	|		КОГДА &ПолучитьТолькоСинтетику = ИСТИНА
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия = ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 2
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 3
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 4
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 5
	|		ИНАЧЕ -10
	|	КОНЕЦ КАК НомерАналитикиРаскрытия,
	|	ВЫБОР
	|		КОГДА &ПолучитьТолькоСинтетику = ИСТИНА
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.Владелец = ЗНАЧЕНИЕ(Справочник.ВидыОтчетов.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 2
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 3
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 4
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 5
	|		ИНАЧЕ 6
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия = ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики1 = &СубконтоКонтрагент
	|			ТОГДА 1
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики2 = &СубконтоКонтрагент
	|			ТОГДА 2
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3 = &СубконтоКонтрагент
	|			ТОГДА 3
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 = &СубконтоКонтрагент
	|			ТОГДА 4
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 = &СубконтоКонтрагент
	|			ТОГДА 5
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = &СубконтоКонтрагент
	|			ТОГДА 6
	|		ИНАЧЕ -10
	|	КОНЕЦ КАК НомерАналитикиКонтрагент,
	|	ВЫБОР
	|		КОГДА &ПолучитьТолькоСинтетику = ИСТИНА
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.Владелец = ЗНАЧЕНИЕ(Справочник.ВидыОтчетов.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 2
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 3
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 4
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 5
	|		ИНАЧЕ 6
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия = ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики1 В (&ВидыСубконто1)
	|			ТОГДА 1
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики2 В (&ВидыСубконто1)
	|			ТОГДА 2
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3 В (&ВидыСубконто1)
	|			ТОГДА 3
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 В (&ВидыСубконто1)
	|			ТОГДА 4
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 В (&ВидыСубконто1)
	|			ТОГДА 5
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 В (&ВидыСубконто1)
	|			ТОГДА 6
	|		ИНАЧЕ -10
	|	КОНЕЦ КАК НомерАналитикиВидыСубконто1
	|ПОМЕСТИТЬ втПоказателиОтчетов
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			т.Ссылка КАК Ссылка
	|		ИЗ
	|			Справочник.СчетаБД КАК т
	|		{ГДЕ
	|			т.Ссылка.* КАК СчетБД,
	|			т.Владелец.* КАК ПланСчетовБД}) КАК СчетаБД
	|		ПО ПоказателиОтчетов.СчетБД = СчетаБД.Ссылка}
	|{ГДЕ
	|	ПоказателиОтчетов.Ссылка.* КАК ПоказательОтчета,
	|	ПоказателиОтчетов.Владелец.* КАК ВидОтчета,
	|	СчетаБД.Ссылка.* КАК СчетБД,
	|	ПоказателиОтчетов.ВидИтогаПоСчету.*}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПоказательОтчета,
	|	НомерАналитикиРаскрытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВерсииЗначенийПоказателей.Ссылка КАК Версия,
	|	ВерсииЗначенийПоказателей.Код КАК Код
	|ПОМЕСТИТЬ втВерсии
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|{ГДЕ
	|	ВерсииЗначенийПоказателей.Организация.*,
	|	ВерсииЗначенийПоказателей.Ссылка.* КАК Версия,
	|	ВерсииЗначенийПоказателей.Проект.*,
	|	(ВЫБОР
	|			КОГДА ВерсииЗначенийПоказателей.Организация В (&втПериметр)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ТолькоОрганизацииПериметра,
	|	ВерсииЗначенийПоказателей.ПериодОтчета.*,
	|	ВерсииЗначенийПоказателей.ВидОтчета.*,
	|	ВерсииЗначенийПоказателей.Валюта.*,
	|	ВерсииЗначенийПоказателей.Сценарий.*,
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета.*,
	|	ВерсииЗначенийПоказателей.Регистратор.*,
	|	(ВЫБОР
	|			КОГДА ВерсииЗначенийПоказателей.Валюта = ВерсииЗначенийПоказателей.ЭкземплярОтчета.ОсновнаяВалюта
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ИспользоватьОсновнуюВалюту,
	|	(ТИПЗНАЧЕНИЯ(ВерсииЗначенийПоказателей.Регистратор)) КАК ТипРегистратора,
	|	(ВЫБОР
	|			КОГДА ВерсииЗначенийПоказателей.ВидОтчета В
	|					(ВЫБРАТЬ
	|						т.ВидОтчета
	|					ИЗ
	|						втПоказателиОтчетов КАК т)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ВидОтчетаПоПоказателям}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВерсииЗначенийПоказателей.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(СводПоказателей.Значение) КАК Значение
	|{ВЫБРАТЬ
	|	СводПоказателей.Значение КАК Значение,
	|	СводПоказателей.ПоказательОтчета.* КАК ПоказательОтчета,
	|	СводПоказателей.ПоказательОтчета.СчетБД.* КАК СчетБД,
	|	СводПоказателей.ПоказательОтчета.ВидИтогаПоСчету.* КАК ВидИтогаПоСчету,
	|	СводПоказателей.АналитикаВалюта.*,
	|	СводПоказателей.Аналитика1.*,
	|	СводПоказателей.Аналитика2.*,
	|	СводПоказателей.Аналитика3.*,
	|	СводПоказателей.Аналитика4.*,
	|	СводПоказателей.Аналитика5.*,
	|	СводПоказателей.Аналитика6.*,
	|	СводПоказателей.Версия.Организация.* КАК Организация,
	|	СводПоказателей.Версия.Проект.* КАК Проект,
	|	СводПоказателей.Версия.ПериодОтчета.* КАК ПериодОтчета,
	|	СводПоказателей.НомерАналитикиРаскрытия,
	|	СводПоказателей.НомерАналитикиКонтрагент,
	|	(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(СводПоказателей.Версия.Регистратор) В (&ТипРегистратора)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ТипРегистратораВСписке,
	|	(ВЫБОР
	|			КОГДА СводПоказателей.НомерАналитикиКонтрагент = 6
	|				ТОГДА СводПоказателей.Аналитика6
	|			КОГДА СводПоказателей.НомерАналитикиКонтрагент = 5
	|				ТОГДА СводПоказателей.Аналитика5
	|			КОГДА СводПоказателей.НомерАналитикиКонтрагент = 4
	|				ТОГДА СводПоказателей.Аналитика4
	|			КОГДА СводПоказателей.НомерАналитикиКонтрагент = 3
	|				ТОГДА СводПоказателей.Аналитика3
	|			КОГДА СводПоказателей.НомерАналитикиКонтрагент = 2
	|				ТОГДА СводПоказателей.Аналитика2
	|			КОГДА СводПоказателей.НомерАналитикиКонтрагент = 1
	|				ТОГДА СводПоказателей.Аналитика1
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		КОНЕЦ) КАК Контрагент,
	|	(ВЫБОР
	|			КОГДА СводПоказателей.НомерАналитикиКонтрагент = 6
	|				ТОГДА СводПоказателей.Аналитика6.ОрганизационнаяЕдиница
	|			КОГДА СводПоказателей.НомерАналитикиКонтрагент = 5
	|				ТОГДА СводПоказателей.Аналитика5.ОрганизационнаяЕдиница
	|			КОГДА СводПоказателей.НомерАналитикиКонтрагент = 4
	|				ТОГДА СводПоказателей.Аналитика4.ОрганизационнаяЕдиница
	|			КОГДА СводПоказателей.НомерАналитикиКонтрагент = 3
	|				ТОГДА СводПоказателей.Аналитика3.ОрганизационнаяЕдиница
	|			КОГДА СводПоказателей.НомерАналитикиКонтрагент = 2
	|				ТОГДА СводПоказателей.Аналитика2.ОрганизационнаяЕдиница
	|			КОГДА СводПоказателей.НомерАналитикиКонтрагент = 1
	|				ТОГДА СводПоказателей.Аналитика1.ОрганизационнаяЕдиница
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		КОНЕЦ) КАК ОрганизацияКонтрагента,
	|	(""ПОМЕСТИТЬ втЗначенияПоказателей"") КАК ШаблонВТ,
	|	СводПоказателей.Версия.*,
	|	(ВЫБОР
	|			КОГДА СводПоказателей.Версия.Регистратор = СводПоказателей.Версия.ЭкземплярОтчета
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ВерсияЭкземпляра}
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗначенияПоказателейОтчетов6.Показатель КАК ПоказательОтчета,
	|		ЗначенияПоказателейОтчетов6.АналитикаВалюта КАК АналитикаВалюта,
	|		ЗначенияПоказателейОтчетов6.Аналитика1 КАК Аналитика1,
	|		ЗначенияПоказателейОтчетов6.Аналитика2 КАК Аналитика2,
	|		ЗначенияПоказателейОтчетов6.Аналитика3 КАК Аналитика3,
	|		ЗначенияПоказателейОтчетов6.Аналитика4 КАК Аналитика4,
	|		ЗначенияПоказателейОтчетов6.Аналитика5 КАК Аналитика5,
	|		ЗначенияПоказателейОтчетов6.Аналитика6 КАК Аналитика6,
	|		ЗначенияПоказателейОтчетов6.Значение КАК Значение,
	|		втПоказателиОтчетов.НомерАналитикиРаскрытия КАК НомерАналитикиРаскрытия,
	|		втПоказателиОтчетов.НомерАналитикиКонтрагент КАК НомерАналитикиКонтрагент,
	|		втВерсии.Версия КАК Версия
	|	ИЗ
	|		РегистрСведений.ЗначенияПоказателейОтчетов6 КАК ЗначенияПоказателейОтчетов6
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсии КАК втВерсии
	|			ПО ЗначенияПоказателейОтчетов6.Версия = втВерсии.Версия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчетов КАК втПоказателиОтчетов
	|			ПО ЗначенияПоказателейОтчетов6.Показатель = втПоказателиОтчетов.ПоказательОтчета
	|				И (втПоказателиОтчетов.НомерАналитикиРаскрытия = 6)
	|				И (ЗначенияПоказателейОтчетов6.Значение <> 0)
	|	{ГДЕ
	|		(ЛОЖЬ) КАК ИсключитьЗначения6,
	|		ЗначенияПоказателейОтчетов6.Аналитика1.*,
	|		ЗначенияПоказателейОтчетов6.Аналитика2.*,
	|		ЗначенияПоказателейОтчетов6.Аналитика3.*,
	|		ЗначенияПоказателейОтчетов6.Аналитика4.*,
	|		ЗначенияПоказателейОтчетов6.Аналитика5.*,
	|		ЗначенияПоказателейОтчетов6.Аналитика6.*}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияПоказателейОтчетов5.Показатель,
	|		ЗначенияПоказателейОтчетов5.АналитикаВалюта,
	|		ЗначенияПоказателейОтчетов5.Аналитика1,
	|		ЗначенияПоказателейОтчетов5.Аналитика2,
	|		ЗначенияПоказателейОтчетов5.Аналитика3,
	|		ЗначенияПоказателейОтчетов5.Аналитика4,
	|		ЗначенияПоказателейОтчетов5.Аналитика5,
	|		NULL,
	|		ЗначенияПоказателейОтчетов5.Значение,
	|		втПоказателиОтчетов.НомерАналитикиРаскрытия,
	|		втПоказателиОтчетов.НомерАналитикиКонтрагент,
	|		втВерсии.Версия
	|	ИЗ
	|		РегистрСведений.ЗначенияПоказателейОтчетов5 КАК ЗначенияПоказателейОтчетов5
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсии КАК втВерсии
	|			ПО ЗначенияПоказателейОтчетов5.Версия = втВерсии.Версия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчетов КАК втПоказателиОтчетов
	|			ПО ЗначенияПоказателейОтчетов5.Показатель = втПоказателиОтчетов.ПоказательОтчета
	|				И (втПоказателиОтчетов.НомерАналитикиРаскрытия = 5)
	|				И (ЗначенияПоказателейОтчетов5.Значение <> 0)
	|	{ГДЕ
	|		(ЛОЖЬ) КАК ИсключитьЗначения5,
	|		ЗначенияПоказателейОтчетов5.Аналитика1.*,
	|		ЗначенияПоказателейОтчетов5.Аналитика2.*,
	|		ЗначенияПоказателейОтчетов5.Аналитика3.*,
	|		ЗначенияПоказателейОтчетов5.Аналитика4.*,
	|		ЗначенияПоказателейОтчетов5.Аналитика5.*}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияПоказателейОтчетов4.Показатель,
	|		ЗначенияПоказателейОтчетов4.АналитикаВалюта,
	|		ЗначенияПоказателейОтчетов4.Аналитика1,
	|		ЗначенияПоказателейОтчетов4.Аналитика2,
	|		ЗначенияПоказателейОтчетов4.Аналитика3,
	|		ЗначенияПоказателейОтчетов4.Аналитика4,
	|		NULL,
	|		NULL,
	|		ЗначенияПоказателейОтчетов4.Значение,
	|		втПоказателиОтчетов.НомерАналитикиРаскрытия,
	|		втПоказателиОтчетов.НомерАналитикиКонтрагент,
	|		втВерсии.Версия
	|	ИЗ
	|		РегистрСведений.ЗначенияПоказателейОтчетов4 КАК ЗначенияПоказателейОтчетов4
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсии КАК втВерсии
	|			ПО ЗначенияПоказателейОтчетов4.Версия = втВерсии.Версия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчетов КАК втПоказателиОтчетов
	|			ПО ЗначенияПоказателейОтчетов4.Показатель = втПоказателиОтчетов.ПоказательОтчета
	|				И (втПоказателиОтчетов.НомерАналитикиРаскрытия = 4)
	|				И (ЗначенияПоказателейОтчетов4.Значение <> 0)
	|	{ГДЕ
	|		(ЛОЖЬ) КАК ИсключитьЗначения4,
	|		ЗначенияПоказателейОтчетов4.Аналитика1.*,
	|		ЗначенияПоказателейОтчетов4.Аналитика2.*,
	|		ЗначенияПоказателейОтчетов4.Аналитика3.*,
	|		ЗначенияПоказателейОтчетов4.Аналитика4.*}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияПоказателейОтчетов3.Показатель,
	|		ЗначенияПоказателейОтчетов3.АналитикаВалюта,
	|		ЗначенияПоказателейОтчетов3.Аналитика1,
	|		ЗначенияПоказателейОтчетов3.Аналитика2,
	|		ЗначенияПоказателейОтчетов3.Аналитика3,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ЗначенияПоказателейОтчетов3.Значение,
	|		втПоказателиОтчетов.НомерАналитикиРаскрытия,
	|		втПоказателиОтчетов.НомерАналитикиКонтрагент,
	|		втВерсии.Версия
	|	ИЗ
	|		РегистрСведений.ЗначенияПоказателейОтчетов3 КАК ЗначенияПоказателейОтчетов3
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсии КАК втВерсии
	|			ПО ЗначенияПоказателейОтчетов3.Версия = втВерсии.Версия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчетов КАК втПоказателиОтчетов
	|			ПО ЗначенияПоказателейОтчетов3.Показатель = втПоказателиОтчетов.ПоказательОтчета
	|				И (втПоказателиОтчетов.НомерАналитикиРаскрытия = 3)
	|				И (ЗначенияПоказателейОтчетов3.Значение <> 0)
	|	{ГДЕ
	|		(ЛОЖЬ) КАК ИсключитьЗначения3,
	|		ЗначенияПоказателейОтчетов3.Аналитика1.*,
	|		ЗначенияПоказателейОтчетов3.Аналитика2.*,
	|		ЗначенияПоказателейОтчетов3.Аналитика3.*}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияПоказателейОтчетов2.Показатель,
	|		ЗначенияПоказателейОтчетов2.АналитикаВалюта,
	|		ЗначенияПоказателейОтчетов2.Аналитика1,
	|		ЗначенияПоказателейОтчетов2.Аналитика2,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ЗначенияПоказателейОтчетов2.Значение,
	|		втПоказателиОтчетов.НомерАналитикиРаскрытия,
	|		втПоказателиОтчетов.НомерАналитикиКонтрагент,
	|		втВерсии.Версия
	|	ИЗ
	|		РегистрСведений.ЗначенияПоказателейОтчетов2 КАК ЗначенияПоказателейОтчетов2
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсии КАК втВерсии
	|			ПО ЗначенияПоказателейОтчетов2.Версия = втВерсии.Версия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчетов КАК втПоказателиОтчетов
	|			ПО ЗначенияПоказателейОтчетов2.Показатель = втПоказателиОтчетов.ПоказательОтчета
	|				И (втПоказателиОтчетов.НомерАналитикиРаскрытия = 2)
	|				И (ЗначенияПоказателейОтчетов2.Значение <> 0)
	|	{ГДЕ
	|		(ЛОЖЬ) КАК ИсключитьЗначения2,
	|		ЗначенияПоказателейОтчетов2.Аналитика1.*,
	|		ЗначенияПоказателейОтчетов2.Аналитика2.*}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияПоказателейОтчетов1.Показатель,
	|		ЗначенияПоказателейОтчетов1.АналитикаВалюта,
	|		ЗначенияПоказателейОтчетов1.Аналитика1,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ЗначенияПоказателейОтчетов1.Значение,
	|		втПоказателиОтчетов.НомерАналитикиРаскрытия,
	|		втПоказателиОтчетов.НомерАналитикиКонтрагент,
	|		втВерсии.Версия
	|	ИЗ
	|		РегистрСведений.ЗначенияПоказателейОтчетов1 КАК ЗначенияПоказателейОтчетов1
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсии КАК втВерсии
	|			ПО ЗначенияПоказателейОтчетов1.Версия = втВерсии.Версия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчетов КАК втПоказателиОтчетов
	|			ПО ЗначенияПоказателейОтчетов1.Показатель = втПоказателиОтчетов.ПоказательОтчета
	|				И (втПоказателиОтчетов.НомерАналитикиРаскрытия = 1)
	|				И (ЗначенияПоказателейОтчетов1.Значение <> 0)
	|	{ГДЕ
	|		(ЛОЖЬ) КАК ИсключитьЗначения1,
	|		ЗначенияПоказателейОтчетов1.Аналитика1.*}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияПоказателейОтчетовВалютные.Показатель,
	|		ЗначенияПоказателейОтчетовВалютные.АналитикаВалюта,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ЗначенияПоказателейОтчетовВалютные.Значение,
	|		втПоказателиОтчетов.НомерАналитикиРаскрытия,
	|		втПоказателиОтчетов.НомерАналитикиКонтрагент,
	|		втВерсии.Версия
	|	ИЗ
	|		РегистрСведений.ЗначенияПоказателейОтчетовВалютные КАК ЗначенияПоказателейОтчетовВалютные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсии КАК втВерсии
	|			ПО ЗначенияПоказателейОтчетовВалютные.Версия = втВерсии.Версия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчетов КАК втПоказателиОтчетов
	|			ПО ЗначенияПоказателейОтчетовВалютные.Показатель = втПоказателиОтчетов.ПоказательОтчета
	|				И (втПоказателиОтчетов.НомерАналитикиРаскрытия = 0)
	|				И (ЗначенияПоказателейОтчетовВалютные.Значение <> 0)
	|	{ГДЕ
	|		(ЛОЖЬ) КАК ИсключитьЗначенияВалюта,
	|		ЗначенияПоказателейОтчетовВалютные.АналитикаВалюта.*}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияПоказателейОтчетовСинтетика.Показатель,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ЗначенияПоказателейОтчетовСинтетика.Значение,
	|		втПоказателиОтчетов.НомерАналитикиРаскрытия,
	|		втПоказателиОтчетов.НомерАналитикиКонтрагент,
	|		втВерсии.Версия
	|	ИЗ
	|		РегистрСведений.ЗначенияПоказателейОтчетовСинтетика КАК ЗначенияПоказателейОтчетовСинтетика
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсии КАК втВерсии
	|			ПО ЗначенияПоказателейОтчетовСинтетика.Версия = втВерсии.Версия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчетов КАК втПоказателиОтчетов
	|			ПО ЗначенияПоказателейОтчетовСинтетика.Показатель = втПоказателиОтчетов.ПоказательОтчета
	|				И (втПоказателиОтчетов.НомерАналитикиРаскрытия = 0
	|					ИЛИ &ПолучитьСинтетику)
	|				И (ЗначенияПоказателейОтчетовСинтетика.Значение <> 0)
	|	{ГДЕ
	|		(ЛОЖЬ) КАК ИсключитьЗначения0}) КАК СводПоказателей
	|{ГДЕ
	|	(ВЫБОР
	|			КОГДА СводПоказателей.НомерАналитикиКонтрагент = 6
	|				ТОГДА СводПоказателей.Аналитика6
	|			КОГДА СводПоказателей.НомерАналитикиКонтрагент = 5
	|				ТОГДА СводПоказателей.Аналитика5
	|			КОГДА СводПоказателей.НомерАналитикиКонтрагент = 4
	|				ТОГДА СводПоказателей.Аналитика4
	|			КОГДА СводПоказателей.НомерАналитикиКонтрагент = 3
	|				ТОГДА СводПоказателей.Аналитика3
	|			КОГДА СводПоказателей.НомерАналитикиКонтрагент = 2
	|				ТОГДА СводПоказателей.Аналитика2
	|			КОГДА СводПоказателей.НомерАналитикиКонтрагент = 1
	|				ТОГДА СводПоказателей.Аналитика1
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		КОНЕЦ) КАК Контрагент,
	|	(ВЫБОР
	|			КОГДА СводПоказателей.НомерАналитикиКонтрагент = 6
	|				ТОГДА СводПоказателей.Аналитика6.ОрганизационнаяЕдиница
	|			КОГДА СводПоказателей.НомерАналитикиКонтрагент = 5
	|				ТОГДА СводПоказателей.Аналитика5.ОрганизационнаяЕдиница
	|			КОГДА СводПоказателей.НомерАналитикиКонтрагент = 4
	|				ТОГДА СводПоказателей.Аналитика4.ОрганизационнаяЕдиница
	|			КОГДА СводПоказателей.НомерАналитикиКонтрагент = 3
	|				ТОГДА СводПоказателей.Аналитика3.ОрганизационнаяЕдиница
	|			КОГДА СводПоказателей.НомерАналитикиКонтрагент = 2
	|				ТОГДА СводПоказателей.Аналитика2.ОрганизационнаяЕдиница
	|			КОГДА СводПоказателей.НомерАналитикиКонтрагент = 1
	|				ТОГДА СводПоказателей.Аналитика1.ОрганизационнаяЕдиница
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		КОНЕЦ) КАК ОрганизацияКонтрагента}
	|
	|СГРУППИРОВАТЬ ПО
	|	СводПоказателей.НомерАналитикиРаскрытия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(СводПоказателей.Значение)
	|{ВЫБРАТЬ
	|	(СводПоказателей.Значение) КАК Значение,
	|	(СводПоказателей.Показатель).* КАК ПоказательОтчета,
	|	(СводПоказателей.Показатель.СчетБД).* КАК СчетБД,
	|	(СводПоказателей.Показатель.ВидИтогаПоСчету).* КАК ВидИтогаПоСчету,
	|	(СводПоказателей.АналитикаВалюта).*,
	|	(СводПоказателей.Аналитика1).*,
	|	(СводПоказателей.Аналитика2).*,
	|	(СводПоказателей.Аналитика3).*,
	|	(СводПоказателей.Аналитика4).*,
	|	(СводПоказателей.Аналитика5).*,
	|	(СводПоказателей.Аналитика6).*,
	|	(СводПоказателей.Версия.Организация).* КАК Организация,
	|	(СводПоказателей.Версия.Проект).* КАК Проект,
	|	(СводПоказателей.Версия.ПериодОтчета).* КАК ПериодОтчета,
	|	(втПоказателиОтчетов.НомерАналитикиРаскрытия),
	|	(втПоказателиОтчетов.НомерАналитикиКонтрагент),
	|	(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(СводПоказателей.Версия.Регистратор) В (&ТипРегистратора)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ТипРегистратораВСписке,
	|	(ВЫБОР
	|			КОГДА втПоказателиОтчетов.НомерАналитикиКонтрагент = 6
	|				ТОГДА СводПоказателей.Аналитика6
	|			КОГДА втПоказателиОтчетов.НомерАналитикиКонтрагент = 5
	|				ТОГДА СводПоказателей.Аналитика5
	|			КОГДА втПоказателиОтчетов.НомерАналитикиКонтрагент = 4
	|				ТОГДА СводПоказателей.Аналитика4
	|			КОГДА втПоказателиОтчетов.НомерАналитикиКонтрагент = 3
	|				ТОГДА СводПоказателей.Аналитика3
	|			КОГДА втПоказателиОтчетов.НомерАналитикиКонтрагент = 2
	|				ТОГДА СводПоказателей.Аналитика2
	|			КОГДА втПоказателиОтчетов.НомерАналитикиКонтрагент = 1
	|				ТОГДА СводПоказателей.Аналитика1
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		КОНЕЦ) КАК Контрагент,
	|	(ВЫБОР
	|			КОГДА втПоказателиОтчетов.НомерАналитикиКонтрагент = 6
	|				ТОГДА СводПоказателей.Аналитика6.ОрганизационнаяЕдиница
	|			КОГДА втПоказателиОтчетов.НомерАналитикиКонтрагент = 5
	|				ТОГДА СводПоказателей.Аналитика5.ОрганизационнаяЕдиница
	|			КОГДА втПоказателиОтчетов.НомерАналитикиКонтрагент = 4
	|				ТОГДА СводПоказателей.Аналитика4.ОрганизационнаяЕдиница
	|			КОГДА втПоказателиОтчетов.НомерАналитикиКонтрагент = 3
	|				ТОГДА СводПоказателей.Аналитика3.ОрганизационнаяЕдиница
	|			КОГДА втПоказателиОтчетов.НомерАналитикиКонтрагент = 2
	|				ТОГДА СводПоказателей.Аналитика2.ОрганизационнаяЕдиница
	|			КОГДА втПоказателиОтчетов.НомерАналитикиКонтрагент = 1
	|				ТОГДА СводПоказателей.Аналитика1.ОрганизационнаяЕдиница
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		КОНЕЦ) КАК ОрганизацияКонтрагента,
	|	(СводПоказателей.Версия).*,
	|	(ВЫБОР
	|			КОГДА СводПоказателей.Версия.Регистратор = СводПоказателей.Версия.ЭкземплярОтчета
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ВерсияЭкземпляра}
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетовНечисловые КАК СводПоказателей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчетов КАК втПоказателиОтчетов
	|		ПО СводПоказателей.Показатель = втПоказателиОтчетов.ПоказательОтчета
	|			И (СводПоказателей.Версия В
	|				(ВЫБРАТЬ
	|					т.Версия
	|				ИЗ
	|					втВерсии КАК т
	|				ГДЕ
	|					т.Код В
	|						(ВЫБРАТЬ
	|							МАКСИМУМ(т.Код)
	|						ИЗ
	|							втВерсии КАК т
	|						СГРУППИРОВАТЬ ПО
	|							т.Версия.Организация,
	|							т.Версия.ПериодОтчета,
	|							т.Версия.Сценарий,
	|							т.Версия.ВидОтчета,
	|							т.Версия.Аналитика1)))
	|ГДЕ
	|	&ПолучитьНечисловые
	|{ГДЕ
	|	СводПоказателей.Аналитика1.*,
	|	СводПоказателей.Аналитика2.*,
	|	СводПоказателей.Аналитика3.*,
	|	СводПоказателей.Аналитика4.*,
	|	СводПоказателей.Аналитика5.*,
	|	СводПоказателей.Аналитика6.*,
	|	(ВЫБОР
	|			КОГДА втПоказателиОтчетов.НомерАналитикиКонтрагент = 6
	|				ТОГДА СводПоказателей.Аналитика6
	|			КОГДА втПоказателиОтчетов.НомерАналитикиКонтрагент = 5
	|				ТОГДА СводПоказателей.Аналитика5
	|			КОГДА втПоказателиОтчетов.НомерАналитикиКонтрагент = 4
	|				ТОГДА СводПоказателей.Аналитика4
	|			КОГДА втПоказателиОтчетов.НомерАналитикиКонтрагент = 3
	|				ТОГДА СводПоказателей.Аналитика3
	|			КОГДА втПоказателиОтчетов.НомерАналитикиКонтрагент = 2
	|				ТОГДА СводПоказателей.Аналитика2
	|			КОГДА втПоказателиОтчетов.НомерАналитикиКонтрагент = 1
	|				ТОГДА СводПоказателей.Аналитика1
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		КОНЕЦ) КАК Контрагент,
	|	(ВЫБОР
	|			КОГДА втПоказателиОтчетов.НомерАналитикиКонтрагент = 6
	|				ТОГДА СводПоказателей.Аналитика6.ОрганизационнаяЕдиница
	|			КОГДА втПоказателиОтчетов.НомерАналитикиКонтрагент = 5
	|				ТОГДА СводПоказателей.Аналитика5.ОрганизационнаяЕдиница
	|			КОГДА втПоказателиОтчетов.НомерАналитикиКонтрагент = 4
	|				ТОГДА СводПоказателей.Аналитика4.ОрганизационнаяЕдиница
	|			КОГДА втПоказателиОтчетов.НомерАналитикиКонтрагент = 3
	|				ТОГДА СводПоказателей.Аналитика3.ОрганизационнаяЕдиница
	|			КОГДА втПоказателиОтчетов.НомерАналитикиКонтрагент = 2
	|				ТОГДА СводПоказателей.Аналитика2.ОрганизационнаяЕдиница
	|			КОГДА втПоказателиОтчетов.НомерАналитикиКонтрагент = 1
	|				ТОГДА СводПоказателей.Аналитика1.ОрганизационнаяЕдиница
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		КОНЕЦ) КАК ОрганизацияКонтрагента}"

КонецФункции

Функция ТекстЗапросаТаблицаЗначенийЧисловыхПоказателей() Экспорт 
	
	Возврат
	"ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК ПоказательОтчета,
	|	ПоказателиОтчетов.Владелец КАК ВидОтчета,
	|	ВЫБОР    
	|		КОГДА &ПолучитьТолькоСинтетику = ИСТИНА
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.Владелец = ЗНАЧЕНИЕ(Справочник.ВидыОтчетов.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 2
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 3
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 4
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 5
	|		ИНАЧЕ 6
	|	КОНЕЦ + ВЫБОР
	|		КОГДА &ПолучитьТолькоСинтетику = ИСТИНА
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия = ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 2
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 3
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 4
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 5
	|		ИНАЧЕ -10
	|	КОНЕЦ КАК НомерАналитикиРаскрытия,
	|	ВЫБОР
	|		КОГДА &ПолучитьТолькоСинтетику = ИСТИНА
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.Владелец = ЗНАЧЕНИЕ(Справочник.ВидыОтчетов.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 2
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 3
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 4
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 5
	|		ИНАЧЕ 6
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия = ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики1 В (&ВидыСубконто1)
	|			ТОГДА 1
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики2 В (&ВидыСубконто1)
	|			ТОГДА 2
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3 В (&ВидыСубконто1)
	|			ТОГДА 3
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 В (&ВидыСубконто1)
	|			ТОГДА 4
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 В (&ВидыСубконто1)
	|			ТОГДА 5
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 В (&ВидыСубконто1)
	|			ТОГДА 6
	|		ИНАЧЕ -10
	|	КОНЕЦ КАК НомерАналитикиВидыСубконто1,
	|	ВЫБОР
	|		КОГДА &ПолучитьТолькоСинтетику = ИСТИНА
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.Владелец = ЗНАЧЕНИЕ(Справочник.ВидыОтчетов.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 2
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 3
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 4
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 5
	|		ИНАЧЕ 6
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия = ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики1 В (&ВидыСубконто2)
	|			ТОГДА 1
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики2 В (&ВидыСубконто2)
	|			ТОГДА 2
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3 В (&ВидыСубконто2)
	|			ТОГДА 3
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 В (&ВидыСубконто2)
	|			ТОГДА 4
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 В (&ВидыСубконто2)
	|			ТОГДА 5
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 В (&ВидыСубконто2)
	|			ТОГДА 6
	|		ИНАЧЕ -10
	|	КОНЕЦ КАК НомерАналитикиВидыСубконто2,
	|	ВЫБОР
	|		КОГДА &ПолучитьТолькоСинтетику = ИСТИНА
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.Владелец = ЗНАЧЕНИЕ(Справочник.ВидыОтчетов.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 2
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 3
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 4
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 5
	|		ИНАЧЕ 6
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия = ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики1 В (&ВидыСубконто3)
	|			ТОГДА 1
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики2 В (&ВидыСубконто3)
	|			ТОГДА 2
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3 В (&ВидыСубконто3)
	|			ТОГДА 3
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 В (&ВидыСубконто3)
	|			ТОГДА 4
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 В (&ВидыСубконто3)
	|			ТОГДА 5
	|		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 В (&ВидыСубконто3)
	|			ТОГДА 6
	|		ИНАЧЕ -10
	|	КОНЕЦ КАК НомерАналитикиВидыСубконто3,
	|	ВЫБОР
	|		КОГДА ПоказателиОтчетов.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ВидыПоказателей.Пассивный)
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ВЫБОР
	|		КОГДА ПоказателиОтчетов.ВидИтогаПоСчету В (ЗНАЧЕНИЕ(Перечисление.ВидыБухгалтерскихИтогов.СНК), ЗНАЧЕНИЕ(Перечисление.ВидыБухгалтерскихИтогов.КО), ЗНАЧЕНИЕ(Перечисление.ВидыБухгалтерскихИтогов.СКК))
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоэффициентЗначенияПоСчету
	|ПОМЕСТИТЬ втПоказателиОтчетов
	|{ВЫБРАТЬ
	|	НомерАналитикиРаскрытия,
	|	НомерАналитикиВидыСубконто1,
	|	НомерАналитикиВидыСубконто2,
	|	НомерАналитикиВидыСубконто3,
	|	ВидОтчета.*}
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|{ГДЕ
	|	ПоказателиОтчетов.Ссылка.* КАК ПоказательОтчета,
	|	ПоказателиОтчетов.Владелец.* КАК ВидОтчета}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПоказательОтчета,
	|	НомерАналитикиРаскрытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВерсииЗначенийПоказателей.Ссылка КАК Версия
	|ПОМЕСТИТЬ втВерсии
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|{ГДЕ
	|	ВерсииЗначенийПоказателей.Организация.*,
	|	ВерсииЗначенийПоказателей.Проект.*,
	|	(ВЫБОР
	|			КОГДА ВерсииЗначенийПоказателей.Организация В (&втПериметр)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ТолькоОрганизацииПериметра,
	|	(ВЫБОР
	|			КОГДА ВерсииЗначенийПоказателей.Валюта = ВерсииЗначенийПоказателей.ЭкземплярОтчета.ОсновнаяВалюта
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ИспользоватьОсновнуюВалюту,
	|	(ТИПЗНАЧЕНИЯ(ВерсииЗначенийПоказателей.Регистратор)) КАК ТипРегистратора,
	|	(ВЫБОР
	|			КОГДА ВерсииЗначенийПоказателей.ВидОтчета В
	|					(ВЫБРАТЬ
	|						т.ВидОтчета
	|					ИЗ
	|						втПоказателиОтчетов КАК т)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ВидОтчетаПоПоказателям}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВерсииЗначенийПоказателей.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(СводПоказателей.Значение) КАК Значение,
	|	СУММА(СводПоказателей.ЗначениеПоСчету) КАК ЗначениеПоСчету,
	|	СводПоказателей.ПоказательОтчета КАК ПоказательОтчета,
	|	СводПоказателей.Аналитика1 КАК Аналитика1,
	|	СводПоказателей.Аналитика2 КАК Аналитика2,
	|	СводПоказателей.Аналитика3 КАК Аналитика3,
	|	СводПоказателей.Аналитика4 КАК Аналитика4,
	|	СводПоказателей.Аналитика5 КАК Аналитика5,
	|	СводПоказателей.Аналитика6 КАК Аналитика6,
	|	СводПоказателей.НомерАналитикиРаскрытия КАК НомерАналитикиРаскрытия,
	|	СводПоказателей.НомерАналитикиВидыСубконто1 КАК НомерАналитикиВидыСубконто1,
	|	СводПоказателей.НомерАналитикиВидыСубконто2 КАК НомерАналитикиВидыСубконто2,
	|	СводПоказателей.НомерАналитикиВидыСубконто3 КАК НомерАналитикиВидыСубконто3,
	|	СводПоказателей.Версия КАК Версия,
	|	""ПОМЕСТИТЬ втЗначенияПоказателей"" КАК ШаблонВТ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗначенияПоказателейОтчетов6.Показатель КАК ПоказательОтчета,
	|		ЗначенияПоказателейОтчетов6.Аналитика1 КАК Аналитика1,
	|		ЗначенияПоказателейОтчетов6.Аналитика2 КАК Аналитика2,
	|		ЗначенияПоказателейОтчетов6.Аналитика3 КАК Аналитика3,
	|		ЗначенияПоказателейОтчетов6.Аналитика4 КАК Аналитика4,
	|		ЗначенияПоказателейОтчетов6.Аналитика5 КАК Аналитика5,
	|		ЗначенияПоказателейОтчетов6.Аналитика6 КАК Аналитика6,
	|		ЗначенияПоказателейОтчетов6.Значение КАК Значение,
	|		ЗначенияПоказателейОтчетов6.Значение * втПоказателиОтчетов.КоэффициентЗначенияПоСчету КАК ЗначениеПоСчету,
	|		втПоказателиОтчетов.НомерАналитикиРаскрытия КАК НомерАналитикиРаскрытия,
	|		втПоказателиОтчетов.НомерАналитикиВидыСубконто1 КАК НомерАналитикиВидыСубконто1,
	|		втПоказателиОтчетов.НомерАналитикиВидыСубконто2 КАК НомерАналитикиВидыСубконто2,
	|		втПоказателиОтчетов.НомерАналитикиВидыСубконто3 КАК НомерАналитикиВидыСубконто3,
	|		втВерсии.Версия КАК Версия
	|	{ВЫБРАТЬ
	|		НомерАналитикиРаскрытия,
	|		НомерАналитикиВидыСубконто1,
	|		НомерАналитикиВидыСубконто2,
	|		НомерАналитикиВидыСубконто3,
	|		Аналитика1.*,
	|		Аналитика2.*,
	|		Аналитика3.*,
	|		Аналитика4.*,
	|		Аналитика5.*,
	|		Аналитика6.*,
	|		Версия.*,
	|		ПоказательОтчета.*}
	|	ИЗ
	|		РегистрСведений.ЗначенияПоказателейОтчетов6 КАК ЗначенияПоказателейОтчетов6
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсии КАК втВерсии
	|			ПО ЗначенияПоказателейОтчетов6.Версия = втВерсии.Версия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчетов КАК втПоказателиОтчетов
	|			ПО ЗначенияПоказателейОтчетов6.Показатель = втПоказателиОтчетов.ПоказательОтчета
	|				И (втПоказателиОтчетов.НомерАналитикиРаскрытия = 6)
	|				И (ЗначенияПоказателейОтчетов6.Значение <> 0)
	|	{ГДЕ
	|		ЗначенияПоказателейОтчетов6.Аналитика1.*,
	|		ЗначенияПоказателейОтчетов6.Аналитика2.*,
	|		ЗначенияПоказателейОтчетов6.Аналитика3.*,
	|		ЗначенияПоказателейОтчетов6.Аналитика4.*,
	|		ЗначенияПоказателейОтчетов6.Аналитика5.*,
	|		ЗначенияПоказателейОтчетов6.Аналитика6.*}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияПоказателейОтчетов5.Показатель,
	|		ЗначенияПоказателейОтчетов5.Аналитика1,
	|		ЗначенияПоказателейОтчетов5.Аналитика2,
	|		ЗначенияПоказателейОтчетов5.Аналитика3,
	|		ЗначенияПоказателейОтчетов5.Аналитика4,
	|		ЗначенияПоказателейОтчетов5.Аналитика5,
	|		NULL,
	|		ЗначенияПоказателейОтчетов5.Значение,
	|		ЗначенияПоказателейОтчетов5.Значение * втПоказателиОтчетов.КоэффициентЗначенияПоСчету,
	|		втПоказателиОтчетов.НомерАналитикиРаскрытия,
	|		втПоказателиОтчетов.НомерАналитикиВидыСубконто1,
	|		втПоказателиОтчетов.НомерАналитикиВидыСубконто2,
	|		втПоказателиОтчетов.НомерАналитикиВидыСубконто3,
	|		втВерсии.Версия
	|	ИЗ
	|		РегистрСведений.ЗначенияПоказателейОтчетов5 КАК ЗначенияПоказателейОтчетов5
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсии КАК втВерсии
	|			ПО ЗначенияПоказателейОтчетов5.Версия = втВерсии.Версия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчетов КАК втПоказателиОтчетов
	|			ПО ЗначенияПоказателейОтчетов5.Показатель = втПоказателиОтчетов.ПоказательОтчета
	|				И (втПоказателиОтчетов.НомерАналитикиРаскрытия = 5)
	|				И (ЗначенияПоказателейОтчетов5.Значение <> 0)
	|	{ГДЕ
	|		ЗначенияПоказателейОтчетов5.Аналитика1.*,
	|		ЗначенияПоказателейОтчетов5.Аналитика2.*,
	|		ЗначенияПоказателейОтчетов5.Аналитика3.*,
	|		ЗначенияПоказателейОтчетов5.Аналитика4.*,
	|		ЗначенияПоказателейОтчетов5.Аналитика5.*}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияПоказателейОтчетов4.Показатель,
	|		ЗначенияПоказателейОтчетов4.Аналитика1,
	|		ЗначенияПоказателейОтчетов4.Аналитика2,
	|		ЗначенияПоказателейОтчетов4.Аналитика3,
	|		ЗначенияПоказателейОтчетов4.Аналитика4,
	|		NULL,
	|		NULL,
	|		ЗначенияПоказателейОтчетов4.Значение,
	|		ЗначенияПоказателейОтчетов4.Значение * втПоказателиОтчетов.КоэффициентЗначенияПоСчету,
	|		втПоказателиОтчетов.НомерАналитикиРаскрытия,
	|		втПоказателиОтчетов.НомерАналитикиВидыСубконто1,
	|		втПоказателиОтчетов.НомерАналитикиВидыСубконто2,
	|		втПоказателиОтчетов.НомерАналитикиВидыСубконто3,
	|		втВерсии.Версия
	|	ИЗ
	|		РегистрСведений.ЗначенияПоказателейОтчетов4 КАК ЗначенияПоказателейОтчетов4
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсии КАК втВерсии
	|			ПО ЗначенияПоказателейОтчетов4.Версия = втВерсии.Версия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчетов КАК втПоказателиОтчетов
	|			ПО ЗначенияПоказателейОтчетов4.Показатель = втПоказателиОтчетов.ПоказательОтчета
	|				И (втПоказателиОтчетов.НомерАналитикиРаскрытия = 4)
	|				И (ЗначенияПоказателейОтчетов4.Значение <> 0)
	|	{ГДЕ
	|		ЗначенияПоказателейОтчетов4.Аналитика1.*,
	|		ЗначенияПоказателейОтчетов4.Аналитика2.*,
	|		ЗначенияПоказателейОтчетов4.Аналитика3.*,
	|		ЗначенияПоказателейОтчетов4.Аналитика4.*}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияПоказателейОтчетов3.Показатель,
	|		ЗначенияПоказателейОтчетов3.Аналитика1,
	|		ЗначенияПоказателейОтчетов3.Аналитика2,
	|		ЗначенияПоказателейОтчетов3.Аналитика3,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ЗначенияПоказателейОтчетов3.Значение,
	|		ЗначенияПоказателейОтчетов3.Значение * втПоказателиОтчетов.КоэффициентЗначенияПоСчету,
	|		втПоказателиОтчетов.НомерАналитикиРаскрытия,
	|		втПоказателиОтчетов.НомерАналитикиВидыСубконто1,
	|		втПоказателиОтчетов.НомерАналитикиВидыСубконто2,
	|		втПоказателиОтчетов.НомерАналитикиВидыСубконто3,
	|		втВерсии.Версия
	|	ИЗ
	|		РегистрСведений.ЗначенияПоказателейОтчетов3 КАК ЗначенияПоказателейОтчетов3
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсии КАК втВерсии
	|			ПО ЗначенияПоказателейОтчетов3.Версия = втВерсии.Версия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчетов КАК втПоказателиОтчетов
	|			ПО ЗначенияПоказателейОтчетов3.Показатель = втПоказателиОтчетов.ПоказательОтчета
	|				И (втПоказателиОтчетов.НомерАналитикиРаскрытия = 3)
	|				И (ЗначенияПоказателейОтчетов3.Значение <> 0)
	|	{ГДЕ
	|		ЗначенияПоказателейОтчетов3.Аналитика1.*,
	|		ЗначенияПоказателейОтчетов3.Аналитика2.*,
	|		ЗначенияПоказателейОтчетов3.Аналитика3.*}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияПоказателейОтчетов2.Показатель,
	|		ЗначенияПоказателейОтчетов2.Аналитика1,
	|		ЗначенияПоказателейОтчетов2.Аналитика2,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ЗначенияПоказателейОтчетов2.Значение,
	|		ЗначенияПоказателейОтчетов2.Значение * втПоказателиОтчетов.КоэффициентЗначенияПоСчету,
	|		втПоказателиОтчетов.НомерАналитикиРаскрытия,
	|		втПоказателиОтчетов.НомерАналитикиВидыСубконто1,
	|		втПоказателиОтчетов.НомерАналитикиВидыСубконто2,
	|		втПоказателиОтчетов.НомерАналитикиВидыСубконто3,
	|		втВерсии.Версия
	|	ИЗ
	|		РегистрСведений.ЗначенияПоказателейОтчетов2 КАК ЗначенияПоказателейОтчетов2
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсии КАК втВерсии
	|			ПО ЗначенияПоказателейОтчетов2.Версия = втВерсии.Версия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчетов КАК втПоказателиОтчетов
	|			ПО ЗначенияПоказателейОтчетов2.Показатель = втПоказателиОтчетов.ПоказательОтчета
	|				И (втПоказателиОтчетов.НомерАналитикиРаскрытия = 2)
	|				И (ЗначенияПоказателейОтчетов2.Значение <> 0)
	|	{ГДЕ
	|		ЗначенияПоказателейОтчетов2.Аналитика1.*,
	|		ЗначенияПоказателейОтчетов2.Аналитика2.*}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияПоказателейОтчетов1.Показатель,
	|		ЗначенияПоказателейОтчетов1.Аналитика1,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ЗначенияПоказателейОтчетов1.Значение,
	|		ЗначенияПоказателейОтчетов1.Значение * втПоказателиОтчетов.КоэффициентЗначенияПоСчету,
	|		втПоказателиОтчетов.НомерАналитикиРаскрытия,
	|		втПоказателиОтчетов.НомерАналитикиВидыСубконто1,
	|		втПоказателиОтчетов.НомерАналитикиВидыСубконто2,
	|		втПоказателиОтчетов.НомерАналитикиВидыСубконто3,
	|		втВерсии.Версия
	|	ИЗ
	|		РегистрСведений.ЗначенияПоказателейОтчетов1 КАК ЗначенияПоказателейОтчетов1
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсии КАК втВерсии
	|			ПО ЗначенияПоказателейОтчетов1.Версия = втВерсии.Версия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчетов КАК втПоказателиОтчетов
	|			ПО ЗначенияПоказателейОтчетов1.Показатель = втПоказателиОтчетов.ПоказательОтчета
	|				И (втПоказателиОтчетов.НомерАналитикиРаскрытия = 1)
	|				И (ЗначенияПоказателейОтчетов1.Значение <> 0)
	|	{ГДЕ
	|		ЗначенияПоказателейОтчетов1.Аналитика1.*}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияПоказателейОтчетовСинтетика.Показатель,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ЗначенияПоказателейОтчетовСинтетика.Значение,
	|		ЗначенияПоказателейОтчетовСинтетика.Значение * втПоказателиОтчетов.КоэффициентЗначенияПоСчету,
	|		втПоказателиОтчетов.НомерАналитикиРаскрытия,
	|		втПоказателиОтчетов.НомерАналитикиВидыСубконто1,
	|		втПоказателиОтчетов.НомерАналитикиВидыСубконто2,
	|		втПоказателиОтчетов.НомерАналитикиВидыСубконто3,
	|		втВерсии.Версия
	|	ИЗ
	|		РегистрСведений.ЗначенияПоказателейОтчетовСинтетика КАК ЗначенияПоказателейОтчетовСинтетика
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсии КАК втВерсии
	|			ПО ЗначенияПоказателейОтчетовСинтетика.Версия = втВерсии.Версия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчетов КАК втПоказателиОтчетов
	|			ПО ЗначенияПоказателейОтчетовСинтетика.Показатель = втПоказателиОтчетов.ПоказательОтчета
	|				И (втПоказателиОтчетов.НомерАналитикиРаскрытия = 0)
	|				И (ЗначенияПоказателейОтчетовСинтетика.Значение <> 0)) КАК СводПоказателей
	|
	|СГРУППИРОВАТЬ ПО
	|	СводПоказателей.ПоказательОтчета,
	|	СводПоказателей.Аналитика1,
	|	СводПоказателей.Аналитика2,
	|	СводПоказателей.Аналитика3,
	|	СводПоказателей.Аналитика4,
	|	СводПоказателей.Аналитика5,
	|	СводПоказателей.Аналитика6,
	|	СводПоказателей.НомерАналитикиРаскрытия,
	|	СводПоказателей.НомерАналитикиВидыСубконто1,
	|	СводПоказателей.НомерАналитикиВидыСубконто2,
	|	СводПоказателей.НомерАналитикиВидыСубконто3,
	|	СводПоказателей.Версия"

КонецФункции

#КонецОбласти

#Область ПроверкаИзмененияАналитик

Функция ПроверитьИдентичностьВидовАналитик(ВидОтчетаНов,ВидОтчетаСтар) Экспорт
	
	Если НЕ ВидОтчетаНов.РазделениеПоПроектам=ВидОтчетаСтар.РазделениеПоПроектам Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если НЕ ЗначениеЗаполнено(ВидОтчетаСтар["ВидАналитики"+Индекс]) Тогда
			
			Прервать;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВидОтчетаНов["ВидАналитики"+Индекс]) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
				
		Если ВидОтчетаСтар["ВидАналитики"+Индекс].ТипЗначения.Типы()[0]=Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ") 			
			И (НЕ ВидОтчетаСтар["ВидАналитики"+Индекс]=ВидОтчетаНов["ВидАналитики"+Индекс]) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если НЕ ВидОтчетаСтар["ВидАналитики"+Индекс].ТипЗначения.Типы()[0]=ВидОтчетаНов["ВидАналитики"+Индекс].ТипЗначения.Типы()[0] Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат Истина;
			
КонецФункции // ПроверитьИдентичностьВидовАналитик()

Функция ЕстьЗаписиПоЭлементуСтруктуры(ЭлементСтруктуры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЭлементСтруктуры) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры)=Тип("СправочникСсылка.ВидыОтчетов") Тогда
		
		ВидОтчета=ЭлементСтруктуры;
		
	Иначе
		
		ВидОтчета=ЭлементСтруктуры.Владелец;
		
	КонецЕсли;
	
	АналитикВидаОтчета=ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(ВидОтчета);
	
	ИмяТаблицыСинтетики=?(АналитикВидаОтчета=0,"ЗначенияПоказателейОтчетовСинтетика","ЗначенияПоказателейОтчетов"+АналитикВидаОтчета);
		
	ТекстОтбор=ПолучитьТекстОтбораДляПереносаДанных(ЭлементСтруктуры);
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЗначенияПоказателейОтчетовСинтетика.Версия КАК Версия
	|	ИЗ
	|		РегистрСведений."+ИмяТаблицыСинтетики+" КАК ЗначенияПоказателейОтчетовСинтетика
	|	ГДЕ
	|		ЗначенияПоказателейОтчетовСинтетика"+ТекстОтбор+"
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ Первые 1
	|		ЗначенияПоказателейОтчетовНечисловые.Версия
	|	ИЗ
	|		РегистрСведений.ЗначенияПоказателейОтчетовНечисловые КАК ЗначенияПоказателейОтчетовНечисловые
	|	ГДЕ
	|		ЗначенияПоказателейОтчетовНечисловые"+ТекстОтбор;
	
	Запрос.УстановитьПараметр("ЭлементСтруктуры",ЭлементСтруктуры);
	
	Результат=Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();	
		
КонецФункции // ЕстьЗаписиПоЭлементуСтруктуры() 

Функция ЧислоПроектовВРегистрах(ВидОтчета) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВерсииЗначенийПоказателей.Проект) КАК КоличествоПроектов
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета
	|	И НЕ ВерсииЗначенийПоказателей.Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Возврат Результат.КоличествоПроектов;
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции // ЧислоПроектовВРегистрах() 

Функция ЕстьИзменениеАналитикВидаОтчета(ИзмененныйОбъект,Ссылка) Экспорт
			
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если НЕ (ЗначениеЗаполнено(Ссылка["ВидАналитики"+Индекс]) ИЛИ ЗначениеЗаполнено(ИзмененныйОбъект["ВидАналитики"+Индекс]))  Тогда
			
			Прервать;
			
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(Ссылка["ВидАналитики"+Индекс]) И (НЕ ЗначениеЗаполнено(ИзмененныйОбъект["ВидАналитики"+Индекс])))
			ИЛИ (ЗначениеЗаполнено(ИзмененныйОбъект["ВидАналитики"+Индекс]) И (НЕ ЗначениеЗаполнено(Ссылка["ВидАналитики"+Индекс]))) Тогда
			
			Возврат Истина;
			
		КонецЕсли;
				
		Если Ссылка["ВидАналитики"+Индекс].ТипЗначения.Типы()[0]=Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ") 			
			И (НЕ Ссылка["ВидАналитики"+Индекс]=ИзмененныйОбъект["ВидАналитики"+Индекс]) Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
		Если НЕ Ссылка["ВидАналитики"+Индекс].ТипЗначения.Типы()[0]=ИзмененныйОбъект["ВидАналитики"+Индекс].ТипЗначения.Типы()[0] Тогда
			
			Возврат Истина;
			
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат Ложь;
			
КонецФункции // ПроверитьИзменениеАналитикВидаОтчета()

Функция ПолучитьМакетТаблицыАналитик() Экспорт
	
	МакетТаблицыАналитик=Новый ТаблицаЗначений;
	МакетТаблицыАналитик.Колонки.Добавить("ПорядковыйНомер",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(2));
	МакетТаблицыАналитик.Колонки.Добавить("ВидАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные"));
	МакетТаблицыАналитик.Колонки.Добавить("АналитикаВидаОтчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	МакетТаблицыАналитик.Колонки.Добавить("РазделениеПоПроектам",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	МакетТаблицыАналитик.Колонки.Добавить("АналитикаОбязательна",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	МакетТаблицыАналитик.Колонки.Добавить("ПорядковыйНомерСтар",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(2));
	
	Возврат МакетТаблицыАналитик; 	
	
КонецФункции // ПолучитьМакетТаблицыАналитик()

Функция ПроверитьНеобходимостьРеструктуризацииДанныхВидОтчета(ИзмененныйОбъект,Ссылка) Экспорт
	
	ЕстьИзменениеАналитикВидаОтчета=Ложь;
	
	ТаблицаАналитикСтар	= ПолучитьМакетТаблицыАналитик();
	ТаблицаАналитикНов	= ТаблицаАналитикСтар.СкопироватьКолонки();
	
	СтруктураОтвета=Новый Структура;
	СтруктураОтвета.Вставить("ВидОтчета",Ссылка);
	
	ЕстьЗаписиВРегистрах=ЕстьЗаписиПоЭлементуСтруктуры(Ссылка);
	
	СтруктураОтвета.Вставить("ТаблицаАналитикНовВидОтчета",	ТаблицаАналитикНов);
	СтруктураОтвета.Вставить("ТаблицаАналитикСтарВидОтчета",ТаблицаАналитикСтар);
	СтруктураОтвета.Вставить("ЕстьЗаписиВРегистрахВидОтчета",ЕстьЗаписиВРегистрах);
	
	Если Ссылка.РазделениеПоПроектам И (НЕ ИзмененныйОбъект.РазделениеПоПроектам) И ЕстьЗаписиВРегистрах Тогда
		
		НоваяСтрока=ТаблицаАналитикСтар.Добавить();
		НоваяСтрока.ПорядковыйНомер=-1;
		НоваяСтрока.ВидАналитики=ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Проекты;
		НоваяСтрока.АналитикаВидаОтчета=Истина;
		НоваяСтрока.РазделениеПоПроектам=Истина;
		НоваяСтрока.ПорядковыйНомерСтар=-1;
		
		НоваяСтрока=ТаблицаАналитикНов.Добавить();
		НоваяСтрока.ПорядковыйНомер=-1;
		НоваяСтрока.ВидАналитики=ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Проекты;
		НоваяСтрока.АналитикаВидаОтчета=Истина;
		НоваяСтрока.РазделениеПоПроектам=Истина;
		НоваяСтрока.ПорядковыйНомерСтар=-1;

		СтруктураОтвета.Вставить("СброшеноРазделениеПоПроектам",Истина);
		СтруктураОтвета.Вставить("ЧислоПроектовВРегистрахВидОтчета",ЧислоПроектовВРегистрах(Ссылка));
				
	КонецЕсли;

	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если НЕ (ЗначениеЗаполнено(Ссылка["ВидАналитики"+Индекс]) ИЛИ ЗначениеЗаполнено(ИзмененныйОбъект["ВидАналитики"+Индекс]))  Тогда
			
			Прервать;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка["ВидАналитики"+Индекс]) Тогда
						
			НоваяСтрока=ТаблицаАналитикСтар.Добавить();
			НоваяСтрока.ПорядковыйНомер=Индекс;
			НоваяСтрока.ВидАналитики=Ссылка["ВидАналитики"+Индекс];
			НоваяСтрока.АналитикаВидаОтчета=Истина;
			НоваяСтрока.ПорядковыйНомерСтар=Индекс;

			Если НЕ ЗначениеЗаполнено(ИзмененныйОбъект["ВидАналитики"+Индекс]) Тогда
				
				ЕстьИзменениеАналитикВидаОтчета=Истина;
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
					
		Если ЗначениеЗаполнено(ИзмененныйОбъект["ВидАналитики"+Индекс]) Тогда
						
			НоваяСтрока=ТаблицаАналитикНов.Добавить();
			НоваяСтрока.ПорядковыйНомер=Индекс;
			НоваяСтрока.ВидАналитики=ИзмененныйОбъект["ВидАналитики"+Индекс];
			НоваяСтрока.АналитикаВидаОтчета=Истина;
			
			Если НЕ ЗначениеЗаполнено(Ссылка["ВидАналитики"+Индекс]) Тогда
				
				ЕстьИзменениеАналитикВидаОтчета= Истина;
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
						
		Если Ссылка["ВидАналитики"+Индекс].ТипЗначения.Типы()[0]=Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ") 			
			И (НЕ Ссылка["ВидАналитики"+Индекс]=ИзмененныйОбъект["ВидАналитики"+Индекс]) Тогда
			
			ЕстьИзменениеАналитикВидаОтчета=  Истина;
			
		КонецЕсли;
		
		Если НЕ Ссылка["ВидАналитики"+Индекс].ТипЗначения.Типы()[0]=ИзмененныйОбъект["ВидАналитики"+Индекс].ТипЗначения.Типы()[0] Тогда
			
			ЕстьИзменениеАналитикВидаОтчета=  Истина;
			
		КонецЕсли;
				
	КонецЦикла;
			
	Если ЕстьИзменениеАналитикВидаОтчета Тогда
		
		Для Каждого Строка ИЗ ТаблицаАналитикНов Цикл
			
			Строка.ПорядковыйНомерСтар=Справочники.ГруппыРаскрытия.ВернутьНомерАналитикиСтар(Строка.ВидАналитики,ТаблицаАналитикСтар,Истина);
			
		КонецЦикла;
		
		СтруктураОтвета.Вставить("ЕстьИзменениеАналитикВидаОтчета",Истина);
				
	КонецЕсли;
	
	Если СтруктураОтвета.Свойство("ЕстьИзменениеАналитикВидаОтчета") 
		ИЛИ СтруктураОтвета.Свойство("СброшеноРазделениеПоПроектам") Тогда
		
		ТекстОшибки=ПроверитьВозможностьИзмененияДанныхПоЗлементуСтруктуры(Ссылка);
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			
			СтруктураОтвета.Вставить("ИзменениеДанныхЗапрещено",ТекстОшибки);
			
		КонецЕсли;
		
	КонецЕсли;		
	
	Если НЕ (СтруктураОтвета.Свойство("ЕстьИзменениеАналитикВидаОтчета") 
		ИЛИ СтруктураОтвета.Свойство("СброшеноРазделениеПоПроектам")) Тогда		
		
		Возврат Неопределено
		
	КонецЕсли;
	
	ИзменениеГруппРаскрытия=ПолучитьИзменениеГруппРаскрытия(ИзмененныйОбъект,Ссылка,ТаблицаАналитикНов,ТаблицаАналитикСтар);
	
	Если ИзменениеГруппРаскрытия.Количество()>0 Тогда
		
		СтруктураОтвета.Вставить("ИзменениеГруппРаскрытия",ИзменениеГруппРаскрытия);
		
	КонецЕсли;
	
	Возврат СтруктураОтвета;
						
КонецФункции // ПроверитьНеобходимостьРеструктуризацииДанныхВидОтчета()

Функция ПроверитьВозможностьИзмененияДанныхПоЗлементуСтруктуры(ЭлементСтруктуры) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры)=Тип("СправочникСсылка.ВидыОтчетов") Тогда
		
		ВидОтчета=ЭлементСтруктуры;
		
	Иначе
		
		ВидОтчета=ЭлементСтруктуры.Владелец;
		
	КонецЕсли;
	
	ЕстьРазделениеПоПроектам=ВидОтчета.РазделениеПоПроектам;
	
	АналитикВидаОтчета=ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(ВидОтчета);
	
	ИмяТаблицыСинтетики=?(АналитикВидаОтчета=0,"ЗначенияПоказателейОтчетовСинтетика","ЗначенияПоказателейОтчетов"+АналитикВидаОтчета);
	
	ОтборПоАналитикам = "";
	ОбластьИзмененныхДанныхАналитика = "";
	ЗначенияПоказателейОтчетовСинтетикаАналитика = "";
	ЗначенияПоказателейОтчетовНечисловыеАналитика = "";
	
	Для ИндексАналитики = 1 По АналитикВидаОтчета Цикл
		
		ИндАналитики = Строка(ИндексАналитики);
		ОтборПоАналитикам = ОтборПоАналитикам + "
	|			И ЗначенияСтатусовПоказателейСинтетика.Аналитика" + ИндАналитики + " = ОбластьСтатусыПоказателей.Аналитика" + ИндАналитики;
		
		ОбластьИзмененныхДанныхАналитика = ОбластьИзмененныхДанныхАналитика + ",
	|	ОбластьИзмененныхДанных.Аналитика" + ИндАналитики + " КАК Аналитика" + ИндАналитики;
		
		ЗначенияПоказателейОтчетовСинтетикаАналитика = ЗначенияПоказателейОтчетовСинтетикаАналитика + ",
	|	ЗначенияПоказателейОтчетовСинтетика.Аналитика" + ИндАналитики + " КАК Аналитика" + ИндАналитики;
		
		ЗначенияПоказателейОтчетовНечисловыеАналитика = ЗначенияПоказателейОтчетовНечисловыеАналитика + ",
	|	ЗначенияПоказателейОтчетовНечисловые.Аналитика" + ИндАналитики + " КАК Аналитика" + ИндАналитики;
				
	КонецЦикла;
	
	ТекстОтбор=ПолучитьТекстОтбораДляПереносаДанных(ЭлементСтруктуры);
			
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияПоказателейОтчетовСинтетика.Версия.Организация КАК Организация,
	|	ЗначенияПоказателейОтчетовСинтетика.Версия.ПериодОтчета КАК ПериодОтчета,
	|	ЗначенияПоказателейОтчетовСинтетика.Версия.Сценарий КАК Сценарий,";
	
	Если ЕстьРазделениеПоПроектам Тогда
		
		Запрос.Текст=Запрос.Текст+"	
		|	ЗначенияПоказателейОтчетовСинтетика.Версия.Проект КАК Проект,";
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"	
	|	ЗначенияПоказателейОтчетовСинтетика.Показатель КАК Показатель" + ЗначенияПоказателейОтчетовСинтетикаАналитика + "
	|ПОМЕСТИТЬ ОбластьИзмененныхДанных
	|ИЗ
	|	РегистрСведений."+ИмяТаблицыСинтетики+" КАК ЗначенияПоказателейОтчетовСинтетика
	|ГДЕ
	|	ЗначенияПоказателейОтчетовСинтетика"+ТекстОтбор+"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияПоказателейОтчетовНечисловые.Версия.Организация,
	|	ЗначенияПоказателейОтчетовНечисловые.Версия.ПериодОтчета,
	|	ЗначенияПоказателейОтчетовНечисловые.Версия.Сценарий,";
	
	Если ЕстьРазделениеПоПроектам Тогда
		
		Запрос.Текст=Запрос.Текст+"	
		|	ЗначенияПоказателейОтчетовНечисловые.Версия.Проект,";
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"	
	|	ЗначенияПоказателейОтчетовНечисловые.Показатель" + ЗначенияПоказателейОтчетовНечисловыеАналитика + "
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетовНечисловые КАК ЗначенияПоказателейОтчетовНечисловые
	|ГДЕ
	|	ЗначенияПоказателейОтчетовНечисловые"+ТекстОтбор+"
	|	И ЗначенияПоказателейОтчетовНечисловые.ИтоговоеЗначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбластьИзмененныхДанных.Организация,
	|	ОбластьИзмененныхДанных.ПериодОтчета,
	|	ОбластьИзмененныхДанных.Сценарий
	|Поместить ОбластьСтатусыПериодовСценариев
	|Индексировать По Организация, ПериодОтчета,Сценарий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбластьИзмененныхДанных.Показатель,
	|	ОбластьИзмененныхДанных.Организация,";
	
	Если ЕстьРазделениеПоПроектам Тогда
		
		Запрос.Текст=Запрос.Текст+"	
		|	ОбластьИзмененныхДанных.Проект,";
		
	КонецЕсли;

	Запрос.Текст=Запрос.Текст+"
	|	ОбластьИзмененныхДанных.ПериодОтчета,	
	|	ОбластьИзмененныхДанных.Сценарий" + ОбластьИзмененныхДанныхАналитика + "
	|Поместить ОбластьСтатусыПоказателей
	|Индексировать По Показатель,Организация,"+?(ЕстьРазделениеПоПроектам,"Проект,","")+"ПериодОтчета,Сценарий
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатусыПериодовСценариев.Периоды КАК ПериодОтчета,
	|	СтатусыПериодовСценариев.Организации КАК Организация,
	|	СтатусыПериодовСценариев.Сценарии КАК Сценарий,
	|	СтатусыПериодовСценариев.СтатусБлокировки
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбластьСтатусыПериодовСценариев КАК ОбластьСтатусыПериодовСценариев
	|		ПО СтатусыПериодовСценариев.Организации = ОбластьСтатусыПериодовСценариев.Организация
	|			И СтатусыПериодовСценариев.Периоды = ОбластьСтатусыПериодовСценариев.ПериодОтчета
	|			И СтатусыПериодовСценариев.Сценарии = ОбластьСтатусыПериодовСценариев.Сценарий
	|ГДЕ
	|	СтатусыПериодовСценариев.СтатусБлокировки > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСтатусовПоказателейСинтетика.ПериодОтчета,
	|	ЗначенияСтатусовПоказателейСинтетика.Сценарий,";
	
	Если ЕстьРазделениеПоПроектам Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|	ЗначенияСтатусовПоказателейСинтетика.Проект,";
		
	КонецЕсли;	
	
	Запрос.Текст=Запрос.Текст+"
	|	ЗначенияСтатусовПоказателейСинтетика.ОрганизационнаяЕдиница КАК Организация,
	|	ЗначенияСтатусовПоказателейСинтетика.Показатель,
	|	ЗначенияСтатусовПоказателейСинтетика.ЗначениеЗаблокировано,
	|	ЗначенияСтатусовПоказателейСинтетика.ИндексСостояния
	|ИЗ
	|	РегистрСведений.ЗначенияСтатусовПоказателейСинтетика КАК ЗначенияСтатусовПоказателейСинтетика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбластьСтатусыПоказателей КАК ОбластьСтатусыПоказателей
	|		ПО ЗначенияСтатусовПоказателейСинтетика.Показатель = ОбластьСтатусыПоказателей.Показатель
	|			И ЗначенияСтатусовПоказателейСинтетика.ОрганизационнаяЕдиница = ОбластьСтатусыПоказателей.Организация";
	
	Если ЕстьРазделениеПоПроектам Тогда
		
		Запрос.Текст=Запрос.Текст+"
		
		|И ЗначенияСтатусовПоказателейСинтетика.Проект = ОбластьСтатусыПоказателей.Проект";
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|			И ЗначенияСтатусовПоказателейСинтетика.ПериодОтчета = ОбластьСтатусыПоказателей.ПериодОтчета	
	|			И ЗначенияСтатусовПоказателейСинтетика.Сценарий = ОбластьСтатусыПоказателей.Сценарий" + ОтборПоАналитикам + "
	|ГДЕ
	|	(ЗначенияСтатусовПоказателейСинтетика.ЗначениеЗаблокировано >= 2
	|			ИЛИ ЗначенияСтатусовПоказателейСинтетика.ИндексСостояния = 3)
	|	И ЗначенияСтатусовПоказателейСинтетика.ВидОтчета = &ВидОтчета";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	Запрос.УстановитьПараметр("ЭлементСтруктуры",ЭлементСтруктуры);
	
	РезультатЗапроса=Запрос.ВыполнитьПакет();
	
	ТекстОшибки="";
	
	ЗаблокированныеПериоды=РезультатЗапроса[3].Выгрузить();
		
	Если ЗаблокированныеПериоды.Количество()>0 Тогда
		
		СтрокаШаблона = НСтр("ru = '
		|Организация %1, сценарий %2:
		|Период %3 закрыт.'");
		
		Для Каждого Строка ИЗ ЗаблокированныеПериоды Цикл
						
			СодержаниеОшибки = "";
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				СодержаниеОшибки = СтрШаблон(СтрокаШаблона, Строка.Организация, Строка.Сценарий, Строка.ПериодОтчета);						
			КонецЕсли;
			
			ТекстОшибки = ТекстОшибки + СодержаниеОшибки;
						
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстОшибки) Тогда
		
		ЗаблокированныеПоказатели=РезультатЗапроса[4].Выгрузить();
		
		Если ЗаблокированныеПоказатели.Количество()>0 Тогда
						
			Для Каждого Строка ИЗ ЗаблокированныеПоказатели Цикл
				
				СодержаниеОшибки = "";
				
				Если ЕстьРазделениеПоПроектам И ЗначениеЗаполнено(Строка.Проект) тогда
					
					СтрокаШаблона = НСтр("ru = '
					|Организация: %1, сценарий: %2, проект: %3,
					|Период: %4, вид отчета: %5, показатель %6: '");
					
					Если Не ПустаяСтрока(СтрокаШаблона) тогда
						СодержаниеОшибки = СтрШаблон(СтрокаШаблона, Строка.Организация, Строка.Сценарий, Строка.Проект, Строка.ПериодОтчета, ВидОтчета, Строка.Показатель);						
					КонецЕсли;
					
				Иначе
					
					СтрокаШаблона = НСтр("ru = '
					|Организация: %1, сценарий: %2,
					|Период: %3, вид отчета: %4, показатель %5: '");
					
					Если Не ПустаяСтрока(СтрокаШаблона) тогда
						СодержаниеОшибки = СтрШаблон(СтрокаШаблона, Строка.Организация, Строка.Сценарий, Строка.ПериодОтчета, ВидОтчета, Строка.Показатель);
					КонецЕсли;
					
				КонецЕсли;
				
				ТекстОшибки = ТекстОшибки + СодержаниеОшибки;
				
				Если Строка.ЗначениеЗаблокировано > 0 Тогда                               
					ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'значение заблокировано'");
				КонецЕсли;
				
				Если Строка.ИндексСостояния > 0 Тогда
					ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'данные утверждены'");
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Сред(ТекстОшибки,2);
	
КонецФункции // ПроверитьВозможностьИзмененияДанныхПоЗлементуСтруктуры()

Функция КоличествоИсточниковДанныхПоЭлементуСтруктуры(ЭлементСтруктуры) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИсточникиДанныхДляРасчетов.Ссылка) КАК Ссылка
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ ";
	
	Если ТипЗнч(ЭлементСтруктуры)=Тип("СправочникСсылка.ВидыОтчетов") Тогда
		
		Запрос.Текст=Запрос.Текст+"ИсточникиДанныхДляРасчетов.ПотребительРасчета.Владелец=&ЭлементСтруктуры
		|ИЛИ ИсточникиДанныхДляРасчетов.ПоказательОтбор.Владелец=&ЭлементСтруктуры";
		
	ИначеЕсли ТипЗнч(ЭлементСтруктуры)=Тип("СправочникСсылка.ГруппыРаскрытия") Тогда
		
		Запрос.Текст=Запрос.Текст+"ИсточникиДанныхДляРасчетов.ПотребительРасчета.ГруппаРаскрытия=&ЭлементСтруктуры
		|ИЛИ ИсточникиДанныхДляРасчетов.ПоказательОтбор.ГруппаРаскрытия=&ЭлементСтруктуры";
		
	ИначеЕсли ТипЗнч(ЭлементСтруктуры)=Тип("СправочникСсылка.СтрокиОтчетов") Тогда
		
		Запрос.Текст=Запрос.Текст+"ИсточникиДанныхДляРасчетов.ПотребительРасчета.Строка=&ЭлементСтруктуры
		|ИЛИ ИсточникиДанныхДляРасчетов.ПоказательОтбор.Строка=&ЭлементСтруктуры";
		
	ИначеЕсли ТипЗнч(ЭлементСтруктуры)=Тип("СправочникСсылка.КолонкиОтчетов") Тогда
		
		Запрос.Текст=Запрос.Текст+"ИсточникиДанныхДляРасчетов.ПотребительРасчета.Строка=&ЭлементСтруктуры
		|ИЛИ ИсточникиДанныхДляРасчетов.ПоказательОтбор.Строка=&ЭлементСтруктуры";
		
	Иначе
		
		Запрос.Текст=Запрос.Текст+"ИсточникиДанныхДляРасчетов.ПотребительРасчета=&ЭлементСтруктуры
		|ИЛИ ИсточникиДанныхДляРасчетов.ПоказательОтбор=&ЭлементСтруктуры";
		
	КонецЕсли;
	
	
	
КонецФункции // КоличествоИсточниковДанныхПоЭлементуСтруктуры() 

Функция ПолучитьИзменениеГруппРаскрытия(ИзмененныйОбъект,Ссылка,ТаблицаАналитикНовВидОтчета,ТаблицаАналитикСтарВидОтчета)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ГруппыРаскрытия.Ссылка,
	|	ГруппыРаскрытия.Валютная,";
	
	Для Индекс = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Запрос.Текст=Запрос.Текст+"
		|	ГруппыРаскрытия.ВидАналитики"+Индекс+",
		|	ГруппыРаскрытия.Аналитика"+Индекс+"Обязательна,";
		
	КонецЦикла;	
	
	Запрос.Текст=Запрос.Текст+"
	|	ГруппыРаскрытия.ВидАналитикиВалютаДт,
	|	ГруппыРаскрытия.ЧислоАналитик
	|ИЗ
	|	Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
	|ГДЕ
	|	ГруппыРаскрытия.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец",Ссылка);
	
	МакетТаблицыАналитик=ПолучитьМакетТаблицыАналитик();
		
	СдвигАналитик=ТаблицаАналитикСтарВидОтчета.Количество()-ТаблицаАналитикНовВидОтчета.Количество();
	ИзменениеГруппРаскрытия=Новый Соответствие;
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ТаблицаАналитикСтар	= МакетТаблицыАналитик.СкопироватьКолонки();
		ТаблицаАналитикНов	= МакетТаблицыАналитик.СкопироватьКолонки();
		
		Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			// Заполним таблицу аналитик до изменения
			
			СтрАналитикаВидаОтчетаСтар=ТаблицаАналитикСтарВидОтчета.Найти(Индекс,"ПорядковыйНомер");
			
			Если НЕ СтрАналитикаВидаОтчетаСтар=Неопределено Тогда
				
				НоваяСтрока=ТаблицаАналитикСтар.Добавить();
				НоваяСтрока.ПорядковыйНомер=Индекс;
				НоваяСтрока.ВидАналитики=СтрАналитикаВидаОтчетаСтар.ВидАналитики;
				НоваяСтрока.АналитикаВидаОтчета=Истина;
				
			ИначеЕсли ЗначениеЗаполнено(Результат["ВидАналитики"+Индекс]) Тогда
				
				НоваяСтрока=ТаблицаАналитикСтар.Добавить();
				НоваяСтрока.ПорядковыйНомер=Индекс;
				НоваяСтрока.ПорядковыйНомерСтар=Индекс;
				НоваяСтрока.ВидАналитики=Результат["ВидАналитики"+Индекс];
				НоваяСтрока.АналитикаОбязательна=Результат["Аналитика"+Индекс+"Обязательна"];
				
			КонецЕсли;
						
			СтрАналитикаВидаОтчетаНов=ТаблицаАналитикНовВидОтчета.Найти(Индекс,"ПорядковыйНомер");
			
			Если НЕ СтрАналитикаВидаОтчетаНов=Неопределено Тогда
				
				НоваяСтрока=ТаблицаАналитикНов.Добавить();
				НоваяСтрока.ПорядковыйНомер=Индекс;
				НоваяСтрока.ВидАналитики=СтрАналитикаВидаОтчетаНов.ВидАналитики;
				НоваяСтрока.АналитикаВидаОтчета=Истина;
				
			Иначе
				
				ИндексНовойАналитики=Индекс+СдвигАналитик;
				
				Если ИндексНовойАналитики>ПараметрыСеанса.ЧислоДопАналитик Тогда
					
					Прервать;
					
				КонецЕсли;
				
				
				
				Если ЗначениеЗаполнено(Результат["ВидАналитики"+ИндексНовойАналитики]) Тогда
					
					НоваяСтрока=ТаблицаАналитикНов.Добавить();
					НоваяСтрока.ПорядковыйНомер=Индекс;
					НоваяСтрока.ПорядковыйНомерСтар=ИндексНовойАналитики;
					НоваяСтрока.ВидАналитики=Результат["ВидАналитики"+ИндексНовойАналитики];
					НоваяСтрока.АналитикаОбязательна=Результат["Аналитика"+ИндексНовойАналитики+"Обязательна"];
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Строка ИЗ ТаблицаАналитикНов Цикл
			
			Если НЕ ЗначениеЗаполнено(Строка.ПорядковыйНомерСтар) Тогда
				
				Строка.ПорядковыйНомерСтар=Справочники.ГруппыРаскрытия.ВернутьНомерАналитикиСтар(Строка.ВидАналитики,ТаблицаАналитикСтар,Истина);
				
			КонецЕсли;	
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Результат.ВидАналитикиВалютаДт) Тогда
			
			НоваяСтрока=ТаблицаАналитикСтар.Добавить();
			НоваяСтрока.ПорядковыйНомер=-1;
			НоваяСтрока.ПорядковыйНомерСтар=-1;
			НоваяСтрока.ВидАналитики=Результат.ВидАналитикиВалютаДт;
			
			НоваяСтрока=ТаблицаАналитикНов.Добавить();
			НоваяСтрока.ПорядковыйНомер=-1;
			НоваяСтрока.ПорядковыйНомерСтар=-1;
			НоваяСтрока.ВидАналитики=Результат.ВидАналитикиВалютаДт;
			
		КонецЕсли;
		
		ИзменениеГруппРаскрытия.Вставить(Результат.Ссылка,Новый Структура("ТаблицаАналитикСтар,ТаблицаАналитикНов,ЕстьЗаписиВРегистрах",ТаблицаАналитикСтар,ТаблицаАналитикНов,ЕстьЗаписиПоЭлементуСтруктуры(Результат.Ссылка)));
		
	КонецЦикла;	
	
	Возврат ИзменениеГруппРаскрытия;
	
КонецФункции // ПолучитьИзменениеГруппРаскрытия()

Функция ВыполнитьДействияПоРеструктуризации(ДействияПриРеструктуризации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ДействияПриРеструктуризации)=Тип("Строка") Тогда
		
		СтруктураДействия=ПолучитьИзВременногоХранилища(ДействияПриРеструктуризации);
		
	Иначе
		
		СтруктураДействия=ДействияПриРеструктуризации;
		
	КонецЕсли;
		
	Отказ=Ложь;
	
	НачатьТранзакцию();
	
	Если СтруктураДействия.Свойство("ДействияПриИзмененииТипаПоказателя") Тогда
		
		ОчиститьДанныеПоПоказателюОтчета(СтруктураДействия.ЭлементСтруктуры,Отказ);
		ИзменитьТипЗначенияЯчеекПоказателя(СтруктураДействия.ЭлементСтруктуры,СтруктураДействия.ТипЗначенияНов,Отказ);
		УправлениеОтчетамиУХ.ОбновитьТипыЗначенийОперандов(СтруктураДействия.ЭлементСтруктуры);
		
		Если Отказ Тогда
			
			ОтменитьТранзакцию();
			Возврат Ложь;
			
		Иначе
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;

	Если СтруктураДействия.Свойство("ИзменениеРаскрытия") Тогда
		
		Если СтруктураДействия.Свойство("ЕстьИзменениеАналитикВидаОтчета")
			ИЛИ СтруктураДействия.Свойство("ПодтвержденаСверткаПоПроектам")
			ИЛИ СтруктураДействия.Свойство("ПодтвержденаОчисткапоПроектам") Тогда
			
			РеструктурироватьДанныеПоВидуОтчета(СтруктураДействия,Отказ);
			
		Иначе
			
			Для Каждого СтрокаДействие ИЗ СтруктураДействия.ИзменениеРаскрытия Цикл
				
				РеструктурироватьДанныеЭлементСтруктуры(СтрокаДействие,Отказ);
				
				Если Отказ Тогда
					
					ОтменитьТранзакцию();
					Возврат Ложь;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
					
	ЗафиксироватьТранзакцию();
	Возврат Истина;	
	
КонецФункции // ВыполнитьДействияПоРеструктуризации()

Процедура ОчиститьДанныеПоПоказателюОтчета(ПоказательОтчета,Отказ) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Владелец КАК ВидОтчета,
	|	ПоказателиОтчетов.ЧисловойПоказатель,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.ЧислоАналитик, 0) КАК ЧислоАналитикГруппыРаскрытия,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.Валютная, ЛОЖЬ) КАК Валютная,
	|	ПоказателиОтчетов.ГруппаРаскрытия
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Ссылка = &ПоказательОтчета";
	
	Запрос.УстановитьПараметр("ПоказательОтчета",ПоказательОтчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Результат.Следующий();
	
	Если НЕ Результат.ЧисловойПоказатель Тогда
		
		ОчиститьЗаписиРегистраПоЭлементуСтруктуры("ЗначенияПоказателейОтчетовНечисловые",ПоказательОтчета,Отказ);
		Возврат;
		
	КонецЕсли;
	
	// Очищаем синтетические значения
	
	АналитикВидаОтчета=ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(Результат.ВидОтчета);
	
	ИмяТаблицыСинтетики=УправлениеОтчетамиУХ.ВернутьИмяТаблицыСинтетики(АналитикВидаОтчета);
	
	ОчиститьЗаписиРегистраПоЭлементуСтруктуры(ИмяТаблицыСинтетики,ПоказательОтчета,Отказ);
	
	// Очищаем аналитические значения
	
	Если Результат.ЧислоАналитикГруппыРаскрытия>0 Тогда
				
		ОчиститьЗаписиРегистраПоЭлементуСтруктуры("ЗначенияПоказателейОтчетов"+(АналитикВидаОтчета+Результат.ЧислоАналитикГруппыРаскрытия),ПоказательОтчета,Отказ);
		
	ИначеЕсли Результат.Валютная Тогда
		
		ОчиститьЗаписиРегистраПоЭлементуСтруктуры("ЗначенияПоказателейОтчетовВалютные",ПоказательОтчета,Отказ);
		
	КонецЕсли;
		 	
КонецПроцедуры // ОчиститьДанныеПоЭлементуСтруктуры()

Процедура ИзменитьТипЗначенияЯчеекПоказателя(ПоказательОтчета,ТипЗначенияНов,Отказ) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	БланкиОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БланкиОтчетов КАК БланкиОтчетов
	|ГДЕ
	|	БланкиОтчетов.Владелец = &ВидОтчета
	|	И НЕ БланкиОтчетов.ПометкаУдаления
	|	И НЕ БланкиОтчетов.РежимБланка = 1";
	
	Запрос.УстановитьПараметр("ВидОтчета",ПоказательОтчета.Владелец);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СправочникОбъект=Результат.Ссылка.ПолучитьОбъект();
		
		Попытка
		
		СправочникОбъект.Макет=ИзменитьТипыЯчеекМакет(СправочникОбъект.Макет,ПоказательОтчета,ТипЗначенияНов);
		
		Для Каждого СтрМакет ИЗ СправочникОбъект.МакетРаскрытий Цикл
			
			СтрМакет.Макет=ИзменитьТипыЯчеекМакет(СтрМакет.Макет,ПоказательОтчета,ТипЗначенияНов);
			
		КонецЦикла;
		
		СправочникОбъект.ОбменДанными.Загрузка=Истина;
		СправочникОбъект.Записать();
		
		Исключение
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),Отказ,,СтатусСообщения.Важное);
			
			Возврат;
			
		КонецПопытки;

	КонецЦикла;	
			
КонецПроцедуры // ИзменитьТипЗначенияЯчеекПоказателя() 

Функция ИзменитьТипыЯчеекМакет(Макет,Показатель,ТипЗначения) Экспорт
	
	ДанныеМакета=Макет.Получить();
	
	МакетКода=СокрЛП(Показатель.Код);
	
	ТипЗначенияОбласти=ОбщегоНазначенияУХ.ПолучитьОписаниеТипаПоТипуПоказателя(ТипЗначения);
	
	Если ТипЗнч(ДанныеМакета)=Тип("Структура") Тогда
		
		Для Каждого КлючИЗначение ИЗ ДанныеМакета Цикл
			
			Если ТипЗнч(КлючИЗначение.Значение)=Тип("ТабличныйДокумент") Тогда
				
				Для Каждого Область ИЗ КлючИЗначение.Значение.Области Цикл
					
					Если (Область.Имя=МакетКода ИЛИ СтрНайти(Область.Имя,"_Показатель_"+МакетКода)>0)
						И Область.СодержитЗначение Тогда
						
						Область.ТипЗначения=ТипЗначенияОбласти;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеМакета)=Тип("ТабличныйДокумент") Тогда
		
		Для Каждого Область ИЗ ДанныеМакета.Области Цикл
			
			Если (Область.Имя=МакетКода ИЛИ СтрНайти(Область.Имя,"_Показатель_"+МакетКода)>0)
				И Область.СодержитЗначение Тогда
				
				Область.ТипЗначения=ТипЗначенияОбласти;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Сжатие = Новый СжатиеДанных(9);
	Возврат Новый ХранилищеЗначения(ДанныеМакета, Сжатие);
 	
КонецФункции // ИзменитьТипыЯчеекМакет() 

Процедура ИзменитьАналитикуГруппыРаскрытия(ПараметрыДействия,Отказ)
	
	ГруппаРаскрытия=ПараметрыДействия.ЭлементСтруктуры.ПолучитьОбъект();
	ТаблицаАналитикНов=ПараметрыДействия.ТаблицаАналитикНов;
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		СтрАналитика=ТаблицаАналитикНов.Найти(Индекс,"ПорядковыйНомер");
		
		Если СтрАналитика=Неопределено ИЛИ СтрАналитика.АналитикаВидаОтчета Тогда
			
			ГруппаРаскрытия["ВидАналитики"+Индекс]=Неопределено;
			ГруппаРаскрытия["Аналитика"+Индекс+"Обязательна"]=Ложь;
			
		Иначе
			
			ГруппаРаскрытия["ВидАналитики"+Индекс]=СтрАналитика.ВидАналитики;
			ГруппаРаскрытия["Аналитика"+Индекс+"Обязательна"]=СтрАналитика.АналитикаОбязательна;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрАналитикаВалюта=ТаблицаАналитикНов.Найти(-1,"ПорядковыйНомер");
	
	Если Не СтрАналитикаВалюта=Неопределено Тогда
		
		ГруппаРаскрытия.Валютная=Истина;
		ГруппаРаскрытия.ВидАналитикиВалютаДт=СтрАналитикаВалюта.ВидАналитики;
		
	КонецЕсли;
	
	Попытка
		
		ГруппаРаскрытия.Записать();
		
	Исключение
		
		СтрокаШаблона = НСтр("ru = 'Не удалось изменить аналитику группы раскрытия %1:
		|%2'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ГруппаРаскрытия, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())), Отказ,, СтатусСообщения.Важное);
		КонецЕсли;
		
		Отказ = Истина;
		Возврат;
		
	КонецПопытки;
				
КонецПроцедуры // ИзменитьАналитикуГруппыРаскрытия() 

/////////////////////////////////////////////////////////////////////////////////////////////
// Реструктуризация при изменении аналитик на уровне вида отчета

Процедура РеструктурироватьДанныеПоВидуОтчета(СтруктураДействия,Отказ)
	
	ИзменениеРаскрытия=СтруктураДействия.ИзменениеРаскрытия;
	ИзменениеРаскрытия.Сортировать("ВидОтчета Убыв");
	
	ОчищатьПроекты=СтруктураДействия.Свойство("ПодтвержденаСверткаПоПроектам");
	
	СтрВидОтчета=ИзменениеРаскрытия[0];
	
	СоздатьПротоколИзмененияОперандов(СтрВидОтчета.ЭлементСтруктуры,СтрВидОтчета.ТаблицаАналитикСтар,СтрВидОтчета.ТаблицаАналитикНов);
	
	Если СтрВидОтчета.ЕстьЗаписиВРегистрах Тогда
		
		Если СтрВидОтчета.ОчищатьСинтетическиеЗначения Тогда
			
			ОчиститьДанныеПоВидуОтчета(СтрВидОтчета.ЭлементСтруктуры,Отказ);
			
			Если Отказ Тогда
				
				Возврат;
				
			КонецЕсли;
			
		Иначе
			
			ИмяРегистраСтар=ПолучитьИмяРегистраСинтетика(СтрВидОтчета.ТаблицаАналитикСтар);
			ИмяРегистраНов=ПолучитьИмяРегистраСинтетика(СтрВидОтчета.ТаблицаАналитикНов);
			
			ВидОтчетаПеренестиДанныеИзРегистраВРегистр(СтрВидОтчета.ЭлементСтруктуры,ИмяРегистраСтар,ИмяРегистраНов,СтрВидОтчета.ТаблицаАналитикСтар,СтрВидОтчета.ТаблицаАналитикНов,ОчищатьПроекты,Отказ);
			
			Если Отказ Тогда
				
				Возврат;
				
			КонецЕсли;
						
			// Проверим и при необходимости перенесем нечисловые показатели
			
			Если ЕстьНечисловыеПоказателиЭлементСтруктуры(СтрВидОтчета.ЭлементСтруктуры) Тогда
				
				ВидОтчетаПеренестиДанныеИзРегистраВРегистр(СтрВидОтчета.ЭлементСтруктуры,"ЗначенияПоказателейОтчетовНечисловые","ЗначенияПоказателейОтчетовНечисловые",СтрВидОтчета.ТаблицаАналитикСтар,СтрВидОтчета.ТаблицаАналитикНов,ОчищатьПроекты,Отказ);
				
				Если Отказ Тогда
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Индекс=1 По ИзменениеРаскрытия.Количество()-1 Цикл
		
		ПараметрыДействия=ИзменениеРаскрытия[Индекс];
		
		Если СтруктураДействия.Свойство("ЕстьИзменениеАналитикВидаОтчета") Тогда
			
			// Изменяем аналитику группы раскрытия
			
			ИзменитьАналитикуГруппыРаскрытия(ПараметрыДействия,Отказ);
			
			Если Отказ Тогда
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыДействия.ЕстьЗаписиВРегистрах И (НЕ СтрВидОтчета.ОчищатьСинтетическиеЗначения) Тогда
			
			ИмяРегистраСтар=ПолучитьИмяРегистра(ПараметрыДействия.ТаблицаАналитикСтар);
			ИмяРегистраНов=ПолучитьИмяРегистра(ПараметрыДействия.ТаблицаАналитикНов);
			
			ВидОтчетаПеренестиДанныеИзРегистраВРегистр(ПараметрыДействия.ЭлементСтруктуры,ИмяРегистраСтар,ИмяРегистраНов,ПараметрыДействия.ТаблицаАналитикСтар,ПараметрыДействия.ТаблицаАналитикНов,ОчищатьПроекты,Отказ);
			
			Если Отказ Тогда
				
				Возврат;
				
			КонецЕсли;
			
			// Проверим и при необходимости перенесем нечисловые показатели
			
			Если ЕстьНечисловыеПоказателиЭлементСтруктуры(ПараметрыДействия.ЭлементСтруктуры) Тогда
				
				ВидОтчетаПеренестиДанныеИзРегистраВРегистр(ПараметрыДействия.ЭлементСтруктуры,"ЗначенияПоказателейОтчетовНечисловые","ЗначенияПоказателейОтчетовНечисловые",ПараметрыДействия.ТаблицаАналитикСтар,ПараметрыДействия.ТаблицаАналитикНов,ОчищатьПроекты,Отказ);
				
				Если Отказ Тогда
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РеструктурироватьДанныеПоВидуОтчета() 

Процедура ОчиститьДанныеПоВидуОтчета(ВидОтчета,Отказ) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.Владелец КАК ОписаниеВерсий
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Попытка
			
			ОбъектОписаниеВерсий = Результат.ОписаниеВерсий.ПолучитьОбъект();
			ОбъектОписаниеВерсий.БезусловноеУдаление = Истина;
			ОбъектОписаниеВерсий.Удалить();
			
		Исключение
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),Отказ,,СтатусСообщения.Важное);
			
			Возврат;
			
		КонецПопытки;
		
	КонецЦикла;
	
	УстановитьПометкуУдаленияЭкземплярОтчета(ВидОтчета,Отказ);
		
КонецПроцедуры // ОчиститьДанныеПоВидуОтчета()

Процедура ВидОтчетаПеренестиДанныеИзРегистраВРегистр(ЭлементСтруктуры,ИмяРегистраСтар,ИмяРегистраНов,ТаблицаАналитикСтар,ТаблицаАналитикНов,ОчищатьПроекты,Отказ)
ТаблицаАналитикНов.Сортировать("ПорядковыйНомерСтар Возр");
	
	ПереносСинтетики=(ТипЗнч(ЭлементСтруктуры)=Тип("СправочникСсылка.ВидыОтчетов"));
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	ТекстПоля="";
	ТекстГруппировки="";
	ТекстРеквизитыВерсии="ВерсияОрганизация,ВерсияПериодОтчета,ВерсияСценарий,ВерсияПроект,ВерсияВалюта,ВерсияЗаписьВДополнительнойВалюте";
	
	ТекстСоединенияВерсии="ТаблицаЗначенийПоказателей.ВерсияОрганизация=ТаблицаВерсий.ВерсияОрганизация
	|И ТаблицаЗначенийПоказателей.ВерсияПериодОтчета=ТаблицаВерсий.ВерсияПериодОтчета 
	|И ТаблицаЗначенийПоказателей.ВерсияСценарий=ТаблицаВерсий.ВерсияСценарий
	|И ТаблицаЗначенийПоказателей.ВерсияПроект=ТаблицаВерсий.ВерсияПроект
	|И ТаблицаЗначенийПоказателей.ВерсияВалюта=ТаблицаВерсий.ВерсияВалюта";
	
	ТекстПоляНов=",ТаблицаЗначенийПоказателей.Значение";
			
	Для Каждого Строка ИЗ ТаблицаАналитикНов Цикл
		
		Если Строка.ПорядковыйНомерСтар=-1 Тогда
			
			Если Строка.АналитикаВидаОтчета Тогда
				
				Продолжить;
			
			ИначеЕсли ИмяРегистраСтар="ЗначенияПоказателейОтчетовНечисловые" Тогда
				
				ТекстПоля=ТекстПоля+",
				|ЗначенияПоказателейОтчетовСтар.АналитикаВалюта КАК Аналитика"+?(Строка.ПорядковыйНомер=-1,"Валюта",Строка.ПорядковыйНомер)+",";
				
			Иначе
				
				ТекстПоля=ТекстПоля+",
				|ЗначенияПоказателейОтчетовСтар.АналитикаВалюта КАК Аналитика"+?(Строка.ПорядковыйНомер=-1,"Валюта",Строка.ПорядковыйНомер)+",
				|СУММА(ЗначенияПоказателейОтчетовСтар.ЗначениеВалюта) КАК ЗначениеВалюта";
				
				ТекстГруппировки=ТекстГруппировки+",
				|ЗначенияПоказателейОтчетовСтар.АналитикаВалюта";
				
			КонецЕсли;
			
			ТекстПоляНов=ТекстПоляНов+",
			|ТаблицаЗначенийПоказателей.Аналитика"+?(Строка.ПорядковыйНомер=-1,"Валюта",Строка.ПорядковыйНомер)+",
			|ТаблицаЗначенийПоказателей.ЗначениеВалюта";
						
		ИначеЕсли ЗначениеЗаполнено(Строка.ПорядковыйНомерСтар) Тогда
			
			ТекстПоля=ТекстПоля+",
			|ЗначенияПоказателейОтчетовСтар.Аналитика"+Строка.ПорядковыйНомерСтар+" КАК Аналитика"+?(Строка.ПорядковыйНомер=-1,"Валюта",Строка.ПорядковыйНомер);
			
			ТекстГруппировки=ТекстГруппировки+",
			|ЗначенияПоказателейОтчетовСтар.Аналитика"+Строка.ПорядковыйНомерСтар;
			
			ТекстПоляНов=ТекстПоляНов+",
			|ТаблицаЗначенийПоказателей.Аналитика"+?(Строка.ПорядковыйНомер=-1,"Валюта",Строка.ПорядковыйНомер);
	
			СтрокаСтар=ТаблицаАналитикСтар.Найти(Строка.ПорядковыйНомерСтар,"ПорядковыйНомер");
			
			Если СтрокаСтар.АналитикаВидаОтчета Тогда
				
				ТекстПоля=ТекстПоля+",
				|ЗначенияПоказателейОтчетовСтар.Версия.Аналитика"+Строка.ПорядковыйНомерСтар+" КАК ВерсияАналитика"+Строка.ПорядковыйНомер;
				
				ТекстГруппировки=ТекстГруппировки+",
				|ЗначенияПоказателейОтчетовСтар.Версия.Аналитика"+Строка.ПорядковыйНомерСтар;
				
				ТекстРеквизитыВерсии=ТекстРеквизитыВерсии+",ВерсияАналитика"+Строка.ПорядковыйНомер;
				
				ТекстСоединенияВерсии=ТекстСоединенияВерсии+"
				|И ТаблицаЗначенийПоказателей.ВерсияАналитика"+Строка.ПорядковыйНомер+"=ТаблицаВерсий.ВерсияАналитика"+Строка.ПорядковыйНомер;
				
			КонецЕсли;
				
		Иначе
			
			ТекстПоля=ТекстПоля+",
			|&Аналитика"+Строка.ПорядковыйНомер+" КАК Аналитика"+?(Строка.ПорядковыйНомер=-1,"Валюта",Строка.ПорядковыйНомер);
			
			Запрос.УстановитьПараметр("Аналитика"+?(Строка.ПорядковыйНомер=-1,"Валюта",Строка.ПорядковыйНомер),КэшируемыеПроцедурыУХ.ПолучитьПустоеЗначениеПоВидуАналитики(Строка.ВидАналитики));
			
			ТекстПоляНов=ТекстПоляНов+",
			|ТаблицаЗначенийПоказателей.Аналитика"+?(Строка.ПорядковыйНомер=-1,"Валюта",Строка.ПорядковыйНомер);
			
			Если Строка.АналитикаВидаОтчета Тогда
				
				ТекстПоля=ТекстПоля+",
				|&ВерсияАналитика"+Строка.ПорядковыйНомер+" КАК ВерсияАналитика"+Строка.ПорядковыйНомер;
				
				Запрос.УстановитьПараметр("ВерсияАналитика"+Строка.ПорядковыйНомер,КэшируемыеПроцедурыУХ.ПолучитьПустоеЗначениеПоВидуАналитики(Строка.ВидАналитики));
				
				ТекстРеквизитыВерсии=ТекстРеквизитыВерсии+",ВерсияАналитика"+Строка.ПорядковыйНомер;
				
				ТекстСоединенияВерсии=ТекстСоединенияВерсии+"
				|И ТаблицаЗначенийПоказателей.ВерсияАналитика"+Строка.ПорядковыйНомер+"=ТаблицаВерсий.ВерсияАналитика"+Строка.ПорядковыйНомер;
				
			КонецЕсли;
					
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст="
	|ВЫБРАТЬ "+?(ИмяРегистраСтар="ЗначенияПоказателейОтчетовНечисловые","РАЗЛИЧНЫЕ ","")+"ЗначенияПоказателейОтчетовСтар.Версия.Организация КАК ВерсияОрганизация,
	|ЗначенияПоказателейОтчетовСтар.Версия.ПериодОтчета КАК ВерсияПериодОтчета,
	|ЗначенияПоказателейОтчетовСтар.Версия.Сценарий КАК ВерсияСценарий,
	|ЗначенияПоказателейОтчетовСтар.Версия.Валюта КАК ВерсияВалюта,";
	
	Если НЕ ОчищатьПроекты Тогда
		
		Запрос.Текст=Запрос.Текст+"	
		|ЗначенияПоказателейОтчетовСтар.Версия.Проект КАК ВерсияПроект,";
		
	Иначе
		
		Запрос.Текст=Запрос.Текст+"	
		|ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка) КАК ВерсияПроект,";
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|ЗначенияПоказателейОтчетовСтар.Версия.ЗаписьВДополнительнойВалюте КАК ВерсияЗаписьВДополнительнойВалюте,
	|ЗначенияПоказателейОтчетовСтар.Показатель"+ТекстПоля+",";
	
	Если ИмяРегистраСтар="ЗначенияПоказателейОтчетовНечисловые" Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|ЗначенияПоказателейОтчетовСтар.Значение КАК Значение";
		
	Иначе
		
		Запрос.Текст=Запрос.Текст+"
		|Сумма(ЗначенияПоказателейОтчетовСтар.Значение) КАК Значение";
		
	КонецЕсли;
			
	Запрос.Текст=Запрос.Текст+"
	|Поместить ТаблицаЗначенийПоказателей
	|ИЗ РегистрСведений."+ИмяРегистраСтар+" КАК ЗначенияПоказателейОтчетовСтар
	|ГДЕ ЗначенияПоказателейОтчетовСтар"+ПолучитьТекстОтбораДляПереносаДанных(ЭлементСтруктуры);
	
	Если НЕ ИмяРегистраСтар="ЗначенияПоказателейОтчетовСинтетика" Тогда
		
		Запрос.Текст=Запрос.Текст+"	
		|И "+?(ПереносСинтетики,"","НЕ ")+"ЗначенияПоказателейОтчетовСтар.ИтоговоеЗначение";
		
	КонецЕсли;
	
	Если НЕ ИмяРегистраСтар="ЗначенияПоказателейОтчетовНечисловые" Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|СГРУППИРОВАТЬ ПО ЗначенияПоказателейОтчетовСтар.Версия.Организация,
		|ЗначенияПоказателейОтчетовСтар.Версия.ПериодОтчета,
		|ЗначенияПоказателейОтчетовСтар.Версия.Сценарий,
		|ЗначенияПоказателейОтчетовСтар.Версия.Валюта,"+?(ОчищатьПроекты,"","ЗначенияПоказателейОтчетовСтар.Версия.Проект,")+"
		|ЗначенияПоказателейОтчетовСтар.Версия.ЗаписьВДополнительнойВалюте,ЗначенияПоказателейОтчетовСтар.Показатель"+ТекстГруппировки;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЭлементСтруктуры",ЭлементСтруктуры);
	Запрос.Выполнить();
		
	Если ПереносСинтетики И (НЕ ИмяРегистраСтар="ЗначенияПоказателейОтчетовНечисловые") Тогда // Необходимо создать новые версии для измененной структуры аналитик
		
		Запрос.Текст="
		|ВЫБРАТЬ РАЗЛИЧНЫЕ "+ТекстРеквизитыВерсии+"
		|ИЗ ТаблицаЗначенийПоказателей КАК ТаблицаЗначенийПоказателей";
		
		ТаблицаВерсий=Запрос.Выполнить().Выгрузить();
		
		ДополнитьТаблицуВерсий(ЭлементСтруктуры,ТаблицаВерсий,Отказ);
		
		Если Отказ Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Запрос.Текст="ВЫБРАТЬ * Поместить ТаблицаВерсий ИЗ &ТаблицаВерсий КАК ТаблицаВерсий";
		Запрос.УстановитьПараметр("ТаблицаВерсий",ТаблицаВерсий);
		
	Иначе // Версии уже были созданы при переносе синтетических значений
		
		Запрос.Текст="ВЫБРАТЬ
		|	ВерсииЗначенийПоказателей.Ссылка КАК Версия,
		|	ВерсииЗначенийПоказателей.Организация КАК ВерсияОрганизация,
		|	ВерсииЗначенийПоказателей.ПериодОтчета КАК ВерсияПериодОтчета,
		|	ВерсииЗначенийПоказателей.Сценарий КАК ВерсияСценарий,
		|	ВерсииЗначенийПоказателей.Валюта КАК ВерсияВалюта,
		|	ВерсииЗначенийПоказателей.Проект КАК ВерсияПроект,
		|	ВерсииЗначенийПоказателей.Аналитика1 КАК ВерсияАналитика1,
		|	ВерсииЗначенийПоказателей.Аналитика2 КАК ВерсияАналитика2,
		|	ВерсииЗначенийПоказателей.Аналитика3 КАК ВерсияАналитика3,
		|	ВерсииЗначенийПоказателей.Аналитика4 КАК ВерсияАналитика4,
		|	ВерсииЗначенийПоказателей.Аналитика5 КАК ВерсияАналитика5
		|ПОМЕСТИТЬ ТаблицаВерсий
		|ИЗ
		|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
		|ГДЕ
		|	НЕ ВерсииЗначенийПоказателей.ПометкаУдаления
		|	И ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета";
		
		Запрос.УстановитьПараметр("ВидОтчета",?(ПереносСинтетики,ЭлементСтруктуры,ЭлементСтруктуры.Владелец));
					
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|;
	|ВЫБРАТЬ
	|ТаблицаЗначенийПоказателей.Показатель"+ТекстПоляНов+",ТаблицаВерсий.Версия
	|ИЗ ТаблицаЗначенийПоказателей КАК ТаблицаЗначенийПоказателей 
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВерсий КАК ТаблицаВерсий
	|ПО "+ТекстСоединенияВерсии;
	
	ЧислоЗаписей=0;
	
	ТаблицаКПереносу=Запрос.Выполнить().Выгрузить();
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	Если ПереносСинтетики Тогда
		
		ОчиститьЗаписиРегистраПоВидуОтчета(ИмяРегистраСтар,ЭлементСтруктуры,Отказ,Истина);
		
	Иначе
		
		ОчиститьЗаписиРегистраПоЭлементуСтруктуры(ИмяРегистраСтар,ЭлементСтруктуры,Отказ,Ложь);
		
	КонецЕсли;

	НаборЗаписей=РегистрыСведений[ИмяРегистраНов].СоздатьНаборЗаписей();
		
	Для Каждого Результат ИЗ ТаблицаКПереносу Цикл
		
		Если Результат.Значение=0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока=НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
		
		Если НЕ ИмяРегистраНов="ЗначенияПоказателейОтчетовСинтетика" Тогда
			
			НоваяСтрока.ИтоговоеЗначение=ПереносСинтетики;
			
		КонецЕсли;
		
		ЧислоЗаписей=ЧислоЗаписей+1;
		
		Если ЧислоЗаписей>20000 Тогда
			
			Попытка
				
				НаборЗаписей.Записать(Ложь);
				ЧислоЗаписей=0;
				НаборЗаписей=РегистрыСведений[ИмяРегистраНов].СоздатьНаборЗаписей();
				
			Исключение
				
				Если ПереносСинтетики тогда
					СтрокаШаблона = НСтр("ru = 'При переносе записей синтетических значений показателей
					|из регистра %1 в регистр %2 произошла ошибка:
					|%3'");
				Иначе
					СтрокаШаблона = НСтр("ru = 'При переносе записей аналитических значений показателей
					|из регистра %1 в регистр %2 произошла ошибка:
					|%3'");
				КонецЕсли;
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ИмяРегистраСтар, ИмяРегистраНов, ОписаниеОшибки()), 
						Отказ,, СтатусСообщения.Важное);
				КонецЕсли;
				
				Отказ=Истина;	
				Возврат
				
			КонецПопытки;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		
		НаборЗаписей.Записать(Ложь);
		
	Исключение
		
		Если ПереносСинтетики тогда
			СтрокаШаблона = НСтр("ru = 'При переносе записей синтетических значений показателей
			|из регистра %1 в регистр %2 произошла ошибка:
			|%3'");
		Иначе
			СтрокаШаблона = НСтр("ru = 'При переносе записей аналитических значений показателей
			|из регистра %1 в регистр %2 произошла ошибка:
			|%3'");
		КонецЕсли;
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ИмяРегистраСтар, ИмяРегистраНов, ОписаниеОшибки()), 
			Отказ,, СтатусСообщения.Важное);
		КонецЕсли;
		
		Отказ=Истина;	
		Возврат
		
	КонецПопытки;	

КонецПроцедуры // ПеренестиДанныеИзРегистраВРегистр()

Процедура ДополнитьТаблицуВерсий(ВидОтчета,ТаблицаВерсий,Отказ)
	
	УстановитьПометкуУдаленияЭкземплярОтчета(ВидОтчета,Отказ);
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПометкуУдаленияВерсии(ВидОтчета,Отказ);
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТаблицаВерсий.Колонки.Добавить("Версия",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ВерсииЗначенийПоказателей"));
	
	МассивОсновныхВерсий=ТаблицаВерсий.НайтиСтроки(Новый Структура("ВерсияЗаписьВДополнительнойВалюте",Ложь));
	
	Для Каждого Строка ИЗ МассивОсновныхВерсий Цикл
		
		СтруктураОбъекта=Новый Структура;
		СтруктураОбъекта.Вставить("ВидОтчета",		ВидОтчета);
		СтруктураОбъекта.Вставить("Организация",	Строка.ВерсияОрганизация);
		СтруктураОбъекта.Вставить("ПериодОтчета",	Строка.ВерсияПериодОтчета);
		СтруктураОбъекта.Вставить("Сценарий",		Строка.ВерсияСценарий);
		СтруктураОбъекта.Вставить("ОсновнаяВалюта",	Строка.ВерсияВалюта);
		
		Если НЕ ТаблицаВерсий.Колонки.Найти("ВерсияПроект")=Неопределено Тогда
			
			СтруктураОбъекта.Вставить("Проект",	Строка.ВерсияПроект);
			СтруктураОбъекта.Вставить("РазделениеПоПроектам",Истина);
			
		Иначе
			
			 СтруктураОбъекта.Вставить("РазделениеПоПроектам",Ложь);
			 СтруктураОбъекта.Вставить("Проект",Справочники.Проекты.ПустаяСсылка());
							
		КонецЕсли;
			
		СтруктураАналитик=Новый Структура;
		
		Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			Если НЕ ТаблицаВерсий.Колонки.Найти("ВерсияАналитика"+Индекс)=Неопределено Тогда
				
				 СтруктураОбъекта.Вставить("Аналитика"+Индекс,Строка["ВерсияАналитика"+Индекс]);
				 СтруктураАналитик.Вставить("Аналитика"+Индекс,Строка["ВерсияАналитика"+Индекс]);
							 
			 Иначе
				 
				 СтруктураОбъекта.Вставить("Аналитика"+Индекс,Неопределено);
				 СтруктураАналитик.Вставить("Аналитика"+Индекс,Неопределено);
					 
			 КонецЕсли;
			 
		 КонецЦикла;
		 
		 ЭкземплярОтчета=Документы.НастраиваемыйОтчет.ПолучитьЭкземплярОтчета(СтруктураОбъекта.Организация,
		 																	СтруктураОбъекта.ПериодОтчета,
																			СтруктураОбъекта.Сценарий,
																			ВидОтчета,
																			СтруктураОбъекта.ОсновнаяВалюта,
																			Истина,
																			Истина,
																			,
																			СтруктураОбъекта.Проект,
																			Ложь,
																			?(СтруктураАналитик.Количество()>0,СтруктураАналитик,Неопределено));
																			
		Если ЭкземплярОтчета.ПометкаУдаления Тогда
			
			ДокументОбъект=ЭкземплярОтчета.ПолучитьОбъект();
			ДокументОбъект.ОбрабатыватьПометкуУдаленияОписанияВерсий=Ложь;
			ДокументОбъект.ПометкаУдаления=Ложь;
			
			Попытка
				
				ДокументОбъект.ОбменДанными.Загрузка=Истина;
				ДокументОбъект.Записать();
				
			Исключение
				
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),Отказ,,СтатусСообщения.Важное);
				Возврат;
				
			КонецПопытки;

		КонецЕсли;																	
																			
		СтруктураОбъекта.Вставить("Ссылка",ЭкземплярОтчета);
		СтруктураОбъекта.Вставить("СохранятьИсториюИзменений",Ложь);
		СтруктураОбъекта.Вставить("СпособФормированияОтчета",Перечисления.СпособыФормированияОтчетов.РучноеЗаполнение);
		СтруктураОбъекта.Вставить("РежимКорректировки",Ложь);
		СтруктураОбъекта.Вставить("ВерсияХранимогоФайла");
		СтруктураОбъекта.Вставить("Вариант");
		СтруктураОбъекта.Вставить("АктивностьДвижений",Истина);
		СтруктураОбъекта.Вставить("ПредставлениеОбъекта","");
		СтруктураОбъекта.Вставить("ПоследнийРедактировавший",ЭкземплярОтчета.ПоследнийРедактировавший);
		СтруктураОбъекта.Вставить("ДатаИзмененияMs",ТекущаяУниверсальнаяДатаВМиллисекундах());
		
		Строка.Версия=УправлениеОтчетамиУХ.ПолучитьРабочуюВерсию(СтруктураОбъекта);
		
		Если Строка.Версия=Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;
		
		СтруктураПоиска=Новый Структура();
		
		Для Каждого Колонка ИЗ ТаблицаВерсий.Колонки Цикл
			
			Если Колонка.Имя="Версия" 
				ИЛИ Колонка.Имя="ВерсияЗаписьВДополнительнойВалюте"
				ИЛИ Колонка.Имя="ВерсияВалюта" Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СтруктураПоиска.Вставить(Колонка.Имя,Строка[Колонка.Имя]);
			
		КонецЦикла;
		
		СтруктураПоиска.Вставить("ВерсияЗаписьВДополнительнойВалюте",Истина);
		
		МассивДополнительныхВалют=ТаблицаВерсий.НайтиСтроки(СтруктураПоиска);
		
		Если МассивДополнительныхВалют.Количество()>0 Тогда
			
			ДокументОбъект=ЭкземплярОтчета.ПолучитьОбъект();
			
			Для Каждого СтрокаВалюта ИЗ МассивДополнительныхВалют Цикл
				
				НоваяСтрока=ДокументОбъект.ДополнительныеВалюты.Добавить();
				НоваяСтрока.Валюта=СтрокаВалюта.ВерсияВалюта;
				
				СтрокаВалюта.Версия=УправлениеОтчетамиУХ.ПолучитьВерсию(СтруктураОбъекта,Отказ, СтрокаВалюта.ВерсияВалюта, СтруктураОбъекта.ОписаниеВерсии, Истина,Истина,Истина);
				
				Если Отказ Тогда
					
					Возврат;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Попытка
				
				ДокументОбъект.ОбменДанными.Загрузка=Истина;
				ДокументОбъект.Записать();
				
			Исключение
				
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),Отказ,,СтатусСообщения.Важное);
				Возврат;
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры // ДополнитьТаблицуВерсий()

// Реструктуризация при изменении аналитик на уровне вида отчета
/////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура ПеренестиДанныеИзРегистраВРегистр(ЭлементСтруктуры,ИмяРегистраСтар,ИмяРегистраНов,ТаблицаАналитикСтар,ТаблицаАналитикНов,Отказ)
	
	ТаблицаАналитикНов.Сортировать("ПорядковыйНомерСтар Возр");
		
	Запрос=Новый Запрос;
	
	ТекстПоля="";
	ТекстГруппировки="";
			
	Для Каждого Строка ИЗ ТаблицаАналитикНов Цикл
		
		Если Строка.ПорядковыйНомерСтар=-1 Тогда
			
			ТекстПоля=ТекстПоля+",
			|ЗначенияПоказателейОтчетовСтар.АналитикаВалюта КАК Аналитика"+?(Строка.ПорядковыйНомер=-1,"Валюта",Строка.ПорядковыйНомер)+",
			|СУММА(ЗначенияПоказателейОтчетовСтар.ЗначениеВалюта) КАК ЗначениеВалюта";
			
			ТекстГруппировки=ТекстГруппировки+",
			|ЗначенияПоказателейОтчетовСтар.АналитикаВалюта";
				
		ИначеЕсли ЗначениеЗаполнено(Строка.ПорядковыйНомерСтар) Тогда
			
			ТекстПоля=ТекстПоля+",
			|ЗначенияПоказателейОтчетовСтар.Аналитика"+Строка.ПорядковыйНомерСтар+" КАК Аналитика"+?(Строка.ПорядковыйНомер=-1,"Валюта",Строка.ПорядковыйНомер);
			
			ТекстГруппировки=ТекстГруппировки+",
			|ЗначенияПоказателейОтчетовСтар.Аналитика"+Строка.ПорядковыйНомерСтар;
			
		Иначе
			
			ТекстПоля=ТекстПоля+",
			|&Аналитика"+?(Строка.ПорядковыйНомер=-1,"Валюта",Строка.ПорядковыйНомер)+" КАК Аналитика"+?(Строка.ПорядковыйНомер=-1,"Валюта",Строка.ПорядковыйНомер);
							
			Запрос.УстановитьПараметр("Аналитика"+?(Строка.ПорядковыйНомер=-1,"Валюта",Строка.ПорядковыйНомер),КэшируемыеПроцедурыУХ.ПолучитьПустоеЗначениеПоВидуАналитики(Строка.ВидАналитики));
			
		КонецЕсли;
	
	КонецЦикла;
	
	Запрос.Текст="
	|ВЫБРАТЬ ЗначенияПоказателейОтчетовСтар.Версия,
	|ЗначенияПоказателейОтчетовСтар.Показатель"+ТекстПоля+",
	|Сумма(ЗначенияПоказателейОтчетовСтар.Значение) КАК Значение
	|ИЗ РегистрСведений."+ИмяРегистраСтар+" КАК ЗначенияПоказателейОтчетовСтар
	|ГДЕ ЗначенияПоказателейОтчетовСтар"+ПолучитьТекстОтбораДляПереносаДанных(ЭлементСтруктуры)+"
	|СГРУППИРОВАТЬ ПО ЗначенияПоказателейОтчетовСтар.Версия,ЗначенияПоказателейОтчетовСтар.Показатель"+ТекстГруппировки;
	
	ЧислоЗаписей=0;
	
	Запрос.УстановитьПараметр("ЭлементСтруктуры",ЭлементСтруктуры);
	
	ТаблицаКПереносу=Запрос.Выполнить().Выгрузить();
	
	Если НЕ ТаблицаАналитикСтар.Найти(Ложь,"АналитикаВидаОтчета")=Неопределено Тогда
		
		ОчиститьЗаписиРегистраПоЭлементуСтруктуры(ИмяРегистраСтар,ЭлементСтруктуры,Отказ,Ложь);
		
	КонецЕсли;

	НаборЗаписей=РегистрыСведений[ИмяРегистраНов].СоздатьНаборЗаписей();
		
	Для Каждого Результат ИЗ ТаблицаКПереносу Цикл
		
		Если Результат.Значение=0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока=НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
		
		ЧислоЗаписей=ЧислоЗаписей+1;
		
		Если ЧислоЗаписей>20000 Тогда
			
			Попытка
				
				НаборЗаписей.Записать(Ложь);
				ЧислоЗаписей=0;
				НаборЗаписей=РегистрыСведений[ИмяРегистраНов].СоздатьНаборЗаписей();
				
			Исключение
				
				СтрокаШаблона = НСтр("ru = 'При переносе записей аналитических значений показателей
				|из регистра %1 в регистр %2 произошла ошибка:
				|%3'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ИмяРегистраСтар, ИмяРегистраНов, ОписаниеОшибки()), 
					Отказ,, СтатусСообщения.Важное);
				КонецЕсли;
				
				Отказ=Истина;	
				Возврат
				
			КонецПопытки;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		
		НаборЗаписей.Записать(Ложь);
		
	Исключение
		
		СтрокаШаблона = НСтр("ru = 'При переносе записей аналитических значений показателей
		|из регистра %1 в регистр %2 произошла ошибка:
		|%3'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ИмяРегистраСтар, ИмяРегистраНов, ОписаниеОшибки()), 
			Отказ,, СтатусСообщения.Важное);
		КонецЕсли;
		
		Отказ=Истина;	
		Возврат
		
	КонецПопытки;	
				
КонецПроцедуры // ПеренестиДанныеИзРегистраВРегистр()

Процедура УстановитьПометкуУдаленияЭкземплярОтчета(ВидОтчета,Отказ) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	НастраиваемыйОтчет.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|ГДЕ
	|	НастраиваемыйОтчет.ВидОтчета = &ВидОтчета
	|	И НЕ НастраиваемыйОтчет.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ДокументОбъект=Результат.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ОбрабатыватьПометкуУдаленияОписанияВерсий=Ложь;
	//	ДокументОбъект.ОбменДанными.Загрузка=Истина;
				
		Попытка
			
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
			
		Исключение
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),Отказ,,СтатусСообщения.Важное);
			
			Возврат;
			
		КонецПопытки;
		
	КонецЦикла;		
	
КонецПроцедуры // УстановитьПометкуУдаленияЭкземлярОтчета()

Процедура УстановитьПометкуУдаленияВерсии(ВидОтчета,Отказ) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ВерсииЗначенийПоказателей.Ссылка КАК Версия,
	|	ВерсииЗначенийПоказателей.Владелец КАК ОписаниеВерсии
	|ПОМЕСТИТЬ ВерсииКУдалению
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета
	|	И НЕ ВерсииЗначенийПоказателей.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВерсииКУдалению.ОписаниеВерсии КАК ОписаниеВерсии
	|ИЗ
	|	ВерсииКУдалению КАК ВерсииКУдалению
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВерсииКУдалению.Версия КАК Версия
	|ИЗ
	|	ВерсииКУдалению КАК ВерсииКУдалению";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	РезультатЗапроса=Запрос.ВыполнитьПакет();
	
	ЗапросОписания=РезультатЗапроса[1].Выбрать();
	
	Пока ЗапросОписания.Следующий() Цикл
		
		СправочникОбъект=ЗапросОписания.ОписаниеВерсии.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина,Ложь);
		
		Попытка
			
			СправочникОбъект.Записать();
			
		Исключение
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),Отказ,,СтатусСообщения.Важное);
			
			Возврат;
			
		КонецПопытки;
		
	КонецЦикла;	
	
	ЗапросВерсии=РезультатЗапроса[2].Выбрать();
	
	Пока ЗапросВерсии.Следующий() Цикл
		
		СправочникОбъект=ЗапросВерсии.Версия.ПолучитьОбъект();
		СправочникОбъект.ПометкаУдаления=Истина;
		СправочникОбъект.ОбменДанными.Загрузка=Истина;
		
		Попытка
			
			СправочникОбъект.Записать();
			
		Исключение
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),Отказ,,СтатусСообщения.Важное);
			
			Возврат;
			
		КонецПопытки;
		
	КонецЦикла;	
				
КонецПроцедуры // УстановитьПометкуУдаленияВерсии()

Функция ПолучитьИмяРегистра(ТаблицаАналитики)
	
	Если ТаблицаАналитики.Количество()=0 Тогда
		
		Возврат "ЗначенияПоказателейОтчетовСинтетика";
		
	КонецЕсли;
	
	Если ТаблицаАналитики.Количество()=1 И ТаблицаАналитики[0].ПорядковыйНомер=-1 Тогда
		
		Возврат "ЗначенияПоказателейОтчетовВалютные";
		
	КонецЕсли;
	
	Индекс=0;
	
	Для Каждого Строка ИЗ ТаблицаАналитики Цикл
		
		Если Строка.ПорядковыйНомер=-1 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если Строка.ПорядковыйНомер>Индекс Тогда
			
			Индекс=Строка.ПорядковыйНомер;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат "ЗначенияПоказателейОтчетов"+Индекс;
		
КонецФункции // ПолучитьИмяРегистра() 

Функция ПолучитьИмяРегистраСинтетика(ТаблицаАналитики)
	
	Если ТаблицаАналитики.Количество()=0
		ИЛИ (ТаблицаАналитики.Количество()=1 И ТаблицаАналитики[0].ПорядковыйНомер=-1) Тогда
		
		Возврат "ЗначенияПоказателейОтчетовСинтетика";
		
	КонецЕсли;
		
	Индекс=0;
	
	Для Каждого Строка ИЗ ТаблицаАналитики Цикл
		
		Если Строка.ПорядковыйНомер=-1 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если Строка.ПорядковыйНомер>Индекс Тогда
			
			Индекс=Строка.ПорядковыйНомер;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат "ЗначенияПоказателейОтчетов"+Индекс;
		
КонецФункции // ПолучитьИмяРегистра()

Процедура ВыполнитьПереносДанных(ЭлементСтруктуры,ТаблицаАналитикСтар,ТаблицаАналитикНов,Отказ) Экспорт
	
	ИмяРегистраСтар=ПолучитьИмяРегистра(ТаблицаАналитикСтар);
	ИмяРегистраНов=ПолучитьИмяРегистра(ТаблицаАналитикНов);
	
	ПеренестиДанныеИзРегистраВРегистр(ЭлементСтруктуры,ИмяРегистраСтар,ИмяРегистраНов,ТаблицаАналитикСтар,ТаблицаАналитикНов,Отказ);
	
	// Проверим и при необходимости перенесем нечисловые показатели
	
	Если ЕстьНечисловыеПоказателиЭлементСтруктуры(ЭлементСтруктуры) Тогда
		
		ПеренестиДанныеИзРегистраВРегистрНечисловые(ЭлементСтруктуры,ТаблицаАналитикСтар,ТаблицаАналитикНов,Отказ);
		
	КонецЕсли;		
	
КонецПроцедуры // ВыполнитьПереносДанных() 

Функция ЕстьНечисловыеПоказателиЭлементСтруктуры(ЭлементСтруктуры) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоказателиОтчетов.Ссылка
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	НЕ ПоказателиОтчетов.ЧисловойПоказатель
	| И ПоказателиОтчетов";
	
	Если ТипЗнч(ЭлементСтруктуры)=Тип("СправочникСсылка.ВидыОтчетов") Тогда
		
		ТекстОтбор=".Владелец=&ЭлементСтруктуры";
				
	ИначеЕсли ТипЗнч(ЭлементСтруктуры)=Тип("СправочникСсылка.ГруппыРаскрытия") Тогда
		
		ТекстОтбор=".ГруппаРаскрытия=&ЭлементСтруктуры";
				
	ИначеЕсли ТипЗнч(ЭлементСтруктуры)=Тип("СправочникСсылка.СтрокиОтчетов") Тогда
		
		ТекстОтбор=".Строка=&ЭлементСтруктуры";
				
	ИначеЕсли ТипЗнч(ЭлементСтруктуры)=Тип("СправочникСсылка.КолонкиОтчетов") Тогда
		
		ТекстОтбор=".Колонка=&ЭлементСтруктуры";
				
	Иначе
		
		ТекстОтбор=".Ссылка=&ЭлементСтруктуры";
				
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+ТекстОтбор;	
	
	Запрос.УстановитьПараметр("ЭлементСтруктуры",ЭлементСтруктуры);
	
	Результат=Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции // ЕстьНечисловыеПоказателиЭлементСтруктуры() 

Функция ПолучитьТекстОтбораДляПереносаДанных(ЭлементСтруктуры) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры)=Тип("СправочникСсылка.ВидыОтчетов") Тогда
		
		ТекстОтбор=".Версия В (ВЫБРАТЬ Ссылка ИЗ Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей ГДЕ ВерсииЗначенийПоказателей.ВидОтчета=&ЭлементСтруктуры)";
				
	ИначеЕсли ТипЗнч(ЭлементСтруктуры)=Тип("СправочникСсылка.ГруппыРаскрытия") Тогда
		
		ТекстОтбор=".Показатель В (Выбрать Ссылка ИЗ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов ГДЕ ПоказателиОтчетов.ГруппаРаскрытия=&ЭлементСтруктуры)";
				
	ИначеЕсли ТипЗнч(ЭлементСтруктуры)=Тип("СправочникСсылка.СтрокиОтчетов") Тогда
		
		ТекстОтбор=".Показатель В (Выбрать Ссылка ИЗ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов ГДЕ ПоказателиОтчетов.Строка=&ЭлементСтруктуры)";
				
	ИначеЕсли ТипЗнч(ЭлементСтруктуры)=Тип("СправочникСсылка.КолонкиОтчетов") Тогда
		
		ТекстОтбор=".Показатель В (Выбрать Ссылка ИЗ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов ГДЕ ПоказателиОтчетов.Колонка=&ЭлементСтруктуры)";
				
	Иначе
		
		ТекстОтбор=".Показатель=&ЭлементСтруктуры";
				
	КонецЕсли;

	Возврат ТекстОтбор;
	
КонецФункции // ПолучитьТекстОтбораДляПереносаДанных() 

Функция ПолучитьТекстОтбораПоказателя(ЭлементСтруктуры) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры)=Тип("СправочникСсылка.ВидыОтчетов") Тогда
		
		ТекстОтбор=" В (ВЫБРАТЬ Ссылка ИЗ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов ГДЕ ПоказателиОтчетов.Владелец=&ЭлементСтруктуры)";
				
	ИначеЕсли ТипЗнч(ЭлементСтруктуры)=Тип("СправочникСсылка.ГруппыРаскрытия") Тогда
		
		ТекстОтбор=" В (Выбрать Ссылка ИЗ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов ГДЕ ПоказателиОтчетов.ГруппаРаскрытия=&ЭлементСтруктуры)";
				
	ИначеЕсли ТипЗнч(ЭлементСтруктуры)=Тип("СправочникСсылка.СтрокиОтчетов") Тогда
		
		ТекстОтбор=" В (Выбрать Ссылка ИЗ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов ГДЕ ПоказателиОтчетов.Строка=&ЭлементСтруктуры)";
				
	ИначеЕсли ТипЗнч(ЭлементСтруктуры)=Тип("СправочникСсылка.КолонкиОтчетов") Тогда
		
		ТекстОтбор=" В (Выбрать Ссылка ИЗ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов ГДЕ ПоказателиОтчетов.Колонка=&ЭлементСтруктуры)";
				
	Иначе
		
		ТекстОтбор="=&ЭлементСтруктуры";
				
	КонецЕсли;

	Возврат ТекстОтбор;
	
КонецФункции // ПолучитьТекстОтбораПоказателя()

Процедура ПеренестиДанныеИзРегистраВРегистрНечисловые(ЭлементСтруктуры,ТаблицаАналитикСтар,ТаблицаАналитикНов,Отказ)
	
	ТаблицаАналитикНов.Сортировать("ПорядковыйНомерСтар Возр"); 
	
	Запрос=Новый Запрос;
	
	ТекстПоля="";
	ТекстГруппировки="";
		
	Для Каждого Строка ИЗ ТаблицаАналитикНов Цикл
		
		Если Строка.ПорядковыйНомерСтар=-1 Тогда
			
			ТекстПоля=ТекстПоля+",
			|ЗначенияПоказателейОтчетовСтар.АналитикаВалюта КАК Аналитика"+?(Строка.ПорядковыйНомер=-1,"Валюта",Строка.ПорядковыйНомер);
							
		ИначеЕсли ЗначениеЗаполнено(Строка.ПорядковыйНомерСтар) Тогда
			
			ТекстПоля=ТекстПоля+",
			|ЗначенияПоказателейОтчетовСтар.Аналитика"+Строка.ПорядковыйНомерСтар+" КАК Аналитика"+?(Строка.ПорядковыйНомер=-1,"Валюта",Строка.ПорядковыйНомер);
						
		Иначе
			
			ТекстПоля=ТекстПоля+",
			|&Аналитика"+?(Строка.ПорядковыйНомер=-1,"Валюта",Строка.ПорядковыйНомер)+" КАК Аналитика"+?(Строка.ПорядковыйНомер=-1,"Валюта",Строка.ПорядковыйНомер);
							
			Запрос.УстановитьПараметр("Аналитика"+?(Строка.ПорядковыйНомер=-1,"Валюта",Строка.ПорядковыйНомер),КэшируемыеПроцедурыУХ.ПолучитьПустоеЗначениеПоВидуАналитики(Строка.ВидАналитики));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст="
	|ВЫБРАТЬ ЗначенияПоказателейОтчетовСтар.Версия,
	|ЗначенияПоказателейОтчетовСтар.Показатель"+ТекстПоля+",
	|ЗначенияПоказателейОтчетовСтар.Значение КАК Значение
	|ИЗ РегистрСведений.ЗначенияПоказателейОтчетовНечисловые КАК ЗначенияПоказателейОтчетовСтар
	|ГДЕ ЗначенияПоказателейОтчетовСтар"+ПолучитьТекстОтбораДляПереносаДанных(ЭлементСтруктуры);
	
	Если НЕ ТаблицаАналитикСтар.Найти(Ложь,"АналитикаВидаОтчета")=Неопределено Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И НЕ ЗначенияПоказателейОтчетовСтар.ИтоговоеЗначение";
		
	КонецЕсли;
			
	Запрос.УстановитьПараметр("ЭлементСтруктуры",ЭлементСтруктуры);
							
	ЧислоЗаписей=0;
	
	ТаблицаКПереносу=Запрос.Выполнить().Выгрузить();
	
	Если НЕ ТаблицаАналитикСтар.Найти(Ложь,"АналитикаВидаОтчета")=Неопределено Тогда
		
		ОчиститьЗаписиРегистраПоЭлементуСтруктуры("ЗначенияПоказателейОтчетовНечисловые",ЭлементСтруктуры,Отказ,Ложь);
		
	КонецЕсли;
		
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НаборЗаписей=РегистрыСведений["ЗначенияПоказателейОтчетовНечисловые"].СоздатьНаборЗаписей();
		
	Для Каждого Результат ИЗ ТаблицаКПереносу Цикл
		
		Если Результат.Значение=0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока=НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
		
		ЧислоЗаписей=ЧислоЗаписей+1;
		
		Если ЧислоЗаписей>20000 Тогда
			
			Попытка
				
				НаборЗаписей.Записать(Ложь);
				ЧислоЗаписей=0;
				НаборЗаписей=РегистрыСведений["ЗначенияПоказателейОтчетовНечисловые"].СоздатьНаборЗаписей();
				
			Исключение
				
				СтрокаШаблона = НСтр("ru = 'При переносе записей аналитических значений показателей
				|в регистре ""ЗначенияПоказателейОтчетовНечисловые"" произошла ошибка:
				|%1'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ОписаниеОшибки()), 
					Отказ,, СтатусСообщения.Важное);
				КонецЕсли;
				
				Отказ=Истина;	
				Возврат
				
			КонецПопытки;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		
		НаборЗаписей.Записать(Ложь);
		
	Исключение
		
		СтрокаШаблона = НСтр("ru = 'При переносе записей синтетических значений показателей
		|в регистре ""ЗначенияПоказателейОтчетовНечисловые"" произошла ошибка:
		|%1'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ОписаниеОшибки()), 
			Отказ,, СтатусСообщения.Важное);
		КонецЕсли;
				
		Отказ=Истина;	
		Возврат
		
	КонецПопытки;	
				
КонецПроцедуры // ПеренестиДанныеИзРегистраВРегистр()

 

Процедура ОчиститьЗаписиРегистраПоЭлементуСтруктуры(ИмяРегистраСтар,ЭлементСтруктуры,Отказ,ИтоговоеЗначение=Неопределено) Экспорт
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияПоказателейОтчетов.Показатель
	|ИЗ
	|	РегистрСведений."+ИмяРегистраСтар+" КАК ЗначенияПоказателейОтчетов
	|ГДЕ
	|	ЗначенияПоказателейОтчетов"+ПолучитьТекстОтбораДляПереносаДанных(ЭлементСтруктуры);
	
	Запрос.УстановитьПараметр("ЭлементСтруктуры",ЭлементСтруктуры);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НаборЗаписей=РегистрыСведений[ИмяРегистраСтар].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Показатель.Установить(Результат.Показатель);
		
		Если НЕ (ИтоговоеЗначение=Неопределено ИЛИ ИмяРегистраСтар="ЗначенияПоказателейОтчетовСинтетика") Тогда
			
			НаборЗаписей.Прочитать();
			
			ТаблицаНабора = НаборЗаписей.Выгрузить();
			НаборЗаписей.Очистить();	
						
			МассивКЗаписи=ТаблицаНабора.НайтиСтроки(Новый Структура("ИтоговоеЗначение",НЕ ИтоговоеЗначение));
			
			Если МассивКЗаписи.Количество()>0 Тогда
				
				Для Каждого Строка ИЗ МассивКЗаписи Цикл
					
					НоваяСтрока=НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
					
				КонецЦикла;
				
			КонецЕсли;
								
		КонецЕсли;
			
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			
			СтрокаШаблона = НСтр("ru = '%1 %2: ошибка очистки записей в регистре %3:
			|%4'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(
					СтрШаблон(СтрокаШаблона, ЭлементСтруктуры.Метаданные().ПолноеИмя(), 
						ЭлементСтруктуры, ИмяРегистраСтар, ОписаниеОшибки()), 
					Отказ,, СтатусСообщения.Важное);
			КонецЕсли;
						
			Отказ=Истина;	
			Возврат
			
		КонецПопытки;
		
	КонецЦикла;	
		
КонецПроцедуры // ОчиститьЗаписиРегистраПоГруппеРаскрытия()

Процедура ОчиститьЗаписиРегистраПоВидуОтчета(ИмяРегистраСтар,ВидОтчета,Отказ,ИтоговоеЗначение=Неопределено) Экспорт
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияПоказателейОтчетов.Версия
	|ИЗ
	|	РегистрСведений."+ИмяРегистраСтар+" КАК ЗначенияПоказателейОтчетов
	|ГДЕ
	|	ЗначенияПоказателейОтчетов.Версия.ВидОтчета = &ВидОтчета";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НаборЗаписей=РегистрыСведений[ИмяРегистраСтар].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Версия.Установить(Результат.Версия);
		
		Если НЕ (ИтоговоеЗначение=Неопределено ИЛИ ИмяРегистраСтар="ЗначенияПоказателейОтчетовСинтетика") Тогда
			
			НаборЗаписей.Прочитать();
			
			ТаблицаНабора = НаборЗаписей.Выгрузить();
			НаборЗаписей.Очистить();	
						
			МассивКЗаписи=ТаблицаНабора.НайтиСтроки(Новый Структура("ИтоговоеЗначение",НЕ ИтоговоеЗначение));
			
			Если МассивКЗаписи.Количество()>0 Тогда
				
				Для Каждого Строка ИЗ МассивКЗаписи Цикл
					
					НоваяСтрока=НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			
			СтрокаШаблона = НСтр("ru = 'Вид отчета %1: ошибка очистки синтетических значений в регистре %2:
			|%3'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВидОтчета, ИмяРегистраСтар, ОписаниеОшибки()), 
				Отказ,, СтатусСообщения.Важное);
			КонецЕсли;
			
			Отказ=Истина;	
			Возврат
			
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры // ОчиститьЗаписиРегистраПогруппеРаскрытия()

Процедура РеструктурироватьДанныеЭлементСтруктуры(ПараметрыДействия,Отказ)
	
	ЭлементСтруктуры=ПараметрыДействия.ЭлементСтруктуры;
	
	Если НЕ ПараметрыДействия.ЕстьЗаписиВРегистрах Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СоздатьПротоколИзмененияОперандов(ЭлементСтруктуры,ПараметрыДействия.ТаблицаАналитикСтар,ПараметрыДействия.ТаблицаАналитикНов);
	
	Если ПараметрыДействия.ПереноситьЗаписи Тогда
		
		ВыполнитьПереносДанных(ЭлементСтруктуры,ПараметрыДействия.ТаблицаАналитикСтар,ПараметрыДействия.ТаблицаАналитикНов,Отказ);
				
		Возврат;
		
	КонецЕсли;
	
	ЕстьНечисловыеПоказатели=ЕстьНечисловыеПоказателиЭлементСтруктуры(ЭлементСтруктуры);
	
	Если ПараметрыДействия.ОчищатьАналитическиеЗначения И ПараметрыДействия.ОчищатьСинтетическиеЗначения Тогда
		
		ОчиститьЗаписиРегистраПоЭлементуСтруктуры(ПолучитьИмяРегистра(ПараметрыДействия.ТаблицаАналитикСтар),ЭлементСтруктуры,Отказ);
		ОчиститьЗаписиРегистраПоЭлементуСтруктуры(УправлениеОтчетамиУХ.ВернутьИмяТаблицыСинтетики(ЭлементСтруктуры),ЭлементСтруктуры,Отказ);
		
		Если ЕстьНечисловыеПоказатели Тогда
			
			ОчиститьЗаписиРегистраПоЭлементуСтруктуры("ЗначенияПоказателейОтчетовНечисловые",ЭлементСтруктуры,Отказ);
			
		КонецЕсли;
			
	ИначеЕсли ПараметрыДействия.ОчищатьАналитическиеЗначения Тогда
		
		ОчиститьЗаписиРегистраПоЭлементуСтруктуры(ПолучитьИмяРегистра(ПараметрыДействия.ТаблицаАналитикСтар),ЭлементСтруктуры,Отказ,Ложь);
		
		Если ЕстьНечисловыеПоказатели Тогда
			
			ОчиститьЗаписиРегистраПоЭлементуСтруктуры("ЗначенияПоказателейОтчетовНечисловые",ЭлементСтруктуры,Отказ,Ложь);
			
		КонецЕсли;
					
	ИначеЕсли ПараметрыДействия.ОчищатьСинтетическиеЗначения Тогда
		
		ОчиститьЗаписиРегистраПоЭлементуСтруктуры(УправлениеОтчетамиУХ.ВернутьИмяТаблицыСинтетики(ЭлементСтруктуры),ЭлементСтруктуры,Отказ,Истина);
		
		Если ЕстьНечисловыеПоказатели Тогда
			
			ОчиститьЗаписиРегистраПоЭлементуСтруктуры("ЗначенияПоказателейОтчетовНечисловые",ЭлементСтруктуры,Отказ,Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // РеструктурироватьДанныеЭлементСтруктуры()

Процедура СоздатьПротоколИзмененияОперандов(ЭлементСтруктуры,ТаблицаАналитикСтар,ТаблицаАналитикНов) Экспорт
	
	ПротоколОбъект=Неопределено;
	
	// Источники данных с измененной структурой исходных данных
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ИсточникиДанныхДляРасчетов.Ссылка КАК Ссылка,
	             |	ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК ПоказательОтчета
	             |ИЗ
	             |	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	             |ГДЕ
	             |	НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления
				 |	И ИсточникиДанныхДляРасчетов.ПоказательОтбор"+ПолучитьТекстОтбораПоказателя(ЭлементСтруктуры);
	
	Запрос.УстановитьПараметр("ЭлементСтруктуры",ЭлементСтруктуры);
	
	Результат=Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ПротоколОбъект=Справочники.ПротоколируемыеСобытия.СоздатьЭлемент();
		ПротоколОбъект.Автор=Пользователи.ТекущийПользователь();
		ПротоколОбъект.Дата=ТекущаяУниверсальнаяДата();
		ПротоколОбъект.Описание = Нстр("ru = 'Реструктуризация данных'");
		ПротоколОбъект.Объект=ЭлементСтруктуры;
		ПротоколОбъект.Реструктуризация=Истина;
		
		ПротоколОбъект.ДанныеРеструктуризации=Новый ХранилищеЗначения(Новый Структура("ТаблицаАналитикСтар,ТаблицаАналитикНов",ТаблицаАналитикСтар,ТаблицаАналитикНов));
		
		Выборка=Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока=ПротоколОбъект.Записи.Добавить();
			НоваяСтрока.Дата=ПротоколОбъект.Дата;
			НоваяСтрока.ОбъектДанных=Выборка.Ссылка;
			НоваяСтрока.ПоказательОтчета=Выборка.ПоказательОтчета;
			НоваяСтрока.Сообщение = НСтр("ru = 'Изменена аналитика исходных данных.'");
			НоваяСтрока.Пользователь=ПротоколОбъект.Автор;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Источники данных с измененной структурой данных приемника	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ИсточникиДанныхДляРасчетов.Ссылка КАК Ссылка,
	             |	ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК ПоказательОтчета
	             |ИЗ
	             |	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	             |ГДЕ
	             |	НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления
				 |	И ИсточникиДанныхДляРасчетов.ПотребительРасчета"+ПолучитьТекстОтбораПоказателя(ЭлементСтруктуры);
		
	Запрос.УстановитьПараметр("ЭлементСтруктуры",ЭлементСтруктуры);
	
	Результат=Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Если ПротоколОбъект=Неопределено Тогда
			
			ПротоколОбъект=Справочники.ПротоколируемыеСобытия.СоздатьЭлемент();
			ПротоколОбъект.Автор=Пользователи.ТекущийПользователь();
			ПротоколОбъект.Дата=ТекущаяУниверсальнаяДата();
			ПротоколОбъект.Описание = Нстр("ru = 'Реструктуризация данных'");
			ПротоколОбъект.Объект=ЭлементСтруктуры;
			ПротоколОбъект.Реструктуризация=Истина;
			
			ПротоколОбъект.ДанныеРеструктуризации=Новый ХранилищеЗначения(Новый Структура("ТаблицаАналитикСтар,ТаблицаАналитикНов",ТаблицаАналитикСтар,ТаблицаАналитикНов));
			
		КонецЕсли;
		
		Выборка=Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока=ПротоколОбъект.Записи.Добавить();
			НоваяСтрока.Дата=ПротоколОбъект.Дата;
			НоваяСтрока.ОбъектДанных=Выборка.Ссылка;
			НоваяСтрока.ПоказательОтчета=Выборка.ПоказательОтчета;
			НоваяСтрока.Сообщение = НСтр("ru = 'Изменена аналитика приемника данных.'");
			НоваяСтрока.Пользователь=ПротоколОбъект.Автор;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ПротоколОбъект=Неопределено Тогда
		
		ПротоколОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСоздатьПротоколИзмененияОперандов()


#КонецОбласти // Аналитика


//////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ВИДАМИ ОТЧЕТА ТИПА "ОБОРОТНО - САЛЬДОВАЯ ВЕДОМОСТЬ

Функция ПолучитьГруппуРаскрытияДляСчета(ВидОтчета,СчетБД,КоррСчетБД=Неопределено,Знач ВидИтога=Неопределено,СтрокаСчет=Неопределено) Экспорт
	
	Перем РабочаяТаблицаАналитикСчет;
	Перем РабочаяТаблицаАналитикКоррСчет;
	
	КоличествоАналитик		=СчетБД.ВидыСубконто.Количество();
	ВалютныйДт				= СчетБД.Валютный;
	ИспользоватьВидыДвижений=(СчетБД.ИспользоватьВидыДвижений И (НЕ ТипЗнч(ВидОтчета)=Тип("СправочникСсылка.ШаблоныТрансформационныхКорректировок")));
	
	Если ИспользоватьВидыДвижений И ВидИтога=Неопределено Тогда
		
		Возврат Справочники.ГруппыРаскрытия.ПустаяСсылка();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КоррСчетБД) Тогда
		
		КоличествоАналитик=КоличествоАналитик+КоррСчетБД.ВидыСубконто.Количество();
		ВалютныйКт			= КоррСчетБД.Валютный;

	Иначе
		
		ВалютныйКт=Ложь;
		
	КонецЕсли;
	
	Если КоличествоАналитик=0 И НЕ (ВалютныйДт ИЛИ ВалютныйКт ИЛИ ИспользоватьВидыДвижений) Тогда
		
		Возврат Справочники.ГруппыРаскрытия.ПустаяСсылка();
		
	КонецЕсли;
	
	ПрименениеСальдо	= Ложь;
	ПрименениеОбороты	= Ложь;
	ТекстИтога			= "";
			
	ТаблицыАналитикиСчет=ПолучитьТаблицыАналитикДляСчета(СчетБД);
	РабочаяТаблицаАналитикКоррСчет=Новый ТаблицаЗначений;
	
	Если ЗначениеЗаполнено(КоррСчетБД) Тогда
		
		ТаблицыАналитикиКоррСчет=ПолучитьТаблицыАналитикДляСчета(КоррСчетБД);
		ВидИтога			= Перечисления.ВидыБухгалтерскихИтогов.ДО;
		ПрименениеСальдо	= Ложь;
		ПрименениеОбороты	= Истина;
		
		Для Каждого СтрПоле ИЗ ТаблицыАналитикиСчет.ТаблицаОбороты Цикл
			
			Если ТаблицыАналитикиСчет.ТаблицаСальдо.Найти(СтрПоле.ВидСубконто,"ВидСубконто")=Неопределено Тогда
				
				НоваяСтрока=ТаблицыАналитикиСчет.ТаблицаСальдо.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрПоле);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрПоле ИЗ ТаблицыАналитикиКоррСчет.ТаблицаОбороты Цикл
			
			Если ТаблицыАналитикиКоррСчет.ТаблицаСальдо.Найти(СтрПоле.ВидСубконто,"ВидСубконто")=Неопределено Тогда
				
				НоваяСтрока=ТаблицыАналитикиКоррСчет.ТаблицаСальдо.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрПоле);
				
			КонецЕсли;
			
		КонецЦикла;
		
		РабочаяТаблицаАналитикСчет=ТаблицыАналитикиСчет.ТаблицаСальдо;
		РабочаяТаблицаАналитикКоррСчет=ТаблицыАналитикиКоррСчет.ТаблицаСальдо;
			
	ИначеЕсли ТаблицыАналитикиСчет.ПрименениеПоИтогу Тогда 
		
		Если ВидИтога=Неопределено Тогда
			
			Возврат Справочники.ГруппыРаскрытия.ПустаяСсылка();
			
		ИначеЕсли УправлениеОтчетамиУХ.ИтогЯвляетсяСальдо(ВидИтога) Тогда
			
			РабочаяТаблицаАналитикСчет=ТаблицыАналитикиСчет.ТаблицаСальдо;
			
			ПрименениеСальдо	= Истина;
			ПрименениеОбороты	= Ложь;
			
			ТекстИтога			= НСтр("ru = ' (сальдо)'");
			
			ИспользоватьВидыДвижений=Ложь;
			
		Иначе
			
			РабочаяТаблицаАналитикСчет=ТаблицыАналитикиСчет.ТаблицаОбороты;
			
			ПрименениеСальдо	= Ложь;
			ПрименениеОбороты	= Истина;
			
			ТекстИтога			= НСтр("ru = ' (обороты)'");
			
		КонецЕсли;
		
	Иначе
		
		РабочаяТаблицаАналитикСчет=ТаблицыАналитикиСчет.ТаблицаСальдо;
		
		Если ИспользоватьВидыДвижений Тогда
			
			Если УправлениеОтчетамиУХ.ИтогЯвляетсяСальдо(ВидИтога) Тогда
				
				ПрименениеСальдо	= Истина;
				ПрименениеОбороты	= Ложь;
				
				ТекстИтога			= НСтр("ru = ' (сальдо)'");
				
			Иначе
				
				ПрименениеСальдо	= Ложь;
				ПрименениеОбороты	= Истина;
				
				ТекстИтога			= НСтр("ru = ' (обороты)'");
				
			КонецЕсли;
				
		Иначе
			
			ПрименениеСальдо	= Истина;
			ПрименениеОбороты	= Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РабочаяТаблицаАналитикСчет.Количество()=0 
		И РабочаяТаблицаАналитикКоррСчет.Количество()=0
		И НЕ (ВалютныйДт ИЛИ ВалютныйКт ИЛИ ИспользоватьВидыДвижений) Тогда
		
		Возврат Справочники.ГруппыРаскрытия.ПустаяСсылка();

	КонецЕсли;	
				
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ГруппыРаскрытия.Ссылка
	|ИЗ
	|	Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
	|ГДЕ
	|	ГруппыРаскрытия.Владелец 	= &Владелец
	|	И ГруппыРаскрытия.СчетБД 	= &СчетБД
	|	И НЕ ГруппыРаскрытия.ПометкаУдаления
	|	И ГруппыРаскрытия.Сальдо 	= &Сальдо
	|	И ГруппыРаскрытия.Обороты 	= &Обороты";
	
	Если ВалютныйДт Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ГруппыРаскрытия.ВидАналитикиВалютаДт = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты)";
			
	КонецЕсли;
	
	Если Не КоррСчетБД=Неопределено Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ГруппыРаскрытия.КоррСчетБД = &КоррСчетБД";
		
		Запрос.УстановитьПараметр("КоррСчетБД",КоррСчетБД);
		
		Если ВалютныйКт Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|И ГруппыРаскрытия.ВидАналитикиВалютаКт = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты)";
			
		КонецЕсли;	
		
	КонецЕсли;
				
	Запрос.УстановитьПараметр("Владелец",ВидОтчета);
	Запрос.УстановитьПараметр("Сальдо",	ПрименениеСальдо);
	Запрос.УстановитьПараметр("Обороты",ПрименениеОбороты);
	Запрос.УстановитьПараметр("СчетБД",	СчетБД);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		ОбъектГруппа=Результат.Ссылка.ПолучитьОбъект();
		
	Иначе
		
		ОбъектГруппа=Справочники.ГруппыРаскрытия.СоздатьЭлемент();
		
		Если КоррСчетБД=Неопределено Тогда
			
			ОбъектГруппа.Код=ОбщегоНазначенияУХ.ПолучитьВозможныйКодСправочника("ГР_"+СтрЗаменить(СокрЛП(СчетБД.Код),".","_"),0,"ГруппыРаскрытия",ВидОтчета);	
			
			СтрокаШаблона = Нстр("ru = 'Аналитическое раскрытие счета %1 %2'");
			
			ОбъектГруппа.Наименование = СокрЛП(СчетБД.Код) + ТекстИтога;
			Если Не ПустаяСтрока(СтрокаШаблона) тогда								
				ОбъектГруппа.Наименование = СтрШаблон(СтрокаШаблона, СокрЛП(СчетБД.Код), ТекстИтога);
			КонецЕсли;
						
			ОбъектГруппа.СчетБД=СчетБД;
			
			Если СчетБД.Валютный Тогда
				
				ОбъектГруппа.Валютная=Истина;
				ОбъектГруппа.ВидАналитикиВалютаДт=ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты;
				
			КонецЕсли;
				
		Иначе
			
			ОбъектГруппа.Код=ОбщегоНазначенияУХ.ПолучитьВозможныйКодСправочника("ГР_Дт"+СтрЗаменить(СокрЛП(СчетБД.Код),".","_")+"_Кт"+СтрЗаменить(СокрЛП(КоррСчетБД.Код),".","_"),0,"ГруппыРаскрытия",ВидОтчета);	
			
			СтрокаШаблона = Нстр("ru = 'Аналитика проводки Дт: %1 - Кт: %2'");
			
			ОбъектГруппа.Наименование = СокрЛП(СчетБД.Код) + " " + СокрЛП(КоррСчетБД.Код);
			Если Не ПустаяСтрока(СтрокаШаблона) тогда								
				ОбъектГруппа.Наименование = СтрШаблон(СтрокаШаблона, СокрЛП(СчетБД.Код), СокрЛП(КоррСчетБД.Код));
			КонецЕсли;
			
			ОбъектГруппа.СчетБД=СчетБД;
			ОбъектГруппа.КоррСчетБД=КоррСчетБД;
			
			Если СчетБД.Валютный Тогда
				
				ОбъектГруппа.Валютная=Истина;
				ОбъектГруппа.ВидАналитикиВалютаДт=ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты;
				
			КонецЕсли;
			
			Если КоррСчетБД.Валютный Тогда
				
				ОбъектГруппа.Валютная=Истина;
				ОбъектГруппа.ВидАналитикиВалютаКт=ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты;
				
			КонецЕсли;
	
		КонецЕсли;
			
		ОбъектГруппа.Сальдо						= ПрименениеСальдо;
		ОбъектГруппа.Обороты					= ПрименениеОбороты;
		ОбъектГруппа.Владелец					= ВидОтчета;
		
	КонецЕсли;
	
	ОбъектГруппа.ИспользоватьВидыДвижений		= ИспользоватьВидыДвижений;
	ОбъектГруппа.РабочаяТаблицаАналитикСчет		= РабочаяТаблицаАналитикСчет;
	ОбъектГруппа.РабочаяТаблицаАналитикКоррСчет = РабочаяТаблицаАналитикКоррСчет;
	ОбъектГруппа.Предназначение=?(ЗначениеЗаполнено(КоррСчетБД),Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ТрансформационныеКорректировки,Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость);
	
	ОбъектГруппа.ЗаполнитьАналитикиПоСубконто(СтрокаСчет);
	
	Если ОбъектГруппа.ПроверитьПередЗаписью() Тогда
		
		Попытка
			ОбъектГруппа.Записать();
			Возврат ОбъектГруппа.Ссылка;
		Исключение
			
			СтрокаШаблона = НСтр("ru = 'Не удалось получить группу раскрытия: %1'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),,, СтатусСообщения.Внимание);
			КонецЕсли;
			
			Возврат Справочники.ГруппыРаскрытия.ПустаяСсылка();
		КонецПопытки;
		
	Иначе
		
		Возврат Справочники.ГруппыРаскрытия.ПустаяСсылка();
		
	КонецЕсли;
			
КонецФункции // ПолучитьГруппуРаскрытияДляСчета() 

Функция ПолучитьГруппуРаскрытияДляСтатьи(ВидОтчета,Статья,РазделениеПоПроектам=Ложь) Экспорт
	
	Если НЕ ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом()
		ИЛИ НЕ ЗначениеЗаполнено(Статья) Тогда
		Возврат Справочники.ГруппыРаскрытия.ПустаяСсылка();
	КонецЕсли;
	
	КоличествоАналитикСтатьи = ОбщегоНазначения.ВызватьФункциюКонфигурации(
		"АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи");
	
	// Виды аналитик статьи
	ВидыАналитик = ОбщегоНазначения.ВызватьФункциюКонфигурации(
		"АналитикиСтатейБюджетовУХ.ВидыАналитикОбъекта", 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Статья));
	
	ЗаполненоАналитикСтатьи = 0;
	ВидыАналитикСтрокой = Новый Массив;
	Для Сч = 1 По КоличествоАналитикСтатьи Цикл
		ВидАналитики = ВидыАналитик["ВидАналитики"+Сч];
		Если ЗначениеЗаполнено(ВидАналитики) Тогда
			ЗаполненоАналитикСтатьи = Сч;
			ВидыАналитикСтрокой.Добавить(Строка(ВидАналитики))
		КонецЕсли;
	КонецЦикла;
	
	Валютная = ОбщегоНазначения.ВызватьФункциюКонфигурации(
		"СтатьиБюджетовУХПовтИсп.СтатьяБюджетаПризнакВалютнаяПоУмолчанию",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Статья));
	
	СтруктураПараметров = Новый Структура("Валютная", Валютная);
	
	СдвигАналитик=?(ЗначениеЗаполнено(ВидОтчета.ВидАналитики1),1,0);
	Корпоративные = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные;
	ВидСубконтоПроекты = Корпоративные.Проекты;
		
	Если РазделениеПоПроектам Тогда
		Если ЗаполненоАналитикСтатьи = ПараметрыСеанса.ЧислоДопАналитик Тогда
			Если ВидыАналитик.ВидАналитики1 = ВидСубконтоПроекты Тогда
				// флаг не изменяем, аналитику не добавляем, сдвиг не изменяем
			Иначе
				// флаг очищаем, аналитику не добавляем, сдвиг не изменяем
				РазделениеПоПроектам = Ложь;
			КонецЕсли;
		Иначе
			// Флаг не изменяем, аналитику добавляем, сдвиг увеличиваем
			СдвигАналитик=СдвигАналитик+1;
			СтруктураПараметров.Вставить("ВидАналитики" + СдвигАналитик, ВидСубконтоПроекты);
			СтруктураПараметров.Вставить("Аналитика" + СдвигАналитик + "Обязательна", Истина);
			СтруктураПараметров.Вставить("АналитикаЭтапПроекта", СдвигАналитик);
		КонецЕсли;
	Иначе
		Если ЗаполненоАналитикСтатьи = 0 И НЕ Валютная Тогда
			Возврат Справочники.ГруппыРаскрытия.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
		
	Для Индекс = 1 По КоличествоАналитикСтатьи Цикл
		Если ЗначениеЗаполнено(ВидыАналитик["ВидАналитики"+Индекс]) Тогда
			СтруктураПараметров.Вставить("ВидАналитики"+(Индекс+СдвигАналитик),ВидыАналитик["ВидАналитики"+Индекс]);
			СтруктураПараметров.Вставить("Аналитика"+(Индекс+СдвигАналитик)+"Обязательна",Истина);
		КонецЕсли;
	КонецЦикла;
		
	Если Валютная Тогда
		СтруктураПараметров.Вставить("ВидАналитикиВалютаДт", Корпоративные.СправочникВалюты);
		ВидыАналитикСтрокой.Добавить(НСтр("ru = 'По валютам'"));
	Иначе
		СтруктураПараметров.Вставить("ВидАналитикиВалютаДт", Корпоративные.ПустаяСсылка());
	КонецЕсли;
		
	СтруктураПараметров.Вставить("ГруппаРаскрытияСтатья", Статья);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГруппыРаскрытия.Ссылка КАК Ссылка,
	|	ГруппыРаскрытия.ВидАналитики1 КАК ВидАналитики1,
	|	ГруппыРаскрытия.ВидАналитики2 КАК ВидАналитики2,
	|	ГруппыРаскрытия.ВидАналитики3 КАК ВидАналитики3,
	|	ГруппыРаскрытия.ВидАналитики4 КАК ВидАналитики4,
	|	ГруппыРаскрытия.ВидАналитики5 КАК ВидАналитики5,
	|	ГруппыРаскрытия.ВидАналитики6 КАК ВидАналитики6,
	|	ГруппыРаскрытия.Аналитика1Обязательна КАК Аналитика1Обязательна,
	|	ГруппыРаскрытия.Аналитика2Обязательна КАК Аналитика2Обязательна,
	|	ГруппыРаскрытия.Аналитика3Обязательна КАК Аналитика3Обязательна,
	|	ГруппыРаскрытия.Аналитика4Обязательна КАК Аналитика4Обязательна,
	|	ГруппыРаскрытия.Аналитика5Обязательна КАК Аналитика5Обязательна,
	|	ГруппыРаскрытия.Аналитика6Обязательна КАК Аналитика6Обязательна
	|ИЗ
	|	Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
	|ГДЕ
	|	ГруппыРаскрытия.Владелец = &Владелец
	|	И НЕ ГруппыРаскрытия.ПометкаУдаления
	|	И ГруппыРаскрытия.РазделениеПоПроектам = &РазделениеПоПроектам
	|	И ГруппыРаскрытия.ГруппаРаскрытияСтатья = &ГруппаРаскрытияСтатья";
	
	Для Каждого КлючИЗначение ИЗ СтруктураПараметров Цикл
		Запрос.Текст=Запрос.Текст+"
		|И ГруппыРаскрытия."+КлючИЗначение.Ключ+"=&"+КлючИЗначение.Ключ;
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ,КлючИЗначение.Значение);
	КонецЦикла;
			
	Запрос.УстановитьПараметр("Владелец",				ВидОтчета);
	Запрос.УстановитьПараметр("РазделениеПоПроектам",	РазделениеПоПроектам);
	Результат=Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	Иначе
		СправочникОбъект=Справочники.ГруппыРаскрытия.СоздатьЭлемент();
		
		СправочникОбъект.Владелец=ВидОтчета;
		СправочникОбъект.Наименование = СтрСоединить(ВидыАналитикСтрокой, ",");
		
		ПроектКода=ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(СправочникОбъект.Наименование,,"ВидыОтчетов");
		
		СправочникОбъект.Код=ОбщегоНазначенияУХ.ПолучитьВозможныйКодСправочника(ПроектКода,СправочникОбъект.Метаданные().ДлинаКода,"ГруппыРаскрытия",ВидОтчета);
		
		ЗаполнитьЗначенияСвойств(СправочникОбъект,СтруктураПараметров);
		СправочникОбъект.РазделениеПоПроектам=РазделениеПоПроектам;
		
		Попытка
			СправочникОбъект.Записать();
			Возврат СправочникОбъект.Ссылка;
		Исключение
			
			СтрокаШаблона = НСтр("ru = 'Не удалось создать группу раскрытия для статьи %1: %2'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Статья, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),,, СтатусСообщения.Внимание);
			КонецЕсли;
			
			Возврат Справочники.ГруппыРаскрытия.ПустаяСсылка();
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции // ПолучитьГруппуРаскрытияДляСтатьи() 

Функция ПолучитьГруппуРаскрытияРесурс(ВидОтчета) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГруппыРаскрытия.Ссылка
	|ИЗ
	|	Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
	|ГДЕ
	|	ГруппыРаскрытия.Владелец = &ВидОтчета
	|	И ГруппыРаскрытия.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов)";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда 
		
		Возврат Результат.Ссылка;
		
	Иначе
		
		ГруппаОбъект=Справочники.ГруппыРаскрытия.СоздатьЭлемент();
		
		ГруппаОбъект.Наименование	= "Ресурсы";
		ГруппаОбъект.Код			= ОбщегоНазначенияУХ.ПолучитьВозможныйКодСправочника("Ресурсы",ГруппаОбъект.Метаданные().ДлинаКода,"ГруппыРаскрытия",ВидОтчета);
		ГруппаОбъект.Владелец		= ВидОтчета;
		ГруппаОбъект.Предназначение	= Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов;
		ГруппаОбъект.ВидАналитики1	= ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Ресурсы;
		ГруппаОбъект.Аналитика1Обязательна = Истина;
		
		ГруппаОбъект.Записать();
		
		Возврат ГруппаОбъект.Ссылка;
		
	КонецЕсли;
			
КонецФункции // ПолучитьГруппуРаскрытияРесурс() 

Процедура ИзменитьПредназначениеЭлементовСтруктуры(ВидОтчета,НовоеПредназначение) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СтрокиОтчетов.Ссылка
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &ВидОтчета
	|	И СтрокиОтчетов.Предназначение <> &Предназначение";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	Запрос.УстановитьПараметр("Предназначение",НовоеПредназначение);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СтрокаОбъект=Результат.Ссылка.ПолучитьОбъект();
		СтрокаОбъект.Предназначение=НовоеПредназначение;
		
		Попытка
			
			СтрокаОбъект.Записать();
			
		Исключение
			
			СтрокаШаблона = НСтр("ru = 'Не удалось обновить предназначение строки %1: %2'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, СтрокаОбъект.Наименование, ОписаниеОшибки()),,, СтатусСообщения.Внимание);
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &ВидОтчета
	|	И ПоказателиОтчетов.Строка = ЗНАЧЕНИЕ(Справочник.СтрокиОтчетов.ПустаяСсылка)
	|	И ПоказателиОтчетов.Предназначение <> &Предназначение";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ПоказательОбъект=Результат.Ссылка.ПолучитьОбъект();
		ПоказательОбъект.Предназначение=НовоеПредназначение;
		
		Попытка
			
			ПоказательОбъект.Записать();
			
		Исключение
			
			СтрокаШаблона = НСтр("ru = 'Не удалось обновить предназначение показателя %1: %2'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, СтрокаОбъект.Наименование, ОписаниеОшибки()),,, СтатусСообщения.Внимание);
			КонецЕсли;
					
		КонецПопытки;
		
	КонецЦикла;
		
КонецПроцедуры // ИзменитьПредназначениеЭлементовСтруктуры()
 
Функция ПолучитьСписокИспользуемыхИтогов(ВидОтчета,СчетБД=Неопределено) Экспорт
	
	СписокИтогов=Новый СписокЗначений;
	
	Если ВидОтчета.СокращеннаяОСВ Тогда
		
		СписокИтогов.Добавить(Перечисления.ВидыБухгалтерскихИтогов.СКД);
		СписокИтогов.Добавить(Перечисления.ВидыБухгалтерскихИтогов.СКК);
		СписокИтогов.Добавить(Перечисления.ВидыБухгалтерскихИтогов.ДО);
		СписокИтогов.Добавить(Перечисления.ВидыБухгалтерскихИтогов.КО);
		
	Иначе
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ИспользуемыеВидыИтоговПоСчетам.ВидИтогаПоСчету
		|ИЗ
		|	Справочник.ВидыОтчетов.ИспользуемыеВидыИтоговПоСчетам КАК ИспользуемыеВидыИтоговПоСчетам
		|ГДЕ
		|	ИспользуемыеВидыИтоговПоСчетам.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",ВидОтчета);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			Если СчетБД=Неопределено
				ИЛИ Результат.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.ДО
				ИЛИ Результат.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.КО Тогда
				
				СписокИтогов.Добавить(Результат.ВидИтогаПоСчету);
				
			ИначеЕсли НЕ ((СчетБД.Вид=Перечисления.ВидыСчетовБД.Активный  И 
				(Результат.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СНК
				ИЛИ Результат.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СКК))
				ИЛИ (СчетБД.Вид=Перечисления.ВидыСчетовБД.Пассивный И 
				(Результат.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СНД
				ИЛИ Результат.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СКД))) 
				Тогда
				
				СписокИтогов.Добавить(Результат.ВидИтогаПоСчету);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Возврат СписокИтогов;	
	
КонецФункции // ПолучитьСписокИспользуемыхИтогов()

Процедура ПроверитьПоказательОстатковОборотов(ВидОтчета,СчетБД,ВидИтогаПоСчету,Предназначение,Ссылка,ТекстОшибки="",Отказ=Ложь) Экспорт
		
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.СчетБД.Владелец.Наименование КАК ПланСчетов,
	|	ПоказателиОтчетов.СчетБД.Код КАК КодСчета,
	|	ПоказателиОтчетов.Наименование КАК ПоказательОтчета,
	|	ПоказателиОтчетов.Владелец.Наименование КАК ВидОтчета
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.СчетБД = &СчетБД
	|	И ПоказателиОтчетов.ВидИтогаПоСчету = &ВидИтогаПоСчету
	|	И НЕ ПоказателиОтчетов.Ссылка = &Ссылка
	|	И ПоказателиОтчетов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость)
	|	И ПоказателиОтчетов.Владелец.ИспользоватьПоУмолчанию = &ИспользоватьПоУмолчанию";
	
	Запрос.УстановитьПараметр("СчетБД",			СчетБД);
	Запрос.УстановитьПараметр("ВидИтогаПоСчету",ВидИтогаПоСчету);
	Запрос.УстановитьПараметр("Ссылка",			Ссылка);
	Запрос.УстановитьПараметр("ИспользоватьПоУмолчанию",Ссылка.Владелец.ИспользоватьПоУмолчанию);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		СтрокаШаблона = НСтр("ru = 'Для вида остатка/оборота %1 по счету %2 плана счетов %3
		|уже существует показатель %4 вида отчета %5.'");
		
		СодержаниеОшибки = "";
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			СодержаниеОшибки = СтрШаблон(СтрокаШаблона, ВидИтогаПоСчету, Результат.КодСчета, Результат.ПланСчетов, Результат.ПоказательОтчета, Результат.ВидОтчета);
		КонецЕсли;
		
		ТекстОшибки = ТекстОшибки + СодержаниеОшибки;
		
		Отказ=Истина;
		
	КонецЕсли;
		
КонецПроцедуры // ПроверитьПоказательОстатковОборотов() 

Функция ИзменитьСоставКолонок(ВидОтчета,ЕстьИзменениеКолонок) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ВидыОтчетовИспользуемыеВидыИтоговПоСчетам.ВидИтогаПоСчету
	|ПОМЕСТИТЬ ВидыИтогов
	|ИЗ
	|	Справочник.ВидыОтчетов.ИспользуемыеВидыИтоговПоСчетам КАК ВидыОтчетовИспользуемыеВидыИтоговПоСчетам
	|ГДЕ
	|	ВидыОтчетовИспользуемыеВидыИтоговПоСчетам.Ссылка = &ВидОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КолонкиОтчетов.Ссылка,
	|	КолонкиОтчетов.ПометкаУдаления,
	|	КолонкиОтчетов.ВидИтогаПоСчету
	|ПОМЕСТИТЬ КолонкиОтчета
	|ИЗ
	|	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|ГДЕ
	|	КолонкиОтчетов.Владелец = &ВидОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КолонкиОтчета.Ссылка, НЕОПРЕДЕЛЕНО) КАК КолонкаОтчета,
	|	КолонкиОтчета.ПометкаУдаления,
	|	ЕСТЬNULL(ВидыИтогов.ВидИтогаПоСчету, НЕОПРЕДЕЛЕНО) КАК ВидИтогаПоСчету
	|ИЗ
	|	ВидыИтогов КАК ВидыИтогов
	|		ПОЛНОЕ СОЕДИНЕНИЕ КолонкиОтчета КАК КолонкиОтчета
	|		ПО ВидыИтогов.ВидИтогаПоСчету = КолонкиОтчета.ВидИтогаПоСчету";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Результат.КолонкаОтчета) И ЗначениеЗаполнено(Результат.ВидИтогаПоСчету) Тогда
			
			Если Результат.ПометкаУдаления Тогда
				
				КолонкаОбъект=Результат.КолонкаОтчета.ПолучитьОбъект();
				КолонкаОбъект.ПометкаУдаления=Ложь;
				
				Попытка
					
					КолонкаОбъект.Записать();
					ЕстьИзменениеКолонок=Истина;
					
				Исключение
					
					СтрокаШаблона = НСтр("ru = 'Не удалось снять пометку удаления с колонки %1: %2'");
					
					Если Не ПустаяСтрока(СтрокаШаблона) тогда
						ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, КолонкаОбъект.Наименование, ОписаниеОшибки()),,, СтатусСообщения.Важное);
					КонецЕсли;
					
					Возврат Ложь;
					
				КонецПопытки;
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Результат.КолонкаОтчета) Тогда
			
			КолонкаОбъект=Результат.КолонкаОтчета.ПолучитьОбъект();
			КолонкаОбъект.ПометкаУдаления=Истина;
			
			Попытка
				
				КолонкаОбъект.Записать();
				ЕстьИзменениеКолонок=Истина;
				
			Исключение
				
				СтрокаШаблона = НСтр("ru = 'Не удалось установить пометку удаления колонки %1: %2'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, КолонкаОбъект.Наименование, ОписаниеОшибки()),,, СтатусСообщения.Важное);
				КонецЕсли;
				
				Возврат Ложь;
				
			КонецПопытки;
			
		ИначеЕсли ЗначениеЗаполнено(Результат.ВидИтогаПоСчету) Тогда
			
			КолонкаОбъект=Справочники.КолонкиОтчетов.СоздатьЭлемент();
			
			КолонкаОбъект.ВидИтогаПоСчету			= Результат.ВидИтогаПоСчету;
			КолонкаОбъект.Владелец					= ВидОтчета;
			КолонкаОбъект.Наименование				= ""+Результат.ВидИтогаПоСчету;
			КолонкаОбъект.Код						= ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(КолонкаОбъект.Наименование,,"КолонкиОтчетов",ВидОтчета);
			КолонкаОбъект.Предназначение			= Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость;
			КолонкаОбъект.ПорядковыйНомер			= ПолучитьВозможныйНомерКолонки(ВидОтчета);
			КолонкаОбъект.ТипЗначения				= Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
			
			Попытка
				
				КолонкаОбъект.Записать();
				ЕстьИзменениеКолонок=Истина;
				
			Исключение
				
				СтрокаШаблона = НСтр("ru = 'Не удалось создать колонку %1: %2'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, КолонкаОбъект.Наименование, ОписаниеОшибки()),,, СтатусСообщения.Важное);
				КонецЕсли;
				
				Возврат Ложь;
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ИзменитьСоставКолонок()

Функция ПроверитьНаличиеКолонокДтКт(ВидОтчета,ЕстьИзменениеКолонок) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	КолонкиОтчетов.Ссылка,
	|	КолонкиОтчетов.ВидИтогаСокращеннойОСВ
	|ИЗ
	|	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|ГДЕ
	|	КолонкиОтчетов.Владелец = &ВидОтчета";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	ЕстьКолонкаДебет=Ложь;
	ЕстьКолонкаКредит=Ложь;
	
	Пока Результат.Следующий() Цикл
		
		Если Результат.ВидИтогаСокращеннойОСВ=Перечисления.ДебетКредит.Дебет Тогда
			
			ЕстьКолонкаДебет=Истина;
			
		ИначеЕсли Результат.ВидИтогаСокращеннойОСВ=Перечисления.ДебетКредит.Кредит Тогда
			
			ЕстьКолонкаКредит=Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьКолонкаДебет И ЕстьКолонкаКредит Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если НЕ ЕстьКолонкаДебет Тогда
		
		КолонкаОбъект=Справочники.КолонкиОтчетов.СоздатьЭлемент();
		
		КолонкаОбъект.ВидИтогаСокращеннойОСВ	= Перечисления.ДебетКредит.Дебет;
		КолонкаОбъект.Владелец					= ВидОтчета;
		КолонкаОбъект.Наименование				= "Дт";
		КолонкаОбъект.Код						= "Дт";
		КолонкаОбъект.Предназначение			= Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость;
		КолонкаОбъект.ПорядковыйНомер			= 1;
		КолонкаОбъект.ТипЗначения				= Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
		
		Попытка
			
			КолонкаОбъект.Записать();
			ЕстьКолонкаДебет=Истина;
			
		Исключение
			
			СтрокаШаблона = НСтр("ru = 'Не удалось создать колонку %1: %2'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, КолонкаОбъект.Наименование, ОписаниеОшибки()),,, СтатусСообщения.Важное);
			КонецЕсли;
			
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если НЕ ЕстьКолонкаКредит Тогда
		
		КолонкаОбъект=Справочники.КолонкиОтчетов.СоздатьЭлемент();
		
		КолонкаОбъект.ВидИтогаСокращеннойОСВ	= Перечисления.ДебетКредит.Кредит;
		КолонкаОбъект.Владелец					= ВидОтчета;
		КолонкаОбъект.Наименование				= "Кт";
		КолонкаОбъект.Код						= "Кт";
		КолонкаОбъект.Предназначение			= Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость;
		КолонкаОбъект.ПорядковыйНомер			= 2;
		КолонкаОбъект.ТипЗначения				= Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
		
		Попытка
			
			КолонкаОбъект.Записать();
			ЕстьКолонкаКредит=Истина;
			
		Исключение
			
			СтрокаШаблона = НСтр("ru = 'Не удалось создать колонку %1: %2'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, КолонкаОбъект.Наименование, ОписаниеОшибки()),,, СтатусСообщения.Важное);
			КонецЕсли;
			
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ЕстьКолонкаДебет И ЕстьКолонкаКредит;
	
КонецФункции // ПроверитьНаличиеКолонокДтКт() 

Процедура СформироватьПоказателиОтчета(ВидОтчета,
										МассивСтрок = Неопределено,
										МассивКолонок = Неопределено,
										ПравилоОбработки = Неопределено, 
										ОбновитьТР = Истина,
										Использование = 1,
										КонтролироватьЛимиты = Ложь,
										ТаблицаИзмененныхПоказателей = Неопределено) Экспорт
										
										
	Если ТаблицаИзмененныхПоказателей = Неопределено Тогда
	
		ТаблицаИзмененныхПоказателей = Новый ТаблицаЗначений;
		ТаблицаИзмененныхПоказателей.Колонки.Добавить("Ссылка");
		ТаблицаИзмененныхПоказателей.Колонки.Добавить("ОбъектДобавлен", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		ТаблицаИзмененныхПоказателей.Колонки.Добавить("ПометкаУдаления", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	КонецЕсли;									
										
	Если МассивСтрок=Неопределено Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	СтрокиОтчетов.Ссылка
		|ИЗ
		|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
		|ГДЕ
		|	СтрокиОтчетов.Владелец = &Владелец
		|	И НЕ СтрокиОтчетов.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Владелец",ВидОтчета);
		МассивСтрок=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	Если МассивКолонок=Неопределено Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	КолонкиОтчетов.Ссылка
		|ИЗ
		|	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
		|ГДЕ
		|	КолонкиОтчетов.Владелец = &Владелец
		|	И НЕ КолонкиОтчетов.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Владелец",ВидОтчета);
		МассивКолонок=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	ЗапросПоказатели=Новый Запрос;
	ЗапросПоказатели.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &Владелец
	|	И ПоказателиОтчетов.Колонка = &Колонка
	|	И ПоказателиОтчетов.Строка = &Строка";
	
	МассивПоказателей=Новый Массив;
	
	Для Каждого Строка ИЗ МассивСтрок Цикл
		
		Для Каждого Колонка ИЗ МассивКолонок Цикл
			
			ЗапросПоказатели.УстановитьПараметр("Владелец",ВидОтчета);
			ЗапросПоказатели.УстановитьПараметр("Колонка",Колонка);
			ЗапросПоказатели.УстановитьПараметр("Строка",Строка);
			
			Результат=ЗапросПоказатели.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда
				
				ПоказательОСВ = СформироватьПоказатель(ВидОтчета,Строка, Колонка,Использование,Результат.Ссылка,ПравилоОбработки, Ложь,КонтролироватьЛимиты,ТаблицаИзмененныхПоказателей);
				
			Иначе
				
				ПоказательОСВ = СформироватьПоказатель(ВидОтчета,Строка, Колонка,Использование,,ПравилоОбработки, Ложь,КонтролироватьЛимиты,ТаблицаИзмененныхПоказателей);
				
			КонецЕсли;

			Если ЗначениеЗаполнено(ПоказательОСВ) 
				И Строка.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость
				И Колонка.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость 
				И ЗначениеЗаполнено(ПравилоОбработки) Тогда
				
				МассивПоказателей.Добавить(ПоказательОСВ);
								
			КонецЕсли;							
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьПоказателиОтчета()

Процедура СформироватьПоказателиОтчетаОтбор(ВидОтчета,
										ТаблицаСтрок,
										ПравилоОбработки = Неопределено, 
										Использование = 1) Экспорт									
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	КолонкиОтчетов.Ссылка КАК КолонкаСсылка
	|ИЗ
	|	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|ГДЕ
	|	КолонкиОтчетов.Владелец = &Владелец
	|	И НЕ КолонкиОтчетов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец",ВидОтчета);
	МассивКолонок=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КолонкаСсылка");
	
	ЗапросПоказатели=Новый Запрос;
	ЗапросПоказатели.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &Владелец
	|	И ПоказателиОтчетов.Колонка = &Колонка
	|	И ПоказателиОтчетов.Строка = &Строка";
	
	МассивПоказателей=Новый Массив;
	
	Для Каждого Строка ИЗ ТаблицаСтрок Цикл
		
		Если Строка.ПометкаУдаления Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Для Каждого Колонка ИЗ МассивКолонок Цикл
			
			ЗапросПоказатели.УстановитьПараметр("Владелец",ВидОтчета);
			ЗапросПоказатели.УстановитьПараметр("Колонка",Колонка);
			ЗапросПоказатели.УстановитьПараметр("Строка",Строка.СтрокаСсылка);
			
			Результат=ЗапросПоказатели.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда
				
				ПоказательОСВ = СформироватьПоказательОтбор(ВидОтчета,Строка.СтрокаСсылка, Колонка,Использование,Результат.Ссылка,ПравилоОбработки,Строка);
				
			Иначе
				
				ПоказательОСВ = СформироватьПоказательОтбор(ВидОтчета,Строка.СтрокаСсылка, Колонка,Использование,,ПравилоОбработки,Строка);
				
			КонецЕсли;							
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьПоказателиОтчетаОтбор()

Процедура СформироватьФормулыРасчетаОСВ(ВидОтчета,ПравилоОбработки,ОбновлятьПоказатели=Истина,МассивПоказателей=Неопределено,ОбновлятьНастройки=Истина,ОткрыватьТранзакцию=Истина) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка,
	|	ПоказателиОтчетов.СчетБД,
	|	ПоказателиОтчетов.ВидИтогаПоСчету,
	|	ПоказателиОтчетов.СчетБД.Код КАК КодСчета,
	|	ПоказателиОтчетов.СчетБД.ГруппирующийСчет КАК ГруппирующийСчет,
	|	ВЫБОР
	|		КОГДА ПроцедурыРасчетов.Процедура ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьПроцедура
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
	|		ПО ПоказателиОтчетов.Ссылка = ПроцедурыРасчетов.ПотребительРасчета
	|			И (ПроцедурыРасчетов.НазначениеРасчетов = &НазначениеРасчетов)
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &ВидОтчета
	|	И ПоказателиОтчетов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость)
	|	И НЕ ПоказателиОтчетов.ПометкаУдаления
	|	И НЕ ПоказателиОтчетов.СчетБД = ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)
	|	И НЕ(ПоказателиОтчетов.ВидИтогаПоСчету = ЗНАЧЕНИЕ(Перечисление.ВидыБухгалтерскихИтогов.ПустаяСсылка)
	|				И НЕ(ПоказателиОтчетов.СчетБД.ГруппирующийСчет
	|						ИЛИ ПоказателиОтчетов.СчетБД.Код = ""ИТОГО""))";
	
	Если ЗначениеЗаполнено(МассивПоказателей) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ПоказателиОтчетов.Ссылка В(&МассивПоказателей)";
		
		Запрос.УстановитьПараметр("МассивПоказателей",МассивПоказателей);
		
	КонецЕсли;
			
	Запрос.УстановитьПараметр("НазначениеРасчетов",ПравилоОбработки);
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	НеВыводитьГруппирующиеСчета=ВидОтчета.НеВыводитьГруппирующиеСчета;
	ПолучатьБухгалтерскиеИтогиПоГруппирующимСчетам=ВидОтчета.ПолучатьБухгалтерскиеИтогиПоГруппирующимСчетам;
	
	Если ОткрыватьТранзакцию Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	ТолькоГруппирующиеСчета=Истина;
	
	Если ПравилоОбработки.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
		
		Если ЗначениеЗаполнено(ПравилоОбработки.ВидОтчетаОСВ) Тогда
			
			ТолькоГруппирующиеСчета=Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ПравилоОбработки.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии
		ИЛИ ПравилоОбработки.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
		ИЛИ ПравилоОбработки.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов Тогда
		
		Если ЗначениеЗаполнено(ПравилоОбработки.РегистрБухгалтерииПоУмолчанию) Тогда
			
			ТолькоГруппирующиеСчета=Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Пока Результат.Следующий() Цикл
		
		Если (Результат.ГруппирующийСчет И (НЕ НеВыводитьГруппирующиеСчета) И (НЕ ПолучатьБухгалтерскиеИтогиПоГруппирующимСчетам)) ИЛИ Результат.КодСчета="ИТОГО" Тогда
			
			СоздатьФормулуСуммированияПодчиненныхОСВ(ПравилоОбработки,Результат.Ссылка);	
			
		Иначе
			
			Если (НЕ ТолькоГруппирующиеСчета) И (ОбновлятьПоказатели ИЛИ (НЕ Результат.ЕстьПроцедура))  Тогда 			
				
				ТекстИтога=УправлениеОтчетамиУХ.ПолучитьТекстИтогаПоСчету(Результат.СчетБД,Результат.ВидИтогаПоСчету);
				
				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("ТекстПроцедуры",		ТекстИтога);
				СтруктураДанных.Вставить("ТипЯчейки",			"Показатель");
				СтруктураДанных.Вставить("Владелец",			ВидОтчета);
				СтруктураДанных.Вставить("НазначениеРасчетов",	ПравилоОбработки);
				СтруктураДанных.Вставить("ПотребительРасчета",	Результат.Ссылка);
				СтруктураДанных.Вставить("РесурсРегистра",		ПравилоОбработки.РесурсРегистраПоУмолчанию);
				СтруктураДанных.Вставить("ПроизвольныйКод",		Ложь);
				СтруктураДанных.Вставить("СпособИспользования",	Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета);
				
				Если УправлениеОтчетамиУХ.ОбработатьТекстУпрощеннойФормулы(СтруктураДанных,Ложь,Ложь) Тогда		
					
					УправлениеОтчетамиУХ.ЗаписатьПроцедуруРасчета(СтруктураДанных,Ложь,Ложь);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбновлятьНастройки Тогда
		УправлениеОтчетамиУХ.СформироватьДанныеРегистраПараметрическихНастроек(ПравилоОбработки);
	КонецЕсли;
	
	Если ОткрыватьТранзакцию Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры // СформироватьФормулыРасчетаОСВ 

Процедура СоздатьНедостающиеПоказателиОСВ(ПланСчетов=Неопределено,Счет=Неопределено,ВидОтчетаОСВ=Неопределено, ОбновитьТР = Истина,ВыполнятьВФоне=Истина) Экспорт
	
	Если ВидОтчетаОСВ=Неопределено Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ВидыОтчетов.Ссылка
		|ИЗ
		|	Справочник.ВидыОтчетов КАК ВидыОтчетов
		|ГДЕ
		|	ВидыОтчетов.ПланСчетов = &ПланСчетов";
		
		Если НЕ Счет=Неопределено Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|	И ВидыОтчетов.ИспользоватьПоУмолчанию";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ПланСчетов",?(ПланСчетов=Неопределено,Счет.Владелец,ПланСчетов));
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			ВидОтчетаОСВ=Результат.Ссылка;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПравилоОбработки = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки, ВидОтчетаОСВ);
	
	Если НЕ ЗначениеЗаполнено(ПравилоОбработки) Тогда
		
		СтрокаШаблона = НСтр("ru = 'Не удалось определить правило обработки по умолчанию для вида отчета %1. Структура вида отчета не изменена.'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВидОтчетаОСВ),,, СтатусСообщения.Важное);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
		
	ЕстьИзменениеКолонок=Ложь;
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		
		Если ВидОтчетаОСВ.СокращеннаяОСВ Тогда
			
			Если НЕ Справочники.ВидыОтчетов.ПроверитьНаличиеКолонокДтКт(ВидОтчетаОСВ,ЕстьИзменениеКолонок) Тогда
				
				Возврат;
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ Справочники.ВидыОтчетов.ИзменитьСоставКолонок(ВидОтчетаОСВ,ЕстьИзменениеКолонок) Тогда
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаИзмененныхСтрок=Новый ТаблицаЗначений;
	ТаблицаИзмененныхСтрок.Колонки.Добавить("Ссылка");
	ТаблицаИзмененныхСтрок.Колонки.Добавить("ОбъектДобавлен",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТаблицаИзмененныхСтрок.Колонки.Добавить("ПометкаУдаления",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	ТаблицаИзмененныхПоказателей=Новый ТаблицаЗначений;
	ТаблицаИзмененныхПоказателей.Колонки.Добавить("Ссылка");
	ТаблицаИзмененныхПоказателей.Колонки.Добавить("ОбъектДобавлен",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТаблицаИзмененныхПоказателей.Колонки.Добавить("ПометкаУдаления",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СчетаБД.Ссылка,
	|	СчетаБД.ПометкаУдаления,
	|	СчетаБД.Код
	|ИЗ
	|	Справочник.СчетаБД КАК СчетаБД
	|ГДЕ
	|	СчетаБД.Владелец = &ПланСчетов
	|	И НЕ СчетаБД.НеВключатьВОСВ";
		
	Если НЕ ВидОтчетаОСВ.ВыводитьЗабалансовыеСчета Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И (НЕ СчетаБД.Забалансовый)";
		
	КонецЕсли;
	
	Если ВидОтчетаОСВ.НеВыводитьГруппирующиеСчета Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И (НЕ СчетаБД.ГруппирующийСчет)";
		
	КонецЕсли;
	
	Если ВидОтчетаОСВ.СокращеннаяОСВ Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И (СчетаБД.РазделПланаСчетов В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Баланс))
		|ИЛИ СчетаБД.РазделПланаСчетов В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.ОПУ)))";
		
	КонецЕсли;
				
	Запрос.Текст=Запрос.Текст+"
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетаБД.Код ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("ПланСчетов",ПланСчетов);
	
	ТаблицаСчетов=Запрос.Выполнить().Выгрузить();
			 
	Если НЕ Счет=Неопределено Тогда
		
		СтрокаСчет=ТаблицаСчетов.Найти(Счет,"Ссылка");
		
		Если СтрокаСчет=Неопределено Тогда 
			
			ОтменитьТранзакцию();
			Возврат;
			
		КонецЕсли;
		
		СформироватьСтрокуПоСчету(ВидОтчетаОСВ,СтрокаСчет,ТаблицаСчетов.Индекс(СтрокаСчет)+1,ТаблицаИзмененныхСтрок);
				
	Иначе
				
		Для Каждого СтрокаСчет ИЗ ТаблицаСчетов Цикл
						
			СформироватьСтрокуПоСчету(ВидОтчетаОСВ,СтрокаСчет,ТаблицаСчетов.Индекс(СтрокаСчет)+1,ТаблицаИзмененныхСтрок);
									
		КонецЦикла;
		
	КонецЕсли;
	
	МассивИзмененнаяИерархия=ОбновитьИерархиюСтрокПоСчетам(ВидОтчетаОСВ);
			
	Если ТаблицаИзмененныхСтрок.Количество()>0 ИЛИ ЕстьИзменениеКолонок Тогда
		
		СформироватьПоказателиОтчета(ВидОтчетаОСВ,ТаблицаИзмененныхСтрок.ВыгрузитьКолонку("Ссылка"),,ПравилоОбработки, ОбновитьТР,,,ТаблицаИзмененныхПоказателей);
		
	КонецЕсли;
		
	Если (НЕ ТаблицаИзмененныхПоказателей.Найти(Истина,"ОбъектДобавлен")=Неопределено) ИЛИ МассивИзмененнаяИерархия.Количество()>0 ИЛИ ЕстьИзменениеКолонок Тогда
				 
		 МассивПоказателей=ТаблицаИзмененныхПоказателей.Скопировать(Новый Структура("ОбъектДобавлен",Истина));
		 
		 Запрос=Новый Запрос;
		 Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		              |	ПоказателиОтчетов.Ссылка
		              |ИЗ
		              |	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		              |ГДЕ
		              |	ПоказателиОтчетов.Владелец = &ВидОтчета
		              |	И (ПоказателиОтчетов.Строка В (&МассивСтрок)
		              |			ИЛИ ПоказателиОтчетов.СчетБД.Код = ""ИТОГО""
		              |			ИЛИ ПоказателиОтчетов.Ссылка В (&МассивПоказателей))";
					  
		Запрос.УстановитьПараметр("ВидОтчета",ВидОтчетаОСВ);
		Запрос.УстановитьПараметр("МассивСтрок",МассивИзмененнаяИерархия);
		Запрос.УстановитьПараметр("МассивПоказателей",МассивПоказателей);
		 
		СформироватьФормулыРасчетаОСВ(ВидОтчетаОСВ,ПравилоОбработки,Истина,Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"),Счет=Неопределено,Ложь);
		
		ОбновитьБланкОтчетаПоУмолчанию(ВидОтчетаОСВ,ВыполнятьВФоне);
		 
	КонецЕсли;
	
	НаборЗаписей=РегистрыСведений.ДанныеДляОбновленияСтруктурыОСВ.СоздатьНаборЗаписей();
		
	НаборЗаписей.Отбор.ВидОтчета.Установить(ВидОтчетаОСВ);
	
	Если ЗначениеЗаполнено(Счет) Тогда
		
		НаборЗаписей.Отбор.СчетБД.Установить(Счет);
		
	КонецЕсли;
	
	НаборЗаписей.Записать(Истина);
		
КонецПроцедуры // СформироватьПоказателиОСВ() 

Процедура СоздатьНедостающиеПоказателиОСВОтбор(ПланСчетов,ВидОтчетаОСВ,ТаблицаОтбораСчетов) Экспорт
		
	ПравилоОбработки = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки, ВидОтчетаОСВ);
	
	Если НЕ ЗначениеЗаполнено(ПравилоОбработки) Тогда
		
		СтрокаШаблона = НСтр("ru = 'Не удалось определить правило обработки по умолчанию для вида отчета %1. Структура вида отчета не изменена.'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВидОтчетаОСВ),,, СтатусСообщения.Важное);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
		
	ЕстьИзменениеКолонок=Ложь;	
	
	Если НЕ Справочники.ВидыОтчетов.ИзменитьСоставКолонок(ВидОтчетаОСВ,ЕстьИзменениеКолонок) Тогда
		
		Возврат;
		
	КонецЕсли;
		
	ТаблицаИзмененныхПоказателей=Новый ТаблицаЗначений;
	ТаблицаИзмененныхПоказателей.Колонки.Добавить("ПоказательСсылка");
	ТаблицаИзмененныхПоказателей.Колонки.Добавить("ОбъектДобавлен",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТаблицаИзмененныхПоказателей.Колонки.Добавить("ПометкаУдаления",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ ТаблицаОтбораСчетов.* Поместить ТаблицаОтбораСчетов ИЗ &ТаблицаОтбораСчетов КАК ТаблицаОтбораСчетов
	|; 
	|ВЫБРАТЬ СтрокиОтчетов.Ссылка,
	|СтрокиОтчетов.СчетБД
	|Поместить СтрокиОтчетовТек
	|ИЗ Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ СтрокиОтчетов.Владелец=&ВидОтчетаОСВ
	|;
	|ВЫБРАТЬ ТаблицаОтбораСчетов.Счет КАК СчетСсылка,
	|ТаблицаОтбораСчетов.КодСчета КАК Код,
	|ТаблицаОтбораСчетов.Субконто1Используется КАК Субконто1Используется,
	|ТаблицаОтбораСчетов.Субконто2Используется КАК Субконто2Используется,
	|ТаблицаОтбораСчетов.Субконто3Используется КАК Субконто3Используется,
	|ВЫБОР КОГДА ТаблицаОтбораСчетов.Счет ЕСТЬ NULL И (НЕ СтрокиОтчетовТек.Ссылка ЕСТЬ NULL) Тогда Истина Иначе Ложь Конец  КАК ПометкаУдаления,
	|СтрокиОтчетовТек.Ссылка КАК СтрокаСсылка,
	|ЛОЖЬ КАК ОбъектДобавлен
	|ИЗ СтрокиОтчетовТек КАК СтрокиОтчетовТек
	|Полное Соединение ТаблицаОтбораСчетов КАК ТаблицаОтбораСчетов
	|ПО СтрокиОтчетовТек.СчетБД=ТаблицаОтбораСчетов.Счет";
	
	Запрос.УстановитьПараметр("ТаблицаОтбораСчетов",ТаблицаОтбораСчетов);
	Запрос.УстановитьПараметр("ВидОтчетаОСВ",ВидОтчетаОСВ);
	
	ТаблицаСчетов=Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаСчет ИЗ ТаблицаСчетов Цикл
		
		СформироватьСтрокуПоСчетуОтбор(ВидОтчетаОСВ,СтрокаСчет,ТаблицаСчетов.Индекс(СтрокаСчет)+1);
		
	КонецЦикла;
						
	СформироватьПоказателиОтчетаОтбор(ВидОтчетаОСВ,ТаблицаСчетов,ПравилоОбработки,1);
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоказателиОтчетов.Ссылка
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &ВидОтчета
	|	И НЕ ПоказателиОтчетов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчетаОСВ);
	
	СформироватьФормулыРасчетаОСВ(ВидОтчетаОСВ,ПравилоОбработки,Истина,Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"),Истина,Ложь);
	
	ОбновитьБланкОтчетаПоУмолчанию(ВидОтчетаОСВ);
	
	НаборЗаписей=РегистрыСведений.ДанныеДляОбновленияСтруктурыОСВ.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ВидОтчета.Установить(ВидОтчетаОСВ);
	
	НаборЗаписей.Записать(Истина);
		
КонецПроцедуры // СоздатьНедостающиеПоказателиОСВОтбор() 

Функция ОбновитьИерархиюСтрокПоСчетам(ВидОтчета) Экспорт 

	МассивСтрок=Новый Массив;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СтрокиОтчетовИсходные.Ссылка КАК ИсходнаяСтрока,
	|	СтрокиОтчетовРодитель.Ссылка КАК НовыйРодитель,
	|	СтрокиОтчетовИсходные.Родитель КАК ТекущийРодитель
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетовИсходные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиОтчетов КАК СтрокиОтчетовРодитель
	|		ПО (СтрокиОтчетовИсходные.Владелец = &ВидОтчета)
	|			И (СтрокиОтчетовРодитель.Владелец = &ВидОтчета)
	|			И СтрокиОтчетовИсходные.СчетБД.Родитель = СтрокиОтчетовРодитель.СчетБД";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Если НЕ Результат.ТекущийРодитель=Результат.НовыйРодитель Тогда
			
			СтрокаОбъект=Результат.ИсходнаяСтрока.ПолучитьОбъект();
			СтрокаОбъект.Родитель=Результат.НовыйРодитель;
			
			Попытка
				
				СтрокаОбъект.ОбменДанными.Загрузка=Истина;
				СтрокаОбъект.Записать();
				МассивСтрок.Добавить(Результат.НовыйРодитель);
				
			Исключение
				
				СтрокаШаблона = НСтр("ru = 'Не удалось изменить родителя для строки %1:
				|%2'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, СтрокаОбъект.Наименование, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),,, СтатусСообщения.Важное);
				КонецЕсли;
								
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСтрок.Количество()=0 ИЛИ ВидОтчета.ПолучатьБухгалтерскиеИтогиПоГруппирующимСчетам Тогда
		
		Возврат МассивСтрок; 
		
	КонецЕсли;
	
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиОтчетов.Родитель КАК Родитель
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &ВидОтчета
	|	И НЕ СтрокиОтчетов.Родитель.СуммироватьПодчиненные";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СтрокаОбъект=Результат.Родитель.ПолучитьОбъект();
		СтрокаОбъект.СуммироватьПодчиненные=Истина;
		
		Попытка
			
			СтрокаОбъект.ОбменДанными.Загрузка=Истина;
			СтрокаОбъект.Записать();
			
			Если МассивСтрок.Найти(СтрокаОбъект.Ссылка)=Неопределено Тогда
				МассивСтрок.Добавить(СтрокаОбъект.Ссылка);
			КонецЕсли;
					
		Исключение
			
			СтрокаШаблона = НСтр("ru = 'Не удалось изменить реквизит ""Суммировать подчиненные"" для строки %1:
			|%2'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, СтрокаОбъект.Наименование, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),,, СтатусСообщения.Важное);
			КонецЕсли;
						
		КонецПопытки;		
		
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции // ОбновитьИерархиюСтрокПоСчетам()

Функция ПолучитьВозможныйИндексСтроки(ВидОтчета,Инд,Родитель=Неопределено) Экспорт
	
	Если Родитель=Неопределено Тогда
		
		Родитель=Справочники.СтрокиОтчетов.ПустаяСсылка();
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(СтрокиОтчетов.ПорядковыйНомер) КАК ПорядковыйНомер
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &Владелец
	|	И (НЕ СтрокиОтчетов.ПометкаУдаления)
	|	И СтрокиОтчетов.Родитель = &Родитель
	|	И СтрокиОтчетов.ПорядковыйНомер >= &ПорядковыйНомер";
				   
	Запрос.УстановитьПараметр("Владелец", ВидОтчета);
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("ПорядковыйНомер", Инд);
	
	ПорядковыйНомер = Запрос.Выполнить().Выгрузить()[0].ПорядковыйНомер;
	
	Если ТипЗнч(ПорядковыйНомер) = Тип("Null") Тогда
		Возврат Инд;
	Иначе
		Возврат ПорядковыйНомер + 1;
	КонецЕсли;
				   
КонецФункции

Процедура ОсвободитьНомераСтрок(ВидОтчета,Родитель,Ссылка,Номер,КоличествоНомеров) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтрокиОтчетов.Ссылка,
	|	СтрокиОтчетов.ПорядковыйНомер КАК ПорядковыйНомер
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &Владелец
	|	И НЕ СтрокиОтчетов.ПометкаУдаления
	|	И СтрокиОтчетов.Родитель = &Родитель
	|	И СтрокиОтчетов.ПорядковыйНомер >= &ПорядковыйНомер
	|	И СтрокиОтчетов.Ссылка <> &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядковыйНомер УБЫВ";
				   
	Запрос.УстановитьПараметр("Владелец", ВидОтчета);
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("ПорядковыйНомер",Номер);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	СтрокиКОбновлению = Запрос.Выполнить().Выбрать();
	
	Пока СтрокиКОбновлению.Следующий() Цикл
		
		СтрокаОбъект=СтрокиКОбновлению.Ссылка.ПолучитьОбъект();
		СтрокаОбъект.ПорядковыйНомер=СтрокаОбъект.ПорядковыйНомер+КоличествоНомеров;
		СтрокаОбъект.ОбменДанными.Загрузка=Истина;
		СтрокаОбъект.Записать();
		
	КонецЦикла;
					   
КонецПроцедуры // 

Процедура СформироватьСтрокуПоСчету(ВидОтчета,СтрокаСчет,НомерСтроки,ТаблицаИзмененныхСтрок) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СтрокиОтчетов.Ссылка
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &Владелец
	|	И СтрокиОтчетов.СчетБД = &СчетБД";
	
	Запрос.УстановитьПараметр("Владелец",ВидОтчета);
	Запрос.УстановитьПараметр("СчетБД",СтрокаСчет.Ссылка);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		СтрокаОбъект=Результат.Ссылка.ПолучитьОбъект();
		
		Если СтрокаСчет.ПометкаУдаления Тогда
			
			Попытка
				
				СтрокаОбъект.ПометкаУдаления=Истина;
				НоваяСтрока=ТаблицаИзмененныхСтрок.Добавить();
				НоваяСтрока.ПометкаУдаления=Истина;	
				НоваяСтрока.Ссылка= СтрокаОбъект.Ссылка;
				
				СтрокаОбъект.Записать();
				Возврат;
				
			Исключение
				
				СтрокаШаблона = НСтр("ru = 'Не удалось пометить на удаление строку для вида отчета %1 по счету %2: %3'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВидОтчета, СтрокаСчет.Ссылка, ОписаниеОшибки()),,, СтатусСообщения.Внимание);
				КонецЕсли;
				
				Возврат;
				
			КонецПопытки;
			
		Иначе
			
			ПроектКода="Счет_"+СтрЗаменить(СокрЛП(СтрокаОбъект.СчетБД.Код),".","_");
			ПроектНаименования=СокрЛП(СтрокаОбъект.СчетБД.Код)+" "+СтрокаОбъект.СчетБД.Наименование;
			
			Если НЕ СокрЛП(СтрокаОбъект.Код)=ПроектКода Тогда
				
				СтрокаОбъект.Код=ОбщегоНазначенияУХ.ПолучитьВозможныйКодСправочника(ПроектКода,20,"СтрокиОтчетов",ВидОтчета);
				СтрокаОбъект.Наименование=ПроектНаименования;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли НЕ СтрокаСчет.ПометкаУдаления Тогда
		
		СтрокаОбъект=Справочники.СтрокиОтчетов.СоздатьЭлемент();
		СтрокаОбъект.Владелец=ВидОтчета;
		СтрокаОбъект.СчетБД=СтрокаСчет.Ссылка;
		
		ПроектКода="Счет_"+СтрЗаменить(СокрЛП(СтрокаОбъект.СчетБД.Код),".","_");
		СтрокаОбъект.Код=ОбщегоНазначенияУХ.ПолучитьВозможныйКодСправочника(ПроектКода, СтрокаОбъект.Метаданные().ДлинаКода,"СтрокиОтчетов", СтрокаОбъект.Владелец);	
		СтрокаОбъект.Наименование=СокрЛП(СтрокаОбъект.СчетБД.Код)+" "+СтрокаОбъект.СчетБД.Наименование;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ВидОтчета.НеФормироватьАналитическиеРаскрытия Тогда
		
		СтрокаОбъект.ГруппаРаскрытия=Справочники.ВидыОтчетов.ПолучитьГруппуРаскрытияДляСчета(СтрокаОбъект.Владелец,СтрокаОбъект.СчетБД);
		
		Если ЗначениеЗаполнено(СтрокаОбъект.ГруппаРаскрытия) Тогда
			
			СтрокаОбъект.ВидИтога=Перечисления.ВидыИтоговПоказателя.Сумма;
			
		Иначе
			
			СтрокаОбъект.ВидИтога="";
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаОбъект.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
	
	Если СтрокаОбъект.СчетБД.Вид=Перечисления.ВидыСчетовБД.Активный  Тогда
		СтрокаОбъект.ВидПоказателя=Перечисления.ВидыПоказателей.Активный;
	ИначеЕсли СтрокаОбъект.СчетБД.Вид=Перечисления.ВидыСчетовБД.Пассивный Тогда
		СтрокаОбъект.ВидПоказателя=Перечисления.ВидыПоказателей.Пассивный;
	КонецЕсли;
	
	СтрокаОбъект.ПорядковыйНомер=НомерСтроки;
	
	Попытка
		
		НоваяСтрока=ТаблицаИзмененныхСтрок.Добавить();
		НоваяСтрока.ОбъектДобавлен=СтрокаОбъект.ЭтоНовый();	
		
		СтрокаОбъект.Записать();
		НоваяСтрока.Ссылка= СтрокаОбъект.Ссылка;
		
	Исключение
		
		Если СтрокаОбъект.ЭтоНовый() тогда
			
			СтрокаШаблона = НСтр("ru = 'Не удалось создать строку для вида отчета %1 по счету %2: %3'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВидОтчета, СтрокаСчет.Ссылка, ОписаниеОшибки()),,, СтатусСообщения.Внимание);
			КонецЕсли;
			
		Иначе
			
			СтрокаШаблона = НСтр("ru = 'Не удалось изменить строку для вида отчета %1 по счету %2: %3'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВидОтчета, СтрокаСчет.Ссылка, ОписаниеОшибки()),,, СтатусСообщения.Внимание);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры // СформироватьСтрокуПоСчету()

Процедура СформироватьСтрокуПоСчетуОтбор(ВидОтчета,СтрокаСчет,НомерСтроки) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаСчет.СтрокаСсылка) Тогда
		
		СтрокаОбъект=СтрокаСчет.СтрокаСсылка.ПолучитьОбъект();
		
		Если СтрокаСчет.ПометкаУдаления Тогда
			
			Попытка
				
				СтрокаОбъект.ПометкаУдаления=Истина;				
				СтрокаОбъект.Записать();
				Возврат;
				
			Исключение
				
				СтрокаШаблона = НСтр("ru = 'Не удалось пометить на удаление строку для вида отчета %1 по счету %2: %3'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВидОтчета, СтрокаСчет.Ссылка, ОписаниеОшибки()),,, СтатусСообщения.Внимание);
				КонецЕсли;
				
				Возврат;
				
			КонецПопытки;
			
		Иначе
			
			ПроектКода="Счет_"+СтрЗаменить(СокрЛП(СтрокаОбъект.СчетБД.Код),".","_");
			ПроектНаименования=СокрЛП(СтрокаОбъект.СчетБД.Код)+" "+СтрокаОбъект.СчетБД.Наименование;
			
			Если НЕ СокрЛП(СтрокаОбъект.Код)=ПроектКода Тогда
				
				СтрокаОбъект.Код=ОбщегоНазначенияУХ.ПолучитьВозможныйКодСправочника(ПроектКода,20,"СтрокиОтчетов",ВидОтчета);
				СтрокаОбъект.Наименование=ПроектНаименования;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли НЕ СтрокаСчет.ПометкаУдаления Тогда
		
		СтрокаОбъект=Справочники.СтрокиОтчетов.СоздатьЭлемент();
		СтрокаОбъект.Владелец=ВидОтчета;
		СтрокаОбъект.СчетБД=СтрокаСчет.СчетСсылка;
		
		ПроектКода="Счет_"+СтрЗаменить(СокрЛП(СтрокаОбъект.СчетБД.Код),".","_");
		СтрокаОбъект.Код=ОбщегоНазначенияУХ.ПолучитьВозможныйКодСправочника(ПроектКода, СтрокаОбъект.Метаданные().ДлинаКода,"СтрокиОтчетов", СтрокаОбъект.Владелец);	
		СтрокаОбъект.Наименование=СокрЛП(СтрокаОбъект.СчетБД.Код)+" "+СтрокаОбъект.СчетБД.Наименование;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ЕстьАналитики=Ложь;
	
	Для Индекс=1 ПО 3 Цикл
		
		Если СтрокаСчет["Субконто"+Индекс+"Используется"] Тогда
			
			ЕстьАналитики=Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьАналитики Тогда	
		
		СтрокаОбъект.ГруппаРаскрытия=Справочники.ВидыОтчетов.ПолучитьГруппуРаскрытияДляСчета(СтрокаОбъект.Владелец,СтрокаОбъект.СчетБД,,,СтрокаСчет);
		
	Иначе
		
		СтрокаОбъект.ГруппаРаскрытия=Справочники.ГруппыРаскрытия.ПустаяСсылка();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаОбъект.ГруппаРаскрытия) Тогда
		
		СтрокаОбъект.ВидИтога=Перечисления.ВидыИтоговПоказателя.Сумма;
		
	Иначе
		
		СтрокаОбъект.ВидИтога="";
		
	КонецЕсли;
	
	СтрокаОбъект.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
	
	Если СтрокаОбъект.СчетБД.Вид=Перечисления.ВидыСчетовБД.Активный  Тогда
		СтрокаОбъект.ВидПоказателя=Перечисления.ВидыПоказателей.Активный;
	ИначеЕсли СтрокаОбъект.СчетБД.Вид=Перечисления.ВидыСчетовБД.Пассивный Тогда
		СтрокаОбъект.ВидПоказателя=Перечисления.ВидыПоказателей.Пассивный;
	КонецЕсли;
	
	СтрокаОбъект.ПорядковыйНомер=НомерСтроки;
	
	Попытка
		
		СтрокаСчет.ОбъектДобавлен=СтрокаОбъект.ЭтоНовый();	
		СтрокаОбъект.Записать();
		СтрокаСчет.СтрокаСсылка= СтрокаОбъект.Ссылка;
		
	Исключение
		
		Если СтрокаОбъект.ЭтоНовый() тогда
			
			СтрокаШаблона = НСтр("ru = 'Не удалось создать строку для вида отчета %1 по счету %2: %3'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВидОтчета, СтрокаСчет.Ссылка, ОписаниеОшибки()),,, СтатусСообщения.Внимание);
			КонецЕсли;
			
		Иначе
			
			СтрокаШаблона = НСтр("ru = 'Не удалось изменить строку для вида отчета %1 по счету %2: %3'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВидОтчета, СтрокаСчет.Ссылка, ОписаниеОшибки()),,, СтатусСообщения.Внимание);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры // СформироватьСтрокуПоСчетуОтбор()

Функция ПолучитьВозможныйНомерКолонки(ВидОтчета,ТекНомер=0) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(КолонкиОтчетов.ПорядковыйНомер) КАК ПорядковыйНомер
	|ИЗ
	|	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|ГДЕ
	|	КолонкиОтчетов.Владелец = &Владелец
	|	И (НЕ КолонкиОтчетов.ПометкаУдаления)
	|	И КолонкиОтчетов.ПорядковыйНомер >= &ПорядковыйНомер";
	Запрос.УстановитьПараметр("Владелец", ВидОтчета);
	Запрос.УстановитьПараметр("ПорядковыйНомер", ТекНомер);
	
	ПорядковыйНомер = Запрос.Выполнить().Выгрузить()[0].ПорядковыйНомер;
	
	Если ТипЗнч(ПорядковыйНомер) = Тип("Null") Тогда
		Возврат ТекНомер+1;
	Иначе
		Возврат ПорядковыйНомер + 1;
	КонецЕсли;
				   
КонецФункции

Функция БалансОПУ(СчетБД) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СчетаБД.РазделПланаСчетов В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Баланс))
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Баланс)
	|		КОГДА СчетаБД.РазделПланаСчетов В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.ОПУ))
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.ОПУ)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК БалансОПУ
	|ИЗ
	|	Справочник.СчетаБД КАК СчетаБД
	|ГДЕ
	|	СчетаБД.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",СчетБД);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Возврат Результат.БалансОПУ;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
		
КонецФункции // ПолучитьВидИтогаСокращеннойОСВ()

Функция СформироватьПоказатель(ВидОтчета,Строка, Колонка, Использование=1, ОписаниеНовогоПоказателя=Неопределено,ПравилоОбработки=Неопределено, ОбновитьТР = Истина,КонтролироватьЛимиты=Ложь,ТаблицаИзмененныхПоказателей=Неопределено) Экспорт
	
	Если ВидОтчета.СокращеннаяОСВ Тогда
		
		БалансОПУ=БалансОПУ(Строка.СчетБД);
		
		Если БалансОПУ=Неопределено Тогда
			
			ВидИтогаТек=Перечисления.ВидыБухгалтерскихИтогов.ПустаяСсылка();
			
		ИначеЕсли Колонка.ВидИтогаСокращеннойОСВ=Перечисления.ДебетКредит.Дебет Тогда
			
			ВидИтогаТек=?(БалансОПУ=Справочники.РазделыПланаСчетов.Баланс,Перечисления.ВидыБухгалтерскихИтогов.СКД,Перечисления.ВидыБухгалтерскихИтогов.ДО);
			
		Иначе
			
			ВидИтогаТек=?(БалансОПУ=Справочники.РазделыПланаСчетов.Баланс,Перечисления.ВидыБухгалтерскихИтогов.СКК,Перечисления.ВидыБухгалтерскихИтогов.КО);
			
		КонецЕсли;
				
	Иначе
		
		ВидИтогаТек=Колонка.ВидИтогаПоСчету;
		
	КонецЕсли;
		
	Если Строка.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость 
		И Колонка.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость
		И ЗначениеЗаполнено(ВидИтогаТек) Тогда
		
		ТекстОшибки="";
		ТекПредназначение=Строка.Предназначение;
		
		ПроверитьПоказательОстатковОборотов(ВидОтчета,
						Строка.СчетБД,
						ВидИтогаТек,ТекПредназначение,Справочники.ПоказателиОтчетов.ПустаяСсылка(),ТекстОшибки);
						
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	Иначе
		
		ТекПредназначение=Строка.Предназначение;
		
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеНовогоПоказателя)=Тип("СправочникСсылка.ПоказателиОтчетов") Тогда
		
		Показатель=ОписаниеНовогоПоказателя.ПолучитьОбъект();
		Показатель.Наименование = Строка.Наименование + " " + нрег(Колонка.Наименование);
		
	Иначе
		
		Показатель = Справочники.ПоказателиОтчетов.СоздатьЭлемент();
		Показатель.Владелец = ВидОтчета;
		Код = СокрЛП(Строка.Код) + "_" + СокрЛП(Колонка.Код);
		Показатель.Код = ОбщегоНазначенияУХ.ПолучитьВозможныйКодСправочника(Код,Метаданные.Справочники.ПоказателиОтчетов.ДлинаКода,"ПоказателиОтчетов",ВидОтчета);
		Показатель.Наименование = Строка.Наименование + " " + нрег(Колонка.Наименование);
		
		Показатель.Строка 							=Строка;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.ГруппаРаскрытия) Тогда	
		
		Показатель.ГруппаРаскрытия	= Строка.ГруппаРаскрытия;
		Показатель.ВидИтога			= Строка.ВидИтога;
		
	ИначеЕсли ЗначениеЗаполнено(Строка.СчетБД) И (НЕ ВидОтчета.НеФормироватьАналитическиеРаскрытия) Тогда
		
		Показатель.ГруппаРаскрытия=ПолучитьГруппуРаскрытияДляСчета(ВидОтчета,Строка.СчетБД,,ВидИтогаТек);
		
		Если ЗначениеЗаполнено(Показатель.ГруппаРаскрытия) Тогда
			
			Показатель.ВидИтога=Перечисления.ВидыИтоговПоказателя.Сумма;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Строка.СтатьяДвиженияДенежныхСредств) Тогда
		
		Показатель.ГруппаРаскрытия=ПолучитьГруппуРаскрытияДляСтатьи(ВидОтчета,Строка.СтатьяДвиженияДенежныхСредств);
		
		Если ЗначениеЗаполнено(Показатель.ГруппаРаскрытия) Тогда
			
			Показатель.ВидИтога=Перечисления.ВидыИтоговПоказателя.Сумма;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Строка.СтатьяДоходовИРасходов) Тогда
		
		Показатель.ГруппаРаскрытия=ПолучитьГруппуРаскрытияДляСтатьи(ВидОтчета,Строка.СтатьяДоходовИРасходов);
		
		Если ЗначениеЗаполнено(Показатель.ГруппаРаскрытия) Тогда
			
			Показатель.ВидИтога=Перечисления.ВидыИтоговПоказателя.Сумма;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Строка.СтатьяДвиженияРесурсов) Тогда
		
		Показатель.ГруппаРаскрытия=ПолучитьГруппуРаскрытияДляСтатьи(ВидОтчета,Строка.СтатьяДвиженияРесурсов);
		
		Если ЗначениеЗаполнено(Показатель.ГруппаРаскрытия) Тогда
			
			Показатель.ВидИтога=Перечисления.ВидыИтоговПоказателя.Сумма;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Показатель.ВидПоказателя					= Строка.ВидПоказателя;
	Показатель.ПриходРасход						= Строка.ПриходРасход;
	Показатель.СтатьяДвиженияДенежныхСредств	= Строка.СтатьяДвиженияДенежныхСредств;
	Показатель.СтатьяДоходовИРасходов			= Строка.СтатьяДоходовИРасходов;
	Показатель.СтатьяДвиженияРесурсов			= Строка.СтатьяДвиженияРесурсов;
	Показатель.ДействияПриАктуализации			= Строка.ДействияПриАктуализации;
	Показатель.СчетБД							= Строка.СчетБД;
	
	Показатель.Колонка							= Колонка;
	Показатель.ВидИтогаПоСчету					= ВидИтогаТек;
	
	Показатель.Предназначение					= ТекПредназначение;	
		
	Если Использование = 1 Тогда
		
		Показатель.ТипЗначения	= Строка.ТипЗначения;
		//Показатель.НеФинансовый	= Строка.НеФинансовый;
		Показатель.ВидКурса		= Строка.ВидКурса;		
		
		Если Показатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			Показатель.НеМасштабируется  = Строка.НеМасштабируется;
		КонецЕсли;
				
	Иначе
		
		Показатель.ТипЗначения	= Колонка.ТипЗначения;
		Показатель.НеФинансовый	= Колонка.НеФинансовый;
		Показатель.ВидКурса		= Колонка.ВидКурса;
				
		Если Показатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			Показатель.НеМасштабируется  = Колонка.НеМасштабируется;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Показатель.СчетБД) Тогда
		
		Показатель.ВидКурса=ОпределитьВидКурсаПоказателя(Показатель.СчетБД,Показатель.ВидИтогаПоСчету);
		
		Если НЕ ЗначениеЗаполнено(Показатель.ВидКурса) Тогда
			
			Показатель.НеФинансовый					= Истина;
			Показатель.ПересчитыватьВалютнуюСумму	= Ложь;
			Показатель.Валютный						= Ложь;
			
		Иначе
			
			Показатель.ПересчитыватьВалютнуюСумму		= Строка.СчетБД.ПересчитыватьВалютнуюСумму;
			Показатель.Валютный							= Строка.СчетБД.Валютный;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если УправлениеОтчетамиУХ.ПроверитьНаличиеАналитикиОрганизацииВГруппеРаскрытия(Показатель.ГруппаРаскрытия)
								  И Показатель.СпособОбработки = Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение Тогда
		Показатель.Внутригрупповой        = Строка.ВнутриГрупповой;
		
	КонецЕсли;
	
	Попытка
		
		НоваяСтрока=ТаблицаИзмененныхПоказателей.Добавить();
		НоваяСтрока.ОбъектДобавлен=Показатель.ЭтоНовый();
		
		Показатель.Записать();
		
		НоваяСтрока.Ссылка=Показатель.Ссылка;
		
		Если ТипЗнч(ОписаниеНовогоПоказателя)=Тип("Структура") Тогда
			
			ОписаниеНовогоПоказателя.Вставить("ИмяСтроки",		"Строка_" + СокрЛП(Строка.Код));
			ОписаниеНовогоПоказателя.Вставить("ИмяКолонки",		"Колонка_" + СокрЛП(Колонка.Код));
			ОписаниеНовогоПоказателя.Вставить("ИмяЯчейки",		Код);
			ОписаниеНовогоПоказателя.Вставить("ТипПоказателя",	ОбщегоНазначенияУХ.ПолучитьОписаниеТипаПоТипуПоказателя(Показатель.ТипЗначения));
			ОписаниеНовогоПоказателя.Вставить("ПоказательСсылка",		Показатель.Ссылка);
			ОписаниеНовогоПоказателя.Вставить("ВидОтчетаСсылка",		Показатель.Владелец);
			ОписаниеНовогоПоказателя.Вставить("ПоказательКод",			СокрЛП(Показатель.Код));
			ОписаниеНовогоПоказателя.Вставить("ВидОтчета",			СокрЛП(Показатель.Владелец.Код));

			
		КонецЕсли;
				
		Возврат Показатель.Ссылка;
		
	Исключение
		
		СтрокаШаблона = НСтр("ru = 'Не удалось записать показатель с кодом ""%1""!'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Код),,, СтатусСообщения.Важное);
		КонецЕсли;
	
		Возврат Неопределено;
		
	Конецпопытки;
	
КонецФункции // СформироватьПоказатель()

Функция СформироватьПоказательОтбор(ВидОтчета,Строка, Колонка, Использование=1, ОписаниеНовогоПоказателя=Неопределено,ПравилоОбработки=Неопределено,СтрокаСчет) Экспорт
			
	ВидИтогаТек=Колонка.ВидИтогаПоСчету;
				
	Если ЗначениеЗаполнено(ВидИтогаТек) Тогда
		
		ТекстОшибки="";
		
		ПроверитьПоказательОстатковОборотов(ВидОтчета,
						Строка.СчетБД,
						ВидИтогаТек,Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость,Справочники.ПоказателиОтчетов.ПустаяСсылка(),ТекстОшибки);
						
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	Иначе
		
		ТекПредназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость;
		
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеНовогоПоказателя)=Тип("СправочникСсылка.ПоказателиОтчетов") Тогда
		
		Показатель=ОписаниеНовогоПоказателя.ПолучитьОбъект();
		Показатель.Наименование = Строка.Наименование + " " + нрег(Колонка.Наименование);
		
	Иначе
		
		Показатель = Справочники.ПоказателиОтчетов.СоздатьЭлемент();
		Показатель.Владелец = ВидОтчета;
		Код = СокрЛП(Строка.Код) + "_" + СокрЛП(Колонка.Код);
		Показатель.Код = ОбщегоНазначенияУХ.ПолучитьВозможныйКодСправочника(Код,Метаданные.Справочники.ПоказателиОтчетов.ДлинаКода,"ПоказателиОтчетов",ВидОтчета);
		Показатель.Наименование = Строка.Наименование + " " + нрег(Колонка.Наименование);
		
		Показатель.Строка 							=Строка;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.ГруппаРаскрытия) Тогда	
		
		Показатель.ГруппаРаскрытия	= Строка.ГруппаРаскрытия;
		Показатель.ВидИтога			= Строка.ВидИтога;
		
	Иначе
		
		Показатель.ГруппаРаскрытия=ПолучитьГруппуРаскрытияДляСчета(ВидОтчета,Строка.СчетБД,,ВидИтогаТек,СтрокаСчет);
		
		Если ЗначениеЗаполнено(Показатель.ГруппаРаскрытия) Тогда
			
			Показатель.ВидИтога=Перечисления.ВидыИтоговПоказателя.Сумма;
			
		КонецЕсли;
			
	КонецЕсли;
		
	Показатель.ВидПоказателя					= Строка.ВидПоказателя;
	Показатель.ПриходРасход						= Строка.ПриходРасход;
	Показатель.СтатьяДвиженияДенежныхСредств	= Строка.СтатьяДвиженияДенежныхСредств;
	Показатель.СтатьяДоходовИРасходов			= Строка.СтатьяДоходовИРасходов;
	Показатель.СтатьяДвиженияРесурсов			= Строка.СтатьяДвиженияРесурсов;
	Показатель.ДействияПриАктуализации			= Строка.ДействияПриАктуализации;
	Показатель.СчетБД							= Строка.СчетБД;
	
	Показатель.Колонка							= Колонка;
	Показатель.ВидИтогаПоСчету					= ВидИтогаТек;
	
	Показатель.Предназначение					= ТекПредназначение;	
		
	Если Использование = 1 Тогда
		
		Показатель.ТипЗначения	= Строка.ТипЗначения;
		//Показатель.НеФинансовый	= Строка.НеФинансовый;
		Показатель.ВидКурса		= Строка.ВидКурса;		
		
		Если Показатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			Показатель.НеМасштабируется  = Строка.НеМасштабируется;
		КонецЕсли;
				
	Иначе
		
		Показатель.ТипЗначения	= Колонка.ТипЗначения;
		Показатель.НеФинансовый	= Колонка.НеФинансовый;
		Показатель.ВидКурса		= Колонка.ВидКурса;
				
		Если Показатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			Показатель.НеМасштабируется  = Колонка.НеМасштабируется;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Показатель.СчетБД) Тогда
		
		Показатель.ВидКурса=ОпределитьВидКурсаПоказателя(Показатель.СчетБД,Показатель.ВидИтогаПоСчету);
		
		Если НЕ ЗначениеЗаполнено(Показатель.ВидКурса) Тогда
			
			Показатель.НеФинансовый					= Истина;
			Показатель.ПересчитыватьВалютнуюСумму	= Ложь;
			Показатель.Валютный						= Ложь;
			
		Иначе
			
			Показатель.ПересчитыватьВалютнуюСумму		= Строка.СчетБД.ПересчитыватьВалютнуюСумму;
			Показатель.Валютный							= Строка.СчетБД.Валютный;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если УправлениеОтчетамиУХ.ПроверитьНаличиеАналитикиОрганизацииВГруппеРаскрытия(Показатель.ГруппаРаскрытия)
								  И Показатель.СпособОбработки = Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение Тогда
		Показатель.Внутригрупповой        = Строка.ВнутриГрупповой;
		
	КонецЕсли;
	
	Попытка
		
		Показатель.Записать();
				
		Если ТипЗнч(ОписаниеНовогоПоказателя)=Тип("Структура") Тогда
			
			ОписаниеНовогоПоказателя.Вставить("ИмяСтроки",		"Строка_" + СокрЛП(Строка.Код));
			ОписаниеНовогоПоказателя.Вставить("ИмяКолонки",		"Колонка_" + СокрЛП(Колонка.Код));
			ОписаниеНовогоПоказателя.Вставить("ИмяЯчейки",		Код);
			ОписаниеНовогоПоказателя.Вставить("ТипПоказателя",	ОбщегоНазначенияУХ.ПолучитьОписаниеТипаПоТипуПоказателя(Показатель.ТипЗначения));
			ОписаниеНовогоПоказателя.Вставить("ПоказательСсылка",		Показатель.Ссылка);
			ОписаниеНовогоПоказателя.Вставить("ВидОтчетаСсылка",		Показатель.Владелец);
			ОписаниеНовогоПоказателя.Вставить("ПоказательКод",			СокрЛП(Показатель.Код));
			ОписаниеНовогоПоказателя.Вставить("ВидОтчета",			СокрЛП(Показатель.Владелец.Код));

			
		КонецЕсли;
				
		Возврат Показатель.Ссылка;
		
	Исключение
		
		СтрокаШаблона = НСтр("ru = 'Не удалось записать показатель с кодом ""%1""!'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Код),,, СтатусСообщения.Важное);
		КонецЕсли;
	
		Возврат Неопределено;
		
	Конецпопытки;
	
КонецФункции // СформироватьПоказатель()


Процедура СформироватьФормулуПоказателяОСВ(НазначениеРасчетов,ПотребительРасчета) Экспорт
	
	ВидОтчета=НазначениеРасчетов.Владелец;
	
	Если НЕ ВидОтчета.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость
		И ПотребительРасчета.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если (ПотребительРасчета.СчетБД.ГруппирующийСчет И (НЕ ВидОтчета.НеВыводитьГруппирующиеСчета)) ИЛИ ПотребительРасчета.СчетБД.Код="ИТОГО" Тогда
		
		СоздатьФормулуСуммированияПодчиненныхОСВ(НазначениеРасчетов,ПотребительРасчета);	
						
	КонецЕсли;
	
КонецПроцедуры // СформироватьФормулуПоказателяОСВ()

Процедура СоздатьФормулуВыборкиДанныхОСВ(НазначениеРасчетов,ПотребительРасчета)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсточникиДанныхДляРасчетов.Код
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &НазначениеРасчетов
	|	И ИсточникиДанныхДляРасчетов.ПотребительРасчета = &ПотребительРасчета
	|	И ИсточникиДанныхДляРасчетов.Счет = &Счет
	|	И ИсточникиДанныхДляРасчетов.ВидИтогаОСВ = &ВидИтогаОСВ";
	
	Запрос.УстановитьПараметр("НазначениеРасчетов",	НазначениеРасчетов);
	Запрос.УстановитьПараметр("ПотребительРасчета",	ПотребительРасчета);
	Запрос.УстановитьПараметр("Счет",				ПотребительРасчета.СчетБД);
	Запрос.УстановитьПараметр("ВидИтогаОСВ",		ПотребительРасчета.ВидИтогаПоСчету);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		СтруктураПараметров=Новый Структура("НазначениеРасчетов,ПотребительРасчета,ТекстПроцедуры,ПроизвольныйКод",НазначениеРасчетов,ПотребительРасчета,"["+СокрЛП(Результат.Код)+"]",Ложь);
		
	Иначе
		
		ОбъектИсточник=Справочники.ИсточникиДанныхДляРасчетов.СоздатьЭлемент();
		ОбъектИсточник.НазначениеРасчетов=НазначениеРасчетов;
		ОбъектИсточник.ПотребительРасчета=ПотребительРасчета;
		ОбъектИсточник.СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета;
		ОбъектИсточник.ЗаполнитьНачальныеНастройки();
		ОбъектИсточник.ЗаполнитьИсточникДляОстатковИОборотов();
		ОбъектИсточник.СохранитьНастройкиОперанда();
		
		ОбъектИсточник.Записать();
		
		СтруктураПараметров=Новый Структура("НазначениеРасчетов,ПотребительРасчета,ТекстПроцедуры,ПроизвольныйКод",НазначениеРасчетов,ПотребительРасчета,"["+СокрЛП(ОбъектИсточник.Код)+"]",Ложь);
		
	КонецЕсли;
	
	Если НЕ УправлениеОтчетамиУХ.ПроверитьФормулуПоказателя(СтруктураПараметров) Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеОтчетамиУХ.ЗаписатьПроцедуруРасчета(СтруктураПараметров);		
	
КонецПроцедуры // СоздатьФормулуВыборкиДанныхОСВ()

Процедура СоздатьФормулуСуммированияПодчиненныхОСВ(НазначениеРасчетов,ПотребительРасчета) Экспорт
		
	ЗапросПодчиненные=Новый Запрос;
	ЗапросПодчиненные.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Код,
	|	ПоказателиОтчетов.Ссылка КАК ПоказательОтбор
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	НЕ ПоказателиОтчетов.ПометкаУдаления
	|	И ПоказателиОтчетов.Владелец = &ВидОтчета
	|	И ПоказателиОтчетов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость)
	|	И НЕ ЕСТЬNULL(ПоказателиОтчетов.СчетБД.Забалансовый, ИСТИНА)";
	
	Если НЕ ПотребительРасчета.Владелец.НеВыводитьГруппирующиеСчета Тогда
		
		ЗапросПодчиненные.Текст=ЗапросПодчиненные.Текст+"
		|	И ПоказателиОтчетов.СчетБД.Родитель = &СчетРодитель";
		
	КонецЕсли;
		
	Если ПотребительРасчета.СчетБД.Код="ИТОГО" Тогда
		ЗапросПодчиненные.Текст=ЗапросПодчиненные.Текст+"
		|	И НЕ ЕСТЬNULL(ПоказателиОтчетов.СчетБД.Забалансовый, ИСТИНА)";
	КонецЕсли;
	
	ЗапросПодчиненные.Текст=ЗапросПодчиненные.Текст+"
	|	И НЕ ПоказателиОтчетов.Ссылка = &Ссылка
	|	И ПоказателиОтчетов.Колонка = &Колонка";
	
	ЗапросПодчиненные.УстановитьПараметр("ВидОтчета",		ПотребительРасчета.Владелец);
	ЗапросПодчиненные.УстановитьПараметр("НазначениеРасчетов",НазначениеРасчетов);
	ЗапросПодчиненные.УстановитьПараметр("Ссылка",ПотребительРасчета);
	ЗапросПодчиненные.УстановитьПараметр("СчетРодитель",	?(ПотребительРасчета.СчетБД.Код="ИТОГО",Справочники.СчетаБД.ПустаяСсылка(),ПотребительРасчета.СчетБД));
	ЗапросПодчиненные.УстановитьПараметр("Колонка",	ПотребительРасчета.Колонка);

	ТекстПроцедуры="";
	
	Результат=ЗапросПодчиненные.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ТекстПроцедуры=ТекстПроцедуры+" + {"+СокрЛП(Результат.Код)+"}";
		
	КонецЦикла;
	
	ТекстПроцедуры=Сред(ТекстПроцедуры,3);
	
	Если Не ТекстПроцедуры="" Тогда
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ТекстПроцедуры",		ТекстПроцедуры);
		СтруктураДанных.Вставить("ТипЯчейки",			"Показатель");
		СтруктураДанных.Вставить("Владелец",			НазначениеРасчетов.Владелец);
		СтруктураДанных.Вставить("НазначениеРасчетов",	НазначениеРасчетов);
		СтруктураДанных.Вставить("ПотребительРасчета",	ПотребительРасчета);
		СтруктураДанных.Вставить("ПроизвольныйКод",		Ложь);
		СтруктураДанных.Вставить("СпособИспользования",	Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета);
		
		Если УправлениеОтчетамиУХ.ОбработатьТекстУпрощеннойФормулы(СтруктураДанных,Ложь,Ложь) Тогда		
			
			УправлениеОтчетамиУХ.ЗаписатьПроцедуруРасчета(СтруктураДанных,Ложь);
				
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры // ЗаписатьФормулуСуммированияПодчиненных()

Функция ВернутьСписокПравилОбработки(Владелец, ПравилоОбработки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаОбработки.Ссылка,
	|	ПравилаОбработки.Представление
	|ИЗ
	|	Справочник.ПравилаОбработки КАК ПравилаОбработки
	|ГДЕ
	|	ПравилаОбработки.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокПравилОбработки = Новый СписокЗначений;
	
	ПравилоОбработкиПоУмолчанию = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки, Владелец, Неопределено, Неопределено, Неопределено);
	
	ПравилоОбработки = ПравилоОбработкиПоУмолчанию;
	
	Картинка = БиблиотекаКартинок.ПравилоОбработки;
	
	Пока Выборка.Следующий() Цикл
		СписокПравилОбработки.Добавить(Выборка.Ссылка, Выборка.Представление,ПравилоОбработкиПоУмолчанию = Выборка.Ссылка,?(ПравилоОбработкиПоУмолчанию = Выборка.Ссылка, Картинка, Неопределено));
	КонецЦикла;
	
	Возврат СписокПравилОбработки;
	
КонецФункции

Функция ПолучитьТаблицыАналитикДляСчета(СчетБД) Экспорт
	
	ТаблицаСальдо=СчетБД.ВидыСубконто.ВыгрузитьКолонки();
	ТаблицаОбороты=ТаблицаСальдо.СкопироватьКолонки();
	
	ПрименениеПоИтогу=Ложь;
	
	Для Каждого СтрСубконто ИЗ СчетБД.ВидыСубконто Цикл
		
		Если НЕ СтрСубконто.ТолькоСальдо Тогда
			
			НоваяСтрока=ТаблицаОбороты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрСубконто);
			
		Иначе
			
			ПрименениеПоИтогу=Истина;
			
		КонецЕсли;
		
		Если НЕ СтрСубконто.ТолькоОбороты Тогда
			
			НоваяСтрока=ТаблицаСальдо.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрСубконто);
			
		Иначе
			
			ПрименениеПоИтогу=Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("ТаблицаСальдо,ТаблицаОбороты,ПрименениеПоИтогу",ТаблицаСальдо,ТаблицаОбороты,ПрименениеПоИтогу);
			
КонецФункции // ПолучитьТаблицыАналитикДляСчета()

Функция ПолучитьВидОтчетаОСВ(ПланСчетовБД = Неопределено, СчетБД = Неопределено, НеФормироватьАналитическиеРаскрытия = Неопределено) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыОтчетов.Ссылка
	|ИЗ
	|	Справочник.ВидыОтчетов КАК ВидыОтчетов
	|ГДЕ
	|	ВидыОтчетов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость)
	|	И ВидыОтчетов.ИспользоватьПоУмолчанию";
	
	Если ЗначениеЗаполнено(ПланСчетовБД) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ВидыОтчетов.ПланСчетов=&ПланСчетов";
		
		Запрос.УстановитьПараметр("ПланСчетов", ПланСчетовБД);
		
	ИначеЕсли ЗначениеЗаполнено(СчетБД) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ВидыОтчетов.ПланСчетов=&ПланСчетов";
		
		Запрос.УстановитьПараметр("ПланСчетов", СчетБД.Владелец);
		
	КонецЕсли;
	
	Если НеФормироватьАналитическиеРаскрытия = Истина Тогда
		Запрос.Текст=Запрос.Текст+"
		|И ВидыОтчетов.НеФормироватьАналитическиеРаскрытия";
	ИначеЕсли НеФормироватьАналитическиеРаскрытия = Ложь Тогда		
		Запрос.Текст=Запрос.Текст+"
		|И НЕ ВидыОтчетов.НеФормироватьАналитическиеРаскрытия";
	КонецЕсли;
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Возврат Результат.Ссылка;
		
	Иначе
		
		Возврат Справочники.ВидыОтчетов.ПустаяСсылка();
		
	КонецЕсли;
			
КонецФункции // ПолучитьВидОтчетаОСВ()

Функция ПолучитьПоказательОСВ(СчетБД,ВидИтогаПоСчету=Неопределено,КоррСчетБД=Неопределено,НазначениеРасчетов=Неопределено) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоказателиОтчетов.Ссылка
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.СчетБД = &СчетБД";
	
	Если (НЕ НазначениеРасчетов=Неопределено) И ЗначениеЗаполнено(НазначениеРасчетов.ВидОтчетаОСВ) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|	И ПоказателиОтчетов.Владелец=&ВидОтчетаОСВ";	
		Запрос.УстановитьПараметр("ВидОтчетаОСВ",НазначениеРасчетов.ВидОтчетаОСВ);
		
	Иначе
		
		Запрос.Текст=Запрос.Текст+"
		|	И ПоказателиОтчетов.Владелец.ИспользоватьПоУмолчанию";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидИтогаПоСчету) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ПоказателиОтчетов.ВидИтогаПоСчету=&ВидИтогаПоСчету";
		
		Запрос.УстановитьПараметр("ВидИтогаПоСчету",ВидИтогаПоСчету);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КоррСчетБД) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ПоказателиОтчетов.КоррСчетБД=&КоррСчетБД";
		
		Запрос.УстановитьПараметр("КоррСчетБД",КоррСчетБД);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СчетБД",СчетБД);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Возврат Результат.Ссылка;
		
	Иначе
		
		Возврат Справочники.ПоказателиОтчетов.ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции // ПолучитьПоказательОСВ()

Функция ОпределитьВидКурсаПоказателя(СчетБД,ВидИтогаПоСчету) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СчетБД) Тогда
		
		Возврат Перечисления.ВидыКурсов.ПустаяСсылка();

	КонецЕсли;	
			
	ВидКурсаСчета=СчетБД.ВидКурса;
	
	Если (НЕ ЗначениеЗаполнено(ВидКурсаСчета)) ИЛИ ВидКурсаСчета=Перечисления.ВидыКурсовДляСчетов.КурсНаОтчетнуюДату Тогда
		
		Если ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СНД
			ИЛИ ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СНК Тогда
			
			Возврат Перечисления.ВидыКурсов.КурсНаНачалоПериода;
			
		ИначеЕсли  ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СКД
			ИЛИ ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СКК Тогда
			
			Возврат Перечисления.ВидыКурсов.КурсНаКонецПериода;
			
		Иначе
			
			Возврат Перечисления.ВидыКурсов.СреднийКурсЗаПериод;
			
		КонецЕсли;
		
	ИначеЕсли ВидКурсаСчета=Перечисления.ВидыКурсовДляСчетов.СреднийКурсЗаПериод Тогда

		Возврат Перечисления.ВидыКурсов.СреднийКурсЗаПериод;
		
	ИначеЕсли ВидКурсаСчета=Перечисления.ВидыКурсовДляСчетов.КурсНаМоментНачисления Тогда
		
		Возврат Перечисления.ВидыКурсов.КурсНаМоментНачисления;
				
	ИначеЕсли ВидКурсаСчета=Перечисления.ВидыКурсовДляСчетов.СреднийКурсЗаПериодМСФО Тогда
		
		Возврат Перечисления.ВидыКурсов.СреднийКурсЗаПериодМСФО;
		
	ИначеЕсли ВидКурсаСчета=Перечисления.ВидыКурсовДляСчетов.СреднийКурсЗаПредыдущийПериод Тогда
		
		Возврат Перечисления.ВидыКурсов.СреднийКурсЗаПредыдущийПериод;
		
	Иначе
		
		Возврат Перечисления.ВидыКурсов.ПустаяСсылка();
		
	КонецЕсли;
			
КонецФункции // ОпределитьВидКурсаПоказателя()

Функция ЕстьПоказателиБюджетов(ВидОтчета) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоказателиОтчетов.Ссылка
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &ВидОтчета
	|	И (ПоказателиОтчетов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов)
	|			ИЛИ ПоказателиОтчетов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств)
	|			ИЛИ ПоказателиОтчетов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов))
	|	И НЕ ПоказателиОтчетов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	
	Результат=Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
			
КонецФункции // ЕстьПоказателиБюджетов()

Функция ЭтоДанныеБюджета(Предназначение) Экспорт
	
	Возврат (Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств
			ИЛИ Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов
			ИЛИ Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов);
		
КонецФункции // ЭтоДанныеБюджета() 
		
Функция ПроверитьСтрокуПоказательБюджета(Объект) Экспорт
	
	Если Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств Тогда
		
		РеквизитСтатья="СтатьяДвиженияДенежныхСредств";
		Объект.СтатьяДоходовИРасходов="";
		Объект.СтатьяДвиженияРесурсов="";
		
	ИначеЕсли Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов Тогда
		
		РеквизитСтатья="СтатьяДоходовИРасходов";
		Объект.СтатьяДвиженияДенежныхСредств="";
		Объект.СтатьяДвиженияРесурсов="";
		
	ИначеЕсли Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов Тогда
		
		РеквизитСтатья="СтатьяДвиженияРесурсов";
		Объект.СтатьяДвиженияДенежныхСредств="";
		Объект.СтатьяДоходовИРасходов="";
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
		
	Возврат Истина;
		
КонецФункции // ПроверитьСтрокуПоказательБюджета()

Функция ПроверитьУникальностьКонтроляЛимитов(Объект,ТекстОшибки="") Экспорт
	
	Если Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств Тогда
		
		РеквизитСтатья="СтатьяДвиженияДенежныхСредств";
				
	ИначеЕсли Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов Тогда
		
		РеквизитСтатья="СтатьяДоходовИРасходов";
				
	ИначеЕсли Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов Тогда
		
		РеквизитСтатья="СтатьяДвиженияРесурсов";
		
	Иначе
		
		Возврат Ложь;
						
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект[РеквизитСтатья]) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции // ПроверитьУникальностьКонтроляЛимитов()

///////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СОЗДАНИЯ ПОКАЗАТЕЛЕЙ ПО СТРУКТУРЕ СПРАВОЧНИКА

Функция ОбработатьИзменениеКолонок(ВидОтчета,ТабСоставКолонок,ЕстьИзменениеКолонок)
	
	Для Каждого Строка ИЗ ТабСоставКолонок Цикл
		
		Если ЗначениеЗаполнено(Строка.Ссылка) Тогда
			
			Если Строка.ДанныеИзменены ИЛИ Строка.ПорядковыйНомер<>ТабСоставКолонок.Индекс(Строка)+1 Тогда
				
				КолонкаОбъект=Строка.Ссылка.ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств(КолонкаОбъект,Строка,,"Ссылка");
				КолонкаОбъект.ПорядковыйНомер=ТабСоставКолонок.Индекс(Строка)+1;
				
				Если КолонкаОбъект.ПометкаУдаления Тогда
					
					КолонкаОбъект.ОбменДанными.Загрузка=Истина;
					
				КонецЕсли;
				
				Попытка
					
					КолонкаОбъект.Записать();
					ЕстьИзменениеКолонок=Истина;
					
				Исключение
					
					СтрокаШаблона = НСтр("ru = 'Не удалось изменить реквизиты колонки %1:
					|%2'");
					
					Если Не ПустаяСтрока(СтрокаШаблона) тогда
						ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, КолонкаОбъект.Наименование, 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),,, СтатусСообщения.Важное);
					КонецЕсли;
					
					Возврат Ложь;
					
				КонецПопытки;
				
			КонецЕсли;
			
		Иначе
			
			КолонкаОбъект=Справочники.КолонкиОтчетов.СоздатьЭлемент();
			КолонкаОбъект.Владелец=ВидОтчета;
			ЗаполнитьЗначенияСвойств(КолонкаОбъект,Строка,,"Ссылка");
			КолонкаОбъект.Код = ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(КолонкаОбъект.Наименование,,"КолонкиОтчетов",ВидОтчета);
			КолонкаОбъект.ПорядковыйНомер=ТабСоставКолонок.Индекс(Строка)+1;
			
			Попытка
				
				КолонкаОбъект.Записать();
				ЕстьИзменениеКолонок=Истина;
				
			Исключение
				
				СтрокаШаблона = НСтр("ru = 'Не удалось создать колонку %1:
				|%2'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, КолонкаОбъект.Наименование, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),,, СтатусСообщения.Важное);
				КонецЕсли;
				
				Возврат Ложь;
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;		
	
КонецФункции // ОбработатьИзменениеКолонок()

// Получает таблицу элементов справочника СправочникБдВход в иерархии элемента ТекЭлементВход.
// Когда ТекЭлементВход - Неопределено, получает все элементы.
Функция ПолучитьТаблицуЭлементовСправочникаБд(СправочникБдВход, ТекЭлементВход = Неопределено) Экспорт
	РезультатФункции = Новый ТаблицаЗначений;	
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СправочникБД.Ссылка,
	|	СправочникБД.Наименование,
	|	СправочникБД.ПометкаУдаления,";
	
	Если СправочникБдВход.ИерархическийСправочник Тогда
		Запрос.Текст=Запрос.Текст+"	
		|	ЕстьNull(СправочникБД.Родитель.ПометкаУдаления,Ложь) КАК ПометкаУдаленияРодитель,";
		
	Иначе
		
		Запрос.Текст=Запрос.Текст+"	
		|	Ложь КАК ПометкаУдаленияРодитель,";
		
	КонецЕсли;
		
	Если СправочникБдВход.Реквизиты.Найти("Код","Имя")=Неопределено Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|	Неопределено КАК Код";
		
	Иначе
		
		Запрос.Текст=Запрос.Текст+"
		|	СправочникБД.Код КАК Код";
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|ИЗ
	|	Справочник."+СправочникБдВход.Наименование+" КАК СправочникБД";
	
	Если ЗначениеЗаполнено(ТекЭлементВход) Тогда
		
		Если СправочникБдВход.ИерархическийСправочник Тогда
			Запрос.Текст=Запрос.Текст+"
			|ГДЕ
			|	СправочникБД.Ссылка В ИЕРАРХИИ(&ТекЭлемент) И СправочникБД.Ссылка <> &ТекЭлемент ";
		Иначе
			Запрос.Текст=Запрос.Текст+"
			|ГДЕ
			|	СправочникБД.Ссылка=&ТекЭлемент";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТекЭлемент", ТекЭлементВход);
		
	КонецЕсли;
	
	Если СправочникБдВход.ИерархическийСправочник Тогда
		
		Если СправочникБдВход.Реквизиты.Найти("Код","Имя")=Неопределено Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|
			|УПОРЯДОЧИТЬ ПО
			|	СправочникБД.Наименование ИЕРАРХИЯ";
			
		Иначе
			
			Запрос.Текст=Запрос.Текст+"
			|
			|УПОРЯДОЧИТЬ ПО
			|	СправочникБД.Код ИЕРАРХИЯ";
			
		КонецЕсли;
			
	КонецЕсли;
	
	РезультатФункции = Запрос.Выполнить().Выгрузить();
	Возврат РезультатФункции;
КонецФункции		// ПолучитьТаблицуЭлементовСправочникаБд()

Процедура СоздатьНедостающиеПоказателиСправочника(СправочникБД,ВидОтчетаСправочник,ТабСоставКолонок,ТекЭлемент=Неопределено) Экспорт
	
	МассивНовыхСтрок=Новый Массив;
	ЕстьИзменениеКолонок=Ложь;
	
	Если НЕ (ТабСоставКолонок.Найти(Истина,"ДанныеИзменены")=Неопределено ИЛИ ОбработатьИзменениеКолонок(ВидОтчетаСправочник,ТабСоставКолонок,ЕстьИзменениеКолонок)) Тогда
			
		Возврат;	
		
	КонецЕсли;
		
	МассивНовыхСтрок=Новый Массив;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СправочникБД.Ссылка,
	|	СправочникБД.Наименование,
	|	СправочникБД.ПометкаУдаления,";
	
	Если СправочникБД.ИерархическийСправочник Тогда
		Запрос.Текст=Запрос.Текст+"	
		|	ЕстьNull(СправочникБД.Родитель.ПометкаУдаления,Ложь) КАК ПометкаУдаленияРодитель,";
		
	Иначе
		
		Запрос.Текст=Запрос.Текст+"	
		|	Ложь КАК ПометкаУдаленияРодитель,";
		
	КонецЕсли;
		
	Если СправочникБД.Реквизиты.Найти("Код","Имя")=Неопределено Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|	Неопределено КАК Код";
		
	Иначе
		
		Запрос.Текст=Запрос.Текст+"
		|	СправочникБД.Код КАК Код";
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|ИЗ
	|	Справочник."+СправочникБД.Наименование+" КАК СправочникБД";
	
	Если ЗначениеЗаполнено(ТекЭлемент) Тогда
		
		Если СправочникБД.ИерархическийСправочник Тогда
			Запрос.Текст=Запрос.Текст+"
			|ГДЕ
			|	СправочникБД.Ссылка В ИЕРАРХИИ(&ТекЭлемент) И СправочникБД.Ссылка <> &ТекЭлемент ";
		Иначе
			Запрос.Текст=Запрос.Текст+"
			|ГДЕ
			|	СправочникБД.Ссылка=&ТекЭлемент";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТекЭлемент",ТекЭлемент);
		
	КонецЕсли;
	
	Если СправочникБД.ИерархическийСправочник Тогда
		
		Если СправочникБД.Реквизиты.Найти("Код","Имя")=Неопределено Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|
			|УПОРЯДОЧИТЬ ПО
			|	СправочникБД.Наименование ИЕРАРХИЯ";
			
		Иначе
			
			Запрос.Текст=Запрос.Текст+"
			|
			|УПОРЯДОЧИТЬ ПО
			|	СправочникБД.Код ИЕРАРХИЯ";
			
		КонецЕсли;
			
	КонецЕсли;
	
	ТаблицаЭлементов=Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрЭлемент ИЗ ТаблицаЭлементов Цикл
		
		ТекСтрока=СформироватьСтрокуПоЭлементу(ВидОтчетаСправочник,СтрЭлемент,ТаблицаЭлементов.Индекс(СтрЭлемент)+1);
		
		Если Не (ТекСтрока=Неопределено ИЛИ ТекСтрока.ПометкаУдаления) Тогда
			
			МассивНовыхСтрок.Добавить(ТекСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьИзменениеИерархии=Ложь;
	
	Если СправочникБД.ИерархическийСправочник Тогда
		
		ОбновитьИерархиюСтрокПоСправочнику(ВидОтчетаСправочник,ЕстьИзменениеИерархии);
		
	КонецЕсли;
	
	ТаблицаИзмененныхПоказателей=Новый ТаблицаЗначений;
	ТаблицаИзмененныхПоказателей.Колонки.Добавить("Ссылка");
	ТаблицаИзмененныхПоказателей.Колонки.Добавить("ОбъектДобавлен",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТаблицаИзмененныхПоказателей.Колонки.Добавить("ПометкаУдаления",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	Если МассивНовыхСтрок.Количество()>0 ИЛИ ЕстьИзменениеКолонок Тогда
		
		ПравилоОбработки = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки, ВидОтчетаСправочник);
		СформироватьПоказателиОтчета(ВидОтчетаСправочник,?(МассивНовыхСтрок.Количество()=0,Неопределено,МассивНовыхСтрок),,ПравилоОбработки,,2,ЭтоДанныеБюджета(ВидОтчетаСправочник.Предназначение),ТаблицаИзмененныхПоказателей);
		
	КонецЕсли;
	
	Если МассивНовыхСтрок.Количество()>0 ИЛИ ЕстьИзменениеКолонок ИЛИ ЕстьИзменениеИерархии Тогда
		
		 ОбновитьБланкОтчетаПоУмолчанию(ВидОтчетаСправочник,Ложь);
		 
	КонецЕсли;
	
	Если ЕстьИзменениеКолонок ИЛИ ЕстьИзменениеИерархии Тогда
		
		ОбновитьФормулыСуммированияПодчиненных(ВидОтчетаСправочник,ПравилоОбработки);
			
	КонецЕсли;
						
КонецПроцедуры // СформироватьПоказателиОСВ()

Процедура ОбновитьИерархиюСтрокПоСправочнику(ВидОтчета,ЕстьИзменениеИерархии) Экспорт 

	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СтрокиОтчетовИсходные.Ссылка КАК ИсходнаяСтрока,
	|	СтрокиОтчетовРодитель.Ссылка КАК НовыйРодитель,
	|	СтрокиОтчетовИсходные.Родитель КАК ТекущийРодитель
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетовИсходные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиОтчетов КАК СтрокиОтчетовРодитель
	|		ПО (СтрокиОтчетовИсходные.Владелец = &ВидОтчета)
	|			И (СтрокиОтчетовРодитель.Владелец = &ВидОтчета)
	|			И СтрокиОтчетовИсходные.ЭлементСправочникаБД.Родитель = СтрокиОтчетовРодитель.ЭлементСправочникаБД";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Если НЕ Результат.ТекущийРодитель=Результат.НовыйРодитель Тогда
			
			СтрокаОбъект=Результат.ИсходнаяСтрока.ПолучитьОбъект();
			СтрокаОбъект.Родитель=Результат.НовыйРодитель;
			
			Попытка
				
				СтрокаОбъект.ОбменДанными.Загрузка=Истина;
				СтрокаОбъект.Записать();
				ЕстьИзменениеИерархии=Истина;
				
			Исключение
				
				СтрокаШаблона = НСтр("ru = 'Не удалось изменить родителя для строки %1:
				|%2'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, СтрокаОбъект.Наименование, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),,, СтатусСообщения.Важное);
				КонецЕсли;
								
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьИзменениеИерархии Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиОтчетов.Родитель КАК Родитель
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &ВидОтчета
	|	И НЕ СтрокиОтчетов.Родитель.СуммироватьПодчиненные";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СтрокаОбъект=Результат.Родитель.ПолучитьОбъект();
		СтрокаОбъект.СуммироватьПодчиненные=Истина;
		
		Попытка
			
			СтрокаОбъект.ОбменДанными.Загрузка=Истина;
			СтрокаОбъект.Записать();
			
		Исключение
			
			СтрокаШаблона = НСтр("ru = 'Не удалось изменить реквизит ""Суммировать подчиненные"" для строки %1:
			|%2'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, СтрокаОбъект.Наименование, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),,, СтатусСообщения.Важное);
			КонецЕсли;
			
		КонецПопытки;		
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьИерархиюСтрокПоСправочнику() 

Процедура ОбновитьФормулыСуммированияПодчиненных(ВидОтчета,ПравилоОбработки=Неопределено) Экспорт
	
	// Сформируем формулы расчета для показателей, получаемых суммированием подчиненных строк
	
	Если ПравилоОбработки=Неопределено Тогда
		
		ПравилоОбработки = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки, ВидОтчета);

		Если Не ЗначениеЗаполнено(ПравилоОбработки) Тогда
			
			СтрокаШаблона = НСтр("ru = 'Не удалось определить правило расчета по умолчанию для вида отчета %1.
			|Формулы расчета по иерархии строк не сформированы.'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВидОтчета),,, СтатусСообщения.Важное);
			КонецЕсли;
						
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Показатель,
	|	ПоказателиОтчетов.Колонка,
	|	ПоказателиОтчетов.Строка
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &ВидОтчета
	|	И НЕ ПоказателиОтчетов.ПометкаУдаления
	|	И ПоказателиОтчетов.Строка.СуммироватьПодчиненные
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоказателиОтчетов.Строка.ПорядковыйНомер";
				 			 
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ЗаписатьФормулуСуммированияПодчиненных(Результат,ВидОтчета,ПравилоОбработки);
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьФормулыСуммированияПодчиненных()

Процедура ЗаписатьФормулуСуммированияПодчиненных(СтрПоказатель,ВидОтчета,ПравилоОбработки)
		
	ЗапросПодчиненные=Новый Запрос;
	ЗапросПодчиненные.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Код
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Колонка = &Колонка
	|	И НЕ ПоказателиОтчетов.ПометкаУдаления
	|	И ПоказателиОтчетов.Строка.Родитель = &Строка
	|	И ПоказателиОтчетов.Владелец = &ВидОтчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоказателиОтчетов.Строка.ПорядковыйНомер";
	
	ЗапросПодчиненные.УстановитьПараметр("ВидОтчета",ВидОтчета);
	ЗапросПодчиненные.УстановитьПараметр("Колонка",СтрПоказатель.Колонка);
	ЗапросПодчиненные.УстановитьПараметр("Строка",СтрПоказатель.Строка);
	
	ТекстПроцедуры="";
	
	Результат=ЗапросПодчиненные.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ТекстПроцедуры=ТекстПроцедуры+" + {"+СокрЛП(Результат.Код)+"}";
		
	КонецЦикла;
	
	ТекстПроцедуры=Сред(ТекстПроцедуры,3);
	
	Если Не ТекстПроцедуры="" Тогда
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ТекстПроцедуры",		ТекстПроцедуры);
		СтруктураДанных.Вставить("ТипЯчейки",			"Показатель");
		СтруктураДанных.Вставить("Владелец",			ВидОтчета);
		СтруктураДанных.Вставить("НазначениеРасчетов",	ПравилоОбработки);
		СтруктураДанных.Вставить("ПотребительРасчета",	СтрПоказатель.Показатель);
		СтруктураДанных.Вставить("ПроизвольныйКод",		Ложь);
		СтруктураДанных.Вставить("СпособИспользования",	Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета);
		
		Если УправлениеОтчетамиУХ.ОбработатьТекстУпрощеннойФормулы(СтруктураДанных) Тогда		
			
			УправлениеОтчетамиУХ.ЗаписатьПроцедуруРасчета(СтруктураДанных);
				
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры // ЗаписатьФормулуСуммированияПодчиненных()

Функция СформироватьСтрокуПоЭлементу(ВидОтчета,Элемент,НомерСтроки) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СтрокиОтчетов.Ссылка
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &Владелец
	|	И СтрокиОтчетов.ЭлементСправочникаБД = &ЭлементСправочникаБД";
	
	Запрос.УстановитьПараметр("Владелец",ВидОтчета);
	Запрос.УстановитьПараметр("ЭлементСправочникаБД",Элемент.Ссылка);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		СтрокаОбъект=Результат.Ссылка.ПолучитьОбъект();
		
		ПроектКода=?(ЗначениеЗаполнено(Элемент.Код),"С_"+Элемент.Код,Элемент.Наименование);
		ПроектНаименования=Элемент.Наименование;
		
		Если НЕ СокрЛП(СтрокаОбъект.Код)=ПроектКода Тогда
			
			СтрокаОбъект.Код=ПроектКода;
			СтрокаОбъект.Наименование=ПроектНаименования;
			
		КонецЕсли;
		
		Если НЕ СтрокаОбъект.ПометкаУдаления=Элемент.ПометкаУдаления Тогда
			
			СтрокаОбъект.ПометкаУдаления=Элемент.ПометкаУдаления;
			
		КонецЕсли;
				
	ИначеЕсли НЕ (Элемент.ПометкаУдаления ИЛИ Элемент.ПометкаУдаленияРодитель) Тогда
		
		СтрокаОбъект=Справочники.СтрокиОтчетов.СоздатьЭлемент();
		СтрокаОбъект.Владелец=ВидОтчета;
		СтрокаОбъект.ЭлементСправочникаБД=Элемент.Ссылка;
		
		ПроектКода=?(ЗначениеЗаполнено(Элемент.Код),"С_"+Элемент.Код,Элемент.Наименование);

		СтрокаОбъект.Код=ОбщегоНазначенияУХ.ПолучитьВозможныйКодСправочника(ПроектКода, СтрокаОбъект.Метаданные().ДлинаКода,"СтрокиОтчетов", СтрокаОбъект.Владелец);	
		СтрокаОбъект.Наименование=Элемент.Наименование;
		СтрокаОбъект.Предназначение=ВидОтчета.Предназначение;
		
		Если СтрокаОбъект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств Тогда
			
			СтрокаОбъект.СтатьяДвиженияДенежныхСредств=Элемент.Ссылка;
			СтрокаОбъект.ПриходРасход=?(ЗначениеЗаполнено(Элемент.Ссылка.ПриходРасход),Элемент.Ссылка.ПриходРасход,Перечисления.ВидыДвиженийПриходРасход.Приход);
			
		ИначеЕсли СтрокаОбъект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов Тогда
			
			СтрокаОбъект.СтатьяДоходовИРасходов=Элемент.Ссылка;
			СтрокаОбъект.ПриходРасход=?(ЗначениеЗаполнено(Элемент.Ссылка.ПриходРасход),Элемент.Ссылка.ПриходРасход,Перечисления.ВидыДвиженийПриходРасход.Приход);
			
		ИначеЕсли СтрокаОбъект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов Тогда
			
			СтрокаОбъект.СтатьяДвиженияРесурсов=Элемент.Ссылка;
			СтрокаОбъект.ПриходРасход=?(ЗначениеЗаполнено(Элемент.Ссылка.ПриходРасход),Элемент.Ссылка.ПриходРасход,Перечисления.ВидыДвиженийПриходРасход.Приход);
			
		КонецЕсли;
		
	Иначе
		
		Возврат Неопределено;
			
	КонецЕсли;
	
	Если ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("ГруппаРаскрытия",Элемент.Ссылка) Тогда
		
		СтрокаОбъект.ГруппаРаскрытия=ПолучитьГруппуРаскрытияДляСтатьи(ВидОтчета,Элемент.Ссылка);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаОбъект.ГруппаРаскрытия) Тогда
		
		СтрокаОбъект.ВидИтога=Перечисления.ВидыИтоговПоказателя.Сумма;
		
	Иначе
		
		СтрокаОбъект.ВидИтога="";
		
	КонецЕсли;
		
	СтрокаОбъект.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число;	
	СтрокаОбъект.ПорядковыйНомер=НомерСтроки;
	
	Попытка
		
		Если СтрокаОбъект.ПометкаУдаления Тогда
			
			СтрокаОбъект.ОбменДанными.Загрузка=Истина;
			
		КонецЕсли;
		
		СтрокаОбъект.Записать();
		Возврат СтрокаОбъект.Ссылка;
		
	Исключение
		
		СтрокаШаблона = НСтр("ru = 'Не удалось создать строку для вида отчета %1 по элементу %2: %3'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВидОтчета, Элемент.Ссылка, ОписаниеОшибки()),,, СтатусСообщения.Внимание);
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции // СформироватьСтрокуПоСчету()

Процедура ОбновитьБланкОтчетаПоУмолчанию(ВидОтчета,ВыполнятьВФоне=Истина) Экспорт
	
	БланкОтчета=УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображения,ВидОтчета);
	
	Если Не ЗначениеЗаполнено(БланкОтчета) Тогда
		
		СтрокаШаблона = НСтр("ru = 'Не удалось определить бланк по умолчанию для вида отчета %1.'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВидОтчета),,, СтатусСообщения.Важное);
		КонецЕсли;
				
		Возврат;
		
	КонецЕсли;
	
	Если ВыполнятьВФоне Тогда
		
		КлючЗадания=XMLСтрока(ВидОтчета)+"vzv"+XMLСтрока(БланкОтчета);
		
		Если НЕ УправлениеОтчетамиУХ.ПроверитьВозможностьЗапуска(КлючЗадания) Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ПараметрыЗадания = Новый Массив();
		
		ПараметрыЗадания.Добавить(ВидОтчета);
		ПараметрыЗадания.Добавить(БланкОтчета);
		
		СтрокаШаблона = Нстр("ru = 'Обновление бланка %1 вида отчета %2.'");
		
		ОписаниеЗадания = "";
		Если Не ПустаяСтрока(СтрокаШаблона) тогда								
			ОписаниеЗадания = СтрШаблон(СтрокаШаблона, БланкОтчета, ВидОтчета);
		КонецЕсли;
				
		ФоновыеЗадания.Выполнить("УправлениеОтчетамиУХ.ОбновитьБланкОтчета",ПараметрыЗадания,КлючЗадания,ОписаниеЗадания);
		
	Иначе
		
		УправлениеОтчетамиУХ.ОбновитьБланкОтчета(ВидОтчета,БланкОтчета);
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьБланкОтчетаПоУмолчанию() 

///////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПОКАЗАТЕЛЯМИ БЮДЖЕТОВ

Процедура ОбновитьПроцедурыРасчетаПоБюджетам(ВидОтчета,ПравилоОбработки,ИмяРегистра) Экспорт
	
	УправлениеОтчетамиУХ.ОчиститьФормулыРасчета(ПравилоОбработки);
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка,
	|	ПоказателиОтчетов.СтатьяДвиженияДенежныхСредств,
	|	ПоказателиОтчетов.СтатьяДоходовИРасходов,
	|	ПоказателиОтчетов.ПриходРасход,
	|	ПоказателиОтчетов.НеФинансовый,
	|	ПоказателиОтчетов.Предназначение,
	|	ПоказателиОтчетов.РазделениеПоПроектам КАК РазделениеПоПроектамПоказатель,
	|	ПоказателиОтчетов.СтатьяДвиженияРесурсов,
	|	ПоказателиОтчетов.Владелец.РазделениеПоПроектам КАК РазделениеПоПроектамВладелец,
	|	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики1 КАК ВидАналитики1,
	|	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики2 КАК ВидАналитики2,
	|	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3 КАК ВидАналитики3,
	|	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 КАК ВидАналитики4
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &ВидОтчета
	|	И (ПоказателиОтчетов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов)
	|			ИЛИ ПоказателиОтчетов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств)
	|			ИЛИ ПоказателиОтчетов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов))
	|	И НЕ ПоказателиОтчетов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ДанныеПоказателя=Новый Структура;
		ДанныеПоказателя.Вставить("Ссылка",							Результат.Ссылка);
		ДанныеПоказателя.Вставить("СтатьяДвиженияДенежныхСредств",	Результат.СтатьяДвиженияДенежныхСредств);
		ДанныеПоказателя.Вставить("СтатьяДоходовИРасходов",			Результат.СтатьяДоходовИРасходов);
		ДанныеПоказателя.Вставить("СтатьяДвиженияРесурсов",			Результат.СтатьяДвиженияРесурсов);
		
		ДанныеПоказателя.Вставить("ПриходРасход",					Результат.ПриходРасход);
		ДанныеПоказателя.Вставить("НеФинансовый",					Результат.НеФинансовый);
		ДанныеПоказателя.Вставить("Предназначение",					Результат.Предназначение);
		ДанныеПоказателя.Вставить("РазделениеПоПроектамПоказатель",	Результат.РазделениеПоПроектамПоказатель);
		ДанныеПоказателя.Вставить("РазделениеПоПроектамВладелец",	Результат.РазделениеПоПроектамВладелец);
		
		Для Индекс=1 По 4 Цикл
			
			ДанныеПоказателя.Вставить("ВидАналитики"+Индекс,Результат["ВидАналитики"+Индекс]);
			
		КонецЦикла;
		
	    ОбновитьФормулуРасчетаПоБюджету(ДанныеПоказателя,ПравилоОбработки,ИмяРегистра);
		
	КонецЦикла;
	
	УправлениеОтчетамиУХ.СформироватьДанныеРегистраПараметрическихНастроек(ПравилоОбработки,Истина);
	
КонецПроцедуры // ОбновитьПроцедурыРасчетаПоБюджетам()

Функция ПолучитьИмяРегистраПоПредназначениюПоказателя(ПоказательОтчета) Экспорт
	
	Если ПоказательОтчета.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств Тогда
		
		Возврат "БюджетДвиженияДенежныхСредств";
		
	ИначеЕсли ПоказательОтчета.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов Тогда
		
		Возврат "БюджетДоходовИРасходов";
		
	ИначеЕсли ПоказательОтчета.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов Тогда
		
		Возврат "БюджетДвиженияРесурсов";
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;

	
КонецФункции // ПолучитьИмяРегистраПоПредназначениюПоказателя()

Функция ПолучитьИсточникДанныхпоБюджетам(ДанныеПоказателя,ПравилоОбработки,ИмяРегистра,РесурсРегистра)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.Ссылка,
	|	ИсточникиДанныхДляРасчетов.Код
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &НазначениеРасчетов
	|	И ИсточникиДанныхДляРасчетов.ПотребительРасчета = &ПотребительРасчета
	|	И ИсточникиДанныхДляРасчетов.СпособПолучения = &СпособПолучения
	|	И ИсточникиДанныхДляРасчетов.РегистрБД.Наименование = &Наименование
	|	И ИсточникиДанныхДляРасчетов.РесурсРегистра = &РесурсРегистра
	|	И ИсточникиДанныхДляРасчетов.ВидИтога = &ВидИтога
	|	И ИсточникиДанныхДляРасчетов.РегистрБД.Владелец = ЗНАЧЕНИЕ(Справочник.ТипыБазДанных.ТекущаяИБ)
	|	И ИсточникиДанныхДляРасчетов.СпособИспользования = &СпособИспользования";
	
	Запрос.УстановитьПараметр("НазначениеРасчетов",	ПравилоОбработки);
	Запрос.УстановитьПараметр("ПотребительРасчета",	ДанныеПоказателя.Ссылка);
	Запрос.УстановитьПараметр("СпособПолучения",	Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления);
	Запрос.УстановитьПараметр("СпособИспользования",Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета);
	Запрос.УстановитьПараметр("Наименование",		ИмяРегистра);
	Запрос.УстановитьПараметр("ВидИтога",			"Оборот");
	Запрос.УстановитьПараметр("РесурсРегистра",		РесурсРегистра);
	Запрос.УстановитьПараметр("Наименование",		ИмяРегистра);
	
	Результат=Запрос.Выполнить().Выбрать();
		
	Если Результат.Следующий() Тогда
		
		Возврат Результат.Ссылка;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;	
		
КонецФункции // ПолучитьИсточникДанныхпоБюджетам() 

Функция СозлатьИсточникДанныхПоБюджетам(ДанныеПоказателя,ПравилоОбработки,ИмяРегистра,РесурсРегистра)
	
	ИсточникОбъект=Справочники.ИсточникиДанныхДляРасчетов.СоздатьЭлемент();
	ИсточникОбъект.НазначениеРасчетов=ПравилоОбработки;
	ИсточникОбъект.ПотребительРасчета=ДанныеПоказателя.Ссылка;
	
	ИсточникОбъект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления;
	ИсточникОбъект.СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета;
	
	РегистрБД=Справочники.РегистрыНакопленияБД.НайтиПоНаименованию(ИмяРегистра,,,Справочники.ТипыБазДанных.ТекущаяИБ);
	
	Если НЕ ЗначениеЗаполнено(РегистрБД) Тогда
		
		ОбщегоНазначенияУХ.ЗаполнитьСписокРегистровБД(Справочники.ТипыБазДанных.ТекущаяИБ,,Истина,Истина,Истина);
		
		РегистрБД=Справочники.РегистрыНакопленияБД.НайтиПоНаименованию(ИмяРегистра,,,Справочники.ТипыБазДанных.ТекущаяИБ);
		
	КонецЕсли;
	
	ИсточникОбъект.РегистрБД=РегистрБД;
	
	ИсточникОбъект.ПодготовитьТаблицыСопоставленийИОтборов();
	
	ИсточникОбъект.ПриИзмененииРегистраБД(Истина);
	
	ИсточникОбъект.РесурсРегистра=РесурсРегистра;
	ИсточникОбъект.ВидИтога="Оборот";
	
	Возврат ИсточникОбъект;
		
КонецФункции // СозлатьИсточникДанныхПоБюджетам()

Процедура ОбновитьФормулуРасчетаПоБюджету(ДанныеПоказателя,ПравилоОбработки,ИмяРегистра) Экспорт
	
	РесурсРегистра="СуммаУпр";
	
	ИсточникДанных=ПолучитьИсточникДанныхпоБюджетам(ДанныеПоказателя,ПравилоОбработки,ИмяРегистра,РесурсРегистра);
	
	Если НЕ ИсточникДанных=Неопределено Тогда
		
		ИсточникОбъект=ИсточникДанных.ПолучитьОбъект();
		ИсточникОбъект.ПодготовитьТаблицыСопоставленийИОтборов();
		
	Иначе
		
		ИсточникОбъект=СозлатьИсточникДанныхПоБюджетам(ДанныеПоказателя,ПравилоОбработки,ИмяРегистра,РесурсРегистра)
				
	КонецЕсли;

	/////////////////////////////////////////////////////////////////////////////////////////
	// Принудительно устанавливаем отборы источника
	
	ИсточникОбъект.ДеревоПараметровОтбораБД.Строки.Очистить();
			
	Если ИмяРегистра="ФактПоБюджетам" Тогда
		
		ИсточникОбъект.УстановитьОтбор("ДатаНач",	Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчета);
		ИсточникОбъект.УстановитьОтбор("ДатаКон",	Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчета);
		
	Иначе
		
		ИсточникОбъект.УстановитьОтбор("ДатаНач",	Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется);
		ИсточникОбъект.УстановитьОтбор("ДатаКон",	Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется);
		ИсточникОбъект.УстановитьОтбор("ПериодОтчета",		Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчета);
		
	КонецЕсли;
	
	ИсточникОбъект.УстановитьОтбор("ЦФО",	Перечисления.СпособыВычисленияПараметровОперандов.ОрганизацияОтчета);
	
	Если ДанныеПоказателя.РазделениеПоПроектамВладелец Тогда
		ИсточникОбъект.УстановитьОтбор("Проект",Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчетаИерархия);
	КонецЕсли;
	
	Если ДанныеПоказателя.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств Тогда
		
		ИсточникОбъект.УстановитьОтбор("СтатьяБюджета",Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение,ДанныеПоказателя.СтатьяДвиженияДенежныхСредств);
		
	ИначеЕсли ДанныеПоказателя.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов Тогда
		
		ИсточникОбъект.УстановитьОтбор("СтатьяБюджета",Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение,ДанныеПоказателя.СтатьяДоходовИРасходов);
		
	ИначеЕсли  ДанныеПоказателя.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов Тогда
	
		ИсточникОбъект.УстановитьОтбор("СтатьяБюджета",Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение,ДанныеПоказателя.СтатьяДвиженияРесурсов);
		
	КонецЕсли;
	
	ИсточникОбъект.УстановитьОтбор("ПриходРасход",Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение,ДанныеПоказателя.ПриходРасход);
	
	/////////////////////////////////////////////////////////////////////////////////////////
	// Принудительно устанавливаем сопоставления источника
	
	МассивАналитики=ИсточникОбъект.ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("АналитикаОтчета",Ложь));
	
	Для Каждого СтрАналитика ИЗ МассивАналитики Цикл
		
		ИсточникОбъект.ТаблицаСоответствияБД.Удалить(СтрАналитика);
		
	КонецЦикла;
	
	СдвигАналитик=0;
	
	Если ДанныеПоказателя.РазделениеПоПроектамПоказатель Тогда
		
		ИсточникОбъект.УстановитьСоответствие("Проект","Аналитика1");
		
		Для Индекс=2 ПО 4 Цикл
			
			Если ЗначениеЗаполнено(ДанныеПоказателя["ВидАналитики"+Индекс]) Тогда
				
				ИсточникОбъект.УстановитьСоответствие("Аналитика"+(Индекс-1),"Аналитика"+Индекс);
				
			КонецЕсли;
			
		КонецЦикла
		
	Иначе
		
		Для Индекс=1 По 3 Цикл
			
			Если ЗначениеЗаполнено(ДанныеПоказателя["ВидАналитики"+Индекс]) Тогда
				
				ИсточникОбъект.УстановитьСоответствие("Аналитика"+Индекс,"Аналитика"+Индекс);
				
			КонецЕсли;
			
		КонецЦикла

	КонецЕсли;
			
	ИсточникОбъект.СохранитьНастройкиОперанда();
	ИсточникОбъект.Записать();
	
	ТекстПроцедуры="["+СокрЛП(ИсточникОбъект.Код)+"]";
	
	Структура = Новый Структура;
	Структура.Вставить("НазначениеРасчетов", 		ПравилоОбработки);
	Структура.Вставить("ПотребительРасчета", 		ДанныеПоказателя.Ссылка);
	Структура.Вставить("ТекстПроцедуры", 			ТекстПроцедуры);
	Структура.Вставить("ПроизвольныйКод", 			Ложь);
	Структура.Вставить("ПересчитыватьПриОткрытии", 	Истина);
	Структура.Вставить("РедактированиеВозможно", 	Ложь);
	
	РезультатПроверки = УправлениеОтчетамиУХ.ПроверитьФормулуПоказателя(Структура);
	
	Если НЕ РезультатПроверки Тогда
		
		СтрокаШаблона = НСтр("ru = 'При записи формулы показателя %1 обнаружены ошибки!'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ДанныеПоказателя.Ссылка),,, СтатусСообщения.Важное);
		КонецЕсли;
				
	Иначе
		
		УправлениеОтчетамиУХ.ЗаписатьПроцедуруРасчета(Структура);
		
	КонецЕсли;
			
КонецПроцедуры // ОбновитьФормулуРасчетаПоБюджету()
	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С НАСТРОЙКАМИ ПО УМОЛЧАНИЮ.
//

Процедура ПолучитьНастройкиПоУмолчанию(ВидОтчета, БланкДляОтображенияПоУмолчанию, БланкДляИмпортаПоУмолчанию, ПравилоОбработкиПоУмолчанию, ПравилоПроверкиПоУмолчанию, БланкСводнойТаблицыПоУмолчанию,БланкОтображенияПоУмолчаниюМногопериодный=Неопределено,БланкДляИмпортаПоУмолчаниюМногорериодный = Неопределено) Экспорт
	
	СоответствиеНастроек = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(ВидОтчета);
	
	СоответствиеНастроек.Свойство("БланкОтчета", БланкДляОтображенияПоУмолчанию);
	СоответствиеНастроек.Свойство("БланкИмпорта", БланкДляИмпортаПоУмолчанию);
	СоответствиеНастроек.Свойство("ПравилоОбработки", ПравилоОбработкиПоУмолчанию);
	СоответствиеНастроек.Свойство("ПравилоПроверки", ПравилоПроверкиПоУмолчанию);
	СоответствиеНастроек.Свойство("БланкСводнойТаблицы", БланкСводнойТаблицыПоУмолчанию);
	СоответствиеНастроек.Свойство("БланкДляОтображенияМногопериодный", БланкОтображенияПоУмолчаниюМногопериодный);
	СоответствиеНастроек.Свойство("БланкДляИмпортаПоУмолчаниюМногорериодный", БланкДляИмпортаПоУмолчаниюМногорериодный);

	
КонецПроцедуры

Процедура СохранитьНастройкиПоУмолчанию(ВидОтчета, БланкДляОтображенияПоУмолчанию, БланкДляИмпортаПоУмолчанию, ПравилоОбработкиПоУмолчанию, ПравилоПроверкиПоУмолчанию, БланкСводнойТаблицыПоУмолчанию,БланкОтображенияПоУмолчаниюМногопериодный = Неопределено) Экспорт
	
	УправлениеОтчетамиУХ.УстановитьЭлементПоУмолчаниюДляВидаОтчета(ПравилоОбработкиПоУмолчанию		 , ВидОтчета, Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки);
	УправлениеОтчетамиУХ.УстановитьЭлементПоУмолчаниюДляВидаОтчета(ПравилоПроверкиПоУмолчанию		 , ВидОтчета, Перечисления.ЭлементыНастройкиОтчета.ПравилоПроверки);
	УправлениеОтчетамиУХ.УстановитьЭлементПоУмолчаниюДляВидаОтчета(БланкДляОтображенияПоУмолчанию	 , ВидОтчета, Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображения);
	УправлениеОтчетамиУХ.УстановитьЭлементПоУмолчаниюДляВидаОтчета(БланкДляИмпортаПоУмолчанию   	 , ВидОтчета, Перечисления.ЭлементыНастройкиОтчета.БланкДляИмпорта);
	УправлениеОтчетамиУХ.УстановитьЭлементПоУмолчаниюДляВидаОтчета(БланкСводнойТаблицыПоУмолчанию    , ВидОтчета, Перечисления.ЭлементыНастройкиОтчета.БланкСводнойТаблицы);
	УправлениеОтчетамиУХ.УстановитьЭлементПоУмолчаниюДляВидаОтчета(БланкОтображенияПоУмолчаниюМногопериодный    , ВидОтчета, Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображенияМногопериодный);

	
КонецПроцедуры

#КонецЕсли

