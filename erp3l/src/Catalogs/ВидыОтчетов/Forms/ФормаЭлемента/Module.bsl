&НаКлиенте
Перем ВыполняетсяЗакрытие;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗначениеКопирования = Параметры.ЗначениеКопирования;
	Справочники.ВидыОтчетов.ПолучитьНастройкиПоУмолчанию(Объект.Ссылка, БланкОтображенияПоУмолчанию, БланкДляИмпортаПоУмолчанию, ПравилоОбработкиПоУмолчанию, ПравилоПроверкиПоУмолчанию, БланкСводнойТаблицыПоУмолчанию,БланкОтображенияПоУмолчаниюМногопериодный);
	
	Элементы.Предназначение.СписокВыбора.Добавить(Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ПроизвольныеДанные);
	Элементы.Предназначение.СписокВыбора.Добавить(Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость);
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		Элементы.Предназначение.СписокВыбора.Добавить(Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств);
		Элементы.Предназначение.СписокВыбора.Добавить(Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов);
		Элементы.Предназначение.СписокВыбора.Добавить(Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов);
		
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ПроизвольныеДанные;
		Объект.ОбъектДляСогласованияЗначений=Перечисления.ОбъектыСогласованияЗначенийПоказателейОтчетов.ЭкземплярОтчета;
		
		Если ЗначениеКопирования=Справочники.ВидыОтчетов.ПустаяСсылка()
			И Параметры.ЗначенияЗаполнения.Количество()=0 Тогда
			
			Справочники.ВидыОтчетов.ЗаполнитьРеквизитыПоРодителю(Объект);
			
		КонецЕсли;
		
		Объект.СохранятьИсториюИзменений = Истина;
		
	КонецЕсли;
	
	Если Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость Тогда
		
		ОбновитьРегистрБухгалтерии();
		
		Если ЗначениеЗаполнено(Объект.Ссылка) И Объект.ИспользоватьПоУмолчанию Тогда
			
			ПроверитьОбновитьСтруктуруОСВ();
			
		КонецЕсли;
		
		ОтобразитьИспользуемыеВидыИтогов();
		
	КонецЕсли;
	
	ИтогиСуммой=НЕ Объект.ПолучатьБухгалтерскиеИтогиПоГруппирующимСчетам;
	
	Если Объект.ФормироватьПоСтруктуреСправочника Тогда
		
		ОбновитьСписокКолонокСправочник();
		
	КонецЕсли;
	
	ЗаполнитьКолонкиЛимитовНаФорме();
	УстановитьВидимость();
			
	Если Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость Тогда
		
		ОбновитьТаблицыРесурсов();
		
	КонецЕсли;
	
	ПериодичностьБюджетирования = Константы.ПериодичностьБюджетирования.Получить();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПроверитьНаличиеПротоколов();
		
	Иначе
		
		 Элементы.ФормаПротоколы.Видимость=Ложь;
				
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьИспользуемыеВидыИтогов()
	
	Для Каждого Строка ИЗ Объект.ИспользуемыеВидыИтоговПоСчетам Цикл
		
		Если Строка.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СНД Тогда
			
			СНД=Истина;
			
		ИначеЕсли Строка.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СНК Тогда
			
			СНК=Истина;
			
		ИначеЕсли Строка.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.ДО Тогда
			
			ДО=Истина;
			
		ИначеЕсли Строка.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.КО Тогда
			
			КО=Истина;
		ИначеЕсли Строка.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СКД Тогда
			
			СКД=Истина;
			
		ИначеЕсли Строка.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СКК Тогда
			
			СКК=Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОтобразитьИспользуемыеВидыИтогов() 

&НаСервере
Процедура ПроверитьНаличиеПротоколов()
	
	ЕстьПротоколы=Справочники.ПротоколируемыеСобытия.ЕстьПротоколыПоОбъекту(Объект.Ссылка);
	
	Если ЕстьПротоколы>0 Тогда
		
		Элементы.ФормаПротоколы.Видимость=Истина;
		
		Если ЕстьПротоколы=3 Тогда
			
			Элементы.ФормаПротоколы.Картинка=БиблиотекаКартинок.ВниманиеКрасный;
			
		ИначеЕсли ЕстьПротоколы=2 Тогда
			
			Элементы.ФормаПротоколы.Картинка=БиблиотекаКартинок.НастройкаЭлементовОтчетов_32;
			
		Иначе
			
			Элементы.ФормаПротоколы.Картинка=Новый Картинка;
			
		КонецЕсли;
		
	Иначе
		
		Элементы.ФормаПротоколы.Видимость=Ложь;
		
	КонецЕсли;
		
КонецПроцедуры // ПроверитьНаличиеПротоколов() 

&НаСервере
Процедура ПроверитьОбновитьСтруктуруОСВ()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ДанныеДляОбновленияСтруктурыОСВ.ВидОтчета,
	|	ДанныеДляОбновленияСтруктурыОСВ.СчетБД,
	|	ДанныеДляОбновленияСтруктурыОСВ.ОбновитьТР,
	|	ДанныеДляОбновленияСтруктурыОСВ.ПланСчетов
	|ИЗ
	|	РегистрСведений.ДанныеДляОбновленияСтруктурыОСВ КАК ДанныеДляОбновленияСтруктурыОСВ
	|ГДЕ
	|	ДанныеДляОбновленияСтруктурыОСВ.ВидОтчета = &ВидОтчета";
	
	Запрос.УстановитьПараметр("ВидОтчета",Объект.Ссылка);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
	
		КлючЗадания=XMLСтрока(Результат.ВидОтчета)+"vzv"+XMLСтрока(Результат.СчетБД);
		
		Если УправлениеОтчетамиУХ.ПроверитьВозможностьЗапуска(КлючЗадания) Тогда
			
			Справочники.ВидыОтчетов.СоздатьНедостающиеПоказателиОСВ(Результат.ПланСчетов,Результат.СчетБД,Результат.ВидОтчета,Результат.ОбновитьТР,Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры // ПроверитьОбновитьСтруктуруОСВ()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	ПередЗаписьюОбъектаСервер(Отказ, ТекущийОбъект, ПараметрыЗаписи);
			
КонецПроцедуры

&НаСервере
Процедура ОбновитьРегистрБухгалтерии()
	
	МассивРегистров=УправлениеОтчетамиУХ.ПолучитьМассивРегистровБухгалтерии(Объект.ПланСчетов);	
	Элементы.РегистрБухгалтерии.СписокВыбора.Очистить();
	
	Для Каждого Регистр ИЗ МассивРегистров Цикл
		
		Элементы.РегистрБухгалтерии.СписокВыбора.Добавить(Регистр);
		
	КонецЦикла;
	
	Если Элементы.РегистрБухгалтерии.СписокВыбора.Количество()>0 Тогда
		
		Если НЕ Объект.РегистрБухгалтерии=Элементы.РегистрБухгалтерии.СписокВыбора[0].Значение Тогда	
			
			Объект.РегистрБухгалтерии=Элементы.РегистрБухгалтерии.СписокВыбора[0].Значение;
			ОбновитьТаблицыРесурсов();
			
		КонецЕсли;
		
		Элементы.РегистрБухгалтерии.Видимость=Элементы.РегистрБухгалтерии.СписокВыбора.Количество()>1;
		Элементы.ГруппаИтогиПоСчетам.Видимость=Истина;
		
	Иначе
		
		Объект.ПолучатьБухгалтерскиеИтогиПоГруппирующимСчетам=Ложь;
		Элементы.ГруппаИтогиПоСчетам.Видимость=Ложь;
		
	КонецЕсли;
	
	Если НЕ Объект.ПланСчетов.Владелец.ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие77 Тогда
		
		ПланВидовХарактеристик=Объект.ПланСчетов.ВидыСубконтоОписание;
		Элементы.НастройкиСоответствия.Видимость=НЕ ПроверитьНастройкиСоответствия();
			
	Иначе
		
		ПланВидовХарактеристик="";
		Элементы.ГруппаВидыСубконто.Видимость=Ложь;
		
	КонецЕсли;
	
	Элементы.ПланВидовХарактеристик.Видимость=ЗначениеЗаполнено(ПланВидовХарактеристик);
				
КонецПроцедуры // ОбновитьРегистрБухгалтерии() 

&НаСервере
Процедура УстановитьВидимость()
	
	ЕстьДоступ = НЕ Параметры.Ключ.Пустая();
	
	Элементы.Группа_Предупреждение.Видимость         	= НЕ ЕстьДоступ;
	Элементы.БланкОтображенияПоУмолчанию.Доступность 	= ЕстьДоступ;
	Элементы.БланкДляИмпортаПоУмолчанию.Доступность  	= ЕстьДоступ;
	Элементы.ПравилоОбработкиПоУмолчанию.Доступность 	= ЕстьДоступ;
	Элементы.ПравилоПроверкиПоУмолчанию.Доступность 	= ЕстьДоступ;
	
	Если Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость Тогда
		
		Элементы.ПараметрыРегистраБухгалтерии.Видимость	=Истина;
		Элементы.ГруппаКолонкиОтчета.Видимость			=Ложь;
		Элементы.ГруппаСправочник.Видимость				=Ложь;
		Элементы.РазделениеПоПроектам.Видимость			=Ложь;
		
		Элементы.ИспользоватьПоУмолчанию.Видимость		=НЕ (Объект.ПоВыбраннымСчетам);
		Элементы.СокращеннаяОСВ.Видимость				=НЕ (Объект.ПоВыбраннымСчетам);
		Элементы.ГруппаИтогиПоСчетам.Видимость			=НЕ (Объект.ПоВыбраннымСчетам);
		Элементы.ГруппаПараметрыФормирования.Видимость	=НЕ (Объект.ПоВыбраннымСчетам);

		
		Элементы.ПараметрыРегистраБухгалтерии.Заголовок	= Нстр("ru = 'Используемые остатки и обороты'");
		Элементы.ГруппаВидыИтогов.Видимость		= Истина;
		Элементы.АналитикиОтчета.Видимость=Ложь;
		
		Если Объект.СокращеннаяОСВ Тогда
			
			Элементы.ГруппаВидыИтогов.Видимость=Ложь;
			
		КонецЕсли;
		
		Элементы.ГруппаОтборСчетов.Видимость=Объект.ПоВыбраннымСчетам;
		Элементы.ДекорацияОтбор.Заголовок=Нстр("ru = 'Выбранные счета и субконто'");
		
		Элементы.ПланВидовХарактеристик.Видимость=ЗначениеЗаполнено(Объект.ПланСчетов) И (НЕ Объект.ПланСчетов.Владелец.ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие77);	
		Элементы.НастройкиСоответствия.Видимость=ЗначениеЗаполнено(ПланВидовХарактеристик) И (НЕ ПроверитьНастройкиСоответствия()); 
		
	Иначе
		
		Элементы.ПараметрыРегистраБухгалтерии.Видимость=Ложь;
		Элементы.АналитикиОтчета.Видимость=Истина;
		Элементы.ГруппаКолонкиОтчета.Видимость=Объект.ФормироватьПоСтруктуреСправочника;
		Элементы.ГруппаСправочник.Видимость=Истина;
		Элементы.РазделениеПоПроектам.Видимость=Истина;
		
		Элементы.СправочникБД.ТолькоПросмотр=(НЕ Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ПроизвольныеДанные);
				
	КонецЕсли;
	
	Элементы.ГруппаИсторияИзменений.ТолькоПросмотр=(Объект.ОбъектДляСогласованияЗначений=Перечисления.ОбъектыСогласованияЗначенийПоказателейОтчетов.Ракурс);
	
	// Установка лимитов++
	Если НЕ Объект.МожетИспользоватьсяДляУстановкиЛимитов Тогда
		Элементы.СтраницыИсточникДляУстановкиЛимитов.ТекущаяСтраница = Элементы.СтраницаНеИспользуется;
	Иначе
		Элементы.СтраницыИсточникДляУстановкиЛимитов.ТекущаяСтраница = Элементы.СтраницаПоКолонкам;
		УстановитьВидимостьДоступностьКолонокУстановкиЛимитов();
	КонецЕсли;
	// Установка лимитов--
	
КонецПроцедуры

&НаКлиенте
Процедура КопированиеЭлемента_Завершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ВыбранноеЗначение = Неопределено Тогда
		Если ЭтаФорма.Открыта() Тогда
			ЭтаФорма.Закрыть();
		Иначе
			// Форма уже закрыта.
		КонецЕсли;
	Иначе
		ПараметрыКопирования = ВыбранноеЗначение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Выбор подчиненных элементов для копирования
	Если НЕ ЗначениеКопирования.Пустая() Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Источник", ЗначениеКопирования);
		ОписаниеОЗакрытии = Новый ОписаниеОповещения("КопированиеЭлемента_Завершение", ЭтотОбъект);
		ОткрытьФорму("Справочник.ВидыОтчетов.Форма.ФормаКопирования", СтруктураПараметров, , , , , ОписаниеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицыРесурсов()
		
	ОбщегоНазначенияСерверУХ.ОбновитьСписокРесурсовРегистра(Объект.РегистрБухгалтерии,Объект.РесурсРегистраИсточник,Элементы.РесурсРегистраИсточник);
				
КонецПроцедуры // ОбновитьТаблицыРесурсов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРА СОЗДАНИЯ ЭЛЕМЕНТОВ ПОДЧИНЕННЫХ СПРАВОЧНИКОВ.
//

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПослеЗаписиОбъектаСервер(ТекущийОбъект, ПараметрыЗаписи);		
			
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокКолонокОСВ()
	
	ТабСоставКолонок.Очистить();
	
	Если СНД Тогда
		
		НоваяСтрока=ТабСоставКолонок.Добавить();
		НоваяСтрока.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СНД;
		НоваяСтрока.Использовать=Истина;
		
	КонецЕсли;
	
	Если СНК Тогда
		
		НоваяСтрока=ТабСоставКолонок.Добавить();
		НоваяСтрока.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СНК;
		НоваяСтрока.Использовать=Истина;
		
	КонецЕсли;
	
	Если ДО Тогда
		
		НоваяСтрока=ТабСоставКолонок.Добавить();
		НоваяСтрока.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.ДО;
		НоваяСтрока.Использовать=Истина;
		
	КонецЕсли;
	
	Если КО Тогда
		
		НоваяСтрока=ТабСоставКолонок.Добавить();
		НоваяСтрока.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.КО;
		НоваяСтрока.Использовать=Истина;
		
	КонецЕсли;
	
	Если СКД Тогда
		
		НоваяСтрока=ТабСоставКолонок.Добавить();
		НоваяСтрока.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СКД;
		НоваяСтрока.Использовать=Истина;
		
	КонецЕсли;
	
	Если СКК Тогда
		
		НоваяСтрока=ТабСоставКолонок.Добавить();
		НоваяСтрока.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СКК;
		НоваяСтрока.Использовать=Истина;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	КолонкиОтчетов.Ссылка,
	|	КолонкиОтчетов.Наименование,
	|	КолонкиОтчетов.ВидИтогаПоСчету,
	|	КолонкиОтчетов.ПометкаУдаления
	|ИЗ
	|	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|ГДЕ
	|	КолонкиОтчетов.Владелец = &Владелец
	|	И КолонкиОтчетов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость)";
	
	Запрос.УстановитьПараметр("Владелец",Объект.Ссылка);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		МассивКолонок=ТабСоставКолонок.НайтиСтроки(Новый Структура("ВидИтогаПоСчету",Результат.ВидИтогаПоСчету));
		
		Если МассивКолонок.Количество()>0 Тогда
			
			МассивКолонок[0].ЕстьСсылка		= Истина;
			МассивКолонок[0].Ссылка			= Результат.Ссылка;
			МассивКолонок[0].Наименование	= Результат.Наименование;
			МассивКолонок[0].ПометкаУдаления= Результат.ПометкаУдаления;
			
		Иначе
			
			НоваяСтрока=ТабСоставКолонок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
			НоваяСтрока.ЕстьСсылка=Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьСписокКолонок()

&НаСервере
Процедура ОбновитьСписокКолонокСправочник()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	КолонкиОтчетов.Ссылка,
	|	КолонкиОтчетов.ПометкаУдаления,
	|	КолонкиОтчетов.ПорядковыйНомер,
	|	КолонкиОтчетов.ТипЗначения,
	|	КолонкиОтчетов.НеМасштабируется,
	|	КолонкиОтчетов.НеФинансовый,
	|	КолонкиОтчетов.ВидКурса,
	|	КолонкиОтчетов.Наименование
	|ИЗ
	|	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|ГДЕ
	|	КолонкиОтчетов.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец",Объект.Ссылка);
	
	ТабСоставКолонок.Очистить();
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока=ТабСоставКолонок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
		НоваяСтрока.ЕстьСсылка=Истина;
		
	КонецЦикла;
		
КонецПроцедуры // ОбновитьСписокКолонокСправочник()

&НаСервере
Процедура СоздатьНедостающиеПоказателиОСВ(ПланСчетов,ВидОтчета)
	
	БланкОтчета=УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображения,ВидОтчета);
	
	Если НЕ ЗначениеЗаполнено(БланкОтчета) Тогда
		
		Сообщить(НСтр("ru = 'Не найден бланк отчета, используемый по умолчанию.'"));
		Возврат;
		
	КонецЕсли;
	
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(БланкОтчета);
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось заблокировать бланк отчета для редактирования:
		|		%ОписаниеОшибки%'; 
		|en = 'Cannot lock the report form for editing:
		|		%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		Сообщить(ТекстСообщения);
		Возврат;
		
	КонецПопытки;
	
	Если Объект.ПоВыбраннымСчетам Тогда
		
		Справочники.ВидыОтчетов.СоздатьНедостающиеПоказателиОСВОтбор(ПланСчетов,ВидОтчета,Объект.ИспользуемыеСчета.Выгрузить(Новый Структура("СчетИспользуется",Истина)));
		
	Иначе
		
		Справочники.ВидыОтчетов.СоздатьНедостающиеПоказателиОСВ(ПланСчетов,,ВидОтчета,,Ложь);
		
	КонецЕсли;
	
КонецПроцедуры // СоздатьНедостающиеПоказателиОСВ()

&НаСервере
Процедура СоздатьНедостающиеПоказателиСправочника(СправочникБД,ВидОтчета)
	
	Справочники.ВидыОтчетов.СоздатьНедостающиеПоказателиСправочника(СправочникБД,ВидОтчета,РеквизитФормыВЗначение("ТабСоставКолонок"));
	
КонецПроцедуры // СоздатьНедостающиеПоказателиОСВ()

&НаСервереБезКонтекста
Процедура СоздатьФормулыРасчетаОСВ(ВидОтчета)
		
	ПравилоОбработки = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки, ВидОтчета);
	
	Если ЗначениеЗаполнено(ПравилоОбработки) Тогда
		
		Справочники.ВидыОтчетов.СформироватьФормулыРасчетаОСВ(ВидОтчета,ПравилоОбработки);
		
	КонецЕсли;
	
	
КонецПроцедуры // СоздатьНедостающиеПоказателиОСВ()

&НаКлиенте
Процедура РегистрБухгалтерииПриИзменении(Элемент)
	
	ОбновитьТаблицыРесурсов();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПланСчетовПриИзменении(Элемент)
	
	ОбновитьРегистрБухгалтерии();
		
КонецПроцедуры

&НаКлиенте
Процедура КодПриИзменении(Элемент)
	
	ТекущийКод=Объект.Код;
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		
		Объект.Наименование=ОбщегоНазначенияКлиентСерверУХ.НаименованиеПоКоду(ТекущийКод);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием_Завершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполняетсяЗакрытие = Истина;
		ЭтаФорма.Закрыть();
	Иначе
		// Не требуется закрытие.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗакрытьПослеЗаписи=ПараметрыЗаписи.Свойство("Закрыть");
	
	Если Объект.Предназначение=ПредопределенноеЗначение("Перечисление.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость")  Тогда
		
		Если Не ЗначениеЗаполнено(Объект.ПланСчетов) Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Не указан план счетов.'"));
			Отказ=Истина;
			Возврат;
			
		КонецЕсли;
		
		Если НЕ Объект.СокращеннаяОСВ Тогда
			
			ОбновитьСписокКолонокОСВ();
			
			МассивКУдалению=ТабСоставКолонок.НайтиСтроки(Новый Структура("Использовать,ЕстьСсылка",Ложь,Истина));
			
			Если МассивКУдалению.Количество()>0 Тогда
				Если НЕ ВыполняетсяЗакрытие Тогда
					Отказ = Истина;
					ТекстКолонки="";
					
					Для Каждого Строка ИЗ МассивКУдалению Цикл
						
						ТекстКолонки=ТекстКолонки+", "+Строка.Наименование;
						
					КонецЦикла;
					
					Если МассивКУдалению.Количество() = 1 тогда
						СтрокаШаблона = НСтр("ru = 'Колонка %1, 
						|а также связанные с ней показатели, их значения, источники данных и формулы расчетов будут удалены.
						|Продолжить?'");
					Иначе
						СтрокаШаблона = НСтр("ru = 'Колонки %1, 
						|а также связанные с ними показатели, их значения, источники данных и формулы расчетов будут удалены.
						|Продолжить?'");
					КонецЕсли;
					
					Если Не ПустаяСтрока(СтрокаШаблона) тогда
						ТекстВопроса = СтрШаблон(СтрокаШаблона, Сред(ТекстКолонки,2));
					КонецЕсли;
										
					ОписаниеЗакрытие = Новый ОписаниеОповещения("ПередЗакрытием_Завершение", ЭтотОбъект);
					ПоказатьВопрос(ОписаниеЗакрытие, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
					
				Иначе
					// Продолжаем закрытие.
				КонецЕсли;
			КонецЕсли;
			
			Если Объект.ПоВыбраннымСчетам Тогда
				
				СтрокиКУдалению=Объект.ИспользуемыеСчета.НайтиСтроки(Новый Структура("СчетИспользуется",Ложь));
				
				Для Каждого Строка ИЗ СтрокиКУдалению Цикл
					
					Объект.ИспользуемыеСчета.Удалить(Строка);
					
				КонецЦикла;
				
			КонецЕсли;
					
				
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		АдресПараметровРеструктуризации=ПолучитьПараметрыРеструктуризации();
		
		Если Не АдресПараметровРеструктуризации=Неопределено Тогда
			
			Отказ=Истина;
			ОписаниеОповещения=Новый ОписаниеОповещения("ПодтверждениеРеструктуризацииЗавершение",ЭтотОбъект,ПараметрыЗаписи);
			ОткрытьФорму("Обработка.РеструктуризацияДанных.Форма",Новый Структура("АдресПараметровРеструктуризации,",АдресПараметровРеструктуризации),ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыКопирования) И Не Объект.ЭтоГруппа Тогда
					
		Состояние(НСтр("ru = 'Копирование записей подчиненных справочников...'"));
				
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьПараметрыУстановкиЛимитов();
	
КонецПроцедуры


&НаКлиенте
Процедура ПодтверждениеРеструктуризацииЗавершение(РезультатЗакрытия,ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатЗакрытия=Неопределено Тогда
		
		ВыполнитьЗаписьОбъекта(РезультатЗакрытия,ДополнительныеПараметры);
				
	КонецЕсли;
		
КонецПроцедуры // ПодтверждениеРеструктуризацииЗавершение()
#Область ЗаписьОбъекта

&НаКлиенте
Процедура ВыполнитьЗаписьОбъекта(АдресПараметровРеструктуризации,ПараметрыЗаписи)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаписьНовогоОбъекта=Не ЗначениеЗаполнено(Объект.Ссылка);
	
	Если ЗаписатьОбъектВФорме(АдресПараметровРеструктуризации,ПараметрыЗаписи) Тогда
		
		Модифицированность=Ложь;
		
		Если ТипЗнч(ЭтаФорма.ВладелецФормы)=Тип("ТаблицаФормы") Тогда
			
			ЭтаФорма.ВладелецФормы.Обновить();
			
		КонецЕсли;
		
		ПослеЗаписиОбъектаКлиент(ПараметрыЗаписи);
				
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьЗаписьОбъекта()
	
&НаСервере
Функция ЗаписатьОбъектВФорме(АдресПараметровРеструктуризации,ПараметрыЗаписи)
	
	РабочийОбъект=РеквизитФормыВЗначение("Объект");
	РабочийОбъект.АдресПараметровРеструктуризации=АдресПараметровРеструктуризации;
	
	Отказ=Ложь;
	
	НачатьТранзакцию();
	
	ПередЗаписьюОбъектаСервер(Отказ, РабочийОбъект, ПараметрыЗаписи);
	
	Если Отказ Тогда
		
		ОтменитьТранзакцию();
		Возврат Ложь;
		
	КонецЕсли;
	
	Попытка
		
		РабочийОбъект.Записать();
		
		ПриЗаписиОбъектаСервер(Отказ, РабочийОбъект, ПараметрыЗаписи);
		
		Если Отказ Тогда
			
			ОтменитьТранзакцию();
			Возврат Ложь;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();

		ПослеЗаписиОбъектаСервер(РабочийОбъект,ПараметрыЗаписи);
		
		ЗначениеВРеквизитФормы(РабочийОбъект,"Объект");
		
		//Реструктуризация бланков
		Если ЗначениеЗаполнено(АдресПараметровРеструктуризации) Тогда
			
			РасширениеБизнесЛогикиУХ.ВыполнитьРеструктуризациюБланков(Объект.Ссылка,АдресПараметровРеструктуризации);
			
		КонецЕсли;	
		
		
		Возврат Истина;
		
		
	Исключение
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,,СтатусСообщения.Внимание);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции // ЗаписатьОбъектВФорме()

&НаСервере
Процедура ПередЗаписьюОбъектаСервер(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Параметры.Ключ.Пустая() Тогда
		
		Справочники.ВидыОтчетов.СохранитьНастройкиПоУмолчанию(ТекущийОбъект.Ссылка, БланкОтображенияПоУмолчанию, БланкДляИмпортаПоУмолчанию, ПравилоОбработкиПоУмолчанию, ПравилоПроверкиПоУмолчанию, БланкСводнойТаблицыПоУмолчанию,БланкОтображенияПоУмолчаниюМногопериодный);
		
	КонецЕсли;
		
	ТекущийОбъект.ИспользуемыеВидыИтоговПоСчетам.Очистить();
	
	Если ТекущийОбъект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость Тогда
		
		Если Не ЗначениеЗаполнено(ТекущийОбъект.ПланСчетов) Тогда
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Не указан используемый план счетов.'"), Отказ,, СтатусСообщения.Внимание);
			Возврат;
			
		КонецЕсли;
		
		СохранитьИспользуемыеВидыИтогов(ТекущийОбъект);
				
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюОбъектаСервер() 

&НаСервере
Процедура СохранитьИспользуемыеВидыИтогов(ТекущийОбъект)
		
	Если СНД Тогда
		
		НоваяСтрока=ТекущийОбъект.ИспользуемыеВидыИтоговПоСчетам.Добавить();
		НоваяСтрока.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СНД;
		
	КонецЕсли;
	
	Если СНК Тогда
		
		НоваяСтрока=ТекущийОбъект.ИспользуемыеВидыИтоговПоСчетам.Добавить();
		НоваяСтрока.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СНК;
		
	КонецЕсли;
	
	Если ДО Тогда
		
		НоваяСтрока=ТекущийОбъект.ИспользуемыеВидыИтоговПоСчетам.Добавить();
		НоваяСтрока.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.ДО;
		
	КонецЕсли;
	
	Если КО Тогда
		
		НоваяСтрока=ТекущийОбъект.ИспользуемыеВидыИтоговПоСчетам.Добавить();
		НоваяСтрока.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.КО;
		
	КонецЕсли;
	
	Если СКД Тогда
		
		НоваяСтрока=ТекущийОбъект.ИспользуемыеВидыИтоговПоСчетам.Добавить();
		НоваяСтрока.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СКД;
		
	КонецЕсли;
	
	Если СКК Тогда
		
		НоваяСтрока=ТекущийОбъект.ИспользуемыеВидыИтоговПоСчетам.Добавить();
		НоваяСтрока.ВидИтогаПоСчету=Перечисления.ВидыБухгалтерскихИтогов.СКК;
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьИспользуемыеВидыИтогов()

&НаСервере
Процедура ПриЗаписиОбъектаСервер(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
		
	Если (НЕ Отказ) И ЗначениеЗаполнено(ПараметрыКопирования) Тогда
			
		УправлениеОтчетамиУХ.СкопироватьПодчиненныеОбъекты(ТекущийОбъект.Ссылка,ЗначениеКопирования,ПараметрыКопирования,Отказ);
		ПараметрыКопирования = неопределено;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		УправлениеОтчетамиУХ.ПроверитьНаличиеЭлементовНастройки(ТекущийОбъект.Ссылка,Новый Структура("ПравилоОбработки,ПравилоПроверки,БланкОтчета"),Отказ);
		
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписиОбъектаСервер()

&НаСервере
Процедура ПослеЗаписиОбъектаСервер(ТекущийОбъект, ПараметрыЗаписи)
			
	Справочники.ВидыОтчетов.ПолучитьНастройкиПоУмолчанию(Объект.Ссылка, БланкОтображенияПоУмолчанию, БланкДляИмпортаПоУмолчанию, ПравилоОбработкиПоУмолчанию, ПравилоПроверкиПоУмолчанию, БланкСводнойТаблицыПоУмолчанию,БланкОтображенияПоУмолчаниюМногопериодный);
	
	Если Не ПараметрыЗаписи.Свойство("Закрыть") Тогда
		
		УстановитьВидимость();
		ПроверитьНаличиеПротоколов();
		
	КонецЕсли;
	
КонецПроцедуры // ПослеЗаписиОбъектаСервер()

&НаКлиенте
Процедура ПослеЗаписиОбъектаКлиент(ПараметрыЗаписи)
	
	Состояние("");
	
	Если ЗакрытьПослеЗаписи И ЭтотОбъект.Открыта() Тогда
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры // ПослеЗаписиОбъектаКлиент()

#КонецОбласти


&НаСервере
Функция ПолучитьПараметрыРеструктуризации()
	
	ПараметрыРеструктуризации=Справочники.ВидыОтчетов.ПроверитьНеобходимостьРеструктуризацииДанныхВидОтчета(РеквизитФормыВЗначение("Объект"),Объект.Ссылка);
	
	Если НЕ ПараметрыРеструктуризации=Неопределено Тогда
		
		Возврат ПоместитьВоВременноеХранилище(ПараметрыРеструктуризации,ЭтаФорма.УникальныйИдентификатор);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
		
КонецФункции // ПолучитьПараметрыРеструктуризации() 

&НаКлиенте
Процедура ПредназначениеПриИзменении(Элемент)
	
	ПриИзмененииПредназначения();
		
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПредназначения()
	
	Если Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость Тогда
		
		Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			Объект["ВидАналитики"+Индекс]=Неопределено 
			
		КонецЦикла;
		
		Объект.ФормироватьПоСтруктуреСправочника=Ложь;
		ОбновитьТаблицыРесурсов();
		
	Иначе
		
		Если НЕ Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ПроизвольныеДанные Тогда
			
			Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				
				Объект["ВидАналитики"+Индекс]=Неопределено 
				
			КонецЦикла;
			
		КонецЕсли;	
		
		Если Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств Тогда
			
			Объект.СправочникБД=Справочники.СправочникиБД.НайтиПоНаименованию("СтатьиДвиженияДенежныхСредств",Истина,,Справочники.ТипыБазДанных.ТекущаяИБ);
			
		ИначеЕсли Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов Тогда
			
			Объект.СправочникБД=Справочники.СправочникиБД.НайтиПоНаименованию("СтатьиДоходовИРасходов",Истина,,Справочники.ТипыБазДанных.ТекущаяИБ);
			
		ИначеЕсли Объект.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов Тогда
			
			Объект.СправочникБД=Справочники.СправочникиБД.НайтиПоНаименованию("СтатьиДвиженияРесурсов",Истина,,Справочники.ТипыБазДанных.ТекущаяИБ);
			
		КонецЕсли;		
			
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ПриИзмененииПредназначения() 

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПриЗаписиОбъектаСервер(Отказ, ТекущийОбъект, ПараметрыЗаписи);
							
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПослеЗаписиОбъектаКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоказателиОСВ_Завершение(Результат, ДополнительныеПараметры) Экспорт
	Если ОбработатьРезультатЗаписьИЗакрытьФорму(Результат) Тогда
		СоздатьНедостающиеПоказателиОСВ(Объект.ПланСчетов, Объект.Ссылка);
	Иначе
		// Не требуется выполнения действий.
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверитьНастройкиСоответствия() Экспорт
	
	Если (НЕ ЗначениеЗаполнено(ПланВидовХарактеристик)) ИЛИ ПланВидовХарактеристик.Владелец=Справочники.ТипыБазДанных.ТекущаяИБ Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ТабНастройкиСоответствия=РасширениеИнтеграцииУХ.ПолучитьТаблицуСоответствий(ПланВидовХарактеристик.Владелец,ПланВидовХарактеристик.ТипЗначения);
	
	Для Каждого Строка ИЗ ТабНастройкиСоответствия Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.НастройкаСоответствия) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ПроверитьНастройкиСоответствия() 

&НаКлиенте
Процедура СоздатьПоказателиОСВ(Команда)
	
	Если Элементы.ПараметрыРегистраБухгалтерии.Видимость Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ПланСчетов) Тогда
			
			Сообщить(НСтр("ru = 'Не указан план счетов.'"));
			Возврат;
			
		КонецЕсли;
		
		ОписаниеОповещениеЗапись = Новый ОписаниеОповещения("СоздатьПоказателиОСВ_Завершение", ЭтотОбъект);
		ЗаписатьСПроверкой(ОписаниеОповещениеЗапись);
		
	КонецЕсли;
 	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФормулуПодтверждениеЗаписи_Завершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать();
		СоздатьФормулыРасчетаОСВ(Объект.Ссылка);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		// Пользователь отказался. Ничего не делаем.
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный результат: %ВыбранноеЗначение%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВыбранноеЗначение%", Строка(Результат));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФормулыРасчета(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПланСчетов) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указан план счетов.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() ИЛИ Модифицированность Тогда
		
		СтруктураПараметров = Новый Структура;
		ТекстВопроса = НСтр("ru = 'Объект еще не записан. Записать?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ОбновитьФормулуПодтверждениеЗаписи_Завершение", ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 30);
		Возврат;
		
	КонецЕсли;
	
	СоздатьФормулыРасчетаОСВ(Объект.Ссылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьБланкОтчетаСервер(ВидОтчета) Экспорт
	
	Справочники.ВидыОтчетов.ОбновитьБланкОтчетаПоУмолчанию(ВидОтчета);
	
КонецПроцедуры // СформироватьБланкОтчетаСервер()

// Возвращает незанятое наименование по умолчанию для бланка отчета, принадлежащего
// виду отчета ВидОтчетаВход.
&НаСервереБезКонтекста
Функция СгенерироватьНаименованиеНовогоБланка(ВидОтчетаВход)
	РезультатФункции = Справочники.ВидыОтчетов.СгенерироватьНаименованиеНовогоБланкаДляВидаОтчета(ВидОтчетаВход);
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура РедактироватьБланк(Команда)
	
	ОписаниеОповещениеЗапись = Новый ОписаниеОповещения("РедактироватьБланк_Завершение", ЭтотОбъект);
	ЗаписатьСПроверкой(ОписаниеОповещениеЗапись);
		
КонецПроцедуры

// Проверяет форму на модифицированность. В случае модифицированности
// предлагает перезаписать объект. После чего выполняет обработчик 
// из описани ОписаниеВход.
&НаКлиенте
Процедура ЗаписатьСПроверкой(ОписаниеВход)
	Если Параметры.Ключ.Пустая() ИЛИ Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Объект еще не записан. Записать?'");
		ПоказатьВопрос(ОписаниеВход, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеВход, Неопределено);
	КонецЕсли;	
КонецПроцедуры

// Выполняет перезапись в зависимости от результата выбора пользователя
// РезультатВход. Возвращает флаг возможности выполнения дальнейших операций.
&НаКлиенте
Функция ОбработатьРезультатЗаписьИЗакрытьФорму(РезультатВход)
	
	РезультатФункции=Ложь;
	
	Если РезультатВход = КодВозвратаДиалога.Да Тогда
		
		Если Не ПроверитьЗаполнение() Тогда
			
			Возврат Ложь;
			
		Иначе
			
			Записать();
			Возврат Истина;
			
		КонецЕсли;
		
	ИначеЕсли РезультатВход = КодВозвратаДиалога.Нет Тогда	
		РезультатФункции = Ложь;			// Пользователь отказался от выполнения.
	ИначеЕсли РезультатВход = Неопределено Тогда	
		РезультатФункции = Истина;			// Непосредственный вызов. Выполняем далее без перезаписи.
	Иначе
		ТекстСообщения = НСтр("ru = 'Выбрано неизвестное значение: %ВыбранноеЗначение%. Операция отменена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВыбранноеЗначение%", Строка(РезультатВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Ложь;			// Т.к. возникла ошибка.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура РедактироватьДерево_Завершение(Результат, ДополнительныеПараметры) Экспорт
	Если ОбработатьРезультатЗаписьИЗакрытьФорму(Результат) Тогда
		ИмяФормы_  =  "Обработка.НастройкаСтруктурыОтчета.Форма.ФормаКонструктора";
		ОткрытьФорму(ИмяФормы_, Новый Структура("ВидОтчета", Объект.Ссылка), , Объект.Ссылка);
	Иначе
		// Не требуется выполнения действий.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДерево(Команда)

	ОписаниеОповещениеЗапись = Новый ОписаниеОповещения("РедактироватьДерево_Завершение", ЭтотОбъект);
	ЗаписатьСПроверкой(ОписаниеОповещениеЗапись);

КонецПроцедуры

&НаКлиенте
Процедура СокращеннаяОСВПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогиСуммойПриИзменении(Элемент)
	
	Объект.ПолучатьБухгалтерскиеИтогиПоГруппирующимСчетам=Не ИтогиСуммой;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучатьБухгалтерскиеИтогиПоГруппирующимСчетамПриИзменении(Элемент)
	
	ИтогиСуммой=НЕ Объект.ПолучатьБухгалтерскиеИтогиПоГруппирующимСчетам;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьНаличиеДанных(ВидОтчета)
	
	Если ВидОтчета=Справочники.ВидыОтчетов.ПустаяСсылка() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВерсииЗначенийПоказателей.Ссылка
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Возврат Результат.Следующий();
	
КонецФункции // ПроверитьНаличиеДанных() 

&НаКлиенте
Процедура СохранятьИсториюИзмененийПриИзменении(Элемент)
	
	Если Объект.СохранятьИсториюИзменений Тогда
		
		ТекстВопроса = НСтр("ru = 'При включенном режиме сохранения
		|истории изменений значений показателей отчетов
		|сводная таблица будет доступна только в режиме просмотра и анализа данных.'");
		
		Оповещение = Новый ОписаниеОповещения("Подключаемый_СохраненениеИзмененийУстановлено", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	ИначеЕсли ПроверитьНаличиеДанных(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru = 'При отключении режима сохранения
		|истории изменений значений показателей отчетов
		|данные будут записаны по состоянию на последнюю версию.
		|Просмотр истории изменений будет невозможен'");
		
		Оповещение = Новый ОписаниеОповещения("Подключаемый_СохраненениеИзмененийСнято", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);

	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры
	
&НаКлиенте	
Процедура Подключаемый_СохраненениеИзмененийУстановлено(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;		
	
	Если Ответ <> КодВозвратаДиалога.ОК Тогда        
		
		Объект.СохранятьИсториюИзменений=Ложь;        
		
	КонецЕсли;
 
КонецПроцедуры

&НаКлиенте	
Процедура Подключаемый_СохраненениеИзмененийСнято(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;		
	
	Если Ответ <> КодВозвратаДиалога.ОК Тогда        
		
		Объект.СохранятьИсториюИзменений=Истина;        
		
	КонецЕсли;
 
КонецПроцедуры

&НаКлиенте
Процедура ТабСоставКолонокПередУдалением(Элемент, Отказ)
	
	ДанныеСтроки=Элементы.ТабСоставКолонок.ТекущиеДанные;
	
	Если ДанныеСтроки.ЕстьСсылка Тогда
		
		Отказ=Истина;
		ДанныеСтроки.ПометкаУдаления=Не ДанныеСтроки.ПометкаУдаления;
		ДанныеСтроки.ДанныеИзменены=Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьПоСтруктуреСправочникаПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникБДПриИзменении(Элемент)
	
	Объект.ФормироватьПоСтруктуреСправочника=Истина;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабСоставКолонокПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Элементы.ТабСоставКолонок.ТекущиеДанные.ДанныеИзменены=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьКолонкуВверх(Команда)
	
	ТекущаяСтрока=Элементы.ТабСоставКолонок.ТекущиеДанные;
	ИндексСтроки=ТабСоставКолонок.Индекс(ТекущаяСтрока);
	
	Если ИндексСтроки=0 Тогда
		
		Возврат;
		
	Иначе
		
		ТекущаяСтрока.ДанныеИзменены=Истина;
		ТабСоставКолонок[ИндексСтроки-1].ДанныеИзменены=Истина;		
		ТабСоставКолонок.Сдвинуть(ИндексСтроки,-1);
		
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьКолонкуВниз(Команда)
	
	ТекущаяСтрока=Элементы.ТабСоставКолонок.ТекущиеДанные;
	ИндексСтроки=ТабСоставКолонок.Индекс(ТекущаяСтрока);
	
	Если (ИндексСтроки+1)>=ТабСоставКолонок.Количество() Тогда
		
		Возврат;
		
	Иначе
		
		ТекущаяСтрока.ДанныеИзменены=Истина;
		ТабСоставКолонок[ИндексСтроки+1].ДанныеИзменены=Истина;
		
		ТабСоставКолонок.Сдвинуть(ИндексСтроки,1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабСоставКолонокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И (НЕ Копирование) Тогда
		
		Элементы.ТабСоставКолонок.ТекущиеДанные.ТипЗначения=ПредопределенноеЗначение("Перечисление.ТипыЗначенийПоказателейОтчетов.Число");
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьФормулыРасчетаСправочникНаСервере(ВидОтчета)
	
	Справочники.ВидыОтчетов.ОбновитьФормулыСуммированияПодчиненных(ВидОтчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьКодПоНаименованию(Наименование)
	
	Возврат ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(Наименование,,"ВидыОтчетов");
	
КонецФункции // СформироватьКодПоНаименованию() 

&НаКлиенте
Процедура СоздатьПоказателиСправочник_Завершение(Результат, ДополнительныеПараметры) Экспорт
	Если ОбработатьРезультатЗаписьИЗакрытьФорму(Результат) Тогда
		СоздатьНедостающиеПоказателиСправочника(Объект.СправочникБД, Объект.Ссылка);
		ОбновитьСписокКолонокСправочник();
	Иначе
		// Не требуется выполнения действий.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоказателиСправочник(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.СправочникБД) Тогда
		
		Сообщить(НСтр("ru = 'Не указан исходный справочник.'"));
		Возврат;
		
	КонецЕсли;
	
	Если ТабСоставКолонок.НайтиСтроки(Новый Структура("ПометкаУдаления",Ложь)).Количество()=0 Тогда
		
		Сообщить(НСтр("ru = 'Не определен состав колонок.'"));
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещениеЗапись = Новый ОписаниеОповещения("СоздатьПоказателиСправочник_Завершение", ЭтотОбъект);
	ЗаписатьСПроверкой(ОписаниеОповещениеЗапись);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОсновнойБланкСводнойТаблицы_Завершение(Результат, ДополнительныеПараметры) Экспорт
	Если ОбработатьРезультатЗаписьИЗакрытьФорму(Результат) Тогда
		Если ЗначениеЗаполнено(БланкСводнойТаблицыПоУмолчанию) Тогда
			СтруктураПараметров =  Новый Структура;
			СтруктураПараметров.Вставить("Ключ", БланкСводнойТаблицыПоУмолчанию);
			ОткрытьФорму("Справочник.БланкиОтчетов.Форма." + "ФормаМакетаСводнаяТаблица", СтруктураПараметров);
		Иначе	
			СозданныйБланк = ПолучитьБланкСводнойТаблицы();
			Если СозданныйБланк = Неопределено Тогда
				СозданныйБланк = УправлениеОтчетамиКлиентУХ.СоздатьБланкСводнойТаблицыИОткрытьФорму(Объект.Ссылка, ВладелецФормы);
				БланкСводнойТаблицыПоУмолчанию = СозданныйБланк;
				СохранитьБланкСТПоУмолчанию();	
			Иначе		
				БланкСводнойТаблицыПоУмолчанию = СозданныйБланк;
				СохранитьБланкСТПоУмолчанию();	
				СтруктураПараметров =  Новый Структура;
				СтруктураПараметров.Вставить("Ключ", БланкСводнойТаблицыПоУмолчанию);
				ОткрытьФорму("Справочник.БланкиОтчетов.Форма." + "ФормаМакетаСводнаяТаблица", СтруктураПараметров);
			КонецЕсли;	
		КонецЕсли;
	Иначе
		// Не требуется выполнения действий.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОсновнойБланкСводнойТаблицы(Команда)
	ОписаниеОповещениеЗапись = Новый ОписаниеОповещения("ОткрытьОсновнойБланкСводнойТаблицы_Завершение", ЭтотОбъект);
	ЗаписатьСПроверкой(ОписаниеОповещениеЗапись);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСводнуюТаблицу(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(БланкСводнойТаблицыПоУмолчанию) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВидОтчета", Объект.Ссылка);
		ПараметрыФормы.Вставить("Бланк", БланкСводнойТаблицыПоУмолчанию);
		Имя = "Обработка.СводнаяТаблица.Форма";
		ОткрытьФорму(Имя, ПараметрыФормы, ЭтаФорма);
	Иначе
		ТекстСообщения = НСтр("ru = 'Для выполнения данной операции требуется сохранить вид отчета и указать основной бланк.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбъектДляСогласованияЗначенийПриИзмененииНаСервере()
	
	Если Объект.ОбъектДляСогласованияЗначений=Перечисления.ОбъектыСогласованияЗначенийПоказателейОтчетов.Ракурс Тогда
		
		Объект.СохранятьИсториюИзменений=Ложь;
				
	КонецЕсли;
	
	УстановитьВидимость();
		
КонецПроцедуры

&НаКлиенте
Процедура ОбъектДляСогласованияЗначенийПриИзменении(Элемент)
	
	ОбъектДляСогласованияЗначенийПриИзмененииНаСервере();
	
КонецПроцедуры

Процедура СохранитьБланкСТПоУмолчанию();
	
	УправлениеОтчетамиУХ.УстановитьЭлементПоУмолчаниюДляВидаОтчета(БланкСводнойТаблицыПоУмолчанию    , Объект.Ссылка, Перечисления.ЭлементыНастройкиОтчета.БланкСводнойТаблицы);
	
КонецПроцедуры

Функция ПолучитьБланкСводнойТаблицы() 
	
	   Запрос = Новый Запрос;
	   Запрос.Текст = "ВЫБРАТЬ
	                  |	БланкиОтчетов.Ссылка
	                  |ИЗ
	                  |	Справочник.БланкиОтчетов КАК БланкиОтчетов
	                  |ГДЕ
	                  |	БланкиОтчетов.Владелец = &Владелец
	                  |	И БланкиОтчетов.РежимБланка = 1
	                  |	И БланкиОтчетов.ПометкаУдаления = Ложь";
	   
	   Запрос.УстановитьПараметр("Владелец",Объект.Ссылка);
	   
	   Результат = Запрос.Выполнить();
	   Выборка = Результат.Выбрать();
	   
	   Пока Выборка.Следующий() Цикл 
	   	    Возврат Выборка.Ссылка; 
	   КонецЦикла;
	   		
	   Возврат Неопределено;
	   
КонецФункции	

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ПараметрыЗаписи=Новый Структура("Закрыть");
	Записать(ПараметрыЗаписи);
		
КонецПроцедуры

&НаКлиенте
Процедура Протоколы(Команда)
	
	ОткрытьФорму("Справочник.ПротоколируемыеСобытия.ФормаСписка",Новый Структура("Отбор",Новый Структура("Объект",Объект.Ссылка)));
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	// Сформируем код.
	Если НЕ ЗначениеЗаполнено(Объект.Код) Тогда
		Объект.Код = СформироватьКодПоНаименованию(Объект.Наименование);
	Иначе
		// Код уже заполнен. Не изменяем существующее значение.
	КонецЕсли;
	// Сформируем полное наименование.
	Если НЕ ЗначениеЗаполнено(Объект.ПолноеНаименование) Тогда
		Объект.ПолноеНаименование = СокрЛП(Объект.Наименование);
	Иначе
		// Код уже заполнен. Не изменяем существующее значение.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСоответствия(Команда)
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		ФормаНастройкиСоответствий = "ОбщаяФорма" + "." + "ФормаПроверкиНастройкиСоответствий";
		ОткрытьФорму(ФормаНастройкиСоответствий, Новый Структура("ПланВидовХарактеристикБД", ПланВидовХарактеристик));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия="ЗакрытаФормаПроверкиНастроекСоответствия" Тогда
		
		Элементы.НастройкиСоответствия.Видимость=НЕ ПроверитьНастройкиСоответствия();
		
	ИначеЕсли ИмяСобытия="ИзмененОтборСчетовОСВ" И Параметр.ПланСчетов=Объект.ПланСчетов Тогда
		
		ОбновитьТаблицуОтбораСчетов(Параметр);
		Модифицированность=Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуОтбораСчетов(Параметр)
	
	объект.ИспользуемыеСчета.Очистить();
	ТаблицаВыбранныхСчетов=ПолучитьИзВременногоХранилища(Параметр.АдресТаблицыСчетов);
	
	Для Каждого Строка ИЗ ТаблицаВыбранныхСчетов Цикл
		
		НоваяСтрока=Объект.ИспользуемыеСчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьТаблицуОтбораСчетов(Параметр)

&НаКлиенте
Процедура ОткрытьОсновнойБланкМногопериодный_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ОбработатьРезультатЗаписьИЗакрытьФорму(Результат) Тогда
		ПараметрыОткрытияФормы = Новый Структура;
		
		Если ЗначениеЗаполнено(БланкОтображенияПоУмолчаниюМногопериодный) Тогда
			ПараметрыОткрытияФормы.Вставить("Ключ", БланкОтображенияПоУмолчаниюМногопериодный);
		Иначе
			ПараметрыОткрытияФормы.Вставить("ЗначенияЗаполнения", Новый Структура("Владелец", Объект.Ссылка));
		КонецЕсли;
		Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
			ФормаБланка = "ФормаМакетаАналитическийБланк";
		Иначе
			ФормаБланка = "ФормаМакета";
		КонецЕсли;
		ОткрытьФорму("Справочник.БланкиОтчетов.Форма." + ФормаБланка, ПараметрыОткрытияФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОсновнойБланкМногопериодный(Команда)
	ОписаниеОповещениеЗапись = Новый ОписаниеОповещения("ОткрытьОсновнойБланкМногопериодный_Завершение", ЭтотОбъект);
	ЗаписатьСПроверкой(ОписаниеОповещениеЗапись);
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыВыбора() 
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("АдресТаблицыСчетов",ПоместитьВоВременноеХранилище(Объект.ИспользуемыеСчета.Выгрузить()));
	СтруктураПараметров.Вставить("ПланСчетов",Объект.ПланСчетов);
	
	Возврат СтруктураПараметров;
	
КонецФункции // ПодготовитьПараметрыВыбора() 

&НаКлиенте
Процедура ПоВыбраннымСчетамПриИзменении(Элемент)
	
	Объект.ПолучатьБухгалтерскиеИтогиПоГруппирующимСчетам=Истина;
	
	Объект.ИспользоватьПоУмолчанию				= Ложь;
	Объект.СокращеннаяОСВ						= Ложь;
	Объект.ВыводитьЗабалансовыеСчета			= Ложь;
	Объект.НеВыводитьГруппирующиеСчета			= Ложь;
	Объект.НеФормироватьАналитическиеРаскрытия	= Ложь;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтборНажатие(Элемент)
	
	ОткрытьФорму("Справочник.СчетаБД.Форма.ФормаВыбораСчетовИСубконто",ПодготовитьПараметрыВыбора(),ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОСВСчетИспользуетсяПриИзменении(Элемент)
	
	ТекущиеДанные=Элементы.ТаблицаОСВ.ТекущиеДанные;
	
	Для Индекс=1 по 3 Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные["Субконто"+Индекс]) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекущиеДанные["Субконто"+Индекс+"Используется"]=ТекущиеДанные.СчетИспользуется;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОСВСубконто1ИспользуетсяПриИзменении(Элемент)
	
	ТекущиеДанные=Элементы.ТаблицаОСВ.ТекущиеДанные;	
	
	Если НЕ ТекущиеДанные.Субконто1Используется Тогда
		
		ТекущиеДанные.Субконто2Используется=Ложь;
		ТекущиеДанные.Субконто3Используется=Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОСВСубконто2ИспользуетсяПриИзменении(Элемент)
	
	ТекущиеДанные=Элементы.ТаблицаОСВ.ТекущиеДанные;	
	
	Если НЕ ТекущиеДанные.Субконто2Используется Тогда
		
		ТекущиеДанные.Субконто3Используется=Ложь;
		
	Иначе
		
		ТекущиеДанные.Субконто1Используется=Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОСВСубконто3ИспользуетсяПриИзменении(Элемент)
	
	ТекущиеДанные=Элементы.ТаблицаОСВ.ТекущиеДанные;	
	
	Если ТекущиеДанные.Субконто3Используется Тогда
				
		ТекущиеДанные.Субконто1Используется=Истина;
		ТекущиеДанные.Субконто2Используется=Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#Область УстановкаЛимитов

&НаКлиенте
Процедура МожетИспользоватьсяДляУстановкиЛимитовПриИзменении(Элемент)
	
	ПараметрыСтрокИКолонок = ПараметрыДоступныхСтрокИКолонок();
	СообщенияПользователю = Новый Массив;
	
	Если Объект.Ссылка.Пустая() Или Не ПараметрыСтрокИКолонок.ЕстьСтроки Тогда
		СообщенияПользователю.Добавить(Нстр("ru = 'Не введена ни одна строка, связанная хотя бы с одним из справочников статей бюджетов'"));
	КонецЕсли;
	Если Объект.Ссылка.Пустая() Или Не ПараметрыСтрокИКолонок.ЕстьКолонки Тогда
		СообщенияПользователю.Добавить(Нстр("ru = 'Не введена ни одна колонка с типом Число'"));
	КонецЕсли;
	
	Если СообщенияПользователю.Количество() Тогда
		Объект.МожетИспользоватьсяДляУстановкиЛимитов = Ложь;
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрСоединить(СообщенияПользователю, Символы.ПС));	
	КонецЕсли;
	
	УстановитьВидимость();        
	
КонецПроцедуры

&НаСервере
Функция ПараметрыДоступныхСтрокИКолонок()
	
	ПараметрыСтрокИКолонок = Новый Структура("ЕстьСтроки, ЕстьКолонки");
	
	Предназначение = Новый Массив;
	Предназначение.Добавить(Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств);
	Предназначение.Добавить(Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов);
	Предназначение.Добавить(Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", 		Объект.Ссылка);
	Запрос.УстановитьПараметр("Предназначение", Предназначение);
	Запрос.УстановитьПараметр("ТипЗначения", 	Перечисления.ТипыЗначенийПоказателейОтчетов.Число);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &Владелец
	|	И СтрокиОтчетов.Предназначение В(&Предназначение)
	|	И НЕ СтрокиОтчетов.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КолонкиОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|ГДЕ
	|	КолонкиОтчетов.Владелец = &Владелец
	|	И КолонкиОтчетов.ТипЗначения = &ТипЗначения
	|	И НЕ КолонкиОтчетов.ПометкаУдаления";
		
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ПараметрыСтрокИКолонок.ЕстьСтроки = Не РезультатЗапроса[0].Пустой();
	ПараметрыСтрокИКолонок.ЕстьКолонки = Не РезультатЗапроса[1].Пустой();
	
	Возврат ПараметрыСтрокИКолонок;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКолонкиЛимитовНаФорме()
	
	//
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		ИспользованиеБюджетов = Новый Структура;
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(
			"УстановкаЛимитовУХ.ПолучитьИспользованиеБюджетов",
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИспользованиеБюджетов));
		БюджетДвиженияДенежныхСредствИспользуется = ИспользованиеБюджетов.БюджетДвиженияДенежныхСредствИспользуется;
		БюджетДоходовРасходовИспользуется = ИспользованиеБюджетов.БюджетДоходовРасходовИспользуется;
		БюджетЗакупокИспользуется = ИспользованиеБюджетов.БюджетЗакупокИспользуется;
	Иначе
		БюджетДвиженияДенежныхСредствИспользуется = Ложь;
		БюджетДоходовРасходовИспользуется = Ложь;
		БюджетЗакупокИспользуется = Ложь;
	КонецЕсли;
	
	Если НЕ БюджетДвиженияДенежныхСредствИспользуется И НЕ БюджетДоходовРасходовИспользуется И НЕ БюджетЗакупокИспользуется Тогда
		Элементы.ГруппаУстановкаЛимитов.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не Объект.МожетИспользоватьсяДляУстановкиЛимитов Тогда
		Возврат;
	КонецЕсли;
	
	ВидыБюджетов = Перечисления.ПредназначенияЭлементовСтруктурыОтчета;
	Для каждого Строка Из Объект.ПараметрыУстановкиЛимитов Цикл
		Если Строка.Предназначение = ВидыБюджетов.БюджетДвиженияДенежныхСредств И БюджетДвиженияДенежныхСредствИспользуется Тогда
			КолонкаДляУстановкиЛимитовБДДС = Строка.КолонкаОтчета;
		ИначеЕсли Строка.Предназначение = ВидыБюджетов.БюджетДоходовИРасходов И БюджетДоходовРасходовИспользуется Тогда
			КолонкаДляУстановкиЛимитовБДР = Строка.КолонкаОтчета;
		ИначеЕсли Строка.Предназначение = ВидыБюджетов.БюджетДвиженияРесурсов И БюджетЗакупокИспользуется Тогда
			КолонкаДляУстановкиЛимитовЗакупок = Строка.КолонкаОтчета;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьКолонокУстановкиЛимитов()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиОтчетов.Предназначение КАК Предназначение
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &Владелец
	|	И НЕ СтрокиОтчетов.ПометкаУдаления"
	);
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	Предназначения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Предназначение");
	
	ВидыБюджетов = Перечисления.ПредназначенияЭлементовСтруктурыОтчета;
	
	Элементы.КолонкаДляУстановкиЛимитовБДДС.ТолькоПросмотр = Предназначения.Найти(ВидыБюджетов.БюджетДвиженияДенежныхСредств) = Неопределено;
	Элементы.КолонкаДляУстановкиЛимитовБДР.ТолькоПросмотр = Предназначения.Найти(ВидыБюджетов.БюджетДоходовИРасходов) = Неопределено;
	Элементы.КолонкаДляУстановкиЛимитовЗакупок.ТолькоПросмотр = Предназначения.Найти(ВидыБюджетов.БюджетДвиженияРесурсов) = Неопределено;
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПараметрыУстановкиЛимитов()
	
	Объект.ПараметрыУстановкиЛимитов.Очистить();
	
	Если (НЕ БюджетДвиженияДенежныхСредствИспользуется
		И НЕ БюджетДоходовРасходовИспользуется 
		И НЕ БюджетЗакупокИспользуется) Тогда
		
		Если Объект.МожетИспользоватьсяДляУстановкиЛимитов Тогда
			Объект.МожетИспользоватьсяДляУстановкиЛимитов = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Объект.МожетИспользоватьсяДляУстановкиЛимитов Тогда
		Возврат;
	КонецЕсли;
	
	//
	Колонки = Новый Структура;
	Если БюджетДвиженияДенежныхСредствИспользуется Тогда
		Колонки.Вставить("КолонкаДляУстановкиЛимитовБДДС", 
			ПредопределенноеЗначение("Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств"));
	КонецЕсли;
	Если БюджетДоходовРасходовИспользуется Тогда
		Колонки.Вставить("КолонкаДляУстановкиЛимитовБДР", 
			ПредопределенноеЗначение("Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов"));
	КонецЕсли;
	Если БюджетЗакупокИспользуется Тогда	
		Колонки.Вставить("КолонкаДляУстановкиЛимитовЗакупок", 
			ПредопределенноеЗначение("Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов"));
	КонецЕсли;
	
	Для Каждого КлючЗначение Из Колонки Цикл
		Колонка = ЭтаФорма[КлючЗначение.Ключ];
		Если НЕ Элементы[КлючЗначение.Ключ].ТолькоПросмотр И ЗначениеЗаполнено(Колонка) Тогда
			Строка = Объект.ПараметрыУстановкиЛимитов.Добавить();
			Строка.Предназначение = КлючЗначение.Значение;
			Строка.КолонкаОтчета = Колонка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОтчета1КодПриИзменении(Элемент)
	
	Элементы.ПараметрыОтчета_Таблица.ТекущиеДанные.Код = СтрЗаменить(Элементы.ПараметрыОтчета_Таблица.ТекущиеДанные.Код, " ", "");
	
КонецПроцедуры

#КонецОбласти 

ВыполняетсяЗакрытие = Ложь;
