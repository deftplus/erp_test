#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП
//
// Возвращаемое значение:
//	Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	Результат = Новый Массив;
	Возврат Результат;
КонецФункции

//++ НЕ УТ

// Возвращает параметры настройки счетов учета в документе.
//  
// Возвращаемое значение:
//  см. НастройкаСчетовУчетаСервер.ПараметрыНастройки.
//
Функция ПараметрыНастройкиСчетовУчета() Экспорт
	
	ПараметрыНастройки = НастройкаСчетовУчетаСервер.ПараметрыНастройки();
	
	ПараметрыНастройки.ДоступностьПоОперации = Истина;
	ПараметрыНастройки.ПутьКДанным = "Объект.Списание";
	ПараметрыНастройки.ТипСтатьи   = "ТипСтатьи";
	ПараметрыНастройки.Организация = "";
	
	ПараметрыНастройки.ЭлементыФормы.Добавить("СписаниеПредставлениеОтраженияОперации");
	
	Возврат ПараметрыНастройки;
	
КонецФункции
//-- НЕ УТ

// Возвращает параметры выбора статей и аналитик.
// 
// Возвращаемое значение:
//  см. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики.
//
Функция ПараметрыВыбораСтатейИАналитик(НазначениеПравила) Экспорт 
	
	//++ НЕ УТ
	Если НазначениеПравила = Перечисления.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства Тогда
		
		// Для правила На партии.
		ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
		ПараметрыВыбора.ПутьКДанным = "Объект.Списание";
		ПараметрыВыбора.Статья      = "СтатьяРасходов";
		ПараметрыВыбора.ТипСтатьи   = "ТипСтатьи";
		
		ПараметрыВыбора.АналитикаРасходов 		 = "АналитикаРасходов";
		ПараметрыВыбора.АналитикаАктивовПассивов = "АналитикаАктивовПассивов";
		
		ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
		
		МассивВариантов = Новый Массив;
		МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности);
		МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов);
		МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы);
		МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НеРаспределять);
		
		ПараметрыВыбора.ОтборСтатейРасходов.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
		ПараметрыВыбора.ОтборСтатейРасходов.ВариантРаспределенияРасходов = МассивВариантов;
		
		ПараметрыВыбора.ВыборСтатьиАктивовПассивов = Истина;
		
		ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СписаниеСтатьяРасходов");
		ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("СписаниеАналитикаРасходов");
		ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("СписаниеАналитикаАктивовПассивов");
	
	КонецЕсли;
	//-- НЕ УТ
	
	Если НазначениеПравила = Перечисления.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаРБП Тогда
		// Для правила РБП.
		ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
		ПараметрыВыбора.ПутьКДанным = "Объект";
		ПараметрыВыбора.Статья      = "СтатьяСписанияРБП";
		
		ПараметрыВыбора.АналитикаРасходов 	= "АналитикаРасходовРБП";	
		ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
		
		ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяСписанияРБП");
		ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("АналитикаРасходовРБП");
	
	КонецЕсли;
	
	Возврат ПараметрыВыбора;
	
КонецФункции

//++ НЕ УТ

// Возвращает представление правила распределения по типу базы распределения.
// Параметры:
//	БазаРаспределения - ПеречислениеСсылка.ТипыБазыРаспределенияРасходов - база распределения.
// Возвращаемое значение:
//	Строка - представление базы распределения.
Функция ПолучитьПредставлениеПравила(БазаРаспределения) Экспорт
	
	ПредставлениеПравила = "";
	Если БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоРаботУказанныхВидов Тогда
		ПредставлениеПравила = НСтр("ru = 'Количество работ:';
									|en = 'Number of works:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.НормативыОплатыТруда Тогда
		ПредставлениеПравила = НСтр("ru = 'Нормативная стоимость работ:';
									|en = 'Standard work cost:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.СуммаРасходовНаОплатуТруда Тогда
		ПредставлениеПравила = НСтр("ru = 'Стоимость работ:';
									|en = 'Work cost:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоУказанныхМатериалов Тогда
		ПредставлениеПравила = НСтр("ru = 'Количество материалов:';
									|en = 'Quantity of materials:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ОбъемУказанныхМатериалов Тогда
		ПредставлениеПравила = НСтр("ru = 'Объем материалов:';
									|en = 'Volume of materials:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.СуммаМатериальныхЗатрат Тогда
		ПредставлениеПравила = НСтр("ru = 'Стоимость материалов:';
									|en = 'Material cost:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ВесУказанныхМатериалов Тогда
		ПредставлениеПравила = НСтр("ru = 'Вес материалов:';
									|en = 'Weight of materials:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.СуммаМатериальныхИТрудозатрат Тогда
		ПредставлениеПравила = НСтр("ru = 'Стоимость материалов и оплаты труда:';
									|en = 'Material and labor cost:'");		
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ВесПродукции
		Или БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ВесПродукцииСУчетомБудущихВыпусков Тогда
		ПредставлениеПравила = НСтр("ru = 'Вес продукции:';
									|en = 'Product weight:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоПродукции
		Или БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоПродукцииСУчетомБудущихВыпусков Тогда
		ПредставлениеПравила = НСтр("ru = 'Количество продукции:';
									|en = 'Product quantity:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ОбъемПродукции
		Или БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ОбъемПродукцииСУчетомБудущихВыпусков Тогда
			ПредставлениеПравила = НСтр("ru = 'Объем продукции:';
										|en = 'Volume of products:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ПлановаяСтоимостьПродукции 
		Или БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ПлановаяСтоимостьПродукцииСУчетомБудущихВыпусков Тогда
			ПредставлениеПравила = НСтр("ru = 'Плановая стоимость продукции:';
										|en = 'Standard product cost:'");
	КонецЕсли;
	
	ШаблонНаименования = "%1 %2";
	Возврат СтрШаблон(ШаблонНаименования, СокрЛП(ПредставлениеПравила),
		НСтр("ru = 'установлен дополнительный отбор.';
			|en = 'additional filter is set.'"));
	
КонецФункции

//-- НЕ УТ

Процедура УстановитьНазначениеПравилаПоВариантуРаспределения(Параметры) 
	
	Если Параметры.Свойство("ВариантРаспределенияРасходов") Тогда
		Если НЕ Параметры.Свойство("Отбор") Тогда
			Параметры.Вставить("Отбор", Новый Структура);
		КонецЕсли;
		Если НЕ Параметры.Отбор.Свойство("НазначениеПравила") Тогда
			Параметры.Отбор.Вставить("НазначениеПравила", ПолучитьНазначениеПравилаПоВариантуРаспределения(Параметры.ВариантРаспределенияРасходов));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает назначение правила, соответствующее варианту распределения.
// 
// Параметры:
//  ВариантРаспределенияРасходов - ПеречислениеСсылка.ВариантыРаспределенияРасходов - Вариант распределения расходов
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.НазначениеПравилРаспределенияРасходов - назначение правила, соответствующее варианту распределения
Функция ПолучитьНазначениеПравилаПоВариантуРаспределения(ВариантРаспределенияРасходов) Экспорт
	
	Если ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров Тогда
		Возврат Перечисления.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаСебестоимостьТоваров;
	ИначеЕсли ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов Тогда
		Возврат Перечисления.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаРБП;
	//++ НЕ УТ
	ИначеЕсли ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьПроизводства Тогда
		Возврат Перечисления.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаСебестоимостьПроизводства;
	ИначеЕсли ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты Тогда
		Возврат Перечисления.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства;
	ИначеЕсли ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаОбъектыВозникновенияЗатрат Тогда
		Возврат Перечисления.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаОВЗ;
	//-- НЕ УТ
	Иначе
		Возврат Перечисления.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаФинансовыйРезультат;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаВыбора" ИЛИ Не ВидФормы = "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Ключ") Тогда
		
		РеквизитыКПолучению = Новый Массив;
		РеквизитыКПолучению.Добавить("НазначениеПравила");
		//++ НЕ УТ
		РеквизитыКПолучению.Добавить("Устаревшее");
		//-- НЕ УТ
		ЗначенияРеквизитов = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(Параметры.Ключ, РеквизитыКПолучению);
		
		//++ НЕ УТ
		Если ЗначенияРеквизитов.Устаревшее Тогда
			ВыбраннаяФорма = "УстаревшаяФормаПравила";
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		//-- НЕ УТ
		
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования") Тогда
		ЗначенияРеквизитов = Параметры.ЗначениеКопирования;
	ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения")
		И Параметры.ЗначенияЗаполнения.Свойство("НазначениеПравила") Тогда
		ЗначенияРеквизитов = Параметры.ЗначенияЗаполнения;
	Иначе
		Возврат;
	КонецЕсли;
	
	НаФР = ПредопределенноеЗначение("Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаФинансовыйРезультат");
	НаРБП = ПредопределенноеЗначение("Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаРБП");
	//++ НЕ УТ
	Материалы = ПредопределенноеЗначение("Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеМатериаловИРабот");
	НаПартии = ПредопределенноеЗначение("Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства");
	ПоПодразделениям = ПредопределенноеЗначение("Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоПодразделениям");
	НаОВЗ = ПредопределенноеЗначение("Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаОВЗ");
	//-- НЕ УТ
	НаСебестоимость = ПредопределенноеЗначение("Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаСебестоимостьТоваров");
	
	ФормыПоНазначению = Новый Соответствие;
	ФормыПоНазначению.Вставить(НаФР, "ФормаНастроекФР");
	ФормыПоНазначению.Вставить(НаРБП, "ФормаНастроекРБП");
	//++ НЕ УТ
	ФормыПоНазначению.Вставить(НаПартии, "ФормаНастроекНаПартии");
	ФормыПоНазначению.Вставить(ПоПодразделениям, "ФормаПоказателя");
	ФормыПоНазначению.Вставить(НаОВЗ, "ФормаПоказателя");
	ФормыПоНазначению.Вставить(Материалы, "УстаревшаяФормаПравила");
	//-- НЕ УТ
	ФормыПоНазначению.Вставить(НаСебестоимость, "ФормаНастроекНаСебестоимостьТоваров");
		
	ВыбраннаяФорма = ФормыПоНазначению.Получить(ЗначенияРеквизитов.НазначениеПравила);
	
	Если ЗначениеЗаполнено(ВыбраннаяФорма) Тогда
		
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	УстановитьНазначениеПравилаПоВариантуРаспределения(Параметры);
	
КонецПроцедуры

#КонецЕсли

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ПравилаРаспределенияРасходов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.7.28";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d924c134-bcd6-4cf2-b0a4-8013e967c039");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ПравилаРаспределенияРасходов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.Комментарий = НСтр("ru = 'Создаются новые элементы по элементам справочника ""Способы распределения по направлениям деятельности""
	|Создаются новые элементы по данным ПВХ Статьи расходов у которых вариант распределения на РБП и заполнена статья расходов получатель РБП
	|Заполняет реквизит ""Настройка счетов учета"" в табличной части Списание';
	|en = 'New items for items of the directory ""Allocation methods by lines of business"" are generated
	|New items by PWH data Expense items are generated where the allocation option is for RBP and the expense item RBP beneficiary is filled.
	|Fills in the ""Ledger account settings"" attribute in the Write-off table'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ПравилаРаспределенияРасходов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.СпособыРаспределенияПоНаправлениямДеятельности.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ПравилаРаспределенияРасходов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ПравилаРаспределенияРасходов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "МультиязычностьСервер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьЭлементыНачальнымиДанными";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ПланыВидовХарактеристик.СтатьиРасходов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	//++ НЕ УТ
	//++ Локализация
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ПорядокОтраженияНаСчетахУчета.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
	//-- Локализация
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.ОбработатьЗаполнениеНастроекКомпоновки";
	НоваяСтрока.Порядок = "Любой";
	//-- НЕ УТ

КонецПроцедуры

// Регистрирует данные для обработчика обновления.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Статьи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СпособыРаспределенияПоНаправлениямДеятельности КАК СпособыРаспределения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
		|		ПО СпособыРаспределения.Ссылка = Статьи.УдалитьСпособРаспределенияПоНаправлениямДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаРаспределенияРасходов КАК ПравилаРаспределенияРасходов
		|		ПО (ПравилаРаспределенияРасходов.УдалитьСпособРаспределения = СпособыРаспределения.Ссылка)
		|ГДЕ
		|	ПравилаРаспределенияРасходов.Ссылка ЕСТЬ NULL
		|	И (Статьи.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
		|		ИЛИ Статьи.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтатьиРасходов.Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаРаспределенияРасходов КАК ПравилаРаспределенияРасходов
		|		ПО СтатьиРасходов.УдалитьСтатьяРасходов = ПравилаРаспределенияРасходов.СтатьяСписанияРБП
		|ГДЕ
		|	НЕ СтатьиРасходов.УдалитьСтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
		|	И ПравилаРаспределенияРасходов.Ссылка ЕСТЬ NULL
		|	И (СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
		|		ИЛИ СтатьиРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтатьиРасходов.Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаРаспределенияРасходов КАК ПравилаРаспределенияРасходов
		|		ПО СтатьиРасходов.ПравилоРаспределенияНаСебестоимость = ПравилаРаспределенияРасходов.БазаРаспределенияПоПартиям
		|ГДЕ
		|	НЕ СтатьиРасходов.ПравилоРаспределенияНаСебестоимость = ЗНАЧЕНИЕ(Перечисление.ПравилаРаспределенияНаСебестоимостьТоваров.ПустаяСсылка)
		|	И ПравилаРаспределенияРасходов.Ссылка ЕСТЬ NULL
		|	И (СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
		|		ИЛИ СтатьиРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))
		//++ НЕ УТ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПравилаРаспределенияРасходов.Ссылка
		|ИЗ
		|	Справочник.ПравилаРаспределенияРасходов КАК ПравилаРаспределенияРасходов
		|ГДЕ
		|	ИСТИНА В
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			Справочник.ПравилаРаспределенияРасходов.Списание КАК ТабЧастьСписание
		|		ГДЕ
		|			ТабЧастьСписание.Ссылка = ПравилаРаспределенияРасходов.Ссылка
		|			И ТабЧастьСписание.УдалитьСчетУчета <> &СчетУчетаПустаяСсылка
		|			И ТабЧастьСписание.НастройкаСчетовУчета = ЗНАЧЕНИЕ(Справочник.НастройкиСчетовУчетаПрочихОпераций.ПустаяСсылка))
		//-- НЕ УТ
		|";
		
	//++ НЕ УТ
	Запрос.УстановитьПараметр("СчетУчетаПустаяСсылка", РеглУчетКлиентСервер.СсылкаПланСчетов());
	//-- НЕ УТ
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Обработка данных для перехода на новую версию.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	#Область ГенерацияНовыхЭлементов
	
	ПолноеИмяОбъекта = "ПланВидовХарактеристик.СтатьиРасходов";
	
	СоответствиеБаз = Новый Соответствие();
	СоответствиеБаз.Вставить(Перечисления.ПравилаРаспределенияНаСебестоимостьТоваров.ПропорциональноКоличеству,
		Перечисления.ТипыБазыРаспределенияРасходов.КоличествоТоваров);
	СоответствиеБаз.Вставить(Перечисления.ПравилаРаспределенияНаСебестоимостьТоваров.ПропорциональноВесу,
		Перечисления.ТипыБазыРаспределенияРасходов.ВесТоваров);
	СоответствиеБаз.Вставить(Перечисления.ПравилаРаспределенияНаСебестоимостьТоваров.ПропорциональноОбъему,
		Перечисления.ТипыБазыРаспределенияРасходов.ОбъемТоваров);
	СоответствиеБаз.Вставить(Перечисления.ПравилаРаспределенияНаСебестоимостьТоваров.ПропорциональноСебестоимости,
		Перечисления.ТипыБазыРаспределенияРасходов.СебестоимостьТоваров);
	
	ДопПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ОбновлениеИнформационнойБазы.УстановитьИсточникДанных(ДопПараметры, "УдалитьСпособРаспределенияПоНаправлениямДеятельности");
	ОбновлениеИнформационнойБазы.УстановитьИсточникДанных(ДопПараметры, "УдалитьСтатьяРасходов");
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, ДопПараметры);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.Ссылка, 
				"УдалитьСпособРаспределенияПоНаправлениямДеятельности, УдалитьСтатьяРасходов, УдалитьСтатьяРасходов.Наименование, 
				|ВариантРаспределенияРасходовРегл, ВариантРаспределенияРасходовУпр, ПравилоРаспределенияНаСебестоимость");
			
			Если ЗначениеЗаполнено(ЗначенияРеквизитов.УдалитьСпособРаспределенияПоНаправлениямДеятельности)
				И (ЗначенияРеквизитов.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности
					Или ЗначенияРеквизитов.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности) Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ПравилаРаспределенияРасходов.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.ПравилаРаспределенияРасходов КАК ПравилаРаспределенияРасходов
					|ГДЕ
					|	ПравилаРаспределенияРасходов.УдалитьСпособРаспределения = &УдалитьСпособРаспределения";
				
				Запрос.УстановитьПараметр("УдалитьСпособРаспределения", 
					ЗначенияРеквизитов.УдалитьСпособРаспределенияПоНаправлениямДеятельности);
				
				Если Запрос.Выполнить().Пустой() Тогда
				
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	СпособыРаспределенияПоНаправлениямДеятельности.НаправленияДеятельности.(
						|		НаправлениеДеятельности КАК НаправлениеДеятельности,
						|		Коэффициент КАК Коэффициент
						|	) КАК НаправленияДеятельности,
						|	СпособыРаспределенияПоНаправлениямДеятельности.ПравилоРаспределения КАК ПравилоРаспределения,
						|	СпособыРаспределенияПоНаправлениямДеятельности.Наименование КАК Наименование
						|ИЗ
						|	Справочник.СпособыРаспределенияПоНаправлениямДеятельности КАК СпособыРаспределенияПоНаправлениямДеятельности
						|ГДЕ
						|	СпособыРаспределенияПоНаправлениямДеятельности.Ссылка = &Ссылка";
					
					Запрос.УстановитьПараметр("Ссылка", ЗначенияРеквизитов.УдалитьСпособРаспределенияПоНаправлениямДеятельности);
					
					Результат = Запрос.Выполнить();
					РеквизитыСпособаРаспределения = Результат.Выбрать();
					РеквизитыСпособаРаспределения.Следующий();
					
					НовоеПравило = Справочники.ПравилаРаспределенияРасходов.СоздатьЭлемент();
					НовоеПравило.Наименование = РеквизитыСпособаРаспределения.Наименование;
					НовоеПравило.НазначениеПравила = Перечисления.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаФинансовыйРезультат;
					НовоеПравило.УдалитьСпособРаспределения = ЗначенияРеквизитов.УдалитьСпособРаспределенияПоНаправлениямДеятельности;
					
					Если РеквизитыСпособаРаспределения.ПравилоРаспределения = Перечисления.ПравилаРаспределенияПоНаправлениямДеятельности.ПропорциональноВаловойПрибыли Тогда
						НовоеПравило.БазаРаспределенияПоПартиям = Перечисления.ТипыБазыРаспределенияРасходов.ВаловаяПрибыль;
					ИначеЕсли РеквизитыСпособаРаспределения.ПравилоРаспределения = Перечисления.ПравилаРаспределенияПоНаправлениямДеятельности.ПропорциональноДоходам Тогда
						НовоеПравило.БазаРаспределенияПоПартиям = Перечисления.ТипыБазыРаспределенияРасходов.ВыручкаОтПродаж;
					ИначеЕсли РеквизитыСпособаРаспределения.ПравилоРаспределения = Перечисления.ПравилаРаспределенияПоНаправлениямДеятельности.ПропорциональноРасходам Тогда
						НовоеПравило.БазаРаспределенияПоПартиям = Перечисления.ТипыБазыРаспределенияРасходов.СебестоимостьПродаж;
					ИначеЕсли РеквизитыСпособаРаспределения.ПравилоРаспределения = Перечисления.ПравилаРаспределенияПоНаправлениямДеятельности.ПропорциональноКоэффициентам Тогда
						
						НовоеПравило.БазаРаспределенияПоПартиям = Неопределено;
						НовоеПравило.НаправлениеРаспределения = Перечисления.НаправлениеРаспределенияПоПодразделениям.ПоКоэффициентам;
						НаправленияДеятельности = РеквизитыСпособаРаспределения.НаправленияДеятельности.Выгрузить();
						Для Каждого ДанныеНД Из НаправленияДеятельности Цикл
							
							НоваяСтрока = НовоеПравило.НаправленияДеятельности.Добавить();
							НоваяСтрока.НаправлениеДеятельности = ДанныеНД.НаправлениеДеятельности;
							НоваяСтрока.ДоляСтоимости = ДанныеНД.Коэффициент;
							
						КонецЦикла;
						
					КонецЕсли;
				
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовоеПравило);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначенияРеквизитов.УдалитьСтатьяРасходов)
				И (ЗначенияРеквизитов.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов
					Или ЗначенияРеквизитов.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ПравилаРаспределенияРасходов.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.ПравилаРаспределенияРасходов КАК ПравилаРаспределенияРасходов
					|ГДЕ
					|	ПравилаРаспределенияРасходов.СтатьяСписанияРБП = &СтатьяСписанияРБП";
				
				Запрос.УстановитьПараметр("СтатьяСписанияРБП", 
					ЗначенияРеквизитов.УдалитьСтатьяРасходов);
				
				Если Запрос.Выполнить().Пустой() Тогда
				
					НовоеПравило = Справочники.ПравилаРаспределенияРасходов.СоздатьЭлемент();
					НовоеПравило.Наименование = ЗначенияРеквизитов.УдалитьСтатьяРасходовНаименование;
					НовоеПравило.НазначениеПравила = Перечисления.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаРБП;
					НовоеПравило.КоличествоМесяцев = 3;
					НовоеПравило.БазаРаспределенияРБП = Перечисления.ПравилаРаспределенияРБП.ПоМесяцам;
					НовоеПравило.НачалоПериода = "СДатыВозникновения";
					НовоеПравило.СтатьяСписанияРБП = ЗначенияРеквизитов.УдалитьСтатьяРасходов;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовоеПравило);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначенияРеквизитов.ПравилоРаспределенияНаСебестоимость)
				И (ЗначенияРеквизитов.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров
					Или ЗначенияРеквизитов.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров) Тогда
						
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ПравилаРаспределенияРасходов.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.ПравилаРаспределенияРасходов КАК ПравилаРаспределенияРасходов
					|ГДЕ
					|	ПравилаРаспределенияРасходов.БазаРаспределенияПоПартиям = &ПравилоРаспределенияНаСебестоимость";
				
				Запрос.УстановитьПараметр("ПравилоРаспределенияНаСебестоимость", 
					СоответствиеБаз.Получить(ЗначенияРеквизитов.ПравилоРаспределенияНаСебестоимость));
				
				Если Запрос.Выполнить().Пустой() Тогда
				
					НовоеПравило = Справочники.ПравилаРаспределенияРасходов.СоздатьЭлемент();
					НовоеПравило.Наименование = ЗначенияРеквизитов.ПравилоРаспределенияНаСебестоимость;
					НовоеПравило.НазначениеПравила = Перечисления.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаСебестоимостьТоваров;
					НовоеПравило.БазаРаспределенияПоПартиям = СоответствиеБаз.Получить(ЗначенияРеквизитов.ПравилоРаспределенияНаСебестоимость);
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовоеПравило);
					
				КонецЕсли;
				
			КонецЕсли;

			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	#КонецОбласти
	
	#Область ОбработкаСуществующихЭлементов
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			Ссылка = Выборка.Ссылка;
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
			Блокировка.Заблокировать();
			
			СправочникОбъект = Ссылка.ПолучитьОбъект();
			
			Если СправочникОбъект <> Неопределено Тогда
				//++ НЕ УТ
				НастройкаСчетовУчетаСервер.ЗаполнитьНастройкиСчетовУчета(СправочникОбъект);
				//-- НЕ УТ
			КонецЕсли;
			
			Если СправочникОбъект <> Неопределено И СправочникОбъект.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	#КонецОбласти
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
