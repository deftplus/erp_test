Перем мПоказатели Экспорт;
Перем мОснование Экспорт;
Перем ТекДанныеПараметрическойНастройки;
Перем ОбновитьПометкуУдаленияДляПодчиненных;
Перем ИзменитьРесурсРегистра;


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ

// Процедура переносит показатели из объекта копирования в создаваемый объект.
Процедура ПеренестиПоказатели(ОбъектКопирования)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.Ссылка,
	|	ИсточникиДанныхДляРасчетов.СпособПолучения,
	|	ИсточникиДанныхДляРасчетов.ПоказательОтбор.Код КАК ПоказательОтборКод,
	|	ИсточникиДанныхДляРасчетов.ПоказательОтбор.Владелец КАК ВидОтчетаОтбор,
	|	ИсточникиДанныхДляРасчетов.ПотребительРасчета.Код КАК ПоказательКод,
	|	ИсточникиДанныхДляРасчетов.Код,
	|	ИсточникиДанныхДляРасчетов.Наименование,
	|	ИсточникиДанныхДляРасчетов.ПоказательОтбор.Строка.ПорядковыйНомер КАК НомерСтроки,
	|	ИсточникиДанныхДляРасчетов.ПоказательОтбор.Колонка.ПорядковыйНомер КАК НомерКолонки,
	|	ИсточникиДанныхДляРасчетов.ПоказательОтбор.Владелец.Наименование КАК НаименованиеОтчетаОтбор,
	|	ИсточникиДанныхДляРасчетов.ПотребительРасчета.Наименование КАК НаименованиеПоказателя
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &НазначениеРасчетов
	|	И (НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления)");
	
	Запрос.УстановитьПараметр("НазначениеРасчетов", ОбъектКопирования.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НовыйОперанд = Выборка.Ссылка.Скопировать();
		
		НовыйОперанд.НазначениеРасчетов = Ссылка;
		НовыйОперанд.Код = Выборка.Код;
		
		Если ОбъектКопирования.Владелец <> Владелец Тогда
			НовыйОперанд.ПотребительРасчета = Справочники.ПоказателиОтчетов.НайтиПоКоду(Выборка.ПоказательКод, , , Владелец);	
		КонецЕсли;
		
		Если Выборка.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
			
			Если Выборка.ВидОтчетаОтбор=ОбъектКопирования.Ссылка.Владелец Тогда
				
				НовыйОперанд.ПоказательОтбор = Справочники.ПоказателиОтчетов.НайтиПоКоду(Выборка.ПоказательОтборКод, , , Владелец);
				
			КонецЕсли;
			
		КонецЕсли;
			
		НовыйОперанд.ПодготовитьТаблицыСопоставленийИОтборов();
		НовыйОперанд.мМодифицированность=Истина;
		
		// Заменим параметры выбора показателя в случае, если он ссылается на текущий отчет
		Если Выборка.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
						
			НовыйОперанд.Наименование=?(ПустаяСтрока(НовыйОперанд.Наименование),СокрЛП(Выборка.НаименованиеОтчетаОтбор)+Нстр("ru = '\стр.'")+Выборка.НомерСтроки+Нстр("ru = '\гр.'")+Выборка.НомерКолонки, НовыйОперанд.Наименование);
			
		Иначе
			
			НовыйОперанд.Наименование=?(ПустаяСтрока(НовыйОперанд.Наименование),СокрЛП(Выборка.НаименованиеПоказателя), НовыйОперанд.Наименование);
			
		КонецЕсли;
		
		НовыйОперанд.СохранитьНастройкиОперанда();
		
		Попытка 
			НовыйОперанд.Записать();
		Исключение
			#Если Клиент Тогда
				
				СтрокаШаблона = Нстр("ru = 'Не удалось перенести операнд: %1
				|Ошибка %2'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда					
					Сообщить(СтрШаблон(СтрокаШаблона, СокрЛП(Выборка.Код), Строка(ИнформацияОбОшибке())));
				КонецЕсли;
				
			#КонецЕсли
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура изменяет ссылку на показатели в табличной части процедуры обработки показателей, если правило обработки переносится
// в другой вид отчета.
Процедура ИзменитьСсылкиНаПоказатели()
	
	ТекФормулыРасчета=УправлениеОтчетамиУХ.ПолучитьФормулыРасчета(мОснование.Ссылка);
	УправлениеОтчетамиУХ.ОчиститьФормулыРасчета(Ссылка);
	
	НаборЗаписей=РегистрыСведений.ПроцедурыРасчетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НазначениеРасчетов.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
		
	Для Каждого Строка Из ТекФормулыРасчета Цикл
		
		ПоказательТекВидаОтчета = Справочники.ПоказателиОтчетов.НайтиПоКоду(СокрЛП(Строка.ПотребительРасчета.Код), , , Владелец);
		
		Если ЗначениеЗаполнено(ПоказательТекВидаОтчета) Тогда
			
			НоваяСтрока=НаборЗаписей.Добавить();
			НоваяСтрока.НазначениеРасчетов	= Ссылка;
			НоваяСтрока.ПотребительРасчета	= ПоказательТекВидаОтчета;
			НоваяСтрока.Процедура			= Строка.Процедура;
			НоваяСтрока.ПроизвольныйКод		= Строка.ПроизвольныйКод;
			НоваяСтрока.ПроцедураВычисления	= Строка.ПроцедураВычисления;
			НоваяСтрока.СпособОбработки		= Строка.СпособОбработки;
			
		КонецЕсли;		
			
	КонецЦикла;
	
	НаборЗаписей.Записать();
		
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА

// Процедура - обработчик события объекта "ПриКопировании".
//
Процедура ПриКопировании(ОбъектКопирования)
	
	мОснование = ОбъектКопирования;
	Утверждено = Ложь;
	
КонецПроцедуры

// Процедура - обработчик событяи объекта "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ)
	
	Если НЕ ПометкаУдаления=Ссылка.ПометкаУдаления Тогда
		 ОбновитьПометкуУдаленияДляПодчиненных=Истина;
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		СтрокаШаблона = Нстр("ru = 'Правило обработки: %1 не может быть записано'");
		
		ШапкаОшибки = "";
		Если Не ПустаяСтрока(СтрокаШаблона) тогда			
			ШапкаОшибки = СтрШаблон(СтрокаШаблона, Наименование);
		КонецЕсли;
		
		ПроверитьВозможностьЗаписи(Отказ, Истина, ШапкаОшибки);
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(мОснование) = Тип("СправочникОбъект.ПравилаОбработки") Тогда		
		
		Если мОснование.Владелец <> Владелец Тогда
			
			// Проверка на корректность задания правила проверки.
			
			Если ЗначениеЗаполнено(ПравилоПроверки) И ПравилоПроверки.Владелец <> Владелец Тогда
				ПравилоПроверки = Справочники.ПравилаПроверки.НайтиПоКоду(ПравилоПроверки.Код, , , Владелец);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоНовый() И (НЕ ЗначениеЗаполнено(ТипБД)) Тогда
		
		ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ;
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик событяи объекта "ПриЗаписи".
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбновитьПометкуУдаленияДляПодчиненных Тогда
		
		ОбщегоНазначенияУХ.ПометитьСправочникПоРеквизиту("ИсточникиДанныхДляРасчетов","НазначениеРасчетов",Ссылка,ПометкаУдаления,Отказ);
		
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(мОснование) = Тип("СправочникОбъект.ПравилаОбработки") Тогда
		
		ПеренестиПоказатели(мОснование);
		ИзменитьСсылкиНаПоказатели();
		
		СохраненныеДанные=УправлениеОтчетамиУХ.ПолучитьДанныеПараметрическойНастройки(мОснование.Ссылка);
		
		Если Не СохраненныеДанные=Неопределено Тогда
			
			НаборЗаписей=РегистрыСведений.ХранилищаПараметрическойНастройки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПравилоОбработки.Установить(Ссылка);
			НоваяСтрока=НаборЗаписей.Добавить();
			НоваяСтрока.ПравилоОбработки=Ссылка;
			НоваяСтрока.ДанныеПараметрическойНастройки=Новый ХранилищеЗначения(СохраненныеДанные, Новый СжатиеДанных());
			НаборЗаписей.Записать(Истина);	
			
		Иначе
			
			УправлениеОтчетамиУХ.ОчиститьЗаписиРегистраПараметрическихНастроек(Ссылка);
			
		КонецЕсли;
			
	КонецЕсли;
		
КонецПроцедуры

Функция ПроизвестиСинтаксическийКонтрольМодуляШаблона(МодульДляПроверки, ОписаниеОшибки) Экспорт
	
	ДокНО = Документы.НастраиваемыйОтчет.СоздатьДокумент();
	Возврат ДокНО.ПроверитьМодуль(МодульДляпроверки, ОписаниеОшибки);
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ.

// Проверяет возможность записи объекта.
//
Процедура ПроверитьВозможностьЗаписи(Отказ, Сообщать = Ложь, ШапкаОшибки = "") Экспорт
	
	Отказ = Ложь;
	
	Если ЭтоНовый() ИЛИ ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	// Проверяем наличие операндов по этому правилу с другим типом ВИБ
	
	Если ЗначениеЗаполнено(Ссылка.ТипБД)
		И (НЕ ТипБД=Ссылка.ТипБД) Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	ИсточникиДанныхДляРасчетов.Ссылка
		|ИЗ
		|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
		|ГДЕ
		|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &Ссылка
		|	И НЕ ИсточникиДанныхДляРасчетов.ТипБД = &ТипБД
		|	И НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления
		|	И НЕ(ИсточникиДанныхДляРасчетов.ТипБД = ЗНАЧЕНИЕ(Справочник.ТипыБазДанных.ПустаяСсылка)
		|				ИЛИ ИсточникиДанныхДляРасчетов.ТипБД = ЗНАЧЕНИЕ(Справочник.ТипыБазДанных.ТекущаяИБ))";
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.УстановитьПараметр("ТипБД",ТипБД);

		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			Отказ=Истина;
			
			Если Сообщать Тогда
				
				ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = ' - нельзя изменять тип ВИБ у правила, по которому уже введены источники данных, использующие ВИБ.
				| Для изменения типа ВИБ удалите старые источники данных.'"), Отказ, ШапкаОшибки);
				
			КонецЕсли;
			
			Возврат;

			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Константы.ПроверятьУтверждениеНастроекОтчетов.Получить() Тогда
		Возврат;
	КонецЕсли;

	Если Ссылка.Утверждено Тогда
		
		Если Не Утверждено Тогда
			
			Отказ = УправлениеОтчетамиУХ.ПроверитьНаличиеДокументовПоЭлементуНастройки(Ссылка,"ПравилоОбработки");
			
			Если Отказ Тогда
				
				Если Сообщать Тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = ' - нельзя снять флаг ""Утвержден"" у правила обработки,
					|которое используют утвержденные экземпляры отчетов.'"), Отказ, ШапкаОшибки);
				КонецЕсли;
				
				Возврат;
				
			КонецЕсли;
			
		Иначе
			
			Отказ = Истина;
			
			Если Сообщать Тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = ' - нельзя вносить изменения в утвержденное правило обработки.
				| Для редактирования снимите флаг ""Утверждено""'"), Отказ, ШапкаОшибки);
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьОперандыПоказателей() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.Ссылка КАК Операнд,
	|	ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК Показатель,
	|	ИсточникиДанныхДляРасчетов.СпособПолучения,
	|	ИсточникиДанныхДляРасчетов.ПоказательОтбор,
	|	ИсточникиДанныхДляРасчетов.Счет,
	|	ИсточникиДанныхДляРасчетов.Код
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &Ссылка
	|	И (НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	ОбязательныеРеквизиты=Новый Соответствие;
	
	// Внутренние данные - показатель отчета
	СписокВнутренние=Новый Структура;
	СписокВнутренние.Вставить("ПоказательОтбор", Нстр("ru = 'Показатель отчета для отбора'"));
	
	ОбязательныеРеквизиты.Вставить(Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета,СписокВнутренние);
	
	// Внешние данные - регистр бухгалтерии
	СписокВнешние=Новый Структура;
	СписокВнешние.Вставить("Счет", Нстр("ru = 'Счет'"));
	
	ОбязательныеРеквизиты.Вставить(Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии,СписокВнешние);
	
	СтруктураПроверки=Новый Структура;
	СтруктураПроверки.Вставить("СпособПолучения", Нстр("ru = 'Способ получения данных'"));
	СтруктураПроверки.Вставить("Показатель", Нстр("ru = 'Показатель'"));
	
	Операнды=Запрос.Выполнить().Выбрать();
	
	СписокОшибочных=Новый СписокЗначений;
	
	Пока Операнды.Следующий() Цикл
		
		ЕстьОшибки=Ложь;
		
		Для Каждого Элемент ИЗ СтруктураПроверки Цикл
			
			Если НЕ ЗначениеЗаполнено(Операнды[Элемент.Ключ]) Тогда
				
				СтрокаШаблона = Нстр("ru = 'Для показателя с кодом %1 не заполено значение реквизита %2'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда					
					Сообщить(СтрШаблон(СтрокаШаблона, СокрЛП(Операнды.Код), Элемент.Значение), СтатусСообщения.Важное);
				КонецЕсли;
				
				ЕстьОшибки=Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ Операнды.СпособПолучения=Перечисления.СпособыПолученияОперандов.ПустаяСсылка() Тогда
			
			СтруктураРеквизиты=ОбязательныеРеквизиты[Операнды.СпособПолучения];
			
			Если ТипЗнч(СтруктураРеквизиты)=Тип("Структура") Тогда
				
				Для Каждого Элемент ИЗ СтруктураРеквизиты Цикл
					
					Если НЕ ЗначениеЗаполнено(Операнды[Элемент.Ключ]) Тогда
						
						СтрокаШаблона = Нстр("ru = 'Для показателя с кодом %1 не заполено значение реквизита %2'");
						
						Если Не ПустаяСтрока(СтрокаШаблона) тогда							
							Сообщить(СтрШаблон(СтрокаШаблона, СокрЛП(Операнды.Код), Элемент.Значение), СтатусСообщения.Важное);
						КонецЕсли;
						
						ЕстьОшибки=Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьОшибки Тогда
			
			СписокОшибочных.Добавить(Операнды.Код);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокОшибочных.Количество()>0 Тогда
		
		Возврат СписокОшибочных;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции // ПроверитьОперандыПоказателей()

Процедура СформироватьДанныеПараметрическойНастройки(СравниватьТаблицыПараметров=Истина,СтруктураПараметрики=Неопределено) Экспорт
			
	УправлениеОтчетамиУХ.СформироватьДанныеРегистраПараметрическихНастроек(Ссылка,СравниватьТаблицыПараметров,СтруктураПараметрики)	
		
КонецПроцедуры // СформироватьДанныеПараметрическойНастройки()

ОбновитьПометкуУдаленияДляПодчиненных=Ложь;
