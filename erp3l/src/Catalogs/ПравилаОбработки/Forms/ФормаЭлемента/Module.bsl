
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РЕДАКТИРОВАНИЯ ПРОЦЕДУР ПРАВИЛА ОБРАБОТКИ.
//

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЯвляетсяПроцедуройПоУмолчанию = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки, Объект.Владелец) = Объект.Ссылка;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗначениеКопирования = Параметры.ЗначениеКопирования;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Объект.ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ;
		
	КонецЕсли;
	
	Если РасширениеБизнесЛогикиУХ.ИспользоватьРасширенныйРасчет() Тогда
		Элементы.ФормаПроцедураЗаполнения.Видимость = Ложь;
		Элементы.ФормаПроцедураВычисления.Заголовок = "Процедура до вычисления";
	КонецЕсли;
	
	Если Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии
		ИЛИ  Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
		ИЛИ   Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов Тогда
		
		ОбновитьСписокРегистровБухгалтерии();
		
		Если ЗначениеЗаполнено(Объект.РегистрБухгалтерииПоУмолчанию) Тогда
			ОбновитьСписокРесурсовРегистра();
		КонецЕсли;
		
	КонецЕсли;
	
	ОпределитьТипБДПоУмолчанию();
	УстановитьВидимость();
	
	Элементы.ГруппаТрансляция.Видимость=(ТипЗнч(Объект.Владелец)=Тип("СправочникСсылка.ШаблоныТрансляций"));
	
	Элементы.ФормаЗаполнитьПоБюджетам.Видимость=Справочники.ВидыОтчетов.ЕстьПоказателиБюджетов(Объект.Владелец);
	
	СформироватьСписокВозможныхСпособовПолучения();
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если НЕ ТипЗнч(Параметр)=Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененаПроцедураЗаполнения" Тогда
		Объект.ПроцедураЗаполнения = Параметр.ТекстПроцедуры;
		ЭтаФорма.Модифицированность = Истина;
	ИначеЕсли ИмяСобытия = "ИзмененаПроцедураВычисления" Тогда
		Объект.ПроцедураВычисления = Параметр.ТекстПроцедуры;
		ЭтаФорма.Модифицированность = Истина;
	ИначеЕсли ИмяСобытия = "ИзмененаПроцедураПослеВычисления" Тогда
		Объект.ПроцедураПослеВычисления = Параметр.ТекстПроцедуры;
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		
		ТекущийОбъект.мОснование=ЗначениеКопирования.ПолучитьОбъект();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УправлениеОтчетамиУХ.СформироватьДанныеРегистраПараметрическихНастроек(ТекущийОбъект.Ссылка,Истина);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПроцедураЗаполнения(Команда)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ТекстПроцедуры",Объект.ПроцедураЗаполнения);
	СтруктураПараметров.Вставить("ВидОтчета",Объект.Владелец);
	СтруктураПараметров.Вставить("НазначениеРасчетов",Объект.Ссылка);
	СтруктураПараметров.Вставить("ИмяПроцедуры","ПроцедураЗаполнения");
	СтруктураПараметров.Вставить("СпособОбработки",ПредопределенноеЗначение("Перечисление.СпособыОбработкиПоказателейОтчетов.Заполнение"));
	
	СписокВидовОтчетов=Новый СписокЗначений;
	Для Каждого СтрВидОтчета ИЗ Объект.ИспользуемыеОтчеты Цикл
		СписокВидовОтчетов.Добавить(СтрВидОтчета.ВидОтчета);
	КонецЦикла;
	
	СтруктураПараметров.Вставить("ИспользуемыеВидыОтчетов",СписокВидовОтчетов);
	
	ОткрытьФорму("ОбщаяФорма.ФормаРедактированияПроцедур", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцедураВычисления(Команда)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ТекстПроцедуры",Объект.ПроцедураВычисления);
	СтруктураПараметров.Вставить("ВидОтчета",Объект.Владелец);
	СтруктураПараметров.Вставить("ИмяПроцедуры","ПроцедураВычисления");
	СтруктураПараметров.Вставить("НазначениеРасчетов",Объект.Ссылка);
	СтруктураПараметров.Вставить("СпособОбработки",ПредопределенноеЗначение("Перечисление.СпособыОбработкиПоказателейОтчетов.Заполнение"));
	
	СписокВидовОтчетов=Новый СписокЗначений;
	Для Каждого СтрВидОтчета ИЗ Объект.ИспользуемыеОтчеты Цикл
		СписокВидовОтчетов.Добавить(СтрВидОтчета.ВидОтчета);
	КонецЦикла;
	
	СтруктураПараметров.Вставить("ИспользуемыеВидыОтчетов",СписокВидовОтчетов);
	
	ОткрытьФорму("ОбщаяФорма.ФормаРедактированияПроцедур", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
		
	Элементы.ГруппаИнформационныеБазы.Видимость=(НЕ Объект.ТипБД.ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO);
	
	Элементы.ГруппаРегистрБухгалтерии.Видимость=(Не Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета);
	Элементы.ВидОтчетаОСВ.Видимость=(Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета);
	
	Если ТипЗнч(Объект.Владелец)=Тип("СправочникСсылка.ШаблоныТрансляций") Тогда
		
		ЭтотОбъект.ТолькоПросмотр=Истина;
		ЭтотОбъект.ПоложениеКоманднойПанели=ПоложениеКоманднойПанелиФормы.Нет;
		Элементы.ПересчитыватьПриОткрытии.Видимость=Ложь;
		Элементы.Утверждено.Видимость=Ложь;
		
	ИначеЕсли ТипЗнч(Объект.Владелец)=Тип("СправочникСсылка.ШаблоныТрансформационныхКорректировок") Тогда
		
		Элементы.ФормаЗаполнитьПоказателиОСВ.Видимость=Ложь;
		Элементы.ФормаЗаполнитьПоБюджетам.Видимость=Ложь;
		Элементы.РедактированиеПроцедур.Видимость=Ложь;
		Элементы.ПересчитыватьПриОткрытии.Видимость=Ложь;
		Элементы.Утверждено.Видимость=Ложь;
				
	Иначе
		
		Элементы.ФормаЗаполнитьПоказателиОСВ.Видимость=(ЗначениеЗаполнено(Объект.ВидОтчетаОСВ) ИЛИ ЗначениеЗаполнено(Объект.РегистрБухгалтерииПоУмолчанию));
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость(); 

&НаСервереБезКонтекста
Функция УстановитьПроцедуруПоУмолчанию(Элемент, ВидОтчета)
	
	Возврат УправлениеОтчетамиУХ.УстановитьЭлементПоУмолчаниюДляВидаОтчета(Элемент, ВидОтчета, Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки);
	
КонецФункции

&НаСервере
Процедура ОбновитьСписокРесурсовРегистра()
	
	ОбщегоНазначенияСерверУХ.ОбновитьСписокРесурсовРегистра(Объект.РегистрБухгалтерииПоУмолчанию,Объект.РесурсРегистраПоУмолчанию,Элементы.РесурсРегистраПоУмолчанию);	
	УстановитьВидимость();
	
КонецПроцедуры // ПолучитьСписокРесурсовРегистра()

&НаСервере
Процедура СформироватьСписокВозможныхСпособовПолучения()
	
	СписокСпособов=Новый СписокЗначений;
	СписокСпособов.Добавить(Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета, Нстр("ru = 'Показатель другого отчета текущей ИБ (простая настройка)'"));

	Если Метаданные.РегистрыБухгалтерии.Количество()>0 Тогда
				
		СписокСпособов.Добавить(Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии, Нстр("ru = 'Регистр бухгалтерии текущей ИБ'"));
			
	КонецЕсли;
	
	Если НЕ Объект.ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ Тогда
		
		Если Объект.ТипБД.ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие77 Тогда
			
			СписокСпособов.Добавить(Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов,Строка(Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов));
			
		ИначеЕсли НЕ Объект.ТипБД.ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO Тогда	
			
			СписокСпособов.Добавить(Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии, Нстр("ru = 'Регистр бухгалтерии внешней ИБ'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияУХ.ЗагрузитьВСписокЗначений(СписокСпособов,Элементы.СпособПолучения.СписокВыбора);
	ОпределитьТипБДПоУмолчанию();
	
КонецПроцедуры // СформироватьСписокВозможныхСпособовПолучения()

&НаСервере
Процедура ОпределитьТипБДПоУмолчанию() 
	
	Если Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
		ИЛИ Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов Тогда
		
		ТипБДПоУмолчанию=Объект.ТипБД;
		
	Иначе
		
		ТипБДПоУмолчанию=Справочники.ТипыБазДанных.ТекущаяИБ;
		
	КонецЕсли;	
	
КонецПроцедуры // ОпределитьТипБДПоУмолчанию() 


&НаСервере
Процедура ПриИзмененииПланаСчетов()
	
	Если Объект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
					
		Объект.ВидОтчетаОСВ=Справочники.ВидыОтчетов.ПолучитьВидОтчетаОСВ(Объект.ПланСчетовПоУмолчанию);					
		
	Иначе
		
		ОбновитьСписокРегистровБухгалтерии();
		
		Если Элементы.РегистрБухгалтерииПоУмолчанию.СписокВыбора.Количество()>0 Тогда
			
			Объект.РегистрБухгалтерииПоУмолчанию=Элементы.РегистрБухгалтерииПоУмолчанию.СписокВыбора[0].Значение;
			ОбновитьСписокРесурсовРегистра();
							
		Иначе
			
			Объект.РегистрБухгалтерииПоУмолчанию="";
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры // ПриИзмененииПланаСчетов()

&НаСервере
Процедура ОбновитьСписокРегистровБухгалтерии()

	Элементы.РегистрБухгалтерииПоУмолчанию.СписокВыбора.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.ПланСчетовПоУмолчанию) Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	МассивРегистров=УправлениеОтчетамиУХ.ПолучитьМассивРегистровБухгалтерии(Объект.ПланСчетовПоУмолчанию);
	
	Для Каждого Регистр ИЗ МассивРегистров Цикл
		
		Элементы.РегистрБухгалтерииПоУмолчанию.СписокВыбора.Добавить(Регистр);
		
	КонецЦикла;
	
	
КонецПроцедуры // ОбновитьСписокРегистровБухгалтерии() 



&НаКлиенте
Процедура УстановитьПоУмолчанию_Завершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЭтаФорма.Записать();
		УстановитьПроцедуруПоУмолчанию(Объект.Ссылка, Объект.Владелец);
	Иначе       
		// Пользователь отказался.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПоУмолчанию(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru = 'Требуется сохранить объект. Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("УстановитьПоУмолчанию_Завершение", ЭтаФорма);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		УстановитьПроцедуруПоУмолчанию(Объект.Ссылка, Объект.Владелец);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РегистрБухгалтерииПоУмолчаниюПриИзменении(Элемент)
	
	ОбновитьСписокРесурсовРегистра();
		
КонецПроцедуры

&НаКлиенте
Процедура ТипБДПриИзменении(Элемент)
	
	СформироватьСписокВозможныхСпособовПолучения();
	
КонецПроцедуры 

&НаСервере
Процедура ПриИзмененииСпособаПолучения()
	
	ОпределитьТипБДПоУмолчанию();
	УстановитьВидимость();
	
КонецПроцедуры // ПриИзмененииСпособаПолучения() 

&НаКлиенте
Процедура СпособПолученияПриИзменении(Элемент)
	
	ПриИзмененииСпособаПолучения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланСчетовПоУмолчаниюПриИзменении(Элемент)
	
	ПриИзмененииПланаСчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцедураПослеВычисления(Команда)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ТекстПроцедуры",		Объект.ПроцедураПослеВычисления);
	СтруктураПараметров.Вставить("ВидОтчета",			Объект.Владелец);
	СтруктураПараметров.Вставить("ИмяПроцедуры",		"ПроцедураПослеВычисления");
	СтруктураПараметров.Вставить("НазначениеРасчетов",	Объект.Ссылка);
	СтруктураПараметров.Вставить("СпособОбработки",		ПредопределенноеЗначение("Перечисление.СпособыОбработкиПоказателейОтчетов.Заполнение"));
	
	СписокВидовОтчетов=Новый СписокЗначений;
	Для Каждого СтрВидОтчета ИЗ Объект.ИспользуемыеОтчеты Цикл
		СписокВидовОтчетов.Добавить(СтрВидОтчета.ВидОтчета);
	КонецЦикла;
	
	СтруктураПараметров.Вставить("ИспользуемыеВидыОтчетов",	СписокВидовОтчетов);
	
	ОткрытьФорму("ОбщаяФорма.ФормаРедактированияПроцедур", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоБюджетамПрогноз(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;
	
	ЗаполнитьПоБюджетамНаСервере(Объект.Владелец,Объект.Ссылка,"ОперативныйПланПоБюджетам");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПоБюджетамНаСервере(ВидОтчета,ПравилоОбработки,ИмяРегистра)
	
	Справочники.ВидыОтчетов.ОбновитьПроцедурыРасчетаПоБюджетам(ВидОтчета,ПравилоОбработки,ИмяРегистра);
		
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыеОтчетыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Элементы.ИспользуемыеОтчеты.ТекущиеДанные.ДобавленВручную		= Истина;
		Элементы.ИспользуемыеОтчеты.ТекущиеДанные.АвтоматическийПересчет= Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыеОтчетыПередУдалением(Элемент, Отказ)
	
	Если НЕ Элементы.ИспользуемыеОтчеты.ТекущиеДанные.ДобавленВручную Тогда
		
		Отказ=Истина;
		Элементы.ИспользуемыеОтчеты.ТекущиеДанные.АвтоматическийПересчет= Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиОСВСервер(ОбновлятьПоказатели)
	
	Справочники.ВидыОтчетов.СформироватьФормулыРасчетаОСВ(Объект.Владелец,Объект.Ссылка,ОбновлятьПоказатели);
			
КонецПроцедуры // ЗаполнитьПоказателиОСВСервер()

&НаКлиенте
Процедура ЗаполнитьПоказателиОСВ(Команда)
	
	Текст = НСтр("ru = 'Обновлять существующие формулы?'");
	
	Оповещение = Новый ОписаниеОповещения("ВыполнитьЗаполнениеОСВ", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеОСВ(Результат, ДополнительныеПараметры) Экспорт

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Записать();
		
	КонецЕсли;
	
	ЗаполнитьПоказателиОСВСервер(Результат=КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОтчетаОСВПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоБюджетамФакт(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;
	
	ЗаполнитьПоБюджетамНаСервере(Объект.Владелец,Объект.Ссылка,"ФактПоБюджетам");
	
КонецПроцедуры
