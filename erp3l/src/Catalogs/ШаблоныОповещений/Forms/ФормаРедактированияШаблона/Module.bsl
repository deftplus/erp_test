// Записывает текст ТекстШаблонаВход в шаблон СсылкаНаОбъектВход. Возвращает
// успешность выполнения операции.
&НаСервере
Функция ЗаписатьШаблон(ТекстШаблонаВход, СсылкаНаОбъектВход)
	РезультатФункции = Истина;
	Попытка
		ШаблонОбъект = СсылкаНаОбъектВход.ПолучитьОбъект();
		ШаблонОбъект.Шаблон = Новый ХранилищеЗначения(ТекстШаблонаВход);
		ШаблонОбъект.Записать();
	Исключение
		ТекстОшибки = НСтр("ru = 'Во время записи шаблона %Шаблон% произошли ошибки: %ОписаниеОшибки%. Операция отменена.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Шаблон%", СсылкаНаОбъектВход);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
		РезультатФункции = Ложь;
	КонецПопытки;
	Возврат РезультатФункции;	
КонецФункции

// Устанавливает в поле текста шаблона текст по умолчанию.
&НаСервере
Процедура ВыставитьШаблонПоУмолчанию()
	Если ЗначениеЗаполнено(ТипОбъектаОповещения) Тогда
		ПустаяСсылкаСправочникаБД = МодульУправленияОповещениямиУХ.ПолучитьПустоеЗначениеСправочникаБД(ТипОбъектаОповещения);
	Иначе
		ПустаяСсылкаСправочникаБД = Справочники.ШаблоныУниверсальныхПроцессов.ПустаяСсылка();
	КонецЕсли;
	Если ПустаяСсылкаСправочникаБД <> Неопределено Тогда
		ШаблонПоУмолчанию = МодульУправленияОповещениямиУХ.ПолучитьТекстОповещенияПоВидуСобытияПоУмолчанию(НазначениеОповещения, ВидСобытияОповещения, ПустаяСсылкаСправочникаБД);
		ФорматированныйШаблон = Новый ФорматированнаяСтрока(ШаблонПоУмолчанию);
		ПолеШаблонаHTML.УстановитьФорматированнуюСтроку(ФорматированныйШаблон);
		ЭтаФорма.Модифицированность = Истина;
	Иначе
		ТекстОшибки = НСтр("ru = 'Не удалось получить пустое значение для типа %ТипОбъектаОповещения%. Заполнение шаблона по умолчанию отменено.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТипОбъектаОповещения%", Строка(ТипОбъектаОповещения));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
	КонецЕсли;
КонецПроцедуры

// Формирует текст проверки по шаблону ШаблонВход и объекту проверки ПроверкаОбъектВход,
// а также записывает его в поле на форме.
&НаСервере
Процедура СформироватьИУстановитьТекстПроверкиПоШаблону(ШаблонВход, ПроверкаОбъектВход)
	Попытка
		НовыйТекстПроверка = МодульУправленияОповещениямиУХ.ПодготовитьТекстОповещенияПоШаблону(ШаблонВход, , ПроверкаОбъектВход);
		СтруктураВложений = Новый Структура;
		ТекстПроверка.УстановитьHTML(НовыйТекстПроверка, СтруктураВложений);
	Исключение
		ТекстСообщения = НСтр("ru = 'При формировании текста по введённому шаблону для объекта %Объект% возникли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Строка(ПроверкаОбъектВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры

// Устанавливает в поле Объект проверки на форме ограничения типа по типу
// объекта оповещения ТипОбъектаОповещенияВход.
&НаСервере
Процедура УстановитьОграничениеТипаОбъектаПроверкиШаблона(ТипОбъектаОповещенияВход)
	Если ЗначениеЗаполнено(ТипОбъектаОповещенияВход) Тогда
		НовыйТипОбъекта = ОбщегоНазначенияСерверУХ.ВернутьТипПоСсылкеБД(ТипОбъектаОповещенияВход);
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(НовыйТипОбъекта);
		НовоеОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		Элементы.ПроверкаОбъект.ОграничениеТипа = НовоеОписаниеТипов;
		Если ЗначениеЗаполнено(НовыйТипОбъекта) Тогда
			НовыйЗаголовок = НСтр("ru = 'Ключевой объект (%ТипОбъекта%)'");
			НовыйЗаголовок = СтрЗаменить(НовыйЗаголовок, "%ТипОбъекта%", Строка(НовыйТипОбъекта));
		Иначе
			НовыйЗаголовок = НСтр("ru='Ключевой объект'");
		КонецЕсли;
		Элементы.ПроверкаОбъект.Заголовок = НовыйЗаголовок;
	Иначе
		// Тип объекта не задан. Не изменяем.
	КонецЕсли;
КонецПроцедуры

// Управляет доступностью элементов на форме.
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)
	// Отображение панели проверки.
	ОтображениеПроверки = Форма.Элементы.ФормаОтображатьПроверку.Пометка;
	Форма.Элементы.ГруппаПроверкаШаблона.Видимость = ОтображениеПроверки;
КонецПроцедуры

// Получает текст шаблона из текстового либо из HTML документа
// на форме, в зависимости от выбранных настроек.
&НаКлиенте
Функция СчитатьТекстШаблона()
	РезультатФункции = "";
	Если ТипШаблона = ПредопределенноеЗначение("Перечисление.ТипыШаблонов.Текстовый") Тогда
		РезультатФункции = ПолеШаблонаТекст.ПолучитьТекст();
	Иначе
		ПолеШаблонаHTML.ПолучитьHTML(РезультатФункции, Новый Структура);
		РезультатФункции = СтрЗаменить(РезультатФункции, "body{margin:0;padding:8px;}", "body{margin:0;padding:8px;font-size:11pt;font-family:sans-serif;}");		// Установим шрифт и размер по умолчанию.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Считывание параметров.
	ЗаписыватьШаблон = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ЗаписыватьШаблон", Ложь); 
	СсылкаНаОбъект = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "СсылкаНаОбъект", Справочники.ШаблоныОповещений.ПустаяСсылка()); 
	Параметры.Свойство("ТипШаблона", ТипШаблона);
	Параметры.Свойство("ТипОбъектаОповещения",ТипОбъектаОповещения);
	Параметры.Свойство("ВидОбъектаОповещения",ВидОбъектаОповещения);
    Параметры.Свойство("НазначениеОповещения",НазначениеОповещения);
	ВидСобытияОповещения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ВидСобытияОповещения", Справочники.ВидыСобытийОповещений.ПустаяСсылка()); 
	Если ЗначениеЗаполнено(Параметры.Шаблон) Тогда
		ПолеШаблонаHTML.УстановитьHTML(Параметры.Шаблон, Новый Структура);
	КонецЕсли;
	Элементы.ПанельМакетов.ТекущаяСтраница = Элементы.HTML;
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(МодульУправленияОповещениямиУХ.ВернутьОбъектШаблона(ТипОбъектаОповещения,НазначениеОповещения));
	
	Если МетаданныеОбъекта = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	МакетСКД = МодульУправленияОповещениямиУХ.ПолучитьСхемуСКДДляПодстановкиВШаблоне(ТипОбъектаОповещения, ВидОбъектаОповещения, НазначениеОповещения, ВидСобытияОповещения);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(МакетСКД, УникальныйИдентификатор)));
	// Заполнение шаблона по умолчанию.
	Если СокрЛП(ПолеШаблонаHTML.ПолучитьТекст()) = "" Тогда
		ВыставитьШаблонПоУмолчанию();
	Иначе
		// Уже есть текст. Не изменяем.
	КонецЕсли;
	// Отображение элементов.
	УправлениеДоступностью(ЭтаФорма);
	// Установим ограничение типа для объекта проверки шаблона.
	УстановитьОграничениеТипаОбъектаПроверкиШаблона(ТипОбъектаОповещения);
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиПорядокДоступныеПоляПорядкаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ТекСтр = Элементы.КомпоновщикНастроекНастройкиПорядокДоступныеПоляПорядка.ТекущаяСтрока;
	Если НЕ ТекСтр = Неопределено Тогда
		СтрокаОтбора = КомпоновщикНастроек.Настройки.Порядок.ДоступныеПоляПорядка.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроекНастройкиПорядокДоступныеПоляПорядка.ТекущаяСтрока);
		Если СтрокаОтбора.Папка Тогда
			СтандартнаяОбработка = Ложь;                         
			Возврат;
		КонецЕсли;
	Иначе
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = ПолучитьИмяПоляВШаблоне(Строка(СтрокаОтбора.Поле));

КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	// Получаем текст шаблона.
	Шаблон = СчитатьТекстШаблона();
	// Записываем справочник при необходимости.                 
	Если (ЗаписыватьШаблон) И (ЗначениеЗаполнено(СсылкаНаОбъект)) Тогда
		РезультатЗаписи = ЗаписатьШаблон(Шаблон, СсылкаНаОбъект);
		Если НЕ РезультатЗаписи Тогда
			Возврат;		// Запись не удалась. Отменим команду.
		Иначе
			// Запись прошла успешно. Выполняем далее.
		КонецЕсли;
	Иначе
		// Не нужно записывать шаблон.
	КонецЕсли;
	// Закрываем форму и оповещаем получателей.
	ОповеститьОВыборе(Шаблон);
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	
	Перем ТекстСообщения;
	ЗапуститьПроцедуруПроверки(ТекстСообщения);
	ПоказатьПредупреждение(,ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяПоляВШаблоне(ИмяПоля)
	
	Возврат "[Параметр." + ИмяПоля + "]";
	
КонецФункции

&НаСервере
Процедура ЗапуститьПроцедуруПроверки(ТекстСообщения)
	
	Перем ТекстШаблона;
	
	Если ТипШаблона = Перечисления.ТипыШаблонов.HTML Тогда
		ПолеШаблонаHTML.ПолучитьHTML(ТекстШаблона, Новый Структура);
	Иначе
		ТекстШаблона = ПолеШаблонаТекст.ПолучитьТекст();
	КонецЕсли;
	
	УправлениеШаблонамиУХ.ВыполнитьПроверкуШаблона(ТекстШаблона, КомпоновщикНастроек,  ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШаблонПоУмолчанию(Команда)
	МожноИзменятьТекст = Истина;
	Если СокрЛП(ПолеШаблонаHTML.ПолучитьТекст()) <> "" Тогда
		ТекстВопроса = НСтр("ru = 'Текст шаблона уже установлен. Заменить его на текст по умолчанию?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьШаблонПоУмолчаниюЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		МожноИзменятьТекст = Ложь;
	Иначе
		ВыставитьШаблонПоУмолчанию();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШаблонПоУмолчаниюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	МожноЗаменять = (РезультатВопроса = КодВозвратаДиалога.Да);
	Если МожноЗаменять Тогда
		ВыставитьШаблонПоУмолчанию();
	Иначе	
		// Пользователь отказался. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПроверка(Команда)
	Если ЗначениеЗаполнено(ПроверкаОбъект) Тогда
		Шаблон = СчитатьТекстШаблона();
		СформироватьИУстановитьТекстПроверкиПоШаблону(Шаблон, ПроверкаОбъект);
	Иначе
		ТекстСообщения = НСтр("ru='Проверочный объект не выбран. Формирование проверочного текста отменено.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПроверку(Команда)
	Элементы.ФормаОтображатьПроверку.Пометка = НЕ Элементы.ФормаОтображатьПроверку.Пометка;
	УправлениеДоступностью(ЭтаФорма);
КонецПроцедуры


