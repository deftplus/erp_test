
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУДЛЯ

// признак записи первой версии файла
Перем ЗаписатьПервуюВерсиюФайла;

// хранит исходный файл первой версии
Перем ИсходныйФайлПервойВерсии Экспорт;

// хранит коментарий к первой версии  файла
Перем КомментарийКПервойВерсии Экспорт;

// При создании объекта в управляемом режиме двоичные данные из файла и список листов
// передаются в объект справочника через определямые ниже переменные.
Перем СтруктураФайла Экспорт;
Перем СписокЛистов   Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ

// Процедура выполняет запись первой версии хранимого файла
//
Процедура ЗаписатьПервуюВерсиюФайла(Отказ, ШапкаОшибки)
	
	
	Если ЗначениеЗаполнено(СтруктураФайла) Тогда // Объект создается в управляемом режиме.
		
		ФайлНаДиске=Новый Файл(СтруктураФайла.ПолноеИмяНаДиске);
		
		ДатаИзмененияФайла = СтруктураФайла.ДатаИзмененияФайла;
		РазмерФайла        = СтруктураФайла.РазмерФайла;
		ДвоичныеДанные     = ПолучитьИзВременногоХранилища(СтруктураФайла.АдресВременногоХранилища);
		СписокЛистов       = СтруктураФайла.СписокЛистов;
		
	ИначеЕсли      ТипЗнч(ИсходныйФайлПервойВерсии) = Тип("ДвоичныеДанные") Тогда
		ДатаИзмененияФайла = ТекущаяДата() ;
		РазмерФайла        = 0;
		ДвоичныеДанные     = ИсходныйФайлПервойВерсии;
		
	ИначеЕсли ТипЗнч(ИсходныйФайлПервойВерсии) = Тип("СправочникСсылка.ХранимыеФайлыОрганизаций") Тогда
		
		СтруктураВерсии=ХранимыеФайлыУХ.ПолучитьВерсиюФайла(ИсходныйФайлПервойВерсии);
		
		Если ЗначениеЗаполнено(СтруктураВерсии.СсылкаНаДвоичныеДанныеФайла) Тогда
			
			ДвоичныеДанные=ПолучитьИзВременногоХранилища(СтруктураВерсии.СсылкаНаДвоичныеДанныеФайла);
			
			ДатаИзмененияФайла = СтруктураВерсии.ДатаМодификацииУниверсальная;
			РазмерФайла        = СтруктураВерсии.Размер;
	
		Иначе
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = '- Копируемый файл отутствует в информационной базе.'"), Отказ, ШапкаОшибки);
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ИсходныйФайлПервойВерсии) = Тип("Строка") Тогда
		ФайлНаДиске = Новый Файл(ИсходныйФайлПервойВерсии);
		
		Если НЕ ФайлНаДиске.Существует() Тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = '- Исходный файл отутствует на диске.'"), Отказ, ШапкаОшибки);
			Возврат;
		КонецЕсли;
		
		ДатаИзмененияФайла = ФайлНаДиске.ПолучитьВремяИзменения();
		РазмерФайла        = ФайлНаДиске.Размер();
		
		Попытка
			ДвоичныеДанные = Новый ДвоичныеДанные(ФайлНаДиске.ПолноеИмя);
		Исключение
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = '- %1'"), ОписаниеОшибки()), Отказ, ШапкаОшибки);
			Возврат;
		КонецПопытки;
				
	Иначе
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = '- Не определен исходный файл.'"), Отказ, ШапкаОшибки);
		Возврат;
	КонецЕсли;
	
	// Запись новой версии файла в хранилище.
	
	ПараметрыФайла = Новый Структура();
	ПараметрыФайла.Вставить("Автор", ПараметрыСеанса.ТекущийПользователь);
	ПараметрыФайла.Вставить("ВладелецФайлов", Ссылка);
	ПараметрыФайла.Вставить("ИмяБезРасширения",ФайлНаДиске.ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки",СтрЗаменить(ФайлНаДиске.Расширение,".",""));
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное",ДатаИзмененияФайла);
	
	Попытка
		
		ОбъектВерсия=РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ПоместитьВоВременноеХранилище(ДвоичныеДанные)).ПолучитьОбъект();
		ОбъектВерсия.ПолноеИмяФайла=ИсходныйФайлПервойВерсии;
		ОбъектВерсия.Записать();
		
	Исключение
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не удалось записать версию файла %1 для организации %2: %3'"), 
			Ссылка, Владелец, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),Отказ,,СтатусСообщения.Важное);
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА

// Процедура - обработчик события объекта "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьПервуюВерсиюФайла = НЕ ЭтоГруппа И ЭтоНовый();
	
	Если Не ЭтоГруппа Тогда
				
		ЧислоВхождений = СтрЧислоВхождений(Наименование, ".");
		
		Если ЧислоВхождений > 0 Тогда
			ИмяПоСтрокам = СтрЗаменить(Наименование, ".", Символы.ПС);	
			РасширениеФайла = СтрПолучитьСтроку(ИмяПоСтрокам, ЧислоВхождений + 1);
		Иначе
			РасширениеФайла = "";
		КонецЕсли;
		
	КонецЕсли;
	
	
	ШапкаОшибки = СтрШаблон(Нстр("ru = 'Хранимый файл ""%1"" не может быть записан:'"), ПолноеНаименование());
	
	Если ПустаяСтрока(Наименование) Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = '- Не указано наименование файла.'"), Отказ, ШапкаОшибки);
	КонецЕсли;
	
	
	Если Не ЭтоГруппа Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ХранимыеФайлыОрганизаций.Ссылка
		|ИЗ
		|	Справочник.ХранимыеФайлыОрганизаций КАК ХранимыеФайлыОрганизаций
		|ГДЕ
		|	ХранимыеФайлыОрганизаций.Ссылка <> &Ссылка
		|	И ХранимыеФайлыОрганизаций.Сценарий = &Сценарий
		|	И ХранимыеФайлыОрганизаций.ПериодСценария = &ПериодСценария
		|	И ХранимыеФайлыОрганизаций.Наименование = &Наименование
		|	И ХранимыеФайлыОрганизаций.Владелец = &Владелец";
		
		Запрос.УстановитьПараметр("Ссылка", 		Ссылка);
		Запрос.УстановитьПараметр("Сценарий", 		Сценарий);
		Запрос.УстановитьПараметр("ПериодСценария", ПериодСценария);
		Запрос.УстановитьПараметр("Наименование", 	Наименование);
		Запрос.УстановитьПараметр("Владелец", 		Владелец);
		
		Если Не Запрос.Выполнить().Пустой() Тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = '- Уже существует хранимый файл с указанными реквизитами!'"), Отказ, ШапкаОшибки);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события объекта "ПриЗаписи".
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ШапкаОшибки = СтрШаблон(Нстр("ru = 'Хранимый файл ""%1"" не может быть записан:'"), ПолноеНаименование());
	
	Если ЗаписатьПервуюВерсиюФайла Тогда
		ЗаписатьПервуюВерсиюФайла(Отказ, ШапкаОшибки);
	КонецЕсли;

КонецПроцедуры

#КонецЕсли

