////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ.
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	// Для нового объекта создаем новую пустую схему компоновки данных;
	Если Объект.Ссылка.Пустая() Тогда
		ПутьКСхемеКомпоновкиДанных = ПоместитьВоВременноеХранилище(Новый СхемаКомпоновкиДанных, УникальныйИдентификатор);
	Иначе
		ПутьКСхемеКомпоновкиДанных = ПоместитьВоВременноеХранилище(ТекОбъект.СхемаКомпоновкиДанных.Получить(), УникальныйИдентификатор);
	КонецЕсли;
	
	ИнициализироватьКомпоновщик();
	ОбновитьДеревоДоступныхПолей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		Элементы.ОтображениеКнопкиРедактированияСКД.ТекущаяСтраница = Элементы.РедактированиеВозможно;
	#Иначе
		Элементы.ОтображениеКнопкиРедактированияСКД.ТекущаяСтраница = Элементы.РедактированиеНевозможно;
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СКД = ПолучитьСхемуКомпоновкиДанных();
	ТекущийОбъект.СхемаКомпоновкиДанных = Новый ХранилищеЗначения(СКД);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		Если ТипЗнч(ИсточникВыбора) = Тип("КонструкторСхемыКомпоновкиДанных") Тогда
			СохранитьСКД(ИсточникВыбора.ПолучитьСхему());
			ИнициализироватьКомпоновщик();
			ОбновитьДеревоДоступныхПолей();
		КонецЕсли;
	#КонецЕсли
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") Тогда
		Если ИсточникВыбора.ИмяФормы = "Справочник.Запросы.Форма.НастройкаСоответствия" Тогда
			УстановитьЗначениеСоответствия(ВыбранноеЗначение);
		ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Запросы.Форма.НастройкаОтборов" Тогда
			УстановитьЗначениеОтборов(ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ.

&НаКлиенте
Процедура ПолеПлановоеЗначениеПриИзменении(Элемент)
	
	ОбновитьДоступныеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеФактическоеЗначениеТекущегоПериодаПриИзменении(Элемент)
	
	ОбновитьДоступныеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеФактическоеЗначениеПредыдущегоПериодаПриИзменении(Элемент)
	
	ОбновитьДоступныеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиВВидеКодаПриИзменении(Элемент)
	
	
	ТекстФормулы.УстановитьТекст(ЗаменитьКодНаименование(ТекстФормулы.ПолучитьТекст()));
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиОтчетаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ТекСтрока = Объект.ПоказателиОтчета.НайтиПоИдентификатору(Элементы.ПоказателиОтчета.ТекущаяСтрока);
	ПараметрыПеретаскивания.Значение = "[" + СокрЛП(?(Объект.ПоказателиВВидеКода = 1, ТекСтрока.КодПоказателя, ТекСтрока.НаименованиеПоказателя)) + "]";
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиОтчетаНастройкиОтборовНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.Запросы.Форма.НастройкаОтборов", Новый Структура("ПутьКНастройкеОтборов", ВызватьОкноНастройкиОтборов()), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиОтчетаСоответствиеАналитикОтчетаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.Запросы.Форма.НастройкаСоответствия", ВызватьОкноНастройкиСоответствия(), ЭтаФорма);

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ.
//

&НаКлиенте
Процедура ПроверитьОтчет(Команда)
	ОбработатьОтчет();
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСхемуКомпоновки(Команда)
	
	#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		
		СКД = ПолучитьСхемуКомпоновкиДанных();
		Если СКД = Неопределено Тогда
			СКД = Новый СхемаКомпоновкиДанных;
		КонецЕсли;
		
		Конструктор = Новый КонструкторСхемыКомпоновкиДанных(СКД);
		Конструктор.Редактировать(ЭтаФорма);
	#Иначе
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = НСтр("ru = 'Редактирование схемы компоновки данных доступно только в толстом клиенте'");
		СообщениеПользователю.Сообщить();
	#КонецЕсли
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ, ВЫПОЛНЯЕМЫЕ НА СЕРВЕРЕ.

&НаСервере
Процедура ПроверкаПараметрическиНастроенныхПоказателей()
	
	Если Объект.ИсточникДанныхСКД = 1 Тогда
	
		СтруктураНастроек = Новый Структура("Периодичность, СмещениеПредыдущегоПериода, СценарийПлан, СценарийФакт, ПорогЗначимостиТренда, Состояние_ЛевыйДиапазон, Состояние_ПравыйДиапазон"
											, Периодичность
											, СмещениеПредыдущегоПериода
											, СценарийПлан
											, СценарийФакт
											, Объект.ПорогЗначимостиТренда
											, Объект.Состояние_ЛевыйДиапазон
											, Объект.Состояние_ПравыйДиапазон);
											
		ТЗОтвета = БизнесАнализВызовСервераУХ.СформироватьТаблицуМонитораПоказателей();
		ЗаполнитьЗначенияСвойств(ТЗОтвета.Добавить(), ТиповыеОтчетыУХ.ПровестиРасчетПоказателяПоФормуле(Объект, ПутьКСхемеКомпоновкиДанных, СтруктураНастроек, ПутьКТаблицеПоказателей));
											
		ВывестиРезультатВТабличныйДокумент(ТЗОтвета);
		
	Иначе
		// Вывод тестового отчета по операнду внешнего источника.
		
		ТД.Очистить();
		
		Контекст = Новый Структура;
		
		Для Каждого Параметр Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
			Контекст.Вставить(Строка(Параметр.Параметр), ?(параметр.Использование, Параметр.Значение, Неопределено));
		КонецЦикла;
		
		Контекст.Вставить("ИспользуемаяИБ", Объект.ИспользуемаяИБ);
		
		
		ТаблицаЗначений = УправлениеОтчетамиУХ.ПолучитьТаблицуДанныхПоИсточнику(Контекст, Объект.ИсточникДанныхДляРасчетов, Истина);
		
		КомпоновщикНастроекДляВывода = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроекДляВывода.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПутьКСхемеКомпоновкиДанных));
		КомпоновщикНастроекДляВывода.ЗагрузитьНастройки(КомпоновщикНастроек.ПолучитьНастройки());
		
		Для Каждого ПолеВыбора Из КомпоновщикНастроекДляВывода.Настройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
			
			ТекущееПоле = КомпоновщикНастроекДляВывода.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			Если НЕ ПолеВыбора.Папка Тогда
				ЗаполнитьЗначенияСвойств(ТекущееПоле, ПолеВыбора);
			КонецЕсли;
			
		КонецЦикла;
		
		ТиповыеОтчетыУХ.ДобавитьГруппировку(КомпоновщикНастроекДляВывода);
		
		СКДВывода = ПолучитьИзВременногоХранилища(ПутьКСхемеКомпоновкиДанных);
		
		ВнешниеНаборыДанных = Новый Структура("ИсточникДанныхДляРасчетов", ТаблицаЗначений);
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СКДВывода, КомпоновщикНастроекДляВывода.ПолучитьНастройки());
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ТД);
		ПроцессорВывода.НачатьВывод();
		
		Пока Истина Цикл
		  ЭлементРезультатаКомпоновкиДанных =
				  ПроцессорКомпоновкиДанных.Следующий();
		  Если ЭлементРезультатаКомпоновкиДанных = Неопределено Тогда
			Прервать;
		  КонецЕсли;
		  ПроцессорВывода.ВывестиЭлемент(
				  ЭлементРезультатаКомпоновкиДанных);
		КонецЦикла;

		ПроцессорВывода.ЗакончитьВывод();
			
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСхемуКомпоновкиДляПараметрическойНастройки()
	
	Если Объект.ИсточникДанныхСКД = 0 Тогда
		СКД = Новый СхемаКомпоновкиДанных;
		ИсточникДанных = СКД.ИсточникиДанных.Добавить();
		ИсточникДанных.ТипИсточникаДанных = "Local";
		ИсточникДанных.Имя                = "ФиктивныйИсточник";
		НД = СКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
		НД.ИсточникДанных = "ФиктивныйИсточник";
		ПолеДанных = НД.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеДанных.Поле = "Организация";
		ПолеДанных.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
		ПолеДанных = НД.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеДанных.Поле = "Сценарий";
		ПолеДанных.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Сценарии");
		ПолеДанных = НД.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеДанных.Поле = "Период";
		ПолеДанных.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Периоды");
		ПолеДанных = НД.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеДанных.Поле = "Валюта";
		ПолеДанных.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Валюты");
		
	КонецЕсли;
	
	ПутьКСхемеКомпоновкиДанных = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеСоответствия(ВыбранноеЗначение)
	
	ТаблицаПоказателей = ПолучитьИзВременногоХранилища(ПутьКТаблицеПоказателей);
	ТекСтрока          = Объект.ПоказателиОтчета.НайтиПоИдентификатору(Элементы.ПоказателиОтчета.ТекущаяСтрока);
	СтрокаПоказателя   = ТаблицаПоказателей.Найти(ТекСтрока.Показатель, "Показатель");
	СтрокаПоказателя.НастройкиСоответствия.Очистить();
	
	Для Каждого Элемент Из ВыбранноеЗначение Цикл
		НоваяСтрока = СтрокаПоказателя.НастройкиСоответствия.Добавить();
		НоваяСтрока.АналитикаИсточника  = Элемент.Ключ;
		НоваяСтрока.АналитикаПоказателя = Элемент.Значение;
	КонецЦикла;
	
	ПутьКТаблицеПоказателей = ПоместитьВоВременноеХранилище(ТаблицаПоказателей, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеОтборов(ВыбранноеЗначение)
	
	ТаблицаПоказателей = ПолучитьИзВременногоХранилища(ПутьКТаблицеПоказателей);
	ТекСтрока          = Объект.ПоказателиОтчета.НайтиПоИдентификатору(Элементы.ПоказателиОтчета.ТекущаяСтрока);
	СтрокаПоказателя   = ТаблицаПоказателей.Найти(ТекСтрока.Показатель, "Показатель");
	СтрокаПоказателя.НастройкиОтбора.Очистить();
	
	Для Каждого Элемент Из ВыбранноеЗначение Цикл
		ЗаполнитьЗначенияСвойств(СтрокаПоказателя.НастройкиОтбора.Добавить(), Элемент);
	КонецЦикла;
	
	ПутьКТаблицеПоказателей = ПоместитьВоВременноеХранилище(ТаблицаПоказателей, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСхемуКомпоновкиДанных()
	
	Возврат ПолучитьИзВременногоХранилища(ПутьКСхемеКомпоновкиДанных);
	
КонецФункции

&НаСервере
Процедура СохранитьСКД(СКД)
	
	ПутьКСхемеКомпоновкиДанных = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщик()
	
	Попытка
		
		СКД = ПолучитьИзВременногоХранилища(ПутьКСхемеКомпоновкиДанных);
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПутьКСхемеКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);

	Исключение
				
		СтрокаШаблона = НСтр("ru = 'Ошибка в настройках СКД:
		|%1'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = СтрШаблон(СтрокаШаблона, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));		
			СообщениеПользователю.Сообщить();
		КонецЕсли;
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		
	КонецПопытки;
	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоДоступныхПолей()
	
	СКД = ПолучитьИзВременногоХранилища(ПутьКСхемеКомпоновкиДанных);
	КорневыеЭлементы = ДеревоДоступныхПолей.ПолучитьЭлементы();
	КорневыеЭлементы.Очистить();
	
	СтрокаРесурсы         = КорневыеЭлементы.Добавить();
	СтрокаРесурсы.Поле    = Нстр("ru = 'Ресурсы'");
	СтрокаРесурсы.ТипПоля = 0;
	
	СтрокаВычисляемыеПоказатели         = КорневыеЭлементы.Добавить();
	СтрокаВычисляемыеПоказатели.Поле    = Нстр("ru = 'Вычисляемые поля'");
	СтрокаВычисляемыеПоказатели.ТипПоля = 0;
	
	СтрокаГруппировки         = КорневыеЭлементы.Добавить();
	СтрокаГруппировки.Поле    = Нстр("ru = 'Поля группировок'");
	СтрокаГруппировки.ТипПоля = 0;
	
	СтрокаПараметры         = КорневыеЭлементы.Добавить();
	СтрокаПараметры.Поле    = Нстр("ru = 'Параметры'");
	СтрокаПараметры.ТипПоля = 0;
	
	СтрокаОтборы         = КорневыеЭлементы.Добавить();
	СтрокаОтборы.Поле    = Нстр("ru = 'Отборы'");
	СтрокаОтборы.ТипПоля = 0;
	
	Если СКД <> Неопределено Тогда
		НастройкиКомпоновщика = КомпоновщикНастроек.ПолучитьНастройки();
		
		ПоляГруппировок = НастройкиКомпоновщика.ДоступныеПоляГруппировок.Элементы;
		ПоляИтога       = СКД.ПоляИтога;
		ВычисляемыеПоля = СКД.ВычисляемыеПоля;
		ПоляОтборы          = НастройкиКомпоновщика.ДоступныеПоляОтбора.Элементы;
		ПоляПараметры       = НастройкиКомпоновщика.ПараметрыДанных.Элементы;
		
		ЭлементыПоляИтога = СтрокаРесурсы.ПолучитьЭлементы();
		
		Для Каждого Элемент Из ПоляИтога Цикл
			ТекСтрока = ЭлементыПоляИтога.Добавить();
			ТекСтрока.Поле = Элемент.ПутьКДанным;
			ТекСтрока.ТипПоля = 2;
		КонецЦикла;
		
		ЭлементыВычисляемыеПоля = СтрокаВычисляемыеПоказатели.ПолучитьЭлементы();
		
		Для Каждого Элемент Из ВычисляемыеПоля Цикл
			ТекСтрока = ЭлементыВычисляемыеПоля.Добавить();
			ТекСтрока.Поле = Элемент.Заголовок;
			ТекСтрока.ТипПоля = 2;
		КонецЦикла;
		
		ЭлементыПоляГруппировок = СтрокаГруппировки.ПолучитьЭлементы();
		
		Для Каждого Элемент Из ПоляГруппировок Цикл
			ТекСтрока = ЭлементыПоляГруппировок.Добавить();
			ТекСтрока.Поле = Элемент.Заголовок;
			ТекСтрока.ТипПоля = 1;
		КонецЦикла;
		
		ЭлементыПараметры = СтрокаПараметры.ПолучитьЭлементы();
		
		Для Каждого Элемент Из ПоляПараметры Цикл
			ТекСтрока = ЭлементыПараметры.Добавить();
			ТекСтрока.Поле = Элемент.Параметр;
			ТекСтрока.ТипПоля = 1;
		КонецЦикла;

		
		ЭлементыОтборы    = СтрокаОтборы.ПолучитьЭлементы();
		
		Для Каждого Элемент Из ПоляОтборы Цикл
			ТекСтрока = ЭлементыОтборы.Добавить();
			ТекСтрока.Поле = Элемент.Заголовок;
			ТекСтрока.ТипПоля = 1;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выводит в табличный документ отчет по текущему, планируемому и предыдущему значению показателя, заданного
// расчет которого задан в виде схемы компоновки данных.
//
&НаСервере
Процедура ОбработатьОтчет()
	
	СКД = ПолучитьИзВременногоХранилища(ПутьКСхемеКомпоновкиДанных);
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	НастройкиКомпоновщика = КомпоновщикНастроек.ПолучитьНастройки();
	
	ТД.Очистить();
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СКД, НастройкиКомпоновщика, , , Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТД);
	ПроцессорВывода.НачатьВывод();

	Пока Истина Цикл
		
		ЭлементРезультатаКомпоновкиДанных = ПроцессорКомпоновкиДанных.Следующий();
	
		Если ЭлементРезультатаКомпоновкиДанных = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультатаКомпоновкиДанных);
		
	КонецЦикла;

	ПроцессорВывода.ЗакончитьВывод();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРезультатВТабличныйДокумент(ТЗОтвета)
	
	ТД.Очистить();
	
	СКДВывода = ПолучитьОбщийМакет("ВыводРезультата");
	
	НастройкиВывода = СКДВывода.НастройкиПоУмолчанию;
	ВнешниеНаборыДанных = Новый Структура("ТЗВывод", ТЗОтвета);
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКДВывода, СКДВывода.НастройкиПоУмолчанию);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТД);
	ПроцессорВывода.НачатьВывод();
	
	Пока Истина Цикл
	  ЭлементРезультатаКомпоновкиДанных =
	          ПроцессорКомпоновкиДанных.Следующий();
	  Если ЭлементРезультатаКомпоновкиДанных = Неопределено Тогда
	    Прервать;
	  КонецЕсли;
	  ПроцессорВывода.ВывестиЭлемент(
	          ЭлементРезультатаКомпоновкиДанных);
	КонецЦикла;

	ПроцессорВывода.ЗакончитьВывод();
	
	ТиповыеОтчетыУХ.ОтобразитьТрендГрафически(ТД);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеПрогноз()
	
	СКД = ПолучитьИзВременногоХранилища(ПутьКСхемеКомпоновкиДанных);
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	НастройкиКомпоновщика = КомпоновщикНастроек.ПолучитьНастройки();
	НастройкиКомпоновщика.Выбор.Элементы.Очистить();
	
	НастройкиКомпоновщика.ПараметрыВывода.УстановитьЗначениеПараметра("РасположениеИтогов", РасположениеИтоговКомпоновкиДанных.Авто);
	НастройкиКомпоновщика.ПараметрыВывода.УстановитьЗначениеПараметра("ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	НастройкиКомпоновщика.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	
	Если ПустаяСтрока(Объект.ПолеОтбораПоПериоду) Тогда
		Возврат 0;
	КонецЕсли;
	
	ПолеГруппировкиОтбора = Новый ПолеКомпоновкиДанных(Объект.ПолеОтбораПоПериоду + ".ДатаНачала");
	ПолеОтбора = Новый ПолеКомпоновкиДанных(Объект.ПолеОтбораПоПериоду);
	
	Если НастройкиКомпоновщика.ДоступныеПоляВыбора.НайтиПоле(ПолеГруппировкиОтбора) <> Неопределено Тогда
		ГруппировкаПоПериоду = НастройкиКомпоновщика.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаПоПериоду.Использование = Истина;
		ПолеГруппировкиПоПериоду = ГруппировкаПоПериоду.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировкиПоПериоду.Использование = Истина;
		ПолеГруппировкиПоПериоду.Поле = ПолеГруппировкиОтбора;
		
		ВыбранноеПолеПоПериоду = ГруппировкаПоПериоду.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		
		ОтборНайден = Ложь;
		Для Каждого Элемент Из НастройкиКомпоновщика.Отбор.Элементы Цикл
			Если Элемент.ЛевоеЗначение = ПолеОтбора Тогда
				ОтборНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ОтборНайден Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не задан отбор по периоду отчета'");
			Сообщение.Сообщить();
			Возврат 0;
		КонецЕсли;
		
		Если Элемент.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Разрешен только вид сравнения ""Равно""'");
			Сообщение.Сообщить();
			Возврат 0;
		КонецЕсли;
		
		ПериодОтчета = Элемент.ПравоеЗначение;
		Если ТипЗнч(ПериодОтчета) <> Тип("СправочникСсылка.Периоды") Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Период отчета не содержит ссылку на период отчета""'");
			Сообщение.Сообщить();
			Возврат 0;
		КонецЕсли;
		
		Элемент.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		Элемент.ПравоеЗначение = Новый СписокЗначений;
		Элемент.ПравоеЗначение.ЗагрузитьЗначения(ТиповыеОтчетыУХ.ВернутьМассивПериодов(Объект.РазмерДиапазонаДляПрогонозирования, ПериодОтчета.Периодичность, ПериодОтчета.ДатаНачала));
		
		
	Иначе
		Возврат 0;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Объект.ПолеФактическоеЗначениеТекущегоПериода) Тогда
		
		ПолеФактТекПериода = Новый ПолеКомпоновкиДанных(Объект.ПолеФактическоеЗначениеТекущегоПериода);
		
		Если НастройкиКомпоновщика.ДоступныеПоляВыбора.НайтиПоле(ПолеФактТекПериода) <> Неопределено Тогда
			Поле = НастройкиКомпоновщика.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			Поле.Поле = ПолеФактТекПериода;
			Поле.Заголовок = "ФактТекущегоПериода";
		КонецЕсли;
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
	НовоеПолеСортировки = НастройкиКомпоновщика.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовоеПолеСортировки.Использование = Истина;
	НовоеПолеСортировки.Поле = ПолеГруппировкиОтбора;
	НовоеПолеСортировки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
	
	ТЗ = Новый ТаблицаЗначений;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СКД, НастройкиКомпоновщика, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗ);
	ПроцессорВывода.НачатьВывод();

	Пока Истина Цикл
	  ЭлементРезультатаКомпоновкиДанных =
	          ПроцессорКомпоновкиДанных.Следующий();
	  Если ЭлементРезультатаКомпоновкиДанных = Неопределено Тогда
	    Прервать;
	  КонецЕсли;
	  ПроцессорВывода.ВывестиЭлемент(
	          ЭлементРезультатаКомпоновкиДанных);
	КонецЦикла;

	ПроцессорВывода.ЗакончитьВывод();	
	
	РезультатПрогнозирования = УправлениеОтчетамиУХ.РасчетТренда(ТЗ, "ПериодОтчетаДатаНачала", "Значение",
															  , Новый Структура("ДатаНачала, Период, КоличествоПериодов", ПериодОтчета.ДатаНачала, ТипЕдиницыИнтервалаВремениАнализаДанных.Год, 1)
															  , Объект.РазмерДиапазонаДляПрогонозирования, Объект.Смещение, Истина);
															  
	Возврат ?(РезультатПрогнозирования = Неопределено, 0, РезультатПрогнозирования.Значение);
	
	
	
КонецФункции

&НаСервере
Функция ВернутьАналитикиПоказателя(Показатель)
	
	Запрос = Новый ЗАпрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыОтчетов.ВидАналитики1 КАК АналитикаНаУровнеОтчета1,
	|	ВидыОтчетов.ВидАналитики2 КАК АналитикаНаУровнеОтчета2,
	|	ВидыОтчетов.ВидАналитики3 КАК АналитикаНаУровнеОтчета3,
	|	ВидыОтчетов.ВидАналитики4 КАК АналитикаНаУровнеОтчета4,
	|	ВидыОтчетов.ВидАналитики5 КАК АналитикаНаУровнеОтчета5,
	|	ВидыОтчетов.ВидАналитики6 КАК АналитикаНаУровнеОтчета6,
	|	ГруппыРаскрытия.ВидАналитики1 КАК АналитикаНаУровнеПоказателя1,
	|	ГруппыРаскрытия.ВидАналитики2 КАК АналитикаНаУровнеПоказателя2,
	|	ГруппыРаскрытия.ВидАналитики3 КАК АналитикаНаУровнеПоказателя3,
	|	ГруппыРаскрытия.ВидАналитики4 КАК АналитикаНаУровнеПоказателя4,
	|	ГруппыРаскрытия.ВидАналитики5 КАК АналитикаНаУровнеПоказателя5,
	|	ГруппыРаскрытия.ВидАналитики6 КАК АналитикаНаУровнеПоказателя6,
	|	ГруппыРаскрытия.ВидАналитики1.ТипЗначения КАК ТипЗначенияАналитикиНаУровнеПоказателя1,
	|	ГруппыРаскрытия.ВидАналитики2.ТипЗначения КАК ТипЗначенияАналитикиНаУровнеПоказателя2,
	|	ГруппыРаскрытия.ВидАналитики3.ТипЗначения КАК ТипЗначенияАналитикиНаУровнеПоказателя3,
	|	ГруппыРаскрытия.ВидАналитики4.ТипЗначения КАК ТипЗначенияАналитикиНаУровнеПоказателя4,
	|	ГруппыРаскрытия.ВидАналитики5.ТипЗначения КАК ТипЗначенияАналитикиНаУровнеПоказателя5,
	|	ГруппыРаскрытия.ВидАналитики6.ТипЗначения КАК ТипЗначенияАналитикиНаУровнеПоказателя6,
	|	ВидыОтчетов.ВидАналитики1.ТипЗначения КАК ТипЗначенияАналитикиНаУровнеОтчета1,
	|	ВидыОтчетов.ВидАналитики2.ТипЗначения КАК ТипЗначенияАналитикиНаУровнеОтчета2,
	|	ВидыОтчетов.ВидАналитики3.ТипЗначения КАК ТипЗначенияАналитикиНаУровнеОтчета3,
	|	ВидыОтчетов.ВидАналитики4.ТипЗначения КАК ТипЗначенияАналитикиНаУровнеОтчета4,
	|	ВидыОтчетов.ВидАналитики5.ТипЗначения КАК ТипЗначенияАналитикиНаУровнеОтчета5,
	|	ВидыОтчетов.ВидАналитики6.ТипЗначения КАК ТипЗначенияАналитикиНаУровнеОтчета6
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
	|		ПО ПоказателиОтчетов.ГруппаРаскрытия = ГруппыРаскрытия.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОтчетов КАК ВидыОтчетов
	|		ПО ПоказателиОтчетов.Владелец = ВидыОтчетов.Ссылка
	|ГДЕ
	|	ПоказателиОтчетов.Ссылка = &Показатель";
	
	Запрос.УстановитьПараметр("Показатель", Показатель);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ЧислоАналитикНаУровнеОтчета = 0;
	ЧислоАналитик               = 0;
	ОбработкаОтчета             = Истина;
	СтруктураОтвета             = Новый Структура;
	Инд                         = 1;
	
	Пока Инд <=ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если ОбработкаОтчета Тогда
			ИмяАналитики = "АналитикаНаУровнеОтчета" + Инд;
			Если ЗначениеЗаполнено(Выборка[ИмяАналитики]) Тогда
				ТекАналитика   = Выборка[ИмяАналитики];
				ТекТипЗначения = Выборка["ТипЗначенияАналитикиНаУровнеОтчета" + Инд];
				ЧислоАналитикНаУровнеОтчета = ЧислоАналитикНаУровнеОтчета + 1;
				ЧислоАналитик               = ЧислоАналитик + 1;
				Инд = Инд + 1;
			Иначе
				ОбработкаОтчета = Ложь;
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			ИмяАналитики = "АналитикаНаУровнеПоказателя" + Инд;
			ТекАналитика   = Выборка[ИмяАналитики];
			ТекТипЗначения = Выборка["ТипЗначенияАналитикиНаУровнеПоказателя" + Инд];
			
			Инд = Инд + 1;
			Если ЗначениеЗаполнено(Выборка[ИмяАналитики]) Тогда
				ЧислоАналитик               = ЧислоАналитик + 1;
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураОтвета.Вставить("Аналитика"    + Строка(Инд-1)   , ТекАналитика);
		СтруктураОтвета.Вставить("ТипАналитики" + Строка(Инд-1), ?(ЗначениеЗаполнено(ТекТипЗначения), ТекТипЗначения.Типы()[0], Неопределено));
		
	КонецЦикла;
	
	СтруктураОтвета.Вставить("ЧислоАналитик", ЧислоАналитик);
	СтруктураОтвета.Вставить("ЧислоАналитикНаУровнеОтчета", ЧислоАналитикНаУровнеОтчета);
	
	Возврат СтруктураОтвета;
	
КонецФункции

&НаСервере
Процедура ДополнитьСтрокуПоказателя(Показатель, Ид_Строки)
	
	НастройкиПоказателя   = Новый Структура;
	АналитикиПоказателя   = Новый ТаблицаЗначений;
	НастройкиОтбора       = Новый ТаблицаЗначений;
	НастройкиСоответствия = Новый ТаблицаЗначений;
	
	АналитикиПоказателяОтчета = ВернутьАналитикиПоказателя(Показатель);
	
	АналитикиПоказателя.Колонки.Добавить("НомерАналитики", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1, 0));
	АналитикиПоказателя.Колонки.Добавить("ВидАналитики", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные"));
	АналитикиПоказателя.Колонки.Добавить("ТипЗначения");
	
	НастройкиОтбора.Колонки.Добавить("Использование", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	НастройкиОтбора.Колонки.Добавить("ОбщийОтбор", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	НастройкиОтбора.Колонки.Добавить("ЛевоеЗначение");
	НастройкиОтбора.Колонки.Добавить("ВидСравнения");
	НастройкиОтбора.Колонки.Добавить("ПравоеЗначение");
	НастройкиОтбора.Колонки.Добавить("ИмяОбъектаМетаданных");
	НастройкиОтбора.Колонки.Добавить("Владелец", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные"));
	
	НастройкиСоответствия.Колонки.Добавить("АналитикаИсточника", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1, 0));
	НастройкиСоответствия.Колонки.Добавить("АналитикаПоказателя", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1, 0));
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ЗначениеЗаполнено(Объект["Аналитика" + Инд]) Тогда
			НастройкиСоответствия.Добавить().АналитикаИсточника = Инд;
		КонецЕсли;
	КонецЦикла;
	
	НоваяСтрока                      = НастройкиОтбора.Добавить();
	НоваяСтрока.ОбщийОтбор           = Истина;
	НоваяСтрока.Использование        = Истина;
	НоваяСтрока.ЛевоеЗначение        = Новый ПолеКомпоновкиДанных("Организация");
	НоваяСтрока.ВидСравнения         = ВидСравненияКомпоновкиДанных.Равно;
	НоваяСтрока.ПравоеЗначение       = Справочники.Организации.ПустаяСсылка();
	НоваяСтрока.ИмяОбъектаМетаданных = "Справочник.Организации";
	
	НоваяСтрока                      = НастройкиОтбора.Добавить();
	НоваяСтрока.ОбщийОтбор           = Истина;
	НоваяСтрока.Использование        = Истина;
	НоваяСтрока.ЛевоеЗначение        = Новый ПолеКомпоновкиДанных("Период");
	НоваяСтрока.ВидСравнения         = ВидСравненияКомпоновкиДанных.Равно;
	НоваяСтрока.ПравоеЗначение       = Справочники.Периоды.ПустаяСсылка();
	НоваяСтрока.ИмяОбъектаМетаданных = "Справочник.Периоды";
	
	НоваяСтрока                      = НастройкиОтбора.Добавить();
	НоваяСтрока.ОбщийОтбор           = Истина;
	НоваяСтрока.Использование        = Истина;
	НоваяСтрока.ЛевоеЗначение        = Новый ПолеКомпоновкиДанных("Сценарий");
	НоваяСтрока.ВидСравнения         = ВидСравненияКомпоновкиДанных.Равно;
	НоваяСтрока.ПравоеЗначение       = Справочники.Сценарии.ПустаяСсылка();
	НоваяСтрока.ИмяОбъектаМетаданных = "Справочник.Сценарии";
	
	НоваяСтрока                      = НастройкиОтбора.Добавить();
	НоваяСтрока.ОбщийОтбор           = Истина;
	НоваяСтрока.Использование        = Истина;
	НоваяСтрока.ЛевоеЗначение        = Новый ПолеКомпоновкиДанных("Валюта");
	НоваяСтрока.ВидСравнения         = ВидСравненияКомпоновкиДанных.Равно;
	НоваяСтрока.ПравоеЗначение       = Справочники.Валюты.ПустаяСсылка();
	НоваяСтрока.ИмяОбъектаМетаданных = "Справочник.Валюты";
	
	Нечисловой      = НЕ Показатель.ЧисловойПоказатель;
	
	ЧислоАналитик                   = АналитикиПоказателяОтчета.ЧислоАналитик;
	ЧислоАналитикНаУровнеОтчета     = АналитикиПоказателяОтчета.ЧислоАналитикНаУровнеОтчета;
	ЧислоАналитикНаУровнеПоказателя = ЧислоАналитик - ЧислоАналитикНаУровнеОтчета;
	
	Если ЧислоАналитикНаУровнеПоказателя = 0 Тогда
		ЕстьРаскрытия            = Ложь;
	Иначе
		ЕстьРаскрытия            = Истина;
		РегистрЗначенийРаскрытия = "ЗначенияПоказателейОтчетов" + Строка(ЧислоАналитикНаУровнеПоказателя);
		ОтборАналитикРаскрытия   = "";
	КонецЕсли;
	
	Если НеЧисловой Тогда
		РегистрЗначенийСинтетика = "ЗначенияПоказателейОтчетовНечисловые";
		ИтоговоеЗначение         = "ИтоговоеЗначение КАК ИтоговоеЗначение";
	Иначе
		
		РегистрЗначенийСинтетика = ?(ЧислоАналитикНаУровнеОтчета = 0, "ЗначенияПоказателейОтчетовСинтетика", "ЗначенияПоказателейОтчетов" + Строка(ЧислоАналитикНаУровнеОтчета));
		Если ЧислоАналитикНаУровнеОтчета = 0 Тогда
			ИтоговоеЗначение = "ИСТИНА КАК ИтоговоеЗначение";
		Иначе
			ИтоговоеЗначение = "ИтоговоеЗначение КАК ИтоговоеЗначение";
		КонецЕсли;

	КонецЕсли;
	
	ВыборАналитикСинтетика = "";
	ОтборАналитикСинтетика = "";
	ВыборАналитикРаскрытия = "";
	ОтборАналитикРаскрытия = "";
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		СтрокаАналитики = АналитикиПоказателя.Добавить();
		СтрокаАналитики.НомерАналитики = Инд;
		
		АналитикиПоказателяОтчета.Свойство("Аналитика" + Инд, СтрокаАналитики.ВидАналитики);
		АналитикиПоказателяОтчета.Свойство("ТипАналитики" + Инд, СтрокаАналитики.ТипЗначения);
		
		ВыборАналитикСинтетика = ВыборАналитикСинтетика + ", " + ?(Инд <=ЧислоАналитикНаУровнеОтчета, "ЗначенияПоказателейОтчетов.Аналитика" + Инд, "NULL") + " КАК Аналитика" + Инд;
		
		Если ЕстьРаскрытия И НЕ Нечисловой Тогда
			
			ВыборАналитикРаскрытия = ВыборАналитикРаскрытия + ", " + ?(Инд <=ЧислоАналитикНаУровнеПоказателя, "ЗначенияПоказателейОтчетов.Аналитика" + Инд, "NULL") + " КАК Аналитика" + Инд;
			
			Если Инд <= ЧислоАналитикНаУровнеПоказателя Тогда
				ОтборАналитикРаскрытия = ОтборАналитикРаскрытия + ", ЗначенияПоказателейОтчетов.Аналитика" + Инд + ".* КАК %ОтборАналитика" + Инд + "%";
			КонецЕсли;
			
			Если Инд <= ЧислоАналитикНаУровнеОтчета Тогда
				ОтборАналитикСинтетика = ОтборАналитикСинтетика + ", ЗначенияПоказателейОтчетов.Аналитика" + Инд + ".* КАК %ОтборАналитика" + Инд + "%";
			КонецЕсли;
			
		Иначе
			
			Если Инд <= ЧислоАналитикНаУровнеОтчета Тогда
				ОтборАналитикСинтетика = ОтборАналитикСинтетика + ", ЗначенияПоказателейОтчетов.Аналитика" + Инд + ".* КАК %ОтборАналитика" + Инд + "%";
			КонецЕсли;
			
		КонецЕсли;
		
		ИмяАналитики = "Аналитика" + Инд;
		
		Если ЗначениеЗаполнено(АналитикиПоказателяОтчета[ИмяАналитики]) Тогда
			
			ТипАналитики = АналитикиПоказателяОтчета["ТипАналитики" + Инд];
			
			НоваяСтрока                      = НастройкиОтбора.Добавить();
			НоваяСтрока.ОбщийОтбор           = Истина;
			НоваяСтрока.Использование        = Истина;
			НоваяСтрока.ЛевоеЗначение        = Новый ПолеКомпоновкиДанных(ИмяАналитики);
			НоваяСтрока.ВидСравнения         = ВидСравненияКомпоновкиДанных.Равно;
			НоваяСтрока.ПравоеЗначение       = Новый (ТипАналитики);
			НоваяСтрока.ИмяОбъектаМетаданных = Метаданные.НайтиПоТипу(ТипАналитики).ПолноеИмя();
			НоваяСтрока.Владелец             = АналитикиПоказателяОтчета[ИмяАналитики];
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетов.Показатель,
	|	ЗначенияПоказателейОтчетов.Значение КАК Значение,
	|	ВерсииЗначенийПоказателей.ПериодОтчета КАК Период,
	|	ВерсииЗначенийПоказателей.Сценарий КАК Сценарий,
	|	%ИтоговоеЗначение%
	|	%ВыборАналитик%
	|ИЗ
	|	РегистрСведений.%ЗначенияПоказателейОтчетов% КАК ЗначенияПоказателейОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|		ПО ЗначенияПоказателейОтчетов.Версия = ВерсииЗначенийПоказателей.Ссылка
	|{ГДЕ
	|	ВерсииЗначенийПоказателей.Организация.* КАК %ОтборОрганизация%,
	|	ВерсииЗначенийПоказателей.ПериодОтчета.* КАК %ОтборПериод%,
	|	ВерсииЗначенийПоказателей.Сценарий.* КАК %ОтборСценарий%,
	|	ВерсииЗначенийПоказателей.Валюта.* КАК %ОтборВалюта%
	|	%ОтборАналитик%
	|}";
	
	ИтоговыйТекстЗапроса = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(ТекстЗапроса, "%ВыборАналитик%", ВыборАналитикСинтетика), "%ОтборАналитик%", ОтборАналитикСинтетика), "%ЗначенияПоказателейОтчетов%", РегистрЗначенийСинтетика), "%ИтоговоеЗначение%", ИтоговоеЗначение);
	
	Если ЕстьРаскрытия И НЕ Нечисловой Тогда
		
		ИтоговыйТекстЗапроса = ИтоговыйТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|" + СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(ТекстЗапроса, "%ВыборАналитик%", ВыборАналитикРаскрытия), "%ОтборАналитик%", ОтборАналитикРаскрытия), "%ЗначенияПоказателейОтчетов%", РегистрЗначенийРаскрытия), "%ИтоговоеЗначение%", "ИтоговоеЗначение КАК ИтоговоеЗначение");
		
	КонецЕсли;
	
	ТекСтрока                            = Объект.ПоказателиОтчета.НайтиПоИдентификатору(Ид_Строки);
	ТекСтрока.ТекстЗапроса               = ИтоговыйТекстЗапроса;
	ТекСтрока.КодПоказателя              = Показатель.Код;
	ТекСтрока.НаименованиеПоказателя     = Показатель.Наименование;
	ТекСтрока.СоответствиеАналитикОтчета = 0;
	ТекСтрока.НастройкиОтборов           = 0;
	
	ТаблицаПоказателей = ПолучитьИзВременногоХранилища(ПутьКТаблицеПоказателей);
	СтрокаТаблицы      = ТаблицаПоказателей.Найти(ТекСтрока.Показатель, "Показатель");
	
	Если СтрокаТаблицы = Неопределено Тогда
		
		СтрокаТаблицы            = ТаблицаПоказателей.Добавить();
		СтрокаТаблицы.Показатель = ТекСтрока.Показатель;
		
	КонецЕсли;
	
	СтрокаТаблицы.АналитикиПоказателя   = АналитикиПоказателя.Скопировать();
	СтрокаТаблицы.НастройкиОтбора       = НастройкиОтбора.Скопировать();
	СтрокаТаблицы.НастройкиСоответствия = НастройкиСоответствия.Скопировать();
	
	ПоместитьВоВременноеХранилище(ТаблицаПоказателей, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ВызватьОкноНастройкиОтборов()
	
	ТаблицаПоказателей = ПолучитьИзВременногоХранилища(ПутьКТаблицеПоказателей);
	ТекСтрока = Объект.ПоказателиОтчета.НайтиПоИдентификатору(Элементы.ПоказателиОтчета.ТекущаяСтрока);
	ТекСтрока = ТаблицаПоказателей.Найти(ТекСтрока.Показатель, "Показатель");
	Возврат ПоместитьВоВременноеХранилище(ТекСтрока.НастройкиОтбора.Скопировать());
	
КонецФункции

&НаСервере
Функция ВызватьОкноНастройкиСоответствия()
	
	ТаблицаПоказателей = ПолучитьИзВременногоХранилища(ПутьКТаблицеПоказателей);
	ТекСтрока = Объект.ПоказателиОтчета.НайтиПоИдентификатору(Элементы.ПоказателиОтчета.ТекущаяСтрока);
	ТекСтрока = ТаблицаПоказателей.Найти(ТекСтрока.Показатель, "Показатель");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыСубконто.Ссылка,
	|	ВидыСубконто.ТипЗначения,
	|	ВидыСубконто.Представление
	|ИЗ
	|	ПланВидовХарактеристик.ВидыСубконтоКорпоративные КАК ВидыСубконто
	|ГДЕ
	|	ВидыСубконто.Ссылка В(&МассивАналитик)";
	
	МассивАналитик = Новый Массив;
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если НЕ ЗначениеЗаполнено(Объект["Аналитика" + Инд]) Тогда
			Прервать;
		КонецЕсли;
		
		МассивАналитик.Добавить(Объект["Аналитика" + Инд]);
		
	КонецЦикла;
	
	Инд = Инд - 1;
	Запрос.УстановитьПараметр("МассивАналитик", МассивАналитик);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("АналитикаИсточника"     , ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(400));
	ТаблицаНастроек.Колонки.Добавить("АналитикаПоказателя"     , ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(400));
	ТаблицаНастроек.Колонки.Добавить("НомерАналитикиИсточника", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1, 0));
	ТаблицаНастроек.Колонки.Добавить("СписокДоступныхАналитик", Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаНастроек.Колонки.Добавить("НомерАналитикиПоказателя", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1, 0));
	
	ОбщийСписокЗначений = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		
		НомерАналитики = МассивАналитик.Найти(Выборка.Ссылка) + 1;
		НоваяСтрока = ТаблицаНастроек.Добавить();
		НоваяСтрока.АналитикаИсточника = "Аналитика " + НомерАналитики + ":" + Выборка.Представление;
		НоваяСтрока.НомерАналитикиИсточника = НомерАналитики;
		
		АналитикиПоказателя = ТекСтрока.АналитикиПоказателя.Скопировать();
		ТипАналитикиИсточника = Выборка.ТипЗначения.Типы()[0];
		
		НоваяСтрока.СписокДоступныхАналитик = Новый СписокЗначений;
		НайденнаяСтрока = ТекСтрока.НастройкиСоответствия.НайтиСтроки(Новый Структура("АналитикаИсточника", НомерАналитики));
		Если НайденнаяСтрока.КОличество() = 0 Тогда
			НоваяСтрока.НомерАналитикиПоказателя = 0;
		Иначе
			НоваяСтрока.НомерАналитикиПоказателя = НайденнаяСтрока[0].АналитикаПоказателя;
			Если НоваяСтрока.НомерАналитикиПоказателя <> 0 Тогда
				НоваяСтрока.АналитикаПоказателя      = "Аналитика " + НоваяСтрока.НомерАналитикиПоказателя + ":" + АналитикиПоказателя.Найти(НоваяСтрока.НомерАналитикиПоказателя, "НомерАналитики").ВидАналитики;
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого Элемент Из АналитикиПоказателя Цикл
			
			Если Элемент.ТипЗначения = ТипАналитикиИсточника Тогда
				НоваяСтрока.СписокДоступныхАналитик.Добавить(Элемент.НомерАналитики, "Аналитика " + Элемент.НомерАналитики + ":" + Элемент.ВидАналитики);
				Если ОбщийСписокЗначений.НайтиПоЗначению(Элемент.НомерАналитики) = Неопределено Тогда
					ОбщийСписокЗначений.Добавить(Элемент.НомерАналитики, "Аналитика " + Элемент.НомерАналитики + ":" + Элемент.ВидАналитики);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Новый Структура("ОбщийСписокАналитикПоказателя, ПутьКНастройкеСоответствия", ОбщийСписокЗначений, ПоместитьВоВременноеХранилище(ТаблицаНастроек));
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ИСПОЛНЯЕМЫЕ НА КЛИЕНТЕ.
//

&НаКлиенте
Процедура ВставитьТекстВФормулу(ТекстДляВставки, Сдвиг=0)
	
	СтрокаНач=0;
	СтрокаКон=0;
	КолонкаНач=0;
	КолонкаКон=0;
	
	Элементы.ТекстФормулы.ПолучитьГраницыВыделения(СтрокаНач, КолонкаНач, СтрокаКон, КолонкаКон);
	
	
	Если ПустаяСтрока(СокрЛП(ТекстФормулы.ПолучитьТекст())) Тогда
		
		Элементы.ТекстФормулы.УстановитьГраницыВыделения(1,1,1,1);
		
	ИначеЕсли (КолонкаКон=КолонкаНач) И (КолонкаКон+СтрДлина(ТекстДляВставки))>Элементы.ТекстФормулы.Ширина/8 Тогда
		
		Элементы.ТекстФормулы.ВыделенныйТекст = Символы.ПС;
		
	КонецЕсли;
		
	Элементы.ТекстФормулы.ВыделенныйТекст = ТекстДляВставки;
	
	Если НЕ Сдвиг=0 Тогда
		
		Элементы.ТекстФормулы.ПолучитьГраницыВыделения(СтрокаНач,
																			КолонкаНач,
																			СтрокаКон,
																			КолонкаКон);
		
		Элементы.ТекстФормулы.УстановитьГраницыВыделения(СтрокаНач,КолонкаНач+Сдвиг,СтрокаКон,КолонкаКон+Сдвиг);
		
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаменитьКодНаименование(Знач ТекущийТекст)
	
	Для Каждого Элемент Из Объект.ПоказателиОтчета Цикл
		
		Если Объект.ПоказателиВВидеКода = 0 Тогда
			
			ТекущийТекст=СтрЗаменить(ТекущийТекст,"["+СокрЛП(Элемент.КодПоказателя)+"]","["+СокрЛП(Элемент.НаименованиеПоказателя)+"]");
			
		Иначе
			
			ТекущийТекст=СтрЗаменить(ТекущийТекст,"["+СокрЛП(Элемент.НаименованиеПоказателя)+"]","["+СокрЛП(Элемент.КодПоказателя)+"]");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекущийТекст;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДоступныеЗначения()
	
	// Массив доступных значений для планового значения.
	МассивЗначений = СписокПолей.ВыгрузитьЗначения();
	
	УдПоле = МассивЗначений.Найти(Объект.ПолеФактическоеЗначениеПредыдущегоПериода);
	Если УдПоле <> Неопределено Тогда
		МассивЗначений.Удалить(УдПоле);
	КонецЕсли;
	
	УдПоле = МассивЗначений.Найти(Объект.ПолеФактическоеЗначениеТекущегоПериода);
	Если УдПоле <> Неопределено Тогда
		МассивЗначений.Удалить(УдПоле);
	КонецЕсли;
	
	Если МассивЗначений.Найти(Объект.ПолеПлановоеЗначение) = Неопределено Тогда
		Объект.ПолеПлановоеЗначение = "";
	КонецЕсли;
	
	Элементы.ПолеПлановоеЗначение.СписокВыбора.Очистить();
	Элементы.ПолеПлановоеЗначение.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	
	//Массив доступных значений для факта предыдущего периода.
	
	МассивЗначений = СписокПолей.ВыгрузитьЗначения();
	
	УдПоле = МассивЗначений.Найти(Объект.ПолеПлановоеЗначение);
	Если УдПоле <> Неопределено Тогда
		МассивЗначений.Удалить(УдПоле);
	КонецЕсли;
	
	УдПоле = МассивЗначений.Найти(Объект.ПолеФактическоеЗначениеТекущегоПериода);
	Если УдПоле <> Неопределено Тогда
		МассивЗначений.Удалить(УдПоле);
	КонецЕсли;
	
	Если МассивЗначений.Найти(Объект.ПолеФактическоеЗначениеПредыдущегоПериода) = Неопределено Тогда
		Объект.ПолеФактическоеЗначениеПредыдущегоПериода = "";
	КонецЕсли;
	
	Элементы.ПолеФактическоеЗначениеПредыдущегоПериода.СписокВыбора.Очистить();
	Элементы.ПолеФактическоеЗначениеПредыдущегоПериода.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	
	// Массив доступных значений для факта текущего периода.
	
	МассивЗначений = СписокПолей.ВыгрузитьЗначения();
	
	УдПоле = МассивЗначений.Найти(Объект.ПолеФактическоеЗначениеПредыдущегоПериода);
	Если УдПоле <> Неопределено Тогда
		МассивЗначений.Удалить(УдПоле);
	КонецЕсли;
	
	УдПоле = МассивЗначений.Найти(Объект.ПолеПлановоеЗначение);
	Если УдПоле <> Неопределено Тогда
		МассивЗначений.Удалить(УдПоле);
	КонецЕсли;
	
	Если МассивЗначений.Найти(Объект.ПолеФактическоеЗначениеТекущегоПериода) = Неопределено Тогда
		Объект.ПолеФактическоеЗначениеТекущегоПериода = "";
	КонецЕсли;
	
	Элементы.ПолеФактическоеЗначениеТекущегоПериода.СписокВыбора.Очистить();
	Элементы.ПолеФактическоеЗначениеТекущегоПериода.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательПриИзменении(Элемент)
	
	ДополнитьСтрокуПоказателя(Элементы.ПоказателиОтчета.ТекущиеДанные.Показатель, Элементы.ПоказателиОтчета.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбора(Элемент, ИндексАналитикиИсточника)
	
	ТекСтрока = Объект.ПоказателиОтчета.НайтиПоИдентификатору(Элементы.ПоказателиОтчета.ТекущаяСтрока);
	ТекПоказатель = ТекСтрока.Показатель;
	НайденныеСтроки = СоставСпискаВыбораАналитик.НайтиСтроки(Новый Структура("НомерАналитикиИсточника, Показатель", ИндексАналитикиИсточника, ТекПоказатель));
	
	Элемент.СписокВыбора.Очистить();
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Элемент.СписокВыбора.Добавить(НайденнаяСтрока.НомерАналитикиПоказателя, НайденнаяСтрока.Представление);
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РЕДАКТИРОВАНИЯ ФОРМУЛЫ РАСЧЕТА ПОКАЗАТЕЛЯ.
//

&НаКлиенте
Процедура Команда_Делить(Команда)
	
	ВставитьТекстВФормулу(" / ");
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_Минус(Команда)
	
	ВставитьТекстВФормулу(" - ");
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_ОперандФормулы(Команда)
	
	ВставитьТекстВФормулу(" []", -1);
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_Плюс(Команда)
	
	ВставитьТекстВФормулу(" + ");
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_Равно(Команда)
	
	ВставитьТекстВФормулу(" = ");
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_Скобки(Команда)
	
	ВставитьТекстВФормулу(" ()", -1);
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_Умножить(Команда)
	
	ВставитьТекстВФормулу(" * ");
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_Условие(Команда)
	
	ВставитьТекстВФормулу(" ?(,,)" , -3);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ИСТОЧНИКОМ ДАННЫХ - ИСТОЧНИКОМ ДАННЫХ ДЛЯ РАСЧЕТА.
//

&НаСервере
Процедура СформироватьСКДВнешнегоИсточникаДляМонитораЭффективности()
	
	СКД = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных             = СКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя         = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных                = СКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.Имя            = "НаборДанных1";
	НаборДанных.ИмяОбъекта     = "ИсточникДанныхДляРасчетов";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	
	НовыйПараметр = СКД.Параметры.Добавить();
	НовыйПараметр.Имя = "Организация";
	НовыйПараметр.Заголовок = НСтр("ru = 'Организационная единица отчета'");
	НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НовыйПараметр.ОграничениеИспользования = Ложь;
	
	НовыйПараметр = СКД.Параметры.Добавить();
	НовыйПараметр.Имя = "Сценарий";
	НовыйПараметр.Заголовок = НСтр("ru = 'Сценарий отчета'");
	НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Сценарии");
	НовыйПараметр.ОграничениеИспользования = Ложь;
	
	НовыйПараметр = СКД.Параметры.Добавить();
	НовыйПараметр.Имя = "ПериодОтчета";
	НовыйПараметр.Заголовок = НСтр("ru = 'Период отчета'");
	НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Периоды");
	НовыйПараметр.ОграничениеИспользования = Ложь;
	
	НовыйПараметр = СКД.Параметры.Добавить();
	НовыйПараметр.Имя = "ОсновнаяВалюта";
	НовыйПараметр.Заголовок = НСтр("ru = 'Валюта отчета'");
	НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Валюты");
	НовыйПараметр.ОграничениеИспользования = Ложь;
	
	ПутьКСхемеКомпоновкиДанных = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПутьКСхемеКомпоновкиДанных));
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСКДПоИсточнику()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Синоним,
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Поле,
	|	СоответствиеВнешнимИБ.ТипОбъектаКонсолидации,
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.КодАналитики,
	|	СоответствиеВнешнимИБ.ИмяОбъектаМетаданных
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса КАК ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	|		ПО ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.НастройкаСоответствия = СоответствиеВнешнимИБ.Ссылка
	|ГДЕ
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка = &ИсточникДанныхДляРасчетов";
	
	Запрос.УстановитьПараметр("ИсточникДанныхДляРасчетов", Объект.ИсточникДанныхДляРасчетов);
	
	СКД = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных             = СКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя         = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных                = СКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.Имя            = "НаборДанных1";
	НаборДанных.ИмяОбъекта     = "ИсточникДанныхДляРасчетов";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		
		Если Выборка.КодАналитики = "Значение" Тогда
			
			ПолеИтога = СКД.ПоляИтога.Добавить();
			ПолеИтога.ПутьКДанным = "Значение";
			ПолеИтога.Выражение   = "СУММА(Значение)";

			Поле.Заголовок   = "Значение";
			Поле.Поле        = "Значение";
			Поле.ПутьКДанным = "Значение";
			Поле.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 5));
			
		Иначе
			Поле.Заголовок   = Выборка.КодАналитики;
			Поле.Поле        = Выборка.Синоним;
			Поле.ПутьКДанным = Выборка.Синоним;
			
			Если Выборка.ТипОбъектаКонсолидации = NULL Тогда
				Поле.ТипЗначения = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500, ДопустимаяДлина.Переменная));
			ИначеЕсли Выборка.ТипОбъектаКонсолидации = "ВидСубконто" Тогда
				Поле.ТипЗначения = Выборка.ИмяОбъектаМетаданных.ТипЗначения;
			Иначе
				Поле.ТипЗначения = Новый ОписаниеТипов(Выборка.ТипОБъектаКонсолидации + "Ссылка." + Выборка.ИмяОбъектаМетаданных);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НовыйПараметр = СКД.Параметры.Добавить();
	НовыйПараметр.Имя = "Организация";
	НовыйПараметр.Заголовок = НСтр("ru = 'Организационная единица отчета'");
	НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НовыйПараметр.ОграничениеИспользования = Ложь;
	
	НовыйПараметр = СКД.Параметры.Добавить();
	НовыйПараметр.Имя = "Сценарий";
	НовыйПараметр.Заголовок = НСтр("ru = 'Сценарий отчета'");
	НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Сценарии");
	НовыйПараметр.ОграничениеИспользования = Ложь;
	
	НовыйПараметр = СКД.Параметры.Добавить();
	НовыйПараметр.Имя = "ПериодОтчета";
	НовыйПараметр.Заголовок = НСтр("ru = 'Период отчета'");
	НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Периоды");
	НовыйПараметр.ОграничениеИспользования = Ложь;
	
	НовыйПараметр = СКД.Параметры.Добавить();
	НовыйПараметр.Имя = "ОсновнаяВалюта";
	НовыйПараметр.Заголовок = НСтр("ru = 'Валюта отчета'");
	НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Валюты");
	НовыйПараметр.ОграничениеИспользования = Ложь;
	
	ПутьКСхемеКомпоновкиДанных = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПутьКСхемеКомпоновкиДанных));
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникДанныхДляРасчетовПриИзменении(Элемент)
	
	СформироватьСКДПоИсточнику();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросДляПолученияЗначенияПоказателя(Команда)
	СформироватьСКДПоШаблону(0);
КонецПроцедуры

&НаКлиенте
Процедура ЗапросДляСравнительногоАнализаПоПериодам(Команда)
	СформироватьСКДПоШаблону(2);
КонецПроцедуры

&НаКлиенте
Процедура ЗапросДляПланФактногоАнализа(Команда)
	СформироватьСКДПоШаблону(1);
КонецПроцедуры

&НаКлиенте
Процедура ЗапросДляСравнительногоАнализаПоОрганизациям(Команда)
	СформироватьСКДПоШаблону(3);
КонецПроцедуры


&НаСервере
Процедура СформироватьСКДПоШаблону(ВидСравнительногоАнализа)
	
	Если ВидСравнительногоАнализа = 0 Тогда
		СКД = Справочники.Запросы.ПолучитьМакет("ЗапросКРегиструЗначенийПоказателей");
	ИначеЕсли ВидСравнительногоАнализа = 1 Тогда
		СКД = Справочники.Запросы.ПолучитьМакет("ПланФакт");
	ИначеЕсли ВидСравнительногоАнализа = 2 Тогда
		СКД = Справочники.Запросы.ПолучитьМакет("СравнительныйАнализПоПериодам");
	ИначеЕсли ВидСравнительногоАнализа = 3 Тогда
		СКД = Справочники.Запросы.ПолучитьМакет("СравнительныйАнализПоОрганизациям");
	КонецЕсли;
	
	СохранитьСКД(СКД);
	ИнициализироватьКомпоновщик();
	ОбновитьДеревоДоступныхПолей();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗаписанСправочникЗапрос", Новый Структура("ПотребительРасчета",Объект.ПотребительРасчета));
	
КонецПроцедуры




