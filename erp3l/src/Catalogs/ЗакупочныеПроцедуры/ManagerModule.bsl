#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	

#Область ОбщийПрограмныйИнтерфейс


// Ищеть закупку по строке плана, если находит, то
// возвращает ее. Иначе проверяет, что по переданной
// строке плана можно создать закупочную процедуру,
// и создает ее.
//
// Параметры:
//  СтрокаПланаЗакупки - ДокументСсылка.СтрокаПланаЗакупок - 
// 		строка для заполнения закупочной процедуры и создания лота.
//	Ошибки - Массив(Строка) - для записи ошибок. Если значение
//		Неопределено, то создает новый массив.
//
// Возвращает:
//	СправочникСсылка.ЗакупочныеПроцедуры - найденная или созданная
//		закупка.
//
Функция ПолучитьПоСтрокеПлана(СтрокаПланаЗакупки, Ошибки) Экспорт
	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Массив;
	КонецЕсли;
	ЗакупкаСсылка = Справочники.ЗакупочныеПроцедуры.ПустаяСсылка();
	Лот = Справочники.Лоты.ПолучитьПоСтрокеПланаЗакупок(СтрокаПланаЗакупки);
	Если ЗначениеЗаполнено(Лот) Тогда
		Возврат Лот.Владелец;
	КонецЕсли;
	// Выполняем проверку не в процедуре заполнения закупки
	// благодаря двухступенчатому процессу создания:
	// Закупка -> Лот(Владелец=Закупка) -> Закупка.
	флМожноСоздать = ПроверитьВозможностьСоздатьПоСтрокеПланаЗакупок(
			СтрокаПланаЗакупки, Ошибки);
	Если флМожноСоздать Тогда
		ЗакупкаСсылка = СоздатьЗакупкуПоСтрокеПланаЗакупки(
			СтрокаПланаЗакупки, 
			Ошибки);
	КонецЕсли;
	Возврат ЗакупкаСсылка;
КонецФункции

// Установить ключевые даты в значениях для заполнения закупки.
Процедура УстановитьДатыПоБазовойДляЗаполненияЛота(
										ЗначенияДляЗаполненияЛота,
										МинДата,
										МаксДатаОкончания) Экспорт
	ЗначенияДляЗаполненияЛота.ДатаНачалаПодготовкиЗакупки =
		ДобавитьМесяц(МинДата,-2);
	ЗначенияДляЗаполненияЛота.ДатаОфициальногоОбъявленияЗакупки =
		ДобавитьМесяц(МинДата,-1);
	ЗначенияДляЗаполненияЛота.ДатаИсполненияДоговора =
		ДобавитьМесяц(МаксДатаОкончания,1);
КонецПроцедуры

// Возвращает массив лотов закупочной процедуры.
//
Функция ПолучитьЛотыЗакупочнойПроцедуры(
							ЗакупочнаяПроцедура, 
							ТолькоАктуальные=Ложь) Экспорт
	Отбор = Новый Структура;
	Отбор.Вставить("Владелец", ЗакупочнаяПроцедура.Ссылка);
	Если ТолькоАктуальные Тогда
		Отбор.Вставить("ПометкаУдаления", Ложь);
	КонецЕсли;
	Возврат ЦентрализованныеЗакупкиУХ.ПолучитьСправочникПоОтбору(
				"Лоты", Отбор);
КонецФункции

// Возвращает итоговую сумму по всем лотам пересчитанную
//  в валюту на указанную дату.
//
// Параметры:
//  ЗакупочнаяПроцедура - СправочникСсылка.ЗакупочныеПроцедуры -
//		закупка для получения суммы лотов.
//  Валюта - СправочникСсылка.Валюты - валюта в которую нужно 
//		пересчитать суммы лотов.
//  Дата - Дата - дата для получения курсов валют.
// 
// Возвращаемое значение:
//   Число(15,2) - итоговая сумма по всем переданным лотам.
//
Функция РасчитатьСуммуПоЛотам(ЗакупочнаяПроцедура, Валюта, Дата) Экспорт
	Сумма = 0;
	мЛоты = ПолучитьЛотыЗакупочнойПроцедуры(ЗакупочнаяПроцедура, Истина);
	Для Каждого Лот Из мЛоты Цикл
		СуммаЛота = Лот.СуммаЛота;
		ВалютаЛота = Лот.ВалютаДокумента;
		Если ЗначениеЗаполнено(ВалютаЛота)
				И ВалютаЛота <> Валюта Тогда
			СуммаЛота = РаботаСКурсамиВалют.ПересчитатьВВалюту(
				СуммаЛота, ВалютаЛота, Валюта, Дата);
		КонецЕсли;
		Сумма = Сумма + СуммаЛота;
	КонецЦикла;
	Возврат Сумма;
КонецФункции

// Определяет, что закупочная процедура должна проводиться
// в соотвествтии с ФЗ-223.
//
Функция ЭтоФЗ223(ЗакупкаОбъект) Экспорт
	ОрганизацииДляЗаключенияДоговора =
		ОрганизацииДляЗаключенияДоговора(ЗакупкаОбъект);
	Для Каждого Организация Из ОрганизацииДляЗаключенияДоговора Цикл
		Если ЦентрализованныеЗакупкиВызовСервераУХ.ОрганизацияЗакупаетПоФЗ223(
															Организация) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ДатаПроверкиКвалификационногоОтбора(ЗакупочнаяПроцедура) Экспорт
	ДатаПроверки = 
		АккредитацияПоставщиковУХ.ПолучитьДатуПоискаАккредитованныхПоставщиков(
			ЗакупочнаяПроцедура);
	Возврат ?(ЗначениеЗаполнено(ДатаПроверки),
					ДатаПроверки,
					ТекущаяДата());
КонецФункции

Функция ПроверитьТребуетсяКвалификационныйОтборПоЛоту(Лот, ДатаПроверки) Экспорт
	мНоменклатуры = Лот.Номенклатура.ВыгрузитьКолонку("Номенклатура");
	Если мНоменклатуры.Количество() > 0 Тогда
		Возврат
			АккредитацияПоставщиковУХ.НоменклатураТребуетАккредитацииПоставщиков(
				ДатаПроверки,
				Лот.ОрганизацияДляЗаключенияДоговора,
				мНоменклатуры);
	КонецЕсли;
	Возврат Ложь;
КонецФункции

// Возвращает дату окончания квалификационного отбора для закупочной процедуры.
//
// Параметры:
//  Закупка - СправочникСсылка.ЗакупочныеяПроцедуры - ссылка на закупку.
// 
// Возвращаемое значение:
//	- Дата+Время - дата окончания квалификационного отбора.
//	- Неопределено - дата не установлена. 
//
Функция ПолучитьДатуОкончанияКвалификационногоОтбора(Закупка) Экспорт
	Даты = ПолучитьДатыПоМассивуСтадий(Закупка, 
		ЦентрализованныеЗакупкиУХ.ПолучитьМассивСтадийКвалификационныйОтбор());
	Если Даты = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Даты.ДатаОкончания;
КонецФункции

// Для переданного объекта заполняет реквизиты если использован
// способ выбора единственного поставщика.
//
Процедура УстановитьРеквизитыДляЕдинственногоПоставщика(Объект) Экспорт
	СпособУЕдинственногоПоставщика = Перечисления.СпособыВыбораПоставщика.ЗакупкаУЕдинственногоПоставщика;
	ЭтоЗакупкаУЕдинственногоПоставщика = (Объект.СпособВыбораПоставщика = СпособУЕдинственногоПоставщика);
	Если ЭтоЗакупкаУЕдинственногоПоставщика Тогда
		Объект.КоличествоМестСОбязанностьюЗаключитьДоговор = 1;
		Объект.МинимальноеКоличествоЗаявок = 1;
	Иначе
		Объект.КоличествоМестСОбязанностьюЗаключитьДоговор = 1;
		Объект.МинимальноеКоличествоЗаявок = 2;
	КонецЕсли;
КонецПроцедуры

// Проверяет, что закупка закрытая.
//
Функция ЭтоЗакрытаяЗакупка(ЗакупочнаяПроцедура) Экспорт
	Возврат ЗакупочнаяПроцедура <> Неопределено
		И ЗакупочнаяПроцедура.ЗакрытаяЗакупка
		И НЕ ЗакупочнаяПроцедура.ТребуетсяКвалификационныйОтбор;
КонецФункции

// Проверяет, что для закупки заполнены участники.
//
Функция ЗаполненыУчастникиЗакрытойЗакупки(ЗакупочнаяПроцедура) Экспорт
	Если ЗакупочнаяПроцедура.УчастникиЗакупки.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Для Каждого СтрокаУчастника Из ЗакупочнаяПроцедура.УчастникиЗакупки Цикл
		Если СтрокаУчастника.ПодтвердилУчастие Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции


// Возвращает массив организаций для заключения договора, которые указаны
// в лотах закупочной процедуры (если совместная закупка). Или массив
// с одной организацией из закупки (если это не совместная закупка).
//
Функция ОрганизацииДляЗаключенияДоговора(ЗакупочнаяПроцедура) Экспорт
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
				ЗакупочнаяПроцедура, "ОрганизацияДляЗаключенияДоговора") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	Если ЗакупочнаяПроцедура.СовместнаяЗакупка Тогда
		Возврат ОрганизацииДляЗаключенияДоговораИзЛотовЗакупки(
			ЗакупочнаяПроцедура);
	КонецЕсли;
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ЗакупочнаяПроцедура.ОрганизацияДляЗаключенияДоговора);
КонецФункции

// Возвращает метод оценки предложений поставщиков из лотов закупки.
//
// Параметры:
//  ЗакупочнаяПроцедура - СправочникСсылка.ЗакупочныеПроцедуры -
//		закупка для получения метода оценки прелжоений по лотам.
// 
// Возвращаемое значение:
//   - ПеречислениеСсылка.МетодыОценкиПредложенийПоставщиков -
//		если лотов еще нет, то возвращает метод оценки "ПоКритериям".
//
Функция ПолучитьМетодОценкиПредложенийПоставщиков(ЗакупочнаяПроцедура) Экспорт
	мЛоты = ПолучитьЛотыЗакупочнойПроцедуры(ЗакупочнаяПроцедура, Истина);
	Для Каждого Лот Из мЛоты Цикл
		Если ЗначениеЗаполнено(Лот.МетодОценкиПредложенийПоставщиков) Тогда
			Возврат Лот.МетодОценкиПредложенийПоставщиков;
		КонецЕсли;
	КонецЦикла;
	Возврат Перечисления.МетодыОценкиПредложенийПоставщиков.ПоКритериям;
КонецФункции

// Устанавливает для закупочной процедуры ЗакупочнаяПроцедураВход
// реквизит Завершена в значение ЗначениеФлагаВход.
Процедура УстановитьФлагЗавершена(ЗакупочнаяПроцедураВход, ЗначениеФлагаВход = Истина, ОснованиеЗавершенияВход = Неопределено) Экспорт
	Попытка
		ЗакупкаОбъект = ЗакупочнаяПроцедураВход.ПолучитьОбъект();
		ЗакупкаОбъект.Завершена = ЗначениеФлагаВход;
		Если ОснованиеЗавершенияВход <> Неопределено Тогда
			ЗакупкаОбъект.ОснованиеЗавершения = ОснованиеЗавершенияВход;
		Иначе
			// Не добавляем основание завершения, т.к. оно не указано.
		КонецЕсли;
		ЗакупкаОбъект.Записать();
	Исключение
		ТекстСообщения = НСтр("ru = 'При установке флага Заверешена для закупки ""%Закупка%"" произошли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Закупка%", Строка(ЗакупочнаяПроцедураВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры		// УстановитьФлагЗавершена()

#КонецОбласти


#Область ВнутреннийПрограмныйИнтерфейс


// Проверяет, что строка плана закупок подходит для создания
// закупочной процедуры.
//
// Параметры:
//  СтрокаПланаЗакупок - ДокументСсылка.СтрокаПланаЗакупок - строка
// 		плана закупок, на основании которой, будет создан лот.
//	ПричиныОтказа - Массив(Строка) - массив с описанием сообщений
//		пользователю почему нельзя создать.
// Возвращаемое значение:
//	Булево - Истина - можно создавать. Ложь - нельзя создавать,
//		в переменной Ошибки содержится описание причин.
//
Функция ПроверитьВозможностьСоздатьПоСтрокеПланаЗакупок(
										СтрокаПланаЗакупок,
										ПричиныОтказа)
	Если ПричиныОтказа = Неопределено Тогда
		ПричиныОтказа = Новый Массив;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаПланаЗакупок) Тогда
		Справочники.Лоты.СтрокаПланаПригоднаДляСозданияЛота(
			СтрокаПланаЗакупок, ПричиныОтказа);
	Иначе
		ПричиныОтказа.Добавить(НСтр(
			"ru='На основании пустого списка строк плана закупки"
				+ " невозможно создать закупочную процедуру!'"));
	КонецЕсли;
	Возврат ПричиныОтказа.Количество() = 0;
КонецФункции

// Заполняет текущий объект, создает лот и связывает их вместе.
//
// Параметры:
//  СтрокаПланаЗакупок - ДокументСсылка.СтрокаПланаЗакупок - строка
// 		плана закупок, на основании которой, будет создан лот.
//	Ошибки - Массив|Неопределено - массив ошибок, если не удалось
//		создать закупочную процедуру. Если передано Неопределено,
//		то создает массив для переменной.
//
// Возвращает:
//	СправочникСсылка.ЗакупочныеПроцедуры
//
Функция СоздатьЗакупкуПоСтрокеПланаЗакупки(СтрокаПланаЗакупок, Ошибки)
	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Массив;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаПланаЗакупок) Тогда
		НачатьТранзакцию();
		Попытка
			ЗакупкаОбъект = Справочники.ЗакупочныеПроцедуры.СоздатьЭлемент();
			ЗакупкаОбъект.Заполнить(СтрокаПланаЗакупок);
			ЗакупкаОбъект.СовместнаяЗакупка = Ложь;
			ЗакупкаОбъект.Записать();
			ЗакупкаСсылка = ЗакупкаОбъект.Ссылка;

			Справочники.Лоты.СоздатьПоСтрокеПланаЗакупок(
				ЗакупкаСсылка, СтрокаПланаЗакупок);
			// Заполняем квалификацию закупки по лотам.	
			ЗакупкаОбъект.ЗаполнитьТребованияПоставщиковДокументов();
			ЗакупкаОбъект.Записать();
			ЗафиксироватьТранзакцию();	
			Возврат ЗакупкаСсылка;
		Исключение
			Инфо = ИнформацияОбОшибке();
			Ошибки.Добавить(НСтр("ru='Ошибка создания закупочной процедуры'")
				+ ПодробноеПредставлениеОшибки(Инфо));
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЕсли;
	Возврат Справочники.ЗакупочныеПроцедуры.ПустаяСсылка();
КонецФункции

// Проверяет, что две строки плана закупок имеют:
//	- одинаковый ПериодЗакупок;
//	- ДатаНачалаПодготовкиЗакупки в одном месяце;
//	- одинаковый флаг ЗакрытаяЗакупка;
//	- один ОрганизаторЗакупки;
//	- одинаковый СпособВыбораПоставщика
//	- одинаковые ВалютаДокумента.
//
// Параметры:
//  СтрокаПланаЗакупок1 - ДокументСсылка.СтрокаПланаЗакупок
//		- строка для проверки.
//  СтрокаПланаЗакупок2 - ДокументСсылка.СтрокаПланаЗакупок
//		- строка для проверки.
//	ПричиныОтказа - Массив(Строка) - описание какие поля
//		отличаются в виде пригодном для отображения
//		пользователю.
//
Процедура СравнитьКлючевыеРеквизитыСтрокПланаЗакупок(
										СтрокаПланаЗакупок1,
										СтрокаПланаЗакупок2,
										ПричиныОтказа)
	Если СтрокаПланаЗакупок1.ПериодЗакупок 
			<> СтрокаПланаЗакупок2.ПериодЗакупок Тогда
		ПричиныОтказа.Добавить(
			"Строки плана имеют разные периоды закупки.");
	КонецЕсли;
	
	Если НачалоМесяца(СтрокаПланаЗакупок1.ДатаНачалаПодготовкиЗакупки)
			<> НачалоМесяца(СтрокаПланаЗакупок2.ДатаНачалаПодготовкиЗакупки) Тогда
		ПричиныОтказа.Добавить("Начало подготовки закупок лежат в разных месяцах.");
	КонецЕсли;
	Если СтрокаПланаЗакупок1.ЗакрытаяЗакупка 
			<> СтрокаПланаЗакупок2.ЗакрытаяЗакупка Тогда
		ПричиныОтказа.Добавить(
			"Строки плана имеют разные статусы закрытости.");
	КонецЕсли;
	Если СтрокаПланаЗакупок1.ОрганизаторЗакупки 
			<> СтрокаПланаЗакупок2.ОрганизаторЗакупки Тогда
		ПричиныОтказа.Добавить(
			"Строки плана имеют разных организаторов закупки.");
	КонецЕсли;
	Если СтрокаПланаЗакупок1.СпособВыбораПоставщика 
			<> СтрокаПланаЗакупок2.СпособВыбораПоставщика Тогда
		ПричиныОтказа.Добавить(
			"Строки плана имеют разные способы выбора поставщиков.");
	КонецЕсли;
	Если СтрокаПланаЗакупок1.ВалютаДокумента 
			<> СтрокаПланаЗакупок2.ВалютаДокумента Тогда
		ПричиныОтказа.Добавить(
			"Строки плана имеют разные валюты.");
	КонецЕсли;
КонецПроцедуры

// Возвращает дату начала и окончания для закупочной процедуры по
// массиву стадий. Возвращается первая попавшаяся стадия.
// Данный механизм нужен для того, чтобы нивелировать способ
// выбора поставщика в стадиях, и отбирать только по типу стадии.
//
// Параметры:
//  Закупка - СправочникСсылка.ЗакупочныеяПроцедуры - ссылка на закупку.
//	Стадии - Массив(СправочникСсылка.СтадииМероприятий) - массив стадий.
// 
// Возвращаемое значение:
//	- Структура:
//		- ДатаНачала - Дата+Время - дата начала стадии.
//		- ДатаНачала - Дата+Время - дата окончания квалификационного отбора.
//	- Неопределено - стадия не найдена.
//
Функция ПолучитьДатыПоМассивуСтадий(Закупка, Стадии)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегистрПрогрессСтадийМероприятий.ДатаНачала КАК ДатаНачала,
		|	РегистрПрогрессСтадийМероприятий.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	Документ.Мероприятие КАК ДокументМероприятие
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрогрессСтадийМероприятий КАК РегистрПрогрессСтадийМероприятий
		|		ПО ДокументМероприятие.Ссылка = РегистрПрогрессСтадийМероприятий.Регистратор
		|			И ((ВЫРАЗИТЬ(ДокументМероприятие.Контекст КАК Справочник.ЗакупочныеПроцедуры)) = &Закупка)
		|			И (РегистрПрогрессСтадийМероприятий.Стадия В (&Стадия))";
	Запрос.УстановитьПараметр("Закупка", Закупка);
	Запрос.УстановитьПараметр("Стадия", 
		ЦентрализованныеЗакупкиУХ.ПолучитьМассивСтадийКвалификационныйОтбор());
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат = Новый Структура("ДатаНачала, ДатаОкончания");
		ЗаполнитьЗначенияСвойств(Результат, ВыборкаДетальныеЗаписи);
		Возврат Результат;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

// Возвращает массив организаций для заключения договора для лотов закупки.
// Значения уникальны.
//
Функция ОрганизацииДляЗаключенияДоговораИзЛотовЗакупки(ЗакупочнаяПроцедура)
	Если НЕ ЗначениеЗаполнено(ЗакупочнаяПроцедура.Ссылка) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Лоты.ОрганизацияДляЗаключенияДоговора КАК ОрганизацияДляЗаключенияДоговора
		|ИЗ
		|	Справочник.Лоты КАК Лоты
		|ГДЕ
		|	Лоты.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", ЗакупочнаяПроцедура.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой)
		.ВыгрузитьКолонку(0);
КонецФункции
	
Функция УказанКонтрагентУчастникаЗакупки(ЗакупочнаяПроцедура) Экспорт
	Структура = Новый Структура();
	Ответ = Ложь;
	Анкеты = "";
	Знак="";
	Для Каждого СтрокаУчастника Из ЗакупочнаяПроцедура.УчастникиЗакупки Цикл
		Если ТипЗнч(СтрокаУчастника.Участник)=ТИП("СправочникСсылка.АнкетыПоставщиков") И СтрокаУчастника.Участник.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка") Тогда
			Ответ = Истина;
			Анкеты = Анкеты + Знак +СокрЛП(СтрокаУчастника.Участник);
			Знак = ",";
		КонецЕсли;
	КонецЦикла;
	Структура.Вставить("Ответ",Ответ);
	Структура.Вставить("Анкеты",Анкеты);
	Возврат Структура;
КонецФункции
#КонецОбласти

#КонецЕсли