
#Область ОбработкаОсновныхСобытийФормы


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЭтоВнешнийПользователь = ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя();
	Если ЭтоВнешнийПользователь Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
			"ru = 'Запрещено открывать закупку внешнему поставщику. Воспользуйтесь реквизитами разделов ""Лоты"" и ""Выигранные лоты""'");
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ЦентрализованныеЗакупкиВызовСервераУХ.ВыделитьЭлементыФормы(
		ЭтаФорма, 
		Справочники.Лоты.ПолучитьРеквизитыШаблонаЛотаВСтруктуре(),
		Новый Структура("ЦветФона", WebЦвета.Роса));
	#Область УниверсальныеПроцессыСогласование
	ДействияСогласованиеУХСервер.НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта(ЭтаФорма);
	#КонецОбласти
	флРазделятьНоменклатуруПоКатегорийнымМенеджерам = Константы.РазделятьНоменклатуруПоКатегорийнымМенеджерам.Получить();
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	ЗаполнитьРеквизитыФормыНаСервере();
	УстановитьОтборЛотовПоЗакупочнойПроцедуре();
	РасчитатьСуммуДокументаНаСервере();
	ЗаполнитьСписокЭТП(Элементы.ЭТППубликации);
	УстановитьОформлениеФормыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ОшибкиПользователю = ПроверкаЗаполненияПередЗаписьюНаКлиенте();
	Если ОшибкиПользователю <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(
			ОшибкиПользователю, Отказ);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьОтборЛотовПоЗакупочнойПроцедуре();
	ЗаполнитьРеквизитыФормыНаСервере();
	УстановитьОформлениеФормыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗаписанЛот" Тогда
		Если Параметр = Объект.Ссылка Тогда
			ОбновитьПоЛотуНаСервере(Параметр);
		КонецЕсли;
	#Область УниверсальныеПроцессыСогласование		
	ИначеЕсли ИмяСобытия = "ОбъектСогласован"
				ИЛИ ИмяСобытия = "ОбъектОтклонен"
				ИЛИ ИмяСобытия = "МаршрутИнициализирован"
				ИЛИ ИмяСобытия = "СостояниеЗаявкиПриИзменении" Тогда
		ОпределитьСостояниеОбъекта();
	#КонецОбласти	
	ИначеЕсли ИмяСобытия = "ОбновитьСвязанныеМероприятия" Тогда
		УстановитьСвязанноеМероприятие(Объект.Ссылка);
	ИначеЕсли ИмяСобытия = "ЗаписанЛот" Тогда
		Если Параметр = Объект.Ссылка Тогда
			ОбновитьПоЛотуНаСервере(Параметр);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ОбработкаВыбораЗаполнениеИзШаблона(ВыбранноеЗначение, ИсточникВыбора);
КонецПроцедуры


#КонецОбласти


#Область ОбработкаСобытийЭлементовФормы


&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	РасчитатьСуммуДокументаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяКвалификационныйОтборПриИзменении(Элемент)
	ТребуетсяКвалификационныйОтборПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияДляЗаключенияДоговораПриИзменении(Элемент)
	ОрганизацияДляЗаключенияДоговораПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизаторЗакупкиПриИзменении(Элемент)
	ОрганизаторЗакупкиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СпособВыбораПоставщикаПриИзменении(Элемент)
	СпособВыбораПоставщикаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытаяЗакупкаПриИзменении(Элемент)
	УстановитьОформлениеФормыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СовместнаяЗакупкаПриИзменении(Элемент)
	СовместнаяЗакупкаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СпособПубликацииПриИзменении(Элемент)
	УстановитьВидимостьПубликацииЭТП(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеДоговораПриИзменении(Элемент)
	УстановитьОформлениеЭлементовОбеспечения();
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеЗаявкиПриИзменении(Элемент)
	УстановитьОформлениеЭлементовОбеспечения();
КонецПроцедуры

&НаКлиенте
Процедура ПреференцииДляКонтрагентовПриИзменении(Элемент)
	УстановитьОформлениеЭлементовОбеспечения();
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеВозвратаАвансаПриИзменении(Элемент)
	УстановитьОформлениеЭлементовОбеспечения();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСостояниеКвалификацииПоставщиков(Команда)
	Отбор_ = Новый Структура("ЗакупочнаяПроцедура", Объект.Ссылка);
	ПараметрыОтчета = Новый Структура("Отбор, СформироватьПриОткрытии", Отбор_, Истина);
	ОткрытьФорму("Отчет.СостояниеКвалификации.ФормаОбъекта", ПараметрыОтчета);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТребованияКПоставщикам(Команда)
	ВыполнитьКомандуЗаполнитьТребованияКПоставщикамНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТребованияКПоставщикамПередУдалением(Элемент, Отказ)
	ТекДанные = Элементы.ТребованияКПоставщикам.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		возврат;
	КонецЕсли;
	Если Объект.ТребуетсяКвалификационныйОтбор И ТекДанные.ИзШаблона Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Нельзя удалить требование установленное учетной политикой организации'");
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТребованияКПоставщикамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Копирование;
КонецПроцедуры

&НаКлиенте
Процедура ТребованияКПоставщикамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение.Количество() > 0 Тогда
		Для каждого ТребованиеКПоставщику Из ВыбранноеЗначение Цикл
			мСтрокТребований = Объект.ТребованияКПоставщикам.НайтиСтроки(
				Новый Структура("ТребованиеКПоставщику", ТребованиеКПоставщику));
			Если мСтрокТребований.Количество() = 0 Тогда
				СтрокаТребования = Объект.ТребованияКПоставщикам.Добавить();
				СтрокаТребования.ТребованиеКПоставщику = ТребованиеКПоставщику;
			Иначе
				СтрокаТребования = мСтрокТребований[0];
			КонецЕсли;
			ЗаполнитьСтрокуТребованияКПоставщикам(СтрокаТребования);
		КонецЦикла;   
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТребованияКПоставщикамТребованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	мСтрок = Объект.ТребованияКПоставщикам.НайтиСтроки(Новый Структура("ТребованиеКПоставщику", ВыбранноеЗначение));
	Если мСтрок.Количество() > 0 Тогда
		ИдСтроки = Элементы.ТребованияКПоставщикам.ТекущаяСтрока;
		ТекущаяСтрокаТЧ = Объект.ТребованияКПоставщикам.НайтиПоИдентификатору(ИдСтроки);
		Если ТекущаяСтрокаТЧ <> мСтрок[0] Тогда
			СтандартнаяОбработка = Ложь;
			ВыбранноеЗначение = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборТребованийКПоставщикам(Команда)
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор, КритерииЗаполнены", Ложь, Истина, Истина);
    ОткрытьФорму("Справочник.ТребованияКПоставщикам.ФормаВыбора", ПараметрыПодбора, Элементы.ТребованияКПоставщикам);
КонецПроцедуры

&НаКлиенте
Процедура ТребованияКПоставщикамТребованиеПриИзменении(Элемент)
	ТекДанные = Элементы.ТребованияКПоставщикам.ТекущиеДанные;
	ЗаполнитьСтрокуТребованияКПоставщикам(ТекДанные);
	ДобавитьТребованиеКДокументам(Объект.ТребованияКСоставуДокументов, ТекДанные.ТребованиеКДокументу);
КонецПроцедуры

&НаКлиенте
Процедура УсловиеОплатыПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.УсловияОплаты) Тогда
		Оповещение = Новый ОписаниеОповещения(
				"ОбработатьПодтверждениеЗаполненияУсловий", ЭтаФорма);
		ПоказатьВопрос(Оповещение,
			НСтр("ru = 'Заполнить поле ""Условия оплаты текстовое описание"" по данным условия оплаты?'"),
			РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		ОбработатьПодтверждениеЗаполненияУсловий(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещенияАккредитованныхПоставщиковОТоргахВыбор(Элемент, ВыбраннаяСтрока,
															Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(,ВыбраннаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура КвалификацииУчастниковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(,ВыбраннаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура КомандаРедактироватьУИД(Команда)
	ЦентрализованныеЗакупкиКлиентУХ.РедактироватьУИДОбъекта(Объект, НСтр("ru = 'Введите УИД объекта'"));
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтандартныйУИД(Команда)
	ЦентрализованныеЗакупкиКлиентУХ.УстановитьСтандартныйУИД(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ТоргиНеПоЦенеПриИзменении(Элемент)
	УстановитьВидимостьУсловийАукциона();
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьЛот(Команда)
	ДобавитьЛот();
КонецПроцедуры

&НаКлиенте
Процедура СвязанноеМероприятиеНажатие(Элемент, СтандартнаяОбработка)
	Если ТипЗнч(СвязанноеМероприятие) = Тип("Строка") Тогда
		// Мероприятие представлено строкой. Создадим новое.
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
			ОткрытьФорму("Документ.Мероприятие.ФормаОбъекта", ПараметрыФормы);	
		Иначе
			ТекстСообщения = НСтр("ru = 'Требуется записать объект для ввода мероприятия. Операция отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;	
	ИначеЕсли ТипЗнч(СвязанноеМероприятие) = Тип("ДокументСсылка.Мероприятие") Тогда
		// Мероприятие заполнено. Откроем его.
		СтандартнаяОбработка = Истина;
	Иначе
		// Неизвестный вариант.
		СтандартнаяОбработка = Ложь;
		ТекстСообщения = НСтр("ru = 'Неизвестный вариант связанного мероприятия %Меропритяие%. Операция отменена'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Меропритяие%", Строка(СвязанноеМероприятие));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НеУчитыватьПриРасчетеДолиЗакупокУСМППриИзменении(Элемент)
	УстановитьВидимостьКатегорииЗакупкиДляИсключенияИзГОЗНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПредметДоговораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	НовыйПредмет = "";
	НовыйПредмет = ПолучитьПредметДоговораПоЛотам(Объект.Ссылка);
	Если СокрЛП(НовыйПредмет) = "" Тогда
		НовыйПредмет = НСтр("ru = '%СпособВыбора% в %Организация% (%Период%)'");
		НовыйПредмет = СтрЗаменить(НовыйПредмет, "%СпособВыбора%", Строка(Объект.СпособВыбораПоставщика)); 
		НовыйПредмет = СтрЗаменить(НовыйПредмет, "%Организация%", Строка(Объект.ОрганизацияДляЗаключенияДоговора)); 
		НовыйПредмет = СтрЗаменить(НовыйПредмет, "%Период%", Строка(Объект.ПериодЗакупок)); 
	Иначе
		// Предмет договора уже заполнен.
	КонецЕсли;
	Объект.ПредметДоговора = НовыйПредмет;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуПлана(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПериодЗакупок", Объект.ПериодЗакупок);
		ПараметрыФормы.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		ПараметрыФормы.Вставить("ОрганизаторЗакупки", Объект.ОрганизаторЗакупки);
		ПараметрыФормы.Вставить("Отбор", ПолучитьСтруктуруОтбораЛотов());
		Если НЕ Объект.СовместнаяЗакупка Тогда
			ПараметрыФормы.Вставить("ОрганизацияДляЗаключенияДоговора", Объект.ОрганизацияДляЗаключенияДоговора);
		Иначе
			ПараметрыФормы.Вставить("ОрганизацииДляЗаключенияДоговора", ПолучитьУчастниковСовместнойЗакупки());
		КонецЕсли;
		ОповещениеОВыборе = Новый ОписаниеОповещения("ОбработатьВыборСтрокиПланаЗакупок", ЭтаФорма);
		ОткрытьФорму("Документ.СтрокаПланаЗакупок.Форма.ФормаВыбораСвободных",
		ПараметрыФормы,	ЭтаФорма, ,	, ,	ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ТекстСообщения = НСтр("ru = 'Требуется записать закупочную процедуру перед добавлением лота'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭкстреннаяЗакупкаПриИзменении(Элемент)
	УстановитьОформлениеФормыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереторжкаПриИзменении(Элемент)
	УстановитьОформлениеФормыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТоварнаяКатегорияПриИзменении(Элемент)
	УстановитьОтборЛотовПоЗакупочнойПроцедуре();
	ЗаполнитьРеквизитыФормыНаСервере();
	УстановитьОформлениеФормыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПриглашениеПоставщиков(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
		Оповещение = ПолучитьСуществующееОповещениеПоставщиков();
		Если ЗначениеЗаполнено(Оповещение) Тогда
			ПоказатьЗначение(,Оповещение);
		Иначе
			ОткрытьФорму("Документ.ОповещениеАккредитованныхПоставщиковОТоргах.Форма.ФормаДокумента", ПараметрыФормы);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Требуется записать Закупочную процедуру перед вводом документа Приглашение поставщиков. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеЗаполнениеЗакрытойЗакупки_Завершение(Результат, ДополнительныеПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.Да Тогда
        ЗаполнитьЗакрытыеЗакупкиАнкетамиПриглашенныхПоставщиков();
	Иначе
		// Пользователь отказался.
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗакрытуюЗакупкуПоКвалификации(Команда)
	ЗаполнитьЗакрытыеЗакупкиАнкетамиПриглашенныхПоставщиков();
КонецПроцедуры

&НаКлиенте
Процедура ВЭлектроннойФормеПриИзменении(Элемент)
	УстановитьВидимостьПубликацииЭТП(ЭтаФорма);
	Если Объект.ВЭлектроннойФорме Тогда
		Объект.СпособПубликации = ПредопределенноеЗначение("Перечисление.СпособПубликацииЗакупки.НаЭТП");
	Иначе
		Объект.СпособПубликации = ПредопределенноеЗначение("Перечисление.СпособПубликацииЗакупки.Неэлектронно");
	КонецЕсли;
	Если Объект.ВЭлектроннойФорме И НЕ ЗначениеЗаполнено(Объект.СпособСозданияДоговора) Тогда
		Объект.СпособСозданияДоговора = ПредопределенноеЗначение("Перечисление.СпособСозданияДоговора.ВыборПоставщикаВСистеме1С");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоУчастникамЗакрытойЗакупки(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Получение массива участников.
		МассивУчастников = Новый Массив;
		Для Каждого ТекУчастникиЗакрытойЗакупки Из Объект.УчастникиЗакупки Цикл
			Если ТекУчастникиЗакрытойЗакупки.ПодтвердилУчастие Тогда
				МассивУчастников.Добавить(ТекУчастникиЗакрытойЗакупки.Участник);
			Иначе
				// Участник не подтвердил свои намерения. Пропускаем.
			КонецЕсли;
		КонецЦикла;	
		МассивУчастников = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивУчастников);
		МассивУчастников = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивУчастников);
		// Открытие формы документа.
		ПараметрыФормы = Новый Структура;
		СтруктураОснование = Новый Структура;
		СтруктураОснование.Вставить("Закупка", Объект.Ссылка);
		СтруктураОснование.Вставить("Участники", МассивУчастников);
		ПараметрыФормы.Вставить("Основание", СтруктураОснование);
		ОткрытьФорму("Документ.ОповещениеАккредитованныхПоставщиковОТоргах.Форма.ФормаДокумента", ПараметрыФормы);
	Иначе
		ТекстСообщения = НСтр("ru = 'Требуется записать Закупочную процедуру перед вводом документа Приглашение поставщиков. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборТоварнойКатегории_Завершение(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
	Если ЗначениеВыбора <> Неопределено Тогда
		Объект.ТоварнаяКатегория = ЗначениеВыбора.Значение;
		Модифицированность = Истина;
	Иначе
		// Ничего не выбрано.
	КонецЕсли;	
КонецПроцедуры		// ВыборТоварнойКатегории_Завершение()

&НаКлиенте
Процедура ТоварнаяКатегорияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекПользователь = ПользователиКлиент.ТекущийПользователь();
	МассивКатегорий = ПолучитьМассивКатегорий(ТекПользователь, Объект.ОрганизацияДляЗаключенияДоговора);
	Если МассивКатегорий.Количество() > 0 Тогда
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.ЗагрузитьЗначения(МассивКатегорий);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТоварнойКатегории_Завершение", ЭтаФорма);
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения);
	Иначе
		ТекстСообщения = НСтр("ru = 'Нет доступных товарных категорий по оргазации ""%Организация%"" для текущего пользователя. Уточните матрицу категорийных менеджеров.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(Объект.ОрганизацияДляЗаключенияДоговора));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварнаяКатегорияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыНаКлиенте


&НаКлиенте
Процедура ЗаполнитьСтрокуТребованияКПоставщикам(СтрокаТребования)
	Если СтрокаТребования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыТребования = ПолучитьРеквизитыТребованияКПоставщикам(СтрокаТребования.ТребованиеКПоставщику);
	ЗаполнитьЗначенияСвойств(СтрокаТребования, РеквизитыТребования);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьУсловияОплатыПоУсловиюОплаты()
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		Объект.УсловияОплаты = НадписьЭтапыОплатаДляСоглашений(Объект.Соглашение);
	Иначе
		Объект.УсловияОплаты = "";
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеФормыОплатыДляСоглашений(ФормаОплаты)
	
	Представление = "";
	
	Если Не ЗначениеЗаполнено(ФормаОплаты) Тогда
		Представление = НСтр("ru = 'Оплата: Любая';
							|en = 'Payment: Any'");
	ИначеЕсли ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта") Тогда
		Представление = НСтр("ru = 'Оплата платежной картой';
							|en = 'Payment by payment card'");
	ИначеЕсли ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Взаимозачет") Тогда
		Представление = НСтр("ru = 'Взаимозачет';
							|en = 'Offsetting'");
	Иначе
		Представление = НСтр("ru = '%ФормаОплаты% оплата';
							|en = '%ФормаОплаты% payment'");
		Представление = СтрЗаменить(Представление, "%ФормаОплаты%", ФормаОплаты);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервере
Функция НадписьЭтапыОплатаДляСоглашений(Соглашение) Экспорт
	
	
	ФормаОплаты            = Соглашение.ФормаОплаты;
	ЭтапыГрафикаОплаты     = Соглашение.ЭтапыГрафикаОплаты;
	КоличествоЭтаповОплаты = ЭтапыГрафикаОплаты.Количество();
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ПредставлениеФормыОплатыДляСоглашений(ФормаОплаты));
	
	ТекстЭтаповОплаты = "";
	Если КоличествоЭтаповОплаты = 0 Тогда
		
		МассивСтрок.Добавить(", ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'этапы не указаны';
																|en = 'steps are not set'"), , ));
		
	ИначеЕсли КоличествоЭтаповОплаты <= 2 Тогда
		
		МассивСтрок.Добавить(" ");
		Для Сч=1 По КоличествоЭтаповОплаты Цикл
			СтрокаОплаты = ЭтапыГрафикаОплаты[Сч-1];
			ТекстЭтаповОплаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2% %3 дн';
					|en = '%1 %2% (%3 days)'"),
				ПредставлениеВариантаОплаты(СтрокаОплаты.ВариантОплаты),
				СтрокаОплаты.ПроцентПлатежа, СтрокаОплаты.Сдвиг);
			МассивСтрок.Добавить(ТекстЭтаповОплаты);
			МассивСтрок.Добавить(", ");
		КонецЦикла;
		МассивСтрок.Удалить(МассивСтрок.Количество()-1);
		
	Иначе
		
		ТекстЭтапа = ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
			КоличествоЭтаповОплаты,
			НСтр("ru = 'этапы';
				|en = 'stages'"), НСтр("ru = 'этапа';
									|en = 'stage'"), НСтр("ru = 'этапов';
														|en = 'steps'"), НСтр("ru = 'м';
																				|en = 'm'"));
			
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(НСтр("ru = 'в';
									|en = 'in'") +" " + Формат(КоличествоЭтаповОплаты, "ЧН=0") +" " + ТекстЭтапа);
		
	КонецЕсли;
	
	ТекстНадписи = Новый ФорматированнаяСтрока(МассивСтрок);
	Возврат ТекстНадписи;
	
КонецФункции

&НаСервере
Функция ПредставлениеВариантаОплаты(ВариантОплаты)
	
	Представление = "";
	
	Если ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки")
		Или ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления") Тогда
		Представление = НСтр("ru = 'Предоплата';
							|en = 'Prepayment'");
	ИначеЕсли ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки")
		Или ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления") Тогда
		Представление = НСтр("ru = 'Кредит';
							|en = 'Credit'");
	ИначеЕсли ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения")
		Или ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.АвансДоПодтверждения") Тогда
		Представление = НСтр("ru = 'Аванс';
							|en = 'Advance'");
	ИначеЕсли ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитСдвиг")
		Или ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.КредитСдвиг") Тогда
		Представление = НСтр("ru = 'Кредит';
							|en = 'Credit'");
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПодтверждениеЗаполненияУсловий(РезультатВопроса, ДопПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ОбновитьУсловияОплатыПоУсловиюОплаты();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЛот() 
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Требуется записать закупочную процедуру перед добавлением лота'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТоварнаяКатегорияОбъекта = Объект.ТоварнаяКатегория;
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Владелец", Объект.Ссылка);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ДанныеЗаполнения);
	РежимБлокировать = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.Лоты.ФормаОбъекта", ПараметрыФормы,	ЭтаФорма, , , ,	, РежимБлокировать);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСтрокиПланаЗакупок(СтрокаПланаЗакупок,
											ДопПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаПланаЗакупок) Тогда
		Возврат;
	КонецЕсли;
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Владелец", Объект.Ссылка);
	ДанныеЗаполнения.Вставить("СтрокаПланаЗакупок", СтрокаПланаЗакупок);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ДанныеЗаполнения);
	ОткрытьФорму(
		"Справочник.Лоты.ФормаОбъекта",
		ПараметрыФормы,
		ЭтаФорма,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьУчастниковСовместнойЗакупки()
	Результат = Новый Массив;
	Для Каждого СтрокаУчастника Из Объект.УчастникиСовместнойЗакупки Цикл
		ОрганизацияУчастник = СтрокаУчастника.Участник;
		Если ЗначениеЗаполнено(ОрганизацияУчастник) Тогда
			Результат.Добавить(ОрганизацияУчастник);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруОтбораЛотов()
	Отбор = Новый Структура;
	Если флФЗ223 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Отбор, ПолучитьСтруктуруОтбораЕИС(), Истина);
	КонецЕсли;
	Если флРазделятьНоменклатуруПоКатегорийнымМенеджерам Тогда
		ТоварнаяКатегорияОбъекта = Объект.ТоварнаяКатегория;
		Если ЗначениеЗаполнено(ТоварнаяКатегорияОбъекта) Тогда
			Отбор.Вставить("ТоварнаяКатегория", ТоварнаяКатегорияОбъекта);
		Иначе
			// Не добавляем отбор по товарной категории.
		КонецЕсли;
	Иначе
		// Не используем товарные категории.
	КонецЕсли;
	Возврат Отбор;
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруОтбораЕИС()
	Отбор = Новый Структура("НеВключенВПланЗакупкиЧасть15Ст4ФЗ223"
		+ ",КатегорияЗакупкиДляИсключенияИзГОЗ"
		+ ",НеУчитыватьПриРасчетеДолиЗакупокУСМП"
		+ ",ПривлечениеМалогоИСреднегоПредпринимательстваКакПодрядчиков"
		+ ",ПриоритетУчастияМалогоИСреднегоПредпринимательства");
	ЗаполнитьЗначенияСвойств(Отбор, Объект);
	Возврат Отбор;
КонецФункции

&НаКлиенте
Функция ПроверкаЗаполненияПередЗаписьюНаКлиенте()
	ОшибкиПользователю = Неопределено;
	Если Объект.НеУчитыватьПриРасчетеДолиЗакупокУСМП
			И НЕ ЗначениеЗаполнено(Объект.КатегорияЗакупкиДляИсключенияИзГОЗ) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			ОшибкиПользователю,
			"Объект.КатегорияЗакупкиДляИсключенияИзГОЗ",
			НСтр("ru='Укажите категорию закупки для исключения из годового объема!'"),
			Неопределено);
	КонецЕсли;
	Возврат ОшибкиПользователю;
КонецФункции

// Выполняет заполнение закладки Участники закрытой закупки по данным из квалификации поставщиков.
&НаКлиенте
Процедура ЗаполнитьЗакрытыеЗакупкиАнкетамиПриглашенныхПоставщиков()
	// Получим анкеты по выбранным приглашениям.
	МассивАнкет = ПолучитьАнкетыПриглашенныхПоставщиков(Объект.Ссылка);
	// Заполним полученные анкеты в табличную часть.

	Для Каждого ТекМассивАнкет Из МассивАнкет Цикл
		Если Объект.УчастникиЗакупки.НайтиСтроки(Новый Структура("Участник",ТекМассивАнкет)).Количество()>0 Тогда
			Продолжить;
		КонецЕсли;	
		Если ДубльУчастникаЗакупки(ТекМассивАнкет) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Объект.УчастникиЗакупки.Добавить();
		НоваяСтрока.Участник			 = ТекМассивАнкет;
		НоваяСтрока.ПодтвердилУчастие	 = Ложь;
	КонецЦикла;	
КонецПроцедуры		// ЗаполнитьЗакрытыеЗакупкиАнкетамиПриглашенныхПоставщиков()

#КонецОбласти


#Область СлужебныеПроцедурыНаСервере


&НаСервере
Процедура ЗаполнитьРеквизитыФормыНаСервере()
	ОбновитьФлагФЗ223ПоОбъекту();
	МетодОценкиПредложенийПоставщиков =
		Справочники.ЗакупочныеПроцедуры.ПолучитьМетодОценкиПредложенийПоставщиков(Объект.Ссылка);
	ЭтоАукцион = Перечисления.СпособыВыбораПоставщика.ЭтоАукцион(Объект.СпособВыбораПоставщика);
	ЭтоЕдинственныйПоставщик = 
		(Объект.СпособВыбораПоставщика = Перечисления.СпособыВыбораПоставщика.ЗакупкаУЕдинственногоПоставщика);
	НомерПереторжки = РегистрыСведений.ПереторжкаЗакупок.ПолучитьАктуальныйНомерПереторжки(Объект.Ссылка);
	ЗаголовокИдетПереторжка = НСтр("ru = 'Идет переторжка %НомерПереторжки%'");
	ЗаголовокИдетПереторжка = СтрЗаменить(ЗаголовокИдетПереторжка, "%НомерПереторжки%", Строка(НомерПереторжки));
	Элементы.ДекорацияОтображениеПереторжки.Заголовок = ЗаголовокИдетПереторжка;
КонецПроцедуры

&НаСервере
Процедура ОбновитьФлагФЗ223ПоОбъекту()
	флФЗ223 = Справочники.ЗакупочныеПроцедуры.ЭтоФЗ223(Объект);
	Если флФЗ223 Тогда
		Объект.ЭкстреннаяЗакупка = Ложь;
	Иначе
		// Не изменяем план.
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СпособВыбораПоставщикаПриИзмененииНаСервере()
	СпособВыбораВОбъекте = Объект.СпособВыбораПоставщика;
	Справочники.ЗакупочныеПроцедуры.УстановитьРеквизитыДляЕдинственногоПоставщика(Объект);
	Если ЭтоСпособВЭлектроннойФорме(СпособВыбораВОбъекте) Тогда
		Объект.ВЭлектроннойФорме = Истина;
	Иначе
		// Не изменяем флаг в электронной форме.
	КонецЕсли;
	ЗаполнитьРеквизитыФормыНаСервере();
	УстановитьОформлениеФормыНаСервере();
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборЛотовПоЗакупочнойПроцедуре()
	ОтборыСписковКлиентСерверУХ.ИзменитьЭлементОтбораСписка(
		Лоты, "Владелец", Объект.Ссылка, Истина);
	ОтборыСписковКлиентСерверУХ.ИзменитьЭлементОтбораСписка(
		Лоты, "ТоварнаяКатегория", Объект.ТоварнаяКатегория, ЗначениеЗаполнено(Объект.ТоварнаяКатегория));		
КонецПроцедуры
	
// Выставляет связанное по закупочной процедуре ЗакупочнаяПроцедураВход мероприятие.
// Когда мероприятие не задано, устанавливается диагностическая строка.
&НаСервере
Процедура УстановитьСвязанноеМероприятие(ЗакупочнаяПроцедураВход)
	ВидМероприятияЗакупочнаяПроцедура = Перечисления.ВидыМероприятий.ЗакупочнаяПроцедура;
	МероприятиеСсылка = Документы.Мероприятие.ПолучитьПоследнееМероприятиеПоКонтексту(ЗакупочнаяПроцедураВход, ВидМероприятияЗакупочнаяПроцедура);	
	ЕстьМероприятие = ЗначениеЗаполнено(МероприятиеСсылка);
	Если ЕстьМероприятие Тогда
		СвязанноеМероприятие = МероприятиеСсылка;
		АктуальнаяСтадия = Документы.Мероприятие.ПолучитьАктуальнуюСтадиюМероприятия(МероприятиеСсылка);
	Иначе
		СвязанноеМероприятие = НСтр("ru = '< Ввести мероприятие >'");
		АктуальнаяСтадия = Справочники.СтадииМероприятий.ПустаяСсылка();
	КонецЕсли;	
	Элементы.АктуальнаяСтадия.Видимость = ((ЕстьМероприятие) И (НЕ Объект.Завершена));
КонецПроцедуры		// УстановитьСвязанноеМероприятие()

&НаСервере
Функция ДубльУчастникаЗакупки(ВыбранноеЗначение)
	Если ТИПЗНЧ(ВыбранноеЗначение)=ТИП("ТИП") Тогда
		Возврат Ложь;
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчастникиЗакупки",Объект.УчастникиЗакупки.Выгрузить());
	Запрос.УстановитьПараметр("Контрагент",?(ТИПЗНч(ВыбранноеЗначение)=Тип("СправочникСсылка.Контрагенты"),ВыбранноеЗначение,ВыбранноеЗначение.Контрагент));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчастникиЗакупки.Участник КАК Участник,
	|	УчастникиЗакупки.Участник КАК НомерСтроки
	|ПОМЕСТИТЬ УчастникиЗакупки
	|ИЗ
	|	&УчастникиЗакупки КАК УчастникиЗакупки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчастникиЗакупки.Участник КАК Контрагент
	|ИЗ
	|	УчастникиЗакупки КАК УчастникиЗакупки
	|ГДЕ
	|	УчастникиЗакупки.Участник.Контрагент = &Контрагент";
	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции

&НаСервере
Функция ЗакупкаУтверждена()
	ЗакупкаУтверждена = ЦентрализованныеЗакупкиУХ.ОбъектУтвержден(Объект.Ссылка);
	Возврат ЗакупкаУтверждена;
КонецФункции
&НаСервере
Процедура УстановитьОформлениеФормыНаСервере()
	ЦентрализованныеЗакупкиУХ.УстановитьПараметрВыбораПериодичностьЗакупок(Элементы.ПериодЗакупок);
	Элементы.ДекорацияНельзяРедактировать.Видимость = Объект.ПометкаУдаления;
	ЭтаФорма.ТолькоПросмотр = (Объект.ПометкаУдаления ИЛИ Объект.Завершена);
	УстановитьВидимостьПубликацииЭТП(ЭтаФорма);
	УстановитьВидимостьВкладкиЛоты();
	УстановитьВидимостьВклдакиУсловия();	
	УстановитьОформлениеВкладкиКвалификации();
	УстановитьСвязанноеМероприятие(Объект.Ссылка);
	УстановитьВидимостьКатегорииЗакупкиДляИсключенияИзГОЗНаСервере();
	УстановитьОформлениеЭлементовЕИС();
	УстановитьВидимостьУчастниковЗакрытойЗакупки();
	УстановитьВидимостьУчастниковСовместнойЗакупки();
	УстановитьВидимостьОрганизацииЗаказчика();
	УстановитьОформлениеПоСпособуЗакупки(ЭтаФорма);
	Элементы.ЛотыКомандаДобавитьЛот.Видимость = Объект.ЭкстреннаяЗакупка;
	Элементы.ЭкстреннаяЗакупка.Доступность = НЕ флФЗ223;
	Элементы.ДекорацияОтображениеПереторжки.Видимость = ((НомерПереторжки > 0) И (Объект.Переторжка));
	Элементы.ТоварнаяКатегория.Видимость = флРазделятьНоменклатуруПоКатегорийнымМенеджерам;
	Элементы.ОснованиеЗавершения.Видимость = Объект.Завершена;
	УстановитьВидимостьПредложенийИДоговоров();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПубликацииЭТП(Форма)
	СпособПубликацииНаЭТП = ПредопределенноеЗначение("Перечисление.СпособПубликацииЗакупки.НаЭТП");
	ЭтоПубликацияНаЭТП = (Форма.Объект.ВЭлектроннойФорме);
	СпособВыбораВОбъекте = Форма.Объект.СпособВыбораПоставщика;
	Форма.Элементы.ЭТППубликации.Видимость = (ЭтоПубликацияНаЭТП) ИЛИ (ЭтоСпособВЭлектроннойФорме(СпособВыбораВОбъекте));
	Форма.Элементы.СпособСозданияДоговора.Видимость = ЭтоПубликацияНаЭТП;
КонецПроцедуры

// Определяет, что способ выбора поставщика СпособВыбораВход относится только к 
// электронным торгам.
&НаКлиентеНаСервереБезКонтекста
Функция ЭтоСпособВЭлектроннойФорме(СпособВыбораВход)
	РезультатФункции = ЦентрализованныеЗакупкиКлиентСерверУХ.ЭтоСпособВЭлектроннойФорме(СпособВыбораВход);
	Возврат РезультатФункции;
КонецФункции		 // ЭтоСпособВЭлектроннойФорме()

// Устанавливает доступность реквизитов в зависимости от способа закупки.
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОформлениеПоСпособуЗакупки(Форма)
	ТекСпособЗакупки = Форма.Объект.СпособВыбораПоставщика;
	БлокироватьФлагЭлектроннойФормы = ЭтоСпособВЭлектроннойФорме(ТекСпособЗакупки);
	Форма.Элементы.ВЭлектроннойФорме.Доступность = НЕ БлокироватьФлагЭлектроннойФормы;
КонецПроцедуры		// УстановитьОформлениеПоСпособуЗакупки()

&НаСервере
Процедура УстановитьВидимостьВклдакиУсловия()

	Элементы.ГруппаУсловияАукциона.Видимость = ЭтоАукцион;
	Элементы.ВнешняяСистемаДляПроведенияАукциона.Видимость = ЭтоАукцион;
	Элементы.ВнешняяСистемаДляПроведенияАукциона.АвтоОтметкаНезаполненного = ЭтоАукцион;
	Если ЭтоАукцион Тогда
		УстановитьВидимостьУсловийАукциона();
	КонецЕсли;
	флЕстьКвалификация = Объект.ТребуетсяКвалификационныйОтбор;
	Элементы.ГруппаМероприятие.Видимость = ЗначениеЗаполнено(Объект.СпособВыбораПоставщика);
	Элементы.КоличествоМестСОбязанностьюЗаключитьДоговор.ТолькоПросмотр =
		ЭтоЕдинственныйПоставщик;
	Элементы.МинимальноеКоличествоЗаявок.ТолькоПросмотр =
		ЭтоЕдинственныйПоставщик;
	УстановитьОформлениеЭлементовОбеспечения();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьВкладкиЛоты()
	флОбъектЗаписан = ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.ГруппаЛоты.Видимость = флОбъектЗаписан;
	Элементы.ПредупреждениеНельзяРедактироватьЛоты.Видимость = НЕ флОбъектЗаписан;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьУсловийАукциона()
	флНеПоЦене = Объект.ТоргиНеПоЦене;
	Элементы.ШагИзмененияЦены.Видимость = НЕ флНеПоЦене;
	Элементы.РазрешаетсяИзменятьЦеныВПроцессеТоргов.Видимость = НЕ флНеПоЦене;
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеВкладкиКвалификации()
	флЕстьКвалификация = Объект.ТребуетсяКвалификационныйОтбор;
	Элементы.ФормаОткрытьСостояниеКвалификацииПоставщиков.Видимость = флЕстьКвалификация;
	Элементы.ГруппаКвалификацияПоставщиков.Видимость = флЕстьКвалификация;
	ОповещенияАккредитованныхПоставщиковОТоргах.Параметры.УстановитьЗначениеПараметра(
		"ЗакупочнаяПроцедура", 
		Объект.Ссылка);
	КвалификацииУчастников.Параметры.УстановитьЗначениеПараметра(
		"ДатаСреза",
		?(ЗначениеЗаполнено(Объект.Ссылка),
			АккредитацияПоставщиковУХ.ПолучитьГраницуПоискаАккредитованныхПоставщиков(
				Объект.Ссылка),
			ТекущаяДата()));
	КвалификацииУчастников.Параметры.УстановитьЗначениеПараметра(
		"ЗакупочнаяПроцедура",
		Объект.Ссылка);		
	ОтборыСписковКлиентСерверУХ.ИзменитьЭлементОтбораСписка(
		КвалификацииУчастников,
		"Организация",
		Объект.ОрганизаторЗакупки,
		Истина);
КонецПроцедуры
	
&НаСервере
Процедура УстановитьОформлениеЭлементовОбеспечения()
	Элементы.ФормаОбеспеченияЗаявки.Видимость = Объект.ОбеспечениеЗаявки;
	Элементы.ГруппаВеличинаОбеспеченияЗаявки.Видимость = Объект.ОбеспечениеЗаявки;
	Элементы.ФормаОбеспеченияДоговора.Видимость = Объект.ОбеспечениеДоговора;
	Элементы.ГруппаВеличинаОбеспеченияДоговора.Видимость = Объект.ОбеспечениеДоговора;
	Элементы.ФормаВозвратаАванса.Видимость = Объект.ОбеспечениеВозвратаАванса;
	Элементы.ГруппаВеличинаВозвратаАванса.Видимость = Объект.ОбеспечениеВозвратаАванса;
	Элементы.ВеличинаПреференцийДляКонтрагентов.Видимость = Объект.ПреференцииДляКонтрагентов;
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеЭлементовЕИС()
	Элементы.ГруппаЕИС.Видимость = флФЗ223  И НЕ Объект.СпособСозданияДоговора = Перечисления.СпособСозданияДоговора.ВыборПоставщикаНаЭТП;;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьУчастниковЗакрытойЗакупки()
	Если Объект.ЗакрытаяЗакупка Тогда
		Элементы.ГруппаУчастникиЗакрытойЗакупки.Заголовок = "Участники закрытой закупки";
		Элементы.УчастникиЗакрытойЗакупки.Доступность = Истина;
		Элементы.ДекорацияШаг.Видимость = Ложь;
	ИначеЕсли НЕ Объект.ЗакрытаяЗакупка И НЕ ПолучитьФункциональнуюОпцию("НеТребоватьРегистрацииУчастниковДляОткрытыхСпособовЗакупок") Тогда 
		Элементы.ГруппаУчастникиЗакрытойЗакупки.Заголовок = "Участники закупки";
		Элементы.УчастникиЗакрытойЗакупки.Доступность = Истина;
		Элементы.ДекорацияШаг.Видимость = Ложь;
	ИначеЕсли  НЕ Объект.ЗакрытаяЗакупка И  ПолучитьФункциональнуюОпцию("НеТребоватьРегистрацииУчастниковДляОткрытыхСпособовЗакупок") Тогда
		Элементы.ГруппаУчастникиЗакрытойЗакупки.Заголовок = "Участники закупки";
		Элементы.УчастникиЗакрытойЗакупки.Доступность = Ложь;
		Элементы.ДекорацияШаг.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьУчастниковСовместнойЗакупки()
	Элементы.ГруппаУчастникиСовместнойЗакупки.Видимость =
		Объект.СовместнаяЗакупка;
КонецПроцедуры
&НаСервере
Процедура УстановитьВидимостьОрганизацииЗаказчика()
	Элементы.ОрганизацияДляЗаключенияДоговора.Видимость =
		НЕ Объект.СовместнаяЗакупка;
КонецПроцедуры
	
&НаСервере
Процедура ОрганизаторЗакупкиПриИзмененииНаСервере()
	ТребуетсяКвалификационныйОтборПриИзмененииНаСервере();
	#Если ВебКлиент Тогда
	ОпределитьСостояниеОбъекта(Истина);	
	#КонецЕсли
КонецПроцедуры

&НаСервере
Процедура ТребуетсяКвалификационныйОтборПриИзмененииНаСервере()
	Если Объект.ТребуетсяКвалификационныйОтбор Тогда
		ЗаполнитьТребованияКПоставщикамНаСервере();
		ЗаполнитьТребованияКДокументамПоТребованиямКПоставщикамНаСервере();
	КонецЕсли;
	УстановитьОформлениеФормыНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыТребованияКПоставщикам(ТребованиеКПоставщикам)
	РеквизитыТребования = Новый Структура;
	РеквизитыТребования.Вставить("Критерий", Справочники.КритерииВыбора.ПустаяСсылка());
	РеквизитыТребования.Вставить("ТребованиеКДокументу", Справочники.ТребованияКСоставуДокументов.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(ТребованиеКПоставщикам) Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыТребования, ТребованиеКПоставщикам);
	КонецЕсли;
	Возврат РеквизитыТребования;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьТребованиеКДокументам(ТребованияКСоставуДокументов, ТребованиеКДокументам)
	Если НЕ ЗначениеЗаполнено(ТребованиеКДокументам) Тогда
		Возврат;
	КонецЕсли;
	
	мСтрок = ТребованияКСоставуДокументов.НайтиСтроки(Новый Структура("Требование", ТребованиеКДокументам));
	Если мСтрок.Количество() = 0 Тогда
		НоваяСтрока = ТребованияКСоставуДокументов.Добавить();
		НоваяСтрока.Требование = ТребованиеКДокументам;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РасчитатьСуммуДокументаНаСервере()
	СуммаДокумента = Справочники.ЗакупочныеПроцедуры.РасчитатьСуммуПоЛотам(
		Объект.Ссылка,
		Объект.ВалютаДокумента,
		ТекущаяДатаСеанса());
КонецПроцедуры

&НаСервере
Процедура ОрганизацияДляЗаключенияДоговораПриИзмененииНаСервере()
	ЗаполнитьРеквизитыФормыНаСервере();
	УстановитьОформлениеФормыНаСервере();
	#Если ВебКлиент Тогда
	ОпределитьСостояниеОбъекта(Истина);	
	#КонецЕсли
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоЛотуНаСервере(Лот)
	РасчитатьСуммуДокументаНаСервере();
	ЗакупкаОбъект = РеквизитФормыВЗначение("Объект");
	ЗакупкаОбъект.ЗаполнитьТребованияПоставщиковДокументов();
	ЗначениеВРеквизитФормы(ЗакупкаОбъект, "Объект");
	ЗаполнитьРеквизитыФормыНаСервере();
	УстановитьОформлениеФормыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокЭТП(ПолеСпискаЭТП)
	ПолеСпискаЭТП.СписокВыбора.Очистить();
	ОбщегоНазначенияКлиентСерверУХ.ДобавитьВСписокИзСписка(
		ПолеСпискаЭТП.СписокВыбора,
		ПолучитьКлассификторЭТПДляВыбора());
КонецПроцедуры

// Возвращает список значений содержащий элементы справочника КлассификаторЭТП
// с представлением заполненным статистической информацией о поставщиках.
// Элементы списка отсортированы по убыванию кол-ва зарегистрированных поставщиков.
//
Функция ПолучитьКлассификторЭТПДляВыбора() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(КлассификаторЭТП.Наименование) КАК Наименование,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ АнкетыПоставщиковИспользуемыеЭТП.Ссылка) КАК КоличествоПоставщиков,
		|	КлассификаторЭТП.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КлассификаторЭТП КАК КлассификаторЭТП
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АнкетыПоставщиков.ИспользуемыеЭТП КАК АнкетыПоставщиковИспользуемыеЭТП
		|		ПО КлассификаторЭТП.Ссылка = АнкетыПоставщиковИспользуемыеЭТП.ЭТП
		|ГДЕ
		|	НЕ АнкетыПоставщиковИспользуемыеЭТП.Ссылка.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	КлассификаторЭТП.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	КоличествоПоставщиков УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Список = Новый СписокЗначений;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Список.Добавить(
			ВыборкаДетальныеЗаписи.Ссылка,
			СтрШаблон("%1 (%2)",
				ВыборкаДетальныеЗаписи.Наименование,
				ВыборкаДетальныеЗаписи.КоличествоПоставщиков));
	КонецЦикла;
	Возврат Список;
КонецФункции

&НаКлиенте
Процедура ОткрытьАнкетуУчастника(Команда)
	ТекДанные = Элементы.УчастникиЗакрытойЗакупки.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ЗначениеЗаполнено(ТекДанные.Участник) Тогда
		ПоказатьЗначение(,ТекДанные.Участник);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура СовместнаяЗакупкаПриИзмененииНаСервере()
	Если НЕ ПроверитьОбновитьДляСовместнойЗакупкеНаСервере() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
			"ru='Невозможно снять флаг совместной закупки. Уже введены лоты с разными заказчиками.'");
		Сообщение.Сообщить();
	КонецЕсли;
	УстановитьОформлениеФормыНаСервере();
КонецПроцедуры

// Проверяет, что можно снять/установить флаг СовместнаяЗакупка.
// Если нельзя снять флаг, то устанавливает его обратно!
// Сбрасывает/устанавливает значение организации для заключения договора
// в зависимости от значения флага.
//
// Возвращает:
//	Истина - если все в порядке и можно снять/установить флаг СовместнаяЗакупка.
//	Ложь - невозможно снять флаг СовместнаяЗакупка.
//
&НаСервере
Функция ПроверитьОбновитьДляСовместнойЗакупкеНаСервере()
	Если Объект.СовместнаяЗакупка Тогда
		Объект.ОрганизацияДляЗаключенияДоговора = Неопределено;
	Иначе
		мОрганизацийДляЗаключенияДоговора =
			Справочники.ЗакупочныеПроцедуры.ОрганизацииДляЗаключенияДоговора(
				Объект.Ссылка);
		Если мОрганизацийДляЗаключенияДоговора.Количество() = 1 Тогда
			Объект.ОрганизацияДляЗаключенияДоговора =
				мОрганизацийДляЗаключенияДоговора[0];
		ИначеЕсли мОрганизацийДляЗаключенияДоговора.Количество() > 1 Тогда
			// Лоты с несколькими организациями. Не можем снять флаг.
			Объект.СовместнаяЗакупка = Истина;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаСервере
Функция ПолучитьСуществующееОповещениеПоставщиков()
		мДокументов =
		ЦентрализованныеЗакупкиУХ.ПолучитьДокументыПоОтбору(
			"ОповещениеАккредитованныхПоставщиковОТоргах",
			Новый Структура(
				"ЗакупочнаяПроцедура, ПометкаУдаления",
				Объект.Ссылка, Ложь),
			Истина);
	Если мДокументов.Количество() = 0 Тогда
		Возврат Документы.ОповещениеАккредитованныхПоставщиковОТоргах.ПустаяСсылка();
	КонецЕсли;
	Возврат мДокументов[0];
КонецФункции

&НаСервере
Функция ПроверитьНаличиеМероприятияУтвержденнойЗакупки(НовоеЗначениеСтатусаВход)
	Если  НовоеЗначениеСтатусаВход = Перечисления.СостоянияСогласования.Утверждена Тогда
		Мероприятие =  Документы.Мероприятие.ПолучитьПоследнееМероприятиеПоКонтексту(Объект.Ссылка,  Перечисления.ВидыМероприятий.ЗакупочнаяПроцедура);	
		Если Не ЗначениеЗаполнено(Мероприятие) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не создана стадия закупочной процедуры'");
			Сообщение.Поле = "СвязанноеМероприятие";
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецЕсли;
		Структура =  Справочники.ЗакупочныеПроцедуры.УказанКонтрагентУчастникаЗакупки(Объект);
		Если Структура.Ответ = Истина Тогда
			Сообщение = Новый СообщениеПользователю;
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В анкете участника %1 необходимо указать контрагента'"),
			Структура.Анкеты);
			Сообщение.Текст = ТекстСообщения;
			Сообщение.ПутьКДанным = "Объект.УчастникиЗакупки";
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаСервере
Процедура УстановитьВидимостьКатегорииЗакупкиДляИсключенияИзГОЗНаСервере()
	Элементы.КатегорияЗакупкиДляИсключенияИзГОЗ.Видимость =
		Объект.НеУчитыватьПриРасчетеДолиЗакупокУСМП;
КонецПроцедуры

// Формирует новый предмет договора по подчинённым лотам закупочной процедуры
// ЗакупочнаяПроцедураВход.
&НаСервереБезКонтекста
Функция ПолучитьПредметДоговораПоЛотам(ЗакупочнаяПроцедураВход)
	РезультатФункции = "";
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Лоты.Ссылка КАК Ссылка,
		|	Лоты.ЗакупочнаяПроцедура КАК ЗакупочнаяПроцедура,
		|	Лоты.ПредметДоговора КАК ПредметДоговора
		|ИЗ
		|	Справочник.Лоты КАК Лоты
		|ГДЕ
		|	НЕ Лоты.ПометкаУдаления
		|	И Лоты.ЗакупочнаяПроцедура = &ЗакупочнаяПроцедура";
	Запрос.УстановитьПараметр("ЗакупочнаяПроцедура", ЗакупочнаяПроцедураВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатФункции = РезультатФункции + ВыборкаДетальныеЗаписи.ПредметДоговора;
		РезультатФункции = РезультатФункции + "
		|";
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьПредметДоговораПоЛотам()

// Возвращает анкеты поставщиков, содержащиеся в документах Приглашение
// поставщика, введённых по закупочной процедуре ЗакупкаВход.
&НаСервереБезКонтекста
Функция ПолучитьАнкетыПриглашенныхПоставщиков(ЗакупкаВход)
	РезультатФункции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОповещениеАккредитованныхПоставщиковОТоргахПоставщики.Ссылка КАК Ссылка,
		|	ОповещениеАккредитованныхПоставщиковОТоргахПоставщики.Аккредитован КАК Аккредитован,
		|	ОповещениеАккредитованныхПоставщиковОТоргахПоставщики.АнкетаПоставщика КАК АнкетаПоставщика
		|ИЗ
		|	Документ.ОповещениеАккредитованныхПоставщиковОТоргах.Поставщики КАК ОповещениеАккредитованныхПоставщиковОТоргахПоставщики
		|ГДЕ
		|	НЕ ОповещениеАккредитованныхПоставщиковОТоргахПоставщики.Ссылка.ПометкаУдаления
		|	И ОповещениеАккредитованныхПоставщиковОТоргахПоставщики.Аккредитован
		|	И ОповещениеАккредитованныхПоставщиковОТоргахПоставщики.Ссылка.ЗакупочнаяПроцедура = &ЗакупочнаяПроцедура";
	Запрос.УстановитьПараметр("ЗакупочнаяПроцедура", ЗакупкаВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатФункции.Добавить(ВыборкаДетальныеЗаписи.АнкетаПоставщика);
	КонецЦикла;
	РезультатФункции = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(РезультатФункции);
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьАнкетыПриглашенныхПоставщиков()

// Возвращает массив товарных категорий, сопоставленных менеджеру ПользовательВход
// в организации ОрганизацияВход.
&НаСервереБезКонтекста
Функция ПолучитьМассивКатегорий(ПользовательВход, ОрганизацияВход)
	РезультатФункции = РегистрыСведений.ПолномочияКатегорийныхМенеджеров.ПолучитьТоварныеКатегорииПоМенеджеру(ПользовательВход, ОрганизацияВход);
	Возврат РезультатФункции;
КонецФункции

#КонецОбласти


#Область КвалификацияПоставщиков


&НаКлиенте
Процедура КомандаСоздатьКвалификациюДляЗакупки(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыСозданияЗаявки = Новый Структура;
	ПараметрыСозданияЗаявки.Вставить("Основание", Объект.Ссылка);
	ОткрытьФорму("Документ.КвалификацияПоставщика.ФормаОбъекта", ПараметрыСозданияЗаявки, ЭтаФорма);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьЗаявленияНаКвалификациюАккредитованныхПоставщиковНаСервере(
														ЗакупочнаяПроцедура)
	АккредитацияПоставщиковУХ.СоздатьКвалификацииПоАттестованнымКонтрагентамЗакупки(
		ЗакупочнаяПроцедура);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКвалификацииАккредитованныхПоставщиков(Команда)
	Если ЗакупкаУтверждена()  Тогда
		СоздатьЗаявленияНаКвалификациюАккредитованныхПоставщиковНаСервере(Объект.Ссылка);
		Элементы.КвалификацииУчастников.Обновить();
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Документы квалификации можно создавать только после утверждения закупочной процедуры'");
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуЗаполнитьТребованияКПоставщикамНаСервере()
	ЗаполнитьТребованияКПоставщикамНаСервере();
	ЗаполнитьТребованияКДокументамПоТребованиямКПоставщикамНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТребованияКПоставщикамНаСервере()
	ЗакупкаОбъект = РеквизитФормыВЗначение("Объект");
	ЗакупкаОбъект.ЗаполнитьТребованияКПоставщикам();
	ЗначениеВРеквизитФормы(ЗакупкаОбъект, "Объект");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТребованияКДокументамПоТребованиямКПоставщикамНаСервере()
	Для Каждого СтрокаТребованияКПоставщику Из Объект.ТребованияКПоставщикам Цикл
		ДобавитьТребованиеКДокументам(Объект.ТребованияКСоставуДокументов, СтрокаТребованияКПоставщику.ТребованиеКДокументу);
	КонецЦикла;
КонецПроцедуры

	
#КонецОбласти


#Область ШаблоныЗаполнения


// Получает структуру шаблона по текущему объекту.
&НаСервере
Функция ВернутьСтруктураДанныхОбъектаШаблона()
	ОбъектШаблона = РеквизитФормыВЗначение("Объект");
	СтруктураДанныхОбъекта = УправлениеШаблонамиЗаполненияУХ.СтруктураДанныхОбъектаШаблонаПоОбъекту(ОбъектШаблона);
	Возврат СтруктураДанныхОбъекта;
КонецФункции

// Выполняет заполнение реквизитов формы по шаблону заполнения ШаблонВход.
&НаСервере
Процедура ЗаполнитьФормуПоШаблону(ШаблонВход)
    ОбъектШаблона = РеквизитФормыВЗначение("Объект");
    ЗаполненныйОбъект = УправлениеШаблонамиЗаполненияУХ.ЗаполнитьИзШаблона(ШаблонВход, ОбъектШаблона);
	ЗначениеВРеквизитФормы(ЗаполненныйОбъект, "Объект")
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзШаблона(Команда)
	СтруктураДанныхОбъектаШаблона = ВернутьСтруктураДанныхОбъектаШаблона();	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Назначение", СтруктураДанныхОбъектаШаблона.Назначение);
	ПараметрыФормы.Вставить("ИмяОбъекта", СтруктураДанныхОбъектаШаблона.ИмяОбъекта);
	ПараметрыФормы.Вставить("АналитикаОтбора", Объект.ОрганизаторЗакупки);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ОткрытьФорму("Справочник.ШаблоныЗаполнения.ФормаВыбора", ПараметрыФормы, ЭтаФорма);		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВШаблон(Команда)
	УправлениеШаблонамиЗаполненияКлиентУХ.СохранитьВШаблон(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЗаполнениеИзШаблона(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ШаблоныЗаполнения") Тогда
		ЗаполнитьФормуПоШаблону(ВыбранноеЗначение);
		УправлениеШаблонамиЗаполненияКлиентУХ.ПослеЗаполненияПоШаблону(ЭтаФорма, ВыбранноеЗначение);
		ЗаголовокПредупреждения = НСтр("ru = 'Заполнение'");
		ТекстПредупреждения = НСтр("ru = 'Текущий объект заполнен по шаблону %ШаблонЗаполнения%'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ШаблонЗаполнения%", Строка(ВыбранноеЗначение));
		ПоказатьОповещениеПользователя(ЗаголовокПредупреждения, , ТекстПредупреждения, БиблиотекаКартинок.Успешно32);
	Иначе
	// Не выбран шаблон. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры


#КонецОбласти


#Область УниверсальныеПроцессыСогласование


&НаСервере
Процедура ОпределитьСостояниеОбъекта(ОбновитьОтветственныхВход = Ложь)
	ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(ЭтаФорма, ОбновитьОтветственныхВход);
КонецПроцедуры	

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если ВыбранноеЗначение = РеквизитСостояниеЗаявки(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Изменение состояния возможно только после записи данных.
			|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
		Возврат;
	КонецЕсли;
	
	ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение); 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение)
	ДействияСогласованиеУХКлиент.ИзменитьСостояниеЗаявкиКлиент(ВыбранноеЗначение, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
 
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		ИзменитьСостояниеЗаявкиКлиент(Параметры.ВыбранноеЗначение);
	КонецЕсли;
 
КонецПроцедуры

&НаСервере
Функция ИзменитьСостояниеЗаявки(Ссылка, Состояние)
	
	Возврат УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(Ссылка, Состояние, , , ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ПринятьКСогласованию_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ПринятьКСогласованию(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ИсторияСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьДокумент_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.СогласоватьДокумент(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСогласование_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.ОтменитьСогласование(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутСогласования_Подключаемый() Экспорт
	ДействияСогласованиеУХКлиент.МаршрутСогласования(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЭлементаОрганизации_Подключаемый(Элемент) Экспорт
	ОпределитьСостояниеОбъекта(Истина);		
	ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент);
КонецПроцедуры		// ПриИзмененииЭлементаОрганизации_Подключаемый()

// Возвращает значение реквизита СостояниеЗаявки на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСостояниеЗаявки(ФормаВход)
	Возврат ФормаВход["СостояниеЗаявки"];
КонецФункции

// Возвращает значение реквизита СтатусОбъекта на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСтатусОбъекта(ФормаВход)
	Возврат ФормаВход["СтатусОбъекта"];
КонецФункции

// Возвращает значение реквизита Согласующий на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСогласующий(ФормаВход)
	Возврат ФормаВход["Согласующий"];
КонецФункции

&НаКлиенте
Процедура ЛотыПринятьКСогласованию(Команда)
	ТекДанные = Элементы.Лоты.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ДействияСогласованиеУХКлиент.ПринятьКСогласованию(ЭтаФорма, ТекДанные.Ссылка);
	Иначе
		ТекстСообщения = НСтр("ru = 'Для продолжения требуется выбрать строку. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЛотыИсторияСогласования(Команда)
	ТекДанные = Элементы.Лоты.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ДействияСогласованиеУХКлиент.ИсторияСогласования(ЭтаФорма, ТекДанные.Ссылка);
	Иначе
		ТекстСообщения = НСтр("ru = 'Для продолжения требуется выбрать строку. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЛотыОтменитьСогласование(Команда)
	ТекДанные = Элементы.Лоты.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ДействияСогласованиеУХКлиент.ОтменитьСогласование(Неопределено, ТекДанные.Ссылка);
	Иначе
		ТекстСообщения = НСтр("ru = 'Для продолжения требуется выбрать строку. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЛотыСогласовать(Команда)
	ТекДанные = Элементы.Лоты.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ДействияСогласованиеУХКлиент.СогласоватьДокумент(ЭтаФорма, ТекДанные.Ссылка);
	Иначе
		ТекстСообщения = НСтр("ru = 'Для продолжения требуется выбрать строку. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЛотыХодСогласования(Команда)
	ТекДанные = Элементы.Лоты.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ДействияСогласованиеУХКлиент.МаршрутСогласования(ЭтаФорма, ТекДанные.Ссылка);
	Иначе
		ТекстСообщения = НСтр("ru = 'Для продолжения требуется выбрать строку. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = РеквизитСтатусОбъекта(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьСохранениеИзменитьСтатус(ВыбранноеЗначение);
КонецПроцедуры

// Проверяет сохранение текущего объекта и изменяет его статус
// НовоеЗначениеСтатусаВход.
&НаКлиенте
Процедура ПроверитьСохранениеИзменитьСтатус(НовоеЗначениеСтатусаВход)
	Если (Объект.Ссылка.Пустая()) ИЛИ (ЭтаФорма.Модифицированность) Тогда
		СтруктураПараметров = Новый Структура("ВыбранноеЗначение", НовоеЗначениеСтатусаВход);
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеЗаявкиОбработкаВыбораПродолжение", ЭтотОбъект, СтруктураПараметров);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Изменение состояния возможно только после записи данных.
		|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	ИначеЕсли Не ПроверитьНаличиеМероприятияУтвержденнойЗакупки(НовоеЗначениеСтатусаВход) Тогда	
		Возврат;
	КонецЕсли;
	ИзменитьСостояниеЗаявкиКлиент(НовоеЗначениеСтатусаВход);	
КонецПроцедуры

// Выполняет обработчик ПриИзменении, сопоставленный по умолчанию для элемента Элемент
&НаКлиенте
Процедура ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации(Элемент)
	#Если НЕ ВебКлиент Тогда
	ИмяЭлемента = Элемент.Имя;
	Если ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Для Каждого ТекОбработчикиИзмененияОрганизации Из ЭтаФорма["ОбработчикиИзмененияОрганизации"] Цикл
			Если СокрЛП(ТекОбработчикиИзмененияОрганизации.ИмяРеквизита) = СокрЛП(ИмяЭлемента) Тогда
				СтрокаВыполнения = ТекОбработчикиИзмененияОрганизации.ИмяОбработчика + "(Элемент);";
				Выполнить СтрокаВыполнения;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли; 
		КонецЦикла;	
	Иначе
		// Передан пустой элемент.
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры		// ВыполнитьПредыдущийОбработчикПриИзмененииОрганизации()

&НаКлиенте
Процедура УчастникиЗакрытойЗакупкиУчастникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		Если ДубльУчастникаЗакупки(ВыбранноеЗначение) Тогда
			ТекстСообщения = НСтр("ru = 'Контрагент из анкеты поставщика был введен ранее.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Возврат;
		ИначеЕсли НЕ ТИПЗНЧ(ВыбранноеЗначение)=ТИП("ТИП") И ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение,"Предопределенный")  Тогда
			ТекстСообщения = НСтр("ru = 'Нельзя выбирать предопределенное значение справочника'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Возврат;    
			
		Иначе 
			СтандартнаяОбработка = Истина;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.УсловияОплаты) Тогда
		Оповещение = Новый ОписаниеОповещения(
				"ОбработатьПодтверждениеЗаполненияУсловий", ЭтаФорма);
		ПоказатьВопрос(Оповещение,
			НСтр("ru = 'Заполнить поле ""Условия оплаты текстовое описание"" по данным соглашения поставщика?'"),
			РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		ОбработатьПодтверждениеЗаполненияУсловий(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьДоговорПоЛоту(Команда)
	ТекДанные = Элементы.Лоты.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("Ключ", ТекДанные.Ссылка);
		Если ЗакупкаУтверждена() Тогда
			ОткрытьФорму("Обработка.НазначениеПоставщиковНоменклатуреЛота.Форма.ФормаСозданияДоговоров", ПараметрыФормы);	
		Иначе
			ТекстСообщения = НСтр("ru = 'Договор можно создать только по утвержденному лоту'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Для ввода договора необходимо выбрать лот'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпособСозданияДоговораПриИзменении(Элемент)
	УстановитьВидимостьПредложенийИДоговоров();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПредложенийИДоговоров()
	
	Элементы.ЛотыСправочникЛотыПредложенияПоставщиковЛота.Видимость = ?(Объект.СпособСозданияДоговора = Перечисления.СпособСозданияДоговора.ВыборПоставщикаНаЭТП, Ложь, Истина);
	Элементы.ЛотыКомандаСоздатьДоговорПоЛоту. Видимость = ?(Объект.СпособСозданияДоговора = Перечисления.СпособСозданияДоговора.ВыборПоставщикаНаЭТП, Истина, Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСоглашения()
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация",ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(Объект.Ссылка,"ОрганизацияДляЗаключенияДоговора")));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация",ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика")));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Партнер",ПредопределенноеЗначение("Справочник.Партнеры.НеизвестныйПартнер")));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валюта",ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(Объект.Ссылка,"ВалютаДокумента")));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ИспользуютсяДоговорыКонтрагентов",Истина));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЦенаВключаетНДС",Истина));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.РегистрироватьЦеныПоставщика",Истина));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.КонтролироватьЦеныЗакупки",Истина));

	Элементы.Соглашение.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УстановитьОтборСоглашения();
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеСоздание(Элемент, СтандартнаяОбработка)
	УстановитьОтборСоглашения();
КонецПроцедуры

&НаКлиенте
Процедура ТипАнкетыПриИзменении(Элемент)
	Если ТипАнкеты = 1 Тогда
		Массив = Новый Массив(); 
		Массив.Добавить(Тип("СправочникСсылка.Контрагенты")); 
		Описание = Новый ОписаниеТипов(Массив);
		
		Элементы.УчастникиЗакрытойЗакупкиУчастник.ОграничениеТипа = Описание; 
	Иначе
		Массив = Новый Массив(); 
		Массив.Добавить(Тип("СправочникСсылка.АнкетыПоставщиков")); 
		Описание = Новый ОписаниеТипов(Массив);
		
		Элементы.УчастникиЗакрытойЗакупкиУчастник.ОграничениеТипа = Описание; 
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
