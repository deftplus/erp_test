#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет поиск действующего договора для документа.
// Если найден один действующий договор, возвращает ссылку на него, в противном случае - пустую ссылку.
// 
// Параметры:
// 	Организация - СправочникСсылка.Организации - 
// 	Партнер - СправочникСсылка.Партнеры - 
// 	Контрагент - СправочникСсылка.Контрагенты - 
// 	ТекущийДоговор - СправочникСсылка.ДоговорыАренды -
// 	ТипДоговора - ПеречислениеСсылка.ТипыДоговоровАренды -
// 	
// Возвращаемое значение:
// 	СправочникСсылка.ДоговорыАренды - 
Функция ДоговорПоУмолчанию(Организация, Партнер, Контрагент, ТекущийДоговор, ТипДоговора = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыАренды.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыАренды КАК ДоговорыАренды
	|ГДЕ
	|	(НЕ ДоговорыАренды.ПометкаУдаления)
	|	И ДоговорыАренды.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыАренды.Партнер = &Партнер
	|	И ДоговорыАренды.Контрагент = &Контрагент
	|	И ДоговорыАренды.Организация = &Организация
	|	И ДоговорыАренды.Ссылка = &ТекущийДоговор
	|	И (ДоговорыАренды.ТипДоговора = &ТипДоговора
	|		ИЛИ &ТипДоговора = НЕОПРЕДЕЛЕНО)
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыАренды.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыАренды КАК ДоговорыАренды
	|ГДЕ
	|	(НЕ ДоговорыАренды.ПометкаУдаления)
	|	И ДоговорыАренды.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыАренды.Партнер = &Партнер
	|	И ДоговорыАренды.Контрагент = &Контрагент
	|	И ДоговорыАренды.Организация = &Организация
	|	И (ДоговорыАренды.ТипДоговора = &ТипДоговора
	|		ИЛИ &ТипДоговора = НЕОПРЕДЕЛЕНО)
	|";
	Запрос.УстановитьПараметр("ТекущийДоговор", ТекущийДоговор);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТипДоговора", ТипДоговора);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если Не МассивРезультатов[0].Пустой() Тогда
		
		Выборка = МассивРезультатов[0].Выбрать();
		Выборка.Следующий();
		
		ДоговорПоУмолчанию = Выборка.Ссылка;
		
	Иначе
		Выборка = МассивРезультатов[1].Выбрать();
	
		Если Не Выборка.Следующий() Тогда
			ДоговорПоУмолчанию = Справочники.ДоговорыАренды.ПустаяСсылка();
		ИначеЕсли Выборка.Количество() = 1 Тогда
			ДоговорПоУмолчанию = Выборка.Ссылка;
		Иначе
			ДоговорПоУмолчанию = Справочники.ДоговорыАренды.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Партнер");
	Результат.Добавить("Контрагент");
	Результат.Добавить("Организация");
	Результат.Добавить("Подразделение");
	Результат.Добавить("НаправлениеДеятельности");
	Результат.Добавить("ОплатаВВалюте");
	Результат.Добавить("ВалютаВзаиморасчетов");
	
	Результат.Добавить("Балансодержатель");
	Результат.Добавить("ЕстьОбеспечительныйПлатеж");
	Результат.Добавить("ЕстьВыкупПредметовАренды");
	Результат.Добавить("ЕстьАвансированиеВыкупнойСтоимости");
	
	Результат.Добавить("ГруппаФинансовогоУчета");
	
	Результат.Добавить("ТипДоговора");
	Результат.Добавить("СпособОпределенияСтоимостиАктивов;СпособОпределенияСтоимостиАктивовДисконтирование,СпособОпределенияСтоимостиАктивовПоФактическойСтоимости");
	Результат.Добавить("УчитыватьПредметыАрендыВРеглУчете;ВариантОтраженияВУчетеВсе,ВариантОтраженияВУчетеРегл,ВариантОтраженияВУчетеУпр");
	Результат.Добавить("УчитыватьПредметыАрендыВУпрУчете;ВариантОтраженияВУчетеВсе,ВариантОтраженияВУчетеРегл,ВариантОтраженияВУчетеУпр");

	Возврат Результат;
	
КонецФункции

// Возвращает доступные типы платежей по договору
//
// Параметры:
//    Договор - СправочникСсылка.ДоговорыАренды - .
//
// Возвращаемое значение:
//    Массив - Типы начислений, доступные по договору.
//
Функция ТипыПлатежейПоДоговору(Договор) Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ТипыПлатежейПоАренде.УслугаПоАренде);
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Реквизиты = "ЕстьОбеспечительныйПлатеж,ЕстьВыкупПредметовАренды";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, Реквизиты);
	
	Если ЗначенияРеквизитов.ЕстьОбеспечительныйПлатеж Тогда
		Результат.Добавить(Перечисления.ТипыПлатежейПоАренде.ОбеспечительныйПлатеж);
	КонецЕсли;

	Если ЗначенияРеквизитов.ЕстьВыкупПредметовАренды Тогда
		Результат.Добавить(Перечисления.ТипыПлатежейПоАренде.ВыкупнаяСтоимость);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

#Область Команды

// Добавляет команду создания справочника "Договоры аренды (лизинга)".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  
// Возвращаемое значение:
//	СтрокаТаблицыЗначений -
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	МетаданныеСправочника = Метаданные.Справочники.ДоговорыАренды;
	
	Если ПравоДоступа("Добавление", МетаданныеСправочника) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = МетаданныеСправочника.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(МетаданныеСправочника);
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОписаниеКоманды = Документы.ЗаключениеДоговораАренды.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, 1);
	Если ОписаниеКоманды <> Неопределено Тогда
		ОписаниеКоманды.Важность = "Важное";
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(ОписаниеКоманды, "Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует);
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(ОписаниеКоманды, "ПометкаУдаления", Ложь);
	КонецЕсли;

	ОписаниеКоманды = Документы.ПринятиеКУчетуОС2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, 2);
	Если ОписаниеКоманды <> Неопределено Тогда
		ОписаниеКоманды.Важность = "Важное";
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(ОписаниеКоманды, "Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует);
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(ОписаниеКоманды, "ПометкаУдаления", Ложь);
	КонецЕсли;
	
	ОписаниеКоманды = Документы.ПоступлениеУслугПоАренде.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, 3);
	Если ОписаниеКоманды <> Неопределено Тогда
		ОписаниеКоманды.Важность = "Важное";
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(ОписаниеКоманды, "Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует);
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(ОписаниеКоманды, "ПометкаУдаления", Ложь);
	КонецЕсли;

	ОписаниеКоманды = Документы.ИзменениеУсловийДоговораАренды.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, 4);
	Если ОписаниеКоманды <> Неопределено Тогда
		ОписаниеКоманды.Важность = "Важное";
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(ОписаниеКоманды, "Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует);
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(ОписаниеКоманды, "ПометкаУдаления", Ложь);
	КонецЕсли;
	
	ОписаниеКоманды = Документы.ВыкупАрендованныхОС.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, 5);
	Если ОписаниеКоманды <> Неопределено Тогда
		ОписаниеКоманды.Важность = "Важное";
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(ОписаниеКоманды, "Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует);
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(ОписаниеКоманды, "ЕстьВыкупПредметовАренды", Истина);
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(ОписаниеКоманды, "ПометкаУдаления", Ложь);
	КонецЕсли;
	
	ОписаниеКоманды = Документы.ПрекращениеДоговораАренды.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, 6);
	Если ОписаниеКоманды <> Неопределено Тогда
		ОписаниеКоманды.Важность = "Важное";
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(ОписаниеКоманды, "Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует);
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(ОписаниеКоманды, "ПометкаУдаления", Ложь);
	КонецЕсли;
	
	Документы.СписаниеБезналичныхДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, 7);
	Документы.РасходныйКассовыйОрдер.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, 8);
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, 9);
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВнеоборотныеАктивы.ДобавитьКомандуОтчетаВедомостьРасчетовПоДоговоруАренды(КомандыОтчетов);

	Отчеты.ПланФактныйАнализОплатИНачисленийПоАренде.ДобавитьКомандуОтчета(КомандыОтчетов, "ПоДоговоруКонтекст");
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	ДобавитьКомандуРасшифровкиРасчетаПроцентов(КомандыПечати);

КонецПроцедуры

// Добавляет команду расшифровки расчета процентов.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//   
// Возвращаемое значение:
//	СтрокаТаблицыЗначений -
Функция ДобавитьКомандуРасшифровкиРасчетаПроцентов(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Справочник.ДоговорыАренды";
	КомандаПечати.Идентификатор = "РасшифровкаРасчетаПроцентов";
	КомандаПечати.Представление = НСтр("ru = 'Расшифровка расчета процентов';
										|en = 'Drill down interest '");
	
	Возврат КомандаПечати;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияПартнеров КАК Т2 
	|	ПО Т2.Родитель = Т.Партнер
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т2.Партнер)
	|	И ЗначениеРазрешено(Т.Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// // Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область Печать

// Сформировать печатные формы объектов
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасшифровкаРасчетаПроцентов") Тогда
		
		ТабличныйДокумент = СформироватьРасшифровкуРасчетаПроцентов(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, Неопределено);
				
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"РасшифровкаРасчетаПроцентов",
			НСтр("ru = 'Расшифровка расчета процентов';
				|en = 'Drill down interest'"),
			ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ОсновноеСредство") И ЗначениеЗаполнено(Параметры.ОсновноеСредство) Тогда
		Параметры.Отбор.Вставить("НаправлениеДеятельности", ВнеоборотныеАктивыВызовСервера.НаправлениеДеятельности(Параметры.ОсновноеСредство));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ОсновноеСредство") И ЗначениеЗаполнено(Параметры.ОсновноеСредство) Тогда
		Параметры.Отбор.Вставить("НаправлениеДеятельности", ВнеоборотныеАктивыВызовСервера.НаправлениеДеятельности(Параметры.ОсновноеСредство));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область УчетныеМеханизмы

// 
// Возвращаемое значение:
// 	Массив из см. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики - 
Функция ПараметрыВыбораСтатейИАналитик() Экспорт
	
	ПараметрыВыбораСтатьиИАналитики = Новый Массив;
	
	// Услуги
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект";
	ПараметрыВыбора.Статья = "СтатьяРасходовУслуги";
	ПараметрыВыбора.ДоступностьПоОперации = Неопределено;
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходовУслуги";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяРасходовУслуги");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("АналитикаРасходовУслуги");
	
	ПараметрыВыбораСтатьиИАналитики.Добавить(ПараметрыВыбора);
	
	// Проценты
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект";
	ПараметрыВыбора.Статья = "СтатьяРасходовПроценты";
	ПараметрыВыбора.ДоступностьПоОперации = Неопределено;
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходовПроценты";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяРасходовПроценты");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("АналитикаРасходовПроценты");
	
	ПараметрыВыбораСтатьиИАналитики.Добавить(ПараметрыВыбора);
	
	Возврат ПараметрыВыбораСтатьиИАналитики;
	
КонецФункции

#КонецОбласти

#Область Печать

Функция СформироватьРасшифровкуРасчетаПроцентов(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, КомплектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасшифровкаРасчетаПроцентовАренды";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ДоговорыАренды.ПФ_MXL_РасшифровкаРасчетаПроцентов");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьСтрокаИтогоТаблицы = Макет.ПолучитьОбласть("СтрокаИтогоТаблицы");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");

	ДанныеРасшифровкиОбъектов = ДанныеРасшифровкиРасчетаПроцентов(МассивОбъектов);
	
	ПервыйДокумент = Истина;
	
	Для Каждого ДанныеРасшифровки Из ДанныеРасшифровкиОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ТипЗнч(ДанныеРасшифровки.Ссылка) = Тип("ДокументСсылка.ЗаключениеДоговораАренды")
			ИЛИ ТипЗнч(ДанныеРасшифровки.Ссылка) = Тип("ДокументСсылка.ИзменениеУсловийДоговораАренды")
			ИЛИ ТипЗнч(ДанныеРасшифровки.Ссылка) = Тип("ДокументСсылка.ВводОстатковВзаиморасчетовПоАренде") Тогда
			
			КонтекстРасшифровки = ДанныеРасшифровки.Ссылка;
			КонтекстПредставление = СтрШаблон(НСтр("ru = '(по документу %1)';
													|en = '(by document %1)'"), ДанныеРасшифровки.Ссылка);
			
		Иначе
			КонтекстРасшифровки = Неопределено;
			КонтекстПредставление = "";
		КонецЕсли;
		
		ПараметрыОбласти = Новый Структура;
		ПараметрыОбласти.Вставить("Контекст", КонтекстРасшифровки);
		ПараметрыОбласти.Вставить("КонтекстПредставление", КонтекстПредставление);
		ОбластьЗаголовок.Параметры.Заполнить(ПараметрыОбласти);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		#Область Шапка
		ОбластьШапка.Параметры.Заполнить(ДанныеРасшифровки.ДанныеШапки);
		ТабличныйДокумент.Вывести(ОбластьШапка);
		#КонецОбласти

		#Область Таблица
		
		ИтогиТаблицы = Новый Структура;
		ИтогиТаблицы.Вставить("СуммаПлатежа", 0);
		ИтогиТаблицы.Вставить("СуммаПлатежаБезНДС", 0);
		ИтогиТаблицы.Вставить("СуммаДолгаБезНДС", 0);
		ИтогиТаблицы.Вставить("Проценты", 0);

		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		Для Каждого СтрокаРасшифровки Из ДанныеРасшифровки.РасшифровкаРасчета Цикл
		
			ОбластьСтрокаТаблицы.Параметры.Заполнить(СтрокаРасшифровки);
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
		
			ИтогиТаблицы.СуммаПлатежа = ИтогиТаблицы.СуммаПлатежа + СтрокаРасшифровки.СуммаПлатежа;
			ИтогиТаблицы.СуммаПлатежаБезНДС = ИтогиТаблицы.СуммаПлатежаБезНДС + СтрокаРасшифровки.СуммаПлатежаБезНДС; 
			ИтогиТаблицы.Проценты = ИтогиТаблицы.Проценты + СтрокаРасшифровки.Проценты;
			
		КонецЦикла;
		
		ОбластьСтрокаИтогоТаблицы.Параметры.Заполнить(ИтогиТаблицы);
		ТабличныйДокумент.Вывести(ОбластьСтрокаИтогоТаблицы);
		
		#КонецОбласти

		ТабличныйДокумент.Вывести(ОбластьПодвал);

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеРасшифровки.Ссылка);

	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ДанныеРасшифровкиРасчетаПроцентов(МассивОбъектов) Экспорт
	
	ДанныеРасшифровкиОбъектов = Новый ТаблицаЗначений;
	ДанныеРасшифровкиОбъектов.Колонки.Добавить("Ссылка");
	ДанныеРасшифровкиОбъектов.Колонки.Добавить("ДанныеШапки");
	ДанныеРасшифровкиОбъектов.Колонки.Добавить("РасшифровкаРасчета");

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УсловияДоговоровАренды.Договор КАК Договор,
	|	УсловияДоговоровАренды.АктуальныеУсловияДоговора КАК АктуальныеУсловияДоговора
	|ПОМЕСТИТЬ УсловияДоговоровАренды
	|ИЗ
	|	РегистрСведений.УсловияДоговоровАренды.СрезПоследних(, Договор В (&МассивОбъектов)) КАК УсловияДоговоровАренды
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АктуальныеУсловияДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГрафикОплатУслуг.Ссылка КАК Ссылка,
	|
	|	СУММА(ГрафикОплатУслуг.УслугаПоАренде 
	|			+ ГрафикОплатУслуг.ОбеспечительныйПлатеж 
	|			+ ГрафикОплатУслуг.ВыкупнаяСтоимость) КАК Сумма
	|
	|ПОМЕСТИТЬ АвансовыеПлатежи
	|ИЗ
	|	Документ.ЗаключениеДоговораАренды.ГрафикОплатУслуг КАК ГрафикОплатУслуг
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ УсловияДоговоровАренды КАК УсловияДоговоровАренды
	|		ПО УсловияДоговоровАренды.АктуальныеУсловияДоговора = ГрафикОплатУслуг.Ссылка
	|ГДЕ
	|	ГрафикОплатУслуг.Дата < ГрафикОплатУслуг.Ссылка.ДатаНачалаАренды
	|
	|	И (ГрафикОплатУслуг.Ссылка В (&МассивОбъектов)
	|		ИЛИ НЕ УсловияДоговоровАренды.АктуальныеУсловияДоговора ЕСТЬ NULL)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикОплатУслуг.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГрафикОплатУслуг.Ссылка КАК Ссылка,
	|
	|	СУММА(ГрафикОплатУслуг.УслугаПоАренде 
	|			+ ГрафикОплатУслуг.ОбеспечительныйПлатеж 
	|			+ ГрафикОплатУслуг.ВыкупнаяСтоимость) КАК Сумма
	|
	|ИЗ
	|	Документ.ИзменениеУсловийДоговораАренды.ГрафикОплатУслуг КАК ГрафикОплатУслуг
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ УсловияДоговоровАренды КАК УсловияДоговоровАренды
	|		ПО УсловияДоговоровАренды.АктуальныеУсловияДоговора = ГрафикОплатУслуг.Ссылка
	|ГДЕ
	|	ГрафикОплатУслуг.Дата < ГрафикОплатУслуг.Ссылка.ДатаНачалаАренды
	|
	|	И (ГрафикОплатУслуг.Ссылка В (&МассивОбъектов)
	|		ИЛИ НЕ УсловияДоговоровАренды.АктуальныеУсловияДоговора ЕСТЬ NULL)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикОплатУслуг.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГрафикОплатУслуг.Ссылка КАК Ссылка,
	|
	|	СУММА(ГрафикОплатУслуг.УслугаПоАренде 
	|			+ ГрафикОплатУслуг.ОбеспечительныйПлатеж 
	|			+ ГрафикОплатУслуг.ВыкупнаяСтоимость) КАК Сумма
	|
	|ИЗ
	|	Документ.ВводОстатковВзаиморасчетовПоАренде.ГрафикОплатУслуг КАК ГрафикОплатУслуг
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ УсловияДоговоровАренды КАК УсловияДоговоровАренды
	|		ПО УсловияДоговоровАренды.АктуальныеУсловияДоговора = ГрафикОплатУслуг.Ссылка
	|ГДЕ
	|	ГрафикОплатУслуг.Дата < ГрафикОплатУслуг.Ссылка.ДатаНачалаАренды
	|
	|	И (ГрафикОплатУслуг.Ссылка В (&МассивОбъектов)
	|		ИЛИ НЕ УсловияДоговоровАренды.АктуальныеУсловияДоговора ЕСТЬ NULL)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикОплатУслуг.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА НЕ УсловияДоговоровАренды.АктуальныеУсловияДоговора ЕСТЬ NULL
	|			ТОГДА УсловияДоговоровАренды.Договор
	|		ИНАЧЕ ГрафикНачисленияПроцентов.Ссылка 
	|	КОНЕЦ КАК Ссылка,
	|	ГрафикНачисленияПроцентов.Дата КАК Дата,
	|	ГрафикНачисленияПроцентов.Проценты КАК Проценты,
	|
	|	ЕСТЬNULL(ГрафикОплатУслуг.УслугаПоАренде, 0) 
	|		+ ЕСТЬNULL(ГрафикОплатУслуг.ОбеспечительныйПлатеж, 0)
	|		+ ЕСТЬNULL(ГрафикОплатУслуг.ВыкупнаяСтоимость, 0) КАК СуммаПлатежа,
	|
	|	ЕСТЬNULL(ГрафикОплатУслуг.УслугаПоАренде, 0) 
	|		+ ЕСТЬNULL(ГрафикОплатУслуг.ОбеспечительныйПлатеж, 0)
	|		+ ЕСТЬNULL(ГрафикОплатУслуг.ВыкупнаяСтоимость, 0)
	|		- ЕСТЬNULL(ГрафикОплатУслуг.УслугаПоАрендеНДС, 0) 
	|		- ЕСТЬNULL(ГрафикОплатУслуг.ОбеспечительныйПлатежНДС, 0)
	|		- ЕСТЬNULL(ГрафикОплатУслуг.ВыкупнаяСтоимостьНДС, 0) КАК СуммаПлатежаБезНДС
	|ИЗ
	|	Документ.ЗаключениеДоговораАренды.ГрафикНачисленияПроцентов КАК ГрафикНачисленияПроцентов
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаключениеДоговораАренды.ГрафикОплатУслуг КАК ГрафикОплатУслуг
	|		ПО ГрафикОплатУслуг.Ссылка = ГрафикНачисленияПроцентов.Ссылка
	|			И ГрафикОплатУслуг.Дата = ГрафикНачисленияПроцентов.Дата
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ УсловияДоговоровАренды КАК УсловияДоговоровАренды
	|		ПО УсловияДоговоровАренды.АктуальныеУсловияДоговора = ГрафикНачисленияПроцентов.Ссылка
	|ГДЕ
	|	(ГрафикНачисленияПроцентов.Ссылка В (&МассивОбъектов)
	|		ИЛИ НЕ УсловияДоговоровАренды.АктуальныеУсловияДоговора ЕСТЬ NULL)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ УсловияДоговоровАренды.АктуальныеУсловияДоговора ЕСТЬ NULL
	|			ТОГДА УсловияДоговоровАренды.Договор
	|		ИНАЧЕ ГрафикНачисленияПроцентов.Ссылка 
	|	КОНЕЦ КАК Ссылка,
	|	ГрафикНачисленияПроцентов.Дата КАК Дата,
	|	ГрафикНачисленияПроцентов.Проценты КАК Проценты,
	|
	|	ЕСТЬNULL(ГрафикОплатУслуг.УслугаПоАренде, 0) 
	|		+ ЕСТЬNULL(ГрафикОплатУслуг.ОбеспечительныйПлатеж, 0)
	|		+ ЕСТЬNULL(ГрафикОплатУслуг.ВыкупнаяСтоимость, 0) КАК СуммаПлатежа,
	|
	|	ЕСТЬNULL(ГрафикОплатУслуг.УслугаПоАренде, 0) 
	|		+ ЕСТЬNULL(ГрафикОплатУслуг.ОбеспечительныйПлатеж, 0)
	|		+ ЕСТЬNULL(ГрафикОплатУслуг.ВыкупнаяСтоимость, 0)
	|		- ЕСТЬNULL(ГрафикОплатУслуг.УслугаПоАрендеНДС, 0) 
	|		- ЕСТЬNULL(ГрафикОплатУслуг.ОбеспечительныйПлатежНДС, 0)
	|		- ЕСТЬNULL(ГрафикОплатУслуг.ВыкупнаяСтоимостьНДС, 0) КАК СуммаПлатежаБезНДС
	|ИЗ
	|	Документ.ИзменениеУсловийДоговораАренды.ГрафикНачисленияПроцентов КАК ГрафикНачисленияПроцентов
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИзменениеУсловийДоговораАренды.ГрафикОплатУслуг КАК ГрафикОплатУслуг
	|		ПО ГрафикОплатУслуг.Ссылка = ГрафикНачисленияПроцентов.Ссылка
	|			И ГрафикОплатУслуг.Дата = ГрафикНачисленияПроцентов.Дата
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ УсловияДоговоровАренды КАК УсловияДоговоровАренды
	|		ПО УсловияДоговоровАренды.АктуальныеУсловияДоговора = ГрафикНачисленияПроцентов.Ссылка
	|ГДЕ
	|	(ГрафикНачисленияПроцентов.Ссылка В (&МассивОбъектов)
	|		ИЛИ НЕ УсловияДоговоровАренды.АктуальныеУсловияДоговора ЕСТЬ NULL)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ УсловияДоговоровАренды.АктуальныеУсловияДоговора ЕСТЬ NULL
	|			ТОГДА УсловияДоговоровАренды.Договор
	|		ИНАЧЕ ГрафикНачисленияПроцентов.Ссылка 
	|	КОНЕЦ КАК Ссылка,
	|	ГрафикНачисленияПроцентов.Дата КАК Дата,
	|	ГрафикНачисленияПроцентов.Проценты КАК Проценты,
	|
	|	ЕСТЬNULL(ГрафикОплатУслуг.УслугаПоАренде, 0) 
	|		+ ЕСТЬNULL(ГрафикОплатУслуг.ОбеспечительныйПлатеж, 0)
	|		+ ЕСТЬNULL(ГрафикОплатУслуг.ВыкупнаяСтоимость, 0) КАК СуммаПлатежа,
	|
	|	ЕСТЬNULL(ГрафикОплатУслуг.УслугаПоАренде, 0) 
	|		+ ЕСТЬNULL(ГрафикОплатУслуг.ОбеспечительныйПлатеж, 0)
	|		+ ЕСТЬNULL(ГрафикОплатУслуг.ВыкупнаяСтоимость, 0)
	|		- ЕСТЬNULL(ГрафикОплатУслуг.УслугаПоАрендеНДС, 0) 
	|		- ЕСТЬNULL(ГрафикОплатУслуг.ОбеспечительныйПлатежНДС, 0)
	|		- ЕСТЬNULL(ГрафикОплатУслуг.ВыкупнаяСтоимостьНДС, 0) КАК СуммаПлатежаБезНДС
	|ИЗ
	|	Документ.ВводОстатковВзаиморасчетовПоАренде.ГрафикНачисленияПроцентов КАК ГрафикНачисленияПроцентов
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковВзаиморасчетовПоАренде.ГрафикОплатУслуг КАК ГрафикОплатУслуг
	|		ПО ГрафикОплатУслуг.Ссылка = ГрафикНачисленияПроцентов.Ссылка
	|			И ГрафикОплатУслуг.Дата = ГрафикНачисленияПроцентов.Дата
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ УсловияДоговоровАренды КАК УсловияДоговоровАренды
	|		ПО УсловияДоговоровАренды.АктуальныеУсловияДоговора = ГрафикНачисленияПроцентов.Ссылка
	|ГДЕ
	|	(ГрафикНачисленияПроцентов.Ссылка В (&МассивОбъектов)
	|		ИЛИ НЕ УсловияДоговоровАренды.АктуальныеУсловияДоговора ЕСТЬ NULL)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА НЕ УсловияДоговоровАренды.АктуальныеУсловияДоговора ЕСТЬ NULL
	|			ТОГДА УсловияДоговоровАренды.Договор
	|		ИНАЧЕ ДанныеДокумента.Ссылка 
	|	КОНЕЦ КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ДатаНачалаАренды КАК ДатаНачалаАренды,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Контрагент.Представление КАК КонтрагентПредставление,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Договор.Представление КАК ДоговорПредставление,
	|	ДанныеДокумента.Договор.ВалютаВзаиморасчетов.Представление КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.ПриведеннаяСтоимость КАК ПриведеннаяСтоимость,
	|	ДанныеДокумента.СуммаСНДС КАК СуммаДоговора,
	|	ДанныеДокумента.СуммаСНДС - ДанныеДокумента.СуммаНДС СуммаДоговораБезНДС,
	|	ДанныеДокумента.ПроцентнаяСтавка КАК ПроцентнаяСтавка,
	|	ЕСТЬNULL(АвансовыеПлатежи.Сумма, 0) КАК АвансовыеПлатежи
	|ИЗ
	|	Документ.ЗаключениеДоговораАренды КАК ДанныеДокумента
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ УсловияДоговоровАренды КАК УсловияДоговоровАренды
	|		ПО УсловияДоговоровАренды.АктуальныеУсловияДоговора = ДанныеДокумента.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ АвансовыеПлатежи КАК АвансовыеПлатежи
	|		ПО АвансовыеПлатежи.Ссылка = ДанныеДокумента.Ссылка
	|ГДЕ
	|	НЕ ДанныеДокумента.ГрафикНачисленияПроцентовВведенВручную
	|
	|	И (ДанныеДокумента.Ссылка В (&МассивОбъектов)
	|		ИЛИ НЕ УсловияДоговоровАренды.АктуальныеУсловияДоговора ЕСТЬ NULL)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ УсловияДоговоровАренды.АктуальныеУсловияДоговора ЕСТЬ NULL
	|			ТОГДА УсловияДоговоровАренды.Договор
	|		ИНАЧЕ ДанныеДокумента.Ссылка 
	|	КОНЕЦ КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ДатаНачалаАренды КАК ДатаНачалаАренды,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Контрагент.Представление КАК КонтрагентПредставление,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Договор.Представление КАК ДоговорПредставление,
	|	ДанныеДокумента.Договор.ВалютаВзаиморасчетов.Представление КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.ПриведеннаяСтоимость КАК ПриведеннаяСтоимость,
	|	ДанныеДокумента.СуммаСНДС КАК СуммаДоговора,
	|	ДанныеДокумента.СуммаСНДС - ДанныеДокумента.СуммаНДС СуммаДоговораБезНДС,
	|	ДанныеДокумента.ПроцентнаяСтавка КАК ПроцентнаяСтавка,
	|	ЕСТЬNULL(АвансовыеПлатежи.Сумма, 0) КАК АвансовыеПлатежи
	|ИЗ
	|	Документ.ИзменениеУсловийДоговораАренды КАК ДанныеДокумента
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ УсловияДоговоровАренды КАК УсловияДоговоровАренды
	|		ПО УсловияДоговоровАренды.АктуальныеУсловияДоговора = ДанныеДокумента.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ АвансовыеПлатежи КАК АвансовыеПлатежи
	|		ПО АвансовыеПлатежи.Ссылка = ДанныеДокумента.Ссылка
	|ГДЕ
	|	НЕ ДанныеДокумента.ГрафикНачисленияПроцентовВведенВручную
	|
	|	И (ДанныеДокумента.Ссылка В (&МассивОбъектов)
	|		ИЛИ НЕ УсловияДоговоровАренды.АктуальныеУсловияДоговора ЕСТЬ NULL)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ УсловияДоговоровАренды.АктуальныеУсловияДоговора ЕСТЬ NULL
	|			ТОГДА УсловияДоговоровАренды.Договор
	|		ИНАЧЕ ДанныеДокумента.Ссылка 
	|	КОНЕЦ КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ДатаНачалаАренды КАК ДатаНачалаАренды,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Контрагент.Представление КАК КонтрагентПредставление,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Договор.Представление КАК ДоговорПредставление,
	|	ДанныеДокумента.Договор.ВалютаВзаиморасчетов.Представление КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.ПриведеннаяСтоимость КАК ПриведеннаяСтоимость,
	|	ДанныеДокумента.СуммаСНДС КАК СуммаДоговора,
	|	ДанныеДокумента.СуммаСНДС - ДанныеДокумента.СуммаНДС СуммаДоговораБезНДС,
	|	ДанныеДокумента.ПроцентнаяСтавка КАК ПроцентнаяСтавка,
	|	ЕСТЬNULL(АвансовыеПлатежи.Сумма, 0) КАК АвансовыеПлатежи
	|ИЗ
	|	Документ.ВводОстатковВзаиморасчетовПоАренде КАК ДанныеДокумента
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ УсловияДоговоровАренды КАК УсловияДоговоровАренды
	|		ПО УсловияДоговоровАренды.АктуальныеУсловияДоговора = ДанныеДокумента.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ АвансовыеПлатежи КАК АвансовыеПлатежи
	|		ПО АвансовыеПлатежи.Ссылка = ДанныеДокумента.Ссылка
	|ГДЕ
	|	НЕ ДанныеДокумента.ГрафикНачисленияПроцентовВведенВручную
	|
	|	И (ДанныеДокумента.Ссылка В (&МассивОбъектов)
	|		ИЛИ НЕ УсловияДоговоровАренды.АктуальныеУсловияДоговора ЕСТЬ NULL)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результат = Запрос.ВыполнитьПакет();

	ГрафикНачисленияПроцентов = Результат[Результат.ВГраница()-1].Выгрузить();

	Выборка = Результат[Результат.ВГраница()].Выбрать();
	Пока Выборка.Следующий() Цикл
	
		ДанныеРасшифровки = ДанныеРасшифровкиОбъектов.Добавить();
		ДанныеРасшифровки.Ссылка = Выборка.Ссылка;
		
		ДанныеШапки = Новый Структура;
		ДанныеРасшифровки.ДанныеШапки = ДанныеШапки; 
		ДанныеШапки.Вставить("Контрагент", Выборка.Контрагент);
		ДанныеШапки.Вставить("КонтрагентПредставление", Выборка.КонтрагентПредставление);
		ДанныеШапки.Вставить("Договор", Выборка.Договор);
		ДанныеШапки.Вставить("ДоговорПредставление", Выборка.ДоговорПредставление);
		ДанныеШапки.Вставить("ВалютаВзаиморасчетов", Выборка.ВалютаВзаиморасчетов);
		ДанныеШапки.Вставить("СуммаДоговора", Выборка.СуммаДоговора);
		ДанныеШапки.Вставить("СуммаДоговораБезНДС", Выборка.СуммаДоговораБезНДС);
		ДанныеШапки.Вставить("ПроцентнаяСтавка", Выборка.ПроцентнаяСтавка);
		ДанныеШапки.Вставить("ПриведеннаяСтоимость", Выборка.ПриведеннаяСтоимость);
	
		РасшифровкаРасчета = Новый ТаблицаЗначений;
		РасшифровкаРасчета.Колонки.Добавить("Дата");
		РасшифровкаРасчета.Колонки.Добавить("СуммаПлатежа");
		РасшифровкаРасчета.Колонки.Добавить("СуммаПлатежаБезНДС");
		РасшифровкаРасчета.Колонки.Добавить("СуммаДолгаБезНДС");
		РасшифровкаРасчета.Колонки.Добавить("ДнейДолга");
		РасшифровкаРасчета.Колонки.Добавить("Проценты");
		ДанныеРасшифровки.РасшифровкаРасчета = РасшифровкаРасчета;

		ПредыдущаяДата = Выборка.ДатаНачалаАренды;
		СуммаДолгаБезНДС = ДанныеШапки.ПриведеннаяСтоимость;
		
		Для Каждого СтрокаГрафика Из ГрафикНачисленияПроцентов Цикл
			
			Если СтрокаГрафика.Ссылка <> Выборка.Ссылка Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаРасшифровки = РасшифровкаРасчета.Добавить();
			СтрокаРасшифровки.Дата = СтрокаГрафика.Дата;
			СтрокаРасшифровки.СуммаПлатежа = СтрокаГрафика.СуммаПлатежа;
			СтрокаРасшифровки.СуммаПлатежаБезНДС = СтрокаГрафика.СуммаПлатежаБезНДС;
			СтрокаРасшифровки.СуммаДолгаБезНДС = СуммаДолгаБезНДС;
			СтрокаРасшифровки.Проценты = СтрокаГрафика.Проценты;
			
			СтрокаРасшифровки.ДнейДолга = Окр((СтрокаРасшифровки.Дата - ПредыдущаяДата) / 86400, 0);
			
			ПредыдущаяДата = СтрокаРасшифровки.Дата;
			СуммаДолгаБезНДС = Макс(СуммаДолгаБезНДС - СтрокаРасшифровки.СуммаПлатежаБезНДС + СтрокаРасшифровки.Проценты, 0);
			
		КонецЦикла;

	КонецЦикла;
	
	Возврат ДанныеРасшифровкиОбъектов;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ДоговорыАренды.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.6.32";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("28c657ed-d9b9-40e4-8b0f-e195f8230276");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ДоговорыАренды.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизиты:
	|- Ставка НДС
	|- Признак оплата в иностранной валюте
	|- Цель договора
	|- Учитывать предметы аренды в регл. учете
	|- Учитывать предметы аренды в упр. учете';
	|en = 'The handler populates the following attributes:
	| • VAT rate
	| • ""Foreign currency transaction"" flag
	| • Scope of agreement
	| • Record lease objects in local accounting
	| • Record lease objects in man. accounting'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.ДоговорыАренды.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.СтавкиНДС.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ДоговорыАренды.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ДоговорыАренды.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "МультиязычностьСервер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	//++ Локализация
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Патенты.ДобавитьПродажаПоПатентуВСтавкуБезНДС";
	НоваяСтрока.Порядок = "Любой";
	//-- Локализация

КонецПроцедуры

// Регистрирует данные к обработке при переходе на новую версию.
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Справочник.ДоговорыАренды";
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыАренды.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыАренды КАК ДоговорыАренды
	|ГДЕ
	|	(ДоговорыАренды.УдалитьСтавкаНДС2 = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|			И НЕ ДоговорыАренды.УдалитьСтавкаНДС = &ПустаяСтавкаНДС
	|		ИЛИ НЕ ДоговорыАренды.ОплатаВВалюте
	|			И (ДоговорыАренды.УдалитьПорядокОплаты = ЗНАЧЕНИЕ(Перечисление.УдалитьПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте)
	|				ИЛИ ДоговорыАренды.УдалитьПорядокОплаты = ЗНАЧЕНИЕ(Перечисление.УдалитьПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВВалюте))
	|		ИЛИ ДоговорыАренды.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровАренды.ПустаяСсылка))
	|
	|	ИЛИ ДоговорыАренды.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровАренды.ПустаяСсылка)
	|	ИЛИ НЕ ДоговорыАренды.УчитыватьПредметыАрендыВРеглУчете
	|		И НЕ ДоговорыАренды.УчитыватьПредметыАрендыВУпрУчете
	|	ИЛИ ДоговорыАренды.СпособОпределенияСтоимостиАктивов = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияСтоимостиПредметовАренды.ПустаяСсылка)";
	
	УчетНДСЛокализация.УстановитьПараметрЗапросаПустаяСтавкаНДСПеречислением(Запрос);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.ДоговорыАренды";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Для Каждого ЭлементСправочника Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементСправочника.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = ЭлементСправочника.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ДоговорыАренды - 
			
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ЭлементСправочника.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СправочникОбъект.ТипДоговора) Тогда
				СправочникОбъект.ТипДоговора = Перечисления.ТипыДоговоровАренды.Лизинг;
			КонецЕсли;

			Если НЕ СправочникОбъект.УчитыватьПредметыАрендыВРеглУчете
				И НЕ СправочникОбъект.УчитыватьПредметыАрендыВУпрУчете Тогда
				СправочникОбъект.УчитыватьПредметыАрендыВРеглУчете = Истина;
				СправочникОбъект.УчитыватьПредметыАрендыВУпрУчете = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СправочникОбъект.СпособОпределенияСтоимостиАктивов) Тогда
				СправочникОбъект.СпособОпределенияСтоимостиАктивов = Перечисления.СпособыОпределенияСтоимостиПредметовАренды.ПоФактическойСтоимости;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СправочникОбъект.УдалитьСтавкаНДС2) Тогда
				СправочникОбъект.УдалитьСтавкаНДС2 = УчетНДСЛокализация.СтавкаНДСПоПеречислению(СправочникОбъект.УдалитьСтавкаНДС);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СправочникОбъект.УдалитьПорядокОплаты) Тогда
				СправочникОбъект.ОплатаВВалюте = 
					(СправочникОбъект.УдалитьПорядокОплаты = Перечисления.УдалитьПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте
						ИЛИ СправочникОбъект.УдалитьПорядокОплаты = Перечисления.УдалитьПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВВалюте);
				СправочникОбъект.УдалитьПорядокОплаты = Неопределено;
			КонецЕсли;
			
			Если СправочникОбъект.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ЭлементСправочника.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ЭлементСправочника.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
