
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	ВидОтчета 	= Параметры.ВидОтчета;
	Область 	= Параметры.Область;
    Строки 		= Параметры.СписокСтрок; 
	ЗаполнитьДеревоСтрок();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоСтрок()
	
	ДеревоНастройкиСервер=РеквизитФормыВЗначение("ДеревоНастройки");
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	СтрокиОтчетов.ПорядковыйНомер КАК ПорядковыйНомер,
	             |	СтрокаКолонка.Строка,
	             |	СтрокаКолонка.Код,
	             |	СтрокаКолонка.Наименование,
	             |	СтрокаКолонка.ГруппаРаскрытия,
	             |	СтрокаКолонка.ГруппаРаскрытия.ВидАналитики1 КАК ВидАналитики1,
	             |	СтрокаКолонка.ГруппаРаскрытия.ВидАналитики2 КАК ВидАналитики2,
	             |	СтрокаКолонка.ГруппаРаскрытия.ВидАналитики3 КАК ВидАналитики3,
	             |	СтрокаКолонка.ГруппаРаскрытия.ВидАналитики4 КАК ВидАналитики4,
	             |	СтрокаКолонка.ГруппаРаскрытия.ВидАналитики5 КАК ВидАналитики5,
				 |	СтрокаКолонка.ГруппаРаскрытия.ВидАналитики6 КАК ВидАналитики6,
	             |	СтрокаКолонка.ВидИтога,
	             |	СтрокаКолонка.ТипЗначения,
	             |	СтрокаКолонка.Родитель,
	             |	СтрокиОтчетов.СуммироватьПодчиненные,
	             |	СтрокаКолонка.СпособОбработки,
	             |	СтрокаКолонка.ВидКурса,
	             |	СтрокаКолонка.ВидПоказателя,
	             |	СтрокаКолонка.ДействияПриАктуализации,
	             |	СтрокаКолонка.Внутригрупповой,
	             |	СтрокаКолонка.Оборотный,
	             |	СтрокаКолонка.НеМасштабируется,
	             |	СтрокаКолонка.Наименование1,
	             |	СтрокаКолонка.Наименование2,
	             |	СтрокаКолонка.ПриходРасход,
	             |	СтрокаКолонка.ОценкаПоложительногоОтклонения,
	             |	СтрокаКолонка.СтатьяБюджета,
	             |	СтрокаКолонка.Предназначение,
	             |	СтрокаКолонка.РазделениеПоПроектам
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		СтрокиОтчетов.Ссылка КАК Строка,
	             |		СтрокиОтчетов.Код КАК Код,
	             |		СтрокиОтчетов.Наименование КАК Наименование,
	             |		СтрокиОтчетов.ГруппаРаскрытия КАК ГруппаРаскрытия,
	             |		СтрокиОтчетов.ПорядковыйНомер КАК ПорядковыйНомер,
	             |		СтрокиОтчетов.ВидИтога КАК ВидИтога,
	             |		СтрокиОтчетов.ТипЗначения КАК ТипЗначения,
	             |		СтрокиОтчетов.Родитель КАК Родитель,
	             |		СтрокиОтчетов.СпособОбработки КАК СпособОбработки,
	             |		СтрокиОтчетов.ВидКурса КАК ВидКурса,
	             |		СтрокиОтчетов.ВидПоказателя КАК ВидПоказателя,
	             |		СтрокиОтчетов.ДействияПриАктуализации КАК ДействияПриАктуализации,
	             |		СтрокиОтчетов.Внутригрупповой КАК Внутригрупповой,
	             |		СтрокиОтчетов.Оборотный КАК Оборотный,
	             |		СтрокиОтчетов.НеМасштабируется КАК НеМасштабируется,
	             |		СтрокиОтчетов.Наименование1 КАК Наименование1,
	             |		СтрокиОтчетов.Наименование2 КАК Наименование2,
	             |		СтрокиОтчетов.ПриходРасход КАК ПриходРасход,
	             |		ВЫБОР
	             |			КОГДА СтрокиОтчетов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств)
	             |				ТОГДА СтрокиОтчетов.СтатьяДвиженияДенежныхСредств
	             |			КОГДА СтрокиОтчетов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов)
	             |				ТОГДА СтрокиОтчетов.СтатьяДоходовИРасходов
	             |			КОГДА СтрокиОтчетов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов)
	             |				ТОГДА СтрокиОтчетов.СтатьяДвиженияРесурсов
	             |			ИНАЧЕ НЕОПРЕДЕЛЕНО
	             |		КОНЕЦ КАК СтатьяБюджета,
	             |		СтрокиОтчетов.ОценкаПоложительногоОтклонения КАК ОценкаПоложительногоОтклонения,
	             |		ВЫБОР
	             |			КОГДА СтрокиОтчетов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.ПустаяСсылка)
	             |				ТОГДА ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.ПроизвольныеДанные)
	             |			ИНАЧЕ СтрокиОтчетов.Предназначение
	             |		КОНЕЦ КАК Предназначение,
	             |		СтрокиОтчетов.РазделениеПоПроектам КАК РазделениеПоПроектам
	             |	ИЗ
	             |		Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	             |	ГДЕ
	             |		СтрокиОтчетов.Владелец = &ВидОтчета
	             |		И НЕ СтрокиОтчетов.ПометкаУдаления) КАК СтрокаКолонка
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	             |		ПО СтрокаКолонка.Строка = СтрокиОтчетов.Ссылка
				 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСоставаОбластейВидовОтчетов КАК НастройкиСоставаОбластейВидовОтчетов
				 |		ПО СтрокаКолонка.Строка = НастройкиСоставаОбластейВидовОтчетов.Показатель
				 |			И (НастройкиСоставаОбластейВидовОтчетов.КлючОбласти <> &Область)
	             |ГДЕ
	             |	СтрокиОтчетов.Владелец = &ВидОтчета
	             |	И НЕ СтрокиОтчетов.ПометкаУдаления 	             
				 |
	             |УПОРЯДОЧИТЬ ПО
	             |	ПорядковыйНомер ИЕРАРХИЯ";
				 
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	Запрос.УстановитьПараметр("Область",Область);

	
	ВыводимаяСтрокаОтчета=Справочники.СтрокиОтчетов.ПустаяСсылка();
	ТекущаяСтрокаДерева=Неопределено;
	
	Результат=Запрос.Выполнить().Выбрать();
	
	СоответствиеСтрок=Новый Соответствие;
	СоответствиеРодителей=Новый Соответствие;
	
	СписокАналитик=Новый Массив;
	
	ЕстьСтрокиБюджетов=Ложь;
	
	ДеревоНастройкиСервер_Строки = ДеревоНастройкиСервер.Строки.Добавить();
	ДеревоНастройкиСервер_Строки.Наименование = Нстр("ru = 'Доступные строки'");
	
	
	Пока Результат.Следующий() Цикл
		
		Если Результат.Строка<>ВыводимаяСтрокаОтчета Тогда
			
			ТекущаяСтрокаДерева=СоответствиеСтрок[Результат.Строка];
			
			Если ТекущаяСтрокаДерева=Неопределено Тогда
				
				Если Результат.Родитель=Справочники.СтрокиОтчетов.ПустаяСсылка() Тогда
					
					ТекущаяСтрокаДерева=ДеревоНастройкиСервер_Строки.Строки.Добавить();
					
				Иначе
					
					СтрокаРодитель=СоответствиеРодителей[Результат.Родитель];
					
					Если СтрокаРодитель=Неопределено Тогда
												
						СтрокаРодитель=ДеревоНастройкиСервер.Строки.Найти(Результат.Родитель,"Строка",Истина);
						СоответствиеРодителей.Вставить(Результат.Родитель,СтрокаРодитель);
						
					КонецЕсли;
					
					ТекущаяСтрокаДерева=СтрокаРодитель.Строки.Добавить();
					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ТекущаяСтрокаДерева,Результат);
				ТекущаяСтрокаДерева.Код=СокрЛП(Результат.Код);
				СоответствиеСтрок.Вставить(Результат.Строка,ТекущаяСтрокаДерева);
				
			КонецЕсли;
			
			ВыводимаяСтрокаОтчета=Результат.Строка;
			
		КонецЕсли;
				
		Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			Если ЗначениеЗаполнено(ТекущаяСтрокаДерева["ВидАналитики"+Индекс]) И СписокАналитик.Найти("ДеревоНастройкиСтруктурыВидАналитики"+Индекс)=Неопределено Тогда
				
				СписокАналитик.Добавить("ДеревоНастройкиСтруктурыВидАналитики"+Индекс);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТекущаяСтрокаДерева.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств
			ИЛИ ТекущаяСтрокаДерева.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов
			ИЛИ ТекущаяСтрокаДерева.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов Тогда
			
			ЕстьСтрокиБюджетов=Истина;
			
		КонецЕсли;

		Если НЕ Строки.НайтиПоЗначению(ТекущаяСтрокаДерева.Строка) = Неопределено Тогда
			 ТекущаяСтрокаДерева.Выбран = Истина;
		КонецЕсли;	
		
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоНастройкиСервер,"ДеревоНастройки");	
				
КонецПроцедуры // ЗаполнитьДеревоСтрок()

&НаКлиенте
Процедура Выбрать(Команда)
	
	СтруктураПараметров = ПолучитьВыбранныеСтроки();
	Закрыть(СтруктураПараметров);

КонецПроцедуры 

Функция  ПолучитьВыбранныеСтроки()
	
	ДеревоСтрок_ = РеквизитФормыВЗначение("ДеревоНастройки");
	СтруктураПараметров = Новый Структура;
	МассивВыбранных = Новый Массив;
	ПолучитьМассивВыбранныхРекурсивно(ДеревоСтрок_.Строки,МассивВыбранных);
	СтруктураПараметров.Вставить("ВыбранныеСтроки",МассивВыбранных);
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура ПолучитьМассивВыбранныхРекурсивно(СтрокиДЗ,МассивВыбранных)
	
	Для Каждого СтрокаДерева Из СтрокиДЗ Цикл
		
		Если СтрокаДерева.Выбран И НЕ СокрЛП(СтрокаДерева.Наименование) = Нстр("ru = 'Доступные строки'") Тогда
			 МассивВыбранных.Добавить(СтрокаДерева.Строка);
		КонецЕсли;
				
		Если СтрокаДерева.Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПолучитьМассивВыбранныхРекурсивно(СтрокаДерева.Строки,МассивВыбранных);
		
	КонецЦикла;
	
КонецПроцедуры	









