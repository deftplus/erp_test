
&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ИзменитьКодСтроки(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ИзменитьКодСтроки(-1);
	
КонецПроцедуры


&НаКлиенте
Процедура ИзменитьКодСтроки(Направление)
	
	ТекСтрока = Элементы.Список.ТекущаяСтрока;
	
	Если ТекСтрока <> Неопределено Тогда
		ИзменитьПорядковыйНомер(Направление);
	КонецЕсли;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПорядковыйНомер(Направление) Экспорт
	
	ТекущийНомер    = Элементы.Список.ТекущаяСтрока.Код;
	Родитель =       Элементы.Список.ТекущаяСтрока.Родитель;	
	СписокКодов   = Новый СписокЗначений;	
	СтрокиОтчетов  = Справочники.ОбластиДанныхВидовОтчетов;
	ВыборкаСтроки = СтрокиОтчетов.Выбрать(Родитель, , , "Код Убыв");
	
	Пока ВыборкаСтроки.Следующий() Цикл
		СписокКодов.Добавить(ВыборкаСтроки.Код);
	КонецЦикла;
	
	Если СписокКодов.Количество() < 2  Тогда
		// На данном уровне имеется только один элемент или группа справочника.
		// Игнорируем действие пользователя.
		Возврат;
	КонецЕсли; 
	
	ПорядковыйНомер = СписокКодов.Индекс(СписокКодов.НайтиПоЗначению(Элементы.Список.ТекущаяСтрока.Код));
	
	Если (ПорядковыйНомер = 0) И (Направление < 0) Тогда
		// Попытка перемещения первого по порядку элемента вверх.
		ИндексЭлементаЗамены = СписокКодов.Количество() - 1;
	ИначеЕсли (ПорядковыйНомер = СписокКодов.Количество() - 1) И (Направление > 0) Тогда
		// Попытка перемещения последнего по порядку элемента вниз.
		ИндексЭлементаЗамены = 0;
	Иначе
		// в иных случаях
		ИндексЭлементаЗамены = ПорядковыйНомер + Направление;
	КонецЕсли;
	
	ЭлементЗамены     = Справочники.ОбластиДанныхВидовОтчетов.НайтиПоКоду(СписокКодов.Получить(ИндексЭлементаЗамены).Значение,,Родитель);
	
	Попытка
		НачатьТранзакцию();
		//Промежуточная запись текущего элемента с уникальным кодом
		ТекСтрока = Элементы.Список.ТекущаяСтрока;
		ТекОбъект = ТекСтрока.ПолучитьОбъект();
		ЭлементЗаменыОбъект=ЭлементЗамены.ПолучитьОбъект();
		СтарыйКод=ТекОбъект.Код;
		ТекОбъект.Код= ЭлементЗамены.Код;
		ЭлементЗаменыОбъект.Код="9999999";
		ЭлементЗаменыОбъект.Записать();
		ТекОбъект.Записать();
		ЭлементЗаменыОбъект.Код=СтарыйКод;
		ЭлементЗаменыОбъект.Записать();			
		ЗафиксироватьТранзакцию();	
	Исключение
		
		СтрокаШаблона = НСтр("ru = 'Не удалось записать элемент справочника %1'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ОписаниеОшибки()));
		КонецЕсли;
		
		Возврат;
	КонецПопытки;	
КонецПроцедуры // ИзменитьКод()

&НаКлиенте
Процедура ВидОтчетаПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(Список.Отбор,"Владелец",ВидОтчета,ВидСравненияКомпоновкиДанных.Равно,,Истина);
    Элементы.Список.Доступность = ЗначениеЗаполнено(ВидОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщегоНазначенияКлиентСерверУХ.УстановитьЭлементОтбора(Список.Отбор,"Владелец",ВидОтчета,ВидСравненияКомпоновкиДанных.Равно,,Истина);
    Элементы.Список.Доступность = ЗначениеЗаполнено(ВидОтчета);

		
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	Если Параметры.Отбор.Свойство("Владелец") Тогда
		 ВидОтчета =  Параметры.Отбор.Владелец;
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(ВидОтчета) Тогда
		 Настройки["ВидОтчета"] = ВидОтчета;
	КонецЕсли;	
	
КонецПроцедуры


