
Функция ДобавитьЭлемент(Параметры = Неопределено) Экспорт
	
	Объект = ДобавитьЭлементОбъект(Параметры);
	Объект.Записать();
	
	Возврат Объект.Ссылка;
	
Конецфункции

Функция ДобавитьЭлементОбъект(Параметры = Неопределено) Экспорт
	
	Объект = Справочники.ПротоколируемыеСобытия.СоздатьЭлемент();
	
	Если НЕ Параметры = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Объект, Параметры);
	КонецЕсли;
	
	Объект.Автор=ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	
	Возврат Объект;
	
КонецФункции

Функция ПолучитьШаблонТаблицыСобытий() Экспорт
	
	Объект = Справочники.ПротоколируемыеСобытия.СоздатьЭлемент();
	Возврат Объект.Записи.ВыгрузитьКолонки();
		
КонецФункции // ПолучитьШаблонТаблицыСобытий() 

Функция Печать(Ссылка, ПоказыватьТехническуюИнформацию=Ложь) Экспорт
	
	Схема = Справочники.ПротоколируемыеСобытия.ПолучитьМакет("ПользовательскийМакет");
	Схема.Параметры.Найти("Ссылка").Значение = Ссылка;
	
	Настройки = Схема.НастройкиПоУмолчанию;
	Для Каждого ЭлементВыбора Из Настройки.Выбор.Элементы Цикл
		Если Строка(ЭлементВыбора.Поле) = "ТехническаяИнформацияСтрокаВнутр" Тогда
			ЭлементВыбора.Использование = ПоказыватьТехническуюИнформацию;
		КонецЕсли;
	КонецЦикла;
	
	ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанных");
	
	Компоновщик = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	МакетКомпоновки = Компоновщик.Выполнить(Схема, Настройки, ДанныеРасшифровки,, ТипГенератора);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	
	Возврат ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
Конецфункции

Функция ОтобразитьПротокол(Ссылка,СтруктураМакетов,ПоказыватьТехническуюИнформацию=Ложь) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ПротоколируемыеСобытияЗаписи.Событие КАК СТРОКА(1000)) КАК Событие,
	|	ВЫРАЗИТЬ(ПротоколируемыеСобытияЗаписи.Сообщение КАК СТРОКА(1000)) КАК Сообщение,
	|	ПротоколируемыеСобытияЗаписи.ТипЗаписи,
	|	ПротоколируемыеСобытияЗаписи.ТехническаяИнформацияСтрокаВнутр КАК ТехническаяИнформация,
	|	ВЫБОР
	|		КОГДА ПротоколируемыеСобытияЗаписи.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПротоколируемыхСобытий.ОШИБКА)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Ошибка,
	|	ЕСТЬNULL(НастраиваемыйОтчет.ВидОтчета, НЕОПРЕДЕЛЕНО) КАК ВидОтчета,
	|	ЕСТЬNULL(НастраиваемыйОтчет.ПравилоОбработки, НЕОПРЕДЕЛЕНО) КАК ПравилоОбработки,
	|	ЕСТЬNULL(НастраиваемыйОтчет.ПравилоПроверки, НЕОПРЕДЕЛЕНО) КАК ПравилоПроверки,
	|	ПротоколируемыеСобытияЗаписи.ОбъектДанных,
	|	ТИПЗНАЧЕНИЯ(ПротоколируемыеСобытияЗаписи.ОбъектДанных) КАК ТипОбъекта,
	|	ЕСТЬNULL(НастраиваемыйОтчет.ИспользуемаяИБ.ТипБД, НЕОПРЕДЕЛЕНО) КАК ТипБД,
	|	ПротоколируемыеСобытияЗаписи.ОбъектМетаданных
	|ИЗ
	|	Справочник.ПротоколируемыеСобытия.Записи КАК ПротоколируемыеСобытияЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|		ПО ПротоколируемыеСобытияЗаписи.Ссылка.Объект = НастраиваемыйОтчет.Ссылка
	|ГДЕ
	|	ПротоколируемыеСобытияЗаписи.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ошибка УБЫВ
	|ИТОГИ ПО
	|	Ошибка";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Результат=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Ошибка");
	
	ТабДок=Новый ТабличныйДокумент;
	
	Пока Результат.Следующий() Цикл
		
		ТабДок.Вывести(?(Результат.Ошибка,СтруктураМакетов.ОбластьТипЗаписиОшибка,СтруктураМакетов.ОбластьТипЗаписиДоп));
		
		ТабДок.НачатьГруппуСтрок(,Результат.Ошибка);
		
		ДетальныеЗаписи=Результат.Выбрать();
				
		Пока ДетальныеЗаписи.Следующий() Цикл
			
			Если ДетальныеЗаписи.Событие="УправлениеХолдингом.ДублированиеДанныхПриСинхронизации" Тогда
				
				СтруктураМакетов.ОбластьЗаписиОшибка.Параметры.Сообщение=ДетальныеЗаписи.Сообщение;
				ТабДок.Вывести(СтруктураМакетов.ОбластьЗаписиОшибка);
				
				Если ПоказыватьТехническуюИнформацию Тогда
					
					ТабДок.НачатьГруппуСтрок(,Ложь);
					
					СоответствиеТаблицДублей=ЗначениеИзСтрокиВнутр(ДетальныеЗаписи.ТехническаяИнформация);
					Линия1 = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
					
					Для Каждого КлючИЗначение ИЗ СоответствиеТаблицДублей Цикл
						
						СтруктураМакетов.ОбластьКлючевогоРеквизита.Параметры.ИмяРеквизита			= "Настройка соответствия:";
						СтруктураМакетов.ОбластьКлючевогоРеквизита.Параметры.ЗначениеРеквизита		= КлючИЗначение.Ключ;
						СтруктураМакетов.ОбластьКлючевогоРеквизита.Параметры.ЗначениеРасшифровки	= КлючИЗначение.Ключ;
						
						ТабДок.Вывести(СтруктураМакетов.ОбластьКлючевогоРеквизита);
						
						СтруктураМакетов.ОбластьКлючевогоРеквизита.Параметры.ИмяРеквизита			= "Дублирующиеся строки";
						СтруктураМакетов.ОбластьКлючевогоРеквизита.Параметры.ЗначениеРеквизита		= "";
						СтруктураМакетов.ОбластьКлючевогоРеквизита.Параметры.ЗначениеРасшифровки	= "";
						
						ТабДок.Вывести(СтруктураМакетов.ОбластьКлючевогоРеквизита);
											
						ПостроительОтчета=Новый ПостроительОтчета;
						ТабличныйДокумент=Новый ТабличныйДокумент;
												
						ИсточникДанных=Новый ОписаниеИсточникаДанных(КлючИЗначение.Значение);
						
						ПостроительОтчета.ИсточникДанных=ИсточникДанных;
									
						ПостроительОтчета.ВыводитьЗаголовокОтчета=Ложь;
						Линия=Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная,1);
						
						ПостроительОтчета.Вывести(ТабличныйДокумент);
						
						ТабличныйДокумент.Область(2,2, ТабличныйДокумент.ВысотаТаблицы-2, ТабличныйДокумент.ШиринаТаблицы).Обвести(Линия,Линия,Линия,Линия);
									
						ТабДок.Вывести(ТабличныйДокумент);
						
					КонецЦикла;
					
					ТабДок.ЗакончитьГруппуСтрок();
					
				КонецЕсли;
				
			Иначе
				
				ОбластьЗаписи=?(Результат.Ошибка,СтруктураМакетов.ОбластьЗаписиОшибка,СтруктураМакетов.ОбластьЗаписиДоп);
				ЗаполнитьЗначенияСвойств(ОбластьЗаписи.Параметры,ДетальныеЗаписи);
				
				Если ЗначениеЗаполнено(ДетальныеЗаписи.ОбъектДанных) Тогда
					
					СтруктураПараметров=Новый Структура;
					СтруктураПараметров.Вставить("ОбъектДанных",	ДетальныеЗаписи.ОбъектДанных);
					СтруктураПараметров.Вставить("ОбъектМетаданных",ДетальныеЗаписи.ОбъектМетаданных);
					
					Если ЗначениеЗаполнено(ДетальныеЗаписи.ВидОтчета) Тогда
						
						СтруктураПараметров.Вставить("ВидОтчета",		ДетальныеЗаписи.ВидОтчета);
						СтруктураПараметров.Вставить("ПравилоОбработки",ДетальныеЗаписи.ПравилоОбработки);
						СтруктураПараметров.Вставить("ПравилоПроверки",	ДетальныеЗаписи.ПравилоПроверки);
						СтруктураПараметров.Вставить("ТипБД",			ДетальныеЗаписи.ТипБД);
						
					КонецЕсли;
					
					ОбластьЗаписи.Параметры.ДанныеРасчета=СтруктураПараметров;
					
				КонецЕсли;
				
				ТабДок.Вывести(ОбластьЗаписи);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТабДок.ЗакончитьГруппуСтрок();
			
	КонецЦикла;
	
	Возврат ТабДок;
		
КонецФункции // ОтобразитьПротокол()

// Возвращает сводной протокол по одному или нескольким объектам и событиям
// Параметры:
// МассивПротоколируемыхОбъектов: массив структур следующего вида
// - Ссылка: ссылка на объект, для которого выводится протокол.
// - КлючевыеРеквизиты: структура, содержащая организацию, период, сценарий, основныю валюту, вид отчета. 
//		Если эти значения можно получить из протоколируемого объекта, этот элемент может отсутствовать.
//		При наличии обоих элементов, для отображения ключевых реквизитов используются значения последнего
// - МассивСобытий: массив структур следующего вида:
//		- Комментарий: поясняющая надпись, предваряющая вывод набора записей события
//		- Протокол: элемент справочника "ПротоколируемыеСобытия", записи которого будут выведены в сводный протокол 
//
Функция ПолучитьМассивПротоколов(МассивПротоколируемыхОбъектов, ПоказыватьТехническуюИнформацию=Ложь) Экспорт
	
	Макет 					= Обработки.ОтображениеПротоколируемыхСобытий.ПолучитьМакет("Макет");
	
	ОбластьКлючевогоРеквизита	= Макет.ПолучитьОбласть("ОбластьКлючевогоРеквизита");
	ОбластьСсылка				= Макет.ПолучитьОбласть("ОбластьСсылка");
	ОбластьКомментарий			= Макет.ПолучитьОбласть("ОбластьКомментарий");
	ОбластьРазделитель			= Макет.ПолучитьОбласть("ОбластьРазделитель");
	ОбластьИмяФайла				= Макет.ПолучитьОбласть("ОбластьФайл");
	
	СтруктураМакетов=Новый Структура;
	СтруктураМакетов.Вставить("ОбластьТипЗаписиОшибка",Макет.ПолучитьОбласть("ОбластьТипЗаписиОшибка"));
	СтруктураМакетов.Вставить("ОбластьТипЗаписиДоп",Макет.ПолучитьОбласть("ОбластьТипЗаписиДоп"));
	СтруктураМакетов.Вставить("ОбластьКлючевогоРеквизита",ОбластьКлючевогоРеквизита);
	
	Если ПоказыватьТехническуюИнформацию Тогда
		
		СтруктураМакетов.Вставить("ОбластьЗаписиОшибка",Макет.ПолучитьОбласть("ОбластьЗаписиОшибка|Полный"));
		СтруктураМакетов.Вставить("ОбластьЗаписиДоп",	Макет.ПолучитьОбласть("ОбластьЗаписиДоп|Полный"));
		
	Иначе
		
		СтруктураМакетов.Вставить("ОбластьЗаписиОшибка",Макет.ПолучитьОбласть("ОбластьЗаписиОшибка|Сокращенный"));
		СтруктураМакетов.Вставить("ОбластьЗаписиДоп",	Макет.ПолучитьОбласть("ОбластьЗаписиДоп|Сокращенный"));
		
	КонецЕсли;

	МассивПротоколов=Новый Соответствие;
	
	ТаблицаПротоколов=Новый ТаблицаЗначений;
	ТаблицаПротоколов.Колонки.Добавить("Ссылка");
	ТаблицаПротоколов.Колонки.Добавить("Протокол");
	ТаблицаПротоколов.Колонки.Добавить("ПолноеИмяФайла");
	ТаблицаПротоколов.Колонки.Добавить("ВерсияХранимогоФайла");
	ТаблицаПротоколов.Колонки.Добавить("КлючевыеРеквизиты");
	ТаблицаПротоколов.Колонки.Добавить("Организация");
	ТаблицаПротоколов.Колонки.Добавить("ТабДокумент");
	ТаблицаПротоколов.Колонки.Добавить("ВидОтчета");
	
	Для Каждого ПротоколируемыйОбъект ИЗ МассивПротоколируемыхОбъектов Цикл
		
		Для Каждого ИнформацияОСобытии Из ПротоколируемыйОбъект.МассивСобытий Цикл
			
			Если НЕ (ПоказыватьТехническуюИнформацию ИЛИ ИнформацияОСобытии.Свойство("ЕстьОшибки")) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НоваяСтрока						= ТаблицаПротоколов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ПротоколируемыйОбъект);
			
			НоваяСтрока.Протокол			= ИнформацияОСобытии.Протокол;
			
			ИнформацияОСобытии.Свойство("Протокол",					НоваяСтрока.Протокол);
			ИнформацияОСобытии.Свойство("ИмяФайла",					НоваяСтрока.ПолноеИмяФайла);
			ПротоколируемыйОбъект.Свойство("КлючевыеРеквизиты",		НоваяСтрока.КлючевыеРеквизиты);
			
			Если ЗначениеЗаполнено(НоваяСтрока.ВерсияХранимогоФайла) Тогда 	
				
				НоваяСтрока.ПолноеИмяФайла=НоваяСтрока.ВерсияХранимогоФайла.ПолноеИмяФайла;
				
			Иначе // Возможно, не был сформирован протокол
				
				ДанныеЗагрузки=ХранимыеФайлыУХ.ПолучитьВерсиюФайлаПоОбъекту(ПротоколируемыйОбъект.Ссылка);
				
				Если НЕ ДанныеЗагрузки=Неопределено Тогда
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ДанныеЗагрузки);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТаблицаПротоколов.Количество()=0 Тогда
		
		ПолеТабличногоДокумента = Новый ТабличныйДокумент;
		ОбластьКомментарий.Параметры.Комментарий="Ошибок не обнаружено. Подробности в полном протоколе.";
		ПолеТабличногоДокумента.Вывести(ОбластьКомментарий);
		
		НоваяСтрока=ТаблицаПротоколов.Добавить();
		НоваяСтрока.ТабДокумент=ПолеТабличногоДокумента;
				
		Возврат ТаблицаПротоколов;
		
	КонецЕсли;
		
	ТаблицаПротоколов.Сортировать("ПолноеИмяФайла");
		
	Для Каждого СтрПротокол ИЗ ТаблицаПротоколов Цикл
				
		ПолеТабличногоДокумента = Новый ТабличныйДокумент;
		
		СтруктураПараметров=Новый Структура("ВидОтчета,Организация,ПериодОтчета,Сценарий,ОсновнаяВалюта,ФайлИмпорта,ПравилоОбработки,ШаблонКорректировки,ПравилоЗаполнения,ИспользуемаяИБ");
		
		///////////////////////////////////////////////////////////////////////////////////////////////
		// Вывод информации о файле
		
		Если НЕ ПустаяСтрока(СтрПротокол.ПолноеИмяФайла) Тогда
			
			ОбластьИмяФайла.Параметры.ТекстИмяФайла="Файл: "+СтрПротокол.ПолноеИмяФайла;
			
			Если ЗначениеЗаполнено(СтрПротокол.ВерсияХранимогоФайла) Тогда
				
				ОбластьИмяФайла.Параметры.РасшифровкаФайла=Новый Структура("ВерсияХранимогоФайла",СтрПротокол.ВерсияХранимогоФайла);
				
			Иначе
				
				ОбластьИмяФайла.Параметры.РасшифровкаФайла=Новый Структура("ИмяФайла",СтрПротокол.ПолноеИмяФайла);
				
			КонецЕсли;
			
			ПолеТабличногоДокумента.Вывести(ОбластьИмяФайла);
			
		КонецЕсли;
		
		Если ТипЗнч(СтрПротокол.Ссылка)=Тип("СправочникСсылка.ХранимыеФайлыОрганизацийПрисоединенныеФайлы") Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураПараметров,СтрПротокол);
			
		ИначеЕсли ЗначениеЗаполнено(СтрПротокол.Ссылка) Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураПараметров,СтрПротокол.Ссылка);
			
		КонецЕсли;
		
		Если НЕ ТипЗнч(СтрПротокол.Ссылка)=Тип("СправочникСсылка.СеансыОбменаДанными") Тогда
			ОбластьСсылка.Параметры.Ссылка=СтрПротокол.Ссылка;
			ПолеТабличногоДокумента.Вывести(ОбластьСсылка);
		КонецЕсли;
		
		ПолеТабличногоДокумента.Вывести(ОбластьРазделитель);
					
		Если ТипЗнч(СтрПротокол.КлючевыеРеквизиты)=Тип("Структура") Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураПараметров,СтрПротокол.КлючевыеРеквизиты);
			
		КонецЕсли;
						
		Если ЗначениеЗаполнено(СтруктураПараметров.ВидОтчета) Тогда
			
			ОбластьКлючевогоРеквизита.Параметры.ИмяРеквизита		= "Вид отчета:";
			ОбластьКлючевогоРеквизита.Параметры.ЗначениеРеквизита	= СтруктураПараметров.ВидОтчета;
			ОбластьКлючевогоРеквизита.Параметры.ЗначениеРасшифровки	= СтруктураПараметров.ВидОтчета;
			
			ПолеТабличногоДокумента.Вывести(ОбластьКлючевогоРеквизита);
			
		КонецЕсли;
		
		Если ПоказыватьТехническуюИнформацию Тогда
			
			Если ЗначениеЗаполнено(СтруктураПараметров.ПравилоОбработки) Тогда
				
				ОбластьКлючевогоРеквизита.Параметры.ИмяРеквизита		= "Правило обработки:";
				ОбластьКлючевогоРеквизита.Параметры.ЗначениеРеквизита	= СтруктураПараметров.ПравилоОбработки;
				ОбластьКлючевогоРеквизита.Параметры.ЗначениеРасшифровки	= СтруктураПараметров.ПравилоОбработки;

				ПолеТабличногоДокумента.Вывести(ОбластьКлючевогоРеквизита);
				
			ИначеЕсли ЗначениеЗаполнено(СтруктураПараметров.ПравилоЗаполнения) Тогда
				
				ОбластьКлючевогоРеквизита.Параметры.ИмяРеквизита		= "Правило заполнения:";
				ОбластьКлючевогоРеквизита.Параметры.ЗначениеРеквизита	= СтруктураПараметров.ПравилоЗаполнения;
				ОбластьКлючевогоРеквизита.Параметры.ЗначениеРасшифровки	= СтруктураПараметров.ПравилоЗаполнения;
				
				ПолеТабличногоДокумента.Вывести(ОбластьКлючевогоРеквизита);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураПараметров.ИспользуемаяИБ) Тогда
				
				ОбластьКлючевогоРеквизита.Параметры.ИмяРеквизита		= "Используемая ИБ:";
				ОбластьКлючевогоРеквизита.Параметры.ЗначениеРеквизита	= СтруктураПараметров.ИспользуемаяИБ;
				ОбластьКлючевогоРеквизита.Параметры.ЗначениеРасшифровки	= СтруктураПараметров.ИспользуемаяИБ;
				
				ПолеТабличногоДокумента.Вывести(ОбластьКлючевогоРеквизита);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
			
			ОбластьКлючевогоРеквизита.Параметры.ИмяРеквизита		= "Организация:";
			ОбластьКлючевогоРеквизита.Параметры.ЗначениеРеквизита	= СтруктураПараметров.Организация;
			ОбластьКлючевогоРеквизита.Параметры.ЗначениеРасшифровки	= СтруктураПараметров.Организация;
			
			
			ПолеТабличногоДокумента.Вывести(ОбластьКлючевогоРеквизита);
			
			СтрПротокол.Организация=СтруктураПараметров.Организация;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ПериодОтчета) Тогда
			
			ОбластьКлючевогоРеквизита.Параметры.ИмяРеквизита		= "Период:";
			ОбластьКлючевогоРеквизита.Параметры.ЗначениеРеквизита	= СтруктураПараметров.ПериодОтчета;
			
			ПолеТабличногоДокумента.Вывести(ОбластьКлючевогоРеквизита);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.Сценарий) Тогда
			
			ОбластьКлючевогоРеквизита.Параметры.ИмяРеквизита		= "Сценарий:";
			ОбластьКлючевогоРеквизита.Параметры.ЗначениеРеквизита	= СтруктураПараметров.Сценарий;
			
			ПолеТабличногоДокумента.Вывести(ОбластьКлючевогоРеквизита);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ОсновнаяВалюта) Тогда
			
			ОбластьКлючевогоРеквизита.Параметры.ИмяРеквизита		= "Основная валюта:";
			ОбластьКлючевогоРеквизита.Параметры.ЗначениеРеквизита	= СтруктураПараметров.ОсновнаяВалюта;
			
			ПолеТабличногоДокумента.Вывести(ОбластьКлючевогоРеквизита);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ШаблонКорректировки) И ТипЗнч(СтруктураПараметров.ШаблонКорректировки)=Тип("СправочникСсылка.ШаблоныТрансляций") Тогда
			
			ОбластьКлючевогоРеквизита.Параметры.ИмяРеквизита		= "План счетов - источник:";
			ОбластьКлючевогоРеквизита.Параметры.ЗначениеРеквизита	= СтруктураПараметров.ШаблонКорректировки.ПланСчетовИсточник;
			
			ПолеТабличногоДокумента.Вывести(ОбластьКлючевогоРеквизита);
			
			ОбластьКлючевогоРеквизита.Параметры.ИмяРеквизита		= "План счетов - приемник:";
			ОбластьКлючевогоРеквизита.Параметры.ЗначениеРеквизита	= СтруктураПараметров.ШаблонКорректировки.ПланСчетовПриемник;
			
			ПолеТабличногоДокумента.Вывести(ОбластьКлючевогоРеквизита);
			
		КонецЕсли;
		
		Если ПоказыватьТехническуюИнформацию Тогда
			
			СтруктураДатаАвтор=Новый Структура("ПоследнийРедактировавший,ДатаИзменения");
			ЗаполнитьЗначенияСвойств(СтруктураДатаАвтор,СтрПротокол.Ссылка);			
			
			Автор			= ?(ЗначениеЗаполнено(СтруктураДатаАвтор.ПоследнийРедактировавший),СтруктураДатаАвтор.ПоследнийРедактировавший,?(ЗначениеЗаполнено(СтрПротокол.Протокол),СтрПротокол.Протокол.Автор,Неопределено));
			ДатаИзменения	= ?(ЗначениеЗаполнено(СтруктураДатаАвтор.ДатаИзменения),СтруктураДатаАвтор.ДатаИзменения,?(ЗначениеЗаполнено(СтрПротокол.Протокол),СтрПротокол.Протокол.Дата,Неопределено));
			
			Если ЗначениеЗаполнено(Автор) Тогда
				
				ОбластьКлючевогоРеквизита.Параметры.ИмяРеквизита		= "Пользователь:";
				ОбластьКлючевогоРеквизита.Параметры.ЗначениеРеквизита	= Автор;
				
				ПолеТабличногоДокумента.Вывести(ОбластьКлючевогоРеквизита);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДатаИзменения) Тогда
				
				ОбластьКлючевогоРеквизита.Параметры.ИмяРеквизита		= "Дата:";
				ОбластьКлючевогоРеквизита.Параметры.ЗначениеРеквизита	= ДатаИзменения;
				
				ПолеТабличногоДокумента.Вывести(ОбластьКлючевогоРеквизита);
				
			КонецЕсли;
		
		КонецЕсли;
		
		ПолеТабличногоДокумента.Вывести(ОбластьРазделитель);
		
		Если ЗначениеЗаполнено(СтрПротокол.Протокол) Тогда
			
			ТаблицаПротокола=ОтобразитьПротокол(СтрПротокол.Протокол,СтруктураМакетов,ПоказыватьТехническуюИнформацию); 
			
			ПолеТабличногоДокумента.Вывести(ТаблицаПротокола);		
			ПолеТабличногоДокумента.Вывести(ОбластьРазделитель);
			
		Иначе
			
			ОбластьКомментарий.Параметры.Комментарий="Заполнение выполнено без замечаний.";
			ПолеТабличногоДокумента.Вывести(ОбластьКомментарий);
			
		КонецЕсли;
		
		ПолеТабличногоДокумента.Вывести(ОбластьРазделитель);
					
		СтрПротокол.ТабДокумент=ПолеТабличногоДокумента; 		
		
	КонецЦикла;
		
	Возврат ТаблицаПротоколов;
		
КонецФункции // РаспечататьСводныйПротокол()

Функция ЕстьПротоколыПоОбъекту(Объект) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	             |	ВЫБОР
	             |		КОГДА ПротоколируемыеСобытия.Обработано
	             |			ТОГДА 1
	             |		КОГДА ПротоколируемыеСобытия.Реструктуризация
	             |			ТОГДА 2
	             |		КОГДА ПротоколируемыеСобытия.ЕстьОшибки
	             |			ТОГДА 3
	             |		ИНАЧЕ 1
	             |	КОНЕЦ КАК Уровень
	             |ИЗ
	             |	Справочник.ПротоколируемыеСобытия КАК ПротоколируемыеСобытия
	             |ГДЕ
	             |	ПротоколируемыеСобытия.Объект = &Объект
	             |	И НЕ ПротоколируемыеСобытия.ПометкаУдаления
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Уровень УБЫВ";
	
	Запрос.УстановитьПараметр("Объект",Объект);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Возврат Результат.Уровень;
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
		
КонецФункции // ЕстьПротоколыПоОбъекту() 

	
	
	