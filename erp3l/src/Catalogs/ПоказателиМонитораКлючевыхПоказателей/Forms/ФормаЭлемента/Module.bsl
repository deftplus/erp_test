// Загружает в таблицы расшифровок объектом информационной базы на форме 
// данные из информационной базы.
&НаСервере
Процедура СчитатьРасшифровкиОбъектомИзИнформационнойБазы()
	// Получение исходных данных из информационной базы.
	СтруктураТаблицРасшифровки = БизнесАнализСерверУХ.ПолучитьСтруктуруТаблицРасшифровкиОбъектомИнформационнойБазыПоВладельцу(Объект.Ссылка);
	// Таблица расшифровок объектом.
	ВыгрузкаРасшифровок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураТаблицРасшифровки, "РасшифровкиОбъектом", Новый ТаблицаЗначений);
	РасшифровкиОбъектомИнформационнойБазы.Загрузить(ВыгрузкаРасшифровок);
	// Таблица параметров расшифровок.
	ВыгрузкаПараметров = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураТаблицРасшифровки, "ПараметрыРасшифровки", Новый ТаблицаЗначений);
	ПараметрыРасшифровкиОбъектом.Загрузить(ВыгрузкаПараметров);
КонецПроцедуры

// Загружает в таблицу расшифрови аналитическим отчетом на форме 
// данные из информационной базы.
&НаСервере
Процедура СчитатьРасшифровкиАналитическимОтчетом()
	ОтчетОбъект = РеквизитФормыВЗначение("Объект");
	
	Вн_Расшифровки = ОтчетОбъект.Расшифровки.Получить();
	Если ТипЗнч(Вн_Расшифровки) = Тип("ТаблицаЗначений") Тогда
		
		Попытка
			Если Вн_Расшифровки.Колонки.Найти("ИсточникДанных") <> Неопределено Тогда
				
				Для Каждого Строка ИЗ Вн_Расшифровки ЦИкл
					НоваяСтрока = Расшифровки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					НоваяСтрока.ПоказательМонитора = Строка.ИсточникДанных;
				КонецЦикла;
			Иначе
				ЗначениеВРеквизитФормы(Вн_Расшифровки, "Расшифровки");
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	КонецЕсли;
КонецПроцедуры

// Функция возвращает адрес сохраненной таблицы расшифровки для передачи в форму редактирования настроек расшифровки.
&НаСервере
Функция ВернутьАдресТаблицыРасшифровкиОбъектом()
	РезультатФункции = Новый ТаблицаЗначений;
	Выгрузка = РасшифровкиОбъектомИнформационнойБазы.Выгрузить();
	РезультатФункции = ПоместитьВоВременноеХранилище(Выгрузка, УникальныйИдентификатор);
	Возврат РезультатФункции;
КонецФункции

// Функция возвращает адрес сохраненной таблицы параметров расшифровки для передачи в форму редактирования настроек расшифровки.
&НаСервере
Функция ВернутьАдресПараметровРасшифровкиОбъектом()
	РезультатФункции = Новый ТаблицаЗначений;
	Выгрузка = ПараметрыРасшифровкиОбъектом.Выгрузить();
	РезультатФункции = ПоместитьВоВременноеХранилище(Выгрузка, УникальныйИдентификатор);
	Возврат РезультатФункции;
КонецФункции

// Функция возвращает адрес сохраненной таблицы расшифровки аналитическим отчетом 
// для передачи в форму редактирования настроек расшифровки.
&НаСервере
Функция ВернутьАдресРасшифровкиАналитическимОтчетом()
	РезультатФункции = Новый ТаблицаЗначений;
	Выгрузка = Расшифровки.Выгрузить();
	РезультатФункции = ПоместитьВоВременноеХранилище(Выгрузка, УникальныйИдентификатор);
	Возврат РезультатФункции;
КонецФункции

// Возвращает структуру параметров для открытия формы настройки расшифровок.
&НаСервере
Функция ПолучитьСтруктуруПараметровФормыРасшифровок()
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("КомпоновщикНастроек", Новый КомпоновщикНастроекКомпоновкиДанных);
	РезультатФункции.Вставить("АдресРасшифровки", ВернутьАдресРасшифровкиАналитическимОтчетом());
	РезультатФункции.Вставить("АдресТаблицыРасшифровкиОбъектом", ВернутьАдресТаблицыРасшифровкиОбъектом());
	РезультатФункции.Вставить("АдресПараметровРасшифровкиОбъектом", ВернутьАдресПараметровРасшифровкиОбъектом());
	Возврат РезультатФункции;
КонецФункции

&НаСервере
Функция ПолучитьСхемуРасшифровкиКомпоновкиДанных()
	
	Возврат РеквизитФормыВЗначение("Объект").СхемаКомпоновкиДляРасшифровки.Получить();
	
КонецФункции

// Управляет доступностью элементов формы.
&НаСервере
Процедура УправлениеДоступностью()
	Если Объект.ИспользоватьКоридорЗначений Тогда
		Элементы.ГруппаГраницыЗначений.Видимость = Истина;
		Элементы.ТрактованиеПоложительногоОтклонения.Видимость = Ложь;
	Иначе
		Элементы.ГруппаГраницыЗначений.Видимость = Ложь;
		Элементы.ТрактованиеПоложительногоОтклонения.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеФлага(ИмяФлага)
	
	ИдСтроки = Элементы.ИсточникиДанныхДляРасчета.ТекущиеДанные.НомерСтроки;
	
	Если Элементы.ИсточникиДанныхДляРасчета.ТекущиеДанные[ИмяФлага] Тогда
		НайденныеСтроки = Объект.ИсточникиДанныхДляРасчета.НайтиСтроки(Новый Структура(ИмяФлага, Истина));
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			
			Если ТекСтрока.НомерСтроки <> ИдСтроки Тогда
				ТекСтрока[ИмяФлага] = Ложь;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРасшифровки(Адрес)
	Попытка
		Если ЭтоАдресВременногоХранилища(Адрес) Тогда
			ЗначениеХранилища = ПолучитьИзВременногоХранилища(Адрес);
			Если ТипЗнч(ЗначениеХранилища) = Тип("ТаблицаЗначений") Тогда
				ЗначениеВРеквизитФормы(ЗначениеХранилища, "Расшифровки");
			ИначеЕсли ТипЗнч(ЗначениеХранилища) = Тип("Структура") Тогда
				// Расшифровка объектом.
				РасшифровкиОбъектом = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначениеХранилища, "РасшифровкаОбъектом", Новый ТаблицаЗначений);
				РасшифровкиОбъектомИнформационнойБазы.Очистить();
				Для Каждого ТекРасшифровкиОбъектом Из РасшифровкиОбъектом Цикл
					НоваяСтрока = РасшифровкиОбъектомИнформационнойБазы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекРасшифровкиОбъектом);
				КонецЦикла;
				// Параметры расшифровки объектом.
				ПараметрыРасшифровкиОбъектомВнешняя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначениеХранилища, "ПараметрыРасшифровкиОбъектом", Новый ТаблицаЗначений);
				ПараметрыРасшифровкиОбъектом.Очистить();
				Для Каждого ТекПараметрыРасшифровкиОбъектом Из ПараметрыРасшифровкиОбъектомВнешняя Цикл
					НоваяСтрока = ПараметрыРасшифровкиОбъектом.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекПараметрыРасшифровкиОбъектом);
				КонецЦикла;
				// Расшифровки аналитическим отчетом.
				ТаблицаРасшифровки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначениеХранилища, "ТаблицаРасшифровок", Новый ТаблицаЗначений);
				ТаблицаРасшифровки.Колонки.Добавить("ЧислоРасшифровываемыхПолей");
				ЗначениеВРеквизитФормы(ТаблицаРасшифровки, "Расшифровки");
			Иначе
				ТекстСообщения = НСтр("ru = 'Неизвестный вариант расшифровки: %ЗначениеРасшифровки%. Операция отменена.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗначениеРасшифровки%", Строка(ЗначениеХранилища));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось получить адрес таблицы расшифровок. Операция отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'При получении таблиц расшифровки произошли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры

// Выполняет запись расшифровок текущего объекта в справочник РасшифровкиАналитическихОтчетов.
&НаСервере
Процедура ЗаписатьРасшифровкуОбъектом()
	ВыгрузкаРасшифровки = РасшифровкиОбъектомИнформационнойБазы.Выгрузить();
	ВыгрузкаПараметровРасшифровки = ПараметрыРасшифровкиОбъектом.Выгрузить();
	БизнесАнализСерверУХ.ЗаписатьРасшифровкуОбъектом(Объект.Ссылка, ВыгрузкаРасшифровки, ВыгрузкаПараметровРасшифровки, Объект.Наименование);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокВыбораТипаИсточника.Добавить(ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18, 5), "Число");
	СписокВыбораТипаИсточника.Добавить(Новый ОписаниеТипов("СправочникСсылка.ИсточникиДанныхДляРасчетов"), Нстр("ru = 'Источник данных'"));
	СтрокаЛоготип = ПолучитьНавигационнуюСсылку(Объект.Ссылка, "Логотип");
	СчитатьРасшифровкиАналитическимОтчетом();
	СчитатьРасшифровкиОбъектомИзИнформационнойБазы();
	ПроцентДостиженияЦелиОтображение = НЕ Объект.ОтображатьПроцентДостиженияЦелиВместоПроцентаОтклонения;
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		
		Ответ = Неопределено;
		
		Оповещение = Новый ОписаниеОповещения("СформироватьОтчетЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Для проверки нужно сохранить отчет. Сохранить?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	СформироватьОтчетНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    Записать();    
    
    СформироватьОтчетНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетНаКлиенте()
    
    ВнешнийКонтекст = Новый Структура("Организация, Валюта, БазовыйПериод, ПериодСравнения, ПериодПрогноз, БазовыйСценарий, ПлановыйСценарий, ИспользуемаяИБ"
    , Организация
    , Валюта
    , БазовыйПериод
    , ПериодСравнения
    , ПериодПрогноз
    , БазовыйСценарий
    , ПлановыйСценарий
    , ИспользуемаяИБ);
    
    СформироватьОтчетНаСервере(Объект.Ссылка, ВнешнийКонтекст);

КонецПроцедуры

&НаСервере
Функция СформироватьОтчетНаСервере(Показатель, ВнешнийКонтекст)
	
	Перем ДанныеРасшифровки;
	
	ТЗОтвета = БизнесАнализВызовСервераУХ.СформироватьТаблицуМонитораПоказателей();
	РезультатРасчета = ТиповыеОтчетыУХ.ПровестиРасчетПоказателяИзВнешнегоИсточника(Показатель, ВнешнийКонтекст);
	Если ЗначениеЗаполнено(РезультатРасчета) Тогда
		ЗаполнитьЗначенияСвойств(ТЗОтвета.Строки.Добавить(), РезультатРасчета);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТЗОтвета.Скопировать(), "ТаблицаМонитораПоказателей");
	
КонецФункции

&НаКлиенте
Процедура РедактироватьСКДРасшифровки(Команда)
	
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		СКД = ПолучитьСхемуРасшифровкиКомпоновкиДанных();
		Если СКД = Неопределено Тогда
			СКД = Новый СхемаКомпоновкиДанных;
		КонецЕсли;
		Конструктор = Новый КонструкторСхемыКомпоновкиДанных(СКД);
		Конструктор.Редактировать(ЭтаФорма);
	#Иначе
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = НСтр("ru = 'Редактирование схемы компоновки данных доступно только в толстом клиенте'");
		СообщениеПользователю.Сообщить();
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ИсточникЗначенияТекущегоПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		СтандартнаяОбработка = Ложь;
		ФормаИсточников = ПолучитьФорму("Справочник.ИсточникиДанныхДляРасчетов.ФормаВыбора", , Элемент);
		ФормаИсточников.Отбор.СпособИспользования.Значение = ПредопределенноеЗначение("Перечисление.СпособыИспользованияОперандов.ДляАналитическихОтчетов");
		ФормаИсточников.Отбор.СпособИспользования.Использование = Истина;
		ФормаИсточников.Открыть();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникЗначенияПериодаСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		СтандартнаяОбработка = Ложь;
		ФормаИсточников = ПолучитьФорму("Справочник.ИсточникиДанныхДляРасчетов.ФормаВыбора", , Элемент);
		ФормаИсточников.Отбор.СпособИспользования.Значение = ПредопределенноеЗначение("Перечисление.СпособыИспользованияОперандов.ДляАналитическихОтчетов");
		ФормаИсточников.Отбор.СпособИспользования.Использование = Истина;
		ФормаИсточников.Открыть();
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ИсточникПлановогоЗначенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		СтандартнаяОбработка = Ложь;
		ФормаИсточников = ПолучитьФорму("Справочник.ИсточникиДанныхДляРасчетов.ФормаВыбора", , Элемент);
		ФормаИсточников.Отбор.СпособИспользования.Значение = ПредопределенноеЗначение("Перечисление.СпособыИспользованияОперандов.ДляАналитическихОтчетов");
		ФормаИсточников.Отбор.СпособИспользования.Использование = Истина;
		ФормаИсточников.Открыть();
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЛоготип(Команда)
	Попытка
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Фильтр = "PNG (*.png)|*.png|JPEG (*.jpg)|*.jpg|" + Нстр("ru = 'Все файлы'") + " (*.*)|*.*";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите логотип показателя'");
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
			Для Каждого ТекМассивФайлов Из МассивФайлов Цикл
				ТекКартинка = Новый Картинка(ТекМассивФайлов);
				СтрокаЛоготип = ПоместитьВоВременноеХранилище(ТекКартинка, ЭтаФорма.УникальныйИдентификатор);
			КонецЦикла;
		Иначе
			ТекстСообщения = НСтр("ru = 'Файл не выбран. Логотип не изменён.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'Произошла ошибка при открытии логотипа: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Логотип.
	Если ЗначениеЗаполнено(СтрокаЛоготип) Тогда
		Если ЭтоАдресВременногоХранилища(СтрокаЛоготип) Тогда
			ТекущийОбъект.Логотип = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаЛоготип));
		Иначе
			//Не адрес. Нельзя записывать.
		КонецЕсли;
	Иначе
		//Нет ссылки
	КонецЕсли;	
	// Таблица расшифровок.
	ВыгрузкаРасшифровок = Расшифровки.Выгрузить();
	ТекущийОбъект.Расшифровки = Новый ХранилищеЗначения(ВыгрузкаРасшифровок);
	// Отображение процентов.
	ТекущийОбъект.ОтображатьПроцентДостиженияЦелиВместоПроцентаОтклонения = НЕ ПроцентДостиженияЦелиОтображение;
КонецПроцедуры

&НаКлиенте
Процедура Галерея(Команда)
	ОткрытьФорму("ОбщаяФорма.ГалереяПиктограмм", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") Тогда
		Если СокрЛП(ИсточникВыбора.ИмяФормы) = "ОбщаяФорма.ГалереяПиктограмм" Тогда
			Если ЭтоАдресВременногоХранилища(ВыбранноеЗначение) Тогда
				СтрокаЛоготип = ВыбранноеЗначение;
			Иначе
				// Неизвестный вариант выбора. Не изменяем.
			КонецЕсли;
		Иначе
			// Неизвестный источник. Не изменяем.
		КонецЕсли;
	Иначе
		// Неизвестный источник. Не изменяем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНастройкиРасшифровки(Команда)
	ПараметрыФормы = ПолучитьСтруктуруПараметровФормыРасшифровок();
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкиРасшифровкиОтчетов_Управляемая", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "СписокРасшифровокОбновлен" Тогда
		Если Источник.ВладелецФормы = ЭтаФорма Тогда
			ОбновитьРасшифровки(Параметр);
		Иначе
			// Расшифровка другой формы. Не сохраняем данные.
		КонецЕсли;
	Иначе
		// Неизвестное оповещение. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаписатьРасшифровкуОбъектом();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКоридорЗначенийПриИзменении(Элемент)
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПроцентДостиженияЦелиВместоПроцентаОтклоненияПриИзменении(Элемент)
	Объект.ОтображатьПроцентДостиженияЦелиВместоПроцентаОтклонения = НЕ ПроцентДостиженияЦелиОтображение;
КонецПроцедуры

