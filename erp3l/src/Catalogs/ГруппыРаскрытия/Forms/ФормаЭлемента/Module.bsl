
&НаСервере
Процедура УстановитьВидимость()
		
	Если ЗначениеЗаполнено(Объект.СчетБД) Тогда
				
		Элементы.ДекорацияСчетСтатья.Видимость=Истина;
		
		СтрокаШаблона = Нстр("ru = 'Группа аналитик счета %1'");
		
		Элементы.ДекорацияСчетСтатья.Заголовок = "";
		Если Не ПустаяСтрока(СтрокаШаблона) тогда								
			Элементы.ДекорацияСчетСтатья.Заголовок = СтрШаблон(СтрокаШаблона, Объект.СчетБД.Наименование);
		КонецЕсли;
				
	ИначеЕсли ЗначениеЗаполнено(Объект.ГруппаРаскрытияСтатья) Тогда
		
		Элементы.ДекорацияСчетСтатья.Видимость=Истина;
		
		СтрокаШаблона = Нстр("ru = 'Группа аналитик статьи %1'");
		
		Элементы.ДекорацияСчетСтатья.Заголовок = "";
		Если Не ПустаяСтрока(СтрокаШаблона) тогда								
			Элементы.ДекорацияСчетСтатья.Заголовок = СтрШаблон(СтрокаШаблона, Объект.ГруппаРаскрытияСтатья);
		КонецЕсли;
				
	Иначе	
				
		Элементы.ДекорацияСчетСтатья.Видимость=Ложь;
		
	КонецЕсли;
	
	Элементы.РазделениеПоПроектам.Видимость			=(ТипЗнч(Объект.Владелец)=Тип("СправочникСсылка.ВидыОтчетов") И НЕ Объект.Владелец.РазделениеПоПроектам);
	Элементы.ВидАналитики.ТолькоПросмотр			=ЗначениеЗаполнено(Объект.ГруппаРаскрытияСтатья);
	
	#Область ДополнительныеЯзыки
	
	ТаблицаЯзыков = Константы.ДополнительныеЯзыкиВыводаОтчета.Получить().Получить();
	
	Если ТипЗнч(ТаблицаЯзыков) =Тип("ТаблицаЗначений") И ТаблицаЯзыков.Количество()>0 Тогда
		
		Элементы.ГруппаДополнительныеЯзыки.Видимость=Истина;
		
		Если ТаблицаЯзыков.Количество() = 1 Тогда
			
			Элементы.ИмяКолонки1.Видимость=Истина;
			Элементы.ИмяКолонки1.Заголовок=ТаблицаЯзыков[0].НаименованиеЯзыка;
						
		ИначеЕсли ТаблицаЯзыков.Количество()>1 Тогда
			
			Элементы.ИмяКолонки1.Видимость=Истина;
			Элементы.ИмяКолонки1.Заголовок=ТаблицаЯзыков[0].НаименованиеЯзыка;
			
			Элементы.ИмяКолонки2.Видимость=Истина;
			Элементы.ИмяКолонки2.Заголовок=ТаблицаЯзыков[1].НаименованиеЯзыка;

		КонецЕсли;
				
	Иначе
		
		Элементы.ГруппаДополнительныеЯзыки.Видимость=Ложь;
		
	КонецЕсли;	
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	УстановитьВидимость();
				
	СправочникОбъект=РеквизитФормыВЗначение("Объект");
	СправочникОбъект.ПодготовитьТаблицуОтображенияПолей();
	
	ОбщегоНазначенияКлиентСерверУХ.ПоместитьДеревоЗначенийВКоллекциюФормы(СправочникОбъект.ТабНастройкаОтображенияПолей,ТабНастройкаОтображенияПолей);
		
	РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(СправочникОбъект.ПодготовитьДанныеРабочихТаблиц(),ЭтаФорма.УникальныйИдентификатор);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПроверитьНаличиеПротоколов();
		
	Иначе
		
		 Элементы.ФормаПротоколы.Видимость=Ложь;
				
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПроверитьНаличиеПротоколов()
	
	ЕстьПротоколы=Справочники.ПротоколируемыеСобытия.ЕстьПротоколыПоОбъекту(Объект.Ссылка);
	
	Если ЕстьПротоколы>0 Тогда
		
		Элементы.ФормаПротоколы.Видимость=Истина;
		
		Если ЕстьПротоколы=3 Тогда
			
			Элементы.ФормаПротоколы.Картинка=БиблиотекаКартинок.ВниманиеКрасный;
			
		ИначеЕсли ЕстьПротоколы=2 Тогда
			
			Элементы.ФормаПротоколы.Картинка=БиблиотекаКартинок.НастройкаЭлементовОтчетов_32;
			
		Иначе
			
			Элементы.ФормаПротоколы.Картинка=Новый Картинка;
			
		КонецЕсли;
		
	Иначе
		
		Элементы.ФормаПротоколы.Видимость=Ложь;
		
	КонецЕсли;
		
КонецПроцедуры // ПроверитьНаличиеПротоколов() 

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	ПередЗаписьюОбъектаСервер(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьКодПоНаименованию(Наименование)
	
	Возврат ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(Наименование);
	
КонецФункции // СформироватьКодПоНаименованию() 
	

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Код) Тогда
		
		Объект.Код=СформироватьКодПоНаименованию(Объект.Наименование);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаАналитики(ДанныеОбъекта,СтруктураСтрока)

	СправочникОбъект=РеквизитФормыВЗначение("Объект");
	СправочникОбъект.ПриИзмененииВидаАналитики(ДанныеОбъекта,СтруктураСтрока);
		
КонецПроцедуры // ПриИзмененииВидаАналитики()

&НаКлиенте
Процедура РазвернутьСтрокуАналитики(СтрокаРазворота)
	
	Если (НЕ (СтрокаРазворота.ТипМетаДанных="Справочник" ИЛИ СтрокаРазворота.ТипМетаДанных="Документ" ИЛИ СтрокаРазворота.ТипЗначения.Количество()>1)) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаРазворота.ПолучитьЭлементы().Количество()>0 И (НЕ ПустаяСтрока(СтрокаРазворота.ПолучитьЭлементы()[0].ПолеБД)) Тогда // Уже разворачивали эту строку
		Возврат;
	КонецЕсли;
	
	СтруктураСтрока=СформироватьСтруктуруСтрокиБД(СтрокаРазворота);
	ДанныеОбъекта=СформироватьДанныеОбъекта();
	
	ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта,СтруктураСтрока);
	
	Отказ=ДанныеОбъекта.Отказ;
	
	Если Отказ Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаРазворота.ПолучитьЭлементы().Очистить();
	РабочийОбъектАдрес=ДанныеОбъекта.РабочийОбъектАдрес;
	
	Если СтруктураСтрока.Свойство("СтрокиКДобавлению") Тогда
		
		Для Каждого СтрокаКДобавлению ИЗ СтруктураСтрока.СтрокиКДобавлению Цикл
			
			НоваяСтрока=СтрокаРазворота.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению);
			
			Если СтрокаКДобавлению.СтрокиКДобавлению.Количество()>0 Тогда
				
				ДобавитьПодчиненныеСтроки(СтрокаКДобавлению,НоваяСтрока);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // 

&НаКлиенте
Процедура ТабНастройкаОтображенияПолейПередРазворачиванием(Элемент, Строка, Отказ)
	
	СтрокаРазворота=Элемент.ДанныеСтроки(Строка);
	РазвернутьСтрокуАналитики(СтрокаРазворота);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодчиненныеСтроки(Строка,ЭлементКоллекции)
	
	Для Каждого СтрокаКДобавлению ИЗ Строка.СтрокиКДобавлению Цикл
		
		НоваяСтрока=ЭлементКоллекции.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению);
		
		Если СтрокаКДобавлению.СтрокиКДобавлению.Количество()>0 Тогда
			
			ДобавитьПодчиненныеСтроки(СтрокаКДобавлению,НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ДобавитьПодчиненныеСтроки

&НаСервереБезКонтекста
Процедура ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта,СтруктураСтрока) 
	
	РаботаСПолямиАналитикиУХ.ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта,СтруктураСтрока);
		
КонецПроцедуры // ПередРазворачиваниемСтрокиРеквизитовАналитики()

&НаСервереБезКонтекста
Функция ТипПроизвольныйКлассификатор(ВидАналитики)
	
	Возврат ВидАналитики.ТипЗначения.Типы()[0]=Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ");
	
КонецФункции // ТипПроизвольныйКлассификатор()

&НаКлиенте
Функция СформироватьСтруктуруСтрокиБД(ДанныеСтрокиАналитики)
	
	СтрокаБД=Новый Структура;
	СтрокаБД.Вставить("Сопоставлено",				ДанныеСтрокиАналитики.Отображать);		
	СтрокаБД.Вставить("НаименованиеБД",				ДанныеСтрокиАналитики.НаименованиеБД);
	СтрокаБД.Вставить("СправочникБД",				ДанныеСтрокиАналитики.СправочникБД);		
	СтрокаБД.Вставить("ПолеБД",				ДанныеСтрокиАналитики.ПолеБД);
	СтрокаБД.Вставить("ТипЗначения",				ДанныеСтрокиАналитики.ТипЗначения);	
	СтрокаБД.Вставить("ТипДанныхПоля",				ДанныеСтрокиАналитики.ТипДанныхПоля);
	СтрокаБД.Вставить("ТипМетаДанных",				ДанныеСтрокиАналитики.ТипМетаДанных);
	СтрокаБД.Вставить("ВидАналитики",				ДанныеСтрокиАналитики.ВидАналитики);
		
	Возврат СтрокаБД;
	
КонецФункции // СформироватьСтруктуруСтрокиВИБ()

&НаКлиенте
Функция СформироватьДанныеОбъекта()
	
	ДанныеОбъекта=Новый Структура;
	ДанныеОбъекта.Вставить("РабочийОбъектАдрес",		РабочийОбъектАдрес);
	ДанныеОбъекта.Вставить("УникальныйИдентификатор",	ЭтаФорма.УникальныйИдентификатор);
	ДанныеОбъекта.Вставить("ТипБД",						ПредопределенноеЗначение("Справочник.ТипыБазДанных.ТекущаяИБ"));
	ДанныеОбъекта.Вставить("ТекСоединениеВИБ",			);
	ДанныеОбъекта.Вставить("Отказ",						ЛОЖЬ);
	ДанныеОбъекта.Вставить("СпособПолучения",			);
	ДанныеОбъекта.Вставить("СпособИспользования",		);
	ДанныеОбъекта.Вставить("ВнутренниеДанные",			Истина);

	Возврат ДанныеОбъекта;
	
КонецФункции // СформироватьСтруктуруСтрокиВИБ()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьДеревоНастроек(ТабНастройкаОтображенияПолей.ПолучитьЭлементы());
		
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоНастроек(КоллекцияЭлементов)
	
	Для Каждого Элемент ИЗ КоллекцияЭлементов Цикл
		
		КоллекцияЭлементов=Элемент.ПолучитьЭлементы();
		
		РазворачиватьУзел=Ложь;
		
		Для Каждого ТекЭлемент ИЗ КоллекцияЭлементов Цикл
			
			Если (ТекЭлемент.Отображать ИЛИ ТекЭлемент.ИспользоватьВМакете ИЛИ ТекЭлемент.МультиязычныйРеквизит)
				И (НЕ (СтрНайти(ТекЭлемент.ПолеБД,".Наименование")>0 ИЛИ СтрНайти(ТекЭлемент.ПолеБД,".Код")>0)) Тогда
				
				РазворачиватьУзел=Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если РазворачиватьУзел Тогда
			
			Если НЕ Элементы.ТабНастройкаОтображенияПолей.Развернут(Элемент.ПолучитьИдентификатор()) Тогда
				
				Элементы.ТабНастройкаОтображенияПолей.Развернуть(Элемент.ПолучитьИдентификатор());
				
			КонецЕсли;
			
			РазвернутьДеревоНастроек(КоллекцияЭлементов);
			
		КонецЕсли;
		
	КонецЦикла;
				
КонецПроцедуры // РазвернутьДеревоНастроек()

&НаКлиенте
Процедура ВидАналитикиПриИзменении(Элемент)
	
	СтрокаРазворота=Элементы.ТабНастройкаОтображенияПолей.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(СтрокаРазворота.ВидАналитики) Тогда
		
		СтрокаРазворота.ПолучитьЭлементы().Очистить();
		СтрокаРазворота.НаименованиеБД=СтрокаРазворота.ПолеБД;
		СтрокаРазворота.СправочникБД="";
		СтрокаРазворота.ТипМетаДанных="";
		СтрокаРазворота.ТипЗначения="";
		СтрокаРазворота.ТипДанныхПоля="";
		СтрокаРазворота.Отображать=Ложь;
		СтрокаРазворота.ИспользоватьВМакете=Ложь;
		СтрокаРазворота.АналитикаВидаОтчета=Ложь;
		СтрокаРазворота.ОбязательнаяАналитика=Ложь;
		СтрокаРазворота.АналитикаВГО=Ложь;
		СтрокаРазворота.АналитикаЭтапПроекта=Ложь;
		СтрокаРазворота.ТаблицаАналитики="";
		СтрокаРазворота.ИмяКолонки="";
		СтрокаРазворота.МультиязычныйРеквизит=Ложь;
		
		Возврат;
		
	Иначе
		
		СтрокаРазворота.Отображать=Истина;
		
	КонецЕсли;	
		
	СтруктураСтрока=СформироватьСтруктуруСтрокиБД(СтрокаРазворота);
	ДанныеОбъекта=СформироватьДанныеОбъекта();

	ПриИзмененииВидаАналитики(ДанныеОбъекта,СтруктураСтрока);
	
	Отказ=ДанныеОбъекта.Отказ;
	
	Если Отказ Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаРазворота,СтруктураСтрока);
	
	Если НЕ (СтрокаРазворота.СправочникБД="Организации" ИЛИ СтрокаРазворота.СправочникБД="Контрагенты")  Тогда
		
		СтрокаРазворота.АналитикаВГО=Ложь;
		
	ИначеЕсли НЕ СтрокаРазворота.СправочникБД="Проекты" Тогда
		
		СтрокаРазворота.АналитикаЭтапПроекта=Ложь 
		
	КонецЕсли;	
	
	СтрокаРазворота.ПолучитьЭлементы().Очистить();
	РабочийОбъектАдрес=ДанныеОбъекта.РабочийОбъектАдрес;
	
	Если СтруктураСтрока.Свойство("СтрокиКДобавлению") Тогда 
		
		Для Каждого СтрокаКДобавлению ИЗ СтруктураСтрока.СтрокиКДобавлению Цикл
			
			НоваяСтрока=СтрокаРазворота.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению);
			
			Если СтрокаКДобавлению.СтрокиКДобавлению.Количество()>0 Тогда
				
				ДобавитьПодчиненныеСтроки(СтрокаКДобавлению,НоваяСтрока);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбновитьФлагиВывода(СтрокаРазворота);
				
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФлагиВывода(СтрокаАналитики)
	
	ЕстьПоляОтображения=Ложь;
	
	КоллекцияЭлементов	= СтрокаАналитики.ПолучитьЭлементы();
	Отображать			= СтрокаАналитики.Отображать;
	
	Для Каждого СтрПоле ИЗ КоллекцияЭлементов Цикл
		
		Если Отображать Тогда
			
			Если ЗначениеЗаполнено(СтрПоле.ИмяКолонки) Тогда
				
				СтрПоле.Отображать=Истина;
                ЕстьПоляОтображения=Истина;
				
			КонецЕсли;
			
		Иначе
			
			СтрПоле.Отображать=Ложь;
			СтрПоле.ИспользоватьВМакете=Ложь;
			СтрПоле.МультиязычныйРеквизит=Ложь;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если Отображать И НЕ ЕстьПоляОтображения Тогда
		
		Для Каждого СтрПоле ИЗ КоллекцияЭлементов Цикл
			
			Если СтрНайти(СтрПоле.ПолеБД,".Наименование")>0 Тогда
				
				СтрПоле.Отображать=Истина;
				СтрПоле.ИмяКолонки=СтрЗаменить(СтрПоле.ПолеБД,Лев(СтрПоле.ПолеБД, СтрНайти(СтрПоле.ПолеБД,".")-1),СтрПоле.ВидАналитики);
				ЕстьПоляОтображения=Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЕстьПоляОтображения Тогда
			
			Для Каждого СтрПоле ИЗ КоллекцияЭлементов Цикл
				
				Если СтрНайти(СтрПоле.ПолеБД,".Код")>0 Тогда
					
					СтрПоле.Отображать=Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЕсли;
		
	ТекущийРодитель=СтрокаАналитики.ПолучитьРодителя();
	
	Если ТекущийРодитель=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Отображать Тогда
		
		ТекущийРодитель.Отображать=Истина;
		
	Иначе
		
		ЕстьПоляДляОтображения=Ложь;
		
		Для Каждого Строка ИЗ ТекущийРодитель.ПолучитьЭлементы() Цикл
			
			Если Строка.Отображать Тогда
				
				ЕстьПоляДляОтображения=Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекущийРодитель.Отображать=ЕстьПоляДляОтображения;
		
	КонецЕсли;
			
КонецПроцедуры // УстановитьПолеПоУмолчанию

&НаКлиенте
Процедура ОтображатьПриИзменении(Элемент)
	
	СтрокаАналитики=Элементы.ТабНастройкаОтображенияПолей.ТекущиеДанные;
	
	Если НЕ СтрокаАналитики.ВыбиратьВидАналитики Тогда
		
		Если СтрокаАналитики.Отображать Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаАналитики.ИмяКолонки) Тогда
				
				СтрокаАналитики.ИмяКолонки=СтрЗаменить(СтрокаАналитики.ПолеБД,Лев(СтрокаАналитики.ПолеБД, СтрНайти(СтрокаАналитики.ПолеБД,".")-1),СтрокаАналитики.ВидАналитики);

			КонецЕсли;
				
			РазвернутьСтрокуАналитики(СтрокаАналитики);
			
		КонецЕсли;
		
		ОбновитьФлагиВывода(СтрокаАналитики);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТабНастройкаОтображенияПолейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабНастройкаОтображенияПолейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабНастройкаОтображенияПолейПередУдалением(Элемент, Отказ)
	
	Отказ=Истина;
	
	СтрокаРазворота=Элементы.ТабНастройкаОтображенияПолей.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаРазворота.ВидАналитики) Тогда
		
		СтрокаРазворота.ВидАналитики="";
		
		СтрокаРазворота.ПолучитьЭлементы().Очистить();
		СтрокаРазворота.НаименованиеБД=Лев(СтрокаРазворота.НаименованиеБД, СтрНайти(СтрокаРазворота.НаименованиеБД,":")-1);
		СтрокаРазворота.СправочникБД="";
		СтрокаРазворота.ТипМетаДанных="";
		СтрокаРазворота.ТипЗначения="";
		СтрокаРазворота.ТипДанныхПоля="";
		СтрокаРазворота.Отображать=Ложь;
		СтрокаРазворота.ИспользоватьВМакете=Ложь;
		СтрокаРазворота.АналитикаВидаОтчета=Ложь;
		СтрокаРазворота.ОбязательнаяАналитика=Ложь;
		СтрокаРазворота.АналитикаВГО=Ложь;
		СтрокаРазворота.АналитикаЭтапПроекта=Ложь;
		СтрокаРазворота.ТаблицаАналитики="";
		СтрокаРазворота.ИмяКолонки="";
		СтрокаРазворота.МультиязычныйРеквизит=Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗакрытьПослеЗаписи=ПараметрыЗаписи.Свойство("Закрыть");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		АдресПараметровРеструктуризации=ПолучитьПараметрыРеструктуризации(Отказ);
		
		Если Отказ Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Если АдресПараметровРеструктуризации=Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		
		Если ЕстьЗаписиДанных(АдресПараметровРеструктуризации) Тогда
			
			Отказ=Истина;
			ОписаниеОповещения=Новый ОписаниеОповещения("ПодтверждениеРеструктуризацииЗавершение",ЭтотОбъект,ПараметрыЗаписи);
			ОткрытьФорму("Обработка.РеструктуризацияДанных.Форма",Новый Структура("АдресПараметровРеструктуризации,",АдресПараметровРеструктуризации),ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
							
		Иначе	
			
			ВыполнитьЗаписьОбъекта(АдресПараметровРеструктуризации,ПараметрыЗаписи);
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьЗаписиДанных(АдресПараметровРеструктуризации)
	
	ПараметрыРеструкутризации = ПолучитьИзвременногоХранилища(АдресПараметровРеструктуризации);
	Если ПараметрыРеструкутризации.Свойство("ЕстьЗаписиПоЭлементуСтруктуры") И ПараметрыРеструкутризации.ЕстьЗаписиПоЭлементуСтруктуры Тогда
		 Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции	

&НаСервере
Функция ПолучитьПараметрыРеструктуризации(Отказ)
	
	ИзмененныйОбъект=РеквизитФормыВЗначение("Объект");
	ИзмененныйОбъект.ТабНастройкаОтображенияПолей=РеквизитФормыВЗначение("ТабНастройкаОтображенияПолей");
	ИзмененныйОбъект.ПодготовитьКЗаписиДанных();
	
	Если НЕ ИзмененныйОбъект.ПроверитьПередЗаписью() Тогда
		
		Отказ=Истина;
		Возврат Неопределено;
		
	КонецЕсли;
			
	ПараметрыРеструктуризации=Справочники.ГруппыРаскрытия.ПроверитьНеобходимостьРеструктуризацииДанныхЭлементСтруктуры(ИзмененныйОбъект,Объект.Ссылка);
	
	Если НЕ ПараметрыРеструктуризации=Неопределено Тогда
		
		Возврат ПоместитьВоВременноеХранилище(ПараметрыРеструктуризации,ЭтаФорма.УникальныйИдентификатор);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
		
КонецФункции // ПолучитьПараметрыРеструктуризации()

&НаКлиенте
Процедура ПодтверждениеРеструктуризацииЗавершение(РезультатЗакрытия,ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатЗакрытия=Неопределено Тогда
		
		ВыполнитьЗаписьОбъекта(РезультатЗакрытия,ДополнительныеПараметры);
				
	КонецЕсли;
		
КонецПроцедуры // ПодтверждениеРеструктуризацииЗавершение()

#Область ЗаписьОбъекта

&НаКлиенте
Процедура ВыполнитьЗаписьОбъекта(АдресПараметровРеструктуризации,ПараметрыЗаписи)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаписьНовогоОбъекта=Не ЗначениеЗаполнено(Объект.Ссылка);
	
	Если ЗаписатьОбъектВФорме(АдресПараметровРеструктуризации,ПараметрыЗаписи) Тогда
		
		Модифицированность=Ложь;
		
		Если ТипЗнч(ЭтаФорма.ВладелецФормы)=Тип("ТаблицаФормы") Тогда
			
			ЭтаФорма.ВладелецФормы.Обновить();
			
		КонецЕсли;
		
		ПослеЗаписиОбъектаКлиент(ПараметрыЗаписи);
				
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьЗаписьОбъекта()
	
&НаСервере
Функция ЗаписатьОбъектВФорме(АдресПараметровРеструктуризации,ПараметрыЗаписи)
	
	РабочийОбъект=РеквизитФормыВЗначение("Объект");
	РабочийОбъект.АдресПараметровРеструктуризации=АдресПараметровРеструктуризации;
	
	Отказ=Ложь;
	
	НачатьТранзакцию();
	
	ПередЗаписьюОбъектаСервер(Отказ, РабочийОбъект, ПараметрыЗаписи);
	
	Если Отказ Тогда
		
		ОтменитьТранзакцию();
		Возврат Ложь;
		
	КонецЕсли;
	
	Попытка
		
		РабочийОбъект.Записать();
		
		ПриЗаписиОбъектаСервер(Отказ, РабочийОбъект, ПараметрыЗаписи);
		
		Если Отказ Тогда
			
			ОтменитьТранзакцию();
			Возврат Ложь;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();

		ПослеЗаписиОбъектаСервер(РабочийОбъект,ПараметрыЗаписи);
				
		ЗначениеВРеквизитФормы(РабочийОбъект,"Объект");
				
		Возврат Истина;
		
	Исключение
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,,СтатусСообщения.Внимание);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции // ЗаписатьОбъектВФорме()

&НаСервере
Процедура ПередЗаписьюОбъектаСервер(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ТабНастройкаОтображенияПолей=РеквизитФормыВЗначение("ТабНастройкаОтображенияПолей");
	
КонецПроцедуры // ПередЗаписьюОбъектаКлиент() 

&НаСервере
Процедура ПриЗаписиОбъектаСервер(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	
	
КонецПроцедуры // ПриЗаписиОбъектаСервер()

&НаСервере
Процедура ПослеЗаписиОбъектаСервер(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ПараметрыЗаписи.Свойство("Закрыть") Тогда
		
		ПроверитьНаличиеПротоколов();
		
	КонецЕсли;
		
КонецПроцедуры // ПослеЗаписиОбъектаСервер()

&НаКлиенте
Процедура ПослеЗаписиОбъектаКлиент(ПараметрыЗаписи)
	
	Оповестить("ЗаписанаГруппаРаскрытия",Новый Структура("ГруппаРаскрытия,Валютная",Объект.Ссылка,Объект.Валютная));
	
	Если ЗакрытьПослеЗаписи И ЭтотОбъект.Открыта() Тогда
		
		Закрыть();
		
	КонецЕсли;
		
КонецПроцедуры // ПослеЗаписиОбъектаКлиент()

#КонецОбласти

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ПараметрыЗаписи=Новый Структура("Закрыть");
	Записать(ПараметрыЗаписи);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПослеЗаписиОбъектаКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура Протоколы(Команда)
	
	ОткрытьФорму("Справочник.ПротоколируемыеСобытия.ФормаСписка",Новый Структура("Отбор",Новый Структура("Объект",Объект.Ссылка)));
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаВГОПриИзменении(Элемент)
	
	ТекущиеДанные=Элементы.ТабНастройкаОтображенияПолей.ТекущиеДанные;
	ТекущаяСтрока=Элементы.ТабНастройкаОтображенияПолей.ТекущаяСтрока;
	
	Если ТекущиеДанные.АналитикаВГО Тогда
		
		Для Каждого Строка ИЗ ТабНастройкаОтображенияПолей.ПолучитьЭлементы() Цикл
			
			Если НЕ Строка.ПолучитьИдентификатор()=ТекущаяСтрока Тогда
				
				Строка.АналитикаВГО=Ложь;
				
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;		
	
КонецПроцедуры




	
	
