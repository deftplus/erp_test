#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Описания типов
Перем мОписаниеТиповСтрока Экспорт;
Перем мОписаниеТиповБулево Экспорт;
Перем мОписаниеТиповТЗ Экспорт;
Перем мОписаниеТиповСписокЗначений Экспорт;

Перем мТаблицаПоказателейБД Экспорт;         // Список аналитик выбранного объекта информационной базы.
Перем мТаблицаПроизводныхБД Экспорт;         // Список полей, являющихся производными от основных аналитик

Перем ТабНастройкаОтображенияПолей Экспорт;

Перем РабочаяТаблицаАналитикСчет Экспорт;
Перем РабочаяТаблицаАналитикКоррСчет Экспорт;

Перем ОбновитьАналитикуИсточниковДанных;
Перем ПроверитьВыполнитьПереносДанных Экспорт;
Перем АдресПараметровРеструктуризации Экспорт;

Функция ПодготовитьДеревоНастройкиОтображенияПолей()
	
	ТабНастройкаОтображенияПолей=Новый ДеревоЗначений;
	ТабНастройкаОтображенияПолей.Колонки.Добавить("ПолеБД",					мОписаниеТиповСтрока);
	ТабНастройкаОтображенияПолей.Колонки.Добавить("НаименованиеБД",			мОписаниеТиповСтрока);
	ТабНастройкаОтображенияПолей.Колонки.Добавить("СправочникБД",			мОписаниеТиповСтрока);
	ТабНастройкаОтображенияПолей.Колонки.Добавить("ТипМетаДанных",			мОписаниеТиповСтрока);
	ТабНастройкаОтображенияПолей.Колонки.Добавить("ТипЗначения",			мОписаниеТиповСписокЗначений);
	ТабНастройкаОтображенияПолей.Колонки.Добавить("Отображать",				мОписаниеТиповБулево);
	ТабНастройкаОтображенияПолей.Колонки.Добавить("ИспользоватьВМакете",	мОписаниеТиповБулево);
	ТабНастройкаОтображенияПолей.Колонки.Добавить("ОбязательнаяАналитика",	мОписаниеТиповБулево);
	ТабНастройкаОтображенияПолей.Колонки.Добавить("АналитикаВГО",			мОписаниеТиповБулево);
	ТабНастройкаОтображенияПолей.Колонки.Добавить("АналитикаЭтапПроекта",	мОписаниеТиповБулево);
	ТабНастройкаОтображенияПолей.Колонки.Добавить("ТипДанныхПоля",			мОписаниеТиповСписокЗначений);
	ТабНастройкаОтображенияПолей.Колонки.Добавить("АналитикаВидаОтчета",	мОписаниеТиповБулево);
	ТабНастройкаОтображенияПолей.Колонки.Добавить("ВыбиратьВидАналитики",	мОписаниеТиповБулево);
	ТабНастройкаОтображенияПолей.Колонки.Добавить("ТаблицаАналитики",		мОписаниеТиповСтрока);
	
	ТабНастройкаОтображенияПолей.Колонки.Добавить("ИмяКолонки",				мОписаниеТиповСтрока);
	ТабНастройкаОтображенияПолей.Колонки.Добавить("ИмяКолонки1",			мОписаниеТиповСтрока);
	ТабНастройкаОтображенияПолей.Колонки.Добавить("ИмяКолонки2",			мОписаниеТиповСтрока);


	ТабНастройкаОтображенияПолей.Колонки.Добавить("МультиязычныйРеквизит",	мОписаниеТиповБулево);

	ТабНастройкаОтображенияПолей.Колонки.Добавить("ВидАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные"));
		
КонецФункции // ПодготовитьДеревоУстановкиСоответствийИОтборов()

Процедура ЗаполнитьАналитикуГруппыРаскрытия(ЗаполнениеПоУмолчанию=Истина) Экспорт
	
	мТаблицаПоказателейБД.Очистить();
	мТаблицаВидовАналитикГруппы=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(ЭтотОбъект);
	мТаблицаВидовАналитикОтчета=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(Владелец);
	
	Для Каждого СтрПоле ИЗ мТаблицаВидовАналитикОтчета Цикл
		
		СтрокаПоказателей                = мТаблицаПоказателейБД.Добавить();		
		СтрокаПоказателей.ПолеБД         = СтрПоле.КодАналитики;
		СтрокаПоказателей.НаименованиеБД = СтрПоле.ПредставлениеАналитики;
		
		СтрокаТип=ОбщегоНазначенияУХ.ПолучитьСтрокуТиповДанныхБД(Неопределено,СтрПоле.ВидАналитики.ТипЗначения,Справочники.ТипыБазДанных.ТекущаяИБ,Ложь);
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрокаТип,Справочники.ТипыБазДанных.ТекущаяИБ);
		
		СтрокаПоказателей.ВидАналитики   	= СтрПоле.ВидАналитики;	
		СтрокаПоказателей.ТипМетаДанных  	= ОбщегоНазначенияУХ.ПолучитьНаименованиеСсылочногоТипаБД(Неопределено,СтрПоле.ТаблицаАналитики);
		СтрокаПоказателей.АналитикаВидаОтчета=Истина
		
	КонецЦикла;
	
	Для Каждого СтрПоле ИЗ мТаблицаВидовАналитикГруппы Цикл
		
		СтрокаПоказателей                = мТаблицаПоказателейБД.Добавить();		
		СтрокаПоказателей.ПолеБД         = СтрПоле.КодАналитики;
		СтрокаПоказателей.НаименованиеБД = СтрПоле.ПредставлениеАналитики;
		
		СтрокаТип=ОбщегоНазначенияУХ.ПолучитьСтрокуТиповДанныхБД(Неопределено,СтрПоле.ВидАналитики.ТипЗначения,Справочники.ТипыБазДанных.ТекущаяИБ,Ложь);
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрокаТип,Справочники.ТипыБазДанных.ТекущаяИБ);
		
		СтрокаПоказателей.ВидАналитики   	= СтрПоле.ВидАналитики;	
		СтрокаПоказателей.ТипМетаДанных  	= ОбщегоНазначенияУХ.ПолучитьНаименованиеСсылочногоТипаБД(Неопределено,СтрПоле.ТаблицаАналитики);
		СтрокаПоказателей.ТаблицаАналитики  = СтрПоле.ТаблицаАналитики;
		
	КонецЦикла;
	
	Если ТабНастройкаОтображенияПолей=Неопределено Тогда
		
		ПодготовитьДеревоНастройкиОтображенияПолей();
		
	КонецЕсли;
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Элемент=мТаблицаПоказателейБД.Найти("Аналитика"+Индекс,"ПолеБД");
		
		Если Элемент=Неопределено Тогда
			
			НоваяСтрока=ТабНастройкаОтображенияПолей.Строки.Добавить();
			НоваяСтрока.ПолеБД="Аналитика"+Индекс;
			НоваяСтрока.НаименованиеБД="Аналитика "+Индекс;
			НоваяСтрока.ВыбиратьВидАналитики=Истина;
			
		Иначе
			
			СуществующаяСтрока=ТабНастройкаОтображенияПолей.Строки.Найти(Элемент.ПолеБД,"ПолеБД");
			
			Если СуществующаяСтрока=Неопределено Тогда
				
				ТекущаяСтрока=ТабНастройкаОтображенияПолей.Строки.Добавить();
					
			ИначеЕсли НЕ СуществующаяСтрока.ВидАналитики=Элемент.ВидАналитики Тогда
				
				ТабНастройкаОтображенияПолей.Строки.Удалить(СуществующаяСтрока);
				ТекущаяСтрока=ТабНастройкаОтображенияПолей.Строки.Добавить();
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
			ТекущаяСтрока.ПолеБД					= Элемент.ПолеБД;		
			ТекущаяСтрока.НаименованиеБД            = Элемент.НаименованиеБД;
			ТекущаяСтрока.СправочникБД              = Элемент.СправочникБД;
			ТекущаяСтрока.ТипМетаДанных             = Элемент.ТипМетаДанных;
			ТекущаяСтрока.ПолеБД               		= Элемент.ПолеБД;
			ТекущаяСтрока.ТипЗначения				= Элемент.ТипЗначения;
			ТекущаяСтрока.ТипДанныхПоля            	= Элемент.ТипДанныхПоля;
			ТекущаяСтрока.ВидАналитики	            = Элемент.ВидАналитики;
			ТекущаяСтрока.АналитикаВидаОтчета	    = Элемент.АналитикаВидаОтчета;
			ТекущаяСтрока.ТаблицаАналитики  		= Элемент.ТаблицаАналитики;
			
			Если НЕ ТекущаяСтрока.АналитикаВидаОтчета Тогда
				
				ТекущаяСтрока.ВыбиратьВидАналитики=Истина;
				
			КонецЕсли;
				
			ТекущаяСтрока.ОбязательнаяАналитика    	= ЭтотОбъект["Аналитика"+Индекс+"Обязательна"];
			ТекущаяСтрока.АналитикаВГО              = (Индекс=АналитикаВГО);
			ТекущаяСтрока.АналитикаЭтапПроекта      = (Индекс=АналитикаЭтапПроекта);
			
			// Добавляем строку для возможного раскрытия по реквизитам объекта
			
			Если (ТекущаяСтрока.ТипМетаДанных="Справочник" ИЛИ ТекущаяСтрока.ТипМетаДанных="Документ" ИЛИ ТекущаяСтрока.ТипЗначения.Количество()>1) Тогда 
				// Добавим строки для выбора первого уровня полей для отображения
				
				СтруктураСтрока=СформироватьСтруктуруСтрокиБД(ТекущаяСтрока);
				ДанныеОбъекта=СформироватьДанныеОбъекта();
				
				РаботаСПолямиАналитикиУХ.ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта,СтруктураСтрока);
				ВосстановитьДанныеРабочихТаблиц(ДанныеОбъекта.РабочийОбъектАдрес);
				
				Для Каждого СтрокаКДобавлению ИЗ СтруктураСтрока.СтрокиКДобавлению Цикл
					
					НоваяСтрока=ТекущаяСтрока.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению);
					
					Если СтрокаКДобавлению.СтрокиКДобавлению.Количество()>0 Тогда
						
						ДобавитьПодчиненныеСтроки(СтрокаКДобавлению,НоваяСтрока);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЗаполнениеПоУмолчанию Тогда
					
					СтрокаНаименование=ТекущаяСтрока.Строки.Найти(ТекущаяСтрока.ПолеБД+".Наименование","ПолеБД");
					
					Если НЕ СтрокаНаименование=Неопределено Тогда
						
						СтрокаНаименование.Отображать=Истина;
						СтрокаНаименование.ИспользоватьВМакете=Истина;
						СтрокаНаименование.ИмяКолонки=Строка(ТекущаяСтрока.ВидАналитики);
						
					Иначе
						
						СтрокаКод=ТекущаяСтрока.Строки.Найти(ТекущаяСтрока.ПолеБД+".Код","ПолеБД");
						
						Если НЕ СтрокаКод=Неопределено Тогда
							
							СтрокаКод.Отображать=Истина;
							СтрокаКод.ИспользоватьВМакете=Истина;
							СтрокаКод.ИмяКолонки=Строка(ТекущаяСтрока.ВидАналитики);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьАналитикуГруппыРаскрытия()

Процедура ПодготовитьТаблицуОтображенияПолей(ОбновлятьПоля=Ложь) Экспорт
	
	ЗаполнитьАналитикуГруппыРаскрытия(ОбновлятьПоля ИЛИ ПравилаОтображенияПолей.Количество()=0); 
	
	Для Каждого СтрПоле ИЗ ПравилаОтображенияПолей Цикл
		 		 
		 СтрокаНастройки=ОпределитьРабочуюСтроку(СтрПоле.Поле);
		 
		 Если СтрокаНастройки=Неопределено Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 СтрокаНастройки.Отображать				= СтрПоле.Отображать;
		 СтрокаНастройки.ИспользоватьВМакете	= СтрПоле.ИспользоватьВМакете;
		 СтрокаНастройки.ИмяКолонки				= СтрПоле.ИмяКолонки;
		 СтрокаНастройки.ИмяКолонки1			= СтрПоле.ИмяКолонки1;
		 СтрокаНастройки.ИмяКолонки2			= СтрПоле.ИмяКолонки2;
		 СтрокаНастройки.МультиязычныйРеквизит	= СтрПоле.МультиязычныйРеквизит;
		  
	 КонецЦикла;
	 	 		 	
КонецПроцедуры // ПодготовитьТаблицуОтображенияПолей() 
 
Функция ОпределитьРабочуюСтроку(ИмяПоля)
	 		 
	СтрПоле=ТабНастройкаОтображенияПолей.Строки.Найти(ИмяПоля,"ПолеБД",Истина);
	
	Если СтрПоле=Неопределено Тогда
		
		Если СтрНайти(ИмяПоля,".")=0 Тогда 
			
			Возврат Неопределено;
			
		Иначе
			
			Возврат ПолучитьРазыменованноеПоле(ТабНастройкаОтображенияПолей.Строки,ИмяПоля,1);
			
		КонецЕсли;
		
	Иначе
		
		Возврат СтрПоле;
		
	КонецЕсли;
		 
КонецФункции // ОпределитьРабочуюСтроку()

Функция ПолучитьРазыменованноеПоле(КоллекцияСтрок,ИмяПоля,ЧислоШагов)
	
	МассивПутей=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ИмяПоля,".");
	
	ТекущийПуть="";
	
	Для Индекс=1 ПО ЧислоШагов Цикл
		
		ТекущийПуть=ТекущийПуть+"."+МассивПутей[Индекс-1];
		
	КонецЦикла;
	
	ТекущийПуть=Сред(ТекущийПуть,2);
	
	СтрокаРодитель=КоллекцияСтрок.Найти(ТекущийПуть,"ПолеБД",Истина);
	
	Если СтрокаРодитель=Неопределено Тогда
		
		Возврат Неопределено;
		
	ИначеЕсли СтрокаРодитель.Строки.Количество()>0 И ЗначениеЗаполнено(СтрокаРодитель.Строки[0].ПолеБД) Тогда
		
		СтрПоле=СтрокаРодитель.Строки.Найти(ИмяПоля,"ПолеБД",Истина);
		
		Если НЕ СтрПоле=Неопределено Тогда
			
			Возврат СтрПоле;
			
		ИначеЕсли МассивПутей.Количество()>=ЧислоШагов+1 Тогда
			
			Возврат ПолучитьРазыменованноеПоле(СтрокаРодитель.Строки,ИмяПоля,ЧислоШагов+1);
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	Иначе
		
		СтруктураСтрока=СформироватьСтруктуруСтрокиБД(СтрокаРодитель);
		ДанныеОбъекта=СформироватьДанныеОбъекта();
		
		РаботаСПолямиАналитикиУХ.ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта,СтруктураСтрока);
		ВосстановитьДанныеРабочихТаблиц(ДанныеОбъекта.РабочийОбъектАдрес);
		
		СтрокаРодитель.Строки.Очистить();
		
		Для Каждого СтрокаКДобавлению ИЗ СтруктураСтрока.СтрокиКДобавлению Цикл
			
			НоваяСтрока=СтрокаРодитель.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению);
			
			Если СтрокаКДобавлению.СтрокиКДобавлению.Количество()>0 Тогда
				
				ДобавитьПодчиненныеСтроки(СтрокаКДобавлению,НоваяСтрока);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрПоле=СтрокаРодитель.Строки.Найти(ИмяПоля,"ПолеБД",Истина);
		
		Если НЕ СтрПоле=Неопределено Тогда
			
			Возврат СтрПоле;
			
		ИначеЕсли МассивПутей.Количество()>=ЧислоШагов+1 Тогда
			
			Возврат ПолучитьРазыменованноеПоле(СтрокаРодитель.Строки,ИмяПоля,ЧислоШагов+1);
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецФункции // ПолучитьРазыменованноеПоле()

Процедура ДобавитьПодчиненныеСтроки(Строка,ЭлементКоллекции)
	
	Для Каждого СтрокаКДобавлению ИЗ Строка.СтрокиКДобавлению Цикл
		
		НоваяСтрока=ЭлементКоллекции.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКДобавлению);
		
		Если СтрокаКДобавлению.СтрокиКДобавлению.Количество()>0 Тогда
			
			ДобавитьПодчиненныеСтроки(СтрокаКДобавлению,НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ДобавитьПодчиненныеСтроки

Функция СформироватьДанныеОбъекта()
	
	ДанныеОбъекта=Новый Структура;
	ДанныеОбъекта.Вставить("РабочийОбъектАдрес",		ПоместитьВоВременноеХранилище(ПодготовитьДанныеРабочихТаблиц()));
	ДанныеОбъекта.Вставить("УникальныйИдентификатор",	Новый УникальныйИдентификатор);
	ДанныеОбъекта.Вставить("ТекСоединениеВИБ",			);
	ДанныеОбъекта.Вставить("СпособПолучения",			);
	ДанныеОбъекта.Вставить("СпособИспользования",		);
	ДанныеОбъекта.Вставить("ТипБД",						Справочники.ТипыБазДанных.ТекущаяИБ);
	
	Возврат ДанныеОбъекта;
	
КонецФункции // СформироватьСтруктуруСтрокиВИБ()

Функция СформироватьСтруктуруСтрокиБД(ДанныеСтрокиАналитики)
	
	СтрокаБД=Новый Структура;
	СтрокаБД.Вставить("ИспользуетсяВСопоставлении",	ДанныеСтрокиАналитики.Отображать);		
	СтрокаБД.Вставить("НаименованиеБД",				ДанныеСтрокиАналитики.НаименованиеБД);
	СтрокаБД.Вставить("СправочникБД",				ДанныеСтрокиАналитики.СправочникБД);	
	СтрокаБД.Вставить("ПолеБД",				ДанныеСтрокиАналитики.ПолеБД);
	СтрокаБД.Вставить("ТипЗначения",				ДанныеСтрокиАналитики.ТипЗначения);	
	СтрокаБД.Вставить("ТипДанныхПоля",				ДанныеСтрокиАналитики.ТипДанныхПоля);
	СтрокаБД.Вставить("ТипМетаДанных",				ДанныеСтрокиАналитики.ТипМетаДанных);
	СтрокаБД.Вставить("ВидАналитики",				ДанныеСтрокиАналитики.ВидАналитики);

	Возврат СтрокаБД;
	
КонецФункции // СформироватьСтруктуруСтрокиБД()

Функция ПодготовитьДанныеРабочихТаблиц() Экспорт
	
	СтруктураТаблиц=Новый Структура;
	СтруктураТаблиц.Вставить("мТаблицаПоказателейБД"				,мТаблицаПоказателейБД);
	СтруктураТаблиц.Вставить("мТаблицаПроизводныхБД"				,мТаблицаПроизводныхБД);
		
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьДанныеРабочихТаблиц() 

Процедура ВосстановитьДанныеРабочихТаблиц(АдресХранилища) Экспорт
	
	ДанныеТаблиц=ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(ДанныеТаблиц)=Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,ДанныеТаблиц);
		
	КонецЕсли;	
	
КонецПроцедуры // ВосстановитьДанныеРабочихТаблиц(АдресХранилища)

Процедура ПриИзмененииВидаАналитики(ДанныеОбъекта,СтруктураСтрока) Экспорт
	
	ВосстановитьДанныеРабочихТаблиц(ДанныеОбъекта.РабочийОбъектАдрес);
	
	СтрокаБД=мТаблицаПоказателейБД.Найти(СтруктураСтрока.ПолеБД,"ПолеБД");
	
	Если НЕ СтрокаБД=Неопределено Тогда
		
		Если СтрокаБД.ВидАналитики=СтруктураСтрока.ВидАналитики Тогда // Тип данных не менялся, ничего предпринимать не нужно
			
			СтрокаПоказателей=СтрокаБД;
			
		Иначе
			
			мТаблицаПоказателейБД.Удалить(СтрокаБД);
			
			МассивПроизводных=Новый Массив;
			
			Для Каждого Строка ИЗ мТаблицаПроизводныхБД Цикл
				
				Если СтрНайти(Строка.ПолеБД,СтруктураСтрока.ПолеБД)>0 Тогда
					
					МассивПроизводных.Добавить(Строка);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого СтрУдаления ИЗ МассивПроизводных Цикл
				
				мТаблицаПроизводныхБД.Удалить(СтрУдаления);
				
			КонецЦикла;
			
			СтрокаПоказателей=Неопределено;
					
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтруктураСтрока.ВидАналитики) Тогда
		
		Если СтрокаПоказателей=Неопределено Тогда
			
			СтрокаПоказателей=мТаблицаПоказателейБД.Добавить();
			
		КонецЕсли;
		
		СтрокаПоказателей.ПолеБД         = СтруктураСтрока.ПолеБД;
		СтрокаПоказателей.НаименованиеБД = СтруктураСтрока.ПолеБД+": "+Строка(СтруктураСтрока.ВидАналитики);;
		
		СтрокаТип=ОбщегоНазначенияУХ.ПолучитьСтрокуТиповДанныхБД(Неопределено,СтруктураСтрока.ВидАналитики.ТипЗначения,Справочники.ТипыБазДанных.ТекущаяИБ,Ложь);
		РаботаСПолямиАналитикиУХ.ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, СтрокаТип,Справочники.ТипыБазДанных.ТекущаяИБ);
		
		СтрокаПоказателей.ВидАналитики   	= СтруктураСтрока.ВидАналитики;	
		
		ТипДанныхАналитики=СтруктураСтрока.ВидАналитики.ТипЗначения.Типы()[0];
		ТаблицаАналитики=?(ТипДанныхАналитики = Тип("Строка"), "", Метаданные.НайтиПоТипу(ТипДанныхАналитики).ПолноеИмя());
		
		СтрокаПоказателей.ТипМетаДанных  	= ОбщегоНазначенияУХ.ПолучитьНаименованиеСсылочногоТипаБД(Неопределено,ТаблицаАналитики);
		
		СтруктураСтрока.Вставить("СправочникБД",СтрокаПоказателей.СправочникБД);		
		СтруктураСтрока.Вставить("ТипЗначения",	СтрокаПоказателей.ТипЗначения);	
		СтруктураСтрока.Вставить("ТипДанныхПоля",СтрокаПоказателей.ТипДанныхПоля);
		СтруктураСтрока.Вставить("ТипМетаДанных",СтрокаПоказателей.ТипМетаДанных);
		СтруктураСтрока.Вставить("НаименованиеБД",СтрокаПоказателей.НаименованиеБД);
			
		ДанныеОбъекта.РабочийОбъектАдрес=ПоместитьВоВременноеХранилище(ПодготовитьДанныеРабочихТаблиц(),ДанныеОбъекта.УникальныйИдентификатор);
		
		РаботаСПолямиАналитикиУХ.ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта,СтруктураСтрока);
		
	КонецЕсли;
			
КонецПроцедуры // ПриИзмененииВидаАналитики()

Процедура СохранитьНастройкиОтображенияПолей() Экспорт
	
	ПравилаОтображенияПолей.Очистить();
	
	Если Валютная Тогда
		
		ВидАналитикиВалютаДт=ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты;		
		НоваяСтрока=ПравилаОтображенияПолей.Добавить();
		
		НоваяСтрока.Поле					= "АналитикаВалюта.Наименование";
		НоваяСтрока.Синоним					= Строка(ВидАналитикиВалютаДт);
		НоваяСтрока.ИспользоватьВМакете		= Истина;
		НоваяСтрока.ВидАналитики			= ВидАналитикиВалютаДт;
		НоваяСтрока.КодАналитики			= "АналитикаВалюта";
		НоваяСтрока.Отображать				= Истина;
		НоваяСтрока.Ссылочное				= Ложь;
		НоваяСтрока.ТаблицаАналитики		= "Справочник.Валюты";
		НоваяСтрока.ИмяКолонки				= "Валюта";
		НоваяСтрока.МультиязычныйРеквизит	= Ложь;
		
	КонецЕсли;	
			
	МассивСтрокОтображение=ТабНастройкаОтображенияПолей.Строки.НайтиСтроки(Новый Структура("Отображать",Истина),Истина);
	
	Для Каждого СтрПоле ИЗ МассивСтрокОтображение Цикл
		
		НоваяСтрока=ПравилаОтображенияПолей.Добавить();
		
		НоваяСтрока.Поле					= СтрПоле.ПолеБД;
		НоваяСтрока.Синоним					= СтрЗаменить(СтрПоле.ПолеБД,".","_");
		НоваяСтрока.ИспользоватьВМакете		= СтрПоле.ИспользоватьВМакете;
		НоваяСтрока.ВидАналитики			= СтрПоле.ВидАналитики;
		НоваяСтрока.КодАналитики			= Лев(СтрПоле.ПолеБД, СтрНайти(СтрПоле.ПолеБД,".")-1);
		НоваяСтрока.Отображать				= СтрПоле.Отображать;
		НоваяСтрока.Ссылочное				= (НЕ СтрПоле.ТипМетаДанных="Простой");
		НоваяСтрока.ТаблицаАналитики		= СтрПоле.ТаблицаАналитики;
		НоваяСтрока.ИмяКолонки				= СтрПоле.ИмяКолонки;
		НоваяСтрока.ИмяКолонки1				= СтрПоле.ИмяКолонки1;
		НоваяСтрока.ИмяКолонки2				= СтрПоле.ИмяКолонки2;
		НоваяСтрока.МультиязычныйРеквизит	= СтрПоле.МультиязычныйРеквизит;
		НоваяСтрока.АналитикаВидаОтчета		= СтрПоле.АналитикаВидаОтчета;
		
	КонецЦикла;
	
	МассивСтрокМакет=ТабНастройкаОтображенияПолей.Строки.НайтиСтроки(Новый Структура("ИспользоватьВМакете",Истина),Истина);
	
	Для Каждого СтрПоле ИЗ МассивСтрокМакет Цикл
		
		Если ПравилаОтображенияПолей.Найти(СтрПоле.ПолеБД,"Поле")=Неопределено Тогда 
			
			НоваяСтрока=ПравилаОтображенияПолей.Добавить();
			
			НоваяСтрока.Поле					= СтрПоле.ПолеБД;
			НоваяСтрока.Синоним					= СтрЗаменить(СтрПоле.ПолеБД,".","_");
			НоваяСтрока.ИспользоватьВМакете		= СтрПоле.ИспользоватьВМакете;
			НоваяСтрока.ВидАналитики			= СтрПоле.ВидАналитики;
			НоваяСтрока.КодАналитики			= Лев(СтрПоле.ПолеБД, СтрНайти(СтрПоле.ПолеБД,".")-1);
			НоваяСтрока.Отображать				= СтрПоле.Отображать;
			НоваяСтрока.Ссылочное				= (НЕ СтрПоле.ТипМетаДанных="Простой");
			НоваяСтрока.ТаблицаАналитики		= СтрПоле.ТаблицаАналитики;
			НоваяСтрока.ИмяКолонки				= СтрПоле.ИмяКолонки;
			НоваяСтрока.ИмяКолонки1				= СтрПоле.ИмяКолонки1;
			НоваяСтрока.ИмяКолонки2				= СтрПоле.ИмяКолонки2;
			НоваяСтрока.МультиязычныйРеквизит	= СтрПоле.МультиязычныйРеквизит;
			НоваяСтрока.АналитикаВидаОтчета		= СтрПоле.АналитикаВидаОтчета;
			
		КонецЕсли;
		
	КонецЦикла;
	
	АналитикаВГО				= 0;
	АналитикаЭтапПроекта		= 0;
	АналитикаКонтрагент			= 0;
	АналитикаДоговорКонтрагента	= 0;
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		СтрАналитика=ТабНастройкаОтображенияПолей.Строки.Найти("Аналитика"+Индекс,"ПолеБД");
		
		Если ЗначениеЗаполнено(СтрАналитика.ВидАналитики) Тогда
			
			Если НЕ СтрАналитика.АналитикаВидаОтчета Тогда 
				
				ЭтотОбъект["ВидАналитики"+Индекс]=СтрАналитика.ВидАналитики;
				ЭтотОбъект["Аналитика"+Индекс+"Обязательна"]=СтрАналитика.ОбязательнаяАналитика;
				
				Если СтрАналитика.АналитикаВГО Тогда
					
					АналитикаВГО=Индекс;
					
				КонецЕсли;
				
				Если СтрАналитика.АналитикаЭтапПроекта Тогда
					
					АналитикаЭтапПроекта=Индекс;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрАналитика.ВидАналитики=ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникКонтрагенты Тогда
				
				АналитикаКонтрагент=Индекс;
				
			ИначеЕсли СтрАналитика.ВидАналитики=ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникДоговораКонтрагентов Тогда
				
				АналитикаДоговорКонтрагента=Индекс;
				
			КонецЕсли;
					
		Иначе
			
			ЭтотОбъект["ВидАналитики"+Индекс]=Неопределено;
			ЭтотОбъект["Аналитика"+Индекс+"Обязательна"]=Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
						
КонецПроцедуры // СохранитьНастройкиОтображенияПолей()
	
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА

Процедура ОпределитьКоличествоАналитик() Экспорт
	
	ЧислоАналитик = 0;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если ЗначениеЗаполнено(ЭтотОбъект["ВидАналитики" + Инд]) Тогда
			ЧислоАналитик = ЧислоАналитик+1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьПередЗаписью() Экспорт
	
	ЕстьОшибки=Ложь;	
	ОпределенВидАналитики = Ложь;
	МассивАналитик=Новый Массив;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		ТекВидАналитики=ЭтотОбъект["ВидАналитики" + Инд];
		
		Если ЗначениеЗаполнено(ТекВидАналитики) Тогда
			
			ОпределенВидАналитики = Истина;

			Если НЕ ТипЗнч(Владелец)=Тип("СправочникСсылка.ВидыОтчетов") Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если НЕ МассивАналитик.Найти(ТекВидАналитики)=Неопределено Тогда
				
				ТекстОшибки=СтрШаблон(Нстр("ru = 'В составе аналитик уже присутствует вид аналитики %1. Такая ситуация не поддерживается, при необходимости выберите другой вид аналитики того же типа.'"),ТекВидАналитики);
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки, ЕстьОшибки,, СтатусСообщения.Важное);
				Возврат Ложь;
				
			Иначе
				
				МассивАналитик.Добавить(ТекВидАналитики);
								
			КонецЕсли;		
						
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ВидАналитикиВалютаДт) Тогда
		ОпределенВидАналитики = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидАналитикиВалютаКт) Тогда
		ОпределенВидАналитики = Истина;
	КонецЕсли;
	
	Если НЕ ОпределенВидАналитики Тогда
		
		СтрокаШаблона = НСтр("ru = '%1: не определены виды аналитики!'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Наименование), ЕстьОшибки,, СтатусСообщения.Важное);
		КонецЕсли;
		
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	Если НЕ УправлениеОтчетамиУХ.СтрокаМожетИспользоватьсяВКачествеКода(Код) Тогда
		
		СтрокаШаблона = НСтр("ru = '%1: код группы раскрытия задан неверно!'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, СокрЛП(Код)), ЕстьОшибки,, СтатусСообщения.Важное);
		КонецЕсли;
		
		ЕстьОшибки = Истина;
				
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &Владелец
	|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)
	|	И ПоказателиОтчетов.Код = &Код");
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Код", Код);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		
		СтрокаШаблона = НСтр("ru = 'Невозможно записать группу раскрытия с кодом ""%1"": для текущего вида отчета существует показатель с таким кодом!'");
		
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, СокрЛП(Код)), ЕстьОшибки,, СтатусСообщения.Важное);
		КонецЕсли;
		
		ЕстьОшибки = Истина;
					
	КонецЕсли;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если Владелец.Метаданные().Реквизиты.Найти("ВидАналитики" + Инд) = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если (ЭтотОбъект["ВидАналитики" + Инд] <> Ссылка["ВидАналитики" + Инд]) 
		   И ЗначениеЗаполнено(ЭтотОбъект["ВидАналитики" + Инд]) 
		   И ЗначениеЗаполнено(Владелец["ВидАналитики" + Инд]) Тогда
		   
		   СтрокаШаблона = НСтр("ru = 'Невозможно определение вида аналитики %1 для текущей группы раскрытия: вид аналитики определен для вида отчета!'");
		   
		   Если Не ПустаяСтрока(СтрокаШаблона) тогда
			   ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Инд), ЕстьОшибки,, СтатусСообщения.Важное);
		   КонецЕсли;
		   
		   ЕстьОшибки = Истина;
		   
	   КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьОшибки Тогда
		
		ПоследняяЗаполненнаяАналитикаВидаОтчета = 0;
		
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			Если Владелец.Метаданные().Реквизиты.Найти("ВидАналитики" + Инд) = Неопределено Тогда
				Продолжить;
			КонецЕсли;			
			
			Если Владелец["ВидАналитики" + Инд] <> ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка() Тогда
				ПоследняяЗаполненнаяАналитикаВидаОтчета = Инд;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			Если ЭтотОбъект["ВидАналитики" + Инд] <> ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка() И Инд < ПоследняяЗаполненнаяАналитикаВидаОтчета Тогда
				
				СтрокаШаблона = НСтр("ru = 'Невозможно определить вид аналитики %1 на уровне группы раскрытия: ""старшие"" виды аналитики определены на уровне вида отчета!'");
				
				Если Не ПустаяСтрока(СтрокаШаблона) тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Инд), ЕстьОшибки,, СтатусСообщения.Важное);
				КонецЕсли;
				
				ЕстьОшибки = Истина;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если АналитикаВГО > 0 И (НЕ (ЭтотОбъект["ВидАналитики" + АналитикаВГО].ТипЗНачения.СодержитТип(Тип("СправочникСсылка.Организации"))
		ИЛИ ЭтотОбъект["ВидАналитики" + АналитикаВГО].ТипЗНачения.СодержитТип(Тип("СправочникСсылка.Контрагенты")))) Тогда
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Аналитика ВГО должна ссылаться на справочник ""Организационные единицы"" или справочник ""Контрагенты""'"), ЕстьОшибки,,СтатусСообщения.Важное);
		
	КонецЕсли;
	
	Если АналитикаЭтапПроекта > 0 И (НЕ ЭтотОбъект["ВидАналитики" + АналитикаЭтапПроекта].ТипЗНачения.СодержитТип(Тип("СправочникСсылка.Проекты"))) Тогда
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Аналитика этапов проекта должна ссылаться на справочник ""Проекты""'"), ЕстьОшибки,,СтатусСообщения.Важное);
		
	КонецЕсли;
	
	//Проверим корректность установки галки "МультиязычныйРеквизит".
	//Если галка установлена, то в метаданных должен быть аналогичный реквизит, но с постфиксом "1", "2" и т.д.
	
	ТаблицаЯзыков = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТаблицаЯзыков");
	
	Если ТаблицаЯзыков.Количество()>0 Тогда
		
		Для каждого Стр из ПравилаОтображенияПолей Цикл
			Если Стр.МультиязычныйРеквизит Тогда
				
				СтруктураРеквизита = ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(Стр.Поле, ".");
				
				ПолеАналитики = СтруктураРеквизита[СтруктураРеквизита.Количество()-1];
				
				Для каждого СтрЯзык из ТаблицаЯзыков Цикл
					
					ТребуемоеПоле =ПолеАналитики + СтрЯзык.ПорядковыйНомер;
					
					Запрос = Новый Запрос;
					
					Запрос.Текст="Выбрать Первые 1 "+ТребуемоеПоле+" ИЗ "+Стр.ТаблицаАналитики;
					
					Попытка
						
						Результат = Запрос.Выполнить().Выгрузить();
						
					Исключение
						
						СтрокаШаблона = НСтр("ru = 'Ошибка при получении мультиязычного представления для реквизита %1.
						|Возможно, реквизита %2 нет в метаданных.'");
						
						Если Не ПустаяСтрока(СтрокаШаблона) тогда
							ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Стр.Поле, ТребуемоеПоле), ЕстьОшибки,, СтатусСообщения.Важное);
						КонецЕсли;
						
						ЕстьОшибки = Истина;
												
						Стр.МультиязычныйРеквизит=Ложь;
						
					КонецПопытки;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	Возврат НЕ ЕстьОшибки;
	
КонецФункции // ПроверитьПередЗаписью()

Процедура ПодготовитьКЗаписиДанных() Экспорт
	
	Если ТипЗнч(ТабНастройкаОтображенияПолей)=Тип("ДеревоЗначений") Тогда
		СохранитьНастройкиОтображенияПолей();
	Иначе
		ПодготовитьТаблицуОтображенияПолей(Истина);
		СохранитьНастройкиОтображенияПолей();
	КонецЕсли;
	
	Если Валютная Тогда
		
		Если НЕ ЗначениеЗаполнено(ВидАналитикиВалютаДт) Тогда 
			
			ВидАналитикиВалютаДт=ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты;
			
		КонецЕсли;
		
	Иначе
		
		ВидАналитикиВалютаДт="";
		ВидАналитикиВалютаКт="";
		
	КонецЕсли;
	
	ОпределитьКоличествоАналитик();	
	
КонецПроцедуры // ПодготовитьКЗаписиДанных() 
 

// Процедура - обработчик события объекта "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления И (НЕ Ссылка.ПометкаУдаления) И (НЕ Владелец.ПометкаУдаления) И Справочники.ВидыОтчетов.ЕстьЗаписиПоЭлементуСтруктуры(Ссылка) Тогда
		
		ТекстОшибки=Справочники.ВидыОтчетов.ПроверитьВозможностьИзмененияДанныхПоЗлементуСтруктуры(Ссылка);
		
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			
			СтрокаШаблона = НСтр("ru = 'Вид отчета %1, группа раскрытия %2: установка пометки на удаление отменена.
			|%3'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Ссылка.Владелец, Ссылка, ТекстОшибки), Отказ,, СтатусСообщения.Важное);
			КонецЕсли;
			
			Отказ = Истина;
						
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ПодготовитьКЗаписиДанных();	
	Отказ=НЕ ПроверитьПередЗаписью();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
		
	Если ТипЗнч(Владелец)=Тип("СправочникСсылка.ШаблоныТрансформационныхКорректировок") Тогда
		
		ОбщегоНазначенияУХ.УстановитьНовыйПорядковыйНомерПриНеобходимости(ЭтотОбъект, "Владелец");
		Возврат;
		
	КонецЕсли;
	
	Если НЕ(ЭтоНовый()
		ИЛИ УправлениеОтчетамиУХ.ПроверитьНаличиеАналитикиОрганизацииВГруппеРаскрытия(
				ЭтотОбъект)) Тогда
		
		РегистрыСведений.СоответствиеВнутригрупповыхПоказателей.СброситьПризнакВнутригрупповойДляПоказателейГруппыРаскрытия(
			Ссылка);
		
	КонецЕсли;
			
	Если (НЕ (Отказ ИЛИ ЭтоНовый()))  Тогда
		
		Если ПроверитьВыполнитьПереносДанных Тогда
			
			РезультатПроверки=Справочники.ГруппыРаскрытия.ПроверитьНеобходимостьРеструктуризацииДанныхЭлементСтруктуры(ЭтотОбъект,Ссылка);
			
			Если Не РезультатПроверки=Неопределено Тогда
				
				СтруктураДействия=Новый Структура;
				СтруктураДействия.Вставить("ВидОтчета",Владелец);
				
				ИзменениеРаскрытия=Новый Соответствие;
				
				Для Каждого КлючИЗначение ИЗ РезультатПроверки.ИзменениеГруппРаскрытия Цикл
						
					ИзменениеРаскрытия.Вставить(КлючИЗначение.Ключ,Новый Структура("ТаблицаАналитикСтар,ТаблицаАналитикНов,ОчищатьАналитическиеЗначения,ОчищатьСинтетическиеЗначения,ПереноситьЗаписи,ЕстьЗаписиВРегистрах",
					КлючИЗначение.Значение.ТаблицаАналитикСтар,
					КлючИЗначение.Значение.ТаблицаАналитикНов,
					Ложь,
					Ложь,
					Истина,
					КлючИЗначение.Значение.ЕстьЗаписиВРегистрах));
					
				КонецЦикла;
				
				СтруктураДействия.Вставить("ИзменениеРаскрытия",ИзменениеРаскрытия);
				
				Отказ = НЕ Справочники.ВидыОтчетов.ВыполнитьДействияПоРеструктуризации(СтруктураДействия);
				
			КонецЕсли;			
			
		КонецЕсли;
	
		// Запомним значения контролируемых реквизитов до записи
		КонтролируемыеЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Ссылка, "Валютная");
		ДополнительныеСвойства.Вставить("КонтролируемыеЗначения", КонтролируемыеЗначения);
		
	КонецЕсли;
	
	Если НЕ (Отказ ИЛИ АдресПараметровРеструктуризации=Неопределено) Тогда
			
		Отказ = НЕ Справочники.ВидыОтчетов.ВыполнитьДействияПоРеструктуризации(АдресПараметровРеструктуризации);
			
	КонецЕсли;	
		
	Если Не Отказ Тогда
		ОбщегоНазначенияУХ.УстановитьНовыйПорядковыйНомерПриНеобходимости(ЭтотОбъект, "Владелец");
	КонецЕсли;
			
КонецПроцедуры

// Процедура - обработчик события объекта "ПриКопировании".
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ПорядковыйНомер = 0;
	
КонецПроцедуры

// Процедура - обработчик события объекта "ПриЗаписи".
//
Процедура ПриЗаписи(Отказ)
	
	ОбновитьРеквизитыПоказателей(Отказ);
	
	Если Не Отказ
		И ОбщегоНазначения.ПодсистемаСуществует("ПодсистемыУХ.РасчетПоказателей") Тогда
		МодульУправлениеРасчетомПоказателей = ОбщегоНазначения.ОбщийМодуль("УправлениеРасчетомПоказателей");
		МодульУправлениеРасчетомПоказателей.ОчиститьСтруктуруРасчетаПоказателейПоПравилуРасчета(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьРеквизитыПоказателей(Отказ)
	
	Если Отказ Или НЕ ДополнительныеСвойства.Свойство("КонтролируемыеЗначения") Тогда
		Возврат;
	КонецЕсли;
	
	КонтролируемыеЗначения = ДополнительныеСвойства.КонтролируемыеЗначения;
	
	Если Валютная <> КонтролируемыеЗначения.Валютная Тогда
		Справочники.ГруппыРаскрытия.УстановитьПризнакПересчетаВалютныхСумм(Ссылка,Валютная,Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьАналитикиПоСубконто(СтрокаОтбор=Неопределено) Экспорт
	
	ЧислоАналитикДт=0;
	ЧислоАналитикКт=0;
	ТипБД=СчетБД.Владелец.Владелец;
	
	Если РабочаяТаблицаАналитикСчет=Неопределено Тогда
		РабочаяТаблицаАналитикСчет=СчетБД.ВидыСубконто;
	КонецЕсли;
	
	Для Индекс=1 По 3 Цикл
		
		Если РабочаяТаблицаАналитикСчет.Количество()>=Индекс Тогда
			
			Если НЕ (СтрокаОтбор=Неопределено ИЛИ СтрокаОтбор["Субконто"+Индекс+"Используется"]) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			РабочийВидАналитики = Справочники.ГруппыРаскрытия.ПолучитьВидАналитики(ТипБД, РабочаяТаблицаАналитикСчет[Индекс-1], СчетБД);
			
			Если ЗначениеЗаполнено(РабочийВидАналитики) Тогда
				
				ЧислоАналитикДт=ЧислоАналитикДт+1;	
				ЭтотОбъект["ВидАналитики"+ЧислоАналитикДт]= РабочийВидАналитики;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИспользоватьВидыДвижений И Обороты Тогда
		
		ЭтотОбъект["ВидАналитики"+(ЧислоАналитикДт+1)]= ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ВидыДвижений;
		ЧислоАналитикДт=ЧислоАналитикДт+1;
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(КоррСчетБД) Тогда
		
		Если РабочаяТаблицаАналитикКоррСчет=Неопределено Тогда
			РабочаяТаблицаАналитикКоррСчет=КоррСчетБД.ВидыСубконто;
		КонецЕсли;
		
		Для Индекс=1 По 3 Цикл
			
			Если РабочаяТаблицаАналитикКоррСчет.Количество()>=Индекс
				И ЗначениеЗаполнено(РабочаяТаблицаАналитикКоррСчет[Индекс-1].ВидСубконтоСсылка) Тогда
				
				РабочийВидАналитики = Справочники.ГруппыРаскрытия.ПолучитьВидАналитики(ТипБД, РабочаяТаблицаАналитикКоррСчет[Индекс-1], СчетБД);
				
				Если ЗначениеЗаполнено(РабочийВидАналитики) Тогда
					
					ЧислоАналитикКт=ЧислоАналитикКт+1;	
					ЭтотОбъект["ВидАналитики"+(ЧислоАналитикКт+ЧислоАналитикДт)]= РабочийВидАналитики;
					
				КонецЕсли;				
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Индекс = (ЧислоАналитикДт+ЧислоАналитикКт+1) По 6 Цикл
		
		ЭтотОбъект["ВидАналитики"+Индекс]=Неопределено;
		
	КонецЦикла;
				
КонецФункции // ЗаполнитьАналитикиПоСубконто()

/////////////////////////////////////////////////////////////////
//

мТаблицаПоказателейБД         = Новый ТаблицаЗначений;
мТаблицаПоказателейБД.Колонки.Добавить("ПолеБД",          	мОписаниеТиповСтрока);
мТаблицаПоказателейБД.Колонки.Добавить("НаименованиеБД",  	мОписаниеТиповСтрока);
мТаблицаПоказателейБД.Колонки.Добавить("ТипЗначения",		мОписаниеТиповСписокЗначений);
мТаблицаПоказателейБД.Колонки.Добавить("ТипМетаДанных",    	мОписаниеТиповСтрока);
мТаблицаПоказателейБД.Колонки.Добавить("ТипДанныхПоля",		мОписаниеТиповСписокЗначений);
мТаблицаПоказателейБД.Колонки.Добавить("ВидАналитики", 		ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные"));
мТаблицаПоказателейБД.Колонки.Добавить("СправочникБД",    	мОписаниеТиповСтрока);
мТаблицаПоказателейБД.Колонки.Добавить("ТаблицаАналитики",  мОписаниеТиповСтрока);

мТаблицаПоказателейБД.Колонки.Добавить("АналитикаВидаОтчета",мОписаниеТиповБулево);


мТаблицаПроизводныхБД=мТаблицаПоказателейБД.СкопироватьКолонки();

мОписаниеТиповСтрока=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(500);
мОписаниеТиповБулево=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево();
мОписаниеТиповТЗ=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповТЗ();
мОписаниеТиповСписокЗначений=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСписокЗначений();

ОбновитьАналитикуИсточниковДанных=Ложь;
ПроверитьВыполнитьПереносДанных=Ложь;

#КонецЕсли
