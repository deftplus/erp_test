
&НаКлиенте
Перем ТекстПроцедуры;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Считывание параметра ВидОтчета.
	ВидОтчетаПараметр = Справочники.ВидыОтчетов.ПустаяСсылка();
	Если  Параметры.Свойство("Отбор") Тогда
		Если Параметры.Отбор.Свойство("Владелец", ВидОтчетаПараметр) Тогда
			Объект.Владелец = ВидОтчетаПараметр;
		Иначе
			// Форма вызвана без параметра ВидОтчета, не изменяем реквизит Владелец.
		КонецЕсли;
	Иначе
		// Не задан отбор.
	КонецЕсли;
		
	НовыйОтбор                = Показатели.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Владелец");
	НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ПравоеЗначение = Объект.Владелец;
	
	НовыйОтбор                = ТабличноеПолеСтрок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Владелец");
	НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ПравоеЗначение = Объект.Владелец;
	
	НовыйОтбор                = ТабличноеПолеКолонок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Владелец");
	НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ПравоеЗначение = Объект.Владелец;
	
	НовыйОтбор                = ГруппыРаскрытия.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Владелец");
	НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ПравоеЗначение = Объект.Владелец;
	
	Заголовок = Справочники.БланкиОтчетов.СформироватьЗаголовок(Объект.Владелец, Объект.Ссылка, Объект.Наименование);
	
	ФлагУтверждено 	= Объект.Утвержден;
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
		
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		ТаблДокМакет =	Параметры.ЗначениеКопирования.Макет.Получить();
		
	Иначе
		
		ТаблДокМакет   = ТекОбъект.Макет.Получить();
		
	КонецЕсли;
	
	Если ТипЗнч(ТаблДокМакет) = Тип("ТабличныйДокумент") Тогда
		ПолеТабличногоДокументаМакет.Очистить();
		ПолеТабличногоДокументаМакет.Вывести(ТаблДокМакет);
	КонецЕсли;
	
	Параметры.Свойство("КодПоказателяОтображения", КодПоказателяОтображения);
		
	Если Параметры.Свойство("НаименованиеБланка") И (Параметры.НаименованиеБланка <> "") Тогда
		Параметры.Свойство("НаименованиеБланка", Объект.Наименование);
	КонецЕсли;
		
	ПравилоОбработки = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки, Объект.Владелец);
	
	Если НЕ ПравилоОбработки.Владелец=Объект.Владелец Тогда
		
		ПравилоОбработки="";
		
	КонецЕсли;
	
	Справочники.БланкиОтчетов.УстановитьНадписьТипБД(ТипБД_Представление, ПравилоОбработки);
	
	ОбновитьКэшФункцийПоказателей();
	ЗаполнитьПроцедурыРедактирования();
	ОтобразитьНаличиеФункции();
	
	Элементы.ПанельНастроек.Видимость     = ПоказыватьПанель;
	Элементы.ФормаНастройкиБланка.Пометка = ПоказыватьПанель;
	
	ТаблицаПараметров = РеквизитФормыВЗначение("ПараметрыОтчета");
	Справочники.БланкиОтчетов.ЗаполнитьПредустановленныеПараметры(ОБъект.Владелец, ТаблицаПараметров);
	
	ЗначениеВРеквизитФормы(ТаблицаПараметров, "ПараметрыОтчета");
	
	ОстаткиИОборотыПоСчетам=Объект.Владелец.Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость;	
	Элементы.ТабличноеПолеКолонокВидИтогаПоСчету.Видимость=ОстаткиИОборотыПоСчетам;
	
	Элементы.ТабличноеПолеСтрокСчетБД.Видимость=ОстаткиИОборотыПоСчетам;
	
	Элементы.ПоказателиСчетБД.Видимость=ОстаткиИОборотыПоСчетам;
	Элементы.ПоказателиВидИтогаПоСчету.Видимость=ОстаткиИОборотыПоСчетам;
		
	Элементы.ГруппаФормулы.Видимость=Ложь;
	
	Элементы.ГруппаПроизвольныйКод.ПодчиненныеЭлементы.ПроизвольныйКод.Пометка=Ложь;
	
	Если Параметры.Ключ.Пустая() Тогда
		ПоУмолчаниюИмпорт     = Ложь;
		ПоУмолчаниюОтображение= Ложь;
	Иначе
		ПоУмолчаниюИмпорт     = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.БланкДляИмпорта, Объект.Владелец) = Объект.Ссылка;
		ПоУмолчаниюОтображение = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображения, Объект.Владелец) = Объект.Ссылка;
	КонецЕсли;
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		ТаблицаЯзыков = Константы.ДополнительныеЯзыкиВыводаОтчета.Получить().Получить();
		
		Если ТипЗнч(ТаблицаЯзыков) =Тип("ТаблицаЗначений") Тогда
			
			ЗначениеВРеквизитФормы(ТаблицаЯзыков,"ДополнительныеЯзыки");	
			Элементы.Мультиязычный.Видимость=Истина;
						
		Иначе
			
			Элементы.Мультиязычный.Видимость=Ложь;
			
		КонецЕсли;
		
		УстановитьВидимостьДоступностьДопЯзыков();
		
	Иначе
		
		Элементы.ГруппаЯзыки.Видимость=Ложь;
		Элементы.Мультиязычный.Видимость=Ложь;
		
	КонецЕсли;
		
	Элементы.ФормаОтобразитьЯчейкиПоказателей.Пометка=Ложь;
	Элементы.ФормаОтобразитьЯчейкиФормул.Пометка=Ложь;
	
	ТекШиринаТаблицы=ПолеТабличногоДокументаМакет.ШиринаТаблицы;
	ТекВысотаТаблицы=ПолеТабличногоДокументаМакет.ВысотаТаблицы;
	
	Элементы.ФлагУтверждено.Видимость=Константы.ПроверятьУтверждениеНастроекОтчетов.Получить();
	
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(ТекОбъект.Ссылка,,ЭтаФорма.УникальныйИдентификатор);
		Заблокирован=Истина;
		
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось заблокировать бланк отчета для редактирования:
		|		%ОписаниеОшибки%'; 
		|en = 'Cannot lock the report form for editing:
		|		%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		Сообщить(ТекстСообщения);

		ЭтаФорма.ТолькоПросмотр=Истина;
		
	КонецПопытки;
	
	Если Элементы.ФлагУтверждено.Видимость И Объект.Утвержден Тогда
		
		ТекстСообщения = НСтр("ru = 'Бланк отчета утвержден и не подлежит редактированию.
		|Для возможности редактирования снимите флаг ""Утвержден"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		Сообщить(ТекстСообщения);
		
		ЭтаФорма.ТолькоПросмотр=Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьДопЯзыков()
	
	Если Объект.Мультиязычный Тогда
		
		Элементы.Странмца_ДополнительныеЯзыки.Видимость=Истина;
		Элементы.ГруппаЯзыки.Видимость=Истина;
		
		Элементы.ВыводитьДополнительныйЯзык1.Видимость=Ложь;
		Элементы.ВыводитьДополнительныйЯзык2.Видимость=Ложь;
		
		Элементы.ТекстЯзык1.Видимость=Ложь;
		Элементы.ТекстЯзык2.Видимость=Ложь;
		
		Элементы.НомерОсновногоЯзыка.СписокВыбора.Очистить();
		Элементы.НомерОсновногоЯзыка.СписокВыбора.Добавить(0, Метаданные.ОсновнойЯзык.Синоним);
		Элементы.ТекстОсновнойЯзык.Заголовок=Элементы.НомерОсновногоЯзыка.СписокВыбора[0].Представление;
		
		Для Каждого СтрЯзык ИЗ ДополнительныеЯзыки Цикл
			
			Элементы.НомерОсновногоЯзыка.СписокВыбора.Добавить(СтрЯзык.ПорядковыйНомер,СтрЯзык.НаименованиеЯзыка);
			
			Элементы["ВыводитьДополнительныйЯзык"+СтрЯзык.ПорядковыйНомер].Видимость=Истина;
			Элементы["ВыводитьДополнительныйЯзык"+СтрЯзык.ПорядковыйНомер].Заголовок=СтрЯзык.НаименованиеЯзыка;
			
			Элементы["ТекстЯзык"+СтрЯзык.ПорядковыйНомер].Видимость=Истина;
			Элементы["ТекстЯзык"+СтрЯзык.ПорядковыйНомер].Заголовок	=СтрЯзык.НаименованиеЯзыка;

		КонецЦикла;
		
		НомерОсновногоЯзыка=0;
		ЯзыкОтображения=0;
		
		НайтиОбластиТекста();
		
	Иначе
		
		Элементы.ГруппаЯзыки.Видимость=Ложь;
		Элементы.Странмца_ДополнительныеЯзыки.Видимость=Ложь;
		
		Если ЯзыкОтображения>0 Тогда
			
			ДополнительныеЯзыкиУХ.ПеревестиТекстыОбластей(ПолеТабличногоДокументаМакет,ЯзыкОтображения,0,Объект.Владелец,РеквизитФормыВЗначение("ТекстыОбластейДополнительныеЯзыки"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьДоступностьДопЯзыков()

// Управляет доступностью элементов на форме.
&НаКлиенте
Процедура УправлениеДоступностью()
	Элементы.ИмяЛиста.ТолькоПросмотр = НЕ ПоУмолчаниюИмпорт;	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЧерныйЦвет = Новый Цвет(0,0,0);
	
	Если ЦветФонаНаименования = ЧерныйЦвет Тогда
		ЦветФонаНаименования = Новый Цвет(255, 255, 255);
	КонецЕсли;
	
	Если ЦветФонаОбластиВычисляемогоПоказателя = ЧерныйЦвет Тогда
		ЦветФонаОбластиВычисляемогоПоказателя = Новый Цвет(192, 220, 192);
	КонецЕсли;
	
	Если ЦветФонаОбластиЗаполняемогоПоказателя = ЧерныйЦвет Тогда
		ЦветФонаОбластиЗаполняемогоПоказателя = Новый Цвет(255, 255, 192);
	КонецЕсли;
	
	Если ЦветФонаОбластиПараметра = ЧерныйЦвет Тогда
		ЦветФонаОбластиПараметра = Новый Цвет(213, 238, 255);
	КонецЕсли;
	
	УстановитьОформлениеДляСпискаСтрокПоказателейИКолонок();
	УстановитьДоступностьКомандСопоставления();
	УправлениеДоступностью();
	
	Если ЗначениеЗаполнено(КодПоказателяОтображения) Тогда
		ТекВыделеннаяОбласть = ПолеТабличногоДокументаМакет.Области.Найти(СокрЛП(КодПоказателяОтображения));
		Если ТекВыделеннаяОбласть = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		Иначе
			Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть = ТекВыделеннаяОбласть;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбработкаВыполнена = Ложь;
	
	Источник = ИсточникВыбора.ИмяФормы;
	
	Если Источник = "Справочник.ИсточникиДанныхДляРасчетов.Форма.ФормаВыбора" Тогда
		
		ОбработкаВыполнена = Истина;
		
		ВставитьТекстВФормулу(ПолучитьПредставлениеИсточниковДанных(ВыбранноеЗначение));
		
	ИначеЕсли Источник="Справочник.ПоказателиОтчетов.Форма.ФормаВыбора" Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
			ТекВидОтчета=ВыбранноеЗначение.ВидОтчета;
			МассивПоказателей=ВыбранноеЗначение.МассивПоказателей;
			
			Если ПроизвольныйКод Тогда
				
				Для Каждого СтрПоказатель ИЗ МассивПоказателей Цикл
					
					ТекстВставки=ТекстВставки+?(ТекВидОтчета=Объект.Владелец,СтрПоказатель.Значение,СтрПоказатель.Представление)+" ";
					
				КонецЦикла;
				
				ПТД = Элементы.ПолеТекстовогоДокументаПроцедура;
				
				ПТД.ВыделенныйТекст=ТекстВставки;
				
				ОбработкаВыполнена = Истина;
				
			Иначе
				
				Для Каждого СтрПоказатель ИЗ МассивПоказателей Цикл
					
					СтруктураДанных=Новый Структура;
					
					Если ТипЗнч(СтрПоказатель.Значение)=Тип("Строка") Тогда	
						СтруктураДанных.Вставить("ТекстПоказатель",СтрПоказатель.Значение);
					Иначе
						СтруктураДанных.Вставить("ИсхПоказатель",СтрПоказатель.Значение);
					КонецЕсли;
					
					СтруктураДанных.Вставить("ВидОтчета",ТекВидОтчета);
					СтруктураДанных.Вставить("КодПоказателя");
					СтруктураДанных.Вставить("ПоказательОтбор");
					СтруктураДанных.Вставить("НазначениеРасчетов", ПравилоОбработки);
					СтруктураДанных.Вставить("ПотребительРасчета", ПотребительРасчета);
					
					СтруктураДанных.Вставить("СпособИспользования",ПредопределенноеЗначение("Перечисление.СпособыИспользованияОперандов.ДляФормулРасчета"));
					
					СтруктураДанных.Вставить("ЕстьАналогичныйПоказатель",Ложь);
					СтруктураДанных.Вставить("СдвигПериодов",0);
					СтруктураДанных.Вставить("КодСуществующегоОперанда");
					СтруктураДанных.Вставить("КодОперанда");
					СтруктураДанных.Вставить("ВставитьТекстВФормулу",Ложь);
					
					Если НЕ СоздатьИсточникДанных(СтруктураДанных) Тогда // Определяем причину отказа
						
						Если СтруктураДанных.ЕстьАналогичныйПоказатель
							И ЗначениеЗаполнено(СтруктураДанных.ПоказательОтбор) Тогда
								
							ТекстВставки=СтруктураДанных.КодУпрощеннойФормулы+" ";
							ВставитьТекстВФормулу(ТекстВставки);
							ОбработкаВыполнена = Истина;	
							
						КонецЕсли;
						
					Иначе
						
						Если СтруктураДанных.ВставитьТекстВФормулу Тогда
							
							ТекстВставки=СтруктураДанных.КодУпрощеннойФормулы+" ";
							ВставитьТекстВФормулу(ТекстВставки);
							ОбработкаВыполнена = Истина;
							
						КонецЕсли;	
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;		
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если НЕ ОбработкаВыполнена Тогда
		
		СтрокаШаблона = Нстр("ru = 'Не выполнена обработка выбора от %1'");
		
		Если ЗначениеЗаполнено(СтрокаШаблона) тогда
			Сообщить(СтрШаблон(СтрокаШаблона, Источник));
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
	Если ИмяСобытия = "МакетСформирован" И Источник = ЭтаФорма Тогда
		
		ОбновитьПолеМакета(Параметр);
		Модифицированность = Истина;
				
	ИначеЕсли ИмяСобытия="ИзмененаФормулаРасчета" Тогда
		
		СтрПоказатель=КэшФункцийПоказателей.НайтиСтроки(Новый Структура("Ссылка",Параметр.ПотребительРасчета));
		
		Если Не СтрПоказатель.Количество()=0 Тогда
			
			СтрПоказатель[0].Процедура=Параметр.ТекстПроцедуры;
			СтрПоказатель[0].ПроцедураРедактирования=Параметр.ПроцедураРедактирования;
			СтрПоказатель[0].ПроизвольныйКод=Параметр.ПроизвольныйКод;
			
			Если РежимРедактированияФормул Тогда
				
				Если ПотребительРасчета=Параметр.ПотребительРасчета Тогда
					
					ПолеТекстовогоДокументаПроцедура.УстановитьТекст(Параметр.ПроцедураРедактирования);
					
				КонецЕсли;
				
				ТекОбласть=ПолеТабличногоДокументаМакет.Области.Найти(СтрПоказатель[0].Код);
				
				Если НЕ ТекОбласть=Неопределено Тогда
					
					ТекОбласть.Текст=Параметр.ПроцедураРедактирования;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТекАктуальностьПараметрики=Ложь;
			
		КонецЕсли;
		
		Если РежимРедактированияФормул Тогда
			ИзменитьРежимРедактирования();
		КонецЕсли;
				
	ИначеЕсли ИмяСобытия="ИзмененаФормулаВычисления" Тогда
		
		//ПолеТекстовогоДокументаПроцедура.УстановитьТекст(Параметр.ТекстПроцедуры);
		ТекстПроцедуры = Параметр.ТекстПроцедуры;
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьТекстПроцедуры", 0.1, Истина);
		
		ТекАктуальностьПараметрики=Ложь;
				
	ИначеЕсли ИмяСобытия="ВыбраныАдресаПоказателей" И ТипЗнч(Параметр)=Тип("Структура") Тогда
		
		ВидОтчетаОтбор=Параметр.ВидОтчета;
		ТекстВставки="";
		
		Для Каждого Адрес ИЗ Параметр.МассивПоказателей Цикл
			
			ТекстВставки = ТекстВставки + Параметр.КодВидаОтчета+"{"+Адрес+"} + ";

		КонецЦикла;
		
		ВставитьТекстВФормулу(Лев(ТекстВставки, СтрДлина(ТекстВставки) - 2));
		
	ИначеЕсли ИмяСобытия="ИзмененИсточникДанных" И ТипЗнч(Параметр)=Тип("Структура") И РежимРедактированияФормул Тогда
		
		Элементы.ПолеТекстовогоДокументаПроцедура.ВыделенныйТекст=Параметр.КодУпрощеннойФормулы;
		ТекАктуальностьПараметрики=Ложь;
		
	ИначеЕсли ИмяСобытия="ВыбранИтогПоСчету" Тогда
		
		Элементы.ПолеТекстовогоДокументаПроцедура.ВыделенныйТекст=Параметр;
		
	ИначеЕсли ИмяСобытия="ЗаписанИсточникДанных" Тогда
		
		ОбработатьИзменениеИсточникаДанных(Параметр);
		
	ИначеЕсли ИмяСобытия="Справочник.ПоказателиОтчетов.ПослеЗаписи" Тогда
		
		ПроверитьТипЯчейкиПоказателя(Параметр);
		
	ИначеЕсли ИмяСобытия="ЗаписанНовыйПоказательОтчета" Тогда
		
		ОбновитьКэшФункцийПоказателей();
						
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьТипЯчейкиПоказателя(ДанныеПоказателя)
	
	Прочитать();
		
	ТипЗначенияОбласти=ОбщегоНазначенияУХ.ПолучитьОписаниеТипаПоТипуПоказателя(ДанныеПоказателя.ТипЗначения);
	
	Для Каждого Область ИЗ ПолеТабличногоДокументаМакет.Области Цикл
		
		Если (Область.Имя=ДанныеПоказателя.Код ИЛИ СтрНайти(Область.Имя,"_Показатель_"+ДанныеПоказателя.Код)>0)
			И Область.СодержитЗначение Тогда
			
			Область.ТипЗначения=ТипЗначенияОбласти;
			
		КонецЕсли;
		
	КонецЦикла;
					
КонецПроцедуры // ПроверитьТипЯчейкиПоказателя()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		
		Если Модифицированность ИЛИ ИзмененаФормулаРасчета Тогда
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИзмененаФормулаРасчета Тогда
		
		Ответ = Неопределено;
		
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		
		СтрокаШаблона = Нстр("ru = 'Текст формулы расчета показателя %1 был изменен. Записать?'");
		
		ТекстВопроса = "";
		Если Не ПустаяСтрока(СтрокаШаблона) тогда								
			ТекстВопроса = СтрШаблон(СтрокаШаблона, ПотребительРасчета);
		КонецЕсли;
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
	РазблокироватьДанные();
	
КонецПроцедуры

&НаСервере
Процедура РазблокироватьДанные()
	
	РазблокироватьДанныеДляРедактирования(Объект.Ссылка,ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры // РазблокироватьДанные()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если РежимРедактированияФормул Тогда
		
		ЗаписатьПроцедуруРасчета(СформироватьСтруктуруДляЗаписиФормулы());
		ЗакрытьПанельФормул();
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	МассивИменОбластей = Новый Массив;	
		
	Для Каждого Обл Из ПолеТабличногоДокументаМакет.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Обл.СодержитЗначение <> Истина
		   И СтрНайти(Обл.Имя, "Строка_") + СтрНайти(Обл.Имя, "Колонка_") + СтрНайти(Обл.Имя, "_Шапка") = 0 Тогда
			МассивИменОбластей.Добавить(Обл.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Если ЯзыкОтображения>0 Тогда
		
		НомерОсновногоЯзыка=0;
		ОбновитьОтображениеЯзыков();
		
	КонецЕсли;

	ТекущийОбъект.ФиксацияСверху = ПолеТабличногоДокументаМакет.ФиксацияСверху;
	ТекущийОбъект.ФиксацияСлева  = ПолеТабличногоДокументаМакет.ФиксацияСлева;
	
	Справочники.БланкиОтчетов.ОбновитьСвойстваОбластейПоказателя(ПолеТабличногоДокументаМакет,Объект.Владелец);
	
	ТаблДок = Новый ТабличныйДокумент;
	ТаблДок.Вывести(ПолеТабличногоДокументаМакет);
	ТаблДок.ОриентацияСтраницы = ПолеТабличногоДокументаМакет.ОриентацияСтраницы;
	
	СкрытьШапкуИПодвал();
	СохранитьМакетВХранилищеЗначений(ТекущийОбъект, ТаблДок);
	ОтобразитьШапкуИПодвал();
	
	Для Инд = 1 По 2 Цикл
		
		Если Элементы["Язык" + Инд].Видимость Тогда
			ТаблДок = Новый ТабличныйДокумент;
			ТаблДок.Вывести(ЭтаФорма["Макет" + Инд]);
			СохранитьМакетВХранилищеЗначений(ТекущийОбъект, ТаблДок, , Инд);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПоУмолчаниюИмпорт Тогда
		ПоУмолчаниюИмпорт=УстановитьПроцедуруПоУмолчанию(Объект.Ссылка, Объект.Владелец, Истина);
	КонецЕсли;
	
	Если ПоУмолчаниюОтображение Тогда
		ПоУмолчаниюОтображение=УстановитьПроцедуруПоУмолчанию(Объект.Ссылка, Объект.Владелец, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Заголовок = Справочники.БланкиОтчетов.СформироватьЗаголовок(Объект.Владелец, Объект.Ссылка, Объект.Наименование);
	
	Если Объект.Мультиязычный Тогда
		
		ЗаписатьНовыеТекстыПредставления();
		НайтиОбластиТекста();
		
	КонецЕсли;
	
	ПодготовитьДанныеРасчетов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНовыеТекстыПредставления()
	
	ТекТаблицаТекстов=РеквизитФормыВЗначение("ТекстыОбластейДополнительныеЯзыки");
	ДополнительныеЯзыкиУХ.ЗаписатьДанныеВРегистрТекстов(ТекТаблицаТекстов.Скопировать(Новый Структура("ДанныеИзменены",Истина)));	
	
КонецПроцедуры // ЗаписатьНовыеТекстыПредставления() 

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ.
//

&НаКлиенте
Процедура СкопироватьОсновнойМакет(Команда)
	
	
	ИспользуетсяМакет1 = Элементы.Язык1.Видимость;
	ИспользуетсяМакет2 = Элементы.Язык2.Видимость;
	
	Если ИспользуетсяМакет1 ИЛИ ИспользуетсяМакет2 Тогда
		
		Ответ = Неопределено;
		ДопПараметры = Новый Структура("ИспользуетсяМакет1, ИспользуетсяМакет2", ИспользуетсяМакет1, ИспользуетсяМакет2);
		Оповещение = Новый ОписаниеОповещения("Подключаемый_СкопироватьОсновнойМакетЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение, Нстр("ru = 'Попытаться перевести наименования строк и колонок на язык макета?'"), РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СкопироватьОсновнойМакетЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ИспользуетсяМакет1 = ДополнительныеПараметры.ИспользуетсяМакет1;
    ИспользуетсяМакет2 = ДополнительныеПараметры.ИспользуетсяМакет2;    
    
    Ответ = РезультатВопроса;
    ПеревестиНаЯзык = (Ответ = КодВозвратаДиалога.Да);
    СкопироватьМакеты(ИспользуетсяМакет1, ИспользуетсяМакет2, ПеревестиНаЯзык);

КонецПроцедуры

&НаСервере
Процедура ОбновитьКэшФункцийПоказателей(Показатель = Неопределено)
	
	ТаблицаКэшФункцийПоказателей = РеквизитФормыВЗначение("КэшФункцийПоказателей");
	Справочники.ВидыОтчетов.ЗаполнитьКэшПоказателей(ТаблицаКэшФункцийПоказателей, Показатель, ПравилоОбработки, Объект.Владелец);
	ЗначениеВРеквизитФормы(ТаблицаКэшФункцийПоказателей, "КэшФункцийПоказателей");
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоказателиОтчетов.Ссылка
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &Владелец
	|	И ПоказателиОтчетов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость)
	|	И НЕ ПоказателиОтчетов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец",Объект.Владелец);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		
		Элементы.НадписьПравилоОбработки.Видимость=Истина;
		
		Если ПравилоОбработки.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
			
			СтрокаШаблона = Нстр("ru = 'Остатки и обороты по счетам заполняются по данным другого отчета, связанного с планом счетов: %1'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				
				Если ЗначениеЗаполнено(ПравилоОбработки.ВидОтчетаОСВ) Тогда
					
					ТекстПравило = СтрШаблон(СтрокаШаблона, ПравилоОбработки.ВидОтчетаОСВ);
					
				Иначе
					
					ТекстПравило = СтрШаблон(СтрокаШаблона, НСтр("ru = ' <не указан>'"));
					
				КонецЕсли;
				
			КонецЕсли;
				
		ИначеЕсли ПравилоОбработки.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
			
			СтрокаШаблона = Нстр("ru = 'Остатки и обороты по счетам заполняются по данным регистра бухгалтерии текущей ИБ: %1'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				
				Если ЗначениеЗаполнено(ПравилоОбработки.РегистрБухгалтерииПоУмолчанию) Тогда
					
					ТекстПравило = СтрШаблон(СтрокаШаблона, ПравилоОбработки.РегистрБухгалтерииПоУмолчанию);
					
				Иначе
					
					ТекстПравило = СтрШаблон(СтрокаШаблона, НСтр("ru = ' <не указан>'"));
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ПравилоОбработки.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
			ИЛИ ПравилоОбработки.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов Тогда
			
			СтрокаШаблона = Нстр("ru = 'Остатки и обороты по счетам заполняются по данным регистра бухгалтерии внешней базы %1'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				
				Если ЗначениеЗаполнено(ПравилоОбработки.РегистрБухгалтерииПоУмолчанию) Тогда
					
					ТекстПравило = СтрШаблон(СтрокаШаблона, Строка(ПравилоОбработки.РегистрБухгалтерииПоУмолчанию.Владелец) + ": " + Строка(ПравилоОбработки.РегистрБухгалтерииПоУмолчанию));
					
				Иначе
					
					ТекстПравило = СтрШаблон(СтрокаШаблона, НСтр("ru = ': <не указан>'"));
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ТекстПравило = Нстр("ru = 'Остатки и обороты по счетам: общий источник заполнения не указан.'");
	
		КонецЕсли;
		
		Элементы.НадписьПравилоОбработки.Заголовок=ТекстПравило;
		
	Иначе
		
		Элементы.НадписьПравилоОбработки.Видимость		= Ложь;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОтобразитьНаличиеФункции()
	
	ТаблДок = ПолеТабличногоДокументаМакет;
	Элементы.ТекущийПоказатель.СписокВыбора.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеДляСпискаСтрокПоказателейИКолонок()
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТабличноеПолеСтрок.НеРедактируется");
	ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	НовоеПолеОформления = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	НовоеПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТабличноеПолеСтрок");
	
	НовоеУсловноеОформление.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФонаОбластиЗаполняемогоПоказателя);
	НовоеУсловноеОформление.Использование = Истина;
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТабличноеПолеСтрок.НеРедактируется");
	ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	НовоеПолеОформления = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	НовоеПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТабличноеПолеСтрок");
	
	НовоеУсловноеОформление.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФонаОбластиВычисляемогоПоказателя);
	НовоеУсловноеОформление.Использование = Истина;
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТабличноеПолеКолонок.НеРедактируется");
	ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	НовоеПолеОформления = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	НовоеПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТабличноеПолеКолонок");
	
	НовоеУсловноеОформление.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФонаОбластиЗаполняемогоПоказателя);
	НовоеУсловноеОформление.Использование = Истина;
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТабличноеПолеКолонок.НеРедактируется");
	ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	НовоеПолеОформления = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	НовоеПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТабличноеПолеКолонок");
	
	НовоеУсловноеОформление.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФонаОбластиВычисляемогоПоказателя);
	НовоеУсловноеОформление.Использование = Истина;
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Показатели.НеРедактируется");
	ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	НовоеПолеОформления = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	НовоеПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Показатели");
	
	НовоеУсловноеОформление.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФонаОбластиЗаполняемогоПоказателя);
	НовоеУсловноеОформление.Использование = Истина;
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Показатели.НеРедактируется");
	ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	НовоеПолеОформления = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	НовоеПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Показатели");
	
	НовоеУсловноеОформление.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФонаОбластиВычисляемогоПоказателя);
	НовоеУсловноеОформление.Использование = Истина;

	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеРасчетов()
	
	УправлениеОтчетамиУХ.СформироватьДанныеРегистраПараметрическихНастроек(ПравилоОбработки);	
	ОбновитьКэшФункцийПоказателей();
	ЗаполнитьПроцедурыРедактирования();
		
КонецПроцедуры // ПодготовитьДанныеРасчетов() 

&НаКлиенте
Процедура ВыделитьОБласть(ИмяОбласти)
	
	ТекОбласть = ПолеТабличногоДокументаМакет.Области.Найти(ТекущийПоказатель);
	Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть = ТекОбласть;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПоказательПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ТекущийПоказатель) Тогда
		ВыделитьОБласть(ТекущийПоказатель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетПриАктивизацииОбласти(Элемент)
	
	ТекущаяОбласть = ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	
	Если Не (ПустаяСтрока(ВыделеннаяОбласть) ИЛИ ВыделеннаяОбласть=ТекущаяОбласть.Имя) Тогда
		
		ПолеТабличногоДокументаМакет.Области.Найти(ВыделеннаяОбласть).ЦветФона=ЦветФонаВыделеннойОбласти;
		ВыделеннаяОбласть="";
		
	КонецЕсли;
		
	Если ТипЗнч(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
		
		ТекущаяОбласть.Защита = Истина;
		
	ИначеЕсли ТипЗнч(ТекущаяОбласть) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		ТекЗаписьКэша = КэшФункцийПоказателей.НайтиСтроки(Новый Структура("Код", ТекущаяОбласть.Имя));
		
		Если ТекЗаписьКэша.Количество() = 0 Тогда
			
			Формула = "";
			СписокПоказателей = "";
			ТекущийПоказатель="";
			
		Иначе
			
			Формула = ?(ЗначениеЗаполнено(ТекЗаписьКэша[0].ПроцедураРедактирования), ТекЗаписьКэша[0].ПроцедураРедактирования, "");
									
		КонецЕсли;
		
		ТекущийПоказатель = ТекущаяОбласть.Имя;
		
		Если Объект.Мультиязычный Тогда
			
			СтрТекст=ТекстыОбластейДополнительныеЯзыки.НайтиСтроки(ПолучитьКоординатыОбласти(ТекущаяОбласть));
			
			Если СтрТекст.Количество()>0 Тогда
				
				Элементы.ТекстыОбластейДополнительныеЯзыки.ТекущаяСтрока=СтрТекст[0].ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКоординатыОбласти(Область)
	
	КоординатыОбласти=Новый Структура;
	КоординатыОбласти.Вставить("Лево",	Область.Лево);
	КоординатыОбласти.Вставить("Право",	Область.Право);
	КоординатыОбласти.Вставить("Верх",	Область.Верх);
	КоординатыОбласти.Вставить("Низ",	Область.Низ);
	
	Возврат КоординатыОбласти;
	
КонецФункции // ПолучитьКоординатыОбласти()

&НаКлиенте
Функция ПолучитьТекущуюКолонкуТекстов()
	
	Возврат "Наименование"+?(ЯзыкОтображения=0,"",ЯзыкОтображения);
	
КонецФункции // ПолучитьТекущуюКолонкуТекстов()

&НаКлиенте
Процедура ПравилоОбработкиПриИзменении(Элемент)
	
	ОбработкаИзмененияПравилаОбработки();
	
	Если Элементы.ФормаОтобразитьЯчейкиФормул.Пометка Тогда
		
		Для Каждого СтрПоказатель ИЗ КэшФункцийПоказателей Цикл
			
			УстановитьТекстОбласти(СтрПоказатель.Код,?(ПустаяСтрока(СтрПоказатель.ПроцедураРедактирования),СтрПоказатель.Процедура,СтрПоказатель.ПроцедураРедактирования));
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаИзмененияПравилаОбработки()
	
	Справочники.БланкиОтчетов.УстановитьНадписьТипБД(ТипБД_Представление, ПравилоОбработки);
	ОбновитьКэшФункцийПоказателей();
	ЗаполнитьПроцедурыРедактирования();
	ОтобразитьНаличиеФункции();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиБланка(Команда)
	
	Элементы.ФормаНастройкиБланка.Пометка = НЕ Элементы.ФормаНастройкиБланка.Пометка;
	ПоказыватьПанель = Элементы.ФормаНастройкиБланка.Пометка;
	Элементы.ПанельНастроек.Видимость     = ПоказыватьПанель;
	УстановитьДоступностьКомандСопоставления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ПараметрыПеретаскивания.Значение = "Параметры." + СокрЛП(Элемент.ДанныеСтроки(ПараметрыПеретаскивания.Значение[0]).Код);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьРеквизитыЭлемента(СсылкаНаОбъект, МассивРеквизитов)
	
	МассивРеквизитов = ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(МассивРеквизитов, ",");
	СтруктураОтвета = Новый Структура;
	Для Каждого ТекущийРеквизит Из МассивРеквизитов Цикл
		ИмяРеквизита = СокрЛП(ТекущийРеквизит);
		СтруктураОтвета.Вставить(ИмяРеквизита, СсылкаНаОбъект[ИмяРеквизита]);
	КонецЦикла;
	
	Возврат СтруктураОтвета;
	
КонецФункции

&НаКлиенте
Процедура ПоказателиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ТекстПараметр = "";
	
	Для Каждого ТекСтр Из ПараметрыПеретаскивания.Значение Цикл
		
		Стр = ВернутьРеквизитыЭлемента(ТекСтр, "Код, Владелец");
		Если Стр.Владелец = Объект.Владелец Тогда
			ТекстПараметр = ТекстПараметр +  "Показатели." + СокрЛП(Стр.Код) + Символы.ПС;
		Иначе
			ТекстПараметр = ТекстПараметр +  "ЗначениеПоказателя(""" + СокрЛП(Стр.Код) + """, """ + СокрЛП(Стр.Владелец.Код) + """)" + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПеретаскивания.Значение = ?(ПустаяСтрока(ТекстПараметр), ТекстПараметр, Лев(ТекстПараметр, СтрДлина(ТекстПараметр) - 1));

	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	Стр =  ПараметрыПеретаскивания.Значение;
	
	Если ТипЗнч(Стр) = Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если Лев(Стр, СтрДлина("Параметры.")) = "Параметры."
	 ИЛИ Лев(Стр, СтрДлина("Показатели.")) = "Показатели." Тогда
	 	Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	СтандартнаяОбработка = Ложь;                                     

КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	Если НЕ ЯзыкОтображения=0 Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Редактирование макета возможно только при отображении на основном языке '"));
		Возврат;
		
	КонецЕсли;
		
	СтандартнаяОбработка = Ложь;
	Параметр = ПараметрыПеретаскивания.Значение;
		
	Если ТипЗнч(Параметр) = Тип("Массив") Тогда
		
		Если Параметр.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Параметр[0]) = Тип("СправочникСсылка.СтрокиОтчетов") Тогда
		
			ИндС = Область.Верх;
			Для Каждого Вн_ТекСтр Из Параметр Цикл
				ТекСтр = ВернутьРеквизитыЭлемента(Вн_ТекСтр, "Код, Наименование");
				КодСтроки = "Строка_" + СокрЛП(ТекСтр.Код);
			
				ТекОбласть = ПолеТабличногоДокументаМакет.Области.Найти(КодСтроки);
				Если ТекОбласть <> Неопределено Тогда
					
					СтрокаШаблона = Нстр("ru = 'Область с именем ""%1"" уже присутствует в макете.'");
					
					Если ЗначениеЗаполнено(СтрокаШаблона) тогда
						Сообщить(СтрШаблон(СтрокаШаблона, КодСтроки), СтатусСообщения.Внимание);
					КонецЕсли;
					
					Продолжить;
				КонецЕсли;
				
				Обл     = ПолеТабличногоДокументаМакет.Область(ИндС, Область.Лево);
				Обл.Имя = КодСтроки;
						
				ИндС = Обл.Низ + 1;
				Модифицированность = Истина;
				
			КонецЦикла;
		
			Возврат;
		КонецЕсли;
	
		Если ТипЗнч(Параметр[0]) = Тип("СправочникСсылка.КолонкиОтчетов") Тогда
		
			ИндК = Область.Лево;
			Для Каждого Вн_ТекСтр Из Параметр Цикл
				ТекСтр = ВернутьРеквизитыЭлемента(Вн_ТекСтр, "Код, Наименование");
				КодСтроки = "Колонка_" + СокрЛП(ТекСтр.Код);
			
				ТекОбласть = ПолеТабличногоДокументаМакет.Области.Найти(КодСтроки);
				Если ТекОбласть <> Неопределено Тогда
					
					СтрокаШаблона = Нстр("ru = 'Область с именем ""%1"" уже присутствует в макете.'");
					
					Если ЗначениеЗаполнено(СтрокаШаблона) тогда
						Сообщить(СтрШаблон(СтрокаШаблона, КодСтроки), СтатусСообщения.Внимание);
					КонецЕсли;
					
					Продолжить;
				КонецЕсли;
				
				Обл     = ПолеТабличногоДокументаМакет.Область(Область.Верх, ИндК);
				Обл.Имя = КодСтроки;
						
				ИндК = Обл.Право + 1;
				Модифицированность = Истина;
				
			КонецЦикла;
		
			Возврат;
		КонецЕсли;
	
	КонецЕсли;

	МассивСуществующихОбластей=Новый Массив;
	
	Если ТипЗнч(Параметр) = Тип("Строка") И (СтрЧислоВхождений(Параметр, "Параметры.") + СтрЧислоВхождений(Параметр, "Показатели.") <> 0) Тогда
		Если СтрЧислоВхождений(Параметр, "Параметры.") <> 0 Тогда // это параметры
			Параметр = СтрЗаменить(Параметр, "Параметры.", "");
			Элементы.ПолеТабличногоДокументаМакет.ПолучитьВыделенныеОбласти().Очистить();
			Для Инд = 1 По СтрЧислоСтрок(Параметр) Цикл
				ТекСтр = СтрПолучитьСтроку(Параметр, Инд);
				Если НЕ ПустаяСтрока(ТекСтр) Тогда
					СтрокиПараметр = ПараметрыОтчета.НайтиСтроки(Новый Структура("Код", СокрЛП(ТекСтр)));
					Если СтрокиПараметр.Количество() > 0 Тогда
						СтрокаПараметр = СтрокиПараметр[0];
						СоотвОбл = ПолеТабличногоДокументаМакет.Области.Найти(СокрЛП(СтрокаПараметр.Код));
						Если СоотвОбл <> Неопределено Тогда
							
							СтрокаШаблона = Нстр("ru = 'Область с именем ""%1"" уже присутствует в макете.'");
							
							Если ЗначениеЗаполнено(СтрокаШаблона) тогда
								Сообщить(СтрШаблон(СтрокаШаблона, СокрЛП(СтрокаПараметр.Код)), СтатусСообщения.Внимание);
							КонецЕсли;
							
							МассивСуществующихОбластей.Добавить(СоотвОбл.Имя);
							Продолжить;
							
						Иначе
							Обл1 = ПолеТабличногоДокументаМакет.Область(Область.Верх + (Инд - 1), Область.Лево, Область.Верх + (Инд - 1), Область.Лево);
							Обл2 = ПолеТабличногоДокументаМакет.Область(Обл1.Верх, Обл1.Лево + 1, Обл1.Верх, Обл1.Лево + 1);
						
								Обл1.Имя = СокрЛП(СтрокаПараметр.Код);
								Обл1.СодержитЗначение = Истина;
								Модифицированность = Истина;
								Попытка
									Обл1.ТипЗначения = Новый ОписаниеТипов();
								Исключение
									
									СтрокаШаблона = Нстр("ru = 'Не удалось установить тип значения для показателя ""%1""!'");
									
									Если ЗначениеЗаполнено(СтрокаШаблона) тогда
										Сообщить(СтрШаблон(СтрокаШаблона, СокрЛП(СтрокаПараметр.Код)), СтатусСообщения.Внимание);
									КонецЕсли;
									
								КонецПопытки;
								Обл1.ЦветФона = ЦветФонаОбластиПараметра;
								Элементы.ПолеТабличногоДокументаМакет.ПолучитьВыделенныеОбласти().Добавить(Обл1);
							КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли СтрЧислоВхождений(Параметр, "Показатели.") <> 0 Тогда // это показатели
			Параметр = СтрЗаменить(Параметр, "Показатели.", "");
			Элементы.ПолеТабличногоДокументаМакет.ПолучитьВыделенныеОбласти().Очистить();
			Для Инд = 1 По СтрЧислоСтрок(Параметр) Цикл
				ТекСтр = СтрПолучитьСтроку(Параметр, Инд);
				Если НЕ ПустаяСтрока(ТекСтр) Тогда
					НайденныеСтроки = КэшФункцийПоказателей.НайтиСтроки(Новый Структура("Код", СокрЛП(ТекСтр)));
					Если НайденныеСтроки.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					ТекПоказатель = ВернутьРеквизитыЭлемента(НайденныеСтроки[0].Ссылка, "Код, ТипЗначения, Наименование");
					СоотвОбл = ПолеТабличногоДокументаМакет.Области.Найти(СокрЛП(ТекПоказатель.Код));
					Если СоотвОбл <> Неопределено Тогда
						
						СтрокаШаблона = Нстр("ru = 'Область с именем ""%1"" уже присутствует в макете.'");
						
						Если ЗначениеЗаполнено(СтрокаШаблона) тогда
							Сообщить(СтрШаблон(СтрокаШаблона, СокрЛП(ТекПоказатель.Код)), СтатусСообщения.Внимание);
						КонецЕсли;
											
						МассивСуществующихОбластей.Добавить(СоотвОбл.Имя);
						Продолжить;
					Иначе
						
						Обл1 = ПолеТабличногоДокументаМакет.Область(Область.Верх + (Инд - 1), Область.Лево, Область.Верх + (Инд - 1), Область.Лево);
						Обл2 = ПолеТабличногоДокументаМакет.Область(Обл1.Верх, Обл1.Лево + 1, Обл1.Верх, Обл1.Лево + 1);
						
							Обл1.Имя = СокрЛП(ТекПоказатель.Код);
							Обл1.СодержитЗначение = Истина;
							Модифицированность = Истина;
							Попытка
								Обл1.ТипЗначения = УправлениеОтчетамиУХ.ПолучитьОписаниеТиповПоТипуЗначения(ТекПоказатель.ТипЗначения);
							Исключение
								
								СтрокаШаблона = Нстр("ru = 'Не удалось установить тип значения для показателя ""%1""!'");
								
								Если ЗначениеЗаполнено(СтрокаШаблона) тогда
									Сообщить(СтрШаблон(СтрокаШаблона, СокрЛП(ТекПоказатель.Код)), СтатусСообщения.Внимание);
								КонецЕсли;
								
							КонецПопытки;
								
						КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ИмяОбласти ИЗ МассивСуществующихОбластей Цикл
		
		ПерейтиКОбластиСервер(ИмяОбласти);
		
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Функция ПолучитьСсылкиСвязанныхОбъектов(МассивКодов, ТипЭлемента)
	
	Возврат НастройкиБланкаОтчетаУХ.ПолучитьСтруктуруСсылокНаОБъекты(МассивКодов, Объект.Владелец, ТипЭлемента);
	
КонецФункции

&НаКлиенте
Процедура Свойства(Команда)
	
	ОткрытьНаборСвойств();
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНаборСвойств()
	
	Перем ТипЭлемента;
	МассивКодов    = НастройкиБланкаОтчетаУХ.ПолучитьМассивКодовРедактируемыхОбъектов(ПолеТабличногоДокументаМакет, ТипЭлемента);
	СоответствиеСвязей = ПолучитьСсылкиСвязанныхОбъектов(МассивКодов, ТипЭлемента);
	
	Если ТипЗнч(СоответствиеСвязей) = Тип("ФиксированноеСоответствие") Тогда
		
		Если СоответствиеСвязей.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		МассивОбъектов = Новый Массив;
		Для Каждого Элемент Из СоответствиеСвязей Цикл
			МассивОбъектов.Добавить(Элемент.Ключ);
		КонецЦикла;
		
		Если ТипЭлемента = "Колонка" Тогда
			ВнИмяФормы = "Обработка.ГрупповоеИзменениеЭлементовОтчета.Форма.ГрупповоеИзменениеКолонок";
		Иначе
			ВнИмяФормы = "Обработка.ГрупповоеИзменениеЭлементовОтчета.Форма.ГрупповоеИзменениеЭлементов";
		КонецЕсли;
		
		ОткрытьФорму(ВнИмяФормы, Новый Структура("ТипЭлемента, МассивОбъектов,ВидОтчета", ТипЭлемента, Новый ФиксированныйМассив(МассивОбъектов),Объект.Владелец));
		
	Иначе
		ПоказатьЗначение(, СоответствиеСвязей);
	КонецЕсли;

		
КонецПроцедуры // ОткрытьНаборСвойств()

&НаСервере
Функция СформироватьСтрокиОтчета(МассивНаименований)
	
	Перем ДлинаКода;
	
	ТаблицаСтрокОтчета = Справочники.БланкиОтчетов.СформироватьТаблицуСтрок(ПолеТабличногоДокументаМакет, МассивНаименований, ДлинаКода);
	Возврат Новый Структура("ВидОтчета, АдресТаблицы, ДлинаКода", Объект.Владелец, ПоместитьВоВременноеХранилище(ТаблицаСтрокОтчета), ДлинаКода);
	
КонецФункции

&НаСервере
Функция СформироватьКолонкиОтчета(МассивНаименований)
	
	Перем ДлинаКода;
	
	ТаблицаКолонокОтчета = Справочники.БланкиОтчетов.СформироватьТаблицуКолонок(ПолеТабличногоДокументаМакет, МассивНаименований, ДлинаКода);
	Возврат Новый Структура("ВидОтчета, АдресТаблицы, ДлинаКода", Объект.Владелец, ПоместитьВоВременноеХранилище(ТаблицаКолонокОтчета), ДлинаКода);
	
КонецФункции

&НаКлиенте
Функция ПолучитьМассивНаименованийСтрок(ТекстОшибки = Неопределено)
	
	ТабДок = ПолеТабличногоДокументаМакет;
	МассивНаименований = Новый Массив;
	
	ТекстОшибки = "";
	
	Для Каждого Область Из ТабДок.ВыделенныеОбласти Цикл
		
		Если ТипЗнч(Область) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			
			СтрокаШаблона = Нстр("ru = '
			|Область %1 не является областью ячеек табличного документа.'");
			
			СообщениеОбОшибке = "";
			Если Не ПустаяСтрока(СтрокаШаблона) тогда								
				СообщениеОбОшибке = СтрШаблон(СтрокаШаблона, Область.Имя);
			КонецЕсли;
			
			ТекстОшибки = ТекстОшибки + СообщениеОбОшибке;
			Продолжить;
		КонецЕсли;
		
		Если Область.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			
			СтрокаШаблона = Нстр("ru = '
			|Область %1 должна быть прямоугольной.'");
			
			СообщениеОбОшибке = "";
			Если Не ПустаяСтрока(СтрокаШаблона) тогда								
				СообщениеОбОшибке = СтрШаблон(СтрокаШаблона, Область.Имя);
			КонецЕсли;
			
			ТекстОшибки = ТекстОшибки + СообщениеОбОшибке;
			Продолжить;
		КонецЕсли;
		
		Для Инд = Область.Верх По Область.Низ Цикл
			ТекОбласть = ТабДок.Область(Инд, Область.Лево);
			Если Инд <> ТекОбласть.Верх Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПустаяСтрока(ТекОбласть.Текст) Тогда
				Продолжить;
			КонецЕсли;
			
			МассивНаименований.Добавить(ТекОбласть.Имя);
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивНаименований;
	
КонецФункции

&НаКлиенте
Функция ПолучитьМассивНаименованийКолонок(ТекстОшибки = Неопределено)
	
	ТабДок = ПолеТабличногоДокументаМакет;
	МассивНаименований = Новый Массив;
	
	ТекстОшибки = "";
	
	Для Каждого Область Из ТабДок.ВыделенныеОбласти Цикл
		
		Если ТипЗнч(Область) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			
			СтрокаШаблона = Нстр("ru = '
			|Область %1 не является областью ячеек табличного документа.'");
			
			СообщениеОбОшибке = "";
			Если Не ПустаяСтрока(СтрокаШаблона) тогда								
				СообщениеОбОшибке = СтрШаблон(СтрокаШаблона, Область.Имя);
			КонецЕсли;
			
			ТекстОшибки = ТекстОшибки + СообщениеОбОшибке;
		    Продолжить;
		КонецЕсли;
		
		Если Область.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			
			СтрокаШаблона = Нстр("ru = '
			|Область %1 должна быть прямоугольной.'");
			
			СообщениеОбОшибке = "";
			Если Не ПустаяСтрока(СтрокаШаблона) тогда								
				СообщениеОбОшибке = СтрШаблон(СтрокаШаблона, Область.Имя);
			КонецЕсли;
			
			ТекстОшибки = ТекстОшибки + СообщениеОбОшибке;
			Продолжить;
		КонецЕсли;
		
		Для Инд = Область.Лево По Область.Право Цикл
			ТекОбласть = ТабДок.Область(Область.Верх, Инд);
			Если Инд <> ТекОбласть.Лево Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПустаяСтрока(ТекОбласть.Текст) Тогда
				Продолжить;
			КонецЕсли;
			
			МассивНаименований.Добавить(ТекОбласть.Имя);
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивНаименований;
	
КонецФункции


&НаСервере
Процедура СохранитьМакетВХранилищеЗначений(ТекущийОбъект, ТаблДок,ВыводитьСообщения=Истина, КодЯзыка = 0)Экспорт
	
	Если ТипЗнч(ТаблДок) <> Тип("ТабличныйДокумент") Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.БланкиОтчетов.СохранитьМакетВХранилище(ТекущийОбъект, ТаблДок, ВыводитьСообщения, КодЯзыка);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОбластьВСтруктуру(СтруктураМакета, ТаблДок, Область, ВидОбласти)
		
	Если Область <> Неопределено Тогда
		СтруктураМакета.Вставить(ВидОбласти, ТаблДок.ПолучитьОбласть(Область.Имя));
		ТаблДок.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоВертикали);
	Иначе
		СтруктураМакета.Вставить(ВидОбласти, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОБновитьТабличныйДокументПоПоказателям(МассивИзмененныхПоказателей)
	
	Для Каждого Строка Из МассивИзмененныхПоказателей Цикл
		
		ОбластьСтроки  = ПолеТабличногоДокументаМакет.Области.Найти(Строка.ИмяСтроки);
		ОбластьКолонки = ПолеТабличногоДокументаМакет.Области.Найти(Строка.ИмяКолонки);
		
		Если ОбластьСтроки <> Неопределено И ОбластьКолонки <> Неопределено Тогда
			
			ОбластьЯчейки = ПолеТабличногоДокументаМакет.Область(ОбластьСтроки.Верх, ОбластьКолонки.Лево);
			
			ОбластьЯчейки.Имя              = Строка.ИмяЯчейки;
			
			Если РежимРедактированияФормул Тогда
				
				ОбластьЯчейки.СодержитЗначение = Ложь;
				
			Иначе
				
				ОбластьЯчейки.СодержитЗначение = Истина;
				ОбластьЯчейки.ТипЗначения      = Строка.ТипПоказателя;
				
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьКэшФункцийПоказателей();
	ОтобразитьНаличиеФункции();
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкуОформления(Обл, ТипОбласти) Экспорт
	
	Попытка
		Если ТипОбласти = "Наименование" Тогда
			Обл.ЦветФона = ЦветФонаНаименования;
		ИначеЕсли ТипОбласти = "Параметр" Тогда
			Обл.ЦветФона = ЦветФонаОбластиПараметра;
		ИначеЕсли ТипОбласти = "ЗаполняемоеЗначение" Тогда
			Обл.ЦветФона = ЦветФонаОбластиЗаполняемогоПоказателя;
		ИначеЕсли ТипОбласти = "ВычисляемоеЗначение" Тогда
			Обл.ЦветФона = ЦветФонаОбластиВычисляемогоПоказателя;
		КонецЕсли;
	Исключение
		
    КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыДляМакета()
	
	Возврат Новый Структура("ВидОтчета, БланкОтчета, БланкДляОтображения, АдресПараметровБланкаОтчета, Макет, РасширенныйСпособИмпорта, РежимМастера, ЦветФонаНаименования, ЦветФонаОбластиПараметра, ЦветФонаОбластиВычисляемогоПоказателя, ЦветФонаОбластиЗаполняемогоПоказателя"
							, Объект.Владелец
							, Объект.Ссылка
							, Объект.БланкДляОтображения
							, ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("ПараметрыОтчета")), ПолеТабличногоДокументаМакет
							, РасширенныйСпособИмпорта
							, Ложь
							, ЦветФонаНаименования
							, ЦветФонаОбластиПараметра
							, ЦветФонаОбластиВычисляемогоПоказателя
							, ЦветФонаОбластиЗаполняемогоПоказателя);
	
КонецФункции

&НаКлиенте
Процедура ГенерацияМакета(Команда)
	
	ОткрытьФорму("Обработка.МастерГенерацииМакетаОтчета.Форма.Форма", ПодготовитьПараметрыДляМакета(), ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПолеМакета(ТабДок)
	
	ПолеТабличногоДокументаМакет.Очистить();
	ПолеТабличногоДокументаМакет.Вывести(ТабДок);
	
	Если Объект.Мультиязычный Тогда
		
		НомерОсновногоЯзыка=0;
		ЯзыкОтображения=0;
		НайтиОбластиТекста();
		
	КонецЕсли;
			
КонецПроцедуры // ОбновитьПолеМакета() 

&НаКлиенте
Процедура ОбработатьИзменениеИсточникаДанных(ДанныеИсточника)
	
	Если (НЕ ДанныеИсточника.НазначениеРасчетов=ПравилоОбработки)
		ИЛИ (ДанныеИсточника.КодСтар=ДанныеИсточника.Код И ДанныеИсточника.КодУпрощеннойФормулыСтар=ДанныеИсточника.КодУпрощеннойФормулы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеФормулы=КэшФункцийПоказателей.НайтиСтроки(Новый Структура("Ссылка",ДанныеИсточника.ПотребительРасчета));
	
	Если ДанныеФормулы.Количество()=0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ДанныеИсточника.КодСтар=ДанныеИсточника.Код Тогда
		
		ДанныеФормулы[0].Процедура=СтрЗаменить(ДанныеФормулы[0].Процедура,ДанныеИсточника.КодСтар,ДанныеИсточника.Код);
		
	КонецЕсли;
	
	Если НЕ ДанныеИсточника.КодУпрощеннойФормулыСтар=ДанныеИсточника.КодУпрощеннойФормулы Тогда
		
		ДанныеФормулы[0].ПроцедураРедактирования=СтрЗаменить(ДанныеФормулы[0].ПроцедураРедактирования,ДанныеИсточника.КодУпрощеннойФормулыСтар,ДанныеИсточника.КодУпрощеннойФормулы);
		
		Если РежимРедактированияФормул Тогда
			
			РедактируемыйТекст=ПолеТекстовогоДокументаПроцедура.ПолучитьТекст();
			ПолеТекстовогоДокументаПроцедура.УстановитьТекст(СтрЗаменить(РедактируемыйТекст,ДанныеИсточника.КодУпрощеннойФормулыСтар,ДанныеИсточника.КодУпрощеннойФормулы));
			
		КонецЕсли;
			
	КонецЕсли;
		
КонецПроцедуры // ОбработатьИзменениеИсточникаДанных() 


&НаКлиенте
Функция ПроверитьОбластьНаОбъединенность(ТабДок, Область) Экспорт
	
	ТекОбласть = ТабДок.Область(Область.Верх, Область.Лево);
	Возврат ТекОБласть.Право = Область.Право И ТекОбласть.Низ = Область.Низ;
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьДеревоПоказателя(Команда)
	
	Если ПолучитьИтоговуюЯчейку() Тогда
		Если ТипЯчейки <> "Показатель" Тогда
			Сообщить(Нстр("ru = 'Переход к диаграмме показателя возможен только для ячейки показателя.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Отчет.ДеревоПоказателей.Форма", Новый Структура("ВидОтчета, КодПоказателя, ПравилоОбработки", Объект.Владелец, ИтоговаяЯчейка, ПравилоОбработки));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ УПРАВЛЕНИЯ НАСТРОЙКОЙ ЗАГОЛОВКА И ПОДВАЛА МАКЕТА ОТЧЕТА.
//

&НаКлиенте
Процедура УстановитьОбластьПодвала(Команда)
	
	Объект.СтрокаПодвала = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Верх;
	ОтобразитьШапкуИПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОбластьШапки(Команда)
	
	Объект.СтрокаШапки = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Низ;
	ОтобразитьШапкуИПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОбластьШапки(Команда)
	
	Если Объект.СтрокаШапки > 0 Тогда
		Объект.СтрокаШапки = 0;
		ОтобразитьШапкуИПодвал();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОбластьПодвала(Команда)
	
	Если Объект.СтрокаПодвала > 0 Тогда
		Объект.СтрокаПодвала = 0;
		ОтобразитьШапкуИПодвал();
	КонецЕсли;
	
КонецПроцедуры


#Область ОбработчикиКомандСопоставления

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ - ОБРАБОТЧИКИ СОБЫТИЙ СОПОСТАВЛЕНИЯ.
//

&НаКлиенте
Процедура СопоставитьСтроке(Команда)
	
	ТекущаяСтрока = Элементы.ТабличноеПолеСтрок.ДанныеСтроки(Элементы.ТабличноеПолеСтрок.ТекущаяСтрока);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОбласть = ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0];
	СопоставитьОбластьСтроке(ПолеТабличногоДокументаМакет, ТекущаяОбласть, ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьПоказателю(Команда)
	
	ТекущаяСтрока = Элементы.Показатели.ДанныеСтроки(Элементы.Показатели.ТекущаяСтрока);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОбласть = Элементы.ПолеТабличногоДокументаМакет.ПолучитьВыделенныеОбласти()[0];
	ТипЗначенияПоказателя = ПолучитьТипЗначенияПоказателя(ТекущаяСтрока.ТипЗначения);
	СопоставитьОбластьПоказателю(ПолеТабличногоДокументаМакет, ТекущаяОбласть, ТекущаяСтрока.Код, ТекущаяСтрока.ТипЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьПараметру(Команда)
	
	ТекущаяСтрока = Элементы.Параметры.ДанныеСтроки(Элементы.Параметры.ТекущаяСтрока);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОбласть = ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0];
	СопоставитьОбластьПараметру(ПолеТабличногоДокументаМакет, ТекущаяОбласть, ТекущаяСтрока.Код);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьКолонке(Команда)
	
	ТекущаяСтрока = Элементы.ТабличноеПолеКолонок.ДанныеСтроки(Элементы.ТабличноеПолеКолонок.ТекущаяСтрока);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОбласть = ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0];
	СопоставитьОбластьКолонке(ПолеТабличногоДокументаМакет, ТекущаяОбласть, ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура СопоставитьИтогуПоКолонке(Команда)
	
	ТекОбл = ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	ТекВерх = ТекОбл.Верх;
	ТекНиз = ТекОбл.Низ;
	ТекСекция = Неопределено;
	
	Для Каждого Обл Из ПолеТабличногоДокументаМакет.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки И ТекВерх >= Обл.Верх И ТекНиз <= Обл.Низ Тогда
			ТекСекция = Обл;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ИмяСекции = ТекСекция.Имя;
	
	Если Прав(ИмяСекции, 6) <> "_Шапка" И Прав(ИмяСекции, 7) <> "_Подвал" Тогда
		
		ТекстПредупреждения = Нстр("ru = 'Итог по колонке раскрытия можно задавать только в шапке или подвале раскрытия!'");
		ОбщегоНазначенияКлиентУХ.ПоказатьПредупреждениеУниверсально(ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ИмяСекции = ?(Прав(ИмяСекции, 6) = "_Шапка", Лев(ИмяСекции, СтрДлина(ИмяСекции) - 6), ИмяСекции);
	ИмяСекции = ?(Прав(ИмяСекции, 7) = "_Подвал", Лев(ИмяСекции, СтрДлина(ИмяСекции) - 7), ИмяСекции);
	
	Если ТекСекция = Неопределено 
		ИЛИ УправлениеОтчетамиУХ.ПолучитьСписокИменГруппРаскрытия(Объект.Владелец).НайтиПоЗначению(ИмяСекции) = Неопределено Тогда
		
		СообщениеОбОшибке = Нстр("ru = 'Итог по колонке раскрытия можно задавать только в шапке или подвале раскрытия!'");
		ОбщегоНазначенияКлиентУХ.ПоказатьПредупреждениеУниверсально(СообщениеОбОшибке);
		Возврат;
		
	КонецЕсли;
	
	СписокПоказателей = новый СписокЗначений;
	СписокПоказателей = ПолучитьСписокПоказателейПоГруппеРаскрытия(ИмяСекции, Объект.Владелец);

	КолПок = СписокПоказателей.Количество();
	Для Инд = 1 По КолПок Цикл
		
		ТекПок = СписокПоказателей.Получить(КолПок - Инд);		
		Если ПолеТабличногоДокументаМакет.Области.Найти(ПолучитьИмяСекцииИтога(ИмяСекции, ТекПок.Значение)) <> Неопределено Тогда
			СписокПоказателей.Удалить(ТекПок);
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоПоказателей = СписокПоказателей.Количество();
	ДопПараметры = Новый Структура("ИмяСекции", ИмяСекции);
	Если КоличествоПоказателей = 0 Тогда
		
		СтрокаШаблона = Нстр("ru = 'Итоговые показатели по каждому из показателей из группы раскрытия ""%1"" уже присутствуют в макете!'");
		
		Если ЗначениеЗаполнено(СтрокаШаблона) тогда
			СообщениеОбОшибке = СтрШаблон(СтрокаШаблона, ИмяСекции);
			ОбщегоНазначенияКлиентУХ.ПоказатьПредупреждениеУниверсально(СообщениеОбОшибке);
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли КоличествоПоказателей = 1 Тогда
	
		ОбработатьСекциюИтогаПоПоказателю(СписокПоказателей[0], ДопПараметры);
		
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьСекциюИтогаПоПоказателю", ЭтотОбъект, ДопПараметры);
		СписокПоказателей.ПоказатьВыборЭлемента(Оповещение, Нстр("ru = 'Выберите показатель, итог по которому необходимо отображать в макете'"));
		
	КонецЕсли;
						
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСекциюИтогаПоПоказателю(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    ИмяСекции = ДополнительныеПараметры.ИмяСекции;
        
    ВыбранныйПоказатель = ВыбранныйЭлемент;
    Если ВыбранныйПоказатель = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    ТекОбл = Элементы.ПолеТабличногоДокументаМакет.ПолучитьВыделенныеОбласти()[0];
    
    ИмяОбласти = ПолучитьИмяСекцииИтога(ИмяСекции, ВыбранныйПоказатель.Значение);
    Если ПолеТабличногоДокументаМакет.Области.Найти(ИмяОбласти) <> Неопределено Тогда
        
        СообщениеОбОшибке = Нстр("ru = 'Область, сопоставленная выбранному объекту, уже присутствует в макете!'");
        ОбщегоНазначенияКлиентУХ.ПоказатьПредупреждениеУниверсально(СообщениеОбОшибке);
        Возврат;
        
    Иначе
        
        ТекОбл.Имя = ИмяОбласти;
        ТекОбл.СодержитЗначение = Истина;
        Попытка
            
            ТипЗначенияПоказателя = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ВыбранныйПоказатель.Значение, "ТипЗначения");
            ТекОбл.ТипЗначения = УправлениеОтчетамиУХ.ПолучитьОписаниеТиповПоТипуЗначения(ТипЗначенияПоказателя);
            
        Исключение
			
			СтрокаШаблона = Нстр("ru = 'Не удалось установить тип значения для итога по показателю ""%1""'");
			
			Если ЗначениеЗаполнено(СтрокаШаблона) тогда
				СообщениеОбОшибке = СтрШаблон(СтрокаШаблона, СокрЛП(ВыбранныйПоказатель.Значение.Код));
				ОбщегоНазначенияКлиентУХ.ПоказатьПредупреждениеУниверсально(СообщениеОбОшибке);
			КонецЕсли;
            
        КонецПопытки;
        
    КонецЕсли;
    
    Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура СопоставитьАналитике(Команда)
	
	РезультатВыбора = Неопределено;

	ПараметрыФормы = Новый Структура("ВидОтчета", Объект.Владелец);
	Оповещение = Новый ОписаниеОповещения("СопоставитьАналитикеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.БланкиОтчетов.Форма.СопоставлениеАналитике",
					ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьАналитикеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    РезультатВыбора = Результат;
    
    Если ТипЗнч(РезультатВыбора) = Тип("Строка") Тогда
        Если ПолеТабличногоДокументаМакет.Области.Найти(РезультатВыбора) <> Неопределено Тогда
            ПоказатьПредупреждение(, Нстр("ru = 'В макете уже присутствует область, сопоставленная выбранному объекту!'"));
        ИначеЕсли ПолеТабличногоДокументаМакет.ТекущаяОбласть.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
            ПоказатьПредупреждение(, Нстр("ru = 'Выбранный объект может быть сопоставлен только прямоугольной области!'"));
        Иначе
            ПолеТабличногоДокументаМакет.ТекущаяОбласть.Имя = РезультатВыбора;
        КонецЕсли;
    КонецЕсли;
    
    Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура СопоставитьГруппеАналитик(Команда)
	
	Если ПолеТабличногоДокументаМакет.ВыделенныеОбласти.Количество() > 1 
		ИЛИ ПолеТабличногоДокументаМакет.ТекущаяОбласть = Неопределено		
		ИЛИ ПолеТабличногоДокументаМакет.ТекущаяОбласть.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
		
		ПоказатьПредупреждение(, Нстр("ru = 'Для сопоставления области макета группе раскрытия необходимо выделить неразрывную группу строк в макете!'"));
		Возврат;
		
	КонецЕсли;
	
	ТекВерх = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Верх;
	ТекНиз  = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Низ;
	
	Для Каждого Обл Из ПолеТабличногоДокументаМакет.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки И ((ТекВерх >= Обл.Верх И ТекВерх <= Обл.Низ) ИЛИ (ТекНиз >= Обл.Верх И ТекНиз <= Обл.Низ) И Обл.Верх <> Обл.Низ) Тогда
			ПоказатьПредупреждение(, Нстр("ru = 'Выбранная область пересекается с одной из областей-строк макета. Сопоставление невозможно.'"));
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ГруппыРаскрытия = ВернутьСписокГруппРаскрытия(Объект.Владелец);
	КоличествоГруппРаскрытия = ГруппыРаскрытия.Количество();
	
	ИмяТекущейОбласти = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Имя;
	
	Для Инд = 1 По КоличествоГруппРаскрытия Цикл
		
		ТекИнд = КоличествоГруппРаскрытия - Инд;
		ТекГруппа = ГруппыРаскрытия.Получить(ТекИнд);
		РезультатПоискаОбластиГруппыРаскрытия = ПолеТабличногоДокументаМакет.Области.Найти(ТекГруппа.Представление);
		
		Если РезультатПоискаОбластиГруппыРаскрытия <> Неопределено Тогда
			ГруппыРаскрытия.Удалить(ТекГруппа);
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатВыбора = ГруппыРаскрытия.ВыбратьЭлемент(Нстр("ru = 'Выберите группу раскрытия'"));
	
	Если РезультатВыбора <> Неопределено Тогда
		ПолеТабличногоДокументаМакет.ТекущаяОбласть.Имя = РезультатВыбора.Представление;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьПоказателюРаскрытия(Команда)
	
	Перем СообщениеОбОшибке;
	
	СопоставитьПоказателюРаскрытия_Сервер(СообщениеОбОшибке);
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ПоказатьПредупреждение(, СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// СОПОСТАВЛЕНИЕ ЯЧЕЕК МАКЕТА ЭЛЕМЕНТАМ ОТЧЕТА.
//

&НаКлиенте
Процедура СнятьСопоставление(Команда)
	
	ОчиститьИменаЯчеек();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандСопоставления()
	
	Элементы.ФормаСопоставитьСтроке.Доступность     = Элементы.ФормаНастройкиБланка.Пометка И Элементы.ПанельНастроек.ТекущаяСтраница = Элементы.Страница_Строки;
	Элементы.ФормаСопоставитьКолонке.Доступность    = Элементы.ФормаНастройкиБланка.Пометка И Элементы.ПанельНастроек.ТекущаяСтраница = Элементы.Страница_Колонки;
	Элементы.ФормаСопоставитьПоказателю.Доступность = Элементы.ФормаНастройкиБланка.Пометка И Элементы.ПанельНастроек.ТекущаяСтраница = Элементы.Страница_Показатели;
	Элементы.ФормаСопоставитьПараметру.Доступность  = Элементы.ФормаНастройкиБланка.Пометка И Элементы.ПанельНастроек.ТекущаяСтраница = Элементы.Страница_Параметры;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТипЗначенияПоказателя(ТипЗначенияПоказателя)
	
	Возврат УправлениеОтчетамиУХ.ПолучитьОписаниеТиповПоТипуЗначения(ТипЗначенияПоказателя);
	
КонецФункции

&НаКлиенте
Процедура СопоставитьОбластьПоказателю(ТаблДок, Область, КодПоказателя, ТипЗначенияПоказателя) Экспорт
	
	ОбластьПоказателя = ТаблДок.Области.Найти(СокрЛП(КодПоказателя));
	Если ОбластьПоказателя <> Неопределено И (ОбластьПоказателя.Лево <> Область.Лево ИЛИ ОбластьПоказателя.Верх <> Область.Верх ИЛИ ОбластьПоказателя.Право <> Область.Право ИЛИ ОбластьПоказателя.Низ <> Область.Низ)Тогда
		
		СтрокаШаблона = Нстр("ru = 'Область с именем ""%1"" уже присутствует в макете!'");
		
		Если ЗначениеЗаполнено(СтрокаШаблона) тогда
			Сообщить(СтрШаблон(СтрокаШаблона, СокрЛП(КодПоказателя)), СтатусСообщения.Важное);
		КонецЕсли;	
			
		Возврат;
	Иначе
		
		Если Область.Лево <> Область.Право ИЛИ Область.Верх <> Область.Низ Тогда
			Если НЕ ПроверитьОбластьНаОбъединенность(ТаблДок, Область) Тогда
				
				ОтветНаВопрос = Неопределено;
				
				ДопПараметры = Новый Структура("КодПоказателя, Область, ТипЗначенияПоказателя", КодПоказателя, Область, ТипЗначенияПоказателя);
				Оповещение = Новый ОписаниеОповещения("Подключаемый_СопоставитьОбластьПоказателюЗавершение", ЭтотОбъект, ДопПараметры);				
				ПоказатьВопрос(Оповещение, Нстр("ru = 'Область содержит более одной ячейки. Объединить?'"), РежимДиалогаВопрос.ДаНет);
                Возврат;
				
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьОбластьПоПоказателю(КодПоказателя, Область, ТипЗначенияПоказателя);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СопоставитьОбластьПоказателюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    КодПоказателя = ДополнительныеПараметры.КодПоказателя;
    Область = ДополнительныеПараметры.Область;
    ТипЗначенияПоказателя = ДополнительныеПараметры.ТипЗначенияПоказателя;
    
    
    ОтветНаВопрос = РезультатВопроса;
    ВыполнитьОбъединение = (ОтветНаВопрос = КодВозвратаДиалога.Да);
    
    Если Не ВыполнитьОбъединение Тогда
        Возврат;
    Иначе
        Область.Объединить();
    КонецЕсли;
        
    ОбновитьОбластьПоПоказателю(КодПоказателя, Область, ТипЗначенияПоказателя);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбластьПоПоказателю(Знач КодПоказателя, Знач Область, Знач ТипЗначенияПоказателя)
    
    Область.Имя = СокрЛП(КодПоказателя);
    
    Если РежимРедактированияФормул Тогда
        
        Область.СодержитЗначение = Ложь;
        Область.Защита = Истина;
        
    Иначе
        
        Область.СодержитЗначение = Истина;
        
        Попытка
            Область.ТипЗначения = ВернутьТипПоказателя(ТипЗначенияПоказателя);
		Исключение
			
			СтрокаШаблона = Нстр("ru = 'Не удалось установить тип значения для области показателя ""%1""!'");
			
			Если ЗначениеЗаполнено(СтрокаШаблона) тогда
				Сообщить(СтрШаблон(СтрокаШаблона, СокрЛП(КодПоказателя)), СтатусСообщения.Внимание);
			КонецЕсли;
			
        КонецПопытки;
        
    КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьТипПоказателя(ТипЗначенияПоказателя)
	
	Возврат КэшируемыеПроцедурыУХ.ПолучитьОписаниеТиповПоТипуЗначения(ТипЗначенияПоказателя);
	
КонецФункции

&НаКлиенте
Процедура СопоставитьОбластьСтроке(ТаблДок, Область, ДанныеСтроки) Экспорт
	
	ОбластьСтроки = ТаблДок.Области.Найти(СокрЛП("Строка_" + ДанныеСтроки.Код));
	
	Если ОбластьСтроки <> Неопределено Тогда

		ТаблДок.ТекущаяОбласть = ОбластьСтроки;
		
		СтрокаШаблона = Нстр("ru = 'Область с именем ""Строка_%1"" уже присутствует в макете!'");
	
		Если ЗначениеЗаполнено(СтрокаШаблона) тогда
			Сообщить(СтрШаблон(СтрокаШаблона, СокрЛП(ДанныеСтроки.Код)), СтатусСообщения.Важное);
		КонецЕсли;	
					
		Возврат;
	
	Иначе
		
		Если Область.Лево <> Область.Право ИЛИ Область.Верх <> Область.Низ Тогда
			Если НЕ ПроверитьОбластьНаОбъединенность(ТаблДок, Область) Тогда
				
				ОтветНаВопрос = Неопределено;
				
				ДопПараметры = Новый Структура("ДанныеСтроки, Область", ДанныеСтроки, Область);
				Оповещение = Новый ОписаниеОповещения("Подключаемый_СопоставитьОбластьСтрокеЗавершение", ЭтотОбъект, ДопПараметры);
				ПоказатьВопрос(Оповещение, Нстр("ru = 'Область содержит более одной ячейки. Объединить?'"), РежимДиалогаВопрос.ДаНет);
				
                Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьОбластьПоДаннымСтроки(Область, ДанныеСтроки);		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СопоставитьОбластьСтрокеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ДанныеСтроки = ДополнительныеПараметры.ДанныеСтроки;
    Область = ДополнительныеПараметры.Область;
        
    ОтветНаВопрос = РезультатВопроса;
    ВыполнитьОбъединениеОбласти = ОтветНаВопрос = КодВозвратаДиалога.Да;
    Если Не ВыполнитьОбъединениеОбласти Тогда
        Возврат;
    Иначе
        Область.Объединить();
    КонецЕсли;
        
	ОбновитьОбластьПоДаннымСтроки(Область, ДанныеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбластьПоДаннымСтроки(Область, ДанныеСтроки)

	Область.Имя = "Строка_" + СокрЛП(ДанныеСтроки.Код);
	
	Если ПустаяСтрока(Область.Текст) Тогда
		Область.Текст=ДанныеСтроки.Наименование+?(РежимНомерТекущегоМакета=0,"",РежимНомерТекущегоМакета);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СопоставитьОбластьКолонке(ТаблДок, Область, ДанныеКолонки) Экспорт
	
	ОбластьКолонки = ТаблДок.Области.Найти(СокрЛП("Колонка_" + ДанныеКолонки.Код));
	
	Если ОбластьКолонки <> Неопределено Тогда
				
		ТаблДок.ТекущаяОбласть = ОбластьКолонки;
		
		СтрокаШаблона = Нстр("ru = 'Область с именем ""Колонка_%1"" уже присутствует в макете!'");
	
		Если ЗначениеЗаполнено(СтрокаШаблона) тогда
			Сообщить(СтрШаблон(СтрокаШаблона, СокрЛП(ДанныеКолонки.Код)), СтатусСообщения.Важное);
		КонецЕсли;
		
		Возврат;
		
	Иначе
		
		Если Область.Лево <> Область.Право ИЛИ Область.Верх <> Область.Низ Тогда
			
			Если НЕ ПроверитьОбластьНаОбъединенность(ТаблДок, Область) Тогда
				
				Ответ = Неопределено;
				
				Оповещение = Новый ОписаниеОповещения("СопоставитьОбластьКолонкеЗавершение", ЭтотОбъект, Новый Структура("ДанныеКолонки, Область", ДанныеКолонки, Область));
				ПоказатьВопрос(Оповещение, Нстр("ru = 'Область содержит более одной ячейки. Объединить?'"), РежимДиалогаВопрос.ДаНет);
                Возврат;
				
			КонецЕсли;
			
		КонецЕсли;

		ОформитьОбласть(Область, ДанныеКолонки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьОбластьКолонкеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ДанныеКолонки = ДополнительныеПараметры.ДанныеКолонки;
    Область = ДополнительныеПараметры.Область;
        
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    Иначе
        Область.Объединить();
    КонецЕсли;    
    
    ОформитьОбласть(Область, ДанныеКолонки);

КонецПроцедуры

&НаКлиенте
Процедура ОформитьОбласть(ТекОбласть, ДанныеКолонки)

	ТекОбласть.Имя = "Колонка_" + СокрЛП(ДанныеКолонки.Код);
	
	Если ПустаяСтрока(ТекОбласть.Текст) Тогда
		ТекОбласть.Текст=ДанныеКолонки.Наименование + ?(РежимНомерТекущегоМакета=0, "", РежимНомерТекущегоМакета);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СопоставитьОбластьПараметру(ТаблДок, Область, Параметр) Экспорт
	
	ОбластьПараметра = ТаблДок.Области.Найти(СокрЛП(Параметр));
	Если ОбластьПараметра <> Неопределено И (ОбластьПараметра.Лево <> Область.Лево ИЛИ ОбластьПараметра.Верх <> Область.Верх ИЛИ ОбластьПараметра.Право <> Область.Право ИЛИ ОбластьПараметра.Низ <> Область.Низ)Тогда
		
		СтрокаШаблона = Нстр("ru = 'Область с именем ""%1"" уже присутствует в макете.'");
		
		Если ЗначениеЗаполнено(СтрокаШаблона) тогда
			Сообщить(СтрШаблон(СтрокаШаблона, СокрЛП(Параметр)), СтатусСообщения.Важное);
		КонецЕсли;
		
		Возврат;
	Иначе
		Область.Имя = СокрЛП(Параметр);
		Область.СодержитЗначение = Истина;
		Попытка
			Область.ТипЗначения = Новый ОписаниеТипов();
		Исключение
			
			СтрокаШаблона = Нстр("ru = 'Не удалось установить тип значения для области параметра ""%1""!'");
			
			Если ЗначениеЗаполнено(СтрокаШаблона) тогда
				Сообщить(СтрШаблон(СтрокаШаблона, СокрЛП(Параметр)), СтатусСообщения.Внимание);
			КонецЕсли;
			
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПанельНастроекПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьДоступностьКомандСопоставления();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьСписокГруппРаскрытия(ВидОтчета)
	
	Возврат Справочники.ВидыОтчетов.ПолучитьСписокГруппРаскрытия(ВидОтчета);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяСекцииИтога(ИмяГруппыРаскрытия, Показатель)
	Возврат ИмяГруппыРаскрытия + "_" + СокрЛП(Показатель.Код) + "_СУММА";
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокПоказателейПоГруппеРаскрытия(ИмяСекции, ВидОтчета)
    
    Запрос = Новый Запрос(
	"ВЫБРАТЬ
    |	ПоказателиОтчетов.Ссылка
    |ИЗ
    |	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
    |ГДЕ
    |	ПоказателиОтчетов.ГруппаРаскрытия = &ТекГруппаРаскрытия
    |	И ПоказателиОтчетов.Владелец = &Владелец
    |	И (НЕ ПоказателиОтчетов.ПометкаУдаления)
    |	И ПоказателиОтчетов.ТипЗначения В(&ТипЗначения)");
	
	Запрос.УстановитьПараметр("ТекГруппаРаскрытия",	Справочники.ГруппыРаскрытия.НайтиПоКоду(ИмяСекции,,, ВидОтчета));
    Запрос.УстановитьПараметр("Владелец", 			ВидОтчета);
    
    ВозможныеТипыЗначений = Новый Массив;
    ВозможныеТипыЗначений.Добавить(Перечисления.ТипыЗначенийПоказателейОтчетов.Число);
    ВозможныеТипыЗначений.Добавить(Перечисления.ТипыЗначенийПоказателейОтчетов.ПустаяСсылка());
    
    Запрос.УстановитьПараметр("ТипЗначения", ВозможныеТипыЗначений);
    
    СписокПоказателей = Новый СписокЗначений;
    СписокПоказателей.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
    Возврат СписокПоказателей;

КонецФункции

&НаСервере
Процедура СопоставитьПоказателюРаскрытия_Сервер(СообщениеОбОшибке = Неопределено)
	
	ВыделенныеОбласти = Элементы.ПолеТабличногоДокументаМакет.ПолучитьВыделенныеОбласти();
	
	Если ВыделенныеОбласти.Количество() > 1 Тогда
		СообщениеОбОшибке = Нстр("ru = 'При сопоставлении необходимо выбрать всего одну область!'");
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.Показатели.ТекущаяСтрока;
		
	Если ТекСтрока = Неопределено Тогда
		СообщениеОбОшибке = Нстр("ru = 'Выберите показатель в дереве показателей, которому необходимо сопоставить область макета!'");
		Возврат;
	КонецЕсли;
	
	
	ТекПок = ТекСтрока.Ссылка;
	
	Если НЕ ЗначениеЗаполнено(ТекПок) Тогда
		СообщениеОбОшибке = Нстр("ru = 'Выберите показатель в дереве показателей!'");
		Возврат;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ТекПок.ГруппаРаскрытия) Тогда
		СообщениеОбОшибке = Нстр("ru = 'Выберите показатель в дереве показателей, принадлежащий одной из групп раскрытия!'");
		Возврат;
	КонецЕсли;
	
	ТекОбл = ВыделенныеОбласти[0];
	
	ИмяОбласти = СокрЛП(ТекПок.ГруппаРаскрытия.Код) + "_Показатель_" + СокрЛП(ТекПок.Код);
	
	Если ПолеТабличногоДокументаМакет.Области.Найти(ИмяОбласти) <> Неопределено Тогда
		СообщениеОбОшибке = Нстр("ru = 'Область, сопоставленная выбранному объекту, уже присутствует в макете!'");
		Возврат;
	Иначе
		ТекОбл.Имя = ИмяОбласти;
		ТекОбл.СодержитЗначение = Истина;
		Попытка
			ТекОбл.ТипЗначения = УправлениеОтчетамиУХ.ПолучитьОписаниеТиповПоТипуЗначения(ТекПок.ТипЗначения);
		Исключение
			
			СтрокаШаблона = Нстр("ru = 'Не удалось установить тип значения для показателя ""%1""!'");
			
			Если ЗначениеЗаполнено(СтрокаШаблона) тогда
				СообщениеОбОшибке = СтрШаблон(СтрокаШаблона, СокрЛП(ТекПок.Код));
			КонецЕсли;
		
		КонецПопытки;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры 

// Процедура сбрасывает имена ячеек, разрывая соответствие с показателями
&НаКлиенте
Процедура ОчиститьИменаЯчеек()
	
	ВыделенныеОбласти = Элементы.ПолеТабличногоДокументаМакет.ПолучитьВыделенныеОбласти();
	
	Для Каждого Область Из ВыделенныеОбласти Цикл
		Если ТипЗнч(Область) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		
		
		Для ИндС = Область.Верх По Область.Низ Цикл
			Для ИндК = Область.Лево По Область.Право Цикл
				ТекОбласть = ПолеТабличногоДокументаМакет.Область(ИндС, ИндК);
				Если ТекОбласть.Лево = ИндК И ТекОбласть.Верх = ИндС Тогда
					ТекОбласть.Имя = "";
					
					Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
						ТекОбласть.СодержитЗначение = Ложь;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Модифицированность = Истина;
		
	КонецЦикла;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ НАСТРОЙКИ ОБЛАСТЕЙ ЗАГОЛОВКА И ПОДВАЛА БЛАНКА.
//

&НаСервере
Процедура ОтобразитьШапкуИПодвал()
	
	Если Объект.СтрокаШапки > 0 Тогда
		
		
		НижняяГраницаШапки = ПолеТабличногоДокументаМакет.Область(Объект.СтрокаШапки, 1, Объект.СтрокаШапки, ПолеТабличногоДокументаМакет.ШиринаТаблицы);
		Если ПустаяСтрока(ИмяРисункаШапка) Тогда
			
			РисунокШапка = ПолеТабличногоДокументаМакет.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
			РисунокШапка.Текст = Нстр("ru = ' -- Шапка -- '");
			РисунокШапка.Узор = ТипУзораТабличногоДокумента.БезУзора;
			РисунокШапка.Шрифт = Новый Шрифт(РисунокШапка.Шрифт, , , Истина);
			РисунокШапка.ГраницаСправа = Ложь;
			РисунокШапка.ГраницаСнизу  = Ложь;
			РисунокШапка.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Точечная, 2);
			ИмяРисункаШапка = РисунокШапка.Имя;
			РисунокШапка.Расположить(НижняяГраницаШапки);
			
		Иначе
			
			ПолеТабличногоДокументаМакет.Рисунки[ИмяРисункаШапка].Расположить(НижняяГраницаШапки);
			
		КонецЕсли;
		
	ИначеЕсли НЕ ПустаяСтрока(ИмяРисункаШапка) Тогда
		ПолеТабличногоДокументаМакет.Рисунки.Удалить(ПолеТабличногоДокументаМакет.Рисунки[ИмяРисункаШапка]);
		ИмяРисункаШапка = "";
	КонецЕсли;
	
	Если Объект.СтрокаПодвала > 0 Тогда
		
		ВерхняяГраницаПодвала = ПолеТабличногоДокументаМакет.Область(Объект.СтрокаПодвала, 1, Объект.СтрокаПодвала, ПолеТабличногоДокументаМакет.ШиринаТаблицы);
		
		Если ПустаяСтрока(ИмяРисункаПодвал) Тогда
			
			РисунокПодвал = ПолеТабличногоДокументаМакет.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
			РисунокПодвал.Текст = Нстр("ru = ' -- Подвал -- '");
			РисунокПодвал.Узор = ТипУзораТабличногоДокумента.БезУзора;
			РисунокПодвал.Шрифт = Новый Шрифт(РисунокПодвал.Шрифт, , , Истина);
			РисунокПодвал.ГраницаСверху = Ложь;
			РисунокПодвал.ГраницаСправа  = Ложь;
			РисунокПодвал.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Точечная, 2);
			ИмяРисункаПодвал = РисунокПодвал.Имя;
			РисунокПодвал.Расположить(ВерхняяГраницаПодвала);
			
		Иначе
			
			ПолеТабличногоДокументаМакет.Рисунки[ИмяРисункаПодвал].Расположить(ВерхняяГраницаПодвала);
			
		КонецЕсли;
		
	ИначеЕсли НЕ ПустаяСтрока(ИмяРисункаПодвал) Тогда
		ПолеТабличногоДокументаМакет.Рисунки.Удалить(ПолеТабличногоДокументаМакет.Рисунки[ИмяРисункаПодвал]);
		ИмяРисункаПодвал = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьШапкуИПодвал()
	
	Если НЕ ПустаяСтрока(ИмяРисункаШапка) Тогда
		ПолеТабличногоДокументаМакет.Рисунки.Удалить(ПолеТабличногоДокументаМакет.Рисунки[ИмяРисункаШапка]);
		ИмяРисункаШапка = "";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИмяРисункаПодвал) Тогда
		ПолеТабличногоДокументаМакет.Рисунки.Удалить(ПолеТабличногоДокументаМакет.Рисунки[ИмяРисункаПодвал]);
		ИмяРисункаПодвал = "";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ИМПОРТА/ЭКСПОРТА БЛАНКА.
//

&НаКлиенте
Процедура ИмпортИзMXL(Команда)
			
	АдресХранилища = "";
	
	ДопПараметры = Новый Структура("АдресХранилища", АдресХранилища);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ПоместитьФайлВХранилище", ЭтотОбъект, ДопПараметры);
	НачатьПомещениеФайла(Оповещение, АдресХранилища, "*.mxl",, );

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоместитьФайлВХранилище(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
    
    АдресХранилища = ДополнительныеПараметры.АдресХранилища;    
    
    Если Результат Тогда
		
		СообщениеОбОшибке = "";
        ОбработкаЗагруженногоФайла(АдресХранилища, СообщениеОБОшибке);
        
        Если НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда
            ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ИмпортИзMXLЗавершение", ЭтотОбъект);
            ПоказатьПредупреждение(ОписаниеОповещения, СообщениеОбОшибке);
            Возврат;
        КонецЕсли;
        
        Подключаемый_ИмпортИзMXLЗавершение();
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИмпортИзMXLЗавершение() Экспорт
    
    Модифицированность = Истина;
    ОтобразитьНаличиеФункции();

КонецПроцедуры

&НаСервере
Процедура ОбработкаЗагруженногоФайла(АдресФайла, СообщениеОбОшибке)
	
	ЗагруженныйФайл = ПолучитьИзВременногоХранилища(АдресФайла);
	
	Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
		УдалитьИзВременногоХранилища(АдресФайла);
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла(".mxl");
	ЗагруженныйФайл.Записать(ИмяФайла);
	
	ТаблДок = Новый ТабличныйДокумент;
	
	Попытка
		ТаблДок.Прочитать(ИмяФайла);
	Исключение
		СообщениеОбОшибке = 
		Нстр("ru = 'Не удалось прочитать данные из файла!
		|Вероятно, файл не является табличным документом или поврежден!'");
		Возврат;
	КонецПопытки;
	
	ОбновитьПолеМакета(ТаблДок);
	ПолеТабличногоДокументаМакет.ОриентацияСтраницы = ТаблДок.ОриентацияСтраницы;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортИзExcel(Команда)
	
	Перем АдресОбработки;
	
	АдресХранилища = "";
	
	ДопПараметры = Новый Структура("АдресОбработки, АдресХранилища", АдресОбработки, АдресХранилища);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаПомещенияФайла", ЭтотОбъект, ДопПараметры);
	
	НачатьПомещениеФайла(Оповещение, АдресХранилища, "*.xls",,);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаПомещенияФайла(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
    
    АдресОбработки = ДополнительныеПараметры.АдресОбработки;
    АдресХранилища = ДополнительныеПараметры.АдресХранилища;    
    
    Если Результат Тогда
        СообщениеОбОшибке = "";
        
        СписокЛистовФайла = ОбработкаЗагруженногоФайлаXLS(АдресХранилища, АдресОбработки);
        Если СписокЛистовФайла = Неопределено Тогда
            Если ЭтоАдресВременногоХранилища(АдресОбработки) Тогда
                УдалитьИзВременногоХранилища(АдресОбработки);
            КонецЕсли;
            Возврат;
        ИначеЕсли СписокЛистовФайла.Количество() > 1 Тогда
            ВыбранныйЛист = Неопределено;
			
			ДопПараметры = Новый Структура("АдресОбработки", АдресОбработки);
			Оповещение = Новый ОписаниеОповещения("Подключаемый_ВыборИзСпикаЛиста", ЭтотОбъект, ДопПараметры);
            ПоказатьВыборИзСписка(Оповещение, СписокЛистовФайла);
            Возврат;
        Иначе
            ИмяЛиста = 1;
        КонецЕсли;
        
        ИмпортИзExcelФрагмент(АдресОбработки, ИмяЛиста);        
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборИзСпикаЛиста(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    АдресОбработки = ДополнительныеПараметры.АдресОбработки;
        
    ВыбранныйЛист = ВыбранныйЭлемент;
    Если ВыбранныйЛист <> Неопределено Тогда
        ИмяЛиста = ВыбранныйЛист.Значение;
    Иначе
        Если ЭтоАдресВременногоХранилища(АдресОбработки) Тогда
            УдалитьИзВременногоХранилища(АдресОбработки);
        КонецЕсли;
        Возврат;
    КонецЕсли;
    
    ИмпортИзExcelФрагмент(АдресОбработки, ИмяЛиста);

КонецПроцедуры

&НаКлиенте
Процедура ИмпортИзExcelФрагмент(Знач АдресОбработки, Знач ИмяЛиста)
    
    ИмпортироватьДанныеОбработки(АдресОбработки, ИмяЛиста);
    
    Модифицированность = Истина;
    ОтобразитьНаличиеФункции();

КонецПроцедуры

&НаСервере
Процедура ИмпортироватьДанныеОбработки(АдресОбработки, ИмяЛиста)
	
	
	Обработка = ПолучитьИзВременногоХранилища(АдресОбработки);
	Обработка.ИмяЛиста = ИмяЛиста;
	ТаблДок   = Обработка.Импортировать();
	
	Если ТаблДок <> Неопределено Тогда
		
		ОбновитьПолеМакета(ТаблДок);
				
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресОбработки) Тогда
		УдалитьИзВременногоХранилища(АдресОбработки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьМакетПоРежимуРедактирования()
	
	ЗаполнитьПроцедурыРедактирования();
	
	Если Элементы.ФормаОтобразитьЯчейкиФормул.Пометка Тогда
		
		Для Каждого СтрПоказатель ИЗ КэшФункцийПоказателей Цикл
			
			УстановитьТекстОбласти(СтрПоказатель.Код,?(ПустаяСтрока(СтрПоказатель.ПроцедураРедактирования),СтрПоказатель.Процедура,СтрПоказатель.ПроцедураРедактирования));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.ПолеТабличногоДокументаМакет.ТолькоПросмотр 	= РежимРедактированияФормул;
	Элементы.ФормированиеМакета.Доступность					= Не РежимРедактированияФормул;
	Элементы.ЭлементыОтчета.Доступность						= Не РежимРедактированияФормул;
	Элементы.АналитикиОтчета.Доступность 					= Не РежимРедактированияФормул;
	Элементы.Сопоставление.Доступность						= Не РежимРедактированияФормул;
					
КонецПроцедуры // ПодготовитьМакетПоРежимуРедактирования()

&НаСервере
Процедура ЗаполнитьПроцедурыРедактирования()
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст="ВЫБРАТЬ
	|	РеквизитыИсточниковДанныхДляФормул.КодИсточника,
	|	РеквизитыИсточниковДанныхДляФормул.ПоказательТекущегоОтчета,
	|	РеквизитыИсточниковДанныхДляФормул.ЕстьНестандартныеОтборы,
	|	РеквизитыИсточниковДанныхДляФормул.КодУпрощеннойФормулы,
	|	РеквизитыИсточниковДанныхДляФормул.ПотребительРасчета,
	|	РеквизитыИсточниковДанныхДляФормул.КодПоказательОтбор
	|ПОМЕСТИТЬ ИсточникиДанных
	|ИЗ
	|	РегистрСведений.РеквизитыИсточниковДанныхДляФормул КАК РеквизитыИсточниковДанныхДляФормул
	|ГДЕ
	|	РеквизитыИсточниковДанныхДляФормул.НазначениеРасчетов = &НазначениеРасчетов
	|	И РеквизитыИсточниковДанныхДляФормул.СпособИспользования = &СпособИспользования";
	
	Запрос.УстановитьПараметр("НазначениеРасчетов",ПравилоОбработки);
	Запрос.УстановитьПараметр("СпособИспользования",Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета);
	Запрос.Выполнить();
	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникиДанных.КодИсточника,
	|	ИсточникиДанных.ПоказательТекущегоОтчета,
	|	ИсточникиДанных.ЕстьНестандартныеОтборы,
	|	ИсточникиДанных.КодУпрощеннойФормулы,
	|	ИсточникиДанных.КодПоказательОтбор
	|ИЗ
	|	ИсточникиДанных КАК ИсточникиДанных
	|ГДЕ
	|	ИсточникиДанных.ПотребительРасчета = &ПотребительРасчета";
	
		
	Для Каждого Строка ИЗ КэшФункцийПоказателей Цикл
		
		ТекстПроцедуры=Строка.Процедура;
		
		Если Строка.ПроизвольныйКод Тогда
			
			Строка.ПроцедураРедактирования=ТекстПроцедуры;
			
		Иначе
			
			Запрос.УстановитьПараметр("ПотребительРасчета",Строка.Ссылка);
			
			Результат=Запрос.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл
						
				ТекстОперанда=Результат.КодУпрощеннойФормулы;	
				ТекстПроцедуры=СтрЗаменить(ТекстПроцедуры,"["+СокрЛП(Результат.КодИсточника)+"]",ТекстОперанда);
				
			КонецЦикла;
			
			Строка.ПроцедураРедактирования=ТекстПроцедуры;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьПроцедурыРедактирования() 


&НаСервере
Функция ОбработкаЗагруженногоФайлаXLS(АдресФайла, АдресОбработки)
	
	ЗагруженныйФайл = ПолучитьИзВременногоХранилища(АдресФайла);
	
	Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
		УдалитьИзВременногоХранилища(АдресФайла);
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла(".xls");
	ЗагруженныйФайл.Записать(ИмяФайла);
	
	ТекОбработка = Обработки.ИмпортИзExcel.Создать();
	ТекОБработка.ИмяФайла = ИмяФайла;
	ТекОбработка.РежимИмпортаДанных = Ложь;
	
	СписокЛистов = ТекОбработка.ПолучитьСписокЛистовФайла();
	АдресОбработки = ПоместитьВоВременноеХранилище(ТекОбработка, УникальныйИдентификатор);
	
	Возврат СписокЛистов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФОРМУЛАМИ РАСЧЕТОВ ПОКАЗАТЕЛЕЙ

&НаКлиенте
Процедура ФормулаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ПравилоОбработки) Тогда
		Сообщить(Нстр("ru = 'Не указано правило обработки.'"), СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;
	
	ОтобразитьОкноНастройкиФормулыПоказателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента")		
		И КэшФункцийПоказателей.НайтиСтроки(Новый Структура("Код",Область.Имя)).Количество()>0  Тогда
				
		СтандартнаяОбработка = Ложь;
		
		Если РежимРедактированияФормул Тогда
			
			Если Не ЗначениеЗаполнено(ПравилоОбработки) Тогда
				Сообщить(Нстр("ru = 'Не указано правило обработки.'"), СтатусСообщения.Информация);
				Возврат;
			КонецЕсли;
				
			Элементы.ПолеТекстовогоДокументаПроцедура.ВыделенныйТекст="{С"+Формат(Область.Верх,"ЧГ=")+"К"+Формат(Область.Лево,"ЧГ=")+"}";
				
					
		Иначе
			
			Если Элементы.ФормаОтобразитьЯчейкиФормул.Пометка Тогда
				
				РедактированиеФормулыОткрыть();
				
			Иначе
				
				ОткрытьНаборСвойств();
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтандартнаяОбработка = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИтоговуюЯчейку()
	
	мТабДок = ПолеТабличногоДокументаМакет;
	
	Если мТабДок.ВыделенныеОбласти.Количество() <> 1 Тогда
		Сообщить(Нстр("ru = 'Необходимо выбрать одну ячейку.'"), СтатусСообщения.Информация);
		Возврат Ложь;
	КонецЕсли;
	
	ТекОбласть = мТабДок.ВыделенныеОбласти[0];
	Если ТекОбласть.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТекОбласть.Лево <> ТекОбласть.Право ИЛИ ТекОбласть.Верх <> ТекОбласть.Низ Тогда
			
		Если НЕ ПроверитьОбластьНаОбъединенность(мТабДок, ТекОбласть) Тогда
			Сообщить(Нстр("ru = 'Необходимо выбрать одну ячейку.'"), СтатусСообщения.Информация);
			Возврат Ложь;
		КонецЕсли;
			
	КонецЕсли;
		
	ПозСтрока  = СтрНайти(ТекОбласть.Имя, "Строка_");
	ПозКолонка = СтрНайти(ТекОбласть.Имя, "Колонка_");
	
	Если ПозСтрока <> 0 Тогда
		мТипЯчейки = "Строка";
	ИначеЕсли ПозКолонка <> 0 Тогда
		мТипЯчейки = "Колонка"
	Иначе
		Если КэшФункцийПоказателей.НайтиСтроки(Новый Структура("Код",ТекОбласть.Имя)).Количество()>0 Тогда
			мТипЯчейки = "Показатель";
		Иначе
			Сообщить(Нстр("ru = 'Неверный тип итоговой ячейки'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ИтоговаяЯчейка=ТекОбласть.Имя;
	ТипЯчейки    = мТипЯчейки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОкноНастройкиФормулыПоказателя(ДанныеПоказателя)
			
	Если ТипЯчейки = "Показатель" Тогда
				
		Если РежимРедактированияФормул Тогда
			
			РазвернутьПанельИтоговойФормулы(ДанныеПоказателя);
			
		Иначе
			
			ЗакрытьПанельФормул();
			
			// Открываем формулу редактирования заполняемого показателя
			
			СтруктураПараметров=Новый Структура;
			СтруктураПараметров.Вставить("ВидОтчета",Объект.Владелец);
			СтруктураПараметров.Вставить("НазначениеРасчетов",ПравилоОбработки);
			СтруктураПараметров.Вставить("ОбновлятьОбъект",Истина);
			СтруктураПараметров.Вставить("ПотребительРасчета",ДанныеПоказателя.Ссылка);
			СтруктураПараметров.Вставить("СпособИспользования",ПредопределенноеЗначение("Перечисление.СпособыИспользованияОперандов.ДляФормулРасчета"));
			
			ОткрытьФорму("ОбщаяФорма.ФормаНастройкиФормулРасчета", СтруктураПараметров, ЭтаФорма);
						
		КонецЕсли;
		
	Иначе
		
		РазвернутьПанельИтоговойФормулы();
		
	КонецЕсли;	
	
КонецПроцедуры // ОткрытьОкноНастройкиФормулыПоказателя() 

&НаКлиенте
Процедура ОтобразитьОкноНастройкиФормулыПоказателя()
	
	Если НЕ ЗначениеЗаполнено(ТекущийПоказатель) Тогда
		Возврат;
	КонецЕсли;	
	
	МассивПоказатели = КэшФункцийПоказателей.НайтиСтроки(Новый Структура("Код", ТекущийПоказатель));
	
	Если МассивПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ТипЯчейки = "Показатель";
	
	ИзмененаФормулаРасчета = Ложь;
		
	ПотребительРасчета = МассивПоказатели[0].Ссылка;
	
	ОткрытьОкноНастройкиФормулыПоказателя(МассивПоказатели[0]);
	
КонецПроцедуры // ОтобразитьОкноНастройкиФормулыПоказателя() 

/////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ФОРМИРОВАНИЯ ИТОГОВЫХ ФОРМУЛ


&НаКлиенте
Процедура РедактироватьПроцедуру(Команда)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ТекстПроцедуры",ПолеТекстовогоДокументаПроцедура.ПолучитьТекст());
	СтруктураПараметров.Вставить("ВычисляемыйПоказатель",Истина);
	СтруктураПараметров.Вставить("ИмяПроцедуры","ФормулаВычисления");
	СтруктураПараметров.Вставить("ВидОтчета",Объект.Владелец);
			
	ОткрытьФорму("ОбщаяФорма.ФормаРедактированияПроцедур", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТекстВФормулу(ТекстВставки,Сдвиг=0)
	
	ПТД = Элементы.ПолеТекстовогоДокументаПроцедура;	
	
	СтрокаНач=0;
	СтрокаКон=0;
	КолонкаНач=0;
	КолонкаКон=0;
	
	ПТД.ПолучитьГраницыВыделения(СтрокаНач,
								КолонкаНач,
								СтрокаКон,
								КолонкаКон);
	
	
	Если ПустаяСтрока(СокрЛП(ПолеТекстовогоДокументаПроцедура.ПолучитьТекст())) Тогда
		
		ПТД.УстановитьГраницыВыделения(1,1,1,1);
				
	КонецЕсли;
		
	ПТД.ВыделенныйТекст = ТекстВставки;
	
	Если НЕ Сдвиг=0 Тогда
		
		ПТД.ПолучитьГраницыВыделения(СтрокаНач,
									КолонкаНач,
									СтрокаКон,
									КолонкаКон);
		
		ПТД.УстановитьГраницыВыделения(СтрокаНач,КолонкаНач+Сдвиг,СтрокаКон,КолонкаКон+Сдвиг);
		
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	
КонецПроцедуры // ВставитьТекстВФормулу() 

&НаКлиенте
Процедура КнопкаПлюс(Команда)
	
	ВставитьТекстВФормулу(" + ");
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаМинус(Команда)
	
	ВставитьТекстВФормулу(" - ");
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаУмножить(Команда)
	
	ВставитьТекстВФормулу(" * ");
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаРазделить(Команда)
	
	ВставитьТекстВФормулу(" / ");
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСкобки(Команда)
	
	ВставитьТекстВФормулу(" ()",-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаУсловие(Команда)
	
	ВставитьТекстВФормулу(" ?(,,)",-3);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаМеньше(Команда)
	
	ВставитьТекстВФормулу(" < ");
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаРавно(Команда)
	
	ВставитьТекстВФормулу(" = ");
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаБольше(Команда)
	
	ВставитьТекстВФормулу(" > ");
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаВставитьСкобки(Команда)
	
	МассивКодовПоказателей=ПолучитьСписокПоказателей();
	
	Если РежимРедактированияФормул Тогда
		
		Для Каждого Код ИЗ МассивКодовПоказателей Цикл
			
			Если КэшФункцийПоказателей.НайтиСтроки(Новый Структура("Код",Код)).Количество()>0 Тогда
				
				ТекОбласть=ПолеТабличногоДокументаМакет.Области.Найти(Код);
				
				ВставитьТекстВФормулу("{С"+Формат(ТекОбласть.Верх,"ЧГ=")+"К"+Формат(ТекОбласть.Лево,"ЧГ=")+ "}");
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Элемент Из ПолучитьСписокПоказателей() Цикл
			
			Если ПроизвольныйКод Тогда
				ВставитьТекстВФормулу("Показатели." + СокрЛП(Элемент));
			Иначе
				ВставитьТекстВФормулу("[" + СокрЛП(Элемент) + "]");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьПанельИтоговойФормулы(ДанныеПоказателя=Неопределено)
				
	Если ДанныеПоказателя = Неопределено Тогда
		Элементы.НадписьПоказатель.Заголовок = "";
		ПроизвольныйКод				 = Ложь;
		ПотребительРасчета			 = "";
		ПересчитыватьПриОткрытии	 = Ложь;
		РедактированиеВозможно		 = Ложь;
		ПолеТекстовогоДокументаПроцедура.УстановитьТекст("");
	Иначе
		
		СтрокаПоказатель = Новый ФорматированнаяСтрока(Строка(ДанныеПоказателя.Ссылка), Новый Шрифт(, , Истина));	// жирный текст.
		СтрокаПояснение = НСтр("ru = 'Формула расчета показателя '");
		Элементы.НадписьПоказатель.Заголовок = Новый ФорматированнаяСтрока(СтрокаПояснение, СтрокаПоказатель);
		ПроизвольныйКод					= ДанныеПоказателя.ПроизвольныйКод;
		ПотребительРасчета				= ДанныеПоказателя.Ссылка;
		ПересчитыватьПриОткрытии		= ДанныеПоказателя.ПересчитыватьПриОткрытии;
		РедактированиеВозможно			= ДанныеПоказателя.РедактированиеВозможно;
		НовыйТекстПроцедуры = 			?(НЕ ДанныеПоказателя.ПроизвольныйКод, ДанныеПоказателя.ПроцедураРедактирования, ДанныеПоказателя.Процедура);
		ПолеТекстовогоДокументаПроцедура.УстановитьТекст(НовыйТекстПроцедуры);
		
	КонецЕсли;
	
	Если Не Элементы.ГруппаФормулы.Видимость Тогда
		
		Элементы.ГруппаФормулы.Видимость=Истина;
		
	КонецЕсли;
	
	Элементы.ГруппаПроизвольныйКод.ПодчиненныеЭлементы.ПроизвольныйКод.Пометка = ПроизвольныйКод;
	Элементы.ГруппаПроизвольныйКод.ПодчиненныеЭлементы.РедактироватьПроцедуру.Видимость = ПроизвольныйКод;
	
КонецПроцедуры // РазвернутьПанельИтоговойФормулы() 

&НаКлиенте
Процедура ПроизвольныйКод(Команда)
	
	ПроизвольныйКод=НЕ Элементы.ПроизвольныйКод.Пометка;
	Элементы.ПроизвольныйКод.Пометка=ПроизвольныйКод;
	Элементы.РедактироватьПроцедуру.Видимость=ПроизвольныйКод;
	
КонецПроцедуры


&НаКлиенте
Функция СформироватьСтруктуруДляЗаписиФормулы()
	
	СтруктураДанных=Новый Структура;
	СтруктураДанных.Вставить("ТекстПроцедуры",ПолеТекстовогоДокументаПроцедура.ПолучитьТекст());
	СтруктураДанных.Вставить("ТипЯчейки",ТипЯчейки);
	СтруктураДанных.Вставить("ВидФормулы",ВидФормулы);
	СтруктураДанных.Вставить("ИтоговаяЯчейка",ИтоговаяЯчейка);
	СтруктураДанных.Вставить("Владелец",Объект.Владелец);
	СтруктураДанных.Вставить("НазначениеРасчетов",ПравилоОбработки);
	СтруктураДанных.Вставить("ПотребительРасчета",ПотребительРасчета);
	СтруктураДанных.Вставить("ПроизвольныйКод",ПроизвольныйКод);
	СтруктураДанных.Вставить("ПересчитыватьПриОткрытии",ПересчитыватьПриОткрытии);
	СтруктураДанных.Вставить("РедактированиеВозможно",РедактированиеВозможно);
	СтруктураДанных.Вставить("СпособИспользования",ПредопределенноеЗначение("Перечисление.СпособыИспользованияОперандов.ДляФормулРасчета"));

	Возврат СтруктураДанных;
				
КонецФункции // СформироватьСтруктуруДляЗаписиФормулы()

&НаСервере
Процедура ОбновитьДанныеМакета(СтруктураДанных)
	
	ОбновитьКэшФункцийПоказателей();
	ОтобразитьНаличиеФункции();
	
	Для Каждого СтрКод ИЗ СтруктураДанных.СписокКодовВычисления Цикл
		
		ТекОбласть=ПолеТабличногоДокументаМакет.Области.Найти(СокрЛП(СтрКод.Значение));
		
		Если НЕ ТекОбласть=Неопределено Тогда
			
			ПрименитьНастройкуОформления(ТекОбласть, ?(ВидФормулы=0,"ВычисляемоеЗначение","ЗаполняемоеЗначение"));
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры // ОбновитьДанныеМакета() 
	
&НаСервере
Функция ЗаписатьПроцедуруРасчета(СтруктураДанных)
		
	Если НЕ ТипЯчейки="Показатель" Тогда
		
		СтруктураДанных.Вставить("ПроверкаВыполнена",Ложь);
		СтруктураДанных.Вставить("ЕстьОшибки",Ложь);
		СтруктураДанных.Вставить("ТекстВопроса");
		СтруктураДанных.Вставить("СправочникОбъектАдрес",СправочникОбъектАдрес);
		СтруктураДанных.Вставить("СтрокаКолонка",СтрокаКолонка);
		СтруктураДанных.Вставить("СписокКодовКУдалению",Новый СписокЗначений);
		СтруктураДанных.Вставить("СписокКодовВычисления",Новый СписокЗначений);
				
		Если НЕ СохранитьИзмененныеНастройки(СтруктураДанных) Тогда
			
			Если СтруктураДанных.ПроверкаВыполнена И СтруктураДанных.ЕстьОшибки Тогда
				
				СтруктураДанных.ЕстьОшибки=Ложь;
				
				Если НЕ СохранитьИзмененныеНастройки(СтруктураДанных) Тогда
					
					Возврат Ложь;
					
				КонецЕсли;
				
			Иначе
				
				Возврат ЛОжь;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		ОбновитьДанныеМакета(СтруктураДанных);
		
	Иначе
		
		Если РежимРедактированияФормул Тогда
			
			Если ПроизвольныйКод Тогда
				
				Если НЕ УправлениеОтчетамиУХ.ПроверитьФормулуПоказателя(СтруктураДанных) Тогда
					Возврат Ложь;
				КонецЕсли;
				
				РабочийТекстФормулы=СтруктураДанных.ТекстПроцедуры;
				РабочийТекстРедактирования=СтруктураДанных.ТекстПроцедуры;
				
			Иначе
				
				Если НЕ УправлениеОтчетамиУХ.ОбработатьТекстУпрощеннойФормулы(СтруктураДанных) Тогда		
					Возврат Ложь;	
				КонецЕсли;
								
				РабочийТекстФормулы=СтруктураДанных.ТекстПроцедуры;
				РабочийТекстРедактирования=СтруктураДанных.РабочийТекстРедактирования;
				
			КонецЕсли;
						
			УправлениеОтчетамиУХ.ЗаписатьПроцедуруРасчета(СтруктураДанных);
			
			СтрПоказатель=КэшФункцийПоказателей.НайтиСтроки(Новый Структура("Ссылка",ПотребительРасчета));
			СтрПоказатель[0].Процедура					= РабочийТекстФормулы;
			СтрПоказатель[0].ПроцедураРедактирования	= РабочийТекстРедактирования;
			СтрПоказатель[0].РедактированиеВозможно		= СтруктураДанных.РедактированиеВозможно;
			СтрПоказатель[0].ПересчитыватьПриОткрытии	= СтруктураДанных.ПересчитыватьПриОткрытии;
				
			ПолеТекстовогоДокументаПроцедура.УстановитьТекст(РабочийТекстРедактирования);
			
			ОбластьПоказателя=ПолеТабличногоДокументаМакет.Области.Найти(СтрПоказатель[0].Код);
							
		Иначе
			
			Если НЕ УправлениеОтчетамиУХ.ПроверитьФормулуПоказателя(СтруктураДанных) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			УправлениеОтчетамиУХ.ЗаписатьПроцедуруРасчета(СтруктураДанных);
			
			СтрПоказатель=КэшФункцийПоказателей.НайтиСтроки(Новый Структура("Ссылка",ПотребительРасчета));
			СтрПоказатель[0].Процедура=СтруктураДанных.ТекстПроцедуры;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИзмененаФормулаРасчета=Ложь;
	Модифицированность=Ложь;
		
	Возврат Истина;
		
КонецФункции // ЗаписатьПроцедуруРасчета()
 
&НаСервереБезКонтекста
Функция РазобратьТекстФормулы(мТаблицаПарсинга,СтруктураДанных)
	
	ДлинаКодаКолонки = МетаДанные.Справочники.КолонкиОтчетов.ДлинаКода;
	ДлинаКодаСтроки  = МетаДанные.Справочники.СтрокиОтчетов.ДлинаКода;
	
	мТаблицаПарсинга = Новый ТаблицаЗначений;
	мТаблицаПарсинга.Колонки.Добавить("Текст", Новый ОписаниеТипов("Строка"));
	мТаблицаПарсинга.Колонки.Добавить("Параметр", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	ТекстПроцедуры=СтруктураДанных.ТекстПроцедуры;
	ПроизвольныйКод=СтруктураДанных.ПроизвольныйКод;
		
	Если ПроизвольныйКод Тогда
		НоваяСтрока = мТаблицаПарсинга.Добавить();
		НоваяСтрока.Параметр = Ложь;
		НоваяСтрока.Текст    = ТекстПроцедуры;
		Возврат Истина;
	КонецЕсли;
	
	мЕстьПоказатель = Ложь;
	ВремСтрока      = "";
	
	Для Инд = 1 По СтрДлина(ТекстПроцедуры) Цикл
		СтрСимвол = Сред(ТекстПроцедуры, Инд, 1);
		Если СтрСимвол = "[" Тогда
			Если НЕ мЕстьПоказатель Тогда
				Если НЕ ПустаяСтрока(ВремСтрока) Тогда
					НоваяСтрока          = мТаблицаПарсинга.Добавить();
					НоваяСтрока.Параметр = Ложь;
					НоваяСтрока.Текст    = ВремСтрока;
					ВремСтрока           = "";
				КонецЕсли;
				мЕстьПоказатель      = Истина;
			Иначе
				
				СтрокаШаблона = Нстр("ru = 'Ошибка в формуле. В названии показателя присутствует символ [. %1<<?>> ['");
				
				Если ЗначениеЗаполнено(СтрокаШаблона) тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВремСтрока),,, СтатусСообщения.Внимание);
				КонецЕсли;
				
				Возврат Ложь;
			КонецЕсли;
			
		ИначеЕсли СтрСимвол = "]" Тогда
			
			Если мЕстьПоказатель Тогда
				
				Если НЕ ПустаяСтрока(ВремСтрока) Тогда
					Если СтрНайти(ВремСтрока, СтруктураДанных.ТипЯчейки + "_") = 0 
						И СтруктураДанных.ТипЯчейки <> "Показатель" Тогда
						
						СтрокаШаблона = Нстр("ru = 'Ошибка в формуле. Название показателя неверно для данного типа формулы. %1'");
						
						Если ЗначениеЗаполнено(СтрокаШаблона) тогда
							ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВремСтрока),,, СтатусСообщения.Внимание);
						КонецЕсли;
						
						Возврат Ложь;
					КонецЕсли;
					
					НоваяСтрока          = мТаблицаПарсинга.Добавить();
					НоваяСтрока.Параметр = Истина;
					
					Если СтруктураДанных.ТипЯчейки = "Строка" Тогда
						НоваяСтрока.Текст    = ОбщегоНазначенияУХ.ДополнитьДоЗаданнойДлины(СокрЛП(Сред(ВремСтрока,8)), ДлинаКодаСтроки);
					ИначеЕсли СтруктураДанных.ТипЯчейки = "Колонка" Тогда
						НоваяСтрока.Текст    = ОбщегоНазначенияУХ.ДополнитьДоЗаданнойДлины(СокрЛП(Сред(ВремСтрока,9)), ДлинаКодаКолонки);
					Иначе
						НоваяСтрока.Текст    = ВремСтрока;
					КонецЕсли;
					
					ВремСтрока           = "";
					мЕстьПоказатель      = Ложь;
				Иначе
					ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Ошибка в формуле. Задан пустой показатель.'"),,, СтатусСообщения.Внимание);				
					Возврат Ложь;
				КонецЕсли;
				
			Иначе
				
				СтрокаШаблона = Нстр("ru = 'Ошибка в формуле. В тексте есть непарная завершающая скобка ]. %1<<?>> ]'");
				
				Если ЗначениеЗаполнено(СтрокаШаблона) тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВремСтрока),,, СтатусСообщения.Внимание);
				КонецЕсли;
				
				Возврат Ложь;
				
			КонецЕсли;
		Иначе
			ВремСтрока = ВремСтрока + СтрСимвол;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПустаяСтрока(ВремСтрока) Тогда
		Если мЕстьПоказатель Тогда
			
			СтрокаШаблона = Нстр("ru = 'Ошибка в формуле. В названии показателя присутствует символ [. %1<<?>> ['");
			
			Если ЗначениеЗаполнено(СтрокаШаблона) тогда		
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВремСтрока),,, СтатусСообщения.Внимание);
			КонецЕсли;
		
			Возврат Ложь;
		КонецЕсли;
		
		НоваяСтрока          = мТаблицаПарсинга.Добавить();
		НоваяСтрока.Текст    = ВремСтрока;
		НоваяСтрока.Параметр = Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Процедура сохраняет формулу расчета в правило обработки.
//
&НаСервере
Функция СохранитьИзмененныеНастройки(СтруктураДанных)
		
	///////////////////////////////////////////////////////////////////////////////////////////////
	// ФОРМИРУЕМ ТАБЛИЦУ ОБРАБАТЫВАЕМЫХ ПОКАЗАТЕЛЕЙ
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоказателиОтчетов.Ссылка,
	|	ПоказателиОтчетов.Строка КАК Строка,
	|	ПоказателиОтчетов.Колонка КАК Колонка,
	|	ПоказателиОтчетов.Строка.ПорядковыйНомер КАК НомерСтроки,
	|	ПоказателиОтчетов.Колонка.ПорядковыйНомер КАК НомерКолонки,
	|	ПоказателиОтчетов.Владелец.Наименование КАК ВидОтчетаОтборНаименование,
	|	ПоказателиОтчетов.Владелец.Код КАК КодОтчетаОтбор,
	|	ПоказателиОтчетов.Код
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &Владелец
	|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("Владелец", СтруктураДанных.Владелец);				
	
	Если СтруктураДанных.ТипЯчейки = "Строка" Тогда
		
		Запрос.Текст = Запрос.Текст + " И ПоказателиОтчетов.Строка.Код = &ТекСтрока";
		Запрос.УстановитьПараметр("ТекСтрока", ОбщегоНазначенияУХ.ДополнитьДоЗаданнойДлины(Сред(СтруктураДанных.ИтоговаяЯчейка, 8),Метаданные.Справочники.СтрокиОтчетов.ДлинаКода));
		
	ИначеЕсли	СтруктураДанных.ТипЯчейки = "Колонка" Тогда
		
		Запрос.Текст = Запрос.Текст + " И ПоказателиОтчетов.Колонка.Код = &ТекКолонка";
		Запрос.УстановитьПараметр("ТекКолонка", ОбщегоНазначенияУХ.ДополнитьДоЗаданнойДлины(Сред(СтруктураДанных.ИтоговаяЯчейка, 9),Метаданные.Справочники.КолонкиОтчетов.ДлинаКода));
		
	КонецЕсли;

	ТаблицаПоказателей=Запрос.Выполнить().Выгрузить();
	
	Если СтруктураДанных.СписокКодовКУдалению.Количество()>0 Тогда
		
		Для Каждого Элемент ИЗ СтруктураДанных.СписокКодовКУдалению Цикл
			
			СтрПоказатель=ТаблицаПоказателей.Найти(Элемент.Значение,"Код");
			
			Если НЕ СтрПоказатель=Неопределено Тогда
				
				ТаблицаПоказателей.Удалить(СтрПоказатель);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Если ТаблицаПоказателей.Количество()=0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СохранитьФормулыРасчетов(СтруктураДанных,ТаблицаПоказателей);
				
КонецФункции

&НаСервереБезКонтекста
Функция СохранитьФормулыРасчетов(СтруктураДанных,ТаблицаПоказателей)
	
	Перем ТаблицаПарсинга;
	
	НеобходимоЗаписать = Ложь;
	
	Если НЕ РазобратьТекстФормулы(ТаблицаПарсинга,СтруктураДанных) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПоказателиОтчетов.Код,
	|	ПоказателиОтчетов.Строка.Код КАК Строка,
	|	ПоказателиОтчетов.Колонка.Код КАК Колонка
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &Владелец
	|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)";
	
	Если СтруктураДанных.ТипЯчейки = "Строка" Тогда
		Запрос.Текст = Запрос.Текст 
		+ "  И ПоказателиОтчетов.Строка.Код В (&СписокПарсинга)
		|  И ПоказателиОтчетов.Колонка В (ВЫБРАТЬ Показатели.Колонка ИЗ Справочник.ПоказателиОтчетов КАК Показатели 
		|  ГДЕ Показатели.Ссылка В (&СписокПоказателей))";
	ИначеЕсли СтруктураДанных.ТипЯчейки = "Колонка" Тогда 
		Запрос.Текст = Запрос.Текст 
		+ "  И ПоказателиОтчетов.Колонка.Код В (&СписокПарсинга)
		|  И ПоказателиОтчетов.Строка В (ВЫБРАТЬ Показатели.Строка ИЗ Справочник.ПоказателиОтчетов КАК Показатели
		|  ГДЕ Показатели.Ссылка В (&СписокПоказателей))";
	КонецЕсли;
	Запрос.УстановитьПараметр("Владелец", СтруктураДанных.Владелец);
	Запрос.УстановитьПараметр("СписокПарсинга", ТаблицаПарсинга.Скопировать(Новый Структура("Параметр", Истина)).ВыгрузитьКолонку("Текст"));
	Запрос.УстановитьПараметр("СписокПоказателей", ТаблицаПоказателей.ВыгрузитьКолонку("Ссылка"));
	
	КэшПоказателей = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоказателей Цикл
		
		ТекстПроцедуры = "";
		
		НеполноеОпределение = Ложь;
		
		Для Каждого Элемент Из ТаблицаПарсинга Цикл
			
			Если Элемент.Параметр Тогда
				
				Если СтруктураДанных.ТипЯчейки = "Строка" Тогда
					НайденныеСтроки = КэшПоказателей.НайтиСтроки(Новый Структура("Строка, Колонка", Элемент.Текст, СтрокаТаблицы.Ссылка.Колонка.Код));
				Иначе
					НайденныеСтроки = КэшПоказателей.НайтиСтроки(Новый Структура("Колонка, Строка", Элемент.Текст, СтрокаТаблицы.Ссылка.Строка.Код));
				КонецЕсли;
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					ТекстПроцедуры = ТекстПроцедуры + "{" + СокрЛП(НайденныеСтроки[0].Код) + "}";
					
				Иначе
					
					НеполноеОпределение = Истина;
					Прервать;
					
				КонецЕсли;
				
			Иначе
				
				ТекстПроцедуры = ТекстПроцедуры + Элемент.Текст;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НеполноеОпределение Тогда
			
			СтрокаШаблона = Нстр("ru = 'Формула для показателя [%1] не сформирована. Некоторые ячейки, участвующие в формуле, неопределены'");
			
			Если ЗначениеЗаполнено(СтрокаШаблона) тогда	
				Сообщить(СтрШаблон(СтрокаШаблона, СокрЛП(СтрокаТаблицы.Код)));
			КонецЕсли;
			
		Иначе
						
			Если Не ТекстПроцедуры="" Тогда
				
				СтруктураДанных.Вставить("ТекстПроцедуры",		ТекстПроцедуры);
				СтруктураДанных.Вставить("ПотребительРасчета",	СтрокаТаблицы.Ссылка);
				СтруктураДанных.Вставить("ПроизвольныйКод",		Ложь);
				СтруктураДанных.Вставить("СпособИспользования",	Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета);
				
				Если УправлениеОтчетамиУХ.ОбработатьТекстУпрощеннойФормулы(СтруктураДанных) Тогда		
					
					УправлениеОтчетамиУХ.ЗаписатьПроцедуруРасчета(СтруктураДанных);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
		
	Возврат Истина;	
	
КонецФункции // СохранитьФормулыРасчетов() 

&НаСервереБезКонтекста
Функция ПолучитьПоказателиОтбора(СтруктураДанных,ТаблицаПоказателей)
	
	Запрос=Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст="ВЫБРАТЬ *
	|ПОМЕСТИТЬ ТаблицаПоказателей
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник";
	
	Запрос.УстановитьПараметр("ВнешнийИсточник",ТаблицаПоказателей);
	Запрос.Выполнить();
	
	Запрос.Текст="ВЫБРАТЬ
	|   ТаблицаПоказателей.Ссылка КАК Показатель,
	|   ТаблицаПоказателей.Код КАК Код,
	|	ПоказателиОтчетов.Ссылка КАК ПоказательОтбор,
	|   ТаблицаПоказателей.НомерСтроки КАК НомерСтроки,
	|   ТаблицаПоказателей.НомерКолонки КАК НомерКолонки,
	|   ТаблицаПоказателей.НеРедактируется КАК НеРедактируется,
	|	ПоказателиОтчетов.Владелец.Наименование КАК ВидОтчетаОтборНаименование,
	|	ПоказателиОтчетов.Владелец.Код КАК КодОтчетаОтбор	
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПоказателей КАК ТаблицаПоказателей
	|   ПО ПоказателиОтчетов."+?(СтруктураДанных.ТипЯчейки="Колонка","Строка","Колонка")+"=ТаблицаПоказателей."+?(СтруктураДанных.ТипЯчейки="Колонка","Строка","Колонка")+" 
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &ВидОтчета
	|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)
	|	И ПоказателиОтчетов."+?(СтруктураДанных.ТипЯчейки="Колонка","Колонка","Строка")+" = &СтрокаКолонка";
				 
	Запрос.УстановитьПараметр("ВидОтчета",СтруктураДанных.Владелец);
	Запрос.УстановитьПараметр("СтрокаКолонка",СтруктураДанных.СтрокаКолонка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьПоказателиКолонки()


&НаСервереБезКонтекста
Функция ПроверитьТекстФормулы(СтруктураДанных)

	Если НЕ СтруктураДанных.ПроизвольныйКод Тогда
		
		СтруктураДанных.Вставить("ТекстПроцедуры",ОбщегоНазначенияУХ.ЗаменитьКодыВТекстеФормулы(СтруктураДанных.ТекстПроцедуры, СтруктураДанных.НазначениеРасчетов, СтруктураДанных.ПотребительРасчета, Истина));
		
	КонецЕсли;
	
	Если Не УправлениеОтчетамиУХ.ПроверитьФормулуПоказателя(СтруктураДанных) Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'При записи формулы обнаружены ошибки.'"),,, СтатусСообщения.Важное);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ПроверитьТекстФормулы()

&НаКлиенте
Процедура Проверить(Команда)
	
	Если ПроверитьТекстФормулы(СформироватьСтруктуруДляЗаписиФормулы()) Тогда
				
		Сообщить(Нстр("ru = 'Проверка успешно пройдена.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокПоказателей()
	
	мМассивПоказателей = Новый Массив;
	
	КоличествоОбластей = ПолеТабличногоДокументаМакет.ВыделенныеОбласти.Количество();
	
	Для Инд = 1  По КоличествоОбластей  Цикл
		
		Область = ПолеТабличногоДокументаМакет.ВыделенныеОбласти[КоличествоОбластей - Инд];
		
		Если ТипЗнч(Область) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		    Продолжить;
		КонецЕсли;
		
		Для ИндС = Область.Верх По Область.Низ Цикл
			Для ИндК = Область.Лево По Область.Право Цикл
				ТекОбласть = ПолеТабличногоДокументаМакет.Область(ИндС, ИндК, ИндС, ИндК);
				Если ТипЯчейки = "Показатель" Тогда
					Если ТекОбласть.СодержитЗначение ИЛИ РежимРедактированияФормул Тогда
						мМассивПоказателей.Добавить(ТекОбласть.Имя);	
					КонецЕсли;
				Иначе
					Если СтрНайти(ТекОбласть.Имя, ТипЯчейки + "_") <> 0 Тогда
						мМассивПоказателей.Добавить(ТекОбласть.Имя);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;

	КонецЦикла;
	
	Возврат мМассивПоказателей;
	
КонецФункции

&НаКлиенте
Процедура КнопкаСумма(Команда)
	
	ТекстВставки = "";
	
	МассивКодовПоказателей=ПолучитьСписокПоказателей();
	
	Если РежимРедактированияФормул Тогда
		
		Для Каждого Код ИЗ МассивКодовПоказателей Цикл
			
			Если КэшФункцийПоказателей.НайтиСтроки(Новый Структура("Код",Код)).Количество()>0 Тогда
				
				ТекОбласть=ПолеТабличногоДокументаМакет.Области.Найти(Код);
				
				ТекстВставки = ТекстВставки + "{С"+Формат(ТекОбласть.Верх,"ЧГ=")+"К"+Формат(ТекОбласть.Лево,"ЧГ=")+ "} + ";
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Элемент Из МассивКодовПоказателей Цикл
			
			Если ПроизвольныйКод Тогда
				ТекстВставки = ТекстВставки + "Показатели." + СокрЛП(Элемент) + " + ";
			Иначе
				ТекстВставки = ТекстВставки + "[" + СокрЛП(Элемент) + "] + "; 
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВставитьТекстВФормулу(Лев(ТекстВставки, СтрДлина(ТекстВставки) - 2));
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТекстовогоДокументаПроцедураПриИзменении(Элемент)
	
	ИзмененаФормулаРасчета = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагУтвержденоПриИзменении(Элемент)
	
	ИзменитьСостояниеУтверждено();
	
	ЭтаФорма.ТолькоПросмотр=ФлагУтверждено;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСостояниеУтверждено()
	
	Если НЕ Параметры.Ключ.Пустая()
	   И Объект.Утвержден И НЕ ФлагУтверждено Тогда
		
		Если УправлениеОтчетамиУХ.ПроверитьНаличиеДокументовПоЭлементуНастройки(Объект.Ссылка,"ШаблонОтчета") Тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = ' - нельзя снять флаг ""Утвержден"" бланку отчета,
							|которое используют утвержденные экземпляры отчетов.'"));
							
			ФлагУтверждено = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Объект.Утвержден = ФлагУтверждено;
	
КонецПроцедуры

&НаСервере
Функция ВернутьСтруктуруДляВызоваЭкспортаМакета()
	
	ТаблДок = Новый ТабличныйДокумент;
	ТаблДок.Вывести(ПолеТабличногоДокументаМакет);
	Возврат Новый Структура("ВидОтчета, ПравилоОбработки, БланкОтчета, ТаблДок", Объект.Владелец, ПравилоОбработки, Объект.Ссылка, ТаблДок);
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьЭкспортМакета(Команда)
	
	Имя = "ОбщаяФорма.ФормаСохраненияМакета";
	ОткрытьФорму(Имя, ВернутьСтруктуруДляВызоваЭкспортаМакета(), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоПоказателям(Команда)
	ОткрытьФорму("Отчет.ОтчетПоПоказателям.ФормаОбъекта", Новый Структура("ВидОтчета, ПравилоОбработки", Объект.Владелец, ПравилоОбработки));
КонецПроцедуры

&НаСервере
Функция УстановитьПроцедуруПоУмолчанию(Элемент, ВидОтчета, БланкДляИмпорта = Ложь)
	
	Если БланкДляИмпорта И Элемент.БланкДляОтображения Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = Нстр("ru = 'Нельзя установить бланк для отображения в качестве бланка для импорта по умолчанию'");
		СообщениеПользователю.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Возврат УправлениеОтчетамиУХ.УстановитьЭлементПоУмолчаниюДляВидаОтчета(Элемент, ВидОтчета, ?(БланкДляИмпорта, Перечисления.ЭлементыНастройкиОтчета.БланкДляИмпорта, Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображения));
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИсточникПоКодуУпрощеннойФормулы(КодУпрощеннойФормулы,НазначениеРасчетов,ПотребительРасчета)
	
	Возврат ОбщегоНазначенияУХ.ПолучитьДанныеИсточникаПоКодуУпрощеннойФормулы(КодУпрощеннойФормулы,НазначениеРасчетов,ПотребительРасчета);
	
КонецФункции // ПолучитьИсточникПоКодуУпрощеннойФормулы()

&НаСервереБезКонтекста
Функция ПолучитьРабочийПланСчетов(ПравилоОбработки)
	
	Возврат ПравилоОбработки.ПланСчетовПоУмолчанию;	
	
КонецФункции // ПолучитьРабочийПланСчетов()

&НаСервереБезКонтекста
Функция ПолучитьГруппуРаскрытия(Ссылка)
	
	Возврат Ссылка.ГруппаРаскрытия;	
	
КонецФункции // ПолучитьГруппуРаскрытия()

&НаСервере
Процедура ОбновитьОтображениеЯзыков()
	
	СтруктураЯзыков=Новый Структура;
	СтруктураЯзыков.Вставить("ОсновнойЯзык",НомерОсновногоЯзыка);
	
	СтруктураЯзыков.Вставить("ВыводитьДополнительныйЯзык1",ВыводитьДополнительныйЯзык1);
	СтруктураЯзыков.Вставить("ВыводитьДополнительныйЯзык2",ВыводитьДополнительныйЯзык2);	
	
	ДополнительныеЯзыкиУХ.ПеревестиТекстыОбластей(ПолеТабличногоДокументаМакет,ЯзыкОтображения,НомерОсновногоЯзыка,Объект.Владелец,РеквизитФормыВЗначение("ТекстыОбластейДополнительныеЯзыки"));
	
	ЯзыкОтображения=НомерОсновногоЯзыка;
	
	УстановитьДоступностьКнопок();
	
КонецПроцедуры // ОбновитьОтображениеЯзыков() 

Процедура УстановитьДоступностьКнопок()
	
	Элементы.ГруппаИмпортЭкспорт.Доступность	=(ЯзыкОтображения=0);
	Элементы.ГруппаВолшебнаяПалочка.Доступность	=(ЯзыкОтображения=0);
	Элементы.ФормированиеМакета.Доступность		=(ЯзыкОтображения=0);
	Элементы.ФормированиеМакета.Доступность		=(ЯзыкОтображения=0);
	
	
	
КонецПроцедуры // УстановитьДоступностьКнопок()
	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПЕРЕВОДА МАКЕТА НА ДОПОЛНИТЕЛЬНЫЕ ЯЗЫКИ.
//

&НаСервере
Процедура СкопироватьМакеты(ИспользуетсяМакет1, ИспользуетсяМакет2, ПеревестиНаЯзык)
	
	СкрытьШапкуИПодвал();
	
	Если ИспользуетсяМакет1 Тогда
		Макет1.Очистить();
		Макет1.Вывести(ПолеТабличногоДокументаМакет);
	КонецЕсли;
	
	Если ИспользуетсяМакет2 Тогда
		Макет2.Очистить();
		Макет2.Вывести(ПолеТабличногоДокументаМакет);
	КонецЕсли;
	
	ОтобразитьШапкуИПодвал();
	
	Если НЕ ПеревестиНаЯзык Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Справочники.СтрокиОтчетов.Выбрать(, Объект.Владелец);
	
	
	Пока Выборка.Следующий() Цикл
			
		Если ИспользуетсяМакет1 Тогда
			
			ТекНаименование = Выборка["Наименование1"];
			Если НЕ ПустаяСтрока(ТекНаименование) Тогда
				ТекОбласть =Макет1.Области.Найти("Строка_" + СокрЛП(Выборка.Код));
				Если ТекОбласть <> Неопределено И НЕ ТекОбласть.СодержитЗначение Тогда
					ТекОбласть.Текст = ТекНаименование;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользуетсяМакет2 Тогда
			
			ТекНаименование = Выборка["Наименование2"];
			Если НЕ ПустаяСтрока(ТекНаименование) Тогда
				ТекОбласть =Макет2.Области.Найти("Строка_" + СокрЛП(Выборка.Код));
				Если ТекОбласть <> Неопределено И НЕ ТекОбласть.СодержитЗначение Тогда
					ТекОбласть.Текст = ТекНаименование;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
			
		
	КонецЦикла;
	
	Выборка = Справочники.КолонкиОтчетов.Выбрать(, Объект.Владелец);
	Пока Выборка.Следующий() Цикл
		
		
		Если ИспользуетсяМакет1 Тогда
			ТекНаименование = Выборка["Наименование1"];
			Если НЕ ПустаяСтрока(ТекНаименование) Тогда
				ТекОбласть =Макет1.Области.Найти("Колонка_" + СокрЛП(Выборка.Код));
				Если ТекОбласть <> Неопределено И НЕ ТекОбласть.СодержитЗначение Тогда
					ТекОбласть.Текст = ТекНаименование;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользуетсяМакет2 Тогда
			ТекНаименование = Выборка["Наименование2"];
			Если НЕ ПустаяСтрока(ТекНаименование) Тогда
				ТекОбласть =Макет2.Области.Найти("Колонка_" + СокрЛП(Выборка.Код));
				Если ТекОбласть <> Неопределено И НЕ ТекОбласть.СодержитЗначение Тогда
					ТекОбласть.Текст = ТекНаименование;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГруппыРаскрытия.Ссылка КАК ГруппаРаскрытия,
	|	ГруппыРаскрытия.Ссылка.Код КАК КодГруппыРаскрытия,
	|	ПоказателиОтчетов.Код КАК КодПоказателя,
	|	ПоказателиОтчетов.Наименование1 КАК Показатель_Наименование1,
	|	ПоказателиОтчетов.Наименование2 КАК Показатель_Наименование2,
	|	ГруппыРаскрытия.Ссылка.ВидАналитики1.Наименование1 КАК Аналитика1_Наименование1,
	|	ГруппыРаскрытия.Ссылка.ВидАналитики1.Наименование2 КАК Аналитика1_Наименование2,
	|	ГруппыРаскрытия.Ссылка.ВидАналитики2.Наименование1 КАК Аналитика2_Наименование1,
	|	ГруппыРаскрытия.Ссылка.ВидАналитики2.Наименование2 КАК Аналитика2_Наименование2,
	|	ГруппыРаскрытия.Ссылка.ВидАналитики3.Наименование1 КАК Аналитика3_Наименование1,
	|	ГруппыРаскрытия.Ссылка.ВидАналитики3.Наименование2 КАК Аналитика3_Наименование2,
	|	ГруппыРаскрытия.Ссылка.ВидАналитики4.Наименование1 КАК Аналитика4_Наименование1,
	|	ГруппыРаскрытия.Ссылка.ВидАналитики4.Наименование2 КАК Аналитика4_Наименование2,
	|	ГруппыРаскрытия.Ссылка.ВидАналитики5.Наименование1 КАК Аналитика5_Наименование1,
	|	ГруппыРаскрытия.Ссылка.ВидАналитики5.Наименование2 КАК Аналитика5_Наименование2,
	|	ГруппыРаскрытия.Ссылка.ВидАналитики6.Наименование1 КАК Аналитика6_Наименование1,
	|	ГруппыРаскрытия.Ссылка.ВидАналитики6.Наименование2 КАК Аналитика6_Наименование2
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
	|		ПО ПоказателиОтчетов.ГруппаРаскрытия = ГруппыРаскрытия.Ссылка
	|ГДЕ
	|	ГруппыРаскрытия.Владелец = &Владелец
	|	И НЕ ПоказателиОтчетов.ПометкаУдаления
	|	И ПоказателиОтчетов.Владелец = &Владелец
	|ИТОГИ ПО
	|	ГруппаРаскрытия";
	Запрос.УстановитьПараметр("Владелец", Объект.Владелец);
	Выборка =Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ИспользуетсяМакет1 Тогда
		ТекМакет = Макет1;
		Пока Выборка.Следующий() Цикл
			
			КодГруппы = СокрЛП(Выборка.КодГруппыРаскрытия);
			ТекОбластьШапки = ТекМакет.Области.Найти(КодГруппы + "_Шапка");
			
			
			Если ТекОбластьШапки <> Неопределено Тогда
				
				ТекОбластьГруппы = ТекМакет.Области.Найти(КодГруппы);	
				Вн_Индекс = 1;
				ПродолжатьОбработку = Истина;
				
				Пока ПродолжатьОбработку Цикл
					
					Если Вн_Индекс >= ТекМакет.ШиринаТаблицы Тогда
						ПродолжатьОбработку = Ложь;
						Продолжить;
					КонецЕсли;
					
					ОбластьАналитика = ТекМакет.Область(ТекОБластьШапки.Верх, Вн_Индекс);
					ИмяОбласти = ТекМакет.Область(ТекОБластьГруппы.Верх, Вн_Индекс).Имя;
					ПозицияАналитики = СтрНайти(ИмяОбласти, "_Аналитика");
					
					Если ПозицияАналитики <> 0 Тогда
						НомерАналитики = Сред(ИмяОБласти, ПозицияАналитики + 10, 1);
						ТекстАналитики = Выборка["Аналитика" + НомерАналитики + "_Наименование1"];
						Если НЕ ПустаяСтрока(ТекстАналитики) Тогда
							ОбластьАналитика.Текст = ТекстАналитики;
						КонецЕсли;
					КонецЕсли;
					
					Вн_Индекс = ОбластьАналитика.Право + 1;
					
				КонецЦикла;
				
				ВыборкаПоказателей = Выборка.Выбрать();
				
				Пока ВыборкаПоказателей.Следующий() Цикл
					ТекстПоказателя = ВыборкаПоказателей["Показатель_Наименование1"];
					Если НЕ ПустаяСтрока(ТекстПоказателя) Тогда
						ТекОбластьПоказателя = ТекМакет.Области.Найти(КодГруппы + "_Показатель_" + СокрЛП(ВыборкаПоказателей.КодПоказателя));
						Если ТекОбластьПоказателя <> Неопределено Тогда
							ОбластьНаименование = ТекМакет.Область(ТекОбластьШапки.Верх, ТекОбластьПоказателя.Лево);
							Если НЕ ОбластьНаименование.СодержитЗначение Тогда
								ОбластьНаименование.Текст = ТекстПоказателя;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Выборка.Сбросить();
	
	Если ИспользуетсяМакет2 Тогда
		
		ТекМакет = Макет2;
		Пока Выборка.Следующий() Цикл
			
			КодГруппы = СокрЛП(Выборка.КодГруппыРаскрытия);
			ТекОбластьШапки = ТекМакет.Области.Найти(КодГруппы + "_Шапка");
			
			
			Если ТекОбластьШапки <> Неопределено Тогда
				
				ТекОбластьГруппы = ТекМакет.Области.Найти(КодГруппы);	
				Вн_Индекс = 1;
				ПродолжатьОбработку = Истина;
				
				Пока ПродолжатьОбработку Цикл
					
					Если Вн_Индекс >= ТекМакет.ШиринаТаблицы Тогда
						ПродолжатьОбработку = Ложь;
						Продолжить;
					КонецЕсли;
					
					ОбластьАналитика = ТекМакет.Область(ТекОБластьШапки.Верх, Вн_Индекс);
					ИмяОбласти = ТекМакет.Область(ТекОБластьГруппы.Верх, Вн_Индекс).Имя;
					ПозицияАналитики = СтрНайти(ИмяОбласти, "_Аналитика");
					
					Если ПозицияАналитики <> 0 Тогда
						НомерАналитики = Сред(ИмяОБласти, ПозицияАналитики + 10, 1);
						ТекстАналитики = Выборка["Аналитика" + НомерАналитики + "_Наименование2"];
						Если НЕ ПустаяСтрока(ТекстАналитики) Тогда
							ОбластьАналитика.Текст = ТекстАналитики;
						КонецЕсли;
					КонецЕсли;
					
					Вн_Индекс = ОбластьАналитика.Право + 1;
					
				КонецЦикла;
				
				ВыборкаПоказателей = Выборка.Выбрать();
				
				Пока ВыборкаПоказателей.Следующий() Цикл
					ТекстПоказателя = ВыборкаПоказателей["Показатель_Наименование2"];
					Если НЕ ПустаяСтрока(ТекстПоказателя) Тогда
						ТекОбластьПоказателя = ТекМакет.Области.Найти(КодГруппы + "_Показатель_" + СокрЛП(ВыборкаПоказателей.КодПоказателя));
						Если ТекОбластьПоказателя <> Неопределено Тогда
							ОбластьНаименование = ТекМакет.Область(ТекОбластьШапки.Верх, ТекОбластьПоказателя.Лево);
							Если НЕ ОбластьНаименование.СодержитЗначение Тогда
								ОбластьНаименование.Текст = ТекстПоказателя;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;

		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКПоказателю(Команда)
	
	ТекстОперанда=СокрЛП(Элементы.ПолеТекстовогоДокументаПроцедура.ВыделенныйТекст);
	
	Если Лев(ТекстОперанда,1)="{" Тогда // Ссылка на показатель текущего отчета
				
		АдресЯчейки="";
		
		Для Инд=2 По СтрДлина(ТекстОперанда) Цикл
			
			ТекСимвол=Сред(ТекстОперанда,Инд,1);
			
			Если ТекСимвол=";" ИЛИ ТекСимвол="}" Тогда
				
				Прервать;
				
			Иначе
				
				АдресЯчейки=АдресЯчейки+ТекСимвол;
				
			КонецЕсли;
			
		КонецЦикла;
				
		АдресЯчейки  =СтрЗаменить(АдресЯчейки,"С","R");
		АдресЯчейки  =СтрЗаменить(АдресЯчейки,"К","C");
		
		ТекОбласть=ПолеТабличногоДокументаМакет.ПолучитьОбласть(АдресЯчейки+":"+АдресЯчейки);
				
		Если (Не ТекОбласть=Неопределено) И ТекОбласть.Области.Количество()>0 Тогда
			
			ОбластьПоказателя=ПолеТабличногоДокументаМакет.Области.Найти(ТекОбласть.Области[0].Имя);
			
			ВыделеннаяОбласть=ОбластьПоказателя.Имя;
			ЦветФонаВыделеннойОбласти=ОбластьПоказателя.ЦветФона;
			
			ОбластьПоказателя.ЦветФона=Новый Цвет(83,106,194);
			Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть=ОбластьПоказателя;
			
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ТекстОперанда,"{")>0 Тогда
		
		ДанныеИсточника=ПолучитьИсточникПоКодуУпрощеннойФормулы(ТекстОперанда,ПравилоОбработки,ПотребительРасчета);
		
		Если ДанныеИсточника.Свойство("Ссылка") Тогда
			
			ОткрытьФорму("Справочник.ПоказателиОтчетов.Форма.ФормаВыбора",Новый Структура("ИсточникДанных,ВозвращатьАдреса,ТолькоБланкОтображенияПоУмолчанию",ДанныеИсточника.Ссылка,Истина,Истина),ЭтаФорма);
			
		Иначе
			
			АдресОткрывающейСкобки=Найти(ТекстОперанда,"{");
			АдресЗакрывающейСкобки=Найти(ТекстОперанда,"}");
			
			КодВидаОтчета=Лев(ТекстОперанда,АдресОткрывающейСкобки-1);
			АдресЯчейки=Сред(ТекстОперанда,АдресОткрывающейСкобки+1,АдресЗакрывающейСкобки-АдресОткрывающейСкобки-1);
			
			ОткрытьФорму("Справочник.ПоказателиОтчетов.Форма.ФормаВыбора",Новый Структура("КодВидаОтчета,АдресЯчейки,ВозвращатьАдреса,ТолькоБланкОтображенияПоУмолчанию",КодВидаОтчета,АдресЯчейки,Истина,Истина),ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОперанд(Команда)
	
	КодФормулы = СокрЛП(Элементы.ПолеТекстовогоДокументаПроцедура.ВыделенныйТекст); 
	ИсточникДанных = ПолучитьИсточникПоКодуУпрощеннойФормулы(КодФормулы, ПравилоОбработки, ПотребительРасчета);
	
	Если ИсточникДанных.Свойство("Ссылка") Тогда
		
		ОткрытьФорму("Справочник.ИсточникиДанныхДляРасчетов.ФормаОбъекта", Новый Структура("Ключ", ИсточникДанных.Ссылка));
		
	Иначе
		
		ИсточникДанных2 = ПолучитьИсточникПоКодуУпрощеннойФормулы("{"+КодФормулы+"}", ПравилоОбработки, ПотребительРасчета);
		Если ИсточникДанных2.Свойство("Ссылка") Тогда
			ОткрытьФорму("Справочник.ИсточникиДанныхДляРасчетов.ФормаОбъекта", Новый Структура("Ключ", ИсточникДанных2.Ссылка));
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОперанд(Команда)
		
	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("НазначениеРасчетов",ПравилоОбработки);
	СтруктураОтбора.Вставить("ПотребительРасчета",ПотребительРасчета);
	СтруктураОтбора.Вставить("СпособИспользования",ПредопределенноеЗначение("Перечисление.СпособыИспользованияОперандов.ДляФормулРасчета"));
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("Отбор",СтруктураОтбора);
	СтруктураПараметров.Вставить("РежимВыбора",Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор",Истина);
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе",Истина);

	ОткрытьФорму("Справочник.ИсточникиДанныхДляРасчетов.ФормаВыбора",СтруктураПараметров,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеФормулыОткрыть()
		
	ТекущаяОбласть = Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	
	Если НЕ ТипЗнч(ТекущаяОбласть) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Возврат;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ПравилоОбработки) Тогда
		Сообщить(Нстр("ru = 'Не указано правило обработки.'"), СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;
	
	Если НЕ ПоУмолчаниюОтображение Тогда
		
		ТекстВопроса = НСтр("ru = 'Редактирование формул возможно только в бланке по умолчанию для вида отчета. Установить текущий бланк бланком по умолчанию?'");
		
		Оповещение = Новый ОписаниеОповещения("РедактированиеФормулыОткрыть_Завершение", ЭтотОбъект,Новый Структура("ТекущаяОбласть",ТекущаяОбласть));
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	Иначе
		
		Если Модифицированность Тогда
			
			Записать();
			
		КонецЕсли;
		
		ПерейтиВРежимРедактированияФормулы(ТекущаяОбласть);
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеФормулыОткрыть_Завершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Да Тогда
		
		Если Модифицированность Тогда
			
			Записать();
			
		КонецЕсли;
		
		ПоУмолчаниюОтображение=УстановитьПроцедуруПоУмолчанию(Объект.Ссылка, Объект.Владелец, Ложь);
		
		Если ПоУмолчаниюОтображение Тогда
			
			ПерейтиВРежимРедактированияФормулы(ДополнительныеПараметры.ТекущаяОбласть);
			
		КонецЕсли;
		
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВРежимРедактированияФормулы(ТекущаяОбласть)
		
	Если КэшФункцийПоказателей.НайтиСтроки(Новый Структура("Код", ТекущаяОбласть.Имя)).Количество() > 0  Тогда
		
		РежимРедактированияФормул=Истина;	
		Если ИзмененаФормулаРасчета Тогда
			ТекстСообщения = НСтр("ru = 'Не завершено редактирование формулы. Открытие формулы для области %ИмяОбласти% отменено.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбласти%", Строка(ТекущаяОбласть.Имя));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Иначе	
			ОтобразитьОкноНастройкиФормулыПоказателя();
		КонецЕсли;
		
	Иначе
		
		ТипЭлемента = Неопределено;
		МассивКодов = НастройкиБланкаОтчетаУХ.ПолучитьМассивКодовРедактируемыхОбъектов(ПолеТабличногоДокументаМакет, ТипЭлемента);
		
		Если ТипЭлемента="Колонка" ИЛИ ТипЭлемента="Строка" Тогда
			
			ТипЯчейки=ТипЭлемента;
			ПолучитьИтоговуюЯчейку();
			РежимРедактированияФормул=Ложь;
			РазвернутьПанельИтоговойФормулы();
					
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПерейтиВРежимРедактированияФормулы() 

&НаКлиенте
Процедура СсылкаНаПоказатель(Команда)
	
	Если НЕ ЗначениеЗаполнено(ВидОтчетаОтбор) Тогда
		
		ТекВидОтчета=Объект.Владелец;
		
	Иначе
		
		ТекВидОтчета=ВидОтчетаОтбор;
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ПоказателиОтчетов.ФормаВыбора", Новый Структура("Отбор,ВозвращатьКод", Новый Структура("Владелец", ТекВидОтчета), Истина), ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогПоСчету(Команда)
	
	РабочийПланСчетов=ПолучитьРабочийПланСчетов(ПравилоОбработки);
	
	Если ЗначениеЗаполнено(РабочийПланСчетов) Тогда
		
		ОткрытьФорму("Справочник.СчетаБД.Форма.ФормаВыбораВидаИтога",Новый Структура("ПланСчетов",РабочийПланСчетов));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьИсточникДанных(СтруктураДанных)
	
	Возврат ОбщегоНазначенияУХ.СоздатьИсточникДанных(СтруктураДанных);	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеИсточниковДанных(Источники)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеквизитыИсточниковДанныхДляФормул.КодУпрощеннойФормулы,
	|	РеквизитыИсточниковДанныхДляФормул.КодИсточника
	|ИЗ
	|	РегистрСведений.РеквизитыИсточниковДанныхДляФормул КАК РеквизитыИсточниковДанныхДляФормул
	|ГДЕ
	|	РеквизитыИсточниковДанныхДляФормул.ИсточникДанных В(&Источники)";
	
	Запрос.УстановитьПараметр("Источники", Источники);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	ТекстВставки = "";
	
	Пока Результат.Следующий() Цикл
		
		ТекстВставки = ТекстВставки + " " + Результат.КодУпрощеннойФормулы;
		
	КонецЦикла;
	
	Возврат Сред(ТекстВставки, 2);
			
КонецФункции

&НаКлиенте
Процедура СопоставитьАналитическомуРаскрытию(Команда)
	
	Если ПолеТабличногоДокументаМакет.ВыделенныеОбласти.Количество() > 1 
		ИЛИ ПолеТабличногоДокументаМакет.ТекущаяОбласть = Неопределено		
		ИЛИ ПолеТабличногоДокументаМакет.ТекущаяОбласть.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки 
		И ПолеТабличногоДокументаМакет.ТекущаяОбласть.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		
		ПоказатьПредупреждение(, Нстр("ru = 'Для сопоставления области макета группе раскрытия необходимо выделить неразрывную группу строк в макете!'"));
		Возврат;
		
	КонецЕсли;
	
	ТекущаяОбласть = ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	
	Верх = ТекущаяОбласть.Верх;
	Низ = ТекущаяОбласть.Низ;
	Лево = ТекущаяОбласть.Лево;
	Право = ТекущаяОбласть.Право;
	
	Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
		Лево = 1;
		Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;
	КонецЕсли;
	
	ФорматированиеКолонок = Новый Соответствие;
	
	Для НомерСтроки = Верх По Низ Цикл
		Для НомерКолонки = Лево По Право Цикл
			Область = ПолеТабличногоДокументаМакет.Область(НомерСтроки, НомерКолонки);
			Если Область.Низ > НомерСтроки Тогда
				ПоказатьПредупреждение(, Нстр("ru = 'Выделенная область содержит ячейки, объединенные по строке. Сопоставление таких областей не поддерживается.'"));
				Возврат;
			КонецЕсли;
			ШиринаКолонки = Область.Право - НомерКолонки + 1;
			Если НомерСтроки = Верх Тогда
				ФорматированиеКолонок.Вставить(НомерКолонки, ШиринаКолонки);
			ИначеЕсли НЕ ШиринаКолонки = ФорматированиеКолонок.Получить(НомерКолонки) Тогда
				ПоказатьПредупреждение(, Нстр("ru = 'Выделенная область содержит ячейки, по разному объединенные по колонкам. Сопоставление таких областей не поддерживается'"));
				Возврат;
			КонецЕсли;
			Если ШиринаКолонки > 1 Тогда
				НомерКолонки = НомерКолонки + ШиринаКолонки - 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОбластьИсточник = Новый Структура("Верх,Лево,Низ,Право", Верх, Лево, Низ, Право);
	ПараметрыСопоставления = Новый Структура("ВидОтчета,ФорматированиеКолонок,ТабличныйДокумент,Область", 
								Объект.Владелец, ФорматированиеКолонок, ПолеТабличногоДокументаМакет, ОбластьИсточник);
								
	РезультатСопоставления = Неопределено;

	ДопПараметры = Новый Структура("Верх, Лево, Низ, Право", Верх, Лево, Низ, Право);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_СопоставлениеАналитическомуРаскрытию", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("Справочник.БланкиОтчетов.Форма.СопоставлениеАналитическомуРаскрытию",	
					ПараметрыСопоставления, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СопоставлениеАналитическомуРаскрытию(Результат, ДополнительныеПараметры) Экспорт
    
    Верх = ДополнительныеПараметры.Верх;
    Лево = ДополнительныеПараметры.Лево;
    Низ = ДополнительныеПараметры.Низ;
    Право = ДополнительныеПараметры.Право;
    
    
    РезультатСопоставления = Результат;
    
    Если РезультатСопоставления = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Модифицированность = Истина;
    
    ТабличныйДокументСформироватьСопоставленнуюОбластьРаскрытия(ПолеТабличногоДокументаМакет, Лево, Право, Верх, Низ, РезультатСопоставления, ЦветФонаОбластиВычисляемогоПоказателя, ЦветФонаОбластиЗаполняемогоПоказателя);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьИмяОбласти(ТабличныйДокумент, Область, Имя)
	
	ИмеющаясяОбласть = ТабличныйДокумент.Области.Найти(Имя);
	Если НЕ ИмеющаясяОбласть = Неопределено Тогда
		ИмеющаясяОбласть.Имя = "";
	КонецЕсли;
	
	Область.Имя = Имя;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТабличныйДокументСформироватьСопоставленнуюОбластьРаскрытия(Т, Лево, Право, Верх, Низ, РезультатСопоставления, ЦветФонаПоказателя, ЦветФонаАналитики)
	
	Если Низ > Верх Тогда
		Т.УдалитьОбласть(Т.Область(Верх,, Низ), ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	
	Т.ВставитьОбласть(Т.Область(Верх + 1,, Т.ВысотаТаблицы), Т.Область(Верх + 4,, Верх + 4), ТипСмещенияТабличногоДокумента.ПоВертикали, Ложь);
	
	Т.Область(Верх, 1, Верх + 3, Т.ШиринаТаблицы).СодержитЗначение = Ложь;
	Т.Область(Верх, 1, Верх + 3, Т.ШиринаТаблицы).Очистить(Истина, Истина, Истина);
	
	КодСтроки = РезультатСопоставления.КодСтроки;
	КодГруппы = РезультатСопоставления.КодГруппы;
	
	УстановитьИмяОбласти(Т, Т.Область(Верх,, Верх), "Область_Строка_" + КодСтроки);
	
	Область = Т.Область(Верх, Лево);
	УстановитьИмяОбласти(Т, Область, "Строка_" + КодСтроки);
	Область.Текст = РезультатСопоставления.НаименованиеСтроки;
	
	УстановитьИмяОбласти(Т, Т.Область(Верх + 1,, Верх + 1), КодГруппы + "_" + КодСтроки + "_Шапка");
	УстановитьИмяОбласти(Т, Т.Область(Верх + 2,, Верх + 2), КодГруппы + "_" + КодСтроки);
	УстановитьИмяОбласти(Т, Т.Область(Верх + 3,, Верх + 3), КодГруппы + "_" + КодСтроки + "_Подвал");

	ПраваяКолонка = 0;
	Для Каждого Колонка Из РезультатСопоставления.Колонки Цикл
		
		НомерКолонки = Лево - 1 + Колонка.Адрес;
		ПраваяКолонка = Макс(НомерКолонки, ПраваяКолонка);
		
		Если Колонка.ЭтоАналитика Тогда
			
			Код = Колонка.Код;
			
			Область = Т.Область(Верх + 1, НомерКолонки);
			УстановитьИмяОбласти(Т, Область, КодГруппы + "_" + КодСтроки + "_Аналитика_Аналитика" + Код + "_Шапка");
			Область.Текст = Колонка.Представление;
			
			Область = Т.Область(Верх + 2, НомерКолонки);
			УстановитьИмяОбласти(Т, Область, КодГруппы + "_" + КодСтроки + "_Аналитика_Аналитика" + Код);
			Область.ЦветФона = ЦветФонаАналитики;
			
		Иначе
			
			Код = Колонка.Код;
			
			Область = Т.Область(Верх, НомерКолонки);
			УстановитьИмяОбласти(Т, Область, Код);
			Область.СодержитЗначение = Истина;
			Область.ТипЗначения = УправлениеОтчетамиУХ.ПолучитьОписаниеТиповПоТипуЗначения(Колонка.ТипЗначения);
			Область.ЦветФона = ЦветФонаПоказателя;
			
			Область = Т.Область(Верх + 1, НомерКолонки);
			УстановитьИмяОбласти(Т, Область, КодГруппы + "_" + КодСтроки + "_Показатель__" + Код + "_Шапка");
			Область.Текст = Колонка.Представление;
			
			Область = Т.Область(Верх + 2, НомерКолонки);
			УстановитьИмяОбласти(Т, Область, КодГруппы + "_" + КодСтроки + "_Показатель_" + Код);
			Область.СодержитЗначение = Истина;
			Область.ТипЗначения = УправлениеОтчетамиУХ.ПолучитьОписаниеТиповПоТипуЗначения(Колонка.ТипЗначения);
			Область.ЦветФона = ЦветФонаАналитики;
			
			Если НЕ Колонка.ВидИтога = Перечисления.ВидыИтоговПоказателя.НеРассчитывается Тогда 
				
				Если НЕ ЗначениеЗаполнено(Колонка.ВидИтога) Тогда
					ВидИтога = "_СУММА";
				Иначе
					ВидИтога = "_" + ВРег(Колонка.ВидИтога);
				КонецЕсли;
				
				Область = Т.Область(Верх + 3, НомерКолонки);
				УстановитьИмяОбласти(Т, Область, КодГруппы + "_" + КодСтроки + "_Показатель_" + Код + ВидИтога);
				Область.СодержитЗначение = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТолстаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	
	Т.Область(Верх, Лево, Верх, ПраваяКолонка).Обвести(ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния);
	Т.Область(Верх + 1, Лево, Верх + 1, ПраваяКолонка).Обвести(ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния);
	Т.Область(Верх + 2, Лево, Верх + 3, ПраваяКолонка).Обвести(ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимРедактирования()
	
	ПодготовитьМакетПоРежимуРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеФормулыОтменить(Команда)
	
	ЗакрытьПанельФормул();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеФормулыЗаписать(Команда)
	
	ЗаписатьПроцедуруРасчета(СформироватьСтруктуруДляЗаписиФормулы());
		
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеФормулыЗавершить(Команда)
	
	Если ЗаписатьПроцедуруРасчета(СформироватьСтруктуруДляЗаписиФормулы()) Тогда
		
		ЗакрытьПанельФормул();
		
	Иначе
		
		СтрокаШаблона = Нстр("ru = 'При записи формулы показателя %1 обнаружены ошибки. Продолжить редактирование?'");
		
		ТекстВопроса = "";
		Если Не ПустаяСтрока(СтрокаШаблона) тогда								
			ТекстВопроса = СтрШаблон(СтрокаШаблона, ПотребительРасчета);
		КонецЕсли;
		
		ОтветНаВопрос = Неопределено;
		
		Оповещение = Новый ОписаниеОповещения("ЗакрытьПанельФормулПоОшибке", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ЗакрытьПанельФормулПоОшибке(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ОтветНаВопрос = РезультатВопроса;
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		
		ЗакрытьПанельФормулЗавершение();			
		
	КонецЕсли;    

КонецПроцедуры


&НаКлиенте
Процедура СвернутьОкноФормул(Команда)
	
	ЗакрытьПанельФормул();
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельФормул()
	
	Если ИзмененаФормулаРасчета Тогда
		
		СтрокаШаблона = Нстр("ru = 'Текст формулы расчета показателя %1 был изменен. Записать?'");
		
		ТекстВопроса = "";
		Если Не ПустаяСтрока(СтрокаШаблона) тогда								
			ТекстВопроса = СтрШаблон(СтрокаШаблона, ПотребительРасчета);
		КонецЕсли;
		
		ОтветНаВопрос = Неопределено;

		Оповещение = Новый ОписаниеОповещения("ЗакрытьПанельФормулПродолжение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
    ЗакрытьПанельФормулЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельФормулПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ОтветНаВопрос = РезультатВопроса;
    Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
        ЗаписатьПроцедуруРасчета(СформироватьСтруктуруДляЗаписиФормулы());			
    КонецЕсли;    
    
    ЗакрытьПанельФормулЗавершение();

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельФормулЗавершение()
    
    Элементы.ГруппаФормулы.Видимость = Ложь;
    
    //РедактированиеТекстаФормулы = Ложь;
    ИзмененаФормулаРасчета = Ложь;
    РежимРедактированияФормул = Ложь;
    ИзменитьРежимРедактирования();
    ПолеТекстовогоДокументаПроцедура.УстановитьТекст("");

КонецПроцедуры

///////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура БланкЭкспортировать(Команда)
	
	Если Элементы.ФормаОтобразитьЯчейкиПоказателей.Пометка Тогда
		
		ОбновитьТекстОбластиПоказатели();
		
	ИначеЕсли Элементы.ФормаОтобразитьЯчейкиФормул.Пометка Тогда
		
		ОтобразитьТекстОбластиФормулы();
		
	КонецЕсли;
	
	Имя = "ОбщаяФорма.ФормаСохраненияМакета";
	ОткрытьФорму(Имя, БланкЭкспортироватьНаСервере(), ЭтаФорма);
	
КонецПроцедуры


&НаСервере
Функция БланкЭкспортироватьНаСервере()
	
	Записать();
	
	Т = Новый ТабличныйДокумент;
	Т.Вывести(ПолеТабличногоДокументаМакет);
	Возврат Новый Структура("ВидОтчета,ПравилоОбработки,БланкОтчета,ТаблДок", Объект.Владелец, ПравилоОбработки, Объект.Ссылка, Т);
	
КонецФункции

&НаКлиенте
Функция ТекущийМакет()
	
	Возврат ЭтаФорма[ТекущийМакетИмя(РежимНомерТекущегоМакета)];
	
Конецфункции

&НаСервере
Функция ТекущийМакетНаСервере()
	
	Возврат ЭтаФорма[ТекущийМакетИмя(РежимНомерТекущегоМакета)];
	
Конецфункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийМакетИмя(РежимНомерТекущегоМакета)
	
	Если РежимНомерТекущегоМакета = 0 Тогда
		Возврат "ПолеТабличногоДокументаМакет";
	ИначеЕсли РежимНомерТекущегоМакета = 1 Тогда
		Возврат "Макет1";
	ИначеЕсли РежимНомерТекущегоМакета = 2 Тогда
		Возврат "Макет2";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ТекущийМакетЭлемент()
	
	Возврат Элементы[ТекущийМакетИмя(РежимНомерТекущегоМакета)];
	
Конецфункции

// ИМПОРТ и ЭКСПОРТ

&НаКлиенте
Процедура БланкИмпортировать(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = // порядок существенен в дальнейшем алгоритме
	Нстр("ru = 'Все табличный документы'") + " (*.mxl, *.xls, *.xlsx)|*.mxl; *.xls; *.xlsx|
	|" + Нстр("ru = 'Таблицы Microsoft Excel'") + " (*.xls, *.xlsx)|*.xls; *.xlsx|
	|" + Нстр("ru = 'Табличные документы 1С'") + " (*.mxl)|*.mxl";
	
	ДопПараметры = Новый Структура("ДиалогВыбораФайла,ИмпортФормул", ДиалогВыбораФайла,Ложь);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаВыбораФайла", ЭтотОбъект, ДопПараметры);
	ДиалогВыбораФайла.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулыИмпортировать(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = Нстр("ru = 'Листы Microsoft Excel'") + " (*.xls, *.xlsx)|*.xls; *.xlsx|";
	
	ДопПараметры = Новый Структура("ДиалогВыбораФайла,ИмпортФормул", ДиалогВыбораФайла,Истина);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаВыбораФайла", ЭтотОбъект, ДопПараметры);
	ДиалогВыбораФайла.Показать(Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 
    
    ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;    
    
    Если НЕ (ВыбранныеФайлы <> Неопределено) Тогда
        Возврат;
    КонецЕсли;
    
    ПолноеИмяФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
    
    Файл = Новый Файл(ПолноеИмяФайла);
    Расширение = НРег(Сред(Файл.Расширение, 2)); // начинается точкой
    
    Если Расширение = "xls" ИЛИ Расширение = "xlsx" Тогда
        ТипФайлаИсточника = 2;
    ИначеЕсли Расширение = "mxl" Тогда
        ТипФайлаИсточника = 1;
    Иначе
        ТипФайлаИсточника = 0;
    КонецЕсли;
    
    Если ТипФайлаИсточника = 0 Тогда
        ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Не удалось определить тип импортируемого файла!'"));
        Возврат;
    КонецЕсли;
    
    АдресХранилища = "";
	
	ДопПараметры = Новый Структура("Расширение, ТипФайлаИсточника,ИмпортФормул", 
									Расширение, ТипФайлаИсточника,ДополнительныеПараметры.ИмпортФормул);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаВыбораФайлаЗавершение", ЭтотОбъект, ДопПараметры);
	
	НачатьПомещениеФайла(Оповещение, АдресХранилища, ПолноеИмяФайла, Ложь, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбораФайлаЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
    
    АдресХранилища 		= Адрес;
    ПолноеИмяФайла 		= ВыбранноеИмяФайла;
    Расширение 			= ДополнительныеПараметры.Расширение;
    ТипФайлаИсточника 	= ДополнительныеПараметры.ТипФайлаИсточника;
    
    ТекстОшибки = Неопределено;
    
    Если ТипФайлаИсточника = 1 Тогда // 1 - 1С, 2 - Microsoft Excel
        
        ТекстОшибки = БланкИмпортироватьНаСервереMXL(АдресХранилища);
        
	ИначеЕсли ТипФайлаИсточника = 2 Тогда
		
		ДопПараметры = Новый Структура("АдресХранилища, Расширение,ИмпортФормул", АдресХранилища, Расширение,ДополнительныеПараметры.ИмпортФормул);
		
		Если ДополнительныеПараметры.ИмпортФормул Тогда
			
			Excel_Настройки = Неопределено;
			ExcelApplication = ОбщегоНазначенияMicrosoftExcelКлиентСерверУХ.Создать(Excel_Настройки);
			
			Если ExcelApplication = Неопределено Тогда
				ВызватьИсключение Нстр("ru = 'Не удалось создать COM-объект Microsoft Excel.'");
			КонецЕсли;
			
			Workbook = ExcelApplication.Workbooks.Open(ПолноеИмяФайла);
			
			СписокЛистов = Новый СписокЗначений;
			Для НомерЛиста = 1 По Workbook.Sheets.Count Цикл
				СписокЛистов.Добавить(НомерЛиста, Workbook.Sheets(НомерЛиста).Name);
			КонецЦикла;
			
			Workbook.Close(False);
			
			ОбщегоНазначенияMicrosoftExcelКлиентСерверУХ.Закрыть(ExcelApplication, Excel_Настройки);
			
			Workbook=Неопределено;
			
		Иначе
			
			ДанныеФайла=ПолучитьДанныеБланкаДляИмпорта(АдресХранилища,Расширение);
					
			СписокЛистов=ДанныеФайла.СписокЛистов;
							
			ДопПараметры.Вставить("ТабФайл",ДанныеФайла.ТабФайл);
			
		КонецЕсли;
		
		Если СписокЛистов.Количество() = 0 Тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Загрузка не удалась: выбранный файл не содержит листов!'"));
			Возврат;
		КонецЕсли;
		
		ВыбранныйЛист = Неопределено;
		
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаВыбораЛиста", ЭтотОбъект, ДопПараметры);
		СписокЛистов.ПоказатьВыборЭлемента(Оповещение, Нстр("ru = 'Выберите лист:'"), СписокЛистов[0]);
		
		Возврат;
		
	КонецЕсли;
    
    БланкИмпортироватьСостояние(ТекстОшибки);

КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеБланкаДляИмпорта(АдресХранилища,Расширение)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ПолучитьИзВременногоХранилища(АдресХранилища).Записать(ИмяВременногоФайла);
	
	СписокЛистов=Новый СписокЗначений;
	
	ТабФайл=Новый ТабличныйДокумент;
	
	ТабФайл.Прочитать(ИмяВременногоФайла);
	
	Для Каждого Область ИЗ ТабФайл.Области Цикл
		
		СписокЛистов.Добавить(Область.Имя);
		
	КонецЦикла;
	
	ДанныеФайла=Новый Структура;
	ДанныеФайла.Вставить("ТабФайл",ТабФайл);
	ДанныеФайла.Вставить("СписокЛистов",СписокЛистов);
	
	Возврат ДанныеФайла;
	
КонецФункции // ПолучитьДанныеБланкаДляИмпорта()

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбораЛиста(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт 
    
    АдресХранилища = ДополнительныеПараметры.АдресХранилища;
    Расширение = ДополнительныеПараметры.Расширение;
        
    ВыбранныйЛист = ВыбранныйЭлемент;
    
    Если ВыбранныйЛист = Неопределено Тогда
        Возврат;
    КонецЕсли;
	
	Если ДополнительныеПараметры.ИмпортФормул Тогда
		
		Если Модифицированность Тогда
			
			Записать();
			
		КонецЕсли;
		
		ТекстОшибки = ФормулыИмпортироватьНаСервереXLS(АдресХранилища, ВыбранныйЛист.Значение, Расширение); 
		
	Иначе
		
		ТекстОшибки = БланкИмпортироватьНаСервереXLS(АдресХранилища, ВыбранныйЛист.Значение,ДополнительныеПараметры.ТабФайл); 
		
	КонецЕсли;
	
	БланкИмпортироватьСостояние(ТекстОшибки);

КонецПроцедуры

&НаКлиенте
Процедура БланкИмпортироватьСостояние(ТекстОшибки)
    
    Если ТекстОшибки = Неопределено Тогда
        Модифицированность = Истина;
    Иначе
        Сообщить(ТекстОшибки);
        ПоказатьПредупреждение(, Нстр("ru = 'Не удалось прочитать данные из файла!'"));
    КонецЕсли;

КонецПроцедуры

&НаСервере
Функция БланкИмпортироватьНаСервереMXL(АдресХранилища)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ПолучитьИзВременногоХранилища(АдресХранилища).Записать(ИмяВременногоФайла);
	
	Т = Новый ТабличныйДокумент;
	
	Попытка
		Т.Прочитать(ИмяВременногоФайла);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат ТекстОшибки;
	КонецПопытки;
		
	ОбновитьПолеМакета(Т);
	ПолеТабличногоДокументаМакет.ОриентацияСтраницы = Т.ОриентацияСтраницы;
	
	Возврат Неопределено;
	
Конецфункции

&НаСервере
Функция БланкИмпортироватьНаСервереXLS(АдресХранилища, ИмяЛиста,ТабФайл)
		
	Попытка
		
		ОбластьЛист=ТабФайл.ПолучитьОбласть(ИмяЛиста);
		
		ТабЛист=Новый ТабличныйДокумент;
		ТабЛист.Вывести(ОбластьЛист);
		ОбновитьПолеМакета(ТабЛист);	
		
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат ТекстОшибки;
		
	КонецПопытки;
	
	Возврат Неопределено;
	
Конецфункции

&НаСервере
Функция ФормулыИмпортироватьНаСервереXLS(АдресХранилища, ИмяЛиста, Расширение)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ПолучитьИзВременногоХранилища(АдресХранилища).Записать(ИмяВременногоФайла);
	
	ИмпортИзExcel = Обработки.ИмпортФормулИзExcel.Создать();
	ИмпортИзExcel.ФайлЭксель = ИмяВременногоФайла;
	ИмпортИзExcel.ИмяЛиста = ИмяЛиста;
	ИмпортИзExcel.ВидОтчета=Объект.Владелец;
	ИмпортИзExcel.ПравилоОбработки=ПравилоОбработки;
	ИмпортИзExcel.МакетОтчета=ПолеТабличногоДокументаМакет;
	
	Попытка
		
		Т = ИмпортИзExcel.ПолучитьТекстФормул();
		
		ОбновитьКэшФункцийПоказателей();
		ЗаполнитьПроцедурыРедактирования();
		ОтобразитьНаличиеФункции();
		
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат ТекстОшибки;
	КонецПопытки;
		
	Возврат Неопределено;
	
Конецфункции


&НаКлиенте
Процедура ФормаВолшебнаяПалочка(Команда)
	
	ТекущийМакет = ТекущийМакет();
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ВыборДействияВолшебнойПалочки", ЭтотОбъект);
	ОткрытьФорму("Справочник.БланкиОтчетов.Форма.ВыборДействияВолшебнойПалочки",
					, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборДействияВолшебнойПалочки(РежимДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РежимДействие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимДействие = 0 Тогда
		
		ОткрытьФорму("Обработка.МастерГенерацииМакетаОтчета.Форма.Форма", ВолшебнаяПалочкаСформироватьМакетНаСервере(), ЭтаФорма);
		
	ИначеЕсли РежимДействие = 1 ИЛИ РежимДействие = 2 Тогда
		
		ВолшебнаяПалочкаСформироватьСтрокиКолонки(?(РежимДействие = 1, "Строки", "Колонки"));
		
	ИначеЕсли РежимДействие = 3 Тогда
		
		ВолшебнаяПалочкаСформироватьПоказатели();
		
	ИначеЕсли РежимДействие = 4 Тогда
		
		ВолшебнаяПалочкаУдалитьСопоставление();
		
	ИначеЕсли РежимДействие = 5 Тогда
		
		ВолшебнаяПалочкаИзменитьОтборы();
		
	КонецЕсли;	
	
КонецПроцедуры // ОбработатьВыбранноеДействие() 

&НаСервере
Функция ВолшебнаяПалочкаСформироватьМакетНаСервере()
	
	Возврат Новый Структура("ВидОтчета, БланкОтчета, БланкДляОтображения, АдресПараметровБланкаОтчета, Макет, РасширенныйСпособИмпорта, РежимМастера, ЦветФонаНаименования, ЦветФонаОбластиПараметра, ЦветФонаОбластиВычисляемогоПоказателя, ЦветФонаОбластиЗаполняемогоПоказателя"
							, Объект.Владелец
							, Объект.Ссылка
							, Объект.БланкДляОтображения
							, ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("ПараметрыОтчета"))
							, ТекущийМакетНаСервере()
							, Ложь
							, Ложь
							, ЦветФонаНаименования
							, ЦветФонаОбластиПараметра
							, ЦветФонаОбластиВычисляемогоПоказателя
							, ЦветФонаОбластиЗаполняемогоПоказателя);
	
КонецФункции

&НаКлиенте
Процедура ВолшебнаяПалочкаСформироватьСтрокиКолонки(СтрокиКолонки)
	
	Если СтрокиКолонки = "Строки" Тогда
		ФормаГенератора = "Справочник.БланкиОтчетов.Форма.ГенерацияСтрок";
		РежимСтроки = Истина;
	ИначеЕсли СтрокиКолонки = "Колонки" Тогда
		ФормаГенератора = "Справочник.БланкиОтчетов.Форма.ГенерацияКолонок";
		РежимСтроки = Ложь;
	Иначе
		Возврат;
	КонецЕсли;
	
	ТекущийМакет = ТекущийМакет();
	
	ДлинаКода = КэшируемыеПроцедурыУХ.ДлинаКодаСправочника(?(РежимСтроки, "СтрокиОтчетов", "КолонкиОтчетов"));
	
	Массив = Новый Массив;
	
	Для Каждого ОбластьКОбработке Из ТекущийМакет.ВыделенныеОбласти Цикл
		
		Если НЕ ТипЗнч(ОбластьКОбработке) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		
		Если РежимСтроки Тогда
			Начало = ОбластьКОбработке.Верх;
			Конец = ОбластьКОбработке.Низ;
		Иначе
			Начало = ОбластьКОбработке.Лево;
			Конец = ОбластьКОбработке.Право;
		КонецЕсли;
		
		Для Номер = Начало По Конец Цикл
			
			Если РежимСтроки Тогда
				Область = ТекущийМакет.Область(Номер, ОбластьКОбработке.Лево);
				Если НЕ Область.Верх = Номер Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Область = ТекущийМакет.Область(ОбластьКОбработке.Верх, Номер);
				Если НЕ Область.Лево = Номер Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(Область.Текст) Тогда
				Продолжить;
			КонецЕсли;
			
			Строка = Новый Структура();
			Строка.Вставить("Код",			ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(Область.Текст, ДлинаКода,?(СтрокиКолонки = "Строки","СтрокиОтчетов","КолонкиОтчетов"),Объект.Владелец));
			Строка.Вставить("Наименование",	Область.Текст);
			Строка.Вставить("ВерхЯчейки",	Область.Верх);
			Строка.Вставить("ЛевоЯчейки",	Область.Лево);
			Строка.Вставить("ПорядковыйНомер", ?(РежимСтроки, Область.Верх, Область.Лево));
			
			Массив.Добавить(Строка);
			
		КонецЦикла;
	КонецЦикла;
	
	Результат = Неопределено;
	
	ПараметрыФормы = Новый Структура("ВидОтчета,МассивТаблицы", Объект.Владелец, Массив);
	ДопПараметры = Новый Структура("ТекущийМакет", ТекущийМакет);
	Оповещение = Новый ОписаниеОповещения("ВолшебнаяПалочкаСформироватьСтрокиКолонкиЗавершение", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму(ФормаГенератора, ПараметрыФормы, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВолшебнаяПалочкаСформироватьСтрокиКолонкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекущийМакет = ДополнительныеПараметры.ТекущийМакет;    
    
    Если Результат = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Для Каждого Элемент Из Результат Цикл
		
		Область = ТекущийМакет.Область(Элемент.Ключ);
        Если НЕ Область = Неопределено Тогда
            Область.Имя = Элемент.Значение;
		КонецЕсли;
		
    КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВолшебнаяПалочкаСформироватьПоказатели()
	
	мМассивСтрок   =  Новый Массив;
	мМассивКолонок   =  Новый Массив;
	
	Для Каждого Область Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл
		Для ИндК = Область.Лево По Область.Право Цикл
			Для ИндС = Область.Верх По Область.Низ Цикл
				ТекОбласть = ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);
				Если ТипЗнч(ТекОбласть) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
					ПозСтрока  = СтрНайти(ТекОбласть.Имя, "Строка_");
					ПозКолонка = СтрНайти(ТекОбласть.Имя, "Колонка_");
					
					Если ПозСтрока <> 0 Тогда
						мМассивСтрок.Добавить(СокрЛП(Сред(ТекОбласть.Имя, ПозСтрока + 7)));
					КонецЕсли;
					
					Если ПозКолонка <> 0 Тогда
						мМассивКолонок.Добавить(СокрЛП(Сред(ТекОбласть.Имя, ПозКолонка + 8)));
					КонецЕсли;
					
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	АдресТаблицыИзмененныхПоказателей = Неопределено;

	ПараметрыФормы = Новый Структура("ВидОтчета, МассивКодовКолонок, МассивКодовСтрок", Объект.Владелец, мМассивКолонок, мМассивСтрок);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ГенерацияПоказателейВолшебнаяПалочка", ЭтотОбъект);
	ОткрытьФорму("Справочник.БланкиОтчетов.Форма.ГенерацияПоказателей", 
					ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГенерацияПоказателейВолшебнаяПалочка(Результат, ДополнительныеПараметры) Экспорт
    
    АдресТаблицыИзмененныхПоказателей = Результат;
    
    Если АдресТаблицыИзмененныхПоказателей <> Неопределено Тогда
        ОбновитьТабличныйДокументПоПоказателям(АдресТаблицыИзмененныхПоказателей);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВолшебнаяПалочкаИзменитьОтборы()
	
	Перем ТипЭлемента;
	
	МассивКодов = НастройкиБланкаОтчетаУХ.ПолучитьМассивКодовРедактируемыхОбъектов(ТекущийМакет(), ТипЭлемента);
	СоответствиеСвязей = ПолучитьСсылкиСвязанныхОбъектов(МассивКодов, ТипЭлемента);

	МассивПоказателей=Новый Массив;
	Для Каждого КлючИЗначение ИЗ СоответствиеСвязей Цикл
		
		МассивПоказателей.Добавить(КлючИЗначение.Ключ);
		
	КонецЦикла;
	
	ОткрытьФорму("Справочник.БланкиОтчетов.Форма.ГрупповоеИзменениеОтборовИсточниковДанных",Новый Структура("МассивПоказателей",МассивПоказателей));
	
	
КонецПроцедуры // ВолшебнаяПалочкаИзменитьОтборы()

&НаКлиенте
Процедура ВолшебнаяПалочкаУдалитьСопоставление()
	
	ТекущийМакет = ТекущийМакет();
	
	Для Каждого ТекВыделеннаяОбласть Из ТекущийМакет.ВыделенныеОбласти Цикл
		
		Если НЕ ТипЗнч(ТекВыделеннаяОбласть) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		
		Для НомерСтроки = ТекВыделеннаяОбласть.Верх По ТекВыделеннаяОбласть.Низ Цикл
			Для НомерКолонки = ТекВыделеннаяОбласть.Лево По ТекВыделеннаяОбласть.Право Цикл
				
				Область = ТекущийМакет.Область(НомерСтроки, НомерКолонки);
				Если Область.Верх = НомерСтроки И Область.Лево = НомерКолонки Тогда
					
					Область.Имя = "";
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Модифицированность = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ПанельМакетовПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.Язык1 Тогда
		
		ЭтаФорма.ТекущийЭлемент = Элементы.Макет1;
		РежимНомерТекущегоМакета = 1;
		
	ИначеЕсли ТекущаяСтраница = Элементы.Язык2 Тогда
		
		ЭтаФорма.ТекущийЭлемент = Элементы.Макет2;
		РежимНомерТекущегоМакета = 2;
		
	Иначе
		
		РежимНомерТекущегоМакета = 0;
		
	КонецЕсли;
	
	ТекущаяОбластьИмя = "";
	
	ПолеТабличногоДокументаМакетПриАктивизацииОбласти(Элементы.ПолеТабличногоДокументаМакет);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяФормулаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	РедактированиеФормулыОткрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьЯчейкиПоказателей(Команда)
	
	ОбновитьТекстОбластиПоказатели();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьЯчейкиФормул(Команда)
	
	ОтобразитьТекстОбластиФормулы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстОбласти(КодОбласти,Текст)
	
	РабочийМакет=ТекущийМакет();
	
	РабочаяОбласть=РабочийМакет.Области.Найти(КодОбласти);
	
	Если НЕ РабочаяОбласть=Неопределено  Тогда
		
		Если Не ПустаяСтрока(Текст) Тогда
			
			РабочаяОбласть.СодержитЗначение=Ложь;
			РабочаяОбласть.Защита=Истина;
			РабочаяОбласть.Текст=Текст;
			
		ИначеЕсли РабочаяОбласть.СодержитЗначение <> Истина Тогда
			
			РабочаяОбласть.Текст="";
			РабочаяОбласть.СодержитЗначение=Истина;
			РабочаяОбласть.Защита=Истина;
			
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры // УстановитьТекстОбласти() 
	
&НаКлиенте
Процедура ОбновитьТекстОбластиПоказатели()
	
	Если Элементы.ФормаОтобразитьЯчейкиПоказателей.Пометка Тогда
		
		Для Каждого СтрПоказатель ИЗ КэшФункцийПоказателей Цикл
			
			УстановитьТекстОбласти(СтрПоказатель.Код,"");
			
		КонецЦикла;
		
		Элементы.ФормаОтобразитьЯчейкиПоказателей.Пометка=Ложь;
		
	Иначе
		
		Для Каждого СтрПоказатель ИЗ КэшФункцийПоказателей Цикл
			
			УстановитьТекстОбласти(СтрПоказатель.Код,СтрПоказатель.Наименование);
			
		КонецЦикла;
		
		Элементы.ФормаОтобразитьЯчейкиФормул.Пометка=Ложь;
		Элементы.ФормаОтобразитьЯчейкиПоказателей.Пометка=Истина;
		
	КонецЕсли;
	
	Модифицированность=Ложь;
	
КонецПроцедуры // ОбновитьТекстОбластиПоказатели()

&НаКлиенте
Процедура ОтобразитьТекстОбластиФормулы()
	
	Если Элементы.ФормаОтобразитьЯчейкиФормул.Пометка Тогда
		
		Для Каждого СтрПоказатель ИЗ КэшФункцийПоказателей Цикл
			
			УстановитьТекстОбласти(СтрПоказатель.Код,"");
			
		КонецЦикла;
		
		Элементы.ФормаОтобразитьЯчейкиФормул.Пометка=Ложь;
		
	Иначе
		
		Для Каждого СтрПоказатель ИЗ КэшФункцийПоказателей Цикл
			
			УстановитьТекстОбласти(СтрПоказатель.Код,?(ПустаяСтрока(СтрПоказатель.ПроцедураРедактирования),СтрПоказатель.Процедура,СтрПоказатель.ПроцедураРедактирования));
			
		КонецЦикла;
		
		Элементы.ФормаОтобразитьЯчейкиФормул.Пометка=Истина;
		Элементы.ФормаОтобразитьЯчейкиПоказателей.Пометка=Ложь;
		
	КонецЕсли;
	
	Модифицированность=Ложь;
	
КонецПроцедуры // ОбновитьТекстОбластиПоказатели()

&НаКлиенте
Процедура НомерОсновногоЯзыкаПриИзменении(Элемент)
	
	Элементы.ВыводитьДополнительныйЯзык1.Доступность=Истина;
	Элементы.ВыводитьДополнительныйЯзык2.Доступность=Истина;
	
	Если НомерОсновногоЯзыка>0 Тогда
		
		ЭтаФорма["ВыводитьДополнительныйЯзык"+НомерОсновногоЯзыка]=Ложь;
		Элементы["ВыводитьДополнительныйЯзык"+НомерОсновногоЯзыка].Доступность=Ложь;
		
	КонецЕсли;
	
	ОбновитьОтображениеЯзыков();
		
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьДополнительныйЯзык1ПриИзменении(Элемент)
	
	ОбновитьОтображениеЯзыков();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьДополнительныйЯзык2ПриИзменении(Элемент)
	
	 ОбновитьОтображениеЯзыков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКОбластиПоказателя(Команда)
	
	ОбластьНайдена=ПерейтиКОбластиСервер(СокрЛП(Элементы.Показатели.ТекущиеДанные.Код));
	
	Если Не ОбластьНайдена Тогда
		
		СтрокаШаблона = Нстр("ru = 'В текущем бланке отчета отсутствует область отображения показателя %1'");
	
		Если ЗначениеЗаполнено(СтрокаШаблона) тогда
			Сообщить(СтрШаблон(СтрокаШаблона, Элементы.Показатели.ТекущиеДанные.Наименование), СтатусСообщения.Информация);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПерейтиКОбластиСервер(КодОбласти)
	
	ТекОбласть = ПолеТабличногоДокументаМакет.Области.Найти(КодОбласти);
	
	Если ТекОбласть=Неопределено Тогда
		
		Возврат Ложь;
		
	Иначе
		
		Элементы.ПолеТабличногоДокументаМакет.ПолучитьВыделенныеОбласти().Очистить();
		ПолеТабличногоДокументаМакет.ВыделенныеОбласти.Добавить(ТекОбласть);
		
		Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть=ТекОбласть;
		
		Возврат Истина;
		
	КонецЕсли;
		
КонецФункции // ПерейтиКОбластиПоказателяСервер()

&НаКлиенте
Процедура ПерейтиКОбластиСтроки(Команда)
	
	ОбластьНайдена=ПерейтиКОбластиСервер("Строка_"+СокрЛП(Элементы.ТабличноеПолеСтрок.ТекущиеДанные.Код));
	
	Если Не ОбластьНайдена Тогда
		
		СтрокаШаблона = Нстр("ru = 'В текущем бланке отчета отсутствует область отображения строки %1'");
	
		Если ЗначениеЗаполнено(СтрокаШаблона) тогда
			Сообщить(СтрШаблон(СтрокаШаблона, Элементы.ТабличноеПолеСтрок.ТекущиеДанные.Наименование), СтатусСообщения.Информация);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда        
        ЗаписатьПроцедуруРасчета(СформироватьСтруктуруДляЗаписиФормулы());        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Модифицированность=Истина;
	
	Если НЕ ПустаяСтрока(Область.Текст) Тогда
		
		ОбновитьИнформациюТекстОбласти(Область);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюТекстОбласти(Область)
	
	Если НЕ Объект.Мультиязычный Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МассивПоказателей=КэшФункцийПоказателей.НайтиСтроки(Новый Структура("Код",Область.Имя));
	
	Если МассивПоказателей.Количество()>0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекНаименование=ПолучитьТекущуюКолонкуТекстов();
	
	Если ТекстыОбластейДополнительныеЯзыки.НайтиСтроки(Новый Структура(ТекНаименование,Область.Текст)).Количество()>0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураПоиска=ПолучитьКоординатыОбласти(Область);
	
	МассивТекст=ТекстыОбластейДополнительныеЯзыки.НайтиСтроки(СтруктураПоиска);
	
	Если МассивТекст.Количество()>0 Тогда
		
		Строкаобласть=МассивТекст[0];
		
	Иначе
				
		Строкаобласть=ТекстыОбластейДополнительныеЯзыки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОбласть,СтруктураПоиска);
				
	КонецЕсли;
	
	СтрокаОбласть[ТекНаименование]=Область.Текст;
	
	Если  ТекНаименование="Наименование" Тогда
		
		ЗаполнитьПоСловарю(СтрокаОбласть);
				
	КонецЕсли;			
	
КонецПроцедуры // ОбновитьИнформациюТекстОбласти()

&НаКлиенте
Процедура ЗаполнитьПоСловарю(СтрокаОбласть)
	
	ДопЯзыки=ДополнительныеЯзыкиУХ.ПолучитьПредставленияНаДопЯзыках(СтрокаОбласть.Наименование);
	
	Для Индекс=1 По 2 Цикл
		
		Если ЗначениеЗаполнено(ДопЯзыки["Наименование"+Индекс]) Тогда
			
			СтрокаОбласть["Наименование"+Индекс]=ДопЯзыки["Наименование"+Индекс];
			СтрокаОбласть["Наименование"+Индекс+"Словарь"]=Истина;
			
		Иначе
			
			СтрокаОбласть["Наименование"+Индекс+"Словарь"]=Ложь;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры // ЗаполнитьПоСловарю() 

&НаКлиенте
Процедура Подключаемый_УстановитьТекстПроцедуры() Экспорт

	Если ТекстПроцедуры <> Неопределено Тогда
		ПолеТекстовогоДокументаПроцедура.УстановитьТекст(ТекстПроцедуры);
		ТекстПроцедуры = Неопределено;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьКэшФункцийПоказателей();
	
	Если Элементы.ФормаОтобразитьЯчейкиФормул.Пометка Тогда
				
		Для Каждого СтрПоказатель ИЗ КэшФункцийПоказателей Цикл
			
			УстановитьТекстОбласти(СтрПоказатель.Код,?(ПустаяСтрока(СтрПоказатель.ПроцедураРедактирования),СтрПоказатель.Процедура,СтрПоказатель.ПроцедураРедактирования));
			
		КонецЦикла;
				
	КонецЕсли;	
	
	Если Элементы.ФормаОтобразитьЯчейкиПоказателей.Пометка Тогда
		
		Для Каждого СтрПоказатель ИЗ КэшФункцийПоказателей Цикл
			
			УстановитьТекстОбласти(СтрПоказатель.Код,СтрПоказатель.Наименование);
			
		КонецЦикла;
		
	КонецЕсли;


КонецПроцедуры

&НаКлиенте
Процедура ПоУмолчаниюИмпортПриИзменении(Элемент)
	УправлениеДоступностью();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОбластей(ТекстыОбластейНов)
	
	Для НомСтр=1 По ПолеТабличногоДокументаМакет.ВысотаТаблицы Цикл
		
		Для НомКол=1 ПО ПолеТабличногоДокументаМакет.ШиринаТаблицы Цикл
			
			ТекОбласть=ПолеТабличногоДокументаМакет.Область(НомСтр,НомКол,НомСтр,НомКол);
			
			МассивПоказателей=КэшФункцийПоказателей.НайтиСтроки(Новый Структура("Код",ТекОбласть.Имя));
			
			Если МассивПоказателей.Количество()>0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если (Не ПустаяСтрока(ТекОбласть.Текст)) Тогда
				
				Если ТекстыОбластейНов.Найти(ТекОбласть.Текст,"Наименование")=Неопределено Тогда
					
					НоваяСтрока				= ТекстыОбластейНов.Добавить();
					НоваяСтрока.Наименование= ТекОбласть.Текст;
					НоваяСтрока.Верх	= ТекОбласть.Верх;
					НоваяСтрока.Лево	= ТекОбласть.Лево;
					НоваяСтрока.Низ		= ТекОбласть.Низ;
					НоваяСтрока.Право	= ТекОбласть.Право;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуОбластей() 

&НаСервере
Процедура НайтиОбластиТекста()
	
	ТекстыОбластейСтар=РеквизитФормыВЗначение("ТекстыОбластейДополнительныеЯзыки");
	ТекстыОбластейНов=ТекстыОбластейСтар.СкопироватьКолонки();
	
	ЗаполнитьТаблицуОбластей(ТекстыОбластейНов);
			
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТекстыОбластейНов.Верх КАК Верх,
	|	ТекстыОбластейНов.Лево КАК Лево,
	|	ТекстыОбластейНов.Низ КАК Низ,
	|	ТекстыОбластейНов.Право КАК Право,
	|	ТекстыОбластейНов.Наименование1 КАК Наименование1,
	|	ТекстыОбластейНов.Наименование2 КАК Наименование2,
	|	ТекстыОбластейНов.Наименование КАК Наименование
	|ПОМЕСТИТЬ ТекстыОбластейНов
	|ИЗ
	|	&ТекстыОбластейНов КАК ТекстыОбластейНов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТекстыОбластейНов.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекстыОбластейСтар.Наименование1 КАК Наименование1,
	|	ТекстыОбластейСтар.Наименование2 КАК Наименование2,
	|	ТекстыОбластейСтар.Наименование КАК Наименование
	|ПОМЕСТИТЬ ТекстыОбластейСтар
	|ИЗ
	|	&ТекстыОбластейСтар КАК ТекстыОбластейСтар
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТекстыОбластейСтар.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекстыНаДополнительныхЯзыках.Наименование КАК Наименование,
	|	ТекстыНаДополнительныхЯзыках.Наименование1 КАК Наименование1,
	|	ТекстыНаДополнительныхЯзыках.Наименование2 КАК Наименование2
	|ПОМЕСТИТЬ ТекстыОбщ
	|ИЗ
	|	РегистрСведений.ТекстыНаДополнительныхЯзыках КАК ТекстыНаДополнительныхЯзыках
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекстыОбластейНов.Наименование КАК Наименование,
	|	ТекстыОбластейНов.Верх КАК Верх,
	|	ТекстыОбластейНов.Лево КАК Лево,
	|	ТекстыОбластейНов.Низ КАК Низ,
	|	ТекстыОбластейНов.Право КАК Право,
	|	ЕСТЬNULL(ТекстыОбщ.Наименование1, """") КАК Наименование1Регистр,
	|	ЕСТЬNULL(ТекстыОбщ.Наименование2, """") КАК Наименование2Регистр,
	|	ЕСТЬNULL(ТекстыОбластейСтар.Наименование1, """") КАК Наименование1Стар,
	|	ЕСТЬNULL(ТекстыОбластейСтар.Наименование2, """") КАК Наименование2Стар
	|ПОМЕСТИТЬ ТекстыСопоставление
	|ИЗ
	|	ТекстыОбластейНов КАК ТекстыОбластейНов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТекстыОбластейСтар КАК ТекстыОбластейСтар
	|		ПО ТекстыОбластейНов.Наименование = ТекстыОбластейСтар.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТекстыОбщ КАК ТекстыОбщ
	|		ПО ТекстыОбластейНов.Наименование = ТекстыОбщ.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекстыСопоставление.Наименование КАК Наименование,
	|	ТекстыСопоставление.Верх КАК Верх,
	|	ТекстыСопоставление.Лево КАК Лево,
	|	ТекстыСопоставление.Низ КАК Низ,
	|	ТекстыСопоставление.Право КАК Право,
	|	ВЫБОР
	|		КОГДА ТекстыСопоставление.Наименование1Регистр = """"
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Наименование1Словарь,
	|	ВЫБОР
	|		КОГДА ТекстыСопоставление.Наименование2Регистр = """"
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Наименование2Словарь,
	|	ВЫБОР
	|		КОГДА ТекстыСопоставление.Наименование1Регистр = """"
	|			ТОГДА ТекстыСопоставление.Наименование1Стар
	|		ИНАЧЕ ТекстыСопоставление.Наименование1Регистр
	|	КОНЕЦ КАК Наименование1,
	|	ВЫБОР
	|		КОГДА ТекстыСопоставление.Наименование2Регистр = """"
	|			ТОГДА ТекстыСопоставление.Наименование2Стар
	|		ИНАЧЕ ТекстыСопоставление.Наименование2Регистр
	|	КОНЕЦ КАК Наименование2,
	|	ВЫБОР
	|		КОГДА ТекстыСопоставление.Наименование1Регистр = """"
	|					И НЕ ТекстыСопоставление.Наименование1Стар = """"
	|				ИЛИ ТекстыСопоставление.Наименование2Регистр = """"
	|					И НЕ ТекстыСопоставление.Наименование2Стар = """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДанныеИзменены
	|ИЗ
	|	ТекстыСопоставление КАК ТекстыСопоставление
	|
	|УПОРЯДОЧИТЬ ПО
	|	Верх,
	|	Лево";
	
	Запрос.УстановитьПараметр("ТекстыОбластейСтар",	ТекстыОбластейСтар);
	Запрос.УстановитьПараметр("ТекстыОбластейНов",	ТекстыОбластейНов);
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(),"ТекстыОбластейДополнительныеЯзыки");
		
КонецПроцедуры

&НаКлиенте
Процедура МультиязычныйПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьДопЯзыков();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКоординатыОбластейТекстов()
	
	ТекстыОбластейСтар=РеквизитФормыВЗначение("ТекстыОбластейДополнительныеЯзыки");
	ТекстыОбластейНов=ТекстыОбластейСтар.СкопироватьКолонки();
	
	ЗаполнитьТаблицуОбластей(ТекстыОбластейНов);
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТекстыОбластейНов.Верх КАК Верх,
	|	ТекстыОбластейНов.Лево КАК Лево,
	|	ТекстыОбластейНов.Низ КАК Низ,
	|	ТекстыОбластейНов.Право КАК Право,
	|	ТекстыОбластейНов.Наименование1 КАК Наименование1,
	|	ТекстыОбластейНов.Наименование2 КАК Наименование2,
	|	ТекстыОбластейНов.Наименование КАК Наименование
	|ПОМЕСТИТЬ ТекстыОбластейНов
	|ИЗ
	|	&ТекстыОбластейНов КАК ТекстыОбластейНов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТекстыОбластейНов.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекстыОбластейСтар.Наименование1 КАК Наименование1,
	|	ТекстыОбластейСтар.Наименование2 КАК Наименование2,
	|	ТекстыОбластейСтар.Наименование КАК Наименование,
	|	ТекстыОбластейСтар.ДанныеИзменены КАК ДанныеИзменены,
	|	ТекстыОбластейСтар.Наименование1Словарь КАК Наименование1Словарь,
	|	ТекстыОбластейСтар.Наименование2Словарь КАК Наименование2Словарь
	|ПОМЕСТИТЬ ТекстыОбластейСтар
	|ИЗ
	|	&ТекстыОбластейСтар КАК ТекстыОбластейСтар
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТекстыОбластейСтар.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекстыОбластейНов.Наименование КАК Наименование,
	|	ТекстыОбластейНов.Верх КАК Верх,
	|	ТекстыОбластейНов.Лево КАК Лево,
	|	ТекстыОбластейНов.Низ КАК Низ,
	|	ТекстыОбластейНов.Право КАК Право,
	|	ЕСТЬNULL(ТекстыОбластейСтар.Наименование1, ЛОЖЬ) КАК Наименование1,
	|	ЕСТЬNULL(ТекстыОбластейСтар.Наименование2, ЛОЖЬ) КАК Наименование2,
	|	ЕСТЬNULL(ТекстыОбластейСтар.ДанныеИзменены, ЛОЖЬ) КАК ДанныеИзменены,
	|	ЕСТЬNULL(ТекстыОбластейСтар.Наименование1Словарь, ЛОЖЬ) КАК Наименование1Словарь,
	|	ЕСТЬNULL(ТекстыОбластейСтар.Наименование2Словарь, ЛОЖЬ) КАК Наименование2Словарь
	|ИЗ
	|	ТекстыОбластейНов КАК ТекстыОбластейНов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТекстыОбластейСтар КАК ТекстыОбластейСтар
	|		ПО ТекстыОбластейНов.Наименование = ТекстыОбластейСтар.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Верх,
	|	Лево";
	
	Запрос.УстановитьПараметр("ТекстыОбластейСтар",	ТекстыОбластейСтар);
	Запрос.УстановитьПараметр("ТекстыОбластейНов",	ТекстыОбластейНов);
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(),"ТекстыОбластейДополнительныеЯзыки");
		
КонецПроцедуры // ОбновитьКоординатыОбластейТекстов() 

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетПриИзменении(Элемент)
	
	Если НЕ Объект.Мультиязычный Тогда
		
		Возврат;
	
	ИначеЕсли НЕ (ПолеТабличногоДокументаМакет.ВысотаТаблицы=ТекВысотаТаблицы И ПолеТабличногоДокументаМакет.ШиринаТаблицы=ТекШиринаТаблицы) Тогда
		
		  ОбновитьКоординатыОбластейТекстов();
		  
		  ТекВысотаТаблицы = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
		  ТекШиринаТаблицы = ПолеТабличногоДокументаМакет.ШиринаТаблицы;
		  
	КонецЕсли;
		  	
КонецПроцедуры

&НаКлиенте
Процедура ТекстыОбластейДополнительныеЯзыкиПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ТекстыОбластейДополнительныеЯзыки.ТекущиеДанные=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Строка=Элементы.ТекстыОбластейДополнительныеЯзыки.ТекущиеДанные;
	
	ТекОбласть=ПолучитьОбластьПоКоординатам(Строка);	
	Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть=ТекОбласть;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОбластьПоКоординатам(Строка)
	
	Возврат ПолеТабличногоДокументаМакет.Область(Строка.Верх,Строка.Лево,Строка.Низ,Строка.Право);
	
КонецФункции // ПолучитьОбластьПоКоординатам()

&НаКлиенте
Процедура ТекстыОбластейДополнительныеЯзыкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если (НЕ ОтменаРедактирования) Тогда
		
		СтрДанные=Элементы.ТекстыОбластейДополнительныеЯзыки.ТекущиеДанные;
		ТекНаименование=ПолучитьТекущуюКолонкуТекстов();
		
		ТекОбласть=ПолеТабличногоДокументаМакет.Область(СтрДанные.Верх,СтрДанные.Лево,СтрДанные.Низ,СтрДанные.Право);	
		ТекОбласть.Текст=СтрДанные[ТекНаименование];
		
		СтрДанные.ДанныеИзменены=Истина;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОсновнойЯзыкПриИзменении(Элемент)
	
	СтрДанные=Элементы.ТекстыОбластейДополнительныеЯзыки.ТекущиеДанные;
	ЗаполнитьПоСловарю(СтрДанные);
	СтрДанные.ДанныеИзменены=Истина;
	
КонецПроцедуры
	
	

