
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	
	ВидОтчета 			= Параметры.ВидОтчета;
	БланкДляОтображения = Параметры.БланкДляОтображения;
		
	УстановитьВидимостьДоступностьЭлементов();
	
	Если ВыводитьАналтикиВИерархии Тогда	
		 РасположениеАналитик = "ВИерархии"; 
	Иначе	 
		 РасположениеАналитик = "Рядом";
	КонецЕсли;	
	
	ЗаполнитьДеревоСтрок();
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	Элементы.ГруппаИтогПериоды.Доступность			 	= БланкДляОтображения;
	ВыводитьАналитику  									= Истина;

	Если БланкДляОтображения Тогда	
		ДобавитьИтогПоПериоду 			= Истина;
		РасположениеИтогов    			= "Справа";	
		ВыводитьАналтикиВИерархии      = Истина;	
		Элементы.РасположениеАналитик.Доступность = Ложь;
	КонецЕсли;	
	
	Если ВидОтчета.Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость Тогда	
		ВыводитьАналитику  				= Ложь;	
		ДобавитьИтогПоПериоду 			= Ложь;
	КонецЕсли;	
	
	Элементы.РасположениеИтогов.Доступность 	= ДобавитьИтогПоПериоду;
	Элементы.РасположениеАналитик.Доступность 	= ВыводитьАналитику;
	
	Если Не БланкДляОтображения Тогда //Если это бланк импорта, то аналитики всегда расположены рядом
		 Элементы.ВыводитьАналитику.Доступность 	= Ложь;
		 Элементы.РасположениеАналитик.Доступность 	= Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоСтрок()
		
	Колонки = МодульУправленияПроцессамиУХ.СформироватьТаблицуКолонокБланка(ВидОтчета);
	ЗначениеВРеквизитФормы(Колонки, "тКолонки");
	ДеревоНастройкиСервер = МодульУправленияПроцессамиУХ.СформироватьДеревоСтрокБланка(ВидОтчета, Колонки);
	РеквизитыКДобавлению = Новый Массив;
	РеквизитыКУдалению = Новый Массив;
	
	РеквизитыКУдалению = Новый Массив;
   	Для Каждого Реквизит Из ПолучитьРеквизиты("ДеревоСтрок") Цикл
		РеквизитыКУдалению.Добавить(Реквизит.Путь + "." + Реквизит.Имя);
	КонецЦикла; 
	
	Для Каждого Колонка ИЗ ДеревоНастройкиСервер.Колонки Цикл	
		МассивДоступныхТипов = Новый Массив;                                                 
		РеквизитыКДобавлению.Добавить(Новый РеквизитФормы(Колонка.Имя,
		Новый ОписаниеТипов(Колонка.ТипЗначения.Типы()),
		"ДеревоСтрок",
		Колонка.Заголовок,
		Ложь));	
	КонецЦикла;
	
	ИзменитьРеквизиты(РеквизитыКДобавлению,РеквизитыКУдалению);
	
	ЗначениеВРеквизитФормы(ДеревоНастройкиСервер,"ДеревоСтрок");
	
	УдаляемыеЭлементы = Новый Массив;
	Для Каждого Эл Из  Элементы.ДеревоСтрок.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(Эл);
	КонецЦикла;
	
	Для Каждого уЭлемент Из УдаляемыеЭлементы Цикл
		ЭтаФорма.Элементы.Удалить(уЭлемент);
	КонецЦикла;	
	
	Для Каждого Колонка ИЗ ДеревоНастройкиСервер.Колонки Цикл	
		
		ЭтаФорма.Элементы.Добавить(Колонка.Имя,Тип("ПолеФормы"),ЭтаФорма.Элементы.ДеревоСтрок);	
		ЭтаФорма.Элементы[Колонка.Имя].ПутьКДанным		= "ДеревоСтрок."+Колонка.Имя;
		Если Колонка.Имя = "Строка" Тогда
			ЭтаФорма.Элементы[Колонка.Имя].Вид				= ВидПоляФормы.ПолеВвода;						
			ЭтаФорма.Элементы[Колонка.Имя].ВыбиратьТип		= Ложь;
			ЭтаФорма.Элементы[Колонка.Имя].КнопкаВыбора		= Ложь;
			ЭтаФорма.Элементы[Колонка.Имя].КнопкаОчистки	= Ложь;
			
		Иначе
			ЭтаФорма.Элементы[Колонка.Имя].Вид				= ВидПоляФормы.ПолеФлажка;
		КонецЕсли;
		
		Если Колонка.Имя = "СтрокаВыбрана" Тогда
			ЭтаФорма.Элементы[Колонка.Имя].Заголовок = " ";
		КонецЕсли;
		
		Если Колонка.Имя = "СтрокаКод" ИЛИ Колонка.Имя = "СтрокаГруппаРаскрытия" ИЛИ Колонка.Имя = "СтрокаНаименование" Тогда
			ЭтаФорма.Элементы[Колонка.Имя].Видимость = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	УсловноеОформление.Элементы.Очистить();
	
	НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСтрок.Строка");
	ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Нстр("ru = 'Выбранные строки'");
	
	НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
	НовоеПоле.Использование = Истина;
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(СокрЛП("Строка"));
	
	
	Для Каждого Кол Из Колонки Цикл	
		НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
		НовоеПоле.Использование = Истина;
		НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(СокрЛП(Кол.Код));
	КонецЦикла;
	
	НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
	НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСтрок.Строка");
	ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение = Нстр("ru = 'Выбранные строки'");
		
	
	Для Каждого Кол Из Колонки Цикл	
		НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
		НовоеПоле.Использование = Истина;
		НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(СокрЛП(Кол.Код));
	КонецЦикла;
	
	НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255,250,217));
	
КонецПроцедуры // ЗаполнитьДеревоСтрок()

&НаКлиенте
Процедура ВидОтчетаПриИзменении(Элемент)
	
	ЗаполнитьДеревоСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтрокПриИзменении(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя = "СтрокаВыбрана" Тогда	
		тСтрока = ДеревоСтрок.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		ОбойтиСтрокиРекурсивно(тСтрока,Элемент.ТекущиеДанные.СтрокаВыбрана);
	Иначе	
		тСтрока = ДеревоСтрок.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		ОбойтиСтрокиРекурсивно(тСтрока,Элемент.ТекущиеДанные[Элемент.ТекущийЭлемент.Имя],Элемент.ТекущийЭлемент.Имя);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтрокПередНачаломИзменения(Элемент, Отказ)

	Если Элемент.ТекущийЭлемент.Имя = "СтрокаВыбрана" Тогда
		 Возврат;
	КонецЕсли;	
	
	Если Элемент.ТекущийЭлемент.Имя = "Строка" Тогда
		 Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбойтиСтрокиРекурсивно(тСтрока,Флаг,Колонка=Неопределено)
		
	Если Колонка=Неопределено Тогда
		
		Для Каждого Кол Из тКолонки Цикл	
			ПерваяСтрока = ДеревоСтрок.ПолучитьЭлементы()[0];
							
			Если ПерваяСтрока[СокрЛП(Кол.Код)] И тСтрока <> ПерваяСтрока Тогда   // в первой строке флаг в колонке автоматически не сбрасывать			
				тСтрока[СокрЛП(Кол.Код)] = Флаг;
			КонецЕсли;			
		КонецЦикла;	
		
		тСтрока["СтрокаВыбрана"] = Флаг;
		
	Иначе
		Если тСтрока.СтрокаВыбрана Тогда
			тСтрока[Колонка] = Флаг;
		КонецЕсли;		
	КонецЕсли;	

		
	Для Каждого тЭлемент Из тСтрока.ПолучитьЭлементы() Цикл	
		Если Колонка=Неопределено Тогда			
			ОбойтиСтрокиРекурсивно(тЭлемент,Флаг);			
		Иначе						
			ОбойтиСтрокиРекурсивно(тЭлемент,Флаг,Колонка);		
		КонецЕсли;		
	КонецЦикла;	
		
КонецПроцедуры	

&НаКлиенте
Процедура Применить(Команда)
	
	Закрыть(СформироватьПараметры());
	
КонецПроцедуры

&НаСервере
Функция СформироватьПараметры()
	
	СтруктураОтвета = Новый Структура;
	
	тДеревоСтрок 	= РеквизитФормыВзначение("ДеревоСтрок");
	тТаблицаКолонок  = РеквизитФормыВзначение("тКолонки");
		
	тВыбранныеКолонки = тТаблицаКолонок.СкопироватьКолонки();
	Для Каждого СтрКолонка Из тТаблицаКолонок Цикл
		Если тДеревоСтрок.Строки[0][СокрЛП(СтрКолонка.Код)] = Истина Тогда
			 нКолонка = тВыбранныеКолонки.Добавить();
			 ЗаполнитьЗначенияСвойств(нКолонка,СтрКолонка);
		КонецЕсли;	
	КонецЦикла;	
		
	СтруктураОтвета.Вставить("ДеревоСтрок",ПоместитьВоВременноеХранилище(тДеревоСтрок,Новый УникальныйИдентификатор()));
	СтруктураОтвета.Вставить("Колонки",	   ПоместитьВоВременноеХранилище(тВыбранныеКолонки,Новый УникальныйИдентификатор()));
    СтруктураОтвета.Вставить("ДобавитьИтогПоПериоду",	   	ДобавитьИтогПоПериоду);
	СтруктураОтвета.Вставить("РасположениеИтогов",	   		РасположениеИтогов);
	СтруктураОтвета.Вставить("ДополнитьМакет",	   			ДополнитьМакет);
	СтруктураОтвета.Вставить("ВыводитьАналитику",	   		ВыводитьАналитику);
	СтруктураОтвета.Вставить("ВыводитьАналтикиВИерархии",	ВыводитьАналтикиВИерархии);

	Возврат СтруктураОтвета;
	
КонецФункции	

&НаКлиенте
Процедура ДобавитьИтогПоПериодуПриИзменении(Элемент)
	
	Элементы.РасположениеИтогов.Доступность = ДобавитьИтогПоПериоду;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьАналитикуПриИзменении(Элемент)
	
	Элементы.РасположениеАналитик.Доступность = ВыводитьАналитику;
  	
КонецПроцедуры

&НаКлиенте
Процедура РасположениеАналитикПриИзменении(Элемент)
	
	ВыводитьАналтикиВИерархии = РасположениеАналитик = "ВИерархии";
	
КонецПроцедуры
