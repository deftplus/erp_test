
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ГруппаКоманднаяПанель.Доступность = Истина;
	
	ВидОтчета = Объект.Владелец;
	
	ЗначениеКопирования = Параметры.ЗначениеКопирования;

	ДатаНачала 		= НачалоГода(ТекущаяДата());   //Горизонт планирования по-умолчанию: текущий год
	ДатаОкончания 	= КонецГода(ТекущаяДата());
		
	ТекОбъект 		= РеквизитФормыВЗначение("Объект");
	
	ТаблицаЯзыков = Константы.ДополнительныеЯзыкиВыводаОтчета.Получить().Получить();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПрочитатьСтруктуруТаблицы();		
		
	КонецЕсли;
							
	Модифицированность = Ложь;
	
КонецПроцедуры	
	
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтрокаШаблона = НСтр("ru = 'Бланк сводной таблицы: %1'");
	
	Если ЗначениеЗаполнено(СтрокаШаблона) тогда
		ЭтаФорма.Заголовок = СтрШаблон(СтрокаШаблона, Объект.Наименование);
	КонецЕсли;

	Элементы.ГруппаПоляФильтры.Видимость = Ложь;
	   	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ЗначениеЗаполнено(АдресТаблицИнтерфейса) Тогда
		 Возврат;
	КонецЕсли;	
	 
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);	
	
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Владелец",ТекущийОбъект.Владелец);
    СтруктураПараметров.Вставить("Ссылка",ТекущийОбъект.Ссылка);
    СтруктураПараметров.Вставить("ИерархияГруппировокСтрок",ТекущийОбъект.ИерархияГруппировокСтрок);
    СтруктураПараметров.Вставить("ИерархияГруппировокКолонок",ТекущийОбъект.ИерархияГруппировокКолонок);
	СтруктураПараметров.Вставить("Периодичность",ТекущийОбъект.Периодичность);
    СтруктураПараметров.Вставить("АдресСхемыКомпоновкиДанныхЭталон",АдресСхемыКомпоновкиДанныхЭталон);
    СтруктураПараметров.Вставить("АдресСхемыНабораКолонок",АдресСхемыНабораКолонок);
	СтруктураПараметров.Вставить("АдресСхемыНабораСтрок",АдресСхемыНабораСтрок);
	СтруктураПараметров.Вставить("АдресНастроекСхемыЭталон",АдресНастроекСхемыЭталон);
    СтруктураПараметров.Вставить("ТаблицаСтраницы",СтруктураТаблицИнтерфейса.ТаблицаСтраницы);
	СтруктураПараметров.Вставить("ТаблицаКолонки",СтруктураТаблицИнтерфейса.ТаблицаКолонки);
	СтруктураПараметров.Вставить("ТаблицаСтроки",СтруктураТаблицИнтерфейса.ТаблицаСтроки);
	
	СводнаяТаблицаУХ.ЗаписатьСтруктуруТаблицы(СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСводнойТаблицы

&НаКлиенте
Процедура НарисоватьТаблицу(Команда)
	
	Попытка
		ПоказатьОповещениеПользователя(,, Нстр("ru = 'Обновление таблицы данных'"), БиблиотекаКартинок.ДлительнаяОперация48);
		СоздатьСводнуюТаблицуСКД();
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Возникли ошибки при формировании макета: '") + ОписаниеОшибки());
	Конецпопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаУОЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	 //ИзменитьСтруктуруТаблицы(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиДоступа(Команда)
			
	ПараметрыФормы = Новый Структура("Отбор",Новый Структура("Бланк",  Объект.Ссылка));
	
	ОткрытьФорму("РегистрСведений.НастройкиПравДоступаПользователейБланки.Форма.ФормаСписка", 
	ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСоставуСтрок(Команда)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Владелец", Объект.Владелец);
	СтруктураПараметров.Вставить("Бланк", Объект.Ссылка);
		
	СтруктураАналитикСтрок = Новый СписокЗначений;
	
	Оповещение = Новый ОписаниеОповещения("НастрйкаПоказателейЗавершение", ЭтаФорма);
	ОткрытьФорму("Справочник.БланкиОтчетов.Форма.ФормаНастройкиСтрок", 
	СтруктураПараметров,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСоставуКолонок(Команда)
	
		
	СтруктураПараметров = Новый Структура("АдресТекущихНастроек,Бланк,РежимРаботы",АдресТаблицИнтерфейса,Объект.Ссылка,"Бланк");;
	
	ИзмененаСтруктура = Истина;
	
	ИзмененыДанные = Истина;
	
	Оповещение = Новый ОписаниеОповещения("НастрйкаКолонокЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаНастройкиОтклонений", 
	СтруктураПараметров,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСтрукутреТаблицы(Команда)
	
	Параметры_ = Новый Структура("Бланк,АдресТекущихНастроек,РежимРедактированияСвойств,ИерархияСтрок,ИерархияКолонок", 
	Объект.Ссылка,АдресТаблицИнтерфейса,Истина,Объект.ИерархияГруппировокСтрок,Объект.ИерархияГруппировокКолонок);
	ИзмененаСтруктура = Истина;
	ИзмененыДанные = Истина;
	Оповещение = Новый ОписаниеОповещения("НастрйкаОсейЗавершение", ЭтаФорма);
	
	ОткрытьФорму("ОбщаяФорма.ФормаНастроекСтруктурыСводнойТаблицы", 
	Параметры_,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВРежимСтруктуры(Команда)
	
	Параметры_ = Новый Структура("Бланк,АдресТаблицИнтерфейса", Объект.Ссылка,АдресТаблицИнтерфейса);
	ИзмененаСтруктура = Истина;
	ИзмененыДанные = Истина;
	Оповещение = Новый ОписаниеОповещения("НастрйкаСоставаИзмеренийЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Справочник.БланкиОтчетов.Форма.ФормаНастройкиСоставаАналитик", 
	Параметры_,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКНастройкиПериодов(Команда)
	
	Параметры_ = Новый Структура("Бланк", Объект.Ссылка);
	
	ИзмененаСтруктура = Истина;
	
	ИзмененыДанные = Истина;
	
	Оповещение = Новый ОписаниеОповещения("НастрйкаШкалыВремениЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Справочник.БланкиОтчетов.Форма.ФормаНастройкиШкалыВремени", 
	Параметры_,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 		
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКДанным(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		 Записать();
	КонецЕсли;	
	
	СтруктураПараметров=Новый Структура("ВидОтчета,Бланк",Объект.Владелец,Объект.Ссылка);
    ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаМакетаСводнаяТаблица",СтруктураПараметров);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСвойстваИзмерения(Команда)
	
	ТекДанные =  ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	ТекущаяТаблица = ( ЭтаФорма.ТекущийЭлемент.Имя);	
	Если ТекДанные.Код="Фильтр_Периоды" ИЛИ ТекДанные.Код="Фильтр_Показатели_Колонки" Тогда
		Возврат;
	КонецЕсли;	
	
	Параметры_ = Новый Структура("Бланк,АналитикаКод,АналитикаТип,АналиикаИмя,АналитикаСубконто,ТекущаяТаблица,Редактируется", 
	Объект.Ссылка,ТекДанные.Код,ТекДанные.ТипСтрока,ТекДанные.Наименование,ТекДанные.ТипСубконто,ТекущаяТаблица,ТекДанные.Редактируется);
	Оповещение = Новый ОписаниеОповещения("НастройкаАналитикиЗавершение", ЭтаФорма);
	ИзмененаСтруктура = Истина;
	ИзмененыДанные = Истина;
	
	ОткрытьФорму("Справочник.БланкиОтчетов.Форма.ФормаНастройкиАналитики", 
	Параметры_,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 		
	
	ИзмененыДанные = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСвойстваСтроки(Команда)
	
	Расшифровка = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка;	
	
	СтруктураАналитик = ВернутьРасшифровкуЯчейки(Расшифровка);	
	
	Если СтруктураАналитик.Свойство("ПоказательСтрока") Тогда
		 ПоказатьЗначение(, СтруктураАналитик.ПоказательСтрока);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСвойстваКолонки(Команда)
	
	Расшифровка = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка;	
	СтруктураАналитик = ВернутьРасшифровкуЯчейки(Расшифровка);	
	Если СтруктураАналитик.Свойство("ИмяТекущегоРесурса") Тогда
		ТекущаяКолонка = ТаблицаВыбранныеРесурсы.НайтиСтроки(Новый Структура("ПредставлениеРесурса",СтруктураАналитик["ИмяТекущегоРесурса"])); 
		Если ТекущаяКолонка.Количество()=1 Тогда 
			ПоказатьЗначение(, ТекущаяКолонка[0].Ресурс);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбИзмененииРакурса(Результат, Параметры) Экспорт
		
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Объект.Ракурс = ПредопределенноеЗначение("Справочник.ОбластиДанныхВидовОтчетов.ПустаяСсылка");
	Иначе	
		
		ЗаполнитьСтрокиПоРакурсу();
		
	КонецЕсли;

КонецПроцедуры



//{Пока не используется - для следующих версий
&НаКлиенте
Процедура Оформление(Команда)
	
	Параметры_ = Новый Структура("Бланк,АдресСхемыСКД,АдресДопНастроекУО", Объект.Ссылка,АдресСхемыКомпоновкиДанныхЭталон,АдресДопНастроекУО);
	Оповещение = Новый ОписаниеОповещения("НастрйкаОформленияЗавершение", ЭтаФорма);
	ОткрытьФорму("Справочник.БланкиОтчетов.Форма.ФормаНастроекУсловногоОформления", 
	Параметры_,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 		
	ИзмененыДанные = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиУО(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры
//}


#КонецОбласти

#Область ОбработчикиОповещенийФормы

&НаКлиенте
Процедура НастрйкаШкалыВремениЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	Объект.Периодичность = Результат.Периодичность;
	
	ПоказатьОповещениеПользователя(,, Нстр("ru = 'Обновление таблицы данных'"), БиблиотекаКартинок.ДлительнаяОперация48);
	
	СоздатьСводнуюТаблицуСКД();	
	
КонецПроцедуры
   
&НаКлиенте
Процедура НастройкаАналитикиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	 
	Если  Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		  Возврат;
	КонецЕсли;	
	
	ОбновитьСвойстваАналитики(Результат);
	                                  
	ПоказатьОповещениеПользователя(,, Нстр("ru = 'Обновление таблицы данных'"), БиблиотекаКартинок.ДлительнаяОперация48);
	
	СоздатьСводнуюТаблицуСКД();
	
КонецПроцедуры

&НаКлиенте
Процедура НастрйкаОформленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	АдресДопНастроекУО = Результат.АдресДопНастроекУО;
	
	ПоказатьОповещениеПользователя(,, Нстр("ru = 'Обновление таблицы данных'"), БиблиотекаКартинок.ДлительнаяОперация48);
	
	СоздатьСводнуюТаблицуСКД();
	
	
КонецПроцедуры
   
&НаКлиенте
Процедура НастрйкаПоказателейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		 Возврат;
	КонецЕсли; 	
		
	ПоказатьОповещениеПользователя(,, Нстр("ru = 'Обновление таблицы данных'"), БиблиотекаКартинок.ДлительнаяОперация48);
	
	ПрочитатьСтруктуруТаблицы(Истина);
					
КонецПроцедуры

&НаКлиенте
Процедура НастрйкаКолонокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		
		ПоказатьОповещениеПользователя(,, Нстр("ru = 'Обновление таблицы данных'"), БиблиотекаКартинок.ДлительнаяОперация48);
		
		ОбновитьПоказатели(Ложь);
			
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура НастрйкаОсейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена   Тогда
		 Возврат;
	КонецЕсли;
	
	ИзменитьСтруктуруТаблицы(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура НастрйкаСоставаИзмеренийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена   Тогда
		 Возврат;
	КонецЕсли;
	
	СоздатьСводнуюТаблицуСКД(Ложь);

КонецПроцедуры



#КонецОбласти



#Область ОбработчикиПоляТабличногоДокумента 

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетВыбор(Элемент, Область, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Возврат;
		
КонецПроцедуры


#КонецОбласти

&НаСервере
Процедура ПрочитатьСтруктуруТаблицы(ОбновитьДанныеОсям=Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(АдресТаблицИнтерфейса) Тогда
		СтруктураТаблицИнтерфейса = СводнаяТаблицаУХ.ПолучитьОписаниеТаблицИнтерфейса();
	Иначе
		СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);	
	КонецЕсли;	
	
	НастройкиПолейД=СтруктураТаблицИнтерфейса.ДоступныеПоля;
	Нполе = НастройкиПолейД.Строки.Добавить();	
	Нполе.Поле = "";	
	

	
	КэшАналитикПоказателейСТ = Новый ТаблицаЗначений;
	СводнаяТаблицаУХ.ЗаполнитьДоступныеПоля(СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля,Объект.Владелец,Объект.Ссылка,СтруктураТаблицИнтерфейса.КэшАналитикПоказателей,
	СтруктураТаблицИнтерфейса.ДоступныеАналитики,СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели,КэшАналитикПоказателейСТ,флОшибки);
	
	Если ЗначениеЗаполнено(флОшибки) Тогда
		
		СтрокаШаблона = Нстр("ru = 'Ошибка формирования бланка сводной таблицы по причине: %1'");
		
		ТекстОшибки = "";
		Если Не ПустаяСтрока(СтрокаШаблона) тогда								
			ТекстОшибки = СтрШаблон(СтрокаШаблона, флОшибки);
		КонецЕсли;
		
		СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет, ТекстОшибки);
		Элементы.ГруппаКоманднаяПанель.Доступность = Ложь;
		Возврат;
		
	КонецЕсли;	
	
	СтруктураТаблицИнтерфейса.Вставить("КэшАналитикПоказателейСТ",КэшАналитикПоказателейСТ);
	
	КэшАналитикПоказателейСТАдрес = ПоместитьВоВременноеХранилище(КэшАналитикПоказателейСТ,ЭтаФорма.УникальныйИдентификатор);
	
	Для Каждого дПоле из СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля Цикл
		нНполе =  Нполе.Строки.Добавить();
		нНполе.ПолеСиноним = СтрЗаменить(дПоле.Код,"Фильтр_","");
	КонецЦикла;
	
	СводнаяТаблицаУХ.ЗаполнитьРесурсы(Объект.Ссылка,СтруктураТаблицИнтерфейса.ТаблицаВыбранныеРесурсы);
		
	СхемаСКДЭталон=ПолучитьОбщийМакет("ШаблонСводнойТаблицы");
	
	СводнаяТаблицаУХ.ЗаполнитьПоляСхемы(СхемаСКДЭталон,СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля);
	
	АдресСхемыКомпоновкиДанныхЭталон = ПоместитьВоВременноеХранилище(СхемаСКДЭталон,Новый УникальныйИдентификатор);
	
	ИзмененаСтруктура = Истина;
	ИзмененыДанные = Истина;
	ЕстьСохраненныеЭлементы = Ложь;

	СводнаяТаблицаУХ.ПолучитьТаблицуВыбранныхПоказателей(Объект.Ссылка,АдресТаблицИнтерфейса,СтруктураТаблицИнтерфейса);
	
	
	Если ОбновитьДанныеОсям Тогда
		
		СтруктураТаблицИнтерфейса.ТаблицаКолонки.Очистить();
		СтруктураТаблицИнтерфейса.ТаблицаСтраницы.Очистить();
        СтруктураТаблицИнтерфейса.ТаблицаСтроки.Очистить();

		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	НастройкиСтруктурыБланка.Ось,
		               |	НастройкиСтруктурыБланка.Наименование,
		               |	НастройкиСтруктурыБланка.Код,
		               |	НастройкиСтруктурыБланка.ТипСтрока,
		               |	НастройкиСтруктурыБланка.ИндексКартинки,
		               |	НастройкиСтруктурыБланка.ТипСубконто,
		               |	НастройкиСтруктурыБланка.НПП КАК НПП,
		               |	НастройкиСтруктурыБланка.Редактируется,
		               |	НастройкиСтруктурыБланка.Представление,
		               |	НастройкиСтруктурыБланка.Сортировка,
		               |	НастройкиСтруктурыБланка.ГлобальнаяАналитика,
		               |	НастройкиСтруктурыБланка.ПоддерживатьИерархию
		               |ИЗ
		               |	РегистрСведений.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
		               |ГДЕ
		               |	НастройкиСтруктурыБланка.Бланк = &Бланк
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НПП";
		
		Запрос.УстановитьПараметр("Бланк",Объект.Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
				
		Пока Выборка.Следующий() Цикл
			
			ТекЭлемент = СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код",Выборка.Код));
			
			Если ТекЭлемент.Количество()=0 Тогда
				 Продолжить;
			Иначе	 
				 ТекЭлемент = ТекЭлемент[0];
			КонецЕсли;	
			
			ЕстьСохраненныеЭлементы = Истина;
			Если Выборка.Ось = Перечисления.ВидыНастроекБланковСводнойТаблицы.Колонка Тогда
				нЭлемент = СтруктураТаблицИнтерфейса.ТаблицаКолонки.Добавить();
				ЗаполнитьЗначенияСвойств(нЭлемент,Выборка);
			ИначеЕсли Выборка.Ось = Перечисления.ВидыНастроекБланковСводнойТаблицы.Строка Тогда
				нЭлемент = СтруктураТаблицИнтерфейса.ТаблицаСтроки.Добавить();
				ЗаполнитьЗначенияСвойств(нЭлемент,Выборка);
			ИначеЕсли Выборка.Ось = Перечисления.ВидыНастроекБланковСводнойТаблицы.Страница Тогда 
				нЭлемент = СтруктураТаблицИнтерфейса.ТаблицаСтраницы.Добавить();
				ЗаполнитьЗначенияСвойств(нЭлемент,Выборка);
			КонецЕсли;
			
			Если ТекЭлемент.ЭтоЭтапПроекта Тогда
				 нЭлемент.ЭтоЭтапПроекта = ТекЭлемент.ЭтоЭтапПроекта;
			КонецЕсли;	
			
			
		КонецЦикла;
	КонецЕсли;
	
	 
	 Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаСтроки Цикл
		 ИсключаемыйЭлемент = СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код",Стр.Код));
		 Если ИсключаемыйЭлемент.Количество() = 1 Тогда
			 СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля.Удалить(ИсключаемыйЭлемент[0]); 
		 КонецЕсли;	 
	 Конеццикла;	 
	 Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаКолонки Цикл
		 ИсключаемыйЭлемент = СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код",Стр.Код));
		 Если ИсключаемыйЭлемент.Количество() = 1 Тогда
			 СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля.Удалить(ИсключаемыйЭлемент[0]); 
		 КонецЕсли;	 
	 Конеццикла;	 
	 Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаСтраницы Цикл
		 ИсключаемыйЭлемент = СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код",Стр.Код));
		 Если ИсключаемыйЭлемент.Количество() = 1 Тогда
			 СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля.Удалить(ИсключаемыйЭлемент[0]); 
		 КонецЕсли;	 
	 Конеццикла;	 
	 	 
	 АдресТаблицИнтерфейса =         ПоместитьВоВременноеХранилище(СтруктураТаблицИнтерфейса,Новый УникальныйИдентификатор);
	 
	 Попытка
		 СоздатьСводнуюТаблицуСКД();
		 Элементы.ПолеТабличногоДокументаМакет.Доступность = Истина;
	 Исключение
		 ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Возникли ошибки при формировании макета: '") + ОписаниеОшибки());
	 Конецпопытки;		 	 
	 
 КонецПроцедуры
  
&НаСервере
Процедура ОбновитьПоказатели(ОбновитьДанныеОсям=Истина) Экспорт
	
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
		
	СводнаяТаблицаУХ.ЗаполнитьРесурсы(Объект.Ссылка,СтруктураТаблицИнтерфейса.ТаблицаВыбранныеРесурсы);
			
	СводнаяТаблицаУХ.ПолучитьТаблицуВыбранныхПоказателей(Объект.Ссылка,АдресТаблицИнтерфейса,СтруктураТаблицИнтерфейса);
		
	Попытка
		 СоздатьСводнуюТаблицуСКД();
		 Элементы.ПолеТабличногоДокументаМакет.Доступность = Истина;
	 Исключение
		 ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Возникли ошибки при формировании макета: '") + ОписаниеОшибки());
	 Конецпопытки;		 	 
	 
 КонецПроцедуры
   
&НаСервере
Функция ОбработатьРасшифровкуТаблицы(Расшифровка)
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровки);
	Если ТипЗнч(Расшифровка)<>Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		Возврат Новый Структура;
	КонецЕсли;	
	
	СписокАналитик=ПолучитьПоляИерархии(ДанныеРасшифровки,Расшифровка);
	
	ИмяТекущегоРесурса = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Поле;
	
	СписокАналитик.Вставить("ИмяТекущегоРесурса",ИмяТекущегоРесурса);
	
	АналитикаРегионы = "";
	АналитикаПроекты = "";
	АналитикаПоказатель = "";
			
	Возврат СписокАналитик;
				
КонецФункции	

&НаСервере
Функция ПолучитьПоляИерархии(РасшифровкаОбъект,Расшифровка,Ссылки=Истина)
   
	Элемент = РасшифровкаОбъект.Элементы[Расшифровка];
	Если ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		ПараметрыРасшифровки = Новый Структура();
		//строки
		Родители = Элемент.ПолучитьРодителей();
		Если Родители.Количество() > 0 Тогда
			ИдРодителя = Родители[0].Идентификатор;
			Для н=ИдРодителя+1 По Расшифровка-1 Цикл 
				ЭлементСтроки = РасшифровкаОбъект.Элементы[н];
				Если ТипЗнч(ЭлементСтроки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
					Для каждого Поле Из ЭлементСтроки.ПолучитьПоля() Цикл
						Попытка
							Для каждого Поле Из Элемент.ПолучитьПоля() Цикл
								Если Ссылки Тогда
									ПараметрыРасшифровки.Вставить(СтрЗаменить(Поле.Поле,".",""),(Поле.Значение));
								Иначе
									ПараметрыРасшифровки.Вставить(СтрЗаменить(Поле.Поле,".",""),(Поле.Значение));
								КонецЕсли;
								
							КонецЦикла; 
						Исключение
						КонецПопытки;
						
					КонецЦикла; 
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли; 
		
		//Строки
		Пока Истина Цикл
			Если ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
				
				Попытка
					Для каждого Поле Из Элемент.ПолучитьПоля() Цикл
						Если Ссылки Тогда
							ПараметрыРасшифровки.Вставить(СтрЗаменить(Поле.Поле,".",""),(Поле.Значение));
						Иначе
							ПараметрыРасшифровки.Вставить(СтрЗаменить(Поле.Поле,".",""),(Поле.Значение));
						КонецЕсли;
					КонецЦикла; 
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			Родители = Элемент.ПолучитьРодителей();
			Если Родители.Количество() = 0 Тогда
				Прервать;
			КонецЕсли; 
			Элемент = Родители[0];
			
		КонецЦикла; 
		//Колонки
		Элемент = РасшифровкаОбъект.Элементы[Расшифровка];
		Пока Истина Цикл
			
			Если ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
				
				Попытка
					Для каждого Поле Из Элемент.ПолучитьПоля() Цикл
						Если Ссылки Тогда
							ПараметрыРасшифровки.Вставить(СтрЗаменить(Поле.Поле,".",""),(Поле.Значение));
						Иначе
							ПараметрыРасшифровки.Вставить(СтрЗаменить(Поле.Поле,".",""),(Поле.Значение));
						КонецЕсли;
					КонецЦикла; 
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			Родители = Элемент.ПолучитьРодителей();
			Если Родители.Количество() <2 Тогда
				Прервать;
			КонецЕсли; 
			Элемент = Родители[1];	
		КонецЦикла;    
	КонецЕсли; 
	
	Возврат ПараметрыРасшифровки;
КонецФункции 

&НаКлиенте
Процедура НастройкиТаблицы(Команда)
	
	ЗаписатьИзмененияБланка();
	
	СтруктураПараметров=Новый Структура("ВидОтчета,Бланк",Объект.Владелец,Объект.Ссылка);
    ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаМакетаСводнаяТаблица",СтруктураПараметров);	
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияБланка()
	
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Владелец",ТекущийОбъект.Владелец);
    СтруктураПараметров.Вставить("Ссылка",ТекущийОбъект.Ссылка);
    СтруктураПараметров.Вставить("ИерархияГруппировокСтрок",ТекущийОбъект.ИерархияГруппировокСтрок);
    СтруктураПараметров.Вставить("ИерархияГруппировокКолонок",ТекущийОбъект.ИерархияГруппировокКолонок);
	СтруктураПараметров.Вставить("Периодичность",ТекущийОбъект.Периодичность);
    СтруктураПараметров.Вставить("АдресСхемыКомпоновкиДанныхЭталон",АдресСхемыКомпоновкиДанныхЭталон);
    СтруктураПараметров.Вставить("АдресСхемыНабораКолонок",АдресСхемыНабораКолонок);
	СтруктураПараметров.Вставить("АдресСхемыНабораСтрок",АдресСхемыНабораСтрок);
	СтруктураПараметров.Вставить("АдресНастроекСхемыЭталон",АдресНастроекСхемыЭталон);
    СтруктураПараметров.Вставить("ТаблицаСтраницы",СтруктураТаблицИнтерфейса.ТаблицаСтраницы);
	СтруктураПараметров.Вставить("ТаблицаКолонки",СтруктураТаблицИнтерфейса.ТаблицаКолонки);
	СтруктураПараметров.Вставить("ТаблицаСтроки",СтруктураТаблицИнтерфейса.ТаблицаСтроки);
	
	СводнаяТаблицаУХ.ЗаписатьСтруктуруТаблицы(СтруктураПараметров);

	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуВыбранныхПоказателей()
	
	ТаблицыИнтерфейса = СводнаяТаблицаУХ.ПолучитьОписаниеТаблицИнтерфейса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Истина КАК Использовать,
	|	НастройкиСтруктурыБланка.Расчетный,
	|	НастройкиСтруктурыБланка.КолонкаОтчета КАК Показатель,
	|	НастройкиСтруктурыБланка.ВидОтклонения,
	|	НастройкиСтруктурыБланка.Наименование КАК Заголовок,
	|	НастройкиСтруктурыБланка.Сценарии,
	|	НастройкиСтруктурыБланка.Периоды,
	|	НастройкиСтруктурыБланка.Организации,
	|	НастройкиСтруктурыБланка.Проекты
	|ИЗ
	|	Справочник.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
	|ГДЕ
	|	НастройкиСтруктурыБланка.Владелец = &Владелец
	|	И НастройкиСтруктурыБланка.ИндексЭлемента = 10
	|
	|УПОРЯДОЧИТЬ ПО
	|	НастройкиСтруктурыБланка.ПорядковыйНомер";
	
	Запрос.УстановитьПараметр("Владелец",Объект.Ссылка);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ТаблицыИнтерфейса.ДополнительныеПоля = Результат;	
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицыИнтерфейса,Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере  
Процедура СоздатьСводнуюТаблицуСКД_(ОбновитьКэшАналитикПоказателей = Ложь)
			
	Если ОбновитьКэшАналитикПоказателей Тогда
		СписокАналитик = Новый СписокЗначений;
		ПрочитатьСтруктуруТаблицы(Истина);
	КонецЕсли;	
		
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
	
	КэшАналитикПоказателей = СтруктураТаблицИнтерфейса.КэшАналитикПоказателей;
	ТаблицаСтроки 	= СтруктураТаблицИнтерфейса.ТаблицаСтроки;
	ТаблицаКолонки  = СтруктураТаблицИнтерфейса.ТаблицаКолонки;
	ТаблицаСтраницы = СтруктураТаблицИнтерфейса.ТаблицаСтраницы;
	ДоступныеАналитики = СтруктураТаблицИнтерфейса.ДоступныеАналитики;
	
	
	ТаблицаКолонкиИСтроки_ = ТаблицаКолонкиИСтроки.Выгрузить();
	СтруктураТаблицИнтерфейса.НастройкиСреза.Строки.Очистить();
	
	ВыбранныеРесурсы = СтруктураТаблицИнтерфейса.ДополнительныеПоля.Скопировать(Новый Структура("Расчетный,Использовать",Ложь,Истина),"Показатель").ВыгрузитьКолонку("Показатель");	
	ВыбранныеРесурсы_Структура = Новый Структура;
	
	Если ВыбранныеРесурсы.Количество() = 0 Тогда
		 СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет, НСтр("ru = 'Не заполнен состав показателей!'"));
		 Возврат;
	КонецЕсли;

	Если КэшАналитикПоказателей.Количество() = 0 Тогда
		 СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет, НСтр("ru = 'Не заполнен состав строк!'"));
		 Возврат;
	КонецЕсли;
	 	
	
	
	НастройкиПолейД=СтруктураТаблицИнтерфейса.ДоступныеПоля;
	
	СхемаСКДЭталон=ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхЭталон);
	СхемаСКДЭталон.ВычисляемыеПоля.Очистить();
	СхемаСКДЭталон.ПоляИтога.Очистить();
		
	СхемаСКД=Новый СхемаКомпоновкиДанных;
	НовыйИстчник=СхемаСКД.ИсточникиДанных.Добавить();
	НовыйИстчник.Имя="Источник1";
	НовыйИстчник.ТипИсточникаДанных="Local";
    
	НастройкиИспользуемыхРесурсов = СтруктураТаблицИнтерфейса.ДополнительныеПоля.Скопировать(Новый Структура("Использовать",Истина));
	СводнаяТаблицаУХ.СоздатьОписаниеПолейРесурсов(СтруктураТаблицИнтерфейса,ВыбранныеРесурсы_Структура,СхемаСКД,СхемаСКДЭталон,Ложь);

	////------------- Добавляем вычисляемые поля по ресурсам	
	Для Каждого СтрРесурс ИЗ НастройкиИспользуемыхРесурсов Цикл
	
		ПрефиксРесурса = "";
		Если СтрРесурс.Расчетный И СтрРесурс.ВидОтклонения = "Значение" Тогда 
			 ПрефиксРесурса = "БАЗА_";		 
		ИначеЕсли НЕ СтрРесурс.Расчетный Тогда	 
			 ПрефиксРесурса = "";
		Иначе	 
			 Продолжить;
		КонецЕсли;
		
		НовоеПолеВыбор=НастройкиСхемыСводнойТаблицы.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	    НовоеПолеВыбор.Поле=Новый ПолеКомпоновкиДанных(ПрефиксРесурса+СтрРесурс.КодПоказателя);

	КонецЦикла;	

	Для Каждого Стр Из СхемаСКДЭталон.ВычисляемыеПоля Цикл		
		 Стр.Выражение = "0";	 
	КонецЦикла;	

	НовоеПолеВычисления=СхемаСКДЭталон.ВычисляемыеПоля.Добавить();
	НовоеПолеВычисления.Заголовок="СтатусПоказателя";
	НовоеПолеВычисления.Выражение="0";
	НовоеПолеВычисления.ПутьКДанным="СтатусПоказателя";

	НовоеПолеВычисления=СхемаСКДЭталон.ВычисляемыеПоля.Добавить();
	НовоеПолеВычисления.Заголовок="СтатусБлокировки";
	НовоеПолеВычисления.Выражение="0";
	НовоеПолеВычисления.ПутьКДанным="СтатусБлокировки";
	
	АдресСхемыКомпоновкиДанныхЭталон=ПоместитьВоВременноеХранилище(СхемаСКДЭталон,УникальныйИдентификатор);	
	НастройкиСхемыСводнойТаблицы.ЗагрузитьНастройки(СхемаСКДЭталон.НастройкиПоУмолчанию);
	
	//----------------- Обновляем структуру предварительной схемы
	ТЗСтрок=СводнаяТаблицаУХ.ПолучитьСоставСтрок(Объект.Ссылка,ТаблицаСтроки,ТаблицаКолонки,ТаблицаСтраницы,ТаблицаКолонкиИСтроки_,ДоступныеАналитики,КэшАналитикПоказателей);
	АдресСхемыНабораСтрок=ПоместитьВоВременноеХранилище(ТЗСтрок,УникальныйИдентификатор);
	
	
	НастройкиШкалыПериодов = СводнаяТаблицаУХ.ПолучитьНастройкиШкалыПериодовПоУмолчанию(Объект.Ссылка).Скопировать();
	ТЗКолонок=СводнаяТаблицаУХ.ПолучитьШкалуПериодов(Объект.Ссылка,ОтображатьТолькоИтогиПоПериодам,ДатаНачала,ДатаОкончания,,НастройкиШкалыПериодов);	
	АдресСхемыНабораКолонок=ПоместитьВоВременноеХранилище(ТЗКолонок,УникальныйИдентификатор);
		
	//------------------ Получаем таблицу источник соединением строк и колонок		
	Если ТЗСтрок.Количество()=0 Тогда 
		СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет, Нстр("ru = 'Не выбраны строки показателей!'"));
		Возврат;
	КонецЕсли;	
	
	Результат = СводнаяТаблицаУХ.ПолучитьШаблонСводнойТаблицы(ТЗСтрок,ТЗКолонок,КоличествоЯчеек);

	//------------------- Выводим предварительный макет
	ВнешниеНаборыДанных=Новый Структура;
	ВнешниеНаборыДанных.Вставить("мПоказателиРаскрытия",Результат);
    НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[0].Значение=Неопределено;
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[0].Использование=Истина;

	
	КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	ТипОбъекта = "Таблица";
		
	ВыбранныеРесурсы = РеквизитФормыВЗначение("ТаблицаВыбранныеРесурсы").ВыгрузитьКолонку("Ресурс");
	
	СводнаяТаблицаУХ.ПреобразоватьНастройкиКонечнойСхемы(ТипОбъекта,ВыбранныеРесурсы,НастройкиСхемыСводнойТаблицы.Настройки,ТаблицаСтроки,ТаблицаКолонки,Объект.ИерархияГруппировокСтрок,Объект.ИерархияГруппировокКолонок,
	НастройкиИспользуемыхРесурсов,Ложь,ОтображатьТолькоИтогиПоПериодам,Объект.Периодичность);	
		
	//	
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[1].Значение=РасположениеИтоговКомпоновкиДанных.Авто;
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[6].Использование=Истина;
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[6].Значение=РасположениеИтоговКомпоновкиДанных.Нет;
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[7].Использование=Истина;
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[7].Значение=РасположениеИтоговКомпоновкиДанных.Нет;
	
	ДополнительныеНастройкиСводнойТаблицы.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанныхЭталон));
	
	
	Если ТаблицаСтроки.НайтиСтроки(Новый Структура("Код","Фильтр_Показатели_Колонки")).Количество()=1 Тогда
		НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[5].Использование = Истина;
		НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[5].Значение=РасположениеРесурсовКомпоновкиДанных.Вертикально; 	
	КонецЕсли;	
	
	//Вычисляемые для правила обработки по умолчанию пометить зеленым
	СводнаяТаблицаУХ.ОформитьВычисляемые(Объект.Владелец,НастройкиСхемыСводнойТаблицы.Настройки,НастройкиИспользуемыхРесурсов);
	
	//Несуществующие показатели пометить как [Х]
	СводнаяТаблицаУХ.ОформитьНедоступные(Объект.Владелец,НастройкиСхемыСводнойТаблицы.Настройки,НастройкиИспользуемыхРесурсов,КэшАналитикПоказателей);
	
	//Добавить сортировки по всем полям таблицы
	СводнаяТаблицаУХ.УстановитьПредставлениеГруппировокСТ(СхемаСКДЭталон,НастройкиСхемыСводнойТаблицы,ТаблицаСтроки,ТаблицаКолонки);
	
	////////////// Установим  стандартное оформление для показателей и группировок
    СводнаяТаблицаУХ.УстановитьОформлениеГруппировокСТ(НастройкиСхемыСводнойТаблицы.Настройки,ТаблицаСтроки,Объект.Периодичность,,,Ложь);

	////////////// Установим  оформление для агрегированных  группировок
	СтруктураТаблицИнтерфейса = Новый Структура;
	СтруктураТаблицИнтерфейса.Вставить("ТаблицаСтроки",ТаблицаСтроки);
	СтруктураТаблицИнтерфейса.Вставить("ТаблицаКолонки",ТаблицаКолонки);
    СтруктураТаблицИнтерфейса.Вставить("ТаблицаСтраницы",ТаблицаСтраницы);
    КэшАналитикПоказателейСТ = ПолучитьИзВременногоХранилища(КэшАналитикПоказателейСТАдрес);
	
	СводнаяТаблицаУХ.ОформитьУровниГруппировокПоказателией(КэшАналитикПоказателейСТ,Неопределено,НастройкиСхемыСводнойТаблицы.Настройки,СтруктураТаблицИнтерфейса,,Ложь,Объект.Периодичность);

	/////////////// Дополним оформление дополнительными настройками УО,которые установил пользователь
	Если АдресДопНастроекУО<>"" Тогда
		ПользовательскиеНастройкиУО = ПолучитьИзВременногоХранилища(АдресДопНастроекУО);
		Для Каждого ЭлементУО Из  ПользовательскиеНастройкиУО.УсловноеОформление.Элементы Цикл
			    ЭлементУсловногоОформления = НастройкиСхемыСводнойТаблицы.Настройки.УсловноеОформление.Элементы.Добавить();
				Для Каждого ЭлементОтбора ИЗ  ЭлементУО.Отбор.Элементы Цикл
					ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЗаполнитьЗначенияСвойств(ПолеОтбора,ЭлементОтбора);
				КонецЦикла;	
				ИндЭлемента = 0;
				Для Каждого ЭлементОформления ИЗ  ЭлементУО.Оформление.Элементы Цикл
					ПолеОтбора = ЭлементУсловногоОформления.Оформление.элементы[ИндЭлемента];
					ЗаполнитьЗначенияСвойств(ПолеОтбора,ЭлементОформления);
					ИндЭлемента = ИндЭлемента+1;
				КонецЦикла;	
                Для Каждого ЭлементПоле ИЗ  ЭлементУО.Поля.Элементы Цикл
					ПолеОтбора = ЭлементУсловногоОформления.Поля.элементы.Добавить(Тип("ОформляемоеПолеКомпоновкиДанных"));
					ЗаполнитьЗначенияСвойств(ПолеОтбора,ЭлементПоле);
				КонецЦикла;		
		КонецЦикла;
	КонецЕсли;
	
	//Представление периодов: кратко
	СхемаСКДЭталон.НаборыДанных.НаборРаскрытие.Поля[0].ВыражениеПредставления = "Периоды.КраткоеНаименование";
	
	Если Не ЗначениеЗаполнено(СхемаСКДЭталон.НаборыДанных.НаборРаскрытие.Поля[2].ВыражениеПредставления) Тогда
		СхемаСКДЭталон.НаборыДанных.НаборРаскрытие.Поля[2].ВыражениеПредставления = "Показатели.СтрокаОтчета";
	КонецЕсли;
	
	МакетКомпоновки=КомпоновщикМакета.Выполнить(СхемаСКДЭталон,НастройкиСхемыСводнойТаблицы.Настройки,ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных=Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных,ДанныеРасшифровки);
	
	ДокументРезультат=Новый ТабличныйДокумент;
	ПроцессорВывода=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	АдресХранилищаДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки,Новый УникальныйИдентификатор);
	АдресНастроекСхемыЭталон = ПоместитьВоВременноеХранилище(НастройкиСхемыСводнойТаблицы.Настройки,Новый УникальныйИдентификатор);
	
	ВыводитьПоказатели = ТаблицаВыбранныеРесурсы.Количество()>1;
	
	Если Объект.ИерархияГруппировокСтрок Тогда
		СводнаяТаблицаУХ.ФорматироватьЗаголовкиИерархии(Объект.ИерархияГруппировокСтрок,Объект.ИерархияГруппировокКолонок,ПолеТабличногоДокументаМакет,ДокументРезультат,ТаблицаВыбранныеРесурсы.Выгрузить(,"Ресурс").ВыгрузитьКолонку("Ресурс"));
	Иначе	
		СводнаяТаблицаУХ.ФорматироватьЗаголовкиБезИерархии(Объект.ИерархияГруппировокСтрок,Объект.ИерархияГруппировокКолонок,ПолеТабличногоДокументаМакет,ДокументРезультат,ТаблицаВыбранныеРесурсы.Выгрузить(,"Ресурс").ВыгрузитьКолонку("Ресурс"));
	КонецЕсли;
	
	Элементы.ПолеТабличногоДокументаМакет.Доступность = Истина;
		
	КоличествоЯчеек = (ПолеТабличногоДокументаМакет.ШиринаТаблицы - ПолеТабличногоДокументаМакет.ФиксацияСлева-1)*(ПолеТабличногоДокументаМакет.ВысотаТаблицы - ПолеТабличногоДокументаМакет.ФиксацияСверху);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере  
Процедура СоздатьСводнуюТаблицуСКД(ОбновитьКэшАналитикПоказателей = Ложь)
			
	Если ОбновитьКэшАналитикПоказателей Тогда
		СписокАналитик = Новый СписокЗначений;
		ПрочитатьСтруктуруТаблицы(Истина);
	КонецЕсли;	
		
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
	
	КэшАналитикПоказателей = СтруктураТаблицИнтерфейса.КэшАналитикПоказателей;
	ТаблицаСтроки 	= СтруктураТаблицИнтерфейса.ТаблицаСтроки;
	ТаблицаКолонки  = СтруктураТаблицИнтерфейса.ТаблицаКолонки;
	ТаблицаСтраницы = СтруктураТаблицИнтерфейса.ТаблицаСтраницы;
	ДоступныеАналитики = СтруктураТаблицИнтерфейса.ДоступныеАналитики;
	
	
	ТаблицаКолонкиИСтроки_ = ТаблицаКолонкиИСтроки.Выгрузить();
	СтруктураТаблицИнтерфейса.НастройкиСреза.Строки.Очистить();
	
	ВыбранныеРесурсы = СтруктураТаблицИнтерфейса.ДополнительныеПоля.Скопировать(Новый Структура("Расчетный,Использовать",Ложь,Истина));	
	ВыбранныеРесурсы_Структура = Новый Структура;
		
	
	Если ВыбранныеРесурсы.Количество() = 0 Тогда
		 СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет, Нстр("ru = 'Не заполнен состав показателей!'"));
		 Возврат;
	КонецЕсли;

	Если КэшАналитикПоказателей.Количество() = 0 Тогда
		 СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет, Нстр("ru = 'Не заполнен состав строк!'"));
		 Возврат;
	КонецЕсли;
	 	
	
	
	НастройкиПолейД=СтруктураТаблицИнтерфейса.ДоступныеПоля;
	
	СхемаСКДЭталон=ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхЭталон);
	СхемаСКДЭталон.ВычисляемыеПоля.Очистить();
	СхемаСКДЭталон.ПоляИтога.Очистить();
		
	СхемаСКД=Новый СхемаКомпоновкиДанных;
	НовыйИстчник=СхемаСКД.ИсточникиДанных.Добавить();
	НовыйИстчник.Имя="Источник1";
	НовыйИстчник.ТипИсточникаДанных="Local";
    
	НастройкиИспользуемыхРесурсов = СтруктураТаблицИнтерфейса.ДополнительныеПоля.Скопировать(Новый Структура("Использовать",Истина));
	СводнаяТаблицаУХ.СоздатьОписаниеПолейРесурсов(СтруктураТаблицИнтерфейса,ВыбранныеРесурсы_Структура,СхемаСКД,СхемаСКДЭталон,Ложь);

	
	АдресСхемыКомпоновкиДанныхЭталон=ПоместитьВоВременноеХранилище(СхемаСКДЭталон,УникальныйИдентификатор);	
	НастройкиСхемыСводнойТаблицы.ЗагрузитьНастройки(СхемаСКДЭталон.НастройкиПоУмолчанию);
	
	//----------------- Обновляем структуру предварительной схемы
	ТЗСтрок=СводнаяТаблицаУХ.ПолучитьСоставСтрок(Объект.Ссылка,ТаблицаСтроки,ТаблицаКолонки,ТаблицаСтраницы,ТаблицаКолонкиИСтроки_,ДоступныеАналитики,КэшАналитикПоказателей);
	АдресСхемыНабораСтрок=ПоместитьВоВременноеХранилище(ТЗСтрок,УникальныйИдентификатор);
	
	
	НастройкиШкалыПериодов = СводнаяТаблицаУХ.ПолучитьНастройкиШкалыПериодовПоУмолчанию(Объект.Ссылка).Скопировать();
	ТЗКолонок=СводнаяТаблицаУХ.ПолучитьШкалуПериодов(Объект.Ссылка,ОтображатьТолькоИтогиПоПериодам,ДатаНачала,ДатаОкончания,,НастройкиШкалыПериодов);	
	АдресСхемыНабораКолонок=ПоместитьВоВременноеХранилище(ТЗКолонок,УникальныйИдентификатор);
		
	//------------------ Получаем таблицу источник соединением строк и колонок		
	Если ТЗСтрок.Количество()=0 Тогда 
		СводнаяТаблицаУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет, Нстр("ru = 'Не выбраны строки показателей!'"));
		Возврат;
	КонецЕсли;	
	
	СтруктураФильтровИтог = Новый Структура();
	СтруктураФильтровИтог.Вставить("ВидОтчета",СводнаяТаблицаУХ.ПолучитьИспользуемыеВидыОтчетов(Объект.Ссылка));
	Для Каждого Страница ИЗ СтруктураТаблицИнтерфейса.ТаблицаСтраницы Цикл	
		СтруктураФильтровИтог.Вставить(Страница.Код,Новый(Тип(Страница.ТипСтрока)));  
	КонецЦикла;

	
	Результат = СводнаяТаблицаУХ.ПолучитьШаблонСводнойТаблицы(СтруктураФильтровИтог,СтруктураТаблицИнтерфейса,ВыбранныеРесурсы,Объект.Периодичность,ТЗСтрок,ТЗКолонок,КоличествоЯчеек);

	//------------------- Выводим предварительный макет
	ВнешниеНаборыДанных=Новый Структура;
	ВнешниеНаборыДанных.Вставить("мПоказателиРаскрытия",Результат);
    НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[0].Значение=Неопределено;
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[0].Использование=Истина;

	
	КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	ТипОбъекта = "Таблица";
		
	ВыбранныеРесурсы = РеквизитФормыВЗначение("ТаблицаВыбранныеРесурсы").ВыгрузитьКолонку("Ресурс");
	
	СводнаяТаблицаУХ.ПреобразоватьНастройкиКонечнойСхемы(ТипОбъекта,ВыбранныеРесурсы,НастройкиСхемыСводнойТаблицы.Настройки,ТаблицаСтроки,ТаблицаКолонки,Объект.ИерархияГруппировокСтрок,Объект.ИерархияГруппировокКолонок,
	НастройкиИспользуемыхРесурсов,Ложь,ОтображатьТолькоИтогиПоПериодам,Объект.Периодичность);	
		
	//	
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[1].Значение=РасположениеИтоговКомпоновкиДанных.Авто;
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[6].Использование=Истина;
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[6].Значение=РасположениеИтоговКомпоновкиДанных.Нет;
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[7].Использование=Истина;
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[7].Значение=РасположениеИтоговКомпоновкиДанных.Нет;
	
	ДополнительныеНастройкиСводнойТаблицы.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанныхЭталон));
	
	
	Если ТаблицаСтроки.НайтиСтроки(Новый Структура("Код","Фильтр_Показатели_Колонки")).Количество()=1 Тогда
		НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[5].Использование = Истина;
		НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[5].Значение=РасположениеРесурсовКомпоновкиДанных.Вертикально; 	
	КонецЕсли;	
	
	//Вычисляемые для правила обработки по умолчанию пометить зеленым
	СводнаяТаблицаУХ.ОформитьВычисляемые(Объект.Владелец,НастройкиСхемыСводнойТаблицы.Настройки,НастройкиИспользуемыхРесурсов);
	
	//Несуществующие показатели пометить как [Х]
	СводнаяТаблицаУХ.ОформитьНедоступные(Объект.Владелец,НастройкиСхемыСводнойТаблицы.Настройки,НастройкиИспользуемыхРесурсов,КэшАналитикПоказателей);
	
	//Добавить сортировки по всем полям таблицы
	СводнаяТаблицаУХ.УстановитьПредставлениеГруппировокСТ(СхемаСКДЭталон,НастройкиСхемыСводнойТаблицы,ТаблицаСтроки,ТаблицаКолонки);
	
	////////////// Установим  стандартное оформление для показателей и группировок
    СводнаяТаблицаУХ.УстановитьОформлениеГруппировокСТ(НастройкиСхемыСводнойТаблицы.Настройки,ТаблицаСтроки,Объект.Периодичность,,,Ложь);

	////////////// Установим  оформление для агрегированных  группировок
	СтруктураТаблицИнтерфейса = Новый Структура;
	СтруктураТаблицИнтерфейса.Вставить("ТаблицаСтроки",ТаблицаСтроки);
	СтруктураТаблицИнтерфейса.Вставить("ТаблицаКолонки",ТаблицаКолонки);
    СтруктураТаблицИнтерфейса.Вставить("ТаблицаСтраницы",ТаблицаСтраницы);
    КэшАналитикПоказателейСТ = ПолучитьИзВременногоХранилища(КэшАналитикПоказателейСТАдрес);
	
	СводнаяТаблицаУХ.ОформитьУровниГруппировокПоказателией(КэшАналитикПоказателейСТ,НастройкиИспользуемыхРесурсов,НастройкиСхемыСводнойТаблицы.Настройки,СтруктураТаблицИнтерфейса,,Ложь,Объект.Периодичность);

	/////////////// Дополним оформление дополнительными настройками УО,которые установил пользователь
	Если АдресДопНастроекУО<>"" Тогда
		ПользовательскиеНастройкиУО = ПолучитьИзВременногоХранилища(АдресДопНастроекУО);
		Для Каждого ЭлементУО Из  ПользовательскиеНастройкиУО.УсловноеОформление.Элементы Цикл
			    ЭлементУсловногоОформления = НастройкиСхемыСводнойТаблицы.Настройки.УсловноеОформление.Элементы.Добавить();
				Для Каждого ЭлементОтбора ИЗ  ЭлементУО.Отбор.Элементы Цикл
					ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЗаполнитьЗначенияСвойств(ПолеОтбора,ЭлементОтбора);
				КонецЦикла;	
				ИндЭлемента = 0;
				Для Каждого ЭлементОформления ИЗ  ЭлементУО.Оформление.Элементы Цикл
					ПолеОтбора = ЭлементУсловногоОформления.Оформление.элементы[ИндЭлемента];
					ЗаполнитьЗначенияСвойств(ПолеОтбора,ЭлементОформления);
					ИндЭлемента = ИндЭлемента+1;
				КонецЦикла;	
                Для Каждого ЭлементПоле ИЗ  ЭлементУО.Поля.Элементы Цикл
					ПолеОтбора = ЭлементУсловногоОформления.Поля.элементы.Добавить(Тип("ОформляемоеПолеКомпоновкиДанных"));
					ЗаполнитьЗначенияСвойств(ПолеОтбора,ЭлементПоле);
				КонецЦикла;		
		КонецЦикла;
	КонецЕсли;
	
	//Представление периодов: кратко
	СхемаСКДЭталон.НаборыДанных.НаборРаскрытие.Поля[0].ВыражениеПредставления = "Периоды.КраткоеНаименование";
	
	Если Не ЗначениеЗаполнено(СхемаСКДЭталон.НаборыДанных.НаборРаскрытие.Поля[2].ВыражениеПредставления) Тогда
		СхемаСКДЭталон.НаборыДанных.НаборРаскрытие.Поля[2].ВыражениеПредставления = "Показатели.СтрокаОтчета";
	КонецЕсли;
	
	//НастройкиСхемыСводнойТаблицы.Настройки.Структура[0].Колонки[0].ПараметрыВывода.Элементы[3].Значение = РасположениеИтоговКомпоновкиДанных.Конец; 
	//НастройкиСхемыСводнойТаблицы.Настройки.Структура[0].Колонки[0].ПараметрыВывода.Элементы[3].Использование = Истина;
	//
	
	ОтборыКУдалению = Новый Массив;
	
	Для Каждого ПолеОтбора Из НастройкиСхемыСводнойТаблицы.Настройки.Отбор.Элементы Цикл
		
		Если Найти(Строка(ПолеОтбора.ЛевоеЗначение), "_ЭтоГруппа") = 0 тогда
			Продолжить;
		КонецЕсли;
		
		Если СхемаСКДЭталон.НаборыДанных.НаборРаскрытие.Поля.Найти(ПолеОтбора.ЛевоеЗначение) = неопределено тогда
			ОтборыКУдалению.Добавить(ПолеОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ОтборУдалить Из ОтборыКУдалению Цикл
		НастройкиСхемыСводнойТаблицы.Настройки.Отбор.Элементы.Удалить(ОтборУдалить);
	КонецЦикла;
	
	МакетКомпоновки=КомпоновщикМакета.Выполнить(СхемаСКДЭталон,НастройкиСхемыСводнойТаблицы.Настройки,ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных=Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных,ДанныеРасшифровки);
	
	ДокументРезультат=Новый ТабличныйДокумент;
	ПроцессорВывода=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	АдресХранилищаДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки,Новый УникальныйИдентификатор);
	АдресНастроекСхемыЭталон = ПоместитьВоВременноеХранилище(НастройкиСхемыСводнойТаблицы.Настройки,Новый УникальныйИдентификатор);
	
	ВыводитьПоказатели = ТаблицаВыбранныеРесурсы.Количество()>1;
	
	Если Объект.ИерархияГруппировокСтрок Тогда
		СводнаяТаблицаУХ.ФорматироватьЗаголовкиИерархии(Объект.ИерархияГруппировокСтрок,Объект.ИерархияГруппировокКолонок,ПолеТабличногоДокументаМакет,ДокументРезультат,ТаблицаВыбранныеРесурсы.Выгрузить(,"Ресурс").ВыгрузитьКолонку("Ресурс"));
	Иначе	
		СводнаяТаблицаУХ.ФорматироватьЗаголовкиБезИерархии(Объект.ИерархияГруппировокСтрок,Объект.ИерархияГруппировокКолонок,ПолеТабличногоДокументаМакет,ДокументРезультат,ТаблицаВыбранныеРесурсы.Выгрузить(,"Ресурс").ВыгрузитьКолонку("Ресурс"));
	КонецЕсли;
	
	Элементы.ПолеТабличногоДокументаМакет.Доступность = Истина;
		
	КоличествоЯчеек = (ПолеТабличногоДокументаМакет.ШиринаТаблицы - ПолеТабличногоДокументаМакет.ФиксацияСлева-1)*(ПолеТабличногоДокументаМакет.ВысотаТаблицы - ПолеТабличногоДокументаМакет.ФиксацияСверху);
	
	Модифицированность = Истина;
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьСвойстваАналитики(Результат)
	
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
	ТекСтрока =  ЭтаФорма[Результат.ТекущаяТаблица].НайтиСтроки(Новый Структура("Код",Результат.АналиикаИмя))[0];
	ТекСтрока.Редактируется = Результат.ВозможностьРедактирования;
	ТекСтрока.Представление = Результат.СтрокаПредставления;
	ТекСтрока.Сортировка = Результат.СтрокаСортировки;
	ТекСтрока.ПоддерживатьИерархию = Результат.ПоддерживатьИерархию;
	ТекСтрока.ИндексКартинки = ?(ТекСтрока.Редактируется,4,1);
	Если Результат.АналиикаИмя <> "Фильтр_Показатели" Тогда
		ТекСтрока = СтруктураТаблицИнтерфейса.ДоступныеАналитики.НайтиСтроки(Новый Структура("КодАналитики",СтрЗаменить(Результат.АналиикаИмя,"Фильтр_","")))[0];
		ТекСтрока.Редактируется = Результат.ВозможностьРедактирования;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере 
Функция ВернутьРасшифровкуЯчейки(Расшифровка)
	
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);

	СтруктураРасшифровки = ОбработатьРасшифровкуТаблицы(Расшифровка);
	
	Для Каждого Страница Из СтруктураТаблицИнтерфейса.ТаблицаСтраницы Цикл
		СтруктураРасшифровки.Вставить(СтрЗаменить(Страница.Код,"Фильтр_",""),Неопределено);
	КонецЦикла;
	Если СтруктураРасшифровки.Свойство("Показатели") Тогда
		 СтруктураРасшифровки.Вставить("ПоказательСтрока",СтруктураРасшифровки.Показатели.СтрокаОтчета);
	КонецЕсли;
	
	Возврат СтруктураРасшифровки;
	
КонецФункции

&НаСервере
Функция РасшифроватьТекущееПредставление(ИмяТекущегоЭлемента,НомерНастройки,Показатель)
	
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);

	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("Тип_",ОпределитьТипТекущейКолонки(ИмяТекущегоЭлемента));
	СтруктураПараметров.Вставить("ТекНастройка",Показатель);
	СтруктураПараметров.Вставить("НомерНастройки",НомерНастройки);
	СтруктураПараметров.Вставить("ТекБланк",Объект.Ссылка);
	СтруктураПараметров.Вставить("ТекПоле",ИмяТекущегоЭлемента);	
	СтруктураПараметров.Вставить("ВидНастройки","Отбор");
    СтруктураПараметров.Вставить("ТекОтбор_","");
    СтруктураПараметров.Вставить("НазначениеНастройки",СтруктураТаблицИнтерфейса.ДоступныеАналитики.НайтиСтроки(Новый Структура("ИмяАналитики",ИмяТекущегоЭлемента))[0].НазначениеАналитики);
	Если ИмяТекущегоЭлемента = НСтр("ru = 'Дополнительные валюты'") Тогда
		  СтруктураПараметров.Вставить("НазначениеНастройки",Перечисления.ПредназначенияЭлементовАналитик.АналитикаВалюта);
	КонецЕсли;	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиСоставаАналитикиБланков.ЗначениеНастройки
	               |ИЗ
	               |	РегистрСведений.НастройкиСоставаАналитикиБланков КАК НастройкиСоставаАналитикиБланков
	               |ГДЕ
	               |	НастройкиСоставаАналитикиБланков.БланкОтчета = &БланкОтчета
	               |	И НастройкиСоставаАналитикиБланков.Показатель = &Показатель
	               |	И НастройкиСоставаАналитикиБланков.Назначение = &Назначение
	               |	И НастройкиСоставаАналитикиБланков.НомерНастройки = &НомерНастройки";
	
	Запрос.УстановитьПараметр("БланкОтчета",Объект.Ссылка);
	Запрос.УстановитьПараметр("Показатель",Показатель);
	Запрос.УстановитьПараметр("Назначение",СтруктураТаблицИнтерфейса.ДоступныеАналитики.НайтиСтроки(Новый Структура("ИмяАналитики",ИмяТекущегоЭлемента))[0].НазначениеАналитики);
	Запрос.УстановитьПараметр("НомерНастройки",НомерНастройки);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество()=1 Тогда
		  СтруктураПараметров.Вставить("ТекОтбор_",Результат[0].ЗначениеНастройки);
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции	

&НаСервере
Функция ОпределитьТипТекущейКолонки(ИмяТекЭлемента)
		   
	   СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
	   Если ИмяТекЭлемента = "Сценарии" ИЛИ ИмяТекЭлемента = "Валюты" ИЛИ ИмяТекЭлемента = "Организации" ИЛИ  
		   ИмяТекЭлемента = "Проекты" Тогда
		   Возврат  Тип("СправочникСсылка."+ИмяТекЭлемента);
	   КонецЕсли;	   
	   
	   Если ИмяТекЭлемента = НСтр("ru = 'Дополнительные валюты'") Тогда
		     Возврат  Тип("СправочникСсылка.Валюты");
	   КонецЕсли;	   
	   
	   Возврат СтруктураТаблицИнтерфейса.ДоступныеАналитики.НайтиСтроки(Новый Структура("ИмяАналитики",ИмяТекЭлемента))[0].НазначениеАналитики.ТипЗначения.Типы()[0];
	   
КонецФункции

&НаКлиенте
Процедура ДоступныеАналитикиПриИзменении(Элемент)
	
	ЭтаФорма.Элементы[Элемент.ТекущиеДанные.ПредставлениеАналитики].Видимость = Элемент.ТекущиеДанные.Показывать;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРасшифровкуСервер(Расшифровка)
	
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);

	СтруктураРасшифровки = Новый Структура;
	СоздатьОписаниеСтруктурыПолей(СтруктураРасшифровки,СтруктураТаблицИнтерфейса.ДоступныеАналитики);
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресХранилищаДанныеРасшифровки);	
	СводнаяТаблицаУХ.ПолучитьРасшифровкуГруппировок(ДанныеРасшифровки.Элементы[Расшифровка],СтруктураРасшифровки);
	Возврат СтруктураРасшифровки;

КонецФункции

&НаСервере
Процедура СоздатьОписаниеСтруктурыПолей(СтруктураРасшифровки,ДоступныеАналитики)
	
	Для Каждого Стр Из ДоступныеАналитики Цикл
		СтруктураРасшифровки.Вставить(Стр.КодАналитики);
	КонецЦикла;	
	
	СтруктураРасшифровки.Вставить("Периоды");	
	СтруктураРасшифровки.Вставить("ПериодыСвязанныйПериод");
	СтруктураРасшифровки.Вставить("Показатели");
	СтруктураРасшифровки.Вставить("ПоказателиСтрокаОтчета"); 	
	СтруктураРасшифровки.Вставить("ПоказательСсылка");
	СтруктураРасшифровки.Вставить("ПоказательТипЗнчения");
	СтруктураРасшифровки.Вставить("КодРесурса");	
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваНастройкиСтроки(Команда)
	
	Расшифровка = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка;	
	СтруктураАналитик = ВернутьРасшифровкуЯчейки(Расшифровка);	
	Если СтруктураАналитик.Свойство("Показатели") Тогда
		 ПоказатьЗначение(, СтруктураАналитик.Показатели);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвойстваАналитики(Элемент)
	 
КонецПроцедуры	

&НаСервере
Процедура ИзменитьСтруктуруТаблицы(Параметр)
	
	Если Не ЗначениеЗаполнено(Параметр) Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураТаблиц = ПолучитьИзВременногоХранилища(Параметр.СтруктураТаблиц);
	
	СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
	СтруктураТаблицИнтерфейса.ТаблицаСтроки   = СтруктураТаблиц.ТаблицаСтроки.Скопировать();
	СтруктураТаблицИнтерфейса.ТаблицаКолонки  = СтруктураТаблиц.ТаблицаКолонки.Скопировать();
	СтруктураТаблицИнтерфейса.ТаблицаСтраницы = СтруктураТаблиц.ТаблицаСтраницы.Скопировать();
	СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля = СтруктураТаблиц.ТаблицаДоступныеПоля.Скопировать();
	Объект.ИерархияГруппировокКолонок = Параметр.ИерархияКолонок;
	Объект.ИерархияГруппировокСтрок = Параметр.ИерархияСтрок;
	
	
	СоздатьСводнуюТаблицуСКД(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РакурсПриИзменении(Элемент)
		
	Режим = РежимДиалогаВопрос.ДаНет;
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбИзмененииРакурса", ЭтаФорма, Параметры);
	
	Если ЗначениеЗаполнено(Объект.Ракурс) Тогда
		ПоказатьВопрос(Оповещение, Нстр("ru = 'При выборе ракурса, состав строк автоматически будет синхронизирован с составом строк ракурса, продолжить?'"), Режим, 0);
	Иначе	
		ЭтаФорма.Записать();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиПоРакурсу()
		
	СводнаяТаблицаУХ.ЗаполнитьСтрокиПоРакурсу(Объект.Ракурс,Объект.Ссылка);
	ЭтаФорма.Записать();
	СоздатьСводнуюТаблицуСКД(Истина);
	
КонецПроцедуры






