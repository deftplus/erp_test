
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	 Бланк = Параметры.Бланк;
	 АналитикаСубконто = Параметры.АналитикаСубконто;
	 Элементы.ПоддерживатьИерархию.Видимость = Ложь;
	 	 
	 Если Параметры.АналитикаКод = "Фильтр_Сценарии" Тогда
		 АналитикаСубконто = Перечисления.ПредназначенияЭлементовАналитик.Сценарии;	
	 ИначеЕсли Параметры.АналитикаКод = "Фильтр_Валюты" Тогда
		 АналитикаСубконто = Перечисления.ПредназначенияЭлементовАналитик.Валюты;	
	 ИначеЕсли Параметры.АналитикаКод = "Фильтр_Организации" Тогда
		 Элементы.ПоддерживатьИерархию.Видимость = Истина;
		 АналитикаСубконто = Перечисления.ПредназначенияЭлементовАналитик.Организации;	
	 ИначеЕсли Параметры.АналитикаКод = "Фильтр_Проекты" Тогда	 
		 АналитикаСубконто = Перечисления.ПредназначенияЭлементовАналитик.Проекты;	 	 
		 Элементы.ПоддерживатьИерархию.Видимость = Истина;
	 ИначеЕсли Параметры.АналитикаКод = "Фильтр_Показатели" Тогда	 
		 АналитикаСубконто = Перечисления.ПредназначенияЭлементовАналитик.ПоказателиСтроки;		 
	 Иначе	 
		 Если Справочники.ТипВсеСсылки().СодержитТип(Параметры.АналитикаСубконто.ТипЗначения.Типы()[0]) Тогда	  
			 Если Параметры.АналитикаСубконто.ТипЗначения.ПривестиЗначение().Метаданные().Иерархический ТОгда	 
				 Если Параметры.АналитикаСубконто.ТипЗначения.ПривестиЗначение().Метаданные().ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов
					 ИЛИ Параметры.АналитикаСубконто.ТипЗначения.ПривестиЗначение().Метаданные().ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияЭлементов Тогда 	 
					 Элементы.ПоддерживатьИерархию.Видимость = Истина;
				 КонецЕсли;	  
			 КонецЕсли; 	 
		 КонецЕсли;	 
	 КонецЕсли;	 
	 
	 АналиикаКод =  Параметры.АналитикаКод;
	 АналиикаИмя =  Параметры.АналиикаИмя;
	 АналитикаТип =  Параметры.АналитикаТип;
	 ТекущаяТаблица = Параметры.ТекущаяТаблица;
	 
	 Если АналиикаКод="Фильтр_Показатели" Тогда
		 Элементы.ВозможностьРедактирования.Видимость 	= Ложь;
		 Элементы.ПоддерживатьИерархию.Видимость 		= Ложь;
		 Элементы.СтрокаСортировки.Видимость 			= Ложь;
	 КонецЕсли;	 
	 
	 ВозможностьРедактирования = Параметры.Редактируется;
	 
	 СтрокаПредставления 	= Параметры.Представление;
	 СтрокаСортировки 		= Параметры.Сортировка;
	 ПоддерживатьИерархию 	= Параметры.ПоддерживатьИерархию;
	  
	 СКДТекущегоПоля = ПолучитьОбщийМакет("МакетНастройкиОтборов");
	 
	 НП =  СКДТекущегоПоля.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	 НП.Заголовок = Параметры.АналиикаИмя;
	 НП.ПутьКДанным = Параметры.АналиикаИмя;
	 НП.ТипЗначения = Новый ОписаниеТипов(Параметры.АналитикаТип);
	 
	 СКДТекущегоПоляАдрес = ПоместитьВоВременноеХранилище(СКДТекущегоПоля,УникальныйИдентификатор);
	 ИсточникНастроекСКД = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКДТекущегоПоляАдрес);
	 НастройкиКД.Инициализировать(ИсточникНастроекСКД);
	
	 Если СокрЛП(СтрокаПредставления) = "" Тогда
		  СтрокаПредставления = "&Наименование";
	 КонецЕсли;
	 
	 Если СокрЛП(СтрокаСортировки)="" Тогда
		СтрокаСортировки = "Наименование";  	 
	 КонецЕсли;
	
	 Если Лев(Параметры.АналитикаТип,12) = "Перечисление" Тогда
		   СтрокаПредставления = 	"&Ссылка";
		   СтрокаСортировки = 		"Ссылка";
		   Элементы.СтрокаПредставления.Доступность = Ложь;
		   Элементы.СтрокаСортировки.Доступность = Ложь;
	 КонецЕсли;	 
	 
	 Элементы.ВозможностьРедактирования.Видимость =Параметры.РежимРедактированияСвойств;
	 //Элементы.ПоддерживатьИерархию.Видимость =Параметры.РежимРедактированияСвойств;
	 
	 СтрокаШаблона = НСтр("ru = 'Параметры аналитики ""%1""'");
	 
	 Если Не ПустаяСтрока(СтрокаШаблона) тогда
		 ЭтаФорма.Заголовок = СтрШаблон(СтрокаШаблона, АналиикаИмя);
	 КонецЕсли; 
	 
 КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
		
	Если Не ЗначениеЗаполнено(СтрокаПредставления) Тогда
		 СтрокаПредставления = "Наименование";
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(СтрокаСортировки) Тогда
		 СтрокаСортировки = "Наименование";
	КонецЕсли;	
	
	Если НЕ ПроверитьКорректностьВыраженияПолей() Тогда
		 Возврат;
	КонецЕсли;	
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтрокаПредставления",СтрокаПредставления);
	СтруктураПараметров.Вставить("СтрокаСортировки",СтрокаСортировки);
	СтруктураПараметров.Вставить("ПоддерживатьИерархию",ПоддерживатьИерархию);
	СтруктураПараметров.Вставить("ВозможностьРедактирования",ВозможностьРедактирования);
	СтруктураПараметров.Вставить("АналиикаИмя",АналиикаКод);
	СтруктураПараметров.Вставить("ТекущаяТаблица",ТекущаяТаблица);
	                   
	Закрыть(СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПредставленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Параметры_ = Новый Структура("АналитикаСубконто,ТекущееПредставление",АналитикаСубконто,СтрокаПредставления);	
	Оповещение = Новый ОписаниеОповещения("КонструкторВыраженияПредставленияЗавершение", ЭтаФорма);	
	ОткрытьФорму("Справочник.БланкиОтчетов.Форма.ФормаКонструктораВыраженияПредставления", 
	Параметры_,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 		
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторВыраженияПредставленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	 
	Если  Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		  Возврат;
	КонецЕсли;	
	
	СтрокаПредставления = Результат;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструктор(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Функция ПроверитьКорректностьВыраженияПолей()
	
	 СКДТекущегоПоля = ПолучитьОбщийМакет("ШаблонСводнойТаблицы");
	 
	 НП =  СКДТекущегоПоля.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	 НП.Заголовок = АналиикаИмя;
	 НП.ПутьКДанным = АналиикаКод;
	 НП.ТипЗначения = Новый ОписаниеТипов(АналитикаТип);
	 НП.Поле =  АналиикаКод;
	 нПорядок =  НП.ВыраженияУпорядочивания.Добавить(); 
	 нПорядок.Выражение = АналиикаКод+"."+СтрокаСортировки;
	 
	 ПолныйКод =АналиикаКод+"."; 
	 НП.ВыражениеПредставления = СтрЗаменить(СтрокаПредставления,"&",ПолныйКод);
		 
	 
	 НастройкиКД.Настройки.Порядок.Элементы.Очистить();
	 ЭлементПорядка = НастройкиКД.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	 ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных (АналиикаКод+"."+СтрокаСортировки);
	 
	 Нгруппировка = НастройкиКД.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	 
	 ПолеКД = Нгруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	 ПолеКД.Использование = Истина;
	 ПолеКД.Поле = Новый ПолеКомпоновкиДанных(АналиикаКод);
	 
	 ВыбранныеПоля = Нгруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
     ВыбранныеПоля.Использование = Истина;
	 	 
	 мПоказателиРаскрытия = Новый ТаблицаЗначений;
	 мПоказателиРаскрытия.Колонки.Добавить(АналиикаКод,НП.ТипЗначения);
	 нСтр = мПоказателиРаскрытия.Добавить();
		 
	 ВнешниеНаборыДанных=Новый Структура;
	 ВнешниеНаборыДанных.Вставить("мПоказателиРаскрытия",мПоказателиРаскрытия);
	 
	 Попытка 
		 
		 КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных; 
		 МакетКомпоновки=КомпоновщикМакета.Выполнить(СКДТекущегоПоля,НастройкиКД.Настройки);		 
		 ПроцессорКомпоновкиДанных=Новый ПроцессорКомпоновкиДанных;
		 ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных);		 
		 ДокументРезультат = Новый ТабличныйДокумент;		 
		 ПроцессорВывода=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		 ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
		 ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	 
		 Возврат Истина;
		 
	 Исключение
		  
		 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Невозможно применить настройку: выражение представления или сортировки заданы некорректно'"));
		 Возврат Ложь;
		 
	 КонецПопытки;
	 
 КонецФункции	




