#Область ОписаниеПеременных
&НаКлиенте
Перем тЦветРамки;
&НаКлиенте
Перем тГраницаСверхуТип;  
&НаКлиенте
Перем тГраницаСнизуТип;
&НаКлиенте
Перем тГраницаСлеваТип;
&НаКлиенте
Перем тГраницаСправаТип;
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
					
	// Считывание параметра ВидОтчета.
	ВидОтчетаПараметр = Справочники.ВидыОтчетов.ПустаяСсылка();
	Если  Параметры.Свойство("Отбор") Тогда
		Если Параметры.Отбор.Свойство("Владелец", ВидОтчетаПараметр) Тогда
			Объект.Владелец = ВидОтчетаПараметр;
			Объект.БланкДляОтображения = Истина;
		Иначе
			// Форма вызвана без параметра ВидОтчета, не изменяем реквизит Владелец.
		КонецЕсли;
	Иначе
		// Не задан отбор.
	КонецЕсли;
			
	Если Параметры.Ключ.Пустая() Тогда
		ПоУмолчаниюИмпорт      = Ложь;
		ПоУмолчаниюОтображение = Истина;
		Объект.РежимБланка     = 2;	
	КонецЕсли;
 	
			
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ПрочитатьНастройкиВариантаИсточника(Параметры.ЗначениеКопирования);
		Элементы.ПоказатьПанельПоказателей.Пометка = НЕ  Элементы.ПоказатьПанельПоказателей.Пометка;
		Элементы.ГруппаПоказателей.Видимость = Элементы.ПоказатьПанельПоказателей.Пометка;
		Объект.Наименование = Справочники.ВидыОтчетов.СгенерироватьНаименованиеНовогоБланкаДляВидаОтчета(Объект.Владелец);
	Иначе	
		ПрочитатьНастройкиВарианта();
	КонецЕсли;		
	
	Если Параметры.Свойство("НаименованиеБланка") И (Параметры.НаименованиеБланка <> "") Тогда
		Параметры.Свойство("НаименованиеБланка", Объект.Наименование);
	КонецЕсли;
	
	Заголовок = Справочники.БланкиОтчетов.СформироватьЗаголовок(Объект.Владелец, Объект.Ссылка, Объект.Наименование);
	
	ИнициализироватьПоляПараметровСкд();
		
	ВидОтчетаОтборПоказателей =  Объект.Владелец;
	
	УстановитьПараметрВидОтчета();

	ЗаполнитьСписокПравилОбработки();
	
	УстановитьНастройкиПанелиЯзыков();
	
	ПроверитьНаличиеСлужебныхОбластей(Истина);
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		ТаблицаЯзыков = Константы.ДополнительныеЯзыкиВыводаОтчета.Получить().Получить();
		
		Если ТипЗнч(ТаблицаЯзыков) =Тип("ТаблицаЗначений") Тогда
			
			ЗначениеВРеквизитФормы(ТаблицаЯзыков,"ДополнительныеЯзыки");	
			Элементы.Мультиязычный.Видимость=Истина;
						
		Иначе
			
			Элементы.Мультиязычный.Видимость=Ложь;
			
		КонецЕсли;
		
		УстановитьВидимостьДоступностьДопЯзыков();
		
	Иначе
		
		Элементы.ГруппаЯзыки.Видимость=Ложь;
		Элементы.Мультиязычный.Видимость=Ложь;
		
	КонецЕсли;
	
	ТекШиринаТаблицы=ПолеТабличногоДокументаМакет.ШиринаТаблицы;
	ТекВысотаТаблицы=ПолеТабличногоДокументаМакет.ВысотаТаблицы;
	
	ЗаблокироватьБланкДляИмпорта();
	
	ПрочитатьДополнительныеБланки();
		
КонецПроцедуры          

#КонецОбласти

#Область ОбработчикиОповещенийФормы

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	Формула    = "";
	
	Если НЕ ТипЗнч(ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолеТабличногоДокументаМакет.ВыделенныеОбласти[0].ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда 
		Возврат;
	КонецЕсли;

	
	Если РежимРедактированияФормулы Тогда
		
		СтрокаШаблона = Нстр("ru = 'Редактирование формулы ячейки: %1'");
		
		ТекущийПоказатель = "";
		Если Не ПустаяСтрока(СтрокаШаблона) тогда
			ТекущийПоказатель = СтрШаблон(СтрокаШаблона, ИмяТекущейОбластиРедактированияФормулы);
		КонецЕсли;
		
	Иначе		
		Если  ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка = Неопределено Тогда
			ТекущийПоказатель = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Имя;	
		ИначеЕсли  ТипЗнч(ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда		
			ТекущийПоказатель = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Имя;
		ИначеЕсли  ТипЗнч(ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка) = Тип("Структура") И ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка.Свойство("ТекстФормулы") Тогда	  
			ТекущийПоказатель = Нстр("ru = 'Выражение бланка'");
			Формула    = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка.ТекстФормулы;
		ИначеЕсли ТипЗнч(ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка) = Тип("Структура") И ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка.Свойство("Ссылка") Тогда		
			СтруктураЯчейки = АналитическийБланкУХКлиент.ПолучитьСтруктуруПоказателяПоИмениЯчейкиБланк(ПолеТабличногоДокументаМакет.ТекущаяОбласть.имя);	
			Если  СтруктураЯчейки = Неопределено Тогда
				ТекущийПоказатель = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Имя;
			Иначе	
				ТекущийПоказатель = "["+СтруктураЯчейки.ВидОтчетаКод+"."+СтруктураЯчейки.ПоказательКод+"]";
			КонецЕсли;				
		КонецЕсли;	
	КонецЕсли;	
		ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогУдалениеОбластиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда		
		 УдалитьОбластьРаскрытия(Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Имя);
		 ОчиститьКэшТекущейОбласти(Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Имя);	  
		 Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Имя = "";
		 ЭтаФорма.Модифицированность = Истина;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда	 
		 ОчиститьКэшТекущейОбласти(Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Имя);
		 Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Имя = "";	 
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ФормаИзмененияСвойствОбластиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	ТекИмяОбласти =  Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Имя;	
	ОбновитьСвойстваОбластиРаскрытия(ТекИмяОбласти,Результат);
	
	Этаформа.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаРедактированияОтборовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	МассивОбрабатываемыхИмен 			= Новый Массив();
	МассивОбрабатываемыхИменФормул      = Новый Массив();
	
	Для Каждого ВыдОбласть Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл
		
		Если  ВыдОбласть.Верх =0 Тогда	
			Верх  = 1;
			Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	 
		ИначеЕсли  ВыдОбласть.Лево =0 Тогда	 	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = 1;
			Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;	
		Иначе	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	
		КонецЕсли;	
		
		Для ИндС = Верх По Низ Цикл
			Для ИндК = Лево По Право Цикл
				ТекОбл = ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);
				Если ТипЗнч(ТекОбл.Расшифровка) = Тип("Структура") И ТекОбл.Расшифровка.Свойство("Ссылка")  Тогда
					МассивОбрабатываемыхИмен.Добавить(ТекОбл.Имя);
				КонецЕсли;	  
				Если ТипЗнч(ТекОбл.Расшифровка) = Тип("Структура") И ТекОбл.Расшифровка.Свойство("ТекстФормулы")  Тогда
					МассивОбрабатываемыхИменФормул.Добавить(ТекОбл.Имя);
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
		
	КонецЦикла;
	
	ОбновитьКэшОтборов(Результат.АдресРезультатаРедактирования,МассивОбрабатываемыхИмен,Неопределено);
	
	Если МассивОбрабатываемыхИменФормул.Количество()>0 Тогда
		ЗаполнитьРасшифровкуФормулОбластейПоказателей();
		ОбновитьКэшОтборовФормул(Результат.АдресРезультатаРедактирования,МассивОбрабатываемыхИменФормул);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаРедактированияОтборовОперандаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	ВыделенныйТекст  	= СокрЛП(Элементы.ТекстФормулы.ВыделенныйТекст); 
	
	СтрокаНач=0;
	СтрокаКон=0;
	КолонкаНач=0;
	КолонкаКон=0;
	
	
	Если НЕ ЗначениеЗаполнено(ВыделенныйТекст) Тогда
		
		Элементы.ТекстФормулы.ПолучитьГраницыВыделения(СтрокаНач,
		КолонкаНач,
		СтрокаКон,
		КолонкаКон);
		
		ИсходныйТекстФормулы = (ТекстФормулы.ПолучитьТекст());	
		
		Если КолонкаНач> СтрДлина(ИсходныйТекстФормулы) Тогда
			 Возврат;
		КонецЕсли;	
		
		ПозицияПравойСкобки  = СтрНайти(ИсходныйТекстФормулы,"]",,КолонкаКон,1);
		ПозицияЛевойСкобки   = СтрНайти(ИсходныйТекстФормулы,"[",НаправлениеПоиска.СКонца,КолонкаНач,1);
		
		тПозицияПравойСкобки  = СтрНайти(ИсходныйТекстФормулы,"[",,КолонкаКон,1);
		тПозицияЛевойСкобки   = СтрНайти(ИсходныйТекстФормулы,"]",НаправлениеПоиска.СКонца,КолонкаНач,1);

		Если ПозицияЛевойСкобки>КолонкаНач ИЛИ ПозицияПравойСкобки<КолонкаКон Тогда
			 Возврат;
		КонецЕсли;	

		Если ПозицияПравойСкобки>0 И ПозицияЛевойСкобки>0 Тогда
			 ВыделенныйТекст = Сред(ИсходныйТекстФормулы,ПозицияЛевойСкобки,ПозицияПравойСкобки - ПозицияЛевойСкобки+1);
		КонецЕсли;	
		
		КолонкаНач = ПозицияЛевойСкобки;
		КолонкаКон = ПозицияПравойСкобки;
		
	Иначе	
		Элементы.ТекстФормулы.ПолучитьГраницыВыделения(СтрокаНач,
		КолонкаНач,
		СтрокаКон,
		КолонкаКон);

	КонецЕсли;
	
	ОбновитьКэшОтборовОперандов(Результат.АдресРезультатаРедактирования,ВыделенныйТекст,КолонкаНач,КолонкаКон);
		
КонецПроцедуры

&НаКлиенте
Процедура ФормаВыбораРеквизитовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка = "-";
	
	ОбластьДляРасшифровки = ПолеТабличногоДокументаМакет.Область(Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Верх
	,Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Лево
	,Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Верх
	,Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Лево
	);
	
		
	ОбластьДляРасшифровки.Текст = ОбластьДляРасшифровки.Текст+?(ЗначениеЗаполнено(ОбластьДляРасшифровки.Текст),",["+Результат.ПолеПредставление+"]","["+Результат.ПолеПредставление+"]");
		
КонецПроцедуры

&НаКлиенте                                           
Процедура ПолеТабличногоДокументаМакетПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	Если НЕ ТипЗнч(Элемент.ТекущаяОбласть) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		 Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда	
		Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ДоступноеПолеКомпоновкиДанных") Тогда
			СтандартнаяОбработка	 = Ложь;
			Область.СодержитЗначение  = Ложь;
			Область.Текст 	= Область.Текст+"[Параметры."+ПараметрыПеретаскивания.Значение[0].Поле+"]";
			Возврат;
		Иначе	
			СтандартнаяОбработка	 = Ложь;
			Область.СодержитЗначение  = Ложь;
			Область.Текст 	= ПараметрыПеретаскивания.Значение[0].ИмяПараметра;
			Область.Имя 	= "Параметр_"+ПараметрыПеретаскивания.Значение[0].ИмяПараметра;
			Возврат;
		КонецЕсли; 	 
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("ТабличныйДокумент") Тогда	 
		ПараметрыПеретаскивания.Значение = "Показатель";
		Возврат;
	Иначе	
		 СтандартнаяОбработка	 = Ложь;
	КонецЕсли;	
	
	ТекОбластьНиз = Область.Низ;
	
	Для Каждого СтрПоказатель Из ПараметрыПеретаскивания.Значение.ВыделенныеПоказатели Цикл
		
		тОбласть = ПолеТабличногоДокументаМакет.Область(ТекОбластьНиз,Область.Лево,ТекОбластьНиз,Область.Лево);
		тОбласть.СодержитЗначение  = Ложь;
		
		тОбласть.Текст 			 = СтрПоказатель.ВидОтчета +"."+СтрПоказатель.ПоказательКод;
		тОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;	
		тОбласть.Имя 			 = ПолучитьИмяСледующейОбласти(ПолеТабличногоДокументаМакет,СтрПоказатель.ВидОтчета,СтрПоказатель.ПоказательКод); 
		
		СтруктураРасшифровки = Новый Структура();
		СтруктураРасшифровки.Вставить("Ссылка"			,СтрПоказатель.ПоказательСсылка);			
		тОбласть.Расшифровка 	 = СтруктураРасшифровки;
		
		ТекОбластьНиз  = ТекОбластьНиз+1;
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаМастерГенерацииМакетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	СоздатьМакетБланка(Результат);
		
	Этаформа.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогМастерГенерацииМакетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если  Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыФормы = Новый Структура("ВидОтчета,БланкДляОтображения",Объект.Владелец,Объект.БланкДляОтображения);	   		
		Оповещение = Новый ОписаниеОповещения("ФормаМастерГенерацииМакетаЗавершение", ЭтаФорма);	
		ОткрытьФорму("Справочник.БланкиОтчетов.Форма.ФормаПодбораПоказателейВидаОтчета", ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПереходВрежимИмпортаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если  Результат = КодВозвратаДиалога.Да Тогда
		ПолеТабличногоДокументаМакетОчистить();
		ПараметрыФормы = Новый Структура("ВидОтчета,БланкДляОтображения",Объект.Владелец,Объект.БланкДляОтображения);	   			   		
		Оповещение = Новый ОписаниеОповещения("ФормаМастерГенерацииМакетаЗавершение", ЭтаФорма);	
		ОткрытьФорму("Справочник.БланкиОтчетов.Форма.ФормаПодбораПоказателейВидаОтчета", ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	Иначе	
		Объект.БланкДляОтображения = Истина;
		ЗаблокироватьБланкДляИмпорта();
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиИзменитьСвойстваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	ТекстСообщения = НСтр("ru = 'Свойства показателя изменены. Бланк перезаписан'");
	ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьПанельПоказателей(Команда)
	
	Элементы.ПоказатьПанельПоказателей.Пометка = НЕ  Элементы.ПоказатьПанельПоказателей.Пометка;
	Элементы.ГруппаПоказателей.Видимость = Элементы.ПоказатьПанельПоказателей.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтбор(Команда)
	
	СтруктураПоказателей 	= Новый Структура;
	СтруктураДопПараметров  = Новый Структура;
	МассивФормул            = Новый Массив;
	КоличествоПоказателей = 0;
		
	Для Каждого ВыдОбласть Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл	
		Если  ВыдОбласть.Верх =0 Тогда	
			Верх  = 1;
			Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	 
		ИначеЕсли  ВыдОбласть.Лево =0 Тогда	 	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = 1;
			Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;	
		Иначе	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	
		КонецЕсли;	
		
		Для ИндС = Верх По Низ Цикл
			Для ИндК = Лево По Право Цикл
				ТекОбл = ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);
				Если ТипЗнч(ТекОбл.Расшифровка) = Тип("Структура") И ТекОбл.Расшифровка.Свойство("Ссылка") Тогда
					КоличествоПоказателей = КоличествоПоказателей+1;
					СтруктураПоказателей.Вставить(ТекОбл.Имя,ТекОбл.Имя);
				КонецЕсли;	  
				
				//Показатели формул...
				Если ТипЗнч(ТекОбл.Расшифровка) = Тип("Структура") И ТекОбл.Расшифровка.Свойство("ТекстФормулы") Тогда	
					МассивФормул.Добавить(ТекОбл.Имя);
					СтруктураПоказателей.Вставить(ТекОбл.Имя,ТекОбл.Имя);
				КонецЕсли;
				
			КонецЦикла;	
		КонецЦикла;			
	КонецЦикла;
	
	Если КоличествоПоказателей = 0 И МассивФормул.Количество() = 0 Тогда
		 Возврат;
	КонецЕсли;	
				
	СтруктураПараметров = ПодготовитьТаблицуОтборовПоказателей(СтруктураПоказателей,);
	
	ПараметрыФормы = Новый Структура("Бланк,ГрупповойРежим,ТзРасшифровкаОтборовАдрес,ТЗРасшифровкаОтборовГруппРаскрытия,ОтображатьСуммуВДопВалюте"
	,Бланк
	,КоличествоПоказателей>1
	,СтруктураПараметров.ТзРасшифровкаОтборов
	,СтруктураПараметров.ТЗРасшифровкаОтборовГруппРаскрытия
	,СтруктураПараметров.ОтображатьСуммуВДопВалюте);	   	
	
	Оповещение = Новый ОписаниеОповещения("ФормаРедактированияОтборовЗавершение", ЭтаФорма);

	ОткрытьФорму("Обработка.АналитическийБланк.Форма.ФормаРедактированияОтборов", ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры
  
&НаКлиенте
Процедура ПолеТабличногоДокументаМакетВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Область.Верх = 0 Тогда		
		тОбласть = ПолеТабличногоДокументаМакет.Область(1,Область.Лево,1,Область.Лево);
		Расшифровка = тОбласть.Расшифровка;	
	ИначеЕсли Область.Лево = 0 Тогда	
		 тОбласть = ПолеТабличногоДокументаМакет.Область(Область.Верх,1,Область.Верх,1);
		 Расшифровка = тОбласть.Расшифровка;		
	Иначе	 
		 Расшифровка = Область.Расшифровка;
	КонецЕсли;	
		
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда 
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если РежимРедактированияФормулы И ТипЗнч(Расшифровка) = Тип("Структура") И Расшифровка.Свойство("Ссылка") Тогда
				            
		тОперанд = ПолучитьУидТекущегоПоказателя(Расшифровка,Область.Имя);
		
		ВставитьТекстВФормулу(тОперанд);
			
		ЭтаФорма.ТекущийЭлемент = Элементы.ТекстФормулы;	
		
	ИначеЕсли РежимРедактированияФормулы И ТипЗнч(Расшифровка) = Тип("Структура") И Расшифровка.Свойство("ТекстФормулы") Тогда	
		
		ВставитьТекстВФормулу("("+Расшифровка.ТекстФормулы+")");
		
		ЭтаФорма.ТекущийЭлемент = Элементы.ТекстФормулы;	
		
	ИначеЕсли   ТипЗнч(Расшифровка) = Тип("Структура") И Расшифровка.Свойство("НастройкиАналитикРаскрытия") Тогда	
		
		СтруктураПараметров = ПодготовитьПараметрыОбластиРаскрытия(Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.имя);
		
		ПараметрыФормы = Новый Структура("Бланк,ТзПараметрыАдрес,ТзРашифровкаОтборовАдрес,ТзДоступныеАналитикиАдрес,ТзВложенныхОбластейАдрес,ТабДокОбластиАдрес,ПараметрыИерархииАналитик"
		,Бланк
		,СтруктураПараметров.ТзПараметрыАдрес
		,СтруктураПараметров.ТзРашифровкаОтборовАдрес
		,СтруктураПараметров.ТзДоступныеАналитикиАдрес
		,СтруктураПараметров.ТзВложенныхОбластей
		,СтруктураПараметров.ТабДокОбластиАдрес
		,СтруктураПараметров.ПараметрыИерархииАналитик
		);	   	
		
		Оповещение = Новый ОписаниеОповещения("ФормаИзмененияСвойствОбластиЗавершение", ЭтаФорма);
		
		ОткрытьФорму("Обработка.АналитическийБланк.Форма.ФормаНастроекМакетаРаскрытия", ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Не РежимРедактированияФормулы И ТипЗнч(Расшифровка) = Тип("Структура") И Расшифровка.Свойство("Ссылка") Тогда
		
		СтруктураПоказателей = Новый Структура;
		СтруктураПоказателей.Вставить(Область.Имя,Область.Имя);
		
		СтруктураПараметров = ПодготовитьТаблицуОтборовПоказателей(СтруктураПоказателей);
		
		ПараметрыФормы = Новый Структура("Бланк,ГрупповойРежим,ТзРасшифровкаОтборовАдрес,ТЗРасшифровкаОтборовГруппРаскрытия,ОтображатьСуммуВДопВалюте"
		,Бланк
		,Ложь
		,СтруктураПараметров.ТзРасшифровкаОтборов
		,СтруктураПараметров.ТЗРасшифровкаОтборовГруппРаскрытия
		,СтруктураПараметров.ОтображатьСуммуВДопВалюте);	   	
		
		Оповещение = Новый ОписаниеОповещения("ФормаРедактированияОтборовЗавершение", ЭтаФорма);
		
		ОткрытьФорму("Обработка.АналитическийБланк.Форма.ФормаРедактированияОтборов", ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетПриИзмененииСодержимогоОбласти(Элемент, Область)

	МассивОбрабатываемыхИмен 	   = Новый Массив();
	МассивОбрабатываемыхИменФормул = Новый Массив();

	ЭтаФорма.Модифицированность = Истина;	
	//В случае копирования проверить, что имена областей сопоставлены с кэшем
	ВыдОбласть = Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	
	Если Не ТипЗнч(ВыдОбласть) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		 Возврат;
	КонецЕсли;	
	
	Если  ВыдОбласть.Имя = "T" Тогда
		 Возврат;
	КонецЕсли;	
		
	Если НЕ ПустаяСтрока(Область.Текст) Тогда	
		ОбновитьИнформациюТекстОбласти(Область);	
	КонецЕсли;

	Если  ВыдОбласть.Верх =0 Тогда	
		Верх  = 1;
		Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
		Лево  = ВыдОбласть.Лево;
		Право = ВыдОбласть.Право;	 
		ОбновитьКартинкуРаскрываемойОбласти(ВыдОбласть.Имя);
	ИначеЕсли  ВыдОбласть.Лево =0 Тогда	 	
		Верх  = ВыдОбласть.Верх;
		Низ   = ВыдОбласть.Низ;
		Лево  = 1;
		Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;	
	Иначе	
		Верх  = ВыдОбласть.Верх;
		Низ   = ВыдОбласть.Низ;
		Лево  = ВыдОбласть.Лево;
		Право = ВыдОбласть.Право;	
	КонецЕсли;	
	
	//Обработка нажатия DEl по именованной ячейке
	Если НЕ (Область.Верх = 0 ИЛИ Область.Верх = 1 ИЛИ Область.Лево = 0 ИЛИ Область.Лево = 1) Тогда
		Для ИндК = Лево По  Право Цикл
			Для ИндС = Верх По  Низ Цикл	
				тЯчейка = ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);
				Если тЯчейка.Текст = "" Тогда
					тЯчейка.Имя  = "";
					тЯчейка.Расшифровка = Неопределено;
				КонецЕсли;		
			КонецЦикла;
		КонецЦикла;	
	КонецЕсли;	
	
 КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетПриАктивизацииОбласти(Элемент)
	
	Элементы.ГруппаКомандыРаботыСЯчейками.Доступность 	= Ложь;
	Элементы.ГруппаПанельФорматирования.Доступность 	= Ложь;

	Элементы.КМ_РаботаСОбластямиСтрок.Видимость  		= Ложь;
	Элементы.КМ_РаботаСОбластямиКолонок.Видимость  		= Ложь;
	Элементы.КМ_КомандыДиаграммы.Видимость 				= Ложь;
    Элементы.КМ_РаботаСАналитикой.Видимость             = Ложь;
	Элементы.КМ_РаботаСПоказателями.Видимость           = Ложь;
	
	Элементы.ПолеТабличногоДокументаМакет.Редактирование = Истина;
	
	Если ТипЗнч(Элемент.ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") 
		И Элемент.ТекущаяОбласть.ТипРисунка = ТипРисункаТабличногоДокумента.Диаграмма Тогда
		Элементы.КМ_КомандыДиаграммы.Видимость 	= Истина;
		Возврат;		
	КонецЕСли;	
	
	Если НЕ ТипЗнч(Элемент.ТекущаяОбласть) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Возврат;
	КонецЕсли;	
	 
	Если  Элемент.ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда
		Элементы.КМ_РаботаСОбластямиКолонок.Видимость  		= Истина;
	КонецЕсли;	
	
	Если  Элемент.ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
		Элементы.КМ_РаботаСОбластямиСтрок.Видимость  		= Истина;
	КонецЕсли;	
	
	Если Элемент.ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда  
		 Если ТипЗнч(Элемент.ТекущаяОбласть.Расшифровка) = Тип("Структура") И Элемент.ТекущаяОбласть.Расшифровка.Свойство("НастройкиАналитикРаскрытия") Тогда		
			 Если  Элемент.ТекущаяОбласть.Лево = 1   Тогда			 
				 тИмяДляВыделения = ПолучитьКоординатыОбластиРаскрытия(Элемент.ТекущаяОбласть.Имя);	 
				 нВыделОбласть  =  ПолеТабличногоДокументаМакет.Область(тИмяДляВыделения);
				 МассивВО       =  Новый Массив;
				 МассивВО.Добавить(нВыделОбласть);
				 Элементы.ПолеТабличногоДокументаМакет.УстановитьВыделенныеОбласти(МассивВО);
			 ИначеЕсли Элемент.ТекущаяОбласть.Верх = 1 Тогда
				 тИмяДляВыделения = ПолучитьКоординатыОбластиРаскрытия(Элемент.ТекущаяОбласть.Имя);			 
				 нВыделОбласть  =  ПолеТабличногоДокументаМакет.Область(тИмяДляВыделения);
				 МассивВО       =  Новый Массив;
				 МассивВО.Добавить(нВыделОбласть);
				 Элементы.ПолеТабличногоДокументаМакет.УстановитьВыделенныеОбласти(МассивВО);
			 КонецЕсли;		
		 КонецЕсли;	
		 
		Элементы.ГруппаКомандыРаботыСЯчейками.Доступность 	= Истина;
		Элементы.ГруппаПанельФорматирования.Доступность 	= Истина;
	    Элементы.КМ_РаботаСПоказателями.Видимость           = Истина;
		 
	 КонецЕсли;
	 
	Элементы.ПолеТабличногоДокументаМакет.Редактирование = Истина;
	ОбластиВхождения.Очистить();
	
	Если Элемент.ТекущаяОбласть.Имя = "ОбластьНастроекРаскрытийСтрок" ИЛИ Элемент.ТекущаяОбласть.Имя = "ОбластьНастроекРаскрытийКолонок" Тогда
		Элементы.ПолеТабличногоДокументаМакет.Редактирование = Ложь;
	ИначеЕсли ПроверитьНаличиеСлужебнойОбласти(Элемент.ТекущаяОбласть.Лево,Элемент.ТекущаяОбласть.Верх) Тогда
		Элементы.ПолеТабличногоДокументаМакет.Редактирование = Ложь;
	Иначе	
		Элементы.ПолеТабличногоДокументаМакет.Редактирование = Истина;
	КонецЕсли;	
				
	Если Элемент.ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки ИЛИ 
		Элемент.ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда		 
	Иначе	 
		ТекОбластьИмя = Элемент.ТекущаяОбласть.Имя;
		ПроверитьВхождениеЯчейкиВОбластьРаскрытия();
	КонецЕсли;	 
	
	Элементы.КМ_РаботаСАналитикой.Видимость = ОбластиВхождения.Количество()>0;
	
	Элементы.ТекущаяФормула.Доступность = Истина;
	
	Если Элемент.ТекущаяОбласть.Лево = Элемент.ТекущаяОбласть.Право И Элемент.ТекущаяОбласть.Верх = Элемент.ТекущаяОбласть.Низ Тогда			
		Если НЕ РежимРедактированияФормулы Тогда					
			ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.1);
			ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);	
		КонецЕсли;		
	Иначе	
		Если НЕ РежимРедактированияФормулы Тогда			
			 Элементы.ТекущаяФормула.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяОбласть = Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	ТекущаяОбластьВерх = ТекущаяОбласть.Верх;	
	ТекущаяОбластьЛево = ТекущаяОбласть.Лево;
		
	ТекстФормулыОбласти = ПолеТабличногоДокументаМакет.Область(ТекущаяОбластьВерх, ТекущаяОбластьЛево, ТекущаяОбластьВерх, ТекущаяОбластьЛево).Текст;
	
	ПозицияНачалоПараметра = СтрНайти(ТекстФормулыОбласти, "[");
	ПозицияКонецПараметра = СтрНайти(ТекстФормулыОбласти, "]");
	
	Если ПозицияНачалоПараметра > 0 И ПозицияКонецПараметра > 0 И ПозицияКонецПараметра > ПозицияНачалоПараметра 
		И Элементы.ПолеТабличногоДокументаМакет.Редактирование
		И ТекущаяОбластьВерх <= ПолеТабличногоДокументаМакет.ВысотаТаблицы
		И ТекущаяОбластьЛево = ТекущаяОбласть.Право тогда
		
		Элементы.СкопироватьСоСмещениемВниз.Доступность = Истина;
	Иначе
		Элементы.СкопироватьСоСмещениемВниз.Доступность = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если НЕ РежимРедактированияФормулы Тогда
		
		МассивСтруктур = Новый Массив;                                    
		Для Каждого ВыдСтрока Из Элемент.ВыделенныеСтроки Цикл         
			
			ТекущиеДанные = Элемент.ДанныеСтроки(ВыдСтрока);
			
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("ВидОтчета",	    		СокрЛП(ТекущиеДанные.ВладелецКод));
			СтруктураПараметров.Вставить("ПоказательКод",   		СокрЛП(ТекущиеДанные.Код));	
			СтруктураПараметров.Вставить("ПоказательСсылка"			,ТекущиеДанные.Ссылка);	
			СтруктураПараметров.Вставить("ВидОтчетаСсылка"			,ТекущиеДанные.Владелец);				
			СтруктураПараметров.Вставить("ТипЗначения"				,ТекущиеДанные.ТипЗначения);
			СтруктураПараметров.Вставить("ИтогПоАналитике"			,ТекущиеДанные.ВидИтога);
			
			МассивСтруктур.Добавить(СтруктураПараметров);	
		КонецЦикла;
		
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("ВыделенныеПоказатели",МассивСтруктур);
		ПараметрыПеретаскивания.Значение = СтруктураОтвета;
	Иначе	
			
		ПараметрыПеретаскивания.Значение =  "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСопоставление(Команда)
	
	МассивОбрабатываемыхИмен = Новый Массив();
	
	Для ИндС = Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Верх По Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Низ Цикл
		Для ИндК = Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Лево По Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Право Цикл
			ТекОбл = ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);
			Если ТипЗнч(ТекОбл.Расшифровка) = Тип("Структура") Тогда
				МассивОбрабатываемыхИмен.Добавить(ТекОбл.Имя);
			КонецЕсли;	  
		КонецЦикла;	
	КонецЦикла;	
	
	УдалитьОбластиПоказателей(МассивОбрабатываемыхИмен);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьСАналитикой(Команда)
	
	ДоступныеАналитики = ПодготовитьПарамтерыСоспоставленияСАналитикой(ОбластиВхождения);	
	ПараметрыФормы = Новый Структура("ДоступныеАналитикиСтрока",ДоступныеАналитики);	
	Оповещение = Новый ОписаниеОповещения("ФормаВыбораРеквизитовЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Обработка.АналитическийБланк.Форма.ФормаВыбораРеквизитов", ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура БланкЭкспортировать(Команда)
	
	Имя = "ОбщаяФорма.ФормаСохраненияМакета";
	ОткрытьФорму(Имя, БланкЭкспортироватьНаСервере(), ЭтаФорма);
	
КонецПроцедуры


#КонецОбласти


&НаКлиенте
Функция ПроверитьНаличиеСлужебнойОбласти(тЛево,тВерх)
	
	Если ПолеТабличногоДокументаМакет.Область(1,0,1,0).Имя = "ОбластьНастроекРаскрытийКолонок" Тогда	
		Если тВерх=1 Тогда 
			 Возврат Истина;
		КонецЕсли;		
	КонецЕсли;	
	
	Если ПолеТабличногоДокументаМакет.Область(0,1,0,1).Имя = "ОбластьНастроекРаскрытийСтрок" Тогда	
		Если тЛево=1 Тогда 
			 Возврат Истина;
		КонецЕсли;		
	КонецЕсли;	

	Возврат Ложь;
		
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоступностьДопЯзыков()
	
	Если Объект.Мультиязычный Тогда
		
		Элементы.Странмца_ДополнительныеЯзыки.Видимость=Истина;
		Элементы.ГруппаЯзыки.Видимость=Истина;
		
		Элементы.ВыводитьДополнительныйЯзык1.Видимость=Ложь;
		Элементы.ВыводитьДополнительныйЯзык2.Видимость=Ложь;
		
		Элементы.ТекстЯзык1.Видимость=Ложь;
		Элементы.ТекстЯзык2.Видимость=Ложь;
		
		Элементы.НомерОсновногоЯзыка.СписокВыбора.Очистить();
		Элементы.НомерОсновногоЯзыка.СписокВыбора.Добавить(0, Метаданные.ОсновнойЯзык.Синоним);
		Элементы.ТекстОсновнойЯзык.Заголовок=Элементы.НомерОсновногоЯзыка.СписокВыбора[0].Представление;
		
		Для Каждого СтрЯзык ИЗ ДополнительныеЯзыки Цикл
			
			Элементы.НомерОсновногоЯзыка.СписокВыбора.Добавить(СтрЯзык.ПорядковыйНомер,СтрЯзык.НаименованиеЯзыка);
			
			Элементы["ВыводитьДополнительныйЯзык"+СтрЯзык.ПорядковыйНомер].Видимость=Истина;
			Элементы["ВыводитьДополнительныйЯзык"+СтрЯзык.ПорядковыйНомер].Заголовок=СтрЯзык.НаименованиеЯзыка;
			
			Элементы["ТекстЯзык"+СтрЯзык.ПорядковыйНомер].Видимость=Истина;
			Элементы["ТекстЯзык"+СтрЯзык.ПорядковыйНомер].Заголовок	=СтрЯзык.НаименованиеЯзыка;

		КонецЦикла;
		
		НомерОсновногоЯзыка=0;
		ЯзыкОтображения=0;
		
		НайтиОбластиТекста();
		
	Иначе
		
		Элементы.ГруппаЯзыки.Видимость=Ложь;
		Элементы.Странмца_ДополнительныеЯзыки.Видимость=Ложь;
		
		Если ЯзыкОтображения>0 Тогда
			
			ДополнительныеЯзыкиУХ.ПеревестиТекстыОбластей(ПолеТабличногоДокументаМакет,ЯзыкОтображения,0,Объект.Владелец,РеквизитФормыВЗначение("ТекстыОбластейДополнительныеЯзыки"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьДоступностьДопЯзыков()

&НаСервере
Функция ПодготовитьПарамтерыСоспоставленияСАналитикой(ОбластиВхождения)

	ОбъектАБ = РеквизитФормывЗначение("ОбъектАналитическогоБланка");
	НастройкиАналитикРаскрытия = Обработки.АналитическийБланк.ПолучитьОписаниеТаблицыНастроекАналитик();
	
	Для Каждого Обл Из ОбластиВхождения Цикл 	
		ДоступныеАналитики = ЗначениеИзСтрокиВнутр(ОбъектАБ.КэшРаскрываемыхОбластей.НайтиСтроки(Новый Структура("ИмяОбласти",Обл.Значение))[0].НастройкиАналитикРаскрытия);	
		Для Каждого дАналитика Из ДоступныеАналитики Цикл
			Наналитика = НастройкиАналитикРаскрытия.Добавить();
			ЗаполнитьЗначенияСвойств(Наналитика,дАналитика);
		КонецЦикла;		
	КонецЦикла;

	Возврат ЗначениеВстрокуВнутр(НастройкиАналитикРаскрытия);
	
КонецФункции
		
&НаСервере
Процедура СохранитьМакетСервер(Отказ)
	
	ОбъектАБ = РеквизитФормыВЗначение("ОбъектАналитическогоБланка");
	МакетДляВыводаПоказателей.Очистить();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗначениеВреквизитФормы(ОбъектАБ,"ОбъектАналитическогоБланка");
		СохранитьНастройкиНового = Истина;
	Иначе	
		Справочники.БланкиОтчетов.СохранитьМакетМногопериодногоБланка(Объект.Ссылка,ПолеТабличногоДокументаМакет,ОбъектАБ,ЭтаФорма.УникальныйИдентификатор,Отказ,МакетДляВыводаПоказателей);
		СохранитьНастройкиНового = Ложь;
	КонецЕсли;	
	
КонецПроцедуры                          
                        

&НаСервере
Функция ПодготовитьПараметрыОбластиРаскрытия(ИмяОбласти)
		
	ТзПараметры = ОбъектАналитическогоБланка.КэшРаскрываемыхОбластей.Выгрузить();
	ТзПараметры.Очистить();
	
	ТЗРасшифровкаОтборов = ОбъектАналитическогоБланка.НастройкиРаскрываемыхОбластей.Выгрузить();
	ТЗРасшифровкаОтборов.Очистить();
	
	ТекОбластьМакет = ПолетабличногоДокументаМакет.Область(ИмяОбласти);
	
	Если ТекОбластьМакет.Лево = 0 Тогда
		ТипОбласти = "Строки";
		тНастройкиОбласти = ПолетабличногоДокументаМакет.Область(ТекОбластьМакет.Верх,1,ТекОбластьМакет.Верх,1);
	Иначе	
		ТипОбласти = "Колонки";
		тНастройкиОбласти = ПолетабличногоДокументаМакет.Область(1,ТекОбластьМакет.Лево,1,ТекОбластьМакет.Право);
	КонецЕсли;	

	НайденнаяГРуппаРасшифровкиОтборов  = ЗначениеИзСтрокиВнутр(тНастройкиОбласти.Расшифровка.ПараметрыОтбора);
	Для Каждого оСтр Из НайденнаяГРуппаРасшифровкиОтборов Цикл
		НстрОтборов =  ТЗРасшифровкаОтборов.Добавить();
		ЗаполнитьЗначенияСвойств(НстрОтборов,оСтр);	 
	КонецЦикла;	
		
	ТзВложенныхОбластей = Новый ТаблицаЗначений;
	ТзВложенныхОбластей.Колонки.Добавить("ИмяОбласти");
	ТзВложенныхОбластей.Колонки.Добавить("НачальнаяКоордината");
	ТзВложенныхОбластей.Колонки.Добавить("ПредставлениеАналитик");
	ТзВложенныхОбластей.Колонки.Добавить("СтруктураАналитик");
	
	
	ТекущаяГруппа = ЗначениеИзСтрокиВнутр(тНастройкиОбласти.Расшифровка.НастройкиАналитикРаскрытия);
	Нстр = ТзПараметры.Добавить();
	Нстр.НастройкиАналитикРаскрытия  = тНастройкиОбласти.Расшифровка.НастройкиАналитикРаскрытия;
			
	ТзДоступныхАналитик  = АналитическийБланкГенерацияМакетаУХСервер.СформироватьДоступныеАналитикиРаскрытия(ПолеТабличногоДокументаМакет,тНастройкиОбласти,ТЗРасшифровкаОтборов,ТипОбласти,ОбъектАналитическогоБланка);
	
	Если  ТипОбласти = "Строки" Тогда
		 ТабДокОбласти        = ПолеТабличногоДокументаМакет.ПолучитьОбласть(ТекОбластьМакет.Верх,0,ТекОбластьМакет.Низ,0);
	Иначе	
		 ТабДокОбласти        = ПолеТабличногоДокументаМакет.ПолучитьОбласть(0,ТекОбластьМакет.Лево,0,ТекОбластьМакет.Право);
	КонецЕсли;	
			
	Для Каждого СтрИмя Из ТабДокОбласти.Области Цикл	
		Если  ТипОбласти = "Строки" Тогда
			Если СтрИмя.Лево = 0 Тогда		
				НСтр =  ТзВложенныхОбластей.Добавить();	
				НСтр.ИмяОбласти = СтрИмя.Имя;
				НСтр.НачальнаяКоордината = СтрИмя.Верх;
				тАналитики = ТабДокОбласти.Область(СтрИмя.Верх,1,СтрИмя.Верх,1).Расшифровка.НастройкиАналитикРаскрытия;
				НСтр.СтруктураАналитик = тАналитики;
				тЗначАналитики         = ЗначениеИзСтрокиВнутр(тАналитики);
				
				Для Каждого СтрАналитика Из тЗначАналитики Цикл
					Если Не СтрАналитика.ЭтоАналитикаВерсии Тогда
					нДоступнаяАналитика      =  ТзДоступныхАналитик.Добавить();
					ЗаполнитьЗначенияСвойств(нДоступнаяАналитика,СтрАналитика);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;	
		Иначе	
			Если СтрИмя.Верх = 0 Тогда		
				НСтр =  ТзВложенныхОбластей.Добавить();	
				НСтр.ИмяОбласти = СтрИмя.Имя;
				НСтр.НачальнаяКоордината = СтрИмя.Лево;
				тАналитики = ТабДокОбласти.Область(1,СтрИмя.Лево,1,СтрИмя.Лево).Расшифровка.НастройкиАналитикРаскрытия;
				НСтр.СтруктураАналитик = тАналитики;
                тЗначАналитики         = ЗначениеИзСтрокиВнутр(тАналитики);
				
				Для Каждого СтрАналитика Из тЗначАналитики Цикл
					Если Не СтрАналитика.ЭтоАналитикаВерсии Тогда
					нДоступнаяАналитика      =  ТзДоступныхАналитик.Добавить();
					ЗаполнитьЗначенияСвойств(нДоступнаяАналитика,СтрАналитика);
					КонецЕсли;
				КонецЦикла;

			КонецЕсли;	
		КонецЕсли;		
	КонецЦикла;	
	
	ТзВложенныхОбластей.Сортировать("НачальнаяКоордината");
		
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ТзПараметрыАдрес",			ПоместитьВоВременноеХранилище(ТзПараметры,Новый УникальныйИдентификатор()));
	СтруктураВозврата.Вставить("ТзРашифровкаОтборовАдрес",	ПоместитьВоВременноеХранилище(ТЗРасшифровкаОтборов,Новый УникальныйИдентификатор()));
    СтруктураВозврата.Вставить("ТзДоступныеАналитикиАдрес",	ПоместитьВоВременноеХранилище(ТзДоступныхАналитик,Новый УникальныйИдентификатор()));
	СтруктураВозврата.Вставить("ТабДокОбластиАдрес",		ПоместитьВоВременноеХранилище(ТабДокОбласти,Новый УникальныйИдентификатор()));
	СтруктураВозврата.Вставить("ТзВложенныхОбластей",		ПоместитьВоВременноеХранилище(ТзВложенныхОбластей,Новый УникальныйИдентификатор()));
	Если тНастройкиОбласти.Расшифровка.Свойство("ПараметрыИерархииАналитик") Тогда
		СтруктураВозврата.Вставить("ПараметрыИерархииАналитик",тНастройкиОбласти.Расшифровка.ПараметрыИерархииАналитик);
	Иначе	
		СтруктураВозврата.Вставить("ПараметрыИерархииАналитик",ЗначениеВСтрокуВнутр(Новый Структура));
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура УдалитьОбластьРаскрытия(ИмяОбласти)
	
	ПолеТабличногоДокументаМакет.УдалитьОбласть(ПолеТабличногоДокументаМакет.Область(ИмяОбласти),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	
КонецПроцедуры	

&НаКлиенте
Функция ПолучитьИмяСледующейОбласти(ПолеТабличногоДокументаМакет_,ВидОтчета,ПоказательКод)
		
	ТекущееИмя = "ВидОтчета_"+ВидОтчета +"_Показатель_"+ПоказательКод+"_ИндексЯчейки";
	
	ИндексОбласти = 1;
	
	Пока НЕ ПолеТабличногоДокументаМакет_.Области.Найти(ТекущееИмя) = Неопределено Цикл
		ТекущееИмя = "ВидОтчета_"+ВидОтчета +"_Показатель_"+ПоказательКод+"_ИндексЯчейки"+ИндексОбласти;
		ИндексОбласти = ИндексОбласти+1;
	КонецЦикла;	
	
	Возврат ТекущееИмя;
		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяСледующейОбластиСервер(ПолеТабличногоДокументаМакет_,ВидОтчета,ПоказательКод)
		
	ТекущееИмя = "ВидОтчета_"+ВидОтчета +"_Показатель_"+ПоказательКод+"_ИндексЯчейки";
	
	ИндексОбласти = 1;
	
	Пока НЕ ПолеТабличногоДокументаМакет_.Области.Найти(ТекущееИмя) = Неопределено Цикл
		ТекущееИмя = "ВидОтчета_"+ВидОтчета +"_Показатель_"+ПоказательКод+"_ИндексЯчейки"+ИндексОбласти;
		ИндексОбласти = ИндексОбласти+1;
	КонецЦикла;	
	
	Возврат ТекущееИмя;
		
КонецФункции

&НаКлиенте
Процедура ПроверитьВхождениеЯчейкиВОбластьРаскрытия()
	
	АналитическийБланкУХКлиент.ПроверитьВхождениеЯчейкиВОбластьРаскрытия(ПолеТабличногоДокументаМакет,ОбъектАналитическогоБланка,ОбластиВхождения);
	РасшифровкаСтруктуры  = "";
	Если РежимОтладки Тогда	
		
		Элементы.КэшГруппОтборовПоказателей.ВыделенныеСтроки.Очистить();
		Элементы.РасшифровкаГруппОтборов.ВыделенныеСтроки.Очистить();
		
		Если НЕ Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			 Возврат;
		КонецЕсли;
			
		Если ТипЗнч(Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка) = Тип("Структура") Тогда		
			Для Каждого тСвойство Из Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка Цикл
				РасшифровкаСтруктуры = РасшифровкаСтруктуры+тСвойство.Ключ + ":"+тСвойство.Значение+", ";		
				Если тСвойство.Ключ = "УидГруппыОтборов" Тогда
					НужныеСтроки  = ОбъектАналитическогоБланка.КэшГруппОтборовПоказателей.НайтиСтроки(Новый Структура("УидГруппыОтборов",тСвойство.Значение));
					Для Каждого ВыдСтрока Из НужныеСтроки Цикл
						Элементы.КэшГруппОтборовПоказателей.ВыделенныеСтроки.Добавить(ВыдСтрока.НомерСтроки-1);
					КонецЦикла;
					НужныеСтроки  = ОбъектАналитическогоБланка.РасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УидГруппыОтборов",тСвойство.Значение));
					Для Каждого ВыдСтрока Из НужныеСтроки Цикл
						Элементы.РасшифровкаГруппОтборов.ВыделенныеСтроки.Добавить(ВыдСтрока.НомерСтроки-1);
					КонецЦикла;			
				КонецЕсли;	
			КонецЦикла;				
		КонецЕсли;		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКоординатыОбластиРаскрытия(ИмяОбласти)
	
	тОбласть     = ПолеТабличногоДокументаМакет.Область(ИмяОбласти);
	тИмяОбласти  = ИмяОбласти;
	
	Если тОбласть.лево = 1  Тогда 
		
		ТекущийВерх  =  тОбласть.Верх;
		ТекущийНиз   =  тОбласть.Низ;
		
		Для Каждого Обл Из ПолеТабличногоДокументаМакет.Области Цикл	
			Если Обл.Лево = 0 И (Обл.верх<= ТекущийВерх И Обл.Низ>= ТекущийНиз) Тогда	
				ТекущийВерх  =  Обл.Верх;
				ТекущийНиз   =  Обл.Низ;
				тИмяОбласти  =  Обл.Имя;	
			КонецЕсли;		
		КонецЦикла;	
		
	КонецЕсли;	
	
	Если тОбласть.Верх = 1  Тогда 
		
		ТекущийЛево  =  тОбласть.Лево;
		ТекущийПраво =  тОбласть.Право;
		
		Для Каждого Обл Из ПолеТабличногоДокументаМакет.Области Цикл	
			Если Обл.Верх = 0 И (Обл.Лево<= ТекущийЛево И Обл.Право>= ТекущийПраво) Тогда	
				ТекущийЛево  =  Обл.Лево;
				ТекущийПраво   =  Обл.Право;
				тИмяОбласти  =  Обл.Имя;	
			КонецЕсли;		
		КонецЦикла;	
		
	КонецЕсли;	
	
	Возврат тИмяОбласти; 
	
КонецФункции

&НаСервере
Функция ПолучитьКоординатыОбластиРаскрытияСервер(ИмяОбласти)
	
	тОбласть     = ПолеТабличногоДокументаМакет.Область(ИмяОбласти);
	тИмяОбласти  = ИмяОбласти;
	
	ТзКоординат = Новый ТаблицаЗначений;
	ТзКоординат.Колонки.Добавить("ИмяОбласти");
	ТзКоординат.Колонки.Добавить("НачальнаяКоордината");
    ТзКоординат.Колонки.Добавить("КонечнаяКоордината");

	
	Если тОбласть.лево = 1  Тогда 
		
		ТекущийВерх  =  тОбласть.Верх;
		ТекущийНиз   =  тОбласть.Низ;
		
		Для Каждого Обл Из ПолеТабличногоДокументаМакет.Области Цикл	
			Если Обл.Лево = 0 И (Обл.верх<= ТекущийВерх И Обл.Низ>= ТекущийНиз) Тогда			
				нСтр 						= ТзКоординат.Добавить();
				нСтр.ИмяОбласти 			= Обл.Имя;
				нСтр.НачальнаяКоордината 	= Обл.Верх;
                нСтр.КонечнаяКоордината 	= Обл.Низ;
				
			КонецЕсли;		
		КонецЦикла;	
		
	КонецЕсли;	
	
	Если тОбласть.Верх = 1  Тогда 
		
		ТекущийЛево  =  тОбласть.Лево;
		ТекущийПраво =  тОбласть.Право;
		
		Для Каждого Обл Из ПолеТабличногоДокументаМакет.Области Цикл	
			Если Обл.Верх = 0 И (Обл.Лево<= ТекущийЛево И Обл.Право>= ТекущийПраво) Тогда	
				нСтр 						= ТзКоординат.Добавить();
				нСтр.ИмяОбласти 			= Обл.Имя;
				нСтр.НачальнаяКоордината 	= Обл.Лево;
                нСтр.КонечнаяКоордината 	= Обл.Право;

			КонецЕсли;		
		КонецЦикла;	
		
	КонецЕсли;	
	
	ТзКоординат.Сортировать("НачальнаяКоордината УБЫВ");
	
	Возврат ТзКоординат[0].ИмяОбласти; 
	
КонецФункции

&НаСервере
Функция ПодготовитьТаблицуОтборовПоказателей(СтруктураПоказателей,СтруктураДопПараметров = Неопределено)
		
	Возврат АналитическийБланкГенерацияМакетаУХСервер.ПодготовитьТаблицуОтборовПоказателей(ПолеТабличногоДокументаМакет,СтруктураПоказателей,ОбъектАналитическогоБланка,СтруктураДопПараметров);
		
КонецФункции	

&НаСервере
Процедура ПрочитатьНастройкиВарианта()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбъектАБ = РеквизитФормыВЗначение("ОбъектАналитическогоБланка");	
		Обработки.АналитическийБланк.ПрочитатьНастройкиАналитическогоБланка(ПолеТабличногоДокументаМакет,Объект.Ссылка,ОбъектАБ);
		ЗначениеВРеквизитФормы(ОбъектАБ,"ОбъектАналитическогоБланка");
	КонецЕсли;
		
КонецПроцедуры	

&НаСервере
Процедура ПрочитатьНастройкиВариантаИсточника(ЗначениеКопирования)
	
	ОбъектАБ = РеквизитФормыВЗначение("ОбъектАналитическогоБланка");	
	Обработки.АналитическийБланк.ПрочитатьНастройкиАналитическогоБланка(ПолеТабличногоДокументаМакет,ЗначениеКопирования,ОбъектАБ);
	ЗначениеВРеквизитФормы(ОбъектАБ,"ОбъектАналитическогоБланка");
	
КонецПроцедуры	

&НаСервере
Процедура УдалитьОбластиПоказателей(МассивОбрабатываемыхИмен)
	
		
	Для Каждого Обл Из МассивОбрабатываемыхИмен Цикл
		
		ОбластьРасшифровка = ПолетабличногоДокументаМакет.Область(Обл).Расшифровка;
		СохраненнаяГруппаОтборов =  ОбластьРасшифровка.УидГруппыОтборов;		
		
		//Проверяем - нет ли пустой группы УИД 
		ПоказателиГруппы = Объект.КэшИменОбластейПоказателей.НайтиСтроки(Новый Структура("УидГруппыОтборов,ИмяОбласти",СохраненнаяГруппаОтборов,Обл));				
		Объект.КэшИменОбластейПоказателей.Удалить(ПоказателиГруппы[0]);

		//Удаляем пустую группу из кэша групп
		ПоказателиГруппы = Объект.КэшИменОбластейПоказателей.НайтиСтроки(Новый Структура("УидГруппыОтборов",СохраненнаяГруппаОтборов));
		Если ПоказателиГруппы.Количество() = 0 Тогда
			
			МассивУдаляемых = Новый Массив;
			
			УдаляемаяГруппа = Объект.КэшГруппОтборовПоказателей.НайтиСтроки(Новый Структура("УидГруппыОтборов",СохраненнаяГруппаОтборов));
			Для Каждого УдСтр Из УдаляемаяГруппа Цикл
				МассивУдаляемых.Добавить(УдСтр);
			КонецЦикла;	 				 
			
			Для Каждого мУдаляемыйЭлемент Из МассивУдаляемых Цикл
				Объект.КэшГруппОтборовПоказателей.Удалить(мУдаляемыйЭлемент);
			КонецЦикла;	
						
			МассивУдаляемых = Новый Массив;
			
			УдаляемаяГруппа = Объект.РасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УидГруппыОтборов",СохраненнаяГруппаОтборов));
			Для Каждого УдСтр Из УдаляемаяГруппа Цикл
				МассивУдаляемых.Добавить(УдСтр);
			КонецЦикла;	 
			Для Каждого мУдаляемыйЭлемент Из МассивУдаляемых Цикл
				Объект.РасшифровкаГруппОтборов.Удалить(мУдаляемыйЭлемент);
			КонецЦикла;	
				
		КонецЕсли;						
		
		ПолетабличногоДокументаМакет.Область(Обл).Текст = ""; 
		ПолетабличногоДокументаМакет.Область(Обл).Защита = Ложь;
		ПолетабличногоДокументаМакет.Область(Обл).Расшифровка = Неопределено;
		ПолетабличногоДокументаМакет.Область(Обл).Имя = "";
		
		
	КонецЦикла;  
	
КонецПроцедуры	

&НаСервере
Процедура ОчиститьКэшТекущейОбласти(ТекИмяОбласти)
	
	ОбъектАБ = РеквизитФормыВЗначение("ОбъектАналитическогоБланка");
	НайденнаяСтрокаКэша = ОбъектАБ.КэшРаскрываемыхОбластей.НайтиСтроки(Новый Структура("ИмяОбласти",ТекИмяОбласти));
		
	Если  НайденнаяСтрокаКэша.Количество() = 1 Тогда			
		Нстр = НайденнаяСтрокаКэша[0];		
		УдаляемыеОтборы = Новый Массив();
		СтрокиОтборов = ОбъектАБ.НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов",Нстр.УидГруппыОтборов));
		Для Каждого Стр Из СтрокиОтборов Цикл
			УдаляемыеОтборы.Добавить(Стр);
		КонецЦикла;	
		
		Для Каждого Стр Из УдаляемыеОтборы Цикл
			ОбъектАБ.НастройкиРаскрываемыхОбластей.Удалить(Стр);
		КонецЦикла;	
		ОбъектАБ.КэшРаскрываемыхОбластей.Удалить(Нстр);
		ЗначениеВРеквизитФормы(ОбъектАБ,"ОбъектАналитическогоБланка");		
	КонецЕсли;	  
		
КонецПроцедуры	

&НаСервере
Процедура ОбновитьКэшОтборов(АдресРезультатаРедактирования,МассивОбрабатываемыхИмен,ОбъектАБ= Неопределено)
	
	Если ОбъектАБ= Неопределено Тогда
		ОбъектАБ_ = РеквизитФормыВЗначение("ОбъектАналитическогоБланка");		
		АналитическийБланкГенерацияМакетаУХСервер.ОбновитьКэшОтборов(ПолеТабличногоДокументаМакет,АдресРезультатаРедактирования,МассивОбрабатываемыхИмен,ОбъектАБ_);
		ЗначениеВРеквизитФормы(ОбъектАБ_,"ОбъектАналитическогоБланка");		
	Иначе
		АналитическийБланкГенерацияМакетаУХСервер.ОбновитьКэшОтборов(ПолеТабличногоДокументаМакет,АдресРезультатаРедактирования,МассивОбрабатываемыхИмен,ОбъектАБ);
	КонецЕсли;
		
КонецПроцедуры	

&НаСервере
Процедура ОбновитьКэшОтборовФормул(АдресРезультатаРедактирования,МассивОбрабатываемыхИменФормул)
	
	тРасшифровкаФормулОбластейПоказателей 	= ПолучитьИзВременногоХранилища(РасшифровкаФормулОбластейПоказателейАдрес);
	РасшифровкаГруппОтборов					= ПолучитьИзВременногоХранилища(АдресРезультатаРедактирования.ОтборыГруппы);
	
	
	Для Каждого СтрФормула Из МассивОбрабатываемыхИменФормул Цикл
		
		ТекПоказательОбласть = ПолеТабличногоДокументаМакет.Область(СтрФормула);
		ОперандыФормулы = ЗначениеИзСтрокиВнутр(ТекПоказательОбласть.Расшифровка.РасшифровкаФормулы);
		ТекстФормулы = "";
		ИмяТекущейОбластиРедактированияФормулы  = СтрФормула;
		
		Для Каждого СтрОперанд Из ОперандыФормулы Цикл
			
			ТзОперандов  	= Новый ТаблицаЗначений;
			
			ТзОперандов.Колонки.Добавить("ТекстОбласти");
			ТзОперандов.Колонки.Добавить("ТипОбласти");
			ТзОперандов.Колонки.Добавить("ВидОтчета");
			ТзОперандов.Колонки.Добавить("Показатель");
			ТзОперандов.Колонки.Добавить("ОписаниеОшибки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
			
			нСтр         	= ТзОперандов.Добавить();
			нСтр.Показатель = СтрОперанд.Показатель;
			нСтр.ТипОбласти = "Параметр";
			нСтр.ТекстОбласти = СтрОперанд.ИмяВФормуле;	
			
			ТекстФормулы_= ТекПоказательОбласть.Расшифровка.ТекстФормулы;
			
			КолонкаНач = СтрНайти(ТекПоказательОбласть.Расшифровка.ТекстФормулы,СтрОперанд.ИмяВФормуле)-1;
			КолонкаКон = КолонкаНач+СтрДлина(СтрОперанд.ИмяВФормуле)+1;
			
			ОбновитьКэшОтборовОперандовВгруппе(СтрОперанд.Имявформуле,КолонкаНач,КолонкаКон,ТекПоказательОбласть.Расшифровка.ТекстФормулы,ТзОперандов,тРасшифровкаФормулОбластейПоказателей,РасшифровкаГруппОтборов);
			
		КонецЦикла;	
		
		ТекПоказательОбласть.Текст = ТекПоказательОбласть.Расшифровка.ТекстФормулы;
		ТекстФормулы.УстановитьТекст(ТекПоказательОбласть.Расшифровка.ТекстФормулы);
		
		ФлОшибки = Ложь;
		СтруктураПараметровФормулы = ПолучитьОперандыФормулы(ФлОшибки);		
		ЗаписатьФормулу(СтруктураПараметровФормулы);
			
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьКэшОтборовОперандов(АдресРезультатаРедактирования,ВыделенныйТекст,КолонкаНач,КолонкаКон)
	
	кВыделенныйТекст =  ВыделенныйТекст;
	
	тРасшифровкаФормулОбластейПоказателей = ПолучитьИзВременногоХранилища(РасшифровкаФормулОбластейПоказателейАдрес);

	
	Если ЗначениеЗаполнено(ВыделенныйТекст) Тогда
		ГрупповойРежим 		= Ложь;
		ФлОшибки            = Ложь;
		ТзОперандов 		= ОбработатьСтрокуФормулы(ВыделенныйТекст,ФлОшибки);	
		МассивОбрабатываемыхИмен = ТзОперандов.ВыгрузитьКолонку("ТекстОбласти");
	Иначе	
		Возврат;
	КонецЕсли;	
		
	ЭталонныйТекст 			= ТекстФормулы.ПолучитьТекст();
	КэталонныйТекст         = ЭталонныйТекст;
	ТзВсехОперандов         = ОбработатьСтрокуФормулы(КэталонныйТекст,ФлОшибки);
	
	текОперанд 				= ТзОперандов[0].Показатель;
	РасшифровкаГруппОтборов	= ПолучитьИзВременногоХранилища(АдресРезультатаРедактирования.ОтборыГруппы);
	
	СтруктураОтборовТекущегоОперанда  = Новый Структура;
	
	Для Каждого СтрОтбора Из РасшифровкаГруппОтборов Цикл
		Если  НЕ (АналитическийБланкГенерацияМакетаУХСервер.ПроверитьЭтоСтандартныйОтбор(СтрОтбора)) И СтрОтбора.Использовать  Тогда 
			АналитическийБланкГенерацияМакетаУХСервер.СформироватьСтрокуОтбора(СтруктураОтборовТекущегоОперанда,СтрОтбора);
			СтрОтбора.ЗначениеОтбора = Строка(СтрОтбора.ЗначениеОтбора);
		КонецЕсли;
	КонецЦикла;	
	
	УидГруппыОтборов = ПолучитьУидТекущегоОперанда(РасшифровкаГруппОтборов,МассивОбрабатываемыхИмен[0],текОперанд);
	
	тОперанд = тРасшифровкаФормулОбластейПоказателей.НайтиСтроки(Новый Структура("Показатель,УидГруппыОтборов",текОперанд,УидГруппыОтборов));
	
	Расшифровка = Новый Структура;
	Расшифровка.Вставить("Ссылка",текОперанд);
	Расшифровка.Вставить("РасшифровкаГруппОтборов",СтруктураОтборовТекущегоОперанда);

	
	Если тОперанд.Количество() = 0  Тогда
		нИмяОперанда = ДобавитьОперандДинамическойФормулы(Расшифровка,УидГруппыОтборов);
	Иначе
		нИмяОперанда = тОперанд[0].ИмяВФормуле;
	КонецЕсли;	
		
	ТекстДоВыделения 		= Лев(ЭталонныйТекст,КолонкаНач-1);
	ТекстПослеВыделения 	= Прав(ЭталонныйТекст,СтрДлина(ЭталонныйТекст)-КолонкаКон);
	НовыйТекст =              ТекстДоВыделения+"["+нИмяОперанда+"]"+ТекстПослеВыделения;
	ТекстФормулы.УстановитьТекст(НовыйТекст);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКэшОтборовОперандовВгруппе(ВыделенныйТекст,КолонкаНач,КолонкаКон,ТекстФормулы_,ТзОперандов,тРасшифровкаФормулОбластейПоказателей,РасшифровкаГруппОтборов)
	
	кВыделенныйТекст =  ВыделенныйТекст;
	
	МассивОбрабатываемыхИмен = ТзОперандов.ВыгрузитьКолонку("ТекстОбласти");
			
	ЭталонныйТекст 			= ТекстФормулы_;	
	текОперанд 				= ТзОперандов[0].Показатель;
		
	СтруктураОтборовТекущегоОперанда  = Новый Структура;
	
	Для Каждого СтрОтбора Из РасшифровкаГруппОтборов Цикл
		Если  НЕ (АналитическийБланкГенерацияМакетаУХСервер.ПроверитьЭтоСтандартныйОтбор(СтрОтбора)) И СтрОтбора.Использовать  Тогда 
			АналитическийБланкГенерацияМакетаУХСервер.СформироватьСтрокуОтбора(СтруктураОтборовТекущегоОперанда,СтрОтбора);
			СтрОтбора.ЗначениеОтбора = Строка(СтрОтбора.ЗначениеОтбора);
		КонецЕсли;
	КонецЦикла;	
	
	УидГруппыОтборов = ПолучитьУидТекущегоОперанда(РасшифровкаГруппОтборов,МассивОбрабатываемыхИмен[0],текОперанд);
	
	тОперанд = тРасшифровкаФормулОбластейПоказателей.НайтиСтроки(Новый Структура("Показатель,УидГруппыОтборов",текОперанд,УидГруппыОтборов));
	
	Расшифровка = Новый Структура;
	Расшифровка.Вставить("Ссылка",текОперанд);
	Расшифровка.Вставить("РасшифровкаГруппОтборов",СтруктураОтборовТекущегоОперанда);

	
	Если тОперанд.Количество() = 0  Тогда
		нИмяОперанда = ДобавитьОперандДинамическойФормулы(Расшифровка,УидГруппыОтборов);
	Иначе
		нИмяОперанда = тОперанд[0].ИмяВФормуле;
	КонецЕсли;	
		
	ТекстДоВыделения 		= Лев(ЭталонныйТекст,КолонкаНач-1);
	ТекстПослеВыделения 	= Прав(ЭталонныйТекст,СтрДлина(ЭталонныйТекст)-КолонкаКон);
	НовыйТекст				= ТекстДоВыделения+"["+нИмяОперанда+"]"+ТекстПослеВыделения;
	ТекстФормулы_			= НовыйТекст;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьУидТекущегоОперанда(ТЗРасшифровкаОтборовГруппРаскрытия,ИмяОперанда,Показатель)
		
	ТолькоСинтетика = Ложь; 
		
	мПоказатели = Новый Массив;
	мПоказатели.Добавить(Показатель);
	тСвойстваПоказателя 				= АналитическийБланкГенерацияМакетаУХСервер.ПолучитьСвойстваВыбранныхПоказателей(мПоказатели)[0];
		
	ТзУидов                             = ОбъектАналитическогоБланка.КэшГруппОтборовПоказателей.Выгрузить();
	Если  ТзУидов.Количество() = 0 Тогда
		МаксУид  = 0;
	Иначе	
		ТзУидов.Сортировать("УидГруппыОтборовЧисло Убыв");
		МаксУид  = ТзУидов[0].УидГруппыОтборовЧисло;
	КонецЕсли;
	
	ОбъектАБ = РеквизитФормыВЗначение("ОбъектАналитическогоБланка");
	
	ТекУИД = АналитическийБланкГенерацияМакетаУХСервер.ДобавитьПоказательВГруппировки(ПолеТабличногоДокументаМакет,тСвойстваПоказателя,ТЗРасшифровкаОтборовГруппРаскрытия,ИмяТекущейОбластиРедактированияФормулы,ОбъектАБ,ТолькоСинтетика,МаксУид);	            
	
	Возврат ТекУИД; 
	
КонецФункции	
	

#Область МастерГенерацииМакетовРаскрытий

&НаКлиенте
Процедура ОткрытьПомощникГенерацииМакетаРаскрытия(Команда)
			
	Если Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки 
		ИЛИ Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда 	
		
		Если ПроверитьНаличиеМакетовРаскрытий(Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.имя) Тогда
			ПоказатьПредупреждение(, Нстр("ru = 'В выделенной области не должно быть макетов раскрытий'"));
			Возврат;
		КонецЕсли;	
		
		СтруктураПараметров = ПодготовитьПараметрыДляМастераРаскрытия(Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.имя);	
		Оповещение = Новый ОписаниеОповещения("ФормаМастераНовойОбластиЗавершение", ЭтаФорма);
		ОткрытьФорму("Обработка.АналитическийБланк.Форма.ФормаМастераМакетаРаскрытия",СтруктураПараметров,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	Иначе	
		
		ПоказатьПредупреждение(,Нстр("ru = 'Области аналитического раскрытия бывают двух видов: с раскрытием по строкам и по колонкам. 
		|Для создания области нужного вида выделите в бланке соответственно строку или колонку. 
		|Строка или колонка должна быть выделена целиком и содержать ячейки-показатели'"));
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаМастераНовойОбластиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
				
	СтруктураОдинаковыхИмен = Новый Структура;
	СформироватьМакетыРаскрытия(Результат,ПолеТабличногоДокументаМакет.ТекущаяОбласть.Верх,ПолеТабличногоДокументаМакет.ТекущаяОбласть.Лево,СтруктураОдинаковыхИмен);
	
КонецПроцедуры

Процедура СформироватьМакетыРаскрытия(Результат,Верх,Лево,СтруктураОдинаковыхИмен,ПроверятьНаличиеСлужебныхОбластей = Истина,КартинкаМакета = Неопределено,РежимГенерацииМакета = Ложь)
	
	Если ПроверятьНаличиеСлужебныхОбластей Тогда
		ПроверитьНаличиеСлужебныхОбластей();
	КонецЕсли;
	
	АналитическийБланкГенерацияМакетаУХСервер.СформироватьМакетыРаскрытия(ПолеТабличногоДокументаМакет,Результат,Верх,Лево,СтруктураОдинаковыхИмен,КартинкаМакета,РежимГенерацииМакета);

КонецПроцедуры	

Функция ПроверитьНаличиеМакетовРаскрытий(ТекущаяОбластьИмя)
		
	ОбрабатываваемыйДокумент = ПолеТабличногоДокументаМакет.ПолучитьОбласть(ТекущаяОбластьИмя);
	Для Каждого Обл Из ОбрабатываваемыйДокумент.Области Цикл	
		Если Обл.Лево = 0 ИЛИ Обл.Верх = 0 Тогда	
			ФлИменованыхОбластей = Истина;	
			Возврат Истина;
		КонецЕсли;		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции

Функция ПодготовитьПараметрыДляМастераРаскрытия(ТекущаяОбластьИмя)
	
	ОбластьЯчеек = ПолеТабличногоДокументаМакет.Область(ТекущаяОбластьИмя);
	Если ОбластьЯчеек.Лево = 0 Тогда
		ТипОбласти = "Строки";
	Иначе	
		ТипОбласти = "Колонки";
	КонецЕсли;	
	
	ОбрабатываваемыйДокумент = ПолеТабличногоДокументаМакет.ПолучитьОбласть(ТекущаяОбластьИмя);
	
	ТЗРасшифровкаОтборов = ОбъектАналитическогоБланка.НастройкиРаскрываемыхОбластей.Выгрузить();
	ТЗРасшифровкаОтборов.Очистить();
   
	ТзДоступныхАналитик  = АналитическийБланкГенерацияМакетаУХСервер.СформироватьДоступныеАналитикиРаскрытия(ПолеТабличногоДокументаМакет,ОбластьЯчеек,ТЗРасшифровкаОтборов,ТипОбласти,ОбъектАналитическогоБланка);

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТипОбласти",				ТипОбласти);
	СтруктураПараметров.Вставить("ТабДокОбластиАдрес",		ПоместитьВовременноеХранилище(ОбрабатываваемыйДокумент,	Новый УникальныйИдентификатор()));
	СтруктураПараметров.Вставить("ТзДоступныхАналитикАдрес",ЗначениеВСтрокуВнутр(ТзДоступныхАналитик));
	
	Возврат СтруктураПараметров;
	
КонецФункции	

#КонецОбласти


&НаКлиенте
Процедура ВидОтчетаПриИзменении(Элемент)
	
	УстановитьПараметрВидОтчета();
	
КонецПроцедуры


#Область РаботаСДинамическимиВыражениями

&НаКлиенте
Процедура ИзменитьОтборОперанда(Команда)
	
	ВыделенныйТекст  	= СокрЛП(Элементы.ТекстФормулы.ВыделенныйТекст); 
	
	Если НЕ ЗначениеЗаполнено(ВыделенныйТекст) Тогда
		СтрокаНач=0;
		СтрокаКон=0;
		КолонкаНач=0;
		КолонкаКон=0;
		
		Элементы.ТекстФормулы.ПолучитьГраницыВыделения(СтрокаНач,
		КолонкаНач,
		СтрокаКон,
		КолонкаКон);
		
		ИсходныйТекстФормулы = (ТекстФормулы.ПолучитьТекст());	
		
		Если КолонкаНач> СтрДлина(ИсходныйТекстФормулы) Тогда
			 Возврат;
		КонецЕсли;	
		
		ПозицияПравойСкобки  = СтрНайти(ИсходныйТекстФормулы,"]",,КолонкаКон,1);
		ПозицияЛевойСкобки   = СтрНайти(ИсходныйТекстФормулы,"[",НаправлениеПоиска.СКонца,КолонкаНач,1);
		
		тПозицияПравойСкобки  = СтрНайти(ИсходныйТекстФормулы,"[",,КолонкаКон,1);
		тПозицияЛевойСкобки   = СтрНайти(ИсходныйТекстФормулы,"]",НаправлениеПоиска.СКонца,КолонкаНач,1);

		Если ПозицияЛевойСкобки>КолонкаНач ИЛИ ПозицияПравойСкобки<КолонкаКон Тогда
			 Возврат;
		КонецЕсли;	

		Если ПозицияПравойСкобки>0 И ПозицияЛевойСкобки>0 Тогда
			 ВыделенныйТекст = Сред(ИсходныйТекстФормулы,ПозицияЛевойСкобки,ПозицияПравойСкобки - ПозицияЛевойСкобки+1);
		КонецЕсли;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыделенныйТекст) Тогда
		ГрупповойРежим 		= Ложь;
		СтруктураПараметров = ПолучитьРасшифровкуОперандовТаблицуФормулы(ВыделенныйТекст,ГрупповойРежим);		
	КонецЕсли;	
	
	Если СтруктураПараметров = Неопределено Тогда
		 Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("Бланк,ГрупповойРежим,ТзРасшифровкаОтборовАдрес,ТЗРасшифровкаОтборовГруппРаскрытия,ОтображатьСуммуВДопВалюте"
	,Бланк
	,ГрупповойРежим
	,СтруктураПараметров.ТзРасшифровкаОтборов
	,СтруктураПараметров.ТЗРасшифровкаОтборовГруппРаскрытия
	,СтруктураПараметров.ОтображатьСуммуВДопВалюте);	   	
	
	Оповещение = Новый ОписаниеОповещения("ФормаРедактированияОтборовОперандаЗавершение", ЭтаФорма);

	ОткрытьФорму("Обработка.АналитическийБланк.Форма.ФормаРедактированияОтборов", ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры
  
&НаСервере
Функция ПолучитьРасшифровкуОперандовТаблицуФормулы(ВыделенныйТекст,ГрупповойРежим)
	 
	тРасшифровкаФормулОбластейПоказателей = ПолучитьИзВременногоХранилища(РасшифровкаФормулОбластейПоказателейАдрес);
			
	ФлОшибки            = Ложь;
	ТзОперандов 		= ОбработатьСтрокуФормулы(ВыделенныйТекст,ФлОшибки);
	Если ФлОшибки ИЛИ ТзОперандов.Количество()<>1  Тогда
		 Возврат Неопределено;
	КонецЕсли;	

	ГрупповойРежим = Ложь;	
 
	СтруктураПоказателей = Новый Структура;
	
	ТекОперанд = тРасшифровкаФормулОбластейПоказателей.НайтиСтроки(Новый Структура("ИмяВФормуле",ТзОперандов[0].ТекстОбласти));
	Если ТекОперанд.Количество()>0 Тогда	
		СтруктураПоказателей.Вставить("С_"+ТекОперанд[0].УидГруппыОтборов,ИмяТекущейОбластиРедактированияФормулы);
	Иначе		
		ФлОшибки  = Ложь;
		
		СтрокаШаблона = Нстр("ru = 'Операнд %1 не найден.'");
		Если ЗначениеЗаполнено(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ТзОперандов[0].ТекстОбласти));
		КонецЕсли;
	
		Возврат Неопределено;
	КонецЕсли;	
		
	СтруктураДопПараметров = Новый Структура;
	СтруктураДопПараметров.Вставить("Показатель"					,ТекОперанд[0].Показатель);
	СтруктураДопПараметров.Вставить("ИмяВФормуле"					,ТекОперанд[0].ИмяВФормуле);
	СтруктураДопПараметров.Вставить("ТекущиеОтборыОперандовАдрес"	,глТекущиеОтборыОперандовАдрес);

	
	Возврат ПодготовитьТаблицуОтборовПоказателей(СтруктураПоказателей,СтруктураДопПараметров);
		
КонецФункции

Функция ПолучитьОперандыФормулы(ФлОшибки)
	
	ИсходнаяСтрока      = ТекстФормулы.ПолучитьТекст();
	ФлОшибки            = Ложь;
	ТзОперандов 		= ОбработатьСтрокуФормулы(ИсходнаяСтрока,ФлОшибки);	
	ТзОперандовДляТеста = ТзОперандов.Скопировать();
	
	ИсходнаяСтрока      = ТекстФормулы.ПолучитьТекст();

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("АдресТзОперандов",ПоместитьВоВременноеХранилище(ТзОперандов,ЭтаФорма.УникальныйИдентификатор));
	
	тРасшифровкаФормулОбластейПоказателей = ПолучитьИзВременногоХранилища(РасшифровкаФормулОбластейПоказателейАдрес);
	
	//Проверка операндов
	Для Каждого СтрОперанд Из ТзОперандов Цикл	
		Если СтрОперанд.ТипОбласти = "Параметр" Тогда	
			ТекСтрокаРасшифровки = тРасшифровкаФормулОбластейПоказателей.НайтиСтроки(Новый Структура("ИмяВФормуле",стрОперанд.ТекстОбласти));
			Если ТекСтрокаРасшифровки.Количество() = 0 Тогда
				
				СтрокаШаблона = Нстр("ru = 'Операнд %1 не найден.'");
				Если ЗначениеЗаполнено(СтрокаШаблона) тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ТзОперандов[0].ТекстОбласти));
				КонецЕсли;
				
				ФлОшибки = Истина;
				Возврат СтруктураОтвета;	
			КонецЕсли;	
			ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока,"["+СтрОперанд.ТекстОбласти+"]",1);		
		КонецЕсли;			
	КонецЦикла;	
	
	//Проверка выражения	
	Если ЗначениеЗаполнено(ИсходнаяСтрока) Тогда
		Попытка
			Результат = Вычислить(ИсходнаяСтрока);
		Исключение	
			ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Ошибочное выражение '") + ОписаниеОшибки());
			ФлОшибки = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции 

&НаСервере
Функция ОбработатьСтрокуФормулы(ИсходнаяСтрока,ФлОшибки)
	
	ТзВозврата = Новый ТаблицаЗначений;
	ТзВозврата.Колонки.Добавить("ТекстОбласти");
	ТзВозврата.Колонки.Добавить("ТипОбласти");
	ТзВозврата.Колонки.Добавить("ВидОтчета");
    ТзВозврата.Колонки.Добавить("Показатель");
	ТзВозврата.Колонки.Добавить("ОписаниеОшибки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
	
	Пока СтрНайти(ИсходнаяСтрока,"[")>0 Цикл		
		ПозицияНачалаПараметра 			= СтрНайти(ИсходнаяСтрока,"["); 
		ПозицияОкончанияПараметра       = СтрНайти(ИсходнаяСтрока,"]"); 
		ТекстДоПараметра                = Лев(ИсходнаяСтрока,ПозицияНачалаПараметра-1);
		Параметр 						= Сред(ИсходнаяСтрока,ПозицияНачалаПараметра+1,ПозицияОкончанияПараметра-ПозицияНачалаПараметра-1);
		
		//Ошибка закрывающей скобки операнда
		Если ПозицияНачалаПараметра>0 И ПозицияОкончанияПараметра=0 Тогда
			ФлОшибки = Истина;
			Параметр 						= Сред(ИсходнаяСтрока,ПозицияНачалаПараметра+1,СтрДлина(ИсходнаяСтрока)-ПозицияНачалаПараметра-1);
			нСтрока = ТзВозврата.Добавить();
			нСтрока.ТекстОбласти = Параметр;
			нСтрока.ТипОбласти = "Параметр";
			нСтрока.ОписаниеОшибки = Нстр("ru = 'Отсутствует закрывающая скобка операнда'");
			Возврат ТзВозврата;	
		КонецЕсли;	
				
		//Ошибка открывающей скобки операнда
		Если ПозицияНачалаПараметра=0 И ПозицияОкончанияПараметра>0 Тогда
			ФлОшибки = Истина;
			Параметр 						= Сред(ИсходнаяСтрока,1,ПозицияОкончанияПараметра);
			нСтрока = ТзВозврата.Добавить();
			нСтрока.ТекстОбласти = Параметр;
			нСтрока.ТипОбласти = "Параметр";
			нСтрока.ОписаниеОшибки = Нстр("ru = 'Отсутствует открывающая скобка операнда'");
			Возврат ТзВозврата;	
		КонецЕсли;	
		
		нСтрока = ТзВозврата.Добавить();
		нСтрока.ТекстОбласти = Параметр;
        нСтрока.ТипОбласти = "Параметр";
		
		ПараметрТочка 	= СтрНайти(Параметр,".");
		
		ПараметрДоТочки 		= ?(ПараметрТочка=0,Параметр,Лев(Параметр,ПараметрТочка-1));
		ПараметрПослеТочки      = ?(ПараметрТочка=0,Параметр,Прав(Параметр,СтрДлина(Параметр)-ПараметрТочка));
		СимволПрефиксаОперанда  = СтрНайти(ПараметрПослеТочки,"#");
		ПараметрПослеТочки      = ?(СимволПрефиксаОперанда>0,Лев(ПараметрПослеТочки,СимволПрефиксаОперанда-1),ПараметрПослеТочки);
		
		ВидОтчета = Справочники.ВидыОтчетов.НайтиПоКоду(ПараметрДоТочки);
		Если  ВидОтчета = Справочники.ВидыОтчетов.ПустаяСсылка() Тогда
			ФлОшибки = Истина;
			
			СтрокаШаблона = Нстр("ru = 'Не удалось получить вид отчета по коду %1'");
			
			нСтрока.ОписаниеОшибки = "";
			Если Не ПустаяСтрока(СтрокаШаблона) тогда								
				нСтрока.ОписаниеОшибки = СтрШаблон(СтрокаШаблона, ПараметрДоТочки);
			КонецЕсли;
		
			Возврат ТзВозврата;	
        Иначе
			нСтрока.ВидОтчета = ВидОтчета;
		КонецЕсли;	
							
		Показатель = Справочники.ПоказателиОтчетов.НайтиПоКоду(ПараметрПослеТочки,,,ВидОтчета);
		Если  Показатель = Справочники.ПоказателиОтчетов.ПустаяСсылка() Тогда
			ФлОшибки = Истина;
			
			СтрокаШаблона = Нстр("ru = 'Не удалось получить показатель отчета по коду %1'");
			
			нСтрока.ОписаниеОшибки = "";
			Если Не ПустаяСтрока(СтрокаШаблона) тогда								
				нСтрока.ОписаниеОшибки = СтрШаблон(СтрокаШаблона, ПараметрПослеТочки);
			КонецЕсли;
			
			Возврат ТзВозврата;	
        Иначе
			нСтрока.Показатель = Показатель;
		КонецЕсли;	

		ИсходнаяСтрока =  Прав(ИсходнаяСтрока,СтрДлина(ИсходнаяСтрока)-ПозицияОкончанияПараметра);	
				
	КонецЦикла;	
			
	Возврат ТзВозврата;
	
КонецФункции	

&НаСервере
Процедура ЗаписатьФормулу(СтруктураПараметровФормулы)
	
	ТекущаяОбласть 					= ПолеТабличногоДокументаМакет.Область(ИмяТекущейОбластиРедактированияФормулы);
	тТекстФормулы 					= ТекстФормулы.ПолучитьТекст();
	ТекущиеОтборыОперандов 		    = ПолучитьИзВременногоХранилища(глТекущиеОтборыОперандовАдрес);
	
	//Если очистили формулу - то сбросим свойства у области
	Если СокрЛП(тТекстФормулы) = "" Тогда
		ТекущаяОбласть.Расшифровка 		= Неопределено;
		ТекущаяОбласть.Текст			= "";
		ТекущаяОбласть.Имя				= Неопределено;
		ИмяТекущейОбластиРедактированияФормулы = ТекущаяОбласть.Имя;
		Возврат;
	КонецЕсли;	
	
    //Пишем таблицу операндов формулы 
	ТаблицаОперандов 				= ПолучитьИзВременногоХранилища(СтруктураПараметровФормулы.АдресТзОперандов);
		
	ТекстФормулыДляАнализа = СокрЛП(тТекстФормулы);
	ПозицияПервойСкобки    = СтрНайти(ТекстФормулыДляАнализа,"[");
	ПозицияПоследнейСкобки = СтрНайти(ТекстФормулыДляАнализа,"]");
		
	тРасшифровкаФормулОбластейПоказателей = ПолучитьИзВременногоХранилища(РасшифровкаФормулОбластейПоказателейАдрес);	
	тРасшифровка = тРасшифровкаФормулОбластейПоказателей.СкопироватьКолонки("Показатель,ИмяВФормуле,ИндексПоказателя");	
	
	ТекРасшифровкаОтборовФормулы = ТекущиеОтборыОперандов.СкопироватьКолонки();
	
	Для Каждого стрОперанд Из ТаблицаОперандов Цикл		
		ТекСтрокаРасшифровки = тРасшифровкаФормулОбластейПоказателей.НайтиСтроки(Новый Структура("ИмяВФормуле",стрОперанд.ТекстОбласти));
		Если ТекСтрокаРасшифровки.Количество() > 0 Тогда
			нРасшифровка = тРасшифровка.Добавить();
			ЗаполнитьЗначенияСвойств(нРасшифровка,ТекСтрокаРасшифровки[0]);
		КонецЕсли;
		
		тРасшифоровка = ТекущиеОтборыОперандов.НайтиСтроки(Новый Структура("ИмяОперанда",стрОперанд.ТекстОбласти));
		Для Каждого Стр Из тРасшифоровка Цикл
			нРасшифровкаОперанда = ТекРасшифровкаОтборовФормулы.Добавить();
			ЗаполнитьЗначенияСвойств(нРасшифровкаОперанда,Стр);
		КонецЦикла;	
		
	КонецЦикла;	
	
	//Пишем расшифровку показателя	
	Если  ТаблицаОперандов.Количество()>0 Тогда
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ТекстФормулы",		тТекстФормулы);
		СтруктураРасшифровки.Вставить("РасшифровкаФормулы",	ЗначениеВСтрокуВнутр(тРасшифровка));
		ТекущаяОбласть.Расшифровка  = СтруктураРасшифровки;
		ТекущаяОбласть.Текст 		= тТекстФормулы;
		Если СтрНайти(ТекущаяОбласть.Имя,"Формула") = 0 Тогда
			ТекущаяОбласть.Имя = "Формула_"+СтрЗаменить(Новый УникальныйИдентификатор,"-","");	
			ИмяТекущейОбластиРедактированияФормулы = ТекущаяОбласть.Имя;
		КонецЕсли;	
		
		Если ТекРасшифровкаОтборовФормулы.Количество()>0 Тогда
			 СтруктураРасшифровки.Вставить("РасшифровкаГруппОтборовОперандов",ЗначениеВСтрокуВнутр(ТекРасшифровкаОтборовФормулы));
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ТекстФормулыПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры
	
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СохранитьМакетСервер(Отказ);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФормулу(Команда)
		
	РежимРедактированияФормулы = Истина;
	УстановитьРежимРедактированияФормул();
	
	Элементы.ПоказатьПанельПоказателей.Доступность = Истина;
	
	тЦветРамки 			= ПолеТабличногоДокументаМакет.ТекущаяОбласть.ЦветРамки;
	тГраницаСверхуТип      = ПолеТабличногоДокументаМакет.ТекущаяОбласть.ГраницаСверху;
	тГраницаСнизуТип	   = ПолеТабличногоДокументаМакет.ТекущаяОбласть.ГраницаСнизу;
	тГраницаСлеваТип       = ПолеТабличногоДокументаМакет.ТекущаяОбласть.ГраницаСлева;
	тГраницаСправаТип      = ПолеТабличногоДокументаМакет.ТекущаяОбласть.ГраницаСправа;
	
	ИмяТекущейОбластиРедактированияФормулы = ПолеТабличногоДокументаМакет.ТекущаяОбласть.имя;
	ПолеТабличногоДокументаМакет.ТекущаяОбласть.ЦветРамки 		= Новый Цвет(255,0,0);
	ПолеТабличногоДокументаМакет.ТекущаяОбласть.ГраницаСверху 	= Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная, 3);
	ПолеТабличногоДокументаМакет.ТекущаяОбласть.ГраницаСнизу 	= Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная, 3);
	ПолеТабличногоДокументаМакет.ТекущаяОбласть.ГраницаСлева 	= Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная, 3);
	ПолеТабличногоДокументаМакет.ТекущаяОбласть.ГраницаСправа 	= Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная, 3);
	
	Элементы.ГруппаТекстВыражения.Видимость 			= Истина;
	Элементы.РежимыРедактированияФормул.Доступность 	= Ложь;	
	Элементы.ТекущаяФормула.Видимость					 = Ложь;	
	
	ЗаполнитьОперандыФормулы();	
	
	Элементы.ФормаИзменитьОтбор.Доступность			  = Ложь;
	Элементы.ПолеТабличногоДокументаМакет.Защита 	  = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОперандыФормулы()
	
	ТекстФормулы.Очистить();
	
	ЗаполнитьРасшифровкуФормулОбластейПоказателей();
	
	ТекОбласть = ПолеТабличногоДокументаМакет.Область(ИмяТекущейОбластиРедактированияФормулы);
	
	тРасшифровкаОперандовФормулы  = Новый ТаблицаЗначений;
	тРасшифровкаОперандовФормулы.Колонки.Добавить("ИмяОперанда",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(150));
	тРасшифровкаОперандовФормулы.Колонки.Добавить("Ключ",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	тРасшифровкаОперандовФормулы.Колонки.Добавить("Значение");
	
	Если ТекОбласть.Расшифровка = Неопределено Тогда
		ТекстФормулы.УстановитьТекст("");;
	ИначеЕсли ТекОбласть.Расшифровка.Свойство("ТекстФормулы") Тогда	  	  
		ТекстФормулы.УстановитьТекст(ТекОбласть.Расшифровка.ТекстФормулы);
		ТекОперанды 	= ЗначениеИзСтрокиВнутр(ТекОбласть.Расшифровка.РасшифровкаФормулы);	  	
		Если ТекОбласть.Расшифровка.Свойство("РасшифровкаГруппОтборовОперандов") Тогда	
			тРасшифровкаОперандовФормулы       = ЗначениеИзСтрокивнутр(ТекОбласть.Расшифровка.РасшифровкаГруппОтборовОперандов);		
		КонецЕсли;				
	ИначеЕсли ТекОбласть.Расшифровка.Свойство("УидГруппыОтборов") Тогда		  
		ТекстФормулы.УстановитьТекст("");
		
	КонецЕсли;	  
	
	ТекущиеОтборыОперандовАдрес                = ПоместитьВоВременноеХранилище(тРасшифровкаОперандовФормулы,ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти


&НаСервере
Процедура ИнициализироватьПоляПараметровСкд()
	
	МакетСкд = ПолучитьОбщийМакет("МакетНастройкиОтборов");	
	МакетСкд.НаборыДанных[0].Поля.Очистить();
	КомпоновщикНастроек.Настройки.Порядок.Элементы.Очистить();
			
	АналитическийБланкУХСервер.ДобавитьОписаниеПоляСКД("ПериодОтчетаНачало", Нстр("ru = 'Период начала отчета'"), "СправочникСсылка.Периоды",МакетСкд);
    АналитическийБланкУХСервер.ДобавитьОписаниеПоляСКД("ПериодОтчетаОкончание", Нстр("ru = 'Период окончания отчета'"), "СправочникСсылка.Периоды",МакетСкд);
	АналитическийБланкУХСервер.ДобавитьОписаниеПоляСКД("Валюта", Нстр("ru = 'Валюта представления'"), "СправочникСсылка.Валюты",МакетСкд);
	АналитическийБланкУХСервер.ДобавитьОписаниеПоляСКД("Проект", Нстр("ru = 'Проект'"), "СправочникСсылка.Проекты",МакетСкд);
	АналитическийБланкУХСервер.ДобавитьОписаниеПоляСКД("Организация", Нстр("ru = 'Организация'"), "СправочникСсылка.Организации",МакетСкд);
	АналитическийБланкУХСервер.ДобавитьОписаниеПоляСКД("Сценарий", Нстр("ru = 'Сценарий'"), "СправочникСсылка.Сценарии",МакетСкд);
	АналитическийБланкУХСервер.ДобавитьОписаниеПоляСКД("ЕдиницаИзмерения", Нстр("ru = 'Единица измерения'"), "ПеречислениеСсылка.ПорядкиОкругленияОтчетности",МакетСкд);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(МакетСКД, УникальныйИдентификатор)));
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьРежимОтладки(Команда)
	
	Элементы.ФормаУстановитьРежимОтладки.Пометка = НЕ Элементы.ФормаУстановитьРежимОтладки.Пометка;
	РежимОтладки                                = Элементы.ФормаУстановитьРежимОтладки.Пометка;
	Элементы.ГруппаОтладкаГруппыПоказателей.Видимость  =  РежимОтладки;
	Элементы.ГруппаСтатусыОтладки.Видимость 		   =  РежимОтладки;
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваОбласти(Команда)
		
	СтруктураПараметров = ПодготовитьПараметрыОбластиРаскрытия(Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.имя);
	
	ПараметрыФормы = Новый Структура("Бланк,ТзПараметрыАдрес,ТзРашифровкаОтборовАдрес,ТзДоступныеАналитикиАдрес,ТзВложенныхОбластейАдрес,ТабДокОбластиАдрес"
	,Бланк
	,СтруктураПараметров.ТзПараметрыАдрес
	,СтруктураПараметров.ТзРашифровкаОтборовАдрес
	,СтруктураПараметров.ТзДоступныеАналитикиАдрес
	,СтруктураПараметров.ТзВложенныхОбластей
	,СтруктураПараметров.ТабДокОбластиАдрес
	);	   	
	
	Оповещение = Новый ОписаниеОповещения("ФормаИзмененияСвойствОбластиЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Обработка.АналитическийБланк.Форма.ФормаНастроекМакетаРаскрытия", ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвойстваОбластиРаскрытия(ИмяОбласти,ДопПараметры)
		
	СтруктураАналитик = ПолучитьИзВременногоХранилища(ДопПараметры.СтруктураАналитикАдрес);
	ПараметрыОтбора   = ПолучитьИзВременногоХранилища(ДопПараметры.ПараметрыОтбораАдрес);
    Сортировки		  = ПолучитьИзВременногоХранилища(ДопПараметры.СортировкиАдрес);
	МакетГруппировок  = ПолучитьИзВременногоХранилища(ДопПараметры.МакетГруппировок);
    	
	НовыйМакет 					= Новый ТабличныйДокумент;
	ТекОбластьДляЗамены 		= ПолеТабличногоДокументаМакет.Область(ИмяОбласти);
	ПараметрыИерархииАналитик   = Новый Структура;
	
	Если ТекОбластьДляЗамены.Лево = 0 Тогда  //Строки
		
		Для  Инд = ТекОбластьДляЗамены.Верх По ТекОбластьДляЗамены.Низ Цикл
			
			тОбластьРасшифровка 			=  ПолеТабличногоДокументаМакет.Область(Инд,1,Инд,1).Расшифровка;
			НастройкиАналитикРаскрытия      =  ЗначениеИзСтрокиВнутр(тОбластьРасшифровка.НастройкиАналитикРаскрытия);
			
			Для Каждого стрАналитики Из НастройкиАналитикРаскрытия Цикл	
				Если Сортировки.Свойство(стрАналитики.АналитикаКод) Тогда
					стрАналитики.АналитикаСортировка = Сортировки[стрАналитики.АналитикаКод]
				КонецЕсли;			
			КонецЦикла;
			
			ОтборыАналитикРаскрытия        =   ЗначениеИзСтрокиВнутр(тОбластьРасшифровка.ПараметрыОтбора);
			ОтборыАналитикРаскрытия        =   ПараметрыОтбора.Скопировать();
		
			тОбластьРаскрытия 			= ПолучитьКоординатыОбластиРаскрытияСервер(ПолеТабличногоДокументаМакет.Область(Инд,1,Инд,1).Имя);
			тСтруктура 					= СтруктураАналитик.Строки.НайтиСтроки(Новый Структура("ИмяОбласти",тОбластьРаскрытия),Истина);
						
			Для Каждого СтрСтруктуры Из тСтруктура Цикл
				тНастройкаАналитик =  ЗначениеИзСтрокиВнутр(СтрСтруктуры.СтруктураАналитикСтрока);
				Для Каждого стрАналитики Из НастройкиАналитикРаскрытия Цикл	
					Если тНастройкаАналитик.Свойство(стрАналитики.АналитикаКод) Тогда
						стрАналитики.ИерархииАналитики = тНастройкаАналитик[стрАналитики.АналитикаКод][0].ИерархииАналитики;
					КонецЕсли;			
				КонецЦикла;	
			КонецЦикла;	
			
			
			СтруктураРасшифровки               =   Новый Структура;
			СтруктураРасшифровки.Вставить("НастройкиАналитикРаскрытия",ЗначениеВстрокуВнутр(НастройкиАналитикРаскрытия));
			СтруктураРасшифровки.Вставить("ПараметрыОтбора",ЗначениеВстрокуВнутр(ОтборыАналитикРаскрытия));	
			
			ПолеТабличногоДокументаМакет.Область(Инд,1,Инд,1).Расшифровка  =  СтруктураРасшифровки;
			
			
		КонецЦикла;	
		
		
	Иначе
		Для  Инд = ТекОбластьДляЗамены.Лево По ТекОбластьДляЗамены.Право Цикл
			
			тОбластьРасшифровка 			=  ПолеТабличногоДокументаМакет.Область(1,Инд,1,Инд).Расшифровка;
			НастройкиАналитикРаскрытия      =  ЗначениеИзСтрокиВнутр(тОбластьРасшифровка.НастройкиАналитикРаскрытия);
			Для Каждого стрАналитики Из НастройкиАналитикРаскрытия Цикл	
				Если Сортировки.Свойство(стрАналитики.АналитикаКод) Тогда
					стрАналитики.АналитикаСортировка = Сортировки[стрАналитики.АналитикаКод]
				КонецЕсли;			
			КонецЦикла;
			
			ОтборыАналитикРаскрытия        =   ЗначениеИзСтрокиВнутр(тОбластьРасшифровка.ПараметрыОтбора);
			ОтборыАналитикРаскрытия        =   ПараметрыОтбора.Скопировать();
			
			тОбластьРаскрытия 			= ПолучитьКоординатыОбластиРаскрытияСервер(ПолеТабличногоДокументаМакет.Область(1,Инд,1,Инд).Имя);
			тСтруктура 					= СтруктураАналитик.Строки.НайтиСтроки(Новый Структура("ИмяОбласти",тОбластьРаскрытия),Истина);
						
			Для Каждого СтрСтруктуры Из тСтруктура Цикл
				тНастройкаАналитик =  ЗначениеИзСтрокиВнутр(СтрСтруктуры.СтруктураАналитикСтрока);
				Для Каждого стрАналитики Из НастройкиАналитикРаскрытия Цикл	
					Если тНастройкаАналитик.Свойство(стрАналитики.АналитикаКод) Тогда
						стрАналитики.ИерархииАналитики = тНастройкаАналитик[стрАналитики.АналитикаКод][0].ИерархииАналитики;
					КонецЕсли;			
				КонецЦикла;	
			КонецЦикла;	

			
			
			СтруктураРасшифровки               =   Новый Структура;
			СтруктураРасшифровки.Вставить("НастройкиАналитикРаскрытия",ЗначениеВстрокуВнутр(НастройкиАналитикРаскрытия));
			СтруктураРасшифровки.Вставить("ПараметрыОтбора",ЗначениеВстрокуВнутр(ОтборыАналитикРаскрытия));
			
			ПолеТабличногоДокументаМакет.Область(1,Инд,1,Инд).Расшифровка  =  СтруктураРасшифровки;
				
		КонецЦикла;	
			
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьМакетРаскрытияРекурсивно(ОбъектАБ,СтруктураАналитик,ПараметрыОтбора,тИерархияГруппировок,Сортировки,НовыйМакет)
	
	Для Каждого СтрДерева Из СтруктураАналитик.Строки Цикл
				
		Если СтрДерева.АналитикаПредставление = Нстр("ru = 'Структура аналитик макета'") Тогда
			 ОбновитьМакетРаскрытияРекурсивно(ОбъектАБ,СтрДерева,ПараметрыОтбора,тИерархияГруппировок,Сортировки,НовыйМакет);
			 Продолжить;
		КонецЕсли;	
		
		тОбласть 							= ОбъектАБ.КэшРаскрываемыхОбластей.НайтиСтроки(Новый Структура("ИмяОбласти",СтрДерева.ИмяОбласти))[0];
		тАналитики                          = ЗначениеИзСтрокиВнутр(СтрДерева.СтруктураАналитикСтрока);
		НастройкиАналитикРаскрытия 		= Обработки.АналитическийБланк.ПолучитьОписаниеТаблицыНастроекАналитик();

		ТипОбласти = ?(тОбласть.Лево = 0,"Строки","Колонки");
		
		Для Каждого тАналитика Из тАналитики Цикл
			Если тАналитика.Ключ = "ПериодОтчета" Тогда
				нАналитика = НастройкиАналитикРаскрытия.Добавить();
				нАналитика.АналитикаКод 			= "ПериодОтчета";
				нАналитика.Пометка		 			= Истина;
				нАналитика.АналитикаПредставление 	= "ПериодОтчета";
				нАналитика.АналитикаТипСтрока 		= "СправочникСсылка.Периоды";
				нАналитика.ЭтоАналитикаВерсии 		= Истина;
				нАналитика.АналитикаСортировка 	=	"ПериодОтчета.ДатаНачала";
				нАналитика.ПорядокАналитики     = 	0;		
			Иначе	
				ТекАналитикаПоОтбору = ПараметрыОтбора.НайтиСтроки(Новый Структура("ПолеКод",тАналитика.Ключ))[0];
				нАналитика = НастройкиАналитикРаскрытия.Добавить();
				нАналитика.АналитикаКод 			= ТекАналитикаПоОтбору.ПолеКод;
				нАналитика.Пометка		 			= Истина;
				нАналитика.АналитикаПредставление 	= ТекАналитикаПоОтбору.Поле;
				нАналитика.АналитикаТипСтрока 		= ТекАналитикаПоОтбору.ТипЗначенияСтрока;
				Если нАналитика.АналитикаКод = "ПериодОтчета" ИЛИ  нАналитика.АналитикаКод = "Сценарий" ИЛИ нАналитика.АналитикаКод = "Организация" ИЛИ нАналитика.АналитикаКод = "Проект" Тогда
					нАналитика.ЭтоАналитикаВерсии 		= Истина;
				КонецЕсли;
				ТекАналитикаПоСортировке = Сортировки[ТекАналитикаПоОтбору.ПолеКод];
				нАналитика.АналитикаСортировка 	=ТекАналитикаПоСортировке;
				нАналитика.ПорядокАналитики     = ТекАналитикаПоОтбору.ПорядокОтбора;		
			КонецЕсли;		
		КонецЦикла;
		
		тОбласть.НастройкиАналитикРаскрытия = ЗначениеВСтрокуВнутр(НастройкиАналитикРаскрытия);
		
		Для Каждого тАналитика Из тАналитики Цикл			
			Если тАналитика.Ключ = "ПериодОтчета" Тогда	
				тОбластьРасшифровкаОтборов          = ОбъектАБ.НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов,ПолеКод",тОбласть.УидГруппыОтборов,"ПериодС"));
				Если  тОбластьРасшифровкаОтборов.Количество() = 0 Тогда
					нОтбор = ОбъектАБ.НастройкиРаскрываемыхОбластей.Добавить();
				Иначе	
					нОтбор = тОбластьРасшифровкаОтборов[0];
				КонецЕсли;		
				нОтбор.УидГруппыОтборов  = тОбласть.УидГруппыОтборов;
				тОтбор = ПараметрыОтбора.НайтиСтроки(Новый Структура("ПолеКод","ПериодС"))[0];
				ЗаполнитьЗначенияСвойств(нОтбор,тОтбор);
				
				тОбластьРасшифровкаОтборов          = ОбъектАБ.НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов,ПолеКод",тОбласть.УидГруппыОтборов,"ПериодПо"));
				Если  тОбластьРасшифровкаОтборов.Количество() = 0 Тогда
					нОтбор = ОбъектАБ.НастройкиРаскрываемыхОбластей.Добавить();
				Иначе	
					нОтбор = тОбластьРасшифровкаОтборов[0];
				КонецЕсли;		
				нОтбор.УидГруппыОтборов  = тОбласть.УидГруппыОтборов;
				тОтбор = ПараметрыОтбора.НайтиСтроки(Новый Структура("ПолеКод","ПериодПо"))[0];
				ЗаполнитьЗначенияСвойств(нОтбор,тОтбор);	
			Иначе	
				тОбластьРасшифровкаОтборов          = ОбъектАБ.НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов,ПолеКод",тОбласть.УидГруппыОтборов,тАналитика.Ключ));
				Если  тОбластьРасшифровкаОтборов.Количество() = 0 Тогда
					нОтбор = ОбъектАБ.НастройкиРаскрываемыхОбластей.Добавить();
				Иначе	
					нОтбор = тОбластьРасшифровкаОтборов[0];
				КонецЕсли;		
				нОтбор.УидГруппыОтборов  = тОбласть.УидГруппыОтборов;
				тОтбор = ПараметрыОтбора.НайтиСтроки(Новый Структура("ПолеКод",тАналитика.Ключ))[0];
				ЗаполнитьЗначенияСвойств(нОтбор,тОтбор);
			КонецЕсли;		
		КонецЦикла;	
				
		ОбластьМакета   =  тИерархияГруппировок.НайтиСтроки(Новый Структура("ИмяОбласти",СтрДерева.ИмяОбласти))[0];
		
		Если ТипОбласти = "Строки" Тогда
			МакетТекущейОбласти		 = ПолеТабличногоДокументаМакет.Область(ОбластьМакета.КоординатаНачалаОбласти,0,ОбластьМакета.КоординатаОкончанияОбласти,0);	
			ОбластьПриемник 		 = НовыйМакет.Область(НовыйМакет.ВысотаТаблицы+1,0,НовыйМакет.ВысотаТаблицы+(МакетТекущейОбласти.Низ-МакетТекущейОбласти.Верх)+1,0);
			НовыйМакет.ВставитьОбласть(МакетТекущейОбласти,ОбластьПриемник,ТипСмещенияТабличногоДокумента.ПоВертикали);		
		Иначе
			МакетТекущейОбласти		 = ПолеТабличногоДокументаМакет.Область(0,ОбластьМакета.КоординатаНачалаОбласти,0,ОбластьМакета.КоординатаОкончанияОбласти);
			ОбластьПриемник 		 = НовыйМакет.Область(0,НовыйМакет.ШиринаТаблицы+1,0,НовыйМакет.ШиринаТаблицы+(МакетТекущейОбласти.Право-МакетТекущейОбласти.Лево)+1);
			НовыйМакет.ВставитьОбласть(МакетТекущейОбласти,ОбластьПриемник,ТипСмещенияТабличногоДокумента.ПоГоризонтали);	
		КонецЕсли;	
		
		ОбластьПриемник.Имя = тОбласть.ИмяОбласти;
		
		Если ТипЗнч(СтруктураАналитик)  = Тип("ДеревоЗначений") Тогда
			КопияСтруктуры = СтруктураАналитик.Скопировать();		
		Иначе
			КопияСтруктуры = СтруктураАналитик.Владелец().Скопировать();
		КонецЕсли;
		
		ТекСтрока      = КопияСтруктуры.Строки.НайтиСтроки(Новый Структура("ИмяОбласти",СтрДерева.ИмяОбласти),Истина)[0];
		
		Если ТипОбласти = "Строки" Тогда
			ОбновитьОбластиМакетаСтрок(ТекСтрока.Родитель,НовыйМакет);
		Иначе
			ОбновитьОбластиМакетаКолонок(ТекСтрока.Родитель,НовыйМакет);
		КонецЕсли;
		
		ОбновитьМакетРаскрытияРекурсивно(ОбъектАБ,СтрДерева,ПараметрыОтбора,тИерархияГруппировок,Сортировки,НовыйМакет);
		
	КонецЦикла;	

	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОбластиМакетаСтрок(СтрокаРодитель,МакетРаскрытий)
			
	Если  (НЕ СтрокаРодитель = Неопределено)  И  (ЗначениеЗАполнено(СтрокаРодитель.СтруктураАналитикСтрока)) Тогда			 
		 ОбластьРодитель = МакетРаскрытий.Область(СтрокаРодитель.ИмяОбласти);
		 ОбластьРодитель.Имя = "";
		 НоваяОбластьРодитель = МакетРаскрытий.Область(ОбластьРодитель.Верх,0,МакетРаскрытий.ВысотаТаблицы,0);
		 НоваяОбластьРодитель.Имя = СтрокаРодитель.ИмяОбласти;
		 ОбновитьОбластиМакетаСтрок(СтрокаРодитель.Родитель,МакетРаскрытий);
	КонецЕсли;	
	 	 
КонецПроцедуры

&НаСервере
Процедура ОбновитьОбластиМакетаКолонок(СтрокаРодитель,МакетРаскрытий)
			
	Если  (НЕ СтрокаРодитель = Неопределено)  И  (ЗначениеЗАполнено(СтрокаРодитель.СтруктураАналитикСтрока)) Тогда				 
		 ОбластьРодитель = МакетРаскрытий.Область(СтрокаРодитель.ИмяОбласти);
		 ОбластьРодитель.Имя = "";
		 НоваяОбластьРодитель = МакетРаскрытий.Область(0,ОбластьРодитель.Лево,0,МакетРаскрытий.ШиринаТаблицы);
		 НоваяОбластьРодитель.Имя = СтрокаРодитель.ИмяОбласти;
		 ОбновитьОбластиМакетаКолонок(СтрокаРодитель.Родитель,МакетРаскрытий);
	 КонецЕсли;	
	 	 
 КонецПроцедуры	
 

&НаСервере
Функция БланкЭкспортироватьНаСервере()
	
	Записать();
	
	Т = Новый ТабличныйДокумент;
	Т.Вывести(ПолеТабличногоДокументаМакет);
	Возврат Новый Структура("ВидОтчета,ПравилоОбработки,БланкОтчета,ТаблДок,Режим20", Объект.Владелец, ПравилоОбработки, Объект.Ссылка, Т,Истина);
	
КонецФункции

&НаКлиенте
Процедура БланкИмпортировать(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = // порядок существенен в дальнейшем алгоритме
	Нстр("ru = 'Все табличный документы'") + " (*.mxl, *.xls, *.xlsx)|*.mxl; *.xls; *.xlsx|
	|" + Нстр("ru = 'Таблицы Microsoft Excel'") + " (*.xls, *.xlsx)|*.xls; *.xlsx|
	|" + Нстр("ru = 'Табличные документы 1С'") + " (*.mxl)|*.mxl";
	
	ДопПараметры = Новый Структура("ДиалогВыбораФайла,ИмпортФормул", ДиалогВыбораФайла,Ложь);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаВыбораФайла", ЭтотОбъект, ДопПараметры);
	ДиалогВыбораФайла.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 
    
    ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;    
    
    Если НЕ (ВыбранныеФайлы <> Неопределено) Тогда
        Возврат;
    КонецЕсли;
    
    ПолноеИмяФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
    
    Файл = Новый Файл(ПолноеИмяФайла);
    Расширение = НРег(Сред(Файл.Расширение, 2)); // начинается точкой
    
    Если Расширение = "xls" ИЛИ Расширение = "xlsx" Тогда
        ТипФайлаИсточника = 2;
    ИначеЕсли Расширение = "mxl" Тогда
        ТипФайлаИсточника = 1;
    Иначе
        ТипФайлаИсточника = 0;
    КонецЕсли;
    
    Если ТипФайлаИсточника = 0 Тогда
        ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Не удалось определить тип импортируемого файла!'"));
        Возврат;
    КонецЕсли;
    
    АдресХранилища = "";
	
	ДопПараметры = Новый Структура("Расширение, ТипФайлаИсточника,ИмпортФормул", 
									Расширение, ТипФайлаИсточника,ДополнительныеПараметры.ИмпортФормул);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаВыбораФайлаЗавершение", ЭтотОбъект, ДопПараметры);
	
	НачатьПомещениеФайла(Оповещение, АдресХранилища, ПолноеИмяФайла, Ложь, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбораФайлаЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
    
    АдресХранилища 		= Адрес;
    ПолноеИмяФайла 		= ВыбранноеИмяФайла;
    Расширение 			= ДополнительныеПараметры.Расширение;
    ТипФайлаИсточника 	= ДополнительныеПараметры.ТипФайлаИсточника;
    
    ТекстОшибки = Неопределено;
    
    Если ТипФайлаИсточника = 1 Тогда // 1 - 1С, 2 - Microsoft Excel
        
        ТекстОшибки = БланкИмпортироватьНаСервереMXL(АдресХранилища);
        
	ИначеЕсли ТипФайлаИсточника = 2 Тогда
		
		ДопПараметры = Новый Структура("АдресХранилища, Расширение,ИмпортФормул", АдресХранилища, Расширение,ДополнительныеПараметры.ИмпортФормул);
		
		Если ДополнительныеПараметры.ИмпортФормул Тогда
			
			Excel_Настройки = Неопределено;
			ExcelApplication = ОбщегоНазначенияMicrosoftExcelКлиентСерверУХ.Создать(Excel_Настройки);
			
			Если ExcelApplication = Неопределено Тогда
				ВызватьИсключение Нстр("ru = 'Не удалось создать COM-объект Microsoft Excel.'");
			КонецЕсли;
			
			Workbook = ExcelApplication.Workbooks.Open(ПолноеИмяФайла);
			
			СписокЛистов = Новый СписокЗначений;
			Для НомерЛиста = 1 По Workbook.Sheets.Count Цикл
				СписокЛистов.Добавить(НомерЛиста, Workbook.Sheets(НомерЛиста).Name);
			КонецЦикла;
			
			Workbook.Close(False);
			
			ОбщегоНазначенияMicrosoftExcelКлиентСерверУХ.Закрыть(ExcelApplication, Excel_Настройки);
			
			Workbook=Неопределено;
			
		Иначе
			
			ДанныеФайла=ПолучитьДанныеБланкаДляИмпорта(АдресХранилища,Расширение);
					
			СписокЛистов=ДанныеФайла.СписокЛистов;
							
			ДопПараметры.Вставить("ТабФайл",ДанныеФайла.ТабФайл);
			
		КонецЕсли;
		
		Если СписокЛистов.Количество() = 0 Тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Загрузка не удалась: выбранный файл не содержит листов!'"));
			Возврат;
		КонецЕсли;
		
		ВыбранныйЛист = Неопределено;
		
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаВыбораЛиста", ЭтотОбъект, ДопПараметры);
		СписокЛистов.ПоказатьВыборЭлемента(Оповещение, Нстр("ru = 'Выберите лист:'"), СписокЛистов[0]);
		
		Возврат;
		
	КонецЕсли;
    
    БланкИмпортироватьСостояние(ТекстОшибки);

КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеБланкаДляИмпорта(АдресХранилища,Расширение)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ПолучитьИзВременногоХранилища(АдресХранилища).Записать(ИмяВременногоФайла);
	
	СписокЛистов=Новый СписокЗначений;
	
	ТабФайл=Новый ТабличныйДокумент;
	
	ТабФайл.Прочитать(ИмяВременногоФайла);
	
	Для Каждого Область ИЗ ТабФайл.Области Цикл
		
		СписокЛистов.Добавить(Область.Имя);
		
	КонецЦикла;
	
	ДанныеФайла=Новый Структура;
	ДанныеФайла.Вставить("ТабФайл",ТабФайл);
	ДанныеФайла.Вставить("СписокЛистов",СписокЛистов);
	
	Возврат ДанныеФайла;
	
КонецФункции // ПолучитьДанныеБланкаДляИмпорта()

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбораЛиста(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт 
    
    АдресХранилища = ДополнительныеПараметры.АдресХранилища;
    Расширение = ДополнительныеПараметры.Расширение;
        
    ВыбранныйЛист = ВыбранныйЭлемент;
    
    Если ВыбранныйЛист = Неопределено Тогда
        Возврат;
    КонецЕсли;
	
	Если ДополнительныеПараметры.ИмпортФормул Тогда
		
		Если Модифицированность Тогда
			
			Записать();
			
		КонецЕсли;
		
		ТекстОшибки = ФормулыИмпортироватьНаСервереXLS(АдресХранилища, ВыбранныйЛист.Значение, Расширение); 
		
	Иначе
		
		ТекстОшибки = БланкИмпортироватьНаСервереXLS(АдресХранилища, ВыбранныйЛист.Значение,ДополнительныеПараметры.ТабФайл); 
		
	КонецЕсли;
	
	БланкИмпортироватьСостояние(ТекстОшибки);

КонецПроцедуры

&НаКлиенте
Процедура БланкИмпортироватьСостояние(ТекстОшибки)
    
    Если ТекстОшибки = Неопределено Тогда
        Модифицированность = Истина;
    Иначе
        Сообщить(ТекстОшибки);
        ПоказатьПредупреждение(, Нстр("ru = 'Не удалось прочитать данные из файла!'"));
    КонецЕсли;

КонецПроцедуры

&НаСервере
Функция БланкИмпортироватьНаСервереMXL(АдресХранилища)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ПолучитьИзВременногоХранилища(АдресХранилища).Записать(ИмяВременногоФайла);
	
	Т = Новый ТабличныйДокумент;
	
	Попытка
		Т.Прочитать(ИмяВременногоФайла);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат ТекстОшибки;
	КонецПопытки;
	
	ПолеТабличногоДокументаМакет.Очистить();
	ПолеТабличногоДокументаМакет.Вывести(Т);
	ПолеТабличногоДокументаМакет.ОриентацияСтраницы = Т.ОриентацияСтраницы;
	
	Возврат Неопределено;
	
Конецфункции

&НаСервере
Функция ФормулыИмпортироватьНаСервереXLS(АдресХранилища, ИмяЛиста, Расширение)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ПолучитьИзВременногоХранилища(АдресХранилища).Записать(ИмяВременногоФайла);
	
	ИмпортИзExcel = Обработки.ИмпортФормулИзExcel.Создать();
	ИмпортИзExcel.ФайлЭксель = ИмяВременногоФайла;
	ИмпортИзExcel.ИмяЛиста = ИмяЛиста;
	ИмпортИзExcel.ВидОтчета=Объект.Владелец;
	ИмпортИзExcel.ПравилоОбработки=ПравилоОбработки;
	ИмпортИзExcel.МакетОтчета=ПолеТабличногоДокументаМакет;
	
	Попытка
		
		Т = ИмпортИзExcel.ПолучитьТекстФормул();
				
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат ТекстОшибки;
	КонецПопытки;
		
	Возврат Неопределено;
	
Конецфункции

&НаСервере
Функция БланкИмпортироватьНаСервереXLS(АдресХранилища, ИмяЛиста,ТабФайл)
		
	Попытка
		
		ОбластьЛист=ТабФайл.ПолучитьОбласть(ИмяЛиста);
		
		ТабЛист=Новый ТабличныйДокумент;
		ТабЛист.Вывести(ОбластьЛист);
		ОбновитьПолеМакета(ТабЛист);	
		
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат ТекстОшибки;
		
	КонецПопытки;
	
	Возврат Неопределено;
	
Конецфункции

&НаКлиенте
Процедура Свойства(Команда)
	
	ОткрытьНаборСвойств();
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНаборСвойств()
		
	Перем ТипЭлемента;
	
	МассивОбъектов = Новый Массив();
	
	Оповещение = Новый ОписаниеОповещения("ПоказателиИзменитьСвойстваЗавершение", ЭтаФорма);
	
	Для Каждого ВыдОбласть Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл	
		Если  ВыдОбласть.Верх =0 Тогда	
			Верх  = 1;
			Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	 
		ИначеЕсли  ВыдОбласть.Лево =0 Тогда	 	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = 1;
			Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;	
		Иначе	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	
		КонецЕсли;	

		Для ИндС = Верх По Низ Цикл
			Для ИндК = Лево По Право Цикл
				ТекОбл = ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);
				Если ТипЗнч(ТекОбл.Расшифровка) = Тип("Структура") И ТекОбл.Расшифровка.Свойство("Ссылка") Тогда
					МассивОбъектов.Добавить(ТекОбл.Расшифровка.Ссылка);
				КонецЕсли;	  
			КонецЦикла;	
		КонецЦикла;			
	КонецЦикла;
	
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли МассивОбъектов.Количество() = 1 Тогда
		ПоказатьЗначение(Оповещение, МассивОбъектов[0]);
	Иначе	
		ВнИмяФормы = "Обработка.ГрупповоеИзменениеЭлементовОтчета.Форма.ГрупповоеИзменениеЭлементов";	
		ОткрытьФорму(ВнИмяФормы, Новый Структура("ТипЭлемента, МассивОбъектов,ВидОтчета", "Показатель", Новый ФиксированныйМассив(МассивОбъектов),Объект.Владелец));	
	КонецЕсли;
	
КонецПроцедуры // ОткрытьНаборСвойств()

&НаКлиенте
Процедура СоздатьСтроки(Команда)
	
	Если НЕ Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		ПоказатьПредупреждение(, Нстр("ru = 'Для создания строк вида отчета выделите в бланке только те ячейки, которые содержат наименования строк.'"));
		Возврат;
	КонецЕсли;	
	
	СформироватьСтрокиКолонки("Строки");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКолонки(Команда)
	
	Если НЕ Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		ПоказатьПредупреждение(, Нстр("ru = 'Для создания колонок вида отчета выделите в бланке только те ячейки, которые содержат наименования колонок.'"));
		Возврат;
	КонецЕсли;	
	
	СформироватьСтрокиКолонки("Колонки");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоказатели(Команда)
	СформироватьПоказатели();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСтрокиКолонки(СтрокиКолонки)
	
	Если СтрокиКолонки = "Строки" Тогда
		ФормаГенератора = "Справочник.БланкиОтчетов.Форма.ГенерацияСтрок";
		РежимСтроки = Истина;
	ИначеЕсли СтрокиКолонки = "Колонки" Тогда
		ФормаГенератора = "Справочник.БланкиОтчетов.Форма.ГенерацияКолонок";
		РежимСтроки = Ложь;
	Иначе
		Возврат;
	КонецЕсли;
	
	ТекущийМакет = ПолеТабличногоДокументаМакет;
	
	ДлинаКода = КэшируемыеПроцедурыУХ.ДлинаКодаСправочника(?(РежимСтроки, "СтрокиОтчетов", "КолонкиОтчетов"));
	
	Массив = Новый Массив;
	
	Для Каждого ОбластьКОбработке Из ТекущийМакет.ВыделенныеОбласти Цикл
		
		Если НЕ ТипЗнч(ОбластьКОбработке) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		
		Если РежимСтроки Тогда
			Начало = ОбластьКОбработке.Верх;
			Конец = ОбластьКОбработке.Низ;
		Иначе
			Начало = ОбластьКОбработке.Лево;
			Конец = ОбластьКОбработке.Право;
		КонецЕсли;
		
		Для Номер = Начало По Конец Цикл
			
			Если РежимСтроки Тогда
				Область = ТекущийМакет.Область(Номер, ОбластьКОбработке.Лево);
				Если НЕ Область.Верх = Номер Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Область = ТекущийМакет.Область(ОбластьКОбработке.Верх, Номер);
				Если НЕ Область.Лево = Номер Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(Область.Текст) Тогда
				Продолжить;
			КонецЕсли;
			
			Строка = Новый Структура();
			Строка.Вставить("Код",			ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(Область.Текст, ДлинаКода));
			Строка.Вставить("Наименование",	Область.Текст);
			Строка.Вставить("ВерхЯчейки",	Область.Верх);
			Строка.Вставить("ЛевоЯчейки",	Область.Лево);
			Строка.Вставить("ПорядковыйНомер", ?(РежимСтроки, Область.Верх, Область.Лево));
			
			Массив.Добавить(Строка);
			
		КонецЦикла;
	КонецЦикла;
	
	Результат = Неопределено;
	
	ПараметрыФормы = Новый Структура("ВидОтчета,МассивТаблицы", Объект.Владелец, Массив);
	ДопПараметры = Новый Структура("ТекущийМакет", ТекущийМакет);
	Оповещение = Новый ОписаниеОповещения("СформироватьСтрокиКолонкиЗавершение", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму(ФормаГенератора, ПараметрыФормы, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСтрокиКолонкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекущийМакет = ДополнительныеПараметры.ТекущийМакет;    
    
    Если Результат = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Для Каждого Элемент Из Результат Цикл
		
		Область = ТекущийМакет.Область(Элемент.Ключ);
        Если НЕ Область = Неопределено Тогда
            Область.Имя = Элемент.Значение;
		КонецЕсли;
		
    КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СформироватьПоказатели()
	
	мМассивСтрок   =  Новый Массив;
	мМассивКолонок   =  Новый Массив;
	
	Для Каждого Область Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл
		Для ИндК = Область.Лево По Область.Право Цикл
			Для ИндС = Область.Верх По Область.Низ Цикл
				ТекОбласть = ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);
				Если ТипЗнч(ТекОбласть) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
					ПозСтрока  = СтрНайти(ТекОбласть.Имя, "Строка_");
					ПозКолонка = СтрНайти(ТекОбласть.Имя, "Колонка_");
					
					Если ПозСтрока <> 0 Тогда
						мМассивСтрок.Добавить(СокрЛП(Сред(ТекОбласть.Имя, ПозСтрока + 7)));
					КонецЕсли;
					
					Если ПозКолонка <> 0 Тогда
						мМассивКолонок.Добавить(СокрЛП(Сред(ТекОбласть.Имя, ПозКолонка + 8)));
					КонецЕсли;
					
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	АдресТаблицыИзмененныхПоказателей = Неопределено;

	ПараметрыФормы = Новый Структура("ВидОтчета, МассивКодовКолонок, МассивКодовСтрок", Объект.Владелец, мМассивКолонок, мМассивСтрок);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ГенерацияПоказателей", ЭтотОбъект);
	ОткрытьФорму("Справочник.БланкиОтчетов.Форма.ГенерацияПоказателей", 
					ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГенерацияПоказателей(Результат, ДополнительныеПараметры) Экспорт
    
    АдресТаблицыИзмененныхПоказателей = Результат;
    
    Если АдресТаблицыИзмененныхПоказателей <> Неопределено Тогда
        ОбновитьТабличныйДокументПоПоказателям(АдресТаблицыИзмененныхПоказателей);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОБновитьТабличныйДокументПоПоказателям(МассивИзмененныхПоказателей)
	
	Для Каждого СтрПоказатель Из МассивИзмененныхПоказателей Цикл	
		ОбластьСтроки  = ПолеТабличногоДокументаМакет.Области.Найти(СтрПоказатель.ИмяСтроки);
		ОбластьКолонки = ПолеТабличногоДокументаМакет.Области.Найти(СтрПоказатель.ИмяКолонки);
		Если ОбластьСтроки <> Неопределено И ОбластьКолонки <> Неопределено Тогда
			
			тОбласть = ПолеТабличногоДокументаМакет.Область(ОбластьСтроки.Верх, ОбластьКолонки.Лево);
			
			тОбласть.Текст 			 	= СтрПоказатель.ВидОтчета +"."+СтрПоказатель.ПоказательКод;
			тОбласть.РазмещениеТекста 	= ТипРазмещенияТекстаТабличногоДокумента.Обрезать;	
			тОбласть.Имя 			 	= ПолучитьИмяСледующейОбластиСервер(ПолеТабличногоДокументаМакет,СтрПоказатель.ВидОтчета,СтрПоказатель.ПоказательКод); 
			
			СтруктураРасшифровки = Новый Структура();
			СтруктураРасшифровки.Вставить("Ссылка"			,СтрПоказатель.ПоказательСсылка);
						
			тОбласть.Расшифровка 	 = СтруктураРасшифровки;
			
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрВидОтчета()

	Показатели.Параметры.УстановитьЗначениеПараметра("ВидОтчета",ВидОтчетаОтборПоказателей);
	Строки.Параметры.УстановитьЗначениеПараметра("ВидОтчета",ВидОтчетаОтборПоказателей);

	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьОтчет(Команда)
	
	ПараметрыФормы = Новый Структура("Бланк",Объект.Ссылка);	   		
	Оповещение = Новый ОписаниеОповещения("ФормаИзмененияСвойствОбластиЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.АналитическийБланк.Форма.ФормаОтчета", ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМакетИмпорта(Команда)
	
	Если НЕ ТекущийБланкПустой() Тогда
		Оповещение = Новый ОписаниеОповещения("ДиалогМастерГенерацииМакетаЗавершение", ЭтаФорма);
	    ПоказатьВопрос(Оповещение, Нстр("ru = 'Текущий макет не пустой. После работы мастера будет сгенерирован новый макет, продолжить?'"), РежимДиалогаВопрос.ДаНет);

	Иначе	
		ПараметрыФормы = Новый Структура("ВидОтчета",Объект.Владелец);	   		
		Оповещение = Новый ОписаниеОповещения("ФормаМастерГенерацииМакетаЗавершение", ЭтаФорма);	
		ОткрытьФорму("Справочник.БланкиОтчетов.Форма.ФормаПодбораПоказателейВидаОтчета", ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция  ТекущийБланкПустой()
	
	Для Каждого ИмяОбласти Из ПолеТабличногоДокументаМакет.Области Цикл	
		Возврат Ложь;	
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции	


#Область МастерГенерацииБланка

&НаСервере
Процедура СоздатьМакетБланка(Результат)
		
	ОбъектАБ = РеквизитФормыВЗначение("ОбъектАналитическогоБланка");
	ОбъектАБ.КэшГруппОтборовПоказателей.Очистить();
	ОбъектАБ.РасшифровкаГруппОтборов.Очистить();
    ОбъектАБ.КэшРаскрываемыхОбластей.Очистить();
	ОбъектАБ.НастройкиРаскрываемыхОбластей.Очистить();
    ОбъектАБ.КэшИменОбластейПоказателей.Очистить();
	ОбъектАБ.КэшВыводаОбластейМакета.Очистить();
    ОбъектАБ.КэшФормулОбластейПоказателей.Очистить();
    ОбъектАБ.РасшифровкаФормулОбластейПоказателей.Очистить();
    ОбъектАБ.КэшИменФормул.Очистить();
	ВидОтчета = Объект.Владелец;
	БланкДляОтображенияТек = Объект.БланкДляОтображения;
	НаименованиеОтчета = Объект.Наименование;
	
	АналитическийБланкГенерацияМакетаУХСервер.СоздатьМакетБланка(Результат, ВидОтчета, БланкДляОтображенияТек, НаименованиеОтчета, ОбъектАБ, ПолеТабличногоДокументаМакет);
	ЗначениеВРеквизитФормы(ОбъектАБ, "ОбъектАналитическогоБланка");
			
КонецПроцедуры	

&НаСервере
Процедура ПодготовитьТаблицыПоДеревуРекурсивноИмпорт(тДеревоВыбранныхСтрок,тДеревоВыбранныхКолонок,глАналитик,ГлКлючейАналитик,кэшРаскрытияПоказателей,текПоказатели,СтруктураОдинаковыхИмен,КартинкаМакета,ИерархияАналитик)
	
	Для Каждого Стр Из тДеревоВыбранныхСтрок.Строки Цикл	
		Если Не Стр.Строка =  Нстр("ru = 'Выбранные строки'") Тогда			
			Если Стр.СтрокаВыбрана Тогда 
				СгенерироватьСтрокуМакетаИмпорт(Стр,тДеревоВыбранныхКолонок,глАналитик,ГлКлючейАналитик,кэшРаскрытияПоказателей,текПоказатели);
				Если ЗначениеЗаполнено(Стр.СтрокаГруппаРаскрытия) Тогда	
					СгенерироватьСтрокуРаскрытияИмпорт(глАналитик,ГлКлючейАналитик,Стр.Строка,Стр.СтрокаГруппаРаскрытия,текПоказатели,СтруктураОдинаковыхИмен,КартинкаМакета,ИерархияАналитик);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;					
		Если Стр.Уровень()>0 Тогда ПолеТабличногоДокументаМакет.НачатьГруппуСтрок() КонецЕсли;
		ПодготовитьТаблицыПоДеревуРекурсивноИмпорт(Стр,тДеревоВыбранныхКолонок,глАналитик,ГлКлючейАналитик,кэшРаскрытияПоказателей,текПоказатели,СтруктураОдинаковыхИмен,КартинкаМакета,ИерархияАналитик);		
		Если Стр.Уровень()>0 Тогда ПолеТабличногоДокументаМакет.ЗакончитьГруппуСтрок() КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура СгенерироватьСтрокуМакетаИмпорт(СтрокаОтчета,тДеревоВыбранныхКолонок,глАналитик,ГлКлючейАналитик,кэшРаскрытияПоказателей,текПоказатели)
	
	ОбластьШапкаТаблицы = ПолеТабличногоДокументаМакет.Область("ОбластьШапка");	
	ТекВысота =  ПолеТабличногоДокументаМакет.ВысотаТаблицы+1;
	ЯчейкаШаблон =  ПолеТабличногоДокументаМакет.Область(ОбластьШапкаТаблицы.Верх+1,2,ОбластьШапкаТаблицы.Верх+1,2);
	//Макет самой строки
	ТекЯчейка =  ПолеТабличногоДокументаМакет.Область(ТекВысота,2,ТекВысота,2);
	ТекЯчейка.Текст = СтрокаОтчета.СтрокаНаименование;
	ТекЯчейка.Имя =   "Строка_"+СокрП(СтрокаОтчета.СтрокаКод);
	ТекЯчейка.Шрифт   = Новый Шрифт(ТекЯчейка.Шрифт,,,Истина);
	ТекЯчейка.Отступ  = (СтрокаОтчета.Уровень()-1)*2;
		
	ИндексПоказателя = ГлКлючейАналитик.Количество()+1;
	Для Каждого Кол Из тДеревоВыбранныхКолонок Цикл
		Если СтрокаОтчета[СокрЛП(Кол.Код)] Тогда
			
			ТекЯчейка =  ПолеТабличногоДокументаМакет.Область(ТекВысота,ИндексПоказателя+2,ТекВысота,ИндексПоказателя+2);
			ТекЯчейка.Текст = Кол.Код;
			
			СтрокаПоказатель =   текПоказатели.НайтиСтроки(Новый Структура("Строка,Колонка",СтрокаОтчета.Строка,Кол.Ссылка));
			
			Если СтрокаПоказатель.Количество() = 1 Тогда
				СтрПоказатель =  СтрокаПоказатель[0];
				
				ТекЯчейка.Текст 			= СокрЛП(СтрПоказатель.ВидОтчетаКод) +"."+СокрЛП(СтрПоказатель.ПоказательКод);
				ТекЯчейка.РазмещениеТекста 	= ТипРазмещенияТекстаТабличногоДокумента.Обрезать;	
				ТекЯчейка.Имя 			 	= ПолучитьИмяСледующейОбластиСервер(ПолеТабличногоДокументаМакет,СокрЛП(СтрПоказатель.ВидОтчетаКод),СокрЛП(СтрПоказатель.ПоказательКод)); 
				
				СтруктураРасшифровки = Новый Структура();
				СтруктураРасшифровки.Вставить("Ссылка"				,СтрПоказатель.Ссылка);
				
				ТекЯчейка.Расшифровка 	 = СтруктураРасшифровки;
				Если СтрПоказатель.Вычисляемый Тогда
					ТекЯчейка.ЦветФона       = Новый Цвет(204,255,204);
				Иначе
					ТекЯчейка.ЦветФона       = Новый Цвет(255,250,217);
				КонецЕсли;		
			Иначе
				ТекЯчейка.Текст = "Х";
			КонецЕсли;	
				
			ИндексПоказателя = ИндексПоказателя+1;
		Иначе	
			ИндексПоказателя = ИндексПоказателя+1;	
		КонецЕсли;							
	КонецЦикла;	
		
КонецПроцедуры	

&НаСервере
Процедура СгенерироватьСтрокуРаскрытияИмпорт(глАналитик,ГлКлючейАналитик,СтрокаОтчета,СтрокаГруппаРаскрытия,текПоказатели,СтруктураОдинаковыхИмен,КартинкаМакета,ИерархияАналитик)
		
	ПараметрыНовогоМакета = Новый Структура;
	
	ДеревоСтруктуры 	  = Новый ДеревоЗначений;;
    ДеревоСтруктуры.Колонки.Добавить("АналитикаПредставление");
	ДеревоСтруктуры.Колонки.Добавить("СтруктураАналитикСтрока");
	ТекАналитики = СтрокаГруппаРаскрытия;
	
	КоличествоСтрокМакета 	= 1;
	НачалоОбластиЗаголовка	= 1;
	
	МакетГруппировок        = ПолеТабличногоДокументаМакет.ПолучитьОбласть(ПолеТабличногоДокументаМакет.ВысотаТаблицы,0,ПолеТабличногоДокументаМакет.ВысотаТаблицы,0);
	ИмяОбластиГруппировок   = "ОбластьГруппы_"+СтрЗаменить(Новый УникальныйИдентификатор(),"-","");
	МакетГруппировок.Область(1,0,1,0).Имя = ИмяОбластиГруппировок;
	
	ПараметрыОтбора         = ОбъектАналитическогоБланка.РасшифровкаГруппОтборов.Выгрузить(Новый Структура("УидГруппыОтборов",Неопределено));
	
	Для Инд = 1 По МакетГруппировок.ШиринаТаблицы Цикл	
		ТекОбл = МакетГруппировок.Область(1,Инд,1,Инд);
		Если ТекОбл.Расшифровка = Неопределено Тогда
			 ТекОбл.Имя = "";
			 ТекОбл.Текст = "";
		КонецЕсли;		
	КонецЦикла;	
	
	СтруктураСортировки     = Новый Структура;
	СтруктураАналитик       = Новый Структура;
	тзСтруктураМакета       = Новый ТаблицаЗначений;
	тзСтруктураМакета.Колонки.Добавить("ВерхОбласти");
	тзСтруктураМакета.Колонки.Добавить("ЛевоОбласти");
    тзСтруктураМакета.Колонки.Добавить("ИмяОбласти");
	
	нСтрокаСтруктуры = тзСтруктураМакета.Добавить();
	нСтрокаСтруктуры.ВерхОбласти = 1;
	нСтрокаСтруктуры.ЛевоОбласти = 0;
    нСтрокаСтруктуры.ИмяОбласти  = ИмяОбластиГруппировок;
	
	Для Каждого АСтр Из глАналитик Цикл	
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл	
			
			Если Не ЗначениеЗаполнено(ТекАналитики["ВидАналитики"+Инд]) Тогда
				 Продолжить;
			КонецЕсли;	
			
			Если ТекАналитики["ВидАналитики"+Инд] = АСтр.Значение Тогда	
				нПараметрОтбора = ПараметрыОтбора.Добавить();
				нПараметрОтбора.ЗначениеДляПроверкиСтрока 	= ЗначениеВСтрокуВнутр(Неопределено);
				нПараметрОтбора.ЗначениеОтбораСтрока 		= ЗначениеВСтрокуВнутр(Неопределено);
				нПараметрОтбора.Использовать 				= Истина;
				нПараметрОтбора.Отбор 						= Нстр("ru = 'Отбор не производится'");
				нПараметрОтбора.Поле 						= АСтр.Значение.Наименование;
				нПараметрОтбора.ПолеКод 					= АСтр.Ключ;
				нПараметрОтбора.ПорядокОтбора 				= 99;
				
				Если  АСтр.Значение.ТипЗначения.ПривестиЗначение() = Неопределено Тогда
					СтруктураСортировки.Вставить(АСтр.Ключ,Новый ПолеКомпоновкиДанных(АСтр.Ключ));
					
					ТипСтрока = "СправочникСсылка."+Метаданные.НайтиПоТипу(АСтр.Значение.ТипЗначения.Типы()[0]).Имя;	
					нПараметрОтбора.ТипЗначенияСтрока 			= ТипСтрока;
					СтруктураАналитик.Вставить(АСтр.Ключ,АСтр.Значение.Наименование);	
				Иначе
					
					ИмяОбъекта=АСтр.Значение.ТипЗначения.ПривестиЗначение().Метаданные().ПолноеИмя();	
					Если СтрНайти(ИмяОбъекта,"Справочник")>0 Тогда
						ТипСтрока = "СправочникСсылка."+Метаданные.НайтиПоТипу(АСтр.Значение.ТипЗначения.Типы()[0]).Имя;
						СтруктураСортировки.Вставить(АСтр.Ключ,Новый ПолеКомпоновкиДанных(АСтр.Ключ+".Наименование"));
					Иначе	 
						ТипСтрока = "ПеречислениеСсылка."+Метаданные.НайтиПоТипу(АСтр.Значение.ТипЗначения.Типы()[0]).Имя;
						СтруктураСортировки.Вставить(АСтр.Ключ,Новый ПолеКомпоновкиДанных(АСтр.Ключ+".Порядок"));
					КонецЕсли;
					нПараметрОтбора.ТипЗначенияСтрока 			= ТипСтрока;
					СтруктураАналитик.Вставить(АСтр.Ключ,АСтр.Значение.Наименование);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;			
	КонецЦикла;	
	
	Если ТекАналитики.Валютная Тогда
		
		АСтр = глАналитик[ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты.Код];
		
		нПараметрОтбора = ПараметрыОтбора.Добавить();
		нПараметрОтбора.ЗначениеДляПроверкиСтрока 	= ЗначениеВСтрокуВнутр(Неопределено);
		нПараметрОтбора.ЗначениеОтбораСтрока 		= ЗначениеВСтрокуВнутр(Неопределено);
		нПараметрОтбора.Использовать 				= Истина;
		нПараметрОтбора.Отбор 						= Нстр("ru = 'Отбор не производится'");
		нПараметрОтбора.Поле 						= АСтр.Наименование;
		нПараметрОтбора.ПолеКод 					= АСтр.Код;
		нПараметрОтбора.ПорядокОтбора 				= 99;
		ИмяОбъекта=АСтр.ТипЗначения.ПривестиЗначение().Метаданные().ПолноеИмя();	
		Если СтрНайти(ИмяОбъекта,"Справочник")>0 Тогда
			ТипСтрока = "СправочникСсылка."+Метаданные.НайтиПоТипу(АСтр.ТипЗначения.Типы()[0]).Имя;
			СтруктураСортировки.Вставить(АСтр.Код,Новый ПолеКомпоновкиДанных(АСтр.Код+".Наименование"));
		Иначе	 
			ТипСтрока = "ПеречислениеСсылка."+Метаданные.НайтиПоТипу(АСтр.ТипЗначения.Типы()[0]).Имя;
			СтруктураСортировки.Вставить(АСтр.Код,Новый ПолеКомпоновкиДанных(АСтр.Код+".Порядок"));
		КонецЕсли;
		нПараметрОтбора.ТипЗначенияСтрока 			= ТипСтрока;
		
		СтруктураАналитик.Вставить(АСтр.Код,АСтр.Наименование);
		
	КонецЕсли;		
	
	Если  ИерархияАналитик Тогда	
		нСтрокаДерева         						  = ДеревоСтруктуры.Строки.Добавить();
		Для Каждого нСтруктура Из СтруктураАналитик Цикл
			СтруктураАналитик_ = Новый Структура;
			СтруктураАналитик_.Вставить(нСтруктура.Ключ,нСтруктура.Значение);
			нСтрокаДерева.СтруктураАналитикСтрока = ЗначениеВСтрокуВнутр(СтруктураАналитик_);
			нСтрокаДерева = нСтрокаДерева.Строки.Добавить();
		КонецЦикла;			
	Иначе	
		нСтрокаДерева         						  = ДеревоСтруктуры.Строки.Добавить();
		нСтрокаДерева.СтруктураАналитикСтрока         = ЗначениеВСтрокуВнутр(СтруктураАналитик);
	КонецЕсли;
	
	ПараметрыНовогоМакета.Вставить("СтруктураАналитикАдрес"		,ПоместитьВоВременноеХранилище(ДеревоСтруктуры,Новый УникальныйИдентификатор));
	ПараметрыНовогоМакета.Вставить("КоличествоСтрокМакета"		,1);
	Если ИерархияАналитик Тогда
		ПараметрыНовогоМакета.Вставить("НачалоОбластиЗаголовка"		,2);
	Иначе	
		ПараметрыНовогоМакета.Вставить("НачалоОбластиЗаголовка"		,1);
	КонецЕсли;	
	ПараметрыНовогоМакета.Вставить("МакетГруппировок"			,ПоместитьВоВременноеХранилище(МакетГруппировок,Новый УникальныйИдентификатор));
    ПараметрыНовогоМакета.Вставить("ПараметрыОтбораАдрес"		,ПоместитьВоВременноеХранилище(ПараметрыОтбора,Новый УникальныйИдентификатор));
	ПараметрыНовогоМакета.Вставить("ПараметрыОтбораАдрес"		,ПоместитьВоВременноеХранилище(ПараметрыОтбора,Новый УникальныйИдентификатор));
    ПараметрыНовогоМакета.Вставить("СортировкиАдрес"		    ,ПоместитьВоВременноеХранилище(СтруктураСортировки,Новый УникальныйИдентификатор));
    ПараметрыНовогоМакета.Вставить("тзСтруктураМакетаАдрес"		,ПоместитьВоВременноеХранилище(тзСтруктураМакета,Новый УникальныйИдентификатор));
	ПараметрыНовогоМакета.Вставить("текПоказатели"				,ПоместитьВоВременноеХранилище(текПоказатели,Новый УникальныйИдентификатор));
	
	ТекВысота =  ПолеТабличногоДокументаМакет.ВысотаТаблицы;
	
	СформироватьМакетыРаскрытия(ПараметрыНовогоМакета,ТекВысота,0,СтруктураОдинаковыхИмен,Ложь,КартинкаМакета,Истина);
	
	Если  ИерархияАналитик Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьСтрокиРаскрытия = ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,0,ПолеТабличногоДокументаМакет.ВысотаТаблицы,0);
	ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,1,ПолеТабличногоДокументаМакет.ВысотаТаблицы,1).Текст = "";

	ИндексПоля = 3;
	
	
	
	Для Каждого  Аналитика Из глАналитик Цикл
		ФлАналитики = Ложь;
		
		Если  Аналитика.Значение.ТипЗначения.ПривестиЗначение() = Неопределено Тогда
			ЭтоПеречисление = Ложь;
		Иначе	
			ИмяОбъекта=Аналитика.Значение.ТипЗначения.ПривестиЗначение().Метаданные().ПолноеИмя();	
			Если СтрНайти(ИмяОбъекта,"Перечисление")>0 Тогда
				ЭтоПеречисление = Истина;
			Иначе	 
				ЭтоПеречисление = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл	
			
			Если Не ЗначениеЗаполнено(ТекАналитики["ВидАналитики"+Инд]) Тогда
				 Продолжить;
			КонецЕсли;	
			
			Если ТекАналитики["ВидАналитики"+Инд] = Аналитика.Значение Тогда		
				Если  Объект.БланкДляОтображения Тогда
					КлючПоискаПоАналитике = ?(ЭтоПеречисление,"["+Аналитика.Значение+"]","["+Аналитика.Значение+"]");
					ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,ИндексПоля,ПолеТабличногоДокументаМакет.ВысотаТаблицы,ИндексПоля).Текст = КлючПоискаПоАналитике;
					ИндексПоля = ИндексПоля+1;
					ФлАналитики = Истина;
				Иначе	
					РеквизитыПоиска = Аналитика.Значение.РеквизитыДляСинхронизации.Выгрузить();
					Для Каждого Реквизит Из РеквизитыПоиска Цикл	
						КлючПоискаПоАналитике = ?(ЭтоПеречисление,"["+Аналитика.Значение+"]","["+Аналитика.Значение+"."+Реквизит.ИмяРеквизита+"]");	
						ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,ИндексПоля,ПолеТабличногоДокументаМакет.ВысотаТаблицы,ИндексПоля).Текст = КлючПоискаПоАналитике;
						ИндексПоля = ИндексПоля+1;	
					КонецЦикла;	
					ФлАналитики = Истина;
				КонецЕсли;			
			КонецЕсли;			
		КонецЦикла;	
		
		Если ТекАналитики.Валютная И Аналитика.Значение = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты Тогда 
			Если  Объект.БланкДляОтображения Тогда	
				КлючПоискаПоАналитике = ?(ЭтоПеречисление,"["+Аналитика.Значение+"]","["+Аналитика.Значение+"]");
				ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,ИндексПоля,ПолеТабличногоДокументаМакет.ВысотаТаблицы,ИндексПоля).Текст = КлючПоискаПоАналитике;	
				ФлАналитики = Истина;
				ИндексПоля = ИндексПоля+1;	
			Иначе	
				РеквизитыПоиска = Аналитика.Значение.РеквизитыДляСинхронизации.Выгрузить();
				Для Каждого Реквизит Из РеквизитыПоиска Цикл	
					КлючПоискаПоАналитике = ?(ЭтоПеречисление,"["+Аналитика.Значение+"]","["+Аналитика.Значение+"."+Реквизит.ИмяРеквизита+"]");	
					ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,ИндексПоля,ПолеТабличногоДокументаМакет.ВысотаТаблицы,ИндексПоля).Текст = КлючПоискаПоАналитике;
					ИндексПоля = ИндексПоля+1;	
				КонецЦикла;	
				ФлАналитики = Истина;				
			КонецЕсли;	
		КонецЕсли;

		
		Если Не ФлАналитики Тогда
			ИндексПоля = ИндексПоля+1;	
		КонецЕсли;	
	КонецЦикла;	
	
		
КонецПроцедуры	


#КонецОбласти

&НаСервере
Процедура УстановитьНастройкиПанелиЯзыков()
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		ТаблицаЯзыков = Константы.ДополнительныеЯзыкиВыводаОтчета.Получить().Получить();
		
		Если ТипЗнч(ТаблицаЯзыков) =Тип("ТаблицаЗначений") И ТаблицаЯзыков.Количество()>0 Тогда
			
			Если ТаблицаЯзыков.Количество() = 1 Тогда
				
				Элементы.ГруппаЯзыки.Видимость=Истина;
				Элементы.ВыводитьДополнительныйЯзык1.Видимость=Истина;
				Элементы.ВыводитьДополнительныйЯзык1.Заголовок=ТаблицаЯзыков[0].НаименованиеЯзыка;
				
				Элементы.ВыводитьДополнительныйЯзык2.Видимость=Ложь;
				
			ИначеЕсли ТаблицаЯзыков.Количество()>1 Тогда
				
				Элементы.ГруппаЯзыки.Видимость=Истина;
				
				Элементы.ВыводитьДополнительныйЯзык1.Видимость=Истина;
				Элементы.ВыводитьДополнительныйЯзык1.Заголовок=ТаблицаЯзыков[0].НаименованиеЯзыка;
				
				Элементы.ВыводитьДополнительныйЯзык2.Видимость=Истина;
				Элементы.ВыводитьДополнительныйЯзык2.Заголовок=ТаблицаЯзыков[1].НаименованиеЯзыка;
				
			КонецЕсли;
			
			Элементы.НомерОсновногоЯзыка.СписокВыбора.Очистить();
			ЯзыкТекущегоПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Язык;
			Если ЯзыкТекущегоПользователя = Неопределено Тогда
				Элементы.НомерОсновногоЯзыка.СписокВыбора.Добавить(0, НСтр("ru = '<по умолчанию>'"));
			Иначе
				Элементы.НомерОсновногоЯзыка.СписокВыбора.Добавить(0, ЯзыкТекущегоПользователя.Синоним);
			КонецЕсли;
			
			Индекс=1;
			
			Для Каждого СтрЯзык ИЗ ТаблицаЯзыков Цикл	
				Элементы.НомерОсновногоЯзыка.СписокВыбора.Добавить(Индекс,СтрЯзык.НаименованиеЯзыка);
				Индекс=Индекс+1;		
			КонецЦикла;
			
		Иначе		
			Элементы.ГруппаЯзыки.Видимость=Ложь;		
		КонецЕсли;	
	Иначе	
		Элементы.ГруппаЯзыки.Видимость=Ложь;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерОсновногоЯзыкаПриИзменении(Элемент)
	
	Элементы.ВыводитьДополнительныйЯзык1.Доступность=Истина;
	Элементы.ВыводитьДополнительныйЯзык2.Доступность=Истина;
	
	Если НомерОсновногоЯзыка>0 Тогда
		
		ЭтаФорма["ВыводитьДополнительныйЯзык"+НомерОсновногоЯзыка]=Ложь;
		Элементы["ВыводитьДополнительныйЯзык"+НомерОсновногоЯзыка].Доступность=Ложь;
		
	КонецЕсли;
	
	ОбновитьОтображениеЯзыков();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьДополнительныйЯзык1ПриИзменении(Элемент)
	
	ОбновитьОтображениеЯзыков();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьДополнительныйЯзык2ПриИзменении(Элемент)
	
	 ОбновитьОтображениеЯзыков();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеЯзыков()
	
	СтруктураЯзыков=Новый Структура;
	СтруктураЯзыков.Вставить("ОсновнойЯзык",НомерОсновногоЯзыка);
	
	СтруктураЯзыков.Вставить("ВыводитьДополнительныйЯзык1",ВыводитьДополнительныйЯзык1);
	СтруктураЯзыков.Вставить("ВыводитьДополнительныйЯзык2",ВыводитьДополнительныйЯзык2);	
	
	ДополнительныеЯзыкиУХ.ПеревестиТекстыОбластей(ПолеТабличногоДокументаМакет,ЯзыкОтображения,НомерОсновногоЯзыка,Объект.Владелец,РеквизитФормыВЗначение("ТекстыОбластейДополнительныеЯзыки"));
	
	ЯзыкОтображения=НомерОсновногоЯзыка;
	
	УстановитьДоступностьКнопок();
	
КонецПроцедуры // ОбновитьОтображениеЯзыков() 

&НаСервере
Процедура УстановитьДоступностьКнопок()
	
	Элементы.ГруппаИмпортЭкспорт.Доступность	=(ЯзыкОтображения=0);
	Элементы.ГенерацияСтруктурыВО.Доступность	=(ЯзыкОтображения=0);
	
КонецПроцедуры // УстановитьДоступностьКнопок()

&НаКлиенте
Процедура ТекущаяФормулаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РедактироватьФормулу(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьВыражение(Команда)
	
	ФлОшибки = Ложь;
	СтруктураПараметровФормулы = ПолучитьОперандыФормулы(ФлОшибки);
	Если ФлОшибки Тогда
		ГруппаФормулыРаскрыта = Истина;
		Элементы.ГруппаТекстВыражения.Видимость = ГруппаФормулыРаскрыта;
		РежимРедактированияФормулы  = Истина;
		Возврат;
	КонецЕсли;	
	
	ЗаписатьФормулу(СтруктураПараметровФормулы);
	
	ЭтаФорма.Модифицированность = Истина;
	
	ОблРедактированяФормулы = ПолеТабличногоДокументаМакет.Область(ИмяТекущейОбластиРедактированияФормулы);
	ОблРедактированяФормулы.ЦветРамки = тЦветРамки;
	ОблРедактированяФормулы.ГраницаСверху 	= тГраницаСверхуТип;
	ОблРедактированяФормулы.ГраницаСнизу 	= тГраницаСнизуТип;
	ОблРедактированяФормулы.ГраницаСлева 	= тГраницаСлеваТип;
	ОблРедактированяФормулы.ГраницаСправа 	= тГраницаСправаТип;	
	
	Элементы.ГруппаТекстВыражения.Видимость = Ложь;	
	Элементы.РежимыРедактированияФормул.Доступность = Истина;	
	Элементы.ТекущаяФормула.Видимость = Истина;	
		
	Элементы.ФормаИзменитьОтбор.Доступность			  = Истина;
	Элементы.ПолеТабличногоДокументаМакет.Защита 	  = Ложь  ;
	
	РежимРедактированияФормулы = Ложь;
	УстановитьРежимРедактированияФормул();
	
	Подключаемый_РезультатПриАктивизацииОбластиПодключаемый();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыражение(Команда)
		
	ОблРедактированяФормулы = ПолеТабличногоДокументаМакет.Область(ИмяТекущейОбластиРедактированияФормулы);
	ОблРедактированяФормулы.ЦветРамки = тЦветРамки;
	ОблРедактированяФормулы.ГраницаСверху 	= тГраницаСверхуТип;
	ОблРедактированяФормулы.ГраницаСнизу 	= тГраницаСнизуТип;
	ОблРедактированяФормулы.ГраницаСлева 	= тГраницаСлеваТип;
	ОблРедактированяФормулы.ГраницаСправа 	= тГраницаСправаТип;	
	
	РежимРедактированияФормулы = Ложь;
	УстановитьРежимРедактированияФормул();
	
	Элементы.РежимыРедактированияФормул.Доступность = Истина;	
	Элементы.ТекущаяФормула.Видимость = Истина;	
	Элементы.ГруппаТекстВыражения.Видимость = Ложь;
	
	Элементы.ФормаИзменитьОтбор.Доступность			  = Истина;
	Элементы.ПолеТабличногоДокументаМакет.Защита 	  = Ложь  ;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыражение(Команда)
	
	ФлОшибки = Ложь;
	СтруктураПараметровФормулы = ПолучитьОперандыФормулы(ФлОшибки);
	Если ФлОшибки Тогда
		ГруппаФормулыРаскрыта = Истина;
		РежимРедактированияФормулы  = Истина;
		Возврат;
	Иначе	
		Сообщить(Нстр("ru = 'Проверка успешно пройдена'"));
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПравилОбработки()
	
	ПравилоОбработки = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки, Объект.Владелец);
	
	Элементы.РежимыРедактированияФормул.СписокВыбора.Добавить("ВыражениеБланка", Нстр("ru = 'Вычисляемые выражения текущего бланка'"));
	РежимыРедактированияФормул = "ВыражениеБланка";

	
	Возврат;
	
	Если ЗначениеЗаполнено(ПравилоОбработки) Тогда
		Элементы.РежимыРедактированияФормул.СписокВыбора.Добавить(ПравилоОбработки.Код,ПравилоОбработки);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПравилаОбработки.Ссылка КАК Ссылка,
	               |	ПравилаОбработки.Код КАК Код,
	               |	ПравилаОбработки.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.ПравилаОбработки КАК ПравилаОбработки
	               |ГДЕ
	               |	ПравилаОбработки.Владелец = &Владелец
	               |	И ПравилаОбработки.Ссылка <> &ПравилоОбработки";
	
	Запрос.УстановитьПараметр("Владелец",Объект.Владелец);
	Запрос.УстановитьПараметр("ПравилоОбработки",ПравилоОбработки);

	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Элементы.РежимыРедактированияФормул.СписокВыбора.Добавить(Выборка.Код,Выборка.Ссылка);
	КонецЦикла;
	
	Элементы.РежимыРедактированияФормул.СписокВыбора.Добавить("ВыражениеБланка", Нстр("ru = 'Вычисляемые выражения текущего бланка'"));
		
	РежимыРедактированияФормул = ПравилоОбработки.Код;
	
КонецПроцедуры	

&НаКлиенте
Процедура РежимыРедактированияФормулПриИзменении(Элемент)
	
	ОбработкаИзмененияПравилаОбработки();
	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаИзмененияПравилаОбработки()
	
	//Справочники.БланкиОтчетов.УстановитьНадписьТипБД(ТипБД_Представление, ПравилоОбработки);
	ПравилоОбработки = Справочники.ПравилаОбработки.НайтиПоКоду(РежимыРедактированияФормул,,,Объект.Владелец);	
	ОбновитьКэшФункцийПоказателей();
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьКэшФункцийПоказателей(Показатель = Неопределено)
	
	ТаблицаКэшФункцийПоказателей = РеквизитФормыВЗначение("КэшФункцийПоказателей");
	Справочники.ВидыОтчетов.ЗаполнитьКэшПоказателей(ТаблицаКэшФункцийПоказателей, Показатель, ПравилоОбработки, Объект.Владелец);
	ЗначениеВРеквизитФормы(ТаблицаКэшФункцийПоказателей, "КэшФункцийПоказателей");
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоказателиОтчетов.Ссылка
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &Владелец
	|	И ПоказателиОтчетов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость)
	|	И НЕ ПоказателиОтчетов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец",Объект.Владелец);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		
		Элементы.НадписьПравилоОбработки.Видимость=Истина;
		
		Если ПравилоОбработки.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
			
			СтрокаШаблона = Нстр("ru = 'Остатки и обороты по счетам заполняются по данным другого отчета, связанного с планом счетов: %1'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				
				Если ЗначениеЗаполнено(ПравилоОбработки.ВидОтчетаОСВ) Тогда
					
					ТекстПравило = СтрШаблон(СтрокаШаблона, ПравилоОбработки.ВидОтчетаОСВ);
					
				Иначе
					
					ТекстПравило = СтрШаблон(СтрокаШаблона, НСтр("ru = ' <не указан>'"));
					
				КонецЕсли;
				
			КонецЕсли;
				
		ИначеЕсли ПравилоОбработки.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
			
			СтрокаШаблона = Нстр("ru = 'Остатки и обороты по счетам заполняются по данным регистра бухгалтерии текущей ИБ: %1'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				
				Если ЗначениеЗаполнено(ПравилоОбработки.РегистрБухгалтерииПоУмолчанию) Тогда
					
					ТекстПравило = СтрШаблон(СтрокаШаблона, ПравилоОбработки.РегистрБухгалтерииПоУмолчанию);
					
				Иначе
					
					ТекстПравило = СтрШаблон(СтрокаШаблона, НСтр("ru = ' <не указан>'"));
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ПравилоОбработки.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
			ИЛИ ПравилоОбработки.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов Тогда
			
			СтрокаШаблона = Нстр("ru = 'Остатки и обороты по счетам заполняются по данным регистра бухгалтерии внешней базы %1'");
			
			Если Не ПустаяСтрока(СтрокаШаблона) тогда
				
				Если ЗначениеЗаполнено(ПравилоОбработки.РегистрБухгалтерииПоУмолчанию) Тогда
					
					ТекстПравило = СтрШаблон(СтрокаШаблона, Строка(ПравилоОбработки.РегистрБухгалтерииПоУмолчанию.Владелец) + ": " + Строка(ПравилоОбработки.РегистрБухгалтерииПоУмолчанию));
					
				Иначе
					
					ТекстПравило = СтрШаблон(СтрокаШаблона, НСтр("ru = ': <не указан>'"));
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ТекстПравило = Нстр("ru = 'Остатки и обороты по счетам: общий источник заполнения не указан.'");
	
		КонецЕсли;
				
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Отказ = Ложь;
	
	ОбъектАБ = РеквизитФормыВзначение("ОбъектАналитическогоБланка");
	
	Если СохранитьНастройкиНового Тогда
		Справочники.БланкиОтчетов.СохранитьМакетМногопериодногоБланка(Объект.Ссылка,ПолеТабличногоДокументаМакет,ОбъектАБ,ЭтаФорма.УникальныйИдентификатор,Отказ,МакетДляВыводаПоказателей);
	КонецЕсли;
	
	Заголовок = Справочники.БланкиОтчетов.СформироватьЗаголовок(Объект.Владелец, Объект.Ссылка, Объект.Наименование);
	
	Если Объект.Мультиязычный Тогда
		
		ЗаписатьНовыеТекстыПредставления();
		НайтиОбластиТекста();
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНовыеТекстыПредставления()
	
	ТекТаблицаТекстов=РеквизитФормыВЗначение("ТекстыОбластейДополнительныеЯзыки");
	ДополнительныеЯзыкиУХ.ЗаписатьДанныеВРегистрТекстов(ТекТаблицаТекстов.Скопировать(Новый Структура("ДанныеИзменены",Истина)));	
	
КонецПроцедуры // ЗаписатьНовыеТекстыПредставления() 

&НаСервере
Процедура ОтобразитьШапкуИПодвал()
	
	Если Объект.СтрокаШапки > 0 Тогда
		
		
		НижняяГраницаШапки = ПолеТабличногоДокументаМакет.Область(Объект.СтрокаШапки, 1, Объект.СтрокаШапки, ПолеТабличногоДокументаМакет.ШиринаТаблицы);
		Если ПустаяСтрока(ИмяРисункаШапка) Тогда
			
			РисунокШапка = ПолеТабличногоДокументаМакет.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
			РисунокШапка.Текст = Нстр("ru = ' -- Шапка -- '");
			РисунокШапка.Узор = ТипУзораТабличногоДокумента.БезУзора;
			РисунокШапка.Шрифт = Новый Шрифт(РисунокШапка.Шрифт, , , Истина);
			РисунокШапка.ГраницаСправа = Ложь;
			РисунокШапка.ГраницаСнизу  = Ложь;
			РисунокШапка.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Точечная, 2);
			ИмяРисункаШапка = РисунокШапка.Имя;
			РисунокШапка.Расположить(НижняяГраницаШапки);
			
		Иначе
			
			ПолеТабличногоДокументаМакет.Рисунки[ИмяРисункаШапка].Расположить(НижняяГраницаШапки);
			
		КонецЕсли;
		
	ИначеЕсли НЕ ПустаяСтрока(ИмяРисункаШапка) Тогда
		ПолеТабличногоДокументаМакет.Рисунки.Удалить(ПолеТабличногоДокументаМакет.Рисунки[ИмяРисункаШапка]);
		ИмяРисункаШапка = "";
	КонецЕсли;
	
	Если Объект.СтрокаПодвала > 0 Тогда
		
		ВерхняяГраницаПодвала = ПолеТабличногоДокументаМакет.Область(Объект.СтрокаПодвала, 1, Объект.СтрокаПодвала, ПолеТабличногоДокументаМакет.ШиринаТаблицы);
		
		Если ПустаяСтрока(ИмяРисункаПодвал) Тогда
			
			РисунокПодвал = ПолеТабличногоДокументаМакет.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
			РисунокПодвал.Текст = Нстр("ru = ' -- Подвал -- '");
			РисунокПодвал.Узор = ТипУзораТабличногоДокумента.БезУзора;
			РисунокПодвал.Шрифт = Новый Шрифт(РисунокПодвал.Шрифт, , , Истина);
			РисунокПодвал.ГраницаСверху = Ложь;
			РисунокПодвал.ГраницаСправа  = Ложь;
			РисунокПодвал.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Точечная, 2);
			ИмяРисункаПодвал = РисунокПодвал.Имя;
			РисунокПодвал.Расположить(ВерхняяГраницаПодвала);
			
		Иначе
			
			ПолеТабличногоДокументаМакет.Рисунки[ИмяРисункаПодвал].Расположить(ВерхняяГраницаПодвала);
			
		КонецЕсли;
		
	ИначеЕсли НЕ ПустаяСтрока(ИмяРисункаПодвал) Тогда
		ПолеТабличногоДокументаМакет.Рисунки.Удалить(ПолеТабличногоДокументаМакет.Рисунки[ИмяРисункаПодвал]);
		ИмяРисункаПодвал = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьШапкуИПодвал()
	
	Если НЕ ПустаяСтрока(ИмяРисункаШапка) Тогда
		ПолеТабличногоДокументаМакет.Рисунки.Удалить(ПолеТабличногоДокументаМакет.Рисунки[ИмяРисункаШапка]);
		ИмяРисункаШапка = "";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИмяРисункаПодвал) Тогда
		ПолеТабличногоДокументаМакет.Рисунки.Удалить(ПолеТабличногоДокументаМакет.Рисунки[ИмяРисункаПодвал]);
		ИмяРисункаПодвал = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСуммаВыделенных(Команда)
	ВставитьСуммуВыделенныхЯчеекВФормулу();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаПлюс(Команда)
	ВставитьТекстВФормулу(" + ");
КонецПроцедуры

&НаКлиенте
Процедура КнопкаРавно(Команда)
	ВставитьТекстВФормулу(" = ");
КонецПроцедуры

&НаКлиенте
Процедура КнопкаРазделить(Команда)
	ВставитьТекстВФормулу(" / ");
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСкобки(Команда)
	ВставитьТекстВФормулу(" ()",-1);
КонецПроцедуры

&НаКлиенте
Процедура КнопкаМинус(Команда)
	ВставитьТекстВФормулу(" - ");
КонецПроцедуры

&НаКлиенте
Процедура КнопкаУмножить(Команда)
	ВставитьТекстВФормулу(" * ");
КонецПроцедуры

&НаКлиенте
Процедура КнопкаБольше(Команда)
	
	ВставитьТекстВФормулу(" > ");
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаМеньше(Команда)
	
	ВставитьТекстВФормулу(" < ");
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСуммуВыделенныхЯчеекВФормулу()
	
	Для Каждого ВыдОбласть Из ПолеТабличногоДокументаМакет.ВыделенныеОбласти Цикл	
		Если  ВыдОбласть.Верх =0 Тогда	
			Верх  = 1;
			Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	 
		ИначеЕсли  ВыдОбласть.Лево =0 Тогда	 	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = 1;
			Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;	
		Иначе	
			Верх  = ВыдОбласть.Верх;
			Низ   = ВыдОбласть.Низ;
			Лево  = ВыдОбласть.Лево;
			Право = ВыдОбласть.Право;	
		КонецЕсли;	
		
		Для ИндС = Верх По Низ Цикл
			Для ИндК = Лево По Право Цикл
				ТекОбл = ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);
				
				Если ТипЗнч(ТекОбл.Расшифровка) = Тип("Структура") И ТекОбл.Расшифровка.Свойство("Ссылка") Тогда	
					Если ЗначениеЗаполнено(ТекстФормулы.ПолучитьТекст()) Тогда 
						ВставитьТекстВФормулу(" + ");
					КонецЕсли;
					тОперанд = ПолучитьУидТекущегоПоказателя(ТекОбл.Расшифровка,ТекОбл.Имя);
					ВставитьТекстВФормулу(тОперанд);
				КонецЕсли;	  
				
				//Показатели формул...
				Если ТипЗнч(ТекОбл.Расшифровка) = Тип("Структура") И ТекОбл.Расшифровка.Свойство("ТекстФормулы") Тогда		
					Если ЗначениеЗаполнено(ТекстФормулы.ПолучитьТекст()) Тогда 
						ВставитьТекстВФормулу(" + ");
					КонецЕсли;
					ВставитьТекстВФормулу("("+ТекОбл.Расшифровка.ТекстФормулы+")");
				КонецЕсли;		
			КонецЦикла;	
		КонецЦикла;			
	КонецЦикла;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ТекстФормулы;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТекстВФормулу(ТекстВставки,Сдвиг=0)
	
	ПТД = Элементы.ТекстФормулы;	
	
	СтрокаНач=0;
	СтрокаКон=0;
	КолонкаНач=0;
	КолонкаКон=0;
	
	ПТД.ПолучитьГраницыВыделения(СтрокаНач,
								КолонкаНач,
								СтрокаКон,
								КолонкаКон);
	
	Если ПустаяСтрока(СокрЛП(ТекстФормулы.ПолучитьТекст())) Тогда
		
		ПТД.УстановитьГраницыВыделения(1,1,1,1);
				
	КонецЕсли;
		
	ПТД.ВыделенныйТекст = ТекстВставки;
	
	Если НЕ Сдвиг=0 Тогда
		
		ПТД.ПолучитьГраницыВыделения(СтрокаНач,
									КолонкаНач,
									СтрокаКон,
									КолонкаКон);
		
		ПТД.УстановитьГраницыВыделения(СтрокаНач,КолонкаНач+Сдвиг,СтрокаКон,КолонкаКон+Сдвиг);
		
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры // ВставитьТекстВФормулу() 

&НаСервере
Функция ДобавитьОперандДинамическойФормулы(Расшифровка,ТекУИД)
	
    текОбластьФормула = ПолеТабличногоДокументаМакет.Область(ИмяТекущейОбластиРедактированияФормулы);

	тРасшифровкаФормулОбластейПоказателей 			= ПолучитьИзВременногоХранилища(РасшифровкаФормулОбластейПоказателейАдрес);
	ТекущиеОтборыОперандов                   		= ПолучитьИзВременногоХранилища(глТекущиеОтборыОперандовАдрес);
	
	тОпернадов      = тРасшифровкаФормулОбластейПоказателей.Скопировать(Новый Структура("Показатель",Расшифровка.Ссылка));
	тОпернадов.Сортировать("ИндексПоказателя Убыв");
	Если тОпернадов.Количество() =0 Тогда
		ИндексПоказателя = -1;
	Иначе	
		ИндексПоказателя = тОпернадов[0].ИндексПоказателя;
	КонецЕсли;
	
	нОперанд 					=  тРасшифровкаФормулОбластейПоказателей.Добавить();
	нОперанд.ВидОтчета		 	=  Расшифровка.Ссылка.Владелец;
	нОперанд.ВидОтчетаКод		=  СокрЛП(Расшифровка.Ссылка.Владелец.Код);
	нОперанд.Показатель		 	=  Расшифровка.Ссылка;
	нОперанд.ПоказательКод		=  СокрЛП(Расшифровка.Ссылка.Код);
	нОперанд.УидГруппыОтборов	=  ТекУИД;
	нОперанд.ИндексПоказателя   =  ИндексПоказателя+1;
	нОперанд.ИмяВФормуле   		=  нОперанд.ВидОтчетаКод+"."+нОперанд.ПоказательКод+?(нОперанд.ИндексПоказателя>0,"#"+нОперанд.ИндексПоказателя,"");
	
	//Вот тут надо добавить отборы из показателя в операнд
	Если Расшифровка.Свойство("РасшифровкаГруппОтборов") Тогда	
		Для Каждого Стр Из Расшифровка.РасшифровкаГруппОтборов Цикл	
			нОперандОтбор				 = ТекущиеОтборыОперандов.Добавить();
			нОперандОтбор.ИмяОперанда    = нОперанд.ИмяВФормуле;
			нОперандОтбор.Ключ    		 = Стр.Ключ;
			нОперандОтбор.Значение    	 = Стр.Значение;	
		КонецЦикла;	 		
	КонецЕсли;	
	
	Возврат нОперанд.ИмяВФормуле;
	
КонецФункции	

&НаКлиенте
Процедура ПоказателиОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если РежимРедактированияФормулы Тогда	
		СтандартнаяОбработка = Ложь;
		
		СтруктураРасшифровки = Новый Структура();
		СтруктураРасшифровки.Вставить("УидГруппыОтборов",Неопределено);
		СтруктураРасшифровки.Вставить("Ссылка",Элемент.ТекущиеДанные.Ссылка);
		СтруктураРасшифровки.Вставить("ПоказательКод",СокрЛП(Элемент.ТекущиеДанные.Код));
		СтруктураРасшифровки.Вставить("ВидОтчета",    Элемент.ТекущиеДанные.Владелец);
		СтруктураРасшифровки.Вставить("ВидОтчетаКод", СокрЛП(Элемент.ТекущиеДанные.ВладелецКод));	
		СтруктураРасшифровки.Вставить("ТипЗначения"		,Элемент.ТекущиеДанные.ТипЗначения);
		СтруктураРасшифровки.Вставить("ИтогПоАналитике"	,Элемент.ТекущиеДанные.ВидИтога);
		
		ТекУид = СтруктураРасшифровки.УидГруппыОтборов;
		тОперанд = ОбъектАналитическогоБланка.РасшифровкаФормулОбластейПоказателей.НайтиСтроки(Новый Структура("Показатель,УидГруппыОтборов",СтруктураРасшифровки.Ссылка,СтруктураРасшифровки.УидГруппыОтборов));
		Если тОперанд.Количество() = 0  Тогда
			нИмяОперанда = ДобавитьОперандДинамическойФормулы(СтруктураРасшифровки,0);
			ВставитьТекстВФормулу("["+нИмяОперанда+"]");
		Иначе
		    ВставитьТекстВФормулу("["+тОперанд[0].ИмяВФормуле+"]");
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьРежимРедактированияФормул()
	
	Для Каждого Эл Из КоманднаяПанель.ПодчиненныеЭлементы Цикл		
		Если  ТипЗнч(Эл) = Тип("ДекорацияФормы") Тогда		
			Продолжить;
		КонецЕсли;	
		Эл.Доступность = НЕ РежимРедактированияФормулы;		
	КонецЦикла;		
	Элементы.ПоказатьПанельПоказателей.Доступность = Истина;
	
КонецФункции

&НаСервере
Процедура ОбновитьПолеМакета(ТабДок)
	
	ПолеТабличногоДокументаМакет.Очистить();
	ПолеТабличногоДокументаМакет.Вывести(ТабДок);
	
	Если Объект.Мультиязычный Тогда
		
		НомерОсновногоЯзыка=0;
		ЯзыкОтображения=0;
		НайтиОбластиТекста();
		
	КонецЕсли;
			
КонецПроцедуры // ОбновитьПолеМакета() 


#Область ПоддержкаМногоЯзычности

&НаСервере
Процедура ЗаполнитьТаблицуОбластей(ТекстыОбластейНов)
	
	Для НомСтр=1 По ПолеТабличногоДокументаМакет.ВысотаТаблицы Цикл
		
		Для НомКол=1 ПО ПолеТабличногоДокументаМакет.ШиринаТаблицы Цикл
			
			ТекОбласть=ПолеТабличногоДокументаМакет.Область(НомСтр,НомКол,НомСтр,НомКол);
			
			Если СтрНайти(ТекОбласть.Текст,"[")>0 И СтрНайти(ТекОбласть.Текст,"]")>0  Тогда 
				 Продолжить;
			КонецЕсли;
				
			Если НЕ ТекОбласть.Расшифровка = Неопределено  Тогда 
				 Продолжить;
			КонецЕсли;

			
			Если (Не ПустаяСтрока(ТекОбласть.Текст)) Тогда
				
				Если ТекстыОбластейНов.Найти(ТекОбласть.Текст,"Наименование")=Неопределено Тогда
					
					НоваяСтрока				= ТекстыОбластейНов.Добавить();
					НоваяСтрока.Наименование= ТекОбласть.Текст;
					НоваяСтрока.Верх	= ТекОбласть.Верх;
					НоваяСтрока.Лево	= ТекОбласть.Лево;
					НоваяСтрока.Низ		= ТекОбласть.Низ;
					НоваяСтрока.Право	= ТекОбласть.Право;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуОбластей() 

&НаСервере
Процедура НайтиОбластиТекста()
	
	ТекстыОбластейСтар=РеквизитФормыВЗначение("ТекстыОбластейДополнительныеЯзыки");
	ТекстыОбластейНов=ТекстыОбластейСтар.СкопироватьКолонки();
	
	ЗаполнитьТаблицуОбластей(ТекстыОбластейНов);
			
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТекстыОбластейНов.Верх КАК Верх,
	|	ТекстыОбластейНов.Лево КАК Лево,
	|	ТекстыОбластейНов.Низ КАК Низ,
	|	ТекстыОбластейНов.Право КАК Право,
	|	ТекстыОбластейНов.Наименование1 КАК Наименование1,
	|	ТекстыОбластейНов.Наименование2 КАК Наименование2,
	|	ТекстыОбластейНов.Наименование КАК Наименование
	|ПОМЕСТИТЬ ТекстыОбластейНов
	|ИЗ
	|	&ТекстыОбластейНов КАК ТекстыОбластейНов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТекстыОбластейНов.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекстыОбластейСтар.Наименование1 КАК Наименование1,
	|	ТекстыОбластейСтар.Наименование2 КАК Наименование2,
	|	ТекстыОбластейСтар.Наименование КАК Наименование
	|ПОМЕСТИТЬ ТекстыОбластейСтар
	|ИЗ
	|	&ТекстыОбластейСтар КАК ТекстыОбластейСтар
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТекстыОбластейСтар.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекстыНаДополнительныхЯзыках.Наименование КАК Наименование,
	|	ТекстыНаДополнительныхЯзыках.Наименование1 КАК Наименование1,
	|	ТекстыНаДополнительныхЯзыках.Наименование2 КАК Наименование2
	|ПОМЕСТИТЬ ТекстыОбщ
	|ИЗ
	|	РегистрСведений.ТекстыНаДополнительныхЯзыках КАК ТекстыНаДополнительныхЯзыках
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекстыОбластейНов.Наименование КАК Наименование,
	|	ТекстыОбластейНов.Верх КАК Верх,
	|	ТекстыОбластейНов.Лево КАК Лево,
	|	ТекстыОбластейНов.Низ КАК Низ,
	|	ТекстыОбластейНов.Право КАК Право,
	|	ЕСТЬNULL(ТекстыОбщ.Наименование1, """") КАК Наименование1Регистр,
	|	ЕСТЬNULL(ТекстыОбщ.Наименование2, """") КАК Наименование2Регистр,
	|	ЕСТЬNULL(ТекстыОбластейСтар.Наименование1, """") КАК Наименование1Стар,
	|	ЕСТЬNULL(ТекстыОбластейСтар.Наименование2, """") КАК Наименование2Стар
	|ПОМЕСТИТЬ ТекстыСопоставление
	|ИЗ
	|	ТекстыОбластейНов КАК ТекстыОбластейНов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТекстыОбластейСтар КАК ТекстыОбластейСтар
	|		ПО ТекстыОбластейНов.Наименование = ТекстыОбластейСтар.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТекстыОбщ КАК ТекстыОбщ
	|		ПО ТекстыОбластейНов.Наименование = ТекстыОбщ.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекстыСопоставление.Наименование КАК Наименование,
	|	ТекстыСопоставление.Верх КАК Верх,
	|	ТекстыСопоставление.Лево КАК Лево,
	|	ТекстыСопоставление.Низ КАК Низ,
	|	ТекстыСопоставление.Право КАК Право,
	|	ВЫБОР
	|		КОГДА ТекстыСопоставление.Наименование1Регистр = """"
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Наименование1Словарь,
	|	ВЫБОР
	|		КОГДА ТекстыСопоставление.Наименование2Регистр = """"
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Наименование2Словарь,
	|	ВЫБОР
	|		КОГДА ТекстыСопоставление.Наименование1Регистр = """"
	|			ТОГДА ТекстыСопоставление.Наименование1Стар
	|		ИНАЧЕ ТекстыСопоставление.Наименование1Регистр
	|	КОНЕЦ КАК Наименование1,
	|	ВЫБОР
	|		КОГДА ТекстыСопоставление.Наименование2Регистр = """"
	|			ТОГДА ТекстыСопоставление.Наименование2Стар
	|		ИНАЧЕ ТекстыСопоставление.Наименование2Регистр
	|	КОНЕЦ КАК Наименование2,
	|	ВЫБОР
	|		КОГДА ТекстыСопоставление.Наименование1Регистр = """"
	|					И НЕ ТекстыСопоставление.Наименование1Стар = """"
	|				ИЛИ ТекстыСопоставление.Наименование2Регистр = """"
	|					И НЕ ТекстыСопоставление.Наименование2Стар = """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДанныеИзменены
	|ИЗ
	|	ТекстыСопоставление КАК ТекстыСопоставление
	|
	|УПОРЯДОЧИТЬ ПО
	|	Верх,
	|	Лево";
	
	Запрос.УстановитьПараметр("ТекстыОбластейСтар",	ТекстыОбластейСтар);
	Запрос.УстановитьПараметр("ТекстыОбластейНов",	ТекстыОбластейНов);
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(),"ТекстыОбластейДополнительныеЯзыки");
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьКоординатыОбластейТекстов()
	
	ТекстыОбластейСтар=РеквизитФормыВЗначение("ТекстыОбластейДополнительныеЯзыки");
	ТекстыОбластейНов=ТекстыОбластейСтар.СкопироватьКолонки();
	
	ЗаполнитьТаблицуОбластей(ТекстыОбластейНов);
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТекстыОбластейНов.Верх КАК Верх,
	|	ТекстыОбластейНов.Лево КАК Лево,
	|	ТекстыОбластейНов.Низ КАК Низ,
	|	ТекстыОбластейНов.Право КАК Право,
	|	ТекстыОбластейНов.Наименование1 КАК Наименование1,
	|	ТекстыОбластейНов.Наименование2 КАК Наименование2,
	|	ТекстыОбластейНов.Наименование КАК Наименование
	|ПОМЕСТИТЬ ТекстыОбластейНов
	|ИЗ
	|	&ТекстыОбластейНов КАК ТекстыОбластейНов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТекстыОбластейНов.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекстыОбластейСтар.Наименование1 КАК Наименование1,
	|	ТекстыОбластейСтар.Наименование2 КАК Наименование2,
	|	ТекстыОбластейСтар.Наименование КАК Наименование,
	|	ТекстыОбластейСтар.ДанныеИзменены КАК ДанныеИзменены,
	|	ТекстыОбластейСтар.Наименование1Словарь КАК Наименование1Словарь,
	|	ТекстыОбластейСтар.Наименование2Словарь КАК Наименование2Словарь
	|ПОМЕСТИТЬ ТекстыОбластейСтар
	|ИЗ
	|	&ТекстыОбластейСтар КАК ТекстыОбластейСтар
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТекстыОбластейСтар.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекстыОбластейНов.Наименование КАК Наименование,
	|	ТекстыОбластейНов.Верх КАК Верх,
	|	ТекстыОбластейНов.Лево КАК Лево,
	|	ТекстыОбластейНов.Низ КАК Низ,
	|	ТекстыОбластейНов.Право КАК Право,
	|	ЕСТЬNULL(ТекстыОбластейСтар.Наименование1, ЛОЖЬ) КАК Наименование1,
	|	ЕСТЬNULL(ТекстыОбластейСтар.Наименование2, ЛОЖЬ) КАК Наименование2,
	|	ЕСТЬNULL(ТекстыОбластейСтар.ДанныеИзменены, ЛОЖЬ) КАК ДанныеИзменены,
	|	ЕСТЬNULL(ТекстыОбластейСтар.Наименование1Словарь, ЛОЖЬ) КАК Наименование1Словарь,
	|	ЕСТЬNULL(ТекстыОбластейСтар.Наименование2Словарь, ЛОЖЬ) КАК Наименование2Словарь
	|ИЗ
	|	ТекстыОбластейНов КАК ТекстыОбластейНов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТекстыОбластейСтар КАК ТекстыОбластейСтар
	|		ПО ТекстыОбластейНов.Наименование = ТекстыОбластейСтар.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Верх,
	|	Лево";
	
	Запрос.УстановитьПараметр("ТекстыОбластейСтар",	ТекстыОбластейСтар);
	Запрос.УстановитьПараметр("ТекстыОбластейНов",	ТекстыОбластейНов);
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(),"ТекстыОбластейДополнительныеЯзыки");
		
КонецПроцедуры // ОбновитьКоординатыОбластейТекстов() 

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетПриИзменении(Элемент)
	
	Если НЕ Объект.Мультиязычный Тогда
		
		Возврат;
	
	ИначеЕсли НЕ (ПолеТабличногоДокументаМакет.ВысотаТаблицы=ТекВысотаТаблицы И ПолеТабличногоДокументаМакет.ШиринаТаблицы=ТекШиринаТаблицы) Тогда
		
		  ОбновитьКоординатыОбластейТекстов();
		  
		  ТекВысотаТаблицы = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
		  ТекШиринаТаблицы = ПолеТабличногоДокументаМакет.ШиринаТаблицы;
		  
	КонецЕсли;
		  	
КонецПроцедуры

&НаКлиенте
Процедура ТекстыОбластейДополнительныеЯзыкиПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ТекстыОбластейДополнительныеЯзыки.ТекущиеДанные=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Строка=Элементы.ТекстыОбластейДополнительныеЯзыки.ТекущиеДанные;
	
	ТекОбласть=ПолучитьОбластьПоКоординатам(Строка);	
	Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть=ТекОбласть;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОбластьПоКоординатам(Строка)
	
	Возврат ПолеТабличногоДокументаМакет.Область(Строка.Верх,Строка.Лево,Строка.Низ,Строка.Право);
	
КонецФункции // ПолучитьОбластьПоКоординатам()

&НаКлиенте
Процедура ТекстыОбластейДополнительныеЯзыкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если (НЕ ОтменаРедактирования) Тогда
		
		СтрДанные=Элементы.ТекстыОбластейДополнительныеЯзыки.ТекущиеДанные;
		ТекНаименование=ПолучитьТекущуюКолонкуТекстов();
		
		ТекОбласть=ПолеТабличногоДокументаМакет.Область(СтрДанные.Верх,СтрДанные.Лево,СтрДанные.Низ,СтрДанные.Право);	
		ТекОбласть.Текст=СтрДанные[ТекНаименование];
		
		СтрДанные.ДанныеИзменены=Истина;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущуюКолонкуТекстов()
	
	Возврат "Наименование"+?(ЯзыкОтображения=0,"",ЯзыкОтображения);
	
КонецФункции // ПолучитьТекущуюКолонкуТекстов()

&НаКлиенте
Процедура ЗаполнитьПоСловарю(СтрокаОбласть)
	
	ДопЯзыки=ДополнительныеЯзыкиУХ.ПолучитьПредставленияНаДопЯзыках(СтрокаОбласть.Наименование);
	
	Для Индекс=1 По 2 Цикл
		
		Если ЗначениеЗаполнено(ДопЯзыки["Наименование"+Индекс]) Тогда		
			СтрокаОбласть["Наименование"+Индекс]=ДопЯзыки["Наименование"+Индекс];
			СтрокаОбласть["Наименование"+Индекс+"Словарь"]=Истина;		
		Иначе		
			СтрокаОбласть["Наименование"+Индекс+"Словарь"]=Ложь;	
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры // ЗаполнитьПоСловарю() 

&НаКлиенте
Процедура ОбновитьИнформациюТекстОбласти(Область)
	
	Если НЕ Объект.Мультиязычный Тогда	
		Возврат;	
	КонецЕсли;
	
	МассивПоказателей=КэшФункцийПоказателей.НайтиСтроки(Новый Структура("Код",Область.Имя));
	
	Если МассивПоказателей.Количество()>0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекНаименование=ПолучитьТекущуюКолонкуТекстов();
	
	Если ТекстыОбластейДополнительныеЯзыки.НайтиСтроки(Новый Структура(ТекНаименование,Область.Текст)).Количество()>0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураПоиска=ПолучитьКоординатыОбласти(Область);
	
	МассивТекст=ТекстыОбластейДополнительныеЯзыки.НайтиСтроки(СтруктураПоиска);
	
	Если МассивТекст.Количество()>0 Тогда
		
		Строкаобласть=МассивТекст[0];
		
	Иначе
				
		Строкаобласть=ТекстыОбластейДополнительныеЯзыки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОбласть,СтруктураПоиска);
				
	КонецЕсли;
	
	СтрокаОбласть[ТекНаименование]=Область.Текст;
	
	Если  ТекНаименование="Наименование" Тогда
		
		ЗаполнитьПоСловарю(СтрокаОбласть);
				
	КонецЕсли;			
	
КонецПроцедуры // ОбновитьИнформациюТекстОбласти()

&НаКлиенте
Функция ПолучитьКоординатыОбласти(Область)
	
	КоординатыОбласти=Новый Структура;
	КоординатыОбласти.Вставить("Лево",	Область.Лево);
	КоординатыОбласти.Вставить("Право",	Область.Право);
	КоординатыОбласти.Вставить("Верх",	Область.Верх);
	КоординатыОбласти.Вставить("Низ",	Область.Низ);
	
	Возврат КоординатыОбласти;
	
КонецФункции // ПолучитьКоординатыОбласти()

&НаКлиенте
Процедура РасшифровкаПараметра(Команда)
	
	РасшифровкаПараметраСервер();
	
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПараметраСервер()
	
	ПолеТабличногоДокументаМакет.ТекущаяОбласть.Формат = "---";
		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПроверитьНаличиеСлужебныхОбластей();
	
	ЗаписатьДополнительныеБланки(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеСлужебныхОбластей(ТихийРежим = Ложь)
	
	МакетСлужебныхОбластей = Справочники.БланкиОтчетов.ПолучитьМакет("ШаблонСлужебныхОбластей");
	
	Если НЕ ПолеТабличногоДокументаМакет.Область(1,0,1,0).Имя =  "ОбластьНастроекРаскрытийКолонок" Тогда
		
		ОбластьИсточник = МакетСлужебныхОбластей.Область("ОбластьНастроекРаскрытийКолонок");
		ОбластьПриемник = ПолеТабличногоДокументаМакет.Область(1,0,1,0);
		ПолеТабличногоДокументаМакет.ВставитьОбласть(ОбластьИсточник,ОбластьПриемник,ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если НЕ ТихийРежим Тогда
			ТекстСообщения = НСтр("ru = 'Добавлена служебная область, содержащая настройки раскрытий колонок'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;	
		
	Если НЕ ПолеТабличногоДокументаМакет.Область(0,1,0,1).Имя =  "ОбластьНастроекРаскрытийСтрок" Тогда
		
		ОбластьИсточник = МакетСлужебныхОбластей.Область("ОбластьНастроекРаскрытийСтрок");
		ОбластьПриемник = ПолеТабличногоДокументаМакет.Область(0,1,0,1);
		ПолеТабличногоДокументаМакет.ВставитьОбласть(ОбластьИсточник,ОбластьПриемник,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		
		Если НЕ ТихийРежим Тогда
			ТекстСообщения = НСтр("ru = 'Добавлена служебная область, содержащая настройки раскрытий строк'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПанельФорматирования(Команда)
	
	Элементы.ФормаОтобразитьПанельФорматирования.Пометка   = НЕ Элементы.ФормаОтобразитьПанельФорматирования.Пометка;
	Элементы.ГруппаПанельФорматирования.Видимость 		   = Элементы.ФормаОтобразитьПанельФорматирования.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаМакетПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	Если Область.Лево =1 ИЛИ Область.Верх = 1 Тогда
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКолонкуСлева(Команда)
	
	тОбластьИмя = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Имя;
	ДобавитьКолонкуСлеваСервер(тОбластьИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКолонкуСправа(Команда)
	
	тОбластьИмя = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Имя;
	ДобавитьКолонкуСправаСервер(тОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКолонкуСлеваСервер(тОбластьИмя)
	
	тОбласть = ПолеТабличногоДокументаМакет.Область(тОбластьИмя);
	ОбластьПриемник  = тОбласть;
	
	АналитическийБланкГенерацияМакетаУХСервер.ПолучитьОбластиВхождения(ПолеТабличногоДокументаМакет,тОбласть,ОбластиВхождения);       
	
	ОбластьИсточник = ПолеТабличногоДокументаМакет.Область(0,ПолеТабличногоДокументаМакет.ШиринаТаблицы+1,0,ПолеТабличногоДокументаМакет.ШиринаТаблицы+1);
	
	ПолеТабличногоДокументаМакет.ВставитьОбласть(ОбластьИсточник,ОбластьПриемник,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	ОбластьСКартинкой = Неопределено;
	
	Для Каждого Обл Из ОбластиВхождения Цикл 		
			
		ИмяОбласти = Обл.Значение;
		сОбласть   = ПолеТабличногоДокументаМакет.Область(ИмяОбласти);
		
		Если тОбласть.Лево < сОбласть.Лево Тогда	
			нОбласть   = ПолеТабличногоДокументаМакет.Область(0, сОбласть.Лево-1,0,сОбласть.Право);
			сОбласть.Имя = Неопределено;
			нОбласть.Имя = ИмяОбласти;	
			
			Для Инд = сОбласть.лево По сОбласть.Право Цикл		
				Если ТипЗнч(ПолеТабличногоДокументаМакет.Область(1,Инд,1,Инд).Картинка) = Тип("Картинка") Тогда			
					ОбластьСКартинкой = ПолеТабличногоДокументаМакет.Область(1,Инд,1,Инд);			
				КонецЕсли;			
			КонецЦикла;			
		КонецЕсли;
		
	КонецЦикла;
	
	//Если НЕ ОбластьСКартинкой = Неопределено Тогда		
	//	Если тОбласть.лево<ОбластьСКартинкой.Лево Тогда	
	//		нОбласть =  ПолеТабличногоДокументаМакет.Область(1,тОбласть.лево,1,тОбласть.лево);
	//		нОбласть.Картинка = БиблиотекаКартинок.НайтиВСодержании;
	//		нОбласть.ГоризонтальноеПоложениеКартинки  	=  ГоризонтальноеПоложение.Центр;
	//		нОбласть.ВертикальноеПоложениеКартинки  	=  ВертикальноеПоложение.Центр;
	//		нОбласть.РазмерКартинки 				  	=  РазмерКартинки.РеальныйРазмер;	
	//		нОбласть.Расшифровка                        =  ОбластьСКартинкой.Расшифровка;
	//		ОбластьСКартинкой.Картинка = Неопределено;
	//	КонецЕсли;		
	//КонецЕсли;
	
	ОбновитьКартинкуРаскрываемойОбласти(тОбластьИмя);
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьКолонкуСправаСервер(тОбластьИмя)
	
	тОбласть = ПолеТабличногоДокументаМакет.Область(тОбластьИмя);
	
	ОбластьПриемник = ПолеТабличногоДокументаМакет.Область(0, тОбласть.Право+1,0,тОбласть.Право+1);
	
	
	АналитическийБланкГенерацияМакетаУХСервер.ПолучитьОбластиВхождения(ПолеТабличногоДокументаМакет,тОбласть,ОбластиВхождения);       
	
	ОбластьИсточник = ПолеТабличногоДокументаМакет.Область(0,ПолеТабличногоДокументаМакет.ШиринаТаблицы+1,0,ПолеТабличногоДокументаМакет.ШиринаТаблицы+1);
	
	ПолеТабличногоДокументаМакет.ВставитьОбласть(ОбластьИсточник,ОбластьПриемник,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	ОбластьСКартинкой = Неопределено;
	
	Для Каждого Обл Из ОбластиВхождения Цикл 		
			
		ИмяОбласти = Обл.Значение;
		сОбласть   = ПолеТабличногоДокументаМакет.Область(ИмяОбласти);
		
		Если ОбластьПриемник.Право > сОбласть.Право Тогда	
			нОбласть   = ПолеТабличногоДокументаМакет.Область(0, сОбласть.Лево,0,сОбласть.Право+1);
			сОбласть.Имя = Неопределено;
			нОбласть.Имя = ИмяОбласти;	
				
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры


&НаСервере
Процедура ОбновитьКартинкуРаскрываемойОбласти(тОбластьИмя)
	
	тОбласть = ПолеТабличногоДокументаМакет.Область(тОбластьИмя);
	ОбластьПриемник  = тОбласть;
	
	АналитическийБланкГенерацияМакетаУХСервер.ПолучитьОбластиВхождения(ПолеТабличногоДокументаМакет,тОбласть,ОбластиВхождения);

	ТзОбластей = Новый ТаблицаЗначений;
    ТзОбластей.Колонки.Добавить("ЛевоОбласти");	
	ТзОбластей.Колонки.Добавить("ВерхОбласти");
	ТзОбластей.Колонки.Добавить("ИмяОбласти");
	
	РасшифровкаОбласти 		= Неопределено;
	
	глСтруктураРаскрытия 	= Неопределено;
	
	Для Каждого Обл Из ОбластиВхождения Цикл	
		сОбласть   = ПолеТабличногоДокументаМакет.Область(Обл.Значение);
		Нстр 				= ТзОбластей.Добавить();
		Нстр.ЛевоОбласти    = сОбласть.Лево;
		Нстр.ВерхОбласти    = сОбласть.Верх;	
		Нстр.ИмяОбласти     = Обл.Значение;
		
		Для Инд = сОбласть.лево По сОбласть.Право Цикл		
			Если ТипЗнч(ПолеТабличногоДокументаМакет.Область(1,Инд,1,Инд).Картинка) = Тип("Картинка") Тогда			
				ОбластьСКартинкой = ПолеТабличногоДокументаМакет.Область(1,Инд,1,Инд);			
				ОбластьСКартинкой.Картинка = Неопределено;
				РасшифровкаОбласти = ПолеТабличногоДокументаМакет.Область(1,Инд,1,Инд).Расшифровка;
                Прервать;
			КонецЕсли;			
			Если ТипЗнч(ПолеТабличногоДокументаМакет.Область(1,Инд,1,Инд).Расшифровка) = Тип("Структура") Тогда
				РасшифровкаОбласти = ПолеТабличногоДокументаМакет.Область(1,Инд,1,Инд).Расшифровка;
				//тНастроекРакрытия = ЗначениеИзСтрокиВнутр(РасшифровкаОбласти.НастройкиАналитикРаскрытия);
				//Если глСтруктураРаскрытия 	= Неопределено Тогда
				//	глСтруктураРаскрытия = тНастроекРакрытия.СкопироватьКолонки()
				//КонецЕсли;	 
				//Для Каждого СтрокаРаскрытия Из тНастроекРакрытия Цикл
				//	нГлСтрокаРаскрытия =глСтруктураРаскрытия.Добавить();
				//	ЗаполнитьЗначенияСвойств(нГлСтрокаРаскрытия,СтрокаРаскрытия);
				//КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;		
		
		Если НЕ РасшифровкаОбласти = Неопределено Тогда
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;

	Если ТзОбластей.Количество() = 0 Тогда
		 Возврат;
	КонецЕсли;	
	
	Если тОбласть.Лево = 0 Тогда
		 ТзОбластей.Сортировать("ВерхОбласти");
	 Иначе
		 ТзОбластей.Сортировать("ЛевоОбласти");
	 КонецЕсли;	
	 
	 //РасшифровкаОбласти.НастройкиАналитикРаскрытия = ЗначениеВСтрокуВнутр(глСтруктураРаскрытия);
	 
	 //Проверяем первую слева область 
	 ПерваяОбласть 				= ПолеТабличногоДокументаМакет.Область(ТзОбластей[0].ИмяОбласти);
	 ПерваяЯчейкаРаскрытия      = ПолеТабличногоДокументаМакет.Область(1,ПерваяОбласть.Лево,1,ПерваяОбласть.Лево);
	 
	 Если НЕ ТипЗнч(ПерваяЯчейкаРаскрытия.Расшифровка) = Тип("Структура") Тогда 
		 ПерваяЯчейкаРаскрытия.Расшифровка = РасшифровкаОбласти;	
	 КонецЕсли;
	 Если НЕ ТипЗнч(ПерваяЯчейкаРаскрытия.Картинка) = Тип("Картинка") Тогда			
		 ПерваяЯчейкаРаскрытия.Картинка = БиблиотекаКартинок.НайтиВСодержании;
		 ПерваяЯчейкаРаскрытия.ГоризонтальноеПоложениеКартинки  	=  ГоризонтальноеПоложение.Центр;
		 ПерваяЯчейкаРаскрытия.ВертикальноеПоложениеКартинки  		=  ВертикальноеПоложение.Центр;
		 ПерваяЯчейкаРаскрытия.РазмерКартинки 				  		=  РазмерКартинки.АвтоРазмер;				
	 КонецЕсли;	
	 
	 ПолеТабличногоДокументаМакет.Область(1,тОбласть.Лево,1,тОбласть.Лево).Расшифровка = РасшифровкаОбласти;
	 
 КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьКонструкторВыражений(Команда)
	
	ДоступныеАналитики = ПодготовитьПарамтерыСоспоставленияСАналитикой(ОбластиВхождения);	
	ПараметрыФормы = Новый Структура("ДоступныеАналитикиСтрока",ДоступныеАналитики);	
	Оповещение = Новый ОписаниеОповещения("ФормаВыбораРеквизитовЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Обработка.АналитическийБланк.Форма.ФормаВыбораРеквизитов", ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	

 КонецПроцедуры


#КонецОбласти

&НаСервере
Процедура ЗаполнитьРасшифровкуФормулОбластейПоказателей();
	
	тРасшифровкаФормулОбластейПоказателей = ОбъектАналитическогоБланка.РасшифровкаФормулОбластейПоказателей.Выгрузить();
	тРасшифровкаФормулОбластейПоказателей.Очистить();
	
	ТЗРасшифровкаОтборовГруппРаскрытия 		= ОбъектАналитическогоБланка.РасшифровкаГруппОтборов.Выгрузить();
	ТЗРасшифровкаОтборовГруппРаскрытия.Очистить();
	
	ТабПоказателей = Новый ТаблицаЗначений;
	ТабПоказателей.Колонки.Добавить("ПоказательСсылка",Новый ОписаниеТипов("СправочникСсылка.ПоказателиОтчетов"));
    ТабПоказателей.Колонки.Добавить("ИмяОбласти");
	ТабПоказателей.Колонки.Добавить("ИмяВФормуле");
    ТабПоказателей.Колонки.Добавить("ИндексПоказателя");
	
	глРасшифровкаОперандовФормулы  = Новый ТаблицаЗначений;
	глРасшифровкаОперандовФормулы.Колонки.Добавить("ИмяОперанда",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(150));
	глРасшифровкаОперандовФормулы.Колонки.Добавить("Ключ",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	глРасшифровкаОперандовФормулы.Колонки.Добавить("Значение");
	
	МаксУид = 0;
	
	ОбъектАБ = РеквизитФормывЗначение("ОбъектАналитическогоБланка");
	
	ОбъектАБ.КэшГруппОтборовПоказателей.Очистить();
	
	Для Каждого СтрФормула Из ПолеТабличногоДокументаМакет.Области Цикл 
		Если  Лев(СтрФормула.Имя,8) = "Формула_" Тогда
			ТекРасшифровкаФормулы = ЗначениеИзСтрокиВнутр(СтрФормула.Расшифровка.РасшифровкаФормулы);
			Для Каждого СтрОперанд Из ТекРасшифровкаФормулы Цикл
				Нстр 					= ТабПоказателей.Добавить();
				Нстр.ПоказательСсылка   = СтрОперанд.Показатель;
				Нстр.ИмяОбласти   		= СтрФормула.Имя;
				Нстр.ИндексПоказателя   = СтрОперанд.ИндексПоказателя;
				Нстр.ИмяВФормуле        = СтрОперанд.ИмяВФормуле;
			КонецЦикла;					
		КонецЕсли;		
	КонецЦикла;

	ТабПоказателей.Свернуть("ПоказательСсылка,ИмяОбласти,ИмяВФормуле,ИндексПоказателя");
	
	ТабПоказателейКопия  				=  ТабПоказателей.Скопировать(,"ПоказательСсылка");
	ТабПоказателейКопия.Свернуть("ПоказательСсылка");	
	ТзСвойстваПоказателей 				= АналитическийБланкГенерацияМакетаУХСервер.ПолучитьСвойстваВыбранныхПоказателей(ТабПоказателейКопия);
	
	глТзАналитикРаскрытия = АналитическийБланкГенерацияМакетаУХСервер.ПолучитьАналитикиРаскрытияПоказателей(ТабПоказателей.ВыгрузитьКолонку("ПоказательСсылка"));
	
	СтруктураТопологии = АналитическийБланкГенерацияМакетаУХСервер.ПолучитьТопологиюОбластейРаскрытия(ПолеТабличногоДокументаМакет);
	
	Для Каждого ТекФормула Из ТабПоказателей Цикл 
		
		ОбластьФормула = ПолеТабличногоДокументаМакет.Область(ТекФормула.ИмяОбласти);
		
		тСвойстваПоказателя = ТзСвойстваПоказателей.Найти(ТекФормула.ПоказательСсылка,"Ссылка");
		
		Нстр = тРасшифровкаФормулОбластейПоказателей.Добавить();
		Нстр.Показатель   		= ТекФормула.ПоказательСсылка;
		Нстр.ИндексПоказателя   = ТекФормула.ИндексПоказателя;
		Нстр.ИмяВФормуле  		= ТекФормула.ИмяВФормуле;
		Нстр.ПоказательКод      = СокрП(тСвойстваПоказателя.ПоказательКод);
		Нстр.ВидОтчета 		    = тСвойстваПоказателя.ВидОтчета;
		Нстр.ВидОтчетаКод       = СокрП(тСвойстваПоказателя.ВидОтчетаКод);
		
		ТЗРасшифровкаОтборовГруппРаскрытия.Очистить();
		
		Если ОбластьФормула.Расшифровка.Свойство("РасшифровкаГруппОтборовОперандов") Тогда 
						
			СтруктураЗначенийПоказателей = Новый Структура;
			СтруктураЗначенийПоказателей.Вставить(Нстр.ПоказательКод,ТекФормула.ПоказательСсылка);
				
			РасшифровкаОперандовФормулы 		= ЗначениеИзСтрокиВнутр(ОбластьФормула.Расшифровка.РасшифровкаГруппОтборовОперандов);
			текРасшифровкаОперандовФормулы      = РасшифровкаОперандовФормулы.НайтиСтроки(Новый Структура("ИмяОперанда",ТекФормула.ИмяВФормуле));
			
			эТзАналитикРаскрытия = глТзАналитикРаскрытия.Скопировать(Новый Структура("Показатель",ТекФормула.ПоказательСсылка));
			
			Обработки.АналитическийБланк.ЗполнитьПервоначальныйКэшОтборов(ТЗРасшифровкаОтборовГруппРаскрытия,"");			
			АналитическийБланкГенерацияМакетаУХСервер.ДополнитьОтборыАналитикамиРаскрытия(СтруктураЗначенийПоказателей,ТЗРасшифровкаОтборовГруппРаскрытия,эТзАналитикРаскрытия);

			
			Для Каждого ОтборРасшифровка Из текРасшифровкаОперандовФормулы Цикл				
				НстрОтборов =  ТЗРасшифровкаОтборовГруппРаскрытия.НайтиСтроки(Новый Структура("ПолеКод",ОтборРасшифровка.Ключ));	
				Если НстрОтборов.Количество() = 1 Тогда
					СтрОтборСвойства = АналитическийБланкГенерацияМакетаУХСервер.ПрочитатьСтрокуОтборов(ОтборРасшифровка);
					ЗаполнитьЗначенияСвойств(НстрОтборов[0],СтрОтборСвойства);	 				
					НстрОтборов[0].ЗначениеОтбора = ?(СтрОтборСвойства.ЗначениеОтбораСтрока = "",СтрОтборСвойства.ЗначениеОтбораСтрока,ЗначениеИзСтрокиВнутр(СтрОтборСвойства.ЗначениеОтбораСтрока));
					глРасшифровка = глРасшифровкаОперандовФормулы.Добавить();
					ЗаполнитьЗначенияСвойств(глРасшифровка,ОтборРасшифровка);
				КонецЕсли;		
			КонецЦикла;
			
		КонецЕсли;
		
		ТолькоСинтетика = Ложь;
		ТекУИД = АналитическийБланкГенерацияМакетаУХСервер.ДобавитьПоказательВГруппировки(ПолеТабличногоДокументаМакет,тСвойстваПоказателя,ТЗРасшифровкаОтборовГруппРаскрытия,ОбластьФормула.Имя,ОбъектАБ,ТолькоСинтетика,МаксУид,СтруктураТопологии);
		
		Нстр.УидГруппыОтборов  = ТекУИД;
		
	КонецЦикла;
	
	глРасшифровкаОперандовФормулы.Свернуть("ИмяОперанда,Значение,Ключ");
	
	РасшифровкаФормулОбластейПоказателейАдрес  = ПоместитьВоВременноеХранилище(тРасшифровкаФормулОбластейПоказателей,ЭтаФорма.УникальныйИдентификатор);
	глТекущиеОтборыОперандовАдрес              = ПоместитьВоВременноеХранилище(глРасшифровкаОперандовФормулы,ЭтаФорма.УникальныйИдентификатор);
	ЗначениеВРеквизитФормы(ОбъектАБ,"ОбъектАналитическогоБланка");
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьУидТекущегоПоказателя(Расшифровка,ИмяОбласти)
	
	ОбъектАБ = РеквизитФормывЗначение("ОбъектАналитическогоБланка");
	
	ТЗРасшифровкаОтборовГруппРаскрытия 				= ОбъектАналитическогоБланка.РасшифровкаГруппОтборов.Выгрузить();
	ТЗРасшифровкаОтборовГруппРаскрытия.Очистить();
		
	тРасшифровкаФормулОбластейПоказателей  			= ПолучитьИзВременногоХранилища(РасшифровкаФормулОбластейПоказателейАдрес);
	ТолькоСинтетика = Ложь; 
	
	ТзУидов                             = ОбъектАБ.КэшГруппОтборовПоказателей.Выгрузить();
	Если  ТзУидов.Количество() = 0 Тогда
		МаксУид  = 0;
	Иначе	
		ТзУидов.Сортировать("УидГруппыОтборовЧисло Убыв");
		МаксУид  = ТзУидов[0].УидГруппыОтборовЧисло;
	КонецЕсли;

	
	мПоказатели = Новый Массив;
	мПоказатели.Добавить(Расшифровка.Ссылка);
	тСвойстваПоказателя 				= АналитическийБланкГенерацияМакетаУХСервер.ПолучитьСвойстваВыбранныхПоказателей(мПоказатели)[0];
	
	ТЗРасшифровкаОтборовГруппРаскрытия.Очистить();
	
	Если Расшифровка.Свойство("РасшифровкаГруппОтборов") Тогда
			
		СтруктураОтборовТекущегоОперанда  = Новый Структура;
		
		СтруктураЗначенийПоказателей = Новый Структура;
		СтруктураЗначенийПоказателей.Вставить(ИмяОбласти,Расшифровка.Ссылка);
		
		Обработки.АналитическийБланк.ЗполнитьПервоначальныйКэшОтборов(ТЗРасшифровкаОтборовГруппРаскрытия,"");
		АналитическийБланкГенерацияМакетаУХСервер.ДополнитьОтборыАналитикамиРаскрытия(СтруктураЗначенийПоказателей,ТЗРасшифровкаОтборовГруппРаскрытия);
				
		ОтборыРасшифровка =  Расшифровка.РасшифровкаГруппОтборов;	
		Для Каждого ОтборРасшифровка Из ОтборыРасшифровка Цикл				
			НстрОтборов =  ТЗРасшифровкаОтборовГруппРаскрытия.НайтиСтроки(Новый Структура("ПолеКод",ОтборРасшифровка.Ключ));	
			Если НстрОтборов.Количество() = 1 Тогда
				СтрОтборСвойства = АналитическийБланкГенерацияМакетаУХСервер.ПрочитатьСтрокуОтборов(ОтборРасшифровка);
				ЗаполнитьЗначенияСвойств(НстрОтборов[0],СтрОтборСвойства);	 				
				НстрОтборов[0].ЗначениеОтбора = ?(СтрОтборСвойства.ЗначениеОтбораСтрока = "",СтрОтборСвойства.ЗначениеОтбораСтрока,ЗначениеИзСтрокиВнутр(СтрОтборСвойства.ЗначениеОтбораСтрока));
				СтруктураОтборовТекущегоОперанда.Вставить(ОтборРасшифровка.Ключ,ОтборРасшифровка.Значение);
			КонецЕсли;		
		КонецЦикла;
			
	КонецЕсли;
	
	ТекУИД = АналитическийБланкГенерацияМакетаУХСервер.ДобавитьПоказательВГруппировки(ПолеТабличногоДокументаМакет,тСвойстваПоказателя,ТЗРасшифровкаОтборовГруппРаскрытия,ИмяОбласти,ОбъектАБ,ТолькоСинтетика,МаксУид);	            
	
	тОперанд =тРасшифровкаФормулОбластейПоказателей.НайтиСтроки(Новый Структура("Показатель,УидГруппыОтборов",РАсшифровка.Ссылка,ТекУИД));
	
	Если тОперанд.Количество() = 0  Тогда
		нИмяОперанда = ДобавитьОперандДинамическойФормулы(Расшифровка,ТекУИД);
		ТекстОперанда = "["+нИмяОперанда+"]";
	Иначе
		ТекстОперанда = "["+тОперанд[0].ИмяВФормуле+"]";
	КонецЕсли;	
	
	ЗначениеВРеквизитФормы(ОбъектАБ,"ОбъектАналитическогоБланка");
	
	Возврат ТекстОперанда; 
	
КонецФункции	

&НаСервере
Процедура ЗаблокироватьБланкДляИмпорта()
	
	Элементы.ГруппаКомандыРаботыСЯчейками.Доступность    									 	= Объект.БланкДляОтображения; 
	Элементы.ПанельЯчейки.Доступность    													 	= Объект.БланкДляОтображения;
	Элементы.ПомощникГенерацииМакетаРаскрытия.Доступность    								 	= Объект.БланкДляОтображения;
	Элементы.ПолеТабличногоДокументаМакет.ТолькоПросмотр 									 	= НЕ Объект.БланкДляОтображения;	
	Элементы.КМ_ПолеТабличногоДокументаМакетКонтекстноеМенюСопоставитьСАналитикой.Доступность  	= Объект.БланкДляОтображения;
	Элементы.НадписьНазначениеБланка.Видимость                                                 	= НЕ Объект.БланкДляОтображения;
	Элементы.ИмяЛиста.Видимость                                                             	= НЕ Объект.БланкДляОтображения;
	
КонецПроцедуры	

&НаСервере
Процедура ПолеТабличногоДокументаМакетОчистить();
	
	ПолеТабличногоДокументаМакет.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура БланкДляОтображенияПриИзменении(Элемент)
	
	ЗаблокироватьБланкДляИмпорта();
	
	Если  Объект.БланкДляОтображения = Ложь  Тогда	
		Оповещение = Новый ОписаниеОповещения("ПереходВрежимИмпортаЗавершение", ЭтаФорма);
	    ПоказатьВопрос(Оповещение, Нстр("ru = 'При переключении в режим импорта и отображения бланк будет сгенерирован автоматически. Продолжить?'"), РежимДиалогаВопрос.ДаНет);	
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть = ПолеТабличногоДокументаМакет.Область(2,2,2,2);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСоСмещениемВниз(Команда)
		
	СкопироватьСоСмещениемВнизНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСоСмещениемВнизНаСервере()
	
	ТекущаяОбласть = Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	ТекущаяОбластьВерх = ТекущаяОбласть.Верх;
	ВысотаТаблицы = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
	ТекущаяОбластьНиз = Мин(ТекущаяОбласть.Низ, ВысотаТаблицы);
	
	Если ТекущаяОбластьВерх >= ВысотаТаблицы тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяОбластьВерх = ТекущаяОбластьНиз тогда
		ТекущаяОбластьНиз = ВысотаТаблицы;
	КонецЕсли;
	
	ТекущаяОбластьЛево = ТекущаяОбласть.Лево;
	
	ОбластьРедактирования = ПолеТабличногоДокументаМакет.Область(ТекущаяОбластьВерх, ТекущаяОбластьЛево, ТекущаяОбластьВерх, ТекущаяОбластьЛево);
	ТекстФормулыОбласти = СокрЛП(ОбластьРедактирования.Текст);
	
	Если ТекстФормулыОбласти = "" тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКолонки = Новый ТаблицаЗначений;
	ПараметрыКолонки.Колонки.Добавить("Ключ", ОбщегоНазначения.ОписаниеТипаЧисло(12));
	ПараметрыКолонки.Колонки.Добавить("Значение", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	ПараметрыКолонки.Колонки.Добавить("ПостфиксОтборов", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	
	ПозицияПоиска = 1;
	ОбъектАБ = РеквизитФормывЗначение("ОбъектАналитическогоБланка");
	
	Если ТипЗнч(ОбъектАБ) <> Тип("ОбработкаОбъект.АналитическийБланк") тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРасшифровкуФормулОбластейПоказателей();
	
	Пока ПозицияПоиска > 0 Цикл
		
		ПозицияНачалоПараметра = СтрНайти(ТекстФормулыОбласти, "[", НаправлениеПоиска.СНачала, ПозицияПоиска);
		Если ПозицияНачалоПараметра = 0 тогда
			Прервать;
		КонецЕсли;
		ПозицияПоиска = ПозицияНачалоПараметра;
		
		ПозицияКонецПараметра = СтрНайти(ТекстФормулыОбласти, "]", НаправлениеПоиска.СНачала, ПозицияПоиска);
		Если ПозицияКонецПараметра = 0 тогда
			Прервать;
		КонецЕсли;
		ПозицияПоиска = ПозицияКонецПараметра;
		
		Если ПозицияНачалоПараметра > ПозицияКонецПараметра тогда
			ПозицияПоиска = ПозицияНачалоПараметра + 1;
			Продолжить;
		КонецЕсли;
		
		ИмяПараметра = Сред(ТекстФормулыОбласти, ПозицияНачалоПараметра + 1, ПозицияКонецПараметра - ПозицияНачалоПараметра - 1);
		ПолноеИмяПараметра = "[" + ИмяПараметра + "]";
		
		ПозицияПостфикса = СтрНайти(ИмяПараметра, "#");
		Если ПозицияПостфикса > 0 тогда
			ПостфиксОтборов = Сред(ИмяПараметра, ПозицияПостфикса);
			ИмяПараметра = Лев(ИмяПараметра, ПозицияПостфикса - 1);
		Иначе
			ПостфиксОтборов = "";
		КонецЕсли;
		
		ИмяПараметра = Сред(ИмяПараметра, СтрНайти(ИмяПараметра, ".") + 1);
		
		ДанныеПараметра = ОбъектАБ.КэшИменОбластейПоказателей.Найти(ИмяПараметра, "ПоказательКод");
		Если ДанныеПараметра = неопределено тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьСПараметром = ПолеТабличногоДокументаМакет.Области.Найти(ДанныеПараметра.ИмяОбласти);
		Если ОбластьСПараметром = неопределено тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбластьСПараметром.Верх <> ТекущаяОбластьВерх тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПараметрыКолонки = ПараметрыКолонки.Добавить();
		СтрокаПараметрыКолонки.Ключ = ОбластьСПараметром.Лево;
		СтрокаПараметрыКолонки.Значение = ПолноеИмяПараметра;
		СтрокаПараметрыКолонки.ПостфиксОтборов = ПостфиксОтборов;
		
	КонецЦикла;
	
	Если ПараметрыКолонки.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	
	ИндексСтроки = ТекущаяОбластьВерх + 1;
	ТекущаяКолонка = ТекущаяОбластьЛево;
	
	ИмяТекущейОбластиРедактированияФормулы = ОбластьРедактирования.Имя;
		
	Пока ИндексСтроки <= ТекущаяОбластьНиз Цикл
		
		НовыйТекст = ТекстФормулыОбласти;
		
		ОбластьВставки = ПолеТабличногоДокументаМакет.Область(ИндексСтроки, ТекущаяКолонка, ИндексСтроки, ТекущаяКолонка);
		ИмяТекущейОбластиРедактированияФормулы = ОбластьВставки.Имя;
		
		Для Каждого ЭлементСоответствия Из ПараметрыКолонки Цикл
			
			ОбластьСтроки = ПолеТабличногоДокументаМакет.Область(ИндексСтроки, ЭлементСоответствия.Ключ, ИндексСтроки, ЭлементСоответствия.Ключ);
			тОперанд = ПолучитьУидТекущегоПоказателя(ОбластьСтроки.Расшифровка, ОбластьСтроки.Имя);
			СтарыйОперанд = ЭлементСоответствия.Значение;
			
			ПозицияПостфикса = СтрНайти(тОперанд, "#");
			Если ПозицияПостфикса > 0 тогда
				НовыйОперанд = Лев(тОперанд, ПозицияПостфикса - 1) + ЭлементСоответствия.ПостфиксОтборов + "]";
			Иначе
				НовыйОперанд = СтрЗаменить(тОперанд, "]", ЭлементСоответствия.ПостфиксОтборов + "]");
			КонецЕсли;
			
			НовыйТекст = СтрЗаменить(НовыйТекст, СтарыйОперанд, НовыйОперанд);
			ТекстФормулы.УстановитьТекст(НовыйТекст);
			
			Если ЭлементСоответствия.ПостфиксОтборов <> "" тогда
				
				СтруктураПараметров = ПолучитьРасшифровкуОперандовТаблицуФормулы(СтарыйОперанд, Ложь);
				Если ТипЗнч(СтруктураПараметров) <> Тип("Структура") тогда
					Продолжить;
				КонецЕсли;
				
				тРасшифровкаОтборов = ПолучитьИзВременногоХранилища(СтруктураПараметров.ТЗРасшифровкаОтборов);
				Если ТипЗнч(тРасшифровкаОтборов) <> Тип("ТаблицаЗначений") тогда
					Продолжить;
				КонецЕсли;
				
				тРасшифровкаОтборов.Колонки.Удалить("ЗначениеОтбора");
				тРасшифровкаОтборов.Колонки.Добавить("ЗначениеОтбора");
				
				Для Каждого СтрокаОтборов Из тРасшифровкаОтборов Цикл
					СтрокаОтборов.Использовать = Ложь;
					
					Если СтрокаОтборов.ЗначениеОтбораСтрока <> "" тогда
						СтрокаОтборов.ЗначениеОтбора = ЗначениеИзСтрокиВнутр(СтрокаОтборов.ЗначениеОтбораСтрока);
						СтрокаОтборов.Использовать = Истина;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураВозврата = Новый Структура;
				СтруктураВозврата.Вставить("ОтборыГруппы", ПоместитьВоВременноеХранилище(тРасшифровкаОтборов));
				СтруктураВозврата.Вставить("ОтображатьСуммуВДопВалюте", Ложь);
				
				КолонкаНач = СтрНайти(НовыйТекст, НовыйОперанд);
				КолонкаКон = КолонкаНач + СтрДлина(НовыйОперанд) - 1;
				
				ОбновитьКэшОтборовОперандов(СтруктураВозврата, НовыйОперанд, КолонкаНач, КолонкаКон);
				НовыйТекст = ТекстФормулы.ПолучитьТекст();
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбластьВставки.Текст = НовыйТекст;		
				
		СтруктураПараметровФормулы = ПолучитьОперандыФормулы(Ложь);		
		ЗаписатьФормулу(СтруктураПараметровФормулы);
		
		ИндексСтроки = ИндексСтроки + 1;
		Модифицированность = Истина;
		
	КонецЦикла;
			
КонецПроцедуры


#Область РаботаСДиаграммами

&НаКлиенте
Процедура ВставитьДиаграмму(Команда)
		
	Диаграмма = ПолеТабличногоДокументаМакет.Рисунки.ДОбавить(ТипРисункаТабличногоДокумента.Диаграмма);
    Диаграмма.Лево = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Лево;
	Диаграмма.Верх = ПолеТабличногоДокументаМакет.ТекущаяОбласть.Верх;
	Диаграмма.Ширина = 80;
	Диаграмма.Высота = 80;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОбластьДанных(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ФормаНастройкиДиаграммыЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Обработка.АналитическийБланк.Форма.ФормаНастройкиДиаграммы", ПодготовитьПараметрыСвойствДиаграммыДанных()
	,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаНастройкиДиаграммыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	ОбновитьСвойстваДиагарммы(Результат);
		
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыСвойствДиаграммыДанных()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяДиаграммы",Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Имя);
	
	Если Не ЗначениеЗаполнено(Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка) Тогда
		 СтруктураРасшифровки = Новый Структура;
		 СтруктураРасшифровки.Вставить("СвязаннаяОбластьИмя","");
		 СтруктураРасшифровки.Вставить("СвязаннаяОбластьБланк",Объект.Ссылка);
		 Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка = СтруктураРасшифровки;
	ИначеЕсли ТипЗнч(Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка) = Тип("Строка") Тогда
		 СтруктураРасшифровки = Новый Структура;
		 СтруктураРасшифровки.Вставить("СвязаннаяОбластьИмя",Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка);
		 СтруктураРасшифровки.Вставить("СвязаннаяОбластьБланк",Объект.Ссылка);
		 Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка = СтруктураРасшифровки;
	КонецЕсли;	
	
	ПараметрыФормы.Вставить("СвязаннаяОбластьИмя",Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка.СвязаннаяОбластьИмя);
	ПараметрыФормы.Вставить("СвязаннаяОбластьБланк",Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Расшифровка.СвязаннаяОбластьБланк);
	
	
	Если ПараметрыФормы.СвязаннаяОбластьБланк = Объект.Ссылка Тогда 
		ПараметрыФормы.Вставить("ТекущийМакетАдрес",ПоместитьВоВременноеХранилище(ПолеТабличногоДокументаМакет,ЭтаФорма.УникальныйИдентификатор));
	Иначе
		ПолеТабличногоДокументаМакетДругогоБланка   = Новый ТабличныйДокумент;
		текНаборЗаписей = РегистрыСведений.НастройкиАналитическихБланков.СоздатьНаборЗаписей();
		текНаборЗаписей.Отбор.Бланк.Установить(ПараметрыФормы.СвязаннаяОбластьБланк);
		текНаборЗаписей.Прочитать();
		Если  текНаборЗаписей.Количество() =1 Тогда			
			ЗначениеСохраняемойНастройки = текНаборЗаписей[0].ХранилищеДополнительныхНастроек.Получить();	
			Если  ЗначениеСохраняемойНастройки.Свойство("ТабДокМакет") Тогда		
				ПолеТабличногоДокументаМакетДругогоБланка.Вывести(ЗначениеСохраняемойНастройки.ТабДокМакет);
			КонецЕсли;
			Если  ЗначениеСохраняемойНастройки.Свойство("ФиксацияСверху") Тогда		
				ПолеТабличногоДокументаМакетДругогоБланка.ФиксацияСверху = ЗначениеСохраняемойНастройки.ФиксацияСверху;
			КонецЕсли;
			Если  ЗначениеСохраняемойНастройки.Свойство("ФиксацияСлева") Тогда		
				ПолеТабличногоДокументаМакетДругогоБланка.ФиксацияСлева = ЗначениеСохраняемойНастройки.ФиксацияСлева;
			КонецЕсли;	
		КонецЕсли;	
		ПараметрыФормы.Вставить("ТекущийМакетАдрес",ПоместитьВоВременноеХранилище(ПолеТабличногоДокументаМакетДругогоБланка,ЭтаФорма.УникальныйИдентификатор));

	КонецЕсли;
	
	СкрытьОбластьДанныхДиаграммы = Ложь;
	
	Если ЗначениеЗаполнено(ПараметрыФормы.СвязаннаяОбластьИмя) Тогда
		СкрытьОбластьДанныхДиаграммы = Истина;
		тОбласть = ПолеТабличногоДокументаМакет.Область(ПараметрыФормы.СвязаннаяОбластьИмя);
		Для ИндСтроки =  тОбласть.Верх По тОбласть.Низ Цикл
			Если ПолеТабличногоДокументаМакет.Область(ИндСтроки,0,ИндСтроки,0).Видимость Тогда
				 СкрытьОбластьДанныхДиаграммы = Ложь;
				 Прервать;
			КонецЕсли;			
		КонецЦикла;			
	КонецЕсли;	
		
	ПараметрыФормы.Вставить("СкрытьОбластьДанныхДиаграммы",СкрытьОбластьДанныхДиаграммы);
    ПараметрыФормы.Вставить("СерииВСтроках",Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть.Объект.СерииВСтроках);
    ПараметрыФормы.Вставить("ТекущийБланк",Объект.Ссылка);
	
	Возврат ПараметрыФормы;
	
КонецФункции	

&НаСервере
Функция ОбновитьСвойстваДиагарммы(ПараметрыДиаграммы)
	
	тДиаграмма 	= ПолеТабличногоДокументаМакет.Рисунки[ПараметрыДиаграммы.ИмяДиаграммы];
	
	СтруктураРасшифровки = Новый Структура;
	СтруктураРасшифровки.Вставить("СвязаннаяОбластьИмя",ПараметрыДиаграммы.СвязаннаяОбластьПредставление);
	СтруктураРасшифровки.Вставить("СвязаннаяОбластьБланк",ПараметрыДиаграммы.СвязаннаяОбластьБланк);
	
	тДиаграмма.Расшифровка 			= СтруктураРасшифровки;		
	тДиаграмма.Объект.СерииВСтроках = ПараметрыДиаграммы.СерииВСтроках;
		
КонецФункции	


#КонецОбласти

#Область РаботаСДополнительнымиБланками

&НаСервере
Функция ПрочитатьДополнительныеБланки()
	
	Для Каждого СтрДопБланк Из Объект.ДополнительныеБланки Цикл
		
		НстрБланка = ДополнительныеБланки.Добавить();
		НстрБланка.Бланк = СтрДопБланк.Бланк;
		
		Если НЕ СтрДопБланк.ЦветЗакладки = "" Тогда
			НстрБланка.ЦветЗакладки = ЗначениеИзСтрокиВнутр(СтрДопБланк.ЦветЗакладки); 
		Иначе	
			НстрБланка.ЦветЗакладки = ЦветаСтиля.ЦветФонаФормы;
		КонецЕсли;	
		
		Если НЕ СтрДопБланк.КартинкаЗакладки = "" Тогда
			НстрБланка.КартинкаЗакладки = ЗначениеИзСтрокиВнутр(СтрДопБланк.КартинкаЗакладки); 
		КонецЕсли;	
	
	КонецЦикла;	

	
КонецФункции	

&НаСервере
Функция ЗаписатьДополнительныеБланки(ТекущийОбъект)
	
	ТекущийОбъект.ДополнительныеБланки.Очистить();
	
	Для Каждого СтрДопБланк Из ДополнительныеБланки Цикл
		
		НстрБланка 				= ТекущийОбъект.ДополнительныеБланки.Добавить();
		НстрБланка.Бланк 		= СтрДопБланк.Бланк;
		НстрБланка.ЦветЗакладки = ЗначениеВСтрокуВнутр(СтрДопБланк.ЦветЗакладки); 
				
		Если  ЗначениеЗаполнено(СтрДопБланк.КартинкаЗакладки)  Тогда
			НстрБланка.КартинкаЗакладки = ЗначениеВСтрокуВнутр(СтрДопБланк.КартинкаЗакладки); 
		КонецЕсли;	
	
	КонецЦикла;	

	
КонецФункции	

&НаКлиенте
Процедура ДополнительныеБланкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДополнительныеБланкиКартинкаЗакладки" Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВыборКартинкиОтображенияВЗакладкиЗАвершение", ЭтаФорма);
		
		ОткрытьФорму("Обработка.АналитическийБланк.Форма.ДиалогВыбораКартинки",
		,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКартинкиОтображенияВЗакладкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено  Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	Элементы.ДополнительныеБланки.ТекущиеДанные.КартинкаЗакладки = Результат.ВыбраннаяКартинка;
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеБланкиПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;

	Если  НЕ Элемент.ТекущиеДанные = Неопределено 
		И Элемент.ТекущиеДанные.ЦветЗакладки = Новый Цвет(0,0,0) 
		И Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Бланк) Тогда
		УстановитьЦветСтиля();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветСтиля()
	
	 ДополнительныеБланки[ДополнительныеБланки.Количество()-1].ЦветЗакладки = ЦветаСтиля.ЦветФонаФормы;
	
КонецПроцедуры




#КонецОбласти

	
	