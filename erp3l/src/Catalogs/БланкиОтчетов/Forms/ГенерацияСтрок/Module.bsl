
&НаСервере
Процедура ЗаполнитьСписокКодов()
	
	СписокКодовСтрок.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтрокиОтчетов.Код КАК Код
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &Владелец
	|	И (НЕ СтрокиОтчетов.ПометкаУдаления)");
	Запрос.УстановитьПараметр("Владелец", ВидОтчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокКодовСтрок.Добавить(СокрЛП(Выборка.Код));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВидОтчета = Параметры.ВидОтчета;
	ПланСчетов = ВидОтчета.ПланСчетов;
	
	ДлинаКодаСтроки  = Метаданные.Справочники.СтрокиОтчетов.ДлинаКода;
	
	ЗаполнитьСписокКодов();
	
	ТабличноеПолеСтрокТаблица = РеквизитФормыВЗначение("ТабличноеПолеСтрок");
	
	Если Параметры.МассивТаблицы <> Неопределено Тогда
		Для Каждого Строка Из Параметры.МассивТаблицы Цикл
			ЗаполнитьЗначенияСвойств(ТабличноеПолеСтрокТаблица.Добавить(), Строка);
		КонецЦикла; 
	КонецЕсли;
	
	Справочники.БланкиОтчетов.УстановитьУникальныеКодыДляТаблицы(ТабличноеПолеСтрокТаблица, СписокКодовСтрок, ДлинаКодаСтроки);
	
	ЗначениеВРеквизитФормы(ТабличноеПолеСтрокТаблица, "ТабличноеПолеСтрок");
	
	ВидПоказателя   				= Перечисления.ВидыПоказателей.Активный;
	ТипЗначения     				= Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
	Предназначение		 			= ?(ЗначениеЗаполнено(ВидОтчета.Предназначение),ВидОтчета.Предназначение,Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ПроизвольныеДанные);
	ОценкаПоложительногоОтклонения 	= Перечисления.ВидыОценокОтклонений.Позитивно;
	
	УстановитьВидимостьКолонок();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКолонок()
	
	Элементы.ТабличноеПолеСтрокСчетБД.Видимость							=(Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость);
	Элементы.ТабличноеПолеСтрокСтатьяДвиженияДенежныхСредств.Видимость	=(Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств);
	Элементы.ТабличноеПолеСтрокСтатьяДоходовИРасходов.Видимость			=(Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов);
	Элементы.ТабличноеПолеСтрокСтатьяДвиженияРесурсов.Видимость			=(Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов);
	
	Элементы.ГруппаАналитики.Видимость=(Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ПроизвольныеДанные);
	Элементы.ПриходРасход.Видимость=(Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств 
									ИЛИ Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов
									ИЛИ Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов);
									
									
	ТаблицаЯзыков = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТаблицаЯзыков");
	
	Если ТаблицаЯзыков.Количество() = 0 Тогда
		
		Элементы.ТабличноеПолеСтрокНаименование1.Видимость = Ложь;
		Элементы.ТабличноеПолеСтрокНаименование2.Видимость = Ложь;
		
	ИначеЕсли ТаблицаЯзыков.Количество() = 1 Тогда
		
		Элементы.ТабличноеПолеСтрокНаименование1.Видимость = Истина;
		Элементы.ТабличноеПолеСтрокНаименование1.Заголовок = ТаблицаЯзыков[0].НаименованиеЯзыка;
		
		Элементы.ТабличноеПолеСтрокНаименование2.Видимость = Ложь;
	
	Иначе
		
		Элементы.ТабличноеПолеСтрокНаименование1.Видимость = Истина;
		Элементы.ТабличноеПолеСтрокНаименование1.Заголовок = ТаблицаЯзыков[0].НаименованиеЯзыка;	
		
		Элементы.ТабличноеПолеСтрокНаименование2.Видимость = Истина;
		Элементы.ТабличноеПолеСтрокНаименование2.Заголовок = ТаблицаЯзыков[1].НаименованиеЯзыка;
	
	КонецЕсли;								
	
КонецПроцедуры // 


&НаКлиенте
Процедура ТабличноеПолеСтрокКодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Текст = ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление(Текст);
	
	Если СписокКодовСтрок.НайтиПоЗначению(СокрЛП(Текст)) <> Неопределено
	 ИЛИ ТабличноеПолеСтрок.НайтиСтроки(Новый Структура("Код", Текст)).Количество() > 0 Тогда
		
		ИндексСтроки = Элементы.ТабличноеПолеСтрок.ТекущаяСтрока;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = Нстр("ru = 'Код строки не уникален.'");
		СообщениеПользователю.Поле  = "ТабличноеПолеСтрок[" + ИндексСтроки + "].Код";
		СообщениеПользователю.Сообщить();
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = Новый Структура("Значение", Текст);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовыеСтроки(СтруктураОтвета)
	
	Для Каждого Элемент Из ТабличноеПолеСтрок Цикл
		
		ОбъектСтрокиОтчета = Справочники.СтрокиОтчетов.СоздатьЭлемент();
		ОбъектСтрокиОтчета.Владелец        = ВидОтчета;
		
		Если ЗначениеЗаполнено(Справочники.СтрокиОтчетов.НайтиПоКоду(СокрЛП(Элемент.Код),,,ВидОтчета)) Тогда
			ОбъектСтрокиОтчета.Код=ОбщегоНазначенияУХ.ПолучитьВозможныйКодСправочника(СокрЛП(Элемент.Код),ДлинаКодаСтроки,"СтрокиОтчетов",ВидОтчета);
		Иначе
		    ОбъектСтрокиОтчета.Код=СокрЛП(Элемент.Код);
		КонецЕсли;	
		
		ОбъектСтрокиОтчета.Наименование						= Элемент.Наименование;
		ОбъектСтрокиОтчета.Наименование1					= Элемент.Наименование1;
		ОбъектСтрокиОтчета.Наименование2					= Элемент.Наименование2;
		
		ОбъектСтрокиОтчета.ВидКурса                       	= ВидКурса;
		ОбъектСтрокиОтчета.ТипЗначения                    	= ТипЗначения;
		ОбъектСтрокиОтчета.Родитель                       	= ГруппирующаяСтрока;
		ОбъектСтрокиОтчета.ВидИтога                     	= ВидИтога;
		ОбъектСтрокиОтчета.ВидПоказателя                	= ВидПоказателя;
		ОбъектСтрокиОтчета.Предназначение            		= Предназначение;
		
		Если Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств Тогда
			
			ОбъектСтрокиОтчета.СтатьяДвиженияДенежныхСредств= Элемент.СтатьяДвиженияДенежныхСредств;
			ОбъектСтрокиОтчета.ГруппаРаскрытия				= Справочники.ВидыОтчетов.ПолучитьГруппуРаскрытияДляСтатьи(ВидОтчета,Элемент.СтатьяДвиженияДенежныхСредств);
			ОбъектСтрокиОтчета.ВидИтога						= Перечисления.ВидыИтоговПоказателя.Сумма;
			ОбъектСтрокиОтчета.ПриходРасход                 = ?(ЗначениеЗаполнено(ПриходРасход),ПриходРасход,Элемент.СтатьяДвиженияДенежныхСредств.ПриходРасход);
			
		ИначеЕсли Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов Тогда
			
			ОбъектСтрокиОтчета.СтатьяДоходовИРасходов		= Элемент.СтатьяДоходовИРасходов;
			ОбъектСтрокиОтчета.ГруппаРаскрытия				= Справочники.ВидыОтчетов.ПолучитьГруппуРаскрытияДляСтатьи(ВидОтчета,Элемент.СтатьяДоходовИРасходов);
			ОбъектСтрокиОтчета.ВидИтога						= Перечисления.ВидыИтоговПоказателя.Сумма;
			ОбъектСтрокиОтчета.ПриходРасход                 = ?(ЗначениеЗаполнено(ПриходРасход),ПриходРасход,Элемент.СтатьяДоходовИРасходов.ПриходРасход);
			
		ИначеЕсли Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов Тогда
			
			ОбъектСтрокиОтчета.СтатьяДвиженияРесурсов		= Элемент.СтатьяДвиженияРесурсов;
			ОбъектСтрокиОтчета.ГруппаРаскрытия				= Справочники.ВидыОтчетов.ПолучитьГруппуРаскрытияДляСтатьи(ВидОтчета,Элемент.СтатьяДвиженияРесурсов);
			ОбъектСтрокиОтчета.ВидИтога						= Перечисления.ВидыИтоговПоказателя.Сумма;
			ОбъектСтрокиОтчета.ПриходРасход                 = ?(ЗначениеЗаполнено(ПриходРасход),ПриходРасход,Элемент.СтатьяДвиженияРесурсов.ПриходРасход);
			
		ИначеЕсли Предназначение=Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость И ЗначениеЗаполнено(Элемент.СчетБД) Тогда
			
			ОбъектСтрокиОтчета.СчетБД						=  Элемент.СчетБД;
			
			ОбъектСтрокиОтчета.ГруппаРаскрытия=Справочники.ВидыОтчетов.ПолучитьГруппуРаскрытияДляСчета(ВидОтчета,Элемент.СчетБД);
			
			Если ЗначениеЗаполнено(ОбъектСтрокиОтчета.ГруппаРаскрытия) Тогда
				
				ОбъектСтрокиОтчета.ВидИтога=Перечисления.ВидыИтоговПоказателя.Сумма;
				
			Иначе
				
				ОбъектСтрокиОтчета.ВидИтога="";
				
			КонецЕсли;
			
			ОбъектСтрокиОтчета.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
			
			Если ОбъектСтрокиОтчета.СчетБД.Вид=Перечисления.ВидыСчетовБД.Активный  Тогда
				ОбъектСтрокиОтчета.ВидПоказателя=Перечисления.ВидыПоказателей.Активный;
			ИначеЕсли ОбъектСтрокиОтчета.СчетБД.Вид=Перечисления.ВидыСчетовБД.Пассивный Тогда
				ОбъектСтрокиОтчета.ВидПоказателя=Перечисления.ВидыПоказателей.Пассивный;
			КонецЕсли;
			
			ОбъектСтрокиОтчета.Наименование=СокрЛП(ОбъектСтрокиОтчета.СчетБД.Код)+" "+ОбъектСтрокиОтчета.СчетБД.Наименование;;
			ОбъектСтрокиОтчета.Код="Счет_"+СтрЗаменить(СокрЛП(ОбъектСтрокиОтчета.СчетБД.Код),".","_");
				
		Иначе
			
			ОбъектСтрокиОтчета.ГруппаРаскрытия				= ГруппаРаскрытия;
			ОбъектСтрокиОтчета.ВидИтога						= ВидИтога;
			ОбъектСтрокиОтчета.ПриходРасход                 = ПриходРасход;
			
		КонецЕсли;
			
		ОбъектСтрокиОтчета.ДействияПриАктуализации        = ДействияПриАктуализации;
		ОбъектСтрокиОтчета.ОценкаПоложительногоОтклонения = ОценкаПоложительногоОтклонения;
		ОбъектСтрокиОтчета.Оборотный                      = Оборотный;
		ОбъектСтрокиОтчета.НеМасштабируется               = НеМасштабируется;
		ОбъектСтрокиОтчета.Внутригрупповой                = ВнутриГрупповой;
		ОбъектСтрокиОтчета.ПорядковыйНомер                = ПолучитьВозможныйИндексСтроки(ОбъектСтрокиОтчета.Родитель, Элемент.ПорядковыйНомер);
		
		Попытка
			ОбъектСтрокиОтчета.Записать();
		Исключение
			
			СтрокаШаблона = Нстр("ru = 'Ошибка при записи строки - %1: '");
			Если ЗначениеЗаполнено(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Элемент.Наименование) + ИнформацияОбОшибке().Описание);
			КонецЕсли;
			
			Продолжить;
		КонецПопытки;
		СтруктураОтвета.Вставить("R" + Формат(Элемент.ВерхЯчейки,"ЧГ=0") + "C" + Формат(Элемент.ЛевоЯчейки,"ЧГ=0"), "Строка_" + СокрЛП(ОбъектСтрокиОтчета.Код));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВозможныйИндексСтроки(Родитель, Инд)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(СтрокиОтчетов.ПорядковыйНомер) КАК ПорядковыйНомер
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &Владелец
	|	И (НЕ СтрокиОтчетов.ПометкаУдаления)
	|	И СтрокиОтчетов.Родитель = &Родитель
	|	И СтрокиОтчетов.ПорядковыйНомер >= &ПорядковыйНомер";
				   
	Запрос.УстановитьПараметр("Владелец", ВидОтчета);
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("ПорядковыйНомер", Инд);
	
	ПорядковыйНомер = Запрос.Выполнить().Выгрузить()[0].ПорядковыйНомер;
	
	Если ТипЗнч(ПорядковыйНомер) = Тип("Null") Тогда
		Возврат Инд;
	Иначе
		Возврат ПорядковыйНомер + 1;
	КонецЕсли;
				   
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	СтруктураОтвета = Новый Структура;
	Состояние(Нстр("ru = 'Создаются новые строки отчета ...'"));
	СоздатьНовыеСтроки(СтруктураОтвета);
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.СтрокиОтчетов"));
	
	Состояние();
	Закрыть(СтруктураОтвета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредназначениеПриИзменении(Элемент)
	
	УстановитьВидимостьКолонок();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСтатьиБюджета(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("РежимВыбора",			Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор",	Ложь);
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе",	Истина);
	СтруктураПараметров.Вставить("Предназначение",		Предназначение);
	СтруктураПараметров.Вставить("СправочникСтруктуры",	"СтрокиОтчетов");
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Стр = "ОбщаяФорма.ФормаВыбораСтатьиБюджета";
		ОткрытьФорму(Стр, СтруктураПараметров, ВладелецФормы, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли
		
КонецПроцедуры // НачалоВыбораСтатьиБюджета()
