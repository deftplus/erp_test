
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мПоказатели Экспорт;
Перем мОснование Экспорт;
Перем ЗаписьНовогоОбъекта;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА

// Процедура - обработчик события объекта "ПриКопировании".
//
Процедура ПриКопировании(ОбъектКопирования)
	
	мОснование = ОбъектКопирования;
	
КонецПроцедуры

// Процедура - обработчик события объекта "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьНовогоОбъекта=ЭтоНовый();
	
	СтрокаШаблона = НСтр("ru = 'Бланк отчета: %1 не может быть записан:'");
	Если ЗначениеЗаполнено(СтрокаШаблона) тогда
		ШапкаОшибки = СтрШаблон(СтрокаШаблона, ЭтотОбъект);
	КонецЕсли;
	
	Если Не ЭтоГруппа Тогда
		ПроверитьВозможностьЗаписи(Отказ, Истина, ШапкаОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОбластьВСтруктуру(СтруктураМакета, ТаблДок, Область, ВидОбласти)
		
	Если Область <> Неопределено Тогда
		СтруктураМакета.Вставить(ВидОбласти, ТаблДок.ПолучитьОбласть(Область.Имя));
	Иначе
		СтруктураМакета.Вставить(ВидОбласти, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СохранитьМакетВХранилищеЗначений(ТаблДок,ВыводитьСообщения=Истина, КодЯзыка = 0)Экспорт
	
	Если ТипЗнч(ТаблДок) <> Тип("ТабличныйДокумент") Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.БланкиОтчетов.СохранитьМакетВХранилище(ЭтотОбъект, ТаблДок, ВыводитьСообщения, КодЯзыка);
	
КонецПроцедуры

// Проверяет возможность записи объекта.
//
Процедура ПроверитьВозможностьЗаписи(Отказ, Сообщать = Ложь, ШапкаОшибки = "") Экспорт
	
	Отказ = Ложь;
	
	Если ЭтоНовый() ИЛИ (НЕ Константы.ПроверятьУтверждениеНастроекОтчетов.Получить()) Тогда
		Возврат;
	КонецЕсли;
	
	Если Ссылка.Утвержден Тогда
		
		Если Не Утвержден Тогда
			
			Отказ = УправлениеОтчетамиУХ.ПроверитьНаличиеДокументовПоЭлементуНастройки(Ссылка,"ШаблонОтчета");
			
			Если Отказ Тогда
				
				Если Сообщать Тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = ' - нельзя снять флаг ""Утвержден"" у бланка, который
					|используют утвержденные экземпляры отчетов.'"));
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
		Иначе
			Отказ = Истина;
			
			Если Сообщать Тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = ' - нельзя вносить изменения в утвержденный бланк отчета.
				| Для редактирования снимите флаг ""Утвержден""'"));
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
		
	Иначе
		Отказ = Ложь;
		Возврат;
	КонецЕсли;		
			
КонецПроцедуры

Функция ПроизвестиСинтаксическийКонтрольМодуляШаблона(МодульДляПроверки, ОписаниеОшибки) Экспорт
	
	ДокНО = Документы.НастраиваемыйОтчет.СоздатьДокумент();
	Возврат ДокНО.ПроверитьМодуль(МодульДляпроверки, ОписаниеОшибки);
	
КонецФункции

Функция ПроверитьОбластьНаОбъединенность(ТабДок, Область) Экспорт
    ТекОбласть = ТабДок.Область(Область.Верх, Область.Лево);
	Возврат ТекОБласть.Право = Область.Право И ТекОбласть.Низ = Область.Низ;
КонецФункции

// Функция проверяет наличие настраиваемых отчетов, созданных по указанному шаблону 
// и имеющих статус "Утверждено".
Функция ПроверитьНаНаличиеУтвержденныхЭлементов() Экспорт	
	
	Возврат УправлениеОтчетамиУХ.ПроверитьНаличиеДокументовПоЭлементуНастройки(Ссылка,"ШаблонОтчета");
	
КонецФункции

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗаписьНовогоОбъекта Тогда
		
		УстановитьПраваПоВладельцу();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПраваПоВладельцу()
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		МодульНастройкаПрав=ОбщегоНазначения.ОбщийМодуль("НастройкаПравДоступаУХ");	
		МодульНастройкаПрав.УстановитьПраваБланкаПоВидуОтчета(Владелец,Ссылка);
		
	КонецЕсли;
		
КонецПроцедуры // УстановитьПраваПоВладельцу()

ЗаписьНовогоОбъекта=Ложь;

#КонецЕсли
