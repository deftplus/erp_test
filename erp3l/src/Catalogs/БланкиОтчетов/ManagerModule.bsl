#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


Функция СформироватьЗаголовок(Владелец, Ссылка, Наименование) Экспорт
	
	МассивЭлементовЗаголовка = Новый Массив;
	МассивЭлементовЗаголовка.Добавить(НСтр("ru = 'Бланк'"));
	Если Не ПустаяСтрока(Наименование) Тогда
		МассивЭлементовЗаголовка.Добавить(Наименование);
	КонецЕсли;
	Если ЗначениеЗаполнено(Владелец) Тогда
		МассивЭлементовЗаголовка.Добавить(НСтр("ru = 'вида отчета:'"));
	    МассивЭлементовЗаголовка.Добавить(Владелец);
	КонецЕсли;
	
	Если Не Ссылка.Пустая() Тогда
		АктуальныйШаблонВидаОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "АктуальныйШаблон");
		Если АктуальныйШаблонВидаОтчета = Ссылка Тогда
			МассивЭлементовЗаголовка.Добавить(НСтр("ru = '(Шаблон по умолчанию)'"));
		КонецЕсли;
	Иначе
			МассивЭлементовЗаголовка.Добавить(НСтр("ru = '(создание)'"));
	КонецЕсли;
	
	Возврат СтрСоединить(МассивЭлементовЗаголовка, " ");
	
КонецФункции

Функция ВернутьСписокПравилОбработки(Владелец, ПравилоОбработки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаОбработки.Ссылка,
	|	ПравилаОбработки.Представление
	|ИЗ
	|	Справочник.ПравилаОбработки КАК ПравилаОбработки
	|ГДЕ
	|	ПравилаОбработки.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокПравилОбработки = Новый СписокЗначений;
	
	ПравилоОбработкиПоУмолчанию = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки, Владелец, Неопределено, Неопределено, Неопределено);
	
	ПравилоОбработки = ПравилоОбработкиПоУмолчанию;
	
	Картинка = БиблиотекаКартинок.ПравилоОбработки;
	
	Пока Выборка.Следующий() Цикл
		СписокПравилОбработки.Добавить(Выборка.Ссылка, Выборка.Представление,ПравилоОбработкиПоУмолчанию = Выборка.Ссылка,?(ПравилоОбработкиПоУмолчанию = Выборка.Ссылка, Картинка, Неопределено));
	КонецЦикла;
	
	Возврат СписокПравилОбработки;
	
КонецФункции

Процедура УстановитьНадписьТипБД(Надпись, ПравилоОБработки) Экспорт
	
	Если ЗначениеЗаполнено(ПравилоОбработки) Тогда
		
		Если ЗначениеЗаполнено(ПравилоОбработки.ТипБД) тогда
			СтрокаШаблона = Нстр("ru = '(Тип ВИБ: %1)'");
			
			Надпись = "";
			Если Не ПустаяСтрока(СтрокаШаблона) тогда								
				Надпись = СтрШаблон(СтрокаШаблона, ПравилоОбработки.ТипБД.Наименование);
			КонецЕсли;
		Иначе
			Надпись = Нстр("ru = '(Тип ВИБ не установлен)'");
		КонецЕсли;
		
	Иначе
		Надпись = Нстр("ru = '(Не выбрано правило обработки)'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПредустановленныеПараметры(Владелец, Параметры) Экспорт
	
	Параметры.Очистить();
	
	НоваяСтрока     = Параметры.Добавить();
	НоваяСтрока.Код               = "Организация";
	НоваяСтрока.Наименование      = Нстр("ru = 'Организационная единица'");
	НоваяСтрока.Предустановленный = Истина;
	
	Если Владелец.РазделениеПоПроектам Тогда
		
		НоваяСтрока     = Параметры.Добавить();
		НоваяСтрока.Код               = "Проект";
		НоваяСтрока.Наименование      = Нстр("ru = 'Проект'");
		НоваяСтрока.Предустановленный = Истина;
		
	КонецЕсли;	
	
	НоваяСтрока     = Параметры.Добавить();
	НоваяСтрока.Код               = "ОсновнаяВалюта";
	НоваяСтрока.Наименование      = Нстр("ru = 'Основная валюта'");
	НоваяСтрока.Предустановленный = Истина;
	
	НоваяСтрока     = Параметры.Добавить();
	НоваяСтрока.Код               = "ПериодОтчета";
	НоваяСтрока.Наименование      = Нстр("ru = 'Период отчета'");
	НоваяСтрока.Предустановленный = Истина;
	
	НоваяСтрока     = Параметры.Добавить();
	НоваяСтрока.Код               = "Сценарий";
	НоваяСтрока.Наименование      = Нстр("ru = 'Сценарий отчета'");
	НоваяСтрока.Предустановленный = Истина;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ЗначениеЗаполнено(Владелец["ВидАналитики" + Инд]) Тогда
			
			НоваяСтрока     = Параметры.Добавить();
			НоваяСтрока.Код               = "Аналитика" + Инд;
			
			СтрокаШаблона = Нстр("ru = 'Аналитика %1 отчета'");
			
			НоваяСтрока.Наименование = "";
			Если Не ПустаяСтрока(СтрокаШаблона) тогда								
				НоваяСтрока.Наименование = СтрШаблон(СтрокаШаблона, Инд);
			КонецЕсли;

			НоваяСтрока.Предустановленный = Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	НоваяСтрока     = Параметры.Добавить();
	НоваяСтрока.Код               = "ЕдиницаИзмерения";
	НоваяСтрока.Наименование      = Нстр("ru = 'Ед. изм.'");
	НоваяСтрока.Предустановленный = Истина;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВидыОтчетовПараметрыОтчета.Код,
	                      |	ВидыОтчетовПараметрыОтчета.Наименование,
	                      |	ВидыОтчетовПараметрыОтчета.ЗначениеПоУмолчанию,
	                      |	ЛОЖЬ КАК Предустановленный
	                      |ИЗ
	                      |	Справочник.ВидыОтчетов.ПараметрыОтчета КАК ВидыОтчетовПараметрыОтчета
	                      |ГДЕ
	                      |	ВидыОтчетовПараметрыОтчета.Ссылка = &Владелец");
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), Параметры);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ТАБЛИЦ ДЛЯ ГЕНЕРАЦИИ КОЛОНОК И СТРОК.

Функция СформироватьТаблицуСтрок(ТаблДок, МассивЯчеек, ДлинаКодаСтроки) Экспорт
	
	// Метаданные справочника Строки отчета.
	ДлинаКодаСтроки         = Метаданные.Справочники.СтрокиОтчетов.ДлинаКода;
	ДлинаНаименованияСтроки = Метаданные.Справочники.СтрокиОтчетов.ДлинаНаименования;
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("ПорядковыйНомер", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5));
	ТаблицаЗначений.Колонки.Добавить("Код", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(ДлинаКодаСтроки));
	ТаблицаЗначений.Колонки.Добавить("Наименование", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(ДлинаНаименованияСтроки));
	ТаблицаЗначений.Колонки.Добавить("ВерхЯчейки", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5));
	ТаблицаЗначений.Колонки.Добавить("ЛевоЯчейки", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5));
		
	Для Каждого ИмяОбласти Из МассивЯчеек Цикл
		
		ТекОбласть = ТаблДок.Область(ИмяОбласти);
		Если ТекОбласть <> Неопределено Тогда
			ТекСтрока                  = ТаблицаЗначений.Добавить();
			ТекСтрока.Код              = ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(ТекОбласть.Текст,ДлинаКодаСтроки,"СтрокиОтчетов");
			ТекСтрока.Наименование     = ТекОбласть.Текст;
			ТекСтрока.ПорядковыйНомер  = ТекОбласть.Верх;
			ТекСтрока.ВерхЯчейки       = ТекОбласть.Верх;
			ТекСтрока.ЛевоЯчейки       = ТекОбласть.Лево;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Функция СформироватьТаблицуКолонок(ТаблДок, МассивЯчеек, ДлинаКодаКолонки) Экспорт
	

	ДлинаКодаКолонки			= Метаданные.Справочники.КолонкиОтчетов.ДлинаКода;
	ДлинаНаименованияКолонки    = Метаданные.Справочники.КолонкиОтчетов.ДлинаНаименования;
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("ПорядковыйНомер", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5));
	ТаблицаЗначений.Колонки.Добавить("Код", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(ДлинаКодаКолонки));
	ТаблицаЗначений.Колонки.Добавить("Наименование", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(ДлинаНаименованияКолонки));
	ТаблицаЗначений.Колонки.Добавить("ВерхЯчейки", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5));
	ТаблицаЗначений.Колонки.Добавить("ЛевоЯчейки", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5));
		
	Для Каждого ИмяОбласти Из МассивЯчеек Цикл
		
		ТекОбласть = ТаблДок.Область(ИмяОбласти);
		Если ТекОбласть <> Неопределено Тогда
			ТекСтрока                  = ТаблицаЗначений.Добавить();
			ТекСтрока.Код              = ОбщегоНазначенияУХ.СформироватьКодНаОснованииНаименования(ТекОбласть.Текст,ДлинаКодаКолонки,"КолонкиОтчетов");
			ТекСтрока.Наименование     = ТекОбласть.Текст;
			ТекСтрока.ПорядковыйНомер  = ТекОбласть.Лево;
			ТекСтрока.ВерхЯчейки       = ТекОбласть.Верх;
			ТекСтрока.ЛевоЯчейки       = ТекОбласть.Лево;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаЗначений;

	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Процедура СохранитьМакетВХранилище(Объект, ТаблДок, ВыводитьСообщения=Истина, КодЯзыка = 0) Экспорт
	
	Если ТипЗнч(ТаблДок) <> Тип("ТабличныйДокумент") Тогда
		Возврат;
	КонецЕсли;
	
	СписокИмен = УправлениеОтчетамиУХ.ПолучитьСписокИменГруппРаскрытия(Объект.Владелец, Истина);
	
	Сжатие = Новый СжатиеДанных(9);
	// Только при сохранении основного отчета производится иницализация таблицы раскрытий и запись в поле макет.
	Если КодЯзыка = 0 Тогда
		Объект.Макет           = Новый ХранилищеЗначения(ТаблДок, Сжатие);
		Объект.МакетРаскрытий.Очистить();
	КонецЕсли;
	
	#Если Клиент Тогда
		ОбщееКоличество = СписокИмен.Количество();
		Инд             = 1;
	#КонецЕсли
	
	ПрименитьПараметрыОтображения(ТаблДок, Объект);
	
	ОбластиГруппыРаскрытия = Новый Массив;
	ОбластиГруппыРаскрытия.Добавить(Новый Структура("Суффикс,Описание", "_Шапка", "Шапка"));
	ОбластиГруппыРаскрытия.Добавить(Новый Структура("Суффикс,Описание", "", "Содержимое"));
	ОбластиГруппыРаскрытия.Добавить(Новый Структура("Суффикс,Описание", "_Подвал", "Подвал"));
	
	Для Каждого ИмяГруппыРаскрытия Из СписокИмен Цикл
		
		#Если Клиент Тогда
			Если ВыводитьСообщения Тогда
				Состояние(НСтр("ru = 'Запись макета ('") + Формат(Инд * 100 / ОбщееКоличество, "ЧЦ=3; ЧДЦ=0; ЧН=0") + "%)");
				Инд = Инд + 1;
			КонецЕсли;
		#КонецЕсли
		
		КодГруппыРаскрытия = СокрЛП(ИмяГруппыРаскрытия.Значение);
		
		СтруктураМакета = Новый Структура;
		
		Для ИндексОбласти = 0 По ОбластиГруппыРаскрытия.ВГраница() Цикл
			
			Область = ТаблДок.Области.Найти(КодГруппыРаскрытия + ОбластиГруппыРаскрытия[ИндексОбласти].Суффикс);
			
			Если НЕ Область = Неопределено Тогда
				СтруктураМакета.Вставить(ОбластиГруппыРаскрытия[ИндексОбласти].Описание, ТаблДок.ПолучитьОбласть(Область.Имя));
				ТаблДок.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоВертикали);
			Иначе
				СтруктураМакета.Вставить(ОбластиГруппыРаскрытия[ИндексОбласти].Описание, Неопределено);
			КонецЕсли;
			
		КонецЦикла; 
		
		НоваяСтрока = Объект.МакетРаскрытий.Добавить();
		НоваяСтрока.КодГруппыРаскрытия = КодГруппыРаскрытия;
		НоваяСтрока.ОсновнаяЧасть      = Ложь;
		НоваяСтрока.Макет              = Новый ХранилищеЗначения(СтруктураМакета, Сжатие);
		НоваяСтрока.КодЯзыка           = КодЯзыка;
		
	КонецЦикла;
		
	НоваяСтрока                    = Объект.МакетРаскрытий.Добавить();
	НоваяСтрока.КодГруппыРаскрытия = Неопределено;
	НоваяСтрока.ОсновнаяЧасть      = Истина;
	НоваяСтрока.Макет              = Новый ХранилищеЗначения(ТаблДок, Сжатие);
	НоваяСтрока.КодЯзыка           = КодЯзыка;
	
	Если КодЯзыка = 0 Тогда
		СохранитьАдресаЭлементовСтруктуры(Объект,ТаблДок);
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние();
	#КонецЕсли

КонецПроцедуры

Процедура ОбновитьАдресаУпрощенныхФормул(ВидОтчетаОтбор,СоответствиеАдресовСтар,СоответствиеАдресовНов)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеквизитыИсточниковДанныхДляФормул.ВидОтчета
	|ИЗ
	|	РегистрСведений.РеквизитыИсточниковДанныхДляФормул КАК РеквизитыИсточниковДанныхДляФормул
	|ГДЕ
	|	РеквизитыИсточниковДанныхДляФормул.ВидОтчетаОтбор = &ВидОтчетаОтбор";
	
	Запрос.УстановитьПараметр("ВидОтчетаОтбор",ВидОтчетаОтбор);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	КодВидаОтчетаОтбор=СокрЛП(ВидОтчетаОтбор.Код);
	
	Пока Результат.Следующий() Цикл
		
		НаборЗаписей=РегистрыСведений.РеквизитыИсточниковДанныхДляФормул.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидОтчета.Установить(Результат.ВидОтчета);
		
		НаборЗаписей.Прочитать();
		
		Для Каждого Строка ИЗ НаборЗаписей Цикл
			
			Если НЕ (Строка.ВидОтчетаОтбор=ВидОтчетаОтбор И ЗначениеЗаполнено(Строка.ПоказательОтбор)) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			АдресСтар	= СоответствиеАдресовСтар[Строка.ПоказательОтбор];
			АдресНов	= СоответствиеАдресовНов[Строка.ПоказательОтбор];
			
			Если АдресСтар=АдресНов Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(АдресНов) И ЗначениеЗаполнено(АдресСтар) Тогда
				
				Строка.КодУпрощеннойФормулы=СтрЗаменить(Строка.КодУпрощеннойФормулы,АдресСтар,АдресНов);
				
			ИначеЕсли ЗначениеЗаполнено(АдресНов) Тогда
				
				ИсточникОбъект=Строка.ИсточникДанных.ПолучитьОбъект();
				ИсточникОбъект.ПодготовитьТаблицыСопоставленийИОтборов();
				
				Если (НЕ ЗначениеЗаполнено(ИсточникОбъект.ВидИтогаОСВ))
					ИЛИ Результат.ВидОтчета=ВидОтчетаОтбор Тогда
					
					СтруктураОтбор=ИсточникОбъект.ПроверитьСтандартныеОтборыПоказательОтчета();
					ЕстьНестандартныеОтборы=СтруктураОтбор.ЕстьНестандартныеОтборы;
					ТекстАналитики=ИсточникОбъект.ПолучитьТекстАналитик(СтруктураОтбор);
					
					КодУпрощеннойФормулы=?(Результат.ВидОтчета=ВидОтчетаОтбор,"",КодВидаОтчетаОтбор)+"{"+АдресНов;
					
					Если СтруктураОтбор.Свойство("СдвигПериодов") Тогда
						КодУпрощеннойФормулы=КодУпрощеннойФормулы+";"+СтруктураОтбор.СдвигПериодов;
					КонецЕсли;
					
					Если Не ПустаяСтрока(ТекстАналитики) Тогда
						
						КодУпрощеннойФормулы=КодУпрощеннойФормулы+";"+ТекстАналитики;
						
					КонецЕсли;
					
					Строка.КодУпрощеннойФормулы=КодУпрощеннойФормулы+"}"+?((СтруктураОтбор.ИспользуютсяСтандартныеОтборы ИЛИ СтруктураОтбор.Свойство("СдвигПериодов")) И (НЕ СтруктураОтбор.ЕстьНестандартныеОтборы) ,"","#");
					
				КонецЕсли;
				
			Иначе
				
				Строка.КодУпрощеннойФормулы="["+СокрЛП(Строка.ИсточникДанных.Код)+"]";
				
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;		
	
КонецПроцедуры // ОбновитьАдресаУпрощенныхФормул() 

Процедура СохранитьАдресаЭлементовСтруктуры(Объект,ТаблДок) Экспорт
	
	РабочаяТаблицаКоординат=Объект.АдресаЭлементовСтруктурыОтчета.ВыгрузитьКолонки();
	СоответствиеАдресовСтар=Новый Соответствие;
	СоответствиеАдресовНов=Новый Соответствие;
	
	// Получим таблицу адресов показателей
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка,
	|	ПоказателиОтчетов.Код
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец",Объект.Владелец);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ТекОбласть=ТаблДок.Области.Найти(СокрЛП(Результат.Код));
		
		Если НЕ ТекОбласть=Неопределено Тогда
			
			НоваяСтрока=РабочаяТаблицаКоординат.Добавить();
			НоваяСтрока.ТипЭлемента=Перечисления.ЭлементыСтруктурыОтчета.Показатель;
			НоваяСтрока.Элемент=Результат.Ссылка;
			
			НоваяСтрока.СтрокаНомер=ТекОбласть.Верх;
			НоваяСтрока.КолонкаНомер=ТекОбласть.Лево;
			
			НоваяСтрока.АдресС1К1="С"+Формат(ТекОбласть.Верх,"ЧГ=")+"К"+Формат(ТекОбласть.Лево,"ЧГ=");
			СоответствиеАдресовНов.Вставить(НоваяСтрока.Элемент,НоваяСтрока.АдресС1К1);
			
		КонецЕсли;
		
	КонецЦикла;

	// Проверим изменение координат показателей и, при необходимости, изменим адреса в кодах упрощенных формул
	
	Если Объект.АдресаЭлементовСтруктурыОтчета.Количество()>0 Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	БланкиОтчетовАдресаЭлементовСтруктурыОтчета.Элемент,
		|	БланкиОтчетовАдресаЭлементовСтруктурыОтчета.АдресС1К1 КАК АдресСтар
		|ИЗ
		|	Справочник.БланкиОтчетов.АдресаЭлементовСтруктурыОтчета КАК БланкиОтчетовАдресаЭлементовСтруктурыОтчета
		|ГДЕ
		|	БланкиОтчетовАдресаЭлементовСтруктурыОтчета.Ссылка = &Ссылка
		|	И БланкиОтчетовАдресаЭлементовСтруктурыОтчета.ТипЭлемента = &ТипЭлемента";
				
		Запрос.УстановитьПараметр("Ссылка"					,Объект.Ссылка);
		Запрос.УстановитьПараметр("ТипЭлемента"				,Перечисления.ЭлементыСтруктурыОтчета.Показатель);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			СоответствиеАдресовСтар.Вставить(Результат.Элемент,Результат.АдресСтар);			
			
		КонецЦикла;
				
	КонецЕсли;
	
	ОбновитьАдресаУпрощенныхФормул(Объект.Владелец,СоответствиеАдресовСтар,СоответствиеАдресовНов);				
	Объект.АдресаЭлементовСтруктурыОтчета.Загрузить(РабочаяТаблицаКоординат);
	
	// Сохраняем адреса строк
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СтрокиОтчетов.Ссылка,
	|	СтрокиОтчетов.Код
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец",Объект.Владелец);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ТекОбласть=ТаблДок.Области.Найти("Строка_" + СокрЛП(Результат.Код));
		
		Если НЕ ТекОбласть=Неопределено Тогда
			
			НоваяСтрока=Объект.АдресаЭлементовСтруктурыОтчета.Добавить();
			НоваяСтрока.ТипЭлемента=Перечисления.ЭлементыСтруктурыОтчета.Строка;
			НоваяСтрока.Элемент=Результат.Ссылка;
			
			НоваяСтрока.СтрокаНомер=ТекОбласть.Верх;	
			НоваяСтрока.АдресС1К1="С"+Формат(ТекОбласть.Верх,"ЧГ=");
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Сохраняем адреса колонок
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	КолонкиОтчетов.Ссылка,
	|	КолонкиОтчетов.Код
	|ИЗ
	|	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|ГДЕ
	|	КолонкиОтчетов.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец",Объект.Владелец);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ТекОбласть=ТаблДок.Области.Найти("Колонка_" + СокрЛП(Результат.Код));
		
		Если НЕ ТекОбласть=Неопределено Тогда
			
			НоваяСтрока=Объект.АдресаЭлементовСтруктурыОтчета.Добавить();
			НоваяСтрока.ТипЭлемента=Перечисления.ЭлементыСтруктурыОтчета.Колонка;
			НоваяСтрока.Элемент=Результат.Ссылка;
			
			НоваяСтрока.КолонкаНомер=ТекОбласть.Лево;
			НоваяСтрока.АдресС1К1="К"+Формат(ТекОбласть.Лево,"ЧГ=");
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // СохранитьАдресаЭлементовСтруктуры() 

Функция ПолучитьМакетДляФормул(ТаблДок,ВидОтчета) Экспорт
	
	СписокИмен = УправлениеОтчетамиУХ.ПолучитьСписокИменГруппРаскрытия(ВидОтчета, Истина);
	
	Для Каждого ИмяГруппыРаскрытия Из СписокИмен Цикл
		
		НачалоГруппировки=0;
		ОкончаниеГруппировки=0;
		
		КодГруппыРаскрытия = СокрЛП(ИмяГруппыРаскрытия.Значение);
		ТекОбласть = ТаблДок.Области.Найти(КодГруппыРаскрытия + "_Шапка");
		
		Если НЕ ТекОбласть=Неопределено Тогда
			
			НачалоГруппировки=ТекОбласть.Верх;
			
		КонецЕсли;
		
		ТекОбласть = ТаблДок.Области.Найти(КодГруппыРаскрытия);
		
		Если НЕ ТекОбласть=Неопределено Тогда
			
			Если НачалоГруппировки=0 Тогда
				
				НачалоГруппировки=ТекОбласть.Верх;
				
			КонецЕсли;
			
			ОкончаниеГруппировки=ТекОбласть.Верх;
			
		КонецЕсли;
					
		ТекОбласть = ТаблДок.Области.Найти(КодГруппыРаскрытия + "_Подвал");
		
		Если НЕ ТекОбласть=Неопределено Тогда
			
			ОкончаниеГруппировки=ТекОбласть.Верх;
			
		КонецЕсли;
		
		Если НачалоГруппировки>0 Тогда
			
			ТаблДок.Область("R"+НачалоГруппировки+":R"+ОкончаниеГруппировки).Сгруппировать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Изменим свойства ячеек показателей
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Код
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &ВидОтчета";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ТекОбласть=ТаблДок.Области.Найти(СокрЛП(Результат.Код));
		
		Если Не ТекОбласть=Неопределено Тогда
			
			ТекОбласть.СодержитЗначение=Истина;
			ТекОбласть.ТипЗначения=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0);
			ТекОбласть.Значение="";
			ТекОбласть.Защита=Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблДок;
				
КонецФункции // ПолучитьОсновнойМакет() 

Процедура ОбновитьСвойстваОбластейПоказателя(ТабДокФормулы,ВидОтчета) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Код,
	|	ПоказателиОтчетов.ТипЗначения
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &ВидОтчета";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ОбластьФормулы=ТабДокФормулы.Области.Найти(СокрЛП(Результат.Код));
		
		Если Не ОбластьФормулы=Неопределено Тогда
			
			Если НЕ ОбластьФормулы.СодержитЗначение Тогда
				
				ОбластьФормулы.Текст="";
				
			КонецЕсли;
			
			ОбластьФормулы.СодержитЗначение=Истина;
			ОбластьФормулы.ТипЗначения = КэшируемыеПроцедурыУХ.ПолучитьОписаниеТиповПоТипуЗначения(Результат.ТипЗначения);
			ОбластьФормулы.Значение=КэшируемыеПроцедурыУХ.ПолучитьПустоеЗначениеПоТипуПоказателя(Результат.ТипЗначения);
			ОбластьФормулы.Защита=Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьСвойстваОбластейПоказателя()

// Для областей табличного документа, связанных с показателями отчета,
// процедура устанавливает формат вывода - уровень точности и порядок округления,
// заданные пользователем для текущего отчета.
//
Процедура ПрименитьПараметрыОтображения(ТаблДок,Объект)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Код
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &Владелец
	|	И ((НЕ ПоказателиОтчетов.ТипЗначения = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийПоказателейОтчетов.Число))
	|			ИЛИ ПоказателиОтчетов.НеМасштабируется)";
	
	Запрос.УстановитьПараметр("Владелец",Объект.Владелец);
	
	ТабНемасштабируемых=Запрос.Выполнить().Выгрузить();
	ТабНемасштабируемых.Колонки.Добавить("СокрКод");
	
	Для Каждого Строка ИЗ ТабНемасштабируемых Цикл
		Строка.СокрКод=СокрЛП(Строка.Код);
	КонецЦикла;
	
	ТабНемасштабируемых.Колонки.Удалить("Код");
	ТабНемасштабируемых.Индексы.Добавить("СокрКод");
	
	Для Каждого Обл Из ТаблДок.Области Цикл
		
		Если Обл.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник ИЛИ Обл.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбласти = Обл.Имя;
		Если Прав(ИмяОбласти, 6) <> "_СУММА" Тогда
			
			КоординатаПоследнего_ = Найти(ИмяОбласти, "_");
			
			Если КоординатаПоследнего_ > 0 Тогда
				Длина = СтрДлина(ИмяОбласти);
				КодПодчеркивания = КодСимвола("_");
				Для Инд = 0 По Длина - КоординатаПоследнего_ Цикл
					Если КодСимвола(ИмяОбласти, Длина - Инд) = КодПодчеркивания Тогда
						КоординатаПоследнего_ = Длина - Инд;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Окончание = Сред(ИмяОбласти, КоординатаПоследнего_ + 1);
				
				Если НЕ ОбщегоНазначенияУХ.ЕстьНеЦифрыВСтроке(Окончание) И НЕ ПустаяСтрока(Окончание) Тогда
					КодПоказателя = Лев(ИмяОбласти, КоординатаПоследнего_ - 1);
					Вхождение_Показатель_ = Найти(КодПоказателя, "_Показатель_");
					Если Вхождение_Показатель_ <>0 Тогда
						КодПоказателя = Сред(КодПоказателя, Вхождение_Показатель_ + СтрДлина("_Показатель_"));
					КонецЕсли;
				Иначе
					КодПоказателя = ИмяОбласти;
				КонецЕсли;
			Иначе
				КодПоказателя = ИмяОбласти;
			КонецЕсли;
			
			Если ТабНемасштабируемых.Количество()>0 Тогда
				
				СтрНемасштабируемых=ТабНемасштабируемых.Найти(КодПоказателя,"СокрКод");
				
				Если Не СтрНемасштабируемых=Неопределено Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СписокПараметров = ПолучитьСписокПараметровФормата(Обл.Формат);
			СписокПараметров.Вставить("ЧДЦ", Объект.УровеньТочностиПоУмолчанию);
			Обл.Формат = ПреобразоватьВСтрокуФормата(СписокПараметров);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает бланк отчета БланкОтчетаВход основным для его 
// вида отчета. Возвращает успешность операции.
Функция УстановитьБланкОсновным(БланкОтчетаВход) Экспорт
	РезультатФункции = Истина;
	Попытка
		Если НЕ БланкОтчетаВход.ЭтоГруппа Тогда
			ВидОтчета = БланкОтчетаВход.Владелец;
			Если БланкОтчетаВход.РежимБланка = 1 Тогда
				УправлениеОтчетамиУХ.УстановитьЭлементПоУмолчаниюДляВидаОтчета(БланкОтчетаВход, ВидОтчета, Перечисления.ЭлементыНастройкиОтчета.БланкСводнойТаблицы);
			ИначеЕсли БланкОтчетаВход.РежимБланка = 2 Тогда
				УправлениеОтчетамиУХ.УстановитьЭлементПоУмолчаниюДляВидаОтчета(БланкОтчетаВход, ВидОтчета, Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображенияМногопериодный);
			Иначе
				УправлениеОтчетамиУХ.УстановитьЭлементПоУмолчаниюДляВидаОтчета(БланкОтчетаВход, ВидОтчета, Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображения);
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Невозможно установить основным бланком группу %БланкОтчета%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%БланкОтчета%", Строка(БланкОтчетаВход));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'Возникла ошибка при установке основного бланка: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции

Функция ПолучитьСписокПараметровФормата(Знач СтрокаФормата)
	
	СписокПараметров = Новый Соответствие;
	
	ПарыИмяЗначение = Новый Массив;
	ДлинаСтроки = СтрДлина(СтрокаФормата);
	Для ОбрИнд = 1 По ДлинаСтроки Цикл
		Инд = ДлинаСтроки - ОбрИнд + 1;
		ТекСимв = Сред(СтрокаФормата, Инд, 1);
		Если ТекСимв = ";" Тогда
			ПарыИмяЗначение.Вставить(0, Сред(СтрокаФормата, Инд + 1));
			СтрокаФормата = Лев(СтрокаФормата, Инд - 1);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		ПарыИмяЗначение.Добавить(СтрокаФормата);
	КонецЕсли;
	
	Для Каждого ПараИмяЗначение Из ПарыИмяЗначение Цикл
		ВхождениеРавно = Найти(ПараИмяЗначение, "=");
		Если ВхождениеРавно <> 0 Тогда
			СписокПараметров.Вставить(СокрЛП(Лев(ПараИмяЗначение, ВхождениеРавно - 1)), СокрЛП(Сред(ПараИмяЗначение, ВхождениеРавно + 1)));
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокПараметров;
	
КонецФункции

Функция ПреобразоватьВСтрокуФормата(СписокПараметров)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из СписокПараметров Цикл
		СтрокаФормата = СтрокаФормата + Параметр.Ключ + " = " + Параметр.Значение + ";";
	КонецЦикла;
	Возврат СтрокаФормата;
	
КонецФункции

// ГЕНЕРАЦИЯ СТРОК И КОЛОНОК {

Процедура УстановитьУникальныеКодыДляТаблицы(ТабличноеПолеСтрок, СписокКодовСтрок, ДлинаКода) Экспорт
	
	ТекТаблицаКодов=ТабличноеПолеСтрок.Скопировать();
	ТекТаблицаКодов.Свернуть("Код");
	
	Для Каждого СтрокаКод ИЗ ТекТаблицаКодов Цикл
		
		МассивСтрок=ТабличноеПолеСтрок.НайтиСтроки(Новый Структура("Код",СтрокаКод.Код));
		
		Если МассивСтрок.Количество()=1 И СписокКодовСтрок.НайтиПоЗначению(СтрокаКод.Код)=Неопределено Тогда
			
			СписокКодовСтрок.Добавить(СтрокаКод.Код);
			Продолжить;			
			
		Иначе
			
			Индекс=1;
			
			Для Каждого Строка ИЗ МассивСтрок Цикл
				
				Строка.Код=ПодобратьКод(СтрокаКод.Код,ДлинаКода,СписокКодовСтрок,Индекс);
				СписокКодовСтрок.Добавить(Строка.Код);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры  

Функция ПодобратьКод(ПроектКода,ДлинаКода,СписокКодов,Индекс)
	
	Пока Истина Цикл
		
		ТекущийАффикс=Формат(Индекс,"ЧГ=0");
		
		Если (СтрДлина(ПроектКода)+СтрДлина(ТекущийАффикс))<=ДлинаКода Тогда
			
			ТекПроектКода=ПроектКода+ТекущийАффикс;
			
		Иначе
			
			ТекПроектКода=Лев(ПроектКода,СтрДлина(ПроектКода)-СтрДлина(ТекущийАффикс))+ТекущийАффикс;
			
		КонецЕсли;
		
		Если СписокКодов.НайтиПоЗначению(ТекПроектКода)=Неопределено Тогда
			
			Возврат ТекПроектКода;
			
		Иначе
			
			Индекс=Индекс+1;
			
		КонецЕсли;
		
	КонецЦикла;
			
КонецФункции // ПодобратьКод() 

Функция СформироватьУникальныйКодПоВнутреннимДанным(ТабличноеПолеСтрок, ДлинаКода)
	
	НетИзменений = Истина;
	КоличествоСтрок = ТабличноеПолеСтрок.Количество();
	Если КоличествоСтрок > 0 Тогда
		ЧислоСимволов=Цел(Log10(КоличествоСтрок))+1;
		
		Для НомерСтроки=0 По ТабличноеПолеСтрок.Количество()-1 Цикл
			
			СтрокаТаблицы=ТабличноеПолеСтрок[НомерСтроки];
			
			ДублирующиесяКоды=ТабличноеПолеСтрок.НайтиСтроки(Новый Структура("Код",СтрокаТаблицы.Код));
			
			Если ДублирующиесяКоды.Количество()>1 Тогда
				
				Инд = 0;
				НетИзменений = Ложь;
				ЕстьИзменениеКода=Ложь;
				
				Для Каждого СтрокаДубль ИЗ ДублирующиесяКоды Цикл
					
					Если (СокрЛП(СтрокаТаблицы.Код))=(ДлинаКода-ЧислоСимволов) ИЛИ ЕстьИзменениеКода Тогда
						СтрокаДубль.Код=Лев(СокрЛП(СтрокаДубль.Код),СтрДлина(СокрЛП(СтрокаДубль.Код))-ЧислоСимволов)+Формат(Инд,"ЧЦ="+ЧислоСимволов+";ЧРГ=0;  ЧВН=");
					Иначе
						СтрокаДубль.Код= СтрокаДубль.Код+Формат(Инд,"ЧЦ="+ЧислоСимволов+";ЧРГ=0; ЧВН=");
					КонецЕсли;
					
					ЕстьИзменениеКода=Истина;
					
					Инд=Инд+1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;	
	Иначе
		НетИзменений = Истина;
	КонецЕсли;
	
	Возврат НетИзменений;
	
КонецФункции

Функция СформироватьУникальныйКод(ТабличноеПолеСтрок, СписокКодовСтрок, ДлинаКода)
	
	НетИзменений = Истина;
	КоличествоСтрок = ТабличноеПолеСтрок.Количество();
	Если КоличествоСтрок > 0 Тогда
		ЧислоСимволов=Цел(Log10(КоличествоСтрок))+1;
		
		Для НомерСтроки=0 По ТабличноеПолеСтрок.Количество()-1 Цикл
			
			СтрокаТаблицы=ТабличноеПолеСтрок[НомерСтроки];
			
			Инд = 0;
			ЕстьИзменениеКода=Ложь;
			
			Пока СписокКодовСтрок.НайтиПоЗначению(СтрокаТаблицы.Код) <> Неопределено ИЛИ ТабличноеПолеСтрок.НайтиСтроки(Новый Структура("Код",СтрокаТаблицы.Код)).Количество()>1 Цикл
				
				Инд = Инд + 1;
				
				Если (СокрЛП(СтрокаТаблицы.Код))=(ДлинаКода-ЧислоСимволов) ИЛИ ЕстьИзменениеКода Тогда
					СтрокаТаблицы.Код=Лев(СокрЛП(СтрокаТаблицы.Код),СтрДлина(СокрЛП(СтрокаТаблицы.Код))-ЧислоСимволов)+Формат(Инд,"ЧЦ="+ЧислоСимволов+";ЧРГ=0; ЧВН=");
				Иначе
					СтрокаТаблицы.Код= СтрокаТаблицы.Код+Формат(Инд,"ЧЦ="+ЧислоСимволов+";ЧРГ=0; ЧВН=");
				КонецЕсли;
				
				ЕстьИзменениеКода=Истина;
				НетИзменений = Ложь;
				
			КонецЦикла;
			
		КонецЦикла;
	Иначе
		НетИзменений = Истина;
	КонецЕсли;
	Возврат НетИзменений;
КонецФункции

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" ИЛИ ВидФормы = "ФормаВыбора" ИЛИ ВидФормы = "ФормаГруппы" ИЛИ  ВидФормы = "ФормаВыбораГруппы" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		Если  Параметры.Ключ.РежимБланка = 1  Тогда
			 Параметры.Вставить("РежимыДоступаКФункциямСводнойТаблицы"
			 ,ПредопределенноеЗначение("Перечисление.РежимыДоступаКФункциямСводнойТаблицы.РазработкаМакета"));
             Параметры.Вставить("Бланк",Параметры.Ключ);
			 
			ВыбраннаяФорма = "Обработка.АналитическийБланкСводнаяТаблица.Форма.ФормаМакетаСводнаяТаблица";
		ИначеЕсли Параметры.Ключ.РежимБланка = 2  Тогда	 
			 ВыбраннаяФорма = "ФормаМакетаАналитическийБланк";
		Иначе
			 ВыбраннаяФорма = "ФормаМакета";
		КонецЕсли;
			
	ИначеЕсли  Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		Если  Параметры.ЗначениеКопирования.РежимБланка = 1 Тогда
			Параметры.Вставить("РежимыДоступаКФункциямСводнойТаблицы"
			,ПредопределенноеЗначение("Перечисление.РежимыДоступаКФункциямСводнойТаблицы.РазработкаМакета"));
			ВыбраннаяФорма = "Обработка.АналитическийБланкСводнаяТаблица.Форма.ФормаМакетаСводнаяТаблица";
		ИначеЕсли Параметры.ЗначениеКопирования.РежимБланка = 2 Тогда	 
			 ВыбраннаяФорма = "ФормаМакетаАналитическийБланк";	 
		Иначе
			 ВыбраннаяФорма = "ФормаМакета";
		КонецЕсли;

	Иначе	
		ВыбраннаяФорма = "ФормаМакета";	
	КонецЕсли;

КонецПроцедуры

// } ГЕНЕРАЦИЯ СТРОК И КОЛОНОК 

#Область СохранениеМакетаМП_Бланка

Процедура СохранитьМакетМногопериодногоБланка(Бланк,ПолеТабличногоДокументаМакет,ОбъектАБ,УникальныйИдентификатор,Отказ,МакетДляВыводаПоказателей = Неопределено) Экспорт
			
	РасширениеБизнесЛогикиУХ.СохранитьМакетМногопериодногоБланка(Бланк,ПолеТабличногоДокументаМакет,ОбъектАБ,УникальныйИдентификатор,Отказ,МакетДляВыводаПоказателей);
			
КонецПроцедуры	

#КонецОбласти



#КонецЕсли




