Перем СхемаКомпоновкиДанных Экспорт; // Текущая редактируемая схема компоновки данных
Перем КомпоновщикНастроек   Экспорт; // Текущая компоновщик настроек 
Перем ОбщаяСхемаКомпоновкиДанных  Экспорт; // Схема для общего отбора
Перем ОбщийКомпоновщикНастроек    Экспорт; // Компоновщик содержит настройки общего отбора
Перем СоставТЗ                    Экспорт; // Таблица значений - копия табличной части Состав с дополнением

Функция ПолучитьВложенныйОтчетПоРасшифровке(Расшифровка, ДанныеРасшифровки) Экспорт
	
	// Получим имя группировки самого верхнего уровня
	Поле = ДанныеРасшифровки.Элементы[Расшифровка];
	Пока Поле.ПолучитьРодителей().Количество() > 0 Цикл
		Поле = Поле.ПолучитьРодителей()[0];
	КонецЦикла;
	ИмяГруппировки = Поле.Группировка;
	
	Для каждого ВложенныйОтчет Из ДанныеРасшифровки.Настройки.Структура Цикл
		
		Если ТипЗнч(ВложенныйОтчет) <> Тип("НастройкиВложенногоОбъектаКомпоновкиДанных")
			ИЛИ ВложенныйОтчет.Настройки.Структура.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ВложенныйОтчет.Настройки.Структура[0]) = Тип("ТаблицаКомпоновкиДанных")
		  И (ВложенныйОтчет.Настройки.Структура[0].Строки.Количество() > 0
		   И ВложенныйОтчет.Настройки.Структура[0].Строки[0].Идентификатор = ИмяГруппировки 
		 ИЛИ ВложенныйОтчет.Настройки.Структура[0].Колонки.Количество() > 0
		   И ВложенныйОтчет.Настройки.Структура[0].Колонки[0].Идентификатор = ИмяГруппировки)
		 ИЛИ ТипЗнч(ВложенныйОтчет.Настройки.Структура[0]) = Тип("ДиаграммаКомпоновкиДанных")
		  И (ВложенныйОтчет.Настройки.Структура[0].Серии.Количество() > 0
		   И ВложенныйОтчет.Настройки.Структура[0].Серии[0].Идентификатор = ИмяГруппировки 
		 ИЛИ ВложенныйОтчет.Настройки.Структура[0].Точки.Количество() > 0
		   И ВложенныйОтчет.Настройки.Структура[0].Точки[0].Идентификатор = ИмяГруппировки)
		 ИЛИ ВложенныйОтчет.Настройки.Структура[0].Идентификатор = ИмяГруппировки Тогда
		 
			Возврат ВложенныйОтчет;
			
		КонецЕсли;
		
	КонецЦикла;

КонецФункции

Процедура СобратьОбщуюСхемуКомпоновкиИКомпоновщик(СоставТЗ, СхемаКомпоновкиДанныхВывести, КомпоновщикНастроекВывести) Экспорт
#Если Клиент Тогда	        	
	
	// Заполним внешнюю СКД
	Для каждого СтрокаСостава Из СоставТЗ Цикл
		ВложеннаяСхема = СхемаКомпоновкиДанныхВывести.ВложенныеСхемыКомпоновкиДанных.Добавить();
		ВложеннаяСхема.Заголовок = СтрокаСостава.Описание;
		ВложеннаяСхема.Имя       = СтрокаСостава.Идентификатор;
		ВложеннаяСхема.Схема     = СтрокаСостава.УниверсальныйОтчет.СхемаКомпоновкиДанных.Получить();
	КонецЦикла;
	
	КомпоновщикНастроекВывести.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанныхВывести));

	// Скопируем структру во внешнюю СКД
	Для каждого СтрокаСостава Из СоставТЗ Цикл
		ВложенныйОбъект = КомпоновщикНастроекВывести.Настройки.Структура.Добавить(Тип("НастройкиВложенногоОбъектаКомпоновкиДанных"));
		ВложенныйОбъект.УстановитьИдентификатор(СтрокаСостава.Идентификатор);
		Настройки = СтрокаСостава.КомпоновщикНастроек.ПолучитьНастройки();
		СправочникОбъект = СтрокаСостава.УниверсальныйОтчет.ПолучитьОбъект();
		ТиповыеОтчетыУХ.ПрименитьНастройкуПользователяНастройкиОтчета(СправочникОбъект);
		СтрокаСостава.НастройкиОтчета.Вставить("ЗначенияНастроекПанелиПользователя", СправочникОбъект.ЗначенияНастроекПанелиПользователя);
		БизнесАнализВызовСервераУХ.ДоработатьТиповойОтчетПередВыводом(СтрокаСостава.НастройкиОтчета, СтрокаСостава.КомпоновщикНастроек);
		АналитическиеОтчетыУХ.ДоработатьАналитическийОтчетПередВыводом(СтрокаСостава.НастройкиОтчета, СтрокаСостава.КомпоновщикНастроек, СтрокаСостава.УниверсальныйОтчет.СхемаКомпоновкиДанных.Получить());
	
		НастройкиИсточник = СтрокаСостава.КомпоновщикНастроек.Настройки;
		НастройкиПриемник = ВложенныйОбъект.Настройки;
		НастройкиПриемник.Структура.Очистить();
		ТиповыеОтчетыУХ.СкопироватьНастройкиКомпоновкиДанных(НастройкиПриемник, НастройкиИсточник);
		СтрокаСостава.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки)
	КонецЦикла;
	
#КонецЕсли	
КонецПроцедуры
	
Процедура ИнициализацияПанелиОтчетов() Экспорт
#Если Клиент Тогда
	// Инициализация СоставТЗ
	СоставТЗ = Новый ТаблицаЗначений;
	СоставТЗ.Колонки.Добавить("УниверсальныйОтчет", Новый ОписаниеТипов("СправочникСсылка.ПроизвольныеОтчеты"), Нстр("ru = 'Описание элемента'"));
	СоставТЗ.Колонки.Добавить("КомпоновщикНастроек");
	СоставТЗ.Колонки.Добавить("Описание", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(300));
	СоставТЗ.Колонки.Добавить("Отбор");
	СоставТЗ.Колонки.Добавить("Идентификатор");
	СоставТЗ.Колонки.Добавить("НастройкиОтчета");
	
	ОбновитьОбщуюСхему();
	
	НастройкиКомпоновщика = НастройкиКомпоновщикаНастроек.Получить();
	Если НастройкиКомпоновщика <> Неопределено Тогда
		ОбновитьОбщийКомпоновщикНастроек(НастройкиКомпоновщика);
	КонецЕсли;
#КонецЕсли

КонецПроцедуры

Функция ЗаменитьСтрокуНаПолеКомпоновкиДанныхВСоотвтетствии(СоответствиеПараметр)
	
	НовоеСоотвтетствие = Новый Соответствие;
	// ??? На первое время
	Если СоответствиеПараметр = Неопределено Тогда
		Возврат НовоеСоотвтетствие;
	КонецЕсли;
	
	Для каждого ЭлементСоответствия Из СоответствиеПараметр Цикл
		НовоеСоотвтетствие.Вставить(Новый ПолеКомпоновкиДанных(ЭлементСоответствия.Ключ), ЭлементСоответствия.Значение);
	КонецЦикла;
	Возврат НовоеСоотвтетствие;

КонецФункции

Функция ЗаменитьПолеКомпоновкиДанныхНаСтрокуВСоответствии(СоответствиеПараметр) Экспорт
	
	НовоеСоотвтетствие = Новый Соответствие;
	Для каждого ЭлементСоответствия Из СоответствиеПараметр Цикл
		НовоеСоотвтетствие.Вставить(Строка(ЭлементСоответствия.Ключ), ЭлементСоответствия.Значение);
	КонецЦикла;
	Возврат НовоеСоотвтетствие;

КонецФункции

Функция ПолучитьНовыйИД() Экспорт
	
	Индекс = 1;
	Пока СоставТЗ.НайтиСтроки(Новый Структура("Идентификатор", "ИД" + Индекс)).Количество() > 0 Цикл
		Индекс = Индекс + 1;
	КонецЦикла;
	Возврат "ИД" + (Индекс);
	
КонецФункции

Процедура ОбновитьОбщуюСхему(СтрокаНеУчитывать = Неопределено) Экспорт
	
	ОбщаяСхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = ОбщаяСхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = ОбщаяСхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных1";
	НаборДанных.ИсточникДанных = ИсточникДанных.Имя;

	Для каждого Элемент Из СоставТЗ Цикл
		
		Если Элемент = СтрокаНеУчитывать Тогда
			Продолжить;
		КонецЕсли;
		
		//Для каждого ЭлементОтбора Из Элемент.НастройкиОтчета.НастройкиКомпоновщика.ДоступныеПоляОтбора.Элементы Цикл
		Для каждого ЭлементОтбора Из Элемент.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.Элементы Цикл
			
			Если ЭлементОтбора.Папка Тогда
				Продолжить;
			КонецЕсли;
			
			НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			НовоеПоле.Поле        = Строка(ЭлементОтбора.Поле);
			НовоеПоле.Заголовок   = ЭлементОтбора.Заголовок;
			НовоеПоле.ПутьКДанным = Строка(ЭлементОтбора.Поле);
			НовоеПоле.ТипЗначения = ЭлементОтбора.Тип;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьОбщийКомпоновщикНастроек(НастройкиКомпоновщика = Неопределено) Экспорт
#Если Клиент Тогда	
	Если НастройкиКомпоновщика <> Неопределено Тогда
		ОбщийКомпоновщикНастроек = ТиповыеОтчетыУХ.ПолучитьКомопновщикПоСхемеИНастройкам(ОбщаяСхемаКомпоновкиДанных, НастройкиКомпоновщика);
	ИначеЕсли ОбщийКомпоновщикНастроек = Неопределено Тогда
		ОбщийКомпоновщикНастроек = ТиповыеОтчетыУХ.ПолучитьКомопновщикПоСхемеИНастройкам(ОбщаяСхемаКомпоновкиДанных);
	Иначе
		ОбщийКомпоновщикНастроек = ТиповыеОтчетыУХ.ПолучитьКомопновщикПоСхемеИНастройкам(ОбщаяСхемаКомпоновкиДанных, ОбщийКомпоновщикНастроек.Настройки);
	КонецЕсли;
#КонецЕсли	
КонецПроцедуры

Процедура УстановитьОписание(ТекущиеДанные) Экспорт
	
	НовоеОписание = Строка(ТекущиеДанные.УниверсальныйОтчет);
	Если ТекущиеДанные.Описание = "" Тогда
		Если СоставТЗ.НайтиСтроки(Новый Структура("Описание", НовоеОписание)).Количество() = 0 Тогда
			ТекущиеДанные.Описание = НовоеОписание;
		Иначе
			Индекс = 1;
			Пока СоставТЗ.НайтиСтроки(Новый Структура("Описание", НовоеОписание + Индекс)).Количество() > 0 Цикл
				Индекс = Индекс + 1;
			КонецЦикла;
			ТекущиеДанные.Описание = НовоеОписание + Индекс;
		КонецЕсли;
	КонецЕсли;
	ПриИзмененииОписанияОтчета(ТекущиеДанные);
	
КонецПроцедуры

Процедура ОбработкаИзмененияПроизвольногоОтчета(ТекущаяСтрока) Экспорт
#Если Клиент Тогда
	
	СтруктураНастроек = ТиповыеОтчетыУХ.ПолучитьСтруктуруПараметровТиповогоОтчета(ТекущаяСтрока.УниверсальныйОтчет);
	СтруктураНастроек.Вставить("ФормироватьПриОткрытии", Ложь);
	СтруктураНастроек.Вставить("НастройкиКомпоновщика", ТекущаяСтрока.УниверсальныйОтчет.СхемаКомпоновкиДанных.Получить().НастройкиПоУмолчанию);
	ТекущаяСтрока.НастройкиОтчета = СтруктураНастроек;
	ТекущаяСтрока.КомпоновщикНастроек = ТиповыеОтчетыУХ.ПолучитьКомопновщикПоСхемеИНастройкам(ТекущаяСтрока.УниверсальныйОтчет.СхемаКомпоновкиДанных.Получить(), ТекущаяСтрока.НастройкиОтчета.НастройкиКомпоновщика);
	
#КонецЕсли
КонецПроцедуры

Процедура ОбновитьОтборСтрокиСостава(ТекущаяСтрока) Экспорт
	
	СоответствиеОтбор = Новый Соответствие;
	Для каждого ДоступныйОтбор Из ТекущаяСтрока.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.Элементы Цикл
		Если ДоступныйОтбор.Папка Тогда
			Продолжить;
		КонецЕсли;
		СоответствиеОтбор.Вставить(ДоступныйОтбор.Поле, Ложь);
	КонецЦикла;
	
	ТекущаяСтрока.Отбор = СоответствиеОтбор;
	
КонецПроцедуры

Процедура ПриИзмененииОписанияОтчета(ТекущиеДанные) Экспорт
	
	ТекущиеДанные.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы[11].Значение = ТекущиеДанные.Описание;
	ТекущиеДанные.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы[11].Использование = Истина;

КонецПроцедуры

Функция ОписаниеУникально(ТекущиеДанные) Экспорт
	
	Если СоставТЗ.НайтиСтроки(Новый Структура("Описание", ТекущиеДанные.Описание)).Количество() > 1 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция НайтиПоИДСтрокуСостава(Идентификатор) Экспорт
	
	НайденныеСтроки = СоставТЗ.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ОбновитьЭлементыОтбора(КомпоновщикНастроек, ЭлементОбщегоОтбора) Экспорт
	
	ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	Количество = ЭлементыОтбора.Количество();
	Для Индекс = 1 По Количество Цикл
		ЭлементОтбора = ЭлементыОтбора[Количество - Индекс];
		Если ЭлементОтбора.ЛевоеЗначение = ЭлементОбщегоОтбора.ЛевоеЗначение Тогда
			ЗаполнитьЗначенияСвойств(ЭлементОтбора, ЭлементОбщегоОтбора);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьОбщийОтборИзСостава(ТекущиеДанные) Экспорт
	
	Для каждого СтрокаСостава Из СоставТЗ Цикл
		Если СтрокаСостава.Отбор[ТекущиеДанные.ЛевоеЗначение] = Истина Тогда
			УдалитьЭлементОтбора(СтрокаСостава.КомпоновщикНастроек, ТекущиеДанные.ЛевоеЗначение);
			СтрокаСостава.Отбор[ТекущиеДанные.ЛевоеЗначение] = Ложь; 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЭлементОтбора(КомпоновщикНастроек, Поле) Экспорт
	
	ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	Количество = ЭлементыОтбора.Количество();
	Для Индекс = 1 По Количество Цикл
		ЭлементОтбора = ЭлементыОтбора[Количество - Индекс];
		Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
			ЭлементыОтбора.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьКоличествоОтбораПоля(КомпоновщикНастроек, Поле, УчитыватьНеиспользуемый = Истина) Экспорт
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	Количество = 0;
	Для каждого ЭлементОтбора Из Отбор Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
			Количество = Количество + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

Процедура ДобавитьОтборВКомпоновщик(КомпоновщикНастроек, ЭлементОбщегоОтбора) Экспорт
	
	НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОбщегоОтбора);
	
КонецПроцедуры

Процедура ОбновитьОбщиеОтборы(ТекущиеДанные) Экспорт
	
	Для каждого СтрокаСостава Из СоставТЗ Цикл
		
		Если СтрокаСостава.Отбор[ТекущиеДанные.ЛевоеЗначение] <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		КомпоновщикНастроек = СтрокаСостава.КомпоновщикНастроек;
		ОбновитьЭлементыОтбора(КомпоновщикНастроек, ТекущиеДанные);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОбщийОтборАвтоматически(ТекущиеДанные, РедактируемоеПолеОтбора) Экспорт
	
	Поле = ТекущиеДанные.ЛевоеЗначение;
	Для каждого СтрокаСостава Из СоставТЗ Цикл
		Если РедактируемоеПолеОтбора = Неопределено И СтрокаСостава.Отбор[Поле] <> Неопределено Тогда
			Если ПолучитьКоличествоОтбораПоля(СтрокаСостава.КомпоновщикНастроек, ТекущиеДанные.ЛевоеЗначение) = 0 Тогда
				СтрокаСостава.Отбор[Поле] = Истина;
				ДобавитьОтборВКомпоновщик(СтрокаСостава.КомпоновщикНастроек, ТекущиеДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуОбщегоОтбора(Компоновщик) Экспорт
	
	// Создание таблицы настройки
	НастройкаОбщегоОтбора = Новый ТаблицаЗначений;
	КолонкаОбщийОтбор       = НастройкаОбщегоОтбора.Колонки.Добавить("ОбщийОтбор",    ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево(), Нстр("ru = 'Входит в общий отбор'"), 8);
	КолонкаИспользование    = НастройкаОбщегоОтбора.Колонки.Добавить("Количество",    ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(3), "", 8);
	КолонкаЛевоеЗначение    = НастройкаОбщегоОтбора.Колонки.Добавить("ЛевоеЗначение", Новый ОписаниеТипов("ПолеКомпоновкиДанных"), "Поле", 25);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Булево"));
	ОписаниеТиповБулевоИНеопределено = Новый ОписаниеТипов(МассивТипов);
	
	Для каждого СтрокаСостава Из СоставТЗ Цикл
		ИмяКолонки = СтрЗаменить(СтрокаСостава.Описание, " ", "_");
		НоваяКолонка = НастройкаОбщегоОтбора.Колонки.Добавить(СтрокаСостава.Идентификатор, ОписаниеТиповБулевоИНеопределено, СтрокаСостава.Описание, 15);
	КонецЦикла;
	
	// Заполнение таблицы настройки
	Для каждого СтрокаСостава Из СоставТЗ Цикл
		Для каждого ЭлементСоответствия ИЗ СтрокаСостава.Отбор Цикл
			НайденныеСтроки = НастройкаОбщегоОтбора.НайтиСтроки(Новый Структура("ЛевоеЗначение", ЭлементСоответствия.Ключ));
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаНастройки = НастройкаОбщегоОтбора.Добавить();
				СтрокаНастройки.ЛевоеЗначение = ЭлементСоответствия.Ключ;
			Иначе
				СтрокаНастройки = НайденныеСтроки[0];
			КонецЕсли;
			СтрокаНастройки[СтрокаСостава.Идентификатор] = ЭлементСоответствия.Значение;
			СтрокаНастройки.Количество = СтрокаНастройки.Количество + 1;
		КонецЦикла;
	КонецЦикла;
	
	// Проставление флага "Входит в общий отбор"
	Для каждого ЭлементОтбора Из Компоновщик.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("") Тогда
			Продолжить;
		КонецЕсли;
		НайденныеСтроки = НастройкаОбщегоОтбора.НайтиСтроки(Новый Структура("ЛевоеЗначение", ЭлементОтбора.ЛевоеЗначение));
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		НайденныеСтроки[0].ОбщийОтбор = Истина;
	КонецЦикла;
	
	// Если отображение только общего отбора, остальые строки удалим
	Если ТолькоОбщийОтбор Тогда
		НайденныеСтроки = НастройкаОбщегоОтбора.НайтиСтроки(Новый Структура("ОбщийОтбор", Ложь));
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НастройкаОбщегоОтбора.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	НастройкаОбщегоОтбора.Сортировать("Количество Убыв");
	Возврат НастройкаОбщегоОтбора;
	
КонецФункции

Процедура ОткрытьОтчетДляНастройки(ТекущаяСтрока) Экспорт
	
	Отчет = ТекущаяСтрока.УниверсальныйОтчет.ПолучитьОбъект();
	Отчет.ПрименитьНастройку();
	#Если Клиент Тогда
		ТиповыеОтчетыУХ.ИнициализироватьКомпоновщикНастроек(Отчет);
	#КонецЕсли
	
	Форма = Отчет.ПолучитьФорму();
	
	СтрокаШаблона = НСтр("ru = 'Настройка элемента панели ""%1""'");
	
	Если Не ПустаяСтрока(СтрокаШаблона) тогда			
		Форма.ПредставлениеНастройки = СтрШаблон(СтрокаШаблона, ТекущаяСтрока.Описание);
	КонецЕсли;

	Форма.РежимРедактированияНастройки = Истина;
	Форма.ЭлементыФормы.ДействияФормыСлева.Кнопки.Администрирование.Кнопки.Дополнительно.Доступность = Ложь;
	Форма.ЭлементыФормы.ДействияФормыСлева.Кнопки.Администрирование.Кнопки.СхемаКомпоновки.Доступность = Ложь;
	
	СтруктураНастроек = ТекущаяСтрока.НастройкиОтчета;
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
	ЗаполнитьЗначенияСвойств(Отчет, СтруктураНастроек);
	Результат = Форма.ОткрытьМодально();
	
	Если Результат <> Неопределено Тогда
		ТекущаяСтрока.НастройкиОтчета = Результат;
		ТекущаяСтрока.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Отчет.СхемаКомпоновкиДанных.Получить()));
		ТекущаяСтрока.КомпоновщикНастроек.ЗагрузитьНастройки(Отчет.КомпоновщикНастроек.Настройки);
	КонецЕсли;
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЯЕМОГО РЕЖИМА.
//

Процедура ВернутьСоставТЗ(ВнСоставТЗ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктураПанелиОтчетов.УниверсальныйОтчет,
	               |	СтруктураПанелиОтчетов.Отбор,
	               |	СтруктураПанелиОтчетов.УниверсальныйОтчет.Код КАК КодОтчета
	               |ИЗ
	               |	Справочник.СтруктураПанелиОтчетов КАК СтруктураПанелиОтчетов
	               |ГДЕ
	               |	СтруктураПанелиОтчетов.Владелец = &Владелец
	               |	И СтруктураПанелиОтчетов.ЭтоГруппа = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Владелец", Ссылка);
	
	ВнСоставТЗ.Очистить();
	
	Выборка = ЗАпрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекОтбор = ЗаменитьСтрокуНаПолеКомпоновкиДанныхВСоотвтетствии(Выборка.Отбор.Получить());
		
		Для Каждого Элемент Из ТекОтбор Цикл
			
			НоваяСтрока = ВнСоставТЗ.Добавить();
			НоваяСтрока.УниверсальныйОтчет = Выборка.УниверсальныйОтчет;
			НоваяСтрока.КодОтчета          = Выборка.КодОтчета;
			НоваяСтрока.Отбор              = Элемент.Ключ;
			НоваяСтрока.Использование      = Элемент.Значение;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
КонецПроцедуры


