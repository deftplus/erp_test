////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ.
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПредставлениеЭлементаОтчетаДиаграмма = Перечисления.ПредставленияЭлементовОтчетов.Диаграмма;
	Если НЕ Параметры.Ключ.Пустая() Тогда
		ЗаполнитьТаблицуСостава();
	ИначеЕсли Параметры.СписокНачальногоЗаполнения.Количество() > 0 Тогда
		
		НачальноеЗаполнениеПанели(Параметры.СписокНачальногоЗаполнения);
		
	КонецЕсли;
	
	Элементы.СоставПанелиРежим.Видимость = Объект.РежимМоделирования;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//Проверки для режима моделирования
	ДеревоСоставПанели = РеквизитФормыВЗначение("СоставПанели");
	
	ЕстьФакторы = Ложь;
	ЕстьЦелевые = Ложь;
	
	Если Объект.РежимМоделирования Тогда
		Для Каждого Страница Из ДеревоСоставПанели.Строки Цикл
			Для Каждого Группа Из Страница.Строки Цикл
				Для Каждого Отчет Из Группа.Строки Цикл
					Если Отчет.Режим = Перечисления.РежимыАналитическихОтчетов.ТаблицаФакторов Тогда
						ЕстьФакторы = Истина;
					КонецЕсли;	
					Если Отчет.Режим = Перечисления.РежимыАналитическихОтчетов.ТаблицаИтоговыхПоказателей Тогда
						ЕстьЦелевые = Истина;
					КонецЕсли;
				КонецЦикла;			
			КонецЦикла;	
		КонецЦикла;		
		
		Если НЕ ЕстьФакторы Тогда
			Отказ = Истина;
			ВызватьИсключение(НСтр("ru = 'Для режима моделированя должна быть указана хотя бы одна таблица факторов.'"));
		КонецЕсли;	
		
		Если НЕ ЕстьЦелевые Тогда
			Отказ = Истина;
			ВызватьИсключение(НСтр("ru = 'Для режима моделированя должна быть указана хотя бы одна таблица целевых показателей.'"));
		КонецЕсли;	
			
	КонецЕсли;	
	
		
	Если ЗначениеЗаполнено(ПараметрыЗаписи) Тогда // Были изменены общие отборы
		
		ТаблицаОтборов         = ПолучитьИзВременногоХранилища(ПараметрыЗаписи.АдресСоответствийОтборов);
		ОбщийКомпоновщикДанных = ПолучитьИзВременногоХранилища(ПараметрыЗаписи.АдресНастроек);
		
		Для Каждого Элемент Из ТаблицаОтборов Цикл
			
			ТекСтрока = ТекущийОбъект.Состав.Найти(Элемент.НомерСтроки, "НомерСтроки");
			Если ТекСтрока <> Неопределено Тогда
				ТекСтрока.Отбор = Новый ХранилищеЗначения(Элемент.СоответствиеОтборов);
				ТекСтрока.Параметры = Новый ХранилищеЗначения(Элемент.СоответствиеПараметров);
			КонецЕсли;
			
		КонецЦикла;
		
		СКД = ТекущийОбъект.СхемаКомпоновкиДанныхХранилище.Получить();
		ТиповыеОтчетыУХ.ЗагрузитьВСхемуНастройкиКомпоновщика(СКД, ОбщийКомпоновщикДанных);
		ТекущийОбъект.СхемаКомпоновкиДанныхХранилище = Новый ХранилищеЗначения(СКД);
		
	Иначе
		ЗаписатьСоставПанели(ТекущийОбъект); // Изменена структура панели
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЕНИЯ СОСТАВОМ АНАЛИТИЧЕСКОЙ ПАНЕЛИ.
//

&НаКлиенте
Процедура СоздатьСтраницу(Команда)
	
	НоваяСтрока = СоставПанели.ПолучитьЭлементы().Добавить();
	НоваяСтрока.ТипЗаписи              = 0;
	НоваяСтрока.Использование          = Истина;
	НоваяСтрока.ОтображатьНаименование = Истина;
	НоваяСтрока.Область                = Нстр("ru = '(Новая страница)'");
	НоваяСтрока.ВидПроизвольногоОтчета = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГруппу(Команда)
	
	ТД = Элементы.СоставПанели.ТекущиеДанные;
	
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТД.ТипЗаписи = 0 Тогда
		Вн_Элементы = ТД.ПолучитьЭлементы();
		НоваяСтрока = Вн_Элементы.Добавить();
	ИначеЕсли ТД.ТипЗаписи = 1 Тогда
		РодительГруппы = ТД.ПолучитьРодителя();
		Вн_Элементы = РодительГруппы.ПолучитьЭлементы();
		НоваяСтрока = Вн_Элементы.Вставить(Вн_Элементы.Индекс(ТД));
		Элементы.СоставПанели.Развернуть(РодительГруппы.ПолучитьИдентификатор());
	ИначеЕсли ТД.ТипЗаписи = 2 Тогда
		Вн_Группа      = ТД.ПолучитьРодителя();
		РодительГруппы = Вн_Группа.ПолучитьРодителя();
		ТекЭлементы    = РодительГруппы.ПолучитьЭлементы();
		НоваяСтрока    = ТекЭлементы.Вставить(ТекЭлементы.Индекс(Вн_Группа));
		Элементы.СоставПанели.Развернуть(Вн_Группа.ПолучитьИдентификатор());
	КонецЕсли;
	
	НоваяСтрока.ТипЗаписи              = 1;
	НоваяСтрока.Использование          = Истина;
	НоваяСтрока.ОтображатьНаименование = Истина;
	НоваяСтрока.Область                = Нстр("ru = '(Новая группа)'");
	НоваяСтрока.ВидПроизвольногоОтчета = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПанельОтчета(Команда)
	
	ТД = Элементы.СоставПанели.ТекущиеДанные;
	
	Если ТД = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось определить страницу, в которую нужно поместить панель отчета'"));
		Возврат;
	КонецЕсли;
	
	Если ТД.ТипЗаписи = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя добавлять панель непосредственно на страницу.
		|Выберите группу, в которую нужно поместить панель отчета'"));
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("СоздатьПанельОтчетаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ПроизвольныеОтчеты.ФормаВыбора",,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПанельОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    РезультатВопроса = Результат;
    
    Если РезультатВопроса <> Неопределено Тогда
        
        ТекущаяСтрока = Элементы.СоставПанели.ТекущиеДанные;
        
        Родитель = ТекущаяСтрока.ПолучитьРодителя();
        
        Если Родитель = Неопределено Тогда
            Возврат;
        ИначеЕсли ТекущаяСтрока.ТипЗаписи = 1 Тогда
            СтрокаВставки = ТекущаяСтрока;
        Иначе
            СтрокаВставки = Родитель;
        КонецЕсли;
        
        МассивЭлементов = СтрокаВставки.ПолучитьЭлементы();
        
        Индекс = МассивЭлементов.Индекс(Элементы.СоставПанели.ТекущиеДанные);
        
        Если Индекс <> -1 Тогда
            НоваяСтрока = МассивЭлементов.Вставить(Индекс);
        Иначе
            НоваяСтрока = МассивЭлементов.Добавить();
        КонецЕсли;
        
        НоваяСтрока.ТипЗаписи              = 2;
        НоваяСтрока.Использование          = Истина;
        НоваяСтрока.ОтображатьНаименование = Истина;
        
        ЯвляетсяДиаграммой     = Ложь;
        НаименованиеОтчета     = "";
        
        ВидПроизвольногоОтчета = ОпределитьВидПроизвольногоОтчета(РезультатВопроса, НаименованиеОтчета, ЯвляетсяДиаграммой);
        
        НоваяСтрока.Область              = НаименованиеОтчета;
        НоваяСтрока.УниверсальныйОтчет   = РезультатВопроса;
        НоваяСтрока.НовыйОбъект          = Истина;
        НоваяСтрока.ИдентификаторОбласти = Новый УникальныйИдентификатор;
        
        Если ВидПроизвольногоОтчета >=5 Тогда
            НоваяСтрока.ВидПроизвольногоОтчета = ВидПроизвольногоОтчета;
        ИначеЕсли ВидПроизвольногоОтчета = 1 Тогда
            НоваяСтрока.ВидПроизвольногоОтчета = 3;
            НоваяСтрока.ОтображениеМонитора    = ПредопределенноеЗначение("Перечисление.СпособОтображенияМонитораКлючевыхПоказателей.ВДеревеЗначений");			
        ИначеЕсли ЯвляетсяДиаграммой Тогда
            НоваяСтрока.ВидПроизвольногоОтчета = 4;
        Иначе
            НоваяСтрока.ВидПроизвольногоОтчета = 2;
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

// Добавляет в отбор компоновки ОтборКомпоновкиВход элемент отбора с наименованием НаименованиеОтбораВход
// и значением из значения поля НаименованиеПоляВход структуры СтруктураДанныВход.
&НаСервереБезКонтекста
Процедура ДобавитьЭлементОтбора(ОтборКомпоновкиВход, СтруктураДанныВход, НаименованиеПоляВход, НаименованиеОтбораВход)
	ТипЭлементОтбора = Тип("ЭлементОтбораКомпоновкиДанных");
	ЭлементыОтбора = ОтборКомпоновкиВход.Элементы;
	НовыйЭлементКомпоновки = ЭлементыОтбора.Добавить(ТипЭлементОтбора);
	НовыйЭлементКомпоновки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НаименованиеОтбораВход);
	НовыйЭлементКомпоновки.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЗначениеСтруктуры = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныВход, НаименованиеПоляВход, Неопределено);
	Если ЗначениеЗаполнено(ЗначениеСтруктуры) Тогда
		НовыйЭлементКомпоновки.ПравоеЗначение	 = ЗначениеСтруктуры;
		НовыйЭлементКомпоновки.Использование	 = Истина;
	Иначе
		НовыйЭлементКомпоновки.ПравоеЗначение	 = Неопределено;
		НовыйЭлементКомпоновки.Использование	 = Ложь;
	КонецЕсли;
КонецПроцедуры

// Процедура заполняет состав панели отчетов, включив в нее отчеты из полученного в качестве параметра списка.
&НаСервере
Процедура НачальноеЗаполнениеПанели(СписокОтчетов)
	
	НоваяСтраница = СоставПанели.ПолучитьЭлементы().Добавить();
	НоваяСтраница.ТипЗаписи              = 0;
	НоваяСтраница.Использование          = Истина;
	НоваяСтраница.ОтображатьНаименование = Истина;
	НоваяСтраница.Область                = НСтр("ru = '(Новая страница)'");
	НоваяСтраница.ВидПроизвольногоОтчета = 0;
	
	НоваяГруппа = НоваяСтраница.ПолучитьЭлементы().Добавить();
	
	НоваяГруппа.ТипЗаписи              = 1;
	НоваяГруппа.Использование          = Истина;
	НоваяГруппа.ОтображатьНаименование = Истина;
	НоваяГруппа.Область                = Нстр("ru = '(Новая группа)'");
	НоваяГруппа.ВидПроизвольногоОтчета = 1;
	
	ЭлементыГруппы = НоваяГруппа.ПолучитьЭлементы();
	Для Каждого ОтчетЗначение Из СписокОтчетов Цикл
		
		Отчет = ОтчетЗначение.Значение;
		
		НоваяСтрока = ЭлементыГруппы.Добавить();
		
		НоваяСтрока.ТипЗаписи              = 2;
		НоваяСтрока.Использование          = Истина;
		НоваяСтрока.ОтображатьНаименование = Истина;
		
		ЯвляетсяДиаграммой     = Ложь;
		НаименованиеОтчета     = "";
		
		ВидПроизвольногоОтчета = ОпределитьВидПроизвольногоОтчета(Отчет, НаименованиеОтчета, ЯвляетсяДиаграммой);
		
		НоваяСтрока.Область              = НаименованиеОтчета;
		НоваяСтрока.УниверсальныйОтчет   = Отчет;
		НоваяСтрока.НовыйОбъект          = Истина;
		НоваяСтрока.ИдентификаторОбласти = Новый УникальныйИдентификатор;
		
		Если ВидПроизвольногоОтчета >=5 Тогда
			НоваяСтрока.ВидПроизвольногоОтчета = ВидПроизвольногоОтчета;
		ИначеЕсли ВидПроизвольногоОтчета = 1 Тогда
			НоваяСтрока.ВидПроизвольногоОтчета = 3;
			НоваяСтрока.ОтображениеМонитора    = ПредопределенноеЗначение("Перечисление.СпособОтображенияМонитораКлючевыхПоказателей.ВДеревеЗначений");			
		ИначеЕсли ЯвляетсяДиаграммой Тогда
			НоваяСтрока.ВидПроизвольногоОтчета = 4;
		Иначе
			НоваяСтрока.ВидПроизвольногоОтчета = 2;
		КонецЕсли;

		
	КонецЦикла;
	
	
КонецПроцедуры

// Вовзращает хранилище значений отбора компоновки данных по 
// структуре СтруктураОтбораВход.
&НаСервереБезКонтекста
Функция ПолучитьХранилищеЗначенийОтбора(СтруктураОтбораВход)
	РезультатФункции = Неопределено;
	ОтборСтроки = Новый ОтборКомпоновкиДанных;
	ДобавитьЭлементОтбора(ОтборСтроки, СтруктураОтбораВход, "Валюта",					 "Валюта");
	ДобавитьЭлементОтбора(ОтборСтроки, СтруктураОтбораВход, "Организация",				 "Организация");
	ДобавитьЭлементОтбора(ОтборСтроки, СтруктураОтбораВход, "ПериодОтчетаНачало",		 "ПериодОтчетаНачало");
	ДобавитьЭлементОтбора(ОтборСтроки, СтруктураОтбораВход, "ПериодОтчетаОкончание",	 "ПериодОтчетаОкончание");
	ДобавитьЭлементОтбора(ОтборСтроки, СтруктураОтбораВход, "Проект",					 "Проект");
	ДобавитьЭлементОтбора(ОтборСтроки, СтруктураОтбораВход, "Сценарий",					 "Сценарий");
	РезультатФункции = Новый ХранилищеЗначения(ОтборСтроки);
	Возврат РезультатФункции;
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьВидПроизвольногоОтчета(ТекущийОтчет, НаименованиеОтчета, ЯвляетсяДиаграммой)
	
	Если ТипЗнч(ТекущийОтчет) = Тип("СправочникСсылка.ПроизвольныеОтчеты") Тогда
		НаименованиеОтчета = ТекущийОтчет.Наименование;
		ЯвляетсяДиаграммой = ТекущийОтчет.ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.Диаграмма;
		Возврат ТекущийОтчет.ВидПроизвольногоОтчета;
	ИначеЕсли ТекущийОтчет = Перечисления.ВидыРасшифровокПоказателяМКП.ДинамикаПоказателя Тогда
		НаименованиеОтчета = Нстр("ru = 'Динамика показателя'");
		ЯвляетсяДиаграммой = Ложь;
		Возврат 5;
	ИначеЕсли ТекущийОтчет = Перечисления.ВидыРасшифровокПоказателяМКП.СтруктураПоказателя Тогда
		НаименованиеОтчета = Нстр("ru = 'Структура показателя'");
		ЯвляетсяДиаграммой = Ложь;
		Возврат 6;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
&НаСервере
Процедура ЗаполнитьТаблицуСостава()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтраницыПанели.Использование КАК Использование_СтраницыПанели,
	|	СтраницыПанели.Описание КАК Описание_СтраницыПанели,
	|	СтраницыПанели.ОтображатьНаименование КАК ОтображатьНаименование_СтраницыПанели,
	|	СтраницыПанели.ГруппировкаПанелей КАК ГруппировкаПанелей,
	|	ПанелиОтчетовГруппыОтчетов.Использование КАК Использование_ГруппаОтчета,
	|	ПанелиОтчетовГруппыОтчетов.Описание КАК Описание_ГруппаОтчета,
	|	ПанелиОтчетовГруппыОтчетов.ОтображатьНаименование КАК ОтображатьНаименование_ГруппаОтчета,
	|	ПанелиОтчетовСостав.Использование КАК Использование_ПроизвольныйОтчет,
	|	ПанелиОтчетовСостав.ОтображатьНаименование КАК ОтображатьНаименование_ПроизвольныйОтчет,
	|	ПанелиОтчетовСостав.Описание КАК Описание_ПроизвольныйОтчет,
	|	ПанелиОтчетовСостав.УниверсальныйОтчет КАК УниверсальныйОтчет,
	|	ПанелиОтчетовСостав.СохраненнаяНастройка КАК СохраненнаяНастройка,
	|	ПанелиОтчетовСостав.ОтображениеМонитора КАК ОтображениеМонитора,
	|	ВЫБОР
	|		КОГДА ПанелиОтчетовСостав.УниверсальныйОтчет = ЗНАЧЕНИЕ(Перечисление.ВидыРасшифровокПоказателяМКП.СтруктураПоказателя)
	|			ТОГДА 6
	|		КОГДА ПанелиОтчетовСостав.УниверсальныйОтчет = ЗНАЧЕНИЕ(Перечисление.ВидыРасшифровокПоказателяМКП.ДинамикаПоказателя)
	|			ТОГДА 5
	|		КОГДА ПроизвольныеОтчеты.ВидПроизвольногоОтчета = 1
	|			ТОГДА 3
	|		КОГДА ПроизвольныеОтчеты.ПредставлениеЭлементаОтчета = ЗНАЧЕНИЕ(Перечисление.ПредставленияЭлементовОтчетов.Диаграмма)
	|			ТОГДА 4
	|		КОГДА ПанелиОтчетовСостав.УниверсальныйОтчет ССЫЛКА Справочник.БланкиОтчетов
	|			ТОГДА 7
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ВидПроизвольногоОтчета,
	|	ПанелиОтчетовСостав.Отбор КАК Отбор,
	|	ПанелиОтчетовСостав.Параметры КАК Параметры,
	|	ПанелиОтчетовСостав.РасшифровываемыйОтчет КАК РасшифровываемыйОтчет,
	|	ПанелиОтчетовСостав.ИдентификаторОбласти КАК ИдентификаторОбласти,
	|	ПанелиОтчетовСостав.РасшифровываемаяОбласть КАК РасшифровываемаяОбласть,
	|	ПанелиОтчетовСостав.НомерАналитики КАК НомерАналитики,
	|	ПанелиОтчетовСостав.КоличествоПериодовДляОтображения КАК КоличествоПериодовДляОтображения,
	|	ПанелиОтчетовСостав.ОтображениеРасшифровки КАК ОтображениеРасшифровки,
	|	ПанелиОтчетовСостав.КоличествоКолонокВиджетов КАК КоличествоКолонокВиджетов,
	|	ПанелиОтчетовСостав.СкрыватьЛоготипПоказателей КАК СкрыватьЛоготипПоказателей,
	|	ПанелиОтчетовСостав.Режим КАК Режим,
	|	ПанелиОтчетовСостав.ВариантРазмещенияЛегендыДиаграммы КАК ВариантРазмещенияЛегендыДиаграммы,
	|	ПанелиОтчетовСостав.КоличествоСтолбцовДиаграммы КАК КоличествоСтолбцовДиаграммы,
	|	ПанелиОтчетовСостав.ТипОбластиДиаграммы КАК ТипОбластиДиаграммы,
	|	ПанелиОтчетовСостав.СкрыватьЗаголовокПринадлежностиЗависимойОбласти КАК СкрыватьЗаголовокПринадлежностиЗависимойОбласти,
	|	ПанелиОтчетовСостав.СкрыватьЗаголовокПоказателяЗависимойОбласти КАК СкрыватьЗаголовокПоказателяЗависимойОбласти
	|ИЗ
	|	Справочник.ПанелиОтчетов.Состав КАК ПанелиОтчетовСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПанелиОтчетов.ГруппыОтчетов КАК ПанелиОтчетовГруппыОтчетов
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПанелиОтчетов.СтраницыПанели КАК СтраницыПанели
	|			ПО (СтраницыПанели.ПорядковыйНомер = ПанелиОтчетовГруппыОтчетов.ИдентификаторСтраницы)
	|		ПО (ПанелиОтчетовГруппыОтчетов.ПорядковыйНомер = ПанелиОтчетовСостав.ИдентификаторКолонки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПроизвольныеОтчеты КАК ПроизвольныеОтчеты
	|		ПО ПанелиОтчетовСостав.УниверсальныйОтчет = ПроизвольныеОтчеты.Ссылка
	|ГДЕ
	|	ПанелиОтчетовГруппыОтчетов.Ссылка = &Ссылка
	|	И ПанелиОтчетовСостав.Ссылка = &Ссылка
	|	И СтраницыПанели.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПанелиОтчетовГруппыОтчетов.ПорядковыйНомер,
	|	ПанелиОтчетовСостав.ПорядковыйНомер
	|ИТОГИ
	|	МАКСИМУМ(Использование_СтраницыПанели),
	|	МАКСИМУМ(Описание_СтраницыПанели),
	|	МАКСИМУМ(ОтображатьНаименование_СтраницыПанели),
	|	МАКСИМУМ(ГруппировкаПанелей),
	|	МАКСИМУМ(Использование_ГруппаОтчета),
	|	МАКСИМУМ(Описание_ГруппаОтчета),
	|	МАКСИМУМ(ОтображатьНаименование_ГруппаОтчета)
	|ПО
	|	СтраницыПанели.ПорядковыйНомер,
	|	ПанелиОтчетовГруппыОтчетов.ПорядковыйНомер";
	
	ДеревоСоставПанели = РеквизитФормыВЗначение("СоставПанели");
	ДеревоСоставПанели.Строки.Очистить();
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		СтрокаСтраница                        = ДеревоСоставПанели.Строки.Добавить();
		СтрокаСтраница.Использование          = Выборка.Использование_СтраницыПанели;
		СтрокаСтраница.Область                = Выборка.Описание_СтраницыПанели;
		СтрокаСтраница.ТипЗаписи              = 0;
		СтрокаСтраница.ВидПроизвольногоОтчета = 0;
		СтрокаСтраница.ОтображатьНаименование = Выборка.ОтображатьНаименование_СтраницыПанели;
		СтрокаСтраница.ГруппировкаПанелей     = Выборка.ГруппировкаПанелей;
		ВыборкаГрупп = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаГрупп.Следующий() Цикл
			
			СтрокаГруппа                        = СтрокаСтраница.Строки.Добавить();
			СтрокаГруппа.Использование          = ВыборкаГрупп.Использование_ГруппаОтчета;
			СтрокаГруппа.Область                = ВыборкаГрупп.Описание_ГруппаОтчета;
			СтрокаГруппа.ТипЗаписи              = 1;
			СтрокаГруппа.ВидПроизвольногоОтчета = 1;
			СтрокаГруппа.ОтображатьНаименование = ВыборкаГрупп.ОтображатьНаименование_ГруппаОтчета;
			СтрокаГруппа.ГруппировкаПанелей     = -1;
			ВыборкаОтчетов = ВыборкаГрупп.Выбрать();
			
			Пока ВыборкаОтчетов.Следующий() Цикл
				СтрокаОтчет = СтрокаГруппа.Строки.Добавить();
				СтрокаОтчет.ТипЗаписи										 = 2;
				Строкаотчет.Использование									 = ВыборкаОтчетов.Использование_ПроизвольныйОтчет;
				СтрокаОтчет.Область											 = ВыборкаОтчетов.Описание_ПроизвольныйОтчет;
				СтрокаОтчет.УниверсальныйОтчет								 = ВыборкаОтчетов.УниверсальныйОтчет;
				СтрокаОтчет.СохраненнаяНастройка							 = ВыборкаОтчетов.СохраненнаяНастройка;
				СтрокаОтчет.ОтображатьНаименование							 = ВыборкаОтчетов.ОтображатьНаименование_ПроизвольныйОтчет;
				СтрокаОтчет.ВидПроизвольногоОтчета							 = ВыборкаОтчетов.ВидПроизвольногоОтчета;
				СтрокаОтчет.ГруппировкаПанелей								 = -1;
				СтрокаОтчет.Отбор.Добавить(ВыборкаОтчетов.Отбор);
				СтрокаОтчет.Параметры.Добавить(ВыборкаОтчетов.Параметры);
				СтрокаОтчет.РасшифровываемыйОтчет							 = ВыборкаОтчетов.РасшифровываемыйОтчет;
				СтрокаОтчет.ОтображениеМонитора								 = ВыборкаОтчетов.ОтображениеМонитора;
				СтрокаОтчет.КоличествоКолонокВиджетов						 = ВыборкаОтчетов.КоличествоКолонокВиджетов;
				СтрокаОтчет.КоличествоСтолбцовДиаграммы						 = ВыборкаОтчетов.КоличествоСтолбцовДиаграммы;
				СтрокаОтчет.СкрыватьЛоготипПоказателей						 = ВыборкаОтчетов.СкрыватьЛоготипПоказателей;
				СтрокаОтчет.СкрыватьЗаголовокПринадлежностиЗависимойОбласти	 = ВыборкаОтчетов.СкрыватьЗаголовокПринадлежностиЗависимойОбласти;
				СтрокаОтчет.СкрыватьЗаголовокПоказателяЗависимойОбласти		 = ВыборкаОтчетов.СкрыватьЗаголовокПоказателяЗависимойОбласти;
				СтрокаОтчет.ИдентификаторОбласти							 = ВыборкаОтчетов.ИдентификаторОбласти;
				СтрокаОтчет.РасшифровываемаяОбласть							 = ВыборкаОтчетов.РасшифровываемаяОбласть;
				СтрокаОтчет.НомерАналитики									 = ВыборкаОтчетов.НомерАналитики;
				СтрокаОтчет.ВариантРазмещенияЛегендыДиаграммы				 = ВыборкаОтчетов.ВариантРазмещенияЛегендыДиаграммы;
				СтрокаОтчет.КоличествоПериодовДляОтображения				 = ВыборкаОтчетов.КоличествоПериодовДляОтображения;
				СтрокаОтчет.ОтображениеРасшифровки							 = ВыборкаОтчетов.ОтображениеРасшифровки;
				СтрокаОтчет.Режим											 = ВыборкаОтчетов.Режим;
				СтрокаОтчет.ТипОбластиДиаграммы								 = ВыборкаОтчетов.ТипОбластиДиаграммы

			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоСоставПанели, "СоставПанели");
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСоставПанели(ТекущийОбъект)
	
	Перем КэшНастроекОтборов;
	
	ДеревоСоставПанели = РеквизитФормыВЗначение("СоставПанели");
	
	КэшНастроекОтборов = ТекущийОбъект.Состав.Выгрузить(, "УниверсальныйОтчет, Отбор");
	КэшНастроекОтборов.Индексы.Добавить("УниверсальныйОтчет");
	
	ТекущийОбъект.Состав.Очистить();
	ТекущийОбъект.ГруппыОтчетов.Очистить();
	ТекущийОбъект.СтраницыПанели.Очистить();
	
	ОбщийСКД = ТекущийОбъект.СхемаКомпоновкиДанныхХранилище.Получить();
	
	Если ОбщийСКД = Неопределено Тогда
		
		ОбщийСКД = Новый СхемаКомпоновкиДанных;
		ИД = ОбщийСКД.ИсточникиДанных.Добавить();
		ИД.Имя = "ИсточникДанных1";
		ИД.ТипИсточникаДанных = "Local";
		
		НаборДанных = ОбщийСКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
		НаборДанных.Имя = "НаборДанных1";
		НаборДанных.ИсточникДанных = ИД.Имя;
		
	КонецЕсли;
	
	ОбщийСКД.НаборыДанных[0].Поля.Очистить();
	ОбщийСКД.Параметры.Очистить();
	
	ПорядковыйНомерСтраницы = 0;
	ПорядковыйНомерГруппы = 0;
	ПорядковыйНомерОтчета = 0;
	
	Для Каждого Страница Из ДеревоСоставПанели.Строки Цикл
		
		НоваяСтрока_Страница                        = ТекущийОбъект.СтраницыПанели.Добавить();
		НоваяСтрока_Страница.Использование          = Страница.Использование;
		НоваяСтрока_Страница.ПорядковыйНомер        = ПорядковыйНомерСтраницы;
		НоваяСтрока_Страница.Описание               = Страница.Область;
		НоваяСтрока_Страница.ОтображатьНаименование = Страница.ОтображатьНаименование;
		НоваяСтрока_Страница.ГруппировкаПанелей     = Страница.ГруппировкаПанелей;
		
		Для Каждого Группа Из Страница.Строки Цикл
			
			НоваяСтрока_Группа = ТекущийОбъект.ГруппыОтчетов.Добавить();
			НоваяСтрока_Группа.Использование   = Группа.Использование;
			НоваяСтрока_Группа.ПорядковыйНомер = ПорядковыйНомерГруппы;
			НоваяСтрока_Группа.ИдентификаторСтраницы = ПорядковыйНомерСтраницы;
			НоваяСтрока_Группа.Описание        = Группа.Область;
			НоваяСтрока_Группа.ОтображатьНаименование = Группа.ОтображатьНаименование;
			
			Для Каждого Отчет Из Группа.Строки Цикл
				
				НоваяСтрока_Отчет = ТекущийОбъект.Состав.Добавить();
				
				НоваяСтрока_Отчет.Использование											 = Отчет.Использование;
				НоваяСтрока_Отчет.Описание												 = Отчет.Область;
				НоваяСтрока_Отчет.ПорядковыйНомер										 = ПорядковыйНомерОтчета;
				НоваяСтрока_Отчет.УниверсальныйОтчет									 = Отчет.УниверсальныйОтчет;
				НоваяСтрока_Отчет.СохраненнаяНастройка									 = Отчет.СохраненнаяНастройка;
				НоваяСтрока_Отчет.ИдентификаторКолонки									 = ПорядковыйНомерГруппы;
				НоваяСтрока_Отчет.ОтображатьНаименование								 = Отчет.ОтображатьНаименование;
				НоваяСтрока_Отчет.РасшифровываемыйОтчет									 = Отчет.РасшифровываемыйОтчет;
				НоваяСтрока_Отчет.ОтображениеМонитора									 = Отчет.ОтображениеМонитора;
				НоваяСтрока_Отчет.НомерАналитики										 = Отчет.НомерАналитики;
				НоваяСтрока_Отчет.ИдентификаторОбласти									 = Отчет.ИдентификаторОбласти;
				НоваяСтрока_Отчет.РасшифровываемаяОбласть								 = Отчет.РасшифровываемаяОбласть;
				НоваяСтрока_Отчет.КоличествоПериодовДляОтображения						 = Отчет.КоличествоПериодовДляОтображения;
				НоваяСтрока_Отчет.ОтображениеРасшифровки								 = Отчет.ОтображениеРасшифровки;
				НоваяСтрока_Отчет.КоличествоКолонокВиджетов								 = Отчет.КоличествоКолонокВиджетов;
				НоваяСтрока_Отчет.КоличествоСтолбцовДиаграммы							 = Отчет.КоличествоСтолбцовДиаграммы;
				НоваяСтрока_Отчет.ВариантРазмещенияЛегендыДиаграммы						 = Отчет.ВариантРазмещенияЛегендыДиаграммы;
				НоваяСтрока_Отчет.СкрыватьЛоготипПоказателей							 = Отчет.СкрыватьЛоготипПоказателей;
				НоваяСтрока_Отчет.СкрыватьЗаголовокПринадлежностиЗависимойОбласти		 = Отчет.СкрыватьЗаголовокПринадлежностиЗависимойОбласти;
				НоваяСтрока_Отчет.СкрыватьЗаголовокПоказателяЗависимойОбласти			 = Отчет.СкрыватьЗаголовокПоказателяЗависимойОбласти;
				НоваяСтрока_Отчет.ТипОбластиДиаграммы									 = Отчет.ТипОбластиДиаграммы;
				
				Если ТипЗнч(Отчет.УниверсальныйОтчет) = Тип("СправочникСсылка.ПроизвольныеОтчеты") Тогда // Отчеты по динамике и структуре показателя не влияют на состав общего отбора.
					КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
					
					URLСхемы = ТиповыеОтчетыУХ.СформироватьСхемуКомпоновкиДанных(Отчет.УниверсальныйОтчет);
					
					Если URLСхемы <> Неопределено Тогда
						
						КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
						СоответствиеОтборов = Новый Соответствие;
						
						Если НЕ Отчет.НовыйОбъект Тогда
							
							СоответствиеОтборовСтарые = Отчет.Отбор[0].Значение.Получить();
							
						КонецЕсли;
						
						Для Каждого Элемент Из КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.Элементы Цикл
							Если НЕ Элемент.Папка Тогда
								
								Если ТипЗнч(СоответствиеОтборовСтарые) = Тип("Соответствие") Тогда
									Если Отчет.НовыйОбъект  ИЛИ СоответствиеОтборовСтарые[Элемент.Поле] = Неопределено Тогда
										СоответствиеОтборов.Вставить(Элемент.Поле, Ложь);
									Иначе
										СоответствиеОтборов.Вставить(Элемент.Поле, СоответствиеОтборовСтарые[Элемент.Поле]);
									КонецЕсли;
								Иначе
									СоответствиеОтборов.Вставить(Элемент.Поле, Ложь);
								КонецЕсли;
								
								НовоеПоле = ОбщийСКД.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
								НовоеПоле.Поле        = Строка(Элемент.Поле);
								НовоеПоле.Заголовок   = Элемент.Заголовок;
								НовоеПоле.ПутьКДанным = Строка(Элемент.Поле);
								НовоеПоле.ТипЗначения = Элемент.Тип;
								
							КонецЕсли;
						КонецЦикла;
						
						Если Не Отчет.НовыйОбъект Тогда
							
							СоответствиеПараметровСтарые = Отчет.Параметры[0].Значение.Получить();
							
						КонецЕсли;
						
						СоответствиеПараметров = Новый Соответствие;
						
						СКДЭлемента = ПолучитьИзВременногоХранилища(URLСхемы);
						
						Для Каждого Элемент Из СКДЭлемента.Параметры Цикл
							
							Если ОбщийСКД.Параметры.Найти(Элемент.Имя) = Неопределено Тогда
								ЗаполнитьЗначенияСвойств(ОбщийСКД.Параметры.Добавить(), Элемент);
							КонецЕсли;
							
							Если Отчет.НовыйОбъект ИЛИ СоответствиеПараметровСтарые = Неопределено ИЛИ СоответствиеПараметровСтарые[Элемент.Имя] = Неопределено Тогда
								СоответствиеПараметров.Вставить(Элемент.Имя, Ложь);
							Иначе
								СоответствиеПараметров.Вставить(Элемент.Имя, СоответствиеПараметровСтарые[Элемент.Имя]);
							КонецЕсли;
								
							
						КонецЦикла;
						
					КонецЕсли;
				
					НоваяСтрока_Отчет.Отбор = Новый ХранилищеЗначения(СоответствиеОтборов);
					НоваяСтрока_Отчет.Параметры = Новый ХранилищеЗначения(СоответствиеПараметров);
					
				ИначеЕсли ТипЗнч(Отчет.УниверсальныйОтчет) = Тип("СправочникСсылка.БланкиОтчетов") Тогда 
					
					НоваяСтрока_Отчет.Режим =  Отчет.Режим;
					
					Если Отчет.Отбор.Количество() > 0 Тогда
						ПервыйЭлементОтбора = Отчет.Отбор[0].Значение;
						Если ТипЗнч(ПервыйЭлементОтбора) = Тип("ХранилищеЗначения") Тогда 
							НоваяСтрока_Отчет.Отбор = ПервыйЭлементОтбора;
						Иначе
							НоваяСтрока_Отчет.Отбор = Новый ХранилищеЗначения(Неопределено);
						КонецЕсли;
					Иначе
						НоваяСтрока_Отчет.Отбор = Новый ХранилищеЗначения(Неопределено);		// Пустое значение отбора.
					КонецЕсли;
				КонецЕсли; 
				
				ПорядковыйНомерОтчета = ПорядковыйНомерОтчета + 1;
			КонецЦикла;
			
			ПорядковыйНомерГруппы = ПорядковыйНомерГруппы + 1;
			
		КонецЦикла;
		
		ПорядковыйНомерСтраницы = ПорядковыйНомерСтраницы + 1;
		
	КонецЦикла;
	
	ТекущийОбъект.СхемаКомпоновкиДанныхХранилище = Новый ХранилищеЗначения(ОбщийСКД);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПанелиУниверсальныйОтчетПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СоставПанели.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ПустаяСтрока(ТекущиеДанные.Область) Тогда
		ТекущиеДанные.Область = ТекущиеДанные.УниверсальныйОтчет.Наименование;
	КонецЕсли;
	
	Если ТекущиеДанные.УниверсальныйОтчет.ВидПроизвольногоОтчета = 1 Тогда
		ТекущиеДанные.ВидПроизвольногоОтчета = 2;
	ИначеЕсли ТекущиеДанные.УниверсальныйОтчет.ПредставлениеЭлементаОтчета = ПредставлениеЭлементаОтчетаДиаграмма Тогда
		ТекущиеДанные.ВидПроизвольногоОтчета = 3;
	Иначе
		ТекущиеДанные.ВидПроизвольногоОтчета = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбщиеОтборы(Команда)
	
	Если Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОткрытьОбщиеОтборыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Для продолжения нужно сохранить панель отчетов. Сохранить?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ОткрытьОбщиеОтборыПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбщиеОтборыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ Записать() Тогда
        ПоказатьПредупреждение(, НСтр("ru = 'Не удалось записать панель отчетов'"));
        Возврат;
    КонецЕсли;    
    
    ОткрытьОбщиеОтборыПродолжение();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбщиеОтборыПродолжение()
    
    РезультатВыбора = Неопределено;

    ПараметрыФормы = Новый Структура("Объект", Объект.Ссылка);
	Оповещение = Новый ОписаниеОповещения("ОткрытьОбщиеОтборыПродолжениеЗавершение", ЭтотОбъект);
    ОткрытьФорму("Справочник.ПанелиОтчетов.Форма.ФормаНастройкиОтборов_Управляемая", 
					ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбщиеОтборыПродолжениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    РезультатВыбора = Результат;
    
    Если РезультатВыбора <> Неопределено Тогда        
        ПрименитьНастройкиОбщихОтборов(РезультатВыбора);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПрименитьНастройкиОбщихОтборов(РезультатВыбора)
	
	Записать(РезультатВыбора);
	ЗаполнитьТаблицуСостава();
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПанель(Команда)
	
	Если Параметры.Ключ.Пустая() ИЛИ Модифицированность Тогда
		
		Ответ = Неопределено;
		
		Оповещение = Новый ОписаниеОповещения("ОткрытьПанельЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, 
						НСтр("ru = 'Для продолжения нужно сохранить изменения панели. Сохранить?'"), 
						РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ПанелиОтчетов.Форма.ФормаЭлемента_Управляемая", Новый Структура("Ключ", Параметры.Ключ));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПанельЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        
        Если НЕ Записать() Тогда
            ПоказатьПредупреждение(, НСтр("ru = 'Ошибка при записи панели'"));
            Возврат;
        КонецЕсли;
        
    Иначе
        Возврат;
    КонецЕсли;    
    
    ОткрытьФорму("Справочник.ПанелиОтчетов.Форма.ФормаЭлемента_Управляемая", Новый Структура("Ключ", Параметры.Ключ));

КонецПроцедуры

&НаСервере
Функция СохранитьВХранилищеДеревоСостава()
	
	ДеревоСостава = РеквизитФормыВЗначение("СоставПанели");
	Возврат ПоместитьВоВременноеХранилище(ДеревоСостава);
	
КонецФункции

&НаСервере
Процедура ПеренестиНастройкиВДеревоСостава(РезультатВыполнения, УниверсальныйОтчет)
	
	ДеревоСостава = РеквизитФормыВЗначение("СоставПанели");
	
	Для Каждого Элемент Из РезультатВыполнения Цикл
		
		НайденнаяСтрока = ДеревоСостава.Строки.Найти(Элемент.Ключ, "УниверсальныйОтчет" , Истина);
		Если НайденнаяСтрока <> Неопределено Тогда
			
			НайденнаяСтрока.РасшифровываемыйОтчет = ?(Элемент.Значение, УниверсальныйОтчет, Справочники.ПроизвольныеОтчеты.ПустаяСсылка());
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоСостава, "СоставПанели");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодчиненныеОтчеты(Команда)
	
	ТекСтрока = Элементы.СоставПанели.ДанныеСтроки(Элементы.СоставПанели.ТекущаяСтрока);
	
	Если ТекСтрока <> Неопределено Тогда
		УниверсальныйОтчет = ТекСтрока.УниверсальныйОтчет;
		РезультатВыполнения = Неопределено;

		ПараметрыФормы = Новый Структура("УниверсальныйОтчет, АдресДереваСоставов, Область", 
											УниверсальныйОтчет, СохранитьВХранилищеДеревоСостава(), ТекСтрока.Область);
											
		ДопПараметры = Новый Структура("УниверсальныйОтчет", УниверсальныйОтчет);
		Оповещение = Новый ОписаниеОповещения("ПодчиненныеОтчетыЗавершение", ЭтотОбъект, ДопПараметры);
		
		ОткрытьФорму("Справочник.ПанелиОтчетов.Форма.НастройкаПодчиненностиОтчетов", 
					ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодчиненныеОтчетыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    УниверсальныйОтчет = ДополнительныеПараметры.УниверсальныйОтчет;
    
    
    РезультатВыполнения = Результат;
    Если РезультатВыполнения <> Неопределено Тогда
        
        ПеренестиНастройкиВДеревоСостава(РезультатВыполнения, УниверсальныйОтчет);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоставПанелиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка <> Неопределено Тогда
		ТипЗаписиИсточника = СоставПанели.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]).ТипЗаписи;
		ТипЗаписиПриемника = СоставПанели.НайтиПоИдентификатору(Строка).ТипЗаписи;
		СтандартнаяОбработка = ТипЗаписиИсточника < ТипЗаписиПриемника;
	Иначе
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПанелиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ЗаписьИсточника = СоставПанели.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]);
	ЗаписьПриемника = СоставПанели.НайтиПоИдентификатору(Строка);
	Если ЗаписьИсточника.ТипЗаписи > ЗаписьПриемника.ТипЗаписи Тогда
		НоваяСтрока = ЗаписьПриемника.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗаписьИсточника);
		ПеренестиДочерниеОбъекты(НоваяСтрока, ЗаписьИсточника);
		ЭлементыРодителяЗаписи        = ЗаписьИсточника.ПолучитьРодителя().ПолучитьЭлементы();
		ИндексУдаляемойСтроки = ЭлементыРодителяЗаписи.Индекс(ЗаписьИсточника);
		ЭлементыРодителяЗаписи.Удалить(ИндексУдаляемойСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиДочерниеОбъекты(ЭлементПриемник, ЭлементИсточник)
	
	ПодчиненныеЭлементыПриемник = ЭлементПриемник.ПолучитьЭлементы();
	ПодчиненныеЭлементыИсточник = ЭлементИсточник.ПолучитьЭлементы();
	Для Каждого Элемент Из ПодчиненныеЭлементыИсточник Цикл
		
		НоваяСтрока = ПодчиненныеЭлементыПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
		ПеренестиДочерниеОбъекты(НоваяСтрока, Элемент);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПанелиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = СоставПанели.НайтиПоИдентификатору(ВыбраннаяСтрока);

	СтандартнаяОбработка = Ложь;
	
	Если  Поле.Имя = "СоставПанелиРежим"  И ТекущиеДанные.ВидПроизвольногоОтчета > 1 Тогда
		  СтандартнаяОбработка = Истина;
		  Возврат;
	КонецЕсли;	
	
	
	Если Поле.Имя <> "СоставПанелиГруппировкаПанелей" И ТекущиеДанные.ВидПроизвольногоОтчета > 1 Тогда
		СтруктураВызова = Новый Структура;
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.РасшифровываемаяОбласть) Тогда
			ОбластьВладелец = Неопределено;
			СтруктураВызова.Вставить("ЗависимаяОбласть", Ложь);
		Иначе
			НайденныеДанные = РаботаСДиалогамиУХ.ПоискПоДеревуЗначений(СоставПанели, Новый Структура("ИдентификаторОбласти", ТекущиеДанные.РасшифровываемаяОбласть));
			Если НайденныеДанные <> Неопределено Тогда
				ОбластьВладелец = НайденныеДанные.Область;
			Иначе
				ОбластьВладелец = Неопределено;
			КонецЕсли;
			СтруктураВызова.Вставить("ЗависимаяОбласть", Истина);
		КонецЕсли;
		
		СтруктураВызова.Вставить("ВариантРазмещенияЛегендыДиаграммы",				 ТекущиеДанные.ВариантРазмещенияЛегендыДиаграммы);
		СтруктураВызова.Вставить("ВидПроизвольногоОтчета",							 ТекущиеДанные.ВидПроизвольногоОтчета);
		СтруктураВызова.Вставить("КоличествоКолонокВиджетов",						 ТекущиеДанные.КоличествоКолонокВиджетов);
		СтруктураВызова.Вставить("КоличествоПериодовДляОтображения",				 ТекущиеДанные.КоличествоПериодовДляОтображения);
		СтруктураВызова.Вставить("КоличествоСтолбцовДиаграммы",						 ТекущиеДанные.КоличествоСтолбцовДиаграммы);
		СтруктураВызова.Вставить("НомерАналитики",									 ТекущиеДанные.НомерАналитики);
		СтруктураВызова.Вставить("Область",											 ТекущиеДанные.Область);
		СтруктураВызова.Вставить("ОбластьВладелец",									 ОбластьВладелец);
		СтруктураВызова.Вставить("ОтображениеМонитора",								 ТекущиеДанные.ОтображениеМонитора);
		СтруктураВызова.Вставить("ОтображениеРасшифровки",							 ТекущиеДанные.ОтображениеРасшифровки);
		СтруктураВызова.Вставить("РасшифровываемаяОбласть",							 ТекущиеДанные.РасшифровываемаяОбласть);
		СтруктураВызова.Вставить("СкрыватьЛоготипПоказателей",						 ТекущиеДанные.СкрыватьЛоготипПоказателей);
		СтруктураВызова.Вставить("СкрыватьЗаголовокПринадлежностиЗависимойОбласти",	 ТекущиеДанные.СкрыватьЗаголовокПринадлежностиЗависимойОбласти);
		СтруктураВызова.Вставить("СкрыватьЗаголовокПоказателяЗависимойОбласти",		 ТекущиеДанные.СкрыватьЗаголовокПоказателяЗависимойОбласти);
		СтруктураВызова.Вставить("СохраненнаяНастройка",							 ТекущиеДанные.СохраненнаяНастройка);
		СтруктураВызова.Вставить("ТипОбластиДиаграммы",								 ТекущиеДанные.ТипОбластиДиаграммы);
		СтруктураВызова.Вставить("УниверсальныйОтчет",								 ТекущиеДанные.УниверсальныйОтчет);
		СтруктураВызова.Вставить("ФиксированныйОтбор",								 ТекущиеДанные.Отбор);
		
		Если ЗначениеЗаполнено(ТекущиеДанные.РасшифровываемаяОбласть) Тогда
			
			РезультатВыполнения = Неопределено;

			ПараметрыФормы = Новый Структура("Данные, СписокРасшифровываемыхОбластей", 
												Новый ФиксированнаяСтруктура(СтруктураВызова), ПолучитьСписокМКП());
												
			ДопПараметры = Новый Структура("Поле, СтруктураВызова, ТекущиеДанные", Поле, СтруктураВызова, ТекущиеДанные);
			Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаНастройки", ЭтотОбъект, ДопПараметры);
			ОткрытьФорму("Справочник.ПанелиОтчетов.Форма.ФормаНастройкиПанелиОтчета", 
							ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
            Возврат;
			
		Иначе
			
			ПараметрыФормы = Новый Структура("Данные", Новый ФиксированнаяСтруктура(СтруктураВызова));
			ДопПараметры = Новый Структура("Поле, ТекущиеДанные", Поле, ТекущиеДанные);
			Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаНастройки", ЭтотОбъект, ДопПараметры);
			ОткрытьФорму("Справочник.ПанелиОтчетов.Форма.ФормаНастройкиПанелиОтчета", 
							ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
            Возврат;
			
		КонецЕсли;
		
		ЗаполнитьТекущиеДанныеИзРезультата(РезультатВыполнения, ТекущиеДанные);
		
	ИначеЕсли Поле.Имя = "СоставПанелиГруппировкаПанелей" Тогда
		ТекущиеДанные.ГруппировкаПанелей = ?(ТекущиеДанные.ГруппировкаПанелей = 0, 1, 0);
	Иначе
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаНастройки(Результат, ДополнительныеПараметры) Экспорт
    
    Поле 			= ДополнительныеПараметры.Поле;    
    ТекущиеДанные 	= ДополнительныеПараметры.ТекущиеДанные;
        
    РезультатВыполнения = Результат;    
    ЗаполнитьТекущиеДанныеИзРезультата(РезультатВыполнения, ТекущиеДанные);
	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекущиеДанныеИзРезультата(Результат, ТекущиеДанные)
    
	Если Результат <> Неопределено Тогда        
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);   
		Если Результат.Свойство("ФиксированныйОтбор") Тогда
			ХранилищеОтбора = ПолучитьХранилищеЗначенийОтбора(Результат.ФиксированныйОтбор);
			ТекущиеДанные.Отбор.Очистить();
			ТекущиеДанные.Отбор.Добавить(ХранилищеОтбора);
		Иначе	
			// Не добавляем отбор.
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьГруппировкуПанелей(Команда)
	
	ТекущиеДанные = СоставПанели.НайтиПоИдентификатору(Элементы.СоставПанели.ТекущаяСтрока);
	Если ТекущиеДанные.ТипЗаписи <> 0 Тогда
		Сообщить(НСтр("ru = 'Команда доступна только для страницы аналитической панели'"));
	Иначе
		ТекущиеДанные.ГруппировкаПанелей = ?(ТекущиеДанные.ГруппировкаПанелей = 0, 1, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПанелиПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СоставПанели.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТС = СоставПанели.НайтиПоИдентификатору(Элементы.СоставПанели.ТекущаяСтрока);
	
	Если ТС <> Неопределено Тогда
		
		УстановитьПризнакПодчиненности(ТС.ИдентификаторОбласти, СоставПанели);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакПодчиненности(УИ, НаборЭлементов)
	
	Строки = НаборЭлементов.ПолучитьЭлементы();
	Для Каждого Элемент Из Строки Цикл
		
		Если ЗначениеЗаполнено(УИ) Тогда
			Элемент.ПодчиненнаяОбласть = Элемент.РасшифровываемаяОбласть = УИ;
		Иначе
			Элемент.ПодчиненнаяОбласть = Ложь;
		КонецЕсли;
		
		УстановитьПризнакПодчиненности(УИ, Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗависимуюОбласть(Команда)
	
	ТекСтрока = Элементы.СоставПанели.ДанныеСтроки(Элементы.СоставПанели.ТекущаяСтрока);
	
	Если ТекСтрока <> Неопределено Тогда
		
		УниверсальныйОтчет = ТекСтрока.УниверсальныйОтчет;
		РезультатВыполнения = Неопределено;

		ПараметрыФормы = Новый Структура("УниверсальныйОтчет", УниверсальныйОтчет);		
		Оповещение = Новый ОписаниеОповещения("ДобавитьЗависимуюОбластьЗавершение", ЭтотОбъект, Новый Структура("ТекСтрока", ТекСтрока));
		ОткрытьФорму("Справочник.ПанелиОтчетов.Форма.НастройкаПодчиненностиОтчетов", 
						ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗависимуюОбластьЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекСтрока = ДополнительныеПараметры.ТекСтрока;
        
    РезультатВыполнения = Результат;
    Если РезультатВыполнения <> Неопределено Тогда
        
        Родитель = ТекСтрока.ПолучитьРодителя();
        ЭлементыРодителя = Родитель.ПОлучитьЭлементы();
        
        Для Каждого Отчет Из РезультатВыполнения Цикл
            
            НоваяСтрока = ЭлементыРодителя.Добавить();
            НоваяСтрока.ТипЗаписи              = 2;
            НоваяСтрока.Использование          = Истина;
            НоваяСтрока.ОтображатьНаименование = Истина;
            
            ЯвляетсяДиаграммой     = Ложь;
            НаименованиеОтчета     = "";
            
            ВидПроизвольногоОтчета = ОпределитьВидПроизвольногоОтчета(Отчет, НаименованиеОтчета, ЯвляетсяДиаграммой);
            
            НоваяСтрока.Область                 = НаименованиеОтчета;
            НоваяСтрока.УниверсальныйОтчет      = Отчет;
            НоваяСтрока.НовыйОбъект             = Истина;
            НоваяСтрока.ИдентификаторОбласти    = Новый УникальныйИдентификатор;
            НоваяСтрока.РасшифровываемаяОбласть = ТекСтрока.ИдентификаторОбласти;
            
            Если ВидПроизвольногоОтчета >= 5 Тогда
                НоваяСтрока.ВидПроизвольногоОтчета = ВидПроизвольногоОтчета;
            ИначеЕсли ВидПроизвольногоОтчета = 1 Тогда
                НоваяСтрока.ВидПроизвольногоОтчета = 3;
            ИначеЕсли ЯвляетсяДиаграммой Тогда
                НоваяСтрока.ВидПроизвольногоОтчета = 4;
            Иначе
                НоваяСтрока.ВидПроизвольногоОтчета = 2;
            КонецЕсли;
            
        КонецЦикла;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокМКП()
	
	СписокМКП = Новый СписокЗначений;
	МассивНайденныхОтчетов = Новый Массив;
	
	МассивТиповОтчетов = Новый Массив;
	РаботаСДиалогамиУХ.МножественныйПоискПоДеревуЗначенийНезаполненныхСтрок(МассивНайденныхОтчетов, СоставПанели, "РасшифровываемаяОбласть");
	
	Если МассивНайденныхОтчетов.Количество() = 0 Тогда
		Возврат СписокМКП;
	КонецЕсли;
	
	Для Каждого Элемент Из МассивНайденныхОтчетов Цикл
		Если Элемент.ВидПроизвольногоОтчета >=2 Тогда // Не учитываем группировки по страницами и группам областей.
			СписокМКП.Добавить(Элемент.ИдентификаторОбласти, Элемент.Область, Элемент.ВидПроизвольногоОтчета = 3);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокМКП;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьНовуюРасшифровкуМКП(ВидПроизвольногоОтчета)
	
	СписокМКП = ПолучитьСписокМКП();
	ТД = Элементы.СоставПанели.ТекущиеДанные;
	
	Если ТД = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось определить страницу, в которую нужно поместить панель отчета'"));
		Возврат;
	КонецЕсли;
	
	Если ТД.ТипЗаписи = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя добавлять панель непосредственно на страницу.
		|Выберите группу, в которую нужно поместить панель отчета'"));
		Возврат;
	КонецЕсли;
	
	СтруктураВызова = Новый Структура("ВидПроизвольногоОтчета, ЗависимаяОбласть", ВидПроизвольногоОтчета, Истина);
	РезультатВыбора = Неопределено;

	ПараметрыФормы = Новый Структура("СписокРасшифровываемыхОбластей, Данные", СписокМКП, СтруктураВызова);
	Оповещение = Новый ОписаниеОповещения("ДобавитьНовуюРасшифровкуМКПЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ПанелиОтчетов.Форма.ФормаНастройкиПанелиОтчета", 
					ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовуюСводнуюТаблицу()
	
	
	ТД = Элементы.СоставПанели.ТекущиеДанные;
	
	Если ТД = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось определить страницу, в которую нужно поместить панель отчета'"));
		Возврат;
	КонецЕсли;
	
	Если ТД.ТипЗаписи = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя добавлять панель непосредственно на страницу.
		|Выберите группу, в которую нужно поместить панель отчета'"));
		Возврат;
	КонецЕсли;
	
	//СтруктураВызова = Новый Структура("ВидПроизвольногоОтчета, ЗависимаяОбласть", ВидПроизвольногоОтчета, Истина);
	РезультатВыбора = Неопределено;

	ПараметрыФормы = Новый Структура("РежимБланка", 1);
	Оповещение = Новый ОписаниеОповещения("ДобавитьНовуюСводнуюТаблицуЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.БланкиОтчетов.Форма.ФормаВыбора", 
					ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры



&НаКлиенте
Процедура ДобавитьНовуюРасшифровкуМКПЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    РезультатВыбора = Результат;
    
    Если РезультатВыбора <> Неопределено Тогда
        
        ТекущаяСтрока = Элементы.СоставПанели.ТекущиеДанные;
        
        Родитель = ТекущаяСтрока.ПолучитьРодителя();
        
        Если Родитель = Неопределено Тогда
            Возврат;
        ИначеЕсли ТекущаяСтрока.ТипЗаписи = 1 Тогда
            СтрокаВставки = ТекущаяСтрока;
        Иначе
            СтрокаВставки = Родитель;
        КонецЕсли;
        
        МассивЭлементов = СтрокаВставки.ПолучитьЭлементы();
        
        Индекс = МассивЭлементов.Индекс(Элементы.СоставПанели.ТекущиеДанные);
        
        Если Индекс <> -1 Тогда
            НоваяСтрока = МассивЭлементов.Вставить(Индекс);
        Иначе
            НоваяСтрока = МассивЭлементов.Добавить();
        КонецЕсли;
        
        НоваяСтрока.ТипЗаписи              = 2;
        НоваяСтрока.Использование          = Истина;
        НоваяСтрока.ОтображатьНаименование = Истина;
        
        ЯвляетсяДиаграммой     = Ложь;
        НаименованиеОтчета     = "";
        
        НоваяСтрока.ВидПроизвольногоОтчета = РезультатВыбора.ВидПроизвольногоОтчета;
		// Вычислим и установим отчет в строке.
		НовыйВидРасшифровки = БизнесАнализКлиентУХ.ПолучитьУниверсальныйОтчетПоВидуОтчета(РезультатВыбора.ВидПроизвольногоОтчета);
		Если ЗначениеЗаполнено(НовыйВидРасшифровки) Тогда
			НоваяСтрока.УниверсальныйОтчет   = НовыйВидРасшифровки;		// Это расшифровка зависимой области. Будем выводить её.
		Иначе
			НоваяСтрока.УниверсальныйОтчет   = РезультатВыбора.УниверсальныйОтчет;		// Это не расшифровка. Выведем непосредственно отчет.
		КонецЕсли;
		        
        НоваяСтрока.Область                          = РезультатВыбора.Область;
        НоваяСтрока.РасшифровываемаяОбласть          = РезультатВыбора.РасшифровываемаяОбласть;
        НоваяСтрока.НовыйОбъект                      = Истина;
        НоваяСтрока.ИдентификаторОбласти             = Новый УникальныйИдентификатор;
        НоваяСтрока.ОтображениеРасшифровки           = РезультатВыбора.ОтображениеРасшифровки;
        НоваяСтрока.НомерАналитики                   = РезультатВыбора.НомерАналитики;
        НоваяСтрока.КоличествоПериодовДляОтображения = РезультатВыбора.КоличествоПериодовДляОтображения;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовуюСводнуюТаблицуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    РезультатВыбора = Результат;
    
    Если РезультатВыбора <> Неопределено Тогда
        
        ТекущаяСтрока = Элементы.СоставПанели.ТекущиеДанные;
        
        Родитель = ТекущаяСтрока.ПолучитьРодителя();
        
        Если Родитель = Неопределено Тогда
            Возврат;
        ИначеЕсли ТекущаяСтрока.ТипЗаписи = 1 Тогда
            СтрокаВставки = ТекущаяСтрока;
        Иначе
            СтрокаВставки = Родитель;
        КонецЕсли;
        
        МассивЭлементов = СтрокаВставки.ПолучитьЭлементы();
        
        Индекс = МассивЭлементов.Индекс(Элементы.СоставПанели.ТекущиеДанные);
        
        Если Индекс <> -1 Тогда
            НоваяСтрока = МассивЭлементов.Вставить(Индекс);
        Иначе
            НоваяСтрока = МассивЭлементов.Добавить();
        КонецЕсли;
        
        НоваяСтрока.ТипЗаписи              = 10;
        НоваяСтрока.Использование          = Истина;
        НоваяСтрока.ОтображатьНаименование = Истина;
        
        ЯвляетсяДиаграммой     = Ложь;
        НаименованиеОтчета     = Строка(Результат);
        
		НоваяСтрока.ВидПроизвольногоОтчета = 7;
        
        НоваяСтрока.УниверсальныйОтчет   = РезультатВыбора;
                
	    НоваяСтрока.Область                          = Строка(Результат);
		//НоваяСтрока.РасшифровываемаяОбласть          = РезультатВыбора.РасшифровываемаяОбласть;
        НоваяСтрока.НовыйОбъект                      = Истина;
        НоваяСтрока.ИдентификаторОбласти             = Новый УникальныйИдентификатор;
		//НоваяСтрока.ОтображениеРасшифровки           = РезультатВыбора.ОтображениеРасшифровки;
		//НоваяСтрока.НомерАналитики                   = РезультатВыбора.НомерАналитики;
		//НоваяСтрока.КоличествоПериодовДляОтображения = РезультатВыбора.КоличествоПериодовДляОтображения;
        
    КонецЕсли;

КонецПроцедуры



&НаКлиенте
Процедура ДобавитьДинамикуПоказателя(Команда)
	
	ДобавитьНовуюРасшифровкуМКП(5);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтруктуруПоказателя(Команда)
	
	ДобавитьНовуюРасшифровкуМКП(6);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПанелиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить(1, Нстр("ru = 'Обычная область'"));
		СписокВыбора.Добавить(2, Нстр("ru = 'Зависимая область'"));
		СписокВыбора.Добавить(3, Нстр("ru = 'Бланк сводной таблицы'"));
		СписокВыбора.Добавить(4, Нстр("ru = 'Диаграмма ганта'"));
		РезультатВыбора = Неопределено;

		Оповещение = Новый ОписаниеОповещения("СоставПанелиПередНачаломДобавленияЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(Оповещение, СписокВыбора, Элемент);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПанелиПередНачаломДобавленияЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    РезультатВыбора = ВыбранныйЭлемент;
    Если РезультатВыбора = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Если РезультатВыбора.Значение = 1 Тогда
        СоздатьПанельОтчета(Неопределено);
    ИначеЕсли РезультатВыбора.Значение = 2 Тогда
        ДобавитьНовуюРасшифровкуМКП(5);
	ИначеЕсли РезультатВыбора.Значение = 3  Тогда
        ДобавитьНовуюСводнуюТаблицу();		
	ИначеЕсли РезультатВыбора.Значение = 4  Тогда
       ДобавитьНовуюДиаграммуГанта();		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовуюДиаграммуГанта()
	
	ТД = Элементы.СоставПанели.ТекущиеДанные;
	
	Если ТД = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось определить страницу, в которую нужно поместить панель диаграммы'"));
		Возврат;
	КонецЕсли;
	
	Если ТД.ТипЗаписи = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя добавлять панель непосредственно на страницу.
		|Выберите группу, в которую нужно поместить панель отчета'"));
		Возврат;
	КонецЕсли;
	
	
	ТекущаяСтрока = Элементы.СоставПанели.ТекущиеДанные;
	
	Родитель = ТекущаяСтрока.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат;
	ИначеЕсли ТекущаяСтрока.ТипЗаписи = 1 Тогда
		СтрокаВставки = ТекущаяСтрока;
	Иначе
		СтрокаВставки = Родитель;
	КонецЕсли;
	
	МассивЭлементов = СтрокаВставки.ПолучитьЭлементы();
	
	Индекс = МассивЭлементов.Индекс(Элементы.СоставПанели.ТекущиеДанные);
	
	Если Индекс <> -1 Тогда
		НоваяСтрока = МассивЭлементов.Вставить(Индекс);
	Иначе
		НоваяСтрока = МассивЭлементов.Добавить();
	КонецЕсли;
	
	НоваяСтрока.ТипЗаписи              = 77;
	НоваяСтрока.Использование          = Истина;
	НоваяСтрока.ОтображатьНаименование = Истина;
	
	ЯвляетсяДиаграммой     = Ложь;
	НаименованиеОтчета     = Нстр("ru = 'Диаграмма ганта'");
	
	НоваяСтрока.ВидПроизвольногоОтчета = 77;        
	НоваяСтрока.Область                          = Нстр("ru = 'Диаграмма_Ганта'");
	НоваяСтрока.НовыйОбъект                      = Истина;
	НоваяСтрока.ИдентификаторОбласти             = Новый УникальныйИдентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимМоделированияПриИзменении(Элемент)
	
	Элементы.СоставПанелиРежим.Видимость = Объект.РежимМоделирования;

КонецПроцедуры



